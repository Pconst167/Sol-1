0001   0000             ; --- FILENAME: ../solarium/usr/bin/ls
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $ls_count 
0011   0408             ; $ls_filetype 
0012   0408             ; $ls_file_attrib 
0013   0408 52 03 00      sub sp, 3
0014   040B             ;; prog = 0; 
0015   040B 3B 8D 25      mov d, _prog ; $prog         
0016   040E 26 00 00      mov b, $0        
0017   0411 FD 43         mov [d], b
0018   0413             ;; ls_count = 0; 
0019   0413 FA 00 00      lea d, [bp + 0] ; $ls_count         
0020   0416 26 00 00      mov b, $0        
0021   0419 FD 3E         mov [d], bl
0022   041B             ;; transient_area = alloc(1536); 
0023   041B 3B 8F 27      mov d, _transient_area ; $transient_area
0024   041E DA            push d
0025   041F 26 00 06      mov b, $600
0026   0422 FD AB         swp b
0027   0424 D8            push b
0028   0425 07 72 10      call alloc
0029   0428 51 02 00      add sp, 2
0030   042B E7            pop d
0031   042C FD 43         mov [d], b
0032   042E             
0033   042E             ; --- BEGIN INLINE ASM BLOCK
0034   042E               
0035   042E             fs_ls:
0036   042E FD 77         inc b                        
0037   0430 38 00 00      mov c, 0                     
0038   0433 22 01         mov ah, $01                  
out/ls.asm line 0039: Label not found: (transient_area)
out/ls.asm line 0039: Unused data in MS byte of argument. (2)
0039   0435 3B 00 00      mov d, transient_area
out/ls.asm line 0040: Label not found: (ide_read_sect)
out/ls.asm line 0040: Unused data in MS byte of argument. (2)
0040   0438 07 00 00      call ide_read_sect           
0041   043B FD 10         cla
out/ls.asm line 0042: Label not found: (index)
out/ls.asm line 0042: Unused data in MS byte of argument. (2)
0042   043D 42 00 00      mov [index], a               
out/ls.asm line 0043: Label not found: (ls_count)
out/ls.asm line 0043: Unused data in MS byte of argument. (2)
0043   0440 3D 00 00      mov [ls_count], al           
0044   0443             fs_ls_L1:
0045   0443 BD 00         cmp byte [d], 0              
0046   0445 C6 F2 04      je fs_ls_next
0047   0448             fs_ls_non_null:
out/ls.asm line 0048: Label not found: (ls_count)
out/ls.asm line 0048: Unused data in MS byte of argument. (2)
0048   0448 1D 00 00      mov al, [ls_count]
0049   044B 7A            inc al
out/ls.asm line 0050: Label not found: (ls_count)
out/ls.asm line 0050: Unused data in MS byte of argument. (2)
0050   044C 3D 00 00      mov [ls_count], al           
0051   044F 1F 18 00      mov al, [d + 24]
0052   0452 87 38         and al, %00111000
0053   0454 FD A2 03      shr al, 3
out/ls.asm line 0054: Label not found: (ls_file_type)
out/ls.asm line 0054: Unused data in MS byte of argument. (2)
0054   0457 3D 00 00      mov [ls_file_type], al       
0055   045A 22 00         mov ah, 0                    
out/ls.asm line 0056: Label not found: (file_type)
out/ls.asm line 0056: Unused data in MS byte of argument. (2)
0056   045C B7 00 00      mov a, [a + file_type]      
0057   045F 23            mov ah, al
0058   0460 07 FA 11      call _putchar
0059   0463 1F 18 00      mov al, [d + 24]
0060   0466 87 01         and al, %00000001
0061   0468 22 00         mov ah, 0
out/ls.asm line 0062: Label not found: (file_attrib)
out/ls.asm line 0062: Unused data in MS byte of argument. (2)
0062   046A B7 00 00      mov a, [a + file_attrib]     
0063   046D 23            mov ah, al
0064   046E 07 FA 11      call _putchar
0065   0471 1F 18 00      mov al, [d + 24]
0066   0474 87 02         and al, %00000010
0067   0476 22 00         mov ah, 0
out/ls.asm line 0068: Label not found: (file_attrib)
out/ls.asm line 0068: Unused data in MS byte of argument. (2)
0068   0478 B7 00 00      mov a, [a + file_attrib]     
0069   047B 23            mov ah, al
0070   047C 07 FA 11      call _putchar
0071   047F 1F 18 00      mov al, [d + 24]
0072   0482 87 04         and al, %00000100
0073   0484 22 00         mov ah, 0
out/ls.asm line 0074: Label not found: (ls_file_attrib)
out/ls.asm line 0074: Unused data in MS byte of argument. (2)
0074   0486 3D 00 00      mov [ls_file_attrib], al
out/ls.asm line 0075: Label not found: (file_attrib)
out/ls.asm line 0075: Unused data in MS byte of argument. (2)
0075   0489 B7 00 00      mov a, [a + file_attrib]     
0076   048C 23            mov ah, al
0077   048D 07 FA 11      call _putchar
0078   0490 22 20         mov ah, $20
0079   0492 07 FA 11      call _putchar  
0080   0495 16 1B 00      mov a, [d + 27]
0081   0498 07 6D 13      call print_u16d              
0082   049B 22 20         mov ah, $20
0083   049D 07 FA 11      call _putchar  
0084   04A0 16 19 00      mov a, [d + 25]
0085   04A3 07 6D 13      call print_u16d              
0086   04A6 22 20         mov ah, $20
0087   04A8 07 FA 11      call _putchar
0088   04AB               
0089   04AB 33 1D 00      mov bl, [d + 29]             
0090   04AE 07 E0 13      call print_u8x
0091   04B1 22 20         mov ah, $20
0092   04B3 07 FA 11      call _putchar  
0093   04B6 1F 1E 00      mov al, [d + 30]             
0094   04B9 FD 9E 02      shl al, 2
0095   04BC DA            push d
out/ls.asm line 0096: Label not found: (s_months)
out/ls.asm line 0096: Unused data in MS byte of argument. (2)
0096   04BD 3B 00 00      mov d, s_months
0097   04C0 22 00         mov ah, 0
0098   04C2 59            add d, a
0099   04C3 07 44 13      call _puts
0100   04C6 E7            pop d
0101   04C7 22 20         mov ah, $20
0102   04C9 07 FA 11      call _putchar
0103   04CC 2E 20         mov bl, $20
0104   04CE 07 E0 13      call print_u8x
0105   04D1 33 1F 00      mov bl, [d + 31]             
0106   04D4 07 E0 13      call print_u8x  
0107   04D7 22 20         mov ah, $20
0108   04D9 07 FA 11      call _putchar  
0109   04DC             fs_ls_print:
0110   04DC 07 44 13      call _puts                   
0111   04DF               
out/ls.asm line 0112: Label not found: (ls_file_type)
out/ls.asm line 0112: Unused data in MS byte of argument. (2)
0112   04DF 1D 00 00      mov al, [ls_file_type]
0113   04E2 B9 01         cmp al, 1
0114   04E4 C6 15 05      je fs_ls_format_dir
0115   04E7             fs_ls_formatexe_test:
out/ls.asm line 0116: Label not found: (ls_file_attrib)
out/ls.asm line 0116: Unused data in MS byte of argument. (2)
0116   04E7 1D 00 00      mov al, [ls_file_attrib]
0117   04EA B9 04         cmp al, 4         
0118   04EC C6 1D 05      je fs_ls_format_exe
0119   04EF             fs_ls_newline:
0120   04EF 07 F1 12      call printnl
0121   04F2             fs_ls_next:
out/ls.asm line 0122: Label not found: (index)
out/ls.asm line 0122: Unused data in MS byte of argument. (2)
0122   04F2 14 00 00      mov a, [index]
0123   04F5 77            inc a
out/ls.asm line 0124: Label not found: (index)
out/ls.asm line 0124: Unused data in MS byte of argument. (2)
0124   04F6 42 00 00      mov [index], a
out/ls.asm line 0125: Label not found: (FST_FILES_PER_DIR)
out/ls.asm line 0125: Unused data in MS byte of argument. (2)
0125   04F9 AF 00 00      cmp a, FST_FILES_PER_DIR
0126   04FC C6 05 05      je fs_ls_end
0127   04FF 58 20 00      add d, 32      
0128   0502 0A 43 04      jmp fs_ls_L1  
0129   0505             fs_ls_end:
out/ls.asm line 0130: Label not found: (s_ls_total)
out/ls.asm line 0130: Unused data in MS byte of argument. (2)
0130   0505 3B 00 00      mov d, s_ls_total
0131   0508 07 44 13      call _puts
out/ls.asm line 0132: Label not found: (ls_count)
out/ls.asm line 0132: Unused data in MS byte of argument. (2)
0132   050B 1D 00 00      mov al, [ls_count]
0133   050E 07 F2 13      call print_u8d
0134   0511 07 F1 12      call printnl
0135   0514 06            sysret
0136   0515             fs_ls_format_dir:
0137   0515 22 2F         mov ah, '/'
0138   0517 07 FA 11      call _putchar
0139   051A 0A E7 04      jmp fs_ls_formatexe_test
0140   051D             fs_ls_format_exe:
0141   051D 22 2A         mov ah, '*'
0142   051F 07 FA 11      call _putchar
0143   0522 0A EF 04      jmp fs_ls_newline
0144   0525             ; --- END INLINE ASM BLOCK
0145   0525             
0146   0525 05 0B         syscall sys_terminate_proc
0147   0527             
0148   0527             include_ctype_lib:
0149   0527 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0150   052A             
0151   052A             ; --- BEGIN INLINE ASM BLOCK
0152   052A             .include "lib/ctype.asm"
0001+  052A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  052A             ; ctype.s
0003+  052A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  052A             
0005+  052A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  052A             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  052A             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  052A             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  052A             ;; characters are supported.
0010+  052A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  052A             ;; _isalnum 
0012+  052A             ;; _isalpha 
0013+  052A             ;; islower 
0014+  052A             ;; isupper 
0015+  052A             ;; _isdigit 
0016+  052A             ;; isxdigit
0017+  052A             ;; iscntrl 
0018+  052A             ;; isgraph 
0019+  052A             ;; _isspace 
0020+  052A             ;; isblank 
0021+  052A             ;; isprint 
0022+  052A             ;; ispunct 
0023+  052A             ;; tolower 
0024+  052A             ;; toupper
0025+  052A             
0026+  052A             
0027+  052A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  052A             ;; IS ALPHANUMERIC
0029+  052A             ;; sets ZF according with result
0030+  052A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  052A             _isalnum:
0032+  052A 07 47 05    	call _isalpha
0033+  052D C6 33 05    	je _isalnum_exit
0034+  0530 07 34 05    	call _isdigit
0035+  0533             _isalnum_exit:
0036+  0533 09          	ret	
0037+  0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0534             ;; IS DIGIT
0039+  0534             ;; sets ZF according with result
0040+  0534             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0534             _isdigit:
0042+  0534 DB          	push al
0043+  0535 B9 30       	cmp al, '0'
0044+  0537 C8 43 05    	jlu _isdigit_false
0045+  053A B9 39       	cmp al, '9'
0046+  053C D1 43 05    	jgu _isdigit_false
0047+  053F 87 00       	and al, 0	; set ZF
0048+  0541 E8          	pop al
0049+  0542 09          	ret
0050+  0543             _isdigit_false:
0051+  0543 8B 01       	or al, 1	; clear ZF
0052+  0545 E8          	pop al
0053+  0546 09          	ret	
0054+  0547             	
0055+  0547             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0547             ;; IS ALPHA
0057+  0547             ;; sets ZF according with result
0058+  0547             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0547             _isalpha:
0060+  0547 DB          	push al
0061+  0548 B9 5F       	cmp al, '_'
0062+  054A C6 6A 05    	je _isalpha_true
0063+  054D B9 2E       	cmp al, '.'
0064+  054F C6 6A 05    	je _isalpha_true
0065+  0552 B9 41       	cmp al, 'A'
0066+  0554 C8 66 05    	jlu _isalpha_false
0067+  0557 B9 7A       	cmp al, 'z'
0068+  0559 D1 66 05    	jgu _isalpha_false
0069+  055C B9 5A       	cmp al, 'Z'
0070+  055E D0 6A 05    	jleu _isalpha_true
0071+  0561 B9 61       	cmp al, 'a'
0072+  0563 C9 6A 05    	jgeu _isalpha_true
0073+  0566             _isalpha_false:
0074+  0566 8B 01       	or al, 1	; clear ZF
0075+  0568 E8          	pop al
0076+  0569 09          	ret
0077+  056A             _isalpha_true:
0078+  056A 87 00       	and al, 0	; set ZF
0079+  056C E8          	pop al
0080+  056D 09          	ret
0081+  056E             
0082+  056E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  056E             ;; IS PATH-ALPHA
0084+  056E             ;; sets ZF according with result
0085+  056E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  056E             ispath:
0087+  056E DB          	push al
0088+  056F 07 34 05    	call _isdigit
0089+  0572 C6 9C 05    	je ispath_true
0090+  0575 B9 5F       	cmp al, '_'
0091+  0577 C6 9C 05    	je ispath_true
0092+  057A B9 2F       	cmp al, '/'
0093+  057C C6 9C 05    	je ispath_true
0094+  057F B9 2E       	cmp al, '.'
0095+  0581 C6 9C 05    	je ispath_true
0096+  0584 B9 41       	cmp al, 'A'
0097+  0586 C8 98 05    	jlu ispath_false
0098+  0589 B9 7A       	cmp al, 'z'
0099+  058B D1 98 05    	jgu ispath_false
0100+  058E B9 5A       	cmp al, 'Z'
0101+  0590 D0 9C 05    	jleu ispath_true
0102+  0593 B9 61       	cmp al, 'a'
0103+  0595 C9 9C 05    	jgeu ispath_true
0104+  0598             ispath_false:
0105+  0598 8B 01       	or al, 1	; clear ZF
0106+  059A E8          	pop al
0107+  059B 09          	ret
0108+  059C             ispath_true:
0109+  059C 87 00       	and al, 0	; set ZF
0110+  059E E8          	pop al
0111+  059F 09          	ret
0112+  05A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  05A0             ;; IS SPACE
0114+  05A0             ;; sets ZF according with result
0115+  05A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  05A0             _isspace:
0117+  05A0 B9 20       	cmp al, $20		; ' '
0118+  05A2 C6 B6 05    	je _isspace_exit
0119+  05A5 B9 09       	cmp al, $09		; '\t'
0120+  05A7 C6 B6 05    	je _isspace_exit
0121+  05AA B9 0A       	cmp al, $0A		; '\n'
0122+  05AC C6 B6 05    	je _isspace_exit
0123+  05AF B9 0D       	cmp al, $0D		; '\r'
0124+  05B1 C6 B6 05    	je _isspace_exit
0125+  05B4 B9 0B       	cmp al, $0B		; '\v'
0126+  05B6             _isspace_exit:
0127+  05B6 09          	ret	
0128+  05B7             
0129+  05B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  05B7             ; TO LOWER
0131+  05B7             ; input in AL
0132+  05B7             ; output in AL
0133+  05B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  05B7             _to_lower:
0135+  05B7 B9 5A       	cmp al, 'Z'
0136+  05B9 D1 BE 05    	jgu _to_lower_ret
0137+  05BC 6A 20       	add al, $20				; convert to lower case
0138+  05BE             _to_lower_ret:
0139+  05BE 09          	ret
0140+  05BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  05BF             ; TO UPPER
0142+  05BF             ; input in AL
0143+  05BF             ; output in AL
0144+  05BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  05BF             _to_upper:
0146+  05BF B9 61       	cmp al, 'a'
0147+  05C1 C8 C6 05    	jlu _to_upper_ret
0148+  05C4 6F 20       	sub al, $20			; convert to upper case
0149+  05C6             _to_upper_ret:
0150+  05C6 09          	ret
0151+  05C7             
0153   05C7             ; --- END INLINE ASM BLOCK
0154   05C7             
0155   05C7 F9            leave
0156   05C8 09            ret
0157   05C9             
0158   05C9             is_space:
0159   05C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0160   05CC             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0161   05CC 34 05 00      mov bl, [bp + 5] ; $c
0162   05CF A7 00         mov bh, 0             
0163   05D1             ; START RELATIONAL
0164   05D1 D7            push a
0165   05D2 11            mov a, b
0166   05D3 26 20 00      mov b, $20
0167   05D6 B0            cmp a, b
0168   05D7 FD 71         seq ; ==
0169   05D9 E4            pop a
0170   05DA             ; END RELATIONAL
0171   05DA D7            push a
0172   05DB 11            mov a, b
0173   05DC 34 05 00      mov bl, [bp + 5] ; $c
0174   05DF A7 00         mov bh, 0             
0175   05E1             ; START RELATIONAL
0176   05E1 D7            push a
0177   05E2 11            mov a, b
0178   05E3 26 09 00      mov b, $9
0179   05E6 B0            cmp a, b
0180   05E7 FD 71         seq ; ==
0181   05E9 E4            pop a
0182   05EA             ; END RELATIONAL
0183   05EA FD A8         sor a, b ; ||
0184   05EC 11            mov a, b
0185   05ED 34 05 00      mov bl, [bp + 5] ; $c
0186   05F0 A7 00         mov bh, 0             
0187   05F2             ; START RELATIONAL
0188   05F2 D7            push a
0189   05F3 11            mov a, b
0190   05F4 26 0A 00      mov b, $a
0191   05F7 B0            cmp a, b
0192   05F8 FD 71         seq ; ==
0193   05FA E4            pop a
0194   05FB             ; END RELATIONAL
0195   05FB FD A8         sor a, b ; ||
0196   05FD 11            mov a, b
0197   05FE 34 05 00      mov bl, [bp + 5] ; $c
0198   0601 A7 00         mov bh, 0             
0199   0603             ; START RELATIONAL
0200   0603 D7            push a
0201   0604 11            mov a, b
0202   0605 26 0D 00      mov b, $d
0203   0608 B0            cmp a, b
0204   0609 FD 71         seq ; ==
0205   060B E4            pop a
0206   060C             ; END RELATIONAL
0207   060C FD A8         sor a, b ; ||
0208   060E E4            pop a
0209   060F F9            leave
0210   0610 09            ret
0211   0611             
0212   0611             is_digit:
0213   0611 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0214   0614             ;; return c >= '0' && c <= '9'; 
0215   0614 34 05 00      mov bl, [bp + 5] ; $c
0216   0617 A7 00         mov bh, 0             
0217   0619             ; START RELATIONAL
0218   0619 D7            push a
0219   061A 11            mov a, b
0220   061B 26 30 00      mov b, $30
0221   061E B0            cmp a, b
0222   061F FD 80         sge ; >=
0223   0621 E4            pop a
0224   0622             ; END RELATIONAL
0225   0622 D7            push a
0226   0623 11            mov a, b
0227   0624 34 05 00      mov bl, [bp + 5] ; $c
0228   0627 A7 00         mov bh, 0             
0229   0629             ; START RELATIONAL
0230   0629 D7            push a
0231   062A 11            mov a, b
0232   062B 26 39 00      mov b, $39
0233   062E B0            cmp a, b
0234   062F FD 74         sle ; <=
0235   0631 E4            pop a
0236   0632             ; END RELATIONAL
0237   0632 FD A7         sand a, b ; &&
0238   0634 E4            pop a
0239   0635 F9            leave
0240   0636 09            ret
0241   0637             
0242   0637             is_alpha:
0243   0637 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0244   063A             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
0245   063A 34 05 00      mov bl, [bp + 5] ; $c
0246   063D A7 00         mov bh, 0             
0247   063F             ; START RELATIONAL
0248   063F D7            push a
0249   0640 11            mov a, b
0250   0641 26 61 00      mov b, $61
0251   0644 B0            cmp a, b
0252   0645 FD 80         sge ; >=
0253   0647 E4            pop a
0254   0648             ; END RELATIONAL
0255   0648 D7            push a
0256   0649 11            mov a, b
0257   064A 34 05 00      mov bl, [bp + 5] ; $c
0258   064D A7 00         mov bh, 0             
0259   064F             ; START RELATIONAL
0260   064F D7            push a
0261   0650 11            mov a, b
0262   0651 26 7A 00      mov b, $7a
0263   0654 B0            cmp a, b
0264   0655 FD 74         sle ; <=
0265   0657 E4            pop a
0266   0658             ; END RELATIONAL
0267   0658 FD A7         sand a, b ; &&
0268   065A E4            pop a
0269   065B D7            push a
0270   065C 11            mov a, b
0271   065D 34 05 00      mov bl, [bp + 5] ; $c
0272   0660 A7 00         mov bh, 0             
0273   0662             ; START RELATIONAL
0274   0662 D7            push a
0275   0663 11            mov a, b
0276   0664 26 41 00      mov b, $41
0277   0667 B0            cmp a, b
0278   0668 FD 80         sge ; >=
0279   066A E4            pop a
0280   066B             ; END RELATIONAL
0281   066B D7            push a
0282   066C 11            mov a, b
0283   066D 34 05 00      mov bl, [bp + 5] ; $c
0284   0670 A7 00         mov bh, 0             
0285   0672             ; START RELATIONAL
0286   0672 D7            push a
0287   0673 11            mov a, b
0288   0674 26 5A 00      mov b, $5a
0289   0677 B0            cmp a, b
0290   0678 FD 74         sle ; <=
0291   067A E4            pop a
0292   067B             ; END RELATIONAL
0293   067B FD A7         sand a, b ; &&
0294   067D E4            pop a
0295   067E FD A8         sor a, b ; ||
0296   0680 11            mov a, b
0297   0681 34 05 00      mov bl, [bp + 5] ; $c
0298   0684 A7 00         mov bh, 0             
0299   0686             ; START RELATIONAL
0300   0686 D7            push a
0301   0687 11            mov a, b
0302   0688 26 5F 00      mov b, $5f
0303   068B B0            cmp a, b
0304   068C FD 71         seq ; ==
0305   068E E4            pop a
0306   068F             ; END RELATIONAL
0307   068F FD A8         sor a, b ; ||
0308   0691 E4            pop a
0309   0692 F9            leave
0310   0693 09            ret
0311   0694             
0312   0694             is_delimiter:
0313   0694 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0314   0697             ;; if( 
0315   0697             _if1_cond:
0316   0697 34 05 00      mov bl, [bp + 5] ; $c
0317   069A A7 00         mov bh, 0             
0318   069C             ; START RELATIONAL
0319   069C D7            push a
0320   069D 11            mov a, b
0321   069E 26 40 00      mov b, $40
0322   06A1 B0            cmp a, b
0323   06A2 FD 71         seq ; ==
0324   06A4 E4            pop a
0325   06A5             ; END RELATIONAL
0326   06A5 D7            push a
0327   06A6 11            mov a, b
0328   06A7 34 05 00      mov bl, [bp + 5] ; $c
0329   06AA A7 00         mov bh, 0             
0330   06AC             ; START RELATIONAL
0331   06AC D7            push a
0332   06AD 11            mov a, b
0333   06AE 26 23 00      mov b, $23
0334   06B1 B0            cmp a, b
0335   06B2 FD 71         seq ; ==
0336   06B4 E4            pop a
0337   06B5             ; END RELATIONAL
0338   06B5 FD A8         sor a, b ; ||
0339   06B7 11            mov a, b
0340   06B8 34 05 00      mov bl, [bp + 5] ; $c
0341   06BB A7 00         mov bh, 0             
0342   06BD             ; START RELATIONAL
0343   06BD D7            push a
0344   06BE 11            mov a, b
0345   06BF 26 24 00      mov b, $24
0346   06C2 B0            cmp a, b
0347   06C3 FD 71         seq ; ==
0348   06C5 E4            pop a
0349   06C6             ; END RELATIONAL
0350   06C6 FD A8         sor a, b ; ||
0351   06C8 11            mov a, b
0352   06C9 34 05 00      mov bl, [bp + 5] ; $c
0353   06CC A7 00         mov bh, 0             
0354   06CE             ; START RELATIONAL
0355   06CE D7            push a
0356   06CF 11            mov a, b
0357   06D0 26 2B 00      mov b, $2b
0358   06D3 B0            cmp a, b
0359   06D4 FD 71         seq ; ==
0360   06D6 E4            pop a
0361   06D7             ; END RELATIONAL
0362   06D7 FD A8         sor a, b ; ||
0363   06D9 11            mov a, b
0364   06DA 34 05 00      mov bl, [bp + 5] ; $c
0365   06DD A7 00         mov bh, 0             
0366   06DF             ; START RELATIONAL
0367   06DF D7            push a
0368   06E0 11            mov a, b
0369   06E1 26 2D 00      mov b, $2d
0370   06E4 B0            cmp a, b
0371   06E5 FD 71         seq ; ==
0372   06E7 E4            pop a
0373   06E8             ; END RELATIONAL
0374   06E8 FD A8         sor a, b ; ||
0375   06EA 11            mov a, b
0376   06EB 34 05 00      mov bl, [bp + 5] ; $c
0377   06EE A7 00         mov bh, 0             
0378   06F0             ; START RELATIONAL
0379   06F0 D7            push a
0380   06F1 11            mov a, b
0381   06F2 26 2A 00      mov b, $2a
0382   06F5 B0            cmp a, b
0383   06F6 FD 71         seq ; ==
0384   06F8 E4            pop a
0385   06F9             ; END RELATIONAL
0386   06F9 FD A8         sor a, b ; ||
0387   06FB 11            mov a, b
0388   06FC 34 05 00      mov bl, [bp + 5] ; $c
0389   06FF A7 00         mov bh, 0             
0390   0701             ; START RELATIONAL
0391   0701 D7            push a
0392   0702 11            mov a, b
0393   0703 26 2F 00      mov b, $2f
0394   0706 B0            cmp a, b
0395   0707 FD 71         seq ; ==
0396   0709 E4            pop a
0397   070A             ; END RELATIONAL
0398   070A FD A8         sor a, b ; ||
0399   070C 11            mov a, b
0400   070D 34 05 00      mov bl, [bp + 5] ; $c
0401   0710 A7 00         mov bh, 0             
0402   0712             ; START RELATIONAL
0403   0712 D7            push a
0404   0713 11            mov a, b
0405   0714 26 25 00      mov b, $25
0406   0717 B0            cmp a, b
0407   0718 FD 71         seq ; ==
0408   071A E4            pop a
0409   071B             ; END RELATIONAL
0410   071B FD A8         sor a, b ; ||
0411   071D 11            mov a, b
0412   071E 34 05 00      mov bl, [bp + 5] ; $c
0413   0721 A7 00         mov bh, 0             
0414   0723             ; START RELATIONAL
0415   0723 D7            push a
0416   0724 11            mov a, b
0417   0725 26 5B 00      mov b, $5b
0418   0728 B0            cmp a, b
0419   0729 FD 71         seq ; ==
0420   072B E4            pop a
0421   072C             ; END RELATIONAL
0422   072C FD A8         sor a, b ; ||
0423   072E 11            mov a, b
0424   072F 34 05 00      mov bl, [bp + 5] ; $c
0425   0732 A7 00         mov bh, 0             
0426   0734             ; START RELATIONAL
0427   0734 D7            push a
0428   0735 11            mov a, b
0429   0736 26 5D 00      mov b, $5d
0430   0739 B0            cmp a, b
0431   073A FD 71         seq ; ==
0432   073C E4            pop a
0433   073D             ; END RELATIONAL
0434   073D FD A8         sor a, b ; ||
0435   073F 11            mov a, b
0436   0740 34 05 00      mov bl, [bp + 5] ; $c
0437   0743 A7 00         mov bh, 0             
0438   0745             ; START RELATIONAL
0439   0745 D7            push a
0440   0746 11            mov a, b
0441   0747 26 28 00      mov b, $28
0442   074A B0            cmp a, b
0443   074B FD 71         seq ; ==
0444   074D E4            pop a
0445   074E             ; END RELATIONAL
0446   074E FD A8         sor a, b ; ||
0447   0750 11            mov a, b
0448   0751 34 05 00      mov bl, [bp + 5] ; $c
0449   0754 A7 00         mov bh, 0             
0450   0756             ; START RELATIONAL
0451   0756 D7            push a
0452   0757 11            mov a, b
0453   0758 26 29 00      mov b, $29
0454   075B B0            cmp a, b
0455   075C FD 71         seq ; ==
0456   075E E4            pop a
0457   075F             ; END RELATIONAL
0458   075F FD A8         sor a, b ; ||
0459   0761 11            mov a, b
0460   0762 34 05 00      mov bl, [bp + 5] ; $c
0461   0765 A7 00         mov bh, 0             
0462   0767             ; START RELATIONAL
0463   0767 D7            push a
0464   0768 11            mov a, b
0465   0769 26 7B 00      mov b, $7b
0466   076C B0            cmp a, b
0467   076D FD 71         seq ; ==
0468   076F E4            pop a
0469   0770             ; END RELATIONAL
0470   0770 FD A8         sor a, b ; ||
0471   0772 11            mov a, b
0472   0773 34 05 00      mov bl, [bp + 5] ; $c
0473   0776 A7 00         mov bh, 0             
0474   0778             ; START RELATIONAL
0475   0778 D7            push a
0476   0779 11            mov a, b
0477   077A 26 7D 00      mov b, $7d
0478   077D B0            cmp a, b
0479   077E FD 71         seq ; ==
0480   0780 E4            pop a
0481   0781             ; END RELATIONAL
0482   0781 FD A8         sor a, b ; ||
0483   0783 11            mov a, b
0484   0784 34 05 00      mov bl, [bp + 5] ; $c
0485   0787 A7 00         mov bh, 0             
0486   0789             ; START RELATIONAL
0487   0789 D7            push a
0488   078A 11            mov a, b
0489   078B 26 3A 00      mov b, $3a
0490   078E B0            cmp a, b
0491   078F FD 71         seq ; ==
0492   0791 E4            pop a
0493   0792             ; END RELATIONAL
0494   0792 FD A8         sor a, b ; ||
0495   0794 11            mov a, b
0496   0795 34 05 00      mov bl, [bp + 5] ; $c
0497   0798 A7 00         mov bh, 0             
0498   079A             ; START RELATIONAL
0499   079A D7            push a
0500   079B 11            mov a, b
0501   079C 26 3B 00      mov b, $3b
0502   079F B0            cmp a, b
0503   07A0 FD 71         seq ; ==
0504   07A2 E4            pop a
0505   07A3             ; END RELATIONAL
0506   07A3 FD A8         sor a, b ; ||
0507   07A5 11            mov a, b
0508   07A6 34 05 00      mov bl, [bp + 5] ; $c
0509   07A9 A7 00         mov bh, 0             
0510   07AB             ; START RELATIONAL
0511   07AB D7            push a
0512   07AC 11            mov a, b
0513   07AD 26 3C 00      mov b, $3c
0514   07B0 B0            cmp a, b
0515   07B1 FD 71         seq ; ==
0516   07B3 E4            pop a
0517   07B4             ; END RELATIONAL
0518   07B4 FD A8         sor a, b ; ||
0519   07B6 11            mov a, b
0520   07B7 34 05 00      mov bl, [bp + 5] ; $c
0521   07BA A7 00         mov bh, 0             
0522   07BC             ; START RELATIONAL
0523   07BC D7            push a
0524   07BD 11            mov a, b
0525   07BE 26 3E 00      mov b, $3e
0526   07C1 B0            cmp a, b
0527   07C2 FD 71         seq ; ==
0528   07C4 E4            pop a
0529   07C5             ; END RELATIONAL
0530   07C5 FD A8         sor a, b ; ||
0531   07C7 11            mov a, b
0532   07C8 34 05 00      mov bl, [bp + 5] ; $c
0533   07CB A7 00         mov bh, 0             
0534   07CD             ; START RELATIONAL
0535   07CD D7            push a
0536   07CE 11            mov a, b
0537   07CF 26 3D 00      mov b, $3d
0538   07D2 B0            cmp a, b
0539   07D3 FD 71         seq ; ==
0540   07D5 E4            pop a
0541   07D6             ; END RELATIONAL
0542   07D6 FD A8         sor a, b ; ||
0543   07D8 11            mov a, b
0544   07D9 34 05 00      mov bl, [bp + 5] ; $c
0545   07DC A7 00         mov bh, 0             
0546   07DE             ; START RELATIONAL
0547   07DE D7            push a
0548   07DF 11            mov a, b
0549   07E0 26 21 00      mov b, $21
0550   07E3 B0            cmp a, b
0551   07E4 FD 71         seq ; ==
0552   07E6 E4            pop a
0553   07E7             ; END RELATIONAL
0554   07E7 FD A8         sor a, b ; ||
0555   07E9 11            mov a, b
0556   07EA 34 05 00      mov bl, [bp + 5] ; $c
0557   07ED A7 00         mov bh, 0             
0558   07EF             ; START RELATIONAL
0559   07EF D7            push a
0560   07F0 11            mov a, b
0561   07F1 26 5E 00      mov b, $5e
0562   07F4 B0            cmp a, b
0563   07F5 FD 71         seq ; ==
0564   07F7 E4            pop a
0565   07F8             ; END RELATIONAL
0566   07F8 FD A8         sor a, b ; ||
0567   07FA 11            mov a, b
0568   07FB 34 05 00      mov bl, [bp + 5] ; $c
0569   07FE A7 00         mov bh, 0             
0570   0800             ; START RELATIONAL
0571   0800 D7            push a
0572   0801 11            mov a, b
0573   0802 26 26 00      mov b, $26
0574   0805 B0            cmp a, b
0575   0806 FD 71         seq ; ==
0576   0808 E4            pop a
0577   0809             ; END RELATIONAL
0578   0809 FD A8         sor a, b ; ||
0579   080B 11            mov a, b
0580   080C 34 05 00      mov bl, [bp + 5] ; $c
0581   080F A7 00         mov bh, 0             
0582   0811             ; START RELATIONAL
0583   0811 D7            push a
0584   0812 11            mov a, b
0585   0813 26 7C 00      mov b, $7c
0586   0816 B0            cmp a, b
0587   0817 FD 71         seq ; ==
0588   0819 E4            pop a
0589   081A             ; END RELATIONAL
0590   081A FD A8         sor a, b ; ||
0591   081C 11            mov a, b
0592   081D 34 05 00      mov bl, [bp + 5] ; $c
0593   0820 A7 00         mov bh, 0             
0594   0822             ; START RELATIONAL
0595   0822 D7            push a
0596   0823 11            mov a, b
0597   0824 26 7E 00      mov b, $7e
0598   0827 B0            cmp a, b
0599   0828 FD 71         seq ; ==
0600   082A E4            pop a
0601   082B             ; END RELATIONAL
0602   082B FD A8         sor a, b ; ||
0603   082D 11            mov a, b
0604   082E 34 05 00      mov bl, [bp + 5] ; $c
0605   0831 A7 00         mov bh, 0             
0606   0833             ; START RELATIONAL
0607   0833 D7            push a
0608   0834 11            mov a, b
0609   0835 26 2E 00      mov b, $2e
0610   0838 B0            cmp a, b
0611   0839 FD 71         seq ; ==
0612   083B E4            pop a
0613   083C             ; END RELATIONAL
0614   083C FD A8         sor a, b ; ||
0615   083E E4            pop a
0616   083F C0 00 00      cmp b, 0
0617   0842 C6 4D 08      je _if1_else
0618   0845             _if1_true:
0619   0845             ;; return 1; 
0620   0845 26 01 00      mov b, $1
0621   0848 F9            leave
0622   0849 09            ret
0623   084A 0A 52 08      jmp _if1_exit
0624   084D             _if1_else:
0625   084D             ;; return 0; 
0626   084D 26 00 00      mov b, $0
0627   0850 F9            leave
0628   0851 09            ret
0629   0852             _if1_exit:
0630   0852 F9            leave
0631   0853 09            ret
0632   0854             
0633   0854             strcpy:
0634   0854 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0635   0857             ; $psrc 
0636   0857             ; $pdest 
0637   0857 52 04 00      sub sp, 4
0638   085A             ;; psrc = src; 
0639   085A FA FF FF      lea d, [bp + -1] ; $psrc         
0640   085D 2C 05 00      mov b, [bp + 5] ; $src                     
0641   0860 FD 43         mov [d], b
0642   0862             ;; pdest = dest; 
0643   0862 FA FD FF      lea d, [bp + -3] ; $pdest         
0644   0865 2C 07 00      mov b, [bp + 7] ; $dest                     
0645   0868 FD 43         mov [d], b
0646   086A             ;; while(*psrc) *pdest++ = *psrc++; 
0647   086A             _while2_cond:
0648   086A 2C FF FF      mov b, [bp + -1] ; $psrc             
0649   086D 74            mov d, b
0650   086E 32            mov bl, [d]
0651   086F A7 00         mov bh, 0
0652   0871 C0 00 00      cmp b, 0
0653   0874 C6 9E 08      je _while2_exit
0654   0877             _while2_block:
0655   0877             ;; *pdest++ = *psrc++; 
0656   0877 2C FD FF      mov b, [bp + -3] ; $pdest             
0657   087A FD 79         mov g, b
0658   087C FD 77         inc b
0659   087E FA FD FF      lea d, [bp + -3] ; $pdest
0660   0881 FD 43         mov [d], b
0661   0883 FD 27         mov b, g
0662   0885 D8            push b
0663   0886 2C FF FF      mov b, [bp + -1] ; $psrc             
0664   0889 FD 79         mov g, b
0665   088B FD 77         inc b
0666   088D FA FF FF      lea d, [bp + -1] ; $psrc
0667   0890 FD 43         mov [d], b
0668   0892 FD 27         mov b, g
0669   0894 74            mov d, b
0670   0895 32            mov bl, [d]
0671   0896 A7 00         mov bh, 0
0672   0898 E7            pop d
0673   0899 FD 3E         mov [d], bl
0674   089B 0A 6A 08      jmp _while2_cond
0675   089E             _while2_exit:
0676   089E             ;; *pdest = '\0'; 
0677   089E 2C FD FF      mov b, [bp + -3] ; $pdest             
0678   08A1 D8            push b
0679   08A2 26 00 00      mov b, $0
0680   08A5 E7            pop d
0681   08A6 FD 3E         mov [d], bl
0682   08A8 F9            leave
0683   08A9 09            ret
0684   08AA             
0685   08AA             strcmp:
0686   08AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0687   08AD             ;; while (*s1 && (*s1 == *s2)) { 
0688   08AD             _while3_cond:
0689   08AD 2C 07 00      mov b, [bp + 7] ; $s1             
0690   08B0 74            mov d, b
0691   08B1 32            mov bl, [d]
0692   08B2 A7 00         mov bh, 0
0693   08B4 D7            push a
0694   08B5 11            mov a, b
0695   08B6 2C 07 00      mov b, [bp + 7] ; $s1             
0696   08B9 74            mov d, b
0697   08BA 32            mov bl, [d]
0698   08BB A7 00         mov bh, 0
0699   08BD             ; START RELATIONAL
0700   08BD D7            push a
0701   08BE 11            mov a, b
0702   08BF 2C 05 00      mov b, [bp + 5] ; $s2             
0703   08C2 74            mov d, b
0704   08C3 32            mov bl, [d]
0705   08C4 A7 00         mov bh, 0
0706   08C6 B0            cmp a, b
0707   08C7 FD 71         seq ; ==
0708   08C9 E4            pop a
0709   08CA             ; END RELATIONAL
0710   08CA FD A7         sand a, b ; &&
0711   08CC E4            pop a
0712   08CD C0 00 00      cmp b, 0
0713   08D0 C6 F2 08      je _while3_exit
0714   08D3             _while3_block:
0715   08D3             ;; s1++; 
0716   08D3 2C 07 00      mov b, [bp + 7] ; $s1             
0717   08D6 FD 79         mov g, b
0718   08D8 FD 77         inc b
0719   08DA FA 07 00      lea d, [bp + 7] ; $s1
0720   08DD FD 43         mov [d], b
0721   08DF FD 27         mov b, g
0722   08E1             ;; s2++; 
0723   08E1 2C 05 00      mov b, [bp + 5] ; $s2             
0724   08E4 FD 79         mov g, b
0725   08E6 FD 77         inc b
0726   08E8 FA 05 00      lea d, [bp + 5] ; $s2
0727   08EB FD 43         mov [d], b
0728   08ED FD 27         mov b, g
0729   08EF 0A AD 08      jmp _while3_cond
0730   08F2             _while3_exit:
0731   08F2             ;; return *s1 - *s2; 
0732   08F2 2C 07 00      mov b, [bp + 7] ; $s1             
0733   08F5 74            mov d, b
0734   08F6 32            mov bl, [d]
0735   08F7 A7 00         mov bh, 0
0736   08F9             ; START TERMS
0737   08F9 D7            push a
0738   08FA 11            mov a, b
0739   08FB 2C 05 00      mov b, [bp + 5] ; $s2             
0740   08FE 74            mov d, b
0741   08FF 32            mov bl, [d]
0742   0900 A7 00         mov bh, 0
0743   0902 60            sub a, b
0744   0903 27            mov b, a
0745   0904 E4            pop a
0746   0905             ; END TERMS
0747   0905 F9            leave
0748   0906 09            ret
0749   0907             
0750   0907             strcat:
0751   0907 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0752   090A             ; $dest_len 
0753   090A             ; $i 
0754   090A 52 04 00      sub sp, 4
0755   090D             ;; dest_len = strlen(dest); 
0756   090D FA FF FF      lea d, [bp + -1] ; $dest_len
0757   0910 DA            push d
0758   0911 2C 07 00      mov b, [bp + 7] ; $dest             
0759   0914 FD AB         swp b
0760   0916 D8            push b
0761   0917 07 A6 09      call strlen
0762   091A 51 02 00      add sp, 2
0763   091D E7            pop d
0764   091E FD 43         mov [d], b
0765   0920             ;; for (i = 0; src[i] != 0; i=i+1) { 
0766   0920             _for4_init:
0767   0920 FA FD FF      lea d, [bp + -3] ; $i         
0768   0923 26 00 00      mov b, $0        
0769   0926 FD 43         mov [d], b
0770   0928             _for4_cond:
0771   0928 FA 05 00      lea d, [bp + 5] ; $src
0772   092B FD 2A         mov d, [d]
0773   092D D7            push a         
0774   092E 2C FD FF      mov b, [bp + -3] ; $i                     
0775   0931 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0776   0935 E4            pop a
0777   0936 32            mov bl, [d]
0778   0937 A7 00         mov bh, 0
0779   0939             ; START RELATIONAL
0780   0939 D7            push a
0781   093A 11            mov a, b
0782   093B 26 00 00      mov b, $0
0783   093E B0            cmp a, b
0784   093F FD 72         sneq ; !=
0785   0941 E4            pop a
0786   0942             ; END RELATIONAL
0787   0942 C0 00 00      cmp b, 0
0788   0945 C6 86 09      je _for4_exit
0789   0948             _for4_block:
0790   0948             ;; dest[dest_len + i] = src[i]; 
0791   0948 FA 07 00      lea d, [bp + 7] ; $dest
0792   094B FD 2A         mov d, [d]
0793   094D D7            push a         
0794   094E 2C FF FF      mov b, [bp + -1] ; $dest_len             
0795   0951             ; START TERMS
0796   0951 D7            push a
0797   0952 11            mov a, b
0798   0953 2C FD FF      mov b, [bp + -3] ; $i             
0799   0956 54            add a, b
0800   0957 27            mov b, a
0801   0958 E4            pop a
0802   0959             ; END TERMS        
0803   0959 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0804   095D E4            pop a
0805   095E DA            push d
0806   095F FA 05 00      lea d, [bp + 5] ; $src
0807   0962 FD 2A         mov d, [d]
0808   0964 D7            push a         
0809   0965 2C FD FF      mov b, [bp + -3] ; $i                     
0810   0968 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0811   096C E4            pop a
0812   096D 32            mov bl, [d]
0813   096E A7 00         mov bh, 0
0814   0970 E7            pop d
0815   0971 FD 3E         mov [d], bl
0816   0973             _for4_update:
0817   0973 FA FD FF      lea d, [bp + -3] ; $i         
0818   0976 2C FD FF      mov b, [bp + -3] ; $i             
0819   0979             ; START TERMS
0820   0979 D7            push a
0821   097A 11            mov a, b
0822   097B 26 01 00      mov b, $1
0823   097E 54            add a, b
0824   097F 27            mov b, a
0825   0980 E4            pop a
0826   0981             ; END TERMS        
0827   0981 FD 43         mov [d], b
0828   0983 0A 28 09      jmp _for4_cond
0829   0986             _for4_exit:
0830   0986             ;; dest[dest_len + i] = 0; 
0831   0986 FA 07 00      lea d, [bp + 7] ; $dest
0832   0989 FD 2A         mov d, [d]
0833   098B D7            push a         
0834   098C 2C FF FF      mov b, [bp + -1] ; $dest_len             
0835   098F             ; START TERMS
0836   098F D7            push a
0837   0990 11            mov a, b
0838   0991 2C FD FF      mov b, [bp + -3] ; $i             
0839   0994 54            add a, b
0840   0995 27            mov b, a
0841   0996 E4            pop a
0842   0997             ; END TERMS        
0843   0997 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0844   099B E4            pop a         
0845   099C 26 00 00      mov b, $0        
0846   099F FD 3E         mov [d], bl
0847   09A1             ;; return dest; 
0848   09A1 2C 07 00      mov b, [bp + 7] ; $dest             
0849   09A4 F9            leave
0850   09A5 09            ret
0851   09A6             
0852   09A6             strlen:
0853   09A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0854   09A9             ; $length 
0855   09A9 52 02 00      sub sp, 2
0856   09AC             ;; length = 0; 
0857   09AC FA FF FF      lea d, [bp + -1] ; $length         
0858   09AF 26 00 00      mov b, $0        
0859   09B2 FD 43         mov [d], b
0860   09B4             ;; while (str[length] != 0) { 
0861   09B4             _while5_cond:
0862   09B4 FA 05 00      lea d, [bp + 5] ; $str
0863   09B7 FD 2A         mov d, [d]
0864   09B9 D7            push a         
0865   09BA 2C FF FF      mov b, [bp + -1] ; $length                     
0866   09BD FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0867   09C1 E4            pop a
0868   09C2 32            mov bl, [d]
0869   09C3 A7 00         mov bh, 0
0870   09C5             ; START RELATIONAL
0871   09C5 D7            push a
0872   09C6 11            mov a, b
0873   09C7 26 00 00      mov b, $0
0874   09CA B0            cmp a, b
0875   09CB FD 72         sneq ; !=
0876   09CD E4            pop a
0877   09CE             ; END RELATIONAL
0878   09CE C0 00 00      cmp b, 0
0879   09D1 C6 E5 09      je _while5_exit
0880   09D4             _while5_block:
0881   09D4             ;; length++; 
0882   09D4 2C FF FF      mov b, [bp + -1] ; $length             
0883   09D7 FD 79         mov g, b
0884   09D9 FD 77         inc b
0885   09DB FA FF FF      lea d, [bp + -1] ; $length
0886   09DE FD 43         mov [d], b
0887   09E0 FD 27         mov b, g
0888   09E2 0A B4 09      jmp _while5_cond
0889   09E5             _while5_exit:
0890   09E5             ;; return length; 
0891   09E5 2C FF FF      mov b, [bp + -1] ; $length             
0892   09E8 F9            leave
0893   09E9 09            ret
0894   09EA             
0895   09EA             va_arg:
0896   09EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0897   09ED             ; $val 
0898   09ED 52 02 00      sub sp, 2
0899   09F0             ;; if(size == 1){ 
0900   09F0             _if6_cond:
0901   09F0 2C 05 00      mov b, [bp + 5] ; $size             
0902   09F3             ; START RELATIONAL
0903   09F3 D7            push a
0904   09F4 11            mov a, b
0905   09F5 26 01 00      mov b, $1
0906   09F8 B0            cmp a, b
0907   09F9 FD 71         seq ; ==
0908   09FB E4            pop a
0909   09FC             ; END RELATIONAL
0910   09FC C0 00 00      cmp b, 0
0911   09FF C6 1B 0A      je _if6_else
0912   0A02             _if6_true:
0913   0A02             ;; val = *(char*)arg->p; 
0914   0A02 FA FF FF      lea d, [bp + -1] ; $val
0915   0A05 DA            push d
0916   0A06 FA 07 00      lea d, [bp + 7] ; $arg
0917   0A09 FD 2A         mov d, [d]
0918   0A0B 58 00 00      add d, 0
0919   0A0E FD 14         clb
0920   0A10 2A            mov b, [d]
0921   0A11 74            mov d, b
0922   0A12 32            mov bl, [d]
0923   0A13 A7 00         mov bh, 0
0924   0A15 E7            pop d
0925   0A16 FD 43         mov [d], b
0926   0A18 0A 50 0A      jmp _if6_exit
0927   0A1B             _if6_else:
0928   0A1B             ;; if(size == 2){ 
0929   0A1B             _if7_cond:
0930   0A1B 2C 05 00      mov b, [bp + 5] ; $size             
0931   0A1E             ; START RELATIONAL
0932   0A1E D7            push a
0933   0A1F 11            mov a, b
0934   0A20 26 02 00      mov b, $2
0935   0A23 B0            cmp a, b
0936   0A24 FD 71         seq ; ==
0937   0A26 E4            pop a
0938   0A27             ; END RELATIONAL
0939   0A27 C0 00 00      cmp b, 0
0940   0A2A C6 44 0A      je _if7_else
0941   0A2D             _if7_true:
0942   0A2D             ;; val = *(int*)arg->p; 
0943   0A2D FA FF FF      lea d, [bp + -1] ; $val
0944   0A30 DA            push d
0945   0A31 FA 07 00      lea d, [bp + 7] ; $arg
0946   0A34 FD 2A         mov d, [d]
0947   0A36 58 00 00      add d, 0
0948   0A39 FD 14         clb
0949   0A3B 2A            mov b, [d]
0950   0A3C 74            mov d, b
0951   0A3D 2A            mov b, [d]
0952   0A3E E7            pop d
0953   0A3F FD 43         mov [d], b
0954   0A41 0A 50 0A      jmp _if7_exit
0955   0A44             _if7_else:
0956   0A44             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0957   0A44 26 91 27      mov b, __s0 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0958   0A47 FD AB         swp b
0959   0A49 D8            push b
0960   0A4A 07 39 10      call print
0961   0A4D 51 02 00      add sp, 2
0962   0A50             _if7_exit:
0963   0A50             _if6_exit:
0964   0A50             ;; arg->p = arg->p + size; 
0965   0A50 FA 07 00      lea d, [bp + 7] ; $arg
0966   0A53 FD 2A         mov d, [d]
0967   0A55 58 00 00      add d, 0
0968   0A58 FD 14         clb
0969   0A5A DA            push d
0970   0A5B FA 07 00      lea d, [bp + 7] ; $arg
0971   0A5E FD 2A         mov d, [d]
0972   0A60 58 00 00      add d, 0
0973   0A63 FD 14         clb
0974   0A65 2A            mov b, [d]
0975   0A66             ; START TERMS
0976   0A66 D7            push a
0977   0A67 11            mov a, b
0978   0A68 2C 05 00      mov b, [bp + 5] ; $size             
0979   0A6B 54            add a, b
0980   0A6C 27            mov b, a
0981   0A6D E4            pop a
0982   0A6E             ; END TERMS
0983   0A6E E7            pop d
0984   0A6F FD 43         mov [d], b
0985   0A71             ;; return val; 
0986   0A71 2C FF FF      mov b, [bp + -1] ; $val             
0987   0A74 F9            leave
0988   0A75 09            ret
0989   0A76             
0990   0A76             printf:
0991   0A76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0992   0A79             ; $p 
0993   0A79             ; $fp 
0994   0A79             ; $i 
0995   0A79 52 06 00      sub sp, 6
0996   0A7C             ;; fp = format; 
0997   0A7C FA FD FF      lea d, [bp + -3] ; $fp         
0998   0A7F 2C 05 00      mov b, [bp + 5] ; $format                     
0999   0A82 FD 43         mov [d], b
1000   0A84             ;; p = &format; 
1001   0A84 FA FF FF      lea d, [bp + -1] ; $p
1002   0A87 DA            push d
1003   0A88 FA 05 00      lea d, [bp + 5] ; $format
1004   0A8B 2D            mov b, d
1005   0A8C E7            pop d
1006   0A8D FD 43         mov [d], b
1007   0A8F             ;; for(;;){ 
1008   0A8F             _for8_init:
1009   0A8F             _for8_cond:
1010   0A8F             _for8_block:
1011   0A8F             ;; if(!*fp) break; 
1012   0A8F             _if9_cond:
1013   0A8F 2C FD FF      mov b, [bp + -3] ; $fp             
1014   0A92 74            mov d, b
1015   0A93 32            mov bl, [d]
1016   0A94 A7 00         mov bh, 0
1017   0A96 C0 00 00      cmp b, 0
1018   0A99 FD 71         seq ; !
1019   0A9B C0 00 00      cmp b, 0
1020   0A9E C6 A7 0A      je _if9_exit
1021   0AA1             _if9_true:
1022   0AA1             ;; break; 
1023   0AA1 0A D7 0B      jmp _for8_exit ; for break
1024   0AA4 0A A7 0A      jmp _if9_exit
1025   0AA7             _if9_exit:
1026   0AA7             ;; if(*fp == '%'){ 
1027   0AA7             _if10_cond:
1028   0AA7 2C FD FF      mov b, [bp + -3] ; $fp             
1029   0AAA 74            mov d, b
1030   0AAB 32            mov bl, [d]
1031   0AAC A7 00         mov bh, 0
1032   0AAE             ; START RELATIONAL
1033   0AAE D7            push a
1034   0AAF 11            mov a, b
1035   0AB0 26 25 00      mov b, $25
1036   0AB3 B0            cmp a, b
1037   0AB4 FD 71         seq ; ==
1038   0AB6 E4            pop a
1039   0AB7             ; END RELATIONAL
1040   0AB7 C0 00 00      cmp b, 0
1041   0ABA C6 B8 0B      je _if10_else
1042   0ABD             _if10_true:
1043   0ABD             ;; fp++; 
1044   0ABD 2C FD FF      mov b, [bp + -3] ; $fp             
1045   0AC0 FD 79         mov g, b
1046   0AC2 FD 77         inc b
1047   0AC4 FA FD FF      lea d, [bp + -3] ; $fp
1048   0AC7 FD 43         mov [d], b
1049   0AC9 FD 27         mov b, g
1050   0ACB             ;; switch(*fp){ 
1051   0ACB             _switch11_expr:
1052   0ACB 2C FD FF      mov b, [bp + -3] ; $fp             
1053   0ACE 74            mov d, b
1054   0ACF 32            mov bl, [d]
1055   0AD0 A7 00         mov bh, 0
1056   0AD2             _switch11_comparisons:
1057   0AD2 C1 64         cmp bl, $64
1058   0AD4 C6 F6 0A      je _switch11_case0
1059   0AD7 C1 69         cmp bl, $69
1060   0AD9 C6 F6 0A      je _switch11_case1
1061   0ADC C1 75         cmp bl, $75
1062   0ADE C6 17 0B      je _switch11_case2
1063   0AE1 C1 78         cmp bl, $78
1064   0AE3 C6 38 0B      je _switch11_case3
1065   0AE6 C1 63         cmp bl, $63
1066   0AE8 C6 59 0B      je _switch11_case4
1067   0AEB C1 73         cmp bl, $73
1068   0AED C6 7A 0B      je _switch11_case5
1069   0AF0 0A 9B 0B      jmp _switch11_default
1070   0AF3 0A A7 0B      jmp _switch11_exit
1071   0AF6             _switch11_case0:
1072   0AF6             _switch11_case1:
1073   0AF6             ;; p = p - 2; 
1074   0AF6 FA FF FF      lea d, [bp + -1] ; $p         
1075   0AF9 2C FF FF      mov b, [bp + -1] ; $p             
1076   0AFC             ; START TERMS
1077   0AFC D7            push a
1078   0AFD 11            mov a, b
1079   0AFE 26 02 00      mov b, $2
1080   0B01 60            sub a, b
1081   0B02 27            mov b, a
1082   0B03 E4            pop a
1083   0B04             ; END TERMS        
1084   0B04 FD 43         mov [d], b
1085   0B06             ;; prints(*(int*)p); 
1086   0B06 2C FF FF      mov b, [bp + -1] ; $p             
1087   0B09 74            mov d, b
1088   0B0A 2A            mov b, [d]
1089   0B0B FD AB         swp b
1090   0B0D D8            push b
1091   0B0E 07 3D 0E      call prints
1092   0B11 51 02 00      add sp, 2
1093   0B14             ;; break; 
1094   0B14 0A A7 0B      jmp _switch11_exit ; case break
1095   0B17             _switch11_case2:
1096   0B17             ;; p = p - 2; 
1097   0B17 FA FF FF      lea d, [bp + -1] ; $p         
1098   0B1A 2C FF FF      mov b, [bp + -1] ; $p             
1099   0B1D             ; START TERMS
1100   0B1D D7            push a
1101   0B1E 11            mov a, b
1102   0B1F 26 02 00      mov b, $2
1103   0B22 60            sub a, b
1104   0B23 27            mov b, a
1105   0B24 E4            pop a
1106   0B25             ; END TERMS        
1107   0B25 FD 43         mov [d], b
1108   0B27             ;; printu(*(unsigned int*)p); 
1109   0B27 2C FF FF      mov b, [bp + -1] ; $p             
1110   0B2A 74            mov d, b
1111   0B2B 2A            mov b, [d]
1112   0B2C FD AB         swp b
1113   0B2E D8            push b
1114   0B2F 07 1D 0F      call printu
1115   0B32 51 02 00      add sp, 2
1116   0B35             ;; break; 
1117   0B35 0A A7 0B      jmp _switch11_exit ; case break
1118   0B38             _switch11_case3:
1119   0B38             ;; p = p - 2; 
1120   0B38 FA FF FF      lea d, [bp + -1] ; $p         
1121   0B3B 2C FF FF      mov b, [bp + -1] ; $p             
1122   0B3E             ; START TERMS
1123   0B3E D7            push a
1124   0B3F 11            mov a, b
1125   0B40 26 02 00      mov b, $2
1126   0B43 60            sub a, b
1127   0B44 27            mov b, a
1128   0B45 E4            pop a
1129   0B46             ; END TERMS        
1130   0B46 FD 43         mov [d], b
1131   0B48             ;; printx16(*(unsigned int*)p); 
1132   0B48 2C FF FF      mov b, [bp + -1] ; $p             
1133   0B4B 74            mov d, b
1134   0B4C 2A            mov b, [d]
1135   0B4D FD AB         swp b
1136   0B4F D8            push b
1137   0B50 07 D9 0B      call printx16
1138   0B53 51 02 00      add sp, 2
1139   0B56             ;; break; 
1140   0B56 0A A7 0B      jmp _switch11_exit ; case break
1141   0B59             _switch11_case4:
1142   0B59             ;; p = p - 2; 
1143   0B59 FA FF FF      lea d, [bp + -1] ; $p         
1144   0B5C 2C FF FF      mov b, [bp + -1] ; $p             
1145   0B5F             ; START TERMS
1146   0B5F D7            push a
1147   0B60 11            mov a, b
1148   0B61 26 02 00      mov b, $2
1149   0B64 60            sub a, b
1150   0B65 27            mov b, a
1151   0B66 E4            pop a
1152   0B67             ; END TERMS        
1153   0B67 FD 43         mov [d], b
1154   0B69             ;; putchar(*(char*)p); 
1155   0B69 2C FF FF      mov b, [bp + -1] ; $p             
1156   0B6C 74            mov d, b
1157   0B6D 32            mov bl, [d]
1158   0B6E A7 00         mov bh, 0
1159   0B70 DD            push bl
1160   0B71 07 F4 0F      call putchar
1161   0B74 51 01 00      add sp, 1
1162   0B77             ;; break; 
1163   0B77 0A A7 0B      jmp _switch11_exit ; case break
1164   0B7A             _switch11_case5:
1165   0B7A             ;; p = p - 2; 
1166   0B7A FA FF FF      lea d, [bp + -1] ; $p         
1167   0B7D 2C FF FF      mov b, [bp + -1] ; $p             
1168   0B80             ; START TERMS
1169   0B80 D7            push a
1170   0B81 11            mov a, b
1171   0B82 26 02 00      mov b, $2
1172   0B85 60            sub a, b
1173   0B86 27            mov b, a
1174   0B87 E4            pop a
1175   0B88             ; END TERMS        
1176   0B88 FD 43         mov [d], b
1177   0B8A             ;; print(*(char**)p); 
1178   0B8A 2C FF FF      mov b, [bp + -1] ; $p             
1179   0B8D 74            mov d, b
1180   0B8E 2A            mov b, [d]
1181   0B8F FD AB         swp b
1182   0B91 D8            push b
1183   0B92 07 39 10      call print
1184   0B95 51 02 00      add sp, 2
1185   0B98             ;; break; 
1186   0B98 0A A7 0B      jmp _switch11_exit ; case break
1187   0B9B             _switch11_default:
1188   0B9B             ;; print("Error: Unknown argument type.\n"); 
1189   0B9B 26 D5 27      mov b, __s1 ; "Error: Unknown argument type.\n"
1190   0B9E FD AB         swp b
1191   0BA0 D8            push b
1192   0BA1 07 39 10      call print
1193   0BA4 51 02 00      add sp, 2
1194   0BA7             _switch11_exit:
1195   0BA7             ;; fp++; 
1196   0BA7 2C FD FF      mov b, [bp + -3] ; $fp             
1197   0BAA FD 79         mov g, b
1198   0BAC FD 77         inc b
1199   0BAE FA FD FF      lea d, [bp + -3] ; $fp
1200   0BB1 FD 43         mov [d], b
1201   0BB3 FD 27         mov b, g
1202   0BB5 0A D4 0B      jmp _if10_exit
1203   0BB8             _if10_else:
1204   0BB8             ;; putchar(*fp); 
1205   0BB8 2C FD FF      mov b, [bp + -3] ; $fp             
1206   0BBB 74            mov d, b
1207   0BBC 32            mov bl, [d]
1208   0BBD A7 00         mov bh, 0
1209   0BBF DD            push bl
1210   0BC0 07 F4 0F      call putchar
1211   0BC3 51 01 00      add sp, 1
1212   0BC6             ;; fp++; 
1213   0BC6 2C FD FF      mov b, [bp + -3] ; $fp             
1214   0BC9 FD 79         mov g, b
1215   0BCB FD 77         inc b
1216   0BCD FA FD FF      lea d, [bp + -3] ; $fp
1217   0BD0 FD 43         mov [d], b
1218   0BD2 FD 27         mov b, g
1219   0BD4             _if10_exit:
1220   0BD4             _for8_update:
1221   0BD4 0A 8F 0A      jmp _for8_cond
1222   0BD7             _for8_exit:
1223   0BD7 F9            leave
1224   0BD8 09            ret
1225   0BD9             
1226   0BD9             printx16:
1227   0BD9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1228   0BDC             
1229   0BDC             ; --- BEGIN INLINE ASM BLOCK
1230   0BDC 2C 05 00      mov b, [bp + 5] ; $hex             
1231   0BDF 07 9C 13      call print_u16x
1232   0BE2             ; --- END INLINE ASM BLOCK
1233   0BE2             
1234   0BE2 F9            leave
1235   0BE3 09            ret
1236   0BE4             
1237   0BE4             printx8:
1238   0BE4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1239   0BE7             
1240   0BE7             ; --- BEGIN INLINE ASM BLOCK
1241   0BE7 FA 05 00      lea d, [bp + 5] ; $hex
1242   0BEA 32            mov bl, [d]
1243   0BEB 07 E0 13      call print_u8x
1244   0BEE             ; --- END INLINE ASM BLOCK
1245   0BEE             
1246   0BEE F9            leave
1247   0BEF 09            ret
1248   0BF0             
1249   0BF0             hex_to_int:
1250   0BF0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1251   0BF3             ; $value 
1252   0BF3 10 00 00      mov a, $0
1253   0BF6 45 FF FF      mov [bp + -1], a
1254   0BF9             ; $i 
1255   0BF9             ; $hex_char 
1256   0BF9             ; $len 
1257   0BF9 52 07 00      sub sp, 7
1258   0BFC             ;; len = strlen(hex_string); 
1259   0BFC FA FA FF      lea d, [bp + -6] ; $len
1260   0BFF DA            push d
1261   0C00 2C 05 00      mov b, [bp + 5] ; $hex_string             
1262   0C03 FD AB         swp b
1263   0C05 D8            push b
1264   0C06 07 A6 09      call strlen
1265   0C09 51 02 00      add sp, 2
1266   0C0C E7            pop d
1267   0C0D FD 43         mov [d], b
1268   0C0F             ;; for (i = 0; i < len; i++) { 
1269   0C0F             _for12_init:
1270   0C0F FA FD FF      lea d, [bp + -3] ; $i         
1271   0C12 26 00 00      mov b, $0        
1272   0C15 FD 43         mov [d], b
1273   0C17             _for12_cond:
1274   0C17 2C FD FF      mov b, [bp + -3] ; $i             
1275   0C1A             ; START RELATIONAL
1276   0C1A D7            push a
1277   0C1B 11            mov a, b
1278   0C1C 2C FA FF      mov b, [bp + -6] ; $len             
1279   0C1F B0            cmp a, b
1280   0C20 FD 73         slt ; < 
1281   0C22 E4            pop a
1282   0C23             ; END RELATIONAL
1283   0C23 C0 00 00      cmp b, 0
1284   0C26 C6 17 0D      je _for12_exit
1285   0C29             _for12_block:
1286   0C29             ;; hex_char = hex_string[i]; 
1287   0C29 FA FC FF      lea d, [bp + -4] ; $hex_char
1288   0C2C DA            push d
1289   0C2D FA 05 00      lea d, [bp + 5] ; $hex_string
1290   0C30 FD 2A         mov d, [d]
1291   0C32 D7            push a         
1292   0C33 2C FD FF      mov b, [bp + -3] ; $i                     
1293   0C36 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1294   0C3A E4            pop a
1295   0C3B 32            mov bl, [d]
1296   0C3C A7 00         mov bh, 0
1297   0C3E E7            pop d
1298   0C3F FD 3E         mov [d], bl
1299   0C41             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1300   0C41             _if13_cond:
1301   0C41 34 FC FF      mov bl, [bp + -4] ; $hex_char
1302   0C44 A7 00         mov bh, 0             
1303   0C46             ; START RELATIONAL
1304   0C46 D7            push a
1305   0C47 11            mov a, b
1306   0C48 26 61 00      mov b, $61
1307   0C4B B0            cmp a, b
1308   0C4C FD 80         sge ; >=
1309   0C4E E4            pop a
1310   0C4F             ; END RELATIONAL
1311   0C4F D7            push a
1312   0C50 11            mov a, b
1313   0C51 34 FC FF      mov bl, [bp + -4] ; $hex_char
1314   0C54 A7 00         mov bh, 0             
1315   0C56             ; START RELATIONAL
1316   0C56 D7            push a
1317   0C57 11            mov a, b
1318   0C58 26 66 00      mov b, $66
1319   0C5B B0            cmp a, b
1320   0C5C FD 74         sle ; <=
1321   0C5E E4            pop a
1322   0C5F             ; END RELATIONAL
1323   0C5F FD A7         sand a, b ; &&
1324   0C61 E4            pop a
1325   0C62 C0 00 00      cmp b, 0
1326   0C65 C6 92 0C      je _if13_else
1327   0C68             _if13_true:
1328   0C68             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1329   0C68 FA FF FF      lea d, [bp + -1] ; $value         
1330   0C6B 2C FF FF      mov b, [bp + -1] ; $value             
1331   0C6E             ; START FACTORS
1332   0C6E D7            push a
1333   0C6F 11            mov a, b
1334   0C70 26 10 00      mov b, $10
1335   0C73 AC            mul a, b ; *
1336   0C74 11            mov a, b
1337   0C75 27            mov b, a
1338   0C76 E4            pop a
1339   0C77             ; END FACTORS
1340   0C77             ; START TERMS
1341   0C77 D7            push a
1342   0C78 11            mov a, b
1343   0C79 34 FC FF      mov bl, [bp + -4] ; $hex_char
1344   0C7C A7 00         mov bh, 0             
1345   0C7E             ; START TERMS
1346   0C7E D7            push a
1347   0C7F 11            mov a, b
1348   0C80 26 61 00      mov b, $61
1349   0C83 60            sub a, b
1350   0C84 26 0A 00      mov b, $a
1351   0C87 54            add a, b
1352   0C88 27            mov b, a
1353   0C89 E4            pop a
1354   0C8A             ; END TERMS
1355   0C8A 54            add a, b
1356   0C8B 27            mov b, a
1357   0C8C E4            pop a
1358   0C8D             ; END TERMS        
1359   0C8D FD 43         mov [d], b
1360   0C8F 0A 06 0D      jmp _if13_exit
1361   0C92             _if13_else:
1362   0C92             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1363   0C92             _if14_cond:
1364   0C92 34 FC FF      mov bl, [bp + -4] ; $hex_char
1365   0C95 A7 00         mov bh, 0             
1366   0C97             ; START RELATIONAL
1367   0C97 D7            push a
1368   0C98 11            mov a, b
1369   0C99 26 41 00      mov b, $41
1370   0C9C B0            cmp a, b
1371   0C9D FD 80         sge ; >=
1372   0C9F E4            pop a
1373   0CA0             ; END RELATIONAL
1374   0CA0 D7            push a
1375   0CA1 11            mov a, b
1376   0CA2 34 FC FF      mov bl, [bp + -4] ; $hex_char
1377   0CA5 A7 00         mov bh, 0             
1378   0CA7             ; START RELATIONAL
1379   0CA7 D7            push a
1380   0CA8 11            mov a, b
1381   0CA9 26 46 00      mov b, $46
1382   0CAC B0            cmp a, b
1383   0CAD FD 74         sle ; <=
1384   0CAF E4            pop a
1385   0CB0             ; END RELATIONAL
1386   0CB0 FD A7         sand a, b ; &&
1387   0CB2 E4            pop a
1388   0CB3 C0 00 00      cmp b, 0
1389   0CB6 C6 E3 0C      je _if14_else
1390   0CB9             _if14_true:
1391   0CB9             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1392   0CB9 FA FF FF      lea d, [bp + -1] ; $value         
1393   0CBC 2C FF FF      mov b, [bp + -1] ; $value             
1394   0CBF             ; START FACTORS
1395   0CBF D7            push a
1396   0CC0 11            mov a, b
1397   0CC1 26 10 00      mov b, $10
1398   0CC4 AC            mul a, b ; *
1399   0CC5 11            mov a, b
1400   0CC6 27            mov b, a
1401   0CC7 E4            pop a
1402   0CC8             ; END FACTORS
1403   0CC8             ; START TERMS
1404   0CC8 D7            push a
1405   0CC9 11            mov a, b
1406   0CCA 34 FC FF      mov bl, [bp + -4] ; $hex_char
1407   0CCD A7 00         mov bh, 0             
1408   0CCF             ; START TERMS
1409   0CCF D7            push a
1410   0CD0 11            mov a, b
1411   0CD1 26 41 00      mov b, $41
1412   0CD4 60            sub a, b
1413   0CD5 26 0A 00      mov b, $a
1414   0CD8 54            add a, b
1415   0CD9 27            mov b, a
1416   0CDA E4            pop a
1417   0CDB             ; END TERMS
1418   0CDB 54            add a, b
1419   0CDC 27            mov b, a
1420   0CDD E4            pop a
1421   0CDE             ; END TERMS        
1422   0CDE FD 43         mov [d], b
1423   0CE0 0A 06 0D      jmp _if14_exit
1424   0CE3             _if14_else:
1425   0CE3             ;; value = (value * 16) + (hex_char - '0'); 
1426   0CE3 FA FF FF      lea d, [bp + -1] ; $value         
1427   0CE6 2C FF FF      mov b, [bp + -1] ; $value             
1428   0CE9             ; START FACTORS
1429   0CE9 D7            push a
1430   0CEA 11            mov a, b
1431   0CEB 26 10 00      mov b, $10
1432   0CEE AC            mul a, b ; *
1433   0CEF 11            mov a, b
1434   0CF0 27            mov b, a
1435   0CF1 E4            pop a
1436   0CF2             ; END FACTORS
1437   0CF2             ; START TERMS
1438   0CF2 D7            push a
1439   0CF3 11            mov a, b
1440   0CF4 34 FC FF      mov bl, [bp + -4] ; $hex_char
1441   0CF7 A7 00         mov bh, 0             
1442   0CF9             ; START TERMS
1443   0CF9 D7            push a
1444   0CFA 11            mov a, b
1445   0CFB 26 30 00      mov b, $30
1446   0CFE 60            sub a, b
1447   0CFF 27            mov b, a
1448   0D00 E4            pop a
1449   0D01             ; END TERMS
1450   0D01 54            add a, b
1451   0D02 27            mov b, a
1452   0D03 E4            pop a
1453   0D04             ; END TERMS        
1454   0D04 FD 43         mov [d], b
1455   0D06             _if14_exit:
1456   0D06             _if13_exit:
1457   0D06             _for12_update:
1458   0D06 2C FD FF      mov b, [bp + -3] ; $i             
1459   0D09 FD 79         mov g, b
1460   0D0B FD 77         inc b
1461   0D0D FA FD FF      lea d, [bp + -3] ; $i
1462   0D10 FD 43         mov [d], b
1463   0D12 FD 27         mov b, g
1464   0D14 0A 17 0C      jmp _for12_cond
1465   0D17             _for12_exit:
1466   0D17             ;; return value; 
1467   0D17 2C FF FF      mov b, [bp + -1] ; $value             
1468   0D1A F9            leave
1469   0D1B 09            ret
1470   0D1C             
1471   0D1C             atoi:
1472   0D1C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1473   0D1F             ; $result 
1474   0D1F 10 00 00      mov a, $0
1475   0D22 45 FF FF      mov [bp + -1], a
1476   0D25             ; $sign 
1477   0D25 10 01 00      mov a, $1
1478   0D28 45 FD FF      mov [bp + -3], a
1479   0D2B 52 04 00      sub sp, 4
1480   0D2E             ;; while (*str == ' ') str++; 
1481   0D2E             _while15_cond:
1482   0D2E 2C 05 00      mov b, [bp + 5] ; $str             
1483   0D31 74            mov d, b
1484   0D32 32            mov bl, [d]
1485   0D33 A7 00         mov bh, 0
1486   0D35             ; START RELATIONAL
1487   0D35 D7            push a
1488   0D36 11            mov a, b
1489   0D37 26 20 00      mov b, $20
1490   0D3A B0            cmp a, b
1491   0D3B FD 71         seq ; ==
1492   0D3D E4            pop a
1493   0D3E             ; END RELATIONAL
1494   0D3E C0 00 00      cmp b, 0
1495   0D41 C6 55 0D      je _while15_exit
1496   0D44             _while15_block:
1497   0D44             ;; str++; 
1498   0D44 2C 05 00      mov b, [bp + 5] ; $str             
1499   0D47 FD 79         mov g, b
1500   0D49 FD 77         inc b
1501   0D4B FA 05 00      lea d, [bp + 5] ; $str
1502   0D4E FD 43         mov [d], b
1503   0D50 FD 27         mov b, g
1504   0D52 0A 2E 0D      jmp _while15_cond
1505   0D55             _while15_exit:
1506   0D55             ;; if (*str == '-' || *str == '+') { 
1507   0D55             _if16_cond:
1508   0D55 2C 05 00      mov b, [bp + 5] ; $str             
1509   0D58 74            mov d, b
1510   0D59 32            mov bl, [d]
1511   0D5A A7 00         mov bh, 0
1512   0D5C             ; START RELATIONAL
1513   0D5C D7            push a
1514   0D5D 11            mov a, b
1515   0D5E 26 2D 00      mov b, $2d
1516   0D61 B0            cmp a, b
1517   0D62 FD 71         seq ; ==
1518   0D64 E4            pop a
1519   0D65             ; END RELATIONAL
1520   0D65 D7            push a
1521   0D66 11            mov a, b
1522   0D67 2C 05 00      mov b, [bp + 5] ; $str             
1523   0D6A 74            mov d, b
1524   0D6B 32            mov bl, [d]
1525   0D6C A7 00         mov bh, 0
1526   0D6E             ; START RELATIONAL
1527   0D6E D7            push a
1528   0D6F 11            mov a, b
1529   0D70 26 2B 00      mov b, $2b
1530   0D73 B0            cmp a, b
1531   0D74 FD 71         seq ; ==
1532   0D76 E4            pop a
1533   0D77             ; END RELATIONAL
1534   0D77 FD A8         sor a, b ; ||
1535   0D79 E4            pop a
1536   0D7A C0 00 00      cmp b, 0
1537   0D7D C6 B4 0D      je _if16_exit
1538   0D80             _if16_true:
1539   0D80             ;; if (*str == '-') sign = -1; 
1540   0D80             _if17_cond:
1541   0D80 2C 05 00      mov b, [bp + 5] ; $str             
1542   0D83 74            mov d, b
1543   0D84 32            mov bl, [d]
1544   0D85 A7 00         mov bh, 0
1545   0D87             ; START RELATIONAL
1546   0D87 D7            push a
1547   0D88 11            mov a, b
1548   0D89 26 2D 00      mov b, $2d
1549   0D8C B0            cmp a, b
1550   0D8D FD 71         seq ; ==
1551   0D8F E4            pop a
1552   0D90             ; END RELATIONAL
1553   0D90 C0 00 00      cmp b, 0
1554   0D93 C6 A3 0D      je _if17_exit
1555   0D96             _if17_true:
1556   0D96             ;; sign = -1; 
1557   0D96 FA FD FF      lea d, [bp + -3] ; $sign         
1558   0D99 26 01 00      mov b, $1
1559   0D9C FD 97         neg b        
1560   0D9E FD 43         mov [d], b
1561   0DA0 0A A3 0D      jmp _if17_exit
1562   0DA3             _if17_exit:
1563   0DA3             ;; str++; 
1564   0DA3 2C 05 00      mov b, [bp + 5] ; $str             
1565   0DA6 FD 79         mov g, b
1566   0DA8 FD 77         inc b
1567   0DAA FA 05 00      lea d, [bp + 5] ; $str
1568   0DAD FD 43         mov [d], b
1569   0DAF FD 27         mov b, g
1570   0DB1 0A B4 0D      jmp _if16_exit
1571   0DB4             _if16_exit:
1572   0DB4             ;; while (*str >= '0' && *str <= '9') { 
1573   0DB4             _while18_cond:
1574   0DB4 2C 05 00      mov b, [bp + 5] ; $str             
1575   0DB7 74            mov d, b
1576   0DB8 32            mov bl, [d]
1577   0DB9 A7 00         mov bh, 0
1578   0DBB             ; START RELATIONAL
1579   0DBB D7            push a
1580   0DBC 11            mov a, b
1581   0DBD 26 30 00      mov b, $30
1582   0DC0 B0            cmp a, b
1583   0DC1 FD 80         sge ; >=
1584   0DC3 E4            pop a
1585   0DC4             ; END RELATIONAL
1586   0DC4 D7            push a
1587   0DC5 11            mov a, b
1588   0DC6 2C 05 00      mov b, [bp + 5] ; $str             
1589   0DC9 74            mov d, b
1590   0DCA 32            mov bl, [d]
1591   0DCB A7 00         mov bh, 0
1592   0DCD             ; START RELATIONAL
1593   0DCD D7            push a
1594   0DCE 11            mov a, b
1595   0DCF 26 39 00      mov b, $39
1596   0DD2 B0            cmp a, b
1597   0DD3 FD 74         sle ; <=
1598   0DD5 E4            pop a
1599   0DD6             ; END RELATIONAL
1600   0DD6 FD A7         sand a, b ; &&
1601   0DD8 E4            pop a
1602   0DD9 C0 00 00      cmp b, 0
1603   0DDC C6 17 0E      je _while18_exit
1604   0DDF             _while18_block:
1605   0DDF             ;; result = result * 10 + (*str - '0'); 
1606   0DDF FA FF FF      lea d, [bp + -1] ; $result
1607   0DE2 DA            push d
1608   0DE3 2C FF FF      mov b, [bp + -1] ; $result             
1609   0DE6             ; START FACTORS
1610   0DE6 D7            push a
1611   0DE7 11            mov a, b
1612   0DE8 26 0A 00      mov b, $a
1613   0DEB AC            mul a, b ; *
1614   0DEC 11            mov a, b
1615   0DED 27            mov b, a
1616   0DEE E4            pop a
1617   0DEF             ; END FACTORS
1618   0DEF             ; START TERMS
1619   0DEF D7            push a
1620   0DF0 11            mov a, b
1621   0DF1 2C 05 00      mov b, [bp + 5] ; $str             
1622   0DF4 74            mov d, b
1623   0DF5 32            mov bl, [d]
1624   0DF6 A7 00         mov bh, 0
1625   0DF8             ; START TERMS
1626   0DF8 D7            push a
1627   0DF9 11            mov a, b
1628   0DFA 26 30 00      mov b, $30
1629   0DFD 60            sub a, b
1630   0DFE 27            mov b, a
1631   0DFF E4            pop a
1632   0E00             ; END TERMS
1633   0E00 54            add a, b
1634   0E01 27            mov b, a
1635   0E02 E4            pop a
1636   0E03             ; END TERMS
1637   0E03 E7            pop d
1638   0E04 FD 43         mov [d], b
1639   0E06             ;; str++; 
1640   0E06 2C 05 00      mov b, [bp + 5] ; $str             
1641   0E09 FD 79         mov g, b
1642   0E0B FD 77         inc b
1643   0E0D FA 05 00      lea d, [bp + 5] ; $str
1644   0E10 FD 43         mov [d], b
1645   0E12 FD 27         mov b, g
1646   0E14 0A B4 0D      jmp _while18_cond
1647   0E17             _while18_exit:
1648   0E17             ;; return sign * result; 
1649   0E17 2C FD FF      mov b, [bp + -3] ; $sign             
1650   0E1A             ; START FACTORS
1651   0E1A D7            push a
1652   0E1B 11            mov a, b
1653   0E1C 2C FF FF      mov b, [bp + -1] ; $result             
1654   0E1F AC            mul a, b ; *
1655   0E20 11            mov a, b
1656   0E21 27            mov b, a
1657   0E22 E4            pop a
1658   0E23             ; END FACTORS
1659   0E23 F9            leave
1660   0E24 09            ret
1661   0E25             
1662   0E25             gets:
1663   0E25 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1664   0E28             
1665   0E28             ; --- BEGIN INLINE ASM BLOCK
1666   0E28 17 05 00      mov a, [bp + 5] ; $s             
1667   0E2B 3C            mov d, a
1668   0E2C 07 01 12      call _gets
1669   0E2F             ; --- END INLINE ASM BLOCK
1670   0E2F             
1671   0E2F             ;; return strlen(s); 
1672   0E2F 2C 05 00      mov b, [bp + 5] ; $s             
1673   0E32 FD AB         swp b
1674   0E34 D8            push b
1675   0E35 07 A6 09      call strlen
1676   0E38 51 02 00      add sp, 2
1677   0E3B F9            leave
1678   0E3C 09            ret
1679   0E3D             
1680   0E3D             prints:
1681   0E3D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1682   0E40             ; $digits 
1683   0E40             ; $i 
1684   0E40 10 00 00      mov a, $0
1685   0E43 45 FA FF      mov [bp + -6], a
1686   0E46 52 07 00      sub sp, 7
1687   0E49             ;; if (num < 0) { 
1688   0E49             _if19_cond:
1689   0E49 2C 05 00      mov b, [bp + 5] ; $num             
1690   0E4C             ; START RELATIONAL
1691   0E4C D7            push a
1692   0E4D 11            mov a, b
1693   0E4E 26 00 00      mov b, $0
1694   0E51 B0            cmp a, b
1695   0E52 FD 73         slt ; < 
1696   0E54 E4            pop a
1697   0E55             ; END RELATIONAL
1698   0E55 C0 00 00      cmp b, 0
1699   0E58 C6 72 0E      je _if19_else
1700   0E5B             _if19_true:
1701   0E5B             ;; putchar('-'); 
1702   0E5B 26 2D 00      mov b, $2d
1703   0E5E DD            push bl
1704   0E5F 07 F4 0F      call putchar
1705   0E62 51 01 00      add sp, 1
1706   0E65             ;; num = -num; 
1707   0E65 FA 05 00      lea d, [bp + 5] ; $num         
1708   0E68 2C 05 00      mov b, [bp + 5] ; $num             
1709   0E6B FD 97         neg b        
1710   0E6D FD 43         mov [d], b
1711   0E6F 0A 93 0E      jmp _if19_exit
1712   0E72             _if19_else:
1713   0E72             ;; if (num == 0) { 
1714   0E72             _if20_cond:
1715   0E72 2C 05 00      mov b, [bp + 5] ; $num             
1716   0E75             ; START RELATIONAL
1717   0E75 D7            push a
1718   0E76 11            mov a, b
1719   0E77 26 00 00      mov b, $0
1720   0E7A B0            cmp a, b
1721   0E7B FD 71         seq ; ==
1722   0E7D E4            pop a
1723   0E7E             ; END RELATIONAL
1724   0E7E C0 00 00      cmp b, 0
1725   0E81 C6 93 0E      je _if20_exit
1726   0E84             _if20_true:
1727   0E84             ;; putchar('0'); 
1728   0E84 26 30 00      mov b, $30
1729   0E87 DD            push bl
1730   0E88 07 F4 0F      call putchar
1731   0E8B 51 01 00      add sp, 1
1732   0E8E             ;; return; 
1733   0E8E F9            leave
1734   0E8F 09            ret
1735   0E90 0A 93 0E      jmp _if20_exit
1736   0E93             _if20_exit:
1737   0E93             _if19_exit:
1738   0E93             ;; while (num > 0) { 
1739   0E93             _while21_cond:
1740   0E93 2C 05 00      mov b, [bp + 5] ; $num             
1741   0E96             ; START RELATIONAL
1742   0E96 D7            push a
1743   0E97 11            mov a, b
1744   0E98 26 00 00      mov b, $0
1745   0E9B B0            cmp a, b
1746   0E9C FD 7F         sgt ; >
1747   0E9E E4            pop a
1748   0E9F             ; END RELATIONAL
1749   0E9F C0 00 00      cmp b, 0
1750   0EA2 C6 E5 0E      je _while21_exit
1751   0EA5             _while21_block:
1752   0EA5             ;; digits[i] = '0' + (num % 10); 
1753   0EA5 FA FC FF      lea d, [bp + -4] ; $digits
1754   0EA8 D7            push a         
1755   0EA9 2C FA FF      mov b, [bp + -6] ; $i                     
1756   0EAC 5A            add d, b
1757   0EAD E4            pop a         
1758   0EAE 26 30 00      mov b, $30
1759   0EB1             ; START TERMS
1760   0EB1 D7            push a
1761   0EB2 11            mov a, b
1762   0EB3 2C 05 00      mov b, [bp + 5] ; $num             
1763   0EB6             ; START FACTORS
1764   0EB6 D7            push a
1765   0EB7 11            mov a, b
1766   0EB8 26 0A 00      mov b, $a
1767   0EBB AE            div a, b ; 
1768   0EBC 11            mov a, b
1769   0EBD 27            mov b, a
1770   0EBE E4            pop a
1771   0EBF             ; END FACTORS
1772   0EBF 54            add a, b
1773   0EC0 27            mov b, a
1774   0EC1 E4            pop a
1775   0EC2             ; END TERMS        
1776   0EC2 FD 3E         mov [d], bl
1777   0EC4             ;; num = num / 10; 
1778   0EC4 FA 05 00      lea d, [bp + 5] ; $num         
1779   0EC7 2C 05 00      mov b, [bp + 5] ; $num             
1780   0ECA             ; START FACTORS
1781   0ECA D7            push a
1782   0ECB 11            mov a, b
1783   0ECC 26 0A 00      mov b, $a
1784   0ECF AE            div a, b
1785   0ED0 27            mov b, a
1786   0ED1 E4            pop a
1787   0ED2             ; END FACTORS        
1788   0ED2 FD 43         mov [d], b
1789   0ED4             ;; i++; 
1790   0ED4 2C FA FF      mov b, [bp + -6] ; $i             
1791   0ED7 FD 79         mov g, b
1792   0ED9 FD 77         inc b
1793   0EDB FA FA FF      lea d, [bp + -6] ; $i
1794   0EDE FD 43         mov [d], b
1795   0EE0 FD 27         mov b, g
1796   0EE2 0A 93 0E      jmp _while21_cond
1797   0EE5             _while21_exit:
1798   0EE5             ;; while (i > 0) { 
1799   0EE5             _while22_cond:
1800   0EE5 2C FA FF      mov b, [bp + -6] ; $i             
1801   0EE8             ; START RELATIONAL
1802   0EE8 D7            push a
1803   0EE9 11            mov a, b
1804   0EEA 26 00 00      mov b, $0
1805   0EED B0            cmp a, b
1806   0EEE FD 7F         sgt ; >
1807   0EF0 E4            pop a
1808   0EF1             ; END RELATIONAL
1809   0EF1 C0 00 00      cmp b, 0
1810   0EF4 C6 1B 0F      je _while22_exit
1811   0EF7             _while22_block:
1812   0EF7             ;; i--; 
1813   0EF7 2C FA FF      mov b, [bp + -6] ; $i             
1814   0EFA FD 79         mov g, b
1815   0EFC FD 7D         dec b
1816   0EFE FA FA FF      lea d, [bp + -6] ; $i
1817   0F01 FD 43         mov [d], b
1818   0F03 FD 27         mov b, g
1819   0F05             ;; putchar(digits[i]); 
1820   0F05 FA FC FF      lea d, [bp + -4] ; $digits
1821   0F08 D7            push a         
1822   0F09 2C FA FF      mov b, [bp + -6] ; $i                     
1823   0F0C 5A            add d, b
1824   0F0D E4            pop a
1825   0F0E 32            mov bl, [d]
1826   0F0F A7 00         mov bh, 0
1827   0F11 DD            push bl
1828   0F12 07 F4 0F      call putchar
1829   0F15 51 01 00      add sp, 1
1830   0F18 0A E5 0E      jmp _while22_cond
1831   0F1B             _while22_exit:
1832   0F1B F9            leave
1833   0F1C 09            ret
1834   0F1D             
1835   0F1D             printu:
1836   0F1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1837   0F20             ; $digits 
1838   0F20             ; $i 
1839   0F20 52 07 00      sub sp, 7
1840   0F23             ;; i = 0; 
1841   0F23 FA FA FF      lea d, [bp + -6] ; $i         
1842   0F26 26 00 00      mov b, $0        
1843   0F29 FD 43         mov [d], b
1844   0F2B             ;; if(num == 0){ 
1845   0F2B             _if23_cond:
1846   0F2B 2C 05 00      mov b, [bp + 5] ; $num             
1847   0F2E             ; START RELATIONAL
1848   0F2E D7            push a
1849   0F2F 11            mov a, b
1850   0F30 26 00 00      mov b, $0
1851   0F33 B0            cmp a, b
1852   0F34 FD 71         seq ; ==
1853   0F36 E4            pop a
1854   0F37             ; END RELATIONAL
1855   0F37 C0 00 00      cmp b, 0
1856   0F3A C6 4C 0F      je _if23_exit
1857   0F3D             _if23_true:
1858   0F3D             ;; putchar('0'); 
1859   0F3D 26 30 00      mov b, $30
1860   0F40 DD            push bl
1861   0F41 07 F4 0F      call putchar
1862   0F44 51 01 00      add sp, 1
1863   0F47             ;; return; 
1864   0F47 F9            leave
1865   0F48 09            ret
1866   0F49 0A 4C 0F      jmp _if23_exit
1867   0F4C             _if23_exit:
1868   0F4C             ;; while (num > 0) { 
1869   0F4C             _while24_cond:
1870   0F4C 2C 05 00      mov b, [bp + 5] ; $num             
1871   0F4F             ; START RELATIONAL
1872   0F4F D7            push a
1873   0F50 11            mov a, b
1874   0F51 26 00 00      mov b, $0
1875   0F54 B0            cmp a, b
1876   0F55 FD 81         sgu ; > (unsigned)
1877   0F57 E4            pop a
1878   0F58             ; END RELATIONAL
1879   0F58 C0 00 00      cmp b, 0
1880   0F5B C6 9E 0F      je _while24_exit
1881   0F5E             _while24_block:
1882   0F5E             ;; digits[i] = '0' + (num % 10); 
1883   0F5E FA FC FF      lea d, [bp + -4] ; $digits
1884   0F61 D7            push a         
1885   0F62 2C FA FF      mov b, [bp + -6] ; $i                     
1886   0F65 5A            add d, b
1887   0F66 E4            pop a         
1888   0F67 26 30 00      mov b, $30
1889   0F6A             ; START TERMS
1890   0F6A D7            push a
1891   0F6B 11            mov a, b
1892   0F6C 2C 05 00      mov b, [bp + 5] ; $num             
1893   0F6F             ; START FACTORS
1894   0F6F D7            push a
1895   0F70 11            mov a, b
1896   0F71 26 0A 00      mov b, $a
1897   0F74 AE            div a, b ; 
1898   0F75 11            mov a, b
1899   0F76 27            mov b, a
1900   0F77 E4            pop a
1901   0F78             ; END FACTORS
1902   0F78 54            add a, b
1903   0F79 27            mov b, a
1904   0F7A E4            pop a
1905   0F7B             ; END TERMS        
1906   0F7B FD 3E         mov [d], bl
1907   0F7D             ;; num = num / 10; 
1908   0F7D FA 05 00      lea d, [bp + 5] ; $num         
1909   0F80 2C 05 00      mov b, [bp + 5] ; $num             
1910   0F83             ; START FACTORS
1911   0F83 D7            push a
1912   0F84 11            mov a, b
1913   0F85 26 0A 00      mov b, $a
1914   0F88 AE            div a, b
1915   0F89 27            mov b, a
1916   0F8A E4            pop a
1917   0F8B             ; END FACTORS        
1918   0F8B FD 43         mov [d], b
1919   0F8D             ;; i++; 
1920   0F8D 2C FA FF      mov b, [bp + -6] ; $i             
1921   0F90 FD 79         mov g, b
1922   0F92 FD 77         inc b
1923   0F94 FA FA FF      lea d, [bp + -6] ; $i
1924   0F97 FD 43         mov [d], b
1925   0F99 FD 27         mov b, g
1926   0F9B 0A 4C 0F      jmp _while24_cond
1927   0F9E             _while24_exit:
1928   0F9E             ;; while (i > 0) { 
1929   0F9E             _while25_cond:
1930   0F9E 2C FA FF      mov b, [bp + -6] ; $i             
1931   0FA1             ; START RELATIONAL
1932   0FA1 D7            push a
1933   0FA2 11            mov a, b
1934   0FA3 26 00 00      mov b, $0
1935   0FA6 B0            cmp a, b
1936   0FA7 FD 7F         sgt ; >
1937   0FA9 E4            pop a
1938   0FAA             ; END RELATIONAL
1939   0FAA C0 00 00      cmp b, 0
1940   0FAD C6 D4 0F      je _while25_exit
1941   0FB0             _while25_block:
1942   0FB0             ;; i--; 
1943   0FB0 2C FA FF      mov b, [bp + -6] ; $i             
1944   0FB3 FD 79         mov g, b
1945   0FB5 FD 7D         dec b
1946   0FB7 FA FA FF      lea d, [bp + -6] ; $i
1947   0FBA FD 43         mov [d], b
1948   0FBC FD 27         mov b, g
1949   0FBE             ;; putchar(digits[i]); 
1950   0FBE FA FC FF      lea d, [bp + -4] ; $digits
1951   0FC1 D7            push a         
1952   0FC2 2C FA FF      mov b, [bp + -6] ; $i                     
1953   0FC5 5A            add d, b
1954   0FC6 E4            pop a
1955   0FC7 32            mov bl, [d]
1956   0FC8 A7 00         mov bh, 0
1957   0FCA DD            push bl
1958   0FCB 07 F4 0F      call putchar
1959   0FCE 51 01 00      add sp, 1
1960   0FD1 0A 9E 0F      jmp _while25_cond
1961   0FD4             _while25_exit:
1962   0FD4 F9            leave
1963   0FD5 09            ret
1964   0FD6             
1965   0FD6             rand:
1966   0FD6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1967   0FD9             ; $sec 
1968   0FD9 52 01 00      sub sp, 1
1969   0FDC             
1970   0FDC             ; --- BEGIN INLINE ASM BLOCK
1971   0FDC 19 00         mov al, 0
1972   0FDE 05 01         syscall sys_rtc					
1973   0FE0 1A            mov al, ah
1974   0FE1 20 00 00      mov al, [bp + 0] ; $sec
1975   0FE4                         
1976   0FE4             ; --- END INLINE ASM BLOCK
1977   0FE4             
1978   0FE4             ;; return sec; 
1979   0FE4 34 00 00      mov bl, [bp + 0] ; $sec
1980   0FE7 A7 00         mov bh, 0             
1981   0FE9 F9            leave
1982   0FEA 09            ret
1983   0FEB             
1984   0FEB             date:
1985   0FEB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1986   0FEE             
1987   0FEE             ; --- BEGIN INLINE ASM BLOCK
1988   0FEE 19 00         mov al, 0 
1989   0FF0 05 07         syscall sys_datetime
1990   0FF2             ; --- END INLINE ASM BLOCK
1991   0FF2             
1992   0FF2 F9            leave
1993   0FF3 09            ret
1994   0FF4             
1995   0FF4             putchar:
1996   0FF4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1997   0FF7             
1998   0FF7             ; --- BEGIN INLINE ASM BLOCK
1999   0FF7 20 05 00      mov al, [bp + 5] ; $c
2000   0FFA                         
2001   0FFA 23            mov ah, al
2002   0FFB 07 FA 11      call _putchar
2003   0FFE             ; --- END INLINE ASM BLOCK
2004   0FFE             
2005   0FFE F9            leave
2006   0FFF 09            ret
2007   1000             
2008   1000             getchar:
2009   1000 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2010   1003             ; $c 
2011   1003 52 01 00      sub sp, 1
2012   1006             
2013   1006             ; --- BEGIN INLINE ASM BLOCK
2014   1006 07 F3 11      call getch
2015   1009 1A            mov al, ah
2016   100A FA 00 00      lea d, [bp + 0] ; $c
2017   100D 3E            mov [d], al
2018   100E             ; --- END INLINE ASM BLOCK
2019   100E             
2020   100E             ;; return c; 
2021   100E 34 00 00      mov bl, [bp + 0] ; $c
2022   1011 A7 00         mov bh, 0             
2023   1013 F9            leave
2024   1014 09            ret
2025   1015             
2026   1015             scann:
2027   1015 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2028   1018             ; $m 
2029   1018 52 02 00      sub sp, 2
2030   101B             
2031   101B             ; --- BEGIN INLINE ASM BLOCK
2032   101B 07 3E 14      call scan_u16d
2033   101E FA FF FF      lea d, [bp + -1] ; $m
2034   1021 43            mov [d], a
2035   1022             ; --- END INLINE ASM BLOCK
2036   1022             
2037   1022             ;; return m; 
2038   1022 2C FF FF      mov b, [bp + -1] ; $m             
2039   1025 F9            leave
2040   1026 09            ret
2041   1027             
2042   1027             puts:
2043   1027 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2044   102A             
2045   102A             ; --- BEGIN INLINE ASM BLOCK
2046   102A 17 05 00      mov a, [bp + 5] ; $s             
2047   102D 3C            mov d, a
2048   102E 07 44 13      call _puts
2049   1031 22 0A         mov ah, $0A
2050   1033 19 00         mov al, 0
2051   1035 05 03         syscall sys_io
2052   1037             ; --- END INLINE ASM BLOCK
2053   1037             
2054   1037 F9            leave
2055   1038 09            ret
2056   1039             
2057   1039             print:
2058   1039 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2059   103C             
2060   103C             ; --- BEGIN INLINE ASM BLOCK
2061   103C 17 05 00      mov a, [bp + 5] ; $s             
2062   103F 3C            mov d, a
2063   1040 07 44 13      call _puts
2064   1043             ; --- END INLINE ASM BLOCK
2065   1043             
2066   1043 F9            leave
2067   1044 09            ret
2068   1045             
2069   1045             loadfile:
2070   1045 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2071   1048             
2072   1048             ; --- BEGIN INLINE ASM BLOCK
2073   1048 17 05 00      mov a, [bp + 5] ; $destination             
2074   104B 4F            mov di, a
2075   104C FA 07 00      lea d, [bp + 7] ; $filename
2076   104F FD 2A         mov d, [d]
2077   1051 19 14         mov al, 20
2078   1053 05 04         syscall sys_filesystem
2079   1055             ; --- END INLINE ASM BLOCK
2080   1055             
2081   1055 F9            leave
2082   1056 09            ret
2083   1057             
2084   1057             create_file:
2085   1057 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2086   105A F9            leave
2087   105B 09            ret
2088   105C             
2089   105C             delete_file:
2090   105C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2091   105F             
2092   105F             ; --- BEGIN INLINE ASM BLOCK
2093   105F FA 05 00      lea d, [bp + 5] ; $filename
2094   1062 19 0A         mov al, 10
2095   1064 05 04         syscall sys_filesystem
2096   1066             ; --- END INLINE ASM BLOCK
2097   1066             
2098   1066 F9            leave
2099   1067 09            ret
2100   1068             
2101   1068             fopen:
2102   1068 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2103   106B F9            leave
2104   106C 09            ret
2105   106D             
2106   106D             fclose:
2107   106D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2108   1070 F9            leave
2109   1071 09            ret
2110   1072             
2111   1072             alloc:
2112   1072 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2113   1075             ;; heap_top = heap_top + bytes; 
2114   1075 3B 16 28      mov d, _heap_top ; $heap_top         
2115   1078 29 16 28      mov b, [_heap_top] ; $heap_top           
2116   107B             ; START TERMS
2117   107B D7            push a
2118   107C 11            mov a, b
2119   107D 2C 05 00      mov b, [bp + 5] ; $bytes             
2120   1080 54            add a, b
2121   1081 27            mov b, a
2122   1082 E4            pop a
2123   1083             ; END TERMS        
2124   1083 FD 43         mov [d], b
2125   1085             ;; return heap_top - bytes; 
2126   1085 29 16 28      mov b, [_heap_top] ; $heap_top           
2127   1088             ; START TERMS
2128   1088 D7            push a
2129   1089 11            mov a, b
2130   108A 2C 05 00      mov b, [bp + 5] ; $bytes             
2131   108D 60            sub a, b
2132   108E 27            mov b, a
2133   108F E4            pop a
2134   1090             ; END TERMS
2135   1090 F9            leave
2136   1091 09            ret
2137   1092             
2138   1092             free:
2139   1092 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2140   1095             ;; return heap_top = heap_top - bytes; 
2141   1095 3B 16 28      mov d, _heap_top ; $heap_top         
2142   1098 29 16 28      mov b, [_heap_top] ; $heap_top           
2143   109B             ; START TERMS
2144   109B D7            push a
2145   109C 11            mov a, b
2146   109D 2C 05 00      mov b, [bp + 5] ; $bytes             
2147   10A0 60            sub a, b
2148   10A1 27            mov b, a
2149   10A2 E4            pop a
2150   10A3             ; END TERMS        
2151   10A3 FD 43         mov [d], b
2152   10A5 F9            leave
2153   10A6 09            ret
2154   10A7             
2155   10A7             exit:
2156   10A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2157   10AA             
2158   10AA             ; --- BEGIN INLINE ASM BLOCK
2159   10AA 05 0B         syscall sys_terminate_proc
2160   10AC             ; --- END INLINE ASM BLOCK
2161   10AC             
2162   10AC F9            leave
2163   10AD 09            ret
2164   10AE             
2165   10AE             load_hex:
2166   10AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2167   10B1             ; $temp 
2168   10B1 52 02 00      sub sp, 2
2169   10B4             ;; temp = alloc(32768); 
2170   10B4 FA FF FF      lea d, [bp + -1] ; $temp
2171   10B7 DA            push d
2172   10B8 26 00 80      mov b, $8000
2173   10BB FD AB         swp b
2174   10BD D8            push b
2175   10BE 07 72 10      call alloc
2176   10C1 51 02 00      add sp, 2
2177   10C4 E7            pop d
2178   10C5 FD 43         mov [d], b
2179   10C7             
2180   10C7             ; --- BEGIN INLINE ASM BLOCK
2181   10C7               
2182   10C7               
2183   10C7               
2184   10C7               
2185   10C7               
2186   10C7             _load_hex:
2187   10C7 D7            push a
2188   10C8 D8            push b
2189   10C9 DA            push d
2190   10CA E2            push si
2191   10CB E3            push di
2192   10CC 52 00 80      sub sp, $8000      
2193   10CF 38 00 00      mov c, 0
2194   10D2 48            mov a, sp
2195   10D3 77            inc a
2196   10D4 3C            mov d, a          
2197   10D5 07 01 12      call _gets        
2198   10D8 4D            mov si, a
2199   10D9             __load_hex_loop:
2200   10D9 F6            lodsb             
2201   10DA B9 00         cmp al, 0         
2202   10DC C6 EA 10      jz __load_hex_ret
2203   10DF 36            mov bh, al
2204   10E0 F6            lodsb
2205   10E1 2F            mov bl, al
2206   10E2 07 B7 11      call _atoi        
2207   10E5 F7            stosb             
2208   10E6 78            inc c
2209   10E7 0A D9 10      jmp __load_hex_loop
2210   10EA             __load_hex_ret:
2211   10EA 51 00 80      add sp, $8000
2212   10ED F0            pop di
2213   10EE EF            pop si
2214   10EF E7            pop d
2215   10F0 E5            pop b
2216   10F1 E4            pop a
2217   10F2             ; --- END INLINE ASM BLOCK
2218   10F2             
2219   10F2 F9            leave
2220   10F3 09            ret
2221   10F4             
2222   10F4             getparam:
2223   10F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2224   10F7             ; $data 
2225   10F7 52 01 00      sub sp, 1
2226   10FA             
2227   10FA             ; --- BEGIN INLINE ASM BLOCK
2228   10FA 19 04         mov al, 4
2229   10FC FA 05 00      lea d, [bp + 5] ; $address
2230   10FF FD 2A         mov d, [d]
2231   1101 05 0C         syscall sys_system
2232   1103 FA 00 00      lea d, [bp + 0] ; $data
2233   1106 FD 3E         mov [d], bl
2234   1108             ; --- END INLINE ASM BLOCK
2235   1108             
2236   1108             ;; return data; 
2237   1108 34 00 00      mov bl, [bp + 0] ; $data
2238   110B A7 00         mov bh, 0             
2239   110D F9            leave
2240   110E 09            ret
2241   110F             
2242   110F             include_stdio_asm:
2243   110F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2244   1112             
2245   1112             ; --- BEGIN INLINE ASM BLOCK
2246   1112             .include "lib/stdio.asm"
0001+  1112             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1112             ; stdio.s
0003+  1112             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1112             .include "lib/string.asm"
0001++ 1112             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1112             ; string.s
0003++ 1112             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1112             
0005++ 1112             
0006++ 1112             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1112             ; _strrev
0008++ 1112             ; reverse a string
0009++ 1112             ; D = string address
0010++ 1112             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1112             ; 01234
0012++ 1112             _strrev:
0013++ 1112 4B          	pusha
0014++ 1113 07 59 11    	call _strlen	; length in C
0015++ 1116 12          	mov a, c
0016++ 1117 AF 01 00    	cmp a, 1
0017++ 111A D0 34 11    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 111D 7D          	dec a
0019++ 111E FD 4E       	mov si, d	; beginning of string
0020++ 1120 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1122 59          	add d, a	; end of string
0022++ 1123 12          	mov a, c
0023++ 1124 FD 9B       	shr a		; divide by 2
0024++ 1126 39          	mov c, a	; C now counts the steps
0025++ 1127             _strrev_L0:
0026++ 1127 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1128 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1129 3E          	mov [d], al	; store left char into right side
0029++ 112A 1B          	mov al, bl
0030++ 112B F7          	stosb		; store right-side char into left-side; increase DI
0031++ 112C 7E          	dec c
0032++ 112D 7F          	dec d
0033++ 112E C2 00 00    	cmp c, 0
0034++ 1131 C7 27 11    	jne _strrev_L0
0035++ 1134             _strrev_end:
0036++ 1134 4C          	popa
0037++ 1135 09          	ret
0038++ 1136             	
0039++ 1136             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1136             ; _strchr
0041++ 1136             ; search string in D for char in AL
0042++ 1136             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1136             _strchr:
0044++ 1136             _strchr_L0:
0045++ 1136 32          	mov bl, [d]
0046++ 1137 C1 00       	cmp bl, 0
0047++ 1139 C6 44 11    	je _strchr_end
0048++ 113C BA          	cmp al, bl
0049++ 113D C6 44 11    	je _strchr_end
0050++ 1140 79          	inc d
0051++ 1141 0A 36 11    	jmp _strchr_L0
0052++ 1144             _strchr_end:
0053++ 1144 1B          	mov al, bl
0054++ 1145 09          	ret
0055++ 1146             
0056++ 1146             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1146             ; _strstr
0058++ 1146             ; find sub-string
0059++ 1146             ; str1 in SI
0060++ 1146             ; str2 in DI
0061++ 1146             ; SI points to end of source string
0062++ 1146             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1146             _strstr:
0064++ 1146 DB          	push al
0065++ 1147 DA          	push d
0066++ 1148 E3          	push di
0067++ 1149             _strstr_loop:
0068++ 1149 F3          	cmpsb					; compare a byte of the strings
0069++ 114A C7 55 11    	jne _strstr_ret
0070++ 114D FC 00 00    	lea d, [di + 0]
0071++ 1150 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1152 C7 49 11    	jne _strstr_loop				; equal chars but not at end
0073++ 1155             _strstr_ret:
0074++ 1155 F0          	pop di
0075++ 1156 E7          	pop d
0076++ 1157 E8          	pop al
0077++ 1158 09          	ret
0078++ 1159             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1159             ; length of null terminated string
0080++ 1159             ; result in C
0081++ 1159             ; pointer in D
0082++ 1159             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1159             _strlen:
0084++ 1159 DA          	push d
0085++ 115A 38 00 00    	mov c, 0
0086++ 115D             _strlen_L1:
0087++ 115D BD 00       	cmp byte [d], 0
0088++ 115F C6 67 11    	je _strlen_ret
0089++ 1162 79          	inc d
0090++ 1163 78          	inc c
0091++ 1164 0A 5D 11    	jmp _strlen_L1
0092++ 1167             _strlen_ret:
0093++ 1167 E7          	pop d
0094++ 1168 09          	ret
0095++ 1169             
0096++ 1169             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1169             ; STRCMP
0098++ 1169             ; compare two strings
0099++ 1169             ; str1 in SI
0100++ 1169             ; str2 in DI
0101++ 1169             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1169             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1169             _strcmp:
0104++ 1169 DB          	push al
0105++ 116A DA          	push d
0106++ 116B E3          	push di
0107++ 116C E2          	push si
0108++ 116D             _strcmp_loop:
0109++ 116D F3          	cmpsb					; compare a byte of the strings
0110++ 116E C7 79 11    	jne _strcmp_ret
0111++ 1171 FB FF FF    	lea d, [si +- 1]
0112++ 1174 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1176 C7 6D 11    	jne _strcmp_loop				; equal chars but not at end
0114++ 1179             _strcmp_ret:
0115++ 1179 EF          	pop si
0116++ 117A F0          	pop di
0117++ 117B E7          	pop d
0118++ 117C E8          	pop al
0119++ 117D 09          	ret
0120++ 117E             
0121++ 117E             
0122++ 117E             ; STRCPY
0123++ 117E             ; copy null terminated string from SI to DI
0124++ 117E             ; source in SI
0125++ 117E             ; destination in DI
0126++ 117E             _strcpy:
0127++ 117E E2          	push si
0128++ 117F E3          	push di
0129++ 1180 DB          	push al
0130++ 1181             _strcpy_L1:
0131++ 1181 F6          	lodsb
0132++ 1182 F7          	stosb
0133++ 1183 B9 00       	cmp al, 0
0134++ 1185 C7 81 11    	jne _strcpy_L1
0135++ 1188             _strcpy_end:
0136++ 1188 E8          	pop al
0137++ 1189 F0          	pop di
0138++ 118A EF          	pop si
0139++ 118B 09          	ret
0140++ 118C             
0141++ 118C             ; STRCAT
0142++ 118C             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 118C             ; source in SI
0144++ 118C             ; destination in DI
0145++ 118C             _strcat:
0146++ 118C E2          	push si
0147++ 118D E3          	push di
0148++ 118E D7          	push a
0149++ 118F DA          	push d
0150++ 1190 50          	mov a, di
0151++ 1191 3C          	mov d, a
0152++ 1192             _strcat_goto_end_L1:
0153++ 1192 BD 00       	cmp byte[d], 0
0154++ 1194 C6 9B 11    	je _strcat_start
0155++ 1197 79          	inc d
0156++ 1198 0A 92 11    	jmp _strcat_goto_end_L1
0157++ 119B             _strcat_start:
0158++ 119B FD 50       	mov di, d
0159++ 119D             _strcat_L1:
0160++ 119D F6          	lodsb
0161++ 119E F7          	stosb
0162++ 119F B9 00       	cmp al, 0
0163++ 11A1 C7 9D 11    	jne _strcat_L1
0164++ 11A4             _strcat_end:
0165++ 11A4 E7          	pop d
0166++ 11A5 E4          	pop a
0167++ 11A6 F0          	pop di
0168++ 11A7 EF          	pop si
0169++ 11A8 09          	ret
0170++ 11A9             
0171++ 11A9             
0005+  11A9             
0006+  11A9             
0007+  11A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  11A9             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  11A9             ; ASCII in BL
0010+  11A9             ; result in AL
0011+  11A9             ; ascii for F = 0100 0110
0012+  11A9             ; ascii for 9 = 0011 1001
0013+  11A9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  11A9             hex_ascii_encode:
0015+  11A9 1B            mov al, bl
0016+  11AA 93 40         test al, $40        ; test if letter or number
0017+  11AC C7 B2 11      jnz hex_letter
0018+  11AF 87 0F         and al, $0F        ; get number
0019+  11B1 09            ret
0020+  11B2             hex_letter:
0021+  11B2 87 0F         and al, $0F        ; get letter
0022+  11B4 6A 09         add al, 9
0023+  11B6 09            ret
0024+  11B7             
0025+  11B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  11B7             ; ATOI
0027+  11B7             ; 2 letter hex string in B
0028+  11B7             ; 8bit integer returned in AL
0029+  11B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  11B7             _atoi:
0031+  11B7 D8            push b
0032+  11B8 07 A9 11      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  11BB 30            mov bl, bh
0034+  11BC DB            push al          ; save a
0035+  11BD 07 A9 11      call hex_ascii_encode
0036+  11C0 EA            pop bl  
0037+  11C1 FD 9E 04      shl al, 4
0038+  11C4 8C            or al, bl
0039+  11C5 E5            pop b
0040+  11C6 09            ret  
0041+  11C7             
0042+  11C7             
0043+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  11C7             ; scanf
0045+  11C7             ; no need for explanations!
0046+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  11C7             scanf:
0048+  11C7 09            ret
0049+  11C8             
0050+  11C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  11C8             ; ITOA
0052+  11C8             ; 8bit value in BL
0053+  11C8             ; 2 byte ASCII result in A
0054+  11C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  11C8             _itoa:
0056+  11C8 DA            push d
0057+  11C9 D8            push b
0058+  11CA A7 00         mov bh, 0
0059+  11CC FD A4 04      shr bl, 4  
0060+  11CF 74            mov d, b
0061+  11D0 1F 78 14      mov al, [d + s_hex_digits]
0062+  11D3 23            mov ah, al
0063+  11D4               
0064+  11D4 E5            pop b
0065+  11D5 D8            push b
0066+  11D6 A7 00         mov bh, 0
0067+  11D8 FD 87 0F      and bl, $0F
0068+  11DB 74            mov d, b
0069+  11DC 1F 78 14      mov al, [d + s_hex_digits]
0070+  11DF E5            pop b
0071+  11E0 E7            pop d
0072+  11E1 09            ret
0073+  11E2             
0074+  11E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  11E2             ; HEX STRING TO BINARY
0076+  11E2             ; di = destination address
0077+  11E2             ; si = source
0078+  11E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  11E2             _hex_to_int:
0080+  11E2             _hex_to_int_L1:
0081+  11E2 F6            lodsb          ; load from [SI] to AL
0082+  11E3 B9 00         cmp al, 0        ; check if ASCII 0
0083+  11E5 C6 F2 11      jz _hex_to_int_ret
0084+  11E8 36            mov bh, al
0085+  11E9 F6            lodsb
0086+  11EA 2F            mov bl, al
0087+  11EB 07 B7 11      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  11EE F7            stosb          ; store AL to [DI]
0089+  11EF 0A E2 11      jmp _hex_to_int_L1
0090+  11F2             _hex_to_int_ret:
0091+  11F2 09            ret    
0092+  11F3             
0093+  11F3             
0094+  11F3             
0095+  11F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  11F3             ; GETCHAR
0097+  11F3             ; char in ah
0098+  11F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  11F3             getch:
0100+  11F3 DB            push al
0101+  11F4             getch_retry:
0102+  11F4 19 01         mov al, 1
0103+  11F6 05 03         syscall sys_io      ; receive in AH
0104+  11F8 E8            pop al
0105+  11F9 09            ret
0106+  11FA             
0107+  11FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  11FA             ; PUTCHAR
0109+  11FA             ; char in ah
0110+  11FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  11FA             _putchar:
0112+  11FA D7            push a
0113+  11FB 19 00         mov al, 0
0114+  11FD 05 03         syscall sys_io      ; char in AH
0115+  11FF E4            pop a
0116+  1200 09            ret
0117+  1201             
0118+  1201             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  1201             ;; INPUT A STRING
0120+  1201             ;; terminates with null
0121+  1201             ;; pointer in D
0122+  1201             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  1201             _gets:
0124+  1201 D7            push a
0125+  1202 DA            push d
0126+  1203             _gets_loop:
0127+  1203 19 01         mov al, 1
0128+  1205 05 03         syscall sys_io      ; receive in AH
0129+  1207 B9 00         cmp al, 0        ; check error code (AL)
0130+  1209 C6 03 12      je _gets_loop      ; if no char received, retry
0131+  120C             
0132+  120C 76 1B         cmp ah, 27
0133+  120E C6 2F 12      je _gets_ansi_esc
0134+  1211 76 0A         cmp ah, $0A        ; LF
0135+  1213 C6 9A 12      je _gets_end
0136+  1216 76 0D         cmp ah, $0D        ; CR
0137+  1218 C6 9A 12      je _gets_end
0138+  121B 76 5C         cmp ah, $5C        ; '\\'
0139+  121D C6 5B 12      je _gets_escape
0140+  1220               
0141+  1220 76 08         cmp ah, $08      ; check for backspace
0142+  1222 C6 2B 12      je _gets_backspace
0143+  1225             
0144+  1225 1A            mov al, ah
0145+  1226 3E            mov [d], al
0146+  1227 79            inc d
0147+  1228 0A 03 12      jmp _gets_loop
0148+  122B             _gets_backspace:
0149+  122B 7F            dec d
0150+  122C 0A 03 12      jmp _gets_loop
0151+  122F             _gets_ansi_esc:
0152+  122F 19 01         mov al, 1
0153+  1231 05 03         syscall sys_io        ; receive in AH without echo
0154+  1233 B9 00         cmp al, 0          ; check error code (AL)
0155+  1235 C6 2F 12      je _gets_ansi_esc    ; if no char received, retry
0156+  1238 76 5B         cmp ah, '['
0157+  123A C7 03 12      jne _gets_loop
0158+  123D             _gets_ansi_esc_2:
0159+  123D 19 01         mov al, 1
0160+  123F 05 03         syscall sys_io          ; receive in AH without echo
0161+  1241 B9 00         cmp al, 0            ; check error code (AL)
0162+  1243 C6 3D 12      je _gets_ansi_esc_2  ; if no char received, retry
0163+  1246 76 44         cmp ah, 'D'
0164+  1248 C6 53 12      je _gets_left_arrow
0165+  124B 76 43         cmp ah, 'C'
0166+  124D C6 57 12      je _gets_right_arrow
0167+  1250 0A 03 12      jmp _gets_loop
0168+  1253             _gets_left_arrow:
0169+  1253 7F            dec d
0170+  1254 0A 03 12      jmp _gets_loop
0171+  1257             _gets_right_arrow:
0172+  1257 79            inc d
0173+  1258 0A 03 12      jmp _gets_loop
0174+  125B             _gets_escape:
0175+  125B 19 01         mov al, 1
0176+  125D 05 03         syscall sys_io      ; receive in AH
0177+  125F B9 00         cmp al, 0        ; check error code (AL)
0178+  1261 C6 5B 12      je _gets_escape      ; if no char received, retry
0179+  1264 76 6E         cmp ah, 'n'
0180+  1266 C6 85 12      je _gets_LF
0181+  1269 76 72         cmp ah, 'r'
0182+  126B C6 8C 12      je _gets_CR
0183+  126E 76 30         cmp ah, '0'
0184+  1270 C6 93 12      je _gets_NULL
0185+  1273 76 5C         cmp ah, $5C  ; '\'
0186+  1275 C6 7E 12      je _gets_slash
0187+  1278 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  1279 3E            mov [d], al
0189+  127A 79            inc d
0190+  127B 0A 03 12      jmp _gets_loop
0191+  127E             _gets_slash:
0192+  127E 19 5C         mov al, $5C
0193+  1280 3E            mov [d], al
0194+  1281 79            inc d
0195+  1282 0A 03 12      jmp _gets_loop
0196+  1285             _gets_LF:
0197+  1285 19 0A         mov al, $0A
0198+  1287 3E            mov [d], al
0199+  1288 79            inc d
0200+  1289 0A 03 12      jmp _gets_loop
0201+  128C             _gets_CR:
0202+  128C 19 0D         mov al, $0D
0203+  128E 3E            mov [d], al
0204+  128F 79            inc d
0205+  1290 0A 03 12      jmp _gets_loop
0206+  1293             _gets_NULL:
0207+  1293 19 00         mov al, $00
0208+  1295 3E            mov [d], al
0209+  1296 79            inc d
0210+  1297 0A 03 12      jmp _gets_loop
0211+  129A             _gets_end:
0212+  129A 19 00         mov al, 0
0213+  129C 3E            mov [d], al        ; terminate string
0214+  129D E7            pop d
0215+  129E E4            pop a
0216+  129F 09            ret
0217+  12A0             
0218+  12A0             
0219+  12A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  12A0             ;; INPUT TEXT
0221+  12A0             ;; terminated with CTRL+D
0222+  12A0             ;; pointer in D
0223+  12A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  12A0             _gettxt:
0225+  12A0 D7            push a
0226+  12A1 DA            push d
0227+  12A2             _gettxt_loop:
0228+  12A2 19 01         mov al, 1
0229+  12A4 05 03         syscall sys_io      ; receive in AH
0230+  12A6 B9 00         cmp al, 0        ; check error code (AL)
0231+  12A8 C6 A2 12      je _gettxt_loop    ; if no char received, retry
0232+  12AB 76 04         cmp ah, 4      ; EOT
0233+  12AD C6 EB 12      je _gettxt_end
0234+  12B0 76 08         cmp ah, $08      ; check for backspace
0235+  12B2 C6 E7 12      je _gettxt_backspace
0236+  12B5 76 5C         cmp ah, $5C        ; '\'
0237+  12B7 C6 C0 12      je _gettxt_escape
0238+  12BA 1A            mov al, ah
0239+  12BB 3E            mov [d], al
0240+  12BC 79            inc d
0241+  12BD 0A A2 12      jmp _gettxt_loop
0242+  12C0             _gettxt_escape:
0243+  12C0 19 01         mov al, 1
0244+  12C2 05 03         syscall sys_io      ; receive in AH
0245+  12C4 B9 00         cmp al, 0        ; check error code (AL)
0246+  12C6 C6 C0 12      je _gettxt_escape    ; if no char received, retry
0247+  12C9 76 6E         cmp ah, 'n'
0248+  12CB C6 D9 12      je _gettxt_LF
0249+  12CE 76 72         cmp ah, 'r'
0250+  12D0 C6 E0 12      je _gettxt_CR
0251+  12D3 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  12D4 3E            mov [d], al
0253+  12D5 79            inc d
0254+  12D6 0A A2 12      jmp _gettxt_loop
0255+  12D9             _gettxt_LF:
0256+  12D9 19 0A         mov al, $0A
0257+  12DB 3E            mov [d], al
0258+  12DC 79            inc d
0259+  12DD 0A A2 12      jmp _gettxt_loop
0260+  12E0             _gettxt_CR:
0261+  12E0 19 0D         mov al, $0D
0262+  12E2 3E            mov [d], al
0263+  12E3 79            inc d
0264+  12E4 0A A2 12      jmp _gettxt_loop
0265+  12E7             _gettxt_backspace:
0266+  12E7 7F            dec d
0267+  12E8 0A A2 12      jmp _gettxt_loop
0268+  12EB             _gettxt_end:
0269+  12EB 19 00         mov al, 0
0270+  12ED 3E            mov [d], al        ; terminate string
0271+  12EE E7            pop d
0272+  12EF E4            pop a
0273+  12F0 09            ret
0274+  12F1             
0275+  12F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  12F1             ; PRINT NEW LINE
0277+  12F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  12F1             printnl:
0279+  12F1 D7            push a
0280+  12F2 10 00 0A      mov a, $0A00
0281+  12F5 05 03         syscall sys_io
0282+  12F7 10 00 0D      mov a, $0D00
0283+  12FA 05 03         syscall sys_io
0284+  12FC E4            pop a
0285+  12FD 09            ret
0286+  12FE             
0287+  12FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  12FE             ; _strtoint
0289+  12FE             ; 4 digit hex string number in d
0290+  12FE             ; integer returned in A
0291+  12FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  12FE             _strtointx:
0293+  12FE D8            push b
0294+  12FF 32            mov bl, [d]
0295+  1300 37            mov bh, bl
0296+  1301 33 01 00      mov bl, [d + 1]
0297+  1304 07 B7 11      call _atoi        ; convert to int in AL
0298+  1307 23            mov ah, al        ; move to AH
0299+  1308 33 02 00      mov bl, [d + 2]
0300+  130B 37            mov bh, bl
0301+  130C 33 03 00      mov bl, [d + 3]
0302+  130F 07 B7 11      call _atoi        ; convert to int in AL
0303+  1312 E5            pop b
0304+  1313 09            ret
0305+  1314             
0306+  1314             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  1314             ; _strtoint
0308+  1314             ; 5 digit base10 string number in d
0309+  1314             ; integer returned in A
0310+  1314             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  1314             _strtoint:
0312+  1314 E2            push si
0313+  1315 D8            push b
0314+  1316 D9            push c
0315+  1317 DA            push d
0316+  1318 07 59 11      call _strlen      ; get string length in C
0317+  131B 7E            dec c
0318+  131C FD 4E         mov si, d
0319+  131E 12            mov a, c
0320+  131F FD 99         shl a
0321+  1321 3B 90 14      mov d, table_power
0322+  1324 59            add d, a
0323+  1325 38 00 00      mov c, 0
0324+  1328             _strtoint_L0:
0325+  1328 F6            lodsb      ; load ASCII to al
0326+  1329 B9 00         cmp al, 0
0327+  132B C6 3E 13      je _strtoint_end
0328+  132E 6F 30         sub al, $30    ; make into integer
0329+  1330 22 00         mov ah, 0
0330+  1332 2A            mov b, [d]
0331+  1333 AC            mul a, b      ; result in B since it fits in 16bits
0332+  1334 11            mov a, b
0333+  1335 28            mov b, c
0334+  1336 54            add a, b
0335+  1337 39            mov c, a
0336+  1338 63 02 00      sub d, 2
0337+  133B 0A 28 13      jmp _strtoint_L0
0338+  133E             _strtoint_end:
0339+  133E 12            mov a, c
0340+  133F E7            pop d
0341+  1340 E6            pop c
0342+  1341 E5            pop b
0343+  1342 EF            pop si
0344+  1343 09            ret
0345+  1344             
0346+  1344             
0347+  1344             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  1344             ; PRINT NULL TERMINATED STRING
0349+  1344             ; pointer in D
0350+  1344             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  1344             _puts:
0352+  1344 D7            push a
0353+  1345 DA            push d
0354+  1346             _puts_L1:
0355+  1346 1E            mov al, [d]
0356+  1347 B9 00         cmp al, 0
0357+  1349 C6 55 13      jz _puts_END
0358+  134C 23            mov ah, al
0359+  134D 19 00         mov al, 0
0360+  134F 05 03         syscall sys_io
0361+  1351 79            inc d
0362+  1352 0A 46 13      jmp _puts_L1
0363+  1355             _puts_END:
0364+  1355 E7            pop d
0365+  1356 E4            pop a
0366+  1357 09            ret
0367+  1358             
0368+  1358             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1358             ; PRINT N SIZE STRING
0370+  1358             ; pointer in D
0371+  1358             ; size in C
0372+  1358             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1358             _putsn:
0374+  1358 DB            push al
0375+  1359 DA            push d
0376+  135A D9            push c
0377+  135B             _putsn_L0:
0378+  135B 1E            mov al, [d]
0379+  135C 23            mov ah, al
0380+  135D 19 00         mov al, 0
0381+  135F 05 03         syscall sys_io
0382+  1361 79            inc d
0383+  1362 7E            dec c  
0384+  1363 C2 00 00      cmp c, 0
0385+  1366 C7 5B 13      jne _putsn_L0
0386+  1369             _putsn_end:
0387+  1369 E6            pop c
0388+  136A E7            pop d
0389+  136B E8            pop al
0390+  136C 09            ret
0391+  136D             
0392+  136D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  136D             ; print 16bit decimal number
0394+  136D             ; input number in A
0395+  136D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  136D             print_u16d:
0397+  136D D7            push a
0398+  136E D8            push b
0399+  136F 26 10 27      mov b, 10000
0400+  1372 AE            div a, b      ; get 10000's coeff.
0401+  1373 07 95 13      call print_number
0402+  1376 11            mov a, b
0403+  1377 26 E8 03      mov b, 1000
0404+  137A AE            div a, b      ; get 1000's coeff.
0405+  137B 07 95 13      call print_number
0406+  137E 11            mov a, b
0407+  137F 26 64 00      mov b, 100
0408+  1382 AE            div a, b
0409+  1383 07 95 13      call print_number
0410+  1386 11            mov a, b
0411+  1387 26 0A 00      mov b, 10
0412+  138A AE            div a, b
0413+  138B 07 95 13      call print_number
0414+  138E 1B            mov al, bl      ; 1's coeff in bl
0415+  138F 07 95 13      call print_number
0416+  1392 E5            pop b
0417+  1393 E4            pop a
0418+  1394 09            ret
0419+  1395             
0420+  1395             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1395             ; print AL
0422+  1395             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1395             print_number:
0424+  1395 6A 30         add al, $30
0425+  1397 23            mov ah, al
0426+  1398 07 FA 11      call _putchar
0427+  139B 09            ret
0428+  139C             
0429+  139C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  139C             ; PRINT 16BIT HEX INTEGER
0431+  139C             ; integer value in reg B
0432+  139C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  139C             print_u16x:
0434+  139C D7            push a
0435+  139D D8            push b
0436+  139E DD            push bl
0437+  139F 30            mov bl, bh
0438+  13A0 07 C8 11      call _itoa        ; convert bh to char in A
0439+  13A3 2F            mov bl, al        ; save al
0440+  13A4 19 00         mov al, 0
0441+  13A6 05 03         syscall sys_io        ; display AH
0442+  13A8 24            mov ah, bl        ; retrieve al
0443+  13A9 19 00         mov al, 0
0444+  13AB 05 03         syscall sys_io        ; display AL
0445+  13AD             
0446+  13AD EA            pop bl
0447+  13AE 07 C8 11      call _itoa        ; convert bh to char in A
0448+  13B1 2F            mov bl, al        ; save al
0449+  13B2 19 00         mov al, 0
0450+  13B4 05 03         syscall sys_io        ; display AH
0451+  13B6 24            mov ah, bl        ; retrieve al
0452+  13B7 19 00         mov al, 0
0453+  13B9 05 03         syscall sys_io        ; display AL
0454+  13BB             
0455+  13BB E5            pop b
0456+  13BC E4            pop a
0457+  13BD 09            ret
0458+  13BE             
0459+  13BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  13BE             ; INPUT 16BIT HEX INTEGER
0461+  13BE             ; read 16bit integer into A
0462+  13BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  13BE             scan_u16x:
0464+  13BE F8 10 00      enter 16
0465+  13C1 D8            push b
0466+  13C2 DA            push d
0467+  13C3             
0468+  13C3 FA F1 FF      lea d, [bp + -15]
0469+  13C6 07 01 12      call _gets        ; get number
0470+  13C9             
0471+  13C9 32            mov bl, [d]
0472+  13CA 37            mov bh, bl
0473+  13CB 33 01 00      mov bl, [d + 1]
0474+  13CE 07 B7 11      call _atoi        ; convert to int in AL
0475+  13D1 23            mov ah, al        ; move to AH
0476+  13D2             
0477+  13D2 33 02 00      mov bl, [d + 2]
0478+  13D5 37            mov bh, bl
0479+  13D6 33 03 00      mov bl, [d + 3]
0480+  13D9 07 B7 11      call _atoi        ; convert to int in AL
0481+  13DC             
0482+  13DC E7            pop d
0483+  13DD E5            pop b
0484+  13DE F9            leave
0485+  13DF 09            ret
0486+  13E0             
0487+  13E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  13E0             ; PRINT 8bit HEX INTEGER
0489+  13E0             ; integer value in reg bl
0490+  13E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  13E0             print_u8x:
0492+  13E0 D7            push a
0493+  13E1 DD            push bl
0494+  13E2             
0495+  13E2 07 C8 11      call _itoa        ; convert bl to char in A
0496+  13E5 2F            mov bl, al        ; save al
0497+  13E6 19 00         mov al, 0
0498+  13E8 05 03         syscall sys_io        ; display AH
0499+  13EA 24            mov ah, bl        ; retrieve al
0500+  13EB 19 00         mov al, 0
0501+  13ED 05 03         syscall sys_io        ; display AL
0502+  13EF             
0503+  13EF EA            pop bl
0504+  13F0 E4            pop a
0505+  13F1 09            ret
0506+  13F2             
0507+  13F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  13F2             ; print 8bit decimal unsigned number
0509+  13F2             ; input number in AL
0510+  13F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  13F2             print_u8d:
0512+  13F2 D7            push a
0513+  13F3 D8            push b
0514+  13F4             
0515+  13F4 22 00         mov ah, 0
0516+  13F6 26 64 00      mov b, 100
0517+  13F9 AE            div a, b
0518+  13FA D8            push b      ; save remainder
0519+  13FB B9 00         cmp al, 0
0520+  13FD C6 07 14      je skip100
0521+  1400 6A 30         add al, $30
0522+  1402 23            mov ah, al
0523+  1403 19 00         mov al, 0
0524+  1405 05 03         syscall sys_io  ; print coeff
0525+  1407             skip100:
0526+  1407 E4            pop a
0527+  1408 22 00         mov ah, 0
0528+  140A 26 0A 00      mov b, 10
0529+  140D AE            div a, b
0530+  140E D8            push b      ; save remainder
0531+  140F B9 00         cmp al, 0
0532+  1411 C6 1B 14      je skip10
0533+  1414 6A 30         add al, $30
0534+  1416 23            mov ah, al
0535+  1417 19 00         mov al, 0
0536+  1419 05 03         syscall sys_io  ; print coeff
0537+  141B             skip10:
0538+  141B E4            pop a
0539+  141C 1B            mov al, bl
0540+  141D 6A 30         add al, $30
0541+  141F 23            mov ah, al
0542+  1420 19 00         mov al, 0
0543+  1422 05 03         syscall sys_io  ; print coeff
0544+  1424 E5            pop b
0545+  1425 E4            pop a
0546+  1426 09            ret
0547+  1427             
0548+  1427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  1427             ; INPUT 8BIT HEX INTEGER
0550+  1427             ; read 8bit integer into AL
0551+  1427             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  1427             scan_u8x:
0553+  1427 F8 04 00      enter 4
0554+  142A D8            push b
0555+  142B DA            push d
0556+  142C             
0557+  142C FA FD FF      lea d, [bp + -3]
0558+  142F 07 01 12      call _gets        ; get number
0559+  1432             
0560+  1432 32            mov bl, [d]
0561+  1433 37            mov bh, bl
0562+  1434 33 01 00      mov bl, [d + 1]
0563+  1437 07 B7 11      call _atoi        ; convert to int in AL
0564+  143A             
0565+  143A E7            pop d
0566+  143B E5            pop b
0567+  143C F9            leave
0568+  143D 09            ret
0569+  143E             
0570+  143E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  143E             ; input decimal number
0572+  143E             ; result in A
0573+  143E             ; 655'\0'
0574+  143E             ; low--------high
0575+  143E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  143E             scan_u16d:
0577+  143E F8 08 00      enter 8
0578+  1441 E2            push si
0579+  1442 D8            push b
0580+  1443 D9            push c
0581+  1444 DA            push d
0582+  1445 FA F9 FF      lea d, [bp +- 7]
0583+  1448 07 01 12      call _gets
0584+  144B 07 59 11      call _strlen      ; get string length in C
0585+  144E 7E            dec c
0586+  144F FD 4E         mov si, d
0587+  1451 12            mov a, c
0588+  1452 FD 99         shl a
0589+  1454 3B 90 14      mov d, table_power
0590+  1457 59            add d, a
0591+  1458 38 00 00      mov c, 0
0592+  145B             mul_loop:
0593+  145B F6            lodsb      ; load ASCII to al
0594+  145C B9 00         cmp al, 0
0595+  145E C6 71 14      je mul_exit
0596+  1461 6F 30         sub al, $30    ; make into integer
0597+  1463 22 00         mov ah, 0
0598+  1465 2A            mov b, [d]
0599+  1466 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1467 11            mov a, b
0601+  1468 28            mov b, c
0602+  1469 54            add a, b
0603+  146A 39            mov c, a
0604+  146B 63 02 00      sub d, 2
0605+  146E 0A 5B 14      jmp mul_loop
0606+  1471             mul_exit:
0607+  1471 12            mov a, c
0608+  1472 E7            pop d
0609+  1473 E6            pop c
0610+  1474 E5            pop b
0611+  1475 EF            pop si
0612+  1476 F9            leave
0613+  1477 09            ret
0614+  1478             
0615+  1478             
0616+  1478 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  147C 34 35 36 37 
0616+  1480 38 39 41 42 
0616+  1484 43 44 45 46 
0617+  1488 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  148C 1B 5B 48 00 
0618+  1490             
0619+  1490             table_power:
0620+  1490 01 00         .dw 1
0621+  1492 0A 00         .dw 10
0622+  1494 64 00         .dw 100
0623+  1496 E8 03         .dw 1000
0624+  1498 10 27         .dw 100002247   149A             ; --- END INLINE ASM BLOCK
2248   149A             
2249   149A F9            leave
2250   149B 09            ret
2251   149C             
2252   149C             back:
2253   149C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2254   149F             ; $t 
2255   149F 52 02 00      sub sp, 2
2256   14A2             ;; t = token; 
2257   14A2 FA FF FF      lea d, [bp + -1] ; $t         
2258   14A5 26 8F 25      mov b, _token_data ; $token                   
2259   14A8 FD 43         mov [d], b
2260   14AA             ;; while(*t++) prog--; 
2261   14AA             _while26_cond:
2262   14AA 2C FF FF      mov b, [bp + -1] ; $t             
2263   14AD FD 79         mov g, b
2264   14AF FD 77         inc b
2265   14B1 FA FF FF      lea d, [bp + -1] ; $t
2266   14B4 FD 43         mov [d], b
2267   14B6 FD 27         mov b, g
2268   14B8 74            mov d, b
2269   14B9 32            mov bl, [d]
2270   14BA A7 00         mov bh, 0
2271   14BC C0 00 00      cmp b, 0
2272   14BF C6 D3 14      je _while26_exit
2273   14C2             _while26_block:
2274   14C2             ;; prog--; 
2275   14C2 29 8D 25      mov b, [_prog] ; $prog           
2276   14C5 FD 79         mov g, b
2277   14C7 FD 7D         dec b
2278   14C9 3B 8D 25      mov d, _prog ; $prog
2279   14CC FD 43         mov [d], b
2280   14CE FD 27         mov b, g
2281   14D0 0A AA 14      jmp _while26_cond
2282   14D3             _while26_exit:
2283   14D3             ;; tok = TOK_UNDEF; 
2284   14D3 3B 89 25      mov d, _tok ; $tok         
2285   14D6 26 00 00      mov b, 0; TOK_UNDEF        
2286   14D9 FD 43         mov [d], b
2287   14DB             ;; toktype = TYPE_UNDEF; 
2288   14DB 3B 8B 25      mov d, _toktype ; $toktype         
2289   14DE 26 00 00      mov b, 0; TYPE_UNDEF        
2290   14E1 FD 43         mov [d], b
2291   14E3             ;; token[0] = '\0'; 
2292   14E3 3B 8F 25      mov d, _token_data ; $token
2293   14E6 D7            push a         
2294   14E7 26 00 00      mov b, $0        
2295   14EA 5A            add d, b
2296   14EB E4            pop a         
2297   14EC 26 00 00      mov b, $0        
2298   14EF FD 3E         mov [d], bl
2299   14F1 F9            leave
2300   14F2 09            ret
2301   14F3             
2302   14F3             get_path:
2303   14F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2304   14F6             ; $t 
2305   14F6 52 02 00      sub sp, 2
2306   14F9             ;; *token = '\0'; 
2307   14F9 26 8F 25      mov b, _token_data ; $token           
2308   14FC D8            push b
2309   14FD 26 00 00      mov b, $0
2310   1500 E7            pop d
2311   1501 FD 3E         mov [d], bl
2312   1503             ;; t = token; 
2313   1503 FA FF FF      lea d, [bp + -1] ; $t         
2314   1506 26 8F 25      mov b, _token_data ; $token                   
2315   1509 FD 43         mov [d], b
2316   150B             ;; while(is_space(*prog)) prog++; 
2317   150B             _while27_cond:
2318   150B 29 8D 25      mov b, [_prog] ; $prog           
2319   150E 74            mov d, b
2320   150F 32            mov bl, [d]
2321   1510 A7 00         mov bh, 0
2322   1512 DD            push bl
2323   1513 07 C9 05      call is_space
2324   1516 51 01 00      add sp, 1
2325   1519 C0 00 00      cmp b, 0
2326   151C C6 30 15      je _while27_exit
2327   151F             _while27_block:
2328   151F             ;; prog++; 
2329   151F 29 8D 25      mov b, [_prog] ; $prog           
2330   1522 FD 79         mov g, b
2331   1524 FD 77         inc b
2332   1526 3B 8D 25      mov d, _prog ; $prog
2333   1529 FD 43         mov [d], b
2334   152B FD 27         mov b, g
2335   152D 0A 0B 15      jmp _while27_cond
2336   1530             _while27_exit:
2337   1530             ;; if(*prog == '\0'){ 
2338   1530             _if28_cond:
2339   1530 29 8D 25      mov b, [_prog] ; $prog           
2340   1533 74            mov d, b
2341   1534 32            mov bl, [d]
2342   1535 A7 00         mov bh, 0
2343   1537             ; START RELATIONAL
2344   1537 D7            push a
2345   1538 11            mov a, b
2346   1539 26 00 00      mov b, $0
2347   153C B0            cmp a, b
2348   153D FD 71         seq ; ==
2349   153F E4            pop a
2350   1540             ; END RELATIONAL
2351   1540 C0 00 00      cmp b, 0
2352   1543 C6 4B 15      je _if28_exit
2353   1546             _if28_true:
2354   1546             ;; return; 
2355   1546 F9            leave
2356   1547 09            ret
2357   1548 0A 4B 15      jmp _if28_exit
2358   154B             _if28_exit:
2359   154B             ;; while( 
2360   154B             _while29_cond:
2361   154B 29 8D 25      mov b, [_prog] ; $prog           
2362   154E 74            mov d, b
2363   154F 32            mov bl, [d]
2364   1550 A7 00         mov bh, 0
2365   1552             ; START RELATIONAL
2366   1552 D7            push a
2367   1553 11            mov a, b
2368   1554 26 61 00      mov b, $61
2369   1557 B0            cmp a, b
2370   1558 FD 80         sge ; >=
2371   155A E4            pop a
2372   155B             ; END RELATIONAL
2373   155B D7            push a
2374   155C 11            mov a, b
2375   155D 29 8D 25      mov b, [_prog] ; $prog           
2376   1560 74            mov d, b
2377   1561 32            mov bl, [d]
2378   1562 A7 00         mov bh, 0
2379   1564             ; START RELATIONAL
2380   1564 D7            push a
2381   1565 11            mov a, b
2382   1566 26 7A 00      mov b, $7a
2383   1569 B0            cmp a, b
2384   156A FD 74         sle ; <=
2385   156C E4            pop a
2386   156D             ; END RELATIONAL
2387   156D FD A7         sand a, b ; &&
2388   156F E4            pop a
2389   1570 D7            push a
2390   1571 11            mov a, b
2391   1572 29 8D 25      mov b, [_prog] ; $prog           
2392   1575 74            mov d, b
2393   1576 32            mov bl, [d]
2394   1577 A7 00         mov bh, 0
2395   1579             ; START RELATIONAL
2396   1579 D7            push a
2397   157A 11            mov a, b
2398   157B 26 41 00      mov b, $41
2399   157E B0            cmp a, b
2400   157F FD 80         sge ; >=
2401   1581 E4            pop a
2402   1582             ; END RELATIONAL
2403   1582 D7            push a
2404   1583 11            mov a, b
2405   1584 29 8D 25      mov b, [_prog] ; $prog           
2406   1587 74            mov d, b
2407   1588 32            mov bl, [d]
2408   1589 A7 00         mov bh, 0
2409   158B             ; START RELATIONAL
2410   158B D7            push a
2411   158C 11            mov a, b
2412   158D 26 5A 00      mov b, $5a
2413   1590 B0            cmp a, b
2414   1591 FD 74         sle ; <=
2415   1593 E4            pop a
2416   1594             ; END RELATIONAL
2417   1594 FD A7         sand a, b ; &&
2418   1596 E4            pop a
2419   1597 FD A8         sor a, b ; ||
2420   1599 11            mov a, b
2421   159A 29 8D 25      mov b, [_prog] ; $prog           
2422   159D 74            mov d, b
2423   159E 32            mov bl, [d]
2424   159F A7 00         mov bh, 0
2425   15A1             ; START RELATIONAL
2426   15A1 D7            push a
2427   15A2 11            mov a, b
2428   15A3 26 30 00      mov b, $30
2429   15A6 B0            cmp a, b
2430   15A7 FD 80         sge ; >=
2431   15A9 E4            pop a
2432   15AA             ; END RELATIONAL
2433   15AA D7            push a
2434   15AB 11            mov a, b
2435   15AC 29 8D 25      mov b, [_prog] ; $prog           
2436   15AF 74            mov d, b
2437   15B0 32            mov bl, [d]
2438   15B1 A7 00         mov bh, 0
2439   15B3             ; START RELATIONAL
2440   15B3 D7            push a
2441   15B4 11            mov a, b
2442   15B5 26 39 00      mov b, $39
2443   15B8 B0            cmp a, b
2444   15B9 FD 74         sle ; <=
2445   15BB E4            pop a
2446   15BC             ; END RELATIONAL
2447   15BC FD A7         sand a, b ; &&
2448   15BE E4            pop a
2449   15BF FD A8         sor a, b ; ||
2450   15C1 11            mov a, b
2451   15C2 29 8D 25      mov b, [_prog] ; $prog           
2452   15C5 74            mov d, b
2453   15C6 32            mov bl, [d]
2454   15C7 A7 00         mov bh, 0
2455   15C9             ; START RELATIONAL
2456   15C9 D7            push a
2457   15CA 11            mov a, b
2458   15CB 26 2F 00      mov b, $2f
2459   15CE B0            cmp a, b
2460   15CF FD 71         seq ; ==
2461   15D1 E4            pop a
2462   15D2             ; END RELATIONAL
2463   15D2 FD A8         sor a, b ; ||
2464   15D4 11            mov a, b
2465   15D5 29 8D 25      mov b, [_prog] ; $prog           
2466   15D8 74            mov d, b
2467   15D9 32            mov bl, [d]
2468   15DA A7 00         mov bh, 0
2469   15DC             ; START RELATIONAL
2470   15DC D7            push a
2471   15DD 11            mov a, b
2472   15DE 26 5F 00      mov b, $5f
2473   15E1 B0            cmp a, b
2474   15E2 FD 71         seq ; ==
2475   15E4 E4            pop a
2476   15E5             ; END RELATIONAL
2477   15E5 FD A8         sor a, b ; ||
2478   15E7 11            mov a, b
2479   15E8 29 8D 25      mov b, [_prog] ; $prog           
2480   15EB 74            mov d, b
2481   15EC 32            mov bl, [d]
2482   15ED A7 00         mov bh, 0
2483   15EF             ; START RELATIONAL
2484   15EF D7            push a
2485   15F0 11            mov a, b
2486   15F1 26 2D 00      mov b, $2d
2487   15F4 B0            cmp a, b
2488   15F5 FD 71         seq ; ==
2489   15F7 E4            pop a
2490   15F8             ; END RELATIONAL
2491   15F8 FD A8         sor a, b ; ||
2492   15FA 11            mov a, b
2493   15FB 29 8D 25      mov b, [_prog] ; $prog           
2494   15FE 74            mov d, b
2495   15FF 32            mov bl, [d]
2496   1600 A7 00         mov bh, 0
2497   1602             ; START RELATIONAL
2498   1602 D7            push a
2499   1603 11            mov a, b
2500   1604 26 2E 00      mov b, $2e
2501   1607 B0            cmp a, b
2502   1608 FD 71         seq ; ==
2503   160A E4            pop a
2504   160B             ; END RELATIONAL
2505   160B FD A8         sor a, b ; ||
2506   160D E4            pop a
2507   160E C0 00 00      cmp b, 0
2508   1611 C6 3B 16      je _while29_exit
2509   1614             _while29_block:
2510   1614             ;; *t++ = *prog++; 
2511   1614 2C FF FF      mov b, [bp + -1] ; $t             
2512   1617 FD 79         mov g, b
2513   1619 FD 77         inc b
2514   161B FA FF FF      lea d, [bp + -1] ; $t
2515   161E FD 43         mov [d], b
2516   1620 FD 27         mov b, g
2517   1622 D8            push b
2518   1623 29 8D 25      mov b, [_prog] ; $prog           
2519   1626 FD 79         mov g, b
2520   1628 FD 77         inc b
2521   162A 3B 8D 25      mov d, _prog ; $prog
2522   162D FD 43         mov [d], b
2523   162F FD 27         mov b, g
2524   1631 74            mov d, b
2525   1632 32            mov bl, [d]
2526   1633 A7 00         mov bh, 0
2527   1635 E7            pop d
2528   1636 FD 3E         mov [d], bl
2529   1638 0A 4B 15      jmp _while29_cond
2530   163B             _while29_exit:
2531   163B             ;; *t = '\0'; 
2532   163B 2C FF FF      mov b, [bp + -1] ; $t             
2533   163E D8            push b
2534   163F 26 00 00      mov b, $0
2535   1642 E7            pop d
2536   1643 FD 3E         mov [d], bl
2537   1645 F9            leave
2538   1646 09            ret
2539   1647             
2540   1647             get:
2541   1647 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2542   164A             ; $t 
2543   164A 52 02 00      sub sp, 2
2544   164D             ;; *token = '\0'; 
2545   164D 26 8F 25      mov b, _token_data ; $token           
2546   1650 D8            push b
2547   1651 26 00 00      mov b, $0
2548   1654 E7            pop d
2549   1655 FD 3E         mov [d], bl
2550   1657             ;; tok = 0; 
2551   1657 3B 89 25      mov d, _tok ; $tok         
2552   165A 26 00 00      mov b, $0        
2553   165D FD 43         mov [d], b
2554   165F             ;; toktype = 0; 
2555   165F 3B 8B 25      mov d, _toktype ; $toktype         
2556   1662 26 00 00      mov b, $0        
2557   1665 FD 43         mov [d], b
2558   1667             ;; t = token; 
2559   1667 FA FF FF      lea d, [bp + -1] ; $t         
2560   166A 26 8F 25      mov b, _token_data ; $token                   
2561   166D FD 43         mov [d], b
2562   166F             ;; while(is_space(*prog)) prog++; 
2563   166F             _while30_cond:
2564   166F 29 8D 25      mov b, [_prog] ; $prog           
2565   1672 74            mov d, b
2566   1673 32            mov bl, [d]
2567   1674 A7 00         mov bh, 0
2568   1676 DD            push bl
2569   1677 07 C9 05      call is_space
2570   167A 51 01 00      add sp, 1
2571   167D C0 00 00      cmp b, 0
2572   1680 C6 94 16      je _while30_exit
2573   1683             _while30_block:
2574   1683             ;; prog++; 
2575   1683 29 8D 25      mov b, [_prog] ; $prog           
2576   1686 FD 79         mov g, b
2577   1688 FD 77         inc b
2578   168A 3B 8D 25      mov d, _prog ; $prog
2579   168D FD 43         mov [d], b
2580   168F FD 27         mov b, g
2581   1691 0A 6F 16      jmp _while30_cond
2582   1694             _while30_exit:
2583   1694             ;; if(*prog == '\0'){ 
2584   1694             _if31_cond:
2585   1694 29 8D 25      mov b, [_prog] ; $prog           
2586   1697 74            mov d, b
2587   1698 32            mov bl, [d]
2588   1699 A7 00         mov bh, 0
2589   169B             ; START RELATIONAL
2590   169B D7            push a
2591   169C 11            mov a, b
2592   169D 26 00 00      mov b, $0
2593   16A0 B0            cmp a, b
2594   16A1 FD 71         seq ; ==
2595   16A3 E4            pop a
2596   16A4             ; END RELATIONAL
2597   16A4 C0 00 00      cmp b, 0
2598   16A7 C6 B7 16      je _if31_exit
2599   16AA             _if31_true:
2600   16AA             ;; toktype = END; 
2601   16AA 3B 8B 25      mov d, _toktype ; $toktype         
2602   16AD 26 06 00      mov b, 6; END        
2603   16B0 FD 43         mov [d], b
2604   16B2             ;; return; 
2605   16B2 F9            leave
2606   16B3 09            ret
2607   16B4 0A B7 16      jmp _if31_exit
2608   16B7             _if31_exit:
2609   16B7             ;; if(is_digit(*prog)){ 
2610   16B7             _if32_cond:
2611   16B7 29 8D 25      mov b, [_prog] ; $prog           
2612   16BA 74            mov d, b
2613   16BB 32            mov bl, [d]
2614   16BC A7 00         mov bh, 0
2615   16BE DD            push bl
2616   16BF 07 11 06      call is_digit
2617   16C2 51 01 00      add sp, 1
2618   16C5 C0 00 00      cmp b, 0
2619   16C8 C6 1D 17      je _if32_else
2620   16CB             _if32_true:
2621   16CB             ;; while(is_digit(*prog)){ 
2622   16CB             _while33_cond:
2623   16CB 29 8D 25      mov b, [_prog] ; $prog           
2624   16CE 74            mov d, b
2625   16CF 32            mov bl, [d]
2626   16D0 A7 00         mov bh, 0
2627   16D2 DD            push bl
2628   16D3 07 11 06      call is_digit
2629   16D6 51 01 00      add sp, 1
2630   16D9 C0 00 00      cmp b, 0
2631   16DC C6 06 17      je _while33_exit
2632   16DF             _while33_block:
2633   16DF             ;; *t++ = *prog++; 
2634   16DF 2C FF FF      mov b, [bp + -1] ; $t             
2635   16E2 FD 79         mov g, b
2636   16E4 FD 77         inc b
2637   16E6 FA FF FF      lea d, [bp + -1] ; $t
2638   16E9 FD 43         mov [d], b
2639   16EB FD 27         mov b, g
2640   16ED D8            push b
2641   16EE 29 8D 25      mov b, [_prog] ; $prog           
2642   16F1 FD 79         mov g, b
2643   16F3 FD 77         inc b
2644   16F5 3B 8D 25      mov d, _prog ; $prog
2645   16F8 FD 43         mov [d], b
2646   16FA FD 27         mov b, g
2647   16FC 74            mov d, b
2648   16FD 32            mov bl, [d]
2649   16FE A7 00         mov bh, 0
2650   1700 E7            pop d
2651   1701 FD 3E         mov [d], bl
2652   1703 0A CB 16      jmp _while33_cond
2653   1706             _while33_exit:
2654   1706             ;; *t = '\0'; 
2655   1706 2C FF FF      mov b, [bp + -1] ; $t             
2656   1709 D8            push b
2657   170A 26 00 00      mov b, $0
2658   170D E7            pop d
2659   170E FD 3E         mov [d], bl
2660   1710             ;; toktype = INTEGER_CONST; 
2661   1710 3B 8B 25      mov d, _toktype ; $toktype         
2662   1713 26 04 00      mov b, 4; INTEGER_CONST        
2663   1716 FD 43         mov [d], b
2664   1718             ;; return; // return to avoid *t = '\0' line at the end of function 
2665   1718 F9            leave
2666   1719 09            ret
2667   171A 0A FA 22      jmp _if32_exit
2668   171D             _if32_else:
2669   171D             ;; if(is_alpha(*prog)){ 
2670   171D             _if34_cond:
2671   171D 29 8D 25      mov b, [_prog] ; $prog           
2672   1720 74            mov d, b
2673   1721 32            mov bl, [d]
2674   1722 A7 00         mov bh, 0
2675   1724 DD            push bl
2676   1725 07 37 06      call is_alpha
2677   1728 51 01 00      add sp, 1
2678   172B C0 00 00      cmp b, 0
2679   172E C6 94 17      je _if34_else
2680   1731             _if34_true:
2681   1731             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
2682   1731             _while35_cond:
2683   1731 29 8D 25      mov b, [_prog] ; $prog           
2684   1734 74            mov d, b
2685   1735 32            mov bl, [d]
2686   1736 A7 00         mov bh, 0
2687   1738 DD            push bl
2688   1739 07 37 06      call is_alpha
2689   173C 51 01 00      add sp, 1
2690   173F D7            push a
2691   1740 11            mov a, b
2692   1741 29 8D 25      mov b, [_prog] ; $prog           
2693   1744 74            mov d, b
2694   1745 32            mov bl, [d]
2695   1746 A7 00         mov bh, 0
2696   1748 DD            push bl
2697   1749 07 11 06      call is_digit
2698   174C 51 01 00      add sp, 1
2699   174F FD A8         sor a, b ; ||
2700   1751 E4            pop a
2701   1752 C0 00 00      cmp b, 0
2702   1755 C6 7F 17      je _while35_exit
2703   1758             _while35_block:
2704   1758             ;; *t++ = *prog++; 
2705   1758 2C FF FF      mov b, [bp + -1] ; $t             
2706   175B FD 79         mov g, b
2707   175D FD 77         inc b
2708   175F FA FF FF      lea d, [bp + -1] ; $t
2709   1762 FD 43         mov [d], b
2710   1764 FD 27         mov b, g
2711   1766 D8            push b
2712   1767 29 8D 25      mov b, [_prog] ; $prog           
2713   176A FD 79         mov g, b
2714   176C FD 77         inc b
2715   176E 3B 8D 25      mov d, _prog ; $prog
2716   1771 FD 43         mov [d], b
2717   1773 FD 27         mov b, g
2718   1775 74            mov d, b
2719   1776 32            mov bl, [d]
2720   1777 A7 00         mov bh, 0
2721   1779 E7            pop d
2722   177A FD 3E         mov [d], bl
2723   177C 0A 31 17      jmp _while35_cond
2724   177F             _while35_exit:
2725   177F             ;; *t = '\0'; 
2726   177F 2C FF FF      mov b, [bp + -1] ; $t             
2727   1782 D8            push b
2728   1783 26 00 00      mov b, $0
2729   1786 E7            pop d
2730   1787 FD 3E         mov [d], bl
2731   1789             ;; toktype = IDENTIFIER; 
2732   1789 3B 8B 25      mov d, _toktype ; $toktype         
2733   178C 26 05 00      mov b, 5; IDENTIFIER        
2734   178F FD 43         mov [d], b
2735   1791 0A FA 22      jmp _if34_exit
2736   1794             _if34_else:
2737   1794             ;; if(*prog == '\"'){ 
2738   1794             _if36_cond:
2739   1794 29 8D 25      mov b, [_prog] ; $prog           
2740   1797 74            mov d, b
2741   1798 32            mov bl, [d]
2742   1799 A7 00         mov bh, 0
2743   179B             ; START RELATIONAL
2744   179B D7            push a
2745   179C 11            mov a, b
2746   179D 26 22 00      mov b, $22
2747   17A0 B0            cmp a, b
2748   17A1 FD 71         seq ; ==
2749   17A3 E4            pop a
2750   17A4             ; END RELATIONAL
2751   17A4 C0 00 00      cmp b, 0
2752   17A7 C6 76 18      je _if36_else
2753   17AA             _if36_true:
2754   17AA             ;; *t++ = '\"'; 
2755   17AA 2C FF FF      mov b, [bp + -1] ; $t             
2756   17AD FD 79         mov g, b
2757   17AF FD 77         inc b
2758   17B1 FA FF FF      lea d, [bp + -1] ; $t
2759   17B4 FD 43         mov [d], b
2760   17B6 FD 27         mov b, g
2761   17B8 D8            push b
2762   17B9 26 22 00      mov b, $22
2763   17BC E7            pop d
2764   17BD FD 3E         mov [d], bl
2765   17BF             ;; prog++; 
2766   17BF 29 8D 25      mov b, [_prog] ; $prog           
2767   17C2 FD 79         mov g, b
2768   17C4 FD 77         inc b
2769   17C6 3B 8D 25      mov d, _prog ; $prog
2770   17C9 FD 43         mov [d], b
2771   17CB FD 27         mov b, g
2772   17CD             ;; while(*prog != '\"' && *prog){ 
2773   17CD             _while37_cond:
2774   17CD 29 8D 25      mov b, [_prog] ; $prog           
2775   17D0 74            mov d, b
2776   17D1 32            mov bl, [d]
2777   17D2 A7 00         mov bh, 0
2778   17D4             ; START RELATIONAL
2779   17D4 D7            push a
2780   17D5 11            mov a, b
2781   17D6 26 22 00      mov b, $22
2782   17D9 B0            cmp a, b
2783   17DA FD 72         sneq ; !=
2784   17DC E4            pop a
2785   17DD             ; END RELATIONAL
2786   17DD D7            push a
2787   17DE 11            mov a, b
2788   17DF 29 8D 25      mov b, [_prog] ; $prog           
2789   17E2 74            mov d, b
2790   17E3 32            mov bl, [d]
2791   17E4 A7 00         mov bh, 0
2792   17E6 FD A7         sand a, b ; &&
2793   17E8 E4            pop a
2794   17E9 C0 00 00      cmp b, 0
2795   17EC C6 16 18      je _while37_exit
2796   17EF             _while37_block:
2797   17EF             ;; *t++ = *prog++; 
2798   17EF 2C FF FF      mov b, [bp + -1] ; $t             
2799   17F2 FD 79         mov g, b
2800   17F4 FD 77         inc b
2801   17F6 FA FF FF      lea d, [bp + -1] ; $t
2802   17F9 FD 43         mov [d], b
2803   17FB FD 27         mov b, g
2804   17FD D8            push b
2805   17FE 29 8D 25      mov b, [_prog] ; $prog           
2806   1801 FD 79         mov g, b
2807   1803 FD 77         inc b
2808   1805 3B 8D 25      mov d, _prog ; $prog
2809   1808 FD 43         mov [d], b
2810   180A FD 27         mov b, g
2811   180C 74            mov d, b
2812   180D 32            mov bl, [d]
2813   180E A7 00         mov bh, 0
2814   1810 E7            pop d
2815   1811 FD 3E         mov [d], bl
2816   1813 0A CD 17      jmp _while37_cond
2817   1816             _while37_exit:
2818   1816             ;; if(*prog != '\"') error("Double quotes expected"); 
2819   1816             _if38_cond:
2820   1816 29 8D 25      mov b, [_prog] ; $prog           
2821   1819 74            mov d, b
2822   181A 32            mov bl, [d]
2823   181B A7 00         mov bh, 0
2824   181D             ; START RELATIONAL
2825   181D D7            push a
2826   181E 11            mov a, b
2827   181F 26 22 00      mov b, $22
2828   1822 B0            cmp a, b
2829   1823 FD 72         sneq ; !=
2830   1825 E4            pop a
2831   1826             ; END RELATIONAL
2832   1826 C0 00 00      cmp b, 0
2833   1829 C6 3B 18      je _if38_exit
2834   182C             _if38_true:
2835   182C             ;; error("Double quotes expected"); 
2836   182C 26 F4 27      mov b, __s2 ; "Double quotes expected"
2837   182F FD AB         swp b
2838   1831 D8            push b
2839   1832 07 3D 25      call error
2840   1835 51 02 00      add sp, 2
2841   1838 0A 3B 18      jmp _if38_exit
2842   183B             _if38_exit:
2843   183B             ;; *t++ = '\"'; 
2844   183B 2C FF FF      mov b, [bp + -1] ; $t             
2845   183E FD 79         mov g, b
2846   1840 FD 77         inc b
2847   1842 FA FF FF      lea d, [bp + -1] ; $t
2848   1845 FD 43         mov [d], b
2849   1847 FD 27         mov b, g
2850   1849 D8            push b
2851   184A 26 22 00      mov b, $22
2852   184D E7            pop d
2853   184E FD 3E         mov [d], bl
2854   1850             ;; prog++; 
2855   1850 29 8D 25      mov b, [_prog] ; $prog           
2856   1853 FD 79         mov g, b
2857   1855 FD 77         inc b
2858   1857 3B 8D 25      mov d, _prog ; $prog
2859   185A FD 43         mov [d], b
2860   185C FD 27         mov b, g
2861   185E             ;; toktype = STRING_CONST; 
2862   185E 3B 8B 25      mov d, _toktype ; $toktype         
2863   1861 26 03 00      mov b, 3; STRING_CONST        
2864   1864 FD 43         mov [d], b
2865   1866             ;; *t = '\0'; 
2866   1866 2C FF FF      mov b, [bp + -1] ; $t             
2867   1869 D8            push b
2868   186A 26 00 00      mov b, $0
2869   186D E7            pop d
2870   186E FD 3E         mov [d], bl
2871   1870             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
2872   1870 07 06 23      call convert_constant
2873   1873 0A FA 22      jmp _if36_exit
2874   1876             _if36_else:
2875   1876             ;; if(*prog == '#'){ 
2876   1876             _if39_cond:
2877   1876 29 8D 25      mov b, [_prog] ; $prog           
2878   1879 74            mov d, b
2879   187A 32            mov bl, [d]
2880   187B A7 00         mov bh, 0
2881   187D             ; START RELATIONAL
2882   187D D7            push a
2883   187E 11            mov a, b
2884   187F 26 23 00      mov b, $23
2885   1882 B0            cmp a, b
2886   1883 FD 71         seq ; ==
2887   1885 E4            pop a
2888   1886             ; END RELATIONAL
2889   1886 C0 00 00      cmp b, 0
2890   1889 C6 C3 18      je _if39_else
2891   188C             _if39_true:
2892   188C             ;; *t++ = *prog++; 
2893   188C 2C FF FF      mov b, [bp + -1] ; $t             
2894   188F FD 79         mov g, b
2895   1891 FD 77         inc b
2896   1893 FA FF FF      lea d, [bp + -1] ; $t
2897   1896 FD 43         mov [d], b
2898   1898 FD 27         mov b, g
2899   189A D8            push b
2900   189B 29 8D 25      mov b, [_prog] ; $prog           
2901   189E FD 79         mov g, b
2902   18A0 FD 77         inc b
2903   18A2 3B 8D 25      mov d, _prog ; $prog
2904   18A5 FD 43         mov [d], b
2905   18A7 FD 27         mov b, g
2906   18A9 74            mov d, b
2907   18AA 32            mov bl, [d]
2908   18AB A7 00         mov bh, 0
2909   18AD E7            pop d
2910   18AE FD 3E         mov [d], bl
2911   18B0             ;; tok = HASH; 
2912   18B0 3B 89 25      mov d, _tok ; $tok         
2913   18B3 26 15 00      mov b, 21; HASH        
2914   18B6 FD 43         mov [d], b
2915   18B8             ;; toktype = DELIMITER;   
2916   18B8 3B 8B 25      mov d, _toktype ; $toktype         
2917   18BB 26 01 00      mov b, 1; DELIMITER        
2918   18BE FD 43         mov [d], b
2919   18C0 0A FA 22      jmp _if39_exit
2920   18C3             _if39_else:
2921   18C3             ;; if(*prog == '{'){ 
2922   18C3             _if40_cond:
2923   18C3 29 8D 25      mov b, [_prog] ; $prog           
2924   18C6 74            mov d, b
2925   18C7 32            mov bl, [d]
2926   18C8 A7 00         mov bh, 0
2927   18CA             ; START RELATIONAL
2928   18CA D7            push a
2929   18CB 11            mov a, b
2930   18CC 26 7B 00      mov b, $7b
2931   18CF B0            cmp a, b
2932   18D0 FD 71         seq ; ==
2933   18D2 E4            pop a
2934   18D3             ; END RELATIONAL
2935   18D3 C0 00 00      cmp b, 0
2936   18D6 C6 10 19      je _if40_else
2937   18D9             _if40_true:
2938   18D9             ;; *t++ = *prog++; 
2939   18D9 2C FF FF      mov b, [bp + -1] ; $t             
2940   18DC FD 79         mov g, b
2941   18DE FD 77         inc b
2942   18E0 FA FF FF      lea d, [bp + -1] ; $t
2943   18E3 FD 43         mov [d], b
2944   18E5 FD 27         mov b, g
2945   18E7 D8            push b
2946   18E8 29 8D 25      mov b, [_prog] ; $prog           
2947   18EB FD 79         mov g, b
2948   18ED FD 77         inc b
2949   18EF 3B 8D 25      mov d, _prog ; $prog
2950   18F2 FD 43         mov [d], b
2951   18F4 FD 27         mov b, g
2952   18F6 74            mov d, b
2953   18F7 32            mov bl, [d]
2954   18F8 A7 00         mov bh, 0
2955   18FA E7            pop d
2956   18FB FD 3E         mov [d], bl
2957   18FD             ;; tok = OPENING_BRACE; 
2958   18FD 3B 89 25      mov d, _tok ; $tok         
2959   1900 26 1E 00      mov b, 30; OPENING_BRACE        
2960   1903 FD 43         mov [d], b
2961   1905             ;; toktype = DELIMITER;   
2962   1905 3B 8B 25      mov d, _toktype ; $toktype         
2963   1908 26 01 00      mov b, 1; DELIMITER        
2964   190B FD 43         mov [d], b
2965   190D 0A FA 22      jmp _if40_exit
2966   1910             _if40_else:
2967   1910             ;; if(*prog == '}'){ 
2968   1910             _if41_cond:
2969   1910 29 8D 25      mov b, [_prog] ; $prog           
2970   1913 74            mov d, b
2971   1914 32            mov bl, [d]
2972   1915 A7 00         mov bh, 0
2973   1917             ; START RELATIONAL
2974   1917 D7            push a
2975   1918 11            mov a, b
2976   1919 26 7D 00      mov b, $7d
2977   191C B0            cmp a, b
2978   191D FD 71         seq ; ==
2979   191F E4            pop a
2980   1920             ; END RELATIONAL
2981   1920 C0 00 00      cmp b, 0
2982   1923 C6 5D 19      je _if41_else
2983   1926             _if41_true:
2984   1926             ;; *t++ = *prog++; 
2985   1926 2C FF FF      mov b, [bp + -1] ; $t             
2986   1929 FD 79         mov g, b
2987   192B FD 77         inc b
2988   192D FA FF FF      lea d, [bp + -1] ; $t
2989   1930 FD 43         mov [d], b
2990   1932 FD 27         mov b, g
2991   1934 D8            push b
2992   1935 29 8D 25      mov b, [_prog] ; $prog           
2993   1938 FD 79         mov g, b
2994   193A FD 77         inc b
2995   193C 3B 8D 25      mov d, _prog ; $prog
2996   193F FD 43         mov [d], b
2997   1941 FD 27         mov b, g
2998   1943 74            mov d, b
2999   1944 32            mov bl, [d]
3000   1945 A7 00         mov bh, 0
3001   1947 E7            pop d
3002   1948 FD 3E         mov [d], bl
3003   194A             ;; tok = CLOSING_BRACE; 
3004   194A 3B 89 25      mov d, _tok ; $tok         
3005   194D 26 1F 00      mov b, 31; CLOSING_BRACE        
3006   1950 FD 43         mov [d], b
3007   1952             ;; toktype = DELIMITER;   
3008   1952 3B 8B 25      mov d, _toktype ; $toktype         
3009   1955 26 01 00      mov b, 1; DELIMITER        
3010   1958 FD 43         mov [d], b
3011   195A 0A FA 22      jmp _if41_exit
3012   195D             _if41_else:
3013   195D             ;; if(*prog == '['){ 
3014   195D             _if42_cond:
3015   195D 29 8D 25      mov b, [_prog] ; $prog           
3016   1960 74            mov d, b
3017   1961 32            mov bl, [d]
3018   1962 A7 00         mov bh, 0
3019   1964             ; START RELATIONAL
3020   1964 D7            push a
3021   1965 11            mov a, b
3022   1966 26 5B 00      mov b, $5b
3023   1969 B0            cmp a, b
3024   196A FD 71         seq ; ==
3025   196C E4            pop a
3026   196D             ; END RELATIONAL
3027   196D C0 00 00      cmp b, 0
3028   1970 C6 AA 19      je _if42_else
3029   1973             _if42_true:
3030   1973             ;; *t++ = *prog++; 
3031   1973 2C FF FF      mov b, [bp + -1] ; $t             
3032   1976 FD 79         mov g, b
3033   1978 FD 77         inc b
3034   197A FA FF FF      lea d, [bp + -1] ; $t
3035   197D FD 43         mov [d], b
3036   197F FD 27         mov b, g
3037   1981 D8            push b
3038   1982 29 8D 25      mov b, [_prog] ; $prog           
3039   1985 FD 79         mov g, b
3040   1987 FD 77         inc b
3041   1989 3B 8D 25      mov d, _prog ; $prog
3042   198C FD 43         mov [d], b
3043   198E FD 27         mov b, g
3044   1990 74            mov d, b
3045   1991 32            mov bl, [d]
3046   1992 A7 00         mov bh, 0
3047   1994 E7            pop d
3048   1995 FD 3E         mov [d], bl
3049   1997             ;; tok = OPENING_BRACKET; 
3050   1997 3B 89 25      mov d, _tok ; $tok         
3051   199A 26 20 00      mov b, 32; OPENING_BRACKET        
3052   199D FD 43         mov [d], b
3053   199F             ;; toktype = DELIMITER;   
3054   199F 3B 8B 25      mov d, _toktype ; $toktype         
3055   19A2 26 01 00      mov b, 1; DELIMITER        
3056   19A5 FD 43         mov [d], b
3057   19A7 0A FA 22      jmp _if42_exit
3058   19AA             _if42_else:
3059   19AA             ;; if(*prog == ']'){ 
3060   19AA             _if43_cond:
3061   19AA 29 8D 25      mov b, [_prog] ; $prog           
3062   19AD 74            mov d, b
3063   19AE 32            mov bl, [d]
3064   19AF A7 00         mov bh, 0
3065   19B1             ; START RELATIONAL
3066   19B1 D7            push a
3067   19B2 11            mov a, b
3068   19B3 26 5D 00      mov b, $5d
3069   19B6 B0            cmp a, b
3070   19B7 FD 71         seq ; ==
3071   19B9 E4            pop a
3072   19BA             ; END RELATIONAL
3073   19BA C0 00 00      cmp b, 0
3074   19BD C6 F7 19      je _if43_else
3075   19C0             _if43_true:
3076   19C0             ;; *t++ = *prog++; 
3077   19C0 2C FF FF      mov b, [bp + -1] ; $t             
3078   19C3 FD 79         mov g, b
3079   19C5 FD 77         inc b
3080   19C7 FA FF FF      lea d, [bp + -1] ; $t
3081   19CA FD 43         mov [d], b
3082   19CC FD 27         mov b, g
3083   19CE D8            push b
3084   19CF 29 8D 25      mov b, [_prog] ; $prog           
3085   19D2 FD 79         mov g, b
3086   19D4 FD 77         inc b
3087   19D6 3B 8D 25      mov d, _prog ; $prog
3088   19D9 FD 43         mov [d], b
3089   19DB FD 27         mov b, g
3090   19DD 74            mov d, b
3091   19DE 32            mov bl, [d]
3092   19DF A7 00         mov bh, 0
3093   19E1 E7            pop d
3094   19E2 FD 3E         mov [d], bl
3095   19E4             ;; tok = CLOSING_BRACKET; 
3096   19E4 3B 89 25      mov d, _tok ; $tok         
3097   19E7 26 21 00      mov b, 33; CLOSING_BRACKET        
3098   19EA FD 43         mov [d], b
3099   19EC             ;; toktype = DELIMITER;   
3100   19EC 3B 8B 25      mov d, _toktype ; $toktype         
3101   19EF 26 01 00      mov b, 1; DELIMITER        
3102   19F2 FD 43         mov [d], b
3103   19F4 0A FA 22      jmp _if43_exit
3104   19F7             _if43_else:
3105   19F7             ;; if(*prog == '='){ 
3106   19F7             _if44_cond:
3107   19F7 29 8D 25      mov b, [_prog] ; $prog           
3108   19FA 74            mov d, b
3109   19FB 32            mov bl, [d]
3110   19FC A7 00         mov bh, 0
3111   19FE             ; START RELATIONAL
3112   19FE D7            push a
3113   19FF 11            mov a, b
3114   1A00 26 3D 00      mov b, $3d
3115   1A03 B0            cmp a, b
3116   1A04 FD 71         seq ; ==
3117   1A06 E4            pop a
3118   1A07             ; END RELATIONAL
3119   1A07 C0 00 00      cmp b, 0
3120   1A0A C6 89 1A      je _if44_else
3121   1A0D             _if44_true:
3122   1A0D             ;; *t++ = *prog++; 
3123   1A0D 2C FF FF      mov b, [bp + -1] ; $t             
3124   1A10 FD 79         mov g, b
3125   1A12 FD 77         inc b
3126   1A14 FA FF FF      lea d, [bp + -1] ; $t
3127   1A17 FD 43         mov [d], b
3128   1A19 FD 27         mov b, g
3129   1A1B D8            push b
3130   1A1C 29 8D 25      mov b, [_prog] ; $prog           
3131   1A1F FD 79         mov g, b
3132   1A21 FD 77         inc b
3133   1A23 3B 8D 25      mov d, _prog ; $prog
3134   1A26 FD 43         mov [d], b
3135   1A28 FD 27         mov b, g
3136   1A2A 74            mov d, b
3137   1A2B 32            mov bl, [d]
3138   1A2C A7 00         mov bh, 0
3139   1A2E E7            pop d
3140   1A2F FD 3E         mov [d], bl
3141   1A31             ;; if (*prog == '='){ 
3142   1A31             _if45_cond:
3143   1A31 29 8D 25      mov b, [_prog] ; $prog           
3144   1A34 74            mov d, b
3145   1A35 32            mov bl, [d]
3146   1A36 A7 00         mov bh, 0
3147   1A38             ; START RELATIONAL
3148   1A38 D7            push a
3149   1A39 11            mov a, b
3150   1A3A 26 3D 00      mov b, $3d
3151   1A3D B0            cmp a, b
3152   1A3E FD 71         seq ; ==
3153   1A40 E4            pop a
3154   1A41             ; END RELATIONAL
3155   1A41 C0 00 00      cmp b, 0
3156   1A44 C6 76 1A      je _if45_else
3157   1A47             _if45_true:
3158   1A47             ;; *t++ = *prog++; 
3159   1A47 2C FF FF      mov b, [bp + -1] ; $t             
3160   1A4A FD 79         mov g, b
3161   1A4C FD 77         inc b
3162   1A4E FA FF FF      lea d, [bp + -1] ; $t
3163   1A51 FD 43         mov [d], b
3164   1A53 FD 27         mov b, g
3165   1A55 D8            push b
3166   1A56 29 8D 25      mov b, [_prog] ; $prog           
3167   1A59 FD 79         mov g, b
3168   1A5B FD 77         inc b
3169   1A5D 3B 8D 25      mov d, _prog ; $prog
3170   1A60 FD 43         mov [d], b
3171   1A62 FD 27         mov b, g
3172   1A64 74            mov d, b
3173   1A65 32            mov bl, [d]
3174   1A66 A7 00         mov bh, 0
3175   1A68 E7            pop d
3176   1A69 FD 3E         mov [d], bl
3177   1A6B             ;; tok = EQUAL; 
3178   1A6B 3B 89 25      mov d, _tok ; $tok         
3179   1A6E 26 08 00      mov b, 8; EQUAL        
3180   1A71 FD 43         mov [d], b
3181   1A73 0A 7E 1A      jmp _if45_exit
3182   1A76             _if45_else:
3183   1A76             ;; tok = ASSIGNMENT; 
3184   1A76 3B 89 25      mov d, _tok ; $tok         
3185   1A79 26 11 00      mov b, 17; ASSIGNMENT        
3186   1A7C FD 43         mov [d], b
3187   1A7E             _if45_exit:
3188   1A7E             ;; toktype = DELIMITER;   
3189   1A7E 3B 8B 25      mov d, _toktype ; $toktype         
3190   1A81 26 01 00      mov b, 1; DELIMITER        
3191   1A84 FD 43         mov [d], b
3192   1A86 0A FA 22      jmp _if44_exit
3193   1A89             _if44_else:
3194   1A89             ;; if(*prog == '&'){ 
3195   1A89             _if46_cond:
3196   1A89 29 8D 25      mov b, [_prog] ; $prog           
3197   1A8C 74            mov d, b
3198   1A8D 32            mov bl, [d]
3199   1A8E A7 00         mov bh, 0
3200   1A90             ; START RELATIONAL
3201   1A90 D7            push a
3202   1A91 11            mov a, b
3203   1A92 26 26 00      mov b, $26
3204   1A95 B0            cmp a, b
3205   1A96 FD 71         seq ; ==
3206   1A98 E4            pop a
3207   1A99             ; END RELATIONAL
3208   1A99 C0 00 00      cmp b, 0
3209   1A9C C6 1B 1B      je _if46_else
3210   1A9F             _if46_true:
3211   1A9F             ;; *t++ = *prog++; 
3212   1A9F 2C FF FF      mov b, [bp + -1] ; $t             
3213   1AA2 FD 79         mov g, b
3214   1AA4 FD 77         inc b
3215   1AA6 FA FF FF      lea d, [bp + -1] ; $t
3216   1AA9 FD 43         mov [d], b
3217   1AAB FD 27         mov b, g
3218   1AAD D8            push b
3219   1AAE 29 8D 25      mov b, [_prog] ; $prog           
3220   1AB1 FD 79         mov g, b
3221   1AB3 FD 77         inc b
3222   1AB5 3B 8D 25      mov d, _prog ; $prog
3223   1AB8 FD 43         mov [d], b
3224   1ABA FD 27         mov b, g
3225   1ABC 74            mov d, b
3226   1ABD 32            mov bl, [d]
3227   1ABE A7 00         mov bh, 0
3228   1AC0 E7            pop d
3229   1AC1 FD 3E         mov [d], bl
3230   1AC3             ;; if(*prog == '&'){ 
3231   1AC3             _if47_cond:
3232   1AC3 29 8D 25      mov b, [_prog] ; $prog           
3233   1AC6 74            mov d, b
3234   1AC7 32            mov bl, [d]
3235   1AC8 A7 00         mov bh, 0
3236   1ACA             ; START RELATIONAL
3237   1ACA D7            push a
3238   1ACB 11            mov a, b
3239   1ACC 26 26 00      mov b, $26
3240   1ACF B0            cmp a, b
3241   1AD0 FD 71         seq ; ==
3242   1AD2 E4            pop a
3243   1AD3             ; END RELATIONAL
3244   1AD3 C0 00 00      cmp b, 0
3245   1AD6 C6 08 1B      je _if47_else
3246   1AD9             _if47_true:
3247   1AD9             ;; *t++ = *prog++; 
3248   1AD9 2C FF FF      mov b, [bp + -1] ; $t             
3249   1ADC FD 79         mov g, b
3250   1ADE FD 77         inc b
3251   1AE0 FA FF FF      lea d, [bp + -1] ; $t
3252   1AE3 FD 43         mov [d], b
3253   1AE5 FD 27         mov b, g
3254   1AE7 D8            push b
3255   1AE8 29 8D 25      mov b, [_prog] ; $prog           
3256   1AEB FD 79         mov g, b
3257   1AED FD 77         inc b
3258   1AEF 3B 8D 25      mov d, _prog ; $prog
3259   1AF2 FD 43         mov [d], b
3260   1AF4 FD 27         mov b, g
3261   1AF6 74            mov d, b
3262   1AF7 32            mov bl, [d]
3263   1AF8 A7 00         mov bh, 0
3264   1AFA E7            pop d
3265   1AFB FD 3E         mov [d], bl
3266   1AFD             ;; tok = LOGICAL_AND; 
3267   1AFD 3B 89 25      mov d, _tok ; $tok         
3268   1B00 26 0E 00      mov b, 14; LOGICAL_AND        
3269   1B03 FD 43         mov [d], b
3270   1B05 0A 10 1B      jmp _if47_exit
3271   1B08             _if47_else:
3272   1B08             ;; tok = AMPERSAND; 
3273   1B08 3B 89 25      mov d, _tok ; $tok         
3274   1B0B 26 16 00      mov b, 22; AMPERSAND        
3275   1B0E FD 43         mov [d], b
3276   1B10             _if47_exit:
3277   1B10             ;; toktype = DELIMITER;   
3278   1B10 3B 8B 25      mov d, _toktype ; $toktype         
3279   1B13 26 01 00      mov b, 1; DELIMITER        
3280   1B16 FD 43         mov [d], b
3281   1B18 0A FA 22      jmp _if46_exit
3282   1B1B             _if46_else:
3283   1B1B             ;; if(*prog == '|'){ 
3284   1B1B             _if48_cond:
3285   1B1B 29 8D 25      mov b, [_prog] ; $prog           
3286   1B1E 74            mov d, b
3287   1B1F 32            mov bl, [d]
3288   1B20 A7 00         mov bh, 0
3289   1B22             ; START RELATIONAL
3290   1B22 D7            push a
3291   1B23 11            mov a, b
3292   1B24 26 7C 00      mov b, $7c
3293   1B27 B0            cmp a, b
3294   1B28 FD 71         seq ; ==
3295   1B2A E4            pop a
3296   1B2B             ; END RELATIONAL
3297   1B2B C0 00 00      cmp b, 0
3298   1B2E C6 AD 1B      je _if48_else
3299   1B31             _if48_true:
3300   1B31             ;; *t++ = *prog++; 
3301   1B31 2C FF FF      mov b, [bp + -1] ; $t             
3302   1B34 FD 79         mov g, b
3303   1B36 FD 77         inc b
3304   1B38 FA FF FF      lea d, [bp + -1] ; $t
3305   1B3B FD 43         mov [d], b
3306   1B3D FD 27         mov b, g
3307   1B3F D8            push b
3308   1B40 29 8D 25      mov b, [_prog] ; $prog           
3309   1B43 FD 79         mov g, b
3310   1B45 FD 77         inc b
3311   1B47 3B 8D 25      mov d, _prog ; $prog
3312   1B4A FD 43         mov [d], b
3313   1B4C FD 27         mov b, g
3314   1B4E 74            mov d, b
3315   1B4F 32            mov bl, [d]
3316   1B50 A7 00         mov bh, 0
3317   1B52 E7            pop d
3318   1B53 FD 3E         mov [d], bl
3319   1B55             ;; if (*prog == '|'){ 
3320   1B55             _if49_cond:
3321   1B55 29 8D 25      mov b, [_prog] ; $prog           
3322   1B58 74            mov d, b
3323   1B59 32            mov bl, [d]
3324   1B5A A7 00         mov bh, 0
3325   1B5C             ; START RELATIONAL
3326   1B5C D7            push a
3327   1B5D 11            mov a, b
3328   1B5E 26 7C 00      mov b, $7c
3329   1B61 B0            cmp a, b
3330   1B62 FD 71         seq ; ==
3331   1B64 E4            pop a
3332   1B65             ; END RELATIONAL
3333   1B65 C0 00 00      cmp b, 0
3334   1B68 C6 9A 1B      je _if49_else
3335   1B6B             _if49_true:
3336   1B6B             ;; *t++ = *prog++; 
3337   1B6B 2C FF FF      mov b, [bp + -1] ; $t             
3338   1B6E FD 79         mov g, b
3339   1B70 FD 77         inc b
3340   1B72 FA FF FF      lea d, [bp + -1] ; $t
3341   1B75 FD 43         mov [d], b
3342   1B77 FD 27         mov b, g
3343   1B79 D8            push b
3344   1B7A 29 8D 25      mov b, [_prog] ; $prog           
3345   1B7D FD 79         mov g, b
3346   1B7F FD 77         inc b
3347   1B81 3B 8D 25      mov d, _prog ; $prog
3348   1B84 FD 43         mov [d], b
3349   1B86 FD 27         mov b, g
3350   1B88 74            mov d, b
3351   1B89 32            mov bl, [d]
3352   1B8A A7 00         mov bh, 0
3353   1B8C E7            pop d
3354   1B8D FD 3E         mov [d], bl
3355   1B8F             ;; tok = LOGICAL_OR; 
3356   1B8F 3B 89 25      mov d, _tok ; $tok         
3357   1B92 26 0F 00      mov b, 15; LOGICAL_OR        
3358   1B95 FD 43         mov [d], b
3359   1B97 0A A2 1B      jmp _if49_exit
3360   1B9A             _if49_else:
3361   1B9A             ;; tok = BITWISE_OR; 
3362   1B9A 3B 89 25      mov d, _tok ; $tok         
3363   1B9D 26 18 00      mov b, 24; BITWISE_OR        
3364   1BA0 FD 43         mov [d], b
3365   1BA2             _if49_exit:
3366   1BA2             ;; toktype = DELIMITER;   
3367   1BA2 3B 8B 25      mov d, _toktype ; $toktype         
3368   1BA5 26 01 00      mov b, 1; DELIMITER        
3369   1BA8 FD 43         mov [d], b
3370   1BAA 0A FA 22      jmp _if48_exit
3371   1BAD             _if48_else:
3372   1BAD             ;; if(*prog == '~'){ 
3373   1BAD             _if50_cond:
3374   1BAD 29 8D 25      mov b, [_prog] ; $prog           
3375   1BB0 74            mov d, b
3376   1BB1 32            mov bl, [d]
3377   1BB2 A7 00         mov bh, 0
3378   1BB4             ; START RELATIONAL
3379   1BB4 D7            push a
3380   1BB5 11            mov a, b
3381   1BB6 26 7E 00      mov b, $7e
3382   1BB9 B0            cmp a, b
3383   1BBA FD 71         seq ; ==
3384   1BBC E4            pop a
3385   1BBD             ; END RELATIONAL
3386   1BBD C0 00 00      cmp b, 0
3387   1BC0 C6 FA 1B      je _if50_else
3388   1BC3             _if50_true:
3389   1BC3             ;; *t++ = *prog++; 
3390   1BC3 2C FF FF      mov b, [bp + -1] ; $t             
3391   1BC6 FD 79         mov g, b
3392   1BC8 FD 77         inc b
3393   1BCA FA FF FF      lea d, [bp + -1] ; $t
3394   1BCD FD 43         mov [d], b
3395   1BCF FD 27         mov b, g
3396   1BD1 D8            push b
3397   1BD2 29 8D 25      mov b, [_prog] ; $prog           
3398   1BD5 FD 79         mov g, b
3399   1BD7 FD 77         inc b
3400   1BD9 3B 8D 25      mov d, _prog ; $prog
3401   1BDC FD 43         mov [d], b
3402   1BDE FD 27         mov b, g
3403   1BE0 74            mov d, b
3404   1BE1 32            mov bl, [d]
3405   1BE2 A7 00         mov bh, 0
3406   1BE4 E7            pop d
3407   1BE5 FD 3E         mov [d], bl
3408   1BE7             ;; tok = BITWISE_NOT; 
3409   1BE7 3B 89 25      mov d, _tok ; $tok         
3410   1BEA 26 19 00      mov b, 25; BITWISE_NOT        
3411   1BED FD 43         mov [d], b
3412   1BEF             ;; toktype = DELIMITER;   
3413   1BEF 3B 8B 25      mov d, _toktype ; $toktype         
3414   1BF2 26 01 00      mov b, 1; DELIMITER        
3415   1BF5 FD 43         mov [d], b
3416   1BF7 0A FA 22      jmp _if50_exit
3417   1BFA             _if50_else:
3418   1BFA             ;; if(*prog == '<'){ 
3419   1BFA             _if51_cond:
3420   1BFA 29 8D 25      mov b, [_prog] ; $prog           
3421   1BFD 74            mov d, b
3422   1BFE 32            mov bl, [d]
3423   1BFF A7 00         mov bh, 0
3424   1C01             ; START RELATIONAL
3425   1C01 D7            push a
3426   1C02 11            mov a, b
3427   1C03 26 3C 00      mov b, $3c
3428   1C06 B0            cmp a, b
3429   1C07 FD 71         seq ; ==
3430   1C09 E4            pop a
3431   1C0A             ; END RELATIONAL
3432   1C0A C0 00 00      cmp b, 0
3433   1C0D C6 D1 1C      je _if51_else
3434   1C10             _if51_true:
3435   1C10             ;; *t++ = *prog++; 
3436   1C10 2C FF FF      mov b, [bp + -1] ; $t             
3437   1C13 FD 79         mov g, b
3438   1C15 FD 77         inc b
3439   1C17 FA FF FF      lea d, [bp + -1] ; $t
3440   1C1A FD 43         mov [d], b
3441   1C1C FD 27         mov b, g
3442   1C1E D8            push b
3443   1C1F 29 8D 25      mov b, [_prog] ; $prog           
3444   1C22 FD 79         mov g, b
3445   1C24 FD 77         inc b
3446   1C26 3B 8D 25      mov d, _prog ; $prog
3447   1C29 FD 43         mov [d], b
3448   1C2B FD 27         mov b, g
3449   1C2D 74            mov d, b
3450   1C2E 32            mov bl, [d]
3451   1C2F A7 00         mov bh, 0
3452   1C31 E7            pop d
3453   1C32 FD 3E         mov [d], bl
3454   1C34             ;; if (*prog == '='){ 
3455   1C34             _if52_cond:
3456   1C34 29 8D 25      mov b, [_prog] ; $prog           
3457   1C37 74            mov d, b
3458   1C38 32            mov bl, [d]
3459   1C39 A7 00         mov bh, 0
3460   1C3B             ; START RELATIONAL
3461   1C3B D7            push a
3462   1C3C 11            mov a, b
3463   1C3D 26 3D 00      mov b, $3d
3464   1C40 B0            cmp a, b
3465   1C41 FD 71         seq ; ==
3466   1C43 E4            pop a
3467   1C44             ; END RELATIONAL
3468   1C44 C0 00 00      cmp b, 0
3469   1C47 C6 79 1C      je _if52_else
3470   1C4A             _if52_true:
3471   1C4A             ;; *t++ = *prog++; 
3472   1C4A 2C FF FF      mov b, [bp + -1] ; $t             
3473   1C4D FD 79         mov g, b
3474   1C4F FD 77         inc b
3475   1C51 FA FF FF      lea d, [bp + -1] ; $t
3476   1C54 FD 43         mov [d], b
3477   1C56 FD 27         mov b, g
3478   1C58 D8            push b
3479   1C59 29 8D 25      mov b, [_prog] ; $prog           
3480   1C5C FD 79         mov g, b
3481   1C5E FD 77         inc b
3482   1C60 3B 8D 25      mov d, _prog ; $prog
3483   1C63 FD 43         mov [d], b
3484   1C65 FD 27         mov b, g
3485   1C67 74            mov d, b
3486   1C68 32            mov bl, [d]
3487   1C69 A7 00         mov bh, 0
3488   1C6B E7            pop d
3489   1C6C FD 3E         mov [d], bl
3490   1C6E             ;; tok = LESS_THAN_OR_EQUAL; 
3491   1C6E 3B 89 25      mov d, _tok ; $tok         
3492   1C71 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL        
3493   1C74 FD 43         mov [d], b
3494   1C76 0A C6 1C      jmp _if52_exit
3495   1C79             _if52_else:
3496   1C79             ;; if (*prog == '<'){ 
3497   1C79             _if53_cond:
3498   1C79 29 8D 25      mov b, [_prog] ; $prog           
3499   1C7C 74            mov d, b
3500   1C7D 32            mov bl, [d]
3501   1C7E A7 00         mov bh, 0
3502   1C80             ; START RELATIONAL
3503   1C80 D7            push a
3504   1C81 11            mov a, b
3505   1C82 26 3C 00      mov b, $3c
3506   1C85 B0            cmp a, b
3507   1C86 FD 71         seq ; ==
3508   1C88 E4            pop a
3509   1C89             ; END RELATIONAL
3510   1C89 C0 00 00      cmp b, 0
3511   1C8C C6 BE 1C      je _if53_else
3512   1C8F             _if53_true:
3513   1C8F             ;; *t++ = *prog++; 
3514   1C8F 2C FF FF      mov b, [bp + -1] ; $t             
3515   1C92 FD 79         mov g, b
3516   1C94 FD 77         inc b
3517   1C96 FA FF FF      lea d, [bp + -1] ; $t
3518   1C99 FD 43         mov [d], b
3519   1C9B FD 27         mov b, g
3520   1C9D D8            push b
3521   1C9E 29 8D 25      mov b, [_prog] ; $prog           
3522   1CA1 FD 79         mov g, b
3523   1CA3 FD 77         inc b
3524   1CA5 3B 8D 25      mov d, _prog ; $prog
3525   1CA8 FD 43         mov [d], b
3526   1CAA FD 27         mov b, g
3527   1CAC 74            mov d, b
3528   1CAD 32            mov bl, [d]
3529   1CAE A7 00         mov bh, 0
3530   1CB0 E7            pop d
3531   1CB1 FD 3E         mov [d], bl
3532   1CB3             ;; tok = BITWISE_SHL; 
3533   1CB3 3B 89 25      mov d, _tok ; $tok         
3534   1CB6 26 1A 00      mov b, 26; BITWISE_SHL        
3535   1CB9 FD 43         mov [d], b
3536   1CBB 0A C6 1C      jmp _if53_exit
3537   1CBE             _if53_else:
3538   1CBE             ;; tok = LESS_THAN; 
3539   1CBE 3B 89 25      mov d, _tok ; $tok         
3540   1CC1 26 0A 00      mov b, 10; LESS_THAN        
3541   1CC4 FD 43         mov [d], b
3542   1CC6             _if53_exit:
3543   1CC6             _if52_exit:
3544   1CC6             ;; toktype = DELIMITER;   
3545   1CC6 3B 8B 25      mov d, _toktype ; $toktype         
3546   1CC9 26 01 00      mov b, 1; DELIMITER        
3547   1CCC FD 43         mov [d], b
3548   1CCE 0A FA 22      jmp _if51_exit
3549   1CD1             _if51_else:
3550   1CD1             ;; if(*prog == '>'){ 
3551   1CD1             _if54_cond:
3552   1CD1 29 8D 25      mov b, [_prog] ; $prog           
3553   1CD4 74            mov d, b
3554   1CD5 32            mov bl, [d]
3555   1CD6 A7 00         mov bh, 0
3556   1CD8             ; START RELATIONAL
3557   1CD8 D7            push a
3558   1CD9 11            mov a, b
3559   1CDA 26 3E 00      mov b, $3e
3560   1CDD B0            cmp a, b
3561   1CDE FD 71         seq ; ==
3562   1CE0 E4            pop a
3563   1CE1             ; END RELATIONAL
3564   1CE1 C0 00 00      cmp b, 0
3565   1CE4 C6 A8 1D      je _if54_else
3566   1CE7             _if54_true:
3567   1CE7             ;; *t++ = *prog++; 
3568   1CE7 2C FF FF      mov b, [bp + -1] ; $t             
3569   1CEA FD 79         mov g, b
3570   1CEC FD 77         inc b
3571   1CEE FA FF FF      lea d, [bp + -1] ; $t
3572   1CF1 FD 43         mov [d], b
3573   1CF3 FD 27         mov b, g
3574   1CF5 D8            push b
3575   1CF6 29 8D 25      mov b, [_prog] ; $prog           
3576   1CF9 FD 79         mov g, b
3577   1CFB FD 77         inc b
3578   1CFD 3B 8D 25      mov d, _prog ; $prog
3579   1D00 FD 43         mov [d], b
3580   1D02 FD 27         mov b, g
3581   1D04 74            mov d, b
3582   1D05 32            mov bl, [d]
3583   1D06 A7 00         mov bh, 0
3584   1D08 E7            pop d
3585   1D09 FD 3E         mov [d], bl
3586   1D0B             ;; if (*prog == '='){ 
3587   1D0B             _if55_cond:
3588   1D0B 29 8D 25      mov b, [_prog] ; $prog           
3589   1D0E 74            mov d, b
3590   1D0F 32            mov bl, [d]
3591   1D10 A7 00         mov bh, 0
3592   1D12             ; START RELATIONAL
3593   1D12 D7            push a
3594   1D13 11            mov a, b
3595   1D14 26 3D 00      mov b, $3d
3596   1D17 B0            cmp a, b
3597   1D18 FD 71         seq ; ==
3598   1D1A E4            pop a
3599   1D1B             ; END RELATIONAL
3600   1D1B C0 00 00      cmp b, 0
3601   1D1E C6 50 1D      je _if55_else
3602   1D21             _if55_true:
3603   1D21             ;; *t++ = *prog++; 
3604   1D21 2C FF FF      mov b, [bp + -1] ; $t             
3605   1D24 FD 79         mov g, b
3606   1D26 FD 77         inc b
3607   1D28 FA FF FF      lea d, [bp + -1] ; $t
3608   1D2B FD 43         mov [d], b
3609   1D2D FD 27         mov b, g
3610   1D2F D8            push b
3611   1D30 29 8D 25      mov b, [_prog] ; $prog           
3612   1D33 FD 79         mov g, b
3613   1D35 FD 77         inc b
3614   1D37 3B 8D 25      mov d, _prog ; $prog
3615   1D3A FD 43         mov [d], b
3616   1D3C FD 27         mov b, g
3617   1D3E 74            mov d, b
3618   1D3F 32            mov bl, [d]
3619   1D40 A7 00         mov bh, 0
3620   1D42 E7            pop d
3621   1D43 FD 3E         mov [d], bl
3622   1D45             ;; tok = GREATER_THAN_OR_EQUAL; 
3623   1D45 3B 89 25      mov d, _tok ; $tok         
3624   1D48 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL        
3625   1D4B FD 43         mov [d], b
3626   1D4D 0A 9D 1D      jmp _if55_exit
3627   1D50             _if55_else:
3628   1D50             ;; if (*prog == '>'){ 
3629   1D50             _if56_cond:
3630   1D50 29 8D 25      mov b, [_prog] ; $prog           
3631   1D53 74            mov d, b
3632   1D54 32            mov bl, [d]
3633   1D55 A7 00         mov bh, 0
3634   1D57             ; START RELATIONAL
3635   1D57 D7            push a
3636   1D58 11            mov a, b
3637   1D59 26 3E 00      mov b, $3e
3638   1D5C B0            cmp a, b
3639   1D5D FD 71         seq ; ==
3640   1D5F E4            pop a
3641   1D60             ; END RELATIONAL
3642   1D60 C0 00 00      cmp b, 0
3643   1D63 C6 95 1D      je _if56_else
3644   1D66             _if56_true:
3645   1D66             ;; *t++ = *prog++; 
3646   1D66 2C FF FF      mov b, [bp + -1] ; $t             
3647   1D69 FD 79         mov g, b
3648   1D6B FD 77         inc b
3649   1D6D FA FF FF      lea d, [bp + -1] ; $t
3650   1D70 FD 43         mov [d], b
3651   1D72 FD 27         mov b, g
3652   1D74 D8            push b
3653   1D75 29 8D 25      mov b, [_prog] ; $prog           
3654   1D78 FD 79         mov g, b
3655   1D7A FD 77         inc b
3656   1D7C 3B 8D 25      mov d, _prog ; $prog
3657   1D7F FD 43         mov [d], b
3658   1D81 FD 27         mov b, g
3659   1D83 74            mov d, b
3660   1D84 32            mov bl, [d]
3661   1D85 A7 00         mov bh, 0
3662   1D87 E7            pop d
3663   1D88 FD 3E         mov [d], bl
3664   1D8A             ;; tok = BITWISE_SHR; 
3665   1D8A 3B 89 25      mov d, _tok ; $tok         
3666   1D8D 26 1B 00      mov b, 27; BITWISE_SHR        
3667   1D90 FD 43         mov [d], b
3668   1D92 0A 9D 1D      jmp _if56_exit
3669   1D95             _if56_else:
3670   1D95             ;; tok = GREATER_THAN; 
3671   1D95 3B 89 25      mov d, _tok ; $tok         
3672   1D98 26 0C 00      mov b, 12; GREATER_THAN        
3673   1D9B FD 43         mov [d], b
3674   1D9D             _if56_exit:
3675   1D9D             _if55_exit:
3676   1D9D             ;; toktype = DELIMITER;   
3677   1D9D 3B 8B 25      mov d, _toktype ; $toktype         
3678   1DA0 26 01 00      mov b, 1; DELIMITER        
3679   1DA3 FD 43         mov [d], b
3680   1DA5 0A FA 22      jmp _if54_exit
3681   1DA8             _if54_else:
3682   1DA8             ;; if(*prog == '!'){ 
3683   1DA8             _if57_cond:
3684   1DA8 29 8D 25      mov b, [_prog] ; $prog           
3685   1DAB 74            mov d, b
3686   1DAC 32            mov bl, [d]
3687   1DAD A7 00         mov bh, 0
3688   1DAF             ; START RELATIONAL
3689   1DAF D7            push a
3690   1DB0 11            mov a, b
3691   1DB1 26 21 00      mov b, $21
3692   1DB4 B0            cmp a, b
3693   1DB5 FD 71         seq ; ==
3694   1DB7 E4            pop a
3695   1DB8             ; END RELATIONAL
3696   1DB8 C0 00 00      cmp b, 0
3697   1DBB C6 3A 1E      je _if57_else
3698   1DBE             _if57_true:
3699   1DBE             ;; *t++ = *prog++; 
3700   1DBE 2C FF FF      mov b, [bp + -1] ; $t             
3701   1DC1 FD 79         mov g, b
3702   1DC3 FD 77         inc b
3703   1DC5 FA FF FF      lea d, [bp + -1] ; $t
3704   1DC8 FD 43         mov [d], b
3705   1DCA FD 27         mov b, g
3706   1DCC D8            push b
3707   1DCD 29 8D 25      mov b, [_prog] ; $prog           
3708   1DD0 FD 79         mov g, b
3709   1DD2 FD 77         inc b
3710   1DD4 3B 8D 25      mov d, _prog ; $prog
3711   1DD7 FD 43         mov [d], b
3712   1DD9 FD 27         mov b, g
3713   1DDB 74            mov d, b
3714   1DDC 32            mov bl, [d]
3715   1DDD A7 00         mov bh, 0
3716   1DDF E7            pop d
3717   1DE0 FD 3E         mov [d], bl
3718   1DE2             ;; if(*prog == '='){ 
3719   1DE2             _if58_cond:
3720   1DE2 29 8D 25      mov b, [_prog] ; $prog           
3721   1DE5 74            mov d, b
3722   1DE6 32            mov bl, [d]
3723   1DE7 A7 00         mov bh, 0
3724   1DE9             ; START RELATIONAL
3725   1DE9 D7            push a
3726   1DEA 11            mov a, b
3727   1DEB 26 3D 00      mov b, $3d
3728   1DEE B0            cmp a, b
3729   1DEF FD 71         seq ; ==
3730   1DF1 E4            pop a
3731   1DF2             ; END RELATIONAL
3732   1DF2 C0 00 00      cmp b, 0
3733   1DF5 C6 27 1E      je _if58_else
3734   1DF8             _if58_true:
3735   1DF8             ;; *t++ = *prog++; 
3736   1DF8 2C FF FF      mov b, [bp + -1] ; $t             
3737   1DFB FD 79         mov g, b
3738   1DFD FD 77         inc b
3739   1DFF FA FF FF      lea d, [bp + -1] ; $t
3740   1E02 FD 43         mov [d], b
3741   1E04 FD 27         mov b, g
3742   1E06 D8            push b
3743   1E07 29 8D 25      mov b, [_prog] ; $prog           
3744   1E0A FD 79         mov g, b
3745   1E0C FD 77         inc b
3746   1E0E 3B 8D 25      mov d, _prog ; $prog
3747   1E11 FD 43         mov [d], b
3748   1E13 FD 27         mov b, g
3749   1E15 74            mov d, b
3750   1E16 32            mov bl, [d]
3751   1E17 A7 00         mov bh, 0
3752   1E19 E7            pop d
3753   1E1A FD 3E         mov [d], bl
3754   1E1C             ;; tok = NOT_EQUAL; 
3755   1E1C 3B 89 25      mov d, _tok ; $tok         
3756   1E1F 26 09 00      mov b, 9; NOT_EQUAL        
3757   1E22 FD 43         mov [d], b
3758   1E24 0A 2F 1E      jmp _if58_exit
3759   1E27             _if58_else:
3760   1E27             ;; tok = LOGICAL_NOT; 
3761   1E27 3B 89 25      mov d, _tok ; $tok         
3762   1E2A 26 10 00      mov b, 16; LOGICAL_NOT        
3763   1E2D FD 43         mov [d], b
3764   1E2F             _if58_exit:
3765   1E2F             ;; toktype = DELIMITER;   
3766   1E2F 3B 8B 25      mov d, _toktype ; $toktype         
3767   1E32 26 01 00      mov b, 1; DELIMITER        
3768   1E35 FD 43         mov [d], b
3769   1E37 0A FA 22      jmp _if57_exit
3770   1E3A             _if57_else:
3771   1E3A             ;; if(*prog == '+'){ 
3772   1E3A             _if59_cond:
3773   1E3A 29 8D 25      mov b, [_prog] ; $prog           
3774   1E3D 74            mov d, b
3775   1E3E 32            mov bl, [d]
3776   1E3F A7 00         mov bh, 0
3777   1E41             ; START RELATIONAL
3778   1E41 D7            push a
3779   1E42 11            mov a, b
3780   1E43 26 2B 00      mov b, $2b
3781   1E46 B0            cmp a, b
3782   1E47 FD 71         seq ; ==
3783   1E49 E4            pop a
3784   1E4A             ; END RELATIONAL
3785   1E4A C0 00 00      cmp b, 0
3786   1E4D C6 CC 1E      je _if59_else
3787   1E50             _if59_true:
3788   1E50             ;; *t++ = *prog++; 
3789   1E50 2C FF FF      mov b, [bp + -1] ; $t             
3790   1E53 FD 79         mov g, b
3791   1E55 FD 77         inc b
3792   1E57 FA FF FF      lea d, [bp + -1] ; $t
3793   1E5A FD 43         mov [d], b
3794   1E5C FD 27         mov b, g
3795   1E5E D8            push b
3796   1E5F 29 8D 25      mov b, [_prog] ; $prog           
3797   1E62 FD 79         mov g, b
3798   1E64 FD 77         inc b
3799   1E66 3B 8D 25      mov d, _prog ; $prog
3800   1E69 FD 43         mov [d], b
3801   1E6B FD 27         mov b, g
3802   1E6D 74            mov d, b
3803   1E6E 32            mov bl, [d]
3804   1E6F A7 00         mov bh, 0
3805   1E71 E7            pop d
3806   1E72 FD 3E         mov [d], bl
3807   1E74             ;; if(*prog == '+'){ 
3808   1E74             _if60_cond:
3809   1E74 29 8D 25      mov b, [_prog] ; $prog           
3810   1E77 74            mov d, b
3811   1E78 32            mov bl, [d]
3812   1E79 A7 00         mov bh, 0
3813   1E7B             ; START RELATIONAL
3814   1E7B D7            push a
3815   1E7C 11            mov a, b
3816   1E7D 26 2B 00      mov b, $2b
3817   1E80 B0            cmp a, b
3818   1E81 FD 71         seq ; ==
3819   1E83 E4            pop a
3820   1E84             ; END RELATIONAL
3821   1E84 C0 00 00      cmp b, 0
3822   1E87 C6 B9 1E      je _if60_else
3823   1E8A             _if60_true:
3824   1E8A             ;; *t++ = *prog++; 
3825   1E8A 2C FF FF      mov b, [bp + -1] ; $t             
3826   1E8D FD 79         mov g, b
3827   1E8F FD 77         inc b
3828   1E91 FA FF FF      lea d, [bp + -1] ; $t
3829   1E94 FD 43         mov [d], b
3830   1E96 FD 27         mov b, g
3831   1E98 D8            push b
3832   1E99 29 8D 25      mov b, [_prog] ; $prog           
3833   1E9C FD 79         mov g, b
3834   1E9E FD 77         inc b
3835   1EA0 3B 8D 25      mov d, _prog ; $prog
3836   1EA3 FD 43         mov [d], b
3837   1EA5 FD 27         mov b, g
3838   1EA7 74            mov d, b
3839   1EA8 32            mov bl, [d]
3840   1EA9 A7 00         mov bh, 0
3841   1EAB E7            pop d
3842   1EAC FD 3E         mov [d], bl
3843   1EAE             ;; tok = INCREMENT; 
3844   1EAE 3B 89 25      mov d, _tok ; $tok         
3845   1EB1 26 05 00      mov b, 5; INCREMENT        
3846   1EB4 FD 43         mov [d], b
3847   1EB6 0A C1 1E      jmp _if60_exit
3848   1EB9             _if60_else:
3849   1EB9             ;; tok = PLUS; 
3850   1EB9 3B 89 25      mov d, _tok ; $tok         
3851   1EBC 26 01 00      mov b, 1; PLUS        
3852   1EBF FD 43         mov [d], b
3853   1EC1             _if60_exit:
3854   1EC1             ;; toktype = DELIMITER;   
3855   1EC1 3B 8B 25      mov d, _toktype ; $toktype         
3856   1EC4 26 01 00      mov b, 1; DELIMITER        
3857   1EC7 FD 43         mov [d], b
3858   1EC9 0A FA 22      jmp _if59_exit
3859   1ECC             _if59_else:
3860   1ECC             ;; if(*prog == '-'){ 
3861   1ECC             _if61_cond:
3862   1ECC 29 8D 25      mov b, [_prog] ; $prog           
3863   1ECF 74            mov d, b
3864   1ED0 32            mov bl, [d]
3865   1ED1 A7 00         mov bh, 0
3866   1ED3             ; START RELATIONAL
3867   1ED3 D7            push a
3868   1ED4 11            mov a, b
3869   1ED5 26 2D 00      mov b, $2d
3870   1ED8 B0            cmp a, b
3871   1ED9 FD 71         seq ; ==
3872   1EDB E4            pop a
3873   1EDC             ; END RELATIONAL
3874   1EDC C0 00 00      cmp b, 0
3875   1EDF C6 5E 1F      je _if61_else
3876   1EE2             _if61_true:
3877   1EE2             ;; *t++ = *prog++; 
3878   1EE2 2C FF FF      mov b, [bp + -1] ; $t             
3879   1EE5 FD 79         mov g, b
3880   1EE7 FD 77         inc b
3881   1EE9 FA FF FF      lea d, [bp + -1] ; $t
3882   1EEC FD 43         mov [d], b
3883   1EEE FD 27         mov b, g
3884   1EF0 D8            push b
3885   1EF1 29 8D 25      mov b, [_prog] ; $prog           
3886   1EF4 FD 79         mov g, b
3887   1EF6 FD 77         inc b
3888   1EF8 3B 8D 25      mov d, _prog ; $prog
3889   1EFB FD 43         mov [d], b
3890   1EFD FD 27         mov b, g
3891   1EFF 74            mov d, b
3892   1F00 32            mov bl, [d]
3893   1F01 A7 00         mov bh, 0
3894   1F03 E7            pop d
3895   1F04 FD 3E         mov [d], bl
3896   1F06             ;; if(*prog == '-'){ 
3897   1F06             _if62_cond:
3898   1F06 29 8D 25      mov b, [_prog] ; $prog           
3899   1F09 74            mov d, b
3900   1F0A 32            mov bl, [d]
3901   1F0B A7 00         mov bh, 0
3902   1F0D             ; START RELATIONAL
3903   1F0D D7            push a
3904   1F0E 11            mov a, b
3905   1F0F 26 2D 00      mov b, $2d
3906   1F12 B0            cmp a, b
3907   1F13 FD 71         seq ; ==
3908   1F15 E4            pop a
3909   1F16             ; END RELATIONAL
3910   1F16 C0 00 00      cmp b, 0
3911   1F19 C6 4B 1F      je _if62_else
3912   1F1C             _if62_true:
3913   1F1C             ;; *t++ = *prog++; 
3914   1F1C 2C FF FF      mov b, [bp + -1] ; $t             
3915   1F1F FD 79         mov g, b
3916   1F21 FD 77         inc b
3917   1F23 FA FF FF      lea d, [bp + -1] ; $t
3918   1F26 FD 43         mov [d], b
3919   1F28 FD 27         mov b, g
3920   1F2A D8            push b
3921   1F2B 29 8D 25      mov b, [_prog] ; $prog           
3922   1F2E FD 79         mov g, b
3923   1F30 FD 77         inc b
3924   1F32 3B 8D 25      mov d, _prog ; $prog
3925   1F35 FD 43         mov [d], b
3926   1F37 FD 27         mov b, g
3927   1F39 74            mov d, b
3928   1F3A 32            mov bl, [d]
3929   1F3B A7 00         mov bh, 0
3930   1F3D E7            pop d
3931   1F3E FD 3E         mov [d], bl
3932   1F40             ;; tok = DECREMENT; 
3933   1F40 3B 89 25      mov d, _tok ; $tok         
3934   1F43 26 06 00      mov b, 6; DECREMENT        
3935   1F46 FD 43         mov [d], b
3936   1F48 0A 53 1F      jmp _if62_exit
3937   1F4B             _if62_else:
3938   1F4B             ;; tok = MINUS; 
3939   1F4B 3B 89 25      mov d, _tok ; $tok         
3940   1F4E 26 02 00      mov b, 2; MINUS        
3941   1F51 FD 43         mov [d], b
3942   1F53             _if62_exit:
3943   1F53             ;; toktype = DELIMITER;   
3944   1F53 3B 8B 25      mov d, _toktype ; $toktype         
3945   1F56 26 01 00      mov b, 1; DELIMITER        
3946   1F59 FD 43         mov [d], b
3947   1F5B 0A FA 22      jmp _if61_exit
3948   1F5E             _if61_else:
3949   1F5E             ;; if(*prog == '$'){ 
3950   1F5E             _if63_cond:
3951   1F5E 29 8D 25      mov b, [_prog] ; $prog           
3952   1F61 74            mov d, b
3953   1F62 32            mov bl, [d]
3954   1F63 A7 00         mov bh, 0
3955   1F65             ; START RELATIONAL
3956   1F65 D7            push a
3957   1F66 11            mov a, b
3958   1F67 26 24 00      mov b, $24
3959   1F6A B0            cmp a, b
3960   1F6B FD 71         seq ; ==
3961   1F6D E4            pop a
3962   1F6E             ; END RELATIONAL
3963   1F6E C0 00 00      cmp b, 0
3964   1F71 C6 AB 1F      je _if63_else
3965   1F74             _if63_true:
3966   1F74             ;; *t++ = *prog++; 
3967   1F74 2C FF FF      mov b, [bp + -1] ; $t             
3968   1F77 FD 79         mov g, b
3969   1F79 FD 77         inc b
3970   1F7B FA FF FF      lea d, [bp + -1] ; $t
3971   1F7E FD 43         mov [d], b
3972   1F80 FD 27         mov b, g
3973   1F82 D8            push b
3974   1F83 29 8D 25      mov b, [_prog] ; $prog           
3975   1F86 FD 79         mov g, b
3976   1F88 FD 77         inc b
3977   1F8A 3B 8D 25      mov d, _prog ; $prog
3978   1F8D FD 43         mov [d], b
3979   1F8F FD 27         mov b, g
3980   1F91 74            mov d, b
3981   1F92 32            mov bl, [d]
3982   1F93 A7 00         mov bh, 0
3983   1F95 E7            pop d
3984   1F96 FD 3E         mov [d], bl
3985   1F98             ;; tok = DOLLAR; 
3986   1F98 3B 89 25      mov d, _tok ; $tok         
3987   1F9B 26 12 00      mov b, 18; DOLLAR        
3988   1F9E FD 43         mov [d], b
3989   1FA0             ;; toktype = DELIMITER;   
3990   1FA0 3B 8B 25      mov d, _toktype ; $toktype         
3991   1FA3 26 01 00      mov b, 1; DELIMITER        
3992   1FA6 FD 43         mov [d], b
3993   1FA8 0A FA 22      jmp _if63_exit
3994   1FAB             _if63_else:
3995   1FAB             ;; if(*prog == '^'){ 
3996   1FAB             _if64_cond:
3997   1FAB 29 8D 25      mov b, [_prog] ; $prog           
3998   1FAE 74            mov d, b
3999   1FAF 32            mov bl, [d]
4000   1FB0 A7 00         mov bh, 0
4001   1FB2             ; START RELATIONAL
4002   1FB2 D7            push a
4003   1FB3 11            mov a, b
4004   1FB4 26 5E 00      mov b, $5e
4005   1FB7 B0            cmp a, b
4006   1FB8 FD 71         seq ; ==
4007   1FBA E4            pop a
4008   1FBB             ; END RELATIONAL
4009   1FBB C0 00 00      cmp b, 0
4010   1FBE C6 F8 1F      je _if64_else
4011   1FC1             _if64_true:
4012   1FC1             ;; *t++ = *prog++; 
4013   1FC1 2C FF FF      mov b, [bp + -1] ; $t             
4014   1FC4 FD 79         mov g, b
4015   1FC6 FD 77         inc b
4016   1FC8 FA FF FF      lea d, [bp + -1] ; $t
4017   1FCB FD 43         mov [d], b
4018   1FCD FD 27         mov b, g
4019   1FCF D8            push b
4020   1FD0 29 8D 25      mov b, [_prog] ; $prog           
4021   1FD3 FD 79         mov g, b
4022   1FD5 FD 77         inc b
4023   1FD7 3B 8D 25      mov d, _prog ; $prog
4024   1FDA FD 43         mov [d], b
4025   1FDC FD 27         mov b, g
4026   1FDE 74            mov d, b
4027   1FDF 32            mov bl, [d]
4028   1FE0 A7 00         mov bh, 0
4029   1FE2 E7            pop d
4030   1FE3 FD 3E         mov [d], bl
4031   1FE5             ;; tok = BITWISE_XOR; 
4032   1FE5 3B 89 25      mov d, _tok ; $tok         
4033   1FE8 26 17 00      mov b, 23; BITWISE_XOR        
4034   1FEB FD 43         mov [d], b
4035   1FED             ;; toktype = DELIMITER;   
4036   1FED 3B 8B 25      mov d, _toktype ; $toktype         
4037   1FF0 26 01 00      mov b, 1; DELIMITER        
4038   1FF3 FD 43         mov [d], b
4039   1FF5 0A FA 22      jmp _if64_exit
4040   1FF8             _if64_else:
4041   1FF8             ;; if(*prog == '@'){ 
4042   1FF8             _if65_cond:
4043   1FF8 29 8D 25      mov b, [_prog] ; $prog           
4044   1FFB 74            mov d, b
4045   1FFC 32            mov bl, [d]
4046   1FFD A7 00         mov bh, 0
4047   1FFF             ; START RELATIONAL
4048   1FFF D7            push a
4049   2000 11            mov a, b
4050   2001 26 40 00      mov b, $40
4051   2004 B0            cmp a, b
4052   2005 FD 71         seq ; ==
4053   2007 E4            pop a
4054   2008             ; END RELATIONAL
4055   2008 C0 00 00      cmp b, 0
4056   200B C6 45 20      je _if65_else
4057   200E             _if65_true:
4058   200E             ;; *t++ = *prog++; 
4059   200E 2C FF FF      mov b, [bp + -1] ; $t             
4060   2011 FD 79         mov g, b
4061   2013 FD 77         inc b
4062   2015 FA FF FF      lea d, [bp + -1] ; $t
4063   2018 FD 43         mov [d], b
4064   201A FD 27         mov b, g
4065   201C D8            push b
4066   201D 29 8D 25      mov b, [_prog] ; $prog           
4067   2020 FD 79         mov g, b
4068   2022 FD 77         inc b
4069   2024 3B 8D 25      mov d, _prog ; $prog
4070   2027 FD 43         mov [d], b
4071   2029 FD 27         mov b, g
4072   202B 74            mov d, b
4073   202C 32            mov bl, [d]
4074   202D A7 00         mov bh, 0
4075   202F E7            pop d
4076   2030 FD 3E         mov [d], bl
4077   2032             ;; tok = AT; 
4078   2032 3B 89 25      mov d, _tok ; $tok         
4079   2035 26 14 00      mov b, 20; AT        
4080   2038 FD 43         mov [d], b
4081   203A             ;; toktype = DELIMITER;   
4082   203A 3B 8B 25      mov d, _toktype ; $toktype         
4083   203D 26 01 00      mov b, 1; DELIMITER        
4084   2040 FD 43         mov [d], b
4085   2042 0A FA 22      jmp _if65_exit
4086   2045             _if65_else:
4087   2045             ;; if(*prog == '*'){ 
4088   2045             _if66_cond:
4089   2045 29 8D 25      mov b, [_prog] ; $prog           
4090   2048 74            mov d, b
4091   2049 32            mov bl, [d]
4092   204A A7 00         mov bh, 0
4093   204C             ; START RELATIONAL
4094   204C D7            push a
4095   204D 11            mov a, b
4096   204E 26 2A 00      mov b, $2a
4097   2051 B0            cmp a, b
4098   2052 FD 71         seq ; ==
4099   2054 E4            pop a
4100   2055             ; END RELATIONAL
4101   2055 C0 00 00      cmp b, 0
4102   2058 C6 92 20      je _if66_else
4103   205B             _if66_true:
4104   205B             ;; *t++ = *prog++; 
4105   205B 2C FF FF      mov b, [bp + -1] ; $t             
4106   205E FD 79         mov g, b
4107   2060 FD 77         inc b
4108   2062 FA FF FF      lea d, [bp + -1] ; $t
4109   2065 FD 43         mov [d], b
4110   2067 FD 27         mov b, g
4111   2069 D8            push b
4112   206A 29 8D 25      mov b, [_prog] ; $prog           
4113   206D FD 79         mov g, b
4114   206F FD 77         inc b
4115   2071 3B 8D 25      mov d, _prog ; $prog
4116   2074 FD 43         mov [d], b
4117   2076 FD 27         mov b, g
4118   2078 74            mov d, b
4119   2079 32            mov bl, [d]
4120   207A A7 00         mov bh, 0
4121   207C E7            pop d
4122   207D FD 3E         mov [d], bl
4123   207F             ;; tok = STAR; 
4124   207F 3B 89 25      mov d, _tok ; $tok         
4125   2082 26 03 00      mov b, 3; STAR        
4126   2085 FD 43         mov [d], b
4127   2087             ;; toktype = DELIMITER;   
4128   2087 3B 8B 25      mov d, _toktype ; $toktype         
4129   208A 26 01 00      mov b, 1; DELIMITER        
4130   208D FD 43         mov [d], b
4131   208F 0A FA 22      jmp _if66_exit
4132   2092             _if66_else:
4133   2092             ;; if(*prog == '/'){ 
4134   2092             _if67_cond:
4135   2092 29 8D 25      mov b, [_prog] ; $prog           
4136   2095 74            mov d, b
4137   2096 32            mov bl, [d]
4138   2097 A7 00         mov bh, 0
4139   2099             ; START RELATIONAL
4140   2099 D7            push a
4141   209A 11            mov a, b
4142   209B 26 2F 00      mov b, $2f
4143   209E B0            cmp a, b
4144   209F FD 71         seq ; ==
4145   20A1 E4            pop a
4146   20A2             ; END RELATIONAL
4147   20A2 C0 00 00      cmp b, 0
4148   20A5 C6 DF 20      je _if67_else
4149   20A8             _if67_true:
4150   20A8             ;; *t++ = *prog++; 
4151   20A8 2C FF FF      mov b, [bp + -1] ; $t             
4152   20AB FD 79         mov g, b
4153   20AD FD 77         inc b
4154   20AF FA FF FF      lea d, [bp + -1] ; $t
4155   20B2 FD 43         mov [d], b
4156   20B4 FD 27         mov b, g
4157   20B6 D8            push b
4158   20B7 29 8D 25      mov b, [_prog] ; $prog           
4159   20BA FD 79         mov g, b
4160   20BC FD 77         inc b
4161   20BE 3B 8D 25      mov d, _prog ; $prog
4162   20C1 FD 43         mov [d], b
4163   20C3 FD 27         mov b, g
4164   20C5 74            mov d, b
4165   20C6 32            mov bl, [d]
4166   20C7 A7 00         mov bh, 0
4167   20C9 E7            pop d
4168   20CA FD 3E         mov [d], bl
4169   20CC             ;; tok = FSLASH; 
4170   20CC 3B 89 25      mov d, _tok ; $tok         
4171   20CF 26 04 00      mov b, 4; FSLASH        
4172   20D2 FD 43         mov [d], b
4173   20D4             ;; toktype = DELIMITER;   
4174   20D4 3B 8B 25      mov d, _toktype ; $toktype         
4175   20D7 26 01 00      mov b, 1; DELIMITER        
4176   20DA FD 43         mov [d], b
4177   20DC 0A FA 22      jmp _if67_exit
4178   20DF             _if67_else:
4179   20DF             ;; if(*prog == '%'){ 
4180   20DF             _if68_cond:
4181   20DF 29 8D 25      mov b, [_prog] ; $prog           
4182   20E2 74            mov d, b
4183   20E3 32            mov bl, [d]
4184   20E4 A7 00         mov bh, 0
4185   20E6             ; START RELATIONAL
4186   20E6 D7            push a
4187   20E7 11            mov a, b
4188   20E8 26 25 00      mov b, $25
4189   20EB B0            cmp a, b
4190   20EC FD 71         seq ; ==
4191   20EE E4            pop a
4192   20EF             ; END RELATIONAL
4193   20EF C0 00 00      cmp b, 0
4194   20F2 C6 2C 21      je _if68_else
4195   20F5             _if68_true:
4196   20F5             ;; *t++ = *prog++; 
4197   20F5 2C FF FF      mov b, [bp + -1] ; $t             
4198   20F8 FD 79         mov g, b
4199   20FA FD 77         inc b
4200   20FC FA FF FF      lea d, [bp + -1] ; $t
4201   20FF FD 43         mov [d], b
4202   2101 FD 27         mov b, g
4203   2103 D8            push b
4204   2104 29 8D 25      mov b, [_prog] ; $prog           
4205   2107 FD 79         mov g, b
4206   2109 FD 77         inc b
4207   210B 3B 8D 25      mov d, _prog ; $prog
4208   210E FD 43         mov [d], b
4209   2110 FD 27         mov b, g
4210   2112 74            mov d, b
4211   2113 32            mov bl, [d]
4212   2114 A7 00         mov bh, 0
4213   2116 E7            pop d
4214   2117 FD 3E         mov [d], bl
4215   2119             ;; tok = MOD; 
4216   2119 3B 89 25      mov d, _tok ; $tok         
4217   211C 26 07 00      mov b, 7; MOD        
4218   211F FD 43         mov [d], b
4219   2121             ;; toktype = DELIMITER;   
4220   2121 3B 8B 25      mov d, _toktype ; $toktype         
4221   2124 26 01 00      mov b, 1; DELIMITER        
4222   2127 FD 43         mov [d], b
4223   2129 0A FA 22      jmp _if68_exit
4224   212C             _if68_else:
4225   212C             ;; if(*prog == '('){ 
4226   212C             _if69_cond:
4227   212C 29 8D 25      mov b, [_prog] ; $prog           
4228   212F 74            mov d, b
4229   2130 32            mov bl, [d]
4230   2131 A7 00         mov bh, 0
4231   2133             ; START RELATIONAL
4232   2133 D7            push a
4233   2134 11            mov a, b
4234   2135 26 28 00      mov b, $28
4235   2138 B0            cmp a, b
4236   2139 FD 71         seq ; ==
4237   213B E4            pop a
4238   213C             ; END RELATIONAL
4239   213C C0 00 00      cmp b, 0
4240   213F C6 79 21      je _if69_else
4241   2142             _if69_true:
4242   2142             ;; *t++ = *prog++; 
4243   2142 2C FF FF      mov b, [bp + -1] ; $t             
4244   2145 FD 79         mov g, b
4245   2147 FD 77         inc b
4246   2149 FA FF FF      lea d, [bp + -1] ; $t
4247   214C FD 43         mov [d], b
4248   214E FD 27         mov b, g
4249   2150 D8            push b
4250   2151 29 8D 25      mov b, [_prog] ; $prog           
4251   2154 FD 79         mov g, b
4252   2156 FD 77         inc b
4253   2158 3B 8D 25      mov d, _prog ; $prog
4254   215B FD 43         mov [d], b
4255   215D FD 27         mov b, g
4256   215F 74            mov d, b
4257   2160 32            mov bl, [d]
4258   2161 A7 00         mov bh, 0
4259   2163 E7            pop d
4260   2164 FD 3E         mov [d], bl
4261   2166             ;; tok = OPENING_PAREN; 
4262   2166 3B 89 25      mov d, _tok ; $tok         
4263   2169 26 1C 00      mov b, 28; OPENING_PAREN        
4264   216C FD 43         mov [d], b
4265   216E             ;; toktype = DELIMITER;   
4266   216E 3B 8B 25      mov d, _toktype ; $toktype         
4267   2171 26 01 00      mov b, 1; DELIMITER        
4268   2174 FD 43         mov [d], b
4269   2176 0A FA 22      jmp _if69_exit
4270   2179             _if69_else:
4271   2179             ;; if(*prog == ')'){ 
4272   2179             _if70_cond:
4273   2179 29 8D 25      mov b, [_prog] ; $prog           
4274   217C 74            mov d, b
4275   217D 32            mov bl, [d]
4276   217E A7 00         mov bh, 0
4277   2180             ; START RELATIONAL
4278   2180 D7            push a
4279   2181 11            mov a, b
4280   2182 26 29 00      mov b, $29
4281   2185 B0            cmp a, b
4282   2186 FD 71         seq ; ==
4283   2188 E4            pop a
4284   2189             ; END RELATIONAL
4285   2189 C0 00 00      cmp b, 0
4286   218C C6 C6 21      je _if70_else
4287   218F             _if70_true:
4288   218F             ;; *t++ = *prog++; 
4289   218F 2C FF FF      mov b, [bp + -1] ; $t             
4290   2192 FD 79         mov g, b
4291   2194 FD 77         inc b
4292   2196 FA FF FF      lea d, [bp + -1] ; $t
4293   2199 FD 43         mov [d], b
4294   219B FD 27         mov b, g
4295   219D D8            push b
4296   219E 29 8D 25      mov b, [_prog] ; $prog           
4297   21A1 FD 79         mov g, b
4298   21A3 FD 77         inc b
4299   21A5 3B 8D 25      mov d, _prog ; $prog
4300   21A8 FD 43         mov [d], b
4301   21AA FD 27         mov b, g
4302   21AC 74            mov d, b
4303   21AD 32            mov bl, [d]
4304   21AE A7 00         mov bh, 0
4305   21B0 E7            pop d
4306   21B1 FD 3E         mov [d], bl
4307   21B3             ;; tok = CLOSING_PAREN; 
4308   21B3 3B 89 25      mov d, _tok ; $tok         
4309   21B6 26 1D 00      mov b, 29; CLOSING_PAREN        
4310   21B9 FD 43         mov [d], b
4311   21BB             ;; toktype = DELIMITER;   
4312   21BB 3B 8B 25      mov d, _toktype ; $toktype         
4313   21BE 26 01 00      mov b, 1; DELIMITER        
4314   21C1 FD 43         mov [d], b
4315   21C3 0A FA 22      jmp _if70_exit
4316   21C6             _if70_else:
4317   21C6             ;; if(*prog == ';'){ 
4318   21C6             _if71_cond:
4319   21C6 29 8D 25      mov b, [_prog] ; $prog           
4320   21C9 74            mov d, b
4321   21CA 32            mov bl, [d]
4322   21CB A7 00         mov bh, 0
4323   21CD             ; START RELATIONAL
4324   21CD D7            push a
4325   21CE 11            mov a, b
4326   21CF 26 3B 00      mov b, $3b
4327   21D2 B0            cmp a, b
4328   21D3 FD 71         seq ; ==
4329   21D5 E4            pop a
4330   21D6             ; END RELATIONAL
4331   21D6 C0 00 00      cmp b, 0
4332   21D9 C6 13 22      je _if71_else
4333   21DC             _if71_true:
4334   21DC             ;; *t++ = *prog++; 
4335   21DC 2C FF FF      mov b, [bp + -1] ; $t             
4336   21DF FD 79         mov g, b
4337   21E1 FD 77         inc b
4338   21E3 FA FF FF      lea d, [bp + -1] ; $t
4339   21E6 FD 43         mov [d], b
4340   21E8 FD 27         mov b, g
4341   21EA D8            push b
4342   21EB 29 8D 25      mov b, [_prog] ; $prog           
4343   21EE FD 79         mov g, b
4344   21F0 FD 77         inc b
4345   21F2 3B 8D 25      mov d, _prog ; $prog
4346   21F5 FD 43         mov [d], b
4347   21F7 FD 27         mov b, g
4348   21F9 74            mov d, b
4349   21FA 32            mov bl, [d]
4350   21FB A7 00         mov bh, 0
4351   21FD E7            pop d
4352   21FE FD 3E         mov [d], bl
4353   2200             ;; tok = SEMICOLON; 
4354   2200 3B 89 25      mov d, _tok ; $tok         
4355   2203 26 23 00      mov b, 35; SEMICOLON        
4356   2206 FD 43         mov [d], b
4357   2208             ;; toktype = DELIMITER;   
4358   2208 3B 8B 25      mov d, _toktype ; $toktype         
4359   220B 26 01 00      mov b, 1; DELIMITER        
4360   220E FD 43         mov [d], b
4361   2210 0A FA 22      jmp _if71_exit
4362   2213             _if71_else:
4363   2213             ;; if(*prog == ':'){ 
4364   2213             _if72_cond:
4365   2213 29 8D 25      mov b, [_prog] ; $prog           
4366   2216 74            mov d, b
4367   2217 32            mov bl, [d]
4368   2218 A7 00         mov bh, 0
4369   221A             ; START RELATIONAL
4370   221A D7            push a
4371   221B 11            mov a, b
4372   221C 26 3A 00      mov b, $3a
4373   221F B0            cmp a, b
4374   2220 FD 71         seq ; ==
4375   2222 E4            pop a
4376   2223             ; END RELATIONAL
4377   2223 C0 00 00      cmp b, 0
4378   2226 C6 60 22      je _if72_else
4379   2229             _if72_true:
4380   2229             ;; *t++ = *prog++; 
4381   2229 2C FF FF      mov b, [bp + -1] ; $t             
4382   222C FD 79         mov g, b
4383   222E FD 77         inc b
4384   2230 FA FF FF      lea d, [bp + -1] ; $t
4385   2233 FD 43         mov [d], b
4386   2235 FD 27         mov b, g
4387   2237 D8            push b
4388   2238 29 8D 25      mov b, [_prog] ; $prog           
4389   223B FD 79         mov g, b
4390   223D FD 77         inc b
4391   223F 3B 8D 25      mov d, _prog ; $prog
4392   2242 FD 43         mov [d], b
4393   2244 FD 27         mov b, g
4394   2246 74            mov d, b
4395   2247 32            mov bl, [d]
4396   2248 A7 00         mov bh, 0
4397   224A E7            pop d
4398   224B FD 3E         mov [d], bl
4399   224D             ;; tok = COLON; 
4400   224D 3B 89 25      mov d, _tok ; $tok         
4401   2250 26 22 00      mov b, 34; COLON        
4402   2253 FD 43         mov [d], b
4403   2255             ;; toktype = DELIMITER;   
4404   2255 3B 8B 25      mov d, _toktype ; $toktype         
4405   2258 26 01 00      mov b, 1; DELIMITER        
4406   225B FD 43         mov [d], b
4407   225D 0A FA 22      jmp _if72_exit
4408   2260             _if72_else:
4409   2260             ;; if(*prog == ','){ 
4410   2260             _if73_cond:
4411   2260 29 8D 25      mov b, [_prog] ; $prog           
4412   2263 74            mov d, b
4413   2264 32            mov bl, [d]
4414   2265 A7 00         mov bh, 0
4415   2267             ; START RELATIONAL
4416   2267 D7            push a
4417   2268 11            mov a, b
4418   2269 26 2C 00      mov b, $2c
4419   226C B0            cmp a, b
4420   226D FD 71         seq ; ==
4421   226F E4            pop a
4422   2270             ; END RELATIONAL
4423   2270 C0 00 00      cmp b, 0
4424   2273 C6 AD 22      je _if73_else
4425   2276             _if73_true:
4426   2276             ;; *t++ = *prog++; 
4427   2276 2C FF FF      mov b, [bp + -1] ; $t             
4428   2279 FD 79         mov g, b
4429   227B FD 77         inc b
4430   227D FA FF FF      lea d, [bp + -1] ; $t
4431   2280 FD 43         mov [d], b
4432   2282 FD 27         mov b, g
4433   2284 D8            push b
4434   2285 29 8D 25      mov b, [_prog] ; $prog           
4435   2288 FD 79         mov g, b
4436   228A FD 77         inc b
4437   228C 3B 8D 25      mov d, _prog ; $prog
4438   228F FD 43         mov [d], b
4439   2291 FD 27         mov b, g
4440   2293 74            mov d, b
4441   2294 32            mov bl, [d]
4442   2295 A7 00         mov bh, 0
4443   2297 E7            pop d
4444   2298 FD 3E         mov [d], bl
4445   229A             ;; tok = COMMA; 
4446   229A 3B 89 25      mov d, _tok ; $tok         
4447   229D 26 24 00      mov b, 36; COMMA        
4448   22A0 FD 43         mov [d], b
4449   22A2             ;; toktype = DELIMITER;   
4450   22A2 3B 8B 25      mov d, _toktype ; $toktype         
4451   22A5 26 01 00      mov b, 1; DELIMITER        
4452   22A8 FD 43         mov [d], b
4453   22AA 0A FA 22      jmp _if73_exit
4454   22AD             _if73_else:
4455   22AD             ;; if(*prog == '.'){ 
4456   22AD             _if74_cond:
4457   22AD 29 8D 25      mov b, [_prog] ; $prog           
4458   22B0 74            mov d, b
4459   22B1 32            mov bl, [d]
4460   22B2 A7 00         mov bh, 0
4461   22B4             ; START RELATIONAL
4462   22B4 D7            push a
4463   22B5 11            mov a, b
4464   22B6 26 2E 00      mov b, $2e
4465   22B9 B0            cmp a, b
4466   22BA FD 71         seq ; ==
4467   22BC E4            pop a
4468   22BD             ; END RELATIONAL
4469   22BD C0 00 00      cmp b, 0
4470   22C0 C6 FA 22      je _if74_exit
4471   22C3             _if74_true:
4472   22C3             ;; *t++ = *prog++; 
4473   22C3 2C FF FF      mov b, [bp + -1] ; $t             
4474   22C6 FD 79         mov g, b
4475   22C8 FD 77         inc b
4476   22CA FA FF FF      lea d, [bp + -1] ; $t
4477   22CD FD 43         mov [d], b
4478   22CF FD 27         mov b, g
4479   22D1 D8            push b
4480   22D2 29 8D 25      mov b, [_prog] ; $prog           
4481   22D5 FD 79         mov g, b
4482   22D7 FD 77         inc b
4483   22D9 3B 8D 25      mov d, _prog ; $prog
4484   22DC FD 43         mov [d], b
4485   22DE FD 27         mov b, g
4486   22E0 74            mov d, b
4487   22E1 32            mov bl, [d]
4488   22E2 A7 00         mov bh, 0
4489   22E4 E7            pop d
4490   22E5 FD 3E         mov [d], bl
4491   22E7             ;; tok = DOT; 
4492   22E7 3B 89 25      mov d, _tok ; $tok         
4493   22EA 26 25 00      mov b, 37; DOT        
4494   22ED FD 43         mov [d], b
4495   22EF             ;; toktype = DELIMITER;   
4496   22EF 3B 8B 25      mov d, _toktype ; $toktype         
4497   22F2 26 01 00      mov b, 1; DELIMITER        
4498   22F5 FD 43         mov [d], b
4499   22F7 0A FA 22      jmp _if74_exit
4500   22FA             _if74_exit:
4501   22FA             _if73_exit:
4502   22FA             _if72_exit:
4503   22FA             _if71_exit:
4504   22FA             _if70_exit:
4505   22FA             _if69_exit:
4506   22FA             _if68_exit:
4507   22FA             _if67_exit:
4508   22FA             _if66_exit:
4509   22FA             _if65_exit:
4510   22FA             _if64_exit:
4511   22FA             _if63_exit:
4512   22FA             _if61_exit:
4513   22FA             _if59_exit:
4514   22FA             _if57_exit:
4515   22FA             _if54_exit:
4516   22FA             _if51_exit:
4517   22FA             _if50_exit:
4518   22FA             _if48_exit:
4519   22FA             _if46_exit:
4520   22FA             _if44_exit:
4521   22FA             _if43_exit:
4522   22FA             _if42_exit:
4523   22FA             _if41_exit:
4524   22FA             _if40_exit:
4525   22FA             _if39_exit:
4526   22FA             _if36_exit:
4527   22FA             _if34_exit:
4528   22FA             _if32_exit:
4529   22FA             ;; *t = '\0'; 
4530   22FA 2C FF FF      mov b, [bp + -1] ; $t             
4531   22FD D8            push b
4532   22FE 26 00 00      mov b, $0
4533   2301 E7            pop d
4534   2302 FD 3E         mov [d], bl
4535   2304 F9            leave
4536   2305 09            ret
4537   2306             
4538   2306             convert_constant:
4539   2306 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4540   2309             ; $s 
4541   2309             ; $t 
4542   2309 52 04 00      sub sp, 4
4543   230C             ;; t = token; 
4544   230C FA FD FF      lea d, [bp + -3] ; $t         
4545   230F 26 8F 25      mov b, _token_data ; $token                   
4546   2312 FD 43         mov [d], b
4547   2314             ;; s = string_const; 
4548   2314 FA FF FF      lea d, [bp + -1] ; $s         
4549   2317 26 8F 26      mov b, _string_const_data ; $string_const                   
4550   231A FD 43         mov [d], b
4551   231C             ;; if(toktype == CHAR_CONST){ 
4552   231C             _if75_cond:
4553   231C 29 8B 25      mov b, [_toktype] ; $toktype           
4554   231F             ; START RELATIONAL
4555   231F D7            push a
4556   2320 11            mov a, b
4557   2321 26 02 00      mov b, 2; CHAR_CONST
4558   2324 B0            cmp a, b
4559   2325 FD 71         seq ; ==
4560   2327 E4            pop a
4561   2328             ; END RELATIONAL
4562   2328 C0 00 00      cmp b, 0
4563   232B C6 C5 24      je _if75_else
4564   232E             _if75_true:
4565   232E             ;; t++; 
4566   232E 2C FD FF      mov b, [bp + -3] ; $t             
4567   2331 FD 79         mov g, b
4568   2333 FD 77         inc b
4569   2335 FA FD FF      lea d, [bp + -3] ; $t
4570   2338 FD 43         mov [d], b
4571   233A FD 27         mov b, g
4572   233C             ;; if(*t == '\\'){ 
4573   233C             _if76_cond:
4574   233C 2C FD FF      mov b, [bp + -3] ; $t             
4575   233F 74            mov d, b
4576   2340 32            mov bl, [d]
4577   2341 A7 00         mov bh, 0
4578   2343             ; START RELATIONAL
4579   2343 D7            push a
4580   2344 11            mov a, b
4581   2345 26 5C 00      mov b, $5c
4582   2348 B0            cmp a, b
4583   2349 FD 71         seq ; ==
4584   234B E4            pop a
4585   234C             ; END RELATIONAL
4586   234C C0 00 00      cmp b, 0
4587   234F C6 A9 24      je _if76_else
4588   2352             _if76_true:
4589   2352             ;; t++; 
4590   2352 2C FD FF      mov b, [bp + -3] ; $t             
4591   2355 FD 79         mov g, b
4592   2357 FD 77         inc b
4593   2359 FA FD FF      lea d, [bp + -3] ; $t
4594   235C FD 43         mov [d], b
4595   235E FD 27         mov b, g
4596   2360             ;; switch(*t){ 
4597   2360             _switch77_expr:
4598   2360 2C FD FF      mov b, [bp + -3] ; $t             
4599   2363 74            mov d, b
4600   2364 32            mov bl, [d]
4601   2365 A7 00         mov bh, 0
4602   2367             _switch77_comparisons:
4603   2367 C1 30         cmp bl, $30
4604   2369 C6 A1 23      je _switch77_case0
4605   236C C1 61         cmp bl, $61
4606   236E C6 B9 23      je _switch77_case1
4607   2371 C1 62         cmp bl, $62
4608   2373 C6 D1 23      je _switch77_case2
4609   2376 C1 66         cmp bl, $66
4610   2378 C6 E9 23      je _switch77_case3
4611   237B C1 6E         cmp bl, $6e
4612   237D C6 01 24      je _switch77_case4
4613   2380 C1 72         cmp bl, $72
4614   2382 C6 19 24      je _switch77_case5
4615   2385 C1 74         cmp bl, $74
4616   2387 C6 31 24      je _switch77_case6
4617   238A C1 76         cmp bl, $76
4618   238C C6 49 24      je _switch77_case7
4619   238F C1 5C         cmp bl, $5c
4620   2391 C6 61 24      je _switch77_case8
4621   2394 C1 27         cmp bl, $27
4622   2396 C6 79 24      je _switch77_case9
4623   2399 C1 22         cmp bl, $22
4624   239B C6 91 24      je _switch77_case10
4625   239E 0A A6 24      jmp _switch77_exit
4626   23A1             _switch77_case0:
4627   23A1             ;; *s++ = '\0'; 
4628   23A1 2C FF FF      mov b, [bp + -1] ; $s             
4629   23A4 FD 79         mov g, b
4630   23A6 FD 77         inc b
4631   23A8 FA FF FF      lea d, [bp + -1] ; $s
4632   23AB FD 43         mov [d], b
4633   23AD FD 27         mov b, g
4634   23AF D8            push b
4635   23B0 26 00 00      mov b, $0
4636   23B3 E7            pop d
4637   23B4 FD 3E         mov [d], bl
4638   23B6             ;; break; 
4639   23B6 0A A6 24      jmp _switch77_exit ; case break
4640   23B9             _switch77_case1:
4641   23B9             ;; *s++ = '\a'; 
4642   23B9 2C FF FF      mov b, [bp + -1] ; $s             
4643   23BC FD 79         mov g, b
4644   23BE FD 77         inc b
4645   23C0 FA FF FF      lea d, [bp + -1] ; $s
4646   23C3 FD 43         mov [d], b
4647   23C5 FD 27         mov b, g
4648   23C7 D8            push b
4649   23C8 26 07 00      mov b, $7
4650   23CB E7            pop d
4651   23CC FD 3E         mov [d], bl
4652   23CE             ;; break; 
4653   23CE 0A A6 24      jmp _switch77_exit ; case break
4654   23D1             _switch77_case2:
4655   23D1             ;; *s++ = '\b'; 
4656   23D1 2C FF FF      mov b, [bp + -1] ; $s             
4657   23D4 FD 79         mov g, b
4658   23D6 FD 77         inc b
4659   23D8 FA FF FF      lea d, [bp + -1] ; $s
4660   23DB FD 43         mov [d], b
4661   23DD FD 27         mov b, g
4662   23DF D8            push b
4663   23E0 26 08 00      mov b, $8
4664   23E3 E7            pop d
4665   23E4 FD 3E         mov [d], bl
4666   23E6             ;; break;   
4667   23E6 0A A6 24      jmp _switch77_exit ; case break
4668   23E9             _switch77_case3:
4669   23E9             ;; *s++ = '\f'; 
4670   23E9 2C FF FF      mov b, [bp + -1] ; $s             
4671   23EC FD 79         mov g, b
4672   23EE FD 77         inc b
4673   23F0 FA FF FF      lea d, [bp + -1] ; $s
4674   23F3 FD 43         mov [d], b
4675   23F5 FD 27         mov b, g
4676   23F7 D8            push b
4677   23F8 26 0C 00      mov b, $c
4678   23FB E7            pop d
4679   23FC FD 3E         mov [d], bl
4680   23FE             ;; break; 
4681   23FE 0A A6 24      jmp _switch77_exit ; case break
4682   2401             _switch77_case4:
4683   2401             ;; *s++ = '\n'; 
4684   2401 2C FF FF      mov b, [bp + -1] ; $s             
4685   2404 FD 79         mov g, b
4686   2406 FD 77         inc b
4687   2408 FA FF FF      lea d, [bp + -1] ; $s
4688   240B FD 43         mov [d], b
4689   240D FD 27         mov b, g
4690   240F D8            push b
4691   2410 26 0A 00      mov b, $a
4692   2413 E7            pop d
4693   2414 FD 3E         mov [d], bl
4694   2416             ;; break; 
4695   2416 0A A6 24      jmp _switch77_exit ; case break
4696   2419             _switch77_case5:
4697   2419             ;; *s++ = '\r'; 
4698   2419 2C FF FF      mov b, [bp + -1] ; $s             
4699   241C FD 79         mov g, b
4700   241E FD 77         inc b
4701   2420 FA FF FF      lea d, [bp + -1] ; $s
4702   2423 FD 43         mov [d], b
4703   2425 FD 27         mov b, g
4704   2427 D8            push b
4705   2428 26 0D 00      mov b, $d
4706   242B E7            pop d
4707   242C FD 3E         mov [d], bl
4708   242E             ;; break; 
4709   242E 0A A6 24      jmp _switch77_exit ; case break
4710   2431             _switch77_case6:
4711   2431             ;; *s++ = '\t'; 
4712   2431 2C FF FF      mov b, [bp + -1] ; $s             
4713   2434 FD 79         mov g, b
4714   2436 FD 77         inc b
4715   2438 FA FF FF      lea d, [bp + -1] ; $s
4716   243B FD 43         mov [d], b
4717   243D FD 27         mov b, g
4718   243F D8            push b
4719   2440 26 09 00      mov b, $9
4720   2443 E7            pop d
4721   2444 FD 3E         mov [d], bl
4722   2446             ;; break; 
4723   2446 0A A6 24      jmp _switch77_exit ; case break
4724   2449             _switch77_case7:
4725   2449             ;; *s++ = '\v'; 
4726   2449 2C FF FF      mov b, [bp + -1] ; $s             
4727   244C FD 79         mov g, b
4728   244E FD 77         inc b
4729   2450 FA FF FF      lea d, [bp + -1] ; $s
4730   2453 FD 43         mov [d], b
4731   2455 FD 27         mov b, g
4732   2457 D8            push b
4733   2458 26 0B 00      mov b, $b
4734   245B E7            pop d
4735   245C FD 3E         mov [d], bl
4736   245E             ;; break; 
4737   245E 0A A6 24      jmp _switch77_exit ; case break
4738   2461             _switch77_case8:
4739   2461             ;; *s++ = '\\'; 
4740   2461 2C FF FF      mov b, [bp + -1] ; $s             
4741   2464 FD 79         mov g, b
4742   2466 FD 77         inc b
4743   2468 FA FF FF      lea d, [bp + -1] ; $s
4744   246B FD 43         mov [d], b
4745   246D FD 27         mov b, g
4746   246F D8            push b
4747   2470 26 5C 00      mov b, $5c
4748   2473 E7            pop d
4749   2474 FD 3E         mov [d], bl
4750   2476             ;; break; 
4751   2476 0A A6 24      jmp _switch77_exit ; case break
4752   2479             _switch77_case9:
4753   2479             ;; *s++ = '\''; 
4754   2479 2C FF FF      mov b, [bp + -1] ; $s             
4755   247C FD 79         mov g, b
4756   247E FD 77         inc b
4757   2480 FA FF FF      lea d, [bp + -1] ; $s
4758   2483 FD 43         mov [d], b
4759   2485 FD 27         mov b, g
4760   2487 D8            push b
4761   2488 26 27 00      mov b, $27
4762   248B E7            pop d
4763   248C FD 3E         mov [d], bl
4764   248E             ;; break; 
4765   248E 0A A6 24      jmp _switch77_exit ; case break
4766   2491             _switch77_case10:
4767   2491             ;; *s++ = '\"'; 
4768   2491 2C FF FF      mov b, [bp + -1] ; $s             
4769   2494 FD 79         mov g, b
4770   2496 FD 77         inc b
4771   2498 FA FF FF      lea d, [bp + -1] ; $s
4772   249B FD 43         mov [d], b
4773   249D FD 27         mov b, g
4774   249F D8            push b
4775   24A0 26 22 00      mov b, $22
4776   24A3 E7            pop d
4777   24A4 FD 3E         mov [d], bl
4778   24A6             _switch77_exit:
4779   24A6 0A C2 24      jmp _if76_exit
4780   24A9             _if76_else:
4781   24A9             ;; *s++ = *t; 
4782   24A9 2C FF FF      mov b, [bp + -1] ; $s             
4783   24AC FD 79         mov g, b
4784   24AE FD 77         inc b
4785   24B0 FA FF FF      lea d, [bp + -1] ; $s
4786   24B3 FD 43         mov [d], b
4787   24B5 FD 27         mov b, g
4788   24B7 D8            push b
4789   24B8 2C FD FF      mov b, [bp + -3] ; $t             
4790   24BB 74            mov d, b
4791   24BC 32            mov bl, [d]
4792   24BD A7 00         mov bh, 0
4793   24BF E7            pop d
4794   24C0 FD 3E         mov [d], bl
4795   24C2             _if76_exit:
4796   24C2 0A 31 25      jmp _if75_exit
4797   24C5             _if75_else:
4798   24C5             ;; if(toktype == STRING_CONST){ 
4799   24C5             _if78_cond:
4800   24C5 29 8B 25      mov b, [_toktype] ; $toktype           
4801   24C8             ; START RELATIONAL
4802   24C8 D7            push a
4803   24C9 11            mov a, b
4804   24CA 26 03 00      mov b, 3; STRING_CONST
4805   24CD B0            cmp a, b
4806   24CE FD 71         seq ; ==
4807   24D0 E4            pop a
4808   24D1             ; END RELATIONAL
4809   24D1 C0 00 00      cmp b, 0
4810   24D4 C6 31 25      je _if78_exit
4811   24D7             _if78_true:
4812   24D7             ;; t++; 
4813   24D7 2C FD FF      mov b, [bp + -3] ; $t             
4814   24DA FD 79         mov g, b
4815   24DC FD 77         inc b
4816   24DE FA FD FF      lea d, [bp + -3] ; $t
4817   24E1 FD 43         mov [d], b
4818   24E3 FD 27         mov b, g
4819   24E5             ;; while(*t != '\"' && *t){ 
4820   24E5             _while79_cond:
4821   24E5 2C FD FF      mov b, [bp + -3] ; $t             
4822   24E8 74            mov d, b
4823   24E9 32            mov bl, [d]
4824   24EA A7 00         mov bh, 0
4825   24EC             ; START RELATIONAL
4826   24EC D7            push a
4827   24ED 11            mov a, b
4828   24EE 26 22 00      mov b, $22
4829   24F1 B0            cmp a, b
4830   24F2 FD 72         sneq ; !=
4831   24F4 E4            pop a
4832   24F5             ; END RELATIONAL
4833   24F5 D7            push a
4834   24F6 11            mov a, b
4835   24F7 2C FD FF      mov b, [bp + -3] ; $t             
4836   24FA 74            mov d, b
4837   24FB 32            mov bl, [d]
4838   24FC A7 00         mov bh, 0
4839   24FE FD A7         sand a, b ; &&
4840   2500 E4            pop a
4841   2501 C0 00 00      cmp b, 0
4842   2504 C6 2E 25      je _while79_exit
4843   2507             _while79_block:
4844   2507             ;; *s++ = *t++; 
4845   2507 2C FF FF      mov b, [bp + -1] ; $s             
4846   250A FD 79         mov g, b
4847   250C FD 77         inc b
4848   250E FA FF FF      lea d, [bp + -1] ; $s
4849   2511 FD 43         mov [d], b
4850   2513 FD 27         mov b, g
4851   2515 D8            push b
4852   2516 2C FD FF      mov b, [bp + -3] ; $t             
4853   2519 FD 79         mov g, b
4854   251B FD 77         inc b
4855   251D FA FD FF      lea d, [bp + -3] ; $t
4856   2520 FD 43         mov [d], b
4857   2522 FD 27         mov b, g
4858   2524 74            mov d, b
4859   2525 32            mov bl, [d]
4860   2526 A7 00         mov bh, 0
4861   2528 E7            pop d
4862   2529 FD 3E         mov [d], bl
4863   252B 0A E5 24      jmp _while79_cond
4864   252E             _while79_exit:
4865   252E 0A 31 25      jmp _if78_exit
4866   2531             _if78_exit:
4867   2531             _if75_exit:
4868   2531             ;; *s = '\0'; 
4869   2531 2C FF FF      mov b, [bp + -1] ; $s             
4870   2534 D8            push b
4871   2535 26 00 00      mov b, $0
4872   2538 E7            pop d
4873   2539 FD 3E         mov [d], bl
4874   253B F9            leave
4875   253C 09            ret
4876   253D             
4877   253D             error:
4878   253D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4879   2540             ;; printf("\nError: "); 
4880   2540 26 0B 28      mov b, __s3 ; "\nError: "
4881   2543 FD AB         swp b
4882   2545 D8            push b
4883   2546 07 76 0A      call printf
4884   2549 51 02 00      add sp, 2
4885   254C             ;; printf(msg); 
4886   254C 2C 05 00      mov b, [bp + 5] ; $msg             
4887   254F FD AB         swp b
4888   2551 D8            push b
4889   2552 07 76 0A      call printf
4890   2555 51 02 00      add sp, 2
4891   2558             ;; printf("\n"); 
4892   2558 26 14 28      mov b, __s4 ; "\n"
4893   255B FD AB         swp b
4894   255D D8            push b
4895   255E 07 76 0A      call printf
4896   2561 51 02 00      add sp, 2
4897   2564 F9            leave
4898   2565 09            ret
4899   2566             
4900   2566             read_sect:
4901   2566 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4902   2569             
4903   2569             ; --- BEGIN INLINE ASM BLOCK
4904   2569 FA 06 00      lea d, [bp + 6] ; $initial_sect
4905   256C FD 2A         mov d, [d]
4906   256E 2D            mov b, d
4907   256F FD 77         inc b                        
4908   2571 38 00 00      mov c, 0                     
4909   2574 FA 05 00      lea d, [bp + 5] ; $num_sect
4910   2577 FD 2A         mov d, [d]
out/ls.asm line 4911: Label not found: (dl)
out/ls.asm line 4911: Unused data in MS byte of argument. (200)
4911   2579 19 00         mov al, dl
4912   257B 23            mov ah, al                   
4913   257C FA 08 00      lea d, [bp + 8] ; $dest
4914   257F FD 2A         mov d, [d]
out/ls.asm line 4915: Label not found: (transient_area)
out/ls.asm line 4915: Unused data in MS byte of argument. (2)
4915   2581 3B 00 00      mov d, transient_area
out/ls.asm line 4916: Label not found: (ide_read_sect)
out/ls.asm line 4916: Unused data in MS byte of argument. (2)
4916   2584 07 00 00      call ide_read_sect           
4917   2587             ; --- END INLINE ASM BLOCK
4918   2587             
4919   2587 F9            leave
4920   2588 09            ret
4921   2589             ; --- END TEXT BLOCK
4922   2589             
4923   2589             ; --- BEGIN DATA BLOCK
4924   2589 00 00       _tok: .fill 2, 0
4925   258B 00 00       _toktype: .fill 2, 0
4926   258D 00 00       _prog: .fill 2, 0
4927   258F 00 00 00 00 _token_data: .fill 256, 0
4927   2593 00 00 00 00 
4927   2597 00 00 00 00 
4927   259B 00 00 00 00 
4927   259F 00 00 00 00 
4927   25A3 00 00 00 00 
4927   25A7 00 00 00 00 
4927   25AB 00 00 00 00 
4927   25AF 00 00 00 00 
4927   25B3 00 00 00 00 
4927   25B7 00 00 00 00 
4927   25BB 00 00 00 00 
4927   25BF 00 00 00 00 
4927   25C3 00 00 00 00 
4927   25C7 00 00 00 00 
4927   25CB 00 00 00 00 
4927   25CF 00 00 00 00 
4927   25D3 00 00 00 00 
4927   25D7 00 00 00 00 
4927   25DB 00 00 00 00 
4927   25DF 00 00 00 00 
4927   25E3 00 00 00 00 
4927   25E7 00 00 00 00 
4927   25EB 00 00 00 00 
4927   25EF 00 00 00 00 
4927   25F3 00 00 00 00 
4927   25F7 00 00 00 00 
4927   25FB 00 00 00 00 
4927   25FF 00 00 00 00 
4927   2603 00 00 00 00 
4927   2607 00 00 00 00 
4927   260B 00 00 00 00 
4927   260F 00 00 00 00 
4927   2613 00 00 00 00 
4927   2617 00 00 00 00 
4927   261B 00 00 00 00 
4927   261F 00 00 00 00 
4927   2623 00 00 00 00 
4927   2627 00 00 00 00 
4927   262B 00 00 00 00 
4927   262F 00 00 00 00 
4927   2633 00 00 00 00 
4927   2637 00 00 00 00 
4927   263B 00 00 00 00 
4927   263F 00 00 00 00 
4927   2643 00 00 00 00 
4927   2647 00 00 00 00 
4927   264B 00 00 00 00 
4927   264F 00 00 00 00 
4927   2653 00 00 00 00 
4927   2657 00 00 00 00 
4927   265B 00 00 00 00 
4927   265F 00 00 00 00 
4927   2663 00 00 00 00 
4927   2667 00 00 00 00 
4927   266B 00 00 00 00 
4927   266F 00 00 00 00 
4927   2673 00 00 00 00 
4927   2677 00 00 00 00 
4927   267B 00 00 00 00 
4927   267F 00 00 00 00 
4927   2683 00 00 00 00 
4927   2687 00 00 00 00 
4927   268B 00 00 00 00 
4928   268F 00 00 00 00 _string_const_data: .fill 256, 0
4928   2693 00 00 00 00 
4928   2697 00 00 00 00 
4928   269B 00 00 00 00 
4928   269F 00 00 00 00 
4928   26A3 00 00 00 00 
4928   26A7 00 00 00 00 
4928   26AB 00 00 00 00 
4928   26AF 00 00 00 00 
4928   26B3 00 00 00 00 
4928   26B7 00 00 00 00 
4928   26BB 00 00 00 00 
4928   26BF 00 00 00 00 
4928   26C3 00 00 00 00 
4928   26C7 00 00 00 00 
4928   26CB 00 00 00 00 
4928   26CF 00 00 00 00 
4928   26D3 00 00 00 00 
4928   26D7 00 00 00 00 
4928   26DB 00 00 00 00 
4928   26DF 00 00 00 00 
4928   26E3 00 00 00 00 
4928   26E7 00 00 00 00 
4928   26EB 00 00 00 00 
4928   26EF 00 00 00 00 
4928   26F3 00 00 00 00 
4928   26F7 00 00 00 00 
4928   26FB 00 00 00 00 
4928   26FF 00 00 00 00 
4928   2703 00 00 00 00 
4928   2707 00 00 00 00 
4928   270B 00 00 00 00 
4928   270F 00 00 00 00 
4928   2713 00 00 00 00 
4928   2717 00 00 00 00 
4928   271B 00 00 00 00 
4928   271F 00 00 00 00 
4928   2723 00 00 00 00 
4928   2727 00 00 00 00 
4928   272B 00 00 00 00 
4928   272F 00 00 00 00 
4928   2733 00 00 00 00 
4928   2737 00 00 00 00 
4928   273B 00 00 00 00 
4928   273F 00 00 00 00 
4928   2743 00 00 00 00 
4928   2747 00 00 00 00 
4928   274B 00 00 00 00 
4928   274F 00 00 00 00 
4928   2753 00 00 00 00 
4928   2757 00 00 00 00 
4928   275B 00 00 00 00 
4928   275F 00 00 00 00 
4928   2763 00 00 00 00 
4928   2767 00 00 00 00 
4928   276B 00 00 00 00 
4928   276F 00 00 00 00 
4928   2773 00 00 00 00 
4928   2777 00 00 00 00 
4928   277B 00 00 00 00 
4928   277F 00 00 00 00 
4928   2783 00 00 00 00 
4928   2787 00 00 00 00 
4928   278B 00 00 00 00 
4929   278F 00 00       _transient_area: .fill 2, 0
4930   2791 55 6E 6B 6E __s0: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
4930   2795 6F 77 6E 20 
4930   2799 74 79 70 65 
4930   279D 20 73 69 7A 
4930   27A1 65 20 69 6E 
4930   27A5 20 76 61 5F 
4930   27A9 61 72 67 28 
4930   27AD 29 20 63 61 
4930   27B1 6C 6C 2E 20 
4930   27B5 53 69 7A 65 
4930   27B9 20 6E 65 65 
4930   27BD 64 73 20 74 
4930   27C1 6F 20 62 65 
4930   27C5 20 65 69 74 
4930   27C9 68 65 72 20 
4930   27CD 31 20 6F 72 
4930   27D1 20 32 2E 00 
4931   27D5 45 72 72 6F __s1: .db "Error: Unknown argument type.\n", 0
4931   27D9 72 3A 20 55 
4931   27DD 6E 6B 6E 6F 
4931   27E1 77 6E 20 61 
4931   27E5 72 67 75 6D 
4931   27E9 65 6E 74 20 
4931   27ED 74 79 70 65 
4931   27F1 2E 0A 00 
4932   27F4 44 6F 75 62 __s2: .db "Double quotes expected", 0
4932   27F8 6C 65 20 71 
4932   27FC 75 6F 74 65 
4932   2800 73 20 65 78 
4932   2804 70 65 63 74 
4932   2808 65 64 00 
4933   280B 0A 45 72 72 __s3: .db "\nError: ", 0
4933   280F 6F 72 3A 20 
4933   2813 00 
4934   2814 0A 00       __s4: .db "\n", 0
4935   2816             
4936   2816 18 28       _heap_top: .dw _heap
4937   2818 00          _heap: .db 0
4938   2819             ; --- END DATA BLOCK
4939   2819             
4940   2819             .end
tasm: Number of errors = 46
