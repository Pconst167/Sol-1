0001   0000             ; --- FILENAME: ../solarium/asm/asm
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $p 
0011   0408 52 02 00      sub sp, 2
0012   040B             ;; print("\n"); 
0013   040B 26 6F 3C      mov b, __s9 ; "\n"
0014   040E FD AB         swp b
0015   0410 D8            push b
0016   0411 07 FB 32      call print
0017   0414 51 02 00      add sp, 2
0018   0417             ;; program = alloc(16384); 
0019   0417 3B 1B 3C      mov d, _program ; $program
0020   041A DA            push d
0021   041B 26 00 40      mov b, $4000
0022   041E FD AB         swp b
0023   0420 D8            push b
0024   0421 07 19 33      call alloc
0025   0424 51 02 00      add sp, 2
0026   0427 E7            pop d
0027   0428 FD 43         mov [d], b
0028   042A             ;; bin_out = alloc(16384); 
0029   042A 3B 1D 3C      mov d, _bin_out ; $bin_out
0030   042D DA            push d
0031   042E 26 00 40      mov b, $4000
0032   0431 FD AB         swp b
0033   0433 D8            push b
0034   0434 07 19 33      call alloc
0035   0437 51 02 00      add sp, 2
0036   043A E7            pop d
0037   043B FD 43         mov [d], b
0038   043D             ;; opcode_table = alloc(12310); 
0039   043D 3B 21 3C      mov d, _opcode_table ; $opcode_table
0040   0440 DA            push d
0041   0441 26 16 30      mov b, $3016
0042   0444 FD AB         swp b
0043   0446 D8            push b
0044   0447 07 19 33      call alloc
0045   044A 51 02 00      add sp, 2
0046   044D E7            pop d
0047   044E FD 43         mov [d], b
0048   0450             ;; loadfile(0x0000, program); 
0049   0450 26 00 00      mov b, $0
0050   0453 FD AB         swp b
0051   0455 D8            push b
0052   0456 29 1B 3C      mov b, [_program] ; $program           
0053   0459 FD AB         swp b
0054   045B D8            push b
0055   045C 07 07 33      call loadfile
0056   045F 51 04 00      add sp, 4
0057   0462             ;; loadfile("./config.d/op_tbl", opcode_table); 
0058   0462 26 71 3C      mov b, __s10 ; "./config.d/op_tbl"
0059   0465 FD AB         swp b
0060   0467 D8            push b
0061   0468 29 21 3C      mov b, [_opcode_table] ; $opcode_table           
0062   046B FD AB         swp b
0063   046D D8            push b
0064   046E 07 07 33      call loadfile
0065   0471 51 04 00      add sp, 4
0066   0474             ;; p = program; 
0067   0474 FA FF FF      lea d, [bp + -1] ; $p         
0068   0477 29 1B 3C      mov b, [_program] ; $program                   
0069   047A FD 43         mov [d], b
0070   047C             ;; while(*p) p++; 
0071   047C             _while1_cond:
0072   047C 2C FF FF      mov b, [bp + -1] ; $p             
0073   047F 74            mov d, b
0074   0480 32            mov bl, [d]
0075   0481 A7 00         mov bh, 0
0076   0483 C0 00 00      cmp b, 0
0077   0486 C6 9A 04      je _while1_exit
0078   0489             _while1_block:
0079   0489             ;; p++; 
0080   0489 2C FF FF      mov b, [bp + -1] ; $p             
0081   048C FD 79         mov g, b
0082   048E FD 77         inc b
0083   0490 FA FF FF      lea d, [bp + -1] ; $p
0084   0493 FD 43         mov [d], b
0085   0495 FD 27         mov b, g
0086   0497 0A 7C 04      jmp _while1_cond
0087   049A             _while1_exit:
0088   049A             ;; while(is_space(*p)) p--; 
0089   049A             _while2_cond:
0090   049A 2C FF FF      mov b, [bp + -1] ; $p             
0091   049D 74            mov d, b
0092   049E 32            mov bl, [d]
0093   049F A7 00         mov bh, 0
0094   04A1 DD            push bl
0095   04A2 07 3E 35      call is_space
0096   04A5 51 01 00      add sp, 1
0097   04A8 C0 00 00      cmp b, 0
0098   04AB C6 BF 04      je _while2_exit
0099   04AE             _while2_block:
0100   04AE             ;; p--; 
0101   04AE 2C FF FF      mov b, [bp + -1] ; $p             
0102   04B1 FD 79         mov g, b
0103   04B3 FD 7D         dec b
0104   04B5 FA FF FF      lea d, [bp + -1] ; $p
0105   04B8 FD 43         mov [d], b
0106   04BA FD 27         mov b, g
0107   04BC 0A 9A 04      jmp _while2_cond
0108   04BF             _while2_exit:
0109   04BF             ;; p++; 
0110   04BF 2C FF FF      mov b, [bp + -1] ; $p             
0111   04C2 FD 79         mov g, b
0112   04C4 FD 77         inc b
0113   04C6 FA FF FF      lea d, [bp + -1] ; $p
0114   04C9 FD 43         mov [d], b
0115   04CB FD 27         mov b, g
0116   04CD             ;; *p = '\0'; 
0117   04CD 2C FF FF      mov b, [bp + -1] ; $p             
0118   04D0 D8            push b
0119   04D1 26 00 00      mov b, $0
0120   04D4 E7            pop d
0121   04D5 FD 3E         mov [d], bl
0122   04D7             ;; prog = program; 
0123   04D7 3B D7 3A      mov d, _prog ; $prog         
0124   04DA 29 1B 3C      mov b, [_program] ; $program                   
0125   04DD FD 43         mov [d], b
0126   04DF             ;; bin_p = bin_out + _org; 
0127   04DF 3B 1F 3C      mov d, _bin_p ; $bin_p         
0128   04E2 29 1D 3C      mov b, [_bin_out] ; $bin_out           
0129   04E5             ; START TERMS
0130   04E5 D7            push a
0131   04E6 11            mov a, b
0132   04E7 29 CE 3A      mov b, [__org] ; $_org           
0133   04EA 54            add a, b
0134   04EB 27            mov b, a
0135   04EC E4            pop a
0136   04ED             ; END TERMS        
0137   04ED FD 43         mov [d], b
0138   04EF             ;; pc = _org; 
0139   04EF 3B D0 3A      mov d, _pc ; $pc         
0140   04F2 29 CE 3A      mov b, [__org] ; $_org                   
0141   04F5 FD 43         mov [d], b
0142   04F7             ;; prog_size = 0; 
0143   04F7 3B 39 3C      mov d, _prog_size ; $prog_size         
0144   04FA 26 00 00      mov b, $0        
0145   04FD FD 43         mov [d], b
0146   04FF             ;; label_directive_scan(); 
0147   04FF 07 BC 08      call label_directive_scan
0148   0502             ;; prog_size = 0; 
0149   0502 3B 39 3C      mov d, _prog_size ; $prog_size         
0150   0505 26 00 00      mov b, $0        
0151   0508 FD 43         mov [d], b
0152   050A             ;; parse_text(); 
0153   050A 07 4F 16      call parse_text
0154   050D             ;; parse_data(); 
0155   050D 07 15 05      call parse_data
0156   0510             ;; display_output(); 
0157   0510 07 95 18      call display_output
0158   0513 05 0B         syscall sys_terminate_proc
0159   0515             
0160   0515             parse_data:
0161   0515 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0162   0518             ;; print("Parsing DATA section..."); 
0163   0518 26 83 3C      mov b, __s11 ; "Parsing DATA section..."
0164   051B FD AB         swp b
0165   051D D8            push b
0166   051E 07 FB 32      call print
0167   0521 51 02 00      add sp, 2
0168   0524             ;; for(;;){ 
0169   0524             _for3_init:
0170   0524             _for3_cond:
0171   0524             _for3_block:
0172   0524             ;; get(); 
0173   0524 07 B1 23      call get
0174   0527             ;; if(toktype == END) error("Data segment not found."); 
0175   0527             _if4_cond:
0176   0527 29 D5 3A      mov b, [_toktype] ; $toktype           
0177   052A             ; START RELATIONAL
0178   052A D7            push a
0179   052B 11            mov a, b
0180   052C 26 07 00      mov b, 7; END
0181   052F B0            cmp a, b
0182   0530 FD 71         seq ; ==
0183   0532 E4            pop a
0184   0533             ; END RELATIONAL
0185   0533 C0 00 00      cmp b, 0
0186   0536 C6 48 05      je _if4_exit
0187   0539             _if4_true:
0188   0539             ;; error("Data segment not found."); 
0189   0539 26 9B 3C      mov b, __s12 ; "Data segment not found."
0190   053C FD AB         swp b
0191   053E D8            push b
0192   053F 07 6B 2E      call error
0193   0542 51 02 00      add sp, 2
0194   0545 0A 48 05      jmp _if4_exit
0195   0548             _if4_exit:
0196   0548             ;; if(tok == DOT){ 
0197   0548             _if5_cond:
0198   0548 29 D3 3A      mov b, [_tok] ; $tok           
0199   054B             ; START RELATIONAL
0200   054B D7            push a
0201   054C 11            mov a, b
0202   054D 26 10 00      mov b, 16; DOT
0203   0550 B0            cmp a, b
0204   0551 FD 71         seq ; ==
0205   0553 E4            pop a
0206   0554             ; END RELATIONAL
0207   0554 C0 00 00      cmp b, 0
0208   0557 C6 78 05      je _if5_exit
0209   055A             _if5_true:
0210   055A             ;; get(); 
0211   055A 07 B1 23      call get
0212   055D             ;; if(tok == DATA) break; 
0213   055D             _if6_cond:
0214   055D 29 D3 3A      mov b, [_tok] ; $tok           
0215   0560             ; START RELATIONAL
0216   0560 D7            push a
0217   0561 11            mov a, b
0218   0562 26 03 00      mov b, 3; DATA
0219   0565 B0            cmp a, b
0220   0566 FD 71         seq ; ==
0221   0568 E4            pop a
0222   0569             ; END RELATIONAL
0223   0569 C0 00 00      cmp b, 0
0224   056C C6 75 05      je _if6_exit
0225   056F             _if6_true:
0226   056F             ;; break; 
0227   056F 0A 7B 05      jmp _for3_exit ; for break
0228   0572 0A 75 05      jmp _if6_exit
0229   0575             _if6_exit:
0230   0575 0A 78 05      jmp _if5_exit
0231   0578             _if5_exit:
0232   0578             _for3_update:
0233   0578 0A 24 05      jmp _for3_cond
0234   057B             _for3_exit:
0235   057B             ;; for(;;){ 
0236   057B             _for7_init:
0237   057B             _for7_cond:
0238   057B             _for7_block:
0239   057B             ;; get(); 
0240   057B 07 B1 23      call get
0241   057E             ;; if(tok == SEGMENT_END) break; 
0242   057E             _if8_cond:
0243   057E 29 D3 3A      mov b, [_tok] ; $tok           
0244   0581             ; START RELATIONAL
0245   0581 D7            push a
0246   0582 11            mov a, b
0247   0583 26 05 00      mov b, 5; SEGMENT_END
0248   0586 B0            cmp a, b
0249   0587 FD 71         seq ; ==
0250   0589 E4            pop a
0251   058A             ; END RELATIONAL
0252   058A C0 00 00      cmp b, 0
0253   058D C6 96 05      je _if8_exit
0254   0590             _if8_true:
0255   0590             ;; break; 
0256   0590 0A 3D 07      jmp _for7_exit ; for break
0257   0593 0A 96 05      jmp _if8_exit
0258   0596             _if8_exit:
0259   0596             ;; if(tok == DB){ 
0260   0596             _if9_cond:
0261   0596 29 D3 3A      mov b, [_tok] ; $tok           
0262   0599             ; START RELATIONAL
0263   0599 D7            push a
0264   059A 11            mov a, b
0265   059B 26 06 00      mov b, 6; DB
0266   059E B0            cmp a, b
0267   059F FD 71         seq ; ==
0268   05A1 E4            pop a
0269   05A2             ; END RELATIONAL
0270   05A2 C0 00 00      cmp b, 0
0271   05A5 C6 5F 06      je _if9_else
0272   05A8             _if9_true:
0273   05A8             ;; print(".db: "); 
0274   05A8 26 B3 3C      mov b, __s13 ; ".db: "
0275   05AB FD AB         swp b
0276   05AD D8            push b
0277   05AE 07 FB 32      call print
0278   05B1 51 02 00      add sp, 2
0279   05B4             ;; for(;;){ 
0280   05B4             _for10_init:
0281   05B4             _for10_cond:
0282   05B4             _for10_block:
0283   05B4             ;; get(); 
0284   05B4 07 B1 23      call get
0285   05B7             ;; if(toktype == CHAR_CONST){ 
0286   05B7             _if11_cond:
0287   05B7 29 D5 3A      mov b, [_toktype] ; $toktype           
0288   05BA             ; START RELATIONAL
0289   05BA D7            push a
0290   05BB 11            mov a, b
0291   05BC 26 03 00      mov b, 3; CHAR_CONST
0292   05BF B0            cmp a, b
0293   05C0 FD 71         seq ; ==
0294   05C2 E4            pop a
0295   05C3             ; END RELATIONAL
0296   05C3 C0 00 00      cmp b, 0
0297   05C6 C6 F6 05      je _if11_else
0298   05C9             _if11_true:
0299   05C9             ;; emit_byte(string_const[0], 0); 
0300   05C9 3B 19 3B      mov d, _string_const_data ; $string_const
0301   05CC D7            push a         
0302   05CD 26 00 00      mov b, $0        
0303   05D0 5A            add d, b
0304   05D1 E4            pop a
0305   05D2 32            mov bl, [d]
0306   05D3 A7 00         mov bh, 0
0307   05D5 DD            push bl
0308   05D6 26 00 00      mov b, $0
0309   05D9 DD            push bl
0310   05DA 07 C7 20      call emit_byte
0311   05DD 51 02 00      add sp, 2
0312   05E0             ;; printx8(string_const[0]); 
0313   05E0 3B 19 3B      mov d, _string_const_data ; $string_const
0314   05E3 D7            push a         
0315   05E4 26 00 00      mov b, $0        
0316   05E7 5A            add d, b
0317   05E8 E4            pop a
0318   05E9 32            mov bl, [d]
0319   05EA A7 00         mov bh, 0
0320   05EC DD            push bl
0321   05ED 07 F5 2F      call printx8
0322   05F0 51 01 00      add sp, 1
0323   05F3 0A 23 06      jmp _if11_exit
0324   05F6             _if11_else:
0325   05F6             ;; if(toktype == INTEGER_CONST){ 
0326   05F6             _if12_cond:
0327   05F6 29 D5 3A      mov b, [_toktype] ; $toktype           
0328   05F9             ; START RELATIONAL
0329   05F9 D7            push a
0330   05FA 11            mov a, b
0331   05FB 26 05 00      mov b, 5; INTEGER_CONST
0332   05FE B0            cmp a, b
0333   05FF FD 71         seq ; ==
0334   0601 E4            pop a
0335   0602             ; END RELATIONAL
0336   0602 C0 00 00      cmp b, 0
0337   0605 C6 23 06      je _if12_exit
0338   0608             _if12_true:
0339   0608             ;; emit_byte(int_const, 0); 
0340   0608 29 19 3C      mov b, [_int_const] ; $int_const           
0341   060B DD            push bl
0342   060C 26 00 00      mov b, $0
0343   060F DD            push bl
0344   0610 07 C7 20      call emit_byte
0345   0613 51 02 00      add sp, 2
0346   0616             ;; printx8(int_const); 
0347   0616 29 19 3C      mov b, [_int_const] ; $int_const           
0348   0619 DD            push bl
0349   061A 07 F5 2F      call printx8
0350   061D 51 01 00      add sp, 1
0351   0620 0A 23 06      jmp _if12_exit
0352   0623             _if12_exit:
0353   0623             _if11_exit:
0354   0623             ;; get(); 
0355   0623 07 B1 23      call get
0356   0626             ;; if(tok != COMMA){ 
0357   0626             _if13_cond:
0358   0626 29 D3 3A      mov b, [_tok] ; $tok           
0359   0629             ; START RELATIONAL
0360   0629 D7            push a
0361   062A 11            mov a, b
0362   062B 26 0F 00      mov b, 15; COMMA
0363   062E B0            cmp a, b
0364   062F FD 72         sneq ; !=
0365   0631 E4            pop a
0366   0632             ; END RELATIONAL
0367   0632 C0 00 00      cmp b, 0
0368   0635 C6 41 06      je _if13_exit
0369   0638             _if13_true:
0370   0638             ;; back(); 
0371   0638 07 21 21      call back
0372   063B             ;; break; 
0373   063B 0A 50 06      jmp _for10_exit ; for break
0374   063E 0A 41 06      jmp _if13_exit
0375   0641             _if13_exit:
0376   0641             ;; print(", "); 
0377   0641 26 B9 3C      mov b, __s14 ; ", "
0378   0644 FD AB         swp b
0379   0646 D8            push b
0380   0647 07 FB 32      call print
0381   064A 51 02 00      add sp, 2
0382   064D             _for10_update:
0383   064D 0A B4 05      jmp _for10_cond
0384   0650             _for10_exit:
0385   0650             ;; print("\n"); 
0386   0650 26 6F 3C      mov b, __s9 ; "\n"
0387   0653 FD AB         swp b
0388   0655 D8            push b
0389   0656 07 FB 32      call print
0390   0659 51 02 00      add sp, 2
0391   065C 0A 3A 07      jmp _if9_exit
0392   065F             _if9_else:
0393   065F             ;; if(tok == DW){ 
0394   065F             _if14_cond:
0395   065F 29 D3 3A      mov b, [_tok] ; $tok           
0396   0662             ; START RELATIONAL
0397   0662 D7            push a
0398   0663 11            mov a, b
0399   0664 26 07 00      mov b, 7; DW
0400   0667 B0            cmp a, b
0401   0668 FD 71         seq ; ==
0402   066A E4            pop a
0403   066B             ; END RELATIONAL
0404   066B C0 00 00      cmp b, 0
0405   066E C6 3A 07      je _if14_exit
0406   0671             _if14_true:
0407   0671             ;; print(".dw: "); 
0408   0671 26 BC 3C      mov b, __s15 ; ".dw: "
0409   0674 FD AB         swp b
0410   0676 D8            push b
0411   0677 07 FB 32      call print
0412   067A 51 02 00      add sp, 2
0413   067D             ;; for(;;){ 
0414   067D             _for15_init:
0415   067D             _for15_cond:
0416   067D             _for15_block:
0417   067D             ;; get(); 
0418   067D 07 B1 23      call get
0419   0680             ;; if(toktype == CHAR_CONST){ 
0420   0680             _if16_cond:
0421   0680 29 D5 3A      mov b, [_toktype] ; $toktype           
0422   0683             ; START RELATIONAL
0423   0683 D7            push a
0424   0684 11            mov a, b
0425   0685 26 03 00      mov b, 3; CHAR_CONST
0426   0688 B0            cmp a, b
0427   0689 FD 71         seq ; ==
0428   068B E4            pop a
0429   068C             ; END RELATIONAL
0430   068C C0 00 00      cmp b, 0
0431   068F C6 CD 06      je _if16_else
0432   0692             _if16_true:
0433   0692             ;; emit_byte(string_const[0], 0); 
0434   0692 3B 19 3B      mov d, _string_const_data ; $string_const
0435   0695 D7            push a         
0436   0696 26 00 00      mov b, $0        
0437   0699 5A            add d, b
0438   069A E4            pop a
0439   069B 32            mov bl, [d]
0440   069C A7 00         mov bh, 0
0441   069E DD            push bl
0442   069F 26 00 00      mov b, $0
0443   06A2 DD            push bl
0444   06A3 07 C7 20      call emit_byte
0445   06A6 51 02 00      add sp, 2
0446   06A9             ;; emit_byte(0, 0); 
0447   06A9 26 00 00      mov b, $0
0448   06AC DD            push bl
0449   06AD 26 00 00      mov b, $0
0450   06B0 DD            push bl
0451   06B1 07 C7 20      call emit_byte
0452   06B4 51 02 00      add sp, 2
0453   06B7             ;; printx8(string_const[0]); 
0454   06B7 3B 19 3B      mov d, _string_const_data ; $string_const
0455   06BA D7            push a         
0456   06BB 26 00 00      mov b, $0        
0457   06BE 5A            add d, b
0458   06BF E4            pop a
0459   06C0 32            mov bl, [d]
0460   06C1 A7 00         mov bh, 0
0461   06C3 DD            push bl
0462   06C4 07 F5 2F      call printx8
0463   06C7 51 01 00      add sp, 1
0464   06CA 0A FE 06      jmp _if16_exit
0465   06CD             _if16_else:
0466   06CD             ;; if(toktype == INTEGER_CONST){ 
0467   06CD             _if17_cond:
0468   06CD 29 D5 3A      mov b, [_toktype] ; $toktype           
0469   06D0             ; START RELATIONAL
0470   06D0 D7            push a
0471   06D1 11            mov a, b
0472   06D2 26 05 00      mov b, 5; INTEGER_CONST
0473   06D5 B0            cmp a, b
0474   06D6 FD 71         seq ; ==
0475   06D8 E4            pop a
0476   06D9             ; END RELATIONAL
0477   06D9 C0 00 00      cmp b, 0
0478   06DC C6 FE 06      je _if17_exit
0479   06DF             _if17_true:
0480   06DF             ;; emit_word(int_const, 0); 
0481   06DF 29 19 3C      mov b, [_int_const] ; $int_const           
0482   06E2 FD AB         swp b
0483   06E4 D8            push b
0484   06E5 26 00 00      mov b, $0
0485   06E8 DD            push bl
0486   06E9 07 F5 20      call emit_word
0487   06EC 51 03 00      add sp, 3
0488   06EF             ;; printx16(int_const); 
0489   06EF 29 19 3C      mov b, [_int_const] ; $int_const           
0490   06F2 FD AB         swp b
0491   06F4 D8            push b
0492   06F5 07 EA 2F      call printx16
0493   06F8 51 02 00      add sp, 2
0494   06FB 0A FE 06      jmp _if17_exit
0495   06FE             _if17_exit:
0496   06FE             _if16_exit:
0497   06FE             ;; get(); 
0498   06FE 07 B1 23      call get
0499   0701             ;; if(tok != COMMA){ 
0500   0701             _if18_cond:
0501   0701 29 D3 3A      mov b, [_tok] ; $tok           
0502   0704             ; START RELATIONAL
0503   0704 D7            push a
0504   0705 11            mov a, b
0505   0706 26 0F 00      mov b, 15; COMMA
0506   0709 B0            cmp a, b
0507   070A FD 72         sneq ; !=
0508   070C E4            pop a
0509   070D             ; END RELATIONAL
0510   070D C0 00 00      cmp b, 0
0511   0710 C6 1C 07      je _if18_exit
0512   0713             _if18_true:
0513   0713             ;; back(); 
0514   0713 07 21 21      call back
0515   0716             ;; break; 
0516   0716 0A 2B 07      jmp _for15_exit ; for break
0517   0719 0A 1C 07      jmp _if18_exit
0518   071C             _if18_exit:
0519   071C             ;; print(", "); 
0520   071C 26 B9 3C      mov b, __s14 ; ", "
0521   071F FD AB         swp b
0522   0721 D8            push b
0523   0722 07 FB 32      call print
0524   0725 51 02 00      add sp, 2
0525   0728             _for15_update:
0526   0728 0A 7D 06      jmp _for15_cond
0527   072B             _for15_exit:
0528   072B             ;; print("\n"); 
0529   072B 26 6F 3C      mov b, __s9 ; "\n"
0530   072E FD AB         swp b
0531   0730 D8            push b
0532   0731 07 FB 32      call print
0533   0734 51 02 00      add sp, 2
0534   0737 0A 3A 07      jmp _if14_exit
0535   073A             _if14_exit:
0536   073A             _if9_exit:
0537   073A             _for7_update:
0538   073A 0A 7B 05      jmp _for7_cond
0539   073D             _for7_exit:
0540   073D             ;; print("Done.\n"); 
0541   073D 26 C2 3C      mov b, __s16 ; "Done.\n"
0542   0740 FD AB         swp b
0543   0742 D8            push b
0544   0743 07 FB 32      call print
0545   0746 51 02 00      add sp, 2
0546   0749 F9            leave
0547   074A 09            ret
0548   074B             
0549   074B             parse_directive:
0550   074B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0551   074E             ;; get(); 
0552   074E 07 B1 23      call get
0553   0751             ;; if(tok == ORG){ 
0554   0751             _if19_cond:
0555   0751 29 D3 3A      mov b, [_tok] ; $tok           
0556   0754             ; START RELATIONAL
0557   0754 D7            push a
0558   0755 11            mov a, b
0559   0756 26 01 00      mov b, 1; ORG
0560   0759 B0            cmp a, b
0561   075A FD 71         seq ; ==
0562   075C E4            pop a
0563   075D             ; END RELATIONAL
0564   075D C0 00 00      cmp b, 0
0565   0760 C6 92 07      je _if19_else
0566   0763             _if19_true:
0567   0763             ;; get(); 
0568   0763 07 B1 23      call get
0569   0766             ;; if(toktype != INTEGER_CONST) error("Integer constant expected in .org directive."); 
0570   0766             _if20_cond:
0571   0766 29 D5 3A      mov b, [_toktype] ; $toktype           
0572   0769             ; START RELATIONAL
0573   0769 D7            push a
0574   076A 11            mov a, b
0575   076B 26 05 00      mov b, 5; INTEGER_CONST
0576   076E B0            cmp a, b
0577   076F FD 72         sneq ; !=
0578   0771 E4            pop a
0579   0772             ; END RELATIONAL
0580   0772 C0 00 00      cmp b, 0
0581   0775 C6 87 07      je _if20_exit
0582   0778             _if20_true:
0583   0778             ;; error("Integer constant expected in .org directive."); 
0584   0778 26 C9 3C      mov b, __s17 ; "Integer constant expected in .org directive."
0585   077B FD AB         swp b
0586   077D D8            push b
0587   077E 07 6B 2E      call error
0588   0781 51 02 00      add sp, 2
0589   0784 0A 87 07      jmp _if20_exit
0590   0787             _if20_exit:
0591   0787             ;; _org = int_const; 
0592   0787 3B CE 3A      mov d, __org ; $_org         
0593   078A 29 19 3C      mov b, [_int_const] ; $int_const                   
0594   078D FD 43         mov [d], b
0595   078F 0A BA 08      jmp _if19_exit
0596   0792             _if19_else:
0597   0792             ;; if(tok == DB){ 
0598   0792             _if21_cond:
0599   0792 29 D3 3A      mov b, [_tok] ; $tok           
0600   0795             ; START RELATIONAL
0601   0795 D7            push a
0602   0796 11            mov a, b
0603   0797 26 06 00      mov b, 6; DB
0604   079A B0            cmp a, b
0605   079B FD 71         seq ; ==
0606   079D E4            pop a
0607   079E             ; END RELATIONAL
0608   079E C0 00 00      cmp b, 0
0609   07A1 C6 1E 08      je _if21_else
0610   07A4             _if21_true:
0611   07A4             ;; for(;;){ 
0612   07A4             _for22_init:
0613   07A4             _for22_cond:
0614   07A4             _for22_block:
0615   07A4             ;; get(); 
0616   07A4 07 B1 23      call get
0617   07A7             ;; if(toktype == CHAR_CONST){ 
0618   07A7             _if23_cond:
0619   07A7 29 D5 3A      mov b, [_toktype] ; $toktype           
0620   07AA             ; START RELATIONAL
0621   07AA D7            push a
0622   07AB 11            mov a, b
0623   07AC 26 03 00      mov b, 3; CHAR_CONST
0624   07AF B0            cmp a, b
0625   07B0 FD 71         seq ; ==
0626   07B2 E4            pop a
0627   07B3             ; END RELATIONAL
0628   07B3 C0 00 00      cmp b, 0
0629   07B6 C6 D5 07      je _if23_else
0630   07B9             _if23_true:
0631   07B9             ;; emit_byte(string_const[0], emit_override); 
0632   07B9 3B 19 3B      mov d, _string_const_data ; $string_const
0633   07BC D7            push a         
0634   07BD 26 00 00      mov b, $0        
0635   07C0 5A            add d, b
0636   07C1 E4            pop a
0637   07C2 32            mov bl, [d]
0638   07C3 A7 00         mov bh, 0
0639   07C5 DD            push bl
0640   07C6 34 05 00      mov bl, [bp + 5] ; $emit_override
0641   07C9 A7 00         mov bh, 0             
0642   07CB DD            push bl
0643   07CC 07 C7 20      call emit_byte
0644   07CF 51 02 00      add sp, 2
0645   07D2 0A FA 07      jmp _if23_exit
0646   07D5             _if23_else:
0647   07D5             ;; if(toktype == INTEGER_CONST){ 
0648   07D5             _if24_cond:
0649   07D5 29 D5 3A      mov b, [_toktype] ; $toktype           
0650   07D8             ; START RELATIONAL
0651   07D8 D7            push a
0652   07D9 11            mov a, b
0653   07DA 26 05 00      mov b, 5; INTEGER_CONST
0654   07DD B0            cmp a, b
0655   07DE FD 71         seq ; ==
0656   07E0 E4            pop a
0657   07E1             ; END RELATIONAL
0658   07E1 C0 00 00      cmp b, 0
0659   07E4 C6 FA 07      je _if24_exit
0660   07E7             _if24_true:
0661   07E7             ;; emit_byte(int_const, emit_override); 
0662   07E7 29 19 3C      mov b, [_int_const] ; $int_const           
0663   07EA DD            push bl
0664   07EB 34 05 00      mov bl, [bp + 5] ; $emit_override
0665   07EE A7 00         mov bh, 0             
0666   07F0 DD            push bl
0667   07F1 07 C7 20      call emit_byte
0668   07F4 51 02 00      add sp, 2
0669   07F7 0A FA 07      jmp _if24_exit
0670   07FA             _if24_exit:
0671   07FA             _if23_exit:
0672   07FA             ;; get(); 
0673   07FA 07 B1 23      call get
0674   07FD             ;; if(tok != COMMA){ 
0675   07FD             _if25_cond:
0676   07FD 29 D3 3A      mov b, [_tok] ; $tok           
0677   0800             ; START RELATIONAL
0678   0800 D7            push a
0679   0801 11            mov a, b
0680   0802 26 0F 00      mov b, 15; COMMA
0681   0805 B0            cmp a, b
0682   0806 FD 72         sneq ; !=
0683   0808 E4            pop a
0684   0809             ; END RELATIONAL
0685   0809 C0 00 00      cmp b, 0
0686   080C C6 18 08      je _if25_exit
0687   080F             _if25_true:
0688   080F             ;; back(); 
0689   080F 07 21 21      call back
0690   0812             ;; break; 
0691   0812 0A 1B 08      jmp _for22_exit ; for break
0692   0815 0A 18 08      jmp _if25_exit
0693   0818             _if25_exit:
0694   0818             _for22_update:
0695   0818 0A A4 07      jmp _for22_cond
0696   081B             _for22_exit:
0697   081B 0A BA 08      jmp _if21_exit
0698   081E             _if21_else:
0699   081E             ;; if(tok == DW){ 
0700   081E             _if26_cond:
0701   081E 29 D3 3A      mov b, [_tok] ; $tok           
0702   0821             ; START RELATIONAL
0703   0821 D7            push a
0704   0822 11            mov a, b
0705   0823 26 07 00      mov b, 7; DW
0706   0826 B0            cmp a, b
0707   0827 FD 71         seq ; ==
0708   0829 E4            pop a
0709   082A             ; END RELATIONAL
0710   082A C0 00 00      cmp b, 0
0711   082D C6 BA 08      je _if26_exit
0712   0830             _if26_true:
0713   0830             ;; for(;;){ 
0714   0830             _for27_init:
0715   0830             _for27_cond:
0716   0830             _for27_block:
0717   0830             ;; get(); 
0718   0830 07 B1 23      call get
0719   0833             ;; if(toktype == CHAR_CONST){ 
0720   0833             _if28_cond:
0721   0833 29 D5 3A      mov b, [_toktype] ; $toktype           
0722   0836             ; START RELATIONAL
0723   0836 D7            push a
0724   0837 11            mov a, b
0725   0838 26 03 00      mov b, 3; CHAR_CONST
0726   083B B0            cmp a, b
0727   083C FD 71         seq ; ==
0728   083E E4            pop a
0729   083F             ; END RELATIONAL
0730   083F C0 00 00      cmp b, 0
0731   0842 C6 71 08      je _if28_else
0732   0845             _if28_true:
0733   0845             ;; emit_byte(string_const[0], emit_override); 
0734   0845 3B 19 3B      mov d, _string_const_data ; $string_const
0735   0848 D7            push a         
0736   0849 26 00 00      mov b, $0        
0737   084C 5A            add d, b
0738   084D E4            pop a
0739   084E 32            mov bl, [d]
0740   084F A7 00         mov bh, 0
0741   0851 DD            push bl
0742   0852 34 05 00      mov bl, [bp + 5] ; $emit_override
0743   0855 A7 00         mov bh, 0             
0744   0857 DD            push bl
0745   0858 07 C7 20      call emit_byte
0746   085B 51 02 00      add sp, 2
0747   085E             ;; emit_byte(0, emit_override); 
0748   085E 26 00 00      mov b, $0
0749   0861 DD            push bl
0750   0862 34 05 00      mov bl, [bp + 5] ; $emit_override
0751   0865 A7 00         mov bh, 0             
0752   0867 DD            push bl
0753   0868 07 C7 20      call emit_byte
0754   086B 51 02 00      add sp, 2
0755   086E 0A 96 08      jmp _if28_exit
0756   0871             _if28_else:
0757   0871             ;; if(toktype == INTEGER_CONST){ 
0758   0871             _if29_cond:
0759   0871 29 D5 3A      mov b, [_toktype] ; $toktype           
0760   0874             ; START RELATIONAL
0761   0874 D7            push a
0762   0875 11            mov a, b
0763   0876 26 05 00      mov b, 5; INTEGER_CONST
0764   0879 B0            cmp a, b
0765   087A FD 71         seq ; ==
0766   087C E4            pop a
0767   087D             ; END RELATIONAL
0768   087D C0 00 00      cmp b, 0
0769   0880 C6 96 08      je _if29_exit
0770   0883             _if29_true:
0771   0883             ;; emit_word(int_const, 0); 
0772   0883 29 19 3C      mov b, [_int_const] ; $int_const           
0773   0886 FD AB         swp b
0774   0888 D8            push b
0775   0889 26 00 00      mov b, $0
0776   088C DD            push bl
0777   088D 07 F5 20      call emit_word
0778   0890 51 03 00      add sp, 3
0779   0893 0A 96 08      jmp _if29_exit
0780   0896             _if29_exit:
0781   0896             _if28_exit:
0782   0896             ;; get(); 
0783   0896 07 B1 23      call get
0784   0899             ;; if(tok != COMMA){ 
0785   0899             _if30_cond:
0786   0899 29 D3 3A      mov b, [_tok] ; $tok           
0787   089C             ; START RELATIONAL
0788   089C D7            push a
0789   089D 11            mov a, b
0790   089E 26 0F 00      mov b, 15; COMMA
0791   08A1 B0            cmp a, b
0792   08A2 FD 72         sneq ; !=
0793   08A4 E4            pop a
0794   08A5             ; END RELATIONAL
0795   08A5 C0 00 00      cmp b, 0
0796   08A8 C6 B4 08      je _if30_exit
0797   08AB             _if30_true:
0798   08AB             ;; back(); 
0799   08AB 07 21 21      call back
0800   08AE             ;; break; 
0801   08AE 0A B7 08      jmp _for27_exit ; for break
0802   08B1 0A B4 08      jmp _if30_exit
0803   08B4             _if30_exit:
0804   08B4             _for27_update:
0805   08B4 0A 30 08      jmp _for27_cond
0806   08B7             _for27_exit:
0807   08B7 0A BA 08      jmp _if26_exit
0808   08BA             _if26_exit:
0809   08BA             _if21_exit:
0810   08BA             _if19_exit:
0811   08BA F9            leave
0812   08BB 09            ret
0813   08BC             
0814   08BC             label_directive_scan:
0815   08BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0816   08BF             ; $temp_prog 
0817   08BF             ; $i 
0818   08BF 52 04 00      sub sp, 4
0819   08C2             ;; prog = program; 
0820   08C2 3B D7 3A      mov d, _prog ; $prog         
0821   08C5 29 1B 3C      mov b, [_program] ; $program                   
0822   08C8 FD 43         mov [d], b
0823   08CA             ;; bin_p = bin_out + _org; 
0824   08CA 3B 1F 3C      mov d, _bin_p ; $bin_p         
0825   08CD 29 1D 3C      mov b, [_bin_out] ; $bin_out           
0826   08D0             ; START TERMS
0827   08D0 D7            push a
0828   08D1 11            mov a, b
0829   08D2 29 CE 3A      mov b, [__org] ; $_org           
0830   08D5 54            add a, b
0831   08D6 27            mov b, a
0832   08D7 E4            pop a
0833   08D8             ; END TERMS        
0834   08D8 FD 43         mov [d], b
0835   08DA             ;; pc = _org; 
0836   08DA 3B D0 3A      mov d, _pc ; $pc         
0837   08DD 29 CE 3A      mov b, [__org] ; $_org                   
0838   08E0 FD 43         mov [d], b
0839   08E2             ;; print("Parsing labels and directives...\n"); 
0840   08E2 26 F6 3C      mov b, __s18 ; "Parsing labels and directives...\n"
0841   08E5 FD AB         swp b
0842   08E7 D8            push b
0843   08E8 07 FB 32      call print
0844   08EB 51 02 00      add sp, 2
0845   08EE             ;; for(;;){ 
0846   08EE             _for31_init:
0847   08EE             _for31_cond:
0848   08EE             _for31_block:
0849   08EE             ;; get(); back(); 
0850   08EE 07 B1 23      call get
0851   08F1             ;; back(); 
0852   08F1 07 21 21      call back
0853   08F4             ;; temp_prog = prog; 
0854   08F4 FA FF FF      lea d, [bp + -1] ; $temp_prog         
0855   08F7 29 D7 3A      mov b, [_prog] ; $prog                   
0856   08FA FD 43         mov [d], b
0857   08FC             ;; get(); 
0858   08FC 07 B1 23      call get
0859   08FF             ;; if(toktype == END) break; 
0860   08FF             _if32_cond:
0861   08FF 29 D5 3A      mov b, [_toktype] ; $toktype           
0862   0902             ; START RELATIONAL
0863   0902 D7            push a
0864   0903 11            mov a, b
0865   0904 26 07 00      mov b, 7; END
0866   0907 B0            cmp a, b
0867   0908 FD 71         seq ; ==
0868   090A E4            pop a
0869   090B             ; END RELATIONAL
0870   090B C0 00 00      cmp b, 0
0871   090E C6 17 09      je _if32_exit
0872   0911             _if32_true:
0873   0911             ;; break; 
0874   0911 0A B6 09      jmp _for31_exit ; for break
0875   0914 0A 17 09      jmp _if32_exit
0876   0917             _if32_exit:
0877   0917             ;; if(tok == DOT){ 
0878   0917             _if33_cond:
0879   0917 29 D3 3A      mov b, [_tok] ; $tok           
0880   091A             ; START RELATIONAL
0881   091A D7            push a
0882   091B 11            mov a, b
0883   091C 26 10 00      mov b, 16; DOT
0884   091F B0            cmp a, b
0885   0920 FD 71         seq ; ==
0886   0922 E4            pop a
0887   0923             ; END RELATIONAL
0888   0923 C0 00 00      cmp b, 0
0889   0926 C6 51 09      je _if33_else
0890   0929             _if33_true:
0891   0929             ;; get(); 
0892   0929 07 B1 23      call get
0893   092C             ;; if(is_directive(token)){ 
0894   092C             _if34_cond:
0895   092C 26 D9 3A      mov b, _token_data ; $token           
0896   092F FD AB         swp b
0897   0931 D8            push b
0898   0932 07 AE 1B      call is_directive
0899   0935 51 02 00      add sp, 2
0900   0938 C0 00 00      cmp b, 0
0901   093B C6 4E 09      je _if34_exit
0902   093E             _if34_true:
0903   093E             ;; back(); 
0904   093E 07 21 21      call back
0905   0941             ;; parse_directive(1); 
0906   0941 26 01 00      mov b, $1
0907   0944 DD            push bl
0908   0945 07 4B 07      call parse_directive
0909   0948 51 01 00      add sp, 1
0910   094B 0A 4E 09      jmp _if34_exit
0911   094E             _if34_exit:
0912   094E 0A B3 09      jmp _if33_exit
0913   0951             _if33_else:
0914   0951             ;; if(toktype == IDENTIFIER){ 
0915   0951             _if35_cond:
0916   0951 29 D5 3A      mov b, [_toktype] ; $toktype           
0917   0954             ; START RELATIONAL
0918   0954 D7            push a
0919   0955 11            mov a, b
0920   0956 26 06 00      mov b, 6; IDENTIFIER
0921   0959 B0            cmp a, b
0922   095A FD 71         seq ; ==
0923   095C E4            pop a
0924   095D             ; END RELATIONAL
0925   095D C0 00 00      cmp b, 0
0926   0960 C6 B3 09      je _if35_exit
0927   0963             _if35_true:
0928   0963             ;; get(); 
0929   0963 07 B1 23      call get
0930   0966             ;; if(tok == COLON){ 
0931   0966             _if36_cond:
0932   0966 29 D3 3A      mov b, [_tok] ; $tok           
0933   0969             ; START RELATIONAL
0934   0969 D7            push a
0935   096A 11            mov a, b
0936   096B 26 0D 00      mov b, 13; COLON
0937   096E B0            cmp a, b
0938   096F FD 71         seq ; ==
0939   0971 E4            pop a
0940   0972             ; END RELATIONAL
0941   0972 C0 00 00      cmp b, 0
0942   0975 C6 92 09      je _if36_else
0943   0978             _if36_true:
0944   0978             ;; prog = temp_prog; 
0945   0978 3B D7 3A      mov d, _prog ; $prog         
0946   097B 2C FF FF      mov b, [bp + -1] ; $temp_prog                     
0947   097E FD 43         mov [d], b
0948   0980             ;; parse_label(); 
0949   0980 07 E6 1B      call parse_label
0950   0983             ;; print("."); 
0951   0983 26 18 3D      mov b, __s19 ; "."
0952   0986 FD AB         swp b
0953   0988 D8            push b
0954   0989 07 FB 32      call print
0955   098C 51 02 00      add sp, 2
0956   098F 0A B0 09      jmp _if36_exit
0957   0992             _if36_else:
0958   0992             ;; prog = temp_prog; 
0959   0992 3B D7 3A      mov d, _prog ; $prog         
0960   0995 2C FF FF      mov b, [bp + -1] ; $temp_prog                     
0961   0998 FD 43         mov [d], b
0962   099A             ;; parse_instr(1);       
0963   099A 26 01 00      mov b, $1
0964   099D DD            push bl
0965   099E 07 B0 0F      call parse_instr
0966   09A1 51 01 00      add sp, 1
0967   09A4             ;; print("."); 
0968   09A4 26 18 3D      mov b, __s19 ; "."
0969   09A7 FD AB         swp b
0970   09A9 D8            push b
0971   09AA 07 FB 32      call print
0972   09AD 51 02 00      add sp, 2
0973   09B0             _if36_exit:
0974   09B0 0A B3 09      jmp _if35_exit
0975   09B3             _if35_exit:
0976   09B3             _if33_exit:
0977   09B3             _for31_update:
0978   09B3 0A EE 08      jmp _for31_cond
0979   09B6             _for31_exit:
0980   09B6             ;; print("\nDone.\n"); 
0981   09B6 26 1A 3D      mov b, __s20 ; "\nDone.\n"
0982   09B9 FD AB         swp b
0983   09BB D8            push b
0984   09BC 07 FB 32      call print
0985   09BF 51 02 00      add sp, 2
0986   09C2             ;; print_info2("Org: ", _org, "\n"); 
0987   09C2 26 22 3D      mov b, __s21 ; "Org: "
0988   09C5 FD AB         swp b
0989   09C7 D8            push b
0990   09C8 29 CE 3A      mov b, [__org] ; $_org           
0991   09CB FD AB         swp b
0992   09CD D8            push b
0993   09CE 26 6F 3C      mov b, __s9 ; "\n"
0994   09D1 FD AB         swp b
0995   09D3 D8            push b
0996   09D4 07 DD 1D      call print_info2
0997   09D7 51 06 00      add sp, 6
0998   09DA             ;; print("\nLabels list:\n"); 
0999   09DA 26 28 3D      mov b, __s22 ; "\nLabels list:\n"
1000   09DD FD AB         swp b
1001   09DF D8            push b
1002   09E0 07 FB 32      call print
1003   09E3 51 02 00      add sp, 2
1004   09E6             ;; for(i = 0; label_table[i].name[0]; i++){ 
1005   09E6             _for37_init:
1006   09E6 FA FD FF      lea d, [bp + -3] ; $i         
1007   09E9 26 00 00      mov b, $0        
1008   09EC FD 43         mov [d], b
1009   09EE             _for37_cond:
1010   09EE 3B AE 39      mov d, _label_table_data ; $label_table
1011   09F1 D7            push a         
1012   09F2 2C FD FF      mov b, [bp + -3] ; $i                     
1013   09F5 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1014   09F9 E4            pop a
1015   09FA 58 00 00      add d, 0
1016   09FD FD 14         clb
1017   09FF D7            push a         
1018   0A00 26 00 00      mov b, $0        
1019   0A03 5A            add d, b
1020   0A04 E4            pop a
1021   0A05 32            mov bl, [d]
1022   0A06 A7 00         mov bh, 0
1023   0A08 C0 00 00      cmp b, 0
1024   0A0B C6 6D 0A      je _for37_exit
1025   0A0E             _for37_block:
1026   0A0E             ;; print(label_table[i].name); 
1027   0A0E 3B AE 39      mov d, _label_table_data ; $label_table
1028   0A11 D7            push a         
1029   0A12 2C FD FF      mov b, [bp + -3] ; $i                     
1030   0A15 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1031   0A19 E4            pop a
1032   0A1A 58 00 00      add d, 0
1033   0A1D FD 14         clb
1034   0A1F 2D            mov b, d
1035   0A20 FD AB         swp b
1036   0A22 D8            push b
1037   0A23 07 FB 32      call print
1038   0A26 51 02 00      add sp, 2
1039   0A29             ;; print(": "); 
1040   0A29 26 37 3D      mov b, __s23 ; ": "
1041   0A2C FD AB         swp b
1042   0A2E D8            push b
1043   0A2F 07 FB 32      call print
1044   0A32 51 02 00      add sp, 2
1045   0A35             ;; printx16(label_table[i].address); 
1046   0A35 3B AE 39      mov d, _label_table_data ; $label_table
1047   0A38 D7            push a         
1048   0A39 2C FD FF      mov b, [bp + -3] ; $i                     
1049   0A3C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1050   0A40 E4            pop a
1051   0A41 58 10 00      add d, 16
1052   0A44 FD 14         clb
1053   0A46 2A            mov b, [d]
1054   0A47 FD AB         swp b
1055   0A49 D8            push b
1056   0A4A 07 EA 2F      call printx16
1057   0A4D 51 02 00      add sp, 2
1058   0A50             ;; print("\n"); 
1059   0A50 26 6F 3C      mov b, __s9 ; "\n"
1060   0A53 FD AB         swp b
1061   0A55 D8            push b
1062   0A56 07 FB 32      call print
1063   0A59 51 02 00      add sp, 2
1064   0A5C             _for37_update:
1065   0A5C 2C FD FF      mov b, [bp + -3] ; $i             
1066   0A5F FD 79         mov g, b
1067   0A61 FD 77         inc b
1068   0A63 FA FD FF      lea d, [bp + -3] ; $i
1069   0A66 FD 43         mov [d], b
1070   0A68 FD 27         mov b, g
1071   0A6A 0A EE 09      jmp _for37_cond
1072   0A6D             _for37_exit:
1073   0A6D             ;; print("\n"); 
1074   0A6D 26 6F 3C      mov b, __s9 ; "\n"
1075   0A70 FD AB         swp b
1076   0A72 D8            push b
1077   0A73 07 FB 32      call print
1078   0A76 51 02 00      add sp, 2
1079   0A79 F9            leave
1080   0A7A 09            ret
1081   0A7B             
1082   0A7B             label_parse_instr:
1083   0A7B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1084   0A7E             ; $opcode 
1085   0A7E             ; $code_line 
1086   0A7E             ; $op 
1087   0A7E             ; $num_operands 
1088   0A7E             ; $num_operandsexp 
1089   0A7E             ; $i 
1090   0A7E             ; $j 
1091   0A7E             ; $operand_types 
1092   0A7E             ; $old_pc 
1093   0A7E             ; $has_operands 
1094   0A7E 52 88 00      sub sp, 136
1095   0A81             ;; old_pc = pc; 
1096   0A81 FA 7A FF      lea d, [bp + -134] ; $old_pc         
1097   0A84 29 D0 3A      mov b, [_pc] ; $pc                   
1098   0A87 FD 43         mov [d], b
1099   0A89             ;; get_line(); 
1100   0A89 07 E3 22      call get_line
1101   0A8C             ;; push_prog(); 
1102   0A8C 07 CF 2E      call push_prog
1103   0A8F             ;; strcpy(code_line, string_const); 
1104   0A8F FA A1 FF      lea d, [bp + -95] ; $code_line
1105   0A92 2D            mov b, d
1106   0A93 FD AB         swp b
1107   0A95 D8            push b
1108   0A96 26 19 3B      mov b, _string_const_data ; $string_const           
1109   0A99 FD AB         swp b
1110   0A9B D8            push b
1111   0A9C 07 A2 33      call strcpy
1112   0A9F 51 04 00      add sp, 4
1113   0AA2             ;; has_operands = 0; 
1114   0AA2 FA 79 FF      lea d, [bp + -135] ; $has_operands         
1115   0AA5 26 00 00      mov b, $0        
1116   0AA8 FD 3E         mov [d], bl
1117   0AAA             ;; prog = code_line; 
1118   0AAA 3B D7 3A      mov d, _prog ; $prog
1119   0AAD DA            push d
1120   0AAE FA A1 FF      lea d, [bp + -95] ; $code_line
1121   0AB1 2D            mov b, d
1122   0AB2 E7            pop d
1123   0AB3 FD 43         mov [d], b
1124   0AB5             ;; get(); // get main opcode 
1125   0AB5 07 B1 23      call get
1126   0AB8             ;; for(;;){ 
1127   0AB8             _for38_init:
1128   0AB8             _for38_cond:
1129   0AB8             _for38_block:
1130   0AB8             ;; get(); 
1131   0AB8 07 B1 23      call get
1132   0ABB             ;; if(toktype == END) break; 
1133   0ABB             _if39_cond:
1134   0ABB 29 D5 3A      mov b, [_toktype] ; $toktype           
1135   0ABE             ; START RELATIONAL
1136   0ABE D7            push a
1137   0ABF 11            mov a, b
1138   0AC0 26 07 00      mov b, 7; END
1139   0AC3 B0            cmp a, b
1140   0AC4 FD 71         seq ; ==
1141   0AC6 E4            pop a
1142   0AC7             ; END RELATIONAL
1143   0AC7 C0 00 00      cmp b, 0
1144   0ACA C6 D3 0A      je _if39_exit
1145   0ACD             _if39_true:
1146   0ACD             ;; break; 
1147   0ACD 0A 1D 0B      jmp _for38_exit ; for break
1148   0AD0 0A D3 0A      jmp _if39_exit
1149   0AD3             _if39_exit:
1150   0AD3             ;; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1151   0AD3             _if40_cond:
1152   0AD3 29 D5 3A      mov b, [_toktype] ; $toktype           
1153   0AD6             ; START RELATIONAL
1154   0AD6 D7            push a
1155   0AD7 11            mov a, b
1156   0AD8 26 05 00      mov b, 5; INTEGER_CONST
1157   0ADB B0            cmp a, b
1158   0ADC FD 71         seq ; ==
1159   0ADE E4            pop a
1160   0ADF             ; END RELATIONAL
1161   0ADF D7            push a
1162   0AE0 11            mov a, b
1163   0AE1 29 D5 3A      mov b, [_toktype] ; $toktype           
1164   0AE4             ; START RELATIONAL
1165   0AE4 D7            push a
1166   0AE5 11            mov a, b
1167   0AE6 26 06 00      mov b, 6; IDENTIFIER
1168   0AE9 B0            cmp a, b
1169   0AEA FD 71         seq ; ==
1170   0AEC E4            pop a
1171   0AED             ; END RELATIONAL
1172   0AED D7            push a
1173   0AEE 11            mov a, b
1174   0AEF 26 D9 3A      mov b, _token_data ; $token           
1175   0AF2 FD AB         swp b
1176   0AF4 D8            push b
1177   0AF5 07 20 19      call is_reserved
1178   0AF8 51 02 00      add sp, 2
1179   0AFB C0 00 00      cmp b, 0
1180   0AFE FD 71         seq ; !
1181   0B00 FD A7         sand a, b ; &&
1182   0B02 E4            pop a
1183   0B03 FD A8         sor a, b ; ||
1184   0B05 E4            pop a
1185   0B06 C0 00 00      cmp b, 0
1186   0B09 C6 1A 0B      je _if40_exit
1187   0B0C             _if40_true:
1188   0B0C             ;; has_operands = 1; 
1189   0B0C FA 79 FF      lea d, [bp + -135] ; $has_operands         
1190   0B0F 26 01 00      mov b, $1        
1191   0B12 FD 3E         mov [d], bl
1192   0B14             ;; break; 
1193   0B14 0A 1D 0B      jmp _for38_exit ; for break
1194   0B17 0A 1A 0B      jmp _if40_exit
1195   0B1A             _if40_exit:
1196   0B1A             _for38_update:
1197   0B1A 0A B8 0A      jmp _for38_cond
1198   0B1D             _for38_exit:
1199   0B1D             ;; opcode[0] = '\0'; 
1200   0B1D FA E1 FF      lea d, [bp + -31] ; $opcode
1201   0B20 D7            push a         
1202   0B21 26 00 00      mov b, $0        
1203   0B24 5A            add d, b
1204   0B25 E4            pop a         
1205   0B26 26 00 00      mov b, $0        
1206   0B29 FD 3E         mov [d], bl
1207   0B2B             ;; prog = code_line; 
1208   0B2B 3B D7 3A      mov d, _prog ; $prog
1209   0B2E DA            push d
1210   0B2F FA A1 FF      lea d, [bp + -95] ; $code_line
1211   0B32 2D            mov b, d
1212   0B33 E7            pop d
1213   0B34 FD 43         mov [d], b
1214   0B36             ;; if(!has_operands){ 
1215   0B36             _if41_cond:
1216   0B36 34 79 FF      mov bl, [bp + -135] ; $has_operands
1217   0B39 A7 00         mov bh, 0             
1218   0B3B C0 00 00      cmp b, 0
1219   0B3E FD 71         seq ; !
1220   0B40 C0 00 00      cmp b, 0
1221   0B43 C6 24 0C      je _if41_else
1222   0B46             _if41_true:
1223   0B46             ;; get(); 
1224   0B46 07 B1 23      call get
1225   0B49             ;; strcpy(opcode, token); 
1226   0B49 FA E1 FF      lea d, [bp + -31] ; $opcode
1227   0B4C 2D            mov b, d
1228   0B4D FD AB         swp b
1229   0B4F D8            push b
1230   0B50 26 D9 3A      mov b, _token_data ; $token           
1231   0B53 FD AB         swp b
1232   0B55 D8            push b
1233   0B56 07 A2 33      call strcpy
1234   0B59 51 04 00      add sp, 4
1235   0B5C             ;; get();  
1236   0B5C 07 B1 23      call get
1237   0B5F             ;; if(toktype == END){ 
1238   0B5F             _if42_cond:
1239   0B5F 29 D5 3A      mov b, [_toktype] ; $toktype           
1240   0B62             ; START RELATIONAL
1241   0B62 D7            push a
1242   0B63 11            mov a, b
1243   0B64 26 07 00      mov b, 7; END
1244   0B67 B0            cmp a, b
1245   0B68 FD 71         seq ; ==
1246   0B6A E4            pop a
1247   0B6B             ; END RELATIONAL
1248   0B6B C0 00 00      cmp b, 0
1249   0B6E C6 87 0B      je _if42_else
1250   0B71             _if42_true:
1251   0B71             ;; strcat(opcode, " ."); 
1252   0B71 FA E1 FF      lea d, [bp + -31] ; $opcode
1253   0B74 2D            mov b, d
1254   0B75 FD AB         swp b
1255   0B77 D8            push b
1256   0B78 26 3A 3D      mov b, __s24 ; " ."
1257   0B7B FD AB         swp b
1258   0B7D D8            push b
1259   0B7E 07 5B 34      call strcat
1260   0B81 51 04 00      add sp, 4
1261   0B84 0A DE 0B      jmp _if42_exit
1262   0B87             _if42_else:
1263   0B87             ;; strcat(opcode, " "); 
1264   0B87 FA E1 FF      lea d, [bp + -31] ; $opcode
1265   0B8A 2D            mov b, d
1266   0B8B FD AB         swp b
1267   0B8D D8            push b
1268   0B8E 26 3D 3D      mov b, __s25 ; " "
1269   0B91 FD AB         swp b
1270   0B93 D8            push b
1271   0B94 07 5B 34      call strcat
1272   0B97 51 04 00      add sp, 4
1273   0B9A             ;; strcat(opcode, token); 
1274   0B9A FA E1 FF      lea d, [bp + -31] ; $opcode
1275   0B9D 2D            mov b, d
1276   0B9E FD AB         swp b
1277   0BA0 D8            push b
1278   0BA1 26 D9 3A      mov b, _token_data ; $token           
1279   0BA4 FD AB         swp b
1280   0BA6 D8            push b
1281   0BA7 07 5B 34      call strcat
1282   0BAA 51 04 00      add sp, 4
1283   0BAD             ;; for(;;){ 
1284   0BAD             _for43_init:
1285   0BAD             _for43_cond:
1286   0BAD             _for43_block:
1287   0BAD             ;; get(); 
1288   0BAD 07 B1 23      call get
1289   0BB0             ;; if(toktype == END) break; 
1290   0BB0             _if44_cond:
1291   0BB0 29 D5 3A      mov b, [_toktype] ; $toktype           
1292   0BB3             ; START RELATIONAL
1293   0BB3 D7            push a
1294   0BB4 11            mov a, b
1295   0BB5 26 07 00      mov b, 7; END
1296   0BB8 B0            cmp a, b
1297   0BB9 FD 71         seq ; ==
1298   0BBB E4            pop a
1299   0BBC             ; END RELATIONAL
1300   0BBC C0 00 00      cmp b, 0
1301   0BBF C6 C8 0B      je _if44_exit
1302   0BC2             _if44_true:
1303   0BC2             ;; break; 
1304   0BC2 0A DE 0B      jmp _for43_exit ; for break
1305   0BC5 0A C8 0B      jmp _if44_exit
1306   0BC8             _if44_exit:
1307   0BC8             ;; strcat(opcode, token); 
1308   0BC8 FA E1 FF      lea d, [bp + -31] ; $opcode
1309   0BCB 2D            mov b, d
1310   0BCC FD AB         swp b
1311   0BCE D8            push b
1312   0BCF 26 D9 3A      mov b, _token_data ; $token           
1313   0BD2 FD AB         swp b
1314   0BD4 D8            push b
1315   0BD5 07 5B 34      call strcat
1316   0BD8 51 04 00      add sp, 4
1317   0BDB             _for43_update:
1318   0BDB 0A AD 0B      jmp _for43_cond
1319   0BDE             _for43_exit:
1320   0BDE             _if42_exit:
1321   0BDE             ;; op = search_opcode(opcode); 
1322   0BDE FA 87 FF      lea d, [bp + -121] ; $op
1323   0BE1 DA            push d
1324   0BE2 FA E1 FF      lea d, [bp + -31] ; $opcode
1325   0BE5 2D            mov b, d
1326   0BE6 FD AB         swp b
1327   0BE8 D8            push b
1328   0BE9 07 15 1E      call search_opcode
1329   0BEC 51 02 00      add sp, 2
1330   0BEF E7            pop d
1331   0BF0 FD 28         mov si, b
1332   0BF2 FD 50         mov di, d
1333   0BF4 38 1A 00      mov c, 26
1334   0BF7 FD F5         rep movsb
1335   0BF9             ;; if(op.opcode_type){ 
1336   0BF9             _if45_cond:
1337   0BF9 FA 87 FF      lea d, [bp + -121] ; $op
1338   0BFC 58 19 00      add d, 25
1339   0BFF FD 14         clb
1340   0C01 32            mov bl, [d]
1341   0C02 A7 00         mov bh, 0
1342   0C04 C0 00 00      cmp b, 0
1343   0C07 C6 17 0C      je _if45_exit
1344   0C0A             _if45_true:
1345   0C0A             ;; forwards(1); 
1346   0C0A 26 01 00      mov b, $1
1347   0C0D DD            push bl
1348   0C0E 07 8C 20      call forwards
1349   0C11 51 01 00      add sp, 1
1350   0C14 0A 17 0C      jmp _if45_exit
1351   0C17             _if45_exit:
1352   0C17             ;; forwards(1); 
1353   0C17 26 01 00      mov b, $1
1354   0C1A DD            push bl
1355   0C1B 07 8C 20      call forwards
1356   0C1E 51 01 00      add sp, 1
1357   0C21 0A AB 0F      jmp _if41_exit
1358   0C24             _if41_else:
1359   0C24             ;; num_operands = 0; 
1360   0C24 FA 85 FF      lea d, [bp + -123] ; $num_operands         
1361   0C27 26 00 00      mov b, $0        
1362   0C2A FD 43         mov [d], b
1363   0C2C             ;; for(;;){ 
1364   0C2C             _for46_init:
1365   0C2C             _for46_cond:
1366   0C2C             _for46_block:
1367   0C2C             ;; get(); 
1368   0C2C 07 B1 23      call get
1369   0C2F             ;; if(toktype == END) break; 
1370   0C2F             _if47_cond:
1371   0C2F 29 D5 3A      mov b, [_toktype] ; $toktype           
1372   0C32             ; START RELATIONAL
1373   0C32 D7            push a
1374   0C33 11            mov a, b
1375   0C34 26 07 00      mov b, 7; END
1376   0C37 B0            cmp a, b
1377   0C38 FD 71         seq ; ==
1378   0C3A E4            pop a
1379   0C3B             ; END RELATIONAL
1380   0C3B C0 00 00      cmp b, 0
1381   0C3E C6 47 0C      je _if47_exit
1382   0C41             _if47_true:
1383   0C41             ;; break; 
1384   0C41 0A 94 0C      jmp _for46_exit ; for break
1385   0C44 0A 47 0C      jmp _if47_exit
1386   0C47             _if47_exit:
1387   0C47             ;; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1388   0C47             _if48_cond:
1389   0C47 29 D5 3A      mov b, [_toktype] ; $toktype           
1390   0C4A             ; START RELATIONAL
1391   0C4A D7            push a
1392   0C4B 11            mov a, b
1393   0C4C 26 05 00      mov b, 5; INTEGER_CONST
1394   0C4F B0            cmp a, b
1395   0C50 FD 71         seq ; ==
1396   0C52 E4            pop a
1397   0C53             ; END RELATIONAL
1398   0C53 D7            push a
1399   0C54 11            mov a, b
1400   0C55 29 D5 3A      mov b, [_toktype] ; $toktype           
1401   0C58             ; START RELATIONAL
1402   0C58 D7            push a
1403   0C59 11            mov a, b
1404   0C5A 26 06 00      mov b, 6; IDENTIFIER
1405   0C5D B0            cmp a, b
1406   0C5E FD 71         seq ; ==
1407   0C60 E4            pop a
1408   0C61             ; END RELATIONAL
1409   0C61 D7            push a
1410   0C62 11            mov a, b
1411   0C63 26 D9 3A      mov b, _token_data ; $token           
1412   0C66 FD AB         swp b
1413   0C68 D8            push b
1414   0C69 07 20 19      call is_reserved
1415   0C6C 51 02 00      add sp, 2
1416   0C6F C0 00 00      cmp b, 0
1417   0C72 FD 71         seq ; !
1418   0C74 FD A7         sand a, b ; &&
1419   0C76 E4            pop a
1420   0C77 FD A8         sor a, b ; ||
1421   0C79 E4            pop a
1422   0C7A C0 00 00      cmp b, 0
1423   0C7D C6 91 0C      je _if48_exit
1424   0C80             _if48_true:
1425   0C80             ;; num_operands++; 
1426   0C80 2C 85 FF      mov b, [bp + -123] ; $num_operands             
1427   0C83 FD 79         mov g, b
1428   0C85 FD 77         inc b
1429   0C87 FA 85 FF      lea d, [bp + -123] ; $num_operands
1430   0C8A FD 43         mov [d], b
1431   0C8C FD 27         mov b, g
1432   0C8E 0A 91 0C      jmp _if48_exit
1433   0C91             _if48_exit:
1434   0C91             _for46_update:
1435   0C91 0A 2C 0C      jmp _for46_cond
1436   0C94             _for46_exit:
1437   0C94             ;; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
1438   0C94             _if49_cond:
1439   0C94 2C 85 FF      mov b, [bp + -123] ; $num_operands             
1440   0C97             ; START RELATIONAL
1441   0C97 D7            push a
1442   0C98 11            mov a, b
1443   0C99 26 02 00      mov b, $2
1444   0C9C B0            cmp a, b
1445   0C9D FD 7F         sgt ; >
1446   0C9F E4            pop a
1447   0CA0             ; END RELATIONAL
1448   0CA0 C0 00 00      cmp b, 0
1449   0CA3 C6 B5 0C      je _if49_exit
1450   0CA6             _if49_true:
1451   0CA6             ;; error("Maximum number of operands per instruction is 2."); 
1452   0CA6 26 3F 3D      mov b, __s26 ; "Maximum number of operands per instruction is 2."
1453   0CA9 FD AB         swp b
1454   0CAB D8            push b
1455   0CAC 07 6B 2E      call error
1456   0CAF 51 02 00      add sp, 2
1457   0CB2 0A B5 0C      jmp _if49_exit
1458   0CB5             _if49_exit:
1459   0CB5             ;; num_operandsexp = exp(2, num_operands); 
1460   0CB5 FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
1461   0CB8 DA            push d
1462   0CB9 26 02 00      mov b, $2
1463   0CBC FD AB         swp b
1464   0CBE D8            push b
1465   0CBF 2C 85 FF      mov b, [bp + -123] ; $num_operands             
1466   0CC2 FD AB         swp b
1467   0CC4 D8            push b
1468   0CC5 07 55 33      call exp
1469   0CC8 51 04 00      add sp, 4
1470   0CCB E7            pop d
1471   0CCC FD 43         mov [d], b
1472   0CCE             ;; for(i = 0; i < num_operandsexp; i++){ 
1473   0CCE             _for50_init:
1474   0CCE FA 81 FF      lea d, [bp + -127] ; $i         
1475   0CD1 26 00 00      mov b, $0        
1476   0CD4 FD 43         mov [d], b
1477   0CD6             _for50_cond:
1478   0CD6 2C 81 FF      mov b, [bp + -127] ; $i             
1479   0CD9             ; START RELATIONAL
1480   0CD9 D7            push a
1481   0CDA 11            mov a, b
1482   0CDB 2C 83 FF      mov b, [bp + -125] ; $num_operandsexp             
1483   0CDE B0            cmp a, b
1484   0CDF FD 73         slt ; < 
1485   0CE1 E4            pop a
1486   0CE2             ; END RELATIONAL
1487   0CE2 C0 00 00      cmp b, 0
1488   0CE5 C6 AB 0F      je _for50_exit
1489   0CE8             _for50_block:
1490   0CE8             ;; prog = code_line; 
1491   0CE8 3B D7 3A      mov d, _prog ; $prog
1492   0CEB DA            push d
1493   0CEC FA A1 FF      lea d, [bp + -95] ; $code_line
1494   0CEF 2D            mov b, d
1495   0CF0 E7            pop d
1496   0CF1 FD 43         mov [d], b
1497   0CF3             ;; get(); 
1498   0CF3 07 B1 23      call get
1499   0CF6             ;; strcpy(opcode, token); 
1500   0CF6 FA E1 FF      lea d, [bp + -31] ; $opcode
1501   0CF9 2D            mov b, d
1502   0CFA FD AB         swp b
1503   0CFC D8            push b
1504   0CFD 26 D9 3A      mov b, _token_data ; $token           
1505   0D00 FD AB         swp b
1506   0D02 D8            push b
1507   0D03 07 A2 33      call strcpy
1508   0D06 51 04 00      add sp, 4
1509   0D09             ;; strcat(opcode, " "); 
1510   0D09 FA E1 FF      lea d, [bp + -31] ; $opcode
1511   0D0C 2D            mov b, d
1512   0D0D FD AB         swp b
1513   0D0F D8            push b
1514   0D10 26 3D 3D      mov b, __s25 ; " "
1515   0D13 FD AB         swp b
1516   0D15 D8            push b
1517   0D16 07 5B 34      call strcat
1518   0D19 51 04 00      add sp, 4
1519   0D1C             ;; j = 0; 
1520   0D1C FA 7F FF      lea d, [bp + -129] ; $j         
1521   0D1F 26 00 00      mov b, $0        
1522   0D22 FD 43         mov [d], b
1523   0D24             ;; for(;;){ 
1524   0D24             _for51_init:
1525   0D24             _for51_cond:
1526   0D24             _for51_block:
1527   0D24             ;; get(); 
1528   0D24 07 B1 23      call get
1529   0D27             ;; if(toktype == END) break; 
1530   0D27             _if52_cond:
1531   0D27 29 D5 3A      mov b, [_toktype] ; $toktype           
1532   0D2A             ; START RELATIONAL
1533   0D2A D7            push a
1534   0D2B 11            mov a, b
1535   0D2C 26 07 00      mov b, 7; END
1536   0D2F B0            cmp a, b
1537   0D30 FD 71         seq ; ==
1538   0D32 E4            pop a
1539   0D33             ; END RELATIONAL
1540   0D33 C0 00 00      cmp b, 0
1541   0D36 C6 3F 0D      je _if52_exit
1542   0D39             _if52_true:
1543   0D39             ;; break; 
1544   0D39 0A FC 0D      jmp _for51_exit ; for break
1545   0D3C 0A 3F 0D      jmp _if52_exit
1546   0D3F             _if52_exit:
1547   0D3F             ;; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1548   0D3F             _if53_cond:
1549   0D3F 29 D5 3A      mov b, [_toktype] ; $toktype           
1550   0D42             ; START RELATIONAL
1551   0D42 D7            push a
1552   0D43 11            mov a, b
1553   0D44 26 05 00      mov b, 5; INTEGER_CONST
1554   0D47 B0            cmp a, b
1555   0D48 FD 71         seq ; ==
1556   0D4A E4            pop a
1557   0D4B             ; END RELATIONAL
1558   0D4B D7            push a
1559   0D4C 11            mov a, b
1560   0D4D 29 D5 3A      mov b, [_toktype] ; $toktype           
1561   0D50             ; START RELATIONAL
1562   0D50 D7            push a
1563   0D51 11            mov a, b
1564   0D52 26 06 00      mov b, 6; IDENTIFIER
1565   0D55 B0            cmp a, b
1566   0D56 FD 71         seq ; ==
1567   0D58 E4            pop a
1568   0D59             ; END RELATIONAL
1569   0D59 D7            push a
1570   0D5A 11            mov a, b
1571   0D5B 26 D9 3A      mov b, _token_data ; $token           
1572   0D5E FD AB         swp b
1573   0D60 D8            push b
1574   0D61 07 20 19      call is_reserved
1575   0D64 51 02 00      add sp, 2
1576   0D67 C0 00 00      cmp b, 0
1577   0D6A FD 71         seq ; !
1578   0D6C FD A7         sand a, b ; &&
1579   0D6E E4            pop a
1580   0D6F FD A8         sor a, b ; ||
1581   0D71 E4            pop a
1582   0D72 C0 00 00      cmp b, 0
1583   0D75 C6 E6 0D      je _if53_else
1584   0D78             _if53_true:
1585   0D78             ;; strcat(opcode, symbols[i*2+j]); 
1586   0D78 FA E1 FF      lea d, [bp + -31] ; $opcode
1587   0D7B 2D            mov b, d
1588   0D7C FD AB         swp b
1589   0D7E D8            push b
1590   0D7F 3B 3B 3C      mov d, _symbols_data ; $symbols
1591   0D82 D7            push a         
1592   0D83 2C 81 FF      mov b, [bp + -127] ; $i             
1593   0D86             ; START FACTORS
1594   0D86 D7            push a
1595   0D87 11            mov a, b
1596   0D88 26 02 00      mov b, $2
1597   0D8B AC            mul a, b ; *
1598   0D8C 11            mov a, b
1599   0D8D 27            mov b, a
1600   0D8E E4            pop a
1601   0D8F             ; END FACTORS
1602   0D8F             ; START TERMS
1603   0D8F D7            push a
1604   0D90 11            mov a, b
1605   0D91 2C 7F FF      mov b, [bp + -129] ; $j             
1606   0D94 54            add a, b
1607   0D95 27            mov b, a
1608   0D96 E4            pop a
1609   0D97             ; END TERMS        
1610   0D97 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1611   0D9B E4            pop a
1612   0D9C 2A            mov b, [d]
1613   0D9D FD AB         swp b
1614   0D9F D8            push b
1615   0DA0 07 5B 34      call strcat
1616   0DA3 51 04 00      add sp, 4
1617   0DA6             ;; operand_types[j] = *symbols[i*2+j]; 
1618   0DA6 FA 7C FF      lea d, [bp + -132] ; $operand_types
1619   0DA9 D7            push a         
1620   0DAA 2C 7F FF      mov b, [bp + -129] ; $j                     
1621   0DAD 5A            add d, b
1622   0DAE E4            pop a
1623   0DAF DA            push d
1624   0DB0 3B 3B 3C      mov d, _symbols_data ; $symbols
1625   0DB3 D7            push a         
1626   0DB4 2C 81 FF      mov b, [bp + -127] ; $i             
1627   0DB7             ; START FACTORS
1628   0DB7 D7            push a
1629   0DB8 11            mov a, b
1630   0DB9 26 02 00      mov b, $2
1631   0DBC AC            mul a, b ; *
1632   0DBD 11            mov a, b
1633   0DBE 27            mov b, a
1634   0DBF E4            pop a
1635   0DC0             ; END FACTORS
1636   0DC0             ; START TERMS
1637   0DC0 D7            push a
1638   0DC1 11            mov a, b
1639   0DC2 2C 7F FF      mov b, [bp + -129] ; $j             
1640   0DC5 54            add a, b
1641   0DC6 27            mov b, a
1642   0DC7 E4            pop a
1643   0DC8             ; END TERMS        
1644   0DC8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1645   0DCC E4            pop a
1646   0DCD 2A            mov b, [d]
1647   0DCE 74            mov d, b
1648   0DCF 32            mov bl, [d]
1649   0DD0 A7 00         mov bh, 0
1650   0DD2 E7            pop d
1651   0DD3 FD 3E         mov [d], bl
1652   0DD5             ;; j++; 
1653   0DD5 2C 7F FF      mov b, [bp + -129] ; $j             
1654   0DD8 FD 79         mov g, b
1655   0DDA FD 77         inc b
1656   0DDC FA 7F FF      lea d, [bp + -129] ; $j
1657   0DDF FD 43         mov [d], b
1658   0DE1 FD 27         mov b, g
1659   0DE3 0A F9 0D      jmp _if53_exit
1660   0DE6             _if53_else:
1661   0DE6             ;; strcat(opcode, token); 
1662   0DE6 FA E1 FF      lea d, [bp + -31] ; $opcode
1663   0DE9 2D            mov b, d
1664   0DEA FD AB         swp b
1665   0DEC D8            push b
1666   0DED 26 D9 3A      mov b, _token_data ; $token           
1667   0DF0 FD AB         swp b
1668   0DF2 D8            push b
1669   0DF3 07 5B 34      call strcat
1670   0DF6 51 04 00      add sp, 4
1671   0DF9             _if53_exit:
1672   0DF9             _for51_update:
1673   0DF9 0A 24 0D      jmp _for51_cond
1674   0DFC             _for51_exit:
1675   0DFC             ;; op = search_opcode(opcode); 
1676   0DFC FA 87 FF      lea d, [bp + -121] ; $op
1677   0DFF DA            push d
1678   0E00 FA E1 FF      lea d, [bp + -31] ; $opcode
1679   0E03 2D            mov b, d
1680   0E04 FD AB         swp b
1681   0E06 D8            push b
1682   0E07 07 15 1E      call search_opcode
1683   0E0A 51 02 00      add sp, 2
1684   0E0D E7            pop d
1685   0E0E FD 28         mov si, b
1686   0E10 FD 50         mov di, d
1687   0E12 38 1A 00      mov c, 26
1688   0E15 FD F5         rep movsb
1689   0E17             ;; if(op.name[0] == '\0') continue; 
1690   0E17             _if54_cond:
1691   0E17 FA 87 FF      lea d, [bp + -121] ; $op
1692   0E1A 58 00 00      add d, 0
1693   0E1D FD 14         clb
1694   0E1F D7            push a         
1695   0E20 26 00 00      mov b, $0        
1696   0E23 5A            add d, b
1697   0E24 E4            pop a
1698   0E25 32            mov bl, [d]
1699   0E26 A7 00         mov bh, 0
1700   0E28             ; START RELATIONAL
1701   0E28 D7            push a
1702   0E29 11            mov a, b
1703   0E2A 26 00 00      mov b, $0
1704   0E2D B0            cmp a, b
1705   0E2E FD 71         seq ; ==
1706   0E30 E4            pop a
1707   0E31             ; END RELATIONAL
1708   0E31 C0 00 00      cmp b, 0
1709   0E34 C6 3D 0E      je _if54_exit
1710   0E37             _if54_true:
1711   0E37             ;; continue; 
1712   0E37 0A 9A 0F      jmp _for50_update ; for continue
1713   0E3A 0A 3D 0E      jmp _if54_exit
1714   0E3D             _if54_exit:
1715   0E3D             ;; if(op.opcode_type){ 
1716   0E3D             _if55_cond:
1717   0E3D FA 87 FF      lea d, [bp + -121] ; $op
1718   0E40 58 19 00      add d, 25
1719   0E43 FD 14         clb
1720   0E45 32            mov bl, [d]
1721   0E46 A7 00         mov bh, 0
1722   0E48 C0 00 00      cmp b, 0
1723   0E4B C6 5B 0E      je _if55_exit
1724   0E4E             _if55_true:
1725   0E4E             ;; forwards(1); 
1726   0E4E 26 01 00      mov b, $1
1727   0E51 DD            push bl
1728   0E52 07 8C 20      call forwards
1729   0E55 51 01 00      add sp, 1
1730   0E58 0A 5B 0E      jmp _if55_exit
1731   0E5B             _if55_exit:
1732   0E5B             ;; forwards(1); 
1733   0E5B 26 01 00      mov b, $1
1734   0E5E DD            push bl
1735   0E5F 07 8C 20      call forwards
1736   0E62 51 01 00      add sp, 1
1737   0E65             ;; prog = code_line; 
1738   0E65 3B D7 3A      mov d, _prog ; $prog
1739   0E68 DA            push d
1740   0E69 FA A1 FF      lea d, [bp + -95] ; $code_line
1741   0E6C 2D            mov b, d
1742   0E6D E7            pop d
1743   0E6E FD 43         mov [d], b
1744   0E70             ;; j = 0; 
1745   0E70 FA 7F FF      lea d, [bp + -129] ; $j         
1746   0E73 26 00 00      mov b, $0        
1747   0E76 FD 43         mov [d], b
1748   0E78             ;; get(); 
1749   0E78 07 B1 23      call get
1750   0E7B             ;; for(;;){ 
1751   0E7B             _for56_init:
1752   0E7B             _for56_cond:
1753   0E7B             _for56_block:
1754   0E7B             ;; get(); 
1755   0E7B 07 B1 23      call get
1756   0E7E             ;; if(toktype == END) break; 
1757   0E7E             _if57_cond:
1758   0E7E 29 D5 3A      mov b, [_toktype] ; $toktype           
1759   0E81             ; START RELATIONAL
1760   0E81 D7            push a
1761   0E82 11            mov a, b
1762   0E83 26 07 00      mov b, 7; END
1763   0E86 B0            cmp a, b
1764   0E87 FD 71         seq ; ==
1765   0E89 E4            pop a
1766   0E8A             ; END RELATIONAL
1767   0E8A C0 00 00      cmp b, 0
1768   0E8D C6 96 0E      je _if57_exit
1769   0E90             _if57_true:
1770   0E90             ;; break; 
1771   0E90 0A 97 0F      jmp _for56_exit ; for break
1772   0E93 0A 96 0E      jmp _if57_exit
1773   0E96             _if57_exit:
1774   0E96             ;; if(toktype == IDENTIFIER && !is_reserved(token)){ 
1775   0E96             _if58_cond:
1776   0E96 29 D5 3A      mov b, [_toktype] ; $toktype           
1777   0E99             ; START RELATIONAL
1778   0E99 D7            push a
1779   0E9A 11            mov a, b
1780   0E9B 26 06 00      mov b, 6; IDENTIFIER
1781   0E9E B0            cmp a, b
1782   0E9F FD 71         seq ; ==
1783   0EA1 E4            pop a
1784   0EA2             ; END RELATIONAL
1785   0EA2 D7            push a
1786   0EA3 11            mov a, b
1787   0EA4 26 D9 3A      mov b, _token_data ; $token           
1788   0EA7 FD AB         swp b
1789   0EA9 D8            push b
1790   0EAA 07 20 19      call is_reserved
1791   0EAD 51 02 00      add sp, 2
1792   0EB0 C0 00 00      cmp b, 0
1793   0EB3 FD 71         seq ; !
1794   0EB5 FD A7         sand a, b ; &&
1795   0EB7 E4            pop a
1796   0EB8 C0 00 00      cmp b, 0
1797   0EBB C6 21 0F      je _if58_else
1798   0EBE             _if58_true:
1799   0EBE             ;; if(operand_types[j] == '#'){ 
1800   0EBE             _if59_cond:
1801   0EBE FA 7C FF      lea d, [bp + -132] ; $operand_types
1802   0EC1 D7            push a         
1803   0EC2 2C 7F FF      mov b, [bp + -129] ; $j                     
1804   0EC5 5A            add d, b
1805   0EC6 E4            pop a
1806   0EC7 32            mov bl, [d]
1807   0EC8 A7 00         mov bh, 0
1808   0ECA             ; START RELATIONAL
1809   0ECA D7            push a
1810   0ECB 11            mov a, b
1811   0ECC 26 23 00      mov b, $23
1812   0ECF B0            cmp a, b
1813   0ED0 FD 71         seq ; ==
1814   0ED2 E4            pop a
1815   0ED3             ; END RELATIONAL
1816   0ED3 C0 00 00      cmp b, 0
1817   0ED6 C6 E8 0E      je _if59_else
1818   0ED9             _if59_true:
1819   0ED9             ;; error("8bit operand expected but 16bit label given."); 
1820   0ED9 26 70 3D      mov b, __s27 ; "8bit operand expected but 16bit label given."
1821   0EDC FD AB         swp b
1822   0EDE D8            push b
1823   0EDF 07 6B 2E      call error
1824   0EE2 51 02 00      add sp, 2
1825   0EE5 0A 10 0F      jmp _if59_exit
1826   0EE8             _if59_else:
1827   0EE8             ;; if(operand_types[j] == '@'){ 
1828   0EE8             _if60_cond:
1829   0EE8 FA 7C FF      lea d, [bp + -132] ; $operand_types
1830   0EEB D7            push a         
1831   0EEC 2C 7F FF      mov b, [bp + -129] ; $j                     
1832   0EEF 5A            add d, b
1833   0EF0 E4            pop a
1834   0EF1 32            mov bl, [d]
1835   0EF2 A7 00         mov bh, 0
1836   0EF4             ; START RELATIONAL
1837   0EF4 D7            push a
1838   0EF5 11            mov a, b
1839   0EF6 26 40 00      mov b, $40
1840   0EF9 B0            cmp a, b
1841   0EFA FD 71         seq ; ==
1842   0EFC E4            pop a
1843   0EFD             ; END RELATIONAL
1844   0EFD C0 00 00      cmp b, 0
1845   0F00 C6 10 0F      je _if60_exit
1846   0F03             _if60_true:
1847   0F03             ;; forwards(2); 
1848   0F03 26 02 00      mov b, $2
1849   0F06 DD            push bl
1850   0F07 07 8C 20      call forwards
1851   0F0A 51 01 00      add sp, 1
1852   0F0D 0A 10 0F      jmp _if60_exit
1853   0F10             _if60_exit:
1854   0F10             _if59_exit:
1855   0F10             ;; j++; 
1856   0F10 2C 7F FF      mov b, [bp + -129] ; $j             
1857   0F13 FD 79         mov g, b
1858   0F15 FD 77         inc b
1859   0F17 FA 7F FF      lea d, [bp + -129] ; $j
1860   0F1A FD 43         mov [d], b
1861   0F1C FD 27         mov b, g
1862   0F1E 0A 94 0F      jmp _if58_exit
1863   0F21             _if58_else:
1864   0F21             ;; if(toktype == INTEGER_CONST){ 
1865   0F21             _if61_cond:
1866   0F21 29 D5 3A      mov b, [_toktype] ; $toktype           
1867   0F24             ; START RELATIONAL
1868   0F24 D7            push a
1869   0F25 11            mov a, b
1870   0F26 26 05 00      mov b, 5; INTEGER_CONST
1871   0F29 B0            cmp a, b
1872   0F2A FD 71         seq ; ==
1873   0F2C E4            pop a
1874   0F2D             ; END RELATIONAL
1875   0F2D C0 00 00      cmp b, 0
1876   0F30 C6 94 0F      je _if61_exit
1877   0F33             _if61_true:
1878   0F33             ;; if(operand_types[j] == '#'){ 
1879   0F33             _if62_cond:
1880   0F33 FA 7C FF      lea d, [bp + -132] ; $operand_types
1881   0F36 D7            push a         
1882   0F37 2C 7F FF      mov b, [bp + -129] ; $j                     
1883   0F3A 5A            add d, b
1884   0F3B E4            pop a
1885   0F3C 32            mov bl, [d]
1886   0F3D A7 00         mov bh, 0
1887   0F3F             ; START RELATIONAL
1888   0F3F D7            push a
1889   0F40 11            mov a, b
1890   0F41 26 23 00      mov b, $23
1891   0F44 B0            cmp a, b
1892   0F45 FD 71         seq ; ==
1893   0F47 E4            pop a
1894   0F48             ; END RELATIONAL
1895   0F48 C0 00 00      cmp b, 0
1896   0F4B C6 5B 0F      je _if62_else
1897   0F4E             _if62_true:
1898   0F4E             ;; forwards(1); 
1899   0F4E 26 01 00      mov b, $1
1900   0F51 DD            push bl
1901   0F52 07 8C 20      call forwards
1902   0F55 51 01 00      add sp, 1
1903   0F58 0A 83 0F      jmp _if62_exit
1904   0F5B             _if62_else:
1905   0F5B             ;; if(operand_types[j] == '@'){ 
1906   0F5B             _if63_cond:
1907   0F5B FA 7C FF      lea d, [bp + -132] ; $operand_types
1908   0F5E D7            push a         
1909   0F5F 2C 7F FF      mov b, [bp + -129] ; $j                     
1910   0F62 5A            add d, b
1911   0F63 E4            pop a
1912   0F64 32            mov bl, [d]
1913   0F65 A7 00         mov bh, 0
1914   0F67             ; START RELATIONAL
1915   0F67 D7            push a
1916   0F68 11            mov a, b
1917   0F69 26 40 00      mov b, $40
1918   0F6C B0            cmp a, b
1919   0F6D FD 71         seq ; ==
1920   0F6F E4            pop a
1921   0F70             ; END RELATIONAL
1922   0F70 C0 00 00      cmp b, 0
1923   0F73 C6 83 0F      je _if63_exit
1924   0F76             _if63_true:
1925   0F76             ;; forwards(2); 
1926   0F76 26 02 00      mov b, $2
1927   0F79 DD            push bl
1928   0F7A 07 8C 20      call forwards
1929   0F7D 51 01 00      add sp, 1
1930   0F80 0A 83 0F      jmp _if63_exit
1931   0F83             _if63_exit:
1932   0F83             _if62_exit:
1933   0F83             ;; j++; 
1934   0F83 2C 7F FF      mov b, [bp + -129] ; $j             
1935   0F86 FD 79         mov g, b
1936   0F88 FD 77         inc b
1937   0F8A FA 7F FF      lea d, [bp + -129] ; $j
1938   0F8D FD 43         mov [d], b
1939   0F8F FD 27         mov b, g
1940   0F91 0A 94 0F      jmp _if61_exit
1941   0F94             _if61_exit:
1942   0F94             _if58_exit:
1943   0F94             _for56_update:
1944   0F94 0A 7B 0E      jmp _for56_cond
1945   0F97             _for56_exit:
1946   0F97             ;; break; 
1947   0F97 0A AB 0F      jmp _for50_exit ; for break
1948   0F9A             _for50_update:
1949   0F9A 2C 81 FF      mov b, [bp + -127] ; $i             
1950   0F9D FD 79         mov g, b
1951   0F9F FD 77         inc b
1952   0FA1 FA 81 FF      lea d, [bp + -127] ; $i
1953   0FA4 FD 43         mov [d], b
1954   0FA6 FD 27         mov b, g
1955   0FA8 0A D6 0C      jmp _for50_cond
1956   0FAB             _for50_exit:
1957   0FAB             _if41_exit:
1958   0FAB             ;; pop_prog(); 
1959   0FAB 07 14 2F      call pop_prog
1960   0FAE F9            leave
1961   0FAF 09            ret
1962   0FB0             
1963   0FB0             parse_instr:
1964   0FB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1965   0FB3             ; $opcode 
1966   0FB3             ; $code_line 
1967   0FB3             ; $op 
1968   0FB3             ; $instr_len 
1969   0FB3             ; $num_operands 
1970   0FB3             ; $num_operandsexp 
1971   0FB3             ; $i 
1972   0FB3             ; $j 
1973   0FB3             ; $operand_types 
1974   0FB3             ; $old_pc 
1975   0FB3             ; $has_operands 
1976   0FB3 52 8A 00      sub sp, 138
1977   0FB6             ;; old_pc = pc; 
1978   0FB6 FA 78 FF      lea d, [bp + -136] ; $old_pc         
1979   0FB9 29 D0 3A      mov b, [_pc] ; $pc                   
1980   0FBC FD 43         mov [d], b
1981   0FBE             ;; get_line(); 
1982   0FBE 07 E3 22      call get_line
1983   0FC1             ;; push_prog(); 
1984   0FC1 07 CF 2E      call push_prog
1985   0FC4             ;; strcpy(code_line, string_const); 
1986   0FC4 FA A1 FF      lea d, [bp + -95] ; $code_line
1987   0FC7 2D            mov b, d
1988   0FC8 FD AB         swp b
1989   0FCA D8            push b
1990   0FCB 26 19 3B      mov b, _string_const_data ; $string_const           
1991   0FCE FD AB         swp b
1992   0FD0 D8            push b
1993   0FD1 07 A2 33      call strcpy
1994   0FD4 51 04 00      add sp, 4
1995   0FD7             ;; has_operands = 0; 
1996   0FD7 FA 77 FF      lea d, [bp + -137] ; $has_operands         
1997   0FDA 26 00 00      mov b, $0        
1998   0FDD FD 3E         mov [d], bl
1999   0FDF             ;; prog = code_line; 
2000   0FDF 3B D7 3A      mov d, _prog ; $prog
2001   0FE2 DA            push d
2002   0FE3 FA A1 FF      lea d, [bp + -95] ; $code_line
2003   0FE6 2D            mov b, d
2004   0FE7 E7            pop d
2005   0FE8 FD 43         mov [d], b
2006   0FEA             ;; get(); 
2007   0FEA 07 B1 23      call get
2008   0FED             ;; for(;;){ 
2009   0FED             _for64_init:
2010   0FED             _for64_cond:
2011   0FED             _for64_block:
2012   0FED             ;; get(); 
2013   0FED 07 B1 23      call get
2014   0FF0             ;; if(toktype == END) break; 
2015   0FF0             _if65_cond:
2016   0FF0 29 D5 3A      mov b, [_toktype] ; $toktype           
2017   0FF3             ; START RELATIONAL
2018   0FF3 D7            push a
2019   0FF4 11            mov a, b
2020   0FF5 26 07 00      mov b, 7; END
2021   0FF8 B0            cmp a, b
2022   0FF9 FD 71         seq ; ==
2023   0FFB E4            pop a
2024   0FFC             ; END RELATIONAL
2025   0FFC C0 00 00      cmp b, 0
2026   0FFF C6 08 10      je _if65_exit
2027   1002             _if65_true:
2028   1002             ;; break; 
2029   1002 0A 47 10      jmp _for64_exit ; for break
2030   1005 0A 08 10      jmp _if65_exit
2031   1008             _if65_exit:
2032   1008             ;; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
2033   1008             _if66_cond:
2034   1008 29 D5 3A      mov b, [_toktype] ; $toktype           
2035   100B             ; START RELATIONAL
2036   100B D7            push a
2037   100C 11            mov a, b
2038   100D 26 05 00      mov b, 5; INTEGER_CONST
2039   1010 B0            cmp a, b
2040   1011 FD 71         seq ; ==
2041   1013 E4            pop a
2042   1014             ; END RELATIONAL
2043   1014 D7            push a
2044   1015 11            mov a, b
2045   1016 26 D9 3A      mov b, _token_data ; $token           
2046   1019 FD AB         swp b
2047   101B D8            push b
2048   101C 07 39 1D      call label_exists
2049   101F 51 02 00      add sp, 2
2050   1022             ; START RELATIONAL
2051   1022 D7            push a
2052   1023 11            mov a, b
2053   1024 26 01 00      mov b, $1
2054   1027 FD 97         neg b
2055   1029 B0            cmp a, b
2056   102A FD 72         sneq ; !=
2057   102C E4            pop a
2058   102D             ; END RELATIONAL
2059   102D FD A8         sor a, b ; ||
2060   102F E4            pop a
2061   1030 C0 00 00      cmp b, 0
2062   1033 C6 44 10      je _if66_exit
2063   1036             _if66_true:
2064   1036             ;; has_operands = 1; 
2065   1036 FA 77 FF      lea d, [bp + -137] ; $has_operands         
2066   1039 26 01 00      mov b, $1        
2067   103C FD 3E         mov [d], bl
2068   103E             ;; break; 
2069   103E 0A 47 10      jmp _for64_exit ; for break
2070   1041 0A 44 10      jmp _if66_exit
2071   1044             _if66_exit:
2072   1044             _for64_update:
2073   1044 0A ED 0F      jmp _for64_cond
2074   1047             _for64_exit:
2075   1047             ;; opcode[0] = '\0'; 
2076   1047 FA E1 FF      lea d, [bp + -31] ; $opcode
2077   104A D7            push a         
2078   104B 26 00 00      mov b, $0        
2079   104E 5A            add d, b
2080   104F E4            pop a         
2081   1050 26 00 00      mov b, $0        
2082   1053 FD 3E         mov [d], bl
2083   1055             ;; prog = code_line; 
2084   1055 3B D7 3A      mov d, _prog ; $prog
2085   1058 DA            push d
2086   1059 FA A1 FF      lea d, [bp + -95] ; $code_line
2087   105C 2D            mov b, d
2088   105D E7            pop d
2089   105E FD 43         mov [d], b
2090   1060             ;; if(!has_operands){ 
2091   1060             _if67_cond:
2092   1060 34 77 FF      mov bl, [bp + -137] ; $has_operands
2093   1063 A7 00         mov bh, 0             
2094   1065 C0 00 00      cmp b, 0
2095   1068 FD 71         seq ; !
2096   106A C0 00 00      cmp b, 0
2097   106D C6 D2 11      je _if67_else
2098   1070             _if67_true:
2099   1070             ;; get(); 
2100   1070 07 B1 23      call get
2101   1073             ;; strcpy(opcode, token); 
2102   1073 FA E1 FF      lea d, [bp + -31] ; $opcode
2103   1076 2D            mov b, d
2104   1077 FD AB         swp b
2105   1079 D8            push b
2106   107A 26 D9 3A      mov b, _token_data ; $token           
2107   107D FD AB         swp b
2108   107F D8            push b
2109   1080 07 A2 33      call strcpy
2110   1083 51 04 00      add sp, 4
2111   1086             ;; get();  
2112   1086 07 B1 23      call get
2113   1089             ;; if(toktype == END){ 
2114   1089             _if68_cond:
2115   1089 29 D5 3A      mov b, [_toktype] ; $toktype           
2116   108C             ; START RELATIONAL
2117   108C D7            push a
2118   108D 11            mov a, b
2119   108E 26 07 00      mov b, 7; END
2120   1091 B0            cmp a, b
2121   1092 FD 71         seq ; ==
2122   1094 E4            pop a
2123   1095             ; END RELATIONAL
2124   1095 C0 00 00      cmp b, 0
2125   1098 C6 B1 10      je _if68_else
2126   109B             _if68_true:
2127   109B             ;; strcat(opcode, " ."); 
2128   109B FA E1 FF      lea d, [bp + -31] ; $opcode
2129   109E 2D            mov b, d
2130   109F FD AB         swp b
2131   10A1 D8            push b
2132   10A2 26 3A 3D      mov b, __s24 ; " ."
2133   10A5 FD AB         swp b
2134   10A7 D8            push b
2135   10A8 07 5B 34      call strcat
2136   10AB 51 04 00      add sp, 4
2137   10AE 0A 08 11      jmp _if68_exit
2138   10B1             _if68_else:
2139   10B1             ;; strcat(opcode, " "); 
2140   10B1 FA E1 FF      lea d, [bp + -31] ; $opcode
2141   10B4 2D            mov b, d
2142   10B5 FD AB         swp b
2143   10B7 D8            push b
2144   10B8 26 3D 3D      mov b, __s25 ; " "
2145   10BB FD AB         swp b
2146   10BD D8            push b
2147   10BE 07 5B 34      call strcat
2148   10C1 51 04 00      add sp, 4
2149   10C4             ;; strcat(opcode, token); 
2150   10C4 FA E1 FF      lea d, [bp + -31] ; $opcode
2151   10C7 2D            mov b, d
2152   10C8 FD AB         swp b
2153   10CA D8            push b
2154   10CB 26 D9 3A      mov b, _token_data ; $token           
2155   10CE FD AB         swp b
2156   10D0 D8            push b
2157   10D1 07 5B 34      call strcat
2158   10D4 51 04 00      add sp, 4
2159   10D7             ;; for(;;){ 
2160   10D7             _for69_init:
2161   10D7             _for69_cond:
2162   10D7             _for69_block:
2163   10D7             ;; get(); 
2164   10D7 07 B1 23      call get
2165   10DA             ;; if(toktype == END) break; 
2166   10DA             _if70_cond:
2167   10DA 29 D5 3A      mov b, [_toktype] ; $toktype           
2168   10DD             ; START RELATIONAL
2169   10DD D7            push a
2170   10DE 11            mov a, b
2171   10DF 26 07 00      mov b, 7; END
2172   10E2 B0            cmp a, b
2173   10E3 FD 71         seq ; ==
2174   10E5 E4            pop a
2175   10E6             ; END RELATIONAL
2176   10E6 C0 00 00      cmp b, 0
2177   10E9 C6 F2 10      je _if70_exit
2178   10EC             _if70_true:
2179   10EC             ;; break; 
2180   10EC 0A 08 11      jmp _for69_exit ; for break
2181   10EF 0A F2 10      jmp _if70_exit
2182   10F2             _if70_exit:
2183   10F2             ;; strcat(opcode, token); 
2184   10F2 FA E1 FF      lea d, [bp + -31] ; $opcode
2185   10F5 2D            mov b, d
2186   10F6 FD AB         swp b
2187   10F8 D8            push b
2188   10F9 26 D9 3A      mov b, _token_data ; $token           
2189   10FC FD AB         swp b
2190   10FE D8            push b
2191   10FF 07 5B 34      call strcat
2192   1102 51 04 00      add sp, 4
2193   1105             _for69_update:
2194   1105 0A D7 10      jmp _for69_cond
2195   1108             _for69_exit:
2196   1108             _if68_exit:
2197   1108             ;; op = search_opcode(opcode); 
2198   1108 FA 87 FF      lea d, [bp + -121] ; $op
2199   110B DA            push d
2200   110C FA E1 FF      lea d, [bp + -31] ; $opcode
2201   110F 2D            mov b, d
2202   1110 FD AB         swp b
2203   1112 D8            push b
2204   1113 07 15 1E      call search_opcode
2205   1116 51 02 00      add sp, 2
2206   1119 E7            pop d
2207   111A FD 28         mov si, b
2208   111C FD 50         mov di, d
2209   111E 38 1A 00      mov c, 26
2210   1121 FD F5         rep movsb
2211   1123             ;; instr_len = 1; 
2212   1123 FA 85 FF      lea d, [bp + -123] ; $instr_len         
2213   1126 26 01 00      mov b, $1        
2214   1129 FD 43         mov [d], b
2215   112B             ;; if(op.opcode_type){ 
2216   112B             _if71_cond:
2217   112B FA 87 FF      lea d, [bp + -121] ; $op
2218   112E 58 19 00      add d, 25
2219   1131 FD 14         clb
2220   1133 32            mov bl, [d]
2221   1134 A7 00         mov bh, 0
2222   1136 C0 00 00      cmp b, 0
2223   1139 C6 5D 11      je _if71_exit
2224   113C             _if71_true:
2225   113C             ;; instr_len++; 
2226   113C 2C 85 FF      mov b, [bp + -123] ; $instr_len             
2227   113F FD 79         mov g, b
2228   1141 FD 77         inc b
2229   1143 FA 85 FF      lea d, [bp + -123] ; $instr_len
2230   1146 FD 43         mov [d], b
2231   1148 FD 27         mov b, g
2232   114A             ;; emit_byte(0xFD, emit_override); 
2233   114A 26 FD 00      mov b, $fd
2234   114D DD            push bl
2235   114E 34 05 00      mov bl, [bp + 5] ; $emit_override
2236   1151 A7 00         mov bh, 0             
2237   1153 DD            push bl
2238   1154 07 C7 20      call emit_byte
2239   1157 51 02 00      add sp, 2
2240   115A 0A 5D 11      jmp _if71_exit
2241   115D             _if71_exit:
2242   115D             ;; emit_byte(op.opcode, emit_override); 
2243   115D FA 87 FF      lea d, [bp + -121] ; $op
2244   1160 58 18 00      add d, 24
2245   1163 FD 14         clb
2246   1165 32            mov bl, [d]
2247   1166 A7 00         mov bh, 0
2248   1168 DD            push bl
2249   1169 34 05 00      mov bl, [bp + 5] ; $emit_override
2250   116C A7 00         mov bh, 0             
2251   116E DD            push bl
2252   116F 07 C7 20      call emit_byte
2253   1172 51 02 00      add sp, 2
2254   1175             ;; if(!emit_override){ 
2255   1175             _if72_cond:
2256   1175 34 05 00      mov bl, [bp + 5] ; $emit_override
2257   1178 A7 00         mov bh, 0             
2258   117A C0 00 00      cmp b, 0
2259   117D FD 71         seq ; !
2260   117F C0 00 00      cmp b, 0
2261   1182 C6 CF 11      je _if72_exit
2262   1185             _if72_true:
2263   1185             ;; printx16(old_pc); print(" ("); printu(instr_len); print(") : "); 
2264   1185 2C 78 FF      mov b, [bp + -136] ; $old_pc             
2265   1188 FD AB         swp b
2266   118A D8            push b
2267   118B 07 EA 2F      call printx16
2268   118E 51 02 00      add sp, 2
2269   1191             ;; print(" ("); printu(instr_len); print(") : "); 
2270   1191 26 9D 3D      mov b, __s28 ; " ("
2271   1194 FD AB         swp b
2272   1196 D8            push b
2273   1197 07 FB 32      call print
2274   119A 51 02 00      add sp, 2
2275   119D             ;; printu(instr_len); print(") : "); 
2276   119D 2C 85 FF      mov b, [bp + -123] ; $instr_len             
2277   11A0 FD AB         swp b
2278   11A2 D8            push b
2279   11A3 07 36 32      call printu
2280   11A6 51 02 00      add sp, 2
2281   11A9             ;; print(") : "); 
2282   11A9 26 A0 3D      mov b, __s29 ; ") : "
2283   11AC FD AB         swp b
2284   11AE D8            push b
2285   11AF 07 FB 32      call print
2286   11B2 51 02 00      add sp, 2
2287   11B5             ;; print(code_line); putchar('\n'); 
2288   11B5 FA A1 FF      lea d, [bp + -95] ; $code_line
2289   11B8 2D            mov b, d
2290   11B9 FD AB         swp b
2291   11BB D8            push b
2292   11BC 07 FB 32      call print
2293   11BF 51 02 00      add sp, 2
2294   11C2             ;; putchar('\n'); 
2295   11C2 26 0A 00      mov b, $a
2296   11C5 DD            push bl
2297   11C6 07 EF 32      call putchar
2298   11C9 51 01 00      add sp, 1
2299   11CC 0A CF 11      jmp _if72_exit
2300   11CF             _if72_exit:
2301   11CF 0A 4A 16      jmp _if67_exit
2302   11D2             _if67_else:
2303   11D2             ;; num_operands = 0; 
2304   11D2 FA 83 FF      lea d, [bp + -125] ; $num_operands         
2305   11D5 26 00 00      mov b, $0        
2306   11D8 FD 43         mov [d], b
2307   11DA             ;; for(;;){ 
2308   11DA             _for73_init:
2309   11DA             _for73_cond:
2310   11DA             _for73_block:
2311   11DA             ;; get(); 
2312   11DA 07 B1 23      call get
2313   11DD             ;; if(toktype == END) break; 
2314   11DD             _if74_cond:
2315   11DD 29 D5 3A      mov b, [_toktype] ; $toktype           
2316   11E0             ; START RELATIONAL
2317   11E0 D7            push a
2318   11E1 11            mov a, b
2319   11E2 26 07 00      mov b, 7; END
2320   11E5 B0            cmp a, b
2321   11E6 FD 71         seq ; ==
2322   11E8 E4            pop a
2323   11E9             ; END RELATIONAL
2324   11E9 C0 00 00      cmp b, 0
2325   11EC C6 F5 11      je _if74_exit
2326   11EF             _if74_true:
2327   11EF             ;; break; 
2328   11EF 0A 37 12      jmp _for73_exit ; for break
2329   11F2 0A F5 11      jmp _if74_exit
2330   11F5             _if74_exit:
2331   11F5             ;; if(toktype == INTEGER_CONST || label_exists(token) != -1) num_operands++; 
2332   11F5             _if75_cond:
2333   11F5 29 D5 3A      mov b, [_toktype] ; $toktype           
2334   11F8             ; START RELATIONAL
2335   11F8 D7            push a
2336   11F9 11            mov a, b
2337   11FA 26 05 00      mov b, 5; INTEGER_CONST
2338   11FD B0            cmp a, b
2339   11FE FD 71         seq ; ==
2340   1200 E4            pop a
2341   1201             ; END RELATIONAL
2342   1201 D7            push a
2343   1202 11            mov a, b
2344   1203 26 D9 3A      mov b, _token_data ; $token           
2345   1206 FD AB         swp b
2346   1208 D8            push b
2347   1209 07 39 1D      call label_exists
2348   120C 51 02 00      add sp, 2
2349   120F             ; START RELATIONAL
2350   120F D7            push a
2351   1210 11            mov a, b
2352   1211 26 01 00      mov b, $1
2353   1214 FD 97         neg b
2354   1216 B0            cmp a, b
2355   1217 FD 72         sneq ; !=
2356   1219 E4            pop a
2357   121A             ; END RELATIONAL
2358   121A FD A8         sor a, b ; ||
2359   121C E4            pop a
2360   121D C0 00 00      cmp b, 0
2361   1220 C6 34 12      je _if75_exit
2362   1223             _if75_true:
2363   1223             ;; num_operands++; 
2364   1223 2C 83 FF      mov b, [bp + -125] ; $num_operands             
2365   1226 FD 79         mov g, b
2366   1228 FD 77         inc b
2367   122A FA 83 FF      lea d, [bp + -125] ; $num_operands
2368   122D FD 43         mov [d], b
2369   122F FD 27         mov b, g
2370   1231 0A 34 12      jmp _if75_exit
2371   1234             _if75_exit:
2372   1234             _for73_update:
2373   1234 0A DA 11      jmp _for73_cond
2374   1237             _for73_exit:
2375   1237             ;; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
2376   1237             _if76_cond:
2377   1237 2C 83 FF      mov b, [bp + -125] ; $num_operands             
2378   123A             ; START RELATIONAL
2379   123A D7            push a
2380   123B 11            mov a, b
2381   123C 26 02 00      mov b, $2
2382   123F B0            cmp a, b
2383   1240 FD 7F         sgt ; >
2384   1242 E4            pop a
2385   1243             ; END RELATIONAL
2386   1243 C0 00 00      cmp b, 0
2387   1246 C6 58 12      je _if76_exit
2388   1249             _if76_true:
2389   1249             ;; error("Maximum number of operands per instruction is 2."); 
2390   1249 26 3F 3D      mov b, __s26 ; "Maximum number of operands per instruction is 2."
2391   124C FD AB         swp b
2392   124E D8            push b
2393   124F 07 6B 2E      call error
2394   1252 51 02 00      add sp, 2
2395   1255 0A 58 12      jmp _if76_exit
2396   1258             _if76_exit:
2397   1258             ;; num_operandsexp = exp(2, num_operands); 
2398   1258 FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
2399   125B DA            push d
2400   125C 26 02 00      mov b, $2
2401   125F FD AB         swp b
2402   1261 D8            push b
2403   1262 2C 83 FF      mov b, [bp + -125] ; $num_operands             
2404   1265 FD AB         swp b
2405   1267 D8            push b
2406   1268 07 55 33      call exp
2407   126B 51 04 00      add sp, 4
2408   126E E7            pop d
2409   126F FD 43         mov [d], b
2410   1271             ;; for(i = 0; i < num_operandsexp; i++){ 
2411   1271             _for77_init:
2412   1271 FA 7F FF      lea d, [bp + -129] ; $i         
2413   1274 26 00 00      mov b, $0        
2414   1277 FD 43         mov [d], b
2415   1279             _for77_cond:
2416   1279 2C 7F FF      mov b, [bp + -129] ; $i             
2417   127C             ; START RELATIONAL
2418   127C D7            push a
2419   127D 11            mov a, b
2420   127E 2C 81 FF      mov b, [bp + -127] ; $num_operandsexp             
2421   1281 B0            cmp a, b
2422   1282 FD 73         slt ; < 
2423   1284 E4            pop a
2424   1285             ; END RELATIONAL
2425   1285 C0 00 00      cmp b, 0
2426   1288 C6 4A 16      je _for77_exit
2427   128B             _for77_block:
2428   128B             ;; prog = code_line; 
2429   128B 3B D7 3A      mov d, _prog ; $prog
2430   128E DA            push d
2431   128F FA A1 FF      lea d, [bp + -95] ; $code_line
2432   1292 2D            mov b, d
2433   1293 E7            pop d
2434   1294 FD 43         mov [d], b
2435   1296             ;; get(); 
2436   1296 07 B1 23      call get
2437   1299             ;; strcpy(opcode, token); 
2438   1299 FA E1 FF      lea d, [bp + -31] ; $opcode
2439   129C 2D            mov b, d
2440   129D FD AB         swp b
2441   129F D8            push b
2442   12A0 26 D9 3A      mov b, _token_data ; $token           
2443   12A3 FD AB         swp b
2444   12A5 D8            push b
2445   12A6 07 A2 33      call strcpy
2446   12A9 51 04 00      add sp, 4
2447   12AC             ;; strcat(opcode, " "); 
2448   12AC FA E1 FF      lea d, [bp + -31] ; $opcode
2449   12AF 2D            mov b, d
2450   12B0 FD AB         swp b
2451   12B2 D8            push b
2452   12B3 26 3D 3D      mov b, __s25 ; " "
2453   12B6 FD AB         swp b
2454   12B8 D8            push b
2455   12B9 07 5B 34      call strcat
2456   12BC 51 04 00      add sp, 4
2457   12BF             ;; j = 0; 
2458   12BF FA 7D FF      lea d, [bp + -131] ; $j         
2459   12C2 26 00 00      mov b, $0        
2460   12C5 FD 43         mov [d], b
2461   12C7             ;; for(;;){ 
2462   12C7             _for78_init:
2463   12C7             _for78_cond:
2464   12C7             _for78_block:
2465   12C7             ;; get(); 
2466   12C7 07 B1 23      call get
2467   12CA             ;; if(toktype == END) break; 
2468   12CA             _if79_cond:
2469   12CA 29 D5 3A      mov b, [_toktype] ; $toktype           
2470   12CD             ; START RELATIONAL
2471   12CD D7            push a
2472   12CE 11            mov a, b
2473   12CF 26 07 00      mov b, 7; END
2474   12D2 B0            cmp a, b
2475   12D3 FD 71         seq ; ==
2476   12D5 E4            pop a
2477   12D6             ; END RELATIONAL
2478   12D6 C0 00 00      cmp b, 0
2479   12D9 C6 E2 12      je _if79_exit
2480   12DC             _if79_true:
2481   12DC             ;; break; 
2482   12DC 0A 94 13      jmp _for78_exit ; for break
2483   12DF 0A E2 12      jmp _if79_exit
2484   12E2             _if79_exit:
2485   12E2             ;; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
2486   12E2             _if80_cond:
2487   12E2 29 D5 3A      mov b, [_toktype] ; $toktype           
2488   12E5             ; START RELATIONAL
2489   12E5 D7            push a
2490   12E6 11            mov a, b
2491   12E7 26 05 00      mov b, 5; INTEGER_CONST
2492   12EA B0            cmp a, b
2493   12EB FD 71         seq ; ==
2494   12ED E4            pop a
2495   12EE             ; END RELATIONAL
2496   12EE D7            push a
2497   12EF 11            mov a, b
2498   12F0 26 D9 3A      mov b, _token_data ; $token           
2499   12F3 FD AB         swp b
2500   12F5 D8            push b
2501   12F6 07 39 1D      call label_exists
2502   12F9 51 02 00      add sp, 2
2503   12FC             ; START RELATIONAL
2504   12FC D7            push a
2505   12FD 11            mov a, b
2506   12FE 26 01 00      mov b, $1
2507   1301 FD 97         neg b
2508   1303 B0            cmp a, b
2509   1304 FD 72         sneq ; !=
2510   1306 E4            pop a
2511   1307             ; END RELATIONAL
2512   1307 FD A8         sor a, b ; ||
2513   1309 E4            pop a
2514   130A C0 00 00      cmp b, 0
2515   130D C6 7E 13      je _if80_else
2516   1310             _if80_true:
2517   1310             ;; strcat(opcode, symbols[i*2+j]); 
2518   1310 FA E1 FF      lea d, [bp + -31] ; $opcode
2519   1313 2D            mov b, d
2520   1314 FD AB         swp b
2521   1316 D8            push b
2522   1317 3B 3B 3C      mov d, _symbols_data ; $symbols
2523   131A D7            push a         
2524   131B 2C 7F FF      mov b, [bp + -129] ; $i             
2525   131E             ; START FACTORS
2526   131E D7            push a
2527   131F 11            mov a, b
2528   1320 26 02 00      mov b, $2
2529   1323 AC            mul a, b ; *
2530   1324 11            mov a, b
2531   1325 27            mov b, a
2532   1326 E4            pop a
2533   1327             ; END FACTORS
2534   1327             ; START TERMS
2535   1327 D7            push a
2536   1328 11            mov a, b
2537   1329 2C 7D FF      mov b, [bp + -131] ; $j             
2538   132C 54            add a, b
2539   132D 27            mov b, a
2540   132E E4            pop a
2541   132F             ; END TERMS        
2542   132F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2543   1333 E4            pop a
2544   1334 2A            mov b, [d]
2545   1335 FD AB         swp b
2546   1337 D8            push b
2547   1338 07 5B 34      call strcat
2548   133B 51 04 00      add sp, 4
2549   133E             ;; operand_types[j] = *symbols[i*2+j]; 
2550   133E FA 7A FF      lea d, [bp + -134] ; $operand_types
2551   1341 D7            push a         
2552   1342 2C 7D FF      mov b, [bp + -131] ; $j                     
2553   1345 5A            add d, b
2554   1346 E4            pop a
2555   1347 DA            push d
2556   1348 3B 3B 3C      mov d, _symbols_data ; $symbols
2557   134B D7            push a         
2558   134C 2C 7F FF      mov b, [bp + -129] ; $i             
2559   134F             ; START FACTORS
2560   134F D7            push a
2561   1350 11            mov a, b
2562   1351 26 02 00      mov b, $2
2563   1354 AC            mul a, b ; *
2564   1355 11            mov a, b
2565   1356 27            mov b, a
2566   1357 E4            pop a
2567   1358             ; END FACTORS
2568   1358             ; START TERMS
2569   1358 D7            push a
2570   1359 11            mov a, b
2571   135A 2C 7D FF      mov b, [bp + -131] ; $j             
2572   135D 54            add a, b
2573   135E 27            mov b, a
2574   135F E4            pop a
2575   1360             ; END TERMS        
2576   1360 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2577   1364 E4            pop a
2578   1365 2A            mov b, [d]
2579   1366 74            mov d, b
2580   1367 32            mov bl, [d]
2581   1368 A7 00         mov bh, 0
2582   136A E7            pop d
2583   136B FD 3E         mov [d], bl
2584   136D             ;; j++; 
2585   136D 2C 7D FF      mov b, [bp + -131] ; $j             
2586   1370 FD 79         mov g, b
2587   1372 FD 77         inc b
2588   1374 FA 7D FF      lea d, [bp + -131] ; $j
2589   1377 FD 43         mov [d], b
2590   1379 FD 27         mov b, g
2591   137B 0A 91 13      jmp _if80_exit
2592   137E             _if80_else:
2593   137E             ;; strcat(opcode, token); 
2594   137E FA E1 FF      lea d, [bp + -31] ; $opcode
2595   1381 2D            mov b, d
2596   1382 FD AB         swp b
2597   1384 D8            push b
2598   1385 26 D9 3A      mov b, _token_data ; $token           
2599   1388 FD AB         swp b
2600   138A D8            push b
2601   138B 07 5B 34      call strcat
2602   138E 51 04 00      add sp, 4
2603   1391             _if80_exit:
2604   1391             _for78_update:
2605   1391 0A C7 12      jmp _for78_cond
2606   1394             _for78_exit:
2607   1394             ;; op = search_opcode(opcode); 
2608   1394 FA 87 FF      lea d, [bp + -121] ; $op
2609   1397 DA            push d
2610   1398 FA E1 FF      lea d, [bp + -31] ; $opcode
2611   139B 2D            mov b, d
2612   139C FD AB         swp b
2613   139E D8            push b
2614   139F 07 15 1E      call search_opcode
2615   13A2 51 02 00      add sp, 2
2616   13A5 E7            pop d
2617   13A6 FD 28         mov si, b
2618   13A8 FD 50         mov di, d
2619   13AA 38 1A 00      mov c, 26
2620   13AD FD F5         rep movsb
2621   13AF             ;; if(op.name[0] == '\0') continue; 
2622   13AF             _if81_cond:
2623   13AF FA 87 FF      lea d, [bp + -121] ; $op
2624   13B2 58 00 00      add d, 0
2625   13B5 FD 14         clb
2626   13B7 D7            push a         
2627   13B8 26 00 00      mov b, $0        
2628   13BB 5A            add d, b
2629   13BC E4            pop a
2630   13BD 32            mov bl, [d]
2631   13BE A7 00         mov bh, 0
2632   13C0             ; START RELATIONAL
2633   13C0 D7            push a
2634   13C1 11            mov a, b
2635   13C2 26 00 00      mov b, $0
2636   13C5 B0            cmp a, b
2637   13C6 FD 71         seq ; ==
2638   13C8 E4            pop a
2639   13C9             ; END RELATIONAL
2640   13C9 C0 00 00      cmp b, 0
2641   13CC C6 D5 13      je _if81_exit
2642   13CF             _if81_true:
2643   13CF             ;; continue; 
2644   13CF 0A 39 16      jmp _for77_update ; for continue
2645   13D2 0A D5 13      jmp _if81_exit
2646   13D5             _if81_exit:
2647   13D5             ;; instr_len = 1; 
2648   13D5 FA 85 FF      lea d, [bp + -123] ; $instr_len         
2649   13D8 26 01 00      mov b, $1        
2650   13DB FD 43         mov [d], b
2651   13DD             ;; if(op.opcode_type){ 
2652   13DD             _if82_cond:
2653   13DD FA 87 FF      lea d, [bp + -121] ; $op
2654   13E0 58 19 00      add d, 25
2655   13E3 FD 14         clb
2656   13E5 32            mov bl, [d]
2657   13E6 A7 00         mov bh, 0
2658   13E8 C0 00 00      cmp b, 0
2659   13EB C6 0F 14      je _if82_exit
2660   13EE             _if82_true:
2661   13EE             ;; emit_byte(0xFD, emit_override); 
2662   13EE 26 FD 00      mov b, $fd
2663   13F1 DD            push bl
2664   13F2 34 05 00      mov bl, [bp + 5] ; $emit_override
2665   13F5 A7 00         mov bh, 0             
2666   13F7 DD            push bl
2667   13F8 07 C7 20      call emit_byte
2668   13FB 51 02 00      add sp, 2
2669   13FE             ;; instr_len++; 
2670   13FE 2C 85 FF      mov b, [bp + -123] ; $instr_len             
2671   1401 FD 79         mov g, b
2672   1403 FD 77         inc b
2673   1405 FA 85 FF      lea d, [bp + -123] ; $instr_len
2674   1408 FD 43         mov [d], b
2675   140A FD 27         mov b, g
2676   140C 0A 0F 14      jmp _if82_exit
2677   140F             _if82_exit:
2678   140F             ;; emit_byte(op.opcode, emit_override); 
2679   140F FA 87 FF      lea d, [bp + -121] ; $op
2680   1412 58 18 00      add d, 24
2681   1415 FD 14         clb
2682   1417 32            mov bl, [d]
2683   1418 A7 00         mov bh, 0
2684   141A DD            push bl
2685   141B 34 05 00      mov bl, [bp + 5] ; $emit_override
2686   141E A7 00         mov bh, 0             
2687   1420 DD            push bl
2688   1421 07 C7 20      call emit_byte
2689   1424 51 02 00      add sp, 2
2690   1427             ;; prog = code_line; 
2691   1427 3B D7 3A      mov d, _prog ; $prog
2692   142A DA            push d
2693   142B FA A1 FF      lea d, [bp + -95] ; $code_line
2694   142E 2D            mov b, d
2695   142F E7            pop d
2696   1430 FD 43         mov [d], b
2697   1432             ;; j = 0; 
2698   1432 FA 7D FF      lea d, [bp + -131] ; $j         
2699   1435 26 00 00      mov b, $0        
2700   1438 FD 43         mov [d], b
2701   143A             ;; get(); 
2702   143A 07 B1 23      call get
2703   143D             ;; for(;;){ 
2704   143D             _for83_init:
2705   143D             _for83_cond:
2706   143D             _for83_block:
2707   143D             ;; get(); 
2708   143D 07 B1 23      call get
2709   1440             ;; if(toktype == END) break; 
2710   1440             _if84_cond:
2711   1440 29 D5 3A      mov b, [_toktype] ; $toktype           
2712   1443             ; START RELATIONAL
2713   1443 D7            push a
2714   1444 11            mov a, b
2715   1445 26 07 00      mov b, 7; END
2716   1448 B0            cmp a, b
2717   1449 FD 71         seq ; ==
2718   144B E4            pop a
2719   144C             ; END RELATIONAL
2720   144C C0 00 00      cmp b, 0
2721   144F C6 58 14      je _if84_exit
2722   1452             _if84_true:
2723   1452             ;; break; 
2724   1452 0A DC 15      jmp _for83_exit ; for break
2725   1455 0A 58 14      jmp _if84_exit
2726   1458             _if84_exit:
2727   1458             ;; if(toktype == IDENTIFIER){ 
2728   1458             _if85_cond:
2729   1458 29 D5 3A      mov b, [_toktype] ; $toktype           
2730   145B             ; START RELATIONAL
2731   145B D7            push a
2732   145C 11            mov a, b
2733   145D 26 06 00      mov b, 6; IDENTIFIER
2734   1460 B0            cmp a, b
2735   1461 FD 71         seq ; ==
2736   1463 E4            pop a
2737   1464             ; END RELATIONAL
2738   1464 C0 00 00      cmp b, 0
2739   1467 C6 3A 15      je _if85_else
2740   146A             _if85_true:
2741   146A             ;; if(label_exists(token) != -1){ 
2742   146A             _if86_cond:
2743   146A 26 D9 3A      mov b, _token_data ; $token           
2744   146D FD AB         swp b
2745   146F D8            push b
2746   1470 07 39 1D      call label_exists
2747   1473 51 02 00      add sp, 2
2748   1476             ; START RELATIONAL
2749   1476 D7            push a
2750   1477 11            mov a, b
2751   1478 26 01 00      mov b, $1
2752   147B FD 97         neg b
2753   147D B0            cmp a, b
2754   147E FD 72         sneq ; !=
2755   1480 E4            pop a
2756   1481             ; END RELATIONAL
2757   1481 C0 00 00      cmp b, 0
2758   1484 C6 0B 15      je _if86_else
2759   1487             _if86_true:
2760   1487             ;; if(operand_types[j] == '#'){ 
2761   1487             _if87_cond:
2762   1487 FA 7A FF      lea d, [bp + -134] ; $operand_types
2763   148A D7            push a         
2764   148B 2C 7D FF      mov b, [bp + -131] ; $j                     
2765   148E 5A            add d, b
2766   148F E4            pop a
2767   1490 32            mov bl, [d]
2768   1491 A7 00         mov bh, 0
2769   1493             ; START RELATIONAL
2770   1493 D7            push a
2771   1494 11            mov a, b
2772   1495 26 23 00      mov b, $23
2773   1498 B0            cmp a, b
2774   1499 FD 71         seq ; ==
2775   149B E4            pop a
2776   149C             ; END RELATIONAL
2777   149C C0 00 00      cmp b, 0
2778   149F C6 B1 14      je _if87_else
2779   14A2             _if87_true:
2780   14A2             ;; error("8bit operand expected but 16bit label given."); 
2781   14A2 26 70 3D      mov b, __s27 ; "8bit operand expected but 16bit label given."
2782   14A5 FD AB         swp b
2783   14A7 D8            push b
2784   14A8 07 6B 2E      call error
2785   14AB 51 02 00      add sp, 2
2786   14AE 0A FA 14      jmp _if87_exit
2787   14B1             _if87_else:
2788   14B1             ;; if(operand_types[j] == '@'){ 
2789   14B1             _if88_cond:
2790   14B1 FA 7A FF      lea d, [bp + -134] ; $operand_types
2791   14B4 D7            push a         
2792   14B5 2C 7D FF      mov b, [bp + -131] ; $j                     
2793   14B8 5A            add d, b
2794   14B9 E4            pop a
2795   14BA 32            mov bl, [d]
2796   14BB A7 00         mov bh, 0
2797   14BD             ; START RELATIONAL
2798   14BD D7            push a
2799   14BE 11            mov a, b
2800   14BF 26 40 00      mov b, $40
2801   14C2 B0            cmp a, b
2802   14C3 FD 71         seq ; ==
2803   14C5 E4            pop a
2804   14C6             ; END RELATIONAL
2805   14C6 C0 00 00      cmp b, 0
2806   14C9 C6 FA 14      je _if88_exit
2807   14CC             _if88_true:
2808   14CC             ;; emit_word(get_label_addr(token), emit_override); 
2809   14CC 26 D9 3A      mov b, _token_data ; $token           
2810   14CF FD AB         swp b
2811   14D1 D8            push b
2812   14D2 07 B1 1C      call get_label_addr
2813   14D5 51 02 00      add sp, 2
2814   14D8 FD AB         swp b
2815   14DA D8            push b
2816   14DB 34 05 00      mov bl, [bp + 5] ; $emit_override
2817   14DE A7 00         mov bh, 0             
2818   14E0 DD            push bl
2819   14E1 07 F5 20      call emit_word
2820   14E4 51 03 00      add sp, 3
2821   14E7             ;; instr_len = instr_len + 2; 
2822   14E7 FA 85 FF      lea d, [bp + -123] ; $instr_len         
2823   14EA 2C 85 FF      mov b, [bp + -123] ; $instr_len             
2824   14ED             ; START TERMS
2825   14ED D7            push a
2826   14EE 11            mov a, b
2827   14EF 26 02 00      mov b, $2
2828   14F2 54            add a, b
2829   14F3 27            mov b, a
2830   14F4 E4            pop a
2831   14F5             ; END TERMS        
2832   14F5 FD 43         mov [d], b
2833   14F7 0A FA 14      jmp _if88_exit
2834   14FA             _if88_exit:
2835   14FA             _if87_exit:
2836   14FA             ;; j++; 
2837   14FA 2C 7D FF      mov b, [bp + -131] ; $j             
2838   14FD FD 79         mov g, b
2839   14FF FD 77         inc b
2840   1501 FA 7D FF      lea d, [bp + -131] ; $j
2841   1504 FD 43         mov [d], b
2842   1506 FD 27         mov b, g
2843   1508 0A 37 15      jmp _if86_exit
2844   150B             _if86_else:
2845   150B             ;; if(!is_reserved(token)){ 
2846   150B             _if89_cond:
2847   150B 26 D9 3A      mov b, _token_data ; $token           
2848   150E FD AB         swp b
2849   1510 D8            push b
2850   1511 07 20 19      call is_reserved
2851   1514 51 02 00      add sp, 2
2852   1517 C0 00 00      cmp b, 0
2853   151A FD 71         seq ; !
2854   151C C0 00 00      cmp b, 0
2855   151F C6 37 15      je _if89_exit
2856   1522             _if89_true:
2857   1522             ;; error_s("Undeclared label: ", token); 
2858   1522 26 A5 3D      mov b, __s30 ; "Undeclared label: "
2859   1525 FD AB         swp b
2860   1527 D8            push b
2861   1528 26 D9 3A      mov b, _token_data ; $token           
2862   152B FD AB         swp b
2863   152D D8            push b
2864   152E 07 97 2E      call error_s
2865   1531 51 04 00      add sp, 4
2866   1534 0A 37 15      jmp _if89_exit
2867   1537             _if89_exit:
2868   1537             _if86_exit:
2869   1537 0A D9 15      jmp _if85_exit
2870   153A             _if85_else:
2871   153A             ;; if(toktype == INTEGER_CONST){ 
2872   153A             _if90_cond:
2873   153A 29 D5 3A      mov b, [_toktype] ; $toktype           
2874   153D             ; START RELATIONAL
2875   153D D7            push a
2876   153E 11            mov a, b
2877   153F 26 05 00      mov b, 5; INTEGER_CONST
2878   1542 B0            cmp a, b
2879   1543 FD 71         seq ; ==
2880   1545 E4            pop a
2881   1546             ; END RELATIONAL
2882   1546 C0 00 00      cmp b, 0
2883   1549 C6 D9 15      je _if90_exit
2884   154C             _if90_true:
2885   154C             ;; if(operand_types[j] == '#'){ 
2886   154C             _if91_cond:
2887   154C FA 7A FF      lea d, [bp + -134] ; $operand_types
2888   154F D7            push a         
2889   1550 2C 7D FF      mov b, [bp + -131] ; $j                     
2890   1553 5A            add d, b
2891   1554 E4            pop a
2892   1555 32            mov bl, [d]
2893   1556 A7 00         mov bh, 0
2894   1558             ; START RELATIONAL
2895   1558 D7            push a
2896   1559 11            mov a, b
2897   155A 26 23 00      mov b, $23
2898   155D B0            cmp a, b
2899   155E FD 71         seq ; ==
2900   1560 E4            pop a
2901   1561             ; END RELATIONAL
2902   1561 C0 00 00      cmp b, 0
2903   1564 C6 88 15      je _if91_else
2904   1567             _if91_true:
2905   1567             ;; emit_byte(int_const, emit_override); 
2906   1567 29 19 3C      mov b, [_int_const] ; $int_const           
2907   156A DD            push bl
2908   156B 34 05 00      mov bl, [bp + 5] ; $emit_override
2909   156E A7 00         mov bh, 0             
2910   1570 DD            push bl
2911   1571 07 C7 20      call emit_byte
2912   1574 51 02 00      add sp, 2
2913   1577             ;; instr_len++; 
2914   1577 2C 85 FF      mov b, [bp + -123] ; $instr_len             
2915   157A FD 79         mov g, b
2916   157C FD 77         inc b
2917   157E FA 85 FF      lea d, [bp + -123] ; $instr_len
2918   1581 FD 43         mov [d], b
2919   1583 FD 27         mov b, g
2920   1585 0A C8 15      jmp _if91_exit
2921   1588             _if91_else:
2922   1588             ;; if(operand_types[j] == '@'){ 
2923   1588             _if92_cond:
2924   1588 FA 7A FF      lea d, [bp + -134] ; $operand_types
2925   158B D7            push a         
2926   158C 2C 7D FF      mov b, [bp + -131] ; $j                     
2927   158F 5A            add d, b
2928   1590 E4            pop a
2929   1591 32            mov bl, [d]
2930   1592 A7 00         mov bh, 0
2931   1594             ; START RELATIONAL
2932   1594 D7            push a
2933   1595 11            mov a, b
2934   1596 26 40 00      mov b, $40
2935   1599 B0            cmp a, b
2936   159A FD 71         seq ; ==
2937   159C E4            pop a
2938   159D             ; END RELATIONAL
2939   159D C0 00 00      cmp b, 0
2940   15A0 C6 C8 15      je _if92_exit
2941   15A3             _if92_true:
2942   15A3             ;; emit_word(int_const, emit_override); 
2943   15A3 29 19 3C      mov b, [_int_const] ; $int_const           
2944   15A6 FD AB         swp b
2945   15A8 D8            push b
2946   15A9 34 05 00      mov bl, [bp + 5] ; $emit_override
2947   15AC A7 00         mov bh, 0             
2948   15AE DD            push bl
2949   15AF 07 F5 20      call emit_word
2950   15B2 51 03 00      add sp, 3
2951   15B5             ;; instr_len = instr_len + 2; 
2952   15B5 FA 85 FF      lea d, [bp + -123] ; $instr_len         
2953   15B8 2C 85 FF      mov b, [bp + -123] ; $instr_len             
2954   15BB             ; START TERMS
2955   15BB D7            push a
2956   15BC 11            mov a, b
2957   15BD 26 02 00      mov b, $2
2958   15C0 54            add a, b
2959   15C1 27            mov b, a
2960   15C2 E4            pop a
2961   15C3             ; END TERMS        
2962   15C3 FD 43         mov [d], b
2963   15C5 0A C8 15      jmp _if92_exit
2964   15C8             _if92_exit:
2965   15C8             _if91_exit:
2966   15C8             ;; j++; 
2967   15C8 2C 7D FF      mov b, [bp + -131] ; $j             
2968   15CB FD 79         mov g, b
2969   15CD FD 77         inc b
2970   15CF FA 7D FF      lea d, [bp + -131] ; $j
2971   15D2 FD 43         mov [d], b
2972   15D4 FD 27         mov b, g
2973   15D6 0A D9 15      jmp _if90_exit
2974   15D9             _if90_exit:
2975   15D9             _if85_exit:
2976   15D9             _for83_update:
2977   15D9 0A 3D 14      jmp _for83_cond
2978   15DC             _for83_exit:
2979   15DC             ;; if(!emit_override){ 
2980   15DC             _if93_cond:
2981   15DC 34 05 00      mov bl, [bp + 5] ; $emit_override
2982   15DF A7 00         mov bh, 0             
2983   15E1 C0 00 00      cmp b, 0
2984   15E4 FD 71         seq ; !
2985   15E6 C0 00 00      cmp b, 0
2986   15E9 C6 36 16      je _if93_exit
2987   15EC             _if93_true:
2988   15EC             ;; printx16(old_pc); print(" ("); printu(instr_len); print(") : "); 
2989   15EC 2C 78 FF      mov b, [bp + -136] ; $old_pc             
2990   15EF FD AB         swp b
2991   15F1 D8            push b
2992   15F2 07 EA 2F      call printx16
2993   15F5 51 02 00      add sp, 2
2994   15F8             ;; print(" ("); printu(instr_len); print(") : "); 
2995   15F8 26 9D 3D      mov b, __s28 ; " ("
2996   15FB FD AB         swp b
2997   15FD D8            push b
2998   15FE 07 FB 32      call print
2999   1601 51 02 00      add sp, 2
3000   1604             ;; printu(instr_len); print(") : "); 
3001   1604 2C 85 FF      mov b, [bp + -123] ; $instr_len             
3002   1607 FD AB         swp b
3003   1609 D8            push b
3004   160A 07 36 32      call printu
3005   160D 51 02 00      add sp, 2
3006   1610             ;; print(") : "); 
3007   1610 26 A0 3D      mov b, __s29 ; ") : "
3008   1613 FD AB         swp b
3009   1615 D8            push b
3010   1616 07 FB 32      call print
3011   1619 51 02 00      add sp, 2
3012   161C             ;; print(code_line); putchar('\n'); 
3013   161C FA A1 FF      lea d, [bp + -95] ; $code_line
3014   161F 2D            mov b, d
3015   1620 FD AB         swp b
3016   1622 D8            push b
3017   1623 07 FB 32      call print
3018   1626 51 02 00      add sp, 2
3019   1629             ;; putchar('\n'); 
3020   1629 26 0A 00      mov b, $a
3021   162C DD            push bl
3022   162D 07 EF 32      call putchar
3023   1630 51 01 00      add sp, 1
3024   1633 0A 36 16      jmp _if93_exit
3025   1636             _if93_exit:
3026   1636             ;; break; 
3027   1636 0A 4A 16      jmp _for77_exit ; for break
3028   1639             _for77_update:
3029   1639 2C 7F FF      mov b, [bp + -129] ; $i             
3030   163C FD 79         mov g, b
3031   163E FD 77         inc b
3032   1640 FA 7F FF      lea d, [bp + -129] ; $i
3033   1643 FD 43         mov [d], b
3034   1645 FD 27         mov b, g
3035   1647 0A 79 12      jmp _for77_cond
3036   164A             _for77_exit:
3037   164A             _if67_exit:
3038   164A             ;; pop_prog(); 
3039   164A 07 14 2F      call pop_prog
3040   164D F9            leave
3041   164E 09            ret
3042   164F             
3043   164F             parse_text:
3044   164F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3045   1652             ; $temp_prog 
3046   1652 52 02 00      sub sp, 2
3047   1655             ;; print("Parsing TEXT section...\n"); 
3048   1655 26 B8 3D      mov b, __s31 ; "Parsing TEXT section...\n"
3049   1658 FD AB         swp b
3050   165A D8            push b
3051   165B 07 FB 32      call print
3052   165E 51 02 00      add sp, 2
3053   1661             ;; prog = program; 
3054   1661 3B D7 3A      mov d, _prog ; $prog         
3055   1664 29 1B 3C      mov b, [_program] ; $program                   
3056   1667 FD 43         mov [d], b
3057   1669             ;; bin_p = bin_out + _org; 
3058   1669 3B 1F 3C      mov d, _bin_p ; $bin_p         
3059   166C 29 1D 3C      mov b, [_bin_out] ; $bin_out           
3060   166F             ; START TERMS
3061   166F D7            push a
3062   1670 11            mov a, b
3063   1671 29 CE 3A      mov b, [__org] ; $_org           
3064   1674 54            add a, b
3065   1675 27            mov b, a
3066   1676 E4            pop a
3067   1677             ; END TERMS        
3068   1677 FD 43         mov [d], b
3069   1679             ;; pc = _org; 
3070   1679 3B D0 3A      mov d, _pc ; $pc         
3071   167C 29 CE 3A      mov b, [__org] ; $_org                   
3072   167F FD 43         mov [d], b
3073   1681             ;; for(;;){ 
3074   1681             _for94_init:
3075   1681             _for94_cond:
3076   1681             _for94_block:
3077   1681             ;; get(); 
3078   1681 07 B1 23      call get
3079   1684             ;; if(toktype == END) error("TEXT section not found."); 
3080   1684             _if95_cond:
3081   1684 29 D5 3A      mov b, [_toktype] ; $toktype           
3082   1687             ; START RELATIONAL
3083   1687 D7            push a
3084   1688 11            mov a, b
3085   1689 26 07 00      mov b, 7; END
3086   168C B0            cmp a, b
3087   168D FD 71         seq ; ==
3088   168F E4            pop a
3089   1690             ; END RELATIONAL
3090   1690 C0 00 00      cmp b, 0
3091   1693 C6 A5 16      je _if95_exit
3092   1696             _if95_true:
3093   1696             ;; error("TEXT section not found."); 
3094   1696 26 D1 3D      mov b, __s32 ; "TEXT section not found."
3095   1699 FD AB         swp b
3096   169B D8            push b
3097   169C 07 6B 2E      call error
3098   169F 51 02 00      add sp, 2
3099   16A2 0A A5 16      jmp _if95_exit
3100   16A5             _if95_exit:
3101   16A5             ;; if(tok == TEXT){ 
3102   16A5             _if96_cond:
3103   16A5 29 D3 3A      mov b, [_tok] ; $tok           
3104   16A8             ; START RELATIONAL
3105   16A8 D7            push a
3106   16A9 11            mov a, b
3107   16AA 26 04 00      mov b, 4; TEXT
3108   16AD B0            cmp a, b
3109   16AE FD 71         seq ; ==
3110   16B0 E4            pop a
3111   16B1             ; END RELATIONAL
3112   16B1 C0 00 00      cmp b, 0
3113   16B4 C6 BD 16      je _if96_exit
3114   16B7             _if96_true:
3115   16B7             ;; break; 
3116   16B7 0A C0 16      jmp _for94_exit ; for break
3117   16BA 0A BD 16      jmp _if96_exit
3118   16BD             _if96_exit:
3119   16BD             _for94_update:
3120   16BD 0A 81 16      jmp _for94_cond
3121   16C0             _for94_exit:
3122   16C0             ;; for(;;){ 
3123   16C0             _for97_init:
3124   16C0             _for97_cond:
3125   16C0             _for97_block:
3126   16C0             ;; get(); back(); 
3127   16C0 07 B1 23      call get
3128   16C3             ;; back(); 
3129   16C3 07 21 21      call back
3130   16C6             ;; temp_prog = prog; 
3131   16C6 FA FF FF      lea d, [bp + -1] ; $temp_prog         
3132   16C9 29 D7 3A      mov b, [_prog] ; $prog                   
3133   16CC FD 43         mov [d], b
3134   16CE             ;; get(); 
3135   16CE 07 B1 23      call get
3136   16D1             ;; if(toktype == END) error("TEXT section end not found."); 
3137   16D1             _if98_cond:
3138   16D1 29 D5 3A      mov b, [_toktype] ; $toktype           
3139   16D4             ; START RELATIONAL
3140   16D4 D7            push a
3141   16D5 11            mov a, b
3142   16D6 26 07 00      mov b, 7; END
3143   16D9 B0            cmp a, b
3144   16DA FD 71         seq ; ==
3145   16DC E4            pop a
3146   16DD             ; END RELATIONAL
3147   16DD C0 00 00      cmp b, 0
3148   16E0 C6 F2 16      je _if98_exit
3149   16E3             _if98_true:
3150   16E3             ;; error("TEXT section end not found."); 
3151   16E3 26 E9 3D      mov b, __s33 ; "TEXT section end not found."
3152   16E6 FD AB         swp b
3153   16E8 D8            push b
3154   16E9 07 6B 2E      call error
3155   16EC 51 02 00      add sp, 2
3156   16EF 0A F2 16      jmp _if98_exit
3157   16F2             _if98_exit:
3158   16F2             ;; if(tok == DOT){ 
3159   16F2             _if99_cond:
3160   16F2 29 D3 3A      mov b, [_tok] ; $tok           
3161   16F5             ; START RELATIONAL
3162   16F5 D7            push a
3163   16F6 11            mov a, b
3164   16F7 26 10 00      mov b, 16; DOT
3165   16FA B0            cmp a, b
3166   16FB FD 71         seq ; ==
3167   16FD E4            pop a
3168   16FE             ; END RELATIONAL
3169   16FE C0 00 00      cmp b, 0
3170   1701 C6 2E 17      je _if99_else
3171   1704             _if99_true:
3172   1704             ;; get(); 
3173   1704 07 B1 23      call get
3174   1707             ;; if(tok == SEGMENT_END) break; 
3175   1707             _if100_cond:
3176   1707 29 D3 3A      mov b, [_tok] ; $tok           
3177   170A             ; START RELATIONAL
3178   170A D7            push a
3179   170B 11            mov a, b
3180   170C 26 05 00      mov b, 5; SEGMENT_END
3181   170F B0            cmp a, b
3182   1710 FD 71         seq ; ==
3183   1712 E4            pop a
3184   1713             ; END RELATIONAL
3185   1713 C0 00 00      cmp b, 0
3186   1716 C6 1F 17      je _if100_else
3187   1719             _if100_true:
3188   1719             ;; break; 
3189   1719 0A 70 17      jmp _for97_exit ; for break
3190   171C 0A 2B 17      jmp _if100_exit
3191   171F             _if100_else:
3192   171F             ;; error("Unexpected directive."); 
3193   171F 26 05 3E      mov b, __s34 ; "Unexpected directive."
3194   1722 FD AB         swp b
3195   1724 D8            push b
3196   1725 07 6B 2E      call error
3197   1728 51 02 00      add sp, 2
3198   172B             _if100_exit:
3199   172B 0A 6D 17      jmp _if99_exit
3200   172E             _if99_else:
3201   172E             ;; if(toktype == IDENTIFIER){ 
3202   172E             _if101_cond:
3203   172E 29 D5 3A      mov b, [_toktype] ; $toktype           
3204   1731             ; START RELATIONAL
3205   1731 D7            push a
3206   1732 11            mov a, b
3207   1733 26 06 00      mov b, 6; IDENTIFIER
3208   1736 B0            cmp a, b
3209   1737 FD 71         seq ; ==
3210   1739 E4            pop a
3211   173A             ; END RELATIONAL
3212   173A C0 00 00      cmp b, 0
3213   173D C6 6D 17      je _if101_exit
3214   1740             _if101_true:
3215   1740             ;; get(); 
3216   1740 07 B1 23      call get
3217   1743             ;; if(tok != COLON){ 
3218   1743             _if102_cond:
3219   1743 29 D3 3A      mov b, [_tok] ; $tok           
3220   1746             ; START RELATIONAL
3221   1746 D7            push a
3222   1747 11            mov a, b
3223   1748 26 0D 00      mov b, 13; COLON
3224   174B B0            cmp a, b
3225   174C FD 72         sneq ; !=
3226   174E E4            pop a
3227   174F             ; END RELATIONAL
3228   174F C0 00 00      cmp b, 0
3229   1752 C6 6A 17      je _if102_exit
3230   1755             _if102_true:
3231   1755             ;; prog = temp_prog; 
3232   1755 3B D7 3A      mov d, _prog ; $prog         
3233   1758 2C FF FF      mov b, [bp + -1] ; $temp_prog                     
3234   175B FD 43         mov [d], b
3235   175D             ;; parse_instr(0); 
3236   175D 26 00 00      mov b, $0
3237   1760 DD            push bl
3238   1761 07 B0 0F      call parse_instr
3239   1764 51 01 00      add sp, 1
3240   1767 0A 6A 17      jmp _if102_exit
3241   176A             _if102_exit:
3242   176A 0A 6D 17      jmp _if101_exit
3243   176D             _if101_exit:
3244   176D             _if99_exit:
3245   176D             _for97_update:
3246   176D 0A C0 16      jmp _for97_cond
3247   1770             _for97_exit:
3248   1770             ;; print("Done.\n\n"); 
3249   1770 26 1B 3E      mov b, __s35 ; "Done.\n\n"
3250   1773 FD AB         swp b
3251   1775 D8            push b
3252   1776 07 FB 32      call print
3253   1779 51 02 00      add sp, 2
3254   177C F9            leave
3255   177D 09            ret
3256   177E             
3257   177E             debug:
3258   177E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3259   1781             ;; print("\n"); 
3260   1781 26 6F 3C      mov b, __s9 ; "\n"
3261   1784 FD AB         swp b
3262   1786 D8            push b
3263   1787 07 FB 32      call print
3264   178A 51 02 00      add sp, 2
3265   178D             ;; print("Prog Offset: "); printx16(prog-program); print(", "); 
3266   178D 26 23 3E      mov b, __s36 ; "Prog Offset: "
3267   1790 FD AB         swp b
3268   1792 D8            push b
3269   1793 07 FB 32      call print
3270   1796 51 02 00      add sp, 2
3271   1799             ;; printx16(prog-program); print(", "); 
3272   1799 29 D7 3A      mov b, [_prog] ; $prog           
3273   179C             ; START TERMS
3274   179C D7            push a
3275   179D 11            mov a, b
3276   179E 29 1B 3C      mov b, [_program] ; $program           
3277   17A1 60            sub a, b
3278   17A2 27            mov b, a
3279   17A3 E4            pop a
3280   17A4             ; END TERMS
3281   17A4 FD AB         swp b
3282   17A6 D8            push b
3283   17A7 07 EA 2F      call printx16
3284   17AA 51 02 00      add sp, 2
3285   17AD             ;; print(", "); 
3286   17AD 26 B9 3C      mov b, __s14 ; ", "
3287   17B0 FD AB         swp b
3288   17B2 D8            push b
3289   17B3 07 FB 32      call print
3290   17B6 51 02 00      add sp, 2
3291   17B9             ;; print("Prog value : "); putchar(*prog); print("\n"); 
3292   17B9 26 31 3E      mov b, __s37 ; "Prog value : "
3293   17BC FD AB         swp b
3294   17BE D8            push b
3295   17BF 07 FB 32      call print
3296   17C2 51 02 00      add sp, 2
3297   17C5             ;; putchar(*prog); print("\n"); 
3298   17C5 29 D7 3A      mov b, [_prog] ; $prog           
3299   17C8 74            mov d, b
3300   17C9 32            mov bl, [d]
3301   17CA A7 00         mov bh, 0
3302   17CC DD            push bl
3303   17CD 07 EF 32      call putchar
3304   17D0 51 01 00      add sp, 1
3305   17D3             ;; print("\n"); 
3306   17D3 26 6F 3C      mov b, __s9 ; "\n"
3307   17D6 FD AB         swp b
3308   17D8 D8            push b
3309   17D9 07 FB 32      call print
3310   17DC 51 02 00      add sp, 2
3311   17DF             ;; print("Token       : "); print(token); print(", "); 
3312   17DF 26 3F 3E      mov b, __s38 ; "Token       : "
3313   17E2 FD AB         swp b
3314   17E4 D8            push b
3315   17E5 07 FB 32      call print
3316   17E8 51 02 00      add sp, 2
3317   17EB             ;; print(token); print(", "); 
3318   17EB 26 D9 3A      mov b, _token_data ; $token           
3319   17EE FD AB         swp b
3320   17F0 D8            push b
3321   17F1 07 FB 32      call print
3322   17F4 51 02 00      add sp, 2
3323   17F7             ;; print(", "); 
3324   17F7 26 B9 3C      mov b, __s14 ; ", "
3325   17FA FD AB         swp b
3326   17FC D8            push b
3327   17FD 07 FB 32      call print
3328   1800 51 02 00      add sp, 2
3329   1803             ;; print("Tok: "); printu(tok); print(", "); 
3330   1803 26 4E 3E      mov b, __s39 ; "Tok: "
3331   1806 FD AB         swp b
3332   1808 D8            push b
3333   1809 07 FB 32      call print
3334   180C 51 02 00      add sp, 2
3335   180F             ;; printu(tok); print(", "); 
3336   180F 29 D3 3A      mov b, [_tok] ; $tok           
3337   1812 FD AB         swp b
3338   1814 D8            push b
3339   1815 07 36 32      call printu
3340   1818 51 02 00      add sp, 2
3341   181B             ;; print(", "); 
3342   181B 26 B9 3C      mov b, __s14 ; ", "
3343   181E FD AB         swp b
3344   1820 D8            push b
3345   1821 07 FB 32      call print
3346   1824 51 02 00      add sp, 2
3347   1827             ;; print("Toktype: "); printu(toktype); print("\n"); 
3348   1827 26 54 3E      mov b, __s40 ; "Toktype: "
3349   182A FD AB         swp b
3350   182C D8            push b
3351   182D 07 FB 32      call print
3352   1830 51 02 00      add sp, 2
3353   1833             ;; printu(toktype); print("\n"); 
3354   1833 29 D5 3A      mov b, [_toktype] ; $toktype           
3355   1836 FD AB         swp b
3356   1838 D8            push b
3357   1839 07 36 32      call printu
3358   183C 51 02 00      add sp, 2
3359   183F             ;; print("\n"); 
3360   183F 26 6F 3C      mov b, __s9 ; "\n"
3361   1842 FD AB         swp b
3362   1844 D8            push b
3363   1845 07 FB 32      call print
3364   1848 51 02 00      add sp, 2
3365   184B             ;; print("StringConst : "); print(string_const); print("\n"); 
3366   184B 26 5E 3E      mov b, __s41 ; "StringConst : "
3367   184E FD AB         swp b
3368   1850 D8            push b
3369   1851 07 FB 32      call print
3370   1854 51 02 00      add sp, 2
3371   1857             ;; print(string_const); print("\n"); 
3372   1857 26 19 3B      mov b, _string_const_data ; $string_const           
3373   185A FD AB         swp b
3374   185C D8            push b
3375   185D 07 FB 32      call print
3376   1860 51 02 00      add sp, 2
3377   1863             ;; print("\n"); 
3378   1863 26 6F 3C      mov b, __s9 ; "\n"
3379   1866 FD AB         swp b
3380   1868 D8            push b
3381   1869 07 FB 32      call print
3382   186C 51 02 00      add sp, 2
3383   186F             ;; print("PC          : "); printx16(pc); 
3384   186F 26 6D 3E      mov b, __s42 ; "PC          : "
3385   1872 FD AB         swp b
3386   1874 D8            push b
3387   1875 07 FB 32      call print
3388   1878 51 02 00      add sp, 2
3389   187B             ;; printx16(pc); 
3390   187B 29 D0 3A      mov b, [_pc] ; $pc           
3391   187E FD AB         swp b
3392   1880 D8            push b
3393   1881 07 EA 2F      call printx16
3394   1884 51 02 00      add sp, 2
3395   1887             ;; print("\n"); 
3396   1887 26 6F 3C      mov b, __s9 ; "\n"
3397   188A FD AB         swp b
3398   188C D8            push b
3399   188D 07 FB 32      call print
3400   1890 51 02 00      add sp, 2
3401   1893 F9            leave
3402   1894 09            ret
3403   1895             
3404   1895             display_output:
3405   1895 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3406   1898             ; $i 
3407   1898             ; $p 
3408   1898 52 04 00      sub sp, 4
3409   189B             ;; print("\nAssembly complete.\n"); 
3410   189B 26 7C 3E      mov b, __s43 ; "\nAssembly complete.\n"
3411   189E FD AB         swp b
3412   18A0 D8            push b
3413   18A1 07 FB 32      call print
3414   18A4 51 02 00      add sp, 2
3415   18A7             ;; print_info2("Program size: ", prog_size, "\n"); 
3416   18A7 26 91 3E      mov b, __s44 ; "Program size: "
3417   18AA FD AB         swp b
3418   18AC D8            push b
3419   18AD 29 39 3C      mov b, [_prog_size] ; $prog_size           
3420   18B0 FD AB         swp b
3421   18B2 D8            push b
3422   18B3 26 6F 3C      mov b, __s9 ; "\n"
3423   18B6 FD AB         swp b
3424   18B8 D8            push b
3425   18B9 07 DD 1D      call print_info2
3426   18BC 51 06 00      add sp, 6
3427   18BF             ;; print("Listing: \n"); 
3428   18BF 26 A0 3E      mov b, __s45 ; "Listing: \n"
3429   18C2 FD AB         swp b
3430   18C4 D8            push b
3431   18C5 07 FB 32      call print
3432   18C8 51 02 00      add sp, 2
3433   18CB             ;; p = bin_out + _org; 
3434   18CB FA FD FF      lea d, [bp + -3] ; $p         
3435   18CE 29 1D 3C      mov b, [_bin_out] ; $bin_out           
3436   18D1             ; START TERMS
3437   18D1 D7            push a
3438   18D2 11            mov a, b
3439   18D3 29 CE 3A      mov b, [__org] ; $_org           
3440   18D6 54            add a, b
3441   18D7 27            mov b, a
3442   18D8 E4            pop a
3443   18D9             ; END TERMS        
3444   18D9 FD 43         mov [d], b
3445   18DB             ;; for(;;){ 
3446   18DB             _for103_init:
3447   18DB             _for103_cond:
3448   18DB             _for103_block:
3449   18DB             ;; if(p == bin_p) break; 
3450   18DB             _if104_cond:
3451   18DB 2C FD FF      mov b, [bp + -3] ; $p             
3452   18DE             ; START RELATIONAL
3453   18DE D7            push a
3454   18DF 11            mov a, b
3455   18E0 29 1F 3C      mov b, [_bin_p] ; $bin_p           
3456   18E3 B0            cmp a, b
3457   18E4 FD 71         seq ; ==
3458   18E6 E4            pop a
3459   18E7             ; END RELATIONAL
3460   18E7 C0 00 00      cmp b, 0
3461   18EA C6 F3 18      je _if104_exit
3462   18ED             _if104_true:
3463   18ED             ;; break; 
3464   18ED 0A 12 19      jmp _for103_exit ; for break
3465   18F0 0A F3 18      jmp _if104_exit
3466   18F3             _if104_exit:
3467   18F3             ;; printx8(*p);  
3468   18F3 2C FD FF      mov b, [bp + -3] ; $p             
3469   18F6 74            mov d, b
3470   18F7 32            mov bl, [d]
3471   18F8 A7 00         mov bh, 0
3472   18FA DD            push bl
3473   18FB 07 F5 2F      call printx8
3474   18FE 51 01 00      add sp, 1
3475   1901             ;; p++; 
3476   1901 2C FD FF      mov b, [bp + -3] ; $p             
3477   1904 FD 79         mov g, b
3478   1906 FD 77         inc b
3479   1908 FA FD FF      lea d, [bp + -3] ; $p
3480   190B FD 43         mov [d], b
3481   190D FD 27         mov b, g
3482   190F             _for103_update:
3483   190F 0A DB 18      jmp _for103_cond
3484   1912             _for103_exit:
3485   1912             ;; print("\n"); 
3486   1912 26 6F 3C      mov b, __s9 ; "\n"
3487   1915 FD AB         swp b
3488   1917 D8            push b
3489   1918 07 FB 32      call print
3490   191B 51 02 00      add sp, 2
3491   191E F9            leave
3492   191F 09            ret
3493   1920             
3494   1920             is_reserved:
3495   1920 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3496   1923             ;; return !strcmp(name, "a") 
3497   1923 2C 05 00      mov b, [bp + 5] ; $name             
3498   1926 FD AB         swp b
3499   1928 D8            push b
3500   1929 26 AB 3E      mov b, __s46 ; "a"
3501   192C FD AB         swp b
3502   192E D8            push b
3503   192F 07 FE 33      call strcmp
3504   1932 51 04 00      add sp, 4
3505   1935 C0 00 00      cmp b, 0
3506   1938 FD 71         seq ; !
3507   193A D7            push a
3508   193B 11            mov a, b
3509   193C 2C 05 00      mov b, [bp + 5] ; $name             
3510   193F FD AB         swp b
3511   1941 D8            push b
3512   1942 26 AD 3E      mov b, __s47 ; "al"
3513   1945 FD AB         swp b
3514   1947 D8            push b
3515   1948 07 FE 33      call strcmp
3516   194B 51 04 00      add sp, 4
3517   194E C0 00 00      cmp b, 0
3518   1951 FD 71         seq ; !
3519   1953 FD A8         sor a, b ; ||
3520   1955 11            mov a, b
3521   1956 2C 05 00      mov b, [bp + 5] ; $name             
3522   1959 FD AB         swp b
3523   195B D8            push b
3524   195C 26 B0 3E      mov b, __s48 ; "ah"
3525   195F FD AB         swp b
3526   1961 D8            push b
3527   1962 07 FE 33      call strcmp
3528   1965 51 04 00      add sp, 4
3529   1968 C0 00 00      cmp b, 0
3530   196B FD 71         seq ; !
3531   196D FD A8         sor a, b ; ||
3532   196F 11            mov a, b
3533   1970 2C 05 00      mov b, [bp + 5] ; $name             
3534   1973 FD AB         swp b
3535   1975 D8            push b
3536   1976 26 B3 3E      mov b, __s49 ; "b"
3537   1979 FD AB         swp b
3538   197B D8            push b
3539   197C 07 FE 33      call strcmp
3540   197F 51 04 00      add sp, 4
3541   1982 C0 00 00      cmp b, 0
3542   1985 FD 71         seq ; !
3543   1987 FD A8         sor a, b ; ||
3544   1989 11            mov a, b
3545   198A 2C 05 00      mov b, [bp + 5] ; $name             
3546   198D FD AB         swp b
3547   198F D8            push b
3548   1990 26 B5 3E      mov b, __s50 ; "bl"
3549   1993 FD AB         swp b
3550   1995 D8            push b
3551   1996 07 FE 33      call strcmp
3552   1999 51 04 00      add sp, 4
3553   199C C0 00 00      cmp b, 0
3554   199F FD 71         seq ; !
3555   19A1 FD A8         sor a, b ; ||
3556   19A3 11            mov a, b
3557   19A4 2C 05 00      mov b, [bp + 5] ; $name             
3558   19A7 FD AB         swp b
3559   19A9 D8            push b
3560   19AA 26 B8 3E      mov b, __s51 ; "bh"
3561   19AD FD AB         swp b
3562   19AF D8            push b
3563   19B0 07 FE 33      call strcmp
3564   19B3 51 04 00      add sp, 4
3565   19B6 C0 00 00      cmp b, 0
3566   19B9 FD 71         seq ; !
3567   19BB FD A8         sor a, b ; ||
3568   19BD 11            mov a, b
3569   19BE 2C 05 00      mov b, [bp + 5] ; $name             
3570   19C1 FD AB         swp b
3571   19C3 D8            push b
3572   19C4 26 BB 3E      mov b, __s52 ; "c"
3573   19C7 FD AB         swp b
3574   19C9 D8            push b
3575   19CA 07 FE 33      call strcmp
3576   19CD 51 04 00      add sp, 4
3577   19D0 C0 00 00      cmp b, 0
3578   19D3 FD 71         seq ; !
3579   19D5 FD A8         sor a, b ; ||
3580   19D7 11            mov a, b
3581   19D8 2C 05 00      mov b, [bp + 5] ; $name             
3582   19DB FD AB         swp b
3583   19DD D8            push b
3584   19DE 26 BD 3E      mov b, __s53 ; "cl"
3585   19E1 FD AB         swp b
3586   19E3 D8            push b
3587   19E4 07 FE 33      call strcmp
3588   19E7 51 04 00      add sp, 4
3589   19EA C0 00 00      cmp b, 0
3590   19ED FD 71         seq ; !
3591   19EF FD A8         sor a, b ; ||
3592   19F1 11            mov a, b
3593   19F2 2C 05 00      mov b, [bp + 5] ; $name             
3594   19F5 FD AB         swp b
3595   19F7 D8            push b
3596   19F8 26 C0 3E      mov b, __s54 ; "ch"
3597   19FB FD AB         swp b
3598   19FD D8            push b
3599   19FE 07 FE 33      call strcmp
3600   1A01 51 04 00      add sp, 4
3601   1A04 C0 00 00      cmp b, 0
3602   1A07 FD 71         seq ; !
3603   1A09 FD A8         sor a, b ; ||
3604   1A0B 11            mov a, b
3605   1A0C 2C 05 00      mov b, [bp + 5] ; $name             
3606   1A0F FD AB         swp b
3607   1A11 D8            push b
3608   1A12 26 C3 3E      mov b, __s55 ; "d"
3609   1A15 FD AB         swp b
3610   1A17 D8            push b
3611   1A18 07 FE 33      call strcmp
3612   1A1B 51 04 00      add sp, 4
3613   1A1E C0 00 00      cmp b, 0
3614   1A21 FD 71         seq ; !
3615   1A23 FD A8         sor a, b ; ||
3616   1A25 11            mov a, b
3617   1A26 2C 05 00      mov b, [bp + 5] ; $name             
3618   1A29 FD AB         swp b
3619   1A2B D8            push b
3620   1A2C 26 C5 3E      mov b, __s56 ; "dl"
3621   1A2F FD AB         swp b
3622   1A31 D8            push b
3623   1A32 07 FE 33      call strcmp
3624   1A35 51 04 00      add sp, 4
3625   1A38 C0 00 00      cmp b, 0
3626   1A3B FD 71         seq ; !
3627   1A3D FD A8         sor a, b ; ||
3628   1A3F 11            mov a, b
3629   1A40 2C 05 00      mov b, [bp + 5] ; $name             
3630   1A43 FD AB         swp b
3631   1A45 D8            push b
3632   1A46 26 C8 3E      mov b, __s57 ; "dh"
3633   1A49 FD AB         swp b
3634   1A4B D8            push b
3635   1A4C 07 FE 33      call strcmp
3636   1A4F 51 04 00      add sp, 4
3637   1A52 C0 00 00      cmp b, 0
3638   1A55 FD 71         seq ; !
3639   1A57 FD A8         sor a, b ; ||
3640   1A59 11            mov a, b
3641   1A5A 2C 05 00      mov b, [bp + 5] ; $name             
3642   1A5D FD AB         swp b
3643   1A5F D8            push b
3644   1A60 26 CB 3E      mov b, __s58 ; "g"
3645   1A63 FD AB         swp b
3646   1A65 D8            push b
3647   1A66 07 FE 33      call strcmp
3648   1A69 51 04 00      add sp, 4
3649   1A6C C0 00 00      cmp b, 0
3650   1A6F FD 71         seq ; !
3651   1A71 FD A8         sor a, b ; ||
3652   1A73 11            mov a, b
3653   1A74 2C 05 00      mov b, [bp + 5] ; $name             
3654   1A77 FD AB         swp b
3655   1A79 D8            push b
3656   1A7A 26 CD 3E      mov b, __s59 ; "gl"
3657   1A7D FD AB         swp b
3658   1A7F D8            push b
3659   1A80 07 FE 33      call strcmp
3660   1A83 51 04 00      add sp, 4
3661   1A86 C0 00 00      cmp b, 0
3662   1A89 FD 71         seq ; !
3663   1A8B FD A8         sor a, b ; ||
3664   1A8D 11            mov a, b
3665   1A8E 2C 05 00      mov b, [bp + 5] ; $name             
3666   1A91 FD AB         swp b
3667   1A93 D8            push b
3668   1A94 26 D0 3E      mov b, __s60 ; "gh"
3669   1A97 FD AB         swp b
3670   1A99 D8            push b
3671   1A9A 07 FE 33      call strcmp
3672   1A9D 51 04 00      add sp, 4
3673   1AA0 C0 00 00      cmp b, 0
3674   1AA3 FD 71         seq ; !
3675   1AA5 FD A8         sor a, b ; ||
3676   1AA7 11            mov a, b
3677   1AA8 2C 05 00      mov b, [bp + 5] ; $name             
3678   1AAB FD AB         swp b
3679   1AAD D8            push b
3680   1AAE 26 D3 3E      mov b, __s61 ; "pc"
3681   1AB1 FD AB         swp b
3682   1AB3 D8            push b
3683   1AB4 07 FE 33      call strcmp
3684   1AB7 51 04 00      add sp, 4
3685   1ABA C0 00 00      cmp b, 0
3686   1ABD FD 71         seq ; !
3687   1ABF FD A8         sor a, b ; ||
3688   1AC1 11            mov a, b
3689   1AC2 2C 05 00      mov b, [bp + 5] ; $name             
3690   1AC5 FD AB         swp b
3691   1AC7 D8            push b
3692   1AC8 26 D6 3E      mov b, __s62 ; "sp"
3693   1ACB FD AB         swp b
3694   1ACD D8            push b
3695   1ACE 07 FE 33      call strcmp
3696   1AD1 51 04 00      add sp, 4
3697   1AD4 C0 00 00      cmp b, 0
3698   1AD7 FD 71         seq ; !
3699   1AD9 FD A8         sor a, b ; ||
3700   1ADB 11            mov a, b
3701   1ADC 2C 05 00      mov b, [bp + 5] ; $name             
3702   1ADF FD AB         swp b
3703   1AE1 D8            push b
3704   1AE2 26 D9 3E      mov b, __s63 ; "bp"
3705   1AE5 FD AB         swp b
3706   1AE7 D8            push b
3707   1AE8 07 FE 33      call strcmp
3708   1AEB 51 04 00      add sp, 4
3709   1AEE C0 00 00      cmp b, 0
3710   1AF1 FD 71         seq ; !
3711   1AF3 FD A8         sor a, b ; ||
3712   1AF5 11            mov a, b
3713   1AF6 2C 05 00      mov b, [bp + 5] ; $name             
3714   1AF9 FD AB         swp b
3715   1AFB D8            push b
3716   1AFC 26 DC 3E      mov b, __s64 ; "si"
3717   1AFF FD AB         swp b
3718   1B01 D8            push b
3719   1B02 07 FE 33      call strcmp
3720   1B05 51 04 00      add sp, 4
3721   1B08 C0 00 00      cmp b, 0
3722   1B0B FD 71         seq ; !
3723   1B0D FD A8         sor a, b ; ||
3724   1B0F 11            mov a, b
3725   1B10 2C 05 00      mov b, [bp + 5] ; $name             
3726   1B13 FD AB         swp b
3727   1B15 D8            push b
3728   1B16 26 DF 3E      mov b, __s65 ; "di"
3729   1B19 FD AB         swp b
3730   1B1B D8            push b
3731   1B1C 07 FE 33      call strcmp
3732   1B1F 51 04 00      add sp, 4
3733   1B22 C0 00 00      cmp b, 0
3734   1B25 FD 71         seq ; !
3735   1B27 FD A8         sor a, b ; ||
3736   1B29 11            mov a, b
3737   1B2A 2C 05 00      mov b, [bp + 5] ; $name             
3738   1B2D FD AB         swp b
3739   1B2F D8            push b
3740   1B30 26 E2 3E      mov b, __s66 ; "word"
3741   1B33 FD AB         swp b
3742   1B35 D8            push b
3743   1B36 07 FE 33      call strcmp
3744   1B39 51 04 00      add sp, 4
3745   1B3C C0 00 00      cmp b, 0
3746   1B3F FD 71         seq ; !
3747   1B41 FD A8         sor a, b ; ||
3748   1B43 11            mov a, b
3749   1B44 2C 05 00      mov b, [bp + 5] ; $name             
3750   1B47 FD AB         swp b
3751   1B49 D8            push b
3752   1B4A 26 E7 3E      mov b, __s67 ; "byte"
3753   1B4D FD AB         swp b
3754   1B4F D8            push b
3755   1B50 07 FE 33      call strcmp
3756   1B53 51 04 00      add sp, 4
3757   1B56 C0 00 00      cmp b, 0
3758   1B59 FD 71         seq ; !
3759   1B5B FD A8         sor a, b ; ||
3760   1B5D 11            mov a, b
3761   1B5E 2C 05 00      mov b, [bp + 5] ; $name             
3762   1B61 FD AB         swp b
3763   1B63 D8            push b
3764   1B64 26 EC 3E      mov b, __s68 ; "cmpsb"
3765   1B67 FD AB         swp b
3766   1B69 D8            push b
3767   1B6A 07 FE 33      call strcmp
3768   1B6D 51 04 00      add sp, 4
3769   1B70 C0 00 00      cmp b, 0
3770   1B73 FD 71         seq ; !
3771   1B75 FD A8         sor a, b ; ||
3772   1B77 11            mov a, b
3773   1B78 2C 05 00      mov b, [bp + 5] ; $name             
3774   1B7B FD AB         swp b
3775   1B7D D8            push b
3776   1B7E 26 F2 3E      mov b, __s69 ; "movsb"
3777   1B81 FD AB         swp b
3778   1B83 D8            push b
3779   1B84 07 FE 33      call strcmp
3780   1B87 51 04 00      add sp, 4
3781   1B8A C0 00 00      cmp b, 0
3782   1B8D FD 71         seq ; !
3783   1B8F FD A8         sor a, b ; ||
3784   1B91 11            mov a, b
3785   1B92 2C 05 00      mov b, [bp + 5] ; $name             
3786   1B95 FD AB         swp b
3787   1B97 D8            push b
3788   1B98 26 F8 3E      mov b, __s70 ; "stosb"
3789   1B9B FD AB         swp b
3790   1B9D D8            push b
3791   1B9E 07 FE 33      call strcmp
3792   1BA1 51 04 00      add sp, 4
3793   1BA4 C0 00 00      cmp b, 0
3794   1BA7 FD 71         seq ; !
3795   1BA9 FD A8         sor a, b ; ||
3796   1BAB E4            pop a
3797   1BAC F9            leave
3798   1BAD 09            ret
3799   1BAE             
3800   1BAE             is_directive:
3801   1BAE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3802   1BB1             ;; return !strcmp(name, "org")  
3803   1BB1 2C 05 00      mov b, [bp + 5] ; $name             
3804   1BB4 FD AB         swp b
3805   1BB6 D8            push b
3806   1BB7 26 4B 3C      mov b, __s0 ; "org"
3807   1BBA FD AB         swp b
3808   1BBC D8            push b
3809   1BBD 07 FE 33      call strcmp
3810   1BC0 51 04 00      add sp, 4
3811   1BC3 C0 00 00      cmp b, 0
3812   1BC6 FD 71         seq ; !
3813   1BC8 D7            push a
3814   1BC9 11            mov a, b
3815   1BCA 2C 05 00      mov b, [bp + 5] ; $name             
3816   1BCD FD AB         swp b
3817   1BCF D8            push b
3818   1BD0 26 FE 3E      mov b, __s71 ; "define"
3819   1BD3 FD AB         swp b
3820   1BD5 D8            push b
3821   1BD6 07 FE 33      call strcmp
3822   1BD9 51 04 00      add sp, 4
3823   1BDC C0 00 00      cmp b, 0
3824   1BDF FD 71         seq ; !
3825   1BE1 FD A8         sor a, b ; ||
3826   1BE3 E4            pop a
3827   1BE4 F9            leave
3828   1BE5 09            ret
3829   1BE6             
3830   1BE6             parse_label:
3831   1BE6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3832   1BE9             ; $label_name 
3833   1BE9 52 20 00      sub sp, 32
3834   1BEC             ;; get(); 
3835   1BEC 07 B1 23      call get
3836   1BEF             ;; strcpy(label_name, token); 
3837   1BEF FA E1 FF      lea d, [bp + -31] ; $label_name
3838   1BF2 2D            mov b, d
3839   1BF3 FD AB         swp b
3840   1BF5 D8            push b
3841   1BF6 26 D9 3A      mov b, _token_data ; $token           
3842   1BF9 FD AB         swp b
3843   1BFB D8            push b
3844   1BFC 07 A2 33      call strcpy
3845   1BFF 51 04 00      add sp, 4
3846   1C02             ;; declare_label(label_name, pc); 
3847   1C02 FA E1 FF      lea d, [bp + -31] ; $label_name
3848   1C05 2D            mov b, d
3849   1C06 FD AB         swp b
3850   1C08 D8            push b
3851   1C09 29 D0 3A      mov b, [_pc] ; $pc           
3852   1C0C FD AB         swp b
3853   1C0E D8            push b
3854   1C0F 07 1A 1C      call declare_label
3855   1C12 51 04 00      add sp, 4
3856   1C15             ;; get(); // get ':' 
3857   1C15 07 B1 23      call get
3858   1C18 F9            leave
3859   1C19 09            ret
3860   1C1A             
3861   1C1A             declare_label:
3862   1C1A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3863   1C1D             ; $i 
3864   1C1D 52 02 00      sub sp, 2
3865   1C20             ;; for(i = 0; i <  16         ; i++){ 
3866   1C20             _for105_init:
3867   1C20 FA FF FF      lea d, [bp + -1] ; $i         
3868   1C23 26 00 00      mov b, $0        
3869   1C26 FD 43         mov [d], b
3870   1C28             _for105_cond:
3871   1C28 2C FF FF      mov b, [bp + -1] ; $i             
3872   1C2B             ; START RELATIONAL
3873   1C2B D7            push a
3874   1C2C 11            mov a, b
3875   1C2D 26 10 00      mov b, $10
3876   1C30 B0            cmp a, b
3877   1C31 FD 73         slt ; < 
3878   1C33 E4            pop a
3879   1C34             ; END RELATIONAL
3880   1C34 C0 00 00      cmp b, 0
3881   1C37 C6 AF 1C      je _for105_exit
3882   1C3A             _for105_block:
3883   1C3A             ;; if(!label_table[i].name[0]){ 
3884   1C3A             _if106_cond:
3885   1C3A 3B AE 39      mov d, _label_table_data ; $label_table
3886   1C3D D7            push a         
3887   1C3E 2C FF FF      mov b, [bp + -1] ; $i                     
3888   1C41 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
3889   1C45 E4            pop a
3890   1C46 58 00 00      add d, 0
3891   1C49 FD 14         clb
3892   1C4B D7            push a         
3893   1C4C 26 00 00      mov b, $0        
3894   1C4F 5A            add d, b
3895   1C50 E4            pop a
3896   1C51 32            mov bl, [d]
3897   1C52 A7 00         mov bh, 0
3898   1C54 C0 00 00      cmp b, 0
3899   1C57 FD 71         seq ; !
3900   1C59 C0 00 00      cmp b, 0
3901   1C5C C6 9E 1C      je _if106_exit
3902   1C5F             _if106_true:
3903   1C5F             ;; strcpy(label_table[i].name, name); 
3904   1C5F 3B AE 39      mov d, _label_table_data ; $label_table
3905   1C62 D7            push a         
3906   1C63 2C FF FF      mov b, [bp + -1] ; $i                     
3907   1C66 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
3908   1C6A E4            pop a
3909   1C6B 58 00 00      add d, 0
3910   1C6E FD 14         clb
3911   1C70 2D            mov b, d
3912   1C71 FD AB         swp b
3913   1C73 D8            push b
3914   1C74 2C 07 00      mov b, [bp + 7] ; $name             
3915   1C77 FD AB         swp b
3916   1C79 D8            push b
3917   1C7A 07 A2 33      call strcpy
3918   1C7D 51 04 00      add sp, 4
3919   1C80             ;; label_table[i].address = address; 
3920   1C80 3B AE 39      mov d, _label_table_data ; $label_table
3921   1C83 D7            push a         
3922   1C84 2C FF FF      mov b, [bp + -1] ; $i                     
3923   1C87 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
3924   1C8B E4            pop a
3925   1C8C 58 10 00      add d, 16
3926   1C8F FD 14         clb         
3927   1C91 2C 05 00      mov b, [bp + 5] ; $address                     
3928   1C94 FD 43         mov [d], b
3929   1C96             ;; return i; 
3930   1C96 2C FF FF      mov b, [bp + -1] ; $i             
3931   1C99 F9            leave
3932   1C9A 09            ret
3933   1C9B 0A 9E 1C      jmp _if106_exit
3934   1C9E             _if106_exit:
3935   1C9E             _for105_update:
3936   1C9E 2C FF FF      mov b, [bp + -1] ; $i             
3937   1CA1 FD 79         mov g, b
3938   1CA3 FD 77         inc b
3939   1CA5 FA FF FF      lea d, [bp + -1] ; $i
3940   1CA8 FD 43         mov [d], b
3941   1CAA FD 27         mov b, g
3942   1CAC 0A 28 1C      jmp _for105_cond
3943   1CAF             _for105_exit:
3944   1CAF F9            leave
3945   1CB0 09            ret
3946   1CB1             
3947   1CB1             get_label_addr:
3948   1CB1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3949   1CB4             ; $i 
3950   1CB4 52 02 00      sub sp, 2
3951   1CB7             ;; for(i = 0; i <  16         ; i++){ 
3952   1CB7             _for107_init:
3953   1CB7 FA FF FF      lea d, [bp + -1] ; $i         
3954   1CBA 26 00 00      mov b, $0        
3955   1CBD FD 43         mov [d], b
3956   1CBF             _for107_cond:
3957   1CBF 2C FF FF      mov b, [bp + -1] ; $i             
3958   1CC2             ; START RELATIONAL
3959   1CC2 D7            push a
3960   1CC3 11            mov a, b
3961   1CC4 26 10 00      mov b, $10
3962   1CC7 B0            cmp a, b
3963   1CC8 FD 73         slt ; < 
3964   1CCA E4            pop a
3965   1CCB             ; END RELATIONAL
3966   1CCB C0 00 00      cmp b, 0
3967   1CCE C6 25 1D      je _for107_exit
3968   1CD1             _for107_block:
3969   1CD1             ;; if(!strcmp(label_table[i].name, name)){ 
3970   1CD1             _if108_cond:
3971   1CD1 3B AE 39      mov d, _label_table_data ; $label_table
3972   1CD4 D7            push a         
3973   1CD5 2C FF FF      mov b, [bp + -1] ; $i                     
3974   1CD8 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
3975   1CDC E4            pop a
3976   1CDD 58 00 00      add d, 0
3977   1CE0 FD 14         clb
3978   1CE2 2D            mov b, d
3979   1CE3 FD AB         swp b
3980   1CE5 D8            push b
3981   1CE6 2C 05 00      mov b, [bp + 5] ; $name             
3982   1CE9 FD AB         swp b
3983   1CEB D8            push b
3984   1CEC 07 FE 33      call strcmp
3985   1CEF 51 04 00      add sp, 4
3986   1CF2 C0 00 00      cmp b, 0
3987   1CF5 FD 71         seq ; !
3988   1CF7 C0 00 00      cmp b, 0
3989   1CFA C6 14 1D      je _if108_exit
3990   1CFD             _if108_true:
3991   1CFD             ;; return label_table[i].address; 
3992   1CFD 3B AE 39      mov d, _label_table_data ; $label_table
3993   1D00 D7            push a         
3994   1D01 2C FF FF      mov b, [bp + -1] ; $i                     
3995   1D04 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
3996   1D08 E4            pop a
3997   1D09 58 10 00      add d, 16
3998   1D0C FD 14         clb
3999   1D0E 2A            mov b, [d]
4000   1D0F F9            leave
4001   1D10 09            ret
4002   1D11 0A 14 1D      jmp _if108_exit
4003   1D14             _if108_exit:
4004   1D14             _for107_update:
4005   1D14 2C FF FF      mov b, [bp + -1] ; $i             
4006   1D17 FD 79         mov g, b
4007   1D19 FD 77         inc b
4008   1D1B FA FF FF      lea d, [bp + -1] ; $i
4009   1D1E FD 43         mov [d], b
4010   1D20 FD 27         mov b, g
4011   1D22 0A BF 1C      jmp _for107_cond
4012   1D25             _for107_exit:
4013   1D25             ;; error_s("Label does not exist: ", name); 
4014   1D25 26 05 3F      mov b, __s72 ; "Label does not exist: "
4015   1D28 FD AB         swp b
4016   1D2A D8            push b
4017   1D2B 2C 05 00      mov b, [bp + 5] ; $name             
4018   1D2E FD AB         swp b
4019   1D30 D8            push b
4020   1D31 07 97 2E      call error_s
4021   1D34 51 04 00      add sp, 4
4022   1D37 F9            leave
4023   1D38 09            ret
4024   1D39             
4025   1D39             label_exists:
4026   1D39 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4027   1D3C             ; $i 
4028   1D3C 52 02 00      sub sp, 2
4029   1D3F             ;; for(i = 0; i <  16         ; i++){ 
4030   1D3F             _for109_init:
4031   1D3F FA FF FF      lea d, [bp + -1] ; $i         
4032   1D42 26 00 00      mov b, $0        
4033   1D45 FD 43         mov [d], b
4034   1D47             _for109_cond:
4035   1D47 2C FF FF      mov b, [bp + -1] ; $i             
4036   1D4A             ; START RELATIONAL
4037   1D4A D7            push a
4038   1D4B 11            mov a, b
4039   1D4C 26 10 00      mov b, $10
4040   1D4F B0            cmp a, b
4041   1D50 FD 73         slt ; < 
4042   1D52 E4            pop a
4043   1D53             ; END RELATIONAL
4044   1D53 C0 00 00      cmp b, 0
4045   1D56 C6 9E 1D      je _for109_exit
4046   1D59             _for109_block:
4047   1D59             ;; if(!strcmp(label_table[i].name, name)){ 
4048   1D59             _if110_cond:
4049   1D59 3B AE 39      mov d, _label_table_data ; $label_table
4050   1D5C D7            push a         
4051   1D5D 2C FF FF      mov b, [bp + -1] ; $i                     
4052   1D60 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4053   1D64 E4            pop a
4054   1D65 58 00 00      add d, 0
4055   1D68 FD 14         clb
4056   1D6A 2D            mov b, d
4057   1D6B FD AB         swp b
4058   1D6D D8            push b
4059   1D6E 2C 05 00      mov b, [bp + 5] ; $name             
4060   1D71 FD AB         swp b
4061   1D73 D8            push b
4062   1D74 07 FE 33      call strcmp
4063   1D77 51 04 00      add sp, 4
4064   1D7A C0 00 00      cmp b, 0
4065   1D7D FD 71         seq ; !
4066   1D7F C0 00 00      cmp b, 0
4067   1D82 C6 8D 1D      je _if110_exit
4068   1D85             _if110_true:
4069   1D85             ;; return i; 
4070   1D85 2C FF FF      mov b, [bp + -1] ; $i             
4071   1D88 F9            leave
4072   1D89 09            ret
4073   1D8A 0A 8D 1D      jmp _if110_exit
4074   1D8D             _if110_exit:
4075   1D8D             _for109_update:
4076   1D8D 2C FF FF      mov b, [bp + -1] ; $i             
4077   1D90 FD 79         mov g, b
4078   1D92 FD 77         inc b
4079   1D94 FA FF FF      lea d, [bp + -1] ; $i
4080   1D97 FD 43         mov [d], b
4081   1D99 FD 27         mov b, g
4082   1D9B 0A 47 1D      jmp _for109_cond
4083   1D9E             _for109_exit:
4084   1D9E             ;; return -1; 
4085   1D9E 26 01 00      mov b, $1
4086   1DA1 FD 97         neg b
4087   1DA3 F9            leave
4088   1DA4 09            ret
4089   1DA5             
4090   1DA5             print_info:
4091   1DA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4092   1DA8             ;; if(print_information){ 
4093   1DA8             _if111_cond:
4094   1DA8 3B D2 3A      mov d, _print_information ; $print_information
4095   1DAB 32            mov bl, [d]
4096   1DAC A7 00         mov bh, 0
4097   1DAE C0 00 00      cmp b, 0
4098   1DB1 C6 DB 1D      je _if111_exit
4099   1DB4             _if111_true:
4100   1DB4             ;; print(s1); 
4101   1DB4 2C 09 00      mov b, [bp + 9] ; $s1             
4102   1DB7 FD AB         swp b
4103   1DB9 D8            push b
4104   1DBA 07 FB 32      call print
4105   1DBD 51 02 00      add sp, 2
4106   1DC0             ;; print(s2); 
4107   1DC0 2C 07 00      mov b, [bp + 7] ; $s2             
4108   1DC3 FD AB         swp b
4109   1DC5 D8            push b
4110   1DC6 07 FB 32      call print
4111   1DC9 51 02 00      add sp, 2
4112   1DCC             ;; print(s3); 
4113   1DCC 2C 05 00      mov b, [bp + 5] ; $s3             
4114   1DCF FD AB         swp b
4115   1DD1 D8            push b
4116   1DD2 07 FB 32      call print
4117   1DD5 51 02 00      add sp, 2
4118   1DD8 0A DB 1D      jmp _if111_exit
4119   1DDB             _if111_exit:
4120   1DDB F9            leave
4121   1DDC 09            ret
4122   1DDD             
4123   1DDD             print_info2:
4124   1DDD F8 00 00      enter 0 ; (push bp; mov bp, sp)
4125   1DE0             ;; if(print_information){ 
4126   1DE0             _if112_cond:
4127   1DE0 3B D2 3A      mov d, _print_information ; $print_information
4128   1DE3 32            mov bl, [d]
4129   1DE4 A7 00         mov bh, 0
4130   1DE6 C0 00 00      cmp b, 0
4131   1DE9 C6 13 1E      je _if112_exit
4132   1DEC             _if112_true:
4133   1DEC             ;; print(s1); 
4134   1DEC 2C 09 00      mov b, [bp + 9] ; $s1             
4135   1DEF FD AB         swp b
4136   1DF1 D8            push b
4137   1DF2 07 FB 32      call print
4138   1DF5 51 02 00      add sp, 2
4139   1DF8             ;; printu(n); 
4140   1DF8 2C 07 00      mov b, [bp + 7] ; $n             
4141   1DFB FD AB         swp b
4142   1DFD D8            push b
4143   1DFE 07 36 32      call printu
4144   1E01 51 02 00      add sp, 2
4145   1E04             ;; print(s2); 
4146   1E04 2C 05 00      mov b, [bp + 5] ; $s2             
4147   1E07 FD AB         swp b
4148   1E09 D8            push b
4149   1E0A 07 FB 32      call print
4150   1E0D 51 02 00      add sp, 2
4151   1E10 0A 13 1E      jmp _if112_exit
4152   1E13             _if112_exit:
4153   1E13 F9            leave
4154   1E14 09            ret
4155   1E15             
4156   1E15             search_opcode:
4157   1E15 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4158   1E18             ; $opcode_str 
4159   1E18             ; $opcode_hex 
4160   1E18             ; $hex_p 
4161   1E18             ; $op_p 
4162   1E18             ; $tbl_p 
4163   1E18             ; $return_opcode 
4164   1E18 52 3D 00      sub sp, 61
4165   1E1B             ;; tbl_p = opcode_table; 
4166   1E1B FA DE FF      lea d, [bp + -34] ; $tbl_p         
4167   1E1E 29 21 3C      mov b, [_opcode_table] ; $opcode_table                   
4168   1E21 FD 43         mov [d], b
4169   1E23             ;; for(;;){ 
4170   1E23             _for113_init:
4171   1E23             _for113_cond:
4172   1E23             _for113_block:
4173   1E23             ;; op_p = opcode_str; 
4174   1E23 FA E0 FF      lea d, [bp + -32] ; $op_p
4175   1E26 DA            push d
4176   1E27 FA E9 FF      lea d, [bp + -23] ; $opcode_str
4177   1E2A 2D            mov b, d
4178   1E2B E7            pop d
4179   1E2C FD 43         mov [d], b
4180   1E2E             ;; hex_p = opcode_hex; 
4181   1E2E FA E2 FF      lea d, [bp + -30] ; $hex_p
4182   1E31 DA            push d
4183   1E32 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
4184   1E35 2D            mov b, d
4185   1E36 E7            pop d
4186   1E37 FD 43         mov [d], b
4187   1E39             ;; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
4188   1E39             _while114_cond:
4189   1E39 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4190   1E3C 74            mov d, b
4191   1E3D 32            mov bl, [d]
4192   1E3E A7 00         mov bh, 0
4193   1E40             ; START RELATIONAL
4194   1E40 D7            push a
4195   1E41 11            mov a, b
4196   1E42 26 20 00      mov b, $20
4197   1E45 B0            cmp a, b
4198   1E46 FD 72         sneq ; !=
4199   1E48 E4            pop a
4200   1E49             ; END RELATIONAL
4201   1E49 C0 00 00      cmp b, 0
4202   1E4C C6 76 1E      je _while114_exit
4203   1E4F             _while114_block:
4204   1E4F             ;; *op_p++ = *tbl_p++; 
4205   1E4F 2C E0 FF      mov b, [bp + -32] ; $op_p             
4206   1E52 FD 79         mov g, b
4207   1E54 FD 77         inc b
4208   1E56 FA E0 FF      lea d, [bp + -32] ; $op_p
4209   1E59 FD 43         mov [d], b
4210   1E5B FD 27         mov b, g
4211   1E5D D8            push b
4212   1E5E 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4213   1E61 FD 79         mov g, b
4214   1E63 FD 77         inc b
4215   1E65 FA DE FF      lea d, [bp + -34] ; $tbl_p
4216   1E68 FD 43         mov [d], b
4217   1E6A FD 27         mov b, g
4218   1E6C 74            mov d, b
4219   1E6D 32            mov bl, [d]
4220   1E6E A7 00         mov bh, 0
4221   1E70 E7            pop d
4222   1E71 FD 3E         mov [d], bl
4223   1E73 0A 39 1E      jmp _while114_cond
4224   1E76             _while114_exit:
4225   1E76             ;; *op_p++ = *tbl_p++; 
4226   1E76 2C E0 FF      mov b, [bp + -32] ; $op_p             
4227   1E79 FD 79         mov g, b
4228   1E7B FD 77         inc b
4229   1E7D FA E0 FF      lea d, [bp + -32] ; $op_p
4230   1E80 FD 43         mov [d], b
4231   1E82 FD 27         mov b, g
4232   1E84 D8            push b
4233   1E85 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4234   1E88 FD 79         mov g, b
4235   1E8A FD 77         inc b
4236   1E8C FA DE FF      lea d, [bp + -34] ; $tbl_p
4237   1E8F FD 43         mov [d], b
4238   1E91 FD 27         mov b, g
4239   1E93 74            mov d, b
4240   1E94 32            mov bl, [d]
4241   1E95 A7 00         mov bh, 0
4242   1E97 E7            pop d
4243   1E98 FD 3E         mov [d], bl
4244   1E9A             ;; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
4245   1E9A             _while115_cond:
4246   1E9A 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4247   1E9D 74            mov d, b
4248   1E9E 32            mov bl, [d]
4249   1E9F A7 00         mov bh, 0
4250   1EA1             ; START RELATIONAL
4251   1EA1 D7            push a
4252   1EA2 11            mov a, b
4253   1EA3 26 20 00      mov b, $20
4254   1EA6 B0            cmp a, b
4255   1EA7 FD 72         sneq ; !=
4256   1EA9 E4            pop a
4257   1EAA             ; END RELATIONAL
4258   1EAA C0 00 00      cmp b, 0
4259   1EAD C6 D7 1E      je _while115_exit
4260   1EB0             _while115_block:
4261   1EB0             ;; *op_p++ = *tbl_p++; 
4262   1EB0 2C E0 FF      mov b, [bp + -32] ; $op_p             
4263   1EB3 FD 79         mov g, b
4264   1EB5 FD 77         inc b
4265   1EB7 FA E0 FF      lea d, [bp + -32] ; $op_p
4266   1EBA FD 43         mov [d], b
4267   1EBC FD 27         mov b, g
4268   1EBE D8            push b
4269   1EBF 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4270   1EC2 FD 79         mov g, b
4271   1EC4 FD 77         inc b
4272   1EC6 FA DE FF      lea d, [bp + -34] ; $tbl_p
4273   1EC9 FD 43         mov [d], b
4274   1ECB FD 27         mov b, g
4275   1ECD 74            mov d, b
4276   1ECE 32            mov bl, [d]
4277   1ECF A7 00         mov bh, 0
4278   1ED1 E7            pop d
4279   1ED2 FD 3E         mov [d], bl
4280   1ED4 0A 9A 1E      jmp _while115_cond
4281   1ED7             _while115_exit:
4282   1ED7             ;; *op_p = '\0'; 
4283   1ED7 2C E0 FF      mov b, [bp + -32] ; $op_p             
4284   1EDA D8            push b
4285   1EDB 26 00 00      mov b, $0
4286   1EDE E7            pop d
4287   1EDF FD 3E         mov [d], bl
4288   1EE1             ;; if(!strcmp(opcode_str, what_opcode)){ 
4289   1EE1             _if116_cond:
4290   1EE1 FA E9 FF      lea d, [bp + -23] ; $opcode_str
4291   1EE4 2D            mov b, d
4292   1EE5 FD AB         swp b
4293   1EE7 D8            push b
4294   1EE8 2C 05 00      mov b, [bp + 5] ; $what_opcode             
4295   1EEB FD AB         swp b
4296   1EED D8            push b
4297   1EEE 07 FE 33      call strcmp
4298   1EF1 51 04 00      add sp, 4
4299   1EF4 C0 00 00      cmp b, 0
4300   1EF7 FD 71         seq ; !
4301   1EF9 C0 00 00      cmp b, 0
4302   1EFC C6 0A 20      je _if116_else
4303   1EFF             _if116_true:
4304   1EFF             ;; strcpy(return_opcode.name, what_opcode); 
4305   1EFF FA C4 FF      lea d, [bp + -60] ; $return_opcode
4306   1F02 58 00 00      add d, 0
4307   1F05 FD 14         clb
4308   1F07 2D            mov b, d
4309   1F08 FD AB         swp b
4310   1F0A D8            push b
4311   1F0B 2C 05 00      mov b, [bp + 5] ; $what_opcode             
4312   1F0E FD AB         swp b
4313   1F10 D8            push b
4314   1F11 07 A2 33      call strcpy
4315   1F14 51 04 00      add sp, 4
4316   1F17             ;; while(*tbl_p == ' ') tbl_p++; 
4317   1F17             _while117_cond:
4318   1F17 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4319   1F1A 74            mov d, b
4320   1F1B 32            mov bl, [d]
4321   1F1C A7 00         mov bh, 0
4322   1F1E             ; START RELATIONAL
4323   1F1E D7            push a
4324   1F1F 11            mov a, b
4325   1F20 26 20 00      mov b, $20
4326   1F23 B0            cmp a, b
4327   1F24 FD 71         seq ; ==
4328   1F26 E4            pop a
4329   1F27             ; END RELATIONAL
4330   1F27 C0 00 00      cmp b, 0
4331   1F2A C6 3E 1F      je _while117_exit
4332   1F2D             _while117_block:
4333   1F2D             ;; tbl_p++; 
4334   1F2D 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4335   1F30 FD 79         mov g, b
4336   1F32 FD 77         inc b
4337   1F34 FA DE FF      lea d, [bp + -34] ; $tbl_p
4338   1F37 FD 43         mov [d], b
4339   1F39 FD 27         mov b, g
4340   1F3B 0A 17 1F      jmp _while117_cond
4341   1F3E             _while117_exit:
4342   1F3E             ;; while(is_hex_digit(*tbl_p)) *hex_p++ = *tbl_p++; // Copy hex opcode 
4343   1F3E             _while118_cond:
4344   1F3E 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4345   1F41 74            mov d, b
4346   1F42 32            mov bl, [d]
4347   1F43 A7 00         mov bh, 0
4348   1F45 DD            push bl
4349   1F46 07 73 22      call is_hex_digit
4350   1F49 51 01 00      add sp, 1
4351   1F4C C0 00 00      cmp b, 0
4352   1F4F C6 79 1F      je _while118_exit
4353   1F52             _while118_block:
4354   1F52             ;; *hex_p++ = *tbl_p++; // Copy hex opcode 
4355   1F52 2C E2 FF      mov b, [bp + -30] ; $hex_p             
4356   1F55 FD 79         mov g, b
4357   1F57 FD 77         inc b
4358   1F59 FA E2 FF      lea d, [bp + -30] ; $hex_p
4359   1F5C FD 43         mov [d], b
4360   1F5E FD 27         mov b, g
4361   1F60 D8            push b
4362   1F61 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4363   1F64 FD 79         mov g, b
4364   1F66 FD 77         inc b
4365   1F68 FA DE FF      lea d, [bp + -34] ; $tbl_p
4366   1F6B FD 43         mov [d], b
4367   1F6D FD 27         mov b, g
4368   1F6F 74            mov d, b
4369   1F70 32            mov bl, [d]
4370   1F71 A7 00         mov bh, 0
4371   1F73 E7            pop d
4372   1F74 FD 3E         mov [d], bl
4373   1F76 0A 3E 1F      jmp _while118_cond
4374   1F79             _while118_exit:
4375   1F79             ;; *hex_p = '\0'; 
4376   1F79 2C E2 FF      mov b, [bp + -30] ; $hex_p             
4377   1F7C D8            push b
4378   1F7D 26 00 00      mov b, $0
4379   1F80 E7            pop d
4380   1F81 FD 3E         mov [d], bl
4381   1F83             ;; if(strlen(opcode_hex) == 4){ 
4382   1F83             _if119_cond:
4383   1F83 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
4384   1F86 2D            mov b, d
4385   1F87 FD AB         swp b
4386   1F89 D8            push b
4387   1F8A 07 FA 34      call strlen
4388   1F8D 51 02 00      add sp, 2
4389   1F90             ; START RELATIONAL
4390   1F90 D7            push a
4391   1F91 11            mov a, b
4392   1F92 26 04 00      mov b, $4
4393   1F95 B0            cmp a, b
4394   1F96 FD 71         seq ; ==
4395   1F98 E4            pop a
4396   1F99             ; END RELATIONAL
4397   1F99 C0 00 00      cmp b, 0
4398   1F9C C6 DB 1F      je _if119_else
4399   1F9F             _if119_true:
4400   1F9F             ;; return_opcode.opcode_type = 1; 
4401   1F9F FA C4 FF      lea d, [bp + -60] ; $return_opcode
4402   1FA2 58 19 00      add d, 25
4403   1FA5 FD 14         clb         
4404   1FA7 26 01 00      mov b, $1        
4405   1FAA FD 3E         mov [d], bl
4406   1FAC             ;; *(opcode_hex + 2) = '\0'; 
4407   1FAC FA E4 FF      lea d, [bp + -28] ; $opcode_hex
4408   1FAF 2D            mov b, d
4409   1FB0             ; START TERMS
4410   1FB0 D7            push a
4411   1FB1 11            mov a, b
4412   1FB2 26 02 00      mov b, $2
4413   1FB5 54            add a, b
4414   1FB6 27            mov b, a
4415   1FB7 E4            pop a
4416   1FB8             ; END TERMS
4417   1FB8 D8            push b
4418   1FB9 26 00 00      mov b, $0
4419   1FBC E7            pop d
4420   1FBD FD 43         mov [d], b
4421   1FBF             ;; return_opcode.opcode = hex_to_int(opcode_hex); 
4422   1FBF FA C4 FF      lea d, [bp + -60] ; $return_opcode
4423   1FC2 58 18 00      add d, 24
4424   1FC5 FD 14         clb
4425   1FC7 DA            push d
4426   1FC8 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
4427   1FCB 2D            mov b, d
4428   1FCC FD AB         swp b
4429   1FCE D8            push b
4430   1FCF 07 01 30      call hex_to_int
4431   1FD2 51 02 00      add sp, 2
4432   1FD5 E7            pop d
4433   1FD6 FD 3E         mov [d], bl
4434   1FD8 0A 01 20      jmp _if119_exit
4435   1FDB             _if119_else:
4436   1FDB             ;; return_opcode.opcode_type = 0; 
4437   1FDB FA C4 FF      lea d, [bp + -60] ; $return_opcode
4438   1FDE 58 19 00      add d, 25
4439   1FE1 FD 14         clb         
4440   1FE3 26 00 00      mov b, $0        
4441   1FE6 FD 3E         mov [d], bl
4442   1FE8             ;; return_opcode.opcode = hex_to_int(opcode_hex); 
4443   1FE8 FA C4 FF      lea d, [bp + -60] ; $return_opcode
4444   1FEB 58 18 00      add d, 24
4445   1FEE FD 14         clb
4446   1FF0 DA            push d
4447   1FF1 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
4448   1FF4 2D            mov b, d
4449   1FF5 FD AB         swp b
4450   1FF7 D8            push b
4451   1FF8 07 01 30      call hex_to_int
4452   1FFB 51 02 00      add sp, 2
4453   1FFE E7            pop d
4454   1FFF FD 3E         mov [d], bl
4455   2001             _if119_exit:
4456   2001             ;; return return_opcode; 
4457   2001 FA C4 FF      lea d, [bp + -60] ; $return_opcode
4458   2004 2D            mov b, d
4459   2005 F9            leave
4460   2006 09            ret
4461   2007 0A 70 20      jmp _if116_exit
4462   200A             _if116_else:
4463   200A             ;; while(*tbl_p != '\n') tbl_p++; 
4464   200A             _while120_cond:
4465   200A 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4466   200D 74            mov d, b
4467   200E 32            mov bl, [d]
4468   200F A7 00         mov bh, 0
4469   2011             ; START RELATIONAL
4470   2011 D7            push a
4471   2012 11            mov a, b
4472   2013 26 0A 00      mov b, $a
4473   2016 B0            cmp a, b
4474   2017 FD 72         sneq ; !=
4475   2019 E4            pop a
4476   201A             ; END RELATIONAL
4477   201A C0 00 00      cmp b, 0
4478   201D C6 31 20      je _while120_exit
4479   2020             _while120_block:
4480   2020             ;; tbl_p++; 
4481   2020 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4482   2023 FD 79         mov g, b
4483   2025 FD 77         inc b
4484   2027 FA DE FF      lea d, [bp + -34] ; $tbl_p
4485   202A FD 43         mov [d], b
4486   202C FD 27         mov b, g
4487   202E 0A 0A 20      jmp _while120_cond
4488   2031             _while120_exit:
4489   2031             ;; while(*tbl_p == '\n') tbl_p++; 
4490   2031             _while121_cond:
4491   2031 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4492   2034 74            mov d, b
4493   2035 32            mov bl, [d]
4494   2036 A7 00         mov bh, 0
4495   2038             ; START RELATIONAL
4496   2038 D7            push a
4497   2039 11            mov a, b
4498   203A 26 0A 00      mov b, $a
4499   203D B0            cmp a, b
4500   203E FD 71         seq ; ==
4501   2040 E4            pop a
4502   2041             ; END RELATIONAL
4503   2041 C0 00 00      cmp b, 0
4504   2044 C6 58 20      je _while121_exit
4505   2047             _while121_block:
4506   2047             ;; tbl_p++; 
4507   2047 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4508   204A FD 79         mov g, b
4509   204C FD 77         inc b
4510   204E FA DE FF      lea d, [bp + -34] ; $tbl_p
4511   2051 FD 43         mov [d], b
4512   2053 FD 27         mov b, g
4513   2055 0A 31 20      jmp _while121_cond
4514   2058             _while121_exit:
4515   2058             ;; if(!*tbl_p) break; 
4516   2058             _if122_cond:
4517   2058 2C DE FF      mov b, [bp + -34] ; $tbl_p             
4518   205B 74            mov d, b
4519   205C 32            mov bl, [d]
4520   205D A7 00         mov bh, 0
4521   205F C0 00 00      cmp b, 0
4522   2062 FD 71         seq ; !
4523   2064 C0 00 00      cmp b, 0
4524   2067 C6 70 20      je _if122_exit
4525   206A             _if122_true:
4526   206A             ;; break; 
4527   206A 0A 73 20      jmp _for113_exit ; for break
4528   206D 0A 70 20      jmp _if122_exit
4529   2070             _if122_exit:
4530   2070             _if116_exit:
4531   2070             _for113_update:
4532   2070 0A 23 1E      jmp _for113_cond
4533   2073             _for113_exit:
4534   2073             ;; return_opcode.name[0] = '\0'; 
4535   2073 FA C4 FF      lea d, [bp + -60] ; $return_opcode
4536   2076 58 00 00      add d, 0
4537   2079 FD 14         clb
4538   207B D7            push a         
4539   207C 26 00 00      mov b, $0        
4540   207F 5A            add d, b
4541   2080 E4            pop a         
4542   2081 26 00 00      mov b, $0        
4543   2084 FD 3E         mov [d], bl
4544   2086             ;; return return_opcode; 
4545   2086 FA C4 FF      lea d, [bp + -60] ; $return_opcode
4546   2089 2D            mov b, d
4547   208A F9            leave
4548   208B 09            ret
4549   208C             
4550   208C             forwards:
4551   208C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4552   208F             ;; bin_p = bin_p + amount; 
4553   208F 3B 1F 3C      mov d, _bin_p ; $bin_p         
4554   2092 29 1F 3C      mov b, [_bin_p] ; $bin_p           
4555   2095             ; START TERMS
4556   2095 D7            push a
4557   2096 11            mov a, b
4558   2097 34 05 00      mov bl, [bp + 5] ; $amount
4559   209A A7 00         mov bh, 0             
4560   209C 54            add a, b
4561   209D 27            mov b, a
4562   209E E4            pop a
4563   209F             ; END TERMS        
4564   209F FD 43         mov [d], b
4565   20A1             ;; prog_size = prog_size + amount; 
4566   20A1 3B 39 3C      mov d, _prog_size ; $prog_size         
4567   20A4 29 39 3C      mov b, [_prog_size] ; $prog_size           
4568   20A7             ; START TERMS
4569   20A7 D7            push a
4570   20A8 11            mov a, b
4571   20A9 34 05 00      mov bl, [bp + 5] ; $amount
4572   20AC A7 00         mov bh, 0             
4573   20AE 54            add a, b
4574   20AF 27            mov b, a
4575   20B0 E4            pop a
4576   20B1             ; END TERMS        
4577   20B1 FD 43         mov [d], b
4578   20B3             ;; pc = pc + amount; 
4579   20B3 3B D0 3A      mov d, _pc ; $pc         
4580   20B6 29 D0 3A      mov b, [_pc] ; $pc           
4581   20B9             ; START TERMS
4582   20B9 D7            push a
4583   20BA 11            mov a, b
4584   20BB 34 05 00      mov bl, [bp + 5] ; $amount
4585   20BE A7 00         mov bh, 0             
4586   20C0 54            add a, b
4587   20C1 27            mov b, a
4588   20C2 E4            pop a
4589   20C3             ; END TERMS        
4590   20C3 FD 43         mov [d], b
4591   20C5 F9            leave
4592   20C6 09            ret
4593   20C7             
4594   20C7             emit_byte:
4595   20C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4596   20CA             ;; if(!emit_override){ 
4597   20CA             _if123_cond:
4598   20CA 34 05 00      mov bl, [bp + 5] ; $emit_override
4599   20CD A7 00         mov bh, 0             
4600   20CF C0 00 00      cmp b, 0
4601   20D2 FD 71         seq ; !
4602   20D4 C0 00 00      cmp b, 0
4603   20D7 C6 E9 20      je _if123_exit
4604   20DA             _if123_true:
4605   20DA             ;; *bin_p = byte; 
4606   20DA 29 1F 3C      mov b, [_bin_p] ; $bin_p           
4607   20DD D8            push b
4608   20DE 34 06 00      mov bl, [bp + 6] ; $byte
4609   20E1 A7 00         mov bh, 0             
4610   20E3 E7            pop d
4611   20E4 FD 3E         mov [d], bl
4612   20E6 0A E9 20      jmp _if123_exit
4613   20E9             _if123_exit:
4614   20E9             ;; forwards(1); 
4615   20E9 26 01 00      mov b, $1
4616   20EC DD            push bl
4617   20ED 07 8C 20      call forwards
4618   20F0 51 01 00      add sp, 1
4619   20F3 F9            leave
4620   20F4 09            ret
4621   20F5             
4622   20F5             emit_word:
4623   20F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4624   20F8             ;; if(!emit_override){ 
4625   20F8             _if124_cond:
4626   20F8 34 05 00      mov bl, [bp + 5] ; $emit_override
4627   20FB A7 00         mov bh, 0             
4628   20FD C0 00 00      cmp b, 0
4629   2100 FD 71         seq ; !
4630   2102 C0 00 00      cmp b, 0
4631   2105 C6 15 21      je _if124_exit
4632   2108             _if124_true:
4633   2108             ;; *((int*)bin_p) = word; 
4634   2108 29 1F 3C      mov b, [_bin_p] ; $bin_p           
4635   210B D8            push b
4636   210C 2C 06 00      mov b, [bp + 6] ; $word             
4637   210F E7            pop d
4638   2110 FD 43         mov [d], b
4639   2112 0A 15 21      jmp _if124_exit
4640   2115             _if124_exit:
4641   2115             ;; forwards(2); 
4642   2115 26 02 00      mov b, $2
4643   2118 DD            push bl
4644   2119 07 8C 20      call forwards
4645   211C 51 01 00      add sp, 1
4646   211F F9            leave
4647   2120 09            ret
4648   2121             
4649   2121             back:
4650   2121 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4651   2124             ; $t 
4652   2124 52 02 00      sub sp, 2
4653   2127             ;; t = token; 
4654   2127 FA FF FF      lea d, [bp + -1] ; $t         
4655   212A 26 D9 3A      mov b, _token_data ; $token                   
4656   212D FD 43         mov [d], b
4657   212F             ;; while(*t){ 
4658   212F             _while125_cond:
4659   212F 2C FF FF      mov b, [bp + -1] ; $t             
4660   2132 74            mov d, b
4661   2133 32            mov bl, [d]
4662   2134 A7 00         mov bh, 0
4663   2136 C0 00 00      cmp b, 0
4664   2139 C6 5B 21      je _while125_exit
4665   213C             _while125_block:
4666   213C             ;; prog--; 
4667   213C 29 D7 3A      mov b, [_prog] ; $prog           
4668   213F FD 79         mov g, b
4669   2141 FD 7D         dec b
4670   2143 3B D7 3A      mov d, _prog ; $prog
4671   2146 FD 43         mov [d], b
4672   2148 FD 27         mov b, g
4673   214A             ;; t++; 
4674   214A 2C FF FF      mov b, [bp + -1] ; $t             
4675   214D FD 79         mov g, b
4676   214F FD 77         inc b
4677   2151 FA FF FF      lea d, [bp + -1] ; $t
4678   2154 FD 43         mov [d], b
4679   2156 FD 27         mov b, g
4680   2158 0A 2F 21      jmp _while125_cond
4681   215B             _while125_exit:
4682   215B F9            leave
4683   215C 09            ret
4684   215D             
4685   215D             get_path:
4686   215D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4687   2160             ; $t 
4688   2160 52 02 00      sub sp, 2
4689   2163             ;; *token = '\0'; 
4690   2163 26 D9 3A      mov b, _token_data ; $token           
4691   2166 D8            push b
4692   2167 26 00 00      mov b, $0
4693   216A E7            pop d
4694   216B FD 3E         mov [d], bl
4695   216D             ;; tok = 0; 
4696   216D 3B D3 3A      mov d, _tok ; $tok         
4697   2170 26 00 00      mov b, $0        
4698   2173 FD 43         mov [d], b
4699   2175             ;; toktype = 0; 
4700   2175 3B D5 3A      mov d, _toktype ; $toktype         
4701   2178 26 00 00      mov b, $0        
4702   217B FD 43         mov [d], b
4703   217D             ;; t = token; 
4704   217D FA FF FF      lea d, [bp + -1] ; $t         
4705   2180 26 D9 3A      mov b, _token_data ; $token                   
4706   2183 FD 43         mov [d], b
4707   2185             ;; while(is_space(*prog)) prog++; 
4708   2185             _while126_cond:
4709   2185 29 D7 3A      mov b, [_prog] ; $prog           
4710   2188 74            mov d, b
4711   2189 32            mov bl, [d]
4712   218A A7 00         mov bh, 0
4713   218C DD            push bl
4714   218D 07 3E 35      call is_space
4715   2190 51 01 00      add sp, 1
4716   2193 C0 00 00      cmp b, 0
4717   2196 C6 AA 21      je _while126_exit
4718   2199             _while126_block:
4719   2199             ;; prog++; 
4720   2199 29 D7 3A      mov b, [_prog] ; $prog           
4721   219C FD 79         mov g, b
4722   219E FD 77         inc b
4723   21A0 3B D7 3A      mov d, _prog ; $prog
4724   21A3 FD 43         mov [d], b
4725   21A5 FD 27         mov b, g
4726   21A7 0A 85 21      jmp _while126_cond
4727   21AA             _while126_exit:
4728   21AA             ;; if(*prog == '\0'){ 
4729   21AA             _if127_cond:
4730   21AA 29 D7 3A      mov b, [_prog] ; $prog           
4731   21AD 74            mov d, b
4732   21AE 32            mov bl, [d]
4733   21AF A7 00         mov bh, 0
4734   21B1             ; START RELATIONAL
4735   21B1 D7            push a
4736   21B2 11            mov a, b
4737   21B3 26 00 00      mov b, $0
4738   21B6 B0            cmp a, b
4739   21B7 FD 71         seq ; ==
4740   21B9 E4            pop a
4741   21BA             ; END RELATIONAL
4742   21BA C0 00 00      cmp b, 0
4743   21BD C6 CD 21      je _if127_exit
4744   21C0             _if127_true:
4745   21C0             ;; toktype = END; 
4746   21C0 3B D5 3A      mov d, _toktype ; $toktype         
4747   21C3 26 07 00      mov b, 7; END        
4748   21C6 FD 43         mov [d], b
4749   21C8             ;; return; 
4750   21C8 F9            leave
4751   21C9 09            ret
4752   21CA 0A CD 21      jmp _if127_exit
4753   21CD             _if127_exit:
4754   21CD             ;; while(*prog == '/' || is_alpha(*prog) || is_digit(*prog) || *prog == '_' || *prog == '-' || *prog == '.') { 
4755   21CD             _while128_cond:
4756   21CD 29 D7 3A      mov b, [_prog] ; $prog           
4757   21D0 74            mov d, b
4758   21D1 32            mov bl, [d]
4759   21D2 A7 00         mov bh, 0
4760   21D4             ; START RELATIONAL
4761   21D4 D7            push a
4762   21D5 11            mov a, b
4763   21D6 26 2F 00      mov b, $2f
4764   21D9 B0            cmp a, b
4765   21DA FD 71         seq ; ==
4766   21DC E4            pop a
4767   21DD             ; END RELATIONAL
4768   21DD D7            push a
4769   21DE 11            mov a, b
4770   21DF 29 D7 3A      mov b, [_prog] ; $prog           
4771   21E2 74            mov d, b
4772   21E3 32            mov bl, [d]
4773   21E4 A7 00         mov bh, 0
4774   21E6 DD            push bl
4775   21E7 07 AC 35      call is_alpha
4776   21EA 51 01 00      add sp, 1
4777   21ED FD A8         sor a, b ; ||
4778   21EF 11            mov a, b
4779   21F0 29 D7 3A      mov b, [_prog] ; $prog           
4780   21F3 74            mov d, b
4781   21F4 32            mov bl, [d]
4782   21F5 A7 00         mov bh, 0
4783   21F7 DD            push bl
4784   21F8 07 86 35      call is_digit
4785   21FB 51 01 00      add sp, 1
4786   21FE FD A8         sor a, b ; ||
4787   2200 11            mov a, b
4788   2201 29 D7 3A      mov b, [_prog] ; $prog           
4789   2204 74            mov d, b
4790   2205 32            mov bl, [d]
4791   2206 A7 00         mov bh, 0
4792   2208             ; START RELATIONAL
4793   2208 D7            push a
4794   2209 11            mov a, b
4795   220A 26 5F 00      mov b, $5f
4796   220D B0            cmp a, b
4797   220E FD 71         seq ; ==
4798   2210 E4            pop a
4799   2211             ; END RELATIONAL
4800   2211 FD A8         sor a, b ; ||
4801   2213 11            mov a, b
4802   2214 29 D7 3A      mov b, [_prog] ; $prog           
4803   2217 74            mov d, b
4804   2218 32            mov bl, [d]
4805   2219 A7 00         mov bh, 0
4806   221B             ; START RELATIONAL
4807   221B D7            push a
4808   221C 11            mov a, b
4809   221D 26 2D 00      mov b, $2d
4810   2220 B0            cmp a, b
4811   2221 FD 71         seq ; ==
4812   2223 E4            pop a
4813   2224             ; END RELATIONAL
4814   2224 FD A8         sor a, b ; ||
4815   2226 11            mov a, b
4816   2227 29 D7 3A      mov b, [_prog] ; $prog           
4817   222A 74            mov d, b
4818   222B 32            mov bl, [d]
4819   222C A7 00         mov bh, 0
4820   222E             ; START RELATIONAL
4821   222E D7            push a
4822   222F 11            mov a, b
4823   2230 26 2E 00      mov b, $2e
4824   2233 B0            cmp a, b
4825   2234 FD 71         seq ; ==
4826   2236 E4            pop a
4827   2237             ; END RELATIONAL
4828   2237 FD A8         sor a, b ; ||
4829   2239 E4            pop a
4830   223A C0 00 00      cmp b, 0
4831   223D C6 67 22      je _while128_exit
4832   2240             _while128_block:
4833   2240             ;; *t++ = *prog++; 
4834   2240 2C FF FF      mov b, [bp + -1] ; $t             
4835   2243 FD 79         mov g, b
4836   2245 FD 77         inc b
4837   2247 FA FF FF      lea d, [bp + -1] ; $t
4838   224A FD 43         mov [d], b
4839   224C FD 27         mov b, g
4840   224E D8            push b
4841   224F 29 D7 3A      mov b, [_prog] ; $prog           
4842   2252 FD 79         mov g, b
4843   2254 FD 77         inc b
4844   2256 3B D7 3A      mov d, _prog ; $prog
4845   2259 FD 43         mov [d], b
4846   225B FD 27         mov b, g
4847   225D 74            mov d, b
4848   225E 32            mov bl, [d]
4849   225F A7 00         mov bh, 0
4850   2261 E7            pop d
4851   2262 FD 3E         mov [d], bl
4852   2264 0A CD 21      jmp _while128_cond
4853   2267             _while128_exit:
4854   2267             ;; *t = '\0'; 
4855   2267 2C FF FF      mov b, [bp + -1] ; $t             
4856   226A D8            push b
4857   226B 26 00 00      mov b, $0
4858   226E E7            pop d
4859   226F FD 3E         mov [d], bl
4860   2271 F9            leave
4861   2272 09            ret
4862   2273             
4863   2273             is_hex_digit:
4864   2273 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4865   2276             ;; return c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f'; 
4866   2276 34 05 00      mov bl, [bp + 5] ; $c
4867   2279 A7 00         mov bh, 0             
4868   227B             ; START RELATIONAL
4869   227B D7            push a
4870   227C 11            mov a, b
4871   227D 26 30 00      mov b, $30
4872   2280 B0            cmp a, b
4873   2281 FD 80         sge ; >=
4874   2283 E4            pop a
4875   2284             ; END RELATIONAL
4876   2284 D7            push a
4877   2285 11            mov a, b
4878   2286 34 05 00      mov bl, [bp + 5] ; $c
4879   2289 A7 00         mov bh, 0             
4880   228B             ; START RELATIONAL
4881   228B D7            push a
4882   228C 11            mov a, b
4883   228D 26 39 00      mov b, $39
4884   2290 B0            cmp a, b
4885   2291 FD 74         sle ; <=
4886   2293 E4            pop a
4887   2294             ; END RELATIONAL
4888   2294 FD A7         sand a, b ; &&
4889   2296 E4            pop a
4890   2297 D7            push a
4891   2298 11            mov a, b
4892   2299 34 05 00      mov bl, [bp + 5] ; $c
4893   229C A7 00         mov bh, 0             
4894   229E             ; START RELATIONAL
4895   229E D7            push a
4896   229F 11            mov a, b
4897   22A0 26 41 00      mov b, $41
4898   22A3 B0            cmp a, b
4899   22A4 FD 80         sge ; >=
4900   22A6 E4            pop a
4901   22A7             ; END RELATIONAL
4902   22A7 D7            push a
4903   22A8 11            mov a, b
4904   22A9 34 05 00      mov bl, [bp + 5] ; $c
4905   22AC A7 00         mov bh, 0             
4906   22AE             ; START RELATIONAL
4907   22AE D7            push a
4908   22AF 11            mov a, b
4909   22B0 26 46 00      mov b, $46
4910   22B3 B0            cmp a, b
4911   22B4 FD 74         sle ; <=
4912   22B6 E4            pop a
4913   22B7             ; END RELATIONAL
4914   22B7 FD A7         sand a, b ; &&
4915   22B9 E4            pop a
4916   22BA FD A8         sor a, b ; ||
4917   22BC 11            mov a, b
4918   22BD 34 05 00      mov bl, [bp + 5] ; $c
4919   22C0 A7 00         mov bh, 0             
4920   22C2             ; START RELATIONAL
4921   22C2 D7            push a
4922   22C3 11            mov a, b
4923   22C4 26 61 00      mov b, $61
4924   22C7 B0            cmp a, b
4925   22C8 FD 80         sge ; >=
4926   22CA E4            pop a
4927   22CB             ; END RELATIONAL
4928   22CB D7            push a
4929   22CC 11            mov a, b
4930   22CD 34 05 00      mov bl, [bp + 5] ; $c
4931   22D0 A7 00         mov bh, 0             
4932   22D2             ; START RELATIONAL
4933   22D2 D7            push a
4934   22D3 11            mov a, b
4935   22D4 26 66 00      mov b, $66
4936   22D7 B0            cmp a, b
4937   22D8 FD 74         sle ; <=
4938   22DA E4            pop a
4939   22DB             ; END RELATIONAL
4940   22DB FD A7         sand a, b ; &&
4941   22DD E4            pop a
4942   22DE FD A8         sor a, b ; ||
4943   22E0 E4            pop a
4944   22E1 F9            leave
4945   22E2 09            ret
4946   22E3             
4947   22E3             get_line:
4948   22E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4949   22E6             ; $t 
4950   22E6 52 02 00      sub sp, 2
4951   22E9             ;; t = string_const; 
4952   22E9 FA FF FF      lea d, [bp + -1] ; $t         
4953   22EC 26 19 3B      mov b, _string_const_data ; $string_const                   
4954   22EF FD 43         mov [d], b
4955   22F1             ;; *t = '\0'; 
4956   22F1 2C FF FF      mov b, [bp + -1] ; $t             
4957   22F4 D8            push b
4958   22F5 26 00 00      mov b, $0
4959   22F8 E7            pop d
4960   22F9 FD 3E         mov [d], bl
4961   22FB             ;; while(*prog != 0x0A && *prog != '\0'){ 
4962   22FB             _while129_cond:
4963   22FB 29 D7 3A      mov b, [_prog] ; $prog           
4964   22FE 74            mov d, b
4965   22FF 32            mov bl, [d]
4966   2300 A7 00         mov bh, 0
4967   2302             ; START RELATIONAL
4968   2302 D7            push a
4969   2303 11            mov a, b
4970   2304 26 0A 00      mov b, $a
4971   2307 B0            cmp a, b
4972   2308 FD 72         sneq ; !=
4973   230A E4            pop a
4974   230B             ; END RELATIONAL
4975   230B D7            push a
4976   230C 11            mov a, b
4977   230D 29 D7 3A      mov b, [_prog] ; $prog           
4978   2310 74            mov d, b
4979   2311 32            mov bl, [d]
4980   2312 A7 00         mov bh, 0
4981   2314             ; START RELATIONAL
4982   2314 D7            push a
4983   2315 11            mov a, b
4984   2316 26 00 00      mov b, $0
4985   2319 B0            cmp a, b
4986   231A FD 72         sneq ; !=
4987   231C E4            pop a
4988   231D             ; END RELATIONAL
4989   231D FD A7         sand a, b ; &&
4990   231F E4            pop a
4991   2320 C0 00 00      cmp b, 0
4992   2323 C6 A5 23      je _while129_exit
4993   2326             _while129_block:
4994   2326             ;; if(*prog == ';'){ 
4995   2326             _if130_cond:
4996   2326 29 D7 3A      mov b, [_prog] ; $prog           
4997   2329 74            mov d, b
4998   232A 32            mov bl, [d]
4999   232B A7 00         mov bh, 0
5000   232D             ; START RELATIONAL
5001   232D D7            push a
5002   232E 11            mov a, b
5003   232F 26 3B 00      mov b, $3b
5004   2332 B0            cmp a, b
5005   2333 FD 71         seq ; ==
5006   2335 E4            pop a
5007   2336             ; END RELATIONAL
5008   2336 C0 00 00      cmp b, 0
5009   2339 C6 7E 23      je _if130_else
5010   233C             _if130_true:
5011   233C             ;; while(*prog != 0x0A && *prog != '\0') prog++; 
5012   233C             _while131_cond:
5013   233C 29 D7 3A      mov b, [_prog] ; $prog           
5014   233F 74            mov d, b
5015   2340 32            mov bl, [d]
5016   2341 A7 00         mov bh, 0
5017   2343             ; START RELATIONAL
5018   2343 D7            push a
5019   2344 11            mov a, b
5020   2345 26 0A 00      mov b, $a
5021   2348 B0            cmp a, b
5022   2349 FD 72         sneq ; !=
5023   234B E4            pop a
5024   234C             ; END RELATIONAL
5025   234C D7            push a
5026   234D 11            mov a, b
5027   234E 29 D7 3A      mov b, [_prog] ; $prog           
5028   2351 74            mov d, b
5029   2352 32            mov bl, [d]
5030   2353 A7 00         mov bh, 0
5031   2355             ; START RELATIONAL
5032   2355 D7            push a
5033   2356 11            mov a, b
5034   2357 26 00 00      mov b, $0
5035   235A B0            cmp a, b
5036   235B FD 72         sneq ; !=
5037   235D E4            pop a
5038   235E             ; END RELATIONAL
5039   235E FD A7         sand a, b ; &&
5040   2360 E4            pop a
5041   2361 C0 00 00      cmp b, 0
5042   2364 C6 78 23      je _while131_exit
5043   2367             _while131_block:
5044   2367             ;; prog++; 
5045   2367 29 D7 3A      mov b, [_prog] ; $prog           
5046   236A FD 79         mov g, b
5047   236C FD 77         inc b
5048   236E 3B D7 3A      mov d, _prog ; $prog
5049   2371 FD 43         mov [d], b
5050   2373 FD 27         mov b, g
5051   2375 0A 3C 23      jmp _while131_cond
5052   2378             _while131_exit:
5053   2378             ;; break; 
5054   2378 0A A5 23      jmp _while129_exit ; while break
5055   237B 0A A2 23      jmp _if130_exit
5056   237E             _if130_else:
5057   237E             ;; *t++ = *prog++; 
5058   237E 2C FF FF      mov b, [bp + -1] ; $t             
5059   2381 FD 79         mov g, b
5060   2383 FD 77         inc b
5061   2385 FA FF FF      lea d, [bp + -1] ; $t
5062   2388 FD 43         mov [d], b
5063   238A FD 27         mov b, g
5064   238C D8            push b
5065   238D 29 D7 3A      mov b, [_prog] ; $prog           
5066   2390 FD 79         mov g, b
5067   2392 FD 77         inc b
5068   2394 3B D7 3A      mov d, _prog ; $prog
5069   2397 FD 43         mov [d], b
5070   2399 FD 27         mov b, g
5071   239B 74            mov d, b
5072   239C 32            mov bl, [d]
5073   239D A7 00         mov bh, 0
5074   239F E7            pop d
5075   23A0 FD 3E         mov [d], bl
5076   23A2             _if130_exit:
5077   23A2 0A FB 22      jmp _while129_cond
5078   23A5             _while129_exit:
5079   23A5             ;; *t = '\0'; 
5080   23A5 2C FF FF      mov b, [bp + -1] ; $t             
5081   23A8 D8            push b
5082   23A9 26 00 00      mov b, $0
5083   23AC E7            pop d
5084   23AD FD 3E         mov [d], bl
5085   23AF F9            leave
5086   23B0 09            ret
5087   23B1             
5088   23B1             get:
5089   23B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5090   23B4             ; $t 
5091   23B4             ; $temp_hex 
5092   23B4             ; $p 
5093   23B4 52 44 00      sub sp, 68
5094   23B7             ;; *token = '\0'; 
5095   23B7 26 D9 3A      mov b, _token_data ; $token           
5096   23BA D8            push b
5097   23BB 26 00 00      mov b, $0
5098   23BE E7            pop d
5099   23BF FD 3E         mov [d], bl
5100   23C1             ;; tok = TOK_UNDEF; 
5101   23C1 3B D3 3A      mov d, _tok ; $tok         
5102   23C4 26 00 00      mov b, 0; TOK_UNDEF        
5103   23C7 FD 43         mov [d], b
5104   23C9             ;; toktype = TYPE_UNDEF; 
5105   23C9 3B D5 3A      mov d, _toktype ; $toktype         
5106   23CC 26 00 00      mov b, 0; TYPE_UNDEF        
5107   23CF FD 43         mov [d], b
5108   23D1             ;; t = token; 
5109   23D1 FA FF FF      lea d, [bp + -1] ; $t         
5110   23D4 26 D9 3A      mov b, _token_data ; $token                   
5111   23D7 FD 43         mov [d], b
5112   23D9             ;; do{ 
5113   23D9             _do132_block:
5114   23D9             ;; while(is_space(*prog)) prog++; 
5115   23D9             _while133_cond:
5116   23D9 29 D7 3A      mov b, [_prog] ; $prog           
5117   23DC 74            mov d, b
5118   23DD 32            mov bl, [d]
5119   23DE A7 00         mov bh, 0
5120   23E0 DD            push bl
5121   23E1 07 3E 35      call is_space
5122   23E4 51 01 00      add sp, 1
5123   23E7 C0 00 00      cmp b, 0
5124   23EA C6 FE 23      je _while133_exit
5125   23ED             _while133_block:
5126   23ED             ;; prog++; 
5127   23ED 29 D7 3A      mov b, [_prog] ; $prog           
5128   23F0 FD 79         mov g, b
5129   23F2 FD 77         inc b
5130   23F4 3B D7 3A      mov d, _prog ; $prog
5131   23F7 FD 43         mov [d], b
5132   23F9 FD 27         mov b, g
5133   23FB 0A D9 23      jmp _while133_cond
5134   23FE             _while133_exit:
5135   23FE             ;; if(*prog == ';'){ 
5136   23FE             _if134_cond:
5137   23FE 29 D7 3A      mov b, [_prog] ; $prog           
5138   2401 74            mov d, b
5139   2402 32            mov bl, [d]
5140   2403 A7 00         mov bh, 0
5141   2405             ; START RELATIONAL
5142   2405 D7            push a
5143   2406 11            mov a, b
5144   2407 26 3B 00      mov b, $3b
5145   240A B0            cmp a, b
5146   240B FD 71         seq ; ==
5147   240D E4            pop a
5148   240E             ; END RELATIONAL
5149   240E C0 00 00      cmp b, 0
5150   2411 C6 65 24      je _if134_exit
5151   2414             _if134_true:
5152   2414             ;; while(*prog != '\n') prog++; 
5153   2414             _while135_cond:
5154   2414 29 D7 3A      mov b, [_prog] ; $prog           
5155   2417 74            mov d, b
5156   2418 32            mov bl, [d]
5157   2419 A7 00         mov bh, 0
5158   241B             ; START RELATIONAL
5159   241B D7            push a
5160   241C 11            mov a, b
5161   241D 26 0A 00      mov b, $a
5162   2420 B0            cmp a, b
5163   2421 FD 72         sneq ; !=
5164   2423 E4            pop a
5165   2424             ; END RELATIONAL
5166   2424 C0 00 00      cmp b, 0
5167   2427 C6 3B 24      je _while135_exit
5168   242A             _while135_block:
5169   242A             ;; prog++; 
5170   242A 29 D7 3A      mov b, [_prog] ; $prog           
5171   242D FD 79         mov g, b
5172   242F FD 77         inc b
5173   2431 3B D7 3A      mov d, _prog ; $prog
5174   2434 FD 43         mov [d], b
5175   2436 FD 27         mov b, g
5176   2438 0A 14 24      jmp _while135_cond
5177   243B             _while135_exit:
5178   243B             ;; if(*prog == '\n') prog++; 
5179   243B             _if136_cond:
5180   243B 29 D7 3A      mov b, [_prog] ; $prog           
5181   243E 74            mov d, b
5182   243F 32            mov bl, [d]
5183   2440 A7 00         mov bh, 0
5184   2442             ; START RELATIONAL
5185   2442 D7            push a
5186   2443 11            mov a, b
5187   2444 26 0A 00      mov b, $a
5188   2447 B0            cmp a, b
5189   2448 FD 71         seq ; ==
5190   244A E4            pop a
5191   244B             ; END RELATIONAL
5192   244B C0 00 00      cmp b, 0
5193   244E C6 62 24      je _if136_exit
5194   2451             _if136_true:
5195   2451             ;; prog++; 
5196   2451 29 D7 3A      mov b, [_prog] ; $prog           
5197   2454 FD 79         mov g, b
5198   2456 FD 77         inc b
5199   2458 3B D7 3A      mov d, _prog ; $prog
5200   245B FD 43         mov [d], b
5201   245D FD 27         mov b, g
5202   245F 0A 62 24      jmp _if136_exit
5203   2462             _if136_exit:
5204   2462 0A 65 24      jmp _if134_exit
5205   2465             _if134_exit:
5206   2465             ;; } while(is_space(*prog) || *prog == ';'); 
5207   2465             _do132_cond:
5208   2465 29 D7 3A      mov b, [_prog] ; $prog           
5209   2468 74            mov d, b
5210   2469 32            mov bl, [d]
5211   246A A7 00         mov bh, 0
5212   246C DD            push bl
5213   246D 07 3E 35      call is_space
5214   2470 51 01 00      add sp, 1
5215   2473 D7            push a
5216   2474 11            mov a, b
5217   2475 29 D7 3A      mov b, [_prog] ; $prog           
5218   2478 74            mov d, b
5219   2479 32            mov bl, [d]
5220   247A A7 00         mov bh, 0
5221   247C             ; START RELATIONAL
5222   247C D7            push a
5223   247D 11            mov a, b
5224   247E 26 3B 00      mov b, $3b
5225   2481 B0            cmp a, b
5226   2482 FD 71         seq ; ==
5227   2484 E4            pop a
5228   2485             ; END RELATIONAL
5229   2485 FD A8         sor a, b ; ||
5230   2487 E4            pop a
5231   2488 C0 01 00      cmp b, 1
5232   248B C6 D9 23      je _do132_block
5233   248E             _do132_exit:
5234   248E             ;; if(*prog == '\0'){ 
5235   248E             _if137_cond:
5236   248E 29 D7 3A      mov b, [_prog] ; $prog           
5237   2491 74            mov d, b
5238   2492 32            mov bl, [d]
5239   2493 A7 00         mov bh, 0
5240   2495             ; START RELATIONAL
5241   2495 D7            push a
5242   2496 11            mov a, b
5243   2497 26 00 00      mov b, $0
5244   249A B0            cmp a, b
5245   249B FD 71         seq ; ==
5246   249D E4            pop a
5247   249E             ; END RELATIONAL
5248   249E C0 00 00      cmp b, 0
5249   24A1 C6 B1 24      je _if137_exit
5250   24A4             _if137_true:
5251   24A4             ;; toktype = END; 
5252   24A4 3B D5 3A      mov d, _toktype ; $toktype         
5253   24A7 26 07 00      mov b, 7; END        
5254   24AA FD 43         mov [d], b
5255   24AC             ;; return; 
5256   24AC F9            leave
5257   24AD 09            ret
5258   24AE 0A B1 24      jmp _if137_exit
5259   24B1             _if137_exit:
5260   24B1             ;; if(is_alpha(*prog)){ 
5261   24B1             _if138_cond:
5262   24B1 29 D7 3A      mov b, [_prog] ; $prog           
5263   24B4 74            mov d, b
5264   24B5 32            mov bl, [d]
5265   24B6 A7 00         mov bh, 0
5266   24B8 DD            push bl
5267   24B9 07 AC 35      call is_alpha
5268   24BC 51 01 00      add sp, 1
5269   24BF C0 00 00      cmp b, 0
5270   24C2 C6 57 25      je _if138_else
5271   24C5             _if138_true:
5272   24C5             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
5273   24C5             _while139_cond:
5274   24C5 29 D7 3A      mov b, [_prog] ; $prog           
5275   24C8 74            mov d, b
5276   24C9 32            mov bl, [d]
5277   24CA A7 00         mov bh, 0
5278   24CC DD            push bl
5279   24CD 07 AC 35      call is_alpha
5280   24D0 51 01 00      add sp, 1
5281   24D3 D7            push a
5282   24D4 11            mov a, b
5283   24D5 29 D7 3A      mov b, [_prog] ; $prog           
5284   24D8 74            mov d, b
5285   24D9 32            mov bl, [d]
5286   24DA A7 00         mov bh, 0
5287   24DC DD            push bl
5288   24DD 07 86 35      call is_digit
5289   24E0 51 01 00      add sp, 1
5290   24E3 FD A8         sor a, b ; ||
5291   24E5 E4            pop a
5292   24E6 C0 00 00      cmp b, 0
5293   24E9 C6 13 25      je _while139_exit
5294   24EC             _while139_block:
5295   24EC             ;; *t++ = *prog++; 
5296   24EC 2C FF FF      mov b, [bp + -1] ; $t             
5297   24EF FD 79         mov g, b
5298   24F1 FD 77         inc b
5299   24F3 FA FF FF      lea d, [bp + -1] ; $t
5300   24F6 FD 43         mov [d], b
5301   24F8 FD 27         mov b, g
5302   24FA D8            push b
5303   24FB 29 D7 3A      mov b, [_prog] ; $prog           
5304   24FE FD 79         mov g, b
5305   2500 FD 77         inc b
5306   2502 3B D7 3A      mov d, _prog ; $prog
5307   2505 FD 43         mov [d], b
5308   2507 FD 27         mov b, g
5309   2509 74            mov d, b
5310   250A 32            mov bl, [d]
5311   250B A7 00         mov bh, 0
5312   250D E7            pop d
5313   250E FD 3E         mov [d], bl
5314   2510 0A C5 24      jmp _while139_cond
5315   2513             _while139_exit:
5316   2513             ;; *t = '\0'; 
5317   2513 2C FF FF      mov b, [bp + -1] ; $t             
5318   2516 D8            push b
5319   2517 26 00 00      mov b, $0
5320   251A E7            pop d
5321   251B FD 3E         mov [d], bl
5322   251D             ;; if((tok = search_keyword(token)) != -1)  
5323   251D             _if140_cond:
5324   251D 3B D3 3A      mov d, _tok ; $tok
5325   2520 DA            push d
5326   2521 26 D9 3A      mov b, _token_data ; $token           
5327   2524 FD AB         swp b
5328   2526 D8            push b
5329   2527 07 5C 2F      call search_keyword
5330   252A 51 02 00      add sp, 2
5331   252D E7            pop d
5332   252E FD 43         mov [d], b
5333   2530             ; START RELATIONAL
5334   2530 D7            push a
5335   2531 11            mov a, b
5336   2532 26 01 00      mov b, $1
5337   2535 FD 97         neg b
5338   2537 B0            cmp a, b
5339   2538 FD 72         sneq ; !=
5340   253A E4            pop a
5341   253B             ; END RELATIONAL
5342   253B C0 00 00      cmp b, 0
5343   253E C6 4C 25      je _if140_else
5344   2541             _if140_true:
5345   2541             ;; toktype = KEYWORD; 
5346   2541 3B D5 3A      mov d, _toktype ; $toktype         
5347   2544 26 01 00      mov b, 1; KEYWORD        
5348   2547 FD 43         mov [d], b
5349   2549 0A 54 25      jmp _if140_exit
5350   254C             _if140_else:
5351   254C             ;; toktype = IDENTIFIER; 
5352   254C 3B D5 3A      mov d, _toktype ; $toktype         
5353   254F 26 06 00      mov b, 6; IDENTIFIER        
5354   2552 FD 43         mov [d], b
5355   2554             _if140_exit:
5356   2554 0A BD 2B      jmp _if138_exit
5357   2557             _if138_else:
5358   2557             ;; if(is_digit(*prog) || (*prog == '$' && is_hex_digit(*(prog+1)))){ 
5359   2557             _if141_cond:
5360   2557 29 D7 3A      mov b, [_prog] ; $prog           
5361   255A 74            mov d, b
5362   255B 32            mov bl, [d]
5363   255C A7 00         mov bh, 0
5364   255E DD            push bl
5365   255F 07 86 35      call is_digit
5366   2562 51 01 00      add sp, 1
5367   2565 D7            push a
5368   2566 11            mov a, b
5369   2567 29 D7 3A      mov b, [_prog] ; $prog           
5370   256A 74            mov d, b
5371   256B 32            mov bl, [d]
5372   256C A7 00         mov bh, 0
5373   256E             ; START RELATIONAL
5374   256E D7            push a
5375   256F 11            mov a, b
5376   2570 26 24 00      mov b, $24
5377   2573 B0            cmp a, b
5378   2574 FD 71         seq ; ==
5379   2576 E4            pop a
5380   2577             ; END RELATIONAL
5381   2577 D7            push a
5382   2578 11            mov a, b
5383   2579 29 D7 3A      mov b, [_prog] ; $prog           
5384   257C             ; START TERMS
5385   257C D7            push a
5386   257D 11            mov a, b
5387   257E 26 01 00      mov b, $1
5388   2581 54            add a, b
5389   2582 27            mov b, a
5390   2583 E4            pop a
5391   2584             ; END TERMS
5392   2584 74            mov d, b
5393   2585 32            mov bl, [d]
5394   2586 A7 00         mov bh, 0
5395   2588 DD            push bl
5396   2589 07 73 22      call is_hex_digit
5397   258C 51 01 00      add sp, 1
5398   258F FD A7         sand a, b ; &&
5399   2591 E4            pop a
5400   2592 FD A8         sor a, b ; ||
5401   2594 E4            pop a
5402   2595 C0 00 00      cmp b, 0
5403   2598 C6 09 27      je _if141_else
5404   259B             _if141_true:
5405   259B             ;; if(*prog == '$' && is_hex_digit(*(prog+1))){ 
5406   259B             _if142_cond:
5407   259B 29 D7 3A      mov b, [_prog] ; $prog           
5408   259E 74            mov d, b
5409   259F 32            mov bl, [d]
5410   25A0 A7 00         mov bh, 0
5411   25A2             ; START RELATIONAL
5412   25A2 D7            push a
5413   25A3 11            mov a, b
5414   25A4 26 24 00      mov b, $24
5415   25A7 B0            cmp a, b
5416   25A8 FD 71         seq ; ==
5417   25AA E4            pop a
5418   25AB             ; END RELATIONAL
5419   25AB D7            push a
5420   25AC 11            mov a, b
5421   25AD 29 D7 3A      mov b, [_prog] ; $prog           
5422   25B0             ; START TERMS
5423   25B0 D7            push a
5424   25B1 11            mov a, b
5425   25B2 26 01 00      mov b, $1
5426   25B5 54            add a, b
5427   25B6 27            mov b, a
5428   25B7 E4            pop a
5429   25B8             ; END TERMS
5430   25B8 74            mov d, b
5431   25B9 32            mov bl, [d]
5432   25BA A7 00         mov bh, 0
5433   25BC DD            push bl
5434   25BD 07 73 22      call is_hex_digit
5435   25C0 51 01 00      add sp, 1
5436   25C3 FD A7         sand a, b ; &&
5437   25C5 E4            pop a
5438   25C6 C0 00 00      cmp b, 0
5439   25C9 C6 A6 26      je _if142_else
5440   25CC             _if142_true:
5441   25CC             ;; *t++ = *prog++; 
5442   25CC 2C FF FF      mov b, [bp + -1] ; $t             
5443   25CF FD 79         mov g, b
5444   25D1 FD 77         inc b
5445   25D3 FA FF FF      lea d, [bp + -1] ; $t
5446   25D6 FD 43         mov [d], b
5447   25D8 FD 27         mov b, g
5448   25DA D8            push b
5449   25DB 29 D7 3A      mov b, [_prog] ; $prog           
5450   25DE FD 79         mov g, b
5451   25E0 FD 77         inc b
5452   25E2 3B D7 3A      mov d, _prog ; $prog
5453   25E5 FD 43         mov [d], b
5454   25E7 FD 27         mov b, g
5455   25E9 74            mov d, b
5456   25EA 32            mov bl, [d]
5457   25EB A7 00         mov bh, 0
5458   25ED E7            pop d
5459   25EE FD 3E         mov [d], bl
5460   25F0             ;; p = temp_hex; 
5461   25F0 FA BD FF      lea d, [bp + -67] ; $p
5462   25F3 DA            push d
5463   25F4 FA BF FF      lea d, [bp + -65] ; $temp_hex
5464   25F7 2D            mov b, d
5465   25F8 E7            pop d
5466   25F9 FD 43         mov [d], b
5467   25FB             ;; *t++ = *p++ = *prog++; 
5468   25FB 2C FF FF      mov b, [bp + -1] ; $t             
5469   25FE FD 79         mov g, b
5470   2600 FD 77         inc b
5471   2602 FA FF FF      lea d, [bp + -1] ; $t
5472   2605 FD 43         mov [d], b
5473   2607 FD 27         mov b, g
5474   2609 D8            push b
5475   260A 2C BD FF      mov b, [bp + -67] ; $p             
5476   260D FD 79         mov g, b
5477   260F FD 77         inc b
5478   2611 FA BD FF      lea d, [bp + -67] ; $p
5479   2614 FD 43         mov [d], b
5480   2616 FD 27         mov b, g
5481   2618 D8            push b
5482   2619 29 D7 3A      mov b, [_prog] ; $prog           
5483   261C FD 79         mov g, b
5484   261E FD 77         inc b
5485   2620 3B D7 3A      mov d, _prog ; $prog
5486   2623 FD 43         mov [d], b
5487   2625 FD 27         mov b, g
5488   2627 74            mov d, b
5489   2628 32            mov bl, [d]
5490   2629 A7 00         mov bh, 0
5491   262B E7            pop d
5492   262C FD 3E         mov [d], bl
5493   262E E7            pop d
5494   262F FD 3E         mov [d], bl
5495   2631             ;; while(is_hex_digit(*prog)){ 
5496   2631             _while143_cond:
5497   2631 29 D7 3A      mov b, [_prog] ; $prog           
5498   2634 74            mov d, b
5499   2635 32            mov bl, [d]
5500   2636 A7 00         mov bh, 0
5501   2638 DD            push bl
5502   2639 07 73 22      call is_hex_digit
5503   263C 51 01 00      add sp, 1
5504   263F C0 00 00      cmp b, 0
5505   2642 C6 7E 26      je _while143_exit
5506   2645             _while143_block:
5507   2645             ;; *t++ = *p++ = *prog++; 
5508   2645 2C FF FF      mov b, [bp + -1] ; $t             
5509   2648 FD 79         mov g, b
5510   264A FD 77         inc b
5511   264C FA FF FF      lea d, [bp + -1] ; $t
5512   264F FD 43         mov [d], b
5513   2651 FD 27         mov b, g
5514   2653 D8            push b
5515   2654 2C BD FF      mov b, [bp + -67] ; $p             
5516   2657 FD 79         mov g, b
5517   2659 FD 77         inc b
5518   265B FA BD FF      lea d, [bp + -67] ; $p
5519   265E FD 43         mov [d], b
5520   2660 FD 27         mov b, g
5521   2662 D8            push b
5522   2663 29 D7 3A      mov b, [_prog] ; $prog           
5523   2666 FD 79         mov g, b
5524   2668 FD 77         inc b
5525   266A 3B D7 3A      mov d, _prog ; $prog
5526   266D FD 43         mov [d], b
5527   266F FD 27         mov b, g
5528   2671 74            mov d, b
5529   2672 32            mov bl, [d]
5530   2673 A7 00         mov bh, 0
5531   2675 E7            pop d
5532   2676 FD 3E         mov [d], bl
5533   2678 E7            pop d
5534   2679 FD 3E         mov [d], bl
5535   267B 0A 31 26      jmp _while143_cond
5536   267E             _while143_exit:
5537   267E             ;; *t = *p = '\0'; 
5538   267E 2C FF FF      mov b, [bp + -1] ; $t             
5539   2681 D8            push b
5540   2682 2C BD FF      mov b, [bp + -67] ; $p             
5541   2685 D8            push b
5542   2686 26 00 00      mov b, $0
5543   2689 E7            pop d
5544   268A FD 3E         mov [d], bl
5545   268C E7            pop d
5546   268D FD 3E         mov [d], bl
5547   268F             ;; int_const = hex_to_int(temp_hex); 
5548   268F 3B 19 3C      mov d, _int_const ; $int_const
5549   2692 DA            push d
5550   2693 FA BF FF      lea d, [bp + -65] ; $temp_hex
5551   2696 2D            mov b, d
5552   2697 FD AB         swp b
5553   2699 D8            push b
5554   269A 07 01 30      call hex_to_int
5555   269D 51 02 00      add sp, 2
5556   26A0 E7            pop d
5557   26A1 FD 43         mov [d], b
5558   26A3 0A FE 26      jmp _if142_exit
5559   26A6             _if142_else:
5560   26A6             ;; while(is_digit(*prog)){ 
5561   26A6             _while144_cond:
5562   26A6 29 D7 3A      mov b, [_prog] ; $prog           
5563   26A9 74            mov d, b
5564   26AA 32            mov bl, [d]
5565   26AB A7 00         mov bh, 0
5566   26AD DD            push bl
5567   26AE 07 86 35      call is_digit
5568   26B1 51 01 00      add sp, 1
5569   26B4 C0 00 00      cmp b, 0
5570   26B7 C6 E1 26      je _while144_exit
5571   26BA             _while144_block:
5572   26BA             ;; *t++ = *prog++; 
5573   26BA 2C FF FF      mov b, [bp + -1] ; $t             
5574   26BD FD 79         mov g, b
5575   26BF FD 77         inc b
5576   26C1 FA FF FF      lea d, [bp + -1] ; $t
5577   26C4 FD 43         mov [d], b
5578   26C6 FD 27         mov b, g
5579   26C8 D8            push b
5580   26C9 29 D7 3A      mov b, [_prog] ; $prog           
5581   26CC FD 79         mov g, b
5582   26CE FD 77         inc b
5583   26D0 3B D7 3A      mov d, _prog ; $prog
5584   26D3 FD 43         mov [d], b
5585   26D5 FD 27         mov b, g
5586   26D7 74            mov d, b
5587   26D8 32            mov bl, [d]
5588   26D9 A7 00         mov bh, 0
5589   26DB E7            pop d
5590   26DC FD 3E         mov [d], bl
5591   26DE 0A A6 26      jmp _while144_cond
5592   26E1             _while144_exit:
5593   26E1             ;; *t = '\0'; 
5594   26E1 2C FF FF      mov b, [bp + -1] ; $t             
5595   26E4 D8            push b
5596   26E5 26 00 00      mov b, $0
5597   26E8 E7            pop d
5598   26E9 FD 3E         mov [d], bl
5599   26EB             ;; int_const = atoi(token); 
5600   26EB 3B 19 3C      mov d, _int_const ; $int_const
5601   26EE DA            push d
5602   26EF 26 D9 3A      mov b, _token_data ; $token           
5603   26F2 FD AB         swp b
5604   26F4 D8            push b
5605   26F5 07 2D 31      call atoi
5606   26F8 51 02 00      add sp, 2
5607   26FB E7            pop d
5608   26FC FD 43         mov [d], b
5609   26FE             _if142_exit:
5610   26FE             ;; toktype = INTEGER_CONST; 
5611   26FE 3B D5 3A      mov d, _toktype ; $toktype         
5612   2701 26 05 00      mov b, 5; INTEGER_CONST        
5613   2704 FD 43         mov [d], b
5614   2706 0A BD 2B      jmp _if141_exit
5615   2709             _if141_else:
5616   2709             ;; if(*prog == '\''){ 
5617   2709             _if145_cond:
5618   2709 29 D7 3A      mov b, [_prog] ; $prog           
5619   270C 74            mov d, b
5620   270D 32            mov bl, [d]
5621   270E A7 00         mov bh, 0
5622   2710             ; START RELATIONAL
5623   2710 D7            push a
5624   2711 11            mov a, b
5625   2712 26 27 00      mov b, $27
5626   2715 B0            cmp a, b
5627   2716 FD 71         seq ; ==
5628   2718 E4            pop a
5629   2719             ; END RELATIONAL
5630   2719 C0 00 00      cmp b, 0
5631   271C C6 26 28      je _if145_else
5632   271F             _if145_true:
5633   271F             ;; *t++ = '\''; 
5634   271F 2C FF FF      mov b, [bp + -1] ; $t             
5635   2722 FD 79         mov g, b
5636   2724 FD 77         inc b
5637   2726 FA FF FF      lea d, [bp + -1] ; $t
5638   2729 FD 43         mov [d], b
5639   272B FD 27         mov b, g
5640   272D D8            push b
5641   272E 26 27 00      mov b, $27
5642   2731 E7            pop d
5643   2732 FD 3E         mov [d], bl
5644   2734             ;; prog++; 
5645   2734 29 D7 3A      mov b, [_prog] ; $prog           
5646   2737 FD 79         mov g, b
5647   2739 FD 77         inc b
5648   273B 3B D7 3A      mov d, _prog ; $prog
5649   273E FD 43         mov [d], b
5650   2740 FD 27         mov b, g
5651   2742             ;; if(*prog == '\\'){ 
5652   2742             _if146_cond:
5653   2742 29 D7 3A      mov b, [_prog] ; $prog           
5654   2745 74            mov d, b
5655   2746 32            mov bl, [d]
5656   2747 A7 00         mov bh, 0
5657   2749             ; START RELATIONAL
5658   2749 D7            push a
5659   274A 11            mov a, b
5660   274B 26 5C 00      mov b, $5c
5661   274E B0            cmp a, b
5662   274F FD 71         seq ; ==
5663   2751 E4            pop a
5664   2752             ; END RELATIONAL
5665   2752 C0 00 00      cmp b, 0
5666   2755 C6 A2 27      je _if146_else
5667   2758             _if146_true:
5668   2758             ;; *t++ = '\\'; 
5669   2758 2C FF FF      mov b, [bp + -1] ; $t             
5670   275B FD 79         mov g, b
5671   275D FD 77         inc b
5672   275F FA FF FF      lea d, [bp + -1] ; $t
5673   2762 FD 43         mov [d], b
5674   2764 FD 27         mov b, g
5675   2766 D8            push b
5676   2767 26 5C 00      mov b, $5c
5677   276A E7            pop d
5678   276B FD 3E         mov [d], bl
5679   276D             ;; prog++; 
5680   276D 29 D7 3A      mov b, [_prog] ; $prog           
5681   2770 FD 79         mov g, b
5682   2772 FD 77         inc b
5683   2774 3B D7 3A      mov d, _prog ; $prog
5684   2777 FD 43         mov [d], b
5685   2779 FD 27         mov b, g
5686   277B             ;; *t++ = *prog++; 
5687   277B 2C FF FF      mov b, [bp + -1] ; $t             
5688   277E FD 79         mov g, b
5689   2780 FD 77         inc b
5690   2782 FA FF FF      lea d, [bp + -1] ; $t
5691   2785 FD 43         mov [d], b
5692   2787 FD 27         mov b, g
5693   2789 D8            push b
5694   278A 29 D7 3A      mov b, [_prog] ; $prog           
5695   278D FD 79         mov g, b
5696   278F FD 77         inc b
5697   2791 3B D7 3A      mov d, _prog ; $prog
5698   2794 FD 43         mov [d], b
5699   2796 FD 27         mov b, g
5700   2798 74            mov d, b
5701   2799 32            mov bl, [d]
5702   279A A7 00         mov bh, 0
5703   279C E7            pop d
5704   279D FD 3E         mov [d], bl
5705   279F 0A C6 27      jmp _if146_exit
5706   27A2             _if146_else:
5707   27A2             ;; *t++ = *prog++; 
5708   27A2 2C FF FF      mov b, [bp + -1] ; $t             
5709   27A5 FD 79         mov g, b
5710   27A7 FD 77         inc b
5711   27A9 FA FF FF      lea d, [bp + -1] ; $t
5712   27AC FD 43         mov [d], b
5713   27AE FD 27         mov b, g
5714   27B0 D8            push b
5715   27B1 29 D7 3A      mov b, [_prog] ; $prog           
5716   27B4 FD 79         mov g, b
5717   27B6 FD 77         inc b
5718   27B8 3B D7 3A      mov d, _prog ; $prog
5719   27BB FD 43         mov [d], b
5720   27BD FD 27         mov b, g
5721   27BF 74            mov d, b
5722   27C0 32            mov bl, [d]
5723   27C1 A7 00         mov bh, 0
5724   27C3 E7            pop d
5725   27C4 FD 3E         mov [d], bl
5726   27C6             _if146_exit:
5727   27C6             ;; if(*prog != '\''){ 
5728   27C6             _if147_cond:
5729   27C6 29 D7 3A      mov b, [_prog] ; $prog           
5730   27C9 74            mov d, b
5731   27CA 32            mov bl, [d]
5732   27CB A7 00         mov bh, 0
5733   27CD             ; START RELATIONAL
5734   27CD D7            push a
5735   27CE 11            mov a, b
5736   27CF 26 27 00      mov b, $27
5737   27D2 B0            cmp a, b
5738   27D3 FD 72         sneq ; !=
5739   27D5 E4            pop a
5740   27D6             ; END RELATIONAL
5741   27D6 C0 00 00      cmp b, 0
5742   27D9 C6 EB 27      je _if147_exit
5743   27DC             _if147_true:
5744   27DC             ;; error("Closing single quotes expected."); 
5745   27DC 26 1C 3F      mov b, __s73 ; "Closing single quotes expected."
5746   27DF FD AB         swp b
5747   27E1 D8            push b
5748   27E2 07 6B 2E      call error
5749   27E5 51 02 00      add sp, 2
5750   27E8 0A EB 27      jmp _if147_exit
5751   27EB             _if147_exit:
5752   27EB             ;; *t++ = '\''; 
5753   27EB 2C FF FF      mov b, [bp + -1] ; $t             
5754   27EE FD 79         mov g, b
5755   27F0 FD 77         inc b
5756   27F2 FA FF FF      lea d, [bp + -1] ; $t
5757   27F5 FD 43         mov [d], b
5758   27F7 FD 27         mov b, g
5759   27F9 D8            push b
5760   27FA 26 27 00      mov b, $27
5761   27FD E7            pop d
5762   27FE FD 3E         mov [d], bl
5763   2800             ;; prog++; 
5764   2800 29 D7 3A      mov b, [_prog] ; $prog           
5765   2803 FD 79         mov g, b
5766   2805 FD 77         inc b
5767   2807 3B D7 3A      mov d, _prog ; $prog
5768   280A FD 43         mov [d], b
5769   280C FD 27         mov b, g
5770   280E             ;; toktype = CHAR_CONST; 
5771   280E 3B D5 3A      mov d, _toktype ; $toktype         
5772   2811 26 03 00      mov b, 3; CHAR_CONST        
5773   2814 FD 43         mov [d], b
5774   2816             ;; *t = '\0'; 
5775   2816 2C FF FF      mov b, [bp + -1] ; $t             
5776   2819 D8            push b
5777   281A 26 00 00      mov b, $0
5778   281D E7            pop d
5779   281E FD 3E         mov [d], bl
5780   2820             ;; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
5781   2820 07 34 2C      call convert_constant
5782   2823 0A BD 2B      jmp _if145_exit
5783   2826             _if145_else:
5784   2826             ;; if(*prog == '\"'){ 
5785   2826             _if148_cond:
5786   2826 29 D7 3A      mov b, [_prog] ; $prog           
5787   2829 74            mov d, b
5788   282A 32            mov bl, [d]
5789   282B A7 00         mov bh, 0
5790   282D             ; START RELATIONAL
5791   282D D7            push a
5792   282E 11            mov a, b
5793   282F 26 22 00      mov b, $22
5794   2832 B0            cmp a, b
5795   2833 FD 71         seq ; ==
5796   2835 E4            pop a
5797   2836             ; END RELATIONAL
5798   2836 C0 00 00      cmp b, 0
5799   2839 C6 08 29      je _if148_else
5800   283C             _if148_true:
5801   283C             ;; *t++ = '\"'; 
5802   283C 2C FF FF      mov b, [bp + -1] ; $t             
5803   283F FD 79         mov g, b
5804   2841 FD 77         inc b
5805   2843 FA FF FF      lea d, [bp + -1] ; $t
5806   2846 FD 43         mov [d], b
5807   2848 FD 27         mov b, g
5808   284A D8            push b
5809   284B 26 22 00      mov b, $22
5810   284E E7            pop d
5811   284F FD 3E         mov [d], bl
5812   2851             ;; prog++; 
5813   2851 29 D7 3A      mov b, [_prog] ; $prog           
5814   2854 FD 79         mov g, b
5815   2856 FD 77         inc b
5816   2858 3B D7 3A      mov d, _prog ; $prog
5817   285B FD 43         mov [d], b
5818   285D FD 27         mov b, g
5819   285F             ;; while(*prog != '\"' && *prog){ 
5820   285F             _while149_cond:
5821   285F 29 D7 3A      mov b, [_prog] ; $prog           
5822   2862 74            mov d, b
5823   2863 32            mov bl, [d]
5824   2864 A7 00         mov bh, 0
5825   2866             ; START RELATIONAL
5826   2866 D7            push a
5827   2867 11            mov a, b
5828   2868 26 22 00      mov b, $22
5829   286B B0            cmp a, b
5830   286C FD 72         sneq ; !=
5831   286E E4            pop a
5832   286F             ; END RELATIONAL
5833   286F D7            push a
5834   2870 11            mov a, b
5835   2871 29 D7 3A      mov b, [_prog] ; $prog           
5836   2874 74            mov d, b
5837   2875 32            mov bl, [d]
5838   2876 A7 00         mov bh, 0
5839   2878 FD A7         sand a, b ; &&
5840   287A E4            pop a
5841   287B C0 00 00      cmp b, 0
5842   287E C6 A8 28      je _while149_exit
5843   2881             _while149_block:
5844   2881             ;; *t++ = *prog++; 
5845   2881 2C FF FF      mov b, [bp + -1] ; $t             
5846   2884 FD 79         mov g, b
5847   2886 FD 77         inc b
5848   2888 FA FF FF      lea d, [bp + -1] ; $t
5849   288B FD 43         mov [d], b
5850   288D FD 27         mov b, g
5851   288F D8            push b
5852   2890 29 D7 3A      mov b, [_prog] ; $prog           
5853   2893 FD 79         mov g, b
5854   2895 FD 77         inc b
5855   2897 3B D7 3A      mov d, _prog ; $prog
5856   289A FD 43         mov [d], b
5857   289C FD 27         mov b, g
5858   289E 74            mov d, b
5859   289F 32            mov bl, [d]
5860   28A0 A7 00         mov bh, 0
5861   28A2 E7            pop d
5862   28A3 FD 3E         mov [d], bl
5863   28A5 0A 5F 28      jmp _while149_cond
5864   28A8             _while149_exit:
5865   28A8             ;; if(*prog != '\"') error("Double quotes expected"); 
5866   28A8             _if150_cond:
5867   28A8 29 D7 3A      mov b, [_prog] ; $prog           
5868   28AB 74            mov d, b
5869   28AC 32            mov bl, [d]
5870   28AD A7 00         mov bh, 0
5871   28AF             ; START RELATIONAL
5872   28AF D7            push a
5873   28B0 11            mov a, b
5874   28B1 26 22 00      mov b, $22
5875   28B4 B0            cmp a, b
5876   28B5 FD 72         sneq ; !=
5877   28B7 E4            pop a
5878   28B8             ; END RELATIONAL
5879   28B8 C0 00 00      cmp b, 0
5880   28BB C6 CD 28      je _if150_exit
5881   28BE             _if150_true:
5882   28BE             ;; error("Double quotes expected"); 
5883   28BE 26 3C 3F      mov b, __s74 ; "Double quotes expected"
5884   28C1 FD AB         swp b
5885   28C3 D8            push b
5886   28C4 07 6B 2E      call error
5887   28C7 51 02 00      add sp, 2
5888   28CA 0A CD 28      jmp _if150_exit
5889   28CD             _if150_exit:
5890   28CD             ;; *t++ = '\"'; 
5891   28CD 2C FF FF      mov b, [bp + -1] ; $t             
5892   28D0 FD 79         mov g, b
5893   28D2 FD 77         inc b
5894   28D4 FA FF FF      lea d, [bp + -1] ; $t
5895   28D7 FD 43         mov [d], b
5896   28D9 FD 27         mov b, g
5897   28DB D8            push b
5898   28DC 26 22 00      mov b, $22
5899   28DF E7            pop d
5900   28E0 FD 3E         mov [d], bl
5901   28E2             ;; prog++; 
5902   28E2 29 D7 3A      mov b, [_prog] ; $prog           
5903   28E5 FD 79         mov g, b
5904   28E7 FD 77         inc b
5905   28E9 3B D7 3A      mov d, _prog ; $prog
5906   28EC FD 43         mov [d], b
5907   28EE FD 27         mov b, g
5908   28F0             ;; toktype = STRING_CONST; 
5909   28F0 3B D5 3A      mov d, _toktype ; $toktype         
5910   28F3 26 04 00      mov b, 4; STRING_CONST        
5911   28F6 FD 43         mov [d], b
5912   28F8             ;; *t = '\0'; 
5913   28F8 2C FF FF      mov b, [bp + -1] ; $t             
5914   28FB D8            push b
5915   28FC 26 00 00      mov b, $0
5916   28FF E7            pop d
5917   2900 FD 3E         mov [d], bl
5918   2902             ;; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
5919   2902 07 34 2C      call convert_constant
5920   2905 0A BD 2B      jmp _if148_exit
5921   2908             _if148_else:
5922   2908             ;; if(*prog == '['){ 
5923   2908             _if151_cond:
5924   2908 29 D7 3A      mov b, [_prog] ; $prog           
5925   290B 74            mov d, b
5926   290C 32            mov bl, [d]
5927   290D A7 00         mov bh, 0
5928   290F             ; START RELATIONAL
5929   290F D7            push a
5930   2910 11            mov a, b
5931   2911 26 5B 00      mov b, $5b
5932   2914 B0            cmp a, b
5933   2915 FD 71         seq ; ==
5934   2917 E4            pop a
5935   2918             ; END RELATIONAL
5936   2918 C0 00 00      cmp b, 0
5937   291B C6 55 29      je _if151_else
5938   291E             _if151_true:
5939   291E             ;; *t++ = *prog++; 
5940   291E 2C FF FF      mov b, [bp + -1] ; $t             
5941   2921 FD 79         mov g, b
5942   2923 FD 77         inc b
5943   2925 FA FF FF      lea d, [bp + -1] ; $t
5944   2928 FD 43         mov [d], b
5945   292A FD 27         mov b, g
5946   292C D8            push b
5947   292D 29 D7 3A      mov b, [_prog] ; $prog           
5948   2930 FD 79         mov g, b
5949   2932 FD 77         inc b
5950   2934 3B D7 3A      mov d, _prog ; $prog
5951   2937 FD 43         mov [d], b
5952   2939 FD 27         mov b, g
5953   293B 74            mov d, b
5954   293C 32            mov bl, [d]
5955   293D A7 00         mov bh, 0
5956   293F E7            pop d
5957   2940 FD 3E         mov [d], bl
5958   2942             ;; tok = OPENING_BRACKET; 
5959   2942 3B D3 3A      mov d, _tok ; $tok         
5960   2945 26 0B 00      mov b, 11; OPENING_BRACKET        
5961   2948 FD 43         mov [d], b
5962   294A             ;; toktype = DELIMITER;   
5963   294A 3B D5 3A      mov d, _toktype ; $toktype         
5964   294D 26 02 00      mov b, 2; DELIMITER        
5965   2950 FD 43         mov [d], b
5966   2952 0A BD 2B      jmp _if151_exit
5967   2955             _if151_else:
5968   2955             ;; if(*prog == ']'){ 
5969   2955             _if152_cond:
5970   2955 29 D7 3A      mov b, [_prog] ; $prog           
5971   2958 74            mov d, b
5972   2959 32            mov bl, [d]
5973   295A A7 00         mov bh, 0
5974   295C             ; START RELATIONAL
5975   295C D7            push a
5976   295D 11            mov a, b
5977   295E 26 5D 00      mov b, $5d
5978   2961 B0            cmp a, b
5979   2962 FD 71         seq ; ==
5980   2964 E4            pop a
5981   2965             ; END RELATIONAL
5982   2965 C0 00 00      cmp b, 0
5983   2968 C6 A2 29      je _if152_else
5984   296B             _if152_true:
5985   296B             ;; *t++ = *prog++; 
5986   296B 2C FF FF      mov b, [bp + -1] ; $t             
5987   296E FD 79         mov g, b
5988   2970 FD 77         inc b
5989   2972 FA FF FF      lea d, [bp + -1] ; $t
5990   2975 FD 43         mov [d], b
5991   2977 FD 27         mov b, g
5992   2979 D8            push b
5993   297A 29 D7 3A      mov b, [_prog] ; $prog           
5994   297D FD 79         mov g, b
5995   297F FD 77         inc b
5996   2981 3B D7 3A      mov d, _prog ; $prog
5997   2984 FD 43         mov [d], b
5998   2986 FD 27         mov b, g
5999   2988 74            mov d, b
6000   2989 32            mov bl, [d]
6001   298A A7 00         mov bh, 0
6002   298C E7            pop d
6003   298D FD 3E         mov [d], bl
6004   298F             ;; tok = CLOSING_BRACKET; 
6005   298F 3B D3 3A      mov d, _tok ; $tok         
6006   2992 26 0C 00      mov b, 12; CLOSING_BRACKET        
6007   2995 FD 43         mov [d], b
6008   2997             ;; toktype = DELIMITER;   
6009   2997 3B D5 3A      mov d, _toktype ; $toktype         
6010   299A 26 02 00      mov b, 2; DELIMITER        
6011   299D FD 43         mov [d], b
6012   299F 0A BD 2B      jmp _if152_exit
6013   29A2             _if152_else:
6014   29A2             ;; if(*prog == '+'){ 
6015   29A2             _if153_cond:
6016   29A2 29 D7 3A      mov b, [_prog] ; $prog           
6017   29A5 74            mov d, b
6018   29A6 32            mov bl, [d]
6019   29A7 A7 00         mov bh, 0
6020   29A9             ; START RELATIONAL
6021   29A9 D7            push a
6022   29AA 11            mov a, b
6023   29AB 26 2B 00      mov b, $2b
6024   29AE B0            cmp a, b
6025   29AF FD 71         seq ; ==
6026   29B1 E4            pop a
6027   29B2             ; END RELATIONAL
6028   29B2 C0 00 00      cmp b, 0
6029   29B5 C6 EF 29      je _if153_else
6030   29B8             _if153_true:
6031   29B8             ;; *t++ = *prog++; 
6032   29B8 2C FF FF      mov b, [bp + -1] ; $t             
6033   29BB FD 79         mov g, b
6034   29BD FD 77         inc b
6035   29BF FA FF FF      lea d, [bp + -1] ; $t
6036   29C2 FD 43         mov [d], b
6037   29C4 FD 27         mov b, g
6038   29C6 D8            push b
6039   29C7 29 D7 3A      mov b, [_prog] ; $prog           
6040   29CA FD 79         mov g, b
6041   29CC FD 77         inc b
6042   29CE 3B D7 3A      mov d, _prog ; $prog
6043   29D1 FD 43         mov [d], b
6044   29D3 FD 27         mov b, g
6045   29D5 74            mov d, b
6046   29D6 32            mov bl, [d]
6047   29D7 A7 00         mov bh, 0
6048   29D9 E7            pop d
6049   29DA FD 3E         mov [d], bl
6050   29DC             ;; tok = PLUS; 
6051   29DC 3B D3 3A      mov d, _tok ; $tok         
6052   29DF 26 08 00      mov b, 8; PLUS        
6053   29E2 FD 43         mov [d], b
6054   29E4             ;; toktype = DELIMITER;   
6055   29E4 3B D5 3A      mov d, _toktype ; $toktype         
6056   29E7 26 02 00      mov b, 2; DELIMITER        
6057   29EA FD 43         mov [d], b
6058   29EC 0A BD 2B      jmp _if153_exit
6059   29EF             _if153_else:
6060   29EF             ;; if(*prog == '-'){ 
6061   29EF             _if154_cond:
6062   29EF 29 D7 3A      mov b, [_prog] ; $prog           
6063   29F2 74            mov d, b
6064   29F3 32            mov bl, [d]
6065   29F4 A7 00         mov bh, 0
6066   29F6             ; START RELATIONAL
6067   29F6 D7            push a
6068   29F7 11            mov a, b
6069   29F8 26 2D 00      mov b, $2d
6070   29FB B0            cmp a, b
6071   29FC FD 71         seq ; ==
6072   29FE E4            pop a
6073   29FF             ; END RELATIONAL
6074   29FF C0 00 00      cmp b, 0
6075   2A02 C6 3C 2A      je _if154_else
6076   2A05             _if154_true:
6077   2A05             ;; *t++ = *prog++; 
6078   2A05 2C FF FF      mov b, [bp + -1] ; $t             
6079   2A08 FD 79         mov g, b
6080   2A0A FD 77         inc b
6081   2A0C FA FF FF      lea d, [bp + -1] ; $t
6082   2A0F FD 43         mov [d], b
6083   2A11 FD 27         mov b, g
6084   2A13 D8            push b
6085   2A14 29 D7 3A      mov b, [_prog] ; $prog           
6086   2A17 FD 79         mov g, b
6087   2A19 FD 77         inc b
6088   2A1B 3B D7 3A      mov d, _prog ; $prog
6089   2A1E FD 43         mov [d], b
6090   2A20 FD 27         mov b, g
6091   2A22 74            mov d, b
6092   2A23 32            mov bl, [d]
6093   2A24 A7 00         mov bh, 0
6094   2A26 E7            pop d
6095   2A27 FD 3E         mov [d], bl
6096   2A29             ;; tok = MINUS; 
6097   2A29 3B D3 3A      mov d, _tok ; $tok         
6098   2A2C 26 09 00      mov b, 9; MINUS        
6099   2A2F FD 43         mov [d], b
6100   2A31             ;; toktype = DELIMITER;   
6101   2A31 3B D5 3A      mov d, _toktype ; $toktype         
6102   2A34 26 02 00      mov b, 2; DELIMITER        
6103   2A37 FD 43         mov [d], b
6104   2A39 0A BD 2B      jmp _if154_exit
6105   2A3C             _if154_else:
6106   2A3C             ;; if(*prog == '$'){ 
6107   2A3C             _if155_cond:
6108   2A3C 29 D7 3A      mov b, [_prog] ; $prog           
6109   2A3F 74            mov d, b
6110   2A40 32            mov bl, [d]
6111   2A41 A7 00         mov bh, 0
6112   2A43             ; START RELATIONAL
6113   2A43 D7            push a
6114   2A44 11            mov a, b
6115   2A45 26 24 00      mov b, $24
6116   2A48 B0            cmp a, b
6117   2A49 FD 71         seq ; ==
6118   2A4B E4            pop a
6119   2A4C             ; END RELATIONAL
6120   2A4C C0 00 00      cmp b, 0
6121   2A4F C6 89 2A      je _if155_else
6122   2A52             _if155_true:
6123   2A52             ;; *t++ = *prog++; 
6124   2A52 2C FF FF      mov b, [bp + -1] ; $t             
6125   2A55 FD 79         mov g, b
6126   2A57 FD 77         inc b
6127   2A59 FA FF FF      lea d, [bp + -1] ; $t
6128   2A5C FD 43         mov [d], b
6129   2A5E FD 27         mov b, g
6130   2A60 D8            push b
6131   2A61 29 D7 3A      mov b, [_prog] ; $prog           
6132   2A64 FD 79         mov g, b
6133   2A66 FD 77         inc b
6134   2A68 3B D7 3A      mov d, _prog ; $prog
6135   2A6B FD 43         mov [d], b
6136   2A6D FD 27         mov b, g
6137   2A6F 74            mov d, b
6138   2A70 32            mov bl, [d]
6139   2A71 A7 00         mov bh, 0
6140   2A73 E7            pop d
6141   2A74 FD 3E         mov [d], bl
6142   2A76             ;; tok = DOLLAR; 
6143   2A76 3B D3 3A      mov d, _tok ; $tok         
6144   2A79 26 0A 00      mov b, 10; DOLLAR        
6145   2A7C FD 43         mov [d], b
6146   2A7E             ;; toktype = DELIMITER;   
6147   2A7E 3B D5 3A      mov d, _toktype ; $toktype         
6148   2A81 26 02 00      mov b, 2; DELIMITER        
6149   2A84 FD 43         mov [d], b
6150   2A86 0A BD 2B      jmp _if155_exit
6151   2A89             _if155_else:
6152   2A89             ;; if(*prog == ':'){ 
6153   2A89             _if156_cond:
6154   2A89 29 D7 3A      mov b, [_prog] ; $prog           
6155   2A8C 74            mov d, b
6156   2A8D 32            mov bl, [d]
6157   2A8E A7 00         mov bh, 0
6158   2A90             ; START RELATIONAL
6159   2A90 D7            push a
6160   2A91 11            mov a, b
6161   2A92 26 3A 00      mov b, $3a
6162   2A95 B0            cmp a, b
6163   2A96 FD 71         seq ; ==
6164   2A98 E4            pop a
6165   2A99             ; END RELATIONAL
6166   2A99 C0 00 00      cmp b, 0
6167   2A9C C6 D6 2A      je _if156_else
6168   2A9F             _if156_true:
6169   2A9F             ;; *t++ = *prog++; 
6170   2A9F 2C FF FF      mov b, [bp + -1] ; $t             
6171   2AA2 FD 79         mov g, b
6172   2AA4 FD 77         inc b
6173   2AA6 FA FF FF      lea d, [bp + -1] ; $t
6174   2AA9 FD 43         mov [d], b
6175   2AAB FD 27         mov b, g
6176   2AAD D8            push b
6177   2AAE 29 D7 3A      mov b, [_prog] ; $prog           
6178   2AB1 FD 79         mov g, b
6179   2AB3 FD 77         inc b
6180   2AB5 3B D7 3A      mov d, _prog ; $prog
6181   2AB8 FD 43         mov [d], b
6182   2ABA FD 27         mov b, g
6183   2ABC 74            mov d, b
6184   2ABD 32            mov bl, [d]
6185   2ABE A7 00         mov bh, 0
6186   2AC0 E7            pop d
6187   2AC1 FD 3E         mov [d], bl
6188   2AC3             ;; tok = COLON; 
6189   2AC3 3B D3 3A      mov d, _tok ; $tok         
6190   2AC6 26 0D 00      mov b, 13; COLON        
6191   2AC9 FD 43         mov [d], b
6192   2ACB             ;; toktype = DELIMITER;   
6193   2ACB 3B D5 3A      mov d, _toktype ; $toktype         
6194   2ACE 26 02 00      mov b, 2; DELIMITER        
6195   2AD1 FD 43         mov [d], b
6196   2AD3 0A BD 2B      jmp _if156_exit
6197   2AD6             _if156_else:
6198   2AD6             ;; if(*prog == ';'){ 
6199   2AD6             _if157_cond:
6200   2AD6 29 D7 3A      mov b, [_prog] ; $prog           
6201   2AD9 74            mov d, b
6202   2ADA 32            mov bl, [d]
6203   2ADB A7 00         mov bh, 0
6204   2ADD             ; START RELATIONAL
6205   2ADD D7            push a
6206   2ADE 11            mov a, b
6207   2ADF 26 3B 00      mov b, $3b
6208   2AE2 B0            cmp a, b
6209   2AE3 FD 71         seq ; ==
6210   2AE5 E4            pop a
6211   2AE6             ; END RELATIONAL
6212   2AE6 C0 00 00      cmp b, 0
6213   2AE9 C6 23 2B      je _if157_else
6214   2AEC             _if157_true:
6215   2AEC             ;; *t++ = *prog++; 
6216   2AEC 2C FF FF      mov b, [bp + -1] ; $t             
6217   2AEF FD 79         mov g, b
6218   2AF1 FD 77         inc b
6219   2AF3 FA FF FF      lea d, [bp + -1] ; $t
6220   2AF6 FD 43         mov [d], b
6221   2AF8 FD 27         mov b, g
6222   2AFA D8            push b
6223   2AFB 29 D7 3A      mov b, [_prog] ; $prog           
6224   2AFE FD 79         mov g, b
6225   2B00 FD 77         inc b
6226   2B02 3B D7 3A      mov d, _prog ; $prog
6227   2B05 FD 43         mov [d], b
6228   2B07 FD 27         mov b, g
6229   2B09 74            mov d, b
6230   2B0A 32            mov bl, [d]
6231   2B0B A7 00         mov bh, 0
6232   2B0D E7            pop d
6233   2B0E FD 3E         mov [d], bl
6234   2B10             ;; tok = SEMICOLON; 
6235   2B10 3B D3 3A      mov d, _tok ; $tok         
6236   2B13 26 0E 00      mov b, 14; SEMICOLON        
6237   2B16 FD 43         mov [d], b
6238   2B18             ;; toktype = DELIMITER;   
6239   2B18 3B D5 3A      mov d, _toktype ; $toktype         
6240   2B1B 26 02 00      mov b, 2; DELIMITER        
6241   2B1E FD 43         mov [d], b
6242   2B20 0A BD 2B      jmp _if157_exit
6243   2B23             _if157_else:
6244   2B23             ;; if(*prog == ','){ 
6245   2B23             _if158_cond:
6246   2B23 29 D7 3A      mov b, [_prog] ; $prog           
6247   2B26 74            mov d, b
6248   2B27 32            mov bl, [d]
6249   2B28 A7 00         mov bh, 0
6250   2B2A             ; START RELATIONAL
6251   2B2A D7            push a
6252   2B2B 11            mov a, b
6253   2B2C 26 2C 00      mov b, $2c
6254   2B2F B0            cmp a, b
6255   2B30 FD 71         seq ; ==
6256   2B32 E4            pop a
6257   2B33             ; END RELATIONAL
6258   2B33 C0 00 00      cmp b, 0
6259   2B36 C6 70 2B      je _if158_else
6260   2B39             _if158_true:
6261   2B39             ;; *t++ = *prog++; 
6262   2B39 2C FF FF      mov b, [bp + -1] ; $t             
6263   2B3C FD 79         mov g, b
6264   2B3E FD 77         inc b
6265   2B40 FA FF FF      lea d, [bp + -1] ; $t
6266   2B43 FD 43         mov [d], b
6267   2B45 FD 27         mov b, g
6268   2B47 D8            push b
6269   2B48 29 D7 3A      mov b, [_prog] ; $prog           
6270   2B4B FD 79         mov g, b
6271   2B4D FD 77         inc b
6272   2B4F 3B D7 3A      mov d, _prog ; $prog
6273   2B52 FD 43         mov [d], b
6274   2B54 FD 27         mov b, g
6275   2B56 74            mov d, b
6276   2B57 32            mov bl, [d]
6277   2B58 A7 00         mov bh, 0
6278   2B5A E7            pop d
6279   2B5B FD 3E         mov [d], bl
6280   2B5D             ;; tok = COMMA; 
6281   2B5D 3B D3 3A      mov d, _tok ; $tok         
6282   2B60 26 0F 00      mov b, 15; COMMA        
6283   2B63 FD 43         mov [d], b
6284   2B65             ;; toktype = DELIMITER;   
6285   2B65 3B D5 3A      mov d, _toktype ; $toktype         
6286   2B68 26 02 00      mov b, 2; DELIMITER        
6287   2B6B FD 43         mov [d], b
6288   2B6D 0A BD 2B      jmp _if158_exit
6289   2B70             _if158_else:
6290   2B70             ;; if(*prog == '.'){ 
6291   2B70             _if159_cond:
6292   2B70 29 D7 3A      mov b, [_prog] ; $prog           
6293   2B73 74            mov d, b
6294   2B74 32            mov bl, [d]
6295   2B75 A7 00         mov bh, 0
6296   2B77             ; START RELATIONAL
6297   2B77 D7            push a
6298   2B78 11            mov a, b
6299   2B79 26 2E 00      mov b, $2e
6300   2B7C B0            cmp a, b
6301   2B7D FD 71         seq ; ==
6302   2B7F E4            pop a
6303   2B80             ; END RELATIONAL
6304   2B80 C0 00 00      cmp b, 0
6305   2B83 C6 BD 2B      je _if159_exit
6306   2B86             _if159_true:
6307   2B86             ;; *t++ = *prog++; 
6308   2B86 2C FF FF      mov b, [bp + -1] ; $t             
6309   2B89 FD 79         mov g, b
6310   2B8B FD 77         inc b
6311   2B8D FA FF FF      lea d, [bp + -1] ; $t
6312   2B90 FD 43         mov [d], b
6313   2B92 FD 27         mov b, g
6314   2B94 D8            push b
6315   2B95 29 D7 3A      mov b, [_prog] ; $prog           
6316   2B98 FD 79         mov g, b
6317   2B9A FD 77         inc b
6318   2B9C 3B D7 3A      mov d, _prog ; $prog
6319   2B9F FD 43         mov [d], b
6320   2BA1 FD 27         mov b, g
6321   2BA3 74            mov d, b
6322   2BA4 32            mov bl, [d]
6323   2BA5 A7 00         mov bh, 0
6324   2BA7 E7            pop d
6325   2BA8 FD 3E         mov [d], bl
6326   2BAA             ;; tok = DOT; 
6327   2BAA 3B D3 3A      mov d, _tok ; $tok         
6328   2BAD 26 10 00      mov b, 16; DOT        
6329   2BB0 FD 43         mov [d], b
6330   2BB2             ;; toktype = DELIMITER;   
6331   2BB2 3B D5 3A      mov d, _toktype ; $toktype         
6332   2BB5 26 02 00      mov b, 2; DELIMITER        
6333   2BB8 FD 43         mov [d], b
6334   2BBA 0A BD 2B      jmp _if159_exit
6335   2BBD             _if159_exit:
6336   2BBD             _if158_exit:
6337   2BBD             _if157_exit:
6338   2BBD             _if156_exit:
6339   2BBD             _if155_exit:
6340   2BBD             _if154_exit:
6341   2BBD             _if153_exit:
6342   2BBD             _if152_exit:
6343   2BBD             _if151_exit:
6344   2BBD             _if148_exit:
6345   2BBD             _if145_exit:
6346   2BBD             _if141_exit:
6347   2BBD             _if138_exit:
6348   2BBD             ;; *t = '\0'; 
6349   2BBD 2C FF FF      mov b, [bp + -1] ; $t             
6350   2BC0 D8            push b
6351   2BC1 26 00 00      mov b, $0
6352   2BC4 E7            pop d
6353   2BC5 FD 3E         mov [d], bl
6354   2BC7             ;; if(toktype == TYPE_UNDEF){ 
6355   2BC7             _if160_cond:
6356   2BC7 29 D5 3A      mov b, [_toktype] ; $toktype           
6357   2BCA             ; START RELATIONAL
6358   2BCA D7            push a
6359   2BCB 11            mov a, b
6360   2BCC 26 00 00      mov b, 0; TYPE_UNDEF
6361   2BCF B0            cmp a, b
6362   2BD0 FD 71         seq ; ==
6363   2BD2 E4            pop a
6364   2BD3             ; END RELATIONAL
6365   2BD3 C0 00 00      cmp b, 0
6366   2BD6 C6 32 2C      je _if160_exit
6367   2BD9             _if160_true:
6368   2BD9             ;; print("TOKEN ERROR. Prog: "); printx16((int)(prog-program));  
6369   2BD9 26 53 3F      mov b, __s75 ; "TOKEN ERROR. Prog: "
6370   2BDC FD AB         swp b
6371   2BDE D8            push b
6372   2BDF 07 FB 32      call print
6373   2BE2 51 02 00      add sp, 2
6374   2BE5             ;; printx16((int)(prog-program));  
6375   2BE5 AB            snex b
6376   2BE6 29 D7 3A      mov b, [_prog] ; $prog           
6377   2BE9             ; START TERMS
6378   2BE9 D7            push a
6379   2BEA 11            mov a, b
6380   2BEB 29 1B 3C      mov b, [_program] ; $program           
6381   2BEE 60            sub a, b
6382   2BEF 27            mov b, a
6383   2BF0 E4            pop a
6384   2BF1             ; END TERMS
6385   2BF1 FD AB         swp b
6386   2BF3 D8            push b
6387   2BF4 07 EA 2F      call printx16
6388   2BF7 51 02 00      add sp, 2
6389   2BFA             ;; print(", ProgVal: "); putchar(*prog);  
6390   2BFA 26 67 3F      mov b, __s76 ; ", ProgVal: "
6391   2BFD FD AB         swp b
6392   2BFF D8            push b
6393   2C00 07 FB 32      call print
6394   2C03 51 02 00      add sp, 2
6395   2C06             ;; putchar(*prog);  
6396   2C06 29 D7 3A      mov b, [_prog] ; $prog           
6397   2C09 74            mov d, b
6398   2C0A 32            mov bl, [d]
6399   2C0B A7 00         mov bh, 0
6400   2C0D DD            push bl
6401   2C0E 07 EF 32      call putchar
6402   2C11 51 01 00      add sp, 1
6403   2C14             ;; print("\n Text after prog: \n"); 
6404   2C14 26 73 3F      mov b, __s77 ; "\n Text after prog: \n"
6405   2C17 FD AB         swp b
6406   2C19 D8            push b
6407   2C1A 07 FB 32      call print
6408   2C1D 51 02 00      add sp, 2
6409   2C20             ;; print(prog); 
6410   2C20 29 D7 3A      mov b, [_prog] ; $prog           
6411   2C23 FD AB         swp b
6412   2C25 D8            push b
6413   2C26 07 FB 32      call print
6414   2C29 51 02 00      add sp, 2
6415   2C2C             ;; exit(); 
6416   2C2C 07 4E 33      call exit
6417   2C2F 0A 32 2C      jmp _if160_exit
6418   2C32             _if160_exit:
6419   2C32 F9            leave
6420   2C33 09            ret
6421   2C34             
6422   2C34             convert_constant:
6423   2C34 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6424   2C37             ; $s 
6425   2C37             ; $t 
6426   2C37 52 04 00      sub sp, 4
6427   2C3A             ;; t = token; 
6428   2C3A FA FD FF      lea d, [bp + -3] ; $t         
6429   2C3D 26 D9 3A      mov b, _token_data ; $token                   
6430   2C40 FD 43         mov [d], b
6431   2C42             ;; s = string_const; 
6432   2C42 FA FF FF      lea d, [bp + -1] ; $s         
6433   2C45 26 19 3B      mov b, _string_const_data ; $string_const                   
6434   2C48 FD 43         mov [d], b
6435   2C4A             ;; if(toktype == CHAR_CONST){ 
6436   2C4A             _if161_cond:
6437   2C4A 29 D5 3A      mov b, [_toktype] ; $toktype           
6438   2C4D             ; START RELATIONAL
6439   2C4D D7            push a
6440   2C4E 11            mov a, b
6441   2C4F 26 03 00      mov b, 3; CHAR_CONST
6442   2C52 B0            cmp a, b
6443   2C53 FD 71         seq ; ==
6444   2C55 E4            pop a
6445   2C56             ; END RELATIONAL
6446   2C56 C0 00 00      cmp b, 0
6447   2C59 C6 F3 2D      je _if161_else
6448   2C5C             _if161_true:
6449   2C5C             ;; t++; 
6450   2C5C 2C FD FF      mov b, [bp + -3] ; $t             
6451   2C5F FD 79         mov g, b
6452   2C61 FD 77         inc b
6453   2C63 FA FD FF      lea d, [bp + -3] ; $t
6454   2C66 FD 43         mov [d], b
6455   2C68 FD 27         mov b, g
6456   2C6A             ;; if(*t == '\\'){ 
6457   2C6A             _if162_cond:
6458   2C6A 2C FD FF      mov b, [bp + -3] ; $t             
6459   2C6D 74            mov d, b
6460   2C6E 32            mov bl, [d]
6461   2C6F A7 00         mov bh, 0
6462   2C71             ; START RELATIONAL
6463   2C71 D7            push a
6464   2C72 11            mov a, b
6465   2C73 26 5C 00      mov b, $5c
6466   2C76 B0            cmp a, b
6467   2C77 FD 71         seq ; ==
6468   2C79 E4            pop a
6469   2C7A             ; END RELATIONAL
6470   2C7A C0 00 00      cmp b, 0
6471   2C7D C6 D7 2D      je _if162_else
6472   2C80             _if162_true:
6473   2C80             ;; t++; 
6474   2C80 2C FD FF      mov b, [bp + -3] ; $t             
6475   2C83 FD 79         mov g, b
6476   2C85 FD 77         inc b
6477   2C87 FA FD FF      lea d, [bp + -3] ; $t
6478   2C8A FD 43         mov [d], b
6479   2C8C FD 27         mov b, g
6480   2C8E             ;; switch(*t){ 
6481   2C8E             _switch163_expr:
6482   2C8E 2C FD FF      mov b, [bp + -3] ; $t             
6483   2C91 74            mov d, b
6484   2C92 32            mov bl, [d]
6485   2C93 A7 00         mov bh, 0
6486   2C95             _switch163_comparisons:
6487   2C95 C1 30         cmp bl, $30
6488   2C97 C6 CF 2C      je _switch163_case0
6489   2C9A C1 61         cmp bl, $61
6490   2C9C C6 E7 2C      je _switch163_case1
6491   2C9F C1 62         cmp bl, $62
6492   2CA1 C6 FF 2C      je _switch163_case2
6493   2CA4 C1 66         cmp bl, $66
6494   2CA6 C6 17 2D      je _switch163_case3
6495   2CA9 C1 6E         cmp bl, $6e
6496   2CAB C6 2F 2D      je _switch163_case4
6497   2CAE C1 72         cmp bl, $72
6498   2CB0 C6 47 2D      je _switch163_case5
6499   2CB3 C1 74         cmp bl, $74
6500   2CB5 C6 5F 2D      je _switch163_case6
6501   2CB8 C1 76         cmp bl, $76
6502   2CBA C6 77 2D      je _switch163_case7
6503   2CBD C1 5C         cmp bl, $5c
6504   2CBF C6 8F 2D      je _switch163_case8
6505   2CC2 C1 27         cmp bl, $27
6506   2CC4 C6 A7 2D      je _switch163_case9
6507   2CC7 C1 22         cmp bl, $22
6508   2CC9 C6 BF 2D      je _switch163_case10
6509   2CCC 0A D4 2D      jmp _switch163_exit
6510   2CCF             _switch163_case0:
6511   2CCF             ;; *s++ = '\0'; 
6512   2CCF 2C FF FF      mov b, [bp + -1] ; $s             
6513   2CD2 FD 79         mov g, b
6514   2CD4 FD 77         inc b
6515   2CD6 FA FF FF      lea d, [bp + -1] ; $s
6516   2CD9 FD 43         mov [d], b
6517   2CDB FD 27         mov b, g
6518   2CDD D8            push b
6519   2CDE 26 00 00      mov b, $0
6520   2CE1 E7            pop d
6521   2CE2 FD 3E         mov [d], bl
6522   2CE4             ;; break; 
6523   2CE4 0A D4 2D      jmp _switch163_exit ; case break
6524   2CE7             _switch163_case1:
6525   2CE7             ;; *s++ = '\a'; 
6526   2CE7 2C FF FF      mov b, [bp + -1] ; $s             
6527   2CEA FD 79         mov g, b
6528   2CEC FD 77         inc b
6529   2CEE FA FF FF      lea d, [bp + -1] ; $s
6530   2CF1 FD 43         mov [d], b
6531   2CF3 FD 27         mov b, g
6532   2CF5 D8            push b
6533   2CF6 26 07 00      mov b, $7
6534   2CF9 E7            pop d
6535   2CFA FD 3E         mov [d], bl
6536   2CFC             ;; break; 
6537   2CFC 0A D4 2D      jmp _switch163_exit ; case break
6538   2CFF             _switch163_case2:
6539   2CFF             ;; *s++ = '\b'; 
6540   2CFF 2C FF FF      mov b, [bp + -1] ; $s             
6541   2D02 FD 79         mov g, b
6542   2D04 FD 77         inc b
6543   2D06 FA FF FF      lea d, [bp + -1] ; $s
6544   2D09 FD 43         mov [d], b
6545   2D0B FD 27         mov b, g
6546   2D0D D8            push b
6547   2D0E 26 08 00      mov b, $8
6548   2D11 E7            pop d
6549   2D12 FD 3E         mov [d], bl
6550   2D14             ;; break;   
6551   2D14 0A D4 2D      jmp _switch163_exit ; case break
6552   2D17             _switch163_case3:
6553   2D17             ;; *s++ = '\f'; 
6554   2D17 2C FF FF      mov b, [bp + -1] ; $s             
6555   2D1A FD 79         mov g, b
6556   2D1C FD 77         inc b
6557   2D1E FA FF FF      lea d, [bp + -1] ; $s
6558   2D21 FD 43         mov [d], b
6559   2D23 FD 27         mov b, g
6560   2D25 D8            push b
6561   2D26 26 0C 00      mov b, $c
6562   2D29 E7            pop d
6563   2D2A FD 3E         mov [d], bl
6564   2D2C             ;; break; 
6565   2D2C 0A D4 2D      jmp _switch163_exit ; case break
6566   2D2F             _switch163_case4:
6567   2D2F             ;; *s++ = '\n'; 
6568   2D2F 2C FF FF      mov b, [bp + -1] ; $s             
6569   2D32 FD 79         mov g, b
6570   2D34 FD 77         inc b
6571   2D36 FA FF FF      lea d, [bp + -1] ; $s
6572   2D39 FD 43         mov [d], b
6573   2D3B FD 27         mov b, g
6574   2D3D D8            push b
6575   2D3E 26 0A 00      mov b, $a
6576   2D41 E7            pop d
6577   2D42 FD 3E         mov [d], bl
6578   2D44             ;; break; 
6579   2D44 0A D4 2D      jmp _switch163_exit ; case break
6580   2D47             _switch163_case5:
6581   2D47             ;; *s++ = '\r'; 
6582   2D47 2C FF FF      mov b, [bp + -1] ; $s             
6583   2D4A FD 79         mov g, b
6584   2D4C FD 77         inc b
6585   2D4E FA FF FF      lea d, [bp + -1] ; $s
6586   2D51 FD 43         mov [d], b
6587   2D53 FD 27         mov b, g
6588   2D55 D8            push b
6589   2D56 26 0D 00      mov b, $d
6590   2D59 E7            pop d
6591   2D5A FD 3E         mov [d], bl
6592   2D5C             ;; break; 
6593   2D5C 0A D4 2D      jmp _switch163_exit ; case break
6594   2D5F             _switch163_case6:
6595   2D5F             ;; *s++ = '\t'; 
6596   2D5F 2C FF FF      mov b, [bp + -1] ; $s             
6597   2D62 FD 79         mov g, b
6598   2D64 FD 77         inc b
6599   2D66 FA FF FF      lea d, [bp + -1] ; $s
6600   2D69 FD 43         mov [d], b
6601   2D6B FD 27         mov b, g
6602   2D6D D8            push b
6603   2D6E 26 09 00      mov b, $9
6604   2D71 E7            pop d
6605   2D72 FD 3E         mov [d], bl
6606   2D74             ;; break; 
6607   2D74 0A D4 2D      jmp _switch163_exit ; case break
6608   2D77             _switch163_case7:
6609   2D77             ;; *s++ = '\v'; 
6610   2D77 2C FF FF      mov b, [bp + -1] ; $s             
6611   2D7A FD 79         mov g, b
6612   2D7C FD 77         inc b
6613   2D7E FA FF FF      lea d, [bp + -1] ; $s
6614   2D81 FD 43         mov [d], b
6615   2D83 FD 27         mov b, g
6616   2D85 D8            push b
6617   2D86 26 0B 00      mov b, $b
6618   2D89 E7            pop d
6619   2D8A FD 3E         mov [d], bl
6620   2D8C             ;; break; 
6621   2D8C 0A D4 2D      jmp _switch163_exit ; case break
6622   2D8F             _switch163_case8:
6623   2D8F             ;; *s++ = '\\'; 
6624   2D8F 2C FF FF      mov b, [bp + -1] ; $s             
6625   2D92 FD 79         mov g, b
6626   2D94 FD 77         inc b
6627   2D96 FA FF FF      lea d, [bp + -1] ; $s
6628   2D99 FD 43         mov [d], b
6629   2D9B FD 27         mov b, g
6630   2D9D D8            push b
6631   2D9E 26 5C 00      mov b, $5c
6632   2DA1 E7            pop d
6633   2DA2 FD 3E         mov [d], bl
6634   2DA4             ;; break; 
6635   2DA4 0A D4 2D      jmp _switch163_exit ; case break
6636   2DA7             _switch163_case9:
6637   2DA7             ;; *s++ = '\''; 
6638   2DA7 2C FF FF      mov b, [bp + -1] ; $s             
6639   2DAA FD 79         mov g, b
6640   2DAC FD 77         inc b
6641   2DAE FA FF FF      lea d, [bp + -1] ; $s
6642   2DB1 FD 43         mov [d], b
6643   2DB3 FD 27         mov b, g
6644   2DB5 D8            push b
6645   2DB6 26 27 00      mov b, $27
6646   2DB9 E7            pop d
6647   2DBA FD 3E         mov [d], bl
6648   2DBC             ;; break; 
6649   2DBC 0A D4 2D      jmp _switch163_exit ; case break
6650   2DBF             _switch163_case10:
6651   2DBF             ;; *s++ = '\"'; 
6652   2DBF 2C FF FF      mov b, [bp + -1] ; $s             
6653   2DC2 FD 79         mov g, b
6654   2DC4 FD 77         inc b
6655   2DC6 FA FF FF      lea d, [bp + -1] ; $s
6656   2DC9 FD 43         mov [d], b
6657   2DCB FD 27         mov b, g
6658   2DCD D8            push b
6659   2DCE 26 22 00      mov b, $22
6660   2DD1 E7            pop d
6661   2DD2 FD 3E         mov [d], bl
6662   2DD4             _switch163_exit:
6663   2DD4 0A F0 2D      jmp _if162_exit
6664   2DD7             _if162_else:
6665   2DD7             ;; *s++ = *t; 
6666   2DD7 2C FF FF      mov b, [bp + -1] ; $s             
6667   2DDA FD 79         mov g, b
6668   2DDC FD 77         inc b
6669   2DDE FA FF FF      lea d, [bp + -1] ; $s
6670   2DE1 FD 43         mov [d], b
6671   2DE3 FD 27         mov b, g
6672   2DE5 D8            push b
6673   2DE6 2C FD FF      mov b, [bp + -3] ; $t             
6674   2DE9 74            mov d, b
6675   2DEA 32            mov bl, [d]
6676   2DEB A7 00         mov bh, 0
6677   2DED E7            pop d
6678   2DEE FD 3E         mov [d], bl
6679   2DF0             _if162_exit:
6680   2DF0 0A 5F 2E      jmp _if161_exit
6681   2DF3             _if161_else:
6682   2DF3             ;; if(toktype == STRING_CONST){ 
6683   2DF3             _if164_cond:
6684   2DF3 29 D5 3A      mov b, [_toktype] ; $toktype           
6685   2DF6             ; START RELATIONAL
6686   2DF6 D7            push a
6687   2DF7 11            mov a, b
6688   2DF8 26 04 00      mov b, 4; STRING_CONST
6689   2DFB B0            cmp a, b
6690   2DFC FD 71         seq ; ==
6691   2DFE E4            pop a
6692   2DFF             ; END RELATIONAL
6693   2DFF C0 00 00      cmp b, 0
6694   2E02 C6 5F 2E      je _if164_exit
6695   2E05             _if164_true:
6696   2E05             ;; t++; 
6697   2E05 2C FD FF      mov b, [bp + -3] ; $t             
6698   2E08 FD 79         mov g, b
6699   2E0A FD 77         inc b
6700   2E0C FA FD FF      lea d, [bp + -3] ; $t
6701   2E0F FD 43         mov [d], b
6702   2E11 FD 27         mov b, g
6703   2E13             ;; while(*t != '\"' && *t){ 
6704   2E13             _while165_cond:
6705   2E13 2C FD FF      mov b, [bp + -3] ; $t             
6706   2E16 74            mov d, b
6707   2E17 32            mov bl, [d]
6708   2E18 A7 00         mov bh, 0
6709   2E1A             ; START RELATIONAL
6710   2E1A D7            push a
6711   2E1B 11            mov a, b
6712   2E1C 26 22 00      mov b, $22
6713   2E1F B0            cmp a, b
6714   2E20 FD 72         sneq ; !=
6715   2E22 E4            pop a
6716   2E23             ; END RELATIONAL
6717   2E23 D7            push a
6718   2E24 11            mov a, b
6719   2E25 2C FD FF      mov b, [bp + -3] ; $t             
6720   2E28 74            mov d, b
6721   2E29 32            mov bl, [d]
6722   2E2A A7 00         mov bh, 0
6723   2E2C FD A7         sand a, b ; &&
6724   2E2E E4            pop a
6725   2E2F C0 00 00      cmp b, 0
6726   2E32 C6 5C 2E      je _while165_exit
6727   2E35             _while165_block:
6728   2E35             ;; *s++ = *t++; 
6729   2E35 2C FF FF      mov b, [bp + -1] ; $s             
6730   2E38 FD 79         mov g, b
6731   2E3A FD 77         inc b
6732   2E3C FA FF FF      lea d, [bp + -1] ; $s
6733   2E3F FD 43         mov [d], b
6734   2E41 FD 27         mov b, g
6735   2E43 D8            push b
6736   2E44 2C FD FF      mov b, [bp + -3] ; $t             
6737   2E47 FD 79         mov g, b
6738   2E49 FD 77         inc b
6739   2E4B FA FD FF      lea d, [bp + -3] ; $t
6740   2E4E FD 43         mov [d], b
6741   2E50 FD 27         mov b, g
6742   2E52 74            mov d, b
6743   2E53 32            mov bl, [d]
6744   2E54 A7 00         mov bh, 0
6745   2E56 E7            pop d
6746   2E57 FD 3E         mov [d], bl
6747   2E59 0A 13 2E      jmp _while165_cond
6748   2E5C             _while165_exit:
6749   2E5C 0A 5F 2E      jmp _if164_exit
6750   2E5F             _if164_exit:
6751   2E5F             _if161_exit:
6752   2E5F             ;; *s = '\0'; 
6753   2E5F 2C FF FF      mov b, [bp + -1] ; $s             
6754   2E62 D8            push b
6755   2E63 26 00 00      mov b, $0
6756   2E66 E7            pop d
6757   2E67 FD 3E         mov [d], bl
6758   2E69 F9            leave
6759   2E6A 09            ret
6760   2E6B             
6761   2E6B             error:
6762   2E6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
6763   2E6E             ;; print("\nError: "); 
6764   2E6E 26 88 3F      mov b, __s78 ; "\nError: "
6765   2E71 FD AB         swp b
6766   2E73 D8            push b
6767   2E74 07 FB 32      call print
6768   2E77 51 02 00      add sp, 2
6769   2E7A             ;; print(msg); 
6770   2E7A 2C 05 00      mov b, [bp + 5] ; $msg             
6771   2E7D FD AB         swp b
6772   2E7F D8            push b
6773   2E80 07 FB 32      call print
6774   2E83 51 02 00      add sp, 2
6775   2E86             ;; print("\n"); 
6776   2E86 26 6F 3C      mov b, __s9 ; "\n"
6777   2E89 FD AB         swp b
6778   2E8B D8            push b
6779   2E8C 07 FB 32      call print
6780   2E8F 51 02 00      add sp, 2
6781   2E92             ;; exit(); 
6782   2E92 07 4E 33      call exit
6783   2E95 F9            leave
6784   2E96 09            ret
6785   2E97             
6786   2E97             error_s:
6787   2E97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6788   2E9A             ;; print("\nError: "); 
6789   2E9A 26 88 3F      mov b, __s78 ; "\nError: "
6790   2E9D FD AB         swp b
6791   2E9F D8            push b
6792   2EA0 07 FB 32      call print
6793   2EA3 51 02 00      add sp, 2
6794   2EA6             ;; print(msg); 
6795   2EA6 2C 07 00      mov b, [bp + 7] ; $msg             
6796   2EA9 FD AB         swp b
6797   2EAB D8            push b
6798   2EAC 07 FB 32      call print
6799   2EAF 51 02 00      add sp, 2
6800   2EB2             ;; print(param); 
6801   2EB2 2C 05 00      mov b, [bp + 5] ; $param             
6802   2EB5 FD AB         swp b
6803   2EB7 D8            push b
6804   2EB8 07 FB 32      call print
6805   2EBB 51 02 00      add sp, 2
6806   2EBE             ;; print("\n"); 
6807   2EBE 26 6F 3C      mov b, __s9 ; "\n"
6808   2EC1 FD AB         swp b
6809   2EC3 D8            push b
6810   2EC4 07 FB 32      call print
6811   2EC7 51 02 00      add sp, 2
6812   2ECA             ;; exit(); 
6813   2ECA 07 4E 33      call exit
6814   2ECD F9            leave
6815   2ECE 09            ret
6816   2ECF             
6817   2ECF             push_prog:
6818   2ECF F8 00 00      enter 0 ; (push bp; mov bp, sp)
6819   2ED2             ;; if(prog_tos == 10) error("Cannot push prog. Stack overflow."); 
6820   2ED2             _if166_cond:
6821   2ED2 29 37 3C      mov b, [_prog_tos] ; $prog_tos           
6822   2ED5             ; START RELATIONAL
6823   2ED5 D7            push a
6824   2ED6 11            mov a, b
6825   2ED7 26 0A 00      mov b, $a
6826   2EDA B0            cmp a, b
6827   2EDB FD 71         seq ; ==
6828   2EDD E4            pop a
6829   2EDE             ; END RELATIONAL
6830   2EDE C0 00 00      cmp b, 0
6831   2EE1 C6 F3 2E      je _if166_exit
6832   2EE4             _if166_true:
6833   2EE4             ;; error("Cannot push prog. Stack overflow."); 
6834   2EE4 26 91 3F      mov b, __s79 ; "Cannot push prog. Stack overflow."
6835   2EE7 FD AB         swp b
6836   2EE9 D8            push b
6837   2EEA 07 6B 2E      call error
6838   2EED 51 02 00      add sp, 2
6839   2EF0 0A F3 2E      jmp _if166_exit
6840   2EF3             _if166_exit:
6841   2EF3             ;; prog_stack[prog_tos] = prog; 
6842   2EF3 3B 23 3C      mov d, _prog_stack_data ; $prog_stack
6843   2EF6 D7            push a         
6844   2EF7 29 37 3C      mov b, [_prog_tos] ; $prog_tos                   
6845   2EFA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6846   2EFE E4            pop a         
6847   2EFF 29 D7 3A      mov b, [_prog] ; $prog                   
6848   2F02 FD 43         mov [d], b
6849   2F04             ;; prog_tos++; 
6850   2F04 29 37 3C      mov b, [_prog_tos] ; $prog_tos           
6851   2F07 FD 79         mov g, b
6852   2F09 FD 77         inc b
6853   2F0B 3B 37 3C      mov d, _prog_tos ; $prog_tos
6854   2F0E FD 43         mov [d], b
6855   2F10 FD 27         mov b, g
6856   2F12 F9            leave
6857   2F13 09            ret
6858   2F14             
6859   2F14             pop_prog:
6860   2F14 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6861   2F17             ;; if(prog_tos == 0) error("Cannot pop prog. Stack overflow."); 
6862   2F17             _if167_cond:
6863   2F17 29 37 3C      mov b, [_prog_tos] ; $prog_tos           
6864   2F1A             ; START RELATIONAL
6865   2F1A D7            push a
6866   2F1B 11            mov a, b
6867   2F1C 26 00 00      mov b, $0
6868   2F1F B0            cmp a, b
6869   2F20 FD 71         seq ; ==
6870   2F22 E4            pop a
6871   2F23             ; END RELATIONAL
6872   2F23 C0 00 00      cmp b, 0
6873   2F26 C6 38 2F      je _if167_exit
6874   2F29             _if167_true:
6875   2F29             ;; error("Cannot pop prog. Stack overflow."); 
6876   2F29 26 B3 3F      mov b, __s80 ; "Cannot pop prog. Stack overflow."
6877   2F2C FD AB         swp b
6878   2F2E D8            push b
6879   2F2F 07 6B 2E      call error
6880   2F32 51 02 00      add sp, 2
6881   2F35 0A 38 2F      jmp _if167_exit
6882   2F38             _if167_exit:
6883   2F38             ;; prog_tos--; 
6884   2F38 29 37 3C      mov b, [_prog_tos] ; $prog_tos           
6885   2F3B FD 79         mov g, b
6886   2F3D FD 7D         dec b
6887   2F3F 3B 37 3C      mov d, _prog_tos ; $prog_tos
6888   2F42 FD 43         mov [d], b
6889   2F44 FD 27         mov b, g
6890   2F46             ;; prog = prog_stack[prog_tos]; 
6891   2F46 3B D7 3A      mov d, _prog ; $prog
6892   2F49 DA            push d
6893   2F4A 3B 23 3C      mov d, _prog_stack_data ; $prog_stack
6894   2F4D D7            push a         
6895   2F4E 29 37 3C      mov b, [_prog_tos] ; $prog_tos                   
6896   2F51 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6897   2F55 E4            pop a
6898   2F56 2A            mov b, [d]
6899   2F57 E7            pop d
6900   2F58 FD 43         mov [d], b
6901   2F5A F9            leave
6902   2F5B 09            ret
6903   2F5C             
6904   2F5C             search_keyword:
6905   2F5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
6906   2F5F             ; $i 
6907   2F5F 52 02 00      sub sp, 2
6908   2F62             ;; for(i = 0; keywords[i].keyword[0]; i++) 
6909   2F62             _for168_init:
6910   2F62 FA FF FF      lea d, [bp + -1] ; $i         
6911   2F65 26 00 00      mov b, $0        
6912   2F68 FD 43         mov [d], b
6913   2F6A             _for168_cond:
6914   2F6A 3B 96 39      mov d, _keywords_data ; $keywords
6915   2F6D D7            push a         
6916   2F6E 2C FF FF      mov b, [bp + -1] ; $i                     
6917   2F71 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
6918   2F75 E4            pop a
6919   2F76 58 00 00      add d, 0
6920   2F79 FD 14         clb
6921   2F7B D7            push a         
6922   2F7C 26 00 00      mov b, $0        
6923   2F7F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
6924   2F83 E4            pop a
6925   2F84 32            mov bl, [d]
6926   2F85 A7 00         mov bh, 0
6927   2F87 C0 00 00      cmp b, 0
6928   2F8A C6 E3 2F      je _for168_exit
6929   2F8D             _for168_block:
6930   2F8D             ;; if (!strcmp(keywords[i].keyword, keyword)) return keywords[i].tok; 
6931   2F8D             _if169_cond:
6932   2F8D 3B 96 39      mov d, _keywords_data ; $keywords
6933   2F90 D7            push a         
6934   2F91 2C FF FF      mov b, [bp + -1] ; $i                     
6935   2F94 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
6936   2F98 E4            pop a
6937   2F99 58 00 00      add d, 0
6938   2F9C FD 14         clb
6939   2F9E 2A            mov b, [d]
6940   2F9F FD AB         swp b
6941   2FA1 D8            push b
6942   2FA2 2C 05 00      mov b, [bp + 5] ; $keyword             
6943   2FA5 FD AB         swp b
6944   2FA7 D8            push b
6945   2FA8 07 FE 33      call strcmp
6946   2FAB 51 04 00      add sp, 4
6947   2FAE C0 00 00      cmp b, 0
6948   2FB1 FD 71         seq ; !
6949   2FB3 C0 00 00      cmp b, 0
6950   2FB6 C6 D2 2F      je _if169_exit
6951   2FB9             _if169_true:
6952   2FB9             ;; return keywords[i].tok; 
6953   2FB9 3B 96 39      mov d, _keywords_data ; $keywords
6954   2FBC D7            push a         
6955   2FBD 2C FF FF      mov b, [bp + -1] ; $i                     
6956   2FC0 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
6957   2FC4 E4            pop a
6958   2FC5 58 02 00      add d, 2
6959   2FC8 FD 14         clb
6960   2FCA 32            mov bl, [d]
6961   2FCB A7 00         mov bh, 0
6962   2FCD F9            leave
6963   2FCE 09            ret
6964   2FCF 0A D2 2F      jmp _if169_exit
6965   2FD2             _if169_exit:
6966   2FD2             _for168_update:
6967   2FD2 2C FF FF      mov b, [bp + -1] ; $i             
6968   2FD5 FD 79         mov g, b
6969   2FD7 FD 77         inc b
6970   2FD9 FA FF FF      lea d, [bp + -1] ; $i
6971   2FDC FD 43         mov [d], b
6972   2FDE FD 27         mov b, g
6973   2FE0 0A 6A 2F      jmp _for168_cond
6974   2FE3             _for168_exit:
6975   2FE3             ;; return -1; 
6976   2FE3 26 01 00      mov b, $1
6977   2FE6 FD 97         neg b
6978   2FE8 F9            leave
6979   2FE9 09            ret
6980   2FEA             
6981   2FEA             printx16:
6982   2FEA F8 00 00      enter 0 ; (push bp; mov bp, sp)
6983   2FED             
6984   2FED             ; --- BEGIN INLINE ASM BLOCK
6985   2FED 2C 05 00      mov b, [bp + 5] ; $hex             
6986   2FF0 07 96 38      call print_u16x
6987   2FF3             ; --- END INLINE ASM BLOCK
6988   2FF3             
6989   2FF3 F9            leave
6990   2FF4 09            ret
6991   2FF5             
6992   2FF5             printx8:
6993   2FF5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6994   2FF8             
6995   2FF8             ; --- BEGIN INLINE ASM BLOCK
6996   2FF8 FA 05 00      lea d, [bp + 5] ; $hex
6997   2FFB 32            mov bl, [d]
6998   2FFC 07 DA 38      call print_u8x
6999   2FFF             ; --- END INLINE ASM BLOCK
7000   2FFF             
7001   2FFF F9            leave
7002   3000 09            ret
7003   3001             
7004   3001             hex_to_int:
7005   3001 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7006   3004             ; $value 
7007   3004 10 00 00      mov a, $0
7008   3007 45 FF FF      mov [bp + -1], a
7009   300A             ; $i 
7010   300A             ; $hex_char 
7011   300A             ; $len 
7012   300A 52 07 00      sub sp, 7
7013   300D             ;; len = strlen(hex_string); 
7014   300D FA FA FF      lea d, [bp + -6] ; $len
7015   3010 DA            push d
7016   3011 2C 05 00      mov b, [bp + 5] ; $hex_string             
7017   3014 FD AB         swp b
7018   3016 D8            push b
7019   3017 07 FA 34      call strlen
7020   301A 51 02 00      add sp, 2
7021   301D E7            pop d
7022   301E FD 43         mov [d], b
7023   3020             ;; for (i = 0; i < len; i++) { 
7024   3020             _for170_init:
7025   3020 FA FD FF      lea d, [bp + -3] ; $i         
7026   3023 26 00 00      mov b, $0        
7027   3026 FD 43         mov [d], b
7028   3028             _for170_cond:
7029   3028 2C FD FF      mov b, [bp + -3] ; $i             
7030   302B             ; START RELATIONAL
7031   302B D7            push a
7032   302C 11            mov a, b
7033   302D 2C FA FF      mov b, [bp + -6] ; $len             
7034   3030 B0            cmp a, b
7035   3031 FD 73         slt ; < 
7036   3033 E4            pop a
7037   3034             ; END RELATIONAL
7038   3034 C0 00 00      cmp b, 0
7039   3037 C6 28 31      je _for170_exit
7040   303A             _for170_block:
7041   303A             ;; hex_char = hex_string[i]; 
7042   303A FA FC FF      lea d, [bp + -4] ; $hex_char
7043   303D DA            push d
7044   303E FA 05 00      lea d, [bp + 5] ; $hex_string
7045   3041 FD 2A         mov d, [d]
7046   3043 D7            push a         
7047   3044 2C FD FF      mov b, [bp + -3] ; $i                     
7048   3047 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7049   304B E4            pop a
7050   304C 32            mov bl, [d]
7051   304D A7 00         mov bh, 0
7052   304F E7            pop d
7053   3050 FD 3E         mov [d], bl
7054   3052             ;; if (hex_char >= 'a' && hex_char <= 'f')  
7055   3052             _if171_cond:
7056   3052 34 FC FF      mov bl, [bp + -4] ; $hex_char
7057   3055 A7 00         mov bh, 0             
7058   3057             ; START RELATIONAL
7059   3057 D7            push a
7060   3058 11            mov a, b
7061   3059 26 61 00      mov b, $61
7062   305C B0            cmp a, b
7063   305D FD 80         sge ; >=
7064   305F E4            pop a
7065   3060             ; END RELATIONAL
7066   3060 D7            push a
7067   3061 11            mov a, b
7068   3062 34 FC FF      mov bl, [bp + -4] ; $hex_char
7069   3065 A7 00         mov bh, 0             
7070   3067             ; START RELATIONAL
7071   3067 D7            push a
7072   3068 11            mov a, b
7073   3069 26 66 00      mov b, $66
7074   306C B0            cmp a, b
7075   306D FD 74         sle ; <=
7076   306F E4            pop a
7077   3070             ; END RELATIONAL
7078   3070 FD A7         sand a, b ; &&
7079   3072 E4            pop a
7080   3073 C0 00 00      cmp b, 0
7081   3076 C6 A3 30      je _if171_else
7082   3079             _if171_true:
7083   3079             ;; value = (value * 16) + (hex_char - 'a' + 10); 
7084   3079 FA FF FF      lea d, [bp + -1] ; $value         
7085   307C 2C FF FF      mov b, [bp + -1] ; $value             
7086   307F             ; START FACTORS
7087   307F D7            push a
7088   3080 11            mov a, b
7089   3081 26 10 00      mov b, $10
7090   3084 AC            mul a, b ; *
7091   3085 11            mov a, b
7092   3086 27            mov b, a
7093   3087 E4            pop a
7094   3088             ; END FACTORS
7095   3088             ; START TERMS
7096   3088 D7            push a
7097   3089 11            mov a, b
7098   308A 34 FC FF      mov bl, [bp + -4] ; $hex_char
7099   308D A7 00         mov bh, 0             
7100   308F             ; START TERMS
7101   308F D7            push a
7102   3090 11            mov a, b
7103   3091 26 61 00      mov b, $61
7104   3094 60            sub a, b
7105   3095 26 0A 00      mov b, $a
7106   3098 54            add a, b
7107   3099 27            mov b, a
7108   309A E4            pop a
7109   309B             ; END TERMS
7110   309B 54            add a, b
7111   309C 27            mov b, a
7112   309D E4            pop a
7113   309E             ; END TERMS        
7114   309E FD 43         mov [d], b
7115   30A0 0A 17 31      jmp _if171_exit
7116   30A3             _if171_else:
7117   30A3             ;; if (hex_char >= 'A' && hex_char <= 'F')  
7118   30A3             _if172_cond:
7119   30A3 34 FC FF      mov bl, [bp + -4] ; $hex_char
7120   30A6 A7 00         mov bh, 0             
7121   30A8             ; START RELATIONAL
7122   30A8 D7            push a
7123   30A9 11            mov a, b
7124   30AA 26 41 00      mov b, $41
7125   30AD B0            cmp a, b
7126   30AE FD 80         sge ; >=
7127   30B0 E4            pop a
7128   30B1             ; END RELATIONAL
7129   30B1 D7            push a
7130   30B2 11            mov a, b
7131   30B3 34 FC FF      mov bl, [bp + -4] ; $hex_char
7132   30B6 A7 00         mov bh, 0             
7133   30B8             ; START RELATIONAL
7134   30B8 D7            push a
7135   30B9 11            mov a, b
7136   30BA 26 46 00      mov b, $46
7137   30BD B0            cmp a, b
7138   30BE FD 74         sle ; <=
7139   30C0 E4            pop a
7140   30C1             ; END RELATIONAL
7141   30C1 FD A7         sand a, b ; &&
7142   30C3 E4            pop a
7143   30C4 C0 00 00      cmp b, 0
7144   30C7 C6 F4 30      je _if172_else
7145   30CA             _if172_true:
7146   30CA             ;; value = (value * 16) + (hex_char - 'A' + 10); 
7147   30CA FA FF FF      lea d, [bp + -1] ; $value         
7148   30CD 2C FF FF      mov b, [bp + -1] ; $value             
7149   30D0             ; START FACTORS
7150   30D0 D7            push a
7151   30D1 11            mov a, b
7152   30D2 26 10 00      mov b, $10
7153   30D5 AC            mul a, b ; *
7154   30D6 11            mov a, b
7155   30D7 27            mov b, a
7156   30D8 E4            pop a
7157   30D9             ; END FACTORS
7158   30D9             ; START TERMS
7159   30D9 D7            push a
7160   30DA 11            mov a, b
7161   30DB 34 FC FF      mov bl, [bp + -4] ; $hex_char
7162   30DE A7 00         mov bh, 0             
7163   30E0             ; START TERMS
7164   30E0 D7            push a
7165   30E1 11            mov a, b
7166   30E2 26 41 00      mov b, $41
7167   30E5 60            sub a, b
7168   30E6 26 0A 00      mov b, $a
7169   30E9 54            add a, b
7170   30EA 27            mov b, a
7171   30EB E4            pop a
7172   30EC             ; END TERMS
7173   30EC 54            add a, b
7174   30ED 27            mov b, a
7175   30EE E4            pop a
7176   30EF             ; END TERMS        
7177   30EF FD 43         mov [d], b
7178   30F1 0A 17 31      jmp _if172_exit
7179   30F4             _if172_else:
7180   30F4             ;; value = (value * 16) + (hex_char - '0'); 
7181   30F4 FA FF FF      lea d, [bp + -1] ; $value         
7182   30F7 2C FF FF      mov b, [bp + -1] ; $value             
7183   30FA             ; START FACTORS
7184   30FA D7            push a
7185   30FB 11            mov a, b
7186   30FC 26 10 00      mov b, $10
7187   30FF AC            mul a, b ; *
7188   3100 11            mov a, b
7189   3101 27            mov b, a
7190   3102 E4            pop a
7191   3103             ; END FACTORS
7192   3103             ; START TERMS
7193   3103 D7            push a
7194   3104 11            mov a, b
7195   3105 34 FC FF      mov bl, [bp + -4] ; $hex_char
7196   3108 A7 00         mov bh, 0             
7197   310A             ; START TERMS
7198   310A D7            push a
7199   310B 11            mov a, b
7200   310C 26 30 00      mov b, $30
7201   310F 60            sub a, b
7202   3110 27            mov b, a
7203   3111 E4            pop a
7204   3112             ; END TERMS
7205   3112 54            add a, b
7206   3113 27            mov b, a
7207   3114 E4            pop a
7208   3115             ; END TERMS        
7209   3115 FD 43         mov [d], b
7210   3117             _if172_exit:
7211   3117             _if171_exit:
7212   3117             _for170_update:
7213   3117 2C FD FF      mov b, [bp + -3] ; $i             
7214   311A FD 79         mov g, b
7215   311C FD 77         inc b
7216   311E FA FD FF      lea d, [bp + -3] ; $i
7217   3121 FD 43         mov [d], b
7218   3123 FD 27         mov b, g
7219   3125 0A 28 30      jmp _for170_cond
7220   3128             _for170_exit:
7221   3128             ;; return value; 
7222   3128 2C FF FF      mov b, [bp + -1] ; $value             
7223   312B F9            leave
7224   312C 09            ret
7225   312D             
7226   312D             atoi:
7227   312D F8 00 00      enter 0 ; (push bp; mov bp, sp)
7228   3130             ; $result 
7229   3130 10 00 00      mov a, $0
7230   3133 45 FF FF      mov [bp + -1], a
7231   3136             ; $sign 
7232   3136 10 01 00      mov a, $1
7233   3139 45 FD FF      mov [bp + -3], a
7234   313C 52 04 00      sub sp, 4
7235   313F             ;; while (*str == ' ') str++; 
7236   313F             _while173_cond:
7237   313F 2C 05 00      mov b, [bp + 5] ; $str             
7238   3142 74            mov d, b
7239   3143 32            mov bl, [d]
7240   3144 A7 00         mov bh, 0
7241   3146             ; START RELATIONAL
7242   3146 D7            push a
7243   3147 11            mov a, b
7244   3148 26 20 00      mov b, $20
7245   314B B0            cmp a, b
7246   314C FD 71         seq ; ==
7247   314E E4            pop a
7248   314F             ; END RELATIONAL
7249   314F C0 00 00      cmp b, 0
7250   3152 C6 66 31      je _while173_exit
7251   3155             _while173_block:
7252   3155             ;; str++; 
7253   3155 2C 05 00      mov b, [bp + 5] ; $str             
7254   3158 FD 79         mov g, b
7255   315A FD 77         inc b
7256   315C FA 05 00      lea d, [bp + 5] ; $str
7257   315F FD 43         mov [d], b
7258   3161 FD 27         mov b, g
7259   3163 0A 3F 31      jmp _while173_cond
7260   3166             _while173_exit:
7261   3166             ;; if (*str == '-' || *str == '+') { 
7262   3166             _if174_cond:
7263   3166 2C 05 00      mov b, [bp + 5] ; $str             
7264   3169 74            mov d, b
7265   316A 32            mov bl, [d]
7266   316B A7 00         mov bh, 0
7267   316D             ; START RELATIONAL
7268   316D D7            push a
7269   316E 11            mov a, b
7270   316F 26 2D 00      mov b, $2d
7271   3172 B0            cmp a, b
7272   3173 FD 71         seq ; ==
7273   3175 E4            pop a
7274   3176             ; END RELATIONAL
7275   3176 D7            push a
7276   3177 11            mov a, b
7277   3178 2C 05 00      mov b, [bp + 5] ; $str             
7278   317B 74            mov d, b
7279   317C 32            mov bl, [d]
7280   317D A7 00         mov bh, 0
7281   317F             ; START RELATIONAL
7282   317F D7            push a
7283   3180 11            mov a, b
7284   3181 26 2B 00      mov b, $2b
7285   3184 B0            cmp a, b
7286   3185 FD 71         seq ; ==
7287   3187 E4            pop a
7288   3188             ; END RELATIONAL
7289   3188 FD A8         sor a, b ; ||
7290   318A E4            pop a
7291   318B C0 00 00      cmp b, 0
7292   318E C6 C5 31      je _if174_exit
7293   3191             _if174_true:
7294   3191             ;; if (*str == '-') sign = -1; 
7295   3191             _if175_cond:
7296   3191 2C 05 00      mov b, [bp + 5] ; $str             
7297   3194 74            mov d, b
7298   3195 32            mov bl, [d]
7299   3196 A7 00         mov bh, 0
7300   3198             ; START RELATIONAL
7301   3198 D7            push a
7302   3199 11            mov a, b
7303   319A 26 2D 00      mov b, $2d
7304   319D B0            cmp a, b
7305   319E FD 71         seq ; ==
7306   31A0 E4            pop a
7307   31A1             ; END RELATIONAL
7308   31A1 C0 00 00      cmp b, 0
7309   31A4 C6 B4 31      je _if175_exit
7310   31A7             _if175_true:
7311   31A7             ;; sign = -1; 
7312   31A7 FA FD FF      lea d, [bp + -3] ; $sign         
7313   31AA 26 01 00      mov b, $1
7314   31AD FD 97         neg b        
7315   31AF FD 43         mov [d], b
7316   31B1 0A B4 31      jmp _if175_exit
7317   31B4             _if175_exit:
7318   31B4             ;; str++; 
7319   31B4 2C 05 00      mov b, [bp + 5] ; $str             
7320   31B7 FD 79         mov g, b
7321   31B9 FD 77         inc b
7322   31BB FA 05 00      lea d, [bp + 5] ; $str
7323   31BE FD 43         mov [d], b
7324   31C0 FD 27         mov b, g
7325   31C2 0A C5 31      jmp _if174_exit
7326   31C5             _if174_exit:
7327   31C5             ;; while (*str >= '0' && *str <= '9') { 
7328   31C5             _while176_cond:
7329   31C5 2C 05 00      mov b, [bp + 5] ; $str             
7330   31C8 74            mov d, b
7331   31C9 32            mov bl, [d]
7332   31CA A7 00         mov bh, 0
7333   31CC             ; START RELATIONAL
7334   31CC D7            push a
7335   31CD 11            mov a, b
7336   31CE 26 30 00      mov b, $30
7337   31D1 B0            cmp a, b
7338   31D2 FD 80         sge ; >=
7339   31D4 E4            pop a
7340   31D5             ; END RELATIONAL
7341   31D5 D7            push a
7342   31D6 11            mov a, b
7343   31D7 2C 05 00      mov b, [bp + 5] ; $str             
7344   31DA 74            mov d, b
7345   31DB 32            mov bl, [d]
7346   31DC A7 00         mov bh, 0
7347   31DE             ; START RELATIONAL
7348   31DE D7            push a
7349   31DF 11            mov a, b
7350   31E0 26 39 00      mov b, $39
7351   31E3 B0            cmp a, b
7352   31E4 FD 74         sle ; <=
7353   31E6 E4            pop a
7354   31E7             ; END RELATIONAL
7355   31E7 FD A7         sand a, b ; &&
7356   31E9 E4            pop a
7357   31EA C0 00 00      cmp b, 0
7358   31ED C6 28 32      je _while176_exit
7359   31F0             _while176_block:
7360   31F0             ;; result = result * 10 + (*str - '0'); 
7361   31F0 FA FF FF      lea d, [bp + -1] ; $result
7362   31F3 DA            push d
7363   31F4 2C FF FF      mov b, [bp + -1] ; $result             
7364   31F7             ; START FACTORS
7365   31F7 D7            push a
7366   31F8 11            mov a, b
7367   31F9 26 0A 00      mov b, $a
7368   31FC AC            mul a, b ; *
7369   31FD 11            mov a, b
7370   31FE 27            mov b, a
7371   31FF E4            pop a
7372   3200             ; END FACTORS
7373   3200             ; START TERMS
7374   3200 D7            push a
7375   3201 11            mov a, b
7376   3202 2C 05 00      mov b, [bp + 5] ; $str             
7377   3205 74            mov d, b
7378   3206 32            mov bl, [d]
7379   3207 A7 00         mov bh, 0
7380   3209             ; START TERMS
7381   3209 D7            push a
7382   320A 11            mov a, b
7383   320B 26 30 00      mov b, $30
7384   320E 60            sub a, b
7385   320F 27            mov b, a
7386   3210 E4            pop a
7387   3211             ; END TERMS
7388   3211 54            add a, b
7389   3212 27            mov b, a
7390   3213 E4            pop a
7391   3214             ; END TERMS
7392   3214 E7            pop d
7393   3215 FD 43         mov [d], b
7394   3217             ;; str++; 
7395   3217 2C 05 00      mov b, [bp + 5] ; $str             
7396   321A FD 79         mov g, b
7397   321C FD 77         inc b
7398   321E FA 05 00      lea d, [bp + 5] ; $str
7399   3221 FD 43         mov [d], b
7400   3223 FD 27         mov b, g
7401   3225 0A C5 31      jmp _while176_cond
7402   3228             _while176_exit:
7403   3228             ;; return sign * result; 
7404   3228 2C FD FF      mov b, [bp + -3] ; $sign             
7405   322B             ; START FACTORS
7406   322B D7            push a
7407   322C 11            mov a, b
7408   322D 2C FF FF      mov b, [bp + -1] ; $result             
7409   3230 AC            mul a, b ; *
7410   3231 11            mov a, b
7411   3232 27            mov b, a
7412   3233 E4            pop a
7413   3234             ; END FACTORS
7414   3234 F9            leave
7415   3235 09            ret
7416   3236             
7417   3236             printu:
7418   3236 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7419   3239             ; $digits 
7420   3239             ; $i 
7421   3239 52 07 00      sub sp, 7
7422   323C             ;; i = 0; 
7423   323C FA FA FF      lea d, [bp + -6] ; $i         
7424   323F 26 00 00      mov b, $0        
7425   3242 FD 43         mov [d], b
7426   3244             ;; if(num == 0){ 
7427   3244             _if177_cond:
7428   3244 2C 05 00      mov b, [bp + 5] ; $num             
7429   3247             ; START RELATIONAL
7430   3247 D7            push a
7431   3248 11            mov a, b
7432   3249 26 00 00      mov b, $0
7433   324C B0            cmp a, b
7434   324D FD 71         seq ; ==
7435   324F E4            pop a
7436   3250             ; END RELATIONAL
7437   3250 C0 00 00      cmp b, 0
7438   3253 C6 65 32      je _if177_exit
7439   3256             _if177_true:
7440   3256             ;; putchar('0'); 
7441   3256 26 30 00      mov b, $30
7442   3259 DD            push bl
7443   325A 07 EF 32      call putchar
7444   325D 51 01 00      add sp, 1
7445   3260             ;; return; 
7446   3260 F9            leave
7447   3261 09            ret
7448   3262 0A 65 32      jmp _if177_exit
7449   3265             _if177_exit:
7450   3265             ;; while (num > 0) { 
7451   3265             _while178_cond:
7452   3265 2C 05 00      mov b, [bp + 5] ; $num             
7453   3268             ; START RELATIONAL
7454   3268 D7            push a
7455   3269 11            mov a, b
7456   326A 26 00 00      mov b, $0
7457   326D B0            cmp a, b
7458   326E FD 81         sgu ; > (unsigned)
7459   3270 E4            pop a
7460   3271             ; END RELATIONAL
7461   3271 C0 00 00      cmp b, 0
7462   3274 C6 B7 32      je _while178_exit
7463   3277             _while178_block:
7464   3277             ;; digits[i] = '0' + (num % 10); 
7465   3277 FA FC FF      lea d, [bp + -4] ; $digits
7466   327A D7            push a         
7467   327B 2C FA FF      mov b, [bp + -6] ; $i                     
7468   327E 5A            add d, b
7469   327F E4            pop a         
7470   3280 26 30 00      mov b, $30
7471   3283             ; START TERMS
7472   3283 D7            push a
7473   3284 11            mov a, b
7474   3285 2C 05 00      mov b, [bp + 5] ; $num             
7475   3288             ; START FACTORS
7476   3288 D7            push a
7477   3289 11            mov a, b
7478   328A 26 0A 00      mov b, $a
7479   328D AE            div a, b ; 
7480   328E 11            mov a, b
7481   328F 27            mov b, a
7482   3290 E4            pop a
7483   3291             ; END FACTORS
7484   3291 54            add a, b
7485   3292 27            mov b, a
7486   3293 E4            pop a
7487   3294             ; END TERMS        
7488   3294 FD 3E         mov [d], bl
7489   3296             ;; num = num / 10; 
7490   3296 FA 05 00      lea d, [bp + 5] ; $num         
7491   3299 2C 05 00      mov b, [bp + 5] ; $num             
7492   329C             ; START FACTORS
7493   329C D7            push a
7494   329D 11            mov a, b
7495   329E 26 0A 00      mov b, $a
7496   32A1 AE            div a, b
7497   32A2 27            mov b, a
7498   32A3 E4            pop a
7499   32A4             ; END FACTORS        
7500   32A4 FD 43         mov [d], b
7501   32A6             ;; i++; 
7502   32A6 2C FA FF      mov b, [bp + -6] ; $i             
7503   32A9 FD 79         mov g, b
7504   32AB FD 77         inc b
7505   32AD FA FA FF      lea d, [bp + -6] ; $i
7506   32B0 FD 43         mov [d], b
7507   32B2 FD 27         mov b, g
7508   32B4 0A 65 32      jmp _while178_cond
7509   32B7             _while178_exit:
7510   32B7             ;; while (i > 0) { 
7511   32B7             _while179_cond:
7512   32B7 2C FA FF      mov b, [bp + -6] ; $i             
7513   32BA             ; START RELATIONAL
7514   32BA D7            push a
7515   32BB 11            mov a, b
7516   32BC 26 00 00      mov b, $0
7517   32BF B0            cmp a, b
7518   32C0 FD 7F         sgt ; >
7519   32C2 E4            pop a
7520   32C3             ; END RELATIONAL
7521   32C3 C0 00 00      cmp b, 0
7522   32C6 C6 ED 32      je _while179_exit
7523   32C9             _while179_block:
7524   32C9             ;; i--; 
7525   32C9 2C FA FF      mov b, [bp + -6] ; $i             
7526   32CC FD 79         mov g, b
7527   32CE FD 7D         dec b
7528   32D0 FA FA FF      lea d, [bp + -6] ; $i
7529   32D3 FD 43         mov [d], b
7530   32D5 FD 27         mov b, g
7531   32D7             ;; putchar(digits[i]); 
7532   32D7 FA FC FF      lea d, [bp + -4] ; $digits
7533   32DA D7            push a         
7534   32DB 2C FA FF      mov b, [bp + -6] ; $i                     
7535   32DE 5A            add d, b
7536   32DF E4            pop a
7537   32E0 32            mov bl, [d]
7538   32E1 A7 00         mov bh, 0
7539   32E3 DD            push bl
7540   32E4 07 EF 32      call putchar
7541   32E7 51 01 00      add sp, 1
7542   32EA 0A B7 32      jmp _while179_cond
7543   32ED             _while179_exit:
7544   32ED F9            leave
7545   32EE 09            ret
7546   32EF             
7547   32EF             putchar:
7548   32EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
7549   32F2             
7550   32F2             ; --- BEGIN INLINE ASM BLOCK
7551   32F2 20 05 00      mov al, [bp + 5] ; $c
7552   32F5                         
7553   32F5 23            mov ah, al
7554   32F6 07 F4 36      call _putchar
7555   32F9             ; --- END INLINE ASM BLOCK
7556   32F9             
7557   32F9 F9            leave
7558   32FA 09            ret
7559   32FB             
7560   32FB             print:
7561   32FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
7562   32FE             
7563   32FE             ; --- BEGIN INLINE ASM BLOCK
7564   32FE 17 05 00      mov a, [bp + 5] ; $s             
7565   3301 3C            mov d, a
7566   3302 07 3E 38      call _puts
7567   3305             ; --- END INLINE ASM BLOCK
7568   3305             
7569   3305 F9            leave
7570   3306 09            ret
7571   3307             
7572   3307             loadfile:
7573   3307 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7574   330A             
7575   330A             ; --- BEGIN INLINE ASM BLOCK
7576   330A 17 05 00      mov a, [bp + 5] ; $destination             
7577   330D 4F            mov di, a
7578   330E FA 07 00      lea d, [bp + 7] ; $filename
7579   3311 FD 2A         mov d, [d]
7580   3313 19 14         mov al, 20
7581   3315 05 04         syscall sys_filesystem
7582   3317             ; --- END INLINE ASM BLOCK
7583   3317             
7584   3317 F9            leave
7585   3318 09            ret
7586   3319             
7587   3319             alloc:
7588   3319 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7589   331C             ;; heap_top = heap_top + bytes; 
7590   331C 3B D4 3F      mov d, _heap_top ; $heap_top         
7591   331F 29 D4 3F      mov b, [_heap_top] ; $heap_top           
7592   3322             ; START TERMS
7593   3322 D7            push a
7594   3323 11            mov a, b
7595   3324 2C 05 00      mov b, [bp + 5] ; $bytes             
7596   3327 54            add a, b
7597   3328 27            mov b, a
7598   3329 E4            pop a
7599   332A             ; END TERMS        
7600   332A FD 43         mov [d], b
7601   332C             ;; return heap_top - bytes; 
7602   332C 29 D4 3F      mov b, [_heap_top] ; $heap_top           
7603   332F             ; START TERMS
7604   332F D7            push a
7605   3330 11            mov a, b
7606   3331 2C 05 00      mov b, [bp + 5] ; $bytes             
7607   3334 60            sub a, b
7608   3335 27            mov b, a
7609   3336 E4            pop a
7610   3337             ; END TERMS
7611   3337 F9            leave
7612   3338 09            ret
7613   3339             
7614   3339             free:
7615   3339 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7616   333C             ;; return heap_top = heap_top - bytes; 
7617   333C 3B D4 3F      mov d, _heap_top ; $heap_top         
7618   333F 29 D4 3F      mov b, [_heap_top] ; $heap_top           
7619   3342             ; START TERMS
7620   3342 D7            push a
7621   3343 11            mov a, b
7622   3344 2C 05 00      mov b, [bp + 5] ; $bytes             
7623   3347 60            sub a, b
7624   3348 27            mov b, a
7625   3349 E4            pop a
7626   334A             ; END TERMS        
7627   334A FD 43         mov [d], b
7628   334C F9            leave
7629   334D 09            ret
7630   334E             
7631   334E             exit:
7632   334E F8 00 00      enter 0 ; (push bp; mov bp, sp)
7633   3351             
7634   3351             ; --- BEGIN INLINE ASM BLOCK
7635   3351 05 0B         syscall sys_terminate_proc
7636   3353             ; --- END INLINE ASM BLOCK
7637   3353             
7638   3353 F9            leave
7639   3354 09            ret
7640   3355             
7641   3355             exp:
7642   3355 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7643   3358             ; $i 
7644   3358             ; $result 
7645   3358 10 01 00      mov a, $1
7646   335B 45 FD FF      mov [bp + -3], a
7647   335E 52 04 00      sub sp, 4
7648   3361             ;; for(i = 0; i < exp; i++){ 
7649   3361             _for180_init:
7650   3361 FA FF FF      lea d, [bp + -1] ; $i         
7651   3364 26 00 00      mov b, $0        
7652   3367 FD 43         mov [d], b
7653   3369             _for180_cond:
7654   3369 2C FF FF      mov b, [bp + -1] ; $i             
7655   336C             ; START RELATIONAL
7656   336C D7            push a
7657   336D 11            mov a, b
7658   336E 2C 05 00      mov b, [bp + 5] ; $exp             
7659   3371 B0            cmp a, b
7660   3372 FD 73         slt ; < 
7661   3374 E4            pop a
7662   3375             ; END RELATIONAL
7663   3375 C0 00 00      cmp b, 0
7664   3378 C6 9D 33      je _for180_exit
7665   337B             _for180_block:
7666   337B             ;; result = result * base; 
7667   337B FA FD FF      lea d, [bp + -3] ; $result         
7668   337E 2C FD FF      mov b, [bp + -3] ; $result             
7669   3381             ; START FACTORS
7670   3381 D7            push a
7671   3382 11            mov a, b
7672   3383 2C 07 00      mov b, [bp + 7] ; $base             
7673   3386 AC            mul a, b ; *
7674   3387 11            mov a, b
7675   3388 27            mov b, a
7676   3389 E4            pop a
7677   338A             ; END FACTORS        
7678   338A FD 43         mov [d], b
7679   338C             _for180_update:
7680   338C 2C FF FF      mov b, [bp + -1] ; $i             
7681   338F FD 79         mov g, b
7682   3391 FD 77         inc b
7683   3393 FA FF FF      lea d, [bp + -1] ; $i
7684   3396 FD 43         mov [d], b
7685   3398 FD 27         mov b, g
7686   339A 0A 69 33      jmp _for180_cond
7687   339D             _for180_exit:
7688   339D             ;; return result; 
7689   339D 2C FD FF      mov b, [bp + -3] ; $result             
7690   33A0 F9            leave
7691   33A1 09            ret
7692   33A2             
7693   33A2             strcpy:
7694   33A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7695   33A5             ; $psrc 
7696   33A5             ; $pdest 
7697   33A5 52 04 00      sub sp, 4
7698   33A8             ;; psrc = src; 
7699   33A8 FA FF FF      lea d, [bp + -1] ; $psrc         
7700   33AB 2C 05 00      mov b, [bp + 5] ; $src                     
7701   33AE FD 43         mov [d], b
7702   33B0             ;; pdest = dest; 
7703   33B0 FA FD FF      lea d, [bp + -3] ; $pdest         
7704   33B3 2C 07 00      mov b, [bp + 7] ; $dest                     
7705   33B6 FD 43         mov [d], b
7706   33B8             ;; while(*psrc){ 
7707   33B8             _while181_cond:
7708   33B8 2C FF FF      mov b, [bp + -1] ; $psrc             
7709   33BB 74            mov d, b
7710   33BC 32            mov bl, [d]
7711   33BD A7 00         mov bh, 0
7712   33BF C0 00 00      cmp b, 0
7713   33C2 C6 F2 33      je _while181_exit
7714   33C5             _while181_block:
7715   33C5             ;; *pdest = *psrc; 
7716   33C5 2C FD FF      mov b, [bp + -3] ; $pdest             
7717   33C8 D8            push b
7718   33C9 2C FF FF      mov b, [bp + -1] ; $psrc             
7719   33CC 74            mov d, b
7720   33CD 32            mov bl, [d]
7721   33CE A7 00         mov bh, 0
7722   33D0 E7            pop d
7723   33D1 FD 3E         mov [d], bl
7724   33D3             ;; pdest++; 
7725   33D3 2C FD FF      mov b, [bp + -3] ; $pdest             
7726   33D6 FD 79         mov g, b
7727   33D8 FD 77         inc b
7728   33DA FA FD FF      lea d, [bp + -3] ; $pdest
7729   33DD FD 43         mov [d], b
7730   33DF FD 27         mov b, g
7731   33E1             ;; psrc++; 
7732   33E1 2C FF FF      mov b, [bp + -1] ; $psrc             
7733   33E4 FD 79         mov g, b
7734   33E6 FD 77         inc b
7735   33E8 FA FF FF      lea d, [bp + -1] ; $psrc
7736   33EB FD 43         mov [d], b
7737   33ED FD 27         mov b, g
7738   33EF 0A B8 33      jmp _while181_cond
7739   33F2             _while181_exit:
7740   33F2             ;; *pdest = '\0'; 
7741   33F2 2C FD FF      mov b, [bp + -3] ; $pdest             
7742   33F5 D8            push b
7743   33F6 26 00 00      mov b, $0
7744   33F9 E7            pop d
7745   33FA FD 3E         mov [d], bl
7746   33FC F9            leave
7747   33FD 09            ret
7748   33FE             
7749   33FE             strcmp:
7750   33FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
7751   3401             ;; while (*s1 && (*s1 == *s2)) { 
7752   3401             _while182_cond:
7753   3401 2C 07 00      mov b, [bp + 7] ; $s1             
7754   3404 74            mov d, b
7755   3405 32            mov bl, [d]
7756   3406 A7 00         mov bh, 0
7757   3408 D7            push a
7758   3409 11            mov a, b
7759   340A 2C 07 00      mov b, [bp + 7] ; $s1             
7760   340D 74            mov d, b
7761   340E 32            mov bl, [d]
7762   340F A7 00         mov bh, 0
7763   3411             ; START RELATIONAL
7764   3411 D7            push a
7765   3412 11            mov a, b
7766   3413 2C 05 00      mov b, [bp + 5] ; $s2             
7767   3416 74            mov d, b
7768   3417 32            mov bl, [d]
7769   3418 A7 00         mov bh, 0
7770   341A B0            cmp a, b
7771   341B FD 71         seq ; ==
7772   341D E4            pop a
7773   341E             ; END RELATIONAL
7774   341E FD A7         sand a, b ; &&
7775   3420 E4            pop a
7776   3421 C0 00 00      cmp b, 0
7777   3424 C6 46 34      je _while182_exit
7778   3427             _while182_block:
7779   3427             ;; s1++; 
7780   3427 2C 07 00      mov b, [bp + 7] ; $s1             
7781   342A FD 79         mov g, b
7782   342C FD 77         inc b
7783   342E FA 07 00      lea d, [bp + 7] ; $s1
7784   3431 FD 43         mov [d], b
7785   3433 FD 27         mov b, g
7786   3435             ;; s2++; 
7787   3435 2C 05 00      mov b, [bp + 5] ; $s2             
7788   3438 FD 79         mov g, b
7789   343A FD 77         inc b
7790   343C FA 05 00      lea d, [bp + 5] ; $s2
7791   343F FD 43         mov [d], b
7792   3441 FD 27         mov b, g
7793   3443 0A 01 34      jmp _while182_cond
7794   3446             _while182_exit:
7795   3446             ;; return *s1 - *s2; 
7796   3446 2C 07 00      mov b, [bp + 7] ; $s1             
7797   3449 74            mov d, b
7798   344A 32            mov bl, [d]
7799   344B A7 00         mov bh, 0
7800   344D             ; START TERMS
7801   344D D7            push a
7802   344E 11            mov a, b
7803   344F 2C 05 00      mov b, [bp + 5] ; $s2             
7804   3452 74            mov d, b
7805   3453 32            mov bl, [d]
7806   3454 A7 00         mov bh, 0
7807   3456 60            sub a, b
7808   3457 27            mov b, a
7809   3458 E4            pop a
7810   3459             ; END TERMS
7811   3459 F9            leave
7812   345A 09            ret
7813   345B             
7814   345B             strcat:
7815   345B F8 00 00      enter 0 ; (push bp; mov bp, sp)
7816   345E             ; $dest_len 
7817   345E             ; $i 
7818   345E 52 04 00      sub sp, 4
7819   3461             ;; dest_len = strlen(dest); 
7820   3461 FA FF FF      lea d, [bp + -1] ; $dest_len
7821   3464 DA            push d
7822   3465 2C 07 00      mov b, [bp + 7] ; $dest             
7823   3468 FD AB         swp b
7824   346A D8            push b
7825   346B 07 FA 34      call strlen
7826   346E 51 02 00      add sp, 2
7827   3471 E7            pop d
7828   3472 FD 43         mov [d], b
7829   3474             ;; for (i = 0; src[i] != 0; i=i+1) { 
7830   3474             _for183_init:
7831   3474 FA FD FF      lea d, [bp + -3] ; $i         
7832   3477 26 00 00      mov b, $0        
7833   347A FD 43         mov [d], b
7834   347C             _for183_cond:
7835   347C FA 05 00      lea d, [bp + 5] ; $src
7836   347F FD 2A         mov d, [d]
7837   3481 D7            push a         
7838   3482 2C FD FF      mov b, [bp + -3] ; $i                     
7839   3485 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7840   3489 E4            pop a
7841   348A 32            mov bl, [d]
7842   348B A7 00         mov bh, 0
7843   348D             ; START RELATIONAL
7844   348D D7            push a
7845   348E 11            mov a, b
7846   348F 26 00 00      mov b, $0
7847   3492 B0            cmp a, b
7848   3493 FD 72         sneq ; !=
7849   3495 E4            pop a
7850   3496             ; END RELATIONAL
7851   3496 C0 00 00      cmp b, 0
7852   3499 C6 DA 34      je _for183_exit
7853   349C             _for183_block:
7854   349C             ;; dest[dest_len + i] = src[i]; 
7855   349C FA 07 00      lea d, [bp + 7] ; $dest
7856   349F FD 2A         mov d, [d]
7857   34A1 D7            push a         
7858   34A2 2C FF FF      mov b, [bp + -1] ; $dest_len             
7859   34A5             ; START TERMS
7860   34A5 D7            push a
7861   34A6 11            mov a, b
7862   34A7 2C FD FF      mov b, [bp + -3] ; $i             
7863   34AA 54            add a, b
7864   34AB 27            mov b, a
7865   34AC E4            pop a
7866   34AD             ; END TERMS        
7867   34AD FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7868   34B1 E4            pop a
7869   34B2 DA            push d
7870   34B3 FA 05 00      lea d, [bp + 5] ; $src
7871   34B6 FD 2A         mov d, [d]
7872   34B8 D7            push a         
7873   34B9 2C FD FF      mov b, [bp + -3] ; $i                     
7874   34BC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7875   34C0 E4            pop a
7876   34C1 32            mov bl, [d]
7877   34C2 A7 00         mov bh, 0
7878   34C4 E7            pop d
7879   34C5 FD 3E         mov [d], bl
7880   34C7             _for183_update:
7881   34C7 FA FD FF      lea d, [bp + -3] ; $i         
7882   34CA 2C FD FF      mov b, [bp + -3] ; $i             
7883   34CD             ; START TERMS
7884   34CD D7            push a
7885   34CE 11            mov a, b
7886   34CF 26 01 00      mov b, $1
7887   34D2 54            add a, b
7888   34D3 27            mov b, a
7889   34D4 E4            pop a
7890   34D5             ; END TERMS        
7891   34D5 FD 43         mov [d], b
7892   34D7 0A 7C 34      jmp _for183_cond
7893   34DA             _for183_exit:
7894   34DA             ;; dest[dest_len + i] = 0; 
7895   34DA FA 07 00      lea d, [bp + 7] ; $dest
7896   34DD FD 2A         mov d, [d]
7897   34DF D7            push a         
7898   34E0 2C FF FF      mov b, [bp + -1] ; $dest_len             
7899   34E3             ; START TERMS
7900   34E3 D7            push a
7901   34E4 11            mov a, b
7902   34E5 2C FD FF      mov b, [bp + -3] ; $i             
7903   34E8 54            add a, b
7904   34E9 27            mov b, a
7905   34EA E4            pop a
7906   34EB             ; END TERMS        
7907   34EB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7908   34EF E4            pop a         
7909   34F0 26 00 00      mov b, $0        
7910   34F3 FD 3E         mov [d], bl
7911   34F5             ;; return dest; 
7912   34F5 2C 07 00      mov b, [bp + 7] ; $dest             
7913   34F8 F9            leave
7914   34F9 09            ret
7915   34FA             
7916   34FA             strlen:
7917   34FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
7918   34FD             ; $length 
7919   34FD 52 02 00      sub sp, 2
7920   3500             ;; length = 0; 
7921   3500 FA FF FF      lea d, [bp + -1] ; $length         
7922   3503 26 00 00      mov b, $0        
7923   3506 FD 43         mov [d], b
7924   3508             ;; while (str[length] != 0) { 
7925   3508             _while184_cond:
7926   3508 FA 05 00      lea d, [bp + 5] ; $str
7927   350B FD 2A         mov d, [d]
7928   350D D7            push a         
7929   350E 2C FF FF      mov b, [bp + -1] ; $length                     
7930   3511 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7931   3515 E4            pop a
7932   3516 32            mov bl, [d]
7933   3517 A7 00         mov bh, 0
7934   3519             ; START RELATIONAL
7935   3519 D7            push a
7936   351A 11            mov a, b
7937   351B 26 00 00      mov b, $0
7938   351E B0            cmp a, b
7939   351F FD 72         sneq ; !=
7940   3521 E4            pop a
7941   3522             ; END RELATIONAL
7942   3522 C0 00 00      cmp b, 0
7943   3525 C6 39 35      je _while184_exit
7944   3528             _while184_block:
7945   3528             ;; length++; 
7946   3528 2C FF FF      mov b, [bp + -1] ; $length             
7947   352B FD 79         mov g, b
7948   352D FD 77         inc b
7949   352F FA FF FF      lea d, [bp + -1] ; $length
7950   3532 FD 43         mov [d], b
7951   3534 FD 27         mov b, g
7952   3536 0A 08 35      jmp _while184_cond
7953   3539             _while184_exit:
7954   3539             ;; return length; 
7955   3539 2C FF FF      mov b, [bp + -1] ; $length             
7956   353C F9            leave
7957   353D 09            ret
7958   353E             
7959   353E             is_space:
7960   353E F8 00 00      enter 0 ; (push bp; mov bp, sp)
7961   3541             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
7962   3541 34 05 00      mov bl, [bp + 5] ; $c
7963   3544 A7 00         mov bh, 0             
7964   3546             ; START RELATIONAL
7965   3546 D7            push a
7966   3547 11            mov a, b
7967   3548 26 20 00      mov b, $20
7968   354B B0            cmp a, b
7969   354C FD 71         seq ; ==
7970   354E E4            pop a
7971   354F             ; END RELATIONAL
7972   354F D7            push a
7973   3550 11            mov a, b
7974   3551 34 05 00      mov bl, [bp + 5] ; $c
7975   3554 A7 00         mov bh, 0             
7976   3556             ; START RELATIONAL
7977   3556 D7            push a
7978   3557 11            mov a, b
7979   3558 26 09 00      mov b, $9
7980   355B B0            cmp a, b
7981   355C FD 71         seq ; ==
7982   355E E4            pop a
7983   355F             ; END RELATIONAL
7984   355F FD A8         sor a, b ; ||
7985   3561 11            mov a, b
7986   3562 34 05 00      mov bl, [bp + 5] ; $c
7987   3565 A7 00         mov bh, 0             
7988   3567             ; START RELATIONAL
7989   3567 D7            push a
7990   3568 11            mov a, b
7991   3569 26 0A 00      mov b, $a
7992   356C B0            cmp a, b
7993   356D FD 71         seq ; ==
7994   356F E4            pop a
7995   3570             ; END RELATIONAL
7996   3570 FD A8         sor a, b ; ||
7997   3572 11            mov a, b
7998   3573 34 05 00      mov bl, [bp + 5] ; $c
7999   3576 A7 00         mov bh, 0             
8000   3578             ; START RELATIONAL
8001   3578 D7            push a
8002   3579 11            mov a, b
8003   357A 26 0D 00      mov b, $d
8004   357D B0            cmp a, b
8005   357E FD 71         seq ; ==
8006   3580 E4            pop a
8007   3581             ; END RELATIONAL
8008   3581 FD A8         sor a, b ; ||
8009   3583 E4            pop a
8010   3584 F9            leave
8011   3585 09            ret
8012   3586             
8013   3586             is_digit:
8014   3586 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8015   3589             ;; return c >= '0' && c <= '9'; 
8016   3589 34 05 00      mov bl, [bp + 5] ; $c
8017   358C A7 00         mov bh, 0             
8018   358E             ; START RELATIONAL
8019   358E D7            push a
8020   358F 11            mov a, b
8021   3590 26 30 00      mov b, $30
8022   3593 B0            cmp a, b
8023   3594 FD 80         sge ; >=
8024   3596 E4            pop a
8025   3597             ; END RELATIONAL
8026   3597 D7            push a
8027   3598 11            mov a, b
8028   3599 34 05 00      mov bl, [bp + 5] ; $c
8029   359C A7 00         mov bh, 0             
8030   359E             ; START RELATIONAL
8031   359E D7            push a
8032   359F 11            mov a, b
8033   35A0 26 39 00      mov b, $39
8034   35A3 B0            cmp a, b
8035   35A4 FD 74         sle ; <=
8036   35A6 E4            pop a
8037   35A7             ; END RELATIONAL
8038   35A7 FD A7         sand a, b ; &&
8039   35A9 E4            pop a
8040   35AA F9            leave
8041   35AB 09            ret
8042   35AC             
8043   35AC             is_alpha:
8044   35AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
8045   35AF             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
8046   35AF 34 05 00      mov bl, [bp + 5] ; $c
8047   35B2 A7 00         mov bh, 0             
8048   35B4             ; START RELATIONAL
8049   35B4 D7            push a
8050   35B5 11            mov a, b
8051   35B6 26 61 00      mov b, $61
8052   35B9 B0            cmp a, b
8053   35BA FD 80         sge ; >=
8054   35BC E4            pop a
8055   35BD             ; END RELATIONAL
8056   35BD D7            push a
8057   35BE 11            mov a, b
8058   35BF 34 05 00      mov bl, [bp + 5] ; $c
8059   35C2 A7 00         mov bh, 0             
8060   35C4             ; START RELATIONAL
8061   35C4 D7            push a
8062   35C5 11            mov a, b
8063   35C6 26 7A 00      mov b, $7a
8064   35C9 B0            cmp a, b
8065   35CA FD 74         sle ; <=
8066   35CC E4            pop a
8067   35CD             ; END RELATIONAL
8068   35CD FD A7         sand a, b ; &&
8069   35CF E4            pop a
8070   35D0 D7            push a
8071   35D1 11            mov a, b
8072   35D2 34 05 00      mov bl, [bp + 5] ; $c
8073   35D5 A7 00         mov bh, 0             
8074   35D7             ; START RELATIONAL
8075   35D7 D7            push a
8076   35D8 11            mov a, b
8077   35D9 26 41 00      mov b, $41
8078   35DC B0            cmp a, b
8079   35DD FD 80         sge ; >=
8080   35DF E4            pop a
8081   35E0             ; END RELATIONAL
8082   35E0 D7            push a
8083   35E1 11            mov a, b
8084   35E2 34 05 00      mov bl, [bp + 5] ; $c
8085   35E5 A7 00         mov bh, 0             
8086   35E7             ; START RELATIONAL
8087   35E7 D7            push a
8088   35E8 11            mov a, b
8089   35E9 26 5A 00      mov b, $5a
8090   35EC B0            cmp a, b
8091   35ED FD 74         sle ; <=
8092   35EF E4            pop a
8093   35F0             ; END RELATIONAL
8094   35F0 FD A7         sand a, b ; &&
8095   35F2 E4            pop a
8096   35F3 FD A8         sor a, b ; ||
8097   35F5 11            mov a, b
8098   35F6 34 05 00      mov bl, [bp + 5] ; $c
8099   35F9 A7 00         mov bh, 0             
8100   35FB             ; START RELATIONAL
8101   35FB D7            push a
8102   35FC 11            mov a, b
8103   35FD 26 5F 00      mov b, $5f
8104   3600 B0            cmp a, b
8105   3601 FD 71         seq ; ==
8106   3603 E4            pop a
8107   3604             ; END RELATIONAL
8108   3604 FD A8         sor a, b ; ||
8109   3606 E4            pop a
8110   3607 F9            leave
8111   3608 09            ret
8112   3609             
8113   3609             include_stdio_asm:
8114   3609 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8115   360C             
8116   360C             ; --- BEGIN INLINE ASM BLOCK
8117   360C             .include "lib/stdio.asm"
0001+  360C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  360C             ; stdio.s
0003+  360C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  360C             .include "lib/string.asm"
0001++ 360C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 360C             ; string.s
0003++ 360C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 360C             
0005++ 360C             
0006++ 360C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 360C             ; _strrev
0008++ 360C             ; reverse a string
0009++ 360C             ; D = string address
0010++ 360C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 360C             ; 01234
0012++ 360C             _strrev:
0013++ 360C 4B          	pusha
0014++ 360D 07 53 36    	call _strlen	; length in C
0015++ 3610 12          	mov a, c
0016++ 3611 AF 01 00    	cmp a, 1
0017++ 3614 D0 2E 36    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 3617 7D          	dec a
0019++ 3618 FD 4E       	mov si, d	; beginning of string
0020++ 361A FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 361C 59          	add d, a	; end of string
0022++ 361D 12          	mov a, c
0023++ 361E FD 9B       	shr a		; divide by 2
0024++ 3620 39          	mov c, a	; C now counts the steps
0025++ 3621             _strrev_L0:
0026++ 3621 32          	mov bl, [d]	; save load right-side char into BL
0027++ 3622 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 3623 3E          	mov [d], al	; store left char into right side
0029++ 3624 1B          	mov al, bl
0030++ 3625 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 3626 7E          	dec c
0032++ 3627 7F          	dec d
0033++ 3628 C2 00 00    	cmp c, 0
0034++ 362B C7 21 36    	jne _strrev_L0
0035++ 362E             _strrev_end:
0036++ 362E 4C          	popa
0037++ 362F 09          	ret
0038++ 3630             	
0039++ 3630             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 3630             ; _strchr
0041++ 3630             ; search string in D for char in AL
0042++ 3630             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 3630             _strchr:
0044++ 3630             _strchr_L0:
0045++ 3630 32          	mov bl, [d]
0046++ 3631 C1 00       	cmp bl, 0
0047++ 3633 C6 3E 36    	je _strchr_end
0048++ 3636 BA          	cmp al, bl
0049++ 3637 C6 3E 36    	je _strchr_end
0050++ 363A 79          	inc d
0051++ 363B 0A 30 36    	jmp _strchr_L0
0052++ 363E             _strchr_end:
0053++ 363E 1B          	mov al, bl
0054++ 363F 09          	ret
0055++ 3640             
0056++ 3640             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 3640             ; _strstr
0058++ 3640             ; find sub-string
0059++ 3640             ; str1 in SI
0060++ 3640             ; str2 in DI
0061++ 3640             ; SI points to end of source string
0062++ 3640             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 3640             _strstr:
0064++ 3640 DB          	push al
0065++ 3641 DA          	push d
0066++ 3642 E3          	push di
0067++ 3643             _strstr_loop:
0068++ 3643 F3          	cmpsb					; compare a byte of the strings
0069++ 3644 C7 4F 36    	jne _strstr_ret
0070++ 3647 FC 00 00    	lea d, [di + 0]
0071++ 364A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 364C C7 43 36    	jne _strstr_loop				; equal chars but not at end
0073++ 364F             _strstr_ret:
0074++ 364F F0          	pop di
0075++ 3650 E7          	pop d
0076++ 3651 E8          	pop al
0077++ 3652 09          	ret
0078++ 3653             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 3653             ; length of null terminated string
0080++ 3653             ; result in C
0081++ 3653             ; pointer in D
0082++ 3653             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 3653             _strlen:
0084++ 3653 DA          	push d
0085++ 3654 38 00 00    	mov c, 0
0086++ 3657             _strlen_L1:
0087++ 3657 BD 00       	cmp byte [d], 0
0088++ 3659 C6 61 36    	je _strlen_ret
0089++ 365C 79          	inc d
0090++ 365D 78          	inc c
0091++ 365E 0A 57 36    	jmp _strlen_L1
0092++ 3661             _strlen_ret:
0093++ 3661 E7          	pop d
0094++ 3662 09          	ret
0095++ 3663             
0096++ 3663             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 3663             ; STRCMP
0098++ 3663             ; compare two strings
0099++ 3663             ; str1 in SI
0100++ 3663             ; str2 in DI
0101++ 3663             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 3663             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 3663             _strcmp:
0104++ 3663 DB          	push al
0105++ 3664 DA          	push d
0106++ 3665 E3          	push di
0107++ 3666 E2          	push si
0108++ 3667             _strcmp_loop:
0109++ 3667 F3          	cmpsb					; compare a byte of the strings
0110++ 3668 C7 73 36    	jne _strcmp_ret
0111++ 366B FB FF FF    	lea d, [si +- 1]
0112++ 366E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 3670 C7 67 36    	jne _strcmp_loop				; equal chars but not at end
0114++ 3673             _strcmp_ret:
0115++ 3673 EF          	pop si
0116++ 3674 F0          	pop di
0117++ 3675 E7          	pop d
0118++ 3676 E8          	pop al
0119++ 3677 09          	ret
0120++ 3678             
0121++ 3678             
0122++ 3678             ; STRCPY
0123++ 3678             ; copy null terminated string from SI to DI
0124++ 3678             ; source in SI
0125++ 3678             ; destination in DI
0126++ 3678             _strcpy:
0127++ 3678 E2          	push si
0128++ 3679 E3          	push di
0129++ 367A DB          	push al
0130++ 367B             _strcpy_L1:
0131++ 367B F6          	lodsb
0132++ 367C F7          	stosb
0133++ 367D B9 00       	cmp al, 0
0134++ 367F C7 7B 36    	jne _strcpy_L1
0135++ 3682             _strcpy_end:
0136++ 3682 E8          	pop al
0137++ 3683 F0          	pop di
0138++ 3684 EF          	pop si
0139++ 3685 09          	ret
0140++ 3686             
0141++ 3686             ; STRCAT
0142++ 3686             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 3686             ; source in SI
0144++ 3686             ; destination in DI
0145++ 3686             _strcat:
0146++ 3686 E2          	push si
0147++ 3687 E3          	push di
0148++ 3688 D7          	push a
0149++ 3689 DA          	push d
0150++ 368A 50          	mov a, di
0151++ 368B 3C          	mov d, a
0152++ 368C             _strcat_goto_end_L1:
0153++ 368C BD 00       	cmp byte[d], 0
0154++ 368E C6 95 36    	je _strcat_start
0155++ 3691 79          	inc d
0156++ 3692 0A 8C 36    	jmp _strcat_goto_end_L1
0157++ 3695             _strcat_start:
0158++ 3695 FD 50       	mov di, d
0159++ 3697             _strcat_L1:
0160++ 3697 F6          	lodsb
0161++ 3698 F7          	stosb
0162++ 3699 B9 00       	cmp al, 0
0163++ 369B C7 97 36    	jne _strcat_L1
0164++ 369E             _strcat_end:
0165++ 369E E7          	pop d
0166++ 369F E4          	pop a
0167++ 36A0 F0          	pop di
0168++ 36A1 EF          	pop si
0169++ 36A2 09          	ret
0170++ 36A3             
0171++ 36A3             
0005+  36A3             
0006+  36A3             
0007+  36A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  36A3             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  36A3             ; ASCII in BL
0010+  36A3             ; result in AL
0011+  36A3             ; ascii for F = 0100 0110
0012+  36A3             ; ascii for 9 = 0011 1001
0013+  36A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  36A3             hex_ascii_encode:
0015+  36A3 1B            mov al, bl
0016+  36A4 93 40         test al, $40        ; test if letter or number
0017+  36A6 C7 AC 36      jnz hex_letter
0018+  36A9 87 0F         and al, $0F        ; get number
0019+  36AB 09            ret
0020+  36AC             hex_letter:
0021+  36AC 87 0F         and al, $0F        ; get letter
0022+  36AE 6A 09         add al, 9
0023+  36B0 09            ret
0024+  36B1             
0025+  36B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  36B1             ; ATOI
0027+  36B1             ; 2 letter hex string in B
0028+  36B1             ; 8bit integer returned in AL
0029+  36B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  36B1             _atoi:
0031+  36B1 D8            push b
0032+  36B2 07 A3 36      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  36B5 30            mov bl, bh
0034+  36B6 DB            push al          ; save a
0035+  36B7 07 A3 36      call hex_ascii_encode
0036+  36BA EA            pop bl  
0037+  36BB FD 9E 04      shl al, 4
0038+  36BE 8C            or al, bl
0039+  36BF E5            pop b
0040+  36C0 09            ret  
0041+  36C1             
0042+  36C1             
0043+  36C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  36C1             ; scanf
0045+  36C1             ; no need for explanations!
0046+  36C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  36C1             scanf:
0048+  36C1 09            ret
0049+  36C2             
0050+  36C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  36C2             ; ITOA
0052+  36C2             ; 8bit value in BL
0053+  36C2             ; 2 byte ASCII result in A
0054+  36C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  36C2             _itoa:
0056+  36C2 DA            push d
0057+  36C3 D8            push b
0058+  36C4 A7 00         mov bh, 0
0059+  36C6 FD A4 04      shr bl, 4  
0060+  36C9 74            mov d, b
0061+  36CA 1F 72 39      mov al, [d + s_hex_digits]
0062+  36CD 23            mov ah, al
0063+  36CE               
0064+  36CE E5            pop b
0065+  36CF D8            push b
0066+  36D0 A7 00         mov bh, 0
0067+  36D2 FD 87 0F      and bl, $0F
0068+  36D5 74            mov d, b
0069+  36D6 1F 72 39      mov al, [d + s_hex_digits]
0070+  36D9 E5            pop b
0071+  36DA E7            pop d
0072+  36DB 09            ret
0073+  36DC             
0074+  36DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  36DC             ; HEX STRING TO BINARY
0076+  36DC             ; di = destination address
0077+  36DC             ; si = source
0078+  36DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  36DC             _hex_to_int:
0080+  36DC             _hex_to_int_L1:
0081+  36DC F6            lodsb          ; load from [SI] to AL
0082+  36DD B9 00         cmp al, 0        ; check if ASCII 0
0083+  36DF C6 EC 36      jz _hex_to_int_ret
0084+  36E2 36            mov bh, al
0085+  36E3 F6            lodsb
0086+  36E4 2F            mov bl, al
0087+  36E5 07 B1 36      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  36E8 F7            stosb          ; store AL to [DI]
0089+  36E9 0A DC 36      jmp _hex_to_int_L1
0090+  36EC             _hex_to_int_ret:
0091+  36EC 09            ret    
0092+  36ED             
0093+  36ED             
0094+  36ED             
0095+  36ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  36ED             ; GETCHAR
0097+  36ED             ; char in ah
0098+  36ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  36ED             getch:
0100+  36ED DB            push al
0101+  36EE             getch_retry:
0102+  36EE 19 01         mov al, 1
0103+  36F0 05 03         syscall sys_io      ; receive in AH
0104+  36F2 E8            pop al
0105+  36F3 09            ret
0106+  36F4             
0107+  36F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  36F4             ; PUTCHAR
0109+  36F4             ; char in ah
0110+  36F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  36F4             _putchar:
0112+  36F4 D7            push a
0113+  36F5 19 00         mov al, 0
0114+  36F7 05 03         syscall sys_io      ; char in AH
0115+  36F9 E4            pop a
0116+  36FA 09            ret
0117+  36FB             
0118+  36FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  36FB             ;; INPUT A STRING
0120+  36FB             ;; terminates with null
0121+  36FB             ;; pointer in D
0122+  36FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  36FB             _gets:
0124+  36FB D7            push a
0125+  36FC DA            push d
0126+  36FD             _gets_loop:
0127+  36FD 19 01         mov al, 1
0128+  36FF 05 03         syscall sys_io      ; receive in AH
0129+  3701 B9 00         cmp al, 0        ; check error code (AL)
0130+  3703 C6 FD 36      je _gets_loop      ; if no char received, retry
0131+  3706             
0132+  3706 76 1B         cmp ah, 27
0133+  3708 C6 29 37      je _gets_ansi_esc
0134+  370B 76 0A         cmp ah, $0A        ; LF
0135+  370D C6 94 37      je _gets_end
0136+  3710 76 0D         cmp ah, $0D        ; CR
0137+  3712 C6 94 37      je _gets_end
0138+  3715 76 5C         cmp ah, $5C        ; '\\'
0139+  3717 C6 55 37      je _gets_escape
0140+  371A               
0141+  371A 76 08         cmp ah, $08      ; check for backspace
0142+  371C C6 25 37      je _gets_backspace
0143+  371F             
0144+  371F 1A            mov al, ah
0145+  3720 3E            mov [d], al
0146+  3721 79            inc d
0147+  3722 0A FD 36      jmp _gets_loop
0148+  3725             _gets_backspace:
0149+  3725 7F            dec d
0150+  3726 0A FD 36      jmp _gets_loop
0151+  3729             _gets_ansi_esc:
0152+  3729 19 01         mov al, 1
0153+  372B 05 03         syscall sys_io        ; receive in AH without echo
0154+  372D B9 00         cmp al, 0          ; check error code (AL)
0155+  372F C6 29 37      je _gets_ansi_esc    ; if no char received, retry
0156+  3732 76 5B         cmp ah, '['
0157+  3734 C7 FD 36      jne _gets_loop
0158+  3737             _gets_ansi_esc_2:
0159+  3737 19 01         mov al, 1
0160+  3739 05 03         syscall sys_io          ; receive in AH without echo
0161+  373B B9 00         cmp al, 0            ; check error code (AL)
0162+  373D C6 37 37      je _gets_ansi_esc_2  ; if no char received, retry
0163+  3740 76 44         cmp ah, 'D'
0164+  3742 C6 4D 37      je _gets_left_arrow
0165+  3745 76 43         cmp ah, 'C'
0166+  3747 C6 51 37      je _gets_right_arrow
0167+  374A 0A FD 36      jmp _gets_loop
0168+  374D             _gets_left_arrow:
0169+  374D 7F            dec d
0170+  374E 0A FD 36      jmp _gets_loop
0171+  3751             _gets_right_arrow:
0172+  3751 79            inc d
0173+  3752 0A FD 36      jmp _gets_loop
0174+  3755             _gets_escape:
0175+  3755 19 01         mov al, 1
0176+  3757 05 03         syscall sys_io      ; receive in AH
0177+  3759 B9 00         cmp al, 0        ; check error code (AL)
0178+  375B C6 55 37      je _gets_escape      ; if no char received, retry
0179+  375E 76 6E         cmp ah, 'n'
0180+  3760 C6 7F 37      je _gets_LF
0181+  3763 76 72         cmp ah, 'r'
0182+  3765 C6 86 37      je _gets_CR
0183+  3768 76 30         cmp ah, '0'
0184+  376A C6 8D 37      je _gets_NULL
0185+  376D 76 5C         cmp ah, $5C  ; '\'
0186+  376F C6 78 37      je _gets_slash
0187+  3772 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  3773 3E            mov [d], al
0189+  3774 79            inc d
0190+  3775 0A FD 36      jmp _gets_loop
0191+  3778             _gets_slash:
0192+  3778 19 5C         mov al, $5C
0193+  377A 3E            mov [d], al
0194+  377B 79            inc d
0195+  377C 0A FD 36      jmp _gets_loop
0196+  377F             _gets_LF:
0197+  377F 19 0A         mov al, $0A
0198+  3781 3E            mov [d], al
0199+  3782 79            inc d
0200+  3783 0A FD 36      jmp _gets_loop
0201+  3786             _gets_CR:
0202+  3786 19 0D         mov al, $0D
0203+  3788 3E            mov [d], al
0204+  3789 79            inc d
0205+  378A 0A FD 36      jmp _gets_loop
0206+  378D             _gets_NULL:
0207+  378D 19 00         mov al, $00
0208+  378F 3E            mov [d], al
0209+  3790 79            inc d
0210+  3791 0A FD 36      jmp _gets_loop
0211+  3794             _gets_end:
0212+  3794 19 00         mov al, 0
0213+  3796 3E            mov [d], al        ; terminate string
0214+  3797 E7            pop d
0215+  3798 E4            pop a
0216+  3799 09            ret
0217+  379A             
0218+  379A             
0219+  379A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  379A             ;; INPUT TEXT
0221+  379A             ;; terminated with CTRL+D
0222+  379A             ;; pointer in D
0223+  379A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  379A             _gettxt:
0225+  379A D7            push a
0226+  379B DA            push d
0227+  379C             _gettxt_loop:
0228+  379C 19 01         mov al, 1
0229+  379E 05 03         syscall sys_io      ; receive in AH
0230+  37A0 B9 00         cmp al, 0        ; check error code (AL)
0231+  37A2 C6 9C 37      je _gettxt_loop    ; if no char received, retry
0232+  37A5 76 04         cmp ah, 4      ; EOT
0233+  37A7 C6 E5 37      je _gettxt_end
0234+  37AA 76 08         cmp ah, $08      ; check for backspace
0235+  37AC C6 E1 37      je _gettxt_backspace
0236+  37AF 76 5C         cmp ah, $5C        ; '\'
0237+  37B1 C6 BA 37      je _gettxt_escape
0238+  37B4 1A            mov al, ah
0239+  37B5 3E            mov [d], al
0240+  37B6 79            inc d
0241+  37B7 0A 9C 37      jmp _gettxt_loop
0242+  37BA             _gettxt_escape:
0243+  37BA 19 01         mov al, 1
0244+  37BC 05 03         syscall sys_io      ; receive in AH
0245+  37BE B9 00         cmp al, 0        ; check error code (AL)
0246+  37C0 C6 BA 37      je _gettxt_escape    ; if no char received, retry
0247+  37C3 76 6E         cmp ah, 'n'
0248+  37C5 C6 D3 37      je _gettxt_LF
0249+  37C8 76 72         cmp ah, 'r'
0250+  37CA C6 DA 37      je _gettxt_CR
0251+  37CD 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  37CE 3E            mov [d], al
0253+  37CF 79            inc d
0254+  37D0 0A 9C 37      jmp _gettxt_loop
0255+  37D3             _gettxt_LF:
0256+  37D3 19 0A         mov al, $0A
0257+  37D5 3E            mov [d], al
0258+  37D6 79            inc d
0259+  37D7 0A 9C 37      jmp _gettxt_loop
0260+  37DA             _gettxt_CR:
0261+  37DA 19 0D         mov al, $0D
0262+  37DC 3E            mov [d], al
0263+  37DD 79            inc d
0264+  37DE 0A 9C 37      jmp _gettxt_loop
0265+  37E1             _gettxt_backspace:
0266+  37E1 7F            dec d
0267+  37E2 0A 9C 37      jmp _gettxt_loop
0268+  37E5             _gettxt_end:
0269+  37E5 19 00         mov al, 0
0270+  37E7 3E            mov [d], al        ; terminate string
0271+  37E8 E7            pop d
0272+  37E9 E4            pop a
0273+  37EA 09            ret
0274+  37EB             
0275+  37EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  37EB             ; PRINT NEW LINE
0277+  37EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  37EB             printnl:
0279+  37EB D7            push a
0280+  37EC 10 00 0A      mov a, $0A00
0281+  37EF 05 03         syscall sys_io
0282+  37F1 10 00 0D      mov a, $0D00
0283+  37F4 05 03         syscall sys_io
0284+  37F6 E4            pop a
0285+  37F7 09            ret
0286+  37F8             
0287+  37F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  37F8             ; _strtoint
0289+  37F8             ; 4 digit hex string number in d
0290+  37F8             ; integer returned in A
0291+  37F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  37F8             _strtointx:
0293+  37F8 D8            push b
0294+  37F9 32            mov bl, [d]
0295+  37FA 37            mov bh, bl
0296+  37FB 33 01 00      mov bl, [d + 1]
0297+  37FE 07 B1 36      call _atoi        ; convert to int in AL
0298+  3801 23            mov ah, al        ; move to AH
0299+  3802 33 02 00      mov bl, [d + 2]
0300+  3805 37            mov bh, bl
0301+  3806 33 03 00      mov bl, [d + 3]
0302+  3809 07 B1 36      call _atoi        ; convert to int in AL
0303+  380C E5            pop b
0304+  380D 09            ret
0305+  380E             
0306+  380E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  380E             ; _strtoint
0308+  380E             ; 5 digit base10 string number in d
0309+  380E             ; integer returned in A
0310+  380E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  380E             _strtoint:
0312+  380E E2            push si
0313+  380F D8            push b
0314+  3810 D9            push c
0315+  3811 DA            push d
0316+  3812 07 53 36      call _strlen      ; get string length in C
0317+  3815 7E            dec c
0318+  3816 FD 4E         mov si, d
0319+  3818 12            mov a, c
0320+  3819 FD 99         shl a
0321+  381B 3B 8A 39      mov d, table_power
0322+  381E 59            add d, a
0323+  381F 38 00 00      mov c, 0
0324+  3822             _strtoint_L0:
0325+  3822 F6            lodsb      ; load ASCII to al
0326+  3823 B9 00         cmp al, 0
0327+  3825 C6 38 38      je _strtoint_end
0328+  3828 6F 30         sub al, $30    ; make into integer
0329+  382A 22 00         mov ah, 0
0330+  382C 2A            mov b, [d]
0331+  382D AC            mul a, b      ; result in B since it fits in 16bits
0332+  382E 11            mov a, b
0333+  382F 28            mov b, c
0334+  3830 54            add a, b
0335+  3831 39            mov c, a
0336+  3832 63 02 00      sub d, 2
0337+  3835 0A 22 38      jmp _strtoint_L0
0338+  3838             _strtoint_end:
0339+  3838 12            mov a, c
0340+  3839 E7            pop d
0341+  383A E6            pop c
0342+  383B E5            pop b
0343+  383C EF            pop si
0344+  383D 09            ret
0345+  383E             
0346+  383E             
0347+  383E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  383E             ; PRINT NULL TERMINATED STRING
0349+  383E             ; pointer in D
0350+  383E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  383E             _puts:
0352+  383E D7            push a
0353+  383F DA            push d
0354+  3840             _puts_L1:
0355+  3840 1E            mov al, [d]
0356+  3841 B9 00         cmp al, 0
0357+  3843 C6 4F 38      jz _puts_END
0358+  3846 23            mov ah, al
0359+  3847 19 00         mov al, 0
0360+  3849 05 03         syscall sys_io
0361+  384B 79            inc d
0362+  384C 0A 40 38      jmp _puts_L1
0363+  384F             _puts_END:
0364+  384F E7            pop d
0365+  3850 E4            pop a
0366+  3851 09            ret
0367+  3852             
0368+  3852             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  3852             ; PRINT N SIZE STRING
0370+  3852             ; pointer in D
0371+  3852             ; size in C
0372+  3852             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  3852             _putsn:
0374+  3852 DB            push al
0375+  3853 DA            push d
0376+  3854 D9            push c
0377+  3855             _putsn_L0:
0378+  3855 1E            mov al, [d]
0379+  3856 23            mov ah, al
0380+  3857 19 00         mov al, 0
0381+  3859 05 03         syscall sys_io
0382+  385B 79            inc d
0383+  385C 7E            dec c  
0384+  385D C2 00 00      cmp c, 0
0385+  3860 C7 55 38      jne _putsn_L0
0386+  3863             _putsn_end:
0387+  3863 E6            pop c
0388+  3864 E7            pop d
0389+  3865 E8            pop al
0390+  3866 09            ret
0391+  3867             
0392+  3867             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  3867             ; print 16bit decimal number
0394+  3867             ; input number in A
0395+  3867             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  3867             print_u16d:
0397+  3867 D7            push a
0398+  3868 D8            push b
0399+  3869 26 10 27      mov b, 10000
0400+  386C AE            div a, b      ; get 10000's coeff.
0401+  386D 07 8F 38      call print_number
0402+  3870 11            mov a, b
0403+  3871 26 E8 03      mov b, 1000
0404+  3874 AE            div a, b      ; get 1000's coeff.
0405+  3875 07 8F 38      call print_number
0406+  3878 11            mov a, b
0407+  3879 26 64 00      mov b, 100
0408+  387C AE            div a, b
0409+  387D 07 8F 38      call print_number
0410+  3880 11            mov a, b
0411+  3881 26 0A 00      mov b, 10
0412+  3884 AE            div a, b
0413+  3885 07 8F 38      call print_number
0414+  3888 1B            mov al, bl      ; 1's coeff in bl
0415+  3889 07 8F 38      call print_number
0416+  388C E5            pop b
0417+  388D E4            pop a
0418+  388E 09            ret
0419+  388F             
0420+  388F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  388F             ; print AL
0422+  388F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  388F             print_number:
0424+  388F 6A 30         add al, $30
0425+  3891 23            mov ah, al
0426+  3892 07 F4 36      call _putchar
0427+  3895 09            ret
0428+  3896             
0429+  3896             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  3896             ; PRINT 16BIT HEX INTEGER
0431+  3896             ; integer value in reg B
0432+  3896             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  3896             print_u16x:
0434+  3896 D7            push a
0435+  3897 D8            push b
0436+  3898 DD            push bl
0437+  3899 30            mov bl, bh
0438+  389A 07 C2 36      call _itoa        ; convert bh to char in A
0439+  389D 2F            mov bl, al        ; save al
0440+  389E 19 00         mov al, 0
0441+  38A0 05 03         syscall sys_io        ; display AH
0442+  38A2 24            mov ah, bl        ; retrieve al
0443+  38A3 19 00         mov al, 0
0444+  38A5 05 03         syscall sys_io        ; display AL
0445+  38A7             
0446+  38A7 EA            pop bl
0447+  38A8 07 C2 36      call _itoa        ; convert bh to char in A
0448+  38AB 2F            mov bl, al        ; save al
0449+  38AC 19 00         mov al, 0
0450+  38AE 05 03         syscall sys_io        ; display AH
0451+  38B0 24            mov ah, bl        ; retrieve al
0452+  38B1 19 00         mov al, 0
0453+  38B3 05 03         syscall sys_io        ; display AL
0454+  38B5             
0455+  38B5 E5            pop b
0456+  38B6 E4            pop a
0457+  38B7 09            ret
0458+  38B8             
0459+  38B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  38B8             ; INPUT 16BIT HEX INTEGER
0461+  38B8             ; read 16bit integer into A
0462+  38B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  38B8             scan_u16x:
0464+  38B8 F8 10 00      enter 16
0465+  38BB D8            push b
0466+  38BC DA            push d
0467+  38BD             
0468+  38BD FA F1 FF      lea d, [bp + -15]
0469+  38C0 07 FB 36      call _gets        ; get number
0470+  38C3             
0471+  38C3 32            mov bl, [d]
0472+  38C4 37            mov bh, bl
0473+  38C5 33 01 00      mov bl, [d + 1]
0474+  38C8 07 B1 36      call _atoi        ; convert to int in AL
0475+  38CB 23            mov ah, al        ; move to AH
0476+  38CC             
0477+  38CC 33 02 00      mov bl, [d + 2]
0478+  38CF 37            mov bh, bl
0479+  38D0 33 03 00      mov bl, [d + 3]
0480+  38D3 07 B1 36      call _atoi        ; convert to int in AL
0481+  38D6             
0482+  38D6 E7            pop d
0483+  38D7 E5            pop b
0484+  38D8 F9            leave
0485+  38D9 09            ret
0486+  38DA             
0487+  38DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  38DA             ; PRINT 8bit HEX INTEGER
0489+  38DA             ; integer value in reg bl
0490+  38DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  38DA             print_u8x:
0492+  38DA D7            push a
0493+  38DB DD            push bl
0494+  38DC             
0495+  38DC 07 C2 36      call _itoa        ; convert bl to char in A
0496+  38DF 2F            mov bl, al        ; save al
0497+  38E0 19 00         mov al, 0
0498+  38E2 05 03         syscall sys_io        ; display AH
0499+  38E4 24            mov ah, bl        ; retrieve al
0500+  38E5 19 00         mov al, 0
0501+  38E7 05 03         syscall sys_io        ; display AL
0502+  38E9             
0503+  38E9 EA            pop bl
0504+  38EA E4            pop a
0505+  38EB 09            ret
0506+  38EC             
0507+  38EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  38EC             ; print 8bit decimal unsigned number
0509+  38EC             ; input number in AL
0510+  38EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  38EC             print_u8d:
0512+  38EC D7            push a
0513+  38ED D8            push b
0514+  38EE             
0515+  38EE 22 00         mov ah, 0
0516+  38F0 26 64 00      mov b, 100
0517+  38F3 AE            div a, b
0518+  38F4 D8            push b      ; save remainder
0519+  38F5 B9 00         cmp al, 0
0520+  38F7 C6 01 39      je skip100
0521+  38FA 6A 30         add al, $30
0522+  38FC 23            mov ah, al
0523+  38FD 19 00         mov al, 0
0524+  38FF 05 03         syscall sys_io  ; print coeff
0525+  3901             skip100:
0526+  3901 E4            pop a
0527+  3902 22 00         mov ah, 0
0528+  3904 26 0A 00      mov b, 10
0529+  3907 AE            div a, b
0530+  3908 D8            push b      ; save remainder
0531+  3909 B9 00         cmp al, 0
0532+  390B C6 15 39      je skip10
0533+  390E 6A 30         add al, $30
0534+  3910 23            mov ah, al
0535+  3911 19 00         mov al, 0
0536+  3913 05 03         syscall sys_io  ; print coeff
0537+  3915             skip10:
0538+  3915 E4            pop a
0539+  3916 1B            mov al, bl
0540+  3917 6A 30         add al, $30
0541+  3919 23            mov ah, al
0542+  391A 19 00         mov al, 0
0543+  391C 05 03         syscall sys_io  ; print coeff
0544+  391E E5            pop b
0545+  391F E4            pop a
0546+  3920 09            ret
0547+  3921             
0548+  3921             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  3921             ; INPUT 8BIT HEX INTEGER
0550+  3921             ; read 8bit integer into AL
0551+  3921             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  3921             scan_u8x:
0553+  3921 F8 04 00      enter 4
0554+  3924 D8            push b
0555+  3925 DA            push d
0556+  3926             
0557+  3926 FA FD FF      lea d, [bp + -3]
0558+  3929 07 FB 36      call _gets        ; get number
0559+  392C             
0560+  392C 32            mov bl, [d]
0561+  392D 37            mov bh, bl
0562+  392E 33 01 00      mov bl, [d + 1]
0563+  3931 07 B1 36      call _atoi        ; convert to int in AL
0564+  3934             
0565+  3934 E7            pop d
0566+  3935 E5            pop b
0567+  3936 F9            leave
0568+  3937 09            ret
0569+  3938             
0570+  3938             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  3938             ; input decimal number
0572+  3938             ; result in A
0573+  3938             ; 655'\0'
0574+  3938             ; low--------high
0575+  3938             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  3938             scan_u16d:
0577+  3938 F8 08 00      enter 8
0578+  393B E2            push si
0579+  393C D8            push b
0580+  393D D9            push c
0581+  393E DA            push d
0582+  393F FA F9 FF      lea d, [bp +- 7]
0583+  3942 07 FB 36      call _gets
0584+  3945 07 53 36      call _strlen      ; get string length in C
0585+  3948 7E            dec c
0586+  3949 FD 4E         mov si, d
0587+  394B 12            mov a, c
0588+  394C FD 99         shl a
0589+  394E 3B 8A 39      mov d, table_power
0590+  3951 59            add d, a
0591+  3952 38 00 00      mov c, 0
0592+  3955             mul_loop:
0593+  3955 F6            lodsb      ; load ASCII to al
0594+  3956 B9 00         cmp al, 0
0595+  3958 C6 6B 39      je mul_exit
0596+  395B 6F 30         sub al, $30    ; make into integer
0597+  395D 22 00         mov ah, 0
0598+  395F 2A            mov b, [d]
0599+  3960 AC            mul a, b      ; result in B since it fits in 16bits
0600+  3961 11            mov a, b
0601+  3962 28            mov b, c
0602+  3963 54            add a, b
0603+  3964 39            mov c, a
0604+  3965 63 02 00      sub d, 2
0605+  3968 0A 55 39      jmp mul_loop
0606+  396B             mul_exit:
0607+  396B 12            mov a, c
0608+  396C E7            pop d
0609+  396D E6            pop c
0610+  396E E5            pop b
0611+  396F EF            pop si
0612+  3970 F9            leave
0613+  3971 09            ret
0614+  3972             
0615+  3972             
0616+  3972 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  3976 34 35 36 37 
0616+  397A 38 39 41 42 
0616+  397E 43 44 45 46 
0617+  3982 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  3986 1B 5B 48 00 
0618+  398A             
0619+  398A             table_power:
0620+  398A 01 00         .dw 1
0621+  398C 0A 00         .dw 10
0622+  398E 64 00         .dw 100
0623+  3990 E8 03         .dw 1000
0624+  3992 10 27         .dw 100008118   3994             ; --- END INLINE ASM BLOCK
8119   3994             
8120   3994 F9            leave
8121   3995 09            ret
8122   3996             ; --- END TEXT BLOCK
8123   3996             
8124   3996             ; --- BEGIN DATA BLOCK
8125   3996             _keywords_data:
8126   3996 4B 3C       .dw __s0
8127   3998 01          .db 1
8128   3999 4F 3C       .dw __s1
8129   399B 02          .db 2
8130   399C 57 3C       .dw __s2
8131   399E 03          .db 3
8132   399F 5C 3C       .dw __s3
8133   39A1 04          .db 4
8134   39A2 61 3C       .dw __s4
8135   39A4 06          .db 6
8136   39A5 64 3C       .dw __s5
8137   39A7 07          .db 7
8138   39A8 67 3C       .dw __s6
8139   39AA 05          .db 5
8140   39AB 6B 3C       .dw __s7
8141   39AD 00          .db 0
8142   39AE 00 00 00 00 _label_table_data: .fill 288, 0
8142   39B2 00 00 00 00 
8142   39B6 00 00 00 00 
8142   39BA 00 00 00 00 
8142   39BE 00 00 00 00 
8142   39C2 00 00 00 00 
8142   39C6 00 00 00 00 
8142   39CA 00 00 00 00 
8142   39CE 00 00 00 00 
8142   39D2 00 00 00 00 
8142   39D6 00 00 00 00 
8142   39DA 00 00 00 00 
8142   39DE 00 00 00 00 
8142   39E2 00 00 00 00 
8142   39E6 00 00 00 00 
8142   39EA 00 00 00 00 
8142   39EE 00 00 00 00 
8142   39F2 00 00 00 00 
8142   39F6 00 00 00 00 
8142   39FA 00 00 00 00 
8142   39FE 00 00 00 00 
8142   3A02 00 00 00 00 
8142   3A06 00 00 00 00 
8142   3A0A 00 00 00 00 
8142   3A0E 00 00 00 00 
8142   3A12 00 00 00 00 
8142   3A16 00 00 00 00 
8142   3A1A 00 00 00 00 
8142   3A1E 00 00 00 00 
8142   3A22 00 00 00 00 
8142   3A26 00 00 00 00 
8142   3A2A 00 00 00 00 
8142   3A2E 00 00 00 00 
8142   3A32 00 00 00 00 
8142   3A36 00 00 00 00 
8142   3A3A 00 00 00 00 
8142   3A3E 00 00 00 00 
8142   3A42 00 00 00 00 
8142   3A46 00 00 00 00 
8142   3A4A 00 00 00 00 
8142   3A4E 00 00 00 00 
8142   3A52 00 00 00 00 
8142   3A56 00 00 00 00 
8142   3A5A 00 00 00 00 
8142   3A5E 00 00 00 00 
8142   3A62 00 00 00 00 
8142   3A66 00 00 00 00 
8142   3A6A 00 00 00 00 
8142   3A6E 00 00 00 00 
8142   3A72 00 00 00 00 
8142   3A76 00 00 00 00 
8142   3A7A 00 00 00 00 
8142   3A7E 00 00 00 00 
8142   3A82 00 00 00 00 
8142   3A86 00 00 00 00 
8142   3A8A 00 00 00 00 
8142   3A8E 00 00 00 00 
8142   3A92 00 00 00 00 
8142   3A96 00 00 00 00 
8142   3A9A 00 00 00 00 
8142   3A9E 00 00 00 00 
8142   3AA2 00 00 00 00 
8142   3AA6 00 00 00 00 
8142   3AAA 00 00 00 00 
8142   3AAE 00 00 00 00 
8142   3AB2 00 00 00 00 
8142   3AB6 00 00 00 00 
8142   3ABA 00 00 00 00 
8142   3ABE 00 00 00 00 
8142   3AC2 00 00 00 00 
8142   3AC6 00 00 00 00 
8142   3ACA 00 00 00 00 
8143   3ACE 00 04       __org: .dw 1024
8144   3AD0 00 00       _pc: .fill 2, 0
8145   3AD2 01          _print_information: .db 1
8146   3AD3 00 00       _tok: .fill 2, 0
8147   3AD5 00 00       _toktype: .fill 2, 0
8148   3AD7 00 00       _prog: .fill 2, 0
8149   3AD9 00 00 00 00 _token_data: .fill 64, 0
8149   3ADD 00 00 00 00 
8149   3AE1 00 00 00 00 
8149   3AE5 00 00 00 00 
8149   3AE9 00 00 00 00 
8149   3AED 00 00 00 00 
8149   3AF1 00 00 00 00 
8149   3AF5 00 00 00 00 
8149   3AF9 00 00 00 00 
8149   3AFD 00 00 00 00 
8149   3B01 00 00 00 00 
8149   3B05 00 00 00 00 
8149   3B09 00 00 00 00 
8149   3B0D 00 00 00 00 
8149   3B11 00 00 00 00 
8149   3B15 00 00 00 00 
8150   3B19 00 00 00 00 _string_const_data: .fill 256, 0
8150   3B1D 00 00 00 00 
8150   3B21 00 00 00 00 
8150   3B25 00 00 00 00 
8150   3B29 00 00 00 00 
8150   3B2D 00 00 00 00 
8150   3B31 00 00 00 00 
8150   3B35 00 00 00 00 
8150   3B39 00 00 00 00 
8150   3B3D 00 00 00 00 
8150   3B41 00 00 00 00 
8150   3B45 00 00 00 00 
8150   3B49 00 00 00 00 
8150   3B4D 00 00 00 00 
8150   3B51 00 00 00 00 
8150   3B55 00 00 00 00 
8150   3B59 00 00 00 00 
8150   3B5D 00 00 00 00 
8150   3B61 00 00 00 00 
8150   3B65 00 00 00 00 
8150   3B69 00 00 00 00 
8150   3B6D 00 00 00 00 
8150   3B71 00 00 00 00 
8150   3B75 00 00 00 00 
8150   3B79 00 00 00 00 
8150   3B7D 00 00 00 00 
8150   3B81 00 00 00 00 
8150   3B85 00 00 00 00 
8150   3B89 00 00 00 00 
8150   3B8D 00 00 00 00 
8150   3B91 00 00 00 00 
8150   3B95 00 00 00 00 
8150   3B99 00 00 00 00 
8150   3B9D 00 00 00 00 
8150   3BA1 00 00 00 00 
8150   3BA5 00 00 00 00 
8150   3BA9 00 00 00 00 
8150   3BAD 00 00 00 00 
8150   3BB1 00 00 00 00 
8150   3BB5 00 00 00 00 
8150   3BB9 00 00 00 00 
8150   3BBD 00 00 00 00 
8150   3BC1 00 00 00 00 
8150   3BC5 00 00 00 00 
8150   3BC9 00 00 00 00 
8150   3BCD 00 00 00 00 
8150   3BD1 00 00 00 00 
8150   3BD5 00 00 00 00 
8150   3BD9 00 00 00 00 
8150   3BDD 00 00 00 00 
8150   3BE1 00 00 00 00 
8150   3BE5 00 00 00 00 
8150   3BE9 00 00 00 00 
8150   3BED 00 00 00 00 
8150   3BF1 00 00 00 00 
8150   3BF5 00 00 00 00 
8150   3BF9 00 00 00 00 
8150   3BFD 00 00 00 00 
8150   3C01 00 00 00 00 
8150   3C05 00 00 00 00 
8150   3C09 00 00 00 00 
8150   3C0D 00 00 00 00 
8150   3C11 00 00 00 00 
8150   3C15 00 00 00 00 
8151   3C19 00 00       _int_const: .fill 2, 0
8152   3C1B 00 00       _program: .fill 2, 0
8153   3C1D 00 00       _bin_out: .fill 2, 0
8154   3C1F 00 00       _bin_p: .fill 2, 0
8155   3C21 00 00       _opcode_table: .fill 2, 0
8156   3C23 00 00 00 00 _prog_stack_data: .fill 20, 0
8156   3C27 00 00 00 00 
8156   3C2B 00 00 00 00 
8156   3C2F 00 00 00 00 
8156   3C33 00 00 00 00 
8157   3C37 00 00       _prog_tos: .fill 2, 0
8158   3C39 00 00       _prog_size: .fill 2, 0
8159   3C3B             _symbols_data: 
8160   3C3B 6B 3C 6D 3C .dw __s7, __s8, __s8, __s7, __s7, __s7, __s8, __s8, 
8160   3C3F 6D 3C 6B 3C 
8160   3C43 6B 3C 6B 3C 
8160   3C47 6D 3C 6D 3C 
8161   3C4B 6F 72 67 00 __s0: .db "org", 0
8162   3C4F 69 6E 63 6C __s1: .db "include", 0
8162   3C53 75 64 65 00 
8163   3C57 64 61 74 61 __s2: .db "data", 0
8163   3C5B 00 
8164   3C5C 74 65 78 74 __s3: .db "text", 0
8164   3C60 00 
8165   3C61 64 62 00    __s4: .db "db", 0
8166   3C64 64 77 00    __s5: .db "dw", 0
8167   3C67 65 6E 64 00 __s6: .db "end", 0
8168   3C6B 40 00       __s7: .db "@", 0
8169   3C6D 23 00       __s8: .db "#", 0
8170   3C6F 0A 00       __s9: .db "\n", 0
8171   3C71 2E 2F 63 6F __s10: .db "./config.d/op_tbl", 0
8171   3C75 6E 66 69 67 
8171   3C79 2E 64 2F 6F 
8171   3C7D 70 5F 74 62 
8171   3C81 6C 00 
8172   3C83 50 61 72 73 __s11: .db "Parsing DATA section...", 0
8172   3C87 69 6E 67 20 
8172   3C8B 44 41 54 41 
8172   3C8F 20 73 65 63 
8172   3C93 74 69 6F 6E 
8172   3C97 2E 2E 2E 00 
8173   3C9B 44 61 74 61 __s12: .db "Data segment not found.", 0
8173   3C9F 20 73 65 67 
8173   3CA3 6D 65 6E 74 
8173   3CA7 20 6E 6F 74 
8173   3CAB 20 66 6F 75 
8173   3CAF 6E 64 2E 00 
8174   3CB3 2E 64 62 3A __s13: .db ".db: ", 0
8174   3CB7 20 00 
8175   3CB9 2C 20 00    __s14: .db ", ", 0
8176   3CBC 2E 64 77 3A __s15: .db ".dw: ", 0
8176   3CC0 20 00 
8177   3CC2 44 6F 6E 65 __s16: .db "Done.\n", 0
8177   3CC6 2E 0A 00 
8178   3CC9 49 6E 74 65 __s17: .db "Integer constant expected in .org directive.", 0
8178   3CCD 67 65 72 20 
8178   3CD1 63 6F 6E 73 
8178   3CD5 74 61 6E 74 
8178   3CD9 20 65 78 70 
8178   3CDD 65 63 74 65 
8178   3CE1 64 20 69 6E 
8178   3CE5 20 2E 6F 72 
8178   3CE9 67 20 64 69 
8178   3CED 72 65 63 74 
8178   3CF1 69 76 65 2E 
8178   3CF5 00 
8179   3CF6 50 61 72 73 __s18: .db "Parsing labels and directives...\n", 0
8179   3CFA 69 6E 67 20 
8179   3CFE 6C 61 62 65 
8179   3D02 6C 73 20 61 
8179   3D06 6E 64 20 64 
8179   3D0A 69 72 65 63 
8179   3D0E 74 69 76 65 
8179   3D12 73 2E 2E 2E 
8179   3D16 0A 00 
8180   3D18 2E 00       __s19: .db ".", 0
8181   3D1A 0A 44 6F 6E __s20: .db "\nDone.\n", 0
8181   3D1E 65 2E 0A 00 
8182   3D22 4F 72 67 3A __s21: .db "Org: ", 0
8182   3D26 20 00 
8183   3D28 0A 4C 61 62 __s22: .db "\nLabels list:\n", 0
8183   3D2C 65 6C 73 20 
8183   3D30 6C 69 73 74 
8183   3D34 3A 0A 00 
8184   3D37 3A 20 00    __s23: .db ": ", 0
8185   3D3A 20 2E 00    __s24: .db " .", 0
8186   3D3D 20 00       __s25: .db " ", 0
8187   3D3F 4D 61 78 69 __s26: .db "Maximum number of operands per instruction is 2.", 0
8187   3D43 6D 75 6D 20 
8187   3D47 6E 75 6D 62 
8187   3D4B 65 72 20 6F 
8187   3D4F 66 20 6F 70 
8187   3D53 65 72 61 6E 
8187   3D57 64 73 20 70 
8187   3D5B 65 72 20 69 
8187   3D5F 6E 73 74 72 
8187   3D63 75 63 74 69 
8187   3D67 6F 6E 20 69 
8187   3D6B 73 20 32 2E 
8187   3D6F 00 
8188   3D70 38 62 69 74 __s27: .db "8bit operand expected but 16bit label given.", 0
8188   3D74 20 6F 70 65 
8188   3D78 72 61 6E 64 
8188   3D7C 20 65 78 70 
8188   3D80 65 63 74 65 
8188   3D84 64 20 62 75 
8188   3D88 74 20 31 36 
8188   3D8C 62 69 74 20 
8188   3D90 6C 61 62 65 
8188   3D94 6C 20 67 69 
8188   3D98 76 65 6E 2E 
8188   3D9C 00 
8189   3D9D 20 28 00    __s28: .db " (", 0
8190   3DA0 29 20 3A 20 __s29: .db ") : ", 0
8190   3DA4 00 
8191   3DA5 55 6E 64 65 __s30: .db "Undeclared label: ", 0
8191   3DA9 63 6C 61 72 
8191   3DAD 65 64 20 6C 
8191   3DB1 61 62 65 6C 
8191   3DB5 3A 20 00 
8192   3DB8 50 61 72 73 __s31: .db "Parsing TEXT section...\n", 0
8192   3DBC 69 6E 67 20 
8192   3DC0 54 45 58 54 
8192   3DC4 20 73 65 63 
8192   3DC8 74 69 6F 6E 
8192   3DCC 2E 2E 2E 0A 
8192   3DD0 00 
8193   3DD1 54 45 58 54 __s32: .db "TEXT section not found.", 0
8193   3DD5 20 73 65 63 
8193   3DD9 74 69 6F 6E 
8193   3DDD 20 6E 6F 74 
8193   3DE1 20 66 6F 75 
8193   3DE5 6E 64 2E 00 
8194   3DE9 54 45 58 54 __s33: .db "TEXT section end not found.", 0
8194   3DED 20 73 65 63 
8194   3DF1 74 69 6F 6E 
8194   3DF5 20 65 6E 64 
8194   3DF9 20 6E 6F 74 
8194   3DFD 20 66 6F 75 
8194   3E01 6E 64 2E 00 
8195   3E05 55 6E 65 78 __s34: .db "Unexpected directive.", 0
8195   3E09 70 65 63 74 
8195   3E0D 65 64 20 64 
8195   3E11 69 72 65 63 
8195   3E15 74 69 76 65 
8195   3E19 2E 00 
8196   3E1B 44 6F 6E 65 __s35: .db "Done.\n\n", 0
8196   3E1F 2E 0A 0A 00 
8197   3E23 50 72 6F 67 __s36: .db "Prog Offset: ", 0
8197   3E27 20 4F 66 66 
8197   3E2B 73 65 74 3A 
8197   3E2F 20 00 
8198   3E31 50 72 6F 67 __s37: .db "Prog value : ", 0
8198   3E35 20 76 61 6C 
8198   3E39 75 65 20 3A 
8198   3E3D 20 00 
8199   3E3F 54 6F 6B 65 __s38: .db "Token       : ", 0
8199   3E43 6E 20 20 20 
8199   3E47 20 20 20 20 
8199   3E4B 3A 20 00 
8200   3E4E 54 6F 6B 3A __s39: .db "Tok: ", 0
8200   3E52 20 00 
8201   3E54 54 6F 6B 74 __s40: .db "Toktype: ", 0
8201   3E58 79 70 65 3A 
8201   3E5C 20 00 
8202   3E5E 53 74 72 69 __s41: .db "StringConst : ", 0
8202   3E62 6E 67 43 6F 
8202   3E66 6E 73 74 20 
8202   3E6A 3A 20 00 
8203   3E6D 50 43 20 20 __s42: .db "PC          : ", 0
8203   3E71 20 20 20 20 
8203   3E75 20 20 20 20 
8203   3E79 3A 20 00 
8204   3E7C 0A 41 73 73 __s43: .db "\nAssembly complete.\n", 0
8204   3E80 65 6D 62 6C 
8204   3E84 79 20 63 6F 
8204   3E88 6D 70 6C 65 
8204   3E8C 74 65 2E 0A 
8204   3E90 00 
8205   3E91 50 72 6F 67 __s44: .db "Program size: ", 0
8205   3E95 72 61 6D 20 
8205   3E99 73 69 7A 65 
8205   3E9D 3A 20 00 
8206   3EA0 4C 69 73 74 __s45: .db "Listing: \n", 0
8206   3EA4 69 6E 67 3A 
8206   3EA8 20 0A 00 
8207   3EAB 61 00       __s46: .db "a", 0
8208   3EAD 61 6C 00    __s47: .db "al", 0
8209   3EB0 61 68 00    __s48: .db "ah", 0
8210   3EB3 62 00       __s49: .db "b", 0
8211   3EB5 62 6C 00    __s50: .db "bl", 0
8212   3EB8 62 68 00    __s51: .db "bh", 0
8213   3EBB 63 00       __s52: .db "c", 0
8214   3EBD 63 6C 00    __s53: .db "cl", 0
8215   3EC0 63 68 00    __s54: .db "ch", 0
8216   3EC3 64 00       __s55: .db "d", 0
8217   3EC5 64 6C 00    __s56: .db "dl", 0
8218   3EC8 64 68 00    __s57: .db "dh", 0
8219   3ECB 67 00       __s58: .db "g", 0
8220   3ECD 67 6C 00    __s59: .db "gl", 0
8221   3ED0 67 68 00    __s60: .db "gh", 0
8222   3ED3 70 63 00    __s61: .db "pc", 0
8223   3ED6 73 70 00    __s62: .db "sp", 0
8224   3ED9 62 70 00    __s63: .db "bp", 0
8225   3EDC 73 69 00    __s64: .db "si", 0
8226   3EDF 64 69 00    __s65: .db "di", 0
8227   3EE2 77 6F 72 64 __s66: .db "word", 0
8227   3EE6 00 
8228   3EE7 62 79 74 65 __s67: .db "byte", 0
8228   3EEB 00 
8229   3EEC 63 6D 70 73 __s68: .db "cmpsb", 0
8229   3EF0 62 00 
8230   3EF2 6D 6F 76 73 __s69: .db "movsb", 0
8230   3EF6 62 00 
8231   3EF8 73 74 6F 73 __s70: .db "stosb", 0
8231   3EFC 62 00 
8232   3EFE 64 65 66 69 __s71: .db "define", 0
8232   3F02 6E 65 00 
8233   3F05 4C 61 62 65 __s72: .db "Label does not exist: ", 0
8233   3F09 6C 20 64 6F 
8233   3F0D 65 73 20 6E 
8233   3F11 6F 74 20 65 
8233   3F15 78 69 73 74 
8233   3F19 3A 20 00 
8234   3F1C 43 6C 6F 73 __s73: .db "Closing single quotes expected.", 0
8234   3F20 69 6E 67 20 
8234   3F24 73 69 6E 67 
8234   3F28 6C 65 20 71 
8234   3F2C 75 6F 74 65 
8234   3F30 73 20 65 78 
8234   3F34 70 65 63 74 
8234   3F38 65 64 2E 00 
8235   3F3C 44 6F 75 62 __s74: .db "Double quotes expected", 0
8235   3F40 6C 65 20 71 
8235   3F44 75 6F 74 65 
8235   3F48 73 20 65 78 
8235   3F4C 70 65 63 74 
8235   3F50 65 64 00 
8236   3F53 54 4F 4B 45 __s75: .db "TOKEN ERROR. Prog: ", 0
8236   3F57 4E 20 45 52 
8236   3F5B 52 4F 52 2E 
8236   3F5F 20 50 72 6F 
8236   3F63 67 3A 20 00 
8237   3F67 2C 20 50 72 __s76: .db ", ProgVal: ", 0
8237   3F6B 6F 67 56 61 
8237   3F6F 6C 3A 20 00 
8238   3F73 0A 20 54 65 __s77: .db "\n Text after prog: \n", 0
8238   3F77 78 74 20 61 
8238   3F7B 66 74 65 72 
8238   3F7F 20 70 72 6F 
8238   3F83 67 3A 20 0A 
8238   3F87 00 
8239   3F88 0A 45 72 72 __s78: .db "\nError: ", 0
8239   3F8C 6F 72 3A 20 
8239   3F90 00 
8240   3F91 43 61 6E 6E __s79: .db "Cannot push prog. Stack overflow.", 0
8240   3F95 6F 74 20 70 
8240   3F99 75 73 68 20 
8240   3F9D 70 72 6F 67 
8240   3FA1 2E 20 53 74 
8240   3FA5 61 63 6B 20 
8240   3FA9 6F 76 65 72 
8240   3FAD 66 6C 6F 77 
8240   3FB1 2E 00 
8241   3FB3 43 61 6E 6E __s80: .db "Cannot pop prog. Stack overflow.", 0
8241   3FB7 6F 74 20 70 
8241   3FBB 6F 70 20 70 
8241   3FBF 72 6F 67 2E 
8241   3FC3 20 53 74 61 
8241   3FC7 63 6B 20 6F 
8241   3FCB 76 65 72 66 
8241   3FCF 6C 6F 77 2E 
8241   3FD3 00 
8242   3FD4             
8243   3FD4 D6 3F       _heap_top: .dw _heap
8244   3FD6 00          _heap: .db 0
8245   3FD7             ; --- END DATA BLOCK
8246   3FD7             
8247   3FD7             .end
tasm: Number of errors = 0
