0001   0000             ; --- FILENAME: ../solarium/usr/bin/getparam
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; prog = 0; 
0011   0408 3B A3 24      mov d, _prog ; $prog         
0012   040B 26 00 00      mov b, $0        
0013   040E FD 43         mov [d], b
0014   0410             ;; get(); 
0015   0410 07 80 15      call get
0016   0413             ;; address = atoi(token); 
0017   0413 3B A5 26      mov d, _address ; $address
0018   0416 DA            push d
0019   0417 26 A5 24      mov b, _token_data ; $token           
0020   041A FD AB         swp b
0021   041C D8            push b
0022   041D 07 55 0C      call atoi
0023   0420 51 02 00      add sp, 2
0024   0423 E7            pop d
0025   0424 FD 43         mov [d], b
0026   0426             ;; data = getparam(address); 
0027   0426 3B A7 26      mov d, _data ; $data
0028   0429 DA            push d
0029   042A 29 A5 26      mov b, [_address] ; $address           
0030   042D FD AB         swp b
0031   042F D8            push b
0032   0430 07 2D 10      call getparam
0033   0433 51 02 00      add sp, 2
0034   0436 E7            pop d
0035   0437 FD 3E         mov [d], bl
0036   0439             ;; print("\nParam Value: "); 
0037   0439 26 A8 26      mov b, __s0 ; "\nParam Value: "
0038   043C FD AB         swp b
0039   043E D8            push b
0040   043F 07 72 0F      call print
0041   0442 51 02 00      add sp, 2
0042   0445             ;; printx8(data); 
0043   0445 3B A7 26      mov d, _data ; $data
0044   0448 32            mov bl, [d]
0045   0449 A7 00         mov bh, 0
0046   044B DD            push bl
0047   044C 07 1D 0B      call printx8
0048   044F 51 01 00      add sp, 1
0049   0452             ;; print("\n"); 
0050   0452 26 B7 26      mov b, __s1 ; "\n"
0051   0455 FD AB         swp b
0052   0457 D8            push b
0053   0458 07 72 0F      call print
0054   045B 51 02 00      add sp, 2
0055   045E 05 0B         syscall sys_terminate_proc
0056   0460             
0057   0460             include_ctype_lib:
0058   0460 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0059   0463             
0060   0463             ; --- BEGIN INLINE ASM BLOCK
0061   0463             .include "lib/ctype.asm"
0001+  0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0463             ; ctype.s
0003+  0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0463             
0005+  0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0463             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0463             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0463             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0463             ;; characters are supported.
0010+  0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0463             ;; _isalnum 
0012+  0463             ;; _isalpha 
0013+  0463             ;; islower 
0014+  0463             ;; isupper 
0015+  0463             ;; _isdigit 
0016+  0463             ;; isxdigit
0017+  0463             ;; iscntrl 
0018+  0463             ;; isgraph 
0019+  0463             ;; _isspace 
0020+  0463             ;; isblank 
0021+  0463             ;; isprint 
0022+  0463             ;; ispunct 
0023+  0463             ;; tolower 
0024+  0463             ;; toupper
0025+  0463             
0026+  0463             
0027+  0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0463             ;; IS ALPHANUMERIC
0029+  0463             ;; sets ZF according with result
0030+  0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0463             _isalnum:
0032+  0463 07 80 04    	call _isalpha
0033+  0466 C6 6C 04    	je _isalnum_exit
0034+  0469 07 6D 04    	call _isdigit
0035+  046C             _isalnum_exit:
0036+  046C 09          	ret	
0037+  046D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  046D             ;; IS DIGIT
0039+  046D             ;; sets ZF according with result
0040+  046D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  046D             _isdigit:
0042+  046D DB          	push al
0043+  046E B9 30       	cmp al, '0'
0044+  0470 C8 7C 04    	jlu _isdigit_false
0045+  0473 B9 39       	cmp al, '9'
0046+  0475 D1 7C 04    	jgu _isdigit_false
0047+  0478 87 00       	and al, 0	; set ZF
0048+  047A E8          	pop al
0049+  047B 09          	ret
0050+  047C             _isdigit_false:
0051+  047C 8B 01       	or al, 1	; clear ZF
0052+  047E E8          	pop al
0053+  047F 09          	ret	
0054+  0480             	
0055+  0480             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0480             ;; IS ALPHA
0057+  0480             ;; sets ZF according with result
0058+  0480             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0480             _isalpha:
0060+  0480 DB          	push al
0061+  0481 B9 5F       	cmp al, '_'
0062+  0483 C6 A3 04    	je _isalpha_true
0063+  0486 B9 2E       	cmp al, '.'
0064+  0488 C6 A3 04    	je _isalpha_true
0065+  048B B9 41       	cmp al, 'A'
0066+  048D C8 9F 04    	jlu _isalpha_false
0067+  0490 B9 7A       	cmp al, 'z'
0068+  0492 D1 9F 04    	jgu _isalpha_false
0069+  0495 B9 5A       	cmp al, 'Z'
0070+  0497 D0 A3 04    	jleu _isalpha_true
0071+  049A B9 61       	cmp al, 'a'
0072+  049C C9 A3 04    	jgeu _isalpha_true
0073+  049F             _isalpha_false:
0074+  049F 8B 01       	or al, 1	; clear ZF
0075+  04A1 E8          	pop al
0076+  04A2 09          	ret
0077+  04A3             _isalpha_true:
0078+  04A3 87 00       	and al, 0	; set ZF
0079+  04A5 E8          	pop al
0080+  04A6 09          	ret
0081+  04A7             
0082+  04A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  04A7             ;; IS PATH-ALPHA
0084+  04A7             ;; sets ZF according with result
0085+  04A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  04A7             ispath:
0087+  04A7 DB          	push al
0088+  04A8 07 6D 04    	call _isdigit
0089+  04AB C6 D5 04    	je ispath_true
0090+  04AE B9 5F       	cmp al, '_'
0091+  04B0 C6 D5 04    	je ispath_true
0092+  04B3 B9 2F       	cmp al, '/'
0093+  04B5 C6 D5 04    	je ispath_true
0094+  04B8 B9 2E       	cmp al, '.'
0095+  04BA C6 D5 04    	je ispath_true
0096+  04BD B9 41       	cmp al, 'A'
0097+  04BF C8 D1 04    	jlu ispath_false
0098+  04C2 B9 7A       	cmp al, 'z'
0099+  04C4 D1 D1 04    	jgu ispath_false
0100+  04C7 B9 5A       	cmp al, 'Z'
0101+  04C9 D0 D5 04    	jleu ispath_true
0102+  04CC B9 61       	cmp al, 'a'
0103+  04CE C9 D5 04    	jgeu ispath_true
0104+  04D1             ispath_false:
0105+  04D1 8B 01       	or al, 1	; clear ZF
0106+  04D3 E8          	pop al
0107+  04D4 09          	ret
0108+  04D5             ispath_true:
0109+  04D5 87 00       	and al, 0	; set ZF
0110+  04D7 E8          	pop al
0111+  04D8 09          	ret
0112+  04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  04D9             ;; IS SPACE
0114+  04D9             ;; sets ZF according with result
0115+  04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  04D9             _isspace:
0117+  04D9 B9 20       	cmp al, $20		; ' '
0118+  04DB C6 EF 04    	je _isspace_exit
0119+  04DE B9 09       	cmp al, $09		; '\t'
0120+  04E0 C6 EF 04    	je _isspace_exit
0121+  04E3 B9 0A       	cmp al, $0A		; '\n'
0122+  04E5 C6 EF 04    	je _isspace_exit
0123+  04E8 B9 0D       	cmp al, $0D		; '\r'
0124+  04EA C6 EF 04    	je _isspace_exit
0125+  04ED B9 0B       	cmp al, $0B		; '\v'
0126+  04EF             _isspace_exit:
0127+  04EF 09          	ret	
0128+  04F0             
0129+  04F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  04F0             ; TO LOWER
0131+  04F0             ; input in AL
0132+  04F0             ; output in AL
0133+  04F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  04F0             _to_lower:
0135+  04F0 B9 5A       	cmp al, 'Z'
0136+  04F2 D1 F7 04    	jgu _to_lower_ret
0137+  04F5 6A 20       	add al, $20				; convert to lower case
0138+  04F7             _to_lower_ret:
0139+  04F7 09          	ret
0140+  04F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  04F8             ; TO UPPER
0142+  04F8             ; input in AL
0143+  04F8             ; output in AL
0144+  04F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  04F8             _to_upper:
0146+  04F8 B9 61       	cmp al, 'a'
0147+  04FA C8 FF 04    	jlu _to_upper_ret
0148+  04FD 6F 20       	sub al, $20			; convert to upper case
0149+  04FF             _to_upper_ret:
0150+  04FF 09          	ret
0151+  0500             
0062   0500             ; --- END INLINE ASM BLOCK
0063   0500             
0064   0500 F9            leave
0065   0501 09            ret
0066   0502             
0067   0502             is_space:
0068   0502 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0069   0505             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0070   0505 34 05 00      mov bl, [bp + 5] ; $c
0071   0508 A7 00         mov bh, 0             
0072   050A             ; START RELATIONAL
0073   050A D7            push a
0074   050B 11            mov a, b
0075   050C 26 20 00      mov b, $20
0076   050F B0            cmp a, b
0077   0510 FD 71         seq ; ==
0078   0512 E4            pop a
0079   0513             ; END RELATIONAL
0080   0513 D7            push a
0081   0514 11            mov a, b
0082   0515 34 05 00      mov bl, [bp + 5] ; $c
0083   0518 A7 00         mov bh, 0             
0084   051A             ; START RELATIONAL
0085   051A D7            push a
0086   051B 11            mov a, b
0087   051C 26 09 00      mov b, $9
0088   051F B0            cmp a, b
0089   0520 FD 71         seq ; ==
0090   0522 E4            pop a
0091   0523             ; END RELATIONAL
0092   0523 FD A8         sor a, b ; ||
0093   0525 11            mov a, b
0094   0526 34 05 00      mov bl, [bp + 5] ; $c
0095   0529 A7 00         mov bh, 0             
0096   052B             ; START RELATIONAL
0097   052B D7            push a
0098   052C 11            mov a, b
0099   052D 26 0A 00      mov b, $a
0100   0530 B0            cmp a, b
0101   0531 FD 71         seq ; ==
0102   0533 E4            pop a
0103   0534             ; END RELATIONAL
0104   0534 FD A8         sor a, b ; ||
0105   0536 11            mov a, b
0106   0537 34 05 00      mov bl, [bp + 5] ; $c
0107   053A A7 00         mov bh, 0             
0108   053C             ; START RELATIONAL
0109   053C D7            push a
0110   053D 11            mov a, b
0111   053E 26 0D 00      mov b, $d
0112   0541 B0            cmp a, b
0113   0542 FD 71         seq ; ==
0114   0544 E4            pop a
0115   0545             ; END RELATIONAL
0116   0545 FD A8         sor a, b ; ||
0117   0547 E4            pop a
0118   0548 F9            leave
0119   0549 09            ret
0120   054A             
0121   054A             is_digit:
0122   054A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0123   054D             ;; return c >= '0' && c <= '9'; 
0124   054D 34 05 00      mov bl, [bp + 5] ; $c
0125   0550 A7 00         mov bh, 0             
0126   0552             ; START RELATIONAL
0127   0552 D7            push a
0128   0553 11            mov a, b
0129   0554 26 30 00      mov b, $30
0130   0557 B0            cmp a, b
0131   0558 FD 80         sge ; >=
0132   055A E4            pop a
0133   055B             ; END RELATIONAL
0134   055B D7            push a
0135   055C 11            mov a, b
0136   055D 34 05 00      mov bl, [bp + 5] ; $c
0137   0560 A7 00         mov bh, 0             
0138   0562             ; START RELATIONAL
0139   0562 D7            push a
0140   0563 11            mov a, b
0141   0564 26 39 00      mov b, $39
0142   0567 B0            cmp a, b
0143   0568 FD 74         sle ; <=
0144   056A E4            pop a
0145   056B             ; END RELATIONAL
0146   056B FD A7         sand a, b ; &&
0147   056D E4            pop a
0148   056E F9            leave
0149   056F 09            ret
0150   0570             
0151   0570             is_alpha:
0152   0570 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0153   0573             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
0154   0573 34 05 00      mov bl, [bp + 5] ; $c
0155   0576 A7 00         mov bh, 0             
0156   0578             ; START RELATIONAL
0157   0578 D7            push a
0158   0579 11            mov a, b
0159   057A 26 61 00      mov b, $61
0160   057D B0            cmp a, b
0161   057E FD 80         sge ; >=
0162   0580 E4            pop a
0163   0581             ; END RELATIONAL
0164   0581 D7            push a
0165   0582 11            mov a, b
0166   0583 34 05 00      mov bl, [bp + 5] ; $c
0167   0586 A7 00         mov bh, 0             
0168   0588             ; START RELATIONAL
0169   0588 D7            push a
0170   0589 11            mov a, b
0171   058A 26 7A 00      mov b, $7a
0172   058D B0            cmp a, b
0173   058E FD 74         sle ; <=
0174   0590 E4            pop a
0175   0591             ; END RELATIONAL
0176   0591 FD A7         sand a, b ; &&
0177   0593 E4            pop a
0178   0594 D7            push a
0179   0595 11            mov a, b
0180   0596 34 05 00      mov bl, [bp + 5] ; $c
0181   0599 A7 00         mov bh, 0             
0182   059B             ; START RELATIONAL
0183   059B D7            push a
0184   059C 11            mov a, b
0185   059D 26 41 00      mov b, $41
0186   05A0 B0            cmp a, b
0187   05A1 FD 80         sge ; >=
0188   05A3 E4            pop a
0189   05A4             ; END RELATIONAL
0190   05A4 D7            push a
0191   05A5 11            mov a, b
0192   05A6 34 05 00      mov bl, [bp + 5] ; $c
0193   05A9 A7 00         mov bh, 0             
0194   05AB             ; START RELATIONAL
0195   05AB D7            push a
0196   05AC 11            mov a, b
0197   05AD 26 5A 00      mov b, $5a
0198   05B0 B0            cmp a, b
0199   05B1 FD 74         sle ; <=
0200   05B3 E4            pop a
0201   05B4             ; END RELATIONAL
0202   05B4 FD A7         sand a, b ; &&
0203   05B6 E4            pop a
0204   05B7 FD A8         sor a, b ; ||
0205   05B9 11            mov a, b
0206   05BA 34 05 00      mov bl, [bp + 5] ; $c
0207   05BD A7 00         mov bh, 0             
0208   05BF             ; START RELATIONAL
0209   05BF D7            push a
0210   05C0 11            mov a, b
0211   05C1 26 5F 00      mov b, $5f
0212   05C4 B0            cmp a, b
0213   05C5 FD 71         seq ; ==
0214   05C7 E4            pop a
0215   05C8             ; END RELATIONAL
0216   05C8 FD A8         sor a, b ; ||
0217   05CA E4            pop a
0218   05CB F9            leave
0219   05CC 09            ret
0220   05CD             
0221   05CD             is_delimiter:
0222   05CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0223   05D0             ;; if( 
0224   05D0             _if1_cond:
0225   05D0 34 05 00      mov bl, [bp + 5] ; $c
0226   05D3 A7 00         mov bh, 0             
0227   05D5             ; START RELATIONAL
0228   05D5 D7            push a
0229   05D6 11            mov a, b
0230   05D7 26 40 00      mov b, $40
0231   05DA B0            cmp a, b
0232   05DB FD 71         seq ; ==
0233   05DD E4            pop a
0234   05DE             ; END RELATIONAL
0235   05DE D7            push a
0236   05DF 11            mov a, b
0237   05E0 34 05 00      mov bl, [bp + 5] ; $c
0238   05E3 A7 00         mov bh, 0             
0239   05E5             ; START RELATIONAL
0240   05E5 D7            push a
0241   05E6 11            mov a, b
0242   05E7 26 23 00      mov b, $23
0243   05EA B0            cmp a, b
0244   05EB FD 71         seq ; ==
0245   05ED E4            pop a
0246   05EE             ; END RELATIONAL
0247   05EE FD A8         sor a, b ; ||
0248   05F0 11            mov a, b
0249   05F1 34 05 00      mov bl, [bp + 5] ; $c
0250   05F4 A7 00         mov bh, 0             
0251   05F6             ; START RELATIONAL
0252   05F6 D7            push a
0253   05F7 11            mov a, b
0254   05F8 26 24 00      mov b, $24
0255   05FB B0            cmp a, b
0256   05FC FD 71         seq ; ==
0257   05FE E4            pop a
0258   05FF             ; END RELATIONAL
0259   05FF FD A8         sor a, b ; ||
0260   0601 11            mov a, b
0261   0602 34 05 00      mov bl, [bp + 5] ; $c
0262   0605 A7 00         mov bh, 0             
0263   0607             ; START RELATIONAL
0264   0607 D7            push a
0265   0608 11            mov a, b
0266   0609 26 2B 00      mov b, $2b
0267   060C B0            cmp a, b
0268   060D FD 71         seq ; ==
0269   060F E4            pop a
0270   0610             ; END RELATIONAL
0271   0610 FD A8         sor a, b ; ||
0272   0612 11            mov a, b
0273   0613 34 05 00      mov bl, [bp + 5] ; $c
0274   0616 A7 00         mov bh, 0             
0275   0618             ; START RELATIONAL
0276   0618 D7            push a
0277   0619 11            mov a, b
0278   061A 26 2D 00      mov b, $2d
0279   061D B0            cmp a, b
0280   061E FD 71         seq ; ==
0281   0620 E4            pop a
0282   0621             ; END RELATIONAL
0283   0621 FD A8         sor a, b ; ||
0284   0623 11            mov a, b
0285   0624 34 05 00      mov bl, [bp + 5] ; $c
0286   0627 A7 00         mov bh, 0             
0287   0629             ; START RELATIONAL
0288   0629 D7            push a
0289   062A 11            mov a, b
0290   062B 26 2A 00      mov b, $2a
0291   062E B0            cmp a, b
0292   062F FD 71         seq ; ==
0293   0631 E4            pop a
0294   0632             ; END RELATIONAL
0295   0632 FD A8         sor a, b ; ||
0296   0634 11            mov a, b
0297   0635 34 05 00      mov bl, [bp + 5] ; $c
0298   0638 A7 00         mov bh, 0             
0299   063A             ; START RELATIONAL
0300   063A D7            push a
0301   063B 11            mov a, b
0302   063C 26 2F 00      mov b, $2f
0303   063F B0            cmp a, b
0304   0640 FD 71         seq ; ==
0305   0642 E4            pop a
0306   0643             ; END RELATIONAL
0307   0643 FD A8         sor a, b ; ||
0308   0645 11            mov a, b
0309   0646 34 05 00      mov bl, [bp + 5] ; $c
0310   0649 A7 00         mov bh, 0             
0311   064B             ; START RELATIONAL
0312   064B D7            push a
0313   064C 11            mov a, b
0314   064D 26 25 00      mov b, $25
0315   0650 B0            cmp a, b
0316   0651 FD 71         seq ; ==
0317   0653 E4            pop a
0318   0654             ; END RELATIONAL
0319   0654 FD A8         sor a, b ; ||
0320   0656 11            mov a, b
0321   0657 34 05 00      mov bl, [bp + 5] ; $c
0322   065A A7 00         mov bh, 0             
0323   065C             ; START RELATIONAL
0324   065C D7            push a
0325   065D 11            mov a, b
0326   065E 26 5B 00      mov b, $5b
0327   0661 B0            cmp a, b
0328   0662 FD 71         seq ; ==
0329   0664 E4            pop a
0330   0665             ; END RELATIONAL
0331   0665 FD A8         sor a, b ; ||
0332   0667 11            mov a, b
0333   0668 34 05 00      mov bl, [bp + 5] ; $c
0334   066B A7 00         mov bh, 0             
0335   066D             ; START RELATIONAL
0336   066D D7            push a
0337   066E 11            mov a, b
0338   066F 26 5D 00      mov b, $5d
0339   0672 B0            cmp a, b
0340   0673 FD 71         seq ; ==
0341   0675 E4            pop a
0342   0676             ; END RELATIONAL
0343   0676 FD A8         sor a, b ; ||
0344   0678 11            mov a, b
0345   0679 34 05 00      mov bl, [bp + 5] ; $c
0346   067C A7 00         mov bh, 0             
0347   067E             ; START RELATIONAL
0348   067E D7            push a
0349   067F 11            mov a, b
0350   0680 26 28 00      mov b, $28
0351   0683 B0            cmp a, b
0352   0684 FD 71         seq ; ==
0353   0686 E4            pop a
0354   0687             ; END RELATIONAL
0355   0687 FD A8         sor a, b ; ||
0356   0689 11            mov a, b
0357   068A 34 05 00      mov bl, [bp + 5] ; $c
0358   068D A7 00         mov bh, 0             
0359   068F             ; START RELATIONAL
0360   068F D7            push a
0361   0690 11            mov a, b
0362   0691 26 29 00      mov b, $29
0363   0694 B0            cmp a, b
0364   0695 FD 71         seq ; ==
0365   0697 E4            pop a
0366   0698             ; END RELATIONAL
0367   0698 FD A8         sor a, b ; ||
0368   069A 11            mov a, b
0369   069B 34 05 00      mov bl, [bp + 5] ; $c
0370   069E A7 00         mov bh, 0             
0371   06A0             ; START RELATIONAL
0372   06A0 D7            push a
0373   06A1 11            mov a, b
0374   06A2 26 7B 00      mov b, $7b
0375   06A5 B0            cmp a, b
0376   06A6 FD 71         seq ; ==
0377   06A8 E4            pop a
0378   06A9             ; END RELATIONAL
0379   06A9 FD A8         sor a, b ; ||
0380   06AB 11            mov a, b
0381   06AC 34 05 00      mov bl, [bp + 5] ; $c
0382   06AF A7 00         mov bh, 0             
0383   06B1             ; START RELATIONAL
0384   06B1 D7            push a
0385   06B2 11            mov a, b
0386   06B3 26 7D 00      mov b, $7d
0387   06B6 B0            cmp a, b
0388   06B7 FD 71         seq ; ==
0389   06B9 E4            pop a
0390   06BA             ; END RELATIONAL
0391   06BA FD A8         sor a, b ; ||
0392   06BC 11            mov a, b
0393   06BD 34 05 00      mov bl, [bp + 5] ; $c
0394   06C0 A7 00         mov bh, 0             
0395   06C2             ; START RELATIONAL
0396   06C2 D7            push a
0397   06C3 11            mov a, b
0398   06C4 26 3A 00      mov b, $3a
0399   06C7 B0            cmp a, b
0400   06C8 FD 71         seq ; ==
0401   06CA E4            pop a
0402   06CB             ; END RELATIONAL
0403   06CB FD A8         sor a, b ; ||
0404   06CD 11            mov a, b
0405   06CE 34 05 00      mov bl, [bp + 5] ; $c
0406   06D1 A7 00         mov bh, 0             
0407   06D3             ; START RELATIONAL
0408   06D3 D7            push a
0409   06D4 11            mov a, b
0410   06D5 26 3B 00      mov b, $3b
0411   06D8 B0            cmp a, b
0412   06D9 FD 71         seq ; ==
0413   06DB E4            pop a
0414   06DC             ; END RELATIONAL
0415   06DC FD A8         sor a, b ; ||
0416   06DE 11            mov a, b
0417   06DF 34 05 00      mov bl, [bp + 5] ; $c
0418   06E2 A7 00         mov bh, 0             
0419   06E4             ; START RELATIONAL
0420   06E4 D7            push a
0421   06E5 11            mov a, b
0422   06E6 26 3C 00      mov b, $3c
0423   06E9 B0            cmp a, b
0424   06EA FD 71         seq ; ==
0425   06EC E4            pop a
0426   06ED             ; END RELATIONAL
0427   06ED FD A8         sor a, b ; ||
0428   06EF 11            mov a, b
0429   06F0 34 05 00      mov bl, [bp + 5] ; $c
0430   06F3 A7 00         mov bh, 0             
0431   06F5             ; START RELATIONAL
0432   06F5 D7            push a
0433   06F6 11            mov a, b
0434   06F7 26 3E 00      mov b, $3e
0435   06FA B0            cmp a, b
0436   06FB FD 71         seq ; ==
0437   06FD E4            pop a
0438   06FE             ; END RELATIONAL
0439   06FE FD A8         sor a, b ; ||
0440   0700 11            mov a, b
0441   0701 34 05 00      mov bl, [bp + 5] ; $c
0442   0704 A7 00         mov bh, 0             
0443   0706             ; START RELATIONAL
0444   0706 D7            push a
0445   0707 11            mov a, b
0446   0708 26 3D 00      mov b, $3d
0447   070B B0            cmp a, b
0448   070C FD 71         seq ; ==
0449   070E E4            pop a
0450   070F             ; END RELATIONAL
0451   070F FD A8         sor a, b ; ||
0452   0711 11            mov a, b
0453   0712 34 05 00      mov bl, [bp + 5] ; $c
0454   0715 A7 00         mov bh, 0             
0455   0717             ; START RELATIONAL
0456   0717 D7            push a
0457   0718 11            mov a, b
0458   0719 26 21 00      mov b, $21
0459   071C B0            cmp a, b
0460   071D FD 71         seq ; ==
0461   071F E4            pop a
0462   0720             ; END RELATIONAL
0463   0720 FD A8         sor a, b ; ||
0464   0722 11            mov a, b
0465   0723 34 05 00      mov bl, [bp + 5] ; $c
0466   0726 A7 00         mov bh, 0             
0467   0728             ; START RELATIONAL
0468   0728 D7            push a
0469   0729 11            mov a, b
0470   072A 26 5E 00      mov b, $5e
0471   072D B0            cmp a, b
0472   072E FD 71         seq ; ==
0473   0730 E4            pop a
0474   0731             ; END RELATIONAL
0475   0731 FD A8         sor a, b ; ||
0476   0733 11            mov a, b
0477   0734 34 05 00      mov bl, [bp + 5] ; $c
0478   0737 A7 00         mov bh, 0             
0479   0739             ; START RELATIONAL
0480   0739 D7            push a
0481   073A 11            mov a, b
0482   073B 26 26 00      mov b, $26
0483   073E B0            cmp a, b
0484   073F FD 71         seq ; ==
0485   0741 E4            pop a
0486   0742             ; END RELATIONAL
0487   0742 FD A8         sor a, b ; ||
0488   0744 11            mov a, b
0489   0745 34 05 00      mov bl, [bp + 5] ; $c
0490   0748 A7 00         mov bh, 0             
0491   074A             ; START RELATIONAL
0492   074A D7            push a
0493   074B 11            mov a, b
0494   074C 26 7C 00      mov b, $7c
0495   074F B0            cmp a, b
0496   0750 FD 71         seq ; ==
0497   0752 E4            pop a
0498   0753             ; END RELATIONAL
0499   0753 FD A8         sor a, b ; ||
0500   0755 11            mov a, b
0501   0756 34 05 00      mov bl, [bp + 5] ; $c
0502   0759 A7 00         mov bh, 0             
0503   075B             ; START RELATIONAL
0504   075B D7            push a
0505   075C 11            mov a, b
0506   075D 26 7E 00      mov b, $7e
0507   0760 B0            cmp a, b
0508   0761 FD 71         seq ; ==
0509   0763 E4            pop a
0510   0764             ; END RELATIONAL
0511   0764 FD A8         sor a, b ; ||
0512   0766 11            mov a, b
0513   0767 34 05 00      mov bl, [bp + 5] ; $c
0514   076A A7 00         mov bh, 0             
0515   076C             ; START RELATIONAL
0516   076C D7            push a
0517   076D 11            mov a, b
0518   076E 26 2E 00      mov b, $2e
0519   0771 B0            cmp a, b
0520   0772 FD 71         seq ; ==
0521   0774 E4            pop a
0522   0775             ; END RELATIONAL
0523   0775 FD A8         sor a, b ; ||
0524   0777 E4            pop a
0525   0778 C0 00 00      cmp b, 0
0526   077B C6 86 07      je _if1_else
0527   077E             _if1_true:
0528   077E             ;; return 1; 
0529   077E 26 01 00      mov b, $1
0530   0781 F9            leave
0531   0782 09            ret
0532   0783 0A 8B 07      jmp _if1_exit
0533   0786             _if1_else:
0534   0786             ;; return 0; 
0535   0786 26 00 00      mov b, $0
0536   0789 F9            leave
0537   078A 09            ret
0538   078B             _if1_exit:
0539   078B F9            leave
0540   078C 09            ret
0541   078D             
0542   078D             strcpy:
0543   078D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0544   0790             ; $psrc 
0545   0790             ; $pdest 
0546   0790 52 04 00      sub sp, 4
0547   0793             ;; psrc = src; 
0548   0793 FA FF FF      lea d, [bp + -1] ; $psrc         
0549   0796 2C 05 00      mov b, [bp + 5] ; $src                     
0550   0799 FD 43         mov [d], b
0551   079B             ;; pdest = dest; 
0552   079B FA FD FF      lea d, [bp + -3] ; $pdest         
0553   079E 2C 07 00      mov b, [bp + 7] ; $dest                     
0554   07A1 FD 43         mov [d], b
0555   07A3             ;; while(*psrc) *pdest++ = *psrc++; 
0556   07A3             _while2_cond:
0557   07A3 2C FF FF      mov b, [bp + -1] ; $psrc             
0558   07A6 74            mov d, b
0559   07A7 32            mov bl, [d]
0560   07A8 A7 00         mov bh, 0
0561   07AA C0 00 00      cmp b, 0
0562   07AD C6 D7 07      je _while2_exit
0563   07B0             _while2_block:
0564   07B0             ;; *pdest++ = *psrc++; 
0565   07B0 2C FD FF      mov b, [bp + -3] ; $pdest             
0566   07B3 FD 79         mov g, b
0567   07B5 FD 77         inc b
0568   07B7 FA FD FF      lea d, [bp + -3] ; $pdest
0569   07BA FD 43         mov [d], b
0570   07BC FD 27         mov b, g
0571   07BE D8            push b
0572   07BF 2C FF FF      mov b, [bp + -1] ; $psrc             
0573   07C2 FD 79         mov g, b
0574   07C4 FD 77         inc b
0575   07C6 FA FF FF      lea d, [bp + -1] ; $psrc
0576   07C9 FD 43         mov [d], b
0577   07CB FD 27         mov b, g
0578   07CD 74            mov d, b
0579   07CE 32            mov bl, [d]
0580   07CF A7 00         mov bh, 0
0581   07D1 E7            pop d
0582   07D2 FD 3E         mov [d], bl
0583   07D4 0A A3 07      jmp _while2_cond
0584   07D7             _while2_exit:
0585   07D7             ;; *pdest = '\0'; 
0586   07D7 2C FD FF      mov b, [bp + -3] ; $pdest             
0587   07DA D8            push b
0588   07DB 26 00 00      mov b, $0
0589   07DE E7            pop d
0590   07DF FD 3E         mov [d], bl
0591   07E1 F9            leave
0592   07E2 09            ret
0593   07E3             
0594   07E3             strcmp:
0595   07E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0596   07E6             ;; while (*s1 && (*s1 == *s2)) { 
0597   07E6             _while3_cond:
0598   07E6 2C 07 00      mov b, [bp + 7] ; $s1             
0599   07E9 74            mov d, b
0600   07EA 32            mov bl, [d]
0601   07EB A7 00         mov bh, 0
0602   07ED D7            push a
0603   07EE 11            mov a, b
0604   07EF 2C 07 00      mov b, [bp + 7] ; $s1             
0605   07F2 74            mov d, b
0606   07F3 32            mov bl, [d]
0607   07F4 A7 00         mov bh, 0
0608   07F6             ; START RELATIONAL
0609   07F6 D7            push a
0610   07F7 11            mov a, b
0611   07F8 2C 05 00      mov b, [bp + 5] ; $s2             
0612   07FB 74            mov d, b
0613   07FC 32            mov bl, [d]
0614   07FD A7 00         mov bh, 0
0615   07FF B0            cmp a, b
0616   0800 FD 71         seq ; ==
0617   0802 E4            pop a
0618   0803             ; END RELATIONAL
0619   0803 FD A7         sand a, b ; &&
0620   0805 E4            pop a
0621   0806 C0 00 00      cmp b, 0
0622   0809 C6 2B 08      je _while3_exit
0623   080C             _while3_block:
0624   080C             ;; s1++; 
0625   080C 2C 07 00      mov b, [bp + 7] ; $s1             
0626   080F FD 79         mov g, b
0627   0811 FD 77         inc b
0628   0813 FA 07 00      lea d, [bp + 7] ; $s1
0629   0816 FD 43         mov [d], b
0630   0818 FD 27         mov b, g
0631   081A             ;; s2++; 
0632   081A 2C 05 00      mov b, [bp + 5] ; $s2             
0633   081D FD 79         mov g, b
0634   081F FD 77         inc b
0635   0821 FA 05 00      lea d, [bp + 5] ; $s2
0636   0824 FD 43         mov [d], b
0637   0826 FD 27         mov b, g
0638   0828 0A E6 07      jmp _while3_cond
0639   082B             _while3_exit:
0640   082B             ;; return *s1 - *s2; 
0641   082B 2C 07 00      mov b, [bp + 7] ; $s1             
0642   082E 74            mov d, b
0643   082F 32            mov bl, [d]
0644   0830 A7 00         mov bh, 0
0645   0832             ; START TERMS
0646   0832 D7            push a
0647   0833 11            mov a, b
0648   0834 2C 05 00      mov b, [bp + 5] ; $s2             
0649   0837 74            mov d, b
0650   0838 32            mov bl, [d]
0651   0839 A7 00         mov bh, 0
0652   083B 60            sub a, b
0653   083C 27            mov b, a
0654   083D E4            pop a
0655   083E             ; END TERMS
0656   083E F9            leave
0657   083F 09            ret
0658   0840             
0659   0840             strcat:
0660   0840 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0661   0843             ; $dest_len 
0662   0843             ; $i 
0663   0843 52 04 00      sub sp, 4
0664   0846             ;; dest_len = strlen(dest); 
0665   0846 FA FF FF      lea d, [bp + -1] ; $dest_len
0666   0849 DA            push d
0667   084A 2C 07 00      mov b, [bp + 7] ; $dest             
0668   084D FD AB         swp b
0669   084F D8            push b
0670   0850 07 DF 08      call strlen
0671   0853 51 02 00      add sp, 2
0672   0856 E7            pop d
0673   0857 FD 43         mov [d], b
0674   0859             ;; for (i = 0; src[i] != 0; i=i+1) { 
0675   0859             _for4_init:
0676   0859 FA FD FF      lea d, [bp + -3] ; $i         
0677   085C 26 00 00      mov b, $0        
0678   085F FD 43         mov [d], b
0679   0861             _for4_cond:
0680   0861 FA 05 00      lea d, [bp + 5] ; $src
0681   0864 FD 2A         mov d, [d]
0682   0866 D7            push a         
0683   0867 2C FD FF      mov b, [bp + -3] ; $i                     
0684   086A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0685   086E E4            pop a
0686   086F 32            mov bl, [d]
0687   0870 A7 00         mov bh, 0
0688   0872             ; START RELATIONAL
0689   0872 D7            push a
0690   0873 11            mov a, b
0691   0874 26 00 00      mov b, $0
0692   0877 B0            cmp a, b
0693   0878 FD 72         sneq ; !=
0694   087A E4            pop a
0695   087B             ; END RELATIONAL
0696   087B C0 00 00      cmp b, 0
0697   087E C6 BF 08      je _for4_exit
0698   0881             _for4_block:
0699   0881             ;; dest[dest_len + i] = src[i]; 
0700   0881 FA 07 00      lea d, [bp + 7] ; $dest
0701   0884 FD 2A         mov d, [d]
0702   0886 D7            push a         
0703   0887 2C FF FF      mov b, [bp + -1] ; $dest_len             
0704   088A             ; START TERMS
0705   088A D7            push a
0706   088B 11            mov a, b
0707   088C 2C FD FF      mov b, [bp + -3] ; $i             
0708   088F 54            add a, b
0709   0890 27            mov b, a
0710   0891 E4            pop a
0711   0892             ; END TERMS        
0712   0892 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0713   0896 E4            pop a
0714   0897 DA            push d
0715   0898 FA 05 00      lea d, [bp + 5] ; $src
0716   089B FD 2A         mov d, [d]
0717   089D D7            push a         
0718   089E 2C FD FF      mov b, [bp + -3] ; $i                     
0719   08A1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0720   08A5 E4            pop a
0721   08A6 32            mov bl, [d]
0722   08A7 A7 00         mov bh, 0
0723   08A9 E7            pop d
0724   08AA FD 3E         mov [d], bl
0725   08AC             _for4_update:
0726   08AC FA FD FF      lea d, [bp + -3] ; $i         
0727   08AF 2C FD FF      mov b, [bp + -3] ; $i             
0728   08B2             ; START TERMS
0729   08B2 D7            push a
0730   08B3 11            mov a, b
0731   08B4 26 01 00      mov b, $1
0732   08B7 54            add a, b
0733   08B8 27            mov b, a
0734   08B9 E4            pop a
0735   08BA             ; END TERMS        
0736   08BA FD 43         mov [d], b
0737   08BC 0A 61 08      jmp _for4_cond
0738   08BF             _for4_exit:
0739   08BF             ;; dest[dest_len + i] = 0; 
0740   08BF FA 07 00      lea d, [bp + 7] ; $dest
0741   08C2 FD 2A         mov d, [d]
0742   08C4 D7            push a         
0743   08C5 2C FF FF      mov b, [bp + -1] ; $dest_len             
0744   08C8             ; START TERMS
0745   08C8 D7            push a
0746   08C9 11            mov a, b
0747   08CA 2C FD FF      mov b, [bp + -3] ; $i             
0748   08CD 54            add a, b
0749   08CE 27            mov b, a
0750   08CF E4            pop a
0751   08D0             ; END TERMS        
0752   08D0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0753   08D4 E4            pop a         
0754   08D5 26 00 00      mov b, $0        
0755   08D8 FD 3E         mov [d], bl
0756   08DA             ;; return dest; 
0757   08DA 2C 07 00      mov b, [bp + 7] ; $dest             
0758   08DD F9            leave
0759   08DE 09            ret
0760   08DF             
0761   08DF             strlen:
0762   08DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0763   08E2             ; $length 
0764   08E2 52 02 00      sub sp, 2
0765   08E5             ;; length = 0; 
0766   08E5 FA FF FF      lea d, [bp + -1] ; $length         
0767   08E8 26 00 00      mov b, $0        
0768   08EB FD 43         mov [d], b
0769   08ED             ;; while (str[length] != 0) { 
0770   08ED             _while5_cond:
0771   08ED FA 05 00      lea d, [bp + 5] ; $str
0772   08F0 FD 2A         mov d, [d]
0773   08F2 D7            push a         
0774   08F3 2C FF FF      mov b, [bp + -1] ; $length                     
0775   08F6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0776   08FA E4            pop a
0777   08FB 32            mov bl, [d]
0778   08FC A7 00         mov bh, 0
0779   08FE             ; START RELATIONAL
0780   08FE D7            push a
0781   08FF 11            mov a, b
0782   0900 26 00 00      mov b, $0
0783   0903 B0            cmp a, b
0784   0904 FD 72         sneq ; !=
0785   0906 E4            pop a
0786   0907             ; END RELATIONAL
0787   0907 C0 00 00      cmp b, 0
0788   090A C6 1E 09      je _while5_exit
0789   090D             _while5_block:
0790   090D             ;; length++; 
0791   090D 2C FF FF      mov b, [bp + -1] ; $length             
0792   0910 FD 79         mov g, b
0793   0912 FD 77         inc b
0794   0914 FA FF FF      lea d, [bp + -1] ; $length
0795   0917 FD 43         mov [d], b
0796   0919 FD 27         mov b, g
0797   091B 0A ED 08      jmp _while5_cond
0798   091E             _while5_exit:
0799   091E             ;; return length; 
0800   091E 2C FF FF      mov b, [bp + -1] ; $length             
0801   0921 F9            leave
0802   0922 09            ret
0803   0923             
0804   0923             va_arg:
0805   0923 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0806   0926             ; $val 
0807   0926 52 02 00      sub sp, 2
0808   0929             ;; if(size == 1){ 
0809   0929             _if6_cond:
0810   0929 2C 05 00      mov b, [bp + 5] ; $size             
0811   092C             ; START RELATIONAL
0812   092C D7            push a
0813   092D 11            mov a, b
0814   092E 26 01 00      mov b, $1
0815   0931 B0            cmp a, b
0816   0932 FD 71         seq ; ==
0817   0934 E4            pop a
0818   0935             ; END RELATIONAL
0819   0935 C0 00 00      cmp b, 0
0820   0938 C6 54 09      je _if6_else
0821   093B             _if6_true:
0822   093B             ;; val = *(char*)arg->p; 
0823   093B FA FF FF      lea d, [bp + -1] ; $val
0824   093E DA            push d
0825   093F FA 07 00      lea d, [bp + 7] ; $arg
0826   0942 FD 2A         mov d, [d]
0827   0944 58 00 00      add d, 0
0828   0947 FD 14         clb
0829   0949 2A            mov b, [d]
0830   094A 74            mov d, b
0831   094B 32            mov bl, [d]
0832   094C A7 00         mov bh, 0
0833   094E E7            pop d
0834   094F FD 43         mov [d], b
0835   0951 0A 89 09      jmp _if6_exit
0836   0954             _if6_else:
0837   0954             ;; if(size == 2){ 
0838   0954             _if7_cond:
0839   0954 2C 05 00      mov b, [bp + 5] ; $size             
0840   0957             ; START RELATIONAL
0841   0957 D7            push a
0842   0958 11            mov a, b
0843   0959 26 02 00      mov b, $2
0844   095C B0            cmp a, b
0845   095D FD 71         seq ; ==
0846   095F E4            pop a
0847   0960             ; END RELATIONAL
0848   0960 C0 00 00      cmp b, 0
0849   0963 C6 7D 09      je _if7_else
0850   0966             _if7_true:
0851   0966             ;; val = *(int*)arg->p; 
0852   0966 FA FF FF      lea d, [bp + -1] ; $val
0853   0969 DA            push d
0854   096A FA 07 00      lea d, [bp + 7] ; $arg
0855   096D FD 2A         mov d, [d]
0856   096F 58 00 00      add d, 0
0857   0972 FD 14         clb
0858   0974 2A            mov b, [d]
0859   0975 74            mov d, b
0860   0976 2A            mov b, [d]
0861   0977 E7            pop d
0862   0978 FD 43         mov [d], b
0863   097A 0A 89 09      jmp _if7_exit
0864   097D             _if7_else:
0865   097D             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0866   097D 26 B9 26      mov b, __s2 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0867   0980 FD AB         swp b
0868   0982 D8            push b
0869   0983 07 72 0F      call print
0870   0986 51 02 00      add sp, 2
0871   0989             _if7_exit:
0872   0989             _if6_exit:
0873   0989             ;; arg->p = arg->p + size; 
0874   0989 FA 07 00      lea d, [bp + 7] ; $arg
0875   098C FD 2A         mov d, [d]
0876   098E 58 00 00      add d, 0
0877   0991 FD 14         clb
0878   0993 DA            push d
0879   0994 FA 07 00      lea d, [bp + 7] ; $arg
0880   0997 FD 2A         mov d, [d]
0881   0999 58 00 00      add d, 0
0882   099C FD 14         clb
0883   099E 2A            mov b, [d]
0884   099F             ; START TERMS
0885   099F D7            push a
0886   09A0 11            mov a, b
0887   09A1 2C 05 00      mov b, [bp + 5] ; $size             
0888   09A4 54            add a, b
0889   09A5 27            mov b, a
0890   09A6 E4            pop a
0891   09A7             ; END TERMS
0892   09A7 E7            pop d
0893   09A8 FD 43         mov [d], b
0894   09AA             ;; return val; 
0895   09AA 2C FF FF      mov b, [bp + -1] ; $val             
0896   09AD F9            leave
0897   09AE 09            ret
0898   09AF             
0899   09AF             printf:
0900   09AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0901   09B2             ; $p 
0902   09B2             ; $fp 
0903   09B2             ; $i 
0904   09B2 52 06 00      sub sp, 6
0905   09B5             ;; fp = format; 
0906   09B5 FA FD FF      lea d, [bp + -3] ; $fp         
0907   09B8 2C 05 00      mov b, [bp + 5] ; $format                     
0908   09BB FD 43         mov [d], b
0909   09BD             ;; p = &format; 
0910   09BD FA FF FF      lea d, [bp + -1] ; $p
0911   09C0 DA            push d
0912   09C1 FA 05 00      lea d, [bp + 5] ; $format
0913   09C4 2D            mov b, d
0914   09C5 E7            pop d
0915   09C6 FD 43         mov [d], b
0916   09C8             ;; for(;;){ 
0917   09C8             _for8_init:
0918   09C8             _for8_cond:
0919   09C8             _for8_block:
0920   09C8             ;; if(!*fp) break; 
0921   09C8             _if9_cond:
0922   09C8 2C FD FF      mov b, [bp + -3] ; $fp             
0923   09CB 74            mov d, b
0924   09CC 32            mov bl, [d]
0925   09CD A7 00         mov bh, 0
0926   09CF C0 00 00      cmp b, 0
0927   09D2 FD 71         seq ; !
0928   09D4 C0 00 00      cmp b, 0
0929   09D7 C6 E0 09      je _if9_exit
0930   09DA             _if9_true:
0931   09DA             ;; break; 
0932   09DA 0A 10 0B      jmp _for8_exit ; for break
0933   09DD 0A E0 09      jmp _if9_exit
0934   09E0             _if9_exit:
0935   09E0             ;; if(*fp == '%'){ 
0936   09E0             _if10_cond:
0937   09E0 2C FD FF      mov b, [bp + -3] ; $fp             
0938   09E3 74            mov d, b
0939   09E4 32            mov bl, [d]
0940   09E5 A7 00         mov bh, 0
0941   09E7             ; START RELATIONAL
0942   09E7 D7            push a
0943   09E8 11            mov a, b
0944   09E9 26 25 00      mov b, $25
0945   09EC B0            cmp a, b
0946   09ED FD 71         seq ; ==
0947   09EF E4            pop a
0948   09F0             ; END RELATIONAL
0949   09F0 C0 00 00      cmp b, 0
0950   09F3 C6 F1 0A      je _if10_else
0951   09F6             _if10_true:
0952   09F6             ;; fp++; 
0953   09F6 2C FD FF      mov b, [bp + -3] ; $fp             
0954   09F9 FD 79         mov g, b
0955   09FB FD 77         inc b
0956   09FD FA FD FF      lea d, [bp + -3] ; $fp
0957   0A00 FD 43         mov [d], b
0958   0A02 FD 27         mov b, g
0959   0A04             ;; switch(*fp){ 
0960   0A04             _switch11_expr:
0961   0A04 2C FD FF      mov b, [bp + -3] ; $fp             
0962   0A07 74            mov d, b
0963   0A08 32            mov bl, [d]
0964   0A09 A7 00         mov bh, 0
0965   0A0B             _switch11_comparisons:
0966   0A0B C1 64         cmp bl, $64
0967   0A0D C6 2F 0A      je _switch11_case0
0968   0A10 C1 69         cmp bl, $69
0969   0A12 C6 2F 0A      je _switch11_case1
0970   0A15 C1 75         cmp bl, $75
0971   0A17 C6 50 0A      je _switch11_case2
0972   0A1A C1 78         cmp bl, $78
0973   0A1C C6 71 0A      je _switch11_case3
0974   0A1F C1 63         cmp bl, $63
0975   0A21 C6 92 0A      je _switch11_case4
0976   0A24 C1 73         cmp bl, $73
0977   0A26 C6 B3 0A      je _switch11_case5
0978   0A29 0A D4 0A      jmp _switch11_default
0979   0A2C 0A E0 0A      jmp _switch11_exit
0980   0A2F             _switch11_case0:
0981   0A2F             _switch11_case1:
0982   0A2F             ;; p = p - 2; 
0983   0A2F FA FF FF      lea d, [bp + -1] ; $p         
0984   0A32 2C FF FF      mov b, [bp + -1] ; $p             
0985   0A35             ; START TERMS
0986   0A35 D7            push a
0987   0A36 11            mov a, b
0988   0A37 26 02 00      mov b, $2
0989   0A3A 60            sub a, b
0990   0A3B 27            mov b, a
0991   0A3C E4            pop a
0992   0A3D             ; END TERMS        
0993   0A3D FD 43         mov [d], b
0994   0A3F             ;; prints(*(int*)p); 
0995   0A3F 2C FF FF      mov b, [bp + -1] ; $p             
0996   0A42 74            mov d, b
0997   0A43 2A            mov b, [d]
0998   0A44 FD AB         swp b
0999   0A46 D8            push b
1000   0A47 07 76 0D      call prints
1001   0A4A 51 02 00      add sp, 2
1002   0A4D             ;; break; 
1003   0A4D 0A E0 0A      jmp _switch11_exit ; case break
1004   0A50             _switch11_case2:
1005   0A50             ;; p = p - 2; 
1006   0A50 FA FF FF      lea d, [bp + -1] ; $p         
1007   0A53 2C FF FF      mov b, [bp + -1] ; $p             
1008   0A56             ; START TERMS
1009   0A56 D7            push a
1010   0A57 11            mov a, b
1011   0A58 26 02 00      mov b, $2
1012   0A5B 60            sub a, b
1013   0A5C 27            mov b, a
1014   0A5D E4            pop a
1015   0A5E             ; END TERMS        
1016   0A5E FD 43         mov [d], b
1017   0A60             ;; printu(*(unsigned int*)p); 
1018   0A60 2C FF FF      mov b, [bp + -1] ; $p             
1019   0A63 74            mov d, b
1020   0A64 2A            mov b, [d]
1021   0A65 FD AB         swp b
1022   0A67 D8            push b
1023   0A68 07 56 0E      call printu
1024   0A6B 51 02 00      add sp, 2
1025   0A6E             ;; break; 
1026   0A6E 0A E0 0A      jmp _switch11_exit ; case break
1027   0A71             _switch11_case3:
1028   0A71             ;; p = p - 2; 
1029   0A71 FA FF FF      lea d, [bp + -1] ; $p         
1030   0A74 2C FF FF      mov b, [bp + -1] ; $p             
1031   0A77             ; START TERMS
1032   0A77 D7            push a
1033   0A78 11            mov a, b
1034   0A79 26 02 00      mov b, $2
1035   0A7C 60            sub a, b
1036   0A7D 27            mov b, a
1037   0A7E E4            pop a
1038   0A7F             ; END TERMS        
1039   0A7F FD 43         mov [d], b
1040   0A81             ;; printx16(*(unsigned int*)p); 
1041   0A81 2C FF FF      mov b, [bp + -1] ; $p             
1042   0A84 74            mov d, b
1043   0A85 2A            mov b, [d]
1044   0A86 FD AB         swp b
1045   0A88 D8            push b
1046   0A89 07 12 0B      call printx16
1047   0A8C 51 02 00      add sp, 2
1048   0A8F             ;; break; 
1049   0A8F 0A E0 0A      jmp _switch11_exit ; case break
1050   0A92             _switch11_case4:
1051   0A92             ;; p = p - 2; 
1052   0A92 FA FF FF      lea d, [bp + -1] ; $p         
1053   0A95 2C FF FF      mov b, [bp + -1] ; $p             
1054   0A98             ; START TERMS
1055   0A98 D7            push a
1056   0A99 11            mov a, b
1057   0A9A 26 02 00      mov b, $2
1058   0A9D 60            sub a, b
1059   0A9E 27            mov b, a
1060   0A9F E4            pop a
1061   0AA0             ; END TERMS        
1062   0AA0 FD 43         mov [d], b
1063   0AA2             ;; putchar(*(char*)p); 
1064   0AA2 2C FF FF      mov b, [bp + -1] ; $p             
1065   0AA5 74            mov d, b
1066   0AA6 32            mov bl, [d]
1067   0AA7 A7 00         mov bh, 0
1068   0AA9 DD            push bl
1069   0AAA 07 2D 0F      call putchar
1070   0AAD 51 01 00      add sp, 1
1071   0AB0             ;; break; 
1072   0AB0 0A E0 0A      jmp _switch11_exit ; case break
1073   0AB3             _switch11_case5:
1074   0AB3             ;; p = p - 2; 
1075   0AB3 FA FF FF      lea d, [bp + -1] ; $p         
1076   0AB6 2C FF FF      mov b, [bp + -1] ; $p             
1077   0AB9             ; START TERMS
1078   0AB9 D7            push a
1079   0ABA 11            mov a, b
1080   0ABB 26 02 00      mov b, $2
1081   0ABE 60            sub a, b
1082   0ABF 27            mov b, a
1083   0AC0 E4            pop a
1084   0AC1             ; END TERMS        
1085   0AC1 FD 43         mov [d], b
1086   0AC3             ;; print(*(char**)p); 
1087   0AC3 2C FF FF      mov b, [bp + -1] ; $p             
1088   0AC6 74            mov d, b
1089   0AC7 2A            mov b, [d]
1090   0AC8 FD AB         swp b
1091   0ACA D8            push b
1092   0ACB 07 72 0F      call print
1093   0ACE 51 02 00      add sp, 2
1094   0AD1             ;; break; 
1095   0AD1 0A E0 0A      jmp _switch11_exit ; case break
1096   0AD4             _switch11_default:
1097   0AD4             ;; print("Error: Unknown argument type.\n"); 
1098   0AD4 26 FD 26      mov b, __s3 ; "Error: Unknown argument type.\n"
1099   0AD7 FD AB         swp b
1100   0AD9 D8            push b
1101   0ADA 07 72 0F      call print
1102   0ADD 51 02 00      add sp, 2
1103   0AE0             _switch11_exit:
1104   0AE0             ;; fp++; 
1105   0AE0 2C FD FF      mov b, [bp + -3] ; $fp             
1106   0AE3 FD 79         mov g, b
1107   0AE5 FD 77         inc b
1108   0AE7 FA FD FF      lea d, [bp + -3] ; $fp
1109   0AEA FD 43         mov [d], b
1110   0AEC FD 27         mov b, g
1111   0AEE 0A 0D 0B      jmp _if10_exit
1112   0AF1             _if10_else:
1113   0AF1             ;; putchar(*fp); 
1114   0AF1 2C FD FF      mov b, [bp + -3] ; $fp             
1115   0AF4 74            mov d, b
1116   0AF5 32            mov bl, [d]
1117   0AF6 A7 00         mov bh, 0
1118   0AF8 DD            push bl
1119   0AF9 07 2D 0F      call putchar
1120   0AFC 51 01 00      add sp, 1
1121   0AFF             ;; fp++; 
1122   0AFF 2C FD FF      mov b, [bp + -3] ; $fp             
1123   0B02 FD 79         mov g, b
1124   0B04 FD 77         inc b
1125   0B06 FA FD FF      lea d, [bp + -3] ; $fp
1126   0B09 FD 43         mov [d], b
1127   0B0B FD 27         mov b, g
1128   0B0D             _if10_exit:
1129   0B0D             _for8_update:
1130   0B0D 0A C8 09      jmp _for8_cond
1131   0B10             _for8_exit:
1132   0B10 F9            leave
1133   0B11 09            ret
1134   0B12             
1135   0B12             printx16:
1136   0B12 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1137   0B15             
1138   0B15             ; --- BEGIN INLINE ASM BLOCK
1139   0B15 2C 05 00      mov b, [bp + 5] ; $hex             
1140   0B18 07 D5 12      call print_u16x
1141   0B1B             ; --- END INLINE ASM BLOCK
1142   0B1B             
1143   0B1B F9            leave
1144   0B1C 09            ret
1145   0B1D             
1146   0B1D             printx8:
1147   0B1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1148   0B20             
1149   0B20             ; --- BEGIN INLINE ASM BLOCK
1150   0B20 FA 05 00      lea d, [bp + 5] ; $hex
1151   0B23 32            mov bl, [d]
1152   0B24 07 19 13      call print_u8x
1153   0B27             ; --- END INLINE ASM BLOCK
1154   0B27             
1155   0B27 F9            leave
1156   0B28 09            ret
1157   0B29             
1158   0B29             hex_to_int:
1159   0B29 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1160   0B2C             ; $value 
1161   0B2C 10 00 00      mov a, $0
1162   0B2F 45 FF FF      mov [bp + -1], a
1163   0B32             ; $i 
1164   0B32             ; $hex_char 
1165   0B32             ; $len 
1166   0B32 52 07 00      sub sp, 7
1167   0B35             ;; len = strlen(hex_string); 
1168   0B35 FA FA FF      lea d, [bp + -6] ; $len
1169   0B38 DA            push d
1170   0B39 2C 05 00      mov b, [bp + 5] ; $hex_string             
1171   0B3C FD AB         swp b
1172   0B3E D8            push b
1173   0B3F 07 DF 08      call strlen
1174   0B42 51 02 00      add sp, 2
1175   0B45 E7            pop d
1176   0B46 FD 43         mov [d], b
1177   0B48             ;; for (i = 0; i < len; i++) { 
1178   0B48             _for12_init:
1179   0B48 FA FD FF      lea d, [bp + -3] ; $i         
1180   0B4B 26 00 00      mov b, $0        
1181   0B4E FD 43         mov [d], b
1182   0B50             _for12_cond:
1183   0B50 2C FD FF      mov b, [bp + -3] ; $i             
1184   0B53             ; START RELATIONAL
1185   0B53 D7            push a
1186   0B54 11            mov a, b
1187   0B55 2C FA FF      mov b, [bp + -6] ; $len             
1188   0B58 B0            cmp a, b
1189   0B59 FD 73         slt ; < 
1190   0B5B E4            pop a
1191   0B5C             ; END RELATIONAL
1192   0B5C C0 00 00      cmp b, 0
1193   0B5F C6 50 0C      je _for12_exit
1194   0B62             _for12_block:
1195   0B62             ;; hex_char = hex_string[i]; 
1196   0B62 FA FC FF      lea d, [bp + -4] ; $hex_char
1197   0B65 DA            push d
1198   0B66 FA 05 00      lea d, [bp + 5] ; $hex_string
1199   0B69 FD 2A         mov d, [d]
1200   0B6B D7            push a         
1201   0B6C 2C FD FF      mov b, [bp + -3] ; $i                     
1202   0B6F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1203   0B73 E4            pop a
1204   0B74 32            mov bl, [d]
1205   0B75 A7 00         mov bh, 0
1206   0B77 E7            pop d
1207   0B78 FD 3E         mov [d], bl
1208   0B7A             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1209   0B7A             _if13_cond:
1210   0B7A 34 FC FF      mov bl, [bp + -4] ; $hex_char
1211   0B7D A7 00         mov bh, 0             
1212   0B7F             ; START RELATIONAL
1213   0B7F D7            push a
1214   0B80 11            mov a, b
1215   0B81 26 61 00      mov b, $61
1216   0B84 B0            cmp a, b
1217   0B85 FD 80         sge ; >=
1218   0B87 E4            pop a
1219   0B88             ; END RELATIONAL
1220   0B88 D7            push a
1221   0B89 11            mov a, b
1222   0B8A 34 FC FF      mov bl, [bp + -4] ; $hex_char
1223   0B8D A7 00         mov bh, 0             
1224   0B8F             ; START RELATIONAL
1225   0B8F D7            push a
1226   0B90 11            mov a, b
1227   0B91 26 66 00      mov b, $66
1228   0B94 B0            cmp a, b
1229   0B95 FD 74         sle ; <=
1230   0B97 E4            pop a
1231   0B98             ; END RELATIONAL
1232   0B98 FD A7         sand a, b ; &&
1233   0B9A E4            pop a
1234   0B9B C0 00 00      cmp b, 0
1235   0B9E C6 CB 0B      je _if13_else
1236   0BA1             _if13_true:
1237   0BA1             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1238   0BA1 FA FF FF      lea d, [bp + -1] ; $value         
1239   0BA4 2C FF FF      mov b, [bp + -1] ; $value             
1240   0BA7             ; START FACTORS
1241   0BA7 D7            push a
1242   0BA8 11            mov a, b
1243   0BA9 26 10 00      mov b, $10
1244   0BAC AC            mul a, b ; *
1245   0BAD 11            mov a, b
1246   0BAE 27            mov b, a
1247   0BAF E4            pop a
1248   0BB0             ; END FACTORS
1249   0BB0             ; START TERMS
1250   0BB0 D7            push a
1251   0BB1 11            mov a, b
1252   0BB2 34 FC FF      mov bl, [bp + -4] ; $hex_char
1253   0BB5 A7 00         mov bh, 0             
1254   0BB7             ; START TERMS
1255   0BB7 D7            push a
1256   0BB8 11            mov a, b
1257   0BB9 26 61 00      mov b, $61
1258   0BBC 60            sub a, b
1259   0BBD 26 0A 00      mov b, $a
1260   0BC0 54            add a, b
1261   0BC1 27            mov b, a
1262   0BC2 E4            pop a
1263   0BC3             ; END TERMS
1264   0BC3 54            add a, b
1265   0BC4 27            mov b, a
1266   0BC5 E4            pop a
1267   0BC6             ; END TERMS        
1268   0BC6 FD 43         mov [d], b
1269   0BC8 0A 3F 0C      jmp _if13_exit
1270   0BCB             _if13_else:
1271   0BCB             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1272   0BCB             _if14_cond:
1273   0BCB 34 FC FF      mov bl, [bp + -4] ; $hex_char
1274   0BCE A7 00         mov bh, 0             
1275   0BD0             ; START RELATIONAL
1276   0BD0 D7            push a
1277   0BD1 11            mov a, b
1278   0BD2 26 41 00      mov b, $41
1279   0BD5 B0            cmp a, b
1280   0BD6 FD 80         sge ; >=
1281   0BD8 E4            pop a
1282   0BD9             ; END RELATIONAL
1283   0BD9 D7            push a
1284   0BDA 11            mov a, b
1285   0BDB 34 FC FF      mov bl, [bp + -4] ; $hex_char
1286   0BDE A7 00         mov bh, 0             
1287   0BE0             ; START RELATIONAL
1288   0BE0 D7            push a
1289   0BE1 11            mov a, b
1290   0BE2 26 46 00      mov b, $46
1291   0BE5 B0            cmp a, b
1292   0BE6 FD 74         sle ; <=
1293   0BE8 E4            pop a
1294   0BE9             ; END RELATIONAL
1295   0BE9 FD A7         sand a, b ; &&
1296   0BEB E4            pop a
1297   0BEC C0 00 00      cmp b, 0
1298   0BEF C6 1C 0C      je _if14_else
1299   0BF2             _if14_true:
1300   0BF2             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1301   0BF2 FA FF FF      lea d, [bp + -1] ; $value         
1302   0BF5 2C FF FF      mov b, [bp + -1] ; $value             
1303   0BF8             ; START FACTORS
1304   0BF8 D7            push a
1305   0BF9 11            mov a, b
1306   0BFA 26 10 00      mov b, $10
1307   0BFD AC            mul a, b ; *
1308   0BFE 11            mov a, b
1309   0BFF 27            mov b, a
1310   0C00 E4            pop a
1311   0C01             ; END FACTORS
1312   0C01             ; START TERMS
1313   0C01 D7            push a
1314   0C02 11            mov a, b
1315   0C03 34 FC FF      mov bl, [bp + -4] ; $hex_char
1316   0C06 A7 00         mov bh, 0             
1317   0C08             ; START TERMS
1318   0C08 D7            push a
1319   0C09 11            mov a, b
1320   0C0A 26 41 00      mov b, $41
1321   0C0D 60            sub a, b
1322   0C0E 26 0A 00      mov b, $a
1323   0C11 54            add a, b
1324   0C12 27            mov b, a
1325   0C13 E4            pop a
1326   0C14             ; END TERMS
1327   0C14 54            add a, b
1328   0C15 27            mov b, a
1329   0C16 E4            pop a
1330   0C17             ; END TERMS        
1331   0C17 FD 43         mov [d], b
1332   0C19 0A 3F 0C      jmp _if14_exit
1333   0C1C             _if14_else:
1334   0C1C             ;; value = (value * 16) + (hex_char - '0'); 
1335   0C1C FA FF FF      lea d, [bp + -1] ; $value         
1336   0C1F 2C FF FF      mov b, [bp + -1] ; $value             
1337   0C22             ; START FACTORS
1338   0C22 D7            push a
1339   0C23 11            mov a, b
1340   0C24 26 10 00      mov b, $10
1341   0C27 AC            mul a, b ; *
1342   0C28 11            mov a, b
1343   0C29 27            mov b, a
1344   0C2A E4            pop a
1345   0C2B             ; END FACTORS
1346   0C2B             ; START TERMS
1347   0C2B D7            push a
1348   0C2C 11            mov a, b
1349   0C2D 34 FC FF      mov bl, [bp + -4] ; $hex_char
1350   0C30 A7 00         mov bh, 0             
1351   0C32             ; START TERMS
1352   0C32 D7            push a
1353   0C33 11            mov a, b
1354   0C34 26 30 00      mov b, $30
1355   0C37 60            sub a, b
1356   0C38 27            mov b, a
1357   0C39 E4            pop a
1358   0C3A             ; END TERMS
1359   0C3A 54            add a, b
1360   0C3B 27            mov b, a
1361   0C3C E4            pop a
1362   0C3D             ; END TERMS        
1363   0C3D FD 43         mov [d], b
1364   0C3F             _if14_exit:
1365   0C3F             _if13_exit:
1366   0C3F             _for12_update:
1367   0C3F 2C FD FF      mov b, [bp + -3] ; $i             
1368   0C42 FD 79         mov g, b
1369   0C44 FD 77         inc b
1370   0C46 FA FD FF      lea d, [bp + -3] ; $i
1371   0C49 FD 43         mov [d], b
1372   0C4B FD 27         mov b, g
1373   0C4D 0A 50 0B      jmp _for12_cond
1374   0C50             _for12_exit:
1375   0C50             ;; return value; 
1376   0C50 2C FF FF      mov b, [bp + -1] ; $value             
1377   0C53 F9            leave
1378   0C54 09            ret
1379   0C55             
1380   0C55             atoi:
1381   0C55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1382   0C58             ; $result 
1383   0C58 10 00 00      mov a, $0
1384   0C5B 45 FF FF      mov [bp + -1], a
1385   0C5E             ; $sign 
1386   0C5E 10 01 00      mov a, $1
1387   0C61 45 FD FF      mov [bp + -3], a
1388   0C64 52 04 00      sub sp, 4
1389   0C67             ;; while (*str == ' ') str++; 
1390   0C67             _while15_cond:
1391   0C67 2C 05 00      mov b, [bp + 5] ; $str             
1392   0C6A 74            mov d, b
1393   0C6B 32            mov bl, [d]
1394   0C6C A7 00         mov bh, 0
1395   0C6E             ; START RELATIONAL
1396   0C6E D7            push a
1397   0C6F 11            mov a, b
1398   0C70 26 20 00      mov b, $20
1399   0C73 B0            cmp a, b
1400   0C74 FD 71         seq ; ==
1401   0C76 E4            pop a
1402   0C77             ; END RELATIONAL
1403   0C77 C0 00 00      cmp b, 0
1404   0C7A C6 8E 0C      je _while15_exit
1405   0C7D             _while15_block:
1406   0C7D             ;; str++; 
1407   0C7D 2C 05 00      mov b, [bp + 5] ; $str             
1408   0C80 FD 79         mov g, b
1409   0C82 FD 77         inc b
1410   0C84 FA 05 00      lea d, [bp + 5] ; $str
1411   0C87 FD 43         mov [d], b
1412   0C89 FD 27         mov b, g
1413   0C8B 0A 67 0C      jmp _while15_cond
1414   0C8E             _while15_exit:
1415   0C8E             ;; if (*str == '-' || *str == '+') { 
1416   0C8E             _if16_cond:
1417   0C8E 2C 05 00      mov b, [bp + 5] ; $str             
1418   0C91 74            mov d, b
1419   0C92 32            mov bl, [d]
1420   0C93 A7 00         mov bh, 0
1421   0C95             ; START RELATIONAL
1422   0C95 D7            push a
1423   0C96 11            mov a, b
1424   0C97 26 2D 00      mov b, $2d
1425   0C9A B0            cmp a, b
1426   0C9B FD 71         seq ; ==
1427   0C9D E4            pop a
1428   0C9E             ; END RELATIONAL
1429   0C9E D7            push a
1430   0C9F 11            mov a, b
1431   0CA0 2C 05 00      mov b, [bp + 5] ; $str             
1432   0CA3 74            mov d, b
1433   0CA4 32            mov bl, [d]
1434   0CA5 A7 00         mov bh, 0
1435   0CA7             ; START RELATIONAL
1436   0CA7 D7            push a
1437   0CA8 11            mov a, b
1438   0CA9 26 2B 00      mov b, $2b
1439   0CAC B0            cmp a, b
1440   0CAD FD 71         seq ; ==
1441   0CAF E4            pop a
1442   0CB0             ; END RELATIONAL
1443   0CB0 FD A8         sor a, b ; ||
1444   0CB2 E4            pop a
1445   0CB3 C0 00 00      cmp b, 0
1446   0CB6 C6 ED 0C      je _if16_exit
1447   0CB9             _if16_true:
1448   0CB9             ;; if (*str == '-') sign = -1; 
1449   0CB9             _if17_cond:
1450   0CB9 2C 05 00      mov b, [bp + 5] ; $str             
1451   0CBC 74            mov d, b
1452   0CBD 32            mov bl, [d]
1453   0CBE A7 00         mov bh, 0
1454   0CC0             ; START RELATIONAL
1455   0CC0 D7            push a
1456   0CC1 11            mov a, b
1457   0CC2 26 2D 00      mov b, $2d
1458   0CC5 B0            cmp a, b
1459   0CC6 FD 71         seq ; ==
1460   0CC8 E4            pop a
1461   0CC9             ; END RELATIONAL
1462   0CC9 C0 00 00      cmp b, 0
1463   0CCC C6 DC 0C      je _if17_exit
1464   0CCF             _if17_true:
1465   0CCF             ;; sign = -1; 
1466   0CCF FA FD FF      lea d, [bp + -3] ; $sign         
1467   0CD2 26 01 00      mov b, $1
1468   0CD5 FD 97         neg b        
1469   0CD7 FD 43         mov [d], b
1470   0CD9 0A DC 0C      jmp _if17_exit
1471   0CDC             _if17_exit:
1472   0CDC             ;; str++; 
1473   0CDC 2C 05 00      mov b, [bp + 5] ; $str             
1474   0CDF FD 79         mov g, b
1475   0CE1 FD 77         inc b
1476   0CE3 FA 05 00      lea d, [bp + 5] ; $str
1477   0CE6 FD 43         mov [d], b
1478   0CE8 FD 27         mov b, g
1479   0CEA 0A ED 0C      jmp _if16_exit
1480   0CED             _if16_exit:
1481   0CED             ;; while (*str >= '0' && *str <= '9') { 
1482   0CED             _while18_cond:
1483   0CED 2C 05 00      mov b, [bp + 5] ; $str             
1484   0CF0 74            mov d, b
1485   0CF1 32            mov bl, [d]
1486   0CF2 A7 00         mov bh, 0
1487   0CF4             ; START RELATIONAL
1488   0CF4 D7            push a
1489   0CF5 11            mov a, b
1490   0CF6 26 30 00      mov b, $30
1491   0CF9 B0            cmp a, b
1492   0CFA FD 80         sge ; >=
1493   0CFC E4            pop a
1494   0CFD             ; END RELATIONAL
1495   0CFD D7            push a
1496   0CFE 11            mov a, b
1497   0CFF 2C 05 00      mov b, [bp + 5] ; $str             
1498   0D02 74            mov d, b
1499   0D03 32            mov bl, [d]
1500   0D04 A7 00         mov bh, 0
1501   0D06             ; START RELATIONAL
1502   0D06 D7            push a
1503   0D07 11            mov a, b
1504   0D08 26 39 00      mov b, $39
1505   0D0B B0            cmp a, b
1506   0D0C FD 74         sle ; <=
1507   0D0E E4            pop a
1508   0D0F             ; END RELATIONAL
1509   0D0F FD A7         sand a, b ; &&
1510   0D11 E4            pop a
1511   0D12 C0 00 00      cmp b, 0
1512   0D15 C6 50 0D      je _while18_exit
1513   0D18             _while18_block:
1514   0D18             ;; result = result * 10 + (*str - '0'); 
1515   0D18 FA FF FF      lea d, [bp + -1] ; $result
1516   0D1B DA            push d
1517   0D1C 2C FF FF      mov b, [bp + -1] ; $result             
1518   0D1F             ; START FACTORS
1519   0D1F D7            push a
1520   0D20 11            mov a, b
1521   0D21 26 0A 00      mov b, $a
1522   0D24 AC            mul a, b ; *
1523   0D25 11            mov a, b
1524   0D26 27            mov b, a
1525   0D27 E4            pop a
1526   0D28             ; END FACTORS
1527   0D28             ; START TERMS
1528   0D28 D7            push a
1529   0D29 11            mov a, b
1530   0D2A 2C 05 00      mov b, [bp + 5] ; $str             
1531   0D2D 74            mov d, b
1532   0D2E 32            mov bl, [d]
1533   0D2F A7 00         mov bh, 0
1534   0D31             ; START TERMS
1535   0D31 D7            push a
1536   0D32 11            mov a, b
1537   0D33 26 30 00      mov b, $30
1538   0D36 60            sub a, b
1539   0D37 27            mov b, a
1540   0D38 E4            pop a
1541   0D39             ; END TERMS
1542   0D39 54            add a, b
1543   0D3A 27            mov b, a
1544   0D3B E4            pop a
1545   0D3C             ; END TERMS
1546   0D3C E7            pop d
1547   0D3D FD 43         mov [d], b
1548   0D3F             ;; str++; 
1549   0D3F 2C 05 00      mov b, [bp + 5] ; $str             
1550   0D42 FD 79         mov g, b
1551   0D44 FD 77         inc b
1552   0D46 FA 05 00      lea d, [bp + 5] ; $str
1553   0D49 FD 43         mov [d], b
1554   0D4B FD 27         mov b, g
1555   0D4D 0A ED 0C      jmp _while18_cond
1556   0D50             _while18_exit:
1557   0D50             ;; return sign * result; 
1558   0D50 2C FD FF      mov b, [bp + -3] ; $sign             
1559   0D53             ; START FACTORS
1560   0D53 D7            push a
1561   0D54 11            mov a, b
1562   0D55 2C FF FF      mov b, [bp + -1] ; $result             
1563   0D58 AC            mul a, b ; *
1564   0D59 11            mov a, b
1565   0D5A 27            mov b, a
1566   0D5B E4            pop a
1567   0D5C             ; END FACTORS
1568   0D5C F9            leave
1569   0D5D 09            ret
1570   0D5E             
1571   0D5E             gets:
1572   0D5E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1573   0D61             
1574   0D61             ; --- BEGIN INLINE ASM BLOCK
1575   0D61 17 05 00      mov a, [bp + 5] ; $s             
1576   0D64 3C            mov d, a
1577   0D65 07 3A 11      call _gets
1578   0D68             ; --- END INLINE ASM BLOCK
1579   0D68             
1580   0D68             ;; return strlen(s); 
1581   0D68 2C 05 00      mov b, [bp + 5] ; $s             
1582   0D6B FD AB         swp b
1583   0D6D D8            push b
1584   0D6E 07 DF 08      call strlen
1585   0D71 51 02 00      add sp, 2
1586   0D74 F9            leave
1587   0D75 09            ret
1588   0D76             
1589   0D76             prints:
1590   0D76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1591   0D79             ; $digits 
1592   0D79             ; $i 
1593   0D79 10 00 00      mov a, $0
1594   0D7C 45 FA FF      mov [bp + -6], a
1595   0D7F 52 07 00      sub sp, 7
1596   0D82             ;; if (num < 0) { 
1597   0D82             _if19_cond:
1598   0D82 2C 05 00      mov b, [bp + 5] ; $num             
1599   0D85             ; START RELATIONAL
1600   0D85 D7            push a
1601   0D86 11            mov a, b
1602   0D87 26 00 00      mov b, $0
1603   0D8A B0            cmp a, b
1604   0D8B FD 73         slt ; < 
1605   0D8D E4            pop a
1606   0D8E             ; END RELATIONAL
1607   0D8E C0 00 00      cmp b, 0
1608   0D91 C6 AB 0D      je _if19_else
1609   0D94             _if19_true:
1610   0D94             ;; putchar('-'); 
1611   0D94 26 2D 00      mov b, $2d
1612   0D97 DD            push bl
1613   0D98 07 2D 0F      call putchar
1614   0D9B 51 01 00      add sp, 1
1615   0D9E             ;; num = -num; 
1616   0D9E FA 05 00      lea d, [bp + 5] ; $num         
1617   0DA1 2C 05 00      mov b, [bp + 5] ; $num             
1618   0DA4 FD 97         neg b        
1619   0DA6 FD 43         mov [d], b
1620   0DA8 0A CC 0D      jmp _if19_exit
1621   0DAB             _if19_else:
1622   0DAB             ;; if (num == 0) { 
1623   0DAB             _if20_cond:
1624   0DAB 2C 05 00      mov b, [bp + 5] ; $num             
1625   0DAE             ; START RELATIONAL
1626   0DAE D7            push a
1627   0DAF 11            mov a, b
1628   0DB0 26 00 00      mov b, $0
1629   0DB3 B0            cmp a, b
1630   0DB4 FD 71         seq ; ==
1631   0DB6 E4            pop a
1632   0DB7             ; END RELATIONAL
1633   0DB7 C0 00 00      cmp b, 0
1634   0DBA C6 CC 0D      je _if20_exit
1635   0DBD             _if20_true:
1636   0DBD             ;; putchar('0'); 
1637   0DBD 26 30 00      mov b, $30
1638   0DC0 DD            push bl
1639   0DC1 07 2D 0F      call putchar
1640   0DC4 51 01 00      add sp, 1
1641   0DC7             ;; return; 
1642   0DC7 F9            leave
1643   0DC8 09            ret
1644   0DC9 0A CC 0D      jmp _if20_exit
1645   0DCC             _if20_exit:
1646   0DCC             _if19_exit:
1647   0DCC             ;; while (num > 0) { 
1648   0DCC             _while21_cond:
1649   0DCC 2C 05 00      mov b, [bp + 5] ; $num             
1650   0DCF             ; START RELATIONAL
1651   0DCF D7            push a
1652   0DD0 11            mov a, b
1653   0DD1 26 00 00      mov b, $0
1654   0DD4 B0            cmp a, b
1655   0DD5 FD 7F         sgt ; >
1656   0DD7 E4            pop a
1657   0DD8             ; END RELATIONAL
1658   0DD8 C0 00 00      cmp b, 0
1659   0DDB C6 1E 0E      je _while21_exit
1660   0DDE             _while21_block:
1661   0DDE             ;; digits[i] = '0' + (num % 10); 
1662   0DDE FA FC FF      lea d, [bp + -4] ; $digits
1663   0DE1 D7            push a         
1664   0DE2 2C FA FF      mov b, [bp + -6] ; $i                     
1665   0DE5 5A            add d, b
1666   0DE6 E4            pop a         
1667   0DE7 26 30 00      mov b, $30
1668   0DEA             ; START TERMS
1669   0DEA D7            push a
1670   0DEB 11            mov a, b
1671   0DEC 2C 05 00      mov b, [bp + 5] ; $num             
1672   0DEF             ; START FACTORS
1673   0DEF D7            push a
1674   0DF0 11            mov a, b
1675   0DF1 26 0A 00      mov b, $a
1676   0DF4 AE            div a, b ; 
1677   0DF5 11            mov a, b
1678   0DF6 27            mov b, a
1679   0DF7 E4            pop a
1680   0DF8             ; END FACTORS
1681   0DF8 54            add a, b
1682   0DF9 27            mov b, a
1683   0DFA E4            pop a
1684   0DFB             ; END TERMS        
1685   0DFB FD 3E         mov [d], bl
1686   0DFD             ;; num = num / 10; 
1687   0DFD FA 05 00      lea d, [bp + 5] ; $num         
1688   0E00 2C 05 00      mov b, [bp + 5] ; $num             
1689   0E03             ; START FACTORS
1690   0E03 D7            push a
1691   0E04 11            mov a, b
1692   0E05 26 0A 00      mov b, $a
1693   0E08 AE            div a, b
1694   0E09 27            mov b, a
1695   0E0A E4            pop a
1696   0E0B             ; END FACTORS        
1697   0E0B FD 43         mov [d], b
1698   0E0D             ;; i++; 
1699   0E0D 2C FA FF      mov b, [bp + -6] ; $i             
1700   0E10 FD 79         mov g, b
1701   0E12 FD 77         inc b
1702   0E14 FA FA FF      lea d, [bp + -6] ; $i
1703   0E17 FD 43         mov [d], b
1704   0E19 FD 27         mov b, g
1705   0E1B 0A CC 0D      jmp _while21_cond
1706   0E1E             _while21_exit:
1707   0E1E             ;; while (i > 0) { 
1708   0E1E             _while22_cond:
1709   0E1E 2C FA FF      mov b, [bp + -6] ; $i             
1710   0E21             ; START RELATIONAL
1711   0E21 D7            push a
1712   0E22 11            mov a, b
1713   0E23 26 00 00      mov b, $0
1714   0E26 B0            cmp a, b
1715   0E27 FD 7F         sgt ; >
1716   0E29 E4            pop a
1717   0E2A             ; END RELATIONAL
1718   0E2A C0 00 00      cmp b, 0
1719   0E2D C6 54 0E      je _while22_exit
1720   0E30             _while22_block:
1721   0E30             ;; i--; 
1722   0E30 2C FA FF      mov b, [bp + -6] ; $i             
1723   0E33 FD 79         mov g, b
1724   0E35 FD 7D         dec b
1725   0E37 FA FA FF      lea d, [bp + -6] ; $i
1726   0E3A FD 43         mov [d], b
1727   0E3C FD 27         mov b, g
1728   0E3E             ;; putchar(digits[i]); 
1729   0E3E FA FC FF      lea d, [bp + -4] ; $digits
1730   0E41 D7            push a         
1731   0E42 2C FA FF      mov b, [bp + -6] ; $i                     
1732   0E45 5A            add d, b
1733   0E46 E4            pop a
1734   0E47 32            mov bl, [d]
1735   0E48 A7 00         mov bh, 0
1736   0E4A DD            push bl
1737   0E4B 07 2D 0F      call putchar
1738   0E4E 51 01 00      add sp, 1
1739   0E51 0A 1E 0E      jmp _while22_cond
1740   0E54             _while22_exit:
1741   0E54 F9            leave
1742   0E55 09            ret
1743   0E56             
1744   0E56             printu:
1745   0E56 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1746   0E59             ; $digits 
1747   0E59             ; $i 
1748   0E59 52 07 00      sub sp, 7
1749   0E5C             ;; i = 0; 
1750   0E5C FA FA FF      lea d, [bp + -6] ; $i         
1751   0E5F 26 00 00      mov b, $0        
1752   0E62 FD 43         mov [d], b
1753   0E64             ;; if(num == 0){ 
1754   0E64             _if23_cond:
1755   0E64 2C 05 00      mov b, [bp + 5] ; $num             
1756   0E67             ; START RELATIONAL
1757   0E67 D7            push a
1758   0E68 11            mov a, b
1759   0E69 26 00 00      mov b, $0
1760   0E6C B0            cmp a, b
1761   0E6D FD 71         seq ; ==
1762   0E6F E4            pop a
1763   0E70             ; END RELATIONAL
1764   0E70 C0 00 00      cmp b, 0
1765   0E73 C6 85 0E      je _if23_exit
1766   0E76             _if23_true:
1767   0E76             ;; putchar('0'); 
1768   0E76 26 30 00      mov b, $30
1769   0E79 DD            push bl
1770   0E7A 07 2D 0F      call putchar
1771   0E7D 51 01 00      add sp, 1
1772   0E80             ;; return; 
1773   0E80 F9            leave
1774   0E81 09            ret
1775   0E82 0A 85 0E      jmp _if23_exit
1776   0E85             _if23_exit:
1777   0E85             ;; while (num > 0) { 
1778   0E85             _while24_cond:
1779   0E85 2C 05 00      mov b, [bp + 5] ; $num             
1780   0E88             ; START RELATIONAL
1781   0E88 D7            push a
1782   0E89 11            mov a, b
1783   0E8A 26 00 00      mov b, $0
1784   0E8D B0            cmp a, b
1785   0E8E FD 81         sgu ; > (unsigned)
1786   0E90 E4            pop a
1787   0E91             ; END RELATIONAL
1788   0E91 C0 00 00      cmp b, 0
1789   0E94 C6 D7 0E      je _while24_exit
1790   0E97             _while24_block:
1791   0E97             ;; digits[i] = '0' + (num % 10); 
1792   0E97 FA FC FF      lea d, [bp + -4] ; $digits
1793   0E9A D7            push a         
1794   0E9B 2C FA FF      mov b, [bp + -6] ; $i                     
1795   0E9E 5A            add d, b
1796   0E9F E4            pop a         
1797   0EA0 26 30 00      mov b, $30
1798   0EA3             ; START TERMS
1799   0EA3 D7            push a
1800   0EA4 11            mov a, b
1801   0EA5 2C 05 00      mov b, [bp + 5] ; $num             
1802   0EA8             ; START FACTORS
1803   0EA8 D7            push a
1804   0EA9 11            mov a, b
1805   0EAA 26 0A 00      mov b, $a
1806   0EAD AE            div a, b ; 
1807   0EAE 11            mov a, b
1808   0EAF 27            mov b, a
1809   0EB0 E4            pop a
1810   0EB1             ; END FACTORS
1811   0EB1 54            add a, b
1812   0EB2 27            mov b, a
1813   0EB3 E4            pop a
1814   0EB4             ; END TERMS        
1815   0EB4 FD 3E         mov [d], bl
1816   0EB6             ;; num = num / 10; 
1817   0EB6 FA 05 00      lea d, [bp + 5] ; $num         
1818   0EB9 2C 05 00      mov b, [bp + 5] ; $num             
1819   0EBC             ; START FACTORS
1820   0EBC D7            push a
1821   0EBD 11            mov a, b
1822   0EBE 26 0A 00      mov b, $a
1823   0EC1 AE            div a, b
1824   0EC2 27            mov b, a
1825   0EC3 E4            pop a
1826   0EC4             ; END FACTORS        
1827   0EC4 FD 43         mov [d], b
1828   0EC6             ;; i++; 
1829   0EC6 2C FA FF      mov b, [bp + -6] ; $i             
1830   0EC9 FD 79         mov g, b
1831   0ECB FD 77         inc b
1832   0ECD FA FA FF      lea d, [bp + -6] ; $i
1833   0ED0 FD 43         mov [d], b
1834   0ED2 FD 27         mov b, g
1835   0ED4 0A 85 0E      jmp _while24_cond
1836   0ED7             _while24_exit:
1837   0ED7             ;; while (i > 0) { 
1838   0ED7             _while25_cond:
1839   0ED7 2C FA FF      mov b, [bp + -6] ; $i             
1840   0EDA             ; START RELATIONAL
1841   0EDA D7            push a
1842   0EDB 11            mov a, b
1843   0EDC 26 00 00      mov b, $0
1844   0EDF B0            cmp a, b
1845   0EE0 FD 7F         sgt ; >
1846   0EE2 E4            pop a
1847   0EE3             ; END RELATIONAL
1848   0EE3 C0 00 00      cmp b, 0
1849   0EE6 C6 0D 0F      je _while25_exit
1850   0EE9             _while25_block:
1851   0EE9             ;; i--; 
1852   0EE9 2C FA FF      mov b, [bp + -6] ; $i             
1853   0EEC FD 79         mov g, b
1854   0EEE FD 7D         dec b
1855   0EF0 FA FA FF      lea d, [bp + -6] ; $i
1856   0EF3 FD 43         mov [d], b
1857   0EF5 FD 27         mov b, g
1858   0EF7             ;; putchar(digits[i]); 
1859   0EF7 FA FC FF      lea d, [bp + -4] ; $digits
1860   0EFA D7            push a         
1861   0EFB 2C FA FF      mov b, [bp + -6] ; $i                     
1862   0EFE 5A            add d, b
1863   0EFF E4            pop a
1864   0F00 32            mov bl, [d]
1865   0F01 A7 00         mov bh, 0
1866   0F03 DD            push bl
1867   0F04 07 2D 0F      call putchar
1868   0F07 51 01 00      add sp, 1
1869   0F0A 0A D7 0E      jmp _while25_cond
1870   0F0D             _while25_exit:
1871   0F0D F9            leave
1872   0F0E 09            ret
1873   0F0F             
1874   0F0F             rand:
1875   0F0F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1876   0F12             ; $sec 
1877   0F12 52 01 00      sub sp, 1
1878   0F15             
1879   0F15             ; --- BEGIN INLINE ASM BLOCK
1880   0F15 19 00         mov al, 0
1881   0F17 05 01         syscall sys_rtc					
1882   0F19 1A            mov al, ah
1883   0F1A 20 00 00      mov al, [bp + 0] ; $sec
1884   0F1D                         
1885   0F1D             ; --- END INLINE ASM BLOCK
1886   0F1D             
1887   0F1D             ;; return sec; 
1888   0F1D 34 00 00      mov bl, [bp + 0] ; $sec
1889   0F20 A7 00         mov bh, 0             
1890   0F22 F9            leave
1891   0F23 09            ret
1892   0F24             
1893   0F24             date:
1894   0F24 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1895   0F27             
1896   0F27             ; --- BEGIN INLINE ASM BLOCK
1897   0F27 19 00         mov al, 0 
1898   0F29 05 07         syscall sys_datetime
1899   0F2B             ; --- END INLINE ASM BLOCK
1900   0F2B             
1901   0F2B F9            leave
1902   0F2C 09            ret
1903   0F2D             
1904   0F2D             putchar:
1905   0F2D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1906   0F30             
1907   0F30             ; --- BEGIN INLINE ASM BLOCK
1908   0F30 20 05 00      mov al, [bp + 5] ; $c
1909   0F33                         
1910   0F33 23            mov ah, al
1911   0F34 07 33 11      call _putchar
1912   0F37             ; --- END INLINE ASM BLOCK
1913   0F37             
1914   0F37 F9            leave
1915   0F38 09            ret
1916   0F39             
1917   0F39             getchar:
1918   0F39 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1919   0F3C             ; $c 
1920   0F3C 52 01 00      sub sp, 1
1921   0F3F             
1922   0F3F             ; --- BEGIN INLINE ASM BLOCK
1923   0F3F 07 2C 11      call getch
1924   0F42 1A            mov al, ah
1925   0F43 FA 00 00      lea d, [bp + 0] ; $c
1926   0F46 3E            mov [d], al
1927   0F47             ; --- END INLINE ASM BLOCK
1928   0F47             
1929   0F47             ;; return c; 
1930   0F47 34 00 00      mov bl, [bp + 0] ; $c
1931   0F4A A7 00         mov bh, 0             
1932   0F4C F9            leave
1933   0F4D 09            ret
1934   0F4E             
1935   0F4E             scann:
1936   0F4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1937   0F51             ; $m 
1938   0F51 52 02 00      sub sp, 2
1939   0F54             
1940   0F54             ; --- BEGIN INLINE ASM BLOCK
1941   0F54 07 77 13      call scan_u16d
1942   0F57 FA FF FF      lea d, [bp + -1] ; $m
1943   0F5A 43            mov [d], a
1944   0F5B             ; --- END INLINE ASM BLOCK
1945   0F5B             
1946   0F5B             ;; return m; 
1947   0F5B 2C FF FF      mov b, [bp + -1] ; $m             
1948   0F5E F9            leave
1949   0F5F 09            ret
1950   0F60             
1951   0F60             puts:
1952   0F60 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1953   0F63             
1954   0F63             ; --- BEGIN INLINE ASM BLOCK
1955   0F63 17 05 00      mov a, [bp + 5] ; $s             
1956   0F66 3C            mov d, a
1957   0F67 07 7D 12      call _puts
1958   0F6A 22 0A         mov ah, $0A
1959   0F6C 19 00         mov al, 0
1960   0F6E 05 03         syscall sys_io
1961   0F70             ; --- END INLINE ASM BLOCK
1962   0F70             
1963   0F70 F9            leave
1964   0F71 09            ret
1965   0F72             
1966   0F72             print:
1967   0F72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1968   0F75             
1969   0F75             ; --- BEGIN INLINE ASM BLOCK
1970   0F75 17 05 00      mov a, [bp + 5] ; $s             
1971   0F78 3C            mov d, a
1972   0F79 07 7D 12      call _puts
1973   0F7C             ; --- END INLINE ASM BLOCK
1974   0F7C             
1975   0F7C F9            leave
1976   0F7D 09            ret
1977   0F7E             
1978   0F7E             loadfile:
1979   0F7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1980   0F81             
1981   0F81             ; --- BEGIN INLINE ASM BLOCK
1982   0F81 17 05 00      mov a, [bp + 5] ; $destination             
1983   0F84 4F            mov di, a
1984   0F85 FA 07 00      lea d, [bp + 7] ; $filename
1985   0F88 FD 2A         mov d, [d]
1986   0F8A 19 14         mov al, 20
1987   0F8C 05 04         syscall sys_filesystem
1988   0F8E             ; --- END INLINE ASM BLOCK
1989   0F8E             
1990   0F8E F9            leave
1991   0F8F 09            ret
1992   0F90             
1993   0F90             create_file:
1994   0F90 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1995   0F93 F9            leave
1996   0F94 09            ret
1997   0F95             
1998   0F95             delete_file:
1999   0F95 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2000   0F98             
2001   0F98             ; --- BEGIN INLINE ASM BLOCK
2002   0F98 FA 05 00      lea d, [bp + 5] ; $filename
2003   0F9B 19 0A         mov al, 10
2004   0F9D 05 04         syscall sys_filesystem
2005   0F9F             ; --- END INLINE ASM BLOCK
2006   0F9F             
2007   0F9F F9            leave
2008   0FA0 09            ret
2009   0FA1             
2010   0FA1             fopen:
2011   0FA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2012   0FA4 F9            leave
2013   0FA5 09            ret
2014   0FA6             
2015   0FA6             fclose:
2016   0FA6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2017   0FA9 F9            leave
2018   0FAA 09            ret
2019   0FAB             
2020   0FAB             alloc:
2021   0FAB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2022   0FAE             ;; heap_top = heap_top + bytes; 
2023   0FAE 3B 3C 27      mov d, _heap_top ; $heap_top         
2024   0FB1 29 3C 27      mov b, [_heap_top] ; $heap_top           
2025   0FB4             ; START TERMS
2026   0FB4 D7            push a
2027   0FB5 11            mov a, b
2028   0FB6 2C 05 00      mov b, [bp + 5] ; $bytes             
2029   0FB9 54            add a, b
2030   0FBA 27            mov b, a
2031   0FBB E4            pop a
2032   0FBC             ; END TERMS        
2033   0FBC FD 43         mov [d], b
2034   0FBE             ;; return heap_top - bytes; 
2035   0FBE 29 3C 27      mov b, [_heap_top] ; $heap_top           
2036   0FC1             ; START TERMS
2037   0FC1 D7            push a
2038   0FC2 11            mov a, b
2039   0FC3 2C 05 00      mov b, [bp + 5] ; $bytes             
2040   0FC6 60            sub a, b
2041   0FC7 27            mov b, a
2042   0FC8 E4            pop a
2043   0FC9             ; END TERMS
2044   0FC9 F9            leave
2045   0FCA 09            ret
2046   0FCB             
2047   0FCB             free:
2048   0FCB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2049   0FCE             ;; return heap_top = heap_top - bytes; 
2050   0FCE 3B 3C 27      mov d, _heap_top ; $heap_top         
2051   0FD1 29 3C 27      mov b, [_heap_top] ; $heap_top           
2052   0FD4             ; START TERMS
2053   0FD4 D7            push a
2054   0FD5 11            mov a, b
2055   0FD6 2C 05 00      mov b, [bp + 5] ; $bytes             
2056   0FD9 60            sub a, b
2057   0FDA 27            mov b, a
2058   0FDB E4            pop a
2059   0FDC             ; END TERMS        
2060   0FDC FD 43         mov [d], b
2061   0FDE F9            leave
2062   0FDF 09            ret
2063   0FE0             
2064   0FE0             exit:
2065   0FE0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2066   0FE3             
2067   0FE3             ; --- BEGIN INLINE ASM BLOCK
2068   0FE3 05 0B         syscall sys_terminate_proc
2069   0FE5             ; --- END INLINE ASM BLOCK
2070   0FE5             
2071   0FE5 F9            leave
2072   0FE6 09            ret
2073   0FE7             
2074   0FE7             load_hex:
2075   0FE7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2076   0FEA             ; $temp 
2077   0FEA 52 02 00      sub sp, 2
2078   0FED             ;; temp = alloc(32768); 
2079   0FED FA FF FF      lea d, [bp + -1] ; $temp
2080   0FF0 DA            push d
2081   0FF1 26 00 80      mov b, $8000
2082   0FF4 FD AB         swp b
2083   0FF6 D8            push b
2084   0FF7 07 AB 0F      call alloc
2085   0FFA 51 02 00      add sp, 2
2086   0FFD E7            pop d
2087   0FFE FD 43         mov [d], b
2088   1000             
2089   1000             ; --- BEGIN INLINE ASM BLOCK
2090   1000               
2091   1000               
2092   1000               
2093   1000               
2094   1000               
2095   1000             _load_hex:
2096   1000 D7            push a
2097   1001 D8            push b
2098   1002 DA            push d
2099   1003 E2            push si
2100   1004 E3            push di
2101   1005 52 00 80      sub sp, $8000      
2102   1008 38 00 00      mov c, 0
2103   100B 48            mov a, sp
2104   100C 77            inc a
2105   100D 3C            mov d, a          
2106   100E 07 3A 11      call _gets        
2107   1011 4D            mov si, a
2108   1012             __load_hex_loop:
2109   1012 F6            lodsb             
2110   1013 B9 00         cmp al, 0         
2111   1015 C6 23 10      jz __load_hex_ret
2112   1018 36            mov bh, al
2113   1019 F6            lodsb
2114   101A 2F            mov bl, al
2115   101B 07 F0 10      call _atoi        
2116   101E F7            stosb             
2117   101F 78            inc c
2118   1020 0A 12 10      jmp __load_hex_loop
2119   1023             __load_hex_ret:
2120   1023 51 00 80      add sp, $8000
2121   1026 F0            pop di
2122   1027 EF            pop si
2123   1028 E7            pop d
2124   1029 E5            pop b
2125   102A E4            pop a
2126   102B             ; --- END INLINE ASM BLOCK
2127   102B             
2128   102B F9            leave
2129   102C 09            ret
2130   102D             
2131   102D             getparam:
2132   102D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2133   1030             ; $data 
2134   1030 52 01 00      sub sp, 1
2135   1033             
2136   1033             ; --- BEGIN INLINE ASM BLOCK
2137   1033 19 04         mov al, 4
2138   1035 FA 05 00      lea d, [bp + 5] ; $address
2139   1038 FD 2A         mov d, [d]
2140   103A 05 0C         syscall sys_system
2141   103C FA 00 00      lea d, [bp + 0] ; $data
2142   103F FD 3E         mov [d], bl
2143   1041             ; --- END INLINE ASM BLOCK
2144   1041             
2145   1041             ;; return data; 
2146   1041 34 00 00      mov bl, [bp + 0] ; $data
2147   1044 A7 00         mov bh, 0             
2148   1046 F9            leave
2149   1047 09            ret
2150   1048             
2151   1048             include_stdio_asm:
2152   1048 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2153   104B             
2154   104B             ; --- BEGIN INLINE ASM BLOCK
2155   104B             .include "lib/stdio.asm"
0001+  104B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  104B             ; stdio.s
0003+  104B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  104B             .include "lib/string.asm"
0001++ 104B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 104B             ; string.s
0003++ 104B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 104B             
0005++ 104B             
0006++ 104B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 104B             ; _strrev
0008++ 104B             ; reverse a string
0009++ 104B             ; D = string address
0010++ 104B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 104B             ; 01234
0012++ 104B             _strrev:
0013++ 104B 4B          	pusha
0014++ 104C 07 92 10    	call _strlen	; length in C
0015++ 104F 12          	mov a, c
0016++ 1050 AF 01 00    	cmp a, 1
0017++ 1053 D0 6D 10    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1056 7D          	dec a
0019++ 1057 FD 4E       	mov si, d	; beginning of string
0020++ 1059 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 105B 59          	add d, a	; end of string
0022++ 105C 12          	mov a, c
0023++ 105D FD 9B       	shr a		; divide by 2
0024++ 105F 39          	mov c, a	; C now counts the steps
0025++ 1060             _strrev_L0:
0026++ 1060 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1061 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1062 3E          	mov [d], al	; store left char into right side
0029++ 1063 1B          	mov al, bl
0030++ 1064 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1065 7E          	dec c
0032++ 1066 7F          	dec d
0033++ 1067 C2 00 00    	cmp c, 0
0034++ 106A C7 60 10    	jne _strrev_L0
0035++ 106D             _strrev_end:
0036++ 106D 4C          	popa
0037++ 106E 09          	ret
0038++ 106F             	
0039++ 106F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 106F             ; _strchr
0041++ 106F             ; search string in D for char in AL
0042++ 106F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 106F             _strchr:
0044++ 106F             _strchr_L0:
0045++ 106F 32          	mov bl, [d]
0046++ 1070 C1 00       	cmp bl, 0
0047++ 1072 C6 7D 10    	je _strchr_end
0048++ 1075 BA          	cmp al, bl
0049++ 1076 C6 7D 10    	je _strchr_end
0050++ 1079 79          	inc d
0051++ 107A 0A 6F 10    	jmp _strchr_L0
0052++ 107D             _strchr_end:
0053++ 107D 1B          	mov al, bl
0054++ 107E 09          	ret
0055++ 107F             
0056++ 107F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 107F             ; _strstr
0058++ 107F             ; find sub-string
0059++ 107F             ; str1 in SI
0060++ 107F             ; str2 in DI
0061++ 107F             ; SI points to end of source string
0062++ 107F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 107F             _strstr:
0064++ 107F DB          	push al
0065++ 1080 DA          	push d
0066++ 1081 E3          	push di
0067++ 1082             _strstr_loop:
0068++ 1082 F3          	cmpsb					; compare a byte of the strings
0069++ 1083 C7 8E 10    	jne _strstr_ret
0070++ 1086 FC 00 00    	lea d, [di + 0]
0071++ 1089 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 108B C7 82 10    	jne _strstr_loop				; equal chars but not at end
0073++ 108E             _strstr_ret:
0074++ 108E F0          	pop di
0075++ 108F E7          	pop d
0076++ 1090 E8          	pop al
0077++ 1091 09          	ret
0078++ 1092             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1092             ; length of null terminated string
0080++ 1092             ; result in C
0081++ 1092             ; pointer in D
0082++ 1092             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1092             _strlen:
0084++ 1092 DA          	push d
0085++ 1093 38 00 00    	mov c, 0
0086++ 1096             _strlen_L1:
0087++ 1096 BD 00       	cmp byte [d], 0
0088++ 1098 C6 A0 10    	je _strlen_ret
0089++ 109B 79          	inc d
0090++ 109C 78          	inc c
0091++ 109D 0A 96 10    	jmp _strlen_L1
0092++ 10A0             _strlen_ret:
0093++ 10A0 E7          	pop d
0094++ 10A1 09          	ret
0095++ 10A2             
0096++ 10A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 10A2             ; STRCMP
0098++ 10A2             ; compare two strings
0099++ 10A2             ; str1 in SI
0100++ 10A2             ; str2 in DI
0101++ 10A2             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 10A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 10A2             _strcmp:
0104++ 10A2 DB          	push al
0105++ 10A3 DA          	push d
0106++ 10A4 E3          	push di
0107++ 10A5 E2          	push si
0108++ 10A6             _strcmp_loop:
0109++ 10A6 F3          	cmpsb					; compare a byte of the strings
0110++ 10A7 C7 B2 10    	jne _strcmp_ret
0111++ 10AA FB FF FF    	lea d, [si +- 1]
0112++ 10AD BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 10AF C7 A6 10    	jne _strcmp_loop				; equal chars but not at end
0114++ 10B2             _strcmp_ret:
0115++ 10B2 EF          	pop si
0116++ 10B3 F0          	pop di
0117++ 10B4 E7          	pop d
0118++ 10B5 E8          	pop al
0119++ 10B6 09          	ret
0120++ 10B7             
0121++ 10B7             
0122++ 10B7             ; STRCPY
0123++ 10B7             ; copy null terminated string from SI to DI
0124++ 10B7             ; source in SI
0125++ 10B7             ; destination in DI
0126++ 10B7             _strcpy:
0127++ 10B7 E2          	push si
0128++ 10B8 E3          	push di
0129++ 10B9 DB          	push al
0130++ 10BA             _strcpy_L1:
0131++ 10BA F6          	lodsb
0132++ 10BB F7          	stosb
0133++ 10BC B9 00       	cmp al, 0
0134++ 10BE C7 BA 10    	jne _strcpy_L1
0135++ 10C1             _strcpy_end:
0136++ 10C1 E8          	pop al
0137++ 10C2 F0          	pop di
0138++ 10C3 EF          	pop si
0139++ 10C4 09          	ret
0140++ 10C5             
0141++ 10C5             ; STRCAT
0142++ 10C5             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 10C5             ; source in SI
0144++ 10C5             ; destination in DI
0145++ 10C5             _strcat:
0146++ 10C5 E2          	push si
0147++ 10C6 E3          	push di
0148++ 10C7 D7          	push a
0149++ 10C8 DA          	push d
0150++ 10C9 50          	mov a, di
0151++ 10CA 3C          	mov d, a
0152++ 10CB             _strcat_goto_end_L1:
0153++ 10CB BD 00       	cmp byte[d], 0
0154++ 10CD C6 D4 10    	je _strcat_start
0155++ 10D0 79          	inc d
0156++ 10D1 0A CB 10    	jmp _strcat_goto_end_L1
0157++ 10D4             _strcat_start:
0158++ 10D4 FD 50       	mov di, d
0159++ 10D6             _strcat_L1:
0160++ 10D6 F6          	lodsb
0161++ 10D7 F7          	stosb
0162++ 10D8 B9 00       	cmp al, 0
0163++ 10DA C7 D6 10    	jne _strcat_L1
0164++ 10DD             _strcat_end:
0165++ 10DD E7          	pop d
0166++ 10DE E4          	pop a
0167++ 10DF F0          	pop di
0168++ 10E0 EF          	pop si
0169++ 10E1 09          	ret
0170++ 10E2             
0171++ 10E2             
0005+  10E2             
0006+  10E2             
0007+  10E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  10E2             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  10E2             ; ASCII in BL
0010+  10E2             ; result in AL
0011+  10E2             ; ascii for F = 0100 0110
0012+  10E2             ; ascii for 9 = 0011 1001
0013+  10E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  10E2             hex_ascii_encode:
0015+  10E2 1B            mov al, bl
0016+  10E3 93 40         test al, $40        ; test if letter or number
0017+  10E5 C7 EB 10      jnz hex_letter
0018+  10E8 87 0F         and al, $0F        ; get number
0019+  10EA 09            ret
0020+  10EB             hex_letter:
0021+  10EB 87 0F         and al, $0F        ; get letter
0022+  10ED 6A 09         add al, 9
0023+  10EF 09            ret
0024+  10F0             
0025+  10F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  10F0             ; ATOI
0027+  10F0             ; 2 letter hex string in B
0028+  10F0             ; 8bit integer returned in AL
0029+  10F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  10F0             _atoi:
0031+  10F0 D8            push b
0032+  10F1 07 E2 10      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  10F4 30            mov bl, bh
0034+  10F5 DB            push al          ; save a
0035+  10F6 07 E2 10      call hex_ascii_encode
0036+  10F9 EA            pop bl  
0037+  10FA FD 9E 04      shl al, 4
0038+  10FD 8C            or al, bl
0039+  10FE E5            pop b
0040+  10FF 09            ret  
0041+  1100             
0042+  1100             
0043+  1100             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1100             ; scanf
0045+  1100             ; no need for explanations!
0046+  1100             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1100             scanf:
0048+  1100 09            ret
0049+  1101             
0050+  1101             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1101             ; ITOA
0052+  1101             ; 8bit value in BL
0053+  1101             ; 2 byte ASCII result in A
0054+  1101             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1101             _itoa:
0056+  1101 DA            push d
0057+  1102 D8            push b
0058+  1103 A7 00         mov bh, 0
0059+  1105 FD A4 04      shr bl, 4  
0060+  1108 74            mov d, b
0061+  1109 1F B1 13      mov al, [d + s_hex_digits]
0062+  110C 23            mov ah, al
0063+  110D               
0064+  110D E5            pop b
0065+  110E D8            push b
0066+  110F A7 00         mov bh, 0
0067+  1111 FD 87 0F      and bl, $0F
0068+  1114 74            mov d, b
0069+  1115 1F B1 13      mov al, [d + s_hex_digits]
0070+  1118 E5            pop b
0071+  1119 E7            pop d
0072+  111A 09            ret
0073+  111B             
0074+  111B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  111B             ; HEX STRING TO BINARY
0076+  111B             ; di = destination address
0077+  111B             ; si = source
0078+  111B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  111B             _hex_to_int:
0080+  111B             _hex_to_int_L1:
0081+  111B F6            lodsb          ; load from [SI] to AL
0082+  111C B9 00         cmp al, 0        ; check if ASCII 0
0083+  111E C6 2B 11      jz _hex_to_int_ret
0084+  1121 36            mov bh, al
0085+  1122 F6            lodsb
0086+  1123 2F            mov bl, al
0087+  1124 07 F0 10      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  1127 F7            stosb          ; store AL to [DI]
0089+  1128 0A 1B 11      jmp _hex_to_int_L1
0090+  112B             _hex_to_int_ret:
0091+  112B 09            ret    
0092+  112C             
0093+  112C             
0094+  112C             
0095+  112C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  112C             ; GETCHAR
0097+  112C             ; char in ah
0098+  112C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  112C             getch:
0100+  112C DB            push al
0101+  112D             getch_retry:
0102+  112D 19 01         mov al, 1
0103+  112F 05 03         syscall sys_io      ; receive in AH
0104+  1131 E8            pop al
0105+  1132 09            ret
0106+  1133             
0107+  1133             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  1133             ; PUTCHAR
0109+  1133             ; char in ah
0110+  1133             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1133             _putchar:
0112+  1133 D7            push a
0113+  1134 19 00         mov al, 0
0114+  1136 05 03         syscall sys_io      ; char in AH
0115+  1138 E4            pop a
0116+  1139 09            ret
0117+  113A             
0118+  113A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  113A             ;; INPUT A STRING
0120+  113A             ;; terminates with null
0121+  113A             ;; pointer in D
0122+  113A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  113A             _gets:
0124+  113A D7            push a
0125+  113B DA            push d
0126+  113C             _gets_loop:
0127+  113C 19 01         mov al, 1
0128+  113E 05 03         syscall sys_io      ; receive in AH
0129+  1140 B9 00         cmp al, 0        ; check error code (AL)
0130+  1142 C6 3C 11      je _gets_loop      ; if no char received, retry
0131+  1145             
0132+  1145 76 1B         cmp ah, 27
0133+  1147 C6 68 11      je _gets_ansi_esc
0134+  114A 76 0A         cmp ah, $0A        ; LF
0135+  114C C6 D3 11      je _gets_end
0136+  114F 76 0D         cmp ah, $0D        ; CR
0137+  1151 C6 D3 11      je _gets_end
0138+  1154 76 5C         cmp ah, $5C        ; '\\'
0139+  1156 C6 94 11      je _gets_escape
0140+  1159               
0141+  1159 76 08         cmp ah, $08      ; check for backspace
0142+  115B C6 64 11      je _gets_backspace
0143+  115E             
0144+  115E 1A            mov al, ah
0145+  115F 3E            mov [d], al
0146+  1160 79            inc d
0147+  1161 0A 3C 11      jmp _gets_loop
0148+  1164             _gets_backspace:
0149+  1164 7F            dec d
0150+  1165 0A 3C 11      jmp _gets_loop
0151+  1168             _gets_ansi_esc:
0152+  1168 19 01         mov al, 1
0153+  116A 05 03         syscall sys_io        ; receive in AH without echo
0154+  116C B9 00         cmp al, 0          ; check error code (AL)
0155+  116E C6 68 11      je _gets_ansi_esc    ; if no char received, retry
0156+  1171 76 5B         cmp ah, '['
0157+  1173 C7 3C 11      jne _gets_loop
0158+  1176             _gets_ansi_esc_2:
0159+  1176 19 01         mov al, 1
0160+  1178 05 03         syscall sys_io          ; receive in AH without echo
0161+  117A B9 00         cmp al, 0            ; check error code (AL)
0162+  117C C6 76 11      je _gets_ansi_esc_2  ; if no char received, retry
0163+  117F 76 44         cmp ah, 'D'
0164+  1181 C6 8C 11      je _gets_left_arrow
0165+  1184 76 43         cmp ah, 'C'
0166+  1186 C6 90 11      je _gets_right_arrow
0167+  1189 0A 3C 11      jmp _gets_loop
0168+  118C             _gets_left_arrow:
0169+  118C 7F            dec d
0170+  118D 0A 3C 11      jmp _gets_loop
0171+  1190             _gets_right_arrow:
0172+  1190 79            inc d
0173+  1191 0A 3C 11      jmp _gets_loop
0174+  1194             _gets_escape:
0175+  1194 19 01         mov al, 1
0176+  1196 05 03         syscall sys_io      ; receive in AH
0177+  1198 B9 00         cmp al, 0        ; check error code (AL)
0178+  119A C6 94 11      je _gets_escape      ; if no char received, retry
0179+  119D 76 6E         cmp ah, 'n'
0180+  119F C6 BE 11      je _gets_LF
0181+  11A2 76 72         cmp ah, 'r'
0182+  11A4 C6 C5 11      je _gets_CR
0183+  11A7 76 30         cmp ah, '0'
0184+  11A9 C6 CC 11      je _gets_NULL
0185+  11AC 76 5C         cmp ah, $5C  ; '\'
0186+  11AE C6 B7 11      je _gets_slash
0187+  11B1 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  11B2 3E            mov [d], al
0189+  11B3 79            inc d
0190+  11B4 0A 3C 11      jmp _gets_loop
0191+  11B7             _gets_slash:
0192+  11B7 19 5C         mov al, $5C
0193+  11B9 3E            mov [d], al
0194+  11BA 79            inc d
0195+  11BB 0A 3C 11      jmp _gets_loop
0196+  11BE             _gets_LF:
0197+  11BE 19 0A         mov al, $0A
0198+  11C0 3E            mov [d], al
0199+  11C1 79            inc d
0200+  11C2 0A 3C 11      jmp _gets_loop
0201+  11C5             _gets_CR:
0202+  11C5 19 0D         mov al, $0D
0203+  11C7 3E            mov [d], al
0204+  11C8 79            inc d
0205+  11C9 0A 3C 11      jmp _gets_loop
0206+  11CC             _gets_NULL:
0207+  11CC 19 00         mov al, $00
0208+  11CE 3E            mov [d], al
0209+  11CF 79            inc d
0210+  11D0 0A 3C 11      jmp _gets_loop
0211+  11D3             _gets_end:
0212+  11D3 19 00         mov al, 0
0213+  11D5 3E            mov [d], al        ; terminate string
0214+  11D6 E7            pop d
0215+  11D7 E4            pop a
0216+  11D8 09            ret
0217+  11D9             
0218+  11D9             
0219+  11D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  11D9             ;; INPUT TEXT
0221+  11D9             ;; terminated with CTRL+D
0222+  11D9             ;; pointer in D
0223+  11D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  11D9             _gettxt:
0225+  11D9 D7            push a
0226+  11DA DA            push d
0227+  11DB             _gettxt_loop:
0228+  11DB 19 01         mov al, 1
0229+  11DD 05 03         syscall sys_io      ; receive in AH
0230+  11DF B9 00         cmp al, 0        ; check error code (AL)
0231+  11E1 C6 DB 11      je _gettxt_loop    ; if no char received, retry
0232+  11E4 76 04         cmp ah, 4      ; EOT
0233+  11E6 C6 24 12      je _gettxt_end
0234+  11E9 76 08         cmp ah, $08      ; check for backspace
0235+  11EB C6 20 12      je _gettxt_backspace
0236+  11EE 76 5C         cmp ah, $5C        ; '\'
0237+  11F0 C6 F9 11      je _gettxt_escape
0238+  11F3 1A            mov al, ah
0239+  11F4 3E            mov [d], al
0240+  11F5 79            inc d
0241+  11F6 0A DB 11      jmp _gettxt_loop
0242+  11F9             _gettxt_escape:
0243+  11F9 19 01         mov al, 1
0244+  11FB 05 03         syscall sys_io      ; receive in AH
0245+  11FD B9 00         cmp al, 0        ; check error code (AL)
0246+  11FF C6 F9 11      je _gettxt_escape    ; if no char received, retry
0247+  1202 76 6E         cmp ah, 'n'
0248+  1204 C6 12 12      je _gettxt_LF
0249+  1207 76 72         cmp ah, 'r'
0250+  1209 C6 19 12      je _gettxt_CR
0251+  120C 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  120D 3E            mov [d], al
0253+  120E 79            inc d
0254+  120F 0A DB 11      jmp _gettxt_loop
0255+  1212             _gettxt_LF:
0256+  1212 19 0A         mov al, $0A
0257+  1214 3E            mov [d], al
0258+  1215 79            inc d
0259+  1216 0A DB 11      jmp _gettxt_loop
0260+  1219             _gettxt_CR:
0261+  1219 19 0D         mov al, $0D
0262+  121B 3E            mov [d], al
0263+  121C 79            inc d
0264+  121D 0A DB 11      jmp _gettxt_loop
0265+  1220             _gettxt_backspace:
0266+  1220 7F            dec d
0267+  1221 0A DB 11      jmp _gettxt_loop
0268+  1224             _gettxt_end:
0269+  1224 19 00         mov al, 0
0270+  1226 3E            mov [d], al        ; terminate string
0271+  1227 E7            pop d
0272+  1228 E4            pop a
0273+  1229 09            ret
0274+  122A             
0275+  122A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  122A             ; PRINT NEW LINE
0277+  122A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  122A             printnl:
0279+  122A D7            push a
0280+  122B 10 00 0A      mov a, $0A00
0281+  122E 05 03         syscall sys_io
0282+  1230 10 00 0D      mov a, $0D00
0283+  1233 05 03         syscall sys_io
0284+  1235 E4            pop a
0285+  1236 09            ret
0286+  1237             
0287+  1237             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  1237             ; _strtoint
0289+  1237             ; 4 digit hex string number in d
0290+  1237             ; integer returned in A
0291+  1237             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  1237             _strtointx:
0293+  1237 D8            push b
0294+  1238 32            mov bl, [d]
0295+  1239 37            mov bh, bl
0296+  123A 33 01 00      mov bl, [d + 1]
0297+  123D 07 F0 10      call _atoi        ; convert to int in AL
0298+  1240 23            mov ah, al        ; move to AH
0299+  1241 33 02 00      mov bl, [d + 2]
0300+  1244 37            mov bh, bl
0301+  1245 33 03 00      mov bl, [d + 3]
0302+  1248 07 F0 10      call _atoi        ; convert to int in AL
0303+  124B E5            pop b
0304+  124C 09            ret
0305+  124D             
0306+  124D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  124D             ; _strtoint
0308+  124D             ; 5 digit base10 string number in d
0309+  124D             ; integer returned in A
0310+  124D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  124D             _strtoint:
0312+  124D E2            push si
0313+  124E D8            push b
0314+  124F D9            push c
0315+  1250 DA            push d
0316+  1251 07 92 10      call _strlen      ; get string length in C
0317+  1254 7E            dec c
0318+  1255 FD 4E         mov si, d
0319+  1257 12            mov a, c
0320+  1258 FD 99         shl a
0321+  125A 3B C9 13      mov d, table_power
0322+  125D 59            add d, a
0323+  125E 38 00 00      mov c, 0
0324+  1261             _strtoint_L0:
0325+  1261 F6            lodsb      ; load ASCII to al
0326+  1262 B9 00         cmp al, 0
0327+  1264 C6 77 12      je _strtoint_end
0328+  1267 6F 30         sub al, $30    ; make into integer
0329+  1269 22 00         mov ah, 0
0330+  126B 2A            mov b, [d]
0331+  126C AC            mul a, b      ; result in B since it fits in 16bits
0332+  126D 11            mov a, b
0333+  126E 28            mov b, c
0334+  126F 54            add a, b
0335+  1270 39            mov c, a
0336+  1271 63 02 00      sub d, 2
0337+  1274 0A 61 12      jmp _strtoint_L0
0338+  1277             _strtoint_end:
0339+  1277 12            mov a, c
0340+  1278 E7            pop d
0341+  1279 E6            pop c
0342+  127A E5            pop b
0343+  127B EF            pop si
0344+  127C 09            ret
0345+  127D             
0346+  127D             
0347+  127D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  127D             ; PRINT NULL TERMINATED STRING
0349+  127D             ; pointer in D
0350+  127D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  127D             _puts:
0352+  127D D7            push a
0353+  127E DA            push d
0354+  127F             _puts_L1:
0355+  127F 1E            mov al, [d]
0356+  1280 B9 00         cmp al, 0
0357+  1282 C6 8E 12      jz _puts_END
0358+  1285 23            mov ah, al
0359+  1286 19 00         mov al, 0
0360+  1288 05 03         syscall sys_io
0361+  128A 79            inc d
0362+  128B 0A 7F 12      jmp _puts_L1
0363+  128E             _puts_END:
0364+  128E E7            pop d
0365+  128F E4            pop a
0366+  1290 09            ret
0367+  1291             
0368+  1291             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1291             ; PRINT N SIZE STRING
0370+  1291             ; pointer in D
0371+  1291             ; size in C
0372+  1291             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1291             _putsn:
0374+  1291 DB            push al
0375+  1292 DA            push d
0376+  1293 D9            push c
0377+  1294             _putsn_L0:
0378+  1294 1E            mov al, [d]
0379+  1295 23            mov ah, al
0380+  1296 19 00         mov al, 0
0381+  1298 05 03         syscall sys_io
0382+  129A 79            inc d
0383+  129B 7E            dec c  
0384+  129C C2 00 00      cmp c, 0
0385+  129F C7 94 12      jne _putsn_L0
0386+  12A2             _putsn_end:
0387+  12A2 E6            pop c
0388+  12A3 E7            pop d
0389+  12A4 E8            pop al
0390+  12A5 09            ret
0391+  12A6             
0392+  12A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  12A6             ; print 16bit decimal number
0394+  12A6             ; input number in A
0395+  12A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  12A6             print_u16d:
0397+  12A6 D7            push a
0398+  12A7 D8            push b
0399+  12A8 26 10 27      mov b, 10000
0400+  12AB AE            div a, b      ; get 10000's coeff.
0401+  12AC 07 CE 12      call print_number
0402+  12AF 11            mov a, b
0403+  12B0 26 E8 03      mov b, 1000
0404+  12B3 AE            div a, b      ; get 1000's coeff.
0405+  12B4 07 CE 12      call print_number
0406+  12B7 11            mov a, b
0407+  12B8 26 64 00      mov b, 100
0408+  12BB AE            div a, b
0409+  12BC 07 CE 12      call print_number
0410+  12BF 11            mov a, b
0411+  12C0 26 0A 00      mov b, 10
0412+  12C3 AE            div a, b
0413+  12C4 07 CE 12      call print_number
0414+  12C7 1B            mov al, bl      ; 1's coeff in bl
0415+  12C8 07 CE 12      call print_number
0416+  12CB E5            pop b
0417+  12CC E4            pop a
0418+  12CD 09            ret
0419+  12CE             
0420+  12CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  12CE             ; print AL
0422+  12CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  12CE             print_number:
0424+  12CE 6A 30         add al, $30
0425+  12D0 23            mov ah, al
0426+  12D1 07 33 11      call _putchar
0427+  12D4 09            ret
0428+  12D5             
0429+  12D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  12D5             ; PRINT 16BIT HEX INTEGER
0431+  12D5             ; integer value in reg B
0432+  12D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  12D5             print_u16x:
0434+  12D5 D7            push a
0435+  12D6 D8            push b
0436+  12D7 DD            push bl
0437+  12D8 30            mov bl, bh
0438+  12D9 07 01 11      call _itoa        ; convert bh to char in A
0439+  12DC 2F            mov bl, al        ; save al
0440+  12DD 19 00         mov al, 0
0441+  12DF 05 03         syscall sys_io        ; display AH
0442+  12E1 24            mov ah, bl        ; retrieve al
0443+  12E2 19 00         mov al, 0
0444+  12E4 05 03         syscall sys_io        ; display AL
0445+  12E6             
0446+  12E6 EA            pop bl
0447+  12E7 07 01 11      call _itoa        ; convert bh to char in A
0448+  12EA 2F            mov bl, al        ; save al
0449+  12EB 19 00         mov al, 0
0450+  12ED 05 03         syscall sys_io        ; display AH
0451+  12EF 24            mov ah, bl        ; retrieve al
0452+  12F0 19 00         mov al, 0
0453+  12F2 05 03         syscall sys_io        ; display AL
0454+  12F4             
0455+  12F4 E5            pop b
0456+  12F5 E4            pop a
0457+  12F6 09            ret
0458+  12F7             
0459+  12F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  12F7             ; INPUT 16BIT HEX INTEGER
0461+  12F7             ; read 16bit integer into A
0462+  12F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  12F7             scan_u16x:
0464+  12F7 F8 10 00      enter 16
0465+  12FA D8            push b
0466+  12FB DA            push d
0467+  12FC             
0468+  12FC FA F1 FF      lea d, [bp + -15]
0469+  12FF 07 3A 11      call _gets        ; get number
0470+  1302             
0471+  1302 32            mov bl, [d]
0472+  1303 37            mov bh, bl
0473+  1304 33 01 00      mov bl, [d + 1]
0474+  1307 07 F0 10      call _atoi        ; convert to int in AL
0475+  130A 23            mov ah, al        ; move to AH
0476+  130B             
0477+  130B 33 02 00      mov bl, [d + 2]
0478+  130E 37            mov bh, bl
0479+  130F 33 03 00      mov bl, [d + 3]
0480+  1312 07 F0 10      call _atoi        ; convert to int in AL
0481+  1315             
0482+  1315 E7            pop d
0483+  1316 E5            pop b
0484+  1317 F9            leave
0485+  1318 09            ret
0486+  1319             
0487+  1319             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  1319             ; PRINT 8bit HEX INTEGER
0489+  1319             ; integer value in reg bl
0490+  1319             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  1319             print_u8x:
0492+  1319 D7            push a
0493+  131A DD            push bl
0494+  131B             
0495+  131B 07 01 11      call _itoa        ; convert bl to char in A
0496+  131E 2F            mov bl, al        ; save al
0497+  131F 19 00         mov al, 0
0498+  1321 05 03         syscall sys_io        ; display AH
0499+  1323 24            mov ah, bl        ; retrieve al
0500+  1324 19 00         mov al, 0
0501+  1326 05 03         syscall sys_io        ; display AL
0502+  1328             
0503+  1328 EA            pop bl
0504+  1329 E4            pop a
0505+  132A 09            ret
0506+  132B             
0507+  132B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  132B             ; print 8bit decimal unsigned number
0509+  132B             ; input number in AL
0510+  132B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  132B             print_u8d:
0512+  132B D7            push a
0513+  132C D8            push b
0514+  132D             
0515+  132D 22 00         mov ah, 0
0516+  132F 26 64 00      mov b, 100
0517+  1332 AE            div a, b
0518+  1333 D8            push b      ; save remainder
0519+  1334 B9 00         cmp al, 0
0520+  1336 C6 40 13      je skip100
0521+  1339 6A 30         add al, $30
0522+  133B 23            mov ah, al
0523+  133C 19 00         mov al, 0
0524+  133E 05 03         syscall sys_io  ; print coeff
0525+  1340             skip100:
0526+  1340 E4            pop a
0527+  1341 22 00         mov ah, 0
0528+  1343 26 0A 00      mov b, 10
0529+  1346 AE            div a, b
0530+  1347 D8            push b      ; save remainder
0531+  1348 B9 00         cmp al, 0
0532+  134A C6 54 13      je skip10
0533+  134D 6A 30         add al, $30
0534+  134F 23            mov ah, al
0535+  1350 19 00         mov al, 0
0536+  1352 05 03         syscall sys_io  ; print coeff
0537+  1354             skip10:
0538+  1354 E4            pop a
0539+  1355 1B            mov al, bl
0540+  1356 6A 30         add al, $30
0541+  1358 23            mov ah, al
0542+  1359 19 00         mov al, 0
0543+  135B 05 03         syscall sys_io  ; print coeff
0544+  135D E5            pop b
0545+  135E E4            pop a
0546+  135F 09            ret
0547+  1360             
0548+  1360             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  1360             ; INPUT 8BIT HEX INTEGER
0550+  1360             ; read 8bit integer into AL
0551+  1360             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  1360             scan_u8x:
0553+  1360 F8 04 00      enter 4
0554+  1363 D8            push b
0555+  1364 DA            push d
0556+  1365             
0557+  1365 FA FD FF      lea d, [bp + -3]
0558+  1368 07 3A 11      call _gets        ; get number
0559+  136B             
0560+  136B 32            mov bl, [d]
0561+  136C 37            mov bh, bl
0562+  136D 33 01 00      mov bl, [d + 1]
0563+  1370 07 F0 10      call _atoi        ; convert to int in AL
0564+  1373             
0565+  1373 E7            pop d
0566+  1374 E5            pop b
0567+  1375 F9            leave
0568+  1376 09            ret
0569+  1377             
0570+  1377             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  1377             ; input decimal number
0572+  1377             ; result in A
0573+  1377             ; 655'\0'
0574+  1377             ; low--------high
0575+  1377             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  1377             scan_u16d:
0577+  1377 F8 08 00      enter 8
0578+  137A E2            push si
0579+  137B D8            push b
0580+  137C D9            push c
0581+  137D DA            push d
0582+  137E FA F9 FF      lea d, [bp +- 7]
0583+  1381 07 3A 11      call _gets
0584+  1384 07 92 10      call _strlen      ; get string length in C
0585+  1387 7E            dec c
0586+  1388 FD 4E         mov si, d
0587+  138A 12            mov a, c
0588+  138B FD 99         shl a
0589+  138D 3B C9 13      mov d, table_power
0590+  1390 59            add d, a
0591+  1391 38 00 00      mov c, 0
0592+  1394             mul_loop:
0593+  1394 F6            lodsb      ; load ASCII to al
0594+  1395 B9 00         cmp al, 0
0595+  1397 C6 AA 13      je mul_exit
0596+  139A 6F 30         sub al, $30    ; make into integer
0597+  139C 22 00         mov ah, 0
0598+  139E 2A            mov b, [d]
0599+  139F AC            mul a, b      ; result in B since it fits in 16bits
0600+  13A0 11            mov a, b
0601+  13A1 28            mov b, c
0602+  13A2 54            add a, b
0603+  13A3 39            mov c, a
0604+  13A4 63 02 00      sub d, 2
0605+  13A7 0A 94 13      jmp mul_loop
0606+  13AA             mul_exit:
0607+  13AA 12            mov a, c
0608+  13AB E7            pop d
0609+  13AC E6            pop c
0610+  13AD E5            pop b
0611+  13AE EF            pop si
0612+  13AF F9            leave
0613+  13B0 09            ret
0614+  13B1             
0615+  13B1             
0616+  13B1 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  13B5 34 35 36 37 
0616+  13B9 38 39 41 42 
0616+  13BD 43 44 45 46 
0617+  13C1 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  13C5 1B 5B 48 00 
0618+  13C9             
0619+  13C9             table_power:
0620+  13C9 01 00         .dw 1
0621+  13CB 0A 00         .dw 10
0622+  13CD 64 00         .dw 100
0623+  13CF E8 03         .dw 1000
0624+  13D1 10 27         .dw 100002156   13D3             ; --- END INLINE ASM BLOCK
2157   13D3             
2158   13D3 F9            leave
2159   13D4 09            ret
2160   13D5             
2161   13D5             back:
2162   13D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2163   13D8             ; $t 
2164   13D8 52 02 00      sub sp, 2
2165   13DB             ;; t = token; 
2166   13DB FA FF FF      lea d, [bp + -1] ; $t         
2167   13DE 26 A5 24      mov b, _token_data ; $token                   
2168   13E1 FD 43         mov [d], b
2169   13E3             ;; while(*t++) prog--; 
2170   13E3             _while26_cond:
2171   13E3 2C FF FF      mov b, [bp + -1] ; $t             
2172   13E6 FD 79         mov g, b
2173   13E8 FD 77         inc b
2174   13EA FA FF FF      lea d, [bp + -1] ; $t
2175   13ED FD 43         mov [d], b
2176   13EF FD 27         mov b, g
2177   13F1 74            mov d, b
2178   13F2 32            mov bl, [d]
2179   13F3 A7 00         mov bh, 0
2180   13F5 C0 00 00      cmp b, 0
2181   13F8 C6 0C 14      je _while26_exit
2182   13FB             _while26_block:
2183   13FB             ;; prog--; 
2184   13FB 29 A3 24      mov b, [_prog] ; $prog           
2185   13FE FD 79         mov g, b
2186   1400 FD 7D         dec b
2187   1402 3B A3 24      mov d, _prog ; $prog
2188   1405 FD 43         mov [d], b
2189   1407 FD 27         mov b, g
2190   1409 0A E3 13      jmp _while26_cond
2191   140C             _while26_exit:
2192   140C             ;; tok = TOK_UNDEF; 
2193   140C 3B 9F 24      mov d, _tok ; $tok         
2194   140F 26 00 00      mov b, 0; TOK_UNDEF        
2195   1412 FD 43         mov [d], b
2196   1414             ;; toktype = TYPE_UNDEF; 
2197   1414 3B A1 24      mov d, _toktype ; $toktype         
2198   1417 26 00 00      mov b, 0; TYPE_UNDEF        
2199   141A FD 43         mov [d], b
2200   141C             ;; token[0] = '\0'; 
2201   141C 3B A5 24      mov d, _token_data ; $token
2202   141F D7            push a         
2203   1420 26 00 00      mov b, $0        
2204   1423 5A            add d, b
2205   1424 E4            pop a         
2206   1425 26 00 00      mov b, $0        
2207   1428 FD 3E         mov [d], bl
2208   142A F9            leave
2209   142B 09            ret
2210   142C             
2211   142C             get_path:
2212   142C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2213   142F             ; $t 
2214   142F 52 02 00      sub sp, 2
2215   1432             ;; *token = '\0'; 
2216   1432 26 A5 24      mov b, _token_data ; $token           
2217   1435 D8            push b
2218   1436 26 00 00      mov b, $0
2219   1439 E7            pop d
2220   143A FD 3E         mov [d], bl
2221   143C             ;; t = token; 
2222   143C FA FF FF      lea d, [bp + -1] ; $t         
2223   143F 26 A5 24      mov b, _token_data ; $token                   
2224   1442 FD 43         mov [d], b
2225   1444             ;; while(is_space(*prog)) prog++; 
2226   1444             _while27_cond:
2227   1444 29 A3 24      mov b, [_prog] ; $prog           
2228   1447 74            mov d, b
2229   1448 32            mov bl, [d]
2230   1449 A7 00         mov bh, 0
2231   144B DD            push bl
2232   144C 07 02 05      call is_space
2233   144F 51 01 00      add sp, 1
2234   1452 C0 00 00      cmp b, 0
2235   1455 C6 69 14      je _while27_exit
2236   1458             _while27_block:
2237   1458             ;; prog++; 
2238   1458 29 A3 24      mov b, [_prog] ; $prog           
2239   145B FD 79         mov g, b
2240   145D FD 77         inc b
2241   145F 3B A3 24      mov d, _prog ; $prog
2242   1462 FD 43         mov [d], b
2243   1464 FD 27         mov b, g
2244   1466 0A 44 14      jmp _while27_cond
2245   1469             _while27_exit:
2246   1469             ;; if(*prog == '\0'){ 
2247   1469             _if28_cond:
2248   1469 29 A3 24      mov b, [_prog] ; $prog           
2249   146C 74            mov d, b
2250   146D 32            mov bl, [d]
2251   146E A7 00         mov bh, 0
2252   1470             ; START RELATIONAL
2253   1470 D7            push a
2254   1471 11            mov a, b
2255   1472 26 00 00      mov b, $0
2256   1475 B0            cmp a, b
2257   1476 FD 71         seq ; ==
2258   1478 E4            pop a
2259   1479             ; END RELATIONAL
2260   1479 C0 00 00      cmp b, 0
2261   147C C6 84 14      je _if28_exit
2262   147F             _if28_true:
2263   147F             ;; return; 
2264   147F F9            leave
2265   1480 09            ret
2266   1481 0A 84 14      jmp _if28_exit
2267   1484             _if28_exit:
2268   1484             ;; while( 
2269   1484             _while29_cond:
2270   1484 29 A3 24      mov b, [_prog] ; $prog           
2271   1487 74            mov d, b
2272   1488 32            mov bl, [d]
2273   1489 A7 00         mov bh, 0
2274   148B             ; START RELATIONAL
2275   148B D7            push a
2276   148C 11            mov a, b
2277   148D 26 61 00      mov b, $61
2278   1490 B0            cmp a, b
2279   1491 FD 80         sge ; >=
2280   1493 E4            pop a
2281   1494             ; END RELATIONAL
2282   1494 D7            push a
2283   1495 11            mov a, b
2284   1496 29 A3 24      mov b, [_prog] ; $prog           
2285   1499 74            mov d, b
2286   149A 32            mov bl, [d]
2287   149B A7 00         mov bh, 0
2288   149D             ; START RELATIONAL
2289   149D D7            push a
2290   149E 11            mov a, b
2291   149F 26 7A 00      mov b, $7a
2292   14A2 B0            cmp a, b
2293   14A3 FD 74         sle ; <=
2294   14A5 E4            pop a
2295   14A6             ; END RELATIONAL
2296   14A6 FD A7         sand a, b ; &&
2297   14A8 E4            pop a
2298   14A9 D7            push a
2299   14AA 11            mov a, b
2300   14AB 29 A3 24      mov b, [_prog] ; $prog           
2301   14AE 74            mov d, b
2302   14AF 32            mov bl, [d]
2303   14B0 A7 00         mov bh, 0
2304   14B2             ; START RELATIONAL
2305   14B2 D7            push a
2306   14B3 11            mov a, b
2307   14B4 26 41 00      mov b, $41
2308   14B7 B0            cmp a, b
2309   14B8 FD 80         sge ; >=
2310   14BA E4            pop a
2311   14BB             ; END RELATIONAL
2312   14BB D7            push a
2313   14BC 11            mov a, b
2314   14BD 29 A3 24      mov b, [_prog] ; $prog           
2315   14C0 74            mov d, b
2316   14C1 32            mov bl, [d]
2317   14C2 A7 00         mov bh, 0
2318   14C4             ; START RELATIONAL
2319   14C4 D7            push a
2320   14C5 11            mov a, b
2321   14C6 26 5A 00      mov b, $5a
2322   14C9 B0            cmp a, b
2323   14CA FD 74         sle ; <=
2324   14CC E4            pop a
2325   14CD             ; END RELATIONAL
2326   14CD FD A7         sand a, b ; &&
2327   14CF E4            pop a
2328   14D0 FD A8         sor a, b ; ||
2329   14D2 11            mov a, b
2330   14D3 29 A3 24      mov b, [_prog] ; $prog           
2331   14D6 74            mov d, b
2332   14D7 32            mov bl, [d]
2333   14D8 A7 00         mov bh, 0
2334   14DA             ; START RELATIONAL
2335   14DA D7            push a
2336   14DB 11            mov a, b
2337   14DC 26 30 00      mov b, $30
2338   14DF B0            cmp a, b
2339   14E0 FD 80         sge ; >=
2340   14E2 E4            pop a
2341   14E3             ; END RELATIONAL
2342   14E3 D7            push a
2343   14E4 11            mov a, b
2344   14E5 29 A3 24      mov b, [_prog] ; $prog           
2345   14E8 74            mov d, b
2346   14E9 32            mov bl, [d]
2347   14EA A7 00         mov bh, 0
2348   14EC             ; START RELATIONAL
2349   14EC D7            push a
2350   14ED 11            mov a, b
2351   14EE 26 39 00      mov b, $39
2352   14F1 B0            cmp a, b
2353   14F2 FD 74         sle ; <=
2354   14F4 E4            pop a
2355   14F5             ; END RELATIONAL
2356   14F5 FD A7         sand a, b ; &&
2357   14F7 E4            pop a
2358   14F8 FD A8         sor a, b ; ||
2359   14FA 11            mov a, b
2360   14FB 29 A3 24      mov b, [_prog] ; $prog           
2361   14FE 74            mov d, b
2362   14FF 32            mov bl, [d]
2363   1500 A7 00         mov bh, 0
2364   1502             ; START RELATIONAL
2365   1502 D7            push a
2366   1503 11            mov a, b
2367   1504 26 2F 00      mov b, $2f
2368   1507 B0            cmp a, b
2369   1508 FD 71         seq ; ==
2370   150A E4            pop a
2371   150B             ; END RELATIONAL
2372   150B FD A8         sor a, b ; ||
2373   150D 11            mov a, b
2374   150E 29 A3 24      mov b, [_prog] ; $prog           
2375   1511 74            mov d, b
2376   1512 32            mov bl, [d]
2377   1513 A7 00         mov bh, 0
2378   1515             ; START RELATIONAL
2379   1515 D7            push a
2380   1516 11            mov a, b
2381   1517 26 5F 00      mov b, $5f
2382   151A B0            cmp a, b
2383   151B FD 71         seq ; ==
2384   151D E4            pop a
2385   151E             ; END RELATIONAL
2386   151E FD A8         sor a, b ; ||
2387   1520 11            mov a, b
2388   1521 29 A3 24      mov b, [_prog] ; $prog           
2389   1524 74            mov d, b
2390   1525 32            mov bl, [d]
2391   1526 A7 00         mov bh, 0
2392   1528             ; START RELATIONAL
2393   1528 D7            push a
2394   1529 11            mov a, b
2395   152A 26 2D 00      mov b, $2d
2396   152D B0            cmp a, b
2397   152E FD 71         seq ; ==
2398   1530 E4            pop a
2399   1531             ; END RELATIONAL
2400   1531 FD A8         sor a, b ; ||
2401   1533 11            mov a, b
2402   1534 29 A3 24      mov b, [_prog] ; $prog           
2403   1537 74            mov d, b
2404   1538 32            mov bl, [d]
2405   1539 A7 00         mov bh, 0
2406   153B             ; START RELATIONAL
2407   153B D7            push a
2408   153C 11            mov a, b
2409   153D 26 2E 00      mov b, $2e
2410   1540 B0            cmp a, b
2411   1541 FD 71         seq ; ==
2412   1543 E4            pop a
2413   1544             ; END RELATIONAL
2414   1544 FD A8         sor a, b ; ||
2415   1546 E4            pop a
2416   1547 C0 00 00      cmp b, 0
2417   154A C6 74 15      je _while29_exit
2418   154D             _while29_block:
2419   154D             ;; *t++ = *prog++; 
2420   154D 2C FF FF      mov b, [bp + -1] ; $t             
2421   1550 FD 79         mov g, b
2422   1552 FD 77         inc b
2423   1554 FA FF FF      lea d, [bp + -1] ; $t
2424   1557 FD 43         mov [d], b
2425   1559 FD 27         mov b, g
2426   155B D8            push b
2427   155C 29 A3 24      mov b, [_prog] ; $prog           
2428   155F FD 79         mov g, b
2429   1561 FD 77         inc b
2430   1563 3B A3 24      mov d, _prog ; $prog
2431   1566 FD 43         mov [d], b
2432   1568 FD 27         mov b, g
2433   156A 74            mov d, b
2434   156B 32            mov bl, [d]
2435   156C A7 00         mov bh, 0
2436   156E E7            pop d
2437   156F FD 3E         mov [d], bl
2438   1571 0A 84 14      jmp _while29_cond
2439   1574             _while29_exit:
2440   1574             ;; *t = '\0'; 
2441   1574 2C FF FF      mov b, [bp + -1] ; $t             
2442   1577 D8            push b
2443   1578 26 00 00      mov b, $0
2444   157B E7            pop d
2445   157C FD 3E         mov [d], bl
2446   157E F9            leave
2447   157F 09            ret
2448   1580             
2449   1580             get:
2450   1580 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2451   1583             ; $t 
2452   1583 52 02 00      sub sp, 2
2453   1586             ;; *token = '\0'; 
2454   1586 26 A5 24      mov b, _token_data ; $token           
2455   1589 D8            push b
2456   158A 26 00 00      mov b, $0
2457   158D E7            pop d
2458   158E FD 3E         mov [d], bl
2459   1590             ;; tok = 0; 
2460   1590 3B 9F 24      mov d, _tok ; $tok         
2461   1593 26 00 00      mov b, $0        
2462   1596 FD 43         mov [d], b
2463   1598             ;; toktype = 0; 
2464   1598 3B A1 24      mov d, _toktype ; $toktype         
2465   159B 26 00 00      mov b, $0        
2466   159E FD 43         mov [d], b
2467   15A0             ;; t = token; 
2468   15A0 FA FF FF      lea d, [bp + -1] ; $t         
2469   15A3 26 A5 24      mov b, _token_data ; $token                   
2470   15A6 FD 43         mov [d], b
2471   15A8             ;; while(is_space(*prog)) prog++; 
2472   15A8             _while30_cond:
2473   15A8 29 A3 24      mov b, [_prog] ; $prog           
2474   15AB 74            mov d, b
2475   15AC 32            mov bl, [d]
2476   15AD A7 00         mov bh, 0
2477   15AF DD            push bl
2478   15B0 07 02 05      call is_space
2479   15B3 51 01 00      add sp, 1
2480   15B6 C0 00 00      cmp b, 0
2481   15B9 C6 CD 15      je _while30_exit
2482   15BC             _while30_block:
2483   15BC             ;; prog++; 
2484   15BC 29 A3 24      mov b, [_prog] ; $prog           
2485   15BF FD 79         mov g, b
2486   15C1 FD 77         inc b
2487   15C3 3B A3 24      mov d, _prog ; $prog
2488   15C6 FD 43         mov [d], b
2489   15C8 FD 27         mov b, g
2490   15CA 0A A8 15      jmp _while30_cond
2491   15CD             _while30_exit:
2492   15CD             ;; if(*prog == '\0'){ 
2493   15CD             _if31_cond:
2494   15CD 29 A3 24      mov b, [_prog] ; $prog           
2495   15D0 74            mov d, b
2496   15D1 32            mov bl, [d]
2497   15D2 A7 00         mov bh, 0
2498   15D4             ; START RELATIONAL
2499   15D4 D7            push a
2500   15D5 11            mov a, b
2501   15D6 26 00 00      mov b, $0
2502   15D9 B0            cmp a, b
2503   15DA FD 71         seq ; ==
2504   15DC E4            pop a
2505   15DD             ; END RELATIONAL
2506   15DD C0 00 00      cmp b, 0
2507   15E0 C6 F0 15      je _if31_exit
2508   15E3             _if31_true:
2509   15E3             ;; toktype = END; 
2510   15E3 3B A1 24      mov d, _toktype ; $toktype         
2511   15E6 26 06 00      mov b, 6; END        
2512   15E9 FD 43         mov [d], b
2513   15EB             ;; return; 
2514   15EB F9            leave
2515   15EC 09            ret
2516   15ED 0A F0 15      jmp _if31_exit
2517   15F0             _if31_exit:
2518   15F0             ;; if(is_digit(*prog)){ 
2519   15F0             _if32_cond:
2520   15F0 29 A3 24      mov b, [_prog] ; $prog           
2521   15F3 74            mov d, b
2522   15F4 32            mov bl, [d]
2523   15F5 A7 00         mov bh, 0
2524   15F7 DD            push bl
2525   15F8 07 4A 05      call is_digit
2526   15FB 51 01 00      add sp, 1
2527   15FE C0 00 00      cmp b, 0
2528   1601 C6 56 16      je _if32_else
2529   1604             _if32_true:
2530   1604             ;; while(is_digit(*prog)){ 
2531   1604             _while33_cond:
2532   1604 29 A3 24      mov b, [_prog] ; $prog           
2533   1607 74            mov d, b
2534   1608 32            mov bl, [d]
2535   1609 A7 00         mov bh, 0
2536   160B DD            push bl
2537   160C 07 4A 05      call is_digit
2538   160F 51 01 00      add sp, 1
2539   1612 C0 00 00      cmp b, 0
2540   1615 C6 3F 16      je _while33_exit
2541   1618             _while33_block:
2542   1618             ;; *t++ = *prog++; 
2543   1618 2C FF FF      mov b, [bp + -1] ; $t             
2544   161B FD 79         mov g, b
2545   161D FD 77         inc b
2546   161F FA FF FF      lea d, [bp + -1] ; $t
2547   1622 FD 43         mov [d], b
2548   1624 FD 27         mov b, g
2549   1626 D8            push b
2550   1627 29 A3 24      mov b, [_prog] ; $prog           
2551   162A FD 79         mov g, b
2552   162C FD 77         inc b
2553   162E 3B A3 24      mov d, _prog ; $prog
2554   1631 FD 43         mov [d], b
2555   1633 FD 27         mov b, g
2556   1635 74            mov d, b
2557   1636 32            mov bl, [d]
2558   1637 A7 00         mov bh, 0
2559   1639 E7            pop d
2560   163A FD 3E         mov [d], bl
2561   163C 0A 04 16      jmp _while33_cond
2562   163F             _while33_exit:
2563   163F             ;; *t = '\0'; 
2564   163F 2C FF FF      mov b, [bp + -1] ; $t             
2565   1642 D8            push b
2566   1643 26 00 00      mov b, $0
2567   1646 E7            pop d
2568   1647 FD 3E         mov [d], bl
2569   1649             ;; toktype = INTEGER_CONST; 
2570   1649 3B A1 24      mov d, _toktype ; $toktype         
2571   164C 26 04 00      mov b, 4; INTEGER_CONST        
2572   164F FD 43         mov [d], b
2573   1651             ;; return; // return to avoid *t = '\0' line at the end of function 
2574   1651 F9            leave
2575   1652 09            ret
2576   1653 0A 33 22      jmp _if32_exit
2577   1656             _if32_else:
2578   1656             ;; if(is_alpha(*prog)){ 
2579   1656             _if34_cond:
2580   1656 29 A3 24      mov b, [_prog] ; $prog           
2581   1659 74            mov d, b
2582   165A 32            mov bl, [d]
2583   165B A7 00         mov bh, 0
2584   165D DD            push bl
2585   165E 07 70 05      call is_alpha
2586   1661 51 01 00      add sp, 1
2587   1664 C0 00 00      cmp b, 0
2588   1667 C6 CD 16      je _if34_else
2589   166A             _if34_true:
2590   166A             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
2591   166A             _while35_cond:
2592   166A 29 A3 24      mov b, [_prog] ; $prog           
2593   166D 74            mov d, b
2594   166E 32            mov bl, [d]
2595   166F A7 00         mov bh, 0
2596   1671 DD            push bl
2597   1672 07 70 05      call is_alpha
2598   1675 51 01 00      add sp, 1
2599   1678 D7            push a
2600   1679 11            mov a, b
2601   167A 29 A3 24      mov b, [_prog] ; $prog           
2602   167D 74            mov d, b
2603   167E 32            mov bl, [d]
2604   167F A7 00         mov bh, 0
2605   1681 DD            push bl
2606   1682 07 4A 05      call is_digit
2607   1685 51 01 00      add sp, 1
2608   1688 FD A8         sor a, b ; ||
2609   168A E4            pop a
2610   168B C0 00 00      cmp b, 0
2611   168E C6 B8 16      je _while35_exit
2612   1691             _while35_block:
2613   1691             ;; *t++ = *prog++; 
2614   1691 2C FF FF      mov b, [bp + -1] ; $t             
2615   1694 FD 79         mov g, b
2616   1696 FD 77         inc b
2617   1698 FA FF FF      lea d, [bp + -1] ; $t
2618   169B FD 43         mov [d], b
2619   169D FD 27         mov b, g
2620   169F D8            push b
2621   16A0 29 A3 24      mov b, [_prog] ; $prog           
2622   16A3 FD 79         mov g, b
2623   16A5 FD 77         inc b
2624   16A7 3B A3 24      mov d, _prog ; $prog
2625   16AA FD 43         mov [d], b
2626   16AC FD 27         mov b, g
2627   16AE 74            mov d, b
2628   16AF 32            mov bl, [d]
2629   16B0 A7 00         mov bh, 0
2630   16B2 E7            pop d
2631   16B3 FD 3E         mov [d], bl
2632   16B5 0A 6A 16      jmp _while35_cond
2633   16B8             _while35_exit:
2634   16B8             ;; *t = '\0'; 
2635   16B8 2C FF FF      mov b, [bp + -1] ; $t             
2636   16BB D8            push b
2637   16BC 26 00 00      mov b, $0
2638   16BF E7            pop d
2639   16C0 FD 3E         mov [d], bl
2640   16C2             ;; toktype = IDENTIFIER; 
2641   16C2 3B A1 24      mov d, _toktype ; $toktype         
2642   16C5 26 05 00      mov b, 5; IDENTIFIER        
2643   16C8 FD 43         mov [d], b
2644   16CA 0A 33 22      jmp _if34_exit
2645   16CD             _if34_else:
2646   16CD             ;; if(*prog == '\"'){ 
2647   16CD             _if36_cond:
2648   16CD 29 A3 24      mov b, [_prog] ; $prog           
2649   16D0 74            mov d, b
2650   16D1 32            mov bl, [d]
2651   16D2 A7 00         mov bh, 0
2652   16D4             ; START RELATIONAL
2653   16D4 D7            push a
2654   16D5 11            mov a, b
2655   16D6 26 22 00      mov b, $22
2656   16D9 B0            cmp a, b
2657   16DA FD 71         seq ; ==
2658   16DC E4            pop a
2659   16DD             ; END RELATIONAL
2660   16DD C0 00 00      cmp b, 0
2661   16E0 C6 AF 17      je _if36_else
2662   16E3             _if36_true:
2663   16E3             ;; *t++ = '\"'; 
2664   16E3 2C FF FF      mov b, [bp + -1] ; $t             
2665   16E6 FD 79         mov g, b
2666   16E8 FD 77         inc b
2667   16EA FA FF FF      lea d, [bp + -1] ; $t
2668   16ED FD 43         mov [d], b
2669   16EF FD 27         mov b, g
2670   16F1 D8            push b
2671   16F2 26 22 00      mov b, $22
2672   16F5 E7            pop d
2673   16F6 FD 3E         mov [d], bl
2674   16F8             ;; prog++; 
2675   16F8 29 A3 24      mov b, [_prog] ; $prog           
2676   16FB FD 79         mov g, b
2677   16FD FD 77         inc b
2678   16FF 3B A3 24      mov d, _prog ; $prog
2679   1702 FD 43         mov [d], b
2680   1704 FD 27         mov b, g
2681   1706             ;; while(*prog != '\"' && *prog){ 
2682   1706             _while37_cond:
2683   1706 29 A3 24      mov b, [_prog] ; $prog           
2684   1709 74            mov d, b
2685   170A 32            mov bl, [d]
2686   170B A7 00         mov bh, 0
2687   170D             ; START RELATIONAL
2688   170D D7            push a
2689   170E 11            mov a, b
2690   170F 26 22 00      mov b, $22
2691   1712 B0            cmp a, b
2692   1713 FD 72         sneq ; !=
2693   1715 E4            pop a
2694   1716             ; END RELATIONAL
2695   1716 D7            push a
2696   1717 11            mov a, b
2697   1718 29 A3 24      mov b, [_prog] ; $prog           
2698   171B 74            mov d, b
2699   171C 32            mov bl, [d]
2700   171D A7 00         mov bh, 0
2701   171F FD A7         sand a, b ; &&
2702   1721 E4            pop a
2703   1722 C0 00 00      cmp b, 0
2704   1725 C6 4F 17      je _while37_exit
2705   1728             _while37_block:
2706   1728             ;; *t++ = *prog++; 
2707   1728 2C FF FF      mov b, [bp + -1] ; $t             
2708   172B FD 79         mov g, b
2709   172D FD 77         inc b
2710   172F FA FF FF      lea d, [bp + -1] ; $t
2711   1732 FD 43         mov [d], b
2712   1734 FD 27         mov b, g
2713   1736 D8            push b
2714   1737 29 A3 24      mov b, [_prog] ; $prog           
2715   173A FD 79         mov g, b
2716   173C FD 77         inc b
2717   173E 3B A3 24      mov d, _prog ; $prog
2718   1741 FD 43         mov [d], b
2719   1743 FD 27         mov b, g
2720   1745 74            mov d, b
2721   1746 32            mov bl, [d]
2722   1747 A7 00         mov bh, 0
2723   1749 E7            pop d
2724   174A FD 3E         mov [d], bl
2725   174C 0A 06 17      jmp _while37_cond
2726   174F             _while37_exit:
2727   174F             ;; if(*prog != '\"') error("Double quotes expected"); 
2728   174F             _if38_cond:
2729   174F 29 A3 24      mov b, [_prog] ; $prog           
2730   1752 74            mov d, b
2731   1753 32            mov bl, [d]
2732   1754 A7 00         mov bh, 0
2733   1756             ; START RELATIONAL
2734   1756 D7            push a
2735   1757 11            mov a, b
2736   1758 26 22 00      mov b, $22
2737   175B B0            cmp a, b
2738   175C FD 72         sneq ; !=
2739   175E E4            pop a
2740   175F             ; END RELATIONAL
2741   175F C0 00 00      cmp b, 0
2742   1762 C6 74 17      je _if38_exit
2743   1765             _if38_true:
2744   1765             ;; error("Double quotes expected"); 
2745   1765 26 1C 27      mov b, __s4 ; "Double quotes expected"
2746   1768 FD AB         swp b
2747   176A D8            push b
2748   176B 07 76 24      call error
2749   176E 51 02 00      add sp, 2
2750   1771 0A 74 17      jmp _if38_exit
2751   1774             _if38_exit:
2752   1774             ;; *t++ = '\"'; 
2753   1774 2C FF FF      mov b, [bp + -1] ; $t             
2754   1777 FD 79         mov g, b
2755   1779 FD 77         inc b
2756   177B FA FF FF      lea d, [bp + -1] ; $t
2757   177E FD 43         mov [d], b
2758   1780 FD 27         mov b, g
2759   1782 D8            push b
2760   1783 26 22 00      mov b, $22
2761   1786 E7            pop d
2762   1787 FD 3E         mov [d], bl
2763   1789             ;; prog++; 
2764   1789 29 A3 24      mov b, [_prog] ; $prog           
2765   178C FD 79         mov g, b
2766   178E FD 77         inc b
2767   1790 3B A3 24      mov d, _prog ; $prog
2768   1793 FD 43         mov [d], b
2769   1795 FD 27         mov b, g
2770   1797             ;; toktype = STRING_CONST; 
2771   1797 3B A1 24      mov d, _toktype ; $toktype         
2772   179A 26 03 00      mov b, 3; STRING_CONST        
2773   179D FD 43         mov [d], b
2774   179F             ;; *t = '\0'; 
2775   179F 2C FF FF      mov b, [bp + -1] ; $t             
2776   17A2 D8            push b
2777   17A3 26 00 00      mov b, $0
2778   17A6 E7            pop d
2779   17A7 FD 3E         mov [d], bl
2780   17A9             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
2781   17A9 07 3F 22      call convert_constant
2782   17AC 0A 33 22      jmp _if36_exit
2783   17AF             _if36_else:
2784   17AF             ;; if(*prog == '#'){ 
2785   17AF             _if39_cond:
2786   17AF 29 A3 24      mov b, [_prog] ; $prog           
2787   17B2 74            mov d, b
2788   17B3 32            mov bl, [d]
2789   17B4 A7 00         mov bh, 0
2790   17B6             ; START RELATIONAL
2791   17B6 D7            push a
2792   17B7 11            mov a, b
2793   17B8 26 23 00      mov b, $23
2794   17BB B0            cmp a, b
2795   17BC FD 71         seq ; ==
2796   17BE E4            pop a
2797   17BF             ; END RELATIONAL
2798   17BF C0 00 00      cmp b, 0
2799   17C2 C6 FC 17      je _if39_else
2800   17C5             _if39_true:
2801   17C5             ;; *t++ = *prog++; 
2802   17C5 2C FF FF      mov b, [bp + -1] ; $t             
2803   17C8 FD 79         mov g, b
2804   17CA FD 77         inc b
2805   17CC FA FF FF      lea d, [bp + -1] ; $t
2806   17CF FD 43         mov [d], b
2807   17D1 FD 27         mov b, g
2808   17D3 D8            push b
2809   17D4 29 A3 24      mov b, [_prog] ; $prog           
2810   17D7 FD 79         mov g, b
2811   17D9 FD 77         inc b
2812   17DB 3B A3 24      mov d, _prog ; $prog
2813   17DE FD 43         mov [d], b
2814   17E0 FD 27         mov b, g
2815   17E2 74            mov d, b
2816   17E3 32            mov bl, [d]
2817   17E4 A7 00         mov bh, 0
2818   17E6 E7            pop d
2819   17E7 FD 3E         mov [d], bl
2820   17E9             ;; tok = HASH; 
2821   17E9 3B 9F 24      mov d, _tok ; $tok         
2822   17EC 26 15 00      mov b, 21; HASH        
2823   17EF FD 43         mov [d], b
2824   17F1             ;; toktype = DELIMITER;   
2825   17F1 3B A1 24      mov d, _toktype ; $toktype         
2826   17F4 26 01 00      mov b, 1; DELIMITER        
2827   17F7 FD 43         mov [d], b
2828   17F9 0A 33 22      jmp _if39_exit
2829   17FC             _if39_else:
2830   17FC             ;; if(*prog == '{'){ 
2831   17FC             _if40_cond:
2832   17FC 29 A3 24      mov b, [_prog] ; $prog           
2833   17FF 74            mov d, b
2834   1800 32            mov bl, [d]
2835   1801 A7 00         mov bh, 0
2836   1803             ; START RELATIONAL
2837   1803 D7            push a
2838   1804 11            mov a, b
2839   1805 26 7B 00      mov b, $7b
2840   1808 B0            cmp a, b
2841   1809 FD 71         seq ; ==
2842   180B E4            pop a
2843   180C             ; END RELATIONAL
2844   180C C0 00 00      cmp b, 0
2845   180F C6 49 18      je _if40_else
2846   1812             _if40_true:
2847   1812             ;; *t++ = *prog++; 
2848   1812 2C FF FF      mov b, [bp + -1] ; $t             
2849   1815 FD 79         mov g, b
2850   1817 FD 77         inc b
2851   1819 FA FF FF      lea d, [bp + -1] ; $t
2852   181C FD 43         mov [d], b
2853   181E FD 27         mov b, g
2854   1820 D8            push b
2855   1821 29 A3 24      mov b, [_prog] ; $prog           
2856   1824 FD 79         mov g, b
2857   1826 FD 77         inc b
2858   1828 3B A3 24      mov d, _prog ; $prog
2859   182B FD 43         mov [d], b
2860   182D FD 27         mov b, g
2861   182F 74            mov d, b
2862   1830 32            mov bl, [d]
2863   1831 A7 00         mov bh, 0
2864   1833 E7            pop d
2865   1834 FD 3E         mov [d], bl
2866   1836             ;; tok = OPENING_BRACE; 
2867   1836 3B 9F 24      mov d, _tok ; $tok         
2868   1839 26 1E 00      mov b, 30; OPENING_BRACE        
2869   183C FD 43         mov [d], b
2870   183E             ;; toktype = DELIMITER;   
2871   183E 3B A1 24      mov d, _toktype ; $toktype         
2872   1841 26 01 00      mov b, 1; DELIMITER        
2873   1844 FD 43         mov [d], b
2874   1846 0A 33 22      jmp _if40_exit
2875   1849             _if40_else:
2876   1849             ;; if(*prog == '}'){ 
2877   1849             _if41_cond:
2878   1849 29 A3 24      mov b, [_prog] ; $prog           
2879   184C 74            mov d, b
2880   184D 32            mov bl, [d]
2881   184E A7 00         mov bh, 0
2882   1850             ; START RELATIONAL
2883   1850 D7            push a
2884   1851 11            mov a, b
2885   1852 26 7D 00      mov b, $7d
2886   1855 B0            cmp a, b
2887   1856 FD 71         seq ; ==
2888   1858 E4            pop a
2889   1859             ; END RELATIONAL
2890   1859 C0 00 00      cmp b, 0
2891   185C C6 96 18      je _if41_else
2892   185F             _if41_true:
2893   185F             ;; *t++ = *prog++; 
2894   185F 2C FF FF      mov b, [bp + -1] ; $t             
2895   1862 FD 79         mov g, b
2896   1864 FD 77         inc b
2897   1866 FA FF FF      lea d, [bp + -1] ; $t
2898   1869 FD 43         mov [d], b
2899   186B FD 27         mov b, g
2900   186D D8            push b
2901   186E 29 A3 24      mov b, [_prog] ; $prog           
2902   1871 FD 79         mov g, b
2903   1873 FD 77         inc b
2904   1875 3B A3 24      mov d, _prog ; $prog
2905   1878 FD 43         mov [d], b
2906   187A FD 27         mov b, g
2907   187C 74            mov d, b
2908   187D 32            mov bl, [d]
2909   187E A7 00         mov bh, 0
2910   1880 E7            pop d
2911   1881 FD 3E         mov [d], bl
2912   1883             ;; tok = CLOSING_BRACE; 
2913   1883 3B 9F 24      mov d, _tok ; $tok         
2914   1886 26 1F 00      mov b, 31; CLOSING_BRACE        
2915   1889 FD 43         mov [d], b
2916   188B             ;; toktype = DELIMITER;   
2917   188B 3B A1 24      mov d, _toktype ; $toktype         
2918   188E 26 01 00      mov b, 1; DELIMITER        
2919   1891 FD 43         mov [d], b
2920   1893 0A 33 22      jmp _if41_exit
2921   1896             _if41_else:
2922   1896             ;; if(*prog == '['){ 
2923   1896             _if42_cond:
2924   1896 29 A3 24      mov b, [_prog] ; $prog           
2925   1899 74            mov d, b
2926   189A 32            mov bl, [d]
2927   189B A7 00         mov bh, 0
2928   189D             ; START RELATIONAL
2929   189D D7            push a
2930   189E 11            mov a, b
2931   189F 26 5B 00      mov b, $5b
2932   18A2 B0            cmp a, b
2933   18A3 FD 71         seq ; ==
2934   18A5 E4            pop a
2935   18A6             ; END RELATIONAL
2936   18A6 C0 00 00      cmp b, 0
2937   18A9 C6 E3 18      je _if42_else
2938   18AC             _if42_true:
2939   18AC             ;; *t++ = *prog++; 
2940   18AC 2C FF FF      mov b, [bp + -1] ; $t             
2941   18AF FD 79         mov g, b
2942   18B1 FD 77         inc b
2943   18B3 FA FF FF      lea d, [bp + -1] ; $t
2944   18B6 FD 43         mov [d], b
2945   18B8 FD 27         mov b, g
2946   18BA D8            push b
2947   18BB 29 A3 24      mov b, [_prog] ; $prog           
2948   18BE FD 79         mov g, b
2949   18C0 FD 77         inc b
2950   18C2 3B A3 24      mov d, _prog ; $prog
2951   18C5 FD 43         mov [d], b
2952   18C7 FD 27         mov b, g
2953   18C9 74            mov d, b
2954   18CA 32            mov bl, [d]
2955   18CB A7 00         mov bh, 0
2956   18CD E7            pop d
2957   18CE FD 3E         mov [d], bl
2958   18D0             ;; tok = OPENING_BRACKET; 
2959   18D0 3B 9F 24      mov d, _tok ; $tok         
2960   18D3 26 20 00      mov b, 32; OPENING_BRACKET        
2961   18D6 FD 43         mov [d], b
2962   18D8             ;; toktype = DELIMITER;   
2963   18D8 3B A1 24      mov d, _toktype ; $toktype         
2964   18DB 26 01 00      mov b, 1; DELIMITER        
2965   18DE FD 43         mov [d], b
2966   18E0 0A 33 22      jmp _if42_exit
2967   18E3             _if42_else:
2968   18E3             ;; if(*prog == ']'){ 
2969   18E3             _if43_cond:
2970   18E3 29 A3 24      mov b, [_prog] ; $prog           
2971   18E6 74            mov d, b
2972   18E7 32            mov bl, [d]
2973   18E8 A7 00         mov bh, 0
2974   18EA             ; START RELATIONAL
2975   18EA D7            push a
2976   18EB 11            mov a, b
2977   18EC 26 5D 00      mov b, $5d
2978   18EF B0            cmp a, b
2979   18F0 FD 71         seq ; ==
2980   18F2 E4            pop a
2981   18F3             ; END RELATIONAL
2982   18F3 C0 00 00      cmp b, 0
2983   18F6 C6 30 19      je _if43_else
2984   18F9             _if43_true:
2985   18F9             ;; *t++ = *prog++; 
2986   18F9 2C FF FF      mov b, [bp + -1] ; $t             
2987   18FC FD 79         mov g, b
2988   18FE FD 77         inc b
2989   1900 FA FF FF      lea d, [bp + -1] ; $t
2990   1903 FD 43         mov [d], b
2991   1905 FD 27         mov b, g
2992   1907 D8            push b
2993   1908 29 A3 24      mov b, [_prog] ; $prog           
2994   190B FD 79         mov g, b
2995   190D FD 77         inc b
2996   190F 3B A3 24      mov d, _prog ; $prog
2997   1912 FD 43         mov [d], b
2998   1914 FD 27         mov b, g
2999   1916 74            mov d, b
3000   1917 32            mov bl, [d]
3001   1918 A7 00         mov bh, 0
3002   191A E7            pop d
3003   191B FD 3E         mov [d], bl
3004   191D             ;; tok = CLOSING_BRACKET; 
3005   191D 3B 9F 24      mov d, _tok ; $tok         
3006   1920 26 21 00      mov b, 33; CLOSING_BRACKET        
3007   1923 FD 43         mov [d], b
3008   1925             ;; toktype = DELIMITER;   
3009   1925 3B A1 24      mov d, _toktype ; $toktype         
3010   1928 26 01 00      mov b, 1; DELIMITER        
3011   192B FD 43         mov [d], b
3012   192D 0A 33 22      jmp _if43_exit
3013   1930             _if43_else:
3014   1930             ;; if(*prog == '='){ 
3015   1930             _if44_cond:
3016   1930 29 A3 24      mov b, [_prog] ; $prog           
3017   1933 74            mov d, b
3018   1934 32            mov bl, [d]
3019   1935 A7 00         mov bh, 0
3020   1937             ; START RELATIONAL
3021   1937 D7            push a
3022   1938 11            mov a, b
3023   1939 26 3D 00      mov b, $3d
3024   193C B0            cmp a, b
3025   193D FD 71         seq ; ==
3026   193F E4            pop a
3027   1940             ; END RELATIONAL
3028   1940 C0 00 00      cmp b, 0
3029   1943 C6 C2 19      je _if44_else
3030   1946             _if44_true:
3031   1946             ;; *t++ = *prog++; 
3032   1946 2C FF FF      mov b, [bp + -1] ; $t             
3033   1949 FD 79         mov g, b
3034   194B FD 77         inc b
3035   194D FA FF FF      lea d, [bp + -1] ; $t
3036   1950 FD 43         mov [d], b
3037   1952 FD 27         mov b, g
3038   1954 D8            push b
3039   1955 29 A3 24      mov b, [_prog] ; $prog           
3040   1958 FD 79         mov g, b
3041   195A FD 77         inc b
3042   195C 3B A3 24      mov d, _prog ; $prog
3043   195F FD 43         mov [d], b
3044   1961 FD 27         mov b, g
3045   1963 74            mov d, b
3046   1964 32            mov bl, [d]
3047   1965 A7 00         mov bh, 0
3048   1967 E7            pop d
3049   1968 FD 3E         mov [d], bl
3050   196A             ;; if (*prog == '='){ 
3051   196A             _if45_cond:
3052   196A 29 A3 24      mov b, [_prog] ; $prog           
3053   196D 74            mov d, b
3054   196E 32            mov bl, [d]
3055   196F A7 00         mov bh, 0
3056   1971             ; START RELATIONAL
3057   1971 D7            push a
3058   1972 11            mov a, b
3059   1973 26 3D 00      mov b, $3d
3060   1976 B0            cmp a, b
3061   1977 FD 71         seq ; ==
3062   1979 E4            pop a
3063   197A             ; END RELATIONAL
3064   197A C0 00 00      cmp b, 0
3065   197D C6 AF 19      je _if45_else
3066   1980             _if45_true:
3067   1980             ;; *t++ = *prog++; 
3068   1980 2C FF FF      mov b, [bp + -1] ; $t             
3069   1983 FD 79         mov g, b
3070   1985 FD 77         inc b
3071   1987 FA FF FF      lea d, [bp + -1] ; $t
3072   198A FD 43         mov [d], b
3073   198C FD 27         mov b, g
3074   198E D8            push b
3075   198F 29 A3 24      mov b, [_prog] ; $prog           
3076   1992 FD 79         mov g, b
3077   1994 FD 77         inc b
3078   1996 3B A3 24      mov d, _prog ; $prog
3079   1999 FD 43         mov [d], b
3080   199B FD 27         mov b, g
3081   199D 74            mov d, b
3082   199E 32            mov bl, [d]
3083   199F A7 00         mov bh, 0
3084   19A1 E7            pop d
3085   19A2 FD 3E         mov [d], bl
3086   19A4             ;; tok = EQUAL; 
3087   19A4 3B 9F 24      mov d, _tok ; $tok         
3088   19A7 26 08 00      mov b, 8; EQUAL        
3089   19AA FD 43         mov [d], b
3090   19AC 0A B7 19      jmp _if45_exit
3091   19AF             _if45_else:
3092   19AF             ;; tok = ASSIGNMENT; 
3093   19AF 3B 9F 24      mov d, _tok ; $tok         
3094   19B2 26 11 00      mov b, 17; ASSIGNMENT        
3095   19B5 FD 43         mov [d], b
3096   19B7             _if45_exit:
3097   19B7             ;; toktype = DELIMITER;   
3098   19B7 3B A1 24      mov d, _toktype ; $toktype         
3099   19BA 26 01 00      mov b, 1; DELIMITER        
3100   19BD FD 43         mov [d], b
3101   19BF 0A 33 22      jmp _if44_exit
3102   19C2             _if44_else:
3103   19C2             ;; if(*prog == '&'){ 
3104   19C2             _if46_cond:
3105   19C2 29 A3 24      mov b, [_prog] ; $prog           
3106   19C5 74            mov d, b
3107   19C6 32            mov bl, [d]
3108   19C7 A7 00         mov bh, 0
3109   19C9             ; START RELATIONAL
3110   19C9 D7            push a
3111   19CA 11            mov a, b
3112   19CB 26 26 00      mov b, $26
3113   19CE B0            cmp a, b
3114   19CF FD 71         seq ; ==
3115   19D1 E4            pop a
3116   19D2             ; END RELATIONAL
3117   19D2 C0 00 00      cmp b, 0
3118   19D5 C6 54 1A      je _if46_else
3119   19D8             _if46_true:
3120   19D8             ;; *t++ = *prog++; 
3121   19D8 2C FF FF      mov b, [bp + -1] ; $t             
3122   19DB FD 79         mov g, b
3123   19DD FD 77         inc b
3124   19DF FA FF FF      lea d, [bp + -1] ; $t
3125   19E2 FD 43         mov [d], b
3126   19E4 FD 27         mov b, g
3127   19E6 D8            push b
3128   19E7 29 A3 24      mov b, [_prog] ; $prog           
3129   19EA FD 79         mov g, b
3130   19EC FD 77         inc b
3131   19EE 3B A3 24      mov d, _prog ; $prog
3132   19F1 FD 43         mov [d], b
3133   19F3 FD 27         mov b, g
3134   19F5 74            mov d, b
3135   19F6 32            mov bl, [d]
3136   19F7 A7 00         mov bh, 0
3137   19F9 E7            pop d
3138   19FA FD 3E         mov [d], bl
3139   19FC             ;; if(*prog == '&'){ 
3140   19FC             _if47_cond:
3141   19FC 29 A3 24      mov b, [_prog] ; $prog           
3142   19FF 74            mov d, b
3143   1A00 32            mov bl, [d]
3144   1A01 A7 00         mov bh, 0
3145   1A03             ; START RELATIONAL
3146   1A03 D7            push a
3147   1A04 11            mov a, b
3148   1A05 26 26 00      mov b, $26
3149   1A08 B0            cmp a, b
3150   1A09 FD 71         seq ; ==
3151   1A0B E4            pop a
3152   1A0C             ; END RELATIONAL
3153   1A0C C0 00 00      cmp b, 0
3154   1A0F C6 41 1A      je _if47_else
3155   1A12             _if47_true:
3156   1A12             ;; *t++ = *prog++; 
3157   1A12 2C FF FF      mov b, [bp + -1] ; $t             
3158   1A15 FD 79         mov g, b
3159   1A17 FD 77         inc b
3160   1A19 FA FF FF      lea d, [bp + -1] ; $t
3161   1A1C FD 43         mov [d], b
3162   1A1E FD 27         mov b, g
3163   1A20 D8            push b
3164   1A21 29 A3 24      mov b, [_prog] ; $prog           
3165   1A24 FD 79         mov g, b
3166   1A26 FD 77         inc b
3167   1A28 3B A3 24      mov d, _prog ; $prog
3168   1A2B FD 43         mov [d], b
3169   1A2D FD 27         mov b, g
3170   1A2F 74            mov d, b
3171   1A30 32            mov bl, [d]
3172   1A31 A7 00         mov bh, 0
3173   1A33 E7            pop d
3174   1A34 FD 3E         mov [d], bl
3175   1A36             ;; tok = LOGICAL_AND; 
3176   1A36 3B 9F 24      mov d, _tok ; $tok         
3177   1A39 26 0E 00      mov b, 14; LOGICAL_AND        
3178   1A3C FD 43         mov [d], b
3179   1A3E 0A 49 1A      jmp _if47_exit
3180   1A41             _if47_else:
3181   1A41             ;; tok = AMPERSAND; 
3182   1A41 3B 9F 24      mov d, _tok ; $tok         
3183   1A44 26 16 00      mov b, 22; AMPERSAND        
3184   1A47 FD 43         mov [d], b
3185   1A49             _if47_exit:
3186   1A49             ;; toktype = DELIMITER;   
3187   1A49 3B A1 24      mov d, _toktype ; $toktype         
3188   1A4C 26 01 00      mov b, 1; DELIMITER        
3189   1A4F FD 43         mov [d], b
3190   1A51 0A 33 22      jmp _if46_exit
3191   1A54             _if46_else:
3192   1A54             ;; if(*prog == '|'){ 
3193   1A54             _if48_cond:
3194   1A54 29 A3 24      mov b, [_prog] ; $prog           
3195   1A57 74            mov d, b
3196   1A58 32            mov bl, [d]
3197   1A59 A7 00         mov bh, 0
3198   1A5B             ; START RELATIONAL
3199   1A5B D7            push a
3200   1A5C 11            mov a, b
3201   1A5D 26 7C 00      mov b, $7c
3202   1A60 B0            cmp a, b
3203   1A61 FD 71         seq ; ==
3204   1A63 E4            pop a
3205   1A64             ; END RELATIONAL
3206   1A64 C0 00 00      cmp b, 0
3207   1A67 C6 E6 1A      je _if48_else
3208   1A6A             _if48_true:
3209   1A6A             ;; *t++ = *prog++; 
3210   1A6A 2C FF FF      mov b, [bp + -1] ; $t             
3211   1A6D FD 79         mov g, b
3212   1A6F FD 77         inc b
3213   1A71 FA FF FF      lea d, [bp + -1] ; $t
3214   1A74 FD 43         mov [d], b
3215   1A76 FD 27         mov b, g
3216   1A78 D8            push b
3217   1A79 29 A3 24      mov b, [_prog] ; $prog           
3218   1A7C FD 79         mov g, b
3219   1A7E FD 77         inc b
3220   1A80 3B A3 24      mov d, _prog ; $prog
3221   1A83 FD 43         mov [d], b
3222   1A85 FD 27         mov b, g
3223   1A87 74            mov d, b
3224   1A88 32            mov bl, [d]
3225   1A89 A7 00         mov bh, 0
3226   1A8B E7            pop d
3227   1A8C FD 3E         mov [d], bl
3228   1A8E             ;; if (*prog == '|'){ 
3229   1A8E             _if49_cond:
3230   1A8E 29 A3 24      mov b, [_prog] ; $prog           
3231   1A91 74            mov d, b
3232   1A92 32            mov bl, [d]
3233   1A93 A7 00         mov bh, 0
3234   1A95             ; START RELATIONAL
3235   1A95 D7            push a
3236   1A96 11            mov a, b
3237   1A97 26 7C 00      mov b, $7c
3238   1A9A B0            cmp a, b
3239   1A9B FD 71         seq ; ==
3240   1A9D E4            pop a
3241   1A9E             ; END RELATIONAL
3242   1A9E C0 00 00      cmp b, 0
3243   1AA1 C6 D3 1A      je _if49_else
3244   1AA4             _if49_true:
3245   1AA4             ;; *t++ = *prog++; 
3246   1AA4 2C FF FF      mov b, [bp + -1] ; $t             
3247   1AA7 FD 79         mov g, b
3248   1AA9 FD 77         inc b
3249   1AAB FA FF FF      lea d, [bp + -1] ; $t
3250   1AAE FD 43         mov [d], b
3251   1AB0 FD 27         mov b, g
3252   1AB2 D8            push b
3253   1AB3 29 A3 24      mov b, [_prog] ; $prog           
3254   1AB6 FD 79         mov g, b
3255   1AB8 FD 77         inc b
3256   1ABA 3B A3 24      mov d, _prog ; $prog
3257   1ABD FD 43         mov [d], b
3258   1ABF FD 27         mov b, g
3259   1AC1 74            mov d, b
3260   1AC2 32            mov bl, [d]
3261   1AC3 A7 00         mov bh, 0
3262   1AC5 E7            pop d
3263   1AC6 FD 3E         mov [d], bl
3264   1AC8             ;; tok = LOGICAL_OR; 
3265   1AC8 3B 9F 24      mov d, _tok ; $tok         
3266   1ACB 26 0F 00      mov b, 15; LOGICAL_OR        
3267   1ACE FD 43         mov [d], b
3268   1AD0 0A DB 1A      jmp _if49_exit
3269   1AD3             _if49_else:
3270   1AD3             ;; tok = BITWISE_OR; 
3271   1AD3 3B 9F 24      mov d, _tok ; $tok         
3272   1AD6 26 18 00      mov b, 24; BITWISE_OR        
3273   1AD9 FD 43         mov [d], b
3274   1ADB             _if49_exit:
3275   1ADB             ;; toktype = DELIMITER;   
3276   1ADB 3B A1 24      mov d, _toktype ; $toktype         
3277   1ADE 26 01 00      mov b, 1; DELIMITER        
3278   1AE1 FD 43         mov [d], b
3279   1AE3 0A 33 22      jmp _if48_exit
3280   1AE6             _if48_else:
3281   1AE6             ;; if(*prog == '~'){ 
3282   1AE6             _if50_cond:
3283   1AE6 29 A3 24      mov b, [_prog] ; $prog           
3284   1AE9 74            mov d, b
3285   1AEA 32            mov bl, [d]
3286   1AEB A7 00         mov bh, 0
3287   1AED             ; START RELATIONAL
3288   1AED D7            push a
3289   1AEE 11            mov a, b
3290   1AEF 26 7E 00      mov b, $7e
3291   1AF2 B0            cmp a, b
3292   1AF3 FD 71         seq ; ==
3293   1AF5 E4            pop a
3294   1AF6             ; END RELATIONAL
3295   1AF6 C0 00 00      cmp b, 0
3296   1AF9 C6 33 1B      je _if50_else
3297   1AFC             _if50_true:
3298   1AFC             ;; *t++ = *prog++; 
3299   1AFC 2C FF FF      mov b, [bp + -1] ; $t             
3300   1AFF FD 79         mov g, b
3301   1B01 FD 77         inc b
3302   1B03 FA FF FF      lea d, [bp + -1] ; $t
3303   1B06 FD 43         mov [d], b
3304   1B08 FD 27         mov b, g
3305   1B0A D8            push b
3306   1B0B 29 A3 24      mov b, [_prog] ; $prog           
3307   1B0E FD 79         mov g, b
3308   1B10 FD 77         inc b
3309   1B12 3B A3 24      mov d, _prog ; $prog
3310   1B15 FD 43         mov [d], b
3311   1B17 FD 27         mov b, g
3312   1B19 74            mov d, b
3313   1B1A 32            mov bl, [d]
3314   1B1B A7 00         mov bh, 0
3315   1B1D E7            pop d
3316   1B1E FD 3E         mov [d], bl
3317   1B20             ;; tok = BITWISE_NOT; 
3318   1B20 3B 9F 24      mov d, _tok ; $tok         
3319   1B23 26 19 00      mov b, 25; BITWISE_NOT        
3320   1B26 FD 43         mov [d], b
3321   1B28             ;; toktype = DELIMITER;   
3322   1B28 3B A1 24      mov d, _toktype ; $toktype         
3323   1B2B 26 01 00      mov b, 1; DELIMITER        
3324   1B2E FD 43         mov [d], b
3325   1B30 0A 33 22      jmp _if50_exit
3326   1B33             _if50_else:
3327   1B33             ;; if(*prog == '<'){ 
3328   1B33             _if51_cond:
3329   1B33 29 A3 24      mov b, [_prog] ; $prog           
3330   1B36 74            mov d, b
3331   1B37 32            mov bl, [d]
3332   1B38 A7 00         mov bh, 0
3333   1B3A             ; START RELATIONAL
3334   1B3A D7            push a
3335   1B3B 11            mov a, b
3336   1B3C 26 3C 00      mov b, $3c
3337   1B3F B0            cmp a, b
3338   1B40 FD 71         seq ; ==
3339   1B42 E4            pop a
3340   1B43             ; END RELATIONAL
3341   1B43 C0 00 00      cmp b, 0
3342   1B46 C6 0A 1C      je _if51_else
3343   1B49             _if51_true:
3344   1B49             ;; *t++ = *prog++; 
3345   1B49 2C FF FF      mov b, [bp + -1] ; $t             
3346   1B4C FD 79         mov g, b
3347   1B4E FD 77         inc b
3348   1B50 FA FF FF      lea d, [bp + -1] ; $t
3349   1B53 FD 43         mov [d], b
3350   1B55 FD 27         mov b, g
3351   1B57 D8            push b
3352   1B58 29 A3 24      mov b, [_prog] ; $prog           
3353   1B5B FD 79         mov g, b
3354   1B5D FD 77         inc b
3355   1B5F 3B A3 24      mov d, _prog ; $prog
3356   1B62 FD 43         mov [d], b
3357   1B64 FD 27         mov b, g
3358   1B66 74            mov d, b
3359   1B67 32            mov bl, [d]
3360   1B68 A7 00         mov bh, 0
3361   1B6A E7            pop d
3362   1B6B FD 3E         mov [d], bl
3363   1B6D             ;; if (*prog == '='){ 
3364   1B6D             _if52_cond:
3365   1B6D 29 A3 24      mov b, [_prog] ; $prog           
3366   1B70 74            mov d, b
3367   1B71 32            mov bl, [d]
3368   1B72 A7 00         mov bh, 0
3369   1B74             ; START RELATIONAL
3370   1B74 D7            push a
3371   1B75 11            mov a, b
3372   1B76 26 3D 00      mov b, $3d
3373   1B79 B0            cmp a, b
3374   1B7A FD 71         seq ; ==
3375   1B7C E4            pop a
3376   1B7D             ; END RELATIONAL
3377   1B7D C0 00 00      cmp b, 0
3378   1B80 C6 B2 1B      je _if52_else
3379   1B83             _if52_true:
3380   1B83             ;; *t++ = *prog++; 
3381   1B83 2C FF FF      mov b, [bp + -1] ; $t             
3382   1B86 FD 79         mov g, b
3383   1B88 FD 77         inc b
3384   1B8A FA FF FF      lea d, [bp + -1] ; $t
3385   1B8D FD 43         mov [d], b
3386   1B8F FD 27         mov b, g
3387   1B91 D8            push b
3388   1B92 29 A3 24      mov b, [_prog] ; $prog           
3389   1B95 FD 79         mov g, b
3390   1B97 FD 77         inc b
3391   1B99 3B A3 24      mov d, _prog ; $prog
3392   1B9C FD 43         mov [d], b
3393   1B9E FD 27         mov b, g
3394   1BA0 74            mov d, b
3395   1BA1 32            mov bl, [d]
3396   1BA2 A7 00         mov bh, 0
3397   1BA4 E7            pop d
3398   1BA5 FD 3E         mov [d], bl
3399   1BA7             ;; tok = LESS_THAN_OR_EQUAL; 
3400   1BA7 3B 9F 24      mov d, _tok ; $tok         
3401   1BAA 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL        
3402   1BAD FD 43         mov [d], b
3403   1BAF 0A FF 1B      jmp _if52_exit
3404   1BB2             _if52_else:
3405   1BB2             ;; if (*prog == '<'){ 
3406   1BB2             _if53_cond:
3407   1BB2 29 A3 24      mov b, [_prog] ; $prog           
3408   1BB5 74            mov d, b
3409   1BB6 32            mov bl, [d]
3410   1BB7 A7 00         mov bh, 0
3411   1BB9             ; START RELATIONAL
3412   1BB9 D7            push a
3413   1BBA 11            mov a, b
3414   1BBB 26 3C 00      mov b, $3c
3415   1BBE B0            cmp a, b
3416   1BBF FD 71         seq ; ==
3417   1BC1 E4            pop a
3418   1BC2             ; END RELATIONAL
3419   1BC2 C0 00 00      cmp b, 0
3420   1BC5 C6 F7 1B      je _if53_else
3421   1BC8             _if53_true:
3422   1BC8             ;; *t++ = *prog++; 
3423   1BC8 2C FF FF      mov b, [bp + -1] ; $t             
3424   1BCB FD 79         mov g, b
3425   1BCD FD 77         inc b
3426   1BCF FA FF FF      lea d, [bp + -1] ; $t
3427   1BD2 FD 43         mov [d], b
3428   1BD4 FD 27         mov b, g
3429   1BD6 D8            push b
3430   1BD7 29 A3 24      mov b, [_prog] ; $prog           
3431   1BDA FD 79         mov g, b
3432   1BDC FD 77         inc b
3433   1BDE 3B A3 24      mov d, _prog ; $prog
3434   1BE1 FD 43         mov [d], b
3435   1BE3 FD 27         mov b, g
3436   1BE5 74            mov d, b
3437   1BE6 32            mov bl, [d]
3438   1BE7 A7 00         mov bh, 0
3439   1BE9 E7            pop d
3440   1BEA FD 3E         mov [d], bl
3441   1BEC             ;; tok = BITWISE_SHL; 
3442   1BEC 3B 9F 24      mov d, _tok ; $tok         
3443   1BEF 26 1A 00      mov b, 26; BITWISE_SHL        
3444   1BF2 FD 43         mov [d], b
3445   1BF4 0A FF 1B      jmp _if53_exit
3446   1BF7             _if53_else:
3447   1BF7             ;; tok = LESS_THAN; 
3448   1BF7 3B 9F 24      mov d, _tok ; $tok         
3449   1BFA 26 0A 00      mov b, 10; LESS_THAN        
3450   1BFD FD 43         mov [d], b
3451   1BFF             _if53_exit:
3452   1BFF             _if52_exit:
3453   1BFF             ;; toktype = DELIMITER;   
3454   1BFF 3B A1 24      mov d, _toktype ; $toktype         
3455   1C02 26 01 00      mov b, 1; DELIMITER        
3456   1C05 FD 43         mov [d], b
3457   1C07 0A 33 22      jmp _if51_exit
3458   1C0A             _if51_else:
3459   1C0A             ;; if(*prog == '>'){ 
3460   1C0A             _if54_cond:
3461   1C0A 29 A3 24      mov b, [_prog] ; $prog           
3462   1C0D 74            mov d, b
3463   1C0E 32            mov bl, [d]
3464   1C0F A7 00         mov bh, 0
3465   1C11             ; START RELATIONAL
3466   1C11 D7            push a
3467   1C12 11            mov a, b
3468   1C13 26 3E 00      mov b, $3e
3469   1C16 B0            cmp a, b
3470   1C17 FD 71         seq ; ==
3471   1C19 E4            pop a
3472   1C1A             ; END RELATIONAL
3473   1C1A C0 00 00      cmp b, 0
3474   1C1D C6 E1 1C      je _if54_else
3475   1C20             _if54_true:
3476   1C20             ;; *t++ = *prog++; 
3477   1C20 2C FF FF      mov b, [bp + -1] ; $t             
3478   1C23 FD 79         mov g, b
3479   1C25 FD 77         inc b
3480   1C27 FA FF FF      lea d, [bp + -1] ; $t
3481   1C2A FD 43         mov [d], b
3482   1C2C FD 27         mov b, g
3483   1C2E D8            push b
3484   1C2F 29 A3 24      mov b, [_prog] ; $prog           
3485   1C32 FD 79         mov g, b
3486   1C34 FD 77         inc b
3487   1C36 3B A3 24      mov d, _prog ; $prog
3488   1C39 FD 43         mov [d], b
3489   1C3B FD 27         mov b, g
3490   1C3D 74            mov d, b
3491   1C3E 32            mov bl, [d]
3492   1C3F A7 00         mov bh, 0
3493   1C41 E7            pop d
3494   1C42 FD 3E         mov [d], bl
3495   1C44             ;; if (*prog == '='){ 
3496   1C44             _if55_cond:
3497   1C44 29 A3 24      mov b, [_prog] ; $prog           
3498   1C47 74            mov d, b
3499   1C48 32            mov bl, [d]
3500   1C49 A7 00         mov bh, 0
3501   1C4B             ; START RELATIONAL
3502   1C4B D7            push a
3503   1C4C 11            mov a, b
3504   1C4D 26 3D 00      mov b, $3d
3505   1C50 B0            cmp a, b
3506   1C51 FD 71         seq ; ==
3507   1C53 E4            pop a
3508   1C54             ; END RELATIONAL
3509   1C54 C0 00 00      cmp b, 0
3510   1C57 C6 89 1C      je _if55_else
3511   1C5A             _if55_true:
3512   1C5A             ;; *t++ = *prog++; 
3513   1C5A 2C FF FF      mov b, [bp + -1] ; $t             
3514   1C5D FD 79         mov g, b
3515   1C5F FD 77         inc b
3516   1C61 FA FF FF      lea d, [bp + -1] ; $t
3517   1C64 FD 43         mov [d], b
3518   1C66 FD 27         mov b, g
3519   1C68 D8            push b
3520   1C69 29 A3 24      mov b, [_prog] ; $prog           
3521   1C6C FD 79         mov g, b
3522   1C6E FD 77         inc b
3523   1C70 3B A3 24      mov d, _prog ; $prog
3524   1C73 FD 43         mov [d], b
3525   1C75 FD 27         mov b, g
3526   1C77 74            mov d, b
3527   1C78 32            mov bl, [d]
3528   1C79 A7 00         mov bh, 0
3529   1C7B E7            pop d
3530   1C7C FD 3E         mov [d], bl
3531   1C7E             ;; tok = GREATER_THAN_OR_EQUAL; 
3532   1C7E 3B 9F 24      mov d, _tok ; $tok         
3533   1C81 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL        
3534   1C84 FD 43         mov [d], b
3535   1C86 0A D6 1C      jmp _if55_exit
3536   1C89             _if55_else:
3537   1C89             ;; if (*prog == '>'){ 
3538   1C89             _if56_cond:
3539   1C89 29 A3 24      mov b, [_prog] ; $prog           
3540   1C8C 74            mov d, b
3541   1C8D 32            mov bl, [d]
3542   1C8E A7 00         mov bh, 0
3543   1C90             ; START RELATIONAL
3544   1C90 D7            push a
3545   1C91 11            mov a, b
3546   1C92 26 3E 00      mov b, $3e
3547   1C95 B0            cmp a, b
3548   1C96 FD 71         seq ; ==
3549   1C98 E4            pop a
3550   1C99             ; END RELATIONAL
3551   1C99 C0 00 00      cmp b, 0
3552   1C9C C6 CE 1C      je _if56_else
3553   1C9F             _if56_true:
3554   1C9F             ;; *t++ = *prog++; 
3555   1C9F 2C FF FF      mov b, [bp + -1] ; $t             
3556   1CA2 FD 79         mov g, b
3557   1CA4 FD 77         inc b
3558   1CA6 FA FF FF      lea d, [bp + -1] ; $t
3559   1CA9 FD 43         mov [d], b
3560   1CAB FD 27         mov b, g
3561   1CAD D8            push b
3562   1CAE 29 A3 24      mov b, [_prog] ; $prog           
3563   1CB1 FD 79         mov g, b
3564   1CB3 FD 77         inc b
3565   1CB5 3B A3 24      mov d, _prog ; $prog
3566   1CB8 FD 43         mov [d], b
3567   1CBA FD 27         mov b, g
3568   1CBC 74            mov d, b
3569   1CBD 32            mov bl, [d]
3570   1CBE A7 00         mov bh, 0
3571   1CC0 E7            pop d
3572   1CC1 FD 3E         mov [d], bl
3573   1CC3             ;; tok = BITWISE_SHR; 
3574   1CC3 3B 9F 24      mov d, _tok ; $tok         
3575   1CC6 26 1B 00      mov b, 27; BITWISE_SHR        
3576   1CC9 FD 43         mov [d], b
3577   1CCB 0A D6 1C      jmp _if56_exit
3578   1CCE             _if56_else:
3579   1CCE             ;; tok = GREATER_THAN; 
3580   1CCE 3B 9F 24      mov d, _tok ; $tok         
3581   1CD1 26 0C 00      mov b, 12; GREATER_THAN        
3582   1CD4 FD 43         mov [d], b
3583   1CD6             _if56_exit:
3584   1CD6             _if55_exit:
3585   1CD6             ;; toktype = DELIMITER;   
3586   1CD6 3B A1 24      mov d, _toktype ; $toktype         
3587   1CD9 26 01 00      mov b, 1; DELIMITER        
3588   1CDC FD 43         mov [d], b
3589   1CDE 0A 33 22      jmp _if54_exit
3590   1CE1             _if54_else:
3591   1CE1             ;; if(*prog == '!'){ 
3592   1CE1             _if57_cond:
3593   1CE1 29 A3 24      mov b, [_prog] ; $prog           
3594   1CE4 74            mov d, b
3595   1CE5 32            mov bl, [d]
3596   1CE6 A7 00         mov bh, 0
3597   1CE8             ; START RELATIONAL
3598   1CE8 D7            push a
3599   1CE9 11            mov a, b
3600   1CEA 26 21 00      mov b, $21
3601   1CED B0            cmp a, b
3602   1CEE FD 71         seq ; ==
3603   1CF0 E4            pop a
3604   1CF1             ; END RELATIONAL
3605   1CF1 C0 00 00      cmp b, 0
3606   1CF4 C6 73 1D      je _if57_else
3607   1CF7             _if57_true:
3608   1CF7             ;; *t++ = *prog++; 
3609   1CF7 2C FF FF      mov b, [bp + -1] ; $t             
3610   1CFA FD 79         mov g, b
3611   1CFC FD 77         inc b
3612   1CFE FA FF FF      lea d, [bp + -1] ; $t
3613   1D01 FD 43         mov [d], b
3614   1D03 FD 27         mov b, g
3615   1D05 D8            push b
3616   1D06 29 A3 24      mov b, [_prog] ; $prog           
3617   1D09 FD 79         mov g, b
3618   1D0B FD 77         inc b
3619   1D0D 3B A3 24      mov d, _prog ; $prog
3620   1D10 FD 43         mov [d], b
3621   1D12 FD 27         mov b, g
3622   1D14 74            mov d, b
3623   1D15 32            mov bl, [d]
3624   1D16 A7 00         mov bh, 0
3625   1D18 E7            pop d
3626   1D19 FD 3E         mov [d], bl
3627   1D1B             ;; if(*prog == '='){ 
3628   1D1B             _if58_cond:
3629   1D1B 29 A3 24      mov b, [_prog] ; $prog           
3630   1D1E 74            mov d, b
3631   1D1F 32            mov bl, [d]
3632   1D20 A7 00         mov bh, 0
3633   1D22             ; START RELATIONAL
3634   1D22 D7            push a
3635   1D23 11            mov a, b
3636   1D24 26 3D 00      mov b, $3d
3637   1D27 B0            cmp a, b
3638   1D28 FD 71         seq ; ==
3639   1D2A E4            pop a
3640   1D2B             ; END RELATIONAL
3641   1D2B C0 00 00      cmp b, 0
3642   1D2E C6 60 1D      je _if58_else
3643   1D31             _if58_true:
3644   1D31             ;; *t++ = *prog++; 
3645   1D31 2C FF FF      mov b, [bp + -1] ; $t             
3646   1D34 FD 79         mov g, b
3647   1D36 FD 77         inc b
3648   1D38 FA FF FF      lea d, [bp + -1] ; $t
3649   1D3B FD 43         mov [d], b
3650   1D3D FD 27         mov b, g
3651   1D3F D8            push b
3652   1D40 29 A3 24      mov b, [_prog] ; $prog           
3653   1D43 FD 79         mov g, b
3654   1D45 FD 77         inc b
3655   1D47 3B A3 24      mov d, _prog ; $prog
3656   1D4A FD 43         mov [d], b
3657   1D4C FD 27         mov b, g
3658   1D4E 74            mov d, b
3659   1D4F 32            mov bl, [d]
3660   1D50 A7 00         mov bh, 0
3661   1D52 E7            pop d
3662   1D53 FD 3E         mov [d], bl
3663   1D55             ;; tok = NOT_EQUAL; 
3664   1D55 3B 9F 24      mov d, _tok ; $tok         
3665   1D58 26 09 00      mov b, 9; NOT_EQUAL        
3666   1D5B FD 43         mov [d], b
3667   1D5D 0A 68 1D      jmp _if58_exit
3668   1D60             _if58_else:
3669   1D60             ;; tok = LOGICAL_NOT; 
3670   1D60 3B 9F 24      mov d, _tok ; $tok         
3671   1D63 26 10 00      mov b, 16; LOGICAL_NOT        
3672   1D66 FD 43         mov [d], b
3673   1D68             _if58_exit:
3674   1D68             ;; toktype = DELIMITER;   
3675   1D68 3B A1 24      mov d, _toktype ; $toktype         
3676   1D6B 26 01 00      mov b, 1; DELIMITER        
3677   1D6E FD 43         mov [d], b
3678   1D70 0A 33 22      jmp _if57_exit
3679   1D73             _if57_else:
3680   1D73             ;; if(*prog == '+'){ 
3681   1D73             _if59_cond:
3682   1D73 29 A3 24      mov b, [_prog] ; $prog           
3683   1D76 74            mov d, b
3684   1D77 32            mov bl, [d]
3685   1D78 A7 00         mov bh, 0
3686   1D7A             ; START RELATIONAL
3687   1D7A D7            push a
3688   1D7B 11            mov a, b
3689   1D7C 26 2B 00      mov b, $2b
3690   1D7F B0            cmp a, b
3691   1D80 FD 71         seq ; ==
3692   1D82 E4            pop a
3693   1D83             ; END RELATIONAL
3694   1D83 C0 00 00      cmp b, 0
3695   1D86 C6 05 1E      je _if59_else
3696   1D89             _if59_true:
3697   1D89             ;; *t++ = *prog++; 
3698   1D89 2C FF FF      mov b, [bp + -1] ; $t             
3699   1D8C FD 79         mov g, b
3700   1D8E FD 77         inc b
3701   1D90 FA FF FF      lea d, [bp + -1] ; $t
3702   1D93 FD 43         mov [d], b
3703   1D95 FD 27         mov b, g
3704   1D97 D8            push b
3705   1D98 29 A3 24      mov b, [_prog] ; $prog           
3706   1D9B FD 79         mov g, b
3707   1D9D FD 77         inc b
3708   1D9F 3B A3 24      mov d, _prog ; $prog
3709   1DA2 FD 43         mov [d], b
3710   1DA4 FD 27         mov b, g
3711   1DA6 74            mov d, b
3712   1DA7 32            mov bl, [d]
3713   1DA8 A7 00         mov bh, 0
3714   1DAA E7            pop d
3715   1DAB FD 3E         mov [d], bl
3716   1DAD             ;; if(*prog == '+'){ 
3717   1DAD             _if60_cond:
3718   1DAD 29 A3 24      mov b, [_prog] ; $prog           
3719   1DB0 74            mov d, b
3720   1DB1 32            mov bl, [d]
3721   1DB2 A7 00         mov bh, 0
3722   1DB4             ; START RELATIONAL
3723   1DB4 D7            push a
3724   1DB5 11            mov a, b
3725   1DB6 26 2B 00      mov b, $2b
3726   1DB9 B0            cmp a, b
3727   1DBA FD 71         seq ; ==
3728   1DBC E4            pop a
3729   1DBD             ; END RELATIONAL
3730   1DBD C0 00 00      cmp b, 0
3731   1DC0 C6 F2 1D      je _if60_else
3732   1DC3             _if60_true:
3733   1DC3             ;; *t++ = *prog++; 
3734   1DC3 2C FF FF      mov b, [bp + -1] ; $t             
3735   1DC6 FD 79         mov g, b
3736   1DC8 FD 77         inc b
3737   1DCA FA FF FF      lea d, [bp + -1] ; $t
3738   1DCD FD 43         mov [d], b
3739   1DCF FD 27         mov b, g
3740   1DD1 D8            push b
3741   1DD2 29 A3 24      mov b, [_prog] ; $prog           
3742   1DD5 FD 79         mov g, b
3743   1DD7 FD 77         inc b
3744   1DD9 3B A3 24      mov d, _prog ; $prog
3745   1DDC FD 43         mov [d], b
3746   1DDE FD 27         mov b, g
3747   1DE0 74            mov d, b
3748   1DE1 32            mov bl, [d]
3749   1DE2 A7 00         mov bh, 0
3750   1DE4 E7            pop d
3751   1DE5 FD 3E         mov [d], bl
3752   1DE7             ;; tok = INCREMENT; 
3753   1DE7 3B 9F 24      mov d, _tok ; $tok         
3754   1DEA 26 05 00      mov b, 5; INCREMENT        
3755   1DED FD 43         mov [d], b
3756   1DEF 0A FA 1D      jmp _if60_exit
3757   1DF2             _if60_else:
3758   1DF2             ;; tok = PLUS; 
3759   1DF2 3B 9F 24      mov d, _tok ; $tok         
3760   1DF5 26 01 00      mov b, 1; PLUS        
3761   1DF8 FD 43         mov [d], b
3762   1DFA             _if60_exit:
3763   1DFA             ;; toktype = DELIMITER;   
3764   1DFA 3B A1 24      mov d, _toktype ; $toktype         
3765   1DFD 26 01 00      mov b, 1; DELIMITER        
3766   1E00 FD 43         mov [d], b
3767   1E02 0A 33 22      jmp _if59_exit
3768   1E05             _if59_else:
3769   1E05             ;; if(*prog == '-'){ 
3770   1E05             _if61_cond:
3771   1E05 29 A3 24      mov b, [_prog] ; $prog           
3772   1E08 74            mov d, b
3773   1E09 32            mov bl, [d]
3774   1E0A A7 00         mov bh, 0
3775   1E0C             ; START RELATIONAL
3776   1E0C D7            push a
3777   1E0D 11            mov a, b
3778   1E0E 26 2D 00      mov b, $2d
3779   1E11 B0            cmp a, b
3780   1E12 FD 71         seq ; ==
3781   1E14 E4            pop a
3782   1E15             ; END RELATIONAL
3783   1E15 C0 00 00      cmp b, 0
3784   1E18 C6 97 1E      je _if61_else
3785   1E1B             _if61_true:
3786   1E1B             ;; *t++ = *prog++; 
3787   1E1B 2C FF FF      mov b, [bp + -1] ; $t             
3788   1E1E FD 79         mov g, b
3789   1E20 FD 77         inc b
3790   1E22 FA FF FF      lea d, [bp + -1] ; $t
3791   1E25 FD 43         mov [d], b
3792   1E27 FD 27         mov b, g
3793   1E29 D8            push b
3794   1E2A 29 A3 24      mov b, [_prog] ; $prog           
3795   1E2D FD 79         mov g, b
3796   1E2F FD 77         inc b
3797   1E31 3B A3 24      mov d, _prog ; $prog
3798   1E34 FD 43         mov [d], b
3799   1E36 FD 27         mov b, g
3800   1E38 74            mov d, b
3801   1E39 32            mov bl, [d]
3802   1E3A A7 00         mov bh, 0
3803   1E3C E7            pop d
3804   1E3D FD 3E         mov [d], bl
3805   1E3F             ;; if(*prog == '-'){ 
3806   1E3F             _if62_cond:
3807   1E3F 29 A3 24      mov b, [_prog] ; $prog           
3808   1E42 74            mov d, b
3809   1E43 32            mov bl, [d]
3810   1E44 A7 00         mov bh, 0
3811   1E46             ; START RELATIONAL
3812   1E46 D7            push a
3813   1E47 11            mov a, b
3814   1E48 26 2D 00      mov b, $2d
3815   1E4B B0            cmp a, b
3816   1E4C FD 71         seq ; ==
3817   1E4E E4            pop a
3818   1E4F             ; END RELATIONAL
3819   1E4F C0 00 00      cmp b, 0
3820   1E52 C6 84 1E      je _if62_else
3821   1E55             _if62_true:
3822   1E55             ;; *t++ = *prog++; 
3823   1E55 2C FF FF      mov b, [bp + -1] ; $t             
3824   1E58 FD 79         mov g, b
3825   1E5A FD 77         inc b
3826   1E5C FA FF FF      lea d, [bp + -1] ; $t
3827   1E5F FD 43         mov [d], b
3828   1E61 FD 27         mov b, g
3829   1E63 D8            push b
3830   1E64 29 A3 24      mov b, [_prog] ; $prog           
3831   1E67 FD 79         mov g, b
3832   1E69 FD 77         inc b
3833   1E6B 3B A3 24      mov d, _prog ; $prog
3834   1E6E FD 43         mov [d], b
3835   1E70 FD 27         mov b, g
3836   1E72 74            mov d, b
3837   1E73 32            mov bl, [d]
3838   1E74 A7 00         mov bh, 0
3839   1E76 E7            pop d
3840   1E77 FD 3E         mov [d], bl
3841   1E79             ;; tok = DECREMENT; 
3842   1E79 3B 9F 24      mov d, _tok ; $tok         
3843   1E7C 26 06 00      mov b, 6; DECREMENT        
3844   1E7F FD 43         mov [d], b
3845   1E81 0A 8C 1E      jmp _if62_exit
3846   1E84             _if62_else:
3847   1E84             ;; tok = MINUS; 
3848   1E84 3B 9F 24      mov d, _tok ; $tok         
3849   1E87 26 02 00      mov b, 2; MINUS        
3850   1E8A FD 43         mov [d], b
3851   1E8C             _if62_exit:
3852   1E8C             ;; toktype = DELIMITER;   
3853   1E8C 3B A1 24      mov d, _toktype ; $toktype         
3854   1E8F 26 01 00      mov b, 1; DELIMITER        
3855   1E92 FD 43         mov [d], b
3856   1E94 0A 33 22      jmp _if61_exit
3857   1E97             _if61_else:
3858   1E97             ;; if(*prog == '$'){ 
3859   1E97             _if63_cond:
3860   1E97 29 A3 24      mov b, [_prog] ; $prog           
3861   1E9A 74            mov d, b
3862   1E9B 32            mov bl, [d]
3863   1E9C A7 00         mov bh, 0
3864   1E9E             ; START RELATIONAL
3865   1E9E D7            push a
3866   1E9F 11            mov a, b
3867   1EA0 26 24 00      mov b, $24
3868   1EA3 B0            cmp a, b
3869   1EA4 FD 71         seq ; ==
3870   1EA6 E4            pop a
3871   1EA7             ; END RELATIONAL
3872   1EA7 C0 00 00      cmp b, 0
3873   1EAA C6 E4 1E      je _if63_else
3874   1EAD             _if63_true:
3875   1EAD             ;; *t++ = *prog++; 
3876   1EAD 2C FF FF      mov b, [bp + -1] ; $t             
3877   1EB0 FD 79         mov g, b
3878   1EB2 FD 77         inc b
3879   1EB4 FA FF FF      lea d, [bp + -1] ; $t
3880   1EB7 FD 43         mov [d], b
3881   1EB9 FD 27         mov b, g
3882   1EBB D8            push b
3883   1EBC 29 A3 24      mov b, [_prog] ; $prog           
3884   1EBF FD 79         mov g, b
3885   1EC1 FD 77         inc b
3886   1EC3 3B A3 24      mov d, _prog ; $prog
3887   1EC6 FD 43         mov [d], b
3888   1EC8 FD 27         mov b, g
3889   1ECA 74            mov d, b
3890   1ECB 32            mov bl, [d]
3891   1ECC A7 00         mov bh, 0
3892   1ECE E7            pop d
3893   1ECF FD 3E         mov [d], bl
3894   1ED1             ;; tok = DOLLAR; 
3895   1ED1 3B 9F 24      mov d, _tok ; $tok         
3896   1ED4 26 12 00      mov b, 18; DOLLAR        
3897   1ED7 FD 43         mov [d], b
3898   1ED9             ;; toktype = DELIMITER;   
3899   1ED9 3B A1 24      mov d, _toktype ; $toktype         
3900   1EDC 26 01 00      mov b, 1; DELIMITER        
3901   1EDF FD 43         mov [d], b
3902   1EE1 0A 33 22      jmp _if63_exit
3903   1EE4             _if63_else:
3904   1EE4             ;; if(*prog == '^'){ 
3905   1EE4             _if64_cond:
3906   1EE4 29 A3 24      mov b, [_prog] ; $prog           
3907   1EE7 74            mov d, b
3908   1EE8 32            mov bl, [d]
3909   1EE9 A7 00         mov bh, 0
3910   1EEB             ; START RELATIONAL
3911   1EEB D7            push a
3912   1EEC 11            mov a, b
3913   1EED 26 5E 00      mov b, $5e
3914   1EF0 B0            cmp a, b
3915   1EF1 FD 71         seq ; ==
3916   1EF3 E4            pop a
3917   1EF4             ; END RELATIONAL
3918   1EF4 C0 00 00      cmp b, 0
3919   1EF7 C6 31 1F      je _if64_else
3920   1EFA             _if64_true:
3921   1EFA             ;; *t++ = *prog++; 
3922   1EFA 2C FF FF      mov b, [bp + -1] ; $t             
3923   1EFD FD 79         mov g, b
3924   1EFF FD 77         inc b
3925   1F01 FA FF FF      lea d, [bp + -1] ; $t
3926   1F04 FD 43         mov [d], b
3927   1F06 FD 27         mov b, g
3928   1F08 D8            push b
3929   1F09 29 A3 24      mov b, [_prog] ; $prog           
3930   1F0C FD 79         mov g, b
3931   1F0E FD 77         inc b
3932   1F10 3B A3 24      mov d, _prog ; $prog
3933   1F13 FD 43         mov [d], b
3934   1F15 FD 27         mov b, g
3935   1F17 74            mov d, b
3936   1F18 32            mov bl, [d]
3937   1F19 A7 00         mov bh, 0
3938   1F1B E7            pop d
3939   1F1C FD 3E         mov [d], bl
3940   1F1E             ;; tok = BITWISE_XOR; 
3941   1F1E 3B 9F 24      mov d, _tok ; $tok         
3942   1F21 26 17 00      mov b, 23; BITWISE_XOR        
3943   1F24 FD 43         mov [d], b
3944   1F26             ;; toktype = DELIMITER;   
3945   1F26 3B A1 24      mov d, _toktype ; $toktype         
3946   1F29 26 01 00      mov b, 1; DELIMITER        
3947   1F2C FD 43         mov [d], b
3948   1F2E 0A 33 22      jmp _if64_exit
3949   1F31             _if64_else:
3950   1F31             ;; if(*prog == '@'){ 
3951   1F31             _if65_cond:
3952   1F31 29 A3 24      mov b, [_prog] ; $prog           
3953   1F34 74            mov d, b
3954   1F35 32            mov bl, [d]
3955   1F36 A7 00         mov bh, 0
3956   1F38             ; START RELATIONAL
3957   1F38 D7            push a
3958   1F39 11            mov a, b
3959   1F3A 26 40 00      mov b, $40
3960   1F3D B0            cmp a, b
3961   1F3E FD 71         seq ; ==
3962   1F40 E4            pop a
3963   1F41             ; END RELATIONAL
3964   1F41 C0 00 00      cmp b, 0
3965   1F44 C6 7E 1F      je _if65_else
3966   1F47             _if65_true:
3967   1F47             ;; *t++ = *prog++; 
3968   1F47 2C FF FF      mov b, [bp + -1] ; $t             
3969   1F4A FD 79         mov g, b
3970   1F4C FD 77         inc b
3971   1F4E FA FF FF      lea d, [bp + -1] ; $t
3972   1F51 FD 43         mov [d], b
3973   1F53 FD 27         mov b, g
3974   1F55 D8            push b
3975   1F56 29 A3 24      mov b, [_prog] ; $prog           
3976   1F59 FD 79         mov g, b
3977   1F5B FD 77         inc b
3978   1F5D 3B A3 24      mov d, _prog ; $prog
3979   1F60 FD 43         mov [d], b
3980   1F62 FD 27         mov b, g
3981   1F64 74            mov d, b
3982   1F65 32            mov bl, [d]
3983   1F66 A7 00         mov bh, 0
3984   1F68 E7            pop d
3985   1F69 FD 3E         mov [d], bl
3986   1F6B             ;; tok = AT; 
3987   1F6B 3B 9F 24      mov d, _tok ; $tok         
3988   1F6E 26 14 00      mov b, 20; AT        
3989   1F71 FD 43         mov [d], b
3990   1F73             ;; toktype = DELIMITER;   
3991   1F73 3B A1 24      mov d, _toktype ; $toktype         
3992   1F76 26 01 00      mov b, 1; DELIMITER        
3993   1F79 FD 43         mov [d], b
3994   1F7B 0A 33 22      jmp _if65_exit
3995   1F7E             _if65_else:
3996   1F7E             ;; if(*prog == '*'){ 
3997   1F7E             _if66_cond:
3998   1F7E 29 A3 24      mov b, [_prog] ; $prog           
3999   1F81 74            mov d, b
4000   1F82 32            mov bl, [d]
4001   1F83 A7 00         mov bh, 0
4002   1F85             ; START RELATIONAL
4003   1F85 D7            push a
4004   1F86 11            mov a, b
4005   1F87 26 2A 00      mov b, $2a
4006   1F8A B0            cmp a, b
4007   1F8B FD 71         seq ; ==
4008   1F8D E4            pop a
4009   1F8E             ; END RELATIONAL
4010   1F8E C0 00 00      cmp b, 0
4011   1F91 C6 CB 1F      je _if66_else
4012   1F94             _if66_true:
4013   1F94             ;; *t++ = *prog++; 
4014   1F94 2C FF FF      mov b, [bp + -1] ; $t             
4015   1F97 FD 79         mov g, b
4016   1F99 FD 77         inc b
4017   1F9B FA FF FF      lea d, [bp + -1] ; $t
4018   1F9E FD 43         mov [d], b
4019   1FA0 FD 27         mov b, g
4020   1FA2 D8            push b
4021   1FA3 29 A3 24      mov b, [_prog] ; $prog           
4022   1FA6 FD 79         mov g, b
4023   1FA8 FD 77         inc b
4024   1FAA 3B A3 24      mov d, _prog ; $prog
4025   1FAD FD 43         mov [d], b
4026   1FAF FD 27         mov b, g
4027   1FB1 74            mov d, b
4028   1FB2 32            mov bl, [d]
4029   1FB3 A7 00         mov bh, 0
4030   1FB5 E7            pop d
4031   1FB6 FD 3E         mov [d], bl
4032   1FB8             ;; tok = STAR; 
4033   1FB8 3B 9F 24      mov d, _tok ; $tok         
4034   1FBB 26 03 00      mov b, 3; STAR        
4035   1FBE FD 43         mov [d], b
4036   1FC0             ;; toktype = DELIMITER;   
4037   1FC0 3B A1 24      mov d, _toktype ; $toktype         
4038   1FC3 26 01 00      mov b, 1; DELIMITER        
4039   1FC6 FD 43         mov [d], b
4040   1FC8 0A 33 22      jmp _if66_exit
4041   1FCB             _if66_else:
4042   1FCB             ;; if(*prog == '/'){ 
4043   1FCB             _if67_cond:
4044   1FCB 29 A3 24      mov b, [_prog] ; $prog           
4045   1FCE 74            mov d, b
4046   1FCF 32            mov bl, [d]
4047   1FD0 A7 00         mov bh, 0
4048   1FD2             ; START RELATIONAL
4049   1FD2 D7            push a
4050   1FD3 11            mov a, b
4051   1FD4 26 2F 00      mov b, $2f
4052   1FD7 B0            cmp a, b
4053   1FD8 FD 71         seq ; ==
4054   1FDA E4            pop a
4055   1FDB             ; END RELATIONAL
4056   1FDB C0 00 00      cmp b, 0
4057   1FDE C6 18 20      je _if67_else
4058   1FE1             _if67_true:
4059   1FE1             ;; *t++ = *prog++; 
4060   1FE1 2C FF FF      mov b, [bp + -1] ; $t             
4061   1FE4 FD 79         mov g, b
4062   1FE6 FD 77         inc b
4063   1FE8 FA FF FF      lea d, [bp + -1] ; $t
4064   1FEB FD 43         mov [d], b
4065   1FED FD 27         mov b, g
4066   1FEF D8            push b
4067   1FF0 29 A3 24      mov b, [_prog] ; $prog           
4068   1FF3 FD 79         mov g, b
4069   1FF5 FD 77         inc b
4070   1FF7 3B A3 24      mov d, _prog ; $prog
4071   1FFA FD 43         mov [d], b
4072   1FFC FD 27         mov b, g
4073   1FFE 74            mov d, b
4074   1FFF 32            mov bl, [d]
4075   2000 A7 00         mov bh, 0
4076   2002 E7            pop d
4077   2003 FD 3E         mov [d], bl
4078   2005             ;; tok = FSLASH; 
4079   2005 3B 9F 24      mov d, _tok ; $tok         
4080   2008 26 04 00      mov b, 4; FSLASH        
4081   200B FD 43         mov [d], b
4082   200D             ;; toktype = DELIMITER;   
4083   200D 3B A1 24      mov d, _toktype ; $toktype         
4084   2010 26 01 00      mov b, 1; DELIMITER        
4085   2013 FD 43         mov [d], b
4086   2015 0A 33 22      jmp _if67_exit
4087   2018             _if67_else:
4088   2018             ;; if(*prog == '%'){ 
4089   2018             _if68_cond:
4090   2018 29 A3 24      mov b, [_prog] ; $prog           
4091   201B 74            mov d, b
4092   201C 32            mov bl, [d]
4093   201D A7 00         mov bh, 0
4094   201F             ; START RELATIONAL
4095   201F D7            push a
4096   2020 11            mov a, b
4097   2021 26 25 00      mov b, $25
4098   2024 B0            cmp a, b
4099   2025 FD 71         seq ; ==
4100   2027 E4            pop a
4101   2028             ; END RELATIONAL
4102   2028 C0 00 00      cmp b, 0
4103   202B C6 65 20      je _if68_else
4104   202E             _if68_true:
4105   202E             ;; *t++ = *prog++; 
4106   202E 2C FF FF      mov b, [bp + -1] ; $t             
4107   2031 FD 79         mov g, b
4108   2033 FD 77         inc b
4109   2035 FA FF FF      lea d, [bp + -1] ; $t
4110   2038 FD 43         mov [d], b
4111   203A FD 27         mov b, g
4112   203C D8            push b
4113   203D 29 A3 24      mov b, [_prog] ; $prog           
4114   2040 FD 79         mov g, b
4115   2042 FD 77         inc b
4116   2044 3B A3 24      mov d, _prog ; $prog
4117   2047 FD 43         mov [d], b
4118   2049 FD 27         mov b, g
4119   204B 74            mov d, b
4120   204C 32            mov bl, [d]
4121   204D A7 00         mov bh, 0
4122   204F E7            pop d
4123   2050 FD 3E         mov [d], bl
4124   2052             ;; tok = MOD; 
4125   2052 3B 9F 24      mov d, _tok ; $tok         
4126   2055 26 07 00      mov b, 7; MOD        
4127   2058 FD 43         mov [d], b
4128   205A             ;; toktype = DELIMITER;   
4129   205A 3B A1 24      mov d, _toktype ; $toktype         
4130   205D 26 01 00      mov b, 1; DELIMITER        
4131   2060 FD 43         mov [d], b
4132   2062 0A 33 22      jmp _if68_exit
4133   2065             _if68_else:
4134   2065             ;; if(*prog == '('){ 
4135   2065             _if69_cond:
4136   2065 29 A3 24      mov b, [_prog] ; $prog           
4137   2068 74            mov d, b
4138   2069 32            mov bl, [d]
4139   206A A7 00         mov bh, 0
4140   206C             ; START RELATIONAL
4141   206C D7            push a
4142   206D 11            mov a, b
4143   206E 26 28 00      mov b, $28
4144   2071 B0            cmp a, b
4145   2072 FD 71         seq ; ==
4146   2074 E4            pop a
4147   2075             ; END RELATIONAL
4148   2075 C0 00 00      cmp b, 0
4149   2078 C6 B2 20      je _if69_else
4150   207B             _if69_true:
4151   207B             ;; *t++ = *prog++; 
4152   207B 2C FF FF      mov b, [bp + -1] ; $t             
4153   207E FD 79         mov g, b
4154   2080 FD 77         inc b
4155   2082 FA FF FF      lea d, [bp + -1] ; $t
4156   2085 FD 43         mov [d], b
4157   2087 FD 27         mov b, g
4158   2089 D8            push b
4159   208A 29 A3 24      mov b, [_prog] ; $prog           
4160   208D FD 79         mov g, b
4161   208F FD 77         inc b
4162   2091 3B A3 24      mov d, _prog ; $prog
4163   2094 FD 43         mov [d], b
4164   2096 FD 27         mov b, g
4165   2098 74            mov d, b
4166   2099 32            mov bl, [d]
4167   209A A7 00         mov bh, 0
4168   209C E7            pop d
4169   209D FD 3E         mov [d], bl
4170   209F             ;; tok = OPENING_PAREN; 
4171   209F 3B 9F 24      mov d, _tok ; $tok         
4172   20A2 26 1C 00      mov b, 28; OPENING_PAREN        
4173   20A5 FD 43         mov [d], b
4174   20A7             ;; toktype = DELIMITER;   
4175   20A7 3B A1 24      mov d, _toktype ; $toktype         
4176   20AA 26 01 00      mov b, 1; DELIMITER        
4177   20AD FD 43         mov [d], b
4178   20AF 0A 33 22      jmp _if69_exit
4179   20B2             _if69_else:
4180   20B2             ;; if(*prog == ')'){ 
4181   20B2             _if70_cond:
4182   20B2 29 A3 24      mov b, [_prog] ; $prog           
4183   20B5 74            mov d, b
4184   20B6 32            mov bl, [d]
4185   20B7 A7 00         mov bh, 0
4186   20B9             ; START RELATIONAL
4187   20B9 D7            push a
4188   20BA 11            mov a, b
4189   20BB 26 29 00      mov b, $29
4190   20BE B0            cmp a, b
4191   20BF FD 71         seq ; ==
4192   20C1 E4            pop a
4193   20C2             ; END RELATIONAL
4194   20C2 C0 00 00      cmp b, 0
4195   20C5 C6 FF 20      je _if70_else
4196   20C8             _if70_true:
4197   20C8             ;; *t++ = *prog++; 
4198   20C8 2C FF FF      mov b, [bp + -1] ; $t             
4199   20CB FD 79         mov g, b
4200   20CD FD 77         inc b
4201   20CF FA FF FF      lea d, [bp + -1] ; $t
4202   20D2 FD 43         mov [d], b
4203   20D4 FD 27         mov b, g
4204   20D6 D8            push b
4205   20D7 29 A3 24      mov b, [_prog] ; $prog           
4206   20DA FD 79         mov g, b
4207   20DC FD 77         inc b
4208   20DE 3B A3 24      mov d, _prog ; $prog
4209   20E1 FD 43         mov [d], b
4210   20E3 FD 27         mov b, g
4211   20E5 74            mov d, b
4212   20E6 32            mov bl, [d]
4213   20E7 A7 00         mov bh, 0
4214   20E9 E7            pop d
4215   20EA FD 3E         mov [d], bl
4216   20EC             ;; tok = CLOSING_PAREN; 
4217   20EC 3B 9F 24      mov d, _tok ; $tok         
4218   20EF 26 1D 00      mov b, 29; CLOSING_PAREN        
4219   20F2 FD 43         mov [d], b
4220   20F4             ;; toktype = DELIMITER;   
4221   20F4 3B A1 24      mov d, _toktype ; $toktype         
4222   20F7 26 01 00      mov b, 1; DELIMITER        
4223   20FA FD 43         mov [d], b
4224   20FC 0A 33 22      jmp _if70_exit
4225   20FF             _if70_else:
4226   20FF             ;; if(*prog == ';'){ 
4227   20FF             _if71_cond:
4228   20FF 29 A3 24      mov b, [_prog] ; $prog           
4229   2102 74            mov d, b
4230   2103 32            mov bl, [d]
4231   2104 A7 00         mov bh, 0
4232   2106             ; START RELATIONAL
4233   2106 D7            push a
4234   2107 11            mov a, b
4235   2108 26 3B 00      mov b, $3b
4236   210B B0            cmp a, b
4237   210C FD 71         seq ; ==
4238   210E E4            pop a
4239   210F             ; END RELATIONAL
4240   210F C0 00 00      cmp b, 0
4241   2112 C6 4C 21      je _if71_else
4242   2115             _if71_true:
4243   2115             ;; *t++ = *prog++; 
4244   2115 2C FF FF      mov b, [bp + -1] ; $t             
4245   2118 FD 79         mov g, b
4246   211A FD 77         inc b
4247   211C FA FF FF      lea d, [bp + -1] ; $t
4248   211F FD 43         mov [d], b
4249   2121 FD 27         mov b, g
4250   2123 D8            push b
4251   2124 29 A3 24      mov b, [_prog] ; $prog           
4252   2127 FD 79         mov g, b
4253   2129 FD 77         inc b
4254   212B 3B A3 24      mov d, _prog ; $prog
4255   212E FD 43         mov [d], b
4256   2130 FD 27         mov b, g
4257   2132 74            mov d, b
4258   2133 32            mov bl, [d]
4259   2134 A7 00         mov bh, 0
4260   2136 E7            pop d
4261   2137 FD 3E         mov [d], bl
4262   2139             ;; tok = SEMICOLON; 
4263   2139 3B 9F 24      mov d, _tok ; $tok         
4264   213C 26 23 00      mov b, 35; SEMICOLON        
4265   213F FD 43         mov [d], b
4266   2141             ;; toktype = DELIMITER;   
4267   2141 3B A1 24      mov d, _toktype ; $toktype         
4268   2144 26 01 00      mov b, 1; DELIMITER        
4269   2147 FD 43         mov [d], b
4270   2149 0A 33 22      jmp _if71_exit
4271   214C             _if71_else:
4272   214C             ;; if(*prog == ':'){ 
4273   214C             _if72_cond:
4274   214C 29 A3 24      mov b, [_prog] ; $prog           
4275   214F 74            mov d, b
4276   2150 32            mov bl, [d]
4277   2151 A7 00         mov bh, 0
4278   2153             ; START RELATIONAL
4279   2153 D7            push a
4280   2154 11            mov a, b
4281   2155 26 3A 00      mov b, $3a
4282   2158 B0            cmp a, b
4283   2159 FD 71         seq ; ==
4284   215B E4            pop a
4285   215C             ; END RELATIONAL
4286   215C C0 00 00      cmp b, 0
4287   215F C6 99 21      je _if72_else
4288   2162             _if72_true:
4289   2162             ;; *t++ = *prog++; 
4290   2162 2C FF FF      mov b, [bp + -1] ; $t             
4291   2165 FD 79         mov g, b
4292   2167 FD 77         inc b
4293   2169 FA FF FF      lea d, [bp + -1] ; $t
4294   216C FD 43         mov [d], b
4295   216E FD 27         mov b, g
4296   2170 D8            push b
4297   2171 29 A3 24      mov b, [_prog] ; $prog           
4298   2174 FD 79         mov g, b
4299   2176 FD 77         inc b
4300   2178 3B A3 24      mov d, _prog ; $prog
4301   217B FD 43         mov [d], b
4302   217D FD 27         mov b, g
4303   217F 74            mov d, b
4304   2180 32            mov bl, [d]
4305   2181 A7 00         mov bh, 0
4306   2183 E7            pop d
4307   2184 FD 3E         mov [d], bl
4308   2186             ;; tok = COLON; 
4309   2186 3B 9F 24      mov d, _tok ; $tok         
4310   2189 26 22 00      mov b, 34; COLON        
4311   218C FD 43         mov [d], b
4312   218E             ;; toktype = DELIMITER;   
4313   218E 3B A1 24      mov d, _toktype ; $toktype         
4314   2191 26 01 00      mov b, 1; DELIMITER        
4315   2194 FD 43         mov [d], b
4316   2196 0A 33 22      jmp _if72_exit
4317   2199             _if72_else:
4318   2199             ;; if(*prog == ','){ 
4319   2199             _if73_cond:
4320   2199 29 A3 24      mov b, [_prog] ; $prog           
4321   219C 74            mov d, b
4322   219D 32            mov bl, [d]
4323   219E A7 00         mov bh, 0
4324   21A0             ; START RELATIONAL
4325   21A0 D7            push a
4326   21A1 11            mov a, b
4327   21A2 26 2C 00      mov b, $2c
4328   21A5 B0            cmp a, b
4329   21A6 FD 71         seq ; ==
4330   21A8 E4            pop a
4331   21A9             ; END RELATIONAL
4332   21A9 C0 00 00      cmp b, 0
4333   21AC C6 E6 21      je _if73_else
4334   21AF             _if73_true:
4335   21AF             ;; *t++ = *prog++; 
4336   21AF 2C FF FF      mov b, [bp + -1] ; $t             
4337   21B2 FD 79         mov g, b
4338   21B4 FD 77         inc b
4339   21B6 FA FF FF      lea d, [bp + -1] ; $t
4340   21B9 FD 43         mov [d], b
4341   21BB FD 27         mov b, g
4342   21BD D8            push b
4343   21BE 29 A3 24      mov b, [_prog] ; $prog           
4344   21C1 FD 79         mov g, b
4345   21C3 FD 77         inc b
4346   21C5 3B A3 24      mov d, _prog ; $prog
4347   21C8 FD 43         mov [d], b
4348   21CA FD 27         mov b, g
4349   21CC 74            mov d, b
4350   21CD 32            mov bl, [d]
4351   21CE A7 00         mov bh, 0
4352   21D0 E7            pop d
4353   21D1 FD 3E         mov [d], bl
4354   21D3             ;; tok = COMMA; 
4355   21D3 3B 9F 24      mov d, _tok ; $tok         
4356   21D6 26 24 00      mov b, 36; COMMA        
4357   21D9 FD 43         mov [d], b
4358   21DB             ;; toktype = DELIMITER;   
4359   21DB 3B A1 24      mov d, _toktype ; $toktype         
4360   21DE 26 01 00      mov b, 1; DELIMITER        
4361   21E1 FD 43         mov [d], b
4362   21E3 0A 33 22      jmp _if73_exit
4363   21E6             _if73_else:
4364   21E6             ;; if(*prog == '.'){ 
4365   21E6             _if74_cond:
4366   21E6 29 A3 24      mov b, [_prog] ; $prog           
4367   21E9 74            mov d, b
4368   21EA 32            mov bl, [d]
4369   21EB A7 00         mov bh, 0
4370   21ED             ; START RELATIONAL
4371   21ED D7            push a
4372   21EE 11            mov a, b
4373   21EF 26 2E 00      mov b, $2e
4374   21F2 B0            cmp a, b
4375   21F3 FD 71         seq ; ==
4376   21F5 E4            pop a
4377   21F6             ; END RELATIONAL
4378   21F6 C0 00 00      cmp b, 0
4379   21F9 C6 33 22      je _if74_exit
4380   21FC             _if74_true:
4381   21FC             ;; *t++ = *prog++; 
4382   21FC 2C FF FF      mov b, [bp + -1] ; $t             
4383   21FF FD 79         mov g, b
4384   2201 FD 77         inc b
4385   2203 FA FF FF      lea d, [bp + -1] ; $t
4386   2206 FD 43         mov [d], b
4387   2208 FD 27         mov b, g
4388   220A D8            push b
4389   220B 29 A3 24      mov b, [_prog] ; $prog           
4390   220E FD 79         mov g, b
4391   2210 FD 77         inc b
4392   2212 3B A3 24      mov d, _prog ; $prog
4393   2215 FD 43         mov [d], b
4394   2217 FD 27         mov b, g
4395   2219 74            mov d, b
4396   221A 32            mov bl, [d]
4397   221B A7 00         mov bh, 0
4398   221D E7            pop d
4399   221E FD 3E         mov [d], bl
4400   2220             ;; tok = DOT; 
4401   2220 3B 9F 24      mov d, _tok ; $tok         
4402   2223 26 25 00      mov b, 37; DOT        
4403   2226 FD 43         mov [d], b
4404   2228             ;; toktype = DELIMITER;   
4405   2228 3B A1 24      mov d, _toktype ; $toktype         
4406   222B 26 01 00      mov b, 1; DELIMITER        
4407   222E FD 43         mov [d], b
4408   2230 0A 33 22      jmp _if74_exit
4409   2233             _if74_exit:
4410   2233             _if73_exit:
4411   2233             _if72_exit:
4412   2233             _if71_exit:
4413   2233             _if70_exit:
4414   2233             _if69_exit:
4415   2233             _if68_exit:
4416   2233             _if67_exit:
4417   2233             _if66_exit:
4418   2233             _if65_exit:
4419   2233             _if64_exit:
4420   2233             _if63_exit:
4421   2233             _if61_exit:
4422   2233             _if59_exit:
4423   2233             _if57_exit:
4424   2233             _if54_exit:
4425   2233             _if51_exit:
4426   2233             _if50_exit:
4427   2233             _if48_exit:
4428   2233             _if46_exit:
4429   2233             _if44_exit:
4430   2233             _if43_exit:
4431   2233             _if42_exit:
4432   2233             _if41_exit:
4433   2233             _if40_exit:
4434   2233             _if39_exit:
4435   2233             _if36_exit:
4436   2233             _if34_exit:
4437   2233             _if32_exit:
4438   2233             ;; *t = '\0'; 
4439   2233 2C FF FF      mov b, [bp + -1] ; $t             
4440   2236 D8            push b
4441   2237 26 00 00      mov b, $0
4442   223A E7            pop d
4443   223B FD 3E         mov [d], bl
4444   223D F9            leave
4445   223E 09            ret
4446   223F             
4447   223F             convert_constant:
4448   223F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4449   2242             ; $s 
4450   2242             ; $t 
4451   2242 52 04 00      sub sp, 4
4452   2245             ;; t = token; 
4453   2245 FA FD FF      lea d, [bp + -3] ; $t         
4454   2248 26 A5 24      mov b, _token_data ; $token                   
4455   224B FD 43         mov [d], b
4456   224D             ;; s = string_const; 
4457   224D FA FF FF      lea d, [bp + -1] ; $s         
4458   2250 26 A5 25      mov b, _string_const_data ; $string_const                   
4459   2253 FD 43         mov [d], b
4460   2255             ;; if(toktype == CHAR_CONST){ 
4461   2255             _if75_cond:
4462   2255 29 A1 24      mov b, [_toktype] ; $toktype           
4463   2258             ; START RELATIONAL
4464   2258 D7            push a
4465   2259 11            mov a, b
4466   225A 26 02 00      mov b, 2; CHAR_CONST
4467   225D B0            cmp a, b
4468   225E FD 71         seq ; ==
4469   2260 E4            pop a
4470   2261             ; END RELATIONAL
4471   2261 C0 00 00      cmp b, 0
4472   2264 C6 FE 23      je _if75_else
4473   2267             _if75_true:
4474   2267             ;; t++; 
4475   2267 2C FD FF      mov b, [bp + -3] ; $t             
4476   226A FD 79         mov g, b
4477   226C FD 77         inc b
4478   226E FA FD FF      lea d, [bp + -3] ; $t
4479   2271 FD 43         mov [d], b
4480   2273 FD 27         mov b, g
4481   2275             ;; if(*t == '\\'){ 
4482   2275             _if76_cond:
4483   2275 2C FD FF      mov b, [bp + -3] ; $t             
4484   2278 74            mov d, b
4485   2279 32            mov bl, [d]
4486   227A A7 00         mov bh, 0
4487   227C             ; START RELATIONAL
4488   227C D7            push a
4489   227D 11            mov a, b
4490   227E 26 5C 00      mov b, $5c
4491   2281 B0            cmp a, b
4492   2282 FD 71         seq ; ==
4493   2284 E4            pop a
4494   2285             ; END RELATIONAL
4495   2285 C0 00 00      cmp b, 0
4496   2288 C6 E2 23      je _if76_else
4497   228B             _if76_true:
4498   228B             ;; t++; 
4499   228B 2C FD FF      mov b, [bp + -3] ; $t             
4500   228E FD 79         mov g, b
4501   2290 FD 77         inc b
4502   2292 FA FD FF      lea d, [bp + -3] ; $t
4503   2295 FD 43         mov [d], b
4504   2297 FD 27         mov b, g
4505   2299             ;; switch(*t){ 
4506   2299             _switch77_expr:
4507   2299 2C FD FF      mov b, [bp + -3] ; $t             
4508   229C 74            mov d, b
4509   229D 32            mov bl, [d]
4510   229E A7 00         mov bh, 0
4511   22A0             _switch77_comparisons:
4512   22A0 C1 30         cmp bl, $30
4513   22A2 C6 DA 22      je _switch77_case0
4514   22A5 C1 61         cmp bl, $61
4515   22A7 C6 F2 22      je _switch77_case1
4516   22AA C1 62         cmp bl, $62
4517   22AC C6 0A 23      je _switch77_case2
4518   22AF C1 66         cmp bl, $66
4519   22B1 C6 22 23      je _switch77_case3
4520   22B4 C1 6E         cmp bl, $6e
4521   22B6 C6 3A 23      je _switch77_case4
4522   22B9 C1 72         cmp bl, $72
4523   22BB C6 52 23      je _switch77_case5
4524   22BE C1 74         cmp bl, $74
4525   22C0 C6 6A 23      je _switch77_case6
4526   22C3 C1 76         cmp bl, $76
4527   22C5 C6 82 23      je _switch77_case7
4528   22C8 C1 5C         cmp bl, $5c
4529   22CA C6 9A 23      je _switch77_case8
4530   22CD C1 27         cmp bl, $27
4531   22CF C6 B2 23      je _switch77_case9
4532   22D2 C1 22         cmp bl, $22
4533   22D4 C6 CA 23      je _switch77_case10
4534   22D7 0A DF 23      jmp _switch77_exit
4535   22DA             _switch77_case0:
4536   22DA             ;; *s++ = '\0'; 
4537   22DA 2C FF FF      mov b, [bp + -1] ; $s             
4538   22DD FD 79         mov g, b
4539   22DF FD 77         inc b
4540   22E1 FA FF FF      lea d, [bp + -1] ; $s
4541   22E4 FD 43         mov [d], b
4542   22E6 FD 27         mov b, g
4543   22E8 D8            push b
4544   22E9 26 00 00      mov b, $0
4545   22EC E7            pop d
4546   22ED FD 3E         mov [d], bl
4547   22EF             ;; break; 
4548   22EF 0A DF 23      jmp _switch77_exit ; case break
4549   22F2             _switch77_case1:
4550   22F2             ;; *s++ = '\a'; 
4551   22F2 2C FF FF      mov b, [bp + -1] ; $s             
4552   22F5 FD 79         mov g, b
4553   22F7 FD 77         inc b
4554   22F9 FA FF FF      lea d, [bp + -1] ; $s
4555   22FC FD 43         mov [d], b
4556   22FE FD 27         mov b, g
4557   2300 D8            push b
4558   2301 26 07 00      mov b, $7
4559   2304 E7            pop d
4560   2305 FD 3E         mov [d], bl
4561   2307             ;; break; 
4562   2307 0A DF 23      jmp _switch77_exit ; case break
4563   230A             _switch77_case2:
4564   230A             ;; *s++ = '\b'; 
4565   230A 2C FF FF      mov b, [bp + -1] ; $s             
4566   230D FD 79         mov g, b
4567   230F FD 77         inc b
4568   2311 FA FF FF      lea d, [bp + -1] ; $s
4569   2314 FD 43         mov [d], b
4570   2316 FD 27         mov b, g
4571   2318 D8            push b
4572   2319 26 08 00      mov b, $8
4573   231C E7            pop d
4574   231D FD 3E         mov [d], bl
4575   231F             ;; break;   
4576   231F 0A DF 23      jmp _switch77_exit ; case break
4577   2322             _switch77_case3:
4578   2322             ;; *s++ = '\f'; 
4579   2322 2C FF FF      mov b, [bp + -1] ; $s             
4580   2325 FD 79         mov g, b
4581   2327 FD 77         inc b
4582   2329 FA FF FF      lea d, [bp + -1] ; $s
4583   232C FD 43         mov [d], b
4584   232E FD 27         mov b, g
4585   2330 D8            push b
4586   2331 26 0C 00      mov b, $c
4587   2334 E7            pop d
4588   2335 FD 3E         mov [d], bl
4589   2337             ;; break; 
4590   2337 0A DF 23      jmp _switch77_exit ; case break
4591   233A             _switch77_case4:
4592   233A             ;; *s++ = '\n'; 
4593   233A 2C FF FF      mov b, [bp + -1] ; $s             
4594   233D FD 79         mov g, b
4595   233F FD 77         inc b
4596   2341 FA FF FF      lea d, [bp + -1] ; $s
4597   2344 FD 43         mov [d], b
4598   2346 FD 27         mov b, g
4599   2348 D8            push b
4600   2349 26 0A 00      mov b, $a
4601   234C E7            pop d
4602   234D FD 3E         mov [d], bl
4603   234F             ;; break; 
4604   234F 0A DF 23      jmp _switch77_exit ; case break
4605   2352             _switch77_case5:
4606   2352             ;; *s++ = '\r'; 
4607   2352 2C FF FF      mov b, [bp + -1] ; $s             
4608   2355 FD 79         mov g, b
4609   2357 FD 77         inc b
4610   2359 FA FF FF      lea d, [bp + -1] ; $s
4611   235C FD 43         mov [d], b
4612   235E FD 27         mov b, g
4613   2360 D8            push b
4614   2361 26 0D 00      mov b, $d
4615   2364 E7            pop d
4616   2365 FD 3E         mov [d], bl
4617   2367             ;; break; 
4618   2367 0A DF 23      jmp _switch77_exit ; case break
4619   236A             _switch77_case6:
4620   236A             ;; *s++ = '\t'; 
4621   236A 2C FF FF      mov b, [bp + -1] ; $s             
4622   236D FD 79         mov g, b
4623   236F FD 77         inc b
4624   2371 FA FF FF      lea d, [bp + -1] ; $s
4625   2374 FD 43         mov [d], b
4626   2376 FD 27         mov b, g
4627   2378 D8            push b
4628   2379 26 09 00      mov b, $9
4629   237C E7            pop d
4630   237D FD 3E         mov [d], bl
4631   237F             ;; break; 
4632   237F 0A DF 23      jmp _switch77_exit ; case break
4633   2382             _switch77_case7:
4634   2382             ;; *s++ = '\v'; 
4635   2382 2C FF FF      mov b, [bp + -1] ; $s             
4636   2385 FD 79         mov g, b
4637   2387 FD 77         inc b
4638   2389 FA FF FF      lea d, [bp + -1] ; $s
4639   238C FD 43         mov [d], b
4640   238E FD 27         mov b, g
4641   2390 D8            push b
4642   2391 26 0B 00      mov b, $b
4643   2394 E7            pop d
4644   2395 FD 3E         mov [d], bl
4645   2397             ;; break; 
4646   2397 0A DF 23      jmp _switch77_exit ; case break
4647   239A             _switch77_case8:
4648   239A             ;; *s++ = '\\'; 
4649   239A 2C FF FF      mov b, [bp + -1] ; $s             
4650   239D FD 79         mov g, b
4651   239F FD 77         inc b
4652   23A1 FA FF FF      lea d, [bp + -1] ; $s
4653   23A4 FD 43         mov [d], b
4654   23A6 FD 27         mov b, g
4655   23A8 D8            push b
4656   23A9 26 5C 00      mov b, $5c
4657   23AC E7            pop d
4658   23AD FD 3E         mov [d], bl
4659   23AF             ;; break; 
4660   23AF 0A DF 23      jmp _switch77_exit ; case break
4661   23B2             _switch77_case9:
4662   23B2             ;; *s++ = '\''; 
4663   23B2 2C FF FF      mov b, [bp + -1] ; $s             
4664   23B5 FD 79         mov g, b
4665   23B7 FD 77         inc b
4666   23B9 FA FF FF      lea d, [bp + -1] ; $s
4667   23BC FD 43         mov [d], b
4668   23BE FD 27         mov b, g
4669   23C0 D8            push b
4670   23C1 26 27 00      mov b, $27
4671   23C4 E7            pop d
4672   23C5 FD 3E         mov [d], bl
4673   23C7             ;; break; 
4674   23C7 0A DF 23      jmp _switch77_exit ; case break
4675   23CA             _switch77_case10:
4676   23CA             ;; *s++ = '\"'; 
4677   23CA 2C FF FF      mov b, [bp + -1] ; $s             
4678   23CD FD 79         mov g, b
4679   23CF FD 77         inc b
4680   23D1 FA FF FF      lea d, [bp + -1] ; $s
4681   23D4 FD 43         mov [d], b
4682   23D6 FD 27         mov b, g
4683   23D8 D8            push b
4684   23D9 26 22 00      mov b, $22
4685   23DC E7            pop d
4686   23DD FD 3E         mov [d], bl
4687   23DF             _switch77_exit:
4688   23DF 0A FB 23      jmp _if76_exit
4689   23E2             _if76_else:
4690   23E2             ;; *s++ = *t; 
4691   23E2 2C FF FF      mov b, [bp + -1] ; $s             
4692   23E5 FD 79         mov g, b
4693   23E7 FD 77         inc b
4694   23E9 FA FF FF      lea d, [bp + -1] ; $s
4695   23EC FD 43         mov [d], b
4696   23EE FD 27         mov b, g
4697   23F0 D8            push b
4698   23F1 2C FD FF      mov b, [bp + -3] ; $t             
4699   23F4 74            mov d, b
4700   23F5 32            mov bl, [d]
4701   23F6 A7 00         mov bh, 0
4702   23F8 E7            pop d
4703   23F9 FD 3E         mov [d], bl
4704   23FB             _if76_exit:
4705   23FB 0A 6A 24      jmp _if75_exit
4706   23FE             _if75_else:
4707   23FE             ;; if(toktype == STRING_CONST){ 
4708   23FE             _if78_cond:
4709   23FE 29 A1 24      mov b, [_toktype] ; $toktype           
4710   2401             ; START RELATIONAL
4711   2401 D7            push a
4712   2402 11            mov a, b
4713   2403 26 03 00      mov b, 3; STRING_CONST
4714   2406 B0            cmp a, b
4715   2407 FD 71         seq ; ==
4716   2409 E4            pop a
4717   240A             ; END RELATIONAL
4718   240A C0 00 00      cmp b, 0
4719   240D C6 6A 24      je _if78_exit
4720   2410             _if78_true:
4721   2410             ;; t++; 
4722   2410 2C FD FF      mov b, [bp + -3] ; $t             
4723   2413 FD 79         mov g, b
4724   2415 FD 77         inc b
4725   2417 FA FD FF      lea d, [bp + -3] ; $t
4726   241A FD 43         mov [d], b
4727   241C FD 27         mov b, g
4728   241E             ;; while(*t != '\"' && *t){ 
4729   241E             _while79_cond:
4730   241E 2C FD FF      mov b, [bp + -3] ; $t             
4731   2421 74            mov d, b
4732   2422 32            mov bl, [d]
4733   2423 A7 00         mov bh, 0
4734   2425             ; START RELATIONAL
4735   2425 D7            push a
4736   2426 11            mov a, b
4737   2427 26 22 00      mov b, $22
4738   242A B0            cmp a, b
4739   242B FD 72         sneq ; !=
4740   242D E4            pop a
4741   242E             ; END RELATIONAL
4742   242E D7            push a
4743   242F 11            mov a, b
4744   2430 2C FD FF      mov b, [bp + -3] ; $t             
4745   2433 74            mov d, b
4746   2434 32            mov bl, [d]
4747   2435 A7 00         mov bh, 0
4748   2437 FD A7         sand a, b ; &&
4749   2439 E4            pop a
4750   243A C0 00 00      cmp b, 0
4751   243D C6 67 24      je _while79_exit
4752   2440             _while79_block:
4753   2440             ;; *s++ = *t++; 
4754   2440 2C FF FF      mov b, [bp + -1] ; $s             
4755   2443 FD 79         mov g, b
4756   2445 FD 77         inc b
4757   2447 FA FF FF      lea d, [bp + -1] ; $s
4758   244A FD 43         mov [d], b
4759   244C FD 27         mov b, g
4760   244E D8            push b
4761   244F 2C FD FF      mov b, [bp + -3] ; $t             
4762   2452 FD 79         mov g, b
4763   2454 FD 77         inc b
4764   2456 FA FD FF      lea d, [bp + -3] ; $t
4765   2459 FD 43         mov [d], b
4766   245B FD 27         mov b, g
4767   245D 74            mov d, b
4768   245E 32            mov bl, [d]
4769   245F A7 00         mov bh, 0
4770   2461 E7            pop d
4771   2462 FD 3E         mov [d], bl
4772   2464 0A 1E 24      jmp _while79_cond
4773   2467             _while79_exit:
4774   2467 0A 6A 24      jmp _if78_exit
4775   246A             _if78_exit:
4776   246A             _if75_exit:
4777   246A             ;; *s = '\0'; 
4778   246A 2C FF FF      mov b, [bp + -1] ; $s             
4779   246D D8            push b
4780   246E 26 00 00      mov b, $0
4781   2471 E7            pop d
4782   2472 FD 3E         mov [d], bl
4783   2474 F9            leave
4784   2475 09            ret
4785   2476             
4786   2476             error:
4787   2476 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4788   2479             ;; printf("\nError: "); 
4789   2479 26 33 27      mov b, __s5 ; "\nError: "
4790   247C FD AB         swp b
4791   247E D8            push b
4792   247F 07 AF 09      call printf
4793   2482 51 02 00      add sp, 2
4794   2485             ;; printf(msg); 
4795   2485 2C 05 00      mov b, [bp + 5] ; $msg             
4796   2488 FD AB         swp b
4797   248A D8            push b
4798   248B 07 AF 09      call printf
4799   248E 51 02 00      add sp, 2
4800   2491             ;; printf("\n"); 
4801   2491 26 B7 26      mov b, __s1 ; "\n"
4802   2494 FD AB         swp b
4803   2496 D8            push b
4804   2497 07 AF 09      call printf
4805   249A 51 02 00      add sp, 2
4806   249D F9            leave
4807   249E 09            ret
4808   249F             ; --- END TEXT BLOCK
4809   249F             
4810   249F             ; --- BEGIN DATA BLOCK
4811   249F 00 00       _tok: .fill 2, 0
4812   24A1 00 00       _toktype: .fill 2, 0
4813   24A3 00 00       _prog: .fill 2, 0
4814   24A5 00 00 00 00 _token_data: .fill 256, 0
4814   24A9 00 00 00 00 
4814   24AD 00 00 00 00 
4814   24B1 00 00 00 00 
4814   24B5 00 00 00 00 
4814   24B9 00 00 00 00 
4814   24BD 00 00 00 00 
4814   24C1 00 00 00 00 
4814   24C5 00 00 00 00 
4814   24C9 00 00 00 00 
4814   24CD 00 00 00 00 
4814   24D1 00 00 00 00 
4814   24D5 00 00 00 00 
4814   24D9 00 00 00 00 
4814   24DD 00 00 00 00 
4814   24E1 00 00 00 00 
4814   24E5 00 00 00 00 
4814   24E9 00 00 00 00 
4814   24ED 00 00 00 00 
4814   24F1 00 00 00 00 
4814   24F5 00 00 00 00 
4814   24F9 00 00 00 00 
4814   24FD 00 00 00 00 
4814   2501 00 00 00 00 
4814   2505 00 00 00 00 
4814   2509 00 00 00 00 
4814   250D 00 00 00 00 
4814   2511 00 00 00 00 
4814   2515 00 00 00 00 
4814   2519 00 00 00 00 
4814   251D 00 00 00 00 
4814   2521 00 00 00 00 
4814   2525 00 00 00 00 
4814   2529 00 00 00 00 
4814   252D 00 00 00 00 
4814   2531 00 00 00 00 
4814   2535 00 00 00 00 
4814   2539 00 00 00 00 
4814   253D 00 00 00 00 
4814   2541 00 00 00 00 
4814   2545 00 00 00 00 
4814   2549 00 00 00 00 
4814   254D 00 00 00 00 
4814   2551 00 00 00 00 
4814   2555 00 00 00 00 
4814   2559 00 00 00 00 
4814   255D 00 00 00 00 
4814   2561 00 00 00 00 
4814   2565 00 00 00 00 
4814   2569 00 00 00 00 
4814   256D 00 00 00 00 
4814   2571 00 00 00 00 
4814   2575 00 00 00 00 
4814   2579 00 00 00 00 
4814   257D 00 00 00 00 
4814   2581 00 00 00 00 
4814   2585 00 00 00 00 
4814   2589 00 00 00 00 
4814   258D 00 00 00 00 
4814   2591 00 00 00 00 
4814   2595 00 00 00 00 
4814   2599 00 00 00 00 
4814   259D 00 00 00 00 
4814   25A1 00 00 00 00 
4815   25A5 00 00 00 00 _string_const_data: .fill 256, 0
4815   25A9 00 00 00 00 
4815   25AD 00 00 00 00 
4815   25B1 00 00 00 00 
4815   25B5 00 00 00 00 
4815   25B9 00 00 00 00 
4815   25BD 00 00 00 00 
4815   25C1 00 00 00 00 
4815   25C5 00 00 00 00 
4815   25C9 00 00 00 00 
4815   25CD 00 00 00 00 
4815   25D1 00 00 00 00 
4815   25D5 00 00 00 00 
4815   25D9 00 00 00 00 
4815   25DD 00 00 00 00 
4815   25E1 00 00 00 00 
4815   25E5 00 00 00 00 
4815   25E9 00 00 00 00 
4815   25ED 00 00 00 00 
4815   25F1 00 00 00 00 
4815   25F5 00 00 00 00 
4815   25F9 00 00 00 00 
4815   25FD 00 00 00 00 
4815   2601 00 00 00 00 
4815   2605 00 00 00 00 
4815   2609 00 00 00 00 
4815   260D 00 00 00 00 
4815   2611 00 00 00 00 
4815   2615 00 00 00 00 
4815   2619 00 00 00 00 
4815   261D 00 00 00 00 
4815   2621 00 00 00 00 
4815   2625 00 00 00 00 
4815   2629 00 00 00 00 
4815   262D 00 00 00 00 
4815   2631 00 00 00 00 
4815   2635 00 00 00 00 
4815   2639 00 00 00 00 
4815   263D 00 00 00 00 
4815   2641 00 00 00 00 
4815   2645 00 00 00 00 
4815   2649 00 00 00 00 
4815   264D 00 00 00 00 
4815   2651 00 00 00 00 
4815   2655 00 00 00 00 
4815   2659 00 00 00 00 
4815   265D 00 00 00 00 
4815   2661 00 00 00 00 
4815   2665 00 00 00 00 
4815   2669 00 00 00 00 
4815   266D 00 00 00 00 
4815   2671 00 00 00 00 
4815   2675 00 00 00 00 
4815   2679 00 00 00 00 
4815   267D 00 00 00 00 
4815   2681 00 00 00 00 
4815   2685 00 00 00 00 
4815   2689 00 00 00 00 
4815   268D 00 00 00 00 
4815   2691 00 00 00 00 
4815   2695 00 00 00 00 
4815   2699 00 00 00 00 
4815   269D 00 00 00 00 
4815   26A1 00 00 00 00 
4816   26A5 00 00       _address: .fill 2, 0
4817   26A7 00          _data: .fill 1, 0
4818   26A8 0A 50 61 72 __s0: .db "\nParam Value: ", 0
4818   26AC 61 6D 20 56 
4818   26B0 61 6C 75 65 
4818   26B4 3A 20 00 
4819   26B7 0A 00       __s1: .db "\n", 0
4820   26B9 55 6E 6B 6E __s2: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
4820   26BD 6F 77 6E 20 
4820   26C1 74 79 70 65 
4820   26C5 20 73 69 7A 
4820   26C9 65 20 69 6E 
4820   26CD 20 76 61 5F 
4820   26D1 61 72 67 28 
4820   26D5 29 20 63 61 
4820   26D9 6C 6C 2E 20 
4820   26DD 53 69 7A 65 
4820   26E1 20 6E 65 65 
4820   26E5 64 73 20 74 
4820   26E9 6F 20 62 65 
4820   26ED 20 65 69 74 
4820   26F1 68 65 72 20 
4820   26F5 31 20 6F 72 
4820   26F9 20 32 2E 00 
4821   26FD 45 72 72 6F __s3: .db "Error: Unknown argument type.\n", 0
4821   2701 72 3A 20 55 
4821   2705 6E 6B 6E 6F 
4821   2709 77 6E 20 61 
4821   270D 72 67 75 6D 
4821   2711 65 6E 74 20 
4821   2715 74 79 70 65 
4821   2719 2E 0A 00 
4822   271C 44 6F 75 62 __s4: .db "Double quotes expected", 0
4822   2720 6C 65 20 71 
4822   2724 75 6F 74 65 
4822   2728 73 20 65 78 
4822   272C 70 65 63 74 
4822   2730 65 64 00 
4823   2733 0A 45 72 72 __s5: .db "\nError: ", 0
4823   2737 6F 72 3A 20 
4823   273B 00 
4824   273C             
4825   273C 3E 27       _heap_top: .dw _heap
4826   273E 00          _heap: .db 0
4827   273F             ; --- END DATA BLOCK
4828   273F             
4829   273F             .end
tasm: Number of errors = 0
