0001   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002   0000             ; ed - the original Unix text editor!
0003   0000             ;
0004   0000             ; 1,$p
0005   0000             ; 1,2p
0006   0000             ;
0007   0000             ; 2d
0008   0000             ; 1,3d
0009   0000             ;
0010   0000             ; 2a
0011   0000             ; 
0012   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0013   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_spawn_proc   .EQU  $0005
0007+  0000             sys_list         .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             text_org         .EQU  $0400
0014   0000             
0015   0400             .org text_org			; origin at 1024
0016   0400             
0017   0400             ed_main:
0018   0400 FD 47 FF FF 	mov sp, $FFFF
0019   0404 FD 49 FF FF 	mov bp, $FFFF
0020   0408             
0021   0408 10 00 00    	mov a, 0
0022   040B 42 CC 0E    	mov [prog], a
0023   040E 07 2D 0D    	call get_token
0024   0411 1D CF 0E    	mov al, [tok]
0025   0414 B9 14       	cmp al, TOK_END
0026   0416 C6 4D 04    	je no_filename_given	; no filename given as argument
0027   0419             
0028   0419 07 B3 0E    	call _putback
0029   041C 07 D6 0C    	call get_path			; read filename
0030   041F 3B D0 0E    	mov d, tokstr
0031   0422 FD 4F D6 21 	mov di, text_buffer		; pointer to write buffer
0032   0426 19 14       	mov al, 20
0033   0428 05 04       	syscall sys_filesystem		; read textfile into buffer
0034   042A 3B D6 21    	mov d, text_buffer
0035   042D 07 DA 08    	call _strlen
0036   0430 12          	mov a, c				; find size of buffer
0037   0431 53 D6 21    	add a, text_buffer
0038   0434 3C          	mov d, a
0039   0435 19 0A       	mov al, $0A
0040   0437 3E          	mov [d], al
0041   0438 79          	inc d
0042   0439 19 00       	mov al, 0
0043   043B 3E          	mov [d], al
0044   043C 13          	mov a, d
0045   043D 42 68 08    	mov [txt_buffer_ptr], a	; set buffer pointer
0046   0440             
0047   0440 3B D6 21    	mov d, text_buffer
0048   0443 07 DA 08    	call _strlen
0049   0446 12          	mov a, c
0050   0447 07 D0 0A    	call print_u16d
0051   044A 07 54 0A    	call printnl
0052   044D             
0053   044D             no_filename_given:
0054   044D             main_L0:
0055   044D F2 D0 0E 00 	mov byte [tokstr], 0			; clear tokstr (so that enter doesnt repeat last shell command)
0056   0451 07 57 04    	call command_parser
0057   0454 0A 4D 04    	jmp main_L0
0058   0457             
0059   0457             ; ,p
0060   0457             ; 1,3p
0061   0457             ; 2p
0062   0457             ; 1,$d
0063   0457             command_parser:
0064   0457 3B 68 06    	mov d, input_buff
0065   045A 10 68 06    	mov a, input_buff
0066   045D 42 CC 0E    	mov [prog], a
0067   0460 07 82 09    	call _gets						; get command
0068   0463 1D 68 06    	mov al, [input_buff]
0069   0466 07 22 0C    	call _isalpha
0070   0469 C6 B0 04    	je get_command					; test if this is a command with a range in front
0071   046C             
0072   046C B9 2C       	cmp al, ','
0073   046E C7 87 04    	jne parser_hasrange
0074   0471 10 01 00    	mov a, 1
0075   0474 42 D2 0F    	mov [start], a
0076   0477 07 4F 06    	call total_lines
0077   047A 42 D4 0F    	mov [end], a			; set range as the full range
0078   047D 14 CC 0E    	mov a, [prog]
0079   0480 77          	inc a
0080   0481 42 CC 0E    	mov [prog], a			; pass over ',' token
0081   0484 0A B0 04    	jmp get_command
0082   0487             
0083   0487             parser_hasrange:
0084   0487 07 68 0E    	call get_number			; range start
0085   048A 3B D0 0E    	mov d, tokstr
0086   048D 07 77 0A    	call _strtoint			; convert range to integer in A
0087   0490 42 D2 0F    	mov [start], a			; save range start
0088   0493 42 D4 0F    	mov [end], a			; save end too in case the range end is not given
0089   0496             
0090   0496 07 2D 0D    	call get_token
0091   0499 1D CF 0E    	mov al, [tok]
0092   049C B9 0B       	cmp al, TOK_COMMA
0093   049E C6 A4 04    	je parser_range_end
0094   04A1 0A B3 04    	jmp parser_start		; not a comma, so it must be a command
0095   04A4             
0096   04A4             parser_range_end:
0097   04A4 07 68 0E    	call get_number			; range end
0098   04A7 3B D0 0E    	mov d, tokstr
0099   04AA 07 77 0A    	call _strtoint			; convert range to integer in A
0100   04AD 42 D4 0F    	mov [end], a			; save range start
0101   04B0             
0102   04B0             get_command:
0103   04B0 07 2D 0D    	call get_token			; get command
0104   04B3             parser_start:
0105   04B3 FD 4F 6C 08 	mov di, keywords
0106   04B7 10 00 00    	mov a, 0
0107   04BA 42 D0 0F    	mov [parser_index], a		; reset keywords index
0108   04BD             parser_L2:
0109   04BD FD 4D D0 0E 	mov si, tokstr
0110   04C1 07 EA 08    	call _strcmp
0111   04C4 C6 EE 04    	je parser_cmd_equal
0112   04C7             parser_L2_L0:
0113   04C7 FC 00 00    	lea d, [di + 0]
0114   04CA 1E          	mov al, [d]
0115   04CB B9 00       	cmp al, 0
0116   04CD C6 D6 04    	je parser_L2_L0_exit			; run through the keyword until finding NULL
0117   04D0 D4 01 00    	add di, 1
0118   04D3 0A C7 04    	jmp parser_L2_L0
0119   04D6             parser_L2_L0_exit:
0120   04D6 D4 01 00    	add di, 1				; then skip NULL byte at the end 
0121   04D9 14 D0 0F    	mov a, [parser_index]
0122   04DC 53 02 00    	add a, 2
0123   04DF 42 D0 0F    	mov [parser_index], a			; increase keywords table index
0124   04E2 FC 00 00    	lea d, [di + 0]
0125   04E5 1E          	mov al, [d]
0126   04E6 B9 00       	cmp al, 0
0127   04E8 C6 00 05    	je parser_cmd_not_found
0128   04EB 0A BD 04    	jmp parser_L2
0129   04EE             parser_cmd_equal:
0130   04EE 10 00 0D    	mov a, $0D00
0131   04F1 05 03       	syscall sys_io				; print carriage return
0132   04F3 14 D0 0F    	mov a, [parser_index]			; get the keyword pointer
0133   04F6 FD 07 7F 08 	call [a + keyword_pointers]		; execute command
0134   04FA 10 00 0D    	mov a, $0D00
0135   04FD 05 03       	syscall sys_io				; print carriage return
0136   04FF 09          	ret
0137   0500             parser_cmd_not_found:
0138   0500 22 3F       	mov ah, '?'
0139   0502 07 7B 09    	call _putchar
0140   0505 09          	ret
0141   0506             
0142   0506             ; A = line to append after
0143   0506             ; B = address of text to append
0144   0506             append_lines:
0145   0506 77          	inc a
0146   0507 74          	mov d, b
0147   0508 07 DA 08    	call _strlen		; length of text in C
0148   050B 07 32 06    	call find_line	; address in D
0149   050E FD 50       	mov di, d
0150   0510 FD 4E       	mov si, d
0151   0512             append_lines_L0:
0152   0512 F6          	lodsb
0153   0513 B9 0A       	cmp al, $0A
0154   0515 C7 12 05    	jne append_lines_L0
0155   0518             ; now SI points to char after \n
0156   0518             ; start copying chars from there to beginning of deleted line
0157   0518             ; copy till we find NULL
0158   0518             append_lines_L1:
0159   0518 F6          	lodsb
0160   0519 F7          	stosb
0161   051A B9 00       	cmp al, 0
0162   051C C7 18 05    	jne append_lines_L1
0163   051F             append_lines_end:
0164   051F 09          	ret
0165   0520             
0166   0520             cmd_append:
0167   0520 14 68 08    	mov a, [txt_buffer_ptr]
0168   0523 3C          	mov d, a
0169   0524             cmd_append_L0:
0170   0524 07 82 09    	call _gets		; read new line
0171   0527 FD 4E       	mov si, d
0172   0529 FD 4F 6A 08 	mov di, s_dot
0173   052D 07 EA 08    	call _strcmp
0174   0530 C6 50 05    	je cmd_append_end
0175   0533 14 68 08    	mov a, [txt_buffer_ptr]
0176   0536 4D          	mov si, a
0177   0537             cmd_append_L1:		; look for NULL termination
0178   0537 F6          	lodsb
0179   0538 B9 00       	cmp al, 0
0180   053A C7 37 05    	jne cmd_append_L1
0181   053D FB FF FF    	lea d, [si + -1]
0182   0540 19 0A       	mov al, $0A
0183   0542 3E          	mov [d], al
0184   0543 FB 00 00    	lea d, [si + 0]
0185   0546 19 00       	mov al, 0
0186   0548 3E          	mov [d], al
0187   0549 13          	mov a, d
0188   054A 42 68 08    	mov [txt_buffer_ptr], a
0189   054D 0A 24 05    	jmp cmd_append_L0
0190   0550             cmd_append_end:
0191   0550 19 00       	mov al, 0
0192   0552 3E          	mov [d], al
0193   0553 09          	ret
0194   0554             
0195   0554             cmd_insert:
0196   0554 09          	ret
0197   0555             
0198   0555             cmd_quit:
0199   0555 05 0B       	syscall sys_terminate_proc
0200   0557             
0201   0557             ; first line\n
0202   0557             ; second line\n
0203   0557             ; third line\n
0204   0557             ; fourth line\n
0205   0557             cmd_delete:
0206   0557 14 D4 0F    	mov a, [end]		; get starting line
0207   055A             cmd_delete_L0:
0208   055A 07 78 05    	call delete_line		
0209   055D 29 D2 0F    	mov b, [start]
0210   0560 B0          	cmp a, b
0211   0561 C6 68 05    	je cmd_delete_end
0212   0564 7D          	dec a
0213   0565 0A 5A 05    	jmp cmd_delete_L0
0214   0568             cmd_delete_end:
0215   0568             ; set text pointer to the end of file
0216   0568 FD 4D D6 21 	mov si, text_buffer
0217   056C             cmd_delete_L1:
0218   056C F6          	lodsb
0219   056D B9 00       	cmp al, 0
0220   056F C7 6C 05    	jne cmd_delete_L1
0221   0572 4E          	mov a, si
0222   0573 7D          	dec a
0223   0574 42 68 08    	mov [txt_buffer_ptr], a
0224   0577 09          	ret
0225   0578             	
0226   0578             ; find address of line beginning
0227   0578             ; find EOL address
0228   0578             ; start copying chars from EOL into beginning of required line
0229   0578             ; stop when reache NULL
0230   0578             ; A = line to delete
0231   0578             delete_line:
0232   0578 D7          	push a
0233   0579 07 32 06    	call find_line	; address in D
0234   057C FD 50       	mov di, d
0235   057E FD 4E       	mov si, d
0236   0580             delete_line_L0:
0237   0580 F6          	lodsb
0238   0581 B9 0A       	cmp al, $0A
0239   0583 C7 80 05    	jne delete_line_L0
0240   0586             ; now SI points to char after \n
0241   0586             ; start copying chars from there to beginning of deleted line
0242   0586             ; copy till we find NULL
0243   0586             delete_line_L1:
0244   0586 F6          	lodsb
0245   0587 F7          	stosb
0246   0588 B9 00       	cmp al, 0
0247   058A C7 86 05    	jne delete_line_L1
0248   058D             delete_line_end:
0249   058D E4          	pop a
0250   058E 09          	ret
0251   058F             
0252   058F             cmd_open:
0253   058F 07 2D 0D    	call get_token			; read filename
0254   0592 3B D0 0E    	mov d, tokstr
0255   0595 FD 4F D6 21 	mov di, text_buffer		; pointer to write buffer
0256   0599 19 14       	mov al, 20
0257   059B 05 04       	syscall sys_filesystem		; read textfile into buffer
0258   059D 3B D6 21    	mov d, text_buffer
0259   05A0 07 DA 08    	call _strlen
0260   05A3 12          	mov a, c				; find size of buffer
0261   05A4 53 D6 21    	add a, text_buffer
0262   05A7 3C          	mov d, a
0263   05A8 19 0A       	mov al, $0A
0264   05AA 3E          	mov [d], al
0265   05AB 79          	inc d
0266   05AC 19 00       	mov al, 0
0267   05AE 3E          	mov [d], al
0268   05AF 13          	mov a, d
0269   05B0 42 68 08    	mov [txt_buffer_ptr], a	; set buffer pointer
0270   05B3             
0271   05B3 3B D6 21    	mov d, text_buffer
0272   05B6 07 DA 08    	call _strlen
0273   05B9 12          	mov a, c
0274   05BA 07 D0 0A    	call print_u16d
0275   05BD 07 54 0A    	call printnl
0276   05C0 09          	ret
0277   05C1             
0278   05C1             cmd_save:
0279   05C1 07 2D 0D    	call get_token		; read filename
0280   05C4 FD 4D D0 0E 	mov si, tokstr
0281   05C8 FD 4F D7 1F 	mov di, transient_data + 1
0282   05CC 07 FF 08    	call _strcpy				; copy filename
0283   05CF             
0284   05CF 3B D6 1F    	mov d, transient_data	; pass data to kernel. starting at 512 byte header. text_buffer follows the header in mem.
0285   05D2 19 05       	mov al, 5
0286   05D4 05 04       	syscall sys_filesystem
0287   05D6             
0288   05D6 3B D6 21    	mov d, text_buffer
0289   05D9 07 DA 08    	call _strlen
0290   05DC 12          	mov a, c
0291   05DD 07 D0 0A    	call print_u16d
0292   05E0 07 54 0A    	call printnl
0293   05E3 09          	ret
0294   05E4             	
0295   05E4             cmd_list:
0296   05E4 3B D6 21    	mov d, text_buffer
0297   05E7 07 A7 0A    	call _puts
0298   05EA 09          	ret
0299   05EB             
0300   05EB             cmd_print:
0301   05EB 14 D2 0F    	mov a, [start]		; get starting line
0302   05EE             cmd_print_L0:
0303   05EE 07 32 06    	call find_line		; address in D
0304   05F1 07 1F 06    	call printline		; print line at D	
0305   05F4 29 D4 0F    	mov b, [end]
0306   05F7 B0          	cmp a, b
0307   05F8 C6 FF 05    	je cmd_print_end
0308   05FB 77          	inc a
0309   05FC 0A EE 05    	jmp cmd_print_L0
0310   05FF             cmd_print_end:
0311   05FF 09          	ret
0312   0600             
0313   0600             cmd_print_numbered:
0314   0600 14 D2 0F    	mov a, [start]		; get starting line
0315   0603             cmd_print_numbered_L0:
0316   0603 D7          	push a
0317   0604 07 D0 0A    	call print_u16d
0318   0607 22 09       	mov ah, $09			; TAB
0319   0609 07 7B 09    	call _putchar
0320   060C E4          	pop a
0321   060D 07 32 06    	call find_line		; address in D
0322   0610 07 1F 06    	call printline		; print line at D	
0323   0613 29 D4 0F    	mov b, [end]
0324   0616 B0          	cmp a, b
0325   0617 C6 1E 06    	je cmd_print_numbered_end
0326   061A 77          	inc a
0327   061B 0A 03 06    	jmp cmd_print_numbered_L0
0328   061E             cmd_print_numbered_end:
0329   061E 09          	ret
0330   061F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331   061F             ; PRINT LINE
0332   061F             ; pointer in D
0333   061F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334   061F             printline:
0335   061F D7          	push a
0336   0620 DA          	push d
0337   0621             printline_L0:
0338   0621 1E          	mov al, [d]
0339   0622 23          	mov ah, al
0340   0623 07 7B 09    	call _putchar
0341   0626 B9 0A       	cmp al, $0A
0342   0628 C6 2F 06    	je printline_end
0343   062B 79          	inc d
0344   062C 0A 21 06    	jmp printline_L0
0345   062F             printline_end:
0346   062F E7          	pop d
0347   0630 E4          	pop a
0348   0631 09          	ret
0349   0632             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0350   0632             ; INPUTS
0351   0632             ; A = line number
0352   0632             ; OUTPUTS
0353   0632             ; D = line address
0354   0632             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0355   0632             find_line:
0356   0632 D7          	push a
0357   0633 D8          	push b
0358   0634 26 D6 21    	mov b, text_buffer
0359   0637 FD 42 CC 0E 	mov [prog], b
0360   063B             find_line_L0:
0361   063B AF 01 00    	cmp a, 1
0362   063E C6 48 06    	je find_line_end
0363   0641 07 08 0D    	call get_line
0364   0644 7D          	dec a
0365   0645 0A 3B 06    	jmp find_line_L0
0366   0648             find_line_end:
0367   0648 14 CC 0E    	mov a, [prog]
0368   064B 3C          	mov d, a
0369   064C E5          	pop b
0370   064D E4          	pop a
0371   064E 09          	ret
0372   064F             
0373   064F             
0374   064F             ; find total number of lines
0375   064F             ; A = total
0376   064F             total_lines:
0377   064F 26 00 00    	mov b, 0
0378   0652 FD 4D D6 21 	mov si, text_buffer
0379   0656             total_lines_L0:
0380   0656 F6          	lodsb
0381   0657 B9 00       	cmp al, 0
0382   0659 C6 66 06    	je total_lines_end
0383   065C B9 0A       	cmp al, $0A
0384   065E C7 56 06    	jne total_lines_L0
0385   0661 FD 77       	inc b
0386   0663 0A 56 06    	jmp total_lines_L0
0387   0666             total_lines_end:
0388   0666 11          	mov a, b
0389   0667 09          	ret
0390   0668             
0391   0668 00 00 00 00 input_buff:			.fill 512, 0
0391   066C 00 00 00 00 
0391   0670 00 00 00 00 
0391   0674 00 00 00 00 
0391   0678 00 00 00 00 
0391   067C 00 00 00 00 
0391   0680 00 00 00 00 
0391   0684 00 00 00 00 
0391   0688 00 00 00 00 
0391   068C 00 00 00 00 
0391   0690 00 00 00 00 
0391   0694 00 00 00 00 
0391   0698 00 00 00 00 
0391   069C 00 00 00 00 
0391   06A0 00 00 00 00 
0391   06A4 00 00 00 00 
0391   06A8 00 00 00 00 
0391   06AC 00 00 00 00 
0391   06B0 00 00 00 00 
0391   06B4 00 00 00 00 
0391   06B8 00 00 00 00 
0391   06BC 00 00 00 00 
0391   06C0 00 00 00 00 
0391   06C4 00 00 00 00 
0391   06C8 00 00 00 00 
0391   06CC 00 00 00 00 
0391   06D0 00 00 00 00 
0391   06D4 00 00 00 00 
0391   06D8 00 00 00 00 
0391   06DC 00 00 00 00 
0391   06E0 00 00 00 00 
0391   06E4 00 00 00 00 
0391   06E8 00 00 00 00 
0391   06EC 00 00 00 00 
0391   06F0 00 00 00 00 
0391   06F4 00 00 00 00 
0391   06F8 00 00 00 00 
0391   06FC 00 00 00 00 
0391   0700 00 00 00 00 
0391   0704 00 00 00 00 
0391   0708 00 00 00 00 
0391   070C 00 00 00 00 
0391   0710 00 00 00 00 
0391   0714 00 00 00 00 
0391   0718 00 00 00 00 
0391   071C 00 00 00 00 
0391   0720 00 00 00 00 
0391   0724 00 00 00 00 
0391   0728 00 00 00 00 
0391   072C 00 00 00 00 
0391   0730 00 00 00 00 
0391   0734 00 00 00 00 
0391   0738 00 00 00 00 
0391   073C 00 00 00 00 
0391   0740 00 00 00 00 
0391   0744 00 00 00 00 
0391   0748 00 00 00 00 
0391   074C 00 00 00 00 
0391   0750 00 00 00 00 
0391   0754 00 00 00 00 
0391   0758 00 00 00 00 
0391   075C 00 00 00 00 
0391   0760 00 00 00 00 
0391   0764 00 00 00 00 
0391   0768 00 00 00 00 
0391   076C 00 00 00 00 
0391   0770 00 00 00 00 
0391   0774 00 00 00 00 
0391   0778 00 00 00 00 
0391   077C 00 00 00 00 
0391   0780 00 00 00 00 
0391   0784 00 00 00 00 
0391   0788 00 00 00 00 
0391   078C 00 00 00 00 
0391   0790 00 00 00 00 
0391   0794 00 00 00 00 
0391   0798 00 00 00 00 
0391   079C 00 00 00 00 
0391   07A0 00 00 00 00 
0391   07A4 00 00 00 00 
0391   07A8 00 00 00 00 
0391   07AC 00 00 00 00 
0391   07B0 00 00 00 00 
0391   07B4 00 00 00 00 
0391   07B8 00 00 00 00 
0391   07BC 00 00 00 00 
0391   07C0 00 00 00 00 
0391   07C4 00 00 00 00 
0391   07C8 00 00 00 00 
0391   07CC 00 00 00 00 
0391   07D0 00 00 00 00 
0391   07D4 00 00 00 00 
0391   07D8 00 00 00 00 
0391   07DC 00 00 00 00 
0391   07E0 00 00 00 00 
0391   07E4 00 00 00 00 
0391   07E8 00 00 00 00 
0391   07EC 00 00 00 00 
0391   07F0 00 00 00 00 
0391   07F4 00 00 00 00 
0391   07F8 00 00 00 00 
0391   07FC 00 00 00 00 
0391   0800 00 00 00 00 
0391   0804 00 00 00 00 
0391   0808 00 00 00 00 
0391   080C 00 00 00 00 
0391   0810 00 00 00 00 
0391   0814 00 00 00 00 
0391   0818 00 00 00 00 
0391   081C 00 00 00 00 
0391   0820 00 00 00 00 
0391   0824 00 00 00 00 
0391   0828 00 00 00 00 
0391   082C 00 00 00 00 
0391   0830 00 00 00 00 
0391   0834 00 00 00 00 
0391   0838 00 00 00 00 
0391   083C 00 00 00 00 
0391   0840 00 00 00 00 
0391   0844 00 00 00 00 
0391   0848 00 00 00 00 
0391   084C 00 00 00 00 
0391   0850 00 00 00 00 
0391   0854 00 00 00 00 
0391   0858 00 00 00 00 
0391   085C 00 00 00 00 
0391   0860 00 00 00 00 
0391   0864 00 00 00 00 
0392   0868             
0393   0868 D6 21       txt_buffer_ptr:		.dw text_buffer
0394   086A             
0395   086A 2E 00       s_dot:				.db ".", 0
0396   086C             
0397   086C             keywords:
0398   086C 61 00       	.db "a", 0		; append
0399   086E 69 00       	.db "i", 0		; insert
0400   0870 64 00       	.db "d", 0		; delete
0401   0872 70 00       	.db "p", 0		; print
0402   0874 6E 00       	.db "n", 0		; print
0403   0876 6C 00       	.db "l", 0		; list
0404   0878 65 00       	.db "e", 0		; edit
0405   087A 77 00       	.db "w", 0		; write
0406   087C 71 00       	.db "q", 0		; quit
0407   087E 00          	.db 0
0408   087F             
0409   087F             keyword_pointers:
0410   087F 20 05       	.dw cmd_append
0411   0881 54 05       	.dw cmd_insert
0412   0883 57 05       	.dw cmd_delete
0413   0885 EB 05       	.dw cmd_print
0414   0887 00 06       	.dw cmd_print_numbered
0415   0889 E4 05       	.dw cmd_list
0416   088B 8F 05       	.dw cmd_open
0417   088D C1 05       	.dw cmd_save
0418   088F 55 05       	.dw cmd_quit
0419   0891             
0420   0891 3F 00       s_bad_command:		.db "?", 0
0421   0893             
0422   0893             ; file includes. these are functions used by the shell
0423   0893             .include "lib/stdio.asm"
0001+  0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0893             ; stdio.s
0003+  0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0893             .include "lib/string.asm"
0001++ 0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0893             ; string.s
0003++ 0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0893             
0005++ 0893             
0006++ 0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0893             ; _strrev
0008++ 0893             ; reverse a string
0009++ 0893             ; D = string address
0010++ 0893             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0893             ; 01234
0012++ 0893             _strrev:
0013++ 0893 4B          	pusha
0014++ 0894 07 DA 08    	call _strlen	; length in C
0015++ 0897 12          	mov a, c
0016++ 0898 AF 01 00    	cmp a, 1
0017++ 089B D0 B5 08    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 089E 7D          	dec a
0019++ 089F FD 4E       	mov si, d	; beginning of string
0020++ 08A1 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 08A3 59          	add d, a	; end of string
0022++ 08A4 12          	mov a, c
0023++ 08A5 FD 9B       	shr a		; divide by 2
0024++ 08A7 39          	mov c, a	; C now counts the steps
0025++ 08A8             _strrev_L0:
0026++ 08A8 32          	mov bl, [d]	; save load right-side char into BL
0027++ 08A9 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 08AA 3E          	mov [d], al	; store left char into right side
0029++ 08AB 1B          	mov al, bl
0030++ 08AC F7          	stosb		; store right-side char into left-side; increase DI
0031++ 08AD 7E          	dec c
0032++ 08AE 7F          	dec d
0033++ 08AF C2 00 00    	cmp c, 0
0034++ 08B2 C7 A8 08    	jne _strrev_L0
0035++ 08B5             _strrev_end:
0036++ 08B5 4C          	popa
0037++ 08B6 09          	ret
0038++ 08B7             	
0039++ 08B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 08B7             ; _strchr
0041++ 08B7             ; search string in D for char in AL
0042++ 08B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 08B7             _strchr:
0044++ 08B7             _strchr_L0:
0045++ 08B7 32          	mov bl, [d]
0046++ 08B8 C1 00       	cmp bl, 0
0047++ 08BA C6 C5 08    	je _strchr_end
0048++ 08BD BA          	cmp al, bl
0049++ 08BE C6 C5 08    	je _strchr_end
0050++ 08C1 79          	inc d
0051++ 08C2 0A B7 08    	jmp _strchr_L0
0052++ 08C5             _strchr_end:
0053++ 08C5 1B          	mov al, bl
0054++ 08C6 09          	ret
0055++ 08C7             
0056++ 08C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 08C7             ; _strstr
0058++ 08C7             ; find sub-string
0059++ 08C7             ; str1 in SI
0060++ 08C7             ; str2 in DI
0061++ 08C7             ; SI points to end of source string
0062++ 08C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 08C7             _strstr:
0064++ 08C7 DB          	push al
0065++ 08C8 DA          	push d
0066++ 08C9 E3          	push di
0067++ 08CA             _strstr_loop:
0068++ 08CA F3          	cmpsb					; compare a byte of the strings
0069++ 08CB C7 D6 08    	jne _strstr_ret
0070++ 08CE FC 00 00    	lea d, [di + 0]
0071++ 08D1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 08D3 C7 CA 08    	jne _strstr_loop				; equal chars but not at end
0073++ 08D6             _strstr_ret:
0074++ 08D6 F0          	pop di
0075++ 08D7 E7          	pop d
0076++ 08D8 E8          	pop al
0077++ 08D9 09          	ret
0078++ 08DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 08DA             ; length of null terminated string
0080++ 08DA             ; result in C
0081++ 08DA             ; pointer in D
0082++ 08DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 08DA             _strlen:
0084++ 08DA DA          	push d
0085++ 08DB 38 00 00    	mov c, 0
0086++ 08DE             _strlen_L1:
0087++ 08DE BD 00       	cmp byte [d], 0
0088++ 08E0 C6 E8 08    	je _strlen_ret
0089++ 08E3 79          	inc d
0090++ 08E4 78          	inc c
0091++ 08E5 0A DE 08    	jmp _strlen_L1
0092++ 08E8             _strlen_ret:
0093++ 08E8 E7          	pop d
0094++ 08E9 09          	ret
0095++ 08EA             
0096++ 08EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 08EA             ; STRCMP
0098++ 08EA             ; compare two strings
0099++ 08EA             ; str1 in SI
0100++ 08EA             ; str2 in DI
0101++ 08EA             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 08EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 08EA             _strcmp:
0104++ 08EA DB          	push al
0105++ 08EB DA          	push d
0106++ 08EC E3          	push di
0107++ 08ED E2          	push si
0108++ 08EE             _strcmp_loop:
0109++ 08EE F3          	cmpsb					; compare a byte of the strings
0110++ 08EF C7 FA 08    	jne _strcmp_ret
0111++ 08F2 FB FF FF    	lea d, [si +- 1]
0112++ 08F5 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 08F7 C7 EE 08    	jne _strcmp_loop				; equal chars but not at end
0114++ 08FA             _strcmp_ret:
0115++ 08FA EF          	pop si
0116++ 08FB F0          	pop di
0117++ 08FC E7          	pop d
0118++ 08FD E8          	pop al
0119++ 08FE 09          	ret
0120++ 08FF             
0121++ 08FF             
0122++ 08FF             ; STRCPY
0123++ 08FF             ; copy null terminated string from SI to DI
0124++ 08FF             ; source in SI
0125++ 08FF             ; destination in DI
0126++ 08FF             _strcpy:
0127++ 08FF E2          	push si
0128++ 0900 E3          	push di
0129++ 0901 DB          	push al
0130++ 0902             _strcpy_L1:
0131++ 0902 F6          	lodsb
0132++ 0903 F7          	stosb
0133++ 0904 B9 00       	cmp al, 0
0134++ 0906 C7 02 09    	jne _strcpy_L1
0135++ 0909             _strcpy_end:
0136++ 0909 E8          	pop al
0137++ 090A F0          	pop di
0138++ 090B EF          	pop si
0139++ 090C 09          	ret
0140++ 090D             
0141++ 090D             ; STRCAT
0142++ 090D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 090D             ; source in SI
0144++ 090D             ; destination in DI
0145++ 090D             _strcat:
0146++ 090D E2          	push si
0147++ 090E E3          	push di
0148++ 090F D7          	push a
0149++ 0910 DA          	push d
0150++ 0911 50          	mov a, di
0151++ 0912 3C          	mov d, a
0152++ 0913             _strcat_goto_end_L1:
0153++ 0913 BD 00       	cmp byte[d], 0
0154++ 0915 C6 1C 09    	je _strcat_start
0155++ 0918 79          	inc d
0156++ 0919 0A 13 09    	jmp _strcat_goto_end_L1
0157++ 091C             _strcat_start:
0158++ 091C FD 50       	mov di, d
0159++ 091E             _strcat_L1:
0160++ 091E F6          	lodsb
0161++ 091F F7          	stosb
0162++ 0920 B9 00       	cmp al, 0
0163++ 0922 C7 1E 09    	jne _strcat_L1
0164++ 0925             _strcat_end:
0165++ 0925 E7          	pop d
0166++ 0926 E4          	pop a
0167++ 0927 F0          	pop di
0168++ 0928 EF          	pop si
0169++ 0929 09          	ret
0170++ 092A             
0171++ 092A             
0005+  092A             
0006+  092A             
0007+  092A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  092A             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  092A             ; ASCII in BL
0010+  092A             ; result in AL
0011+  092A             ; ascii for F = 0100 0110
0012+  092A             ; ascii for 9 = 0011 1001
0013+  092A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  092A             hex_ascii_encode:
0015+  092A 1B            mov al, bl
0016+  092B 93 40         test al, $40        ; test if letter or number
0017+  092D C7 33 09      jnz hex_letter
0018+  0930 87 0F         and al, $0F        ; get number
0019+  0932 09            ret
0020+  0933             hex_letter:
0021+  0933 87 0F         and al, $0F        ; get letter
0022+  0935 6A 09         add al, 9
0023+  0937 09            ret
0024+  0938             
0025+  0938             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0938             ; ATOI
0027+  0938             ; 2 letter hex string in B
0028+  0938             ; 8bit integer returned in AL
0029+  0938             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  0938             _atoi:
0031+  0938 D8            push b
0032+  0939 07 2A 09      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  093C 30            mov bl, bh
0034+  093D DB            push al          ; save a
0035+  093E 07 2A 09      call hex_ascii_encode
0036+  0941 EA            pop bl  
0037+  0942 FD 9E 04      shl al, 4
0038+  0945 8C            or al, bl
0039+  0946 E5            pop b
0040+  0947 09            ret  
0041+  0948             
0042+  0948             
0043+  0948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0948             ; scanf
0045+  0948             ; no need for explanations!
0046+  0948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0948             scanf:
0048+  0948 09            ret
0049+  0949             
0050+  0949             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0949             ; ITOA
0052+  0949             ; 8bit value in BL
0053+  0949             ; 2 byte ASCII result in A
0054+  0949             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0949             _itoa:
0056+  0949 DA            push d
0057+  094A D8            push b
0058+  094B A7 00         mov bh, 0
0059+  094D FD A4 04      shr bl, 4  
0060+  0950 74            mov d, b
0061+  0951 1F E3 0B      mov al, [d + s_hex_digits]
0062+  0954 23            mov ah, al
0063+  0955               
0064+  0955 E5            pop b
0065+  0956 D8            push b
0066+  0957 A7 00         mov bh, 0
0067+  0959 FD 87 0F      and bl, $0F
0068+  095C 74            mov d, b
0069+  095D 1F E3 0B      mov al, [d + s_hex_digits]
0070+  0960 E5            pop b
0071+  0961 E7            pop d
0072+  0962 09            ret
0073+  0963             
0074+  0963             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0963             ; HEX STRING TO BINARY
0076+  0963             ; di = destination address
0077+  0963             ; si = source
0078+  0963             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0963             _hex_to_int:
0080+  0963             _hex_to_int_L1:
0081+  0963 F6            lodsb          ; load from [SI] to AL
0082+  0964 B9 00         cmp al, 0        ; check if ASCII 0
0083+  0966 C6 73 09      jz _hex_to_int_ret
0084+  0969 36            mov bh, al
0085+  096A F6            lodsb
0086+  096B 2F            mov bl, al
0087+  096C 07 38 09      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  096F F7            stosb          ; store AL to [DI]
0089+  0970 0A 63 09      jmp _hex_to_int_L1
0090+  0973             _hex_to_int_ret:
0091+  0973 09            ret    
0092+  0974             
0093+  0974             
0094+  0974             
0095+  0974             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0974             ; GETCHAR
0097+  0974             ; char in ah
0098+  0974             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0974             getch:
0100+  0974 DB            push al
0101+  0975             getch_retry:
0102+  0975 19 01         mov al, 1
0103+  0977 05 03         syscall sys_io      ; receive in AH
0104+  0979 E8            pop al
0105+  097A 09            ret
0106+  097B             
0107+  097B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  097B             ; PUTCHAR
0109+  097B             ; char in ah
0110+  097B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  097B             _putchar:
0112+  097B DB            push al
0113+  097C 19 00         mov al, 0
0114+  097E 05 03         syscall sys_io      ; char in AH
0115+  0980 E8            pop al
0116+  0981 09            ret
0117+  0982             
0118+  0982             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0982             ;; INPUT A STRING
0120+  0982             ;; terminates with null
0121+  0982             ;; pointer in D
0122+  0982             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0982             _gets:
0124+  0982 D7            push a
0125+  0983 DA            push d
0126+  0984             _gets_loop:
0127+  0984 19 01         mov al, 1
0128+  0986 05 03         syscall sys_io      ; receive in AH
0129+  0988 76 1B         cmp ah, 27
0130+  098A C6 AB 09      je _gets_ansi_esc
0131+  098D 76 0A         cmp ah, $0A        ; LF
0132+  098F C6 07 0A      je _gets_end
0133+  0992 76 0D         cmp ah, $0D        ; CR
0134+  0994 C6 07 0A      je _gets_end
0135+  0997 76 5C         cmp ah, $5C        ; '\\'
0136+  0999 C6 CD 09      je _gets_escape
0137+  099C 76 08         cmp ah, $08      ; check for backspace
0138+  099E C6 A7 09      je _gets_backspace
0139+  09A1 1A            mov al, ah
0140+  09A2 3E            mov [d], al
0141+  09A3 79            inc d
0142+  09A4 0A 84 09      jmp _gets_loop
0143+  09A7             _gets_backspace:
0144+  09A7 7F            dec d
0145+  09A8 0A 84 09      jmp _gets_loop
0146+  09AB             _gets_ansi_esc:
0147+  09AB 19 01         mov al, 1
0148+  09AD 05 03         syscall sys_io        ; receive in AH without echo
0149+  09AF 76 5B         cmp ah, '['
0150+  09B1 C7 84 09      jne _gets_loop
0151+  09B4 19 01         mov al, 1
0152+  09B6 05 03         syscall sys_io          ; receive in AH without echo
0153+  09B8 76 44         cmp ah, 'D'
0154+  09BA C6 C5 09      je _gets_left_arrow
0155+  09BD 76 43         cmp ah, 'C'
0156+  09BF C6 C9 09      je _gets_right_arrow
0157+  09C2 0A 84 09      jmp _gets_loop
0158+  09C5             _gets_left_arrow:
0159+  09C5 7F            dec d
0160+  09C6 0A 84 09      jmp _gets_loop
0161+  09C9             _gets_right_arrow:
0162+  09C9 79            inc d
0163+  09CA 0A 84 09      jmp _gets_loop
0164+  09CD             _gets_escape:
0165+  09CD 19 01         mov al, 1
0166+  09CF 05 03         syscall sys_io      ; receive in AH
0167+  09D1 76 6E         cmp ah, 'n'
0168+  09D3 C6 F2 09      je _gets_LF
0169+  09D6 76 72         cmp ah, 'r'
0170+  09D8 C6 F9 09      je _gets_CR
0171+  09DB 76 30         cmp ah, '0'
0172+  09DD C6 00 0A      je _gets_NULL
0173+  09E0 76 5C         cmp ah, $5C  ; '\'
0174+  09E2 C6 EB 09      je _gets_slash
0175+  09E5 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  09E6 3E            mov [d], al
0177+  09E7 79            inc d
0178+  09E8 0A 84 09      jmp _gets_loop
0179+  09EB             _gets_slash:
0180+  09EB 19 5C         mov al, $5C
0181+  09ED 3E            mov [d], al
0182+  09EE 79            inc d
0183+  09EF 0A 84 09      jmp _gets_loop
0184+  09F2             _gets_LF:
0185+  09F2 19 0A         mov al, $0A
0186+  09F4 3E            mov [d], al
0187+  09F5 79            inc d
0188+  09F6 0A 84 09      jmp _gets_loop
0189+  09F9             _gets_CR:
0190+  09F9 19 0D         mov al, $0D
0191+  09FB 3E            mov [d], al
0192+  09FC 79            inc d
0193+  09FD 0A 84 09      jmp _gets_loop
0194+  0A00             _gets_NULL:
0195+  0A00 19 00         mov al, $00
0196+  0A02 3E            mov [d], al
0197+  0A03 79            inc d
0198+  0A04 0A 84 09      jmp _gets_loop
0199+  0A07             _gets_end:
0200+  0A07 19 00         mov al, 0
0201+  0A09 3E            mov [d], al        ; terminate string
0202+  0A0A E7            pop d
0203+  0A0B E4            pop a
0204+  0A0C 09            ret
0205+  0A0D             
0206+  0A0D             
0207+  0A0D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  0A0D             ;; INPUT TEXT
0209+  0A0D             ;; terminated with CTRL+D
0210+  0A0D             ;; pointer in D
0211+  0A0D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  0A0D             _gettxt:
0213+  0A0D D7            push a
0214+  0A0E DA            push d
0215+  0A0F             _gettxt_loop:
0216+  0A0F 19 01         mov al, 1
0217+  0A11 05 03         syscall sys_io      ; receive in AH
0218+  0A13 76 04         cmp ah, 4      ; EOT
0219+  0A15 C6 4E 0A      je _gettxt_end
0220+  0A18 76 08         cmp ah, $08      ; check for backspace
0221+  0A1A C6 4A 0A      je _gettxt_backspace
0222+  0A1D 76 5C         cmp ah, $5C        ; '\'
0223+  0A1F C6 28 0A      je _gettxt_escape
0224+  0A22 1A            mov al, ah
0225+  0A23 3E            mov [d], al
0226+  0A24 79            inc d
0227+  0A25 0A 0F 0A      jmp _gettxt_loop
0228+  0A28             _gettxt_escape:
0229+  0A28 19 01         mov al, 1
0230+  0A2A 05 03         syscall sys_io      ; receive in AH
0231+  0A2C 76 6E         cmp ah, 'n'
0232+  0A2E C6 3C 0A      je _gettxt_LF
0233+  0A31 76 72         cmp ah, 'r'
0234+  0A33 C6 43 0A      je _gettxt_CR
0235+  0A36 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  0A37 3E            mov [d], al
0237+  0A38 79            inc d
0238+  0A39 0A 0F 0A      jmp _gettxt_loop
0239+  0A3C             _gettxt_LF:
0240+  0A3C 19 0A         mov al, $0A
0241+  0A3E 3E            mov [d], al
0242+  0A3F 79            inc d
0243+  0A40 0A 0F 0A      jmp _gettxt_loop
0244+  0A43             _gettxt_CR:
0245+  0A43 19 0D         mov al, $0D
0246+  0A45 3E            mov [d], al
0247+  0A46 79            inc d
0248+  0A47 0A 0F 0A      jmp _gettxt_loop
0249+  0A4A             _gettxt_backspace:
0250+  0A4A 7F            dec d
0251+  0A4B 0A 0F 0A      jmp _gettxt_loop
0252+  0A4E             _gettxt_end:
0253+  0A4E 19 00         mov al, 0
0254+  0A50 3E            mov [d], al        ; terminate string
0255+  0A51 E7            pop d
0256+  0A52 E4            pop a
0257+  0A53 09            ret
0258+  0A54             
0259+  0A54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  0A54             ; PRINT NEW LINE
0261+  0A54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  0A54             printnl:
0263+  0A54 D7            push a
0264+  0A55 10 00 0A      mov a, $0A00
0265+  0A58 05 03         syscall sys_io
0266+  0A5A 10 00 0D      mov a, $0D00
0267+  0A5D 05 03         syscall sys_io
0268+  0A5F E4            pop a
0269+  0A60 09            ret
0270+  0A61             
0271+  0A61             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  0A61             ; _strtoint
0273+  0A61             ; 4 digit hex string number in d
0274+  0A61             ; integer returned in A
0275+  0A61             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  0A61             _strtointx:
0277+  0A61 D8            push b
0278+  0A62 32            mov bl, [d]
0279+  0A63 37            mov bh, bl
0280+  0A64 33 01 00      mov bl, [d + 1]
0281+  0A67 07 38 09      call _atoi        ; convert to int in AL
0282+  0A6A 23            mov ah, al        ; move to AH
0283+  0A6B 33 02 00      mov bl, [d + 2]
0284+  0A6E 37            mov bh, bl
0285+  0A6F 33 03 00      mov bl, [d + 3]
0286+  0A72 07 38 09      call _atoi        ; convert to int in AL
0287+  0A75 E5            pop b
0288+  0A76 09            ret
0289+  0A77             
0290+  0A77             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  0A77             ; _strtoint
0292+  0A77             ; 5 digit base10 string number in d
0293+  0A77             ; integer returned in A
0294+  0A77             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  0A77             _strtoint:
0296+  0A77 E2            push si
0297+  0A78 D8            push b
0298+  0A79 D9            push c
0299+  0A7A DA            push d
0300+  0A7B 07 DA 08      call _strlen      ; get string length in C
0301+  0A7E 7E            dec c
0302+  0A7F FD 4E         mov si, d
0303+  0A81 12            mov a, c
0304+  0A82 FD 99         shl a
0305+  0A84 3B FB 0B      mov d, table_power
0306+  0A87 59            add d, a
0307+  0A88 38 00 00      mov c, 0
0308+  0A8B             _strtoint_L0:
0309+  0A8B F6            lodsb      ; load ASCII to al
0310+  0A8C B9 00         cmp al, 0
0311+  0A8E C6 A1 0A      je _strtoint_end
0312+  0A91 6F 30         sub al, $30    ; make into integer
0313+  0A93 22 00         mov ah, 0
0314+  0A95 2A            mov b, [d]
0315+  0A96 AC            mul a, b      ; result in B since it fits in 16bits
0316+  0A97 11            mov a, b
0317+  0A98 28            mov b, c
0318+  0A99 54            add a, b
0319+  0A9A 39            mov c, a
0320+  0A9B 63 02 00      sub d, 2
0321+  0A9E 0A 8B 0A      jmp _strtoint_L0
0322+  0AA1             _strtoint_end:
0323+  0AA1 12            mov a, c
0324+  0AA2 E7            pop d
0325+  0AA3 E6            pop c
0326+  0AA4 E5            pop b
0327+  0AA5 EF            pop si
0328+  0AA6 09            ret
0329+  0AA7             
0330+  0AA7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0AA7             ; PRINT NULL TERMINATED STRING
0332+  0AA7             ; pointer in D
0333+  0AA7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0AA7             _puts:
0335+  0AA7 D7            push a
0336+  0AA8 DA            push d
0337+  0AA9             _puts_L1:
0338+  0AA9 1E            mov al, [d]
0339+  0AAA B9 00         cmp al, 0
0340+  0AAC C6 B8 0A      jz _puts_END
0341+  0AAF 23            mov ah, al
0342+  0AB0 19 00         mov al, 0
0343+  0AB2 05 03         syscall sys_io
0344+  0AB4 79            inc d
0345+  0AB5 0A A9 0A      jmp _puts_L1
0346+  0AB8             _puts_END:
0347+  0AB8 E7            pop d
0348+  0AB9 E4            pop a
0349+  0ABA 09            ret
0350+  0ABB             
0351+  0ABB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  0ABB             ; PRINT N SIZE STRING
0353+  0ABB             ; pointer in D
0354+  0ABB             ; size in C
0355+  0ABB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  0ABB             _putsn:
0357+  0ABB DB            push al
0358+  0ABC DA            push d
0359+  0ABD D9            push c
0360+  0ABE             _putsn_L0:
0361+  0ABE 1E            mov al, [d]
0362+  0ABF 23            mov ah, al
0363+  0AC0 19 00         mov al, 0
0364+  0AC2 05 03         syscall sys_io
0365+  0AC4 79            inc d
0366+  0AC5 7E            dec c  
0367+  0AC6 C2 00 00      cmp c, 0
0368+  0AC9 C7 BE 0A      jne _putsn_L0
0369+  0ACC             _putsn_end:
0370+  0ACC E6            pop c
0371+  0ACD E7            pop d
0372+  0ACE E8            pop al
0373+  0ACF 09            ret
0374+  0AD0             
0375+  0AD0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  0AD0             ; print 16bit decimal number
0377+  0AD0             ; input number in A
0378+  0AD0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0AD0             print_u16d:
0380+  0AD0 D7            push a
0381+  0AD1 D8            push b
0382+  0AD2 FD D8         push g
0383+  0AD4 26 10 27      mov b, 10000
0384+  0AD7 AE            div a, b      ; get 10000's coeff.
0385+  0AD8 07 FC 0A      call print_number
0386+  0ADB 11            mov a, b
0387+  0ADC 26 E8 03      mov b, 1000
0388+  0ADF AE            div a, b      ; get 1000's coeff.
0389+  0AE0 07 FC 0A      call print_number
0390+  0AE3 11            mov a, b
0391+  0AE4 26 64 00      mov b, 100
0392+  0AE7 AE            div a, b
0393+  0AE8 07 FC 0A      call print_number
0394+  0AEB 11            mov a, b
0395+  0AEC 26 0A 00      mov b, 10
0396+  0AEF AE            div a, b
0397+  0AF0 07 FC 0A      call print_number
0398+  0AF3 1B            mov al, bl      ; 1's coeff in bl
0399+  0AF4 07 FC 0A      call print_number
0400+  0AF7 FD F1         pop g
0401+  0AF9 E5            pop b
0402+  0AFA E4            pop a
0403+  0AFB 09            ret
0404+  0AFC             
0405+  0AFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  0AFC             ; print AL
0407+  0AFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  0AFC             print_number:
0409+  0AFC 6A 30         add al, $30
0410+  0AFE 23            mov ah, al
0411+  0AFF 07 7B 09      call _putchar
0412+  0B02 09            ret
0413+  0B03             
0414+  0B03             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  0B03             ; PRINT 16BIT HEX INTEGER
0416+  0B03             ; integer value in reg B
0417+  0B03             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  0B03             print_u16x:
0419+  0B03 D7            push a
0420+  0B04 D8            push b
0421+  0B05 DD            push bl
0422+  0B06 30            mov bl, bh
0423+  0B07 07 49 09      call _itoa        ; convert bh to char in A
0424+  0B0A 2F            mov bl, al        ; save al
0425+  0B0B 19 00         mov al, 0
0426+  0B0D 05 03         syscall sys_io        ; display AH
0427+  0B0F 24            mov ah, bl        ; retrieve al
0428+  0B10 19 00         mov al, 0
0429+  0B12 05 03         syscall sys_io        ; display AL
0430+  0B14             
0431+  0B14 EA            pop bl
0432+  0B15 07 49 09      call _itoa        ; convert bh to char in A
0433+  0B18 2F            mov bl, al        ; save al
0434+  0B19 19 00         mov al, 0
0435+  0B1B 05 03         syscall sys_io        ; display AH
0436+  0B1D 24            mov ah, bl        ; retrieve al
0437+  0B1E 19 00         mov al, 0
0438+  0B20 05 03         syscall sys_io        ; display AL
0439+  0B22             
0440+  0B22 E5            pop b
0441+  0B23 E4            pop a
0442+  0B24 09            ret
0443+  0B25             
0444+  0B25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0B25             ; INPUT 16BIT HEX INTEGER
0446+  0B25             ; read 16bit integer into A
0447+  0B25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0B25             scan_u16x:
0449+  0B25 F8 10 00      enter 16
0450+  0B28 D8            push b
0451+  0B29 DA            push d
0452+  0B2A             
0453+  0B2A FA F1 FF      lea d, [bp + -15]
0454+  0B2D 07 82 09      call _gets        ; get number
0455+  0B30             
0456+  0B30 32            mov bl, [d]
0457+  0B31 37            mov bh, bl
0458+  0B32 33 01 00      mov bl, [d + 1]
0459+  0B35 07 38 09      call _atoi        ; convert to int in AL
0460+  0B38 23            mov ah, al        ; move to AH
0461+  0B39             
0462+  0B39 33 02 00      mov bl, [d + 2]
0463+  0B3C 37            mov bh, bl
0464+  0B3D 33 03 00      mov bl, [d + 3]
0465+  0B40 07 38 09      call _atoi        ; convert to int in AL
0466+  0B43             
0467+  0B43 E7            pop d
0468+  0B44 E5            pop b
0469+  0B45 F9            leave
0470+  0B46 09            ret
0471+  0B47             
0472+  0B47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  0B47             ; PRINT 8bit HEX INTEGER
0474+  0B47             ; integer value in reg bl
0475+  0B47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0B47             print_u8x:
0477+  0B47 D7            push a
0478+  0B48 DD            push bl
0479+  0B49             
0480+  0B49 07 49 09      call _itoa        ; convert bl to char in A
0481+  0B4C 2F            mov bl, al        ; save al
0482+  0B4D 19 00         mov al, 0
0483+  0B4F 05 03         syscall sys_io        ; display AH
0484+  0B51 24            mov ah, bl        ; retrieve al
0485+  0B52 19 00         mov al, 0
0486+  0B54 05 03         syscall sys_io        ; display AL
0487+  0B56             
0488+  0B56 EA            pop bl
0489+  0B57 E4            pop a
0490+  0B58 09            ret
0491+  0B59             
0492+  0B59             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  0B59             ; print 8bit decimal unsigned number
0494+  0B59             ; input number in AL
0495+  0B59             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  0B59             print_u8d:
0497+  0B59 D7            push a
0498+  0B5A D8            push b
0499+  0B5B FD D8         push g
0500+  0B5D 22 00         mov ah, 0
0501+  0B5F 26 64 00      mov b, 100
0502+  0B62 AE            div a, b
0503+  0B63 D8            push b      ; save remainder
0504+  0B64 B9 00         cmp al, 0
0505+  0B66 C6 70 0B      je skip100
0506+  0B69 6A 30         add al, $30
0507+  0B6B 23            mov ah, al
0508+  0B6C 19 00         mov al, 0
0509+  0B6E 05 03         syscall sys_io  ; print coeff
0510+  0B70             skip100:
0511+  0B70 E4            pop a
0512+  0B71 22 00         mov ah, 0
0513+  0B73 26 0A 00      mov b, 10
0514+  0B76 AE            div a, b
0515+  0B77 D8            push b      ; save remainder
0516+  0B78 B9 00         cmp al, 0
0517+  0B7A C6 84 0B      je skip10
0518+  0B7D 6A 30         add al, $30
0519+  0B7F 23            mov ah, al
0520+  0B80 19 00         mov al, 0
0521+  0B82 05 03         syscall sys_io  ; print coeff
0522+  0B84             skip10:
0523+  0B84 E4            pop a
0524+  0B85 1B            mov al, bl
0525+  0B86 6A 30         add al, $30
0526+  0B88 23            mov ah, al
0527+  0B89 19 00         mov al, 0
0528+  0B8B 05 03         syscall sys_io  ; print coeff
0529+  0B8D FD F1         pop g
0530+  0B8F E5            pop b
0531+  0B90 E4            pop a
0532+  0B91 09            ret
0533+  0B92             
0534+  0B92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0B92             ; INPUT 8BIT HEX INTEGER
0536+  0B92             ; read 8bit integer into AL
0537+  0B92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0B92             scan_u8x:
0539+  0B92 F8 04 00      enter 4
0540+  0B95 D8            push b
0541+  0B96 DA            push d
0542+  0B97             
0543+  0B97 FA FD FF      lea d, [bp + -3]
0544+  0B9A 07 82 09      call _gets        ; get number
0545+  0B9D             
0546+  0B9D 32            mov bl, [d]
0547+  0B9E 37            mov bh, bl
0548+  0B9F 33 01 00      mov bl, [d + 1]
0549+  0BA2 07 38 09      call _atoi        ; convert to int in AL
0550+  0BA5             
0551+  0BA5 E7            pop d
0552+  0BA6 E5            pop b
0553+  0BA7 F9            leave
0554+  0BA8 09            ret
0555+  0BA9             
0556+  0BA9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0BA9             ; input decimal number
0558+  0BA9             ; result in A
0559+  0BA9             ; 655'\0'
0560+  0BA9             ; low--------high
0561+  0BA9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0BA9             scan_u16d:
0563+  0BA9 F8 08 00      enter 8
0564+  0BAC E2            push si
0565+  0BAD D8            push b
0566+  0BAE D9            push c
0567+  0BAF DA            push d
0568+  0BB0 FA F9 FF      lea d, [bp +- 7]
0569+  0BB3 07 82 09      call _gets
0570+  0BB6 07 DA 08      call _strlen      ; get string length in C
0571+  0BB9 7E            dec c
0572+  0BBA FD 4E         mov si, d
0573+  0BBC 12            mov a, c
0574+  0BBD FD 99         shl a
0575+  0BBF 3B FB 0B      mov d, table_power
0576+  0BC2 59            add d, a
0577+  0BC3 38 00 00      mov c, 0
0578+  0BC6             mul_loop:
0579+  0BC6 F6            lodsb      ; load ASCII to al
0580+  0BC7 B9 00         cmp al, 0
0581+  0BC9 C6 DC 0B      je mul_exit
0582+  0BCC 6F 30         sub al, $30    ; make into integer
0583+  0BCE 22 00         mov ah, 0
0584+  0BD0 2A            mov b, [d]
0585+  0BD1 AC            mul a, b      ; result in B since it fits in 16bits
0586+  0BD2 11            mov a, b
0587+  0BD3 28            mov b, c
0588+  0BD4 54            add a, b
0589+  0BD5 39            mov c, a
0590+  0BD6 63 02 00      sub d, 2
0591+  0BD9 0A C6 0B      jmp mul_loop
0592+  0BDC             mul_exit:
0593+  0BDC 12            mov a, c
0594+  0BDD E7            pop d
0595+  0BDE E6            pop c
0596+  0BDF E5            pop b
0597+  0BE0 EF            pop si
0598+  0BE1 F9            leave
0599+  0BE2 09            ret
0600+  0BE3             
0601+  0BE3             
0602+  0BE3 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0602+  0BE7 34 35 36 37 
0602+  0BEB 38 39 41 42 
0602+  0BEF 43 44 45 46 
0603+  0BF3 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0603+  0BF7 1B 5B 48 00 
0604+  0BFB             
0605+  0BFB             table_power:
0606+  0BFB 01 00         .dw 1
0607+  0BFD 0A 00         .dw 10
0608+  0BFF 64 00         .dw 100
0609+  0C01 E8 03         .dw 1000
0610+  0C03 10 27         .dw 100000424   0C05             .include "lib/ctype.asm"
0001+  0C05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0C05             ; ctype.s
0003+  0C05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0C05             
0005+  0C05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0C05             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0C05             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0C05             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0C05             ;; characters are supported.
0010+  0C05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0C05             ;; _isalnum 
0012+  0C05             ;; _isalpha 
0013+  0C05             ;; islower 
0014+  0C05             ;; isupper 
0015+  0C05             ;; _isdigit 
0016+  0C05             ;; isxdigit
0017+  0C05             ;; iscntrl 
0018+  0C05             ;; isgraph 
0019+  0C05             ;; _isspace 
0020+  0C05             ;; isblank 
0021+  0C05             ;; isprint 
0022+  0C05             ;; ispunct 
0023+  0C05             ;; tolower 
0024+  0C05             ;; toupper
0025+  0C05             
0026+  0C05             
0027+  0C05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0C05             ;; IS ALPHANUMERIC
0029+  0C05             ;; sets ZF according with result
0030+  0C05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0C05             _isalnum:
0032+  0C05 07 22 0C    	call _isalpha
0033+  0C08 C6 0E 0C    	je _isalnum_exit
0034+  0C0B 07 0F 0C    	call _isdigit
0035+  0C0E             _isalnum_exit:
0036+  0C0E 09          	ret	
0037+  0C0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0C0F             ;; IS DIGIT
0039+  0C0F             ;; sets ZF according with result
0040+  0C0F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0C0F             _isdigit:
0042+  0C0F DB          	push al
0043+  0C10 B9 30       	cmp al, '0'
0044+  0C12 C8 1E 0C    	jlu _isdigit_false
0045+  0C15 B9 39       	cmp al, '9'
0046+  0C17 D1 1E 0C    	jgu _isdigit_false
0047+  0C1A 87 00       	and al, 0	; set ZF
0048+  0C1C E8          	pop al
0049+  0C1D 09          	ret
0050+  0C1E             _isdigit_false:
0051+  0C1E 8B 01       	or al, 1	; clear ZF
0052+  0C20 E8          	pop al
0053+  0C21 09          	ret	
0054+  0C22             	
0055+  0C22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0C22             ;; IS ALPHA
0057+  0C22             ;; sets ZF according with result
0058+  0C22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0C22             _isalpha:
0060+  0C22 DB          	push al
0061+  0C23 B9 5F       	cmp al, '_'
0062+  0C25 C6 45 0C    	je _isalpha_true
0063+  0C28 B9 2E       	cmp al, '.'
0064+  0C2A C6 45 0C    	je _isalpha_true
0065+  0C2D B9 41       	cmp al, 'A'
0066+  0C2F C8 41 0C    	jlu _isalpha_false
0067+  0C32 B9 7A       	cmp al, 'z'
0068+  0C34 D1 41 0C    	jgu _isalpha_false
0069+  0C37 B9 5A       	cmp al, 'Z'
0070+  0C39 D0 45 0C    	jleu _isalpha_true
0071+  0C3C B9 61       	cmp al, 'a'
0072+  0C3E C9 45 0C    	jgeu _isalpha_true
0073+  0C41             _isalpha_false:
0074+  0C41 8B 01       	or al, 1	; clear ZF
0075+  0C43 E8          	pop al
0076+  0C44 09          	ret
0077+  0C45             _isalpha_true:
0078+  0C45 87 00       	and al, 0	; set ZF
0079+  0C47 E8          	pop al
0080+  0C48 09          	ret
0081+  0C49             
0082+  0C49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0C49             ;; IS PATH-ALPHA
0084+  0C49             ;; sets ZF according with result
0085+  0C49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0C49             ispath:
0087+  0C49 DB          	push al
0088+  0C4A 07 0F 0C    	call _isdigit
0089+  0C4D C6 77 0C    	je ispath_true
0090+  0C50 B9 5F       	cmp al, '_'
0091+  0C52 C6 77 0C    	je ispath_true
0092+  0C55 B9 2F       	cmp al, '/'
0093+  0C57 C6 77 0C    	je ispath_true
0094+  0C5A B9 2E       	cmp al, '.'
0095+  0C5C C6 77 0C    	je ispath_true
0096+  0C5F B9 41       	cmp al, 'A'
0097+  0C61 C8 73 0C    	jlu ispath_false
0098+  0C64 B9 7A       	cmp al, 'z'
0099+  0C66 D1 73 0C    	jgu ispath_false
0100+  0C69 B9 5A       	cmp al, 'Z'
0101+  0C6B D0 77 0C    	jleu ispath_true
0102+  0C6E B9 61       	cmp al, 'a'
0103+  0C70 C9 77 0C    	jgeu ispath_true
0104+  0C73             ispath_false:
0105+  0C73 8B 01       	or al, 1	; clear ZF
0106+  0C75 E8          	pop al
0107+  0C76 09          	ret
0108+  0C77             ispath_true:
0109+  0C77 87 00       	and al, 0	; set ZF
0110+  0C79 E8          	pop al
0111+  0C7A 09          	ret
0112+  0C7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0C7B             ;; IS SPACE
0114+  0C7B             ;; sets ZF according with result
0115+  0C7B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0C7B             _isspace:
0117+  0C7B B9 20       	cmp al, $20		; ' '
0118+  0C7D C6 91 0C    	je _isspace_exit
0119+  0C80 B9 09       	cmp al, $09		; '\t'
0120+  0C82 C6 91 0C    	je _isspace_exit
0121+  0C85 B9 0A       	cmp al, $0A		; '\n'
0122+  0C87 C6 91 0C    	je _isspace_exit
0123+  0C8A B9 0D       	cmp al, $0D		; '\r'
0124+  0C8C C6 91 0C    	je _isspace_exit
0125+  0C8F B9 0B       	cmp al, $0B		; '\v'
0126+  0C91             _isspace_exit:
0127+  0C91 09          	ret	
0128+  0C92             
0129+  0C92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0C92             ; TO LOWER
0131+  0C92             ; input in AL
0132+  0C92             ; output in AL
0133+  0C92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0C92             _to_lower:
0135+  0C92 B9 5A       	cmp al, 'Z'
0136+  0C94 D1 99 0C    	jgu _to_lower_ret
0137+  0C97 6A 20       	add al, $20				; convert to lower case
0138+  0C99             _to_lower_ret:
0139+  0C99 09          	ret
0140+  0C9A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0C9A             ; TO UPPER
0142+  0C9A             ; input in AL
0143+  0C9A             ; output in AL
0144+  0C9A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0C9A             _to_upper:
0146+  0C9A B9 61       	cmp al, 'a'
0147+  0C9C C8 A1 0C    	jlu _to_upper_ret
0148+  0C9F 6F 20       	sub al, $20			; convert to upper case
0149+  0CA1             _to_upper_ret:
0150+  0CA1 09          	ret
0151+  0CA2             
0425   0CA2             .include "lib/token.asm"
0001+  0CA2             TOKTYP_IDENTIFIER  .equ 0
0002+  0CA2             TOKTYP_KEYWORD     .equ 1
0003+  0CA2             TOKTYP_DELIMITER   .equ 2
0004+  0CA2             TOKTYP_STRING      .equ 3
0005+  0CA2             TOKTYP_CHAR        .equ 4
0006+  0CA2             TOKTYP_NUMERIC     .equ 5
0007+  0CA2             TOKTYP_END         .equ 6
0008+  0CA2             
0009+  0CA2             TOK_NULL           .equ 0
0010+  0CA2             TOK_FSLASH         .equ 1
0011+  0CA2             TOK_TIMES          .equ 2
0012+  0CA2             TOK_PLUS           .equ 3
0013+  0CA2             TOK_MINUS          .equ 4
0014+  0CA2             TOK_DOT            .equ 5
0015+  0CA2             TOK_SEMI           .equ 6
0016+  0CA2             TOK_ANGLE          .equ 7
0017+  0CA2             TOK_TILDE          .equ 8
0018+  0CA2             TOK_EQUAL          .equ 9
0019+  0CA2             TOK_COLON          .equ 10
0020+  0CA2             TOK_COMMA          .equ 11
0021+  0CA2             
0022+  0CA2             TOK_END            .equ 20
0023+  0CA2             
0024+  0CA2             
0025+  0CA2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0CA2             ;; read a full command argment from shell input buffer
0027+  0CA2             ;; argument is written into tokstr
0028+  0CA2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0CA2             get_arg:
0030+  0CA2 D7            push a
0031+  0CA3 E2            push si
0032+  0CA4 E3            push di
0033+  0CA5 19 00         mov al, 0
0034+  0CA7 3D D0 0E      mov [tokstr], al      ; nullify tokstr string
0035+  0CAA 14 CC 0E      mov a, [prog]
0036+  0CAD 4D            mov si, a
0037+  0CAE FD 4F D0 0E   mov di, tokstr
0038+  0CB2             get_arg_skip_spaces:
0039+  0CB2 F6            lodsb
0040+  0CB3 07 7B 0C      call _isspace
0041+  0CB6 C6 B2 0C      je get_arg_skip_spaces
0042+  0CB9             get_arg_L0:
0043+  0CB9 B9 3B         cmp al, $3B        ; check if is ';'
0044+  0CBB C6 C8 0C      je get_arg_end
0045+  0CBE B9 00         cmp al, 0
0046+  0CC0 C6 C8 0C      je get_arg_end      ; check if end of input
0047+  0CC3 F7            stosb
0048+  0CC4 F6            lodsb
0049+  0CC5 0A B9 0C      jmp get_arg_L0
0050+  0CC8             get_arg_end:
0051+  0CC8 19 00         mov al, 0
0052+  0CCA F7            stosb
0053+  0CCB D5 01 00      sub si, 1
0054+  0CCE 4E            mov a, si
0055+  0CCF 42 CC 0E      mov [prog], a    ; update pointer
0056+  0CD2 F0            pop di
0057+  0CD3 EF            pop si
0058+  0CD4 E4            pop a
0059+  0CD5 09            ret
0060+  0CD6             
0061+  0CD6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0CD6             ;; read a path formation from shell input buffer
0063+  0CD6             ;; path is written into tokstr
0064+  0CD6             ;; /usr/bin
0065+  0CD6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0CD6             get_path:
0067+  0CD6 D7            push a
0068+  0CD7 E2            push si
0069+  0CD8 E3            push di
0070+  0CD9 19 00         mov al, 0
0071+  0CDB 3D D0 0E      mov [tokstr], al      ; nullify tokstr string
0072+  0CDE 14 CC 0E      mov a, [prog]
0073+  0CE1 4D            mov si, a
0074+  0CE2 FD 4F D0 0E   mov di, tokstr
0075+  0CE6             get_path_skip_spaces:
0076+  0CE6 F6            lodsb
0077+  0CE7 07 7B 0C      call _isspace
0078+  0CEA C6 E6 0C      je get_path_skip_spaces
0079+  0CED             get_path_is_pathchar:
0080+  0CED F7            stosb
0081+  0CEE F6            lodsb
0082+  0CEF 07 05 0C      call _isalnum      ;check if is alphanumeric
0083+  0CF2 C6 ED 0C      je get_path_is_pathchar
0084+  0CF5 B9 2F         cmp al, '/'        ; check if is '/'
0085+  0CF7 C6 ED 0C      je get_path_is_pathchar
0086+  0CFA 19 00         mov al, 0
0087+  0CFC F7            stosb
0088+  0CFD D5 01 00      sub si, 1
0089+  0D00 4E            mov a, si
0090+  0D01 42 CC 0E      mov [prog], a    ; update pointer
0091+  0D04             get_path_end:
0092+  0D04 F0            pop di
0093+  0D05 EF            pop si
0094+  0D06 E4            pop a
0095+  0D07 09            ret
0096+  0D08             
0097+  0D08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  0D08             ;; read a line
0099+  0D08             ;; line is written into tokstr
0100+  0D08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  0D08             get_line:
0102+  0D08 D7            push a
0103+  0D09 E2            push si
0104+  0D0A E3            push di
0105+  0D0B 19 00         mov al, 0
0106+  0D0D 3D D0 0E      mov [tokstr], al      ; nullify tokstr string
0107+  0D10 14 CC 0E      mov a, [prog]
0108+  0D13 4D            mov si, a
0109+  0D14 FD 4F D0 0E   mov di, tokstr
0110+  0D18             get_line_L0:
0111+  0D18 F6            lodsb
0112+  0D19 B9 0A         cmp al, $0A    ; check for new line
0113+  0D1B C6 22 0D      je get_line_exit
0114+  0D1E F7            stosb
0115+  0D1F 0A 18 0D      jmp get_line_L0
0116+  0D22             get_line_exit:
0117+  0D22 19 00         mov al, 0
0118+  0D24 F7            stosb
0119+  0D25 4E            mov a, si
0120+  0D26 42 CC 0E      mov [prog], a    ; update pointer
0121+  0D29 F0            pop di
0122+  0D2A EF            pop si
0123+  0D2B E4            pop a
0124+  0D2C 09            ret
0125+  0D2D             
0126+  0D2D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  0D2D             ;; token parser
0128+  0D2D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  0D2D             get_token:
0130+  0D2D D7            push a
0131+  0D2E DA            push d
0132+  0D2F E2            push si
0133+  0D30 E3            push di
0134+  0D31 19 00         mov al, 0
0135+  0D33 3D D0 0E      mov [tokstr], al      ; nullify tokstr string
0136+  0D36 19 00         mov al, TOK_NULL
0137+  0D38 3D CF 0E      mov [tok], al        ; nullify token
0138+  0D3B 14 CC 0E      mov a, [prog]
0139+  0D3E 4D            mov si, a
0140+  0D3F FD 4F D0 0E   mov di, tokstr
0141+  0D43             get_tok_skip_spaces:
0142+  0D43 F6            lodsb
0143+  0D44 07 7B 0C      call _isspace
0144+  0D47 C6 43 0D      je get_tok_skip_spaces
0145+  0D4A B9 00         cmp al, 0      ; check for end of input (NULL)
0146+  0D4C C6 31 0E      je get_token_end
0147+  0D4F B9 23         cmp al, '#'      ; comments!
0148+  0D51 C6 5F 0E      je get_tok_comment
0149+  0D54 07 05 0C      call _isalnum
0150+  0D57 C6 3E 0E      jz is_alphanumeric
0151+  0D5A             ; other token types
0152+  0D5A             get_token_slash:
0153+  0D5A B9 2F         cmp al, '/'        ; check if '/'
0154+  0D5C C7 74 0D      jne get_token_minus
0155+  0D5F F7            stosb          ; store '/' into token string
0156+  0D60 19 00         mov al, 0
0157+  0D62 F7            stosb          ; terminate token string
0158+  0D63 19 01         mov al, TOK_FSLASH
0159+  0D65 3D CF 0E      mov [tok], al      
0160+  0D68 19 02         mov al, TOKTYP_DELIMITER
0161+  0D6A 3D CE 0E      mov [toktyp], al
0162+  0D6D 4E            mov a, si
0163+  0D6E 42 CC 0E      mov [prog], a    ; update pointer
0164+  0D71 0A 5A 0E      jmp get_token_return
0165+  0D74             get_token_minus:
0166+  0D74 B9 2D         cmp al, '-'        ; check if '-'
0167+  0D76 C7 8E 0D      jne get_token_comma
0168+  0D79 F7            stosb          ; store '-' into token string
0169+  0D7A 19 00         mov al, 0
0170+  0D7C F7            stosb          ; terminate token string
0171+  0D7D 19 04         mov al, TOK_MINUS
0172+  0D7F 3D CF 0E      mov [tok], al      
0173+  0D82 19 02         mov al, TOKTYP_DELIMITER
0174+  0D84 3D CE 0E      mov [toktyp], al
0175+  0D87 4E            mov a, si
0176+  0D88 42 CC 0E      mov [prog], a    ; update pointer
0177+  0D8B 0A 5A 0E      jmp get_token_return
0178+  0D8E             get_token_comma:
0179+  0D8E B9 2C         cmp al, ','        ; check if ','
0180+  0D90 C7 A8 0D      jne get_token_semi
0181+  0D93 F7            stosb          ; store ',' into token string
0182+  0D94 19 00         mov al, 0
0183+  0D96 F7            stosb          ; terminate token string
0184+  0D97 19 0B         mov al, TOK_COMMA
0185+  0D99 3D CF 0E      mov [tok], al      
0186+  0D9C 19 02         mov al, TOKTYP_DELIMITER
0187+  0D9E 3D CE 0E      mov [toktyp], al
0188+  0DA1 4E            mov a, si
0189+  0DA2 42 CC 0E      mov [prog], a    ; update pointer
0190+  0DA5 0A 5A 0E      jmp get_token_return
0191+  0DA8             get_token_semi:
0192+  0DA8 B9 3B         cmp al, $3B        ; check if ';'
0193+  0DAA C7 C2 0D      jne get_token_colon
0194+  0DAD F7            stosb          ; store ';' into token string
0195+  0DAE 19 00         mov al, 0
0196+  0DB0 F7            stosb          ; terminate token string
0197+  0DB1 19 06         mov al, TOK_SEMI
0198+  0DB3 3D CF 0E      mov [tok], al      
0199+  0DB6 19 02         mov al, TOKTYP_DELIMITER
0200+  0DB8 3D CE 0E      mov [toktyp], al
0201+  0DBB 4E            mov a, si
0202+  0DBC 42 CC 0E      mov [prog], a    ; update pointer
0203+  0DBF 0A 5A 0E      jmp get_token_return
0204+  0DC2             get_token_colon:
0205+  0DC2 B9 3A         cmp al, $3A        ; check if ':'
0206+  0DC4 C7 DC 0D      jne get_token_angle
0207+  0DC7 F7            stosb          ; store ':' into token string
0208+  0DC8 19 00         mov al, 0
0209+  0DCA F7            stosb          ; terminate token string
0210+  0DCB 19 0A         mov al, TOK_COLON
0211+  0DCD 3D CF 0E      mov [tok], al      
0212+  0DD0 19 02         mov al, TOKTYP_DELIMITER
0213+  0DD2 3D CE 0E      mov [toktyp], al
0214+  0DD5 4E            mov a, si
0215+  0DD6 42 CC 0E      mov [prog], a    ; update pointer
0216+  0DD9 0A 5A 0E      jmp get_token_return
0217+  0DDC             get_token_angle:
0218+  0DDC B9 3E         cmp al, $3E        ; check if '>'
0219+  0DDE C7 F6 0D      jne get_token_tilde
0220+  0DE1 F7            stosb          ; store '>' into token string
0221+  0DE2 19 00         mov al, 0
0222+  0DE4 F7            stosb          ; terminate token string
0223+  0DE5 19 07         mov al, TOK_ANGLE
0224+  0DE7 3D CF 0E      mov [tok], al      
0225+  0DEA 19 02         mov al, TOKTYP_DELIMITER
0226+  0DEC 3D CE 0E      mov [toktyp], al
0227+  0DEF 4E            mov a, si
0228+  0DF0 42 CC 0E      mov [prog], a    ; update pointer
0229+  0DF3 0A 5A 0E      jmp get_token_return
0230+  0DF6             get_token_tilde:
0231+  0DF6 B9 7E         cmp al, '~'        ; check if '~'
0232+  0DF8 C7 10 0E      jne get_token_equal
0233+  0DFB F7            stosb          ; store '~' into token string
0234+  0DFC 19 00         mov al, 0
0235+  0DFE F7            stosb          ; terminate token string
0236+  0DFF 19 08         mov al, TOK_TILDE
0237+  0E01 3D CF 0E      mov [tok], al      
0238+  0E04 19 02         mov al, TOKTYP_DELIMITER
0239+  0E06 3D CE 0E      mov [toktyp], al
0240+  0E09 4E            mov a, si
0241+  0E0A 42 CC 0E      mov [prog], a    ; update pointer
0242+  0E0D 0A 5A 0E      jmp get_token_return
0243+  0E10             get_token_equal:
0244+  0E10 B9 3D         cmp al, '='        ; check if '='
0245+  0E12 C7 2A 0E      jne get_token_skip
0246+  0E15 F7            stosb          ; store '=' into token string
0247+  0E16 19 00         mov al, 0
0248+  0E18 F7            stosb          ; terminate token string
0249+  0E19 19 09         mov al, TOK_EQUAL
0250+  0E1B 3D CF 0E      mov [tok], al      
0251+  0E1E 19 02         mov al, TOKTYP_DELIMITER
0252+  0E20 3D CE 0E      mov [toktyp], al
0253+  0E23 4E            mov a, si
0254+  0E24 42 CC 0E      mov [prog], a    ; update pointer
0255+  0E27 0A 5A 0E      jmp get_token_return
0256+  0E2A             get_token_skip:
0257+  0E2A 4E            mov a, si
0258+  0E2B 42 CC 0E      mov [prog], a    ; update pointer
0259+  0E2E 0A 5A 0E      jmp get_token_return
0260+  0E31             get_token_end:        ; end of file token
0261+  0E31 19 14         mov al, TOK_END
0262+  0E33 3D CF 0E      mov [tok], al
0263+  0E36 19 06         mov al, TOKTYP_END
0264+  0E38 3D CE 0E      mov [toktyp], al
0265+  0E3B 0A 5A 0E      jmp get_token_return
0266+  0E3E             is_alphanumeric:
0267+  0E3E F7            stosb
0268+  0E3F F6            lodsb
0269+  0E40 07 05 0C      call _isalnum      ;check if is alphanumeric
0270+  0E43 C6 3E 0E      jz is_alphanumeric
0271+  0E46 B9 2E         cmp al, $2E        ; check if is '.'
0272+  0E48 C6 3E 0E      je is_alphanumeric
0273+  0E4B 19 00         mov al, 0
0274+  0E4D F7            stosb
0275+  0E4E 19 00         mov al, TOKTYP_IDENTIFIER
0276+  0E50 3D CE 0E      mov [toktyp], al
0277+  0E53 D5 01 00      sub si, 1
0278+  0E56 4E            mov a, si
0279+  0E57 42 CC 0E      mov [prog], a    ; update pointer
0280+  0E5A             get_token_return:
0281+  0E5A F0            pop di
0282+  0E5B EF            pop si
0283+  0E5C E7            pop d
0284+  0E5D E4            pop a
0285+  0E5E 09            ret
0286+  0E5F             get_tok_comment:
0287+  0E5F F6            lodsb
0288+  0E60 B9 0A         cmp al, $0A      ; new line
0289+  0E62 C7 5F 0E      jne get_tok_comment
0290+  0E65 0A 43 0D      jmp get_tok_skip_spaces
0291+  0E68             
0292+  0E68             
0293+  0E68             get_number:
0294+  0E68 D7            push a
0295+  0E69 DA            push d
0296+  0E6A E2            push si
0297+  0E6B E3            push di
0298+  0E6C 19 00         mov al, 0
0299+  0E6E 3D D0 0E      mov [tokstr], al      ; nullify tokstr string
0300+  0E71 19 00         mov al, TOK_NULL
0301+  0E73 3D CF 0E      mov [tok], al        ; nullify token
0302+  0E76 14 CC 0E      mov a, [prog]
0303+  0E79 4D            mov si, a
0304+  0E7A FD 4F D0 0E   mov di, tokstr
0305+  0E7E             get_number_skip_spaces:
0306+  0E7E F6            lodsb
0307+  0E7F 07 7B 0C      call _isspace
0308+  0E82 C6 7E 0E      je get_number_skip_spaces
0309+  0E85 B9 00         cmp al, 0      ; check for end of input (NULL)
0310+  0E87 C7 97 0E      jne get_number_L0
0311+  0E8A 19 14         mov al, TOK_END
0312+  0E8C 3D CF 0E      mov [tok], al
0313+  0E8F 19 06         mov al, TOKTYP_END
0314+  0E91 3D CE 0E      mov [toktyp], al
0315+  0E94 0A AE 0E      jmp get_number_return
0316+  0E97             get_number_L0:
0317+  0E97 F7            stosb
0318+  0E98 F6            lodsb
0319+  0E99 07 0F 0C      call _isdigit      ;check if is numeric
0320+  0E9C C6 97 0E      jz get_number_L0
0321+  0E9F 19 00         mov al, 0
0322+  0EA1 F7            stosb
0323+  0EA2 19 05         mov al, TOKTYP_NUMERIC
0324+  0EA4 3D CE 0E      mov [toktyp], al
0325+  0EA7 D5 01 00      sub si, 1
0326+  0EAA 4E            mov a, si
0327+  0EAB 42 CC 0E      mov [prog], a    ; update pointer
0328+  0EAE             get_number_return:
0329+  0EAE F0            pop di
0330+  0EAF EF            pop si
0331+  0EB0 E7            pop d
0332+  0EB1 E4            pop a
0333+  0EB2 09            ret
0334+  0EB3             
0335+  0EB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0EB3             ;; PUT BACK TOKEN
0337+  0EB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  0EB3             _putback:
0339+  0EB3 D7            push a
0340+  0EB4 E2            push si
0341+  0EB5 FD 4D D0 0E   mov si, tokstr  
0342+  0EB9             _putback_loop:
0343+  0EB9 F6            lodsb
0344+  0EBA B9 00         cmp al, 0
0345+  0EBC C6 C9 0E      je _putback_end
0346+  0EBF 14 CC 0E      mov a, [prog]
0347+  0EC2 7D            dec a
0348+  0EC3 42 CC 0E      mov [prog], a      ; update pointer
0349+  0EC6 0A B9 0E      jmp _putback_loop
0350+  0EC9             _putback_end:
0351+  0EC9 EF            pop si
0352+  0ECA E4            pop a
0353+  0ECB 09            ret
0354+  0ECC             
0355+  0ECC             
0356+  0ECC             
0357+  0ECC             
0358+  0ECC 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  0ECE             
0360+  0ECE 00          toktyp:    .db 0          ; token type symbol
0361+  0ECF 00          tok:       .db 0          ; current token symbol
0362+  0ED0 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  0ED4 00 00 00 00 
0362+  0ED8 00 00 00 00 
0362+  0EDC 00 00 00 00 
0362+  0EE0 00 00 00 00 
0362+  0EE4 00 00 00 00 
0362+  0EE8 00 00 00 00 
0362+  0EEC 00 00 00 00 
0362+  0EF0 00 00 00 00 
0362+  0EF4 00 00 00 00 
0362+  0EF8 00 00 00 00 
0362+  0EFC 00 00 00 00 
0362+  0F00 00 00 00 00 
0362+  0F04 00 00 00 00 
0362+  0F08 00 00 00 00 
0362+  0F0C 00 00 00 00 
0362+  0F10 00 00 00 00 
0362+  0F14 00 00 00 00 
0362+  0F18 00 00 00 00 
0362+  0F1C 00 00 00 00 
0362+  0F20 00 00 00 00 
0362+  0F24 00 00 00 00 
0362+  0F28 00 00 00 00 
0362+  0F2C 00 00 00 00 
0362+  0F30 00 00 00 00 
0362+  0F34 00 00 00 00 
0362+  0F38 00 00 00 00 
0362+  0F3C 00 00 00 00 
0362+  0F40 00 00 00 00 
0362+  0F44 00 00 00 00 
0362+  0F48 00 00 00 00 
0362+  0F4C 00 00 00 00 
0362+  0F50 00 00 00 00 
0362+  0F54 00 00 00 00 
0362+  0F58 00 00 00 00 
0362+  0F5C 00 00 00 00 
0362+  0F60 00 00 00 00 
0362+  0F64 00 00 00 00 
0362+  0F68 00 00 00 00 
0362+  0F6C 00 00 00 00 
0362+  0F70 00 00 00 00 
0362+  0F74 00 00 00 00 
0362+  0F78 00 00 00 00 
0362+  0F7C 00 00 00 00 
0362+  0F80 00 00 00 00 
0362+  0F84 00 00 00 00 
0362+  0F88 00 00 00 00 
0362+  0F8C 00 00 00 00 
0362+  0F90 00 00 00 00 
0362+  0F94 00 00 00 00 
0362+  0F98 00 00 00 00 
0362+  0F9C 00 00 00 00 
0362+  0FA0 00 00 00 00 
0362+  0FA4 00 00 00 00 
0362+  0FA8 00 00 00 00 
0362+  0FAC 00 00 00 00 
0362+  0FB0 00 00 00 00 
0362+  0FB4 00 00 00 00 
0362+  0FB8 00 00 00 00 
0362+  0FBC 00 00 00 00 
0362+  0FC0 00 00 00 00 
0362+  0FC4 00 00 00 00 
0362+  0FC8 00 00 00 00 
0362+  0FCC 00 00 00 00 
0426   0FD0             
0427   0FD0 00 00       parser_index: .dw 0
0428   0FD2 00 00       start:	.dw 0
0429   0FD4 00 00       end:	.dw 0
0430   0FD6             
0431   0FD6 FF FF FF FF new_input:		.fill 1024 * 4
0431   0FDA FF FF FF FF 
0431   0FDE FF FF FF FF 
0431   0FE2 FF FF FF FF 
0431   0FE6 FF FF FF FF 
0431   0FEA FF FF FF FF 
0431   0FEE FF FF FF FF 
0431   0FF2 FF FF FF FF 
0431   0FF6 FF FF FF FF 
0431   0FFA FF FF FF FF 
0431   0FFE FF FF FF FF 
0431   1002 FF FF FF FF 
0431   1006 FF FF FF FF 
0431   100A FF FF FF FF 
0431   100E FF FF FF FF 
0431   1012 FF FF FF FF 
0431   1016 FF FF FF FF 
0431   101A FF FF FF FF 
0431   101E FF FF FF FF 
0431   1022 FF FF FF FF 
0431   1026 FF FF FF FF 
0431   102A FF FF FF FF 
0431   102E FF FF FF FF 
0431   1032 FF FF FF FF 
0431   1036 FF FF FF FF 
0431   103A FF FF FF FF 
0431   103E FF FF FF FF 
0431   1042 FF FF FF FF 
0431   1046 FF FF FF FF 
0431   104A FF FF FF FF 
0431   104E FF FF FF FF 
0431   1052 FF FF FF FF 
0431   1056 FF FF FF FF 
0431   105A FF FF FF FF 
0431   105E FF FF FF FF 
0431   1062 FF FF FF FF 
0431   1066 FF FF FF FF 
0431   106A FF FF FF FF 
0431   106E FF FF FF FF 
0431   1072 FF FF FF FF 
0431   1076 FF FF FF FF 
0431   107A FF FF FF FF 
0431   107E FF FF FF FF 
0431   1082 FF FF FF FF 
0431   1086 FF FF FF FF 
0431   108A FF FF FF FF 
0431   108E FF FF FF FF 
0431   1092 FF FF FF FF 
0431   1096 FF FF FF FF 
0431   109A FF FF FF FF 
0431   109E FF FF FF FF 
0431   10A2 FF FF FF FF 
0431   10A6 FF FF FF FF 
0431   10AA FF FF FF FF 
0431   10AE FF FF FF FF 
0431   10B2 FF FF FF FF 
0431   10B6 FF FF FF FF 
0431   10BA FF FF FF FF 
0431   10BE FF FF FF FF 
0431   10C2 FF FF FF FF 
0431   10C6 FF FF FF FF 
0431   10CA FF FF FF FF 
0431   10CE FF FF FF FF 
0431   10D2 FF FF FF FF 
0431   10D6 FF FF FF FF 
0431   10DA FF FF FF FF 
0431   10DE FF FF FF FF 
0431   10E2 FF FF FF FF 
0431   10E6 FF FF FF FF 
0431   10EA FF FF FF FF 
0431   10EE FF FF FF FF 
0431   10F2 FF FF FF FF 
0431   10F6 FF FF FF FF 
0431   10FA FF FF FF FF 
0431   10FE FF FF FF FF 
0431   1102 FF FF FF FF 
0431   1106 FF FF FF FF 
0431   110A FF FF FF FF 
0431   110E FF FF FF FF 
0431   1112 FF FF FF FF 
0431   1116 FF FF FF FF 
0431   111A FF FF FF FF 
0431   111E FF FF FF FF 
0431   1122 FF FF FF FF 
0431   1126 FF FF FF FF 
0431   112A FF FF FF FF 
0431   112E FF FF FF FF 
0431   1132 FF FF FF FF 
0431   1136 FF FF FF FF 
0431   113A FF FF FF FF 
0431   113E FF FF FF FF 
0431   1142 FF FF FF FF 
0431   1146 FF FF FF FF 
0431   114A FF FF FF FF 
0431   114E FF FF FF FF 
0431   1152 FF FF FF FF 
0431   1156 FF FF FF FF 
0431   115A FF FF FF FF 
0431   115E FF FF FF FF 
0431   1162 FF FF FF FF 
0431   1166 FF FF FF FF 
0431   116A FF FF FF FF 
0431   116E FF FF FF FF 
0431   1172 FF FF FF FF 
0431   1176 FF FF FF FF 
0431   117A FF FF FF FF 
0431   117E FF FF FF FF 
0431   1182 FF FF FF FF 
0431   1186 FF FF FF FF 
0431   118A FF FF FF FF 
0431   118E FF FF FF FF 
0431   1192 FF FF FF FF 
0431   1196 FF FF FF FF 
0431   119A FF FF FF FF 
0431   119E FF FF FF FF 
0431   11A2 FF FF FF FF 
0431   11A6 FF FF FF FF 
0431   11AA FF FF FF FF 
0431   11AE FF FF FF FF 
0431   11B2 FF FF FF FF 
0431   11B6 FF FF FF FF 
0431   11BA FF FF FF FF 
0431   11BE FF FF FF FF 
0431   11C2 FF FF FF FF 
0431   11C6 FF FF FF FF 
0431   11CA FF FF FF FF 
0431   11CE FF FF FF FF 
0431   11D2 FF FF FF FF 
0431   11D6 FF FF FF FF 
0431   11DA FF FF FF FF 
0431   11DE FF FF FF FF 
0431   11E2 FF FF FF FF 
0431   11E6 FF FF FF FF 
0431   11EA FF FF FF FF 
0431   11EE FF FF FF FF 
0431   11F2 FF FF FF FF 
0431   11F6 FF FF FF FF 
0431   11FA FF FF FF FF 
0431   11FE FF FF FF FF 
0431   1202 FF FF FF FF 
0431   1206 FF FF FF FF 
0431   120A FF FF FF FF 
0431   120E FF FF FF FF 
0431   1212 FF FF FF FF 
0431   1216 FF FF FF FF 
0431   121A FF FF FF FF 
0431   121E FF FF FF FF 
0431   1222 FF FF FF FF 
0431   1226 FF FF FF FF 
0431   122A FF FF FF FF 
0431   122E FF FF FF FF 
0431   1232 FF FF FF FF 
0431   1236 FF FF FF FF 
0431   123A FF FF FF FF 
0431   123E FF FF FF FF 
0431   1242 FF FF FF FF 
0431   1246 FF FF FF FF 
0431   124A FF FF FF FF 
0431   124E FF FF FF FF 
0431   1252 FF FF FF FF 
0431   1256 FF FF FF FF 
0431   125A FF FF FF FF 
0431   125E FF FF FF FF 
0431   1262 FF FF FF FF 
0431   1266 FF FF FF FF 
0431   126A FF FF FF FF 
0431   126E FF FF FF FF 
0431   1272 FF FF FF FF 
0431   1276 FF FF FF FF 
0431   127A FF FF FF FF 
0431   127E FF FF FF FF 
0431   1282 FF FF FF FF 
0431   1286 FF FF FF FF 
0431   128A FF FF FF FF 
0431   128E FF FF FF FF 
0431   1292 FF FF FF FF 
0431   1296 FF FF FF FF 
0431   129A FF FF FF FF 
0431   129E FF FF FF FF 
0431   12A2 FF FF FF FF 
0431   12A6 FF FF FF FF 
0431   12AA FF FF FF FF 
0431   12AE FF FF FF FF 
0431   12B2 FF FF FF FF 
0431   12B6 FF FF FF FF 
0431   12BA FF FF FF FF 
0431   12BE FF FF FF FF 
0431   12C2 FF FF FF FF 
0431   12C6 FF FF FF FF 
0431   12CA FF FF FF FF 
0431   12CE FF FF FF FF 
0431   12D2 FF FF FF FF 
0431   12D6 FF FF FF FF 
0431   12DA FF FF FF FF 
0431   12DE FF FF FF FF 
0431   12E2 FF FF FF FF 
0431   12E6 FF FF FF FF 
0431   12EA FF FF FF FF 
0431   12EE FF FF FF FF 
0431   12F2 FF FF FF FF 
0431   12F6 FF FF FF FF 
0431   12FA FF FF FF FF 
0431   12FE FF FF FF FF 
0431   1302 FF FF FF FF 
0431   1306 FF FF FF FF 
0431   130A FF FF FF FF 
0431   130E FF FF FF FF 
0431   1312 FF FF FF FF 
0431   1316 FF FF FF FF 
0431   131A FF FF FF FF 
0431   131E FF FF FF FF 
0431   1322 FF FF FF FF 
0431   1326 FF FF FF FF 
0431   132A FF FF FF FF 
0431   132E FF FF FF FF 
0431   1332 FF FF FF FF 
0431   1336 FF FF FF FF 
0431   133A FF FF FF FF 
0431   133E FF FF FF FF 
0431   1342 FF FF FF FF 
0431   1346 FF FF FF FF 
0431   134A FF FF FF FF 
0431   134E FF FF FF FF 
0431   1352 FF FF FF FF 
0431   1356 FF FF FF FF 
0431   135A FF FF FF FF 
0431   135E FF FF FF FF 
0431   1362 FF FF FF FF 
0431   1366 FF FF FF FF 
0431   136A FF FF FF FF 
0431   136E FF FF FF FF 
0431   1372 FF FF FF FF 
0431   1376 FF FF FF FF 
0431   137A FF FF FF FF 
0431   137E FF FF FF FF 
0431   1382 FF FF FF FF 
0431   1386 FF FF FF FF 
0431   138A FF FF FF FF 
0431   138E FF FF FF FF 
0431   1392 FF FF FF FF 
0431   1396 FF FF FF FF 
0431   139A FF FF FF FF 
0431   139E FF FF FF FF 
0431   13A2 FF FF FF FF 
0431   13A6 FF FF FF FF 
0431   13AA FF FF FF FF 
0431   13AE FF FF FF FF 
0431   13B2 FF FF FF FF 
0431   13B6 FF FF FF FF 
0431   13BA FF FF FF FF 
0431   13BE FF FF FF FF 
0431   13C2 FF FF FF FF 
0431   13C6 FF FF FF FF 
0431   13CA FF FF FF FF 
0431   13CE FF FF FF FF 
0431   13D2 FF FF FF FF 
0431   13D6 FF FF FF FF 
0431   13DA FF FF FF FF 
0431   13DE FF FF FF FF 
0431   13E2 FF FF FF FF 
0431   13E6 FF FF FF FF 
0431   13EA FF FF FF FF 
0431   13EE FF FF FF FF 
0431   13F2 FF FF FF FF 
0431   13F6 FF FF FF FF 
0431   13FA FF FF FF FF 
0431   13FE FF FF FF FF 
0431   1402 FF FF FF FF 
0431   1406 FF FF FF FF 
0431   140A FF FF FF FF 
0431   140E FF FF FF FF 
0431   1412 FF FF FF FF 
0431   1416 FF FF FF FF 
0431   141A FF FF FF FF 
0431   141E FF FF FF FF 
0431   1422 FF FF FF FF 
0431   1426 FF FF FF FF 
0431   142A FF FF FF FF 
0431   142E FF FF FF FF 
0431   1432 FF FF FF FF 
0431   1436 FF FF FF FF 
0431   143A FF FF FF FF 
0431   143E FF FF FF FF 
0431   1442 FF FF FF FF 
0431   1446 FF FF FF FF 
0431   144A FF FF FF FF 
0431   144E FF FF FF FF 
0431   1452 FF FF FF FF 
0431   1456 FF FF FF FF 
0431   145A FF FF FF FF 
0431   145E FF FF FF FF 
0431   1462 FF FF FF FF 
0431   1466 FF FF FF FF 
0431   146A FF FF FF FF 
0431   146E FF FF FF FF 
0431   1472 FF FF FF FF 
0431   1476 FF FF FF FF 
0431   147A FF FF FF FF 
0431   147E FF FF FF FF 
0431   1482 FF FF FF FF 
0431   1486 FF FF FF FF 
0431   148A FF FF FF FF 
0431   148E FF FF FF FF 
0431   1492 FF FF FF FF 
0431   1496 FF FF FF FF 
0431   149A FF FF FF FF 
0431   149E FF FF FF FF 
0431   14A2 FF FF FF FF 
0431   14A6 FF FF FF FF 
0431   14AA FF FF FF FF 
0431   14AE FF FF FF FF 
0431   14B2 FF FF FF FF 
0431   14B6 FF FF FF FF 
0431   14BA FF FF FF FF 
0431   14BE FF FF FF FF 
0431   14C2 FF FF FF FF 
0431   14C6 FF FF FF FF 
0431   14CA FF FF FF FF 
0431   14CE FF FF FF FF 
0431   14D2 FF FF FF FF 
0431   14D6 FF FF FF FF 
0431   14DA FF FF FF FF 
0431   14DE FF FF FF FF 
0431   14E2 FF FF FF FF 
0431   14E6 FF FF FF FF 
0431   14EA FF FF FF FF 
0431   14EE FF FF FF FF 
0431   14F2 FF FF FF FF 
0431   14F6 FF FF FF FF 
0431   14FA FF FF FF FF 
0431   14FE FF FF FF FF 
0431   1502 FF FF FF FF 
0431   1506 FF FF FF FF 
0431   150A FF FF FF FF 
0431   150E FF FF FF FF 
0431   1512 FF FF FF FF 
0431   1516 FF FF FF FF 
0431   151A FF FF FF FF 
0431   151E FF FF FF FF 
0431   1522 FF FF FF FF 
0431   1526 FF FF FF FF 
0431   152A FF FF FF FF 
0431   152E FF FF FF FF 
0431   1532 FF FF FF FF 
0431   1536 FF FF FF FF 
0431   153A FF FF FF FF 
0431   153E FF FF FF FF 
0431   1542 FF FF FF FF 
0431   1546 FF FF FF FF 
0431   154A FF FF FF FF 
0431   154E FF FF FF FF 
0431   1552 FF FF FF FF 
0431   1556 FF FF FF FF 
0431   155A FF FF FF FF 
0431   155E FF FF FF FF 
0431   1562 FF FF FF FF 
0431   1566 FF FF FF FF 
0431   156A FF FF FF FF 
0431   156E FF FF FF FF 
0431   1572 FF FF FF FF 
0431   1576 FF FF FF FF 
0431   157A FF FF FF FF 
0431   157E FF FF FF FF 
0431   1582 FF FF FF FF 
0431   1586 FF FF FF FF 
0431   158A FF FF FF FF 
0431   158E FF FF FF FF 
0431   1592 FF FF FF FF 
0431   1596 FF FF FF FF 
0431   159A FF FF FF FF 
0431   159E FF FF FF FF 
0431   15A2 FF FF FF FF 
0431   15A6 FF FF FF FF 
0431   15AA FF FF FF FF 
0431   15AE FF FF FF FF 
0431   15B2 FF FF FF FF 
0431   15B6 FF FF FF FF 
0431   15BA FF FF FF FF 
0431   15BE FF FF FF FF 
0431   15C2 FF FF FF FF 
0431   15C6 FF FF FF FF 
0431   15CA FF FF FF FF 
0431   15CE FF FF FF FF 
0431   15D2 FF FF FF FF 
0431   15D6 FF FF FF FF 
0431   15DA FF FF FF FF 
0431   15DE FF FF FF FF 
0431   15E2 FF FF FF FF 
0431   15E6 FF FF FF FF 
0431   15EA FF FF FF FF 
0431   15EE FF FF FF FF 
0431   15F2 FF FF FF FF 
0431   15F6 FF FF FF FF 
0431   15FA FF FF FF FF 
0431   15FE FF FF FF FF 
0431   1602 FF FF FF FF 
0431   1606 FF FF FF FF 
0431   160A FF FF FF FF 
0431   160E FF FF FF FF 
0431   1612 FF FF FF FF 
0431   1616 FF FF FF FF 
0431   161A FF FF FF FF 
0431   161E FF FF FF FF 
0431   1622 FF FF FF FF 
0431   1626 FF FF FF FF 
0431   162A FF FF FF FF 
0431   162E FF FF FF FF 
0431   1632 FF FF FF FF 
0431   1636 FF FF FF FF 
0431   163A FF FF FF FF 
0431   163E FF FF FF FF 
0431   1642 FF FF FF FF 
0431   1646 FF FF FF FF 
0431   164A FF FF FF FF 
0431   164E FF FF FF FF 
0431   1652 FF FF FF FF 
0431   1656 FF FF FF FF 
0431   165A FF FF FF FF 
0431   165E FF FF FF FF 
0431   1662 FF FF FF FF 
0431   1666 FF FF FF FF 
0431   166A FF FF FF FF 
0431   166E FF FF FF FF 
0431   1672 FF FF FF FF 
0431   1676 FF FF FF FF 
0431   167A FF FF FF FF 
0431   167E FF FF FF FF 
0431   1682 FF FF FF FF 
0431   1686 FF FF FF FF 
0431   168A FF FF FF FF 
0431   168E FF FF FF FF 
0431   1692 FF FF FF FF 
0431   1696 FF FF FF FF 
0431   169A FF FF FF FF 
0431   169E FF FF FF FF 
0431   16A2 FF FF FF FF 
0431   16A6 FF FF FF FF 
0431   16AA FF FF FF FF 
0431   16AE FF FF FF FF 
0431   16B2 FF FF FF FF 
0431   16B6 FF FF FF FF 
0431   16BA FF FF FF FF 
0431   16BE FF FF FF FF 
0431   16C2 FF FF FF FF 
0431   16C6 FF FF FF FF 
0431   16CA FF FF FF FF 
0431   16CE FF FF FF FF 
0431   16D2 FF FF FF FF 
0431   16D6 FF FF FF FF 
0431   16DA FF FF FF FF 
0431   16DE FF FF FF FF 
0431   16E2 FF FF FF FF 
0431   16E6 FF FF FF FF 
0431   16EA FF FF FF FF 
0431   16EE FF FF FF FF 
0431   16F2 FF FF FF FF 
0431   16F6 FF FF FF FF 
0431   16FA FF FF FF FF 
0431   16FE FF FF FF FF 
0431   1702 FF FF FF FF 
0431   1706 FF FF FF FF 
0431   170A FF FF FF FF 
0431   170E FF FF FF FF 
0431   1712 FF FF FF FF 
0431   1716 FF FF FF FF 
0431   171A FF FF FF FF 
0431   171E FF FF FF FF 
0431   1722 FF FF FF FF 
0431   1726 FF FF FF FF 
0431   172A FF FF FF FF 
0431   172E FF FF FF FF 
0431   1732 FF FF FF FF 
0431   1736 FF FF FF FF 
0431   173A FF FF FF FF 
0431   173E FF FF FF FF 
0431   1742 FF FF FF FF 
0431   1746 FF FF FF FF 
0431   174A FF FF FF FF 
0431   174E FF FF FF FF 
0431   1752 FF FF FF FF 
0431   1756 FF FF FF FF 
0431   175A FF FF FF FF 
0431   175E FF FF FF FF 
0431   1762 FF FF FF FF 
0431   1766 FF FF FF FF 
0431   176A FF FF FF FF 
0431   176E FF FF FF FF 
0431   1772 FF FF FF FF 
0431   1776 FF FF FF FF 
0431   177A FF FF FF FF 
0431   177E FF FF FF FF 
0431   1782 FF FF FF FF 
0431   1786 FF FF FF FF 
0431   178A FF FF FF FF 
0431   178E FF FF FF FF 
0431   1792 FF FF FF FF 
0431   1796 FF FF FF FF 
0431   179A FF FF FF FF 
0431   179E FF FF FF FF 
0431   17A2 FF FF FF FF 
0431   17A6 FF FF FF FF 
0431   17AA FF FF FF FF 
0431   17AE FF FF FF FF 
0431   17B2 FF FF FF FF 
0431   17B6 FF FF FF FF 
0431   17BA FF FF FF FF 
0431   17BE FF FF FF FF 
0431   17C2 FF FF FF FF 
0431   17C6 FF FF FF FF 
0431   17CA FF FF FF FF 
0431   17CE FF FF FF FF 
0431   17D2 FF FF FF FF 
0431   17D6 FF FF FF FF 
0431   17DA FF FF FF FF 
0431   17DE FF FF FF FF 
0431   17E2 FF FF FF FF 
0431   17E6 FF FF FF FF 
0431   17EA FF FF FF FF 
0431   17EE FF FF FF FF 
0431   17F2 FF FF FF FF 
0431   17F6 FF FF FF FF 
0431   17FA FF FF FF FF 
0431   17FE FF FF FF FF 
0431   1802 FF FF FF FF 
0431   1806 FF FF FF FF 
0431   180A FF FF FF FF 
0431   180E FF FF FF FF 
0431   1812 FF FF FF FF 
0431   1816 FF FF FF FF 
0431   181A FF FF FF FF 
0431   181E FF FF FF FF 
0431   1822 FF FF FF FF 
0431   1826 FF FF FF FF 
0431   182A FF FF FF FF 
0431   182E FF FF FF FF 
0431   1832 FF FF FF FF 
0431   1836 FF FF FF FF 
0431   183A FF FF FF FF 
0431   183E FF FF FF FF 
0431   1842 FF FF FF FF 
0431   1846 FF FF FF FF 
0431   184A FF FF FF FF 
0431   184E FF FF FF FF 
0431   1852 FF FF FF FF 
0431   1856 FF FF FF FF 
0431   185A FF FF FF FF 
0431   185E FF FF FF FF 
0431   1862 FF FF FF FF 
0431   1866 FF FF FF FF 
0431   186A FF FF FF FF 
0431   186E FF FF FF FF 
0431   1872 FF FF FF FF 
0431   1876 FF FF FF FF 
0431   187A FF FF FF FF 
0431   187E FF FF FF FF 
0431   1882 FF FF FF FF 
0431   1886 FF FF FF FF 
0431   188A FF FF FF FF 
0431   188E FF FF FF FF 
0431   1892 FF FF FF FF 
0431   1896 FF FF FF FF 
0431   189A FF FF FF FF 
0431   189E FF FF FF FF 
0431   18A2 FF FF FF FF 
0431   18A6 FF FF FF FF 
0431   18AA FF FF FF FF 
0431   18AE FF FF FF FF 
0431   18B2 FF FF FF FF 
0431   18B6 FF FF FF FF 
0431   18BA FF FF FF FF 
0431   18BE FF FF FF FF 
0431   18C2 FF FF FF FF 
0431   18C6 FF FF FF FF 
0431   18CA FF FF FF FF 
0431   18CE FF FF FF FF 
0431   18D2 FF FF FF FF 
0431   18D6 FF FF FF FF 
0431   18DA FF FF FF FF 
0431   18DE FF FF FF FF 
0431   18E2 FF FF FF FF 
0431   18E6 FF FF FF FF 
0431   18EA FF FF FF FF 
0431   18EE FF FF FF FF 
0431   18F2 FF FF FF FF 
0431   18F6 FF FF FF FF 
0431   18FA FF FF FF FF 
0431   18FE FF FF FF FF 
0431   1902 FF FF FF FF 
0431   1906 FF FF FF FF 
0431   190A FF FF FF FF 
0431   190E FF FF FF FF 
0431   1912 FF FF FF FF 
0431   1916 FF FF FF FF 
0431   191A FF FF FF FF 
0431   191E FF FF FF FF 
0431   1922 FF FF FF FF 
0431   1926 FF FF FF FF 
0431   192A FF FF FF FF 
0431   192E FF FF FF FF 
0431   1932 FF FF FF FF 
0431   1936 FF FF FF FF 
0431   193A FF FF FF FF 
0431   193E FF FF FF FF 
0431   1942 FF FF FF FF 
0431   1946 FF FF FF FF 
0431   194A FF FF FF FF 
0431   194E FF FF FF FF 
0431   1952 FF FF FF FF 
0431   1956 FF FF FF FF 
0431   195A FF FF FF FF 
0431   195E FF FF FF FF 
0431   1962 FF FF FF FF 
0431   1966 FF FF FF FF 
0431   196A FF FF FF FF 
0431   196E FF FF FF FF 
0431   1972 FF FF FF FF 
0431   1976 FF FF FF FF 
0431   197A FF FF FF FF 
0431   197E FF FF FF FF 
0431   1982 FF FF FF FF 
0431   1986 FF FF FF FF 
0431   198A FF FF FF FF 
0431   198E FF FF FF FF 
0431   1992 FF FF FF FF 
0431   1996 FF FF FF FF 
0431   199A FF FF FF FF 
0431   199E FF FF FF FF 
0431   19A2 FF FF FF FF 
0431   19A6 FF FF FF FF 
0431   19AA FF FF FF FF 
0431   19AE FF FF FF FF 
0431   19B2 FF FF FF FF 
0431   19B6 FF FF FF FF 
0431   19BA FF FF FF FF 
0431   19BE FF FF FF FF 
0431   19C2 FF FF FF FF 
0431   19C6 FF FF FF FF 
0431   19CA FF FF FF FF 
0431   19CE FF FF FF FF 
0431   19D2 FF FF FF FF 
0431   19D6 FF FF FF FF 
0431   19DA FF FF FF FF 
0431   19DE FF FF FF FF 
0431   19E2 FF FF FF FF 
0431   19E6 FF FF FF FF 
0431   19EA FF FF FF FF 
0431   19EE FF FF FF FF 
0431   19F2 FF FF FF FF 
0431   19F6 FF FF FF FF 
0431   19FA FF FF FF FF 
0431   19FE FF FF FF FF 
0431   1A02 FF FF FF FF 
0431   1A06 FF FF FF FF 
0431   1A0A FF FF FF FF 
0431   1A0E FF FF FF FF 
0431   1A12 FF FF FF FF 
0431   1A16 FF FF FF FF 
0431   1A1A FF FF FF FF 
0431   1A1E FF FF FF FF 
0431   1A22 FF FF FF FF 
0431   1A26 FF FF FF FF 
0431   1A2A FF FF FF FF 
0431   1A2E FF FF FF FF 
0431   1A32 FF FF FF FF 
0431   1A36 FF FF FF FF 
0431   1A3A FF FF FF FF 
0431   1A3E FF FF FF FF 
0431   1A42 FF FF FF FF 
0431   1A46 FF FF FF FF 
0431   1A4A FF FF FF FF 
0431   1A4E FF FF FF FF 
0431   1A52 FF FF FF FF 
0431   1A56 FF FF FF FF 
0431   1A5A FF FF FF FF 
0431   1A5E FF FF FF FF 
0431   1A62 FF FF FF FF 
0431   1A66 FF FF FF FF 
0431   1A6A FF FF FF FF 
0431   1A6E FF FF FF FF 
0431   1A72 FF FF FF FF 
0431   1A76 FF FF FF FF 
0431   1A7A FF FF FF FF 
0431   1A7E FF FF FF FF 
0431   1A82 FF FF FF FF 
0431   1A86 FF FF FF FF 
0431   1A8A FF FF FF FF 
0431   1A8E FF FF FF FF 
0431   1A92 FF FF FF FF 
0431   1A96 FF FF FF FF 
0431   1A9A FF FF FF FF 
0431   1A9E FF FF FF FF 
0431   1AA2 FF FF FF FF 
0431   1AA6 FF FF FF FF 
0431   1AAA FF FF FF FF 
0431   1AAE FF FF FF FF 
0431   1AB2 FF FF FF FF 
0431   1AB6 FF FF FF FF 
0431   1ABA FF FF FF FF 
0431   1ABE FF FF FF FF 
0431   1AC2 FF FF FF FF 
0431   1AC6 FF FF FF FF 
0431   1ACA FF FF FF FF 
0431   1ACE FF FF FF FF 
0431   1AD2 FF FF FF FF 
0431   1AD6 FF FF FF FF 
0431   1ADA FF FF FF FF 
0431   1ADE FF FF FF FF 
0431   1AE2 FF FF FF FF 
0431   1AE6 FF FF FF FF 
0431   1AEA FF FF FF FF 
0431   1AEE FF FF FF FF 
0431   1AF2 FF FF FF FF 
0431   1AF6 FF FF FF FF 
0431   1AFA FF FF FF FF 
0431   1AFE FF FF FF FF 
0431   1B02 FF FF FF FF 
0431   1B06 FF FF FF FF 
0431   1B0A FF FF FF FF 
0431   1B0E FF FF FF FF 
0431   1B12 FF FF FF FF 
0431   1B16 FF FF FF FF 
0431   1B1A FF FF FF FF 
0431   1B1E FF FF FF FF 
0431   1B22 FF FF FF FF 
0431   1B26 FF FF FF FF 
0431   1B2A FF FF FF FF 
0431   1B2E FF FF FF FF 
0431   1B32 FF FF FF FF 
0431   1B36 FF FF FF FF 
0431   1B3A FF FF FF FF 
0431   1B3E FF FF FF FF 
0431   1B42 FF FF FF FF 
0431   1B46 FF FF FF FF 
0431   1B4A FF FF FF FF 
0431   1B4E FF FF FF FF 
0431   1B52 FF FF FF FF 
0431   1B56 FF FF FF FF 
0431   1B5A FF FF FF FF 
0431   1B5E FF FF FF FF 
0431   1B62 FF FF FF FF 
0431   1B66 FF FF FF FF 
0431   1B6A FF FF FF FF 
0431   1B6E FF FF FF FF 
0431   1B72 FF FF FF FF 
0431   1B76 FF FF FF FF 
0431   1B7A FF FF FF FF 
0431   1B7E FF FF FF FF 
0431   1B82 FF FF FF FF 
0431   1B86 FF FF FF FF 
0431   1B8A FF FF FF FF 
0431   1B8E FF FF FF FF 
0431   1B92 FF FF FF FF 
0431   1B96 FF FF FF FF 
0431   1B9A FF FF FF FF 
0431   1B9E FF FF FF FF 
0431   1BA2 FF FF FF FF 
0431   1BA6 FF FF FF FF 
0431   1BAA FF FF FF FF 
0431   1BAE FF FF FF FF 
0431   1BB2 FF FF FF FF 
0431   1BB6 FF FF FF FF 
0431   1BBA FF FF FF FF 
0431   1BBE FF FF FF FF 
0431   1BC2 FF FF FF FF 
0431   1BC6 FF FF FF FF 
0431   1BCA FF FF FF FF 
0431   1BCE FF FF FF FF 
0431   1BD2 FF FF FF FF 
0431   1BD6 FF FF FF FF 
0431   1BDA FF FF FF FF 
0431   1BDE FF FF FF FF 
0431   1BE2 FF FF FF FF 
0431   1BE6 FF FF FF FF 
0431   1BEA FF FF FF FF 
0431   1BEE FF FF FF FF 
0431   1BF2 FF FF FF FF 
0431   1BF6 FF FF FF FF 
0431   1BFA FF FF FF FF 
0431   1BFE FF FF FF FF 
0431   1C02 FF FF FF FF 
0431   1C06 FF FF FF FF 
0431   1C0A FF FF FF FF 
0431   1C0E FF FF FF FF 
0431   1C12 FF FF FF FF 
0431   1C16 FF FF FF FF 
0431   1C1A FF FF FF FF 
0431   1C1E FF FF FF FF 
0431   1C22 FF FF FF FF 
0431   1C26 FF FF FF FF 
0431   1C2A FF FF FF FF 
0431   1C2E FF FF FF FF 
0431   1C32 FF FF FF FF 
0431   1C36 FF FF FF FF 
0431   1C3A FF FF FF FF 
0431   1C3E FF FF FF FF 
0431   1C42 FF FF FF FF 
0431   1C46 FF FF FF FF 
0431   1C4A FF FF FF FF 
0431   1C4E FF FF FF FF 
0431   1C52 FF FF FF FF 
0431   1C56 FF FF FF FF 
0431   1C5A FF FF FF FF 
0431   1C5E FF FF FF FF 
0431   1C62 FF FF FF FF 
0431   1C66 FF FF FF FF 
0431   1C6A FF FF FF FF 
0431   1C6E FF FF FF FF 
0431   1C72 FF FF FF FF 
0431   1C76 FF FF FF FF 
0431   1C7A FF FF FF FF 
0431   1C7E FF FF FF FF 
0431   1C82 FF FF FF FF 
0431   1C86 FF FF FF FF 
0431   1C8A FF FF FF FF 
0431   1C8E FF FF FF FF 
0431   1C92 FF FF FF FF 
0431   1C96 FF FF FF FF 
0431   1C9A FF FF FF FF 
0431   1C9E FF FF FF FF 
0431   1CA2 FF FF FF FF 
0431   1CA6 FF FF FF FF 
0431   1CAA FF FF FF FF 
0431   1CAE FF FF FF FF 
0431   1CB2 FF FF FF FF 
0431   1CB6 FF FF FF FF 
0431   1CBA FF FF FF FF 
0431   1CBE FF FF FF FF 
0431   1CC2 FF FF FF FF 
0431   1CC6 FF FF FF FF 
0431   1CCA FF FF FF FF 
0431   1CCE FF FF FF FF 
0431   1CD2 FF FF FF FF 
0431   1CD6 FF FF FF FF 
0431   1CDA FF FF FF FF 
0431   1CDE FF FF FF FF 
0431   1CE2 FF FF FF FF 
0431   1CE6 FF FF FF FF 
0431   1CEA FF FF FF FF 
0431   1CEE FF FF FF FF 
0431   1CF2 FF FF FF FF 
0431   1CF6 FF FF FF FF 
0431   1CFA FF FF FF FF 
0431   1CFE FF FF FF FF 
0431   1D02 FF FF FF FF 
0431   1D06 FF FF FF FF 
0431   1D0A FF FF FF FF 
0431   1D0E FF FF FF FF 
0431   1D12 FF FF FF FF 
0431   1D16 FF FF FF FF 
0431   1D1A FF FF FF FF 
0431   1D1E FF FF FF FF 
0431   1D22 FF FF FF FF 
0431   1D26 FF FF FF FF 
0431   1D2A FF FF FF FF 
0431   1D2E FF FF FF FF 
0431   1D32 FF FF FF FF 
0431   1D36 FF FF FF FF 
0431   1D3A FF FF FF FF 
0431   1D3E FF FF FF FF 
0431   1D42 FF FF FF FF 
0431   1D46 FF FF FF FF 
0431   1D4A FF FF FF FF 
0431   1D4E FF FF FF FF 
0431   1D52 FF FF FF FF 
0431   1D56 FF FF FF FF 
0431   1D5A FF FF FF FF 
0431   1D5E FF FF FF FF 
0431   1D62 FF FF FF FF 
0431   1D66 FF FF FF FF 
0431   1D6A FF FF FF FF 
0431   1D6E FF FF FF FF 
0431   1D72 FF FF FF FF 
0431   1D76 FF FF FF FF 
0431   1D7A FF FF FF FF 
0431   1D7E FF FF FF FF 
0431   1D82 FF FF FF FF 
0431   1D86 FF FF FF FF 
0431   1D8A FF FF FF FF 
0431   1D8E FF FF FF FF 
0431   1D92 FF FF FF FF 
0431   1D96 FF FF FF FF 
0431   1D9A FF FF FF FF 
0431   1D9E FF FF FF FF 
0431   1DA2 FF FF FF FF 
0431   1DA6 FF FF FF FF 
0431   1DAA FF FF FF FF 
0431   1DAE FF FF FF FF 
0431   1DB2 FF FF FF FF 
0431   1DB6 FF FF FF FF 
0431   1DBA FF FF FF FF 
0431   1DBE FF FF FF FF 
0431   1DC2 FF FF FF FF 
0431   1DC6 FF FF FF FF 
0431   1DCA FF FF FF FF 
0431   1DCE FF FF FF FF 
0431   1DD2 FF FF FF FF 
0431   1DD6 FF FF FF FF 
0431   1DDA FF FF FF FF 
0431   1DDE FF FF FF FF 
0431   1DE2 FF FF FF FF 
0431   1DE6 FF FF FF FF 
0431   1DEA FF FF FF FF 
0431   1DEE FF FF FF FF 
0431   1DF2 FF FF FF FF 
0431   1DF6 FF FF FF FF 
0431   1DFA FF FF FF FF 
0431   1DFE FF FF FF FF 
0431   1E02 FF FF FF FF 
0431   1E06 FF FF FF FF 
0431   1E0A FF FF FF FF 
0431   1E0E FF FF FF FF 
0431   1E12 FF FF FF FF 
0431   1E16 FF FF FF FF 
0431   1E1A FF FF FF FF 
0431   1E1E FF FF FF FF 
0431   1E22 FF FF FF FF 
0431   1E26 FF FF FF FF 
0431   1E2A FF FF FF FF 
0431   1E2E FF FF FF FF 
0431   1E32 FF FF FF FF 
0431   1E36 FF FF FF FF 
0431   1E3A FF FF FF FF 
0431   1E3E FF FF FF FF 
0431   1E42 FF FF FF FF 
0431   1E46 FF FF FF FF 
0431   1E4A FF FF FF FF 
0431   1E4E FF FF FF FF 
0431   1E52 FF FF FF FF 
0431   1E56 FF FF FF FF 
0431   1E5A FF FF FF FF 
0431   1E5E FF FF FF FF 
0431   1E62 FF FF FF FF 
0431   1E66 FF FF FF FF 
0431   1E6A FF FF FF FF 
0431   1E6E FF FF FF FF 
0431   1E72 FF FF FF FF 
0431   1E76 FF FF FF FF 
0431   1E7A FF FF FF FF 
0431   1E7E FF FF FF FF 
0431   1E82 FF FF FF FF 
0431   1E86 FF FF FF FF 
0431   1E8A FF FF FF FF 
0431   1E8E FF FF FF FF 
0431   1E92 FF FF FF FF 
0431   1E96 FF FF FF FF 
0431   1E9A FF FF FF FF 
0431   1E9E FF FF FF FF 
0431   1EA2 FF FF FF FF 
0431   1EA6 FF FF FF FF 
0431   1EAA FF FF FF FF 
0431   1EAE FF FF FF FF 
0431   1EB2 FF FF FF FF 
0431   1EB6 FF FF FF FF 
0431   1EBA FF FF FF FF 
0431   1EBE FF FF FF FF 
0431   1EC2 FF FF FF FF 
0431   1EC6 FF FF FF FF 
0431   1ECA FF FF FF FF 
0431   1ECE FF FF FF FF 
0431   1ED2 FF FF FF FF 
0431   1ED6 FF FF FF FF 
0431   1EDA FF FF FF FF 
0431   1EDE FF FF FF FF 
0431   1EE2 FF FF FF FF 
0431   1EE6 FF FF FF FF 
0431   1EEA FF FF FF FF 
0431   1EEE FF FF FF FF 
0431   1EF2 FF FF FF FF 
0431   1EF6 FF FF FF FF 
0431   1EFA FF FF FF FF 
0431   1EFE FF FF FF FF 
0431   1F02 FF FF FF FF 
0431   1F06 FF FF FF FF 
0431   1F0A FF FF FF FF 
0431   1F0E FF FF FF FF 
0431   1F12 FF FF FF FF 
0431   1F16 FF FF FF FF 
0431   1F1A FF FF FF FF 
0431   1F1E FF FF FF FF 
0431   1F22 FF FF FF FF 
0431   1F26 FF FF FF FF 
0431   1F2A FF FF FF FF 
0431   1F2E FF FF FF FF 
0431   1F32 FF FF FF FF 
0431   1F36 FF FF FF FF 
0431   1F3A FF FF FF FF 
0431   1F3E FF FF FF FF 
0431   1F42 FF FF FF FF 
0431   1F46 FF FF FF FF 
0431   1F4A FF FF FF FF 
0431   1F4E FF FF FF FF 
0431   1F52 FF FF FF FF 
0431   1F56 FF FF FF FF 
0431   1F5A FF FF FF FF 
0431   1F5E FF FF FF FF 
0431   1F62 FF FF FF FF 
0431   1F66 FF FF FF FF 
0431   1F6A FF FF FF FF 
0431   1F6E FF FF FF FF 
0431   1F72 FF FF FF FF 
0431   1F76 FF FF FF FF 
0431   1F7A FF FF FF FF 
0431   1F7E FF FF FF FF 
0431   1F82 FF FF FF FF 
0431   1F86 FF FF FF FF 
0431   1F8A FF FF FF FF 
0431   1F8E FF FF FF FF 
0431   1F92 FF FF FF FF 
0431   1F96 FF FF FF FF 
0431   1F9A FF FF FF FF 
0431   1F9E FF FF FF FF 
0431   1FA2 FF FF FF FF 
0431   1FA6 FF FF FF FF 
0431   1FAA FF FF FF FF 
0431   1FAE FF FF FF FF 
0431   1FB2 FF FF FF FF 
0431   1FB6 FF FF FF FF 
0431   1FBA FF FF FF FF 
0431   1FBE FF FF FF FF 
0431   1FC2 FF FF FF FF 
0431   1FC6 FF FF FF FF 
0431   1FCA FF FF FF FF 
0431   1FCE FF FF FF FF 
0431   1FD2 FF FF FF FF 
0432   1FD6 FF FF FF FF transient_data:	.fill 512
0432   1FDA FF FF FF FF 
0432   1FDE FF FF FF FF 
0432   1FE2 FF FF FF FF 
0432   1FE6 FF FF FF FF 
0432   1FEA FF FF FF FF 
0432   1FEE FF FF FF FF 
0432   1FF2 FF FF FF FF 
0432   1FF6 FF FF FF FF 
0432   1FFA FF FF FF FF 
0432   1FFE FF FF FF FF 
0432   2002 FF FF FF FF 
0432   2006 FF FF FF FF 
0432   200A FF FF FF FF 
0432   200E FF FF FF FF 
0432   2012 FF FF FF FF 
0432   2016 FF FF FF FF 
0432   201A FF FF FF FF 
0432   201E FF FF FF FF 
0432   2022 FF FF FF FF 
0432   2026 FF FF FF FF 
0432   202A FF FF FF FF 
0432   202E FF FF FF FF 
0432   2032 FF FF FF FF 
0432   2036 FF FF FF FF 
0432   203A FF FF FF FF 
0432   203E FF FF FF FF 
0432   2042 FF FF FF FF 
0432   2046 FF FF FF FF 
0432   204A FF FF FF FF 
0432   204E FF FF FF FF 
0432   2052 FF FF FF FF 
0432   2056 FF FF FF FF 
0432   205A FF FF FF FF 
0432   205E FF FF FF FF 
0432   2062 FF FF FF FF 
0432   2066 FF FF FF FF 
0432   206A FF FF FF FF 
0432   206E FF FF FF FF 
0432   2072 FF FF FF FF 
0432   2076 FF FF FF FF 
0432   207A FF FF FF FF 
0432   207E FF FF FF FF 
0432   2082 FF FF FF FF 
0432   2086 FF FF FF FF 
0432   208A FF FF FF FF 
0432   208E FF FF FF FF 
0432   2092 FF FF FF FF 
0432   2096 FF FF FF FF 
0432   209A FF FF FF FF 
0432   209E FF FF FF FF 
0432   20A2 FF FF FF FF 
0432   20A6 FF FF FF FF 
0432   20AA FF FF FF FF 
0432   20AE FF FF FF FF 
0432   20B2 FF FF FF FF 
0432   20B6 FF FF FF FF 
0432   20BA FF FF FF FF 
0432   20BE FF FF FF FF 
0432   20C2 FF FF FF FF 
0432   20C6 FF FF FF FF 
0432   20CA FF FF FF FF 
0432   20CE FF FF FF FF 
0432   20D2 FF FF FF FF 
0432   20D6 FF FF FF FF 
0432   20DA FF FF FF FF 
0432   20DE FF FF FF FF 
0432   20E2 FF FF FF FF 
0432   20E6 FF FF FF FF 
0432   20EA FF FF FF FF 
0432   20EE FF FF FF FF 
0432   20F2 FF FF FF FF 
0432   20F6 FF FF FF FF 
0432   20FA FF FF FF FF 
0432   20FE FF FF FF FF 
0432   2102 FF FF FF FF 
0432   2106 FF FF FF FF 
0432   210A FF FF FF FF 
0432   210E FF FF FF FF 
0432   2112 FF FF FF FF 
0432   2116 FF FF FF FF 
0432   211A FF FF FF FF 
0432   211E FF FF FF FF 
0432   2122 FF FF FF FF 
0432   2126 FF FF FF FF 
0432   212A FF FF FF FF 
0432   212E FF FF FF FF 
0432   2132 FF FF FF FF 
0432   2136 FF FF FF FF 
0432   213A FF FF FF FF 
0432   213E FF FF FF FF 
0432   2142 FF FF FF FF 
0432   2146 FF FF FF FF 
0432   214A FF FF FF FF 
0432   214E FF FF FF FF 
0432   2152 FF FF FF FF 
0432   2156 FF FF FF FF 
0432   215A FF FF FF FF 
0432   215E FF FF FF FF 
0432   2162 FF FF FF FF 
0432   2166 FF FF FF FF 
0432   216A FF FF FF FF 
0432   216E FF FF FF FF 
0432   2172 FF FF FF FF 
0432   2176 FF FF FF FF 
0432   217A FF FF FF FF 
0432   217E FF FF FF FF 
0432   2182 FF FF FF FF 
0432   2186 FF FF FF FF 
0432   218A FF FF FF FF 
0432   218E FF FF FF FF 
0432   2192 FF FF FF FF 
0432   2196 FF FF FF FF 
0432   219A FF FF FF FF 
0432   219E FF FF FF FF 
0432   21A2 FF FF FF FF 
0432   21A6 FF FF FF FF 
0432   21AA FF FF FF FF 
0432   21AE FF FF FF FF 
0432   21B2 FF FF FF FF 
0432   21B6 FF FF FF FF 
0432   21BA FF FF FF FF 
0432   21BE FF FF FF FF 
0432   21C2 FF FF FF FF 
0432   21C6 FF FF FF FF 
0432   21CA FF FF FF FF 
0432   21CE FF FF FF FF 
0432   21D2 FF FF FF FF 
0433   21D6 00          text_buffer:	.db 0			
0434   21D7             
0435   21D7             .end
0436   21D7             
tasm: Number of errors = 0
