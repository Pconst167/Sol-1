0001   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_spawn_proc   .EQU  $0005
0007+  0000             sys_list         .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             text_org         .EQU  $0400
0002   0000             
0003   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004   0000             ;; cat /etc/sh.conf
0005   0000             ;; cat > test.txt
0006   0000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007   0000             
0008   0400             .org text_org			; origin at 1024
0009   0400             
0010   0400             cmd_cat:
0011   0400 10 00 00    	mov a, 0
0012   0403 42 7B 06    	mov [prog], a			; move tokennizer pointer to the beginning of the arguments area (address 0)
0013   0406 07 DC 04    	call get_token
0014   0409             
0015   0409 BC 7E 06 07 	cmp byte[tok], TOK_ANGLE
0016   040D C6 34 04    	je cmd_cat_write
0017   0410             cmd_cat_read:
0018   0410 07 62 06    	call _putback
0019   0413 07 85 04    	call get_path
0020   0416 3B 7F 06    	mov d, tokstr
0021   0419 FD 4F 8E 0B 	mov di, transient_area
0022   041D 19 14       	mov al, 20
0023   041F 05 04       	syscall sys_filesystem				; read textfile into shell buffer
0024   0421 3B 8E 0B    	mov d, transient_area
0025   0424 07 93 09    	call _puts					; print textfile to stdout
0026   0427 07 DC 04    	call get_token
0027   042A 1D 7E 06    	mov al, [tok]
0028   042D B9 14       	cmp al, TOK_END
0029   042F C7 10 04    	jne cmd_cat_read
0030   0432 05 0B       	syscall sys_terminate_proc
0031   0434             cmd_cat_write:
0032   0434 07 DC 04    	call get_token
0033   0437 FD 4D 7F 06 	mov si, tokstr
0034   043B FD 4F 8F 0B 	mov di, transient_area + 1
0035   043F 07 EB 07    	call _strcpy				; copy filename
0036   0442 3B 8E 0D    	mov d, transient_area + 512		; get text contents
0037   0445 07 F9 08    	call _gettxt
0038   0448 3B 8E 0B    	mov d, transient_area
0039   044B 19 05       	mov al, 5
0040   044D 05 04       	syscall sys_filesystem
0041   044F 05 0B       	syscall sys_terminate_proc
0042   0451             
0043   0451             
0044   0451             .include "lib/token.asm"
0001+  0451             TOKTYP_IDENTIFIER  .equ 0
0002+  0451             TOKTYP_KEYWORD     .equ 1
0003+  0451             TOKTYP_DELIMITER   .equ 2
0004+  0451             TOKTYP_STRING      .equ 3
0005+  0451             TOKTYP_CHAR        .equ 4
0006+  0451             TOKTYP_NUMERIC     .equ 5
0007+  0451             TOKTYP_END         .equ 6
0008+  0451             
0009+  0451             TOK_NULL           .equ 0
0010+  0451             TOK_FSLASH         .equ 1
0011+  0451             TOK_TIMES          .equ 2
0012+  0451             TOK_PLUS           .equ 3
0013+  0451             TOK_MINUS          .equ 4
0014+  0451             TOK_DOT            .equ 5
0015+  0451             TOK_SEMI           .equ 6
0016+  0451             TOK_ANGLE          .equ 7
0017+  0451             TOK_TILDE          .equ 8
0018+  0451             TOK_EQUAL          .equ 9
0019+  0451             TOK_COLON          .equ 10
0020+  0451             TOK_COMMA          .equ 11
0021+  0451             
0022+  0451             TOK_END            .equ 20
0023+  0451             
0024+  0451             
0025+  0451             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0451             ;; read a full command argment from shell input buffer
0027+  0451             ;; argument is written into tokstr
0028+  0451             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0029+  0451             get_arg:
0030+  0451 D7            push a
0031+  0452 E2            push si
0032+  0453 E3            push di
0033+  0454 19 00         mov al, 0
0034+  0456 3D 7F 06      mov [tokstr], al      ; nullify tokstr string
0035+  0459 14 7B 06      mov a, [prog]
0036+  045C 4D            mov si, a
0037+  045D FD 4F 7F 06   mov di, tokstr
0038+  0461             get_arg_skip_spaces:
0039+  0461 F6            lodsb
0040+  0462 07 67 0B      call _isspace
0041+  0465 C6 61 04      je get_arg_skip_spaces
0042+  0468             get_arg_L0:
0043+  0468 B9 3B         cmp al, $3B        ; check if is ';'
0044+  046A C6 77 04      je get_arg_end
0045+  046D B9 00         cmp al, 0
0046+  046F C6 77 04      je get_arg_end      ; check if end of input
0047+  0472 F7            stosb
0048+  0473 F6            lodsb
0049+  0474 0A 68 04      jmp get_arg_L0
0050+  0477             get_arg_end:
0051+  0477 19 00         mov al, 0
0052+  0479 F7            stosb
0053+  047A D5 01 00      sub si, 1
0054+  047D 4E            mov a, si
0055+  047E 42 7B 06      mov [prog], a    ; update pointer
0056+  0481 F0            pop di
0057+  0482 EF            pop si
0058+  0483 E4            pop a
0059+  0484 09            ret
0060+  0485             
0061+  0485             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062+  0485             ;; read a path formation from shell input buffer
0063+  0485             ;; path is written into tokstr
0064+  0485             ;; /usr/bin
0065+  0485             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0066+  0485             get_path:
0067+  0485 D7            push a
0068+  0486 E2            push si
0069+  0487 E3            push di
0070+  0488 19 00         mov al, 0
0071+  048A 3D 7F 06      mov [tokstr], al      ; nullify tokstr string
0072+  048D 14 7B 06      mov a, [prog]
0073+  0490 4D            mov si, a
0074+  0491 FD 4F 7F 06   mov di, tokstr
0075+  0495             get_path_skip_spaces:
0076+  0495 F6            lodsb
0077+  0496 07 67 0B      call _isspace
0078+  0499 C6 95 04      je get_path_skip_spaces
0079+  049C             get_path_is_pathchar:
0080+  049C F7            stosb
0081+  049D F6            lodsb
0082+  049E 07 F1 0A      call _isalnum      ;check if is alphanumeric
0083+  04A1 C6 9C 04      je get_path_is_pathchar
0084+  04A4 B9 2F         cmp al, '/'        ; check if is '/'
0085+  04A6 C6 9C 04      je get_path_is_pathchar
0086+  04A9 19 00         mov al, 0
0087+  04AB F7            stosb
0088+  04AC D5 01 00      sub si, 1
0089+  04AF 4E            mov a, si
0090+  04B0 42 7B 06      mov [prog], a    ; update pointer
0091+  04B3             get_path_end:
0092+  04B3 F0            pop di
0093+  04B4 EF            pop si
0094+  04B5 E4            pop a
0095+  04B6 09            ret
0096+  04B7             
0097+  04B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0098+  04B7             ;; read a line
0099+  04B7             ;; line is written into tokstr
0100+  04B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0101+  04B7             get_line:
0102+  04B7 D7            push a
0103+  04B8 E2            push si
0104+  04B9 E3            push di
0105+  04BA 19 00         mov al, 0
0106+  04BC 3D 7F 06      mov [tokstr], al      ; nullify tokstr string
0107+  04BF 14 7B 06      mov a, [prog]
0108+  04C2 4D            mov si, a
0109+  04C3 FD 4F 7F 06   mov di, tokstr
0110+  04C7             get_line_L0:
0111+  04C7 F6            lodsb
0112+  04C8 B9 0A         cmp al, $0A    ; check for new line
0113+  04CA C6 D1 04      je get_line_exit
0114+  04CD F7            stosb
0115+  04CE 0A C7 04      jmp get_line_L0
0116+  04D1             get_line_exit:
0117+  04D1 19 00         mov al, 0
0118+  04D3 F7            stosb
0119+  04D4 4E            mov a, si
0120+  04D5 42 7B 06      mov [prog], a    ; update pointer
0121+  04D8 F0            pop di
0122+  04D9 EF            pop si
0123+  04DA E4            pop a
0124+  04DB 09            ret
0125+  04DC             
0126+  04DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0127+  04DC             ;; token parser
0128+  04DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0129+  04DC             get_token:
0130+  04DC D7            push a
0131+  04DD DA            push d
0132+  04DE E2            push si
0133+  04DF E3            push di
0134+  04E0 19 00         mov al, 0
0135+  04E2 3D 7F 06      mov [tokstr], al      ; nullify tokstr string
0136+  04E5 19 00         mov al, TOK_NULL
0137+  04E7 3D 7E 06      mov [tok], al        ; nullify token
0138+  04EA 14 7B 06      mov a, [prog]
0139+  04ED 4D            mov si, a
0140+  04EE FD 4F 7F 06   mov di, tokstr
0141+  04F2             get_tok_skip_spaces:
0142+  04F2 F6            lodsb
0143+  04F3 07 67 0B      call _isspace
0144+  04F6 C6 F2 04      je get_tok_skip_spaces
0145+  04F9 B9 00         cmp al, 0      ; check for end of input (NULL)
0146+  04FB C6 E0 05      je get_token_end
0147+  04FE B9 23         cmp al, '#'      ; comments!
0148+  0500 C6 0E 06      je get_tok_comment
0149+  0503 07 F1 0A      call _isalnum
0150+  0506 C6 ED 05      jz is_alphanumeric
0151+  0509             ; other token types
0152+  0509             get_token_slash:
0153+  0509 B9 2F         cmp al, '/'        ; check if '/'
0154+  050B C7 23 05      jne get_token_minus
0155+  050E F7            stosb          ; store '/' into token string
0156+  050F 19 00         mov al, 0
0157+  0511 F7            stosb          ; terminate token string
0158+  0512 19 01         mov al, TOK_FSLASH
0159+  0514 3D 7E 06      mov [tok], al      
0160+  0517 19 02         mov al, TOKTYP_DELIMITER
0161+  0519 3D 7D 06      mov [toktyp], al
0162+  051C 4E            mov a, si
0163+  051D 42 7B 06      mov [prog], a    ; update pointer
0164+  0520 0A 09 06      jmp get_token_return
0165+  0523             get_token_minus:
0166+  0523 B9 2D         cmp al, '-'        ; check if '-'
0167+  0525 C7 3D 05      jne get_token_comma
0168+  0528 F7            stosb          ; store '-' into token string
0169+  0529 19 00         mov al, 0
0170+  052B F7            stosb          ; terminate token string
0171+  052C 19 04         mov al, TOK_MINUS
0172+  052E 3D 7E 06      mov [tok], al      
0173+  0531 19 02         mov al, TOKTYP_DELIMITER
0174+  0533 3D 7D 06      mov [toktyp], al
0175+  0536 4E            mov a, si
0176+  0537 42 7B 06      mov [prog], a    ; update pointer
0177+  053A 0A 09 06      jmp get_token_return
0178+  053D             get_token_comma:
0179+  053D B9 2C         cmp al, ','        ; check if ','
0180+  053F C7 57 05      jne get_token_semi
0181+  0542 F7            stosb          ; store ',' into token string
0182+  0543 19 00         mov al, 0
0183+  0545 F7            stosb          ; terminate token string
0184+  0546 19 0B         mov al, TOK_COMMA
0185+  0548 3D 7E 06      mov [tok], al      
0186+  054B 19 02         mov al, TOKTYP_DELIMITER
0187+  054D 3D 7D 06      mov [toktyp], al
0188+  0550 4E            mov a, si
0189+  0551 42 7B 06      mov [prog], a    ; update pointer
0190+  0554 0A 09 06      jmp get_token_return
0191+  0557             get_token_semi:
0192+  0557 B9 3B         cmp al, $3B        ; check if ';'
0193+  0559 C7 71 05      jne get_token_colon
0194+  055C F7            stosb          ; store ';' into token string
0195+  055D 19 00         mov al, 0
0196+  055F F7            stosb          ; terminate token string
0197+  0560 19 06         mov al, TOK_SEMI
0198+  0562 3D 7E 06      mov [tok], al      
0199+  0565 19 02         mov al, TOKTYP_DELIMITER
0200+  0567 3D 7D 06      mov [toktyp], al
0201+  056A 4E            mov a, si
0202+  056B 42 7B 06      mov [prog], a    ; update pointer
0203+  056E 0A 09 06      jmp get_token_return
0204+  0571             get_token_colon:
0205+  0571 B9 3A         cmp al, $3A        ; check if ':'
0206+  0573 C7 8B 05      jne get_token_angle
0207+  0576 F7            stosb          ; store ':' into token string
0208+  0577 19 00         mov al, 0
0209+  0579 F7            stosb          ; terminate token string
0210+  057A 19 0A         mov al, TOK_COLON
0211+  057C 3D 7E 06      mov [tok], al      
0212+  057F 19 02         mov al, TOKTYP_DELIMITER
0213+  0581 3D 7D 06      mov [toktyp], al
0214+  0584 4E            mov a, si
0215+  0585 42 7B 06      mov [prog], a    ; update pointer
0216+  0588 0A 09 06      jmp get_token_return
0217+  058B             get_token_angle:
0218+  058B B9 3E         cmp al, $3E        ; check if '>'
0219+  058D C7 A5 05      jne get_token_tilde
0220+  0590 F7            stosb          ; store '>' into token string
0221+  0591 19 00         mov al, 0
0222+  0593 F7            stosb          ; terminate token string
0223+  0594 19 07         mov al, TOK_ANGLE
0224+  0596 3D 7E 06      mov [tok], al      
0225+  0599 19 02         mov al, TOKTYP_DELIMITER
0226+  059B 3D 7D 06      mov [toktyp], al
0227+  059E 4E            mov a, si
0228+  059F 42 7B 06      mov [prog], a    ; update pointer
0229+  05A2 0A 09 06      jmp get_token_return
0230+  05A5             get_token_tilde:
0231+  05A5 B9 7E         cmp al, '~'        ; check if '~'
0232+  05A7 C7 BF 05      jne get_token_equal
0233+  05AA F7            stosb          ; store '~' into token string
0234+  05AB 19 00         mov al, 0
0235+  05AD F7            stosb          ; terminate token string
0236+  05AE 19 08         mov al, TOK_TILDE
0237+  05B0 3D 7E 06      mov [tok], al      
0238+  05B3 19 02         mov al, TOKTYP_DELIMITER
0239+  05B5 3D 7D 06      mov [toktyp], al
0240+  05B8 4E            mov a, si
0241+  05B9 42 7B 06      mov [prog], a    ; update pointer
0242+  05BC 0A 09 06      jmp get_token_return
0243+  05BF             get_token_equal:
0244+  05BF B9 3D         cmp al, '='        ; check if '='
0245+  05C1 C7 D9 05      jne get_token_skip
0246+  05C4 F7            stosb          ; store '=' into token string
0247+  05C5 19 00         mov al, 0
0248+  05C7 F7            stosb          ; terminate token string
0249+  05C8 19 09         mov al, TOK_EQUAL
0250+  05CA 3D 7E 06      mov [tok], al      
0251+  05CD 19 02         mov al, TOKTYP_DELIMITER
0252+  05CF 3D 7D 06      mov [toktyp], al
0253+  05D2 4E            mov a, si
0254+  05D3 42 7B 06      mov [prog], a    ; update pointer
0255+  05D6 0A 09 06      jmp get_token_return
0256+  05D9             get_token_skip:
0257+  05D9 4E            mov a, si
0258+  05DA 42 7B 06      mov [prog], a    ; update pointer
0259+  05DD 0A 09 06      jmp get_token_return
0260+  05E0             get_token_end:        ; end of file token
0261+  05E0 19 14         mov al, TOK_END
0262+  05E2 3D 7E 06      mov [tok], al
0263+  05E5 19 06         mov al, TOKTYP_END
0264+  05E7 3D 7D 06      mov [toktyp], al
0265+  05EA 0A 09 06      jmp get_token_return
0266+  05ED             is_alphanumeric:
0267+  05ED F7            stosb
0268+  05EE F6            lodsb
0269+  05EF 07 F1 0A      call _isalnum      ;check if is alphanumeric
0270+  05F2 C6 ED 05      jz is_alphanumeric
0271+  05F5 B9 2E         cmp al, $2E        ; check if is '.'
0272+  05F7 C6 ED 05      je is_alphanumeric
0273+  05FA 19 00         mov al, 0
0274+  05FC F7            stosb
0275+  05FD 19 00         mov al, TOKTYP_IDENTIFIER
0276+  05FF 3D 7D 06      mov [toktyp], al
0277+  0602 D5 01 00      sub si, 1
0278+  0605 4E            mov a, si
0279+  0606 42 7B 06      mov [prog], a    ; update pointer
0280+  0609             get_token_return:
0281+  0609 F0            pop di
0282+  060A EF            pop si
0283+  060B E7            pop d
0284+  060C E4            pop a
0285+  060D 09            ret
0286+  060E             get_tok_comment:
0287+  060E F6            lodsb
0288+  060F B9 0A         cmp al, $0A      ; new line
0289+  0611 C7 0E 06      jne get_tok_comment
0290+  0614 0A F2 04      jmp get_tok_skip_spaces
0291+  0617             
0292+  0617             
0293+  0617             get_number:
0294+  0617 D7            push a
0295+  0618 DA            push d
0296+  0619 E2            push si
0297+  061A E3            push di
0298+  061B 19 00         mov al, 0
0299+  061D 3D 7F 06      mov [tokstr], al      ; nullify tokstr string
0300+  0620 19 00         mov al, TOK_NULL
0301+  0622 3D 7E 06      mov [tok], al        ; nullify token
0302+  0625 14 7B 06      mov a, [prog]
0303+  0628 4D            mov si, a
0304+  0629 FD 4F 7F 06   mov di, tokstr
0305+  062D             get_number_skip_spaces:
0306+  062D F6            lodsb
0307+  062E 07 67 0B      call _isspace
0308+  0631 C6 2D 06      je get_number_skip_spaces
0309+  0634 B9 00         cmp al, 0      ; check for end of input (NULL)
0310+  0636 C7 46 06      jne get_number_L0
0311+  0639 19 14         mov al, TOK_END
0312+  063B 3D 7E 06      mov [tok], al
0313+  063E 19 06         mov al, TOKTYP_END
0314+  0640 3D 7D 06      mov [toktyp], al
0315+  0643 0A 5D 06      jmp get_number_return
0316+  0646             get_number_L0:
0317+  0646 F7            stosb
0318+  0647 F6            lodsb
0319+  0648 07 FB 0A      call _isdigit      ;check if is numeric
0320+  064B C6 46 06      jz get_number_L0
0321+  064E 19 00         mov al, 0
0322+  0650 F7            stosb
0323+  0651 19 05         mov al, TOKTYP_NUMERIC
0324+  0653 3D 7D 06      mov [toktyp], al
0325+  0656 D5 01 00      sub si, 1
0326+  0659 4E            mov a, si
0327+  065A 42 7B 06      mov [prog], a    ; update pointer
0328+  065D             get_number_return:
0329+  065D F0            pop di
0330+  065E EF            pop si
0331+  065F E7            pop d
0332+  0660 E4            pop a
0333+  0661 09            ret
0334+  0662             
0335+  0662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0336+  0662             ;; PUT BACK TOKEN
0337+  0662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0338+  0662             _putback:
0339+  0662 D7            push a
0340+  0663 E2            push si
0341+  0664 FD 4D 7F 06   mov si, tokstr  
0342+  0668             _putback_loop:
0343+  0668 F6            lodsb
0344+  0669 B9 00         cmp al, 0
0345+  066B C6 78 06      je _putback_end
0346+  066E 14 7B 06      mov a, [prog]
0347+  0671 7D            dec a
0348+  0672 42 7B 06      mov [prog], a      ; update pointer
0349+  0675 0A 68 06      jmp _putback_loop
0350+  0678             _putback_end:
0351+  0678 EF            pop si
0352+  0679 E4            pop a
0353+  067A 09            ret
0354+  067B             
0355+  067B             
0356+  067B             
0357+  067B             
0358+  067B 00 00       prog:      .dw 0          ; pointer to current position in buffer
0359+  067D             
0360+  067D 00          toktyp:    .db 0          ; token type symbol
0361+  067E 00          tok:       .db 0          ; current token symbol
0362+  067F 00 00 00 00 tokstr:    .fill 256, 0   ; token as a string
0362+  0683 00 00 00 00 
0362+  0687 00 00 00 00 
0362+  068B 00 00 00 00 
0362+  068F 00 00 00 00 
0362+  0693 00 00 00 00 
0362+  0697 00 00 00 00 
0362+  069B 00 00 00 00 
0362+  069F 00 00 00 00 
0362+  06A3 00 00 00 00 
0362+  06A7 00 00 00 00 
0362+  06AB 00 00 00 00 
0362+  06AF 00 00 00 00 
0362+  06B3 00 00 00 00 
0362+  06B7 00 00 00 00 
0362+  06BB 00 00 00 00 
0362+  06BF 00 00 00 00 
0362+  06C3 00 00 00 00 
0362+  06C7 00 00 00 00 
0362+  06CB 00 00 00 00 
0362+  06CF 00 00 00 00 
0362+  06D3 00 00 00 00 
0362+  06D7 00 00 00 00 
0362+  06DB 00 00 00 00 
0362+  06DF 00 00 00 00 
0362+  06E3 00 00 00 00 
0362+  06E7 00 00 00 00 
0362+  06EB 00 00 00 00 
0362+  06EF 00 00 00 00 
0362+  06F3 00 00 00 00 
0362+  06F7 00 00 00 00 
0362+  06FB 00 00 00 00 
0362+  06FF 00 00 00 00 
0362+  0703 00 00 00 00 
0362+  0707 00 00 00 00 
0362+  070B 00 00 00 00 
0362+  070F 00 00 00 00 
0362+  0713 00 00 00 00 
0362+  0717 00 00 00 00 
0362+  071B 00 00 00 00 
0362+  071F 00 00 00 00 
0362+  0723 00 00 00 00 
0362+  0727 00 00 00 00 
0362+  072B 00 00 00 00 
0362+  072F 00 00 00 00 
0362+  0733 00 00 00 00 
0362+  0737 00 00 00 00 
0362+  073B 00 00 00 00 
0362+  073F 00 00 00 00 
0362+  0743 00 00 00 00 
0362+  0747 00 00 00 00 
0362+  074B 00 00 00 00 
0362+  074F 00 00 00 00 
0362+  0753 00 00 00 00 
0362+  0757 00 00 00 00 
0362+  075B 00 00 00 00 
0362+  075F 00 00 00 00 
0362+  0763 00 00 00 00 
0362+  0767 00 00 00 00 
0362+  076B 00 00 00 00 
0362+  076F 00 00 00 00 
0362+  0773 00 00 00 00 
0362+  0777 00 00 00 00 
0362+  077B 00 00 00 00 
0045   077F             .include "lib/stdio.asm"
0001+  077F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  077F             ; stdio.s
0003+  077F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  077F             .include "lib/string.asm"
0001++ 077F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 077F             ; string.s
0003++ 077F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 077F             
0005++ 077F             
0006++ 077F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 077F             ; _strrev
0008++ 077F             ; reverse a string
0009++ 077F             ; D = string address
0010++ 077F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 077F             ; 01234
0012++ 077F             _strrev:
0013++ 077F 4B          	pusha
0014++ 0780 07 C6 07    	call _strlen	; length in C
0015++ 0783 12          	mov a, c
0016++ 0784 AF 01 00    	cmp a, 1
0017++ 0787 D0 A1 07    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 078A 7D          	dec a
0019++ 078B FD 4E       	mov si, d	; beginning of string
0020++ 078D FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 078F 59          	add d, a	; end of string
0022++ 0790 12          	mov a, c
0023++ 0791 FD 9B       	shr a		; divide by 2
0024++ 0793 39          	mov c, a	; C now counts the steps
0025++ 0794             _strrev_L0:
0026++ 0794 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0795 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0796 3E          	mov [d], al	; store left char into right side
0029++ 0797 1B          	mov al, bl
0030++ 0798 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0799 7E          	dec c
0032++ 079A 7F          	dec d
0033++ 079B C2 00 00    	cmp c, 0
0034++ 079E C7 94 07    	jne _strrev_L0
0035++ 07A1             _strrev_end:
0036++ 07A1 4C          	popa
0037++ 07A2 09          	ret
0038++ 07A3             	
0039++ 07A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 07A3             ; _strchr
0041++ 07A3             ; search string in D for char in AL
0042++ 07A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 07A3             _strchr:
0044++ 07A3             _strchr_L0:
0045++ 07A3 32          	mov bl, [d]
0046++ 07A4 C1 00       	cmp bl, 0
0047++ 07A6 C6 B1 07    	je _strchr_end
0048++ 07A9 BA          	cmp al, bl
0049++ 07AA C6 B1 07    	je _strchr_end
0050++ 07AD 79          	inc d
0051++ 07AE 0A A3 07    	jmp _strchr_L0
0052++ 07B1             _strchr_end:
0053++ 07B1 1B          	mov al, bl
0054++ 07B2 09          	ret
0055++ 07B3             
0056++ 07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 07B3             ; _strstr
0058++ 07B3             ; find sub-string
0059++ 07B3             ; str1 in SI
0060++ 07B3             ; str2 in DI
0061++ 07B3             ; SI points to end of source string
0062++ 07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 07B3             _strstr:
0064++ 07B3 DB          	push al
0065++ 07B4 DA          	push d
0066++ 07B5 E3          	push di
0067++ 07B6             _strstr_loop:
0068++ 07B6 F3          	cmpsb					; compare a byte of the strings
0069++ 07B7 C7 C2 07    	jne _strstr_ret
0070++ 07BA FC 00 00    	lea d, [di + 0]
0071++ 07BD BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 07BF C7 B6 07    	jne _strstr_loop				; equal chars but not at end
0073++ 07C2             _strstr_ret:
0074++ 07C2 F0          	pop di
0075++ 07C3 E7          	pop d
0076++ 07C4 E8          	pop al
0077++ 07C5 09          	ret
0078++ 07C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 07C6             ; length of null terminated string
0080++ 07C6             ; result in C
0081++ 07C6             ; pointer in D
0082++ 07C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 07C6             _strlen:
0084++ 07C6 DA          	push d
0085++ 07C7 38 00 00    	mov c, 0
0086++ 07CA             _strlen_L1:
0087++ 07CA BD 00       	cmp byte [d], 0
0088++ 07CC C6 D4 07    	je _strlen_ret
0089++ 07CF 79          	inc d
0090++ 07D0 78          	inc c
0091++ 07D1 0A CA 07    	jmp _strlen_L1
0092++ 07D4             _strlen_ret:
0093++ 07D4 E7          	pop d
0094++ 07D5 09          	ret
0095++ 07D6             
0096++ 07D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 07D6             ; STRCMP
0098++ 07D6             ; compare two strings
0099++ 07D6             ; str1 in SI
0100++ 07D6             ; str2 in DI
0101++ 07D6             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 07D6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 07D6             _strcmp:
0104++ 07D6 DB          	push al
0105++ 07D7 DA          	push d
0106++ 07D8 E3          	push di
0107++ 07D9 E2          	push si
0108++ 07DA             _strcmp_loop:
0109++ 07DA F3          	cmpsb					; compare a byte of the strings
0110++ 07DB C7 E6 07    	jne _strcmp_ret
0111++ 07DE FB FF FF    	lea d, [si +- 1]
0112++ 07E1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 07E3 C7 DA 07    	jne _strcmp_loop				; equal chars but not at end
0114++ 07E6             _strcmp_ret:
0115++ 07E6 EF          	pop si
0116++ 07E7 F0          	pop di
0117++ 07E8 E7          	pop d
0118++ 07E9 E8          	pop al
0119++ 07EA 09          	ret
0120++ 07EB             
0121++ 07EB             
0122++ 07EB             ; STRCPY
0123++ 07EB             ; copy null terminated string from SI to DI
0124++ 07EB             ; source in SI
0125++ 07EB             ; destination in DI
0126++ 07EB             _strcpy:
0127++ 07EB E2          	push si
0128++ 07EC E3          	push di
0129++ 07ED DB          	push al
0130++ 07EE             _strcpy_L1:
0131++ 07EE F6          	lodsb
0132++ 07EF F7          	stosb
0133++ 07F0 B9 00       	cmp al, 0
0134++ 07F2 C7 EE 07    	jne _strcpy_L1
0135++ 07F5             _strcpy_end:
0136++ 07F5 E8          	pop al
0137++ 07F6 F0          	pop di
0138++ 07F7 EF          	pop si
0139++ 07F8 09          	ret
0140++ 07F9             
0141++ 07F9             ; STRCAT
0142++ 07F9             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 07F9             ; source in SI
0144++ 07F9             ; destination in DI
0145++ 07F9             _strcat:
0146++ 07F9 E2          	push si
0147++ 07FA E3          	push di
0148++ 07FB D7          	push a
0149++ 07FC DA          	push d
0150++ 07FD 50          	mov a, di
0151++ 07FE 3C          	mov d, a
0152++ 07FF             _strcat_goto_end_L1:
0153++ 07FF BD 00       	cmp byte[d], 0
0154++ 0801 C6 08 08    	je _strcat_start
0155++ 0804 79          	inc d
0156++ 0805 0A FF 07    	jmp _strcat_goto_end_L1
0157++ 0808             _strcat_start:
0158++ 0808 FD 50       	mov di, d
0159++ 080A             _strcat_L1:
0160++ 080A F6          	lodsb
0161++ 080B F7          	stosb
0162++ 080C B9 00       	cmp al, 0
0163++ 080E C7 0A 08    	jne _strcat_L1
0164++ 0811             _strcat_end:
0165++ 0811 E7          	pop d
0166++ 0812 E4          	pop a
0167++ 0813 F0          	pop di
0168++ 0814 EF          	pop si
0169++ 0815 09          	ret
0170++ 0816             
0171++ 0816             
0005+  0816             
0006+  0816             
0007+  0816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  0816             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  0816             ; ASCII in BL
0010+  0816             ; result in AL
0011+  0816             ; ascii for F = 0100 0110
0012+  0816             ; ascii for 9 = 0011 1001
0013+  0816             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  0816             hex_ascii_encode:
0015+  0816 1B            mov al, bl
0016+  0817 93 40         test al, $40        ; test if letter or number
0017+  0819 C7 1F 08      jnz hex_letter
0018+  081C 87 0F         and al, $0F        ; get number
0019+  081E 09            ret
0020+  081F             hex_letter:
0021+  081F 87 0F         and al, $0F        ; get letter
0022+  0821 6A 09         add al, 9
0023+  0823 09            ret
0024+  0824             
0025+  0824             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0824             ; ATOI
0027+  0824             ; 2 letter hex string in B
0028+  0824             ; 8bit integer returned in AL
0029+  0824             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  0824             _atoi:
0031+  0824 D8            push b
0032+  0825 07 16 08      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  0828 30            mov bl, bh
0034+  0829 DB            push al          ; save a
0035+  082A 07 16 08      call hex_ascii_encode
0036+  082D EA            pop bl  
0037+  082E FD 9E 04      shl al, 4
0038+  0831 8C            or al, bl
0039+  0832 E5            pop b
0040+  0833 09            ret  
0041+  0834             
0042+  0834             
0043+  0834             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0834             ; scanf
0045+  0834             ; no need for explanations!
0046+  0834             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0834             scanf:
0048+  0834 09            ret
0049+  0835             
0050+  0835             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0835             ; ITOA
0052+  0835             ; 8bit value in BL
0053+  0835             ; 2 byte ASCII result in A
0054+  0835             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0835             _itoa:
0056+  0835 DA            push d
0057+  0836 D8            push b
0058+  0837 A7 00         mov bh, 0
0059+  0839 FD A4 04      shr bl, 4  
0060+  083C 74            mov d, b
0061+  083D 1F CF 0A      mov al, [d + s_hex_digits]
0062+  0840 23            mov ah, al
0063+  0841               
0064+  0841 E5            pop b
0065+  0842 D8            push b
0066+  0843 A7 00         mov bh, 0
0067+  0845 FD 87 0F      and bl, $0F
0068+  0848 74            mov d, b
0069+  0849 1F CF 0A      mov al, [d + s_hex_digits]
0070+  084C E5            pop b
0071+  084D E7            pop d
0072+  084E 09            ret
0073+  084F             
0074+  084F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  084F             ; HEX STRING TO BINARY
0076+  084F             ; di = destination address
0077+  084F             ; si = source
0078+  084F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  084F             _hex_to_int:
0080+  084F             _hex_to_int_L1:
0081+  084F F6            lodsb          ; load from [SI] to AL
0082+  0850 B9 00         cmp al, 0        ; check if ASCII 0
0083+  0852 C6 5F 08      jz _hex_to_int_ret
0084+  0855 36            mov bh, al
0085+  0856 F6            lodsb
0086+  0857 2F            mov bl, al
0087+  0858 07 24 08      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  085B F7            stosb          ; store AL to [DI]
0089+  085C 0A 4F 08      jmp _hex_to_int_L1
0090+  085F             _hex_to_int_ret:
0091+  085F 09            ret    
0092+  0860             
0093+  0860             
0094+  0860             
0095+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0860             ; GETCHAR
0097+  0860             ; char in ah
0098+  0860             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0860             getch:
0100+  0860 DB            push al
0101+  0861             getch_retry:
0102+  0861 19 01         mov al, 1
0103+  0863 05 03         syscall sys_io      ; receive in AH
0104+  0865 E8            pop al
0105+  0866 09            ret
0106+  0867             
0107+  0867             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0867             ; PUTCHAR
0109+  0867             ; char in ah
0110+  0867             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0867             _putchar:
0112+  0867 DB            push al
0113+  0868 19 00         mov al, 0
0114+  086A 05 03         syscall sys_io      ; char in AH
0115+  086C E8            pop al
0116+  086D 09            ret
0117+  086E             
0118+  086E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  086E             ;; INPUT A STRING
0120+  086E             ;; terminates with null
0121+  086E             ;; pointer in D
0122+  086E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  086E             _gets:
0124+  086E D7            push a
0125+  086F DA            push d
0126+  0870             _gets_loop:
0127+  0870 19 01         mov al, 1
0128+  0872 05 03         syscall sys_io      ; receive in AH
0129+  0874 76 1B         cmp ah, 27
0130+  0876 C6 97 08      je _gets_ansi_esc
0131+  0879 76 0A         cmp ah, $0A        ; LF
0132+  087B C6 F3 08      je _gets_end
0133+  087E 76 0D         cmp ah, $0D        ; CR
0134+  0880 C6 F3 08      je _gets_end
0135+  0883 76 5C         cmp ah, $5C        ; '\\'
0136+  0885 C6 B9 08      je _gets_escape
0137+  0888 76 08         cmp ah, $08      ; check for backspace
0138+  088A C6 93 08      je _gets_backspace
0139+  088D 1A            mov al, ah
0140+  088E 3E            mov [d], al
0141+  088F 79            inc d
0142+  0890 0A 70 08      jmp _gets_loop
0143+  0893             _gets_backspace:
0144+  0893 7F            dec d
0145+  0894 0A 70 08      jmp _gets_loop
0146+  0897             _gets_ansi_esc:
0147+  0897 19 01         mov al, 1
0148+  0899 05 03         syscall sys_io        ; receive in AH without echo
0149+  089B 76 5B         cmp ah, '['
0150+  089D C7 70 08      jne _gets_loop
0151+  08A0 19 01         mov al, 1
0152+  08A2 05 03         syscall sys_io          ; receive in AH without echo
0153+  08A4 76 44         cmp ah, 'D'
0154+  08A6 C6 B1 08      je _gets_left_arrow
0155+  08A9 76 43         cmp ah, 'C'
0156+  08AB C6 B5 08      je _gets_right_arrow
0157+  08AE 0A 70 08      jmp _gets_loop
0158+  08B1             _gets_left_arrow:
0159+  08B1 7F            dec d
0160+  08B2 0A 70 08      jmp _gets_loop
0161+  08B5             _gets_right_arrow:
0162+  08B5 79            inc d
0163+  08B6 0A 70 08      jmp _gets_loop
0164+  08B9             _gets_escape:
0165+  08B9 19 01         mov al, 1
0166+  08BB 05 03         syscall sys_io      ; receive in AH
0167+  08BD 76 6E         cmp ah, 'n'
0168+  08BF C6 DE 08      je _gets_LF
0169+  08C2 76 72         cmp ah, 'r'
0170+  08C4 C6 E5 08      je _gets_CR
0171+  08C7 76 30         cmp ah, '0'
0172+  08C9 C6 EC 08      je _gets_NULL
0173+  08CC 76 5C         cmp ah, $5C  ; '\'
0174+  08CE C6 D7 08      je _gets_slash
0175+  08D1 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  08D2 3E            mov [d], al
0177+  08D3 79            inc d
0178+  08D4 0A 70 08      jmp _gets_loop
0179+  08D7             _gets_slash:
0180+  08D7 19 5C         mov al, $5C
0181+  08D9 3E            mov [d], al
0182+  08DA 79            inc d
0183+  08DB 0A 70 08      jmp _gets_loop
0184+  08DE             _gets_LF:
0185+  08DE 19 0A         mov al, $0A
0186+  08E0 3E            mov [d], al
0187+  08E1 79            inc d
0188+  08E2 0A 70 08      jmp _gets_loop
0189+  08E5             _gets_CR:
0190+  08E5 19 0D         mov al, $0D
0191+  08E7 3E            mov [d], al
0192+  08E8 79            inc d
0193+  08E9 0A 70 08      jmp _gets_loop
0194+  08EC             _gets_NULL:
0195+  08EC 19 00         mov al, $00
0196+  08EE 3E            mov [d], al
0197+  08EF 79            inc d
0198+  08F0 0A 70 08      jmp _gets_loop
0199+  08F3             _gets_end:
0200+  08F3 19 00         mov al, 0
0201+  08F5 3E            mov [d], al        ; terminate string
0202+  08F6 E7            pop d
0203+  08F7 E4            pop a
0204+  08F8 09            ret
0205+  08F9             
0206+  08F9             
0207+  08F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  08F9             ;; INPUT TEXT
0209+  08F9             ;; terminated with CTRL+D
0210+  08F9             ;; pointer in D
0211+  08F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  08F9             _gettxt:
0213+  08F9 D7            push a
0214+  08FA DA            push d
0215+  08FB             _gettxt_loop:
0216+  08FB 19 01         mov al, 1
0217+  08FD 05 03         syscall sys_io      ; receive in AH
0218+  08FF 76 04         cmp ah, 4      ; EOT
0219+  0901 C6 3A 09      je _gettxt_end
0220+  0904 76 08         cmp ah, $08      ; check for backspace
0221+  0906 C6 36 09      je _gettxt_backspace
0222+  0909 76 5C         cmp ah, $5C        ; '\'
0223+  090B C6 14 09      je _gettxt_escape
0224+  090E 1A            mov al, ah
0225+  090F 3E            mov [d], al
0226+  0910 79            inc d
0227+  0911 0A FB 08      jmp _gettxt_loop
0228+  0914             _gettxt_escape:
0229+  0914 19 01         mov al, 1
0230+  0916 05 03         syscall sys_io      ; receive in AH
0231+  0918 76 6E         cmp ah, 'n'
0232+  091A C6 28 09      je _gettxt_LF
0233+  091D 76 72         cmp ah, 'r'
0234+  091F C6 2F 09      je _gettxt_CR
0235+  0922 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  0923 3E            mov [d], al
0237+  0924 79            inc d
0238+  0925 0A FB 08      jmp _gettxt_loop
0239+  0928             _gettxt_LF:
0240+  0928 19 0A         mov al, $0A
0241+  092A 3E            mov [d], al
0242+  092B 79            inc d
0243+  092C 0A FB 08      jmp _gettxt_loop
0244+  092F             _gettxt_CR:
0245+  092F 19 0D         mov al, $0D
0246+  0931 3E            mov [d], al
0247+  0932 79            inc d
0248+  0933 0A FB 08      jmp _gettxt_loop
0249+  0936             _gettxt_backspace:
0250+  0936 7F            dec d
0251+  0937 0A FB 08      jmp _gettxt_loop
0252+  093A             _gettxt_end:
0253+  093A 19 00         mov al, 0
0254+  093C 3E            mov [d], al        ; terminate string
0255+  093D E7            pop d
0256+  093E E4            pop a
0257+  093F 09            ret
0258+  0940             
0259+  0940             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  0940             ; PRINT NEW LINE
0261+  0940             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  0940             printnl:
0263+  0940 D7            push a
0264+  0941 10 00 0A      mov a, $0A00
0265+  0944 05 03         syscall sys_io
0266+  0946 10 00 0D      mov a, $0D00
0267+  0949 05 03         syscall sys_io
0268+  094B E4            pop a
0269+  094C 09            ret
0270+  094D             
0271+  094D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  094D             ; _strtoint
0273+  094D             ; 4 digit hex string number in d
0274+  094D             ; integer returned in A
0275+  094D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  094D             _strtointx:
0277+  094D D8            push b
0278+  094E 32            mov bl, [d]
0279+  094F 37            mov bh, bl
0280+  0950 33 01 00      mov bl, [d + 1]
0281+  0953 07 24 08      call _atoi        ; convert to int in AL
0282+  0956 23            mov ah, al        ; move to AH
0283+  0957 33 02 00      mov bl, [d + 2]
0284+  095A 37            mov bh, bl
0285+  095B 33 03 00      mov bl, [d + 3]
0286+  095E 07 24 08      call _atoi        ; convert to int in AL
0287+  0961 E5            pop b
0288+  0962 09            ret
0289+  0963             
0290+  0963             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  0963             ; _strtoint
0292+  0963             ; 5 digit base10 string number in d
0293+  0963             ; integer returned in A
0294+  0963             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  0963             _strtoint:
0296+  0963 E2            push si
0297+  0964 D8            push b
0298+  0965 D9            push c
0299+  0966 DA            push d
0300+  0967 07 C6 07      call _strlen      ; get string length in C
0301+  096A 7E            dec c
0302+  096B FD 4E         mov si, d
0303+  096D 12            mov a, c
0304+  096E FD 99         shl a
0305+  0970 3B E7 0A      mov d, table_power
0306+  0973 59            add d, a
0307+  0974 38 00 00      mov c, 0
0308+  0977             _strtoint_L0:
0309+  0977 F6            lodsb      ; load ASCII to al
0310+  0978 B9 00         cmp al, 0
0311+  097A C6 8D 09      je _strtoint_end
0312+  097D 6F 30         sub al, $30    ; make into integer
0313+  097F 22 00         mov ah, 0
0314+  0981 2A            mov b, [d]
0315+  0982 AC            mul a, b      ; result in B since it fits in 16bits
0316+  0983 11            mov a, b
0317+  0984 28            mov b, c
0318+  0985 54            add a, b
0319+  0986 39            mov c, a
0320+  0987 63 02 00      sub d, 2
0321+  098A 0A 77 09      jmp _strtoint_L0
0322+  098D             _strtoint_end:
0323+  098D 12            mov a, c
0324+  098E E7            pop d
0325+  098F E6            pop c
0326+  0990 E5            pop b
0327+  0991 EF            pop si
0328+  0992 09            ret
0329+  0993             
0330+  0993             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0993             ; PRINT NULL TERMINATED STRING
0332+  0993             ; pointer in D
0333+  0993             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0993             _puts:
0335+  0993 D7            push a
0336+  0994 DA            push d
0337+  0995             _puts_L1:
0338+  0995 1E            mov al, [d]
0339+  0996 B9 00         cmp al, 0
0340+  0998 C6 A4 09      jz _puts_END
0341+  099B 23            mov ah, al
0342+  099C 19 00         mov al, 0
0343+  099E 05 03         syscall sys_io
0344+  09A0 79            inc d
0345+  09A1 0A 95 09      jmp _puts_L1
0346+  09A4             _puts_END:
0347+  09A4 E7            pop d
0348+  09A5 E4            pop a
0349+  09A6 09            ret
0350+  09A7             
0351+  09A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  09A7             ; PRINT N SIZE STRING
0353+  09A7             ; pointer in D
0354+  09A7             ; size in C
0355+  09A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  09A7             _putsn:
0357+  09A7 DB            push al
0358+  09A8 DA            push d
0359+  09A9 D9            push c
0360+  09AA             _putsn_L0:
0361+  09AA 1E            mov al, [d]
0362+  09AB 23            mov ah, al
0363+  09AC 19 00         mov al, 0
0364+  09AE 05 03         syscall sys_io
0365+  09B0 79            inc d
0366+  09B1 7E            dec c  
0367+  09B2 C2 00 00      cmp c, 0
0368+  09B5 C7 AA 09      jne _putsn_L0
0369+  09B8             _putsn_end:
0370+  09B8 E6            pop c
0371+  09B9 E7            pop d
0372+  09BA E8            pop al
0373+  09BB 09            ret
0374+  09BC             
0375+  09BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  09BC             ; print 16bit decimal number
0377+  09BC             ; input number in A
0378+  09BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  09BC             print_u16d:
0380+  09BC D7            push a
0381+  09BD D8            push b
0382+  09BE FD D8         push g
0383+  09C0 26 10 27      mov b, 10000
0384+  09C3 AE            div a, b      ; get 10000's coeff.
0385+  09C4 07 E8 09      call print_number
0386+  09C7 11            mov a, b
0387+  09C8 26 E8 03      mov b, 1000
0388+  09CB AE            div a, b      ; get 1000's coeff.
0389+  09CC 07 E8 09      call print_number
0390+  09CF 11            mov a, b
0391+  09D0 26 64 00      mov b, 100
0392+  09D3 AE            div a, b
0393+  09D4 07 E8 09      call print_number
0394+  09D7 11            mov a, b
0395+  09D8 26 0A 00      mov b, 10
0396+  09DB AE            div a, b
0397+  09DC 07 E8 09      call print_number
0398+  09DF 1B            mov al, bl      ; 1's coeff in bl
0399+  09E0 07 E8 09      call print_number
0400+  09E3 FD F1         pop g
0401+  09E5 E5            pop b
0402+  09E6 E4            pop a
0403+  09E7 09            ret
0404+  09E8             
0405+  09E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  09E8             ; print AL
0407+  09E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  09E8             print_number:
0409+  09E8 6A 30         add al, $30
0410+  09EA 23            mov ah, al
0411+  09EB 07 67 08      call _putchar
0412+  09EE 09            ret
0413+  09EF             
0414+  09EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  09EF             ; PRINT 16BIT HEX INTEGER
0416+  09EF             ; integer value in reg B
0417+  09EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  09EF             print_u16x:
0419+  09EF D7            push a
0420+  09F0 D8            push b
0421+  09F1 DD            push bl
0422+  09F2 30            mov bl, bh
0423+  09F3 07 35 08      call _itoa        ; convert bh to char in A
0424+  09F6 2F            mov bl, al        ; save al
0425+  09F7 19 00         mov al, 0
0426+  09F9 05 03         syscall sys_io        ; display AH
0427+  09FB 24            mov ah, bl        ; retrieve al
0428+  09FC 19 00         mov al, 0
0429+  09FE 05 03         syscall sys_io        ; display AL
0430+  0A00             
0431+  0A00 EA            pop bl
0432+  0A01 07 35 08      call _itoa        ; convert bh to char in A
0433+  0A04 2F            mov bl, al        ; save al
0434+  0A05 19 00         mov al, 0
0435+  0A07 05 03         syscall sys_io        ; display AH
0436+  0A09 24            mov ah, bl        ; retrieve al
0437+  0A0A 19 00         mov al, 0
0438+  0A0C 05 03         syscall sys_io        ; display AL
0439+  0A0E             
0440+  0A0E E5            pop b
0441+  0A0F E4            pop a
0442+  0A10 09            ret
0443+  0A11             
0444+  0A11             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  0A11             ; INPUT 16BIT HEX INTEGER
0446+  0A11             ; read 16bit integer into A
0447+  0A11             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  0A11             scan_u16x:
0449+  0A11 F8 10 00      enter 16
0450+  0A14 D8            push b
0451+  0A15 DA            push d
0452+  0A16             
0453+  0A16 FA F1 FF      lea d, [bp + -15]
0454+  0A19 07 6E 08      call _gets        ; get number
0455+  0A1C             
0456+  0A1C 32            mov bl, [d]
0457+  0A1D 37            mov bh, bl
0458+  0A1E 33 01 00      mov bl, [d + 1]
0459+  0A21 07 24 08      call _atoi        ; convert to int in AL
0460+  0A24 23            mov ah, al        ; move to AH
0461+  0A25             
0462+  0A25 33 02 00      mov bl, [d + 2]
0463+  0A28 37            mov bh, bl
0464+  0A29 33 03 00      mov bl, [d + 3]
0465+  0A2C 07 24 08      call _atoi        ; convert to int in AL
0466+  0A2F             
0467+  0A2F E7            pop d
0468+  0A30 E5            pop b
0469+  0A31 F9            leave
0470+  0A32 09            ret
0471+  0A33             
0472+  0A33             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  0A33             ; PRINT 8bit HEX INTEGER
0474+  0A33             ; integer value in reg bl
0475+  0A33             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  0A33             print_u8x:
0477+  0A33 D7            push a
0478+  0A34 DD            push bl
0479+  0A35             
0480+  0A35 07 35 08      call _itoa        ; convert bl to char in A
0481+  0A38 2F            mov bl, al        ; save al
0482+  0A39 19 00         mov al, 0
0483+  0A3B 05 03         syscall sys_io        ; display AH
0484+  0A3D 24            mov ah, bl        ; retrieve al
0485+  0A3E 19 00         mov al, 0
0486+  0A40 05 03         syscall sys_io        ; display AL
0487+  0A42             
0488+  0A42 EA            pop bl
0489+  0A43 E4            pop a
0490+  0A44 09            ret
0491+  0A45             
0492+  0A45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  0A45             ; print 8bit decimal unsigned number
0494+  0A45             ; input number in AL
0495+  0A45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  0A45             print_u8d:
0497+  0A45 D7            push a
0498+  0A46 D8            push b
0499+  0A47 FD D8         push g
0500+  0A49 22 00         mov ah, 0
0501+  0A4B 26 64 00      mov b, 100
0502+  0A4E AE            div a, b
0503+  0A4F D8            push b      ; save remainder
0504+  0A50 B9 00         cmp al, 0
0505+  0A52 C6 5C 0A      je skip100
0506+  0A55 6A 30         add al, $30
0507+  0A57 23            mov ah, al
0508+  0A58 19 00         mov al, 0
0509+  0A5A 05 03         syscall sys_io  ; print coeff
0510+  0A5C             skip100:
0511+  0A5C E4            pop a
0512+  0A5D 22 00         mov ah, 0
0513+  0A5F 26 0A 00      mov b, 10
0514+  0A62 AE            div a, b
0515+  0A63 D8            push b      ; save remainder
0516+  0A64 B9 00         cmp al, 0
0517+  0A66 C6 70 0A      je skip10
0518+  0A69 6A 30         add al, $30
0519+  0A6B 23            mov ah, al
0520+  0A6C 19 00         mov al, 0
0521+  0A6E 05 03         syscall sys_io  ; print coeff
0522+  0A70             skip10:
0523+  0A70 E4            pop a
0524+  0A71 1B            mov al, bl
0525+  0A72 6A 30         add al, $30
0526+  0A74 23            mov ah, al
0527+  0A75 19 00         mov al, 0
0528+  0A77 05 03         syscall sys_io  ; print coeff
0529+  0A79 FD F1         pop g
0530+  0A7B E5            pop b
0531+  0A7C E4            pop a
0532+  0A7D 09            ret
0533+  0A7E             
0534+  0A7E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0A7E             ; INPUT 8BIT HEX INTEGER
0536+  0A7E             ; read 8bit integer into AL
0537+  0A7E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0A7E             scan_u8x:
0539+  0A7E F8 04 00      enter 4
0540+  0A81 D8            push b
0541+  0A82 DA            push d
0542+  0A83             
0543+  0A83 FA FD FF      lea d, [bp + -3]
0544+  0A86 07 6E 08      call _gets        ; get number
0545+  0A89             
0546+  0A89 32            mov bl, [d]
0547+  0A8A 37            mov bh, bl
0548+  0A8B 33 01 00      mov bl, [d + 1]
0549+  0A8E 07 24 08      call _atoi        ; convert to int in AL
0550+  0A91             
0551+  0A91 E7            pop d
0552+  0A92 E5            pop b
0553+  0A93 F9            leave
0554+  0A94 09            ret
0555+  0A95             
0556+  0A95             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0A95             ; input decimal number
0558+  0A95             ; result in A
0559+  0A95             ; 655'\0'
0560+  0A95             ; low--------high
0561+  0A95             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0A95             scan_u16d:
0563+  0A95 F8 08 00      enter 8
0564+  0A98 E2            push si
0565+  0A99 D8            push b
0566+  0A9A D9            push c
0567+  0A9B DA            push d
0568+  0A9C FA F9 FF      lea d, [bp +- 7]
0569+  0A9F 07 6E 08      call _gets
0570+  0AA2 07 C6 07      call _strlen      ; get string length in C
0571+  0AA5 7E            dec c
0572+  0AA6 FD 4E         mov si, d
0573+  0AA8 12            mov a, c
0574+  0AA9 FD 99         shl a
0575+  0AAB 3B E7 0A      mov d, table_power
0576+  0AAE 59            add d, a
0577+  0AAF 38 00 00      mov c, 0
0578+  0AB2             mul_loop:
0579+  0AB2 F6            lodsb      ; load ASCII to al
0580+  0AB3 B9 00         cmp al, 0
0581+  0AB5 C6 C8 0A      je mul_exit
0582+  0AB8 6F 30         sub al, $30    ; make into integer
0583+  0ABA 22 00         mov ah, 0
0584+  0ABC 2A            mov b, [d]
0585+  0ABD AC            mul a, b      ; result in B since it fits in 16bits
0586+  0ABE 11            mov a, b
0587+  0ABF 28            mov b, c
0588+  0AC0 54            add a, b
0589+  0AC1 39            mov c, a
0590+  0AC2 63 02 00      sub d, 2
0591+  0AC5 0A B2 0A      jmp mul_loop
0592+  0AC8             mul_exit:
0593+  0AC8 12            mov a, c
0594+  0AC9 E7            pop d
0595+  0ACA E6            pop c
0596+  0ACB E5            pop b
0597+  0ACC EF            pop si
0598+  0ACD F9            leave
0599+  0ACE 09            ret
0600+  0ACF             
0601+  0ACF             
0602+  0ACF 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0602+  0AD3 34 35 36 37 
0602+  0AD7 38 39 41 42 
0602+  0ADB 43 44 45 46 
0603+  0ADF 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0603+  0AE3 1B 5B 48 00 
0604+  0AE7             
0605+  0AE7             table_power:
0606+  0AE7 01 00         .dw 1
0607+  0AE9 0A 00         .dw 10
0608+  0AEB 64 00         .dw 100
0609+  0AED E8 03         .dw 1000
0610+  0AEF 10 27         .dw 100000046   0AF1             .include "lib/ctype.asm"
0001+  0AF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0AF1             ; ctype.s
0003+  0AF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0AF1             
0005+  0AF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0AF1             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0AF1             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0AF1             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0AF1             ;; characters are supported.
0010+  0AF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0AF1             ;; _isalnum 
0012+  0AF1             ;; _isalpha 
0013+  0AF1             ;; islower 
0014+  0AF1             ;; isupper 
0015+  0AF1             ;; _isdigit 
0016+  0AF1             ;; isxdigit
0017+  0AF1             ;; iscntrl 
0018+  0AF1             ;; isgraph 
0019+  0AF1             ;; _isspace 
0020+  0AF1             ;; isblank 
0021+  0AF1             ;; isprint 
0022+  0AF1             ;; ispunct 
0023+  0AF1             ;; tolower 
0024+  0AF1             ;; toupper
0025+  0AF1             
0026+  0AF1             
0027+  0AF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0AF1             ;; IS ALPHANUMERIC
0029+  0AF1             ;; sets ZF according with result
0030+  0AF1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0AF1             _isalnum:
0032+  0AF1 07 0E 0B    	call _isalpha
0033+  0AF4 C6 FA 0A    	je _isalnum_exit
0034+  0AF7 07 FB 0A    	call _isdigit
0035+  0AFA             _isalnum_exit:
0036+  0AFA 09          	ret	
0037+  0AFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0AFB             ;; IS DIGIT
0039+  0AFB             ;; sets ZF according with result
0040+  0AFB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0AFB             _isdigit:
0042+  0AFB DB          	push al
0043+  0AFC B9 30       	cmp al, '0'
0044+  0AFE C8 0A 0B    	jlu _isdigit_false
0045+  0B01 B9 39       	cmp al, '9'
0046+  0B03 D1 0A 0B    	jgu _isdigit_false
0047+  0B06 87 00       	and al, 0	; set ZF
0048+  0B08 E8          	pop al
0049+  0B09 09          	ret
0050+  0B0A             _isdigit_false:
0051+  0B0A 8B 01       	or al, 1	; clear ZF
0052+  0B0C E8          	pop al
0053+  0B0D 09          	ret	
0054+  0B0E             	
0055+  0B0E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0B0E             ;; IS ALPHA
0057+  0B0E             ;; sets ZF according with result
0058+  0B0E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0B0E             _isalpha:
0060+  0B0E DB          	push al
0061+  0B0F B9 5F       	cmp al, '_'
0062+  0B11 C6 31 0B    	je _isalpha_true
0063+  0B14 B9 2E       	cmp al, '.'
0064+  0B16 C6 31 0B    	je _isalpha_true
0065+  0B19 B9 41       	cmp al, 'A'
0066+  0B1B C8 2D 0B    	jlu _isalpha_false
0067+  0B1E B9 7A       	cmp al, 'z'
0068+  0B20 D1 2D 0B    	jgu _isalpha_false
0069+  0B23 B9 5A       	cmp al, 'Z'
0070+  0B25 D0 31 0B    	jleu _isalpha_true
0071+  0B28 B9 61       	cmp al, 'a'
0072+  0B2A C9 31 0B    	jgeu _isalpha_true
0073+  0B2D             _isalpha_false:
0074+  0B2D 8B 01       	or al, 1	; clear ZF
0075+  0B2F E8          	pop al
0076+  0B30 09          	ret
0077+  0B31             _isalpha_true:
0078+  0B31 87 00       	and al, 0	; set ZF
0079+  0B33 E8          	pop al
0080+  0B34 09          	ret
0081+  0B35             
0082+  0B35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0B35             ;; IS PATH-ALPHA
0084+  0B35             ;; sets ZF according with result
0085+  0B35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0B35             ispath:
0087+  0B35 DB          	push al
0088+  0B36 07 FB 0A    	call _isdigit
0089+  0B39 C6 63 0B    	je ispath_true
0090+  0B3C B9 5F       	cmp al, '_'
0091+  0B3E C6 63 0B    	je ispath_true
0092+  0B41 B9 2F       	cmp al, '/'
0093+  0B43 C6 63 0B    	je ispath_true
0094+  0B46 B9 2E       	cmp al, '.'
0095+  0B48 C6 63 0B    	je ispath_true
0096+  0B4B B9 41       	cmp al, 'A'
0097+  0B4D C8 5F 0B    	jlu ispath_false
0098+  0B50 B9 7A       	cmp al, 'z'
0099+  0B52 D1 5F 0B    	jgu ispath_false
0100+  0B55 B9 5A       	cmp al, 'Z'
0101+  0B57 D0 63 0B    	jleu ispath_true
0102+  0B5A B9 61       	cmp al, 'a'
0103+  0B5C C9 63 0B    	jgeu ispath_true
0104+  0B5F             ispath_false:
0105+  0B5F 8B 01       	or al, 1	; clear ZF
0106+  0B61 E8          	pop al
0107+  0B62 09          	ret
0108+  0B63             ispath_true:
0109+  0B63 87 00       	and al, 0	; set ZF
0110+  0B65 E8          	pop al
0111+  0B66 09          	ret
0112+  0B67             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  0B67             ;; IS SPACE
0114+  0B67             ;; sets ZF according with result
0115+  0B67             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  0B67             _isspace:
0117+  0B67 B9 20       	cmp al, $20		; ' '
0118+  0B69 C6 7D 0B    	je _isspace_exit
0119+  0B6C B9 09       	cmp al, $09		; '\t'
0120+  0B6E C6 7D 0B    	je _isspace_exit
0121+  0B71 B9 0A       	cmp al, $0A		; '\n'
0122+  0B73 C6 7D 0B    	je _isspace_exit
0123+  0B76 B9 0D       	cmp al, $0D		; '\r'
0124+  0B78 C6 7D 0B    	je _isspace_exit
0125+  0B7B B9 0B       	cmp al, $0B		; '\v'
0126+  0B7D             _isspace_exit:
0127+  0B7D 09          	ret	
0128+  0B7E             
0129+  0B7E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0B7E             ; TO LOWER
0131+  0B7E             ; input in AL
0132+  0B7E             ; output in AL
0133+  0B7E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0B7E             _to_lower:
0135+  0B7E B9 5A       	cmp al, 'Z'
0136+  0B80 D1 85 0B    	jgu _to_lower_ret
0137+  0B83 6A 20       	add al, $20				; convert to lower case
0138+  0B85             _to_lower_ret:
0139+  0B85 09          	ret
0140+  0B86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  0B86             ; TO UPPER
0142+  0B86             ; input in AL
0143+  0B86             ; output in AL
0144+  0B86             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  0B86             _to_upper:
0146+  0B86 B9 61       	cmp al, 'a'
0147+  0B88 C8 8D 0B    	jlu _to_upper_ret
0148+  0B8B 6F 20       	sub al, $20			; convert to upper case
0149+  0B8D             _to_upper_ret:
0150+  0B8D 09          	ret
0151+  0B8E             
0047   0B8E             
0048   0B8E             
0049   0B8E             transient_area:	
0050   0B8E             
0051   0B8E             .end
0052   0B8E             
0053   0B8E             
tasm: Number of errors = 0
