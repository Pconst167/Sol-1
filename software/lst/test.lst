0001   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             text_org         .EQU  $0400
0002   0400             .org text_org
0003   0400             
0004   0400             ; --- BEGIN TEXT BLOCK
0005   0400             ; FFC0    5.25" Floppy Drive Block
0006   0400             ;   - FFC0  (Last 4 bits: 0000)    Output Port (377 Flip-Flop)                       Note: A3 Address line is 0
0007   0400             ;   - FFC1  (Last 4 bits: 0001)    Input Port  (244 Buffer)                          Note: A3 Address line is 0
0008   0400             ;   - FFC8  (Last 4 bits: 1000)    FDC         (WD1770 Floppy Drive Controller)      Note: A3 Address line is 1
0009   0400             main:
0010   0400 FD 49 FF FF   mov bp, $FFFF
0011   0404 FD 47 FF FF   mov sp, $FFFF
0012   0408             
0013   0408             
0014   0408               ; First, select drive 1 and de-select drive 0
0015   0408 3B 00 00      mov d, $0
0016   040B 19 02         mov al, 2   ; set param
0017   040D 2E BB         mov bl, $BB
0018   040F 05 0C         syscall sys_system
0019   0411             
0020   0411               ;mov [d], al ; %00001001 : turn LED on, disable double density, select side 0, select drive 1, do not select drive 0
0021   0411             
0022   0411             
0023   0411             
0024   0411             ;  mov d, $FFC8
0025   0411             ;  mov al, 0       ; restore command
0026   0411             ;  mov [d], al       ; send command
0027   0411               
0028   0411             
0029   0411 05 0B         syscall sys_terminate_proc
0030   0413             
0031   0413             
0032   0413             .include "lib/stdio.asm"
0001+  0413             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0413             ; stdio.s
0003+  0413             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0413             .include "lib/string.asm"
0001++ 0413             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0413             ; string.s
0003++ 0413             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0413             
0005++ 0413             
0006++ 0413             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0413             ; _strrev
0008++ 0413             ; reverse a string
0009++ 0413             ; D = string address
0010++ 0413             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0413             ; 01234
0012++ 0413             _strrev:
0013++ 0413 4B          	pusha
0014++ 0414 07 5A 04    	call _strlen	; length in C
0015++ 0417 12          	mov a, c
0016++ 0418 AF 01 00    	cmp a, 1
0017++ 041B D0 35 04    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 041E 7D          	dec a
0019++ 041F FD 4E       	mov si, d	; beginning of string
0020++ 0421 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0423 59          	add d, a	; end of string
0022++ 0424 12          	mov a, c
0023++ 0425 FD 9B       	shr a		; divide by 2
0024++ 0427 39          	mov c, a	; C now counts the steps
0025++ 0428             _strrev_L0:
0026++ 0428 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0429 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 042A 3E          	mov [d], al	; store left char into right side
0029++ 042B 1B          	mov al, bl
0030++ 042C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 042D 7E          	dec c
0032++ 042E 7F          	dec d
0033++ 042F C2 00 00    	cmp c, 0
0034++ 0432 C7 28 04    	jne _strrev_L0
0035++ 0435             _strrev_end:
0036++ 0435 4C          	popa
0037++ 0436 09          	ret
0038++ 0437             	
0039++ 0437             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0437             ; _strchr
0041++ 0437             ; search string in D for char in AL
0042++ 0437             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0437             _strchr:
0044++ 0437             _strchr_L0:
0045++ 0437 32          	mov bl, [d]
0046++ 0438 C1 00       	cmp bl, 0
0047++ 043A C6 45 04    	je _strchr_end
0048++ 043D BA          	cmp al, bl
0049++ 043E C6 45 04    	je _strchr_end
0050++ 0441 79          	inc d
0051++ 0442 0A 37 04    	jmp _strchr_L0
0052++ 0445             _strchr_end:
0053++ 0445 1B          	mov al, bl
0054++ 0446 09          	ret
0055++ 0447             
0056++ 0447             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0447             ; _strstr
0058++ 0447             ; find sub-string
0059++ 0447             ; str1 in SI
0060++ 0447             ; str2 in DI
0061++ 0447             ; SI points to end of source string
0062++ 0447             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0447             _strstr:
0064++ 0447 DB          	push al
0065++ 0448 DA          	push d
0066++ 0449 E3          	push di
0067++ 044A             _strstr_loop:
0068++ 044A F3          	cmpsb					; compare a byte of the strings
0069++ 044B C7 56 04    	jne _strstr_ret
0070++ 044E FC 00 00    	lea d, [di + 0]
0071++ 0451 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0453 C7 4A 04    	jne _strstr_loop				; equal chars but not at end
0073++ 0456             _strstr_ret:
0074++ 0456 F0          	pop di
0075++ 0457 E7          	pop d
0076++ 0458 E8          	pop al
0077++ 0459 09          	ret
0078++ 045A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 045A             ; length of null terminated string
0080++ 045A             ; result in C
0081++ 045A             ; pointer in D
0082++ 045A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 045A             _strlen:
0084++ 045A DA          	push d
0085++ 045B 38 00 00    	mov c, 0
0086++ 045E             _strlen_L1:
0087++ 045E BD 00       	cmp byte [d], 0
0088++ 0460 C6 68 04    	je _strlen_ret
0089++ 0463 79          	inc d
0090++ 0464 78          	inc c
0091++ 0465 0A 5E 04    	jmp _strlen_L1
0092++ 0468             _strlen_ret:
0093++ 0468 E7          	pop d
0094++ 0469 09          	ret
0095++ 046A             
0096++ 046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 046A             ; STRCMP
0098++ 046A             ; compare two strings
0099++ 046A             ; str1 in SI
0100++ 046A             ; str2 in DI
0101++ 046A             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 046A             _strcmp:
0104++ 046A DB          	push al
0105++ 046B DA          	push d
0106++ 046C E3          	push di
0107++ 046D E2          	push si
0108++ 046E             _strcmp_loop:
0109++ 046E F3          	cmpsb					; compare a byte of the strings
0110++ 046F C7 7A 04    	jne _strcmp_ret
0111++ 0472 FB FF FF    	lea d, [si +- 1]
0112++ 0475 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0477 C7 6E 04    	jne _strcmp_loop				; equal chars but not at end
0114++ 047A             _strcmp_ret:
0115++ 047A EF          	pop si
0116++ 047B F0          	pop di
0117++ 047C E7          	pop d
0118++ 047D E8          	pop al
0119++ 047E 09          	ret
0120++ 047F             
0121++ 047F             
0122++ 047F             ; STRCPY
0123++ 047F             ; copy null terminated string from SI to DI
0124++ 047F             ; source in SI
0125++ 047F             ; destination in DI
0126++ 047F             _strcpy:
0127++ 047F E2          	push si
0128++ 0480 E3          	push di
0129++ 0481 DB          	push al
0130++ 0482             _strcpy_L1:
0131++ 0482 F6          	lodsb
0132++ 0483 F7          	stosb
0133++ 0484 B9 00       	cmp al, 0
0134++ 0486 C7 82 04    	jne _strcpy_L1
0135++ 0489             _strcpy_end:
0136++ 0489 E8          	pop al
0137++ 048A F0          	pop di
0138++ 048B EF          	pop si
0139++ 048C 09          	ret
0140++ 048D             
0141++ 048D             ; STRCAT
0142++ 048D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 048D             ; source in SI
0144++ 048D             ; destination in DI
0145++ 048D             _strcat:
0146++ 048D E2          	push si
0147++ 048E E3          	push di
0148++ 048F D7          	push a
0149++ 0490 DA          	push d
0150++ 0491 50          	mov a, di
0151++ 0492 3C          	mov d, a
0152++ 0493             _strcat_goto_end_L1:
0153++ 0493 BD 00       	cmp byte[d], 0
0154++ 0495 C6 9C 04    	je _strcat_start
0155++ 0498 79          	inc d
0156++ 0499 0A 93 04    	jmp _strcat_goto_end_L1
0157++ 049C             _strcat_start:
0158++ 049C FD 50       	mov di, d
0159++ 049E             _strcat_L1:
0160++ 049E F6          	lodsb
0161++ 049F F7          	stosb
0162++ 04A0 B9 00       	cmp al, 0
0163++ 04A2 C7 9E 04    	jne _strcat_L1
0164++ 04A5             _strcat_end:
0165++ 04A5 E7          	pop d
0166++ 04A6 E4          	pop a
0167++ 04A7 F0          	pop di
0168++ 04A8 EF          	pop si
0169++ 04A9 09          	ret
0170++ 04AA             
0171++ 04AA             
0005+  04AA             
0006+  04AA             
0007+  04AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  04AA             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  04AA             ; ASCII in BL
0010+  04AA             ; result in AL
0011+  04AA             ; ascii for F = 0100 0110
0012+  04AA             ; ascii for 9 = 0011 1001
0013+  04AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  04AA             hex_ascii_encode:
0015+  04AA 1B            mov al, bl
0016+  04AB 93 40         test al, $40        ; test if letter or number
0017+  04AD C7 B3 04      jnz hex_letter
0018+  04B0 87 0F         and al, $0F        ; get number
0019+  04B2 09            ret
0020+  04B3             hex_letter:
0021+  04B3 87 0F         and al, $0F        ; get letter
0022+  04B5 6A 09         add al, 9
0023+  04B7 09            ret
0024+  04B8             
0025+  04B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  04B8             ; ATOI
0027+  04B8             ; 2 letter hex string in B
0028+  04B8             ; 8bit integer returned in AL
0029+  04B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  04B8             _atoi:
0031+  04B8 D8            push b
0032+  04B9 07 AA 04      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  04BC 30            mov bl, bh
0034+  04BD DB            push al          ; save a
0035+  04BE 07 AA 04      call hex_ascii_encode
0036+  04C1 EA            pop bl  
0037+  04C2 FD 9E 04      shl al, 4
0038+  04C5 8C            or al, bl
0039+  04C6 E5            pop b
0040+  04C7 09            ret  
0041+  04C8             
0042+  04C8             
0043+  04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  04C8             ; scanf
0045+  04C8             ; no need for explanations!
0046+  04C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  04C8             scanf:
0048+  04C8 09            ret
0049+  04C9             
0050+  04C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04C9             ; ITOA
0052+  04C9             ; 8bit value in BL
0053+  04C9             ; 2 byte ASCII result in A
0054+  04C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04C9             _itoa:
0056+  04C9 DA            push d
0057+  04CA D8            push b
0058+  04CB A7 00         mov bh, 0
0059+  04CD FD A4 04      shr bl, 4  
0060+  04D0 74            mov d, b
0061+  04D1 1F 63 07      mov al, [d + s_hex_digits]
0062+  04D4 23            mov ah, al
0063+  04D5               
0064+  04D5 E5            pop b
0065+  04D6 D8            push b
0066+  04D7 A7 00         mov bh, 0
0067+  04D9 FD 87 0F      and bl, $0F
0068+  04DC 74            mov d, b
0069+  04DD 1F 63 07      mov al, [d + s_hex_digits]
0070+  04E0 E5            pop b
0071+  04E1 E7            pop d
0072+  04E2 09            ret
0073+  04E3             
0074+  04E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  04E3             ; HEX STRING TO BINARY
0076+  04E3             ; di = destination address
0077+  04E3             ; si = source
0078+  04E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  04E3             _hex_to_int:
0080+  04E3             _hex_to_int_L1:
0081+  04E3 F6            lodsb          ; load from [SI] to AL
0082+  04E4 B9 00         cmp al, 0        ; check if ASCII 0
0083+  04E6 C6 F3 04      jz _hex_to_int_ret
0084+  04E9 36            mov bh, al
0085+  04EA F6            lodsb
0086+  04EB 2F            mov bl, al
0087+  04EC 07 B8 04      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  04EF F7            stosb          ; store AL to [DI]
0089+  04F0 0A E3 04      jmp _hex_to_int_L1
0090+  04F3             _hex_to_int_ret:
0091+  04F3 09            ret    
0092+  04F4             
0093+  04F4             
0094+  04F4             
0095+  04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  04F4             ; GETCHAR
0097+  04F4             ; char in ah
0098+  04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  04F4             getch:
0100+  04F4 DB            push al
0101+  04F5             getch_retry:
0102+  04F5 19 01         mov al, 1
0103+  04F7 05 03         syscall sys_io      ; receive in AH
0104+  04F9 E8            pop al
0105+  04FA 09            ret
0106+  04FB             
0107+  04FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  04FB             ; PUTCHAR
0109+  04FB             ; char in ah
0110+  04FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  04FB             _putchar:
0112+  04FB DB            push al
0113+  04FC 19 00         mov al, 0
0114+  04FE 05 03         syscall sys_io      ; char in AH
0115+  0500 E8            pop al
0116+  0501 09            ret
0117+  0502             
0118+  0502             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0502             ;; INPUT A STRING
0120+  0502             ;; terminates with null
0121+  0502             ;; pointer in D
0122+  0502             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0502             _gets:
0124+  0502 D7            push a
0125+  0503 DA            push d
0126+  0504             _gets_loop:
0127+  0504 19 01         mov al, 1
0128+  0506 05 03         syscall sys_io      ; receive in AH
0129+  0508 76 1B         cmp ah, 27
0130+  050A C6 2B 05      je _gets_ansi_esc
0131+  050D 76 0A         cmp ah, $0A        ; LF
0132+  050F C6 87 05      je _gets_end
0133+  0512 76 0D         cmp ah, $0D        ; CR
0134+  0514 C6 87 05      je _gets_end
0135+  0517 76 5C         cmp ah, $5C        ; '\\'
0136+  0519 C6 4D 05      je _gets_escape
0137+  051C 76 08         cmp ah, $08      ; check for backspace
0138+  051E C6 27 05      je _gets_backspace
0139+  0521 1A            mov al, ah
0140+  0522 3E            mov [d], al
0141+  0523 79            inc d
0142+  0524 0A 04 05      jmp _gets_loop
0143+  0527             _gets_backspace:
0144+  0527 7F            dec d
0145+  0528 0A 04 05      jmp _gets_loop
0146+  052B             _gets_ansi_esc:
0147+  052B 19 01         mov al, 1
0148+  052D 05 03         syscall sys_io        ; receive in AH without echo
0149+  052F 76 5B         cmp ah, '['
0150+  0531 C7 04 05      jne _gets_loop
0151+  0534 19 01         mov al, 1
0152+  0536 05 03         syscall sys_io          ; receive in AH without echo
0153+  0538 76 44         cmp ah, 'D'
0154+  053A C6 45 05      je _gets_left_arrow
0155+  053D 76 43         cmp ah, 'C'
0156+  053F C6 49 05      je _gets_right_arrow
0157+  0542 0A 04 05      jmp _gets_loop
0158+  0545             _gets_left_arrow:
0159+  0545 7F            dec d
0160+  0546 0A 04 05      jmp _gets_loop
0161+  0549             _gets_right_arrow:
0162+  0549 79            inc d
0163+  054A 0A 04 05      jmp _gets_loop
0164+  054D             _gets_escape:
0165+  054D 19 01         mov al, 1
0166+  054F 05 03         syscall sys_io      ; receive in AH
0167+  0551 76 6E         cmp ah, 'n'
0168+  0553 C6 72 05      je _gets_LF
0169+  0556 76 72         cmp ah, 'r'
0170+  0558 C6 79 05      je _gets_CR
0171+  055B 76 30         cmp ah, '0'
0172+  055D C6 80 05      je _gets_NULL
0173+  0560 76 5C         cmp ah, $5C  ; '\'
0174+  0562 C6 6B 05      je _gets_slash
0175+  0565 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  0566 3E            mov [d], al
0177+  0567 79            inc d
0178+  0568 0A 04 05      jmp _gets_loop
0179+  056B             _gets_slash:
0180+  056B 19 5C         mov al, $5C
0181+  056D 3E            mov [d], al
0182+  056E 79            inc d
0183+  056F 0A 04 05      jmp _gets_loop
0184+  0572             _gets_LF:
0185+  0572 19 0A         mov al, $0A
0186+  0574 3E            mov [d], al
0187+  0575 79            inc d
0188+  0576 0A 04 05      jmp _gets_loop
0189+  0579             _gets_CR:
0190+  0579 19 0D         mov al, $0D
0191+  057B 3E            mov [d], al
0192+  057C 79            inc d
0193+  057D 0A 04 05      jmp _gets_loop
0194+  0580             _gets_NULL:
0195+  0580 19 00         mov al, $00
0196+  0582 3E            mov [d], al
0197+  0583 79            inc d
0198+  0584 0A 04 05      jmp _gets_loop
0199+  0587             _gets_end:
0200+  0587 19 00         mov al, 0
0201+  0589 3E            mov [d], al        ; terminate string
0202+  058A E7            pop d
0203+  058B E4            pop a
0204+  058C 09            ret
0205+  058D             
0206+  058D             
0207+  058D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  058D             ;; INPUT TEXT
0209+  058D             ;; terminated with CTRL+D
0210+  058D             ;; pointer in D
0211+  058D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  058D             _gettxt:
0213+  058D D7            push a
0214+  058E DA            push d
0215+  058F             _gettxt_loop:
0216+  058F 19 01         mov al, 1
0217+  0591 05 03         syscall sys_io      ; receive in AH
0218+  0593 76 04         cmp ah, 4      ; EOT
0219+  0595 C6 CE 05      je _gettxt_end
0220+  0598 76 08         cmp ah, $08      ; check for backspace
0221+  059A C6 CA 05      je _gettxt_backspace
0222+  059D 76 5C         cmp ah, $5C        ; '\'
0223+  059F C6 A8 05      je _gettxt_escape
0224+  05A2 1A            mov al, ah
0225+  05A3 3E            mov [d], al
0226+  05A4 79            inc d
0227+  05A5 0A 8F 05      jmp _gettxt_loop
0228+  05A8             _gettxt_escape:
0229+  05A8 19 01         mov al, 1
0230+  05AA 05 03         syscall sys_io      ; receive in AH
0231+  05AC 76 6E         cmp ah, 'n'
0232+  05AE C6 BC 05      je _gettxt_LF
0233+  05B1 76 72         cmp ah, 'r'
0234+  05B3 C6 C3 05      je _gettxt_CR
0235+  05B6 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  05B7 3E            mov [d], al
0237+  05B8 79            inc d
0238+  05B9 0A 8F 05      jmp _gettxt_loop
0239+  05BC             _gettxt_LF:
0240+  05BC 19 0A         mov al, $0A
0241+  05BE 3E            mov [d], al
0242+  05BF 79            inc d
0243+  05C0 0A 8F 05      jmp _gettxt_loop
0244+  05C3             _gettxt_CR:
0245+  05C3 19 0D         mov al, $0D
0246+  05C5 3E            mov [d], al
0247+  05C6 79            inc d
0248+  05C7 0A 8F 05      jmp _gettxt_loop
0249+  05CA             _gettxt_backspace:
0250+  05CA 7F            dec d
0251+  05CB 0A 8F 05      jmp _gettxt_loop
0252+  05CE             _gettxt_end:
0253+  05CE 19 00         mov al, 0
0254+  05D0 3E            mov [d], al        ; terminate string
0255+  05D1 E7            pop d
0256+  05D2 E4            pop a
0257+  05D3 09            ret
0258+  05D4             
0259+  05D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  05D4             ; PRINT NEW LINE
0261+  05D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  05D4             printnl:
0263+  05D4 D7            push a
0264+  05D5 10 00 0A      mov a, $0A00
0265+  05D8 05 03         syscall sys_io
0266+  05DA 10 00 0D      mov a, $0D00
0267+  05DD 05 03         syscall sys_io
0268+  05DF E4            pop a
0269+  05E0 09            ret
0270+  05E1             
0271+  05E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  05E1             ; _strtoint
0273+  05E1             ; 4 digit hex string number in d
0274+  05E1             ; integer returned in A
0275+  05E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  05E1             _strtointx:
0277+  05E1 D8            push b
0278+  05E2 32            mov bl, [d]
0279+  05E3 37            mov bh, bl
0280+  05E4 33 01 00      mov bl, [d + 1]
0281+  05E7 07 B8 04      call _atoi        ; convert to int in AL
0282+  05EA 23            mov ah, al        ; move to AH
0283+  05EB 33 02 00      mov bl, [d + 2]
0284+  05EE 37            mov bh, bl
0285+  05EF 33 03 00      mov bl, [d + 3]
0286+  05F2 07 B8 04      call _atoi        ; convert to int in AL
0287+  05F5 E5            pop b
0288+  05F6 09            ret
0289+  05F7             
0290+  05F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  05F7             ; _strtoint
0292+  05F7             ; 5 digit base10 string number in d
0293+  05F7             ; integer returned in A
0294+  05F7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  05F7             _strtoint:
0296+  05F7 E2            push si
0297+  05F8 D8            push b
0298+  05F9 D9            push c
0299+  05FA DA            push d
0300+  05FB 07 5A 04      call _strlen      ; get string length in C
0301+  05FE 7E            dec c
0302+  05FF FD 4E         mov si, d
0303+  0601 12            mov a, c
0304+  0602 FD 99         shl a
0305+  0604 3B 7B 07      mov d, table_power
0306+  0607 59            add d, a
0307+  0608 38 00 00      mov c, 0
0308+  060B             _strtoint_L0:
0309+  060B F6            lodsb      ; load ASCII to al
0310+  060C B9 00         cmp al, 0
0311+  060E C6 21 06      je _strtoint_end
0312+  0611 6F 30         sub al, $30    ; make into integer
0313+  0613 22 00         mov ah, 0
0314+  0615 2A            mov b, [d]
0315+  0616 AC            mul a, b      ; result in B since it fits in 16bits
0316+  0617 11            mov a, b
0317+  0618 28            mov b, c
0318+  0619 54            add a, b
0319+  061A 39            mov c, a
0320+  061B 63 02 00      sub d, 2
0321+  061E 0A 0B 06      jmp _strtoint_L0
0322+  0621             _strtoint_end:
0323+  0621 12            mov a, c
0324+  0622 E7            pop d
0325+  0623 E6            pop c
0326+  0624 E5            pop b
0327+  0625 EF            pop si
0328+  0626 09            ret
0329+  0627             
0330+  0627             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0627             ; PRINT NULL TERMINATED STRING
0332+  0627             ; pointer in D
0333+  0627             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0627             _puts:
0335+  0627 D7            push a
0336+  0628 DA            push d
0337+  0629             _puts_L1:
0338+  0629 1E            mov al, [d]
0339+  062A B9 00         cmp al, 0
0340+  062C C6 38 06      jz _puts_END
0341+  062F 23            mov ah, al
0342+  0630 19 00         mov al, 0
0343+  0632 05 03         syscall sys_io
0344+  0634 79            inc d
0345+  0635 0A 29 06      jmp _puts_L1
0346+  0638             _puts_END:
0347+  0638 E7            pop d
0348+  0639 E4            pop a
0349+  063A 09            ret
0350+  063B             
0351+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  063B             ; PRINT N SIZE STRING
0353+  063B             ; pointer in D
0354+  063B             ; size in C
0355+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  063B             _putsn:
0357+  063B DB            push al
0358+  063C DA            push d
0359+  063D D9            push c
0360+  063E             _putsn_L0:
0361+  063E 1E            mov al, [d]
0362+  063F 23            mov ah, al
0363+  0640 19 00         mov al, 0
0364+  0642 05 03         syscall sys_io
0365+  0644 79            inc d
0366+  0645 7E            dec c  
0367+  0646 C2 00 00      cmp c, 0
0368+  0649 C7 3E 06      jne _putsn_L0
0369+  064C             _putsn_end:
0370+  064C E6            pop c
0371+  064D E7            pop d
0372+  064E E8            pop al
0373+  064F 09            ret
0374+  0650             
0375+  0650             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  0650             ; print 16bit decimal number
0377+  0650             ; input number in A
0378+  0650             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0650             print_u16d:
0380+  0650 D7            push a
0381+  0651 D8            push b
0382+  0652 FD D8         push g
0383+  0654 26 10 27      mov b, 10000
0384+  0657 AE            div a, b      ; get 10000's coeff.
0385+  0658 07 7C 06      call print_number
0386+  065B 11            mov a, b
0387+  065C 26 E8 03      mov b, 1000
0388+  065F AE            div a, b      ; get 1000's coeff.
0389+  0660 07 7C 06      call print_number
0390+  0663 11            mov a, b
0391+  0664 26 64 00      mov b, 100
0392+  0667 AE            div a, b
0393+  0668 07 7C 06      call print_number
0394+  066B 11            mov a, b
0395+  066C 26 0A 00      mov b, 10
0396+  066F AE            div a, b
0397+  0670 07 7C 06      call print_number
0398+  0673 1B            mov al, bl      ; 1's coeff in bl
0399+  0674 07 7C 06      call print_number
0400+  0677 FD F1         pop g
0401+  0679 E5            pop b
0402+  067A E4            pop a
0403+  067B 09            ret
0404+  067C             
0405+  067C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  067C             ; print AL
0407+  067C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  067C             print_number:
0409+  067C 6A 30         add al, $30
0410+  067E 23            mov ah, al
0411+  067F 07 FB 04      call _putchar
0412+  0682 09            ret
0413+  0683             
0414+  0683             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  0683             ; PRINT 16BIT HEX INTEGER
0416+  0683             ; integer value in reg B
0417+  0683             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  0683             print_u16x:
0419+  0683 D7            push a
0420+  0684 D8            push b
0421+  0685 DD            push bl
0422+  0686 30            mov bl, bh
0423+  0687 07 C9 04      call _itoa        ; convert bh to char in A
0424+  068A 2F            mov bl, al        ; save al
0425+  068B 19 00         mov al, 0
0426+  068D 05 03         syscall sys_io        ; display AH
0427+  068F 24            mov ah, bl        ; retrieve al
0428+  0690 19 00         mov al, 0
0429+  0692 05 03         syscall sys_io        ; display AL
0430+  0694             
0431+  0694 EA            pop bl
0432+  0695 07 C9 04      call _itoa        ; convert bh to char in A
0433+  0698 2F            mov bl, al        ; save al
0434+  0699 19 00         mov al, 0
0435+  069B 05 03         syscall sys_io        ; display AH
0436+  069D 24            mov ah, bl        ; retrieve al
0437+  069E 19 00         mov al, 0
0438+  06A0 05 03         syscall sys_io        ; display AL
0439+  06A2             
0440+  06A2 E5            pop b
0441+  06A3 E4            pop a
0442+  06A4 09            ret
0443+  06A5             
0444+  06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06A5             ; INPUT 16BIT HEX INTEGER
0446+  06A5             ; read 16bit integer into A
0447+  06A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06A5             scan_u16x:
0449+  06A5 F8 10 00      enter 16
0450+  06A8 D8            push b
0451+  06A9 DA            push d
0452+  06AA             
0453+  06AA FA F1 FF      lea d, [bp + -15]
0454+  06AD 07 02 05      call _gets        ; get number
0455+  06B0             
0456+  06B0 32            mov bl, [d]
0457+  06B1 37            mov bh, bl
0458+  06B2 33 01 00      mov bl, [d + 1]
0459+  06B5 07 B8 04      call _atoi        ; convert to int in AL
0460+  06B8 23            mov ah, al        ; move to AH
0461+  06B9             
0462+  06B9 33 02 00      mov bl, [d + 2]
0463+  06BC 37            mov bh, bl
0464+  06BD 33 03 00      mov bl, [d + 3]
0465+  06C0 07 B8 04      call _atoi        ; convert to int in AL
0466+  06C3             
0467+  06C3 E7            pop d
0468+  06C4 E5            pop b
0469+  06C5 F9            leave
0470+  06C6 09            ret
0471+  06C7             
0472+  06C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  06C7             ; PRINT 8bit HEX INTEGER
0474+  06C7             ; integer value in reg bl
0475+  06C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06C7             print_u8x:
0477+  06C7 D7            push a
0478+  06C8 DD            push bl
0479+  06C9             
0480+  06C9 07 C9 04      call _itoa        ; convert bl to char in A
0481+  06CC 2F            mov bl, al        ; save al
0482+  06CD 19 00         mov al, 0
0483+  06CF 05 03         syscall sys_io        ; display AH
0484+  06D1 24            mov ah, bl        ; retrieve al
0485+  06D2 19 00         mov al, 0
0486+  06D4 05 03         syscall sys_io        ; display AL
0487+  06D6             
0488+  06D6 EA            pop bl
0489+  06D7 E4            pop a
0490+  06D8 09            ret
0491+  06D9             
0492+  06D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  06D9             ; print 8bit decimal unsigned number
0494+  06D9             ; input number in AL
0495+  06D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  06D9             print_u8d:
0497+  06D9 D7            push a
0498+  06DA D8            push b
0499+  06DB FD D8         push g
0500+  06DD 22 00         mov ah, 0
0501+  06DF 26 64 00      mov b, 100
0502+  06E2 AE            div a, b
0503+  06E3 D8            push b      ; save remainder
0504+  06E4 B9 00         cmp al, 0
0505+  06E6 C6 F0 06      je skip100
0506+  06E9 6A 30         add al, $30
0507+  06EB 23            mov ah, al
0508+  06EC 19 00         mov al, 0
0509+  06EE 05 03         syscall sys_io  ; print coeff
0510+  06F0             skip100:
0511+  06F0 E4            pop a
0512+  06F1 22 00         mov ah, 0
0513+  06F3 26 0A 00      mov b, 10
0514+  06F6 AE            div a, b
0515+  06F7 D8            push b      ; save remainder
0516+  06F8 B9 00         cmp al, 0
0517+  06FA C6 04 07      je skip10
0518+  06FD 6A 30         add al, $30
0519+  06FF 23            mov ah, al
0520+  0700 19 00         mov al, 0
0521+  0702 05 03         syscall sys_io  ; print coeff
0522+  0704             skip10:
0523+  0704 E4            pop a
0524+  0705 1B            mov al, bl
0525+  0706 6A 30         add al, $30
0526+  0708 23            mov ah, al
0527+  0709 19 00         mov al, 0
0528+  070B 05 03         syscall sys_io  ; print coeff
0529+  070D FD F1         pop g
0530+  070F E5            pop b
0531+  0710 E4            pop a
0532+  0711 09            ret
0533+  0712             
0534+  0712             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0712             ; INPUT 8BIT HEX INTEGER
0536+  0712             ; read 8bit integer into AL
0537+  0712             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0712             scan_u8x:
0539+  0712 F8 04 00      enter 4
0540+  0715 D8            push b
0541+  0716 DA            push d
0542+  0717             
0543+  0717 FA FD FF      lea d, [bp + -3]
0544+  071A 07 02 05      call _gets        ; get number
0545+  071D             
0546+  071D 32            mov bl, [d]
0547+  071E 37            mov bh, bl
0548+  071F 33 01 00      mov bl, [d + 1]
0549+  0722 07 B8 04      call _atoi        ; convert to int in AL
0550+  0725             
0551+  0725 E7            pop d
0552+  0726 E5            pop b
0553+  0727 F9            leave
0554+  0728 09            ret
0555+  0729             
0556+  0729             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  0729             ; input decimal number
0558+  0729             ; result in A
0559+  0729             ; 655'\0'
0560+  0729             ; low--------high
0561+  0729             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  0729             scan_u16d:
0563+  0729 F8 08 00      enter 8
0564+  072C E2            push si
0565+  072D D8            push b
0566+  072E D9            push c
0567+  072F DA            push d
0568+  0730 FA F9 FF      lea d, [bp +- 7]
0569+  0733 07 02 05      call _gets
0570+  0736 07 5A 04      call _strlen      ; get string length in C
0571+  0739 7E            dec c
0572+  073A FD 4E         mov si, d
0573+  073C 12            mov a, c
0574+  073D FD 99         shl a
0575+  073F 3B 7B 07      mov d, table_power
0576+  0742 59            add d, a
0577+  0743 38 00 00      mov c, 0
0578+  0746             mul_loop:
0579+  0746 F6            lodsb      ; load ASCII to al
0580+  0747 B9 00         cmp al, 0
0581+  0749 C6 5C 07      je mul_exit
0582+  074C 6F 30         sub al, $30    ; make into integer
0583+  074E 22 00         mov ah, 0
0584+  0750 2A            mov b, [d]
0585+  0751 AC            mul a, b      ; result in B since it fits in 16bits
0586+  0752 11            mov a, b
0587+  0753 28            mov b, c
0588+  0754 54            add a, b
0589+  0755 39            mov c, a
0590+  0756 63 02 00      sub d, 2
0591+  0759 0A 46 07      jmp mul_loop
0592+  075C             mul_exit:
0593+  075C 12            mov a, c
0594+  075D E7            pop d
0595+  075E E6            pop c
0596+  075F E5            pop b
0597+  0760 EF            pop si
0598+  0761 F9            leave
0599+  0762 09            ret
0600+  0763             
0601+  0763             
0602+  0763 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0602+  0767 34 35 36 37 
0602+  076B 38 39 41 42 
0602+  076F 43 44 45 46 
0603+  0773 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0603+  0777 1B 5B 48 00 
0604+  077B             
0605+  077B             table_power:
0606+  077B 01 00         .dw 1
0607+  077D 0A 00         .dw 10
0608+  077F 64 00         .dw 100
0609+  0781 E8 03         .dw 1000
0610+  0783 10 27         .dw 100000033   0785             .end
tasm: Number of errors = 0
