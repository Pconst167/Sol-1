0001   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_spawn_proc   .EQU  $0005
0007+  0000             sys_list         .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             text_org         .EQU  $0400
0002   0400             .org text_org
0003   0400             
0004   0400             ; --- BEGIN TEXT BLOCK
0005   0400             main:
0006   0400 FD 49 FF FF   mov bp, $FFFF
0007   0404 FD 47 FF FF   mov sp, $FFFF
0008   0408             
0009   0408 07 E7 05      call printnl
0010   040B 07 E7 05      call printnl
0011   040E             
0012   040E             
0013   040E 3A 01         mov cl, 1
0014   0410 FD 2D FF FF   mov ga, $FFFFFFFF
0014   0414 FF FF 
0015   0416 FD 1D         shl32 ga, cl
0016   0418             
0017   0418 FD 27         mov b, g
0018   041A 07 96 06      call print_u16x
0019   041D 27            mov b, a
0020   041E 07 96 06      call print_u16x
0021   0421             
0022   0421 07 E7 05      call printnl
0023   0424             
0024   0424             
0025   0424             
0026   0424 05 0B         syscall sys_terminate_proc
0027   0426             
0028   0426             
0029   0426             .include "lib/stdio.asm"
0001+  0426             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0426             ; stdio.s
0003+  0426             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0426             .include "lib/string.asm"
0001++ 0426             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0426             ; string.s
0003++ 0426             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0426             
0005++ 0426             
0006++ 0426             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0426             ; _strrev
0008++ 0426             ; reverse a string
0009++ 0426             ; D = string address
0010++ 0426             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0426             ; 01234
0012++ 0426             _strrev:
0013++ 0426 4B          	pusha
0014++ 0427 07 6D 04    	call _strlen	; length in C
0015++ 042A 12          	mov a, c
0016++ 042B AF 01 00    	cmp a, 1
0017++ 042E D0 48 04    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0431 7D          	dec a
0019++ 0432 FD 4E       	mov si, d	; beginning of string
0020++ 0434 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0436 59          	add d, a	; end of string
0022++ 0437 12          	mov a, c
0023++ 0438 FD 9B       	shr a		; divide by 2
0024++ 043A 39          	mov c, a	; C now counts the steps
0025++ 043B             _strrev_L0:
0026++ 043B 32          	mov bl, [d]	; save load right-side char into BL
0027++ 043C F6          	lodsb		; load left-side char into AL; increase SI
0028++ 043D 3E          	mov [d], al	; store left char into right side
0029++ 043E 1B          	mov al, bl
0030++ 043F F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0440 7E          	dec c
0032++ 0441 7F          	dec d
0033++ 0442 C2 00 00    	cmp c, 0
0034++ 0445 C7 3B 04    	jne _strrev_L0
0035++ 0448             _strrev_end:
0036++ 0448 4C          	popa
0037++ 0449 09          	ret
0038++ 044A             	
0039++ 044A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 044A             ; _strchr
0041++ 044A             ; search string in D for char in AL
0042++ 044A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 044A             _strchr:
0044++ 044A             _strchr_L0:
0045++ 044A 32          	mov bl, [d]
0046++ 044B C1 00       	cmp bl, 0
0047++ 044D C6 58 04    	je _strchr_end
0048++ 0450 BA          	cmp al, bl
0049++ 0451 C6 58 04    	je _strchr_end
0050++ 0454 79          	inc d
0051++ 0455 0A 4A 04    	jmp _strchr_L0
0052++ 0458             _strchr_end:
0053++ 0458 1B          	mov al, bl
0054++ 0459 09          	ret
0055++ 045A             
0056++ 045A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 045A             ; _strstr
0058++ 045A             ; find sub-string
0059++ 045A             ; str1 in SI
0060++ 045A             ; str2 in DI
0061++ 045A             ; SI points to end of source string
0062++ 045A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 045A             _strstr:
0064++ 045A DB          	push al
0065++ 045B DA          	push d
0066++ 045C E3          	push di
0067++ 045D             _strstr_loop:
0068++ 045D F3          	cmpsb					; compare a byte of the strings
0069++ 045E C7 69 04    	jne _strstr_ret
0070++ 0461 FC 00 00    	lea d, [di + 0]
0071++ 0464 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0466 C7 5D 04    	jne _strstr_loop				; equal chars but not at end
0073++ 0469             _strstr_ret:
0074++ 0469 F0          	pop di
0075++ 046A E7          	pop d
0076++ 046B E8          	pop al
0077++ 046C 09          	ret
0078++ 046D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 046D             ; length of null terminated string
0080++ 046D             ; result in C
0081++ 046D             ; pointer in D
0082++ 046D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 046D             _strlen:
0084++ 046D DA          	push d
0085++ 046E 38 00 00    	mov c, 0
0086++ 0471             _strlen_L1:
0087++ 0471 BD 00       	cmp byte [d], 0
0088++ 0473 C6 7B 04    	je _strlen_ret
0089++ 0476 79          	inc d
0090++ 0477 78          	inc c
0091++ 0478 0A 71 04    	jmp _strlen_L1
0092++ 047B             _strlen_ret:
0093++ 047B E7          	pop d
0094++ 047C 09          	ret
0095++ 047D             
0096++ 047D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 047D             ; STRCMP
0098++ 047D             ; compare two strings
0099++ 047D             ; str1 in SI
0100++ 047D             ; str2 in DI
0101++ 047D             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 047D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 047D             _strcmp:
0104++ 047D DB          	push al
0105++ 047E DA          	push d
0106++ 047F E3          	push di
0107++ 0480 E2          	push si
0108++ 0481             _strcmp_loop:
0109++ 0481 F3          	cmpsb					; compare a byte of the strings
0110++ 0482 C7 8D 04    	jne _strcmp_ret
0111++ 0485 FB FF FF    	lea d, [si +- 1]
0112++ 0488 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 048A C7 81 04    	jne _strcmp_loop				; equal chars but not at end
0114++ 048D             _strcmp_ret:
0115++ 048D EF          	pop si
0116++ 048E F0          	pop di
0117++ 048F E7          	pop d
0118++ 0490 E8          	pop al
0119++ 0491 09          	ret
0120++ 0492             
0121++ 0492             
0122++ 0492             ; STRCPY
0123++ 0492             ; copy null terminated string from SI to DI
0124++ 0492             ; source in SI
0125++ 0492             ; destination in DI
0126++ 0492             _strcpy:
0127++ 0492 E2          	push si
0128++ 0493 E3          	push di
0129++ 0494 DB          	push al
0130++ 0495             _strcpy_L1:
0131++ 0495 F6          	lodsb
0132++ 0496 F7          	stosb
0133++ 0497 B9 00       	cmp al, 0
0134++ 0499 C7 95 04    	jne _strcpy_L1
0135++ 049C             _strcpy_end:
0136++ 049C E8          	pop al
0137++ 049D F0          	pop di
0138++ 049E EF          	pop si
0139++ 049F 09          	ret
0140++ 04A0             
0141++ 04A0             ; STRCAT
0142++ 04A0             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04A0             ; source in SI
0144++ 04A0             ; destination in DI
0145++ 04A0             _strcat:
0146++ 04A0 E2          	push si
0147++ 04A1 E3          	push di
0148++ 04A2 D7          	push a
0149++ 04A3 DA          	push d
0150++ 04A4 50          	mov a, di
0151++ 04A5 3C          	mov d, a
0152++ 04A6             _strcat_goto_end_L1:
0153++ 04A6 BD 00       	cmp byte[d], 0
0154++ 04A8 C6 AF 04    	je _strcat_start
0155++ 04AB 79          	inc d
0156++ 04AC 0A A6 04    	jmp _strcat_goto_end_L1
0157++ 04AF             _strcat_start:
0158++ 04AF FD 50       	mov di, d
0159++ 04B1             _strcat_L1:
0160++ 04B1 F6          	lodsb
0161++ 04B2 F7          	stosb
0162++ 04B3 B9 00       	cmp al, 0
0163++ 04B5 C7 B1 04    	jne _strcat_L1
0164++ 04B8             _strcat_end:
0165++ 04B8 E7          	pop d
0166++ 04B9 E4          	pop a
0167++ 04BA F0          	pop di
0168++ 04BB EF          	pop si
0169++ 04BC 09          	ret
0170++ 04BD             
0171++ 04BD             
0005+  04BD             
0006+  04BD             
0007+  04BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  04BD             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  04BD             ; ASCII in BL
0010+  04BD             ; result in AL
0011+  04BD             ; ascii for F = 0100 0110
0012+  04BD             ; ascii for 9 = 0011 1001
0013+  04BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  04BD             hex_ascii_encode:
0015+  04BD 1B            mov al, bl
0016+  04BE 93 40         test al, $40        ; test if letter or number
0017+  04C0 C7 C6 04      jnz hex_letter
0018+  04C3 87 0F         and al, $0F        ; get number
0019+  04C5 09            ret
0020+  04C6             hex_letter:
0021+  04C6 87 0F         and al, $0F        ; get letter
0022+  04C8 6A 09         add al, 9
0023+  04CA 09            ret
0024+  04CB             
0025+  04CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  04CB             ; ATOI
0027+  04CB             ; 2 letter hex string in B
0028+  04CB             ; 8bit integer returned in AL
0029+  04CB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  04CB             _atoi:
0031+  04CB D8            push b
0032+  04CC 07 BD 04      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  04CF 30            mov bl, bh
0034+  04D0 DB            push al          ; save a
0035+  04D1 07 BD 04      call hex_ascii_encode
0036+  04D4 EA            pop bl  
0037+  04D5 FD 9E 04      shl al, 4
0038+  04D8 8C            or al, bl
0039+  04D9 E5            pop b
0040+  04DA 09            ret  
0041+  04DB             
0042+  04DB             
0043+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  04DB             ; scanf
0045+  04DB             ; no need for explanations!
0046+  04DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  04DB             scanf:
0048+  04DB 09            ret
0049+  04DC             
0050+  04DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04DC             ; ITOA
0052+  04DC             ; 8bit value in BL
0053+  04DC             ; 2 byte ASCII result in A
0054+  04DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04DC             _itoa:
0056+  04DC DA            push d
0057+  04DD D8            push b
0058+  04DE A7 00         mov bh, 0
0059+  04E0 FD A4 04      shr bl, 4  
0060+  04E3 74            mov d, b
0061+  04E4 1F 76 07      mov al, [d + s_hex_digits]
0062+  04E7 23            mov ah, al
0063+  04E8               
0064+  04E8 E5            pop b
0065+  04E9 D8            push b
0066+  04EA A7 00         mov bh, 0
0067+  04EC FD 87 0F      and bl, $0F
0068+  04EF 74            mov d, b
0069+  04F0 1F 76 07      mov al, [d + s_hex_digits]
0070+  04F3 E5            pop b
0071+  04F4 E7            pop d
0072+  04F5 09            ret
0073+  04F6             
0074+  04F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  04F6             ; HEX STRING TO BINARY
0076+  04F6             ; di = destination address
0077+  04F6             ; si = source
0078+  04F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  04F6             _hex_to_int:
0080+  04F6             _hex_to_int_L1:
0081+  04F6 F6            lodsb          ; load from [SI] to AL
0082+  04F7 B9 00         cmp al, 0        ; check if ASCII 0
0083+  04F9 C6 06 05      jz _hex_to_int_ret
0084+  04FC 36            mov bh, al
0085+  04FD F6            lodsb
0086+  04FE 2F            mov bl, al
0087+  04FF 07 CB 04      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  0502 F7            stosb          ; store AL to [DI]
0089+  0503 0A F6 04      jmp _hex_to_int_L1
0090+  0506             _hex_to_int_ret:
0091+  0506 09            ret    
0092+  0507             
0093+  0507             
0094+  0507             
0095+  0507             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0507             ; GETCHAR
0097+  0507             ; char in ah
0098+  0507             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0507             getch:
0100+  0507 DB            push al
0101+  0508             getch_retry:
0102+  0508 19 01         mov al, 1
0103+  050A 05 03         syscall sys_io      ; receive in AH
0104+  050C E8            pop al
0105+  050D 09            ret
0106+  050E             
0107+  050E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  050E             ; PUTCHAR
0109+  050E             ; char in ah
0110+  050E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  050E             _putchar:
0112+  050E DB            push al
0113+  050F 19 00         mov al, 0
0114+  0511 05 03         syscall sys_io      ; char in AH
0115+  0513 E8            pop al
0116+  0514 09            ret
0117+  0515             
0118+  0515             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0515             ;; INPUT A STRING
0120+  0515             ;; terminates with null
0121+  0515             ;; pointer in D
0122+  0515             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0515             _gets:
0124+  0515 D7            push a
0125+  0516 DA            push d
0126+  0517             _gets_loop:
0127+  0517 19 01         mov al, 1
0128+  0519 05 03         syscall sys_io      ; receive in AH
0129+  051B 76 1B         cmp ah, 27
0130+  051D C6 3E 05      je _gets_ansi_esc
0131+  0520 76 0A         cmp ah, $0A        ; LF
0132+  0522 C6 9A 05      je _gets_end
0133+  0525 76 0D         cmp ah, $0D        ; CR
0134+  0527 C6 9A 05      je _gets_end
0135+  052A 76 5C         cmp ah, $5C        ; '\\'
0136+  052C C6 60 05      je _gets_escape
0137+  052F 76 08         cmp ah, $08      ; check for backspace
0138+  0531 C6 3A 05      je _gets_backspace
0139+  0534 1A            mov al, ah
0140+  0535 3E            mov [d], al
0141+  0536 79            inc d
0142+  0537 0A 17 05      jmp _gets_loop
0143+  053A             _gets_backspace:
0144+  053A 7F            dec d
0145+  053B 0A 17 05      jmp _gets_loop
0146+  053E             _gets_ansi_esc:
0147+  053E 19 01         mov al, 1
0148+  0540 05 03         syscall sys_io        ; receive in AH without echo
0149+  0542 76 5B         cmp ah, '['
0150+  0544 C7 17 05      jne _gets_loop
0151+  0547 19 01         mov al, 1
0152+  0549 05 03         syscall sys_io          ; receive in AH without echo
0153+  054B 76 44         cmp ah, 'D'
0154+  054D C6 58 05      je _gets_left_arrow
0155+  0550 76 43         cmp ah, 'C'
0156+  0552 C6 5C 05      je _gets_right_arrow
0157+  0555 0A 17 05      jmp _gets_loop
0158+  0558             _gets_left_arrow:
0159+  0558 7F            dec d
0160+  0559 0A 17 05      jmp _gets_loop
0161+  055C             _gets_right_arrow:
0162+  055C 79            inc d
0163+  055D 0A 17 05      jmp _gets_loop
0164+  0560             _gets_escape:
0165+  0560 19 01         mov al, 1
0166+  0562 05 03         syscall sys_io      ; receive in AH
0167+  0564 76 6E         cmp ah, 'n'
0168+  0566 C6 85 05      je _gets_LF
0169+  0569 76 72         cmp ah, 'r'
0170+  056B C6 8C 05      je _gets_CR
0171+  056E 76 30         cmp ah, '0'
0172+  0570 C6 93 05      je _gets_NULL
0173+  0573 76 5C         cmp ah, $5C  ; '\'
0174+  0575 C6 7E 05      je _gets_slash
0175+  0578 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  0579 3E            mov [d], al
0177+  057A 79            inc d
0178+  057B 0A 17 05      jmp _gets_loop
0179+  057E             _gets_slash:
0180+  057E 19 5C         mov al, $5C
0181+  0580 3E            mov [d], al
0182+  0581 79            inc d
0183+  0582 0A 17 05      jmp _gets_loop
0184+  0585             _gets_LF:
0185+  0585 19 0A         mov al, $0A
0186+  0587 3E            mov [d], al
0187+  0588 79            inc d
0188+  0589 0A 17 05      jmp _gets_loop
0189+  058C             _gets_CR:
0190+  058C 19 0D         mov al, $0D
0191+  058E 3E            mov [d], al
0192+  058F 79            inc d
0193+  0590 0A 17 05      jmp _gets_loop
0194+  0593             _gets_NULL:
0195+  0593 19 00         mov al, $00
0196+  0595 3E            mov [d], al
0197+  0596 79            inc d
0198+  0597 0A 17 05      jmp _gets_loop
0199+  059A             _gets_end:
0200+  059A 19 00         mov al, 0
0201+  059C 3E            mov [d], al        ; terminate string
0202+  059D E7            pop d
0203+  059E E4            pop a
0204+  059F 09            ret
0205+  05A0             
0206+  05A0             
0207+  05A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  05A0             ;; INPUT TEXT
0209+  05A0             ;; terminated with CTRL+D
0210+  05A0             ;; pointer in D
0211+  05A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  05A0             _gettxt:
0213+  05A0 D7            push a
0214+  05A1 DA            push d
0215+  05A2             _gettxt_loop:
0216+  05A2 19 01         mov al, 1
0217+  05A4 05 03         syscall sys_io      ; receive in AH
0218+  05A6 76 04         cmp ah, 4      ; EOT
0219+  05A8 C6 E1 05      je _gettxt_end
0220+  05AB 76 08         cmp ah, $08      ; check for backspace
0221+  05AD C6 DD 05      je _gettxt_backspace
0222+  05B0 76 5C         cmp ah, $5C        ; '\'
0223+  05B2 C6 BB 05      je _gettxt_escape
0224+  05B5 1A            mov al, ah
0225+  05B6 3E            mov [d], al
0226+  05B7 79            inc d
0227+  05B8 0A A2 05      jmp _gettxt_loop
0228+  05BB             _gettxt_escape:
0229+  05BB 19 01         mov al, 1
0230+  05BD 05 03         syscall sys_io      ; receive in AH
0231+  05BF 76 6E         cmp ah, 'n'
0232+  05C1 C6 CF 05      je _gettxt_LF
0233+  05C4 76 72         cmp ah, 'r'
0234+  05C6 C6 D6 05      je _gettxt_CR
0235+  05C9 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  05CA 3E            mov [d], al
0237+  05CB 79            inc d
0238+  05CC 0A A2 05      jmp _gettxt_loop
0239+  05CF             _gettxt_LF:
0240+  05CF 19 0A         mov al, $0A
0241+  05D1 3E            mov [d], al
0242+  05D2 79            inc d
0243+  05D3 0A A2 05      jmp _gettxt_loop
0244+  05D6             _gettxt_CR:
0245+  05D6 19 0D         mov al, $0D
0246+  05D8 3E            mov [d], al
0247+  05D9 79            inc d
0248+  05DA 0A A2 05      jmp _gettxt_loop
0249+  05DD             _gettxt_backspace:
0250+  05DD 7F            dec d
0251+  05DE 0A A2 05      jmp _gettxt_loop
0252+  05E1             _gettxt_end:
0253+  05E1 19 00         mov al, 0
0254+  05E3 3E            mov [d], al        ; terminate string
0255+  05E4 E7            pop d
0256+  05E5 E4            pop a
0257+  05E6 09            ret
0258+  05E7             
0259+  05E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  05E7             ; PRINT NEW LINE
0261+  05E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  05E7             printnl:
0263+  05E7 D7            push a
0264+  05E8 10 00 0A      mov a, $0A00
0265+  05EB 05 03         syscall sys_io
0266+  05ED 10 00 0D      mov a, $0D00
0267+  05F0 05 03         syscall sys_io
0268+  05F2 E4            pop a
0269+  05F3 09            ret
0270+  05F4             
0271+  05F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  05F4             ; _strtoint
0273+  05F4             ; 4 digit hex string number in d
0274+  05F4             ; integer returned in A
0275+  05F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  05F4             _strtointx:
0277+  05F4 D8            push b
0278+  05F5 32            mov bl, [d]
0279+  05F6 37            mov bh, bl
0280+  05F7 33 01 00      mov bl, [d + 1]
0281+  05FA 07 CB 04      call _atoi        ; convert to int in AL
0282+  05FD 23            mov ah, al        ; move to AH
0283+  05FE 33 02 00      mov bl, [d + 2]
0284+  0601 37            mov bh, bl
0285+  0602 33 03 00      mov bl, [d + 3]
0286+  0605 07 CB 04      call _atoi        ; convert to int in AL
0287+  0608 E5            pop b
0288+  0609 09            ret
0289+  060A             
0290+  060A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  060A             ; _strtoint
0292+  060A             ; 5 digit base10 string number in d
0293+  060A             ; integer returned in A
0294+  060A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  060A             _strtoint:
0296+  060A E2            push si
0297+  060B D8            push b
0298+  060C D9            push c
0299+  060D DA            push d
0300+  060E 07 6D 04      call _strlen      ; get string length in C
0301+  0611 7E            dec c
0302+  0612 FD 4E         mov si, d
0303+  0614 12            mov a, c
0304+  0615 FD 99         shl a
0305+  0617 3B 8E 07      mov d, table_power
0306+  061A 59            add d, a
0307+  061B 38 00 00      mov c, 0
0308+  061E             _strtoint_L0:
0309+  061E F6            lodsb      ; load ASCII to al
0310+  061F B9 00         cmp al, 0
0311+  0621 C6 34 06      je _strtoint_end
0312+  0624 6F 30         sub al, $30    ; make into integer
0313+  0626 22 00         mov ah, 0
0314+  0628 2A            mov b, [d]
0315+  0629 AC            mul a, b      ; result in B since it fits in 16bits
0316+  062A 11            mov a, b
0317+  062B 28            mov b, c
0318+  062C 54            add a, b
0319+  062D 39            mov c, a
0320+  062E 63 02 00      sub d, 2
0321+  0631 0A 1E 06      jmp _strtoint_L0
0322+  0634             _strtoint_end:
0323+  0634 12            mov a, c
0324+  0635 E7            pop d
0325+  0636 E6            pop c
0326+  0637 E5            pop b
0327+  0638 EF            pop si
0328+  0639 09            ret
0329+  063A             
0330+  063A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  063A             ; PRINT NULL TERMINATED STRING
0332+  063A             ; pointer in D
0333+  063A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  063A             _puts:
0335+  063A D7            push a
0336+  063B DA            push d
0337+  063C             _puts_L1:
0338+  063C 1E            mov al, [d]
0339+  063D B9 00         cmp al, 0
0340+  063F C6 4B 06      jz _puts_END
0341+  0642 23            mov ah, al
0342+  0643 19 00         mov al, 0
0343+  0645 05 03         syscall sys_io
0344+  0647 79            inc d
0345+  0648 0A 3C 06      jmp _puts_L1
0346+  064B             _puts_END:
0347+  064B E7            pop d
0348+  064C E4            pop a
0349+  064D 09            ret
0350+  064E             
0351+  064E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  064E             ; PRINT N SIZE STRING
0353+  064E             ; pointer in D
0354+  064E             ; size in C
0355+  064E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  064E             _putsn:
0357+  064E DB            push al
0358+  064F DA            push d
0359+  0650 D9            push c
0360+  0651             _putsn_L0:
0361+  0651 1E            mov al, [d]
0362+  0652 23            mov ah, al
0363+  0653 19 00         mov al, 0
0364+  0655 05 03         syscall sys_io
0365+  0657 79            inc d
0366+  0658 7E            dec c  
0367+  0659 C2 00 00      cmp c, 0
0368+  065C C7 51 06      jne _putsn_L0
0369+  065F             _putsn_end:
0370+  065F E6            pop c
0371+  0660 E7            pop d
0372+  0661 E8            pop al
0373+  0662 09            ret
0374+  0663             
0375+  0663             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  0663             ; print 16bit decimal number
0377+  0663             ; input number in A
0378+  0663             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0663             print_u16d:
0380+  0663 D7            push a
0381+  0664 D8            push b
0382+  0665 FD D8         push g
0383+  0667 26 10 27      mov b, 10000
0384+  066A AE            div a, b      ; get 10000's coeff.
0385+  066B 07 8F 06      call print_number
0386+  066E 11            mov a, b
0387+  066F 26 E8 03      mov b, 1000
0388+  0672 AE            div a, b      ; get 1000's coeff.
0389+  0673 07 8F 06      call print_number
0390+  0676 11            mov a, b
0391+  0677 26 64 00      mov b, 100
0392+  067A AE            div a, b
0393+  067B 07 8F 06      call print_number
0394+  067E 11            mov a, b
0395+  067F 26 0A 00      mov b, 10
0396+  0682 AE            div a, b
0397+  0683 07 8F 06      call print_number
0398+  0686 1B            mov al, bl      ; 1's coeff in bl
0399+  0687 07 8F 06      call print_number
0400+  068A FD F1         pop g
0401+  068C E5            pop b
0402+  068D E4            pop a
0403+  068E 09            ret
0404+  068F             
0405+  068F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  068F             ; print AL
0407+  068F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  068F             print_number:
0409+  068F 6A 30         add al, $30
0410+  0691 23            mov ah, al
0411+  0692 07 0E 05      call _putchar
0412+  0695 09            ret
0413+  0696             
0414+  0696             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  0696             ; PRINT 16BIT HEX INTEGER
0416+  0696             ; integer value in reg B
0417+  0696             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  0696             print_u16x:
0419+  0696 D7            push a
0420+  0697 D8            push b
0421+  0698 DD            push bl
0422+  0699 30            mov bl, bh
0423+  069A 07 DC 04      call _itoa        ; convert bh to char in A
0424+  069D 2F            mov bl, al        ; save al
0425+  069E 19 00         mov al, 0
0426+  06A0 05 03         syscall sys_io        ; display AH
0427+  06A2 24            mov ah, bl        ; retrieve al
0428+  06A3 19 00         mov al, 0
0429+  06A5 05 03         syscall sys_io        ; display AL
0430+  06A7             
0431+  06A7 EA            pop bl
0432+  06A8 07 DC 04      call _itoa        ; convert bh to char in A
0433+  06AB 2F            mov bl, al        ; save al
0434+  06AC 19 00         mov al, 0
0435+  06AE 05 03         syscall sys_io        ; display AH
0436+  06B0 24            mov ah, bl        ; retrieve al
0437+  06B1 19 00         mov al, 0
0438+  06B3 05 03         syscall sys_io        ; display AL
0439+  06B5             
0440+  06B5 E5            pop b
0441+  06B6 E4            pop a
0442+  06B7 09            ret
0443+  06B8             
0444+  06B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06B8             ; INPUT 16BIT HEX INTEGER
0446+  06B8             ; read 16bit integer into A
0447+  06B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06B8             scan_u16x:
0449+  06B8 F8 10 00      enter 16
0450+  06BB D8            push b
0451+  06BC DA            push d
0452+  06BD             
0453+  06BD FA F1 FF      lea d, [bp + -15]
0454+  06C0 07 15 05      call _gets        ; get number
0455+  06C3             
0456+  06C3 32            mov bl, [d]
0457+  06C4 37            mov bh, bl
0458+  06C5 33 01 00      mov bl, [d + 1]
0459+  06C8 07 CB 04      call _atoi        ; convert to int in AL
0460+  06CB 23            mov ah, al        ; move to AH
0461+  06CC             
0462+  06CC 33 02 00      mov bl, [d + 2]
0463+  06CF 37            mov bh, bl
0464+  06D0 33 03 00      mov bl, [d + 3]
0465+  06D3 07 CB 04      call _atoi        ; convert to int in AL
0466+  06D6             
0467+  06D6 E7            pop d
0468+  06D7 E5            pop b
0469+  06D8 F9            leave
0470+  06D9 09            ret
0471+  06DA             
0472+  06DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  06DA             ; PRINT 8bit HEX INTEGER
0474+  06DA             ; integer value in reg bl
0475+  06DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06DA             print_u8x:
0477+  06DA D7            push a
0478+  06DB DD            push bl
0479+  06DC             
0480+  06DC 07 DC 04      call _itoa        ; convert bl to char in A
0481+  06DF 2F            mov bl, al        ; save al
0482+  06E0 19 00         mov al, 0
0483+  06E2 05 03         syscall sys_io        ; display AH
0484+  06E4 24            mov ah, bl        ; retrieve al
0485+  06E5 19 00         mov al, 0
0486+  06E7 05 03         syscall sys_io        ; display AL
0487+  06E9             
0488+  06E9 EA            pop bl
0489+  06EA E4            pop a
0490+  06EB 09            ret
0491+  06EC             
0492+  06EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  06EC             ; print 8bit decimal unsigned number
0494+  06EC             ; input number in AL
0495+  06EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  06EC             print_u8d:
0497+  06EC D7            push a
0498+  06ED D8            push b
0499+  06EE FD D8         push g
0500+  06F0 22 00         mov ah, 0
0501+  06F2 26 64 00      mov b, 100
0502+  06F5 AE            div a, b
0503+  06F6 D8            push b      ; save remainder
0504+  06F7 B9 00         cmp al, 0
0505+  06F9 C6 03 07      je skip100
0506+  06FC 6A 30         add al, $30
0507+  06FE 23            mov ah, al
0508+  06FF 19 00         mov al, 0
0509+  0701 05 03         syscall sys_io  ; print coeff
0510+  0703             skip100:
0511+  0703 E4            pop a
0512+  0704 22 00         mov ah, 0
0513+  0706 26 0A 00      mov b, 10
0514+  0709 AE            div a, b
0515+  070A D8            push b      ; save remainder
0516+  070B B9 00         cmp al, 0
0517+  070D C6 17 07      je skip10
0518+  0710 6A 30         add al, $30
0519+  0712 23            mov ah, al
0520+  0713 19 00         mov al, 0
0521+  0715 05 03         syscall sys_io  ; print coeff
0522+  0717             skip10:
0523+  0717 E4            pop a
0524+  0718 1B            mov al, bl
0525+  0719 6A 30         add al, $30
0526+  071B 23            mov ah, al
0527+  071C 19 00         mov al, 0
0528+  071E 05 03         syscall sys_io  ; print coeff
0529+  0720 FD F1         pop g
0530+  0722 E5            pop b
0531+  0723 E4            pop a
0532+  0724 09            ret
0533+  0725             
0534+  0725             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0725             ; INPUT 8BIT HEX INTEGER
0536+  0725             ; read 8bit integer into AL
0537+  0725             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0725             scan_u8x:
0539+  0725 F8 04 00      enter 4
0540+  0728 D8            push b
0541+  0729 DA            push d
0542+  072A             
0543+  072A FA FD FF      lea d, [bp + -3]
0544+  072D 07 15 05      call _gets        ; get number
0545+  0730             
0546+  0730 32            mov bl, [d]
0547+  0731 37            mov bh, bl
0548+  0732 33 01 00      mov bl, [d + 1]
0549+  0735 07 CB 04      call _atoi        ; convert to int in AL
0550+  0738             
0551+  0738 E7            pop d
0552+  0739 E5            pop b
0553+  073A F9            leave
0554+  073B 09            ret
0555+  073C             
0556+  073C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  073C             ; input decimal number
0558+  073C             ; result in A
0559+  073C             ; 655'\0'
0560+  073C             ; low--------high
0561+  073C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  073C             scan_u16d:
0563+  073C F8 08 00      enter 8
0564+  073F E2            push si
0565+  0740 D8            push b
0566+  0741 D9            push c
0567+  0742 DA            push d
0568+  0743 FA F9 FF      lea d, [bp +- 7]
0569+  0746 07 15 05      call _gets
0570+  0749 07 6D 04      call _strlen      ; get string length in C
0571+  074C 7E            dec c
0572+  074D FD 4E         mov si, d
0573+  074F 12            mov a, c
0574+  0750 FD 99         shl a
0575+  0752 3B 8E 07      mov d, table_power
0576+  0755 59            add d, a
0577+  0756 38 00 00      mov c, 0
0578+  0759             mul_loop:
0579+  0759 F6            lodsb      ; load ASCII to al
0580+  075A B9 00         cmp al, 0
0581+  075C C6 6F 07      je mul_exit
0582+  075F 6F 30         sub al, $30    ; make into integer
0583+  0761 22 00         mov ah, 0
0584+  0763 2A            mov b, [d]
0585+  0764 AC            mul a, b      ; result in B since it fits in 16bits
0586+  0765 11            mov a, b
0587+  0766 28            mov b, c
0588+  0767 54            add a, b
0589+  0768 39            mov c, a
0590+  0769 63 02 00      sub d, 2
0591+  076C 0A 59 07      jmp mul_loop
0592+  076F             mul_exit:
0593+  076F 12            mov a, c
0594+  0770 E7            pop d
0595+  0771 E6            pop c
0596+  0772 E5            pop b
0597+  0773 EF            pop si
0598+  0774 F9            leave
0599+  0775 09            ret
0600+  0776             
0601+  0776             
0602+  0776 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0602+  077A 34 35 36 37 
0602+  077E 38 39 41 42 
0602+  0782 43 44 45 46 
0603+  0786 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0603+  078A 1B 5B 48 00 
0604+  078E             
0605+  078E             table_power:
0606+  078E 01 00         .dw 1
0607+  0790 0A 00         .dw 10
0608+  0792 64 00         .dw 100
0609+  0794 E8 03         .dw 1000
0610+  0796 10 27         .dw 100000030   0798             .end
tasm: Number of errors = 0
