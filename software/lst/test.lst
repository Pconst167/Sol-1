0001   0000             .include "lib/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_spawn_proc   .EQU  $0005
0007+  0000             sys_list         .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             text_org         .EQU  $0400
0002   0400             .org text_org
0003   0400             
0004   0400             ; --- BEGIN TEXT BLOCK
0005   0400             main:
0006   0400 FD 49 FF FF   mov bp, $FFFF
0007   0404 FD 47 FF FF   mov sp, $FFFF
0008   0408             
0009   0408 07 E5 05      call printnl
0010   040B             
0011   040B             
0012   040B 10 08 00      mov a, $8
0013   040E FD 22 02 00   mov g, $2
0014   0412 3A 02         mov cl, 2
0015   0414 FD 1E         shr32 ga
0016   0416 FD 27         mov b, g
0017   0418 07 94 06      call print_u16x
0018   041B 27            mov b, a
0019   041C 07 94 06      call print_u16x
0020   041F 07 E5 05      call printnl
0021   0422             
0022   0422             
0023   0422             
0024   0422             
0025   0422             
0026   0422 05 0B         syscall sys_terminate_proc
0027   0424             
0028   0424             .include "lib/stdio.asm"
0001+  0424             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0424             ; stdio.s
0003+  0424             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0424             .include "lib/string.asm"
0001++ 0424             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0424             ; string.s
0003++ 0424             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0424             
0005++ 0424             
0006++ 0424             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0424             ; _strrev
0008++ 0424             ; reverse a string
0009++ 0424             ; D = string address
0010++ 0424             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0424             ; 01234
0012++ 0424             _strrev:
0013++ 0424 4B          	pusha
0014++ 0425 07 6B 04    	call _strlen	; length in C
0015++ 0428 12          	mov a, c
0016++ 0429 AF 01 00    	cmp a, 1
0017++ 042C D0 46 04    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 042F 7D          	dec a
0019++ 0430 FD 4E       	mov si, d	; beginning of string
0020++ 0432 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0434 59          	add d, a	; end of string
0022++ 0435 12          	mov a, c
0023++ 0436 FD 9B       	shr a		; divide by 2
0024++ 0438 39          	mov c, a	; C now counts the steps
0025++ 0439             _strrev_L0:
0026++ 0439 32          	mov bl, [d]	; save load right-side char into BL
0027++ 043A F6          	lodsb		; load left-side char into AL; increase SI
0028++ 043B 3E          	mov [d], al	; store left char into right side
0029++ 043C 1B          	mov al, bl
0030++ 043D F7          	stosb		; store right-side char into left-side; increase DI
0031++ 043E 7E          	dec c
0032++ 043F 7F          	dec d
0033++ 0440 C2 00 00    	cmp c, 0
0034++ 0443 C7 39 04    	jne _strrev_L0
0035++ 0446             _strrev_end:
0036++ 0446 4C          	popa
0037++ 0447 09          	ret
0038++ 0448             	
0039++ 0448             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0448             ; _strchr
0041++ 0448             ; search string in D for char in AL
0042++ 0448             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0448             _strchr:
0044++ 0448             _strchr_L0:
0045++ 0448 32          	mov bl, [d]
0046++ 0449 C1 00       	cmp bl, 0
0047++ 044B C6 56 04    	je _strchr_end
0048++ 044E BA          	cmp al, bl
0049++ 044F C6 56 04    	je _strchr_end
0050++ 0452 79          	inc d
0051++ 0453 0A 48 04    	jmp _strchr_L0
0052++ 0456             _strchr_end:
0053++ 0456 1B          	mov al, bl
0054++ 0457 09          	ret
0055++ 0458             
0056++ 0458             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0458             ; _strstr
0058++ 0458             ; find sub-string
0059++ 0458             ; str1 in SI
0060++ 0458             ; str2 in DI
0061++ 0458             ; SI points to end of source string
0062++ 0458             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0458             _strstr:
0064++ 0458 DB          	push al
0065++ 0459 DA          	push d
0066++ 045A E3          	push di
0067++ 045B             _strstr_loop:
0068++ 045B F3          	cmpsb					; compare a byte of the strings
0069++ 045C C7 67 04    	jne _strstr_ret
0070++ 045F FC 00 00    	lea d, [di + 0]
0071++ 0462 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0464 C7 5B 04    	jne _strstr_loop				; equal chars but not at end
0073++ 0467             _strstr_ret:
0074++ 0467 F0          	pop di
0075++ 0468 E7          	pop d
0076++ 0469 E8          	pop al
0077++ 046A 09          	ret
0078++ 046B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 046B             ; length of null terminated string
0080++ 046B             ; result in C
0081++ 046B             ; pointer in D
0082++ 046B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 046B             _strlen:
0084++ 046B DA          	push d
0085++ 046C 38 00 00    	mov c, 0
0086++ 046F             _strlen_L1:
0087++ 046F BD 00       	cmp byte [d], 0
0088++ 0471 C6 79 04    	je _strlen_ret
0089++ 0474 79          	inc d
0090++ 0475 78          	inc c
0091++ 0476 0A 6F 04    	jmp _strlen_L1
0092++ 0479             _strlen_ret:
0093++ 0479 E7          	pop d
0094++ 047A 09          	ret
0095++ 047B             
0096++ 047B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 047B             ; STRCMP
0098++ 047B             ; compare two strings
0099++ 047B             ; str1 in SI
0100++ 047B             ; str2 in DI
0101++ 047B             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 047B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 047B             _strcmp:
0104++ 047B DB          	push al
0105++ 047C DA          	push d
0106++ 047D E3          	push di
0107++ 047E E2          	push si
0108++ 047F             _strcmp_loop:
0109++ 047F F3          	cmpsb					; compare a byte of the strings
0110++ 0480 C7 8B 04    	jne _strcmp_ret
0111++ 0483 FB FF FF    	lea d, [si +- 1]
0112++ 0486 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0488 C7 7F 04    	jne _strcmp_loop				; equal chars but not at end
0114++ 048B             _strcmp_ret:
0115++ 048B EF          	pop si
0116++ 048C F0          	pop di
0117++ 048D E7          	pop d
0118++ 048E E8          	pop al
0119++ 048F 09          	ret
0120++ 0490             
0121++ 0490             
0122++ 0490             ; STRCPY
0123++ 0490             ; copy null terminated string from SI to DI
0124++ 0490             ; source in SI
0125++ 0490             ; destination in DI
0126++ 0490             _strcpy:
0127++ 0490 E2          	push si
0128++ 0491 E3          	push di
0129++ 0492 DB          	push al
0130++ 0493             _strcpy_L1:
0131++ 0493 F6          	lodsb
0132++ 0494 F7          	stosb
0133++ 0495 B9 00       	cmp al, 0
0134++ 0497 C7 93 04    	jne _strcpy_L1
0135++ 049A             _strcpy_end:
0136++ 049A E8          	pop al
0137++ 049B F0          	pop di
0138++ 049C EF          	pop si
0139++ 049D 09          	ret
0140++ 049E             
0141++ 049E             ; STRCAT
0142++ 049E             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 049E             ; source in SI
0144++ 049E             ; destination in DI
0145++ 049E             _strcat:
0146++ 049E E2          	push si
0147++ 049F E3          	push di
0148++ 04A0 D7          	push a
0149++ 04A1 DA          	push d
0150++ 04A2 50          	mov a, di
0151++ 04A3 3C          	mov d, a
0152++ 04A4             _strcat_goto_end_L1:
0153++ 04A4 BD 00       	cmp byte[d], 0
0154++ 04A6 C6 AD 04    	je _strcat_start
0155++ 04A9 79          	inc d
0156++ 04AA 0A A4 04    	jmp _strcat_goto_end_L1
0157++ 04AD             _strcat_start:
0158++ 04AD FD 50       	mov di, d
0159++ 04AF             _strcat_L1:
0160++ 04AF F6          	lodsb
0161++ 04B0 F7          	stosb
0162++ 04B1 B9 00       	cmp al, 0
0163++ 04B3 C7 AF 04    	jne _strcat_L1
0164++ 04B6             _strcat_end:
0165++ 04B6 E7          	pop d
0166++ 04B7 E4          	pop a
0167++ 04B8 F0          	pop di
0168++ 04B9 EF          	pop si
0169++ 04BA 09          	ret
0170++ 04BB             
0171++ 04BB             
0005+  04BB             
0006+  04BB             
0007+  04BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  04BB             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  04BB             ; ASCII in BL
0010+  04BB             ; result in AL
0011+  04BB             ; ascii for F = 0100 0110
0012+  04BB             ; ascii for 9 = 0011 1001
0013+  04BB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  04BB             hex_ascii_encode:
0015+  04BB 1B            mov al, bl
0016+  04BC 93 40         test al, $40        ; test if letter or number
0017+  04BE C7 C4 04      jnz hex_letter
0018+  04C1 87 0F         and al, $0F        ; get number
0019+  04C3 09            ret
0020+  04C4             hex_letter:
0021+  04C4 87 0F         and al, $0F        ; get letter
0022+  04C6 6A 09         add al, 9
0023+  04C8 09            ret
0024+  04C9             
0025+  04C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  04C9             ; ATOI
0027+  04C9             ; 2 letter hex string in B
0028+  04C9             ; 8bit integer returned in AL
0029+  04C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  04C9             _atoi:
0031+  04C9 D8            push b
0032+  04CA 07 BB 04      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  04CD 30            mov bl, bh
0034+  04CE DB            push al          ; save a
0035+  04CF 07 BB 04      call hex_ascii_encode
0036+  04D2 EA            pop bl  
0037+  04D3 FD 9E 04      shl al, 4
0038+  04D6 8C            or al, bl
0039+  04D7 E5            pop b
0040+  04D8 09            ret  
0041+  04D9             
0042+  04D9             
0043+  04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  04D9             ; scanf
0045+  04D9             ; no need for explanations!
0046+  04D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  04D9             scanf:
0048+  04D9 09            ret
0049+  04DA             
0050+  04DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04DA             ; ITOA
0052+  04DA             ; 8bit value in BL
0053+  04DA             ; 2 byte ASCII result in A
0054+  04DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04DA             _itoa:
0056+  04DA DA            push d
0057+  04DB D8            push b
0058+  04DC A7 00         mov bh, 0
0059+  04DE FD A4 04      shr bl, 4  
0060+  04E1 74            mov d, b
0061+  04E2 1F 74 07      mov al, [d + s_hex_digits]
0062+  04E5 23            mov ah, al
0063+  04E6               
0064+  04E6 E5            pop b
0065+  04E7 D8            push b
0066+  04E8 A7 00         mov bh, 0
0067+  04EA FD 87 0F      and bl, $0F
0068+  04ED 74            mov d, b
0069+  04EE 1F 74 07      mov al, [d + s_hex_digits]
0070+  04F1 E5            pop b
0071+  04F2 E7            pop d
0072+  04F3 09            ret
0073+  04F4             
0074+  04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  04F4             ; HEX STRING TO BINARY
0076+  04F4             ; di = destination address
0077+  04F4             ; si = source
0078+  04F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  04F4             _hex_to_int:
0080+  04F4             _hex_to_int_L1:
0081+  04F4 F6            lodsb          ; load from [SI] to AL
0082+  04F5 B9 00         cmp al, 0        ; check if ASCII 0
0083+  04F7 C6 04 05      jz _hex_to_int_ret
0084+  04FA 36            mov bh, al
0085+  04FB F6            lodsb
0086+  04FC 2F            mov bl, al
0087+  04FD 07 C9 04      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  0500 F7            stosb          ; store AL to [DI]
0089+  0501 0A F4 04      jmp _hex_to_int_L1
0090+  0504             _hex_to_int_ret:
0091+  0504 09            ret    
0092+  0505             
0093+  0505             
0094+  0505             
0095+  0505             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0505             ; GETCHAR
0097+  0505             ; char in ah
0098+  0505             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0505             getch:
0100+  0505 DB            push al
0101+  0506             getch_retry:
0102+  0506 19 01         mov al, 1
0103+  0508 05 03         syscall sys_io      ; receive in AH
0104+  050A E8            pop al
0105+  050B 09            ret
0106+  050C             
0107+  050C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  050C             ; PUTCHAR
0109+  050C             ; char in ah
0110+  050C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  050C             _putchar:
0112+  050C DB            push al
0113+  050D 19 00         mov al, 0
0114+  050F 05 03         syscall sys_io      ; char in AH
0115+  0511 E8            pop al
0116+  0512 09            ret
0117+  0513             
0118+  0513             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0513             ;; INPUT A STRING
0120+  0513             ;; terminates with null
0121+  0513             ;; pointer in D
0122+  0513             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0513             _gets:
0124+  0513 D7            push a
0125+  0514 DA            push d
0126+  0515             _gets_loop:
0127+  0515 19 01         mov al, 1
0128+  0517 05 03         syscall sys_io      ; receive in AH
0129+  0519 76 1B         cmp ah, 27
0130+  051B C6 3C 05      je _gets_ansi_esc
0131+  051E 76 0A         cmp ah, $0A        ; LF
0132+  0520 C6 98 05      je _gets_end
0133+  0523 76 0D         cmp ah, $0D        ; CR
0134+  0525 C6 98 05      je _gets_end
0135+  0528 76 5C         cmp ah, $5C        ; '\\'
0136+  052A C6 5E 05      je _gets_escape
0137+  052D 76 08         cmp ah, $08      ; check for backspace
0138+  052F C6 38 05      je _gets_backspace
0139+  0532 1A            mov al, ah
0140+  0533 3E            mov [d], al
0141+  0534 79            inc d
0142+  0535 0A 15 05      jmp _gets_loop
0143+  0538             _gets_backspace:
0144+  0538 7F            dec d
0145+  0539 0A 15 05      jmp _gets_loop
0146+  053C             _gets_ansi_esc:
0147+  053C 19 01         mov al, 1
0148+  053E 05 03         syscall sys_io        ; receive in AH without echo
0149+  0540 76 5B         cmp ah, '['
0150+  0542 C7 15 05      jne _gets_loop
0151+  0545 19 01         mov al, 1
0152+  0547 05 03         syscall sys_io          ; receive in AH without echo
0153+  0549 76 44         cmp ah, 'D'
0154+  054B C6 56 05      je _gets_left_arrow
0155+  054E 76 43         cmp ah, 'C'
0156+  0550 C6 5A 05      je _gets_right_arrow
0157+  0553 0A 15 05      jmp _gets_loop
0158+  0556             _gets_left_arrow:
0159+  0556 7F            dec d
0160+  0557 0A 15 05      jmp _gets_loop
0161+  055A             _gets_right_arrow:
0162+  055A 79            inc d
0163+  055B 0A 15 05      jmp _gets_loop
0164+  055E             _gets_escape:
0165+  055E 19 01         mov al, 1
0166+  0560 05 03         syscall sys_io      ; receive in AH
0167+  0562 76 6E         cmp ah, 'n'
0168+  0564 C6 83 05      je _gets_LF
0169+  0567 76 72         cmp ah, 'r'
0170+  0569 C6 8A 05      je _gets_CR
0171+  056C 76 30         cmp ah, '0'
0172+  056E C6 91 05      je _gets_NULL
0173+  0571 76 5C         cmp ah, $5C  ; '\'
0174+  0573 C6 7C 05      je _gets_slash
0175+  0576 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0176+  0577 3E            mov [d], al
0177+  0578 79            inc d
0178+  0579 0A 15 05      jmp _gets_loop
0179+  057C             _gets_slash:
0180+  057C 19 5C         mov al, $5C
0181+  057E 3E            mov [d], al
0182+  057F 79            inc d
0183+  0580 0A 15 05      jmp _gets_loop
0184+  0583             _gets_LF:
0185+  0583 19 0A         mov al, $0A
0186+  0585 3E            mov [d], al
0187+  0586 79            inc d
0188+  0587 0A 15 05      jmp _gets_loop
0189+  058A             _gets_CR:
0190+  058A 19 0D         mov al, $0D
0191+  058C 3E            mov [d], al
0192+  058D 79            inc d
0193+  058E 0A 15 05      jmp _gets_loop
0194+  0591             _gets_NULL:
0195+  0591 19 00         mov al, $00
0196+  0593 3E            mov [d], al
0197+  0594 79            inc d
0198+  0595 0A 15 05      jmp _gets_loop
0199+  0598             _gets_end:
0200+  0598 19 00         mov al, 0
0201+  059A 3E            mov [d], al        ; terminate string
0202+  059B E7            pop d
0203+  059C E4            pop a
0204+  059D 09            ret
0205+  059E             
0206+  059E             
0207+  059E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0208+  059E             ;; INPUT TEXT
0209+  059E             ;; terminated with CTRL+D
0210+  059E             ;; pointer in D
0211+  059E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0212+  059E             _gettxt:
0213+  059E D7            push a
0214+  059F DA            push d
0215+  05A0             _gettxt_loop:
0216+  05A0 19 01         mov al, 1
0217+  05A2 05 03         syscall sys_io      ; receive in AH
0218+  05A4 76 04         cmp ah, 4      ; EOT
0219+  05A6 C6 DF 05      je _gettxt_end
0220+  05A9 76 08         cmp ah, $08      ; check for backspace
0221+  05AB C6 DB 05      je _gettxt_backspace
0222+  05AE 76 5C         cmp ah, $5C        ; '\'
0223+  05B0 C6 B9 05      je _gettxt_escape
0224+  05B3 1A            mov al, ah
0225+  05B4 3E            mov [d], al
0226+  05B5 79            inc d
0227+  05B6 0A A0 05      jmp _gettxt_loop
0228+  05B9             _gettxt_escape:
0229+  05B9 19 01         mov al, 1
0230+  05BB 05 03         syscall sys_io      ; receive in AH
0231+  05BD 76 6E         cmp ah, 'n'
0232+  05BF C6 CD 05      je _gettxt_LF
0233+  05C2 76 72         cmp ah, 'r'
0234+  05C4 C6 D4 05      je _gettxt_CR
0235+  05C7 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0236+  05C8 3E            mov [d], al
0237+  05C9 79            inc d
0238+  05CA 0A A0 05      jmp _gettxt_loop
0239+  05CD             _gettxt_LF:
0240+  05CD 19 0A         mov al, $0A
0241+  05CF 3E            mov [d], al
0242+  05D0 79            inc d
0243+  05D1 0A A0 05      jmp _gettxt_loop
0244+  05D4             _gettxt_CR:
0245+  05D4 19 0D         mov al, $0D
0246+  05D6 3E            mov [d], al
0247+  05D7 79            inc d
0248+  05D8 0A A0 05      jmp _gettxt_loop
0249+  05DB             _gettxt_backspace:
0250+  05DB 7F            dec d
0251+  05DC 0A A0 05      jmp _gettxt_loop
0252+  05DF             _gettxt_end:
0253+  05DF 19 00         mov al, 0
0254+  05E1 3E            mov [d], al        ; terminate string
0255+  05E2 E7            pop d
0256+  05E3 E4            pop a
0257+  05E4 09            ret
0258+  05E5             
0259+  05E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0260+  05E5             ; PRINT NEW LINE
0261+  05E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0262+  05E5             printnl:
0263+  05E5 D7            push a
0264+  05E6 10 00 0A      mov a, $0A00
0265+  05E9 05 03         syscall sys_io
0266+  05EB 10 00 0D      mov a, $0D00
0267+  05EE 05 03         syscall sys_io
0268+  05F0 E4            pop a
0269+  05F1 09            ret
0270+  05F2             
0271+  05F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0272+  05F2             ; _strtoint
0273+  05F2             ; 4 digit hex string number in d
0274+  05F2             ; integer returned in A
0275+  05F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  05F2             _strtointx:
0277+  05F2 D8            push b
0278+  05F3 32            mov bl, [d]
0279+  05F4 37            mov bh, bl
0280+  05F5 33 01 00      mov bl, [d + 1]
0281+  05F8 07 C9 04      call _atoi        ; convert to int in AL
0282+  05FB 23            mov ah, al        ; move to AH
0283+  05FC 33 02 00      mov bl, [d + 2]
0284+  05FF 37            mov bh, bl
0285+  0600 33 03 00      mov bl, [d + 3]
0286+  0603 07 C9 04      call _atoi        ; convert to int in AL
0287+  0606 E5            pop b
0288+  0607 09            ret
0289+  0608             
0290+  0608             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0291+  0608             ; _strtoint
0292+  0608             ; 5 digit base10 string number in d
0293+  0608             ; integer returned in A
0294+  0608             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0295+  0608             _strtoint:
0296+  0608 E2            push si
0297+  0609 D8            push b
0298+  060A D9            push c
0299+  060B DA            push d
0300+  060C 07 6B 04      call _strlen      ; get string length in C
0301+  060F 7E            dec c
0302+  0610 FD 4E         mov si, d
0303+  0612 12            mov a, c
0304+  0613 FD 99         shl a
0305+  0615 3B 8C 07      mov d, table_power
0306+  0618 59            add d, a
0307+  0619 38 00 00      mov c, 0
0308+  061C             _strtoint_L0:
0309+  061C F6            lodsb      ; load ASCII to al
0310+  061D B9 00         cmp al, 0
0311+  061F C6 32 06      je _strtoint_end
0312+  0622 6F 30         sub al, $30    ; make into integer
0313+  0624 22 00         mov ah, 0
0314+  0626 2A            mov b, [d]
0315+  0627 AC            mul a, b      ; result in B since it fits in 16bits
0316+  0628 11            mov a, b
0317+  0629 28            mov b, c
0318+  062A 54            add a, b
0319+  062B 39            mov c, a
0320+  062C 63 02 00      sub d, 2
0321+  062F 0A 1C 06      jmp _strtoint_L0
0322+  0632             _strtoint_end:
0323+  0632 12            mov a, c
0324+  0633 E7            pop d
0325+  0634 E6            pop c
0326+  0635 E5            pop b
0327+  0636 EF            pop si
0328+  0637 09            ret
0329+  0638             
0330+  0638             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0331+  0638             ; PRINT NULL TERMINATED STRING
0332+  0638             ; pointer in D
0333+  0638             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0334+  0638             _puts:
0335+  0638 D7            push a
0336+  0639 DA            push d
0337+  063A             _puts_L1:
0338+  063A 1E            mov al, [d]
0339+  063B B9 00         cmp al, 0
0340+  063D C6 49 06      jz _puts_END
0341+  0640 23            mov ah, al
0342+  0641 19 00         mov al, 0
0343+  0643 05 03         syscall sys_io
0344+  0645 79            inc d
0345+  0646 0A 3A 06      jmp _puts_L1
0346+  0649             _puts_END:
0347+  0649 E7            pop d
0348+  064A E4            pop a
0349+  064B 09            ret
0350+  064C             
0351+  064C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0352+  064C             ; PRINT N SIZE STRING
0353+  064C             ; pointer in D
0354+  064C             ; size in C
0355+  064C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0356+  064C             _putsn:
0357+  064C DB            push al
0358+  064D DA            push d
0359+  064E D9            push c
0360+  064F             _putsn_L0:
0361+  064F 1E            mov al, [d]
0362+  0650 23            mov ah, al
0363+  0651 19 00         mov al, 0
0364+  0653 05 03         syscall sys_io
0365+  0655 79            inc d
0366+  0656 7E            dec c  
0367+  0657 C2 00 00      cmp c, 0
0368+  065A C7 4F 06      jne _putsn_L0
0369+  065D             _putsn_end:
0370+  065D E6            pop c
0371+  065E E7            pop d
0372+  065F E8            pop al
0373+  0660 09            ret
0374+  0661             
0375+  0661             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0376+  0661             ; print 16bit decimal number
0377+  0661             ; input number in A
0378+  0661             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0379+  0661             print_u16d:
0380+  0661 D7            push a
0381+  0662 D8            push b
0382+  0663 FD D8         push g
0383+  0665 26 10 27      mov b, 10000
0384+  0668 AE            div a, b      ; get 10000's coeff.
0385+  0669 07 8D 06      call print_number
0386+  066C 11            mov a, b
0387+  066D 26 E8 03      mov b, 1000
0388+  0670 AE            div a, b      ; get 1000's coeff.
0389+  0671 07 8D 06      call print_number
0390+  0674 11            mov a, b
0391+  0675 26 64 00      mov b, 100
0392+  0678 AE            div a, b
0393+  0679 07 8D 06      call print_number
0394+  067C 11            mov a, b
0395+  067D 26 0A 00      mov b, 10
0396+  0680 AE            div a, b
0397+  0681 07 8D 06      call print_number
0398+  0684 1B            mov al, bl      ; 1's coeff in bl
0399+  0685 07 8D 06      call print_number
0400+  0688 FD F1         pop g
0401+  068A E5            pop b
0402+  068B E4            pop a
0403+  068C 09            ret
0404+  068D             
0405+  068D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0406+  068D             ; print AL
0407+  068D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0408+  068D             print_number:
0409+  068D 6A 30         add al, $30
0410+  068F 23            mov ah, al
0411+  0690 07 0C 05      call _putchar
0412+  0693 09            ret
0413+  0694             
0414+  0694             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0415+  0694             ; PRINT 16BIT HEX INTEGER
0416+  0694             ; integer value in reg B
0417+  0694             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0418+  0694             print_u16x:
0419+  0694 D7            push a
0420+  0695 D8            push b
0421+  0696 DD            push bl
0422+  0697 30            mov bl, bh
0423+  0698 07 DA 04      call _itoa        ; convert bh to char in A
0424+  069B 2F            mov bl, al        ; save al
0425+  069C 19 00         mov al, 0
0426+  069E 05 03         syscall sys_io        ; display AH
0427+  06A0 24            mov ah, bl        ; retrieve al
0428+  06A1 19 00         mov al, 0
0429+  06A3 05 03         syscall sys_io        ; display AL
0430+  06A5             
0431+  06A5 EA            pop bl
0432+  06A6 07 DA 04      call _itoa        ; convert bh to char in A
0433+  06A9 2F            mov bl, al        ; save al
0434+  06AA 19 00         mov al, 0
0435+  06AC 05 03         syscall sys_io        ; display AH
0436+  06AE 24            mov ah, bl        ; retrieve al
0437+  06AF 19 00         mov al, 0
0438+  06B1 05 03         syscall sys_io        ; display AL
0439+  06B3             
0440+  06B3 E5            pop b
0441+  06B4 E4            pop a
0442+  06B5 09            ret
0443+  06B6             
0444+  06B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0445+  06B6             ; INPUT 16BIT HEX INTEGER
0446+  06B6             ; read 16bit integer into A
0447+  06B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0448+  06B6             scan_u16x:
0449+  06B6 F8 10 00      enter 16
0450+  06B9 D8            push b
0451+  06BA DA            push d
0452+  06BB             
0453+  06BB FA F1 FF      lea d, [bp + -15]
0454+  06BE 07 13 05      call _gets        ; get number
0455+  06C1             
0456+  06C1 32            mov bl, [d]
0457+  06C2 37            mov bh, bl
0458+  06C3 33 01 00      mov bl, [d + 1]
0459+  06C6 07 C9 04      call _atoi        ; convert to int in AL
0460+  06C9 23            mov ah, al        ; move to AH
0461+  06CA             
0462+  06CA 33 02 00      mov bl, [d + 2]
0463+  06CD 37            mov bh, bl
0464+  06CE 33 03 00      mov bl, [d + 3]
0465+  06D1 07 C9 04      call _atoi        ; convert to int in AL
0466+  06D4             
0467+  06D4 E7            pop d
0468+  06D5 E5            pop b
0469+  06D6 F9            leave
0470+  06D7 09            ret
0471+  06D8             
0472+  06D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0473+  06D8             ; PRINT 8bit HEX INTEGER
0474+  06D8             ; integer value in reg bl
0475+  06D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0476+  06D8             print_u8x:
0477+  06D8 D7            push a
0478+  06D9 DD            push bl
0479+  06DA             
0480+  06DA 07 DA 04      call _itoa        ; convert bl to char in A
0481+  06DD 2F            mov bl, al        ; save al
0482+  06DE 19 00         mov al, 0
0483+  06E0 05 03         syscall sys_io        ; display AH
0484+  06E2 24            mov ah, bl        ; retrieve al
0485+  06E3 19 00         mov al, 0
0486+  06E5 05 03         syscall sys_io        ; display AL
0487+  06E7             
0488+  06E7 EA            pop bl
0489+  06E8 E4            pop a
0490+  06E9 09            ret
0491+  06EA             
0492+  06EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0493+  06EA             ; print 8bit decimal unsigned number
0494+  06EA             ; input number in AL
0495+  06EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0496+  06EA             print_u8d:
0497+  06EA D7            push a
0498+  06EB D8            push b
0499+  06EC FD D8         push g
0500+  06EE 22 00         mov ah, 0
0501+  06F0 26 64 00      mov b, 100
0502+  06F3 AE            div a, b
0503+  06F4 D8            push b      ; save remainder
0504+  06F5 B9 00         cmp al, 0
0505+  06F7 C6 01 07      je skip100
0506+  06FA 6A 30         add al, $30
0507+  06FC 23            mov ah, al
0508+  06FD 19 00         mov al, 0
0509+  06FF 05 03         syscall sys_io  ; print coeff
0510+  0701             skip100:
0511+  0701 E4            pop a
0512+  0702 22 00         mov ah, 0
0513+  0704 26 0A 00      mov b, 10
0514+  0707 AE            div a, b
0515+  0708 D8            push b      ; save remainder
0516+  0709 B9 00         cmp al, 0
0517+  070B C6 15 07      je skip10
0518+  070E 6A 30         add al, $30
0519+  0710 23            mov ah, al
0520+  0711 19 00         mov al, 0
0521+  0713 05 03         syscall sys_io  ; print coeff
0522+  0715             skip10:
0523+  0715 E4            pop a
0524+  0716 1B            mov al, bl
0525+  0717 6A 30         add al, $30
0526+  0719 23            mov ah, al
0527+  071A 19 00         mov al, 0
0528+  071C 05 03         syscall sys_io  ; print coeff
0529+  071E FD F1         pop g
0530+  0720 E5            pop b
0531+  0721 E4            pop a
0532+  0722 09            ret
0533+  0723             
0534+  0723             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0535+  0723             ; INPUT 8BIT HEX INTEGER
0536+  0723             ; read 8bit integer into AL
0537+  0723             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0538+  0723             scan_u8x:
0539+  0723 F8 04 00      enter 4
0540+  0726 D8            push b
0541+  0727 DA            push d
0542+  0728             
0543+  0728 FA FD FF      lea d, [bp + -3]
0544+  072B 07 13 05      call _gets        ; get number
0545+  072E             
0546+  072E 32            mov bl, [d]
0547+  072F 37            mov bh, bl
0548+  0730 33 01 00      mov bl, [d + 1]
0549+  0733 07 C9 04      call _atoi        ; convert to int in AL
0550+  0736             
0551+  0736 E7            pop d
0552+  0737 E5            pop b
0553+  0738 F9            leave
0554+  0739 09            ret
0555+  073A             
0556+  073A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0557+  073A             ; input decimal number
0558+  073A             ; result in A
0559+  073A             ; 655'\0'
0560+  073A             ; low--------high
0561+  073A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0562+  073A             scan_u16d:
0563+  073A F8 08 00      enter 8
0564+  073D E2            push si
0565+  073E D8            push b
0566+  073F D9            push c
0567+  0740 DA            push d
0568+  0741 FA F9 FF      lea d, [bp +- 7]
0569+  0744 07 13 05      call _gets
0570+  0747 07 6B 04      call _strlen      ; get string length in C
0571+  074A 7E            dec c
0572+  074B FD 4E         mov si, d
0573+  074D 12            mov a, c
0574+  074E FD 99         shl a
0575+  0750 3B 8C 07      mov d, table_power
0576+  0753 59            add d, a
0577+  0754 38 00 00      mov c, 0
0578+  0757             mul_loop:
0579+  0757 F6            lodsb      ; load ASCII to al
0580+  0758 B9 00         cmp al, 0
0581+  075A C6 6D 07      je mul_exit
0582+  075D 6F 30         sub al, $30    ; make into integer
0583+  075F 22 00         mov ah, 0
0584+  0761 2A            mov b, [d]
0585+  0762 AC            mul a, b      ; result in B since it fits in 16bits
0586+  0763 11            mov a, b
0587+  0764 28            mov b, c
0588+  0765 54            add a, b
0589+  0766 39            mov c, a
0590+  0767 63 02 00      sub d, 2
0591+  076A 0A 57 07      jmp mul_loop
0592+  076D             mul_exit:
0593+  076D 12            mov a, c
0594+  076E E7            pop d
0595+  076F E6            pop c
0596+  0770 E5            pop b
0597+  0771 EF            pop si
0598+  0772 F9            leave
0599+  0773 09            ret
0600+  0774             
0601+  0774             
0602+  0774 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0602+  0778 34 35 36 37 
0602+  077C 38 39 41 42 
0602+  0780 43 44 45 46 
0603+  0784 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0603+  0788 1B 5B 48 00 
0604+  078C             
0605+  078C             table_power:
0606+  078C 01 00         .dw 1
0607+  078E 0A 00         .dw 10
0608+  0790 64 00         .dw 100
0609+  0792 E8 03         .dw 1000
0610+  0794 10 27         .dw 100000029   0796             .end
tasm: Number of errors = 0
