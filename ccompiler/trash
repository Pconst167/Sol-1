char *base64_table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

int main() {
  char input[512];
  char output[256];

  printf("\nEnter a base64 encoded string to decode: ");
  gets(input);

  base64_encode(input, output);

  printf("\nEncoded string: %s\n", output);

  base64_decode(output, input);

  printf("\nDecoded string: %s\n", input);

  return 0;
}

void base64_encode(char *input, char *output) {
  int i = 0;
  int j = 0;
  int k;
  int input_len;
  unsigned char input_buffer[3];
  unsigned char output_buffer[4];
  input_len = strlen(input);

  while (input_len--) {
    input_buffer[i++] = *(input++);
    if (i == 3) {
      output_buffer[0] = (input_buffer[0] & 0xFC) >> 2;
      output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4);
      output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6);
      output_buffer[3] = input_buffer[2] & 0x3F;

      for (i = 0; i < 4; i++) {
        output[j++] = base64_table[output_buffer[i]];
      }
      i = 0;
    }
  }

  if (i) {
    for (k = i; k < 3; k++) {
      input_buffer[k] = '\0';
    }

    output_buffer[0] = (input_buffer[0] & 0xFC) >> 2;
    output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4);
    output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6);

    for (k = 0; k < i + 1; k++) {
      output[j++] = base64_table[output_buffer[k]];
    }

    while (i++ < 3) {
      output[j++] = '=';
    }
  }
  output[j] = '\0';
}

int base64_char_value(char c) {
  if (c >= 'A' && c <= 'Z') return c - 'A';
  if (c >= 'a' && c <= 'z') return c - 'a' + 26;
  if (c >= '0' && c <= '9') return c - '0' + 52;
  if (c == '+') return 62;
  if (c == '/') return 63;
  return -1;
}

void base64_decode(char *input, char *output) {
  int i = 0, j = 0, k = 0;
  int input_len;
  unsigned char input_buffer[4];
  unsigned char output_buffer[3];

  input_len = strlen(input);

  while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) {
    input_buffer[i++] = input[k++];
    if (i == 4) {
      for (i = 0; i < 4; i++) {
        input_buffer[i] = base64_char_value(input_buffer[i]);
      }
      output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4);
      output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2);
      output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3];

      for (i = 0; i < 3; i++) {
        output[j++] = output_buffer[i];
      }
      i = 0;
    }
  }

  if (i) {
    for (k = i; k < 4; k++) {
      input_buffer[k] = 0;
    }

    for (k = 0; k < 4; k++) {
      input_buffer[k] = base64_char_value(input_buffer[k]);
    }

    output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4);
    output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2);

    for (k = 0; k < i - 1; k++) {
      output[j++] = output_buffer[k];
    }
  }
  output[j] = '\0';
}





void printf(const char *format, ...){
  char *p, *format_p;

  format_p = format;
  p = &format + 2;

// printf("%i %d %d", 124, 1234, 65535);
  for(;;){
    if(!*format_p) break;
    else if(*format_p == '%'){
      format_p++;
      switch(*format_p){
        case 'l':
        case 'L':
          format_p++;
          if(*format_p == 'd' || *format_p == 'i')
            print_signed_long(*(long *)p);
          else if(*format_p == 'u')
            print_unsigned_long(*(unsigned long *)p);
          else if(*format_p == 'x')
            printx32(*(long int *)p);
          else err("Unexpected format in printf.");
          p = p + 4;
          break;

        case 'd':
        case 'i':
          print_signed(*(int*)p);
          p = p + 2;
          break;

        case 'u':
          print_unsigned(*(unsigned int*)p);
          p = p + 2;
          break;

        case 'x':
          printx16(*(int*)p);
          /*asm{
            ccmovd p
            mov d, [d]
            mov b, [d]
            call print_u16x
          }*/
          p = p + 2;
          break;

        case 'c':
          putchar(*(char*)p);
          /*asm{
            ccmovd p
            mov d, [d]
            mov al, [d]
            mov ah, al
            call _putchar
          }*/
          p = p + 2;
          break;

        case 's':
          print(*(char**)p);
          /*asm{
            ccmovd p
            mov d, [d]
            mov d, [d]
            call _puts
          }*/
          p = p + 2;
          break;

        default:
          print("Error: Unknown argument type.\n");
      }
    }
    else {
      putchar(*format_p);
    }
    format_p++;
  }
}



void print_signed_long(long int num) {
  char digits[10];
  int i = 0;

  if (num < 0) {
    putchar('-');
    num = -num;
  }
  else if (num == 0) {
    putchar('0');
    return;
  }

  while (num > 0) {
    digits[i] = '0' + (num % 10);
    num = num / 10;
    i++;
  }

  while (i > 0) {
    i--;
    putchar(digits[i]);
  }
}



void putchar(char c){
  asm{
    ccmovd c
    mov al, [d]
    mov ah, al
    mov al, 0
    syscall sys_io      ; char in AH
  }
}



void print_unsigned_long(unsigned long int num) {
  char digits[10];
  int i;
  i = 0;
  if(num == 0){
    putchar('0');
    return;
  }
  while (num > 0) {
    digits[i] = '0' + (num % 10);
    num = num / 10;
    i++;
  }
  // Print the digits in reverse order using putchar()
  while (i > 0) {
    i--;
    putchar(digits[i]);
  }
}



void printx32(long int hex) {
  asm{
    ccmovd hex
    mov b, [d+2]
    call print_u16x_printx32
    mov b, [d]
    call print_u16x_printx32
  }
  return;
  asm{
  print_u16x_printx32:
    push a
    push b
    push bl
    mov bl, bh
    call _itoa_printx32        ; convert bh to char in A
    mov bl, al        ; save al
    mov al, 0
    syscall sys_io        ; display AH
    mov ah, bl        ; retrieve al
    mov al, 0
    syscall sys_io        ; display AL

    pop bl
    call _itoa_printx32        ; convert bh to char in A
    mov bl, al        ; save al
    mov al, 0
    syscall sys_io        ; display AH
    mov ah, bl        ; retrieve al
    mov al, 0
    syscall sys_io        ; display AL

    pop b
    pop a
    ret

  _itoa_printx32:
    push d
    push b
    mov bh, 0
    shr bl, 4  
    mov d, b
    mov al, [d + s_hex_digits_printx32]
    mov ah, al
    
    pop b
    push b
    mov bh, 0
    and bl, $0F
    mov d, b
    mov al, [d + s_hex_digits_printx32]
    pop b
    pop d
    ret

    s_hex_digits_printx32: .db "0123456789ABCDEF"  
  }
}



void err(char *e){
  print(e);
}



void print(char *s){
  asm{
    ccmovd s
    mov d, [d]
  _puts_L1_print:
    mov al, [d]
    cmp al, 0
    jz _puts_END_print
    mov ah, al
    mov al, 0
    syscall sys_io
    inc d
    jmp _puts_L1_print
  _puts_END_print:
  }
}



void print_signed(int num) {
  char digits[5];
  int i = 0;

  if (num < 0) {
    putchar('-');
    num = -num;
  }
  else if (num == 0) {
    putchar('0');
    return;
  }

  while (num > 0) {
    digits[i] = '0' + (num % 10);
    num = num / 10;
    i++;
  }

  while (i > 0) {
    i--;
    putchar(digits[i]);
  }
}



void print_unsigned(unsigned int num) {
  char digits[5];
  int i;
  i = 0;
  if(num == 0){
    putchar('0');
    return;
  }
  while (num > 0) {
    digits[i] = '0' + (num % 10);
    num = num / 10;
    i++;
  }
  // Print the digits in reverse order using putchar()
  while (i > 0) {
    i--;
    putchar(digits[i]);
  }
}



void printx16(int hex) {
  asm{
    ccmovd hex
    mov b, [d]
  print_u16x_printx16:
    push bl
    mov bl, bh
    call _itoa_printx16        ; convert bh to char in A
    mov bl, al        ; save al
    mov al, 0
    syscall sys_io        ; display AH
    mov ah, bl        ; retrieve al
    mov al, 0
    syscall sys_io        ; display AL

    pop bl
    call _itoa_printx16        ; convert bh to char in A
    mov bl, al        ; save al
    mov al, 0
    syscall sys_io        ; display AH
    mov ah, bl        ; retrieve al
    mov al, 0
    syscall sys_io        ; display AL
  }
  return;
  asm{
  _itoa_printx16:
    push d
    push b
    mov bh, 0
    shr bl, 4  
    mov d, b
    mov al, [d + s_hex_digits_printx16]
    mov ah, al
    pop b
    push b
    mov bh, 0
    and bl, $0F
    mov d, b
    mov al, [d + s_hex_digits_printx16]
    pop b
    pop d
    ret

    s_hex_digits_printx16:    .db "0123456789ABCDEF"  
  }
}



int gets(char *s){
  asm{
    ccmovd s
    mov a, [d]
    mov d, a
    call _gets_gets
  }
  return strlen(s);

  asm{
  _gets_gets:
    push a
    push d
  _gets_loop_gets:
    mov al, 1
    syscall sys_io      ; receive in AH
    cmp al, 0        ; check error code (AL)
    je _gets_loop_gets      ; if no char received, retry

    cmp ah, 27
    je _gets_ansi_esc_gets
    cmp ah, $0A        ; LF
    je _gets_end_gets
    cmp ah, $0D        ; CR
    je _gets_end_gets
    cmp ah, $5C        ; '\\'
    je _gets_escape_gets
    
    cmp ah, $08      ; check for backspace
    je _gets_backspace_gets

    mov al, ah
    mov [d], al
    inc d
    jmp _gets_loop_gets
  _gets_backspace_gets:
    dec d
    jmp _gets_loop_gets
  _gets_ansi_esc_gets:
    mov al, 1
    syscall sys_io        ; receive in AH without echo
    cmp al, 0          ; check error code (AL)
    je _gets_ansi_esc_gets    ; if no char received, retry
    cmp ah, '['
    jne _gets_loop_gets
  _gets_ansi_esc_2_gets:
    mov al, 1
    syscall sys_io          ; receive in AH without echo
    cmp al, 0            ; check error code (AL)
    je _gets_ansi_esc_2_gets  ; if no char received, retry
    cmp ah, 'D'
    je _gets_left_arrow_gets
    cmp ah, 'C'
    je _gets_right_arrow_gets
    jmp _gets_loop_gets
  _gets_left_arrow_gets:
    dec d
    jmp _gets_loop_gets
  _gets_right_arrow_gets:
    inc d
    jmp _gets_loop_gets
  _gets_escape_gets:
    mov al, 1
    syscall sys_io      ; receive in AH
    cmp al, 0        ; check error code (AL)
    je _gets_escape_gets      ; if no char received, retry
    cmp ah, 'n'
    je _gets_LF_gets
    cmp ah, 'r'
    je _gets_CR_gets
    cmp ah, '0'
    je _gets_NULL_gets
    cmp ah, $5C  
    je _gets_slash_gets
    mov al, ah        ; if not a known escape, it is just a normal letter
    mov [d], al
    inc d
    jmp _gets_loop_gets
  _gets_slash_gets:
    mov al, $5C
    mov [d], al
    inc d
    jmp _gets_loop_gets
  _gets_LF_gets:
    mov al, $0A
    mov [d], al
    inc d
    jmp _gets_loop_gets
  _gets_CR_gets:
    mov al, $0D
    mov [d], al
    inc d
    jmp _gets_loop_gets
  _gets_NULL_gets:
    mov al, $00
    mov [d], al
    inc d
    jmp _gets_loop_gets
  _gets_end_gets:
    mov al, 0
    mov [d], al        ; terminate string
    pop d
    pop a
    ret
  }
}



int strlen(char *str) {
    int length;
    length = 0;
    
    while (str[length] != 0) {
        length++;
    }
    
    return length;
}

struct _FILE {int handle ;   unsigned char        filename [ 256 ] ;   unsigned char        mode ;   unsigned char        loc ; } ;

typedef struct _FILE FILE;
