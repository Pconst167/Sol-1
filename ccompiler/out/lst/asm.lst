0001   0000             ; --- FILENAME: ../solarium/asm/asm.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0000             
0005   0000             ; --- BEGIN TEXT SEGMENT
0006   0400             .org text_org
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char *p; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; print("\n"); 
0013   040B             ; --- START FUNCTION CALL
0014   040B 26 FC 4F      mov b, _s10 ; "\n"
0015   040E FD AB         swp b
0016   0410 D8            push b
0017   0411 07 54 3E      call print
0018   0414 51 02 00      add sp, 2
0019   0417             ; --- END FUNCTION CALL
0020   0417             ; program = alloc(16384); 
0021   0417 3B A7 4F      mov d, _program ; $program
0022   041A DA            push d
0023   041B             ; --- START FUNCTION CALL
0024   041B FD 2E 00 40   mov32 cb, $00004000
0024   041F 00 00 
0025   0421 FD AB         swp b
0026   0423 D8            push b
0027   0424 07 6D 3E      call alloc
0028   0427 51 02 00      add sp, 2
0029   042A             ; --- END FUNCTION CALL
0030   042A E7            pop d
0031   042B FD 43         mov [d], b
0032   042D             ; bin_out = alloc(16384); 
0033   042D 3B A9 4F      mov d, _bin_out ; $bin_out
0034   0430 DA            push d
0035   0431             ; --- START FUNCTION CALL
0036   0431 FD 2E 00 40   mov32 cb, $00004000
0036   0435 00 00 
0037   0437 FD AB         swp b
0038   0439 D8            push b
0039   043A 07 6D 3E      call alloc
0040   043D 51 02 00      add sp, 2
0041   0440             ; --- END FUNCTION CALL
0042   0440 E7            pop d
0043   0441 FD 43         mov [d], b
0044   0443             ; opcode_table = alloc(12310); 
0045   0443 3B AD 4F      mov d, _opcode_table ; $opcode_table
0046   0446 DA            push d
0047   0447             ; --- START FUNCTION CALL
0048   0447 FD 2E 16 30   mov32 cb, $00003016
0048   044B 00 00 
0049   044D FD AB         swp b
0050   044F D8            push b
0051   0450 07 6D 3E      call alloc
0052   0453 51 02 00      add sp, 2
0053   0456             ; --- END FUNCTION CALL
0054   0456 E7            pop d
0055   0457 FD 43         mov [d], b
0056   0459             ; loadfile(0x0000, program); 
0057   0459             ; --- START FUNCTION CALL
0058   0459 3B A7 4F      mov d, _program ; $program
0059   045C 2A            mov b, [d]
0060   045D 38 00 00      mov c, 0
0061   0460 FD AB         swp b
0062   0462 D8            push b
0063   0463 FD 2E 00 00   mov32 cb, $00000000
0063   0467 00 00 
0064   0469 FD AB         swp b
0065   046B D8            push b
0066   046C 07 94 3D      call loadfile
0067   046F 51 04 00      add sp, 4
0068   0472             ; --- END FUNCTION CALL
0069   0472             ; loadfile("./config.d/op_tbl", opcode_table); 
0070   0472             ; --- START FUNCTION CALL
0071   0472 3B AD 4F      mov d, _opcode_table ; $opcode_table
0072   0475 2A            mov b, [d]
0073   0476 38 00 00      mov c, 0
0074   0479 FD AB         swp b
0075   047B D8            push b
0076   047C 26 FE 4F      mov b, _s11 ; "./config.d/op_tbl"
0077   047F FD AB         swp b
0078   0481 D8            push b
0079   0482 07 94 3D      call loadfile
0080   0485 51 04 00      add sp, 4
0081   0488             ; --- END FUNCTION CALL
0082   0488             ; p = program; 
0083   0488 FA FF FF      lea d, [bp + -1] ; $p
0084   048B DA            push d
0085   048C 3B A7 4F      mov d, _program ; $program
0086   048F 2A            mov b, [d]
0087   0490 38 00 00      mov c, 0
0088   0493 E7            pop d
0089   0494 FD 43         mov [d], b
0090   0496             ; while(*p) p++; 
0091   0496             _while1_cond:
0092   0496 FA FF FF      lea d, [bp + -1] ; $p
0093   0499 2A            mov b, [d]
0094   049A 38 00 00      mov c, 0
0095   049D 74            mov d, b
0096   049E 32            mov bl, [d]
0097   049F A7 00         mov bh, 0
0098   04A1 38 00 00      mov c, 0
0099   04A4 C0 00 00      cmp b, 0
0100   04A7 C6 BD 04      je _while1_exit
0101   04AA             _while1_block:
0102   04AA             ; p++; 
0103   04AA FA FF FF      lea d, [bp + -1] ; $p
0104   04AD 2A            mov b, [d]
0105   04AE 38 00 00      mov c, 0
0106   04B1 FD 77         inc b
0107   04B3 FA FF FF      lea d, [bp + -1] ; $p
0108   04B6 FD 43         mov [d], b
0109   04B8 FD 7D         dec b
0110   04BA 0A 96 04      jmp _while1_cond
0111   04BD             _while1_exit:
0112   04BD             ; while(is_space(*p)) p--; 
0113   04BD             _while2_cond:
0114   04BD             ; --- START FUNCTION CALL
0115   04BD FA FF FF      lea d, [bp + -1] ; $p
0116   04C0 2A            mov b, [d]
0117   04C1 38 00 00      mov c, 0
0118   04C4 74            mov d, b
0119   04C5 32            mov bl, [d]
0120   04C6 A7 00         mov bh, 0
0121   04C8 38 00 00      mov c, 0
0122   04CB DD            push bl
0123   04CC 07 9E 3E      call is_space
0124   04CF 51 01 00      add sp, 1
0125   04D2             ; --- END FUNCTION CALL
0126   04D2 C0 00 00      cmp b, 0
0127   04D5 C6 EB 04      je _while2_exit
0128   04D8             _while2_block:
0129   04D8             ; p--; 
0130   04D8 FA FF FF      lea d, [bp + -1] ; $p
0131   04DB 2A            mov b, [d]
0132   04DC 38 00 00      mov c, 0
0133   04DF FD 7D         dec b
0134   04E1 FA FF FF      lea d, [bp + -1] ; $p
0135   04E4 FD 43         mov [d], b
0136   04E6 FD 77         inc b
0137   04E8 0A BD 04      jmp _while2_cond
0138   04EB             _while2_exit:
0139   04EB             ; p++; 
0140   04EB FA FF FF      lea d, [bp + -1] ; $p
0141   04EE 2A            mov b, [d]
0142   04EF 38 00 00      mov c, 0
0143   04F2 FD 77         inc b
0144   04F4 FA FF FF      lea d, [bp + -1] ; $p
0145   04F7 FD 43         mov [d], b
0146   04F9 FD 7D         dec b
0147   04FB             ; *p = '\0'; 
0148   04FB FA FF FF      lea d, [bp + -1] ; $p
0149   04FE 2A            mov b, [d]
0150   04FF 38 00 00      mov c, 0
0151   0502 D8            push b
0152   0503 FD 2E 00 00   mov32 cb, $00000000
0152   0507 00 00 
0153   0509 E7            pop d
0154   050A FD 3E         mov [d], bl
0155   050C             ; prog = program; 
0156   050C 3B 63 4E      mov d, _prog ; $prog
0157   050F DA            push d
0158   0510 3B A7 4F      mov d, _program ; $program
0159   0513 2A            mov b, [d]
0160   0514 38 00 00      mov c, 0
0161   0517 E7            pop d
0162   0518 FD 43         mov [d], b
0163   051A             ; bin_p = bin_out + _org; 
0164   051A 3B AB 4F      mov d, _bin_p ; $bin_p
0165   051D DA            push d
0166   051E 3B A9 4F      mov d, _bin_out ; $bin_out
0167   0521 2A            mov b, [d]
0168   0522 38 00 00      mov c, 0
0169   0525             ; --- START TERMS
0170   0525 D7            push a
0171   0526 11            mov a, b
0172   0527 3B 5A 4E      mov d, __org ; $_org
0173   052A 2A            mov b, [d]
0174   052B 38 00 00      mov c, 0
0175   052E 56            add b, a
0176   052F E4            pop a
0177   0530             ; --- END TERMS
0178   0530 E7            pop d
0179   0531 FD 43         mov [d], b
0180   0533             ; pc = _org; 
0181   0533 3B 5C 4E      mov d, _pc ; $pc
0182   0536 DA            push d
0183   0537 3B 5A 4E      mov d, __org ; $_org
0184   053A 2A            mov b, [d]
0185   053B 38 00 00      mov c, 0
0186   053E E7            pop d
0187   053F FD 43         mov [d], b
0188   0541             ; prog_size = 0; 
0189   0541 3B C5 4F      mov d, _prog_size ; $prog_size
0190   0544 DA            push d
0191   0545 FD 2E 00 00   mov32 cb, $00000000
0191   0549 00 00 
0192   054B E7            pop d
0193   054C FD 43         mov [d], b
0194   054E             ; label_directive_scan(); 
0195   054E             ; --- START FUNCTION CALL
0196   054E 07 20 0A      call label_directive_scan
0197   0551             ; prog_size = 0; 
0198   0551 3B C5 4F      mov d, _prog_size ; $prog_size
0199   0554 DA            push d
0200   0555 FD 2E 00 00   mov32 cb, $00000000
0200   0559 00 00 
0201   055B E7            pop d
0202   055C FD 43         mov [d], b
0203   055E             ; parse_text(); 
0204   055E             ; --- START FUNCTION CALL
0205   055E 07 1C 1C      call parse_text
0206   0561             ; parse_data(); 
0207   0561             ; --- START FUNCTION CALL
0208   0561 07 69 05      call parse_data
0209   0564             ; display_output(); 
0210   0564             ; --- START FUNCTION CALL
0211   0564 07 5E 1E      call display_output
0212   0567 05 0B         syscall sys_terminate_proc
0213   0569             
0214   0569             parse_data:
0215   0569 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0216   056C             ; print("Parsing DATA section..."); 
0217   056C             ; --- START FUNCTION CALL
0218   056C 26 10 50      mov b, _s12 ; "Parsing DATA section..."
0219   056F FD AB         swp b
0220   0571 D8            push b
0221   0572 07 54 3E      call print
0222   0575 51 02 00      add sp, 2
0223   0578             ; --- END FUNCTION CALL
0224   0578             ; for(;;){ 
0225   0578             _for3_init:
0226   0578             _for3_cond:
0227   0578             _for3_block:
0228   0578             ; get(); 
0229   0578             ; --- START FUNCTION CALL
0230   0578 07 60 2B      call get
0231   057B             ; if(toktype == END) error("Data segment not found."); 
0232   057B             _if4_cond:
0233   057B 3B 61 4E      mov d, _toktype ; $toktype
0234   057E 2A            mov b, [d]
0235   057F 38 00 00      mov c, 0
0236   0582             ; --- START RELATIONAL
0237   0582 D7            push a
0238   0583 11            mov a, b
0239   0584 FD 2E 07 00   mov32 cb, $7 ; enum element: END
0239   0588 00 00 
0240   058A B0            cmp a, b
0241   058B FD 71         seq ; ==
0242   058D E4            pop a
0243   058E             ; --- END RELATIONAL
0244   058E C0 00 00      cmp b, 0
0245   0591 C6 A3 05      je _if4_exit
0246   0594             _if4_TRUE:
0247   0594             ; error("Data segment not found."); 
0248   0594             ; --- START FUNCTION CALL
0249   0594 26 28 50      mov b, _s13 ; "Data segment not found."
0250   0597 FD AB         swp b
0251   0599 D8            push b
0252   059A 07 66 39      call error
0253   059D 51 02 00      add sp, 2
0254   05A0             ; --- END FUNCTION CALL
0255   05A0 0A A3 05      jmp _if4_exit
0256   05A3             _if4_exit:
0257   05A3             ; if(tok == DOT){ 
0258   05A3             _if5_cond:
0259   05A3 3B 5F 4E      mov d, _tok ; $tok
0260   05A6 2A            mov b, [d]
0261   05A7 38 00 00      mov c, 0
0262   05AA             ; --- START RELATIONAL
0263   05AA D7            push a
0264   05AB 11            mov a, b
0265   05AC FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
0265   05B0 00 00 
0266   05B2 B0            cmp a, b
0267   05B3 FD 71         seq ; ==
0268   05B5 E4            pop a
0269   05B6             ; --- END RELATIONAL
0270   05B6 C0 00 00      cmp b, 0
0271   05B9 C6 E1 05      je _if5_exit
0272   05BC             _if5_TRUE:
0273   05BC             ; get(); 
0274   05BC             ; --- START FUNCTION CALL
0275   05BC 07 60 2B      call get
0276   05BF             ; if(tok == DATA) break; 
0277   05BF             _if6_cond:
0278   05BF 3B 5F 4E      mov d, _tok ; $tok
0279   05C2 2A            mov b, [d]
0280   05C3 38 00 00      mov c, 0
0281   05C6             ; --- START RELATIONAL
0282   05C6 D7            push a
0283   05C7 11            mov a, b
0284   05C8 FD 2E 03 00   mov32 cb, $3 ; enum element: DATA
0284   05CC 00 00 
0285   05CE B0            cmp a, b
0286   05CF FD 71         seq ; ==
0287   05D1 E4            pop a
0288   05D2             ; --- END RELATIONAL
0289   05D2 C0 00 00      cmp b, 0
0290   05D5 C6 DE 05      je _if6_exit
0291   05D8             _if6_TRUE:
0292   05D8             ; break; 
0293   05D8 0A E4 05      jmp _for3_exit ; for break
0294   05DB 0A DE 05      jmp _if6_exit
0295   05DE             _if6_exit:
0296   05DE 0A E1 05      jmp _if5_exit
0297   05E1             _if5_exit:
0298   05E1             _for3_update:
0299   05E1 0A 78 05      jmp _for3_cond
0300   05E4             _for3_exit:
0301   05E4             ; for(;;){ 
0302   05E4             _for7_init:
0303   05E4             _for7_cond:
0304   05E4             _for7_block:
0305   05E4             ; get(); 
0306   05E4             ; --- START FUNCTION CALL
0307   05E4 07 60 2B      call get
0308   05E7             ; if(tok == SEGMENT_END) break; 
0309   05E7             _if8_cond:
0310   05E7 3B 5F 4E      mov d, _tok ; $tok
0311   05EA 2A            mov b, [d]
0312   05EB 38 00 00      mov c, 0
0313   05EE             ; --- START RELATIONAL
0314   05EE D7            push a
0315   05EF 11            mov a, b
0316   05F0 FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
0316   05F4 00 00 
0317   05F6 B0            cmp a, b
0318   05F7 FD 71         seq ; ==
0319   05F9 E4            pop a
0320   05FA             ; --- END RELATIONAL
0321   05FA C0 00 00      cmp b, 0
0322   05FD C6 06 06      je _if8_exit
0323   0600             _if8_TRUE:
0324   0600             ; break; 
0325   0600 0A 27 08      jmp _for7_exit ; for break
0326   0603 0A 06 06      jmp _if8_exit
0327   0606             _if8_exit:
0328   0606             ; if(tok == DB){ 
0329   0606             _if9_cond:
0330   0606 3B 5F 4E      mov d, _tok ; $tok
0331   0609 2A            mov b, [d]
0332   060A 38 00 00      mov c, 0
0333   060D             ; --- START RELATIONAL
0334   060D D7            push a
0335   060E 11            mov a, b
0336   060F FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0336   0613 00 00 
0337   0615 B0            cmp a, b
0338   0616 FD 71         seq ; ==
0339   0618 E4            pop a
0340   0619             ; --- END RELATIONAL
0341   0619 C0 00 00      cmp b, 0
0342   061C C6 09 07      je _if9_else
0343   061F             _if9_TRUE:
0344   061F             ; print(".db: "); 
0345   061F             ; --- START FUNCTION CALL
0346   061F 26 40 50      mov b, _s14 ; ".db: "
0347   0622 FD AB         swp b
0348   0624 D8            push b
0349   0625 07 54 3E      call print
0350   0628 51 02 00      add sp, 2
0351   062B             ; --- END FUNCTION CALL
0352   062B             ; for(;;){ 
0353   062B             _for10_init:
0354   062B             _for10_cond:
0355   062B             _for10_block:
0356   062B             ; get(); 
0357   062B             ; --- START FUNCTION CALL
0358   062B 07 60 2B      call get
0359   062E             ; if(toktype == CHAR_CONST){ 
0360   062E             _if11_cond:
0361   062E 3B 61 4E      mov d, _toktype ; $toktype
0362   0631 2A            mov b, [d]
0363   0632 38 00 00      mov c, 0
0364   0635             ; --- START RELATIONAL
0365   0635 D7            push a
0366   0636 11            mov a, b
0367   0637 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0367   063B 00 00 
0368   063D B0            cmp a, b
0369   063E FD 71         seq ; ==
0370   0640 E4            pop a
0371   0641             ; --- END RELATIONAL
0372   0641 C0 00 00      cmp b, 0
0373   0644 C6 87 06      je _if11_else
0374   0647             _if11_TRUE:
0375   0647             ; emit_byte(string_const[0], 0); 
0376   0647             ; --- START FUNCTION CALL
0377   0647 FD 2E 00 00   mov32 cb, $00000000
0377   064B 00 00 
0378   064D DD            push bl
0379   064E 3B A5 4E      mov d, _string_const_data ; $string_const
0380   0651 D7            push a
0381   0652 DA            push d
0382   0653 FD 2E 00 00   mov32 cb, $00000000
0382   0657 00 00 
0383   0659 E7            pop d
0384   065A 5A            add d, b
0385   065B E4            pop a
0386   065C 32            mov bl, [d]
0387   065D A7 00         mov bh, 0
0388   065F 38 00 00      mov c, 0
0389   0662 DD            push bl
0390   0663 07 65 27      call emit_byte
0391   0666 51 02 00      add sp, 2
0392   0669             ; --- END FUNCTION CALL
0393   0669             ; printx8(string_const[0]); 
0394   0669             ; --- START FUNCTION CALL
0395   0669 3B A5 4E      mov d, _string_const_data ; $string_const
0396   066C D7            push a
0397   066D DA            push d
0398   066E FD 2E 00 00   mov32 cb, $00000000
0398   0672 00 00 
0399   0674 E7            pop d
0400   0675 5A            add d, b
0401   0676 E4            pop a
0402   0677 32            mov bl, [d]
0403   0678 A7 00         mov bh, 0
0404   067A 38 00 00      mov c, 0
0405   067D DD            push bl
0406   067E 07 E0 4C      call printx8
0407   0681 51 01 00      add sp, 1
0408   0684             ; --- END FUNCTION CALL
0409   0684 0A C6 06      jmp _if11_exit
0410   0687             _if11_else:
0411   0687             ; if(toktype == INTEGER_CONST){ 
0412   0687             _if12_cond:
0413   0687 3B 61 4E      mov d, _toktype ; $toktype
0414   068A 2A            mov b, [d]
0415   068B 38 00 00      mov c, 0
0416   068E             ; --- START RELATIONAL
0417   068E D7            push a
0418   068F 11            mov a, b
0419   0690 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0419   0694 00 00 
0420   0696 B0            cmp a, b
0421   0697 FD 71         seq ; ==
0422   0699 E4            pop a
0423   069A             ; --- END RELATIONAL
0424   069A C0 00 00      cmp b, 0
0425   069D C6 C6 06      je _if12_exit
0426   06A0             _if12_TRUE:
0427   06A0             ; emit_byte(int_const, 0); 
0428   06A0             ; --- START FUNCTION CALL
0429   06A0 FD 2E 00 00   mov32 cb, $00000000
0429   06A4 00 00 
0430   06A6 DD            push bl
0431   06A7 3B A5 4F      mov d, _int_const ; $int_const
0432   06AA 2A            mov b, [d]
0433   06AB 38 00 00      mov c, 0
0434   06AE DD            push bl
0435   06AF 07 65 27      call emit_byte
0436   06B2 51 02 00      add sp, 2
0437   06B5             ; --- END FUNCTION CALL
0438   06B5             ; printx8(int_const); 
0439   06B5             ; --- START FUNCTION CALL
0440   06B5 3B A5 4F      mov d, _int_const ; $int_const
0441   06B8 2A            mov b, [d]
0442   06B9 38 00 00      mov c, 0
0443   06BC DD            push bl
0444   06BD 07 E0 4C      call printx8
0445   06C0 51 01 00      add sp, 1
0446   06C3             ; --- END FUNCTION CALL
0447   06C3 0A C6 06      jmp _if12_exit
0448   06C6             _if12_exit:
0449   06C6             _if11_exit:
0450   06C6             ; get(); 
0451   06C6             ; --- START FUNCTION CALL
0452   06C6 07 60 2B      call get
0453   06C9             ; if(tok != COMMA){ 
0454   06C9             _if13_cond:
0455   06C9 3B 5F 4E      mov d, _tok ; $tok
0456   06CC 2A            mov b, [d]
0457   06CD 38 00 00      mov c, 0
0458   06D0             ; --- START RELATIONAL
0459   06D0 D7            push a
0460   06D1 11            mov a, b
0461   06D2 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0461   06D6 00 00 
0462   06D8 B0            cmp a, b
0463   06D9 FD 72         sneq ; !=
0464   06DB E4            pop a
0465   06DC             ; --- END RELATIONAL
0466   06DC C0 00 00      cmp b, 0
0467   06DF C6 EB 06      je _if13_exit
0468   06E2             _if13_TRUE:
0469   06E2             ; back(); 
0470   06E2             ; --- START FUNCTION CALL
0471   06E2 07 D3 27      call back
0472   06E5             ; break; 
0473   06E5 0A FA 06      jmp _for10_exit ; for break
0474   06E8 0A EB 06      jmp _if13_exit
0475   06EB             _if13_exit:
0476   06EB             ; print(", "); 
0477   06EB             ; --- START FUNCTION CALL
0478   06EB 26 46 50      mov b, _s15 ; ", "
0479   06EE FD AB         swp b
0480   06F0 D8            push b
0481   06F1 07 54 3E      call print
0482   06F4 51 02 00      add sp, 2
0483   06F7             ; --- END FUNCTION CALL
0484   06F7             _for10_update:
0485   06F7 0A 2B 06      jmp _for10_cond
0486   06FA             _for10_exit:
0487   06FA             ; print("\n"); 
0488   06FA             ; --- START FUNCTION CALL
0489   06FA 26 FC 4F      mov b, _s10 ; "\n"
0490   06FD FD AB         swp b
0491   06FF D8            push b
0492   0700 07 54 3E      call print
0493   0703 51 02 00      add sp, 2
0494   0706             ; --- END FUNCTION CALL
0495   0706 0A 24 08      jmp _if9_exit
0496   0709             _if9_else:
0497   0709             ; if(tok == DW){ 
0498   0709             _if14_cond:
0499   0709 3B 5F 4E      mov d, _tok ; $tok
0500   070C 2A            mov b, [d]
0501   070D 38 00 00      mov c, 0
0502   0710             ; --- START RELATIONAL
0503   0710 D7            push a
0504   0711 11            mov a, b
0505   0712 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
0505   0716 00 00 
0506   0718 B0            cmp a, b
0507   0719 FD 71         seq ; ==
0508   071B E4            pop a
0509   071C             ; --- END RELATIONAL
0510   071C C0 00 00      cmp b, 0
0511   071F C6 24 08      je _if14_exit
0512   0722             _if14_TRUE:
0513   0722             ; print(".dw: "); 
0514   0722             ; --- START FUNCTION CALL
0515   0722 26 49 50      mov b, _s16 ; ".dw: "
0516   0725 FD AB         swp b
0517   0727 D8            push b
0518   0728 07 54 3E      call print
0519   072B 51 02 00      add sp, 2
0520   072E             ; --- END FUNCTION CALL
0521   072E             ; for(;;){ 
0522   072E             _for15_init:
0523   072E             _for15_cond:
0524   072E             _for15_block:
0525   072E             ; get(); 
0526   072E             ; --- START FUNCTION CALL
0527   072E 07 60 2B      call get
0528   0731             ; if(toktype == CHAR_CONST){ 
0529   0731             _if16_cond:
0530   0731 3B 61 4E      mov d, _toktype ; $toktype
0531   0734 2A            mov b, [d]
0532   0735 38 00 00      mov c, 0
0533   0738             ; --- START RELATIONAL
0534   0738 D7            push a
0535   0739 11            mov a, b
0536   073A FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0536   073E 00 00 
0537   0740 B0            cmp a, b
0538   0741 FD 71         seq ; ==
0539   0743 E4            pop a
0540   0744             ; --- END RELATIONAL
0541   0744 C0 00 00      cmp b, 0
0542   0747 C6 9E 07      je _if16_else
0543   074A             _if16_TRUE:
0544   074A             ; emit_byte(string_const[0], 0); 
0545   074A             ; --- START FUNCTION CALL
0546   074A FD 2E 00 00   mov32 cb, $00000000
0546   074E 00 00 
0547   0750 DD            push bl
0548   0751 3B A5 4E      mov d, _string_const_data ; $string_const
0549   0754 D7            push a
0550   0755 DA            push d
0551   0756 FD 2E 00 00   mov32 cb, $00000000
0551   075A 00 00 
0552   075C E7            pop d
0553   075D 5A            add d, b
0554   075E E4            pop a
0555   075F 32            mov bl, [d]
0556   0760 A7 00         mov bh, 0
0557   0762 38 00 00      mov c, 0
0558   0765 DD            push bl
0559   0766 07 65 27      call emit_byte
0560   0769 51 02 00      add sp, 2
0561   076C             ; --- END FUNCTION CALL
0562   076C             ; emit_byte(0, 0); 
0563   076C             ; --- START FUNCTION CALL
0564   076C FD 2E 00 00   mov32 cb, $00000000
0564   0770 00 00 
0565   0772 DD            push bl
0566   0773 FD 2E 00 00   mov32 cb, $00000000
0566   0777 00 00 
0567   0779 DD            push bl
0568   077A 07 65 27      call emit_byte
0569   077D 51 02 00      add sp, 2
0570   0780             ; --- END FUNCTION CALL
0571   0780             ; printx8(string_const[0]); 
0572   0780             ; --- START FUNCTION CALL
0573   0780 3B A5 4E      mov d, _string_const_data ; $string_const
0574   0783 D7            push a
0575   0784 DA            push d
0576   0785 FD 2E 00 00   mov32 cb, $00000000
0576   0789 00 00 
0577   078B E7            pop d
0578   078C 5A            add d, b
0579   078D E4            pop a
0580   078E 32            mov bl, [d]
0581   078F A7 00         mov bh, 0
0582   0791 38 00 00      mov c, 0
0583   0794 DD            push bl
0584   0795 07 E0 4C      call printx8
0585   0798 51 01 00      add sp, 1
0586   079B             ; --- END FUNCTION CALL
0587   079B 0A E1 07      jmp _if16_exit
0588   079E             _if16_else:
0589   079E             ; if(toktype == INTEGER_CONST){ 
0590   079E             _if17_cond:
0591   079E 3B 61 4E      mov d, _toktype ; $toktype
0592   07A1 2A            mov b, [d]
0593   07A2 38 00 00      mov c, 0
0594   07A5             ; --- START RELATIONAL
0595   07A5 D7            push a
0596   07A6 11            mov a, b
0597   07A7 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0597   07AB 00 00 
0598   07AD B0            cmp a, b
0599   07AE FD 71         seq ; ==
0600   07B0 E4            pop a
0601   07B1             ; --- END RELATIONAL
0602   07B1 C0 00 00      cmp b, 0
0603   07B4 C6 E1 07      je _if17_exit
0604   07B7             _if17_TRUE:
0605   07B7             ; emit_word(int_const, 0); 
0606   07B7             ; --- START FUNCTION CALL
0607   07B7 FD 2E 00 00   mov32 cb, $00000000
0607   07BB 00 00 
0608   07BD DD            push bl
0609   07BE 3B A5 4F      mov d, _int_const ; $int_const
0610   07C1 2A            mov b, [d]
0611   07C2 38 00 00      mov c, 0
0612   07C5 FD AB         swp b
0613   07C7 D8            push b
0614   07C8 07 9D 27      call emit_word
0615   07CB 51 03 00      add sp, 3
0616   07CE             ; --- END FUNCTION CALL
0617   07CE             ; printx16(int_const); 
0618   07CE             ; --- START FUNCTION CALL
0619   07CE 3B A5 4F      mov d, _int_const ; $int_const
0620   07D1 2A            mov b, [d]
0621   07D2 38 00 00      mov c, 0
0622   07D5 FD AB         swp b
0623   07D7 D8            push b
0624   07D8 07 26 4B      call printx16
0625   07DB 51 02 00      add sp, 2
0626   07DE             ; --- END FUNCTION CALL
0627   07DE 0A E1 07      jmp _if17_exit
0628   07E1             _if17_exit:
0629   07E1             _if16_exit:
0630   07E1             ; get(); 
0631   07E1             ; --- START FUNCTION CALL
0632   07E1 07 60 2B      call get
0633   07E4             ; if(tok != COMMA){ 
0634   07E4             _if18_cond:
0635   07E4 3B 5F 4E      mov d, _tok ; $tok
0636   07E7 2A            mov b, [d]
0637   07E8 38 00 00      mov c, 0
0638   07EB             ; --- START RELATIONAL
0639   07EB D7            push a
0640   07EC 11            mov a, b
0641   07ED FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0641   07F1 00 00 
0642   07F3 B0            cmp a, b
0643   07F4 FD 72         sneq ; !=
0644   07F6 E4            pop a
0645   07F7             ; --- END RELATIONAL
0646   07F7 C0 00 00      cmp b, 0
0647   07FA C6 06 08      je _if18_exit
0648   07FD             _if18_TRUE:
0649   07FD             ; back(); 
0650   07FD             ; --- START FUNCTION CALL
0651   07FD 07 D3 27      call back
0652   0800             ; break; 
0653   0800 0A 15 08      jmp _for15_exit ; for break
0654   0803 0A 06 08      jmp _if18_exit
0655   0806             _if18_exit:
0656   0806             ; print(", "); 
0657   0806             ; --- START FUNCTION CALL
0658   0806 26 46 50      mov b, _s15 ; ", "
0659   0809 FD AB         swp b
0660   080B D8            push b
0661   080C 07 54 3E      call print
0662   080F 51 02 00      add sp, 2
0663   0812             ; --- END FUNCTION CALL
0664   0812             _for15_update:
0665   0812 0A 2E 07      jmp _for15_cond
0666   0815             _for15_exit:
0667   0815             ; print("\n"); 
0668   0815             ; --- START FUNCTION CALL
0669   0815 26 FC 4F      mov b, _s10 ; "\n"
0670   0818 FD AB         swp b
0671   081A D8            push b
0672   081B 07 54 3E      call print
0673   081E 51 02 00      add sp, 2
0674   0821             ; --- END FUNCTION CALL
0675   0821 0A 24 08      jmp _if14_exit
0676   0824             _if14_exit:
0677   0824             _if9_exit:
0678   0824             _for7_update:
0679   0824 0A E4 05      jmp _for7_cond
0680   0827             _for7_exit:
0681   0827             ; print("Done.\n"); 
0682   0827             ; --- START FUNCTION CALL
0683   0827 26 4F 50      mov b, _s17 ; "Done.\n"
0684   082A FD AB         swp b
0685   082C D8            push b
0686   082D 07 54 3E      call print
0687   0830 51 02 00      add sp, 2
0688   0833             ; --- END FUNCTION CALL
0689   0833 F9            leave
0690   0834 09            ret
0691   0835             
0692   0835             parse_directive:
0693   0835 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0694   0838             ; get(); 
0695   0838             ; --- START FUNCTION CALL
0696   0838 07 60 2B      call get
0697   083B             ; if(tok == ORG){ 
0698   083B             _if19_cond:
0699   083B 3B 5F 4E      mov d, _tok ; $tok
0700   083E 2A            mov b, [d]
0701   083F 38 00 00      mov c, 0
0702   0842             ; --- START RELATIONAL
0703   0842 D7            push a
0704   0843 11            mov a, b
0705   0844 FD 2E 01 00   mov32 cb, $1 ; enum element: ORG
0705   0848 00 00 
0706   084A B0            cmp a, b
0707   084B FD 71         seq ; ==
0708   084D E4            pop a
0709   084E             ; --- END RELATIONAL
0710   084E C0 00 00      cmp b, 0
0711   0851 C6 90 08      je _if19_else
0712   0854             _if19_TRUE:
0713   0854             ; get(); 
0714   0854             ; --- START FUNCTION CALL
0715   0854 07 60 2B      call get
0716   0857             ; if(toktype != INTEGER_CONST) error("Integer constant expected in .org directive."); 
0717   0857             _if20_cond:
0718   0857 3B 61 4E      mov d, _toktype ; $toktype
0719   085A 2A            mov b, [d]
0720   085B 38 00 00      mov c, 0
0721   085E             ; --- START RELATIONAL
0722   085E D7            push a
0723   085F 11            mov a, b
0724   0860 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0724   0864 00 00 
0725   0866 B0            cmp a, b
0726   0867 FD 72         sneq ; !=
0727   0869 E4            pop a
0728   086A             ; --- END RELATIONAL
0729   086A C0 00 00      cmp b, 0
0730   086D C6 7F 08      je _if20_exit
0731   0870             _if20_TRUE:
0732   0870             ; error("Integer constant expected in .org directive."); 
0733   0870             ; --- START FUNCTION CALL
0734   0870 26 56 50      mov b, _s18 ; "Integer constant expected in .org directive."
0735   0873 FD AB         swp b
0736   0875 D8            push b
0737   0876 07 66 39      call error
0738   0879 51 02 00      add sp, 2
0739   087C             ; --- END FUNCTION CALL
0740   087C 0A 7F 08      jmp _if20_exit
0741   087F             _if20_exit:
0742   087F             ; _org = int_const; 
0743   087F 3B 5A 4E      mov d, __org ; $_org
0744   0882 DA            push d
0745   0883 3B A5 4F      mov d, _int_const ; $int_const
0746   0886 2A            mov b, [d]
0747   0887 38 00 00      mov c, 0
0748   088A E7            pop d
0749   088B FD 43         mov [d], b
0750   088D 0A 1E 0A      jmp _if19_exit
0751   0890             _if19_else:
0752   0890             ; if(tok == DB){ 
0753   0890             _if21_cond:
0754   0890 3B 5F 4E      mov d, _tok ; $tok
0755   0893 2A            mov b, [d]
0756   0894 38 00 00      mov c, 0
0757   0897             ; --- START RELATIONAL
0758   0897 D7            push a
0759   0898 11            mov a, b
0760   0899 FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0760   089D 00 00 
0761   089F B0            cmp a, b
0762   08A0 FD 71         seq ; ==
0763   08A2 E4            pop a
0764   08A3             ; --- END RELATIONAL
0765   08A3 C0 00 00      cmp b, 0
0766   08A6 C6 4C 09      je _if21_else
0767   08A9             _if21_TRUE:
0768   08A9             ; for(;;){ 
0769   08A9             _for22_init:
0770   08A9             _for22_cond:
0771   08A9             _for22_block:
0772   08A9             ; get(); 
0773   08A9             ; --- START FUNCTION CALL
0774   08A9 07 60 2B      call get
0775   08AC             ; if(toktype == CHAR_CONST){ 
0776   08AC             _if23_cond:
0777   08AC 3B 61 4E      mov d, _toktype ; $toktype
0778   08AF 2A            mov b, [d]
0779   08B0 38 00 00      mov c, 0
0780   08B3             ; --- START RELATIONAL
0781   08B3 D7            push a
0782   08B4 11            mov a, b
0783   08B5 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0783   08B9 00 00 
0784   08BB B0            cmp a, b
0785   08BC FD 71         seq ; ==
0786   08BE E4            pop a
0787   08BF             ; --- END RELATIONAL
0788   08BF C0 00 00      cmp b, 0
0789   08C2 C6 ED 08      je _if23_else
0790   08C5             _if23_TRUE:
0791   08C5             ; emit_byte(string_const[0], emit_override); 
0792   08C5             ; --- START FUNCTION CALL
0793   08C5 FA 05 00      lea d, [bp + 5] ; $emit_override
0794   08C8 32            mov bl, [d]
0795   08C9 A7 00         mov bh, 0
0796   08CB 38 00 00      mov c, 0
0797   08CE DD            push bl
0798   08CF 3B A5 4E      mov d, _string_const_data ; $string_const
0799   08D2 D7            push a
0800   08D3 DA            push d
0801   08D4 FD 2E 00 00   mov32 cb, $00000000
0801   08D8 00 00 
0802   08DA E7            pop d
0803   08DB 5A            add d, b
0804   08DC E4            pop a
0805   08DD 32            mov bl, [d]
0806   08DE A7 00         mov bh, 0
0807   08E0 38 00 00      mov c, 0
0808   08E3 DD            push bl
0809   08E4 07 65 27      call emit_byte
0810   08E7 51 02 00      add sp, 2
0811   08EA             ; --- END FUNCTION CALL
0812   08EA 0A 21 09      jmp _if23_exit
0813   08ED             _if23_else:
0814   08ED             ; if(toktype == INTEGER_CONST){ 
0815   08ED             _if24_cond:
0816   08ED 3B 61 4E      mov d, _toktype ; $toktype
0817   08F0 2A            mov b, [d]
0818   08F1 38 00 00      mov c, 0
0819   08F4             ; --- START RELATIONAL
0820   08F4 D7            push a
0821   08F5 11            mov a, b
0822   08F6 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0822   08FA 00 00 
0823   08FC B0            cmp a, b
0824   08FD FD 71         seq ; ==
0825   08FF E4            pop a
0826   0900             ; --- END RELATIONAL
0827   0900 C0 00 00      cmp b, 0
0828   0903 C6 21 09      je _if24_exit
0829   0906             _if24_TRUE:
0830   0906             ; emit_byte(int_const, emit_override); 
0831   0906             ; --- START FUNCTION CALL
0832   0906 FA 05 00      lea d, [bp + 5] ; $emit_override
0833   0909 32            mov bl, [d]
0834   090A A7 00         mov bh, 0
0835   090C 38 00 00      mov c, 0
0836   090F DD            push bl
0837   0910 3B A5 4F      mov d, _int_const ; $int_const
0838   0913 2A            mov b, [d]
0839   0914 38 00 00      mov c, 0
0840   0917 DD            push bl
0841   0918 07 65 27      call emit_byte
0842   091B 51 02 00      add sp, 2
0843   091E             ; --- END FUNCTION CALL
0844   091E 0A 21 09      jmp _if24_exit
0845   0921             _if24_exit:
0846   0921             _if23_exit:
0847   0921             ; get(); 
0848   0921             ; --- START FUNCTION CALL
0849   0921 07 60 2B      call get
0850   0924             ; if(tok != COMMA){ 
0851   0924             _if25_cond:
0852   0924 3B 5F 4E      mov d, _tok ; $tok
0853   0927 2A            mov b, [d]
0854   0928 38 00 00      mov c, 0
0855   092B             ; --- START RELATIONAL
0856   092B D7            push a
0857   092C 11            mov a, b
0858   092D FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0858   0931 00 00 
0859   0933 B0            cmp a, b
0860   0934 FD 72         sneq ; !=
0861   0936 E4            pop a
0862   0937             ; --- END RELATIONAL
0863   0937 C0 00 00      cmp b, 0
0864   093A C6 46 09      je _if25_exit
0865   093D             _if25_TRUE:
0866   093D             ; back(); 
0867   093D             ; --- START FUNCTION CALL
0868   093D 07 D3 27      call back
0869   0940             ; break; 
0870   0940 0A 49 09      jmp _for22_exit ; for break
0871   0943 0A 46 09      jmp _if25_exit
0872   0946             _if25_exit:
0873   0946             _for22_update:
0874   0946 0A A9 08      jmp _for22_cond
0875   0949             _for22_exit:
0876   0949 0A 1E 0A      jmp _if21_exit
0877   094C             _if21_else:
0878   094C             ; if(tok == DW){ 
0879   094C             _if26_cond:
0880   094C 3B 5F 4E      mov d, _tok ; $tok
0881   094F 2A            mov b, [d]
0882   0950 38 00 00      mov c, 0
0883   0953             ; --- START RELATIONAL
0884   0953 D7            push a
0885   0954 11            mov a, b
0886   0955 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
0886   0959 00 00 
0887   095B B0            cmp a, b
0888   095C FD 71         seq ; ==
0889   095E E4            pop a
0890   095F             ; --- END RELATIONAL
0891   095F C0 00 00      cmp b, 0
0892   0962 C6 1E 0A      je _if26_exit
0893   0965             _if26_TRUE:
0894   0965             ; for(;;){ 
0895   0965             _for27_init:
0896   0965             _for27_cond:
0897   0965             _for27_block:
0898   0965             ; get(); 
0899   0965             ; --- START FUNCTION CALL
0900   0965 07 60 2B      call get
0901   0968             ; if(toktype == CHAR_CONST){ 
0902   0968             _if28_cond:
0903   0968 3B 61 4E      mov d, _toktype ; $toktype
0904   096B 2A            mov b, [d]
0905   096C 38 00 00      mov c, 0
0906   096F             ; --- START RELATIONAL
0907   096F D7            push a
0908   0970 11            mov a, b
0909   0971 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0909   0975 00 00 
0910   0977 B0            cmp a, b
0911   0978 FD 71         seq ; ==
0912   097A E4            pop a
0913   097B             ; --- END RELATIONAL
0914   097B C0 00 00      cmp b, 0
0915   097E C6 C0 09      je _if28_else
0916   0981             _if28_TRUE:
0917   0981             ; emit_byte(string_const[0], emit_override); 
0918   0981             ; --- START FUNCTION CALL
0919   0981 FA 05 00      lea d, [bp + 5] ; $emit_override
0920   0984 32            mov bl, [d]
0921   0985 A7 00         mov bh, 0
0922   0987 38 00 00      mov c, 0
0923   098A DD            push bl
0924   098B 3B A5 4E      mov d, _string_const_data ; $string_const
0925   098E D7            push a
0926   098F DA            push d
0927   0990 FD 2E 00 00   mov32 cb, $00000000
0927   0994 00 00 
0928   0996 E7            pop d
0929   0997 5A            add d, b
0930   0998 E4            pop a
0931   0999 32            mov bl, [d]
0932   099A A7 00         mov bh, 0
0933   099C 38 00 00      mov c, 0
0934   099F DD            push bl
0935   09A0 07 65 27      call emit_byte
0936   09A3 51 02 00      add sp, 2
0937   09A6             ; --- END FUNCTION CALL
0938   09A6             ; emit_byte(0, emit_override); 
0939   09A6             ; --- START FUNCTION CALL
0940   09A6 FA 05 00      lea d, [bp + 5] ; $emit_override
0941   09A9 32            mov bl, [d]
0942   09AA A7 00         mov bh, 0
0943   09AC 38 00 00      mov c, 0
0944   09AF DD            push bl
0945   09B0 FD 2E 00 00   mov32 cb, $00000000
0945   09B4 00 00 
0946   09B6 DD            push bl
0947   09B7 07 65 27      call emit_byte
0948   09BA 51 02 00      add sp, 2
0949   09BD             ; --- END FUNCTION CALL
0950   09BD 0A F3 09      jmp _if28_exit
0951   09C0             _if28_else:
0952   09C0             ; if(toktype == INTEGER_CONST){ 
0953   09C0             _if29_cond:
0954   09C0 3B 61 4E      mov d, _toktype ; $toktype
0955   09C3 2A            mov b, [d]
0956   09C4 38 00 00      mov c, 0
0957   09C7             ; --- START RELATIONAL
0958   09C7 D7            push a
0959   09C8 11            mov a, b
0960   09C9 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0960   09CD 00 00 
0961   09CF B0            cmp a, b
0962   09D0 FD 71         seq ; ==
0963   09D2 E4            pop a
0964   09D3             ; --- END RELATIONAL
0965   09D3 C0 00 00      cmp b, 0
0966   09D6 C6 F3 09      je _if29_exit
0967   09D9             _if29_TRUE:
0968   09D9             ; emit_word(int_const, 0); 
0969   09D9             ; --- START FUNCTION CALL
0970   09D9 FD 2E 00 00   mov32 cb, $00000000
0970   09DD 00 00 
0971   09DF DD            push bl
0972   09E0 3B A5 4F      mov d, _int_const ; $int_const
0973   09E3 2A            mov b, [d]
0974   09E4 38 00 00      mov c, 0
0975   09E7 FD AB         swp b
0976   09E9 D8            push b
0977   09EA 07 9D 27      call emit_word
0978   09ED 51 03 00      add sp, 3
0979   09F0             ; --- END FUNCTION CALL
0980   09F0 0A F3 09      jmp _if29_exit
0981   09F3             _if29_exit:
0982   09F3             _if28_exit:
0983   09F3             ; get(); 
0984   09F3             ; --- START FUNCTION CALL
0985   09F3 07 60 2B      call get
0986   09F6             ; if(tok != COMMA){ 
0987   09F6             _if30_cond:
0988   09F6 3B 5F 4E      mov d, _tok ; $tok
0989   09F9 2A            mov b, [d]
0990   09FA 38 00 00      mov c, 0
0991   09FD             ; --- START RELATIONAL
0992   09FD D7            push a
0993   09FE 11            mov a, b
0994   09FF FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0994   0A03 00 00 
0995   0A05 B0            cmp a, b
0996   0A06 FD 72         sneq ; !=
0997   0A08 E4            pop a
0998   0A09             ; --- END RELATIONAL
0999   0A09 C0 00 00      cmp b, 0
1000   0A0C C6 18 0A      je _if30_exit
1001   0A0F             _if30_TRUE:
1002   0A0F             ; back(); 
1003   0A0F             ; --- START FUNCTION CALL
1004   0A0F 07 D3 27      call back
1005   0A12             ; break; 
1006   0A12 0A 1B 0A      jmp _for27_exit ; for break
1007   0A15 0A 18 0A      jmp _if30_exit
1008   0A18             _if30_exit:
1009   0A18             _for27_update:
1010   0A18 0A 65 09      jmp _for27_cond
1011   0A1B             _for27_exit:
1012   0A1B 0A 1E 0A      jmp _if26_exit
1013   0A1E             _if26_exit:
1014   0A1E             _if21_exit:
1015   0A1E             _if19_exit:
1016   0A1E F9            leave
1017   0A1F 09            ret
1018   0A20             
1019   0A20             label_directive_scan:
1020   0A20 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1021   0A23             ; char *temp_prog; 
1022   0A23 52 02 00      sub sp, 2
1023   0A26             ; int i; 
1024   0A26 52 02 00      sub sp, 2
1025   0A29             ; prog = program; 
1026   0A29 3B 63 4E      mov d, _prog ; $prog
1027   0A2C DA            push d
1028   0A2D 3B A7 4F      mov d, _program ; $program
1029   0A30 2A            mov b, [d]
1030   0A31 38 00 00      mov c, 0
1031   0A34 E7            pop d
1032   0A35 FD 43         mov [d], b
1033   0A37             ; bin_p = bin_out + _org; 
1034   0A37 3B AB 4F      mov d, _bin_p ; $bin_p
1035   0A3A DA            push d
1036   0A3B 3B A9 4F      mov d, _bin_out ; $bin_out
1037   0A3E 2A            mov b, [d]
1038   0A3F 38 00 00      mov c, 0
1039   0A42             ; --- START TERMS
1040   0A42 D7            push a
1041   0A43 11            mov a, b
1042   0A44 3B 5A 4E      mov d, __org ; $_org
1043   0A47 2A            mov b, [d]
1044   0A48 38 00 00      mov c, 0
1045   0A4B 56            add b, a
1046   0A4C E4            pop a
1047   0A4D             ; --- END TERMS
1048   0A4D E7            pop d
1049   0A4E FD 43         mov [d], b
1050   0A50             ; pc = _org; 
1051   0A50 3B 5C 4E      mov d, _pc ; $pc
1052   0A53 DA            push d
1053   0A54 3B 5A 4E      mov d, __org ; $_org
1054   0A57 2A            mov b, [d]
1055   0A58 38 00 00      mov c, 0
1056   0A5B E7            pop d
1057   0A5C FD 43         mov [d], b
1058   0A5E             ; print("Parsing labels and directives...\n"); 
1059   0A5E             ; --- START FUNCTION CALL
1060   0A5E 26 83 50      mov b, _s19 ; "Parsing labels and directives...\n"
1061   0A61 FD AB         swp b
1062   0A63 D8            push b
1063   0A64 07 54 3E      call print
1064   0A67 51 02 00      add sp, 2
1065   0A6A             ; --- END FUNCTION CALL
1066   0A6A             ; for(;;){ 
1067   0A6A             _for31_init:
1068   0A6A             _for31_cond:
1069   0A6A             _for31_block:
1070   0A6A             ; get(); back(); 
1071   0A6A             ; --- START FUNCTION CALL
1072   0A6A 07 60 2B      call get
1073   0A6D             ; back(); 
1074   0A6D             ; --- START FUNCTION CALL
1075   0A6D 07 D3 27      call back
1076   0A70             ; temp_prog = prog; 
1077   0A70 FA FF FF      lea d, [bp + -1] ; $temp_prog
1078   0A73 DA            push d
1079   0A74 3B 63 4E      mov d, _prog ; $prog
1080   0A77 2A            mov b, [d]
1081   0A78 38 00 00      mov c, 0
1082   0A7B E7            pop d
1083   0A7C FD 43         mov [d], b
1084   0A7E             ; get(); 
1085   0A7E             ; --- START FUNCTION CALL
1086   0A7E 07 60 2B      call get
1087   0A81             ; if(toktype == END) break; 
1088   0A81             _if32_cond:
1089   0A81 3B 61 4E      mov d, _toktype ; $toktype
1090   0A84 2A            mov b, [d]
1091   0A85 38 00 00      mov c, 0
1092   0A88             ; --- START RELATIONAL
1093   0A88 D7            push a
1094   0A89 11            mov a, b
1095   0A8A FD 2E 07 00   mov32 cb, $7 ; enum element: END
1095   0A8E 00 00 
1096   0A90 B0            cmp a, b
1097   0A91 FD 71         seq ; ==
1098   0A93 E4            pop a
1099   0A94             ; --- END RELATIONAL
1100   0A94 C0 00 00      cmp b, 0
1101   0A97 C6 A0 0A      je _if32_exit
1102   0A9A             _if32_TRUE:
1103   0A9A             ; break; 
1104   0A9A 0A 6A 0B      jmp _for31_exit ; for break
1105   0A9D 0A A0 0A      jmp _if32_exit
1106   0AA0             _if32_exit:
1107   0AA0             ; if(tok == DOT){ 
1108   0AA0             _if33_cond:
1109   0AA0 3B 5F 4E      mov d, _tok ; $tok
1110   0AA3 2A            mov b, [d]
1111   0AA4 38 00 00      mov c, 0
1112   0AA7             ; --- START RELATIONAL
1113   0AA7 D7            push a
1114   0AA8 11            mov a, b
1115   0AA9 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
1115   0AAD 00 00 
1116   0AAF B0            cmp a, b
1117   0AB0 FD 71         seq ; ==
1118   0AB2 E4            pop a
1119   0AB3             ; --- END RELATIONAL
1120   0AB3 C0 00 00      cmp b, 0
1121   0AB6 C6 E8 0A      je _if33_else
1122   0AB9             _if33_TRUE:
1123   0AB9             ; get(); 
1124   0AB9             ; --- START FUNCTION CALL
1125   0AB9 07 60 2B      call get
1126   0ABC             ; if(is_directive(token)){ 
1127   0ABC             _if34_cond:
1128   0ABC             ; --- START FUNCTION CALL
1129   0ABC 3B 65 4E      mov d, _token_data ; $token
1130   0ABF 2D            mov b, d
1131   0AC0 38 00 00      mov c, 0
1132   0AC3 FD AB         swp b
1133   0AC5 D8            push b
1134   0AC6 07 79 21      call is_directive
1135   0AC9 51 02 00      add sp, 2
1136   0ACC             ; --- END FUNCTION CALL
1137   0ACC C0 00 00      cmp b, 0
1138   0ACF C6 E5 0A      je _if34_exit
1139   0AD2             _if34_TRUE:
1140   0AD2             ; back(); 
1141   0AD2             ; --- START FUNCTION CALL
1142   0AD2 07 D3 27      call back
1143   0AD5             ; parse_directive(1); 
1144   0AD5             ; --- START FUNCTION CALL
1145   0AD5 FD 2E 01 00   mov32 cb, $00000001
1145   0AD9 00 00 
1146   0ADB DD            push bl
1147   0ADC 07 35 08      call parse_directive
1148   0ADF 51 01 00      add sp, 1
1149   0AE2             ; --- END FUNCTION CALL
1150   0AE2 0A E5 0A      jmp _if34_exit
1151   0AE5             _if34_exit:
1152   0AE5 0A 67 0B      jmp _if33_exit
1153   0AE8             _if33_else:
1154   0AE8             ; if(toktype == IDENTIFIER){ 
1155   0AE8             _if35_cond:
1156   0AE8 3B 61 4E      mov d, _toktype ; $toktype
1157   0AEB 2A            mov b, [d]
1158   0AEC 38 00 00      mov c, 0
1159   0AEF             ; --- START RELATIONAL
1160   0AEF D7            push a
1161   0AF0 11            mov a, b
1162   0AF1 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1162   0AF5 00 00 
1163   0AF7 B0            cmp a, b
1164   0AF8 FD 71         seq ; ==
1165   0AFA E4            pop a
1166   0AFB             ; --- END RELATIONAL
1167   0AFB C0 00 00      cmp b, 0
1168   0AFE C6 67 0B      je _if35_exit
1169   0B01             _if35_TRUE:
1170   0B01             ; get(); 
1171   0B01             ; --- START FUNCTION CALL
1172   0B01 07 60 2B      call get
1173   0B04             ; if(tok == COLON){ 
1174   0B04             _if36_cond:
1175   0B04 3B 5F 4E      mov d, _tok ; $tok
1176   0B07 2A            mov b, [d]
1177   0B08 38 00 00      mov c, 0
1178   0B0B             ; --- START RELATIONAL
1179   0B0B D7            push a
1180   0B0C 11            mov a, b
1181   0B0D FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
1181   0B11 00 00 
1182   0B13 B0            cmp a, b
1183   0B14 FD 71         seq ; ==
1184   0B16 E4            pop a
1185   0B17             ; --- END RELATIONAL
1186   0B17 C0 00 00      cmp b, 0
1187   0B1A C6 3D 0B      je _if36_else
1188   0B1D             _if36_TRUE:
1189   0B1D             ; prog = temp_prog; 
1190   0B1D 3B 63 4E      mov d, _prog ; $prog
1191   0B20 DA            push d
1192   0B21 FA FF FF      lea d, [bp + -1] ; $temp_prog
1193   0B24 2A            mov b, [d]
1194   0B25 38 00 00      mov c, 0
1195   0B28 E7            pop d
1196   0B29 FD 43         mov [d], b
1197   0B2B             ; parse_label(); 
1198   0B2B             ; --- START FUNCTION CALL
1199   0B2B 07 AF 21      call parse_label
1200   0B2E             ; print("."); 
1201   0B2E             ; --- START FUNCTION CALL
1202   0B2E 26 A5 50      mov b, _s20 ; "."
1203   0B31 FD AB         swp b
1204   0B33 D8            push b
1205   0B34 07 54 3E      call print
1206   0B37 51 02 00      add sp, 2
1207   0B3A             ; --- END FUNCTION CALL
1208   0B3A 0A 64 0B      jmp _if36_exit
1209   0B3D             _if36_else:
1210   0B3D             ; prog = temp_prog; 
1211   0B3D 3B 63 4E      mov d, _prog ; $prog
1212   0B40 DA            push d
1213   0B41 FA FF FF      lea d, [bp + -1] ; $temp_prog
1214   0B44 2A            mov b, [d]
1215   0B45 38 00 00      mov c, 0
1216   0B48 E7            pop d
1217   0B49 FD 43         mov [d], b
1218   0B4B             ; parse_instr(1);       
1219   0B4B             ; --- START FUNCTION CALL
1220   0B4B FD 2E 01 00   mov32 cb, $00000001
1220   0B4F 00 00 
1221   0B51 DD            push bl
1222   0B52 07 70 13      call parse_instr
1223   0B55 51 01 00      add sp, 1
1224   0B58             ; --- END FUNCTION CALL
1225   0B58             ; print("."); 
1226   0B58             ; --- START FUNCTION CALL
1227   0B58 26 A5 50      mov b, _s20 ; "."
1228   0B5B FD AB         swp b
1229   0B5D D8            push b
1230   0B5E 07 54 3E      call print
1231   0B61 51 02 00      add sp, 2
1232   0B64             ; --- END FUNCTION CALL
1233   0B64             _if36_exit:
1234   0B64 0A 67 0B      jmp _if35_exit
1235   0B67             _if35_exit:
1236   0B67             _if33_exit:
1237   0B67             _for31_update:
1238   0B67 0A 6A 0A      jmp _for31_cond
1239   0B6A             _for31_exit:
1240   0B6A             ; print("\nDone.\n"); 
1241   0B6A             ; --- START FUNCTION CALL
1242   0B6A 26 A7 50      mov b, _s21 ; "\nDone.\n"
1243   0B6D FD AB         swp b
1244   0B6F D8            push b
1245   0B70 07 54 3E      call print
1246   0B73 51 02 00      add sp, 2
1247   0B76             ; --- END FUNCTION CALL
1248   0B76             ; printf("Org: %s\n", _org); 
1249   0B76             ; --- START FUNCTION CALL
1250   0B76 3B 5A 4E      mov d, __org ; $_org
1251   0B79 2A            mov b, [d]
1252   0B7A 38 00 00      mov c, 0
1253   0B7D FD AB         swp b
1254   0B7F D8            push b
1255   0B80 26 AF 50      mov b, _s22 ; "Org: %s\n"
1256   0B83 FD AB         swp b
1257   0B85 D8            push b
1258   0B86 07 84 42      call printf
1259   0B89 51 04 00      add sp, 4
1260   0B8C             ; --- END FUNCTION CALL
1261   0B8C             ; print("\nLabels list:\n"); 
1262   0B8C             ; --- START FUNCTION CALL
1263   0B8C 26 B8 50      mov b, _s23 ; "\nLabels list:\n"
1264   0B8F FD AB         swp b
1265   0B91 D8            push b
1266   0B92 07 54 3E      call print
1267   0B95 51 02 00      add sp, 2
1268   0B98             ; --- END FUNCTION CALL
1269   0B98             ; for(i = 0; label_table[i].name[0]; i++){ 
1270   0B98             _for37_init:
1271   0B98 FA FD FF      lea d, [bp + -3] ; $i
1272   0B9B DA            push d
1273   0B9C FD 2E 00 00   mov32 cb, $00000000
1273   0BA0 00 00 
1274   0BA2 E7            pop d
1275   0BA3 FD 43         mov [d], b
1276   0BA5             _for37_cond:
1277   0BA5 3B 3A 4D      mov d, _label_table_data ; $label_table
1278   0BA8 D7            push a
1279   0BA9 DA            push d
1280   0BAA FA FD FF      lea d, [bp + -3] ; $i
1281   0BAD 2A            mov b, [d]
1282   0BAE 38 00 00      mov c, 0
1283   0BB1 E7            pop d
1284   0BB2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1285   0BB6 E4            pop a
1286   0BB7 58 00 00      add d, 0
1287   0BBA D7            push a
1288   0BBB DA            push d
1289   0BBC FD 2E 00 00   mov32 cb, $00000000
1289   0BC0 00 00 
1290   0BC2 E7            pop d
1291   0BC3 5A            add d, b
1292   0BC4 E4            pop a
1293   0BC5 32            mov bl, [d]
1294   0BC6 A7 00         mov bh, 0
1295   0BC8 38 00 00      mov c, 0
1296   0BCB C0 00 00      cmp b, 0
1297   0BCE C6 28 0C      je _for37_exit
1298   0BD1             _for37_block:
1299   0BD1             ; printf("%s: %x\n", label_table[i].name, label_table[i].address); 
1300   0BD1             ; --- START FUNCTION CALL
1301   0BD1 3B 3A 4D      mov d, _label_table_data ; $label_table
1302   0BD4 D7            push a
1303   0BD5 DA            push d
1304   0BD6 FA FD FF      lea d, [bp + -3] ; $i
1305   0BD9 2A            mov b, [d]
1306   0BDA 38 00 00      mov c, 0
1307   0BDD E7            pop d
1308   0BDE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1309   0BE2 E4            pop a
1310   0BE3 58 10 00      add d, 16
1311   0BE6 2A            mov b, [d]
1312   0BE7 38 00 00      mov c, 0
1313   0BEA FD AB         swp b
1314   0BEC D8            push b
1315   0BED 3B 3A 4D      mov d, _label_table_data ; $label_table
1316   0BF0 D7            push a
1317   0BF1 DA            push d
1318   0BF2 FA FD FF      lea d, [bp + -3] ; $i
1319   0BF5 2A            mov b, [d]
1320   0BF6 38 00 00      mov c, 0
1321   0BF9 E7            pop d
1322   0BFA FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1323   0BFE E4            pop a
1324   0BFF 58 00 00      add d, 0
1325   0C02 2D            mov b, d
1326   0C03 38 00 00      mov c, 0
1327   0C06 FD AB         swp b
1328   0C08 D8            push b
1329   0C09 26 C7 50      mov b, _s24 ; "%s: %x\n"
1330   0C0C FD AB         swp b
1331   0C0E D8            push b
1332   0C0F 07 84 42      call printf
1333   0C12 51 06 00      add sp, 6
1334   0C15             ; --- END FUNCTION CALL
1335   0C15             _for37_update:
1336   0C15 FA FD FF      lea d, [bp + -3] ; $i
1337   0C18 2A            mov b, [d]
1338   0C19 38 00 00      mov c, 0
1339   0C1C 11            mov a, b
1340   0C1D FD 77         inc b
1341   0C1F FA FD FF      lea d, [bp + -3] ; $i
1342   0C22 FD 43         mov [d], b
1343   0C24 27            mov b, a
1344   0C25 0A A5 0B      jmp _for37_cond
1345   0C28             _for37_exit:
1346   0C28             ; print("\n"); 
1347   0C28             ; --- START FUNCTION CALL
1348   0C28 26 FC 4F      mov b, _s10 ; "\n"
1349   0C2B FD AB         swp b
1350   0C2D D8            push b
1351   0C2E 07 54 3E      call print
1352   0C31 51 02 00      add sp, 2
1353   0C34             ; --- END FUNCTION CALL
1354   0C34 F9            leave
1355   0C35 09            ret
1356   0C36             
1357   0C36             label_parse_instr:
1358   0C36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1359   0C39             ; char opcode[32]; 
1360   0C39 52 20 00      sub sp, 32
1361   0C3C             ; char code_line[64]; 
1362   0C3C 52 40 00      sub sp, 64
1363   0C3F             ; struct t_opcode op; 
1364   0C3F 52 1A 00      sub sp, 26
1365   0C42             ; int num_operands, num_operandsexp; 
1366   0C42 52 02 00      sub sp, 2
1367   0C45 52 02 00      sub sp, 2
1368   0C48             ; int i, j; 
1369   0C48 52 02 00      sub sp, 2
1370   0C4B 52 02 00      sub sp, 2
1371   0C4E             ; char operand_types[3]; // operand types and locations 
1372   0C4E 52 03 00      sub sp, 3
1373   0C51             ; int old_pc; 
1374   0C51 52 02 00      sub sp, 2
1375   0C54             ; char has_operands; 
1376   0C54 52 01 00      sub sp, 1
1377   0C57             ; old_pc = pc; 
1378   0C57 FA 7A FF      lea d, [bp + -134] ; $old_pc
1379   0C5A DA            push d
1380   0C5B 3B 5C 4E      mov d, _pc ; $pc
1381   0C5E 2A            mov b, [d]
1382   0C5F 38 00 00      mov c, 0
1383   0C62 E7            pop d
1384   0C63 FD 43         mov [d], b
1385   0C65             ; get_line(); 
1386   0C65             ; --- START FUNCTION CALL
1387   0C65 07 43 2A      call get_line
1388   0C68             ; push_prog(); 
1389   0C68             ; --- START FUNCTION CALL
1390   0C68 07 C4 39      call push_prog
1391   0C6B             ; strcpy(code_line, string_const); 
1392   0C6B             ; --- START FUNCTION CALL
1393   0C6B 3B A5 4E      mov d, _string_const_data ; $string_const
1394   0C6E 2D            mov b, d
1395   0C6F 38 00 00      mov c, 0
1396   0C72 FD AB         swp b
1397   0C74 D8            push b
1398   0C75 FA A1 FF      lea d, [bp + -95] ; $code_line
1399   0C78 2D            mov b, d
1400   0C79 38 00 00      mov c, 0
1401   0C7C FD AB         swp b
1402   0C7E D8            push b
1403   0C7F 07 83 4B      call strcpy
1404   0C82 51 04 00      add sp, 4
1405   0C85             ; --- END FUNCTION CALL
1406   0C85             ; has_operands = 0; 
1407   0C85 FA 79 FF      lea d, [bp + -135] ; $has_operands
1408   0C88 DA            push d
1409   0C89 FD 2E 00 00   mov32 cb, $00000000
1409   0C8D 00 00 
1410   0C8F E7            pop d
1411   0C90 FD 3E         mov [d], bl
1412   0C92             ; prog = code_line; 
1413   0C92 3B 63 4E      mov d, _prog ; $prog
1414   0C95 DA            push d
1415   0C96 FA A1 FF      lea d, [bp + -95] ; $code_line
1416   0C99 2D            mov b, d
1417   0C9A 38 00 00      mov c, 0
1418   0C9D E7            pop d
1419   0C9E FD 43         mov [d], b
1420   0CA0             ; get(); // get main opcode 
1421   0CA0             ; --- START FUNCTION CALL
1422   0CA0 07 60 2B      call get
1423   0CA3             ; for(;;){ 
1424   0CA3             _for38_init:
1425   0CA3             _for38_cond:
1426   0CA3             _for38_block:
1427   0CA3             ; get(); 
1428   0CA3             ; --- START FUNCTION CALL
1429   0CA3 07 60 2B      call get
1430   0CA6             ; if(toktype == END) break; 
1431   0CA6             _if39_cond:
1432   0CA6 3B 61 4E      mov d, _toktype ; $toktype
1433   0CA9 2A            mov b, [d]
1434   0CAA 38 00 00      mov c, 0
1435   0CAD             ; --- START RELATIONAL
1436   0CAD D7            push a
1437   0CAE 11            mov a, b
1438   0CAF FD 2E 07 00   mov32 cb, $7 ; enum element: END
1438   0CB3 00 00 
1439   0CB5 B0            cmp a, b
1440   0CB6 FD 71         seq ; ==
1441   0CB8 E4            pop a
1442   0CB9             ; --- END RELATIONAL
1443   0CB9 C0 00 00      cmp b, 0
1444   0CBC C6 C5 0C      je _if39_exit
1445   0CBF             _if39_TRUE:
1446   0CBF             ; break; 
1447   0CBF 0A 21 0D      jmp _for38_exit ; for break
1448   0CC2 0A C5 0C      jmp _if39_exit
1449   0CC5             _if39_exit:
1450   0CC5             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1451   0CC5             _if40_cond:
1452   0CC5 3B 61 4E      mov d, _toktype ; $toktype
1453   0CC8 2A            mov b, [d]
1454   0CC9 38 00 00      mov c, 0
1455   0CCC             ; --- START RELATIONAL
1456   0CCC D7            push a
1457   0CCD 11            mov a, b
1458   0CCE FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1458   0CD2 00 00 
1459   0CD4 B0            cmp a, b
1460   0CD5 FD 71         seq ; ==
1461   0CD7 E4            pop a
1462   0CD8             ; --- END RELATIONAL
1463   0CD8             ; --- START LOGICAL OR
1464   0CD8 D7            push a
1465   0CD9 11            mov a, b
1466   0CDA 3B 61 4E      mov d, _toktype ; $toktype
1467   0CDD 2A            mov b, [d]
1468   0CDE 38 00 00      mov c, 0
1469   0CE1             ; --- START RELATIONAL
1470   0CE1 D7            push a
1471   0CE2 11            mov a, b
1472   0CE3 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1472   0CE7 00 00 
1473   0CE9 B0            cmp a, b
1474   0CEA FD 71         seq ; ==
1475   0CEC E4            pop a
1476   0CED             ; --- END RELATIONAL
1477   0CED             ; --- START LOGICAL AND
1478   0CED D7            push a
1479   0CEE 11            mov a, b
1480   0CEF             ; --- START FUNCTION CALL
1481   0CEF 3B 65 4E      mov d, _token_data ; $token
1482   0CF2 2D            mov b, d
1483   0CF3 38 00 00      mov c, 0
1484   0CF6 FD AB         swp b
1485   0CF8 D8            push b
1486   0CF9 07 04 1F      call is_reserved
1487   0CFC 51 02 00      add sp, 2
1488   0CFF             ; --- END FUNCTION CALL
1489   0CFF FD A7         sand a, b
1490   0D01 E4            pop a
1491   0D02             ; --- END LOGICAL AND
1492   0D02 FD A8         sor a, b ; ||
1493   0D04 E4            pop a
1494   0D05             ; --- END LOGICAL OR
1495   0D05 C0 00 00      cmp b, 0
1496   0D08 C6 1E 0D      je _if40_exit
1497   0D0B             _if40_TRUE:
1498   0D0B             ; has_operands = 1; 
1499   0D0B FA 79 FF      lea d, [bp + -135] ; $has_operands
1500   0D0E DA            push d
1501   0D0F FD 2E 01 00   mov32 cb, $00000001
1501   0D13 00 00 
1502   0D15 E7            pop d
1503   0D16 FD 3E         mov [d], bl
1504   0D18             ; break; 
1505   0D18 0A 21 0D      jmp _for38_exit ; for break
1506   0D1B 0A 1E 0D      jmp _if40_exit
1507   0D1E             _if40_exit:
1508   0D1E             _for38_update:
1509   0D1E 0A A3 0C      jmp _for38_cond
1510   0D21             _for38_exit:
1511   0D21             ; opcode[0] = '\0'; 
1512   0D21 FA E1 FF      lea d, [bp + -31] ; $opcode
1513   0D24 D7            push a
1514   0D25 DA            push d
1515   0D26 FD 2E 00 00   mov32 cb, $00000000
1515   0D2A 00 00 
1516   0D2C E7            pop d
1517   0D2D 5A            add d, b
1518   0D2E E4            pop a
1519   0D2F DA            push d
1520   0D30 FD 2E 00 00   mov32 cb, $00000000
1520   0D34 00 00 
1521   0D36 E7            pop d
1522   0D37 FD 3E         mov [d], bl
1523   0D39             ; prog = code_line; 
1524   0D39 3B 63 4E      mov d, _prog ; $prog
1525   0D3C DA            push d
1526   0D3D FA A1 FF      lea d, [bp + -95] ; $code_line
1527   0D40 2D            mov b, d
1528   0D41 38 00 00      mov c, 0
1529   0D44 E7            pop d
1530   0D45 FD 43         mov [d], b
1531   0D47             ; if(!has_operands){ 
1532   0D47             _if41_cond:
1533   0D47 FA 79 FF      lea d, [bp + -135] ; $has_operands
1534   0D4A 32            mov bl, [d]
1535   0D4B A7 00         mov bh, 0
1536   0D4D 38 00 00      mov c, 0
1537   0D50 C0 00 00      cmp b, 0
1538   0D53 C6 67 0E      je _if41_else
1539   0D56             _if41_TRUE:
1540   0D56             ; get(); 
1541   0D56             ; --- START FUNCTION CALL
1542   0D56 07 60 2B      call get
1543   0D59             ; strcpy(opcode, token); 
1544   0D59             ; --- START FUNCTION CALL
1545   0D59 3B 65 4E      mov d, _token_data ; $token
1546   0D5C 2D            mov b, d
1547   0D5D 38 00 00      mov c, 0
1548   0D60 FD AB         swp b
1549   0D62 D8            push b
1550   0D63 FA E1 FF      lea d, [bp + -31] ; $opcode
1551   0D66 2D            mov b, d
1552   0D67 38 00 00      mov c, 0
1553   0D6A FD AB         swp b
1554   0D6C D8            push b
1555   0D6D 07 83 4B      call strcpy
1556   0D70 51 04 00      add sp, 4
1557   0D73             ; --- END FUNCTION CALL
1558   0D73             ; get();  
1559   0D73             ; --- START FUNCTION CALL
1560   0D73 07 60 2B      call get
1561   0D76             ; if(toktype == END){ 
1562   0D76             _if42_cond:
1563   0D76 3B 61 4E      mov d, _toktype ; $toktype
1564   0D79 2A            mov b, [d]
1565   0D7A 38 00 00      mov c, 0
1566   0D7D             ; --- START RELATIONAL
1567   0D7D D7            push a
1568   0D7E 11            mov a, b
1569   0D7F FD 2E 07 00   mov32 cb, $7 ; enum element: END
1569   0D83 00 00 
1570   0D85 B0            cmp a, b
1571   0D86 FD 71         seq ; ==
1572   0D88 E4            pop a
1573   0D89             ; --- END RELATIONAL
1574   0D89 C0 00 00      cmp b, 0
1575   0D8C C6 A8 0D      je _if42_else
1576   0D8F             _if42_TRUE:
1577   0D8F             ; strcat(opcode, " ."); 
1578   0D8F             ; --- START FUNCTION CALL
1579   0D8F 26 CF 50      mov b, _s25 ; " ."
1580   0D92 FD AB         swp b
1581   0D94 D8            push b
1582   0D95 FA E1 FF      lea d, [bp + -31] ; $opcode
1583   0D98 2D            mov b, d
1584   0D99 38 00 00      mov c, 0
1585   0D9C FD AB         swp b
1586   0D9E D8            push b
1587   0D9F 07 FD 4B      call strcat
1588   0DA2 51 04 00      add sp, 4
1589   0DA5             ; --- END FUNCTION CALL
1590   0DA5 0A 17 0E      jmp _if42_exit
1591   0DA8             _if42_else:
1592   0DA8             ; strcat(opcode, " "); 
1593   0DA8             ; --- START FUNCTION CALL
1594   0DA8 26 D2 50      mov b, _s26 ; " "
1595   0DAB FD AB         swp b
1596   0DAD D8            push b
1597   0DAE FA E1 FF      lea d, [bp + -31] ; $opcode
1598   0DB1 2D            mov b, d
1599   0DB2 38 00 00      mov c, 0
1600   0DB5 FD AB         swp b
1601   0DB7 D8            push b
1602   0DB8 07 FD 4B      call strcat
1603   0DBB 51 04 00      add sp, 4
1604   0DBE             ; --- END FUNCTION CALL
1605   0DBE             ; strcat(opcode, token); 
1606   0DBE             ; --- START FUNCTION CALL
1607   0DBE 3B 65 4E      mov d, _token_data ; $token
1608   0DC1 2D            mov b, d
1609   0DC2 38 00 00      mov c, 0
1610   0DC5 FD AB         swp b
1611   0DC7 D8            push b
1612   0DC8 FA E1 FF      lea d, [bp + -31] ; $opcode
1613   0DCB 2D            mov b, d
1614   0DCC 38 00 00      mov c, 0
1615   0DCF FD AB         swp b
1616   0DD1 D8            push b
1617   0DD2 07 FD 4B      call strcat
1618   0DD5 51 04 00      add sp, 4
1619   0DD8             ; --- END FUNCTION CALL
1620   0DD8             ; for(;;){ 
1621   0DD8             _for43_init:
1622   0DD8             _for43_cond:
1623   0DD8             _for43_block:
1624   0DD8             ; get(); 
1625   0DD8             ; --- START FUNCTION CALL
1626   0DD8 07 60 2B      call get
1627   0DDB             ; if(toktype == END) break; 
1628   0DDB             _if44_cond:
1629   0DDB 3B 61 4E      mov d, _toktype ; $toktype
1630   0DDE 2A            mov b, [d]
1631   0DDF 38 00 00      mov c, 0
1632   0DE2             ; --- START RELATIONAL
1633   0DE2 D7            push a
1634   0DE3 11            mov a, b
1635   0DE4 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1635   0DE8 00 00 
1636   0DEA B0            cmp a, b
1637   0DEB FD 71         seq ; ==
1638   0DED E4            pop a
1639   0DEE             ; --- END RELATIONAL
1640   0DEE C0 00 00      cmp b, 0
1641   0DF1 C6 FA 0D      je _if44_exit
1642   0DF4             _if44_TRUE:
1643   0DF4             ; break; 
1644   0DF4 0A 17 0E      jmp _for43_exit ; for break
1645   0DF7 0A FA 0D      jmp _if44_exit
1646   0DFA             _if44_exit:
1647   0DFA             ; strcat(opcode, token); 
1648   0DFA             ; --- START FUNCTION CALL
1649   0DFA 3B 65 4E      mov d, _token_data ; $token
1650   0DFD 2D            mov b, d
1651   0DFE 38 00 00      mov c, 0
1652   0E01 FD AB         swp b
1653   0E03 D8            push b
1654   0E04 FA E1 FF      lea d, [bp + -31] ; $opcode
1655   0E07 2D            mov b, d
1656   0E08 38 00 00      mov c, 0
1657   0E0B FD AB         swp b
1658   0E0D D8            push b
1659   0E0E 07 FD 4B      call strcat
1660   0E11 51 04 00      add sp, 4
1661   0E14             ; --- END FUNCTION CALL
1662   0E14             _for43_update:
1663   0E14 0A D8 0D      jmp _for43_cond
1664   0E17             _for43_exit:
1665   0E17             _if42_exit:
1666   0E17             ; op = search_opcode(opcode); 
1667   0E17 FA 87 FF      lea d, [bp + -121] ; $op
1668   0E1A DA            push d
1669   0E1B             ; --- START FUNCTION CALL
1670   0E1B FA E1 FF      lea d, [bp + -31] ; $opcode
1671   0E1E 2D            mov b, d
1672   0E1F 38 00 00      mov c, 0
1673   0E22 FD AB         swp b
1674   0E24 D8            push b
1675   0E25 07 E2 23      call search_opcode
1676   0E28 51 02 00      add sp, 2
1677   0E2B             ; --- END FUNCTION CALL
1678   0E2B E7            pop d
1679   0E2C FD 28         mov si, b
1680   0E2E FD 50         mov di, d
1681   0E30 38 1A 00      mov c, 26
1682   0E33 FD F5         rep movsb
1683   0E35             ; if(op.opcode_type){ 
1684   0E35             _if45_cond:
1685   0E35 FA 87 FF      lea d, [bp + -121] ; $op
1686   0E38 58 19 00      add d, 25
1687   0E3B 32            mov bl, [d]
1688   0E3C A7 00         mov bh, 0
1689   0E3E 38 00 00      mov c, 0
1690   0E41 C0 00 00      cmp b, 0
1691   0E44 C6 57 0E      je _if45_exit
1692   0E47             _if45_TRUE:
1693   0E47             ; forwards(1); 
1694   0E47             ; --- START FUNCTION CALL
1695   0E47 FD 2E 01 00   mov32 cb, $00000001
1695   0E4B 00 00 
1696   0E4D DD            push bl
1697   0E4E 07 0F 27      call forwards
1698   0E51 51 01 00      add sp, 1
1699   0E54             ; --- END FUNCTION CALL
1700   0E54 0A 57 0E      jmp _if45_exit
1701   0E57             _if45_exit:
1702   0E57             ; forwards(1); 
1703   0E57             ; --- START FUNCTION CALL
1704   0E57 FD 2E 01 00   mov32 cb, $00000001
1704   0E5B 00 00 
1705   0E5D DD            push bl
1706   0E5E 07 0F 27      call forwards
1707   0E61 51 01 00      add sp, 1
1708   0E64             ; --- END FUNCTION CALL
1709   0E64 0A 6B 13      jmp _if41_exit
1710   0E67             _if41_else:
1711   0E67             ; num_operands = 0; 
1712   0E67 FA 85 FF      lea d, [bp + -123] ; $num_operands
1713   0E6A DA            push d
1714   0E6B FD 2E 00 00   mov32 cb, $00000000
1714   0E6F 00 00 
1715   0E71 E7            pop d
1716   0E72 FD 43         mov [d], b
1717   0E74             ; for(;;){ 
1718   0E74             _for46_init:
1719   0E74             _for46_cond:
1720   0E74             _for46_block:
1721   0E74             ; get(); 
1722   0E74             ; --- START FUNCTION CALL
1723   0E74 07 60 2B      call get
1724   0E77             ; if(toktype == END) break; 
1725   0E77             _if47_cond:
1726   0E77 3B 61 4E      mov d, _toktype ; $toktype
1727   0E7A 2A            mov b, [d]
1728   0E7B 38 00 00      mov c, 0
1729   0E7E             ; --- START RELATIONAL
1730   0E7E D7            push a
1731   0E7F 11            mov a, b
1732   0E80 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1732   0E84 00 00 
1733   0E86 B0            cmp a, b
1734   0E87 FD 71         seq ; ==
1735   0E89 E4            pop a
1736   0E8A             ; --- END RELATIONAL
1737   0E8A C0 00 00      cmp b, 0
1738   0E8D C6 96 0E      je _if47_exit
1739   0E90             _if47_TRUE:
1740   0E90             ; break; 
1741   0E90 0A F2 0E      jmp _for46_exit ; for break
1742   0E93 0A 96 0E      jmp _if47_exit
1743   0E96             _if47_exit:
1744   0E96             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1745   0E96             _if48_cond:
1746   0E96 3B 61 4E      mov d, _toktype ; $toktype
1747   0E99 2A            mov b, [d]
1748   0E9A 38 00 00      mov c, 0
1749   0E9D             ; --- START RELATIONAL
1750   0E9D D7            push a
1751   0E9E 11            mov a, b
1752   0E9F FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1752   0EA3 00 00 
1753   0EA5 B0            cmp a, b
1754   0EA6 FD 71         seq ; ==
1755   0EA8 E4            pop a
1756   0EA9             ; --- END RELATIONAL
1757   0EA9             ; --- START LOGICAL OR
1758   0EA9 D7            push a
1759   0EAA 11            mov a, b
1760   0EAB 3B 61 4E      mov d, _toktype ; $toktype
1761   0EAE 2A            mov b, [d]
1762   0EAF 38 00 00      mov c, 0
1763   0EB2             ; --- START RELATIONAL
1764   0EB2 D7            push a
1765   0EB3 11            mov a, b
1766   0EB4 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1766   0EB8 00 00 
1767   0EBA B0            cmp a, b
1768   0EBB FD 71         seq ; ==
1769   0EBD E4            pop a
1770   0EBE             ; --- END RELATIONAL
1771   0EBE             ; --- START LOGICAL AND
1772   0EBE D7            push a
1773   0EBF 11            mov a, b
1774   0EC0             ; --- START FUNCTION CALL
1775   0EC0 3B 65 4E      mov d, _token_data ; $token
1776   0EC3 2D            mov b, d
1777   0EC4 38 00 00      mov c, 0
1778   0EC7 FD AB         swp b
1779   0EC9 D8            push b
1780   0ECA 07 04 1F      call is_reserved
1781   0ECD 51 02 00      add sp, 2
1782   0ED0             ; --- END FUNCTION CALL
1783   0ED0 FD A7         sand a, b
1784   0ED2 E4            pop a
1785   0ED3             ; --- END LOGICAL AND
1786   0ED3 FD A8         sor a, b ; ||
1787   0ED5 E4            pop a
1788   0ED6             ; --- END LOGICAL OR
1789   0ED6 C0 00 00      cmp b, 0
1790   0ED9 C6 EF 0E      je _if48_exit
1791   0EDC             _if48_TRUE:
1792   0EDC             ; num_operands++; 
1793   0EDC FA 85 FF      lea d, [bp + -123] ; $num_operands
1794   0EDF 2A            mov b, [d]
1795   0EE0 38 00 00      mov c, 0
1796   0EE3 11            mov a, b
1797   0EE4 FD 77         inc b
1798   0EE6 FA 85 FF      lea d, [bp + -123] ; $num_operands
1799   0EE9 FD 43         mov [d], b
1800   0EEB 27            mov b, a
1801   0EEC 0A EF 0E      jmp _if48_exit
1802   0EEF             _if48_exit:
1803   0EEF             _for46_update:
1804   0EEF 0A 74 0E      jmp _for46_cond
1805   0EF2             _for46_exit:
1806   0EF2             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
1807   0EF2             _if49_cond:
1808   0EF2 FA 85 FF      lea d, [bp + -123] ; $num_operands
1809   0EF5 2A            mov b, [d]
1810   0EF6 38 00 00      mov c, 0
1811   0EF9             ; --- START RELATIONAL
1812   0EF9 D7            push a
1813   0EFA 11            mov a, b
1814   0EFB FD 2E 02 00   mov32 cb, $00000002
1814   0EFF 00 00 
1815   0F01 B0            cmp a, b
1816   0F02 FD 7F         sgt ; >
1817   0F04 E4            pop a
1818   0F05             ; --- END RELATIONAL
1819   0F05 C0 00 00      cmp b, 0
1820   0F08 C6 1A 0F      je _if49_exit
1821   0F0B             _if49_TRUE:
1822   0F0B             ; error("Maximum number of operands per instruction is 2."); 
1823   0F0B             ; --- START FUNCTION CALL
1824   0F0B 26 D4 50      mov b, _s27 ; "Maximum number of operands per instruction is 2."
1825   0F0E FD AB         swp b
1826   0F10 D8            push b
1827   0F11 07 66 39      call error
1828   0F14 51 02 00      add sp, 2
1829   0F17             ; --- END FUNCTION CALL
1830   0F17 0A 1A 0F      jmp _if49_exit
1831   0F1A             _if49_exit:
1832   0F1A             ; num_operandsexp = exp(2, num_operands); 
1833   0F1A FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
1834   0F1D DA            push d
1835   0F1E             ; --- START FUNCTION CALL
1836   0F1E FA 85 FF      lea d, [bp + -123] ; $num_operands
1837   0F21 2A            mov b, [d]
1838   0F22 38 00 00      mov c, 0
1839   0F25 FD AB         swp b
1840   0F27 D8            push b
1841   0F28 FD 2E 02 00   mov32 cb, $00000002
1841   0F2C 00 00 
1842   0F2E FD AB         swp b
1843   0F30 D8            push b
1844   0F31 07 A7 3D      call exp
1845   0F34 51 04 00      add sp, 4
1846   0F37             ; --- END FUNCTION CALL
1847   0F37 E7            pop d
1848   0F38 FD 43         mov [d], b
1849   0F3A             ; for(i = 0; i < num_operandsexp; i++){ 
1850   0F3A             _for50_init:
1851   0F3A FA 81 FF      lea d, [bp + -127] ; $i
1852   0F3D DA            push d
1853   0F3E FD 2E 00 00   mov32 cb, $00000000
1853   0F42 00 00 
1854   0F44 E7            pop d
1855   0F45 FD 43         mov [d], b
1856   0F47             _for50_cond:
1857   0F47 FA 81 FF      lea d, [bp + -127] ; $i
1858   0F4A 2A            mov b, [d]
1859   0F4B 38 00 00      mov c, 0
1860   0F4E             ; --- START RELATIONAL
1861   0F4E D7            push a
1862   0F4F 11            mov a, b
1863   0F50 FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
1864   0F53 2A            mov b, [d]
1865   0F54 38 00 00      mov c, 0
1866   0F57 B0            cmp a, b
1867   0F58 FD 73         slt ; < (signed)
1868   0F5A E4            pop a
1869   0F5B             ; --- END RELATIONAL
1870   0F5B C0 00 00      cmp b, 0
1871   0F5E C6 6B 13      je _for50_exit
1872   0F61             _for50_block:
1873   0F61             ; prog = code_line; 
1874   0F61 3B 63 4E      mov d, _prog ; $prog
1875   0F64 DA            push d
1876   0F65 FA A1 FF      lea d, [bp + -95] ; $code_line
1877   0F68 2D            mov b, d
1878   0F69 38 00 00      mov c, 0
1879   0F6C E7            pop d
1880   0F6D FD 43         mov [d], b
1881   0F6F             ; get(); 
1882   0F6F             ; --- START FUNCTION CALL
1883   0F6F 07 60 2B      call get
1884   0F72             ; strcpy(opcode, token); 
1885   0F72             ; --- START FUNCTION CALL
1886   0F72 3B 65 4E      mov d, _token_data ; $token
1887   0F75 2D            mov b, d
1888   0F76 38 00 00      mov c, 0
1889   0F79 FD AB         swp b
1890   0F7B D8            push b
1891   0F7C FA E1 FF      lea d, [bp + -31] ; $opcode
1892   0F7F 2D            mov b, d
1893   0F80 38 00 00      mov c, 0
1894   0F83 FD AB         swp b
1895   0F85 D8            push b
1896   0F86 07 83 4B      call strcpy
1897   0F89 51 04 00      add sp, 4
1898   0F8C             ; --- END FUNCTION CALL
1899   0F8C             ; strcat(opcode, " "); 
1900   0F8C             ; --- START FUNCTION CALL
1901   0F8C 26 D2 50      mov b, _s26 ; " "
1902   0F8F FD AB         swp b
1903   0F91 D8            push b
1904   0F92 FA E1 FF      lea d, [bp + -31] ; $opcode
1905   0F95 2D            mov b, d
1906   0F96 38 00 00      mov c, 0
1907   0F99 FD AB         swp b
1908   0F9B D8            push b
1909   0F9C 07 FD 4B      call strcat
1910   0F9F 51 04 00      add sp, 4
1911   0FA2             ; --- END FUNCTION CALL
1912   0FA2             ; j = 0; 
1913   0FA2 FA 7F FF      lea d, [bp + -129] ; $j
1914   0FA5 DA            push d
1915   0FA6 FD 2E 00 00   mov32 cb, $00000000
1915   0FAA 00 00 
1916   0FAC E7            pop d
1917   0FAD FD 43         mov [d], b
1918   0FAF             ; for(;;){ 
1919   0FAF             _for51_init:
1920   0FAF             _for51_cond:
1921   0FAF             _for51_block:
1922   0FAF             ; get(); 
1923   0FAF             ; --- START FUNCTION CALL
1924   0FAF 07 60 2B      call get
1925   0FB2             ; if(toktype == END) break; 
1926   0FB2             _if52_cond:
1927   0FB2 3B 61 4E      mov d, _toktype ; $toktype
1928   0FB5 2A            mov b, [d]
1929   0FB6 38 00 00      mov c, 0
1930   0FB9             ; --- START RELATIONAL
1931   0FB9 D7            push a
1932   0FBA 11            mov a, b
1933   0FBB FD 2E 07 00   mov32 cb, $7 ; enum element: END
1933   0FBF 00 00 
1934   0FC1 B0            cmp a, b
1935   0FC2 FD 71         seq ; ==
1936   0FC4 E4            pop a
1937   0FC5             ; --- END RELATIONAL
1938   0FC5 C0 00 00      cmp b, 0
1939   0FC8 C6 D1 0F      je _if52_exit
1940   0FCB             _if52_TRUE:
1941   0FCB             ; break; 
1942   0FCB 0A 4E 11      jmp _for51_exit ; for break
1943   0FCE 0A D1 0F      jmp _if52_exit
1944   0FD1             _if52_exit:
1945   0FD1             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1946   0FD1             _if53_cond:
1947   0FD1 3B 61 4E      mov d, _toktype ; $toktype
1948   0FD4 2A            mov b, [d]
1949   0FD5 38 00 00      mov c, 0
1950   0FD8             ; --- START RELATIONAL
1951   0FD8 D7            push a
1952   0FD9 11            mov a, b
1953   0FDA FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1953   0FDE 00 00 
1954   0FE0 B0            cmp a, b
1955   0FE1 FD 71         seq ; ==
1956   0FE3 E4            pop a
1957   0FE4             ; --- END RELATIONAL
1958   0FE4             ; --- START LOGICAL OR
1959   0FE4 D7            push a
1960   0FE5 11            mov a, b
1961   0FE6 3B 61 4E      mov d, _toktype ; $toktype
1962   0FE9 2A            mov b, [d]
1963   0FEA 38 00 00      mov c, 0
1964   0FED             ; --- START RELATIONAL
1965   0FED D7            push a
1966   0FEE 11            mov a, b
1967   0FEF FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1967   0FF3 00 00 
1968   0FF5 B0            cmp a, b
1969   0FF6 FD 71         seq ; ==
1970   0FF8 E4            pop a
1971   0FF9             ; --- END RELATIONAL
1972   0FF9             ; --- START LOGICAL AND
1973   0FF9 D7            push a
1974   0FFA 11            mov a, b
1975   0FFB             ; --- START FUNCTION CALL
1976   0FFB 3B 65 4E      mov d, _token_data ; $token
1977   0FFE 2D            mov b, d
1978   0FFF 38 00 00      mov c, 0
1979   1002 FD AB         swp b
1980   1004 D8            push b
1981   1005 07 04 1F      call is_reserved
1982   1008 51 02 00      add sp, 2
1983   100B             ; --- END FUNCTION CALL
1984   100B FD A7         sand a, b
1985   100D E4            pop a
1986   100E             ; --- END LOGICAL AND
1987   100E FD A8         sor a, b ; ||
1988   1010 E4            pop a
1989   1011             ; --- END LOGICAL OR
1990   1011 C0 00 00      cmp b, 0
1991   1014 C6 31 11      je _if53_else
1992   1017             _if53_TRUE:
1993   1017             ; strcat(opcode, symbols[i*2+j]); 
1994   1017             ; --- START FUNCTION CALL
1995   1017 3B C7 4F      mov d, _symbols_data ; $symbols
1996   101A D7            push a
1997   101B DA            push d
1998   101C FA 81 FF      lea d, [bp + -127] ; $i
1999   101F 2A            mov b, [d]
2000   1020 38 00 00      mov c, 0
2001   1023             ; --- START FACTORS
2002   1023 D7            push a
2003   1024 FD D8         push g
2004   1026 11            mov a, b
2005   1027 FD 7A         mov g, c
2006   1029 FD 2E 02 00   mov32 cb, $00000002
2006   102D 00 00 
2007   102F D7            push a     ; save left operand
2008   1030 8E            xor a, b   ; xor sign bits
2009   1031 FD AA         swp a      ; swap bytes
2010   1033 83            mov cl, al ; save result of xor into 'dl'
2011   1034 E4            pop a      ; restore left side operator
2012   1035 DF            push cl    ; save result of xor above
2013   1036 FD AA         swp a  
2014   1038 93 80         test al, $80  
2015   103A FD AA         swp a  
2016   103C C6 41 10      jz skip_invert_a_61  
2017   103F FD 95         neg a 
2018   1041             skip_invert_a_61:   
2019   1041 FD AB         swp b
2020   1043 FD 93 80      test bl, $80  
2021   1046 FD AB         swp b
2022   1048 C6 4D 10      jz skip_invert_b_61  
2023   104B FD 97         neg b 
2024   104D             skip_invert_b_61:   
2025   104D AC            mul a, b ; *
2026   104E FD 78         mov g, a
2027   1050 11            mov a, b
2028   1051 EA            pop bl
2029   1052 FD 93 80      test bl, $80
2030   1055 C6 62 10      jz _same_signs_61
2031   1058 2F            mov bl, al
2032   1059 95            not a
2033   105A FD 97         neg b
2034   105C 5B 00 00      adc a, 0
2035   105F FD 78         mov g, a
2036   1061 11            mov a, b
2037   1062             _same_signs_61:
2038   1062 FD 38         mov c, g
2039   1064 27            mov b, a
2040   1065 FD F1         pop g
2041   1067 E4            pop a
2042   1068             ; --- END FACTORS
2043   1068             ; --- START TERMS
2044   1068 D7            push a
2045   1069 FD D8         push g
2046   106B 11            mov a, b
2047   106C FD 7A         mov g, c
2048   106E FA 7F FF      lea d, [bp + -129] ; $j
2049   1071 2A            mov b, [d]
2050   1072 38 00 00      mov c, 0
2051   1075 FD 15         add32 cb, ga
2052   1077 FD F1         pop g
2053   1079 E4            pop a
2054   107A             ; --- END TERMS
2055   107A E7            pop d
2056   107B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2057   107F E4            pop a
2058   1080 2A            mov b, [d]
2059   1081 38 00 00      mov c, 0
2060   1084 FD AB         swp b
2061   1086 D8            push b
2062   1087 FA E1 FF      lea d, [bp + -31] ; $opcode
2063   108A 2D            mov b, d
2064   108B 38 00 00      mov c, 0
2065   108E FD AB         swp b
2066   1090 D8            push b
2067   1091 07 FD 4B      call strcat
2068   1094 51 04 00      add sp, 4
2069   1097             ; --- END FUNCTION CALL
2070   1097             ; operand_types[j] = *symbols[i*2+j]; 
2071   1097 FA 7C FF      lea d, [bp + -132] ; $operand_types
2072   109A D7            push a
2073   109B DA            push d
2074   109C FA 7F FF      lea d, [bp + -129] ; $j
2075   109F 2A            mov b, [d]
2076   10A0 38 00 00      mov c, 0
2077   10A3 E7            pop d
2078   10A4 5A            add d, b
2079   10A5 E4            pop a
2080   10A6 DA            push d
2081   10A7 3B C7 4F      mov d, _symbols_data ; $symbols
2082   10AA D7            push a
2083   10AB DA            push d
2084   10AC FA 81 FF      lea d, [bp + -127] ; $i
2085   10AF 2A            mov b, [d]
2086   10B0 38 00 00      mov c, 0
2087   10B3             ; --- START FACTORS
2088   10B3 D7            push a
2089   10B4 FD D8         push g
2090   10B6 11            mov a, b
2091   10B7 FD 7A         mov g, c
2092   10B9 FD 2E 02 00   mov32 cb, $00000002
2092   10BD 00 00 
2093   10BF D7            push a     ; save left operand
2094   10C0 8E            xor a, b   ; xor sign bits
2095   10C1 FD AA         swp a      ; swap bytes
2096   10C3 83            mov cl, al ; save result of xor into 'dl'
2097   10C4 E4            pop a      ; restore left side operator
2098   10C5 DF            push cl    ; save result of xor above
2099   10C6 FD AA         swp a  
2100   10C8 93 80         test al, $80  
2101   10CA FD AA         swp a  
2102   10CC C6 D1 10      jz skip_invert_a_65  
2103   10CF FD 95         neg a 
2104   10D1             skip_invert_a_65:   
2105   10D1 FD AB         swp b
2106   10D3 FD 93 80      test bl, $80  
2107   10D6 FD AB         swp b
2108   10D8 C6 DD 10      jz skip_invert_b_65  
2109   10DB FD 97         neg b 
2110   10DD             skip_invert_b_65:   
2111   10DD AC            mul a, b ; *
2112   10DE FD 78         mov g, a
2113   10E0 11            mov a, b
2114   10E1 EA            pop bl
2115   10E2 FD 93 80      test bl, $80
2116   10E5 C6 F2 10      jz _same_signs_65
2117   10E8 2F            mov bl, al
2118   10E9 95            not a
2119   10EA FD 97         neg b
2120   10EC 5B 00 00      adc a, 0
2121   10EF FD 78         mov g, a
2122   10F1 11            mov a, b
2123   10F2             _same_signs_65:
2124   10F2 FD 38         mov c, g
2125   10F4 27            mov b, a
2126   10F5 FD F1         pop g
2127   10F7 E4            pop a
2128   10F8             ; --- END FACTORS
2129   10F8             ; --- START TERMS
2130   10F8 D7            push a
2131   10F9 FD D8         push g
2132   10FB 11            mov a, b
2133   10FC FD 7A         mov g, c
2134   10FE FA 7F FF      lea d, [bp + -129] ; $j
2135   1101 2A            mov b, [d]
2136   1102 38 00 00      mov c, 0
2137   1105 FD 15         add32 cb, ga
2138   1107 FD F1         pop g
2139   1109 E4            pop a
2140   110A             ; --- END TERMS
2141   110A E7            pop d
2142   110B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2143   110F E4            pop a
2144   1110 2A            mov b, [d]
2145   1111 38 00 00      mov c, 0
2146   1114 74            mov d, b
2147   1115 32            mov bl, [d]
2148   1116 A7 00         mov bh, 0
2149   1118 38 00 00      mov c, 0
2150   111B E7            pop d
2151   111C FD 3E         mov [d], bl
2152   111E             ; j++; 
2153   111E FA 7F FF      lea d, [bp + -129] ; $j
2154   1121 2A            mov b, [d]
2155   1122 38 00 00      mov c, 0
2156   1125 11            mov a, b
2157   1126 FD 77         inc b
2158   1128 FA 7F FF      lea d, [bp + -129] ; $j
2159   112B FD 43         mov [d], b
2160   112D 27            mov b, a
2161   112E 0A 4B 11      jmp _if53_exit
2162   1131             _if53_else:
2163   1131             ; strcat(opcode, token); 
2164   1131             ; --- START FUNCTION CALL
2165   1131 3B 65 4E      mov d, _token_data ; $token
2166   1134 2D            mov b, d
2167   1135 38 00 00      mov c, 0
2168   1138 FD AB         swp b
2169   113A D8            push b
2170   113B FA E1 FF      lea d, [bp + -31] ; $opcode
2171   113E 2D            mov b, d
2172   113F 38 00 00      mov c, 0
2173   1142 FD AB         swp b
2174   1144 D8            push b
2175   1145 07 FD 4B      call strcat
2176   1148 51 04 00      add sp, 4
2177   114B             ; --- END FUNCTION CALL
2178   114B             _if53_exit:
2179   114B             _for51_update:
2180   114B 0A AF 0F      jmp _for51_cond
2181   114E             _for51_exit:
2182   114E             ; op = search_opcode(opcode); 
2183   114E FA 87 FF      lea d, [bp + -121] ; $op
2184   1151 DA            push d
2185   1152             ; --- START FUNCTION CALL
2186   1152 FA E1 FF      lea d, [bp + -31] ; $opcode
2187   1155 2D            mov b, d
2188   1156 38 00 00      mov c, 0
2189   1159 FD AB         swp b
2190   115B D8            push b
2191   115C 07 E2 23      call search_opcode
2192   115F 51 02 00      add sp, 2
2193   1162             ; --- END FUNCTION CALL
2194   1162 E7            pop d
2195   1163 FD 28         mov si, b
2196   1165 FD 50         mov di, d
2197   1167 38 1A 00      mov c, 26
2198   116A FD F5         rep movsb
2199   116C             ; if(op.name[0] == '\0') continue; 
2200   116C             _if66_cond:
2201   116C FA 87 FF      lea d, [bp + -121] ; $op
2202   116F 58 00 00      add d, 0
2203   1172 D7            push a
2204   1173 DA            push d
2205   1174 FD 2E 00 00   mov32 cb, $00000000
2205   1178 00 00 
2206   117A E7            pop d
2207   117B 5A            add d, b
2208   117C E4            pop a
2209   117D 32            mov bl, [d]
2210   117E A7 00         mov bh, 0
2211   1180 38 00 00      mov c, 0
2212   1183             ; --- START RELATIONAL
2213   1183 D7            push a
2214   1184 11            mov a, b
2215   1185 FD 2E 00 00   mov32 cb, $00000000
2215   1189 00 00 
2216   118B B0            cmp a, b
2217   118C FD 71         seq ; ==
2218   118E E4            pop a
2219   118F             ; --- END RELATIONAL
2220   118F C0 00 00      cmp b, 0
2221   1192 C6 9B 11      je _if66_exit
2222   1195             _if66_TRUE:
2223   1195             ; continue; 
2224   1195 0A 58 13      jmp _for50_update ; for continue
2225   1198 0A 9B 11      jmp _if66_exit
2226   119B             _if66_exit:
2227   119B             ; if(op.opcode_type){ 
2228   119B             _if67_cond:
2229   119B FA 87 FF      lea d, [bp + -121] ; $op
2230   119E 58 19 00      add d, 25
2231   11A1 32            mov bl, [d]
2232   11A2 A7 00         mov bh, 0
2233   11A4 38 00 00      mov c, 0
2234   11A7 C0 00 00      cmp b, 0
2235   11AA C6 BD 11      je _if67_exit
2236   11AD             _if67_TRUE:
2237   11AD             ; forwards(1); 
2238   11AD             ; --- START FUNCTION CALL
2239   11AD FD 2E 01 00   mov32 cb, $00000001
2239   11B1 00 00 
2240   11B3 DD            push bl
2241   11B4 07 0F 27      call forwards
2242   11B7 51 01 00      add sp, 1
2243   11BA             ; --- END FUNCTION CALL
2244   11BA 0A BD 11      jmp _if67_exit
2245   11BD             _if67_exit:
2246   11BD             ; forwards(1); 
2247   11BD             ; --- START FUNCTION CALL
2248   11BD FD 2E 01 00   mov32 cb, $00000001
2248   11C1 00 00 
2249   11C3 DD            push bl
2250   11C4 07 0F 27      call forwards
2251   11C7 51 01 00      add sp, 1
2252   11CA             ; --- END FUNCTION CALL
2253   11CA             ; prog = code_line; 
2254   11CA 3B 63 4E      mov d, _prog ; $prog
2255   11CD DA            push d
2256   11CE FA A1 FF      lea d, [bp + -95] ; $code_line
2257   11D1 2D            mov b, d
2258   11D2 38 00 00      mov c, 0
2259   11D5 E7            pop d
2260   11D6 FD 43         mov [d], b
2261   11D8             ; j = 0; 
2262   11D8 FA 7F FF      lea d, [bp + -129] ; $j
2263   11DB DA            push d
2264   11DC FD 2E 00 00   mov32 cb, $00000000
2264   11E0 00 00 
2265   11E2 E7            pop d
2266   11E3 FD 43         mov [d], b
2267   11E5             ; get(); 
2268   11E5             ; --- START FUNCTION CALL
2269   11E5 07 60 2B      call get
2270   11E8             ; for(;;){ 
2271   11E8             _for68_init:
2272   11E8             _for68_cond:
2273   11E8             _for68_block:
2274   11E8             ; get(); 
2275   11E8             ; --- START FUNCTION CALL
2276   11E8 07 60 2B      call get
2277   11EB             ; if(toktype == END) break; 
2278   11EB             _if69_cond:
2279   11EB 3B 61 4E      mov d, _toktype ; $toktype
2280   11EE 2A            mov b, [d]
2281   11EF 38 00 00      mov c, 0
2282   11F2             ; --- START RELATIONAL
2283   11F2 D7            push a
2284   11F3 11            mov a, b
2285   11F4 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2285   11F8 00 00 
2286   11FA B0            cmp a, b
2287   11FB FD 71         seq ; ==
2288   11FD E4            pop a
2289   11FE             ; --- END RELATIONAL
2290   11FE C0 00 00      cmp b, 0
2291   1201 C6 0A 12      je _if69_exit
2292   1204             _if69_TRUE:
2293   1204             ; break; 
2294   1204 0A 55 13      jmp _for68_exit ; for break
2295   1207 0A 0A 12      jmp _if69_exit
2296   120A             _if69_exit:
2297   120A             ; if(toktype == IDENTIFIER && !is_reserved(token)){ 
2298   120A             _if70_cond:
2299   120A 3B 61 4E      mov d, _toktype ; $toktype
2300   120D 2A            mov b, [d]
2301   120E 38 00 00      mov c, 0
2302   1211             ; --- START RELATIONAL
2303   1211 D7            push a
2304   1212 11            mov a, b
2305   1213 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
2305   1217 00 00 
2306   1219 B0            cmp a, b
2307   121A FD 71         seq ; ==
2308   121C E4            pop a
2309   121D             ; --- END RELATIONAL
2310   121D             ; --- START LOGICAL AND
2311   121D D7            push a
2312   121E 11            mov a, b
2313   121F             ; --- START FUNCTION CALL
2314   121F 3B 65 4E      mov d, _token_data ; $token
2315   1222 2D            mov b, d
2316   1223 38 00 00      mov c, 0
2317   1226 FD AB         swp b
2318   1228 D8            push b
2319   1229 07 04 1F      call is_reserved
2320   122C 51 02 00      add sp, 2
2321   122F             ; --- END FUNCTION CALL
2322   122F FD A7         sand a, b
2323   1231 E4            pop a
2324   1232             ; --- END LOGICAL AND
2325   1232 C0 00 00      cmp b, 0
2326   1235 C6 B8 12      je _if70_else
2327   1238             _if70_TRUE:
2328   1238             ; if(operand_types[j] == '#'){ 
2329   1238             _if71_cond:
2330   1238 FA 7C FF      lea d, [bp + -132] ; $operand_types
2331   123B D7            push a
2332   123C DA            push d
2333   123D FA 7F FF      lea d, [bp + -129] ; $j
2334   1240 2A            mov b, [d]
2335   1241 38 00 00      mov c, 0
2336   1244 E7            pop d
2337   1245 5A            add d, b
2338   1246 E4            pop a
2339   1247 32            mov bl, [d]
2340   1248 A7 00         mov bh, 0
2341   124A 38 00 00      mov c, 0
2342   124D             ; --- START RELATIONAL
2343   124D D7            push a
2344   124E 11            mov a, b
2345   124F FD 2E 23 00   mov32 cb, $00000023
2345   1253 00 00 
2346   1255 B0            cmp a, b
2347   1256 FD 71         seq ; ==
2348   1258 E4            pop a
2349   1259             ; --- END RELATIONAL
2350   1259 C0 00 00      cmp b, 0
2351   125C C6 6E 12      je _if71_else
2352   125F             _if71_TRUE:
2353   125F             ; error("8bit operand expected but 16bit label given."); 
2354   125F             ; --- START FUNCTION CALL
2355   125F 26 05 51      mov b, _s28 ; "8bit operand expected but 16bit label given."
2356   1262 FD AB         swp b
2357   1264 D8            push b
2358   1265 07 66 39      call error
2359   1268 51 02 00      add sp, 2
2360   126B             ; --- END FUNCTION CALL
2361   126B 0A A5 12      jmp _if71_exit
2362   126E             _if71_else:
2363   126E             ; if(operand_types[j] == '@'){ 
2364   126E             _if72_cond:
2365   126E FA 7C FF      lea d, [bp + -132] ; $operand_types
2366   1271 D7            push a
2367   1272 DA            push d
2368   1273 FA 7F FF      lea d, [bp + -129] ; $j
2369   1276 2A            mov b, [d]
2370   1277 38 00 00      mov c, 0
2371   127A E7            pop d
2372   127B 5A            add d, b
2373   127C E4            pop a
2374   127D 32            mov bl, [d]
2375   127E A7 00         mov bh, 0
2376   1280 38 00 00      mov c, 0
2377   1283             ; --- START RELATIONAL
2378   1283 D7            push a
2379   1284 11            mov a, b
2380   1285 FD 2E 40 00   mov32 cb, $00000040
2380   1289 00 00 
2381   128B B0            cmp a, b
2382   128C FD 71         seq ; ==
2383   128E E4            pop a
2384   128F             ; --- END RELATIONAL
2385   128F C0 00 00      cmp b, 0
2386   1292 C6 A5 12      je _if72_exit
2387   1295             _if72_TRUE:
2388   1295             ; forwards(2); 
2389   1295             ; --- START FUNCTION CALL
2390   1295 FD 2E 02 00   mov32 cb, $00000002
2390   1299 00 00 
2391   129B DD            push bl
2392   129C 07 0F 27      call forwards
2393   129F 51 01 00      add sp, 1
2394   12A2             ; --- END FUNCTION CALL
2395   12A2 0A A5 12      jmp _if72_exit
2396   12A5             _if72_exit:
2397   12A5             _if71_exit:
2398   12A5             ; j++; 
2399   12A5 FA 7F FF      lea d, [bp + -129] ; $j
2400   12A8 2A            mov b, [d]
2401   12A9 38 00 00      mov c, 0
2402   12AC 11            mov a, b
2403   12AD FD 77         inc b
2404   12AF FA 7F FF      lea d, [bp + -129] ; $j
2405   12B2 FD 43         mov [d], b
2406   12B4 27            mov b, a
2407   12B5 0A 52 13      jmp _if70_exit
2408   12B8             _if70_else:
2409   12B8             ; if(toktype == INTEGER_CONST){ 
2410   12B8             _if73_cond:
2411   12B8 3B 61 4E      mov d, _toktype ; $toktype
2412   12BB 2A            mov b, [d]
2413   12BC 38 00 00      mov c, 0
2414   12BF             ; --- START RELATIONAL
2415   12BF D7            push a
2416   12C0 11            mov a, b
2417   12C1 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2417   12C5 00 00 
2418   12C7 B0            cmp a, b
2419   12C8 FD 71         seq ; ==
2420   12CA E4            pop a
2421   12CB             ; --- END RELATIONAL
2422   12CB C0 00 00      cmp b, 0
2423   12CE C6 52 13      je _if73_exit
2424   12D1             _if73_TRUE:
2425   12D1             ; if(operand_types[j] == '#'){ 
2426   12D1             _if74_cond:
2427   12D1 FA 7C FF      lea d, [bp + -132] ; $operand_types
2428   12D4 D7            push a
2429   12D5 DA            push d
2430   12D6 FA 7F FF      lea d, [bp + -129] ; $j
2431   12D9 2A            mov b, [d]
2432   12DA 38 00 00      mov c, 0
2433   12DD E7            pop d
2434   12DE 5A            add d, b
2435   12DF E4            pop a
2436   12E0 32            mov bl, [d]
2437   12E1 A7 00         mov bh, 0
2438   12E3 38 00 00      mov c, 0
2439   12E6             ; --- START RELATIONAL
2440   12E6 D7            push a
2441   12E7 11            mov a, b
2442   12E8 FD 2E 23 00   mov32 cb, $00000023
2442   12EC 00 00 
2443   12EE B0            cmp a, b
2444   12EF FD 71         seq ; ==
2445   12F1 E4            pop a
2446   12F2             ; --- END RELATIONAL
2447   12F2 C0 00 00      cmp b, 0
2448   12F5 C6 08 13      je _if74_else
2449   12F8             _if74_TRUE:
2450   12F8             ; forwards(1); 
2451   12F8             ; --- START FUNCTION CALL
2452   12F8 FD 2E 01 00   mov32 cb, $00000001
2452   12FC 00 00 
2453   12FE DD            push bl
2454   12FF 07 0F 27      call forwards
2455   1302 51 01 00      add sp, 1
2456   1305             ; --- END FUNCTION CALL
2457   1305 0A 3F 13      jmp _if74_exit
2458   1308             _if74_else:
2459   1308             ; if(operand_types[j] == '@'){ 
2460   1308             _if75_cond:
2461   1308 FA 7C FF      lea d, [bp + -132] ; $operand_types
2462   130B D7            push a
2463   130C DA            push d
2464   130D FA 7F FF      lea d, [bp + -129] ; $j
2465   1310 2A            mov b, [d]
2466   1311 38 00 00      mov c, 0
2467   1314 E7            pop d
2468   1315 5A            add d, b
2469   1316 E4            pop a
2470   1317 32            mov bl, [d]
2471   1318 A7 00         mov bh, 0
2472   131A 38 00 00      mov c, 0
2473   131D             ; --- START RELATIONAL
2474   131D D7            push a
2475   131E 11            mov a, b
2476   131F FD 2E 40 00   mov32 cb, $00000040
2476   1323 00 00 
2477   1325 B0            cmp a, b
2478   1326 FD 71         seq ; ==
2479   1328 E4            pop a
2480   1329             ; --- END RELATIONAL
2481   1329 C0 00 00      cmp b, 0
2482   132C C6 3F 13      je _if75_exit
2483   132F             _if75_TRUE:
2484   132F             ; forwards(2); 
2485   132F             ; --- START FUNCTION CALL
2486   132F FD 2E 02 00   mov32 cb, $00000002
2486   1333 00 00 
2487   1335 DD            push bl
2488   1336 07 0F 27      call forwards
2489   1339 51 01 00      add sp, 1
2490   133C             ; --- END FUNCTION CALL
2491   133C 0A 3F 13      jmp _if75_exit
2492   133F             _if75_exit:
2493   133F             _if74_exit:
2494   133F             ; j++; 
2495   133F FA 7F FF      lea d, [bp + -129] ; $j
2496   1342 2A            mov b, [d]
2497   1343 38 00 00      mov c, 0
2498   1346 11            mov a, b
2499   1347 FD 77         inc b
2500   1349 FA 7F FF      lea d, [bp + -129] ; $j
2501   134C FD 43         mov [d], b
2502   134E 27            mov b, a
2503   134F 0A 52 13      jmp _if73_exit
2504   1352             _if73_exit:
2505   1352             _if70_exit:
2506   1352             _for68_update:
2507   1352 0A E8 11      jmp _for68_cond
2508   1355             _for68_exit:
2509   1355             ; break; 
2510   1355 0A 6B 13      jmp _for50_exit ; for break
2511   1358             _for50_update:
2512   1358 FA 81 FF      lea d, [bp + -127] ; $i
2513   135B 2A            mov b, [d]
2514   135C 38 00 00      mov c, 0
2515   135F 11            mov a, b
2516   1360 FD 77         inc b
2517   1362 FA 81 FF      lea d, [bp + -127] ; $i
2518   1365 FD 43         mov [d], b
2519   1367 27            mov b, a
2520   1368 0A 47 0F      jmp _for50_cond
2521   136B             _for50_exit:
2522   136B             _if41_exit:
2523   136B             ; pop_prog(); 
2524   136B             ; --- START FUNCTION CALL
2525   136B 07 1E 3A      call pop_prog
2526   136E F9            leave
2527   136F 09            ret
2528   1370             
2529   1370             parse_instr:
2530   1370 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2531   1373             ; char opcode[32]; 
2532   1373 52 20 00      sub sp, 32
2533   1376             ; char code_line[64]; 
2534   1376 52 40 00      sub sp, 64
2535   1379             ; struct t_opcode op; 
2536   1379 52 1A 00      sub sp, 26
2537   137C             ; int instr_len; 
2538   137C 52 02 00      sub sp, 2
2539   137F             ; int num_operands, num_operandsexp; 
2540   137F 52 02 00      sub sp, 2
2541   1382 52 02 00      sub sp, 2
2542   1385             ; int i, j; 
2543   1385 52 02 00      sub sp, 2
2544   1388 52 02 00      sub sp, 2
2545   138B             ; char operand_types[3]; // operand types and locations 
2546   138B 52 03 00      sub sp, 3
2547   138E             ; int old_pc; 
2548   138E 52 02 00      sub sp, 2
2549   1391             ; char has_operands; 
2550   1391 52 01 00      sub sp, 1
2551   1394             ; old_pc = pc; 
2552   1394 FA 78 FF      lea d, [bp + -136] ; $old_pc
2553   1397 DA            push d
2554   1398 3B 5C 4E      mov d, _pc ; $pc
2555   139B 2A            mov b, [d]
2556   139C 38 00 00      mov c, 0
2557   139F E7            pop d
2558   13A0 FD 43         mov [d], b
2559   13A2             ; get_line(); 
2560   13A2             ; --- START FUNCTION CALL
2561   13A2 07 43 2A      call get_line
2562   13A5             ; push_prog(); 
2563   13A5             ; --- START FUNCTION CALL
2564   13A5 07 C4 39      call push_prog
2565   13A8             ; strcpy(code_line, string_const); 
2566   13A8             ; --- START FUNCTION CALL
2567   13A8 3B A5 4E      mov d, _string_const_data ; $string_const
2568   13AB 2D            mov b, d
2569   13AC 38 00 00      mov c, 0
2570   13AF FD AB         swp b
2571   13B1 D8            push b
2572   13B2 FA A1 FF      lea d, [bp + -95] ; $code_line
2573   13B5 2D            mov b, d
2574   13B6 38 00 00      mov c, 0
2575   13B9 FD AB         swp b
2576   13BB D8            push b
2577   13BC 07 83 4B      call strcpy
2578   13BF 51 04 00      add sp, 4
2579   13C2             ; --- END FUNCTION CALL
2580   13C2             ; has_operands = 0; 
2581   13C2 FA 77 FF      lea d, [bp + -137] ; $has_operands
2582   13C5 DA            push d
2583   13C6 FD 2E 00 00   mov32 cb, $00000000
2583   13CA 00 00 
2584   13CC E7            pop d
2585   13CD FD 3E         mov [d], bl
2586   13CF             ; prog = code_line; 
2587   13CF 3B 63 4E      mov d, _prog ; $prog
2588   13D2 DA            push d
2589   13D3 FA A1 FF      lea d, [bp + -95] ; $code_line
2590   13D6 2D            mov b, d
2591   13D7 38 00 00      mov c, 0
2592   13DA E7            pop d
2593   13DB FD 43         mov [d], b
2594   13DD             ; get(); 
2595   13DD             ; --- START FUNCTION CALL
2596   13DD 07 60 2B      call get
2597   13E0             ; for(;;){ 
2598   13E0             _for76_init:
2599   13E0             _for76_cond:
2600   13E0             _for76_block:
2601   13E0             ; get(); 
2602   13E0             ; --- START FUNCTION CALL
2603   13E0 07 60 2B      call get
2604   13E3             ; if(toktype == END) break; 
2605   13E3             _if77_cond:
2606   13E3 3B 61 4E      mov d, _toktype ; $toktype
2607   13E6 2A            mov b, [d]
2608   13E7 38 00 00      mov c, 0
2609   13EA             ; --- START RELATIONAL
2610   13EA D7            push a
2611   13EB 11            mov a, b
2612   13EC FD 2E 07 00   mov32 cb, $7 ; enum element: END
2612   13F0 00 00 
2613   13F2 B0            cmp a, b
2614   13F3 FD 71         seq ; ==
2615   13F5 E4            pop a
2616   13F6             ; --- END RELATIONAL
2617   13F6 C0 00 00      cmp b, 0
2618   13F9 C6 02 14      je _if77_exit
2619   13FC             _if77_TRUE:
2620   13FC             ; break; 
2621   13FC 0A 52 14      jmp _for76_exit ; for break
2622   13FF 0A 02 14      jmp _if77_exit
2623   1402             _if77_exit:
2624   1402             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
2625   1402             _if78_cond:
2626   1402 3B 61 4E      mov d, _toktype ; $toktype
2627   1405 2A            mov b, [d]
2628   1406 38 00 00      mov c, 0
2629   1409             ; --- START RELATIONAL
2630   1409 D7            push a
2631   140A 11            mov a, b
2632   140B FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2632   140F 00 00 
2633   1411 B0            cmp a, b
2634   1412 FD 71         seq ; ==
2635   1414 E4            pop a
2636   1415             ; --- END RELATIONAL
2637   1415             ; --- START LOGICAL OR
2638   1415 D7            push a
2639   1416 11            mov a, b
2640   1417             ; --- START FUNCTION CALL
2641   1417 3B 65 4E      mov d, _token_data ; $token
2642   141A 2D            mov b, d
2643   141B 38 00 00      mov c, 0
2644   141E FD AB         swp b
2645   1420 D8            push b
2646   1421 07 5D 23      call label_exists
2647   1424 51 02 00      add sp, 2
2648   1427             ; --- END FUNCTION CALL
2649   1427             ; --- START RELATIONAL
2650   1427 D7            push a
2651   1428 11            mov a, b
2652   1429 FD 2E FF FF   mov32 cb, $ffffffff
2652   142D FF FF 
2653   142F B0            cmp a, b
2654   1430 FD 72         sneq ; !=
2655   1432 E4            pop a
2656   1433             ; --- END RELATIONAL
2657   1433 FD A8         sor a, b ; ||
2658   1435 E4            pop a
2659   1436             ; --- END LOGICAL OR
2660   1436 C0 00 00      cmp b, 0
2661   1439 C6 4F 14      je _if78_exit
2662   143C             _if78_TRUE:
2663   143C             ; has_operands = 1; 
2664   143C FA 77 FF      lea d, [bp + -137] ; $has_operands
2665   143F DA            push d
2666   1440 FD 2E 01 00   mov32 cb, $00000001
2666   1444 00 00 
2667   1446 E7            pop d
2668   1447 FD 3E         mov [d], bl
2669   1449             ; break; 
2670   1449 0A 52 14      jmp _for76_exit ; for break
2671   144C 0A 4F 14      jmp _if78_exit
2672   144F             _if78_exit:
2673   144F             _for76_update:
2674   144F 0A E0 13      jmp _for76_cond
2675   1452             _for76_exit:
2676   1452             ; opcode[0] = '\0'; 
2677   1452 FA E1 FF      lea d, [bp + -31] ; $opcode
2678   1455 D7            push a
2679   1456 DA            push d
2680   1457 FD 2E 00 00   mov32 cb, $00000000
2680   145B 00 00 
2681   145D E7            pop d
2682   145E 5A            add d, b
2683   145F E4            pop a
2684   1460 DA            push d
2685   1461 FD 2E 00 00   mov32 cb, $00000000
2685   1465 00 00 
2686   1467 E7            pop d
2687   1468 FD 3E         mov [d], bl
2688   146A             ; prog = code_line; 
2689   146A 3B 63 4E      mov d, _prog ; $prog
2690   146D DA            push d
2691   146E FA A1 FF      lea d, [bp + -95] ; $code_line
2692   1471 2D            mov b, d
2693   1472 38 00 00      mov c, 0
2694   1475 E7            pop d
2695   1476 FD 43         mov [d], b
2696   1478             ; if(!has_operands){ 
2697   1478             _if79_cond:
2698   1478 FA 77 FF      lea d, [bp + -137] ; $has_operands
2699   147B 32            mov bl, [d]
2700   147C A7 00         mov bh, 0
2701   147E 38 00 00      mov c, 0
2702   1481 C0 00 00      cmp b, 0
2703   1484 C6 0B 16      je _if79_else
2704   1487             _if79_TRUE:
2705   1487             ; get(); 
2706   1487             ; --- START FUNCTION CALL
2707   1487 07 60 2B      call get
2708   148A             ; strcpy(opcode, token); 
2709   148A             ; --- START FUNCTION CALL
2710   148A 3B 65 4E      mov d, _token_data ; $token
2711   148D 2D            mov b, d
2712   148E 38 00 00      mov c, 0
2713   1491 FD AB         swp b
2714   1493 D8            push b
2715   1494 FA E1 FF      lea d, [bp + -31] ; $opcode
2716   1497 2D            mov b, d
2717   1498 38 00 00      mov c, 0
2718   149B FD AB         swp b
2719   149D D8            push b
2720   149E 07 83 4B      call strcpy
2721   14A1 51 04 00      add sp, 4
2722   14A4             ; --- END FUNCTION CALL
2723   14A4             ; get();  
2724   14A4             ; --- START FUNCTION CALL
2725   14A4 07 60 2B      call get
2726   14A7             ; if(toktype == END){ 
2727   14A7             _if80_cond:
2728   14A7 3B 61 4E      mov d, _toktype ; $toktype
2729   14AA 2A            mov b, [d]
2730   14AB 38 00 00      mov c, 0
2731   14AE             ; --- START RELATIONAL
2732   14AE D7            push a
2733   14AF 11            mov a, b
2734   14B0 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2734   14B4 00 00 
2735   14B6 B0            cmp a, b
2736   14B7 FD 71         seq ; ==
2737   14B9 E4            pop a
2738   14BA             ; --- END RELATIONAL
2739   14BA C0 00 00      cmp b, 0
2740   14BD C6 D9 14      je _if80_else
2741   14C0             _if80_TRUE:
2742   14C0             ; strcat(opcode, " ."); 
2743   14C0             ; --- START FUNCTION CALL
2744   14C0 26 CF 50      mov b, _s25 ; " ."
2745   14C3 FD AB         swp b
2746   14C5 D8            push b
2747   14C6 FA E1 FF      lea d, [bp + -31] ; $opcode
2748   14C9 2D            mov b, d
2749   14CA 38 00 00      mov c, 0
2750   14CD FD AB         swp b
2751   14CF D8            push b
2752   14D0 07 FD 4B      call strcat
2753   14D3 51 04 00      add sp, 4
2754   14D6             ; --- END FUNCTION CALL
2755   14D6 0A 48 15      jmp _if80_exit
2756   14D9             _if80_else:
2757   14D9             ; strcat(opcode, " "); 
2758   14D9             ; --- START FUNCTION CALL
2759   14D9 26 D2 50      mov b, _s26 ; " "
2760   14DC FD AB         swp b
2761   14DE D8            push b
2762   14DF FA E1 FF      lea d, [bp + -31] ; $opcode
2763   14E2 2D            mov b, d
2764   14E3 38 00 00      mov c, 0
2765   14E6 FD AB         swp b
2766   14E8 D8            push b
2767   14E9 07 FD 4B      call strcat
2768   14EC 51 04 00      add sp, 4
2769   14EF             ; --- END FUNCTION CALL
2770   14EF             ; strcat(opcode, token); 
2771   14EF             ; --- START FUNCTION CALL
2772   14EF 3B 65 4E      mov d, _token_data ; $token
2773   14F2 2D            mov b, d
2774   14F3 38 00 00      mov c, 0
2775   14F6 FD AB         swp b
2776   14F8 D8            push b
2777   14F9 FA E1 FF      lea d, [bp + -31] ; $opcode
2778   14FC 2D            mov b, d
2779   14FD 38 00 00      mov c, 0
2780   1500 FD AB         swp b
2781   1502 D8            push b
2782   1503 07 FD 4B      call strcat
2783   1506 51 04 00      add sp, 4
2784   1509             ; --- END FUNCTION CALL
2785   1509             ; for(;;){ 
2786   1509             _for81_init:
2787   1509             _for81_cond:
2788   1509             _for81_block:
2789   1509             ; get(); 
2790   1509             ; --- START FUNCTION CALL
2791   1509 07 60 2B      call get
2792   150C             ; if(toktype == END) break; 
2793   150C             _if82_cond:
2794   150C 3B 61 4E      mov d, _toktype ; $toktype
2795   150F 2A            mov b, [d]
2796   1510 38 00 00      mov c, 0
2797   1513             ; --- START RELATIONAL
2798   1513 D7            push a
2799   1514 11            mov a, b
2800   1515 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2800   1519 00 00 
2801   151B B0            cmp a, b
2802   151C FD 71         seq ; ==
2803   151E E4            pop a
2804   151F             ; --- END RELATIONAL
2805   151F C0 00 00      cmp b, 0
2806   1522 C6 2B 15      je _if82_exit
2807   1525             _if82_TRUE:
2808   1525             ; break; 
2809   1525 0A 48 15      jmp _for81_exit ; for break
2810   1528 0A 2B 15      jmp _if82_exit
2811   152B             _if82_exit:
2812   152B             ; strcat(opcode, token); 
2813   152B             ; --- START FUNCTION CALL
2814   152B 3B 65 4E      mov d, _token_data ; $token
2815   152E 2D            mov b, d
2816   152F 38 00 00      mov c, 0
2817   1532 FD AB         swp b
2818   1534 D8            push b
2819   1535 FA E1 FF      lea d, [bp + -31] ; $opcode
2820   1538 2D            mov b, d
2821   1539 38 00 00      mov c, 0
2822   153C FD AB         swp b
2823   153E D8            push b
2824   153F 07 FD 4B      call strcat
2825   1542 51 04 00      add sp, 4
2826   1545             ; --- END FUNCTION CALL
2827   1545             _for81_update:
2828   1545 0A 09 15      jmp _for81_cond
2829   1548             _for81_exit:
2830   1548             _if80_exit:
2831   1548             ; op = search_opcode(opcode); 
2832   1548 FA 87 FF      lea d, [bp + -121] ; $op
2833   154B DA            push d
2834   154C             ; --- START FUNCTION CALL
2835   154C FA E1 FF      lea d, [bp + -31] ; $opcode
2836   154F 2D            mov b, d
2837   1550 38 00 00      mov c, 0
2838   1553 FD AB         swp b
2839   1555 D8            push b
2840   1556 07 E2 23      call search_opcode
2841   1559 51 02 00      add sp, 2
2842   155C             ; --- END FUNCTION CALL
2843   155C E7            pop d
2844   155D FD 28         mov si, b
2845   155F FD 50         mov di, d
2846   1561 38 1A 00      mov c, 26
2847   1564 FD F5         rep movsb
2848   1566             ; instr_len = 1; 
2849   1566 FA 85 FF      lea d, [bp + -123] ; $instr_len
2850   1569 DA            push d
2851   156A FD 2E 01 00   mov32 cb, $00000001
2851   156E 00 00 
2852   1570 E7            pop d
2853   1571 FD 43         mov [d], b
2854   1573             ; if(op.opcode_type){ 
2855   1573             _if83_cond:
2856   1573 FA 87 FF      lea d, [bp + -121] ; $op
2857   1576 58 19 00      add d, 25
2858   1579 32            mov bl, [d]
2859   157A A7 00         mov bh, 0
2860   157C 38 00 00      mov c, 0
2861   157F C0 00 00      cmp b, 0
2862   1582 C6 AF 15      je _if83_exit
2863   1585             _if83_TRUE:
2864   1585             ; instr_len++; 
2865   1585 FA 85 FF      lea d, [bp + -123] ; $instr_len
2866   1588 2A            mov b, [d]
2867   1589 38 00 00      mov c, 0
2868   158C 11            mov a, b
2869   158D FD 77         inc b
2870   158F FA 85 FF      lea d, [bp + -123] ; $instr_len
2871   1592 FD 43         mov [d], b
2872   1594 27            mov b, a
2873   1595             ; emit_byte(0xFD, emit_override); 
2874   1595             ; --- START FUNCTION CALL
2875   1595 FA 05 00      lea d, [bp + 5] ; $emit_override
2876   1598 32            mov bl, [d]
2877   1599 A7 00         mov bh, 0
2878   159B 38 00 00      mov c, 0
2879   159E DD            push bl
2880   159F FD 2E FD 00   mov32 cb, $000000fd
2880   15A3 00 00 
2881   15A5 DD            push bl
2882   15A6 07 65 27      call emit_byte
2883   15A9 51 02 00      add sp, 2
2884   15AC             ; --- END FUNCTION CALL
2885   15AC 0A AF 15      jmp _if83_exit
2886   15AF             _if83_exit:
2887   15AF             ; emit_byte(op.opcode, emit_override); 
2888   15AF             ; --- START FUNCTION CALL
2889   15AF FA 05 00      lea d, [bp + 5] ; $emit_override
2890   15B2 32            mov bl, [d]
2891   15B3 A7 00         mov bh, 0
2892   15B5 38 00 00      mov c, 0
2893   15B8 DD            push bl
2894   15B9 FA 87 FF      lea d, [bp + -121] ; $op
2895   15BC 58 18 00      add d, 24
2896   15BF 32            mov bl, [d]
2897   15C0 A7 00         mov bh, 0
2898   15C2 38 00 00      mov c, 0
2899   15C5 DD            push bl
2900   15C6 07 65 27      call emit_byte
2901   15C9 51 02 00      add sp, 2
2902   15CC             ; --- END FUNCTION CALL
2903   15CC             ; if(!emit_override){ 
2904   15CC             _if84_cond:
2905   15CC FA 05 00      lea d, [bp + 5] ; $emit_override
2906   15CF 32            mov bl, [d]
2907   15D0 A7 00         mov bh, 0
2908   15D2 38 00 00      mov c, 0
2909   15D5 C0 00 00      cmp b, 0
2910   15D8 C6 08 16      je _if84_exit
2911   15DB             _if84_TRUE:
2912   15DB             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
2913   15DB             ; --- START FUNCTION CALL
2914   15DB FA A1 FF      lea d, [bp + -95] ; $code_line
2915   15DE 2D            mov b, d
2916   15DF 38 00 00      mov c, 0
2917   15E2 FD AB         swp b
2918   15E4 D8            push b
2919   15E5 FA 85 FF      lea d, [bp + -123] ; $instr_len
2920   15E8 2A            mov b, [d]
2921   15E9 38 00 00      mov c, 0
2922   15EC FD AB         swp b
2923   15EE D8            push b
2924   15EF FA 78 FF      lea d, [bp + -136] ; $old_pc
2925   15F2 2A            mov b, [d]
2926   15F3 38 00 00      mov c, 0
2927   15F6 FD AB         swp b
2928   15F8 D8            push b
2929   15F9 26 32 51      mov b, _s29 ; "%x(%d): %s\n"
2930   15FC FD AB         swp b
2931   15FE D8            push b
2932   15FF 07 84 42      call printf
2933   1602 51 08 00      add sp, 8
2934   1605             ; --- END FUNCTION CALL
2935   1605 0A 08 16      jmp _if84_exit
2936   1608             _if84_exit:
2937   1608 0A 17 1C      jmp _if79_exit
2938   160B             _if79_else:
2939   160B             ; num_operands = 0; 
2940   160B FA 83 FF      lea d, [bp + -125] ; $num_operands
2941   160E DA            push d
2942   160F FD 2E 00 00   mov32 cb, $00000000
2942   1613 00 00 
2943   1615 E7            pop d
2944   1616 FD 43         mov [d], b
2945   1618             ; for(;;){ 
2946   1618             _for85_init:
2947   1618             _for85_cond:
2948   1618             _for85_block:
2949   1618             ; get(); 
2950   1618             ; --- START FUNCTION CALL
2951   1618 07 60 2B      call get
2952   161B             ; if(toktype == END) break; 
2953   161B             _if86_cond:
2954   161B 3B 61 4E      mov d, _toktype ; $toktype
2955   161E 2A            mov b, [d]
2956   161F 38 00 00      mov c, 0
2957   1622             ; --- START RELATIONAL
2958   1622 D7            push a
2959   1623 11            mov a, b
2960   1624 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2960   1628 00 00 
2961   162A B0            cmp a, b
2962   162B FD 71         seq ; ==
2963   162D E4            pop a
2964   162E             ; --- END RELATIONAL
2965   162E C0 00 00      cmp b, 0
2966   1631 C6 3A 16      je _if86_exit
2967   1634             _if86_TRUE:
2968   1634             ; break; 
2969   1634 0A 8A 16      jmp _for85_exit ; for break
2970   1637 0A 3A 16      jmp _if86_exit
2971   163A             _if86_exit:
2972   163A             ; if(toktype == INTEGER_CONST || label_exists(token) != -1) num_operands++; 
2973   163A             _if87_cond:
2974   163A 3B 61 4E      mov d, _toktype ; $toktype
2975   163D 2A            mov b, [d]
2976   163E 38 00 00      mov c, 0
2977   1641             ; --- START RELATIONAL
2978   1641 D7            push a
2979   1642 11            mov a, b
2980   1643 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2980   1647 00 00 
2981   1649 B0            cmp a, b
2982   164A FD 71         seq ; ==
2983   164C E4            pop a
2984   164D             ; --- END RELATIONAL
2985   164D             ; --- START LOGICAL OR
2986   164D D7            push a
2987   164E 11            mov a, b
2988   164F             ; --- START FUNCTION CALL
2989   164F 3B 65 4E      mov d, _token_data ; $token
2990   1652 2D            mov b, d
2991   1653 38 00 00      mov c, 0
2992   1656 FD AB         swp b
2993   1658 D8            push b
2994   1659 07 5D 23      call label_exists
2995   165C 51 02 00      add sp, 2
2996   165F             ; --- END FUNCTION CALL
2997   165F             ; --- START RELATIONAL
2998   165F D7            push a
2999   1660 11            mov a, b
3000   1661 FD 2E FF FF   mov32 cb, $ffffffff
3000   1665 FF FF 
3001   1667 B0            cmp a, b
3002   1668 FD 72         sneq ; !=
3003   166A E4            pop a
3004   166B             ; --- END RELATIONAL
3005   166B FD A8         sor a, b ; ||
3006   166D E4            pop a
3007   166E             ; --- END LOGICAL OR
3008   166E C0 00 00      cmp b, 0
3009   1671 C6 87 16      je _if87_exit
3010   1674             _if87_TRUE:
3011   1674             ; num_operands++; 
3012   1674 FA 83 FF      lea d, [bp + -125] ; $num_operands
3013   1677 2A            mov b, [d]
3014   1678 38 00 00      mov c, 0
3015   167B 11            mov a, b
3016   167C FD 77         inc b
3017   167E FA 83 FF      lea d, [bp + -125] ; $num_operands
3018   1681 FD 43         mov [d], b
3019   1683 27            mov b, a
3020   1684 0A 87 16      jmp _if87_exit
3021   1687             _if87_exit:
3022   1687             _for85_update:
3023   1687 0A 18 16      jmp _for85_cond
3024   168A             _for85_exit:
3025   168A             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
3026   168A             _if88_cond:
3027   168A FA 83 FF      lea d, [bp + -125] ; $num_operands
3028   168D 2A            mov b, [d]
3029   168E 38 00 00      mov c, 0
3030   1691             ; --- START RELATIONAL
3031   1691 D7            push a
3032   1692 11            mov a, b
3033   1693 FD 2E 02 00   mov32 cb, $00000002
3033   1697 00 00 
3034   1699 B0            cmp a, b
3035   169A FD 7F         sgt ; >
3036   169C E4            pop a
3037   169D             ; --- END RELATIONAL
3038   169D C0 00 00      cmp b, 0
3039   16A0 C6 B2 16      je _if88_exit
3040   16A3             _if88_TRUE:
3041   16A3             ; error("Maximum number of operands per instruction is 2."); 
3042   16A3             ; --- START FUNCTION CALL
3043   16A3 26 D4 50      mov b, _s27 ; "Maximum number of operands per instruction is 2."
3044   16A6 FD AB         swp b
3045   16A8 D8            push b
3046   16A9 07 66 39      call error
3047   16AC 51 02 00      add sp, 2
3048   16AF             ; --- END FUNCTION CALL
3049   16AF 0A B2 16      jmp _if88_exit
3050   16B2             _if88_exit:
3051   16B2             ; num_operandsexp = exp(2, num_operands); 
3052   16B2 FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
3053   16B5 DA            push d
3054   16B6             ; --- START FUNCTION CALL
3055   16B6 FA 83 FF      lea d, [bp + -125] ; $num_operands
3056   16B9 2A            mov b, [d]
3057   16BA 38 00 00      mov c, 0
3058   16BD FD AB         swp b
3059   16BF D8            push b
3060   16C0 FD 2E 02 00   mov32 cb, $00000002
3060   16C4 00 00 
3061   16C6 FD AB         swp b
3062   16C8 D8            push b
3063   16C9 07 A7 3D      call exp
3064   16CC 51 04 00      add sp, 4
3065   16CF             ; --- END FUNCTION CALL
3066   16CF E7            pop d
3067   16D0 FD 43         mov [d], b
3068   16D2             ; for(i = 0; i < num_operandsexp; i++){ 
3069   16D2             _for89_init:
3070   16D2 FA 7F FF      lea d, [bp + -129] ; $i
3071   16D5 DA            push d
3072   16D6 FD 2E 00 00   mov32 cb, $00000000
3072   16DA 00 00 
3073   16DC E7            pop d
3074   16DD FD 43         mov [d], b
3075   16DF             _for89_cond:
3076   16DF FA 7F FF      lea d, [bp + -129] ; $i
3077   16E2 2A            mov b, [d]
3078   16E3 38 00 00      mov c, 0
3079   16E6             ; --- START RELATIONAL
3080   16E6 D7            push a
3081   16E7 11            mov a, b
3082   16E8 FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
3083   16EB 2A            mov b, [d]
3084   16EC 38 00 00      mov c, 0
3085   16EF B0            cmp a, b
3086   16F0 FD 73         slt ; < (signed)
3087   16F2 E4            pop a
3088   16F3             ; --- END RELATIONAL
3089   16F3 C0 00 00      cmp b, 0
3090   16F6 C6 17 1C      je _for89_exit
3091   16F9             _for89_block:
3092   16F9             ; prog = code_line; 
3093   16F9 3B 63 4E      mov d, _prog ; $prog
3094   16FC DA            push d
3095   16FD FA A1 FF      lea d, [bp + -95] ; $code_line
3096   1700 2D            mov b, d
3097   1701 38 00 00      mov c, 0
3098   1704 E7            pop d
3099   1705 FD 43         mov [d], b
3100   1707             ; get(); 
3101   1707             ; --- START FUNCTION CALL
3102   1707 07 60 2B      call get
3103   170A             ; strcpy(opcode, token); 
3104   170A             ; --- START FUNCTION CALL
3105   170A 3B 65 4E      mov d, _token_data ; $token
3106   170D 2D            mov b, d
3107   170E 38 00 00      mov c, 0
3108   1711 FD AB         swp b
3109   1713 D8            push b
3110   1714 FA E1 FF      lea d, [bp + -31] ; $opcode
3111   1717 2D            mov b, d
3112   1718 38 00 00      mov c, 0
3113   171B FD AB         swp b
3114   171D D8            push b
3115   171E 07 83 4B      call strcpy
3116   1721 51 04 00      add sp, 4
3117   1724             ; --- END FUNCTION CALL
3118   1724             ; strcat(opcode, " "); 
3119   1724             ; --- START FUNCTION CALL
3120   1724 26 D2 50      mov b, _s26 ; " "
3121   1727 FD AB         swp b
3122   1729 D8            push b
3123   172A FA E1 FF      lea d, [bp + -31] ; $opcode
3124   172D 2D            mov b, d
3125   172E 38 00 00      mov c, 0
3126   1731 FD AB         swp b
3127   1733 D8            push b
3128   1734 07 FD 4B      call strcat
3129   1737 51 04 00      add sp, 4
3130   173A             ; --- END FUNCTION CALL
3131   173A             ; j = 0; 
3132   173A FA 7D FF      lea d, [bp + -131] ; $j
3133   173D DA            push d
3134   173E FD 2E 00 00   mov32 cb, $00000000
3134   1742 00 00 
3135   1744 E7            pop d
3136   1745 FD 43         mov [d], b
3137   1747             ; for(;;){ 
3138   1747             _for90_init:
3139   1747             _for90_cond:
3140   1747             _for90_block:
3141   1747             ; get(); 
3142   1747             ; --- START FUNCTION CALL
3143   1747 07 60 2B      call get
3144   174A             ; if(toktype == END) break; 
3145   174A             _if91_cond:
3146   174A 3B 61 4E      mov d, _toktype ; $toktype
3147   174D 2A            mov b, [d]
3148   174E 38 00 00      mov c, 0
3149   1751             ; --- START RELATIONAL
3150   1751 D7            push a
3151   1752 11            mov a, b
3152   1753 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3152   1757 00 00 
3153   1759 B0            cmp a, b
3154   175A FD 71         seq ; ==
3155   175C E4            pop a
3156   175D             ; --- END RELATIONAL
3157   175D C0 00 00      cmp b, 0
3158   1760 C6 69 17      je _if91_exit
3159   1763             _if91_TRUE:
3160   1763             ; break; 
3161   1763 0A DA 18      jmp _for90_exit ; for break
3162   1766 0A 69 17      jmp _if91_exit
3163   1769             _if91_exit:
3164   1769             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
3165   1769             _if92_cond:
3166   1769 3B 61 4E      mov d, _toktype ; $toktype
3167   176C 2A            mov b, [d]
3168   176D 38 00 00      mov c, 0
3169   1770             ; --- START RELATIONAL
3170   1770 D7            push a
3171   1771 11            mov a, b
3172   1772 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3172   1776 00 00 
3173   1778 B0            cmp a, b
3174   1779 FD 71         seq ; ==
3175   177B E4            pop a
3176   177C             ; --- END RELATIONAL
3177   177C             ; --- START LOGICAL OR
3178   177C D7            push a
3179   177D 11            mov a, b
3180   177E             ; --- START FUNCTION CALL
3181   177E 3B 65 4E      mov d, _token_data ; $token
3182   1781 2D            mov b, d
3183   1782 38 00 00      mov c, 0
3184   1785 FD AB         swp b
3185   1787 D8            push b
3186   1788 07 5D 23      call label_exists
3187   178B 51 02 00      add sp, 2
3188   178E             ; --- END FUNCTION CALL
3189   178E             ; --- START RELATIONAL
3190   178E D7            push a
3191   178F 11            mov a, b
3192   1790 FD 2E FF FF   mov32 cb, $ffffffff
3192   1794 FF FF 
3193   1796 B0            cmp a, b
3194   1797 FD 72         sneq ; !=
3195   1799 E4            pop a
3196   179A             ; --- END RELATIONAL
3197   179A FD A8         sor a, b ; ||
3198   179C E4            pop a
3199   179D             ; --- END LOGICAL OR
3200   179D C0 00 00      cmp b, 0
3201   17A0 C6 BD 18      je _if92_else
3202   17A3             _if92_TRUE:
3203   17A3             ; strcat(opcode, symbols[i*2+j]); 
3204   17A3             ; --- START FUNCTION CALL
3205   17A3 3B C7 4F      mov d, _symbols_data ; $symbols
3206   17A6 D7            push a
3207   17A7 DA            push d
3208   17A8 FA 7F FF      lea d, [bp + -129] ; $i
3209   17AB 2A            mov b, [d]
3210   17AC 38 00 00      mov c, 0
3211   17AF             ; --- START FACTORS
3212   17AF D7            push a
3213   17B0 FD D8         push g
3214   17B2 11            mov a, b
3215   17B3 FD 7A         mov g, c
3216   17B5 FD 2E 02 00   mov32 cb, $00000002
3216   17B9 00 00 
3217   17BB D7            push a     ; save left operand
3218   17BC 8E            xor a, b   ; xor sign bits
3219   17BD FD AA         swp a      ; swap bytes
3220   17BF 83            mov cl, al ; save result of xor into 'dl'
3221   17C0 E4            pop a      ; restore left side operator
3222   17C1 DF            push cl    ; save result of xor above
3223   17C2 FD AA         swp a  
3224   17C4 93 80         test al, $80  
3225   17C6 FD AA         swp a  
3226   17C8 C6 CD 17      jz skip_invert_a_100  
3227   17CB FD 95         neg a 
3228   17CD             skip_invert_a_100:   
3229   17CD FD AB         swp b
3230   17CF FD 93 80      test bl, $80  
3231   17D2 FD AB         swp b
3232   17D4 C6 D9 17      jz skip_invert_b_100  
3233   17D7 FD 97         neg b 
3234   17D9             skip_invert_b_100:   
3235   17D9 AC            mul a, b ; *
3236   17DA FD 78         mov g, a
3237   17DC 11            mov a, b
3238   17DD EA            pop bl
3239   17DE FD 93 80      test bl, $80
3240   17E1 C6 EE 17      jz _same_signs_100
3241   17E4 2F            mov bl, al
3242   17E5 95            not a
3243   17E6 FD 97         neg b
3244   17E8 5B 00 00      adc a, 0
3245   17EB FD 78         mov g, a
3246   17ED 11            mov a, b
3247   17EE             _same_signs_100:
3248   17EE FD 38         mov c, g
3249   17F0 27            mov b, a
3250   17F1 FD F1         pop g
3251   17F3 E4            pop a
3252   17F4             ; --- END FACTORS
3253   17F4             ; --- START TERMS
3254   17F4 D7            push a
3255   17F5 FD D8         push g
3256   17F7 11            mov a, b
3257   17F8 FD 7A         mov g, c
3258   17FA FA 7D FF      lea d, [bp + -131] ; $j
3259   17FD 2A            mov b, [d]
3260   17FE 38 00 00      mov c, 0
3261   1801 FD 15         add32 cb, ga
3262   1803 FD F1         pop g
3263   1805 E4            pop a
3264   1806             ; --- END TERMS
3265   1806 E7            pop d
3266   1807 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3267   180B E4            pop a
3268   180C 2A            mov b, [d]
3269   180D 38 00 00      mov c, 0
3270   1810 FD AB         swp b
3271   1812 D8            push b
3272   1813 FA E1 FF      lea d, [bp + -31] ; $opcode
3273   1816 2D            mov b, d
3274   1817 38 00 00      mov c, 0
3275   181A FD AB         swp b
3276   181C D8            push b
3277   181D 07 FD 4B      call strcat
3278   1820 51 04 00      add sp, 4
3279   1823             ; --- END FUNCTION CALL
3280   1823             ; operand_types[j] = *symbols[i*2+j]; 
3281   1823 FA 7A FF      lea d, [bp + -134] ; $operand_types
3282   1826 D7            push a
3283   1827 DA            push d
3284   1828 FA 7D FF      lea d, [bp + -131] ; $j
3285   182B 2A            mov b, [d]
3286   182C 38 00 00      mov c, 0
3287   182F E7            pop d
3288   1830 5A            add d, b
3289   1831 E4            pop a
3290   1832 DA            push d
3291   1833 3B C7 4F      mov d, _symbols_data ; $symbols
3292   1836 D7            push a
3293   1837 DA            push d
3294   1838 FA 7F FF      lea d, [bp + -129] ; $i
3295   183B 2A            mov b, [d]
3296   183C 38 00 00      mov c, 0
3297   183F             ; --- START FACTORS
3298   183F D7            push a
3299   1840 FD D8         push g
3300   1842 11            mov a, b
3301   1843 FD 7A         mov g, c
3302   1845 FD 2E 02 00   mov32 cb, $00000002
3302   1849 00 00 
3303   184B D7            push a     ; save left operand
3304   184C 8E            xor a, b   ; xor sign bits
3305   184D FD AA         swp a      ; swap bytes
3306   184F 83            mov cl, al ; save result of xor into 'dl'
3307   1850 E4            pop a      ; restore left side operator
3308   1851 DF            push cl    ; save result of xor above
3309   1852 FD AA         swp a  
3310   1854 93 80         test al, $80  
3311   1856 FD AA         swp a  
3312   1858 C6 5D 18      jz skip_invert_a_104  
3313   185B FD 95         neg a 
3314   185D             skip_invert_a_104:   
3315   185D FD AB         swp b
3316   185F FD 93 80      test bl, $80  
3317   1862 FD AB         swp b
3318   1864 C6 69 18      jz skip_invert_b_104  
3319   1867 FD 97         neg b 
3320   1869             skip_invert_b_104:   
3321   1869 AC            mul a, b ; *
3322   186A FD 78         mov g, a
3323   186C 11            mov a, b
3324   186D EA            pop bl
3325   186E FD 93 80      test bl, $80
3326   1871 C6 7E 18      jz _same_signs_104
3327   1874 2F            mov bl, al
3328   1875 95            not a
3329   1876 FD 97         neg b
3330   1878 5B 00 00      adc a, 0
3331   187B FD 78         mov g, a
3332   187D 11            mov a, b
3333   187E             _same_signs_104:
3334   187E FD 38         mov c, g
3335   1880 27            mov b, a
3336   1881 FD F1         pop g
3337   1883 E4            pop a
3338   1884             ; --- END FACTORS
3339   1884             ; --- START TERMS
3340   1884 D7            push a
3341   1885 FD D8         push g
3342   1887 11            mov a, b
3343   1888 FD 7A         mov g, c
3344   188A FA 7D FF      lea d, [bp + -131] ; $j
3345   188D 2A            mov b, [d]
3346   188E 38 00 00      mov c, 0
3347   1891 FD 15         add32 cb, ga
3348   1893 FD F1         pop g
3349   1895 E4            pop a
3350   1896             ; --- END TERMS
3351   1896 E7            pop d
3352   1897 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3353   189B E4            pop a
3354   189C 2A            mov b, [d]
3355   189D 38 00 00      mov c, 0
3356   18A0 74            mov d, b
3357   18A1 32            mov bl, [d]
3358   18A2 A7 00         mov bh, 0
3359   18A4 38 00 00      mov c, 0
3360   18A7 E7            pop d
3361   18A8 FD 3E         mov [d], bl
3362   18AA             ; j++; 
3363   18AA FA 7D FF      lea d, [bp + -131] ; $j
3364   18AD 2A            mov b, [d]
3365   18AE 38 00 00      mov c, 0
3366   18B1 11            mov a, b
3367   18B2 FD 77         inc b
3368   18B4 FA 7D FF      lea d, [bp + -131] ; $j
3369   18B7 FD 43         mov [d], b
3370   18B9 27            mov b, a
3371   18BA 0A D7 18      jmp _if92_exit
3372   18BD             _if92_else:
3373   18BD             ; strcat(opcode, token); 
3374   18BD             ; --- START FUNCTION CALL
3375   18BD 3B 65 4E      mov d, _token_data ; $token
3376   18C0 2D            mov b, d
3377   18C1 38 00 00      mov c, 0
3378   18C4 FD AB         swp b
3379   18C6 D8            push b
3380   18C7 FA E1 FF      lea d, [bp + -31] ; $opcode
3381   18CA 2D            mov b, d
3382   18CB 38 00 00      mov c, 0
3383   18CE FD AB         swp b
3384   18D0 D8            push b
3385   18D1 07 FD 4B      call strcat
3386   18D4 51 04 00      add sp, 4
3387   18D7             ; --- END FUNCTION CALL
3388   18D7             _if92_exit:
3389   18D7             _for90_update:
3390   18D7 0A 47 17      jmp _for90_cond
3391   18DA             _for90_exit:
3392   18DA             ; op = search_opcode(opcode); 
3393   18DA FA 87 FF      lea d, [bp + -121] ; $op
3394   18DD DA            push d
3395   18DE             ; --- START FUNCTION CALL
3396   18DE FA E1 FF      lea d, [bp + -31] ; $opcode
3397   18E1 2D            mov b, d
3398   18E2 38 00 00      mov c, 0
3399   18E5 FD AB         swp b
3400   18E7 D8            push b
3401   18E8 07 E2 23      call search_opcode
3402   18EB 51 02 00      add sp, 2
3403   18EE             ; --- END FUNCTION CALL
3404   18EE E7            pop d
3405   18EF FD 28         mov si, b
3406   18F1 FD 50         mov di, d
3407   18F3 38 1A 00      mov c, 26
3408   18F6 FD F5         rep movsb
3409   18F8             ; if(op.name[0] == '\0') continue; 
3410   18F8             _if105_cond:
3411   18F8 FA 87 FF      lea d, [bp + -121] ; $op
3412   18FB 58 00 00      add d, 0
3413   18FE D7            push a
3414   18FF DA            push d
3415   1900 FD 2E 00 00   mov32 cb, $00000000
3415   1904 00 00 
3416   1906 E7            pop d
3417   1907 5A            add d, b
3418   1908 E4            pop a
3419   1909 32            mov bl, [d]
3420   190A A7 00         mov bh, 0
3421   190C 38 00 00      mov c, 0
3422   190F             ; --- START RELATIONAL
3423   190F D7            push a
3424   1910 11            mov a, b
3425   1911 FD 2E 00 00   mov32 cb, $00000000
3425   1915 00 00 
3426   1917 B0            cmp a, b
3427   1918 FD 71         seq ; ==
3428   191A E4            pop a
3429   191B             ; --- END RELATIONAL
3430   191B C0 00 00      cmp b, 0
3431   191E C6 27 19      je _if105_exit
3432   1921             _if105_TRUE:
3433   1921             ; continue; 
3434   1921 0A 04 1C      jmp _for89_update ; for continue
3435   1924 0A 27 19      jmp _if105_exit
3436   1927             _if105_exit:
3437   1927             ; instr_len = 1; 
3438   1927 FA 85 FF      lea d, [bp + -123] ; $instr_len
3439   192A DA            push d
3440   192B FD 2E 01 00   mov32 cb, $00000001
3440   192F 00 00 
3441   1931 E7            pop d
3442   1932 FD 43         mov [d], b
3443   1934             ; if(op.opcode_type){ 
3444   1934             _if106_cond:
3445   1934 FA 87 FF      lea d, [bp + -121] ; $op
3446   1937 58 19 00      add d, 25
3447   193A 32            mov bl, [d]
3448   193B A7 00         mov bh, 0
3449   193D 38 00 00      mov c, 0
3450   1940 C0 00 00      cmp b, 0
3451   1943 C6 70 19      je _if106_exit
3452   1946             _if106_TRUE:
3453   1946             ; emit_byte(0xFD, emit_override); 
3454   1946             ; --- START FUNCTION CALL
3455   1946 FA 05 00      lea d, [bp + 5] ; $emit_override
3456   1949 32            mov bl, [d]
3457   194A A7 00         mov bh, 0
3458   194C 38 00 00      mov c, 0
3459   194F DD            push bl
3460   1950 FD 2E FD 00   mov32 cb, $000000fd
3460   1954 00 00 
3461   1956 DD            push bl
3462   1957 07 65 27      call emit_byte
3463   195A 51 02 00      add sp, 2
3464   195D             ; --- END FUNCTION CALL
3465   195D             ; instr_len++; 
3466   195D FA 85 FF      lea d, [bp + -123] ; $instr_len
3467   1960 2A            mov b, [d]
3468   1961 38 00 00      mov c, 0
3469   1964 11            mov a, b
3470   1965 FD 77         inc b
3471   1967 FA 85 FF      lea d, [bp + -123] ; $instr_len
3472   196A FD 43         mov [d], b
3473   196C 27            mov b, a
3474   196D 0A 70 19      jmp _if106_exit
3475   1970             _if106_exit:
3476   1970             ; emit_byte(op.opcode, emit_override); 
3477   1970             ; --- START FUNCTION CALL
3478   1970 FA 05 00      lea d, [bp + 5] ; $emit_override
3479   1973 32            mov bl, [d]
3480   1974 A7 00         mov bh, 0
3481   1976 38 00 00      mov c, 0
3482   1979 DD            push bl
3483   197A FA 87 FF      lea d, [bp + -121] ; $op
3484   197D 58 18 00      add d, 24
3485   1980 32            mov bl, [d]
3486   1981 A7 00         mov bh, 0
3487   1983 38 00 00      mov c, 0
3488   1986 DD            push bl
3489   1987 07 65 27      call emit_byte
3490   198A 51 02 00      add sp, 2
3491   198D             ; --- END FUNCTION CALL
3492   198D             ; prog = code_line; 
3493   198D 3B 63 4E      mov d, _prog ; $prog
3494   1990 DA            push d
3495   1991 FA A1 FF      lea d, [bp + -95] ; $code_line
3496   1994 2D            mov b, d
3497   1995 38 00 00      mov c, 0
3498   1998 E7            pop d
3499   1999 FD 43         mov [d], b
3500   199B             ; j = 0; 
3501   199B FA 7D FF      lea d, [bp + -131] ; $j
3502   199E DA            push d
3503   199F FD 2E 00 00   mov32 cb, $00000000
3503   19A3 00 00 
3504   19A5 E7            pop d
3505   19A6 FD 43         mov [d], b
3506   19A8             ; get(); 
3507   19A8             ; --- START FUNCTION CALL
3508   19A8 07 60 2B      call get
3509   19AB             ; for(;;){ 
3510   19AB             _for107_init:
3511   19AB             _for107_cond:
3512   19AB             _for107_block:
3513   19AB             ; get(); 
3514   19AB             ; --- START FUNCTION CALL
3515   19AB 07 60 2B      call get
3516   19AE             ; if(toktype == END) break; 
3517   19AE             _if108_cond:
3518   19AE 3B 61 4E      mov d, _toktype ; $toktype
3519   19B1 2A            mov b, [d]
3520   19B2 38 00 00      mov c, 0
3521   19B5             ; --- START RELATIONAL
3522   19B5 D7            push a
3523   19B6 11            mov a, b
3524   19B7 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3524   19BB 00 00 
3525   19BD B0            cmp a, b
3526   19BE FD 71         seq ; ==
3527   19C0 E4            pop a
3528   19C1             ; --- END RELATIONAL
3529   19C1 C0 00 00      cmp b, 0
3530   19C4 C6 CD 19      je _if108_exit
3531   19C7             _if108_TRUE:
3532   19C7             ; break; 
3533   19C7 0A C5 1B      jmp _for107_exit ; for break
3534   19CA 0A CD 19      jmp _if108_exit
3535   19CD             _if108_exit:
3536   19CD             ; if(toktype == IDENTIFIER){ 
3537   19CD             _if109_cond:
3538   19CD 3B 61 4E      mov d, _toktype ; $toktype
3539   19D0 2A            mov b, [d]
3540   19D1 38 00 00      mov c, 0
3541   19D4             ; --- START RELATIONAL
3542   19D4 D7            push a
3543   19D5 11            mov a, b
3544   19D6 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
3544   19DA 00 00 
3545   19DC B0            cmp a, b
3546   19DD FD 71         seq ; ==
3547   19DF E4            pop a
3548   19E0             ; --- END RELATIONAL
3549   19E0 C0 00 00      cmp b, 0
3550   19E3 C6 E8 1A      je _if109_else
3551   19E6             _if109_TRUE:
3552   19E6             ; if(label_exists(token) != -1){ 
3553   19E6             _if110_cond:
3554   19E6             ; --- START FUNCTION CALL
3555   19E6 3B 65 4E      mov d, _token_data ; $token
3556   19E9 2D            mov b, d
3557   19EA 38 00 00      mov c, 0
3558   19ED FD AB         swp b
3559   19EF D8            push b
3560   19F0 07 5D 23      call label_exists
3561   19F3 51 02 00      add sp, 2
3562   19F6             ; --- END FUNCTION CALL
3563   19F6             ; --- START RELATIONAL
3564   19F6 D7            push a
3565   19F7 11            mov a, b
3566   19F8 FD 2E FF FF   mov32 cb, $ffffffff
3566   19FC FF FF 
3567   19FE B0            cmp a, b
3568   19FF FD 72         sneq ; !=
3569   1A01 E4            pop a
3570   1A02             ; --- END RELATIONAL
3571   1A02 C0 00 00      cmp b, 0
3572   1A05 C6 B6 1A      je _if110_else
3573   1A08             _if110_TRUE:
3574   1A08             ; if(operand_types[j] == '#'){ 
3575   1A08             _if111_cond:
3576   1A08 FA 7A FF      lea d, [bp + -134] ; $operand_types
3577   1A0B D7            push a
3578   1A0C DA            push d
3579   1A0D FA 7D FF      lea d, [bp + -131] ; $j
3580   1A10 2A            mov b, [d]
3581   1A11 38 00 00      mov c, 0
3582   1A14 E7            pop d
3583   1A15 5A            add d, b
3584   1A16 E4            pop a
3585   1A17 32            mov bl, [d]
3586   1A18 A7 00         mov bh, 0
3587   1A1A 38 00 00      mov c, 0
3588   1A1D             ; --- START RELATIONAL
3589   1A1D D7            push a
3590   1A1E 11            mov a, b
3591   1A1F FD 2E 23 00   mov32 cb, $00000023
3591   1A23 00 00 
3592   1A25 B0            cmp a, b
3593   1A26 FD 71         seq ; ==
3594   1A28 E4            pop a
3595   1A29             ; --- END RELATIONAL
3596   1A29 C0 00 00      cmp b, 0
3597   1A2C C6 3E 1A      je _if111_else
3598   1A2F             _if111_TRUE:
3599   1A2F             ; error("8bit operand expected but 16bit label given."); 
3600   1A2F             ; --- START FUNCTION CALL
3601   1A2F 26 05 51      mov b, _s28 ; "8bit operand expected but 16bit label given."
3602   1A32 FD AB         swp b
3603   1A34 D8            push b
3604   1A35 07 66 39      call error
3605   1A38 51 02 00      add sp, 2
3606   1A3B             ; --- END FUNCTION CALL
3607   1A3B 0A A3 1A      jmp _if111_exit
3608   1A3E             _if111_else:
3609   1A3E             ; if(operand_types[j] == '@'){ 
3610   1A3E             _if112_cond:
3611   1A3E FA 7A FF      lea d, [bp + -134] ; $operand_types
3612   1A41 D7            push a
3613   1A42 DA            push d
3614   1A43 FA 7D FF      lea d, [bp + -131] ; $j
3615   1A46 2A            mov b, [d]
3616   1A47 38 00 00      mov c, 0
3617   1A4A E7            pop d
3618   1A4B 5A            add d, b
3619   1A4C E4            pop a
3620   1A4D 32            mov bl, [d]
3621   1A4E A7 00         mov bh, 0
3622   1A50 38 00 00      mov c, 0
3623   1A53             ; --- START RELATIONAL
3624   1A53 D7            push a
3625   1A54 11            mov a, b
3626   1A55 FD 2E 40 00   mov32 cb, $00000040
3626   1A59 00 00 
3627   1A5B B0            cmp a, b
3628   1A5C FD 71         seq ; ==
3629   1A5E E4            pop a
3630   1A5F             ; --- END RELATIONAL
3631   1A5F C0 00 00      cmp b, 0
3632   1A62 C6 A3 1A      je _if112_exit
3633   1A65             _if112_TRUE:
3634   1A65             ; emit_word(get_label_addr(token), emit_override); 
3635   1A65             ; --- START FUNCTION CALL
3636   1A65 FA 05 00      lea d, [bp + 5] ; $emit_override
3637   1A68 32            mov bl, [d]
3638   1A69 A7 00         mov bh, 0
3639   1A6B 38 00 00      mov c, 0
3640   1A6E DD            push bl
3641   1A6F             ; --- START FUNCTION CALL
3642   1A6F 3B 65 4E      mov d, _token_data ; $token
3643   1A72 2D            mov b, d
3644   1A73 38 00 00      mov c, 0
3645   1A76 FD AB         swp b
3646   1A78 D8            push b
3647   1A79 07 B6 22      call get_label_addr
3648   1A7C 51 02 00      add sp, 2
3649   1A7F             ; --- END FUNCTION CALL
3650   1A7F FD AB         swp b
3651   1A81 D8            push b
3652   1A82 07 9D 27      call emit_word
3653   1A85 51 03 00      add sp, 3
3654   1A88             ; --- END FUNCTION CALL
3655   1A88             ; instr_len = instr_len + 2; 
3656   1A88 FA 85 FF      lea d, [bp + -123] ; $instr_len
3657   1A8B DA            push d
3658   1A8C FA 85 FF      lea d, [bp + -123] ; $instr_len
3659   1A8F 2A            mov b, [d]
3660   1A90 38 00 00      mov c, 0
3661   1A93             ; --- START TERMS
3662   1A93 D7            push a
3663   1A94 11            mov a, b
3664   1A95 FD 2E 02 00   mov32 cb, $00000002
3664   1A99 00 00 
3665   1A9B 56            add b, a
3666   1A9C E4            pop a
3667   1A9D             ; --- END TERMS
3668   1A9D E7            pop d
3669   1A9E FD 43         mov [d], b
3670   1AA0 0A A3 1A      jmp _if112_exit
3671   1AA3             _if112_exit:
3672   1AA3             _if111_exit:
3673   1AA3             ; j++; 
3674   1AA3 FA 7D FF      lea d, [bp + -131] ; $j
3675   1AA6 2A            mov b, [d]
3676   1AA7 38 00 00      mov c, 0
3677   1AAA 11            mov a, b
3678   1AAB FD 77         inc b
3679   1AAD FA 7D FF      lea d, [bp + -131] ; $j
3680   1AB0 FD 43         mov [d], b
3681   1AB2 27            mov b, a
3682   1AB3 0A E5 1A      jmp _if110_exit
3683   1AB6             _if110_else:
3684   1AB6             ; if(!is_reserved(token)){ 
3685   1AB6             _if113_cond:
3686   1AB6             ; --- START FUNCTION CALL
3687   1AB6 3B 65 4E      mov d, _token_data ; $token
3688   1AB9 2D            mov b, d
3689   1ABA 38 00 00      mov c, 0
3690   1ABD FD AB         swp b
3691   1ABF D8            push b
3692   1AC0 07 04 1F      call is_reserved
3693   1AC3 51 02 00      add sp, 2
3694   1AC6             ; --- END FUNCTION CALL
3695   1AC6 C0 00 00      cmp b, 0
3696   1AC9 C6 E5 1A      je _if113_exit
3697   1ACC             _if113_TRUE:
3698   1ACC             ; error_s("Undeclared label: ", token); 
3699   1ACC             ; --- START FUNCTION CALL
3700   1ACC 3B 65 4E      mov d, _token_data ; $token
3701   1ACF 2D            mov b, d
3702   1AD0 38 00 00      mov c, 0
3703   1AD3 FD AB         swp b
3704   1AD5 D8            push b
3705   1AD6 26 3E 51      mov b, _s30 ; "Undeclared label: "
3706   1AD9 FD AB         swp b
3707   1ADB D8            push b
3708   1ADC 07 90 39      call error_s
3709   1ADF 51 04 00      add sp, 4
3710   1AE2             ; --- END FUNCTION CALL
3711   1AE2 0A E5 1A      jmp _if113_exit
3712   1AE5             _if113_exit:
3713   1AE5             _if110_exit:
3714   1AE5 0A C2 1B      jmp _if109_exit
3715   1AE8             _if109_else:
3716   1AE8             ; if(toktype == INTEGER_CONST){ 
3717   1AE8             _if114_cond:
3718   1AE8 3B 61 4E      mov d, _toktype ; $toktype
3719   1AEB 2A            mov b, [d]
3720   1AEC 38 00 00      mov c, 0
3721   1AEF             ; --- START RELATIONAL
3722   1AEF D7            push a
3723   1AF0 11            mov a, b
3724   1AF1 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3724   1AF5 00 00 
3725   1AF7 B0            cmp a, b
3726   1AF8 FD 71         seq ; ==
3727   1AFA E4            pop a
3728   1AFB             ; --- END RELATIONAL
3729   1AFB C0 00 00      cmp b, 0
3730   1AFE C6 C2 1B      je _if114_exit
3731   1B01             _if114_TRUE:
3732   1B01             ; if(operand_types[j] == '#'){ 
3733   1B01             _if115_cond:
3734   1B01 FA 7A FF      lea d, [bp + -134] ; $operand_types
3735   1B04 D7            push a
3736   1B05 DA            push d
3737   1B06 FA 7D FF      lea d, [bp + -131] ; $j
3738   1B09 2A            mov b, [d]
3739   1B0A 38 00 00      mov c, 0
3740   1B0D E7            pop d
3741   1B0E 5A            add d, b
3742   1B0F E4            pop a
3743   1B10 32            mov bl, [d]
3744   1B11 A7 00         mov bh, 0
3745   1B13 38 00 00      mov c, 0
3746   1B16             ; --- START RELATIONAL
3747   1B16 D7            push a
3748   1B17 11            mov a, b
3749   1B18 FD 2E 23 00   mov32 cb, $00000023
3749   1B1C 00 00 
3750   1B1E B0            cmp a, b
3751   1B1F FD 71         seq ; ==
3752   1B21 E4            pop a
3753   1B22             ; --- END RELATIONAL
3754   1B22 C0 00 00      cmp b, 0
3755   1B25 C6 53 1B      je _if115_else
3756   1B28             _if115_TRUE:
3757   1B28             ; emit_byte(int_const, emit_override); 
3758   1B28             ; --- START FUNCTION CALL
3759   1B28 FA 05 00      lea d, [bp + 5] ; $emit_override
3760   1B2B 32            mov bl, [d]
3761   1B2C A7 00         mov bh, 0
3762   1B2E 38 00 00      mov c, 0
3763   1B31 DD            push bl
3764   1B32 3B A5 4F      mov d, _int_const ; $int_const
3765   1B35 2A            mov b, [d]
3766   1B36 38 00 00      mov c, 0
3767   1B39 DD            push bl
3768   1B3A 07 65 27      call emit_byte
3769   1B3D 51 02 00      add sp, 2
3770   1B40             ; --- END FUNCTION CALL
3771   1B40             ; instr_len++; 
3772   1B40 FA 85 FF      lea d, [bp + -123] ; $instr_len
3773   1B43 2A            mov b, [d]
3774   1B44 38 00 00      mov c, 0
3775   1B47 11            mov a, b
3776   1B48 FD 77         inc b
3777   1B4A FA 85 FF      lea d, [bp + -123] ; $instr_len
3778   1B4D FD 43         mov [d], b
3779   1B4F 27            mov b, a
3780   1B50 0A AF 1B      jmp _if115_exit
3781   1B53             _if115_else:
3782   1B53             ; if(operand_types[j] == '@'){ 
3783   1B53             _if116_cond:
3784   1B53 FA 7A FF      lea d, [bp + -134] ; $operand_types
3785   1B56 D7            push a
3786   1B57 DA            push d
3787   1B58 FA 7D FF      lea d, [bp + -131] ; $j
3788   1B5B 2A            mov b, [d]
3789   1B5C 38 00 00      mov c, 0
3790   1B5F E7            pop d
3791   1B60 5A            add d, b
3792   1B61 E4            pop a
3793   1B62 32            mov bl, [d]
3794   1B63 A7 00         mov bh, 0
3795   1B65 38 00 00      mov c, 0
3796   1B68             ; --- START RELATIONAL
3797   1B68 D7            push a
3798   1B69 11            mov a, b
3799   1B6A FD 2E 40 00   mov32 cb, $00000040
3799   1B6E 00 00 
3800   1B70 B0            cmp a, b
3801   1B71 FD 71         seq ; ==
3802   1B73 E4            pop a
3803   1B74             ; --- END RELATIONAL
3804   1B74 C0 00 00      cmp b, 0
3805   1B77 C6 AF 1B      je _if116_exit
3806   1B7A             _if116_TRUE:
3807   1B7A             ; emit_word(int_const, emit_override); 
3808   1B7A             ; --- START FUNCTION CALL
3809   1B7A FA 05 00      lea d, [bp + 5] ; $emit_override
3810   1B7D 32            mov bl, [d]
3811   1B7E A7 00         mov bh, 0
3812   1B80 38 00 00      mov c, 0
3813   1B83 DD            push bl
3814   1B84 3B A5 4F      mov d, _int_const ; $int_const
3815   1B87 2A            mov b, [d]
3816   1B88 38 00 00      mov c, 0
3817   1B8B FD AB         swp b
3818   1B8D D8            push b
3819   1B8E 07 9D 27      call emit_word
3820   1B91 51 03 00      add sp, 3
3821   1B94             ; --- END FUNCTION CALL
3822   1B94             ; instr_len = instr_len + 2; 
3823   1B94 FA 85 FF      lea d, [bp + -123] ; $instr_len
3824   1B97 DA            push d
3825   1B98 FA 85 FF      lea d, [bp + -123] ; $instr_len
3826   1B9B 2A            mov b, [d]
3827   1B9C 38 00 00      mov c, 0
3828   1B9F             ; --- START TERMS
3829   1B9F D7            push a
3830   1BA0 11            mov a, b
3831   1BA1 FD 2E 02 00   mov32 cb, $00000002
3831   1BA5 00 00 
3832   1BA7 56            add b, a
3833   1BA8 E4            pop a
3834   1BA9             ; --- END TERMS
3835   1BA9 E7            pop d
3836   1BAA FD 43         mov [d], b
3837   1BAC 0A AF 1B      jmp _if116_exit
3838   1BAF             _if116_exit:
3839   1BAF             _if115_exit:
3840   1BAF             ; j++; 
3841   1BAF FA 7D FF      lea d, [bp + -131] ; $j
3842   1BB2 2A            mov b, [d]
3843   1BB3 38 00 00      mov c, 0
3844   1BB6 11            mov a, b
3845   1BB7 FD 77         inc b
3846   1BB9 FA 7D FF      lea d, [bp + -131] ; $j
3847   1BBC FD 43         mov [d], b
3848   1BBE 27            mov b, a
3849   1BBF 0A C2 1B      jmp _if114_exit
3850   1BC2             _if114_exit:
3851   1BC2             _if109_exit:
3852   1BC2             _for107_update:
3853   1BC2 0A AB 19      jmp _for107_cond
3854   1BC5             _for107_exit:
3855   1BC5             ; if(!emit_override){ 
3856   1BC5             _if117_cond:
3857   1BC5 FA 05 00      lea d, [bp + 5] ; $emit_override
3858   1BC8 32            mov bl, [d]
3859   1BC9 A7 00         mov bh, 0
3860   1BCB 38 00 00      mov c, 0
3861   1BCE C0 00 00      cmp b, 0
3862   1BD1 C6 01 1C      je _if117_exit
3863   1BD4             _if117_TRUE:
3864   1BD4             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
3865   1BD4             ; --- START FUNCTION CALL
3866   1BD4 FA A1 FF      lea d, [bp + -95] ; $code_line
3867   1BD7 2D            mov b, d
3868   1BD8 38 00 00      mov c, 0
3869   1BDB FD AB         swp b
3870   1BDD D8            push b
3871   1BDE FA 85 FF      lea d, [bp + -123] ; $instr_len
3872   1BE1 2A            mov b, [d]
3873   1BE2 38 00 00      mov c, 0
3874   1BE5 FD AB         swp b
3875   1BE7 D8            push b
3876   1BE8 FA 78 FF      lea d, [bp + -136] ; $old_pc
3877   1BEB 2A            mov b, [d]
3878   1BEC 38 00 00      mov c, 0
3879   1BEF FD AB         swp b
3880   1BF1 D8            push b
3881   1BF2 26 32 51      mov b, _s29 ; "%x(%d): %s\n"
3882   1BF5 FD AB         swp b
3883   1BF7 D8            push b
3884   1BF8 07 84 42      call printf
3885   1BFB 51 08 00      add sp, 8
3886   1BFE             ; --- END FUNCTION CALL
3887   1BFE 0A 01 1C      jmp _if117_exit
3888   1C01             _if117_exit:
3889   1C01             ; break; 
3890   1C01 0A 17 1C      jmp _for89_exit ; for break
3891   1C04             _for89_update:
3892   1C04 FA 7F FF      lea d, [bp + -129] ; $i
3893   1C07 2A            mov b, [d]
3894   1C08 38 00 00      mov c, 0
3895   1C0B 11            mov a, b
3896   1C0C FD 77         inc b
3897   1C0E FA 7F FF      lea d, [bp + -129] ; $i
3898   1C11 FD 43         mov [d], b
3899   1C13 27            mov b, a
3900   1C14 0A DF 16      jmp _for89_cond
3901   1C17             _for89_exit:
3902   1C17             _if79_exit:
3903   1C17             ; pop_prog(); 
3904   1C17             ; --- START FUNCTION CALL
3905   1C17 07 1E 3A      call pop_prog
3906   1C1A F9            leave
3907   1C1B 09            ret
3908   1C1C             
3909   1C1C             parse_text:
3910   1C1C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3911   1C1F             ; char *temp_prog; 
3912   1C1F 52 02 00      sub sp, 2
3913   1C22             ; print("Parsing TEXT section...\n"); 
3914   1C22             ; --- START FUNCTION CALL
3915   1C22 26 51 51      mov b, _s31 ; "Parsing TEXT section...\n"
3916   1C25 FD AB         swp b
3917   1C27 D8            push b
3918   1C28 07 54 3E      call print
3919   1C2B 51 02 00      add sp, 2
3920   1C2E             ; --- END FUNCTION CALL
3921   1C2E             ; prog = program; 
3922   1C2E 3B 63 4E      mov d, _prog ; $prog
3923   1C31 DA            push d
3924   1C32 3B A7 4F      mov d, _program ; $program
3925   1C35 2A            mov b, [d]
3926   1C36 38 00 00      mov c, 0
3927   1C39 E7            pop d
3928   1C3A FD 43         mov [d], b
3929   1C3C             ; bin_p = bin_out + _org; 
3930   1C3C 3B AB 4F      mov d, _bin_p ; $bin_p
3931   1C3F DA            push d
3932   1C40 3B A9 4F      mov d, _bin_out ; $bin_out
3933   1C43 2A            mov b, [d]
3934   1C44 38 00 00      mov c, 0
3935   1C47             ; --- START TERMS
3936   1C47 D7            push a
3937   1C48 11            mov a, b
3938   1C49 3B 5A 4E      mov d, __org ; $_org
3939   1C4C 2A            mov b, [d]
3940   1C4D 38 00 00      mov c, 0
3941   1C50 56            add b, a
3942   1C51 E4            pop a
3943   1C52             ; --- END TERMS
3944   1C52 E7            pop d
3945   1C53 FD 43         mov [d], b
3946   1C55             ; pc = _org; 
3947   1C55 3B 5C 4E      mov d, _pc ; $pc
3948   1C58 DA            push d
3949   1C59 3B 5A 4E      mov d, __org ; $_org
3950   1C5C 2A            mov b, [d]
3951   1C5D 38 00 00      mov c, 0
3952   1C60 E7            pop d
3953   1C61 FD 43         mov [d], b
3954   1C63             ; for(;;){ 
3955   1C63             _for118_init:
3956   1C63             _for118_cond:
3957   1C63             _for118_block:
3958   1C63             ; get(); 
3959   1C63             ; --- START FUNCTION CALL
3960   1C63 07 60 2B      call get
3961   1C66             ; if(toktype == END) error("TEXT section not found."); 
3962   1C66             _if119_cond:
3963   1C66 3B 61 4E      mov d, _toktype ; $toktype
3964   1C69 2A            mov b, [d]
3965   1C6A 38 00 00      mov c, 0
3966   1C6D             ; --- START RELATIONAL
3967   1C6D D7            push a
3968   1C6E 11            mov a, b
3969   1C6F FD 2E 07 00   mov32 cb, $7 ; enum element: END
3969   1C73 00 00 
3970   1C75 B0            cmp a, b
3971   1C76 FD 71         seq ; ==
3972   1C78 E4            pop a
3973   1C79             ; --- END RELATIONAL
3974   1C79 C0 00 00      cmp b, 0
3975   1C7C C6 8E 1C      je _if119_exit
3976   1C7F             _if119_TRUE:
3977   1C7F             ; error("TEXT section not found."); 
3978   1C7F             ; --- START FUNCTION CALL
3979   1C7F 26 6A 51      mov b, _s32 ; "TEXT section not found."
3980   1C82 FD AB         swp b
3981   1C84 D8            push b
3982   1C85 07 66 39      call error
3983   1C88 51 02 00      add sp, 2
3984   1C8B             ; --- END FUNCTION CALL
3985   1C8B 0A 8E 1C      jmp _if119_exit
3986   1C8E             _if119_exit:
3987   1C8E             ; if(tok == TEXT){ 
3988   1C8E             _if120_cond:
3989   1C8E 3B 5F 4E      mov d, _tok ; $tok
3990   1C91 2A            mov b, [d]
3991   1C92 38 00 00      mov c, 0
3992   1C95             ; --- START RELATIONAL
3993   1C95 D7            push a
3994   1C96 11            mov a, b
3995   1C97 FD 2E 04 00   mov32 cb, $4 ; enum element: TEXT
3995   1C9B 00 00 
3996   1C9D B0            cmp a, b
3997   1C9E FD 71         seq ; ==
3998   1CA0 E4            pop a
3999   1CA1             ; --- END RELATIONAL
4000   1CA1 C0 00 00      cmp b, 0
4001   1CA4 C6 AD 1C      je _if120_exit
4002   1CA7             _if120_TRUE:
4003   1CA7             ; break; 
4004   1CA7 0A B0 1C      jmp _for118_exit ; for break
4005   1CAA 0A AD 1C      jmp _if120_exit
4006   1CAD             _if120_exit:
4007   1CAD             _for118_update:
4008   1CAD 0A 63 1C      jmp _for118_cond
4009   1CB0             _for118_exit:
4010   1CB0             ; for(;;){ 
4011   1CB0             _for121_init:
4012   1CB0             _for121_cond:
4013   1CB0             _for121_block:
4014   1CB0             ; get(); back(); 
4015   1CB0             ; --- START FUNCTION CALL
4016   1CB0 07 60 2B      call get
4017   1CB3             ; back(); 
4018   1CB3             ; --- START FUNCTION CALL
4019   1CB3 07 D3 27      call back
4020   1CB6             ; temp_prog = prog; 
4021   1CB6 FA FF FF      lea d, [bp + -1] ; $temp_prog
4022   1CB9 DA            push d
4023   1CBA 3B 63 4E      mov d, _prog ; $prog
4024   1CBD 2A            mov b, [d]
4025   1CBE 38 00 00      mov c, 0
4026   1CC1 E7            pop d
4027   1CC2 FD 43         mov [d], b
4028   1CC4             ; get(); 
4029   1CC4             ; --- START FUNCTION CALL
4030   1CC4 07 60 2B      call get
4031   1CC7             ; if(toktype == END) error("TEXT section end not found."); 
4032   1CC7             _if122_cond:
4033   1CC7 3B 61 4E      mov d, _toktype ; $toktype
4034   1CCA 2A            mov b, [d]
4035   1CCB 38 00 00      mov c, 0
4036   1CCE             ; --- START RELATIONAL
4037   1CCE D7            push a
4038   1CCF 11            mov a, b
4039   1CD0 FD 2E 07 00   mov32 cb, $7 ; enum element: END
4039   1CD4 00 00 
4040   1CD6 B0            cmp a, b
4041   1CD7 FD 71         seq ; ==
4042   1CD9 E4            pop a
4043   1CDA             ; --- END RELATIONAL
4044   1CDA C0 00 00      cmp b, 0
4045   1CDD C6 EF 1C      je _if122_exit
4046   1CE0             _if122_TRUE:
4047   1CE0             ; error("TEXT section end not found."); 
4048   1CE0             ; --- START FUNCTION CALL
4049   1CE0 26 82 51      mov b, _s33 ; "TEXT section end not found."
4050   1CE3 FD AB         swp b
4051   1CE5 D8            push b
4052   1CE6 07 66 39      call error
4053   1CE9 51 02 00      add sp, 2
4054   1CEC             ; --- END FUNCTION CALL
4055   1CEC 0A EF 1C      jmp _if122_exit
4056   1CEF             _if122_exit:
4057   1CEF             ; if(tok == DOT){ 
4058   1CEF             _if123_cond:
4059   1CEF 3B 5F 4E      mov d, _tok ; $tok
4060   1CF2 2A            mov b, [d]
4061   1CF3 38 00 00      mov c, 0
4062   1CF6             ; --- START RELATIONAL
4063   1CF6 D7            push a
4064   1CF7 11            mov a, b
4065   1CF8 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
4065   1CFC 00 00 
4066   1CFE B0            cmp a, b
4067   1CFF FD 71         seq ; ==
4068   1D01 E4            pop a
4069   1D02             ; --- END RELATIONAL
4070   1D02 C0 00 00      cmp b, 0
4071   1D05 C6 39 1D      je _if123_else
4072   1D08             _if123_TRUE:
4073   1D08             ; get(); 
4074   1D08             ; --- START FUNCTION CALL
4075   1D08 07 60 2B      call get
4076   1D0B             ; if(tok == SEGMENT_END) break; 
4077   1D0B             _if124_cond:
4078   1D0B 3B 5F 4E      mov d, _tok ; $tok
4079   1D0E 2A            mov b, [d]
4080   1D0F 38 00 00      mov c, 0
4081   1D12             ; --- START RELATIONAL
4082   1D12 D7            push a
4083   1D13 11            mov a, b
4084   1D14 FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
4084   1D18 00 00 
4085   1D1A B0            cmp a, b
4086   1D1B FD 71         seq ; ==
4087   1D1D E4            pop a
4088   1D1E             ; --- END RELATIONAL
4089   1D1E C0 00 00      cmp b, 0
4090   1D21 C6 2A 1D      je _if124_else
4091   1D24             _if124_TRUE:
4092   1D24             ; break; 
4093   1D24 0A 92 1D      jmp _for121_exit ; for break
4094   1D27 0A 36 1D      jmp _if124_exit
4095   1D2A             _if124_else:
4096   1D2A             ; error("Unexpected directive."); 
4097   1D2A             ; --- START FUNCTION CALL
4098   1D2A 26 9E 51      mov b, _s34 ; "Unexpected directive."
4099   1D2D FD AB         swp b
4100   1D2F D8            push b
4101   1D30 07 66 39      call error
4102   1D33 51 02 00      add sp, 2
4103   1D36             ; --- END FUNCTION CALL
4104   1D36             _if124_exit:
4105   1D36 0A 8F 1D      jmp _if123_exit
4106   1D39             _if123_else:
4107   1D39             ; if(toktype == IDENTIFIER){ 
4108   1D39             _if125_cond:
4109   1D39 3B 61 4E      mov d, _toktype ; $toktype
4110   1D3C 2A            mov b, [d]
4111   1D3D 38 00 00      mov c, 0
4112   1D40             ; --- START RELATIONAL
4113   1D40 D7            push a
4114   1D41 11            mov a, b
4115   1D42 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
4115   1D46 00 00 
4116   1D48 B0            cmp a, b
4117   1D49 FD 71         seq ; ==
4118   1D4B E4            pop a
4119   1D4C             ; --- END RELATIONAL
4120   1D4C C0 00 00      cmp b, 0
4121   1D4F C6 8F 1D      je _if125_exit
4122   1D52             _if125_TRUE:
4123   1D52             ; get(); 
4124   1D52             ; --- START FUNCTION CALL
4125   1D52 07 60 2B      call get
4126   1D55             ; if(tok != COLON){ 
4127   1D55             _if126_cond:
4128   1D55 3B 5F 4E      mov d, _tok ; $tok
4129   1D58 2A            mov b, [d]
4130   1D59 38 00 00      mov c, 0
4131   1D5C             ; --- START RELATIONAL
4132   1D5C D7            push a
4133   1D5D 11            mov a, b
4134   1D5E FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
4134   1D62 00 00 
4135   1D64 B0            cmp a, b
4136   1D65 FD 72         sneq ; !=
4137   1D67 E4            pop a
4138   1D68             ; --- END RELATIONAL
4139   1D68 C0 00 00      cmp b, 0
4140   1D6B C6 8C 1D      je _if126_exit
4141   1D6E             _if126_TRUE:
4142   1D6E             ; prog = temp_prog; 
4143   1D6E 3B 63 4E      mov d, _prog ; $prog
4144   1D71 DA            push d
4145   1D72 FA FF FF      lea d, [bp + -1] ; $temp_prog
4146   1D75 2A            mov b, [d]
4147   1D76 38 00 00      mov c, 0
4148   1D79 E7            pop d
4149   1D7A FD 43         mov [d], b
4150   1D7C             ; parse_instr(0); 
4151   1D7C             ; --- START FUNCTION CALL
4152   1D7C FD 2E 00 00   mov32 cb, $00000000
4152   1D80 00 00 
4153   1D82 DD            push bl
4154   1D83 07 70 13      call parse_instr
4155   1D86 51 01 00      add sp, 1
4156   1D89             ; --- END FUNCTION CALL
4157   1D89 0A 8C 1D      jmp _if126_exit
4158   1D8C             _if126_exit:
4159   1D8C 0A 8F 1D      jmp _if125_exit
4160   1D8F             _if125_exit:
4161   1D8F             _if123_exit:
4162   1D8F             _for121_update:
4163   1D8F 0A B0 1C      jmp _for121_cond
4164   1D92             _for121_exit:
4165   1D92             ; print("Done.\n\n"); 
4166   1D92             ; --- START FUNCTION CALL
4167   1D92 26 B4 51      mov b, _s35 ; "Done.\n\n"
4168   1D95 FD AB         swp b
4169   1D97 D8            push b
4170   1D98 07 54 3E      call print
4171   1D9B 51 02 00      add sp, 2
4172   1D9E             ; --- END FUNCTION CALL
4173   1D9E F9            leave
4174   1D9F 09            ret
4175   1DA0             
4176   1DA0             debug:
4177   1DA0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4178   1DA3             ; printf("\n"); 
4179   1DA3             ; --- START FUNCTION CALL
4180   1DA3 26 FC 4F      mov b, _s10 ; "\n"
4181   1DA6 FD AB         swp b
4182   1DA8 D8            push b
4183   1DA9 07 84 42      call printf
4184   1DAC 51 02 00      add sp, 2
4185   1DAF             ; --- END FUNCTION CALL
4186   1DAF             ; printf("Prog Offset: %x\n", prog - program); 
4187   1DAF             ; --- START FUNCTION CALL
4188   1DAF 3B 63 4E      mov d, _prog ; $prog
4189   1DB2 2A            mov b, [d]
4190   1DB3 38 00 00      mov c, 0
4191   1DB6             ; --- START TERMS
4192   1DB6 D7            push a
4193   1DB7 11            mov a, b
4194   1DB8 3B A7 4F      mov d, _program ; $program
4195   1DBB 2A            mov b, [d]
4196   1DBC 38 00 00      mov c, 0
4197   1DBF 60            sub a, b
4198   1DC0 27            mov b, a
4199   1DC1 E4            pop a
4200   1DC2             ; --- END TERMS
4201   1DC2 FD AB         swp b
4202   1DC4 D8            push b
4203   1DC5 26 BC 51      mov b, _s36 ; "Prog Offset: %x\n"
4204   1DC8 FD AB         swp b
4205   1DCA D8            push b
4206   1DCB 07 84 42      call printf
4207   1DCE 51 04 00      add sp, 4
4208   1DD1             ; --- END FUNCTION CALL
4209   1DD1             ; printf("Prog value : %c\n", *prog); 
4210   1DD1             ; --- START FUNCTION CALL
4211   1DD1 3B 63 4E      mov d, _prog ; $prog
4212   1DD4 2A            mov b, [d]
4213   1DD5 38 00 00      mov c, 0
4214   1DD8 74            mov d, b
4215   1DD9 32            mov bl, [d]
4216   1DDA A7 00         mov bh, 0
4217   1DDC 38 00 00      mov c, 0
4218   1DDF FD AB         swp b
4219   1DE1 D8            push b
4220   1DE2 26 CD 51      mov b, _s37 ; "Prog value : %c\n"
4221   1DE5 FD AB         swp b
4222   1DE7 D8            push b
4223   1DE8 07 84 42      call printf
4224   1DEB 51 04 00      add sp, 4
4225   1DEE             ; --- END FUNCTION CALL
4226   1DEE             ; printf("Token      : %s\n", token); 
4227   1DEE             ; --- START FUNCTION CALL
4228   1DEE 3B 65 4E      mov d, _token_data ; $token
4229   1DF1 2D            mov b, d
4230   1DF2 38 00 00      mov c, 0
4231   1DF5 FD AB         swp b
4232   1DF7 D8            push b
4233   1DF8 26 DE 51      mov b, _s38 ; "Token      : %s\n"
4234   1DFB FD AB         swp b
4235   1DFD D8            push b
4236   1DFE 07 84 42      call printf
4237   1E01 51 04 00      add sp, 4
4238   1E04             ; --- END FUNCTION CALL
4239   1E04             ; printf("Tok        : %d\n", tok); 
4240   1E04             ; --- START FUNCTION CALL
4241   1E04 3B 5F 4E      mov d, _tok ; $tok
4242   1E07 2A            mov b, [d]
4243   1E08 38 00 00      mov c, 0
4244   1E0B FD AB         swp b
4245   1E0D D8            push b
4246   1E0E 26 EF 51      mov b, _s39 ; "Tok        : %d\n"
4247   1E11 FD AB         swp b
4248   1E13 D8            push b
4249   1E14 07 84 42      call printf
4250   1E17 51 04 00      add sp, 4
4251   1E1A             ; --- END FUNCTION CALL
4252   1E1A             ; printf("Toktype    : %d\n", toktype); 
4253   1E1A             ; --- START FUNCTION CALL
4254   1E1A 3B 61 4E      mov d, _toktype ; $toktype
4255   1E1D 2A            mov b, [d]
4256   1E1E 38 00 00      mov c, 0
4257   1E21 FD AB         swp b
4258   1E23 D8            push b
4259   1E24 26 00 52      mov b, _s40 ; "Toktype    : %d\n"
4260   1E27 FD AB         swp b
4261   1E29 D8            push b
4262   1E2A 07 84 42      call printf
4263   1E2D 51 04 00      add sp, 4
4264   1E30             ; --- END FUNCTION CALL
4265   1E30             ; printf("StringConst: %s\n", string_const); 
4266   1E30             ; --- START FUNCTION CALL
4267   1E30 3B A5 4E      mov d, _string_const_data ; $string_const
4268   1E33 2D            mov b, d
4269   1E34 38 00 00      mov c, 0
4270   1E37 FD AB         swp b
4271   1E39 D8            push b
4272   1E3A 26 11 52      mov b, _s41 ; "StringConst: %s\n"
4273   1E3D FD AB         swp b
4274   1E3F D8            push b
4275   1E40 07 84 42      call printf
4276   1E43 51 04 00      add sp, 4
4277   1E46             ; --- END FUNCTION CALL
4278   1E46             ; printf("PC         : %x\n", pc); 
4279   1E46             ; --- START FUNCTION CALL
4280   1E46 3B 5C 4E      mov d, _pc ; $pc
4281   1E49 2A            mov b, [d]
4282   1E4A 38 00 00      mov c, 0
4283   1E4D FD AB         swp b
4284   1E4F D8            push b
4285   1E50 26 22 52      mov b, _s42 ; "PC         : %x\n"
4286   1E53 FD AB         swp b
4287   1E55 D8            push b
4288   1E56 07 84 42      call printf
4289   1E59 51 04 00      add sp, 4
4290   1E5C             ; --- END FUNCTION CALL
4291   1E5C F9            leave
4292   1E5D 09            ret
4293   1E5E             
4294   1E5E             display_output:
4295   1E5E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4296   1E61             ; int i; 
4297   1E61 52 02 00      sub sp, 2
4298   1E64             ; unsigned char *p; 
4299   1E64 52 02 00      sub sp, 2
4300   1E67             ; print("\nAssembly complete.\n"); 
4301   1E67             ; --- START FUNCTION CALL
4302   1E67 26 33 52      mov b, _s43 ; "\nAssembly complete.\n"
4303   1E6A FD AB         swp b
4304   1E6C D8            push b
4305   1E6D 07 54 3E      call print
4306   1E70 51 02 00      add sp, 2
4307   1E73             ; --- END FUNCTION CALL
4308   1E73             ; printf("Program size: %d\n", prog_size); 
4309   1E73             ; --- START FUNCTION CALL
4310   1E73 3B C5 4F      mov d, _prog_size ; $prog_size
4311   1E76 2A            mov b, [d]
4312   1E77 38 00 00      mov c, 0
4313   1E7A FD AB         swp b
4314   1E7C D8            push b
4315   1E7D 26 48 52      mov b, _s44 ; "Program size: %d\n"
4316   1E80 FD AB         swp b
4317   1E82 D8            push b
4318   1E83 07 84 42      call printf
4319   1E86 51 04 00      add sp, 4
4320   1E89             ; --- END FUNCTION CALL
4321   1E89             ; print("Listing: \n"); 
4322   1E89             ; --- START FUNCTION CALL
4323   1E89 26 5A 52      mov b, _s45 ; "Listing: \n"
4324   1E8C FD AB         swp b
4325   1E8E D8            push b
4326   1E8F 07 54 3E      call print
4327   1E92 51 02 00      add sp, 2
4328   1E95             ; --- END FUNCTION CALL
4329   1E95             ; p = bin_out + _org; 
4330   1E95 FA FD FF      lea d, [bp + -3] ; $p
4331   1E98 DA            push d
4332   1E99 3B A9 4F      mov d, _bin_out ; $bin_out
4333   1E9C 2A            mov b, [d]
4334   1E9D 38 00 00      mov c, 0
4335   1EA0             ; --- START TERMS
4336   1EA0 D7            push a
4337   1EA1 11            mov a, b
4338   1EA2 3B 5A 4E      mov d, __org ; $_org
4339   1EA5 2A            mov b, [d]
4340   1EA6 38 00 00      mov c, 0
4341   1EA9 56            add b, a
4342   1EAA E4            pop a
4343   1EAB             ; --- END TERMS
4344   1EAB E7            pop d
4345   1EAC FD 43         mov [d], b
4346   1EAE             ; for(;;){ 
4347   1EAE             _for127_init:
4348   1EAE             _for127_cond:
4349   1EAE             _for127_block:
4350   1EAE             ; if(p == bin_p) break; 
4351   1EAE             _if128_cond:
4352   1EAE FA FD FF      lea d, [bp + -3] ; $p
4353   1EB1 2A            mov b, [d]
4354   1EB2 38 00 00      mov c, 0
4355   1EB5             ; --- START RELATIONAL
4356   1EB5 D7            push a
4357   1EB6 11            mov a, b
4358   1EB7 3B AB 4F      mov d, _bin_p ; $bin_p
4359   1EBA 2A            mov b, [d]
4360   1EBB 38 00 00      mov c, 0
4361   1EBE B0            cmp a, b
4362   1EBF FD 71         seq ; ==
4363   1EC1 E4            pop a
4364   1EC2             ; --- END RELATIONAL
4365   1EC2 C0 00 00      cmp b, 0
4366   1EC5 C6 CE 1E      je _if128_exit
4367   1EC8             _if128_TRUE:
4368   1EC8             ; break; 
4369   1EC8 0A F6 1E      jmp _for127_exit ; for break
4370   1ECB 0A CE 1E      jmp _if128_exit
4371   1ECE             _if128_exit:
4372   1ECE             ; printx8(*p);  
4373   1ECE             ; --- START FUNCTION CALL
4374   1ECE FA FD FF      lea d, [bp + -3] ; $p
4375   1ED1 2A            mov b, [d]
4376   1ED2 38 00 00      mov c, 0
4377   1ED5 74            mov d, b
4378   1ED6 32            mov bl, [d]
4379   1ED7 A7 00         mov bh, 0
4380   1ED9 38 00 00      mov c, 0
4381   1EDC DD            push bl
4382   1EDD 07 E0 4C      call printx8
4383   1EE0 51 01 00      add sp, 1
4384   1EE3             ; --- END FUNCTION CALL
4385   1EE3             ; p++; 
4386   1EE3 FA FD FF      lea d, [bp + -3] ; $p
4387   1EE6 2A            mov b, [d]
4388   1EE7 38 00 00      mov c, 0
4389   1EEA FD 77         inc b
4390   1EEC FA FD FF      lea d, [bp + -3] ; $p
4391   1EEF FD 43         mov [d], b
4392   1EF1 FD 7D         dec b
4393   1EF3             _for127_update:
4394   1EF3 0A AE 1E      jmp _for127_cond
4395   1EF6             _for127_exit:
4396   1EF6             ; print("\n"); 
4397   1EF6             ; --- START FUNCTION CALL
4398   1EF6 26 FC 4F      mov b, _s10 ; "\n"
4399   1EF9 FD AB         swp b
4400   1EFB D8            push b
4401   1EFC 07 54 3E      call print
4402   1EFF 51 02 00      add sp, 2
4403   1F02             ; --- END FUNCTION CALL
4404   1F02 F9            leave
4405   1F03 09            ret
4406   1F04             
4407   1F04             is_reserved:
4408   1F04 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4409   1F07             ; return !strcmp(name, "a") 
4410   1F07             ; --- START FUNCTION CALL
4411   1F07 26 65 52      mov b, _s46 ; "a"
4412   1F0A FD AB         swp b
4413   1F0C D8            push b
4414   1F0D FA 05 00      lea d, [bp + 5] ; $name
4415   1F10 2A            mov b, [d]
4416   1F11 38 00 00      mov c, 0
4417   1F14 FD AB         swp b
4418   1F16 D8            push b
4419   1F17 07 B6 3F      call strcmp
4420   1F1A 51 04 00      add sp, 4
4421   1F1D             ; --- END FUNCTION CALL
4422   1F1D             ; --- START LOGICAL OR
4423   1F1D D7            push a
4424   1F1E 11            mov a, b
4425   1F1F             ; --- START FUNCTION CALL
4426   1F1F 26 67 52      mov b, _s47 ; "al"
4427   1F22 FD AB         swp b
4428   1F24 D8            push b
4429   1F25 FA 05 00      lea d, [bp + 5] ; $name
4430   1F28 2A            mov b, [d]
4431   1F29 38 00 00      mov c, 0
4432   1F2C FD AB         swp b
4433   1F2E D8            push b
4434   1F2F 07 B6 3F      call strcmp
4435   1F32 51 04 00      add sp, 4
4436   1F35             ; --- END FUNCTION CALL
4437   1F35 FD A8         sor a, b ; ||
4438   1F37 11            mov a, b
4439   1F38             ; --- START FUNCTION CALL
4440   1F38 26 6A 52      mov b, _s48 ; "ah"
4441   1F3B FD AB         swp b
4442   1F3D D8            push b
4443   1F3E FA 05 00      lea d, [bp + 5] ; $name
4444   1F41 2A            mov b, [d]
4445   1F42 38 00 00      mov c, 0
4446   1F45 FD AB         swp b
4447   1F47 D8            push b
4448   1F48 07 B6 3F      call strcmp
4449   1F4B 51 04 00      add sp, 4
4450   1F4E             ; --- END FUNCTION CALL
4451   1F4E FD A8         sor a, b ; ||
4452   1F50 11            mov a, b
4453   1F51             ; --- START FUNCTION CALL
4454   1F51 26 6D 52      mov b, _s49 ; "b"
4455   1F54 FD AB         swp b
4456   1F56 D8            push b
4457   1F57 FA 05 00      lea d, [bp + 5] ; $name
4458   1F5A 2A            mov b, [d]
4459   1F5B 38 00 00      mov c, 0
4460   1F5E FD AB         swp b
4461   1F60 D8            push b
4462   1F61 07 B6 3F      call strcmp
4463   1F64 51 04 00      add sp, 4
4464   1F67             ; --- END FUNCTION CALL
4465   1F67 FD A8         sor a, b ; ||
4466   1F69 11            mov a, b
4467   1F6A             ; --- START FUNCTION CALL
4468   1F6A 26 6F 52      mov b, _s50 ; "bl"
4469   1F6D FD AB         swp b
4470   1F6F D8            push b
4471   1F70 FA 05 00      lea d, [bp + 5] ; $name
4472   1F73 2A            mov b, [d]
4473   1F74 38 00 00      mov c, 0
4474   1F77 FD AB         swp b
4475   1F79 D8            push b
4476   1F7A 07 B6 3F      call strcmp
4477   1F7D 51 04 00      add sp, 4
4478   1F80             ; --- END FUNCTION CALL
4479   1F80 FD A8         sor a, b ; ||
4480   1F82 11            mov a, b
4481   1F83             ; --- START FUNCTION CALL
4482   1F83 26 72 52      mov b, _s51 ; "bh"
4483   1F86 FD AB         swp b
4484   1F88 D8            push b
4485   1F89 FA 05 00      lea d, [bp + 5] ; $name
4486   1F8C 2A            mov b, [d]
4487   1F8D 38 00 00      mov c, 0
4488   1F90 FD AB         swp b
4489   1F92 D8            push b
4490   1F93 07 B6 3F      call strcmp
4491   1F96 51 04 00      add sp, 4
4492   1F99             ; --- END FUNCTION CALL
4493   1F99 FD A8         sor a, b ; ||
4494   1F9B 11            mov a, b
4495   1F9C             ; --- START FUNCTION CALL
4496   1F9C 26 75 52      mov b, _s52 ; "c"
4497   1F9F FD AB         swp b
4498   1FA1 D8            push b
4499   1FA2 FA 05 00      lea d, [bp + 5] ; $name
4500   1FA5 2A            mov b, [d]
4501   1FA6 38 00 00      mov c, 0
4502   1FA9 FD AB         swp b
4503   1FAB D8            push b
4504   1FAC 07 B6 3F      call strcmp
4505   1FAF 51 04 00      add sp, 4
4506   1FB2             ; --- END FUNCTION CALL
4507   1FB2 FD A8         sor a, b ; ||
4508   1FB4 11            mov a, b
4509   1FB5             ; --- START FUNCTION CALL
4510   1FB5 26 77 52      mov b, _s53 ; "cl"
4511   1FB8 FD AB         swp b
4512   1FBA D8            push b
4513   1FBB FA 05 00      lea d, [bp + 5] ; $name
4514   1FBE 2A            mov b, [d]
4515   1FBF 38 00 00      mov c, 0
4516   1FC2 FD AB         swp b
4517   1FC4 D8            push b
4518   1FC5 07 B6 3F      call strcmp
4519   1FC8 51 04 00      add sp, 4
4520   1FCB             ; --- END FUNCTION CALL
4521   1FCB FD A8         sor a, b ; ||
4522   1FCD 11            mov a, b
4523   1FCE             ; --- START FUNCTION CALL
4524   1FCE 26 7A 52      mov b, _s54 ; "ch"
4525   1FD1 FD AB         swp b
4526   1FD3 D8            push b
4527   1FD4 FA 05 00      lea d, [bp + 5] ; $name
4528   1FD7 2A            mov b, [d]
4529   1FD8 38 00 00      mov c, 0
4530   1FDB FD AB         swp b
4531   1FDD D8            push b
4532   1FDE 07 B6 3F      call strcmp
4533   1FE1 51 04 00      add sp, 4
4534   1FE4             ; --- END FUNCTION CALL
4535   1FE4 FD A8         sor a, b ; ||
4536   1FE6 11            mov a, b
4537   1FE7             ; --- START FUNCTION CALL
4538   1FE7 26 7D 52      mov b, _s55 ; "d"
4539   1FEA FD AB         swp b
4540   1FEC D8            push b
4541   1FED FA 05 00      lea d, [bp + 5] ; $name
4542   1FF0 2A            mov b, [d]
4543   1FF1 38 00 00      mov c, 0
4544   1FF4 FD AB         swp b
4545   1FF6 D8            push b
4546   1FF7 07 B6 3F      call strcmp
4547   1FFA 51 04 00      add sp, 4
4548   1FFD             ; --- END FUNCTION CALL
4549   1FFD FD A8         sor a, b ; ||
4550   1FFF 11            mov a, b
4551   2000             ; --- START FUNCTION CALL
4552   2000 26 7F 52      mov b, _s56 ; "dl"
4553   2003 FD AB         swp b
4554   2005 D8            push b
4555   2006 FA 05 00      lea d, [bp + 5] ; $name
4556   2009 2A            mov b, [d]
4557   200A 38 00 00      mov c, 0
4558   200D FD AB         swp b
4559   200F D8            push b
4560   2010 07 B6 3F      call strcmp
4561   2013 51 04 00      add sp, 4
4562   2016             ; --- END FUNCTION CALL
4563   2016 FD A8         sor a, b ; ||
4564   2018 11            mov a, b
4565   2019             ; --- START FUNCTION CALL
4566   2019 26 82 52      mov b, _s57 ; "dh"
4567   201C FD AB         swp b
4568   201E D8            push b
4569   201F FA 05 00      lea d, [bp + 5] ; $name
4570   2022 2A            mov b, [d]
4571   2023 38 00 00      mov c, 0
4572   2026 FD AB         swp b
4573   2028 D8            push b
4574   2029 07 B6 3F      call strcmp
4575   202C 51 04 00      add sp, 4
4576   202F             ; --- END FUNCTION CALL
4577   202F FD A8         sor a, b ; ||
4578   2031 11            mov a, b
4579   2032             ; --- START FUNCTION CALL
4580   2032 26 85 52      mov b, _s58 ; "g"
4581   2035 FD AB         swp b
4582   2037 D8            push b
4583   2038 FA 05 00      lea d, [bp + 5] ; $name
4584   203B 2A            mov b, [d]
4585   203C 38 00 00      mov c, 0
4586   203F FD AB         swp b
4587   2041 D8            push b
4588   2042 07 B6 3F      call strcmp
4589   2045 51 04 00      add sp, 4
4590   2048             ; --- END FUNCTION CALL
4591   2048 FD A8         sor a, b ; ||
4592   204A 11            mov a, b
4593   204B             ; --- START FUNCTION CALL
4594   204B 26 87 52      mov b, _s59 ; "gl"
4595   204E FD AB         swp b
4596   2050 D8            push b
4597   2051 FA 05 00      lea d, [bp + 5] ; $name
4598   2054 2A            mov b, [d]
4599   2055 38 00 00      mov c, 0
4600   2058 FD AB         swp b
4601   205A D8            push b
4602   205B 07 B6 3F      call strcmp
4603   205E 51 04 00      add sp, 4
4604   2061             ; --- END FUNCTION CALL
4605   2061 FD A8         sor a, b ; ||
4606   2063 11            mov a, b
4607   2064             ; --- START FUNCTION CALL
4608   2064 26 8A 52      mov b, _s60 ; "gh"
4609   2067 FD AB         swp b
4610   2069 D8            push b
4611   206A FA 05 00      lea d, [bp + 5] ; $name
4612   206D 2A            mov b, [d]
4613   206E 38 00 00      mov c, 0
4614   2071 FD AB         swp b
4615   2073 D8            push b
4616   2074 07 B6 3F      call strcmp
4617   2077 51 04 00      add sp, 4
4618   207A             ; --- END FUNCTION CALL
4619   207A FD A8         sor a, b ; ||
4620   207C 11            mov a, b
4621   207D             ; --- START FUNCTION CALL
4622   207D 26 8D 52      mov b, _s61 ; "pc"
4623   2080 FD AB         swp b
4624   2082 D8            push b
4625   2083 FA 05 00      lea d, [bp + 5] ; $name
4626   2086 2A            mov b, [d]
4627   2087 38 00 00      mov c, 0
4628   208A FD AB         swp b
4629   208C D8            push b
4630   208D 07 B6 3F      call strcmp
4631   2090 51 04 00      add sp, 4
4632   2093             ; --- END FUNCTION CALL
4633   2093 FD A8         sor a, b ; ||
4634   2095 11            mov a, b
4635   2096             ; --- START FUNCTION CALL
4636   2096 26 90 52      mov b, _s62 ; "sp"
4637   2099 FD AB         swp b
4638   209B D8            push b
4639   209C FA 05 00      lea d, [bp + 5] ; $name
4640   209F 2A            mov b, [d]
4641   20A0 38 00 00      mov c, 0
4642   20A3 FD AB         swp b
4643   20A5 D8            push b
4644   20A6 07 B6 3F      call strcmp
4645   20A9 51 04 00      add sp, 4
4646   20AC             ; --- END FUNCTION CALL
4647   20AC FD A8         sor a, b ; ||
4648   20AE 11            mov a, b
4649   20AF             ; --- START FUNCTION CALL
4650   20AF 26 93 52      mov b, _s63 ; "bp"
4651   20B2 FD AB         swp b
4652   20B4 D8            push b
4653   20B5 FA 05 00      lea d, [bp + 5] ; $name
4654   20B8 2A            mov b, [d]
4655   20B9 38 00 00      mov c, 0
4656   20BC FD AB         swp b
4657   20BE D8            push b
4658   20BF 07 B6 3F      call strcmp
4659   20C2 51 04 00      add sp, 4
4660   20C5             ; --- END FUNCTION CALL
4661   20C5 FD A8         sor a, b ; ||
4662   20C7 11            mov a, b
4663   20C8             ; --- START FUNCTION CALL
4664   20C8 26 96 52      mov b, _s64 ; "si"
4665   20CB FD AB         swp b
4666   20CD D8            push b
4667   20CE FA 05 00      lea d, [bp + 5] ; $name
4668   20D1 2A            mov b, [d]
4669   20D2 38 00 00      mov c, 0
4670   20D5 FD AB         swp b
4671   20D7 D8            push b
4672   20D8 07 B6 3F      call strcmp
4673   20DB 51 04 00      add sp, 4
4674   20DE             ; --- END FUNCTION CALL
4675   20DE FD A8         sor a, b ; ||
4676   20E0 11            mov a, b
4677   20E1             ; --- START FUNCTION CALL
4678   20E1 26 99 52      mov b, _s65 ; "di"
4679   20E4 FD AB         swp b
4680   20E6 D8            push b
4681   20E7 FA 05 00      lea d, [bp + 5] ; $name
4682   20EA 2A            mov b, [d]
4683   20EB 38 00 00      mov c, 0
4684   20EE FD AB         swp b
4685   20F0 D8            push b
4686   20F1 07 B6 3F      call strcmp
4687   20F4 51 04 00      add sp, 4
4688   20F7             ; --- END FUNCTION CALL
4689   20F7 FD A8         sor a, b ; ||
4690   20F9 11            mov a, b
4691   20FA             ; --- START FUNCTION CALL
4692   20FA 26 9C 52      mov b, _s66 ; "word"
4693   20FD FD AB         swp b
4694   20FF D8            push b
4695   2100 FA 05 00      lea d, [bp + 5] ; $name
4696   2103 2A            mov b, [d]
4697   2104 38 00 00      mov c, 0
4698   2107 FD AB         swp b
4699   2109 D8            push b
4700   210A 07 B6 3F      call strcmp
4701   210D 51 04 00      add sp, 4
4702   2110             ; --- END FUNCTION CALL
4703   2110 FD A8         sor a, b ; ||
4704   2112 11            mov a, b
4705   2113             ; --- START FUNCTION CALL
4706   2113 26 A1 52      mov b, _s67 ; "byte"
4707   2116 FD AB         swp b
4708   2118 D8            push b
4709   2119 FA 05 00      lea d, [bp + 5] ; $name
4710   211C 2A            mov b, [d]
4711   211D 38 00 00      mov c, 0
4712   2120 FD AB         swp b
4713   2122 D8            push b
4714   2123 07 B6 3F      call strcmp
4715   2126 51 04 00      add sp, 4
4716   2129             ; --- END FUNCTION CALL
4717   2129 FD A8         sor a, b ; ||
4718   212B 11            mov a, b
4719   212C             ; --- START FUNCTION CALL
4720   212C 26 A6 52      mov b, _s68 ; "cmpsb"
4721   212F FD AB         swp b
4722   2131 D8            push b
4723   2132 FA 05 00      lea d, [bp + 5] ; $name
4724   2135 2A            mov b, [d]
4725   2136 38 00 00      mov c, 0
4726   2139 FD AB         swp b
4727   213B D8            push b
4728   213C 07 B6 3F      call strcmp
4729   213F 51 04 00      add sp, 4
4730   2142             ; --- END FUNCTION CALL
4731   2142 FD A8         sor a, b ; ||
4732   2144 11            mov a, b
4733   2145             ; --- START FUNCTION CALL
4734   2145 26 AC 52      mov b, _s69 ; "movsb"
4735   2148 FD AB         swp b
4736   214A D8            push b
4737   214B FA 05 00      lea d, [bp + 5] ; $name
4738   214E 2A            mov b, [d]
4739   214F 38 00 00      mov c, 0
4740   2152 FD AB         swp b
4741   2154 D8            push b
4742   2155 07 B6 3F      call strcmp
4743   2158 51 04 00      add sp, 4
4744   215B             ; --- END FUNCTION CALL
4745   215B FD A8         sor a, b ; ||
4746   215D 11            mov a, b
4747   215E             ; --- START FUNCTION CALL
4748   215E 26 B2 52      mov b, _s70 ; "stosb"
4749   2161 FD AB         swp b
4750   2163 D8            push b
4751   2164 FA 05 00      lea d, [bp + 5] ; $name
4752   2167 2A            mov b, [d]
4753   2168 38 00 00      mov c, 0
4754   216B FD AB         swp b
4755   216D D8            push b
4756   216E 07 B6 3F      call strcmp
4757   2171 51 04 00      add sp, 4
4758   2174             ; --- END FUNCTION CALL
4759   2174 FD A8         sor a, b ; ||
4760   2176 E4            pop a
4761   2177             ; --- END LOGICAL OR
4762   2177 F9            leave
4763   2178 09            ret
4764   2179             
4765   2179             is_directive:
4766   2179 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4767   217C             ; return !strcmp(name, "org")  
4768   217C             ; --- START FUNCTION CALL
4769   217C 26 D7 4F      mov b, _s0 ; "org"
4770   217F FD AB         swp b
4771   2181 D8            push b
4772   2182 FA 05 00      lea d, [bp + 5] ; $name
4773   2185 2A            mov b, [d]
4774   2186 38 00 00      mov c, 0
4775   2189 FD AB         swp b
4776   218B D8            push b
4777   218C 07 B6 3F      call strcmp
4778   218F 51 04 00      add sp, 4
4779   2192             ; --- END FUNCTION CALL
4780   2192             ; --- START LOGICAL OR
4781   2192 D7            push a
4782   2193 11            mov a, b
4783   2194             ; --- START FUNCTION CALL
4784   2194 26 B8 52      mov b, _s71 ; "define"
4785   2197 FD AB         swp b
4786   2199 D8            push b
4787   219A FA 05 00      lea d, [bp + 5] ; $name
4788   219D 2A            mov b, [d]
4789   219E 38 00 00      mov c, 0
4790   21A1 FD AB         swp b
4791   21A3 D8            push b
4792   21A4 07 B6 3F      call strcmp
4793   21A7 51 04 00      add sp, 4
4794   21AA             ; --- END FUNCTION CALL
4795   21AA FD A8         sor a, b ; ||
4796   21AC E4            pop a
4797   21AD             ; --- END LOGICAL OR
4798   21AD F9            leave
4799   21AE 09            ret
4800   21AF             
4801   21AF             parse_label:
4802   21AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4803   21B2             ; char label_name[ 32      ]; 
4804   21B2 52 20 00      sub sp, 32
4805   21B5             ; get(); 
4806   21B5             ; --- START FUNCTION CALL
4807   21B5 07 60 2B      call get
4808   21B8             ; strcpy(label_name, token); 
4809   21B8             ; --- START FUNCTION CALL
4810   21B8 3B 65 4E      mov d, _token_data ; $token
4811   21BB 2D            mov b, d
4812   21BC 38 00 00      mov c, 0
4813   21BF FD AB         swp b
4814   21C1 D8            push b
4815   21C2 FA E1 FF      lea d, [bp + -31] ; $label_name
4816   21C5 2D            mov b, d
4817   21C6 38 00 00      mov c, 0
4818   21C9 FD AB         swp b
4819   21CB D8            push b
4820   21CC 07 83 4B      call strcpy
4821   21CF 51 04 00      add sp, 4
4822   21D2             ; --- END FUNCTION CALL
4823   21D2             ; declare_label(label_name, pc); 
4824   21D2             ; --- START FUNCTION CALL
4825   21D2 3B 5C 4E      mov d, _pc ; $pc
4826   21D5 2A            mov b, [d]
4827   21D6 38 00 00      mov c, 0
4828   21D9 FD AB         swp b
4829   21DB D8            push b
4830   21DC FA E1 FF      lea d, [bp + -31] ; $label_name
4831   21DF 2D            mov b, d
4832   21E0 38 00 00      mov c, 0
4833   21E3 FD AB         swp b
4834   21E5 D8            push b
4835   21E6 07 F1 21      call declare_label
4836   21E9 51 04 00      add sp, 4
4837   21EC             ; --- END FUNCTION CALL
4838   21EC             ; get(); // get ':' 
4839   21EC             ; --- START FUNCTION CALL
4840   21EC 07 60 2B      call get
4841   21EF F9            leave
4842   21F0 09            ret
4843   21F1             
4844   21F1             declare_label:
4845   21F1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4846   21F4             ; int i; 
4847   21F4 52 02 00      sub sp, 2
4848   21F7             ; for(i = 0; i <  16          ; i++){ 
4849   21F7             _for129_init:
4850   21F7 FA FF FF      lea d, [bp + -1] ; $i
4851   21FA DA            push d
4852   21FB FD 2E 00 00   mov32 cb, $00000000
4852   21FF 00 00 
4853   2201 E7            pop d
4854   2202 FD 43         mov [d], b
4855   2204             _for129_cond:
4856   2204 FA FF FF      lea d, [bp + -1] ; $i
4857   2207 2A            mov b, [d]
4858   2208 38 00 00      mov c, 0
4859   220B             ; --- START RELATIONAL
4860   220B D7            push a
4861   220C 11            mov a, b
4862   220D FD 2E 10 00   mov32 cb, $00000010
4862   2211 00 00 
4863   2213 B0            cmp a, b
4864   2214 FD 73         slt ; < (signed)
4865   2216 E4            pop a
4866   2217             ; --- END RELATIONAL
4867   2217 C0 00 00      cmp b, 0
4868   221A C6 B4 22      je _for129_exit
4869   221D             _for129_block:
4870   221D             ; if(!label_table[i].name[0]){ 
4871   221D             _if130_cond:
4872   221D 3B 3A 4D      mov d, _label_table_data ; $label_table
4873   2220 D7            push a
4874   2221 DA            push d
4875   2222 FA FF FF      lea d, [bp + -1] ; $i
4876   2225 2A            mov b, [d]
4877   2226 38 00 00      mov c, 0
4878   2229 E7            pop d
4879   222A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4880   222E E4            pop a
4881   222F 58 00 00      add d, 0
4882   2232 D7            push a
4883   2233 DA            push d
4884   2234 FD 2E 00 00   mov32 cb, $00000000
4884   2238 00 00 
4885   223A E7            pop d
4886   223B 5A            add d, b
4887   223C E4            pop a
4888   223D 32            mov bl, [d]
4889   223E A7 00         mov bh, 0
4890   2240 38 00 00      mov c, 0
4891   2243 C0 00 00      cmp b, 0
4892   2246 C6 A1 22      je _if130_exit
4893   2249             _if130_TRUE:
4894   2249             ; strcpy(label_table[i].name, name); 
4895   2249             ; --- START FUNCTION CALL
4896   2249 FA 05 00      lea d, [bp + 5] ; $name
4897   224C 2A            mov b, [d]
4898   224D 38 00 00      mov c, 0
4899   2250 FD AB         swp b
4900   2252 D8            push b
4901   2253 3B 3A 4D      mov d, _label_table_data ; $label_table
4902   2256 D7            push a
4903   2257 DA            push d
4904   2258 FA FF FF      lea d, [bp + -1] ; $i
4905   225B 2A            mov b, [d]
4906   225C 38 00 00      mov c, 0
4907   225F E7            pop d
4908   2260 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4909   2264 E4            pop a
4910   2265 58 00 00      add d, 0
4911   2268 2D            mov b, d
4912   2269 38 00 00      mov c, 0
4913   226C FD AB         swp b
4914   226E D8            push b
4915   226F 07 83 4B      call strcpy
4916   2272 51 04 00      add sp, 4
4917   2275             ; --- END FUNCTION CALL
4918   2275             ; label_table[i].address = address; 
4919   2275 3B 3A 4D      mov d, _label_table_data ; $label_table
4920   2278 D7            push a
4921   2279 DA            push d
4922   227A FA FF FF      lea d, [bp + -1] ; $i
4923   227D 2A            mov b, [d]
4924   227E 38 00 00      mov c, 0
4925   2281 E7            pop d
4926   2282 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4927   2286 E4            pop a
4928   2287 58 10 00      add d, 16
4929   228A DA            push d
4930   228B FA 07 00      lea d, [bp + 7] ; $address
4931   228E 2A            mov b, [d]
4932   228F 38 00 00      mov c, 0
4933   2292 E7            pop d
4934   2293 FD 43         mov [d], b
4935   2295             ; return i; 
4936   2295 FA FF FF      lea d, [bp + -1] ; $i
4937   2298 2A            mov b, [d]
4938   2299 38 00 00      mov c, 0
4939   229C F9            leave
4940   229D 09            ret
4941   229E 0A A1 22      jmp _if130_exit
4942   22A1             _if130_exit:
4943   22A1             _for129_update:
4944   22A1 FA FF FF      lea d, [bp + -1] ; $i
4945   22A4 2A            mov b, [d]
4946   22A5 38 00 00      mov c, 0
4947   22A8 11            mov a, b
4948   22A9 FD 77         inc b
4949   22AB FA FF FF      lea d, [bp + -1] ; $i
4950   22AE FD 43         mov [d], b
4951   22B0 27            mov b, a
4952   22B1 0A 04 22      jmp _for129_cond
4953   22B4             _for129_exit:
4954   22B4 F9            leave
4955   22B5 09            ret
4956   22B6             
4957   22B6             get_label_addr:
4958   22B6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4959   22B9             ; int i; 
4960   22B9 52 02 00      sub sp, 2
4961   22BC             ; for(i = 0; i <  16          ; i++){ 
4962   22BC             _for131_init:
4963   22BC FA FF FF      lea d, [bp + -1] ; $i
4964   22BF DA            push d
4965   22C0 FD 2E 00 00   mov32 cb, $00000000
4965   22C4 00 00 
4966   22C6 E7            pop d
4967   22C7 FD 43         mov [d], b
4968   22C9             _for131_cond:
4969   22C9 FA FF FF      lea d, [bp + -1] ; $i
4970   22CC 2A            mov b, [d]
4971   22CD 38 00 00      mov c, 0
4972   22D0             ; --- START RELATIONAL
4973   22D0 D7            push a
4974   22D1 11            mov a, b
4975   22D2 FD 2E 10 00   mov32 cb, $00000010
4975   22D6 00 00 
4976   22D8 B0            cmp a, b
4977   22D9 FD 73         slt ; < (signed)
4978   22DB E4            pop a
4979   22DC             ; --- END RELATIONAL
4980   22DC C0 00 00      cmp b, 0
4981   22DF C6 45 23      je _for131_exit
4982   22E2             _for131_block:
4983   22E2             ; if(!strcmp(label_table[i].name, name)){ 
4984   22E2             _if132_cond:
4985   22E2             ; --- START FUNCTION CALL
4986   22E2 FA 05 00      lea d, [bp + 5] ; $name
4987   22E5 2A            mov b, [d]
4988   22E6 38 00 00      mov c, 0
4989   22E9 FD AB         swp b
4990   22EB D8            push b
4991   22EC 3B 3A 4D      mov d, _label_table_data ; $label_table
4992   22EF D7            push a
4993   22F0 DA            push d
4994   22F1 FA FF FF      lea d, [bp + -1] ; $i
4995   22F4 2A            mov b, [d]
4996   22F5 38 00 00      mov c, 0
4997   22F8 E7            pop d
4998   22F9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4999   22FD E4            pop a
5000   22FE 58 00 00      add d, 0
5001   2301 2D            mov b, d
5002   2302 38 00 00      mov c, 0
5003   2305 FD AB         swp b
5004   2307 D8            push b
5005   2308 07 B6 3F      call strcmp
5006   230B 51 04 00      add sp, 4
5007   230E             ; --- END FUNCTION CALL
5008   230E C0 00 00      cmp b, 0
5009   2311 C6 32 23      je _if132_exit
5010   2314             _if132_TRUE:
5011   2314             ; return label_table[i].address; 
5012   2314 3B 3A 4D      mov d, _label_table_data ; $label_table
5013   2317 D7            push a
5014   2318 DA            push d
5015   2319 FA FF FF      lea d, [bp + -1] ; $i
5016   231C 2A            mov b, [d]
5017   231D 38 00 00      mov c, 0
5018   2320 E7            pop d
5019   2321 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5020   2325 E4            pop a
5021   2326 58 10 00      add d, 16
5022   2329 2A            mov b, [d]
5023   232A 38 00 00      mov c, 0
5024   232D F9            leave
5025   232E 09            ret
5026   232F 0A 32 23      jmp _if132_exit
5027   2332             _if132_exit:
5028   2332             _for131_update:
5029   2332 FA FF FF      lea d, [bp + -1] ; $i
5030   2335 2A            mov b, [d]
5031   2336 38 00 00      mov c, 0
5032   2339 11            mov a, b
5033   233A FD 77         inc b
5034   233C FA FF FF      lea d, [bp + -1] ; $i
5035   233F FD 43         mov [d], b
5036   2341 27            mov b, a
5037   2342 0A C9 22      jmp _for131_cond
5038   2345             _for131_exit:
5039   2345             ; error_s("Label does not exist: ", name); 
5040   2345             ; --- START FUNCTION CALL
5041   2345 FA 05 00      lea d, [bp + 5] ; $name
5042   2348 2A            mov b, [d]
5043   2349 38 00 00      mov c, 0
5044   234C FD AB         swp b
5045   234E D8            push b
5046   234F 26 BF 52      mov b, _s72 ; "Label does not exist: "
5047   2352 FD AB         swp b
5048   2354 D8            push b
5049   2355 07 90 39      call error_s
5050   2358 51 04 00      add sp, 4
5051   235B             ; --- END FUNCTION CALL
5052   235B F9            leave
5053   235C 09            ret
5054   235D             
5055   235D             label_exists:
5056   235D F8 00 00      enter 0 ; (push bp; mov bp, sp)
5057   2360             ; int i; 
5058   2360 52 02 00      sub sp, 2
5059   2363             ; for(i = 0; i <  16          ; i++){ 
5060   2363             _for133_init:
5061   2363 FA FF FF      lea d, [bp + -1] ; $i
5062   2366 DA            push d
5063   2367 FD 2E 00 00   mov32 cb, $00000000
5063   236B 00 00 
5064   236D E7            pop d
5065   236E FD 43         mov [d], b
5066   2370             _for133_cond:
5067   2370 FA FF FF      lea d, [bp + -1] ; $i
5068   2373 2A            mov b, [d]
5069   2374 38 00 00      mov c, 0
5070   2377             ; --- START RELATIONAL
5071   2377 D7            push a
5072   2378 11            mov a, b
5073   2379 FD 2E 10 00   mov32 cb, $00000010
5073   237D 00 00 
5074   237F B0            cmp a, b
5075   2380 FD 73         slt ; < (signed)
5076   2382 E4            pop a
5077   2383             ; --- END RELATIONAL
5078   2383 C0 00 00      cmp b, 0
5079   2386 C6 DA 23      je _for133_exit
5080   2389             _for133_block:
5081   2389             ; if(!strcmp(label_table[i].name, name)){ 
5082   2389             _if134_cond:
5083   2389             ; --- START FUNCTION CALL
5084   2389 FA 05 00      lea d, [bp + 5] ; $name
5085   238C 2A            mov b, [d]
5086   238D 38 00 00      mov c, 0
5087   2390 FD AB         swp b
5088   2392 D8            push b
5089   2393 3B 3A 4D      mov d, _label_table_data ; $label_table
5090   2396 D7            push a
5091   2397 DA            push d
5092   2398 FA FF FF      lea d, [bp + -1] ; $i
5093   239B 2A            mov b, [d]
5094   239C 38 00 00      mov c, 0
5095   239F E7            pop d
5096   23A0 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5097   23A4 E4            pop a
5098   23A5 58 00 00      add d, 0
5099   23A8 2D            mov b, d
5100   23A9 38 00 00      mov c, 0
5101   23AC FD AB         swp b
5102   23AE D8            push b
5103   23AF 07 B6 3F      call strcmp
5104   23B2 51 04 00      add sp, 4
5105   23B5             ; --- END FUNCTION CALL
5106   23B5 C0 00 00      cmp b, 0
5107   23B8 C6 C7 23      je _if134_exit
5108   23BB             _if134_TRUE:
5109   23BB             ; return i; 
5110   23BB FA FF FF      lea d, [bp + -1] ; $i
5111   23BE 2A            mov b, [d]
5112   23BF 38 00 00      mov c, 0
5113   23C2 F9            leave
5114   23C3 09            ret
5115   23C4 0A C7 23      jmp _if134_exit
5116   23C7             _if134_exit:
5117   23C7             _for133_update:
5118   23C7 FA FF FF      lea d, [bp + -1] ; $i
5119   23CA 2A            mov b, [d]
5120   23CB 38 00 00      mov c, 0
5121   23CE 11            mov a, b
5122   23CF FD 77         inc b
5123   23D1 FA FF FF      lea d, [bp + -1] ; $i
5124   23D4 FD 43         mov [d], b
5125   23D6 27            mov b, a
5126   23D7 0A 70 23      jmp _for133_cond
5127   23DA             _for133_exit:
5128   23DA             ; return -1; 
5129   23DA FD 2E FF FF   mov32 cb, $ffffffff
5129   23DE FF FF 
5130   23E0 F9            leave
5131   23E1 09            ret
5132   23E2             
5133   23E2             search_opcode:
5134   23E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5135   23E5             ; char opcode_str[24]; 
5136   23E5 52 18 00      sub sp, 24
5137   23E8             ; char opcode_hex[5]; 
5138   23E8 52 05 00      sub sp, 5
5139   23EB             ; char *hex_p; 
5140   23EB 52 02 00      sub sp, 2
5141   23EE             ; char *op_p; 
5142   23EE 52 02 00      sub sp, 2
5143   23F1             ; char *tbl_p; 
5144   23F1 52 02 00      sub sp, 2
5145   23F4             ; struct t_opcode return_opcode; 
5146   23F4 52 1A 00      sub sp, 26
5147   23F7             ; tbl_p = opcode_table; 
5148   23F7 FA DE FF      lea d, [bp + -34] ; $tbl_p
5149   23FA DA            push d
5150   23FB 3B AD 4F      mov d, _opcode_table ; $opcode_table
5151   23FE 2A            mov b, [d]
5152   23FF 38 00 00      mov c, 0
5153   2402 E7            pop d
5154   2403 FD 43         mov [d], b
5155   2405             ; for(;;){ 
5156   2405             _for135_init:
5157   2405             _for135_cond:
5158   2405             _for135_block:
5159   2405             ; op_p = opcode_str; 
5160   2405 FA E0 FF      lea d, [bp + -32] ; $op_p
5161   2408 DA            push d
5162   2409 FA E9 FF      lea d, [bp + -23] ; $opcode_str
5163   240C 2D            mov b, d
5164   240D 38 00 00      mov c, 0
5165   2410 E7            pop d
5166   2411 FD 43         mov [d], b
5167   2413             ; hex_p = opcode_hex; 
5168   2413 FA E2 FF      lea d, [bp + -30] ; $hex_p
5169   2416 DA            push d
5170   2417 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5171   241A 2D            mov b, d
5172   241B 38 00 00      mov c, 0
5173   241E E7            pop d
5174   241F FD 43         mov [d], b
5175   2421             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5176   2421             _while136_cond:
5177   2421 FA DE FF      lea d, [bp + -34] ; $tbl_p
5178   2424 2A            mov b, [d]
5179   2425 38 00 00      mov c, 0
5180   2428 74            mov d, b
5181   2429 32            mov bl, [d]
5182   242A A7 00         mov bh, 0
5183   242C 38 00 00      mov c, 0
5184   242F             ; --- START RELATIONAL
5185   242F D7            push a
5186   2430 11            mov a, b
5187   2431 FD 2E 20 00   mov32 cb, $00000020
5187   2435 00 00 
5188   2437 B0            cmp a, b
5189   2438 FD 72         sneq ; !=
5190   243A E4            pop a
5191   243B             ; --- END RELATIONAL
5192   243B C0 00 00      cmp b, 0
5193   243E C6 6F 24      je _while136_exit
5194   2441             _while136_block:
5195   2441             ; *op_p++ = *tbl_p++; 
5196   2441 FA E0 FF      lea d, [bp + -32] ; $op_p
5197   2444 2A            mov b, [d]
5198   2445 38 00 00      mov c, 0
5199   2448 FD 77         inc b
5200   244A FA E0 FF      lea d, [bp + -32] ; $op_p
5201   244D FD 43         mov [d], b
5202   244F FD 7D         dec b
5203   2451 D8            push b
5204   2452 FA DE FF      lea d, [bp + -34] ; $tbl_p
5205   2455 2A            mov b, [d]
5206   2456 38 00 00      mov c, 0
5207   2459 FD 77         inc b
5208   245B FA DE FF      lea d, [bp + -34] ; $tbl_p
5209   245E FD 43         mov [d], b
5210   2460 FD 7D         dec b
5211   2462 74            mov d, b
5212   2463 32            mov bl, [d]
5213   2464 A7 00         mov bh, 0
5214   2466 38 00 00      mov c, 0
5215   2469 E7            pop d
5216   246A FD 3E         mov [d], bl
5217   246C 0A 21 24      jmp _while136_cond
5218   246F             _while136_exit:
5219   246F             ; *op_p++ = *tbl_p++; 
5220   246F FA E0 FF      lea d, [bp + -32] ; $op_p
5221   2472 2A            mov b, [d]
5222   2473 38 00 00      mov c, 0
5223   2476 FD 77         inc b
5224   2478 FA E0 FF      lea d, [bp + -32] ; $op_p
5225   247B FD 43         mov [d], b
5226   247D FD 7D         dec b
5227   247F D8            push b
5228   2480 FA DE FF      lea d, [bp + -34] ; $tbl_p
5229   2483 2A            mov b, [d]
5230   2484 38 00 00      mov c, 0
5231   2487 FD 77         inc b
5232   2489 FA DE FF      lea d, [bp + -34] ; $tbl_p
5233   248C FD 43         mov [d], b
5234   248E FD 7D         dec b
5235   2490 74            mov d, b
5236   2491 32            mov bl, [d]
5237   2492 A7 00         mov bh, 0
5238   2494 38 00 00      mov c, 0
5239   2497 E7            pop d
5240   2498 FD 3E         mov [d], bl
5241   249A             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5242   249A             _while137_cond:
5243   249A FA DE FF      lea d, [bp + -34] ; $tbl_p
5244   249D 2A            mov b, [d]
5245   249E 38 00 00      mov c, 0
5246   24A1 74            mov d, b
5247   24A2 32            mov bl, [d]
5248   24A3 A7 00         mov bh, 0
5249   24A5 38 00 00      mov c, 0
5250   24A8             ; --- START RELATIONAL
5251   24A8 D7            push a
5252   24A9 11            mov a, b
5253   24AA FD 2E 20 00   mov32 cb, $00000020
5253   24AE 00 00 
5254   24B0 B0            cmp a, b
5255   24B1 FD 72         sneq ; !=
5256   24B3 E4            pop a
5257   24B4             ; --- END RELATIONAL
5258   24B4 C0 00 00      cmp b, 0
5259   24B7 C6 E8 24      je _while137_exit
5260   24BA             _while137_block:
5261   24BA             ; *op_p++ = *tbl_p++; 
5262   24BA FA E0 FF      lea d, [bp + -32] ; $op_p
5263   24BD 2A            mov b, [d]
5264   24BE 38 00 00      mov c, 0
5265   24C1 FD 77         inc b
5266   24C3 FA E0 FF      lea d, [bp + -32] ; $op_p
5267   24C6 FD 43         mov [d], b
5268   24C8 FD 7D         dec b
5269   24CA D8            push b
5270   24CB FA DE FF      lea d, [bp + -34] ; $tbl_p
5271   24CE 2A            mov b, [d]
5272   24CF 38 00 00      mov c, 0
5273   24D2 FD 77         inc b
5274   24D4 FA DE FF      lea d, [bp + -34] ; $tbl_p
5275   24D7 FD 43         mov [d], b
5276   24D9 FD 7D         dec b
5277   24DB 74            mov d, b
5278   24DC 32            mov bl, [d]
5279   24DD A7 00         mov bh, 0
5280   24DF 38 00 00      mov c, 0
5281   24E2 E7            pop d
5282   24E3 FD 3E         mov [d], bl
5283   24E5 0A 9A 24      jmp _while137_cond
5284   24E8             _while137_exit:
5285   24E8             ; *op_p = '\0'; 
5286   24E8 FA E0 FF      lea d, [bp + -32] ; $op_p
5287   24EB 2A            mov b, [d]
5288   24EC 38 00 00      mov c, 0
5289   24EF D8            push b
5290   24F0 FD 2E 00 00   mov32 cb, $00000000
5290   24F4 00 00 
5291   24F6 E7            pop d
5292   24F7 FD 3E         mov [d], bl
5293   24F9             ; if(!strcmp(opcode_str, what_opcode)){ 
5294   24F9             _if138_cond:
5295   24F9             ; --- START FUNCTION CALL
5296   24F9 FA 05 00      lea d, [bp + 5] ; $what_opcode
5297   24FC 2A            mov b, [d]
5298   24FD 38 00 00      mov c, 0
5299   2500 FD AB         swp b
5300   2502 D8            push b
5301   2503 FA E9 FF      lea d, [bp + -23] ; $opcode_str
5302   2506 2D            mov b, d
5303   2507 38 00 00      mov c, 0
5304   250A FD AB         swp b
5305   250C D8            push b
5306   250D 07 B6 3F      call strcmp
5307   2510 51 04 00      add sp, 4
5308   2513             ; --- END FUNCTION CALL
5309   2513 C0 00 00      cmp b, 0
5310   2516 C6 63 26      je _if138_else
5311   2519             _if138_TRUE:
5312   2519             ; strcpy(return_opcode.name, what_opcode); 
5313   2519             ; --- START FUNCTION CALL
5314   2519 FA 05 00      lea d, [bp + 5] ; $what_opcode
5315   251C 2A            mov b, [d]
5316   251D 38 00 00      mov c, 0
5317   2520 FD AB         swp b
5318   2522 D8            push b
5319   2523 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5320   2526 58 00 00      add d, 0
5321   2529 2D            mov b, d
5322   252A 38 00 00      mov c, 0
5323   252D FD AB         swp b
5324   252F D8            push b
5325   2530 07 83 4B      call strcpy
5326   2533 51 04 00      add sp, 4
5327   2536             ; --- END FUNCTION CALL
5328   2536             ; while(*tbl_p == ' ') tbl_p++; 
5329   2536             _while139_cond:
5330   2536 FA DE FF      lea d, [bp + -34] ; $tbl_p
5331   2539 2A            mov b, [d]
5332   253A 38 00 00      mov c, 0
5333   253D 74            mov d, b
5334   253E 32            mov bl, [d]
5335   253F A7 00         mov bh, 0
5336   2541 38 00 00      mov c, 0
5337   2544             ; --- START RELATIONAL
5338   2544 D7            push a
5339   2545 11            mov a, b
5340   2546 FD 2E 20 00   mov32 cb, $00000020
5340   254A 00 00 
5341   254C B0            cmp a, b
5342   254D FD 71         seq ; ==
5343   254F E4            pop a
5344   2550             ; --- END RELATIONAL
5345   2550 C0 00 00      cmp b, 0
5346   2553 C6 69 25      je _while139_exit
5347   2556             _while139_block:
5348   2556             ; tbl_p++; 
5349   2556 FA DE FF      lea d, [bp + -34] ; $tbl_p
5350   2559 2A            mov b, [d]
5351   255A 38 00 00      mov c, 0
5352   255D FD 77         inc b
5353   255F FA DE FF      lea d, [bp + -34] ; $tbl_p
5354   2562 FD 43         mov [d], b
5355   2564 FD 7D         dec b
5356   2566 0A 36 25      jmp _while139_cond
5357   2569             _while139_exit:
5358   2569             ; while(is_hex_digit(*tbl_p)) *hex_p++ = *tbl_p++; // Copy hex opcode 
5359   2569             _while140_cond:
5360   2569             ; --- START FUNCTION CALL
5361   2569 FA DE FF      lea d, [bp + -34] ; $tbl_p
5362   256C 2A            mov b, [d]
5363   256D 38 00 00      mov c, 0
5364   2570 74            mov d, b
5365   2571 32            mov bl, [d]
5366   2572 A7 00         mov bh, 0
5367   2574 38 00 00      mov c, 0
5368   2577 DD            push bl
5369   2578 07 A9 29      call is_hex_digit
5370   257B 51 01 00      add sp, 1
5371   257E             ; --- END FUNCTION CALL
5372   257E C0 00 00      cmp b, 0
5373   2581 C6 B2 25      je _while140_exit
5374   2584             _while140_block:
5375   2584             ; *hex_p++ = *tbl_p++; // Copy hex opcode 
5376   2584 FA E2 FF      lea d, [bp + -30] ; $hex_p
5377   2587 2A            mov b, [d]
5378   2588 38 00 00      mov c, 0
5379   258B FD 77         inc b
5380   258D FA E2 FF      lea d, [bp + -30] ; $hex_p
5381   2590 FD 43         mov [d], b
5382   2592 FD 7D         dec b
5383   2594 D8            push b
5384   2595 FA DE FF      lea d, [bp + -34] ; $tbl_p
5385   2598 2A            mov b, [d]
5386   2599 38 00 00      mov c, 0
5387   259C FD 77         inc b
5388   259E FA DE FF      lea d, [bp + -34] ; $tbl_p
5389   25A1 FD 43         mov [d], b
5390   25A3 FD 7D         dec b
5391   25A5 74            mov d, b
5392   25A6 32            mov bl, [d]
5393   25A7 A7 00         mov bh, 0
5394   25A9 38 00 00      mov c, 0
5395   25AC E7            pop d
5396   25AD FD 3E         mov [d], bl
5397   25AF 0A 69 25      jmp _while140_cond
5398   25B2             _while140_exit:
5399   25B2             ; *hex_p = '\0'; 
5400   25B2 FA E2 FF      lea d, [bp + -30] ; $hex_p
5401   25B5 2A            mov b, [d]
5402   25B6 38 00 00      mov c, 0
5403   25B9 D8            push b
5404   25BA FD 2E 00 00   mov32 cb, $00000000
5404   25BE 00 00 
5405   25C0 E7            pop d
5406   25C1 FD 3E         mov [d], bl
5407   25C3             ; if(strlen(opcode_hex) == 4){ 
5408   25C3             _if141_cond:
5409   25C3             ; --- START FUNCTION CALL
5410   25C3 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5411   25C6 2D            mov b, d
5412   25C7 38 00 00      mov c, 0
5413   25CA FD AB         swp b
5414   25CC D8            push b
5415   25CD 07 3A 40      call strlen
5416   25D0 51 02 00      add sp, 2
5417   25D3             ; --- END FUNCTION CALL
5418   25D3             ; --- START RELATIONAL
5419   25D3 D7            push a
5420   25D4 11            mov a, b
5421   25D5 FD 2E 04 00   mov32 cb, $00000004
5421   25D9 00 00 
5422   25DB B0            cmp a, b
5423   25DC FD 71         seq ; ==
5424   25DE E4            pop a
5425   25DF             ; --- END RELATIONAL
5426   25DF C0 00 00      cmp b, 0
5427   25E2 C6 2D 26      je _if141_else
5428   25E5             _if141_TRUE:
5429   25E5             ; return_opcode.opcode_type = 1; 
5430   25E5 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5431   25E8 58 19 00      add d, 25
5432   25EB DA            push d
5433   25EC FD 2E 01 00   mov32 cb, $00000001
5433   25F0 00 00 
5434   25F2 E7            pop d
5435   25F3 FD 3E         mov [d], bl
5436   25F5             ; *(opcode_hex + 2) = '\0'; 
5437   25F5 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5438   25F8 2D            mov b, d
5439   25F9 38 00 00      mov c, 0
5440   25FC             ; --- START TERMS
5441   25FC D7            push a
5442   25FD 11            mov a, b
5443   25FE FD 2E 02 00   mov32 cb, $00000002
5443   2602 00 00 
5444   2604 56            add b, a
5445   2605 E4            pop a
5446   2606             ; --- END TERMS
5447   2606 D8            push b
5448   2607 FD 2E 00 00   mov32 cb, $00000000
5448   260B 00 00 
5449   260D E7            pop d
5450   260E FD 43         mov [d], b
5451   2610             ; return_opcode.opcode = hex_to_int(opcode_hex); 
5452   2610 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5453   2613 58 18 00      add d, 24
5454   2616 DA            push d
5455   2617             ; --- START FUNCTION CALL
5456   2617 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5457   261A 2D            mov b, d
5458   261B 38 00 00      mov c, 0
5459   261E FD AB         swp b
5460   2620 D8            push b
5461   2621 07 27 3B      call hex_to_int
5462   2624 51 02 00      add sp, 2
5463   2627             ; --- END FUNCTION CALL
5464   2627 E7            pop d
5465   2628 FD 3E         mov [d], bl
5466   262A 0A 57 26      jmp _if141_exit
5467   262D             _if141_else:
5468   262D             ; return_opcode.opcode_type = 0; 
5469   262D FA C4 FF      lea d, [bp + -60] ; $return_opcode
5470   2630 58 19 00      add d, 25
5471   2633 DA            push d
5472   2634 FD 2E 00 00   mov32 cb, $00000000
5472   2638 00 00 
5473   263A E7            pop d
5474   263B FD 3E         mov [d], bl
5475   263D             ; return_opcode.opcode = hex_to_int(opcode_hex); 
5476   263D FA C4 FF      lea d, [bp + -60] ; $return_opcode
5477   2640 58 18 00      add d, 24
5478   2643 DA            push d
5479   2644             ; --- START FUNCTION CALL
5480   2644 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5481   2647 2D            mov b, d
5482   2648 38 00 00      mov c, 0
5483   264B FD AB         swp b
5484   264D D8            push b
5485   264E 07 27 3B      call hex_to_int
5486   2651 51 02 00      add sp, 2
5487   2654             ; --- END FUNCTION CALL
5488   2654 E7            pop d
5489   2655 FD 3E         mov [d], bl
5490   2657             _if141_exit:
5491   2657             ; return return_opcode; 
5492   2657 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5493   265A 2D            mov b, d
5494   265B 38 00 00      mov c, 0
5495   265E F9            leave
5496   265F 09            ret
5497   2660 0A E8 26      jmp _if138_exit
5498   2663             _if138_else:
5499   2663             ; while(*tbl_p != '\n') tbl_p++; 
5500   2663             _while142_cond:
5501   2663 FA DE FF      lea d, [bp + -34] ; $tbl_p
5502   2666 2A            mov b, [d]
5503   2667 38 00 00      mov c, 0
5504   266A 74            mov d, b
5505   266B 32            mov bl, [d]
5506   266C A7 00         mov bh, 0
5507   266E 38 00 00      mov c, 0
5508   2671             ; --- START RELATIONAL
5509   2671 D7            push a
5510   2672 11            mov a, b
5511   2673 FD 2E 0A 00   mov32 cb, $0000000a
5511   2677 00 00 
5512   2679 B0            cmp a, b
5513   267A FD 72         sneq ; !=
5514   267C E4            pop a
5515   267D             ; --- END RELATIONAL
5516   267D C0 00 00      cmp b, 0
5517   2680 C6 96 26      je _while142_exit
5518   2683             _while142_block:
5519   2683             ; tbl_p++; 
5520   2683 FA DE FF      lea d, [bp + -34] ; $tbl_p
5521   2686 2A            mov b, [d]
5522   2687 38 00 00      mov c, 0
5523   268A FD 77         inc b
5524   268C FA DE FF      lea d, [bp + -34] ; $tbl_p
5525   268F FD 43         mov [d], b
5526   2691 FD 7D         dec b
5527   2693 0A 63 26      jmp _while142_cond
5528   2696             _while142_exit:
5529   2696             ; while(*tbl_p == '\n') tbl_p++; 
5530   2696             _while143_cond:
5531   2696 FA DE FF      lea d, [bp + -34] ; $tbl_p
5532   2699 2A            mov b, [d]
5533   269A 38 00 00      mov c, 0
5534   269D 74            mov d, b
5535   269E 32            mov bl, [d]
5536   269F A7 00         mov bh, 0
5537   26A1 38 00 00      mov c, 0
5538   26A4             ; --- START RELATIONAL
5539   26A4 D7            push a
5540   26A5 11            mov a, b
5541   26A6 FD 2E 0A 00   mov32 cb, $0000000a
5541   26AA 00 00 
5542   26AC B0            cmp a, b
5543   26AD FD 71         seq ; ==
5544   26AF E4            pop a
5545   26B0             ; --- END RELATIONAL
5546   26B0 C0 00 00      cmp b, 0
5547   26B3 C6 C9 26      je _while143_exit
5548   26B6             _while143_block:
5549   26B6             ; tbl_p++; 
5550   26B6 FA DE FF      lea d, [bp + -34] ; $tbl_p
5551   26B9 2A            mov b, [d]
5552   26BA 38 00 00      mov c, 0
5553   26BD FD 77         inc b
5554   26BF FA DE FF      lea d, [bp + -34] ; $tbl_p
5555   26C2 FD 43         mov [d], b
5556   26C4 FD 7D         dec b
5557   26C6 0A 96 26      jmp _while143_cond
5558   26C9             _while143_exit:
5559   26C9             ; if(!*tbl_p) break; 
5560   26C9             _if144_cond:
5561   26C9 FA DE FF      lea d, [bp + -34] ; $tbl_p
5562   26CC 2A            mov b, [d]
5563   26CD 38 00 00      mov c, 0
5564   26D0 74            mov d, b
5565   26D1 32            mov bl, [d]
5566   26D2 A7 00         mov bh, 0
5567   26D4 38 00 00      mov c, 0
5568   26D7 C0 00 00      cmp b, 0
5569   26DA FD 71         seq ; !
5570   26DC C0 00 00      cmp b, 0
5571   26DF C6 E8 26      je _if144_exit
5572   26E2             _if144_TRUE:
5573   26E2             ; break; 
5574   26E2 0A EB 26      jmp _for135_exit ; for break
5575   26E5 0A E8 26      jmp _if144_exit
5576   26E8             _if144_exit:
5577   26E8             _if138_exit:
5578   26E8             _for135_update:
5579   26E8 0A 05 24      jmp _for135_cond
5580   26EB             _for135_exit:
5581   26EB             ; return_opcode.name[0] = '\0'; 
5582   26EB FA C4 FF      lea d, [bp + -60] ; $return_opcode
5583   26EE 58 00 00      add d, 0
5584   26F1 D7            push a
5585   26F2 DA            push d
5586   26F3 FD 2E 00 00   mov32 cb, $00000000
5586   26F7 00 00 
5587   26F9 E7            pop d
5588   26FA 5A            add d, b
5589   26FB E4            pop a
5590   26FC DA            push d
5591   26FD FD 2E 00 00   mov32 cb, $00000000
5591   2701 00 00 
5592   2703 E7            pop d
5593   2704 FD 3E         mov [d], bl
5594   2706             ; return return_opcode; 
5595   2706 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5596   2709 2D            mov b, d
5597   270A 38 00 00      mov c, 0
5598   270D F9            leave
5599   270E 09            ret
5600   270F             
5601   270F             forwards:
5602   270F F8 00 00      enter 0 ; (push bp; mov bp, sp)
5603   2712             ; bin_p = bin_p + amount; 
5604   2712 3B AB 4F      mov d, _bin_p ; $bin_p
5605   2715 DA            push d
5606   2716 3B AB 4F      mov d, _bin_p ; $bin_p
5607   2719 2A            mov b, [d]
5608   271A 38 00 00      mov c, 0
5609   271D             ; --- START TERMS
5610   271D D7            push a
5611   271E 11            mov a, b
5612   271F FA 05 00      lea d, [bp + 5] ; $amount
5613   2722 32            mov bl, [d]
5614   2723 A7 00         mov bh, 0
5615   2725 38 00 00      mov c, 0
5616   2728 56            add b, a
5617   2729 E4            pop a
5618   272A             ; --- END TERMS
5619   272A E7            pop d
5620   272B FD 43         mov [d], b
5621   272D             ; prog_size = prog_size + amount; 
5622   272D 3B C5 4F      mov d, _prog_size ; $prog_size
5623   2730 DA            push d
5624   2731 3B C5 4F      mov d, _prog_size ; $prog_size
5625   2734 2A            mov b, [d]
5626   2735 38 00 00      mov c, 0
5627   2738             ; --- START TERMS
5628   2738 D7            push a
5629   2739 11            mov a, b
5630   273A FA 05 00      lea d, [bp + 5] ; $amount
5631   273D 32            mov bl, [d]
5632   273E A7 00         mov bh, 0
5633   2740 38 00 00      mov c, 0
5634   2743 56            add b, a
5635   2744 E4            pop a
5636   2745             ; --- END TERMS
5637   2745 E7            pop d
5638   2746 FD 43         mov [d], b
5639   2748             ; pc = pc + amount; 
5640   2748 3B 5C 4E      mov d, _pc ; $pc
5641   274B DA            push d
5642   274C 3B 5C 4E      mov d, _pc ; $pc
5643   274F 2A            mov b, [d]
5644   2750 38 00 00      mov c, 0
5645   2753             ; --- START TERMS
5646   2753 D7            push a
5647   2754 11            mov a, b
5648   2755 FA 05 00      lea d, [bp + 5] ; $amount
5649   2758 32            mov bl, [d]
5650   2759 A7 00         mov bh, 0
5651   275B 38 00 00      mov c, 0
5652   275E 56            add b, a
5653   275F E4            pop a
5654   2760             ; --- END TERMS
5655   2760 E7            pop d
5656   2761 FD 43         mov [d], b
5657   2763 F9            leave
5658   2764 09            ret
5659   2765             
5660   2765             emit_byte:
5661   2765 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5662   2768             ; if(!emit_override){ 
5663   2768             _if145_cond:
5664   2768 FA 06 00      lea d, [bp + 6] ; $emit_override
5665   276B 32            mov bl, [d]
5666   276C A7 00         mov bh, 0
5667   276E 38 00 00      mov c, 0
5668   2771 C0 00 00      cmp b, 0
5669   2774 C6 8E 27      je _if145_exit
5670   2777             _if145_TRUE:
5671   2777             ; *bin_p = byte; 
5672   2777 3B AB 4F      mov d, _bin_p ; $bin_p
5673   277A 2A            mov b, [d]
5674   277B 38 00 00      mov c, 0
5675   277E D8            push b
5676   277F FA 05 00      lea d, [bp + 5] ; $byte
5677   2782 32            mov bl, [d]
5678   2783 A7 00         mov bh, 0
5679   2785 38 00 00      mov c, 0
5680   2788 E7            pop d
5681   2789 FD 3E         mov [d], bl
5682   278B 0A 8E 27      jmp _if145_exit
5683   278E             _if145_exit:
5684   278E             ; forwards(1); 
5685   278E             ; --- START FUNCTION CALL
5686   278E FD 2E 01 00   mov32 cb, $00000001
5686   2792 00 00 
5687   2794 DD            push bl
5688   2795 07 0F 27      call forwards
5689   2798 51 01 00      add sp, 1
5690   279B             ; --- END FUNCTION CALL
5691   279B F9            leave
5692   279C 09            ret
5693   279D             
5694   279D             emit_word:
5695   279D F8 00 00      enter 0 ; (push bp; mov bp, sp)
5696   27A0             ; if(!emit_override){ 
5697   27A0             _if146_cond:
5698   27A0 FA 07 00      lea d, [bp + 7] ; $emit_override
5699   27A3 32            mov bl, [d]
5700   27A4 A7 00         mov bh, 0
5701   27A6 38 00 00      mov c, 0
5702   27A9 C0 00 00      cmp b, 0
5703   27AC C6 C4 27      je _if146_exit
5704   27AF             _if146_TRUE:
5705   27AF             ; *((int*)bin_p) = word; 
5706   27AF 3B AB 4F      mov d, _bin_p ; $bin_p
5707   27B2 2A            mov b, [d]
5708   27B3 38 00 00      mov c, 0
5709   27B6 D8            push b
5710   27B7 FA 05 00      lea d, [bp + 5] ; $word
5711   27BA 2A            mov b, [d]
5712   27BB 38 00 00      mov c, 0
5713   27BE E7            pop d
5714   27BF FD 43         mov [d], b
5715   27C1 0A C4 27      jmp _if146_exit
5716   27C4             _if146_exit:
5717   27C4             ; forwards(2); 
5718   27C4             ; --- START FUNCTION CALL
5719   27C4 FD 2E 02 00   mov32 cb, $00000002
5719   27C8 00 00 
5720   27CA DD            push bl
5721   27CB 07 0F 27      call forwards
5722   27CE 51 01 00      add sp, 1
5723   27D1             ; --- END FUNCTION CALL
5724   27D1 F9            leave
5725   27D2 09            ret
5726   27D3             
5727   27D3             back:
5728   27D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5729   27D6             ; char *t; 
5730   27D6 52 02 00      sub sp, 2
5731   27D9             ; t = token; 
5732   27D9 FA FF FF      lea d, [bp + -1] ; $t
5733   27DC DA            push d
5734   27DD 3B 65 4E      mov d, _token_data ; $token
5735   27E0 2D            mov b, d
5736   27E1 38 00 00      mov c, 0
5737   27E4 E7            pop d
5738   27E5 FD 43         mov [d], b
5739   27E7             ; while(*t){ 
5740   27E7             _while147_cond:
5741   27E7 FA FF FF      lea d, [bp + -1] ; $t
5742   27EA 2A            mov b, [d]
5743   27EB 38 00 00      mov c, 0
5744   27EE 74            mov d, b
5745   27EF 32            mov bl, [d]
5746   27F0 A7 00         mov bh, 0
5747   27F2 38 00 00      mov c, 0
5748   27F5 C0 00 00      cmp b, 0
5749   27F8 C6 1E 28      je _while147_exit
5750   27FB             _while147_block:
5751   27FB             ; prog--; 
5752   27FB 3B 63 4E      mov d, _prog ; $prog
5753   27FE 2A            mov b, [d]
5754   27FF 38 00 00      mov c, 0
5755   2802 FD 7D         dec b
5756   2804 3B 63 4E      mov d, _prog ; $prog
5757   2807 FD 43         mov [d], b
5758   2809 FD 77         inc b
5759   280B             ; t++; 
5760   280B FA FF FF      lea d, [bp + -1] ; $t
5761   280E 2A            mov b, [d]
5762   280F 38 00 00      mov c, 0
5763   2812 FD 77         inc b
5764   2814 FA FF FF      lea d, [bp + -1] ; $t
5765   2817 FD 43         mov [d], b
5766   2819 FD 7D         dec b
5767   281B 0A E7 27      jmp _while147_cond
5768   281E             _while147_exit:
5769   281E F9            leave
5770   281F 09            ret
5771   2820             
5772   2820             get_path:
5773   2820 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5774   2823             ; char *t; 
5775   2823 52 02 00      sub sp, 2
5776   2826             ; *token = '\0'; 
5777   2826 3B 65 4E      mov d, _token_data ; $token
5778   2829 2D            mov b, d
5779   282A 38 00 00      mov c, 0
5780   282D D8            push b
5781   282E FD 2E 00 00   mov32 cb, $00000000
5781   2832 00 00 
5782   2834 E7            pop d
5783   2835 FD 3E         mov [d], bl
5784   2837             ; tok = 0; 
5785   2837 3B 5F 4E      mov d, _tok ; $tok
5786   283A DA            push d
5787   283B FD 2E 00 00   mov32 cb, $00000000
5787   283F 00 00 
5788   2841 E7            pop d
5789   2842 FD 43         mov [d], b
5790   2844             ; toktype = 0; 
5791   2844 3B 61 4E      mov d, _toktype ; $toktype
5792   2847 DA            push d
5793   2848 FD 2E 00 00   mov32 cb, $00000000
5793   284C 00 00 
5794   284E E7            pop d
5795   284F FD 43         mov [d], b
5796   2851             ; t = token; 
5797   2851 FA FF FF      lea d, [bp + -1] ; $t
5798   2854 DA            push d
5799   2855 3B 65 4E      mov d, _token_data ; $token
5800   2858 2D            mov b, d
5801   2859 38 00 00      mov c, 0
5802   285C E7            pop d
5803   285D FD 43         mov [d], b
5804   285F             ; while(is_space(*prog)) prog++; 
5805   285F             _while148_cond:
5806   285F             ; --- START FUNCTION CALL
5807   285F 3B 63 4E      mov d, _prog ; $prog
5808   2862 2A            mov b, [d]
5809   2863 38 00 00      mov c, 0
5810   2866 74            mov d, b
5811   2867 32            mov bl, [d]
5812   2868 A7 00         mov bh, 0
5813   286A 38 00 00      mov c, 0
5814   286D DD            push bl
5815   286E 07 9E 3E      call is_space
5816   2871 51 01 00      add sp, 1
5817   2874             ; --- END FUNCTION CALL
5818   2874 C0 00 00      cmp b, 0
5819   2877 C6 8D 28      je _while148_exit
5820   287A             _while148_block:
5821   287A             ; prog++; 
5822   287A 3B 63 4E      mov d, _prog ; $prog
5823   287D 2A            mov b, [d]
5824   287E 38 00 00      mov c, 0
5825   2881 FD 77         inc b
5826   2883 3B 63 4E      mov d, _prog ; $prog
5827   2886 FD 43         mov [d], b
5828   2888 FD 7D         dec b
5829   288A 0A 5F 28      jmp _while148_cond
5830   288D             _while148_exit:
5831   288D             ; if(*prog == '\0'){ 
5832   288D             _if149_cond:
5833   288D 3B 63 4E      mov d, _prog ; $prog
5834   2890 2A            mov b, [d]
5835   2891 38 00 00      mov c, 0
5836   2894 74            mov d, b
5837   2895 32            mov bl, [d]
5838   2896 A7 00         mov bh, 0
5839   2898 38 00 00      mov c, 0
5840   289B             ; --- START RELATIONAL
5841   289B D7            push a
5842   289C 11            mov a, b
5843   289D FD 2E 00 00   mov32 cb, $00000000
5843   28A1 00 00 
5844   28A3 B0            cmp a, b
5845   28A4 FD 71         seq ; ==
5846   28A6 E4            pop a
5847   28A7             ; --- END RELATIONAL
5848   28A7 C0 00 00      cmp b, 0
5849   28AA C6 BF 28      je _if149_exit
5850   28AD             _if149_TRUE:
5851   28AD             ; toktype = END; 
5852   28AD 3B 61 4E      mov d, _toktype ; $toktype
5853   28B0 DA            push d
5854   28B1 FD 2E 07 00   mov32 cb, $7 ; enum element: END
5854   28B5 00 00 
5855   28B7 E7            pop d
5856   28B8 FD 43         mov [d], b
5857   28BA             ; return; 
5858   28BA F9            leave
5859   28BB 09            ret
5860   28BC 0A BF 28      jmp _if149_exit
5861   28BF             _if149_exit:
5862   28BF             ; while(*prog == '/' || is_alpha(*prog) || is_digit(*prog) || *prog == '_' || *prog == '-' || *prog == '.') { 
5863   28BF             _while150_cond:
5864   28BF 3B 63 4E      mov d, _prog ; $prog
5865   28C2 2A            mov b, [d]
5866   28C3 38 00 00      mov c, 0
5867   28C6 74            mov d, b
5868   28C7 32            mov bl, [d]
5869   28C8 A7 00         mov bh, 0
5870   28CA 38 00 00      mov c, 0
5871   28CD             ; --- START RELATIONAL
5872   28CD D7            push a
5873   28CE 11            mov a, b
5874   28CF FD 2E 2F 00   mov32 cb, $0000002f
5874   28D3 00 00 
5875   28D5 B0            cmp a, b
5876   28D6 FD 71         seq ; ==
5877   28D8 E4            pop a
5878   28D9             ; --- END RELATIONAL
5879   28D9             ; --- START LOGICAL OR
5880   28D9 D7            push a
5881   28DA 11            mov a, b
5882   28DB             ; --- START FUNCTION CALL
5883   28DB 3B 63 4E      mov d, _prog ; $prog
5884   28DE 2A            mov b, [d]
5885   28DF 38 00 00      mov c, 0
5886   28E2 74            mov d, b
5887   28E3 32            mov bl, [d]
5888   28E4 A7 00         mov bh, 0
5889   28E6 38 00 00      mov c, 0
5890   28E9 DD            push bl
5891   28EA 07 02 3F      call is_alpha
5892   28ED 51 01 00      add sp, 1
5893   28F0             ; --- END FUNCTION CALL
5894   28F0 FD A8         sor a, b ; ||
5895   28F2 11            mov a, b
5896   28F3             ; --- START FUNCTION CALL
5897   28F3 3B 63 4E      mov d, _prog ; $prog
5898   28F6 2A            mov b, [d]
5899   28F7 38 00 00      mov c, 0
5900   28FA 74            mov d, b
5901   28FB 32            mov bl, [d]
5902   28FC A7 00         mov bh, 0
5903   28FE 38 00 00      mov c, 0
5904   2901 DD            push bl
5905   2902 07 82 3F      call is_digit
5906   2905 51 01 00      add sp, 1
5907   2908             ; --- END FUNCTION CALL
5908   2908 FD A8         sor a, b ; ||
5909   290A 11            mov a, b
5910   290B 3B 63 4E      mov d, _prog ; $prog
5911   290E 2A            mov b, [d]
5912   290F 38 00 00      mov c, 0
5913   2912 74            mov d, b
5914   2913 32            mov bl, [d]
5915   2914 A7 00         mov bh, 0
5916   2916 38 00 00      mov c, 0
5917   2919             ; --- START RELATIONAL
5918   2919 D7            push a
5919   291A 11            mov a, b
5920   291B FD 2E 5F 00   mov32 cb, $0000005f
5920   291F 00 00 
5921   2921 B0            cmp a, b
5922   2922 FD 71         seq ; ==
5923   2924 E4            pop a
5924   2925             ; --- END RELATIONAL
5925   2925 FD A8         sor a, b ; ||
5926   2927 11            mov a, b
5927   2928 3B 63 4E      mov d, _prog ; $prog
5928   292B 2A            mov b, [d]
5929   292C 38 00 00      mov c, 0
5930   292F 74            mov d, b
5931   2930 32            mov bl, [d]
5932   2931 A7 00         mov bh, 0
5933   2933 38 00 00      mov c, 0
5934   2936             ; --- START RELATIONAL
5935   2936 D7            push a
5936   2937 11            mov a, b
5937   2938 FD 2E 2D 00   mov32 cb, $0000002d
5937   293C 00 00 
5938   293E B0            cmp a, b
5939   293F FD 71         seq ; ==
5940   2941 E4            pop a
5941   2942             ; --- END RELATIONAL
5942   2942 FD A8         sor a, b ; ||
5943   2944 11            mov a, b
5944   2945 3B 63 4E      mov d, _prog ; $prog
5945   2948 2A            mov b, [d]
5946   2949 38 00 00      mov c, 0
5947   294C 74            mov d, b
5948   294D 32            mov bl, [d]
5949   294E A7 00         mov bh, 0
5950   2950 38 00 00      mov c, 0
5951   2953             ; --- START RELATIONAL
5952   2953 D7            push a
5953   2954 11            mov a, b
5954   2955 FD 2E 2E 00   mov32 cb, $0000002e
5954   2959 00 00 
5955   295B B0            cmp a, b
5956   295C FD 71         seq ; ==
5957   295E E4            pop a
5958   295F             ; --- END RELATIONAL
5959   295F FD A8         sor a, b ; ||
5960   2961 E4            pop a
5961   2962             ; --- END LOGICAL OR
5962   2962 C0 00 00      cmp b, 0
5963   2965 C6 96 29      je _while150_exit
5964   2968             _while150_block:
5965   2968             ; *t++ = *prog++; 
5966   2968 FA FF FF      lea d, [bp + -1] ; $t
5967   296B 2A            mov b, [d]
5968   296C 38 00 00      mov c, 0
5969   296F FD 77         inc b
5970   2971 FA FF FF      lea d, [bp + -1] ; $t
5971   2974 FD 43         mov [d], b
5972   2976 FD 7D         dec b
5973   2978 D8            push b
5974   2979 3B 63 4E      mov d, _prog ; $prog
5975   297C 2A            mov b, [d]
5976   297D 38 00 00      mov c, 0
5977   2980 FD 77         inc b
5978   2982 3B 63 4E      mov d, _prog ; $prog
5979   2985 FD 43         mov [d], b
5980   2987 FD 7D         dec b
5981   2989 74            mov d, b
5982   298A 32            mov bl, [d]
5983   298B A7 00         mov bh, 0
5984   298D 38 00 00      mov c, 0
5985   2990 E7            pop d
5986   2991 FD 3E         mov [d], bl
5987   2993 0A BF 28      jmp _while150_cond
5988   2996             _while150_exit:
5989   2996             ; *t = '\0'; 
5990   2996 FA FF FF      lea d, [bp + -1] ; $t
5991   2999 2A            mov b, [d]
5992   299A 38 00 00      mov c, 0
5993   299D D8            push b
5994   299E FD 2E 00 00   mov32 cb, $00000000
5994   29A2 00 00 
5995   29A4 E7            pop d
5996   29A5 FD 3E         mov [d], bl
5997   29A7 F9            leave
5998   29A8 09            ret
5999   29A9             
6000   29A9             is_hex_digit:
6001   29A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6002   29AC             ; return c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f'; 
6003   29AC FA 05 00      lea d, [bp + 5] ; $c
6004   29AF 32            mov bl, [d]
6005   29B0 A7 00         mov bh, 0
6006   29B2 38 00 00      mov c, 0
6007   29B5             ; --- START RELATIONAL
6008   29B5 D7            push a
6009   29B6 11            mov a, b
6010   29B7 FD 2E 30 00   mov32 cb, $00000030
6010   29BB 00 00 
6011   29BD B0            cmp a, b
6012   29BE FD 80         sge ; >=
6013   29C0 E4            pop a
6014   29C1             ; --- END RELATIONAL
6015   29C1             ; --- START LOGICAL AND
6016   29C1 D7            push a
6017   29C2 11            mov a, b
6018   29C3 FA 05 00      lea d, [bp + 5] ; $c
6019   29C6 32            mov bl, [d]
6020   29C7 A7 00         mov bh, 0
6021   29C9 38 00 00      mov c, 0
6022   29CC             ; --- START RELATIONAL
6023   29CC D7            push a
6024   29CD 11            mov a, b
6025   29CE FD 2E 39 00   mov32 cb, $00000039
6025   29D2 00 00 
6026   29D4 B0            cmp a, b
6027   29D5 FD 74         sle ; <= (signed)
6028   29D7 E4            pop a
6029   29D8             ; --- END RELATIONAL
6030   29D8 FD A7         sand a, b
6031   29DA E4            pop a
6032   29DB             ; --- END LOGICAL AND
6033   29DB             ; --- START LOGICAL OR
6034   29DB D7            push a
6035   29DC 11            mov a, b
6036   29DD FA 05 00      lea d, [bp + 5] ; $c
6037   29E0 32            mov bl, [d]
6038   29E1 A7 00         mov bh, 0
6039   29E3 38 00 00      mov c, 0
6040   29E6             ; --- START RELATIONAL
6041   29E6 D7            push a
6042   29E7 11            mov a, b
6043   29E8 FD 2E 41 00   mov32 cb, $00000041
6043   29EC 00 00 
6044   29EE B0            cmp a, b
6045   29EF FD 80         sge ; >=
6046   29F1 E4            pop a
6047   29F2             ; --- END RELATIONAL
6048   29F2             ; --- START LOGICAL AND
6049   29F2 D7            push a
6050   29F3 11            mov a, b
6051   29F4 FA 05 00      lea d, [bp + 5] ; $c
6052   29F7 32            mov bl, [d]
6053   29F8 A7 00         mov bh, 0
6054   29FA 38 00 00      mov c, 0
6055   29FD             ; --- START RELATIONAL
6056   29FD D7            push a
6057   29FE 11            mov a, b
6058   29FF FD 2E 46 00   mov32 cb, $00000046
6058   2A03 00 00 
6059   2A05 B0            cmp a, b
6060   2A06 FD 74         sle ; <= (signed)
6061   2A08 E4            pop a
6062   2A09             ; --- END RELATIONAL
6063   2A09 FD A7         sand a, b
6064   2A0B E4            pop a
6065   2A0C             ; --- END LOGICAL AND
6066   2A0C FD A8         sor a, b ; ||
6067   2A0E 11            mov a, b
6068   2A0F FA 05 00      lea d, [bp + 5] ; $c
6069   2A12 32            mov bl, [d]
6070   2A13 A7 00         mov bh, 0
6071   2A15 38 00 00      mov c, 0
6072   2A18             ; --- START RELATIONAL
6073   2A18 D7            push a
6074   2A19 11            mov a, b
6075   2A1A FD 2E 61 00   mov32 cb, $00000061
6075   2A1E 00 00 
6076   2A20 B0            cmp a, b
6077   2A21 FD 80         sge ; >=
6078   2A23 E4            pop a
6079   2A24             ; --- END RELATIONAL
6080   2A24             ; --- START LOGICAL AND
6081   2A24 D7            push a
6082   2A25 11            mov a, b
6083   2A26 FA 05 00      lea d, [bp + 5] ; $c
6084   2A29 32            mov bl, [d]
6085   2A2A A7 00         mov bh, 0
6086   2A2C 38 00 00      mov c, 0
6087   2A2F             ; --- START RELATIONAL
6088   2A2F D7            push a
6089   2A30 11            mov a, b
6090   2A31 FD 2E 66 00   mov32 cb, $00000066
6090   2A35 00 00 
6091   2A37 B0            cmp a, b
6092   2A38 FD 74         sle ; <= (signed)
6093   2A3A E4            pop a
6094   2A3B             ; --- END RELATIONAL
6095   2A3B FD A7         sand a, b
6096   2A3D E4            pop a
6097   2A3E             ; --- END LOGICAL AND
6098   2A3E FD A8         sor a, b ; ||
6099   2A40 E4            pop a
6100   2A41             ; --- END LOGICAL OR
6101   2A41 F9            leave
6102   2A42 09            ret
6103   2A43             
6104   2A43             get_line:
6105   2A43 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6106   2A46             ; char *t; 
6107   2A46 52 02 00      sub sp, 2
6108   2A49             ; t = string_const; 
6109   2A49 FA FF FF      lea d, [bp + -1] ; $t
6110   2A4C DA            push d
6111   2A4D 3B A5 4E      mov d, _string_const_data ; $string_const
6112   2A50 2D            mov b, d
6113   2A51 38 00 00      mov c, 0
6114   2A54 E7            pop d
6115   2A55 FD 43         mov [d], b
6116   2A57             ; *t = '\0'; 
6117   2A57 FA FF FF      lea d, [bp + -1] ; $t
6118   2A5A 2A            mov b, [d]
6119   2A5B 38 00 00      mov c, 0
6120   2A5E D8            push b
6121   2A5F FD 2E 00 00   mov32 cb, $00000000
6121   2A63 00 00 
6122   2A65 E7            pop d
6123   2A66 FD 3E         mov [d], bl
6124   2A68             ; while(*prog != 0x0A && *prog != '\0'){ 
6125   2A68             _while151_cond:
6126   2A68 3B 63 4E      mov d, _prog ; $prog
6127   2A6B 2A            mov b, [d]
6128   2A6C 38 00 00      mov c, 0
6129   2A6F 74            mov d, b
6130   2A70 32            mov bl, [d]
6131   2A71 A7 00         mov bh, 0
6132   2A73 38 00 00      mov c, 0
6133   2A76             ; --- START RELATIONAL
6134   2A76 D7            push a
6135   2A77 11            mov a, b
6136   2A78 FD 2E 0A 00   mov32 cb, $0000000a
6136   2A7C 00 00 
6137   2A7E B0            cmp a, b
6138   2A7F FD 72         sneq ; !=
6139   2A81 E4            pop a
6140   2A82             ; --- END RELATIONAL
6141   2A82             ; --- START LOGICAL AND
6142   2A82 D7            push a
6143   2A83 11            mov a, b
6144   2A84 3B 63 4E      mov d, _prog ; $prog
6145   2A87 2A            mov b, [d]
6146   2A88 38 00 00      mov c, 0
6147   2A8B 74            mov d, b
6148   2A8C 32            mov bl, [d]
6149   2A8D A7 00         mov bh, 0
6150   2A8F 38 00 00      mov c, 0
6151   2A92             ; --- START RELATIONAL
6152   2A92 D7            push a
6153   2A93 11            mov a, b
6154   2A94 FD 2E 00 00   mov32 cb, $00000000
6154   2A98 00 00 
6155   2A9A B0            cmp a, b
6156   2A9B FD 72         sneq ; !=
6157   2A9D E4            pop a
6158   2A9E             ; --- END RELATIONAL
6159   2A9E FD A7         sand a, b
6160   2AA0 E4            pop a
6161   2AA1             ; --- END LOGICAL AND
6162   2AA1 C0 00 00      cmp b, 0
6163   2AA4 C6 4D 2B      je _while151_exit
6164   2AA7             _while151_block:
6165   2AA7             ; if(*prog == ';'){ 
6166   2AA7             _if152_cond:
6167   2AA7 3B 63 4E      mov d, _prog ; $prog
6168   2AAA 2A            mov b, [d]
6169   2AAB 38 00 00      mov c, 0
6170   2AAE 74            mov d, b
6171   2AAF 32            mov bl, [d]
6172   2AB0 A7 00         mov bh, 0
6173   2AB2 38 00 00      mov c, 0
6174   2AB5             ; --- START RELATIONAL
6175   2AB5 D7            push a
6176   2AB6 11            mov a, b
6177   2AB7 FD 2E 3B 00   mov32 cb, $0000003b
6177   2ABB 00 00 
6178   2ABD B0            cmp a, b
6179   2ABE FD 71         seq ; ==
6180   2AC0 E4            pop a
6181   2AC1             ; --- END RELATIONAL
6182   2AC1 C0 00 00      cmp b, 0
6183   2AC4 C6 1F 2B      je _if152_else
6184   2AC7             _if152_TRUE:
6185   2AC7             ; while(*prog != 0x0A && *prog != '\0') prog++; 
6186   2AC7             _while153_cond:
6187   2AC7 3B 63 4E      mov d, _prog ; $prog
6188   2ACA 2A            mov b, [d]
6189   2ACB 38 00 00      mov c, 0
6190   2ACE 74            mov d, b
6191   2ACF 32            mov bl, [d]
6192   2AD0 A7 00         mov bh, 0
6193   2AD2 38 00 00      mov c, 0
6194   2AD5             ; --- START RELATIONAL
6195   2AD5 D7            push a
6196   2AD6 11            mov a, b
6197   2AD7 FD 2E 0A 00   mov32 cb, $0000000a
6197   2ADB 00 00 
6198   2ADD B0            cmp a, b
6199   2ADE FD 72         sneq ; !=
6200   2AE0 E4            pop a
6201   2AE1             ; --- END RELATIONAL
6202   2AE1             ; --- START LOGICAL AND
6203   2AE1 D7            push a
6204   2AE2 11            mov a, b
6205   2AE3 3B 63 4E      mov d, _prog ; $prog
6206   2AE6 2A            mov b, [d]
6207   2AE7 38 00 00      mov c, 0
6208   2AEA 74            mov d, b
6209   2AEB 32            mov bl, [d]
6210   2AEC A7 00         mov bh, 0
6211   2AEE 38 00 00      mov c, 0
6212   2AF1             ; --- START RELATIONAL
6213   2AF1 D7            push a
6214   2AF2 11            mov a, b
6215   2AF3 FD 2E 00 00   mov32 cb, $00000000
6215   2AF7 00 00 
6216   2AF9 B0            cmp a, b
6217   2AFA FD 72         sneq ; !=
6218   2AFC E4            pop a
6219   2AFD             ; --- END RELATIONAL
6220   2AFD FD A7         sand a, b
6221   2AFF E4            pop a
6222   2B00             ; --- END LOGICAL AND
6223   2B00 C0 00 00      cmp b, 0
6224   2B03 C6 19 2B      je _while153_exit
6225   2B06             _while153_block:
6226   2B06             ; prog++; 
6227   2B06 3B 63 4E      mov d, _prog ; $prog
6228   2B09 2A            mov b, [d]
6229   2B0A 38 00 00      mov c, 0
6230   2B0D FD 77         inc b
6231   2B0F 3B 63 4E      mov d, _prog ; $prog
6232   2B12 FD 43         mov [d], b
6233   2B14 FD 7D         dec b
6234   2B16 0A C7 2A      jmp _while153_cond
6235   2B19             _while153_exit:
6236   2B19             ; break; 
6237   2B19 0A 4D 2B      jmp _while151_exit ; while break
6238   2B1C 0A 4A 2B      jmp _if152_exit
6239   2B1F             _if152_else:
6240   2B1F             ; *t++ = *prog++; 
6241   2B1F FA FF FF      lea d, [bp + -1] ; $t
6242   2B22 2A            mov b, [d]
6243   2B23 38 00 00      mov c, 0
6244   2B26 FD 77         inc b
6245   2B28 FA FF FF      lea d, [bp + -1] ; $t
6246   2B2B FD 43         mov [d], b
6247   2B2D FD 7D         dec b
6248   2B2F D8            push b
6249   2B30 3B 63 4E      mov d, _prog ; $prog
6250   2B33 2A            mov b, [d]
6251   2B34 38 00 00      mov c, 0
6252   2B37 FD 77         inc b
6253   2B39 3B 63 4E      mov d, _prog ; $prog
6254   2B3C FD 43         mov [d], b
6255   2B3E FD 7D         dec b
6256   2B40 74            mov d, b
6257   2B41 32            mov bl, [d]
6258   2B42 A7 00         mov bh, 0
6259   2B44 38 00 00      mov c, 0
6260   2B47 E7            pop d
6261   2B48 FD 3E         mov [d], bl
6262   2B4A             _if152_exit:
6263   2B4A 0A 68 2A      jmp _while151_cond
6264   2B4D             _while151_exit:
6265   2B4D             ; *t = '\0'; 
6266   2B4D FA FF FF      lea d, [bp + -1] ; $t
6267   2B50 2A            mov b, [d]
6268   2B51 38 00 00      mov c, 0
6269   2B54 D8            push b
6270   2B55 FD 2E 00 00   mov32 cb, $00000000
6270   2B59 00 00 
6271   2B5B E7            pop d
6272   2B5C FD 3E         mov [d], bl
6273   2B5E F9            leave
6274   2B5F 09            ret
6275   2B60             
6276   2B60             get:
6277   2B60 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6278   2B63             ; char *t; 
6279   2B63 52 02 00      sub sp, 2
6280   2B66             ; char temp_hex[64]; 
6281   2B66 52 40 00      sub sp, 64
6282   2B69             ; char *p; 
6283   2B69 52 02 00      sub sp, 2
6284   2B6C             ; *token = '\0'; 
6285   2B6C 3B 65 4E      mov d, _token_data ; $token
6286   2B6F 2D            mov b, d
6287   2B70 38 00 00      mov c, 0
6288   2B73 D8            push b
6289   2B74 FD 2E 00 00   mov32 cb, $00000000
6289   2B78 00 00 
6290   2B7A E7            pop d
6291   2B7B FD 3E         mov [d], bl
6292   2B7D             ; tok = TOK_UNDEF; 
6293   2B7D 3B 5F 4E      mov d, _tok ; $tok
6294   2B80 DA            push d
6295   2B81 FD 2E 00 00   mov32 cb, $0 ; enum element: TOK_UNDEF
6295   2B85 00 00 
6296   2B87 E7            pop d
6297   2B88 FD 43         mov [d], b
6298   2B8A             ; toktype = TYPE_UNDEF; 
6299   2B8A 3B 61 4E      mov d, _toktype ; $toktype
6300   2B8D DA            push d
6301   2B8E FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
6301   2B92 00 00 
6302   2B94 E7            pop d
6303   2B95 FD 43         mov [d], b
6304   2B97             ; t = token; 
6305   2B97 FA FF FF      lea d, [bp + -1] ; $t
6306   2B9A DA            push d
6307   2B9B 3B 65 4E      mov d, _token_data ; $token
6308   2B9E 2D            mov b, d
6309   2B9F 38 00 00      mov c, 0
6310   2BA2 E7            pop d
6311   2BA3 FD 43         mov [d], b
6312   2BA5             ; do{ 
6313   2BA5             _do154_block:
6314   2BA5             ; while(is_space(*prog)) prog++; 
6315   2BA5             _while155_cond:
6316   2BA5             ; --- START FUNCTION CALL
6317   2BA5 3B 63 4E      mov d, _prog ; $prog
6318   2BA8 2A            mov b, [d]
6319   2BA9 38 00 00      mov c, 0
6320   2BAC 74            mov d, b
6321   2BAD 32            mov bl, [d]
6322   2BAE A7 00         mov bh, 0
6323   2BB0 38 00 00      mov c, 0
6324   2BB3 DD            push bl
6325   2BB4 07 9E 3E      call is_space
6326   2BB7 51 01 00      add sp, 1
6327   2BBA             ; --- END FUNCTION CALL
6328   2BBA C0 00 00      cmp b, 0
6329   2BBD C6 D3 2B      je _while155_exit
6330   2BC0             _while155_block:
6331   2BC0             ; prog++; 
6332   2BC0 3B 63 4E      mov d, _prog ; $prog
6333   2BC3 2A            mov b, [d]
6334   2BC4 38 00 00      mov c, 0
6335   2BC7 FD 77         inc b
6336   2BC9 3B 63 4E      mov d, _prog ; $prog
6337   2BCC FD 43         mov [d], b
6338   2BCE FD 7D         dec b
6339   2BD0 0A A5 2B      jmp _while155_cond
6340   2BD3             _while155_exit:
6341   2BD3             ; if(*prog == ';'){ 
6342   2BD3             _if156_cond:
6343   2BD3 3B 63 4E      mov d, _prog ; $prog
6344   2BD6 2A            mov b, [d]
6345   2BD7 38 00 00      mov c, 0
6346   2BDA 74            mov d, b
6347   2BDB 32            mov bl, [d]
6348   2BDC A7 00         mov bh, 0
6349   2BDE 38 00 00      mov c, 0
6350   2BE1             ; --- START RELATIONAL
6351   2BE1 D7            push a
6352   2BE2 11            mov a, b
6353   2BE3 FD 2E 3B 00   mov32 cb, $0000003b
6353   2BE7 00 00 
6354   2BE9 B0            cmp a, b
6355   2BEA FD 71         seq ; ==
6356   2BEC E4            pop a
6357   2BED             ; --- END RELATIONAL
6358   2BED C0 00 00      cmp b, 0
6359   2BF0 C6 5C 2C      je _if156_exit
6360   2BF3             _if156_TRUE:
6361   2BF3             ; while(*prog != '\n') prog++; 
6362   2BF3             _while157_cond:
6363   2BF3 3B 63 4E      mov d, _prog ; $prog
6364   2BF6 2A            mov b, [d]
6365   2BF7 38 00 00      mov c, 0
6366   2BFA 74            mov d, b
6367   2BFB 32            mov bl, [d]
6368   2BFC A7 00         mov bh, 0
6369   2BFE 38 00 00      mov c, 0
6370   2C01             ; --- START RELATIONAL
6371   2C01 D7            push a
6372   2C02 11            mov a, b
6373   2C03 FD 2E 0A 00   mov32 cb, $0000000a
6373   2C07 00 00 
6374   2C09 B0            cmp a, b
6375   2C0A FD 72         sneq ; !=
6376   2C0C E4            pop a
6377   2C0D             ; --- END RELATIONAL
6378   2C0D C0 00 00      cmp b, 0
6379   2C10 C6 26 2C      je _while157_exit
6380   2C13             _while157_block:
6381   2C13             ; prog++; 
6382   2C13 3B 63 4E      mov d, _prog ; $prog
6383   2C16 2A            mov b, [d]
6384   2C17 38 00 00      mov c, 0
6385   2C1A FD 77         inc b
6386   2C1C 3B 63 4E      mov d, _prog ; $prog
6387   2C1F FD 43         mov [d], b
6388   2C21 FD 7D         dec b
6389   2C23 0A F3 2B      jmp _while157_cond
6390   2C26             _while157_exit:
6391   2C26             ; if(*prog == '\n') prog++; 
6392   2C26             _if158_cond:
6393   2C26 3B 63 4E      mov d, _prog ; $prog
6394   2C29 2A            mov b, [d]
6395   2C2A 38 00 00      mov c, 0
6396   2C2D 74            mov d, b
6397   2C2E 32            mov bl, [d]
6398   2C2F A7 00         mov bh, 0
6399   2C31 38 00 00      mov c, 0
6400   2C34             ; --- START RELATIONAL
6401   2C34 D7            push a
6402   2C35 11            mov a, b
6403   2C36 FD 2E 0A 00   mov32 cb, $0000000a
6403   2C3A 00 00 
6404   2C3C B0            cmp a, b
6405   2C3D FD 71         seq ; ==
6406   2C3F E4            pop a
6407   2C40             ; --- END RELATIONAL
6408   2C40 C0 00 00      cmp b, 0
6409   2C43 C6 59 2C      je _if158_exit
6410   2C46             _if158_TRUE:
6411   2C46             ; prog++; 
6412   2C46 3B 63 4E      mov d, _prog ; $prog
6413   2C49 2A            mov b, [d]
6414   2C4A 38 00 00      mov c, 0
6415   2C4D FD 77         inc b
6416   2C4F 3B 63 4E      mov d, _prog ; $prog
6417   2C52 FD 43         mov [d], b
6418   2C54 FD 7D         dec b
6419   2C56 0A 59 2C      jmp _if158_exit
6420   2C59             _if158_exit:
6421   2C59 0A 5C 2C      jmp _if156_exit
6422   2C5C             _if156_exit:
6423   2C5C             ; } while(is_space(*prog) || *prog == ';'); 
6424   2C5C             _do154_cond:
6425   2C5C             ; --- START FUNCTION CALL
6426   2C5C 3B 63 4E      mov d, _prog ; $prog
6427   2C5F 2A            mov b, [d]
6428   2C60 38 00 00      mov c, 0
6429   2C63 74            mov d, b
6430   2C64 32            mov bl, [d]
6431   2C65 A7 00         mov bh, 0
6432   2C67 38 00 00      mov c, 0
6433   2C6A DD            push bl
6434   2C6B 07 9E 3E      call is_space
6435   2C6E 51 01 00      add sp, 1
6436   2C71             ; --- END FUNCTION CALL
6437   2C71             ; --- START LOGICAL OR
6438   2C71 D7            push a
6439   2C72 11            mov a, b
6440   2C73 3B 63 4E      mov d, _prog ; $prog
6441   2C76 2A            mov b, [d]
6442   2C77 38 00 00      mov c, 0
6443   2C7A 74            mov d, b
6444   2C7B 32            mov bl, [d]
6445   2C7C A7 00         mov bh, 0
6446   2C7E 38 00 00      mov c, 0
6447   2C81             ; --- START RELATIONAL
6448   2C81 D7            push a
6449   2C82 11            mov a, b
6450   2C83 FD 2E 3B 00   mov32 cb, $0000003b
6450   2C87 00 00 
6451   2C89 B0            cmp a, b
6452   2C8A FD 71         seq ; ==
6453   2C8C E4            pop a
6454   2C8D             ; --- END RELATIONAL
6455   2C8D FD A8         sor a, b ; ||
6456   2C8F E4            pop a
6457   2C90             ; --- END LOGICAL OR
6458   2C90 C0 01 00      cmp b, 1
6459   2C93 C6 A5 2B      je _do154_block
6460   2C96             _do154_exit:
6461   2C96             ; if(*prog == '\0'){ 
6462   2C96             _if159_cond:
6463   2C96 3B 63 4E      mov d, _prog ; $prog
6464   2C99 2A            mov b, [d]
6465   2C9A 38 00 00      mov c, 0
6466   2C9D 74            mov d, b
6467   2C9E 32            mov bl, [d]
6468   2C9F A7 00         mov bh, 0
6469   2CA1 38 00 00      mov c, 0
6470   2CA4             ; --- START RELATIONAL
6471   2CA4 D7            push a
6472   2CA5 11            mov a, b
6473   2CA6 FD 2E 00 00   mov32 cb, $00000000
6473   2CAA 00 00 
6474   2CAC B0            cmp a, b
6475   2CAD FD 71         seq ; ==
6476   2CAF E4            pop a
6477   2CB0             ; --- END RELATIONAL
6478   2CB0 C0 00 00      cmp b, 0
6479   2CB3 C6 C8 2C      je _if159_exit
6480   2CB6             _if159_TRUE:
6481   2CB6             ; toktype = END; 
6482   2CB6 3B 61 4E      mov d, _toktype ; $toktype
6483   2CB9 DA            push d
6484   2CBA FD 2E 07 00   mov32 cb, $7 ; enum element: END
6484   2CBE 00 00 
6485   2CC0 E7            pop d
6486   2CC1 FD 43         mov [d], b
6487   2CC3             ; return; 
6488   2CC3 F9            leave
6489   2CC4 09            ret
6490   2CC5 0A C8 2C      jmp _if159_exit
6491   2CC8             _if159_exit:
6492   2CC8             ; if(is_alpha(*prog)){ 
6493   2CC8             _if160_cond:
6494   2CC8             ; --- START FUNCTION CALL
6495   2CC8 3B 63 4E      mov d, _prog ; $prog
6496   2CCB 2A            mov b, [d]
6497   2CCC 38 00 00      mov c, 0
6498   2CCF 74            mov d, b
6499   2CD0 32            mov bl, [d]
6500   2CD1 A7 00         mov bh, 0
6501   2CD3 38 00 00      mov c, 0
6502   2CD6 DD            push bl
6503   2CD7 07 02 3F      call is_alpha
6504   2CDA 51 01 00      add sp, 1
6505   2CDD             ; --- END FUNCTION CALL
6506   2CDD C0 00 00      cmp b, 0
6507   2CE0 C6 A0 2D      je _if160_else
6508   2CE3             _if160_TRUE:
6509   2CE3             ; while(is_alpha(*prog) || is_digit(*prog)){ 
6510   2CE3             _while161_cond:
6511   2CE3             ; --- START FUNCTION CALL
6512   2CE3 3B 63 4E      mov d, _prog ; $prog
6513   2CE6 2A            mov b, [d]
6514   2CE7 38 00 00      mov c, 0
6515   2CEA 74            mov d, b
6516   2CEB 32            mov bl, [d]
6517   2CEC A7 00         mov bh, 0
6518   2CEE 38 00 00      mov c, 0
6519   2CF1 DD            push bl
6520   2CF2 07 02 3F      call is_alpha
6521   2CF5 51 01 00      add sp, 1
6522   2CF8             ; --- END FUNCTION CALL
6523   2CF8             ; --- START LOGICAL OR
6524   2CF8 D7            push a
6525   2CF9 11            mov a, b
6526   2CFA             ; --- START FUNCTION CALL
6527   2CFA 3B 63 4E      mov d, _prog ; $prog
6528   2CFD 2A            mov b, [d]
6529   2CFE 38 00 00      mov c, 0
6530   2D01 74            mov d, b
6531   2D02 32            mov bl, [d]
6532   2D03 A7 00         mov bh, 0
6533   2D05 38 00 00      mov c, 0
6534   2D08 DD            push bl
6535   2D09 07 82 3F      call is_digit
6536   2D0C 51 01 00      add sp, 1
6537   2D0F             ; --- END FUNCTION CALL
6538   2D0F FD A8         sor a, b ; ||
6539   2D11 E4            pop a
6540   2D12             ; --- END LOGICAL OR
6541   2D12 C0 00 00      cmp b, 0
6542   2D15 C6 46 2D      je _while161_exit
6543   2D18             _while161_block:
6544   2D18             ; *t++ = *prog++; 
6545   2D18 FA FF FF      lea d, [bp + -1] ; $t
6546   2D1B 2A            mov b, [d]
6547   2D1C 38 00 00      mov c, 0
6548   2D1F FD 77         inc b
6549   2D21 FA FF FF      lea d, [bp + -1] ; $t
6550   2D24 FD 43         mov [d], b
6551   2D26 FD 7D         dec b
6552   2D28 D8            push b
6553   2D29 3B 63 4E      mov d, _prog ; $prog
6554   2D2C 2A            mov b, [d]
6555   2D2D 38 00 00      mov c, 0
6556   2D30 FD 77         inc b
6557   2D32 3B 63 4E      mov d, _prog ; $prog
6558   2D35 FD 43         mov [d], b
6559   2D37 FD 7D         dec b
6560   2D39 74            mov d, b
6561   2D3A 32            mov bl, [d]
6562   2D3B A7 00         mov bh, 0
6563   2D3D 38 00 00      mov c, 0
6564   2D40 E7            pop d
6565   2D41 FD 3E         mov [d], bl
6566   2D43 0A E3 2C      jmp _while161_cond
6567   2D46             _while161_exit:
6568   2D46             ; *t = '\0'; 
6569   2D46 FA FF FF      lea d, [bp + -1] ; $t
6570   2D49 2A            mov b, [d]
6571   2D4A 38 00 00      mov c, 0
6572   2D4D D8            push b
6573   2D4E FD 2E 00 00   mov32 cb, $00000000
6573   2D52 00 00 
6574   2D54 E7            pop d
6575   2D55 FD 3E         mov [d], bl
6576   2D57             ; if((tok = search_keyword(token)) != -1)  
6577   2D57             _if162_cond:
6578   2D57 3B 5F 4E      mov d, _tok ; $tok
6579   2D5A DA            push d
6580   2D5B             ; --- START FUNCTION CALL
6581   2D5B 3B 65 4E      mov d, _token_data ; $token
6582   2D5E 2D            mov b, d
6583   2D5F 38 00 00      mov c, 0
6584   2D62 FD AB         swp b
6585   2D64 D8            push b
6586   2D65 07 78 3A      call search_keyword
6587   2D68 51 02 00      add sp, 2
6588   2D6B             ; --- END FUNCTION CALL
6589   2D6B E7            pop d
6590   2D6C FD 43         mov [d], b
6591   2D6E             ; --- START RELATIONAL
6592   2D6E D7            push a
6593   2D6F 11            mov a, b
6594   2D70 FD 2E FF FF   mov32 cb, $ffffffff
6594   2D74 FF FF 
6595   2D76 B0            cmp a, b
6596   2D77 FD 72         sneq ; !=
6597   2D79 E4            pop a
6598   2D7A             ; --- END RELATIONAL
6599   2D7A C0 00 00      cmp b, 0
6600   2D7D C6 90 2D      je _if162_else
6601   2D80             _if162_TRUE:
6602   2D80             ; toktype = KEYWORD; 
6603   2D80 3B 61 4E      mov d, _toktype ; $toktype
6604   2D83 DA            push d
6605   2D84 FD 2E 01 00   mov32 cb, $1 ; enum element: KEYWORD
6605   2D88 00 00 
6606   2D8A E7            pop d
6607   2D8B FD 43         mov [d], b
6608   2D8D 0A 9D 2D      jmp _if162_exit
6609   2D90             _if162_else:
6610   2D90             ; toktype = IDENTIFIER; 
6611   2D90 3B 61 4E      mov d, _toktype ; $toktype
6612   2D93 DA            push d
6613   2D94 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
6613   2D98 00 00 
6614   2D9A E7            pop d
6615   2D9B FD 43         mov [d], b
6616   2D9D             _if162_exit:
6617   2D9D 0A 08 36      jmp _if160_exit
6618   2DA0             _if160_else:
6619   2DA0             ; if(is_digit(*prog) || (*prog == '$' && is_hex_digit(*(prog+1)))){ 
6620   2DA0             _if163_cond:
6621   2DA0             ; --- START FUNCTION CALL
6622   2DA0 3B 63 4E      mov d, _prog ; $prog
6623   2DA3 2A            mov b, [d]
6624   2DA4 38 00 00      mov c, 0
6625   2DA7 74            mov d, b
6626   2DA8 32            mov bl, [d]
6627   2DA9 A7 00         mov bh, 0
6628   2DAB 38 00 00      mov c, 0
6629   2DAE DD            push bl
6630   2DAF 07 82 3F      call is_digit
6631   2DB2 51 01 00      add sp, 1
6632   2DB5             ; --- END FUNCTION CALL
6633   2DB5             ; --- START LOGICAL OR
6634   2DB5 D7            push a
6635   2DB6 11            mov a, b
6636   2DB7 3B 63 4E      mov d, _prog ; $prog
6637   2DBA 2A            mov b, [d]
6638   2DBB 38 00 00      mov c, 0
6639   2DBE 74            mov d, b
6640   2DBF 32            mov bl, [d]
6641   2DC0 A7 00         mov bh, 0
6642   2DC2 38 00 00      mov c, 0
6643   2DC5             ; --- START RELATIONAL
6644   2DC5 D7            push a
6645   2DC6 11            mov a, b
6646   2DC7 FD 2E 24 00   mov32 cb, $00000024
6646   2DCB 00 00 
6647   2DCD B0            cmp a, b
6648   2DCE FD 71         seq ; ==
6649   2DD0 E4            pop a
6650   2DD1             ; --- END RELATIONAL
6651   2DD1             ; --- START LOGICAL AND
6652   2DD1 D7            push a
6653   2DD2 11            mov a, b
6654   2DD3             ; --- START FUNCTION CALL
6655   2DD3 3B 63 4E      mov d, _prog ; $prog
6656   2DD6 2A            mov b, [d]
6657   2DD7 38 00 00      mov c, 0
6658   2DDA             ; --- START TERMS
6659   2DDA D7            push a
6660   2DDB 11            mov a, b
6661   2DDC FD 2E 01 00   mov32 cb, $00000001
6661   2DE0 00 00 
6662   2DE2 56            add b, a
6663   2DE3 E4            pop a
6664   2DE4             ; --- END TERMS
6665   2DE4 74            mov d, b
6666   2DE5 32            mov bl, [d]
6667   2DE6 A7 00         mov bh, 0
6668   2DE8 38 00 00      mov c, 0
6669   2DEB DD            push bl
6670   2DEC 07 A9 29      call is_hex_digit
6671   2DEF 51 01 00      add sp, 1
6672   2DF2             ; --- END FUNCTION CALL
6673   2DF2 FD A7         sand a, b
6674   2DF4 E4            pop a
6675   2DF5             ; --- END LOGICAL AND
6676   2DF5 FD A8         sor a, b ; ||
6677   2DF7 E4            pop a
6678   2DF8             ; --- END LOGICAL OR
6679   2DF8 C0 00 00      cmp b, 0
6680   2DFB C6 CE 2F      je _if163_else
6681   2DFE             _if163_TRUE:
6682   2DFE             ; if(*prog == '$' && is_hex_digit(*(prog+1))){ 
6683   2DFE             _if164_cond:
6684   2DFE 3B 63 4E      mov d, _prog ; $prog
6685   2E01 2A            mov b, [d]
6686   2E02 38 00 00      mov c, 0
6687   2E05 74            mov d, b
6688   2E06 32            mov bl, [d]
6689   2E07 A7 00         mov bh, 0
6690   2E09 38 00 00      mov c, 0
6691   2E0C             ; --- START RELATIONAL
6692   2E0C D7            push a
6693   2E0D 11            mov a, b
6694   2E0E FD 2E 24 00   mov32 cb, $00000024
6694   2E12 00 00 
6695   2E14 B0            cmp a, b
6696   2E15 FD 71         seq ; ==
6697   2E17 E4            pop a
6698   2E18             ; --- END RELATIONAL
6699   2E18             ; --- START LOGICAL AND
6700   2E18 D7            push a
6701   2E19 11            mov a, b
6702   2E1A             ; --- START FUNCTION CALL
6703   2E1A 3B 63 4E      mov d, _prog ; $prog
6704   2E1D 2A            mov b, [d]
6705   2E1E 38 00 00      mov c, 0
6706   2E21             ; --- START TERMS
6707   2E21 D7            push a
6708   2E22 11            mov a, b
6709   2E23 FD 2E 01 00   mov32 cb, $00000001
6709   2E27 00 00 
6710   2E29 56            add b, a
6711   2E2A E4            pop a
6712   2E2B             ; --- END TERMS
6713   2E2B 74            mov d, b
6714   2E2C 32            mov bl, [d]
6715   2E2D A7 00         mov bh, 0
6716   2E2F 38 00 00      mov c, 0
6717   2E32 DD            push bl
6718   2E33 07 A9 29      call is_hex_digit
6719   2E36 51 01 00      add sp, 1
6720   2E39             ; --- END FUNCTION CALL
6721   2E39 FD A7         sand a, b
6722   2E3B E4            pop a
6723   2E3C             ; --- END LOGICAL AND
6724   2E3C C0 00 00      cmp b, 0
6725   2E3F C6 4D 2F      je _if164_else
6726   2E42             _if164_TRUE:
6727   2E42             ; *t++ = *prog++; 
6728   2E42 FA FF FF      lea d, [bp + -1] ; $t
6729   2E45 2A            mov b, [d]
6730   2E46 38 00 00      mov c, 0
6731   2E49 FD 77         inc b
6732   2E4B FA FF FF      lea d, [bp + -1] ; $t
6733   2E4E FD 43         mov [d], b
6734   2E50 FD 7D         dec b
6735   2E52 D8            push b
6736   2E53 3B 63 4E      mov d, _prog ; $prog
6737   2E56 2A            mov b, [d]
6738   2E57 38 00 00      mov c, 0
6739   2E5A FD 77         inc b
6740   2E5C 3B 63 4E      mov d, _prog ; $prog
6741   2E5F FD 43         mov [d], b
6742   2E61 FD 7D         dec b
6743   2E63 74            mov d, b
6744   2E64 32            mov bl, [d]
6745   2E65 A7 00         mov bh, 0
6746   2E67 38 00 00      mov c, 0
6747   2E6A E7            pop d
6748   2E6B FD 3E         mov [d], bl
6749   2E6D             ; p = temp_hex; 
6750   2E6D FA BD FF      lea d, [bp + -67] ; $p
6751   2E70 DA            push d
6752   2E71 FA BF FF      lea d, [bp + -65] ; $temp_hex
6753   2E74 2D            mov b, d
6754   2E75 38 00 00      mov c, 0
6755   2E78 E7            pop d
6756   2E79 FD 43         mov [d], b
6757   2E7B             ; *t++ = *p++ = *prog++; 
6758   2E7B FA FF FF      lea d, [bp + -1] ; $t
6759   2E7E 2A            mov b, [d]
6760   2E7F 38 00 00      mov c, 0
6761   2E82 FD 77         inc b
6762   2E84 FA FF FF      lea d, [bp + -1] ; $t
6763   2E87 FD 43         mov [d], b
6764   2E89 FD 7D         dec b
6765   2E8B D8            push b
6766   2E8C FA BD FF      lea d, [bp + -67] ; $p
6767   2E8F 2A            mov b, [d]
6768   2E90 38 00 00      mov c, 0
6769   2E93 FD 77         inc b
6770   2E95 FA BD FF      lea d, [bp + -67] ; $p
6771   2E98 FD 43         mov [d], b
6772   2E9A FD 7D         dec b
6773   2E9C D8            push b
6774   2E9D 3B 63 4E      mov d, _prog ; $prog
6775   2EA0 2A            mov b, [d]
6776   2EA1 38 00 00      mov c, 0
6777   2EA4 FD 77         inc b
6778   2EA6 3B 63 4E      mov d, _prog ; $prog
6779   2EA9 FD 43         mov [d], b
6780   2EAB FD 7D         dec b
6781   2EAD 74            mov d, b
6782   2EAE 32            mov bl, [d]
6783   2EAF A7 00         mov bh, 0
6784   2EB1 38 00 00      mov c, 0
6785   2EB4 E7            pop d
6786   2EB5 FD 3E         mov [d], bl
6787   2EB7 E7            pop d
6788   2EB8 FD 3E         mov [d], bl
6789   2EBA             ; while(is_hex_digit(*prog)){ 
6790   2EBA             _while165_cond:
6791   2EBA             ; --- START FUNCTION CALL
6792   2EBA 3B 63 4E      mov d, _prog ; $prog
6793   2EBD 2A            mov b, [d]
6794   2EBE 38 00 00      mov c, 0
6795   2EC1 74            mov d, b
6796   2EC2 32            mov bl, [d]
6797   2EC3 A7 00         mov bh, 0
6798   2EC5 38 00 00      mov c, 0
6799   2EC8 DD            push bl
6800   2EC9 07 A9 29      call is_hex_digit
6801   2ECC 51 01 00      add sp, 1
6802   2ECF             ; --- END FUNCTION CALL
6803   2ECF C0 00 00      cmp b, 0
6804   2ED2 C6 17 2F      je _while165_exit
6805   2ED5             _while165_block:
6806   2ED5             ; *t++ = *p++ = *prog++; 
6807   2ED5 FA FF FF      lea d, [bp + -1] ; $t
6808   2ED8 2A            mov b, [d]
6809   2ED9 38 00 00      mov c, 0
6810   2EDC FD 77         inc b
6811   2EDE FA FF FF      lea d, [bp + -1] ; $t
6812   2EE1 FD 43         mov [d], b
6813   2EE3 FD 7D         dec b
6814   2EE5 D8            push b
6815   2EE6 FA BD FF      lea d, [bp + -67] ; $p
6816   2EE9 2A            mov b, [d]
6817   2EEA 38 00 00      mov c, 0
6818   2EED FD 77         inc b
6819   2EEF FA BD FF      lea d, [bp + -67] ; $p
6820   2EF2 FD 43         mov [d], b
6821   2EF4 FD 7D         dec b
6822   2EF6 D8            push b
6823   2EF7 3B 63 4E      mov d, _prog ; $prog
6824   2EFA 2A            mov b, [d]
6825   2EFB 38 00 00      mov c, 0
6826   2EFE FD 77         inc b
6827   2F00 3B 63 4E      mov d, _prog ; $prog
6828   2F03 FD 43         mov [d], b
6829   2F05 FD 7D         dec b
6830   2F07 74            mov d, b
6831   2F08 32            mov bl, [d]
6832   2F09 A7 00         mov bh, 0
6833   2F0B 38 00 00      mov c, 0
6834   2F0E E7            pop d
6835   2F0F FD 3E         mov [d], bl
6836   2F11 E7            pop d
6837   2F12 FD 3E         mov [d], bl
6838   2F14 0A BA 2E      jmp _while165_cond
6839   2F17             _while165_exit:
6840   2F17             ; *t = *p = '\0'; 
6841   2F17 FA FF FF      lea d, [bp + -1] ; $t
6842   2F1A 2A            mov b, [d]
6843   2F1B 38 00 00      mov c, 0
6844   2F1E D8            push b
6845   2F1F FA BD FF      lea d, [bp + -67] ; $p
6846   2F22 2A            mov b, [d]
6847   2F23 38 00 00      mov c, 0
6848   2F26 D8            push b
6849   2F27 FD 2E 00 00   mov32 cb, $00000000
6849   2F2B 00 00 
6850   2F2D E7            pop d
6851   2F2E FD 3E         mov [d], bl
6852   2F30 E7            pop d
6853   2F31 FD 3E         mov [d], bl
6854   2F33             ; int_const = hex_to_int(temp_hex); 
6855   2F33 3B A5 4F      mov d, _int_const ; $int_const
6856   2F36 DA            push d
6857   2F37             ; --- START FUNCTION CALL
6858   2F37 FA BF FF      lea d, [bp + -65] ; $temp_hex
6859   2F3A 2D            mov b, d
6860   2F3B 38 00 00      mov c, 0
6861   2F3E FD AB         swp b
6862   2F40 D8            push b
6863   2F41 07 27 3B      call hex_to_int
6864   2F44 51 02 00      add sp, 2
6865   2F47             ; --- END FUNCTION CALL
6866   2F47 E7            pop d
6867   2F48 FD 43         mov [d], b
6868   2F4A 0A BE 2F      jmp _if164_exit
6869   2F4D             _if164_else:
6870   2F4D             ; while(is_digit(*prog)){ 
6871   2F4D             _while166_cond:
6872   2F4D             ; --- START FUNCTION CALL
6873   2F4D 3B 63 4E      mov d, _prog ; $prog
6874   2F50 2A            mov b, [d]
6875   2F51 38 00 00      mov c, 0
6876   2F54 74            mov d, b
6877   2F55 32            mov bl, [d]
6878   2F56 A7 00         mov bh, 0
6879   2F58 38 00 00      mov c, 0
6880   2F5B DD            push bl
6881   2F5C 07 82 3F      call is_digit
6882   2F5F 51 01 00      add sp, 1
6883   2F62             ; --- END FUNCTION CALL
6884   2F62 C0 00 00      cmp b, 0
6885   2F65 C6 96 2F      je _while166_exit
6886   2F68             _while166_block:
6887   2F68             ; *t++ = *prog++; 
6888   2F68 FA FF FF      lea d, [bp + -1] ; $t
6889   2F6B 2A            mov b, [d]
6890   2F6C 38 00 00      mov c, 0
6891   2F6F FD 77         inc b
6892   2F71 FA FF FF      lea d, [bp + -1] ; $t
6893   2F74 FD 43         mov [d], b
6894   2F76 FD 7D         dec b
6895   2F78 D8            push b
6896   2F79 3B 63 4E      mov d, _prog ; $prog
6897   2F7C 2A            mov b, [d]
6898   2F7D 38 00 00      mov c, 0
6899   2F80 FD 77         inc b
6900   2F82 3B 63 4E      mov d, _prog ; $prog
6901   2F85 FD 43         mov [d], b
6902   2F87 FD 7D         dec b
6903   2F89 74            mov d, b
6904   2F8A 32            mov bl, [d]
6905   2F8B A7 00         mov bh, 0
6906   2F8D 38 00 00      mov c, 0
6907   2F90 E7            pop d
6908   2F91 FD 3E         mov [d], bl
6909   2F93 0A 4D 2F      jmp _while166_cond
6910   2F96             _while166_exit:
6911   2F96             ; *t = '\0'; 
6912   2F96 FA FF FF      lea d, [bp + -1] ; $t
6913   2F99 2A            mov b, [d]
6914   2F9A 38 00 00      mov c, 0
6915   2F9D D8            push b
6916   2F9E FD 2E 00 00   mov32 cb, $00000000
6916   2FA2 00 00 
6917   2FA4 E7            pop d
6918   2FA5 FD 3E         mov [d], bl
6919   2FA7             ; int_const = atoi(token); 
6920   2FA7 3B A5 4F      mov d, _int_const ; $int_const
6921   2FAA DA            push d
6922   2FAB             ; --- START FUNCTION CALL
6923   2FAB 3B 65 4E      mov d, _token_data ; $token
6924   2FAE 2D            mov b, d
6925   2FAF 38 00 00      mov c, 0
6926   2FB2 FD AB         swp b
6927   2FB4 D8            push b
6928   2FB5 07 95 40      call atoi
6929   2FB8 51 02 00      add sp, 2
6930   2FBB             ; --- END FUNCTION CALL
6931   2FBB E7            pop d
6932   2FBC FD 43         mov [d], b
6933   2FBE             _if164_exit:
6934   2FBE             ; toktype = INTEGER_CONST; 
6935   2FBE 3B 61 4E      mov d, _toktype ; $toktype
6936   2FC1 DA            push d
6937   2FC2 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
6937   2FC6 00 00 
6938   2FC8 E7            pop d
6939   2FC9 FD 43         mov [d], b
6940   2FCB 0A 08 36      jmp _if163_exit
6941   2FCE             _if163_else:
6942   2FCE             ; if(*prog == '\''){ 
6943   2FCE             _if167_cond:
6944   2FCE 3B 63 4E      mov d, _prog ; $prog
6945   2FD1 2A            mov b, [d]
6946   2FD2 38 00 00      mov c, 0
6947   2FD5 74            mov d, b
6948   2FD6 32            mov bl, [d]
6949   2FD7 A7 00         mov bh, 0
6950   2FD9 38 00 00      mov c, 0
6951   2FDC             ; --- START RELATIONAL
6952   2FDC D7            push a
6953   2FDD 11            mov a, b
6954   2FDE FD 2E 27 00   mov32 cb, $00000027
6954   2FE2 00 00 
6955   2FE4 B0            cmp a, b
6956   2FE5 FD 71         seq ; ==
6957   2FE7 E4            pop a
6958   2FE8             ; --- END RELATIONAL
6959   2FE8 C0 00 00      cmp b, 0
6960   2FEB C6 38 31      je _if167_else
6961   2FEE             _if167_TRUE:
6962   2FEE             ; *t++ = '\''; 
6963   2FEE FA FF FF      lea d, [bp + -1] ; $t
6964   2FF1 2A            mov b, [d]
6965   2FF2 38 00 00      mov c, 0
6966   2FF5 FD 77         inc b
6967   2FF7 FA FF FF      lea d, [bp + -1] ; $t
6968   2FFA FD 43         mov [d], b
6969   2FFC FD 7D         dec b
6970   2FFE D8            push b
6971   2FFF FD 2E 27 00   mov32 cb, $00000027
6971   3003 00 00 
6972   3005 E7            pop d
6973   3006 FD 3E         mov [d], bl
6974   3008             ; prog++; 
6975   3008 3B 63 4E      mov d, _prog ; $prog
6976   300B 2A            mov b, [d]
6977   300C 38 00 00      mov c, 0
6978   300F FD 77         inc b
6979   3011 3B 63 4E      mov d, _prog ; $prog
6980   3014 FD 43         mov [d], b
6981   3016 FD 7D         dec b
6982   3018             ; if(*prog == '\\'){ 
6983   3018             _if168_cond:
6984   3018 3B 63 4E      mov d, _prog ; $prog
6985   301B 2A            mov b, [d]
6986   301C 38 00 00      mov c, 0
6987   301F 74            mov d, b
6988   3020 32            mov bl, [d]
6989   3021 A7 00         mov bh, 0
6990   3023 38 00 00      mov c, 0
6991   3026             ; --- START RELATIONAL
6992   3026 D7            push a
6993   3027 11            mov a, b
6994   3028 FD 2E 5C 00   mov32 cb, $0000005c
6994   302C 00 00 
6995   302E B0            cmp a, b
6996   302F FD 71         seq ; ==
6997   3031 E4            pop a
6998   3032             ; --- END RELATIONAL
6999   3032 C0 00 00      cmp b, 0
7000   3035 C6 90 30      je _if168_else
7001   3038             _if168_TRUE:
7002   3038             ; *t++ = '\\'; 
7003   3038 FA FF FF      lea d, [bp + -1] ; $t
7004   303B 2A            mov b, [d]
7005   303C 38 00 00      mov c, 0
7006   303F FD 77         inc b
7007   3041 FA FF FF      lea d, [bp + -1] ; $t
7008   3044 FD 43         mov [d], b
7009   3046 FD 7D         dec b
7010   3048 D8            push b
7011   3049 FD 2E 5C 00   mov32 cb, $0000005c
7011   304D 00 00 
7012   304F E7            pop d
7013   3050 FD 3E         mov [d], bl
7014   3052             ; prog++; 
7015   3052 3B 63 4E      mov d, _prog ; $prog
7016   3055 2A            mov b, [d]
7017   3056 38 00 00      mov c, 0
7018   3059 FD 77         inc b
7019   305B 3B 63 4E      mov d, _prog ; $prog
7020   305E FD 43         mov [d], b
7021   3060 FD 7D         dec b
7022   3062             ; *t++ = *prog++; 
7023   3062 FA FF FF      lea d, [bp + -1] ; $t
7024   3065 2A            mov b, [d]
7025   3066 38 00 00      mov c, 0
7026   3069 FD 77         inc b
7027   306B FA FF FF      lea d, [bp + -1] ; $t
7028   306E FD 43         mov [d], b
7029   3070 FD 7D         dec b
7030   3072 D8            push b
7031   3073 3B 63 4E      mov d, _prog ; $prog
7032   3076 2A            mov b, [d]
7033   3077 38 00 00      mov c, 0
7034   307A FD 77         inc b
7035   307C 3B 63 4E      mov d, _prog ; $prog
7036   307F FD 43         mov [d], b
7037   3081 FD 7D         dec b
7038   3083 74            mov d, b
7039   3084 32            mov bl, [d]
7040   3085 A7 00         mov bh, 0
7041   3087 38 00 00      mov c, 0
7042   308A E7            pop d
7043   308B FD 3E         mov [d], bl
7044   308D 0A BB 30      jmp _if168_exit
7045   3090             _if168_else:
7046   3090             ; *t++ = *prog++; 
7047   3090 FA FF FF      lea d, [bp + -1] ; $t
7048   3093 2A            mov b, [d]
7049   3094 38 00 00      mov c, 0
7050   3097 FD 77         inc b
7051   3099 FA FF FF      lea d, [bp + -1] ; $t
7052   309C FD 43         mov [d], b
7053   309E FD 7D         dec b
7054   30A0 D8            push b
7055   30A1 3B 63 4E      mov d, _prog ; $prog
7056   30A4 2A            mov b, [d]
7057   30A5 38 00 00      mov c, 0
7058   30A8 FD 77         inc b
7059   30AA 3B 63 4E      mov d, _prog ; $prog
7060   30AD FD 43         mov [d], b
7061   30AF FD 7D         dec b
7062   30B1 74            mov d, b
7063   30B2 32            mov bl, [d]
7064   30B3 A7 00         mov bh, 0
7065   30B5 38 00 00      mov c, 0
7066   30B8 E7            pop d
7067   30B9 FD 3E         mov [d], bl
7068   30BB             _if168_exit:
7069   30BB             ; if(*prog != '\''){ 
7070   30BB             _if169_cond:
7071   30BB 3B 63 4E      mov d, _prog ; $prog
7072   30BE 2A            mov b, [d]
7073   30BF 38 00 00      mov c, 0
7074   30C2 74            mov d, b
7075   30C3 32            mov bl, [d]
7076   30C4 A7 00         mov bh, 0
7077   30C6 38 00 00      mov c, 0
7078   30C9             ; --- START RELATIONAL
7079   30C9 D7            push a
7080   30CA 11            mov a, b
7081   30CB FD 2E 27 00   mov32 cb, $00000027
7081   30CF 00 00 
7082   30D1 B0            cmp a, b
7083   30D2 FD 72         sneq ; !=
7084   30D4 E4            pop a
7085   30D5             ; --- END RELATIONAL
7086   30D5 C0 00 00      cmp b, 0
7087   30D8 C6 EA 30      je _if169_exit
7088   30DB             _if169_TRUE:
7089   30DB             ; error("Closing single quotes expected."); 
7090   30DB             ; --- START FUNCTION CALL
7091   30DB 26 D6 52      mov b, _s73 ; "Closing single quotes expected."
7092   30DE FD AB         swp b
7093   30E0 D8            push b
7094   30E1 07 66 39      call error
7095   30E4 51 02 00      add sp, 2
7096   30E7             ; --- END FUNCTION CALL
7097   30E7 0A EA 30      jmp _if169_exit
7098   30EA             _if169_exit:
7099   30EA             ; *t++ = '\''; 
7100   30EA FA FF FF      lea d, [bp + -1] ; $t
7101   30ED 2A            mov b, [d]
7102   30EE 38 00 00      mov c, 0
7103   30F1 FD 77         inc b
7104   30F3 FA FF FF      lea d, [bp + -1] ; $t
7105   30F6 FD 43         mov [d], b
7106   30F8 FD 7D         dec b
7107   30FA D8            push b
7108   30FB FD 2E 27 00   mov32 cb, $00000027
7108   30FF 00 00 
7109   3101 E7            pop d
7110   3102 FD 3E         mov [d], bl
7111   3104             ; prog++; 
7112   3104 3B 63 4E      mov d, _prog ; $prog
7113   3107 2A            mov b, [d]
7114   3108 38 00 00      mov c, 0
7115   310B FD 77         inc b
7116   310D 3B 63 4E      mov d, _prog ; $prog
7117   3110 FD 43         mov [d], b
7118   3112 FD 7D         dec b
7119   3114             ; toktype = CHAR_CONST; 
7120   3114 3B 61 4E      mov d, _toktype ; $toktype
7121   3117 DA            push d
7122   3118 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
7122   311C 00 00 
7123   311E E7            pop d
7124   311F FD 43         mov [d], b
7125   3121             ; *t = '\0'; 
7126   3121 FA FF FF      lea d, [bp + -1] ; $t
7127   3124 2A            mov b, [d]
7128   3125 38 00 00      mov c, 0
7129   3128 D8            push b
7130   3129 FD 2E 00 00   mov32 cb, $00000000
7130   312D 00 00 
7131   312F E7            pop d
7132   3130 FD 3E         mov [d], bl
7133   3132             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
7134   3132             ; --- START FUNCTION CALL
7135   3132 07 9C 36      call convert_constant
7136   3135 0A 08 36      jmp _if167_exit
7137   3138             _if167_else:
7138   3138             ; if(*prog == '\"'){ 
7139   3138             _if170_cond:
7140   3138 3B 63 4E      mov d, _prog ; $prog
7141   313B 2A            mov b, [d]
7142   313C 38 00 00      mov c, 0
7143   313F 74            mov d, b
7144   3140 32            mov bl, [d]
7145   3141 A7 00         mov bh, 0
7146   3143 38 00 00      mov c, 0
7147   3146             ; --- START RELATIONAL
7148   3146 D7            push a
7149   3147 11            mov a, b
7150   3148 FD 2E 22 00   mov32 cb, $00000022
7150   314C 00 00 
7151   314E B0            cmp a, b
7152   314F FD 71         seq ; ==
7153   3151 E4            pop a
7154   3152             ; --- END RELATIONAL
7155   3152 C0 00 00      cmp b, 0
7156   3155 C6 60 32      je _if170_else
7157   3158             _if170_TRUE:
7158   3158             ; *t++ = '\"'; 
7159   3158 FA FF FF      lea d, [bp + -1] ; $t
7160   315B 2A            mov b, [d]
7161   315C 38 00 00      mov c, 0
7162   315F FD 77         inc b
7163   3161 FA FF FF      lea d, [bp + -1] ; $t
7164   3164 FD 43         mov [d], b
7165   3166 FD 7D         dec b
7166   3168 D8            push b
7167   3169 FD 2E 22 00   mov32 cb, $00000022
7167   316D 00 00 
7168   316F E7            pop d
7169   3170 FD 3E         mov [d], bl
7170   3172             ; prog++; 
7171   3172 3B 63 4E      mov d, _prog ; $prog
7172   3175 2A            mov b, [d]
7173   3176 38 00 00      mov c, 0
7174   3179 FD 77         inc b
7175   317B 3B 63 4E      mov d, _prog ; $prog
7176   317E FD 43         mov [d], b
7177   3180 FD 7D         dec b
7178   3182             ; while(*prog != '\"' && *prog){ 
7179   3182             _while171_cond:
7180   3182 3B 63 4E      mov d, _prog ; $prog
7181   3185 2A            mov b, [d]
7182   3186 38 00 00      mov c, 0
7183   3189 74            mov d, b
7184   318A 32            mov bl, [d]
7185   318B A7 00         mov bh, 0
7186   318D 38 00 00      mov c, 0
7187   3190             ; --- START RELATIONAL
7188   3190 D7            push a
7189   3191 11            mov a, b
7190   3192 FD 2E 22 00   mov32 cb, $00000022
7190   3196 00 00 
7191   3198 B0            cmp a, b
7192   3199 FD 72         sneq ; !=
7193   319B E4            pop a
7194   319C             ; --- END RELATIONAL
7195   319C             ; --- START LOGICAL AND
7196   319C D7            push a
7197   319D 11            mov a, b
7198   319E 3B 63 4E      mov d, _prog ; $prog
7199   31A1 2A            mov b, [d]
7200   31A2 38 00 00      mov c, 0
7201   31A5 74            mov d, b
7202   31A6 32            mov bl, [d]
7203   31A7 A7 00         mov bh, 0
7204   31A9 38 00 00      mov c, 0
7205   31AC FD A7         sand a, b
7206   31AE E4            pop a
7207   31AF             ; --- END LOGICAL AND
7208   31AF C0 00 00      cmp b, 0
7209   31B2 C6 E3 31      je _while171_exit
7210   31B5             _while171_block:
7211   31B5             ; *t++ = *prog++; 
7212   31B5 FA FF FF      lea d, [bp + -1] ; $t
7213   31B8 2A            mov b, [d]
7214   31B9 38 00 00      mov c, 0
7215   31BC FD 77         inc b
7216   31BE FA FF FF      lea d, [bp + -1] ; $t
7217   31C1 FD 43         mov [d], b
7218   31C3 FD 7D         dec b
7219   31C5 D8            push b
7220   31C6 3B 63 4E      mov d, _prog ; $prog
7221   31C9 2A            mov b, [d]
7222   31CA 38 00 00      mov c, 0
7223   31CD FD 77         inc b
7224   31CF 3B 63 4E      mov d, _prog ; $prog
7225   31D2 FD 43         mov [d], b
7226   31D4 FD 7D         dec b
7227   31D6 74            mov d, b
7228   31D7 32            mov bl, [d]
7229   31D8 A7 00         mov bh, 0
7230   31DA 38 00 00      mov c, 0
7231   31DD E7            pop d
7232   31DE FD 3E         mov [d], bl
7233   31E0 0A 82 31      jmp _while171_cond
7234   31E3             _while171_exit:
7235   31E3             ; if(*prog != '\"') error("Double quotes expected"); 
7236   31E3             _if172_cond:
7237   31E3 3B 63 4E      mov d, _prog ; $prog
7238   31E6 2A            mov b, [d]
7239   31E7 38 00 00      mov c, 0
7240   31EA 74            mov d, b
7241   31EB 32            mov bl, [d]
7242   31EC A7 00         mov bh, 0
7243   31EE 38 00 00      mov c, 0
7244   31F1             ; --- START RELATIONAL
7245   31F1 D7            push a
7246   31F2 11            mov a, b
7247   31F3 FD 2E 22 00   mov32 cb, $00000022
7247   31F7 00 00 
7248   31F9 B0            cmp a, b
7249   31FA FD 72         sneq ; !=
7250   31FC E4            pop a
7251   31FD             ; --- END RELATIONAL
7252   31FD C0 00 00      cmp b, 0
7253   3200 C6 12 32      je _if172_exit
7254   3203             _if172_TRUE:
7255   3203             ; error("Double quotes expected"); 
7256   3203             ; --- START FUNCTION CALL
7257   3203 26 F6 52      mov b, _s74 ; "Double quotes expected"
7258   3206 FD AB         swp b
7259   3208 D8            push b
7260   3209 07 66 39      call error
7261   320C 51 02 00      add sp, 2
7262   320F             ; --- END FUNCTION CALL
7263   320F 0A 12 32      jmp _if172_exit
7264   3212             _if172_exit:
7265   3212             ; *t++ = '\"'; 
7266   3212 FA FF FF      lea d, [bp + -1] ; $t
7267   3215 2A            mov b, [d]
7268   3216 38 00 00      mov c, 0
7269   3219 FD 77         inc b
7270   321B FA FF FF      lea d, [bp + -1] ; $t
7271   321E FD 43         mov [d], b
7272   3220 FD 7D         dec b
7273   3222 D8            push b
7274   3223 FD 2E 22 00   mov32 cb, $00000022
7274   3227 00 00 
7275   3229 E7            pop d
7276   322A FD 3E         mov [d], bl
7277   322C             ; prog++; 
7278   322C 3B 63 4E      mov d, _prog ; $prog
7279   322F 2A            mov b, [d]
7280   3230 38 00 00      mov c, 0
7281   3233 FD 77         inc b
7282   3235 3B 63 4E      mov d, _prog ; $prog
7283   3238 FD 43         mov [d], b
7284   323A FD 7D         dec b
7285   323C             ; toktype = STRING_CONST; 
7286   323C 3B 61 4E      mov d, _toktype ; $toktype
7287   323F DA            push d
7288   3240 FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
7288   3244 00 00 
7289   3246 E7            pop d
7290   3247 FD 43         mov [d], b
7291   3249             ; *t = '\0'; 
7292   3249 FA FF FF      lea d, [bp + -1] ; $t
7293   324C 2A            mov b, [d]
7294   324D 38 00 00      mov c, 0
7295   3250 D8            push b
7296   3251 FD 2E 00 00   mov32 cb, $00000000
7296   3255 00 00 
7297   3257 E7            pop d
7298   3258 FD 3E         mov [d], bl
7299   325A             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
7300   325A             ; --- START FUNCTION CALL
7301   325A 07 9C 36      call convert_constant
7302   325D 0A 08 36      jmp _if170_exit
7303   3260             _if170_else:
7304   3260             ; if(*prog == '['){ 
7305   3260             _if173_cond:
7306   3260 3B 63 4E      mov d, _prog ; $prog
7307   3263 2A            mov b, [d]
7308   3264 38 00 00      mov c, 0
7309   3267 74            mov d, b
7310   3268 32            mov bl, [d]
7311   3269 A7 00         mov bh, 0
7312   326B 38 00 00      mov c, 0
7313   326E             ; --- START RELATIONAL
7314   326E D7            push a
7315   326F 11            mov a, b
7316   3270 FD 2E 5B 00   mov32 cb, $0000005b
7316   3274 00 00 
7317   3276 B0            cmp a, b
7318   3277 FD 71         seq ; ==
7319   3279 E4            pop a
7320   327A             ; --- END RELATIONAL
7321   327A C0 00 00      cmp b, 0
7322   327D C6 C8 32      je _if173_else
7323   3280             _if173_TRUE:
7324   3280             ; *t++ = *prog++; 
7325   3280 FA FF FF      lea d, [bp + -1] ; $t
7326   3283 2A            mov b, [d]
7327   3284 38 00 00      mov c, 0
7328   3287 FD 77         inc b
7329   3289 FA FF FF      lea d, [bp + -1] ; $t
7330   328C FD 43         mov [d], b
7331   328E FD 7D         dec b
7332   3290 D8            push b
7333   3291 3B 63 4E      mov d, _prog ; $prog
7334   3294 2A            mov b, [d]
7335   3295 38 00 00      mov c, 0
7336   3298 FD 77         inc b
7337   329A 3B 63 4E      mov d, _prog ; $prog
7338   329D FD 43         mov [d], b
7339   329F FD 7D         dec b
7340   32A1 74            mov d, b
7341   32A2 32            mov bl, [d]
7342   32A3 A7 00         mov bh, 0
7343   32A5 38 00 00      mov c, 0
7344   32A8 E7            pop d
7345   32A9 FD 3E         mov [d], bl
7346   32AB             ; tok = OPENING_BRACKET; 
7347   32AB 3B 5F 4E      mov d, _tok ; $tok
7348   32AE DA            push d
7349   32AF FD 2E 0B 00   mov32 cb, $b ; enum element: OPENING_BRACKET
7349   32B3 00 00 
7350   32B5 E7            pop d
7351   32B6 FD 43         mov [d], b
7352   32B8             ; toktype = DELIMITER;   
7353   32B8 3B 61 4E      mov d, _toktype ; $toktype
7354   32BB DA            push d
7355   32BC FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7355   32C0 00 00 
7356   32C2 E7            pop d
7357   32C3 FD 43         mov [d], b
7358   32C5 0A 08 36      jmp _if173_exit
7359   32C8             _if173_else:
7360   32C8             ; if(*prog == ']'){ 
7361   32C8             _if174_cond:
7362   32C8 3B 63 4E      mov d, _prog ; $prog
7363   32CB 2A            mov b, [d]
7364   32CC 38 00 00      mov c, 0
7365   32CF 74            mov d, b
7366   32D0 32            mov bl, [d]
7367   32D1 A7 00         mov bh, 0
7368   32D3 38 00 00      mov c, 0
7369   32D6             ; --- START RELATIONAL
7370   32D6 D7            push a
7371   32D7 11            mov a, b
7372   32D8 FD 2E 5D 00   mov32 cb, $0000005d
7372   32DC 00 00 
7373   32DE B0            cmp a, b
7374   32DF FD 71         seq ; ==
7375   32E1 E4            pop a
7376   32E2             ; --- END RELATIONAL
7377   32E2 C0 00 00      cmp b, 0
7378   32E5 C6 30 33      je _if174_else
7379   32E8             _if174_TRUE:
7380   32E8             ; *t++ = *prog++; 
7381   32E8 FA FF FF      lea d, [bp + -1] ; $t
7382   32EB 2A            mov b, [d]
7383   32EC 38 00 00      mov c, 0
7384   32EF FD 77         inc b
7385   32F1 FA FF FF      lea d, [bp + -1] ; $t
7386   32F4 FD 43         mov [d], b
7387   32F6 FD 7D         dec b
7388   32F8 D8            push b
7389   32F9 3B 63 4E      mov d, _prog ; $prog
7390   32FC 2A            mov b, [d]
7391   32FD 38 00 00      mov c, 0
7392   3300 FD 77         inc b
7393   3302 3B 63 4E      mov d, _prog ; $prog
7394   3305 FD 43         mov [d], b
7395   3307 FD 7D         dec b
7396   3309 74            mov d, b
7397   330A 32            mov bl, [d]
7398   330B A7 00         mov bh, 0
7399   330D 38 00 00      mov c, 0
7400   3310 E7            pop d
7401   3311 FD 3E         mov [d], bl
7402   3313             ; tok = CLOSING_BRACKET; 
7403   3313 3B 5F 4E      mov d, _tok ; $tok
7404   3316 DA            push d
7405   3317 FD 2E 0C 00   mov32 cb, $c ; enum element: CLOSING_BRACKET
7405   331B 00 00 
7406   331D E7            pop d
7407   331E FD 43         mov [d], b
7408   3320             ; toktype = DELIMITER;   
7409   3320 3B 61 4E      mov d, _toktype ; $toktype
7410   3323 DA            push d
7411   3324 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7411   3328 00 00 
7412   332A E7            pop d
7413   332B FD 43         mov [d], b
7414   332D 0A 08 36      jmp _if174_exit
7415   3330             _if174_else:
7416   3330             ; if(*prog == '+'){ 
7417   3330             _if175_cond:
7418   3330 3B 63 4E      mov d, _prog ; $prog
7419   3333 2A            mov b, [d]
7420   3334 38 00 00      mov c, 0
7421   3337 74            mov d, b
7422   3338 32            mov bl, [d]
7423   3339 A7 00         mov bh, 0
7424   333B 38 00 00      mov c, 0
7425   333E             ; --- START RELATIONAL
7426   333E D7            push a
7427   333F 11            mov a, b
7428   3340 FD 2E 2B 00   mov32 cb, $0000002b
7428   3344 00 00 
7429   3346 B0            cmp a, b
7430   3347 FD 71         seq ; ==
7431   3349 E4            pop a
7432   334A             ; --- END RELATIONAL
7433   334A C0 00 00      cmp b, 0
7434   334D C6 98 33      je _if175_else
7435   3350             _if175_TRUE:
7436   3350             ; *t++ = *prog++; 
7437   3350 FA FF FF      lea d, [bp + -1] ; $t
7438   3353 2A            mov b, [d]
7439   3354 38 00 00      mov c, 0
7440   3357 FD 77         inc b
7441   3359 FA FF FF      lea d, [bp + -1] ; $t
7442   335C FD 43         mov [d], b
7443   335E FD 7D         dec b
7444   3360 D8            push b
7445   3361 3B 63 4E      mov d, _prog ; $prog
7446   3364 2A            mov b, [d]
7447   3365 38 00 00      mov c, 0
7448   3368 FD 77         inc b
7449   336A 3B 63 4E      mov d, _prog ; $prog
7450   336D FD 43         mov [d], b
7451   336F FD 7D         dec b
7452   3371 74            mov d, b
7453   3372 32            mov bl, [d]
7454   3373 A7 00         mov bh, 0
7455   3375 38 00 00      mov c, 0
7456   3378 E7            pop d
7457   3379 FD 3E         mov [d], bl
7458   337B             ; tok = PLUS; 
7459   337B 3B 5F 4E      mov d, _tok ; $tok
7460   337E DA            push d
7461   337F FD 2E 08 00   mov32 cb, $8 ; enum element: PLUS
7461   3383 00 00 
7462   3385 E7            pop d
7463   3386 FD 43         mov [d], b
7464   3388             ; toktype = DELIMITER;   
7465   3388 3B 61 4E      mov d, _toktype ; $toktype
7466   338B DA            push d
7467   338C FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7467   3390 00 00 
7468   3392 E7            pop d
7469   3393 FD 43         mov [d], b
7470   3395 0A 08 36      jmp _if175_exit
7471   3398             _if175_else:
7472   3398             ; if(*prog == '-'){ 
7473   3398             _if176_cond:
7474   3398 3B 63 4E      mov d, _prog ; $prog
7475   339B 2A            mov b, [d]
7476   339C 38 00 00      mov c, 0
7477   339F 74            mov d, b
7478   33A0 32            mov bl, [d]
7479   33A1 A7 00         mov bh, 0
7480   33A3 38 00 00      mov c, 0
7481   33A6             ; --- START RELATIONAL
7482   33A6 D7            push a
7483   33A7 11            mov a, b
7484   33A8 FD 2E 2D 00   mov32 cb, $0000002d
7484   33AC 00 00 
7485   33AE B0            cmp a, b
7486   33AF FD 71         seq ; ==
7487   33B1 E4            pop a
7488   33B2             ; --- END RELATIONAL
7489   33B2 C0 00 00      cmp b, 0
7490   33B5 C6 00 34      je _if176_else
7491   33B8             _if176_TRUE:
7492   33B8             ; *t++ = *prog++; 
7493   33B8 FA FF FF      lea d, [bp + -1] ; $t
7494   33BB 2A            mov b, [d]
7495   33BC 38 00 00      mov c, 0
7496   33BF FD 77         inc b
7497   33C1 FA FF FF      lea d, [bp + -1] ; $t
7498   33C4 FD 43         mov [d], b
7499   33C6 FD 7D         dec b
7500   33C8 D8            push b
7501   33C9 3B 63 4E      mov d, _prog ; $prog
7502   33CC 2A            mov b, [d]
7503   33CD 38 00 00      mov c, 0
7504   33D0 FD 77         inc b
7505   33D2 3B 63 4E      mov d, _prog ; $prog
7506   33D5 FD 43         mov [d], b
7507   33D7 FD 7D         dec b
7508   33D9 74            mov d, b
7509   33DA 32            mov bl, [d]
7510   33DB A7 00         mov bh, 0
7511   33DD 38 00 00      mov c, 0
7512   33E0 E7            pop d
7513   33E1 FD 3E         mov [d], bl
7514   33E3             ; tok = MINUS; 
7515   33E3 3B 5F 4E      mov d, _tok ; $tok
7516   33E6 DA            push d
7517   33E7 FD 2E 09 00   mov32 cb, $9 ; enum element: MINUS
7517   33EB 00 00 
7518   33ED E7            pop d
7519   33EE FD 43         mov [d], b
7520   33F0             ; toktype = DELIMITER;   
7521   33F0 3B 61 4E      mov d, _toktype ; $toktype
7522   33F3 DA            push d
7523   33F4 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7523   33F8 00 00 
7524   33FA E7            pop d
7525   33FB FD 43         mov [d], b
7526   33FD 0A 08 36      jmp _if176_exit
7527   3400             _if176_else:
7528   3400             ; if(*prog == '$'){ 
7529   3400             _if177_cond:
7530   3400 3B 63 4E      mov d, _prog ; $prog
7531   3403 2A            mov b, [d]
7532   3404 38 00 00      mov c, 0
7533   3407 74            mov d, b
7534   3408 32            mov bl, [d]
7535   3409 A7 00         mov bh, 0
7536   340B 38 00 00      mov c, 0
7537   340E             ; --- START RELATIONAL
7538   340E D7            push a
7539   340F 11            mov a, b
7540   3410 FD 2E 24 00   mov32 cb, $00000024
7540   3414 00 00 
7541   3416 B0            cmp a, b
7542   3417 FD 71         seq ; ==
7543   3419 E4            pop a
7544   341A             ; --- END RELATIONAL
7545   341A C0 00 00      cmp b, 0
7546   341D C6 68 34      je _if177_else
7547   3420             _if177_TRUE:
7548   3420             ; *t++ = *prog++; 
7549   3420 FA FF FF      lea d, [bp + -1] ; $t
7550   3423 2A            mov b, [d]
7551   3424 38 00 00      mov c, 0
7552   3427 FD 77         inc b
7553   3429 FA FF FF      lea d, [bp + -1] ; $t
7554   342C FD 43         mov [d], b
7555   342E FD 7D         dec b
7556   3430 D8            push b
7557   3431 3B 63 4E      mov d, _prog ; $prog
7558   3434 2A            mov b, [d]
7559   3435 38 00 00      mov c, 0
7560   3438 FD 77         inc b
7561   343A 3B 63 4E      mov d, _prog ; $prog
7562   343D FD 43         mov [d], b
7563   343F FD 7D         dec b
7564   3441 74            mov d, b
7565   3442 32            mov bl, [d]
7566   3443 A7 00         mov bh, 0
7567   3445 38 00 00      mov c, 0
7568   3448 E7            pop d
7569   3449 FD 3E         mov [d], bl
7570   344B             ; tok = DOLLAR; 
7571   344B 3B 5F 4E      mov d, _tok ; $tok
7572   344E DA            push d
7573   344F FD 2E 0A 00   mov32 cb, $a ; enum element: DOLLAR
7573   3453 00 00 
7574   3455 E7            pop d
7575   3456 FD 43         mov [d], b
7576   3458             ; toktype = DELIMITER;   
7577   3458 3B 61 4E      mov d, _toktype ; $toktype
7578   345B DA            push d
7579   345C FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7579   3460 00 00 
7580   3462 E7            pop d
7581   3463 FD 43         mov [d], b
7582   3465 0A 08 36      jmp _if177_exit
7583   3468             _if177_else:
7584   3468             ; if(*prog == ':'){ 
7585   3468             _if178_cond:
7586   3468 3B 63 4E      mov d, _prog ; $prog
7587   346B 2A            mov b, [d]
7588   346C 38 00 00      mov c, 0
7589   346F 74            mov d, b
7590   3470 32            mov bl, [d]
7591   3471 A7 00         mov bh, 0
7592   3473 38 00 00      mov c, 0
7593   3476             ; --- START RELATIONAL
7594   3476 D7            push a
7595   3477 11            mov a, b
7596   3478 FD 2E 3A 00   mov32 cb, $0000003a
7596   347C 00 00 
7597   347E B0            cmp a, b
7598   347F FD 71         seq ; ==
7599   3481 E4            pop a
7600   3482             ; --- END RELATIONAL
7601   3482 C0 00 00      cmp b, 0
7602   3485 C6 D0 34      je _if178_else
7603   3488             _if178_TRUE:
7604   3488             ; *t++ = *prog++; 
7605   3488 FA FF FF      lea d, [bp + -1] ; $t
7606   348B 2A            mov b, [d]
7607   348C 38 00 00      mov c, 0
7608   348F FD 77         inc b
7609   3491 FA FF FF      lea d, [bp + -1] ; $t
7610   3494 FD 43         mov [d], b
7611   3496 FD 7D         dec b
7612   3498 D8            push b
7613   3499 3B 63 4E      mov d, _prog ; $prog
7614   349C 2A            mov b, [d]
7615   349D 38 00 00      mov c, 0
7616   34A0 FD 77         inc b
7617   34A2 3B 63 4E      mov d, _prog ; $prog
7618   34A5 FD 43         mov [d], b
7619   34A7 FD 7D         dec b
7620   34A9 74            mov d, b
7621   34AA 32            mov bl, [d]
7622   34AB A7 00         mov bh, 0
7623   34AD 38 00 00      mov c, 0
7624   34B0 E7            pop d
7625   34B1 FD 3E         mov [d], bl
7626   34B3             ; tok = COLON; 
7627   34B3 3B 5F 4E      mov d, _tok ; $tok
7628   34B6 DA            push d
7629   34B7 FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
7629   34BB 00 00 
7630   34BD E7            pop d
7631   34BE FD 43         mov [d], b
7632   34C0             ; toktype = DELIMITER;   
7633   34C0 3B 61 4E      mov d, _toktype ; $toktype
7634   34C3 DA            push d
7635   34C4 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7635   34C8 00 00 
7636   34CA E7            pop d
7637   34CB FD 43         mov [d], b
7638   34CD 0A 08 36      jmp _if178_exit
7639   34D0             _if178_else:
7640   34D0             ; if(*prog == ';'){ 
7641   34D0             _if179_cond:
7642   34D0 3B 63 4E      mov d, _prog ; $prog
7643   34D3 2A            mov b, [d]
7644   34D4 38 00 00      mov c, 0
7645   34D7 74            mov d, b
7646   34D8 32            mov bl, [d]
7647   34D9 A7 00         mov bh, 0
7648   34DB 38 00 00      mov c, 0
7649   34DE             ; --- START RELATIONAL
7650   34DE D7            push a
7651   34DF 11            mov a, b
7652   34E0 FD 2E 3B 00   mov32 cb, $0000003b
7652   34E4 00 00 
7653   34E6 B0            cmp a, b
7654   34E7 FD 71         seq ; ==
7655   34E9 E4            pop a
7656   34EA             ; --- END RELATIONAL
7657   34EA C0 00 00      cmp b, 0
7658   34ED C6 38 35      je _if179_else
7659   34F0             _if179_TRUE:
7660   34F0             ; *t++ = *prog++; 
7661   34F0 FA FF FF      lea d, [bp + -1] ; $t
7662   34F3 2A            mov b, [d]
7663   34F4 38 00 00      mov c, 0
7664   34F7 FD 77         inc b
7665   34F9 FA FF FF      lea d, [bp + -1] ; $t
7666   34FC FD 43         mov [d], b
7667   34FE FD 7D         dec b
7668   3500 D8            push b
7669   3501 3B 63 4E      mov d, _prog ; $prog
7670   3504 2A            mov b, [d]
7671   3505 38 00 00      mov c, 0
7672   3508 FD 77         inc b
7673   350A 3B 63 4E      mov d, _prog ; $prog
7674   350D FD 43         mov [d], b
7675   350F FD 7D         dec b
7676   3511 74            mov d, b
7677   3512 32            mov bl, [d]
7678   3513 A7 00         mov bh, 0
7679   3515 38 00 00      mov c, 0
7680   3518 E7            pop d
7681   3519 FD 3E         mov [d], bl
7682   351B             ; tok = SEMICOLON; 
7683   351B 3B 5F 4E      mov d, _tok ; $tok
7684   351E DA            push d
7685   351F FD 2E 0E 00   mov32 cb, $e ; enum element: SEMICOLON
7685   3523 00 00 
7686   3525 E7            pop d
7687   3526 FD 43         mov [d], b
7688   3528             ; toktype = DELIMITER;   
7689   3528 3B 61 4E      mov d, _toktype ; $toktype
7690   352B DA            push d
7691   352C FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7691   3530 00 00 
7692   3532 E7            pop d
7693   3533 FD 43         mov [d], b
7694   3535 0A 08 36      jmp _if179_exit
7695   3538             _if179_else:
7696   3538             ; if(*prog == ','){ 
7697   3538             _if180_cond:
7698   3538 3B 63 4E      mov d, _prog ; $prog
7699   353B 2A            mov b, [d]
7700   353C 38 00 00      mov c, 0
7701   353F 74            mov d, b
7702   3540 32            mov bl, [d]
7703   3541 A7 00         mov bh, 0
7704   3543 38 00 00      mov c, 0
7705   3546             ; --- START RELATIONAL
7706   3546 D7            push a
7707   3547 11            mov a, b
7708   3548 FD 2E 2C 00   mov32 cb, $0000002c
7708   354C 00 00 
7709   354E B0            cmp a, b
7710   354F FD 71         seq ; ==
7711   3551 E4            pop a
7712   3552             ; --- END RELATIONAL
7713   3552 C0 00 00      cmp b, 0
7714   3555 C6 A0 35      je _if180_else
7715   3558             _if180_TRUE:
7716   3558             ; *t++ = *prog++; 
7717   3558 FA FF FF      lea d, [bp + -1] ; $t
7718   355B 2A            mov b, [d]
7719   355C 38 00 00      mov c, 0
7720   355F FD 77         inc b
7721   3561 FA FF FF      lea d, [bp + -1] ; $t
7722   3564 FD 43         mov [d], b
7723   3566 FD 7D         dec b
7724   3568 D8            push b
7725   3569 3B 63 4E      mov d, _prog ; $prog
7726   356C 2A            mov b, [d]
7727   356D 38 00 00      mov c, 0
7728   3570 FD 77         inc b
7729   3572 3B 63 4E      mov d, _prog ; $prog
7730   3575 FD 43         mov [d], b
7731   3577 FD 7D         dec b
7732   3579 74            mov d, b
7733   357A 32            mov bl, [d]
7734   357B A7 00         mov bh, 0
7735   357D 38 00 00      mov c, 0
7736   3580 E7            pop d
7737   3581 FD 3E         mov [d], bl
7738   3583             ; tok = COMMA; 
7739   3583 3B 5F 4E      mov d, _tok ; $tok
7740   3586 DA            push d
7741   3587 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
7741   358B 00 00 
7742   358D E7            pop d
7743   358E FD 43         mov [d], b
7744   3590             ; toktype = DELIMITER;   
7745   3590 3B 61 4E      mov d, _toktype ; $toktype
7746   3593 DA            push d
7747   3594 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7747   3598 00 00 
7748   359A E7            pop d
7749   359B FD 43         mov [d], b
7750   359D 0A 08 36      jmp _if180_exit
7751   35A0             _if180_else:
7752   35A0             ; if(*prog == '.'){ 
7753   35A0             _if181_cond:
7754   35A0 3B 63 4E      mov d, _prog ; $prog
7755   35A3 2A            mov b, [d]
7756   35A4 38 00 00      mov c, 0
7757   35A7 74            mov d, b
7758   35A8 32            mov bl, [d]
7759   35A9 A7 00         mov bh, 0
7760   35AB 38 00 00      mov c, 0
7761   35AE             ; --- START RELATIONAL
7762   35AE D7            push a
7763   35AF 11            mov a, b
7764   35B0 FD 2E 2E 00   mov32 cb, $0000002e
7764   35B4 00 00 
7765   35B6 B0            cmp a, b
7766   35B7 FD 71         seq ; ==
7767   35B9 E4            pop a
7768   35BA             ; --- END RELATIONAL
7769   35BA C0 00 00      cmp b, 0
7770   35BD C6 08 36      je _if181_exit
7771   35C0             _if181_TRUE:
7772   35C0             ; *t++ = *prog++; 
7773   35C0 FA FF FF      lea d, [bp + -1] ; $t
7774   35C3 2A            mov b, [d]
7775   35C4 38 00 00      mov c, 0
7776   35C7 FD 77         inc b
7777   35C9 FA FF FF      lea d, [bp + -1] ; $t
7778   35CC FD 43         mov [d], b
7779   35CE FD 7D         dec b
7780   35D0 D8            push b
7781   35D1 3B 63 4E      mov d, _prog ; $prog
7782   35D4 2A            mov b, [d]
7783   35D5 38 00 00      mov c, 0
7784   35D8 FD 77         inc b
7785   35DA 3B 63 4E      mov d, _prog ; $prog
7786   35DD FD 43         mov [d], b
7787   35DF FD 7D         dec b
7788   35E1 74            mov d, b
7789   35E2 32            mov bl, [d]
7790   35E3 A7 00         mov bh, 0
7791   35E5 38 00 00      mov c, 0
7792   35E8 E7            pop d
7793   35E9 FD 3E         mov [d], bl
7794   35EB             ; tok = DOT; 
7795   35EB 3B 5F 4E      mov d, _tok ; $tok
7796   35EE DA            push d
7797   35EF FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
7797   35F3 00 00 
7798   35F5 E7            pop d
7799   35F6 FD 43         mov [d], b
7800   35F8             ; toktype = DELIMITER;   
7801   35F8 3B 61 4E      mov d, _toktype ; $toktype
7802   35FB DA            push d
7803   35FC FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
7803   3600 00 00 
7804   3602 E7            pop d
7805   3603 FD 43         mov [d], b
7806   3605 0A 08 36      jmp _if181_exit
7807   3608             _if181_exit:
7808   3608             _if180_exit:
7809   3608             _if179_exit:
7810   3608             _if178_exit:
7811   3608             _if177_exit:
7812   3608             _if176_exit:
7813   3608             _if175_exit:
7814   3608             _if174_exit:
7815   3608             _if173_exit:
7816   3608             _if170_exit:
7817   3608             _if167_exit:
7818   3608             _if163_exit:
7819   3608             _if160_exit:
7820   3608             ; *t = '\0'; 
7821   3608 FA FF FF      lea d, [bp + -1] ; $t
7822   360B 2A            mov b, [d]
7823   360C 38 00 00      mov c, 0
7824   360F D8            push b
7825   3610 FD 2E 00 00   mov32 cb, $00000000
7825   3614 00 00 
7826   3616 E7            pop d
7827   3617 FD 3E         mov [d], bl
7828   3619             ; if(toktype == TYPE_UNDEF){ 
7829   3619             _if182_cond:
7830   3619 3B 61 4E      mov d, _toktype ; $toktype
7831   361C 2A            mov b, [d]
7832   361D 38 00 00      mov c, 0
7833   3620             ; --- START RELATIONAL
7834   3620 D7            push a
7835   3621 11            mov a, b
7836   3622 FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
7836   3626 00 00 
7837   3628 B0            cmp a, b
7838   3629 FD 71         seq ; ==
7839   362B E4            pop a
7840   362C             ; --- END RELATIONAL
7841   362C C0 00 00      cmp b, 0
7842   362F C6 9A 36      je _if182_exit
7843   3632             _if182_TRUE:
7844   3632             ; printf("TOKEN ERROR. Prog: %x\n", (int)(prog-program));  
7845   3632             ; --- START FUNCTION CALL
7846   3632 3B 63 4E      mov d, _prog ; $prog
7847   3635 2A            mov b, [d]
7848   3636 38 00 00      mov c, 0
7849   3639             ; --- START TERMS
7850   3639 D7            push a
7851   363A 11            mov a, b
7852   363B 3B A7 4F      mov d, _program ; $program
7853   363E 2A            mov b, [d]
7854   363F 38 00 00      mov c, 0
7855   3642 60            sub a, b
7856   3643 27            mov b, a
7857   3644 E4            pop a
7858   3645             ; --- END TERMS
7859   3645 AB            snex b
7860   3646 FD AB         swp b
7861   3648 D8            push b
7862   3649 26 0D 53      mov b, _s75 ; "TOKEN ERROR. Prog: %x\n"
7863   364C FD AB         swp b
7864   364E D8            push b
7865   364F 07 84 42      call printf
7866   3652 51 04 00      add sp, 4
7867   3655             ; --- END FUNCTION CALL
7868   3655             ; printf("ProgVal: %x", *prog);  
7869   3655             ; --- START FUNCTION CALL
7870   3655 3B 63 4E      mov d, _prog ; $prog
7871   3658 2A            mov b, [d]
7872   3659 38 00 00      mov c, 0
7873   365C 74            mov d, b
7874   365D 32            mov bl, [d]
7875   365E A7 00         mov bh, 0
7876   3660 38 00 00      mov c, 0
7877   3663 FD AB         swp b
7878   3665 D8            push b
7879   3666 26 24 53      mov b, _s76 ; "ProgVal: %x"
7880   3669 FD AB         swp b
7881   366B D8            push b
7882   366C 07 84 42      call printf
7883   366F 51 04 00      add sp, 4
7884   3672             ; --- END FUNCTION CALL
7885   3672             ; printf("\n Text after prog: %s\n", prog); 
7886   3672             ; --- START FUNCTION CALL
7887   3672 3B 63 4E      mov d, _prog ; $prog
7888   3675 2A            mov b, [d]
7889   3676 38 00 00      mov c, 0
7890   3679 FD AB         swp b
7891   367B D8            push b
7892   367C 26 30 53      mov b, _s77 ; "\n Text after prog: %s\n"
7893   367F FD AB         swp b
7894   3681 D8            push b
7895   3682 07 84 42      call printf
7896   3685 51 04 00      add sp, 4
7897   3688             ; --- END FUNCTION CALL
7898   3688             ; exit(1); 
7899   3688             ; --- START FUNCTION CALL
7900   3688 FD 2E 01 00   mov32 cb, $00000001
7900   368C 00 00 
7901   368E FD AB         swp b
7902   3690 D8            push b
7903   3691 07 78 4B      call exit
7904   3694 51 02 00      add sp, 2
7905   3697             ; --- END FUNCTION CALL
7906   3697 0A 9A 36      jmp _if182_exit
7907   369A             _if182_exit:
7908   369A F9            leave
7909   369B 09            ret
7910   369C             
7911   369C             convert_constant:
7912   369C F8 00 00      enter 0 ; (push bp; mov bp, sp)
7913   369F             ; char *s; 
7914   369F 52 02 00      sub sp, 2
7915   36A2             ; char *t; 
7916   36A2 52 02 00      sub sp, 2
7917   36A5             ; t = token; 
7918   36A5 FA FD FF      lea d, [bp + -3] ; $t
7919   36A8 DA            push d
7920   36A9 3B 65 4E      mov d, _token_data ; $token
7921   36AC 2D            mov b, d
7922   36AD 38 00 00      mov c, 0
7923   36B0 E7            pop d
7924   36B1 FD 43         mov [d], b
7925   36B3             ; s = string_const; 
7926   36B3 FA FF FF      lea d, [bp + -1] ; $s
7927   36B6 DA            push d
7928   36B7 3B A5 4E      mov d, _string_const_data ; $string_const
7929   36BA 2D            mov b, d
7930   36BB 38 00 00      mov c, 0
7931   36BE E7            pop d
7932   36BF FD 43         mov [d], b
7933   36C1             ; if(toktype == CHAR_CONST){ 
7934   36C1             _if183_cond:
7935   36C1 3B 61 4E      mov d, _toktype ; $toktype
7936   36C4 2A            mov b, [d]
7937   36C5 38 00 00      mov c, 0
7938   36C8             ; --- START RELATIONAL
7939   36C8 D7            push a
7940   36C9 11            mov a, b
7941   36CA FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
7941   36CE 00 00 
7942   36D0 B0            cmp a, b
7943   36D1 FD 71         seq ; ==
7944   36D3 E4            pop a
7945   36D4             ; --- END RELATIONAL
7946   36D4 C0 00 00      cmp b, 0
7947   36D7 C6 C6 38      je _if183_else
7948   36DA             _if183_TRUE:
7949   36DA             ; t++; 
7950   36DA FA FD FF      lea d, [bp + -3] ; $t
7951   36DD 2A            mov b, [d]
7952   36DE 38 00 00      mov c, 0
7953   36E1 FD 77         inc b
7954   36E3 FA FD FF      lea d, [bp + -3] ; $t
7955   36E6 FD 43         mov [d], b
7956   36E8 FD 7D         dec b
7957   36EA             ; if(*t == '\\'){ 
7958   36EA             _if184_cond:
7959   36EA FA FD FF      lea d, [bp + -3] ; $t
7960   36ED 2A            mov b, [d]
7961   36EE 38 00 00      mov c, 0
7962   36F1 74            mov d, b
7963   36F2 32            mov bl, [d]
7964   36F3 A7 00         mov bh, 0
7965   36F5 38 00 00      mov c, 0
7966   36F8             ; --- START RELATIONAL
7967   36F8 D7            push a
7968   36F9 11            mov a, b
7969   36FA FD 2E 5C 00   mov32 cb, $0000005c
7969   36FE 00 00 
7970   3700 B0            cmp a, b
7971   3701 FD 71         seq ; ==
7972   3703 E4            pop a
7973   3704             ; --- END RELATIONAL
7974   3704 C0 00 00      cmp b, 0
7975   3707 C6 A1 38      je _if184_else
7976   370A             _if184_TRUE:
7977   370A             ; t++; 
7978   370A FA FD FF      lea d, [bp + -3] ; $t
7979   370D 2A            mov b, [d]
7980   370E 38 00 00      mov c, 0
7981   3711 FD 77         inc b
7982   3713 FA FD FF      lea d, [bp + -3] ; $t
7983   3716 FD 43         mov [d], b
7984   3718 FD 7D         dec b
7985   371A             ; switch(*t){ 
7986   371A             _switch185_expr:
7987   371A FA FD FF      lea d, [bp + -3] ; $t
7988   371D 2A            mov b, [d]
7989   371E 38 00 00      mov c, 0
7990   3721 74            mov d, b
7991   3722 32            mov bl, [d]
7992   3723 A7 00         mov bh, 0
7993   3725 38 00 00      mov c, 0
7994   3728             _switch185_comparisons:
7995   3728 C1 30         cmp bl, $30
7996   372A C6 62 37      je _switch185_case0
7997   372D C1 61         cmp bl, $61
7998   372F C6 7F 37      je _switch185_case1
7999   3732 C1 62         cmp bl, $62
8000   3734 C6 9C 37      je _switch185_case2
8001   3737 C1 66         cmp bl, $66
8002   3739 C6 B9 37      je _switch185_case3
8003   373C C1 6E         cmp bl, $6e
8004   373E C6 D6 37      je _switch185_case4
8005   3741 C1 72         cmp bl, $72
8006   3743 C6 F3 37      je _switch185_case5
8007   3746 C1 74         cmp bl, $74
8008   3748 C6 10 38      je _switch185_case6
8009   374B C1 76         cmp bl, $76
8010   374D C6 2D 38      je _switch185_case7
8011   3750 C1 5C         cmp bl, $5c
8012   3752 C6 4A 38      je _switch185_case8
8013   3755 C1 27         cmp bl, $27
8014   3757 C6 67 38      je _switch185_case9
8015   375A C1 22         cmp bl, $22
8016   375C C6 84 38      je _switch185_case10
8017   375F 0A 9E 38      jmp _switch185_exit
8018   3762             _switch185_case0:
8019   3762             ; *s++ = '\0'; 
8020   3762 FA FF FF      lea d, [bp + -1] ; $s
8021   3765 2A            mov b, [d]
8022   3766 38 00 00      mov c, 0
8023   3769 FD 77         inc b
8024   376B FA FF FF      lea d, [bp + -1] ; $s
8025   376E FD 43         mov [d], b
8026   3770 FD 7D         dec b
8027   3772 D8            push b
8028   3773 FD 2E 00 00   mov32 cb, $00000000
8028   3777 00 00 
8029   3779 E7            pop d
8030   377A FD 3E         mov [d], bl
8031   377C             ; break; 
8032   377C 0A 9E 38      jmp _switch185_exit ; case break
8033   377F             _switch185_case1:
8034   377F             ; *s++ = '\a'; 
8035   377F FA FF FF      lea d, [bp + -1] ; $s
8036   3782 2A            mov b, [d]
8037   3783 38 00 00      mov c, 0
8038   3786 FD 77         inc b
8039   3788 FA FF FF      lea d, [bp + -1] ; $s
8040   378B FD 43         mov [d], b
8041   378D FD 7D         dec b
8042   378F D8            push b
8043   3790 FD 2E 07 00   mov32 cb, $00000007
8043   3794 00 00 
8044   3796 E7            pop d
8045   3797 FD 3E         mov [d], bl
8046   3799             ; break; 
8047   3799 0A 9E 38      jmp _switch185_exit ; case break
8048   379C             _switch185_case2:
8049   379C             ; *s++ = '\b'; 
8050   379C FA FF FF      lea d, [bp + -1] ; $s
8051   379F 2A            mov b, [d]
8052   37A0 38 00 00      mov c, 0
8053   37A3 FD 77         inc b
8054   37A5 FA FF FF      lea d, [bp + -1] ; $s
8055   37A8 FD 43         mov [d], b
8056   37AA FD 7D         dec b
8057   37AC D8            push b
8058   37AD FD 2E 08 00   mov32 cb, $00000008
8058   37B1 00 00 
8059   37B3 E7            pop d
8060   37B4 FD 3E         mov [d], bl
8061   37B6             ; break;   
8062   37B6 0A 9E 38      jmp _switch185_exit ; case break
8063   37B9             _switch185_case3:
8064   37B9             ; *s++ = '\f'; 
8065   37B9 FA FF FF      lea d, [bp + -1] ; $s
8066   37BC 2A            mov b, [d]
8067   37BD 38 00 00      mov c, 0
8068   37C0 FD 77         inc b
8069   37C2 FA FF FF      lea d, [bp + -1] ; $s
8070   37C5 FD 43         mov [d], b
8071   37C7 FD 7D         dec b
8072   37C9 D8            push b
8073   37CA FD 2E 0C 00   mov32 cb, $0000000c
8073   37CE 00 00 
8074   37D0 E7            pop d
8075   37D1 FD 3E         mov [d], bl
8076   37D3             ; break; 
8077   37D3 0A 9E 38      jmp _switch185_exit ; case break
8078   37D6             _switch185_case4:
8079   37D6             ; *s++ = '\n'; 
8080   37D6 FA FF FF      lea d, [bp + -1] ; $s
8081   37D9 2A            mov b, [d]
8082   37DA 38 00 00      mov c, 0
8083   37DD FD 77         inc b
8084   37DF FA FF FF      lea d, [bp + -1] ; $s
8085   37E2 FD 43         mov [d], b
8086   37E4 FD 7D         dec b
8087   37E6 D8            push b
8088   37E7 FD 2E 0A 00   mov32 cb, $0000000a
8088   37EB 00 00 
8089   37ED E7            pop d
8090   37EE FD 3E         mov [d], bl
8091   37F0             ; break; 
8092   37F0 0A 9E 38      jmp _switch185_exit ; case break
8093   37F3             _switch185_case5:
8094   37F3             ; *s++ = '\r'; 
8095   37F3 FA FF FF      lea d, [bp + -1] ; $s
8096   37F6 2A            mov b, [d]
8097   37F7 38 00 00      mov c, 0
8098   37FA FD 77         inc b
8099   37FC FA FF FF      lea d, [bp + -1] ; $s
8100   37FF FD 43         mov [d], b
8101   3801 FD 7D         dec b
8102   3803 D8            push b
8103   3804 FD 2E 0D 00   mov32 cb, $0000000d
8103   3808 00 00 
8104   380A E7            pop d
8105   380B FD 3E         mov [d], bl
8106   380D             ; break; 
8107   380D 0A 9E 38      jmp _switch185_exit ; case break
8108   3810             _switch185_case6:
8109   3810             ; *s++ = '\t'; 
8110   3810 FA FF FF      lea d, [bp + -1] ; $s
8111   3813 2A            mov b, [d]
8112   3814 38 00 00      mov c, 0
8113   3817 FD 77         inc b
8114   3819 FA FF FF      lea d, [bp + -1] ; $s
8115   381C FD 43         mov [d], b
8116   381E FD 7D         dec b
8117   3820 D8            push b
8118   3821 FD 2E 09 00   mov32 cb, $00000009
8118   3825 00 00 
8119   3827 E7            pop d
8120   3828 FD 3E         mov [d], bl
8121   382A             ; break; 
8122   382A 0A 9E 38      jmp _switch185_exit ; case break
8123   382D             _switch185_case7:
8124   382D             ; *s++ = '\v'; 
8125   382D FA FF FF      lea d, [bp + -1] ; $s
8126   3830 2A            mov b, [d]
8127   3831 38 00 00      mov c, 0
8128   3834 FD 77         inc b
8129   3836 FA FF FF      lea d, [bp + -1] ; $s
8130   3839 FD 43         mov [d], b
8131   383B FD 7D         dec b
8132   383D D8            push b
8133   383E FD 2E 0B 00   mov32 cb, $0000000b
8133   3842 00 00 
8134   3844 E7            pop d
8135   3845 FD 3E         mov [d], bl
8136   3847             ; break; 
8137   3847 0A 9E 38      jmp _switch185_exit ; case break
8138   384A             _switch185_case8:
8139   384A             ; *s++ = '\\'; 
8140   384A FA FF FF      lea d, [bp + -1] ; $s
8141   384D 2A            mov b, [d]
8142   384E 38 00 00      mov c, 0
8143   3851 FD 77         inc b
8144   3853 FA FF FF      lea d, [bp + -1] ; $s
8145   3856 FD 43         mov [d], b
8146   3858 FD 7D         dec b
8147   385A D8            push b
8148   385B FD 2E 5C 00   mov32 cb, $0000005c
8148   385F 00 00 
8149   3861 E7            pop d
8150   3862 FD 3E         mov [d], bl
8151   3864             ; break; 
8152   3864 0A 9E 38      jmp _switch185_exit ; case break
8153   3867             _switch185_case9:
8154   3867             ; *s++ = '\''; 
8155   3867 FA FF FF      lea d, [bp + -1] ; $s
8156   386A 2A            mov b, [d]
8157   386B 38 00 00      mov c, 0
8158   386E FD 77         inc b
8159   3870 FA FF FF      lea d, [bp + -1] ; $s
8160   3873 FD 43         mov [d], b
8161   3875 FD 7D         dec b
8162   3877 D8            push b
8163   3878 FD 2E 27 00   mov32 cb, $00000027
8163   387C 00 00 
8164   387E E7            pop d
8165   387F FD 3E         mov [d], bl
8166   3881             ; break; 
8167   3881 0A 9E 38      jmp _switch185_exit ; case break
8168   3884             _switch185_case10:
8169   3884             ; *s++ = '\"'; 
8170   3884 FA FF FF      lea d, [bp + -1] ; $s
8171   3887 2A            mov b, [d]
8172   3888 38 00 00      mov c, 0
8173   388B FD 77         inc b
8174   388D FA FF FF      lea d, [bp + -1] ; $s
8175   3890 FD 43         mov [d], b
8176   3892 FD 7D         dec b
8177   3894 D8            push b
8178   3895 FD 2E 22 00   mov32 cb, $00000022
8178   3899 00 00 
8179   389B E7            pop d
8180   389C FD 3E         mov [d], bl
8181   389E             _switch185_exit:
8182   389E 0A C3 38      jmp _if184_exit
8183   38A1             _if184_else:
8184   38A1             ; *s++ = *t; 
8185   38A1 FA FF FF      lea d, [bp + -1] ; $s
8186   38A4 2A            mov b, [d]
8187   38A5 38 00 00      mov c, 0
8188   38A8 FD 77         inc b
8189   38AA FA FF FF      lea d, [bp + -1] ; $s
8190   38AD FD 43         mov [d], b
8191   38AF FD 7D         dec b
8192   38B1 D8            push b
8193   38B2 FA FD FF      lea d, [bp + -3] ; $t
8194   38B5 2A            mov b, [d]
8195   38B6 38 00 00      mov c, 0
8196   38B9 74            mov d, b
8197   38BA 32            mov bl, [d]
8198   38BB A7 00         mov bh, 0
8199   38BD 38 00 00      mov c, 0
8200   38C0 E7            pop d
8201   38C1 FD 3E         mov [d], bl
8202   38C3             _if184_exit:
8203   38C3 0A 53 39      jmp _if183_exit
8204   38C6             _if183_else:
8205   38C6             ; if(toktype == STRING_CONST){ 
8206   38C6             _if186_cond:
8207   38C6 3B 61 4E      mov d, _toktype ; $toktype
8208   38C9 2A            mov b, [d]
8209   38CA 38 00 00      mov c, 0
8210   38CD             ; --- START RELATIONAL
8211   38CD D7            push a
8212   38CE 11            mov a, b
8213   38CF FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
8213   38D3 00 00 
8214   38D5 B0            cmp a, b
8215   38D6 FD 71         seq ; ==
8216   38D8 E4            pop a
8217   38D9             ; --- END RELATIONAL
8218   38D9 C0 00 00      cmp b, 0
8219   38DC C6 53 39      je _if186_exit
8220   38DF             _if186_TRUE:
8221   38DF             ; t++; 
8222   38DF FA FD FF      lea d, [bp + -3] ; $t
8223   38E2 2A            mov b, [d]
8224   38E3 38 00 00      mov c, 0
8225   38E6 FD 77         inc b
8226   38E8 FA FD FF      lea d, [bp + -3] ; $t
8227   38EB FD 43         mov [d], b
8228   38ED FD 7D         dec b
8229   38EF             ; while(*t != '\"' && *t){ 
8230   38EF             _while187_cond:
8231   38EF FA FD FF      lea d, [bp + -3] ; $t
8232   38F2 2A            mov b, [d]
8233   38F3 38 00 00      mov c, 0
8234   38F6 74            mov d, b
8235   38F7 32            mov bl, [d]
8236   38F8 A7 00         mov bh, 0
8237   38FA 38 00 00      mov c, 0
8238   38FD             ; --- START RELATIONAL
8239   38FD D7            push a
8240   38FE 11            mov a, b
8241   38FF FD 2E 22 00   mov32 cb, $00000022
8241   3903 00 00 
8242   3905 B0            cmp a, b
8243   3906 FD 72         sneq ; !=
8244   3908 E4            pop a
8245   3909             ; --- END RELATIONAL
8246   3909             ; --- START LOGICAL AND
8247   3909 D7            push a
8248   390A 11            mov a, b
8249   390B FA FD FF      lea d, [bp + -3] ; $t
8250   390E 2A            mov b, [d]
8251   390F 38 00 00      mov c, 0
8252   3912 74            mov d, b
8253   3913 32            mov bl, [d]
8254   3914 A7 00         mov bh, 0
8255   3916 38 00 00      mov c, 0
8256   3919 FD A7         sand a, b
8257   391B E4            pop a
8258   391C             ; --- END LOGICAL AND
8259   391C C0 00 00      cmp b, 0
8260   391F C6 50 39      je _while187_exit
8261   3922             _while187_block:
8262   3922             ; *s++ = *t++; 
8263   3922 FA FF FF      lea d, [bp + -1] ; $s
8264   3925 2A            mov b, [d]
8265   3926 38 00 00      mov c, 0
8266   3929 FD 77         inc b
8267   392B FA FF FF      lea d, [bp + -1] ; $s
8268   392E FD 43         mov [d], b
8269   3930 FD 7D         dec b
8270   3932 D8            push b
8271   3933 FA FD FF      lea d, [bp + -3] ; $t
8272   3936 2A            mov b, [d]
8273   3937 38 00 00      mov c, 0
8274   393A FD 77         inc b
8275   393C FA FD FF      lea d, [bp + -3] ; $t
8276   393F FD 43         mov [d], b
8277   3941 FD 7D         dec b
8278   3943 74            mov d, b
8279   3944 32            mov bl, [d]
8280   3945 A7 00         mov bh, 0
8281   3947 38 00 00      mov c, 0
8282   394A E7            pop d
8283   394B FD 3E         mov [d], bl
8284   394D 0A EF 38      jmp _while187_cond
8285   3950             _while187_exit:
8286   3950 0A 53 39      jmp _if186_exit
8287   3953             _if186_exit:
8288   3953             _if183_exit:
8289   3953             ; *s = '\0'; 
8290   3953 FA FF FF      lea d, [bp + -1] ; $s
8291   3956 2A            mov b, [d]
8292   3957 38 00 00      mov c, 0
8293   395A D8            push b
8294   395B FD 2E 00 00   mov32 cb, $00000000
8294   395F 00 00 
8295   3961 E7            pop d
8296   3962 FD 3E         mov [d], bl
8297   3964 F9            leave
8298   3965 09            ret
8299   3966             
8300   3966             error:
8301   3966 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8302   3969             ; printf("\nError: %s\n", msg); 
8303   3969             ; --- START FUNCTION CALL
8304   3969 FA 05 00      lea d, [bp + 5] ; $msg
8305   396C 2A            mov b, [d]
8306   396D 38 00 00      mov c, 0
8307   3970 FD AB         swp b
8308   3972 D8            push b
8309   3973 26 47 53      mov b, _s78 ; "\nError: %s\n"
8310   3976 FD AB         swp b
8311   3978 D8            push b
8312   3979 07 84 42      call printf
8313   397C 51 04 00      add sp, 4
8314   397F             ; --- END FUNCTION CALL
8315   397F             ; exit(1); 
8316   397F             ; --- START FUNCTION CALL
8317   397F FD 2E 01 00   mov32 cb, $00000001
8317   3983 00 00 
8318   3985 FD AB         swp b
8319   3987 D8            push b
8320   3988 07 78 4B      call exit
8321   398B 51 02 00      add sp, 2
8322   398E             ; --- END FUNCTION CALL
8323   398E F9            leave
8324   398F 09            ret
8325   3990             
8326   3990             error_s:
8327   3990 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8328   3993             ; printf("\nError: %s %s\n", msg, param); 
8329   3993             ; --- START FUNCTION CALL
8330   3993 FA 07 00      lea d, [bp + 7] ; $param
8331   3996 2A            mov b, [d]
8332   3997 38 00 00      mov c, 0
8333   399A FD AB         swp b
8334   399C D8            push b
8335   399D FA 05 00      lea d, [bp + 5] ; $msg
8336   39A0 2A            mov b, [d]
8337   39A1 38 00 00      mov c, 0
8338   39A4 FD AB         swp b
8339   39A6 D8            push b
8340   39A7 26 53 53      mov b, _s79 ; "\nError: %s %s\n"
8341   39AA FD AB         swp b
8342   39AC D8            push b
8343   39AD 07 84 42      call printf
8344   39B0 51 06 00      add sp, 6
8345   39B3             ; --- END FUNCTION CALL
8346   39B3             ; exit(1); 
8347   39B3             ; --- START FUNCTION CALL
8348   39B3 FD 2E 01 00   mov32 cb, $00000001
8348   39B7 00 00 
8349   39B9 FD AB         swp b
8350   39BB D8            push b
8351   39BC 07 78 4B      call exit
8352   39BF 51 02 00      add sp, 2
8353   39C2             ; --- END FUNCTION CALL
8354   39C2 F9            leave
8355   39C3 09            ret
8356   39C4             
8357   39C4             push_prog:
8358   39C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8359   39C7             ; if(prog_tos == 10) error("Cannot push prog. Stack overflow."); 
8360   39C7             _if188_cond:
8361   39C7 3B C3 4F      mov d, _prog_tos ; $prog_tos
8362   39CA 2A            mov b, [d]
8363   39CB 38 00 00      mov c, 0
8364   39CE             ; --- START RELATIONAL
8365   39CE D7            push a
8366   39CF 11            mov a, b
8367   39D0 FD 2E 0A 00   mov32 cb, $0000000a
8367   39D4 00 00 
8368   39D6 B0            cmp a, b
8369   39D7 FD 71         seq ; ==
8370   39D9 E4            pop a
8371   39DA             ; --- END RELATIONAL
8372   39DA C0 00 00      cmp b, 0
8373   39DD C6 EF 39      je _if188_exit
8374   39E0             _if188_TRUE:
8375   39E0             ; error("Cannot push prog. Stack overflow."); 
8376   39E0             ; --- START FUNCTION CALL
8377   39E0 26 62 53      mov b, _s80 ; "Cannot push prog. Stack overflow."
8378   39E3 FD AB         swp b
8379   39E5 D8            push b
8380   39E6 07 66 39      call error
8381   39E9 51 02 00      add sp, 2
8382   39EC             ; --- END FUNCTION CALL
8383   39EC 0A EF 39      jmp _if188_exit
8384   39EF             _if188_exit:
8385   39EF             ; prog_stack[prog_tos] = prog; 
8386   39EF 3B AF 4F      mov d, _prog_stack_data ; $prog_stack
8387   39F2 D7            push a
8388   39F3 DA            push d
8389   39F4 3B C3 4F      mov d, _prog_tos ; $prog_tos
8390   39F7 2A            mov b, [d]
8391   39F8 38 00 00      mov c, 0
8392   39FB E7            pop d
8393   39FC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8394   3A00 E4            pop a
8395   3A01 DA            push d
8396   3A02 3B 63 4E      mov d, _prog ; $prog
8397   3A05 2A            mov b, [d]
8398   3A06 38 00 00      mov c, 0
8399   3A09 E7            pop d
8400   3A0A FD 43         mov [d], b
8401   3A0C             ; prog_tos++; 
8402   3A0C 3B C3 4F      mov d, _prog_tos ; $prog_tos
8403   3A0F 2A            mov b, [d]
8404   3A10 38 00 00      mov c, 0
8405   3A13 11            mov a, b
8406   3A14 FD 77         inc b
8407   3A16 3B C3 4F      mov d, _prog_tos ; $prog_tos
8408   3A19 FD 43         mov [d], b
8409   3A1B 27            mov b, a
8410   3A1C F9            leave
8411   3A1D 09            ret
8412   3A1E             
8413   3A1E             pop_prog:
8414   3A1E F8 00 00      enter 0 ; (push bp; mov bp, sp)
8415   3A21             ; if(prog_tos == 0) error("Cannot pop prog. Stack overflow."); 
8416   3A21             _if189_cond:
8417   3A21 3B C3 4F      mov d, _prog_tos ; $prog_tos
8418   3A24 2A            mov b, [d]
8419   3A25 38 00 00      mov c, 0
8420   3A28             ; --- START RELATIONAL
8421   3A28 D7            push a
8422   3A29 11            mov a, b
8423   3A2A FD 2E 00 00   mov32 cb, $00000000
8423   3A2E 00 00 
8424   3A30 B0            cmp a, b
8425   3A31 FD 71         seq ; ==
8426   3A33 E4            pop a
8427   3A34             ; --- END RELATIONAL
8428   3A34 C0 00 00      cmp b, 0
8429   3A37 C6 49 3A      je _if189_exit
8430   3A3A             _if189_TRUE:
8431   3A3A             ; error("Cannot pop prog. Stack overflow."); 
8432   3A3A             ; --- START FUNCTION CALL
8433   3A3A 26 84 53      mov b, _s81 ; "Cannot pop prog. Stack overflow."
8434   3A3D FD AB         swp b
8435   3A3F D8            push b
8436   3A40 07 66 39      call error
8437   3A43 51 02 00      add sp, 2
8438   3A46             ; --- END FUNCTION CALL
8439   3A46 0A 49 3A      jmp _if189_exit
8440   3A49             _if189_exit:
8441   3A49             ; prog_tos--; 
8442   3A49 3B C3 4F      mov d, _prog_tos ; $prog_tos
8443   3A4C 2A            mov b, [d]
8444   3A4D 38 00 00      mov c, 0
8445   3A50 11            mov a, b
8446   3A51 FD 7D         dec b
8447   3A53 3B C3 4F      mov d, _prog_tos ; $prog_tos
8448   3A56 FD 43         mov [d], b
8449   3A58 27            mov b, a
8450   3A59             ; prog = prog_stack[prog_tos]; 
8451   3A59 3B 63 4E      mov d, _prog ; $prog
8452   3A5C DA            push d
8453   3A5D 3B AF 4F      mov d, _prog_stack_data ; $prog_stack
8454   3A60 D7            push a
8455   3A61 DA            push d
8456   3A62 3B C3 4F      mov d, _prog_tos ; $prog_tos
8457   3A65 2A            mov b, [d]
8458   3A66 38 00 00      mov c, 0
8459   3A69 E7            pop d
8460   3A6A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8461   3A6E E4            pop a
8462   3A6F 2A            mov b, [d]
8463   3A70 38 00 00      mov c, 0
8464   3A73 E7            pop d
8465   3A74 FD 43         mov [d], b
8466   3A76 F9            leave
8467   3A77 09            ret
8468   3A78             
8469   3A78             search_keyword:
8470   3A78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8471   3A7B             ; int i; 
8472   3A7B 52 02 00      sub sp, 2
8473   3A7E             ; for(i = 0; keywords[i].keyword[0]; i++) 
8474   3A7E             _for190_init:
8475   3A7E FA FF FF      lea d, [bp + -1] ; $i
8476   3A81 DA            push d
8477   3A82 FD 2E 00 00   mov32 cb, $00000000
8477   3A86 00 00 
8478   3A88 E7            pop d
8479   3A89 FD 43         mov [d], b
8480   3A8B             _for190_cond:
8481   3A8B 3B 22 4D      mov d, _keywords_data ; $keywords
8482   3A8E D7            push a
8483   3A8F DA            push d
8484   3A90 FA FF FF      lea d, [bp + -1] ; $i
8485   3A93 2A            mov b, [d]
8486   3A94 38 00 00      mov c, 0
8487   3A97 E7            pop d
8488   3A98 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8489   3A9C E4            pop a
8490   3A9D 58 00 00      add d, 0
8491   3AA0 D7            push a
8492   3AA1 DA            push d
8493   3AA2 FD 2E 00 00   mov32 cb, $00000000
8493   3AA6 00 00 
8494   3AA8 E7            pop d
8495   3AA9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8496   3AAD E4            pop a
8497   3AAE 32            mov bl, [d]
8498   3AAF A7 00         mov bh, 0
8499   3AB1 38 00 00      mov c, 0
8500   3AB4 C0 00 00      cmp b, 0
8501   3AB7 C6 1F 3B      je _for190_exit
8502   3ABA             _for190_block:
8503   3ABA             ; if (!strcmp(keywords[i].keyword, keyword)) return keywords[i].tok; 
8504   3ABA             _if191_cond:
8505   3ABA             ; --- START FUNCTION CALL
8506   3ABA FA 05 00      lea d, [bp + 5] ; $keyword
8507   3ABD 2A            mov b, [d]
8508   3ABE 38 00 00      mov c, 0
8509   3AC1 FD AB         swp b
8510   3AC3 D8            push b
8511   3AC4 3B 22 4D      mov d, _keywords_data ; $keywords
8512   3AC7 D7            push a
8513   3AC8 DA            push d
8514   3AC9 FA FF FF      lea d, [bp + -1] ; $i
8515   3ACC 2A            mov b, [d]
8516   3ACD 38 00 00      mov c, 0
8517   3AD0 E7            pop d
8518   3AD1 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8519   3AD5 E4            pop a
8520   3AD6 58 00 00      add d, 0
8521   3AD9 2A            mov b, [d]
8522   3ADA 38 00 00      mov c, 0
8523   3ADD FD AB         swp b
8524   3ADF D8            push b
8525   3AE0 07 B6 3F      call strcmp
8526   3AE3 51 04 00      add sp, 4
8527   3AE6             ; --- END FUNCTION CALL
8528   3AE6 C0 00 00      cmp b, 0
8529   3AE9 C6 0C 3B      je _if191_exit
8530   3AEC             _if191_TRUE:
8531   3AEC             ; return keywords[i].tok; 
8532   3AEC 3B 22 4D      mov d, _keywords_data ; $keywords
8533   3AEF D7            push a
8534   3AF0 DA            push d
8535   3AF1 FA FF FF      lea d, [bp + -1] ; $i
8536   3AF4 2A            mov b, [d]
8537   3AF5 38 00 00      mov c, 0
8538   3AF8 E7            pop d
8539   3AF9 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
8540   3AFD E4            pop a
8541   3AFE 58 02 00      add d, 2
8542   3B01 32            mov bl, [d]
8543   3B02 A7 00         mov bh, 0
8544   3B04 38 00 00      mov c, 0
8545   3B07 F9            leave
8546   3B08 09            ret
8547   3B09 0A 0C 3B      jmp _if191_exit
8548   3B0C             _if191_exit:
8549   3B0C             _for190_update:
8550   3B0C FA FF FF      lea d, [bp + -1] ; $i
8551   3B0F 2A            mov b, [d]
8552   3B10 38 00 00      mov c, 0
8553   3B13 11            mov a, b
8554   3B14 FD 77         inc b
8555   3B16 FA FF FF      lea d, [bp + -1] ; $i
8556   3B19 FD 43         mov [d], b
8557   3B1B 27            mov b, a
8558   3B1C 0A 8B 3A      jmp _for190_cond
8559   3B1F             _for190_exit:
8560   3B1F             ; return -1; 
8561   3B1F FD 2E FF FF   mov32 cb, $ffffffff
8561   3B23 FF FF 
8562   3B25 F9            leave
8563   3B26 09            ret
8564   3B27             
8565   3B27             hex_to_int:
8566   3B27 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8567   3B2A             ; int value = 0; 
8568   3B2A 52 02 00      sub sp, 2
8569   3B2D             ; --- START LOCAL VAR INITIALIZATION
8570   3B2D FA FF FF      lea d, [bp + -1] ; $value
8571   3B30 DA            push d
8572   3B31 FD 2E 00 00   mov32 cb, $00000000
8572   3B35 00 00 
8573   3B37 E7            pop d
8574   3B38 FD 43         mov [d], b
8575   3B3A             ; --- END LOCAL VAR INITIALIZATION
8576   3B3A             ; int i; 
8577   3B3A 52 02 00      sub sp, 2
8578   3B3D             ; char hex_char; 
8579   3B3D 52 01 00      sub sp, 1
8580   3B40             ; int len; 
8581   3B40 52 02 00      sub sp, 2
8582   3B43             ; len = strlen(hex_string); 
8583   3B43 FA FA FF      lea d, [bp + -6] ; $len
8584   3B46 DA            push d
8585   3B47             ; --- START FUNCTION CALL
8586   3B47 FA 05 00      lea d, [bp + 5] ; $hex_string
8587   3B4A 2A            mov b, [d]
8588   3B4B 38 00 00      mov c, 0
8589   3B4E FD AB         swp b
8590   3B50 D8            push b
8591   3B51 07 3A 40      call strlen
8592   3B54 51 02 00      add sp, 2
8593   3B57             ; --- END FUNCTION CALL
8594   3B57 E7            pop d
8595   3B58 FD 43         mov [d], b
8596   3B5A             ; for (i = 0; i < len; i++) { 
8597   3B5A             _for192_init:
8598   3B5A FA FD FF      lea d, [bp + -3] ; $i
8599   3B5D DA            push d
8600   3B5E FD 2E 00 00   mov32 cb, $00000000
8600   3B62 00 00 
8601   3B64 E7            pop d
8602   3B65 FD 43         mov [d], b
8603   3B67             _for192_cond:
8604   3B67 FA FD FF      lea d, [bp + -3] ; $i
8605   3B6A 2A            mov b, [d]
8606   3B6B 38 00 00      mov c, 0
8607   3B6E             ; --- START RELATIONAL
8608   3B6E D7            push a
8609   3B6F 11            mov a, b
8610   3B70 FA FA FF      lea d, [bp + -6] ; $len
8611   3B73 2A            mov b, [d]
8612   3B74 38 00 00      mov c, 0
8613   3B77 B0            cmp a, b
8614   3B78 FD 73         slt ; < (signed)
8615   3B7A E4            pop a
8616   3B7B             ; --- END RELATIONAL
8617   3B7B C0 00 00      cmp b, 0
8618   3B7E C6 8B 3D      je _for192_exit
8619   3B81             _for192_block:
8620   3B81             ; hex_char = hex_string[i]; 
8621   3B81 FA FC FF      lea d, [bp + -4] ; $hex_char
8622   3B84 DA            push d
8623   3B85 FA 05 00      lea d, [bp + 5] ; $hex_string
8624   3B88 FD 2A         mov d, [d]
8625   3B8A D7            push a
8626   3B8B DA            push d
8627   3B8C FA FD FF      lea d, [bp + -3] ; $i
8628   3B8F 2A            mov b, [d]
8629   3B90 38 00 00      mov c, 0
8630   3B93 E7            pop d
8631   3B94 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8632   3B98 E4            pop a
8633   3B99 32            mov bl, [d]
8634   3B9A A7 00         mov bh, 0
8635   3B9C 38 00 00      mov c, 0
8636   3B9F E7            pop d
8637   3BA0 FD 3E         mov [d], bl
8638   3BA2             ; if (hex_char >= 'a' && hex_char <= 'f')  
8639   3BA2             _if193_cond:
8640   3BA2 FA FC FF      lea d, [bp + -4] ; $hex_char
8641   3BA5 32            mov bl, [d]
8642   3BA6 A7 00         mov bh, 0
8643   3BA8 38 00 00      mov c, 0
8644   3BAB             ; --- START RELATIONAL
8645   3BAB D7            push a
8646   3BAC 11            mov a, b
8647   3BAD FD 2E 61 00   mov32 cb, $00000061
8647   3BB1 00 00 
8648   3BB3 B0            cmp a, b
8649   3BB4 FD 80         sge ; >=
8650   3BB6 E4            pop a
8651   3BB7             ; --- END RELATIONAL
8652   3BB7             ; --- START LOGICAL AND
8653   3BB7 D7            push a
8654   3BB8 11            mov a, b
8655   3BB9 FA FC FF      lea d, [bp + -4] ; $hex_char
8656   3BBC 32            mov bl, [d]
8657   3BBD A7 00         mov bh, 0
8658   3BBF 38 00 00      mov c, 0
8659   3BC2             ; --- START RELATIONAL
8660   3BC2 D7            push a
8661   3BC3 11            mov a, b
8662   3BC4 FD 2E 66 00   mov32 cb, $00000066
8662   3BC8 00 00 
8663   3BCA B0            cmp a, b
8664   3BCB FD 74         sle ; <= (signed)
8665   3BCD E4            pop a
8666   3BCE             ; --- END RELATIONAL
8667   3BCE FD A7         sand a, b
8668   3BD0 E4            pop a
8669   3BD1             ; --- END LOGICAL AND
8670   3BD1 C0 00 00      cmp b, 0
8671   3BD4 C6 54 3C      je _if193_else
8672   3BD7             _if193_TRUE:
8673   3BD7             ; value = (value * 16) + (hex_char - 'a' + 10); 
8674   3BD7 FA FF FF      lea d, [bp + -1] ; $value
8675   3BDA DA            push d
8676   3BDB FA FF FF      lea d, [bp + -1] ; $value
8677   3BDE 2A            mov b, [d]
8678   3BDF 38 00 00      mov c, 0
8679   3BE2             ; --- START FACTORS
8680   3BE2 D7            push a
8681   3BE3 FD D8         push g
8682   3BE5 11            mov a, b
8683   3BE6 FD 7A         mov g, c
8684   3BE8 FD 2E 10 00   mov32 cb, $00000010
8684   3BEC 00 00 
8685   3BEE D7            push a     ; save left operand
8686   3BEF 8E            xor a, b   ; xor sign bits
8687   3BF0 FD AA         swp a      ; swap bytes
8688   3BF2 83            mov cl, al ; save result of xor into 'dl'
8689   3BF3 E4            pop a      ; restore left side operator
8690   3BF4 DF            push cl    ; save result of xor above
8691   3BF5 FD AA         swp a  
8692   3BF7 93 80         test al, $80  
8693   3BF9 FD AA         swp a  
8694   3BFB C6 00 3C      jz skip_invert_a_197  
8695   3BFE FD 95         neg a 
8696   3C00             skip_invert_a_197:   
8697   3C00 FD AB         swp b
8698   3C02 FD 93 80      test bl, $80  
8699   3C05 FD AB         swp b
8700   3C07 C6 0C 3C      jz skip_invert_b_197  
8701   3C0A FD 97         neg b 
8702   3C0C             skip_invert_b_197:   
8703   3C0C AC            mul a, b ; *
8704   3C0D FD 78         mov g, a
8705   3C0F 11            mov a, b
8706   3C10 EA            pop bl
8707   3C11 FD 93 80      test bl, $80
8708   3C14 C6 21 3C      jz _same_signs_197
8709   3C17 2F            mov bl, al
8710   3C18 95            not a
8711   3C19 FD 97         neg b
8712   3C1B 5B 00 00      adc a, 0
8713   3C1E FD 78         mov g, a
8714   3C20 11            mov a, b
8715   3C21             _same_signs_197:
8716   3C21 FD 38         mov c, g
8717   3C23 27            mov b, a
8718   3C24 FD F1         pop g
8719   3C26 E4            pop a
8720   3C27             ; --- END FACTORS
8721   3C27             ; --- START TERMS
8722   3C27 D7            push a
8723   3C28 FD D8         push g
8724   3C2A 11            mov a, b
8725   3C2B FD 7A         mov g, c
8726   3C2D FA FC FF      lea d, [bp + -4] ; $hex_char
8727   3C30 32            mov bl, [d]
8728   3C31 A7 00         mov bh, 0
8729   3C33 38 00 00      mov c, 0
8730   3C36             ; --- START TERMS
8731   3C36 D7            push a
8732   3C37 11            mov a, b
8733   3C38 FD 2E 61 00   mov32 cb, $00000061
8733   3C3C 00 00 
8734   3C3E 60            sub a, b
8735   3C3F 27            mov b, a
8736   3C40 11            mov a, b
8737   3C41 FD 2E 0A 00   mov32 cb, $0000000a
8737   3C45 00 00 
8738   3C47 56            add b, a
8739   3C48 E4            pop a
8740   3C49             ; --- END TERMS
8741   3C49 FD 15         add32 cb, ga
8742   3C4B FD F1         pop g
8743   3C4D E4            pop a
8744   3C4E             ; --- END TERMS
8745   3C4E E7            pop d
8746   3C4F FD 43         mov [d], b
8747   3C51 0A 78 3D      jmp _if193_exit
8748   3C54             _if193_else:
8749   3C54             ; if (hex_char >= 'A' && hex_char <= 'F')  
8750   3C54             _if198_cond:
8751   3C54 FA FC FF      lea d, [bp + -4] ; $hex_char
8752   3C57 32            mov bl, [d]
8753   3C58 A7 00         mov bh, 0
8754   3C5A 38 00 00      mov c, 0
8755   3C5D             ; --- START RELATIONAL
8756   3C5D D7            push a
8757   3C5E 11            mov a, b
8758   3C5F FD 2E 41 00   mov32 cb, $00000041
8758   3C63 00 00 
8759   3C65 B0            cmp a, b
8760   3C66 FD 80         sge ; >=
8761   3C68 E4            pop a
8762   3C69             ; --- END RELATIONAL
8763   3C69             ; --- START LOGICAL AND
8764   3C69 D7            push a
8765   3C6A 11            mov a, b
8766   3C6B FA FC FF      lea d, [bp + -4] ; $hex_char
8767   3C6E 32            mov bl, [d]
8768   3C6F A7 00         mov bh, 0
8769   3C71 38 00 00      mov c, 0
8770   3C74             ; --- START RELATIONAL
8771   3C74 D7            push a
8772   3C75 11            mov a, b
8773   3C76 FD 2E 46 00   mov32 cb, $00000046
8773   3C7A 00 00 
8774   3C7C B0            cmp a, b
8775   3C7D FD 74         sle ; <= (signed)
8776   3C7F E4            pop a
8777   3C80             ; --- END RELATIONAL
8778   3C80 FD A7         sand a, b
8779   3C82 E4            pop a
8780   3C83             ; --- END LOGICAL AND
8781   3C83 C0 00 00      cmp b, 0
8782   3C86 C6 06 3D      je _if198_else
8783   3C89             _if198_TRUE:
8784   3C89             ; value = (value * 16) + (hex_char - 'A' + 10); 
8785   3C89 FA FF FF      lea d, [bp + -1] ; $value
8786   3C8C DA            push d
8787   3C8D FA FF FF      lea d, [bp + -1] ; $value
8788   3C90 2A            mov b, [d]
8789   3C91 38 00 00      mov c, 0
8790   3C94             ; --- START FACTORS
8791   3C94 D7            push a
8792   3C95 FD D8         push g
8793   3C97 11            mov a, b
8794   3C98 FD 7A         mov g, c
8795   3C9A FD 2E 10 00   mov32 cb, $00000010
8795   3C9E 00 00 
8796   3CA0 D7            push a     ; save left operand
8797   3CA1 8E            xor a, b   ; xor sign bits
8798   3CA2 FD AA         swp a      ; swap bytes
8799   3CA4 83            mov cl, al ; save result of xor into 'dl'
8800   3CA5 E4            pop a      ; restore left side operator
8801   3CA6 DF            push cl    ; save result of xor above
8802   3CA7 FD AA         swp a  
8803   3CA9 93 80         test al, $80  
8804   3CAB FD AA         swp a  
8805   3CAD C6 B2 3C      jz skip_invert_a_202  
8806   3CB0 FD 95         neg a 
8807   3CB2             skip_invert_a_202:   
8808   3CB2 FD AB         swp b
8809   3CB4 FD 93 80      test bl, $80  
8810   3CB7 FD AB         swp b
8811   3CB9 C6 BE 3C      jz skip_invert_b_202  
8812   3CBC FD 97         neg b 
8813   3CBE             skip_invert_b_202:   
8814   3CBE AC            mul a, b ; *
8815   3CBF FD 78         mov g, a
8816   3CC1 11            mov a, b
8817   3CC2 EA            pop bl
8818   3CC3 FD 93 80      test bl, $80
8819   3CC6 C6 D3 3C      jz _same_signs_202
8820   3CC9 2F            mov bl, al
8821   3CCA 95            not a
8822   3CCB FD 97         neg b
8823   3CCD 5B 00 00      adc a, 0
8824   3CD0 FD 78         mov g, a
8825   3CD2 11            mov a, b
8826   3CD3             _same_signs_202:
8827   3CD3 FD 38         mov c, g
8828   3CD5 27            mov b, a
8829   3CD6 FD F1         pop g
8830   3CD8 E4            pop a
8831   3CD9             ; --- END FACTORS
8832   3CD9             ; --- START TERMS
8833   3CD9 D7            push a
8834   3CDA FD D8         push g
8835   3CDC 11            mov a, b
8836   3CDD FD 7A         mov g, c
8837   3CDF FA FC FF      lea d, [bp + -4] ; $hex_char
8838   3CE2 32            mov bl, [d]
8839   3CE3 A7 00         mov bh, 0
8840   3CE5 38 00 00      mov c, 0
8841   3CE8             ; --- START TERMS
8842   3CE8 D7            push a
8843   3CE9 11            mov a, b
8844   3CEA FD 2E 41 00   mov32 cb, $00000041
8844   3CEE 00 00 
8845   3CF0 60            sub a, b
8846   3CF1 27            mov b, a
8847   3CF2 11            mov a, b
8848   3CF3 FD 2E 0A 00   mov32 cb, $0000000a
8848   3CF7 00 00 
8849   3CF9 56            add b, a
8850   3CFA E4            pop a
8851   3CFB             ; --- END TERMS
8852   3CFB FD 15         add32 cb, ga
8853   3CFD FD F1         pop g
8854   3CFF E4            pop a
8855   3D00             ; --- END TERMS
8856   3D00 E7            pop d
8857   3D01 FD 43         mov [d], b
8858   3D03 0A 78 3D      jmp _if198_exit
8859   3D06             _if198_else:
8860   3D06             ; value = (value * 16) + (hex_char - '0'); 
8861   3D06 FA FF FF      lea d, [bp + -1] ; $value
8862   3D09 DA            push d
8863   3D0A FA FF FF      lea d, [bp + -1] ; $value
8864   3D0D 2A            mov b, [d]
8865   3D0E 38 00 00      mov c, 0
8866   3D11             ; --- START FACTORS
8867   3D11 D7            push a
8868   3D12 FD D8         push g
8869   3D14 11            mov a, b
8870   3D15 FD 7A         mov g, c
8871   3D17 FD 2E 10 00   mov32 cb, $00000010
8871   3D1B 00 00 
8872   3D1D D7            push a     ; save left operand
8873   3D1E 8E            xor a, b   ; xor sign bits
8874   3D1F FD AA         swp a      ; swap bytes
8875   3D21 83            mov cl, al ; save result of xor into 'dl'
8876   3D22 E4            pop a      ; restore left side operator
8877   3D23 DF            push cl    ; save result of xor above
8878   3D24 FD AA         swp a  
8879   3D26 93 80         test al, $80  
8880   3D28 FD AA         swp a  
8881   3D2A C6 2F 3D      jz skip_invert_a_206  
8882   3D2D FD 95         neg a 
8883   3D2F             skip_invert_a_206:   
8884   3D2F FD AB         swp b
8885   3D31 FD 93 80      test bl, $80  
8886   3D34 FD AB         swp b
8887   3D36 C6 3B 3D      jz skip_invert_b_206  
8888   3D39 FD 97         neg b 
8889   3D3B             skip_invert_b_206:   
8890   3D3B AC            mul a, b ; *
8891   3D3C FD 78         mov g, a
8892   3D3E 11            mov a, b
8893   3D3F EA            pop bl
8894   3D40 FD 93 80      test bl, $80
8895   3D43 C6 50 3D      jz _same_signs_206
8896   3D46 2F            mov bl, al
8897   3D47 95            not a
8898   3D48 FD 97         neg b
8899   3D4A 5B 00 00      adc a, 0
8900   3D4D FD 78         mov g, a
8901   3D4F 11            mov a, b
8902   3D50             _same_signs_206:
8903   3D50 FD 38         mov c, g
8904   3D52 27            mov b, a
8905   3D53 FD F1         pop g
8906   3D55 E4            pop a
8907   3D56             ; --- END FACTORS
8908   3D56             ; --- START TERMS
8909   3D56 D7            push a
8910   3D57 FD D8         push g
8911   3D59 11            mov a, b
8912   3D5A FD 7A         mov g, c
8913   3D5C FA FC FF      lea d, [bp + -4] ; $hex_char
8914   3D5F 32            mov bl, [d]
8915   3D60 A7 00         mov bh, 0
8916   3D62 38 00 00      mov c, 0
8917   3D65             ; --- START TERMS
8918   3D65 D7            push a
8919   3D66 11            mov a, b
8920   3D67 FD 2E 30 00   mov32 cb, $00000030
8920   3D6B 00 00 
8921   3D6D 60            sub a, b
8922   3D6E 27            mov b, a
8923   3D6F E4            pop a
8924   3D70             ; --- END TERMS
8925   3D70 FD 15         add32 cb, ga
8926   3D72 FD F1         pop g
8927   3D74 E4            pop a
8928   3D75             ; --- END TERMS
8929   3D75 E7            pop d
8930   3D76 FD 43         mov [d], b
8931   3D78             _if198_exit:
8932   3D78             _if193_exit:
8933   3D78             _for192_update:
8934   3D78 FA FD FF      lea d, [bp + -3] ; $i
8935   3D7B 2A            mov b, [d]
8936   3D7C 38 00 00      mov c, 0
8937   3D7F 11            mov a, b
8938   3D80 FD 77         inc b
8939   3D82 FA FD FF      lea d, [bp + -3] ; $i
8940   3D85 FD 43         mov [d], b
8941   3D87 27            mov b, a
8942   3D88 0A 67 3B      jmp _for192_cond
8943   3D8B             _for192_exit:
8944   3D8B             ; return value; 
8945   3D8B FA FF FF      lea d, [bp + -1] ; $value
8946   3D8E 2A            mov b, [d]
8947   3D8F 38 00 00      mov c, 0
8948   3D92 F9            leave
8949   3D93 09            ret
8950   3D94             
8951   3D94             loadfile:
8952   3D94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8953   3D97             ; --- BEGIN INLINE ASM SEGMENT
8954   3D97 FA 07 00      lea d, [bp + 7] ; $destination
8955   3D9A 15            mov a, [d]
8956   3D9B 4F            mov di, a
8957   3D9C FA 05 00      lea d, [bp + 5] ; $filename
8958   3D9F FD 2A         mov d, [d]
8959   3DA1 19 14         mov al, 20
8960   3DA3 05 04         syscall sys_filesystem
8961   3DA5             ; --- END INLINE ASM SEGMENT
8962   3DA5 F9            leave
8963   3DA6 09            ret
8964   3DA7             
8965   3DA7             exp:
8966   3DA7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8967   3DAA             ; int i; 
8968   3DAA 52 02 00      sub sp, 2
8969   3DAD             ; int result = 1; 
8970   3DAD 52 02 00      sub sp, 2
8971   3DB0             ; --- START LOCAL VAR INITIALIZATION
8972   3DB0 FA FD FF      lea d, [bp + -3] ; $result
8973   3DB3 DA            push d
8974   3DB4 FD 2E 01 00   mov32 cb, $00000001
8974   3DB8 00 00 
8975   3DBA E7            pop d
8976   3DBB FD 43         mov [d], b
8977   3DBD             ; --- END LOCAL VAR INITIALIZATION
8978   3DBD             ; for(i = 0; i < exp; i++){ 
8979   3DBD             _for207_init:
8980   3DBD FA FF FF      lea d, [bp + -1] ; $i
8981   3DC0 DA            push d
8982   3DC1 FD 2E 00 00   mov32 cb, $00000000
8982   3DC5 00 00 
8983   3DC7 E7            pop d
8984   3DC8 FD 43         mov [d], b
8985   3DCA             _for207_cond:
8986   3DCA FA FF FF      lea d, [bp + -1] ; $i
8987   3DCD 2A            mov b, [d]
8988   3DCE 38 00 00      mov c, 0
8989   3DD1             ; --- START RELATIONAL
8990   3DD1 D7            push a
8991   3DD2 11            mov a, b
8992   3DD3 FA 07 00      lea d, [bp + 7] ; $exp
8993   3DD6 2A            mov b, [d]
8994   3DD7 38 00 00      mov c, 0
8995   3DDA B0            cmp a, b
8996   3DDB FD 73         slt ; < (signed)
8997   3DDD E4            pop a
8998   3DDE             ; --- END RELATIONAL
8999   3DDE C0 00 00      cmp b, 0
9000   3DE1 C6 4B 3E      je _for207_exit
9001   3DE4             _for207_block:
9002   3DE4             ; result = result * base; 
9003   3DE4 FA FD FF      lea d, [bp + -3] ; $result
9004   3DE7 DA            push d
9005   3DE8 FA FD FF      lea d, [bp + -3] ; $result
9006   3DEB 2A            mov b, [d]
9007   3DEC 38 00 00      mov c, 0
9008   3DEF             ; --- START FACTORS
9009   3DEF D7            push a
9010   3DF0 FD D8         push g
9011   3DF2 11            mov a, b
9012   3DF3 FD 7A         mov g, c
9013   3DF5 FA 05 00      lea d, [bp + 5] ; $base
9014   3DF8 2A            mov b, [d]
9015   3DF9 38 00 00      mov c, 0
9016   3DFC D7            push a     ; save left operand
9017   3DFD 8E            xor a, b   ; xor sign bits
9018   3DFE FD AA         swp a      ; swap bytes
9019   3E00 83            mov cl, al ; save result of xor into 'dl'
9020   3E01 E4            pop a      ; restore left side operator
9021   3E02 DF            push cl    ; save result of xor above
9022   3E03 FD AA         swp a  
9023   3E05 93 80         test al, $80  
9024   3E07 FD AA         swp a  
9025   3E09 C6 0E 3E      jz skip_invert_a_209  
9026   3E0C FD 95         neg a 
9027   3E0E             skip_invert_a_209:   
9028   3E0E FD AB         swp b
9029   3E10 FD 93 80      test bl, $80  
9030   3E13 FD AB         swp b
9031   3E15 C6 1A 3E      jz skip_invert_b_209  
9032   3E18 FD 97         neg b 
9033   3E1A             skip_invert_b_209:   
9034   3E1A AC            mul a, b ; *
9035   3E1B FD 78         mov g, a
9036   3E1D 11            mov a, b
9037   3E1E EA            pop bl
9038   3E1F FD 93 80      test bl, $80
9039   3E22 C6 2F 3E      jz _same_signs_209
9040   3E25 2F            mov bl, al
9041   3E26 95            not a
9042   3E27 FD 97         neg b
9043   3E29 5B 00 00      adc a, 0
9044   3E2C FD 78         mov g, a
9045   3E2E 11            mov a, b
9046   3E2F             _same_signs_209:
9047   3E2F FD 38         mov c, g
9048   3E31 27            mov b, a
9049   3E32 FD F1         pop g
9050   3E34 E4            pop a
9051   3E35             ; --- END FACTORS
9052   3E35 E7            pop d
9053   3E36 FD 43         mov [d], b
9054   3E38             _for207_update:
9055   3E38 FA FF FF      lea d, [bp + -1] ; $i
9056   3E3B 2A            mov b, [d]
9057   3E3C 38 00 00      mov c, 0
9058   3E3F 11            mov a, b
9059   3E40 FD 77         inc b
9060   3E42 FA FF FF      lea d, [bp + -1] ; $i
9061   3E45 FD 43         mov [d], b
9062   3E47 27            mov b, a
9063   3E48 0A CA 3D      jmp _for207_cond
9064   3E4B             _for207_exit:
9065   3E4B             ; return result; 
9066   3E4B FA FD FF      lea d, [bp + -3] ; $result
9067   3E4E 2A            mov b, [d]
9068   3E4F 38 00 00      mov c, 0
9069   3E52 F9            leave
9070   3E53 09            ret
9071   3E54             
9072   3E54             print:
9073   3E54 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9074   3E57             ; --- BEGIN INLINE ASM SEGMENT
9075   3E57 FA 05 00      lea d, [bp + 5] ; $s
9076   3E5A FD 2A         mov d, [d]
9077   3E5C             _puts_L1_print:
9078   3E5C 1E            mov al, [d]
9079   3E5D B9 00         cmp al, 0
9080   3E5F C6 6B 3E      jz _puts_END_print
9081   3E62 23            mov ah, al
9082   3E63 19 00         mov al, 0
9083   3E65 05 03         syscall sys_io
9084   3E67 79            inc d
9085   3E68 0A 5C 3E      jmp _puts_L1_print
9086   3E6B             _puts_END_print:
9087   3E6B             ; --- END INLINE ASM SEGMENT
9088   3E6B F9            leave
9089   3E6C 09            ret
9090   3E6D             
9091   3E6D             alloc:
9092   3E6D F8 00 00      enter 0 ; (push bp; mov bp, sp)
9093   3E70             ; heap_top = heap_top + bytes; 
9094   3E70 3B E1 53      mov d, _heap_top ; $heap_top
9095   3E73 DA            push d
9096   3E74 3B E1 53      mov d, _heap_top ; $heap_top
9097   3E77 2A            mov b, [d]
9098   3E78 38 00 00      mov c, 0
9099   3E7B             ; --- START TERMS
9100   3E7B D7            push a
9101   3E7C 11            mov a, b
9102   3E7D FA 05 00      lea d, [bp + 5] ; $bytes
9103   3E80 2A            mov b, [d]
9104   3E81 38 00 00      mov c, 0
9105   3E84 56            add b, a
9106   3E85 E4            pop a
9107   3E86             ; --- END TERMS
9108   3E86 E7            pop d
9109   3E87 FD 43         mov [d], b
9110   3E89             ; return heap_top - bytes; 
9111   3E89 3B E1 53      mov d, _heap_top ; $heap_top
9112   3E8C 2A            mov b, [d]
9113   3E8D 38 00 00      mov c, 0
9114   3E90             ; --- START TERMS
9115   3E90 D7            push a
9116   3E91 11            mov a, b
9117   3E92 FA 05 00      lea d, [bp + 5] ; $bytes
9118   3E95 2A            mov b, [d]
9119   3E96 38 00 00      mov c, 0
9120   3E99 60            sub a, b
9121   3E9A 27            mov b, a
9122   3E9B E4            pop a
9123   3E9C             ; --- END TERMS
9124   3E9C F9            leave
9125   3E9D 09            ret
9126   3E9E             
9127   3E9E             is_space:
9128   3E9E F8 00 00      enter 0 ; (push bp; mov bp, sp)
9129   3EA1             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
9130   3EA1 FA 05 00      lea d, [bp + 5] ; $c
9131   3EA4 32            mov bl, [d]
9132   3EA5 A7 00         mov bh, 0
9133   3EA7 38 00 00      mov c, 0
9134   3EAA             ; --- START RELATIONAL
9135   3EAA D7            push a
9136   3EAB 11            mov a, b
9137   3EAC FD 2E 20 00   mov32 cb, $00000020
9137   3EB0 00 00 
9138   3EB2 B0            cmp a, b
9139   3EB3 FD 71         seq ; ==
9140   3EB5 E4            pop a
9141   3EB6             ; --- END RELATIONAL
9142   3EB6             ; --- START LOGICAL OR
9143   3EB6 D7            push a
9144   3EB7 11            mov a, b
9145   3EB8 FA 05 00      lea d, [bp + 5] ; $c
9146   3EBB 32            mov bl, [d]
9147   3EBC A7 00         mov bh, 0
9148   3EBE 38 00 00      mov c, 0
9149   3EC1             ; --- START RELATIONAL
9150   3EC1 D7            push a
9151   3EC2 11            mov a, b
9152   3EC3 FD 2E 09 00   mov32 cb, $00000009
9152   3EC7 00 00 
9153   3EC9 B0            cmp a, b
9154   3ECA FD 71         seq ; ==
9155   3ECC E4            pop a
9156   3ECD             ; --- END RELATIONAL
9157   3ECD FD A8         sor a, b ; ||
9158   3ECF 11            mov a, b
9159   3ED0 FA 05 00      lea d, [bp + 5] ; $c
9160   3ED3 32            mov bl, [d]
9161   3ED4 A7 00         mov bh, 0
9162   3ED6 38 00 00      mov c, 0
9163   3ED9             ; --- START RELATIONAL
9164   3ED9 D7            push a
9165   3EDA 11            mov a, b
9166   3EDB FD 2E 0A 00   mov32 cb, $0000000a
9166   3EDF 00 00 
9167   3EE1 B0            cmp a, b
9168   3EE2 FD 71         seq ; ==
9169   3EE4 E4            pop a
9170   3EE5             ; --- END RELATIONAL
9171   3EE5 FD A8         sor a, b ; ||
9172   3EE7 11            mov a, b
9173   3EE8 FA 05 00      lea d, [bp + 5] ; $c
9174   3EEB 32            mov bl, [d]
9175   3EEC A7 00         mov bh, 0
9176   3EEE 38 00 00      mov c, 0
9177   3EF1             ; --- START RELATIONAL
9178   3EF1 D7            push a
9179   3EF2 11            mov a, b
9180   3EF3 FD 2E 0D 00   mov32 cb, $0000000d
9180   3EF7 00 00 
9181   3EF9 B0            cmp a, b
9182   3EFA FD 71         seq ; ==
9183   3EFC E4            pop a
9184   3EFD             ; --- END RELATIONAL
9185   3EFD FD A8         sor a, b ; ||
9186   3EFF E4            pop a
9187   3F00             ; --- END LOGICAL OR
9188   3F00 F9            leave
9189   3F01 09            ret
9190   3F02             
9191   3F02             is_alpha:
9192   3F02 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9193   3F05             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
9194   3F05 FA 05 00      lea d, [bp + 5] ; $c
9195   3F08 32            mov bl, [d]
9196   3F09 A7 00         mov bh, 0
9197   3F0B 38 00 00      mov c, 0
9198   3F0E             ; --- START RELATIONAL
9199   3F0E D7            push a
9200   3F0F 11            mov a, b
9201   3F10 FD 2E 61 00   mov32 cb, $00000061
9201   3F14 00 00 
9202   3F16 B0            cmp a, b
9203   3F17 FD 80         sge ; >=
9204   3F19 E4            pop a
9205   3F1A             ; --- END RELATIONAL
9206   3F1A             ; --- START LOGICAL AND
9207   3F1A D7            push a
9208   3F1B 11            mov a, b
9209   3F1C FA 05 00      lea d, [bp + 5] ; $c
9210   3F1F 32            mov bl, [d]
9211   3F20 A7 00         mov bh, 0
9212   3F22 38 00 00      mov c, 0
9213   3F25             ; --- START RELATIONAL
9214   3F25 D7            push a
9215   3F26 11            mov a, b
9216   3F27 FD 2E 7A 00   mov32 cb, $0000007a
9216   3F2B 00 00 
9217   3F2D B0            cmp a, b
9218   3F2E FD 74         sle ; <= (signed)
9219   3F30 E4            pop a
9220   3F31             ; --- END RELATIONAL
9221   3F31 FD A7         sand a, b
9222   3F33 E4            pop a
9223   3F34             ; --- END LOGICAL AND
9224   3F34             ; --- START LOGICAL OR
9225   3F34 D7            push a
9226   3F35 11            mov a, b
9227   3F36 FA 05 00      lea d, [bp + 5] ; $c
9228   3F39 32            mov bl, [d]
9229   3F3A A7 00         mov bh, 0
9230   3F3C 38 00 00      mov c, 0
9231   3F3F             ; --- START RELATIONAL
9232   3F3F D7            push a
9233   3F40 11            mov a, b
9234   3F41 FD 2E 41 00   mov32 cb, $00000041
9234   3F45 00 00 
9235   3F47 B0            cmp a, b
9236   3F48 FD 80         sge ; >=
9237   3F4A E4            pop a
9238   3F4B             ; --- END RELATIONAL
9239   3F4B             ; --- START LOGICAL AND
9240   3F4B D7            push a
9241   3F4C 11            mov a, b
9242   3F4D FA 05 00      lea d, [bp + 5] ; $c
9243   3F50 32            mov bl, [d]
9244   3F51 A7 00         mov bh, 0
9245   3F53 38 00 00      mov c, 0
9246   3F56             ; --- START RELATIONAL
9247   3F56 D7            push a
9248   3F57 11            mov a, b
9249   3F58 FD 2E 5A 00   mov32 cb, $0000005a
9249   3F5C 00 00 
9250   3F5E B0            cmp a, b
9251   3F5F FD 74         sle ; <= (signed)
9252   3F61 E4            pop a
9253   3F62             ; --- END RELATIONAL
9254   3F62 FD A7         sand a, b
9255   3F64 E4            pop a
9256   3F65             ; --- END LOGICAL AND
9257   3F65 FD A8         sor a, b ; ||
9258   3F67 11            mov a, b
9259   3F68 FA 05 00      lea d, [bp + 5] ; $c
9260   3F6B 32            mov bl, [d]
9261   3F6C A7 00         mov bh, 0
9262   3F6E 38 00 00      mov c, 0
9263   3F71             ; --- START RELATIONAL
9264   3F71 D7            push a
9265   3F72 11            mov a, b
9266   3F73 FD 2E 5F 00   mov32 cb, $0000005f
9266   3F77 00 00 
9267   3F79 B0            cmp a, b
9268   3F7A FD 71         seq ; ==
9269   3F7C E4            pop a
9270   3F7D             ; --- END RELATIONAL
9271   3F7D FD A8         sor a, b ; ||
9272   3F7F E4            pop a
9273   3F80             ; --- END LOGICAL OR
9274   3F80 F9            leave
9275   3F81 09            ret
9276   3F82             
9277   3F82             is_digit:
9278   3F82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9279   3F85             ; return c >= '0' && c <= '9'; 
9280   3F85 FA 05 00      lea d, [bp + 5] ; $c
9281   3F88 32            mov bl, [d]
9282   3F89 A7 00         mov bh, 0
9283   3F8B 38 00 00      mov c, 0
9284   3F8E             ; --- START RELATIONAL
9285   3F8E D7            push a
9286   3F8F 11            mov a, b
9287   3F90 FD 2E 30 00   mov32 cb, $00000030
9287   3F94 00 00 
9288   3F96 B0            cmp a, b
9289   3F97 FD 80         sge ; >=
9290   3F99 E4            pop a
9291   3F9A             ; --- END RELATIONAL
9292   3F9A             ; --- START LOGICAL AND
9293   3F9A D7            push a
9294   3F9B 11            mov a, b
9295   3F9C FA 05 00      lea d, [bp + 5] ; $c
9296   3F9F 32            mov bl, [d]
9297   3FA0 A7 00         mov bh, 0
9298   3FA2 38 00 00      mov c, 0
9299   3FA5             ; --- START RELATIONAL
9300   3FA5 D7            push a
9301   3FA6 11            mov a, b
9302   3FA7 FD 2E 39 00   mov32 cb, $00000039
9302   3FAB 00 00 
9303   3FAD B0            cmp a, b
9304   3FAE FD 74         sle ; <= (signed)
9305   3FB0 E4            pop a
9306   3FB1             ; --- END RELATIONAL
9307   3FB1 FD A7         sand a, b
9308   3FB3 E4            pop a
9309   3FB4             ; --- END LOGICAL AND
9310   3FB4 F9            leave
9311   3FB5 09            ret
9312   3FB6             
9313   3FB6             strcmp:
9314   3FB6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9315   3FB9             ; while (*s1 && (*s1 == *s2)) { 
9316   3FB9             _while210_cond:
9317   3FB9 FA 05 00      lea d, [bp + 5] ; $s1
9318   3FBC 2A            mov b, [d]
9319   3FBD 38 00 00      mov c, 0
9320   3FC0 74            mov d, b
9321   3FC1 32            mov bl, [d]
9322   3FC2 A7 00         mov bh, 0
9323   3FC4 38 00 00      mov c, 0
9324   3FC7             ; --- START LOGICAL AND
9325   3FC7 D7            push a
9326   3FC8 11            mov a, b
9327   3FC9 FA 05 00      lea d, [bp + 5] ; $s1
9328   3FCC 2A            mov b, [d]
9329   3FCD 38 00 00      mov c, 0
9330   3FD0 74            mov d, b
9331   3FD1 32            mov bl, [d]
9332   3FD2 A7 00         mov bh, 0
9333   3FD4 38 00 00      mov c, 0
9334   3FD7             ; --- START RELATIONAL
9335   3FD7 D7            push a
9336   3FD8 11            mov a, b
9337   3FD9 FA 07 00      lea d, [bp + 7] ; $s2
9338   3FDC 2A            mov b, [d]
9339   3FDD 38 00 00      mov c, 0
9340   3FE0 74            mov d, b
9341   3FE1 32            mov bl, [d]
9342   3FE2 A7 00         mov bh, 0
9343   3FE4 38 00 00      mov c, 0
9344   3FE7 B0            cmp a, b
9345   3FE8 FD 71         seq ; ==
9346   3FEA E4            pop a
9347   3FEB             ; --- END RELATIONAL
9348   3FEB FD A7         sand a, b
9349   3FED E4            pop a
9350   3FEE             ; --- END LOGICAL AND
9351   3FEE C0 00 00      cmp b, 0
9352   3FF1 C6 17 40      je _while210_exit
9353   3FF4             _while210_block:
9354   3FF4             ; s1++; 
9355   3FF4 FA 05 00      lea d, [bp + 5] ; $s1
9356   3FF7 2A            mov b, [d]
9357   3FF8 38 00 00      mov c, 0
9358   3FFB FD 77         inc b
9359   3FFD FA 05 00      lea d, [bp + 5] ; $s1
9360   4000 FD 43         mov [d], b
9361   4002 FD 7D         dec b
9362   4004             ; s2++; 
9363   4004 FA 07 00      lea d, [bp + 7] ; $s2
9364   4007 2A            mov b, [d]
9365   4008 38 00 00      mov c, 0
9366   400B FD 77         inc b
9367   400D FA 07 00      lea d, [bp + 7] ; $s2
9368   4010 FD 43         mov [d], b
9369   4012 FD 7D         dec b
9370   4014 0A B9 3F      jmp _while210_cond
9371   4017             _while210_exit:
9372   4017             ; return *s1 - *s2; 
9373   4017 FA 05 00      lea d, [bp + 5] ; $s1
9374   401A 2A            mov b, [d]
9375   401B 38 00 00      mov c, 0
9376   401E 74            mov d, b
9377   401F 32            mov bl, [d]
9378   4020 A7 00         mov bh, 0
9379   4022 38 00 00      mov c, 0
9380   4025             ; --- START TERMS
9381   4025 D7            push a
9382   4026 11            mov a, b
9383   4027 FA 07 00      lea d, [bp + 7] ; $s2
9384   402A 2A            mov b, [d]
9385   402B 38 00 00      mov c, 0
9386   402E 74            mov d, b
9387   402F 32            mov bl, [d]
9388   4030 A7 00         mov bh, 0
9389   4032 38 00 00      mov c, 0
9390   4035 60            sub a, b
9391   4036 27            mov b, a
9392   4037 E4            pop a
9393   4038             ; --- END TERMS
9394   4038 F9            leave
9395   4039 09            ret
9396   403A             
9397   403A             strlen:
9398   403A F8 00 00      enter 0 ; (push bp; mov bp, sp)
9399   403D             ; int length; 
9400   403D 52 02 00      sub sp, 2
9401   4040             ; length = 0; 
9402   4040 FA FF FF      lea d, [bp + -1] ; $length
9403   4043 DA            push d
9404   4044 FD 2E 00 00   mov32 cb, $00000000
9404   4048 00 00 
9405   404A E7            pop d
9406   404B FD 43         mov [d], b
9407   404D             ; while (str[length] != 0) { 
9408   404D             _while211_cond:
9409   404D FA 05 00      lea d, [bp + 5] ; $str
9410   4050 FD 2A         mov d, [d]
9411   4052 D7            push a
9412   4053 DA            push d
9413   4054 FA FF FF      lea d, [bp + -1] ; $length
9414   4057 2A            mov b, [d]
9415   4058 38 00 00      mov c, 0
9416   405B E7            pop d
9417   405C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
9418   4060 E4            pop a
9419   4061 32            mov bl, [d]
9420   4062 A7 00         mov bh, 0
9421   4064 38 00 00      mov c, 0
9422   4067             ; --- START RELATIONAL
9423   4067 D7            push a
9424   4068 11            mov a, b
9425   4069 FD 2E 00 00   mov32 cb, $00000000
9425   406D 00 00 
9426   406F B0            cmp a, b
9427   4070 FD 72         sneq ; !=
9428   4072 E4            pop a
9429   4073             ; --- END RELATIONAL
9430   4073 C0 00 00      cmp b, 0
9431   4076 C6 8C 40      je _while211_exit
9432   4079             _while211_block:
9433   4079             ; length++; 
9434   4079 FA FF FF      lea d, [bp + -1] ; $length
9435   407C 2A            mov b, [d]
9436   407D 38 00 00      mov c, 0
9437   4080 11            mov a, b
9438   4081 FD 77         inc b
9439   4083 FA FF FF      lea d, [bp + -1] ; $length
9440   4086 FD 43         mov [d], b
9441   4088 27            mov b, a
9442   4089 0A 4D 40      jmp _while211_cond
9443   408C             _while211_exit:
9444   408C             ; return length; 
9445   408C FA FF FF      lea d, [bp + -1] ; $length
9446   408F 2A            mov b, [d]
9447   4090 38 00 00      mov c, 0
9448   4093 F9            leave
9449   4094 09            ret
9450   4095             
9451   4095             atoi:
9452   4095 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9453   4098             ; int result = 0;  // Initialize result 
9454   4098 52 02 00      sub sp, 2
9455   409B             ; --- START LOCAL VAR INITIALIZATION
9456   409B FA FF FF      lea d, [bp + -1] ; $result
9457   409E DA            push d
9458   409F FD 2E 00 00   mov32 cb, $00000000
9458   40A3 00 00 
9459   40A5 E7            pop d
9460   40A6 FD 43         mov [d], b
9461   40A8             ; --- END LOCAL VAR INITIALIZATION
9462   40A8             ; int sign = 1;    // Initialize sign as positive 
9463   40A8 52 02 00      sub sp, 2
9464   40AB             ; --- START LOCAL VAR INITIALIZATION
9465   40AB FA FD FF      lea d, [bp + -3] ; $sign
9466   40AE DA            push d
9467   40AF FD 2E 01 00   mov32 cb, $00000001
9467   40B3 00 00 
9468   40B5 E7            pop d
9469   40B6 FD 43         mov [d], b
9470   40B8             ; --- END LOCAL VAR INITIALIZATION
9471   40B8             ; while (*str == ' ') str++; 
9472   40B8             _while212_cond:
9473   40B8 FA 05 00      lea d, [bp + 5] ; $str
9474   40BB 2A            mov b, [d]
9475   40BC 38 00 00      mov c, 0
9476   40BF 74            mov d, b
9477   40C0 32            mov bl, [d]
9478   40C1 A7 00         mov bh, 0
9479   40C3 38 00 00      mov c, 0
9480   40C6             ; --- START RELATIONAL
9481   40C6 D7            push a
9482   40C7 11            mov a, b
9483   40C8 FD 2E 20 00   mov32 cb, $00000020
9483   40CC 00 00 
9484   40CE B0            cmp a, b
9485   40CF FD 71         seq ; ==
9486   40D1 E4            pop a
9487   40D2             ; --- END RELATIONAL
9488   40D2 C0 00 00      cmp b, 0
9489   40D5 C6 EB 40      je _while212_exit
9490   40D8             _while212_block:
9491   40D8             ; str++; 
9492   40D8 FA 05 00      lea d, [bp + 5] ; $str
9493   40DB 2A            mov b, [d]
9494   40DC 38 00 00      mov c, 0
9495   40DF FD 77         inc b
9496   40E1 FA 05 00      lea d, [bp + 5] ; $str
9497   40E4 FD 43         mov [d], b
9498   40E6 FD 7D         dec b
9499   40E8 0A B8 40      jmp _while212_cond
9500   40EB             _while212_exit:
9501   40EB             ; if (*str == '-' || *str == '+') { 
9502   40EB             _if213_cond:
9503   40EB FA 05 00      lea d, [bp + 5] ; $str
9504   40EE 2A            mov b, [d]
9505   40EF 38 00 00      mov c, 0
9506   40F2 74            mov d, b
9507   40F3 32            mov bl, [d]
9508   40F4 A7 00         mov bh, 0
9509   40F6 38 00 00      mov c, 0
9510   40F9             ; --- START RELATIONAL
9511   40F9 D7            push a
9512   40FA 11            mov a, b
9513   40FB FD 2E 2D 00   mov32 cb, $0000002d
9513   40FF 00 00 
9514   4101 B0            cmp a, b
9515   4102 FD 71         seq ; ==
9516   4104 E4            pop a
9517   4105             ; --- END RELATIONAL
9518   4105             ; --- START LOGICAL OR
9519   4105 D7            push a
9520   4106 11            mov a, b
9521   4107 FA 05 00      lea d, [bp + 5] ; $str
9522   410A 2A            mov b, [d]
9523   410B 38 00 00      mov c, 0
9524   410E 74            mov d, b
9525   410F 32            mov bl, [d]
9526   4110 A7 00         mov bh, 0
9527   4112 38 00 00      mov c, 0
9528   4115             ; --- START RELATIONAL
9529   4115 D7            push a
9530   4116 11            mov a, b
9531   4117 FD 2E 2B 00   mov32 cb, $0000002b
9531   411B 00 00 
9532   411D B0            cmp a, b
9533   411E FD 71         seq ; ==
9534   4120 E4            pop a
9535   4121             ; --- END RELATIONAL
9536   4121 FD A8         sor a, b ; ||
9537   4123 E4            pop a
9538   4124             ; --- END LOGICAL OR
9539   4124 C0 00 00      cmp b, 0
9540   4127 C6 6D 41      je _if213_exit
9541   412A             _if213_TRUE:
9542   412A             ; if (*str == '-') sign = -1; 
9543   412A             _if214_cond:
9544   412A FA 05 00      lea d, [bp + 5] ; $str
9545   412D 2A            mov b, [d]
9546   412E 38 00 00      mov c, 0
9547   4131 74            mov d, b
9548   4132 32            mov bl, [d]
9549   4133 A7 00         mov bh, 0
9550   4135 38 00 00      mov c, 0
9551   4138             ; --- START RELATIONAL
9552   4138 D7            push a
9553   4139 11            mov a, b
9554   413A FD 2E 2D 00   mov32 cb, $0000002d
9554   413E 00 00 
9555   4140 B0            cmp a, b
9556   4141 FD 71         seq ; ==
9557   4143 E4            pop a
9558   4144             ; --- END RELATIONAL
9559   4144 C0 00 00      cmp b, 0
9560   4147 C6 5A 41      je _if214_exit
9561   414A             _if214_TRUE:
9562   414A             ; sign = -1; 
9563   414A FA FD FF      lea d, [bp + -3] ; $sign
9564   414D DA            push d
9565   414E FD 2E FF FF   mov32 cb, $ffffffff
9565   4152 FF FF 
9566   4154 E7            pop d
9567   4155 FD 43         mov [d], b
9568   4157 0A 5A 41      jmp _if214_exit
9569   415A             _if214_exit:
9570   415A             ; str++; 
9571   415A FA 05 00      lea d, [bp + 5] ; $str
9572   415D 2A            mov b, [d]
9573   415E 38 00 00      mov c, 0
9574   4161 FD 77         inc b
9575   4163 FA 05 00      lea d, [bp + 5] ; $str
9576   4166 FD 43         mov [d], b
9577   4168 FD 7D         dec b
9578   416A 0A 6D 41      jmp _if213_exit
9579   416D             _if213_exit:
9580   416D             ; while (*str >= '0' && *str <= '9') { 
9581   416D             _while215_cond:
9582   416D FA 05 00      lea d, [bp + 5] ; $str
9583   4170 2A            mov b, [d]
9584   4171 38 00 00      mov c, 0
9585   4174 74            mov d, b
9586   4175 32            mov bl, [d]
9587   4176 A7 00         mov bh, 0
9588   4178 38 00 00      mov c, 0
9589   417B             ; --- START RELATIONAL
9590   417B D7            push a
9591   417C 11            mov a, b
9592   417D FD 2E 30 00   mov32 cb, $00000030
9592   4181 00 00 
9593   4183 B0            cmp a, b
9594   4184 FD 82         sgeu ; >= (unsigned)
9595   4186 E4            pop a
9596   4187             ; --- END RELATIONAL
9597   4187             ; --- START LOGICAL AND
9598   4187 D7            push a
9599   4188 11            mov a, b
9600   4189 FA 05 00      lea d, [bp + 5] ; $str
9601   418C 2A            mov b, [d]
9602   418D 38 00 00      mov c, 0
9603   4190 74            mov d, b
9604   4191 32            mov bl, [d]
9605   4192 A7 00         mov bh, 0
9606   4194 38 00 00      mov c, 0
9607   4197             ; --- START RELATIONAL
9608   4197 D7            push a
9609   4198 11            mov a, b
9610   4199 FD 2E 39 00   mov32 cb, $00000039
9610   419D 00 00 
9611   419F B0            cmp a, b
9612   41A0 FD 76         sleu ; <= (unsigned)
9613   41A2 E4            pop a
9614   41A3             ; --- END RELATIONAL
9615   41A3 FD A7         sand a, b
9616   41A5 E4            pop a
9617   41A6             ; --- END LOGICAL AND
9618   41A6 C0 00 00      cmp b, 0
9619   41A9 C6 35 42      je _while215_exit
9620   41AC             _while215_block:
9621   41AC             ; result = result * 10 + (*str - '0'); 
9622   41AC FA FF FF      lea d, [bp + -1] ; $result
9623   41AF DA            push d
9624   41B0 FA FF FF      lea d, [bp + -1] ; $result
9625   41B3 2A            mov b, [d]
9626   41B4 38 00 00      mov c, 0
9627   41B7             ; --- START FACTORS
9628   41B7 D7            push a
9629   41B8 FD D8         push g
9630   41BA 11            mov a, b
9631   41BB FD 7A         mov g, c
9632   41BD FD 2E 0A 00   mov32 cb, $0000000a
9632   41C1 00 00 
9633   41C3 D7            push a     ; save left operand
9634   41C4 8E            xor a, b   ; xor sign bits
9635   41C5 FD AA         swp a      ; swap bytes
9636   41C7 83            mov cl, al ; save result of xor into 'dl'
9637   41C8 E4            pop a      ; restore left side operator
9638   41C9 DF            push cl    ; save result of xor above
9639   41CA FD AA         swp a  
9640   41CC 93 80         test al, $80  
9641   41CE FD AA         swp a  
9642   41D0 C6 D5 41      jz skip_invert_a_217  
9643   41D3 FD 95         neg a 
9644   41D5             skip_invert_a_217:   
9645   41D5 FD AB         swp b
9646   41D7 FD 93 80      test bl, $80  
9647   41DA FD AB         swp b
9648   41DC C6 E1 41      jz skip_invert_b_217  
9649   41DF FD 97         neg b 
9650   41E1             skip_invert_b_217:   
9651   41E1 AC            mul a, b ; *
9652   41E2 FD 78         mov g, a
9653   41E4 11            mov a, b
9654   41E5 EA            pop bl
9655   41E6 FD 93 80      test bl, $80
9656   41E9 C6 F6 41      jz _same_signs_217
9657   41EC 2F            mov bl, al
9658   41ED 95            not a
9659   41EE FD 97         neg b
9660   41F0 5B 00 00      adc a, 0
9661   41F3 FD 78         mov g, a
9662   41F5 11            mov a, b
9663   41F6             _same_signs_217:
9664   41F6 FD 38         mov c, g
9665   41F8 27            mov b, a
9666   41F9 FD F1         pop g
9667   41FB E4            pop a
9668   41FC             ; --- END FACTORS
9669   41FC             ; --- START TERMS
9670   41FC D7            push a
9671   41FD FD D8         push g
9672   41FF 11            mov a, b
9673   4200 FD 7A         mov g, c
9674   4202 FA 05 00      lea d, [bp + 5] ; $str
9675   4205 2A            mov b, [d]
9676   4206 38 00 00      mov c, 0
9677   4209 74            mov d, b
9678   420A 32            mov bl, [d]
9679   420B A7 00         mov bh, 0
9680   420D 38 00 00      mov c, 0
9681   4210             ; --- START TERMS
9682   4210 D7            push a
9683   4211 11            mov a, b
9684   4212 FD 2E 30 00   mov32 cb, $00000030
9684   4216 00 00 
9685   4218 60            sub a, b
9686   4219 27            mov b, a
9687   421A E4            pop a
9688   421B             ; --- END TERMS
9689   421B 56            add b, a
9690   421C FD F1         pop g
9691   421E E4            pop a
9692   421F             ; --- END TERMS
9693   421F E7            pop d
9694   4220 FD 43         mov [d], b
9695   4222             ; str++; 
9696   4222 FA 05 00      lea d, [bp + 5] ; $str
9697   4225 2A            mov b, [d]
9698   4226 38 00 00      mov c, 0
9699   4229 FD 77         inc b
9700   422B FA 05 00      lea d, [bp + 5] ; $str
9701   422E FD 43         mov [d], b
9702   4230 FD 7D         dec b
9703   4232 0A 6D 41      jmp _while215_cond
9704   4235             _while215_exit:
9705   4235             ; return sign * result; 
9706   4235 FA FD FF      lea d, [bp + -3] ; $sign
9707   4238 2A            mov b, [d]
9708   4239 38 00 00      mov c, 0
9709   423C             ; --- START FACTORS
9710   423C D7            push a
9711   423D FD D8         push g
9712   423F 11            mov a, b
9713   4240 FD 7A         mov g, c
9714   4242 FA FF FF      lea d, [bp + -1] ; $result
9715   4245 2A            mov b, [d]
9716   4246 38 00 00      mov c, 0
9717   4249 D7            push a     ; save left operand
9718   424A 8E            xor a, b   ; xor sign bits
9719   424B FD AA         swp a      ; swap bytes
9720   424D 83            mov cl, al ; save result of xor into 'dl'
9721   424E E4            pop a      ; restore left side operator
9722   424F DF            push cl    ; save result of xor above
9723   4250 FD AA         swp a  
9724   4252 93 80         test al, $80  
9725   4254 FD AA         swp a  
9726   4256 C6 5B 42      jz skip_invert_a_219  
9727   4259 FD 95         neg a 
9728   425B             skip_invert_a_219:   
9729   425B FD AB         swp b
9730   425D FD 93 80      test bl, $80  
9731   4260 FD AB         swp b
9732   4262 C6 67 42      jz skip_invert_b_219  
9733   4265 FD 97         neg b 
9734   4267             skip_invert_b_219:   
9735   4267 AC            mul a, b ; *
9736   4268 FD 78         mov g, a
9737   426A 11            mov a, b
9738   426B EA            pop bl
9739   426C FD 93 80      test bl, $80
9740   426F C6 7C 42      jz _same_signs_219
9741   4272 2F            mov bl, al
9742   4273 95            not a
9743   4274 FD 97         neg b
9744   4276 5B 00 00      adc a, 0
9745   4279 FD 78         mov g, a
9746   427B 11            mov a, b
9747   427C             _same_signs_219:
9748   427C FD 38         mov c, g
9749   427E 27            mov b, a
9750   427F FD F1         pop g
9751   4281 E4            pop a
9752   4282             ; --- END FACTORS
9753   4282 F9            leave
9754   4283 09            ret
9755   4284             
9756   4284             printf:
9757   4284 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9758   4287             ; char *p, *format_p; 
9759   4287 52 02 00      sub sp, 2
9760   428A 52 02 00      sub sp, 2
9761   428D             ; format_p = format; 
9762   428D FA FD FF      lea d, [bp + -3] ; $format_p
9763   4290 DA            push d
9764   4291 FA 05 00      lea d, [bp + 5] ; $format
9765   4294 2A            mov b, [d]
9766   4295 38 00 00      mov c, 0
9767   4298 E7            pop d
9768   4299 FD 43         mov [d], b
9769   429B             ; p = &format + 2; 
9770   429B FA FF FF      lea d, [bp + -1] ; $p
9771   429E DA            push d
9772   429F FA 05 00      lea d, [bp + 5] ; $format
9773   42A2 2D            mov b, d
9774   42A3             ; --- START TERMS
9775   42A3 D7            push a
9776   42A4 11            mov a, b
9777   42A5 FD 2E 02 00   mov32 cb, $00000002
9777   42A9 00 00 
9778   42AB 56            add b, a
9779   42AC E4            pop a
9780   42AD             ; --- END TERMS
9781   42AD E7            pop d
9782   42AE FD 43         mov [d], b
9783   42B0             ; for(;;){ 
9784   42B0             _for220_init:
9785   42B0             _for220_cond:
9786   42B0             _for220_block:
9787   42B0             ; if(!*format_p) break; 
9788   42B0             _if221_cond:
9789   42B0 FA FD FF      lea d, [bp + -3] ; $format_p
9790   42B3 2A            mov b, [d]
9791   42B4 38 00 00      mov c, 0
9792   42B7 74            mov d, b
9793   42B8 32            mov bl, [d]
9794   42B9 A7 00         mov bh, 0
9795   42BB 38 00 00      mov c, 0
9796   42BE C0 00 00      cmp b, 0
9797   42C1 FD 71         seq ; !
9798   42C3 C0 00 00      cmp b, 0
9799   42C6 C6 CF 42      je _if221_else
9800   42C9             _if221_TRUE:
9801   42C9             ; break; 
9802   42C9 0A 7F 45      jmp _for220_exit ; for break
9803   42CC 0A 7C 45      jmp _if221_exit
9804   42CF             _if221_else:
9805   42CF             ; if(*format_p == '%'){ 
9806   42CF             _if222_cond:
9807   42CF FA FD FF      lea d, [bp + -3] ; $format_p
9808   42D2 2A            mov b, [d]
9809   42D3 38 00 00      mov c, 0
9810   42D6 74            mov d, b
9811   42D7 32            mov bl, [d]
9812   42D8 A7 00         mov bh, 0
9813   42DA 38 00 00      mov c, 0
9814   42DD             ; --- START RELATIONAL
9815   42DD D7            push a
9816   42DE 11            mov a, b
9817   42DF FD 2E 25 00   mov32 cb, $00000025
9817   42E3 00 00 
9818   42E5 B0            cmp a, b
9819   42E6 FD 71         seq ; ==
9820   42E8 E4            pop a
9821   42E9             ; --- END RELATIONAL
9822   42E9 C0 00 00      cmp b, 0
9823   42EC C6 57 45      je _if222_else
9824   42EF             _if222_TRUE:
9825   42EF             ; format_p++; 
9826   42EF FA FD FF      lea d, [bp + -3] ; $format_p
9827   42F2 2A            mov b, [d]
9828   42F3 38 00 00      mov c, 0
9829   42F6 FD 77         inc b
9830   42F8 FA FD FF      lea d, [bp + -3] ; $format_p
9831   42FB FD 43         mov [d], b
9832   42FD FD 7D         dec b
9833   42FF             ; switch(*format_p){ 
9834   42FF             _switch223_expr:
9835   42FF FA FD FF      lea d, [bp + -3] ; $format_p
9836   4302 2A            mov b, [d]
9837   4303 38 00 00      mov c, 0
9838   4306 74            mov d, b
9839   4307 32            mov bl, [d]
9840   4308 A7 00         mov bh, 0
9841   430A 38 00 00      mov c, 0
9842   430D             _switch223_comparisons:
9843   430D C1 6C         cmp bl, $6c
9844   430F C6 3B 43      je _switch223_case0
9845   4312 C1 4C         cmp bl, $4c
9846   4314 C6 3B 43      je _switch223_case1
9847   4317 C1 64         cmp bl, $64
9848   4319 C6 4B 44      je _switch223_case2
9849   431C C1 69         cmp bl, $69
9850   431E C6 4B 44      je _switch223_case3
9851   4321 C1 75         cmp bl, $75
9852   4323 C6 7B 44      je _switch223_case4
9853   4326 C1 78         cmp bl, $78
9854   4328 C6 AB 44      je _switch223_case5
9855   432B C1 63         cmp bl, $63
9856   432D C6 DB 44      je _switch223_case6
9857   4330 C1 73         cmp bl, $73
9858   4332 C6 0B 45      je _switch223_case7
9859   4335 0A 38 45      jmp _switch223_default
9860   4338 0A 44 45      jmp _switch223_exit
9861   433B             _switch223_case0:
9862   433B             _switch223_case1:
9863   433B             ; format_p++; 
9864   433B FA FD FF      lea d, [bp + -3] ; $format_p
9865   433E 2A            mov b, [d]
9866   433F 38 00 00      mov c, 0
9867   4342 FD 77         inc b
9868   4344 FA FD FF      lea d, [bp + -3] ; $format_p
9869   4347 FD 43         mov [d], b
9870   4349 FD 7D         dec b
9871   434B             ; if(*format_p == 'd' || *format_p == 'i') 
9872   434B             _if224_cond:
9873   434B FA FD FF      lea d, [bp + -3] ; $format_p
9874   434E 2A            mov b, [d]
9875   434F 38 00 00      mov c, 0
9876   4352 74            mov d, b
9877   4353 32            mov bl, [d]
9878   4354 A7 00         mov bh, 0
9879   4356 38 00 00      mov c, 0
9880   4359             ; --- START RELATIONAL
9881   4359 D7            push a
9882   435A 11            mov a, b
9883   435B FD 2E 64 00   mov32 cb, $00000064
9883   435F 00 00 
9884   4361 B0            cmp a, b
9885   4362 FD 71         seq ; ==
9886   4364 E4            pop a
9887   4365             ; --- END RELATIONAL
9888   4365             ; --- START LOGICAL OR
9889   4365 D7            push a
9890   4366 11            mov a, b
9891   4367 FA FD FF      lea d, [bp + -3] ; $format_p
9892   436A 2A            mov b, [d]
9893   436B 38 00 00      mov c, 0
9894   436E 74            mov d, b
9895   436F 32            mov bl, [d]
9896   4370 A7 00         mov bh, 0
9897   4372 38 00 00      mov c, 0
9898   4375             ; --- START RELATIONAL
9899   4375 D7            push a
9900   4376 11            mov a, b
9901   4377 FD 2E 69 00   mov32 cb, $00000069
9901   437B 00 00 
9902   437D B0            cmp a, b
9903   437E FD 71         seq ; ==
9904   4380 E4            pop a
9905   4381             ; --- END RELATIONAL
9906   4381 FD A8         sor a, b ; ||
9907   4383 E4            pop a
9908   4384             ; --- END LOGICAL OR
9909   4384 C0 00 00      cmp b, 0
9910   4387 C6 A8 43      je _if224_else
9911   438A             _if224_TRUE:
9912   438A             ; print_signed_long(*(long *)p); 
9913   438A             ; --- START FUNCTION CALL
9914   438A FA FF FF      lea d, [bp + -1] ; $p
9915   438D 2A            mov b, [d]
9916   438E 38 00 00      mov c, 0
9917   4391 74            mov d, b
9918   4392 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9919   4395 FD 39         mov c, b ; And place it into C
9920   4397 2A            mov b, [d] ; Lower Word in B
9921   4398 12            mov a, c
9922   4399 FD AA         swp a
9923   439B D7            push a
9924   439C FD AB         swp b
9925   439E D8            push b
9926   439F 07 81 45      call print_signed_long
9927   43A2 51 04 00      add sp, 4
9928   43A5             ; --- END FUNCTION CALL
9929   43A5 0A 30 44      jmp _if224_exit
9930   43A8             _if224_else:
9931   43A8             ; if(*format_p == 'u') 
9932   43A8             _if225_cond:
9933   43A8 FA FD FF      lea d, [bp + -3] ; $format_p
9934   43AB 2A            mov b, [d]
9935   43AC 38 00 00      mov c, 0
9936   43AF 74            mov d, b
9937   43B0 32            mov bl, [d]
9938   43B1 A7 00         mov bh, 0
9939   43B3 38 00 00      mov c, 0
9940   43B6             ; --- START RELATIONAL
9941   43B6 D7            push a
9942   43B7 11            mov a, b
9943   43B8 FD 2E 75 00   mov32 cb, $00000075
9943   43BC 00 00 
9944   43BE B0            cmp a, b
9945   43BF FD 71         seq ; ==
9946   43C1 E4            pop a
9947   43C2             ; --- END RELATIONAL
9948   43C2 C0 00 00      cmp b, 0
9949   43C5 C6 E6 43      je _if225_else
9950   43C8             _if225_TRUE:
9951   43C8             ; print_unsigned_long(*(unsigned long *)p); 
9952   43C8             ; --- START FUNCTION CALL
9953   43C8 FA FF FF      lea d, [bp + -1] ; $p
9954   43CB 2A            mov b, [d]
9955   43CC 38 00 00      mov c, 0
9956   43CF 74            mov d, b
9957   43D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9958   43D3 FD 39         mov c, b ; And place it into C
9959   43D5 2A            mov b, [d] ; Lower Word in B
9960   43D6 12            mov a, c
9961   43D7 FD AA         swp a
9962   43D9 D7            push a
9963   43DA FD AB         swp b
9964   43DC D8            push b
9965   43DD 07 14 47      call print_unsigned_long
9966   43E0 51 04 00      add sp, 4
9967   43E3             ; --- END FUNCTION CALL
9968   43E3 0A 30 44      jmp _if225_exit
9969   43E6             _if225_else:
9970   43E6             ; if(*format_p == 'x') 
9971   43E6             _if226_cond:
9972   43E6 FA FD FF      lea d, [bp + -3] ; $format_p
9973   43E9 2A            mov b, [d]
9974   43EA 38 00 00      mov c, 0
9975   43ED 74            mov d, b
9976   43EE 32            mov bl, [d]
9977   43EF A7 00         mov bh, 0
9978   43F1 38 00 00      mov c, 0
9979   43F4             ; --- START RELATIONAL
9980   43F4 D7            push a
9981   43F5 11            mov a, b
9982   43F6 FD 2E 78 00   mov32 cb, $00000078
9982   43FA 00 00 
9983   43FC B0            cmp a, b
9984   43FD FD 71         seq ; ==
9985   43FF E4            pop a
9986   4400             ; --- END RELATIONAL
9987   4400 C0 00 00      cmp b, 0
9988   4403 C6 24 44      je _if226_else
9989   4406             _if226_TRUE:
9990   4406             ; printx32(*(long int *)p); 
9991   4406             ; --- START FUNCTION CALL
9992   4406 FA FF FF      lea d, [bp + -1] ; $p
9993   4409 2A            mov b, [d]
9994   440A 38 00 00      mov c, 0
9995   440D 74            mov d, b
9996   440E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9997   4411 FD 39         mov c, b ; And place it into C
9998   4413 2A            mov b, [d] ; Lower Word in B
9999   4414 12            mov a, c
10000  4415 FD AA         swp a
10001  4417 D7            push a
10002  4418 FD AB         swp b
10003  441A D8            push b
10004  441B 07 48 48      call printx32
10005  441E 51 04 00      add sp, 4
10006  4421             ; --- END FUNCTION CALL
10007  4421 0A 30 44      jmp _if226_exit
10008  4424             _if226_else:
10009  4424             ; err("Unexpected format in printf."); 
10010  4424             ; --- START FUNCTION CALL
10011  4424 26 A5 53      mov b, _s82 ; "Unexpected format in printf."
10012  4427 FD AB         swp b
10013  4429 D8            push b
10014  442A 07 A8 48      call err
10015  442D 51 02 00      add sp, 2
10016  4430             ; --- END FUNCTION CALL
10017  4430             _if226_exit:
10018  4430             _if225_exit:
10019  4430             _if224_exit:
10020  4430             ; p = p + 4; 
10021  4430 FA FF FF      lea d, [bp + -1] ; $p
10022  4433 DA            push d
10023  4434 FA FF FF      lea d, [bp + -1] ; $p
10024  4437 2A            mov b, [d]
10025  4438 38 00 00      mov c, 0
10026  443B             ; --- START TERMS
10027  443B D7            push a
10028  443C 11            mov a, b
10029  443D FD 2E 04 00   mov32 cb, $00000004
10029  4441 00 00 
10030  4443 56            add b, a
10031  4444 E4            pop a
10032  4445             ; --- END TERMS
10033  4445 E7            pop d
10034  4446 FD 43         mov [d], b
10035  4448             ; break; 
10036  4448 0A 44 45      jmp _switch223_exit ; case break
10037  444B             _switch223_case2:
10038  444B             _switch223_case3:
10039  444B             ; print_signed(*(int*)p); 
10040  444B             ; --- START FUNCTION CALL
10041  444B FA FF FF      lea d, [bp + -1] ; $p
10042  444E 2A            mov b, [d]
10043  444F 38 00 00      mov c, 0
10044  4452 74            mov d, b
10045  4453 2A            mov b, [d]
10046  4454 38 00 00      mov c, 0
10047  4457 FD AB         swp b
10048  4459 D8            push b
10049  445A 07 BD 48      call print_signed
10050  445D 51 02 00      add sp, 2
10051  4460             ; --- END FUNCTION CALL
10052  4460             ; p = p + 2; 
10053  4460 FA FF FF      lea d, [bp + -1] ; $p
10054  4463 DA            push d
10055  4464 FA FF FF      lea d, [bp + -1] ; $p
10056  4467 2A            mov b, [d]
10057  4468 38 00 00      mov c, 0
10058  446B             ; --- START TERMS
10059  446B D7            push a
10060  446C 11            mov a, b
10061  446D FD 2E 02 00   mov32 cb, $00000002
10061  4471 00 00 
10062  4473 56            add b, a
10063  4474 E4            pop a
10064  4475             ; --- END TERMS
10065  4475 E7            pop d
10066  4476 FD 43         mov [d], b
10067  4478             ; break; 
10068  4478 0A 44 45      jmp _switch223_exit ; case break
10069  447B             _switch223_case4:
10070  447B             ; print_unsigned(*(unsigned int*)p); 
10071  447B             ; --- START FUNCTION CALL
10072  447B FA FF FF      lea d, [bp + -1] ; $p
10073  447E 2A            mov b, [d]
10074  447F 38 00 00      mov c, 0
10075  4482 74            mov d, b
10076  4483 2A            mov b, [d]
10077  4484 38 00 00      mov c, 0
10078  4487 FD AB         swp b
10079  4489 D8            push b
10080  448A 07 0E 4A      call print_unsigned
10081  448D 51 02 00      add sp, 2
10082  4490             ; --- END FUNCTION CALL
10083  4490             ; p = p + 2; 
10084  4490 FA FF FF      lea d, [bp + -1] ; $p
10085  4493 DA            push d
10086  4494 FA FF FF      lea d, [bp + -1] ; $p
10087  4497 2A            mov b, [d]
10088  4498 38 00 00      mov c, 0
10089  449B             ; --- START TERMS
10090  449B D7            push a
10091  449C 11            mov a, b
10092  449D FD 2E 02 00   mov32 cb, $00000002
10092  44A1 00 00 
10093  44A3 56            add b, a
10094  44A4 E4            pop a
10095  44A5             ; --- END TERMS
10096  44A5 E7            pop d
10097  44A6 FD 43         mov [d], b
10098  44A8             ; break; 
10099  44A8 0A 44 45      jmp _switch223_exit ; case break
10100  44AB             _switch223_case5:
10101  44AB             ; printx16(*(int*)p); 
10102  44AB             ; --- START FUNCTION CALL
10103  44AB FA FF FF      lea d, [bp + -1] ; $p
10104  44AE 2A            mov b, [d]
10105  44AF 38 00 00      mov c, 0
10106  44B2 74            mov d, b
10107  44B3 2A            mov b, [d]
10108  44B4 38 00 00      mov c, 0
10109  44B7 FD AB         swp b
10110  44B9 D8            push b
10111  44BA 07 26 4B      call printx16
10112  44BD 51 02 00      add sp, 2
10113  44C0             ; --- END FUNCTION CALL
10114  44C0             ; p = p + 2; 
10115  44C0 FA FF FF      lea d, [bp + -1] ; $p
10116  44C3 DA            push d
10117  44C4 FA FF FF      lea d, [bp + -1] ; $p
10118  44C7 2A            mov b, [d]
10119  44C8 38 00 00      mov c, 0
10120  44CB             ; --- START TERMS
10121  44CB D7            push a
10122  44CC 11            mov a, b
10123  44CD FD 2E 02 00   mov32 cb, $00000002
10123  44D1 00 00 
10124  44D3 56            add b, a
10125  44D4 E4            pop a
10126  44D5             ; --- END TERMS
10127  44D5 E7            pop d
10128  44D6 FD 43         mov [d], b
10129  44D8             ; break; 
10130  44D8 0A 44 45      jmp _switch223_exit ; case break
10131  44DB             _switch223_case6:
10132  44DB             ; putchar(*(char*)p); 
10133  44DB             ; --- START FUNCTION CALL
10134  44DB FA FF FF      lea d, [bp + -1] ; $p
10135  44DE 2A            mov b, [d]
10136  44DF 38 00 00      mov c, 0
10137  44E2 74            mov d, b
10138  44E3 32            mov bl, [d]
10139  44E4 A7 00         mov bh, 0
10140  44E6 38 00 00      mov c, 0
10141  44E9 DD            push bl
10142  44EA 07 06 47      call putchar
10143  44ED 51 01 00      add sp, 1
10144  44F0             ; --- END FUNCTION CALL
10145  44F0             ; p = p + 2; 
10146  44F0 FA FF FF      lea d, [bp + -1] ; $p
10147  44F3 DA            push d
10148  44F4 FA FF FF      lea d, [bp + -1] ; $p
10149  44F7 2A            mov b, [d]
10150  44F8 38 00 00      mov c, 0
10151  44FB             ; --- START TERMS
10152  44FB D7            push a
10153  44FC 11            mov a, b
10154  44FD FD 2E 02 00   mov32 cb, $00000002
10154  4501 00 00 
10155  4503 56            add b, a
10156  4504 E4            pop a
10157  4505             ; --- END TERMS
10158  4505 E7            pop d
10159  4506 FD 43         mov [d], b
10160  4508             ; break; 
10161  4508 0A 44 45      jmp _switch223_exit ; case break
10162  450B             _switch223_case7:
10163  450B             ; print(*(char**)p); 
10164  450B             ; --- START FUNCTION CALL
10165  450B FA FF FF      lea d, [bp + -1] ; $p
10166  450E 2A            mov b, [d]
10167  450F 38 00 00      mov c, 0
10168  4512 74            mov d, b
10169  4513 2A            mov b, [d]
10170  4514 FD AB         swp b
10171  4516 D8            push b
10172  4517 07 54 3E      call print
10173  451A 51 02 00      add sp, 2
10174  451D             ; --- END FUNCTION CALL
10175  451D             ; p = p + 2; 
10176  451D FA FF FF      lea d, [bp + -1] ; $p
10177  4520 DA            push d
10178  4521 FA FF FF      lea d, [bp + -1] ; $p
10179  4524 2A            mov b, [d]
10180  4525 38 00 00      mov c, 0
10181  4528             ; --- START TERMS
10182  4528 D7            push a
10183  4529 11            mov a, b
10184  452A FD 2E 02 00   mov32 cb, $00000002
10184  452E 00 00 
10185  4530 56            add b, a
10186  4531 E4            pop a
10187  4532             ; --- END TERMS
10188  4532 E7            pop d
10189  4533 FD 43         mov [d], b
10190  4535             ; break; 
10191  4535 0A 44 45      jmp _switch223_exit ; case break
10192  4538             _switch223_default:
10193  4538             ; print("Error: Unknown argument type.\n"); 
10194  4538             ; --- START FUNCTION CALL
10195  4538 26 C2 53      mov b, _s83 ; "Error: Unknown argument type.\n"
10196  453B FD AB         swp b
10197  453D D8            push b
10198  453E 07 54 3E      call print
10199  4541 51 02 00      add sp, 2
10200  4544             ; --- END FUNCTION CALL
10201  4544             _switch223_exit:
10202  4544             ; format_p++; 
10203  4544 FA FD FF      lea d, [bp + -3] ; $format_p
10204  4547 2A            mov b, [d]
10205  4548 38 00 00      mov c, 0
10206  454B FD 77         inc b
10207  454D FA FD FF      lea d, [bp + -3] ; $format_p
10208  4550 FD 43         mov [d], b
10209  4552 FD 7D         dec b
10210  4554 0A 7C 45      jmp _if222_exit
10211  4557             _if222_else:
10212  4557             ; putchar(*format_p); 
10213  4557             ; --- START FUNCTION CALL
10214  4557 FA FD FF      lea d, [bp + -3] ; $format_p
10215  455A 2A            mov b, [d]
10216  455B 38 00 00      mov c, 0
10217  455E 74            mov d, b
10218  455F 32            mov bl, [d]
10219  4560 A7 00         mov bh, 0
10220  4562 38 00 00      mov c, 0
10221  4565 DD            push bl
10222  4566 07 06 47      call putchar
10223  4569 51 01 00      add sp, 1
10224  456C             ; --- END FUNCTION CALL
10225  456C             ; format_p++; 
10226  456C FA FD FF      lea d, [bp + -3] ; $format_p
10227  456F 2A            mov b, [d]
10228  4570 38 00 00      mov c, 0
10229  4573 FD 77         inc b
10230  4575 FA FD FF      lea d, [bp + -3] ; $format_p
10231  4578 FD 43         mov [d], b
10232  457A FD 7D         dec b
10233  457C             _if222_exit:
10234  457C             _if221_exit:
10235  457C             _for220_update:
10236  457C 0A B0 42      jmp _for220_cond
10237  457F             _for220_exit:
10238  457F F9            leave
10239  4580 09            ret
10240  4581             
10241  4581             print_signed_long:
10242  4581 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10243  4584             ; char digits[10]; 
10244  4584 52 0A 00      sub sp, 10
10245  4587             ; int i = 0; 
10246  4587 52 02 00      sub sp, 2
10247  458A             ; --- START LOCAL VAR INITIALIZATION
10248  458A FA F5 FF      lea d, [bp + -11] ; $i
10249  458D DA            push d
10250  458E FD 2E 00 00   mov32 cb, $00000000
10250  4592 00 00 
10251  4594 E7            pop d
10252  4595 FD 43         mov [d], b
10253  4597             ; --- END LOCAL VAR INITIALIZATION
10254  4597             ; if (num < 0) { 
10255  4597             _if227_cond:
10256  4597 FA 05 00      lea d, [bp + 5] ; $num
10257  459A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10258  459D FD 39         mov c, b ; And place it into C
10259  459F 2A            mov b, [d] ; Lower Word in B
10260  45A0             ; --- START RELATIONAL
10261  45A0 D7            push a
10262  45A1 FD D8         push g
10263  45A3 11            mov a, b
10264  45A4 FD 7A         mov g, c
10265  45A6 FD 2E 00 00   mov32 cb, $00000000
10265  45AA 00 00 
10266  45AC FD AF         cmp32 ga, cb
10267  45AE FD 73         slt ; <
10268  45B0 FD F1         pop g
10269  45B2 E4            pop a
10270  45B3             ; --- END RELATIONAL
10271  45B3 C0 00 00      cmp b, 0
10272  45B6 C6 E8 45      je _if227_else
10273  45B9             _if227_TRUE:
10274  45B9             ; putchar('-'); 
10275  45B9             ; --- START FUNCTION CALL
10276  45B9 FD 2E 2D 00   mov32 cb, $0000002d
10276  45BD 00 00 
10277  45BF DD            push bl
10278  45C0 07 06 47      call putchar
10279  45C3 51 01 00      add sp, 1
10280  45C6             ; --- END FUNCTION CALL
10281  45C6             ; num = -num; 
10282  45C6 FA 05 00      lea d, [bp + 5] ; $num
10283  45C9 DA            push d
10284  45CA FA 05 00      lea d, [bp + 5] ; $num
10285  45CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10286  45D0 FD 39         mov c, b ; And place it into C
10287  45D2 2A            mov b, [d] ; Lower Word in B
10288  45D3 12            mov a, c
10289  45D4 95            not a
10290  45D5 97            not b
10291  45D6 55 01 00      add b, 1
10292  45D9 5B 00 00      adc a, 0
10293  45DC 39            mov c, a
10294  45DD E7            pop d
10295  45DE FD 43         mov [d], b
10296  45E0 28            mov b, c
10297  45E1 FD 44 02 00   mov [d + 2], b
10298  45E5 0A 1C 46      jmp _if227_exit
10299  45E8             _if227_else:
10300  45E8             ; if (num == 0) { 
10301  45E8             _if228_cond:
10302  45E8 FA 05 00      lea d, [bp + 5] ; $num
10303  45EB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10304  45EE FD 39         mov c, b ; And place it into C
10305  45F0 2A            mov b, [d] ; Lower Word in B
10306  45F1             ; --- START RELATIONAL
10307  45F1 D7            push a
10308  45F2 FD D8         push g
10309  45F4 11            mov a, b
10310  45F5 FD 7A         mov g, c
10311  45F7 FD 2E 00 00   mov32 cb, $00000000
10311  45FB 00 00 
10312  45FD FD AF         cmp32 ga, cb
10313  45FF FD 71         seq ; ==
10314  4601 FD F1         pop g
10315  4603 E4            pop a
10316  4604             ; --- END RELATIONAL
10317  4604 C0 00 00      cmp b, 0
10318  4607 C6 1C 46      je _if228_exit
10319  460A             _if228_TRUE:
10320  460A             ; putchar('0'); 
10321  460A             ; --- START FUNCTION CALL
10322  460A FD 2E 30 00   mov32 cb, $00000030
10322  460E 00 00 
10323  4610 DD            push bl
10324  4611 07 06 47      call putchar
10325  4614 51 01 00      add sp, 1
10326  4617             ; --- END FUNCTION CALL
10327  4617             ; return; 
10328  4617 F9            leave
10329  4618 09            ret
10330  4619 0A 1C 46      jmp _if228_exit
10331  461C             _if228_exit:
10332  461C             _if227_exit:
10333  461C             ; while (num > 0) { 
10334  461C             _while229_cond:
10335  461C FA 05 00      lea d, [bp + 5] ; $num
10336  461F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10337  4622 FD 39         mov c, b ; And place it into C
10338  4624 2A            mov b, [d] ; Lower Word in B
10339  4625             ; --- START RELATIONAL
10340  4625 D7            push a
10341  4626 FD D8         push g
10342  4628 11            mov a, b
10343  4629 FD 7A         mov g, c
10344  462B FD 2E 00 00   mov32 cb, $00000000
10344  462F 00 00 
10345  4631 FD AF         cmp32 ga, cb
10346  4633 FD 7F         sgt
10347  4635 FD F1         pop g
10348  4637 E4            pop a
10349  4638             ; --- END RELATIONAL
10350  4638 C0 00 00      cmp b, 0
10351  463B C6 BC 46      je _while229_exit
10352  463E             _while229_block:
10353  463E             ; digits[i] = '0' + (num % 10); 
10354  463E FA F7 FF      lea d, [bp + -9] ; $digits
10355  4641 D7            push a
10356  4642 DA            push d
10357  4643 FA F5 FF      lea d, [bp + -11] ; $i
10358  4646 2A            mov b, [d]
10359  4647 38 00 00      mov c, 0
10360  464A E7            pop d
10361  464B 5A            add d, b
10362  464C E4            pop a
10363  464D DA            push d
10364  464E FD 2E 30 00   mov32 cb, $00000030
10364  4652 00 00 
10365  4654             ; --- START TERMS
10366  4654 D7            push a
10367  4655 11            mov a, b
10368  4656 FA 05 00      lea d, [bp + 5] ; $num
10369  4659 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10370  465C FD 39         mov c, b ; And place it into C
10371  465E 2A            mov b, [d] ; Lower Word in B
10372  465F             ; --- START FACTORS
10373  465F D7            push a
10374  4660 FD D8         push g
10375  4662 11            mov a, b
10376  4663 FD 7A         mov g, c
10377  4665 FD 2E 0A 00   mov32 cb, $0000000a
10377  4669 00 00 
10378  466B FD D8         push g ; save 'g' as the div instruction uses it
10379  466D AE            div a, b ; %, a: quotient, b: remainder
10380  466E 11            mov a, b
10381  466F FD F1         pop g
10382  4671 FD 38         mov c, g
10383  4673 27            mov b, a
10384  4674 FD F1         pop g
10385  4676 E4            pop a
10386  4677             ; --- END FACTORS
10387  4677 FD 15         add32 cb, ga
10388  4679 E4            pop a
10389  467A             ; --- END TERMS
10390  467A E7            pop d
10391  467B FD 3E         mov [d], bl
10392  467D             ; num = num / 10; 
10393  467D FA 05 00      lea d, [bp + 5] ; $num
10394  4680 DA            push d
10395  4681 FA 05 00      lea d, [bp + 5] ; $num
10396  4684 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10397  4687 FD 39         mov c, b ; And place it into C
10398  4689 2A            mov b, [d] ; Lower Word in B
10399  468A             ; --- START FACTORS
10400  468A D7            push a
10401  468B FD D8         push g
10402  468D 11            mov a, b
10403  468E FD 7A         mov g, c
10404  4690 FD 2E 0A 00   mov32 cb, $0000000a
10404  4694 00 00 
10405  4696 FD D8         push g ; save 'g' as the div instruction uses it
10406  4698 AE            div a, b ; /, a: quotient, b: remainder
10407  4699 FD F1         pop g
10408  469B FD 38         mov c, g
10409  469D 27            mov b, a
10410  469E FD F1         pop g
10411  46A0 E4            pop a
10412  46A1             ; --- END FACTORS
10413  46A1 E7            pop d
10414  46A2 FD 43         mov [d], b
10415  46A4 28            mov b, c
10416  46A5 FD 44 02 00   mov [d + 2], b
10417  46A9             ; i++; 
10418  46A9 FA F5 FF      lea d, [bp + -11] ; $i
10419  46AC 2A            mov b, [d]
10420  46AD 38 00 00      mov c, 0
10421  46B0 11            mov a, b
10422  46B1 FD 77         inc b
10423  46B3 FA F5 FF      lea d, [bp + -11] ; $i
10424  46B6 FD 43         mov [d], b
10425  46B8 27            mov b, a
10426  46B9 0A 1C 46      jmp _while229_cond
10427  46BC             _while229_exit:
10428  46BC             ; while (i > 0) { 
10429  46BC             _while236_cond:
10430  46BC FA F5 FF      lea d, [bp + -11] ; $i
10431  46BF 2A            mov b, [d]
10432  46C0 38 00 00      mov c, 0
10433  46C3             ; --- START RELATIONAL
10434  46C3 D7            push a
10435  46C4 11            mov a, b
10436  46C5 FD 2E 00 00   mov32 cb, $00000000
10436  46C9 00 00 
10437  46CB B0            cmp a, b
10438  46CC FD 7F         sgt ; >
10439  46CE E4            pop a
10440  46CF             ; --- END RELATIONAL
10441  46CF C0 00 00      cmp b, 0
10442  46D2 C6 04 47      je _while236_exit
10443  46D5             _while236_block:
10444  46D5             ; i--; 
10445  46D5 FA F5 FF      lea d, [bp + -11] ; $i
10446  46D8 2A            mov b, [d]
10447  46D9 38 00 00      mov c, 0
10448  46DC 11            mov a, b
10449  46DD FD 7D         dec b
10450  46DF FA F5 FF      lea d, [bp + -11] ; $i
10451  46E2 FD 43         mov [d], b
10452  46E4 27            mov b, a
10453  46E5             ; putchar(digits[i]); 
10454  46E5             ; --- START FUNCTION CALL
10455  46E5 FA F7 FF      lea d, [bp + -9] ; $digits
10456  46E8 D7            push a
10457  46E9 DA            push d
10458  46EA FA F5 FF      lea d, [bp + -11] ; $i
10459  46ED 2A            mov b, [d]
10460  46EE 38 00 00      mov c, 0
10461  46F1 E7            pop d
10462  46F2 5A            add d, b
10463  46F3 E4            pop a
10464  46F4 32            mov bl, [d]
10465  46F5 A7 00         mov bh, 0
10466  46F7 38 00 00      mov c, 0
10467  46FA DD            push bl
10468  46FB 07 06 47      call putchar
10469  46FE 51 01 00      add sp, 1
10470  4701             ; --- END FUNCTION CALL
10471  4701 0A BC 46      jmp _while236_cond
10472  4704             _while236_exit:
10473  4704 F9            leave
10474  4705 09            ret
10475  4706             
10476  4706             putchar:
10477  4706 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10478  4709             ; --- BEGIN INLINE ASM SEGMENT
10479  4709 FA 05 00      lea d, [bp + 5] ; $c
10480  470C 1E            mov al, [d]
10481  470D 23            mov ah, al
10482  470E 19 00         mov al, 0
10483  4710 05 03         syscall sys_io      ; char in AH
10484  4712             ; --- END INLINE ASM SEGMENT
10485  4712 F9            leave
10486  4713 09            ret
10487  4714             
10488  4714             print_unsigned_long:
10489  4714 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10490  4717             ; char digits[10]; 
10491  4717 52 0A 00      sub sp, 10
10492  471A             ; int i; 
10493  471A 52 02 00      sub sp, 2
10494  471D             ; i = 0; 
10495  471D FA F5 FF      lea d, [bp + -11] ; $i
10496  4720 DA            push d
10497  4721 FD 2E 00 00   mov32 cb, $00000000
10497  4725 00 00 
10498  4727 E7            pop d
10499  4728 FD 43         mov [d], b
10500  472A             ; if(num == 0){ 
10501  472A             _if237_cond:
10502  472A FA 05 00      lea d, [bp + 5] ; $num
10503  472D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10504  4730 FD 39         mov c, b ; And place it into C
10505  4732 2A            mov b, [d] ; Lower Word in B
10506  4733             ; --- START RELATIONAL
10507  4733 D7            push a
10508  4734 FD D8         push g
10509  4736 11            mov a, b
10510  4737 FD 7A         mov g, c
10511  4739 FD 2E 00 00   mov32 cb, $00000000
10511  473D 00 00 
10512  473F FD AF         cmp32 ga, cb
10513  4741 FD 71         seq ; ==
10514  4743 FD F1         pop g
10515  4745 E4            pop a
10516  4746             ; --- END RELATIONAL
10517  4746 C0 00 00      cmp b, 0
10518  4749 C6 5E 47      je _if237_exit
10519  474C             _if237_TRUE:
10520  474C             ; putchar('0'); 
10521  474C             ; --- START FUNCTION CALL
10522  474C FD 2E 30 00   mov32 cb, $00000030
10522  4750 00 00 
10523  4752 DD            push bl
10524  4753 07 06 47      call putchar
10525  4756 51 01 00      add sp, 1
10526  4759             ; --- END FUNCTION CALL
10527  4759             ; return; 
10528  4759 F9            leave
10529  475A 09            ret
10530  475B 0A 5E 47      jmp _if237_exit
10531  475E             _if237_exit:
10532  475E             ; while (num > 0) { 
10533  475E             _while238_cond:
10534  475E FA 05 00      lea d, [bp + 5] ; $num
10535  4761 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10536  4764 FD 39         mov c, b ; And place it into C
10537  4766 2A            mov b, [d] ; Lower Word in B
10538  4767             ; --- START RELATIONAL
10539  4767 D7            push a
10540  4768 FD D8         push g
10541  476A 11            mov a, b
10542  476B FD 7A         mov g, c
10543  476D FD 2E 00 00   mov32 cb, $00000000
10543  4771 00 00 
10544  4773 FD AF         cmp32 ga, cb
10545  4775 FD 81         sgu
10546  4777 FD F1         pop g
10547  4779 E4            pop a
10548  477A             ; --- END RELATIONAL
10549  477A C0 00 00      cmp b, 0
10550  477D C6 FE 47      je _while238_exit
10551  4780             _while238_block:
10552  4780             ; digits[i] = '0' + (num % 10); 
10553  4780 FA F7 FF      lea d, [bp + -9] ; $digits
10554  4783 D7            push a
10555  4784 DA            push d
10556  4785 FA F5 FF      lea d, [bp + -11] ; $i
10557  4788 2A            mov b, [d]
10558  4789 38 00 00      mov c, 0
10559  478C E7            pop d
10560  478D 5A            add d, b
10561  478E E4            pop a
10562  478F DA            push d
10563  4790 FD 2E 30 00   mov32 cb, $00000030
10563  4794 00 00 
10564  4796             ; --- START TERMS
10565  4796 D7            push a
10566  4797 11            mov a, b
10567  4798 FA 05 00      lea d, [bp + 5] ; $num
10568  479B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10569  479E FD 39         mov c, b ; And place it into C
10570  47A0 2A            mov b, [d] ; Lower Word in B
10571  47A1             ; --- START FACTORS
10572  47A1 D7            push a
10573  47A2 FD D8         push g
10574  47A4 11            mov a, b
10575  47A5 FD 7A         mov g, c
10576  47A7 FD 2E 0A 00   mov32 cb, $0000000a
10576  47AB 00 00 
10577  47AD FD D8         push g ; save 'g' as the div instruction uses it
10578  47AF AE            div a, b ; %, a: quotient, b: remainder
10579  47B0 11            mov a, b
10580  47B1 FD F1         pop g
10581  47B3 FD 38         mov c, g
10582  47B5 27            mov b, a
10583  47B6 FD F1         pop g
10584  47B8 E4            pop a
10585  47B9             ; --- END FACTORS
10586  47B9 FD 15         add32 cb, ga
10587  47BB E4            pop a
10588  47BC             ; --- END TERMS
10589  47BC E7            pop d
10590  47BD FD 3E         mov [d], bl
10591  47BF             ; num = num / 10; 
10592  47BF FA 05 00      lea d, [bp + 5] ; $num
10593  47C2 DA            push d
10594  47C3 FA 05 00      lea d, [bp + 5] ; $num
10595  47C6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10596  47C9 FD 39         mov c, b ; And place it into C
10597  47CB 2A            mov b, [d] ; Lower Word in B
10598  47CC             ; --- START FACTORS
10599  47CC D7            push a
10600  47CD FD D8         push g
10601  47CF 11            mov a, b
10602  47D0 FD 7A         mov g, c
10603  47D2 FD 2E 0A 00   mov32 cb, $0000000a
10603  47D6 00 00 
10604  47D8 FD D8         push g ; save 'g' as the div instruction uses it
10605  47DA AE            div a, b ; /, a: quotient, b: remainder
10606  47DB FD F1         pop g
10607  47DD FD 38         mov c, g
10608  47DF 27            mov b, a
10609  47E0 FD F1         pop g
10610  47E2 E4            pop a
10611  47E3             ; --- END FACTORS
10612  47E3 E7            pop d
10613  47E4 FD 43         mov [d], b
10614  47E6 28            mov b, c
10615  47E7 FD 44 02 00   mov [d + 2], b
10616  47EB             ; i++; 
10617  47EB FA F5 FF      lea d, [bp + -11] ; $i
10618  47EE 2A            mov b, [d]
10619  47EF 38 00 00      mov c, 0
10620  47F2 11            mov a, b
10621  47F3 FD 77         inc b
10622  47F5 FA F5 FF      lea d, [bp + -11] ; $i
10623  47F8 FD 43         mov [d], b
10624  47FA 27            mov b, a
10625  47FB 0A 5E 47      jmp _while238_cond
10626  47FE             _while238_exit:
10627  47FE             ; while (i > 0) { 
10628  47FE             _while245_cond:
10629  47FE FA F5 FF      lea d, [bp + -11] ; $i
10630  4801 2A            mov b, [d]
10631  4802 38 00 00      mov c, 0
10632  4805             ; --- START RELATIONAL
10633  4805 D7            push a
10634  4806 11            mov a, b
10635  4807 FD 2E 00 00   mov32 cb, $00000000
10635  480B 00 00 
10636  480D B0            cmp a, b
10637  480E FD 7F         sgt ; >
10638  4810 E4            pop a
10639  4811             ; --- END RELATIONAL
10640  4811 C0 00 00      cmp b, 0
10641  4814 C6 46 48      je _while245_exit
10642  4817             _while245_block:
10643  4817             ; i--; 
10644  4817 FA F5 FF      lea d, [bp + -11] ; $i
10645  481A 2A            mov b, [d]
10646  481B 38 00 00      mov c, 0
10647  481E 11            mov a, b
10648  481F FD 7D         dec b
10649  4821 FA F5 FF      lea d, [bp + -11] ; $i
10650  4824 FD 43         mov [d], b
10651  4826 27            mov b, a
10652  4827             ; putchar(digits[i]); 
10653  4827             ; --- START FUNCTION CALL
10654  4827 FA F7 FF      lea d, [bp + -9] ; $digits
10655  482A D7            push a
10656  482B DA            push d
10657  482C FA F5 FF      lea d, [bp + -11] ; $i
10658  482F 2A            mov b, [d]
10659  4830 38 00 00      mov c, 0
10660  4833 E7            pop d
10661  4834 5A            add d, b
10662  4835 E4            pop a
10663  4836 32            mov bl, [d]
10664  4837 A7 00         mov bh, 0
10665  4839 38 00 00      mov c, 0
10666  483C DD            push bl
10667  483D 07 06 47      call putchar
10668  4840 51 01 00      add sp, 1
10669  4843             ; --- END FUNCTION CALL
10670  4843 0A FE 47      jmp _while245_cond
10671  4846             _while245_exit:
10672  4846 F9            leave
10673  4847 09            ret
10674  4848             
10675  4848             printx32:
10676  4848 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10677  484B             ; --- BEGIN INLINE ASM SEGMENT
10678  484B FA 05 00      lea d, [bp + 5] ; $hex
10679  484E 2B 02 00      mov b, [d+2]
10680  4851 07 5A 48      call print_u16x_printx32
10681  4854 2A            mov b, [d]
10682  4855 07 5A 48      call print_u16x_printx32
10683  4858             ; --- END INLINE ASM SEGMENT
10684  4858             ; return; 
10685  4858 F9            leave
10686  4859 09            ret
10687  485A             ; --- BEGIN INLINE ASM SEGMENT
10688  485A             print_u16x_printx32:
10689  485A D7            push a
10690  485B D8            push b
10691  485C DD            push bl
10692  485D 30            mov bl, bh
10693  485E 07 7C 48      call _itoa_printx32        ; convert bh to char in A
10694  4861 2F            mov bl, al        ; save al
10695  4862 19 00         mov al, 0
10696  4864 05 03         syscall sys_io        ; display AH
10697  4866 24            mov ah, bl        ; retrieve al
10698  4867 19 00         mov al, 0
10699  4869 05 03         syscall sys_io        ; display AL
10700  486B EA            pop bl
10701  486C 07 7C 48      call _itoa_printx32        ; convert bh to char in A
10702  486F 2F            mov bl, al        ; save al
10703  4870 19 00         mov al, 0
10704  4872 05 03         syscall sys_io        ; display AH
10705  4874 24            mov ah, bl        ; retrieve al
10706  4875 19 00         mov al, 0
10707  4877 05 03         syscall sys_io        ; display AL
10708  4879 E5            pop b
10709  487A E4            pop a
10710  487B 09            ret
10711  487C             _itoa_printx32:
10712  487C DA            push d
10713  487D D8            push b
10714  487E A7 00         mov bh, 0
10715  4880 FD A4 04      shr bl, 4  
10716  4883 74            mov d, b
10717  4884 1F 96 48      mov al, [d + s_hex_digits_printx32]
10718  4887 23            mov ah, al
10719  4888 E5            pop b
10720  4889 D8            push b
10721  488A A7 00         mov bh, 0
10722  488C FD 87 0F      and bl, $0F
10723  488F 74            mov d, b
10724  4890 1F 96 48      mov al, [d + s_hex_digits_printx32]
10725  4893 E5            pop b
10726  4894 E7            pop d
10727  4895 09            ret
10728  4896 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
10728  489A 34 35 36 37 
10728  489E 38 39 41 42 
10728  48A2 43 44 45 46 
10729  48A6             ; --- END INLINE ASM SEGMENT
10730  48A6 F9            leave
10731  48A7 09            ret
10732  48A8             
10733  48A8             err:
10734  48A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10735  48AB             ; print(e); 
10736  48AB             ; --- START FUNCTION CALL
10737  48AB FA 05 00      lea d, [bp + 5] ; $e
10738  48AE 2A            mov b, [d]
10739  48AF 38 00 00      mov c, 0
10740  48B2 FD AB         swp b
10741  48B4 D8            push b
10742  48B5 07 54 3E      call print
10743  48B8 51 02 00      add sp, 2
10744  48BB             ; --- END FUNCTION CALL
10745  48BB F9            leave
10746  48BC 09            ret
10747  48BD             
10748  48BD             print_signed:
10749  48BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
10750  48C0             ; char digits[5]; 
10751  48C0 52 05 00      sub sp, 5
10752  48C3             ; int i = 0; 
10753  48C3 52 02 00      sub sp, 2
10754  48C6             ; --- START LOCAL VAR INITIALIZATION
10755  48C6 FA FA FF      lea d, [bp + -6] ; $i
10756  48C9 DA            push d
10757  48CA FD 2E 00 00   mov32 cb, $00000000
10757  48CE 00 00 
10758  48D0 E7            pop d
10759  48D1 FD 43         mov [d], b
10760  48D3             ; --- END LOCAL VAR INITIALIZATION
10761  48D3             ; if (num < 0) { 
10762  48D3             _if246_cond:
10763  48D3 FA 05 00      lea d, [bp + 5] ; $num
10764  48D6 2A            mov b, [d]
10765  48D7 38 00 00      mov c, 0
10766  48DA             ; --- START RELATIONAL
10767  48DA D7            push a
10768  48DB 11            mov a, b
10769  48DC FD 2E 00 00   mov32 cb, $00000000
10769  48E0 00 00 
10770  48E2 B0            cmp a, b
10771  48E3 FD 73         slt ; < (signed)
10772  48E5 E4            pop a
10773  48E6             ; --- END RELATIONAL
10774  48E6 C0 00 00      cmp b, 0
10775  48E9 C6 0C 49      je _if246_else
10776  48EC             _if246_TRUE:
10777  48EC             ; putchar('-'); 
10778  48EC             ; --- START FUNCTION CALL
10779  48EC FD 2E 2D 00   mov32 cb, $0000002d
10779  48F0 00 00 
10780  48F2 DD            push bl
10781  48F3 07 06 47      call putchar
10782  48F6 51 01 00      add sp, 1
10783  48F9             ; --- END FUNCTION CALL
10784  48F9             ; num = -num; 
10785  48F9 FA 05 00      lea d, [bp + 5] ; $num
10786  48FC DA            push d
10787  48FD FA 05 00      lea d, [bp + 5] ; $num
10788  4900 2A            mov b, [d]
10789  4901 38 00 00      mov c, 0
10790  4904 FD 97         neg b
10791  4906 E7            pop d
10792  4907 FD 43         mov [d], b
10793  4909 0A 37 49      jmp _if246_exit
10794  490C             _if246_else:
10795  490C             ; if (num == 0) { 
10796  490C             _if247_cond:
10797  490C FA 05 00      lea d, [bp + 5] ; $num
10798  490F 2A            mov b, [d]
10799  4910 38 00 00      mov c, 0
10800  4913             ; --- START RELATIONAL
10801  4913 D7            push a
10802  4914 11            mov a, b
10803  4915 FD 2E 00 00   mov32 cb, $00000000
10803  4919 00 00 
10804  491B B0            cmp a, b
10805  491C FD 71         seq ; ==
10806  491E E4            pop a
10807  491F             ; --- END RELATIONAL
10808  491F C0 00 00      cmp b, 0
10809  4922 C6 37 49      je _if247_exit
10810  4925             _if247_TRUE:
10811  4925             ; putchar('0'); 
10812  4925             ; --- START FUNCTION CALL
10813  4925 FD 2E 30 00   mov32 cb, $00000030
10813  4929 00 00 
10814  492B DD            push bl
10815  492C 07 06 47      call putchar
10816  492F 51 01 00      add sp, 1
10817  4932             ; --- END FUNCTION CALL
10818  4932             ; return; 
10819  4932 F9            leave
10820  4933 09            ret
10821  4934 0A 37 49      jmp _if247_exit
10822  4937             _if247_exit:
10823  4937             _if246_exit:
10824  4937             ; while (num > 0) { 
10825  4937             _while248_cond:
10826  4937 FA 05 00      lea d, [bp + 5] ; $num
10827  493A 2A            mov b, [d]
10828  493B 38 00 00      mov c, 0
10829  493E             ; --- START RELATIONAL
10830  493E D7            push a
10831  493F 11            mov a, b
10832  4940 FD 2E 00 00   mov32 cb, $00000000
10832  4944 00 00 
10833  4946 B0            cmp a, b
10834  4947 FD 7F         sgt ; >
10835  4949 E4            pop a
10836  494A             ; --- END RELATIONAL
10837  494A C0 00 00      cmp b, 0
10838  494D C6 C4 49      je _while248_exit
10839  4950             _while248_block:
10840  4950             ; digits[i] = '0' + (num % 10); 
10841  4950 FA FC FF      lea d, [bp + -4] ; $digits
10842  4953 D7            push a
10843  4954 DA            push d
10844  4955 FA FA FF      lea d, [bp + -6] ; $i
10845  4958 2A            mov b, [d]
10846  4959 38 00 00      mov c, 0
10847  495C E7            pop d
10848  495D 5A            add d, b
10849  495E E4            pop a
10850  495F DA            push d
10851  4960 FD 2E 30 00   mov32 cb, $00000030
10851  4964 00 00 
10852  4966             ; --- START TERMS
10853  4966 D7            push a
10854  4967 11            mov a, b
10855  4968 FA 05 00      lea d, [bp + 5] ; $num
10856  496B 2A            mov b, [d]
10857  496C 38 00 00      mov c, 0
10858  496F             ; --- START FACTORS
10859  496F D7            push a
10860  4970 FD D8         push g
10861  4972 11            mov a, b
10862  4973 FD 7A         mov g, c
10863  4975 FD 2E 0A 00   mov32 cb, $0000000a
10863  4979 00 00 
10864  497B FD D8         push g ; save 'g' as the div instruction uses it
10865  497D AE            div a, b ; %, a: quotient, b: remainder
10866  497E 11            mov a, b
10867  497F FD F1         pop g
10868  4981 FD 38         mov c, g
10869  4983 27            mov b, a
10870  4984 FD F1         pop g
10871  4986 E4            pop a
10872  4987             ; --- END FACTORS
10873  4987 56            add b, a
10874  4988 E4            pop a
10875  4989             ; --- END TERMS
10876  4989 E7            pop d
10877  498A FD 3E         mov [d], bl
10878  498C             ; num = num / 10; 
10879  498C FA 05 00      lea d, [bp + 5] ; $num
10880  498F DA            push d
10881  4990 FA 05 00      lea d, [bp + 5] ; $num
10882  4993 2A            mov b, [d]
10883  4994 38 00 00      mov c, 0
10884  4997             ; --- START FACTORS
10885  4997 D7            push a
10886  4998 FD D8         push g
10887  499A 11            mov a, b
10888  499B FD 7A         mov g, c
10889  499D FD 2E 0A 00   mov32 cb, $0000000a
10889  49A1 00 00 
10890  49A3 FD D8         push g ; save 'g' as the div instruction uses it
10891  49A5 AE            div a, b ; /, a: quotient, b: remainder
10892  49A6 FD F1         pop g
10893  49A8 FD 38         mov c, g
10894  49AA 27            mov b, a
10895  49AB FD F1         pop g
10896  49AD E4            pop a
10897  49AE             ; --- END FACTORS
10898  49AE E7            pop d
10899  49AF FD 43         mov [d], b
10900  49B1             ; i++; 
10901  49B1 FA FA FF      lea d, [bp + -6] ; $i
10902  49B4 2A            mov b, [d]
10903  49B5 38 00 00      mov c, 0
10904  49B8 11            mov a, b
10905  49B9 FD 77         inc b
10906  49BB FA FA FF      lea d, [bp + -6] ; $i
10907  49BE FD 43         mov [d], b
10908  49C0 27            mov b, a
10909  49C1 0A 37 49      jmp _while248_cond
10910  49C4             _while248_exit:
10911  49C4             ; while (i > 0) { 
10912  49C4             _while255_cond:
10913  49C4 FA FA FF      lea d, [bp + -6] ; $i
10914  49C7 2A            mov b, [d]
10915  49C8 38 00 00      mov c, 0
10916  49CB             ; --- START RELATIONAL
10917  49CB D7            push a
10918  49CC 11            mov a, b
10919  49CD FD 2E 00 00   mov32 cb, $00000000
10919  49D1 00 00 
10920  49D3 B0            cmp a, b
10921  49D4 FD 7F         sgt ; >
10922  49D6 E4            pop a
10923  49D7             ; --- END RELATIONAL
10924  49D7 C0 00 00      cmp b, 0
10925  49DA C6 0C 4A      je _while255_exit
10926  49DD             _while255_block:
10927  49DD             ; i--; 
10928  49DD FA FA FF      lea d, [bp + -6] ; $i
10929  49E0 2A            mov b, [d]
10930  49E1 38 00 00      mov c, 0
10931  49E4 11            mov a, b
10932  49E5 FD 7D         dec b
10933  49E7 FA FA FF      lea d, [bp + -6] ; $i
10934  49EA FD 43         mov [d], b
10935  49EC 27            mov b, a
10936  49ED             ; putchar(digits[i]); 
10937  49ED             ; --- START FUNCTION CALL
10938  49ED FA FC FF      lea d, [bp + -4] ; $digits
10939  49F0 D7            push a
10940  49F1 DA            push d
10941  49F2 FA FA FF      lea d, [bp + -6] ; $i
10942  49F5 2A            mov b, [d]
10943  49F6 38 00 00      mov c, 0
10944  49F9 E7            pop d
10945  49FA 5A            add d, b
10946  49FB E4            pop a
10947  49FC 32            mov bl, [d]
10948  49FD A7 00         mov bh, 0
10949  49FF 38 00 00      mov c, 0
10950  4A02 DD            push bl
10951  4A03 07 06 47      call putchar
10952  4A06 51 01 00      add sp, 1
10953  4A09             ; --- END FUNCTION CALL
10954  4A09 0A C4 49      jmp _while255_cond
10955  4A0C             _while255_exit:
10956  4A0C F9            leave
10957  4A0D 09            ret
10958  4A0E             
10959  4A0E             print_unsigned:
10960  4A0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
10961  4A11             ; char digits[5]; 
10962  4A11 52 05 00      sub sp, 5
10963  4A14             ; int i; 
10964  4A14 52 02 00      sub sp, 2
10965  4A17             ; i = 0; 
10966  4A17 FA FA FF      lea d, [bp + -6] ; $i
10967  4A1A DA            push d
10968  4A1B FD 2E 00 00   mov32 cb, $00000000
10968  4A1F 00 00 
10969  4A21 E7            pop d
10970  4A22 FD 43         mov [d], b
10971  4A24             ; if(num == 0){ 
10972  4A24             _if256_cond:
10973  4A24 FA 05 00      lea d, [bp + 5] ; $num
10974  4A27 2A            mov b, [d]
10975  4A28 38 00 00      mov c, 0
10976  4A2B             ; --- START RELATIONAL
10977  4A2B D7            push a
10978  4A2C 11            mov a, b
10979  4A2D FD 2E 00 00   mov32 cb, $00000000
10979  4A31 00 00 
10980  4A33 B0            cmp a, b
10981  4A34 FD 71         seq ; ==
10982  4A36 E4            pop a
10983  4A37             ; --- END RELATIONAL
10984  4A37 C0 00 00      cmp b, 0
10985  4A3A C6 4F 4A      je _if256_exit
10986  4A3D             _if256_TRUE:
10987  4A3D             ; putchar('0'); 
10988  4A3D             ; --- START FUNCTION CALL
10989  4A3D FD 2E 30 00   mov32 cb, $00000030
10989  4A41 00 00 
10990  4A43 DD            push bl
10991  4A44 07 06 47      call putchar
10992  4A47 51 01 00      add sp, 1
10993  4A4A             ; --- END FUNCTION CALL
10994  4A4A             ; return; 
10995  4A4A F9            leave
10996  4A4B 09            ret
10997  4A4C 0A 4F 4A      jmp _if256_exit
10998  4A4F             _if256_exit:
10999  4A4F             ; while (num > 0) { 
11000  4A4F             _while257_cond:
11001  4A4F FA 05 00      lea d, [bp + 5] ; $num
11002  4A52 2A            mov b, [d]
11003  4A53 38 00 00      mov c, 0
11004  4A56             ; --- START RELATIONAL
11005  4A56 D7            push a
11006  4A57 11            mov a, b
11007  4A58 FD 2E 00 00   mov32 cb, $00000000
11007  4A5C 00 00 
11008  4A5E B0            cmp a, b
11009  4A5F FD 81         sgu ; > (unsigned)
11010  4A61 E4            pop a
11011  4A62             ; --- END RELATIONAL
11012  4A62 C0 00 00      cmp b, 0
11013  4A65 C6 DC 4A      je _while257_exit
11014  4A68             _while257_block:
11015  4A68             ; digits[i] = '0' + (num % 10); 
11016  4A68 FA FC FF      lea d, [bp + -4] ; $digits
11017  4A6B D7            push a
11018  4A6C DA            push d
11019  4A6D FA FA FF      lea d, [bp + -6] ; $i
11020  4A70 2A            mov b, [d]
11021  4A71 38 00 00      mov c, 0
11022  4A74 E7            pop d
11023  4A75 5A            add d, b
11024  4A76 E4            pop a
11025  4A77 DA            push d
11026  4A78 FD 2E 30 00   mov32 cb, $00000030
11026  4A7C 00 00 
11027  4A7E             ; --- START TERMS
11028  4A7E D7            push a
11029  4A7F 11            mov a, b
11030  4A80 FA 05 00      lea d, [bp + 5] ; $num
11031  4A83 2A            mov b, [d]
11032  4A84 38 00 00      mov c, 0
11033  4A87             ; --- START FACTORS
11034  4A87 D7            push a
11035  4A88 FD D8         push g
11036  4A8A 11            mov a, b
11037  4A8B FD 7A         mov g, c
11038  4A8D FD 2E 0A 00   mov32 cb, $0000000a
11038  4A91 00 00 
11039  4A93 FD D8         push g ; save 'g' as the div instruction uses it
11040  4A95 AE            div a, b ; %, a: quotient, b: remainder
11041  4A96 11            mov a, b
11042  4A97 FD F1         pop g
11043  4A99 FD 38         mov c, g
11044  4A9B 27            mov b, a
11045  4A9C FD F1         pop g
11046  4A9E E4            pop a
11047  4A9F             ; --- END FACTORS
11048  4A9F 56            add b, a
11049  4AA0 E4            pop a
11050  4AA1             ; --- END TERMS
11051  4AA1 E7            pop d
11052  4AA2 FD 3E         mov [d], bl
11053  4AA4             ; num = num / 10; 
11054  4AA4 FA 05 00      lea d, [bp + 5] ; $num
11055  4AA7 DA            push d
11056  4AA8 FA 05 00      lea d, [bp + 5] ; $num
11057  4AAB 2A            mov b, [d]
11058  4AAC 38 00 00      mov c, 0
11059  4AAF             ; --- START FACTORS
11060  4AAF D7            push a
11061  4AB0 FD D8         push g
11062  4AB2 11            mov a, b
11063  4AB3 FD 7A         mov g, c
11064  4AB5 FD 2E 0A 00   mov32 cb, $0000000a
11064  4AB9 00 00 
11065  4ABB FD D8         push g ; save 'g' as the div instruction uses it
11066  4ABD AE            div a, b ; /, a: quotient, b: remainder
11067  4ABE FD F1         pop g
11068  4AC0 FD 38         mov c, g
11069  4AC2 27            mov b, a
11070  4AC3 FD F1         pop g
11071  4AC5 E4            pop a
11072  4AC6             ; --- END FACTORS
11073  4AC6 E7            pop d
11074  4AC7 FD 43         mov [d], b
11075  4AC9             ; i++; 
11076  4AC9 FA FA FF      lea d, [bp + -6] ; $i
11077  4ACC 2A            mov b, [d]
11078  4ACD 38 00 00      mov c, 0
11079  4AD0 11            mov a, b
11080  4AD1 FD 77         inc b
11081  4AD3 FA FA FF      lea d, [bp + -6] ; $i
11082  4AD6 FD 43         mov [d], b
11083  4AD8 27            mov b, a
11084  4AD9 0A 4F 4A      jmp _while257_cond
11085  4ADC             _while257_exit:
11086  4ADC             ; while (i > 0) { 
11087  4ADC             _while264_cond:
11088  4ADC FA FA FF      lea d, [bp + -6] ; $i
11089  4ADF 2A            mov b, [d]
11090  4AE0 38 00 00      mov c, 0
11091  4AE3             ; --- START RELATIONAL
11092  4AE3 D7            push a
11093  4AE4 11            mov a, b
11094  4AE5 FD 2E 00 00   mov32 cb, $00000000
11094  4AE9 00 00 
11095  4AEB B0            cmp a, b
11096  4AEC FD 7F         sgt ; >
11097  4AEE E4            pop a
11098  4AEF             ; --- END RELATIONAL
11099  4AEF C0 00 00      cmp b, 0
11100  4AF2 C6 24 4B      je _while264_exit
11101  4AF5             _while264_block:
11102  4AF5             ; i--; 
11103  4AF5 FA FA FF      lea d, [bp + -6] ; $i
11104  4AF8 2A            mov b, [d]
11105  4AF9 38 00 00      mov c, 0
11106  4AFC 11            mov a, b
11107  4AFD FD 7D         dec b
11108  4AFF FA FA FF      lea d, [bp + -6] ; $i
11109  4B02 FD 43         mov [d], b
11110  4B04 27            mov b, a
11111  4B05             ; putchar(digits[i]); 
11112  4B05             ; --- START FUNCTION CALL
11113  4B05 FA FC FF      lea d, [bp + -4] ; $digits
11114  4B08 D7            push a
11115  4B09 DA            push d
11116  4B0A FA FA FF      lea d, [bp + -6] ; $i
11117  4B0D 2A            mov b, [d]
11118  4B0E 38 00 00      mov c, 0
11119  4B11 E7            pop d
11120  4B12 5A            add d, b
11121  4B13 E4            pop a
11122  4B14 32            mov bl, [d]
11123  4B15 A7 00         mov bh, 0
11124  4B17 38 00 00      mov c, 0
11125  4B1A DD            push bl
11126  4B1B 07 06 47      call putchar
11127  4B1E 51 01 00      add sp, 1
11128  4B21             ; --- END FUNCTION CALL
11129  4B21 0A DC 4A      jmp _while264_cond
11130  4B24             _while264_exit:
11131  4B24 F9            leave
11132  4B25 09            ret
11133  4B26             
11134  4B26             printx16:
11135  4B26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11136  4B29             ; --- BEGIN INLINE ASM SEGMENT
11137  4B29 FA 05 00      lea d, [bp + 5] ; $hex
11138  4B2C 2A            mov b, [d]
11139  4B2D             print_u16x_printx16:
11140  4B2D DD            push bl
11141  4B2E 30            mov bl, bh
11142  4B2F 07 4C 4B      call _itoa_printx16        ; convert bh to char in A
11143  4B32 2F            mov bl, al        ; save al
11144  4B33 19 00         mov al, 0
11145  4B35 05 03         syscall sys_io        ; display AH
11146  4B37 24            mov ah, bl        ; retrieve al
11147  4B38 19 00         mov al, 0
11148  4B3A 05 03         syscall sys_io        ; display AL
11149  4B3C EA            pop bl
11150  4B3D 07 4C 4B      call _itoa_printx16        ; convert bh to char in A
11151  4B40 2F            mov bl, al        ; save al
11152  4B41 19 00         mov al, 0
11153  4B43 05 03         syscall sys_io        ; display AH
11154  4B45 24            mov ah, bl        ; retrieve al
11155  4B46 19 00         mov al, 0
11156  4B48 05 03         syscall sys_io        ; display AL
11157  4B4A             ; --- END INLINE ASM SEGMENT
11158  4B4A             ; return; 
11159  4B4A F9            leave
11160  4B4B 09            ret
11161  4B4C             ; --- BEGIN INLINE ASM SEGMENT
11162  4B4C             _itoa_printx16:
11163  4B4C DA            push d
11164  4B4D D8            push b
11165  4B4E A7 00         mov bh, 0
11166  4B50 FD A4 04      shr bl, 4  
11167  4B53 74            mov d, b
11168  4B54 1F 66 4B      mov al, [d + s_hex_digits_printx16]
11169  4B57 23            mov ah, al
11170  4B58 E5            pop b
11171  4B59 D8            push b
11172  4B5A A7 00         mov bh, 0
11173  4B5C FD 87 0F      and bl, $0F
11174  4B5F 74            mov d, b
11175  4B60 1F 66 4B      mov al, [d + s_hex_digits_printx16]
11176  4B63 E5            pop b
11177  4B64 E7            pop d
11178  4B65 09            ret
11179  4B66 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
11179  4B6A 34 35 36 37 
11179  4B6E 38 39 41 42 
11179  4B72 43 44 45 46 
11180  4B76             ; --- END INLINE ASM SEGMENT
11181  4B76 F9            leave
11182  4B77 09            ret
11183  4B78             
11184  4B78             exit:
11185  4B78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11186  4B7B             ; --- BEGIN INLINE ASM SEGMENT
11187  4B7B FA 05 00      lea d, [bp + 5] ; $status
11188  4B7E 2A            mov b, [d] ; return value
11189  4B7F 05 0B         syscall sys_terminate_proc
11190  4B81             ; --- END INLINE ASM SEGMENT
11191  4B81 F9            leave
11192  4B82 09            ret
11193  4B83             
11194  4B83             strcpy:
11195  4B83 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11196  4B86             ; char *psrc; 
11197  4B86 52 02 00      sub sp, 2
11198  4B89             ; char *pdest; 
11199  4B89 52 02 00      sub sp, 2
11200  4B8C             ; psrc = src; 
11201  4B8C FA FF FF      lea d, [bp + -1] ; $psrc
11202  4B8F DA            push d
11203  4B90 FA 07 00      lea d, [bp + 7] ; $src
11204  4B93 2A            mov b, [d]
11205  4B94 38 00 00      mov c, 0
11206  4B97 E7            pop d
11207  4B98 FD 43         mov [d], b
11208  4B9A             ; pdest = dest; 
11209  4B9A FA FD FF      lea d, [bp + -3] ; $pdest
11210  4B9D DA            push d
11211  4B9E FA 05 00      lea d, [bp + 5] ; $dest
11212  4BA1 2A            mov b, [d]
11213  4BA2 38 00 00      mov c, 0
11214  4BA5 E7            pop d
11215  4BA6 FD 43         mov [d], b
11216  4BA8             ; while(*psrc) *pdest++ = *psrc++; 
11217  4BA8             _while265_cond:
11218  4BA8 FA FF FF      lea d, [bp + -1] ; $psrc
11219  4BAB 2A            mov b, [d]
11220  4BAC 38 00 00      mov c, 0
11221  4BAF 74            mov d, b
11222  4BB0 32            mov bl, [d]
11223  4BB1 A7 00         mov bh, 0
11224  4BB3 38 00 00      mov c, 0
11225  4BB6 C0 00 00      cmp b, 0
11226  4BB9 C6 EA 4B      je _while265_exit
11227  4BBC             _while265_block:
11228  4BBC             ; *pdest++ = *psrc++; 
11229  4BBC FA FD FF      lea d, [bp + -3] ; $pdest
11230  4BBF 2A            mov b, [d]
11231  4BC0 38 00 00      mov c, 0
11232  4BC3 FD 77         inc b
11233  4BC5 FA FD FF      lea d, [bp + -3] ; $pdest
11234  4BC8 FD 43         mov [d], b
11235  4BCA FD 7D         dec b
11236  4BCC D8            push b
11237  4BCD FA FF FF      lea d, [bp + -1] ; $psrc
11238  4BD0 2A            mov b, [d]
11239  4BD1 38 00 00      mov c, 0
11240  4BD4 FD 77         inc b
11241  4BD6 FA FF FF      lea d, [bp + -1] ; $psrc
11242  4BD9 FD 43         mov [d], b
11243  4BDB FD 7D         dec b
11244  4BDD 74            mov d, b
11245  4BDE 32            mov bl, [d]
11246  4BDF A7 00         mov bh, 0
11247  4BE1 38 00 00      mov c, 0
11248  4BE4 E7            pop d
11249  4BE5 FD 3E         mov [d], bl
11250  4BE7 0A A8 4B      jmp _while265_cond
11251  4BEA             _while265_exit:
11252  4BEA             ; *pdest = '\0'; 
11253  4BEA FA FD FF      lea d, [bp + -3] ; $pdest
11254  4BED 2A            mov b, [d]
11255  4BEE 38 00 00      mov c, 0
11256  4BF1 D8            push b
11257  4BF2 FD 2E 00 00   mov32 cb, $00000000
11257  4BF6 00 00 
11258  4BF8 E7            pop d
11259  4BF9 FD 3E         mov [d], bl
11260  4BFB F9            leave
11261  4BFC 09            ret
11262  4BFD             
11263  4BFD             strcat:
11264  4BFD F8 00 00      enter 0 ; (push bp; mov bp, sp)
11265  4C00             ; int dest_len; 
11266  4C00 52 02 00      sub sp, 2
11267  4C03             ; int i; 
11268  4C03 52 02 00      sub sp, 2
11269  4C06             ; dest_len = strlen(dest); 
11270  4C06 FA FF FF      lea d, [bp + -1] ; $dest_len
11271  4C09 DA            push d
11272  4C0A             ; --- START FUNCTION CALL
11273  4C0A FA 05 00      lea d, [bp + 5] ; $dest
11274  4C0D 2A            mov b, [d]
11275  4C0E 38 00 00      mov c, 0
11276  4C11 FD AB         swp b
11277  4C13 D8            push b
11278  4C14 07 3A 40      call strlen
11279  4C17 51 02 00      add sp, 2
11280  4C1A             ; --- END FUNCTION CALL
11281  4C1A E7            pop d
11282  4C1B FD 43         mov [d], b
11283  4C1D             ; for (i = 0; src[i] != 0; i=i+1) { 
11284  4C1D             _for266_init:
11285  4C1D FA FD FF      lea d, [bp + -3] ; $i
11286  4C20 DA            push d
11287  4C21 FD 2E 00 00   mov32 cb, $00000000
11287  4C25 00 00 
11288  4C27 E7            pop d
11289  4C28 FD 43         mov [d], b
11290  4C2A             _for266_cond:
11291  4C2A FA 07 00      lea d, [bp + 7] ; $src
11292  4C2D FD 2A         mov d, [d]
11293  4C2F D7            push a
11294  4C30 DA            push d
11295  4C31 FA FD FF      lea d, [bp + -3] ; $i
11296  4C34 2A            mov b, [d]
11297  4C35 38 00 00      mov c, 0
11298  4C38 E7            pop d
11299  4C39 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11300  4C3D E4            pop a
11301  4C3E 32            mov bl, [d]
11302  4C3F A7 00         mov bh, 0
11303  4C41 38 00 00      mov c, 0
11304  4C44             ; --- START RELATIONAL
11305  4C44 D7            push a
11306  4C45 11            mov a, b
11307  4C46 FD 2E 00 00   mov32 cb, $00000000
11307  4C4A 00 00 
11308  4C4C B0            cmp a, b
11309  4C4D FD 72         sneq ; !=
11310  4C4F E4            pop a
11311  4C50             ; --- END RELATIONAL
11312  4C50 C0 00 00      cmp b, 0
11313  4C53 C6 AE 4C      je _for266_exit
11314  4C56             _for266_block:
11315  4C56             ; dest[dest_len + i] = src[i]; 
11316  4C56 FA 05 00      lea d, [bp + 5] ; $dest
11317  4C59 FD 2A         mov d, [d]
11318  4C5B D7            push a
11319  4C5C DA            push d
11320  4C5D FA FF FF      lea d, [bp + -1] ; $dest_len
11321  4C60 2A            mov b, [d]
11322  4C61 38 00 00      mov c, 0
11323  4C64             ; --- START TERMS
11324  4C64 D7            push a
11325  4C65 11            mov a, b
11326  4C66 FA FD FF      lea d, [bp + -3] ; $i
11327  4C69 2A            mov b, [d]
11328  4C6A 38 00 00      mov c, 0
11329  4C6D 56            add b, a
11330  4C6E E4            pop a
11331  4C6F             ; --- END TERMS
11332  4C6F E7            pop d
11333  4C70 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11334  4C74 E4            pop a
11335  4C75 DA            push d
11336  4C76 FA 07 00      lea d, [bp + 7] ; $src
11337  4C79 FD 2A         mov d, [d]
11338  4C7B D7            push a
11339  4C7C DA            push d
11340  4C7D FA FD FF      lea d, [bp + -3] ; $i
11341  4C80 2A            mov b, [d]
11342  4C81 38 00 00      mov c, 0
11343  4C84 E7            pop d
11344  4C85 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11345  4C89 E4            pop a
11346  4C8A 32            mov bl, [d]
11347  4C8B A7 00         mov bh, 0
11348  4C8D 38 00 00      mov c, 0
11349  4C90 E7            pop d
11350  4C91 FD 3E         mov [d], bl
11351  4C93             _for266_update:
11352  4C93 FA FD FF      lea d, [bp + -3] ; $i
11353  4C96 DA            push d
11354  4C97 FA FD FF      lea d, [bp + -3] ; $i
11355  4C9A 2A            mov b, [d]
11356  4C9B 38 00 00      mov c, 0
11357  4C9E             ; --- START TERMS
11358  4C9E D7            push a
11359  4C9F 11            mov a, b
11360  4CA0 FD 2E 01 00   mov32 cb, $00000001
11360  4CA4 00 00 
11361  4CA6 56            add b, a
11362  4CA7 E4            pop a
11363  4CA8             ; --- END TERMS
11364  4CA8 E7            pop d
11365  4CA9 FD 43         mov [d], b
11366  4CAB 0A 2A 4C      jmp _for266_cond
11367  4CAE             _for266_exit:
11368  4CAE             ; dest[dest_len + i] = 0; 
11369  4CAE FA 05 00      lea d, [bp + 5] ; $dest
11370  4CB1 FD 2A         mov d, [d]
11371  4CB3 D7            push a
11372  4CB4 DA            push d
11373  4CB5 FA FF FF      lea d, [bp + -1] ; $dest_len
11374  4CB8 2A            mov b, [d]
11375  4CB9 38 00 00      mov c, 0
11376  4CBC             ; --- START TERMS
11377  4CBC D7            push a
11378  4CBD 11            mov a, b
11379  4CBE FA FD FF      lea d, [bp + -3] ; $i
11380  4CC1 2A            mov b, [d]
11381  4CC2 38 00 00      mov c, 0
11382  4CC5 56            add b, a
11383  4CC6 E4            pop a
11384  4CC7             ; --- END TERMS
11385  4CC7 E7            pop d
11386  4CC8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11387  4CCC E4            pop a
11388  4CCD DA            push d
11389  4CCE FD 2E 00 00   mov32 cb, $00000000
11389  4CD2 00 00 
11390  4CD4 E7            pop d
11391  4CD5 FD 3E         mov [d], bl
11392  4CD7             ; return dest; 
11393  4CD7 FA 05 00      lea d, [bp + 5] ; $dest
11394  4CDA 2A            mov b, [d]
11395  4CDB 38 00 00      mov c, 0
11396  4CDE F9            leave
11397  4CDF 09            ret
11398  4CE0             
11399  4CE0             printx8:
11400  4CE0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11401  4CE3             ; --- BEGIN INLINE ASM SEGMENT
11402  4CE3 FA 05 00      lea d, [bp + 5] ; $hex
11403  4CE6 32            mov bl, [d]
11404  4CE7 07 F6 4C      call _itoa_printx8        ; convert bl to char in A
11405  4CEA 2F            mov bl, al        ; save al
11406  4CEB 19 00         mov al, 0
11407  4CED 05 03         syscall sys_io        ; display AH
11408  4CEF 24            mov ah, bl        ; retrieve al
11409  4CF0 19 00         mov al, 0
11410  4CF2 05 03         syscall sys_io        ; display AL
11411  4CF4             ; --- END INLINE ASM SEGMENT
11412  4CF4             ; return; 
11413  4CF4 F9            leave
11414  4CF5 09            ret
11415  4CF6             ; --- BEGIN INLINE ASM SEGMENT
11416  4CF6             _itoa_printx8:
11417  4CF6 DA            push d
11418  4CF7 D8            push b
11419  4CF8 A7 00         mov bh, 0
11420  4CFA FD A4 04      shr bl, 4  
11421  4CFD 74            mov d, b
11422  4CFE 1F 10 4D      mov al, [d + s_hex_digits_printx8]
11423  4D01 23            mov ah, al
11424  4D02 E5            pop b
11425  4D03 D8            push b
11426  4D04 A7 00         mov bh, 0
11427  4D06 FD 87 0F      and bl, $0F
11428  4D09 74            mov d, b
11429  4D0A 1F 10 4D      mov al, [d + s_hex_digits_printx8]
11430  4D0D E5            pop b
11431  4D0E E7            pop d
11432  4D0F 09            ret
11433  4D10 30 31 32 33 s_hex_digits_printx8:    .db "0123456789ABCDEF"  
11433  4D14 34 35 36 37 
11433  4D18 38 39 41 42 
11433  4D1C 43 44 45 46 
11434  4D20             ; --- END INLINE ASM SEGMENT
11435  4D20 F9            leave
11436  4D21 09            ret
11437  4D22             ; --- END TEXT SEGMENT
11438  4D22             
11439  4D22             ; --- BEGIN DATA SEGMENT
11440  4D22             _keywords_data:
11441  4D22 D7 4F       .dw _s0
11442  4D24 01          .db 1
11443  4D25 DB 4F       .dw _s1
11444  4D27 02          .db 2
11445  4D28 E3 4F       .dw _s2
11446  4D2A 03          .db 3
11447  4D2B E8 4F       .dw _s3
11448  4D2D 04          .db 4
11449  4D2E ED 4F       .dw _s4
11450  4D30 06          .db 6
11451  4D31 F0 4F       .dw _s5
11452  4D33 07          .db 7
11453  4D34 F3 4F       .dw _s6
11454  4D36 05          .db 5
11455  4D37 F7 4F       .dw _s7
11456  4D39 00          .db 0
11457  4D3A 00 00 00 00 _label_table_data: .fill 288, 0
11457  4D3E 00 00 00 00 
11457  4D42 00 00 00 00 
11457  4D46 00 00 00 00 
11457  4D4A 00 00 00 00 
11457  4D4E 00 00 00 00 
11457  4D52 00 00 00 00 
11457  4D56 00 00 00 00 
11457  4D5A 00 00 00 00 
11457  4D5E 00 00 00 00 
11457  4D62 00 00 00 00 
11457  4D66 00 00 00 00 
11457  4D6A 00 00 00 00 
11457  4D6E 00 00 00 00 
11457  4D72 00 00 00 00 
11457  4D76 00 00 00 00 
11457  4D7A 00 00 00 00 
11457  4D7E 00 00 00 00 
11457  4D82 00 00 00 00 
11457  4D86 00 00 00 00 
11457  4D8A 00 00 00 00 
11457  4D8E 00 00 00 00 
11457  4D92 00 00 00 00 
11457  4D96 00 00 00 00 
11457  4D9A 00 00 00 00 
11457  4D9E 00 00 00 00 
11457  4DA2 00 00 00 00 
11457  4DA6 00 00 00 00 
11457  4DAA 00 00 00 00 
11457  4DAE 00 00 00 00 
11457  4DB2 00 00 00 00 
11457  4DB6 00 00 00 00 
11457  4DBA 00 00 00 00 
11457  4DBE 00 00 00 00 
11457  4DC2 00 00 00 00 
11457  4DC6 00 00 00 00 
11457  4DCA 00 00 00 00 
11457  4DCE 00 00 00 00 
11457  4DD2 00 00 00 00 
11457  4DD6 00 00 00 00 
11457  4DDA 00 00 00 00 
11457  4DDE 00 00 00 00 
11457  4DE2 00 00 00 00 
11457  4DE6 00 00 00 00 
11457  4DEA 00 00 00 00 
11457  4DEE 00 00 00 00 
11457  4DF2 00 00 00 00 
11457  4DF6 00 00 00 00 
11457  4DFA 00 00 00 00 
11457  4DFE 00 00 00 00 
11457  4E02 00 00 00 00 
11457  4E06 00 00 00 00 
11457  4E0A 00 00 00 00 
11457  4E0E 00 00 00 00 
11457  4E12 00 00 00 00 
11457  4E16 00 00 00 00 
11457  4E1A 00 00 00 00 
11457  4E1E 00 00 00 00 
11457  4E22 00 00 00 00 
11457  4E26 00 00 00 00 
11457  4E2A 00 00 00 00 
11457  4E2E 00 00 00 00 
11457  4E32 00 00 00 00 
11457  4E36 00 00 00 00 
11457  4E3A 00 00 00 00 
11457  4E3E 00 00 00 00 
11457  4E42 00 00 00 00 
11457  4E46 00 00 00 00 
11457  4E4A 00 00 00 00 
11457  4E4E 00 00 00 00 
11457  4E52 00 00 00 00 
11457  4E56 00 00 00 00 
11458  4E5A 00 04       __org: .dw $0400
11459  4E5C 00 00       _pc: .fill 2, 0
11460  4E5E 01          _print_information: .db $01
11461  4E5F 00 00       _tok: .fill 2, 0
11462  4E61 00 00       _toktype: .fill 2, 0
11463  4E63 00 00       _prog: .fill 2, 0
11464  4E65 00 00 00 00 _token_data: .fill 64, 0
11464  4E69 00 00 00 00 
11464  4E6D 00 00 00 00 
11464  4E71 00 00 00 00 
11464  4E75 00 00 00 00 
11464  4E79 00 00 00 00 
11464  4E7D 00 00 00 00 
11464  4E81 00 00 00 00 
11464  4E85 00 00 00 00 
11464  4E89 00 00 00 00 
11464  4E8D 00 00 00 00 
11464  4E91 00 00 00 00 
11464  4E95 00 00 00 00 
11464  4E99 00 00 00 00 
11464  4E9D 00 00 00 00 
11464  4EA1 00 00 00 00 
11465  4EA5 00 00 00 00 _string_const_data: .fill 256, 0
11465  4EA9 00 00 00 00 
11465  4EAD 00 00 00 00 
11465  4EB1 00 00 00 00 
11465  4EB5 00 00 00 00 
11465  4EB9 00 00 00 00 
11465  4EBD 00 00 00 00 
11465  4EC1 00 00 00 00 
11465  4EC5 00 00 00 00 
11465  4EC9 00 00 00 00 
11465  4ECD 00 00 00 00 
11465  4ED1 00 00 00 00 
11465  4ED5 00 00 00 00 
11465  4ED9 00 00 00 00 
11465  4EDD 00 00 00 00 
11465  4EE1 00 00 00 00 
11465  4EE5 00 00 00 00 
11465  4EE9 00 00 00 00 
11465  4EED 00 00 00 00 
11465  4EF1 00 00 00 00 
11465  4EF5 00 00 00 00 
11465  4EF9 00 00 00 00 
11465  4EFD 00 00 00 00 
11465  4F01 00 00 00 00 
11465  4F05 00 00 00 00 
11465  4F09 00 00 00 00 
11465  4F0D 00 00 00 00 
11465  4F11 00 00 00 00 
11465  4F15 00 00 00 00 
11465  4F19 00 00 00 00 
11465  4F1D 00 00 00 00 
11465  4F21 00 00 00 00 
11465  4F25 00 00 00 00 
11465  4F29 00 00 00 00 
11465  4F2D 00 00 00 00 
11465  4F31 00 00 00 00 
11465  4F35 00 00 00 00 
11465  4F39 00 00 00 00 
11465  4F3D 00 00 00 00 
11465  4F41 00 00 00 00 
11465  4F45 00 00 00 00 
11465  4F49 00 00 00 00 
11465  4F4D 00 00 00 00 
11465  4F51 00 00 00 00 
11465  4F55 00 00 00 00 
11465  4F59 00 00 00 00 
11465  4F5D 00 00 00 00 
11465  4F61 00 00 00 00 
11465  4F65 00 00 00 00 
11465  4F69 00 00 00 00 
11465  4F6D 00 00 00 00 
11465  4F71 00 00 00 00 
11465  4F75 00 00 00 00 
11465  4F79 00 00 00 00 
11465  4F7D 00 00 00 00 
11465  4F81 00 00 00 00 
11465  4F85 00 00 00 00 
11465  4F89 00 00 00 00 
11465  4F8D 00 00 00 00 
11465  4F91 00 00 00 00 
11465  4F95 00 00 00 00 
11465  4F99 00 00 00 00 
11465  4F9D 00 00 00 00 
11465  4FA1 00 00 00 00 
11466  4FA5 00 00       _int_const: .fill 2, 0
11467  4FA7 00 00       _program: .fill 2, 0
11468  4FA9 00 00       _bin_out: .fill 2, 0
11469  4FAB 00 00       _bin_p: .fill 2, 0
11470  4FAD 00 00       _opcode_table: .fill 2, 0
11471  4FAF 00 00 00 00 _prog_stack_data: .fill 20, 0
11471  4FB3 00 00 00 00 
11471  4FB7 00 00 00 00 
11471  4FBB 00 00 00 00 
11471  4FBF 00 00 00 00 
11472  4FC3 00 00       _prog_tos: .fill 2, 0
11473  4FC5 00 00       _prog_size: .fill 2, 0
11474  4FC7 F8 4F FA 4F _symbols_data: .dw _s8, _s9, _s9, _s8, _s8, _s8, _s9, _s9, 
11474  4FCB FA 4F F8 4F 
11474  4FCF F8 4F F8 4F 
11474  4FD3 FA 4F FA 4F 
11475  4FD7 6F 72 67 00 _s0: .db "org", 0
11476  4FDB 69 6E 63 6C _s1: .db "include", 0
11476  4FDF 75 64 65 00 
11477  4FE3 64 61 74 61 _s2: .db "data", 0
11477  4FE7 00 
11478  4FE8 74 65 78 74 _s3: .db "text", 0
11478  4FEC 00 
11479  4FED 64 62 00    _s4: .db "db", 0
11480  4FF0 64 77 00    _s5: .db "dw", 0
11481  4FF3 65 6E 64 00 _s6: .db "end", 0
11482  4FF7 00          _s7: .db "", 0
11483  4FF8 40 00       _s8: .db "@", 0
11484  4FFA 23 00       _s9: .db "#", 0
11485  4FFC 0A 00       _s10: .db "\n", 0
11486  4FFE 2E 2F 63 6F _s11: .db "./config.d/op_tbl", 0
11486  5002 6E 66 69 67 
11486  5006 2E 64 2F 6F 
11486  500A 70 5F 74 62 
11486  500E 6C 00 
11487  5010 50 61 72 73 _s12: .db "Parsing DATA section...", 0
11487  5014 69 6E 67 20 
11487  5018 44 41 54 41 
11487  501C 20 73 65 63 
11487  5020 74 69 6F 6E 
11487  5024 2E 2E 2E 00 
11488  5028 44 61 74 61 _s13: .db "Data segment not found.", 0
11488  502C 20 73 65 67 
11488  5030 6D 65 6E 74 
11488  5034 20 6E 6F 74 
11488  5038 20 66 6F 75 
11488  503C 6E 64 2E 00 
11489  5040 2E 64 62 3A _s14: .db ".db: ", 0
11489  5044 20 00 
11490  5046 2C 20 00    _s15: .db ", ", 0
11491  5049 2E 64 77 3A _s16: .db ".dw: ", 0
11491  504D 20 00 
11492  504F 44 6F 6E 65 _s17: .db "Done.\n", 0
11492  5053 2E 0A 00 
11493  5056 49 6E 74 65 _s18: .db "Integer constant expected in .org directive.", 0
11493  505A 67 65 72 20 
11493  505E 63 6F 6E 73 
11493  5062 74 61 6E 74 
11493  5066 20 65 78 70 
11493  506A 65 63 74 65 
11493  506E 64 20 69 6E 
11493  5072 20 2E 6F 72 
11493  5076 67 20 64 69 
11493  507A 72 65 63 74 
11493  507E 69 76 65 2E 
11493  5082 00 
11494  5083 50 61 72 73 _s19: .db "Parsing labels and directives...\n", 0
11494  5087 69 6E 67 20 
11494  508B 6C 61 62 65 
11494  508F 6C 73 20 61 
11494  5093 6E 64 20 64 
11494  5097 69 72 65 63 
11494  509B 74 69 76 65 
11494  509F 73 2E 2E 2E 
11494  50A3 0A 00 
11495  50A5 2E 00       _s20: .db ".", 0
11496  50A7 0A 44 6F 6E _s21: .db "\nDone.\n", 0
11496  50AB 65 2E 0A 00 
11497  50AF 4F 72 67 3A _s22: .db "Org: %s\n", 0
11497  50B3 20 25 73 0A 
11497  50B7 00 
11498  50B8 0A 4C 61 62 _s23: .db "\nLabels list:\n", 0
11498  50BC 65 6C 73 20 
11498  50C0 6C 69 73 74 
11498  50C4 3A 0A 00 
11499  50C7 25 73 3A 20 _s24: .db "%s: %x\n", 0
11499  50CB 25 78 0A 00 
11500  50CF 20 2E 00    _s25: .db " .", 0
11501  50D2 20 00       _s26: .db " ", 0
11502  50D4 4D 61 78 69 _s27: .db "Maximum number of operands per instruction is 2.", 0
11502  50D8 6D 75 6D 20 
11502  50DC 6E 75 6D 62 
11502  50E0 65 72 20 6F 
11502  50E4 66 20 6F 70 
11502  50E8 65 72 61 6E 
11502  50EC 64 73 20 70 
11502  50F0 65 72 20 69 
11502  50F4 6E 73 74 72 
11502  50F8 75 63 74 69 
11502  50FC 6F 6E 20 69 
11502  5100 73 20 32 2E 
11502  5104 00 
11503  5105 38 62 69 74 _s28: .db "8bit operand expected but 16bit label given.", 0
11503  5109 20 6F 70 65 
11503  510D 72 61 6E 64 
11503  5111 20 65 78 70 
11503  5115 65 63 74 65 
11503  5119 64 20 62 75 
11503  511D 74 20 31 36 
11503  5121 62 69 74 20 
11503  5125 6C 61 62 65 
11503  5129 6C 20 67 69 
11503  512D 76 65 6E 2E 
11503  5131 00 
11504  5132 25 78 28 25 _s29: .db "%x(%d): %s\n", 0
11504  5136 64 29 3A 20 
11504  513A 25 73 0A 00 
11505  513E 55 6E 64 65 _s30: .db "Undeclared label: ", 0
11505  5142 63 6C 61 72 
11505  5146 65 64 20 6C 
11505  514A 61 62 65 6C 
11505  514E 3A 20 00 
11506  5151 50 61 72 73 _s31: .db "Parsing TEXT section...\n", 0
11506  5155 69 6E 67 20 
11506  5159 54 45 58 54 
11506  515D 20 73 65 63 
11506  5161 74 69 6F 6E 
11506  5165 2E 2E 2E 0A 
11506  5169 00 
11507  516A 54 45 58 54 _s32: .db "TEXT section not found.", 0
11507  516E 20 73 65 63 
11507  5172 74 69 6F 6E 
11507  5176 20 6E 6F 74 
11507  517A 20 66 6F 75 
11507  517E 6E 64 2E 00 
11508  5182 54 45 58 54 _s33: .db "TEXT section end not found.", 0
11508  5186 20 73 65 63 
11508  518A 74 69 6F 6E 
11508  518E 20 65 6E 64 
11508  5192 20 6E 6F 74 
11508  5196 20 66 6F 75 
11508  519A 6E 64 2E 00 
11509  519E 55 6E 65 78 _s34: .db "Unexpected directive.", 0
11509  51A2 70 65 63 74 
11509  51A6 65 64 20 64 
11509  51AA 69 72 65 63 
11509  51AE 74 69 76 65 
11509  51B2 2E 00 
11510  51B4 44 6F 6E 65 _s35: .db "Done.\n\n", 0
11510  51B8 2E 0A 0A 00 
11511  51BC 50 72 6F 67 _s36: .db "Prog Offset: %x\n", 0
11511  51C0 20 4F 66 66 
11511  51C4 73 65 74 3A 
11511  51C8 20 25 78 0A 
11511  51CC 00 
11512  51CD 50 72 6F 67 _s37: .db "Prog value : %c\n", 0
11512  51D1 20 76 61 6C 
11512  51D5 75 65 20 3A 
11512  51D9 20 25 63 0A 
11512  51DD 00 
11513  51DE 54 6F 6B 65 _s38: .db "Token      : %s\n", 0
11513  51E2 6E 20 20 20 
11513  51E6 20 20 20 3A 
11513  51EA 20 25 73 0A 
11513  51EE 00 
11514  51EF 54 6F 6B 20 _s39: .db "Tok        : %d\n", 0
11514  51F3 20 20 20 20 
11514  51F7 20 20 20 3A 
11514  51FB 20 25 64 0A 
11514  51FF 00 
11515  5200 54 6F 6B 74 _s40: .db "Toktype    : %d\n", 0
11515  5204 79 70 65 20 
11515  5208 20 20 20 3A 
11515  520C 20 25 64 0A 
11515  5210 00 
11516  5211 53 74 72 69 _s41: .db "StringConst: %s\n", 0
11516  5215 6E 67 43 6F 
11516  5219 6E 73 74 3A 
11516  521D 20 25 73 0A 
11516  5221 00 
11517  5222 50 43 20 20 _s42: .db "PC         : %x\n", 0
11517  5226 20 20 20 20 
11517  522A 20 20 20 3A 
11517  522E 20 25 78 0A 
11517  5232 00 
11518  5233 0A 41 73 73 _s43: .db "\nAssembly complete.\n", 0
11518  5237 65 6D 62 6C 
11518  523B 79 20 63 6F 
11518  523F 6D 70 6C 65 
11518  5243 74 65 2E 0A 
11518  5247 00 
11519  5248 50 72 6F 67 _s44: .db "Program size: %d\n", 0
11519  524C 72 61 6D 20 
11519  5250 73 69 7A 65 
11519  5254 3A 20 25 64 
11519  5258 0A 00 
11520  525A 4C 69 73 74 _s45: .db "Listing: \n", 0
11520  525E 69 6E 67 3A 
11520  5262 20 0A 00 
11521  5265 61 00       _s46: .db "a", 0
11522  5267 61 6C 00    _s47: .db "al", 0
11523  526A 61 68 00    _s48: .db "ah", 0
11524  526D 62 00       _s49: .db "b", 0
11525  526F 62 6C 00    _s50: .db "bl", 0
11526  5272 62 68 00    _s51: .db "bh", 0
11527  5275 63 00       _s52: .db "c", 0
11528  5277 63 6C 00    _s53: .db "cl", 0
11529  527A 63 68 00    _s54: .db "ch", 0
11530  527D 64 00       _s55: .db "d", 0
11531  527F 64 6C 00    _s56: .db "dl", 0
11532  5282 64 68 00    _s57: .db "dh", 0
11533  5285 67 00       _s58: .db "g", 0
11534  5287 67 6C 00    _s59: .db "gl", 0
11535  528A 67 68 00    _s60: .db "gh", 0
11536  528D 70 63 00    _s61: .db "pc", 0
11537  5290 73 70 00    _s62: .db "sp", 0
11538  5293 62 70 00    _s63: .db "bp", 0
11539  5296 73 69 00    _s64: .db "si", 0
11540  5299 64 69 00    _s65: .db "di", 0
11541  529C 77 6F 72 64 _s66: .db "word", 0
11541  52A0 00 
11542  52A1 62 79 74 65 _s67: .db "byte", 0
11542  52A5 00 
11543  52A6 63 6D 70 73 _s68: .db "cmpsb", 0
11543  52AA 62 00 
11544  52AC 6D 6F 76 73 _s69: .db "movsb", 0
11544  52B0 62 00 
11545  52B2 73 74 6F 73 _s70: .db "stosb", 0
11545  52B6 62 00 
11546  52B8 64 65 66 69 _s71: .db "define", 0
11546  52BC 6E 65 00 
11547  52BF 4C 61 62 65 _s72: .db "Label does not exist: ", 0
11547  52C3 6C 20 64 6F 
11547  52C7 65 73 20 6E 
11547  52CB 6F 74 20 65 
11547  52CF 78 69 73 74 
11547  52D3 3A 20 00 
11548  52D6 43 6C 6F 73 _s73: .db "Closing single quotes expected.", 0
11548  52DA 69 6E 67 20 
11548  52DE 73 69 6E 67 
11548  52E2 6C 65 20 71 
11548  52E6 75 6F 74 65 
11548  52EA 73 20 65 78 
11548  52EE 70 65 63 74 
11548  52F2 65 64 2E 00 
11549  52F6 44 6F 75 62 _s74: .db "Double quotes expected", 0
11549  52FA 6C 65 20 71 
11549  52FE 75 6F 74 65 
11549  5302 73 20 65 78 
11549  5306 70 65 63 74 
11549  530A 65 64 00 
11550  530D 54 4F 4B 45 _s75: .db "TOKEN ERROR. Prog: %x\n", 0
11550  5311 4E 20 45 52 
11550  5315 52 4F 52 2E 
11550  5319 20 50 72 6F 
11550  531D 67 3A 20 25 
11550  5321 78 0A 00 
11551  5324 50 72 6F 67 _s76: .db "ProgVal: %x", 0
11551  5328 56 61 6C 3A 
11551  532C 20 25 78 00 
11552  5330 0A 20 54 65 _s77: .db "\n Text after prog: %s\n", 0
11552  5334 78 74 20 61 
11552  5338 66 74 65 72 
11552  533C 20 70 72 6F 
11552  5340 67 3A 20 25 
11552  5344 73 0A 00 
11553  5347 0A 45 72 72 _s78: .db "\nError: %s\n", 0
11553  534B 6F 72 3A 20 
11553  534F 25 73 0A 00 
11554  5353 0A 45 72 72 _s79: .db "\nError: %s %s\n", 0
11554  5357 6F 72 3A 20 
11554  535B 25 73 20 25 
11554  535F 73 0A 00 
11555  5362 43 61 6E 6E _s80: .db "Cannot push prog. Stack overflow.", 0
11555  5366 6F 74 20 70 
11555  536A 75 73 68 20 
11555  536E 70 72 6F 67 
11555  5372 2E 20 53 74 
11555  5376 61 63 6B 20 
11555  537A 6F 76 65 72 
11555  537E 66 6C 6F 77 
11555  5382 2E 00 
11556  5384 43 61 6E 6E _s81: .db "Cannot pop prog. Stack overflow.", 0
11556  5388 6F 74 20 70 
11556  538C 6F 70 20 70 
11556  5390 72 6F 67 2E 
11556  5394 20 53 74 61 
11556  5398 63 6B 20 6F 
11556  539C 76 65 72 66 
11556  53A0 6C 6F 77 2E 
11556  53A4 00 
11557  53A5 55 6E 65 78 _s82: .db "Unexpected format in printf.", 0
11557  53A9 70 65 63 74 
11557  53AD 65 64 20 66 
11557  53B1 6F 72 6D 61 
11557  53B5 74 20 69 6E 
11557  53B9 20 70 72 69 
11557  53BD 6E 74 66 2E 
11557  53C1 00 
11558  53C2 45 72 72 6F _s83: .db "Error: Unknown argument type.\n", 0
11558  53C6 72 3A 20 55 
11558  53CA 6E 6B 6E 6F 
11558  53CE 77 6E 20 61 
11558  53D2 72 67 75 6D 
11558  53D6 65 6E 74 20 
11558  53DA 74 79 70 65 
11558  53DE 2E 0A 00 
11559  53E1             
11560  53E1 E3 53       _heap_top: .dw _heap
11561  53E3 00          _heap: .db 0
11562  53E4             ; --- END DATA SEGMENT
11563  53E4             
11564  53E4             .end
tasm: Number of errors = 0
