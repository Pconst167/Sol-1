0001   0000             ; --- FILENAME: ../solarium/asm/asm
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $p 
0011   0408 52 02 00      sub sp, 2
0012   040B             ;; print("\n"); 
0013   040B 26 D2 3F      mov b, __s9 ; "\n"
0014   040E FD AB         swp b
0015   0410 D8            push b
0016   0411 07 0C 36      call print
0017   0414 51 02 00      add sp, 2
0018   0417             ;; program = alloc(16384); 
0019   0417 3B 7E 3F      mov d, _program ; $program
0020   041A DA            push d
0021   041B 26 00 40      mov b, $4000
0022   041E FD AB         swp b
0023   0420 D8            push b
0024   0421 07 2C 36      call alloc
0025   0424 51 02 00      add sp, 2
0026   0427 E7            pop d
0027   0428 FD 43         mov [d], b
0028   042A             ;; bin_out = alloc(16384); 
0029   042A 3B 80 3F      mov d, _bin_out ; $bin_out
0030   042D DA            push d
0031   042E 26 00 40      mov b, $4000
0032   0431 FD AB         swp b
0033   0433 D8            push b
0034   0434 07 2C 36      call alloc
0035   0437 51 02 00      add sp, 2
0036   043A E7            pop d
0037   043B FD 43         mov [d], b
0038   043D             ;; opcode_table = alloc(12310); 
0039   043D 3B 84 3F      mov d, _opcode_table ; $opcode_table
0040   0440 DA            push d
0041   0441 26 16 30      mov b, $3016
0042   0444 FD AB         swp b
0043   0446 D8            push b
0044   0447 07 2C 36      call alloc
0045   044A 51 02 00      add sp, 2
0046   044D E7            pop d
0047   044E FD 43         mov [d], b
0048   0450             ;; loadfile(0x0000, program); 
0049   0450 3B 7E 3F      mov d, _program ; $program
0050   0453 2A            mov b, [d]
0051   0454 FD AB         swp b
0052   0456 D8            push b
0053   0457 26 00 00      mov b, $0
0054   045A FD AB         swp b
0055   045C D8            push b
0056   045D 07 19 36      call loadfile
0057   0460 51 04 00      add sp, 4
0058   0463             ;; loadfile("./config.d/op_tbl", opcode_table); 
0059   0463 3B 84 3F      mov d, _opcode_table ; $opcode_table
0060   0466 2A            mov b, [d]
0061   0467 FD AB         swp b
0062   0469 D8            push b
0063   046A 26 D4 3F      mov b, __s10 ; "./config.d/op_tbl"
0064   046D FD AB         swp b
0065   046F D8            push b
0066   0470 07 19 36      call loadfile
0067   0473 51 04 00      add sp, 4
0068   0476             ;; p = program; 
0069   0476 FA FF FF      lea d, [bp + -1] ; $p
0070   0479 DA            push d
0071   047A 3B 7E 3F      mov d, _program ; $program
0072   047D 2A            mov b, [d]
0073   047E E7            pop d
0074   047F FD 43         mov [d], b
0075   0481             ;; while(*p) p++; 
0076   0481             _while1_cond:
0077   0481 FA FF FF      lea d, [bp + -1] ; $p
0078   0484 2A            mov b, [d]
0079   0485 74            mov d, b
0080   0486 32            mov bl, [d]
0081   0487 A7 00         mov bh, 0
0082   0489 C0 00 00      cmp b, 0
0083   048C C6 A1 04      je _while1_exit
0084   048F             _while1_block:
0085   048F             ;; p++; 
0086   048F FA FF FF      lea d, [bp + -1] ; $p
0087   0492 2A            mov b, [d]
0088   0493 FD 79         mov g, b
0089   0495 FD 77         inc b
0090   0497 FA FF FF      lea d, [bp + -1] ; $p
0091   049A FD 43         mov [d], b
0092   049C FD 27         mov b, g
0093   049E 0A 81 04      jmp _while1_cond
0094   04A1             _while1_exit:
0095   04A1             ;; while(is_space(*p)) p--; 
0096   04A1             _while2_cond:
0097   04A1 FA FF FF      lea d, [bp + -1] ; $p
0098   04A4 2A            mov b, [d]
0099   04A5 74            mov d, b
0100   04A6 32            mov bl, [d]
0101   04A7 A7 00         mov bh, 0
0102   04A9 DD            push bl
0103   04AA 07 96 38      call is_space
0104   04AD 51 01 00      add sp, 1
0105   04B0 C0 00 00      cmp b, 0
0106   04B3 C6 C8 04      je _while2_exit
0107   04B6             _while2_block:
0108   04B6             ;; p--; 
0109   04B6 FA FF FF      lea d, [bp + -1] ; $p
0110   04B9 2A            mov b, [d]
0111   04BA FD 79         mov g, b
0112   04BC FD 7D         dec b
0113   04BE FA FF FF      lea d, [bp + -1] ; $p
0114   04C1 FD 43         mov [d], b
0115   04C3 FD 27         mov b, g
0116   04C5 0A A1 04      jmp _while2_cond
0117   04C8             _while2_exit:
0118   04C8             ;; p++; 
0119   04C8 FA FF FF      lea d, [bp + -1] ; $p
0120   04CB 2A            mov b, [d]
0121   04CC FD 79         mov g, b
0122   04CE FD 77         inc b
0123   04D0 FA FF FF      lea d, [bp + -1] ; $p
0124   04D3 FD 43         mov [d], b
0125   04D5 FD 27         mov b, g
0126   04D7             ;; *p = '\0'; 
0127   04D7 FA FF FF      lea d, [bp + -1] ; $p
0128   04DA 2A            mov b, [d]
0129   04DB D8            push b
0130   04DC 26 00 00      mov b, $0
0131   04DF E7            pop d
0132   04E0 FD 3E         mov [d], bl
0133   04E2             ;; prog = program; 
0134   04E2 3B 3A 3E      mov d, _prog ; $prog
0135   04E5 DA            push d
0136   04E6 3B 7E 3F      mov d, _program ; $program
0137   04E9 2A            mov b, [d]
0138   04EA E7            pop d
0139   04EB FD 43         mov [d], b
0140   04ED             ;; bin_p = bin_out + _org; 
0141   04ED 3B 82 3F      mov d, _bin_p ; $bin_p
0142   04F0 DA            push d
0143   04F1 3B 80 3F      mov d, _bin_out ; $bin_out
0144   04F4 2A            mov b, [d]
0145   04F5             ; START TERMS
0146   04F5 D7            push a
0147   04F6 11            mov a, b
0148   04F7 3B 31 3E      mov d, __org ; $_org
0149   04FA 2A            mov b, [d]
0150   04FB 54            add a, b
0151   04FC 27            mov b, a
0152   04FD E4            pop a
0153   04FE             ; END TERMS
0154   04FE E7            pop d
0155   04FF FD 43         mov [d], b
0156   0501             ;; pc = _org; 
0157   0501 3B 33 3E      mov d, _pc ; $pc
0158   0504 DA            push d
0159   0505 3B 31 3E      mov d, __org ; $_org
0160   0508 2A            mov b, [d]
0161   0509 E7            pop d
0162   050A FD 43         mov [d], b
0163   050C             ;; prog_size = 0; 
0164   050C 3B 9C 3F      mov d, _prog_size ; $prog_size
0165   050F DA            push d
0166   0510 26 00 00      mov b, $0
0167   0513 E7            pop d
0168   0514 FD 43         mov [d], b
0169   0516             ;; label_directive_scan(); 
0170   0516 07 04 09      call label_directive_scan
0171   0519             ;; prog_size = 0; 
0172   0519 3B 9C 3F      mov d, _prog_size ; $prog_size
0173   051C DA            push d
0174   051D 26 00 00      mov b, $0
0175   0520 E7            pop d
0176   0521 FD 43         mov [d], b
0177   0523             ;; parse_text(); 
0178   0523 07 76 17      call parse_text
0179   0526             ;; parse_data(); 
0180   0526 07 2E 05      call parse_data
0181   0529             ;; display_output(); 
0182   0529 07 DB 19      call display_output
0183   052C 05 0B         syscall sys_terminate_proc
0184   052E             
0185   052E             parse_data:
0186   052E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0187   0531             ;; print("Parsing DATA section..."); 
0188   0531 26 E6 3F      mov b, __s11 ; "Parsing DATA section..."
0189   0534 FD AB         swp b
0190   0536 D8            push b
0191   0537 07 0C 36      call print
0192   053A 51 02 00      add sp, 2
0193   053D             ;; for(;;){ 
0194   053D             _for3_init:
0195   053D             _for3_cond:
0196   053D             _for3_block:
0197   053D             ;; get(); 
0198   053D 07 AE 25      call get
0199   0540             ;; if(toktype == END) error("Data segment not found."); 
0200   0540             _if4_cond:
0201   0540 3B 38 3E      mov d, _toktype ; $toktype
0202   0543 2A            mov b, [d]
0203   0544             ; START RELATIONAL
0204   0544 D7            push a
0205   0545 11            mov a, b
0206   0546 26 07 00      mov b, 7; END
0207   0549 B0            cmp a, b
0208   054A FD 71         seq ; ==
0209   054C E4            pop a
0210   054D             ; END RELATIONAL
0211   054D C0 00 00      cmp b, 0
0212   0550 C6 62 05      je _if4_exit
0213   0553             _if4_true:
0214   0553             ;; error("Data segment not found."); 
0215   0553 26 FE 3F      mov b, __s12 ; "Data segment not found."
0216   0556 FD AB         swp b
0217   0558 D8            push b
0218   0559 07 1F 31      call error
0219   055C 51 02 00      add sp, 2
0220   055F 0A 62 05      jmp _if4_exit
0221   0562             _if4_exit:
0222   0562             ;; if(tok == DOT){ 
0223   0562             _if5_cond:
0224   0562 3B 36 3E      mov d, _tok ; $tok
0225   0565 2A            mov b, [d]
0226   0566             ; START RELATIONAL
0227   0566 D7            push a
0228   0567 11            mov a, b
0229   0568 26 10 00      mov b, 16; DOT
0230   056B B0            cmp a, b
0231   056C FD 71         seq ; ==
0232   056E E4            pop a
0233   056F             ; END RELATIONAL
0234   056F C0 00 00      cmp b, 0
0235   0572 C6 94 05      je _if5_exit
0236   0575             _if5_true:
0237   0575             ;; get(); 
0238   0575 07 AE 25      call get
0239   0578             ;; if(tok == DATA) break; 
0240   0578             _if6_cond:
0241   0578 3B 36 3E      mov d, _tok ; $tok
0242   057B 2A            mov b, [d]
0243   057C             ; START RELATIONAL
0244   057C D7            push a
0245   057D 11            mov a, b
0246   057E 26 03 00      mov b, 3; DATA
0247   0581 B0            cmp a, b
0248   0582 FD 71         seq ; ==
0249   0584 E4            pop a
0250   0585             ; END RELATIONAL
0251   0585 C0 00 00      cmp b, 0
0252   0588 C6 91 05      je _if6_exit
0253   058B             _if6_true:
0254   058B             ;; break; 
0255   058B 0A 97 05      jmp _for3_exit ; for break
0256   058E 0A 91 05      jmp _if6_exit
0257   0591             _if6_exit:
0258   0591 0A 94 05      jmp _if5_exit
0259   0594             _if5_exit:
0260   0594             _for3_update:
0261   0594 0A 3D 05      jmp _for3_cond
0262   0597             _for3_exit:
0263   0597             ;; for(;;){ 
0264   0597             _for7_init:
0265   0597             _for7_cond:
0266   0597             _for7_block:
0267   0597             ;; get(); 
0268   0597 07 AE 25      call get
0269   059A             ;; if(tok == SEGMENT_END) break; 
0270   059A             _if8_cond:
0271   059A 3B 36 3E      mov d, _tok ; $tok
0272   059D 2A            mov b, [d]
0273   059E             ; START RELATIONAL
0274   059E D7            push a
0275   059F 11            mov a, b
0276   05A0 26 05 00      mov b, 5; SEGMENT_END
0277   05A3 B0            cmp a, b
0278   05A4 FD 71         seq ; ==
0279   05A6 E4            pop a
0280   05A7             ; END RELATIONAL
0281   05A7 C0 00 00      cmp b, 0
0282   05AA C6 B3 05      je _if8_exit
0283   05AD             _if8_true:
0284   05AD             ;; break; 
0285   05AD 0A 6E 07      jmp _for7_exit ; for break
0286   05B0 0A B3 05      jmp _if8_exit
0287   05B3             _if8_exit:
0288   05B3             ;; if(tok == DB){ 
0289   05B3             _if9_cond:
0290   05B3 3B 36 3E      mov d, _tok ; $tok
0291   05B6 2A            mov b, [d]
0292   05B7             ; START RELATIONAL
0293   05B7 D7            push a
0294   05B8 11            mov a, b
0295   05B9 26 06 00      mov b, 6; DB
0296   05BC B0            cmp a, b
0297   05BD FD 71         seq ; ==
0298   05BF E4            pop a
0299   05C0             ; END RELATIONAL
0300   05C0 C0 00 00      cmp b, 0
0301   05C3 C6 86 06      je _if9_else
0302   05C6             _if9_true:
0303   05C6             ;; print(".db: "); 
0304   05C6 26 16 40      mov b, __s13 ; ".db: "
0305   05C9 FD AB         swp b
0306   05CB D8            push b
0307   05CC 07 0C 36      call print
0308   05CF 51 02 00      add sp, 2
0309   05D2             ;; for(;;){ 
0310   05D2             _for10_init:
0311   05D2             _for10_cond:
0312   05D2             _for10_block:
0313   05D2             ;; get(); 
0314   05D2 07 AE 25      call get
0315   05D5             ;; if(toktype == CHAR_CONST){ 
0316   05D5             _if11_cond:
0317   05D5 3B 38 3E      mov d, _toktype ; $toktype
0318   05D8 2A            mov b, [d]
0319   05D9             ; START RELATIONAL
0320   05D9 D7            push a
0321   05DA 11            mov a, b
0322   05DB 26 03 00      mov b, 3; CHAR_CONST
0323   05DE B0            cmp a, b
0324   05DF FD 71         seq ; ==
0325   05E1 E4            pop a
0326   05E2             ; END RELATIONAL
0327   05E2 C0 00 00      cmp b, 0
0328   05E5 C6 19 06      je _if11_else
0329   05E8             _if11_true:
0330   05E8             ;; emit_byte(string_const[0], 0); 
0331   05E8 26 00 00      mov b, $0
0332   05EB DD            push bl
0333   05EC 3B 7C 3E      mov d, _string_const_data ; $string_const
0334   05EF D7            push a
0335   05F0 DA            push d
0336   05F1 26 00 00      mov b, $0
0337   05F4 E7            pop d
0338   05F5 5A            add d, b
0339   05F6 E4            pop a
0340   05F7 32            mov bl, [d]
0341   05F8 A7 00         mov bh, 0
0342   05FA DD            push bl
0343   05FB 07 8F 22      call emit_byte
0344   05FE 51 02 00      add sp, 2
0345   0601             ;; printx8(string_const[0]); 
0346   0601 3B 7C 3E      mov d, _string_const_data ; $string_const
0347   0604 D7            push a
0348   0605 DA            push d
0349   0606 26 00 00      mov b, $0
0350   0609 E7            pop d
0351   060A 5A            add d, b
0352   060B E4            pop a
0353   060C 32            mov bl, [d]
0354   060D A7 00         mov bh, 0
0355   060F DD            push bl
0356   0610 07 C9 32      call printx8
0357   0613 51 01 00      add sp, 1
0358   0616 0A 49 06      jmp _if11_exit
0359   0619             _if11_else:
0360   0619             ;; if(toktype == INTEGER_CONST){ 
0361   0619             _if12_cond:
0362   0619 3B 38 3E      mov d, _toktype ; $toktype
0363   061C 2A            mov b, [d]
0364   061D             ; START RELATIONAL
0365   061D D7            push a
0366   061E 11            mov a, b
0367   061F 26 05 00      mov b, 5; INTEGER_CONST
0368   0622 B0            cmp a, b
0369   0623 FD 71         seq ; ==
0370   0625 E4            pop a
0371   0626             ; END RELATIONAL
0372   0626 C0 00 00      cmp b, 0
0373   0629 C6 49 06      je _if12_exit
0374   062C             _if12_true:
0375   062C             ;; emit_byte(int_const, 0); 
0376   062C 26 00 00      mov b, $0
0377   062F DD            push bl
0378   0630 3B 7C 3F      mov d, _int_const ; $int_const
0379   0633 2A            mov b, [d]
0380   0634 DD            push bl
0381   0635 07 8F 22      call emit_byte
0382   0638 51 02 00      add sp, 2
0383   063B             ;; printx8(int_const); 
0384   063B 3B 7C 3F      mov d, _int_const ; $int_const
0385   063E 2A            mov b, [d]
0386   063F DD            push bl
0387   0640 07 C9 32      call printx8
0388   0643 51 01 00      add sp, 1
0389   0646 0A 49 06      jmp _if12_exit
0390   0649             _if12_exit:
0391   0649             _if11_exit:
0392   0649             ;; get(); 
0393   0649 07 AE 25      call get
0394   064C             ;; if(tok != COMMA){ 
0395   064C             _if13_cond:
0396   064C 3B 36 3E      mov d, _tok ; $tok
0397   064F 2A            mov b, [d]
0398   0650             ; START RELATIONAL
0399   0650 D7            push a
0400   0651 11            mov a, b
0401   0652 26 0F 00      mov b, 15; COMMA
0402   0655 B0            cmp a, b
0403   0656 FD 72         sneq ; !=
0404   0658 E4            pop a
0405   0659             ; END RELATIONAL
0406   0659 C0 00 00      cmp b, 0
0407   065C C6 68 06      je _if13_exit
0408   065F             _if13_true:
0409   065F             ;; back(); 
0410   065F 07 EF 22      call back
0411   0662             ;; break; 
0412   0662 0A 77 06      jmp _for10_exit ; for break
0413   0665 0A 68 06      jmp _if13_exit
0414   0668             _if13_exit:
0415   0668             ;; print(", "); 
0416   0668 26 1C 40      mov b, __s14 ; ", "
0417   066B FD AB         swp b
0418   066D D8            push b
0419   066E 07 0C 36      call print
0420   0671 51 02 00      add sp, 2
0421   0674             _for10_update:
0422   0674 0A D2 05      jmp _for10_cond
0423   0677             _for10_exit:
0424   0677             ;; print("\n"); 
0425   0677 26 D2 3F      mov b, __s9 ; "\n"
0426   067A FD AB         swp b
0427   067C D8            push b
0428   067D 07 0C 36      call print
0429   0680 51 02 00      add sp, 2
0430   0683 0A 6B 07      jmp _if9_exit
0431   0686             _if9_else:
0432   0686             ;; if(tok == DW){ 
0433   0686             _if14_cond:
0434   0686 3B 36 3E      mov d, _tok ; $tok
0435   0689 2A            mov b, [d]
0436   068A             ; START RELATIONAL
0437   068A D7            push a
0438   068B 11            mov a, b
0439   068C 26 07 00      mov b, 7; DW
0440   068F B0            cmp a, b
0441   0690 FD 71         seq ; ==
0442   0692 E4            pop a
0443   0693             ; END RELATIONAL
0444   0693 C0 00 00      cmp b, 0
0445   0696 C6 6B 07      je _if14_exit
0446   0699             _if14_true:
0447   0699             ;; print(".dw: "); 
0448   0699 26 1F 40      mov b, __s15 ; ".dw: "
0449   069C FD AB         swp b
0450   069E D8            push b
0451   069F 07 0C 36      call print
0452   06A2 51 02 00      add sp, 2
0453   06A5             ;; for(;;){ 
0454   06A5             _for15_init:
0455   06A5             _for15_cond:
0456   06A5             _for15_block:
0457   06A5             ;; get(); 
0458   06A5 07 AE 25      call get
0459   06A8             ;; if(toktype == CHAR_CONST){ 
0460   06A8             _if16_cond:
0461   06A8 3B 38 3E      mov d, _toktype ; $toktype
0462   06AB 2A            mov b, [d]
0463   06AC             ; START RELATIONAL
0464   06AC D7            push a
0465   06AD 11            mov a, b
0466   06AE 26 03 00      mov b, 3; CHAR_CONST
0467   06B1 B0            cmp a, b
0468   06B2 FD 71         seq ; ==
0469   06B4 E4            pop a
0470   06B5             ; END RELATIONAL
0471   06B5 C0 00 00      cmp b, 0
0472   06B8 C6 FA 06      je _if16_else
0473   06BB             _if16_true:
0474   06BB             ;; emit_byte(string_const[0], 0); 
0475   06BB 26 00 00      mov b, $0
0476   06BE DD            push bl
0477   06BF 3B 7C 3E      mov d, _string_const_data ; $string_const
0478   06C2 D7            push a
0479   06C3 DA            push d
0480   06C4 26 00 00      mov b, $0
0481   06C7 E7            pop d
0482   06C8 5A            add d, b
0483   06C9 E4            pop a
0484   06CA 32            mov bl, [d]
0485   06CB A7 00         mov bh, 0
0486   06CD DD            push bl
0487   06CE 07 8F 22      call emit_byte
0488   06D1 51 02 00      add sp, 2
0489   06D4             ;; emit_byte(0, 0); 
0490   06D4 26 00 00      mov b, $0
0491   06D7 DD            push bl
0492   06D8 26 00 00      mov b, $0
0493   06DB DD            push bl
0494   06DC 07 8F 22      call emit_byte
0495   06DF 51 02 00      add sp, 2
0496   06E2             ;; printx8(string_const[0]); 
0497   06E2 3B 7C 3E      mov d, _string_const_data ; $string_const
0498   06E5 D7            push a
0499   06E6 DA            push d
0500   06E7 26 00 00      mov b, $0
0501   06EA E7            pop d
0502   06EB 5A            add d, b
0503   06EC E4            pop a
0504   06ED 32            mov bl, [d]
0505   06EE A7 00         mov bh, 0
0506   06F0 DD            push bl
0507   06F1 07 C9 32      call printx8
0508   06F4 51 01 00      add sp, 1
0509   06F7 0A 2E 07      jmp _if16_exit
0510   06FA             _if16_else:
0511   06FA             ;; if(toktype == INTEGER_CONST){ 
0512   06FA             _if17_cond:
0513   06FA 3B 38 3E      mov d, _toktype ; $toktype
0514   06FD 2A            mov b, [d]
0515   06FE             ; START RELATIONAL
0516   06FE D7            push a
0517   06FF 11            mov a, b
0518   0700 26 05 00      mov b, 5; INTEGER_CONST
0519   0703 B0            cmp a, b
0520   0704 FD 71         seq ; ==
0521   0706 E4            pop a
0522   0707             ; END RELATIONAL
0523   0707 C0 00 00      cmp b, 0
0524   070A C6 2E 07      je _if17_exit
0525   070D             _if17_true:
0526   070D             ;; emit_word(int_const, 0); 
0527   070D 26 00 00      mov b, $0
0528   0710 DD            push bl
0529   0711 3B 7C 3F      mov d, _int_const ; $int_const
0530   0714 2A            mov b, [d]
0531   0715 FD AB         swp b
0532   0717 D8            push b
0533   0718 07 C0 22      call emit_word
0534   071B 51 03 00      add sp, 3
0535   071E             ;; printx16(int_const); 
0536   071E 3B 7C 3F      mov d, _int_const ; $int_const
0537   0721 2A            mov b, [d]
0538   0722 FD AB         swp b
0539   0724 D8            push b
0540   0725 07 BD 32      call printx16
0541   0728 51 02 00      add sp, 2
0542   072B 0A 2E 07      jmp _if17_exit
0543   072E             _if17_exit:
0544   072E             _if16_exit:
0545   072E             ;; get(); 
0546   072E 07 AE 25      call get
0547   0731             ;; if(tok != COMMA){ 
0548   0731             _if18_cond:
0549   0731 3B 36 3E      mov d, _tok ; $tok
0550   0734 2A            mov b, [d]
0551   0735             ; START RELATIONAL
0552   0735 D7            push a
0553   0736 11            mov a, b
0554   0737 26 0F 00      mov b, 15; COMMA
0555   073A B0            cmp a, b
0556   073B FD 72         sneq ; !=
0557   073D E4            pop a
0558   073E             ; END RELATIONAL
0559   073E C0 00 00      cmp b, 0
0560   0741 C6 4D 07      je _if18_exit
0561   0744             _if18_true:
0562   0744             ;; back(); 
0563   0744 07 EF 22      call back
0564   0747             ;; break; 
0565   0747 0A 5C 07      jmp _for15_exit ; for break
0566   074A 0A 4D 07      jmp _if18_exit
0567   074D             _if18_exit:
0568   074D             ;; print(", "); 
0569   074D 26 1C 40      mov b, __s14 ; ", "
0570   0750 FD AB         swp b
0571   0752 D8            push b
0572   0753 07 0C 36      call print
0573   0756 51 02 00      add sp, 2
0574   0759             _for15_update:
0575   0759 0A A5 06      jmp _for15_cond
0576   075C             _for15_exit:
0577   075C             ;; print("\n"); 
0578   075C 26 D2 3F      mov b, __s9 ; "\n"
0579   075F FD AB         swp b
0580   0761 D8            push b
0581   0762 07 0C 36      call print
0582   0765 51 02 00      add sp, 2
0583   0768 0A 6B 07      jmp _if14_exit
0584   076B             _if14_exit:
0585   076B             _if9_exit:
0586   076B             _for7_update:
0587   076B 0A 97 05      jmp _for7_cond
0588   076E             _for7_exit:
0589   076E             ;; print("Done.\n"); 
0590   076E 26 25 40      mov b, __s16 ; "Done.\n"
0591   0771 FD AB         swp b
0592   0773 D8            push b
0593   0774 07 0C 36      call print
0594   0777 51 02 00      add sp, 2
0595   077A F9            leave
0596   077B 09            ret
0597   077C             
0598   077C             parse_directive:
0599   077C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0600   077F             ;; get(); 
0601   077F 07 AE 25      call get
0602   0782             ;; if(tok == ORG){ 
0603   0782             _if19_cond:
0604   0782 3B 36 3E      mov d, _tok ; $tok
0605   0785 2A            mov b, [d]
0606   0786             ; START RELATIONAL
0607   0786 D7            push a
0608   0787 11            mov a, b
0609   0788 26 01 00      mov b, 1; ORG
0610   078B B0            cmp a, b
0611   078C FD 71         seq ; ==
0612   078E E4            pop a
0613   078F             ; END RELATIONAL
0614   078F C0 00 00      cmp b, 0
0615   0792 C6 C8 07      je _if19_else
0616   0795             _if19_true:
0617   0795             ;; get(); 
0618   0795 07 AE 25      call get
0619   0798             ;; if(toktype != INTEGER_CONST) error("Integer constant expected in .org directive."); 
0620   0798             _if20_cond:
0621   0798 3B 38 3E      mov d, _toktype ; $toktype
0622   079B 2A            mov b, [d]
0623   079C             ; START RELATIONAL
0624   079C D7            push a
0625   079D 11            mov a, b
0626   079E 26 05 00      mov b, 5; INTEGER_CONST
0627   07A1 B0            cmp a, b
0628   07A2 FD 72         sneq ; !=
0629   07A4 E4            pop a
0630   07A5             ; END RELATIONAL
0631   07A5 C0 00 00      cmp b, 0
0632   07A8 C6 BA 07      je _if20_exit
0633   07AB             _if20_true:
0634   07AB             ;; error("Integer constant expected in .org directive."); 
0635   07AB 26 2C 40      mov b, __s17 ; "Integer constant expected in .org directive."
0636   07AE FD AB         swp b
0637   07B0 D8            push b
0638   07B1 07 1F 31      call error
0639   07B4 51 02 00      add sp, 2
0640   07B7 0A BA 07      jmp _if20_exit
0641   07BA             _if20_exit:
0642   07BA             ;; _org = int_const; 
0643   07BA 3B 31 3E      mov d, __org ; $_org
0644   07BD DA            push d
0645   07BE 3B 7C 3F      mov d, _int_const ; $int_const
0646   07C1 2A            mov b, [d]
0647   07C2 E7            pop d
0648   07C3 FD 43         mov [d], b
0649   07C5 0A 02 09      jmp _if19_exit
0650   07C8             _if19_else:
0651   07C8             ;; if(tok == DB){ 
0652   07C8             _if21_cond:
0653   07C8 3B 36 3E      mov d, _tok ; $tok
0654   07CB 2A            mov b, [d]
0655   07CC             ; START RELATIONAL
0656   07CC D7            push a
0657   07CD 11            mov a, b
0658   07CE 26 06 00      mov b, 6; DB
0659   07D1 B0            cmp a, b
0660   07D2 FD 71         seq ; ==
0661   07D4 E4            pop a
0662   07D5             ; END RELATIONAL
0663   07D5 C0 00 00      cmp b, 0
0664   07D8 C6 5D 08      je _if21_else
0665   07DB             _if21_true:
0666   07DB             ;; for(;;){ 
0667   07DB             _for22_init:
0668   07DB             _for22_cond:
0669   07DB             _for22_block:
0670   07DB             ;; get(); 
0671   07DB 07 AE 25      call get
0672   07DE             ;; if(toktype == CHAR_CONST){ 
0673   07DE             _if23_cond:
0674   07DE 3B 38 3E      mov d, _toktype ; $toktype
0675   07E1 2A            mov b, [d]
0676   07E2             ; START RELATIONAL
0677   07E2 D7            push a
0678   07E3 11            mov a, b
0679   07E4 26 03 00      mov b, 3; CHAR_CONST
0680   07E7 B0            cmp a, b
0681   07E8 FD 71         seq ; ==
0682   07EA E4            pop a
0683   07EB             ; END RELATIONAL
0684   07EB C0 00 00      cmp b, 0
0685   07EE C6 10 08      je _if23_else
0686   07F1             _if23_true:
0687   07F1             ;; emit_byte(string_const[0], emit_override); 
0688   07F1 FA 05 00      lea d, [bp + 5] ; $emit_override
0689   07F4 32            mov bl, [d]
0690   07F5 A7 00         mov bh, 0
0691   07F7 DD            push bl
0692   07F8 3B 7C 3E      mov d, _string_const_data ; $string_const
0693   07FB D7            push a
0694   07FC DA            push d
0695   07FD 26 00 00      mov b, $0
0696   0800 E7            pop d
0697   0801 5A            add d, b
0698   0802 E4            pop a
0699   0803 32            mov bl, [d]
0700   0804 A7 00         mov bh, 0
0701   0806 DD            push bl
0702   0807 07 8F 22      call emit_byte
0703   080A 51 02 00      add sp, 2
0704   080D 0A 38 08      jmp _if23_exit
0705   0810             _if23_else:
0706   0810             ;; if(toktype == INTEGER_CONST){ 
0707   0810             _if24_cond:
0708   0810 3B 38 3E      mov d, _toktype ; $toktype
0709   0813 2A            mov b, [d]
0710   0814             ; START RELATIONAL
0711   0814 D7            push a
0712   0815 11            mov a, b
0713   0816 26 05 00      mov b, 5; INTEGER_CONST
0714   0819 B0            cmp a, b
0715   081A FD 71         seq ; ==
0716   081C E4            pop a
0717   081D             ; END RELATIONAL
0718   081D C0 00 00      cmp b, 0
0719   0820 C6 38 08      je _if24_exit
0720   0823             _if24_true:
0721   0823             ;; emit_byte(int_const, emit_override); 
0722   0823 FA 05 00      lea d, [bp + 5] ; $emit_override
0723   0826 32            mov bl, [d]
0724   0827 A7 00         mov bh, 0
0725   0829 DD            push bl
0726   082A 3B 7C 3F      mov d, _int_const ; $int_const
0727   082D 2A            mov b, [d]
0728   082E DD            push bl
0729   082F 07 8F 22      call emit_byte
0730   0832 51 02 00      add sp, 2
0731   0835 0A 38 08      jmp _if24_exit
0732   0838             _if24_exit:
0733   0838             _if23_exit:
0734   0838             ;; get(); 
0735   0838 07 AE 25      call get
0736   083B             ;; if(tok != COMMA){ 
0737   083B             _if25_cond:
0738   083B 3B 36 3E      mov d, _tok ; $tok
0739   083E 2A            mov b, [d]
0740   083F             ; START RELATIONAL
0741   083F D7            push a
0742   0840 11            mov a, b
0743   0841 26 0F 00      mov b, 15; COMMA
0744   0844 B0            cmp a, b
0745   0845 FD 72         sneq ; !=
0746   0847 E4            pop a
0747   0848             ; END RELATIONAL
0748   0848 C0 00 00      cmp b, 0
0749   084B C6 57 08      je _if25_exit
0750   084E             _if25_true:
0751   084E             ;; back(); 
0752   084E 07 EF 22      call back
0753   0851             ;; break; 
0754   0851 0A 5A 08      jmp _for22_exit ; for break
0755   0854 0A 57 08      jmp _if25_exit
0756   0857             _if25_exit:
0757   0857             _for22_update:
0758   0857 0A DB 07      jmp _for22_cond
0759   085A             _for22_exit:
0760   085A 0A 02 09      jmp _if21_exit
0761   085D             _if21_else:
0762   085D             ;; if(tok == DW){ 
0763   085D             _if26_cond:
0764   085D 3B 36 3E      mov d, _tok ; $tok
0765   0860 2A            mov b, [d]
0766   0861             ; START RELATIONAL
0767   0861 D7            push a
0768   0862 11            mov a, b
0769   0863 26 07 00      mov b, 7; DW
0770   0866 B0            cmp a, b
0771   0867 FD 71         seq ; ==
0772   0869 E4            pop a
0773   086A             ; END RELATIONAL
0774   086A C0 00 00      cmp b, 0
0775   086D C6 02 09      je _if26_exit
0776   0870             _if26_true:
0777   0870             ;; for(;;){ 
0778   0870             _for27_init:
0779   0870             _for27_cond:
0780   0870             _for27_block:
0781   0870             ;; get(); 
0782   0870 07 AE 25      call get
0783   0873             ;; if(toktype == CHAR_CONST){ 
0784   0873             _if28_cond:
0785   0873 3B 38 3E      mov d, _toktype ; $toktype
0786   0876 2A            mov b, [d]
0787   0877             ; START RELATIONAL
0788   0877 D7            push a
0789   0878 11            mov a, b
0790   0879 26 03 00      mov b, 3; CHAR_CONST
0791   087C B0            cmp a, b
0792   087D FD 71         seq ; ==
0793   087F E4            pop a
0794   0880             ; END RELATIONAL
0795   0880 C0 00 00      cmp b, 0
0796   0883 C6 B6 08      je _if28_else
0797   0886             _if28_true:
0798   0886             ;; emit_byte(string_const[0], emit_override); 
0799   0886 FA 05 00      lea d, [bp + 5] ; $emit_override
0800   0889 32            mov bl, [d]
0801   088A A7 00         mov bh, 0
0802   088C DD            push bl
0803   088D 3B 7C 3E      mov d, _string_const_data ; $string_const
0804   0890 D7            push a
0805   0891 DA            push d
0806   0892 26 00 00      mov b, $0
0807   0895 E7            pop d
0808   0896 5A            add d, b
0809   0897 E4            pop a
0810   0898 32            mov bl, [d]
0811   0899 A7 00         mov bh, 0
0812   089B DD            push bl
0813   089C 07 8F 22      call emit_byte
0814   089F 51 02 00      add sp, 2
0815   08A2             ;; emit_byte(0, emit_override); 
0816   08A2 FA 05 00      lea d, [bp + 5] ; $emit_override
0817   08A5 32            mov bl, [d]
0818   08A6 A7 00         mov bh, 0
0819   08A8 DD            push bl
0820   08A9 26 00 00      mov b, $0
0821   08AC DD            push bl
0822   08AD 07 8F 22      call emit_byte
0823   08B0 51 02 00      add sp, 2
0824   08B3 0A DD 08      jmp _if28_exit
0825   08B6             _if28_else:
0826   08B6             ;; if(toktype == INTEGER_CONST){ 
0827   08B6             _if29_cond:
0828   08B6 3B 38 3E      mov d, _toktype ; $toktype
0829   08B9 2A            mov b, [d]
0830   08BA             ; START RELATIONAL
0831   08BA D7            push a
0832   08BB 11            mov a, b
0833   08BC 26 05 00      mov b, 5; INTEGER_CONST
0834   08BF B0            cmp a, b
0835   08C0 FD 71         seq ; ==
0836   08C2 E4            pop a
0837   08C3             ; END RELATIONAL
0838   08C3 C0 00 00      cmp b, 0
0839   08C6 C6 DD 08      je _if29_exit
0840   08C9             _if29_true:
0841   08C9             ;; emit_word(int_const, 0); 
0842   08C9 26 00 00      mov b, $0
0843   08CC DD            push bl
0844   08CD 3B 7C 3F      mov d, _int_const ; $int_const
0845   08D0 2A            mov b, [d]
0846   08D1 FD AB         swp b
0847   08D3 D8            push b
0848   08D4 07 C0 22      call emit_word
0849   08D7 51 03 00      add sp, 3
0850   08DA 0A DD 08      jmp _if29_exit
0851   08DD             _if29_exit:
0852   08DD             _if28_exit:
0853   08DD             ;; get(); 
0854   08DD 07 AE 25      call get
0855   08E0             ;; if(tok != COMMA){ 
0856   08E0             _if30_cond:
0857   08E0 3B 36 3E      mov d, _tok ; $tok
0858   08E3 2A            mov b, [d]
0859   08E4             ; START RELATIONAL
0860   08E4 D7            push a
0861   08E5 11            mov a, b
0862   08E6 26 0F 00      mov b, 15; COMMA
0863   08E9 B0            cmp a, b
0864   08EA FD 72         sneq ; !=
0865   08EC E4            pop a
0866   08ED             ; END RELATIONAL
0867   08ED C0 00 00      cmp b, 0
0868   08F0 C6 FC 08      je _if30_exit
0869   08F3             _if30_true:
0870   08F3             ;; back(); 
0871   08F3 07 EF 22      call back
0872   08F6             ;; break; 
0873   08F6 0A FF 08      jmp _for27_exit ; for break
0874   08F9 0A FC 08      jmp _if30_exit
0875   08FC             _if30_exit:
0876   08FC             _for27_update:
0877   08FC 0A 70 08      jmp _for27_cond
0878   08FF             _for27_exit:
0879   08FF 0A 02 09      jmp _if26_exit
0880   0902             _if26_exit:
0881   0902             _if21_exit:
0882   0902             _if19_exit:
0883   0902 F9            leave
0884   0903 09            ret
0885   0904             
0886   0904             label_directive_scan:
0887   0904 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0888   0907             ; $temp_prog 
0889   0907             ; $i 
0890   0907 52 04 00      sub sp, 4
0891   090A             ;; prog = program; 
0892   090A 3B 3A 3E      mov d, _prog ; $prog
0893   090D DA            push d
0894   090E 3B 7E 3F      mov d, _program ; $program
0895   0911 2A            mov b, [d]
0896   0912 E7            pop d
0897   0913 FD 43         mov [d], b
0898   0915             ;; bin_p = bin_out + _org; 
0899   0915 3B 82 3F      mov d, _bin_p ; $bin_p
0900   0918 DA            push d
0901   0919 3B 80 3F      mov d, _bin_out ; $bin_out
0902   091C 2A            mov b, [d]
0903   091D             ; START TERMS
0904   091D D7            push a
0905   091E 11            mov a, b
0906   091F 3B 31 3E      mov d, __org ; $_org
0907   0922 2A            mov b, [d]
0908   0923 54            add a, b
0909   0924 27            mov b, a
0910   0925 E4            pop a
0911   0926             ; END TERMS
0912   0926 E7            pop d
0913   0927 FD 43         mov [d], b
0914   0929             ;; pc = _org; 
0915   0929 3B 33 3E      mov d, _pc ; $pc
0916   092C DA            push d
0917   092D 3B 31 3E      mov d, __org ; $_org
0918   0930 2A            mov b, [d]
0919   0931 E7            pop d
0920   0932 FD 43         mov [d], b
0921   0934             ;; print("Parsing labels and directives...\n"); 
0922   0934 26 59 40      mov b, __s18 ; "Parsing labels and directives...\n"
0923   0937 FD AB         swp b
0924   0939 D8            push b
0925   093A 07 0C 36      call print
0926   093D 51 02 00      add sp, 2
0927   0940             ;; for(;;){ 
0928   0940             _for31_init:
0929   0940             _for31_cond:
0930   0940             _for31_block:
0931   0940             ;; get(); back(); 
0932   0940 07 AE 25      call get
0933   0943             ;; back(); 
0934   0943 07 EF 22      call back
0935   0946             ;; temp_prog = prog; 
0936   0946 FA FF FF      lea d, [bp + -1] ; $temp_prog
0937   0949 DA            push d
0938   094A 3B 3A 3E      mov d, _prog ; $prog
0939   094D 2A            mov b, [d]
0940   094E E7            pop d
0941   094F FD 43         mov [d], b
0942   0951             ;; get(); 
0943   0951 07 AE 25      call get
0944   0954             ;; if(toktype == END) break; 
0945   0954             _if32_cond:
0946   0954 3B 38 3E      mov d, _toktype ; $toktype
0947   0957 2A            mov b, [d]
0948   0958             ; START RELATIONAL
0949   0958 D7            push a
0950   0959 11            mov a, b
0951   095A 26 07 00      mov b, 7; END
0952   095D B0            cmp a, b
0953   095E FD 71         seq ; ==
0954   0960 E4            pop a
0955   0961             ; END RELATIONAL
0956   0961 C0 00 00      cmp b, 0
0957   0964 C6 6D 09      je _if32_exit
0958   0967             _if32_true:
0959   0967             ;; break; 
0960   0967 0A 16 0A      jmp _for31_exit ; for break
0961   096A 0A 6D 09      jmp _if32_exit
0962   096D             _if32_exit:
0963   096D             ;; if(tok == DOT){ 
0964   096D             _if33_cond:
0965   096D 3B 36 3E      mov d, _tok ; $tok
0966   0970 2A            mov b, [d]
0967   0971             ; START RELATIONAL
0968   0971 D7            push a
0969   0972 11            mov a, b
0970   0973 26 10 00      mov b, 16; DOT
0971   0976 B0            cmp a, b
0972   0977 FD 71         seq ; ==
0973   0979 E4            pop a
0974   097A             ; END RELATIONAL
0975   097A C0 00 00      cmp b, 0
0976   097D C6 A9 09      je _if33_else
0977   0980             _if33_true:
0978   0980             ;; get(); 
0979   0980 07 AE 25      call get
0980   0983             ;; if(is_directive(token)){ 
0981   0983             _if34_cond:
0982   0983 3B 3C 3E      mov d, _token_data ; $token
0983   0986 2D            mov b, d
0984   0987 FD AB         swp b
0985   0989 D8            push b
0986   098A 07 16 1D      call is_directive
0987   098D 51 02 00      add sp, 2
0988   0990 C0 00 00      cmp b, 0
0989   0993 C6 A6 09      je _if34_exit
0990   0996             _if34_true:
0991   0996             ;; back(); 
0992   0996 07 EF 22      call back
0993   0999             ;; parse_directive(1); 
0994   0999 26 01 00      mov b, $1
0995   099C DD            push bl
0996   099D 07 7C 07      call parse_directive
0997   09A0 51 01 00      add sp, 1
0998   09A3 0A A6 09      jmp _if34_exit
0999   09A6             _if34_exit:
1000   09A6 0A 13 0A      jmp _if33_exit
1001   09A9             _if33_else:
1002   09A9             ;; if(toktype == IDENTIFIER){ 
1003   09A9             _if35_cond:
1004   09A9 3B 38 3E      mov d, _toktype ; $toktype
1005   09AC 2A            mov b, [d]
1006   09AD             ; START RELATIONAL
1007   09AD D7            push a
1008   09AE 11            mov a, b
1009   09AF 26 06 00      mov b, 6; IDENTIFIER
1010   09B2 B0            cmp a, b
1011   09B3 FD 71         seq ; ==
1012   09B5 E4            pop a
1013   09B6             ; END RELATIONAL
1014   09B6 C0 00 00      cmp b, 0
1015   09B9 C6 13 0A      je _if35_exit
1016   09BC             _if35_true:
1017   09BC             ;; get(); 
1018   09BC 07 AE 25      call get
1019   09BF             ;; if(tok == COLON){ 
1020   09BF             _if36_cond:
1021   09BF 3B 36 3E      mov d, _tok ; $tok
1022   09C2 2A            mov b, [d]
1023   09C3             ; START RELATIONAL
1024   09C3 D7            push a
1025   09C4 11            mov a, b
1026   09C5 26 0D 00      mov b, 13; COLON
1027   09C8 B0            cmp a, b
1028   09C9 FD 71         seq ; ==
1029   09CB E4            pop a
1030   09CC             ; END RELATIONAL
1031   09CC C0 00 00      cmp b, 0
1032   09CF C6 EF 09      je _if36_else
1033   09D2             _if36_true:
1034   09D2             ;; prog = temp_prog; 
1035   09D2 3B 3A 3E      mov d, _prog ; $prog
1036   09D5 DA            push d
1037   09D6 FA FF FF      lea d, [bp + -1] ; $temp_prog
1038   09D9 2A            mov b, [d]
1039   09DA E7            pop d
1040   09DB FD 43         mov [d], b
1041   09DD             ;; parse_label(); 
1042   09DD 07 50 1D      call parse_label
1043   09E0             ;; print("."); 
1044   09E0 26 7B 40      mov b, __s19 ; "."
1045   09E3 FD AB         swp b
1046   09E5 D8            push b
1047   09E6 07 0C 36      call print
1048   09E9 51 02 00      add sp, 2
1049   09EC 0A 10 0A      jmp _if36_exit
1050   09EF             _if36_else:
1051   09EF             ;; prog = temp_prog; 
1052   09EF 3B 3A 3E      mov d, _prog ; $prog
1053   09F2 DA            push d
1054   09F3 FA FF FF      lea d, [bp + -1] ; $temp_prog
1055   09F6 2A            mov b, [d]
1056   09F7 E7            pop d
1057   09F8 FD 43         mov [d], b
1058   09FA             ;; parse_instr(1);       
1059   09FA 26 01 00      mov b, $1
1060   09FD DD            push bl
1061   09FE 07 6D 10      call parse_instr
1062   0A01 51 01 00      add sp, 1
1063   0A04             ;; print("."); 
1064   0A04 26 7B 40      mov b, __s19 ; "."
1065   0A07 FD AB         swp b
1066   0A09 D8            push b
1067   0A0A 07 0C 36      call print
1068   0A0D 51 02 00      add sp, 2
1069   0A10             _if36_exit:
1070   0A10 0A 13 0A      jmp _if35_exit
1071   0A13             _if35_exit:
1072   0A13             _if33_exit:
1073   0A13             _for31_update:
1074   0A13 0A 40 09      jmp _for31_cond
1075   0A16             _for31_exit:
1076   0A16             ;; print("\nDone.\n"); 
1077   0A16 26 7D 40      mov b, __s20 ; "\nDone.\n"
1078   0A19 FD AB         swp b
1079   0A1B D8            push b
1080   0A1C 07 0C 36      call print
1081   0A1F 51 02 00      add sp, 2
1082   0A22             ;; print_info2("Org: ", _org, "\n"); 
1083   0A22 26 D2 3F      mov b, __s9 ; "\n"
1084   0A25 FD AB         swp b
1085   0A27 D8            push b
1086   0A28 3B 31 3E      mov d, __org ; $_org
1087   0A2B 2A            mov b, [d]
1088   0A2C FD AB         swp b
1089   0A2E D8            push b
1090   0A2F 26 85 40      mov b, __s21 ; "Org: "
1091   0A32 FD AB         swp b
1092   0A34 D8            push b
1093   0A35 07 75 1F      call print_info2
1094   0A38 51 06 00      add sp, 6
1095   0A3B             ;; print("\nLabels list:\n"); 
1096   0A3B 26 8B 40      mov b, __s22 ; "\nLabels list:\n"
1097   0A3E FD AB         swp b
1098   0A40 D8            push b
1099   0A41 07 0C 36      call print
1100   0A44 51 02 00      add sp, 2
1101   0A47             ;; for(i = 0; label_table[i].name[0]; i++){ 
1102   0A47             _for37_init:
1103   0A47 FA FD FF      lea d, [bp + -3] ; $i
1104   0A4A DA            push d
1105   0A4B 26 00 00      mov b, $0
1106   0A4E E7            pop d
1107   0A4F FD 43         mov [d], b
1108   0A51             _for37_cond:
1109   0A51 3B 11 3D      mov d, _label_table_data ; $label_table
1110   0A54 D7            push a
1111   0A55 DA            push d
1112   0A56 FA FD FF      lea d, [bp + -3] ; $i
1113   0A59 2A            mov b, [d]
1114   0A5A E7            pop d
1115   0A5B FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1116   0A5F E4            pop a
1117   0A60 58 00 00      add d, 0
1118   0A63 FD 14         clb
1119   0A65 D7            push a
1120   0A66 DA            push d
1121   0A67 26 00 00      mov b, $0
1122   0A6A E7            pop d
1123   0A6B 5A            add d, b
1124   0A6C E4            pop a
1125   0A6D 32            mov bl, [d]
1126   0A6E A7 00         mov bh, 0
1127   0A70 C0 00 00      cmp b, 0
1128   0A73 C6 DC 0A      je _for37_exit
1129   0A76             _for37_block:
1130   0A76             ;; print(label_table[i].name); 
1131   0A76 3B 11 3D      mov d, _label_table_data ; $label_table
1132   0A79 D7            push a
1133   0A7A DA            push d
1134   0A7B FA FD FF      lea d, [bp + -3] ; $i
1135   0A7E 2A            mov b, [d]
1136   0A7F E7            pop d
1137   0A80 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1138   0A84 E4            pop a
1139   0A85 58 00 00      add d, 0
1140   0A88 FD 14         clb
1141   0A8A 2D            mov b, d
1142   0A8B FD AB         swp b
1143   0A8D D8            push b
1144   0A8E 07 0C 36      call print
1145   0A91 51 02 00      add sp, 2
1146   0A94             ;; print(": "); 
1147   0A94 26 9A 40      mov b, __s23 ; ": "
1148   0A97 FD AB         swp b
1149   0A99 D8            push b
1150   0A9A 07 0C 36      call print
1151   0A9D 51 02 00      add sp, 2
1152   0AA0             ;; printx16(label_table[i].address); 
1153   0AA0 3B 11 3D      mov d, _label_table_data ; $label_table
1154   0AA3 D7            push a
1155   0AA4 DA            push d
1156   0AA5 FA FD FF      lea d, [bp + -3] ; $i
1157   0AA8 2A            mov b, [d]
1158   0AA9 E7            pop d
1159   0AAA FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1160   0AAE E4            pop a
1161   0AAF 58 10 00      add d, 16
1162   0AB2 FD 14         clb
1163   0AB4 2A            mov b, [d]
1164   0AB5 FD AB         swp b
1165   0AB7 D8            push b
1166   0AB8 07 BD 32      call printx16
1167   0ABB 51 02 00      add sp, 2
1168   0ABE             ;; print("\n"); 
1169   0ABE 26 D2 3F      mov b, __s9 ; "\n"
1170   0AC1 FD AB         swp b
1171   0AC3 D8            push b
1172   0AC4 07 0C 36      call print
1173   0AC7 51 02 00      add sp, 2
1174   0ACA             _for37_update:
1175   0ACA FA FD FF      lea d, [bp + -3] ; $i
1176   0ACD 2A            mov b, [d]
1177   0ACE FD 79         mov g, b
1178   0AD0 FD 77         inc b
1179   0AD2 FA FD FF      lea d, [bp + -3] ; $i
1180   0AD5 FD 43         mov [d], b
1181   0AD7 FD 27         mov b, g
1182   0AD9 0A 51 0A      jmp _for37_cond
1183   0ADC             _for37_exit:
1184   0ADC             ;; print("\n"); 
1185   0ADC 26 D2 3F      mov b, __s9 ; "\n"
1186   0ADF FD AB         swp b
1187   0AE1 D8            push b
1188   0AE2 07 0C 36      call print
1189   0AE5 51 02 00      add sp, 2
1190   0AE8 F9            leave
1191   0AE9 09            ret
1192   0AEA             
1193   0AEA             label_parse_instr:
1194   0AEA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1195   0AED             ; $opcode 
1196   0AED             ; $code_line 
1197   0AED             ; $op 
1198   0AED             ; $num_operands 
1199   0AED             ; $num_operandsexp 
1200   0AED             ; $i 
1201   0AED             ; $j 
1202   0AED             ; $operand_types 
1203   0AED             ; $old_pc 
1204   0AED             ; $has_operands 
1205   0AED 52 88 00      sub sp, 136
1206   0AF0             ;; old_pc = pc; 
1207   0AF0 FA 7A FF      lea d, [bp + -134] ; $old_pc
1208   0AF3 DA            push d
1209   0AF4 3B 33 3E      mov d, _pc ; $pc
1210   0AF7 2A            mov b, [d]
1211   0AF8 E7            pop d
1212   0AF9 FD 43         mov [d], b
1213   0AFB             ;; get_line(); 
1214   0AFB 07 D3 24      call get_line
1215   0AFE             ;; push_prog(); 
1216   0AFE 07 86 31      call push_prog
1217   0B01             ;; strcpy(code_line, string_const); 
1218   0B01 3B 7C 3E      mov d, _string_const_data ; $string_const
1219   0B04 2D            mov b, d
1220   0B05 FD AB         swp b
1221   0B07 D8            push b
1222   0B08 FA A1 FF      lea d, [bp + -95] ; $code_line
1223   0B0B 2D            mov b, d
1224   0B0C FD AB         swp b
1225   0B0E D8            push b
1226   0B0F 07 C9 36      call strcpy
1227   0B12 51 04 00      add sp, 4
1228   0B15             ;; has_operands = 0; 
1229   0B15 FA 79 FF      lea d, [bp + -135] ; $has_operands
1230   0B18 DA            push d
1231   0B19 26 00 00      mov b, $0
1232   0B1C E7            pop d
1233   0B1D FD 3E         mov [d], bl
1234   0B1F             ;; prog = code_line; 
1235   0B1F 3B 3A 3E      mov d, _prog ; $prog
1236   0B22 DA            push d
1237   0B23 FA A1 FF      lea d, [bp + -95] ; $code_line
1238   0B26 2D            mov b, d
1239   0B27 E7            pop d
1240   0B28 FD 43         mov [d], b
1241   0B2A             ;; get(); // get main opcode 
1242   0B2A 07 AE 25      call get
1243   0B2D             ;; for(;;){ 
1244   0B2D             _for38_init:
1245   0B2D             _for38_cond:
1246   0B2D             _for38_block:
1247   0B2D             ;; get(); 
1248   0B2D 07 AE 25      call get
1249   0B30             ;; if(toktype == END) break; 
1250   0B30             _if39_cond:
1251   0B30 3B 38 3E      mov d, _toktype ; $toktype
1252   0B33 2A            mov b, [d]
1253   0B34             ; START RELATIONAL
1254   0B34 D7            push a
1255   0B35 11            mov a, b
1256   0B36 26 07 00      mov b, 7; END
1257   0B39 B0            cmp a, b
1258   0B3A FD 71         seq ; ==
1259   0B3C E4            pop a
1260   0B3D             ; END RELATIONAL
1261   0B3D C0 00 00      cmp b, 0
1262   0B40 C6 49 0B      je _if39_exit
1263   0B43             _if39_true:
1264   0B43             ;; break; 
1265   0B43 0A 98 0B      jmp _for38_exit ; for break
1266   0B46 0A 49 0B      jmp _if39_exit
1267   0B49             _if39_exit:
1268   0B49             ;; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1269   0B49             _if40_cond:
1270   0B49 3B 38 3E      mov d, _toktype ; $toktype
1271   0B4C 2A            mov b, [d]
1272   0B4D             ; START RELATIONAL
1273   0B4D D7            push a
1274   0B4E 11            mov a, b
1275   0B4F 26 05 00      mov b, 5; INTEGER_CONST
1276   0B52 B0            cmp a, b
1277   0B53 FD 71         seq ; ==
1278   0B55 E4            pop a
1279   0B56             ; END RELATIONAL
1280   0B56 D7            push a
1281   0B57 11            mov a, b
1282   0B58 3B 38 3E      mov d, _toktype ; $toktype
1283   0B5B 2A            mov b, [d]
1284   0B5C             ; START RELATIONAL
1285   0B5C D7            push a
1286   0B5D 11            mov a, b
1287   0B5E 26 06 00      mov b, 6; IDENTIFIER
1288   0B61 B0            cmp a, b
1289   0B62 FD 71         seq ; ==
1290   0B64 E4            pop a
1291   0B65             ; END RELATIONAL
1292   0B65 D7            push a
1293   0B66 11            mov a, b
1294   0B67 3B 3C 3E      mov d, _token_data ; $token
1295   0B6A 2D            mov b, d
1296   0B6B FD AB         swp b
1297   0B6D D8            push b
1298   0B6E 07 6F 1A      call is_reserved
1299   0B71 51 02 00      add sp, 2
1300   0B74 C0 00 00      cmp b, 0
1301   0B77 FD 71         seq ; !
1302   0B79 FD A7         sand a, b ; &&
1303   0B7B E4            pop a
1304   0B7C FD A8         sor a, b ; ||
1305   0B7E E4            pop a
1306   0B7F C0 00 00      cmp b, 0
1307   0B82 C6 95 0B      je _if40_exit
1308   0B85             _if40_true:
1309   0B85             ;; has_operands = 1; 
1310   0B85 FA 79 FF      lea d, [bp + -135] ; $has_operands
1311   0B88 DA            push d
1312   0B89 26 01 00      mov b, $1
1313   0B8C E7            pop d
1314   0B8D FD 3E         mov [d], bl
1315   0B8F             ;; break; 
1316   0B8F 0A 98 0B      jmp _for38_exit ; for break
1317   0B92 0A 95 0B      jmp _if40_exit
1318   0B95             _if40_exit:
1319   0B95             _for38_update:
1320   0B95 0A 2D 0B      jmp _for38_cond
1321   0B98             _for38_exit:
1322   0B98             ;; opcode[0] = '\0'; 
1323   0B98 FA E1 FF      lea d, [bp + -31] ; $opcode
1324   0B9B D7            push a
1325   0B9C DA            push d
1326   0B9D 26 00 00      mov b, $0
1327   0BA0 E7            pop d
1328   0BA1 5A            add d, b
1329   0BA2 E4            pop a
1330   0BA3 DA            push d
1331   0BA4 26 00 00      mov b, $0
1332   0BA7 E7            pop d
1333   0BA8 FD 3E         mov [d], bl
1334   0BAA             ;; prog = code_line; 
1335   0BAA 3B 3A 3E      mov d, _prog ; $prog
1336   0BAD DA            push d
1337   0BAE FA A1 FF      lea d, [bp + -95] ; $code_line
1338   0BB1 2D            mov b, d
1339   0BB2 E7            pop d
1340   0BB3 FD 43         mov [d], b
1341   0BB5             ;; if(!has_operands){ 
1342   0BB5             _if41_cond:
1343   0BB5 FA 79 FF      lea d, [bp + -135] ; $has_operands
1344   0BB8 32            mov bl, [d]
1345   0BB9 A7 00         mov bh, 0
1346   0BBB C0 00 00      cmp b, 0
1347   0BBE FD 71         seq ; !
1348   0BC0 C0 00 00      cmp b, 0
1349   0BC3 C6 A9 0C      je _if41_else
1350   0BC6             _if41_true:
1351   0BC6             ;; get(); 
1352   0BC6 07 AE 25      call get
1353   0BC9             ;; strcpy(opcode, token); 
1354   0BC9 3B 3C 3E      mov d, _token_data ; $token
1355   0BCC 2D            mov b, d
1356   0BCD FD AB         swp b
1357   0BCF D8            push b
1358   0BD0 FA E1 FF      lea d, [bp + -31] ; $opcode
1359   0BD3 2D            mov b, d
1360   0BD4 FD AB         swp b
1361   0BD6 D8            push b
1362   0BD7 07 C9 36      call strcpy
1363   0BDA 51 04 00      add sp, 4
1364   0BDD             ;; get();  
1365   0BDD 07 AE 25      call get
1366   0BE0             ;; if(toktype == END){ 
1367   0BE0             _if42_cond:
1368   0BE0 3B 38 3E      mov d, _toktype ; $toktype
1369   0BE3 2A            mov b, [d]
1370   0BE4             ; START RELATIONAL
1371   0BE4 D7            push a
1372   0BE5 11            mov a, b
1373   0BE6 26 07 00      mov b, 7; END
1374   0BE9 B0            cmp a, b
1375   0BEA FD 71         seq ; ==
1376   0BEC E4            pop a
1377   0BED             ; END RELATIONAL
1378   0BED C0 00 00      cmp b, 0
1379   0BF0 C6 09 0C      je _if42_else
1380   0BF3             _if42_true:
1381   0BF3             ;; strcat(opcode, " ."); 
1382   0BF3 26 9D 40      mov b, __s24 ; " ."
1383   0BF6 FD AB         swp b
1384   0BF8 D8            push b
1385   0BF9 FA E1 FF      lea d, [bp + -31] ; $opcode
1386   0BFC 2D            mov b, d
1387   0BFD FD AB         swp b
1388   0BFF D8            push b
1389   0C00 07 95 37      call strcat
1390   0C03 51 04 00      add sp, 4
1391   0C06 0A 63 0C      jmp _if42_exit
1392   0C09             _if42_else:
1393   0C09             ;; strcat(opcode, " "); 
1394   0C09 26 A0 40      mov b, __s25 ; " "
1395   0C0C FD AB         swp b
1396   0C0E D8            push b
1397   0C0F FA E1 FF      lea d, [bp + -31] ; $opcode
1398   0C12 2D            mov b, d
1399   0C13 FD AB         swp b
1400   0C15 D8            push b
1401   0C16 07 95 37      call strcat
1402   0C19 51 04 00      add sp, 4
1403   0C1C             ;; strcat(opcode, token); 
1404   0C1C 3B 3C 3E      mov d, _token_data ; $token
1405   0C1F 2D            mov b, d
1406   0C20 FD AB         swp b
1407   0C22 D8            push b
1408   0C23 FA E1 FF      lea d, [bp + -31] ; $opcode
1409   0C26 2D            mov b, d
1410   0C27 FD AB         swp b
1411   0C29 D8            push b
1412   0C2A 07 95 37      call strcat
1413   0C2D 51 04 00      add sp, 4
1414   0C30             ;; for(;;){ 
1415   0C30             _for43_init:
1416   0C30             _for43_cond:
1417   0C30             _for43_block:
1418   0C30             ;; get(); 
1419   0C30 07 AE 25      call get
1420   0C33             ;; if(toktype == END) break; 
1421   0C33             _if44_cond:
1422   0C33 3B 38 3E      mov d, _toktype ; $toktype
1423   0C36 2A            mov b, [d]
1424   0C37             ; START RELATIONAL
1425   0C37 D7            push a
1426   0C38 11            mov a, b
1427   0C39 26 07 00      mov b, 7; END
1428   0C3C B0            cmp a, b
1429   0C3D FD 71         seq ; ==
1430   0C3F E4            pop a
1431   0C40             ; END RELATIONAL
1432   0C40 C0 00 00      cmp b, 0
1433   0C43 C6 4C 0C      je _if44_exit
1434   0C46             _if44_true:
1435   0C46             ;; break; 
1436   0C46 0A 63 0C      jmp _for43_exit ; for break
1437   0C49 0A 4C 0C      jmp _if44_exit
1438   0C4C             _if44_exit:
1439   0C4C             ;; strcat(opcode, token); 
1440   0C4C 3B 3C 3E      mov d, _token_data ; $token
1441   0C4F 2D            mov b, d
1442   0C50 FD AB         swp b
1443   0C52 D8            push b
1444   0C53 FA E1 FF      lea d, [bp + -31] ; $opcode
1445   0C56 2D            mov b, d
1446   0C57 FD AB         swp b
1447   0C59 D8            push b
1448   0C5A 07 95 37      call strcat
1449   0C5D 51 04 00      add sp, 4
1450   0C60             _for43_update:
1451   0C60 0A 30 0C      jmp _for43_cond
1452   0C63             _for43_exit:
1453   0C63             _if42_exit:
1454   0C63             ;; op = search_opcode(opcode); 
1455   0C63 FA 87 FF      lea d, [bp + -121] ; $op
1456   0C66 DA            push d
1457   0C67 FA E1 FF      lea d, [bp + -31] ; $opcode
1458   0C6A 2D            mov b, d
1459   0C6B FD AB         swp b
1460   0C6D D8            push b
1461   0C6E 07 B0 1F      call search_opcode
1462   0C71 51 02 00      add sp, 2
1463   0C74 E7            pop d
1464   0C75 FD 28         mov si, b
1465   0C77 FD 50         mov di, d
1466   0C79 38 1A 00      mov c, 26
1467   0C7C FD F5         rep movsb
1468   0C7E             ;; if(op.opcode_type){ 
1469   0C7E             _if45_cond:
1470   0C7E FA 87 FF      lea d, [bp + -121] ; $op
1471   0C81 58 19 00      add d, 25
1472   0C84 FD 14         clb
1473   0C86 32            mov bl, [d]
1474   0C87 A7 00         mov bh, 0
1475   0C89 C0 00 00      cmp b, 0
1476   0C8C C6 9C 0C      je _if45_exit
1477   0C8F             _if45_true:
1478   0C8F             ;; forwards(1); 
1479   0C8F 26 01 00      mov b, $1
1480   0C92 DD            push bl
1481   0C93 07 48 22      call forwards
1482   0C96 51 01 00      add sp, 1
1483   0C99 0A 9C 0C      jmp _if45_exit
1484   0C9C             _if45_exit:
1485   0C9C             ;; forwards(1); 
1486   0C9C 26 01 00      mov b, $1
1487   0C9F DD            push bl
1488   0CA0 07 48 22      call forwards
1489   0CA3 51 01 00      add sp, 1
1490   0CA6 0A 68 10      jmp _if41_exit
1491   0CA9             _if41_else:
1492   0CA9             ;; num_operands = 0; 
1493   0CA9 FA 85 FF      lea d, [bp + -123] ; $num_operands
1494   0CAC DA            push d
1495   0CAD 26 00 00      mov b, $0
1496   0CB0 E7            pop d
1497   0CB1 FD 43         mov [d], b
1498   0CB3             ;; for(;;){ 
1499   0CB3             _for46_init:
1500   0CB3             _for46_cond:
1501   0CB3             _for46_block:
1502   0CB3             ;; get(); 
1503   0CB3 07 AE 25      call get
1504   0CB6             ;; if(toktype == END) break; 
1505   0CB6             _if47_cond:
1506   0CB6 3B 38 3E      mov d, _toktype ; $toktype
1507   0CB9 2A            mov b, [d]
1508   0CBA             ; START RELATIONAL
1509   0CBA D7            push a
1510   0CBB 11            mov a, b
1511   0CBC 26 07 00      mov b, 7; END
1512   0CBF B0            cmp a, b
1513   0CC0 FD 71         seq ; ==
1514   0CC2 E4            pop a
1515   0CC3             ; END RELATIONAL
1516   0CC3 C0 00 00      cmp b, 0
1517   0CC6 C6 CF 0C      je _if47_exit
1518   0CC9             _if47_true:
1519   0CC9             ;; break; 
1520   0CC9 0A 20 0D      jmp _for46_exit ; for break
1521   0CCC 0A CF 0C      jmp _if47_exit
1522   0CCF             _if47_exit:
1523   0CCF             ;; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1524   0CCF             _if48_cond:
1525   0CCF 3B 38 3E      mov d, _toktype ; $toktype
1526   0CD2 2A            mov b, [d]
1527   0CD3             ; START RELATIONAL
1528   0CD3 D7            push a
1529   0CD4 11            mov a, b
1530   0CD5 26 05 00      mov b, 5; INTEGER_CONST
1531   0CD8 B0            cmp a, b
1532   0CD9 FD 71         seq ; ==
1533   0CDB E4            pop a
1534   0CDC             ; END RELATIONAL
1535   0CDC D7            push a
1536   0CDD 11            mov a, b
1537   0CDE 3B 38 3E      mov d, _toktype ; $toktype
1538   0CE1 2A            mov b, [d]
1539   0CE2             ; START RELATIONAL
1540   0CE2 D7            push a
1541   0CE3 11            mov a, b
1542   0CE4 26 06 00      mov b, 6; IDENTIFIER
1543   0CE7 B0            cmp a, b
1544   0CE8 FD 71         seq ; ==
1545   0CEA E4            pop a
1546   0CEB             ; END RELATIONAL
1547   0CEB D7            push a
1548   0CEC 11            mov a, b
1549   0CED 3B 3C 3E      mov d, _token_data ; $token
1550   0CF0 2D            mov b, d
1551   0CF1 FD AB         swp b
1552   0CF3 D8            push b
1553   0CF4 07 6F 1A      call is_reserved
1554   0CF7 51 02 00      add sp, 2
1555   0CFA C0 00 00      cmp b, 0
1556   0CFD FD 71         seq ; !
1557   0CFF FD A7         sand a, b ; &&
1558   0D01 E4            pop a
1559   0D02 FD A8         sor a, b ; ||
1560   0D04 E4            pop a
1561   0D05 C0 00 00      cmp b, 0
1562   0D08 C6 1D 0D      je _if48_exit
1563   0D0B             _if48_true:
1564   0D0B             ;; num_operands++; 
1565   0D0B FA 85 FF      lea d, [bp + -123] ; $num_operands
1566   0D0E 2A            mov b, [d]
1567   0D0F FD 79         mov g, b
1568   0D11 FD 77         inc b
1569   0D13 FA 85 FF      lea d, [bp + -123] ; $num_operands
1570   0D16 FD 43         mov [d], b
1571   0D18 FD 27         mov b, g
1572   0D1A 0A 1D 0D      jmp _if48_exit
1573   0D1D             _if48_exit:
1574   0D1D             _for46_update:
1575   0D1D 0A B3 0C      jmp _for46_cond
1576   0D20             _for46_exit:
1577   0D20             ;; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
1578   0D20             _if49_cond:
1579   0D20 FA 85 FF      lea d, [bp + -123] ; $num_operands
1580   0D23 2A            mov b, [d]
1581   0D24             ; START RELATIONAL
1582   0D24 D7            push a
1583   0D25 11            mov a, b
1584   0D26 26 02 00      mov b, $2
1585   0D29 B0            cmp a, b
1586   0D2A FD 7F         sgt ; >
1587   0D2C E4            pop a
1588   0D2D             ; END RELATIONAL
1589   0D2D C0 00 00      cmp b, 0
1590   0D30 C6 42 0D      je _if49_exit
1591   0D33             _if49_true:
1592   0D33             ;; error("Maximum number of operands per instruction is 2."); 
1593   0D33 26 A2 40      mov b, __s26 ; "Maximum number of operands per instruction is 2."
1594   0D36 FD AB         swp b
1595   0D38 D8            push b
1596   0D39 07 1F 31      call error
1597   0D3C 51 02 00      add sp, 2
1598   0D3F 0A 42 0D      jmp _if49_exit
1599   0D42             _if49_exit:
1600   0D42             ;; num_operandsexp = exp(2, num_operands); 
1601   0D42 FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
1602   0D45 DA            push d
1603   0D46 FA 85 FF      lea d, [bp + -123] ; $num_operands
1604   0D49 2A            mov b, [d]
1605   0D4A FD AB         swp b
1606   0D4C D8            push b
1607   0D4D 26 02 00      mov b, $2
1608   0D50 FD AB         swp b
1609   0D52 D8            push b
1610   0D53 07 72 36      call exp
1611   0D56 51 04 00      add sp, 4
1612   0D59 E7            pop d
1613   0D5A FD 43         mov [d], b
1614   0D5C             ;; for(i = 0; i < num_operandsexp; i++){ 
1615   0D5C             _for50_init:
1616   0D5C FA 81 FF      lea d, [bp + -127] ; $i
1617   0D5F DA            push d
1618   0D60 26 00 00      mov b, $0
1619   0D63 E7            pop d
1620   0D64 FD 43         mov [d], b
1621   0D66             _for50_cond:
1622   0D66 FA 81 FF      lea d, [bp + -127] ; $i
1623   0D69 2A            mov b, [d]
1624   0D6A             ; START RELATIONAL
1625   0D6A D7            push a
1626   0D6B 11            mov a, b
1627   0D6C FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
1628   0D6F 2A            mov b, [d]
1629   0D70 B0            cmp a, b
1630   0D71 FD 73         slt ; < 
1631   0D73 E4            pop a
1632   0D74             ; END RELATIONAL
1633   0D74 C0 00 00      cmp b, 0
1634   0D77 C6 68 10      je _for50_exit
1635   0D7A             _for50_block:
1636   0D7A             ;; prog = code_line; 
1637   0D7A 3B 3A 3E      mov d, _prog ; $prog
1638   0D7D DA            push d
1639   0D7E FA A1 FF      lea d, [bp + -95] ; $code_line
1640   0D81 2D            mov b, d
1641   0D82 E7            pop d
1642   0D83 FD 43         mov [d], b
1643   0D85             ;; get(); 
1644   0D85 07 AE 25      call get
1645   0D88             ;; strcpy(opcode, token); 
1646   0D88 3B 3C 3E      mov d, _token_data ; $token
1647   0D8B 2D            mov b, d
1648   0D8C FD AB         swp b
1649   0D8E D8            push b
1650   0D8F FA E1 FF      lea d, [bp + -31] ; $opcode
1651   0D92 2D            mov b, d
1652   0D93 FD AB         swp b
1653   0D95 D8            push b
1654   0D96 07 C9 36      call strcpy
1655   0D99 51 04 00      add sp, 4
1656   0D9C             ;; strcat(opcode, " "); 
1657   0D9C 26 A0 40      mov b, __s25 ; " "
1658   0D9F FD AB         swp b
1659   0DA1 D8            push b
1660   0DA2 FA E1 FF      lea d, [bp + -31] ; $opcode
1661   0DA5 2D            mov b, d
1662   0DA6 FD AB         swp b
1663   0DA8 D8            push b
1664   0DA9 07 95 37      call strcat
1665   0DAC 51 04 00      add sp, 4
1666   0DAF             ;; j = 0; 
1667   0DAF FA 7F FF      lea d, [bp + -129] ; $j
1668   0DB2 DA            push d
1669   0DB3 26 00 00      mov b, $0
1670   0DB6 E7            pop d
1671   0DB7 FD 43         mov [d], b
1672   0DB9             ;; for(;;){ 
1673   0DB9             _for51_init:
1674   0DB9             _for51_cond:
1675   0DB9             _for51_block:
1676   0DB9             ;; get(); 
1677   0DB9 07 AE 25      call get
1678   0DBC             ;; if(toktype == END) break; 
1679   0DBC             _if52_cond:
1680   0DBC 3B 38 3E      mov d, _toktype ; $toktype
1681   0DBF 2A            mov b, [d]
1682   0DC0             ; START RELATIONAL
1683   0DC0 D7            push a
1684   0DC1 11            mov a, b
1685   0DC2 26 07 00      mov b, 7; END
1686   0DC5 B0            cmp a, b
1687   0DC6 FD 71         seq ; ==
1688   0DC8 E4            pop a
1689   0DC9             ; END RELATIONAL
1690   0DC9 C0 00 00      cmp b, 0
1691   0DCC C6 D5 0D      je _if52_exit
1692   0DCF             _if52_true:
1693   0DCF             ;; break; 
1694   0DCF 0A A2 0E      jmp _for51_exit ; for break
1695   0DD2 0A D5 0D      jmp _if52_exit
1696   0DD5             _if52_exit:
1697   0DD5             ;; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1698   0DD5             _if53_cond:
1699   0DD5 3B 38 3E      mov d, _toktype ; $toktype
1700   0DD8 2A            mov b, [d]
1701   0DD9             ; START RELATIONAL
1702   0DD9 D7            push a
1703   0DDA 11            mov a, b
1704   0DDB 26 05 00      mov b, 5; INTEGER_CONST
1705   0DDE B0            cmp a, b
1706   0DDF FD 71         seq ; ==
1707   0DE1 E4            pop a
1708   0DE2             ; END RELATIONAL
1709   0DE2 D7            push a
1710   0DE3 11            mov a, b
1711   0DE4 3B 38 3E      mov d, _toktype ; $toktype
1712   0DE7 2A            mov b, [d]
1713   0DE8             ; START RELATIONAL
1714   0DE8 D7            push a
1715   0DE9 11            mov a, b
1716   0DEA 26 06 00      mov b, 6; IDENTIFIER
1717   0DED B0            cmp a, b
1718   0DEE FD 71         seq ; ==
1719   0DF0 E4            pop a
1720   0DF1             ; END RELATIONAL
1721   0DF1 D7            push a
1722   0DF2 11            mov a, b
1723   0DF3 3B 3C 3E      mov d, _token_data ; $token
1724   0DF6 2D            mov b, d
1725   0DF7 FD AB         swp b
1726   0DF9 D8            push b
1727   0DFA 07 6F 1A      call is_reserved
1728   0DFD 51 02 00      add sp, 2
1729   0E00 C0 00 00      cmp b, 0
1730   0E03 FD 71         seq ; !
1731   0E05 FD A7         sand a, b ; &&
1732   0E07 E4            pop a
1733   0E08 FD A8         sor a, b ; ||
1734   0E0A E4            pop a
1735   0E0B C0 00 00      cmp b, 0
1736   0E0E C6 8B 0E      je _if53_else
1737   0E11             _if53_true:
1738   0E11             ;; strcat(opcode, symbols[i*2+j]); 
1739   0E11 3B 9E 3F      mov d, _symbols_data ; $symbols
1740   0E14 D7            push a
1741   0E15 DA            push d
1742   0E16 FA 81 FF      lea d, [bp + -127] ; $i
1743   0E19 2A            mov b, [d]
1744   0E1A             ; START FACTORS
1745   0E1A D7            push a
1746   0E1B 11            mov a, b
1747   0E1C 26 02 00      mov b, $2
1748   0E1F AC            mul a, b ; *
1749   0E20 11            mov a, b
1750   0E21 27            mov b, a
1751   0E22 E4            pop a
1752   0E23             ; END FACTORS
1753   0E23             ; START TERMS
1754   0E23 D7            push a
1755   0E24 11            mov a, b
1756   0E25 FA 7F FF      lea d, [bp + -129] ; $j
1757   0E28 2A            mov b, [d]
1758   0E29 54            add a, b
1759   0E2A 27            mov b, a
1760   0E2B E4            pop a
1761   0E2C             ; END TERMS
1762   0E2C E7            pop d
1763   0E2D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1764   0E31 E4            pop a
1765   0E32 2A            mov b, [d]
1766   0E33 FD AB         swp b
1767   0E35 D8            push b
1768   0E36 FA E1 FF      lea d, [bp + -31] ; $opcode
1769   0E39 2D            mov b, d
1770   0E3A FD AB         swp b
1771   0E3C D8            push b
1772   0E3D 07 95 37      call strcat
1773   0E40 51 04 00      add sp, 4
1774   0E43             ;; operand_types[j] = *symbols[i*2+j]; 
1775   0E43 FA 7C FF      lea d, [bp + -132] ; $operand_types
1776   0E46 D7            push a
1777   0E47 DA            push d
1778   0E48 FA 7F FF      lea d, [bp + -129] ; $j
1779   0E4B 2A            mov b, [d]
1780   0E4C E7            pop d
1781   0E4D 5A            add d, b
1782   0E4E E4            pop a
1783   0E4F DA            push d
1784   0E50 3B 9E 3F      mov d, _symbols_data ; $symbols
1785   0E53 D7            push a
1786   0E54 DA            push d
1787   0E55 FA 81 FF      lea d, [bp + -127] ; $i
1788   0E58 2A            mov b, [d]
1789   0E59             ; START FACTORS
1790   0E59 D7            push a
1791   0E5A 11            mov a, b
1792   0E5B 26 02 00      mov b, $2
1793   0E5E AC            mul a, b ; *
1794   0E5F 11            mov a, b
1795   0E60 27            mov b, a
1796   0E61 E4            pop a
1797   0E62             ; END FACTORS
1798   0E62             ; START TERMS
1799   0E62 D7            push a
1800   0E63 11            mov a, b
1801   0E64 FA 7F FF      lea d, [bp + -129] ; $j
1802   0E67 2A            mov b, [d]
1803   0E68 54            add a, b
1804   0E69 27            mov b, a
1805   0E6A E4            pop a
1806   0E6B             ; END TERMS
1807   0E6B E7            pop d
1808   0E6C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1809   0E70 E4            pop a
1810   0E71 2A            mov b, [d]
1811   0E72 74            mov d, b
1812   0E73 32            mov bl, [d]
1813   0E74 A7 00         mov bh, 0
1814   0E76 E7            pop d
1815   0E77 FD 3E         mov [d], bl
1816   0E79             ;; j++; 
1817   0E79 FA 7F FF      lea d, [bp + -129] ; $j
1818   0E7C 2A            mov b, [d]
1819   0E7D FD 79         mov g, b
1820   0E7F FD 77         inc b
1821   0E81 FA 7F FF      lea d, [bp + -129] ; $j
1822   0E84 FD 43         mov [d], b
1823   0E86 FD 27         mov b, g
1824   0E88 0A 9F 0E      jmp _if53_exit
1825   0E8B             _if53_else:
1826   0E8B             ;; strcat(opcode, token); 
1827   0E8B 3B 3C 3E      mov d, _token_data ; $token
1828   0E8E 2D            mov b, d
1829   0E8F FD AB         swp b
1830   0E91 D8            push b
1831   0E92 FA E1 FF      lea d, [bp + -31] ; $opcode
1832   0E95 2D            mov b, d
1833   0E96 FD AB         swp b
1834   0E98 D8            push b
1835   0E99 07 95 37      call strcat
1836   0E9C 51 04 00      add sp, 4
1837   0E9F             _if53_exit:
1838   0E9F             _for51_update:
1839   0E9F 0A B9 0D      jmp _for51_cond
1840   0EA2             _for51_exit:
1841   0EA2             ;; op = search_opcode(opcode); 
1842   0EA2 FA 87 FF      lea d, [bp + -121] ; $op
1843   0EA5 DA            push d
1844   0EA6 FA E1 FF      lea d, [bp + -31] ; $opcode
1845   0EA9 2D            mov b, d
1846   0EAA FD AB         swp b
1847   0EAC D8            push b
1848   0EAD 07 B0 1F      call search_opcode
1849   0EB0 51 02 00      add sp, 2
1850   0EB3 E7            pop d
1851   0EB4 FD 28         mov si, b
1852   0EB6 FD 50         mov di, d
1853   0EB8 38 1A 00      mov c, 26
1854   0EBB FD F5         rep movsb
1855   0EBD             ;; if(op.name[0] == '\0') continue; 
1856   0EBD             _if54_cond:
1857   0EBD FA 87 FF      lea d, [bp + -121] ; $op
1858   0EC0 58 00 00      add d, 0
1859   0EC3 FD 14         clb
1860   0EC5 D7            push a
1861   0EC6 DA            push d
1862   0EC7 26 00 00      mov b, $0
1863   0ECA E7            pop d
1864   0ECB 5A            add d, b
1865   0ECC E4            pop a
1866   0ECD 32            mov bl, [d]
1867   0ECE A7 00         mov bh, 0
1868   0ED0             ; START RELATIONAL
1869   0ED0 D7            push a
1870   0ED1 11            mov a, b
1871   0ED2 26 00 00      mov b, $0
1872   0ED5 B0            cmp a, b
1873   0ED6 FD 71         seq ; ==
1874   0ED8 E4            pop a
1875   0ED9             ; END RELATIONAL
1876   0ED9 C0 00 00      cmp b, 0
1877   0EDC C6 E5 0E      je _if54_exit
1878   0EDF             _if54_true:
1879   0EDF             ;; continue; 
1880   0EDF 0A 56 10      jmp _for50_update ; for continue
1881   0EE2 0A E5 0E      jmp _if54_exit
1882   0EE5             _if54_exit:
1883   0EE5             ;; if(op.opcode_type){ 
1884   0EE5             _if55_cond:
1885   0EE5 FA 87 FF      lea d, [bp + -121] ; $op
1886   0EE8 58 19 00      add d, 25
1887   0EEB FD 14         clb
1888   0EED 32            mov bl, [d]
1889   0EEE A7 00         mov bh, 0
1890   0EF0 C0 00 00      cmp b, 0
1891   0EF3 C6 03 0F      je _if55_exit
1892   0EF6             _if55_true:
1893   0EF6             ;; forwards(1); 
1894   0EF6 26 01 00      mov b, $1
1895   0EF9 DD            push bl
1896   0EFA 07 48 22      call forwards
1897   0EFD 51 01 00      add sp, 1
1898   0F00 0A 03 0F      jmp _if55_exit
1899   0F03             _if55_exit:
1900   0F03             ;; forwards(1); 
1901   0F03 26 01 00      mov b, $1
1902   0F06 DD            push bl
1903   0F07 07 48 22      call forwards
1904   0F0A 51 01 00      add sp, 1
1905   0F0D             ;; prog = code_line; 
1906   0F0D 3B 3A 3E      mov d, _prog ; $prog
1907   0F10 DA            push d
1908   0F11 FA A1 FF      lea d, [bp + -95] ; $code_line
1909   0F14 2D            mov b, d
1910   0F15 E7            pop d
1911   0F16 FD 43         mov [d], b
1912   0F18             ;; j = 0; 
1913   0F18 FA 7F FF      lea d, [bp + -129] ; $j
1914   0F1B DA            push d
1915   0F1C 26 00 00      mov b, $0
1916   0F1F E7            pop d
1917   0F20 FD 43         mov [d], b
1918   0F22             ;; get(); 
1919   0F22 07 AE 25      call get
1920   0F25             ;; for(;;){ 
1921   0F25             _for56_init:
1922   0F25             _for56_cond:
1923   0F25             _for56_block:
1924   0F25             ;; get(); 
1925   0F25 07 AE 25      call get
1926   0F28             ;; if(toktype == END) break; 
1927   0F28             _if57_cond:
1928   0F28 3B 38 3E      mov d, _toktype ; $toktype
1929   0F2B 2A            mov b, [d]
1930   0F2C             ; START RELATIONAL
1931   0F2C D7            push a
1932   0F2D 11            mov a, b
1933   0F2E 26 07 00      mov b, 7; END
1934   0F31 B0            cmp a, b
1935   0F32 FD 71         seq ; ==
1936   0F34 E4            pop a
1937   0F35             ; END RELATIONAL
1938   0F35 C0 00 00      cmp b, 0
1939   0F38 C6 41 0F      je _if57_exit
1940   0F3B             _if57_true:
1941   0F3B             ;; break; 
1942   0F3B 0A 53 10      jmp _for56_exit ; for break
1943   0F3E 0A 41 0F      jmp _if57_exit
1944   0F41             _if57_exit:
1945   0F41             ;; if(toktype == IDENTIFIER && !is_reserved(token)){ 
1946   0F41             _if58_cond:
1947   0F41 3B 38 3E      mov d, _toktype ; $toktype
1948   0F44 2A            mov b, [d]
1949   0F45             ; START RELATIONAL
1950   0F45 D7            push a
1951   0F46 11            mov a, b
1952   0F47 26 06 00      mov b, 6; IDENTIFIER
1953   0F4A B0            cmp a, b
1954   0F4B FD 71         seq ; ==
1955   0F4D E4            pop a
1956   0F4E             ; END RELATIONAL
1957   0F4E D7            push a
1958   0F4F 11            mov a, b
1959   0F50 3B 3C 3E      mov d, _token_data ; $token
1960   0F53 2D            mov b, d
1961   0F54 FD AB         swp b
1962   0F56 D8            push b
1963   0F57 07 6F 1A      call is_reserved
1964   0F5A 51 02 00      add sp, 2
1965   0F5D C0 00 00      cmp b, 0
1966   0F60 FD 71         seq ; !
1967   0F62 FD A7         sand a, b ; &&
1968   0F64 E4            pop a
1969   0F65 C0 00 00      cmp b, 0
1970   0F68 C6 D5 0F      je _if58_else
1971   0F6B             _if58_true:
1972   0F6B             ;; if(operand_types[j] == '#'){ 
1973   0F6B             _if59_cond:
1974   0F6B FA 7C FF      lea d, [bp + -132] ; $operand_types
1975   0F6E D7            push a
1976   0F6F DA            push d
1977   0F70 FA 7F FF      lea d, [bp + -129] ; $j
1978   0F73 2A            mov b, [d]
1979   0F74 E7            pop d
1980   0F75 5A            add d, b
1981   0F76 E4            pop a
1982   0F77 32            mov bl, [d]
1983   0F78 A7 00         mov bh, 0
1984   0F7A             ; START RELATIONAL
1985   0F7A D7            push a
1986   0F7B 11            mov a, b
1987   0F7C 26 23 00      mov b, $23
1988   0F7F B0            cmp a, b
1989   0F80 FD 71         seq ; ==
1990   0F82 E4            pop a
1991   0F83             ; END RELATIONAL
1992   0F83 C0 00 00      cmp b, 0
1993   0F86 C6 98 0F      je _if59_else
1994   0F89             _if59_true:
1995   0F89             ;; error("8bit operand expected but 16bit label given."); 
1996   0F89 26 D3 40      mov b, __s27 ; "8bit operand expected but 16bit label given."
1997   0F8C FD AB         swp b
1998   0F8E D8            push b
1999   0F8F 07 1F 31      call error
2000   0F92 51 02 00      add sp, 2
2001   0F95 0A C3 0F      jmp _if59_exit
2002   0F98             _if59_else:
2003   0F98             ;; if(operand_types[j] == '@'){ 
2004   0F98             _if60_cond:
2005   0F98 FA 7C FF      lea d, [bp + -132] ; $operand_types
2006   0F9B D7            push a
2007   0F9C DA            push d
2008   0F9D FA 7F FF      lea d, [bp + -129] ; $j
2009   0FA0 2A            mov b, [d]
2010   0FA1 E7            pop d
2011   0FA2 5A            add d, b
2012   0FA3 E4            pop a
2013   0FA4 32            mov bl, [d]
2014   0FA5 A7 00         mov bh, 0
2015   0FA7             ; START RELATIONAL
2016   0FA7 D7            push a
2017   0FA8 11            mov a, b
2018   0FA9 26 40 00      mov b, $40
2019   0FAC B0            cmp a, b
2020   0FAD FD 71         seq ; ==
2021   0FAF E4            pop a
2022   0FB0             ; END RELATIONAL
2023   0FB0 C0 00 00      cmp b, 0
2024   0FB3 C6 C3 0F      je _if60_exit
2025   0FB6             _if60_true:
2026   0FB6             ;; forwards(2); 
2027   0FB6 26 02 00      mov b, $2
2028   0FB9 DD            push bl
2029   0FBA 07 48 22      call forwards
2030   0FBD 51 01 00      add sp, 1
2031   0FC0 0A C3 0F      jmp _if60_exit
2032   0FC3             _if60_exit:
2033   0FC3             _if59_exit:
2034   0FC3             ;; j++; 
2035   0FC3 FA 7F FF      lea d, [bp + -129] ; $j
2036   0FC6 2A            mov b, [d]
2037   0FC7 FD 79         mov g, b
2038   0FC9 FD 77         inc b
2039   0FCB FA 7F FF      lea d, [bp + -129] ; $j
2040   0FCE FD 43         mov [d], b
2041   0FD0 FD 27         mov b, g
2042   0FD2 0A 50 10      jmp _if58_exit
2043   0FD5             _if58_else:
2044   0FD5             ;; if(toktype == INTEGER_CONST){ 
2045   0FD5             _if61_cond:
2046   0FD5 3B 38 3E      mov d, _toktype ; $toktype
2047   0FD8 2A            mov b, [d]
2048   0FD9             ; START RELATIONAL
2049   0FD9 D7            push a
2050   0FDA 11            mov a, b
2051   0FDB 26 05 00      mov b, 5; INTEGER_CONST
2052   0FDE B0            cmp a, b
2053   0FDF FD 71         seq ; ==
2054   0FE1 E4            pop a
2055   0FE2             ; END RELATIONAL
2056   0FE2 C0 00 00      cmp b, 0
2057   0FE5 C6 50 10      je _if61_exit
2058   0FE8             _if61_true:
2059   0FE8             ;; if(operand_types[j] == '#'){ 
2060   0FE8             _if62_cond:
2061   0FE8 FA 7C FF      lea d, [bp + -132] ; $operand_types
2062   0FEB D7            push a
2063   0FEC DA            push d
2064   0FED FA 7F FF      lea d, [bp + -129] ; $j
2065   0FF0 2A            mov b, [d]
2066   0FF1 E7            pop d
2067   0FF2 5A            add d, b
2068   0FF3 E4            pop a
2069   0FF4 32            mov bl, [d]
2070   0FF5 A7 00         mov bh, 0
2071   0FF7             ; START RELATIONAL
2072   0FF7 D7            push a
2073   0FF8 11            mov a, b
2074   0FF9 26 23 00      mov b, $23
2075   0FFC B0            cmp a, b
2076   0FFD FD 71         seq ; ==
2077   0FFF E4            pop a
2078   1000             ; END RELATIONAL
2079   1000 C0 00 00      cmp b, 0
2080   1003 C6 13 10      je _if62_else
2081   1006             _if62_true:
2082   1006             ;; forwards(1); 
2083   1006 26 01 00      mov b, $1
2084   1009 DD            push bl
2085   100A 07 48 22      call forwards
2086   100D 51 01 00      add sp, 1
2087   1010 0A 3E 10      jmp _if62_exit
2088   1013             _if62_else:
2089   1013             ;; if(operand_types[j] == '@'){ 
2090   1013             _if63_cond:
2091   1013 FA 7C FF      lea d, [bp + -132] ; $operand_types
2092   1016 D7            push a
2093   1017 DA            push d
2094   1018 FA 7F FF      lea d, [bp + -129] ; $j
2095   101B 2A            mov b, [d]
2096   101C E7            pop d
2097   101D 5A            add d, b
2098   101E E4            pop a
2099   101F 32            mov bl, [d]
2100   1020 A7 00         mov bh, 0
2101   1022             ; START RELATIONAL
2102   1022 D7            push a
2103   1023 11            mov a, b
2104   1024 26 40 00      mov b, $40
2105   1027 B0            cmp a, b
2106   1028 FD 71         seq ; ==
2107   102A E4            pop a
2108   102B             ; END RELATIONAL
2109   102B C0 00 00      cmp b, 0
2110   102E C6 3E 10      je _if63_exit
2111   1031             _if63_true:
2112   1031             ;; forwards(2); 
2113   1031 26 02 00      mov b, $2
2114   1034 DD            push bl
2115   1035 07 48 22      call forwards
2116   1038 51 01 00      add sp, 1
2117   103B 0A 3E 10      jmp _if63_exit
2118   103E             _if63_exit:
2119   103E             _if62_exit:
2120   103E             ;; j++; 
2121   103E FA 7F FF      lea d, [bp + -129] ; $j
2122   1041 2A            mov b, [d]
2123   1042 FD 79         mov g, b
2124   1044 FD 77         inc b
2125   1046 FA 7F FF      lea d, [bp + -129] ; $j
2126   1049 FD 43         mov [d], b
2127   104B FD 27         mov b, g
2128   104D 0A 50 10      jmp _if61_exit
2129   1050             _if61_exit:
2130   1050             _if58_exit:
2131   1050             _for56_update:
2132   1050 0A 25 0F      jmp _for56_cond
2133   1053             _for56_exit:
2134   1053             ;; break; 
2135   1053 0A 68 10      jmp _for50_exit ; for break
2136   1056             _for50_update:
2137   1056 FA 81 FF      lea d, [bp + -127] ; $i
2138   1059 2A            mov b, [d]
2139   105A FD 79         mov g, b
2140   105C FD 77         inc b
2141   105E FA 81 FF      lea d, [bp + -127] ; $i
2142   1061 FD 43         mov [d], b
2143   1063 FD 27         mov b, g
2144   1065 0A 66 0D      jmp _for50_cond
2145   1068             _for50_exit:
2146   1068             _if41_exit:
2147   1068             ;; pop_prog(); 
2148   1068 07 D3 31      call pop_prog
2149   106B F9            leave
2150   106C 09            ret
2151   106D             
2152   106D             parse_instr:
2153   106D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2154   1070             ; $opcode 
2155   1070             ; $code_line 
2156   1070             ; $op 
2157   1070             ; $instr_len 
2158   1070             ; $num_operands 
2159   1070             ; $num_operandsexp 
2160   1070             ; $i 
2161   1070             ; $j 
2162   1070             ; $operand_types 
2163   1070             ; $old_pc 
2164   1070             ; $has_operands 
2165   1070 52 8A 00      sub sp, 138
2166   1073             ;; old_pc = pc; 
2167   1073 FA 78 FF      lea d, [bp + -136] ; $old_pc
2168   1076 DA            push d
2169   1077 3B 33 3E      mov d, _pc ; $pc
2170   107A 2A            mov b, [d]
2171   107B E7            pop d
2172   107C FD 43         mov [d], b
2173   107E             ;; get_line(); 
2174   107E 07 D3 24      call get_line
2175   1081             ;; push_prog(); 
2176   1081 07 86 31      call push_prog
2177   1084             ;; strcpy(code_line, string_const); 
2178   1084 3B 7C 3E      mov d, _string_const_data ; $string_const
2179   1087 2D            mov b, d
2180   1088 FD AB         swp b
2181   108A D8            push b
2182   108B FA A1 FF      lea d, [bp + -95] ; $code_line
2183   108E 2D            mov b, d
2184   108F FD AB         swp b
2185   1091 D8            push b
2186   1092 07 C9 36      call strcpy
2187   1095 51 04 00      add sp, 4
2188   1098             ;; has_operands = 0; 
2189   1098 FA 77 FF      lea d, [bp + -137] ; $has_operands
2190   109B DA            push d
2191   109C 26 00 00      mov b, $0
2192   109F E7            pop d
2193   10A0 FD 3E         mov [d], bl
2194   10A2             ;; prog = code_line; 
2195   10A2 3B 3A 3E      mov d, _prog ; $prog
2196   10A5 DA            push d
2197   10A6 FA A1 FF      lea d, [bp + -95] ; $code_line
2198   10A9 2D            mov b, d
2199   10AA E7            pop d
2200   10AB FD 43         mov [d], b
2201   10AD             ;; get(); 
2202   10AD 07 AE 25      call get
2203   10B0             ;; for(;;){ 
2204   10B0             _for64_init:
2205   10B0             _for64_cond:
2206   10B0             _for64_block:
2207   10B0             ;; get(); 
2208   10B0 07 AE 25      call get
2209   10B3             ;; if(toktype == END) break; 
2210   10B3             _if65_cond:
2211   10B3 3B 38 3E      mov d, _toktype ; $toktype
2212   10B6 2A            mov b, [d]
2213   10B7             ; START RELATIONAL
2214   10B7 D7            push a
2215   10B8 11            mov a, b
2216   10B9 26 07 00      mov b, 7; END
2217   10BC B0            cmp a, b
2218   10BD FD 71         seq ; ==
2219   10BF E4            pop a
2220   10C0             ; END RELATIONAL
2221   10C0 C0 00 00      cmp b, 0
2222   10C3 C6 CC 10      je _if65_exit
2223   10C6             _if65_true:
2224   10C6             ;; break; 
2225   10C6 0A 0F 11      jmp _for64_exit ; for break
2226   10C9 0A CC 10      jmp _if65_exit
2227   10CC             _if65_exit:
2228   10CC             ;; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
2229   10CC             _if66_cond:
2230   10CC 3B 38 3E      mov d, _toktype ; $toktype
2231   10CF 2A            mov b, [d]
2232   10D0             ; START RELATIONAL
2233   10D0 D7            push a
2234   10D1 11            mov a, b
2235   10D2 26 05 00      mov b, 5; INTEGER_CONST
2236   10D5 B0            cmp a, b
2237   10D6 FD 71         seq ; ==
2238   10D8 E4            pop a
2239   10D9             ; END RELATIONAL
2240   10D9 D7            push a
2241   10DA 11            mov a, b
2242   10DB 3B 3C 3E      mov d, _token_data ; $token
2243   10DE 2D            mov b, d
2244   10DF FD AB         swp b
2245   10E1 D8            push b
2246   10E2 07 C5 1E      call label_exists
2247   10E5 51 02 00      add sp, 2
2248   10E8             ; START RELATIONAL
2249   10E8 D7            push a
2250   10E9 11            mov a, b
2251   10EA 26 01 00      mov b, $1
2252   10ED FD 97         neg b
2253   10EF B0            cmp a, b
2254   10F0 FD 72         sneq ; !=
2255   10F2 E4            pop a
2256   10F3             ; END RELATIONAL
2257   10F3 FD A8         sor a, b ; ||
2258   10F5 E4            pop a
2259   10F6 C0 00 00      cmp b, 0
2260   10F9 C6 0C 11      je _if66_exit
2261   10FC             _if66_true:
2262   10FC             ;; has_operands = 1; 
2263   10FC FA 77 FF      lea d, [bp + -137] ; $has_operands
2264   10FF DA            push d
2265   1100 26 01 00      mov b, $1
2266   1103 E7            pop d
2267   1104 FD 3E         mov [d], bl
2268   1106             ;; break; 
2269   1106 0A 0F 11      jmp _for64_exit ; for break
2270   1109 0A 0C 11      jmp _if66_exit
2271   110C             _if66_exit:
2272   110C             _for64_update:
2273   110C 0A B0 10      jmp _for64_cond
2274   110F             _for64_exit:
2275   110F             ;; opcode[0] = '\0'; 
2276   110F FA E1 FF      lea d, [bp + -31] ; $opcode
2277   1112 D7            push a
2278   1113 DA            push d
2279   1114 26 00 00      mov b, $0
2280   1117 E7            pop d
2281   1118 5A            add d, b
2282   1119 E4            pop a
2283   111A DA            push d
2284   111B 26 00 00      mov b, $0
2285   111E E7            pop d
2286   111F FD 3E         mov [d], bl
2287   1121             ;; prog = code_line; 
2288   1121 3B 3A 3E      mov d, _prog ; $prog
2289   1124 DA            push d
2290   1125 FA A1 FF      lea d, [bp + -95] ; $code_line
2291   1128 2D            mov b, d
2292   1129 E7            pop d
2293   112A FD 43         mov [d], b
2294   112C             ;; if(!has_operands){ 
2295   112C             _if67_cond:
2296   112C FA 77 FF      lea d, [bp + -137] ; $has_operands
2297   112F 32            mov bl, [d]
2298   1130 A7 00         mov bh, 0
2299   1132 C0 00 00      cmp b, 0
2300   1135 FD 71         seq ; !
2301   1137 C0 00 00      cmp b, 0
2302   113A C6 AC 12      je _if67_else
2303   113D             _if67_true:
2304   113D             ;; get(); 
2305   113D 07 AE 25      call get
2306   1140             ;; strcpy(opcode, token); 
2307   1140 3B 3C 3E      mov d, _token_data ; $token
2308   1143 2D            mov b, d
2309   1144 FD AB         swp b
2310   1146 D8            push b
2311   1147 FA E1 FF      lea d, [bp + -31] ; $opcode
2312   114A 2D            mov b, d
2313   114B FD AB         swp b
2314   114D D8            push b
2315   114E 07 C9 36      call strcpy
2316   1151 51 04 00      add sp, 4
2317   1154             ;; get();  
2318   1154 07 AE 25      call get
2319   1157             ;; if(toktype == END){ 
2320   1157             _if68_cond:
2321   1157 3B 38 3E      mov d, _toktype ; $toktype
2322   115A 2A            mov b, [d]
2323   115B             ; START RELATIONAL
2324   115B D7            push a
2325   115C 11            mov a, b
2326   115D 26 07 00      mov b, 7; END
2327   1160 B0            cmp a, b
2328   1161 FD 71         seq ; ==
2329   1163 E4            pop a
2330   1164             ; END RELATIONAL
2331   1164 C0 00 00      cmp b, 0
2332   1167 C6 80 11      je _if68_else
2333   116A             _if68_true:
2334   116A             ;; strcat(opcode, " ."); 
2335   116A 26 9D 40      mov b, __s24 ; " ."
2336   116D FD AB         swp b
2337   116F D8            push b
2338   1170 FA E1 FF      lea d, [bp + -31] ; $opcode
2339   1173 2D            mov b, d
2340   1174 FD AB         swp b
2341   1176 D8            push b
2342   1177 07 95 37      call strcat
2343   117A 51 04 00      add sp, 4
2344   117D 0A DA 11      jmp _if68_exit
2345   1180             _if68_else:
2346   1180             ;; strcat(opcode, " "); 
2347   1180 26 A0 40      mov b, __s25 ; " "
2348   1183 FD AB         swp b
2349   1185 D8            push b
2350   1186 FA E1 FF      lea d, [bp + -31] ; $opcode
2351   1189 2D            mov b, d
2352   118A FD AB         swp b
2353   118C D8            push b
2354   118D 07 95 37      call strcat
2355   1190 51 04 00      add sp, 4
2356   1193             ;; strcat(opcode, token); 
2357   1193 3B 3C 3E      mov d, _token_data ; $token
2358   1196 2D            mov b, d
2359   1197 FD AB         swp b
2360   1199 D8            push b
2361   119A FA E1 FF      lea d, [bp + -31] ; $opcode
2362   119D 2D            mov b, d
2363   119E FD AB         swp b
2364   11A0 D8            push b
2365   11A1 07 95 37      call strcat
2366   11A4 51 04 00      add sp, 4
2367   11A7             ;; for(;;){ 
2368   11A7             _for69_init:
2369   11A7             _for69_cond:
2370   11A7             _for69_block:
2371   11A7             ;; get(); 
2372   11A7 07 AE 25      call get
2373   11AA             ;; if(toktype == END) break; 
2374   11AA             _if70_cond:
2375   11AA 3B 38 3E      mov d, _toktype ; $toktype
2376   11AD 2A            mov b, [d]
2377   11AE             ; START RELATIONAL
2378   11AE D7            push a
2379   11AF 11            mov a, b
2380   11B0 26 07 00      mov b, 7; END
2381   11B3 B0            cmp a, b
2382   11B4 FD 71         seq ; ==
2383   11B6 E4            pop a
2384   11B7             ; END RELATIONAL
2385   11B7 C0 00 00      cmp b, 0
2386   11BA C6 C3 11      je _if70_exit
2387   11BD             _if70_true:
2388   11BD             ;; break; 
2389   11BD 0A DA 11      jmp _for69_exit ; for break
2390   11C0 0A C3 11      jmp _if70_exit
2391   11C3             _if70_exit:
2392   11C3             ;; strcat(opcode, token); 
2393   11C3 3B 3C 3E      mov d, _token_data ; $token
2394   11C6 2D            mov b, d
2395   11C7 FD AB         swp b
2396   11C9 D8            push b
2397   11CA FA E1 FF      lea d, [bp + -31] ; $opcode
2398   11CD 2D            mov b, d
2399   11CE FD AB         swp b
2400   11D0 D8            push b
2401   11D1 07 95 37      call strcat
2402   11D4 51 04 00      add sp, 4
2403   11D7             _for69_update:
2404   11D7 0A A7 11      jmp _for69_cond
2405   11DA             _for69_exit:
2406   11DA             _if68_exit:
2407   11DA             ;; op = search_opcode(opcode); 
2408   11DA FA 87 FF      lea d, [bp + -121] ; $op
2409   11DD DA            push d
2410   11DE FA E1 FF      lea d, [bp + -31] ; $opcode
2411   11E1 2D            mov b, d
2412   11E2 FD AB         swp b
2413   11E4 D8            push b
2414   11E5 07 B0 1F      call search_opcode
2415   11E8 51 02 00      add sp, 2
2416   11EB E7            pop d
2417   11EC FD 28         mov si, b
2418   11EE FD 50         mov di, d
2419   11F0 38 1A 00      mov c, 26
2420   11F3 FD F5         rep movsb
2421   11F5             ;; instr_len = 1; 
2422   11F5 FA 85 FF      lea d, [bp + -123] ; $instr_len
2423   11F8 DA            push d
2424   11F9 26 01 00      mov b, $1
2425   11FC E7            pop d
2426   11FD FD 43         mov [d], b
2427   11FF             ;; if(op.opcode_type){ 
2428   11FF             _if71_cond:
2429   11FF FA 87 FF      lea d, [bp + -121] ; $op
2430   1202 58 19 00      add d, 25
2431   1205 FD 14         clb
2432   1207 32            mov bl, [d]
2433   1208 A7 00         mov bh, 0
2434   120A C0 00 00      cmp b, 0
2435   120D C6 33 12      je _if71_exit
2436   1210             _if71_true:
2437   1210             ;; instr_len++; 
2438   1210 FA 85 FF      lea d, [bp + -123] ; $instr_len
2439   1213 2A            mov b, [d]
2440   1214 FD 79         mov g, b
2441   1216 FD 77         inc b
2442   1218 FA 85 FF      lea d, [bp + -123] ; $instr_len
2443   121B FD 43         mov [d], b
2444   121D FD 27         mov b, g
2445   121F             ;; emit_byte(0xFD, emit_override); 
2446   121F FA 05 00      lea d, [bp + 5] ; $emit_override
2447   1222 32            mov bl, [d]
2448   1223 A7 00         mov bh, 0
2449   1225 DD            push bl
2450   1226 26 FD 00      mov b, $fd
2451   1229 DD            push bl
2452   122A 07 8F 22      call emit_byte
2453   122D 51 02 00      add sp, 2
2454   1230 0A 33 12      jmp _if71_exit
2455   1233             _if71_exit:
2456   1233             ;; emit_byte(op.opcode, emit_override); 
2457   1233 FA 05 00      lea d, [bp + 5] ; $emit_override
2458   1236 32            mov bl, [d]
2459   1237 A7 00         mov bh, 0
2460   1239 DD            push bl
2461   123A FA 87 FF      lea d, [bp + -121] ; $op
2462   123D 58 18 00      add d, 24
2463   1240 FD 14         clb
2464   1242 32            mov bl, [d]
2465   1243 A7 00         mov bh, 0
2466   1245 DD            push bl
2467   1246 07 8F 22      call emit_byte
2468   1249 51 02 00      add sp, 2
2469   124C             ;; if(!emit_override){ 
2470   124C             _if72_cond:
2471   124C FA 05 00      lea d, [bp + 5] ; $emit_override
2472   124F 32            mov bl, [d]
2473   1250 A7 00         mov bh, 0
2474   1252 C0 00 00      cmp b, 0
2475   1255 FD 71         seq ; !
2476   1257 C0 00 00      cmp b, 0
2477   125A C6 A9 12      je _if72_exit
2478   125D             _if72_true:
2479   125D             ;; printx16(old_pc); print(" ("); printu(instr_len); print(") : "); 
2480   125D FA 78 FF      lea d, [bp + -136] ; $old_pc
2481   1260 2A            mov b, [d]
2482   1261 FD AB         swp b
2483   1263 D8            push b
2484   1264 07 BD 32      call printx16
2485   1267 51 02 00      add sp, 2
2486   126A             ;; print(" ("); printu(instr_len); print(") : "); 
2487   126A 26 00 41      mov b, __s28 ; " ("
2488   126D FD AB         swp b
2489   126F D8            push b
2490   1270 07 0C 36      call print
2491   1273 51 02 00      add sp, 2
2492   1276             ;; printu(instr_len); print(") : "); 
2493   1276 FA 85 FF      lea d, [bp + -123] ; $instr_len
2494   1279 2A            mov b, [d]
2495   127A FD AB         swp b
2496   127C D8            push b
2497   127D 07 33 35      call printu
2498   1280 51 02 00      add sp, 2
2499   1283             ;; print(") : "); 
2500   1283 26 03 41      mov b, __s29 ; ") : "
2501   1286 FD AB         swp b
2502   1288 D8            push b
2503   1289 07 0C 36      call print
2504   128C 51 02 00      add sp, 2
2505   128F             ;; print(code_line); putchar('\n'); 
2506   128F FA A1 FF      lea d, [bp + -95] ; $code_line
2507   1292 2D            mov b, d
2508   1293 FD AB         swp b
2509   1295 D8            push b
2510   1296 07 0C 36      call print
2511   1299 51 02 00      add sp, 2
2512   129C             ;; putchar('\n'); 
2513   129C 26 0A 00      mov b, $a
2514   129F DD            push bl
2515   12A0 07 FF 35      call putchar
2516   12A3 51 01 00      add sp, 1
2517   12A6 0A A9 12      jmp _if72_exit
2518   12A9             _if72_exit:
2519   12A9 0A 71 17      jmp _if67_exit
2520   12AC             _if67_else:
2521   12AC             ;; num_operands = 0; 
2522   12AC FA 83 FF      lea d, [bp + -125] ; $num_operands
2523   12AF DA            push d
2524   12B0 26 00 00      mov b, $0
2525   12B3 E7            pop d
2526   12B4 FD 43         mov [d], b
2527   12B6             ;; for(;;){ 
2528   12B6             _for73_init:
2529   12B6             _for73_cond:
2530   12B6             _for73_block:
2531   12B6             ;; get(); 
2532   12B6 07 AE 25      call get
2533   12B9             ;; if(toktype == END) break; 
2534   12B9             _if74_cond:
2535   12B9 3B 38 3E      mov d, _toktype ; $toktype
2536   12BC 2A            mov b, [d]
2537   12BD             ; START RELATIONAL
2538   12BD D7            push a
2539   12BE 11            mov a, b
2540   12BF 26 07 00      mov b, 7; END
2541   12C2 B0            cmp a, b
2542   12C3 FD 71         seq ; ==
2543   12C5 E4            pop a
2544   12C6             ; END RELATIONAL
2545   12C6 C0 00 00      cmp b, 0
2546   12C9 C6 D2 12      je _if74_exit
2547   12CC             _if74_true:
2548   12CC             ;; break; 
2549   12CC 0A 17 13      jmp _for73_exit ; for break
2550   12CF 0A D2 12      jmp _if74_exit
2551   12D2             _if74_exit:
2552   12D2             ;; if(toktype == INTEGER_CONST || label_exists(token) != -1) num_operands++; 
2553   12D2             _if75_cond:
2554   12D2 3B 38 3E      mov d, _toktype ; $toktype
2555   12D5 2A            mov b, [d]
2556   12D6             ; START RELATIONAL
2557   12D6 D7            push a
2558   12D7 11            mov a, b
2559   12D8 26 05 00      mov b, 5; INTEGER_CONST
2560   12DB B0            cmp a, b
2561   12DC FD 71         seq ; ==
2562   12DE E4            pop a
2563   12DF             ; END RELATIONAL
2564   12DF D7            push a
2565   12E0 11            mov a, b
2566   12E1 3B 3C 3E      mov d, _token_data ; $token
2567   12E4 2D            mov b, d
2568   12E5 FD AB         swp b
2569   12E7 D8            push b
2570   12E8 07 C5 1E      call label_exists
2571   12EB 51 02 00      add sp, 2
2572   12EE             ; START RELATIONAL
2573   12EE D7            push a
2574   12EF 11            mov a, b
2575   12F0 26 01 00      mov b, $1
2576   12F3 FD 97         neg b
2577   12F5 B0            cmp a, b
2578   12F6 FD 72         sneq ; !=
2579   12F8 E4            pop a
2580   12F9             ; END RELATIONAL
2581   12F9 FD A8         sor a, b ; ||
2582   12FB E4            pop a
2583   12FC C0 00 00      cmp b, 0
2584   12FF C6 14 13      je _if75_exit
2585   1302             _if75_true:
2586   1302             ;; num_operands++; 
2587   1302 FA 83 FF      lea d, [bp + -125] ; $num_operands
2588   1305 2A            mov b, [d]
2589   1306 FD 79         mov g, b
2590   1308 FD 77         inc b
2591   130A FA 83 FF      lea d, [bp + -125] ; $num_operands
2592   130D FD 43         mov [d], b
2593   130F FD 27         mov b, g
2594   1311 0A 14 13      jmp _if75_exit
2595   1314             _if75_exit:
2596   1314             _for73_update:
2597   1314 0A B6 12      jmp _for73_cond
2598   1317             _for73_exit:
2599   1317             ;; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
2600   1317             _if76_cond:
2601   1317 FA 83 FF      lea d, [bp + -125] ; $num_operands
2602   131A 2A            mov b, [d]
2603   131B             ; START RELATIONAL
2604   131B D7            push a
2605   131C 11            mov a, b
2606   131D 26 02 00      mov b, $2
2607   1320 B0            cmp a, b
2608   1321 FD 7F         sgt ; >
2609   1323 E4            pop a
2610   1324             ; END RELATIONAL
2611   1324 C0 00 00      cmp b, 0
2612   1327 C6 39 13      je _if76_exit
2613   132A             _if76_true:
2614   132A             ;; error("Maximum number of operands per instruction is 2."); 
2615   132A 26 A2 40      mov b, __s26 ; "Maximum number of operands per instruction is 2."
2616   132D FD AB         swp b
2617   132F D8            push b
2618   1330 07 1F 31      call error
2619   1333 51 02 00      add sp, 2
2620   1336 0A 39 13      jmp _if76_exit
2621   1339             _if76_exit:
2622   1339             ;; num_operandsexp = exp(2, num_operands); 
2623   1339 FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
2624   133C DA            push d
2625   133D FA 83 FF      lea d, [bp + -125] ; $num_operands
2626   1340 2A            mov b, [d]
2627   1341 FD AB         swp b
2628   1343 D8            push b
2629   1344 26 02 00      mov b, $2
2630   1347 FD AB         swp b
2631   1349 D8            push b
2632   134A 07 72 36      call exp
2633   134D 51 04 00      add sp, 4
2634   1350 E7            pop d
2635   1351 FD 43         mov [d], b
2636   1353             ;; for(i = 0; i < num_operandsexp; i++){ 
2637   1353             _for77_init:
2638   1353 FA 7F FF      lea d, [bp + -129] ; $i
2639   1356 DA            push d
2640   1357 26 00 00      mov b, $0
2641   135A E7            pop d
2642   135B FD 43         mov [d], b
2643   135D             _for77_cond:
2644   135D FA 7F FF      lea d, [bp + -129] ; $i
2645   1360 2A            mov b, [d]
2646   1361             ; START RELATIONAL
2647   1361 D7            push a
2648   1362 11            mov a, b
2649   1363 FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
2650   1366 2A            mov b, [d]
2651   1367 B0            cmp a, b
2652   1368 FD 73         slt ; < 
2653   136A E4            pop a
2654   136B             ; END RELATIONAL
2655   136B C0 00 00      cmp b, 0
2656   136E C6 71 17      je _for77_exit
2657   1371             _for77_block:
2658   1371             ;; prog = code_line; 
2659   1371 3B 3A 3E      mov d, _prog ; $prog
2660   1374 DA            push d
2661   1375 FA A1 FF      lea d, [bp + -95] ; $code_line
2662   1378 2D            mov b, d
2663   1379 E7            pop d
2664   137A FD 43         mov [d], b
2665   137C             ;; get(); 
2666   137C 07 AE 25      call get
2667   137F             ;; strcpy(opcode, token); 
2668   137F 3B 3C 3E      mov d, _token_data ; $token
2669   1382 2D            mov b, d
2670   1383 FD AB         swp b
2671   1385 D8            push b
2672   1386 FA E1 FF      lea d, [bp + -31] ; $opcode
2673   1389 2D            mov b, d
2674   138A FD AB         swp b
2675   138C D8            push b
2676   138D 07 C9 36      call strcpy
2677   1390 51 04 00      add sp, 4
2678   1393             ;; strcat(opcode, " "); 
2679   1393 26 A0 40      mov b, __s25 ; " "
2680   1396 FD AB         swp b
2681   1398 D8            push b
2682   1399 FA E1 FF      lea d, [bp + -31] ; $opcode
2683   139C 2D            mov b, d
2684   139D FD AB         swp b
2685   139F D8            push b
2686   13A0 07 95 37      call strcat
2687   13A3 51 04 00      add sp, 4
2688   13A6             ;; j = 0; 
2689   13A6 FA 7D FF      lea d, [bp + -131] ; $j
2690   13A9 DA            push d
2691   13AA 26 00 00      mov b, $0
2692   13AD E7            pop d
2693   13AE FD 43         mov [d], b
2694   13B0             ;; for(;;){ 
2695   13B0             _for78_init:
2696   13B0             _for78_cond:
2697   13B0             _for78_block:
2698   13B0             ;; get(); 
2699   13B0 07 AE 25      call get
2700   13B3             ;; if(toktype == END) break; 
2701   13B3             _if79_cond:
2702   13B3 3B 38 3E      mov d, _toktype ; $toktype
2703   13B6 2A            mov b, [d]
2704   13B7             ; START RELATIONAL
2705   13B7 D7            push a
2706   13B8 11            mov a, b
2707   13B9 26 07 00      mov b, 7; END
2708   13BC B0            cmp a, b
2709   13BD FD 71         seq ; ==
2710   13BF E4            pop a
2711   13C0             ; END RELATIONAL
2712   13C0 C0 00 00      cmp b, 0
2713   13C3 C6 CC 13      je _if79_exit
2714   13C6             _if79_true:
2715   13C6             ;; break; 
2716   13C6 0A 8D 14      jmp _for78_exit ; for break
2717   13C9 0A CC 13      jmp _if79_exit
2718   13CC             _if79_exit:
2719   13CC             ;; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
2720   13CC             _if80_cond:
2721   13CC 3B 38 3E      mov d, _toktype ; $toktype
2722   13CF 2A            mov b, [d]
2723   13D0             ; START RELATIONAL
2724   13D0 D7            push a
2725   13D1 11            mov a, b
2726   13D2 26 05 00      mov b, 5; INTEGER_CONST
2727   13D5 B0            cmp a, b
2728   13D6 FD 71         seq ; ==
2729   13D8 E4            pop a
2730   13D9             ; END RELATIONAL
2731   13D9 D7            push a
2732   13DA 11            mov a, b
2733   13DB 3B 3C 3E      mov d, _token_data ; $token
2734   13DE 2D            mov b, d
2735   13DF FD AB         swp b
2736   13E1 D8            push b
2737   13E2 07 C5 1E      call label_exists
2738   13E5 51 02 00      add sp, 2
2739   13E8             ; START RELATIONAL
2740   13E8 D7            push a
2741   13E9 11            mov a, b
2742   13EA 26 01 00      mov b, $1
2743   13ED FD 97         neg b
2744   13EF B0            cmp a, b
2745   13F0 FD 72         sneq ; !=
2746   13F2 E4            pop a
2747   13F3             ; END RELATIONAL
2748   13F3 FD A8         sor a, b ; ||
2749   13F5 E4            pop a
2750   13F6 C0 00 00      cmp b, 0
2751   13F9 C6 76 14      je _if80_else
2752   13FC             _if80_true:
2753   13FC             ;; strcat(opcode, symbols[i*2+j]); 
2754   13FC 3B 9E 3F      mov d, _symbols_data ; $symbols
2755   13FF D7            push a
2756   1400 DA            push d
2757   1401 FA 7F FF      lea d, [bp + -129] ; $i
2758   1404 2A            mov b, [d]
2759   1405             ; START FACTORS
2760   1405 D7            push a
2761   1406 11            mov a, b
2762   1407 26 02 00      mov b, $2
2763   140A AC            mul a, b ; *
2764   140B 11            mov a, b
2765   140C 27            mov b, a
2766   140D E4            pop a
2767   140E             ; END FACTORS
2768   140E             ; START TERMS
2769   140E D7            push a
2770   140F 11            mov a, b
2771   1410 FA 7D FF      lea d, [bp + -131] ; $j
2772   1413 2A            mov b, [d]
2773   1414 54            add a, b
2774   1415 27            mov b, a
2775   1416 E4            pop a
2776   1417             ; END TERMS
2777   1417 E7            pop d
2778   1418 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2779   141C E4            pop a
2780   141D 2A            mov b, [d]
2781   141E FD AB         swp b
2782   1420 D8            push b
2783   1421 FA E1 FF      lea d, [bp + -31] ; $opcode
2784   1424 2D            mov b, d
2785   1425 FD AB         swp b
2786   1427 D8            push b
2787   1428 07 95 37      call strcat
2788   142B 51 04 00      add sp, 4
2789   142E             ;; operand_types[j] = *symbols[i*2+j]; 
2790   142E FA 7A FF      lea d, [bp + -134] ; $operand_types
2791   1431 D7            push a
2792   1432 DA            push d
2793   1433 FA 7D FF      lea d, [bp + -131] ; $j
2794   1436 2A            mov b, [d]
2795   1437 E7            pop d
2796   1438 5A            add d, b
2797   1439 E4            pop a
2798   143A DA            push d
2799   143B 3B 9E 3F      mov d, _symbols_data ; $symbols
2800   143E D7            push a
2801   143F DA            push d
2802   1440 FA 7F FF      lea d, [bp + -129] ; $i
2803   1443 2A            mov b, [d]
2804   1444             ; START FACTORS
2805   1444 D7            push a
2806   1445 11            mov a, b
2807   1446 26 02 00      mov b, $2
2808   1449 AC            mul a, b ; *
2809   144A 11            mov a, b
2810   144B 27            mov b, a
2811   144C E4            pop a
2812   144D             ; END FACTORS
2813   144D             ; START TERMS
2814   144D D7            push a
2815   144E 11            mov a, b
2816   144F FA 7D FF      lea d, [bp + -131] ; $j
2817   1452 2A            mov b, [d]
2818   1453 54            add a, b
2819   1454 27            mov b, a
2820   1455 E4            pop a
2821   1456             ; END TERMS
2822   1456 E7            pop d
2823   1457 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2824   145B E4            pop a
2825   145C 2A            mov b, [d]
2826   145D 74            mov d, b
2827   145E 32            mov bl, [d]
2828   145F A7 00         mov bh, 0
2829   1461 E7            pop d
2830   1462 FD 3E         mov [d], bl
2831   1464             ;; j++; 
2832   1464 FA 7D FF      lea d, [bp + -131] ; $j
2833   1467 2A            mov b, [d]
2834   1468 FD 79         mov g, b
2835   146A FD 77         inc b
2836   146C FA 7D FF      lea d, [bp + -131] ; $j
2837   146F FD 43         mov [d], b
2838   1471 FD 27         mov b, g
2839   1473 0A 8A 14      jmp _if80_exit
2840   1476             _if80_else:
2841   1476             ;; strcat(opcode, token); 
2842   1476 3B 3C 3E      mov d, _token_data ; $token
2843   1479 2D            mov b, d
2844   147A FD AB         swp b
2845   147C D8            push b
2846   147D FA E1 FF      lea d, [bp + -31] ; $opcode
2847   1480 2D            mov b, d
2848   1481 FD AB         swp b
2849   1483 D8            push b
2850   1484 07 95 37      call strcat
2851   1487 51 04 00      add sp, 4
2852   148A             _if80_exit:
2853   148A             _for78_update:
2854   148A 0A B0 13      jmp _for78_cond
2855   148D             _for78_exit:
2856   148D             ;; op = search_opcode(opcode); 
2857   148D FA 87 FF      lea d, [bp + -121] ; $op
2858   1490 DA            push d
2859   1491 FA E1 FF      lea d, [bp + -31] ; $opcode
2860   1494 2D            mov b, d
2861   1495 FD AB         swp b
2862   1497 D8            push b
2863   1498 07 B0 1F      call search_opcode
2864   149B 51 02 00      add sp, 2
2865   149E E7            pop d
2866   149F FD 28         mov si, b
2867   14A1 FD 50         mov di, d
2868   14A3 38 1A 00      mov c, 26
2869   14A6 FD F5         rep movsb
2870   14A8             ;; if(op.name[0] == '\0') continue; 
2871   14A8             _if81_cond:
2872   14A8 FA 87 FF      lea d, [bp + -121] ; $op
2873   14AB 58 00 00      add d, 0
2874   14AE FD 14         clb
2875   14B0 D7            push a
2876   14B1 DA            push d
2877   14B2 26 00 00      mov b, $0
2878   14B5 E7            pop d
2879   14B6 5A            add d, b
2880   14B7 E4            pop a
2881   14B8 32            mov bl, [d]
2882   14B9 A7 00         mov bh, 0
2883   14BB             ; START RELATIONAL
2884   14BB D7            push a
2885   14BC 11            mov a, b
2886   14BD 26 00 00      mov b, $0
2887   14C0 B0            cmp a, b
2888   14C1 FD 71         seq ; ==
2889   14C3 E4            pop a
2890   14C4             ; END RELATIONAL
2891   14C4 C0 00 00      cmp b, 0
2892   14C7 C6 D0 14      je _if81_exit
2893   14CA             _if81_true:
2894   14CA             ;; continue; 
2895   14CA 0A 5F 17      jmp _for77_update ; for continue
2896   14CD 0A D0 14      jmp _if81_exit
2897   14D0             _if81_exit:
2898   14D0             ;; instr_len = 1; 
2899   14D0 FA 85 FF      lea d, [bp + -123] ; $instr_len
2900   14D3 DA            push d
2901   14D4 26 01 00      mov b, $1
2902   14D7 E7            pop d
2903   14D8 FD 43         mov [d], b
2904   14DA             ;; if(op.opcode_type){ 
2905   14DA             _if82_cond:
2906   14DA FA 87 FF      lea d, [bp + -121] ; $op
2907   14DD 58 19 00      add d, 25
2908   14E0 FD 14         clb
2909   14E2 32            mov bl, [d]
2910   14E3 A7 00         mov bh, 0
2911   14E5 C0 00 00      cmp b, 0
2912   14E8 C6 0E 15      je _if82_exit
2913   14EB             _if82_true:
2914   14EB             ;; emit_byte(0xFD, emit_override); 
2915   14EB FA 05 00      lea d, [bp + 5] ; $emit_override
2916   14EE 32            mov bl, [d]
2917   14EF A7 00         mov bh, 0
2918   14F1 DD            push bl
2919   14F2 26 FD 00      mov b, $fd
2920   14F5 DD            push bl
2921   14F6 07 8F 22      call emit_byte
2922   14F9 51 02 00      add sp, 2
2923   14FC             ;; instr_len++; 
2924   14FC FA 85 FF      lea d, [bp + -123] ; $instr_len
2925   14FF 2A            mov b, [d]
2926   1500 FD 79         mov g, b
2927   1502 FD 77         inc b
2928   1504 FA 85 FF      lea d, [bp + -123] ; $instr_len
2929   1507 FD 43         mov [d], b
2930   1509 FD 27         mov b, g
2931   150B 0A 0E 15      jmp _if82_exit
2932   150E             _if82_exit:
2933   150E             ;; emit_byte(op.opcode, emit_override); 
2934   150E FA 05 00      lea d, [bp + 5] ; $emit_override
2935   1511 32            mov bl, [d]
2936   1512 A7 00         mov bh, 0
2937   1514 DD            push bl
2938   1515 FA 87 FF      lea d, [bp + -121] ; $op
2939   1518 58 18 00      add d, 24
2940   151B FD 14         clb
2941   151D 32            mov bl, [d]
2942   151E A7 00         mov bh, 0
2943   1520 DD            push bl
2944   1521 07 8F 22      call emit_byte
2945   1524 51 02 00      add sp, 2
2946   1527             ;; prog = code_line; 
2947   1527 3B 3A 3E      mov d, _prog ; $prog
2948   152A DA            push d
2949   152B FA A1 FF      lea d, [bp + -95] ; $code_line
2950   152E 2D            mov b, d
2951   152F E7            pop d
2952   1530 FD 43         mov [d], b
2953   1532             ;; j = 0; 
2954   1532 FA 7D FF      lea d, [bp + -131] ; $j
2955   1535 DA            push d
2956   1536 26 00 00      mov b, $0
2957   1539 E7            pop d
2958   153A FD 43         mov [d], b
2959   153C             ;; get(); 
2960   153C 07 AE 25      call get
2961   153F             ;; for(;;){ 
2962   153F             _for83_init:
2963   153F             _for83_cond:
2964   153F             _for83_block:
2965   153F             ;; get(); 
2966   153F 07 AE 25      call get
2967   1542             ;; if(toktype == END) break; 
2968   1542             _if84_cond:
2969   1542 3B 38 3E      mov d, _toktype ; $toktype
2970   1545 2A            mov b, [d]
2971   1546             ; START RELATIONAL
2972   1546 D7            push a
2973   1547 11            mov a, b
2974   1548 26 07 00      mov b, 7; END
2975   154B B0            cmp a, b
2976   154C FD 71         seq ; ==
2977   154E E4            pop a
2978   154F             ; END RELATIONAL
2979   154F C0 00 00      cmp b, 0
2980   1552 C6 5B 15      je _if84_exit
2981   1555             _if84_true:
2982   1555             ;; break; 
2983   1555 0A FF 16      jmp _for83_exit ; for break
2984   1558 0A 5B 15      jmp _if84_exit
2985   155B             _if84_exit:
2986   155B             ;; if(toktype == IDENTIFIER){ 
2987   155B             _if85_cond:
2988   155B 3B 38 3E      mov d, _toktype ; $toktype
2989   155E 2A            mov b, [d]
2990   155F             ; START RELATIONAL
2991   155F D7            push a
2992   1560 11            mov a, b
2993   1561 26 06 00      mov b, 6; IDENTIFIER
2994   1564 B0            cmp a, b
2995   1565 FD 71         seq ; ==
2996   1567 E4            pop a
2997   1568             ; END RELATIONAL
2998   1568 C0 00 00      cmp b, 0
2999   156B C6 4D 16      je _if85_else
3000   156E             _if85_true:
3001   156E             ;; if(label_exists(token) != -1){ 
3002   156E             _if86_cond:
3003   156E 3B 3C 3E      mov d, _token_data ; $token
3004   1571 2D            mov b, d
3005   1572 FD AB         swp b
3006   1574 D8            push b
3007   1575 07 C5 1E      call label_exists
3008   1578 51 02 00      add sp, 2
3009   157B             ; START RELATIONAL
3010   157B D7            push a
3011   157C 11            mov a, b
3012   157D 26 01 00      mov b, $1
3013   1580 FD 97         neg b
3014   1582 B0            cmp a, b
3015   1583 FD 72         sneq ; !=
3016   1585 E4            pop a
3017   1586             ; END RELATIONAL
3018   1586 C0 00 00      cmp b, 0
3019   1589 C6 1C 16      je _if86_else
3020   158C             _if86_true:
3021   158C             ;; if(operand_types[j] == '#'){ 
3022   158C             _if87_cond:
3023   158C FA 7A FF      lea d, [bp + -134] ; $operand_types
3024   158F D7            push a
3025   1590 DA            push d
3026   1591 FA 7D FF      lea d, [bp + -131] ; $j
3027   1594 2A            mov b, [d]
3028   1595 E7            pop d
3029   1596 5A            add d, b
3030   1597 E4            pop a
3031   1598 32            mov bl, [d]
3032   1599 A7 00         mov bh, 0
3033   159B             ; START RELATIONAL
3034   159B D7            push a
3035   159C 11            mov a, b
3036   159D 26 23 00      mov b, $23
3037   15A0 B0            cmp a, b
3038   15A1 FD 71         seq ; ==
3039   15A3 E4            pop a
3040   15A4             ; END RELATIONAL
3041   15A4 C0 00 00      cmp b, 0
3042   15A7 C6 B9 15      je _if87_else
3043   15AA             _if87_true:
3044   15AA             ;; error("8bit operand expected but 16bit label given."); 
3045   15AA 26 D3 40      mov b, __s27 ; "8bit operand expected but 16bit label given."
3046   15AD FD AB         swp b
3047   15AF D8            push b
3048   15B0 07 1F 31      call error
3049   15B3 51 02 00      add sp, 2
3050   15B6 0A 0A 16      jmp _if87_exit
3051   15B9             _if87_else:
3052   15B9             ;; if(operand_types[j] == '@'){ 
3053   15B9             _if88_cond:
3054   15B9 FA 7A FF      lea d, [bp + -134] ; $operand_types
3055   15BC D7            push a
3056   15BD DA            push d
3057   15BE FA 7D FF      lea d, [bp + -131] ; $j
3058   15C1 2A            mov b, [d]
3059   15C2 E7            pop d
3060   15C3 5A            add d, b
3061   15C4 E4            pop a
3062   15C5 32            mov bl, [d]
3063   15C6 A7 00         mov bh, 0
3064   15C8             ; START RELATIONAL
3065   15C8 D7            push a
3066   15C9 11            mov a, b
3067   15CA 26 40 00      mov b, $40
3068   15CD B0            cmp a, b
3069   15CE FD 71         seq ; ==
3070   15D0 E4            pop a
3071   15D1             ; END RELATIONAL
3072   15D1 C0 00 00      cmp b, 0
3073   15D4 C6 0A 16      je _if88_exit
3074   15D7             _if88_true:
3075   15D7             ;; emit_word(get_label_addr(token), emit_override); 
3076   15D7 FA 05 00      lea d, [bp + 5] ; $emit_override
3077   15DA 32            mov bl, [d]
3078   15DB A7 00         mov bh, 0
3079   15DD DD            push bl
3080   15DE 3B 3C 3E      mov d, _token_data ; $token
3081   15E1 2D            mov b, d
3082   15E2 FD AB         swp b
3083   15E4 D8            push b
3084   15E5 07 31 1E      call get_label_addr
3085   15E8 51 02 00      add sp, 2
3086   15EB FD AB         swp b
3087   15ED D8            push b
3088   15EE 07 C0 22      call emit_word
3089   15F1 51 03 00      add sp, 3
3090   15F4             ;; instr_len = instr_len + 2; 
3091   15F4 FA 85 FF      lea d, [bp + -123] ; $instr_len
3092   15F7 DA            push d
3093   15F8 FA 85 FF      lea d, [bp + -123] ; $instr_len
3094   15FB 2A            mov b, [d]
3095   15FC             ; START TERMS
3096   15FC D7            push a
3097   15FD 11            mov a, b
3098   15FE 26 02 00      mov b, $2
3099   1601 54            add a, b
3100   1602 27            mov b, a
3101   1603 E4            pop a
3102   1604             ; END TERMS
3103   1604 E7            pop d
3104   1605 FD 43         mov [d], b
3105   1607 0A 0A 16      jmp _if88_exit
3106   160A             _if88_exit:
3107   160A             _if87_exit:
3108   160A             ;; j++; 
3109   160A FA 7D FF      lea d, [bp + -131] ; $j
3110   160D 2A            mov b, [d]
3111   160E FD 79         mov g, b
3112   1610 FD 77         inc b
3113   1612 FA 7D FF      lea d, [bp + -131] ; $j
3114   1615 FD 43         mov [d], b
3115   1617 FD 27         mov b, g
3116   1619 0A 4A 16      jmp _if86_exit
3117   161C             _if86_else:
3118   161C             ;; if(!is_reserved(token)){ 
3119   161C             _if89_cond:
3120   161C 3B 3C 3E      mov d, _token_data ; $token
3121   161F 2D            mov b, d
3122   1620 FD AB         swp b
3123   1622 D8            push b
3124   1623 07 6F 1A      call is_reserved
3125   1626 51 02 00      add sp, 2
3126   1629 C0 00 00      cmp b, 0
3127   162C FD 71         seq ; !
3128   162E C0 00 00      cmp b, 0
3129   1631 C6 4A 16      je _if89_exit
3130   1634             _if89_true:
3131   1634             ;; error_s("Undeclared label: ", token); 
3132   1634 3B 3C 3E      mov d, _token_data ; $token
3133   1637 2D            mov b, d
3134   1638 FD AB         swp b
3135   163A D8            push b
3136   163B 26 08 41      mov b, __s30 ; "Undeclared label: "
3137   163E FD AB         swp b
3138   1640 D8            push b
3139   1641 07 4C 31      call error_s
3140   1644 51 04 00      add sp, 4
3141   1647 0A 4A 16      jmp _if89_exit
3142   164A             _if89_exit:
3143   164A             _if86_exit:
3144   164A 0A FC 16      jmp _if85_exit
3145   164D             _if85_else:
3146   164D             ;; if(toktype == INTEGER_CONST){ 
3147   164D             _if90_cond:
3148   164D 3B 38 3E      mov d, _toktype ; $toktype
3149   1650 2A            mov b, [d]
3150   1651             ; START RELATIONAL
3151   1651 D7            push a
3152   1652 11            mov a, b
3153   1653 26 05 00      mov b, 5; INTEGER_CONST
3154   1656 B0            cmp a, b
3155   1657 FD 71         seq ; ==
3156   1659 E4            pop a
3157   165A             ; END RELATIONAL
3158   165A C0 00 00      cmp b, 0
3159   165D C6 FC 16      je _if90_exit
3160   1660             _if90_true:
3161   1660             ;; if(operand_types[j] == '#'){ 
3162   1660             _if91_cond:
3163   1660 FA 7A FF      lea d, [bp + -134] ; $operand_types
3164   1663 D7            push a
3165   1664 DA            push d
3166   1665 FA 7D FF      lea d, [bp + -131] ; $j
3167   1668 2A            mov b, [d]
3168   1669 E7            pop d
3169   166A 5A            add d, b
3170   166B E4            pop a
3171   166C 32            mov bl, [d]
3172   166D A7 00         mov bh, 0
3173   166F             ; START RELATIONAL
3174   166F D7            push a
3175   1670 11            mov a, b
3176   1671 26 23 00      mov b, $23
3177   1674 B0            cmp a, b
3178   1675 FD 71         seq ; ==
3179   1677 E4            pop a
3180   1678             ; END RELATIONAL
3181   1678 C0 00 00      cmp b, 0
3182   167B C6 A2 16      je _if91_else
3183   167E             _if91_true:
3184   167E             ;; emit_byte(int_const, emit_override); 
3185   167E FA 05 00      lea d, [bp + 5] ; $emit_override
3186   1681 32            mov bl, [d]
3187   1682 A7 00         mov bh, 0
3188   1684 DD            push bl
3189   1685 3B 7C 3F      mov d, _int_const ; $int_const
3190   1688 2A            mov b, [d]
3191   1689 DD            push bl
3192   168A 07 8F 22      call emit_byte
3193   168D 51 02 00      add sp, 2
3194   1690             ;; instr_len++; 
3195   1690 FA 85 FF      lea d, [bp + -123] ; $instr_len
3196   1693 2A            mov b, [d]
3197   1694 FD 79         mov g, b
3198   1696 FD 77         inc b
3199   1698 FA 85 FF      lea d, [bp + -123] ; $instr_len
3200   169B FD 43         mov [d], b
3201   169D FD 27         mov b, g
3202   169F 0A EA 16      jmp _if91_exit
3203   16A2             _if91_else:
3204   16A2             ;; if(operand_types[j] == '@'){ 
3205   16A2             _if92_cond:
3206   16A2 FA 7A FF      lea d, [bp + -134] ; $operand_types
3207   16A5 D7            push a
3208   16A6 DA            push d
3209   16A7 FA 7D FF      lea d, [bp + -131] ; $j
3210   16AA 2A            mov b, [d]
3211   16AB E7            pop d
3212   16AC 5A            add d, b
3213   16AD E4            pop a
3214   16AE 32            mov bl, [d]
3215   16AF A7 00         mov bh, 0
3216   16B1             ; START RELATIONAL
3217   16B1 D7            push a
3218   16B2 11            mov a, b
3219   16B3 26 40 00      mov b, $40
3220   16B6 B0            cmp a, b
3221   16B7 FD 71         seq ; ==
3222   16B9 E4            pop a
3223   16BA             ; END RELATIONAL
3224   16BA C0 00 00      cmp b, 0
3225   16BD C6 EA 16      je _if92_exit
3226   16C0             _if92_true:
3227   16C0             ;; emit_word(int_const, emit_override); 
3228   16C0 FA 05 00      lea d, [bp + 5] ; $emit_override
3229   16C3 32            mov bl, [d]
3230   16C4 A7 00         mov bh, 0
3231   16C6 DD            push bl
3232   16C7 3B 7C 3F      mov d, _int_const ; $int_const
3233   16CA 2A            mov b, [d]
3234   16CB FD AB         swp b
3235   16CD D8            push b
3236   16CE 07 C0 22      call emit_word
3237   16D1 51 03 00      add sp, 3
3238   16D4             ;; instr_len = instr_len + 2; 
3239   16D4 FA 85 FF      lea d, [bp + -123] ; $instr_len
3240   16D7 DA            push d
3241   16D8 FA 85 FF      lea d, [bp + -123] ; $instr_len
3242   16DB 2A            mov b, [d]
3243   16DC             ; START TERMS
3244   16DC D7            push a
3245   16DD 11            mov a, b
3246   16DE 26 02 00      mov b, $2
3247   16E1 54            add a, b
3248   16E2 27            mov b, a
3249   16E3 E4            pop a
3250   16E4             ; END TERMS
3251   16E4 E7            pop d
3252   16E5 FD 43         mov [d], b
3253   16E7 0A EA 16      jmp _if92_exit
3254   16EA             _if92_exit:
3255   16EA             _if91_exit:
3256   16EA             ;; j++; 
3257   16EA FA 7D FF      lea d, [bp + -131] ; $j
3258   16ED 2A            mov b, [d]
3259   16EE FD 79         mov g, b
3260   16F0 FD 77         inc b
3261   16F2 FA 7D FF      lea d, [bp + -131] ; $j
3262   16F5 FD 43         mov [d], b
3263   16F7 FD 27         mov b, g
3264   16F9 0A FC 16      jmp _if90_exit
3265   16FC             _if90_exit:
3266   16FC             _if85_exit:
3267   16FC             _for83_update:
3268   16FC 0A 3F 15      jmp _for83_cond
3269   16FF             _for83_exit:
3270   16FF             ;; if(!emit_override){ 
3271   16FF             _if93_cond:
3272   16FF FA 05 00      lea d, [bp + 5] ; $emit_override
3273   1702 32            mov bl, [d]
3274   1703 A7 00         mov bh, 0
3275   1705 C0 00 00      cmp b, 0
3276   1708 FD 71         seq ; !
3277   170A C0 00 00      cmp b, 0
3278   170D C6 5C 17      je _if93_exit
3279   1710             _if93_true:
3280   1710             ;; printx16(old_pc); print(" ("); printu(instr_len); print(") : "); 
3281   1710 FA 78 FF      lea d, [bp + -136] ; $old_pc
3282   1713 2A            mov b, [d]
3283   1714 FD AB         swp b
3284   1716 D8            push b
3285   1717 07 BD 32      call printx16
3286   171A 51 02 00      add sp, 2
3287   171D             ;; print(" ("); printu(instr_len); print(") : "); 
3288   171D 26 00 41      mov b, __s28 ; " ("
3289   1720 FD AB         swp b
3290   1722 D8            push b
3291   1723 07 0C 36      call print
3292   1726 51 02 00      add sp, 2
3293   1729             ;; printu(instr_len); print(") : "); 
3294   1729 FA 85 FF      lea d, [bp + -123] ; $instr_len
3295   172C 2A            mov b, [d]
3296   172D FD AB         swp b
3297   172F D8            push b
3298   1730 07 33 35      call printu
3299   1733 51 02 00      add sp, 2
3300   1736             ;; print(") : "); 
3301   1736 26 03 41      mov b, __s29 ; ") : "
3302   1739 FD AB         swp b
3303   173B D8            push b
3304   173C 07 0C 36      call print
3305   173F 51 02 00      add sp, 2
3306   1742             ;; print(code_line); putchar('\n'); 
3307   1742 FA A1 FF      lea d, [bp + -95] ; $code_line
3308   1745 2D            mov b, d
3309   1746 FD AB         swp b
3310   1748 D8            push b
3311   1749 07 0C 36      call print
3312   174C 51 02 00      add sp, 2
3313   174F             ;; putchar('\n'); 
3314   174F 26 0A 00      mov b, $a
3315   1752 DD            push bl
3316   1753 07 FF 35      call putchar
3317   1756 51 01 00      add sp, 1
3318   1759 0A 5C 17      jmp _if93_exit
3319   175C             _if93_exit:
3320   175C             ;; break; 
3321   175C 0A 71 17      jmp _for77_exit ; for break
3322   175F             _for77_update:
3323   175F FA 7F FF      lea d, [bp + -129] ; $i
3324   1762 2A            mov b, [d]
3325   1763 FD 79         mov g, b
3326   1765 FD 77         inc b
3327   1767 FA 7F FF      lea d, [bp + -129] ; $i
3328   176A FD 43         mov [d], b
3329   176C FD 27         mov b, g
3330   176E 0A 5D 13      jmp _for77_cond
3331   1771             _for77_exit:
3332   1771             _if67_exit:
3333   1771             ;; pop_prog(); 
3334   1771 07 D3 31      call pop_prog
3335   1774 F9            leave
3336   1775 09            ret
3337   1776             
3338   1776             parse_text:
3339   1776 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3340   1779             ; $temp_prog 
3341   1779 52 02 00      sub sp, 2
3342   177C             ;; print("Parsing TEXT section...\n"); 
3343   177C 26 1B 41      mov b, __s31 ; "Parsing TEXT section...\n"
3344   177F FD AB         swp b
3345   1781 D8            push b
3346   1782 07 0C 36      call print
3347   1785 51 02 00      add sp, 2
3348   1788             ;; prog = program; 
3349   1788 3B 3A 3E      mov d, _prog ; $prog
3350   178B DA            push d
3351   178C 3B 7E 3F      mov d, _program ; $program
3352   178F 2A            mov b, [d]
3353   1790 E7            pop d
3354   1791 FD 43         mov [d], b
3355   1793             ;; bin_p = bin_out + _org; 
3356   1793 3B 82 3F      mov d, _bin_p ; $bin_p
3357   1796 DA            push d
3358   1797 3B 80 3F      mov d, _bin_out ; $bin_out
3359   179A 2A            mov b, [d]
3360   179B             ; START TERMS
3361   179B D7            push a
3362   179C 11            mov a, b
3363   179D 3B 31 3E      mov d, __org ; $_org
3364   17A0 2A            mov b, [d]
3365   17A1 54            add a, b
3366   17A2 27            mov b, a
3367   17A3 E4            pop a
3368   17A4             ; END TERMS
3369   17A4 E7            pop d
3370   17A5 FD 43         mov [d], b
3371   17A7             ;; pc = _org; 
3372   17A7 3B 33 3E      mov d, _pc ; $pc
3373   17AA DA            push d
3374   17AB 3B 31 3E      mov d, __org ; $_org
3375   17AE 2A            mov b, [d]
3376   17AF E7            pop d
3377   17B0 FD 43         mov [d], b
3378   17B2             ;; for(;;){ 
3379   17B2             _for94_init:
3380   17B2             _for94_cond:
3381   17B2             _for94_block:
3382   17B2             ;; get(); 
3383   17B2 07 AE 25      call get
3384   17B5             ;; if(toktype == END) error("TEXT section not found."); 
3385   17B5             _if95_cond:
3386   17B5 3B 38 3E      mov d, _toktype ; $toktype
3387   17B8 2A            mov b, [d]
3388   17B9             ; START RELATIONAL
3389   17B9 D7            push a
3390   17BA 11            mov a, b
3391   17BB 26 07 00      mov b, 7; END
3392   17BE B0            cmp a, b
3393   17BF FD 71         seq ; ==
3394   17C1 E4            pop a
3395   17C2             ; END RELATIONAL
3396   17C2 C0 00 00      cmp b, 0
3397   17C5 C6 D7 17      je _if95_exit
3398   17C8             _if95_true:
3399   17C8             ;; error("TEXT section not found."); 
3400   17C8 26 34 41      mov b, __s32 ; "TEXT section not found."
3401   17CB FD AB         swp b
3402   17CD D8            push b
3403   17CE 07 1F 31      call error
3404   17D1 51 02 00      add sp, 2
3405   17D4 0A D7 17      jmp _if95_exit
3406   17D7             _if95_exit:
3407   17D7             ;; if(tok == TEXT){ 
3408   17D7             _if96_cond:
3409   17D7 3B 36 3E      mov d, _tok ; $tok
3410   17DA 2A            mov b, [d]
3411   17DB             ; START RELATIONAL
3412   17DB D7            push a
3413   17DC 11            mov a, b
3414   17DD 26 04 00      mov b, 4; TEXT
3415   17E0 B0            cmp a, b
3416   17E1 FD 71         seq ; ==
3417   17E3 E4            pop a
3418   17E4             ; END RELATIONAL
3419   17E4 C0 00 00      cmp b, 0
3420   17E7 C6 F0 17      je _if96_exit
3421   17EA             _if96_true:
3422   17EA             ;; break; 
3423   17EA 0A F3 17      jmp _for94_exit ; for break
3424   17ED 0A F0 17      jmp _if96_exit
3425   17F0             _if96_exit:
3426   17F0             _for94_update:
3427   17F0 0A B2 17      jmp _for94_cond
3428   17F3             _for94_exit:
3429   17F3             ;; for(;;){ 
3430   17F3             _for97_init:
3431   17F3             _for97_cond:
3432   17F3             _for97_block:
3433   17F3             ;; get(); back(); 
3434   17F3 07 AE 25      call get
3435   17F6             ;; back(); 
3436   17F6 07 EF 22      call back
3437   17F9             ;; temp_prog = prog; 
3438   17F9 FA FF FF      lea d, [bp + -1] ; $temp_prog
3439   17FC DA            push d
3440   17FD 3B 3A 3E      mov d, _prog ; $prog
3441   1800 2A            mov b, [d]
3442   1801 E7            pop d
3443   1802 FD 43         mov [d], b
3444   1804             ;; get(); 
3445   1804 07 AE 25      call get
3446   1807             ;; if(toktype == END) error("TEXT section end not found."); 
3447   1807             _if98_cond:
3448   1807 3B 38 3E      mov d, _toktype ; $toktype
3449   180A 2A            mov b, [d]
3450   180B             ; START RELATIONAL
3451   180B D7            push a
3452   180C 11            mov a, b
3453   180D 26 07 00      mov b, 7; END
3454   1810 B0            cmp a, b
3455   1811 FD 71         seq ; ==
3456   1813 E4            pop a
3457   1814             ; END RELATIONAL
3458   1814 C0 00 00      cmp b, 0
3459   1817 C6 29 18      je _if98_exit
3460   181A             _if98_true:
3461   181A             ;; error("TEXT section end not found."); 
3462   181A 26 4C 41      mov b, __s33 ; "TEXT section end not found."
3463   181D FD AB         swp b
3464   181F D8            push b
3465   1820 07 1F 31      call error
3466   1823 51 02 00      add sp, 2
3467   1826 0A 29 18      jmp _if98_exit
3468   1829             _if98_exit:
3469   1829             ;; if(tok == DOT){ 
3470   1829             _if99_cond:
3471   1829 3B 36 3E      mov d, _tok ; $tok
3472   182C 2A            mov b, [d]
3473   182D             ; START RELATIONAL
3474   182D D7            push a
3475   182E 11            mov a, b
3476   182F 26 10 00      mov b, 16; DOT
3477   1832 B0            cmp a, b
3478   1833 FD 71         seq ; ==
3479   1835 E4            pop a
3480   1836             ; END RELATIONAL
3481   1836 C0 00 00      cmp b, 0
3482   1839 C6 67 18      je _if99_else
3483   183C             _if99_true:
3484   183C             ;; get(); 
3485   183C 07 AE 25      call get
3486   183F             ;; if(tok == SEGMENT_END) break; 
3487   183F             _if100_cond:
3488   183F 3B 36 3E      mov d, _tok ; $tok
3489   1842 2A            mov b, [d]
3490   1843             ; START RELATIONAL
3491   1843 D7            push a
3492   1844 11            mov a, b
3493   1845 26 05 00      mov b, 5; SEGMENT_END
3494   1848 B0            cmp a, b
3495   1849 FD 71         seq ; ==
3496   184B E4            pop a
3497   184C             ; END RELATIONAL
3498   184C C0 00 00      cmp b, 0
3499   184F C6 58 18      je _if100_else
3500   1852             _if100_true:
3501   1852             ;; break; 
3502   1852 0A AE 18      jmp _for97_exit ; for break
3503   1855 0A 64 18      jmp _if100_exit
3504   1858             _if100_else:
3505   1858             ;; error("Unexpected directive."); 
3506   1858 26 68 41      mov b, __s34 ; "Unexpected directive."
3507   185B FD AB         swp b
3508   185D D8            push b
3509   185E 07 1F 31      call error
3510   1861 51 02 00      add sp, 2
3511   1864             _if100_exit:
3512   1864 0A AB 18      jmp _if99_exit
3513   1867             _if99_else:
3514   1867             ;; if(toktype == IDENTIFIER){ 
3515   1867             _if101_cond:
3516   1867 3B 38 3E      mov d, _toktype ; $toktype
3517   186A 2A            mov b, [d]
3518   186B             ; START RELATIONAL
3519   186B D7            push a
3520   186C 11            mov a, b
3521   186D 26 06 00      mov b, 6; IDENTIFIER
3522   1870 B0            cmp a, b
3523   1871 FD 71         seq ; ==
3524   1873 E4            pop a
3525   1874             ; END RELATIONAL
3526   1874 C0 00 00      cmp b, 0
3527   1877 C6 AB 18      je _if101_exit
3528   187A             _if101_true:
3529   187A             ;; get(); 
3530   187A 07 AE 25      call get
3531   187D             ;; if(tok != COLON){ 
3532   187D             _if102_cond:
3533   187D 3B 36 3E      mov d, _tok ; $tok
3534   1880 2A            mov b, [d]
3535   1881             ; START RELATIONAL
3536   1881 D7            push a
3537   1882 11            mov a, b
3538   1883 26 0D 00      mov b, 13; COLON
3539   1886 B0            cmp a, b
3540   1887 FD 72         sneq ; !=
3541   1889 E4            pop a
3542   188A             ; END RELATIONAL
3543   188A C0 00 00      cmp b, 0
3544   188D C6 A8 18      je _if102_exit
3545   1890             _if102_true:
3546   1890             ;; prog = temp_prog; 
3547   1890 3B 3A 3E      mov d, _prog ; $prog
3548   1893 DA            push d
3549   1894 FA FF FF      lea d, [bp + -1] ; $temp_prog
3550   1897 2A            mov b, [d]
3551   1898 E7            pop d
3552   1899 FD 43         mov [d], b
3553   189B             ;; parse_instr(0); 
3554   189B 26 00 00      mov b, $0
3555   189E DD            push bl
3556   189F 07 6D 10      call parse_instr
3557   18A2 51 01 00      add sp, 1
3558   18A5 0A A8 18      jmp _if102_exit
3559   18A8             _if102_exit:
3560   18A8 0A AB 18      jmp _if101_exit
3561   18AB             _if101_exit:
3562   18AB             _if99_exit:
3563   18AB             _for97_update:
3564   18AB 0A F3 17      jmp _for97_cond
3565   18AE             _for97_exit:
3566   18AE             ;; print("Done.\n\n"); 
3567   18AE 26 7E 41      mov b, __s35 ; "Done.\n\n"
3568   18B1 FD AB         swp b
3569   18B3 D8            push b
3570   18B4 07 0C 36      call print
3571   18B7 51 02 00      add sp, 2
3572   18BA F9            leave
3573   18BB 09            ret
3574   18BC             
3575   18BC             debug:
3576   18BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3577   18BF             ;; print("\n"); 
3578   18BF 26 D2 3F      mov b, __s9 ; "\n"
3579   18C2 FD AB         swp b
3580   18C4 D8            push b
3581   18C5 07 0C 36      call print
3582   18C8 51 02 00      add sp, 2
3583   18CB             ;; print("Prog Offset: "); printx16(prog-program); print(", "); 
3584   18CB 26 86 41      mov b, __s36 ; "Prog Offset: "
3585   18CE FD AB         swp b
3586   18D0 D8            push b
3587   18D1 07 0C 36      call print
3588   18D4 51 02 00      add sp, 2
3589   18D7             ;; printx16(prog-program); print(", "); 
3590   18D7 3B 3A 3E      mov d, _prog ; $prog
3591   18DA 2A            mov b, [d]
3592   18DB             ; START TERMS
3593   18DB D7            push a
3594   18DC 11            mov a, b
3595   18DD 3B 7E 3F      mov d, _program ; $program
3596   18E0 2A            mov b, [d]
3597   18E1 60            sub a, b
3598   18E2 27            mov b, a
3599   18E3 E4            pop a
3600   18E4             ; END TERMS
3601   18E4 FD AB         swp b
3602   18E6 D8            push b
3603   18E7 07 BD 32      call printx16
3604   18EA 51 02 00      add sp, 2
3605   18ED             ;; print(", "); 
3606   18ED 26 1C 40      mov b, __s14 ; ", "
3607   18F0 FD AB         swp b
3608   18F2 D8            push b
3609   18F3 07 0C 36      call print
3610   18F6 51 02 00      add sp, 2
3611   18F9             ;; print("Prog value : "); putchar(*prog); print("\n"); 
3612   18F9 26 94 41      mov b, __s37 ; "Prog value : "
3613   18FC FD AB         swp b
3614   18FE D8            push b
3615   18FF 07 0C 36      call print
3616   1902 51 02 00      add sp, 2
3617   1905             ;; putchar(*prog); print("\n"); 
3618   1905 3B 3A 3E      mov d, _prog ; $prog
3619   1908 2A            mov b, [d]
3620   1909 74            mov d, b
3621   190A 32            mov bl, [d]
3622   190B A7 00         mov bh, 0
3623   190D DD            push bl
3624   190E 07 FF 35      call putchar
3625   1911 51 01 00      add sp, 1
3626   1914             ;; print("\n"); 
3627   1914 26 D2 3F      mov b, __s9 ; "\n"
3628   1917 FD AB         swp b
3629   1919 D8            push b
3630   191A 07 0C 36      call print
3631   191D 51 02 00      add sp, 2
3632   1920             ;; print("Token       : "); print(token); print(", "); 
3633   1920 26 A2 41      mov b, __s38 ; "Token       : "
3634   1923 FD AB         swp b
3635   1925 D8            push b
3636   1926 07 0C 36      call print
3637   1929 51 02 00      add sp, 2
3638   192C             ;; print(token); print(", "); 
3639   192C 3B 3C 3E      mov d, _token_data ; $token
3640   192F 2D            mov b, d
3641   1930 FD AB         swp b
3642   1932 D8            push b
3643   1933 07 0C 36      call print
3644   1936 51 02 00      add sp, 2
3645   1939             ;; print(", "); 
3646   1939 26 1C 40      mov b, __s14 ; ", "
3647   193C FD AB         swp b
3648   193E D8            push b
3649   193F 07 0C 36      call print
3650   1942 51 02 00      add sp, 2
3651   1945             ;; print("Tok: "); printu(tok); print(", "); 
3652   1945 26 B1 41      mov b, __s39 ; "Tok: "
3653   1948 FD AB         swp b
3654   194A D8            push b
3655   194B 07 0C 36      call print
3656   194E 51 02 00      add sp, 2
3657   1951             ;; printu(tok); print(", "); 
3658   1951 3B 36 3E      mov d, _tok ; $tok
3659   1954 2A            mov b, [d]
3660   1955 FD AB         swp b
3661   1957 D8            push b
3662   1958 07 33 35      call printu
3663   195B 51 02 00      add sp, 2
3664   195E             ;; print(", "); 
3665   195E 26 1C 40      mov b, __s14 ; ", "
3666   1961 FD AB         swp b
3667   1963 D8            push b
3668   1964 07 0C 36      call print
3669   1967 51 02 00      add sp, 2
3670   196A             ;; print("Toktype: "); printu(toktype); print("\n"); 
3671   196A 26 B7 41      mov b, __s40 ; "Toktype: "
3672   196D FD AB         swp b
3673   196F D8            push b
3674   1970 07 0C 36      call print
3675   1973 51 02 00      add sp, 2
3676   1976             ;; printu(toktype); print("\n"); 
3677   1976 3B 38 3E      mov d, _toktype ; $toktype
3678   1979 2A            mov b, [d]
3679   197A FD AB         swp b
3680   197C D8            push b
3681   197D 07 33 35      call printu
3682   1980 51 02 00      add sp, 2
3683   1983             ;; print("\n"); 
3684   1983 26 D2 3F      mov b, __s9 ; "\n"
3685   1986 FD AB         swp b
3686   1988 D8            push b
3687   1989 07 0C 36      call print
3688   198C 51 02 00      add sp, 2
3689   198F             ;; print("StringConst : "); print(string_const); print("\n"); 
3690   198F 26 C1 41      mov b, __s41 ; "StringConst : "
3691   1992 FD AB         swp b
3692   1994 D8            push b
3693   1995 07 0C 36      call print
3694   1998 51 02 00      add sp, 2
3695   199B             ;; print(string_const); print("\n"); 
3696   199B 3B 7C 3E      mov d, _string_const_data ; $string_const
3697   199E 2D            mov b, d
3698   199F FD AB         swp b
3699   19A1 D8            push b
3700   19A2 07 0C 36      call print
3701   19A5 51 02 00      add sp, 2
3702   19A8             ;; print("\n"); 
3703   19A8 26 D2 3F      mov b, __s9 ; "\n"
3704   19AB FD AB         swp b
3705   19AD D8            push b
3706   19AE 07 0C 36      call print
3707   19B1 51 02 00      add sp, 2
3708   19B4             ;; print("PC          : "); printx16(pc); 
3709   19B4 26 D0 41      mov b, __s42 ; "PC          : "
3710   19B7 FD AB         swp b
3711   19B9 D8            push b
3712   19BA 07 0C 36      call print
3713   19BD 51 02 00      add sp, 2
3714   19C0             ;; printx16(pc); 
3715   19C0 3B 33 3E      mov d, _pc ; $pc
3716   19C3 2A            mov b, [d]
3717   19C4 FD AB         swp b
3718   19C6 D8            push b
3719   19C7 07 BD 32      call printx16
3720   19CA 51 02 00      add sp, 2
3721   19CD             ;; print("\n"); 
3722   19CD 26 D2 3F      mov b, __s9 ; "\n"
3723   19D0 FD AB         swp b
3724   19D2 D8            push b
3725   19D3 07 0C 36      call print
3726   19D6 51 02 00      add sp, 2
3727   19D9 F9            leave
3728   19DA 09            ret
3729   19DB             
3730   19DB             display_output:
3731   19DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3732   19DE             ; $i 
3733   19DE             ; $p 
3734   19DE 52 04 00      sub sp, 4
3735   19E1             ;; print("\nAssembly complete.\n"); 
3736   19E1 26 DF 41      mov b, __s43 ; "\nAssembly complete.\n"
3737   19E4 FD AB         swp b
3738   19E6 D8            push b
3739   19E7 07 0C 36      call print
3740   19EA 51 02 00      add sp, 2
3741   19ED             ;; print_info2("Program size: ", prog_size, "\n"); 
3742   19ED 26 D2 3F      mov b, __s9 ; "\n"
3743   19F0 FD AB         swp b
3744   19F2 D8            push b
3745   19F3 3B 9C 3F      mov d, _prog_size ; $prog_size
3746   19F6 2A            mov b, [d]
3747   19F7 FD AB         swp b
3748   19F9 D8            push b
3749   19FA 26 F4 41      mov b, __s44 ; "Program size: "
3750   19FD FD AB         swp b
3751   19FF D8            push b
3752   1A00 07 75 1F      call print_info2
3753   1A03 51 06 00      add sp, 6
3754   1A06             ;; print("Listing: \n"); 
3755   1A06 26 03 42      mov b, __s45 ; "Listing: \n"
3756   1A09 FD AB         swp b
3757   1A0B D8            push b
3758   1A0C 07 0C 36      call print
3759   1A0F 51 02 00      add sp, 2
3760   1A12             ;; p = bin_out + _org; 
3761   1A12 FA FD FF      lea d, [bp + -3] ; $p
3762   1A15 DA            push d
3763   1A16 3B 80 3F      mov d, _bin_out ; $bin_out
3764   1A19 2A            mov b, [d]
3765   1A1A             ; START TERMS
3766   1A1A D7            push a
3767   1A1B 11            mov a, b
3768   1A1C 3B 31 3E      mov d, __org ; $_org
3769   1A1F 2A            mov b, [d]
3770   1A20 54            add a, b
3771   1A21 27            mov b, a
3772   1A22 E4            pop a
3773   1A23             ; END TERMS
3774   1A23 E7            pop d
3775   1A24 FD 43         mov [d], b
3776   1A26             ;; for(;;){ 
3777   1A26             _for103_init:
3778   1A26             _for103_cond:
3779   1A26             _for103_block:
3780   1A26             ;; if(p == bin_p) break; 
3781   1A26             _if104_cond:
3782   1A26 FA FD FF      lea d, [bp + -3] ; $p
3783   1A29 2A            mov b, [d]
3784   1A2A             ; START RELATIONAL
3785   1A2A D7            push a
3786   1A2B 11            mov a, b
3787   1A2C 3B 82 3F      mov d, _bin_p ; $bin_p
3788   1A2F 2A            mov b, [d]
3789   1A30 B0            cmp a, b
3790   1A31 FD 71         seq ; ==
3791   1A33 E4            pop a
3792   1A34             ; END RELATIONAL
3793   1A34 C0 00 00      cmp b, 0
3794   1A37 C6 40 1A      je _if104_exit
3795   1A3A             _if104_true:
3796   1A3A             ;; break; 
3797   1A3A 0A 61 1A      jmp _for103_exit ; for break
3798   1A3D 0A 40 1A      jmp _if104_exit
3799   1A40             _if104_exit:
3800   1A40             ;; printx8(*p);  
3801   1A40 FA FD FF      lea d, [bp + -3] ; $p
3802   1A43 2A            mov b, [d]
3803   1A44 74            mov d, b
3804   1A45 32            mov bl, [d]
3805   1A46 A7 00         mov bh, 0
3806   1A48 DD            push bl
3807   1A49 07 C9 32      call printx8
3808   1A4C 51 01 00      add sp, 1
3809   1A4F             ;; p++; 
3810   1A4F FA FD FF      lea d, [bp + -3] ; $p
3811   1A52 2A            mov b, [d]
3812   1A53 FD 79         mov g, b
3813   1A55 FD 77         inc b
3814   1A57 FA FD FF      lea d, [bp + -3] ; $p
3815   1A5A FD 43         mov [d], b
3816   1A5C FD 27         mov b, g
3817   1A5E             _for103_update:
3818   1A5E 0A 26 1A      jmp _for103_cond
3819   1A61             _for103_exit:
3820   1A61             ;; print("\n"); 
3821   1A61 26 D2 3F      mov b, __s9 ; "\n"
3822   1A64 FD AB         swp b
3823   1A66 D8            push b
3824   1A67 07 0C 36      call print
3825   1A6A 51 02 00      add sp, 2
3826   1A6D F9            leave
3827   1A6E 09            ret
3828   1A6F             
3829   1A6F             is_reserved:
3830   1A6F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3831   1A72             ;; return !strcmp(name, "a") 
3832   1A72 26 0E 42      mov b, __s46 ; "a"
3833   1A75 FD AB         swp b
3834   1A77 D8            push b
3835   1A78 FA 05 00      lea d, [bp + 5] ; $name
3836   1A7B 2A            mov b, [d]
3837   1A7C FD AB         swp b
3838   1A7E D8            push b
3839   1A7F 07 31 37      call strcmp
3840   1A82 51 04 00      add sp, 4
3841   1A85 C0 00 00      cmp b, 0
3842   1A88 FD 71         seq ; !
3843   1A8A D7            push a
3844   1A8B 11            mov a, b
3845   1A8C 26 10 42      mov b, __s47 ; "al"
3846   1A8F FD AB         swp b
3847   1A91 D8            push b
3848   1A92 FA 05 00      lea d, [bp + 5] ; $name
3849   1A95 2A            mov b, [d]
3850   1A96 FD AB         swp b
3851   1A98 D8            push b
3852   1A99 07 31 37      call strcmp
3853   1A9C 51 04 00      add sp, 4
3854   1A9F C0 00 00      cmp b, 0
3855   1AA2 FD 71         seq ; !
3856   1AA4 FD A8         sor a, b ; ||
3857   1AA6 11            mov a, b
3858   1AA7 26 13 42      mov b, __s48 ; "ah"
3859   1AAA FD AB         swp b
3860   1AAC D8            push b
3861   1AAD FA 05 00      lea d, [bp + 5] ; $name
3862   1AB0 2A            mov b, [d]
3863   1AB1 FD AB         swp b
3864   1AB3 D8            push b
3865   1AB4 07 31 37      call strcmp
3866   1AB7 51 04 00      add sp, 4
3867   1ABA C0 00 00      cmp b, 0
3868   1ABD FD 71         seq ; !
3869   1ABF FD A8         sor a, b ; ||
3870   1AC1 11            mov a, b
3871   1AC2 26 16 42      mov b, __s49 ; "b"
3872   1AC5 FD AB         swp b
3873   1AC7 D8            push b
3874   1AC8 FA 05 00      lea d, [bp + 5] ; $name
3875   1ACB 2A            mov b, [d]
3876   1ACC FD AB         swp b
3877   1ACE D8            push b
3878   1ACF 07 31 37      call strcmp
3879   1AD2 51 04 00      add sp, 4
3880   1AD5 C0 00 00      cmp b, 0
3881   1AD8 FD 71         seq ; !
3882   1ADA FD A8         sor a, b ; ||
3883   1ADC 11            mov a, b
3884   1ADD 26 18 42      mov b, __s50 ; "bl"
3885   1AE0 FD AB         swp b
3886   1AE2 D8            push b
3887   1AE3 FA 05 00      lea d, [bp + 5] ; $name
3888   1AE6 2A            mov b, [d]
3889   1AE7 FD AB         swp b
3890   1AE9 D8            push b
3891   1AEA 07 31 37      call strcmp
3892   1AED 51 04 00      add sp, 4
3893   1AF0 C0 00 00      cmp b, 0
3894   1AF3 FD 71         seq ; !
3895   1AF5 FD A8         sor a, b ; ||
3896   1AF7 11            mov a, b
3897   1AF8 26 1B 42      mov b, __s51 ; "bh"
3898   1AFB FD AB         swp b
3899   1AFD D8            push b
3900   1AFE FA 05 00      lea d, [bp + 5] ; $name
3901   1B01 2A            mov b, [d]
3902   1B02 FD AB         swp b
3903   1B04 D8            push b
3904   1B05 07 31 37      call strcmp
3905   1B08 51 04 00      add sp, 4
3906   1B0B C0 00 00      cmp b, 0
3907   1B0E FD 71         seq ; !
3908   1B10 FD A8         sor a, b ; ||
3909   1B12 11            mov a, b
3910   1B13 26 1E 42      mov b, __s52 ; "c"
3911   1B16 FD AB         swp b
3912   1B18 D8            push b
3913   1B19 FA 05 00      lea d, [bp + 5] ; $name
3914   1B1C 2A            mov b, [d]
3915   1B1D FD AB         swp b
3916   1B1F D8            push b
3917   1B20 07 31 37      call strcmp
3918   1B23 51 04 00      add sp, 4
3919   1B26 C0 00 00      cmp b, 0
3920   1B29 FD 71         seq ; !
3921   1B2B FD A8         sor a, b ; ||
3922   1B2D 11            mov a, b
3923   1B2E 26 20 42      mov b, __s53 ; "cl"
3924   1B31 FD AB         swp b
3925   1B33 D8            push b
3926   1B34 FA 05 00      lea d, [bp + 5] ; $name
3927   1B37 2A            mov b, [d]
3928   1B38 FD AB         swp b
3929   1B3A D8            push b
3930   1B3B 07 31 37      call strcmp
3931   1B3E 51 04 00      add sp, 4
3932   1B41 C0 00 00      cmp b, 0
3933   1B44 FD 71         seq ; !
3934   1B46 FD A8         sor a, b ; ||
3935   1B48 11            mov a, b
3936   1B49 26 23 42      mov b, __s54 ; "ch"
3937   1B4C FD AB         swp b
3938   1B4E D8            push b
3939   1B4F FA 05 00      lea d, [bp + 5] ; $name
3940   1B52 2A            mov b, [d]
3941   1B53 FD AB         swp b
3942   1B55 D8            push b
3943   1B56 07 31 37      call strcmp
3944   1B59 51 04 00      add sp, 4
3945   1B5C C0 00 00      cmp b, 0
3946   1B5F FD 71         seq ; !
3947   1B61 FD A8         sor a, b ; ||
3948   1B63 11            mov a, b
3949   1B64 26 26 42      mov b, __s55 ; "d"
3950   1B67 FD AB         swp b
3951   1B69 D8            push b
3952   1B6A FA 05 00      lea d, [bp + 5] ; $name
3953   1B6D 2A            mov b, [d]
3954   1B6E FD AB         swp b
3955   1B70 D8            push b
3956   1B71 07 31 37      call strcmp
3957   1B74 51 04 00      add sp, 4
3958   1B77 C0 00 00      cmp b, 0
3959   1B7A FD 71         seq ; !
3960   1B7C FD A8         sor a, b ; ||
3961   1B7E 11            mov a, b
3962   1B7F 26 28 42      mov b, __s56 ; "dl"
3963   1B82 FD AB         swp b
3964   1B84 D8            push b
3965   1B85 FA 05 00      lea d, [bp + 5] ; $name
3966   1B88 2A            mov b, [d]
3967   1B89 FD AB         swp b
3968   1B8B D8            push b
3969   1B8C 07 31 37      call strcmp
3970   1B8F 51 04 00      add sp, 4
3971   1B92 C0 00 00      cmp b, 0
3972   1B95 FD 71         seq ; !
3973   1B97 FD A8         sor a, b ; ||
3974   1B99 11            mov a, b
3975   1B9A 26 2B 42      mov b, __s57 ; "dh"
3976   1B9D FD AB         swp b
3977   1B9F D8            push b
3978   1BA0 FA 05 00      lea d, [bp + 5] ; $name
3979   1BA3 2A            mov b, [d]
3980   1BA4 FD AB         swp b
3981   1BA6 D8            push b
3982   1BA7 07 31 37      call strcmp
3983   1BAA 51 04 00      add sp, 4
3984   1BAD C0 00 00      cmp b, 0
3985   1BB0 FD 71         seq ; !
3986   1BB2 FD A8         sor a, b ; ||
3987   1BB4 11            mov a, b
3988   1BB5 26 2E 42      mov b, __s58 ; "g"
3989   1BB8 FD AB         swp b
3990   1BBA D8            push b
3991   1BBB FA 05 00      lea d, [bp + 5] ; $name
3992   1BBE 2A            mov b, [d]
3993   1BBF FD AB         swp b
3994   1BC1 D8            push b
3995   1BC2 07 31 37      call strcmp
3996   1BC5 51 04 00      add sp, 4
3997   1BC8 C0 00 00      cmp b, 0
3998   1BCB FD 71         seq ; !
3999   1BCD FD A8         sor a, b ; ||
4000   1BCF 11            mov a, b
4001   1BD0 26 30 42      mov b, __s59 ; "gl"
4002   1BD3 FD AB         swp b
4003   1BD5 D8            push b
4004   1BD6 FA 05 00      lea d, [bp + 5] ; $name
4005   1BD9 2A            mov b, [d]
4006   1BDA FD AB         swp b
4007   1BDC D8            push b
4008   1BDD 07 31 37      call strcmp
4009   1BE0 51 04 00      add sp, 4
4010   1BE3 C0 00 00      cmp b, 0
4011   1BE6 FD 71         seq ; !
4012   1BE8 FD A8         sor a, b ; ||
4013   1BEA 11            mov a, b
4014   1BEB 26 33 42      mov b, __s60 ; "gh"
4015   1BEE FD AB         swp b
4016   1BF0 D8            push b
4017   1BF1 FA 05 00      lea d, [bp + 5] ; $name
4018   1BF4 2A            mov b, [d]
4019   1BF5 FD AB         swp b
4020   1BF7 D8            push b
4021   1BF8 07 31 37      call strcmp
4022   1BFB 51 04 00      add sp, 4
4023   1BFE C0 00 00      cmp b, 0
4024   1C01 FD 71         seq ; !
4025   1C03 FD A8         sor a, b ; ||
4026   1C05 11            mov a, b
4027   1C06 26 36 42      mov b, __s61 ; "pc"
4028   1C09 FD AB         swp b
4029   1C0B D8            push b
4030   1C0C FA 05 00      lea d, [bp + 5] ; $name
4031   1C0F 2A            mov b, [d]
4032   1C10 FD AB         swp b
4033   1C12 D8            push b
4034   1C13 07 31 37      call strcmp
4035   1C16 51 04 00      add sp, 4
4036   1C19 C0 00 00      cmp b, 0
4037   1C1C FD 71         seq ; !
4038   1C1E FD A8         sor a, b ; ||
4039   1C20 11            mov a, b
4040   1C21 26 39 42      mov b, __s62 ; "sp"
4041   1C24 FD AB         swp b
4042   1C26 D8            push b
4043   1C27 FA 05 00      lea d, [bp + 5] ; $name
4044   1C2A 2A            mov b, [d]
4045   1C2B FD AB         swp b
4046   1C2D D8            push b
4047   1C2E 07 31 37      call strcmp
4048   1C31 51 04 00      add sp, 4
4049   1C34 C0 00 00      cmp b, 0
4050   1C37 FD 71         seq ; !
4051   1C39 FD A8         sor a, b ; ||
4052   1C3B 11            mov a, b
4053   1C3C 26 3C 42      mov b, __s63 ; "bp"
4054   1C3F FD AB         swp b
4055   1C41 D8            push b
4056   1C42 FA 05 00      lea d, [bp + 5] ; $name
4057   1C45 2A            mov b, [d]
4058   1C46 FD AB         swp b
4059   1C48 D8            push b
4060   1C49 07 31 37      call strcmp
4061   1C4C 51 04 00      add sp, 4
4062   1C4F C0 00 00      cmp b, 0
4063   1C52 FD 71         seq ; !
4064   1C54 FD A8         sor a, b ; ||
4065   1C56 11            mov a, b
4066   1C57 26 3F 42      mov b, __s64 ; "si"
4067   1C5A FD AB         swp b
4068   1C5C D8            push b
4069   1C5D FA 05 00      lea d, [bp + 5] ; $name
4070   1C60 2A            mov b, [d]
4071   1C61 FD AB         swp b
4072   1C63 D8            push b
4073   1C64 07 31 37      call strcmp
4074   1C67 51 04 00      add sp, 4
4075   1C6A C0 00 00      cmp b, 0
4076   1C6D FD 71         seq ; !
4077   1C6F FD A8         sor a, b ; ||
4078   1C71 11            mov a, b
4079   1C72 26 42 42      mov b, __s65 ; "di"
4080   1C75 FD AB         swp b
4081   1C77 D8            push b
4082   1C78 FA 05 00      lea d, [bp + 5] ; $name
4083   1C7B 2A            mov b, [d]
4084   1C7C FD AB         swp b
4085   1C7E D8            push b
4086   1C7F 07 31 37      call strcmp
4087   1C82 51 04 00      add sp, 4
4088   1C85 C0 00 00      cmp b, 0
4089   1C88 FD 71         seq ; !
4090   1C8A FD A8         sor a, b ; ||
4091   1C8C 11            mov a, b
4092   1C8D 26 45 42      mov b, __s66 ; "word"
4093   1C90 FD AB         swp b
4094   1C92 D8            push b
4095   1C93 FA 05 00      lea d, [bp + 5] ; $name
4096   1C96 2A            mov b, [d]
4097   1C97 FD AB         swp b
4098   1C99 D8            push b
4099   1C9A 07 31 37      call strcmp
4100   1C9D 51 04 00      add sp, 4
4101   1CA0 C0 00 00      cmp b, 0
4102   1CA3 FD 71         seq ; !
4103   1CA5 FD A8         sor a, b ; ||
4104   1CA7 11            mov a, b
4105   1CA8 26 4A 42      mov b, __s67 ; "byte"
4106   1CAB FD AB         swp b
4107   1CAD D8            push b
4108   1CAE FA 05 00      lea d, [bp + 5] ; $name
4109   1CB1 2A            mov b, [d]
4110   1CB2 FD AB         swp b
4111   1CB4 D8            push b
4112   1CB5 07 31 37      call strcmp
4113   1CB8 51 04 00      add sp, 4
4114   1CBB C0 00 00      cmp b, 0
4115   1CBE FD 71         seq ; !
4116   1CC0 FD A8         sor a, b ; ||
4117   1CC2 11            mov a, b
4118   1CC3 26 4F 42      mov b, __s68 ; "cmpsb"
4119   1CC6 FD AB         swp b
4120   1CC8 D8            push b
4121   1CC9 FA 05 00      lea d, [bp + 5] ; $name
4122   1CCC 2A            mov b, [d]
4123   1CCD FD AB         swp b
4124   1CCF D8            push b
4125   1CD0 07 31 37      call strcmp
4126   1CD3 51 04 00      add sp, 4
4127   1CD6 C0 00 00      cmp b, 0
4128   1CD9 FD 71         seq ; !
4129   1CDB FD A8         sor a, b ; ||
4130   1CDD 11            mov a, b
4131   1CDE 26 55 42      mov b, __s69 ; "movsb"
4132   1CE1 FD AB         swp b
4133   1CE3 D8            push b
4134   1CE4 FA 05 00      lea d, [bp + 5] ; $name
4135   1CE7 2A            mov b, [d]
4136   1CE8 FD AB         swp b
4137   1CEA D8            push b
4138   1CEB 07 31 37      call strcmp
4139   1CEE 51 04 00      add sp, 4
4140   1CF1 C0 00 00      cmp b, 0
4141   1CF4 FD 71         seq ; !
4142   1CF6 FD A8         sor a, b ; ||
4143   1CF8 11            mov a, b
4144   1CF9 26 5B 42      mov b, __s70 ; "stosb"
4145   1CFC FD AB         swp b
4146   1CFE D8            push b
4147   1CFF FA 05 00      lea d, [bp + 5] ; $name
4148   1D02 2A            mov b, [d]
4149   1D03 FD AB         swp b
4150   1D05 D8            push b
4151   1D06 07 31 37      call strcmp
4152   1D09 51 04 00      add sp, 4
4153   1D0C C0 00 00      cmp b, 0
4154   1D0F FD 71         seq ; !
4155   1D11 FD A8         sor a, b ; ||
4156   1D13 E4            pop a
4157   1D14 F9            leave
4158   1D15 09            ret
4159   1D16             
4160   1D16             is_directive:
4161   1D16 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4162   1D19             ;; return !strcmp(name, "org")  
4163   1D19 26 AE 3F      mov b, __s0 ; "org"
4164   1D1C FD AB         swp b
4165   1D1E D8            push b
4166   1D1F FA 05 00      lea d, [bp + 5] ; $name
4167   1D22 2A            mov b, [d]
4168   1D23 FD AB         swp b
4169   1D25 D8            push b
4170   1D26 07 31 37      call strcmp
4171   1D29 51 04 00      add sp, 4
4172   1D2C C0 00 00      cmp b, 0
4173   1D2F FD 71         seq ; !
4174   1D31 D7            push a
4175   1D32 11            mov a, b
4176   1D33 26 61 42      mov b, __s71 ; "define"
4177   1D36 FD AB         swp b
4178   1D38 D8            push b
4179   1D39 FA 05 00      lea d, [bp + 5] ; $name
4180   1D3C 2A            mov b, [d]
4181   1D3D FD AB         swp b
4182   1D3F D8            push b
4183   1D40 07 31 37      call strcmp
4184   1D43 51 04 00      add sp, 4
4185   1D46 C0 00 00      cmp b, 0
4186   1D49 FD 71         seq ; !
4187   1D4B FD A8         sor a, b ; ||
4188   1D4D E4            pop a
4189   1D4E F9            leave
4190   1D4F 09            ret
4191   1D50             
4192   1D50             parse_label:
4193   1D50 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4194   1D53             ; $label_name 
4195   1D53 52 20 00      sub sp, 32
4196   1D56             ;; get(); 
4197   1D56 07 AE 25      call get
4198   1D59             ;; strcpy(label_name, token); 
4199   1D59 3B 3C 3E      mov d, _token_data ; $token
4200   1D5C 2D            mov b, d
4201   1D5D FD AB         swp b
4202   1D5F D8            push b
4203   1D60 FA E1 FF      lea d, [bp + -31] ; $label_name
4204   1D63 2D            mov b, d
4205   1D64 FD AB         swp b
4206   1D66 D8            push b
4207   1D67 07 C9 36      call strcpy
4208   1D6A 51 04 00      add sp, 4
4209   1D6D             ;; declare_label(label_name, pc); 
4210   1D6D 3B 33 3E      mov d, _pc ; $pc
4211   1D70 2A            mov b, [d]
4212   1D71 FD AB         swp b
4213   1D73 D8            push b
4214   1D74 FA E1 FF      lea d, [bp + -31] ; $label_name
4215   1D77 2D            mov b, d
4216   1D78 FD AB         swp b
4217   1D7A D8            push b
4218   1D7B 07 86 1D      call declare_label
4219   1D7E 51 04 00      add sp, 4
4220   1D81             ;; get(); // get ':' 
4221   1D81 07 AE 25      call get
4222   1D84 F9            leave
4223   1D85 09            ret
4224   1D86             
4225   1D86             declare_label:
4226   1D86 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4227   1D89             ; $i 
4228   1D89 52 02 00      sub sp, 2
4229   1D8C             ;; for(i = 0; i <  16         ; i++){ 
4230   1D8C             _for105_init:
4231   1D8C FA FF FF      lea d, [bp + -1] ; $i
4232   1D8F DA            push d
4233   1D90 26 00 00      mov b, $0
4234   1D93 E7            pop d
4235   1D94 FD 43         mov [d], b
4236   1D96             _for105_cond:
4237   1D96 FA FF FF      lea d, [bp + -1] ; $i
4238   1D99 2A            mov b, [d]
4239   1D9A             ; START RELATIONAL
4240   1D9A D7            push a
4241   1D9B 11            mov a, b
4242   1D9C 26 10 00      mov b, $10
4243   1D9F B0            cmp a, b
4244   1DA0 FD 73         slt ; < 
4245   1DA2 E4            pop a
4246   1DA3             ; END RELATIONAL
4247   1DA3 C0 00 00      cmp b, 0
4248   1DA6 C6 2F 1E      je _for105_exit
4249   1DA9             _for105_block:
4250   1DA9             ;; if(!label_table[i].name[0]){ 
4251   1DA9             _if106_cond:
4252   1DA9 3B 11 3D      mov d, _label_table_data ; $label_table
4253   1DAC D7            push a
4254   1DAD DA            push d
4255   1DAE FA FF FF      lea d, [bp + -1] ; $i
4256   1DB1 2A            mov b, [d]
4257   1DB2 E7            pop d
4258   1DB3 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4259   1DB7 E4            pop a
4260   1DB8 58 00 00      add d, 0
4261   1DBB FD 14         clb
4262   1DBD D7            push a
4263   1DBE DA            push d
4264   1DBF 26 00 00      mov b, $0
4265   1DC2 E7            pop d
4266   1DC3 5A            add d, b
4267   1DC4 E4            pop a
4268   1DC5 32            mov bl, [d]
4269   1DC6 A7 00         mov bh, 0
4270   1DC8 C0 00 00      cmp b, 0
4271   1DCB FD 71         seq ; !
4272   1DCD C0 00 00      cmp b, 0
4273   1DD0 C6 1D 1E      je _if106_exit
4274   1DD3             _if106_true:
4275   1DD3             ;; strcpy(label_table[i].name, name); 
4276   1DD3 FA 07 00      lea d, [bp + 7] ; $name
4277   1DD6 2A            mov b, [d]
4278   1DD7 FD AB         swp b
4279   1DD9 D8            push b
4280   1DDA 3B 11 3D      mov d, _label_table_data ; $label_table
4281   1DDD D7            push a
4282   1DDE DA            push d
4283   1DDF FA FF FF      lea d, [bp + -1] ; $i
4284   1DE2 2A            mov b, [d]
4285   1DE3 E7            pop d
4286   1DE4 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4287   1DE8 E4            pop a
4288   1DE9 58 00 00      add d, 0
4289   1DEC FD 14         clb
4290   1DEE 2D            mov b, d
4291   1DEF FD AB         swp b
4292   1DF1 D8            push b
4293   1DF2 07 C9 36      call strcpy
4294   1DF5 51 04 00      add sp, 4
4295   1DF8             ;; label_table[i].address = address; 
4296   1DF8 3B 11 3D      mov d, _label_table_data ; $label_table
4297   1DFB D7            push a
4298   1DFC DA            push d
4299   1DFD FA FF FF      lea d, [bp + -1] ; $i
4300   1E00 2A            mov b, [d]
4301   1E01 E7            pop d
4302   1E02 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4303   1E06 E4            pop a
4304   1E07 58 10 00      add d, 16
4305   1E0A FD 14         clb
4306   1E0C DA            push d
4307   1E0D FA 05 00      lea d, [bp + 5] ; $address
4308   1E10 2A            mov b, [d]
4309   1E11 E7            pop d
4310   1E12 FD 43         mov [d], b
4311   1E14             ;; return i; 
4312   1E14 FA FF FF      lea d, [bp + -1] ; $i
4313   1E17 2A            mov b, [d]
4314   1E18 F9            leave
4315   1E19 09            ret
4316   1E1A 0A 1D 1E      jmp _if106_exit
4317   1E1D             _if106_exit:
4318   1E1D             _for105_update:
4319   1E1D FA FF FF      lea d, [bp + -1] ; $i
4320   1E20 2A            mov b, [d]
4321   1E21 FD 79         mov g, b
4322   1E23 FD 77         inc b
4323   1E25 FA FF FF      lea d, [bp + -1] ; $i
4324   1E28 FD 43         mov [d], b
4325   1E2A FD 27         mov b, g
4326   1E2C 0A 96 1D      jmp _for105_cond
4327   1E2F             _for105_exit:
4328   1E2F F9            leave
4329   1E30 09            ret
4330   1E31             
4331   1E31             get_label_addr:
4332   1E31 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4333   1E34             ; $i 
4334   1E34 52 02 00      sub sp, 2
4335   1E37             ;; for(i = 0; i <  16         ; i++){ 
4336   1E37             _for107_init:
4337   1E37 FA FF FF      lea d, [bp + -1] ; $i
4338   1E3A DA            push d
4339   1E3B 26 00 00      mov b, $0
4340   1E3E E7            pop d
4341   1E3F FD 43         mov [d], b
4342   1E41             _for107_cond:
4343   1E41 FA FF FF      lea d, [bp + -1] ; $i
4344   1E44 2A            mov b, [d]
4345   1E45             ; START RELATIONAL
4346   1E45 D7            push a
4347   1E46 11            mov a, b
4348   1E47 26 10 00      mov b, $10
4349   1E4A B0            cmp a, b
4350   1E4B FD 73         slt ; < 
4351   1E4D E4            pop a
4352   1E4E             ; END RELATIONAL
4353   1E4E C0 00 00      cmp b, 0
4354   1E51 C6 B0 1E      je _for107_exit
4355   1E54             _for107_block:
4356   1E54             ;; if(!strcmp(label_table[i].name, name)){ 
4357   1E54             _if108_cond:
4358   1E54 FA 05 00      lea d, [bp + 5] ; $name
4359   1E57 2A            mov b, [d]
4360   1E58 FD AB         swp b
4361   1E5A D8            push b
4362   1E5B 3B 11 3D      mov d, _label_table_data ; $label_table
4363   1E5E D7            push a
4364   1E5F DA            push d
4365   1E60 FA FF FF      lea d, [bp + -1] ; $i
4366   1E63 2A            mov b, [d]
4367   1E64 E7            pop d
4368   1E65 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4369   1E69 E4            pop a
4370   1E6A 58 00 00      add d, 0
4371   1E6D FD 14         clb
4372   1E6F 2D            mov b, d
4373   1E70 FD AB         swp b
4374   1E72 D8            push b
4375   1E73 07 31 37      call strcmp
4376   1E76 51 04 00      add sp, 4
4377   1E79 C0 00 00      cmp b, 0
4378   1E7C FD 71         seq ; !
4379   1E7E C0 00 00      cmp b, 0
4380   1E81 C6 9E 1E      je _if108_exit
4381   1E84             _if108_true:
4382   1E84             ;; return label_table[i].address; 
4383   1E84 3B 11 3D      mov d, _label_table_data ; $label_table
4384   1E87 D7            push a
4385   1E88 DA            push d
4386   1E89 FA FF FF      lea d, [bp + -1] ; $i
4387   1E8C 2A            mov b, [d]
4388   1E8D E7            pop d
4389   1E8E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4390   1E92 E4            pop a
4391   1E93 58 10 00      add d, 16
4392   1E96 FD 14         clb
4393   1E98 2A            mov b, [d]
4394   1E99 F9            leave
4395   1E9A 09            ret
4396   1E9B 0A 9E 1E      jmp _if108_exit
4397   1E9E             _if108_exit:
4398   1E9E             _for107_update:
4399   1E9E FA FF FF      lea d, [bp + -1] ; $i
4400   1EA1 2A            mov b, [d]
4401   1EA2 FD 79         mov g, b
4402   1EA4 FD 77         inc b
4403   1EA6 FA FF FF      lea d, [bp + -1] ; $i
4404   1EA9 FD 43         mov [d], b
4405   1EAB FD 27         mov b, g
4406   1EAD 0A 41 1E      jmp _for107_cond
4407   1EB0             _for107_exit:
4408   1EB0             ;; error_s("Label does not exist: ", name); 
4409   1EB0 FA 05 00      lea d, [bp + 5] ; $name
4410   1EB3 2A            mov b, [d]
4411   1EB4 FD AB         swp b
4412   1EB6 D8            push b
4413   1EB7 26 68 42      mov b, __s72 ; "Label does not exist: "
4414   1EBA FD AB         swp b
4415   1EBC D8            push b
4416   1EBD 07 4C 31      call error_s
4417   1EC0 51 04 00      add sp, 4
4418   1EC3 F9            leave
4419   1EC4 09            ret
4420   1EC5             
4421   1EC5             label_exists:
4422   1EC5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4423   1EC8             ; $i 
4424   1EC8 52 02 00      sub sp, 2
4425   1ECB             ;; for(i = 0; i <  16         ; i++){ 
4426   1ECB             _for109_init:
4427   1ECB FA FF FF      lea d, [bp + -1] ; $i
4428   1ECE DA            push d
4429   1ECF 26 00 00      mov b, $0
4430   1ED2 E7            pop d
4431   1ED3 FD 43         mov [d], b
4432   1ED5             _for109_cond:
4433   1ED5 FA FF FF      lea d, [bp + -1] ; $i
4434   1ED8 2A            mov b, [d]
4435   1ED9             ; START RELATIONAL
4436   1ED9 D7            push a
4437   1EDA 11            mov a, b
4438   1EDB 26 10 00      mov b, $10
4439   1EDE B0            cmp a, b
4440   1EDF FD 73         slt ; < 
4441   1EE1 E4            pop a
4442   1EE2             ; END RELATIONAL
4443   1EE2 C0 00 00      cmp b, 0
4444   1EE5 C6 33 1F      je _for109_exit
4445   1EE8             _for109_block:
4446   1EE8             ;; if(!strcmp(label_table[i].name, name)){ 
4447   1EE8             _if110_cond:
4448   1EE8 FA 05 00      lea d, [bp + 5] ; $name
4449   1EEB 2A            mov b, [d]
4450   1EEC FD AB         swp b
4451   1EEE D8            push b
4452   1EEF 3B 11 3D      mov d, _label_table_data ; $label_table
4453   1EF2 D7            push a
4454   1EF3 DA            push d
4455   1EF4 FA FF FF      lea d, [bp + -1] ; $i
4456   1EF7 2A            mov b, [d]
4457   1EF8 E7            pop d
4458   1EF9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4459   1EFD E4            pop a
4460   1EFE 58 00 00      add d, 0
4461   1F01 FD 14         clb
4462   1F03 2D            mov b, d
4463   1F04 FD AB         swp b
4464   1F06 D8            push b
4465   1F07 07 31 37      call strcmp
4466   1F0A 51 04 00      add sp, 4
4467   1F0D C0 00 00      cmp b, 0
4468   1F10 FD 71         seq ; !
4469   1F12 C0 00 00      cmp b, 0
4470   1F15 C6 21 1F      je _if110_exit
4471   1F18             _if110_true:
4472   1F18             ;; return i; 
4473   1F18 FA FF FF      lea d, [bp + -1] ; $i
4474   1F1B 2A            mov b, [d]
4475   1F1C F9            leave
4476   1F1D 09            ret
4477   1F1E 0A 21 1F      jmp _if110_exit
4478   1F21             _if110_exit:
4479   1F21             _for109_update:
4480   1F21 FA FF FF      lea d, [bp + -1] ; $i
4481   1F24 2A            mov b, [d]
4482   1F25 FD 79         mov g, b
4483   1F27 FD 77         inc b
4484   1F29 FA FF FF      lea d, [bp + -1] ; $i
4485   1F2C FD 43         mov [d], b
4486   1F2E FD 27         mov b, g
4487   1F30 0A D5 1E      jmp _for109_cond
4488   1F33             _for109_exit:
4489   1F33             ;; return -1; 
4490   1F33 26 01 00      mov b, $1
4491   1F36 FD 97         neg b
4492   1F38 F9            leave
4493   1F39 09            ret
4494   1F3A             
4495   1F3A             print_info:
4496   1F3A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4497   1F3D             ;; if(print_information){ 
4498   1F3D             _if111_cond:
4499   1F3D 3B 35 3E      mov d, _print_information ; $print_information
4500   1F40 32            mov bl, [d]
4501   1F41 A7 00         mov bh, 0
4502   1F43 C0 00 00      cmp b, 0
4503   1F46 C6 73 1F      je _if111_exit
4504   1F49             _if111_true:
4505   1F49             ;; print(s1); 
4506   1F49 FA 09 00      lea d, [bp + 9] ; $s1
4507   1F4C 2A            mov b, [d]
4508   1F4D FD AB         swp b
4509   1F4F D8            push b
4510   1F50 07 0C 36      call print
4511   1F53 51 02 00      add sp, 2
4512   1F56             ;; print(s2); 
4513   1F56 FA 07 00      lea d, [bp + 7] ; $s2
4514   1F59 2A            mov b, [d]
4515   1F5A FD AB         swp b
4516   1F5C D8            push b
4517   1F5D 07 0C 36      call print
4518   1F60 51 02 00      add sp, 2
4519   1F63             ;; print(s3); 
4520   1F63 FA 05 00      lea d, [bp + 5] ; $s3
4521   1F66 2A            mov b, [d]
4522   1F67 FD AB         swp b
4523   1F69 D8            push b
4524   1F6A 07 0C 36      call print
4525   1F6D 51 02 00      add sp, 2
4526   1F70 0A 73 1F      jmp _if111_exit
4527   1F73             _if111_exit:
4528   1F73 F9            leave
4529   1F74 09            ret
4530   1F75             
4531   1F75             print_info2:
4532   1F75 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4533   1F78             ;; if(print_information){ 
4534   1F78             _if112_cond:
4535   1F78 3B 35 3E      mov d, _print_information ; $print_information
4536   1F7B 32            mov bl, [d]
4537   1F7C A7 00         mov bh, 0
4538   1F7E C0 00 00      cmp b, 0
4539   1F81 C6 AE 1F      je _if112_exit
4540   1F84             _if112_true:
4541   1F84             ;; print(s1); 
4542   1F84 FA 09 00      lea d, [bp + 9] ; $s1
4543   1F87 2A            mov b, [d]
4544   1F88 FD AB         swp b
4545   1F8A D8            push b
4546   1F8B 07 0C 36      call print
4547   1F8E 51 02 00      add sp, 2
4548   1F91             ;; printu(n); 
4549   1F91 FA 07 00      lea d, [bp + 7] ; $n
4550   1F94 2A            mov b, [d]
4551   1F95 FD AB         swp b
4552   1F97 D8            push b
4553   1F98 07 33 35      call printu
4554   1F9B 51 02 00      add sp, 2
4555   1F9E             ;; print(s2); 
4556   1F9E FA 05 00      lea d, [bp + 5] ; $s2
4557   1FA1 2A            mov b, [d]
4558   1FA2 FD AB         swp b
4559   1FA4 D8            push b
4560   1FA5 07 0C 36      call print
4561   1FA8 51 02 00      add sp, 2
4562   1FAB 0A AE 1F      jmp _if112_exit
4563   1FAE             _if112_exit:
4564   1FAE F9            leave
4565   1FAF 09            ret
4566   1FB0             
4567   1FB0             search_opcode:
4568   1FB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4569   1FB3             ; $opcode_str 
4570   1FB3             ; $opcode_hex 
4571   1FB3             ; $hex_p 
4572   1FB3             ; $op_p 
4573   1FB3             ; $tbl_p 
4574   1FB3             ; $return_opcode 
4575   1FB3 52 3D 00      sub sp, 61
4576   1FB6             ;; tbl_p = opcode_table; 
4577   1FB6 FA DE FF      lea d, [bp + -34] ; $tbl_p
4578   1FB9 DA            push d
4579   1FBA 3B 84 3F      mov d, _opcode_table ; $opcode_table
4580   1FBD 2A            mov b, [d]
4581   1FBE E7            pop d
4582   1FBF FD 43         mov [d], b
4583   1FC1             ;; for(;;){ 
4584   1FC1             _for113_init:
4585   1FC1             _for113_cond:
4586   1FC1             _for113_block:
4587   1FC1             ;; op_p = opcode_str; 
4588   1FC1 FA E0 FF      lea d, [bp + -32] ; $op_p
4589   1FC4 DA            push d
4590   1FC5 FA E9 FF      lea d, [bp + -23] ; $opcode_str
4591   1FC8 2D            mov b, d
4592   1FC9 E7            pop d
4593   1FCA FD 43         mov [d], b
4594   1FCC             ;; hex_p = opcode_hex; 
4595   1FCC FA E2 FF      lea d, [bp + -30] ; $hex_p
4596   1FCF DA            push d
4597   1FD0 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
4598   1FD3 2D            mov b, d
4599   1FD4 E7            pop d
4600   1FD5 FD 43         mov [d], b
4601   1FD7             ;; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
4602   1FD7             _while114_cond:
4603   1FD7 FA DE FF      lea d, [bp + -34] ; $tbl_p
4604   1FDA 2A            mov b, [d]
4605   1FDB 74            mov d, b
4606   1FDC 32            mov bl, [d]
4607   1FDD A7 00         mov bh, 0
4608   1FDF             ; START RELATIONAL
4609   1FDF D7            push a
4610   1FE0 11            mov a, b
4611   1FE1 26 20 00      mov b, $20
4612   1FE4 B0            cmp a, b
4613   1FE5 FD 72         sneq ; !=
4614   1FE7 E4            pop a
4615   1FE8             ; END RELATIONAL
4616   1FE8 C0 00 00      cmp b, 0
4617   1FEB C6 17 20      je _while114_exit
4618   1FEE             _while114_block:
4619   1FEE             ;; *op_p++ = *tbl_p++; 
4620   1FEE FA E0 FF      lea d, [bp + -32] ; $op_p
4621   1FF1 2A            mov b, [d]
4622   1FF2 FD 79         mov g, b
4623   1FF4 FD 77         inc b
4624   1FF6 FA E0 FF      lea d, [bp + -32] ; $op_p
4625   1FF9 FD 43         mov [d], b
4626   1FFB FD 27         mov b, g
4627   1FFD D8            push b
4628   1FFE FA DE FF      lea d, [bp + -34] ; $tbl_p
4629   2001 2A            mov b, [d]
4630   2002 FD 79         mov g, b
4631   2004 FD 77         inc b
4632   2006 FA DE FF      lea d, [bp + -34] ; $tbl_p
4633   2009 FD 43         mov [d], b
4634   200B FD 27         mov b, g
4635   200D 74            mov d, b
4636   200E 32            mov bl, [d]
4637   200F A7 00         mov bh, 0
4638   2011 E7            pop d
4639   2012 FD 3E         mov [d], bl
4640   2014 0A D7 1F      jmp _while114_cond
4641   2017             _while114_exit:
4642   2017             ;; *op_p++ = *tbl_p++; 
4643   2017 FA E0 FF      lea d, [bp + -32] ; $op_p
4644   201A 2A            mov b, [d]
4645   201B FD 79         mov g, b
4646   201D FD 77         inc b
4647   201F FA E0 FF      lea d, [bp + -32] ; $op_p
4648   2022 FD 43         mov [d], b
4649   2024 FD 27         mov b, g
4650   2026 D8            push b
4651   2027 FA DE FF      lea d, [bp + -34] ; $tbl_p
4652   202A 2A            mov b, [d]
4653   202B FD 79         mov g, b
4654   202D FD 77         inc b
4655   202F FA DE FF      lea d, [bp + -34] ; $tbl_p
4656   2032 FD 43         mov [d], b
4657   2034 FD 27         mov b, g
4658   2036 74            mov d, b
4659   2037 32            mov bl, [d]
4660   2038 A7 00         mov bh, 0
4661   203A E7            pop d
4662   203B FD 3E         mov [d], bl
4663   203D             ;; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
4664   203D             _while115_cond:
4665   203D FA DE FF      lea d, [bp + -34] ; $tbl_p
4666   2040 2A            mov b, [d]
4667   2041 74            mov d, b
4668   2042 32            mov bl, [d]
4669   2043 A7 00         mov bh, 0
4670   2045             ; START RELATIONAL
4671   2045 D7            push a
4672   2046 11            mov a, b
4673   2047 26 20 00      mov b, $20
4674   204A B0            cmp a, b
4675   204B FD 72         sneq ; !=
4676   204D E4            pop a
4677   204E             ; END RELATIONAL
4678   204E C0 00 00      cmp b, 0
4679   2051 C6 7D 20      je _while115_exit
4680   2054             _while115_block:
4681   2054             ;; *op_p++ = *tbl_p++; 
4682   2054 FA E0 FF      lea d, [bp + -32] ; $op_p
4683   2057 2A            mov b, [d]
4684   2058 FD 79         mov g, b
4685   205A FD 77         inc b
4686   205C FA E0 FF      lea d, [bp + -32] ; $op_p
4687   205F FD 43         mov [d], b
4688   2061 FD 27         mov b, g
4689   2063 D8            push b
4690   2064 FA DE FF      lea d, [bp + -34] ; $tbl_p
4691   2067 2A            mov b, [d]
4692   2068 FD 79         mov g, b
4693   206A FD 77         inc b
4694   206C FA DE FF      lea d, [bp + -34] ; $tbl_p
4695   206F FD 43         mov [d], b
4696   2071 FD 27         mov b, g
4697   2073 74            mov d, b
4698   2074 32            mov bl, [d]
4699   2075 A7 00         mov bh, 0
4700   2077 E7            pop d
4701   2078 FD 3E         mov [d], bl
4702   207A 0A 3D 20      jmp _while115_cond
4703   207D             _while115_exit:
4704   207D             ;; *op_p = '\0'; 
4705   207D FA E0 FF      lea d, [bp + -32] ; $op_p
4706   2080 2A            mov b, [d]
4707   2081 D8            push b
4708   2082 26 00 00      mov b, $0
4709   2085 E7            pop d
4710   2086 FD 3E         mov [d], bl
4711   2088             ;; if(!strcmp(opcode_str, what_opcode)){ 
4712   2088             _if116_cond:
4713   2088 FA 05 00      lea d, [bp + 5] ; $what_opcode
4714   208B 2A            mov b, [d]
4715   208C FD AB         swp b
4716   208E D8            push b
4717   208F FA E9 FF      lea d, [bp + -23] ; $opcode_str
4718   2092 2D            mov b, d
4719   2093 FD AB         swp b
4720   2095 D8            push b
4721   2096 07 31 37      call strcmp
4722   2099 51 04 00      add sp, 4
4723   209C C0 00 00      cmp b, 0
4724   209F FD 71         seq ; !
4725   20A1 C0 00 00      cmp b, 0
4726   20A4 C6 BD 21      je _if116_else
4727   20A7             _if116_true:
4728   20A7             ;; strcpy(return_opcode.name, what_opcode); 
4729   20A7 FA 05 00      lea d, [bp + 5] ; $what_opcode
4730   20AA 2A            mov b, [d]
4731   20AB FD AB         swp b
4732   20AD D8            push b
4733   20AE FA C4 FF      lea d, [bp + -60] ; $return_opcode
4734   20B1 58 00 00      add d, 0
4735   20B4 FD 14         clb
4736   20B6 2D            mov b, d
4737   20B7 FD AB         swp b
4738   20B9 D8            push b
4739   20BA 07 C9 36      call strcpy
4740   20BD 51 04 00      add sp, 4
4741   20C0             ;; while(*tbl_p == ' ') tbl_p++; 
4742   20C0             _while117_cond:
4743   20C0 FA DE FF      lea d, [bp + -34] ; $tbl_p
4744   20C3 2A            mov b, [d]
4745   20C4 74            mov d, b
4746   20C5 32            mov bl, [d]
4747   20C6 A7 00         mov bh, 0
4748   20C8             ; START RELATIONAL
4749   20C8 D7            push a
4750   20C9 11            mov a, b
4751   20CA 26 20 00      mov b, $20
4752   20CD B0            cmp a, b
4753   20CE FD 71         seq ; ==
4754   20D0 E4            pop a
4755   20D1             ; END RELATIONAL
4756   20D1 C0 00 00      cmp b, 0
4757   20D4 C6 E9 20      je _while117_exit
4758   20D7             _while117_block:
4759   20D7             ;; tbl_p++; 
4760   20D7 FA DE FF      lea d, [bp + -34] ; $tbl_p
4761   20DA 2A            mov b, [d]
4762   20DB FD 79         mov g, b
4763   20DD FD 77         inc b
4764   20DF FA DE FF      lea d, [bp + -34] ; $tbl_p
4765   20E2 FD 43         mov [d], b
4766   20E4 FD 27         mov b, g
4767   20E6 0A C0 20      jmp _while117_cond
4768   20E9             _while117_exit:
4769   20E9             ;; while(is_hex_digit(*tbl_p)) *hex_p++ = *tbl_p++; // Copy hex opcode 
4770   20E9             _while118_cond:
4771   20E9 FA DE FF      lea d, [bp + -34] ; $tbl_p
4772   20EC 2A            mov b, [d]
4773   20ED 74            mov d, b
4774   20EE 32            mov bl, [d]
4775   20EF A7 00         mov bh, 0
4776   20F1 DD            push bl
4777   20F2 07 5D 24      call is_hex_digit
4778   20F5 51 01 00      add sp, 1
4779   20F8 C0 00 00      cmp b, 0
4780   20FB C6 27 21      je _while118_exit
4781   20FE             _while118_block:
4782   20FE             ;; *hex_p++ = *tbl_p++; // Copy hex opcode 
4783   20FE FA E2 FF      lea d, [bp + -30] ; $hex_p
4784   2101 2A            mov b, [d]
4785   2102 FD 79         mov g, b
4786   2104 FD 77         inc b
4787   2106 FA E2 FF      lea d, [bp + -30] ; $hex_p
4788   2109 FD 43         mov [d], b
4789   210B FD 27         mov b, g
4790   210D D8            push b
4791   210E FA DE FF      lea d, [bp + -34] ; $tbl_p
4792   2111 2A            mov b, [d]
4793   2112 FD 79         mov g, b
4794   2114 FD 77         inc b
4795   2116 FA DE FF      lea d, [bp + -34] ; $tbl_p
4796   2119 FD 43         mov [d], b
4797   211B FD 27         mov b, g
4798   211D 74            mov d, b
4799   211E 32            mov bl, [d]
4800   211F A7 00         mov bh, 0
4801   2121 E7            pop d
4802   2122 FD 3E         mov [d], bl
4803   2124 0A E9 20      jmp _while118_cond
4804   2127             _while118_exit:
4805   2127             ;; *hex_p = '\0'; 
4806   2127 FA E2 FF      lea d, [bp + -30] ; $hex_p
4807   212A 2A            mov b, [d]
4808   212B D8            push b
4809   212C 26 00 00      mov b, $0
4810   212F E7            pop d
4811   2130 FD 3E         mov [d], bl
4812   2132             ;; if(strlen(opcode_hex) == 4){ 
4813   2132             _if119_cond:
4814   2132 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
4815   2135 2D            mov b, d
4816   2136 FD AB         swp b
4817   2138 D8            push b
4818   2139 07 4B 38      call strlen
4819   213C 51 02 00      add sp, 2
4820   213F             ; START RELATIONAL
4821   213F D7            push a
4822   2140 11            mov a, b
4823   2141 26 04 00      mov b, $4
4824   2144 B0            cmp a, b
4825   2145 FD 71         seq ; ==
4826   2147 E4            pop a
4827   2148             ; END RELATIONAL
4828   2148 C0 00 00      cmp b, 0
4829   214B C6 8C 21      je _if119_else
4830   214E             _if119_true:
4831   214E             ;; return_opcode.opcode_type = 1; 
4832   214E FA C4 FF      lea d, [bp + -60] ; $return_opcode
4833   2151 58 19 00      add d, 25
4834   2154 FD 14         clb
4835   2156 DA            push d
4836   2157 26 01 00      mov b, $1
4837   215A E7            pop d
4838   215B FD 3E         mov [d], bl
4839   215D             ;; *(opcode_hex + 2) = '\0'; 
4840   215D FA E4 FF      lea d, [bp + -28] ; $opcode_hex
4841   2160 2D            mov b, d
4842   2161             ; START TERMS
4843   2161 D7            push a
4844   2162 11            mov a, b
4845   2163 26 02 00      mov b, $2
4846   2166 54            add a, b
4847   2167 27            mov b, a
4848   2168 E4            pop a
4849   2169             ; END TERMS
4850   2169 D8            push b
4851   216A 26 00 00      mov b, $0
4852   216D E7            pop d
4853   216E FD 43         mov [d], b
4854   2170             ;; return_opcode.opcode = hex_to_int(opcode_hex); 
4855   2170 FA C4 FF      lea d, [bp + -60] ; $return_opcode
4856   2173 58 18 00      add d, 24
4857   2176 FD 14         clb
4858   2178 DA            push d
4859   2179 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
4860   217C 2D            mov b, d
4861   217D FD AB         swp b
4862   217F D8            push b
4863   2180 07 D5 32      call hex_to_int
4864   2183 51 02 00      add sp, 2
4865   2186 E7            pop d
4866   2187 FD 3E         mov [d], bl
4867   2189 0A B4 21      jmp _if119_exit
4868   218C             _if119_else:
4869   218C             ;; return_opcode.opcode_type = 0; 
4870   218C FA C4 FF      lea d, [bp + -60] ; $return_opcode
4871   218F 58 19 00      add d, 25
4872   2192 FD 14         clb
4873   2194 DA            push d
4874   2195 26 00 00      mov b, $0
4875   2198 E7            pop d
4876   2199 FD 3E         mov [d], bl
4877   219B             ;; return_opcode.opcode = hex_to_int(opcode_hex); 
4878   219B FA C4 FF      lea d, [bp + -60] ; $return_opcode
4879   219E 58 18 00      add d, 24
4880   21A1 FD 14         clb
4881   21A3 DA            push d
4882   21A4 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
4883   21A7 2D            mov b, d
4884   21A8 FD AB         swp b
4885   21AA D8            push b
4886   21AB 07 D5 32      call hex_to_int
4887   21AE 51 02 00      add sp, 2
4888   21B1 E7            pop d
4889   21B2 FD 3E         mov [d], bl
4890   21B4             _if119_exit:
4891   21B4             ;; return return_opcode; 
4892   21B4 FA C4 FF      lea d, [bp + -60] ; $return_opcode
4893   21B7 2D            mov b, d
4894   21B8 F9            leave
4895   21B9 09            ret
4896   21BA 0A 28 22      jmp _if116_exit
4897   21BD             _if116_else:
4898   21BD             ;; while(*tbl_p != '\n') tbl_p++; 
4899   21BD             _while120_cond:
4900   21BD FA DE FF      lea d, [bp + -34] ; $tbl_p
4901   21C0 2A            mov b, [d]
4902   21C1 74            mov d, b
4903   21C2 32            mov bl, [d]
4904   21C3 A7 00         mov bh, 0
4905   21C5             ; START RELATIONAL
4906   21C5 D7            push a
4907   21C6 11            mov a, b
4908   21C7 26 0A 00      mov b, $a
4909   21CA B0            cmp a, b
4910   21CB FD 72         sneq ; !=
4911   21CD E4            pop a
4912   21CE             ; END RELATIONAL
4913   21CE C0 00 00      cmp b, 0
4914   21D1 C6 E6 21      je _while120_exit
4915   21D4             _while120_block:
4916   21D4             ;; tbl_p++; 
4917   21D4 FA DE FF      lea d, [bp + -34] ; $tbl_p
4918   21D7 2A            mov b, [d]
4919   21D8 FD 79         mov g, b
4920   21DA FD 77         inc b
4921   21DC FA DE FF      lea d, [bp + -34] ; $tbl_p
4922   21DF FD 43         mov [d], b
4923   21E1 FD 27         mov b, g
4924   21E3 0A BD 21      jmp _while120_cond
4925   21E6             _while120_exit:
4926   21E6             ;; while(*tbl_p == '\n') tbl_p++; 
4927   21E6             _while121_cond:
4928   21E6 FA DE FF      lea d, [bp + -34] ; $tbl_p
4929   21E9 2A            mov b, [d]
4930   21EA 74            mov d, b
4931   21EB 32            mov bl, [d]
4932   21EC A7 00         mov bh, 0
4933   21EE             ; START RELATIONAL
4934   21EE D7            push a
4935   21EF 11            mov a, b
4936   21F0 26 0A 00      mov b, $a
4937   21F3 B0            cmp a, b
4938   21F4 FD 71         seq ; ==
4939   21F6 E4            pop a
4940   21F7             ; END RELATIONAL
4941   21F7 C0 00 00      cmp b, 0
4942   21FA C6 0F 22      je _while121_exit
4943   21FD             _while121_block:
4944   21FD             ;; tbl_p++; 
4945   21FD FA DE FF      lea d, [bp + -34] ; $tbl_p
4946   2200 2A            mov b, [d]
4947   2201 FD 79         mov g, b
4948   2203 FD 77         inc b
4949   2205 FA DE FF      lea d, [bp + -34] ; $tbl_p
4950   2208 FD 43         mov [d], b
4951   220A FD 27         mov b, g
4952   220C 0A E6 21      jmp _while121_cond
4953   220F             _while121_exit:
4954   220F             ;; if(!*tbl_p) break; 
4955   220F             _if122_cond:
4956   220F FA DE FF      lea d, [bp + -34] ; $tbl_p
4957   2212 2A            mov b, [d]
4958   2213 74            mov d, b
4959   2214 32            mov bl, [d]
4960   2215 A7 00         mov bh, 0
4961   2217 C0 00 00      cmp b, 0
4962   221A FD 71         seq ; !
4963   221C C0 00 00      cmp b, 0
4964   221F C6 28 22      je _if122_exit
4965   2222             _if122_true:
4966   2222             ;; break; 
4967   2222 0A 2B 22      jmp _for113_exit ; for break
4968   2225 0A 28 22      jmp _if122_exit
4969   2228             _if122_exit:
4970   2228             _if116_exit:
4971   2228             _for113_update:
4972   2228 0A C1 1F      jmp _for113_cond
4973   222B             _for113_exit:
4974   222B             ;; return_opcode.name[0] = '\0'; 
4975   222B FA C4 FF      lea d, [bp + -60] ; $return_opcode
4976   222E 58 00 00      add d, 0
4977   2231 FD 14         clb
4978   2233 D7            push a
4979   2234 DA            push d
4980   2235 26 00 00      mov b, $0
4981   2238 E7            pop d
4982   2239 5A            add d, b
4983   223A E4            pop a
4984   223B DA            push d
4985   223C 26 00 00      mov b, $0
4986   223F E7            pop d
4987   2240 FD 3E         mov [d], bl
4988   2242             ;; return return_opcode; 
4989   2242 FA C4 FF      lea d, [bp + -60] ; $return_opcode
4990   2245 2D            mov b, d
4991   2246 F9            leave
4992   2247 09            ret
4993   2248             
4994   2248             forwards:
4995   2248 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4996   224B             ;; bin_p = bin_p + amount; 
4997   224B 3B 82 3F      mov d, _bin_p ; $bin_p
4998   224E DA            push d
4999   224F 3B 82 3F      mov d, _bin_p ; $bin_p
5000   2252 2A            mov b, [d]
5001   2253             ; START TERMS
5002   2253 D7            push a
5003   2254 11            mov a, b
5004   2255 FA 05 00      lea d, [bp + 5] ; $amount
5005   2258 32            mov bl, [d]
5006   2259 A7 00         mov bh, 0
5007   225B 54            add a, b
5008   225C 27            mov b, a
5009   225D E4            pop a
5010   225E             ; END TERMS
5011   225E E7            pop d
5012   225F FD 43         mov [d], b
5013   2261             ;; prog_size = prog_size + amount; 
5014   2261 3B 9C 3F      mov d, _prog_size ; $prog_size
5015   2264 DA            push d
5016   2265 3B 9C 3F      mov d, _prog_size ; $prog_size
5017   2268 2A            mov b, [d]
5018   2269             ; START TERMS
5019   2269 D7            push a
5020   226A 11            mov a, b
5021   226B FA 05 00      lea d, [bp + 5] ; $amount
5022   226E 32            mov bl, [d]
5023   226F A7 00         mov bh, 0
5024   2271 54            add a, b
5025   2272 27            mov b, a
5026   2273 E4            pop a
5027   2274             ; END TERMS
5028   2274 E7            pop d
5029   2275 FD 43         mov [d], b
5030   2277             ;; pc = pc + amount; 
5031   2277 3B 33 3E      mov d, _pc ; $pc
5032   227A DA            push d
5033   227B 3B 33 3E      mov d, _pc ; $pc
5034   227E 2A            mov b, [d]
5035   227F             ; START TERMS
5036   227F D7            push a
5037   2280 11            mov a, b
5038   2281 FA 05 00      lea d, [bp + 5] ; $amount
5039   2284 32            mov bl, [d]
5040   2285 A7 00         mov bh, 0
5041   2287 54            add a, b
5042   2288 27            mov b, a
5043   2289 E4            pop a
5044   228A             ; END TERMS
5045   228A E7            pop d
5046   228B FD 43         mov [d], b
5047   228D F9            leave
5048   228E 09            ret
5049   228F             
5050   228F             emit_byte:
5051   228F F8 00 00      enter 0 ; (push bp; mov bp, sp)
5052   2292             ;; if(!emit_override){ 
5053   2292             _if123_cond:
5054   2292 FA 05 00      lea d, [bp + 5] ; $emit_override
5055   2295 32            mov bl, [d]
5056   2296 A7 00         mov bh, 0
5057   2298 C0 00 00      cmp b, 0
5058   229B FD 71         seq ; !
5059   229D C0 00 00      cmp b, 0
5060   22A0 C6 B4 22      je _if123_exit
5061   22A3             _if123_true:
5062   22A3             ;; *bin_p = byte; 
5063   22A3 3B 82 3F      mov d, _bin_p ; $bin_p
5064   22A6 2A            mov b, [d]
5065   22A7 D8            push b
5066   22A8 FA 06 00      lea d, [bp + 6] ; $byte
5067   22AB 32            mov bl, [d]
5068   22AC A7 00         mov bh, 0
5069   22AE E7            pop d
5070   22AF FD 3E         mov [d], bl
5071   22B1 0A B4 22      jmp _if123_exit
5072   22B4             _if123_exit:
5073   22B4             ;; forwards(1); 
5074   22B4 26 01 00      mov b, $1
5075   22B7 DD            push bl
5076   22B8 07 48 22      call forwards
5077   22BB 51 01 00      add sp, 1
5078   22BE F9            leave
5079   22BF 09            ret
5080   22C0             
5081   22C0             emit_word:
5082   22C0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5083   22C3             ;; if(!emit_override){ 
5084   22C3             _if124_cond:
5085   22C3 FA 05 00      lea d, [bp + 5] ; $emit_override
5086   22C6 32            mov bl, [d]
5087   22C7 A7 00         mov bh, 0
5088   22C9 C0 00 00      cmp b, 0
5089   22CC FD 71         seq ; !
5090   22CE C0 00 00      cmp b, 0
5091   22D1 C6 E3 22      je _if124_exit
5092   22D4             _if124_true:
5093   22D4             ;; *((int*)bin_p) = word; 
5094   22D4 3B 82 3F      mov d, _bin_p ; $bin_p
5095   22D7 2A            mov b, [d]
5096   22D8 D8            push b
5097   22D9 FA 06 00      lea d, [bp + 6] ; $word
5098   22DC 2A            mov b, [d]
5099   22DD E7            pop d
5100   22DE FD 43         mov [d], b
5101   22E0 0A E3 22      jmp _if124_exit
5102   22E3             _if124_exit:
5103   22E3             ;; forwards(2); 
5104   22E3 26 02 00      mov b, $2
5105   22E6 DD            push bl
5106   22E7 07 48 22      call forwards
5107   22EA 51 01 00      add sp, 1
5108   22ED F9            leave
5109   22EE 09            ret
5110   22EF             
5111   22EF             back:
5112   22EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
5113   22F2             ; $t 
5114   22F2 52 02 00      sub sp, 2
5115   22F5             ;; t = token; 
5116   22F5 FA FF FF      lea d, [bp + -1] ; $t
5117   22F8 DA            push d
5118   22F9 3B 3C 3E      mov d, _token_data ; $token
5119   22FC 2D            mov b, d
5120   22FD E7            pop d
5121   22FE FD 43         mov [d], b
5122   2300             ;; while(*t){ 
5123   2300             _while125_cond:
5124   2300 FA FF FF      lea d, [bp + -1] ; $t
5125   2303 2A            mov b, [d]
5126   2304 74            mov d, b
5127   2305 32            mov bl, [d]
5128   2306 A7 00         mov bh, 0
5129   2308 C0 00 00      cmp b, 0
5130   230B C6 2F 23      je _while125_exit
5131   230E             _while125_block:
5132   230E             ;; prog--; 
5133   230E 3B 3A 3E      mov d, _prog ; $prog
5134   2311 2A            mov b, [d]
5135   2312 FD 79         mov g, b
5136   2314 FD 7D         dec b
5137   2316 3B 3A 3E      mov d, _prog ; $prog
5138   2319 FD 43         mov [d], b
5139   231B FD 27         mov b, g
5140   231D             ;; t++; 
5141   231D FA FF FF      lea d, [bp + -1] ; $t
5142   2320 2A            mov b, [d]
5143   2321 FD 79         mov g, b
5144   2323 FD 77         inc b
5145   2325 FA FF FF      lea d, [bp + -1] ; $t
5146   2328 FD 43         mov [d], b
5147   232A FD 27         mov b, g
5148   232C 0A 00 23      jmp _while125_cond
5149   232F             _while125_exit:
5150   232F F9            leave
5151   2330 09            ret
5152   2331             
5153   2331             get_path:
5154   2331 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5155   2334             ; $t 
5156   2334 52 02 00      sub sp, 2
5157   2337             ;; *token = '\0'; 
5158   2337 3B 3C 3E      mov d, _token_data ; $token
5159   233A 2D            mov b, d
5160   233B D8            push b
5161   233C 26 00 00      mov b, $0
5162   233F E7            pop d
5163   2340 FD 3E         mov [d], bl
5164   2342             ;; tok = 0; 
5165   2342 3B 36 3E      mov d, _tok ; $tok
5166   2345 DA            push d
5167   2346 26 00 00      mov b, $0
5168   2349 E7            pop d
5169   234A FD 43         mov [d], b
5170   234C             ;; toktype = 0; 
5171   234C 3B 38 3E      mov d, _toktype ; $toktype
5172   234F DA            push d
5173   2350 26 00 00      mov b, $0
5174   2353 E7            pop d
5175   2354 FD 43         mov [d], b
5176   2356             ;; t = token; 
5177   2356 FA FF FF      lea d, [bp + -1] ; $t
5178   2359 DA            push d
5179   235A 3B 3C 3E      mov d, _token_data ; $token
5180   235D 2D            mov b, d
5181   235E E7            pop d
5182   235F FD 43         mov [d], b
5183   2361             ;; while(is_space(*prog)) prog++; 
5184   2361             _while126_cond:
5185   2361 3B 3A 3E      mov d, _prog ; $prog
5186   2364 2A            mov b, [d]
5187   2365 74            mov d, b
5188   2366 32            mov bl, [d]
5189   2367 A7 00         mov bh, 0
5190   2369 DD            push bl
5191   236A 07 96 38      call is_space
5192   236D 51 01 00      add sp, 1
5193   2370 C0 00 00      cmp b, 0
5194   2373 C6 88 23      je _while126_exit
5195   2376             _while126_block:
5196   2376             ;; prog++; 
5197   2376 3B 3A 3E      mov d, _prog ; $prog
5198   2379 2A            mov b, [d]
5199   237A FD 79         mov g, b
5200   237C FD 77         inc b
5201   237E 3B 3A 3E      mov d, _prog ; $prog
5202   2381 FD 43         mov [d], b
5203   2383 FD 27         mov b, g
5204   2385 0A 61 23      jmp _while126_cond
5205   2388             _while126_exit:
5206   2388             ;; if(*prog == '\0'){ 
5207   2388             _if127_cond:
5208   2388 3B 3A 3E      mov d, _prog ; $prog
5209   238B 2A            mov b, [d]
5210   238C 74            mov d, b
5211   238D 32            mov bl, [d]
5212   238E A7 00         mov bh, 0
5213   2390             ; START RELATIONAL
5214   2390 D7            push a
5215   2391 11            mov a, b
5216   2392 26 00 00      mov b, $0
5217   2395 B0            cmp a, b
5218   2396 FD 71         seq ; ==
5219   2398 E4            pop a
5220   2399             ; END RELATIONAL
5221   2399 C0 00 00      cmp b, 0
5222   239C C6 AE 23      je _if127_exit
5223   239F             _if127_true:
5224   239F             ;; toktype = END; 
5225   239F 3B 38 3E      mov d, _toktype ; $toktype
5226   23A2 DA            push d
5227   23A3 26 07 00      mov b, 7; END
5228   23A6 E7            pop d
5229   23A7 FD 43         mov [d], b
5230   23A9             ;; return; 
5231   23A9 F9            leave
5232   23AA 09            ret
5233   23AB 0A AE 23      jmp _if127_exit
5234   23AE             _if127_exit:
5235   23AE             ;; while(*prog == '/' || is_alpha(*prog) || is_digit(*prog) || *prog == '_' || *prog == '-' || *prog == '.') { 
5236   23AE             _while128_cond:
5237   23AE 3B 3A 3E      mov d, _prog ; $prog
5238   23B1 2A            mov b, [d]
5239   23B2 74            mov d, b
5240   23B3 32            mov bl, [d]
5241   23B4 A7 00         mov bh, 0
5242   23B6             ; START RELATIONAL
5243   23B6 D7            push a
5244   23B7 11            mov a, b
5245   23B8 26 2F 00      mov b, $2f
5246   23BB B0            cmp a, b
5247   23BC FD 71         seq ; ==
5248   23BE E4            pop a
5249   23BF             ; END RELATIONAL
5250   23BF D7            push a
5251   23C0 11            mov a, b
5252   23C1 3B 3A 3E      mov d, _prog ; $prog
5253   23C4 2A            mov b, [d]
5254   23C5 74            mov d, b
5255   23C6 32            mov bl, [d]
5256   23C7 A7 00         mov bh, 0
5257   23C9 DD            push bl
5258   23CA 07 0A 39      call is_alpha
5259   23CD 51 01 00      add sp, 1
5260   23D0 FD A8         sor a, b ; ||
5261   23D2 11            mov a, b
5262   23D3 3B 3A 3E      mov d, _prog ; $prog
5263   23D6 2A            mov b, [d]
5264   23D7 74            mov d, b
5265   23D8 32            mov bl, [d]
5266   23D9 A7 00         mov bh, 0
5267   23DB DD            push bl
5268   23DC 07 E2 38      call is_digit
5269   23DF 51 01 00      add sp, 1
5270   23E2 FD A8         sor a, b ; ||
5271   23E4 11            mov a, b
5272   23E5 3B 3A 3E      mov d, _prog ; $prog
5273   23E8 2A            mov b, [d]
5274   23E9 74            mov d, b
5275   23EA 32            mov bl, [d]
5276   23EB A7 00         mov bh, 0
5277   23ED             ; START RELATIONAL
5278   23ED D7            push a
5279   23EE 11            mov a, b
5280   23EF 26 5F 00      mov b, $5f
5281   23F2 B0            cmp a, b
5282   23F3 FD 71         seq ; ==
5283   23F5 E4            pop a
5284   23F6             ; END RELATIONAL
5285   23F6 FD A8         sor a, b ; ||
5286   23F8 11            mov a, b
5287   23F9 3B 3A 3E      mov d, _prog ; $prog
5288   23FC 2A            mov b, [d]
5289   23FD 74            mov d, b
5290   23FE 32            mov bl, [d]
5291   23FF A7 00         mov bh, 0
5292   2401             ; START RELATIONAL
5293   2401 D7            push a
5294   2402 11            mov a, b
5295   2403 26 2D 00      mov b, $2d
5296   2406 B0            cmp a, b
5297   2407 FD 71         seq ; ==
5298   2409 E4            pop a
5299   240A             ; END RELATIONAL
5300   240A FD A8         sor a, b ; ||
5301   240C 11            mov a, b
5302   240D 3B 3A 3E      mov d, _prog ; $prog
5303   2410 2A            mov b, [d]
5304   2411 74            mov d, b
5305   2412 32            mov bl, [d]
5306   2413 A7 00         mov bh, 0
5307   2415             ; START RELATIONAL
5308   2415 D7            push a
5309   2416 11            mov a, b
5310   2417 26 2E 00      mov b, $2e
5311   241A B0            cmp a, b
5312   241B FD 71         seq ; ==
5313   241D E4            pop a
5314   241E             ; END RELATIONAL
5315   241E FD A8         sor a, b ; ||
5316   2420 E4            pop a
5317   2421 C0 00 00      cmp b, 0
5318   2424 C6 50 24      je _while128_exit
5319   2427             _while128_block:
5320   2427             ;; *t++ = *prog++; 
5321   2427 FA FF FF      lea d, [bp + -1] ; $t
5322   242A 2A            mov b, [d]
5323   242B FD 79         mov g, b
5324   242D FD 77         inc b
5325   242F FA FF FF      lea d, [bp + -1] ; $t
5326   2432 FD 43         mov [d], b
5327   2434 FD 27         mov b, g
5328   2436 D8            push b
5329   2437 3B 3A 3E      mov d, _prog ; $prog
5330   243A 2A            mov b, [d]
5331   243B FD 79         mov g, b
5332   243D FD 77         inc b
5333   243F 3B 3A 3E      mov d, _prog ; $prog
5334   2442 FD 43         mov [d], b
5335   2444 FD 27         mov b, g
5336   2446 74            mov d, b
5337   2447 32            mov bl, [d]
5338   2448 A7 00         mov bh, 0
5339   244A E7            pop d
5340   244B FD 3E         mov [d], bl
5341   244D 0A AE 23      jmp _while128_cond
5342   2450             _while128_exit:
5343   2450             ;; *t = '\0'; 
5344   2450 FA FF FF      lea d, [bp + -1] ; $t
5345   2453 2A            mov b, [d]
5346   2454 D8            push b
5347   2455 26 00 00      mov b, $0
5348   2458 E7            pop d
5349   2459 FD 3E         mov [d], bl
5350   245B F9            leave
5351   245C 09            ret
5352   245D             
5353   245D             is_hex_digit:
5354   245D F8 00 00      enter 0 ; (push bp; mov bp, sp)
5355   2460             ;; return c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f'; 
5356   2460 FA 05 00      lea d, [bp + 5] ; $c
5357   2463 32            mov bl, [d]
5358   2464 A7 00         mov bh, 0
5359   2466             ; START RELATIONAL
5360   2466 D7            push a
5361   2467 11            mov a, b
5362   2468 26 30 00      mov b, $30
5363   246B B0            cmp a, b
5364   246C FD 80         sge ; >=
5365   246E E4            pop a
5366   246F             ; END RELATIONAL
5367   246F D7            push a
5368   2470 11            mov a, b
5369   2471 FA 05 00      lea d, [bp + 5] ; $c
5370   2474 32            mov bl, [d]
5371   2475 A7 00         mov bh, 0
5372   2477             ; START RELATIONAL
5373   2477 D7            push a
5374   2478 11            mov a, b
5375   2479 26 39 00      mov b, $39
5376   247C B0            cmp a, b
5377   247D FD 74         sle ; <=
5378   247F E4            pop a
5379   2480             ; END RELATIONAL
5380   2480 FD A7         sand a, b ; &&
5381   2482 E4            pop a
5382   2483 D7            push a
5383   2484 11            mov a, b
5384   2485 FA 05 00      lea d, [bp + 5] ; $c
5385   2488 32            mov bl, [d]
5386   2489 A7 00         mov bh, 0
5387   248B             ; START RELATIONAL
5388   248B D7            push a
5389   248C 11            mov a, b
5390   248D 26 41 00      mov b, $41
5391   2490 B0            cmp a, b
5392   2491 FD 80         sge ; >=
5393   2493 E4            pop a
5394   2494             ; END RELATIONAL
5395   2494 D7            push a
5396   2495 11            mov a, b
5397   2496 FA 05 00      lea d, [bp + 5] ; $c
5398   2499 32            mov bl, [d]
5399   249A A7 00         mov bh, 0
5400   249C             ; START RELATIONAL
5401   249C D7            push a
5402   249D 11            mov a, b
5403   249E 26 46 00      mov b, $46
5404   24A1 B0            cmp a, b
5405   24A2 FD 74         sle ; <=
5406   24A4 E4            pop a
5407   24A5             ; END RELATIONAL
5408   24A5 FD A7         sand a, b ; &&
5409   24A7 E4            pop a
5410   24A8 FD A8         sor a, b ; ||
5411   24AA 11            mov a, b
5412   24AB FA 05 00      lea d, [bp + 5] ; $c
5413   24AE 32            mov bl, [d]
5414   24AF A7 00         mov bh, 0
5415   24B1             ; START RELATIONAL
5416   24B1 D7            push a
5417   24B2 11            mov a, b
5418   24B3 26 61 00      mov b, $61
5419   24B6 B0            cmp a, b
5420   24B7 FD 80         sge ; >=
5421   24B9 E4            pop a
5422   24BA             ; END RELATIONAL
5423   24BA D7            push a
5424   24BB 11            mov a, b
5425   24BC FA 05 00      lea d, [bp + 5] ; $c
5426   24BF 32            mov bl, [d]
5427   24C0 A7 00         mov bh, 0
5428   24C2             ; START RELATIONAL
5429   24C2 D7            push a
5430   24C3 11            mov a, b
5431   24C4 26 66 00      mov b, $66
5432   24C7 B0            cmp a, b
5433   24C8 FD 74         sle ; <=
5434   24CA E4            pop a
5435   24CB             ; END RELATIONAL
5436   24CB FD A7         sand a, b ; &&
5437   24CD E4            pop a
5438   24CE FD A8         sor a, b ; ||
5439   24D0 E4            pop a
5440   24D1 F9            leave
5441   24D2 09            ret
5442   24D3             
5443   24D3             get_line:
5444   24D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5445   24D6             ; $t 
5446   24D6 52 02 00      sub sp, 2
5447   24D9             ;; t = string_const; 
5448   24D9 FA FF FF      lea d, [bp + -1] ; $t
5449   24DC DA            push d
5450   24DD 3B 7C 3E      mov d, _string_const_data ; $string_const
5451   24E0 2D            mov b, d
5452   24E1 E7            pop d
5453   24E2 FD 43         mov [d], b
5454   24E4             ;; *t = '\0'; 
5455   24E4 FA FF FF      lea d, [bp + -1] ; $t
5456   24E7 2A            mov b, [d]
5457   24E8 D8            push b
5458   24E9 26 00 00      mov b, $0
5459   24EC E7            pop d
5460   24ED FD 3E         mov [d], bl
5461   24EF             ;; while(*prog != 0x0A && *prog != '\0'){ 
5462   24EF             _while129_cond:
5463   24EF 3B 3A 3E      mov d, _prog ; $prog
5464   24F2 2A            mov b, [d]
5465   24F3 74            mov d, b
5466   24F4 32            mov bl, [d]
5467   24F5 A7 00         mov bh, 0
5468   24F7             ; START RELATIONAL
5469   24F7 D7            push a
5470   24F8 11            mov a, b
5471   24F9 26 0A 00      mov b, $a
5472   24FC B0            cmp a, b
5473   24FD FD 72         sneq ; !=
5474   24FF E4            pop a
5475   2500             ; END RELATIONAL
5476   2500 D7            push a
5477   2501 11            mov a, b
5478   2502 3B 3A 3E      mov d, _prog ; $prog
5479   2505 2A            mov b, [d]
5480   2506 74            mov d, b
5481   2507 32            mov bl, [d]
5482   2508 A7 00         mov bh, 0
5483   250A             ; START RELATIONAL
5484   250A D7            push a
5485   250B 11            mov a, b
5486   250C 26 00 00      mov b, $0
5487   250F B0            cmp a, b
5488   2510 FD 72         sneq ; !=
5489   2512 E4            pop a
5490   2513             ; END RELATIONAL
5491   2513 FD A7         sand a, b ; &&
5492   2515 E4            pop a
5493   2516 C0 00 00      cmp b, 0
5494   2519 C6 A1 25      je _while129_exit
5495   251C             _while129_block:
5496   251C             ;; if(*prog == ';'){ 
5497   251C             _if130_cond:
5498   251C 3B 3A 3E      mov d, _prog ; $prog
5499   251F 2A            mov b, [d]
5500   2520 74            mov d, b
5501   2521 32            mov bl, [d]
5502   2522 A7 00         mov bh, 0
5503   2524             ; START RELATIONAL
5504   2524 D7            push a
5505   2525 11            mov a, b
5506   2526 26 3B 00      mov b, $3b
5507   2529 B0            cmp a, b
5508   252A FD 71         seq ; ==
5509   252C E4            pop a
5510   252D             ; END RELATIONAL
5511   252D C0 00 00      cmp b, 0
5512   2530 C6 78 25      je _if130_else
5513   2533             _if130_true:
5514   2533             ;; while(*prog != 0x0A && *prog != '\0') prog++; 
5515   2533             _while131_cond:
5516   2533 3B 3A 3E      mov d, _prog ; $prog
5517   2536 2A            mov b, [d]
5518   2537 74            mov d, b
5519   2538 32            mov bl, [d]
5520   2539 A7 00         mov bh, 0
5521   253B             ; START RELATIONAL
5522   253B D7            push a
5523   253C 11            mov a, b
5524   253D 26 0A 00      mov b, $a
5525   2540 B0            cmp a, b
5526   2541 FD 72         sneq ; !=
5527   2543 E4            pop a
5528   2544             ; END RELATIONAL
5529   2544 D7            push a
5530   2545 11            mov a, b
5531   2546 3B 3A 3E      mov d, _prog ; $prog
5532   2549 2A            mov b, [d]
5533   254A 74            mov d, b
5534   254B 32            mov bl, [d]
5535   254C A7 00         mov bh, 0
5536   254E             ; START RELATIONAL
5537   254E D7            push a
5538   254F 11            mov a, b
5539   2550 26 00 00      mov b, $0
5540   2553 B0            cmp a, b
5541   2554 FD 72         sneq ; !=
5542   2556 E4            pop a
5543   2557             ; END RELATIONAL
5544   2557 FD A7         sand a, b ; &&
5545   2559 E4            pop a
5546   255A C0 00 00      cmp b, 0
5547   255D C6 72 25      je _while131_exit
5548   2560             _while131_block:
5549   2560             ;; prog++; 
5550   2560 3B 3A 3E      mov d, _prog ; $prog
5551   2563 2A            mov b, [d]
5552   2564 FD 79         mov g, b
5553   2566 FD 77         inc b
5554   2568 3B 3A 3E      mov d, _prog ; $prog
5555   256B FD 43         mov [d], b
5556   256D FD 27         mov b, g
5557   256F 0A 33 25      jmp _while131_cond
5558   2572             _while131_exit:
5559   2572             ;; break; 
5560   2572 0A A1 25      jmp _while129_exit ; while break
5561   2575 0A 9E 25      jmp _if130_exit
5562   2578             _if130_else:
5563   2578             ;; *t++ = *prog++; 
5564   2578 FA FF FF      lea d, [bp + -1] ; $t
5565   257B 2A            mov b, [d]
5566   257C FD 79         mov g, b
5567   257E FD 77         inc b
5568   2580 FA FF FF      lea d, [bp + -1] ; $t
5569   2583 FD 43         mov [d], b
5570   2585 FD 27         mov b, g
5571   2587 D8            push b
5572   2588 3B 3A 3E      mov d, _prog ; $prog
5573   258B 2A            mov b, [d]
5574   258C FD 79         mov g, b
5575   258E FD 77         inc b
5576   2590 3B 3A 3E      mov d, _prog ; $prog
5577   2593 FD 43         mov [d], b
5578   2595 FD 27         mov b, g
5579   2597 74            mov d, b
5580   2598 32            mov bl, [d]
5581   2599 A7 00         mov bh, 0
5582   259B E7            pop d
5583   259C FD 3E         mov [d], bl
5584   259E             _if130_exit:
5585   259E 0A EF 24      jmp _while129_cond
5586   25A1             _while129_exit:
5587   25A1             ;; *t = '\0'; 
5588   25A1 FA FF FF      lea d, [bp + -1] ; $t
5589   25A4 2A            mov b, [d]
5590   25A5 D8            push b
5591   25A6 26 00 00      mov b, $0
5592   25A9 E7            pop d
5593   25AA FD 3E         mov [d], bl
5594   25AC F9            leave
5595   25AD 09            ret
5596   25AE             
5597   25AE             get:
5598   25AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
5599   25B1             ; $t 
5600   25B1             ; $temp_hex 
5601   25B1             ; $p 
5602   25B1 52 44 00      sub sp, 68
5603   25B4             ;; *token = '\0'; 
5604   25B4 3B 3C 3E      mov d, _token_data ; $token
5605   25B7 2D            mov b, d
5606   25B8 D8            push b
5607   25B9 26 00 00      mov b, $0
5608   25BC E7            pop d
5609   25BD FD 3E         mov [d], bl
5610   25BF             ;; tok = TOK_UNDEF; 
5611   25BF 3B 36 3E      mov d, _tok ; $tok
5612   25C2 DA            push d
5613   25C3 26 00 00      mov b, 0; TOK_UNDEF
5614   25C6 E7            pop d
5615   25C7 FD 43         mov [d], b
5616   25C9             ;; toktype = TYPE_UNDEF; 
5617   25C9 3B 38 3E      mov d, _toktype ; $toktype
5618   25CC DA            push d
5619   25CD 26 00 00      mov b, 0; TYPE_UNDEF
5620   25D0 E7            pop d
5621   25D1 FD 43         mov [d], b
5622   25D3             ;; t = token; 
5623   25D3 FA FF FF      lea d, [bp + -1] ; $t
5624   25D6 DA            push d
5625   25D7 3B 3C 3E      mov d, _token_data ; $token
5626   25DA 2D            mov b, d
5627   25DB E7            pop d
5628   25DC FD 43         mov [d], b
5629   25DE             ;; do{ 
5630   25DE             _do132_block:
5631   25DE             ;; while(is_space(*prog)) prog++; 
5632   25DE             _while133_cond:
5633   25DE 3B 3A 3E      mov d, _prog ; $prog
5634   25E1 2A            mov b, [d]
5635   25E2 74            mov d, b
5636   25E3 32            mov bl, [d]
5637   25E4 A7 00         mov bh, 0
5638   25E6 DD            push bl
5639   25E7 07 96 38      call is_space
5640   25EA 51 01 00      add sp, 1
5641   25ED C0 00 00      cmp b, 0
5642   25F0 C6 05 26      je _while133_exit
5643   25F3             _while133_block:
5644   25F3             ;; prog++; 
5645   25F3 3B 3A 3E      mov d, _prog ; $prog
5646   25F6 2A            mov b, [d]
5647   25F7 FD 79         mov g, b
5648   25F9 FD 77         inc b
5649   25FB 3B 3A 3E      mov d, _prog ; $prog
5650   25FE FD 43         mov [d], b
5651   2600 FD 27         mov b, g
5652   2602 0A DE 25      jmp _while133_cond
5653   2605             _while133_exit:
5654   2605             ;; if(*prog == ';'){ 
5655   2605             _if134_cond:
5656   2605 3B 3A 3E      mov d, _prog ; $prog
5657   2608 2A            mov b, [d]
5658   2609 74            mov d, b
5659   260A 32            mov bl, [d]
5660   260B A7 00         mov bh, 0
5661   260D             ; START RELATIONAL
5662   260D D7            push a
5663   260E 11            mov a, b
5664   260F 26 3B 00      mov b, $3b
5665   2612 B0            cmp a, b
5666   2613 FD 71         seq ; ==
5667   2615 E4            pop a
5668   2616             ; END RELATIONAL
5669   2616 C0 00 00      cmp b, 0
5670   2619 C6 71 26      je _if134_exit
5671   261C             _if134_true:
5672   261C             ;; while(*prog != '\n') prog++; 
5673   261C             _while135_cond:
5674   261C 3B 3A 3E      mov d, _prog ; $prog
5675   261F 2A            mov b, [d]
5676   2620 74            mov d, b
5677   2621 32            mov bl, [d]
5678   2622 A7 00         mov bh, 0
5679   2624             ; START RELATIONAL
5680   2624 D7            push a
5681   2625 11            mov a, b
5682   2626 26 0A 00      mov b, $a
5683   2629 B0            cmp a, b
5684   262A FD 72         sneq ; !=
5685   262C E4            pop a
5686   262D             ; END RELATIONAL
5687   262D C0 00 00      cmp b, 0
5688   2630 C6 45 26      je _while135_exit
5689   2633             _while135_block:
5690   2633             ;; prog++; 
5691   2633 3B 3A 3E      mov d, _prog ; $prog
5692   2636 2A            mov b, [d]
5693   2637 FD 79         mov g, b
5694   2639 FD 77         inc b
5695   263B 3B 3A 3E      mov d, _prog ; $prog
5696   263E FD 43         mov [d], b
5697   2640 FD 27         mov b, g
5698   2642 0A 1C 26      jmp _while135_cond
5699   2645             _while135_exit:
5700   2645             ;; if(*prog == '\n') prog++; 
5701   2645             _if136_cond:
5702   2645 3B 3A 3E      mov d, _prog ; $prog
5703   2648 2A            mov b, [d]
5704   2649 74            mov d, b
5705   264A 32            mov bl, [d]
5706   264B A7 00         mov bh, 0
5707   264D             ; START RELATIONAL
5708   264D D7            push a
5709   264E 11            mov a, b
5710   264F 26 0A 00      mov b, $a
5711   2652 B0            cmp a, b
5712   2653 FD 71         seq ; ==
5713   2655 E4            pop a
5714   2656             ; END RELATIONAL
5715   2656 C0 00 00      cmp b, 0
5716   2659 C6 6E 26      je _if136_exit
5717   265C             _if136_true:
5718   265C             ;; prog++; 
5719   265C 3B 3A 3E      mov d, _prog ; $prog
5720   265F 2A            mov b, [d]
5721   2660 FD 79         mov g, b
5722   2662 FD 77         inc b
5723   2664 3B 3A 3E      mov d, _prog ; $prog
5724   2667 FD 43         mov [d], b
5725   2669 FD 27         mov b, g
5726   266B 0A 6E 26      jmp _if136_exit
5727   266E             _if136_exit:
5728   266E 0A 71 26      jmp _if134_exit
5729   2671             _if134_exit:
5730   2671             ;; } while(is_space(*prog) || *prog == ';'); 
5731   2671             _do132_cond:
5732   2671 3B 3A 3E      mov d, _prog ; $prog
5733   2674 2A            mov b, [d]
5734   2675 74            mov d, b
5735   2676 32            mov bl, [d]
5736   2677 A7 00         mov bh, 0
5737   2679 DD            push bl
5738   267A 07 96 38      call is_space
5739   267D 51 01 00      add sp, 1
5740   2680 D7            push a
5741   2681 11            mov a, b
5742   2682 3B 3A 3E      mov d, _prog ; $prog
5743   2685 2A            mov b, [d]
5744   2686 74            mov d, b
5745   2687 32            mov bl, [d]
5746   2688 A7 00         mov bh, 0
5747   268A             ; START RELATIONAL
5748   268A D7            push a
5749   268B 11            mov a, b
5750   268C 26 3B 00      mov b, $3b
5751   268F B0            cmp a, b
5752   2690 FD 71         seq ; ==
5753   2692 E4            pop a
5754   2693             ; END RELATIONAL
5755   2693 FD A8         sor a, b ; ||
5756   2695 E4            pop a
5757   2696 C0 01 00      cmp b, 1
5758   2699 C6 DE 25      je _do132_block
5759   269C             _do132_exit:
5760   269C             ;; if(*prog == '\0'){ 
5761   269C             _if137_cond:
5762   269C 3B 3A 3E      mov d, _prog ; $prog
5763   269F 2A            mov b, [d]
5764   26A0 74            mov d, b
5765   26A1 32            mov bl, [d]
5766   26A2 A7 00         mov bh, 0
5767   26A4             ; START RELATIONAL
5768   26A4 D7            push a
5769   26A5 11            mov a, b
5770   26A6 26 00 00      mov b, $0
5771   26A9 B0            cmp a, b
5772   26AA FD 71         seq ; ==
5773   26AC E4            pop a
5774   26AD             ; END RELATIONAL
5775   26AD C0 00 00      cmp b, 0
5776   26B0 C6 C2 26      je _if137_exit
5777   26B3             _if137_true:
5778   26B3             ;; toktype = END; 
5779   26B3 3B 38 3E      mov d, _toktype ; $toktype
5780   26B6 DA            push d
5781   26B7 26 07 00      mov b, 7; END
5782   26BA E7            pop d
5783   26BB FD 43         mov [d], b
5784   26BD             ;; return; 
5785   26BD F9            leave
5786   26BE 09            ret
5787   26BF 0A C2 26      jmp _if137_exit
5788   26C2             _if137_exit:
5789   26C2             ;; if(is_alpha(*prog)){ 
5790   26C2             _if138_cond:
5791   26C2 3B 3A 3E      mov d, _prog ; $prog
5792   26C5 2A            mov b, [d]
5793   26C6 74            mov d, b
5794   26C7 32            mov bl, [d]
5795   26C8 A7 00         mov bh, 0
5796   26CA DD            push bl
5797   26CB 07 0A 39      call is_alpha
5798   26CE 51 01 00      add sp, 1
5799   26D1 C0 00 00      cmp b, 0
5800   26D4 C6 73 27      je _if138_else
5801   26D7             _if138_true:
5802   26D7             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
5803   26D7             _while139_cond:
5804   26D7 3B 3A 3E      mov d, _prog ; $prog
5805   26DA 2A            mov b, [d]
5806   26DB 74            mov d, b
5807   26DC 32            mov bl, [d]
5808   26DD A7 00         mov bh, 0
5809   26DF DD            push bl
5810   26E0 07 0A 39      call is_alpha
5811   26E3 51 01 00      add sp, 1
5812   26E6 D7            push a
5813   26E7 11            mov a, b
5814   26E8 3B 3A 3E      mov d, _prog ; $prog
5815   26EB 2A            mov b, [d]
5816   26EC 74            mov d, b
5817   26ED 32            mov bl, [d]
5818   26EE A7 00         mov bh, 0
5819   26F0 DD            push bl
5820   26F1 07 E2 38      call is_digit
5821   26F4 51 01 00      add sp, 1
5822   26F7 FD A8         sor a, b ; ||
5823   26F9 E4            pop a
5824   26FA C0 00 00      cmp b, 0
5825   26FD C6 29 27      je _while139_exit
5826   2700             _while139_block:
5827   2700             ;; *t++ = *prog++; 
5828   2700 FA FF FF      lea d, [bp + -1] ; $t
5829   2703 2A            mov b, [d]
5830   2704 FD 79         mov g, b
5831   2706 FD 77         inc b
5832   2708 FA FF FF      lea d, [bp + -1] ; $t
5833   270B FD 43         mov [d], b
5834   270D FD 27         mov b, g
5835   270F D8            push b
5836   2710 3B 3A 3E      mov d, _prog ; $prog
5837   2713 2A            mov b, [d]
5838   2714 FD 79         mov g, b
5839   2716 FD 77         inc b
5840   2718 3B 3A 3E      mov d, _prog ; $prog
5841   271B FD 43         mov [d], b
5842   271D FD 27         mov b, g
5843   271F 74            mov d, b
5844   2720 32            mov bl, [d]
5845   2721 A7 00         mov bh, 0
5846   2723 E7            pop d
5847   2724 FD 3E         mov [d], bl
5848   2726 0A D7 26      jmp _while139_cond
5849   2729             _while139_exit:
5850   2729             ;; *t = '\0'; 
5851   2729 FA FF FF      lea d, [bp + -1] ; $t
5852   272C 2A            mov b, [d]
5853   272D D8            push b
5854   272E 26 00 00      mov b, $0
5855   2731 E7            pop d
5856   2732 FD 3E         mov [d], bl
5857   2734             ;; if((tok = search_keyword(token)) != -1)  
5858   2734             _if140_cond:
5859   2734 3B 36 3E      mov d, _tok ; $tok
5860   2737 DA            push d
5861   2738 3B 3C 3E      mov d, _token_data ; $token
5862   273B 2D            mov b, d
5863   273C FD AB         swp b
5864   273E D8            push b
5865   273F 07 20 32      call search_keyword
5866   2742 51 02 00      add sp, 2
5867   2745 E7            pop d
5868   2746 FD 43         mov [d], b
5869   2748             ; START RELATIONAL
5870   2748 D7            push a
5871   2749 11            mov a, b
5872   274A 26 01 00      mov b, $1
5873   274D FD 97         neg b
5874   274F B0            cmp a, b
5875   2750 FD 72         sneq ; !=
5876   2752 E4            pop a
5877   2753             ; END RELATIONAL
5878   2753 C0 00 00      cmp b, 0
5879   2756 C6 66 27      je _if140_else
5880   2759             _if140_true:
5881   2759             ;; toktype = KEYWORD; 
5882   2759 3B 38 3E      mov d, _toktype ; $toktype
5883   275C DA            push d
5884   275D 26 01 00      mov b, 1; KEYWORD
5885   2760 E7            pop d
5886   2761 FD 43         mov [d], b
5887   2763 0A 70 27      jmp _if140_exit
5888   2766             _if140_else:
5889   2766             ;; toktype = IDENTIFIER; 
5890   2766 3B 38 3E      mov d, _toktype ; $toktype
5891   2769 DA            push d
5892   276A 26 06 00      mov b, 6; IDENTIFIER
5893   276D E7            pop d
5894   276E FD 43         mov [d], b
5895   2770             _if140_exit:
5896   2770 0A 4C 2E      jmp _if138_exit
5897   2773             _if138_else:
5898   2773             ;; if(is_digit(*prog) || (*prog == '$' && is_hex_digit(*(prog+1)))){ 
5899   2773             _if141_cond:
5900   2773 3B 3A 3E      mov d, _prog ; $prog
5901   2776 2A            mov b, [d]
5902   2777 74            mov d, b
5903   2778 32            mov bl, [d]
5904   2779 A7 00         mov bh, 0
5905   277B DD            push bl
5906   277C 07 E2 38      call is_digit
5907   277F 51 01 00      add sp, 1
5908   2782 D7            push a
5909   2783 11            mov a, b
5910   2784 3B 3A 3E      mov d, _prog ; $prog
5911   2787 2A            mov b, [d]
5912   2788 74            mov d, b
5913   2789 32            mov bl, [d]
5914   278A A7 00         mov bh, 0
5915   278C             ; START RELATIONAL
5916   278C D7            push a
5917   278D 11            mov a, b
5918   278E 26 24 00      mov b, $24
5919   2791 B0            cmp a, b
5920   2792 FD 71         seq ; ==
5921   2794 E4            pop a
5922   2795             ; END RELATIONAL
5923   2795 D7            push a
5924   2796 11            mov a, b
5925   2797 3B 3A 3E      mov d, _prog ; $prog
5926   279A 2A            mov b, [d]
5927   279B             ; START TERMS
5928   279B D7            push a
5929   279C 11            mov a, b
5930   279D 26 01 00      mov b, $1
5931   27A0 54            add a, b
5932   27A1 27            mov b, a
5933   27A2 E4            pop a
5934   27A3             ; END TERMS
5935   27A3 74            mov d, b
5936   27A4 32            mov bl, [d]
5937   27A5 A7 00         mov bh, 0
5938   27A7 DD            push bl
5939   27A8 07 5D 24      call is_hex_digit
5940   27AB 51 01 00      add sp, 1
5941   27AE FD A7         sand a, b ; &&
5942   27B0 E4            pop a
5943   27B1 FD A8         sor a, b ; ||
5944   27B3 E4            pop a
5945   27B4 C0 00 00      cmp b, 0
5946   27B7 C6 3C 29      je _if141_else
5947   27BA             _if141_true:
5948   27BA             ;; if(*prog == '$' && is_hex_digit(*(prog+1))){ 
5949   27BA             _if142_cond:
5950   27BA 3B 3A 3E      mov d, _prog ; $prog
5951   27BD 2A            mov b, [d]
5952   27BE 74            mov d, b
5953   27BF 32            mov bl, [d]
5954   27C0 A7 00         mov bh, 0
5955   27C2             ; START RELATIONAL
5956   27C2 D7            push a
5957   27C3 11            mov a, b
5958   27C4 26 24 00      mov b, $24
5959   27C7 B0            cmp a, b
5960   27C8 FD 71         seq ; ==
5961   27CA E4            pop a
5962   27CB             ; END RELATIONAL
5963   27CB D7            push a
5964   27CC 11            mov a, b
5965   27CD 3B 3A 3E      mov d, _prog ; $prog
5966   27D0 2A            mov b, [d]
5967   27D1             ; START TERMS
5968   27D1 D7            push a
5969   27D2 11            mov a, b
5970   27D3 26 01 00      mov b, $1
5971   27D6 54            add a, b
5972   27D7 27            mov b, a
5973   27D8 E4            pop a
5974   27D9             ; END TERMS
5975   27D9 74            mov d, b
5976   27DA 32            mov bl, [d]
5977   27DB A7 00         mov bh, 0
5978   27DD DD            push bl
5979   27DE 07 5D 24      call is_hex_digit
5980   27E1 51 01 00      add sp, 1
5981   27E4 FD A7         sand a, b ; &&
5982   27E6 E4            pop a
5983   27E7 C0 00 00      cmp b, 0
5984   27EA C6 D2 28      je _if142_else
5985   27ED             _if142_true:
5986   27ED             ;; *t++ = *prog++; 
5987   27ED FA FF FF      lea d, [bp + -1] ; $t
5988   27F0 2A            mov b, [d]
5989   27F1 FD 79         mov g, b
5990   27F3 FD 77         inc b
5991   27F5 FA FF FF      lea d, [bp + -1] ; $t
5992   27F8 FD 43         mov [d], b
5993   27FA FD 27         mov b, g
5994   27FC D8            push b
5995   27FD 3B 3A 3E      mov d, _prog ; $prog
5996   2800 2A            mov b, [d]
5997   2801 FD 79         mov g, b
5998   2803 FD 77         inc b
5999   2805 3B 3A 3E      mov d, _prog ; $prog
6000   2808 FD 43         mov [d], b
6001   280A FD 27         mov b, g
6002   280C 74            mov d, b
6003   280D 32            mov bl, [d]
6004   280E A7 00         mov bh, 0
6005   2810 E7            pop d
6006   2811 FD 3E         mov [d], bl
6007   2813             ;; p = temp_hex; 
6008   2813 FA BD FF      lea d, [bp + -67] ; $p
6009   2816 DA            push d
6010   2817 FA BF FF      lea d, [bp + -65] ; $temp_hex
6011   281A 2D            mov b, d
6012   281B E7            pop d
6013   281C FD 43         mov [d], b
6014   281E             ;; *t++ = *p++ = *prog++; 
6015   281E FA FF FF      lea d, [bp + -1] ; $t
6016   2821 2A            mov b, [d]
6017   2822 FD 79         mov g, b
6018   2824 FD 77         inc b
6019   2826 FA FF FF      lea d, [bp + -1] ; $t
6020   2829 FD 43         mov [d], b
6021   282B FD 27         mov b, g
6022   282D D8            push b
6023   282E FA BD FF      lea d, [bp + -67] ; $p
6024   2831 2A            mov b, [d]
6025   2832 FD 79         mov g, b
6026   2834 FD 77         inc b
6027   2836 FA BD FF      lea d, [bp + -67] ; $p
6028   2839 FD 43         mov [d], b
6029   283B FD 27         mov b, g
6030   283D D8            push b
6031   283E 3B 3A 3E      mov d, _prog ; $prog
6032   2841 2A            mov b, [d]
6033   2842 FD 79         mov g, b
6034   2844 FD 77         inc b
6035   2846 3B 3A 3E      mov d, _prog ; $prog
6036   2849 FD 43         mov [d], b
6037   284B FD 27         mov b, g
6038   284D 74            mov d, b
6039   284E 32            mov bl, [d]
6040   284F A7 00         mov bh, 0
6041   2851 E7            pop d
6042   2852 FD 3E         mov [d], bl
6043   2854 E7            pop d
6044   2855 FD 3E         mov [d], bl
6045   2857             ;; while(is_hex_digit(*prog)){ 
6046   2857             _while143_cond:
6047   2857 3B 3A 3E      mov d, _prog ; $prog
6048   285A 2A            mov b, [d]
6049   285B 74            mov d, b
6050   285C 32            mov bl, [d]
6051   285D A7 00         mov bh, 0
6052   285F DD            push bl
6053   2860 07 5D 24      call is_hex_digit
6054   2863 51 01 00      add sp, 1
6055   2866 C0 00 00      cmp b, 0
6056   2869 C6 A8 28      je _while143_exit
6057   286C             _while143_block:
6058   286C             ;; *t++ = *p++ = *prog++; 
6059   286C FA FF FF      lea d, [bp + -1] ; $t
6060   286F 2A            mov b, [d]
6061   2870 FD 79         mov g, b
6062   2872 FD 77         inc b
6063   2874 FA FF FF      lea d, [bp + -1] ; $t
6064   2877 FD 43         mov [d], b
6065   2879 FD 27         mov b, g
6066   287B D8            push b
6067   287C FA BD FF      lea d, [bp + -67] ; $p
6068   287F 2A            mov b, [d]
6069   2880 FD 79         mov g, b
6070   2882 FD 77         inc b
6071   2884 FA BD FF      lea d, [bp + -67] ; $p
6072   2887 FD 43         mov [d], b
6073   2889 FD 27         mov b, g
6074   288B D8            push b
6075   288C 3B 3A 3E      mov d, _prog ; $prog
6076   288F 2A            mov b, [d]
6077   2890 FD 79         mov g, b
6078   2892 FD 77         inc b
6079   2894 3B 3A 3E      mov d, _prog ; $prog
6080   2897 FD 43         mov [d], b
6081   2899 FD 27         mov b, g
6082   289B 74            mov d, b
6083   289C 32            mov bl, [d]
6084   289D A7 00         mov bh, 0
6085   289F E7            pop d
6086   28A0 FD 3E         mov [d], bl
6087   28A2 E7            pop d
6088   28A3 FD 3E         mov [d], bl
6089   28A5 0A 57 28      jmp _while143_cond
6090   28A8             _while143_exit:
6091   28A8             ;; *t = *p = '\0'; 
6092   28A8 FA FF FF      lea d, [bp + -1] ; $t
6093   28AB 2A            mov b, [d]
6094   28AC D8            push b
6095   28AD FA BD FF      lea d, [bp + -67] ; $p
6096   28B0 2A            mov b, [d]
6097   28B1 D8            push b
6098   28B2 26 00 00      mov b, $0
6099   28B5 E7            pop d
6100   28B6 FD 3E         mov [d], bl
6101   28B8 E7            pop d
6102   28B9 FD 3E         mov [d], bl
6103   28BB             ;; int_const = hex_to_int(temp_hex); 
6104   28BB 3B 7C 3F      mov d, _int_const ; $int_const
6105   28BE DA            push d
6106   28BF FA BF FF      lea d, [bp + -65] ; $temp_hex
6107   28C2 2D            mov b, d
6108   28C3 FD AB         swp b
6109   28C5 D8            push b
6110   28C6 07 D5 32      call hex_to_int
6111   28C9 51 02 00      add sp, 2
6112   28CC E7            pop d
6113   28CD FD 43         mov [d], b
6114   28CF 0A 2F 29      jmp _if142_exit
6115   28D2             _if142_else:
6116   28D2             ;; while(is_digit(*prog)){ 
6117   28D2             _while144_cond:
6118   28D2 3B 3A 3E      mov d, _prog ; $prog
6119   28D5 2A            mov b, [d]
6120   28D6 74            mov d, b
6121   28D7 32            mov bl, [d]
6122   28D8 A7 00         mov bh, 0
6123   28DA DD            push bl
6124   28DB 07 E2 38      call is_digit
6125   28DE 51 01 00      add sp, 1
6126   28E1 C0 00 00      cmp b, 0
6127   28E4 C6 10 29      je _while144_exit
6128   28E7             _while144_block:
6129   28E7             ;; *t++ = *prog++; 
6130   28E7 FA FF FF      lea d, [bp + -1] ; $t
6131   28EA 2A            mov b, [d]
6132   28EB FD 79         mov g, b
6133   28ED FD 77         inc b
6134   28EF FA FF FF      lea d, [bp + -1] ; $t
6135   28F2 FD 43         mov [d], b
6136   28F4 FD 27         mov b, g
6137   28F6 D8            push b
6138   28F7 3B 3A 3E      mov d, _prog ; $prog
6139   28FA 2A            mov b, [d]
6140   28FB FD 79         mov g, b
6141   28FD FD 77         inc b
6142   28FF 3B 3A 3E      mov d, _prog ; $prog
6143   2902 FD 43         mov [d], b
6144   2904 FD 27         mov b, g
6145   2906 74            mov d, b
6146   2907 32            mov bl, [d]
6147   2908 A7 00         mov bh, 0
6148   290A E7            pop d
6149   290B FD 3E         mov [d], bl
6150   290D 0A D2 28      jmp _while144_cond
6151   2910             _while144_exit:
6152   2910             ;; *t = '\0'; 
6153   2910 FA FF FF      lea d, [bp + -1] ; $t
6154   2913 2A            mov b, [d]
6155   2914 D8            push b
6156   2915 26 00 00      mov b, $0
6157   2918 E7            pop d
6158   2919 FD 3E         mov [d], bl
6159   291B             ;; int_const = atoi(token); 
6160   291B 3B 7C 3F      mov d, _int_const ; $int_const
6161   291E DA            push d
6162   291F 3B 3C 3E      mov d, _token_data ; $token
6163   2922 2D            mov b, d
6164   2923 FD AB         swp b
6165   2925 D8            push b
6166   2926 07 1B 34      call atoi
6167   2929 51 02 00      add sp, 2
6168   292C E7            pop d
6169   292D FD 43         mov [d], b
6170   292F             _if142_exit:
6171   292F             ;; toktype = INTEGER_CONST; 
6172   292F 3B 38 3E      mov d, _toktype ; $toktype
6173   2932 DA            push d
6174   2933 26 05 00      mov b, 5; INTEGER_CONST
6175   2936 E7            pop d
6176   2937 FD 43         mov [d], b
6177   2939 0A 4C 2E      jmp _if141_exit
6178   293C             _if141_else:
6179   293C             ;; if(*prog == '\''){ 
6180   293C             _if145_cond:
6181   293C 3B 3A 3E      mov d, _prog ; $prog
6182   293F 2A            mov b, [d]
6183   2940 74            mov d, b
6184   2941 32            mov bl, [d]
6185   2942 A7 00         mov bh, 0
6186   2944             ; START RELATIONAL
6187   2944 D7            push a
6188   2945 11            mov a, b
6189   2946 26 27 00      mov b, $27
6190   2949 B0            cmp a, b
6191   294A FD 71         seq ; ==
6192   294C E4            pop a
6193   294D             ; END RELATIONAL
6194   294D C0 00 00      cmp b, 0
6195   2950 C6 69 2A      je _if145_else
6196   2953             _if145_true:
6197   2953             ;; *t++ = '\''; 
6198   2953 FA FF FF      lea d, [bp + -1] ; $t
6199   2956 2A            mov b, [d]
6200   2957 FD 79         mov g, b
6201   2959 FD 77         inc b
6202   295B FA FF FF      lea d, [bp + -1] ; $t
6203   295E FD 43         mov [d], b
6204   2960 FD 27         mov b, g
6205   2962 D8            push b
6206   2963 26 27 00      mov b, $27
6207   2966 E7            pop d
6208   2967 FD 3E         mov [d], bl
6209   2969             ;; prog++; 
6210   2969 3B 3A 3E      mov d, _prog ; $prog
6211   296C 2A            mov b, [d]
6212   296D FD 79         mov g, b
6213   296F FD 77         inc b
6214   2971 3B 3A 3E      mov d, _prog ; $prog
6215   2974 FD 43         mov [d], b
6216   2976 FD 27         mov b, g
6217   2978             ;; if(*prog == '\\'){ 
6218   2978             _if146_cond:
6219   2978 3B 3A 3E      mov d, _prog ; $prog
6220   297B 2A            mov b, [d]
6221   297C 74            mov d, b
6222   297D 32            mov bl, [d]
6223   297E A7 00         mov bh, 0
6224   2980             ; START RELATIONAL
6225   2980 D7            push a
6226   2981 11            mov a, b
6227   2982 26 5C 00      mov b, $5c
6228   2985 B0            cmp a, b
6229   2986 FD 71         seq ; ==
6230   2988 E4            pop a
6231   2989             ; END RELATIONAL
6232   2989 C0 00 00      cmp b, 0
6233   298C C6 DD 29      je _if146_else
6234   298F             _if146_true:
6235   298F             ;; *t++ = '\\'; 
6236   298F FA FF FF      lea d, [bp + -1] ; $t
6237   2992 2A            mov b, [d]
6238   2993 FD 79         mov g, b
6239   2995 FD 77         inc b
6240   2997 FA FF FF      lea d, [bp + -1] ; $t
6241   299A FD 43         mov [d], b
6242   299C FD 27         mov b, g
6243   299E D8            push b
6244   299F 26 5C 00      mov b, $5c
6245   29A2 E7            pop d
6246   29A3 FD 3E         mov [d], bl
6247   29A5             ;; prog++; 
6248   29A5 3B 3A 3E      mov d, _prog ; $prog
6249   29A8 2A            mov b, [d]
6250   29A9 FD 79         mov g, b
6251   29AB FD 77         inc b
6252   29AD 3B 3A 3E      mov d, _prog ; $prog
6253   29B0 FD 43         mov [d], b
6254   29B2 FD 27         mov b, g
6255   29B4             ;; *t++ = *prog++; 
6256   29B4 FA FF FF      lea d, [bp + -1] ; $t
6257   29B7 2A            mov b, [d]
6258   29B8 FD 79         mov g, b
6259   29BA FD 77         inc b
6260   29BC FA FF FF      lea d, [bp + -1] ; $t
6261   29BF FD 43         mov [d], b
6262   29C1 FD 27         mov b, g
6263   29C3 D8            push b
6264   29C4 3B 3A 3E      mov d, _prog ; $prog
6265   29C7 2A            mov b, [d]
6266   29C8 FD 79         mov g, b
6267   29CA FD 77         inc b
6268   29CC 3B 3A 3E      mov d, _prog ; $prog
6269   29CF FD 43         mov [d], b
6270   29D1 FD 27         mov b, g
6271   29D3 74            mov d, b
6272   29D4 32            mov bl, [d]
6273   29D5 A7 00         mov bh, 0
6274   29D7 E7            pop d
6275   29D8 FD 3E         mov [d], bl
6276   29DA 0A 03 2A      jmp _if146_exit
6277   29DD             _if146_else:
6278   29DD             ;; *t++ = *prog++; 
6279   29DD FA FF FF      lea d, [bp + -1] ; $t
6280   29E0 2A            mov b, [d]
6281   29E1 FD 79         mov g, b
6282   29E3 FD 77         inc b
6283   29E5 FA FF FF      lea d, [bp + -1] ; $t
6284   29E8 FD 43         mov [d], b
6285   29EA FD 27         mov b, g
6286   29EC D8            push b
6287   29ED 3B 3A 3E      mov d, _prog ; $prog
6288   29F0 2A            mov b, [d]
6289   29F1 FD 79         mov g, b
6290   29F3 FD 77         inc b
6291   29F5 3B 3A 3E      mov d, _prog ; $prog
6292   29F8 FD 43         mov [d], b
6293   29FA FD 27         mov b, g
6294   29FC 74            mov d, b
6295   29FD 32            mov bl, [d]
6296   29FE A7 00         mov bh, 0
6297   2A00 E7            pop d
6298   2A01 FD 3E         mov [d], bl
6299   2A03             _if146_exit:
6300   2A03             ;; if(*prog != '\''){ 
6301   2A03             _if147_cond:
6302   2A03 3B 3A 3E      mov d, _prog ; $prog
6303   2A06 2A            mov b, [d]
6304   2A07 74            mov d, b
6305   2A08 32            mov bl, [d]
6306   2A09 A7 00         mov bh, 0
6307   2A0B             ; START RELATIONAL
6308   2A0B D7            push a
6309   2A0C 11            mov a, b
6310   2A0D 26 27 00      mov b, $27
6311   2A10 B0            cmp a, b
6312   2A11 FD 72         sneq ; !=
6313   2A13 E4            pop a
6314   2A14             ; END RELATIONAL
6315   2A14 C0 00 00      cmp b, 0
6316   2A17 C6 29 2A      je _if147_exit
6317   2A1A             _if147_true:
6318   2A1A             ;; error("Closing single quotes expected."); 
6319   2A1A 26 7F 42      mov b, __s73 ; "Closing single quotes expected."
6320   2A1D FD AB         swp b
6321   2A1F D8            push b
6322   2A20 07 1F 31      call error
6323   2A23 51 02 00      add sp, 2
6324   2A26 0A 29 2A      jmp _if147_exit
6325   2A29             _if147_exit:
6326   2A29             ;; *t++ = '\''; 
6327   2A29 FA FF FF      lea d, [bp + -1] ; $t
6328   2A2C 2A            mov b, [d]
6329   2A2D FD 79         mov g, b
6330   2A2F FD 77         inc b
6331   2A31 FA FF FF      lea d, [bp + -1] ; $t
6332   2A34 FD 43         mov [d], b
6333   2A36 FD 27         mov b, g
6334   2A38 D8            push b
6335   2A39 26 27 00      mov b, $27
6336   2A3C E7            pop d
6337   2A3D FD 3E         mov [d], bl
6338   2A3F             ;; prog++; 
6339   2A3F 3B 3A 3E      mov d, _prog ; $prog
6340   2A42 2A            mov b, [d]
6341   2A43 FD 79         mov g, b
6342   2A45 FD 77         inc b
6343   2A47 3B 3A 3E      mov d, _prog ; $prog
6344   2A4A FD 43         mov [d], b
6345   2A4C FD 27         mov b, g
6346   2A4E             ;; toktype = CHAR_CONST; 
6347   2A4E 3B 38 3E      mov d, _toktype ; $toktype
6348   2A51 DA            push d
6349   2A52 26 03 00      mov b, 3; CHAR_CONST
6350   2A55 E7            pop d
6351   2A56 FD 43         mov [d], b
6352   2A58             ;; *t = '\0'; 
6353   2A58 FA FF FF      lea d, [bp + -1] ; $t
6354   2A5B 2A            mov b, [d]
6355   2A5C D8            push b
6356   2A5D 26 00 00      mov b, $0
6357   2A60 E7            pop d
6358   2A61 FD 3E         mov [d], bl
6359   2A63             ;; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
6360   2A63 07 C9 2E      call convert_constant
6361   2A66 0A 4C 2E      jmp _if145_exit
6362   2A69             _if145_else:
6363   2A69             ;; if(*prog == '\"'){ 
6364   2A69             _if148_cond:
6365   2A69 3B 3A 3E      mov d, _prog ; $prog
6366   2A6C 2A            mov b, [d]
6367   2A6D 74            mov d, b
6368   2A6E 32            mov bl, [d]
6369   2A6F A7 00         mov bh, 0
6370   2A71             ; START RELATIONAL
6371   2A71 D7            push a
6372   2A72 11            mov a, b
6373   2A73 26 22 00      mov b, $22
6374   2A76 B0            cmp a, b
6375   2A77 FD 71         seq ; ==
6376   2A79 E4            pop a
6377   2A7A             ; END RELATIONAL
6378   2A7A C0 00 00      cmp b, 0
6379   2A7D C6 58 2B      je _if148_else
6380   2A80             _if148_true:
6381   2A80             ;; *t++ = '\"'; 
6382   2A80 FA FF FF      lea d, [bp + -1] ; $t
6383   2A83 2A            mov b, [d]
6384   2A84 FD 79         mov g, b
6385   2A86 FD 77         inc b
6386   2A88 FA FF FF      lea d, [bp + -1] ; $t
6387   2A8B FD 43         mov [d], b
6388   2A8D FD 27         mov b, g
6389   2A8F D8            push b
6390   2A90 26 22 00      mov b, $22
6391   2A93 E7            pop d
6392   2A94 FD 3E         mov [d], bl
6393   2A96             ;; prog++; 
6394   2A96 3B 3A 3E      mov d, _prog ; $prog
6395   2A99 2A            mov b, [d]
6396   2A9A FD 79         mov g, b
6397   2A9C FD 77         inc b
6398   2A9E 3B 3A 3E      mov d, _prog ; $prog
6399   2AA1 FD 43         mov [d], b
6400   2AA3 FD 27         mov b, g
6401   2AA5             ;; while(*prog != '\"' && *prog){ 
6402   2AA5             _while149_cond:
6403   2AA5 3B 3A 3E      mov d, _prog ; $prog
6404   2AA8 2A            mov b, [d]
6405   2AA9 74            mov d, b
6406   2AAA 32            mov bl, [d]
6407   2AAB A7 00         mov bh, 0
6408   2AAD             ; START RELATIONAL
6409   2AAD D7            push a
6410   2AAE 11            mov a, b
6411   2AAF 26 22 00      mov b, $22
6412   2AB2 B0            cmp a, b
6413   2AB3 FD 72         sneq ; !=
6414   2AB5 E4            pop a
6415   2AB6             ; END RELATIONAL
6416   2AB6 D7            push a
6417   2AB7 11            mov a, b
6418   2AB8 3B 3A 3E      mov d, _prog ; $prog
6419   2ABB 2A            mov b, [d]
6420   2ABC 74            mov d, b
6421   2ABD 32            mov bl, [d]
6422   2ABE A7 00         mov bh, 0
6423   2AC0 FD A7         sand a, b ; &&
6424   2AC2 E4            pop a
6425   2AC3 C0 00 00      cmp b, 0
6426   2AC6 C6 F2 2A      je _while149_exit
6427   2AC9             _while149_block:
6428   2AC9             ;; *t++ = *prog++; 
6429   2AC9 FA FF FF      lea d, [bp + -1] ; $t
6430   2ACC 2A            mov b, [d]
6431   2ACD FD 79         mov g, b
6432   2ACF FD 77         inc b
6433   2AD1 FA FF FF      lea d, [bp + -1] ; $t
6434   2AD4 FD 43         mov [d], b
6435   2AD6 FD 27         mov b, g
6436   2AD8 D8            push b
6437   2AD9 3B 3A 3E      mov d, _prog ; $prog
6438   2ADC 2A            mov b, [d]
6439   2ADD FD 79         mov g, b
6440   2ADF FD 77         inc b
6441   2AE1 3B 3A 3E      mov d, _prog ; $prog
6442   2AE4 FD 43         mov [d], b
6443   2AE6 FD 27         mov b, g
6444   2AE8 74            mov d, b
6445   2AE9 32            mov bl, [d]
6446   2AEA A7 00         mov bh, 0
6447   2AEC E7            pop d
6448   2AED FD 3E         mov [d], bl
6449   2AEF 0A A5 2A      jmp _while149_cond
6450   2AF2             _while149_exit:
6451   2AF2             ;; if(*prog != '\"') error("Double quotes expected"); 
6452   2AF2             _if150_cond:
6453   2AF2 3B 3A 3E      mov d, _prog ; $prog
6454   2AF5 2A            mov b, [d]
6455   2AF6 74            mov d, b
6456   2AF7 32            mov bl, [d]
6457   2AF8 A7 00         mov bh, 0
6458   2AFA             ; START RELATIONAL
6459   2AFA D7            push a
6460   2AFB 11            mov a, b
6461   2AFC 26 22 00      mov b, $22
6462   2AFF B0            cmp a, b
6463   2B00 FD 72         sneq ; !=
6464   2B02 E4            pop a
6465   2B03             ; END RELATIONAL
6466   2B03 C0 00 00      cmp b, 0
6467   2B06 C6 18 2B      je _if150_exit
6468   2B09             _if150_true:
6469   2B09             ;; error("Double quotes expected"); 
6470   2B09 26 9F 42      mov b, __s74 ; "Double quotes expected"
6471   2B0C FD AB         swp b
6472   2B0E D8            push b
6473   2B0F 07 1F 31      call error
6474   2B12 51 02 00      add sp, 2
6475   2B15 0A 18 2B      jmp _if150_exit
6476   2B18             _if150_exit:
6477   2B18             ;; *t++ = '\"'; 
6478   2B18 FA FF FF      lea d, [bp + -1] ; $t
6479   2B1B 2A            mov b, [d]
6480   2B1C FD 79         mov g, b
6481   2B1E FD 77         inc b
6482   2B20 FA FF FF      lea d, [bp + -1] ; $t
6483   2B23 FD 43         mov [d], b
6484   2B25 FD 27         mov b, g
6485   2B27 D8            push b
6486   2B28 26 22 00      mov b, $22
6487   2B2B E7            pop d
6488   2B2C FD 3E         mov [d], bl
6489   2B2E             ;; prog++; 
6490   2B2E 3B 3A 3E      mov d, _prog ; $prog
6491   2B31 2A            mov b, [d]
6492   2B32 FD 79         mov g, b
6493   2B34 FD 77         inc b
6494   2B36 3B 3A 3E      mov d, _prog ; $prog
6495   2B39 FD 43         mov [d], b
6496   2B3B FD 27         mov b, g
6497   2B3D             ;; toktype = STRING_CONST; 
6498   2B3D 3B 38 3E      mov d, _toktype ; $toktype
6499   2B40 DA            push d
6500   2B41 26 04 00      mov b, 4; STRING_CONST
6501   2B44 E7            pop d
6502   2B45 FD 43         mov [d], b
6503   2B47             ;; *t = '\0'; 
6504   2B47 FA FF FF      lea d, [bp + -1] ; $t
6505   2B4A 2A            mov b, [d]
6506   2B4B D8            push b
6507   2B4C 26 00 00      mov b, $0
6508   2B4F E7            pop d
6509   2B50 FD 3E         mov [d], bl
6510   2B52             ;; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
6511   2B52 07 C9 2E      call convert_constant
6512   2B55 0A 4C 2E      jmp _if148_exit
6513   2B58             _if148_else:
6514   2B58             ;; if(*prog == '['){ 
6515   2B58             _if151_cond:
6516   2B58 3B 3A 3E      mov d, _prog ; $prog
6517   2B5B 2A            mov b, [d]
6518   2B5C 74            mov d, b
6519   2B5D 32            mov bl, [d]
6520   2B5E A7 00         mov bh, 0
6521   2B60             ; START RELATIONAL
6522   2B60 D7            push a
6523   2B61 11            mov a, b
6524   2B62 26 5B 00      mov b, $5b
6525   2B65 B0            cmp a, b
6526   2B66 FD 71         seq ; ==
6527   2B68 E4            pop a
6528   2B69             ; END RELATIONAL
6529   2B69 C0 00 00      cmp b, 0
6530   2B6C C6 AC 2B      je _if151_else
6531   2B6F             _if151_true:
6532   2B6F             ;; *t++ = *prog++; 
6533   2B6F FA FF FF      lea d, [bp + -1] ; $t
6534   2B72 2A            mov b, [d]
6535   2B73 FD 79         mov g, b
6536   2B75 FD 77         inc b
6537   2B77 FA FF FF      lea d, [bp + -1] ; $t
6538   2B7A FD 43         mov [d], b
6539   2B7C FD 27         mov b, g
6540   2B7E D8            push b
6541   2B7F 3B 3A 3E      mov d, _prog ; $prog
6542   2B82 2A            mov b, [d]
6543   2B83 FD 79         mov g, b
6544   2B85 FD 77         inc b
6545   2B87 3B 3A 3E      mov d, _prog ; $prog
6546   2B8A FD 43         mov [d], b
6547   2B8C FD 27         mov b, g
6548   2B8E 74            mov d, b
6549   2B8F 32            mov bl, [d]
6550   2B90 A7 00         mov bh, 0
6551   2B92 E7            pop d
6552   2B93 FD 3E         mov [d], bl
6553   2B95             ;; tok = OPENING_BRACKET; 
6554   2B95 3B 36 3E      mov d, _tok ; $tok
6555   2B98 DA            push d
6556   2B99 26 0B 00      mov b, 11; OPENING_BRACKET
6557   2B9C E7            pop d
6558   2B9D FD 43         mov [d], b
6559   2B9F             ;; toktype = DELIMITER;   
6560   2B9F 3B 38 3E      mov d, _toktype ; $toktype
6561   2BA2 DA            push d
6562   2BA3 26 02 00      mov b, 2; DELIMITER
6563   2BA6 E7            pop d
6564   2BA7 FD 43         mov [d], b
6565   2BA9 0A 4C 2E      jmp _if151_exit
6566   2BAC             _if151_else:
6567   2BAC             ;; if(*prog == ']'){ 
6568   2BAC             _if152_cond:
6569   2BAC 3B 3A 3E      mov d, _prog ; $prog
6570   2BAF 2A            mov b, [d]
6571   2BB0 74            mov d, b
6572   2BB1 32            mov bl, [d]
6573   2BB2 A7 00         mov bh, 0
6574   2BB4             ; START RELATIONAL
6575   2BB4 D7            push a
6576   2BB5 11            mov a, b
6577   2BB6 26 5D 00      mov b, $5d
6578   2BB9 B0            cmp a, b
6579   2BBA FD 71         seq ; ==
6580   2BBC E4            pop a
6581   2BBD             ; END RELATIONAL
6582   2BBD C0 00 00      cmp b, 0
6583   2BC0 C6 00 2C      je _if152_else
6584   2BC3             _if152_true:
6585   2BC3             ;; *t++ = *prog++; 
6586   2BC3 FA FF FF      lea d, [bp + -1] ; $t
6587   2BC6 2A            mov b, [d]
6588   2BC7 FD 79         mov g, b
6589   2BC9 FD 77         inc b
6590   2BCB FA FF FF      lea d, [bp + -1] ; $t
6591   2BCE FD 43         mov [d], b
6592   2BD0 FD 27         mov b, g
6593   2BD2 D8            push b
6594   2BD3 3B 3A 3E      mov d, _prog ; $prog
6595   2BD6 2A            mov b, [d]
6596   2BD7 FD 79         mov g, b
6597   2BD9 FD 77         inc b
6598   2BDB 3B 3A 3E      mov d, _prog ; $prog
6599   2BDE FD 43         mov [d], b
6600   2BE0 FD 27         mov b, g
6601   2BE2 74            mov d, b
6602   2BE3 32            mov bl, [d]
6603   2BE4 A7 00         mov bh, 0
6604   2BE6 E7            pop d
6605   2BE7 FD 3E         mov [d], bl
6606   2BE9             ;; tok = CLOSING_BRACKET; 
6607   2BE9 3B 36 3E      mov d, _tok ; $tok
6608   2BEC DA            push d
6609   2BED 26 0C 00      mov b, 12; CLOSING_BRACKET
6610   2BF0 E7            pop d
6611   2BF1 FD 43         mov [d], b
6612   2BF3             ;; toktype = DELIMITER;   
6613   2BF3 3B 38 3E      mov d, _toktype ; $toktype
6614   2BF6 DA            push d
6615   2BF7 26 02 00      mov b, 2; DELIMITER
6616   2BFA E7            pop d
6617   2BFB FD 43         mov [d], b
6618   2BFD 0A 4C 2E      jmp _if152_exit
6619   2C00             _if152_else:
6620   2C00             ;; if(*prog == '+'){ 
6621   2C00             _if153_cond:
6622   2C00 3B 3A 3E      mov d, _prog ; $prog
6623   2C03 2A            mov b, [d]
6624   2C04 74            mov d, b
6625   2C05 32            mov bl, [d]
6626   2C06 A7 00         mov bh, 0
6627   2C08             ; START RELATIONAL
6628   2C08 D7            push a
6629   2C09 11            mov a, b
6630   2C0A 26 2B 00      mov b, $2b
6631   2C0D B0            cmp a, b
6632   2C0E FD 71         seq ; ==
6633   2C10 E4            pop a
6634   2C11             ; END RELATIONAL
6635   2C11 C0 00 00      cmp b, 0
6636   2C14 C6 54 2C      je _if153_else
6637   2C17             _if153_true:
6638   2C17             ;; *t++ = *prog++; 
6639   2C17 FA FF FF      lea d, [bp + -1] ; $t
6640   2C1A 2A            mov b, [d]
6641   2C1B FD 79         mov g, b
6642   2C1D FD 77         inc b
6643   2C1F FA FF FF      lea d, [bp + -1] ; $t
6644   2C22 FD 43         mov [d], b
6645   2C24 FD 27         mov b, g
6646   2C26 D8            push b
6647   2C27 3B 3A 3E      mov d, _prog ; $prog
6648   2C2A 2A            mov b, [d]
6649   2C2B FD 79         mov g, b
6650   2C2D FD 77         inc b
6651   2C2F 3B 3A 3E      mov d, _prog ; $prog
6652   2C32 FD 43         mov [d], b
6653   2C34 FD 27         mov b, g
6654   2C36 74            mov d, b
6655   2C37 32            mov bl, [d]
6656   2C38 A7 00         mov bh, 0
6657   2C3A E7            pop d
6658   2C3B FD 3E         mov [d], bl
6659   2C3D             ;; tok = PLUS; 
6660   2C3D 3B 36 3E      mov d, _tok ; $tok
6661   2C40 DA            push d
6662   2C41 26 08 00      mov b, 8; PLUS
6663   2C44 E7            pop d
6664   2C45 FD 43         mov [d], b
6665   2C47             ;; toktype = DELIMITER;   
6666   2C47 3B 38 3E      mov d, _toktype ; $toktype
6667   2C4A DA            push d
6668   2C4B 26 02 00      mov b, 2; DELIMITER
6669   2C4E E7            pop d
6670   2C4F FD 43         mov [d], b
6671   2C51 0A 4C 2E      jmp _if153_exit
6672   2C54             _if153_else:
6673   2C54             ;; if(*prog == '-'){ 
6674   2C54             _if154_cond:
6675   2C54 3B 3A 3E      mov d, _prog ; $prog
6676   2C57 2A            mov b, [d]
6677   2C58 74            mov d, b
6678   2C59 32            mov bl, [d]
6679   2C5A A7 00         mov bh, 0
6680   2C5C             ; START RELATIONAL
6681   2C5C D7            push a
6682   2C5D 11            mov a, b
6683   2C5E 26 2D 00      mov b, $2d
6684   2C61 B0            cmp a, b
6685   2C62 FD 71         seq ; ==
6686   2C64 E4            pop a
6687   2C65             ; END RELATIONAL
6688   2C65 C0 00 00      cmp b, 0
6689   2C68 C6 A8 2C      je _if154_else
6690   2C6B             _if154_true:
6691   2C6B             ;; *t++ = *prog++; 
6692   2C6B FA FF FF      lea d, [bp + -1] ; $t
6693   2C6E 2A            mov b, [d]
6694   2C6F FD 79         mov g, b
6695   2C71 FD 77         inc b
6696   2C73 FA FF FF      lea d, [bp + -1] ; $t
6697   2C76 FD 43         mov [d], b
6698   2C78 FD 27         mov b, g
6699   2C7A D8            push b
6700   2C7B 3B 3A 3E      mov d, _prog ; $prog
6701   2C7E 2A            mov b, [d]
6702   2C7F FD 79         mov g, b
6703   2C81 FD 77         inc b
6704   2C83 3B 3A 3E      mov d, _prog ; $prog
6705   2C86 FD 43         mov [d], b
6706   2C88 FD 27         mov b, g
6707   2C8A 74            mov d, b
6708   2C8B 32            mov bl, [d]
6709   2C8C A7 00         mov bh, 0
6710   2C8E E7            pop d
6711   2C8F FD 3E         mov [d], bl
6712   2C91             ;; tok = MINUS; 
6713   2C91 3B 36 3E      mov d, _tok ; $tok
6714   2C94 DA            push d
6715   2C95 26 09 00      mov b, 9; MINUS
6716   2C98 E7            pop d
6717   2C99 FD 43         mov [d], b
6718   2C9B             ;; toktype = DELIMITER;   
6719   2C9B 3B 38 3E      mov d, _toktype ; $toktype
6720   2C9E DA            push d
6721   2C9F 26 02 00      mov b, 2; DELIMITER
6722   2CA2 E7            pop d
6723   2CA3 FD 43         mov [d], b
6724   2CA5 0A 4C 2E      jmp _if154_exit
6725   2CA8             _if154_else:
6726   2CA8             ;; if(*prog == '$'){ 
6727   2CA8             _if155_cond:
6728   2CA8 3B 3A 3E      mov d, _prog ; $prog
6729   2CAB 2A            mov b, [d]
6730   2CAC 74            mov d, b
6731   2CAD 32            mov bl, [d]
6732   2CAE A7 00         mov bh, 0
6733   2CB0             ; START RELATIONAL
6734   2CB0 D7            push a
6735   2CB1 11            mov a, b
6736   2CB2 26 24 00      mov b, $24
6737   2CB5 B0            cmp a, b
6738   2CB6 FD 71         seq ; ==
6739   2CB8 E4            pop a
6740   2CB9             ; END RELATIONAL
6741   2CB9 C0 00 00      cmp b, 0
6742   2CBC C6 FC 2C      je _if155_else
6743   2CBF             _if155_true:
6744   2CBF             ;; *t++ = *prog++; 
6745   2CBF FA FF FF      lea d, [bp + -1] ; $t
6746   2CC2 2A            mov b, [d]
6747   2CC3 FD 79         mov g, b
6748   2CC5 FD 77         inc b
6749   2CC7 FA FF FF      lea d, [bp + -1] ; $t
6750   2CCA FD 43         mov [d], b
6751   2CCC FD 27         mov b, g
6752   2CCE D8            push b
6753   2CCF 3B 3A 3E      mov d, _prog ; $prog
6754   2CD2 2A            mov b, [d]
6755   2CD3 FD 79         mov g, b
6756   2CD5 FD 77         inc b
6757   2CD7 3B 3A 3E      mov d, _prog ; $prog
6758   2CDA FD 43         mov [d], b
6759   2CDC FD 27         mov b, g
6760   2CDE 74            mov d, b
6761   2CDF 32            mov bl, [d]
6762   2CE0 A7 00         mov bh, 0
6763   2CE2 E7            pop d
6764   2CE3 FD 3E         mov [d], bl
6765   2CE5             ;; tok = DOLLAR; 
6766   2CE5 3B 36 3E      mov d, _tok ; $tok
6767   2CE8 DA            push d
6768   2CE9 26 0A 00      mov b, 10; DOLLAR
6769   2CEC E7            pop d
6770   2CED FD 43         mov [d], b
6771   2CEF             ;; toktype = DELIMITER;   
6772   2CEF 3B 38 3E      mov d, _toktype ; $toktype
6773   2CF2 DA            push d
6774   2CF3 26 02 00      mov b, 2; DELIMITER
6775   2CF6 E7            pop d
6776   2CF7 FD 43         mov [d], b
6777   2CF9 0A 4C 2E      jmp _if155_exit
6778   2CFC             _if155_else:
6779   2CFC             ;; if(*prog == ':'){ 
6780   2CFC             _if156_cond:
6781   2CFC 3B 3A 3E      mov d, _prog ; $prog
6782   2CFF 2A            mov b, [d]
6783   2D00 74            mov d, b
6784   2D01 32            mov bl, [d]
6785   2D02 A7 00         mov bh, 0
6786   2D04             ; START RELATIONAL
6787   2D04 D7            push a
6788   2D05 11            mov a, b
6789   2D06 26 3A 00      mov b, $3a
6790   2D09 B0            cmp a, b
6791   2D0A FD 71         seq ; ==
6792   2D0C E4            pop a
6793   2D0D             ; END RELATIONAL
6794   2D0D C0 00 00      cmp b, 0
6795   2D10 C6 50 2D      je _if156_else
6796   2D13             _if156_true:
6797   2D13             ;; *t++ = *prog++; 
6798   2D13 FA FF FF      lea d, [bp + -1] ; $t
6799   2D16 2A            mov b, [d]
6800   2D17 FD 79         mov g, b
6801   2D19 FD 77         inc b
6802   2D1B FA FF FF      lea d, [bp + -1] ; $t
6803   2D1E FD 43         mov [d], b
6804   2D20 FD 27         mov b, g
6805   2D22 D8            push b
6806   2D23 3B 3A 3E      mov d, _prog ; $prog
6807   2D26 2A            mov b, [d]
6808   2D27 FD 79         mov g, b
6809   2D29 FD 77         inc b
6810   2D2B 3B 3A 3E      mov d, _prog ; $prog
6811   2D2E FD 43         mov [d], b
6812   2D30 FD 27         mov b, g
6813   2D32 74            mov d, b
6814   2D33 32            mov bl, [d]
6815   2D34 A7 00         mov bh, 0
6816   2D36 E7            pop d
6817   2D37 FD 3E         mov [d], bl
6818   2D39             ;; tok = COLON; 
6819   2D39 3B 36 3E      mov d, _tok ; $tok
6820   2D3C DA            push d
6821   2D3D 26 0D 00      mov b, 13; COLON
6822   2D40 E7            pop d
6823   2D41 FD 43         mov [d], b
6824   2D43             ;; toktype = DELIMITER;   
6825   2D43 3B 38 3E      mov d, _toktype ; $toktype
6826   2D46 DA            push d
6827   2D47 26 02 00      mov b, 2; DELIMITER
6828   2D4A E7            pop d
6829   2D4B FD 43         mov [d], b
6830   2D4D 0A 4C 2E      jmp _if156_exit
6831   2D50             _if156_else:
6832   2D50             ;; if(*prog == ';'){ 
6833   2D50             _if157_cond:
6834   2D50 3B 3A 3E      mov d, _prog ; $prog
6835   2D53 2A            mov b, [d]
6836   2D54 74            mov d, b
6837   2D55 32            mov bl, [d]
6838   2D56 A7 00         mov bh, 0
6839   2D58             ; START RELATIONAL
6840   2D58 D7            push a
6841   2D59 11            mov a, b
6842   2D5A 26 3B 00      mov b, $3b
6843   2D5D B0            cmp a, b
6844   2D5E FD 71         seq ; ==
6845   2D60 E4            pop a
6846   2D61             ; END RELATIONAL
6847   2D61 C0 00 00      cmp b, 0
6848   2D64 C6 A4 2D      je _if157_else
6849   2D67             _if157_true:
6850   2D67             ;; *t++ = *prog++; 
6851   2D67 FA FF FF      lea d, [bp + -1] ; $t
6852   2D6A 2A            mov b, [d]
6853   2D6B FD 79         mov g, b
6854   2D6D FD 77         inc b
6855   2D6F FA FF FF      lea d, [bp + -1] ; $t
6856   2D72 FD 43         mov [d], b
6857   2D74 FD 27         mov b, g
6858   2D76 D8            push b
6859   2D77 3B 3A 3E      mov d, _prog ; $prog
6860   2D7A 2A            mov b, [d]
6861   2D7B FD 79         mov g, b
6862   2D7D FD 77         inc b
6863   2D7F 3B 3A 3E      mov d, _prog ; $prog
6864   2D82 FD 43         mov [d], b
6865   2D84 FD 27         mov b, g
6866   2D86 74            mov d, b
6867   2D87 32            mov bl, [d]
6868   2D88 A7 00         mov bh, 0
6869   2D8A E7            pop d
6870   2D8B FD 3E         mov [d], bl
6871   2D8D             ;; tok = SEMICOLON; 
6872   2D8D 3B 36 3E      mov d, _tok ; $tok
6873   2D90 DA            push d
6874   2D91 26 0E 00      mov b, 14; SEMICOLON
6875   2D94 E7            pop d
6876   2D95 FD 43         mov [d], b
6877   2D97             ;; toktype = DELIMITER;   
6878   2D97 3B 38 3E      mov d, _toktype ; $toktype
6879   2D9A DA            push d
6880   2D9B 26 02 00      mov b, 2; DELIMITER
6881   2D9E E7            pop d
6882   2D9F FD 43         mov [d], b
6883   2DA1 0A 4C 2E      jmp _if157_exit
6884   2DA4             _if157_else:
6885   2DA4             ;; if(*prog == ','){ 
6886   2DA4             _if158_cond:
6887   2DA4 3B 3A 3E      mov d, _prog ; $prog
6888   2DA7 2A            mov b, [d]
6889   2DA8 74            mov d, b
6890   2DA9 32            mov bl, [d]
6891   2DAA A7 00         mov bh, 0
6892   2DAC             ; START RELATIONAL
6893   2DAC D7            push a
6894   2DAD 11            mov a, b
6895   2DAE 26 2C 00      mov b, $2c
6896   2DB1 B0            cmp a, b
6897   2DB2 FD 71         seq ; ==
6898   2DB4 E4            pop a
6899   2DB5             ; END RELATIONAL
6900   2DB5 C0 00 00      cmp b, 0
6901   2DB8 C6 F8 2D      je _if158_else
6902   2DBB             _if158_true:
6903   2DBB             ;; *t++ = *prog++; 
6904   2DBB FA FF FF      lea d, [bp + -1] ; $t
6905   2DBE 2A            mov b, [d]
6906   2DBF FD 79         mov g, b
6907   2DC1 FD 77         inc b
6908   2DC3 FA FF FF      lea d, [bp + -1] ; $t
6909   2DC6 FD 43         mov [d], b
6910   2DC8 FD 27         mov b, g
6911   2DCA D8            push b
6912   2DCB 3B 3A 3E      mov d, _prog ; $prog
6913   2DCE 2A            mov b, [d]
6914   2DCF FD 79         mov g, b
6915   2DD1 FD 77         inc b
6916   2DD3 3B 3A 3E      mov d, _prog ; $prog
6917   2DD6 FD 43         mov [d], b
6918   2DD8 FD 27         mov b, g
6919   2DDA 74            mov d, b
6920   2DDB 32            mov bl, [d]
6921   2DDC A7 00         mov bh, 0
6922   2DDE E7            pop d
6923   2DDF FD 3E         mov [d], bl
6924   2DE1             ;; tok = COMMA; 
6925   2DE1 3B 36 3E      mov d, _tok ; $tok
6926   2DE4 DA            push d
6927   2DE5 26 0F 00      mov b, 15; COMMA
6928   2DE8 E7            pop d
6929   2DE9 FD 43         mov [d], b
6930   2DEB             ;; toktype = DELIMITER;   
6931   2DEB 3B 38 3E      mov d, _toktype ; $toktype
6932   2DEE DA            push d
6933   2DEF 26 02 00      mov b, 2; DELIMITER
6934   2DF2 E7            pop d
6935   2DF3 FD 43         mov [d], b
6936   2DF5 0A 4C 2E      jmp _if158_exit
6937   2DF8             _if158_else:
6938   2DF8             ;; if(*prog == '.'){ 
6939   2DF8             _if159_cond:
6940   2DF8 3B 3A 3E      mov d, _prog ; $prog
6941   2DFB 2A            mov b, [d]
6942   2DFC 74            mov d, b
6943   2DFD 32            mov bl, [d]
6944   2DFE A7 00         mov bh, 0
6945   2E00             ; START RELATIONAL
6946   2E00 D7            push a
6947   2E01 11            mov a, b
6948   2E02 26 2E 00      mov b, $2e
6949   2E05 B0            cmp a, b
6950   2E06 FD 71         seq ; ==
6951   2E08 E4            pop a
6952   2E09             ; END RELATIONAL
6953   2E09 C0 00 00      cmp b, 0
6954   2E0C C6 4C 2E      je _if159_exit
6955   2E0F             _if159_true:
6956   2E0F             ;; *t++ = *prog++; 
6957   2E0F FA FF FF      lea d, [bp + -1] ; $t
6958   2E12 2A            mov b, [d]
6959   2E13 FD 79         mov g, b
6960   2E15 FD 77         inc b
6961   2E17 FA FF FF      lea d, [bp + -1] ; $t
6962   2E1A FD 43         mov [d], b
6963   2E1C FD 27         mov b, g
6964   2E1E D8            push b
6965   2E1F 3B 3A 3E      mov d, _prog ; $prog
6966   2E22 2A            mov b, [d]
6967   2E23 FD 79         mov g, b
6968   2E25 FD 77         inc b
6969   2E27 3B 3A 3E      mov d, _prog ; $prog
6970   2E2A FD 43         mov [d], b
6971   2E2C FD 27         mov b, g
6972   2E2E 74            mov d, b
6973   2E2F 32            mov bl, [d]
6974   2E30 A7 00         mov bh, 0
6975   2E32 E7            pop d
6976   2E33 FD 3E         mov [d], bl
6977   2E35             ;; tok = DOT; 
6978   2E35 3B 36 3E      mov d, _tok ; $tok
6979   2E38 DA            push d
6980   2E39 26 10 00      mov b, 16; DOT
6981   2E3C E7            pop d
6982   2E3D FD 43         mov [d], b
6983   2E3F             ;; toktype = DELIMITER;   
6984   2E3F 3B 38 3E      mov d, _toktype ; $toktype
6985   2E42 DA            push d
6986   2E43 26 02 00      mov b, 2; DELIMITER
6987   2E46 E7            pop d
6988   2E47 FD 43         mov [d], b
6989   2E49 0A 4C 2E      jmp _if159_exit
6990   2E4C             _if159_exit:
6991   2E4C             _if158_exit:
6992   2E4C             _if157_exit:
6993   2E4C             _if156_exit:
6994   2E4C             _if155_exit:
6995   2E4C             _if154_exit:
6996   2E4C             _if153_exit:
6997   2E4C             _if152_exit:
6998   2E4C             _if151_exit:
6999   2E4C             _if148_exit:
7000   2E4C             _if145_exit:
7001   2E4C             _if141_exit:
7002   2E4C             _if138_exit:
7003   2E4C             ;; *t = '\0'; 
7004   2E4C FA FF FF      lea d, [bp + -1] ; $t
7005   2E4F 2A            mov b, [d]
7006   2E50 D8            push b
7007   2E51 26 00 00      mov b, $0
7008   2E54 E7            pop d
7009   2E55 FD 3E         mov [d], bl
7010   2E57             ;; if(toktype == TYPE_UNDEF){ 
7011   2E57             _if160_cond:
7012   2E57 3B 38 3E      mov d, _toktype ; $toktype
7013   2E5A 2A            mov b, [d]
7014   2E5B             ; START RELATIONAL
7015   2E5B D7            push a
7016   2E5C 11            mov a, b
7017   2E5D 26 00 00      mov b, 0; TYPE_UNDEF
7018   2E60 B0            cmp a, b
7019   2E61 FD 71         seq ; ==
7020   2E63 E4            pop a
7021   2E64             ; END RELATIONAL
7022   2E64 C0 00 00      cmp b, 0
7023   2E67 C6 C7 2E      je _if160_exit
7024   2E6A             _if160_true:
7025   2E6A             ;; print("TOKEN ERROR. Prog: "); printx16((int)(prog-program));  
7026   2E6A 26 B6 42      mov b, __s75 ; "TOKEN ERROR. Prog: "
7027   2E6D FD AB         swp b
7028   2E6F D8            push b
7029   2E70 07 0C 36      call print
7030   2E73 51 02 00      add sp, 2
7031   2E76             ;; printx16((int)(prog-program));  
7032   2E76 AB            snex b
7033   2E77 3B 3A 3E      mov d, _prog ; $prog
7034   2E7A 2A            mov b, [d]
7035   2E7B             ; START TERMS
7036   2E7B D7            push a
7037   2E7C 11            mov a, b
7038   2E7D 3B 7E 3F      mov d, _program ; $program
7039   2E80 2A            mov b, [d]
7040   2E81 60            sub a, b
7041   2E82 27            mov b, a
7042   2E83 E4            pop a
7043   2E84             ; END TERMS
7044   2E84 FD AB         swp b
7045   2E86 D8            push b
7046   2E87 07 BD 32      call printx16
7047   2E8A 51 02 00      add sp, 2
7048   2E8D             ;; print(", ProgVal: "); putchar(*prog);  
7049   2E8D 26 CA 42      mov b, __s76 ; ", ProgVal: "
7050   2E90 FD AB         swp b
7051   2E92 D8            push b
7052   2E93 07 0C 36      call print
7053   2E96 51 02 00      add sp, 2
7054   2E99             ;; putchar(*prog);  
7055   2E99 3B 3A 3E      mov d, _prog ; $prog
7056   2E9C 2A            mov b, [d]
7057   2E9D 74            mov d, b
7058   2E9E 32            mov bl, [d]
7059   2E9F A7 00         mov bh, 0
7060   2EA1 DD            push bl
7061   2EA2 07 FF 35      call putchar
7062   2EA5 51 01 00      add sp, 1
7063   2EA8             ;; print("\n Text after prog: \n"); 
7064   2EA8 26 D6 42      mov b, __s77 ; "\n Text after prog: \n"
7065   2EAB FD AB         swp b
7066   2EAD D8            push b
7067   2EAE 07 0C 36      call print
7068   2EB1 51 02 00      add sp, 2
7069   2EB4             ;; print(prog); 
7070   2EB4 3B 3A 3E      mov d, _prog ; $prog
7071   2EB7 2A            mov b, [d]
7072   2EB8 FD AB         swp b
7073   2EBA D8            push b
7074   2EBB 07 0C 36      call print
7075   2EBE 51 02 00      add sp, 2
7076   2EC1             ;; exit(); 
7077   2EC1 07 6B 36      call exit
7078   2EC4 0A C7 2E      jmp _if160_exit
7079   2EC7             _if160_exit:
7080   2EC7 F9            leave
7081   2EC8 09            ret
7082   2EC9             
7083   2EC9             convert_constant:
7084   2EC9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7085   2ECC             ; $s 
7086   2ECC             ; $t 
7087   2ECC 52 04 00      sub sp, 4
7088   2ECF             ;; t = token; 
7089   2ECF FA FD FF      lea d, [bp + -3] ; $t
7090   2ED2 DA            push d
7091   2ED3 3B 3C 3E      mov d, _token_data ; $token
7092   2ED6 2D            mov b, d
7093   2ED7 E7            pop d
7094   2ED8 FD 43         mov [d], b
7095   2EDA             ;; s = string_const; 
7096   2EDA FA FF FF      lea d, [bp + -1] ; $s
7097   2EDD DA            push d
7098   2EDE 3B 7C 3E      mov d, _string_const_data ; $string_const
7099   2EE1 2D            mov b, d
7100   2EE2 E7            pop d
7101   2EE3 FD 43         mov [d], b
7102   2EE5             ;; if(toktype == CHAR_CONST){ 
7103   2EE5             _if161_cond:
7104   2EE5 3B 38 3E      mov d, _toktype ; $toktype
7105   2EE8 2A            mov b, [d]
7106   2EE9             ; START RELATIONAL
7107   2EE9 D7            push a
7108   2EEA 11            mov a, b
7109   2EEB 26 03 00      mov b, 3; CHAR_CONST
7110   2EEE B0            cmp a, b
7111   2EEF FD 71         seq ; ==
7112   2EF1 E4            pop a
7113   2EF2             ; END RELATIONAL
7114   2EF2 C0 00 00      cmp b, 0
7115   2EF5 C6 A0 30      je _if161_else
7116   2EF8             _if161_true:
7117   2EF8             ;; t++; 
7118   2EF8 FA FD FF      lea d, [bp + -3] ; $t
7119   2EFB 2A            mov b, [d]
7120   2EFC FD 79         mov g, b
7121   2EFE FD 77         inc b
7122   2F00 FA FD FF      lea d, [bp + -3] ; $t
7123   2F03 FD 43         mov [d], b
7124   2F05 FD 27         mov b, g
7125   2F07             ;; if(*t == '\\'){ 
7126   2F07             _if162_cond:
7127   2F07 FA FD FF      lea d, [bp + -3] ; $t
7128   2F0A 2A            mov b, [d]
7129   2F0B 74            mov d, b
7130   2F0C 32            mov bl, [d]
7131   2F0D A7 00         mov bh, 0
7132   2F0F             ; START RELATIONAL
7133   2F0F D7            push a
7134   2F10 11            mov a, b
7135   2F11 26 5C 00      mov b, $5c
7136   2F14 B0            cmp a, b
7137   2F15 FD 71         seq ; ==
7138   2F17 E4            pop a
7139   2F18             ; END RELATIONAL
7140   2F18 C0 00 00      cmp b, 0
7141   2F1B C6 82 30      je _if162_else
7142   2F1E             _if162_true:
7143   2F1E             ;; t++; 
7144   2F1E FA FD FF      lea d, [bp + -3] ; $t
7145   2F21 2A            mov b, [d]
7146   2F22 FD 79         mov g, b
7147   2F24 FD 77         inc b
7148   2F26 FA FD FF      lea d, [bp + -3] ; $t
7149   2F29 FD 43         mov [d], b
7150   2F2B FD 27         mov b, g
7151   2F2D             ;; switch(*t){ 
7152   2F2D             _switch163_expr:
7153   2F2D FA FD FF      lea d, [bp + -3] ; $t
7154   2F30 2A            mov b, [d]
7155   2F31 74            mov d, b
7156   2F32 32            mov bl, [d]
7157   2F33 A7 00         mov bh, 0
7158   2F35             _switch163_comparisons:
7159   2F35 C1 30         cmp bl, $30
7160   2F37 C6 6F 2F      je _switch163_case0
7161   2F3A C1 61         cmp bl, $61
7162   2F3C C6 88 2F      je _switch163_case1
7163   2F3F C1 62         cmp bl, $62
7164   2F41 C6 A1 2F      je _switch163_case2
7165   2F44 C1 66         cmp bl, $66
7166   2F46 C6 BA 2F      je _switch163_case3
7167   2F49 C1 6E         cmp bl, $6e
7168   2F4B C6 D3 2F      je _switch163_case4
7169   2F4E C1 72         cmp bl, $72
7170   2F50 C6 EC 2F      je _switch163_case5
7171   2F53 C1 74         cmp bl, $74
7172   2F55 C6 05 30      je _switch163_case6
7173   2F58 C1 76         cmp bl, $76
7174   2F5A C6 1E 30      je _switch163_case7
7175   2F5D C1 5C         cmp bl, $5c
7176   2F5F C6 37 30      je _switch163_case8
7177   2F62 C1 27         cmp bl, $27
7178   2F64 C6 50 30      je _switch163_case9
7179   2F67 C1 22         cmp bl, $22
7180   2F69 C6 69 30      je _switch163_case10
7181   2F6C 0A 7F 30      jmp _switch163_exit
7182   2F6F             _switch163_case0:
7183   2F6F             ;; *s++ = '\0'; 
7184   2F6F FA FF FF      lea d, [bp + -1] ; $s
7185   2F72 2A            mov b, [d]
7186   2F73 FD 79         mov g, b
7187   2F75 FD 77         inc b
7188   2F77 FA FF FF      lea d, [bp + -1] ; $s
7189   2F7A FD 43         mov [d], b
7190   2F7C FD 27         mov b, g
7191   2F7E D8            push b
7192   2F7F 26 00 00      mov b, $0
7193   2F82 E7            pop d
7194   2F83 FD 3E         mov [d], bl
7195   2F85             ;; break; 
7196   2F85 0A 7F 30      jmp _switch163_exit ; case break
7197   2F88             _switch163_case1:
7198   2F88             ;; *s++ = '\a'; 
7199   2F88 FA FF FF      lea d, [bp + -1] ; $s
7200   2F8B 2A            mov b, [d]
7201   2F8C FD 79         mov g, b
7202   2F8E FD 77         inc b
7203   2F90 FA FF FF      lea d, [bp + -1] ; $s
7204   2F93 FD 43         mov [d], b
7205   2F95 FD 27         mov b, g
7206   2F97 D8            push b
7207   2F98 26 07 00      mov b, $7
7208   2F9B E7            pop d
7209   2F9C FD 3E         mov [d], bl
7210   2F9E             ;; break; 
7211   2F9E 0A 7F 30      jmp _switch163_exit ; case break
7212   2FA1             _switch163_case2:
7213   2FA1             ;; *s++ = '\b'; 
7214   2FA1 FA FF FF      lea d, [bp + -1] ; $s
7215   2FA4 2A            mov b, [d]
7216   2FA5 FD 79         mov g, b
7217   2FA7 FD 77         inc b
7218   2FA9 FA FF FF      lea d, [bp + -1] ; $s
7219   2FAC FD 43         mov [d], b
7220   2FAE FD 27         mov b, g
7221   2FB0 D8            push b
7222   2FB1 26 08 00      mov b, $8
7223   2FB4 E7            pop d
7224   2FB5 FD 3E         mov [d], bl
7225   2FB7             ;; break;   
7226   2FB7 0A 7F 30      jmp _switch163_exit ; case break
7227   2FBA             _switch163_case3:
7228   2FBA             ;; *s++ = '\f'; 
7229   2FBA FA FF FF      lea d, [bp + -1] ; $s
7230   2FBD 2A            mov b, [d]
7231   2FBE FD 79         mov g, b
7232   2FC0 FD 77         inc b
7233   2FC2 FA FF FF      lea d, [bp + -1] ; $s
7234   2FC5 FD 43         mov [d], b
7235   2FC7 FD 27         mov b, g
7236   2FC9 D8            push b
7237   2FCA 26 0C 00      mov b, $c
7238   2FCD E7            pop d
7239   2FCE FD 3E         mov [d], bl
7240   2FD0             ;; break; 
7241   2FD0 0A 7F 30      jmp _switch163_exit ; case break
7242   2FD3             _switch163_case4:
7243   2FD3             ;; *s++ = '\n'; 
7244   2FD3 FA FF FF      lea d, [bp + -1] ; $s
7245   2FD6 2A            mov b, [d]
7246   2FD7 FD 79         mov g, b
7247   2FD9 FD 77         inc b
7248   2FDB FA FF FF      lea d, [bp + -1] ; $s
7249   2FDE FD 43         mov [d], b
7250   2FE0 FD 27         mov b, g
7251   2FE2 D8            push b
7252   2FE3 26 0A 00      mov b, $a
7253   2FE6 E7            pop d
7254   2FE7 FD 3E         mov [d], bl
7255   2FE9             ;; break; 
7256   2FE9 0A 7F 30      jmp _switch163_exit ; case break
7257   2FEC             _switch163_case5:
7258   2FEC             ;; *s++ = '\r'; 
7259   2FEC FA FF FF      lea d, [bp + -1] ; $s
7260   2FEF 2A            mov b, [d]
7261   2FF0 FD 79         mov g, b
7262   2FF2 FD 77         inc b
7263   2FF4 FA FF FF      lea d, [bp + -1] ; $s
7264   2FF7 FD 43         mov [d], b
7265   2FF9 FD 27         mov b, g
7266   2FFB D8            push b
7267   2FFC 26 0D 00      mov b, $d
7268   2FFF E7            pop d
7269   3000 FD 3E         mov [d], bl
7270   3002             ;; break; 
7271   3002 0A 7F 30      jmp _switch163_exit ; case break
7272   3005             _switch163_case6:
7273   3005             ;; *s++ = '\t'; 
7274   3005 FA FF FF      lea d, [bp + -1] ; $s
7275   3008 2A            mov b, [d]
7276   3009 FD 79         mov g, b
7277   300B FD 77         inc b
7278   300D FA FF FF      lea d, [bp + -1] ; $s
7279   3010 FD 43         mov [d], b
7280   3012 FD 27         mov b, g
7281   3014 D8            push b
7282   3015 26 09 00      mov b, $9
7283   3018 E7            pop d
7284   3019 FD 3E         mov [d], bl
7285   301B             ;; break; 
7286   301B 0A 7F 30      jmp _switch163_exit ; case break
7287   301E             _switch163_case7:
7288   301E             ;; *s++ = '\v'; 
7289   301E FA FF FF      lea d, [bp + -1] ; $s
7290   3021 2A            mov b, [d]
7291   3022 FD 79         mov g, b
7292   3024 FD 77         inc b
7293   3026 FA FF FF      lea d, [bp + -1] ; $s
7294   3029 FD 43         mov [d], b
7295   302B FD 27         mov b, g
7296   302D D8            push b
7297   302E 26 0B 00      mov b, $b
7298   3031 E7            pop d
7299   3032 FD 3E         mov [d], bl
7300   3034             ;; break; 
7301   3034 0A 7F 30      jmp _switch163_exit ; case break
7302   3037             _switch163_case8:
7303   3037             ;; *s++ = '\\'; 
7304   3037 FA FF FF      lea d, [bp + -1] ; $s
7305   303A 2A            mov b, [d]
7306   303B FD 79         mov g, b
7307   303D FD 77         inc b
7308   303F FA FF FF      lea d, [bp + -1] ; $s
7309   3042 FD 43         mov [d], b
7310   3044 FD 27         mov b, g
7311   3046 D8            push b
7312   3047 26 5C 00      mov b, $5c
7313   304A E7            pop d
7314   304B FD 3E         mov [d], bl
7315   304D             ;; break; 
7316   304D 0A 7F 30      jmp _switch163_exit ; case break
7317   3050             _switch163_case9:
7318   3050             ;; *s++ = '\''; 
7319   3050 FA FF FF      lea d, [bp + -1] ; $s
7320   3053 2A            mov b, [d]
7321   3054 FD 79         mov g, b
7322   3056 FD 77         inc b
7323   3058 FA FF FF      lea d, [bp + -1] ; $s
7324   305B FD 43         mov [d], b
7325   305D FD 27         mov b, g
7326   305F D8            push b
7327   3060 26 27 00      mov b, $27
7328   3063 E7            pop d
7329   3064 FD 3E         mov [d], bl
7330   3066             ;; break; 
7331   3066 0A 7F 30      jmp _switch163_exit ; case break
7332   3069             _switch163_case10:
7333   3069             ;; *s++ = '\"'; 
7334   3069 FA FF FF      lea d, [bp + -1] ; $s
7335   306C 2A            mov b, [d]
7336   306D FD 79         mov g, b
7337   306F FD 77         inc b
7338   3071 FA FF FF      lea d, [bp + -1] ; $s
7339   3074 FD 43         mov [d], b
7340   3076 FD 27         mov b, g
7341   3078 D8            push b
7342   3079 26 22 00      mov b, $22
7343   307C E7            pop d
7344   307D FD 3E         mov [d], bl
7345   307F             _switch163_exit:
7346   307F 0A 9D 30      jmp _if162_exit
7347   3082             _if162_else:
7348   3082             ;; *s++ = *t; 
7349   3082 FA FF FF      lea d, [bp + -1] ; $s
7350   3085 2A            mov b, [d]
7351   3086 FD 79         mov g, b
7352   3088 FD 77         inc b
7353   308A FA FF FF      lea d, [bp + -1] ; $s
7354   308D FD 43         mov [d], b
7355   308F FD 27         mov b, g
7356   3091 D8            push b
7357   3092 FA FD FF      lea d, [bp + -3] ; $t
7358   3095 2A            mov b, [d]
7359   3096 74            mov d, b
7360   3097 32            mov bl, [d]
7361   3098 A7 00         mov bh, 0
7362   309A E7            pop d
7363   309B FD 3E         mov [d], bl
7364   309D             _if162_exit:
7365   309D 0A 12 31      jmp _if161_exit
7366   30A0             _if161_else:
7367   30A0             ;; if(toktype == STRING_CONST){ 
7368   30A0             _if164_cond:
7369   30A0 3B 38 3E      mov d, _toktype ; $toktype
7370   30A3 2A            mov b, [d]
7371   30A4             ; START RELATIONAL
7372   30A4 D7            push a
7373   30A5 11            mov a, b
7374   30A6 26 04 00      mov b, 4; STRING_CONST
7375   30A9 B0            cmp a, b
7376   30AA FD 71         seq ; ==
7377   30AC E4            pop a
7378   30AD             ; END RELATIONAL
7379   30AD C0 00 00      cmp b, 0
7380   30B0 C6 12 31      je _if164_exit
7381   30B3             _if164_true:
7382   30B3             ;; t++; 
7383   30B3 FA FD FF      lea d, [bp + -3] ; $t
7384   30B6 2A            mov b, [d]
7385   30B7 FD 79         mov g, b
7386   30B9 FD 77         inc b
7387   30BB FA FD FF      lea d, [bp + -3] ; $t
7388   30BE FD 43         mov [d], b
7389   30C0 FD 27         mov b, g
7390   30C2             ;; while(*t != '\"' && *t){ 
7391   30C2             _while165_cond:
7392   30C2 FA FD FF      lea d, [bp + -3] ; $t
7393   30C5 2A            mov b, [d]
7394   30C6 74            mov d, b
7395   30C7 32            mov bl, [d]
7396   30C8 A7 00         mov bh, 0
7397   30CA             ; START RELATIONAL
7398   30CA D7            push a
7399   30CB 11            mov a, b
7400   30CC 26 22 00      mov b, $22
7401   30CF B0            cmp a, b
7402   30D0 FD 72         sneq ; !=
7403   30D2 E4            pop a
7404   30D3             ; END RELATIONAL
7405   30D3 D7            push a
7406   30D4 11            mov a, b
7407   30D5 FA FD FF      lea d, [bp + -3] ; $t
7408   30D8 2A            mov b, [d]
7409   30D9 74            mov d, b
7410   30DA 32            mov bl, [d]
7411   30DB A7 00         mov bh, 0
7412   30DD FD A7         sand a, b ; &&
7413   30DF E4            pop a
7414   30E0 C0 00 00      cmp b, 0
7415   30E3 C6 0F 31      je _while165_exit
7416   30E6             _while165_block:
7417   30E6             ;; *s++ = *t++; 
7418   30E6 FA FF FF      lea d, [bp + -1] ; $s
7419   30E9 2A            mov b, [d]
7420   30EA FD 79         mov g, b
7421   30EC FD 77         inc b
7422   30EE FA FF FF      lea d, [bp + -1] ; $s
7423   30F1 FD 43         mov [d], b
7424   30F3 FD 27         mov b, g
7425   30F5 D8            push b
7426   30F6 FA FD FF      lea d, [bp + -3] ; $t
7427   30F9 2A            mov b, [d]
7428   30FA FD 79         mov g, b
7429   30FC FD 77         inc b
7430   30FE FA FD FF      lea d, [bp + -3] ; $t
7431   3101 FD 43         mov [d], b
7432   3103 FD 27         mov b, g
7433   3105 74            mov d, b
7434   3106 32            mov bl, [d]
7435   3107 A7 00         mov bh, 0
7436   3109 E7            pop d
7437   310A FD 3E         mov [d], bl
7438   310C 0A C2 30      jmp _while165_cond
7439   310F             _while165_exit:
7440   310F 0A 12 31      jmp _if164_exit
7441   3112             _if164_exit:
7442   3112             _if161_exit:
7443   3112             ;; *s = '\0'; 
7444   3112 FA FF FF      lea d, [bp + -1] ; $s
7445   3115 2A            mov b, [d]
7446   3116 D8            push b
7447   3117 26 00 00      mov b, $0
7448   311A E7            pop d
7449   311B FD 3E         mov [d], bl
7450   311D F9            leave
7451   311E 09            ret
7452   311F             
7453   311F             error:
7454   311F F8 00 00      enter 0 ; (push bp; mov bp, sp)
7455   3122             ;; print("\nError: "); 
7456   3122 26 EB 42      mov b, __s78 ; "\nError: "
7457   3125 FD AB         swp b
7458   3127 D8            push b
7459   3128 07 0C 36      call print
7460   312B 51 02 00      add sp, 2
7461   312E             ;; print(msg); 
7462   312E FA 05 00      lea d, [bp + 5] ; $msg
7463   3131 2A            mov b, [d]
7464   3132 FD AB         swp b
7465   3134 D8            push b
7466   3135 07 0C 36      call print
7467   3138 51 02 00      add sp, 2
7468   313B             ;; print("\n"); 
7469   313B 26 D2 3F      mov b, __s9 ; "\n"
7470   313E FD AB         swp b
7471   3140 D8            push b
7472   3141 07 0C 36      call print
7473   3144 51 02 00      add sp, 2
7474   3147             ;; exit(); 
7475   3147 07 6B 36      call exit
7476   314A F9            leave
7477   314B 09            ret
7478   314C             
7479   314C             error_s:
7480   314C F8 00 00      enter 0 ; (push bp; mov bp, sp)
7481   314F             ;; print("\nError: "); 
7482   314F 26 EB 42      mov b, __s78 ; "\nError: "
7483   3152 FD AB         swp b
7484   3154 D8            push b
7485   3155 07 0C 36      call print
7486   3158 51 02 00      add sp, 2
7487   315B             ;; print(msg); 
7488   315B FA 07 00      lea d, [bp + 7] ; $msg
7489   315E 2A            mov b, [d]
7490   315F FD AB         swp b
7491   3161 D8            push b
7492   3162 07 0C 36      call print
7493   3165 51 02 00      add sp, 2
7494   3168             ;; print(param); 
7495   3168 FA 05 00      lea d, [bp + 5] ; $param
7496   316B 2A            mov b, [d]
7497   316C FD AB         swp b
7498   316E D8            push b
7499   316F 07 0C 36      call print
7500   3172 51 02 00      add sp, 2
7501   3175             ;; print("\n"); 
7502   3175 26 D2 3F      mov b, __s9 ; "\n"
7503   3178 FD AB         swp b
7504   317A D8            push b
7505   317B 07 0C 36      call print
7506   317E 51 02 00      add sp, 2
7507   3181             ;; exit(); 
7508   3181 07 6B 36      call exit
7509   3184 F9            leave
7510   3185 09            ret
7511   3186             
7512   3186             push_prog:
7513   3186 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7514   3189             ;; if(prog_tos == 10) error("Cannot push prog. Stack overflow."); 
7515   3189             _if166_cond:
7516   3189 3B 9A 3F      mov d, _prog_tos ; $prog_tos
7517   318C 2A            mov b, [d]
7518   318D             ; START RELATIONAL
7519   318D D7            push a
7520   318E 11            mov a, b
7521   318F 26 0A 00      mov b, $a
7522   3192 B0            cmp a, b
7523   3193 FD 71         seq ; ==
7524   3195 E4            pop a
7525   3196             ; END RELATIONAL
7526   3196 C0 00 00      cmp b, 0
7527   3199 C6 AB 31      je _if166_exit
7528   319C             _if166_true:
7529   319C             ;; error("Cannot push prog. Stack overflow."); 
7530   319C 26 F4 42      mov b, __s79 ; "Cannot push prog. Stack overflow."
7531   319F FD AB         swp b
7532   31A1 D8            push b
7533   31A2 07 1F 31      call error
7534   31A5 51 02 00      add sp, 2
7535   31A8 0A AB 31      jmp _if166_exit
7536   31AB             _if166_exit:
7537   31AB             ;; prog_stack[prog_tos] = prog; 
7538   31AB 3B 86 3F      mov d, _prog_stack_data ; $prog_stack
7539   31AE D7            push a
7540   31AF DA            push d
7541   31B0 3B 9A 3F      mov d, _prog_tos ; $prog_tos
7542   31B3 2A            mov b, [d]
7543   31B4 E7            pop d
7544   31B5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7545   31B9 E4            pop a
7546   31BA DA            push d
7547   31BB 3B 3A 3E      mov d, _prog ; $prog
7548   31BE 2A            mov b, [d]
7549   31BF E7            pop d
7550   31C0 FD 43         mov [d], b
7551   31C2             ;; prog_tos++; 
7552   31C2 3B 9A 3F      mov d, _prog_tos ; $prog_tos
7553   31C5 2A            mov b, [d]
7554   31C6 FD 79         mov g, b
7555   31C8 FD 77         inc b
7556   31CA 3B 9A 3F      mov d, _prog_tos ; $prog_tos
7557   31CD FD 43         mov [d], b
7558   31CF FD 27         mov b, g
7559   31D1 F9            leave
7560   31D2 09            ret
7561   31D3             
7562   31D3             pop_prog:
7563   31D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7564   31D6             ;; if(prog_tos == 0) error("Cannot pop prog. Stack overflow."); 
7565   31D6             _if167_cond:
7566   31D6 3B 9A 3F      mov d, _prog_tos ; $prog_tos
7567   31D9 2A            mov b, [d]
7568   31DA             ; START RELATIONAL
7569   31DA D7            push a
7570   31DB 11            mov a, b
7571   31DC 26 00 00      mov b, $0
7572   31DF B0            cmp a, b
7573   31E0 FD 71         seq ; ==
7574   31E2 E4            pop a
7575   31E3             ; END RELATIONAL
7576   31E3 C0 00 00      cmp b, 0
7577   31E6 C6 F8 31      je _if167_exit
7578   31E9             _if167_true:
7579   31E9             ;; error("Cannot pop prog. Stack overflow."); 
7580   31E9 26 16 43      mov b, __s80 ; "Cannot pop prog. Stack overflow."
7581   31EC FD AB         swp b
7582   31EE D8            push b
7583   31EF 07 1F 31      call error
7584   31F2 51 02 00      add sp, 2
7585   31F5 0A F8 31      jmp _if167_exit
7586   31F8             _if167_exit:
7587   31F8             ;; prog_tos--; 
7588   31F8 3B 9A 3F      mov d, _prog_tos ; $prog_tos
7589   31FB 2A            mov b, [d]
7590   31FC FD 79         mov g, b
7591   31FE FD 7D         dec b
7592   3200 3B 9A 3F      mov d, _prog_tos ; $prog_tos
7593   3203 FD 43         mov [d], b
7594   3205 FD 27         mov b, g
7595   3207             ;; prog = prog_stack[prog_tos]; 
7596   3207 3B 3A 3E      mov d, _prog ; $prog
7597   320A DA            push d
7598   320B 3B 86 3F      mov d, _prog_stack_data ; $prog_stack
7599   320E D7            push a
7600   320F DA            push d
7601   3210 3B 9A 3F      mov d, _prog_tos ; $prog_tos
7602   3213 2A            mov b, [d]
7603   3214 E7            pop d
7604   3215 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7605   3219 E4            pop a
7606   321A 2A            mov b, [d]
7607   321B E7            pop d
7608   321C FD 43         mov [d], b
7609   321E F9            leave
7610   321F 09            ret
7611   3220             
7612   3220             search_keyword:
7613   3220 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7614   3223             ; $i 
7615   3223 52 02 00      sub sp, 2
7616   3226             ;; for(i = 0; keywords[i].keyword[0]; i++) 
7617   3226             _for168_init:
7618   3226 FA FF FF      lea d, [bp + -1] ; $i
7619   3229 DA            push d
7620   322A 26 00 00      mov b, $0
7621   322D E7            pop d
7622   322E FD 43         mov [d], b
7623   3230             _for168_cond:
7624   3230 3B F9 3C      mov d, _keywords_data ; $keywords
7625   3233 D7            push a
7626   3234 DA            push d
7627   3235 FA FF FF      lea d, [bp + -1] ; $i
7628   3238 2A            mov b, [d]
7629   3239 E7            pop d
7630   323A FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
7631   323E E4            pop a
7632   323F 58 00 00      add d, 0
7633   3242 FD 14         clb
7634   3244 D7            push a
7635   3245 DA            push d
7636   3246 26 00 00      mov b, $0
7637   3249 E7            pop d
7638   324A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7639   324E E4            pop a
7640   324F 32            mov bl, [d]
7641   3250 A7 00         mov bh, 0
7642   3252 C0 00 00      cmp b, 0
7643   3255 C6 B6 32      je _for168_exit
7644   3258             _for168_block:
7645   3258             ;; if (!strcmp(keywords[i].keyword, keyword)) return keywords[i].tok; 
7646   3258             _if169_cond:
7647   3258 FA 05 00      lea d, [bp + 5] ; $keyword
7648   325B 2A            mov b, [d]
7649   325C FD AB         swp b
7650   325E D8            push b
7651   325F 3B F9 3C      mov d, _keywords_data ; $keywords
7652   3262 D7            push a
7653   3263 DA            push d
7654   3264 FA FF FF      lea d, [bp + -1] ; $i
7655   3267 2A            mov b, [d]
7656   3268 E7            pop d
7657   3269 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
7658   326D E4            pop a
7659   326E 58 00 00      add d, 0
7660   3271 FD 14         clb
7661   3273 2A            mov b, [d]
7662   3274 FD AB         swp b
7663   3276 D8            push b
7664   3277 07 31 37      call strcmp
7665   327A 51 04 00      add sp, 4
7666   327D C0 00 00      cmp b, 0
7667   3280 FD 71         seq ; !
7668   3282 C0 00 00      cmp b, 0
7669   3285 C6 A4 32      je _if169_exit
7670   3288             _if169_true:
7671   3288             ;; return keywords[i].tok; 
7672   3288 3B F9 3C      mov d, _keywords_data ; $keywords
7673   328B D7            push a
7674   328C DA            push d
7675   328D FA FF FF      lea d, [bp + -1] ; $i
7676   3290 2A            mov b, [d]
7677   3291 E7            pop d
7678   3292 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
7679   3296 E4            pop a
7680   3297 58 02 00      add d, 2
7681   329A FD 14         clb
7682   329C 32            mov bl, [d]
7683   329D A7 00         mov bh, 0
7684   329F F9            leave
7685   32A0 09            ret
7686   32A1 0A A4 32      jmp _if169_exit
7687   32A4             _if169_exit:
7688   32A4             _for168_update:
7689   32A4 FA FF FF      lea d, [bp + -1] ; $i
7690   32A7 2A            mov b, [d]
7691   32A8 FD 79         mov g, b
7692   32AA FD 77         inc b
7693   32AC FA FF FF      lea d, [bp + -1] ; $i
7694   32AF FD 43         mov [d], b
7695   32B1 FD 27         mov b, g
7696   32B3 0A 30 32      jmp _for168_cond
7697   32B6             _for168_exit:
7698   32B6             ;; return -1; 
7699   32B6 26 01 00      mov b, $1
7700   32B9 FD 97         neg b
7701   32BB F9            leave
7702   32BC 09            ret
7703   32BD             
7704   32BD             printx16:
7705   32BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
7706   32C0             
7707   32C0             ; --- BEGIN INLINE ASM BLOCK
7708   32C0 FA 05 00      lea d, [bp + 5] ; $hex
7709   32C3 2A            mov b, [d]
7710   32C4 07 F9 3B      call print_u16x
7711   32C7             ; --- END INLINE ASM BLOCK
7712   32C7             
7713   32C7 F9            leave
7714   32C8 09            ret
7715   32C9             
7716   32C9             printx8:
7717   32C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7718   32CC             
7719   32CC             ; --- BEGIN INLINE ASM BLOCK
7720   32CC FA 05 00      lea d, [bp + 5] ; $hex
7721   32CF 32            mov bl, [d]
7722   32D0 07 3D 3C      call print_u8x
7723   32D3             ; --- END INLINE ASM BLOCK
7724   32D3             
7725   32D3 F9            leave
7726   32D4 09            ret
7727   32D5             
7728   32D5             hex_to_int:
7729   32D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7730   32D8             ; $value 
7731   32D8 10 00 00      mov a, $0
7732   32DB 45 FF FF      mov [bp + -1], a
7733   32DE             ; $i 
7734   32DE             ; $hex_char 
7735   32DE             ; $len 
7736   32DE 52 07 00      sub sp, 7
7737   32E1             ;; len = strlen(hex_string); 
7738   32E1 FA FA FF      lea d, [bp + -6] ; $len
7739   32E4 DA            push d
7740   32E5 FA 05 00      lea d, [bp + 5] ; $hex_string
7741   32E8 2A            mov b, [d]
7742   32E9 FD AB         swp b
7743   32EB D8            push b
7744   32EC 07 4B 38      call strlen
7745   32EF 51 02 00      add sp, 2
7746   32F2 E7            pop d
7747   32F3 FD 43         mov [d], b
7748   32F5             ;; for (i = 0; i < len; i++) { 
7749   32F5             _for170_init:
7750   32F5 FA FD FF      lea d, [bp + -3] ; $i
7751   32F8 DA            push d
7752   32F9 26 00 00      mov b, $0
7753   32FC E7            pop d
7754   32FD FD 43         mov [d], b
7755   32FF             _for170_cond:
7756   32FF FA FD FF      lea d, [bp + -3] ; $i
7757   3302 2A            mov b, [d]
7758   3303             ; START RELATIONAL
7759   3303 D7            push a
7760   3304 11            mov a, b
7761   3305 FA FA FF      lea d, [bp + -6] ; $len
7762   3308 2A            mov b, [d]
7763   3309 B0            cmp a, b
7764   330A FD 73         slt ; < 
7765   330C E4            pop a
7766   330D             ; END RELATIONAL
7767   330D C0 00 00      cmp b, 0
7768   3310 C6 15 34      je _for170_exit
7769   3313             _for170_block:
7770   3313             ;; hex_char = hex_string[i]; 
7771   3313 FA FC FF      lea d, [bp + -4] ; $hex_char
7772   3316 DA            push d
7773   3317 FA 05 00      lea d, [bp + 5] ; $hex_string
7774   331A FD 2A         mov d, [d]
7775   331C D7            push a
7776   331D DA            push d
7777   331E FA FD FF      lea d, [bp + -3] ; $i
7778   3321 2A            mov b, [d]
7779   3322 E7            pop d
7780   3323 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
7781   3327 E4            pop a
7782   3328 32            mov bl, [d]
7783   3329 A7 00         mov bh, 0
7784   332B E7            pop d
7785   332C FD 3E         mov [d], bl
7786   332E             ;; if (hex_char >= 'a' && hex_char <= 'f')  
7787   332E             _if171_cond:
7788   332E FA FC FF      lea d, [bp + -4] ; $hex_char
7789   3331 32            mov bl, [d]
7790   3332 A7 00         mov bh, 0
7791   3334             ; START RELATIONAL
7792   3334 D7            push a
7793   3335 11            mov a, b
7794   3336 26 61 00      mov b, $61
7795   3339 B0            cmp a, b
7796   333A FD 80         sge ; >=
7797   333C E4            pop a
7798   333D             ; END RELATIONAL
7799   333D D7            push a
7800   333E 11            mov a, b
7801   333F FA FC FF      lea d, [bp + -4] ; $hex_char
7802   3342 32            mov bl, [d]
7803   3343 A7 00         mov bh, 0
7804   3345             ; START RELATIONAL
7805   3345 D7            push a
7806   3346 11            mov a, b
7807   3347 26 66 00      mov b, $66
7808   334A B0            cmp a, b
7809   334B FD 74         sle ; <=
7810   334D E4            pop a
7811   334E             ; END RELATIONAL
7812   334E FD A7         sand a, b ; &&
7813   3350 E4            pop a
7814   3351 C0 00 00      cmp b, 0
7815   3354 C6 85 33      je _if171_else
7816   3357             _if171_true:
7817   3357             ;; value = (value * 16) + (hex_char - 'a' + 10); 
7818   3357 FA FF FF      lea d, [bp + -1] ; $value
7819   335A DA            push d
7820   335B FA FF FF      lea d, [bp + -1] ; $value
7821   335E 2A            mov b, [d]
7822   335F             ; START FACTORS
7823   335F D7            push a
7824   3360 11            mov a, b
7825   3361 26 10 00      mov b, $10
7826   3364 AC            mul a, b ; *
7827   3365 11            mov a, b
7828   3366 27            mov b, a
7829   3367 E4            pop a
7830   3368             ; END FACTORS
7831   3368             ; START TERMS
7832   3368 D7            push a
7833   3369 11            mov a, b
7834   336A FA FC FF      lea d, [bp + -4] ; $hex_char
7835   336D 32            mov bl, [d]
7836   336E A7 00         mov bh, 0
7837   3370             ; START TERMS
7838   3370 D7            push a
7839   3371 11            mov a, b
7840   3372 26 61 00      mov b, $61
7841   3375 60            sub a, b
7842   3376 26 0A 00      mov b, $a
7843   3379 54            add a, b
7844   337A 27            mov b, a
7845   337B E4            pop a
7846   337C             ; END TERMS
7847   337C 54            add a, b
7848   337D 27            mov b, a
7849   337E E4            pop a
7850   337F             ; END TERMS
7851   337F E7            pop d
7852   3380 FD 43         mov [d], b
7853   3382 0A 03 34      jmp _if171_exit
7854   3385             _if171_else:
7855   3385             ;; if (hex_char >= 'A' && hex_char <= 'F')  
7856   3385             _if172_cond:
7857   3385 FA FC FF      lea d, [bp + -4] ; $hex_char
7858   3388 32            mov bl, [d]
7859   3389 A7 00         mov bh, 0
7860   338B             ; START RELATIONAL
7861   338B D7            push a
7862   338C 11            mov a, b
7863   338D 26 41 00      mov b, $41
7864   3390 B0            cmp a, b
7865   3391 FD 80         sge ; >=
7866   3393 E4            pop a
7867   3394             ; END RELATIONAL
7868   3394 D7            push a
7869   3395 11            mov a, b
7870   3396 FA FC FF      lea d, [bp + -4] ; $hex_char
7871   3399 32            mov bl, [d]
7872   339A A7 00         mov bh, 0
7873   339C             ; START RELATIONAL
7874   339C D7            push a
7875   339D 11            mov a, b
7876   339E 26 46 00      mov b, $46
7877   33A1 B0            cmp a, b
7878   33A2 FD 74         sle ; <=
7879   33A4 E4            pop a
7880   33A5             ; END RELATIONAL
7881   33A5 FD A7         sand a, b ; &&
7882   33A7 E4            pop a
7883   33A8 C0 00 00      cmp b, 0
7884   33AB C6 DC 33      je _if172_else
7885   33AE             _if172_true:
7886   33AE             ;; value = (value * 16) + (hex_char - 'A' + 10); 
7887   33AE FA FF FF      lea d, [bp + -1] ; $value
7888   33B1 DA            push d
7889   33B2 FA FF FF      lea d, [bp + -1] ; $value
7890   33B5 2A            mov b, [d]
7891   33B6             ; START FACTORS
7892   33B6 D7            push a
7893   33B7 11            mov a, b
7894   33B8 26 10 00      mov b, $10
7895   33BB AC            mul a, b ; *
7896   33BC 11            mov a, b
7897   33BD 27            mov b, a
7898   33BE E4            pop a
7899   33BF             ; END FACTORS
7900   33BF             ; START TERMS
7901   33BF D7            push a
7902   33C0 11            mov a, b
7903   33C1 FA FC FF      lea d, [bp + -4] ; $hex_char
7904   33C4 32            mov bl, [d]
7905   33C5 A7 00         mov bh, 0
7906   33C7             ; START TERMS
7907   33C7 D7            push a
7908   33C8 11            mov a, b
7909   33C9 26 41 00      mov b, $41
7910   33CC 60            sub a, b
7911   33CD 26 0A 00      mov b, $a
7912   33D0 54            add a, b
7913   33D1 27            mov b, a
7914   33D2 E4            pop a
7915   33D3             ; END TERMS
7916   33D3 54            add a, b
7917   33D4 27            mov b, a
7918   33D5 E4            pop a
7919   33D6             ; END TERMS
7920   33D6 E7            pop d
7921   33D7 FD 43         mov [d], b
7922   33D9 0A 03 34      jmp _if172_exit
7923   33DC             _if172_else:
7924   33DC             ;; value = (value * 16) + (hex_char - '0'); 
7925   33DC FA FF FF      lea d, [bp + -1] ; $value
7926   33DF DA            push d
7927   33E0 FA FF FF      lea d, [bp + -1] ; $value
7928   33E3 2A            mov b, [d]
7929   33E4             ; START FACTORS
7930   33E4 D7            push a
7931   33E5 11            mov a, b
7932   33E6 26 10 00      mov b, $10
7933   33E9 AC            mul a, b ; *
7934   33EA 11            mov a, b
7935   33EB 27            mov b, a
7936   33EC E4            pop a
7937   33ED             ; END FACTORS
7938   33ED             ; START TERMS
7939   33ED D7            push a
7940   33EE 11            mov a, b
7941   33EF FA FC FF      lea d, [bp + -4] ; $hex_char
7942   33F2 32            mov bl, [d]
7943   33F3 A7 00         mov bh, 0
7944   33F5             ; START TERMS
7945   33F5 D7            push a
7946   33F6 11            mov a, b
7947   33F7 26 30 00      mov b, $30
7948   33FA 60            sub a, b
7949   33FB 27            mov b, a
7950   33FC E4            pop a
7951   33FD             ; END TERMS
7952   33FD 54            add a, b
7953   33FE 27            mov b, a
7954   33FF E4            pop a
7955   3400             ; END TERMS
7956   3400 E7            pop d
7957   3401 FD 43         mov [d], b
7958   3403             _if172_exit:
7959   3403             _if171_exit:
7960   3403             _for170_update:
7961   3403 FA FD FF      lea d, [bp + -3] ; $i
7962   3406 2A            mov b, [d]
7963   3407 FD 79         mov g, b
7964   3409 FD 77         inc b
7965   340B FA FD FF      lea d, [bp + -3] ; $i
7966   340E FD 43         mov [d], b
7967   3410 FD 27         mov b, g
7968   3412 0A FF 32      jmp _for170_cond
7969   3415             _for170_exit:
7970   3415             ;; return value; 
7971   3415 FA FF FF      lea d, [bp + -1] ; $value
7972   3418 2A            mov b, [d]
7973   3419 F9            leave
7974   341A 09            ret
7975   341B             
7976   341B             atoi:
7977   341B F8 00 00      enter 0 ; (push bp; mov bp, sp)
7978   341E             ; $result 
7979   341E 10 00 00      mov a, $0
7980   3421 45 FF FF      mov [bp + -1], a
7981   3424             ; $sign 
7982   3424 10 01 00      mov a, $1
7983   3427 45 FD FF      mov [bp + -3], a
7984   342A 52 04 00      sub sp, 4
7985   342D             ;; while (*str == ' ') str++; 
7986   342D             _while173_cond:
7987   342D FA 05 00      lea d, [bp + 5] ; $str
7988   3430 2A            mov b, [d]
7989   3431 74            mov d, b
7990   3432 32            mov bl, [d]
7991   3433 A7 00         mov bh, 0
7992   3435             ; START RELATIONAL
7993   3435 D7            push a
7994   3436 11            mov a, b
7995   3437 26 20 00      mov b, $20
7996   343A B0            cmp a, b
7997   343B FD 71         seq ; ==
7998   343D E4            pop a
7999   343E             ; END RELATIONAL
8000   343E C0 00 00      cmp b, 0
8001   3441 C6 56 34      je _while173_exit
8002   3444             _while173_block:
8003   3444             ;; str++; 
8004   3444 FA 05 00      lea d, [bp + 5] ; $str
8005   3447 2A            mov b, [d]
8006   3448 FD 79         mov g, b
8007   344A FD 77         inc b
8008   344C FA 05 00      lea d, [bp + 5] ; $str
8009   344F FD 43         mov [d], b
8010   3451 FD 27         mov b, g
8011   3453 0A 2D 34      jmp _while173_cond
8012   3456             _while173_exit:
8013   3456             ;; if (*str == '-' || *str == '+') { 
8014   3456             _if174_cond:
8015   3456 FA 05 00      lea d, [bp + 5] ; $str
8016   3459 2A            mov b, [d]
8017   345A 74            mov d, b
8018   345B 32            mov bl, [d]
8019   345C A7 00         mov bh, 0
8020   345E             ; START RELATIONAL
8021   345E D7            push a
8022   345F 11            mov a, b
8023   3460 26 2D 00      mov b, $2d
8024   3463 B0            cmp a, b
8025   3464 FD 71         seq ; ==
8026   3466 E4            pop a
8027   3467             ; END RELATIONAL
8028   3467 D7            push a
8029   3468 11            mov a, b
8030   3469 FA 05 00      lea d, [bp + 5] ; $str
8031   346C 2A            mov b, [d]
8032   346D 74            mov d, b
8033   346E 32            mov bl, [d]
8034   346F A7 00         mov bh, 0
8035   3471             ; START RELATIONAL
8036   3471 D7            push a
8037   3472 11            mov a, b
8038   3473 26 2B 00      mov b, $2b
8039   3476 B0            cmp a, b
8040   3477 FD 71         seq ; ==
8041   3479 E4            pop a
8042   347A             ; END RELATIONAL
8043   347A FD A8         sor a, b ; ||
8044   347C E4            pop a
8045   347D C0 00 00      cmp b, 0
8046   3480 C6 BB 34      je _if174_exit
8047   3483             _if174_true:
8048   3483             ;; if (*str == '-') sign = -1; 
8049   3483             _if175_cond:
8050   3483 FA 05 00      lea d, [bp + 5] ; $str
8051   3486 2A            mov b, [d]
8052   3487 74            mov d, b
8053   3488 32            mov bl, [d]
8054   3489 A7 00         mov bh, 0
8055   348B             ; START RELATIONAL
8056   348B D7            push a
8057   348C 11            mov a, b
8058   348D 26 2D 00      mov b, $2d
8059   3490 B0            cmp a, b
8060   3491 FD 71         seq ; ==
8061   3493 E4            pop a
8062   3494             ; END RELATIONAL
8063   3494 C0 00 00      cmp b, 0
8064   3497 C6 A9 34      je _if175_exit
8065   349A             _if175_true:
8066   349A             ;; sign = -1; 
8067   349A FA FD FF      lea d, [bp + -3] ; $sign
8068   349D DA            push d
8069   349E 26 01 00      mov b, $1
8070   34A1 FD 97         neg b
8071   34A3 E7            pop d
8072   34A4 FD 43         mov [d], b
8073   34A6 0A A9 34      jmp _if175_exit
8074   34A9             _if175_exit:
8075   34A9             ;; str++; 
8076   34A9 FA 05 00      lea d, [bp + 5] ; $str
8077   34AC 2A            mov b, [d]
8078   34AD FD 79         mov g, b
8079   34AF FD 77         inc b
8080   34B1 FA 05 00      lea d, [bp + 5] ; $str
8081   34B4 FD 43         mov [d], b
8082   34B6 FD 27         mov b, g
8083   34B8 0A BB 34      jmp _if174_exit
8084   34BB             _if174_exit:
8085   34BB             ;; while (*str >= '0' && *str <= '9') { 
8086   34BB             _while176_cond:
8087   34BB FA 05 00      lea d, [bp + 5] ; $str
8088   34BE 2A            mov b, [d]
8089   34BF 74            mov d, b
8090   34C0 32            mov bl, [d]
8091   34C1 A7 00         mov bh, 0
8092   34C3             ; START RELATIONAL
8093   34C3 D7            push a
8094   34C4 11            mov a, b
8095   34C5 26 30 00      mov b, $30
8096   34C8 B0            cmp a, b
8097   34C9 FD 80         sge ; >=
8098   34CB E4            pop a
8099   34CC             ; END RELATIONAL
8100   34CC D7            push a
8101   34CD 11            mov a, b
8102   34CE FA 05 00      lea d, [bp + 5] ; $str
8103   34D1 2A            mov b, [d]
8104   34D2 74            mov d, b
8105   34D3 32            mov bl, [d]
8106   34D4 A7 00         mov bh, 0
8107   34D6             ; START RELATIONAL
8108   34D6 D7            push a
8109   34D7 11            mov a, b
8110   34D8 26 39 00      mov b, $39
8111   34DB B0            cmp a, b
8112   34DC FD 74         sle ; <=
8113   34DE E4            pop a
8114   34DF             ; END RELATIONAL
8115   34DF FD A7         sand a, b ; &&
8116   34E1 E4            pop a
8117   34E2 C0 00 00      cmp b, 0
8118   34E5 C6 23 35      je _while176_exit
8119   34E8             _while176_block:
8120   34E8             ;; result = result * 10 + (*str - '0'); 
8121   34E8 FA FF FF      lea d, [bp + -1] ; $result
8122   34EB DA            push d
8123   34EC FA FF FF      lea d, [bp + -1] ; $result
8124   34EF 2A            mov b, [d]
8125   34F0             ; START FACTORS
8126   34F0 D7            push a
8127   34F1 11            mov a, b
8128   34F2 26 0A 00      mov b, $a
8129   34F5 AC            mul a, b ; *
8130   34F6 11            mov a, b
8131   34F7 27            mov b, a
8132   34F8 E4            pop a
8133   34F9             ; END FACTORS
8134   34F9             ; START TERMS
8135   34F9 D7            push a
8136   34FA 11            mov a, b
8137   34FB FA 05 00      lea d, [bp + 5] ; $str
8138   34FE 2A            mov b, [d]
8139   34FF 74            mov d, b
8140   3500 32            mov bl, [d]
8141   3501 A7 00         mov bh, 0
8142   3503             ; START TERMS
8143   3503 D7            push a
8144   3504 11            mov a, b
8145   3505 26 30 00      mov b, $30
8146   3508 60            sub a, b
8147   3509 27            mov b, a
8148   350A E4            pop a
8149   350B             ; END TERMS
8150   350B 54            add a, b
8151   350C 27            mov b, a
8152   350D E4            pop a
8153   350E             ; END TERMS
8154   350E E7            pop d
8155   350F FD 43         mov [d], b
8156   3511             ;; str++; 
8157   3511 FA 05 00      lea d, [bp + 5] ; $str
8158   3514 2A            mov b, [d]
8159   3515 FD 79         mov g, b
8160   3517 FD 77         inc b
8161   3519 FA 05 00      lea d, [bp + 5] ; $str
8162   351C FD 43         mov [d], b
8163   351E FD 27         mov b, g
8164   3520 0A BB 34      jmp _while176_cond
8165   3523             _while176_exit:
8166   3523             ;; return sign * result; 
8167   3523 FA FD FF      lea d, [bp + -3] ; $sign
8168   3526 2A            mov b, [d]
8169   3527             ; START FACTORS
8170   3527 D7            push a
8171   3528 11            mov a, b
8172   3529 FA FF FF      lea d, [bp + -1] ; $result
8173   352C 2A            mov b, [d]
8174   352D AC            mul a, b ; *
8175   352E 11            mov a, b
8176   352F 27            mov b, a
8177   3530 E4            pop a
8178   3531             ; END FACTORS
8179   3531 F9            leave
8180   3532 09            ret
8181   3533             
8182   3533             printu:
8183   3533 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8184   3536             ; $digits 
8185   3536             ; $i 
8186   3536 52 07 00      sub sp, 7
8187   3539             ;; i = 0; 
8188   3539 FA FA FF      lea d, [bp + -6] ; $i
8189   353C DA            push d
8190   353D 26 00 00      mov b, $0
8191   3540 E7            pop d
8192   3541 FD 43         mov [d], b
8193   3543             ;; if(num == 0){ 
8194   3543             _if177_cond:
8195   3543 FA 05 00      lea d, [bp + 5] ; $num
8196   3546 2A            mov b, [d]
8197   3547             ; START RELATIONAL
8198   3547 D7            push a
8199   3548 11            mov a, b
8200   3549 26 00 00      mov b, $0
8201   354C B0            cmp a, b
8202   354D FD 71         seq ; ==
8203   354F E4            pop a
8204   3550             ; END RELATIONAL
8205   3550 C0 00 00      cmp b, 0
8206   3553 C6 65 35      je _if177_exit
8207   3556             _if177_true:
8208   3556             ;; putchar('0'); 
8209   3556 26 30 00      mov b, $30
8210   3559 DD            push bl
8211   355A 07 FF 35      call putchar
8212   355D 51 01 00      add sp, 1
8213   3560             ;; return; 
8214   3560 F9            leave
8215   3561 09            ret
8216   3562 0A 65 35      jmp _if177_exit
8217   3565             _if177_exit:
8218   3565             ;; while (num > 0) { 
8219   3565             _while178_cond:
8220   3565 FA 05 00      lea d, [bp + 5] ; $num
8221   3568 2A            mov b, [d]
8222   3569             ; START RELATIONAL
8223   3569 D7            push a
8224   356A 11            mov a, b
8225   356B 26 00 00      mov b, $0
8226   356E B0            cmp a, b
8227   356F FD 81         sgu ; > (unsigned)
8228   3571 E4            pop a
8229   3572             ; END RELATIONAL
8230   3572 C0 00 00      cmp b, 0
8231   3575 C6 C2 35      je _while178_exit
8232   3578             _while178_block:
8233   3578             ;; digits[i] = '0' + (num % 10); 
8234   3578 FA FC FF      lea d, [bp + -4] ; $digits
8235   357B D7            push a
8236   357C DA            push d
8237   357D FA FA FF      lea d, [bp + -6] ; $i
8238   3580 2A            mov b, [d]
8239   3581 E7            pop d
8240   3582 5A            add d, b
8241   3583 E4            pop a
8242   3584 DA            push d
8243   3585 26 30 00      mov b, $30
8244   3588             ; START TERMS
8245   3588 D7            push a
8246   3589 11            mov a, b
8247   358A FA 05 00      lea d, [bp + 5] ; $num
8248   358D 2A            mov b, [d]
8249   358E             ; START FACTORS
8250   358E D7            push a
8251   358F 11            mov a, b
8252   3590 26 0A 00      mov b, $a
8253   3593 AE            div a, b ; 
8254   3594 11            mov a, b
8255   3595 27            mov b, a
8256   3596 E4            pop a
8257   3597             ; END FACTORS
8258   3597 54            add a, b
8259   3598 27            mov b, a
8260   3599 E4            pop a
8261   359A             ; END TERMS
8262   359A E7            pop d
8263   359B FD 3E         mov [d], bl
8264   359D             ;; num = num / 10; 
8265   359D FA 05 00      lea d, [bp + 5] ; $num
8266   35A0 DA            push d
8267   35A1 FA 05 00      lea d, [bp + 5] ; $num
8268   35A4 2A            mov b, [d]
8269   35A5             ; START FACTORS
8270   35A5 D7            push a
8271   35A6 11            mov a, b
8272   35A7 26 0A 00      mov b, $a
8273   35AA AE            div a, b
8274   35AB 27            mov b, a
8275   35AC E4            pop a
8276   35AD             ; END FACTORS
8277   35AD E7            pop d
8278   35AE FD 43         mov [d], b
8279   35B0             ;; i++; 
8280   35B0 FA FA FF      lea d, [bp + -6] ; $i
8281   35B3 2A            mov b, [d]
8282   35B4 FD 79         mov g, b
8283   35B6 FD 77         inc b
8284   35B8 FA FA FF      lea d, [bp + -6] ; $i
8285   35BB FD 43         mov [d], b
8286   35BD FD 27         mov b, g
8287   35BF 0A 65 35      jmp _while178_cond
8288   35C2             _while178_exit:
8289   35C2             ;; while (i > 0) { 
8290   35C2             _while179_cond:
8291   35C2 FA FA FF      lea d, [bp + -6] ; $i
8292   35C5 2A            mov b, [d]
8293   35C6             ; START RELATIONAL
8294   35C6 D7            push a
8295   35C7 11            mov a, b
8296   35C8 26 00 00      mov b, $0
8297   35CB B0            cmp a, b
8298   35CC FD 7F         sgt ; >
8299   35CE E4            pop a
8300   35CF             ; END RELATIONAL
8301   35CF C0 00 00      cmp b, 0
8302   35D2 C6 FD 35      je _while179_exit
8303   35D5             _while179_block:
8304   35D5             ;; i--; 
8305   35D5 FA FA FF      lea d, [bp + -6] ; $i
8306   35D8 2A            mov b, [d]
8307   35D9 FD 79         mov g, b
8308   35DB FD 7D         dec b
8309   35DD FA FA FF      lea d, [bp + -6] ; $i
8310   35E0 FD 43         mov [d], b
8311   35E2 FD 27         mov b, g
8312   35E4             ;; putchar(digits[i]); 
8313   35E4 FA FC FF      lea d, [bp + -4] ; $digits
8314   35E7 D7            push a
8315   35E8 DA            push d
8316   35E9 FA FA FF      lea d, [bp + -6] ; $i
8317   35EC 2A            mov b, [d]
8318   35ED E7            pop d
8319   35EE 5A            add d, b
8320   35EF E4            pop a
8321   35F0 32            mov bl, [d]
8322   35F1 A7 00         mov bh, 0
8323   35F3 DD            push bl
8324   35F4 07 FF 35      call putchar
8325   35F7 51 01 00      add sp, 1
8326   35FA 0A C2 35      jmp _while179_cond
8327   35FD             _while179_exit:
8328   35FD F9            leave
8329   35FE 09            ret
8330   35FF             
8331   35FF             putchar:
8332   35FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
8333   3602             
8334   3602             ; --- BEGIN INLINE ASM BLOCK
8335   3602 FA 05 00      lea d, [bp + 5] ; $c
8336   3605 1E            mov al, [d]
8337   3606 23            mov ah, al
8338   3607 07 57 3A      call _putchar
8339   360A             ; --- END INLINE ASM BLOCK
8340   360A             
8341   360A F9            leave
8342   360B 09            ret
8343   360C             
8344   360C             print:
8345   360C F8 00 00      enter 0 ; (push bp; mov bp, sp)
8346   360F             
8347   360F             ; --- BEGIN INLINE ASM BLOCK
8348   360F FA 05 00      lea d, [bp + 5] ; $s
8349   3612 15            mov a, [d]
8350   3613 3C            mov d, a
8351   3614 07 A1 3B      call _puts
8352   3617             ; --- END INLINE ASM BLOCK
8353   3617             
8354   3617 F9            leave
8355   3618 09            ret
8356   3619             
8357   3619             loadfile:
8358   3619 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8359   361C             
8360   361C             ; --- BEGIN INLINE ASM BLOCK
8361   361C FA 05 00      lea d, [bp + 5] ; $destination
8362   361F 15            mov a, [d]
8363   3620 4F            mov di, a
8364   3621 FA 07 00      lea d, [bp + 7] ; $filename
8365   3624 FD 2A         mov d, [d]
8366   3626 19 14         mov al, 20
8367   3628 05 04         syscall sys_filesystem
8368   362A             ; --- END INLINE ASM BLOCK
8369   362A             
8370   362A F9            leave
8371   362B 09            ret
8372   362C             
8373   362C             alloc:
8374   362C F8 00 00      enter 0 ; (push bp; mov bp, sp)
8375   362F             ;; heap_top = heap_top + bytes; 
8376   362F 3B 37 43      mov d, _heap_top ; $heap_top
8377   3632 DA            push d
8378   3633 3B 37 43      mov d, _heap_top ; $heap_top
8379   3636 2A            mov b, [d]
8380   3637             ; START TERMS
8381   3637 D7            push a
8382   3638 11            mov a, b
8383   3639 FA 05 00      lea d, [bp + 5] ; $bytes
8384   363C 2A            mov b, [d]
8385   363D 54            add a, b
8386   363E 27            mov b, a
8387   363F E4            pop a
8388   3640             ; END TERMS
8389   3640 E7            pop d
8390   3641 FD 43         mov [d], b
8391   3643             ;; return heap_top - bytes; 
8392   3643 3B 37 43      mov d, _heap_top ; $heap_top
8393   3646 2A            mov b, [d]
8394   3647             ; START TERMS
8395   3647 D7            push a
8396   3648 11            mov a, b
8397   3649 FA 05 00      lea d, [bp + 5] ; $bytes
8398   364C 2A            mov b, [d]
8399   364D 60            sub a, b
8400   364E 27            mov b, a
8401   364F E4            pop a
8402   3650             ; END TERMS
8403   3650 F9            leave
8404   3651 09            ret
8405   3652             
8406   3652             free:
8407   3652 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8408   3655             ;; return heap_top = heap_top - bytes; 
8409   3655 3B 37 43      mov d, _heap_top ; $heap_top
8410   3658 DA            push d
8411   3659 3B 37 43      mov d, _heap_top ; $heap_top
8412   365C 2A            mov b, [d]
8413   365D             ; START TERMS
8414   365D D7            push a
8415   365E 11            mov a, b
8416   365F FA 05 00      lea d, [bp + 5] ; $bytes
8417   3662 2A            mov b, [d]
8418   3663 60            sub a, b
8419   3664 27            mov b, a
8420   3665 E4            pop a
8421   3666             ; END TERMS
8422   3666 E7            pop d
8423   3667 FD 43         mov [d], b
8424   3669 F9            leave
8425   366A 09            ret
8426   366B             
8427   366B             exit:
8428   366B F8 00 00      enter 0 ; (push bp; mov bp, sp)
8429   366E             
8430   366E             ; --- BEGIN INLINE ASM BLOCK
8431   366E 05 0B         syscall sys_terminate_proc
8432   3670             ; --- END INLINE ASM BLOCK
8433   3670             
8434   3670 F9            leave
8435   3671 09            ret
8436   3672             
8437   3672             exp:
8438   3672 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8439   3675             ; $i 
8440   3675             ; $result 
8441   3675 10 01 00      mov a, $1
8442   3678 45 FD FF      mov [bp + -3], a
8443   367B 52 04 00      sub sp, 4
8444   367E             ;; for(i = 0; i < exp; i++){ 
8445   367E             _for180_init:
8446   367E FA FF FF      lea d, [bp + -1] ; $i
8447   3681 DA            push d
8448   3682 26 00 00      mov b, $0
8449   3685 E7            pop d
8450   3686 FD 43         mov [d], b
8451   3688             _for180_cond:
8452   3688 FA FF FF      lea d, [bp + -1] ; $i
8453   368B 2A            mov b, [d]
8454   368C             ; START RELATIONAL
8455   368C D7            push a
8456   368D 11            mov a, b
8457   368E FA 05 00      lea d, [bp + 5] ; $exp
8458   3691 2A            mov b, [d]
8459   3692 B0            cmp a, b
8460   3693 FD 73         slt ; < 
8461   3695 E4            pop a
8462   3696             ; END RELATIONAL
8463   3696 C0 00 00      cmp b, 0
8464   3699 C6 C3 36      je _for180_exit
8465   369C             _for180_block:
8466   369C             ;; result = result * base; 
8467   369C FA FD FF      lea d, [bp + -3] ; $result
8468   369F DA            push d
8469   36A0 FA FD FF      lea d, [bp + -3] ; $result
8470   36A3 2A            mov b, [d]
8471   36A4             ; START FACTORS
8472   36A4 D7            push a
8473   36A5 11            mov a, b
8474   36A6 FA 07 00      lea d, [bp + 7] ; $base
8475   36A9 2A            mov b, [d]
8476   36AA AC            mul a, b ; *
8477   36AB 11            mov a, b
8478   36AC 27            mov b, a
8479   36AD E4            pop a
8480   36AE             ; END FACTORS
8481   36AE E7            pop d
8482   36AF FD 43         mov [d], b
8483   36B1             _for180_update:
8484   36B1 FA FF FF      lea d, [bp + -1] ; $i
8485   36B4 2A            mov b, [d]
8486   36B5 FD 79         mov g, b
8487   36B7 FD 77         inc b
8488   36B9 FA FF FF      lea d, [bp + -1] ; $i
8489   36BC FD 43         mov [d], b
8490   36BE FD 27         mov b, g
8491   36C0 0A 88 36      jmp _for180_cond
8492   36C3             _for180_exit:
8493   36C3             ;; return result; 
8494   36C3 FA FD FF      lea d, [bp + -3] ; $result
8495   36C6 2A            mov b, [d]
8496   36C7 F9            leave
8497   36C8 09            ret
8498   36C9             
8499   36C9             strcpy:
8500   36C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8501   36CC             ; $psrc 
8502   36CC             ; $pdest 
8503   36CC 52 04 00      sub sp, 4
8504   36CF             ;; psrc = src; 
8505   36CF FA FF FF      lea d, [bp + -1] ; $psrc
8506   36D2 DA            push d
8507   36D3 FA 05 00      lea d, [bp + 5] ; $src
8508   36D6 2A            mov b, [d]
8509   36D7 E7            pop d
8510   36D8 FD 43         mov [d], b
8511   36DA             ;; pdest = dest; 
8512   36DA FA FD FF      lea d, [bp + -3] ; $pdest
8513   36DD DA            push d
8514   36DE FA 07 00      lea d, [bp + 7] ; $dest
8515   36E1 2A            mov b, [d]
8516   36E2 E7            pop d
8517   36E3 FD 43         mov [d], b
8518   36E5             ;; while(*psrc){ 
8519   36E5             _while181_cond:
8520   36E5 FA FF FF      lea d, [bp + -1] ; $psrc
8521   36E8 2A            mov b, [d]
8522   36E9 74            mov d, b
8523   36EA 32            mov bl, [d]
8524   36EB A7 00         mov bh, 0
8525   36ED C0 00 00      cmp b, 0
8526   36F0 C6 24 37      je _while181_exit
8527   36F3             _while181_block:
8528   36F3             ;; *pdest = *psrc; 
8529   36F3 FA FD FF      lea d, [bp + -3] ; $pdest
8530   36F6 2A            mov b, [d]
8531   36F7 D8            push b
8532   36F8 FA FF FF      lea d, [bp + -1] ; $psrc
8533   36FB 2A            mov b, [d]
8534   36FC 74            mov d, b
8535   36FD 32            mov bl, [d]
8536   36FE A7 00         mov bh, 0
8537   3700 E7            pop d
8538   3701 FD 3E         mov [d], bl
8539   3703             ;; pdest++; 
8540   3703 FA FD FF      lea d, [bp + -3] ; $pdest
8541   3706 2A            mov b, [d]
8542   3707 FD 79         mov g, b
8543   3709 FD 77         inc b
8544   370B FA FD FF      lea d, [bp + -3] ; $pdest
8545   370E FD 43         mov [d], b
8546   3710 FD 27         mov b, g
8547   3712             ;; psrc++; 
8548   3712 FA FF FF      lea d, [bp + -1] ; $psrc
8549   3715 2A            mov b, [d]
8550   3716 FD 79         mov g, b
8551   3718 FD 77         inc b
8552   371A FA FF FF      lea d, [bp + -1] ; $psrc
8553   371D FD 43         mov [d], b
8554   371F FD 27         mov b, g
8555   3721 0A E5 36      jmp _while181_cond
8556   3724             _while181_exit:
8557   3724             ;; *pdest = '\0'; 
8558   3724 FA FD FF      lea d, [bp + -3] ; $pdest
8559   3727 2A            mov b, [d]
8560   3728 D8            push b
8561   3729 26 00 00      mov b, $0
8562   372C E7            pop d
8563   372D FD 3E         mov [d], bl
8564   372F F9            leave
8565   3730 09            ret
8566   3731             
8567   3731             strcmp:
8568   3731 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8569   3734             ;; while (*s1 && (*s1 == *s2)) { 
8570   3734             _while182_cond:
8571   3734 FA 07 00      lea d, [bp + 7] ; $s1
8572   3737 2A            mov b, [d]
8573   3738 74            mov d, b
8574   3739 32            mov bl, [d]
8575   373A A7 00         mov bh, 0
8576   373C D7            push a
8577   373D 11            mov a, b
8578   373E FA 07 00      lea d, [bp + 7] ; $s1
8579   3741 2A            mov b, [d]
8580   3742 74            mov d, b
8581   3743 32            mov bl, [d]
8582   3744 A7 00         mov bh, 0
8583   3746             ; START RELATIONAL
8584   3746 D7            push a
8585   3747 11            mov a, b
8586   3748 FA 05 00      lea d, [bp + 5] ; $s2
8587   374B 2A            mov b, [d]
8588   374C 74            mov d, b
8589   374D 32            mov bl, [d]
8590   374E A7 00         mov bh, 0
8591   3750 B0            cmp a, b
8592   3751 FD 71         seq ; ==
8593   3753 E4            pop a
8594   3754             ; END RELATIONAL
8595   3754 FD A7         sand a, b ; &&
8596   3756 E4            pop a
8597   3757 C0 00 00      cmp b, 0
8598   375A C6 7E 37      je _while182_exit
8599   375D             _while182_block:
8600   375D             ;; s1++; 
8601   375D FA 07 00      lea d, [bp + 7] ; $s1
8602   3760 2A            mov b, [d]
8603   3761 FD 79         mov g, b
8604   3763 FD 77         inc b
8605   3765 FA 07 00      lea d, [bp + 7] ; $s1
8606   3768 FD 43         mov [d], b
8607   376A FD 27         mov b, g
8608   376C             ;; s2++; 
8609   376C FA 05 00      lea d, [bp + 5] ; $s2
8610   376F 2A            mov b, [d]
8611   3770 FD 79         mov g, b
8612   3772 FD 77         inc b
8613   3774 FA 05 00      lea d, [bp + 5] ; $s2
8614   3777 FD 43         mov [d], b
8615   3779 FD 27         mov b, g
8616   377B 0A 34 37      jmp _while182_cond
8617   377E             _while182_exit:
8618   377E             ;; return *s1 - *s2; 
8619   377E FA 07 00      lea d, [bp + 7] ; $s1
8620   3781 2A            mov b, [d]
8621   3782 74            mov d, b
8622   3783 32            mov bl, [d]
8623   3784 A7 00         mov bh, 0
8624   3786             ; START TERMS
8625   3786 D7            push a
8626   3787 11            mov a, b
8627   3788 FA 05 00      lea d, [bp + 5] ; $s2
8628   378B 2A            mov b, [d]
8629   378C 74            mov d, b
8630   378D 32            mov bl, [d]
8631   378E A7 00         mov bh, 0
8632   3790 60            sub a, b
8633   3791 27            mov b, a
8634   3792 E4            pop a
8635   3793             ; END TERMS
8636   3793 F9            leave
8637   3794 09            ret
8638   3795             
8639   3795             strcat:
8640   3795 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8641   3798             ; $dest_len 
8642   3798             ; $i 
8643   3798 52 04 00      sub sp, 4
8644   379B             ;; dest_len = strlen(dest); 
8645   379B FA FF FF      lea d, [bp + -1] ; $dest_len
8646   379E DA            push d
8647   379F FA 07 00      lea d, [bp + 7] ; $dest
8648   37A2 2A            mov b, [d]
8649   37A3 FD AB         swp b
8650   37A5 D8            push b
8651   37A6 07 4B 38      call strlen
8652   37A9 51 02 00      add sp, 2
8653   37AC E7            pop d
8654   37AD FD 43         mov [d], b
8655   37AF             ;; for (i = 0; src[i] != 0; i=i+1) { 
8656   37AF             _for183_init:
8657   37AF FA FD FF      lea d, [bp + -3] ; $i
8658   37B2 DA            push d
8659   37B3 26 00 00      mov b, $0
8660   37B6 E7            pop d
8661   37B7 FD 43         mov [d], b
8662   37B9             _for183_cond:
8663   37B9 FA 05 00      lea d, [bp + 5] ; $src
8664   37BC FD 2A         mov d, [d]
8665   37BE D7            push a
8666   37BF DA            push d
8667   37C0 FA FD FF      lea d, [bp + -3] ; $i
8668   37C3 2A            mov b, [d]
8669   37C4 E7            pop d
8670   37C5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8671   37C9 E4            pop a
8672   37CA 32            mov bl, [d]
8673   37CB A7 00         mov bh, 0
8674   37CD             ; START RELATIONAL
8675   37CD D7            push a
8676   37CE 11            mov a, b
8677   37CF 26 00 00      mov b, $0
8678   37D2 B0            cmp a, b
8679   37D3 FD 72         sneq ; !=
8680   37D5 E4            pop a
8681   37D6             ; END RELATIONAL
8682   37D6 C0 00 00      cmp b, 0
8683   37D9 C6 24 38      je _for183_exit
8684   37DC             _for183_block:
8685   37DC             ;; dest[dest_len + i] = src[i]; 
8686   37DC FA 07 00      lea d, [bp + 7] ; $dest
8687   37DF FD 2A         mov d, [d]
8688   37E1 D7            push a
8689   37E2 DA            push d
8690   37E3 FA FF FF      lea d, [bp + -1] ; $dest_len
8691   37E6 2A            mov b, [d]
8692   37E7             ; START TERMS
8693   37E7 D7            push a
8694   37E8 11            mov a, b
8695   37E9 FA FD FF      lea d, [bp + -3] ; $i
8696   37EC 2A            mov b, [d]
8697   37ED 54            add a, b
8698   37EE 27            mov b, a
8699   37EF E4            pop a
8700   37F0             ; END TERMS
8701   37F0 E7            pop d
8702   37F1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8703   37F5 E4            pop a
8704   37F6 DA            push d
8705   37F7 FA 05 00      lea d, [bp + 5] ; $src
8706   37FA FD 2A         mov d, [d]
8707   37FC D7            push a
8708   37FD DA            push d
8709   37FE FA FD FF      lea d, [bp + -3] ; $i
8710   3801 2A            mov b, [d]
8711   3802 E7            pop d
8712   3803 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8713   3807 E4            pop a
8714   3808 32            mov bl, [d]
8715   3809 A7 00         mov bh, 0
8716   380B E7            pop d
8717   380C FD 3E         mov [d], bl
8718   380E             _for183_update:
8719   380E FA FD FF      lea d, [bp + -3] ; $i
8720   3811 DA            push d
8721   3812 FA FD FF      lea d, [bp + -3] ; $i
8722   3815 2A            mov b, [d]
8723   3816             ; START TERMS
8724   3816 D7            push a
8725   3817 11            mov a, b
8726   3818 26 01 00      mov b, $1
8727   381B 54            add a, b
8728   381C 27            mov b, a
8729   381D E4            pop a
8730   381E             ; END TERMS
8731   381E E7            pop d
8732   381F FD 43         mov [d], b
8733   3821 0A B9 37      jmp _for183_cond
8734   3824             _for183_exit:
8735   3824             ;; dest[dest_len + i] = 0; 
8736   3824 FA 07 00      lea d, [bp + 7] ; $dest
8737   3827 FD 2A         mov d, [d]
8738   3829 D7            push a
8739   382A DA            push d
8740   382B FA FF FF      lea d, [bp + -1] ; $dest_len
8741   382E 2A            mov b, [d]
8742   382F             ; START TERMS
8743   382F D7            push a
8744   3830 11            mov a, b
8745   3831 FA FD FF      lea d, [bp + -3] ; $i
8746   3834 2A            mov b, [d]
8747   3835 54            add a, b
8748   3836 27            mov b, a
8749   3837 E4            pop a
8750   3838             ; END TERMS
8751   3838 E7            pop d
8752   3839 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8753   383D E4            pop a
8754   383E DA            push d
8755   383F 26 00 00      mov b, $0
8756   3842 E7            pop d
8757   3843 FD 3E         mov [d], bl
8758   3845             ;; return dest; 
8759   3845 FA 07 00      lea d, [bp + 7] ; $dest
8760   3848 2A            mov b, [d]
8761   3849 F9            leave
8762   384A 09            ret
8763   384B             
8764   384B             strlen:
8765   384B F8 00 00      enter 0 ; (push bp; mov bp, sp)
8766   384E             ; $length 
8767   384E 52 02 00      sub sp, 2
8768   3851             ;; length = 0; 
8769   3851 FA FF FF      lea d, [bp + -1] ; $length
8770   3854 DA            push d
8771   3855 26 00 00      mov b, $0
8772   3858 E7            pop d
8773   3859 FD 43         mov [d], b
8774   385B             ;; while (str[length] != 0) { 
8775   385B             _while184_cond:
8776   385B FA 05 00      lea d, [bp + 5] ; $str
8777   385E FD 2A         mov d, [d]
8778   3860 D7            push a
8779   3861 DA            push d
8780   3862 FA FF FF      lea d, [bp + -1] ; $length
8781   3865 2A            mov b, [d]
8782   3866 E7            pop d
8783   3867 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
8784   386B E4            pop a
8785   386C 32            mov bl, [d]
8786   386D A7 00         mov bh, 0
8787   386F             ; START RELATIONAL
8788   386F D7            push a
8789   3870 11            mov a, b
8790   3871 26 00 00      mov b, $0
8791   3874 B0            cmp a, b
8792   3875 FD 72         sneq ; !=
8793   3877 E4            pop a
8794   3878             ; END RELATIONAL
8795   3878 C0 00 00      cmp b, 0
8796   387B C6 90 38      je _while184_exit
8797   387E             _while184_block:
8798   387E             ;; length++; 
8799   387E FA FF FF      lea d, [bp + -1] ; $length
8800   3881 2A            mov b, [d]
8801   3882 FD 79         mov g, b
8802   3884 FD 77         inc b
8803   3886 FA FF FF      lea d, [bp + -1] ; $length
8804   3889 FD 43         mov [d], b
8805   388B FD 27         mov b, g
8806   388D 0A 5B 38      jmp _while184_cond
8807   3890             _while184_exit:
8808   3890             ;; return length; 
8809   3890 FA FF FF      lea d, [bp + -1] ; $length
8810   3893 2A            mov b, [d]
8811   3894 F9            leave
8812   3895 09            ret
8813   3896             
8814   3896             is_space:
8815   3896 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8816   3899             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
8817   3899 FA 05 00      lea d, [bp + 5] ; $c
8818   389C 32            mov bl, [d]
8819   389D A7 00         mov bh, 0
8820   389F             ; START RELATIONAL
8821   389F D7            push a
8822   38A0 11            mov a, b
8823   38A1 26 20 00      mov b, $20
8824   38A4 B0            cmp a, b
8825   38A5 FD 71         seq ; ==
8826   38A7 E4            pop a
8827   38A8             ; END RELATIONAL
8828   38A8 D7            push a
8829   38A9 11            mov a, b
8830   38AA FA 05 00      lea d, [bp + 5] ; $c
8831   38AD 32            mov bl, [d]
8832   38AE A7 00         mov bh, 0
8833   38B0             ; START RELATIONAL
8834   38B0 D7            push a
8835   38B1 11            mov a, b
8836   38B2 26 09 00      mov b, $9
8837   38B5 B0            cmp a, b
8838   38B6 FD 71         seq ; ==
8839   38B8 E4            pop a
8840   38B9             ; END RELATIONAL
8841   38B9 FD A8         sor a, b ; ||
8842   38BB 11            mov a, b
8843   38BC FA 05 00      lea d, [bp + 5] ; $c
8844   38BF 32            mov bl, [d]
8845   38C0 A7 00         mov bh, 0
8846   38C2             ; START RELATIONAL
8847   38C2 D7            push a
8848   38C3 11            mov a, b
8849   38C4 26 0A 00      mov b, $a
8850   38C7 B0            cmp a, b
8851   38C8 FD 71         seq ; ==
8852   38CA E4            pop a
8853   38CB             ; END RELATIONAL
8854   38CB FD A8         sor a, b ; ||
8855   38CD 11            mov a, b
8856   38CE FA 05 00      lea d, [bp + 5] ; $c
8857   38D1 32            mov bl, [d]
8858   38D2 A7 00         mov bh, 0
8859   38D4             ; START RELATIONAL
8860   38D4 D7            push a
8861   38D5 11            mov a, b
8862   38D6 26 0D 00      mov b, $d
8863   38D9 B0            cmp a, b
8864   38DA FD 71         seq ; ==
8865   38DC E4            pop a
8866   38DD             ; END RELATIONAL
8867   38DD FD A8         sor a, b ; ||
8868   38DF E4            pop a
8869   38E0 F9            leave
8870   38E1 09            ret
8871   38E2             
8872   38E2             is_digit:
8873   38E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8874   38E5             ;; return c >= '0' && c <= '9'; 
8875   38E5 FA 05 00      lea d, [bp + 5] ; $c
8876   38E8 32            mov bl, [d]
8877   38E9 A7 00         mov bh, 0
8878   38EB             ; START RELATIONAL
8879   38EB D7            push a
8880   38EC 11            mov a, b
8881   38ED 26 30 00      mov b, $30
8882   38F0 B0            cmp a, b
8883   38F1 FD 80         sge ; >=
8884   38F3 E4            pop a
8885   38F4             ; END RELATIONAL
8886   38F4 D7            push a
8887   38F5 11            mov a, b
8888   38F6 FA 05 00      lea d, [bp + 5] ; $c
8889   38F9 32            mov bl, [d]
8890   38FA A7 00         mov bh, 0
8891   38FC             ; START RELATIONAL
8892   38FC D7            push a
8893   38FD 11            mov a, b
8894   38FE 26 39 00      mov b, $39
8895   3901 B0            cmp a, b
8896   3902 FD 74         sle ; <=
8897   3904 E4            pop a
8898   3905             ; END RELATIONAL
8899   3905 FD A7         sand a, b ; &&
8900   3907 E4            pop a
8901   3908 F9            leave
8902   3909 09            ret
8903   390A             
8904   390A             is_alpha:
8905   390A F8 00 00      enter 0 ; (push bp; mov bp, sp)
8906   390D             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
8907   390D FA 05 00      lea d, [bp + 5] ; $c
8908   3910 32            mov bl, [d]
8909   3911 A7 00         mov bh, 0
8910   3913             ; START RELATIONAL
8911   3913 D7            push a
8912   3914 11            mov a, b
8913   3915 26 61 00      mov b, $61
8914   3918 B0            cmp a, b
8915   3919 FD 80         sge ; >=
8916   391B E4            pop a
8917   391C             ; END RELATIONAL
8918   391C D7            push a
8919   391D 11            mov a, b
8920   391E FA 05 00      lea d, [bp + 5] ; $c
8921   3921 32            mov bl, [d]
8922   3922 A7 00         mov bh, 0
8923   3924             ; START RELATIONAL
8924   3924 D7            push a
8925   3925 11            mov a, b
8926   3926 26 7A 00      mov b, $7a
8927   3929 B0            cmp a, b
8928   392A FD 74         sle ; <=
8929   392C E4            pop a
8930   392D             ; END RELATIONAL
8931   392D FD A7         sand a, b ; &&
8932   392F E4            pop a
8933   3930 D7            push a
8934   3931 11            mov a, b
8935   3932 FA 05 00      lea d, [bp + 5] ; $c
8936   3935 32            mov bl, [d]
8937   3936 A7 00         mov bh, 0
8938   3938             ; START RELATIONAL
8939   3938 D7            push a
8940   3939 11            mov a, b
8941   393A 26 41 00      mov b, $41
8942   393D B0            cmp a, b
8943   393E FD 80         sge ; >=
8944   3940 E4            pop a
8945   3941             ; END RELATIONAL
8946   3941 D7            push a
8947   3942 11            mov a, b
8948   3943 FA 05 00      lea d, [bp + 5] ; $c
8949   3946 32            mov bl, [d]
8950   3947 A7 00         mov bh, 0
8951   3949             ; START RELATIONAL
8952   3949 D7            push a
8953   394A 11            mov a, b
8954   394B 26 5A 00      mov b, $5a
8955   394E B0            cmp a, b
8956   394F FD 74         sle ; <=
8957   3951 E4            pop a
8958   3952             ; END RELATIONAL
8959   3952 FD A7         sand a, b ; &&
8960   3954 E4            pop a
8961   3955 FD A8         sor a, b ; ||
8962   3957 11            mov a, b
8963   3958 FA 05 00      lea d, [bp + 5] ; $c
8964   395B 32            mov bl, [d]
8965   395C A7 00         mov bh, 0
8966   395E             ; START RELATIONAL
8967   395E D7            push a
8968   395F 11            mov a, b
8969   3960 26 5F 00      mov b, $5f
8970   3963 B0            cmp a, b
8971   3964 FD 71         seq ; ==
8972   3966 E4            pop a
8973   3967             ; END RELATIONAL
8974   3967 FD A8         sor a, b ; ||
8975   3969 E4            pop a
8976   396A F9            leave
8977   396B 09            ret
8978   396C             
8979   396C             include_stdio_asm:
8980   396C F8 00 00      enter 0 ; (push bp; mov bp, sp)
8981   396F             
8982   396F             ; --- BEGIN INLINE ASM BLOCK
8983   396F             .include "lib/stdio.asm"
0001+  396F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  396F             ; stdio.s
0003+  396F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  396F             .include "lib/string.asm"
0001++ 396F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 396F             ; string.s
0003++ 396F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 396F             
0005++ 396F             
0006++ 396F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 396F             ; _strrev
0008++ 396F             ; reverse a string
0009++ 396F             ; D = string address
0010++ 396F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 396F             ; 01234
0012++ 396F             _strrev:
0013++ 396F 4B          	pusha
0014++ 3970 07 B6 39    	call _strlen	; length in C
0015++ 3973 12          	mov a, c
0016++ 3974 AF 01 00    	cmp a, 1
0017++ 3977 D0 91 39    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 397A 7D          	dec a
0019++ 397B FD 4E       	mov si, d	; beginning of string
0020++ 397D FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 397F 59          	add d, a	; end of string
0022++ 3980 12          	mov a, c
0023++ 3981 FD 9B       	shr a		; divide by 2
0024++ 3983 39          	mov c, a	; C now counts the steps
0025++ 3984             _strrev_L0:
0026++ 3984 32          	mov bl, [d]	; save load right-side char into BL
0027++ 3985 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 3986 3E          	mov [d], al	; store left char into right side
0029++ 3987 1B          	mov al, bl
0030++ 3988 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 3989 7E          	dec c
0032++ 398A 7F          	dec d
0033++ 398B C2 00 00    	cmp c, 0
0034++ 398E C7 84 39    	jne _strrev_L0
0035++ 3991             _strrev_end:
0036++ 3991 4C          	popa
0037++ 3992 09          	ret
0038++ 3993             	
0039++ 3993             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 3993             ; _strchr
0041++ 3993             ; search string in D for char in AL
0042++ 3993             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 3993             _strchr:
0044++ 3993             _strchr_L0:
0045++ 3993 32          	mov bl, [d]
0046++ 3994 C1 00       	cmp bl, 0
0047++ 3996 C6 A1 39    	je _strchr_end
0048++ 3999 BA          	cmp al, bl
0049++ 399A C6 A1 39    	je _strchr_end
0050++ 399D 79          	inc d
0051++ 399E 0A 93 39    	jmp _strchr_L0
0052++ 39A1             _strchr_end:
0053++ 39A1 1B          	mov al, bl
0054++ 39A2 09          	ret
0055++ 39A3             
0056++ 39A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 39A3             ; _strstr
0058++ 39A3             ; find sub-string
0059++ 39A3             ; str1 in SI
0060++ 39A3             ; str2 in DI
0061++ 39A3             ; SI points to end of source string
0062++ 39A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 39A3             _strstr:
0064++ 39A3 DB          	push al
0065++ 39A4 DA          	push d
0066++ 39A5 E3          	push di
0067++ 39A6             _strstr_loop:
0068++ 39A6 F3          	cmpsb					; compare a byte of the strings
0069++ 39A7 C7 B2 39    	jne _strstr_ret
0070++ 39AA FC 00 00    	lea d, [di + 0]
0071++ 39AD BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 39AF C7 A6 39    	jne _strstr_loop				; equal chars but not at end
0073++ 39B2             _strstr_ret:
0074++ 39B2 F0          	pop di
0075++ 39B3 E7          	pop d
0076++ 39B4 E8          	pop al
0077++ 39B5 09          	ret
0078++ 39B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 39B6             ; length of null terminated string
0080++ 39B6             ; result in C
0081++ 39B6             ; pointer in D
0082++ 39B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 39B6             _strlen:
0084++ 39B6 DA          	push d
0085++ 39B7 38 00 00    	mov c, 0
0086++ 39BA             _strlen_L1:
0087++ 39BA BD 00       	cmp byte [d], 0
0088++ 39BC C6 C4 39    	je _strlen_ret
0089++ 39BF 79          	inc d
0090++ 39C0 78          	inc c
0091++ 39C1 0A BA 39    	jmp _strlen_L1
0092++ 39C4             _strlen_ret:
0093++ 39C4 E7          	pop d
0094++ 39C5 09          	ret
0095++ 39C6             
0096++ 39C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 39C6             ; STRCMP
0098++ 39C6             ; compare two strings
0099++ 39C6             ; str1 in SI
0100++ 39C6             ; str2 in DI
0101++ 39C6             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 39C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 39C6             _strcmp:
0104++ 39C6 DB          	push al
0105++ 39C7 DA          	push d
0106++ 39C8 E3          	push di
0107++ 39C9 E2          	push si
0108++ 39CA             _strcmp_loop:
0109++ 39CA F3          	cmpsb					; compare a byte of the strings
0110++ 39CB C7 D6 39    	jne _strcmp_ret
0111++ 39CE FB FF FF    	lea d, [si +- 1]
0112++ 39D1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 39D3 C7 CA 39    	jne _strcmp_loop				; equal chars but not at end
0114++ 39D6             _strcmp_ret:
0115++ 39D6 EF          	pop si
0116++ 39D7 F0          	pop di
0117++ 39D8 E7          	pop d
0118++ 39D9 E8          	pop al
0119++ 39DA 09          	ret
0120++ 39DB             
0121++ 39DB             
0122++ 39DB             ; STRCPY
0123++ 39DB             ; copy null terminated string from SI to DI
0124++ 39DB             ; source in SI
0125++ 39DB             ; destination in DI
0126++ 39DB             _strcpy:
0127++ 39DB E2          	push si
0128++ 39DC E3          	push di
0129++ 39DD DB          	push al
0130++ 39DE             _strcpy_L1:
0131++ 39DE F6          	lodsb
0132++ 39DF F7          	stosb
0133++ 39E0 B9 00       	cmp al, 0
0134++ 39E2 C7 DE 39    	jne _strcpy_L1
0135++ 39E5             _strcpy_end:
0136++ 39E5 E8          	pop al
0137++ 39E6 F0          	pop di
0138++ 39E7 EF          	pop si
0139++ 39E8 09          	ret
0140++ 39E9             
0141++ 39E9             ; STRCAT
0142++ 39E9             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 39E9             ; source in SI
0144++ 39E9             ; destination in DI
0145++ 39E9             _strcat:
0146++ 39E9 E2          	push si
0147++ 39EA E3          	push di
0148++ 39EB D7          	push a
0149++ 39EC DA          	push d
0150++ 39ED 50          	mov a, di
0151++ 39EE 3C          	mov d, a
0152++ 39EF             _strcat_goto_end_L1:
0153++ 39EF BD 00       	cmp byte[d], 0
0154++ 39F1 C6 F8 39    	je _strcat_start
0155++ 39F4 79          	inc d
0156++ 39F5 0A EF 39    	jmp _strcat_goto_end_L1
0157++ 39F8             _strcat_start:
0158++ 39F8 FD 50       	mov di, d
0159++ 39FA             _strcat_L1:
0160++ 39FA F6          	lodsb
0161++ 39FB F7          	stosb
0162++ 39FC B9 00       	cmp al, 0
0163++ 39FE C7 FA 39    	jne _strcat_L1
0164++ 3A01             _strcat_end:
0165++ 3A01 E7          	pop d
0166++ 3A02 E4          	pop a
0167++ 3A03 F0          	pop di
0168++ 3A04 EF          	pop si
0169++ 3A05 09          	ret
0170++ 3A06             
0171++ 3A06             
0005+  3A06             
0006+  3A06             
0007+  3A06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  3A06             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  3A06             ; ASCII in BL
0010+  3A06             ; result in AL
0011+  3A06             ; ascii for F = 0100 0110
0012+  3A06             ; ascii for 9 = 0011 1001
0013+  3A06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  3A06             hex_ascii_encode:
0015+  3A06 1B            mov al, bl
0016+  3A07 93 40         test al, $40        ; test if letter or number
0017+  3A09 C7 0F 3A      jnz hex_letter
0018+  3A0C 87 0F         and al, $0F        ; get number
0019+  3A0E 09            ret
0020+  3A0F             hex_letter:
0021+  3A0F 87 0F         and al, $0F        ; get letter
0022+  3A11 6A 09         add al, 9
0023+  3A13 09            ret
0024+  3A14             
0025+  3A14             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  3A14             ; ATOI
0027+  3A14             ; 2 letter hex string in B
0028+  3A14             ; 8bit integer returned in AL
0029+  3A14             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  3A14             _atoi:
0031+  3A14 D8            push b
0032+  3A15 07 06 3A      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  3A18 30            mov bl, bh
0034+  3A19 DB            push al          ; save a
0035+  3A1A 07 06 3A      call hex_ascii_encode
0036+  3A1D EA            pop bl  
0037+  3A1E FD 9E 04      shl al, 4
0038+  3A21 8C            or al, bl
0039+  3A22 E5            pop b
0040+  3A23 09            ret  
0041+  3A24             
0042+  3A24             
0043+  3A24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  3A24             ; scanf
0045+  3A24             ; no need for explanations!
0046+  3A24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  3A24             scanf:
0048+  3A24 09            ret
0049+  3A25             
0050+  3A25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  3A25             ; ITOA
0052+  3A25             ; 8bit value in BL
0053+  3A25             ; 2 byte ASCII result in A
0054+  3A25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  3A25             _itoa:
0056+  3A25 DA            push d
0057+  3A26 D8            push b
0058+  3A27 A7 00         mov bh, 0
0059+  3A29 FD A4 04      shr bl, 4  
0060+  3A2C 74            mov d, b
0061+  3A2D 1F D5 3C      mov al, [d + s_hex_digits]
0062+  3A30 23            mov ah, al
0063+  3A31               
0064+  3A31 E5            pop b
0065+  3A32 D8            push b
0066+  3A33 A7 00         mov bh, 0
0067+  3A35 FD 87 0F      and bl, $0F
0068+  3A38 74            mov d, b
0069+  3A39 1F D5 3C      mov al, [d + s_hex_digits]
0070+  3A3C E5            pop b
0071+  3A3D E7            pop d
0072+  3A3E 09            ret
0073+  3A3F             
0074+  3A3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  3A3F             ; HEX STRING TO BINARY
0076+  3A3F             ; di = destination address
0077+  3A3F             ; si = source
0078+  3A3F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  3A3F             _hex_to_int:
0080+  3A3F             _hex_to_int_L1:
0081+  3A3F F6            lodsb          ; load from [SI] to AL
0082+  3A40 B9 00         cmp al, 0        ; check if ASCII 0
0083+  3A42 C6 4F 3A      jz _hex_to_int_ret
0084+  3A45 36            mov bh, al
0085+  3A46 F6            lodsb
0086+  3A47 2F            mov bl, al
0087+  3A48 07 14 3A      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  3A4B F7            stosb          ; store AL to [DI]
0089+  3A4C 0A 3F 3A      jmp _hex_to_int_L1
0090+  3A4F             _hex_to_int_ret:
0091+  3A4F 09            ret    
0092+  3A50             
0093+  3A50             
0094+  3A50             
0095+  3A50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  3A50             ; GETCHAR
0097+  3A50             ; char in ah
0098+  3A50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  3A50             getch:
0100+  3A50 DB            push al
0101+  3A51             getch_retry:
0102+  3A51 19 01         mov al, 1
0103+  3A53 05 03         syscall sys_io      ; receive in AH
0104+  3A55 E8            pop al
0105+  3A56 09            ret
0106+  3A57             
0107+  3A57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  3A57             ; PUTCHAR
0109+  3A57             ; char in ah
0110+  3A57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  3A57             _putchar:
0112+  3A57 D7            push a
0113+  3A58 19 00         mov al, 0
0114+  3A5A 05 03         syscall sys_io      ; char in AH
0115+  3A5C E4            pop a
0116+  3A5D 09            ret
0117+  3A5E             
0118+  3A5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  3A5E             ;; INPUT A STRING
0120+  3A5E             ;; terminates with null
0121+  3A5E             ;; pointer in D
0122+  3A5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  3A5E             _gets:
0124+  3A5E D7            push a
0125+  3A5F DA            push d
0126+  3A60             _gets_loop:
0127+  3A60 19 01         mov al, 1
0128+  3A62 05 03         syscall sys_io      ; receive in AH
0129+  3A64 B9 00         cmp al, 0        ; check error code (AL)
0130+  3A66 C6 60 3A      je _gets_loop      ; if no char received, retry
0131+  3A69             
0132+  3A69 76 1B         cmp ah, 27
0133+  3A6B C6 8C 3A      je _gets_ansi_esc
0134+  3A6E 76 0A         cmp ah, $0A        ; LF
0135+  3A70 C6 F7 3A      je _gets_end
0136+  3A73 76 0D         cmp ah, $0D        ; CR
0137+  3A75 C6 F7 3A      je _gets_end
0138+  3A78 76 5C         cmp ah, $5C        ; '\\'
0139+  3A7A C6 B8 3A      je _gets_escape
0140+  3A7D               
0141+  3A7D 76 08         cmp ah, $08      ; check for backspace
0142+  3A7F C6 88 3A      je _gets_backspace
0143+  3A82             
0144+  3A82 1A            mov al, ah
0145+  3A83 3E            mov [d], al
0146+  3A84 79            inc d
0147+  3A85 0A 60 3A      jmp _gets_loop
0148+  3A88             _gets_backspace:
0149+  3A88 7F            dec d
0150+  3A89 0A 60 3A      jmp _gets_loop
0151+  3A8C             _gets_ansi_esc:
0152+  3A8C 19 01         mov al, 1
0153+  3A8E 05 03         syscall sys_io        ; receive in AH without echo
0154+  3A90 B9 00         cmp al, 0          ; check error code (AL)
0155+  3A92 C6 8C 3A      je _gets_ansi_esc    ; if no char received, retry
0156+  3A95 76 5B         cmp ah, '['
0157+  3A97 C7 60 3A      jne _gets_loop
0158+  3A9A             _gets_ansi_esc_2:
0159+  3A9A 19 01         mov al, 1
0160+  3A9C 05 03         syscall sys_io          ; receive in AH without echo
0161+  3A9E B9 00         cmp al, 0            ; check error code (AL)
0162+  3AA0 C6 9A 3A      je _gets_ansi_esc_2  ; if no char received, retry
0163+  3AA3 76 44         cmp ah, 'D'
0164+  3AA5 C6 B0 3A      je _gets_left_arrow
0165+  3AA8 76 43         cmp ah, 'C'
0166+  3AAA C6 B4 3A      je _gets_right_arrow
0167+  3AAD 0A 60 3A      jmp _gets_loop
0168+  3AB0             _gets_left_arrow:
0169+  3AB0 7F            dec d
0170+  3AB1 0A 60 3A      jmp _gets_loop
0171+  3AB4             _gets_right_arrow:
0172+  3AB4 79            inc d
0173+  3AB5 0A 60 3A      jmp _gets_loop
0174+  3AB8             _gets_escape:
0175+  3AB8 19 01         mov al, 1
0176+  3ABA 05 03         syscall sys_io      ; receive in AH
0177+  3ABC B9 00         cmp al, 0        ; check error code (AL)
0178+  3ABE C6 B8 3A      je _gets_escape      ; if no char received, retry
0179+  3AC1 76 6E         cmp ah, 'n'
0180+  3AC3 C6 E2 3A      je _gets_LF
0181+  3AC6 76 72         cmp ah, 'r'
0182+  3AC8 C6 E9 3A      je _gets_CR
0183+  3ACB 76 30         cmp ah, '0'
0184+  3ACD C6 F0 3A      je _gets_NULL
0185+  3AD0 76 5C         cmp ah, $5C  ; '\'
0186+  3AD2 C6 DB 3A      je _gets_slash
0187+  3AD5 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  3AD6 3E            mov [d], al
0189+  3AD7 79            inc d
0190+  3AD8 0A 60 3A      jmp _gets_loop
0191+  3ADB             _gets_slash:
0192+  3ADB 19 5C         mov al, $5C
0193+  3ADD 3E            mov [d], al
0194+  3ADE 79            inc d
0195+  3ADF 0A 60 3A      jmp _gets_loop
0196+  3AE2             _gets_LF:
0197+  3AE2 19 0A         mov al, $0A
0198+  3AE4 3E            mov [d], al
0199+  3AE5 79            inc d
0200+  3AE6 0A 60 3A      jmp _gets_loop
0201+  3AE9             _gets_CR:
0202+  3AE9 19 0D         mov al, $0D
0203+  3AEB 3E            mov [d], al
0204+  3AEC 79            inc d
0205+  3AED 0A 60 3A      jmp _gets_loop
0206+  3AF0             _gets_NULL:
0207+  3AF0 19 00         mov al, $00
0208+  3AF2 3E            mov [d], al
0209+  3AF3 79            inc d
0210+  3AF4 0A 60 3A      jmp _gets_loop
0211+  3AF7             _gets_end:
0212+  3AF7 19 00         mov al, 0
0213+  3AF9 3E            mov [d], al        ; terminate string
0214+  3AFA E7            pop d
0215+  3AFB E4            pop a
0216+  3AFC 09            ret
0217+  3AFD             
0218+  3AFD             
0219+  3AFD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  3AFD             ;; INPUT TEXT
0221+  3AFD             ;; terminated with CTRL+D
0222+  3AFD             ;; pointer in D
0223+  3AFD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  3AFD             _gettxt:
0225+  3AFD D7            push a
0226+  3AFE DA            push d
0227+  3AFF             _gettxt_loop:
0228+  3AFF 19 01         mov al, 1
0229+  3B01 05 03         syscall sys_io      ; receive in AH
0230+  3B03 B9 00         cmp al, 0        ; check error code (AL)
0231+  3B05 C6 FF 3A      je _gettxt_loop    ; if no char received, retry
0232+  3B08 76 04         cmp ah, 4      ; EOT
0233+  3B0A C6 48 3B      je _gettxt_end
0234+  3B0D 76 08         cmp ah, $08      ; check for backspace
0235+  3B0F C6 44 3B      je _gettxt_backspace
0236+  3B12 76 5C         cmp ah, $5C        ; '\'
0237+  3B14 C6 1D 3B      je _gettxt_escape
0238+  3B17 1A            mov al, ah
0239+  3B18 3E            mov [d], al
0240+  3B19 79            inc d
0241+  3B1A 0A FF 3A      jmp _gettxt_loop
0242+  3B1D             _gettxt_escape:
0243+  3B1D 19 01         mov al, 1
0244+  3B1F 05 03         syscall sys_io      ; receive in AH
0245+  3B21 B9 00         cmp al, 0        ; check error code (AL)
0246+  3B23 C6 1D 3B      je _gettxt_escape    ; if no char received, retry
0247+  3B26 76 6E         cmp ah, 'n'
0248+  3B28 C6 36 3B      je _gettxt_LF
0249+  3B2B 76 72         cmp ah, 'r'
0250+  3B2D C6 3D 3B      je _gettxt_CR
0251+  3B30 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  3B31 3E            mov [d], al
0253+  3B32 79            inc d
0254+  3B33 0A FF 3A      jmp _gettxt_loop
0255+  3B36             _gettxt_LF:
0256+  3B36 19 0A         mov al, $0A
0257+  3B38 3E            mov [d], al
0258+  3B39 79            inc d
0259+  3B3A 0A FF 3A      jmp _gettxt_loop
0260+  3B3D             _gettxt_CR:
0261+  3B3D 19 0D         mov al, $0D
0262+  3B3F 3E            mov [d], al
0263+  3B40 79            inc d
0264+  3B41 0A FF 3A      jmp _gettxt_loop
0265+  3B44             _gettxt_backspace:
0266+  3B44 7F            dec d
0267+  3B45 0A FF 3A      jmp _gettxt_loop
0268+  3B48             _gettxt_end:
0269+  3B48 19 00         mov al, 0
0270+  3B4A 3E            mov [d], al        ; terminate string
0271+  3B4B E7            pop d
0272+  3B4C E4            pop a
0273+  3B4D 09            ret
0274+  3B4E             
0275+  3B4E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  3B4E             ; PRINT NEW LINE
0277+  3B4E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  3B4E             printnl:
0279+  3B4E D7            push a
0280+  3B4F 10 00 0A      mov a, $0A00
0281+  3B52 05 03         syscall sys_io
0282+  3B54 10 00 0D      mov a, $0D00
0283+  3B57 05 03         syscall sys_io
0284+  3B59 E4            pop a
0285+  3B5A 09            ret
0286+  3B5B             
0287+  3B5B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  3B5B             ; _strtoint
0289+  3B5B             ; 4 digit hex string number in d
0290+  3B5B             ; integer returned in A
0291+  3B5B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  3B5B             _strtointx:
0293+  3B5B D8            push b
0294+  3B5C 32            mov bl, [d]
0295+  3B5D 37            mov bh, bl
0296+  3B5E 33 01 00      mov bl, [d + 1]
0297+  3B61 07 14 3A      call _atoi        ; convert to int in AL
0298+  3B64 23            mov ah, al        ; move to AH
0299+  3B65 33 02 00      mov bl, [d + 2]
0300+  3B68 37            mov bh, bl
0301+  3B69 33 03 00      mov bl, [d + 3]
0302+  3B6C 07 14 3A      call _atoi        ; convert to int in AL
0303+  3B6F E5            pop b
0304+  3B70 09            ret
0305+  3B71             
0306+  3B71             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  3B71             ; _strtoint
0308+  3B71             ; 5 digit base10 string number in d
0309+  3B71             ; integer returned in A
0310+  3B71             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  3B71             _strtoint:
0312+  3B71 E2            push si
0313+  3B72 D8            push b
0314+  3B73 D9            push c
0315+  3B74 DA            push d
0316+  3B75 07 B6 39      call _strlen      ; get string length in C
0317+  3B78 7E            dec c
0318+  3B79 FD 4E         mov si, d
0319+  3B7B 12            mov a, c
0320+  3B7C FD 99         shl a
0321+  3B7E 3B ED 3C      mov d, table_power
0322+  3B81 59            add d, a
0323+  3B82 38 00 00      mov c, 0
0324+  3B85             _strtoint_L0:
0325+  3B85 F6            lodsb      ; load ASCII to al
0326+  3B86 B9 00         cmp al, 0
0327+  3B88 C6 9B 3B      je _strtoint_end
0328+  3B8B 6F 30         sub al, $30    ; make into integer
0329+  3B8D 22 00         mov ah, 0
0330+  3B8F 2A            mov b, [d]
0331+  3B90 AC            mul a, b      ; result in B since it fits in 16bits
0332+  3B91 11            mov a, b
0333+  3B92 28            mov b, c
0334+  3B93 54            add a, b
0335+  3B94 39            mov c, a
0336+  3B95 63 02 00      sub d, 2
0337+  3B98 0A 85 3B      jmp _strtoint_L0
0338+  3B9B             _strtoint_end:
0339+  3B9B 12            mov a, c
0340+  3B9C E7            pop d
0341+  3B9D E6            pop c
0342+  3B9E E5            pop b
0343+  3B9F EF            pop si
0344+  3BA0 09            ret
0345+  3BA1             
0346+  3BA1             
0347+  3BA1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  3BA1             ; PRINT NULL TERMINATED STRING
0349+  3BA1             ; pointer in D
0350+  3BA1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  3BA1             _puts:
0352+  3BA1 D7            push a
0353+  3BA2 DA            push d
0354+  3BA3             _puts_L1:
0355+  3BA3 1E            mov al, [d]
0356+  3BA4 B9 00         cmp al, 0
0357+  3BA6 C6 B2 3B      jz _puts_END
0358+  3BA9 23            mov ah, al
0359+  3BAA 19 00         mov al, 0
0360+  3BAC 05 03         syscall sys_io
0361+  3BAE 79            inc d
0362+  3BAF 0A A3 3B      jmp _puts_L1
0363+  3BB2             _puts_END:
0364+  3BB2 E7            pop d
0365+  3BB3 E4            pop a
0366+  3BB4 09            ret
0367+  3BB5             
0368+  3BB5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  3BB5             ; PRINT N SIZE STRING
0370+  3BB5             ; pointer in D
0371+  3BB5             ; size in C
0372+  3BB5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  3BB5             _putsn:
0374+  3BB5 DB            push al
0375+  3BB6 DA            push d
0376+  3BB7 D9            push c
0377+  3BB8             _putsn_L0:
0378+  3BB8 1E            mov al, [d]
0379+  3BB9 23            mov ah, al
0380+  3BBA 19 00         mov al, 0
0381+  3BBC 05 03         syscall sys_io
0382+  3BBE 79            inc d
0383+  3BBF 7E            dec c  
0384+  3BC0 C2 00 00      cmp c, 0
0385+  3BC3 C7 B8 3B      jne _putsn_L0
0386+  3BC6             _putsn_end:
0387+  3BC6 E6            pop c
0388+  3BC7 E7            pop d
0389+  3BC8 E8            pop al
0390+  3BC9 09            ret
0391+  3BCA             
0392+  3BCA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  3BCA             ; print 16bit decimal number
0394+  3BCA             ; input number in A
0395+  3BCA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  3BCA             print_u16d:
0397+  3BCA D7            push a
0398+  3BCB D8            push b
0399+  3BCC 26 10 27      mov b, 10000
0400+  3BCF AE            div a, b      ; get 10000's coeff.
0401+  3BD0 07 F2 3B      call print_number
0402+  3BD3 11            mov a, b
0403+  3BD4 26 E8 03      mov b, 1000
0404+  3BD7 AE            div a, b      ; get 1000's coeff.
0405+  3BD8 07 F2 3B      call print_number
0406+  3BDB 11            mov a, b
0407+  3BDC 26 64 00      mov b, 100
0408+  3BDF AE            div a, b
0409+  3BE0 07 F2 3B      call print_number
0410+  3BE3 11            mov a, b
0411+  3BE4 26 0A 00      mov b, 10
0412+  3BE7 AE            div a, b
0413+  3BE8 07 F2 3B      call print_number
0414+  3BEB 1B            mov al, bl      ; 1's coeff in bl
0415+  3BEC 07 F2 3B      call print_number
0416+  3BEF E5            pop b
0417+  3BF0 E4            pop a
0418+  3BF1 09            ret
0419+  3BF2             
0420+  3BF2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  3BF2             ; print AL
0422+  3BF2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  3BF2             print_number:
0424+  3BF2 6A 30         add al, $30
0425+  3BF4 23            mov ah, al
0426+  3BF5 07 57 3A      call _putchar
0427+  3BF8 09            ret
0428+  3BF9             
0429+  3BF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  3BF9             ; PRINT 16BIT HEX INTEGER
0431+  3BF9             ; integer value in reg B
0432+  3BF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  3BF9             print_u16x:
0434+  3BF9 D7            push a
0435+  3BFA D8            push b
0436+  3BFB DD            push bl
0437+  3BFC 30            mov bl, bh
0438+  3BFD 07 25 3A      call _itoa        ; convert bh to char in A
0439+  3C00 2F            mov bl, al        ; save al
0440+  3C01 19 00         mov al, 0
0441+  3C03 05 03         syscall sys_io        ; display AH
0442+  3C05 24            mov ah, bl        ; retrieve al
0443+  3C06 19 00         mov al, 0
0444+  3C08 05 03         syscall sys_io        ; display AL
0445+  3C0A             
0446+  3C0A EA            pop bl
0447+  3C0B 07 25 3A      call _itoa        ; convert bh to char in A
0448+  3C0E 2F            mov bl, al        ; save al
0449+  3C0F 19 00         mov al, 0
0450+  3C11 05 03         syscall sys_io        ; display AH
0451+  3C13 24            mov ah, bl        ; retrieve al
0452+  3C14 19 00         mov al, 0
0453+  3C16 05 03         syscall sys_io        ; display AL
0454+  3C18             
0455+  3C18 E5            pop b
0456+  3C19 E4            pop a
0457+  3C1A 09            ret
0458+  3C1B             
0459+  3C1B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  3C1B             ; INPUT 16BIT HEX INTEGER
0461+  3C1B             ; read 16bit integer into A
0462+  3C1B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  3C1B             scan_u16x:
0464+  3C1B F8 10 00      enter 16
0465+  3C1E D8            push b
0466+  3C1F DA            push d
0467+  3C20             
0468+  3C20 FA F1 FF      lea d, [bp + -15]
0469+  3C23 07 5E 3A      call _gets        ; get number
0470+  3C26             
0471+  3C26 32            mov bl, [d]
0472+  3C27 37            mov bh, bl
0473+  3C28 33 01 00      mov bl, [d + 1]
0474+  3C2B 07 14 3A      call _atoi        ; convert to int in AL
0475+  3C2E 23            mov ah, al        ; move to AH
0476+  3C2F             
0477+  3C2F 33 02 00      mov bl, [d + 2]
0478+  3C32 37            mov bh, bl
0479+  3C33 33 03 00      mov bl, [d + 3]
0480+  3C36 07 14 3A      call _atoi        ; convert to int in AL
0481+  3C39             
0482+  3C39 E7            pop d
0483+  3C3A E5            pop b
0484+  3C3B F9            leave
0485+  3C3C 09            ret
0486+  3C3D             
0487+  3C3D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  3C3D             ; PRINT 8bit HEX INTEGER
0489+  3C3D             ; integer value in reg bl
0490+  3C3D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  3C3D             print_u8x:
0492+  3C3D D7            push a
0493+  3C3E DD            push bl
0494+  3C3F             
0495+  3C3F 07 25 3A      call _itoa        ; convert bl to char in A
0496+  3C42 2F            mov bl, al        ; save al
0497+  3C43 19 00         mov al, 0
0498+  3C45 05 03         syscall sys_io        ; display AH
0499+  3C47 24            mov ah, bl        ; retrieve al
0500+  3C48 19 00         mov al, 0
0501+  3C4A 05 03         syscall sys_io        ; display AL
0502+  3C4C             
0503+  3C4C EA            pop bl
0504+  3C4D E4            pop a
0505+  3C4E 09            ret
0506+  3C4F             
0507+  3C4F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  3C4F             ; print 8bit decimal unsigned number
0509+  3C4F             ; input number in AL
0510+  3C4F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  3C4F             print_u8d:
0512+  3C4F D7            push a
0513+  3C50 D8            push b
0514+  3C51             
0515+  3C51 22 00         mov ah, 0
0516+  3C53 26 64 00      mov b, 100
0517+  3C56 AE            div a, b
0518+  3C57 D8            push b      ; save remainder
0519+  3C58 B9 00         cmp al, 0
0520+  3C5A C6 64 3C      je skip100
0521+  3C5D 6A 30         add al, $30
0522+  3C5F 23            mov ah, al
0523+  3C60 19 00         mov al, 0
0524+  3C62 05 03         syscall sys_io  ; print coeff
0525+  3C64             skip100:
0526+  3C64 E4            pop a
0527+  3C65 22 00         mov ah, 0
0528+  3C67 26 0A 00      mov b, 10
0529+  3C6A AE            div a, b
0530+  3C6B D8            push b      ; save remainder
0531+  3C6C B9 00         cmp al, 0
0532+  3C6E C6 78 3C      je skip10
0533+  3C71 6A 30         add al, $30
0534+  3C73 23            mov ah, al
0535+  3C74 19 00         mov al, 0
0536+  3C76 05 03         syscall sys_io  ; print coeff
0537+  3C78             skip10:
0538+  3C78 E4            pop a
0539+  3C79 1B            mov al, bl
0540+  3C7A 6A 30         add al, $30
0541+  3C7C 23            mov ah, al
0542+  3C7D 19 00         mov al, 0
0543+  3C7F 05 03         syscall sys_io  ; print coeff
0544+  3C81 E5            pop b
0545+  3C82 E4            pop a
0546+  3C83 09            ret
0547+  3C84             
0548+  3C84             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  3C84             ; INPUT 8BIT HEX INTEGER
0550+  3C84             ; read 8bit integer into AL
0551+  3C84             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  3C84             scan_u8x:
0553+  3C84 F8 04 00      enter 4
0554+  3C87 D8            push b
0555+  3C88 DA            push d
0556+  3C89             
0557+  3C89 FA FD FF      lea d, [bp + -3]
0558+  3C8C 07 5E 3A      call _gets        ; get number
0559+  3C8F             
0560+  3C8F 32            mov bl, [d]
0561+  3C90 37            mov bh, bl
0562+  3C91 33 01 00      mov bl, [d + 1]
0563+  3C94 07 14 3A      call _atoi        ; convert to int in AL
0564+  3C97             
0565+  3C97 E7            pop d
0566+  3C98 E5            pop b
0567+  3C99 F9            leave
0568+  3C9A 09            ret
0569+  3C9B             
0570+  3C9B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  3C9B             ; input decimal number
0572+  3C9B             ; result in A
0573+  3C9B             ; 655'\0'
0574+  3C9B             ; low--------high
0575+  3C9B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  3C9B             scan_u16d:
0577+  3C9B F8 08 00      enter 8
0578+  3C9E E2            push si
0579+  3C9F D8            push b
0580+  3CA0 D9            push c
0581+  3CA1 DA            push d
0582+  3CA2 FA F9 FF      lea d, [bp +- 7]
0583+  3CA5 07 5E 3A      call _gets
0584+  3CA8 07 B6 39      call _strlen      ; get string length in C
0585+  3CAB 7E            dec c
0586+  3CAC FD 4E         mov si, d
0587+  3CAE 12            mov a, c
0588+  3CAF FD 99         shl a
0589+  3CB1 3B ED 3C      mov d, table_power
0590+  3CB4 59            add d, a
0591+  3CB5 38 00 00      mov c, 0
0592+  3CB8             mul_loop:
0593+  3CB8 F6            lodsb      ; load ASCII to al
0594+  3CB9 B9 00         cmp al, 0
0595+  3CBB C6 CE 3C      je mul_exit
0596+  3CBE 6F 30         sub al, $30    ; make into integer
0597+  3CC0 22 00         mov ah, 0
0598+  3CC2 2A            mov b, [d]
0599+  3CC3 AC            mul a, b      ; result in B since it fits in 16bits
0600+  3CC4 11            mov a, b
0601+  3CC5 28            mov b, c
0602+  3CC6 54            add a, b
0603+  3CC7 39            mov c, a
0604+  3CC8 63 02 00      sub d, 2
0605+  3CCB 0A B8 3C      jmp mul_loop
0606+  3CCE             mul_exit:
0607+  3CCE 12            mov a, c
0608+  3CCF E7            pop d
0609+  3CD0 E6            pop c
0610+  3CD1 E5            pop b
0611+  3CD2 EF            pop si
0612+  3CD3 F9            leave
0613+  3CD4 09            ret
0614+  3CD5             
0615+  3CD5             
0616+  3CD5 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  3CD9 34 35 36 37 
0616+  3CDD 38 39 41 42 
0616+  3CE1 43 44 45 46 
0617+  3CE5 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  3CE9 1B 5B 48 00 
0618+  3CED             
0619+  3CED             table_power:
0620+  3CED 01 00         .dw 1
0621+  3CEF 0A 00         .dw 10
0622+  3CF1 64 00         .dw 100
0623+  3CF3 E8 03         .dw 1000
0624+  3CF5 10 27         .dw 100008984   3CF7             ; --- END INLINE ASM BLOCK
8985   3CF7             
8986   3CF7 F9            leave
8987   3CF8 09            ret
8988   3CF9             ; --- END TEXT BLOCK
8989   3CF9             
8990   3CF9             ; --- BEGIN DATA BLOCK
8991   3CF9             _keywords_data:
8992   3CF9 AE 3F       .dw __s0
8993   3CFB 01          .db 1
8994   3CFC B2 3F       .dw __s1
8995   3CFE 02          .db 2
8996   3CFF BA 3F       .dw __s2
8997   3D01 03          .db 3
8998   3D02 BF 3F       .dw __s3
8999   3D04 04          .db 4
9000   3D05 C4 3F       .dw __s4
9001   3D07 06          .db 6
9002   3D08 C7 3F       .dw __s5
9003   3D0A 07          .db 7
9004   3D0B CA 3F       .dw __s6
9005   3D0D 05          .db 5
9006   3D0E CE 3F       .dw __s7
9007   3D10 00          .db 0
9008   3D11 00 00 00 00 _label_table_data: .fill 288, 0
9008   3D15 00 00 00 00 
9008   3D19 00 00 00 00 
9008   3D1D 00 00 00 00 
9008   3D21 00 00 00 00 
9008   3D25 00 00 00 00 
9008   3D29 00 00 00 00 
9008   3D2D 00 00 00 00 
9008   3D31 00 00 00 00 
9008   3D35 00 00 00 00 
9008   3D39 00 00 00 00 
9008   3D3D 00 00 00 00 
9008   3D41 00 00 00 00 
9008   3D45 00 00 00 00 
9008   3D49 00 00 00 00 
9008   3D4D 00 00 00 00 
9008   3D51 00 00 00 00 
9008   3D55 00 00 00 00 
9008   3D59 00 00 00 00 
9008   3D5D 00 00 00 00 
9008   3D61 00 00 00 00 
9008   3D65 00 00 00 00 
9008   3D69 00 00 00 00 
9008   3D6D 00 00 00 00 
9008   3D71 00 00 00 00 
9008   3D75 00 00 00 00 
9008   3D79 00 00 00 00 
9008   3D7D 00 00 00 00 
9008   3D81 00 00 00 00 
9008   3D85 00 00 00 00 
9008   3D89 00 00 00 00 
9008   3D8D 00 00 00 00 
9008   3D91 00 00 00 00 
9008   3D95 00 00 00 00 
9008   3D99 00 00 00 00 
9008   3D9D 00 00 00 00 
9008   3DA1 00 00 00 00 
9008   3DA5 00 00 00 00 
9008   3DA9 00 00 00 00 
9008   3DAD 00 00 00 00 
9008   3DB1 00 00 00 00 
9008   3DB5 00 00 00 00 
9008   3DB9 00 00 00 00 
9008   3DBD 00 00 00 00 
9008   3DC1 00 00 00 00 
9008   3DC5 00 00 00 00 
9008   3DC9 00 00 00 00 
9008   3DCD 00 00 00 00 
9008   3DD1 00 00 00 00 
9008   3DD5 00 00 00 00 
9008   3DD9 00 00 00 00 
9008   3DDD 00 00 00 00 
9008   3DE1 00 00 00 00 
9008   3DE5 00 00 00 00 
9008   3DE9 00 00 00 00 
9008   3DED 00 00 00 00 
9008   3DF1 00 00 00 00 
9008   3DF5 00 00 00 00 
9008   3DF9 00 00 00 00 
9008   3DFD 00 00 00 00 
9008   3E01 00 00 00 00 
9008   3E05 00 00 00 00 
9008   3E09 00 00 00 00 
9008   3E0D 00 00 00 00 
9008   3E11 00 00 00 00 
9008   3E15 00 00 00 00 
9008   3E19 00 00 00 00 
9008   3E1D 00 00 00 00 
9008   3E21 00 00 00 00 
9008   3E25 00 00 00 00 
9008   3E29 00 00 00 00 
9008   3E2D 00 00 00 00 
9009   3E31 00 04       __org: .dw 1024
9010   3E33 00 00       _pc: .fill 2, 0
9011   3E35 01          _print_information: .db 1
9012   3E36 00 00       _tok: .fill 2, 0
9013   3E38 00 00       _toktype: .fill 2, 0
9014   3E3A 00 00       _prog: .fill 2, 0
9015   3E3C 00 00 00 00 _token_data: .fill 64, 0
9015   3E40 00 00 00 00 
9015   3E44 00 00 00 00 
9015   3E48 00 00 00 00 
9015   3E4C 00 00 00 00 
9015   3E50 00 00 00 00 
9015   3E54 00 00 00 00 
9015   3E58 00 00 00 00 
9015   3E5C 00 00 00 00 
9015   3E60 00 00 00 00 
9015   3E64 00 00 00 00 
9015   3E68 00 00 00 00 
9015   3E6C 00 00 00 00 
9015   3E70 00 00 00 00 
9015   3E74 00 00 00 00 
9015   3E78 00 00 00 00 
9016   3E7C 00 00 00 00 _string_const_data: .fill 256, 0
9016   3E80 00 00 00 00 
9016   3E84 00 00 00 00 
9016   3E88 00 00 00 00 
9016   3E8C 00 00 00 00 
9016   3E90 00 00 00 00 
9016   3E94 00 00 00 00 
9016   3E98 00 00 00 00 
9016   3E9C 00 00 00 00 
9016   3EA0 00 00 00 00 
9016   3EA4 00 00 00 00 
9016   3EA8 00 00 00 00 
9016   3EAC 00 00 00 00 
9016   3EB0 00 00 00 00 
9016   3EB4 00 00 00 00 
9016   3EB8 00 00 00 00 
9016   3EBC 00 00 00 00 
9016   3EC0 00 00 00 00 
9016   3EC4 00 00 00 00 
9016   3EC8 00 00 00 00 
9016   3ECC 00 00 00 00 
9016   3ED0 00 00 00 00 
9016   3ED4 00 00 00 00 
9016   3ED8 00 00 00 00 
9016   3EDC 00 00 00 00 
9016   3EE0 00 00 00 00 
9016   3EE4 00 00 00 00 
9016   3EE8 00 00 00 00 
9016   3EEC 00 00 00 00 
9016   3EF0 00 00 00 00 
9016   3EF4 00 00 00 00 
9016   3EF8 00 00 00 00 
9016   3EFC 00 00 00 00 
9016   3F00 00 00 00 00 
9016   3F04 00 00 00 00 
9016   3F08 00 00 00 00 
9016   3F0C 00 00 00 00 
9016   3F10 00 00 00 00 
9016   3F14 00 00 00 00 
9016   3F18 00 00 00 00 
9016   3F1C 00 00 00 00 
9016   3F20 00 00 00 00 
9016   3F24 00 00 00 00 
9016   3F28 00 00 00 00 
9016   3F2C 00 00 00 00 
9016   3F30 00 00 00 00 
9016   3F34 00 00 00 00 
9016   3F38 00 00 00 00 
9016   3F3C 00 00 00 00 
9016   3F40 00 00 00 00 
9016   3F44 00 00 00 00 
9016   3F48 00 00 00 00 
9016   3F4C 00 00 00 00 
9016   3F50 00 00 00 00 
9016   3F54 00 00 00 00 
9016   3F58 00 00 00 00 
9016   3F5C 00 00 00 00 
9016   3F60 00 00 00 00 
9016   3F64 00 00 00 00 
9016   3F68 00 00 00 00 
9016   3F6C 00 00 00 00 
9016   3F70 00 00 00 00 
9016   3F74 00 00 00 00 
9016   3F78 00 00 00 00 
9017   3F7C 00 00       _int_const: .fill 2, 0
9018   3F7E 00 00       _program: .fill 2, 0
9019   3F80 00 00       _bin_out: .fill 2, 0
9020   3F82 00 00       _bin_p: .fill 2, 0
9021   3F84 00 00       _opcode_table: .fill 2, 0
9022   3F86 00 00 00 00 _prog_stack_data: .fill 20, 0
9022   3F8A 00 00 00 00 
9022   3F8E 00 00 00 00 
9022   3F92 00 00 00 00 
9022   3F96 00 00 00 00 
9023   3F9A 00 00       _prog_tos: .fill 2, 0
9024   3F9C 00 00       _prog_size: .fill 2, 0
9025   3F9E             _symbols_data: 
9026   3F9E CE 3F D0 3F .dw __s7, __s8, __s8, __s7, __s7, __s7, __s8, __s8, 
9026   3FA2 D0 3F CE 3F 
9026   3FA6 CE 3F CE 3F 
9026   3FAA D0 3F D0 3F 
9027   3FAE 6F 72 67 00 __s0: .db "org", 0
9028   3FB2 69 6E 63 6C __s1: .db "include", 0
9028   3FB6 75 64 65 00 
9029   3FBA 64 61 74 61 __s2: .db "data", 0
9029   3FBE 00 
9030   3FBF 74 65 78 74 __s3: .db "text", 0
9030   3FC3 00 
9031   3FC4 64 62 00    __s4: .db "db", 0
9032   3FC7 64 77 00    __s5: .db "dw", 0
9033   3FCA 65 6E 64 00 __s6: .db "end", 0
9034   3FCE 40 00       __s7: .db "@", 0
9035   3FD0 23 00       __s8: .db "#", 0
9036   3FD2 0A 00       __s9: .db "\n", 0
9037   3FD4 2E 2F 63 6F __s10: .db "./config.d/op_tbl", 0
9037   3FD8 6E 66 69 67 
9037   3FDC 2E 64 2F 6F 
9037   3FE0 70 5F 74 62 
9037   3FE4 6C 00 
9038   3FE6 50 61 72 73 __s11: .db "Parsing DATA section...", 0
9038   3FEA 69 6E 67 20 
9038   3FEE 44 41 54 41 
9038   3FF2 20 73 65 63 
9038   3FF6 74 69 6F 6E 
9038   3FFA 2E 2E 2E 00 
9039   3FFE 44 61 74 61 __s12: .db "Data segment not found.", 0
9039   4002 20 73 65 67 
9039   4006 6D 65 6E 74 
9039   400A 20 6E 6F 74 
9039   400E 20 66 6F 75 
9039   4012 6E 64 2E 00 
9040   4016 2E 64 62 3A __s13: .db ".db: ", 0
9040   401A 20 00 
9041   401C 2C 20 00    __s14: .db ", ", 0
9042   401F 2E 64 77 3A __s15: .db ".dw: ", 0
9042   4023 20 00 
9043   4025 44 6F 6E 65 __s16: .db "Done.\n", 0
9043   4029 2E 0A 00 
9044   402C 49 6E 74 65 __s17: .db "Integer constant expected in .org directive.", 0
9044   4030 67 65 72 20 
9044   4034 63 6F 6E 73 
9044   4038 74 61 6E 74 
9044   403C 20 65 78 70 
9044   4040 65 63 74 65 
9044   4044 64 20 69 6E 
9044   4048 20 2E 6F 72 
9044   404C 67 20 64 69 
9044   4050 72 65 63 74 
9044   4054 69 76 65 2E 
9044   4058 00 
9045   4059 50 61 72 73 __s18: .db "Parsing labels and directives...\n", 0
9045   405D 69 6E 67 20 
9045   4061 6C 61 62 65 
9045   4065 6C 73 20 61 
9045   4069 6E 64 20 64 
9045   406D 69 72 65 63 
9045   4071 74 69 76 65 
9045   4075 73 2E 2E 2E 
9045   4079 0A 00 
9046   407B 2E 00       __s19: .db ".", 0
9047   407D 0A 44 6F 6E __s20: .db "\nDone.\n", 0
9047   4081 65 2E 0A 00 
9048   4085 4F 72 67 3A __s21: .db "Org: ", 0
9048   4089 20 00 
9049   408B 0A 4C 61 62 __s22: .db "\nLabels list:\n", 0
9049   408F 65 6C 73 20 
9049   4093 6C 69 73 74 
9049   4097 3A 0A 00 
9050   409A 3A 20 00    __s23: .db ": ", 0
9051   409D 20 2E 00    __s24: .db " .", 0
9052   40A0 20 00       __s25: .db " ", 0
9053   40A2 4D 61 78 69 __s26: .db "Maximum number of operands per instruction is 2.", 0
9053   40A6 6D 75 6D 20 
9053   40AA 6E 75 6D 62 
9053   40AE 65 72 20 6F 
9053   40B2 66 20 6F 70 
9053   40B6 65 72 61 6E 
9053   40BA 64 73 20 70 
9053   40BE 65 72 20 69 
9053   40C2 6E 73 74 72 
9053   40C6 75 63 74 69 
9053   40CA 6F 6E 20 69 
9053   40CE 73 20 32 2E 
9053   40D2 00 
9054   40D3 38 62 69 74 __s27: .db "8bit operand expected but 16bit label given.", 0
9054   40D7 20 6F 70 65 
9054   40DB 72 61 6E 64 
9054   40DF 20 65 78 70 
9054   40E3 65 63 74 65 
9054   40E7 64 20 62 75 
9054   40EB 74 20 31 36 
9054   40EF 62 69 74 20 
9054   40F3 6C 61 62 65 
9054   40F7 6C 20 67 69 
9054   40FB 76 65 6E 2E 
9054   40FF 00 
9055   4100 20 28 00    __s28: .db " (", 0
9056   4103 29 20 3A 20 __s29: .db ") : ", 0
9056   4107 00 
9057   4108 55 6E 64 65 __s30: .db "Undeclared label: ", 0
9057   410C 63 6C 61 72 
9057   4110 65 64 20 6C 
9057   4114 61 62 65 6C 
9057   4118 3A 20 00 
9058   411B 50 61 72 73 __s31: .db "Parsing TEXT section...\n", 0
9058   411F 69 6E 67 20 
9058   4123 54 45 58 54 
9058   4127 20 73 65 63 
9058   412B 74 69 6F 6E 
9058   412F 2E 2E 2E 0A 
9058   4133 00 
9059   4134 54 45 58 54 __s32: .db "TEXT section not found.", 0
9059   4138 20 73 65 63 
9059   413C 74 69 6F 6E 
9059   4140 20 6E 6F 74 
9059   4144 20 66 6F 75 
9059   4148 6E 64 2E 00 
9060   414C 54 45 58 54 __s33: .db "TEXT section end not found.", 0
9060   4150 20 73 65 63 
9060   4154 74 69 6F 6E 
9060   4158 20 65 6E 64 
9060   415C 20 6E 6F 74 
9060   4160 20 66 6F 75 
9060   4164 6E 64 2E 00 
9061   4168 55 6E 65 78 __s34: .db "Unexpected directive.", 0
9061   416C 70 65 63 74 
9061   4170 65 64 20 64 
9061   4174 69 72 65 63 
9061   4178 74 69 76 65 
9061   417C 2E 00 
9062   417E 44 6F 6E 65 __s35: .db "Done.\n\n", 0
9062   4182 2E 0A 0A 00 
9063   4186 50 72 6F 67 __s36: .db "Prog Offset: ", 0
9063   418A 20 4F 66 66 
9063   418E 73 65 74 3A 
9063   4192 20 00 
9064   4194 50 72 6F 67 __s37: .db "Prog value : ", 0
9064   4198 20 76 61 6C 
9064   419C 75 65 20 3A 
9064   41A0 20 00 
9065   41A2 54 6F 6B 65 __s38: .db "Token       : ", 0
9065   41A6 6E 20 20 20 
9065   41AA 20 20 20 20 
9065   41AE 3A 20 00 
9066   41B1 54 6F 6B 3A __s39: .db "Tok: ", 0
9066   41B5 20 00 
9067   41B7 54 6F 6B 74 __s40: .db "Toktype: ", 0
9067   41BB 79 70 65 3A 
9067   41BF 20 00 
9068   41C1 53 74 72 69 __s41: .db "StringConst : ", 0
9068   41C5 6E 67 43 6F 
9068   41C9 6E 73 74 20 
9068   41CD 3A 20 00 
9069   41D0 50 43 20 20 __s42: .db "PC          : ", 0
9069   41D4 20 20 20 20 
9069   41D8 20 20 20 20 
9069   41DC 3A 20 00 
9070   41DF 0A 41 73 73 __s43: .db "\nAssembly complete.\n", 0
9070   41E3 65 6D 62 6C 
9070   41E7 79 20 63 6F 
9070   41EB 6D 70 6C 65 
9070   41EF 74 65 2E 0A 
9070   41F3 00 
9071   41F4 50 72 6F 67 __s44: .db "Program size: ", 0
9071   41F8 72 61 6D 20 
9071   41FC 73 69 7A 65 
9071   4200 3A 20 00 
9072   4203 4C 69 73 74 __s45: .db "Listing: \n", 0
9072   4207 69 6E 67 3A 
9072   420B 20 0A 00 
9073   420E 61 00       __s46: .db "a", 0
9074   4210 61 6C 00    __s47: .db "al", 0
9075   4213 61 68 00    __s48: .db "ah", 0
9076   4216 62 00       __s49: .db "b", 0
9077   4218 62 6C 00    __s50: .db "bl", 0
9078   421B 62 68 00    __s51: .db "bh", 0
9079   421E 63 00       __s52: .db "c", 0
9080   4220 63 6C 00    __s53: .db "cl", 0
9081   4223 63 68 00    __s54: .db "ch", 0
9082   4226 64 00       __s55: .db "d", 0
9083   4228 64 6C 00    __s56: .db "dl", 0
9084   422B 64 68 00    __s57: .db "dh", 0
9085   422E 67 00       __s58: .db "g", 0
9086   4230 67 6C 00    __s59: .db "gl", 0
9087   4233 67 68 00    __s60: .db "gh", 0
9088   4236 70 63 00    __s61: .db "pc", 0
9089   4239 73 70 00    __s62: .db "sp", 0
9090   423C 62 70 00    __s63: .db "bp", 0
9091   423F 73 69 00    __s64: .db "si", 0
9092   4242 64 69 00    __s65: .db "di", 0
9093   4245 77 6F 72 64 __s66: .db "word", 0
9093   4249 00 
9094   424A 62 79 74 65 __s67: .db "byte", 0
9094   424E 00 
9095   424F 63 6D 70 73 __s68: .db "cmpsb", 0
9095   4253 62 00 
9096   4255 6D 6F 76 73 __s69: .db "movsb", 0
9096   4259 62 00 
9097   425B 73 74 6F 73 __s70: .db "stosb", 0
9097   425F 62 00 
9098   4261 64 65 66 69 __s71: .db "define", 0
9098   4265 6E 65 00 
9099   4268 4C 61 62 65 __s72: .db "Label does not exist: ", 0
9099   426C 6C 20 64 6F 
9099   4270 65 73 20 6E 
9099   4274 6F 74 20 65 
9099   4278 78 69 73 74 
9099   427C 3A 20 00 
9100   427F 43 6C 6F 73 __s73: .db "Closing single quotes expected.", 0
9100   4283 69 6E 67 20 
9100   4287 73 69 6E 67 
9100   428B 6C 65 20 71 
9100   428F 75 6F 74 65 
9100   4293 73 20 65 78 
9100   4297 70 65 63 74 
9100   429B 65 64 2E 00 
9101   429F 44 6F 75 62 __s74: .db "Double quotes expected", 0
9101   42A3 6C 65 20 71 
9101   42A7 75 6F 74 65 
9101   42AB 73 20 65 78 
9101   42AF 70 65 63 74 
9101   42B3 65 64 00 
9102   42B6 54 4F 4B 45 __s75: .db "TOKEN ERROR. Prog: ", 0
9102   42BA 4E 20 45 52 
9102   42BE 52 4F 52 2E 
9102   42C2 20 50 72 6F 
9102   42C6 67 3A 20 00 
9103   42CA 2C 20 50 72 __s76: .db ", ProgVal: ", 0
9103   42CE 6F 67 56 61 
9103   42D2 6C 3A 20 00 
9104   42D6 0A 20 54 65 __s77: .db "\n Text after prog: \n", 0
9104   42DA 78 74 20 61 
9104   42DE 66 74 65 72 
9104   42E2 20 70 72 6F 
9104   42E6 67 3A 20 0A 
9104   42EA 00 
9105   42EB 0A 45 72 72 __s78: .db "\nError: ", 0
9105   42EF 6F 72 3A 20 
9105   42F3 00 
9106   42F4 43 61 6E 6E __s79: .db "Cannot push prog. Stack overflow.", 0
9106   42F8 6F 74 20 70 
9106   42FC 75 73 68 20 
9106   4300 70 72 6F 67 
9106   4304 2E 20 53 74 
9106   4308 61 63 6B 20 
9106   430C 6F 76 65 72 
9106   4310 66 6C 6F 77 
9106   4314 2E 00 
9107   4316 43 61 6E 6E __s80: .db "Cannot pop prog. Stack overflow.", 0
9107   431A 6F 74 20 70 
9107   431E 6F 70 20 70 
9107   4322 72 6F 67 2E 
9107   4326 20 53 74 61 
9107   432A 63 6B 20 6F 
9107   432E 76 65 72 66 
9107   4332 6C 6F 77 2E 
9107   4336 00 
9108   4337             
9109   4337 39 43       _heap_top: .dw _heap
9110   4339 00          _heap: .db 0
9111   433A             ; --- END DATA BLOCK
9112   433A             
9113   433A             .end
tasm: Number of errors = 0
