0001   0000             ; --- FILENAME: ../solarium/asm/asm.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char *p; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; print("\n"); 
0013   040B                            
0014   040B             ; --- START FUNCTION CALL
0015   040B                            
0016   040B 26 D6 4F      mov b, _s10 ; "\n"
0017   040E FD AB         swp b
0018   0410 D8            push b
0019   0411 07 30 3E      call print
0020   0414 51 02 00      add sp, 2
0021   0417             ; --- END FUNCTION CALL
0022   0417             ; program = alloc(16384); 
0023   0417 3B 7F 4F      mov d, _program ; $program
0024   041A DA            push d
0025   041B                            
0026   041B             ; --- START FUNCTION CALL
0027   041B                            
0028   041B FD 2E 00 40   mov32 cb, $00004000
0028   041F 00 00 
0029   0421 FD AB         swp b
0030   0423 D8            push b
0031   0424 07 49 3E      call alloc
0032   0427 51 02 00      add sp, 2
0033   042A             ; --- END FUNCTION CALL
0034   042A E7            pop d
0035   042B FD 43         mov [d], b
0036   042D             ; bin_out = alloc(16384); 
0037   042D 3B 81 4F      mov d, _bin_out ; $bin_out
0038   0430 DA            push d
0039   0431                            
0040   0431             ; --- START FUNCTION CALL
0041   0431                            
0042   0431 FD 2E 00 40   mov32 cb, $00004000
0042   0435 00 00 
0043   0437 FD AB         swp b
0044   0439 D8            push b
0045   043A 07 49 3E      call alloc
0046   043D 51 02 00      add sp, 2
0047   0440             ; --- END FUNCTION CALL
0048   0440 E7            pop d
0049   0441 FD 43         mov [d], b
0050   0443             ; opcode_table = alloc(12310); 
0051   0443 3B 85 4F      mov d, _opcode_table ; $opcode_table
0052   0446 DA            push d
0053   0447                            
0054   0447             ; --- START FUNCTION CALL
0055   0447                            
0056   0447 FD 2E 16 30   mov32 cb, $00003016
0056   044B 00 00 
0057   044D FD AB         swp b
0058   044F D8            push b
0059   0450 07 49 3E      call alloc
0060   0453 51 02 00      add sp, 2
0061   0456             ; --- END FUNCTION CALL
0062   0456 E7            pop d
0063   0457 FD 43         mov [d], b
0064   0459             ; loadfile(0x0000, program); 
0065   0459                            
0066   0459             ; --- START FUNCTION CALL
0067   0459                            
0068   0459 3B 7F 4F      mov d, _program ; $program
0069   045C 2A            mov b, [d]
0070   045D 38 00 00      mov c, 0
0071   0460 FD AB         swp b
0072   0462 D8            push b
0073   0463                            
0074   0463 FD 2E 00 00   mov32 cb, $00000000
0074   0467 00 00 
0075   0469 FD AB         swp b
0076   046B D8            push b
0077   046C 07 70 3D      call loadfile
0078   046F 51 04 00      add sp, 4
0079   0472             ; --- END FUNCTION CALL
0080   0472             ; loadfile("./config.d/op_tbl", opcode_table); 
0081   0472                            
0082   0472             ; --- START FUNCTION CALL
0083   0472                            
0084   0472 3B 85 4F      mov d, _opcode_table ; $opcode_table
0085   0475 2A            mov b, [d]
0086   0476 38 00 00      mov c, 0
0087   0479 FD AB         swp b
0088   047B D8            push b
0089   047C                            
0090   047C 26 D8 4F      mov b, _s11 ; "./config.d/op_tbl"
0091   047F FD AB         swp b
0092   0481 D8            push b
0093   0482 07 70 3D      call loadfile
0094   0485 51 04 00      add sp, 4
0095   0488             ; --- END FUNCTION CALL
0096   0488             ; p = program; 
0097   0488 FA FF FF      lea d, [bp + -1] ; $p
0098   048B DA            push d
0099   048C                            
0100   048C 3B 7F 4F      mov d, _program ; $program
0101   048F 2A            mov b, [d]
0102   0490 38 00 00      mov c, 0
0103   0493 E7            pop d
0104   0494 FD 43         mov [d], b
0105   0496             ; while(*p) p++; 
0106   0496             _while1_cond:
0107   0496                            
0108   0496 FA FF FF      lea d, [bp + -1] ; $p
0109   0499 2A            mov b, [d]
0110   049A 38 00 00      mov c, 0
0111   049D 74            mov d, b
0112   049E 32            mov bl, [d]
0113   049F A7 00         mov bh, 0
0114   04A1 38 00 00      mov c, 0
0115   04A4 C0 00 00      cmp b, 0
0116   04A7 C6 BD 04      je _while1_exit
0117   04AA             _while1_block:
0118   04AA             ; p++; 
0119   04AA                            
0120   04AA FA FF FF      lea d, [bp + -1] ; $p
0121   04AD 2A            mov b, [d]
0122   04AE 38 00 00      mov c, 0
0123   04B1 FD 77         inc b
0124   04B3 FA FF FF      lea d, [bp + -1] ; $p
0125   04B6 FD 43         mov [d], b
0126   04B8 FD 7D         dec b
0127   04BA 0A 96 04      jmp _while1_cond
0128   04BD             _while1_exit:
0129   04BD             ; while(is_space(*p)) p--; 
0130   04BD             _while2_cond:
0131   04BD                            
0132   04BD             ; --- START FUNCTION CALL
0133   04BD                            
0134   04BD FA FF FF      lea d, [bp + -1] ; $p
0135   04C0 2A            mov b, [d]
0136   04C1 38 00 00      mov c, 0
0137   04C4 74            mov d, b
0138   04C5 32            mov bl, [d]
0139   04C6 A7 00         mov bh, 0
0140   04C8 38 00 00      mov c, 0
0141   04CB DD            push bl
0142   04CC 07 7A 3E      call is_space
0143   04CF 51 01 00      add sp, 1
0144   04D2             ; --- END FUNCTION CALL
0145   04D2 C0 00 00      cmp b, 0
0146   04D5 C6 EB 04      je _while2_exit
0147   04D8             _while2_block:
0148   04D8             ; p--; 
0149   04D8                            
0150   04D8 FA FF FF      lea d, [bp + -1] ; $p
0151   04DB 2A            mov b, [d]
0152   04DC 38 00 00      mov c, 0
0153   04DF FD 7D         dec b
0154   04E1 FA FF FF      lea d, [bp + -1] ; $p
0155   04E4 FD 43         mov [d], b
0156   04E6 FD 77         inc b
0157   04E8 0A BD 04      jmp _while2_cond
0158   04EB             _while2_exit:
0159   04EB             ; p++; 
0160   04EB                            
0161   04EB FA FF FF      lea d, [bp + -1] ; $p
0162   04EE 2A            mov b, [d]
0163   04EF 38 00 00      mov c, 0
0164   04F2 FD 77         inc b
0165   04F4 FA FF FF      lea d, [bp + -1] ; $p
0166   04F7 FD 43         mov [d], b
0167   04F9 FD 7D         dec b
0168   04FB             ; *p = '\0'; 
0169   04FB FA FF FF      lea d, [bp + -1] ; $p
0170   04FE 2A            mov b, [d]
0171   04FF 38 00 00      mov c, 0
0172   0502 D8            push b
0173   0503                            
0174   0503 FD 2E 00 00   mov32 cb, $00000000
0174   0507 00 00 
0175   0509 E7            pop d
0176   050A FD 3E         mov [d], bl
0177   050C             ; prog = program; 
0178   050C 3B 3B 4E      mov d, _prog ; $prog
0179   050F DA            push d
0180   0510                            
0181   0510 3B 7F 4F      mov d, _program ; $program
0182   0513 2A            mov b, [d]
0183   0514 38 00 00      mov c, 0
0184   0517 E7            pop d
0185   0518 FD 43         mov [d], b
0186   051A             ; bin_p = bin_out + _org; 
0187   051A 3B 83 4F      mov d, _bin_p ; $bin_p
0188   051D DA            push d
0189   051E                            
0190   051E 3B 81 4F      mov d, _bin_out ; $bin_out
0191   0521 2A            mov b, [d]
0192   0522 38 00 00      mov c, 0
0193   0525             ; --- START TERMS
0194   0525 D7            push a
0195   0526 11            mov a, b
0196   0527 3B 32 4E      mov d, __org ; $_org
0197   052A 2A            mov b, [d]
0198   052B 38 00 00      mov c, 0
0199   052E 56            add b, a
0200   052F E4            pop a
0201   0530             ; --- END TERMS
0202   0530 E7            pop d
0203   0531 FD 43         mov [d], b
0204   0533             ; pc = _org; 
0205   0533 3B 34 4E      mov d, _pc ; $pc
0206   0536 DA            push d
0207   0537                            
0208   0537 3B 32 4E      mov d, __org ; $_org
0209   053A 2A            mov b, [d]
0210   053B 38 00 00      mov c, 0
0211   053E E7            pop d
0212   053F FD 43         mov [d], b
0213   0541             ; prog_size = 0; 
0214   0541 3B 9D 4F      mov d, _prog_size ; $prog_size
0215   0544 DA            push d
0216   0545                            
0217   0545 FD 2E 00 00   mov32 cb, $00000000
0217   0549 00 00 
0218   054B E7            pop d
0219   054C FD 43         mov [d], b
0220   054E             ; label_directive_scan(); 
0221   054E                            
0222   054E             ; --- START FUNCTION CALL
0223   054E 07 20 0A      call label_directive_scan
0224   0551             ; prog_size = 0; 
0225   0551 3B 9D 4F      mov d, _prog_size ; $prog_size
0226   0554 DA            push d
0227   0555                            
0228   0555 FD 2E 00 00   mov32 cb, $00000000
0228   0559 00 00 
0229   055B E7            pop d
0230   055C FD 43         mov [d], b
0231   055E             ; parse_text(); 
0232   055E                            
0233   055E             ; --- START FUNCTION CALL
0234   055E 07 1C 1C      call parse_text
0235   0561             ; parse_data(); 
0236   0561                            
0237   0561             ; --- START FUNCTION CALL
0238   0561 07 69 05      call parse_data
0239   0564             ; display_output(); 
0240   0564                            
0241   0564             ; --- START FUNCTION CALL
0242   0564 07 5E 1E      call display_output
0243   0567 05 0B         syscall sys_terminate_proc
0244   0569             
0245   0569             parse_data:
0246   0569 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0247   056C             ; print("Parsing DATA section..."); 
0248   056C                            
0249   056C             ; --- START FUNCTION CALL
0250   056C                            
0251   056C 26 EA 4F      mov b, _s12 ; "Parsing DATA section..."
0252   056F FD AB         swp b
0253   0571 D8            push b
0254   0572 07 30 3E      call print
0255   0575 51 02 00      add sp, 2
0256   0578             ; --- END FUNCTION CALL
0257   0578             ; for(;;){ 
0258   0578             _for3_init:
0259   0578             _for3_cond:
0260   0578             _for3_block:
0261   0578             ; get(); 
0262   0578                            
0263   0578             ; --- START FUNCTION CALL
0264   0578 07 60 2B      call get
0265   057B             ; if(toktype == END) error("Data segment not found."); 
0266   057B             _if4_cond:
0267   057B                            
0268   057B 3B 39 4E      mov d, _toktype ; $toktype
0269   057E 2A            mov b, [d]
0270   057F 38 00 00      mov c, 0
0271   0582             ; --- START RELATIONAL
0272   0582 D7            push a
0273   0583 11            mov a, b
0274   0584 FD 2E 07 00   mov32 cb, $7 ; enum element: END
0274   0588 00 00 
0275   058A B0            cmp a, b
0276   058B FD 71         seq ; ==
0277   058D E4            pop a
0278   058E             ; --- END RELATIONAL
0279   058E C0 00 00      cmp b, 0
0280   0591 C6 A3 05      je _if4_exit
0281   0594             _if4_TRUE:
0282   0594             ; error("Data segment not found."); 
0283   0594                            
0284   0594             ; --- START FUNCTION CALL
0285   0594                            
0286   0594 26 02 50      mov b, _s13 ; "Data segment not found."
0287   0597 FD AB         swp b
0288   0599 D8            push b
0289   059A 07 5A 39      call error
0290   059D 51 02 00      add sp, 2
0291   05A0             ; --- END FUNCTION CALL
0292   05A0 0A A3 05      jmp _if4_exit
0293   05A3             _if4_exit:
0294   05A3             ; if(tok == DOT){ 
0295   05A3             _if5_cond:
0296   05A3                            
0297   05A3 3B 37 4E      mov d, _tok ; $tok
0298   05A6 2A            mov b, [d]
0299   05A7 38 00 00      mov c, 0
0300   05AA             ; --- START RELATIONAL
0301   05AA D7            push a
0302   05AB 11            mov a, b
0303   05AC FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
0303   05B0 00 00 
0304   05B2 B0            cmp a, b
0305   05B3 FD 71         seq ; ==
0306   05B5 E4            pop a
0307   05B6             ; --- END RELATIONAL
0308   05B6 C0 00 00      cmp b, 0
0309   05B9 C6 E1 05      je _if5_exit
0310   05BC             _if5_TRUE:
0311   05BC             ; get(); 
0312   05BC                            
0313   05BC             ; --- START FUNCTION CALL
0314   05BC 07 60 2B      call get
0315   05BF             ; if(tok == DATA) break; 
0316   05BF             _if6_cond:
0317   05BF                            
0318   05BF 3B 37 4E      mov d, _tok ; $tok
0319   05C2 2A            mov b, [d]
0320   05C3 38 00 00      mov c, 0
0321   05C6             ; --- START RELATIONAL
0322   05C6 D7            push a
0323   05C7 11            mov a, b
0324   05C8 FD 2E 03 00   mov32 cb, $3 ; enum element: DATA
0324   05CC 00 00 
0325   05CE B0            cmp a, b
0326   05CF FD 71         seq ; ==
0327   05D1 E4            pop a
0328   05D2             ; --- END RELATIONAL
0329   05D2 C0 00 00      cmp b, 0
0330   05D5 C6 DE 05      je _if6_exit
0331   05D8             _if6_TRUE:
0332   05D8             ; break; 
0333   05D8 0A E4 05      jmp _for3_exit ; for break
0334   05DB 0A DE 05      jmp _if6_exit
0335   05DE             _if6_exit:
0336   05DE 0A E1 05      jmp _if5_exit
0337   05E1             _if5_exit:
0338   05E1             _for3_update:
0339   05E1 0A 78 05      jmp _for3_cond
0340   05E4             _for3_exit:
0341   05E4             ; for(;;){ 
0342   05E4             _for7_init:
0343   05E4             _for7_cond:
0344   05E4             _for7_block:
0345   05E4             ; get(); 
0346   05E4                            
0347   05E4             ; --- START FUNCTION CALL
0348   05E4 07 60 2B      call get
0349   05E7             ; if(tok == SEGMENT_END) break; 
0350   05E7             _if8_cond:
0351   05E7                            
0352   05E7 3B 37 4E      mov d, _tok ; $tok
0353   05EA 2A            mov b, [d]
0354   05EB 38 00 00      mov c, 0
0355   05EE             ; --- START RELATIONAL
0356   05EE D7            push a
0357   05EF 11            mov a, b
0358   05F0 FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
0358   05F4 00 00 
0359   05F6 B0            cmp a, b
0360   05F7 FD 71         seq ; ==
0361   05F9 E4            pop a
0362   05FA             ; --- END RELATIONAL
0363   05FA C0 00 00      cmp b, 0
0364   05FD C6 06 06      je _if8_exit
0365   0600             _if8_TRUE:
0366   0600             ; break; 
0367   0600 0A 27 08      jmp _for7_exit ; for break
0368   0603 0A 06 06      jmp _if8_exit
0369   0606             _if8_exit:
0370   0606             ; if(tok == DB){ 
0371   0606             _if9_cond:
0372   0606                             
0373   0606 3B 37 4E      mov d, _tok ; $tok
0374   0609 2A            mov b, [d]
0375   060A 38 00 00      mov c, 0
0376   060D             ; --- START RELATIONAL
0377   060D D7            push a
0378   060E 11            mov a, b
0379   060F FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0379   0613 00 00 
0380   0615 B0            cmp a, b
0381   0616 FD 71         seq ; ==
0382   0618 E4            pop a
0383   0619             ; --- END RELATIONAL
0384   0619 C0 00 00      cmp b, 0
0385   061C C6 09 07      je _if9_else
0386   061F             _if9_TRUE:
0387   061F             ; print(".db: "); 
0388   061F                             
0389   061F             ; --- START FUNCTION CALL
0390   061F                             
0391   061F 26 1A 50      mov b, _s14 ; ".db: "
0392   0622 FD AB         swp b
0393   0624 D8            push b
0394   0625 07 30 3E      call print
0395   0628 51 02 00      add sp, 2
0396   062B             ; --- END FUNCTION CALL
0397   062B             ; for(;;){ 
0398   062B             _for10_init:
0399   062B             _for10_cond:
0400   062B             _for10_block:
0401   062B             ; get(); 
0402   062B                             
0403   062B             ; --- START FUNCTION CALL
0404   062B 07 60 2B      call get
0405   062E             ; if(toktype == CHAR_CONST){ 
0406   062E             _if11_cond:
0407   062E                             
0408   062E 3B 39 4E      mov d, _toktype ; $toktype
0409   0631 2A            mov b, [d]
0410   0632 38 00 00      mov c, 0
0411   0635             ; --- START RELATIONAL
0412   0635 D7            push a
0413   0636 11            mov a, b
0414   0637 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0414   063B 00 00 
0415   063D B0            cmp a, b
0416   063E FD 71         seq ; ==
0417   0640 E4            pop a
0418   0641             ; --- END RELATIONAL
0419   0641 C0 00 00      cmp b, 0
0420   0644 C6 87 06      je _if11_else
0421   0647             _if11_TRUE:
0422   0647             ; emit_byte(string_const[0], 0); 
0423   0647                             
0424   0647             ; --- START FUNCTION CALL
0425   0647                             
0426   0647 FD 2E 00 00   mov32 cb, $00000000
0426   064B 00 00 
0427   064D DD            push bl
0428   064E                             
0429   064E 3B 7D 4E      mov d, _string_const_data ; $string_const
0430   0651 D7            push a
0431   0652 DA            push d
0432   0653                             
0433   0653 FD 2E 00 00   mov32 cb, $00000000
0433   0657 00 00 
0434   0659 E7            pop d
0435   065A 5A            add d, b
0436   065B E4            pop a
0437   065C 32            mov bl, [d]
0438   065D A7 00         mov bh, 0
0439   065F 38 00 00      mov c, 0
0440   0662 DD            push bl
0441   0663 07 65 27      call emit_byte
0442   0666 51 02 00      add sp, 2
0443   0669             ; --- END FUNCTION CALL
0444   0669             ; printx8(string_const[0]); 
0445   0669                             
0446   0669             ; --- START FUNCTION CALL
0447   0669                             
0448   0669 3B 7D 4E      mov d, _string_const_data ; $string_const
0449   066C D7            push a
0450   066D DA            push d
0451   066E                             
0452   066E FD 2E 00 00   mov32 cb, $00000000
0452   0672 00 00 
0453   0674 E7            pop d
0454   0675 5A            add d, b
0455   0676 E4            pop a
0456   0677 32            mov bl, [d]
0457   0678 A7 00         mov bh, 0
0458   067A 38 00 00      mov c, 0
0459   067D DD            push bl
0460   067E 07 B8 4C      call printx8
0461   0681 51 01 00      add sp, 1
0462   0684             ; --- END FUNCTION CALL
0463   0684 0A C6 06      jmp _if11_exit
0464   0687             _if11_else:
0465   0687             ; if(toktype == INTEGER_CONST){ 
0466   0687             _if12_cond:
0467   0687                             
0468   0687 3B 39 4E      mov d, _toktype ; $toktype
0469   068A 2A            mov b, [d]
0470   068B 38 00 00      mov c, 0
0471   068E             ; --- START RELATIONAL
0472   068E D7            push a
0473   068F 11            mov a, b
0474   0690 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0474   0694 00 00 
0475   0696 B0            cmp a, b
0476   0697 FD 71         seq ; ==
0477   0699 E4            pop a
0478   069A             ; --- END RELATIONAL
0479   069A C0 00 00      cmp b, 0
0480   069D C6 C6 06      je _if12_exit
0481   06A0             _if12_TRUE:
0482   06A0             ; emit_byte(int_const, 0); 
0483   06A0                             
0484   06A0             ; --- START FUNCTION CALL
0485   06A0                             
0486   06A0 FD 2E 00 00   mov32 cb, $00000000
0486   06A4 00 00 
0487   06A6 DD            push bl
0488   06A7                             
0489   06A7 3B 7D 4F      mov d, _int_const ; $int_const
0490   06AA 2A            mov b, [d]
0491   06AB 38 00 00      mov c, 0
0492   06AE DD            push bl
0493   06AF 07 65 27      call emit_byte
0494   06B2 51 02 00      add sp, 2
0495   06B5             ; --- END FUNCTION CALL
0496   06B5             ; printx8(int_const); 
0497   06B5                             
0498   06B5             ; --- START FUNCTION CALL
0499   06B5                             
0500   06B5 3B 7D 4F      mov d, _int_const ; $int_const
0501   06B8 2A            mov b, [d]
0502   06B9 38 00 00      mov c, 0
0503   06BC DD            push bl
0504   06BD 07 B8 4C      call printx8
0505   06C0 51 01 00      add sp, 1
0506   06C3             ; --- END FUNCTION CALL
0507   06C3 0A C6 06      jmp _if12_exit
0508   06C6             _if12_exit:
0509   06C6             _if11_exit:
0510   06C6             ; get(); 
0511   06C6                             
0512   06C6             ; --- START FUNCTION CALL
0513   06C6 07 60 2B      call get
0514   06C9             ; if(tok != COMMA){ 
0515   06C9             _if13_cond:
0516   06C9                             
0517   06C9 3B 37 4E      mov d, _tok ; $tok
0518   06CC 2A            mov b, [d]
0519   06CD 38 00 00      mov c, 0
0520   06D0             ; --- START RELATIONAL
0521   06D0 D7            push a
0522   06D1 11            mov a, b
0523   06D2 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0523   06D6 00 00 
0524   06D8 B0            cmp a, b
0525   06D9 FD 72         sneq ; !=
0526   06DB E4            pop a
0527   06DC             ; --- END RELATIONAL
0528   06DC C0 00 00      cmp b, 0
0529   06DF C6 EB 06      je _if13_exit
0530   06E2             _if13_TRUE:
0531   06E2             ; back(); 
0532   06E2                             
0533   06E2             ; --- START FUNCTION CALL
0534   06E2 07 D3 27      call back
0535   06E5             ; break; 
0536   06E5 0A FA 06      jmp _for10_exit ; for break
0537   06E8 0A EB 06      jmp _if13_exit
0538   06EB             _if13_exit:
0539   06EB             ; print(", "); 
0540   06EB                             
0541   06EB             ; --- START FUNCTION CALL
0542   06EB                             
0543   06EB 26 20 50      mov b, _s15 ; ", "
0544   06EE FD AB         swp b
0545   06F0 D8            push b
0546   06F1 07 30 3E      call print
0547   06F4 51 02 00      add sp, 2
0548   06F7             ; --- END FUNCTION CALL
0549   06F7             _for10_update:
0550   06F7 0A 2B 06      jmp _for10_cond
0551   06FA             _for10_exit:
0552   06FA             ; print("\n"); 
0553   06FA                             
0554   06FA             ; --- START FUNCTION CALL
0555   06FA                             
0556   06FA 26 D6 4F      mov b, _s10 ; "\n"
0557   06FD FD AB         swp b
0558   06FF D8            push b
0559   0700 07 30 3E      call print
0560   0703 51 02 00      add sp, 2
0561   0706             ; --- END FUNCTION CALL
0562   0706 0A 24 08      jmp _if9_exit
0563   0709             _if9_else:
0564   0709             ; if(tok == DW){ 
0565   0709             _if14_cond:
0566   0709                             
0567   0709 3B 37 4E      mov d, _tok ; $tok
0568   070C 2A            mov b, [d]
0569   070D 38 00 00      mov c, 0
0570   0710             ; --- START RELATIONAL
0571   0710 D7            push a
0572   0711 11            mov a, b
0573   0712 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
0573   0716 00 00 
0574   0718 B0            cmp a, b
0575   0719 FD 71         seq ; ==
0576   071B E4            pop a
0577   071C             ; --- END RELATIONAL
0578   071C C0 00 00      cmp b, 0
0579   071F C6 24 08      je _if14_exit
0580   0722             _if14_TRUE:
0581   0722             ; print(".dw: "); 
0582   0722                             
0583   0722             ; --- START FUNCTION CALL
0584   0722                             
0585   0722 26 23 50      mov b, _s16 ; ".dw: "
0586   0725 FD AB         swp b
0587   0727 D8            push b
0588   0728 07 30 3E      call print
0589   072B 51 02 00      add sp, 2
0590   072E             ; --- END FUNCTION CALL
0591   072E             ; for(;;){ 
0592   072E             _for15_init:
0593   072E             _for15_cond:
0594   072E             _for15_block:
0595   072E             ; get(); 
0596   072E                             
0597   072E             ; --- START FUNCTION CALL
0598   072E 07 60 2B      call get
0599   0731             ; if(toktype == CHAR_CONST){ 
0600   0731             _if16_cond:
0601   0731                             
0602   0731 3B 39 4E      mov d, _toktype ; $toktype
0603   0734 2A            mov b, [d]
0604   0735 38 00 00      mov c, 0
0605   0738             ; --- START RELATIONAL
0606   0738 D7            push a
0607   0739 11            mov a, b
0608   073A FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0608   073E 00 00 
0609   0740 B0            cmp a, b
0610   0741 FD 71         seq ; ==
0611   0743 E4            pop a
0612   0744             ; --- END RELATIONAL
0613   0744 C0 00 00      cmp b, 0
0614   0747 C6 9E 07      je _if16_else
0615   074A             _if16_TRUE:
0616   074A             ; emit_byte(string_const[0], 0); 
0617   074A                             
0618   074A             ; --- START FUNCTION CALL
0619   074A                             
0620   074A FD 2E 00 00   mov32 cb, $00000000
0620   074E 00 00 
0621   0750 DD            push bl
0622   0751                             
0623   0751 3B 7D 4E      mov d, _string_const_data ; $string_const
0624   0754 D7            push a
0625   0755 DA            push d
0626   0756                             
0627   0756 FD 2E 00 00   mov32 cb, $00000000
0627   075A 00 00 
0628   075C E7            pop d
0629   075D 5A            add d, b
0630   075E E4            pop a
0631   075F 32            mov bl, [d]
0632   0760 A7 00         mov bh, 0
0633   0762 38 00 00      mov c, 0
0634   0765 DD            push bl
0635   0766 07 65 27      call emit_byte
0636   0769 51 02 00      add sp, 2
0637   076C             ; --- END FUNCTION CALL
0638   076C             ; emit_byte(0, 0); 
0639   076C                             
0640   076C             ; --- START FUNCTION CALL
0641   076C                             
0642   076C FD 2E 00 00   mov32 cb, $00000000
0642   0770 00 00 
0643   0772 DD            push bl
0644   0773                             
0645   0773 FD 2E 00 00   mov32 cb, $00000000
0645   0777 00 00 
0646   0779 DD            push bl
0647   077A 07 65 27      call emit_byte
0648   077D 51 02 00      add sp, 2
0649   0780             ; --- END FUNCTION CALL
0650   0780             ; printx8(string_const[0]); 
0651   0780                             
0652   0780             ; --- START FUNCTION CALL
0653   0780                             
0654   0780 3B 7D 4E      mov d, _string_const_data ; $string_const
0655   0783 D7            push a
0656   0784 DA            push d
0657   0785                             
0658   0785 FD 2E 00 00   mov32 cb, $00000000
0658   0789 00 00 
0659   078B E7            pop d
0660   078C 5A            add d, b
0661   078D E4            pop a
0662   078E 32            mov bl, [d]
0663   078F A7 00         mov bh, 0
0664   0791 38 00 00      mov c, 0
0665   0794 DD            push bl
0666   0795 07 B8 4C      call printx8
0667   0798 51 01 00      add sp, 1
0668   079B             ; --- END FUNCTION CALL
0669   079B 0A E1 07      jmp _if16_exit
0670   079E             _if16_else:
0671   079E             ; if(toktype == INTEGER_CONST){ 
0672   079E             _if17_cond:
0673   079E                             
0674   079E 3B 39 4E      mov d, _toktype ; $toktype
0675   07A1 2A            mov b, [d]
0676   07A2 38 00 00      mov c, 0
0677   07A5             ; --- START RELATIONAL
0678   07A5 D7            push a
0679   07A6 11            mov a, b
0680   07A7 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0680   07AB 00 00 
0681   07AD B0            cmp a, b
0682   07AE FD 71         seq ; ==
0683   07B0 E4            pop a
0684   07B1             ; --- END RELATIONAL
0685   07B1 C0 00 00      cmp b, 0
0686   07B4 C6 E1 07      je _if17_exit
0687   07B7             _if17_TRUE:
0688   07B7             ; emit_word(int_const, 0); 
0689   07B7                             
0690   07B7             ; --- START FUNCTION CALL
0691   07B7                             
0692   07B7 FD 2E 00 00   mov32 cb, $00000000
0692   07BB 00 00 
0693   07BD DD            push bl
0694   07BE                             
0695   07BE 3B 7D 4F      mov d, _int_const ; $int_const
0696   07C1 2A            mov b, [d]
0697   07C2 38 00 00      mov c, 0
0698   07C5 FD AB         swp b
0699   07C7 D8            push b
0700   07C8 07 9D 27      call emit_word
0701   07CB 51 03 00      add sp, 3
0702   07CE             ; --- END FUNCTION CALL
0703   07CE             ; printx16(int_const); 
0704   07CE                             
0705   07CE             ; --- START FUNCTION CALL
0706   07CE                             
0707   07CE 3B 7D 4F      mov d, _int_const ; $int_const
0708   07D1 2A            mov b, [d]
0709   07D2 38 00 00      mov c, 0
0710   07D5 FD AB         swp b
0711   07D7 D8            push b
0712   07D8 07 02 4B      call printx16
0713   07DB 51 02 00      add sp, 2
0714   07DE             ; --- END FUNCTION CALL
0715   07DE 0A E1 07      jmp _if17_exit
0716   07E1             _if17_exit:
0717   07E1             _if16_exit:
0718   07E1             ; get(); 
0719   07E1                             
0720   07E1             ; --- START FUNCTION CALL
0721   07E1 07 60 2B      call get
0722   07E4             ; if(tok != COMMA){ 
0723   07E4             _if18_cond:
0724   07E4                             
0725   07E4 3B 37 4E      mov d, _tok ; $tok
0726   07E7 2A            mov b, [d]
0727   07E8 38 00 00      mov c, 0
0728   07EB             ; --- START RELATIONAL
0729   07EB D7            push a
0730   07EC 11            mov a, b
0731   07ED FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0731   07F1 00 00 
0732   07F3 B0            cmp a, b
0733   07F4 FD 72         sneq ; !=
0734   07F6 E4            pop a
0735   07F7             ; --- END RELATIONAL
0736   07F7 C0 00 00      cmp b, 0
0737   07FA C6 06 08      je _if18_exit
0738   07FD             _if18_TRUE:
0739   07FD             ; back(); 
0740   07FD                             
0741   07FD             ; --- START FUNCTION CALL
0742   07FD 07 D3 27      call back
0743   0800             ; break; 
0744   0800 0A 15 08      jmp _for15_exit ; for break
0745   0803 0A 06 08      jmp _if18_exit
0746   0806             _if18_exit:
0747   0806             ; print(", "); 
0748   0806                             
0749   0806             ; --- START FUNCTION CALL
0750   0806                             
0751   0806 26 20 50      mov b, _s15 ; ", "
0752   0809 FD AB         swp b
0753   080B D8            push b
0754   080C 07 30 3E      call print
0755   080F 51 02 00      add sp, 2
0756   0812             ; --- END FUNCTION CALL
0757   0812             _for15_update:
0758   0812 0A 2E 07      jmp _for15_cond
0759   0815             _for15_exit:
0760   0815             ; print("\n"); 
0761   0815                             
0762   0815             ; --- START FUNCTION CALL
0763   0815                             
0764   0815 26 D6 4F      mov b, _s10 ; "\n"
0765   0818 FD AB         swp b
0766   081A D8            push b
0767   081B 07 30 3E      call print
0768   081E 51 02 00      add sp, 2
0769   0821             ; --- END FUNCTION CALL
0770   0821 0A 24 08      jmp _if14_exit
0771   0824             _if14_exit:
0772   0824             _if9_exit:
0773   0824             _for7_update:
0774   0824 0A E4 05      jmp _for7_cond
0775   0827             _for7_exit:
0776   0827             ; print("Done.\n"); 
0777   0827                             
0778   0827             ; --- START FUNCTION CALL
0779   0827                             
0780   0827 26 29 50      mov b, _s17 ; "Done.\n"
0781   082A FD AB         swp b
0782   082C D8            push b
0783   082D 07 30 3E      call print
0784   0830 51 02 00      add sp, 2
0785   0833             ; --- END FUNCTION CALL
0786   0833 F9            leave
0787   0834 09            ret
0788   0835             
0789   0835             parse_directive:
0790   0835 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0791   0838             ; get(); 
0792   0838                             
0793   0838             ; --- START FUNCTION CALL
0794   0838 07 60 2B      call get
0795   083B             ; if(tok == ORG){ 
0796   083B             _if19_cond:
0797   083B                             
0798   083B 3B 37 4E      mov d, _tok ; $tok
0799   083E 2A            mov b, [d]
0800   083F 38 00 00      mov c, 0
0801   0842             ; --- START RELATIONAL
0802   0842 D7            push a
0803   0843 11            mov a, b
0804   0844 FD 2E 01 00   mov32 cb, $1 ; enum element: ORG
0804   0848 00 00 
0805   084A B0            cmp a, b
0806   084B FD 71         seq ; ==
0807   084D E4            pop a
0808   084E             ; --- END RELATIONAL
0809   084E C0 00 00      cmp b, 0
0810   0851 C6 90 08      je _if19_else
0811   0854             _if19_TRUE:
0812   0854             ; get(); 
0813   0854                             
0814   0854             ; --- START FUNCTION CALL
0815   0854 07 60 2B      call get
0816   0857             ; if(toktype != INTEGER_CONST) error("Integer constant expected in .org directive."); 
0817   0857             _if20_cond:
0818   0857                             
0819   0857 3B 39 4E      mov d, _toktype ; $toktype
0820   085A 2A            mov b, [d]
0821   085B 38 00 00      mov c, 0
0822   085E             ; --- START RELATIONAL
0823   085E D7            push a
0824   085F 11            mov a, b
0825   0860 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0825   0864 00 00 
0826   0866 B0            cmp a, b
0827   0867 FD 72         sneq ; !=
0828   0869 E4            pop a
0829   086A             ; --- END RELATIONAL
0830   086A C0 00 00      cmp b, 0
0831   086D C6 7F 08      je _if20_exit
0832   0870             _if20_TRUE:
0833   0870             ; error("Integer constant expected in .org directive."); 
0834   0870                             
0835   0870             ; --- START FUNCTION CALL
0836   0870                             
0837   0870 26 30 50      mov b, _s18 ; "Integer constant expected in .org directive."
0838   0873 FD AB         swp b
0839   0875 D8            push b
0840   0876 07 5A 39      call error
0841   0879 51 02 00      add sp, 2
0842   087C             ; --- END FUNCTION CALL
0843   087C 0A 7F 08      jmp _if20_exit
0844   087F             _if20_exit:
0845   087F             ; _org = int_const; 
0846   087F 3B 32 4E      mov d, __org ; $_org
0847   0882 DA            push d
0848   0883                             
0849   0883 3B 7D 4F      mov d, _int_const ; $int_const
0850   0886 2A            mov b, [d]
0851   0887 38 00 00      mov c, 0
0852   088A E7            pop d
0853   088B FD 43         mov [d], b
0854   088D 0A 1E 0A      jmp _if19_exit
0855   0890             _if19_else:
0856   0890             ; if(tok == DB){ 
0857   0890             _if21_cond:
0858   0890                             
0859   0890 3B 37 4E      mov d, _tok ; $tok
0860   0893 2A            mov b, [d]
0861   0894 38 00 00      mov c, 0
0862   0897             ; --- START RELATIONAL
0863   0897 D7            push a
0864   0898 11            mov a, b
0865   0899 FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0865   089D 00 00 
0866   089F B0            cmp a, b
0867   08A0 FD 71         seq ; ==
0868   08A2 E4            pop a
0869   08A3             ; --- END RELATIONAL
0870   08A3 C0 00 00      cmp b, 0
0871   08A6 C6 4C 09      je _if21_else
0872   08A9             _if21_TRUE:
0873   08A9             ; for(;;){ 
0874   08A9             _for22_init:
0875   08A9             _for22_cond:
0876   08A9             _for22_block:
0877   08A9             ; get(); 
0878   08A9                             
0879   08A9             ; --- START FUNCTION CALL
0880   08A9 07 60 2B      call get
0881   08AC             ; if(toktype == CHAR_CONST){ 
0882   08AC             _if23_cond:
0883   08AC                             
0884   08AC 3B 39 4E      mov d, _toktype ; $toktype
0885   08AF 2A            mov b, [d]
0886   08B0 38 00 00      mov c, 0
0887   08B3             ; --- START RELATIONAL
0888   08B3 D7            push a
0889   08B4 11            mov a, b
0890   08B5 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0890   08B9 00 00 
0891   08BB B0            cmp a, b
0892   08BC FD 71         seq ; ==
0893   08BE E4            pop a
0894   08BF             ; --- END RELATIONAL
0895   08BF C0 00 00      cmp b, 0
0896   08C2 C6 ED 08      je _if23_else
0897   08C5             _if23_TRUE:
0898   08C5             ; emit_byte(string_const[0], emit_override); 
0899   08C5                             
0900   08C5             ; --- START FUNCTION CALL
0901   08C5                             
0902   08C5 FA 05 00      lea d, [bp + 5] ; $emit_override
0903   08C8 32            mov bl, [d]
0904   08C9 A7 00         mov bh, 0
0905   08CB 38 00 00      mov c, 0
0906   08CE DD            push bl
0907   08CF                             
0908   08CF 3B 7D 4E      mov d, _string_const_data ; $string_const
0909   08D2 D7            push a
0910   08D3 DA            push d
0911   08D4                             
0912   08D4 FD 2E 00 00   mov32 cb, $00000000
0912   08D8 00 00 
0913   08DA E7            pop d
0914   08DB 5A            add d, b
0915   08DC E4            pop a
0916   08DD 32            mov bl, [d]
0917   08DE A7 00         mov bh, 0
0918   08E0 38 00 00      mov c, 0
0919   08E3 DD            push bl
0920   08E4 07 65 27      call emit_byte
0921   08E7 51 02 00      add sp, 2
0922   08EA             ; --- END FUNCTION CALL
0923   08EA 0A 21 09      jmp _if23_exit
0924   08ED             _if23_else:
0925   08ED             ; if(toktype == INTEGER_CONST){ 
0926   08ED             _if24_cond:
0927   08ED                             
0928   08ED 3B 39 4E      mov d, _toktype ; $toktype
0929   08F0 2A            mov b, [d]
0930   08F1 38 00 00      mov c, 0
0931   08F4             ; --- START RELATIONAL
0932   08F4 D7            push a
0933   08F5 11            mov a, b
0934   08F6 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0934   08FA 00 00 
0935   08FC B0            cmp a, b
0936   08FD FD 71         seq ; ==
0937   08FF E4            pop a
0938   0900             ; --- END RELATIONAL
0939   0900 C0 00 00      cmp b, 0
0940   0903 C6 21 09      je _if24_exit
0941   0906             _if24_TRUE:
0942   0906             ; emit_byte(int_const, emit_override); 
0943   0906                             
0944   0906             ; --- START FUNCTION CALL
0945   0906                             
0946   0906 FA 05 00      lea d, [bp + 5] ; $emit_override
0947   0909 32            mov bl, [d]
0948   090A A7 00         mov bh, 0
0949   090C 38 00 00      mov c, 0
0950   090F DD            push bl
0951   0910                             
0952   0910 3B 7D 4F      mov d, _int_const ; $int_const
0953   0913 2A            mov b, [d]
0954   0914 38 00 00      mov c, 0
0955   0917 DD            push bl
0956   0918 07 65 27      call emit_byte
0957   091B 51 02 00      add sp, 2
0958   091E             ; --- END FUNCTION CALL
0959   091E 0A 21 09      jmp _if24_exit
0960   0921             _if24_exit:
0961   0921             _if23_exit:
0962   0921             ; get(); 
0963   0921                             
0964   0921             ; --- START FUNCTION CALL
0965   0921 07 60 2B      call get
0966   0924             ; if(tok != COMMA){ 
0967   0924             _if25_cond:
0968   0924                             
0969   0924 3B 37 4E      mov d, _tok ; $tok
0970   0927 2A            mov b, [d]
0971   0928 38 00 00      mov c, 0
0972   092B             ; --- START RELATIONAL
0973   092B D7            push a
0974   092C 11            mov a, b
0975   092D FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0975   0931 00 00 
0976   0933 B0            cmp a, b
0977   0934 FD 72         sneq ; !=
0978   0936 E4            pop a
0979   0937             ; --- END RELATIONAL
0980   0937 C0 00 00      cmp b, 0
0981   093A C6 46 09      je _if25_exit
0982   093D             _if25_TRUE:
0983   093D             ; back(); 
0984   093D                             
0985   093D             ; --- START FUNCTION CALL
0986   093D 07 D3 27      call back
0987   0940             ; break; 
0988   0940 0A 49 09      jmp _for22_exit ; for break
0989   0943 0A 46 09      jmp _if25_exit
0990   0946             _if25_exit:
0991   0946             _for22_update:
0992   0946 0A A9 08      jmp _for22_cond
0993   0949             _for22_exit:
0994   0949 0A 1E 0A      jmp _if21_exit
0995   094C             _if21_else:
0996   094C             ; if(tok == DW){ 
0997   094C             _if26_cond:
0998   094C                             
0999   094C 3B 37 4E      mov d, _tok ; $tok
1000   094F 2A            mov b, [d]
1001   0950 38 00 00      mov c, 0
1002   0953             ; --- START RELATIONAL
1003   0953 D7            push a
1004   0954 11            mov a, b
1005   0955 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
1005   0959 00 00 
1006   095B B0            cmp a, b
1007   095C FD 71         seq ; ==
1008   095E E4            pop a
1009   095F             ; --- END RELATIONAL
1010   095F C0 00 00      cmp b, 0
1011   0962 C6 1E 0A      je _if26_exit
1012   0965             _if26_TRUE:
1013   0965             ; for(;;){ 
1014   0965             _for27_init:
1015   0965             _for27_cond:
1016   0965             _for27_block:
1017   0965             ; get(); 
1018   0965                             
1019   0965             ; --- START FUNCTION CALL
1020   0965 07 60 2B      call get
1021   0968             ; if(toktype == CHAR_CONST){ 
1022   0968             _if28_cond:
1023   0968                             
1024   0968 3B 39 4E      mov d, _toktype ; $toktype
1025   096B 2A            mov b, [d]
1026   096C 38 00 00      mov c, 0
1027   096F             ; --- START RELATIONAL
1028   096F D7            push a
1029   0970 11            mov a, b
1030   0971 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
1030   0975 00 00 
1031   0977 B0            cmp a, b
1032   0978 FD 71         seq ; ==
1033   097A E4            pop a
1034   097B             ; --- END RELATIONAL
1035   097B C0 00 00      cmp b, 0
1036   097E C6 C0 09      je _if28_else
1037   0981             _if28_TRUE:
1038   0981             ; emit_byte(string_const[0], emit_override); 
1039   0981                             
1040   0981             ; --- START FUNCTION CALL
1041   0981                             
1042   0981 FA 05 00      lea d, [bp + 5] ; $emit_override
1043   0984 32            mov bl, [d]
1044   0985 A7 00         mov bh, 0
1045   0987 38 00 00      mov c, 0
1046   098A DD            push bl
1047   098B                             
1048   098B 3B 7D 4E      mov d, _string_const_data ; $string_const
1049   098E D7            push a
1050   098F DA            push d
1051   0990                             
1052   0990 FD 2E 00 00   mov32 cb, $00000000
1052   0994 00 00 
1053   0996 E7            pop d
1054   0997 5A            add d, b
1055   0998 E4            pop a
1056   0999 32            mov bl, [d]
1057   099A A7 00         mov bh, 0
1058   099C 38 00 00      mov c, 0
1059   099F DD            push bl
1060   09A0 07 65 27      call emit_byte
1061   09A3 51 02 00      add sp, 2
1062   09A6             ; --- END FUNCTION CALL
1063   09A6             ; emit_byte(0, emit_override); 
1064   09A6                             
1065   09A6             ; --- START FUNCTION CALL
1066   09A6                             
1067   09A6 FA 05 00      lea d, [bp + 5] ; $emit_override
1068   09A9 32            mov bl, [d]
1069   09AA A7 00         mov bh, 0
1070   09AC 38 00 00      mov c, 0
1071   09AF DD            push bl
1072   09B0                             
1073   09B0 FD 2E 00 00   mov32 cb, $00000000
1073   09B4 00 00 
1074   09B6 DD            push bl
1075   09B7 07 65 27      call emit_byte
1076   09BA 51 02 00      add sp, 2
1077   09BD             ; --- END FUNCTION CALL
1078   09BD 0A F3 09      jmp _if28_exit
1079   09C0             _if28_else:
1080   09C0             ; if(toktype == INTEGER_CONST){ 
1081   09C0             _if29_cond:
1082   09C0                             
1083   09C0 3B 39 4E      mov d, _toktype ; $toktype
1084   09C3 2A            mov b, [d]
1085   09C4 38 00 00      mov c, 0
1086   09C7             ; --- START RELATIONAL
1087   09C7 D7            push a
1088   09C8 11            mov a, b
1089   09C9 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1089   09CD 00 00 
1090   09CF B0            cmp a, b
1091   09D0 FD 71         seq ; ==
1092   09D2 E4            pop a
1093   09D3             ; --- END RELATIONAL
1094   09D3 C0 00 00      cmp b, 0
1095   09D6 C6 F3 09      je _if29_exit
1096   09D9             _if29_TRUE:
1097   09D9             ; emit_word(int_const, 0); 
1098   09D9                             
1099   09D9             ; --- START FUNCTION CALL
1100   09D9                             
1101   09D9 FD 2E 00 00   mov32 cb, $00000000
1101   09DD 00 00 
1102   09DF DD            push bl
1103   09E0                             
1104   09E0 3B 7D 4F      mov d, _int_const ; $int_const
1105   09E3 2A            mov b, [d]
1106   09E4 38 00 00      mov c, 0
1107   09E7 FD AB         swp b
1108   09E9 D8            push b
1109   09EA 07 9D 27      call emit_word
1110   09ED 51 03 00      add sp, 3
1111   09F0             ; --- END FUNCTION CALL
1112   09F0 0A F3 09      jmp _if29_exit
1113   09F3             _if29_exit:
1114   09F3             _if28_exit:
1115   09F3             ; get(); 
1116   09F3                             
1117   09F3             ; --- START FUNCTION CALL
1118   09F3 07 60 2B      call get
1119   09F6             ; if(tok != COMMA){ 
1120   09F6             _if30_cond:
1121   09F6                             
1122   09F6 3B 37 4E      mov d, _tok ; $tok
1123   09F9 2A            mov b, [d]
1124   09FA 38 00 00      mov c, 0
1125   09FD             ; --- START RELATIONAL
1126   09FD D7            push a
1127   09FE 11            mov a, b
1128   09FF FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
1128   0A03 00 00 
1129   0A05 B0            cmp a, b
1130   0A06 FD 72         sneq ; !=
1131   0A08 E4            pop a
1132   0A09             ; --- END RELATIONAL
1133   0A09 C0 00 00      cmp b, 0
1134   0A0C C6 18 0A      je _if30_exit
1135   0A0F             _if30_TRUE:
1136   0A0F             ; back(); 
1137   0A0F                             
1138   0A0F             ; --- START FUNCTION CALL
1139   0A0F 07 D3 27      call back
1140   0A12             ; break; 
1141   0A12 0A 1B 0A      jmp _for27_exit ; for break
1142   0A15 0A 18 0A      jmp _if30_exit
1143   0A18             _if30_exit:
1144   0A18             _for27_update:
1145   0A18 0A 65 09      jmp _for27_cond
1146   0A1B             _for27_exit:
1147   0A1B 0A 1E 0A      jmp _if26_exit
1148   0A1E             _if26_exit:
1149   0A1E             _if21_exit:
1150   0A1E             _if19_exit:
1151   0A1E F9            leave
1152   0A1F 09            ret
1153   0A20             
1154   0A20             label_directive_scan:
1155   0A20 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1156   0A23             ; char *temp_prog; 
1157   0A23 52 02 00      sub sp, 2
1158   0A26             ; int i; 
1159   0A26 52 02 00      sub sp, 2
1160   0A29             ; prog = program; 
1161   0A29 3B 3B 4E      mov d, _prog ; $prog
1162   0A2C DA            push d
1163   0A2D                             
1164   0A2D 3B 7F 4F      mov d, _program ; $program
1165   0A30 2A            mov b, [d]
1166   0A31 38 00 00      mov c, 0
1167   0A34 E7            pop d
1168   0A35 FD 43         mov [d], b
1169   0A37             ; bin_p = bin_out + _org; 
1170   0A37 3B 83 4F      mov d, _bin_p ; $bin_p
1171   0A3A DA            push d
1172   0A3B                             
1173   0A3B 3B 81 4F      mov d, _bin_out ; $bin_out
1174   0A3E 2A            mov b, [d]
1175   0A3F 38 00 00      mov c, 0
1176   0A42             ; --- START TERMS
1177   0A42 D7            push a
1178   0A43 11            mov a, b
1179   0A44 3B 32 4E      mov d, __org ; $_org
1180   0A47 2A            mov b, [d]
1181   0A48 38 00 00      mov c, 0
1182   0A4B 56            add b, a
1183   0A4C E4            pop a
1184   0A4D             ; --- END TERMS
1185   0A4D E7            pop d
1186   0A4E FD 43         mov [d], b
1187   0A50             ; pc = _org; 
1188   0A50 3B 34 4E      mov d, _pc ; $pc
1189   0A53 DA            push d
1190   0A54                             
1191   0A54 3B 32 4E      mov d, __org ; $_org
1192   0A57 2A            mov b, [d]
1193   0A58 38 00 00      mov c, 0
1194   0A5B E7            pop d
1195   0A5C FD 43         mov [d], b
1196   0A5E             ; print("Parsing labels and directives...\n"); 
1197   0A5E                             
1198   0A5E             ; --- START FUNCTION CALL
1199   0A5E                             
1200   0A5E 26 5D 50      mov b, _s19 ; "Parsing labels and directives...\n"
1201   0A61 FD AB         swp b
1202   0A63 D8            push b
1203   0A64 07 30 3E      call print
1204   0A67 51 02 00      add sp, 2
1205   0A6A             ; --- END FUNCTION CALL
1206   0A6A             ; for(;;){ 
1207   0A6A             _for31_init:
1208   0A6A             _for31_cond:
1209   0A6A             _for31_block:
1210   0A6A             ; get(); back(); 
1211   0A6A                             
1212   0A6A             ; --- START FUNCTION CALL
1213   0A6A 07 60 2B      call get
1214   0A6D             ; back(); 
1215   0A6D                             
1216   0A6D             ; --- START FUNCTION CALL
1217   0A6D 07 D3 27      call back
1218   0A70             ; temp_prog = prog; 
1219   0A70 FA FF FF      lea d, [bp + -1] ; $temp_prog
1220   0A73 DA            push d
1221   0A74                             
1222   0A74 3B 3B 4E      mov d, _prog ; $prog
1223   0A77 2A            mov b, [d]
1224   0A78 38 00 00      mov c, 0
1225   0A7B E7            pop d
1226   0A7C FD 43         mov [d], b
1227   0A7E             ; get(); 
1228   0A7E                             
1229   0A7E             ; --- START FUNCTION CALL
1230   0A7E 07 60 2B      call get
1231   0A81             ; if(toktype == END) break; 
1232   0A81             _if32_cond:
1233   0A81                             
1234   0A81 3B 39 4E      mov d, _toktype ; $toktype
1235   0A84 2A            mov b, [d]
1236   0A85 38 00 00      mov c, 0
1237   0A88             ; --- START RELATIONAL
1238   0A88 D7            push a
1239   0A89 11            mov a, b
1240   0A8A FD 2E 07 00   mov32 cb, $7 ; enum element: END
1240   0A8E 00 00 
1241   0A90 B0            cmp a, b
1242   0A91 FD 71         seq ; ==
1243   0A93 E4            pop a
1244   0A94             ; --- END RELATIONAL
1245   0A94 C0 00 00      cmp b, 0
1246   0A97 C6 A0 0A      je _if32_exit
1247   0A9A             _if32_TRUE:
1248   0A9A             ; break; 
1249   0A9A 0A 6A 0B      jmp _for31_exit ; for break
1250   0A9D 0A A0 0A      jmp _if32_exit
1251   0AA0             _if32_exit:
1252   0AA0             ; if(tok == DOT){ 
1253   0AA0             _if33_cond:
1254   0AA0                             
1255   0AA0 3B 37 4E      mov d, _tok ; $tok
1256   0AA3 2A            mov b, [d]
1257   0AA4 38 00 00      mov c, 0
1258   0AA7             ; --- START RELATIONAL
1259   0AA7 D7            push a
1260   0AA8 11            mov a, b
1261   0AA9 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
1261   0AAD 00 00 
1262   0AAF B0            cmp a, b
1263   0AB0 FD 71         seq ; ==
1264   0AB2 E4            pop a
1265   0AB3             ; --- END RELATIONAL
1266   0AB3 C0 00 00      cmp b, 0
1267   0AB6 C6 E8 0A      je _if33_else
1268   0AB9             _if33_TRUE:
1269   0AB9             ; get(); 
1270   0AB9                             
1271   0AB9             ; --- START FUNCTION CALL
1272   0AB9 07 60 2B      call get
1273   0ABC             ; if(is_directive(token)){ 
1274   0ABC             _if34_cond:
1275   0ABC                             
1276   0ABC             ; --- START FUNCTION CALL
1277   0ABC                             
1278   0ABC 3B 3D 4E      mov d, _token_data ; $token
1279   0ABF 2D            mov b, d
1280   0AC0 38 00 00      mov c, 0
1281   0AC3 FD AB         swp b
1282   0AC5 D8            push b
1283   0AC6 07 79 21      call is_directive
1284   0AC9 51 02 00      add sp, 2
1285   0ACC             ; --- END FUNCTION CALL
1286   0ACC C0 00 00      cmp b, 0
1287   0ACF C6 E5 0A      je _if34_exit
1288   0AD2             _if34_TRUE:
1289   0AD2             ; back(); 
1290   0AD2                             
1291   0AD2             ; --- START FUNCTION CALL
1292   0AD2 07 D3 27      call back
1293   0AD5             ; parse_directive(1); 
1294   0AD5                             
1295   0AD5             ; --- START FUNCTION CALL
1296   0AD5                             
1297   0AD5 FD 2E 01 00   mov32 cb, $00000001
1297   0AD9 00 00 
1298   0ADB DD            push bl
1299   0ADC 07 35 08      call parse_directive
1300   0ADF 51 01 00      add sp, 1
1301   0AE2             ; --- END FUNCTION CALL
1302   0AE2 0A E5 0A      jmp _if34_exit
1303   0AE5             _if34_exit:
1304   0AE5 0A 67 0B      jmp _if33_exit
1305   0AE8             _if33_else:
1306   0AE8             ; if(toktype == IDENTIFIER){ 
1307   0AE8             _if35_cond:
1308   0AE8                             
1309   0AE8 3B 39 4E      mov d, _toktype ; $toktype
1310   0AEB 2A            mov b, [d]
1311   0AEC 38 00 00      mov c, 0
1312   0AEF             ; --- START RELATIONAL
1313   0AEF D7            push a
1314   0AF0 11            mov a, b
1315   0AF1 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1315   0AF5 00 00 
1316   0AF7 B0            cmp a, b
1317   0AF8 FD 71         seq ; ==
1318   0AFA E4            pop a
1319   0AFB             ; --- END RELATIONAL
1320   0AFB C0 00 00      cmp b, 0
1321   0AFE C6 67 0B      je _if35_exit
1322   0B01             _if35_TRUE:
1323   0B01             ; get(); 
1324   0B01                             
1325   0B01             ; --- START FUNCTION CALL
1326   0B01 07 60 2B      call get
1327   0B04             ; if(tok == COLON){ 
1328   0B04             _if36_cond:
1329   0B04                             
1330   0B04 3B 37 4E      mov d, _tok ; $tok
1331   0B07 2A            mov b, [d]
1332   0B08 38 00 00      mov c, 0
1333   0B0B             ; --- START RELATIONAL
1334   0B0B D7            push a
1335   0B0C 11            mov a, b
1336   0B0D FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
1336   0B11 00 00 
1337   0B13 B0            cmp a, b
1338   0B14 FD 71         seq ; ==
1339   0B16 E4            pop a
1340   0B17             ; --- END RELATIONAL
1341   0B17 C0 00 00      cmp b, 0
1342   0B1A C6 3D 0B      je _if36_else
1343   0B1D             _if36_TRUE:
1344   0B1D             ; prog = temp_prog; 
1345   0B1D 3B 3B 4E      mov d, _prog ; $prog
1346   0B20 DA            push d
1347   0B21                             
1348   0B21 FA FF FF      lea d, [bp + -1] ; $temp_prog
1349   0B24 2A            mov b, [d]
1350   0B25 38 00 00      mov c, 0
1351   0B28 E7            pop d
1352   0B29 FD 43         mov [d], b
1353   0B2B             ; parse_label(); 
1354   0B2B                             
1355   0B2B             ; --- START FUNCTION CALL
1356   0B2B 07 AF 21      call parse_label
1357   0B2E             ; print("."); 
1358   0B2E                             
1359   0B2E             ; --- START FUNCTION CALL
1360   0B2E                             
1361   0B2E 26 7F 50      mov b, _s20 ; "."
1362   0B31 FD AB         swp b
1363   0B33 D8            push b
1364   0B34 07 30 3E      call print
1365   0B37 51 02 00      add sp, 2
1366   0B3A             ; --- END FUNCTION CALL
1367   0B3A 0A 64 0B      jmp _if36_exit
1368   0B3D             _if36_else:
1369   0B3D             ; prog = temp_prog; 
1370   0B3D 3B 3B 4E      mov d, _prog ; $prog
1371   0B40 DA            push d
1372   0B41                             
1373   0B41 FA FF FF      lea d, [bp + -1] ; $temp_prog
1374   0B44 2A            mov b, [d]
1375   0B45 38 00 00      mov c, 0
1376   0B48 E7            pop d
1377   0B49 FD 43         mov [d], b
1378   0B4B             ; parse_instr(1);       
1379   0B4B                             
1380   0B4B             ; --- START FUNCTION CALL
1381   0B4B                             
1382   0B4B FD 2E 01 00   mov32 cb, $00000001
1382   0B4F 00 00 
1383   0B51 DD            push bl
1384   0B52 07 70 13      call parse_instr
1385   0B55 51 01 00      add sp, 1
1386   0B58             ; --- END FUNCTION CALL
1387   0B58             ; print("."); 
1388   0B58                             
1389   0B58             ; --- START FUNCTION CALL
1390   0B58                             
1391   0B58 26 7F 50      mov b, _s20 ; "."
1392   0B5B FD AB         swp b
1393   0B5D D8            push b
1394   0B5E 07 30 3E      call print
1395   0B61 51 02 00      add sp, 2
1396   0B64             ; --- END FUNCTION CALL
1397   0B64             _if36_exit:
1398   0B64 0A 67 0B      jmp _if35_exit
1399   0B67             _if35_exit:
1400   0B67             _if33_exit:
1401   0B67             _for31_update:
1402   0B67 0A 6A 0A      jmp _for31_cond
1403   0B6A             _for31_exit:
1404   0B6A             ; print("\nDone.\n"); 
1405   0B6A                             
1406   0B6A             ; --- START FUNCTION CALL
1407   0B6A                             
1408   0B6A 26 81 50      mov b, _s21 ; "\nDone.\n"
1409   0B6D FD AB         swp b
1410   0B6F D8            push b
1411   0B70 07 30 3E      call print
1412   0B73 51 02 00      add sp, 2
1413   0B76             ; --- END FUNCTION CALL
1414   0B76             ; printf("Org: %s\n", _org); 
1415   0B76                             
1416   0B76             ; --- START FUNCTION CALL
1417   0B76                             
1418   0B76 3B 32 4E      mov d, __org ; $_org
1419   0B79 2A            mov b, [d]
1420   0B7A 38 00 00      mov c, 0
1421   0B7D FD AB         swp b
1422   0B7F D8            push b
1423   0B80                             
1424   0B80 26 89 50      mov b, _s22 ; "Org: %s\n"
1425   0B83 FD AB         swp b
1426   0B85 D8            push b
1427   0B86 07 60 42      call printf
1428   0B89 51 04 00      add sp, 4
1429   0B8C             ; --- END FUNCTION CALL
1430   0B8C             ; print("\nLabels list:\n"); 
1431   0B8C                             
1432   0B8C             ; --- START FUNCTION CALL
1433   0B8C                             
1434   0B8C 26 92 50      mov b, _s23 ; "\nLabels list:\n"
1435   0B8F FD AB         swp b
1436   0B91 D8            push b
1437   0B92 07 30 3E      call print
1438   0B95 51 02 00      add sp, 2
1439   0B98             ; --- END FUNCTION CALL
1440   0B98             ; for(i = 0; label_table[i].name[0]; i++){ 
1441   0B98             _for37_init:
1442   0B98 FA FD FF      lea d, [bp + -3] ; $i
1443   0B9B DA            push d
1444   0B9C                             
1445   0B9C FD 2E 00 00   mov32 cb, $00000000
1445   0BA0 00 00 
1446   0BA2 E7            pop d
1447   0BA3 FD 43         mov [d], b
1448   0BA5             _for37_cond:
1449   0BA5                             
1450   0BA5 3B 12 4D      mov d, _label_table_data ; $label_table
1451   0BA8 D7            push a
1452   0BA9 DA            push d
1453   0BAA                             
1454   0BAA FA FD FF      lea d, [bp + -3] ; $i
1455   0BAD 2A            mov b, [d]
1456   0BAE 38 00 00      mov c, 0
1457   0BB1 E7            pop d
1458   0BB2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1459   0BB6 E4            pop a
1460   0BB7 58 00 00      add d, 0
1461   0BBA D7            push a
1462   0BBB DA            push d
1463   0BBC                             
1464   0BBC FD 2E 00 00   mov32 cb, $00000000
1464   0BC0 00 00 
1465   0BC2 E7            pop d
1466   0BC3 5A            add d, b
1467   0BC4 E4            pop a
1468   0BC5 32            mov bl, [d]
1469   0BC6 A7 00         mov bh, 0
1470   0BC8 38 00 00      mov c, 0
1471   0BCB C0 00 00      cmp b, 0
1472   0BCE C6 28 0C      je _for37_exit
1473   0BD1             _for37_block:
1474   0BD1             ; printf("%s: %x\n", label_table[i].name, label_table[i].address); 
1475   0BD1                             
1476   0BD1             ; --- START FUNCTION CALL
1477   0BD1                             
1478   0BD1 3B 12 4D      mov d, _label_table_data ; $label_table
1479   0BD4 D7            push a
1480   0BD5 DA            push d
1481   0BD6                             
1482   0BD6 FA FD FF      lea d, [bp + -3] ; $i
1483   0BD9 2A            mov b, [d]
1484   0BDA 38 00 00      mov c, 0
1485   0BDD E7            pop d
1486   0BDE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1487   0BE2 E4            pop a
1488   0BE3 58 10 00      add d, 16
1489   0BE6 2A            mov b, [d]
1490   0BE7 38 00 00      mov c, 0
1491   0BEA FD AB         swp b
1492   0BEC D8            push b
1493   0BED                             
1494   0BED 3B 12 4D      mov d, _label_table_data ; $label_table
1495   0BF0 D7            push a
1496   0BF1 DA            push d
1497   0BF2                             
1498   0BF2 FA FD FF      lea d, [bp + -3] ; $i
1499   0BF5 2A            mov b, [d]
1500   0BF6 38 00 00      mov c, 0
1501   0BF9 E7            pop d
1502   0BFA FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1503   0BFE E4            pop a
1504   0BFF 58 00 00      add d, 0
1505   0C02 2D            mov b, d
1506   0C03 38 00 00      mov c, 0
1507   0C06 FD AB         swp b
1508   0C08 D8            push b
1509   0C09                             
1510   0C09 26 A1 50      mov b, _s24 ; "%s: %x\n"
1511   0C0C FD AB         swp b
1512   0C0E D8            push b
1513   0C0F 07 60 42      call printf
1514   0C12 51 06 00      add sp, 6
1515   0C15             ; --- END FUNCTION CALL
1516   0C15             _for37_update:
1517   0C15                             
1518   0C15 FA FD FF      lea d, [bp + -3] ; $i
1519   0C18 2A            mov b, [d]
1520   0C19 38 00 00      mov c, 0
1521   0C1C 11            mov a, b
1522   0C1D FD 77         inc b
1523   0C1F FA FD FF      lea d, [bp + -3] ; $i
1524   0C22 FD 43         mov [d], b
1525   0C24 27            mov b, a
1526   0C25 0A A5 0B      jmp _for37_cond
1527   0C28             _for37_exit:
1528   0C28             ; print("\n"); 
1529   0C28                             
1530   0C28             ; --- START FUNCTION CALL
1531   0C28                             
1532   0C28 26 D6 4F      mov b, _s10 ; "\n"
1533   0C2B FD AB         swp b
1534   0C2D D8            push b
1535   0C2E 07 30 3E      call print
1536   0C31 51 02 00      add sp, 2
1537   0C34             ; --- END FUNCTION CALL
1538   0C34 F9            leave
1539   0C35 09            ret
1540   0C36             
1541   0C36             label_parse_instr:
1542   0C36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1543   0C39             ; char opcode[32]; 
1544   0C39 52 20 00      sub sp, 32
1545   0C3C             ; char code_line[64]; 
1546   0C3C 52 40 00      sub sp, 64
1547   0C3F             ; struct t_opcode op; 
1548   0C3F 52 1A 00      sub sp, 26
1549   0C42             ; int num_operands, num_operandsexp; 
1550   0C42 52 02 00      sub sp, 2
1551   0C45 52 02 00      sub sp, 2
1552   0C48             ; int i, j; 
1553   0C48 52 02 00      sub sp, 2
1554   0C4B 52 02 00      sub sp, 2
1555   0C4E             ; char operand_types[3]; // operand types and locations 
1556   0C4E 52 03 00      sub sp, 3
1557   0C51             ; int old_pc; 
1558   0C51 52 02 00      sub sp, 2
1559   0C54             ; char has_operands; 
1560   0C54 52 01 00      sub sp, 1
1561   0C57             ; old_pc = pc; 
1562   0C57 FA 7A FF      lea d, [bp + -134] ; $old_pc
1563   0C5A DA            push d
1564   0C5B                             
1565   0C5B 3B 34 4E      mov d, _pc ; $pc
1566   0C5E 2A            mov b, [d]
1567   0C5F 38 00 00      mov c, 0
1568   0C62 E7            pop d
1569   0C63 FD 43         mov [d], b
1570   0C65             ; get_line(); 
1571   0C65                             
1572   0C65             ; --- START FUNCTION CALL
1573   0C65 07 43 2A      call get_line
1574   0C68             ; push_prog(); 
1575   0C68                             
1576   0C68             ; --- START FUNCTION CALL
1577   0C68 07 A0 39      call push_prog
1578   0C6B             ; strcpy(code_line, string_const); 
1579   0C6B                             
1580   0C6B             ; --- START FUNCTION CALL
1581   0C6B                             
1582   0C6B 3B 7D 4E      mov d, _string_const_data ; $string_const
1583   0C6E 2D            mov b, d
1584   0C6F 38 00 00      mov c, 0
1585   0C72 FD AB         swp b
1586   0C74 D8            push b
1587   0C75                             
1588   0C75 FA A1 FF      lea d, [bp + -95] ; $code_line
1589   0C78 2D            mov b, d
1590   0C79 38 00 00      mov c, 0
1591   0C7C FD AB         swp b
1592   0C7E D8            push b
1593   0C7F 07 5B 4B      call strcpy
1594   0C82 51 04 00      add sp, 4
1595   0C85             ; --- END FUNCTION CALL
1596   0C85             ; has_operands = 0; 
1597   0C85 FA 79 FF      lea d, [bp + -135] ; $has_operands
1598   0C88 DA            push d
1599   0C89                             
1600   0C89 FD 2E 00 00   mov32 cb, $00000000
1600   0C8D 00 00 
1601   0C8F E7            pop d
1602   0C90 FD 3E         mov [d], bl
1603   0C92             ; prog = code_line; 
1604   0C92 3B 3B 4E      mov d, _prog ; $prog
1605   0C95 DA            push d
1606   0C96                             
1607   0C96 FA A1 FF      lea d, [bp + -95] ; $code_line
1608   0C99 2D            mov b, d
1609   0C9A 38 00 00      mov c, 0
1610   0C9D E7            pop d
1611   0C9E FD 43         mov [d], b
1612   0CA0             ; get(); // get main opcode 
1613   0CA0                             
1614   0CA0             ; --- START FUNCTION CALL
1615   0CA0 07 60 2B      call get
1616   0CA3             ; for(;;){ 
1617   0CA3             _for38_init:
1618   0CA3             _for38_cond:
1619   0CA3             _for38_block:
1620   0CA3             ; get(); 
1621   0CA3                             
1622   0CA3             ; --- START FUNCTION CALL
1623   0CA3 07 60 2B      call get
1624   0CA6             ; if(toktype == END) break; 
1625   0CA6             _if39_cond:
1626   0CA6                             
1627   0CA6 3B 39 4E      mov d, _toktype ; $toktype
1628   0CA9 2A            mov b, [d]
1629   0CAA 38 00 00      mov c, 0
1630   0CAD             ; --- START RELATIONAL
1631   0CAD D7            push a
1632   0CAE 11            mov a, b
1633   0CAF FD 2E 07 00   mov32 cb, $7 ; enum element: END
1633   0CB3 00 00 
1634   0CB5 B0            cmp a, b
1635   0CB6 FD 71         seq ; ==
1636   0CB8 E4            pop a
1637   0CB9             ; --- END RELATIONAL
1638   0CB9 C0 00 00      cmp b, 0
1639   0CBC C6 C5 0C      je _if39_exit
1640   0CBF             _if39_TRUE:
1641   0CBF             ; break; 
1642   0CBF 0A 21 0D      jmp _for38_exit ; for break
1643   0CC2 0A C5 0C      jmp _if39_exit
1644   0CC5             _if39_exit:
1645   0CC5             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1646   0CC5             _if40_cond:
1647   0CC5                             
1648   0CC5 3B 39 4E      mov d, _toktype ; $toktype
1649   0CC8 2A            mov b, [d]
1650   0CC9 38 00 00      mov c, 0
1651   0CCC             ; --- START RELATIONAL
1652   0CCC D7            push a
1653   0CCD 11            mov a, b
1654   0CCE FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1654   0CD2 00 00 
1655   0CD4 B0            cmp a, b
1656   0CD5 FD 71         seq ; ==
1657   0CD7 E4            pop a
1658   0CD8             ; --- END RELATIONAL
1659   0CD8             ; --- START LOGICAL OR
1660   0CD8 D7            push a
1661   0CD9 11            mov a, b
1662   0CDA 3B 39 4E      mov d, _toktype ; $toktype
1663   0CDD 2A            mov b, [d]
1664   0CDE 38 00 00      mov c, 0
1665   0CE1             ; --- START RELATIONAL
1666   0CE1 D7            push a
1667   0CE2 11            mov a, b
1668   0CE3 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1668   0CE7 00 00 
1669   0CE9 B0            cmp a, b
1670   0CEA FD 71         seq ; ==
1671   0CEC E4            pop a
1672   0CED             ; --- END RELATIONAL
1673   0CED             ; --- START LOGICAL AND
1674   0CED D7            push a
1675   0CEE 11            mov a, b
1676   0CEF             ; --- START FUNCTION CALL
1677   0CEF                             
1678   0CEF 3B 3D 4E      mov d, _token_data ; $token
1679   0CF2 2D            mov b, d
1680   0CF3 38 00 00      mov c, 0
1681   0CF6 FD AB         swp b
1682   0CF8 D8            push b
1683   0CF9 07 04 1F      call is_reserved
1684   0CFC 51 02 00      add sp, 2
1685   0CFF             ; --- END FUNCTION CALL
1686   0CFF FD A7         sand a, b
1687   0D01 E4            pop a
1688   0D02             ; --- END LOGICAL AND
1689   0D02 FD A8         sor a, b ; ||
1690   0D04 E4            pop a
1691   0D05             ; --- END LOGICAL OR
1692   0D05 C0 00 00      cmp b, 0
1693   0D08 C6 1E 0D      je _if40_exit
1694   0D0B             _if40_TRUE:
1695   0D0B             ; has_operands = 1; 
1696   0D0B FA 79 FF      lea d, [bp + -135] ; $has_operands
1697   0D0E DA            push d
1698   0D0F                             
1699   0D0F FD 2E 01 00   mov32 cb, $00000001
1699   0D13 00 00 
1700   0D15 E7            pop d
1701   0D16 FD 3E         mov [d], bl
1702   0D18             ; break; 
1703   0D18 0A 21 0D      jmp _for38_exit ; for break
1704   0D1B 0A 1E 0D      jmp _if40_exit
1705   0D1E             _if40_exit:
1706   0D1E             _for38_update:
1707   0D1E 0A A3 0C      jmp _for38_cond
1708   0D21             _for38_exit:
1709   0D21             ; opcode[0] = '\0'; 
1710   0D21 FA E1 FF      lea d, [bp + -31] ; $opcode
1711   0D24 D7            push a
1712   0D25 DA            push d
1713   0D26                             
1714   0D26 FD 2E 00 00   mov32 cb, $00000000
1714   0D2A 00 00 
1715   0D2C E7            pop d
1716   0D2D 5A            add d, b
1717   0D2E E4            pop a
1718   0D2F DA            push d
1719   0D30                             
1720   0D30 FD 2E 00 00   mov32 cb, $00000000
1720   0D34 00 00 
1721   0D36 E7            pop d
1722   0D37 FD 3E         mov [d], bl
1723   0D39             ; prog = code_line; 
1724   0D39 3B 3B 4E      mov d, _prog ; $prog
1725   0D3C DA            push d
1726   0D3D                             
1727   0D3D FA A1 FF      lea d, [bp + -95] ; $code_line
1728   0D40 2D            mov b, d
1729   0D41 38 00 00      mov c, 0
1730   0D44 E7            pop d
1731   0D45 FD 43         mov [d], b
1732   0D47             ; if(!has_operands){ 
1733   0D47             _if41_cond:
1734   0D47                             
1735   0D47 FA 79 FF      lea d, [bp + -135] ; $has_operands
1736   0D4A 32            mov bl, [d]
1737   0D4B A7 00         mov bh, 0
1738   0D4D 38 00 00      mov c, 0
1739   0D50 C0 00 00      cmp b, 0
1740   0D53 C6 67 0E      je _if41_else
1741   0D56             _if41_TRUE:
1742   0D56             ; get(); 
1743   0D56                             
1744   0D56             ; --- START FUNCTION CALL
1745   0D56 07 60 2B      call get
1746   0D59             ; strcpy(opcode, token); 
1747   0D59                             
1748   0D59             ; --- START FUNCTION CALL
1749   0D59                             
1750   0D59 3B 3D 4E      mov d, _token_data ; $token
1751   0D5C 2D            mov b, d
1752   0D5D 38 00 00      mov c, 0
1753   0D60 FD AB         swp b
1754   0D62 D8            push b
1755   0D63                             
1756   0D63 FA E1 FF      lea d, [bp + -31] ; $opcode
1757   0D66 2D            mov b, d
1758   0D67 38 00 00      mov c, 0
1759   0D6A FD AB         swp b
1760   0D6C D8            push b
1761   0D6D 07 5B 4B      call strcpy
1762   0D70 51 04 00      add sp, 4
1763   0D73             ; --- END FUNCTION CALL
1764   0D73             ; get();  
1765   0D73                             
1766   0D73             ; --- START FUNCTION CALL
1767   0D73 07 60 2B      call get
1768   0D76             ; if(toktype == END){ 
1769   0D76             _if42_cond:
1770   0D76                             
1771   0D76 3B 39 4E      mov d, _toktype ; $toktype
1772   0D79 2A            mov b, [d]
1773   0D7A 38 00 00      mov c, 0
1774   0D7D             ; --- START RELATIONAL
1775   0D7D D7            push a
1776   0D7E 11            mov a, b
1777   0D7F FD 2E 07 00   mov32 cb, $7 ; enum element: END
1777   0D83 00 00 
1778   0D85 B0            cmp a, b
1779   0D86 FD 71         seq ; ==
1780   0D88 E4            pop a
1781   0D89             ; --- END RELATIONAL
1782   0D89 C0 00 00      cmp b, 0
1783   0D8C C6 A8 0D      je _if42_else
1784   0D8F             _if42_TRUE:
1785   0D8F             ; strcat(opcode, " ."); 
1786   0D8F                             
1787   0D8F             ; --- START FUNCTION CALL
1788   0D8F                             
1789   0D8F 26 A9 50      mov b, _s25 ; " ."
1790   0D92 FD AB         swp b
1791   0D94 D8            push b
1792   0D95                             
1793   0D95 FA E1 FF      lea d, [bp + -31] ; $opcode
1794   0D98 2D            mov b, d
1795   0D99 38 00 00      mov c, 0
1796   0D9C FD AB         swp b
1797   0D9E D8            push b
1798   0D9F 07 D5 4B      call strcat
1799   0DA2 51 04 00      add sp, 4
1800   0DA5             ; --- END FUNCTION CALL
1801   0DA5 0A 17 0E      jmp _if42_exit
1802   0DA8             _if42_else:
1803   0DA8             ; strcat(opcode, " "); 
1804   0DA8                             
1805   0DA8             ; --- START FUNCTION CALL
1806   0DA8                             
1807   0DA8 26 AC 50      mov b, _s26 ; " "
1808   0DAB FD AB         swp b
1809   0DAD D8            push b
1810   0DAE                             
1811   0DAE FA E1 FF      lea d, [bp + -31] ; $opcode
1812   0DB1 2D            mov b, d
1813   0DB2 38 00 00      mov c, 0
1814   0DB5 FD AB         swp b
1815   0DB7 D8            push b
1816   0DB8 07 D5 4B      call strcat
1817   0DBB 51 04 00      add sp, 4
1818   0DBE             ; --- END FUNCTION CALL
1819   0DBE             ; strcat(opcode, token); 
1820   0DBE                             
1821   0DBE             ; --- START FUNCTION CALL
1822   0DBE                             
1823   0DBE 3B 3D 4E      mov d, _token_data ; $token
1824   0DC1 2D            mov b, d
1825   0DC2 38 00 00      mov c, 0
1826   0DC5 FD AB         swp b
1827   0DC7 D8            push b
1828   0DC8                             
1829   0DC8 FA E1 FF      lea d, [bp + -31] ; $opcode
1830   0DCB 2D            mov b, d
1831   0DCC 38 00 00      mov c, 0
1832   0DCF FD AB         swp b
1833   0DD1 D8            push b
1834   0DD2 07 D5 4B      call strcat
1835   0DD5 51 04 00      add sp, 4
1836   0DD8             ; --- END FUNCTION CALL
1837   0DD8             ; for(;;){ 
1838   0DD8             _for43_init:
1839   0DD8             _for43_cond:
1840   0DD8             _for43_block:
1841   0DD8             ; get(); 
1842   0DD8                             
1843   0DD8             ; --- START FUNCTION CALL
1844   0DD8 07 60 2B      call get
1845   0DDB             ; if(toktype == END) break; 
1846   0DDB             _if44_cond:
1847   0DDB                             
1848   0DDB 3B 39 4E      mov d, _toktype ; $toktype
1849   0DDE 2A            mov b, [d]
1850   0DDF 38 00 00      mov c, 0
1851   0DE2             ; --- START RELATIONAL
1852   0DE2 D7            push a
1853   0DE3 11            mov a, b
1854   0DE4 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1854   0DE8 00 00 
1855   0DEA B0            cmp a, b
1856   0DEB FD 71         seq ; ==
1857   0DED E4            pop a
1858   0DEE             ; --- END RELATIONAL
1859   0DEE C0 00 00      cmp b, 0
1860   0DF1 C6 FA 0D      je _if44_exit
1861   0DF4             _if44_TRUE:
1862   0DF4             ; break; 
1863   0DF4 0A 17 0E      jmp _for43_exit ; for break
1864   0DF7 0A FA 0D      jmp _if44_exit
1865   0DFA             _if44_exit:
1866   0DFA             ; strcat(opcode, token); 
1867   0DFA                             
1868   0DFA             ; --- START FUNCTION CALL
1869   0DFA                             
1870   0DFA 3B 3D 4E      mov d, _token_data ; $token
1871   0DFD 2D            mov b, d
1872   0DFE 38 00 00      mov c, 0
1873   0E01 FD AB         swp b
1874   0E03 D8            push b
1875   0E04                             
1876   0E04 FA E1 FF      lea d, [bp + -31] ; $opcode
1877   0E07 2D            mov b, d
1878   0E08 38 00 00      mov c, 0
1879   0E0B FD AB         swp b
1880   0E0D D8            push b
1881   0E0E 07 D5 4B      call strcat
1882   0E11 51 04 00      add sp, 4
1883   0E14             ; --- END FUNCTION CALL
1884   0E14             _for43_update:
1885   0E14 0A D8 0D      jmp _for43_cond
1886   0E17             _for43_exit:
1887   0E17             _if42_exit:
1888   0E17             ; op = search_opcode(opcode); 
1889   0E17 FA 87 FF      lea d, [bp + -121] ; $op
1890   0E1A DA            push d
1891   0E1B                             
1892   0E1B             ; --- START FUNCTION CALL
1893   0E1B                             
1894   0E1B FA E1 FF      lea d, [bp + -31] ; $opcode
1895   0E1E 2D            mov b, d
1896   0E1F 38 00 00      mov c, 0
1897   0E22 FD AB         swp b
1898   0E24 D8            push b
1899   0E25 07 E2 23      call search_opcode
1900   0E28 51 02 00      add sp, 2
1901   0E2B             ; --- END FUNCTION CALL
1902   0E2B E7            pop d
1903   0E2C FD 28         mov si, b
1904   0E2E FD 50         mov di, d
1905   0E30 38 1A 00      mov c, 26
1906   0E33 FD F5         rep movsb
1907   0E35             ; if(op.opcode_type){ 
1908   0E35             _if45_cond:
1909   0E35                             
1910   0E35 FA 87 FF      lea d, [bp + -121] ; $op
1911   0E38 58 19 00      add d, 25
1912   0E3B 32            mov bl, [d]
1913   0E3C A7 00         mov bh, 0
1914   0E3E 38 00 00      mov c, 0
1915   0E41 C0 00 00      cmp b, 0
1916   0E44 C6 57 0E      je _if45_exit
1917   0E47             _if45_TRUE:
1918   0E47             ; forwards(1); 
1919   0E47                             
1920   0E47             ; --- START FUNCTION CALL
1921   0E47                             
1922   0E47 FD 2E 01 00   mov32 cb, $00000001
1922   0E4B 00 00 
1923   0E4D DD            push bl
1924   0E4E 07 0F 27      call forwards
1925   0E51 51 01 00      add sp, 1
1926   0E54             ; --- END FUNCTION CALL
1927   0E54 0A 57 0E      jmp _if45_exit
1928   0E57             _if45_exit:
1929   0E57             ; forwards(1); 
1930   0E57                             
1931   0E57             ; --- START FUNCTION CALL
1932   0E57                             
1933   0E57 FD 2E 01 00   mov32 cb, $00000001
1933   0E5B 00 00 
1934   0E5D DD            push bl
1935   0E5E 07 0F 27      call forwards
1936   0E61 51 01 00      add sp, 1
1937   0E64             ; --- END FUNCTION CALL
1938   0E64 0A 6B 13      jmp _if41_exit
1939   0E67             _if41_else:
1940   0E67             ; num_operands = 0; 
1941   0E67 FA 85 FF      lea d, [bp + -123] ; $num_operands
1942   0E6A DA            push d
1943   0E6B                             
1944   0E6B FD 2E 00 00   mov32 cb, $00000000
1944   0E6F 00 00 
1945   0E71 E7            pop d
1946   0E72 FD 43         mov [d], b
1947   0E74             ; for(;;){ 
1948   0E74             _for46_init:
1949   0E74             _for46_cond:
1950   0E74             _for46_block:
1951   0E74             ; get(); 
1952   0E74                             
1953   0E74             ; --- START FUNCTION CALL
1954   0E74 07 60 2B      call get
1955   0E77             ; if(toktype == END) break; 
1956   0E77             _if47_cond:
1957   0E77                             
1958   0E77 3B 39 4E      mov d, _toktype ; $toktype
1959   0E7A 2A            mov b, [d]
1960   0E7B 38 00 00      mov c, 0
1961   0E7E             ; --- START RELATIONAL
1962   0E7E D7            push a
1963   0E7F 11            mov a, b
1964   0E80 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1964   0E84 00 00 
1965   0E86 B0            cmp a, b
1966   0E87 FD 71         seq ; ==
1967   0E89 E4            pop a
1968   0E8A             ; --- END RELATIONAL
1969   0E8A C0 00 00      cmp b, 0
1970   0E8D C6 96 0E      je _if47_exit
1971   0E90             _if47_TRUE:
1972   0E90             ; break; 
1973   0E90 0A F2 0E      jmp _for46_exit ; for break
1974   0E93 0A 96 0E      jmp _if47_exit
1975   0E96             _if47_exit:
1976   0E96             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1977   0E96             _if48_cond:
1978   0E96                             
1979   0E96 3B 39 4E      mov d, _toktype ; $toktype
1980   0E99 2A            mov b, [d]
1981   0E9A 38 00 00      mov c, 0
1982   0E9D             ; --- START RELATIONAL
1983   0E9D D7            push a
1984   0E9E 11            mov a, b
1985   0E9F FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1985   0EA3 00 00 
1986   0EA5 B0            cmp a, b
1987   0EA6 FD 71         seq ; ==
1988   0EA8 E4            pop a
1989   0EA9             ; --- END RELATIONAL
1990   0EA9             ; --- START LOGICAL OR
1991   0EA9 D7            push a
1992   0EAA 11            mov a, b
1993   0EAB 3B 39 4E      mov d, _toktype ; $toktype
1994   0EAE 2A            mov b, [d]
1995   0EAF 38 00 00      mov c, 0
1996   0EB2             ; --- START RELATIONAL
1997   0EB2 D7            push a
1998   0EB3 11            mov a, b
1999   0EB4 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1999   0EB8 00 00 
2000   0EBA B0            cmp a, b
2001   0EBB FD 71         seq ; ==
2002   0EBD E4            pop a
2003   0EBE             ; --- END RELATIONAL
2004   0EBE             ; --- START LOGICAL AND
2005   0EBE D7            push a
2006   0EBF 11            mov a, b
2007   0EC0             ; --- START FUNCTION CALL
2008   0EC0                             
2009   0EC0 3B 3D 4E      mov d, _token_data ; $token
2010   0EC3 2D            mov b, d
2011   0EC4 38 00 00      mov c, 0
2012   0EC7 FD AB         swp b
2013   0EC9 D8            push b
2014   0ECA 07 04 1F      call is_reserved
2015   0ECD 51 02 00      add sp, 2
2016   0ED0             ; --- END FUNCTION CALL
2017   0ED0 FD A7         sand a, b
2018   0ED2 E4            pop a
2019   0ED3             ; --- END LOGICAL AND
2020   0ED3 FD A8         sor a, b ; ||
2021   0ED5 E4            pop a
2022   0ED6             ; --- END LOGICAL OR
2023   0ED6 C0 00 00      cmp b, 0
2024   0ED9 C6 EF 0E      je _if48_exit
2025   0EDC             _if48_TRUE:
2026   0EDC             ; num_operands++; 
2027   0EDC                             
2028   0EDC FA 85 FF      lea d, [bp + -123] ; $num_operands
2029   0EDF 2A            mov b, [d]
2030   0EE0 38 00 00      mov c, 0
2031   0EE3 11            mov a, b
2032   0EE4 FD 77         inc b
2033   0EE6 FA 85 FF      lea d, [bp + -123] ; $num_operands
2034   0EE9 FD 43         mov [d], b
2035   0EEB 27            mov b, a
2036   0EEC 0A EF 0E      jmp _if48_exit
2037   0EEF             _if48_exit:
2038   0EEF             _for46_update:
2039   0EEF 0A 74 0E      jmp _for46_cond
2040   0EF2             _for46_exit:
2041   0EF2             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
2042   0EF2             _if49_cond:
2043   0EF2                             
2044   0EF2 FA 85 FF      lea d, [bp + -123] ; $num_operands
2045   0EF5 2A            mov b, [d]
2046   0EF6 38 00 00      mov c, 0
2047   0EF9             ; --- START RELATIONAL
2048   0EF9 D7            push a
2049   0EFA 11            mov a, b
2050   0EFB FD 2E 02 00   mov32 cb, $00000002
2050   0EFF 00 00 
2051   0F01 B0            cmp a, b
2052   0F02 FD 7F         sgt ; >
2053   0F04 E4            pop a
2054   0F05             ; --- END RELATIONAL
2055   0F05 C0 00 00      cmp b, 0
2056   0F08 C6 1A 0F      je _if49_exit
2057   0F0B             _if49_TRUE:
2058   0F0B             ; error("Maximum number of operands per instruction is 2."); 
2059   0F0B                             
2060   0F0B             ; --- START FUNCTION CALL
2061   0F0B                             
2062   0F0B 26 AE 50      mov b, _s27 ; "Maximum number of operands per instruction is 2."
2063   0F0E FD AB         swp b
2064   0F10 D8            push b
2065   0F11 07 5A 39      call error
2066   0F14 51 02 00      add sp, 2
2067   0F17             ; --- END FUNCTION CALL
2068   0F17 0A 1A 0F      jmp _if49_exit
2069   0F1A             _if49_exit:
2070   0F1A             ; num_operandsexp = exp(2, num_operands); 
2071   0F1A FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
2072   0F1D DA            push d
2073   0F1E                             
2074   0F1E             ; --- START FUNCTION CALL
2075   0F1E                             
2076   0F1E FA 85 FF      lea d, [bp + -123] ; $num_operands
2077   0F21 2A            mov b, [d]
2078   0F22 38 00 00      mov c, 0
2079   0F25 FD AB         swp b
2080   0F27 D8            push b
2081   0F28                             
2082   0F28 FD 2E 02 00   mov32 cb, $00000002
2082   0F2C 00 00 
2083   0F2E FD AB         swp b
2084   0F30 D8            push b
2085   0F31 07 83 3D      call exp
2086   0F34 51 04 00      add sp, 4
2087   0F37             ; --- END FUNCTION CALL
2088   0F37 E7            pop d
2089   0F38 FD 43         mov [d], b
2090   0F3A             ; for(i = 0; i < num_operandsexp; i++){ 
2091   0F3A             _for50_init:
2092   0F3A FA 81 FF      lea d, [bp + -127] ; $i
2093   0F3D DA            push d
2094   0F3E                             
2095   0F3E FD 2E 00 00   mov32 cb, $00000000
2095   0F42 00 00 
2096   0F44 E7            pop d
2097   0F45 FD 43         mov [d], b
2098   0F47             _for50_cond:
2099   0F47                             
2100   0F47 FA 81 FF      lea d, [bp + -127] ; $i
2101   0F4A 2A            mov b, [d]
2102   0F4B 38 00 00      mov c, 0
2103   0F4E             ; --- START RELATIONAL
2104   0F4E D7            push a
2105   0F4F 11            mov a, b
2106   0F50 FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
2107   0F53 2A            mov b, [d]
2108   0F54 38 00 00      mov c, 0
2109   0F57 B0            cmp a, b
2110   0F58 FD 73         slt ; < (signed)
2111   0F5A E4            pop a
2112   0F5B             ; --- END RELATIONAL
2113   0F5B C0 00 00      cmp b, 0
2114   0F5E C6 6B 13      je _for50_exit
2115   0F61             _for50_block:
2116   0F61             ; prog = code_line; 
2117   0F61 3B 3B 4E      mov d, _prog ; $prog
2118   0F64 DA            push d
2119   0F65                             
2120   0F65 FA A1 FF      lea d, [bp + -95] ; $code_line
2121   0F68 2D            mov b, d
2122   0F69 38 00 00      mov c, 0
2123   0F6C E7            pop d
2124   0F6D FD 43         mov [d], b
2125   0F6F             ; get(); 
2126   0F6F                             
2127   0F6F             ; --- START FUNCTION CALL
2128   0F6F 07 60 2B      call get
2129   0F72             ; strcpy(opcode, token); 
2130   0F72                             
2131   0F72             ; --- START FUNCTION CALL
2132   0F72                             
2133   0F72 3B 3D 4E      mov d, _token_data ; $token
2134   0F75 2D            mov b, d
2135   0F76 38 00 00      mov c, 0
2136   0F79 FD AB         swp b
2137   0F7B D8            push b
2138   0F7C                             
2139   0F7C FA E1 FF      lea d, [bp + -31] ; $opcode
2140   0F7F 2D            mov b, d
2141   0F80 38 00 00      mov c, 0
2142   0F83 FD AB         swp b
2143   0F85 D8            push b
2144   0F86 07 5B 4B      call strcpy
2145   0F89 51 04 00      add sp, 4
2146   0F8C             ; --- END FUNCTION CALL
2147   0F8C             ; strcat(opcode, " "); 
2148   0F8C                             
2149   0F8C             ; --- START FUNCTION CALL
2150   0F8C                             
2151   0F8C 26 AC 50      mov b, _s26 ; " "
2152   0F8F FD AB         swp b
2153   0F91 D8            push b
2154   0F92                             
2155   0F92 FA E1 FF      lea d, [bp + -31] ; $opcode
2156   0F95 2D            mov b, d
2157   0F96 38 00 00      mov c, 0
2158   0F99 FD AB         swp b
2159   0F9B D8            push b
2160   0F9C 07 D5 4B      call strcat
2161   0F9F 51 04 00      add sp, 4
2162   0FA2             ; --- END FUNCTION CALL
2163   0FA2             ; j = 0; 
2164   0FA2 FA 7F FF      lea d, [bp + -129] ; $j
2165   0FA5 DA            push d
2166   0FA6                             
2167   0FA6 FD 2E 00 00   mov32 cb, $00000000
2167   0FAA 00 00 
2168   0FAC E7            pop d
2169   0FAD FD 43         mov [d], b
2170   0FAF             ; for(;;){ 
2171   0FAF             _for51_init:
2172   0FAF             _for51_cond:
2173   0FAF             _for51_block:
2174   0FAF             ; get(); 
2175   0FAF                             
2176   0FAF             ; --- START FUNCTION CALL
2177   0FAF 07 60 2B      call get
2178   0FB2             ; if(toktype == END) break; 
2179   0FB2             _if52_cond:
2180   0FB2                             
2181   0FB2 3B 39 4E      mov d, _toktype ; $toktype
2182   0FB5 2A            mov b, [d]
2183   0FB6 38 00 00      mov c, 0
2184   0FB9             ; --- START RELATIONAL
2185   0FB9 D7            push a
2186   0FBA 11            mov a, b
2187   0FBB FD 2E 07 00   mov32 cb, $7 ; enum element: END
2187   0FBF 00 00 
2188   0FC1 B0            cmp a, b
2189   0FC2 FD 71         seq ; ==
2190   0FC4 E4            pop a
2191   0FC5             ; --- END RELATIONAL
2192   0FC5 C0 00 00      cmp b, 0
2193   0FC8 C6 D1 0F      je _if52_exit
2194   0FCB             _if52_TRUE:
2195   0FCB             ; break; 
2196   0FCB 0A 4E 11      jmp _for51_exit ; for break
2197   0FCE 0A D1 0F      jmp _if52_exit
2198   0FD1             _if52_exit:
2199   0FD1             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
2200   0FD1             _if53_cond:
2201   0FD1                             
2202   0FD1 3B 39 4E      mov d, _toktype ; $toktype
2203   0FD4 2A            mov b, [d]
2204   0FD5 38 00 00      mov c, 0
2205   0FD8             ; --- START RELATIONAL
2206   0FD8 D7            push a
2207   0FD9 11            mov a, b
2208   0FDA FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2208   0FDE 00 00 
2209   0FE0 B0            cmp a, b
2210   0FE1 FD 71         seq ; ==
2211   0FE3 E4            pop a
2212   0FE4             ; --- END RELATIONAL
2213   0FE4             ; --- START LOGICAL OR
2214   0FE4 D7            push a
2215   0FE5 11            mov a, b
2216   0FE6 3B 39 4E      mov d, _toktype ; $toktype
2217   0FE9 2A            mov b, [d]
2218   0FEA 38 00 00      mov c, 0
2219   0FED             ; --- START RELATIONAL
2220   0FED D7            push a
2221   0FEE 11            mov a, b
2222   0FEF FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
2222   0FF3 00 00 
2223   0FF5 B0            cmp a, b
2224   0FF6 FD 71         seq ; ==
2225   0FF8 E4            pop a
2226   0FF9             ; --- END RELATIONAL
2227   0FF9             ; --- START LOGICAL AND
2228   0FF9 D7            push a
2229   0FFA 11            mov a, b
2230   0FFB             ; --- START FUNCTION CALL
2231   0FFB                             
2232   0FFB 3B 3D 4E      mov d, _token_data ; $token
2233   0FFE 2D            mov b, d
2234   0FFF 38 00 00      mov c, 0
2235   1002 FD AB         swp b
2236   1004 D8            push b
2237   1005 07 04 1F      call is_reserved
2238   1008 51 02 00      add sp, 2
2239   100B             ; --- END FUNCTION CALL
2240   100B FD A7         sand a, b
2241   100D E4            pop a
2242   100E             ; --- END LOGICAL AND
2243   100E FD A8         sor a, b ; ||
2244   1010 E4            pop a
2245   1011             ; --- END LOGICAL OR
2246   1011 C0 00 00      cmp b, 0
2247   1014 C6 31 11      je _if53_else
2248   1017             _if53_TRUE:
2249   1017             ; strcat(opcode, symbols[i*2+j]); 
2250   1017                             
2251   1017             ; --- START FUNCTION CALL
2252   1017                             
2253   1017 3B 9F 4F      mov d, _symbols_data ; $symbols
2254   101A D7            push a
2255   101B DA            push d
2256   101C                             
2257   101C FA 81 FF      lea d, [bp + -127] ; $i
2258   101F 2A            mov b, [d]
2259   1020 38 00 00      mov c, 0
2260   1023             ; --- START FACTORS
2261   1023 D7            push a
2262   1024 FD D8         push g
2263   1026 11            mov a, b
2264   1027 FD 7A         mov g, c
2265   1029 FD 2E 02 00   mov32 cb, $00000002
2265   102D 00 00 
2266   102F D7            push a     ; save left operand
2267   1030 8E            xor a, b   ; xor sign bits
2268   1031 FD AA         swp a      ; swap bytes
2269   1033 83            mov cl, al ; save result of xor into 'dl'
2270   1034 E4            pop a      ; restore left side operator
2271   1035 DF            push cl    ; save result of xor above
2272   1036 FD AA         swp a  
2273   1038 93 80         test al, $80  
2274   103A FD AA         swp a  
2275   103C C6 41 10      jz skip_invert_a_54  
2276   103F FD 95         neg a 
2277   1041             skip_invert_a_54:   
2278   1041 FD AB         swp b
2279   1043 FD 93 80      test bl, $80  
2280   1046 FD AB         swp b
2281   1048 C6 4D 10      jz skip_invert_b_54  
2282   104B FD 97         neg b 
2283   104D             skip_invert_b_54:   
2284   104D AC            mul a, b ; *
2285   104E FD 78         mov g, a
2286   1050 11            mov a, b
2287   1051 EA            pop bl
2288   1052 FD 93 80      test bl, $80
2289   1055 C6 62 10      jz _same_signs_54
2290   1058 2F            mov bl, al
2291   1059 95            not a
2292   105A FD 97         neg b
2293   105C 5B 00 00      adc a, 0
2294   105F FD 78         mov g, a
2295   1061 11            mov a, b
2296   1062             _same_signs_54:
2297   1062 FD 38         mov c, g
2298   1064 27            mov b, a
2299   1065 FD F1         pop g
2300   1067 E4            pop a
2301   1068             ; --- END FACTORS
2302   1068             ; --- START TERMS
2303   1068 D7            push a
2304   1069 FD D8         push g
2305   106B 11            mov a, b
2306   106C FD 7A         mov g, c
2307   106E FA 7F FF      lea d, [bp + -129] ; $j
2308   1071 2A            mov b, [d]
2309   1072 38 00 00      mov c, 0
2310   1075 FD 15         add32 cb, ga
2311   1077 FD F1         pop g
2312   1079 E4            pop a
2313   107A             ; --- END TERMS
2314   107A E7            pop d
2315   107B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2316   107F E4            pop a
2317   1080 2A            mov b, [d]
2318   1081 38 00 00      mov c, 0
2319   1084 FD AB         swp b
2320   1086 D8            push b
2321   1087                             
2322   1087 FA E1 FF      lea d, [bp + -31] ; $opcode
2323   108A 2D            mov b, d
2324   108B 38 00 00      mov c, 0
2325   108E FD AB         swp b
2326   1090 D8            push b
2327   1091 07 D5 4B      call strcat
2328   1094 51 04 00      add sp, 4
2329   1097             ; --- END FUNCTION CALL
2330   1097             ; operand_types[j] = *symbols[i*2+j]; 
2331   1097 FA 7C FF      lea d, [bp + -132] ; $operand_types
2332   109A D7            push a
2333   109B DA            push d
2334   109C                             
2335   109C FA 7F FF      lea d, [bp + -129] ; $j
2336   109F 2A            mov b, [d]
2337   10A0 38 00 00      mov c, 0
2338   10A3 E7            pop d
2339   10A4 5A            add d, b
2340   10A5 E4            pop a
2341   10A6 DA            push d
2342   10A7                             
2343   10A7 3B 9F 4F      mov d, _symbols_data ; $symbols
2344   10AA D7            push a
2345   10AB DA            push d
2346   10AC                             
2347   10AC FA 81 FF      lea d, [bp + -127] ; $i
2348   10AF 2A            mov b, [d]
2349   10B0 38 00 00      mov c, 0
2350   10B3             ; --- START FACTORS
2351   10B3 D7            push a
2352   10B4 FD D8         push g
2353   10B6 11            mov a, b
2354   10B7 FD 7A         mov g, c
2355   10B9 FD 2E 02 00   mov32 cb, $00000002
2355   10BD 00 00 
2356   10BF D7            push a     ; save left operand
2357   10C0 8E            xor a, b   ; xor sign bits
2358   10C1 FD AA         swp a      ; swap bytes
2359   10C3 83            mov cl, al ; save result of xor into 'dl'
2360   10C4 E4            pop a      ; restore left side operator
2361   10C5 DF            push cl    ; save result of xor above
2362   10C6 FD AA         swp a  
2363   10C8 93 80         test al, $80  
2364   10CA FD AA         swp a  
2365   10CC C6 D1 10      jz skip_invert_a_55  
2366   10CF FD 95         neg a 
2367   10D1             skip_invert_a_55:   
2368   10D1 FD AB         swp b
2369   10D3 FD 93 80      test bl, $80  
2370   10D6 FD AB         swp b
2371   10D8 C6 DD 10      jz skip_invert_b_55  
2372   10DB FD 97         neg b 
2373   10DD             skip_invert_b_55:   
2374   10DD AC            mul a, b ; *
2375   10DE FD 78         mov g, a
2376   10E0 11            mov a, b
2377   10E1 EA            pop bl
2378   10E2 FD 93 80      test bl, $80
2379   10E5 C6 F2 10      jz _same_signs_55
2380   10E8 2F            mov bl, al
2381   10E9 95            not a
2382   10EA FD 97         neg b
2383   10EC 5B 00 00      adc a, 0
2384   10EF FD 78         mov g, a
2385   10F1 11            mov a, b
2386   10F2             _same_signs_55:
2387   10F2 FD 38         mov c, g
2388   10F4 27            mov b, a
2389   10F5 FD F1         pop g
2390   10F7 E4            pop a
2391   10F8             ; --- END FACTORS
2392   10F8             ; --- START TERMS
2393   10F8 D7            push a
2394   10F9 FD D8         push g
2395   10FB 11            mov a, b
2396   10FC FD 7A         mov g, c
2397   10FE FA 7F FF      lea d, [bp + -129] ; $j
2398   1101 2A            mov b, [d]
2399   1102 38 00 00      mov c, 0
2400   1105 FD 15         add32 cb, ga
2401   1107 FD F1         pop g
2402   1109 E4            pop a
2403   110A             ; --- END TERMS
2404   110A E7            pop d
2405   110B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2406   110F E4            pop a
2407   1110 2A            mov b, [d]
2408   1111 38 00 00      mov c, 0
2409   1114 74            mov d, b
2410   1115 32            mov bl, [d]
2411   1116 A7 00         mov bh, 0
2412   1118 38 00 00      mov c, 0
2413   111B E7            pop d
2414   111C FD 3E         mov [d], bl
2415   111E             ; j++; 
2416   111E                             
2417   111E FA 7F FF      lea d, [bp + -129] ; $j
2418   1121 2A            mov b, [d]
2419   1122 38 00 00      mov c, 0
2420   1125 11            mov a, b
2421   1126 FD 77         inc b
2422   1128 FA 7F FF      lea d, [bp + -129] ; $j
2423   112B FD 43         mov [d], b
2424   112D 27            mov b, a
2425   112E 0A 4B 11      jmp _if53_exit
2426   1131             _if53_else:
2427   1131             ; strcat(opcode, token); 
2428   1131                             
2429   1131             ; --- START FUNCTION CALL
2430   1131                             
2431   1131 3B 3D 4E      mov d, _token_data ; $token
2432   1134 2D            mov b, d
2433   1135 38 00 00      mov c, 0
2434   1138 FD AB         swp b
2435   113A D8            push b
2436   113B                             
2437   113B FA E1 FF      lea d, [bp + -31] ; $opcode
2438   113E 2D            mov b, d
2439   113F 38 00 00      mov c, 0
2440   1142 FD AB         swp b
2441   1144 D8            push b
2442   1145 07 D5 4B      call strcat
2443   1148 51 04 00      add sp, 4
2444   114B             ; --- END FUNCTION CALL
2445   114B             _if53_exit:
2446   114B             _for51_update:
2447   114B 0A AF 0F      jmp _for51_cond
2448   114E             _for51_exit:
2449   114E             ; op = search_opcode(opcode); 
2450   114E FA 87 FF      lea d, [bp + -121] ; $op
2451   1151 DA            push d
2452   1152                             
2453   1152             ; --- START FUNCTION CALL
2454   1152                             
2455   1152 FA E1 FF      lea d, [bp + -31] ; $opcode
2456   1155 2D            mov b, d
2457   1156 38 00 00      mov c, 0
2458   1159 FD AB         swp b
2459   115B D8            push b
2460   115C 07 E2 23      call search_opcode
2461   115F 51 02 00      add sp, 2
2462   1162             ; --- END FUNCTION CALL
2463   1162 E7            pop d
2464   1163 FD 28         mov si, b
2465   1165 FD 50         mov di, d
2466   1167 38 1A 00      mov c, 26
2467   116A FD F5         rep movsb
2468   116C             ; if(op.name[0] == '\0') continue; 
2469   116C             _if56_cond:
2470   116C                             
2471   116C FA 87 FF      lea d, [bp + -121] ; $op
2472   116F 58 00 00      add d, 0
2473   1172 D7            push a
2474   1173 DA            push d
2475   1174                             
2476   1174 FD 2E 00 00   mov32 cb, $00000000
2476   1178 00 00 
2477   117A E7            pop d
2478   117B 5A            add d, b
2479   117C E4            pop a
2480   117D 32            mov bl, [d]
2481   117E A7 00         mov bh, 0
2482   1180 38 00 00      mov c, 0
2483   1183             ; --- START RELATIONAL
2484   1183 D7            push a
2485   1184 11            mov a, b
2486   1185 FD 2E 00 00   mov32 cb, $00000000
2486   1189 00 00 
2487   118B B0            cmp a, b
2488   118C FD 71         seq ; ==
2489   118E E4            pop a
2490   118F             ; --- END RELATIONAL
2491   118F C0 00 00      cmp b, 0
2492   1192 C6 9B 11      je _if56_exit
2493   1195             _if56_TRUE:
2494   1195             ; continue; 
2495   1195 0A 58 13      jmp _for50_update ; for continue
2496   1198 0A 9B 11      jmp _if56_exit
2497   119B             _if56_exit:
2498   119B             ; if(op.opcode_type){ 
2499   119B             _if57_cond:
2500   119B                             
2501   119B FA 87 FF      lea d, [bp + -121] ; $op
2502   119E 58 19 00      add d, 25
2503   11A1 32            mov bl, [d]
2504   11A2 A7 00         mov bh, 0
2505   11A4 38 00 00      mov c, 0
2506   11A7 C0 00 00      cmp b, 0
2507   11AA C6 BD 11      je _if57_exit
2508   11AD             _if57_TRUE:
2509   11AD             ; forwards(1); 
2510   11AD                             
2511   11AD             ; --- START FUNCTION CALL
2512   11AD                             
2513   11AD FD 2E 01 00   mov32 cb, $00000001
2513   11B1 00 00 
2514   11B3 DD            push bl
2515   11B4 07 0F 27      call forwards
2516   11B7 51 01 00      add sp, 1
2517   11BA             ; --- END FUNCTION CALL
2518   11BA 0A BD 11      jmp _if57_exit
2519   11BD             _if57_exit:
2520   11BD             ; forwards(1); 
2521   11BD                             
2522   11BD             ; --- START FUNCTION CALL
2523   11BD                             
2524   11BD FD 2E 01 00   mov32 cb, $00000001
2524   11C1 00 00 
2525   11C3 DD            push bl
2526   11C4 07 0F 27      call forwards
2527   11C7 51 01 00      add sp, 1
2528   11CA             ; --- END FUNCTION CALL
2529   11CA             ; prog = code_line; 
2530   11CA 3B 3B 4E      mov d, _prog ; $prog
2531   11CD DA            push d
2532   11CE                             
2533   11CE FA A1 FF      lea d, [bp + -95] ; $code_line
2534   11D1 2D            mov b, d
2535   11D2 38 00 00      mov c, 0
2536   11D5 E7            pop d
2537   11D6 FD 43         mov [d], b
2538   11D8             ; j = 0; 
2539   11D8 FA 7F FF      lea d, [bp + -129] ; $j
2540   11DB DA            push d
2541   11DC                             
2542   11DC FD 2E 00 00   mov32 cb, $00000000
2542   11E0 00 00 
2543   11E2 E7            pop d
2544   11E3 FD 43         mov [d], b
2545   11E5             ; get(); 
2546   11E5                             
2547   11E5             ; --- START FUNCTION CALL
2548   11E5 07 60 2B      call get
2549   11E8             ; for(;;){ 
2550   11E8             _for58_init:
2551   11E8             _for58_cond:
2552   11E8             _for58_block:
2553   11E8             ; get(); 
2554   11E8                             
2555   11E8             ; --- START FUNCTION CALL
2556   11E8 07 60 2B      call get
2557   11EB             ; if(toktype == END) break; 
2558   11EB             _if59_cond:
2559   11EB                             
2560   11EB 3B 39 4E      mov d, _toktype ; $toktype
2561   11EE 2A            mov b, [d]
2562   11EF 38 00 00      mov c, 0
2563   11F2             ; --- START RELATIONAL
2564   11F2 D7            push a
2565   11F3 11            mov a, b
2566   11F4 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2566   11F8 00 00 
2567   11FA B0            cmp a, b
2568   11FB FD 71         seq ; ==
2569   11FD E4            pop a
2570   11FE             ; --- END RELATIONAL
2571   11FE C0 00 00      cmp b, 0
2572   1201 C6 0A 12      je _if59_exit
2573   1204             _if59_TRUE:
2574   1204             ; break; 
2575   1204 0A 55 13      jmp _for58_exit ; for break
2576   1207 0A 0A 12      jmp _if59_exit
2577   120A             _if59_exit:
2578   120A             ; if(toktype == IDENTIFIER && !is_reserved(token)){ 
2579   120A             _if60_cond:
2580   120A                             
2581   120A 3B 39 4E      mov d, _toktype ; $toktype
2582   120D 2A            mov b, [d]
2583   120E 38 00 00      mov c, 0
2584   1211             ; --- START RELATIONAL
2585   1211 D7            push a
2586   1212 11            mov a, b
2587   1213 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
2587   1217 00 00 
2588   1219 B0            cmp a, b
2589   121A FD 71         seq ; ==
2590   121C E4            pop a
2591   121D             ; --- END RELATIONAL
2592   121D             ; --- START LOGICAL AND
2593   121D D7            push a
2594   121E 11            mov a, b
2595   121F             ; --- START FUNCTION CALL
2596   121F                             
2597   121F 3B 3D 4E      mov d, _token_data ; $token
2598   1222 2D            mov b, d
2599   1223 38 00 00      mov c, 0
2600   1226 FD AB         swp b
2601   1228 D8            push b
2602   1229 07 04 1F      call is_reserved
2603   122C 51 02 00      add sp, 2
2604   122F             ; --- END FUNCTION CALL
2605   122F FD A7         sand a, b
2606   1231 E4            pop a
2607   1232             ; --- END LOGICAL AND
2608   1232 C0 00 00      cmp b, 0
2609   1235 C6 B8 12      je _if60_else
2610   1238             _if60_TRUE:
2611   1238             ; if(operand_types[j] == '#'){ 
2612   1238             _if61_cond:
2613   1238                             
2614   1238 FA 7C FF      lea d, [bp + -132] ; $operand_types
2615   123B D7            push a
2616   123C DA            push d
2617   123D                             
2618   123D FA 7F FF      lea d, [bp + -129] ; $j
2619   1240 2A            mov b, [d]
2620   1241 38 00 00      mov c, 0
2621   1244 E7            pop d
2622   1245 5A            add d, b
2623   1246 E4            pop a
2624   1247 32            mov bl, [d]
2625   1248 A7 00         mov bh, 0
2626   124A 38 00 00      mov c, 0
2627   124D             ; --- START RELATIONAL
2628   124D D7            push a
2629   124E 11            mov a, b
2630   124F FD 2E 23 00   mov32 cb, $00000023
2630   1253 00 00 
2631   1255 B0            cmp a, b
2632   1256 FD 71         seq ; ==
2633   1258 E4            pop a
2634   1259             ; --- END RELATIONAL
2635   1259 C0 00 00      cmp b, 0
2636   125C C6 6E 12      je _if61_else
2637   125F             _if61_TRUE:
2638   125F             ; error("8bit operand expected but 16bit label given."); 
2639   125F                             
2640   125F             ; --- START FUNCTION CALL
2641   125F                             
2642   125F 26 DF 50      mov b, _s28 ; "8bit operand expected but 16bit label given."
2643   1262 FD AB         swp b
2644   1264 D8            push b
2645   1265 07 5A 39      call error
2646   1268 51 02 00      add sp, 2
2647   126B             ; --- END FUNCTION CALL
2648   126B 0A A5 12      jmp _if61_exit
2649   126E             _if61_else:
2650   126E             ; if(operand_types[j] == '@'){ 
2651   126E             _if62_cond:
2652   126E                             
2653   126E FA 7C FF      lea d, [bp + -132] ; $operand_types
2654   1271 D7            push a
2655   1272 DA            push d
2656   1273                             
2657   1273 FA 7F FF      lea d, [bp + -129] ; $j
2658   1276 2A            mov b, [d]
2659   1277 38 00 00      mov c, 0
2660   127A E7            pop d
2661   127B 5A            add d, b
2662   127C E4            pop a
2663   127D 32            mov bl, [d]
2664   127E A7 00         mov bh, 0
2665   1280 38 00 00      mov c, 0
2666   1283             ; --- START RELATIONAL
2667   1283 D7            push a
2668   1284 11            mov a, b
2669   1285 FD 2E 40 00   mov32 cb, $00000040
2669   1289 00 00 
2670   128B B0            cmp a, b
2671   128C FD 71         seq ; ==
2672   128E E4            pop a
2673   128F             ; --- END RELATIONAL
2674   128F C0 00 00      cmp b, 0
2675   1292 C6 A5 12      je _if62_exit
2676   1295             _if62_TRUE:
2677   1295             ; forwards(2); 
2678   1295                             
2679   1295             ; --- START FUNCTION CALL
2680   1295                             
2681   1295 FD 2E 02 00   mov32 cb, $00000002
2681   1299 00 00 
2682   129B DD            push bl
2683   129C 07 0F 27      call forwards
2684   129F 51 01 00      add sp, 1
2685   12A2             ; --- END FUNCTION CALL
2686   12A2 0A A5 12      jmp _if62_exit
2687   12A5             _if62_exit:
2688   12A5             _if61_exit:
2689   12A5             ; j++; 
2690   12A5                             
2691   12A5 FA 7F FF      lea d, [bp + -129] ; $j
2692   12A8 2A            mov b, [d]
2693   12A9 38 00 00      mov c, 0
2694   12AC 11            mov a, b
2695   12AD FD 77         inc b
2696   12AF FA 7F FF      lea d, [bp + -129] ; $j
2697   12B2 FD 43         mov [d], b
2698   12B4 27            mov b, a
2699   12B5 0A 52 13      jmp _if60_exit
2700   12B8             _if60_else:
2701   12B8             ; if(toktype == INTEGER_CONST){ 
2702   12B8             _if63_cond:
2703   12B8                             
2704   12B8 3B 39 4E      mov d, _toktype ; $toktype
2705   12BB 2A            mov b, [d]
2706   12BC 38 00 00      mov c, 0
2707   12BF             ; --- START RELATIONAL
2708   12BF D7            push a
2709   12C0 11            mov a, b
2710   12C1 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2710   12C5 00 00 
2711   12C7 B0            cmp a, b
2712   12C8 FD 71         seq ; ==
2713   12CA E4            pop a
2714   12CB             ; --- END RELATIONAL
2715   12CB C0 00 00      cmp b, 0
2716   12CE C6 52 13      je _if63_exit
2717   12D1             _if63_TRUE:
2718   12D1             ; if(operand_types[j] == '#'){ 
2719   12D1             _if64_cond:
2720   12D1                             
2721   12D1 FA 7C FF      lea d, [bp + -132] ; $operand_types
2722   12D4 D7            push a
2723   12D5 DA            push d
2724   12D6                             
2725   12D6 FA 7F FF      lea d, [bp + -129] ; $j
2726   12D9 2A            mov b, [d]
2727   12DA 38 00 00      mov c, 0
2728   12DD E7            pop d
2729   12DE 5A            add d, b
2730   12DF E4            pop a
2731   12E0 32            mov bl, [d]
2732   12E1 A7 00         mov bh, 0
2733   12E3 38 00 00      mov c, 0
2734   12E6             ; --- START RELATIONAL
2735   12E6 D7            push a
2736   12E7 11            mov a, b
2737   12E8 FD 2E 23 00   mov32 cb, $00000023
2737   12EC 00 00 
2738   12EE B0            cmp a, b
2739   12EF FD 71         seq ; ==
2740   12F1 E4            pop a
2741   12F2             ; --- END RELATIONAL
2742   12F2 C0 00 00      cmp b, 0
2743   12F5 C6 08 13      je _if64_else
2744   12F8             _if64_TRUE:
2745   12F8             ; forwards(1); 
2746   12F8                             
2747   12F8             ; --- START FUNCTION CALL
2748   12F8                             
2749   12F8 FD 2E 01 00   mov32 cb, $00000001
2749   12FC 00 00 
2750   12FE DD            push bl
2751   12FF 07 0F 27      call forwards
2752   1302 51 01 00      add sp, 1
2753   1305             ; --- END FUNCTION CALL
2754   1305 0A 3F 13      jmp _if64_exit
2755   1308             _if64_else:
2756   1308             ; if(operand_types[j] == '@'){ 
2757   1308             _if65_cond:
2758   1308                             
2759   1308 FA 7C FF      lea d, [bp + -132] ; $operand_types
2760   130B D7            push a
2761   130C DA            push d
2762   130D                             
2763   130D FA 7F FF      lea d, [bp + -129] ; $j
2764   1310 2A            mov b, [d]
2765   1311 38 00 00      mov c, 0
2766   1314 E7            pop d
2767   1315 5A            add d, b
2768   1316 E4            pop a
2769   1317 32            mov bl, [d]
2770   1318 A7 00         mov bh, 0
2771   131A 38 00 00      mov c, 0
2772   131D             ; --- START RELATIONAL
2773   131D D7            push a
2774   131E 11            mov a, b
2775   131F FD 2E 40 00   mov32 cb, $00000040
2775   1323 00 00 
2776   1325 B0            cmp a, b
2777   1326 FD 71         seq ; ==
2778   1328 E4            pop a
2779   1329             ; --- END RELATIONAL
2780   1329 C0 00 00      cmp b, 0
2781   132C C6 3F 13      je _if65_exit
2782   132F             _if65_TRUE:
2783   132F             ; forwards(2); 
2784   132F                             
2785   132F             ; --- START FUNCTION CALL
2786   132F                             
2787   132F FD 2E 02 00   mov32 cb, $00000002
2787   1333 00 00 
2788   1335 DD            push bl
2789   1336 07 0F 27      call forwards
2790   1339 51 01 00      add sp, 1
2791   133C             ; --- END FUNCTION CALL
2792   133C 0A 3F 13      jmp _if65_exit
2793   133F             _if65_exit:
2794   133F             _if64_exit:
2795   133F             ; j++; 
2796   133F                             
2797   133F FA 7F FF      lea d, [bp + -129] ; $j
2798   1342 2A            mov b, [d]
2799   1343 38 00 00      mov c, 0
2800   1346 11            mov a, b
2801   1347 FD 77         inc b
2802   1349 FA 7F FF      lea d, [bp + -129] ; $j
2803   134C FD 43         mov [d], b
2804   134E 27            mov b, a
2805   134F 0A 52 13      jmp _if63_exit
2806   1352             _if63_exit:
2807   1352             _if60_exit:
2808   1352             _for58_update:
2809   1352 0A E8 11      jmp _for58_cond
2810   1355             _for58_exit:
2811   1355             ; break; 
2812   1355 0A 6B 13      jmp _for50_exit ; for break
2813   1358             _for50_update:
2814   1358                             
2815   1358 FA 81 FF      lea d, [bp + -127] ; $i
2816   135B 2A            mov b, [d]
2817   135C 38 00 00      mov c, 0
2818   135F 11            mov a, b
2819   1360 FD 77         inc b
2820   1362 FA 81 FF      lea d, [bp + -127] ; $i
2821   1365 FD 43         mov [d], b
2822   1367 27            mov b, a
2823   1368 0A 47 0F      jmp _for50_cond
2824   136B             _for50_exit:
2825   136B             _if41_exit:
2826   136B             ; pop_prog(); 
2827   136B                             
2828   136B             ; --- START FUNCTION CALL
2829   136B 07 FA 39      call pop_prog
2830   136E F9            leave
2831   136F 09            ret
2832   1370             
2833   1370             parse_instr:
2834   1370 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2835   1373             ; char opcode[32]; 
2836   1373 52 20 00      sub sp, 32
2837   1376             ; char code_line[64]; 
2838   1376 52 40 00      sub sp, 64
2839   1379             ; struct t_opcode op; 
2840   1379 52 1A 00      sub sp, 26
2841   137C             ; int instr_len; 
2842   137C 52 02 00      sub sp, 2
2843   137F             ; int num_operands, num_operandsexp; 
2844   137F 52 02 00      sub sp, 2
2845   1382 52 02 00      sub sp, 2
2846   1385             ; int i, j; 
2847   1385 52 02 00      sub sp, 2
2848   1388 52 02 00      sub sp, 2
2849   138B             ; char operand_types[3]; // operand types and locations 
2850   138B 52 03 00      sub sp, 3
2851   138E             ; int old_pc; 
2852   138E 52 02 00      sub sp, 2
2853   1391             ; char has_operands; 
2854   1391 52 01 00      sub sp, 1
2855   1394             ; old_pc = pc; 
2856   1394 FA 78 FF      lea d, [bp + -136] ; $old_pc
2857   1397 DA            push d
2858   1398                             
2859   1398 3B 34 4E      mov d, _pc ; $pc
2860   139B 2A            mov b, [d]
2861   139C 38 00 00      mov c, 0
2862   139F E7            pop d
2863   13A0 FD 43         mov [d], b
2864   13A2             ; get_line(); 
2865   13A2                             
2866   13A2             ; --- START FUNCTION CALL
2867   13A2 07 43 2A      call get_line
2868   13A5             ; push_prog(); 
2869   13A5                             
2870   13A5             ; --- START FUNCTION CALL
2871   13A5 07 A0 39      call push_prog
2872   13A8             ; strcpy(code_line, string_const); 
2873   13A8                             
2874   13A8             ; --- START FUNCTION CALL
2875   13A8                             
2876   13A8 3B 7D 4E      mov d, _string_const_data ; $string_const
2877   13AB 2D            mov b, d
2878   13AC 38 00 00      mov c, 0
2879   13AF FD AB         swp b
2880   13B1 D8            push b
2881   13B2                             
2882   13B2 FA A1 FF      lea d, [bp + -95] ; $code_line
2883   13B5 2D            mov b, d
2884   13B6 38 00 00      mov c, 0
2885   13B9 FD AB         swp b
2886   13BB D8            push b
2887   13BC 07 5B 4B      call strcpy
2888   13BF 51 04 00      add sp, 4
2889   13C2             ; --- END FUNCTION CALL
2890   13C2             ; has_operands = 0; 
2891   13C2 FA 77 FF      lea d, [bp + -137] ; $has_operands
2892   13C5 DA            push d
2893   13C6                             
2894   13C6 FD 2E 00 00   mov32 cb, $00000000
2894   13CA 00 00 
2895   13CC E7            pop d
2896   13CD FD 3E         mov [d], bl
2897   13CF             ; prog = code_line; 
2898   13CF 3B 3B 4E      mov d, _prog ; $prog
2899   13D2 DA            push d
2900   13D3                             
2901   13D3 FA A1 FF      lea d, [bp + -95] ; $code_line
2902   13D6 2D            mov b, d
2903   13D7 38 00 00      mov c, 0
2904   13DA E7            pop d
2905   13DB FD 43         mov [d], b
2906   13DD             ; get(); 
2907   13DD                             
2908   13DD             ; --- START FUNCTION CALL
2909   13DD 07 60 2B      call get
2910   13E0             ; for(;;){ 
2911   13E0             _for66_init:
2912   13E0             _for66_cond:
2913   13E0             _for66_block:
2914   13E0             ; get(); 
2915   13E0                             
2916   13E0             ; --- START FUNCTION CALL
2917   13E0 07 60 2B      call get
2918   13E3             ; if(toktype == END) break; 
2919   13E3             _if67_cond:
2920   13E3                             
2921   13E3 3B 39 4E      mov d, _toktype ; $toktype
2922   13E6 2A            mov b, [d]
2923   13E7 38 00 00      mov c, 0
2924   13EA             ; --- START RELATIONAL
2925   13EA D7            push a
2926   13EB 11            mov a, b
2927   13EC FD 2E 07 00   mov32 cb, $7 ; enum element: END
2927   13F0 00 00 
2928   13F2 B0            cmp a, b
2929   13F3 FD 71         seq ; ==
2930   13F5 E4            pop a
2931   13F6             ; --- END RELATIONAL
2932   13F6 C0 00 00      cmp b, 0
2933   13F9 C6 02 14      je _if67_exit
2934   13FC             _if67_TRUE:
2935   13FC             ; break; 
2936   13FC 0A 52 14      jmp _for66_exit ; for break
2937   13FF 0A 02 14      jmp _if67_exit
2938   1402             _if67_exit:
2939   1402             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
2940   1402             _if68_cond:
2941   1402                             
2942   1402 3B 39 4E      mov d, _toktype ; $toktype
2943   1405 2A            mov b, [d]
2944   1406 38 00 00      mov c, 0
2945   1409             ; --- START RELATIONAL
2946   1409 D7            push a
2947   140A 11            mov a, b
2948   140B FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2948   140F 00 00 
2949   1411 B0            cmp a, b
2950   1412 FD 71         seq ; ==
2951   1414 E4            pop a
2952   1415             ; --- END RELATIONAL
2953   1415             ; --- START LOGICAL OR
2954   1415 D7            push a
2955   1416 11            mov a, b
2956   1417             ; --- START FUNCTION CALL
2957   1417                             
2958   1417 3B 3D 4E      mov d, _token_data ; $token
2959   141A 2D            mov b, d
2960   141B 38 00 00      mov c, 0
2961   141E FD AB         swp b
2962   1420 D8            push b
2963   1421 07 5D 23      call label_exists
2964   1424 51 02 00      add sp, 2
2965   1427             ; --- END FUNCTION CALL
2966   1427             ; --- START RELATIONAL
2967   1427 D7            push a
2968   1428 11            mov a, b
2969   1429 FD 2E FF FF   mov32 cb, $ffffffff
2969   142D FF FF 
2970   142F B0            cmp a, b
2971   1430 FD 72         sneq ; !=
2972   1432 E4            pop a
2973   1433             ; --- END RELATIONAL
2974   1433 FD A8         sor a, b ; ||
2975   1435 E4            pop a
2976   1436             ; --- END LOGICAL OR
2977   1436 C0 00 00      cmp b, 0
2978   1439 C6 4F 14      je _if68_exit
2979   143C             _if68_TRUE:
2980   143C             ; has_operands = 1; 
2981   143C FA 77 FF      lea d, [bp + -137] ; $has_operands
2982   143F DA            push d
2983   1440                             
2984   1440 FD 2E 01 00   mov32 cb, $00000001
2984   1444 00 00 
2985   1446 E7            pop d
2986   1447 FD 3E         mov [d], bl
2987   1449             ; break; 
2988   1449 0A 52 14      jmp _for66_exit ; for break
2989   144C 0A 4F 14      jmp _if68_exit
2990   144F             _if68_exit:
2991   144F             _for66_update:
2992   144F 0A E0 13      jmp _for66_cond
2993   1452             _for66_exit:
2994   1452             ; opcode[0] = '\0'; 
2995   1452 FA E1 FF      lea d, [bp + -31] ; $opcode
2996   1455 D7            push a
2997   1456 DA            push d
2998   1457                             
2999   1457 FD 2E 00 00   mov32 cb, $00000000
2999   145B 00 00 
3000   145D E7            pop d
3001   145E 5A            add d, b
3002   145F E4            pop a
3003   1460 DA            push d
3004   1461                             
3005   1461 FD 2E 00 00   mov32 cb, $00000000
3005   1465 00 00 
3006   1467 E7            pop d
3007   1468 FD 3E         mov [d], bl
3008   146A             ; prog = code_line; 
3009   146A 3B 3B 4E      mov d, _prog ; $prog
3010   146D DA            push d
3011   146E                             
3012   146E FA A1 FF      lea d, [bp + -95] ; $code_line
3013   1471 2D            mov b, d
3014   1472 38 00 00      mov c, 0
3015   1475 E7            pop d
3016   1476 FD 43         mov [d], b
3017   1478             ; if(!has_operands){ 
3018   1478             _if69_cond:
3019   1478                             
3020   1478 FA 77 FF      lea d, [bp + -137] ; $has_operands
3021   147B 32            mov bl, [d]
3022   147C A7 00         mov bh, 0
3023   147E 38 00 00      mov c, 0
3024   1481 C0 00 00      cmp b, 0
3025   1484 C6 0B 16      je _if69_else
3026   1487             _if69_TRUE:
3027   1487             ; get(); 
3028   1487                             
3029   1487             ; --- START FUNCTION CALL
3030   1487 07 60 2B      call get
3031   148A             ; strcpy(opcode, token); 
3032   148A                             
3033   148A             ; --- START FUNCTION CALL
3034   148A                             
3035   148A 3B 3D 4E      mov d, _token_data ; $token
3036   148D 2D            mov b, d
3037   148E 38 00 00      mov c, 0
3038   1491 FD AB         swp b
3039   1493 D8            push b
3040   1494                             
3041   1494 FA E1 FF      lea d, [bp + -31] ; $opcode
3042   1497 2D            mov b, d
3043   1498 38 00 00      mov c, 0
3044   149B FD AB         swp b
3045   149D D8            push b
3046   149E 07 5B 4B      call strcpy
3047   14A1 51 04 00      add sp, 4
3048   14A4             ; --- END FUNCTION CALL
3049   14A4             ; get();  
3050   14A4                             
3051   14A4             ; --- START FUNCTION CALL
3052   14A4 07 60 2B      call get
3053   14A7             ; if(toktype == END){ 
3054   14A7             _if70_cond:
3055   14A7                             
3056   14A7 3B 39 4E      mov d, _toktype ; $toktype
3057   14AA 2A            mov b, [d]
3058   14AB 38 00 00      mov c, 0
3059   14AE             ; --- START RELATIONAL
3060   14AE D7            push a
3061   14AF 11            mov a, b
3062   14B0 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3062   14B4 00 00 
3063   14B6 B0            cmp a, b
3064   14B7 FD 71         seq ; ==
3065   14B9 E4            pop a
3066   14BA             ; --- END RELATIONAL
3067   14BA C0 00 00      cmp b, 0
3068   14BD C6 D9 14      je _if70_else
3069   14C0             _if70_TRUE:
3070   14C0             ; strcat(opcode, " ."); 
3071   14C0                             
3072   14C0             ; --- START FUNCTION CALL
3073   14C0                             
3074   14C0 26 A9 50      mov b, _s25 ; " ."
3075   14C3 FD AB         swp b
3076   14C5 D8            push b
3077   14C6                             
3078   14C6 FA E1 FF      lea d, [bp + -31] ; $opcode
3079   14C9 2D            mov b, d
3080   14CA 38 00 00      mov c, 0
3081   14CD FD AB         swp b
3082   14CF D8            push b
3083   14D0 07 D5 4B      call strcat
3084   14D3 51 04 00      add sp, 4
3085   14D6             ; --- END FUNCTION CALL
3086   14D6 0A 48 15      jmp _if70_exit
3087   14D9             _if70_else:
3088   14D9             ; strcat(opcode, " "); 
3089   14D9                             
3090   14D9             ; --- START FUNCTION CALL
3091   14D9                             
3092   14D9 26 AC 50      mov b, _s26 ; " "
3093   14DC FD AB         swp b
3094   14DE D8            push b
3095   14DF                             
3096   14DF FA E1 FF      lea d, [bp + -31] ; $opcode
3097   14E2 2D            mov b, d
3098   14E3 38 00 00      mov c, 0
3099   14E6 FD AB         swp b
3100   14E8 D8            push b
3101   14E9 07 D5 4B      call strcat
3102   14EC 51 04 00      add sp, 4
3103   14EF             ; --- END FUNCTION CALL
3104   14EF             ; strcat(opcode, token); 
3105   14EF                             
3106   14EF             ; --- START FUNCTION CALL
3107   14EF                             
3108   14EF 3B 3D 4E      mov d, _token_data ; $token
3109   14F2 2D            mov b, d
3110   14F3 38 00 00      mov c, 0
3111   14F6 FD AB         swp b
3112   14F8 D8            push b
3113   14F9                             
3114   14F9 FA E1 FF      lea d, [bp + -31] ; $opcode
3115   14FC 2D            mov b, d
3116   14FD 38 00 00      mov c, 0
3117   1500 FD AB         swp b
3118   1502 D8            push b
3119   1503 07 D5 4B      call strcat
3120   1506 51 04 00      add sp, 4
3121   1509             ; --- END FUNCTION CALL
3122   1509             ; for(;;){ 
3123   1509             _for71_init:
3124   1509             _for71_cond:
3125   1509             _for71_block:
3126   1509             ; get(); 
3127   1509                             
3128   1509             ; --- START FUNCTION CALL
3129   1509 07 60 2B      call get
3130   150C             ; if(toktype == END) break; 
3131   150C             _if72_cond:
3132   150C                             
3133   150C 3B 39 4E      mov d, _toktype ; $toktype
3134   150F 2A            mov b, [d]
3135   1510 38 00 00      mov c, 0
3136   1513             ; --- START RELATIONAL
3137   1513 D7            push a
3138   1514 11            mov a, b
3139   1515 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3139   1519 00 00 
3140   151B B0            cmp a, b
3141   151C FD 71         seq ; ==
3142   151E E4            pop a
3143   151F             ; --- END RELATIONAL
3144   151F C0 00 00      cmp b, 0
3145   1522 C6 2B 15      je _if72_exit
3146   1525             _if72_TRUE:
3147   1525             ; break; 
3148   1525 0A 48 15      jmp _for71_exit ; for break
3149   1528 0A 2B 15      jmp _if72_exit
3150   152B             _if72_exit:
3151   152B             ; strcat(opcode, token); 
3152   152B                             
3153   152B             ; --- START FUNCTION CALL
3154   152B                             
3155   152B 3B 3D 4E      mov d, _token_data ; $token
3156   152E 2D            mov b, d
3157   152F 38 00 00      mov c, 0
3158   1532 FD AB         swp b
3159   1534 D8            push b
3160   1535                             
3161   1535 FA E1 FF      lea d, [bp + -31] ; $opcode
3162   1538 2D            mov b, d
3163   1539 38 00 00      mov c, 0
3164   153C FD AB         swp b
3165   153E D8            push b
3166   153F 07 D5 4B      call strcat
3167   1542 51 04 00      add sp, 4
3168   1545             ; --- END FUNCTION CALL
3169   1545             _for71_update:
3170   1545 0A 09 15      jmp _for71_cond
3171   1548             _for71_exit:
3172   1548             _if70_exit:
3173   1548             ; op = search_opcode(opcode); 
3174   1548 FA 87 FF      lea d, [bp + -121] ; $op
3175   154B DA            push d
3176   154C                             
3177   154C             ; --- START FUNCTION CALL
3178   154C                             
3179   154C FA E1 FF      lea d, [bp + -31] ; $opcode
3180   154F 2D            mov b, d
3181   1550 38 00 00      mov c, 0
3182   1553 FD AB         swp b
3183   1555 D8            push b
3184   1556 07 E2 23      call search_opcode
3185   1559 51 02 00      add sp, 2
3186   155C             ; --- END FUNCTION CALL
3187   155C E7            pop d
3188   155D FD 28         mov si, b
3189   155F FD 50         mov di, d
3190   1561 38 1A 00      mov c, 26
3191   1564 FD F5         rep movsb
3192   1566             ; instr_len = 1; 
3193   1566 FA 85 FF      lea d, [bp + -123] ; $instr_len
3194   1569 DA            push d
3195   156A                             
3196   156A FD 2E 01 00   mov32 cb, $00000001
3196   156E 00 00 
3197   1570 E7            pop d
3198   1571 FD 43         mov [d], b
3199   1573             ; if(op.opcode_type){ 
3200   1573             _if73_cond:
3201   1573                             
3202   1573 FA 87 FF      lea d, [bp + -121] ; $op
3203   1576 58 19 00      add d, 25
3204   1579 32            mov bl, [d]
3205   157A A7 00         mov bh, 0
3206   157C 38 00 00      mov c, 0
3207   157F C0 00 00      cmp b, 0
3208   1582 C6 AF 15      je _if73_exit
3209   1585             _if73_TRUE:
3210   1585             ; instr_len++; 
3211   1585                             
3212   1585 FA 85 FF      lea d, [bp + -123] ; $instr_len
3213   1588 2A            mov b, [d]
3214   1589 38 00 00      mov c, 0
3215   158C 11            mov a, b
3216   158D FD 77         inc b
3217   158F FA 85 FF      lea d, [bp + -123] ; $instr_len
3218   1592 FD 43         mov [d], b
3219   1594 27            mov b, a
3220   1595             ; emit_byte(0xFD, emit_override); 
3221   1595                             
3222   1595             ; --- START FUNCTION CALL
3223   1595                             
3224   1595 FA 05 00      lea d, [bp + 5] ; $emit_override
3225   1598 32            mov bl, [d]
3226   1599 A7 00         mov bh, 0
3227   159B 38 00 00      mov c, 0
3228   159E DD            push bl
3229   159F                             
3230   159F FD 2E FD 00   mov32 cb, $000000fd
3230   15A3 00 00 
3231   15A5 DD            push bl
3232   15A6 07 65 27      call emit_byte
3233   15A9 51 02 00      add sp, 2
3234   15AC             ; --- END FUNCTION CALL
3235   15AC 0A AF 15      jmp _if73_exit
3236   15AF             _if73_exit:
3237   15AF             ; emit_byte(op.opcode, emit_override); 
3238   15AF                             
3239   15AF             ; --- START FUNCTION CALL
3240   15AF                             
3241   15AF FA 05 00      lea d, [bp + 5] ; $emit_override
3242   15B2 32            mov bl, [d]
3243   15B3 A7 00         mov bh, 0
3244   15B5 38 00 00      mov c, 0
3245   15B8 DD            push bl
3246   15B9                             
3247   15B9 FA 87 FF      lea d, [bp + -121] ; $op
3248   15BC 58 18 00      add d, 24
3249   15BF 32            mov bl, [d]
3250   15C0 A7 00         mov bh, 0
3251   15C2 38 00 00      mov c, 0
3252   15C5 DD            push bl
3253   15C6 07 65 27      call emit_byte
3254   15C9 51 02 00      add sp, 2
3255   15CC             ; --- END FUNCTION CALL
3256   15CC             ; if(!emit_override){ 
3257   15CC             _if74_cond:
3258   15CC                             
3259   15CC FA 05 00      lea d, [bp + 5] ; $emit_override
3260   15CF 32            mov bl, [d]
3261   15D0 A7 00         mov bh, 0
3262   15D2 38 00 00      mov c, 0
3263   15D5 C0 00 00      cmp b, 0
3264   15D8 C6 08 16      je _if74_exit
3265   15DB             _if74_TRUE:
3266   15DB             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
3267   15DB                             
3268   15DB             ; --- START FUNCTION CALL
3269   15DB                             
3270   15DB FA A1 FF      lea d, [bp + -95] ; $code_line
3271   15DE 2D            mov b, d
3272   15DF 38 00 00      mov c, 0
3273   15E2 FD AB         swp b
3274   15E4 D8            push b
3275   15E5                             
3276   15E5 FA 85 FF      lea d, [bp + -123] ; $instr_len
3277   15E8 2A            mov b, [d]
3278   15E9 38 00 00      mov c, 0
3279   15EC FD AB         swp b
3280   15EE D8            push b
3281   15EF                             
3282   15EF FA 78 FF      lea d, [bp + -136] ; $old_pc
3283   15F2 2A            mov b, [d]
3284   15F3 38 00 00      mov c, 0
3285   15F6 FD AB         swp b
3286   15F8 D8            push b
3287   15F9                             
3288   15F9 26 0C 51      mov b, _s29 ; "%x(%d): %s\n"
3289   15FC FD AB         swp b
3290   15FE D8            push b
3291   15FF 07 60 42      call printf
3292   1602 51 08 00      add sp, 8
3293   1605             ; --- END FUNCTION CALL
3294   1605 0A 08 16      jmp _if74_exit
3295   1608             _if74_exit:
3296   1608 0A 17 1C      jmp _if69_exit
3297   160B             _if69_else:
3298   160B             ; num_operands = 0; 
3299   160B FA 83 FF      lea d, [bp + -125] ; $num_operands
3300   160E DA            push d
3301   160F                             
3302   160F FD 2E 00 00   mov32 cb, $00000000
3302   1613 00 00 
3303   1615 E7            pop d
3304   1616 FD 43         mov [d], b
3305   1618             ; for(;;){ 
3306   1618             _for75_init:
3307   1618             _for75_cond:
3308   1618             _for75_block:
3309   1618             ; get(); 
3310   1618                             
3311   1618             ; --- START FUNCTION CALL
3312   1618 07 60 2B      call get
3313   161B             ; if(toktype == END) break; 
3314   161B             _if76_cond:
3315   161B                             
3316   161B 3B 39 4E      mov d, _toktype ; $toktype
3317   161E 2A            mov b, [d]
3318   161F 38 00 00      mov c, 0
3319   1622             ; --- START RELATIONAL
3320   1622 D7            push a
3321   1623 11            mov a, b
3322   1624 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3322   1628 00 00 
3323   162A B0            cmp a, b
3324   162B FD 71         seq ; ==
3325   162D E4            pop a
3326   162E             ; --- END RELATIONAL
3327   162E C0 00 00      cmp b, 0
3328   1631 C6 3A 16      je _if76_exit
3329   1634             _if76_TRUE:
3330   1634             ; break; 
3331   1634 0A 8A 16      jmp _for75_exit ; for break
3332   1637 0A 3A 16      jmp _if76_exit
3333   163A             _if76_exit:
3334   163A             ; if(toktype == INTEGER_CONST || label_exists(token) != -1) num_operands++; 
3335   163A             _if77_cond:
3336   163A                             
3337   163A 3B 39 4E      mov d, _toktype ; $toktype
3338   163D 2A            mov b, [d]
3339   163E 38 00 00      mov c, 0
3340   1641             ; --- START RELATIONAL
3341   1641 D7            push a
3342   1642 11            mov a, b
3343   1643 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3343   1647 00 00 
3344   1649 B0            cmp a, b
3345   164A FD 71         seq ; ==
3346   164C E4            pop a
3347   164D             ; --- END RELATIONAL
3348   164D             ; --- START LOGICAL OR
3349   164D D7            push a
3350   164E 11            mov a, b
3351   164F             ; --- START FUNCTION CALL
3352   164F                             
3353   164F 3B 3D 4E      mov d, _token_data ; $token
3354   1652 2D            mov b, d
3355   1653 38 00 00      mov c, 0
3356   1656 FD AB         swp b
3357   1658 D8            push b
3358   1659 07 5D 23      call label_exists
3359   165C 51 02 00      add sp, 2
3360   165F             ; --- END FUNCTION CALL
3361   165F             ; --- START RELATIONAL
3362   165F D7            push a
3363   1660 11            mov a, b
3364   1661 FD 2E FF FF   mov32 cb, $ffffffff
3364   1665 FF FF 
3365   1667 B0            cmp a, b
3366   1668 FD 72         sneq ; !=
3367   166A E4            pop a
3368   166B             ; --- END RELATIONAL
3369   166B FD A8         sor a, b ; ||
3370   166D E4            pop a
3371   166E             ; --- END LOGICAL OR
3372   166E C0 00 00      cmp b, 0
3373   1671 C6 87 16      je _if77_exit
3374   1674             _if77_TRUE:
3375   1674             ; num_operands++; 
3376   1674                             
3377   1674 FA 83 FF      lea d, [bp + -125] ; $num_operands
3378   1677 2A            mov b, [d]
3379   1678 38 00 00      mov c, 0
3380   167B 11            mov a, b
3381   167C FD 77         inc b
3382   167E FA 83 FF      lea d, [bp + -125] ; $num_operands
3383   1681 FD 43         mov [d], b
3384   1683 27            mov b, a
3385   1684 0A 87 16      jmp _if77_exit
3386   1687             _if77_exit:
3387   1687             _for75_update:
3388   1687 0A 18 16      jmp _for75_cond
3389   168A             _for75_exit:
3390   168A             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
3391   168A             _if78_cond:
3392   168A                             
3393   168A FA 83 FF      lea d, [bp + -125] ; $num_operands
3394   168D 2A            mov b, [d]
3395   168E 38 00 00      mov c, 0
3396   1691             ; --- START RELATIONAL
3397   1691 D7            push a
3398   1692 11            mov a, b
3399   1693 FD 2E 02 00   mov32 cb, $00000002
3399   1697 00 00 
3400   1699 B0            cmp a, b
3401   169A FD 7F         sgt ; >
3402   169C E4            pop a
3403   169D             ; --- END RELATIONAL
3404   169D C0 00 00      cmp b, 0
3405   16A0 C6 B2 16      je _if78_exit
3406   16A3             _if78_TRUE:
3407   16A3             ; error("Maximum number of operands per instruction is 2."); 
3408   16A3                             
3409   16A3             ; --- START FUNCTION CALL
3410   16A3                             
3411   16A3 26 AE 50      mov b, _s27 ; "Maximum number of operands per instruction is 2."
3412   16A6 FD AB         swp b
3413   16A8 D8            push b
3414   16A9 07 5A 39      call error
3415   16AC 51 02 00      add sp, 2
3416   16AF             ; --- END FUNCTION CALL
3417   16AF 0A B2 16      jmp _if78_exit
3418   16B2             _if78_exit:
3419   16B2             ; num_operandsexp = exp(2, num_operands); 
3420   16B2 FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
3421   16B5 DA            push d
3422   16B6                             
3423   16B6             ; --- START FUNCTION CALL
3424   16B6                             
3425   16B6 FA 83 FF      lea d, [bp + -125] ; $num_operands
3426   16B9 2A            mov b, [d]
3427   16BA 38 00 00      mov c, 0
3428   16BD FD AB         swp b
3429   16BF D8            push b
3430   16C0                             
3431   16C0 FD 2E 02 00   mov32 cb, $00000002
3431   16C4 00 00 
3432   16C6 FD AB         swp b
3433   16C8 D8            push b
3434   16C9 07 83 3D      call exp
3435   16CC 51 04 00      add sp, 4
3436   16CF             ; --- END FUNCTION CALL
3437   16CF E7            pop d
3438   16D0 FD 43         mov [d], b
3439   16D2             ; for(i = 0; i < num_operandsexp; i++){ 
3440   16D2             _for79_init:
3441   16D2 FA 7F FF      lea d, [bp + -129] ; $i
3442   16D5 DA            push d
3443   16D6                             
3444   16D6 FD 2E 00 00   mov32 cb, $00000000
3444   16DA 00 00 
3445   16DC E7            pop d
3446   16DD FD 43         mov [d], b
3447   16DF             _for79_cond:
3448   16DF                             
3449   16DF FA 7F FF      lea d, [bp + -129] ; $i
3450   16E2 2A            mov b, [d]
3451   16E3 38 00 00      mov c, 0
3452   16E6             ; --- START RELATIONAL
3453   16E6 D7            push a
3454   16E7 11            mov a, b
3455   16E8 FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
3456   16EB 2A            mov b, [d]
3457   16EC 38 00 00      mov c, 0
3458   16EF B0            cmp a, b
3459   16F0 FD 73         slt ; < (signed)
3460   16F2 E4            pop a
3461   16F3             ; --- END RELATIONAL
3462   16F3 C0 00 00      cmp b, 0
3463   16F6 C6 17 1C      je _for79_exit
3464   16F9             _for79_block:
3465   16F9             ; prog = code_line; 
3466   16F9 3B 3B 4E      mov d, _prog ; $prog
3467   16FC DA            push d
3468   16FD                             
3469   16FD FA A1 FF      lea d, [bp + -95] ; $code_line
3470   1700 2D            mov b, d
3471   1701 38 00 00      mov c, 0
3472   1704 E7            pop d
3473   1705 FD 43         mov [d], b
3474   1707             ; get(); 
3475   1707                             
3476   1707             ; --- START FUNCTION CALL
3477   1707 07 60 2B      call get
3478   170A             ; strcpy(opcode, token); 
3479   170A                             
3480   170A             ; --- START FUNCTION CALL
3481   170A                             
3482   170A 3B 3D 4E      mov d, _token_data ; $token
3483   170D 2D            mov b, d
3484   170E 38 00 00      mov c, 0
3485   1711 FD AB         swp b
3486   1713 D8            push b
3487   1714                             
3488   1714 FA E1 FF      lea d, [bp + -31] ; $opcode
3489   1717 2D            mov b, d
3490   1718 38 00 00      mov c, 0
3491   171B FD AB         swp b
3492   171D D8            push b
3493   171E 07 5B 4B      call strcpy
3494   1721 51 04 00      add sp, 4
3495   1724             ; --- END FUNCTION CALL
3496   1724             ; strcat(opcode, " "); 
3497   1724                             
3498   1724             ; --- START FUNCTION CALL
3499   1724                             
3500   1724 26 AC 50      mov b, _s26 ; " "
3501   1727 FD AB         swp b
3502   1729 D8            push b
3503   172A                             
3504   172A FA E1 FF      lea d, [bp + -31] ; $opcode
3505   172D 2D            mov b, d
3506   172E 38 00 00      mov c, 0
3507   1731 FD AB         swp b
3508   1733 D8            push b
3509   1734 07 D5 4B      call strcat
3510   1737 51 04 00      add sp, 4
3511   173A             ; --- END FUNCTION CALL
3512   173A             ; j = 0; 
3513   173A FA 7D FF      lea d, [bp + -131] ; $j
3514   173D DA            push d
3515   173E                             
3516   173E FD 2E 00 00   mov32 cb, $00000000
3516   1742 00 00 
3517   1744 E7            pop d
3518   1745 FD 43         mov [d], b
3519   1747             ; for(;;){ 
3520   1747             _for80_init:
3521   1747             _for80_cond:
3522   1747             _for80_block:
3523   1747             ; get(); 
3524   1747                             
3525   1747             ; --- START FUNCTION CALL
3526   1747 07 60 2B      call get
3527   174A             ; if(toktype == END) break; 
3528   174A             _if81_cond:
3529   174A                             
3530   174A 3B 39 4E      mov d, _toktype ; $toktype
3531   174D 2A            mov b, [d]
3532   174E 38 00 00      mov c, 0
3533   1751             ; --- START RELATIONAL
3534   1751 D7            push a
3535   1752 11            mov a, b
3536   1753 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3536   1757 00 00 
3537   1759 B0            cmp a, b
3538   175A FD 71         seq ; ==
3539   175C E4            pop a
3540   175D             ; --- END RELATIONAL
3541   175D C0 00 00      cmp b, 0
3542   1760 C6 69 17      je _if81_exit
3543   1763             _if81_TRUE:
3544   1763             ; break; 
3545   1763 0A DA 18      jmp _for80_exit ; for break
3546   1766 0A 69 17      jmp _if81_exit
3547   1769             _if81_exit:
3548   1769             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
3549   1769             _if82_cond:
3550   1769                             
3551   1769 3B 39 4E      mov d, _toktype ; $toktype
3552   176C 2A            mov b, [d]
3553   176D 38 00 00      mov c, 0
3554   1770             ; --- START RELATIONAL
3555   1770 D7            push a
3556   1771 11            mov a, b
3557   1772 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3557   1776 00 00 
3558   1778 B0            cmp a, b
3559   1779 FD 71         seq ; ==
3560   177B E4            pop a
3561   177C             ; --- END RELATIONAL
3562   177C             ; --- START LOGICAL OR
3563   177C D7            push a
3564   177D 11            mov a, b
3565   177E             ; --- START FUNCTION CALL
3566   177E                             
3567   177E 3B 3D 4E      mov d, _token_data ; $token
3568   1781 2D            mov b, d
3569   1782 38 00 00      mov c, 0
3570   1785 FD AB         swp b
3571   1787 D8            push b
3572   1788 07 5D 23      call label_exists
3573   178B 51 02 00      add sp, 2
3574   178E             ; --- END FUNCTION CALL
3575   178E             ; --- START RELATIONAL
3576   178E D7            push a
3577   178F 11            mov a, b
3578   1790 FD 2E FF FF   mov32 cb, $ffffffff
3578   1794 FF FF 
3579   1796 B0            cmp a, b
3580   1797 FD 72         sneq ; !=
3581   1799 E4            pop a
3582   179A             ; --- END RELATIONAL
3583   179A FD A8         sor a, b ; ||
3584   179C E4            pop a
3585   179D             ; --- END LOGICAL OR
3586   179D C0 00 00      cmp b, 0
3587   17A0 C6 BD 18      je _if82_else
3588   17A3             _if82_TRUE:
3589   17A3             ; strcat(opcode, symbols[i*2+j]); 
3590   17A3                             
3591   17A3             ; --- START FUNCTION CALL
3592   17A3                             
3593   17A3 3B 9F 4F      mov d, _symbols_data ; $symbols
3594   17A6 D7            push a
3595   17A7 DA            push d
3596   17A8                             
3597   17A8 FA 7F FF      lea d, [bp + -129] ; $i
3598   17AB 2A            mov b, [d]
3599   17AC 38 00 00      mov c, 0
3600   17AF             ; --- START FACTORS
3601   17AF D7            push a
3602   17B0 FD D8         push g
3603   17B2 11            mov a, b
3604   17B3 FD 7A         mov g, c
3605   17B5 FD 2E 02 00   mov32 cb, $00000002
3605   17B9 00 00 
3606   17BB D7            push a     ; save left operand
3607   17BC 8E            xor a, b   ; xor sign bits
3608   17BD FD AA         swp a      ; swap bytes
3609   17BF 83            mov cl, al ; save result of xor into 'dl'
3610   17C0 E4            pop a      ; restore left side operator
3611   17C1 DF            push cl    ; save result of xor above
3612   17C2 FD AA         swp a  
3613   17C4 93 80         test al, $80  
3614   17C6 FD AA         swp a  
3615   17C8 C6 CD 17      jz skip_invert_a_83  
3616   17CB FD 95         neg a 
3617   17CD             skip_invert_a_83:   
3618   17CD FD AB         swp b
3619   17CF FD 93 80      test bl, $80  
3620   17D2 FD AB         swp b
3621   17D4 C6 D9 17      jz skip_invert_b_83  
3622   17D7 FD 97         neg b 
3623   17D9             skip_invert_b_83:   
3624   17D9 AC            mul a, b ; *
3625   17DA FD 78         mov g, a
3626   17DC 11            mov a, b
3627   17DD EA            pop bl
3628   17DE FD 93 80      test bl, $80
3629   17E1 C6 EE 17      jz _same_signs_83
3630   17E4 2F            mov bl, al
3631   17E5 95            not a
3632   17E6 FD 97         neg b
3633   17E8 5B 00 00      adc a, 0
3634   17EB FD 78         mov g, a
3635   17ED 11            mov a, b
3636   17EE             _same_signs_83:
3637   17EE FD 38         mov c, g
3638   17F0 27            mov b, a
3639   17F1 FD F1         pop g
3640   17F3 E4            pop a
3641   17F4             ; --- END FACTORS
3642   17F4             ; --- START TERMS
3643   17F4 D7            push a
3644   17F5 FD D8         push g
3645   17F7 11            mov a, b
3646   17F8 FD 7A         mov g, c
3647   17FA FA 7D FF      lea d, [bp + -131] ; $j
3648   17FD 2A            mov b, [d]
3649   17FE 38 00 00      mov c, 0
3650   1801 FD 15         add32 cb, ga
3651   1803 FD F1         pop g
3652   1805 E4            pop a
3653   1806             ; --- END TERMS
3654   1806 E7            pop d
3655   1807 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3656   180B E4            pop a
3657   180C 2A            mov b, [d]
3658   180D 38 00 00      mov c, 0
3659   1810 FD AB         swp b
3660   1812 D8            push b
3661   1813                             
3662   1813 FA E1 FF      lea d, [bp + -31] ; $opcode
3663   1816 2D            mov b, d
3664   1817 38 00 00      mov c, 0
3665   181A FD AB         swp b
3666   181C D8            push b
3667   181D 07 D5 4B      call strcat
3668   1820 51 04 00      add sp, 4
3669   1823             ; --- END FUNCTION CALL
3670   1823             ; operand_types[j] = *symbols[i*2+j]; 
3671   1823 FA 7A FF      lea d, [bp + -134] ; $operand_types
3672   1826 D7            push a
3673   1827 DA            push d
3674   1828                             
3675   1828 FA 7D FF      lea d, [bp + -131] ; $j
3676   182B 2A            mov b, [d]
3677   182C 38 00 00      mov c, 0
3678   182F E7            pop d
3679   1830 5A            add d, b
3680   1831 E4            pop a
3681   1832 DA            push d
3682   1833                             
3683   1833 3B 9F 4F      mov d, _symbols_data ; $symbols
3684   1836 D7            push a
3685   1837 DA            push d
3686   1838                             
3687   1838 FA 7F FF      lea d, [bp + -129] ; $i
3688   183B 2A            mov b, [d]
3689   183C 38 00 00      mov c, 0
3690   183F             ; --- START FACTORS
3691   183F D7            push a
3692   1840 FD D8         push g
3693   1842 11            mov a, b
3694   1843 FD 7A         mov g, c
3695   1845 FD 2E 02 00   mov32 cb, $00000002
3695   1849 00 00 
3696   184B D7            push a     ; save left operand
3697   184C 8E            xor a, b   ; xor sign bits
3698   184D FD AA         swp a      ; swap bytes
3699   184F 83            mov cl, al ; save result of xor into 'dl'
3700   1850 E4            pop a      ; restore left side operator
3701   1851 DF            push cl    ; save result of xor above
3702   1852 FD AA         swp a  
3703   1854 93 80         test al, $80  
3704   1856 FD AA         swp a  
3705   1858 C6 5D 18      jz skip_invert_a_84  
3706   185B FD 95         neg a 
3707   185D             skip_invert_a_84:   
3708   185D FD AB         swp b
3709   185F FD 93 80      test bl, $80  
3710   1862 FD AB         swp b
3711   1864 C6 69 18      jz skip_invert_b_84  
3712   1867 FD 97         neg b 
3713   1869             skip_invert_b_84:   
3714   1869 AC            mul a, b ; *
3715   186A FD 78         mov g, a
3716   186C 11            mov a, b
3717   186D EA            pop bl
3718   186E FD 93 80      test bl, $80
3719   1871 C6 7E 18      jz _same_signs_84
3720   1874 2F            mov bl, al
3721   1875 95            not a
3722   1876 FD 97         neg b
3723   1878 5B 00 00      adc a, 0
3724   187B FD 78         mov g, a
3725   187D 11            mov a, b
3726   187E             _same_signs_84:
3727   187E FD 38         mov c, g
3728   1880 27            mov b, a
3729   1881 FD F1         pop g
3730   1883 E4            pop a
3731   1884             ; --- END FACTORS
3732   1884             ; --- START TERMS
3733   1884 D7            push a
3734   1885 FD D8         push g
3735   1887 11            mov a, b
3736   1888 FD 7A         mov g, c
3737   188A FA 7D FF      lea d, [bp + -131] ; $j
3738   188D 2A            mov b, [d]
3739   188E 38 00 00      mov c, 0
3740   1891 FD 15         add32 cb, ga
3741   1893 FD F1         pop g
3742   1895 E4            pop a
3743   1896             ; --- END TERMS
3744   1896 E7            pop d
3745   1897 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3746   189B E4            pop a
3747   189C 2A            mov b, [d]
3748   189D 38 00 00      mov c, 0
3749   18A0 74            mov d, b
3750   18A1 32            mov bl, [d]
3751   18A2 A7 00         mov bh, 0
3752   18A4 38 00 00      mov c, 0
3753   18A7 E7            pop d
3754   18A8 FD 3E         mov [d], bl
3755   18AA             ; j++; 
3756   18AA                             
3757   18AA FA 7D FF      lea d, [bp + -131] ; $j
3758   18AD 2A            mov b, [d]
3759   18AE 38 00 00      mov c, 0
3760   18B1 11            mov a, b
3761   18B2 FD 77         inc b
3762   18B4 FA 7D FF      lea d, [bp + -131] ; $j
3763   18B7 FD 43         mov [d], b
3764   18B9 27            mov b, a
3765   18BA 0A D7 18      jmp _if82_exit
3766   18BD             _if82_else:
3767   18BD             ; strcat(opcode, token); 
3768   18BD                             
3769   18BD             ; --- START FUNCTION CALL
3770   18BD                             
3771   18BD 3B 3D 4E      mov d, _token_data ; $token
3772   18C0 2D            mov b, d
3773   18C1 38 00 00      mov c, 0
3774   18C4 FD AB         swp b
3775   18C6 D8            push b
3776   18C7                             
3777   18C7 FA E1 FF      lea d, [bp + -31] ; $opcode
3778   18CA 2D            mov b, d
3779   18CB 38 00 00      mov c, 0
3780   18CE FD AB         swp b
3781   18D0 D8            push b
3782   18D1 07 D5 4B      call strcat
3783   18D4 51 04 00      add sp, 4
3784   18D7             ; --- END FUNCTION CALL
3785   18D7             _if82_exit:
3786   18D7             _for80_update:
3787   18D7 0A 47 17      jmp _for80_cond
3788   18DA             _for80_exit:
3789   18DA             ; op = search_opcode(opcode); 
3790   18DA FA 87 FF      lea d, [bp + -121] ; $op
3791   18DD DA            push d
3792   18DE                             
3793   18DE             ; --- START FUNCTION CALL
3794   18DE                             
3795   18DE FA E1 FF      lea d, [bp + -31] ; $opcode
3796   18E1 2D            mov b, d
3797   18E2 38 00 00      mov c, 0
3798   18E5 FD AB         swp b
3799   18E7 D8            push b
3800   18E8 07 E2 23      call search_opcode
3801   18EB 51 02 00      add sp, 2
3802   18EE             ; --- END FUNCTION CALL
3803   18EE E7            pop d
3804   18EF FD 28         mov si, b
3805   18F1 FD 50         mov di, d
3806   18F3 38 1A 00      mov c, 26
3807   18F6 FD F5         rep movsb
3808   18F8             ; if(op.name[0] == '\0') continue; 
3809   18F8             _if85_cond:
3810   18F8                             
3811   18F8 FA 87 FF      lea d, [bp + -121] ; $op
3812   18FB 58 00 00      add d, 0
3813   18FE D7            push a
3814   18FF DA            push d
3815   1900                             
3816   1900 FD 2E 00 00   mov32 cb, $00000000
3816   1904 00 00 
3817   1906 E7            pop d
3818   1907 5A            add d, b
3819   1908 E4            pop a
3820   1909 32            mov bl, [d]
3821   190A A7 00         mov bh, 0
3822   190C 38 00 00      mov c, 0
3823   190F             ; --- START RELATIONAL
3824   190F D7            push a
3825   1910 11            mov a, b
3826   1911 FD 2E 00 00   mov32 cb, $00000000
3826   1915 00 00 
3827   1917 B0            cmp a, b
3828   1918 FD 71         seq ; ==
3829   191A E4            pop a
3830   191B             ; --- END RELATIONAL
3831   191B C0 00 00      cmp b, 0
3832   191E C6 27 19      je _if85_exit
3833   1921             _if85_TRUE:
3834   1921             ; continue; 
3835   1921 0A 04 1C      jmp _for79_update ; for continue
3836   1924 0A 27 19      jmp _if85_exit
3837   1927             _if85_exit:
3838   1927             ; instr_len = 1; 
3839   1927 FA 85 FF      lea d, [bp + -123] ; $instr_len
3840   192A DA            push d
3841   192B                             
3842   192B FD 2E 01 00   mov32 cb, $00000001
3842   192F 00 00 
3843   1931 E7            pop d
3844   1932 FD 43         mov [d], b
3845   1934             ; if(op.opcode_type){ 
3846   1934             _if86_cond:
3847   1934                             
3848   1934 FA 87 FF      lea d, [bp + -121] ; $op
3849   1937 58 19 00      add d, 25
3850   193A 32            mov bl, [d]
3851   193B A7 00         mov bh, 0
3852   193D 38 00 00      mov c, 0
3853   1940 C0 00 00      cmp b, 0
3854   1943 C6 70 19      je _if86_exit
3855   1946             _if86_TRUE:
3856   1946             ; emit_byte(0xFD, emit_override); 
3857   1946                             
3858   1946             ; --- START FUNCTION CALL
3859   1946                             
3860   1946 FA 05 00      lea d, [bp + 5] ; $emit_override
3861   1949 32            mov bl, [d]
3862   194A A7 00         mov bh, 0
3863   194C 38 00 00      mov c, 0
3864   194F DD            push bl
3865   1950                             
3866   1950 FD 2E FD 00   mov32 cb, $000000fd
3866   1954 00 00 
3867   1956 DD            push bl
3868   1957 07 65 27      call emit_byte
3869   195A 51 02 00      add sp, 2
3870   195D             ; --- END FUNCTION CALL
3871   195D             ; instr_len++; 
3872   195D                             
3873   195D FA 85 FF      lea d, [bp + -123] ; $instr_len
3874   1960 2A            mov b, [d]
3875   1961 38 00 00      mov c, 0
3876   1964 11            mov a, b
3877   1965 FD 77         inc b
3878   1967 FA 85 FF      lea d, [bp + -123] ; $instr_len
3879   196A FD 43         mov [d], b
3880   196C 27            mov b, a
3881   196D 0A 70 19      jmp _if86_exit
3882   1970             _if86_exit:
3883   1970             ; emit_byte(op.opcode, emit_override); 
3884   1970                             
3885   1970             ; --- START FUNCTION CALL
3886   1970                             
3887   1970 FA 05 00      lea d, [bp + 5] ; $emit_override
3888   1973 32            mov bl, [d]
3889   1974 A7 00         mov bh, 0
3890   1976 38 00 00      mov c, 0
3891   1979 DD            push bl
3892   197A                             
3893   197A FA 87 FF      lea d, [bp + -121] ; $op
3894   197D 58 18 00      add d, 24
3895   1980 32            mov bl, [d]
3896   1981 A7 00         mov bh, 0
3897   1983 38 00 00      mov c, 0
3898   1986 DD            push bl
3899   1987 07 65 27      call emit_byte
3900   198A 51 02 00      add sp, 2
3901   198D             ; --- END FUNCTION CALL
3902   198D             ; prog = code_line; 
3903   198D 3B 3B 4E      mov d, _prog ; $prog
3904   1990 DA            push d
3905   1991                             
3906   1991 FA A1 FF      lea d, [bp + -95] ; $code_line
3907   1994 2D            mov b, d
3908   1995 38 00 00      mov c, 0
3909   1998 E7            pop d
3910   1999 FD 43         mov [d], b
3911   199B             ; j = 0; 
3912   199B FA 7D FF      lea d, [bp + -131] ; $j
3913   199E DA            push d
3914   199F                             
3915   199F FD 2E 00 00   mov32 cb, $00000000
3915   19A3 00 00 
3916   19A5 E7            pop d
3917   19A6 FD 43         mov [d], b
3918   19A8             ; get(); 
3919   19A8                             
3920   19A8             ; --- START FUNCTION CALL
3921   19A8 07 60 2B      call get
3922   19AB             ; for(;;){ 
3923   19AB             _for87_init:
3924   19AB             _for87_cond:
3925   19AB             _for87_block:
3926   19AB             ; get(); 
3927   19AB                             
3928   19AB             ; --- START FUNCTION CALL
3929   19AB 07 60 2B      call get
3930   19AE             ; if(toktype == END) break; 
3931   19AE             _if88_cond:
3932   19AE                             
3933   19AE 3B 39 4E      mov d, _toktype ; $toktype
3934   19B1 2A            mov b, [d]
3935   19B2 38 00 00      mov c, 0
3936   19B5             ; --- START RELATIONAL
3937   19B5 D7            push a
3938   19B6 11            mov a, b
3939   19B7 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3939   19BB 00 00 
3940   19BD B0            cmp a, b
3941   19BE FD 71         seq ; ==
3942   19C0 E4            pop a
3943   19C1             ; --- END RELATIONAL
3944   19C1 C0 00 00      cmp b, 0
3945   19C4 C6 CD 19      je _if88_exit
3946   19C7             _if88_TRUE:
3947   19C7             ; break; 
3948   19C7 0A C5 1B      jmp _for87_exit ; for break
3949   19CA 0A CD 19      jmp _if88_exit
3950   19CD             _if88_exit:
3951   19CD             ; if(toktype == IDENTIFIER){ 
3952   19CD             _if89_cond:
3953   19CD                             
3954   19CD 3B 39 4E      mov d, _toktype ; $toktype
3955   19D0 2A            mov b, [d]
3956   19D1 38 00 00      mov c, 0
3957   19D4             ; --- START RELATIONAL
3958   19D4 D7            push a
3959   19D5 11            mov a, b
3960   19D6 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
3960   19DA 00 00 
3961   19DC B0            cmp a, b
3962   19DD FD 71         seq ; ==
3963   19DF E4            pop a
3964   19E0             ; --- END RELATIONAL
3965   19E0 C0 00 00      cmp b, 0
3966   19E3 C6 E8 1A      je _if89_else
3967   19E6             _if89_TRUE:
3968   19E6             ; if(label_exists(token) != -1){ 
3969   19E6             _if90_cond:
3970   19E6                             
3971   19E6             ; --- START FUNCTION CALL
3972   19E6                             
3973   19E6 3B 3D 4E      mov d, _token_data ; $token
3974   19E9 2D            mov b, d
3975   19EA 38 00 00      mov c, 0
3976   19ED FD AB         swp b
3977   19EF D8            push b
3978   19F0 07 5D 23      call label_exists
3979   19F3 51 02 00      add sp, 2
3980   19F6             ; --- END FUNCTION CALL
3981   19F6             ; --- START RELATIONAL
3982   19F6 D7            push a
3983   19F7 11            mov a, b
3984   19F8 FD 2E FF FF   mov32 cb, $ffffffff
3984   19FC FF FF 
3985   19FE B0            cmp a, b
3986   19FF FD 72         sneq ; !=
3987   1A01 E4            pop a
3988   1A02             ; --- END RELATIONAL
3989   1A02 C0 00 00      cmp b, 0
3990   1A05 C6 B6 1A      je _if90_else
3991   1A08             _if90_TRUE:
3992   1A08             ; if(operand_types[j] == '#'){ 
3993   1A08             _if91_cond:
3994   1A08                             
3995   1A08 FA 7A FF      lea d, [bp + -134] ; $operand_types
3996   1A0B D7            push a
3997   1A0C DA            push d
3998   1A0D                             
3999   1A0D FA 7D FF      lea d, [bp + -131] ; $j
4000   1A10 2A            mov b, [d]
4001   1A11 38 00 00      mov c, 0
4002   1A14 E7            pop d
4003   1A15 5A            add d, b
4004   1A16 E4            pop a
4005   1A17 32            mov bl, [d]
4006   1A18 A7 00         mov bh, 0
4007   1A1A 38 00 00      mov c, 0
4008   1A1D             ; --- START RELATIONAL
4009   1A1D D7            push a
4010   1A1E 11            mov a, b
4011   1A1F FD 2E 23 00   mov32 cb, $00000023
4011   1A23 00 00 
4012   1A25 B0            cmp a, b
4013   1A26 FD 71         seq ; ==
4014   1A28 E4            pop a
4015   1A29             ; --- END RELATIONAL
4016   1A29 C0 00 00      cmp b, 0
4017   1A2C C6 3E 1A      je _if91_else
4018   1A2F             _if91_TRUE:
4019   1A2F             ; error("8bit operand expected but 16bit label given."); 
4020   1A2F                             
4021   1A2F             ; --- START FUNCTION CALL
4022   1A2F                             
4023   1A2F 26 DF 50      mov b, _s28 ; "8bit operand expected but 16bit label given."
4024   1A32 FD AB         swp b
4025   1A34 D8            push b
4026   1A35 07 5A 39      call error
4027   1A38 51 02 00      add sp, 2
4028   1A3B             ; --- END FUNCTION CALL
4029   1A3B 0A A3 1A      jmp _if91_exit
4030   1A3E             _if91_else:
4031   1A3E             ; if(operand_types[j] == '@'){ 
4032   1A3E             _if92_cond:
4033   1A3E                             
4034   1A3E FA 7A FF      lea d, [bp + -134] ; $operand_types
4035   1A41 D7            push a
4036   1A42 DA            push d
4037   1A43                             
4038   1A43 FA 7D FF      lea d, [bp + -131] ; $j
4039   1A46 2A            mov b, [d]
4040   1A47 38 00 00      mov c, 0
4041   1A4A E7            pop d
4042   1A4B 5A            add d, b
4043   1A4C E4            pop a
4044   1A4D 32            mov bl, [d]
4045   1A4E A7 00         mov bh, 0
4046   1A50 38 00 00      mov c, 0
4047   1A53             ; --- START RELATIONAL
4048   1A53 D7            push a
4049   1A54 11            mov a, b
4050   1A55 FD 2E 40 00   mov32 cb, $00000040
4050   1A59 00 00 
4051   1A5B B0            cmp a, b
4052   1A5C FD 71         seq ; ==
4053   1A5E E4            pop a
4054   1A5F             ; --- END RELATIONAL
4055   1A5F C0 00 00      cmp b, 0
4056   1A62 C6 A3 1A      je _if92_exit
4057   1A65             _if92_TRUE:
4058   1A65             ; emit_word(get_label_addr(token), emit_override); 
4059   1A65                             
4060   1A65             ; --- START FUNCTION CALL
4061   1A65                             
4062   1A65 FA 05 00      lea d, [bp + 5] ; $emit_override
4063   1A68 32            mov bl, [d]
4064   1A69 A7 00         mov bh, 0
4065   1A6B 38 00 00      mov c, 0
4066   1A6E DD            push bl
4067   1A6F                             
4068   1A6F             ; --- START FUNCTION CALL
4069   1A6F                             
4070   1A6F 3B 3D 4E      mov d, _token_data ; $token
4071   1A72 2D            mov b, d
4072   1A73 38 00 00      mov c, 0
4073   1A76 FD AB         swp b
4074   1A78 D8            push b
4075   1A79 07 B6 22      call get_label_addr
4076   1A7C 51 02 00      add sp, 2
4077   1A7F             ; --- END FUNCTION CALL
4078   1A7F FD AB         swp b
4079   1A81 D8            push b
4080   1A82 07 9D 27      call emit_word
4081   1A85 51 03 00      add sp, 3
4082   1A88             ; --- END FUNCTION CALL
4083   1A88             ; instr_len = instr_len + 2; 
4084   1A88 FA 85 FF      lea d, [bp + -123] ; $instr_len
4085   1A8B DA            push d
4086   1A8C                             
4087   1A8C FA 85 FF      lea d, [bp + -123] ; $instr_len
4088   1A8F 2A            mov b, [d]
4089   1A90 38 00 00      mov c, 0
4090   1A93             ; --- START TERMS
4091   1A93 D7            push a
4092   1A94 11            mov a, b
4093   1A95 FD 2E 02 00   mov32 cb, $00000002
4093   1A99 00 00 
4094   1A9B 56            add b, a
4095   1A9C E4            pop a
4096   1A9D             ; --- END TERMS
4097   1A9D E7            pop d
4098   1A9E FD 43         mov [d], b
4099   1AA0 0A A3 1A      jmp _if92_exit
4100   1AA3             _if92_exit:
4101   1AA3             _if91_exit:
4102   1AA3             ; j++; 
4103   1AA3                             
4104   1AA3 FA 7D FF      lea d, [bp + -131] ; $j
4105   1AA6 2A            mov b, [d]
4106   1AA7 38 00 00      mov c, 0
4107   1AAA 11            mov a, b
4108   1AAB FD 77         inc b
4109   1AAD FA 7D FF      lea d, [bp + -131] ; $j
4110   1AB0 FD 43         mov [d], b
4111   1AB2 27            mov b, a
4112   1AB3 0A E5 1A      jmp _if90_exit
4113   1AB6             _if90_else:
4114   1AB6             ; if(!is_reserved(token)){ 
4115   1AB6             _if93_cond:
4116   1AB6                             
4117   1AB6             ; --- START FUNCTION CALL
4118   1AB6                             
4119   1AB6 3B 3D 4E      mov d, _token_data ; $token
4120   1AB9 2D            mov b, d
4121   1ABA 38 00 00      mov c, 0
4122   1ABD FD AB         swp b
4123   1ABF D8            push b
4124   1AC0 07 04 1F      call is_reserved
4125   1AC3 51 02 00      add sp, 2
4126   1AC6             ; --- END FUNCTION CALL
4127   1AC6 C0 00 00      cmp b, 0
4128   1AC9 C6 E5 1A      je _if93_exit
4129   1ACC             _if93_TRUE:
4130   1ACC             ; error_s("Undeclared label: ", token); 
4131   1ACC                             
4132   1ACC             ; --- START FUNCTION CALL
4133   1ACC                             
4134   1ACC 3B 3D 4E      mov d, _token_data ; $token
4135   1ACF 2D            mov b, d
4136   1AD0 38 00 00      mov c, 0
4137   1AD3 FD AB         swp b
4138   1AD5 D8            push b
4139   1AD6                             
4140   1AD6 26 18 51      mov b, _s30 ; "Undeclared label: "
4141   1AD9 FD AB         swp b
4142   1ADB D8            push b
4143   1ADC 07 78 39      call error_s
4144   1ADF 51 04 00      add sp, 4
4145   1AE2             ; --- END FUNCTION CALL
4146   1AE2 0A E5 1A      jmp _if93_exit
4147   1AE5             _if93_exit:
4148   1AE5             _if90_exit:
4149   1AE5 0A C2 1B      jmp _if89_exit
4150   1AE8             _if89_else:
4151   1AE8             ; if(toktype == INTEGER_CONST){ 
4152   1AE8             _if94_cond:
4153   1AE8                             
4154   1AE8 3B 39 4E      mov d, _toktype ; $toktype
4155   1AEB 2A            mov b, [d]
4156   1AEC 38 00 00      mov c, 0
4157   1AEF             ; --- START RELATIONAL
4158   1AEF D7            push a
4159   1AF0 11            mov a, b
4160   1AF1 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
4160   1AF5 00 00 
4161   1AF7 B0            cmp a, b
4162   1AF8 FD 71         seq ; ==
4163   1AFA E4            pop a
4164   1AFB             ; --- END RELATIONAL
4165   1AFB C0 00 00      cmp b, 0
4166   1AFE C6 C2 1B      je _if94_exit
4167   1B01             _if94_TRUE:
4168   1B01             ; if(operand_types[j] == '#'){ 
4169   1B01             _if95_cond:
4170   1B01                             
4171   1B01 FA 7A FF      lea d, [bp + -134] ; $operand_types
4172   1B04 D7            push a
4173   1B05 DA            push d
4174   1B06                             
4175   1B06 FA 7D FF      lea d, [bp + -131] ; $j
4176   1B09 2A            mov b, [d]
4177   1B0A 38 00 00      mov c, 0
4178   1B0D E7            pop d
4179   1B0E 5A            add d, b
4180   1B0F E4            pop a
4181   1B10 32            mov bl, [d]
4182   1B11 A7 00         mov bh, 0
4183   1B13 38 00 00      mov c, 0
4184   1B16             ; --- START RELATIONAL
4185   1B16 D7            push a
4186   1B17 11            mov a, b
4187   1B18 FD 2E 23 00   mov32 cb, $00000023
4187   1B1C 00 00 
4188   1B1E B0            cmp a, b
4189   1B1F FD 71         seq ; ==
4190   1B21 E4            pop a
4191   1B22             ; --- END RELATIONAL
4192   1B22 C0 00 00      cmp b, 0
4193   1B25 C6 53 1B      je _if95_else
4194   1B28             _if95_TRUE:
4195   1B28             ; emit_byte(int_const, emit_override); 
4196   1B28                             
4197   1B28             ; --- START FUNCTION CALL
4198   1B28                             
4199   1B28 FA 05 00      lea d, [bp + 5] ; $emit_override
4200   1B2B 32            mov bl, [d]
4201   1B2C A7 00         mov bh, 0
4202   1B2E 38 00 00      mov c, 0
4203   1B31 DD            push bl
4204   1B32                             
4205   1B32 3B 7D 4F      mov d, _int_const ; $int_const
4206   1B35 2A            mov b, [d]
4207   1B36 38 00 00      mov c, 0
4208   1B39 DD            push bl
4209   1B3A 07 65 27      call emit_byte
4210   1B3D 51 02 00      add sp, 2
4211   1B40             ; --- END FUNCTION CALL
4212   1B40             ; instr_len++; 
4213   1B40                             
4214   1B40 FA 85 FF      lea d, [bp + -123] ; $instr_len
4215   1B43 2A            mov b, [d]
4216   1B44 38 00 00      mov c, 0
4217   1B47 11            mov a, b
4218   1B48 FD 77         inc b
4219   1B4A FA 85 FF      lea d, [bp + -123] ; $instr_len
4220   1B4D FD 43         mov [d], b
4221   1B4F 27            mov b, a
4222   1B50 0A AF 1B      jmp _if95_exit
4223   1B53             _if95_else:
4224   1B53             ; if(operand_types[j] == '@'){ 
4225   1B53             _if96_cond:
4226   1B53                             
4227   1B53 FA 7A FF      lea d, [bp + -134] ; $operand_types
4228   1B56 D7            push a
4229   1B57 DA            push d
4230   1B58                             
4231   1B58 FA 7D FF      lea d, [bp + -131] ; $j
4232   1B5B 2A            mov b, [d]
4233   1B5C 38 00 00      mov c, 0
4234   1B5F E7            pop d
4235   1B60 5A            add d, b
4236   1B61 E4            pop a
4237   1B62 32            mov bl, [d]
4238   1B63 A7 00         mov bh, 0
4239   1B65 38 00 00      mov c, 0
4240   1B68             ; --- START RELATIONAL
4241   1B68 D7            push a
4242   1B69 11            mov a, b
4243   1B6A FD 2E 40 00   mov32 cb, $00000040
4243   1B6E 00 00 
4244   1B70 B0            cmp a, b
4245   1B71 FD 71         seq ; ==
4246   1B73 E4            pop a
4247   1B74             ; --- END RELATIONAL
4248   1B74 C0 00 00      cmp b, 0
4249   1B77 C6 AF 1B      je _if96_exit
4250   1B7A             _if96_TRUE:
4251   1B7A             ; emit_word(int_const, emit_override); 
4252   1B7A                             
4253   1B7A             ; --- START FUNCTION CALL
4254   1B7A                             
4255   1B7A FA 05 00      lea d, [bp + 5] ; $emit_override
4256   1B7D 32            mov bl, [d]
4257   1B7E A7 00         mov bh, 0
4258   1B80 38 00 00      mov c, 0
4259   1B83 DD            push bl
4260   1B84                             
4261   1B84 3B 7D 4F      mov d, _int_const ; $int_const
4262   1B87 2A            mov b, [d]
4263   1B88 38 00 00      mov c, 0
4264   1B8B FD AB         swp b
4265   1B8D D8            push b
4266   1B8E 07 9D 27      call emit_word
4267   1B91 51 03 00      add sp, 3
4268   1B94             ; --- END FUNCTION CALL
4269   1B94             ; instr_len = instr_len + 2; 
4270   1B94 FA 85 FF      lea d, [bp + -123] ; $instr_len
4271   1B97 DA            push d
4272   1B98                             
4273   1B98 FA 85 FF      lea d, [bp + -123] ; $instr_len
4274   1B9B 2A            mov b, [d]
4275   1B9C 38 00 00      mov c, 0
4276   1B9F             ; --- START TERMS
4277   1B9F D7            push a
4278   1BA0 11            mov a, b
4279   1BA1 FD 2E 02 00   mov32 cb, $00000002
4279   1BA5 00 00 
4280   1BA7 56            add b, a
4281   1BA8 E4            pop a
4282   1BA9             ; --- END TERMS
4283   1BA9 E7            pop d
4284   1BAA FD 43         mov [d], b
4285   1BAC 0A AF 1B      jmp _if96_exit
4286   1BAF             _if96_exit:
4287   1BAF             _if95_exit:
4288   1BAF             ; j++; 
4289   1BAF                             
4290   1BAF FA 7D FF      lea d, [bp + -131] ; $j
4291   1BB2 2A            mov b, [d]
4292   1BB3 38 00 00      mov c, 0
4293   1BB6 11            mov a, b
4294   1BB7 FD 77         inc b
4295   1BB9 FA 7D FF      lea d, [bp + -131] ; $j
4296   1BBC FD 43         mov [d], b
4297   1BBE 27            mov b, a
4298   1BBF 0A C2 1B      jmp _if94_exit
4299   1BC2             _if94_exit:
4300   1BC2             _if89_exit:
4301   1BC2             _for87_update:
4302   1BC2 0A AB 19      jmp _for87_cond
4303   1BC5             _for87_exit:
4304   1BC5             ; if(!emit_override){ 
4305   1BC5             _if97_cond:
4306   1BC5                             
4307   1BC5 FA 05 00      lea d, [bp + 5] ; $emit_override
4308   1BC8 32            mov bl, [d]
4309   1BC9 A7 00         mov bh, 0
4310   1BCB 38 00 00      mov c, 0
4311   1BCE C0 00 00      cmp b, 0
4312   1BD1 C6 01 1C      je _if97_exit
4313   1BD4             _if97_TRUE:
4314   1BD4             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
4315   1BD4                             
4316   1BD4             ; --- START FUNCTION CALL
4317   1BD4                             
4318   1BD4 FA A1 FF      lea d, [bp + -95] ; $code_line
4319   1BD7 2D            mov b, d
4320   1BD8 38 00 00      mov c, 0
4321   1BDB FD AB         swp b
4322   1BDD D8            push b
4323   1BDE                             
4324   1BDE FA 85 FF      lea d, [bp + -123] ; $instr_len
4325   1BE1 2A            mov b, [d]
4326   1BE2 38 00 00      mov c, 0
4327   1BE5 FD AB         swp b
4328   1BE7 D8            push b
4329   1BE8                             
4330   1BE8 FA 78 FF      lea d, [bp + -136] ; $old_pc
4331   1BEB 2A            mov b, [d]
4332   1BEC 38 00 00      mov c, 0
4333   1BEF FD AB         swp b
4334   1BF1 D8            push b
4335   1BF2                             
4336   1BF2 26 0C 51      mov b, _s29 ; "%x(%d): %s\n"
4337   1BF5 FD AB         swp b
4338   1BF7 D8            push b
4339   1BF8 07 60 42      call printf
4340   1BFB 51 08 00      add sp, 8
4341   1BFE             ; --- END FUNCTION CALL
4342   1BFE 0A 01 1C      jmp _if97_exit
4343   1C01             _if97_exit:
4344   1C01             ; break; 
4345   1C01 0A 17 1C      jmp _for79_exit ; for break
4346   1C04             _for79_update:
4347   1C04                             
4348   1C04 FA 7F FF      lea d, [bp + -129] ; $i
4349   1C07 2A            mov b, [d]
4350   1C08 38 00 00      mov c, 0
4351   1C0B 11            mov a, b
4352   1C0C FD 77         inc b
4353   1C0E FA 7F FF      lea d, [bp + -129] ; $i
4354   1C11 FD 43         mov [d], b
4355   1C13 27            mov b, a
4356   1C14 0A DF 16      jmp _for79_cond
4357   1C17             _for79_exit:
4358   1C17             _if69_exit:
4359   1C17             ; pop_prog(); 
4360   1C17                             
4361   1C17             ; --- START FUNCTION CALL
4362   1C17 07 FA 39      call pop_prog
4363   1C1A F9            leave
4364   1C1B 09            ret
4365   1C1C             
4366   1C1C             parse_text:
4367   1C1C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4368   1C1F             ; char *temp_prog; 
4369   1C1F 52 02 00      sub sp, 2
4370   1C22             ; print("Parsing TEXT section...\n"); 
4371   1C22                             
4372   1C22             ; --- START FUNCTION CALL
4373   1C22                             
4374   1C22 26 2B 51      mov b, _s31 ; "Parsing TEXT section...\n"
4375   1C25 FD AB         swp b
4376   1C27 D8            push b
4377   1C28 07 30 3E      call print
4378   1C2B 51 02 00      add sp, 2
4379   1C2E             ; --- END FUNCTION CALL
4380   1C2E             ; prog = program; 
4381   1C2E 3B 3B 4E      mov d, _prog ; $prog
4382   1C31 DA            push d
4383   1C32                             
4384   1C32 3B 7F 4F      mov d, _program ; $program
4385   1C35 2A            mov b, [d]
4386   1C36 38 00 00      mov c, 0
4387   1C39 E7            pop d
4388   1C3A FD 43         mov [d], b
4389   1C3C             ; bin_p = bin_out + _org; 
4390   1C3C 3B 83 4F      mov d, _bin_p ; $bin_p
4391   1C3F DA            push d
4392   1C40                             
4393   1C40 3B 81 4F      mov d, _bin_out ; $bin_out
4394   1C43 2A            mov b, [d]
4395   1C44 38 00 00      mov c, 0
4396   1C47             ; --- START TERMS
4397   1C47 D7            push a
4398   1C48 11            mov a, b
4399   1C49 3B 32 4E      mov d, __org ; $_org
4400   1C4C 2A            mov b, [d]
4401   1C4D 38 00 00      mov c, 0
4402   1C50 56            add b, a
4403   1C51 E4            pop a
4404   1C52             ; --- END TERMS
4405   1C52 E7            pop d
4406   1C53 FD 43         mov [d], b
4407   1C55             ; pc = _org; 
4408   1C55 3B 34 4E      mov d, _pc ; $pc
4409   1C58 DA            push d
4410   1C59                             
4411   1C59 3B 32 4E      mov d, __org ; $_org
4412   1C5C 2A            mov b, [d]
4413   1C5D 38 00 00      mov c, 0
4414   1C60 E7            pop d
4415   1C61 FD 43         mov [d], b
4416   1C63             ; for(;;){ 
4417   1C63             _for98_init:
4418   1C63             _for98_cond:
4419   1C63             _for98_block:
4420   1C63             ; get(); 
4421   1C63                             
4422   1C63             ; --- START FUNCTION CALL
4423   1C63 07 60 2B      call get
4424   1C66             ; if(toktype == END) error("TEXT section not found."); 
4425   1C66             _if99_cond:
4426   1C66                              
4427   1C66 3B 39 4E      mov d, _toktype ; $toktype
4428   1C69 2A            mov b, [d]
4429   1C6A 38 00 00      mov c, 0
4430   1C6D             ; --- START RELATIONAL
4431   1C6D D7            push a
4432   1C6E 11            mov a, b
4433   1C6F FD 2E 07 00   mov32 cb, $7 ; enum element: END
4433   1C73 00 00 
4434   1C75 B0            cmp a, b
4435   1C76 FD 71         seq ; ==
4436   1C78 E4            pop a
4437   1C79             ; --- END RELATIONAL
4438   1C79 C0 00 00      cmp b, 0
4439   1C7C C6 8E 1C      je _if99_exit
4440   1C7F             _if99_TRUE:
4441   1C7F             ; error("TEXT section not found."); 
4442   1C7F                              
4443   1C7F             ; --- START FUNCTION CALL
4444   1C7F                              
4445   1C7F 26 44 51      mov b, _s32 ; "TEXT section not found."
4446   1C82 FD AB         swp b
4447   1C84 D8            push b
4448   1C85 07 5A 39      call error
4449   1C88 51 02 00      add sp, 2
4450   1C8B             ; --- END FUNCTION CALL
4451   1C8B 0A 8E 1C      jmp _if99_exit
4452   1C8E             _if99_exit:
4453   1C8E             ; if(tok == TEXT){ 
4454   1C8E             _if100_cond:
4455   1C8E                              
4456   1C8E 3B 37 4E      mov d, _tok ; $tok
4457   1C91 2A            mov b, [d]
4458   1C92 38 00 00      mov c, 0
4459   1C95             ; --- START RELATIONAL
4460   1C95 D7            push a
4461   1C96 11            mov a, b
4462   1C97 FD 2E 04 00   mov32 cb, $4 ; enum element: TEXT
4462   1C9B 00 00 
4463   1C9D B0            cmp a, b
4464   1C9E FD 71         seq ; ==
4465   1CA0 E4            pop a
4466   1CA1             ; --- END RELATIONAL
4467   1CA1 C0 00 00      cmp b, 0
4468   1CA4 C6 AD 1C      je _if100_exit
4469   1CA7             _if100_TRUE:
4470   1CA7             ; break; 
4471   1CA7 0A B0 1C      jmp _for98_exit ; for break
4472   1CAA 0A AD 1C      jmp _if100_exit
4473   1CAD             _if100_exit:
4474   1CAD             _for98_update:
4475   1CAD 0A 63 1C      jmp _for98_cond
4476   1CB0             _for98_exit:
4477   1CB0             ; for(;;){ 
4478   1CB0             _for101_init:
4479   1CB0             _for101_cond:
4480   1CB0             _for101_block:
4481   1CB0             ; get(); back(); 
4482   1CB0                              
4483   1CB0             ; --- START FUNCTION CALL
4484   1CB0 07 60 2B      call get
4485   1CB3             ; back(); 
4486   1CB3                              
4487   1CB3             ; --- START FUNCTION CALL
4488   1CB3 07 D3 27      call back
4489   1CB6             ; temp_prog = prog; 
4490   1CB6 FA FF FF      lea d, [bp + -1] ; $temp_prog
4491   1CB9 DA            push d
4492   1CBA                              
4493   1CBA 3B 3B 4E      mov d, _prog ; $prog
4494   1CBD 2A            mov b, [d]
4495   1CBE 38 00 00      mov c, 0
4496   1CC1 E7            pop d
4497   1CC2 FD 43         mov [d], b
4498   1CC4             ; get(); 
4499   1CC4                              
4500   1CC4             ; --- START FUNCTION CALL
4501   1CC4 07 60 2B      call get
4502   1CC7             ; if(toktype == END) error("TEXT section end not found."); 
4503   1CC7             _if102_cond:
4504   1CC7                              
4505   1CC7 3B 39 4E      mov d, _toktype ; $toktype
4506   1CCA 2A            mov b, [d]
4507   1CCB 38 00 00      mov c, 0
4508   1CCE             ; --- START RELATIONAL
4509   1CCE D7            push a
4510   1CCF 11            mov a, b
4511   1CD0 FD 2E 07 00   mov32 cb, $7 ; enum element: END
4511   1CD4 00 00 
4512   1CD6 B0            cmp a, b
4513   1CD7 FD 71         seq ; ==
4514   1CD9 E4            pop a
4515   1CDA             ; --- END RELATIONAL
4516   1CDA C0 00 00      cmp b, 0
4517   1CDD C6 EF 1C      je _if102_exit
4518   1CE0             _if102_TRUE:
4519   1CE0             ; error("TEXT section end not found."); 
4520   1CE0                              
4521   1CE0             ; --- START FUNCTION CALL
4522   1CE0                              
4523   1CE0 26 5C 51      mov b, _s33 ; "TEXT section end not found."
4524   1CE3 FD AB         swp b
4525   1CE5 D8            push b
4526   1CE6 07 5A 39      call error
4527   1CE9 51 02 00      add sp, 2
4528   1CEC             ; --- END FUNCTION CALL
4529   1CEC 0A EF 1C      jmp _if102_exit
4530   1CEF             _if102_exit:
4531   1CEF             ; if(tok == DOT){ 
4532   1CEF             _if103_cond:
4533   1CEF                              
4534   1CEF 3B 37 4E      mov d, _tok ; $tok
4535   1CF2 2A            mov b, [d]
4536   1CF3 38 00 00      mov c, 0
4537   1CF6             ; --- START RELATIONAL
4538   1CF6 D7            push a
4539   1CF7 11            mov a, b
4540   1CF8 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
4540   1CFC 00 00 
4541   1CFE B0            cmp a, b
4542   1CFF FD 71         seq ; ==
4543   1D01 E4            pop a
4544   1D02             ; --- END RELATIONAL
4545   1D02 C0 00 00      cmp b, 0
4546   1D05 C6 39 1D      je _if103_else
4547   1D08             _if103_TRUE:
4548   1D08             ; get(); 
4549   1D08                              
4550   1D08             ; --- START FUNCTION CALL
4551   1D08 07 60 2B      call get
4552   1D0B             ; if(tok == SEGMENT_END) break; 
4553   1D0B             _if104_cond:
4554   1D0B                              
4555   1D0B 3B 37 4E      mov d, _tok ; $tok
4556   1D0E 2A            mov b, [d]
4557   1D0F 38 00 00      mov c, 0
4558   1D12             ; --- START RELATIONAL
4559   1D12 D7            push a
4560   1D13 11            mov a, b
4561   1D14 FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
4561   1D18 00 00 
4562   1D1A B0            cmp a, b
4563   1D1B FD 71         seq ; ==
4564   1D1D E4            pop a
4565   1D1E             ; --- END RELATIONAL
4566   1D1E C0 00 00      cmp b, 0
4567   1D21 C6 2A 1D      je _if104_else
4568   1D24             _if104_TRUE:
4569   1D24             ; break; 
4570   1D24 0A 92 1D      jmp _for101_exit ; for break
4571   1D27 0A 36 1D      jmp _if104_exit
4572   1D2A             _if104_else:
4573   1D2A             ; error("Unexpected directive."); 
4574   1D2A                              
4575   1D2A             ; --- START FUNCTION CALL
4576   1D2A                              
4577   1D2A 26 78 51      mov b, _s34 ; "Unexpected directive."
4578   1D2D FD AB         swp b
4579   1D2F D8            push b
4580   1D30 07 5A 39      call error
4581   1D33 51 02 00      add sp, 2
4582   1D36             ; --- END FUNCTION CALL
4583   1D36             _if104_exit:
4584   1D36 0A 8F 1D      jmp _if103_exit
4585   1D39             _if103_else:
4586   1D39             ; if(toktype == IDENTIFIER){ 
4587   1D39             _if105_cond:
4588   1D39                              
4589   1D39 3B 39 4E      mov d, _toktype ; $toktype
4590   1D3C 2A            mov b, [d]
4591   1D3D 38 00 00      mov c, 0
4592   1D40             ; --- START RELATIONAL
4593   1D40 D7            push a
4594   1D41 11            mov a, b
4595   1D42 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
4595   1D46 00 00 
4596   1D48 B0            cmp a, b
4597   1D49 FD 71         seq ; ==
4598   1D4B E4            pop a
4599   1D4C             ; --- END RELATIONAL
4600   1D4C C0 00 00      cmp b, 0
4601   1D4F C6 8F 1D      je _if105_exit
4602   1D52             _if105_TRUE:
4603   1D52             ; get(); 
4604   1D52                              
4605   1D52             ; --- START FUNCTION CALL
4606   1D52 07 60 2B      call get
4607   1D55             ; if(tok != COLON){ 
4608   1D55             _if106_cond:
4609   1D55                              
4610   1D55 3B 37 4E      mov d, _tok ; $tok
4611   1D58 2A            mov b, [d]
4612   1D59 38 00 00      mov c, 0
4613   1D5C             ; --- START RELATIONAL
4614   1D5C D7            push a
4615   1D5D 11            mov a, b
4616   1D5E FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
4616   1D62 00 00 
4617   1D64 B0            cmp a, b
4618   1D65 FD 72         sneq ; !=
4619   1D67 E4            pop a
4620   1D68             ; --- END RELATIONAL
4621   1D68 C0 00 00      cmp b, 0
4622   1D6B C6 8C 1D      je _if106_exit
4623   1D6E             _if106_TRUE:
4624   1D6E             ; prog = temp_prog; 
4625   1D6E 3B 3B 4E      mov d, _prog ; $prog
4626   1D71 DA            push d
4627   1D72                              
4628   1D72 FA FF FF      lea d, [bp + -1] ; $temp_prog
4629   1D75 2A            mov b, [d]
4630   1D76 38 00 00      mov c, 0
4631   1D79 E7            pop d
4632   1D7A FD 43         mov [d], b
4633   1D7C             ; parse_instr(0); 
4634   1D7C                              
4635   1D7C             ; --- START FUNCTION CALL
4636   1D7C                              
4637   1D7C FD 2E 00 00   mov32 cb, $00000000
4637   1D80 00 00 
4638   1D82 DD            push bl
4639   1D83 07 70 13      call parse_instr
4640   1D86 51 01 00      add sp, 1
4641   1D89             ; --- END FUNCTION CALL
4642   1D89 0A 8C 1D      jmp _if106_exit
4643   1D8C             _if106_exit:
4644   1D8C 0A 8F 1D      jmp _if105_exit
4645   1D8F             _if105_exit:
4646   1D8F             _if103_exit:
4647   1D8F             _for101_update:
4648   1D8F 0A B0 1C      jmp _for101_cond
4649   1D92             _for101_exit:
4650   1D92             ; print("Done.\n\n"); 
4651   1D92                              
4652   1D92             ; --- START FUNCTION CALL
4653   1D92                              
4654   1D92 26 8E 51      mov b, _s35 ; "Done.\n\n"
4655   1D95 FD AB         swp b
4656   1D97 D8            push b
4657   1D98 07 30 3E      call print
4658   1D9B 51 02 00      add sp, 2
4659   1D9E             ; --- END FUNCTION CALL
4660   1D9E F9            leave
4661   1D9F 09            ret
4662   1DA0             
4663   1DA0             debug:
4664   1DA0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4665   1DA3             ; printf("\n"); 
4666   1DA3                              
4667   1DA3             ; --- START FUNCTION CALL
4668   1DA3                              
4669   1DA3 26 D6 4F      mov b, _s10 ; "\n"
4670   1DA6 FD AB         swp b
4671   1DA8 D8            push b
4672   1DA9 07 60 42      call printf
4673   1DAC 51 02 00      add sp, 2
4674   1DAF             ; --- END FUNCTION CALL
4675   1DAF             ; printf("Prog Offset: %x\n", prog - program); 
4676   1DAF                              
4677   1DAF             ; --- START FUNCTION CALL
4678   1DAF                              
4679   1DAF 3B 3B 4E      mov d, _prog ; $prog
4680   1DB2 2A            mov b, [d]
4681   1DB3 38 00 00      mov c, 0
4682   1DB6             ; --- START TERMS
4683   1DB6 D7            push a
4684   1DB7 11            mov a, b
4685   1DB8 3B 7F 4F      mov d, _program ; $program
4686   1DBB 2A            mov b, [d]
4687   1DBC 38 00 00      mov c, 0
4688   1DBF 60            sub a, b
4689   1DC0 27            mov b, a
4690   1DC1 E4            pop a
4691   1DC2             ; --- END TERMS
4692   1DC2 FD AB         swp b
4693   1DC4 D8            push b
4694   1DC5                              
4695   1DC5 26 96 51      mov b, _s36 ; "Prog Offset: %x\n"
4696   1DC8 FD AB         swp b
4697   1DCA D8            push b
4698   1DCB 07 60 42      call printf
4699   1DCE 51 04 00      add sp, 4
4700   1DD1             ; --- END FUNCTION CALL
4701   1DD1             ; printf("Prog value : %c\n", *prog); 
4702   1DD1                              
4703   1DD1             ; --- START FUNCTION CALL
4704   1DD1                              
4705   1DD1 3B 3B 4E      mov d, _prog ; $prog
4706   1DD4 2A            mov b, [d]
4707   1DD5 38 00 00      mov c, 0
4708   1DD8 74            mov d, b
4709   1DD9 32            mov bl, [d]
4710   1DDA A7 00         mov bh, 0
4711   1DDC 38 00 00      mov c, 0
4712   1DDF FD AB         swp b
4713   1DE1 D8            push b
4714   1DE2                              
4715   1DE2 26 A7 51      mov b, _s37 ; "Prog value : %c\n"
4716   1DE5 FD AB         swp b
4717   1DE7 D8            push b
4718   1DE8 07 60 42      call printf
4719   1DEB 51 04 00      add sp, 4
4720   1DEE             ; --- END FUNCTION CALL
4721   1DEE             ; printf("Token      : %s\n", token); 
4722   1DEE                              
4723   1DEE             ; --- START FUNCTION CALL
4724   1DEE                              
4725   1DEE 3B 3D 4E      mov d, _token_data ; $token
4726   1DF1 2D            mov b, d
4727   1DF2 38 00 00      mov c, 0
4728   1DF5 FD AB         swp b
4729   1DF7 D8            push b
4730   1DF8                              
4731   1DF8 26 B8 51      mov b, _s38 ; "Token      : %s\n"
4732   1DFB FD AB         swp b
4733   1DFD D8            push b
4734   1DFE 07 60 42      call printf
4735   1E01 51 04 00      add sp, 4
4736   1E04             ; --- END FUNCTION CALL
4737   1E04             ; printf("Tok        : %d\n", tok); 
4738   1E04                              
4739   1E04             ; --- START FUNCTION CALL
4740   1E04                              
4741   1E04 3B 37 4E      mov d, _tok ; $tok
4742   1E07 2A            mov b, [d]
4743   1E08 38 00 00      mov c, 0
4744   1E0B FD AB         swp b
4745   1E0D D8            push b
4746   1E0E                              
4747   1E0E 26 C9 51      mov b, _s39 ; "Tok        : %d\n"
4748   1E11 FD AB         swp b
4749   1E13 D8            push b
4750   1E14 07 60 42      call printf
4751   1E17 51 04 00      add sp, 4
4752   1E1A             ; --- END FUNCTION CALL
4753   1E1A             ; printf("Toktype    : %d\n", toktype); 
4754   1E1A                              
4755   1E1A             ; --- START FUNCTION CALL
4756   1E1A                              
4757   1E1A 3B 39 4E      mov d, _toktype ; $toktype
4758   1E1D 2A            mov b, [d]
4759   1E1E 38 00 00      mov c, 0
4760   1E21 FD AB         swp b
4761   1E23 D8            push b
4762   1E24                              
4763   1E24 26 DA 51      mov b, _s40 ; "Toktype    : %d\n"
4764   1E27 FD AB         swp b
4765   1E29 D8            push b
4766   1E2A 07 60 42      call printf
4767   1E2D 51 04 00      add sp, 4
4768   1E30             ; --- END FUNCTION CALL
4769   1E30             ; printf("StringConst: %s\n", string_const); 
4770   1E30                              
4771   1E30             ; --- START FUNCTION CALL
4772   1E30                              
4773   1E30 3B 7D 4E      mov d, _string_const_data ; $string_const
4774   1E33 2D            mov b, d
4775   1E34 38 00 00      mov c, 0
4776   1E37 FD AB         swp b
4777   1E39 D8            push b
4778   1E3A                              
4779   1E3A 26 EB 51      mov b, _s41 ; "StringConst: %s\n"
4780   1E3D FD AB         swp b
4781   1E3F D8            push b
4782   1E40 07 60 42      call printf
4783   1E43 51 04 00      add sp, 4
4784   1E46             ; --- END FUNCTION CALL
4785   1E46             ; printf("PC         : %x\n", pc); 
4786   1E46                              
4787   1E46             ; --- START FUNCTION CALL
4788   1E46                              
4789   1E46 3B 34 4E      mov d, _pc ; $pc
4790   1E49 2A            mov b, [d]
4791   1E4A 38 00 00      mov c, 0
4792   1E4D FD AB         swp b
4793   1E4F D8            push b
4794   1E50                              
4795   1E50 26 FC 51      mov b, _s42 ; "PC         : %x\n"
4796   1E53 FD AB         swp b
4797   1E55 D8            push b
4798   1E56 07 60 42      call printf
4799   1E59 51 04 00      add sp, 4
4800   1E5C             ; --- END FUNCTION CALL
4801   1E5C F9            leave
4802   1E5D 09            ret
4803   1E5E             
4804   1E5E             display_output:
4805   1E5E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4806   1E61             ; int i; 
4807   1E61 52 02 00      sub sp, 2
4808   1E64             ; unsigned char *p; 
4809   1E64 52 02 00      sub sp, 2
4810   1E67             ; print("\nAssembly complete.\n"); 
4811   1E67                              
4812   1E67             ; --- START FUNCTION CALL
4813   1E67                              
4814   1E67 26 0D 52      mov b, _s43 ; "\nAssembly complete.\n"
4815   1E6A FD AB         swp b
4816   1E6C D8            push b
4817   1E6D 07 30 3E      call print
4818   1E70 51 02 00      add sp, 2
4819   1E73             ; --- END FUNCTION CALL
4820   1E73             ; printf("Program size: %d\n", prog_size); 
4821   1E73                              
4822   1E73             ; --- START FUNCTION CALL
4823   1E73                              
4824   1E73 3B 9D 4F      mov d, _prog_size ; $prog_size
4825   1E76 2A            mov b, [d]
4826   1E77 38 00 00      mov c, 0
4827   1E7A FD AB         swp b
4828   1E7C D8            push b
4829   1E7D                              
4830   1E7D 26 22 52      mov b, _s44 ; "Program size: %d\n"
4831   1E80 FD AB         swp b
4832   1E82 D8            push b
4833   1E83 07 60 42      call printf
4834   1E86 51 04 00      add sp, 4
4835   1E89             ; --- END FUNCTION CALL
4836   1E89             ; print("Listing: \n"); 
4837   1E89                              
4838   1E89             ; --- START FUNCTION CALL
4839   1E89                              
4840   1E89 26 34 52      mov b, _s45 ; "Listing: \n"
4841   1E8C FD AB         swp b
4842   1E8E D8            push b
4843   1E8F 07 30 3E      call print
4844   1E92 51 02 00      add sp, 2
4845   1E95             ; --- END FUNCTION CALL
4846   1E95             ; p = bin_out + _org; 
4847   1E95 FA FD FF      lea d, [bp + -3] ; $p
4848   1E98 DA            push d
4849   1E99                              
4850   1E99 3B 81 4F      mov d, _bin_out ; $bin_out
4851   1E9C 2A            mov b, [d]
4852   1E9D 38 00 00      mov c, 0
4853   1EA0             ; --- START TERMS
4854   1EA0 D7            push a
4855   1EA1 11            mov a, b
4856   1EA2 3B 32 4E      mov d, __org ; $_org
4857   1EA5 2A            mov b, [d]
4858   1EA6 38 00 00      mov c, 0
4859   1EA9 56            add b, a
4860   1EAA E4            pop a
4861   1EAB             ; --- END TERMS
4862   1EAB E7            pop d
4863   1EAC FD 43         mov [d], b
4864   1EAE             ; for(;;){ 
4865   1EAE             _for107_init:
4866   1EAE             _for107_cond:
4867   1EAE             _for107_block:
4868   1EAE             ; if(p == bin_p) break; 
4869   1EAE             _if108_cond:
4870   1EAE                              
4871   1EAE FA FD FF      lea d, [bp + -3] ; $p
4872   1EB1 2A            mov b, [d]
4873   1EB2 38 00 00      mov c, 0
4874   1EB5             ; --- START RELATIONAL
4875   1EB5 D7            push a
4876   1EB6 11            mov a, b
4877   1EB7 3B 83 4F      mov d, _bin_p ; $bin_p
4878   1EBA 2A            mov b, [d]
4879   1EBB 38 00 00      mov c, 0
4880   1EBE B0            cmp a, b
4881   1EBF FD 71         seq ; ==
4882   1EC1 E4            pop a
4883   1EC2             ; --- END RELATIONAL
4884   1EC2 C0 00 00      cmp b, 0
4885   1EC5 C6 CE 1E      je _if108_exit
4886   1EC8             _if108_TRUE:
4887   1EC8             ; break; 
4888   1EC8 0A F6 1E      jmp _for107_exit ; for break
4889   1ECB 0A CE 1E      jmp _if108_exit
4890   1ECE             _if108_exit:
4891   1ECE             ; printx8(*p);  
4892   1ECE                              
4893   1ECE             ; --- START FUNCTION CALL
4894   1ECE                              
4895   1ECE FA FD FF      lea d, [bp + -3] ; $p
4896   1ED1 2A            mov b, [d]
4897   1ED2 38 00 00      mov c, 0
4898   1ED5 74            mov d, b
4899   1ED6 32            mov bl, [d]
4900   1ED7 A7 00         mov bh, 0
4901   1ED9 38 00 00      mov c, 0
4902   1EDC DD            push bl
4903   1EDD 07 B8 4C      call printx8
4904   1EE0 51 01 00      add sp, 1
4905   1EE3             ; --- END FUNCTION CALL
4906   1EE3             ; p++; 
4907   1EE3                              
4908   1EE3 FA FD FF      lea d, [bp + -3] ; $p
4909   1EE6 2A            mov b, [d]
4910   1EE7 38 00 00      mov c, 0
4911   1EEA FD 77         inc b
4912   1EEC FA FD FF      lea d, [bp + -3] ; $p
4913   1EEF FD 43         mov [d], b
4914   1EF1 FD 7D         dec b
4915   1EF3             _for107_update:
4916   1EF3 0A AE 1E      jmp _for107_cond
4917   1EF6             _for107_exit:
4918   1EF6             ; print("\n"); 
4919   1EF6                              
4920   1EF6             ; --- START FUNCTION CALL
4921   1EF6                              
4922   1EF6 26 D6 4F      mov b, _s10 ; "\n"
4923   1EF9 FD AB         swp b
4924   1EFB D8            push b
4925   1EFC 07 30 3E      call print
4926   1EFF 51 02 00      add sp, 2
4927   1F02             ; --- END FUNCTION CALL
4928   1F02 F9            leave
4929   1F03 09            ret
4930   1F04             
4931   1F04             is_reserved:
4932   1F04 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4933   1F07             ; return !strcmp(name, "a") 
4934   1F07                              
4935   1F07             ; --- START FUNCTION CALL
4936   1F07                              
4937   1F07 26 3F 52      mov b, _s46 ; "a"
4938   1F0A FD AB         swp b
4939   1F0C D8            push b
4940   1F0D                              
4941   1F0D FA 05 00      lea d, [bp + 5] ; $name
4942   1F10 2A            mov b, [d]
4943   1F11 38 00 00      mov c, 0
4944   1F14 FD AB         swp b
4945   1F16 D8            push b
4946   1F17 07 92 3F      call strcmp
4947   1F1A 51 04 00      add sp, 4
4948   1F1D             ; --- END FUNCTION CALL
4949   1F1D             ; --- START LOGICAL OR
4950   1F1D D7            push a
4951   1F1E 11            mov a, b
4952   1F1F             ; --- START FUNCTION CALL
4953   1F1F                              
4954   1F1F 26 41 52      mov b, _s47 ; "al"
4955   1F22 FD AB         swp b
4956   1F24 D8            push b
4957   1F25                              
4958   1F25 FA 05 00      lea d, [bp + 5] ; $name
4959   1F28 2A            mov b, [d]
4960   1F29 38 00 00      mov c, 0
4961   1F2C FD AB         swp b
4962   1F2E D8            push b
4963   1F2F 07 92 3F      call strcmp
4964   1F32 51 04 00      add sp, 4
4965   1F35             ; --- END FUNCTION CALL
4966   1F35 FD A8         sor a, b ; ||
4967   1F37 11            mov a, b
4968   1F38             ; --- START FUNCTION CALL
4969   1F38                              
4970   1F38 26 44 52      mov b, _s48 ; "ah"
4971   1F3B FD AB         swp b
4972   1F3D D8            push b
4973   1F3E                              
4974   1F3E FA 05 00      lea d, [bp + 5] ; $name
4975   1F41 2A            mov b, [d]
4976   1F42 38 00 00      mov c, 0
4977   1F45 FD AB         swp b
4978   1F47 D8            push b
4979   1F48 07 92 3F      call strcmp
4980   1F4B 51 04 00      add sp, 4
4981   1F4E             ; --- END FUNCTION CALL
4982   1F4E FD A8         sor a, b ; ||
4983   1F50 11            mov a, b
4984   1F51             ; --- START FUNCTION CALL
4985   1F51                              
4986   1F51 26 47 52      mov b, _s49 ; "b"
4987   1F54 FD AB         swp b
4988   1F56 D8            push b
4989   1F57                              
4990   1F57 FA 05 00      lea d, [bp + 5] ; $name
4991   1F5A 2A            mov b, [d]
4992   1F5B 38 00 00      mov c, 0
4993   1F5E FD AB         swp b
4994   1F60 D8            push b
4995   1F61 07 92 3F      call strcmp
4996   1F64 51 04 00      add sp, 4
4997   1F67             ; --- END FUNCTION CALL
4998   1F67 FD A8         sor a, b ; ||
4999   1F69 11            mov a, b
5000   1F6A             ; --- START FUNCTION CALL
5001   1F6A                              
5002   1F6A 26 49 52      mov b, _s50 ; "bl"
5003   1F6D FD AB         swp b
5004   1F6F D8            push b
5005   1F70                              
5006   1F70 FA 05 00      lea d, [bp + 5] ; $name
5007   1F73 2A            mov b, [d]
5008   1F74 38 00 00      mov c, 0
5009   1F77 FD AB         swp b
5010   1F79 D8            push b
5011   1F7A 07 92 3F      call strcmp
5012   1F7D 51 04 00      add sp, 4
5013   1F80             ; --- END FUNCTION CALL
5014   1F80 FD A8         sor a, b ; ||
5015   1F82 11            mov a, b
5016   1F83             ; --- START FUNCTION CALL
5017   1F83                              
5018   1F83 26 4C 52      mov b, _s51 ; "bh"
5019   1F86 FD AB         swp b
5020   1F88 D8            push b
5021   1F89                              
5022   1F89 FA 05 00      lea d, [bp + 5] ; $name
5023   1F8C 2A            mov b, [d]
5024   1F8D 38 00 00      mov c, 0
5025   1F90 FD AB         swp b
5026   1F92 D8            push b
5027   1F93 07 92 3F      call strcmp
5028   1F96 51 04 00      add sp, 4
5029   1F99             ; --- END FUNCTION CALL
5030   1F99 FD A8         sor a, b ; ||
5031   1F9B 11            mov a, b
5032   1F9C             ; --- START FUNCTION CALL
5033   1F9C                              
5034   1F9C 26 4F 52      mov b, _s52 ; "c"
5035   1F9F FD AB         swp b
5036   1FA1 D8            push b
5037   1FA2                              
5038   1FA2 FA 05 00      lea d, [bp + 5] ; $name
5039   1FA5 2A            mov b, [d]
5040   1FA6 38 00 00      mov c, 0
5041   1FA9 FD AB         swp b
5042   1FAB D8            push b
5043   1FAC 07 92 3F      call strcmp
5044   1FAF 51 04 00      add sp, 4
5045   1FB2             ; --- END FUNCTION CALL
5046   1FB2 FD A8         sor a, b ; ||
5047   1FB4 11            mov a, b
5048   1FB5             ; --- START FUNCTION CALL
5049   1FB5                              
5050   1FB5 26 51 52      mov b, _s53 ; "cl"
5051   1FB8 FD AB         swp b
5052   1FBA D8            push b
5053   1FBB                              
5054   1FBB FA 05 00      lea d, [bp + 5] ; $name
5055   1FBE 2A            mov b, [d]
5056   1FBF 38 00 00      mov c, 0
5057   1FC2 FD AB         swp b
5058   1FC4 D8            push b
5059   1FC5 07 92 3F      call strcmp
5060   1FC8 51 04 00      add sp, 4
5061   1FCB             ; --- END FUNCTION CALL
5062   1FCB FD A8         sor a, b ; ||
5063   1FCD 11            mov a, b
5064   1FCE             ; --- START FUNCTION CALL
5065   1FCE                              
5066   1FCE 26 54 52      mov b, _s54 ; "ch"
5067   1FD1 FD AB         swp b
5068   1FD3 D8            push b
5069   1FD4                              
5070   1FD4 FA 05 00      lea d, [bp + 5] ; $name
5071   1FD7 2A            mov b, [d]
5072   1FD8 38 00 00      mov c, 0
5073   1FDB FD AB         swp b
5074   1FDD D8            push b
5075   1FDE 07 92 3F      call strcmp
5076   1FE1 51 04 00      add sp, 4
5077   1FE4             ; --- END FUNCTION CALL
5078   1FE4 FD A8         sor a, b ; ||
5079   1FE6 11            mov a, b
5080   1FE7             ; --- START FUNCTION CALL
5081   1FE7                              
5082   1FE7 26 57 52      mov b, _s55 ; "d"
5083   1FEA FD AB         swp b
5084   1FEC D8            push b
5085   1FED                              
5086   1FED FA 05 00      lea d, [bp + 5] ; $name
5087   1FF0 2A            mov b, [d]
5088   1FF1 38 00 00      mov c, 0
5089   1FF4 FD AB         swp b
5090   1FF6 D8            push b
5091   1FF7 07 92 3F      call strcmp
5092   1FFA 51 04 00      add sp, 4
5093   1FFD             ; --- END FUNCTION CALL
5094   1FFD FD A8         sor a, b ; ||
5095   1FFF 11            mov a, b
5096   2000             ; --- START FUNCTION CALL
5097   2000                              
5098   2000 26 59 52      mov b, _s56 ; "dl"
5099   2003 FD AB         swp b
5100   2005 D8            push b
5101   2006                              
5102   2006 FA 05 00      lea d, [bp + 5] ; $name
5103   2009 2A            mov b, [d]
5104   200A 38 00 00      mov c, 0
5105   200D FD AB         swp b
5106   200F D8            push b
5107   2010 07 92 3F      call strcmp
5108   2013 51 04 00      add sp, 4
5109   2016             ; --- END FUNCTION CALL
5110   2016 FD A8         sor a, b ; ||
5111   2018 11            mov a, b
5112   2019             ; --- START FUNCTION CALL
5113   2019                              
5114   2019 26 5C 52      mov b, _s57 ; "dh"
5115   201C FD AB         swp b
5116   201E D8            push b
5117   201F                              
5118   201F FA 05 00      lea d, [bp + 5] ; $name
5119   2022 2A            mov b, [d]
5120   2023 38 00 00      mov c, 0
5121   2026 FD AB         swp b
5122   2028 D8            push b
5123   2029 07 92 3F      call strcmp
5124   202C 51 04 00      add sp, 4
5125   202F             ; --- END FUNCTION CALL
5126   202F FD A8         sor a, b ; ||
5127   2031 11            mov a, b
5128   2032             ; --- START FUNCTION CALL
5129   2032                              
5130   2032 26 5F 52      mov b, _s58 ; "g"
5131   2035 FD AB         swp b
5132   2037 D8            push b
5133   2038                              
5134   2038 FA 05 00      lea d, [bp + 5] ; $name
5135   203B 2A            mov b, [d]
5136   203C 38 00 00      mov c, 0
5137   203F FD AB         swp b
5138   2041 D8            push b
5139   2042 07 92 3F      call strcmp
5140   2045 51 04 00      add sp, 4
5141   2048             ; --- END FUNCTION CALL
5142   2048 FD A8         sor a, b ; ||
5143   204A 11            mov a, b
5144   204B             ; --- START FUNCTION CALL
5145   204B                              
5146   204B 26 61 52      mov b, _s59 ; "gl"
5147   204E FD AB         swp b
5148   2050 D8            push b
5149   2051                              
5150   2051 FA 05 00      lea d, [bp + 5] ; $name
5151   2054 2A            mov b, [d]
5152   2055 38 00 00      mov c, 0
5153   2058 FD AB         swp b
5154   205A D8            push b
5155   205B 07 92 3F      call strcmp
5156   205E 51 04 00      add sp, 4
5157   2061             ; --- END FUNCTION CALL
5158   2061 FD A8         sor a, b ; ||
5159   2063 11            mov a, b
5160   2064             ; --- START FUNCTION CALL
5161   2064                              
5162   2064 26 64 52      mov b, _s60 ; "gh"
5163   2067 FD AB         swp b
5164   2069 D8            push b
5165   206A                              
5166   206A FA 05 00      lea d, [bp + 5] ; $name
5167   206D 2A            mov b, [d]
5168   206E 38 00 00      mov c, 0
5169   2071 FD AB         swp b
5170   2073 D8            push b
5171   2074 07 92 3F      call strcmp
5172   2077 51 04 00      add sp, 4
5173   207A             ; --- END FUNCTION CALL
5174   207A FD A8         sor a, b ; ||
5175   207C 11            mov a, b
5176   207D             ; --- START FUNCTION CALL
5177   207D                              
5178   207D 26 67 52      mov b, _s61 ; "pc"
5179   2080 FD AB         swp b
5180   2082 D8            push b
5181   2083                              
5182   2083 FA 05 00      lea d, [bp + 5] ; $name
5183   2086 2A            mov b, [d]
5184   2087 38 00 00      mov c, 0
5185   208A FD AB         swp b
5186   208C D8            push b
5187   208D 07 92 3F      call strcmp
5188   2090 51 04 00      add sp, 4
5189   2093             ; --- END FUNCTION CALL
5190   2093 FD A8         sor a, b ; ||
5191   2095 11            mov a, b
5192   2096             ; --- START FUNCTION CALL
5193   2096                              
5194   2096 26 6A 52      mov b, _s62 ; "sp"
5195   2099 FD AB         swp b
5196   209B D8            push b
5197   209C                              
5198   209C FA 05 00      lea d, [bp + 5] ; $name
5199   209F 2A            mov b, [d]
5200   20A0 38 00 00      mov c, 0
5201   20A3 FD AB         swp b
5202   20A5 D8            push b
5203   20A6 07 92 3F      call strcmp
5204   20A9 51 04 00      add sp, 4
5205   20AC             ; --- END FUNCTION CALL
5206   20AC FD A8         sor a, b ; ||
5207   20AE 11            mov a, b
5208   20AF             ; --- START FUNCTION CALL
5209   20AF                              
5210   20AF 26 6D 52      mov b, _s63 ; "bp"
5211   20B2 FD AB         swp b
5212   20B4 D8            push b
5213   20B5                              
5214   20B5 FA 05 00      lea d, [bp + 5] ; $name
5215   20B8 2A            mov b, [d]
5216   20B9 38 00 00      mov c, 0
5217   20BC FD AB         swp b
5218   20BE D8            push b
5219   20BF 07 92 3F      call strcmp
5220   20C2 51 04 00      add sp, 4
5221   20C5             ; --- END FUNCTION CALL
5222   20C5 FD A8         sor a, b ; ||
5223   20C7 11            mov a, b
5224   20C8             ; --- START FUNCTION CALL
5225   20C8                              
5226   20C8 26 70 52      mov b, _s64 ; "si"
5227   20CB FD AB         swp b
5228   20CD D8            push b
5229   20CE                              
5230   20CE FA 05 00      lea d, [bp + 5] ; $name
5231   20D1 2A            mov b, [d]
5232   20D2 38 00 00      mov c, 0
5233   20D5 FD AB         swp b
5234   20D7 D8            push b
5235   20D8 07 92 3F      call strcmp
5236   20DB 51 04 00      add sp, 4
5237   20DE             ; --- END FUNCTION CALL
5238   20DE FD A8         sor a, b ; ||
5239   20E0 11            mov a, b
5240   20E1             ; --- START FUNCTION CALL
5241   20E1                              
5242   20E1 26 73 52      mov b, _s65 ; "di"
5243   20E4 FD AB         swp b
5244   20E6 D8            push b
5245   20E7                              
5246   20E7 FA 05 00      lea d, [bp + 5] ; $name
5247   20EA 2A            mov b, [d]
5248   20EB 38 00 00      mov c, 0
5249   20EE FD AB         swp b
5250   20F0 D8            push b
5251   20F1 07 92 3F      call strcmp
5252   20F4 51 04 00      add sp, 4
5253   20F7             ; --- END FUNCTION CALL
5254   20F7 FD A8         sor a, b ; ||
5255   20F9 11            mov a, b
5256   20FA             ; --- START FUNCTION CALL
5257   20FA                              
5258   20FA 26 76 52      mov b, _s66 ; "word"
5259   20FD FD AB         swp b
5260   20FF D8            push b
5261   2100                              
5262   2100 FA 05 00      lea d, [bp + 5] ; $name
5263   2103 2A            mov b, [d]
5264   2104 38 00 00      mov c, 0
5265   2107 FD AB         swp b
5266   2109 D8            push b
5267   210A 07 92 3F      call strcmp
5268   210D 51 04 00      add sp, 4
5269   2110             ; --- END FUNCTION CALL
5270   2110 FD A8         sor a, b ; ||
5271   2112 11            mov a, b
5272   2113             ; --- START FUNCTION CALL
5273   2113                              
5274   2113 26 7B 52      mov b, _s67 ; "byte"
5275   2116 FD AB         swp b
5276   2118 D8            push b
5277   2119                              
5278   2119 FA 05 00      lea d, [bp + 5] ; $name
5279   211C 2A            mov b, [d]
5280   211D 38 00 00      mov c, 0
5281   2120 FD AB         swp b
5282   2122 D8            push b
5283   2123 07 92 3F      call strcmp
5284   2126 51 04 00      add sp, 4
5285   2129             ; --- END FUNCTION CALL
5286   2129 FD A8         sor a, b ; ||
5287   212B 11            mov a, b
5288   212C             ; --- START FUNCTION CALL
5289   212C                              
5290   212C 26 80 52      mov b, _s68 ; "cmpsb"
5291   212F FD AB         swp b
5292   2131 D8            push b
5293   2132                              
5294   2132 FA 05 00      lea d, [bp + 5] ; $name
5295   2135 2A            mov b, [d]
5296   2136 38 00 00      mov c, 0
5297   2139 FD AB         swp b
5298   213B D8            push b
5299   213C 07 92 3F      call strcmp
5300   213F 51 04 00      add sp, 4
5301   2142             ; --- END FUNCTION CALL
5302   2142 FD A8         sor a, b ; ||
5303   2144 11            mov a, b
5304   2145             ; --- START FUNCTION CALL
5305   2145                              
5306   2145 26 86 52      mov b, _s69 ; "movsb"
5307   2148 FD AB         swp b
5308   214A D8            push b
5309   214B                              
5310   214B FA 05 00      lea d, [bp + 5] ; $name
5311   214E 2A            mov b, [d]
5312   214F 38 00 00      mov c, 0
5313   2152 FD AB         swp b
5314   2154 D8            push b
5315   2155 07 92 3F      call strcmp
5316   2158 51 04 00      add sp, 4
5317   215B             ; --- END FUNCTION CALL
5318   215B FD A8         sor a, b ; ||
5319   215D 11            mov a, b
5320   215E             ; --- START FUNCTION CALL
5321   215E                              
5322   215E 26 8C 52      mov b, _s70 ; "stosb"
5323   2161 FD AB         swp b
5324   2163 D8            push b
5325   2164                              
5326   2164 FA 05 00      lea d, [bp + 5] ; $name
5327   2167 2A            mov b, [d]
5328   2168 38 00 00      mov c, 0
5329   216B FD AB         swp b
5330   216D D8            push b
5331   216E 07 92 3F      call strcmp
5332   2171 51 04 00      add sp, 4
5333   2174             ; --- END FUNCTION CALL
5334   2174 FD A8         sor a, b ; ||
5335   2176 E4            pop a
5336   2177             ; --- END LOGICAL OR
5337   2177 F9            leave
5338   2178 09            ret
5339   2179             
5340   2179             is_directive:
5341   2179 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5342   217C             ; return !strcmp(name, "org")  
5343   217C                              
5344   217C             ; --- START FUNCTION CALL
5345   217C                              
5346   217C 26 B1 4F      mov b, _s0 ; "org"
5347   217F FD AB         swp b
5348   2181 D8            push b
5349   2182                              
5350   2182 FA 05 00      lea d, [bp + 5] ; $name
5351   2185 2A            mov b, [d]
5352   2186 38 00 00      mov c, 0
5353   2189 FD AB         swp b
5354   218B D8            push b
5355   218C 07 92 3F      call strcmp
5356   218F 51 04 00      add sp, 4
5357   2192             ; --- END FUNCTION CALL
5358   2192             ; --- START LOGICAL OR
5359   2192 D7            push a
5360   2193 11            mov a, b
5361   2194             ; --- START FUNCTION CALL
5362   2194                              
5363   2194 26 92 52      mov b, _s71 ; "define"
5364   2197 FD AB         swp b
5365   2199 D8            push b
5366   219A                              
5367   219A FA 05 00      lea d, [bp + 5] ; $name
5368   219D 2A            mov b, [d]
5369   219E 38 00 00      mov c, 0
5370   21A1 FD AB         swp b
5371   21A3 D8            push b
5372   21A4 07 92 3F      call strcmp
5373   21A7 51 04 00      add sp, 4
5374   21AA             ; --- END FUNCTION CALL
5375   21AA FD A8         sor a, b ; ||
5376   21AC E4            pop a
5377   21AD             ; --- END LOGICAL OR
5378   21AD F9            leave
5379   21AE 09            ret
5380   21AF             
5381   21AF             parse_label:
5382   21AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
5383   21B2             ; char label_name[ 32      ]; 
5384   21B2 52 20 00      sub sp, 32
5385   21B5             ; get(); 
5386   21B5                              
5387   21B5             ; --- START FUNCTION CALL
5388   21B5 07 60 2B      call get
5389   21B8             ; strcpy(label_name, token); 
5390   21B8                              
5391   21B8             ; --- START FUNCTION CALL
5392   21B8                              
5393   21B8 3B 3D 4E      mov d, _token_data ; $token
5394   21BB 2D            mov b, d
5395   21BC 38 00 00      mov c, 0
5396   21BF FD AB         swp b
5397   21C1 D8            push b
5398   21C2                              
5399   21C2 FA E1 FF      lea d, [bp + -31] ; $label_name
5400   21C5 2D            mov b, d
5401   21C6 38 00 00      mov c, 0
5402   21C9 FD AB         swp b
5403   21CB D8            push b
5404   21CC 07 5B 4B      call strcpy
5405   21CF 51 04 00      add sp, 4
5406   21D2             ; --- END FUNCTION CALL
5407   21D2             ; declare_label(label_name, pc); 
5408   21D2                              
5409   21D2             ; --- START FUNCTION CALL
5410   21D2                              
5411   21D2 3B 34 4E      mov d, _pc ; $pc
5412   21D5 2A            mov b, [d]
5413   21D6 38 00 00      mov c, 0
5414   21D9 FD AB         swp b
5415   21DB D8            push b
5416   21DC                              
5417   21DC FA E1 FF      lea d, [bp + -31] ; $label_name
5418   21DF 2D            mov b, d
5419   21E0 38 00 00      mov c, 0
5420   21E3 FD AB         swp b
5421   21E5 D8            push b
5422   21E6 07 F1 21      call declare_label
5423   21E9 51 04 00      add sp, 4
5424   21EC             ; --- END FUNCTION CALL
5425   21EC             ; get(); // get ':' 
5426   21EC                              
5427   21EC             ; --- START FUNCTION CALL
5428   21EC 07 60 2B      call get
5429   21EF F9            leave
5430   21F0 09            ret
5431   21F1             
5432   21F1             declare_label:
5433   21F1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5434   21F4             ; int i; 
5435   21F4 52 02 00      sub sp, 2
5436   21F7             ; for(i = 0; i <  16          ; i++){ 
5437   21F7             _for109_init:
5438   21F7 FA FF FF      lea d, [bp + -1] ; $i
5439   21FA DA            push d
5440   21FB                              
5441   21FB FD 2E 00 00   mov32 cb, $00000000
5441   21FF 00 00 
5442   2201 E7            pop d
5443   2202 FD 43         mov [d], b
5444   2204             _for109_cond:
5445   2204                              
5446   2204 FA FF FF      lea d, [bp + -1] ; $i
5447   2207 2A            mov b, [d]
5448   2208 38 00 00      mov c, 0
5449   220B             ; --- START RELATIONAL
5450   220B D7            push a
5451   220C 11            mov a, b
5452   220D FD 2E 10 00   mov32 cb, $00000010
5452   2211 00 00 
5453   2213 B0            cmp a, b
5454   2214 FD 73         slt ; < (signed)
5455   2216 E4            pop a
5456   2217             ; --- END RELATIONAL
5457   2217 C0 00 00      cmp b, 0
5458   221A C6 B4 22      je _for109_exit
5459   221D             _for109_block:
5460   221D             ; if(!label_table[i].name[0]){ 
5461   221D             _if110_cond:
5462   221D                              
5463   221D 3B 12 4D      mov d, _label_table_data ; $label_table
5464   2220 D7            push a
5465   2221 DA            push d
5466   2222                              
5467   2222 FA FF FF      lea d, [bp + -1] ; $i
5468   2225 2A            mov b, [d]
5469   2226 38 00 00      mov c, 0
5470   2229 E7            pop d
5471   222A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5472   222E E4            pop a
5473   222F 58 00 00      add d, 0
5474   2232 D7            push a
5475   2233 DA            push d
5476   2234                              
5477   2234 FD 2E 00 00   mov32 cb, $00000000
5477   2238 00 00 
5478   223A E7            pop d
5479   223B 5A            add d, b
5480   223C E4            pop a
5481   223D 32            mov bl, [d]
5482   223E A7 00         mov bh, 0
5483   2240 38 00 00      mov c, 0
5484   2243 C0 00 00      cmp b, 0
5485   2246 C6 A1 22      je _if110_exit
5486   2249             _if110_TRUE:
5487   2249             ; strcpy(label_table[i].name, name); 
5488   2249                              
5489   2249             ; --- START FUNCTION CALL
5490   2249                              
5491   2249 FA 05 00      lea d, [bp + 5] ; $name
5492   224C 2A            mov b, [d]
5493   224D 38 00 00      mov c, 0
5494   2250 FD AB         swp b
5495   2252 D8            push b
5496   2253                              
5497   2253 3B 12 4D      mov d, _label_table_data ; $label_table
5498   2256 D7            push a
5499   2257 DA            push d
5500   2258                              
5501   2258 FA FF FF      lea d, [bp + -1] ; $i
5502   225B 2A            mov b, [d]
5503   225C 38 00 00      mov c, 0
5504   225F E7            pop d
5505   2260 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5506   2264 E4            pop a
5507   2265 58 00 00      add d, 0
5508   2268 2D            mov b, d
5509   2269 38 00 00      mov c, 0
5510   226C FD AB         swp b
5511   226E D8            push b
5512   226F 07 5B 4B      call strcpy
5513   2272 51 04 00      add sp, 4
5514   2275             ; --- END FUNCTION CALL
5515   2275             ; label_table[i].address = address; 
5516   2275 3B 12 4D      mov d, _label_table_data ; $label_table
5517   2278 D7            push a
5518   2279 DA            push d
5519   227A                              
5520   227A FA FF FF      lea d, [bp + -1] ; $i
5521   227D 2A            mov b, [d]
5522   227E 38 00 00      mov c, 0
5523   2281 E7            pop d
5524   2282 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5525   2286 E4            pop a
5526   2287 58 10 00      add d, 16
5527   228A DA            push d
5528   228B                              
5529   228B FA 07 00      lea d, [bp + 7] ; $address
5530   228E 2A            mov b, [d]
5531   228F 38 00 00      mov c, 0
5532   2292 E7            pop d
5533   2293 FD 43         mov [d], b
5534   2295             ; return i; 
5535   2295                              
5536   2295 FA FF FF      lea d, [bp + -1] ; $i
5537   2298 2A            mov b, [d]
5538   2299 38 00 00      mov c, 0
5539   229C F9            leave
5540   229D 09            ret
5541   229E 0A A1 22      jmp _if110_exit
5542   22A1             _if110_exit:
5543   22A1             _for109_update:
5544   22A1                              
5545   22A1 FA FF FF      lea d, [bp + -1] ; $i
5546   22A4 2A            mov b, [d]
5547   22A5 38 00 00      mov c, 0
5548   22A8 11            mov a, b
5549   22A9 FD 77         inc b
5550   22AB FA FF FF      lea d, [bp + -1] ; $i
5551   22AE FD 43         mov [d], b
5552   22B0 27            mov b, a
5553   22B1 0A 04 22      jmp _for109_cond
5554   22B4             _for109_exit:
5555   22B4 F9            leave
5556   22B5 09            ret
5557   22B6             
5558   22B6             get_label_addr:
5559   22B6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5560   22B9             ; int i; 
5561   22B9 52 02 00      sub sp, 2
5562   22BC             ; for(i = 0; i <  16          ; i++){ 
5563   22BC             _for111_init:
5564   22BC FA FF FF      lea d, [bp + -1] ; $i
5565   22BF DA            push d
5566   22C0                              
5567   22C0 FD 2E 00 00   mov32 cb, $00000000
5567   22C4 00 00 
5568   22C6 E7            pop d
5569   22C7 FD 43         mov [d], b
5570   22C9             _for111_cond:
5571   22C9                              
5572   22C9 FA FF FF      lea d, [bp + -1] ; $i
5573   22CC 2A            mov b, [d]
5574   22CD 38 00 00      mov c, 0
5575   22D0             ; --- START RELATIONAL
5576   22D0 D7            push a
5577   22D1 11            mov a, b
5578   22D2 FD 2E 10 00   mov32 cb, $00000010
5578   22D6 00 00 
5579   22D8 B0            cmp a, b
5580   22D9 FD 73         slt ; < (signed)
5581   22DB E4            pop a
5582   22DC             ; --- END RELATIONAL
5583   22DC C0 00 00      cmp b, 0
5584   22DF C6 45 23      je _for111_exit
5585   22E2             _for111_block:
5586   22E2             ; if(!strcmp(label_table[i].name, name)){ 
5587   22E2             _if112_cond:
5588   22E2                              
5589   22E2             ; --- START FUNCTION CALL
5590   22E2                              
5591   22E2 FA 05 00      lea d, [bp + 5] ; $name
5592   22E5 2A            mov b, [d]
5593   22E6 38 00 00      mov c, 0
5594   22E9 FD AB         swp b
5595   22EB D8            push b
5596   22EC                              
5597   22EC 3B 12 4D      mov d, _label_table_data ; $label_table
5598   22EF D7            push a
5599   22F0 DA            push d
5600   22F1                              
5601   22F1 FA FF FF      lea d, [bp + -1] ; $i
5602   22F4 2A            mov b, [d]
5603   22F5 38 00 00      mov c, 0
5604   22F8 E7            pop d
5605   22F9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5606   22FD E4            pop a
5607   22FE 58 00 00      add d, 0
5608   2301 2D            mov b, d
5609   2302 38 00 00      mov c, 0
5610   2305 FD AB         swp b
5611   2307 D8            push b
5612   2308 07 92 3F      call strcmp
5613   230B 51 04 00      add sp, 4
5614   230E             ; --- END FUNCTION CALL
5615   230E C0 00 00      cmp b, 0
5616   2311 C6 32 23      je _if112_exit
5617   2314             _if112_TRUE:
5618   2314             ; return label_table[i].address; 
5619   2314                              
5620   2314 3B 12 4D      mov d, _label_table_data ; $label_table
5621   2317 D7            push a
5622   2318 DA            push d
5623   2319                              
5624   2319 FA FF FF      lea d, [bp + -1] ; $i
5625   231C 2A            mov b, [d]
5626   231D 38 00 00      mov c, 0
5627   2320 E7            pop d
5628   2321 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5629   2325 E4            pop a
5630   2326 58 10 00      add d, 16
5631   2329 2A            mov b, [d]
5632   232A 38 00 00      mov c, 0
5633   232D F9            leave
5634   232E 09            ret
5635   232F 0A 32 23      jmp _if112_exit
5636   2332             _if112_exit:
5637   2332             _for111_update:
5638   2332                              
5639   2332 FA FF FF      lea d, [bp + -1] ; $i
5640   2335 2A            mov b, [d]
5641   2336 38 00 00      mov c, 0
5642   2339 11            mov a, b
5643   233A FD 77         inc b
5644   233C FA FF FF      lea d, [bp + -1] ; $i
5645   233F FD 43         mov [d], b
5646   2341 27            mov b, a
5647   2342 0A C9 22      jmp _for111_cond
5648   2345             _for111_exit:
5649   2345             ; error_s("Label does not exist: ", name); 
5650   2345                              
5651   2345             ; --- START FUNCTION CALL
5652   2345                              
5653   2345 FA 05 00      lea d, [bp + 5] ; $name
5654   2348 2A            mov b, [d]
5655   2349 38 00 00      mov c, 0
5656   234C FD AB         swp b
5657   234E D8            push b
5658   234F                              
5659   234F 26 99 52      mov b, _s72 ; "Label does not exist: "
5660   2352 FD AB         swp b
5661   2354 D8            push b
5662   2355 07 78 39      call error_s
5663   2358 51 04 00      add sp, 4
5664   235B             ; --- END FUNCTION CALL
5665   235B F9            leave
5666   235C 09            ret
5667   235D             
5668   235D             label_exists:
5669   235D F8 00 00      enter 0 ; (push bp; mov bp, sp)
5670   2360             ; int i; 
5671   2360 52 02 00      sub sp, 2
5672   2363             ; for(i = 0; i <  16          ; i++){ 
5673   2363             _for113_init:
5674   2363 FA FF FF      lea d, [bp + -1] ; $i
5675   2366 DA            push d
5676   2367                              
5677   2367 FD 2E 00 00   mov32 cb, $00000000
5677   236B 00 00 
5678   236D E7            pop d
5679   236E FD 43         mov [d], b
5680   2370             _for113_cond:
5681   2370                              
5682   2370 FA FF FF      lea d, [bp + -1] ; $i
5683   2373 2A            mov b, [d]
5684   2374 38 00 00      mov c, 0
5685   2377             ; --- START RELATIONAL
5686   2377 D7            push a
5687   2378 11            mov a, b
5688   2379 FD 2E 10 00   mov32 cb, $00000010
5688   237D 00 00 
5689   237F B0            cmp a, b
5690   2380 FD 73         slt ; < (signed)
5691   2382 E4            pop a
5692   2383             ; --- END RELATIONAL
5693   2383 C0 00 00      cmp b, 0
5694   2386 C6 DA 23      je _for113_exit
5695   2389             _for113_block:
5696   2389             ; if(!strcmp(label_table[i].name, name)){ 
5697   2389             _if114_cond:
5698   2389                              
5699   2389             ; --- START FUNCTION CALL
5700   2389                              
5701   2389 FA 05 00      lea d, [bp + 5] ; $name
5702   238C 2A            mov b, [d]
5703   238D 38 00 00      mov c, 0
5704   2390 FD AB         swp b
5705   2392 D8            push b
5706   2393                              
5707   2393 3B 12 4D      mov d, _label_table_data ; $label_table
5708   2396 D7            push a
5709   2397 DA            push d
5710   2398                              
5711   2398 FA FF FF      lea d, [bp + -1] ; $i
5712   239B 2A            mov b, [d]
5713   239C 38 00 00      mov c, 0
5714   239F E7            pop d
5715   23A0 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5716   23A4 E4            pop a
5717   23A5 58 00 00      add d, 0
5718   23A8 2D            mov b, d
5719   23A9 38 00 00      mov c, 0
5720   23AC FD AB         swp b
5721   23AE D8            push b
5722   23AF 07 92 3F      call strcmp
5723   23B2 51 04 00      add sp, 4
5724   23B5             ; --- END FUNCTION CALL
5725   23B5 C0 00 00      cmp b, 0
5726   23B8 C6 C7 23      je _if114_exit
5727   23BB             _if114_TRUE:
5728   23BB             ; return i; 
5729   23BB                              
5730   23BB FA FF FF      lea d, [bp + -1] ; $i
5731   23BE 2A            mov b, [d]
5732   23BF 38 00 00      mov c, 0
5733   23C2 F9            leave
5734   23C3 09            ret
5735   23C4 0A C7 23      jmp _if114_exit
5736   23C7             _if114_exit:
5737   23C7             _for113_update:
5738   23C7                              
5739   23C7 FA FF FF      lea d, [bp + -1] ; $i
5740   23CA 2A            mov b, [d]
5741   23CB 38 00 00      mov c, 0
5742   23CE 11            mov a, b
5743   23CF FD 77         inc b
5744   23D1 FA FF FF      lea d, [bp + -1] ; $i
5745   23D4 FD 43         mov [d], b
5746   23D6 27            mov b, a
5747   23D7 0A 70 23      jmp _for113_cond
5748   23DA             _for113_exit:
5749   23DA             ; return -1; 
5750   23DA                              
5751   23DA FD 2E FF FF   mov32 cb, $ffffffff
5751   23DE FF FF 
5752   23E0 F9            leave
5753   23E1 09            ret
5754   23E2             
5755   23E2             search_opcode:
5756   23E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5757   23E5             ; char opcode_str[24]; 
5758   23E5 52 18 00      sub sp, 24
5759   23E8             ; char opcode_hex[5]; 
5760   23E8 52 05 00      sub sp, 5
5761   23EB             ; char *hex_p; 
5762   23EB 52 02 00      sub sp, 2
5763   23EE             ; char *op_p; 
5764   23EE 52 02 00      sub sp, 2
5765   23F1             ; char *tbl_p; 
5766   23F1 52 02 00      sub sp, 2
5767   23F4             ; struct t_opcode return_opcode; 
5768   23F4 52 1A 00      sub sp, 26
5769   23F7             ; tbl_p = opcode_table; 
5770   23F7 FA DE FF      lea d, [bp + -34] ; $tbl_p
5771   23FA DA            push d
5772   23FB                              
5773   23FB 3B 85 4F      mov d, _opcode_table ; $opcode_table
5774   23FE 2A            mov b, [d]
5775   23FF 38 00 00      mov c, 0
5776   2402 E7            pop d
5777   2403 FD 43         mov [d], b
5778   2405             ; for(;;){ 
5779   2405             _for115_init:
5780   2405             _for115_cond:
5781   2405             _for115_block:
5782   2405             ; op_p = opcode_str; 
5783   2405 FA E0 FF      lea d, [bp + -32] ; $op_p
5784   2408 DA            push d
5785   2409                              
5786   2409 FA E9 FF      lea d, [bp + -23] ; $opcode_str
5787   240C 2D            mov b, d
5788   240D 38 00 00      mov c, 0
5789   2410 E7            pop d
5790   2411 FD 43         mov [d], b
5791   2413             ; hex_p = opcode_hex; 
5792   2413 FA E2 FF      lea d, [bp + -30] ; $hex_p
5793   2416 DA            push d
5794   2417                              
5795   2417 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5796   241A 2D            mov b, d
5797   241B 38 00 00      mov c, 0
5798   241E E7            pop d
5799   241F FD 43         mov [d], b
5800   2421             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5801   2421             _while116_cond:
5802   2421                              
5803   2421 FA DE FF      lea d, [bp + -34] ; $tbl_p
5804   2424 2A            mov b, [d]
5805   2425 38 00 00      mov c, 0
5806   2428 74            mov d, b
5807   2429 32            mov bl, [d]
5808   242A A7 00         mov bh, 0
5809   242C 38 00 00      mov c, 0
5810   242F             ; --- START RELATIONAL
5811   242F D7            push a
5812   2430 11            mov a, b
5813   2431 FD 2E 20 00   mov32 cb, $00000020
5813   2435 00 00 
5814   2437 B0            cmp a, b
5815   2438 FD 72         sneq ; !=
5816   243A E4            pop a
5817   243B             ; --- END RELATIONAL
5818   243B C0 00 00      cmp b, 0
5819   243E C6 6F 24      je _while116_exit
5820   2441             _while116_block:
5821   2441             ; *op_p++ = *tbl_p++; 
5822   2441 FA E0 FF      lea d, [bp + -32] ; $op_p
5823   2444 2A            mov b, [d]
5824   2445 38 00 00      mov c, 0
5825   2448 FD 77         inc b
5826   244A FA E0 FF      lea d, [bp + -32] ; $op_p
5827   244D FD 43         mov [d], b
5828   244F FD 7D         dec b
5829   2451 D8            push b
5830   2452                              
5831   2452 FA DE FF      lea d, [bp + -34] ; $tbl_p
5832   2455 2A            mov b, [d]
5833   2456 38 00 00      mov c, 0
5834   2459 FD 77         inc b
5835   245B FA DE FF      lea d, [bp + -34] ; $tbl_p
5836   245E FD 43         mov [d], b
5837   2460 FD 7D         dec b
5838   2462 74            mov d, b
5839   2463 32            mov bl, [d]
5840   2464 A7 00         mov bh, 0
5841   2466 38 00 00      mov c, 0
5842   2469 E7            pop d
5843   246A FD 3E         mov [d], bl
5844   246C 0A 21 24      jmp _while116_cond
5845   246F             _while116_exit:
5846   246F             ; *op_p++ = *tbl_p++; 
5847   246F FA E0 FF      lea d, [bp + -32] ; $op_p
5848   2472 2A            mov b, [d]
5849   2473 38 00 00      mov c, 0
5850   2476 FD 77         inc b
5851   2478 FA E0 FF      lea d, [bp + -32] ; $op_p
5852   247B FD 43         mov [d], b
5853   247D FD 7D         dec b
5854   247F D8            push b
5855   2480                              
5856   2480 FA DE FF      lea d, [bp + -34] ; $tbl_p
5857   2483 2A            mov b, [d]
5858   2484 38 00 00      mov c, 0
5859   2487 FD 77         inc b
5860   2489 FA DE FF      lea d, [bp + -34] ; $tbl_p
5861   248C FD 43         mov [d], b
5862   248E FD 7D         dec b
5863   2490 74            mov d, b
5864   2491 32            mov bl, [d]
5865   2492 A7 00         mov bh, 0
5866   2494 38 00 00      mov c, 0
5867   2497 E7            pop d
5868   2498 FD 3E         mov [d], bl
5869   249A             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5870   249A             _while117_cond:
5871   249A                              
5872   249A FA DE FF      lea d, [bp + -34] ; $tbl_p
5873   249D 2A            mov b, [d]
5874   249E 38 00 00      mov c, 0
5875   24A1 74            mov d, b
5876   24A2 32            mov bl, [d]
5877   24A3 A7 00         mov bh, 0
5878   24A5 38 00 00      mov c, 0
5879   24A8             ; --- START RELATIONAL
5880   24A8 D7            push a
5881   24A9 11            mov a, b
5882   24AA FD 2E 20 00   mov32 cb, $00000020
5882   24AE 00 00 
5883   24B0 B0            cmp a, b
5884   24B1 FD 72         sneq ; !=
5885   24B3 E4            pop a
5886   24B4             ; --- END RELATIONAL
5887   24B4 C0 00 00      cmp b, 0
5888   24B7 C6 E8 24      je _while117_exit
5889   24BA             _while117_block:
5890   24BA             ; *op_p++ = *tbl_p++; 
5891   24BA FA E0 FF      lea d, [bp + -32] ; $op_p
5892   24BD 2A            mov b, [d]
5893   24BE 38 00 00      mov c, 0
5894   24C1 FD 77         inc b
5895   24C3 FA E0 FF      lea d, [bp + -32] ; $op_p
5896   24C6 FD 43         mov [d], b
5897   24C8 FD 7D         dec b
5898   24CA D8            push b
5899   24CB                              
5900   24CB FA DE FF      lea d, [bp + -34] ; $tbl_p
5901   24CE 2A            mov b, [d]
5902   24CF 38 00 00      mov c, 0
5903   24D2 FD 77         inc b
5904   24D4 FA DE FF      lea d, [bp + -34] ; $tbl_p
5905   24D7 FD 43         mov [d], b
5906   24D9 FD 7D         dec b
5907   24DB 74            mov d, b
5908   24DC 32            mov bl, [d]
5909   24DD A7 00         mov bh, 0
5910   24DF 38 00 00      mov c, 0
5911   24E2 E7            pop d
5912   24E3 FD 3E         mov [d], bl
5913   24E5 0A 9A 24      jmp _while117_cond
5914   24E8             _while117_exit:
5915   24E8             ; *op_p = '\0'; 
5916   24E8 FA E0 FF      lea d, [bp + -32] ; $op_p
5917   24EB 2A            mov b, [d]
5918   24EC 38 00 00      mov c, 0
5919   24EF D8            push b
5920   24F0                              
5921   24F0 FD 2E 00 00   mov32 cb, $00000000
5921   24F4 00 00 
5922   24F6 E7            pop d
5923   24F7 FD 3E         mov [d], bl
5924   24F9             ; if(!strcmp(opcode_str, what_opcode)){ 
5925   24F9             _if118_cond:
5926   24F9                              
5927   24F9             ; --- START FUNCTION CALL
5928   24F9                              
5929   24F9 FA 05 00      lea d, [bp + 5] ; $what_opcode
5930   24FC 2A            mov b, [d]
5931   24FD 38 00 00      mov c, 0
5932   2500 FD AB         swp b
5933   2502 D8            push b
5934   2503                              
5935   2503 FA E9 FF      lea d, [bp + -23] ; $opcode_str
5936   2506 2D            mov b, d
5937   2507 38 00 00      mov c, 0
5938   250A FD AB         swp b
5939   250C D8            push b
5940   250D 07 92 3F      call strcmp
5941   2510 51 04 00      add sp, 4
5942   2513             ; --- END FUNCTION CALL
5943   2513 C0 00 00      cmp b, 0
5944   2516 C6 63 26      je _if118_else
5945   2519             _if118_TRUE:
5946   2519             ; strcpy(return_opcode.name, what_opcode); 
5947   2519                              
5948   2519             ; --- START FUNCTION CALL
5949   2519                              
5950   2519 FA 05 00      lea d, [bp + 5] ; $what_opcode
5951   251C 2A            mov b, [d]
5952   251D 38 00 00      mov c, 0
5953   2520 FD AB         swp b
5954   2522 D8            push b
5955   2523                              
5956   2523 FA C4 FF      lea d, [bp + -60] ; $return_opcode
5957   2526 58 00 00      add d, 0
5958   2529 2D            mov b, d
5959   252A 38 00 00      mov c, 0
5960   252D FD AB         swp b
5961   252F D8            push b
5962   2530 07 5B 4B      call strcpy
5963   2533 51 04 00      add sp, 4
5964   2536             ; --- END FUNCTION CALL
5965   2536             ; while(*tbl_p == ' ') tbl_p++; 
5966   2536             _while119_cond:
5967   2536                              
5968   2536 FA DE FF      lea d, [bp + -34] ; $tbl_p
5969   2539 2A            mov b, [d]
5970   253A 38 00 00      mov c, 0
5971   253D 74            mov d, b
5972   253E 32            mov bl, [d]
5973   253F A7 00         mov bh, 0
5974   2541 38 00 00      mov c, 0
5975   2544             ; --- START RELATIONAL
5976   2544 D7            push a
5977   2545 11            mov a, b
5978   2546 FD 2E 20 00   mov32 cb, $00000020
5978   254A 00 00 
5979   254C B0            cmp a, b
5980   254D FD 71         seq ; ==
5981   254F E4            pop a
5982   2550             ; --- END RELATIONAL
5983   2550 C0 00 00      cmp b, 0
5984   2553 C6 69 25      je _while119_exit
5985   2556             _while119_block:
5986   2556             ; tbl_p++; 
5987   2556                              
5988   2556 FA DE FF      lea d, [bp + -34] ; $tbl_p
5989   2559 2A            mov b, [d]
5990   255A 38 00 00      mov c, 0
5991   255D FD 77         inc b
5992   255F FA DE FF      lea d, [bp + -34] ; $tbl_p
5993   2562 FD 43         mov [d], b
5994   2564 FD 7D         dec b
5995   2566 0A 36 25      jmp _while119_cond
5996   2569             _while119_exit:
5997   2569             ; while(is_hex_digit(*tbl_p)) *hex_p++ = *tbl_p++; // Copy hex opcode 
5998   2569             _while120_cond:
5999   2569                              
6000   2569             ; --- START FUNCTION CALL
6001   2569                              
6002   2569 FA DE FF      lea d, [bp + -34] ; $tbl_p
6003   256C 2A            mov b, [d]
6004   256D 38 00 00      mov c, 0
6005   2570 74            mov d, b
6006   2571 32            mov bl, [d]
6007   2572 A7 00         mov bh, 0
6008   2574 38 00 00      mov c, 0
6009   2577 DD            push bl
6010   2578 07 A9 29      call is_hex_digit
6011   257B 51 01 00      add sp, 1
6012   257E             ; --- END FUNCTION CALL
6013   257E C0 00 00      cmp b, 0
6014   2581 C6 B2 25      je _while120_exit
6015   2584             _while120_block:
6016   2584             ; *hex_p++ = *tbl_p++; // Copy hex opcode 
6017   2584 FA E2 FF      lea d, [bp + -30] ; $hex_p
6018   2587 2A            mov b, [d]
6019   2588 38 00 00      mov c, 0
6020   258B FD 77         inc b
6021   258D FA E2 FF      lea d, [bp + -30] ; $hex_p
6022   2590 FD 43         mov [d], b
6023   2592 FD 7D         dec b
6024   2594 D8            push b
6025   2595                              
6026   2595 FA DE FF      lea d, [bp + -34] ; $tbl_p
6027   2598 2A            mov b, [d]
6028   2599 38 00 00      mov c, 0
6029   259C FD 77         inc b
6030   259E FA DE FF      lea d, [bp + -34] ; $tbl_p
6031   25A1 FD 43         mov [d], b
6032   25A3 FD 7D         dec b
6033   25A5 74            mov d, b
6034   25A6 32            mov bl, [d]
6035   25A7 A7 00         mov bh, 0
6036   25A9 38 00 00      mov c, 0
6037   25AC E7            pop d
6038   25AD FD 3E         mov [d], bl
6039   25AF 0A 69 25      jmp _while120_cond
6040   25B2             _while120_exit:
6041   25B2             ; *hex_p = '\0'; 
6042   25B2 FA E2 FF      lea d, [bp + -30] ; $hex_p
6043   25B5 2A            mov b, [d]
6044   25B6 38 00 00      mov c, 0
6045   25B9 D8            push b
6046   25BA                              
6047   25BA FD 2E 00 00   mov32 cb, $00000000
6047   25BE 00 00 
6048   25C0 E7            pop d
6049   25C1 FD 3E         mov [d], bl
6050   25C3             ; if(strlen(opcode_hex) == 4){ 
6051   25C3             _if121_cond:
6052   25C3                              
6053   25C3             ; --- START FUNCTION CALL
6054   25C3                              
6055   25C3 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
6056   25C6 2D            mov b, d
6057   25C7 38 00 00      mov c, 0
6058   25CA FD AB         swp b
6059   25CC D8            push b
6060   25CD 07 16 40      call strlen
6061   25D0 51 02 00      add sp, 2
6062   25D3             ; --- END FUNCTION CALL
6063   25D3             ; --- START RELATIONAL
6064   25D3 D7            push a
6065   25D4 11            mov a, b
6066   25D5 FD 2E 04 00   mov32 cb, $00000004
6066   25D9 00 00 
6067   25DB B0            cmp a, b
6068   25DC FD 71         seq ; ==
6069   25DE E4            pop a
6070   25DF             ; --- END RELATIONAL
6071   25DF C0 00 00      cmp b, 0
6072   25E2 C6 2D 26      je _if121_else
6073   25E5             _if121_TRUE:
6074   25E5             ; return_opcode.opcode_type = 1; 
6075   25E5 FA C4 FF      lea d, [bp + -60] ; $return_opcode
6076   25E8 58 19 00      add d, 25
6077   25EB DA            push d
6078   25EC                              
6079   25EC FD 2E 01 00   mov32 cb, $00000001
6079   25F0 00 00 
6080   25F2 E7            pop d
6081   25F3 FD 3E         mov [d], bl
6082   25F5             ; *(opcode_hex + 2) = '\0'; 
6083   25F5                              
6084   25F5 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
6085   25F8 2D            mov b, d
6086   25F9 38 00 00      mov c, 0
6087   25FC             ; --- START TERMS
6088   25FC D7            push a
6089   25FD 11            mov a, b
6090   25FE FD 2E 02 00   mov32 cb, $00000002
6090   2602 00 00 
6091   2604 56            add b, a
6092   2605 E4            pop a
6093   2606             ; --- END TERMS
6094   2606 D8            push b
6095   2607                              
6096   2607 FD 2E 00 00   mov32 cb, $00000000
6096   260B 00 00 
6097   260D E7            pop d
6098   260E FD 43         mov [d], b
6099   2610             ; return_opcode.opcode = hex_to_int(opcode_hex); 
6100   2610 FA C4 FF      lea d, [bp + -60] ; $return_opcode
6101   2613 58 18 00      add d, 24
6102   2616 DA            push d
6103   2617                              
6104   2617             ; --- START FUNCTION CALL
6105   2617                              
6106   2617 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
6107   261A 2D            mov b, d
6108   261B 38 00 00      mov c, 0
6109   261E FD AB         swp b
6110   2620 D8            push b
6111   2621 07 03 3B      call hex_to_int
6112   2624 51 02 00      add sp, 2
6113   2627             ; --- END FUNCTION CALL
6114   2627 E7            pop d
6115   2628 FD 3E         mov [d], bl
6116   262A 0A 57 26      jmp _if121_exit
6117   262D             _if121_else:
6118   262D             ; return_opcode.opcode_type = 0; 
6119   262D FA C4 FF      lea d, [bp + -60] ; $return_opcode
6120   2630 58 19 00      add d, 25
6121   2633 DA            push d
6122   2634                              
6123   2634 FD 2E 00 00   mov32 cb, $00000000
6123   2638 00 00 
6124   263A E7            pop d
6125   263B FD 3E         mov [d], bl
6126   263D             ; return_opcode.opcode = hex_to_int(opcode_hex); 
6127   263D FA C4 FF      lea d, [bp + -60] ; $return_opcode
6128   2640 58 18 00      add d, 24
6129   2643 DA            push d
6130   2644                              
6131   2644             ; --- START FUNCTION CALL
6132   2644                              
6133   2644 FA E4 FF      lea d, [bp + -28] ; $opcode_hex
6134   2647 2D            mov b, d
6135   2648 38 00 00      mov c, 0
6136   264B FD AB         swp b
6137   264D D8            push b
6138   264E 07 03 3B      call hex_to_int
6139   2651 51 02 00      add sp, 2
6140   2654             ; --- END FUNCTION CALL
6141   2654 E7            pop d
6142   2655 FD 3E         mov [d], bl
6143   2657             _if121_exit:
6144   2657             ; return return_opcode; 
6145   2657                              
6146   2657 FA C4 FF      lea d, [bp + -60] ; $return_opcode
6147   265A 2D            mov b, d
6148   265B 38 00 00      mov c, 0
6149   265E F9            leave
6150   265F 09            ret
6151   2660 0A E8 26      jmp _if118_exit
6152   2663             _if118_else:
6153   2663             ; while(*tbl_p != '\n') tbl_p++; 
6154   2663             _while122_cond:
6155   2663                              
6156   2663 FA DE FF      lea d, [bp + -34] ; $tbl_p
6157   2666 2A            mov b, [d]
6158   2667 38 00 00      mov c, 0
6159   266A 74            mov d, b
6160   266B 32            mov bl, [d]
6161   266C A7 00         mov bh, 0
6162   266E 38 00 00      mov c, 0
6163   2671             ; --- START RELATIONAL
6164   2671 D7            push a
6165   2672 11            mov a, b
6166   2673 FD 2E 0A 00   mov32 cb, $0000000a
6166   2677 00 00 
6167   2679 B0            cmp a, b
6168   267A FD 72         sneq ; !=
6169   267C E4            pop a
6170   267D             ; --- END RELATIONAL
6171   267D C0 00 00      cmp b, 0
6172   2680 C6 96 26      je _while122_exit
6173   2683             _while122_block:
6174   2683             ; tbl_p++; 
6175   2683                              
6176   2683 FA DE FF      lea d, [bp + -34] ; $tbl_p
6177   2686 2A            mov b, [d]
6178   2687 38 00 00      mov c, 0
6179   268A FD 77         inc b
6180   268C FA DE FF      lea d, [bp + -34] ; $tbl_p
6181   268F FD 43         mov [d], b
6182   2691 FD 7D         dec b
6183   2693 0A 63 26      jmp _while122_cond
6184   2696             _while122_exit:
6185   2696             ; while(*tbl_p == '\n') tbl_p++; 
6186   2696             _while123_cond:
6187   2696                              
6188   2696 FA DE FF      lea d, [bp + -34] ; $tbl_p
6189   2699 2A            mov b, [d]
6190   269A 38 00 00      mov c, 0
6191   269D 74            mov d, b
6192   269E 32            mov bl, [d]
6193   269F A7 00         mov bh, 0
6194   26A1 38 00 00      mov c, 0
6195   26A4             ; --- START RELATIONAL
6196   26A4 D7            push a
6197   26A5 11            mov a, b
6198   26A6 FD 2E 0A 00   mov32 cb, $0000000a
6198   26AA 00 00 
6199   26AC B0            cmp a, b
6200   26AD FD 71         seq ; ==
6201   26AF E4            pop a
6202   26B0             ; --- END RELATIONAL
6203   26B0 C0 00 00      cmp b, 0
6204   26B3 C6 C9 26      je _while123_exit
6205   26B6             _while123_block:
6206   26B6             ; tbl_p++; 
6207   26B6                              
6208   26B6 FA DE FF      lea d, [bp + -34] ; $tbl_p
6209   26B9 2A            mov b, [d]
6210   26BA 38 00 00      mov c, 0
6211   26BD FD 77         inc b
6212   26BF FA DE FF      lea d, [bp + -34] ; $tbl_p
6213   26C2 FD 43         mov [d], b
6214   26C4 FD 7D         dec b
6215   26C6 0A 96 26      jmp _while123_cond
6216   26C9             _while123_exit:
6217   26C9             ; if(!*tbl_p) break; 
6218   26C9             _if124_cond:
6219   26C9                              
6220   26C9 FA DE FF      lea d, [bp + -34] ; $tbl_p
6221   26CC 2A            mov b, [d]
6222   26CD 38 00 00      mov c, 0
6223   26D0 74            mov d, b
6224   26D1 32            mov bl, [d]
6225   26D2 A7 00         mov bh, 0
6226   26D4 38 00 00      mov c, 0
6227   26D7 C0 00 00      cmp b, 0
6228   26DA FD 71         seq ; !
6229   26DC C0 00 00      cmp b, 0
6230   26DF C6 E8 26      je _if124_exit
6231   26E2             _if124_TRUE:
6232   26E2             ; break; 
6233   26E2 0A EB 26      jmp _for115_exit ; for break
6234   26E5 0A E8 26      jmp _if124_exit
6235   26E8             _if124_exit:
6236   26E8             _if118_exit:
6237   26E8             _for115_update:
6238   26E8 0A 05 24      jmp _for115_cond
6239   26EB             _for115_exit:
6240   26EB             ; return_opcode.name[0] = '\0'; 
6241   26EB FA C4 FF      lea d, [bp + -60] ; $return_opcode
6242   26EE 58 00 00      add d, 0
6243   26F1 D7            push a
6244   26F2 DA            push d
6245   26F3                              
6246   26F3 FD 2E 00 00   mov32 cb, $00000000
6246   26F7 00 00 
6247   26F9 E7            pop d
6248   26FA 5A            add d, b
6249   26FB E4            pop a
6250   26FC DA            push d
6251   26FD                              
6252   26FD FD 2E 00 00   mov32 cb, $00000000
6252   2701 00 00 
6253   2703 E7            pop d
6254   2704 FD 3E         mov [d], bl
6255   2706             ; return return_opcode; 
6256   2706                              
6257   2706 FA C4 FF      lea d, [bp + -60] ; $return_opcode
6258   2709 2D            mov b, d
6259   270A 38 00 00      mov c, 0
6260   270D F9            leave
6261   270E 09            ret
6262   270F             
6263   270F             forwards:
6264   270F F8 00 00      enter 0 ; (push bp; mov bp, sp)
6265   2712             ; bin_p = bin_p + amount; 
6266   2712 3B 83 4F      mov d, _bin_p ; $bin_p
6267   2715 DA            push d
6268   2716                              
6269   2716 3B 83 4F      mov d, _bin_p ; $bin_p
6270   2719 2A            mov b, [d]
6271   271A 38 00 00      mov c, 0
6272   271D             ; --- START TERMS
6273   271D D7            push a
6274   271E 11            mov a, b
6275   271F FA 05 00      lea d, [bp + 5] ; $amount
6276   2722 32            mov bl, [d]
6277   2723 A7 00         mov bh, 0
6278   2725 38 00 00      mov c, 0
6279   2728 56            add b, a
6280   2729 E4            pop a
6281   272A             ; --- END TERMS
6282   272A E7            pop d
6283   272B FD 43         mov [d], b
6284   272D             ; prog_size = prog_size + amount; 
6285   272D 3B 9D 4F      mov d, _prog_size ; $prog_size
6286   2730 DA            push d
6287   2731                              
6288   2731 3B 9D 4F      mov d, _prog_size ; $prog_size
6289   2734 2A            mov b, [d]
6290   2735 38 00 00      mov c, 0
6291   2738             ; --- START TERMS
6292   2738 D7            push a
6293   2739 11            mov a, b
6294   273A FA 05 00      lea d, [bp + 5] ; $amount
6295   273D 32            mov bl, [d]
6296   273E A7 00         mov bh, 0
6297   2740 38 00 00      mov c, 0
6298   2743 56            add b, a
6299   2744 E4            pop a
6300   2745             ; --- END TERMS
6301   2745 E7            pop d
6302   2746 FD 43         mov [d], b
6303   2748             ; pc = pc + amount; 
6304   2748 3B 34 4E      mov d, _pc ; $pc
6305   274B DA            push d
6306   274C                              
6307   274C 3B 34 4E      mov d, _pc ; $pc
6308   274F 2A            mov b, [d]
6309   2750 38 00 00      mov c, 0
6310   2753             ; --- START TERMS
6311   2753 D7            push a
6312   2754 11            mov a, b
6313   2755 FA 05 00      lea d, [bp + 5] ; $amount
6314   2758 32            mov bl, [d]
6315   2759 A7 00         mov bh, 0
6316   275B 38 00 00      mov c, 0
6317   275E 56            add b, a
6318   275F E4            pop a
6319   2760             ; --- END TERMS
6320   2760 E7            pop d
6321   2761 FD 43         mov [d], b
6322   2763 F9            leave
6323   2764 09            ret
6324   2765             
6325   2765             emit_byte:
6326   2765 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6327   2768             ; if(!emit_override){ 
6328   2768             _if125_cond:
6329   2768                              
6330   2768 FA 06 00      lea d, [bp + 6] ; $emit_override
6331   276B 32            mov bl, [d]
6332   276C A7 00         mov bh, 0
6333   276E 38 00 00      mov c, 0
6334   2771 C0 00 00      cmp b, 0
6335   2774 C6 8E 27      je _if125_exit
6336   2777             _if125_TRUE:
6337   2777             ; *bin_p = byte; 
6338   2777 3B 83 4F      mov d, _bin_p ; $bin_p
6339   277A 2A            mov b, [d]
6340   277B 38 00 00      mov c, 0
6341   277E D8            push b
6342   277F                              
6343   277F FA 05 00      lea d, [bp + 5] ; $byte
6344   2782 32            mov bl, [d]
6345   2783 A7 00         mov bh, 0
6346   2785 38 00 00      mov c, 0
6347   2788 E7            pop d
6348   2789 FD 3E         mov [d], bl
6349   278B 0A 8E 27      jmp _if125_exit
6350   278E             _if125_exit:
6351   278E             ; forwards(1); 
6352   278E                              
6353   278E             ; --- START FUNCTION CALL
6354   278E                              
6355   278E FD 2E 01 00   mov32 cb, $00000001
6355   2792 00 00 
6356   2794 DD            push bl
6357   2795 07 0F 27      call forwards
6358   2798 51 01 00      add sp, 1
6359   279B             ; --- END FUNCTION CALL
6360   279B F9            leave
6361   279C 09            ret
6362   279D             
6363   279D             emit_word:
6364   279D F8 00 00      enter 0 ; (push bp; mov bp, sp)
6365   27A0             ; if(!emit_override){ 
6366   27A0             _if126_cond:
6367   27A0                              
6368   27A0 FA 07 00      lea d, [bp + 7] ; $emit_override
6369   27A3 32            mov bl, [d]
6370   27A4 A7 00         mov bh, 0
6371   27A6 38 00 00      mov c, 0
6372   27A9 C0 00 00      cmp b, 0
6373   27AC C6 C4 27      je _if126_exit
6374   27AF             _if126_TRUE:
6375   27AF             ; *((int*)bin_p) = word; 
6376   27AF                              
6377   27AF 3B 83 4F      mov d, _bin_p ; $bin_p
6378   27B2 2A            mov b, [d]
6379   27B3 38 00 00      mov c, 0
6380   27B6 D8            push b
6381   27B7                              
6382   27B7 FA 05 00      lea d, [bp + 5] ; $word
6383   27BA 2A            mov b, [d]
6384   27BB 38 00 00      mov c, 0
6385   27BE E7            pop d
6386   27BF FD 43         mov [d], b
6387   27C1 0A C4 27      jmp _if126_exit
6388   27C4             _if126_exit:
6389   27C4             ; forwards(2); 
6390   27C4                              
6391   27C4             ; --- START FUNCTION CALL
6392   27C4                              
6393   27C4 FD 2E 02 00   mov32 cb, $00000002
6393   27C8 00 00 
6394   27CA DD            push bl
6395   27CB 07 0F 27      call forwards
6396   27CE 51 01 00      add sp, 1
6397   27D1             ; --- END FUNCTION CALL
6398   27D1 F9            leave
6399   27D2 09            ret
6400   27D3             
6401   27D3             back:
6402   27D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6403   27D6             ; char *t; 
6404   27D6 52 02 00      sub sp, 2
6405   27D9             ; t = token; 
6406   27D9 FA FF FF      lea d, [bp + -1] ; $t
6407   27DC DA            push d
6408   27DD                              
6409   27DD 3B 3D 4E      mov d, _token_data ; $token
6410   27E0 2D            mov b, d
6411   27E1 38 00 00      mov c, 0
6412   27E4 E7            pop d
6413   27E5 FD 43         mov [d], b
6414   27E7             ; while(*t){ 
6415   27E7             _while127_cond:
6416   27E7                              
6417   27E7 FA FF FF      lea d, [bp + -1] ; $t
6418   27EA 2A            mov b, [d]
6419   27EB 38 00 00      mov c, 0
6420   27EE 74            mov d, b
6421   27EF 32            mov bl, [d]
6422   27F0 A7 00         mov bh, 0
6423   27F2 38 00 00      mov c, 0
6424   27F5 C0 00 00      cmp b, 0
6425   27F8 C6 1E 28      je _while127_exit
6426   27FB             _while127_block:
6427   27FB             ; prog--; 
6428   27FB                              
6429   27FB 3B 3B 4E      mov d, _prog ; $prog
6430   27FE 2A            mov b, [d]
6431   27FF 38 00 00      mov c, 0
6432   2802 FD 7D         dec b
6433   2804 3B 3B 4E      mov d, _prog ; $prog
6434   2807 FD 43         mov [d], b
6435   2809 FD 77         inc b
6436   280B             ; t++; 
6437   280B                              
6438   280B FA FF FF      lea d, [bp + -1] ; $t
6439   280E 2A            mov b, [d]
6440   280F 38 00 00      mov c, 0
6441   2812 FD 77         inc b
6442   2814 FA FF FF      lea d, [bp + -1] ; $t
6443   2817 FD 43         mov [d], b
6444   2819 FD 7D         dec b
6445   281B 0A E7 27      jmp _while127_cond
6446   281E             _while127_exit:
6447   281E F9            leave
6448   281F 09            ret
6449   2820             
6450   2820             get_path:
6451   2820 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6452   2823             ; char *t; 
6453   2823 52 02 00      sub sp, 2
6454   2826             ; *token = '\0'; 
6455   2826 3B 3D 4E      mov d, _token_data ; $token
6456   2829 2D            mov b, d
6457   282A 38 00 00      mov c, 0
6458   282D D8            push b
6459   282E                              
6460   282E FD 2E 00 00   mov32 cb, $00000000
6460   2832 00 00 
6461   2834 E7            pop d
6462   2835 FD 3E         mov [d], bl
6463   2837             ; tok = 0; 
6464   2837 3B 37 4E      mov d, _tok ; $tok
6465   283A DA            push d
6466   283B                              
6467   283B FD 2E 00 00   mov32 cb, $00000000
6467   283F 00 00 
6468   2841 E7            pop d
6469   2842 FD 43         mov [d], b
6470   2844             ; toktype = 0; 
6471   2844 3B 39 4E      mov d, _toktype ; $toktype
6472   2847 DA            push d
6473   2848                              
6474   2848 FD 2E 00 00   mov32 cb, $00000000
6474   284C 00 00 
6475   284E E7            pop d
6476   284F FD 43         mov [d], b
6477   2851             ; t = token; 
6478   2851 FA FF FF      lea d, [bp + -1] ; $t
6479   2854 DA            push d
6480   2855                              
6481   2855 3B 3D 4E      mov d, _token_data ; $token
6482   2858 2D            mov b, d
6483   2859 38 00 00      mov c, 0
6484   285C E7            pop d
6485   285D FD 43         mov [d], b
6486   285F             ; while(is_space(*prog)) prog++; 
6487   285F             _while128_cond:
6488   285F                              
6489   285F             ; --- START FUNCTION CALL
6490   285F                              
6491   285F 3B 3B 4E      mov d, _prog ; $prog
6492   2862 2A            mov b, [d]
6493   2863 38 00 00      mov c, 0
6494   2866 74            mov d, b
6495   2867 32            mov bl, [d]
6496   2868 A7 00         mov bh, 0
6497   286A 38 00 00      mov c, 0
6498   286D DD            push bl
6499   286E 07 7A 3E      call is_space
6500   2871 51 01 00      add sp, 1
6501   2874             ; --- END FUNCTION CALL
6502   2874 C0 00 00      cmp b, 0
6503   2877 C6 8D 28      je _while128_exit
6504   287A             _while128_block:
6505   287A             ; prog++; 
6506   287A                              
6507   287A 3B 3B 4E      mov d, _prog ; $prog
6508   287D 2A            mov b, [d]
6509   287E 38 00 00      mov c, 0
6510   2881 FD 77         inc b
6511   2883 3B 3B 4E      mov d, _prog ; $prog
6512   2886 FD 43         mov [d], b
6513   2888 FD 7D         dec b
6514   288A 0A 5F 28      jmp _while128_cond
6515   288D             _while128_exit:
6516   288D             ; if(*prog == '\0'){ 
6517   288D             _if129_cond:
6518   288D                              
6519   288D 3B 3B 4E      mov d, _prog ; $prog
6520   2890 2A            mov b, [d]
6521   2891 38 00 00      mov c, 0
6522   2894 74            mov d, b
6523   2895 32            mov bl, [d]
6524   2896 A7 00         mov bh, 0
6525   2898 38 00 00      mov c, 0
6526   289B             ; --- START RELATIONAL
6527   289B D7            push a
6528   289C 11            mov a, b
6529   289D FD 2E 00 00   mov32 cb, $00000000
6529   28A1 00 00 
6530   28A3 B0            cmp a, b
6531   28A4 FD 71         seq ; ==
6532   28A6 E4            pop a
6533   28A7             ; --- END RELATIONAL
6534   28A7 C0 00 00      cmp b, 0
6535   28AA C6 BF 28      je _if129_exit
6536   28AD             _if129_TRUE:
6537   28AD             ; toktype = END; 
6538   28AD 3B 39 4E      mov d, _toktype ; $toktype
6539   28B0 DA            push d
6540   28B1                              
6541   28B1 FD 2E 07 00   mov32 cb, $7 ; enum element: END
6541   28B5 00 00 
6542   28B7 E7            pop d
6543   28B8 FD 43         mov [d], b
6544   28BA             ; return; 
6545   28BA F9            leave
6546   28BB 09            ret
6547   28BC 0A BF 28      jmp _if129_exit
6548   28BF             _if129_exit:
6549   28BF             ; while(*prog == '/' || is_alpha(*prog) || is_digit(*prog) || *prog == '_' || *prog == '-' || *prog == '.') { 
6550   28BF             _while130_cond:
6551   28BF                              
6552   28BF 3B 3B 4E      mov d, _prog ; $prog
6553   28C2 2A            mov b, [d]
6554   28C3 38 00 00      mov c, 0
6555   28C6 74            mov d, b
6556   28C7 32            mov bl, [d]
6557   28C8 A7 00         mov bh, 0
6558   28CA 38 00 00      mov c, 0
6559   28CD             ; --- START RELATIONAL
6560   28CD D7            push a
6561   28CE 11            mov a, b
6562   28CF FD 2E 2F 00   mov32 cb, $0000002f
6562   28D3 00 00 
6563   28D5 B0            cmp a, b
6564   28D6 FD 71         seq ; ==
6565   28D8 E4            pop a
6566   28D9             ; --- END RELATIONAL
6567   28D9             ; --- START LOGICAL OR
6568   28D9 D7            push a
6569   28DA 11            mov a, b
6570   28DB             ; --- START FUNCTION CALL
6571   28DB                              
6572   28DB 3B 3B 4E      mov d, _prog ; $prog
6573   28DE 2A            mov b, [d]
6574   28DF 38 00 00      mov c, 0
6575   28E2 74            mov d, b
6576   28E3 32            mov bl, [d]
6577   28E4 A7 00         mov bh, 0
6578   28E6 38 00 00      mov c, 0
6579   28E9 DD            push bl
6580   28EA 07 DE 3E      call is_alpha
6581   28ED 51 01 00      add sp, 1
6582   28F0             ; --- END FUNCTION CALL
6583   28F0 FD A8         sor a, b ; ||
6584   28F2 11            mov a, b
6585   28F3             ; --- START FUNCTION CALL
6586   28F3                              
6587   28F3 3B 3B 4E      mov d, _prog ; $prog
6588   28F6 2A            mov b, [d]
6589   28F7 38 00 00      mov c, 0
6590   28FA 74            mov d, b
6591   28FB 32            mov bl, [d]
6592   28FC A7 00         mov bh, 0
6593   28FE 38 00 00      mov c, 0
6594   2901 DD            push bl
6595   2902 07 5E 3F      call is_digit
6596   2905 51 01 00      add sp, 1
6597   2908             ; --- END FUNCTION CALL
6598   2908 FD A8         sor a, b ; ||
6599   290A 11            mov a, b
6600   290B 3B 3B 4E      mov d, _prog ; $prog
6601   290E 2A            mov b, [d]
6602   290F 38 00 00      mov c, 0
6603   2912 74            mov d, b
6604   2913 32            mov bl, [d]
6605   2914 A7 00         mov bh, 0
6606   2916 38 00 00      mov c, 0
6607   2919             ; --- START RELATIONAL
6608   2919 D7            push a
6609   291A 11            mov a, b
6610   291B FD 2E 5F 00   mov32 cb, $0000005f
6610   291F 00 00 
6611   2921 B0            cmp a, b
6612   2922 FD 71         seq ; ==
6613   2924 E4            pop a
6614   2925             ; --- END RELATIONAL
6615   2925 FD A8         sor a, b ; ||
6616   2927 11            mov a, b
6617   2928 3B 3B 4E      mov d, _prog ; $prog
6618   292B 2A            mov b, [d]
6619   292C 38 00 00      mov c, 0
6620   292F 74            mov d, b
6621   2930 32            mov bl, [d]
6622   2931 A7 00         mov bh, 0
6623   2933 38 00 00      mov c, 0
6624   2936             ; --- START RELATIONAL
6625   2936 D7            push a
6626   2937 11            mov a, b
6627   2938 FD 2E 2D 00   mov32 cb, $0000002d
6627   293C 00 00 
6628   293E B0            cmp a, b
6629   293F FD 71         seq ; ==
6630   2941 E4            pop a
6631   2942             ; --- END RELATIONAL
6632   2942 FD A8         sor a, b ; ||
6633   2944 11            mov a, b
6634   2945 3B 3B 4E      mov d, _prog ; $prog
6635   2948 2A            mov b, [d]
6636   2949 38 00 00      mov c, 0
6637   294C 74            mov d, b
6638   294D 32            mov bl, [d]
6639   294E A7 00         mov bh, 0
6640   2950 38 00 00      mov c, 0
6641   2953             ; --- START RELATIONAL
6642   2953 D7            push a
6643   2954 11            mov a, b
6644   2955 FD 2E 2E 00   mov32 cb, $0000002e
6644   2959 00 00 
6645   295B B0            cmp a, b
6646   295C FD 71         seq ; ==
6647   295E E4            pop a
6648   295F             ; --- END RELATIONAL
6649   295F FD A8         sor a, b ; ||
6650   2961 E4            pop a
6651   2962             ; --- END LOGICAL OR
6652   2962 C0 00 00      cmp b, 0
6653   2965 C6 96 29      je _while130_exit
6654   2968             _while130_block:
6655   2968             ; *t++ = *prog++; 
6656   2968 FA FF FF      lea d, [bp + -1] ; $t
6657   296B 2A            mov b, [d]
6658   296C 38 00 00      mov c, 0
6659   296F FD 77         inc b
6660   2971 FA FF FF      lea d, [bp + -1] ; $t
6661   2974 FD 43         mov [d], b
6662   2976 FD 7D         dec b
6663   2978 D8            push b
6664   2979                              
6665   2979 3B 3B 4E      mov d, _prog ; $prog
6666   297C 2A            mov b, [d]
6667   297D 38 00 00      mov c, 0
6668   2980 FD 77         inc b
6669   2982 3B 3B 4E      mov d, _prog ; $prog
6670   2985 FD 43         mov [d], b
6671   2987 FD 7D         dec b
6672   2989 74            mov d, b
6673   298A 32            mov bl, [d]
6674   298B A7 00         mov bh, 0
6675   298D 38 00 00      mov c, 0
6676   2990 E7            pop d
6677   2991 FD 3E         mov [d], bl
6678   2993 0A BF 28      jmp _while130_cond
6679   2996             _while130_exit:
6680   2996             ; *t = '\0'; 
6681   2996 FA FF FF      lea d, [bp + -1] ; $t
6682   2999 2A            mov b, [d]
6683   299A 38 00 00      mov c, 0
6684   299D D8            push b
6685   299E                              
6686   299E FD 2E 00 00   mov32 cb, $00000000
6686   29A2 00 00 
6687   29A4 E7            pop d
6688   29A5 FD 3E         mov [d], bl
6689   29A7 F9            leave
6690   29A8 09            ret
6691   29A9             
6692   29A9             is_hex_digit:
6693   29A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6694   29AC             ; return c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f'; 
6695   29AC                              
6696   29AC FA 05 00      lea d, [bp + 5] ; $c
6697   29AF 32            mov bl, [d]
6698   29B0 A7 00         mov bh, 0
6699   29B2 38 00 00      mov c, 0
6700   29B5             ; --- START RELATIONAL
6701   29B5 D7            push a
6702   29B6 11            mov a, b
6703   29B7 FD 2E 30 00   mov32 cb, $00000030
6703   29BB 00 00 
6704   29BD B0            cmp a, b
6705   29BE FD 80         sge ; >=
6706   29C0 E4            pop a
6707   29C1             ; --- END RELATIONAL
6708   29C1             ; --- START LOGICAL AND
6709   29C1 D7            push a
6710   29C2 11            mov a, b
6711   29C3 FA 05 00      lea d, [bp + 5] ; $c
6712   29C6 32            mov bl, [d]
6713   29C7 A7 00         mov bh, 0
6714   29C9 38 00 00      mov c, 0
6715   29CC             ; --- START RELATIONAL
6716   29CC D7            push a
6717   29CD 11            mov a, b
6718   29CE FD 2E 39 00   mov32 cb, $00000039
6718   29D2 00 00 
6719   29D4 B0            cmp a, b
6720   29D5 FD 74         sle ; <= (signed)
6721   29D7 E4            pop a
6722   29D8             ; --- END RELATIONAL
6723   29D8 FD A7         sand a, b
6724   29DA E4            pop a
6725   29DB             ; --- END LOGICAL AND
6726   29DB             ; --- START LOGICAL OR
6727   29DB D7            push a
6728   29DC 11            mov a, b
6729   29DD FA 05 00      lea d, [bp + 5] ; $c
6730   29E0 32            mov bl, [d]
6731   29E1 A7 00         mov bh, 0
6732   29E3 38 00 00      mov c, 0
6733   29E6             ; --- START RELATIONAL
6734   29E6 D7            push a
6735   29E7 11            mov a, b
6736   29E8 FD 2E 41 00   mov32 cb, $00000041
6736   29EC 00 00 
6737   29EE B0            cmp a, b
6738   29EF FD 80         sge ; >=
6739   29F1 E4            pop a
6740   29F2             ; --- END RELATIONAL
6741   29F2             ; --- START LOGICAL AND
6742   29F2 D7            push a
6743   29F3 11            mov a, b
6744   29F4 FA 05 00      lea d, [bp + 5] ; $c
6745   29F7 32            mov bl, [d]
6746   29F8 A7 00         mov bh, 0
6747   29FA 38 00 00      mov c, 0
6748   29FD             ; --- START RELATIONAL
6749   29FD D7            push a
6750   29FE 11            mov a, b
6751   29FF FD 2E 46 00   mov32 cb, $00000046
6751   2A03 00 00 
6752   2A05 B0            cmp a, b
6753   2A06 FD 74         sle ; <= (signed)
6754   2A08 E4            pop a
6755   2A09             ; --- END RELATIONAL
6756   2A09 FD A7         sand a, b
6757   2A0B E4            pop a
6758   2A0C             ; --- END LOGICAL AND
6759   2A0C FD A8         sor a, b ; ||
6760   2A0E 11            mov a, b
6761   2A0F FA 05 00      lea d, [bp + 5] ; $c
6762   2A12 32            mov bl, [d]
6763   2A13 A7 00         mov bh, 0
6764   2A15 38 00 00      mov c, 0
6765   2A18             ; --- START RELATIONAL
6766   2A18 D7            push a
6767   2A19 11            mov a, b
6768   2A1A FD 2E 61 00   mov32 cb, $00000061
6768   2A1E 00 00 
6769   2A20 B0            cmp a, b
6770   2A21 FD 80         sge ; >=
6771   2A23 E4            pop a
6772   2A24             ; --- END RELATIONAL
6773   2A24             ; --- START LOGICAL AND
6774   2A24 D7            push a
6775   2A25 11            mov a, b
6776   2A26 FA 05 00      lea d, [bp + 5] ; $c
6777   2A29 32            mov bl, [d]
6778   2A2A A7 00         mov bh, 0
6779   2A2C 38 00 00      mov c, 0
6780   2A2F             ; --- START RELATIONAL
6781   2A2F D7            push a
6782   2A30 11            mov a, b
6783   2A31 FD 2E 66 00   mov32 cb, $00000066
6783   2A35 00 00 
6784   2A37 B0            cmp a, b
6785   2A38 FD 74         sle ; <= (signed)
6786   2A3A E4            pop a
6787   2A3B             ; --- END RELATIONAL
6788   2A3B FD A7         sand a, b
6789   2A3D E4            pop a
6790   2A3E             ; --- END LOGICAL AND
6791   2A3E FD A8         sor a, b ; ||
6792   2A40 E4            pop a
6793   2A41             ; --- END LOGICAL OR
6794   2A41 F9            leave
6795   2A42 09            ret
6796   2A43             
6797   2A43             get_line:
6798   2A43 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6799   2A46             ; char *t; 
6800   2A46 52 02 00      sub sp, 2
6801   2A49             ; t = string_const; 
6802   2A49 FA FF FF      lea d, [bp + -1] ; $t
6803   2A4C DA            push d
6804   2A4D                              
6805   2A4D 3B 7D 4E      mov d, _string_const_data ; $string_const
6806   2A50 2D            mov b, d
6807   2A51 38 00 00      mov c, 0
6808   2A54 E7            pop d
6809   2A55 FD 43         mov [d], b
6810   2A57             ; *t = '\0'; 
6811   2A57 FA FF FF      lea d, [bp + -1] ; $t
6812   2A5A 2A            mov b, [d]
6813   2A5B 38 00 00      mov c, 0
6814   2A5E D8            push b
6815   2A5F                              
6816   2A5F FD 2E 00 00   mov32 cb, $00000000
6816   2A63 00 00 
6817   2A65 E7            pop d
6818   2A66 FD 3E         mov [d], bl
6819   2A68             ; while(*prog != 0x0A && *prog != '\0'){ 
6820   2A68             _while131_cond:
6821   2A68                              
6822   2A68 3B 3B 4E      mov d, _prog ; $prog
6823   2A6B 2A            mov b, [d]
6824   2A6C 38 00 00      mov c, 0
6825   2A6F 74            mov d, b
6826   2A70 32            mov bl, [d]
6827   2A71 A7 00         mov bh, 0
6828   2A73 38 00 00      mov c, 0
6829   2A76             ; --- START RELATIONAL
6830   2A76 D7            push a
6831   2A77 11            mov a, b
6832   2A78 FD 2E 0A 00   mov32 cb, $0000000a
6832   2A7C 00 00 
6833   2A7E B0            cmp a, b
6834   2A7F FD 72         sneq ; !=
6835   2A81 E4            pop a
6836   2A82             ; --- END RELATIONAL
6837   2A82             ; --- START LOGICAL AND
6838   2A82 D7            push a
6839   2A83 11            mov a, b
6840   2A84 3B 3B 4E      mov d, _prog ; $prog
6841   2A87 2A            mov b, [d]
6842   2A88 38 00 00      mov c, 0
6843   2A8B 74            mov d, b
6844   2A8C 32            mov bl, [d]
6845   2A8D A7 00         mov bh, 0
6846   2A8F 38 00 00      mov c, 0
6847   2A92             ; --- START RELATIONAL
6848   2A92 D7            push a
6849   2A93 11            mov a, b
6850   2A94 FD 2E 00 00   mov32 cb, $00000000
6850   2A98 00 00 
6851   2A9A B0            cmp a, b
6852   2A9B FD 72         sneq ; !=
6853   2A9D E4            pop a
6854   2A9E             ; --- END RELATIONAL
6855   2A9E FD A7         sand a, b
6856   2AA0 E4            pop a
6857   2AA1             ; --- END LOGICAL AND
6858   2AA1 C0 00 00      cmp b, 0
6859   2AA4 C6 4D 2B      je _while131_exit
6860   2AA7             _while131_block:
6861   2AA7             ; if(*prog == ';'){ 
6862   2AA7             _if132_cond:
6863   2AA7                              
6864   2AA7 3B 3B 4E      mov d, _prog ; $prog
6865   2AAA 2A            mov b, [d]
6866   2AAB 38 00 00      mov c, 0
6867   2AAE 74            mov d, b
6868   2AAF 32            mov bl, [d]
6869   2AB0 A7 00         mov bh, 0
6870   2AB2 38 00 00      mov c, 0
6871   2AB5             ; --- START RELATIONAL
6872   2AB5 D7            push a
6873   2AB6 11            mov a, b
6874   2AB7 FD 2E 3B 00   mov32 cb, $0000003b
6874   2ABB 00 00 
6875   2ABD B0            cmp a, b
6876   2ABE FD 71         seq ; ==
6877   2AC0 E4            pop a
6878   2AC1             ; --- END RELATIONAL
6879   2AC1 C0 00 00      cmp b, 0
6880   2AC4 C6 1F 2B      je _if132_else
6881   2AC7             _if132_TRUE:
6882   2AC7             ; while(*prog != 0x0A && *prog != '\0') prog++; 
6883   2AC7             _while133_cond:
6884   2AC7                              
6885   2AC7 3B 3B 4E      mov d, _prog ; $prog
6886   2ACA 2A            mov b, [d]
6887   2ACB 38 00 00      mov c, 0
6888   2ACE 74            mov d, b
6889   2ACF 32            mov bl, [d]
6890   2AD0 A7 00         mov bh, 0
6891   2AD2 38 00 00      mov c, 0
6892   2AD5             ; --- START RELATIONAL
6893   2AD5 D7            push a
6894   2AD6 11            mov a, b
6895   2AD7 FD 2E 0A 00   mov32 cb, $0000000a
6895   2ADB 00 00 
6896   2ADD B0            cmp a, b
6897   2ADE FD 72         sneq ; !=
6898   2AE0 E4            pop a
6899   2AE1             ; --- END RELATIONAL
6900   2AE1             ; --- START LOGICAL AND
6901   2AE1 D7            push a
6902   2AE2 11            mov a, b
6903   2AE3 3B 3B 4E      mov d, _prog ; $prog
6904   2AE6 2A            mov b, [d]
6905   2AE7 38 00 00      mov c, 0
6906   2AEA 74            mov d, b
6907   2AEB 32            mov bl, [d]
6908   2AEC A7 00         mov bh, 0
6909   2AEE 38 00 00      mov c, 0
6910   2AF1             ; --- START RELATIONAL
6911   2AF1 D7            push a
6912   2AF2 11            mov a, b
6913   2AF3 FD 2E 00 00   mov32 cb, $00000000
6913   2AF7 00 00 
6914   2AF9 B0            cmp a, b
6915   2AFA FD 72         sneq ; !=
6916   2AFC E4            pop a
6917   2AFD             ; --- END RELATIONAL
6918   2AFD FD A7         sand a, b
6919   2AFF E4            pop a
6920   2B00             ; --- END LOGICAL AND
6921   2B00 C0 00 00      cmp b, 0
6922   2B03 C6 19 2B      je _while133_exit
6923   2B06             _while133_block:
6924   2B06             ; prog++; 
6925   2B06                              
6926   2B06 3B 3B 4E      mov d, _prog ; $prog
6927   2B09 2A            mov b, [d]
6928   2B0A 38 00 00      mov c, 0
6929   2B0D FD 77         inc b
6930   2B0F 3B 3B 4E      mov d, _prog ; $prog
6931   2B12 FD 43         mov [d], b
6932   2B14 FD 7D         dec b
6933   2B16 0A C7 2A      jmp _while133_cond
6934   2B19             _while133_exit:
6935   2B19             ; break; 
6936   2B19 0A 4D 2B      jmp _while131_exit ; while break
6937   2B1C 0A 4A 2B      jmp _if132_exit
6938   2B1F             _if132_else:
6939   2B1F             ; *t++ = *prog++; 
6940   2B1F FA FF FF      lea d, [bp + -1] ; $t
6941   2B22 2A            mov b, [d]
6942   2B23 38 00 00      mov c, 0
6943   2B26 FD 77         inc b
6944   2B28 FA FF FF      lea d, [bp + -1] ; $t
6945   2B2B FD 43         mov [d], b
6946   2B2D FD 7D         dec b
6947   2B2F D8            push b
6948   2B30                              
6949   2B30 3B 3B 4E      mov d, _prog ; $prog
6950   2B33 2A            mov b, [d]
6951   2B34 38 00 00      mov c, 0
6952   2B37 FD 77         inc b
6953   2B39 3B 3B 4E      mov d, _prog ; $prog
6954   2B3C FD 43         mov [d], b
6955   2B3E FD 7D         dec b
6956   2B40 74            mov d, b
6957   2B41 32            mov bl, [d]
6958   2B42 A7 00         mov bh, 0
6959   2B44 38 00 00      mov c, 0
6960   2B47 E7            pop d
6961   2B48 FD 3E         mov [d], bl
6962   2B4A             _if132_exit:
6963   2B4A 0A 68 2A      jmp _while131_cond
6964   2B4D             _while131_exit:
6965   2B4D             ; *t = '\0'; 
6966   2B4D FA FF FF      lea d, [bp + -1] ; $t
6967   2B50 2A            mov b, [d]
6968   2B51 38 00 00      mov c, 0
6969   2B54 D8            push b
6970   2B55                              
6971   2B55 FD 2E 00 00   mov32 cb, $00000000
6971   2B59 00 00 
6972   2B5B E7            pop d
6973   2B5C FD 3E         mov [d], bl
6974   2B5E F9            leave
6975   2B5F 09            ret
6976   2B60             
6977   2B60             get:
6978   2B60 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6979   2B63             ; char *t; 
6980   2B63 52 02 00      sub sp, 2
6981   2B66             ; char temp_hex[64]; 
6982   2B66 52 40 00      sub sp, 64
6983   2B69             ; char *p; 
6984   2B69 52 02 00      sub sp, 2
6985   2B6C             ; *token = '\0'; 
6986   2B6C 3B 3D 4E      mov d, _token_data ; $token
6987   2B6F 2D            mov b, d
6988   2B70 38 00 00      mov c, 0
6989   2B73 D8            push b
6990   2B74                              
6991   2B74 FD 2E 00 00   mov32 cb, $00000000
6991   2B78 00 00 
6992   2B7A E7            pop d
6993   2B7B FD 3E         mov [d], bl
6994   2B7D             ; tok = TOK_UNDEF; 
6995   2B7D 3B 37 4E      mov d, _tok ; $tok
6996   2B80 DA            push d
6997   2B81                              
6998   2B81 FD 2E 00 00   mov32 cb, $0 ; enum element: TOK_UNDEF
6998   2B85 00 00 
6999   2B87 E7            pop d
7000   2B88 FD 43         mov [d], b
7001   2B8A             ; toktype = TYPE_UNDEF; 
7002   2B8A 3B 39 4E      mov d, _toktype ; $toktype
7003   2B8D DA            push d
7004   2B8E                              
7005   2B8E FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
7005   2B92 00 00 
7006   2B94 E7            pop d
7007   2B95 FD 43         mov [d], b
7008   2B97             ; t = token; 
7009   2B97 FA FF FF      lea d, [bp + -1] ; $t
7010   2B9A DA            push d
7011   2B9B                              
7012   2B9B 3B 3D 4E      mov d, _token_data ; $token
7013   2B9E 2D            mov b, d
7014   2B9F 38 00 00      mov c, 0
7015   2BA2 E7            pop d
7016   2BA3 FD 43         mov [d], b
7017   2BA5             ; do{ 
7018   2BA5             _do134_block:
7019   2BA5             ; while(is_space(*prog)) prog++; 
7020   2BA5             _while135_cond:
7021   2BA5                              
7022   2BA5             ; --- START FUNCTION CALL
7023   2BA5                              
7024   2BA5 3B 3B 4E      mov d, _prog ; $prog
7025   2BA8 2A            mov b, [d]
7026   2BA9 38 00 00      mov c, 0
7027   2BAC 74            mov d, b
7028   2BAD 32            mov bl, [d]
7029   2BAE A7 00         mov bh, 0
7030   2BB0 38 00 00      mov c, 0
7031   2BB3 DD            push bl
7032   2BB4 07 7A 3E      call is_space
7033   2BB7 51 01 00      add sp, 1
7034   2BBA             ; --- END FUNCTION CALL
7035   2BBA C0 00 00      cmp b, 0
7036   2BBD C6 D3 2B      je _while135_exit
7037   2BC0             _while135_block:
7038   2BC0             ; prog++; 
7039   2BC0                              
7040   2BC0 3B 3B 4E      mov d, _prog ; $prog
7041   2BC3 2A            mov b, [d]
7042   2BC4 38 00 00      mov c, 0
7043   2BC7 FD 77         inc b
7044   2BC9 3B 3B 4E      mov d, _prog ; $prog
7045   2BCC FD 43         mov [d], b
7046   2BCE FD 7D         dec b
7047   2BD0 0A A5 2B      jmp _while135_cond
7048   2BD3             _while135_exit:
7049   2BD3             ; if(*prog == ';'){ 
7050   2BD3             _if136_cond:
7051   2BD3                              
7052   2BD3 3B 3B 4E      mov d, _prog ; $prog
7053   2BD6 2A            mov b, [d]
7054   2BD7 38 00 00      mov c, 0
7055   2BDA 74            mov d, b
7056   2BDB 32            mov bl, [d]
7057   2BDC A7 00         mov bh, 0
7058   2BDE 38 00 00      mov c, 0
7059   2BE1             ; --- START RELATIONAL
7060   2BE1 D7            push a
7061   2BE2 11            mov a, b
7062   2BE3 FD 2E 3B 00   mov32 cb, $0000003b
7062   2BE7 00 00 
7063   2BE9 B0            cmp a, b
7064   2BEA FD 71         seq ; ==
7065   2BEC E4            pop a
7066   2BED             ; --- END RELATIONAL
7067   2BED C0 00 00      cmp b, 0
7068   2BF0 C6 5C 2C      je _if136_exit
7069   2BF3             _if136_TRUE:
7070   2BF3             ; while(*prog != '\n') prog++; 
7071   2BF3             _while137_cond:
7072   2BF3                              
7073   2BF3 3B 3B 4E      mov d, _prog ; $prog
7074   2BF6 2A            mov b, [d]
7075   2BF7 38 00 00      mov c, 0
7076   2BFA 74            mov d, b
7077   2BFB 32            mov bl, [d]
7078   2BFC A7 00         mov bh, 0
7079   2BFE 38 00 00      mov c, 0
7080   2C01             ; --- START RELATIONAL
7081   2C01 D7            push a
7082   2C02 11            mov a, b
7083   2C03 FD 2E 0A 00   mov32 cb, $0000000a
7083   2C07 00 00 
7084   2C09 B0            cmp a, b
7085   2C0A FD 72         sneq ; !=
7086   2C0C E4            pop a
7087   2C0D             ; --- END RELATIONAL
7088   2C0D C0 00 00      cmp b, 0
7089   2C10 C6 26 2C      je _while137_exit
7090   2C13             _while137_block:
7091   2C13             ; prog++; 
7092   2C13                              
7093   2C13 3B 3B 4E      mov d, _prog ; $prog
7094   2C16 2A            mov b, [d]
7095   2C17 38 00 00      mov c, 0
7096   2C1A FD 77         inc b
7097   2C1C 3B 3B 4E      mov d, _prog ; $prog
7098   2C1F FD 43         mov [d], b
7099   2C21 FD 7D         dec b
7100   2C23 0A F3 2B      jmp _while137_cond
7101   2C26             _while137_exit:
7102   2C26             ; if(*prog == '\n') prog++; 
7103   2C26             _if138_cond:
7104   2C26                              
7105   2C26 3B 3B 4E      mov d, _prog ; $prog
7106   2C29 2A            mov b, [d]
7107   2C2A 38 00 00      mov c, 0
7108   2C2D 74            mov d, b
7109   2C2E 32            mov bl, [d]
7110   2C2F A7 00         mov bh, 0
7111   2C31 38 00 00      mov c, 0
7112   2C34             ; --- START RELATIONAL
7113   2C34 D7            push a
7114   2C35 11            mov a, b
7115   2C36 FD 2E 0A 00   mov32 cb, $0000000a
7115   2C3A 00 00 
7116   2C3C B0            cmp a, b
7117   2C3D FD 71         seq ; ==
7118   2C3F E4            pop a
7119   2C40             ; --- END RELATIONAL
7120   2C40 C0 00 00      cmp b, 0
7121   2C43 C6 59 2C      je _if138_exit
7122   2C46             _if138_TRUE:
7123   2C46             ; prog++; 
7124   2C46                              
7125   2C46 3B 3B 4E      mov d, _prog ; $prog
7126   2C49 2A            mov b, [d]
7127   2C4A 38 00 00      mov c, 0
7128   2C4D FD 77         inc b
7129   2C4F 3B 3B 4E      mov d, _prog ; $prog
7130   2C52 FD 43         mov [d], b
7131   2C54 FD 7D         dec b
7132   2C56 0A 59 2C      jmp _if138_exit
7133   2C59             _if138_exit:
7134   2C59 0A 5C 2C      jmp _if136_exit
7135   2C5C             _if136_exit:
7136   2C5C             ; } while(is_space(*prog) || *prog == ';'); 
7137   2C5C             _do134_cond:
7138   2C5C                              
7139   2C5C             ; --- START FUNCTION CALL
7140   2C5C                              
7141   2C5C 3B 3B 4E      mov d, _prog ; $prog
7142   2C5F 2A            mov b, [d]
7143   2C60 38 00 00      mov c, 0
7144   2C63 74            mov d, b
7145   2C64 32            mov bl, [d]
7146   2C65 A7 00         mov bh, 0
7147   2C67 38 00 00      mov c, 0
7148   2C6A DD            push bl
7149   2C6B 07 7A 3E      call is_space
7150   2C6E 51 01 00      add sp, 1
7151   2C71             ; --- END FUNCTION CALL
7152   2C71             ; --- START LOGICAL OR
7153   2C71 D7            push a
7154   2C72 11            mov a, b
7155   2C73 3B 3B 4E      mov d, _prog ; $prog
7156   2C76 2A            mov b, [d]
7157   2C77 38 00 00      mov c, 0
7158   2C7A 74            mov d, b
7159   2C7B 32            mov bl, [d]
7160   2C7C A7 00         mov bh, 0
7161   2C7E 38 00 00      mov c, 0
7162   2C81             ; --- START RELATIONAL
7163   2C81 D7            push a
7164   2C82 11            mov a, b
7165   2C83 FD 2E 3B 00   mov32 cb, $0000003b
7165   2C87 00 00 
7166   2C89 B0            cmp a, b
7167   2C8A FD 71         seq ; ==
7168   2C8C E4            pop a
7169   2C8D             ; --- END RELATIONAL
7170   2C8D FD A8         sor a, b ; ||
7171   2C8F E4            pop a
7172   2C90             ; --- END LOGICAL OR
7173   2C90 C0 01 00      cmp b, 1
7174   2C93 C6 A5 2B      je _do134_block
7175   2C96             _do134_exit:
7176   2C96             ; if(*prog == '\0'){ 
7177   2C96             _if139_cond:
7178   2C96                              
7179   2C96 3B 3B 4E      mov d, _prog ; $prog
7180   2C99 2A            mov b, [d]
7181   2C9A 38 00 00      mov c, 0
7182   2C9D 74            mov d, b
7183   2C9E 32            mov bl, [d]
7184   2C9F A7 00         mov bh, 0
7185   2CA1 38 00 00      mov c, 0
7186   2CA4             ; --- START RELATIONAL
7187   2CA4 D7            push a
7188   2CA5 11            mov a, b
7189   2CA6 FD 2E 00 00   mov32 cb, $00000000
7189   2CAA 00 00 
7190   2CAC B0            cmp a, b
7191   2CAD FD 71         seq ; ==
7192   2CAF E4            pop a
7193   2CB0             ; --- END RELATIONAL
7194   2CB0 C0 00 00      cmp b, 0
7195   2CB3 C6 C8 2C      je _if139_exit
7196   2CB6             _if139_TRUE:
7197   2CB6             ; toktype = END; 
7198   2CB6 3B 39 4E      mov d, _toktype ; $toktype
7199   2CB9 DA            push d
7200   2CBA                              
7201   2CBA FD 2E 07 00   mov32 cb, $7 ; enum element: END
7201   2CBE 00 00 
7202   2CC0 E7            pop d
7203   2CC1 FD 43         mov [d], b
7204   2CC3             ; return; 
7205   2CC3 F9            leave
7206   2CC4 09            ret
7207   2CC5 0A C8 2C      jmp _if139_exit
7208   2CC8             _if139_exit:
7209   2CC8             ; if(is_alpha(*prog)){ 
7210   2CC8             _if140_cond:
7211   2CC8                              
7212   2CC8             ; --- START FUNCTION CALL
7213   2CC8                              
7214   2CC8 3B 3B 4E      mov d, _prog ; $prog
7215   2CCB 2A            mov b, [d]
7216   2CCC 38 00 00      mov c, 0
7217   2CCF 74            mov d, b
7218   2CD0 32            mov bl, [d]
7219   2CD1 A7 00         mov bh, 0
7220   2CD3 38 00 00      mov c, 0
7221   2CD6 DD            push bl
7222   2CD7 07 DE 3E      call is_alpha
7223   2CDA 51 01 00      add sp, 1
7224   2CDD             ; --- END FUNCTION CALL
7225   2CDD C0 00 00      cmp b, 0
7226   2CE0 C6 A0 2D      je _if140_else
7227   2CE3             _if140_TRUE:
7228   2CE3             ; while(is_alpha(*prog) || is_digit(*prog)){ 
7229   2CE3             _while141_cond:
7230   2CE3                              
7231   2CE3             ; --- START FUNCTION CALL
7232   2CE3                              
7233   2CE3 3B 3B 4E      mov d, _prog ; $prog
7234   2CE6 2A            mov b, [d]
7235   2CE7 38 00 00      mov c, 0
7236   2CEA 74            mov d, b
7237   2CEB 32            mov bl, [d]
7238   2CEC A7 00         mov bh, 0
7239   2CEE 38 00 00      mov c, 0
7240   2CF1 DD            push bl
7241   2CF2 07 DE 3E      call is_alpha
7242   2CF5 51 01 00      add sp, 1
7243   2CF8             ; --- END FUNCTION CALL
7244   2CF8             ; --- START LOGICAL OR
7245   2CF8 D7            push a
7246   2CF9 11            mov a, b
7247   2CFA             ; --- START FUNCTION CALL
7248   2CFA                              
7249   2CFA 3B 3B 4E      mov d, _prog ; $prog
7250   2CFD 2A            mov b, [d]
7251   2CFE 38 00 00      mov c, 0
7252   2D01 74            mov d, b
7253   2D02 32            mov bl, [d]
7254   2D03 A7 00         mov bh, 0
7255   2D05 38 00 00      mov c, 0
7256   2D08 DD            push bl
7257   2D09 07 5E 3F      call is_digit
7258   2D0C 51 01 00      add sp, 1
7259   2D0F             ; --- END FUNCTION CALL
7260   2D0F FD A8         sor a, b ; ||
7261   2D11 E4            pop a
7262   2D12             ; --- END LOGICAL OR
7263   2D12 C0 00 00      cmp b, 0
7264   2D15 C6 46 2D      je _while141_exit
7265   2D18             _while141_block:
7266   2D18             ; *t++ = *prog++; 
7267   2D18 FA FF FF      lea d, [bp + -1] ; $t
7268   2D1B 2A            mov b, [d]
7269   2D1C 38 00 00      mov c, 0
7270   2D1F FD 77         inc b
7271   2D21 FA FF FF      lea d, [bp + -1] ; $t
7272   2D24 FD 43         mov [d], b
7273   2D26 FD 7D         dec b
7274   2D28 D8            push b
7275   2D29                              
7276   2D29 3B 3B 4E      mov d, _prog ; $prog
7277   2D2C 2A            mov b, [d]
7278   2D2D 38 00 00      mov c, 0
7279   2D30 FD 77         inc b
7280   2D32 3B 3B 4E      mov d, _prog ; $prog
7281   2D35 FD 43         mov [d], b
7282   2D37 FD 7D         dec b
7283   2D39 74            mov d, b
7284   2D3A 32            mov bl, [d]
7285   2D3B A7 00         mov bh, 0
7286   2D3D 38 00 00      mov c, 0
7287   2D40 E7            pop d
7288   2D41 FD 3E         mov [d], bl
7289   2D43 0A E3 2C      jmp _while141_cond
7290   2D46             _while141_exit:
7291   2D46             ; *t = '\0'; 
7292   2D46 FA FF FF      lea d, [bp + -1] ; $t
7293   2D49 2A            mov b, [d]
7294   2D4A 38 00 00      mov c, 0
7295   2D4D D8            push b
7296   2D4E                              
7297   2D4E FD 2E 00 00   mov32 cb, $00000000
7297   2D52 00 00 
7298   2D54 E7            pop d
7299   2D55 FD 3E         mov [d], bl
7300   2D57             ; if((tok = search_keyword(token)) != -1)  
7301   2D57             _if142_cond:
7302   2D57                              
7303   2D57 3B 37 4E      mov d, _tok ; $tok
7304   2D5A DA            push d
7305   2D5B                              
7306   2D5B             ; --- START FUNCTION CALL
7307   2D5B                              
7308   2D5B 3B 3D 4E      mov d, _token_data ; $token
7309   2D5E 2D            mov b, d
7310   2D5F 38 00 00      mov c, 0
7311   2D62 FD AB         swp b
7312   2D64 D8            push b
7313   2D65 07 54 3A      call search_keyword
7314   2D68 51 02 00      add sp, 2
7315   2D6B             ; --- END FUNCTION CALL
7316   2D6B E7            pop d
7317   2D6C FD 43         mov [d], b
7318   2D6E             ; --- START RELATIONAL
7319   2D6E D7            push a
7320   2D6F 11            mov a, b
7321   2D70 FD 2E FF FF   mov32 cb, $ffffffff
7321   2D74 FF FF 
7322   2D76 B0            cmp a, b
7323   2D77 FD 72         sneq ; !=
7324   2D79 E4            pop a
7325   2D7A             ; --- END RELATIONAL
7326   2D7A C0 00 00      cmp b, 0
7327   2D7D C6 90 2D      je _if142_else
7328   2D80             _if142_TRUE:
7329   2D80             ; toktype = KEYWORD; 
7330   2D80 3B 39 4E      mov d, _toktype ; $toktype
7331   2D83 DA            push d
7332   2D84                              
7333   2D84 FD 2E 01 00   mov32 cb, $1 ; enum element: KEYWORD
7333   2D88 00 00 
7334   2D8A E7            pop d
7335   2D8B FD 43         mov [d], b
7336   2D8D 0A 9D 2D      jmp _if142_exit
7337   2D90             _if142_else:
7338   2D90             ; toktype = IDENTIFIER; 
7339   2D90 3B 39 4E      mov d, _toktype ; $toktype
7340   2D93 DA            push d
7341   2D94                              
7342   2D94 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
7342   2D98 00 00 
7343   2D9A E7            pop d
7344   2D9B FD 43         mov [d], b
7345   2D9D             _if142_exit:
7346   2D9D 0A 08 36      jmp _if140_exit
7347   2DA0             _if140_else:
7348   2DA0             ; if(is_digit(*prog) || (*prog == '$' && is_hex_digit(*(prog+1)))){ 
7349   2DA0             _if143_cond:
7350   2DA0                              
7351   2DA0             ; --- START FUNCTION CALL
7352   2DA0                              
7353   2DA0 3B 3B 4E      mov d, _prog ; $prog
7354   2DA3 2A            mov b, [d]
7355   2DA4 38 00 00      mov c, 0
7356   2DA7 74            mov d, b
7357   2DA8 32            mov bl, [d]
7358   2DA9 A7 00         mov bh, 0
7359   2DAB 38 00 00      mov c, 0
7360   2DAE DD            push bl
7361   2DAF 07 5E 3F      call is_digit
7362   2DB2 51 01 00      add sp, 1
7363   2DB5             ; --- END FUNCTION CALL
7364   2DB5             ; --- START LOGICAL OR
7365   2DB5 D7            push a
7366   2DB6 11            mov a, b
7367   2DB7                              
7368   2DB7 3B 3B 4E      mov d, _prog ; $prog
7369   2DBA 2A            mov b, [d]
7370   2DBB 38 00 00      mov c, 0
7371   2DBE 74            mov d, b
7372   2DBF 32            mov bl, [d]
7373   2DC0 A7 00         mov bh, 0
7374   2DC2 38 00 00      mov c, 0
7375   2DC5             ; --- START RELATIONAL
7376   2DC5 D7            push a
7377   2DC6 11            mov a, b
7378   2DC7 FD 2E 24 00   mov32 cb, $00000024
7378   2DCB 00 00 
7379   2DCD B0            cmp a, b
7380   2DCE FD 71         seq ; ==
7381   2DD0 E4            pop a
7382   2DD1             ; --- END RELATIONAL
7383   2DD1             ; --- START LOGICAL AND
7384   2DD1 D7            push a
7385   2DD2 11            mov a, b
7386   2DD3             ; --- START FUNCTION CALL
7387   2DD3                              
7388   2DD3                              
7389   2DD3 3B 3B 4E      mov d, _prog ; $prog
7390   2DD6 2A            mov b, [d]
7391   2DD7 38 00 00      mov c, 0
7392   2DDA             ; --- START TERMS
7393   2DDA D7            push a
7394   2DDB 11            mov a, b
7395   2DDC FD 2E 01 00   mov32 cb, $00000001
7395   2DE0 00 00 
7396   2DE2 56            add b, a
7397   2DE3 E4            pop a
7398   2DE4             ; --- END TERMS
7399   2DE4 74            mov d, b
7400   2DE5 32            mov bl, [d]
7401   2DE6 A7 00         mov bh, 0
7402   2DE8 38 00 00      mov c, 0
7403   2DEB DD            push bl
7404   2DEC 07 A9 29      call is_hex_digit
7405   2DEF 51 01 00      add sp, 1
7406   2DF2             ; --- END FUNCTION CALL
7407   2DF2 FD A7         sand a, b
7408   2DF4 E4            pop a
7409   2DF5             ; --- END LOGICAL AND
7410   2DF5 FD A8         sor a, b ; ||
7411   2DF7 E4            pop a
7412   2DF8             ; --- END LOGICAL OR
7413   2DF8 C0 00 00      cmp b, 0
7414   2DFB C6 CE 2F      je _if143_else
7415   2DFE             _if143_TRUE:
7416   2DFE             ; if(*prog == '$' && is_hex_digit(*(prog+1))){ 
7417   2DFE             _if144_cond:
7418   2DFE                              
7419   2DFE 3B 3B 4E      mov d, _prog ; $prog
7420   2E01 2A            mov b, [d]
7421   2E02 38 00 00      mov c, 0
7422   2E05 74            mov d, b
7423   2E06 32            mov bl, [d]
7424   2E07 A7 00         mov bh, 0
7425   2E09 38 00 00      mov c, 0
7426   2E0C             ; --- START RELATIONAL
7427   2E0C D7            push a
7428   2E0D 11            mov a, b
7429   2E0E FD 2E 24 00   mov32 cb, $00000024
7429   2E12 00 00 
7430   2E14 B0            cmp a, b
7431   2E15 FD 71         seq ; ==
7432   2E17 E4            pop a
7433   2E18             ; --- END RELATIONAL
7434   2E18             ; --- START LOGICAL AND
7435   2E18 D7            push a
7436   2E19 11            mov a, b
7437   2E1A             ; --- START FUNCTION CALL
7438   2E1A                              
7439   2E1A                              
7440   2E1A 3B 3B 4E      mov d, _prog ; $prog
7441   2E1D 2A            mov b, [d]
7442   2E1E 38 00 00      mov c, 0
7443   2E21             ; --- START TERMS
7444   2E21 D7            push a
7445   2E22 11            mov a, b
7446   2E23 FD 2E 01 00   mov32 cb, $00000001
7446   2E27 00 00 
7447   2E29 56            add b, a
7448   2E2A E4            pop a
7449   2E2B             ; --- END TERMS
7450   2E2B 74            mov d, b
7451   2E2C 32            mov bl, [d]
7452   2E2D A7 00         mov bh, 0
7453   2E2F 38 00 00      mov c, 0
7454   2E32 DD            push bl
7455   2E33 07 A9 29      call is_hex_digit
7456   2E36 51 01 00      add sp, 1
7457   2E39             ; --- END FUNCTION CALL
7458   2E39 FD A7         sand a, b
7459   2E3B E4            pop a
7460   2E3C             ; --- END LOGICAL AND
7461   2E3C C0 00 00      cmp b, 0
7462   2E3F C6 4D 2F      je _if144_else
7463   2E42             _if144_TRUE:
7464   2E42             ; *t++ = *prog++; 
7465   2E42 FA FF FF      lea d, [bp + -1] ; $t
7466   2E45 2A            mov b, [d]
7467   2E46 38 00 00      mov c, 0
7468   2E49 FD 77         inc b
7469   2E4B FA FF FF      lea d, [bp + -1] ; $t
7470   2E4E FD 43         mov [d], b
7471   2E50 FD 7D         dec b
7472   2E52 D8            push b
7473   2E53                              
7474   2E53 3B 3B 4E      mov d, _prog ; $prog
7475   2E56 2A            mov b, [d]
7476   2E57 38 00 00      mov c, 0
7477   2E5A FD 77         inc b
7478   2E5C 3B 3B 4E      mov d, _prog ; $prog
7479   2E5F FD 43         mov [d], b
7480   2E61 FD 7D         dec b
7481   2E63 74            mov d, b
7482   2E64 32            mov bl, [d]
7483   2E65 A7 00         mov bh, 0
7484   2E67 38 00 00      mov c, 0
7485   2E6A E7            pop d
7486   2E6B FD 3E         mov [d], bl
7487   2E6D             ; p = temp_hex; 
7488   2E6D FA BD FF      lea d, [bp + -67] ; $p
7489   2E70 DA            push d
7490   2E71                              
7491   2E71 FA BF FF      lea d, [bp + -65] ; $temp_hex
7492   2E74 2D            mov b, d
7493   2E75 38 00 00      mov c, 0
7494   2E78 E7            pop d
7495   2E79 FD 43         mov [d], b
7496   2E7B             ; *t++ = *p++ = *prog++; 
7497   2E7B FA FF FF      lea d, [bp + -1] ; $t
7498   2E7E 2A            mov b, [d]
7499   2E7F 38 00 00      mov c, 0
7500   2E82 FD 77         inc b
7501   2E84 FA FF FF      lea d, [bp + -1] ; $t
7502   2E87 FD 43         mov [d], b
7503   2E89 FD 7D         dec b
7504   2E8B D8            push b
7505   2E8C FA BD FF      lea d, [bp + -67] ; $p
7506   2E8F 2A            mov b, [d]
7507   2E90 38 00 00      mov c, 0
7508   2E93 FD 77         inc b
7509   2E95 FA BD FF      lea d, [bp + -67] ; $p
7510   2E98 FD 43         mov [d], b
7511   2E9A FD 7D         dec b
7512   2E9C D8            push b
7513   2E9D                              
7514   2E9D 3B 3B 4E      mov d, _prog ; $prog
7515   2EA0 2A            mov b, [d]
7516   2EA1 38 00 00      mov c, 0
7517   2EA4 FD 77         inc b
7518   2EA6 3B 3B 4E      mov d, _prog ; $prog
7519   2EA9 FD 43         mov [d], b
7520   2EAB FD 7D         dec b
7521   2EAD 74            mov d, b
7522   2EAE 32            mov bl, [d]
7523   2EAF A7 00         mov bh, 0
7524   2EB1 38 00 00      mov c, 0
7525   2EB4 E7            pop d
7526   2EB5 FD 3E         mov [d], bl
7527   2EB7 E7            pop d
7528   2EB8 FD 3E         mov [d], bl
7529   2EBA             ; while(is_hex_digit(*prog)){ 
7530   2EBA             _while145_cond:
7531   2EBA                              
7532   2EBA             ; --- START FUNCTION CALL
7533   2EBA                              
7534   2EBA 3B 3B 4E      mov d, _prog ; $prog
7535   2EBD 2A            mov b, [d]
7536   2EBE 38 00 00      mov c, 0
7537   2EC1 74            mov d, b
7538   2EC2 32            mov bl, [d]
7539   2EC3 A7 00         mov bh, 0
7540   2EC5 38 00 00      mov c, 0
7541   2EC8 DD            push bl
7542   2EC9 07 A9 29      call is_hex_digit
7543   2ECC 51 01 00      add sp, 1
7544   2ECF             ; --- END FUNCTION CALL
7545   2ECF C0 00 00      cmp b, 0
7546   2ED2 C6 17 2F      je _while145_exit
7547   2ED5             _while145_block:
7548   2ED5             ; *t++ = *p++ = *prog++; 
7549   2ED5 FA FF FF      lea d, [bp + -1] ; $t
7550   2ED8 2A            mov b, [d]
7551   2ED9 38 00 00      mov c, 0
7552   2EDC FD 77         inc b
7553   2EDE FA FF FF      lea d, [bp + -1] ; $t
7554   2EE1 FD 43         mov [d], b
7555   2EE3 FD 7D         dec b
7556   2EE5 D8            push b
7557   2EE6 FA BD FF      lea d, [bp + -67] ; $p
7558   2EE9 2A            mov b, [d]
7559   2EEA 38 00 00      mov c, 0
7560   2EED FD 77         inc b
7561   2EEF FA BD FF      lea d, [bp + -67] ; $p
7562   2EF2 FD 43         mov [d], b
7563   2EF4 FD 7D         dec b
7564   2EF6 D8            push b
7565   2EF7                              
7566   2EF7 3B 3B 4E      mov d, _prog ; $prog
7567   2EFA 2A            mov b, [d]
7568   2EFB 38 00 00      mov c, 0
7569   2EFE FD 77         inc b
7570   2F00 3B 3B 4E      mov d, _prog ; $prog
7571   2F03 FD 43         mov [d], b
7572   2F05 FD 7D         dec b
7573   2F07 74            mov d, b
7574   2F08 32            mov bl, [d]
7575   2F09 A7 00         mov bh, 0
7576   2F0B 38 00 00      mov c, 0
7577   2F0E E7            pop d
7578   2F0F FD 3E         mov [d], bl
7579   2F11 E7            pop d
7580   2F12 FD 3E         mov [d], bl
7581   2F14 0A BA 2E      jmp _while145_cond
7582   2F17             _while145_exit:
7583   2F17             ; *t = *p = '\0'; 
7584   2F17 FA FF FF      lea d, [bp + -1] ; $t
7585   2F1A 2A            mov b, [d]
7586   2F1B 38 00 00      mov c, 0
7587   2F1E D8            push b
7588   2F1F FA BD FF      lea d, [bp + -67] ; $p
7589   2F22 2A            mov b, [d]
7590   2F23 38 00 00      mov c, 0
7591   2F26 D8            push b
7592   2F27                              
7593   2F27 FD 2E 00 00   mov32 cb, $00000000
7593   2F2B 00 00 
7594   2F2D E7            pop d
7595   2F2E FD 3E         mov [d], bl
7596   2F30 E7            pop d
7597   2F31 FD 3E         mov [d], bl
7598   2F33             ; int_const = hex_to_int(temp_hex); 
7599   2F33 3B 7D 4F      mov d, _int_const ; $int_const
7600   2F36 DA            push d
7601   2F37                              
7602   2F37             ; --- START FUNCTION CALL
7603   2F37                              
7604   2F37 FA BF FF      lea d, [bp + -65] ; $temp_hex
7605   2F3A 2D            mov b, d
7606   2F3B 38 00 00      mov c, 0
7607   2F3E FD AB         swp b
7608   2F40 D8            push b
7609   2F41 07 03 3B      call hex_to_int
7610   2F44 51 02 00      add sp, 2
7611   2F47             ; --- END FUNCTION CALL
7612   2F47 E7            pop d
7613   2F48 FD 43         mov [d], b
7614   2F4A 0A BE 2F      jmp _if144_exit
7615   2F4D             _if144_else:
7616   2F4D             ; while(is_digit(*prog)){ 
7617   2F4D             _while146_cond:
7618   2F4D                              
7619   2F4D             ; --- START FUNCTION CALL
7620   2F4D                              
7621   2F4D 3B 3B 4E      mov d, _prog ; $prog
7622   2F50 2A            mov b, [d]
7623   2F51 38 00 00      mov c, 0
7624   2F54 74            mov d, b
7625   2F55 32            mov bl, [d]
7626   2F56 A7 00         mov bh, 0
7627   2F58 38 00 00      mov c, 0
7628   2F5B DD            push bl
7629   2F5C 07 5E 3F      call is_digit
7630   2F5F 51 01 00      add sp, 1
7631   2F62             ; --- END FUNCTION CALL
7632   2F62 C0 00 00      cmp b, 0
7633   2F65 C6 96 2F      je _while146_exit
7634   2F68             _while146_block:
7635   2F68             ; *t++ = *prog++; 
7636   2F68 FA FF FF      lea d, [bp + -1] ; $t
7637   2F6B 2A            mov b, [d]
7638   2F6C 38 00 00      mov c, 0
7639   2F6F FD 77         inc b
7640   2F71 FA FF FF      lea d, [bp + -1] ; $t
7641   2F74 FD 43         mov [d], b
7642   2F76 FD 7D         dec b
7643   2F78 D8            push b
7644   2F79                              
7645   2F79 3B 3B 4E      mov d, _prog ; $prog
7646   2F7C 2A            mov b, [d]
7647   2F7D 38 00 00      mov c, 0
7648   2F80 FD 77         inc b
7649   2F82 3B 3B 4E      mov d, _prog ; $prog
7650   2F85 FD 43         mov [d], b
7651   2F87 FD 7D         dec b
7652   2F89 74            mov d, b
7653   2F8A 32            mov bl, [d]
7654   2F8B A7 00         mov bh, 0
7655   2F8D 38 00 00      mov c, 0
7656   2F90 E7            pop d
7657   2F91 FD 3E         mov [d], bl
7658   2F93 0A 4D 2F      jmp _while146_cond
7659   2F96             _while146_exit:
7660   2F96             ; *t = '\0'; 
7661   2F96 FA FF FF      lea d, [bp + -1] ; $t
7662   2F99 2A            mov b, [d]
7663   2F9A 38 00 00      mov c, 0
7664   2F9D D8            push b
7665   2F9E                              
7666   2F9E FD 2E 00 00   mov32 cb, $00000000
7666   2FA2 00 00 
7667   2FA4 E7            pop d
7668   2FA5 FD 3E         mov [d], bl
7669   2FA7             ; int_const = atoi(token); 
7670   2FA7 3B 7D 4F      mov d, _int_const ; $int_const
7671   2FAA DA            push d
7672   2FAB                              
7673   2FAB             ; --- START FUNCTION CALL
7674   2FAB                              
7675   2FAB 3B 3D 4E      mov d, _token_data ; $token
7676   2FAE 2D            mov b, d
7677   2FAF 38 00 00      mov c, 0
7678   2FB2 FD AB         swp b
7679   2FB4 D8            push b
7680   2FB5 07 71 40      call atoi
7681   2FB8 51 02 00      add sp, 2
7682   2FBB             ; --- END FUNCTION CALL
7683   2FBB E7            pop d
7684   2FBC FD 43         mov [d], b
7685   2FBE             _if144_exit:
7686   2FBE             ; toktype = INTEGER_CONST; 
7687   2FBE 3B 39 4E      mov d, _toktype ; $toktype
7688   2FC1 DA            push d
7689   2FC2                              
7690   2FC2 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
7690   2FC6 00 00 
7691   2FC8 E7            pop d
7692   2FC9 FD 43         mov [d], b
7693   2FCB 0A 08 36      jmp _if143_exit
7694   2FCE             _if143_else:
7695   2FCE             ; if(*prog == '\''){ 
7696   2FCE             _if147_cond:
7697   2FCE                              
7698   2FCE 3B 3B 4E      mov d, _prog ; $prog
7699   2FD1 2A            mov b, [d]
7700   2FD2 38 00 00      mov c, 0
7701   2FD5 74            mov d, b
7702   2FD6 32            mov bl, [d]
7703   2FD7 A7 00         mov bh, 0
7704   2FD9 38 00 00      mov c, 0
7705   2FDC             ; --- START RELATIONAL
7706   2FDC D7            push a
7707   2FDD 11            mov a, b
7708   2FDE FD 2E 27 00   mov32 cb, $00000027
7708   2FE2 00 00 
7709   2FE4 B0            cmp a, b
7710   2FE5 FD 71         seq ; ==
7711   2FE7 E4            pop a
7712   2FE8             ; --- END RELATIONAL
7713   2FE8 C0 00 00      cmp b, 0
7714   2FEB C6 38 31      je _if147_else
7715   2FEE             _if147_TRUE:
7716   2FEE             ; *t++ = '\''; 
7717   2FEE FA FF FF      lea d, [bp + -1] ; $t
7718   2FF1 2A            mov b, [d]
7719   2FF2 38 00 00      mov c, 0
7720   2FF5 FD 77         inc b
7721   2FF7 FA FF FF      lea d, [bp + -1] ; $t
7722   2FFA FD 43         mov [d], b
7723   2FFC FD 7D         dec b
7724   2FFE D8            push b
7725   2FFF                              
7726   2FFF FD 2E 27 00   mov32 cb, $00000027
7726   3003 00 00 
7727   3005 E7            pop d
7728   3006 FD 3E         mov [d], bl
7729   3008             ; prog++; 
7730   3008                              
7731   3008 3B 3B 4E      mov d, _prog ; $prog
7732   300B 2A            mov b, [d]
7733   300C 38 00 00      mov c, 0
7734   300F FD 77         inc b
7735   3011 3B 3B 4E      mov d, _prog ; $prog
7736   3014 FD 43         mov [d], b
7737   3016 FD 7D         dec b
7738   3018             ; if(*prog == '\\'){ 
7739   3018             _if148_cond:
7740   3018                              
7741   3018 3B 3B 4E      mov d, _prog ; $prog
7742   301B 2A            mov b, [d]
7743   301C 38 00 00      mov c, 0
7744   301F 74            mov d, b
7745   3020 32            mov bl, [d]
7746   3021 A7 00         mov bh, 0
7747   3023 38 00 00      mov c, 0
7748   3026             ; --- START RELATIONAL
7749   3026 D7            push a
7750   3027 11            mov a, b
7751   3028 FD 2E 5C 00   mov32 cb, $0000005c
7751   302C 00 00 
7752   302E B0            cmp a, b
7753   302F FD 71         seq ; ==
7754   3031 E4            pop a
7755   3032             ; --- END RELATIONAL
7756   3032 C0 00 00      cmp b, 0
7757   3035 C6 90 30      je _if148_else
7758   3038             _if148_TRUE:
7759   3038             ; *t++ = '\\'; 
7760   3038 FA FF FF      lea d, [bp + -1] ; $t
7761   303B 2A            mov b, [d]
7762   303C 38 00 00      mov c, 0
7763   303F FD 77         inc b
7764   3041 FA FF FF      lea d, [bp + -1] ; $t
7765   3044 FD 43         mov [d], b
7766   3046 FD 7D         dec b
7767   3048 D8            push b
7768   3049                              
7769   3049 FD 2E 5C 00   mov32 cb, $0000005c
7769   304D 00 00 
7770   304F E7            pop d
7771   3050 FD 3E         mov [d], bl
7772   3052             ; prog++; 
7773   3052                              
7774   3052 3B 3B 4E      mov d, _prog ; $prog
7775   3055 2A            mov b, [d]
7776   3056 38 00 00      mov c, 0
7777   3059 FD 77         inc b
7778   305B 3B 3B 4E      mov d, _prog ; $prog
7779   305E FD 43         mov [d], b
7780   3060 FD 7D         dec b
7781   3062             ; *t++ = *prog++; 
7782   3062 FA FF FF      lea d, [bp + -1] ; $t
7783   3065 2A            mov b, [d]
7784   3066 38 00 00      mov c, 0
7785   3069 FD 77         inc b
7786   306B FA FF FF      lea d, [bp + -1] ; $t
7787   306E FD 43         mov [d], b
7788   3070 FD 7D         dec b
7789   3072 D8            push b
7790   3073                              
7791   3073 3B 3B 4E      mov d, _prog ; $prog
7792   3076 2A            mov b, [d]
7793   3077 38 00 00      mov c, 0
7794   307A FD 77         inc b
7795   307C 3B 3B 4E      mov d, _prog ; $prog
7796   307F FD 43         mov [d], b
7797   3081 FD 7D         dec b
7798   3083 74            mov d, b
7799   3084 32            mov bl, [d]
7800   3085 A7 00         mov bh, 0
7801   3087 38 00 00      mov c, 0
7802   308A E7            pop d
7803   308B FD 3E         mov [d], bl
7804   308D 0A BB 30      jmp _if148_exit
7805   3090             _if148_else:
7806   3090             ; *t++ = *prog++; 
7807   3090 FA FF FF      lea d, [bp + -1] ; $t
7808   3093 2A            mov b, [d]
7809   3094 38 00 00      mov c, 0
7810   3097 FD 77         inc b
7811   3099 FA FF FF      lea d, [bp + -1] ; $t
7812   309C FD 43         mov [d], b
7813   309E FD 7D         dec b
7814   30A0 D8            push b
7815   30A1                              
7816   30A1 3B 3B 4E      mov d, _prog ; $prog
7817   30A4 2A            mov b, [d]
7818   30A5 38 00 00      mov c, 0
7819   30A8 FD 77         inc b
7820   30AA 3B 3B 4E      mov d, _prog ; $prog
7821   30AD FD 43         mov [d], b
7822   30AF FD 7D         dec b
7823   30B1 74            mov d, b
7824   30B2 32            mov bl, [d]
7825   30B3 A7 00         mov bh, 0
7826   30B5 38 00 00      mov c, 0
7827   30B8 E7            pop d
7828   30B9 FD 3E         mov [d], bl
7829   30BB             _if148_exit:
7830   30BB             ; if(*prog != '\''){ 
7831   30BB             _if149_cond:
7832   30BB                              
7833   30BB 3B 3B 4E      mov d, _prog ; $prog
7834   30BE 2A            mov b, [d]
7835   30BF 38 00 00      mov c, 0
7836   30C2 74            mov d, b
7837   30C3 32            mov bl, [d]
7838   30C4 A7 00         mov bh, 0
7839   30C6 38 00 00      mov c, 0
7840   30C9             ; --- START RELATIONAL
7841   30C9 D7            push a
7842   30CA 11            mov a, b
7843   30CB FD 2E 27 00   mov32 cb, $00000027
7843   30CF 00 00 
7844   30D1 B0            cmp a, b
7845   30D2 FD 72         sneq ; !=
7846   30D4 E4            pop a
7847   30D5             ; --- END RELATIONAL
7848   30D5 C0 00 00      cmp b, 0
7849   30D8 C6 EA 30      je _if149_exit
7850   30DB             _if149_TRUE:
7851   30DB             ; error("Closing single quotes expected."); 
7852   30DB                              
7853   30DB             ; --- START FUNCTION CALL
7854   30DB                              
7855   30DB 26 B0 52      mov b, _s73 ; "Closing single quotes expected."
7856   30DE FD AB         swp b
7857   30E0 D8            push b
7858   30E1 07 5A 39      call error
7859   30E4 51 02 00      add sp, 2
7860   30E7             ; --- END FUNCTION CALL
7861   30E7 0A EA 30      jmp _if149_exit
7862   30EA             _if149_exit:
7863   30EA             ; *t++ = '\''; 
7864   30EA FA FF FF      lea d, [bp + -1] ; $t
7865   30ED 2A            mov b, [d]
7866   30EE 38 00 00      mov c, 0
7867   30F1 FD 77         inc b
7868   30F3 FA FF FF      lea d, [bp + -1] ; $t
7869   30F6 FD 43         mov [d], b
7870   30F8 FD 7D         dec b
7871   30FA D8            push b
7872   30FB                              
7873   30FB FD 2E 27 00   mov32 cb, $00000027
7873   30FF 00 00 
7874   3101 E7            pop d
7875   3102 FD 3E         mov [d], bl
7876   3104             ; prog++; 
7877   3104                              
7878   3104 3B 3B 4E      mov d, _prog ; $prog
7879   3107 2A            mov b, [d]
7880   3108 38 00 00      mov c, 0
7881   310B FD 77         inc b
7882   310D 3B 3B 4E      mov d, _prog ; $prog
7883   3110 FD 43         mov [d], b
7884   3112 FD 7D         dec b
7885   3114             ; toktype = CHAR_CONST; 
7886   3114 3B 39 4E      mov d, _toktype ; $toktype
7887   3117 DA            push d
7888   3118                              
7889   3118 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
7889   311C 00 00 
7890   311E E7            pop d
7891   311F FD 43         mov [d], b
7892   3121             ; *t = '\0'; 
7893   3121 FA FF FF      lea d, [bp + -1] ; $t
7894   3124 2A            mov b, [d]
7895   3125 38 00 00      mov c, 0
7896   3128 D8            push b
7897   3129                              
7898   3129 FD 2E 00 00   mov32 cb, $00000000
7898   312D 00 00 
7899   312F E7            pop d
7900   3130 FD 3E         mov [d], bl
7901   3132             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
7902   3132                              
7903   3132             ; --- START FUNCTION CALL
7904   3132 07 90 36      call convert_constant
7905   3135 0A 08 36      jmp _if147_exit
7906   3138             _if147_else:
7907   3138             ; if(*prog == '\"'){ 
7908   3138             _if150_cond:
7909   3138                              
7910   3138 3B 3B 4E      mov d, _prog ; $prog
7911   313B 2A            mov b, [d]
7912   313C 38 00 00      mov c, 0
7913   313F 74            mov d, b
7914   3140 32            mov bl, [d]
7915   3141 A7 00         mov bh, 0
7916   3143 38 00 00      mov c, 0
7917   3146             ; --- START RELATIONAL
7918   3146 D7            push a
7919   3147 11            mov a, b
7920   3148 FD 2E 22 00   mov32 cb, $00000022
7920   314C 00 00 
7921   314E B0            cmp a, b
7922   314F FD 71         seq ; ==
7923   3151 E4            pop a
7924   3152             ; --- END RELATIONAL
7925   3152 C0 00 00      cmp b, 0
7926   3155 C6 60 32      je _if150_else
7927   3158             _if150_TRUE:
7928   3158             ; *t++ = '\"'; 
7929   3158 FA FF FF      lea d, [bp + -1] ; $t
7930   315B 2A            mov b, [d]
7931   315C 38 00 00      mov c, 0
7932   315F FD 77         inc b
7933   3161 FA FF FF      lea d, [bp + -1] ; $t
7934   3164 FD 43         mov [d], b
7935   3166 FD 7D         dec b
7936   3168 D8            push b
7937   3169                              
7938   3169 FD 2E 22 00   mov32 cb, $00000022
7938   316D 00 00 
7939   316F E7            pop d
7940   3170 FD 3E         mov [d], bl
7941   3172             ; prog++; 
7942   3172                              
7943   3172 3B 3B 4E      mov d, _prog ; $prog
7944   3175 2A            mov b, [d]
7945   3176 38 00 00      mov c, 0
7946   3179 FD 77         inc b
7947   317B 3B 3B 4E      mov d, _prog ; $prog
7948   317E FD 43         mov [d], b
7949   3180 FD 7D         dec b
7950   3182             ; while(*prog != '\"' && *prog){ 
7951   3182             _while151_cond:
7952   3182                              
7953   3182 3B 3B 4E      mov d, _prog ; $prog
7954   3185 2A            mov b, [d]
7955   3186 38 00 00      mov c, 0
7956   3189 74            mov d, b
7957   318A 32            mov bl, [d]
7958   318B A7 00         mov bh, 0
7959   318D 38 00 00      mov c, 0
7960   3190             ; --- START RELATIONAL
7961   3190 D7            push a
7962   3191 11            mov a, b
7963   3192 FD 2E 22 00   mov32 cb, $00000022
7963   3196 00 00 
7964   3198 B0            cmp a, b
7965   3199 FD 72         sneq ; !=
7966   319B E4            pop a
7967   319C             ; --- END RELATIONAL
7968   319C             ; --- START LOGICAL AND
7969   319C D7            push a
7970   319D 11            mov a, b
7971   319E 3B 3B 4E      mov d, _prog ; $prog
7972   31A1 2A            mov b, [d]
7973   31A2 38 00 00      mov c, 0
7974   31A5 74            mov d, b
7975   31A6 32            mov bl, [d]
7976   31A7 A7 00         mov bh, 0
7977   31A9 38 00 00      mov c, 0
7978   31AC FD A7         sand a, b
7979   31AE E4            pop a
7980   31AF             ; --- END LOGICAL AND
7981   31AF C0 00 00      cmp b, 0
7982   31B2 C6 E3 31      je _while151_exit
7983   31B5             _while151_block:
7984   31B5             ; *t++ = *prog++; 
7985   31B5 FA FF FF      lea d, [bp + -1] ; $t
7986   31B8 2A            mov b, [d]
7987   31B9 38 00 00      mov c, 0
7988   31BC FD 77         inc b
7989   31BE FA FF FF      lea d, [bp + -1] ; $t
7990   31C1 FD 43         mov [d], b
7991   31C3 FD 7D         dec b
7992   31C5 D8            push b
7993   31C6                              
7994   31C6 3B 3B 4E      mov d, _prog ; $prog
7995   31C9 2A            mov b, [d]
7996   31CA 38 00 00      mov c, 0
7997   31CD FD 77         inc b
7998   31CF 3B 3B 4E      mov d, _prog ; $prog
7999   31D2 FD 43         mov [d], b
8000   31D4 FD 7D         dec b
8001   31D6 74            mov d, b
8002   31D7 32            mov bl, [d]
8003   31D8 A7 00         mov bh, 0
8004   31DA 38 00 00      mov c, 0
8005   31DD E7            pop d
8006   31DE FD 3E         mov [d], bl
8007   31E0 0A 82 31      jmp _while151_cond
8008   31E3             _while151_exit:
8009   31E3             ; if(*prog != '\"') error("Double quotes expected"); 
8010   31E3             _if152_cond:
8011   31E3                              
8012   31E3 3B 3B 4E      mov d, _prog ; $prog
8013   31E6 2A            mov b, [d]
8014   31E7 38 00 00      mov c, 0
8015   31EA 74            mov d, b
8016   31EB 32            mov bl, [d]
8017   31EC A7 00         mov bh, 0
8018   31EE 38 00 00      mov c, 0
8019   31F1             ; --- START RELATIONAL
8020   31F1 D7            push a
8021   31F2 11            mov a, b
8022   31F3 FD 2E 22 00   mov32 cb, $00000022
8022   31F7 00 00 
8023   31F9 B0            cmp a, b
8024   31FA FD 72         sneq ; !=
8025   31FC E4            pop a
8026   31FD             ; --- END RELATIONAL
8027   31FD C0 00 00      cmp b, 0
8028   3200 C6 12 32      je _if152_exit
8029   3203             _if152_TRUE:
8030   3203             ; error("Double quotes expected"); 
8031   3203                              
8032   3203             ; --- START FUNCTION CALL
8033   3203                              
8034   3203 26 D0 52      mov b, _s74 ; "Double quotes expected"
8035   3206 FD AB         swp b
8036   3208 D8            push b
8037   3209 07 5A 39      call error
8038   320C 51 02 00      add sp, 2
8039   320F             ; --- END FUNCTION CALL
8040   320F 0A 12 32      jmp _if152_exit
8041   3212             _if152_exit:
8042   3212             ; *t++ = '\"'; 
8043   3212 FA FF FF      lea d, [bp + -1] ; $t
8044   3215 2A            mov b, [d]
8045   3216 38 00 00      mov c, 0
8046   3219 FD 77         inc b
8047   321B FA FF FF      lea d, [bp + -1] ; $t
8048   321E FD 43         mov [d], b
8049   3220 FD 7D         dec b
8050   3222 D8            push b
8051   3223                              
8052   3223 FD 2E 22 00   mov32 cb, $00000022
8052   3227 00 00 
8053   3229 E7            pop d
8054   322A FD 3E         mov [d], bl
8055   322C             ; prog++; 
8056   322C                              
8057   322C 3B 3B 4E      mov d, _prog ; $prog
8058   322F 2A            mov b, [d]
8059   3230 38 00 00      mov c, 0
8060   3233 FD 77         inc b
8061   3235 3B 3B 4E      mov d, _prog ; $prog
8062   3238 FD 43         mov [d], b
8063   323A FD 7D         dec b
8064   323C             ; toktype = STRING_CONST; 
8065   323C 3B 39 4E      mov d, _toktype ; $toktype
8066   323F DA            push d
8067   3240                              
8068   3240 FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
8068   3244 00 00 
8069   3246 E7            pop d
8070   3247 FD 43         mov [d], b
8071   3249             ; *t = '\0'; 
8072   3249 FA FF FF      lea d, [bp + -1] ; $t
8073   324C 2A            mov b, [d]
8074   324D 38 00 00      mov c, 0
8075   3250 D8            push b
8076   3251                              
8077   3251 FD 2E 00 00   mov32 cb, $00000000
8077   3255 00 00 
8078   3257 E7            pop d
8079   3258 FD 3E         mov [d], bl
8080   325A             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
8081   325A                              
8082   325A             ; --- START FUNCTION CALL
8083   325A 07 90 36      call convert_constant
8084   325D 0A 08 36      jmp _if150_exit
8085   3260             _if150_else:
8086   3260             ; if(*prog == '['){ 
8087   3260             _if153_cond:
8088   3260                              
8089   3260 3B 3B 4E      mov d, _prog ; $prog
8090   3263 2A            mov b, [d]
8091   3264 38 00 00      mov c, 0
8092   3267 74            mov d, b
8093   3268 32            mov bl, [d]
8094   3269 A7 00         mov bh, 0
8095   326B 38 00 00      mov c, 0
8096   326E             ; --- START RELATIONAL
8097   326E D7            push a
8098   326F 11            mov a, b
8099   3270 FD 2E 5B 00   mov32 cb, $0000005b
8099   3274 00 00 
8100   3276 B0            cmp a, b
8101   3277 FD 71         seq ; ==
8102   3279 E4            pop a
8103   327A             ; --- END RELATIONAL
8104   327A C0 00 00      cmp b, 0
8105   327D C6 C8 32      je _if153_else
8106   3280             _if153_TRUE:
8107   3280             ; *t++ = *prog++; 
8108   3280 FA FF FF      lea d, [bp + -1] ; $t
8109   3283 2A            mov b, [d]
8110   3284 38 00 00      mov c, 0
8111   3287 FD 77         inc b
8112   3289 FA FF FF      lea d, [bp + -1] ; $t
8113   328C FD 43         mov [d], b
8114   328E FD 7D         dec b
8115   3290 D8            push b
8116   3291                              
8117   3291 3B 3B 4E      mov d, _prog ; $prog
8118   3294 2A            mov b, [d]
8119   3295 38 00 00      mov c, 0
8120   3298 FD 77         inc b
8121   329A 3B 3B 4E      mov d, _prog ; $prog
8122   329D FD 43         mov [d], b
8123   329F FD 7D         dec b
8124   32A1 74            mov d, b
8125   32A2 32            mov bl, [d]
8126   32A3 A7 00         mov bh, 0
8127   32A5 38 00 00      mov c, 0
8128   32A8 E7            pop d
8129   32A9 FD 3E         mov [d], bl
8130   32AB             ; tok = OPENING_BRACKET; 
8131   32AB 3B 37 4E      mov d, _tok ; $tok
8132   32AE DA            push d
8133   32AF                              
8134   32AF FD 2E 0B 00   mov32 cb, $b ; enum element: OPENING_BRACKET
8134   32B3 00 00 
8135   32B5 E7            pop d
8136   32B6 FD 43         mov [d], b
8137   32B8             ; toktype = DELIMITER;   
8138   32B8 3B 39 4E      mov d, _toktype ; $toktype
8139   32BB DA            push d
8140   32BC                              
8141   32BC FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8141   32C0 00 00 
8142   32C2 E7            pop d
8143   32C3 FD 43         mov [d], b
8144   32C5 0A 08 36      jmp _if153_exit
8145   32C8             _if153_else:
8146   32C8             ; if(*prog == ']'){ 
8147   32C8             _if154_cond:
8148   32C8                              
8149   32C8 3B 3B 4E      mov d, _prog ; $prog
8150   32CB 2A            mov b, [d]
8151   32CC 38 00 00      mov c, 0
8152   32CF 74            mov d, b
8153   32D0 32            mov bl, [d]
8154   32D1 A7 00         mov bh, 0
8155   32D3 38 00 00      mov c, 0
8156   32D6             ; --- START RELATIONAL
8157   32D6 D7            push a
8158   32D7 11            mov a, b
8159   32D8 FD 2E 5D 00   mov32 cb, $0000005d
8159   32DC 00 00 
8160   32DE B0            cmp a, b
8161   32DF FD 71         seq ; ==
8162   32E1 E4            pop a
8163   32E2             ; --- END RELATIONAL
8164   32E2 C0 00 00      cmp b, 0
8165   32E5 C6 30 33      je _if154_else
8166   32E8             _if154_TRUE:
8167   32E8             ; *t++ = *prog++; 
8168   32E8 FA FF FF      lea d, [bp + -1] ; $t
8169   32EB 2A            mov b, [d]
8170   32EC 38 00 00      mov c, 0
8171   32EF FD 77         inc b
8172   32F1 FA FF FF      lea d, [bp + -1] ; $t
8173   32F4 FD 43         mov [d], b
8174   32F6 FD 7D         dec b
8175   32F8 D8            push b
8176   32F9                              
8177   32F9 3B 3B 4E      mov d, _prog ; $prog
8178   32FC 2A            mov b, [d]
8179   32FD 38 00 00      mov c, 0
8180   3300 FD 77         inc b
8181   3302 3B 3B 4E      mov d, _prog ; $prog
8182   3305 FD 43         mov [d], b
8183   3307 FD 7D         dec b
8184   3309 74            mov d, b
8185   330A 32            mov bl, [d]
8186   330B A7 00         mov bh, 0
8187   330D 38 00 00      mov c, 0
8188   3310 E7            pop d
8189   3311 FD 3E         mov [d], bl
8190   3313             ; tok = CLOSING_BRACKET; 
8191   3313 3B 37 4E      mov d, _tok ; $tok
8192   3316 DA            push d
8193   3317                              
8194   3317 FD 2E 0C 00   mov32 cb, $c ; enum element: CLOSING_BRACKET
8194   331B 00 00 
8195   331D E7            pop d
8196   331E FD 43         mov [d], b
8197   3320             ; toktype = DELIMITER;   
8198   3320 3B 39 4E      mov d, _toktype ; $toktype
8199   3323 DA            push d
8200   3324                              
8201   3324 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8201   3328 00 00 
8202   332A E7            pop d
8203   332B FD 43         mov [d], b
8204   332D 0A 08 36      jmp _if154_exit
8205   3330             _if154_else:
8206   3330             ; if(*prog == '+'){ 
8207   3330             _if155_cond:
8208   3330                              
8209   3330 3B 3B 4E      mov d, _prog ; $prog
8210   3333 2A            mov b, [d]
8211   3334 38 00 00      mov c, 0
8212   3337 74            mov d, b
8213   3338 32            mov bl, [d]
8214   3339 A7 00         mov bh, 0
8215   333B 38 00 00      mov c, 0
8216   333E             ; --- START RELATIONAL
8217   333E D7            push a
8218   333F 11            mov a, b
8219   3340 FD 2E 2B 00   mov32 cb, $0000002b
8219   3344 00 00 
8220   3346 B0            cmp a, b
8221   3347 FD 71         seq ; ==
8222   3349 E4            pop a
8223   334A             ; --- END RELATIONAL
8224   334A C0 00 00      cmp b, 0
8225   334D C6 98 33      je _if155_else
8226   3350             _if155_TRUE:
8227   3350             ; *t++ = *prog++; 
8228   3350 FA FF FF      lea d, [bp + -1] ; $t
8229   3353 2A            mov b, [d]
8230   3354 38 00 00      mov c, 0
8231   3357 FD 77         inc b
8232   3359 FA FF FF      lea d, [bp + -1] ; $t
8233   335C FD 43         mov [d], b
8234   335E FD 7D         dec b
8235   3360 D8            push b
8236   3361                              
8237   3361 3B 3B 4E      mov d, _prog ; $prog
8238   3364 2A            mov b, [d]
8239   3365 38 00 00      mov c, 0
8240   3368 FD 77         inc b
8241   336A 3B 3B 4E      mov d, _prog ; $prog
8242   336D FD 43         mov [d], b
8243   336F FD 7D         dec b
8244   3371 74            mov d, b
8245   3372 32            mov bl, [d]
8246   3373 A7 00         mov bh, 0
8247   3375 38 00 00      mov c, 0
8248   3378 E7            pop d
8249   3379 FD 3E         mov [d], bl
8250   337B             ; tok = PLUS; 
8251   337B 3B 37 4E      mov d, _tok ; $tok
8252   337E DA            push d
8253   337F                              
8254   337F FD 2E 08 00   mov32 cb, $8 ; enum element: PLUS
8254   3383 00 00 
8255   3385 E7            pop d
8256   3386 FD 43         mov [d], b
8257   3388             ; toktype = DELIMITER;   
8258   3388 3B 39 4E      mov d, _toktype ; $toktype
8259   338B DA            push d
8260   338C                              
8261   338C FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8261   3390 00 00 
8262   3392 E7            pop d
8263   3393 FD 43         mov [d], b
8264   3395 0A 08 36      jmp _if155_exit
8265   3398             _if155_else:
8266   3398             ; if(*prog == '-'){ 
8267   3398             _if156_cond:
8268   3398                              
8269   3398 3B 3B 4E      mov d, _prog ; $prog
8270   339B 2A            mov b, [d]
8271   339C 38 00 00      mov c, 0
8272   339F 74            mov d, b
8273   33A0 32            mov bl, [d]
8274   33A1 A7 00         mov bh, 0
8275   33A3 38 00 00      mov c, 0
8276   33A6             ; --- START RELATIONAL
8277   33A6 D7            push a
8278   33A7 11            mov a, b
8279   33A8 FD 2E 2D 00   mov32 cb, $0000002d
8279   33AC 00 00 
8280   33AE B0            cmp a, b
8281   33AF FD 71         seq ; ==
8282   33B1 E4            pop a
8283   33B2             ; --- END RELATIONAL
8284   33B2 C0 00 00      cmp b, 0
8285   33B5 C6 00 34      je _if156_else
8286   33B8             _if156_TRUE:
8287   33B8             ; *t++ = *prog++; 
8288   33B8 FA FF FF      lea d, [bp + -1] ; $t
8289   33BB 2A            mov b, [d]
8290   33BC 38 00 00      mov c, 0
8291   33BF FD 77         inc b
8292   33C1 FA FF FF      lea d, [bp + -1] ; $t
8293   33C4 FD 43         mov [d], b
8294   33C6 FD 7D         dec b
8295   33C8 D8            push b
8296   33C9                              
8297   33C9 3B 3B 4E      mov d, _prog ; $prog
8298   33CC 2A            mov b, [d]
8299   33CD 38 00 00      mov c, 0
8300   33D0 FD 77         inc b
8301   33D2 3B 3B 4E      mov d, _prog ; $prog
8302   33D5 FD 43         mov [d], b
8303   33D7 FD 7D         dec b
8304   33D9 74            mov d, b
8305   33DA 32            mov bl, [d]
8306   33DB A7 00         mov bh, 0
8307   33DD 38 00 00      mov c, 0
8308   33E0 E7            pop d
8309   33E1 FD 3E         mov [d], bl
8310   33E3             ; tok = MINUS; 
8311   33E3 3B 37 4E      mov d, _tok ; $tok
8312   33E6 DA            push d
8313   33E7                              
8314   33E7 FD 2E 09 00   mov32 cb, $9 ; enum element: MINUS
8314   33EB 00 00 
8315   33ED E7            pop d
8316   33EE FD 43         mov [d], b
8317   33F0             ; toktype = DELIMITER;   
8318   33F0 3B 39 4E      mov d, _toktype ; $toktype
8319   33F3 DA            push d
8320   33F4                              
8321   33F4 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8321   33F8 00 00 
8322   33FA E7            pop d
8323   33FB FD 43         mov [d], b
8324   33FD 0A 08 36      jmp _if156_exit
8325   3400             _if156_else:
8326   3400             ; if(*prog == '$'){ 
8327   3400             _if157_cond:
8328   3400                              
8329   3400 3B 3B 4E      mov d, _prog ; $prog
8330   3403 2A            mov b, [d]
8331   3404 38 00 00      mov c, 0
8332   3407 74            mov d, b
8333   3408 32            mov bl, [d]
8334   3409 A7 00         mov bh, 0
8335   340B 38 00 00      mov c, 0
8336   340E             ; --- START RELATIONAL
8337   340E D7            push a
8338   340F 11            mov a, b
8339   3410 FD 2E 24 00   mov32 cb, $00000024
8339   3414 00 00 
8340   3416 B0            cmp a, b
8341   3417 FD 71         seq ; ==
8342   3419 E4            pop a
8343   341A             ; --- END RELATIONAL
8344   341A C0 00 00      cmp b, 0
8345   341D C6 68 34      je _if157_else
8346   3420             _if157_TRUE:
8347   3420             ; *t++ = *prog++; 
8348   3420 FA FF FF      lea d, [bp + -1] ; $t
8349   3423 2A            mov b, [d]
8350   3424 38 00 00      mov c, 0
8351   3427 FD 77         inc b
8352   3429 FA FF FF      lea d, [bp + -1] ; $t
8353   342C FD 43         mov [d], b
8354   342E FD 7D         dec b
8355   3430 D8            push b
8356   3431                              
8357   3431 3B 3B 4E      mov d, _prog ; $prog
8358   3434 2A            mov b, [d]
8359   3435 38 00 00      mov c, 0
8360   3438 FD 77         inc b
8361   343A 3B 3B 4E      mov d, _prog ; $prog
8362   343D FD 43         mov [d], b
8363   343F FD 7D         dec b
8364   3441 74            mov d, b
8365   3442 32            mov bl, [d]
8366   3443 A7 00         mov bh, 0
8367   3445 38 00 00      mov c, 0
8368   3448 E7            pop d
8369   3449 FD 3E         mov [d], bl
8370   344B             ; tok = DOLLAR; 
8371   344B 3B 37 4E      mov d, _tok ; $tok
8372   344E DA            push d
8373   344F                              
8374   344F FD 2E 0A 00   mov32 cb, $a ; enum element: DOLLAR
8374   3453 00 00 
8375   3455 E7            pop d
8376   3456 FD 43         mov [d], b
8377   3458             ; toktype = DELIMITER;   
8378   3458 3B 39 4E      mov d, _toktype ; $toktype
8379   345B DA            push d
8380   345C                              
8381   345C FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8381   3460 00 00 
8382   3462 E7            pop d
8383   3463 FD 43         mov [d], b
8384   3465 0A 08 36      jmp _if157_exit
8385   3468             _if157_else:
8386   3468             ; if(*prog == ':'){ 
8387   3468             _if158_cond:
8388   3468                              
8389   3468 3B 3B 4E      mov d, _prog ; $prog
8390   346B 2A            mov b, [d]
8391   346C 38 00 00      mov c, 0
8392   346F 74            mov d, b
8393   3470 32            mov bl, [d]
8394   3471 A7 00         mov bh, 0
8395   3473 38 00 00      mov c, 0
8396   3476             ; --- START RELATIONAL
8397   3476 D7            push a
8398   3477 11            mov a, b
8399   3478 FD 2E 3A 00   mov32 cb, $0000003a
8399   347C 00 00 
8400   347E B0            cmp a, b
8401   347F FD 71         seq ; ==
8402   3481 E4            pop a
8403   3482             ; --- END RELATIONAL
8404   3482 C0 00 00      cmp b, 0
8405   3485 C6 D0 34      je _if158_else
8406   3488             _if158_TRUE:
8407   3488             ; *t++ = *prog++; 
8408   3488 FA FF FF      lea d, [bp + -1] ; $t
8409   348B 2A            mov b, [d]
8410   348C 38 00 00      mov c, 0
8411   348F FD 77         inc b
8412   3491 FA FF FF      lea d, [bp + -1] ; $t
8413   3494 FD 43         mov [d], b
8414   3496 FD 7D         dec b
8415   3498 D8            push b
8416   3499                              
8417   3499 3B 3B 4E      mov d, _prog ; $prog
8418   349C 2A            mov b, [d]
8419   349D 38 00 00      mov c, 0
8420   34A0 FD 77         inc b
8421   34A2 3B 3B 4E      mov d, _prog ; $prog
8422   34A5 FD 43         mov [d], b
8423   34A7 FD 7D         dec b
8424   34A9 74            mov d, b
8425   34AA 32            mov bl, [d]
8426   34AB A7 00         mov bh, 0
8427   34AD 38 00 00      mov c, 0
8428   34B0 E7            pop d
8429   34B1 FD 3E         mov [d], bl
8430   34B3             ; tok = COLON; 
8431   34B3 3B 37 4E      mov d, _tok ; $tok
8432   34B6 DA            push d
8433   34B7                              
8434   34B7 FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
8434   34BB 00 00 
8435   34BD E7            pop d
8436   34BE FD 43         mov [d], b
8437   34C0             ; toktype = DELIMITER;   
8438   34C0 3B 39 4E      mov d, _toktype ; $toktype
8439   34C3 DA            push d
8440   34C4                              
8441   34C4 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8441   34C8 00 00 
8442   34CA E7            pop d
8443   34CB FD 43         mov [d], b
8444   34CD 0A 08 36      jmp _if158_exit
8445   34D0             _if158_else:
8446   34D0             ; if(*prog == ';'){ 
8447   34D0             _if159_cond:
8448   34D0                              
8449   34D0 3B 3B 4E      mov d, _prog ; $prog
8450   34D3 2A            mov b, [d]
8451   34D4 38 00 00      mov c, 0
8452   34D7 74            mov d, b
8453   34D8 32            mov bl, [d]
8454   34D9 A7 00         mov bh, 0
8455   34DB 38 00 00      mov c, 0
8456   34DE             ; --- START RELATIONAL
8457   34DE D7            push a
8458   34DF 11            mov a, b
8459   34E0 FD 2E 3B 00   mov32 cb, $0000003b
8459   34E4 00 00 
8460   34E6 B0            cmp a, b
8461   34E7 FD 71         seq ; ==
8462   34E9 E4            pop a
8463   34EA             ; --- END RELATIONAL
8464   34EA C0 00 00      cmp b, 0
8465   34ED C6 38 35      je _if159_else
8466   34F0             _if159_TRUE:
8467   34F0             ; *t++ = *prog++; 
8468   34F0 FA FF FF      lea d, [bp + -1] ; $t
8469   34F3 2A            mov b, [d]
8470   34F4 38 00 00      mov c, 0
8471   34F7 FD 77         inc b
8472   34F9 FA FF FF      lea d, [bp + -1] ; $t
8473   34FC FD 43         mov [d], b
8474   34FE FD 7D         dec b
8475   3500 D8            push b
8476   3501                              
8477   3501 3B 3B 4E      mov d, _prog ; $prog
8478   3504 2A            mov b, [d]
8479   3505 38 00 00      mov c, 0
8480   3508 FD 77         inc b
8481   350A 3B 3B 4E      mov d, _prog ; $prog
8482   350D FD 43         mov [d], b
8483   350F FD 7D         dec b
8484   3511 74            mov d, b
8485   3512 32            mov bl, [d]
8486   3513 A7 00         mov bh, 0
8487   3515 38 00 00      mov c, 0
8488   3518 E7            pop d
8489   3519 FD 3E         mov [d], bl
8490   351B             ; tok = SEMICOLON; 
8491   351B 3B 37 4E      mov d, _tok ; $tok
8492   351E DA            push d
8493   351F                              
8494   351F FD 2E 0E 00   mov32 cb, $e ; enum element: SEMICOLON
8494   3523 00 00 
8495   3525 E7            pop d
8496   3526 FD 43         mov [d], b
8497   3528             ; toktype = DELIMITER;   
8498   3528 3B 39 4E      mov d, _toktype ; $toktype
8499   352B DA            push d
8500   352C                              
8501   352C FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8501   3530 00 00 
8502   3532 E7            pop d
8503   3533 FD 43         mov [d], b
8504   3535 0A 08 36      jmp _if159_exit
8505   3538             _if159_else:
8506   3538             ; if(*prog == ','){ 
8507   3538             _if160_cond:
8508   3538                              
8509   3538 3B 3B 4E      mov d, _prog ; $prog
8510   353B 2A            mov b, [d]
8511   353C 38 00 00      mov c, 0
8512   353F 74            mov d, b
8513   3540 32            mov bl, [d]
8514   3541 A7 00         mov bh, 0
8515   3543 38 00 00      mov c, 0
8516   3546             ; --- START RELATIONAL
8517   3546 D7            push a
8518   3547 11            mov a, b
8519   3548 FD 2E 2C 00   mov32 cb, $0000002c
8519   354C 00 00 
8520   354E B0            cmp a, b
8521   354F FD 71         seq ; ==
8522   3551 E4            pop a
8523   3552             ; --- END RELATIONAL
8524   3552 C0 00 00      cmp b, 0
8525   3555 C6 A0 35      je _if160_else
8526   3558             _if160_TRUE:
8527   3558             ; *t++ = *prog++; 
8528   3558 FA FF FF      lea d, [bp + -1] ; $t
8529   355B 2A            mov b, [d]
8530   355C 38 00 00      mov c, 0
8531   355F FD 77         inc b
8532   3561 FA FF FF      lea d, [bp + -1] ; $t
8533   3564 FD 43         mov [d], b
8534   3566 FD 7D         dec b
8535   3568 D8            push b
8536   3569                              
8537   3569 3B 3B 4E      mov d, _prog ; $prog
8538   356C 2A            mov b, [d]
8539   356D 38 00 00      mov c, 0
8540   3570 FD 77         inc b
8541   3572 3B 3B 4E      mov d, _prog ; $prog
8542   3575 FD 43         mov [d], b
8543   3577 FD 7D         dec b
8544   3579 74            mov d, b
8545   357A 32            mov bl, [d]
8546   357B A7 00         mov bh, 0
8547   357D 38 00 00      mov c, 0
8548   3580 E7            pop d
8549   3581 FD 3E         mov [d], bl
8550   3583             ; tok = COMMA; 
8551   3583 3B 37 4E      mov d, _tok ; $tok
8552   3586 DA            push d
8553   3587                              
8554   3587 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
8554   358B 00 00 
8555   358D E7            pop d
8556   358E FD 43         mov [d], b
8557   3590             ; toktype = DELIMITER;   
8558   3590 3B 39 4E      mov d, _toktype ; $toktype
8559   3593 DA            push d
8560   3594                              
8561   3594 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8561   3598 00 00 
8562   359A E7            pop d
8563   359B FD 43         mov [d], b
8564   359D 0A 08 36      jmp _if160_exit
8565   35A0             _if160_else:
8566   35A0             ; if(*prog == '.'){ 
8567   35A0             _if161_cond:
8568   35A0                              
8569   35A0 3B 3B 4E      mov d, _prog ; $prog
8570   35A3 2A            mov b, [d]
8571   35A4 38 00 00      mov c, 0
8572   35A7 74            mov d, b
8573   35A8 32            mov bl, [d]
8574   35A9 A7 00         mov bh, 0
8575   35AB 38 00 00      mov c, 0
8576   35AE             ; --- START RELATIONAL
8577   35AE D7            push a
8578   35AF 11            mov a, b
8579   35B0 FD 2E 2E 00   mov32 cb, $0000002e
8579   35B4 00 00 
8580   35B6 B0            cmp a, b
8581   35B7 FD 71         seq ; ==
8582   35B9 E4            pop a
8583   35BA             ; --- END RELATIONAL
8584   35BA C0 00 00      cmp b, 0
8585   35BD C6 08 36      je _if161_exit
8586   35C0             _if161_TRUE:
8587   35C0             ; *t++ = *prog++; 
8588   35C0 FA FF FF      lea d, [bp + -1] ; $t
8589   35C3 2A            mov b, [d]
8590   35C4 38 00 00      mov c, 0
8591   35C7 FD 77         inc b
8592   35C9 FA FF FF      lea d, [bp + -1] ; $t
8593   35CC FD 43         mov [d], b
8594   35CE FD 7D         dec b
8595   35D0 D8            push b
8596   35D1                              
8597   35D1 3B 3B 4E      mov d, _prog ; $prog
8598   35D4 2A            mov b, [d]
8599   35D5 38 00 00      mov c, 0
8600   35D8 FD 77         inc b
8601   35DA 3B 3B 4E      mov d, _prog ; $prog
8602   35DD FD 43         mov [d], b
8603   35DF FD 7D         dec b
8604   35E1 74            mov d, b
8605   35E2 32            mov bl, [d]
8606   35E3 A7 00         mov bh, 0
8607   35E5 38 00 00      mov c, 0
8608   35E8 E7            pop d
8609   35E9 FD 3E         mov [d], bl
8610   35EB             ; tok = DOT; 
8611   35EB 3B 37 4E      mov d, _tok ; $tok
8612   35EE DA            push d
8613   35EF                              
8614   35EF FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
8614   35F3 00 00 
8615   35F5 E7            pop d
8616   35F6 FD 43         mov [d], b
8617   35F8             ; toktype = DELIMITER;   
8618   35F8 3B 39 4E      mov d, _toktype ; $toktype
8619   35FB DA            push d
8620   35FC                              
8621   35FC FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8621   3600 00 00 
8622   3602 E7            pop d
8623   3603 FD 43         mov [d], b
8624   3605 0A 08 36      jmp _if161_exit
8625   3608             _if161_exit:
8626   3608             _if160_exit:
8627   3608             _if159_exit:
8628   3608             _if158_exit:
8629   3608             _if157_exit:
8630   3608             _if156_exit:
8631   3608             _if155_exit:
8632   3608             _if154_exit:
8633   3608             _if153_exit:
8634   3608             _if150_exit:
8635   3608             _if147_exit:
8636   3608             _if143_exit:
8637   3608             _if140_exit:
8638   3608             ; *t = '\0'; 
8639   3608 FA FF FF      lea d, [bp + -1] ; $t
8640   360B 2A            mov b, [d]
8641   360C 38 00 00      mov c, 0
8642   360F D8            push b
8643   3610                              
8644   3610 FD 2E 00 00   mov32 cb, $00000000
8644   3614 00 00 
8645   3616 E7            pop d
8646   3617 FD 3E         mov [d], bl
8647   3619             ; if(toktype == TYPE_UNDEF){ 
8648   3619             _if162_cond:
8649   3619                              
8650   3619 3B 39 4E      mov d, _toktype ; $toktype
8651   361C 2A            mov b, [d]
8652   361D 38 00 00      mov c, 0
8653   3620             ; --- START RELATIONAL
8654   3620 D7            push a
8655   3621 11            mov a, b
8656   3622 FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
8656   3626 00 00 
8657   3628 B0            cmp a, b
8658   3629 FD 71         seq ; ==
8659   362B E4            pop a
8660   362C             ; --- END RELATIONAL
8661   362C C0 00 00      cmp b, 0
8662   362F C6 8E 36      je _if162_exit
8663   3632             _if162_TRUE:
8664   3632             ; printf("TOKEN ERROR. Prog: %x\n", (int)(prog-program));  
8665   3632                              
8666   3632             ; --- START FUNCTION CALL
8667   3632                              
8668   3632                              
8669   3632 3B 3B 4E      mov d, _prog ; $prog
8670   3635 2A            mov b, [d]
8671   3636 38 00 00      mov c, 0
8672   3639             ; --- START TERMS
8673   3639 D7            push a
8674   363A 11            mov a, b
8675   363B 3B 7F 4F      mov d, _program ; $program
8676   363E 2A            mov b, [d]
8677   363F 38 00 00      mov c, 0
8678   3642 60            sub a, b
8679   3643 27            mov b, a
8680   3644 E4            pop a
8681   3645             ; --- END TERMS
8682   3645 AB            snex b
8683   3646 FD AB         swp b
8684   3648 D8            push b
8685   3649                              
8686   3649 26 E7 52      mov b, _s75 ; "TOKEN ERROR. Prog: %x\n"
8687   364C FD AB         swp b
8688   364E D8            push b
8689   364F 07 60 42      call printf
8690   3652 51 04 00      add sp, 4
8691   3655             ; --- END FUNCTION CALL
8692   3655             ; printf("ProgVal: %x", *prog);  
8693   3655                              
8694   3655             ; --- START FUNCTION CALL
8695   3655                              
8696   3655 3B 3B 4E      mov d, _prog ; $prog
8697   3658 2A            mov b, [d]
8698   3659 38 00 00      mov c, 0
8699   365C 74            mov d, b
8700   365D 32            mov bl, [d]
8701   365E A7 00         mov bh, 0
8702   3660 38 00 00      mov c, 0
8703   3663 FD AB         swp b
8704   3665 D8            push b
8705   3666                              
8706   3666 26 FE 52      mov b, _s76 ; "ProgVal: %x"
8707   3669 FD AB         swp b
8708   366B D8            push b
8709   366C 07 60 42      call printf
8710   366F 51 04 00      add sp, 4
8711   3672             ; --- END FUNCTION CALL
8712   3672             ; printf("\n Text after prog: %s\n", prog); 
8713   3672                              
8714   3672             ; --- START FUNCTION CALL
8715   3672                              
8716   3672 3B 3B 4E      mov d, _prog ; $prog
8717   3675 2A            mov b, [d]
8718   3676 38 00 00      mov c, 0
8719   3679 FD AB         swp b
8720   367B D8            push b
8721   367C                              
8722   367C 26 0A 53      mov b, _s77 ; "\n Text after prog: %s\n"
8723   367F FD AB         swp b
8724   3681 D8            push b
8725   3682 07 60 42      call printf
8726   3685 51 04 00      add sp, 4
8727   3688             ; --- END FUNCTION CALL
8728   3688             ; exit(); 
8729   3688                              
8730   3688             ; --- START FUNCTION CALL
8731   3688 07 54 4B      call exit
8732   368B 0A 8E 36      jmp _if162_exit
8733   368E             _if162_exit:
8734   368E F9            leave
8735   368F 09            ret
8736   3690             
8737   3690             convert_constant:
8738   3690 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8739   3693             ; char *s; 
8740   3693 52 02 00      sub sp, 2
8741   3696             ; char *t; 
8742   3696 52 02 00      sub sp, 2
8743   3699             ; t = token; 
8744   3699 FA FD FF      lea d, [bp + -3] ; $t
8745   369C DA            push d
8746   369D                              
8747   369D 3B 3D 4E      mov d, _token_data ; $token
8748   36A0 2D            mov b, d
8749   36A1 38 00 00      mov c, 0
8750   36A4 E7            pop d
8751   36A5 FD 43         mov [d], b
8752   36A7             ; s = string_const; 
8753   36A7 FA FF FF      lea d, [bp + -1] ; $s
8754   36AA DA            push d
8755   36AB                              
8756   36AB 3B 7D 4E      mov d, _string_const_data ; $string_const
8757   36AE 2D            mov b, d
8758   36AF 38 00 00      mov c, 0
8759   36B2 E7            pop d
8760   36B3 FD 43         mov [d], b
8761   36B5             ; if(toktype == CHAR_CONST){ 
8762   36B5             _if163_cond:
8763   36B5                              
8764   36B5 3B 39 4E      mov d, _toktype ; $toktype
8765   36B8 2A            mov b, [d]
8766   36B9 38 00 00      mov c, 0
8767   36BC             ; --- START RELATIONAL
8768   36BC D7            push a
8769   36BD 11            mov a, b
8770   36BE FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
8770   36C2 00 00 
8771   36C4 B0            cmp a, b
8772   36C5 FD 71         seq ; ==
8773   36C7 E4            pop a
8774   36C8             ; --- END RELATIONAL
8775   36C8 C0 00 00      cmp b, 0
8776   36CB C6 BA 38      je _if163_else
8777   36CE             _if163_TRUE:
8778   36CE             ; t++; 
8779   36CE                              
8780   36CE FA FD FF      lea d, [bp + -3] ; $t
8781   36D1 2A            mov b, [d]
8782   36D2 38 00 00      mov c, 0
8783   36D5 FD 77         inc b
8784   36D7 FA FD FF      lea d, [bp + -3] ; $t
8785   36DA FD 43         mov [d], b
8786   36DC FD 7D         dec b
8787   36DE             ; if(*t == '\\'){ 
8788   36DE             _if164_cond:
8789   36DE                              
8790   36DE FA FD FF      lea d, [bp + -3] ; $t
8791   36E1 2A            mov b, [d]
8792   36E2 38 00 00      mov c, 0
8793   36E5 74            mov d, b
8794   36E6 32            mov bl, [d]
8795   36E7 A7 00         mov bh, 0
8796   36E9 38 00 00      mov c, 0
8797   36EC             ; --- START RELATIONAL
8798   36EC D7            push a
8799   36ED 11            mov a, b
8800   36EE FD 2E 5C 00   mov32 cb, $0000005c
8800   36F2 00 00 
8801   36F4 B0            cmp a, b
8802   36F5 FD 71         seq ; ==
8803   36F7 E4            pop a
8804   36F8             ; --- END RELATIONAL
8805   36F8 C0 00 00      cmp b, 0
8806   36FB C6 95 38      je _if164_else
8807   36FE             _if164_TRUE:
8808   36FE             ; t++; 
8809   36FE                              
8810   36FE FA FD FF      lea d, [bp + -3] ; $t
8811   3701 2A            mov b, [d]
8812   3702 38 00 00      mov c, 0
8813   3705 FD 77         inc b
8814   3707 FA FD FF      lea d, [bp + -3] ; $t
8815   370A FD 43         mov [d], b
8816   370C FD 7D         dec b
8817   370E             ; switch(*t){ 
8818   370E             _switch165_expr:
8819   370E                              
8820   370E FA FD FF      lea d, [bp + -3] ; $t
8821   3711 2A            mov b, [d]
8822   3712 38 00 00      mov c, 0
8823   3715 74            mov d, b
8824   3716 32            mov bl, [d]
8825   3717 A7 00         mov bh, 0
8826   3719 38 00 00      mov c, 0
8827   371C             _switch165_comparisons:
8828   371C C1 30         cmp bl, $30
8829   371E C6 56 37      je _switch165_case0
8830   3721 C1 61         cmp bl, $61
8831   3723 C6 73 37      je _switch165_case1
8832   3726 C1 62         cmp bl, $62
8833   3728 C6 90 37      je _switch165_case2
8834   372B C1 66         cmp bl, $66
8835   372D C6 AD 37      je _switch165_case3
8836   3730 C1 6E         cmp bl, $6e
8837   3732 C6 CA 37      je _switch165_case4
8838   3735 C1 72         cmp bl, $72
8839   3737 C6 E7 37      je _switch165_case5
8840   373A C1 74         cmp bl, $74
8841   373C C6 04 38      je _switch165_case6
8842   373F C1 76         cmp bl, $76
8843   3741 C6 21 38      je _switch165_case7
8844   3744 C1 5C         cmp bl, $5c
8845   3746 C6 3E 38      je _switch165_case8
8846   3749 C1 27         cmp bl, $27
8847   374B C6 5B 38      je _switch165_case9
8848   374E C1 22         cmp bl, $22
8849   3750 C6 78 38      je _switch165_case10
8850   3753 0A 92 38      jmp _switch165_exit
8851   3756             _switch165_case0:
8852   3756             ; *s++ = '\0'; 
8853   3756 FA FF FF      lea d, [bp + -1] ; $s
8854   3759 2A            mov b, [d]
8855   375A 38 00 00      mov c, 0
8856   375D FD 77         inc b
8857   375F FA FF FF      lea d, [bp + -1] ; $s
8858   3762 FD 43         mov [d], b
8859   3764 FD 7D         dec b
8860   3766 D8            push b
8861   3767                              
8862   3767 FD 2E 00 00   mov32 cb, $00000000
8862   376B 00 00 
8863   376D E7            pop d
8864   376E FD 3E         mov [d], bl
8865   3770             ; break; 
8866   3770 0A 92 38      jmp _switch165_exit ; case break
8867   3773             _switch165_case1:
8868   3773             ; *s++ = '\a'; 
8869   3773 FA FF FF      lea d, [bp + -1] ; $s
8870   3776 2A            mov b, [d]
8871   3777 38 00 00      mov c, 0
8872   377A FD 77         inc b
8873   377C FA FF FF      lea d, [bp + -1] ; $s
8874   377F FD 43         mov [d], b
8875   3781 FD 7D         dec b
8876   3783 D8            push b
8877   3784                              
8878   3784 FD 2E 07 00   mov32 cb, $00000007
8878   3788 00 00 
8879   378A E7            pop d
8880   378B FD 3E         mov [d], bl
8881   378D             ; break; 
8882   378D 0A 92 38      jmp _switch165_exit ; case break
8883   3790             _switch165_case2:
8884   3790             ; *s++ = '\b'; 
8885   3790 FA FF FF      lea d, [bp + -1] ; $s
8886   3793 2A            mov b, [d]
8887   3794 38 00 00      mov c, 0
8888   3797 FD 77         inc b
8889   3799 FA FF FF      lea d, [bp + -1] ; $s
8890   379C FD 43         mov [d], b
8891   379E FD 7D         dec b
8892   37A0 D8            push b
8893   37A1                              
8894   37A1 FD 2E 08 00   mov32 cb, $00000008
8894   37A5 00 00 
8895   37A7 E7            pop d
8896   37A8 FD 3E         mov [d], bl
8897   37AA             ; break;   
8898   37AA 0A 92 38      jmp _switch165_exit ; case break
8899   37AD             _switch165_case3:
8900   37AD             ; *s++ = '\f'; 
8901   37AD FA FF FF      lea d, [bp + -1] ; $s
8902   37B0 2A            mov b, [d]
8903   37B1 38 00 00      mov c, 0
8904   37B4 FD 77         inc b
8905   37B6 FA FF FF      lea d, [bp + -1] ; $s
8906   37B9 FD 43         mov [d], b
8907   37BB FD 7D         dec b
8908   37BD D8            push b
8909   37BE                              
8910   37BE FD 2E 0C 00   mov32 cb, $0000000c
8910   37C2 00 00 
8911   37C4 E7            pop d
8912   37C5 FD 3E         mov [d], bl
8913   37C7             ; break; 
8914   37C7 0A 92 38      jmp _switch165_exit ; case break
8915   37CA             _switch165_case4:
8916   37CA             ; *s++ = '\n'; 
8917   37CA FA FF FF      lea d, [bp + -1] ; $s
8918   37CD 2A            mov b, [d]
8919   37CE 38 00 00      mov c, 0
8920   37D1 FD 77         inc b
8921   37D3 FA FF FF      lea d, [bp + -1] ; $s
8922   37D6 FD 43         mov [d], b
8923   37D8 FD 7D         dec b
8924   37DA D8            push b
8925   37DB                              
8926   37DB FD 2E 0A 00   mov32 cb, $0000000a
8926   37DF 00 00 
8927   37E1 E7            pop d
8928   37E2 FD 3E         mov [d], bl
8929   37E4             ; break; 
8930   37E4 0A 92 38      jmp _switch165_exit ; case break
8931   37E7             _switch165_case5:
8932   37E7             ; *s++ = '\r'; 
8933   37E7 FA FF FF      lea d, [bp + -1] ; $s
8934   37EA 2A            mov b, [d]
8935   37EB 38 00 00      mov c, 0
8936   37EE FD 77         inc b
8937   37F0 FA FF FF      lea d, [bp + -1] ; $s
8938   37F3 FD 43         mov [d], b
8939   37F5 FD 7D         dec b
8940   37F7 D8            push b
8941   37F8                              
8942   37F8 FD 2E 0D 00   mov32 cb, $0000000d
8942   37FC 00 00 
8943   37FE E7            pop d
8944   37FF FD 3E         mov [d], bl
8945   3801             ; break; 
8946   3801 0A 92 38      jmp _switch165_exit ; case break
8947   3804             _switch165_case6:
8948   3804             ; *s++ = '\t'; 
8949   3804 FA FF FF      lea d, [bp + -1] ; $s
8950   3807 2A            mov b, [d]
8951   3808 38 00 00      mov c, 0
8952   380B FD 77         inc b
8953   380D FA FF FF      lea d, [bp + -1] ; $s
8954   3810 FD 43         mov [d], b
8955   3812 FD 7D         dec b
8956   3814 D8            push b
8957   3815                              
8958   3815 FD 2E 09 00   mov32 cb, $00000009
8958   3819 00 00 
8959   381B E7            pop d
8960   381C FD 3E         mov [d], bl
8961   381E             ; break; 
8962   381E 0A 92 38      jmp _switch165_exit ; case break
8963   3821             _switch165_case7:
8964   3821             ; *s++ = '\v'; 
8965   3821 FA FF FF      lea d, [bp + -1] ; $s
8966   3824 2A            mov b, [d]
8967   3825 38 00 00      mov c, 0
8968   3828 FD 77         inc b
8969   382A FA FF FF      lea d, [bp + -1] ; $s
8970   382D FD 43         mov [d], b
8971   382F FD 7D         dec b
8972   3831 D8            push b
8973   3832                              
8974   3832 FD 2E 0B 00   mov32 cb, $0000000b
8974   3836 00 00 
8975   3838 E7            pop d
8976   3839 FD 3E         mov [d], bl
8977   383B             ; break; 
8978   383B 0A 92 38      jmp _switch165_exit ; case break
8979   383E             _switch165_case8:
8980   383E             ; *s++ = '\\'; 
8981   383E FA FF FF      lea d, [bp + -1] ; $s
8982   3841 2A            mov b, [d]
8983   3842 38 00 00      mov c, 0
8984   3845 FD 77         inc b
8985   3847 FA FF FF      lea d, [bp + -1] ; $s
8986   384A FD 43         mov [d], b
8987   384C FD 7D         dec b
8988   384E D8            push b
8989   384F                              
8990   384F FD 2E 5C 00   mov32 cb, $0000005c
8990   3853 00 00 
8991   3855 E7            pop d
8992   3856 FD 3E         mov [d], bl
8993   3858             ; break; 
8994   3858 0A 92 38      jmp _switch165_exit ; case break
8995   385B             _switch165_case9:
8996   385B             ; *s++ = '\''; 
8997   385B FA FF FF      lea d, [bp + -1] ; $s
8998   385E 2A            mov b, [d]
8999   385F 38 00 00      mov c, 0
9000   3862 FD 77         inc b
9001   3864 FA FF FF      lea d, [bp + -1] ; $s
9002   3867 FD 43         mov [d], b
9003   3869 FD 7D         dec b
9004   386B D8            push b
9005   386C                              
9006   386C FD 2E 27 00   mov32 cb, $00000027
9006   3870 00 00 
9007   3872 E7            pop d
9008   3873 FD 3E         mov [d], bl
9009   3875             ; break; 
9010   3875 0A 92 38      jmp _switch165_exit ; case break
9011   3878             _switch165_case10:
9012   3878             ; *s++ = '\"'; 
9013   3878 FA FF FF      lea d, [bp + -1] ; $s
9014   387B 2A            mov b, [d]
9015   387C 38 00 00      mov c, 0
9016   387F FD 77         inc b
9017   3881 FA FF FF      lea d, [bp + -1] ; $s
9018   3884 FD 43         mov [d], b
9019   3886 FD 7D         dec b
9020   3888 D8            push b
9021   3889                              
9022   3889 FD 2E 22 00   mov32 cb, $00000022
9022   388D 00 00 
9023   388F E7            pop d
9024   3890 FD 3E         mov [d], bl
9025   3892             _switch165_exit:
9026   3892 0A B7 38      jmp _if164_exit
9027   3895             _if164_else:
9028   3895             ; *s++ = *t; 
9029   3895 FA FF FF      lea d, [bp + -1] ; $s
9030   3898 2A            mov b, [d]
9031   3899 38 00 00      mov c, 0
9032   389C FD 77         inc b
9033   389E FA FF FF      lea d, [bp + -1] ; $s
9034   38A1 FD 43         mov [d], b
9035   38A3 FD 7D         dec b
9036   38A5 D8            push b
9037   38A6                              
9038   38A6 FA FD FF      lea d, [bp + -3] ; $t
9039   38A9 2A            mov b, [d]
9040   38AA 38 00 00      mov c, 0
9041   38AD 74            mov d, b
9042   38AE 32            mov bl, [d]
9043   38AF A7 00         mov bh, 0
9044   38B1 38 00 00      mov c, 0
9045   38B4 E7            pop d
9046   38B5 FD 3E         mov [d], bl
9047   38B7             _if164_exit:
9048   38B7 0A 47 39      jmp _if163_exit
9049   38BA             _if163_else:
9050   38BA             ; if(toktype == STRING_CONST){ 
9051   38BA             _if166_cond:
9052   38BA                              
9053   38BA 3B 39 4E      mov d, _toktype ; $toktype
9054   38BD 2A            mov b, [d]
9055   38BE 38 00 00      mov c, 0
9056   38C1             ; --- START RELATIONAL
9057   38C1 D7            push a
9058   38C2 11            mov a, b
9059   38C3 FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
9059   38C7 00 00 
9060   38C9 B0            cmp a, b
9061   38CA FD 71         seq ; ==
9062   38CC E4            pop a
9063   38CD             ; --- END RELATIONAL
9064   38CD C0 00 00      cmp b, 0
9065   38D0 C6 47 39      je _if166_exit
9066   38D3             _if166_TRUE:
9067   38D3             ; t++; 
9068   38D3                              
9069   38D3 FA FD FF      lea d, [bp + -3] ; $t
9070   38D6 2A            mov b, [d]
9071   38D7 38 00 00      mov c, 0
9072   38DA FD 77         inc b
9073   38DC FA FD FF      lea d, [bp + -3] ; $t
9074   38DF FD 43         mov [d], b
9075   38E1 FD 7D         dec b
9076   38E3             ; while(*t != '\"' && *t){ 
9077   38E3             _while167_cond:
9078   38E3                              
9079   38E3 FA FD FF      lea d, [bp + -3] ; $t
9080   38E6 2A            mov b, [d]
9081   38E7 38 00 00      mov c, 0
9082   38EA 74            mov d, b
9083   38EB 32            mov bl, [d]
9084   38EC A7 00         mov bh, 0
9085   38EE 38 00 00      mov c, 0
9086   38F1             ; --- START RELATIONAL
9087   38F1 D7            push a
9088   38F2 11            mov a, b
9089   38F3 FD 2E 22 00   mov32 cb, $00000022
9089   38F7 00 00 
9090   38F9 B0            cmp a, b
9091   38FA FD 72         sneq ; !=
9092   38FC E4            pop a
9093   38FD             ; --- END RELATIONAL
9094   38FD             ; --- START LOGICAL AND
9095   38FD D7            push a
9096   38FE 11            mov a, b
9097   38FF FA FD FF      lea d, [bp + -3] ; $t
9098   3902 2A            mov b, [d]
9099   3903 38 00 00      mov c, 0
9100   3906 74            mov d, b
9101   3907 32            mov bl, [d]
9102   3908 A7 00         mov bh, 0
9103   390A 38 00 00      mov c, 0
9104   390D FD A7         sand a, b
9105   390F E4            pop a
9106   3910             ; --- END LOGICAL AND
9107   3910 C0 00 00      cmp b, 0
9108   3913 C6 44 39      je _while167_exit
9109   3916             _while167_block:
9110   3916             ; *s++ = *t++; 
9111   3916 FA FF FF      lea d, [bp + -1] ; $s
9112   3919 2A            mov b, [d]
9113   391A 38 00 00      mov c, 0
9114   391D FD 77         inc b
9115   391F FA FF FF      lea d, [bp + -1] ; $s
9116   3922 FD 43         mov [d], b
9117   3924 FD 7D         dec b
9118   3926 D8            push b
9119   3927                              
9120   3927 FA FD FF      lea d, [bp + -3] ; $t
9121   392A 2A            mov b, [d]
9122   392B 38 00 00      mov c, 0
9123   392E FD 77         inc b
9124   3930 FA FD FF      lea d, [bp + -3] ; $t
9125   3933 FD 43         mov [d], b
9126   3935 FD 7D         dec b
9127   3937 74            mov d, b
9128   3938 32            mov bl, [d]
9129   3939 A7 00         mov bh, 0
9130   393B 38 00 00      mov c, 0
9131   393E E7            pop d
9132   393F FD 3E         mov [d], bl
9133   3941 0A E3 38      jmp _while167_cond
9134   3944             _while167_exit:
9135   3944 0A 47 39      jmp _if166_exit
9136   3947             _if166_exit:
9137   3947             _if163_exit:
9138   3947             ; *s = '\0'; 
9139   3947 FA FF FF      lea d, [bp + -1] ; $s
9140   394A 2A            mov b, [d]
9141   394B 38 00 00      mov c, 0
9142   394E D8            push b
9143   394F                              
9144   394F FD 2E 00 00   mov32 cb, $00000000
9144   3953 00 00 
9145   3955 E7            pop d
9146   3956 FD 3E         mov [d], bl
9147   3958 F9            leave
9148   3959 09            ret
9149   395A             
9150   395A             error:
9151   395A F8 00 00      enter 0 ; (push bp; mov bp, sp)
9152   395D             ; printf("\nError: %s\n", msg); 
9153   395D                              
9154   395D             ; --- START FUNCTION CALL
9155   395D                              
9156   395D FA 05 00      lea d, [bp + 5] ; $msg
9157   3960 2A            mov b, [d]
9158   3961 38 00 00      mov c, 0
9159   3964 FD AB         swp b
9160   3966 D8            push b
9161   3967                              
9162   3967 26 21 53      mov b, _s78 ; "\nError: %s\n"
9163   396A FD AB         swp b
9164   396C D8            push b
9165   396D 07 60 42      call printf
9166   3970 51 04 00      add sp, 4
9167   3973             ; --- END FUNCTION CALL
9168   3973             ; exit(); 
9169   3973                              
9170   3973             ; --- START FUNCTION CALL
9171   3973 07 54 4B      call exit
9172   3976 F9            leave
9173   3977 09            ret
9174   3978             
9175   3978             error_s:
9176   3978 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9177   397B             ; printf("\nError: %s %s\n", msg, param); 
9178   397B                              
9179   397B             ; --- START FUNCTION CALL
9180   397B                              
9181   397B FA 07 00      lea d, [bp + 7] ; $param
9182   397E 2A            mov b, [d]
9183   397F 38 00 00      mov c, 0
9184   3982 FD AB         swp b
9185   3984 D8            push b
9186   3985                              
9187   3985 FA 05 00      lea d, [bp + 5] ; $msg
9188   3988 2A            mov b, [d]
9189   3989 38 00 00      mov c, 0
9190   398C FD AB         swp b
9191   398E D8            push b
9192   398F                              
9193   398F 26 2D 53      mov b, _s79 ; "\nError: %s %s\n"
9194   3992 FD AB         swp b
9195   3994 D8            push b
9196   3995 07 60 42      call printf
9197   3998 51 06 00      add sp, 6
9198   399B             ; --- END FUNCTION CALL
9199   399B             ; exit(); 
9200   399B                              
9201   399B             ; --- START FUNCTION CALL
9202   399B 07 54 4B      call exit
9203   399E F9            leave
9204   399F 09            ret
9205   39A0             
9206   39A0             push_prog:
9207   39A0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9208   39A3             ; if(prog_tos == 10) error("Cannot push prog. Stack overflow."); 
9209   39A3             _if168_cond:
9210   39A3                              
9211   39A3 3B 9B 4F      mov d, _prog_tos ; $prog_tos
9212   39A6 2A            mov b, [d]
9213   39A7 38 00 00      mov c, 0
9214   39AA             ; --- START RELATIONAL
9215   39AA D7            push a
9216   39AB 11            mov a, b
9217   39AC FD 2E 0A 00   mov32 cb, $0000000a
9217   39B0 00 00 
9218   39B2 B0            cmp a, b
9219   39B3 FD 71         seq ; ==
9220   39B5 E4            pop a
9221   39B6             ; --- END RELATIONAL
9222   39B6 C0 00 00      cmp b, 0
9223   39B9 C6 CB 39      je _if168_exit
9224   39BC             _if168_TRUE:
9225   39BC             ; error("Cannot push prog. Stack overflow."); 
9226   39BC                              
9227   39BC             ; --- START FUNCTION CALL
9228   39BC                              
9229   39BC 26 3C 53      mov b, _s80 ; "Cannot push prog. Stack overflow."
9230   39BF FD AB         swp b
9231   39C1 D8            push b
9232   39C2 07 5A 39      call error
9233   39C5 51 02 00      add sp, 2
9234   39C8             ; --- END FUNCTION CALL
9235   39C8 0A CB 39      jmp _if168_exit
9236   39CB             _if168_exit:
9237   39CB             ; prog_stack[prog_tos] = prog; 
9238   39CB 3B 87 4F      mov d, _prog_stack_data ; $prog_stack
9239   39CE D7            push a
9240   39CF DA            push d
9241   39D0                              
9242   39D0 3B 9B 4F      mov d, _prog_tos ; $prog_tos
9243   39D3 2A            mov b, [d]
9244   39D4 38 00 00      mov c, 0
9245   39D7 E7            pop d
9246   39D8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9247   39DC E4            pop a
9248   39DD DA            push d
9249   39DE                              
9250   39DE 3B 3B 4E      mov d, _prog ; $prog
9251   39E1 2A            mov b, [d]
9252   39E2 38 00 00      mov c, 0
9253   39E5 E7            pop d
9254   39E6 FD 43         mov [d], b
9255   39E8             ; prog_tos++; 
9256   39E8                              
9257   39E8 3B 9B 4F      mov d, _prog_tos ; $prog_tos
9258   39EB 2A            mov b, [d]
9259   39EC 38 00 00      mov c, 0
9260   39EF 11            mov a, b
9261   39F0 FD 77         inc b
9262   39F2 3B 9B 4F      mov d, _prog_tos ; $prog_tos
9263   39F5 FD 43         mov [d], b
9264   39F7 27            mov b, a
9265   39F8 F9            leave
9266   39F9 09            ret
9267   39FA             
9268   39FA             pop_prog:
9269   39FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
9270   39FD             ; if(prog_tos == 0) error("Cannot pop prog. Stack overflow."); 
9271   39FD             _if169_cond:
9272   39FD                              
9273   39FD 3B 9B 4F      mov d, _prog_tos ; $prog_tos
9274   3A00 2A            mov b, [d]
9275   3A01 38 00 00      mov c, 0
9276   3A04             ; --- START RELATIONAL
9277   3A04 D7            push a
9278   3A05 11            mov a, b
9279   3A06 FD 2E 00 00   mov32 cb, $00000000
9279   3A0A 00 00 
9280   3A0C B0            cmp a, b
9281   3A0D FD 71         seq ; ==
9282   3A0F E4            pop a
9283   3A10             ; --- END RELATIONAL
9284   3A10 C0 00 00      cmp b, 0
9285   3A13 C6 25 3A      je _if169_exit
9286   3A16             _if169_TRUE:
9287   3A16             ; error("Cannot pop prog. Stack overflow."); 
9288   3A16                              
9289   3A16             ; --- START FUNCTION CALL
9290   3A16                              
9291   3A16 26 5E 53      mov b, _s81 ; "Cannot pop prog. Stack overflow."
9292   3A19 FD AB         swp b
9293   3A1B D8            push b
9294   3A1C 07 5A 39      call error
9295   3A1F 51 02 00      add sp, 2
9296   3A22             ; --- END FUNCTION CALL
9297   3A22 0A 25 3A      jmp _if169_exit
9298   3A25             _if169_exit:
9299   3A25             ; prog_tos--; 
9300   3A25                              
9301   3A25 3B 9B 4F      mov d, _prog_tos ; $prog_tos
9302   3A28 2A            mov b, [d]
9303   3A29 38 00 00      mov c, 0
9304   3A2C 11            mov a, b
9305   3A2D FD 7D         dec b
9306   3A2F 3B 9B 4F      mov d, _prog_tos ; $prog_tos
9307   3A32 FD 43         mov [d], b
9308   3A34 27            mov b, a
9309   3A35             ; prog = prog_stack[prog_tos]; 
9310   3A35 3B 3B 4E      mov d, _prog ; $prog
9311   3A38 DA            push d
9312   3A39                              
9313   3A39 3B 87 4F      mov d, _prog_stack_data ; $prog_stack
9314   3A3C D7            push a
9315   3A3D DA            push d
9316   3A3E                              
9317   3A3E 3B 9B 4F      mov d, _prog_tos ; $prog_tos
9318   3A41 2A            mov b, [d]
9319   3A42 38 00 00      mov c, 0
9320   3A45 E7            pop d
9321   3A46 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9322   3A4A E4            pop a
9323   3A4B 2A            mov b, [d]
9324   3A4C 38 00 00      mov c, 0
9325   3A4F E7            pop d
9326   3A50 FD 43         mov [d], b
9327   3A52 F9            leave
9328   3A53 09            ret
9329   3A54             
9330   3A54             search_keyword:
9331   3A54 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9332   3A57             ; int i; 
9333   3A57 52 02 00      sub sp, 2
9334   3A5A             ; for(i = 0; keywords[i].keyword[0]; i++) 
9335   3A5A             _for170_init:
9336   3A5A FA FF FF      lea d, [bp + -1] ; $i
9337   3A5D DA            push d
9338   3A5E                              
9339   3A5E FD 2E 00 00   mov32 cb, $00000000
9339   3A62 00 00 
9340   3A64 E7            pop d
9341   3A65 FD 43         mov [d], b
9342   3A67             _for170_cond:
9343   3A67                              
9344   3A67 3B FA 4C      mov d, _keywords_data ; $keywords
9345   3A6A D7            push a
9346   3A6B DA            push d
9347   3A6C                              
9348   3A6C FA FF FF      lea d, [bp + -1] ; $i
9349   3A6F 2A            mov b, [d]
9350   3A70 38 00 00      mov c, 0
9351   3A73 E7            pop d
9352   3A74 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
9353   3A78 E4            pop a
9354   3A79 58 00 00      add d, 0
9355   3A7C D7            push a
9356   3A7D DA            push d
9357   3A7E                              
9358   3A7E FD 2E 00 00   mov32 cb, $00000000
9358   3A82 00 00 
9359   3A84 E7            pop d
9360   3A85 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
9361   3A89 E4            pop a
9362   3A8A 32            mov bl, [d]
9363   3A8B A7 00         mov bh, 0
9364   3A8D 38 00 00      mov c, 0
9365   3A90 C0 00 00      cmp b, 0
9366   3A93 C6 FB 3A      je _for170_exit
9367   3A96             _for170_block:
9368   3A96             ; if (!strcmp(keywords[i].keyword, keyword)) return keywords[i].tok; 
9369   3A96             _if171_cond:
9370   3A96                              
9371   3A96             ; --- START FUNCTION CALL
9372   3A96                              
9373   3A96 FA 05 00      lea d, [bp + 5] ; $keyword
9374   3A99 2A            mov b, [d]
9375   3A9A 38 00 00      mov c, 0
9376   3A9D FD AB         swp b
9377   3A9F D8            push b
9378   3AA0                              
9379   3AA0 3B FA 4C      mov d, _keywords_data ; $keywords
9380   3AA3 D7            push a
9381   3AA4 DA            push d
9382   3AA5                              
9383   3AA5 FA FF FF      lea d, [bp + -1] ; $i
9384   3AA8 2A            mov b, [d]
9385   3AA9 38 00 00      mov c, 0
9386   3AAC E7            pop d
9387   3AAD FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
9388   3AB1 E4            pop a
9389   3AB2 58 00 00      add d, 0
9390   3AB5 2A            mov b, [d]
9391   3AB6 38 00 00      mov c, 0
9392   3AB9 FD AB         swp b
9393   3ABB D8            push b
9394   3ABC 07 92 3F      call strcmp
9395   3ABF 51 04 00      add sp, 4
9396   3AC2             ; --- END FUNCTION CALL
9397   3AC2 C0 00 00      cmp b, 0
9398   3AC5 C6 E8 3A      je _if171_exit
9399   3AC8             _if171_TRUE:
9400   3AC8             ; return keywords[i].tok; 
9401   3AC8                              
9402   3AC8 3B FA 4C      mov d, _keywords_data ; $keywords
9403   3ACB D7            push a
9404   3ACC DA            push d
9405   3ACD                              
9406   3ACD FA FF FF      lea d, [bp + -1] ; $i
9407   3AD0 2A            mov b, [d]
9408   3AD1 38 00 00      mov c, 0
9409   3AD4 E7            pop d
9410   3AD5 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
9411   3AD9 E4            pop a
9412   3ADA 58 02 00      add d, 2
9413   3ADD 32            mov bl, [d]
9414   3ADE A7 00         mov bh, 0
9415   3AE0 38 00 00      mov c, 0
9416   3AE3 F9            leave
9417   3AE4 09            ret
9418   3AE5 0A E8 3A      jmp _if171_exit
9419   3AE8             _if171_exit:
9420   3AE8             _for170_update:
9421   3AE8                              
9422   3AE8 FA FF FF      lea d, [bp + -1] ; $i
9423   3AEB 2A            mov b, [d]
9424   3AEC 38 00 00      mov c, 0
9425   3AEF 11            mov a, b
9426   3AF0 FD 77         inc b
9427   3AF2 FA FF FF      lea d, [bp + -1] ; $i
9428   3AF5 FD 43         mov [d], b
9429   3AF7 27            mov b, a
9430   3AF8 0A 67 3A      jmp _for170_cond
9431   3AFB             _for170_exit:
9432   3AFB             ; return -1; 
9433   3AFB                              
9434   3AFB FD 2E FF FF   mov32 cb, $ffffffff
9434   3AFF FF FF 
9435   3B01 F9            leave
9436   3B02 09            ret
9437   3B03             
9438   3B03             hex_to_int:
9439   3B03 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9440   3B06             ; int value = 0; 
9441   3B06 52 02 00      sub sp, 2
9442   3B09             ; --- START LOCAL VAR INITIALIZATION
9443   3B09 FA FF FF      lea d, [bp + -1] ; $value
9444   3B0C DA            push d
9445   3B0D                              
9446   3B0D FD 2E 00 00   mov32 cb, $00000000
9446   3B11 00 00 
9447   3B13 E7            pop d
9448   3B14 FD 43         mov [d], b
9449   3B16             ; --- END LOCAL VAR INITIALIZATION
9450   3B16             ; int i; 
9451   3B16 52 02 00      sub sp, 2
9452   3B19             ; char hex_char; 
9453   3B19 52 01 00      sub sp, 1
9454   3B1C             ; int len; 
9455   3B1C 52 02 00      sub sp, 2
9456   3B1F             ; len = strlen(hex_string); 
9457   3B1F FA FA FF      lea d, [bp + -6] ; $len
9458   3B22 DA            push d
9459   3B23                              
9460   3B23             ; --- START FUNCTION CALL
9461   3B23                              
9462   3B23 FA 05 00      lea d, [bp + 5] ; $hex_string
9463   3B26 2A            mov b, [d]
9464   3B27 38 00 00      mov c, 0
9465   3B2A FD AB         swp b
9466   3B2C D8            push b
9467   3B2D 07 16 40      call strlen
9468   3B30 51 02 00      add sp, 2
9469   3B33             ; --- END FUNCTION CALL
9470   3B33 E7            pop d
9471   3B34 FD 43         mov [d], b
9472   3B36             ; for (i = 0; i < len; i++) { 
9473   3B36             _for172_init:
9474   3B36 FA FD FF      lea d, [bp + -3] ; $i
9475   3B39 DA            push d
9476   3B3A                              
9477   3B3A FD 2E 00 00   mov32 cb, $00000000
9477   3B3E 00 00 
9478   3B40 E7            pop d
9479   3B41 FD 43         mov [d], b
9480   3B43             _for172_cond:
9481   3B43                              
9482   3B43 FA FD FF      lea d, [bp + -3] ; $i
9483   3B46 2A            mov b, [d]
9484   3B47 38 00 00      mov c, 0
9485   3B4A             ; --- START RELATIONAL
9486   3B4A D7            push a
9487   3B4B 11            mov a, b
9488   3B4C FA FA FF      lea d, [bp + -6] ; $len
9489   3B4F 2A            mov b, [d]
9490   3B50 38 00 00      mov c, 0
9491   3B53 B0            cmp a, b
9492   3B54 FD 73         slt ; < (signed)
9493   3B56 E4            pop a
9494   3B57             ; --- END RELATIONAL
9495   3B57 C0 00 00      cmp b, 0
9496   3B5A C6 67 3D      je _for172_exit
9497   3B5D             _for172_block:
9498   3B5D             ; hex_char = hex_string[i]; 
9499   3B5D FA FC FF      lea d, [bp + -4] ; $hex_char
9500   3B60 DA            push d
9501   3B61                              
9502   3B61 FA 05 00      lea d, [bp + 5] ; $hex_string
9503   3B64 FD 2A         mov d, [d]
9504   3B66 D7            push a
9505   3B67 DA            push d
9506   3B68                              
9507   3B68 FA FD FF      lea d, [bp + -3] ; $i
9508   3B6B 2A            mov b, [d]
9509   3B6C 38 00 00      mov c, 0
9510   3B6F E7            pop d
9511   3B70 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
9512   3B74 E4            pop a
9513   3B75 32            mov bl, [d]
9514   3B76 A7 00         mov bh, 0
9515   3B78 38 00 00      mov c, 0
9516   3B7B E7            pop d
9517   3B7C FD 3E         mov [d], bl
9518   3B7E             ; if (hex_char >= 'a' && hex_char <= 'f')  
9519   3B7E             _if173_cond:
9520   3B7E                              
9521   3B7E FA FC FF      lea d, [bp + -4] ; $hex_char
9522   3B81 32            mov bl, [d]
9523   3B82 A7 00         mov bh, 0
9524   3B84 38 00 00      mov c, 0
9525   3B87             ; --- START RELATIONAL
9526   3B87 D7            push a
9527   3B88 11            mov a, b
9528   3B89 FD 2E 61 00   mov32 cb, $00000061
9528   3B8D 00 00 
9529   3B8F B0            cmp a, b
9530   3B90 FD 80         sge ; >=
9531   3B92 E4            pop a
9532   3B93             ; --- END RELATIONAL
9533   3B93             ; --- START LOGICAL AND
9534   3B93 D7            push a
9535   3B94 11            mov a, b
9536   3B95 FA FC FF      lea d, [bp + -4] ; $hex_char
9537   3B98 32            mov bl, [d]
9538   3B99 A7 00         mov bh, 0
9539   3B9B 38 00 00      mov c, 0
9540   3B9E             ; --- START RELATIONAL
9541   3B9E D7            push a
9542   3B9F 11            mov a, b
9543   3BA0 FD 2E 66 00   mov32 cb, $00000066
9543   3BA4 00 00 
9544   3BA6 B0            cmp a, b
9545   3BA7 FD 74         sle ; <= (signed)
9546   3BA9 E4            pop a
9547   3BAA             ; --- END RELATIONAL
9548   3BAA FD A7         sand a, b
9549   3BAC E4            pop a
9550   3BAD             ; --- END LOGICAL AND
9551   3BAD C0 00 00      cmp b, 0
9552   3BB0 C6 30 3C      je _if173_else
9553   3BB3             _if173_TRUE:
9554   3BB3             ; value = (value * 16) + (hex_char - 'a' + 10); 
9555   3BB3 FA FF FF      lea d, [bp + -1] ; $value
9556   3BB6 DA            push d
9557   3BB7                              
9558   3BB7                              
9559   3BB7 FA FF FF      lea d, [bp + -1] ; $value
9560   3BBA 2A            mov b, [d]
9561   3BBB 38 00 00      mov c, 0
9562   3BBE             ; --- START FACTORS
9563   3BBE D7            push a
9564   3BBF FD D8         push g
9565   3BC1 11            mov a, b
9566   3BC2 FD 7A         mov g, c
9567   3BC4 FD 2E 10 00   mov32 cb, $00000010
9567   3BC8 00 00 
9568   3BCA D7            push a     ; save left operand
9569   3BCB 8E            xor a, b   ; xor sign bits
9570   3BCC FD AA         swp a      ; swap bytes
9571   3BCE 83            mov cl, al ; save result of xor into 'dl'
9572   3BCF E4            pop a      ; restore left side operator
9573   3BD0 DF            push cl    ; save result of xor above
9574   3BD1 FD AA         swp a  
9575   3BD3 93 80         test al, $80  
9576   3BD5 FD AA         swp a  
9577   3BD7 C6 DC 3B      jz skip_invert_a_174  
9578   3BDA FD 95         neg a 
9579   3BDC             skip_invert_a_174:   
9580   3BDC FD AB         swp b
9581   3BDE FD 93 80      test bl, $80  
9582   3BE1 FD AB         swp b
9583   3BE3 C6 E8 3B      jz skip_invert_b_174  
9584   3BE6 FD 97         neg b 
9585   3BE8             skip_invert_b_174:   
9586   3BE8 AC            mul a, b ; *
9587   3BE9 FD 78         mov g, a
9588   3BEB 11            mov a, b
9589   3BEC EA            pop bl
9590   3BED FD 93 80      test bl, $80
9591   3BF0 C6 FD 3B      jz _same_signs_174
9592   3BF3 2F            mov bl, al
9593   3BF4 95            not a
9594   3BF5 FD 97         neg b
9595   3BF7 5B 00 00      adc a, 0
9596   3BFA FD 78         mov g, a
9597   3BFC 11            mov a, b
9598   3BFD             _same_signs_174:
9599   3BFD FD 38         mov c, g
9600   3BFF 27            mov b, a
9601   3C00 FD F1         pop g
9602   3C02 E4            pop a
9603   3C03             ; --- END FACTORS
9604   3C03             ; --- START TERMS
9605   3C03 D7            push a
9606   3C04 FD D8         push g
9607   3C06 11            mov a, b
9608   3C07 FD 7A         mov g, c
9609   3C09                              
9610   3C09 FA FC FF      lea d, [bp + -4] ; $hex_char
9611   3C0C 32            mov bl, [d]
9612   3C0D A7 00         mov bh, 0
9613   3C0F 38 00 00      mov c, 0
9614   3C12             ; --- START TERMS
9615   3C12 D7            push a
9616   3C13 11            mov a, b
9617   3C14 FD 2E 61 00   mov32 cb, $00000061
9617   3C18 00 00 
9618   3C1A 60            sub a, b
9619   3C1B 27            mov b, a
9620   3C1C 11            mov a, b
9621   3C1D FD 2E 0A 00   mov32 cb, $0000000a
9621   3C21 00 00 
9622   3C23 56            add b, a
9623   3C24 E4            pop a
9624   3C25             ; --- END TERMS
9625   3C25 FD 15         add32 cb, ga
9626   3C27 FD F1         pop g
9627   3C29 E4            pop a
9628   3C2A             ; --- END TERMS
9629   3C2A E7            pop d
9630   3C2B FD 43         mov [d], b
9631   3C2D 0A 54 3D      jmp _if173_exit
9632   3C30             _if173_else:
9633   3C30             ; if (hex_char >= 'A' && hex_char <= 'F')  
9634   3C30             _if175_cond:
9635   3C30                              
9636   3C30 FA FC FF      lea d, [bp + -4] ; $hex_char
9637   3C33 32            mov bl, [d]
9638   3C34 A7 00         mov bh, 0
9639   3C36 38 00 00      mov c, 0
9640   3C39             ; --- START RELATIONAL
9641   3C39 D7            push a
9642   3C3A 11            mov a, b
9643   3C3B FD 2E 41 00   mov32 cb, $00000041
9643   3C3F 00 00 
9644   3C41 B0            cmp a, b
9645   3C42 FD 80         sge ; >=
9646   3C44 E4            pop a
9647   3C45             ; --- END RELATIONAL
9648   3C45             ; --- START LOGICAL AND
9649   3C45 D7            push a
9650   3C46 11            mov a, b
9651   3C47 FA FC FF      lea d, [bp + -4] ; $hex_char
9652   3C4A 32            mov bl, [d]
9653   3C4B A7 00         mov bh, 0
9654   3C4D 38 00 00      mov c, 0
9655   3C50             ; --- START RELATIONAL
9656   3C50 D7            push a
9657   3C51 11            mov a, b
9658   3C52 FD 2E 46 00   mov32 cb, $00000046
9658   3C56 00 00 
9659   3C58 B0            cmp a, b
9660   3C59 FD 74         sle ; <= (signed)
9661   3C5B E4            pop a
9662   3C5C             ; --- END RELATIONAL
9663   3C5C FD A7         sand a, b
9664   3C5E E4            pop a
9665   3C5F             ; --- END LOGICAL AND
9666   3C5F C0 00 00      cmp b, 0
9667   3C62 C6 E2 3C      je _if175_else
9668   3C65             _if175_TRUE:
9669   3C65             ; value = (value * 16) + (hex_char - 'A' + 10); 
9670   3C65 FA FF FF      lea d, [bp + -1] ; $value
9671   3C68 DA            push d
9672   3C69                              
9673   3C69                              
9674   3C69 FA FF FF      lea d, [bp + -1] ; $value
9675   3C6C 2A            mov b, [d]
9676   3C6D 38 00 00      mov c, 0
9677   3C70             ; --- START FACTORS
9678   3C70 D7            push a
9679   3C71 FD D8         push g
9680   3C73 11            mov a, b
9681   3C74 FD 7A         mov g, c
9682   3C76 FD 2E 10 00   mov32 cb, $00000010
9682   3C7A 00 00 
9683   3C7C D7            push a     ; save left operand
9684   3C7D 8E            xor a, b   ; xor sign bits
9685   3C7E FD AA         swp a      ; swap bytes
9686   3C80 83            mov cl, al ; save result of xor into 'dl'
9687   3C81 E4            pop a      ; restore left side operator
9688   3C82 DF            push cl    ; save result of xor above
9689   3C83 FD AA         swp a  
9690   3C85 93 80         test al, $80  
9691   3C87 FD AA         swp a  
9692   3C89 C6 8E 3C      jz skip_invert_a_176  
9693   3C8C FD 95         neg a 
9694   3C8E             skip_invert_a_176:   
9695   3C8E FD AB         swp b
9696   3C90 FD 93 80      test bl, $80  
9697   3C93 FD AB         swp b
9698   3C95 C6 9A 3C      jz skip_invert_b_176  
9699   3C98 FD 97         neg b 
9700   3C9A             skip_invert_b_176:   
9701   3C9A AC            mul a, b ; *
9702   3C9B FD 78         mov g, a
9703   3C9D 11            mov a, b
9704   3C9E EA            pop bl
9705   3C9F FD 93 80      test bl, $80
9706   3CA2 C6 AF 3C      jz _same_signs_176
9707   3CA5 2F            mov bl, al
9708   3CA6 95            not a
9709   3CA7 FD 97         neg b
9710   3CA9 5B 00 00      adc a, 0
9711   3CAC FD 78         mov g, a
9712   3CAE 11            mov a, b
9713   3CAF             _same_signs_176:
9714   3CAF FD 38         mov c, g
9715   3CB1 27            mov b, a
9716   3CB2 FD F1         pop g
9717   3CB4 E4            pop a
9718   3CB5             ; --- END FACTORS
9719   3CB5             ; --- START TERMS
9720   3CB5 D7            push a
9721   3CB6 FD D8         push g
9722   3CB8 11            mov a, b
9723   3CB9 FD 7A         mov g, c
9724   3CBB                              
9725   3CBB FA FC FF      lea d, [bp + -4] ; $hex_char
9726   3CBE 32            mov bl, [d]
9727   3CBF A7 00         mov bh, 0
9728   3CC1 38 00 00      mov c, 0
9729   3CC4             ; --- START TERMS
9730   3CC4 D7            push a
9731   3CC5 11            mov a, b
9732   3CC6 FD 2E 41 00   mov32 cb, $00000041
9732   3CCA 00 00 
9733   3CCC 60            sub a, b
9734   3CCD 27            mov b, a
9735   3CCE 11            mov a, b
9736   3CCF FD 2E 0A 00   mov32 cb, $0000000a
9736   3CD3 00 00 
9737   3CD5 56            add b, a
9738   3CD6 E4            pop a
9739   3CD7             ; --- END TERMS
9740   3CD7 FD 15         add32 cb, ga
9741   3CD9 FD F1         pop g
9742   3CDB E4            pop a
9743   3CDC             ; --- END TERMS
9744   3CDC E7            pop d
9745   3CDD FD 43         mov [d], b
9746   3CDF 0A 54 3D      jmp _if175_exit
9747   3CE2             _if175_else:
9748   3CE2             ; value = (value * 16) + (hex_char - '0'); 
9749   3CE2 FA FF FF      lea d, [bp + -1] ; $value
9750   3CE5 DA            push d
9751   3CE6                              
9752   3CE6                              
9753   3CE6 FA FF FF      lea d, [bp + -1] ; $value
9754   3CE9 2A            mov b, [d]
9755   3CEA 38 00 00      mov c, 0
9756   3CED             ; --- START FACTORS
9757   3CED D7            push a
9758   3CEE FD D8         push g
9759   3CF0 11            mov a, b
9760   3CF1 FD 7A         mov g, c
9761   3CF3 FD 2E 10 00   mov32 cb, $00000010
9761   3CF7 00 00 
9762   3CF9 D7            push a     ; save left operand
9763   3CFA 8E            xor a, b   ; xor sign bits
9764   3CFB FD AA         swp a      ; swap bytes
9765   3CFD 83            mov cl, al ; save result of xor into 'dl'
9766   3CFE E4            pop a      ; restore left side operator
9767   3CFF DF            push cl    ; save result of xor above
9768   3D00 FD AA         swp a  
9769   3D02 93 80         test al, $80  
9770   3D04 FD AA         swp a  
9771   3D06 C6 0B 3D      jz skip_invert_a_177  
9772   3D09 FD 95         neg a 
9773   3D0B             skip_invert_a_177:   
9774   3D0B FD AB         swp b
9775   3D0D FD 93 80      test bl, $80  
9776   3D10 FD AB         swp b
9777   3D12 C6 17 3D      jz skip_invert_b_177  
9778   3D15 FD 97         neg b 
9779   3D17             skip_invert_b_177:   
9780   3D17 AC            mul a, b ; *
9781   3D18 FD 78         mov g, a
9782   3D1A 11            mov a, b
9783   3D1B EA            pop bl
9784   3D1C FD 93 80      test bl, $80
9785   3D1F C6 2C 3D      jz _same_signs_177
9786   3D22 2F            mov bl, al
9787   3D23 95            not a
9788   3D24 FD 97         neg b
9789   3D26 5B 00 00      adc a, 0
9790   3D29 FD 78         mov g, a
9791   3D2B 11            mov a, b
9792   3D2C             _same_signs_177:
9793   3D2C FD 38         mov c, g
9794   3D2E 27            mov b, a
9795   3D2F FD F1         pop g
9796   3D31 E4            pop a
9797   3D32             ; --- END FACTORS
9798   3D32             ; --- START TERMS
9799   3D32 D7            push a
9800   3D33 FD D8         push g
9801   3D35 11            mov a, b
9802   3D36 FD 7A         mov g, c
9803   3D38                              
9804   3D38 FA FC FF      lea d, [bp + -4] ; $hex_char
9805   3D3B 32            mov bl, [d]
9806   3D3C A7 00         mov bh, 0
9807   3D3E 38 00 00      mov c, 0
9808   3D41             ; --- START TERMS
9809   3D41 D7            push a
9810   3D42 11            mov a, b
9811   3D43 FD 2E 30 00   mov32 cb, $00000030
9811   3D47 00 00 
9812   3D49 60            sub a, b
9813   3D4A 27            mov b, a
9814   3D4B E4            pop a
9815   3D4C             ; --- END TERMS
9816   3D4C FD 15         add32 cb, ga
9817   3D4E FD F1         pop g
9818   3D50 E4            pop a
9819   3D51             ; --- END TERMS
9820   3D51 E7            pop d
9821   3D52 FD 43         mov [d], b
9822   3D54             _if175_exit:
9823   3D54             _if173_exit:
9824   3D54             _for172_update:
9825   3D54                              
9826   3D54 FA FD FF      lea d, [bp + -3] ; $i
9827   3D57 2A            mov b, [d]
9828   3D58 38 00 00      mov c, 0
9829   3D5B 11            mov a, b
9830   3D5C FD 77         inc b
9831   3D5E FA FD FF      lea d, [bp + -3] ; $i
9832   3D61 FD 43         mov [d], b
9833   3D63 27            mov b, a
9834   3D64 0A 43 3B      jmp _for172_cond
9835   3D67             _for172_exit:
9836   3D67             ; return value; 
9837   3D67                              
9838   3D67 FA FF FF      lea d, [bp + -1] ; $value
9839   3D6A 2A            mov b, [d]
9840   3D6B 38 00 00      mov c, 0
9841   3D6E F9            leave
9842   3D6F 09            ret
9843   3D70             
9844   3D70             loadfile:
9845   3D70 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9846   3D73             ; --- BEGIN INLINE ASM SEGMENT
9847   3D73 FA 07 00      lea d, [bp + 7] ; $destination
9848   3D76 15            mov a, [d]
9849   3D77 4F            mov di, a
9850   3D78 FA 05 00      lea d, [bp + 5] ; $filename
9851   3D7B FD 2A         mov d, [d]
9852   3D7D 19 14         mov al, 20
9853   3D7F 05 04         syscall sys_filesystem
9854   3D81             ; --- END INLINE ASM SEGMENT
9855   3D81 F9            leave
9856   3D82 09            ret
9857   3D83             
9858   3D83             exp:
9859   3D83 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9860   3D86             ; int i; 
9861   3D86 52 02 00      sub sp, 2
9862   3D89             ; int result = 1; 
9863   3D89 52 02 00      sub sp, 2
9864   3D8C             ; --- START LOCAL VAR INITIALIZATION
9865   3D8C FA FD FF      lea d, [bp + -3] ; $result
9866   3D8F DA            push d
9867   3D90                              
9868   3D90 FD 2E 01 00   mov32 cb, $00000001
9868   3D94 00 00 
9869   3D96 E7            pop d
9870   3D97 FD 43         mov [d], b
9871   3D99             ; --- END LOCAL VAR INITIALIZATION
9872   3D99             ; for(i = 0; i < exp; i++){ 
9873   3D99             _for178_init:
9874   3D99 FA FF FF      lea d, [bp + -1] ; $i
9875   3D9C DA            push d
9876   3D9D                              
9877   3D9D FD 2E 00 00   mov32 cb, $00000000
9877   3DA1 00 00 
9878   3DA3 E7            pop d
9879   3DA4 FD 43         mov [d], b
9880   3DA6             _for178_cond:
9881   3DA6                              
9882   3DA6 FA FF FF      lea d, [bp + -1] ; $i
9883   3DA9 2A            mov b, [d]
9884   3DAA 38 00 00      mov c, 0
9885   3DAD             ; --- START RELATIONAL
9886   3DAD D7            push a
9887   3DAE 11            mov a, b
9888   3DAF FA 07 00      lea d, [bp + 7] ; $exp
9889   3DB2 2A            mov b, [d]
9890   3DB3 38 00 00      mov c, 0
9891   3DB6 B0            cmp a, b
9892   3DB7 FD 73         slt ; < (signed)
9893   3DB9 E4            pop a
9894   3DBA             ; --- END RELATIONAL
9895   3DBA C0 00 00      cmp b, 0
9896   3DBD C6 27 3E      je _for178_exit
9897   3DC0             _for178_block:
9898   3DC0             ; result = result * base; 
9899   3DC0 FA FD FF      lea d, [bp + -3] ; $result
9900   3DC3 DA            push d
9901   3DC4                              
9902   3DC4 FA FD FF      lea d, [bp + -3] ; $result
9903   3DC7 2A            mov b, [d]
9904   3DC8 38 00 00      mov c, 0
9905   3DCB             ; --- START FACTORS
9906   3DCB D7            push a
9907   3DCC FD D8         push g
9908   3DCE 11            mov a, b
9909   3DCF FD 7A         mov g, c
9910   3DD1 FA 05 00      lea d, [bp + 5] ; $base
9911   3DD4 2A            mov b, [d]
9912   3DD5 38 00 00      mov c, 0
9913   3DD8 D7            push a     ; save left operand
9914   3DD9 8E            xor a, b   ; xor sign bits
9915   3DDA FD AA         swp a      ; swap bytes
9916   3DDC 83            mov cl, al ; save result of xor into 'dl'
9917   3DDD E4            pop a      ; restore left side operator
9918   3DDE DF            push cl    ; save result of xor above
9919   3DDF FD AA         swp a  
9920   3DE1 93 80         test al, $80  
9921   3DE3 FD AA         swp a  
9922   3DE5 C6 EA 3D      jz skip_invert_a_179  
9923   3DE8 FD 95         neg a 
9924   3DEA             skip_invert_a_179:   
9925   3DEA FD AB         swp b
9926   3DEC FD 93 80      test bl, $80  
9927   3DEF FD AB         swp b
9928   3DF1 C6 F6 3D      jz skip_invert_b_179  
9929   3DF4 FD 97         neg b 
9930   3DF6             skip_invert_b_179:   
9931   3DF6 AC            mul a, b ; *
9932   3DF7 FD 78         mov g, a
9933   3DF9 11            mov a, b
9934   3DFA EA            pop bl
9935   3DFB FD 93 80      test bl, $80
9936   3DFE C6 0B 3E      jz _same_signs_179
9937   3E01 2F            mov bl, al
9938   3E02 95            not a
9939   3E03 FD 97         neg b
9940   3E05 5B 00 00      adc a, 0
9941   3E08 FD 78         mov g, a
9942   3E0A 11            mov a, b
9943   3E0B             _same_signs_179:
9944   3E0B FD 38         mov c, g
9945   3E0D 27            mov b, a
9946   3E0E FD F1         pop g
9947   3E10 E4            pop a
9948   3E11             ; --- END FACTORS
9949   3E11 E7            pop d
9950   3E12 FD 43         mov [d], b
9951   3E14             _for178_update:
9952   3E14                              
9953   3E14 FA FF FF      lea d, [bp + -1] ; $i
9954   3E17 2A            mov b, [d]
9955   3E18 38 00 00      mov c, 0
9956   3E1B 11            mov a, b
9957   3E1C FD 77         inc b
9958   3E1E FA FF FF      lea d, [bp + -1] ; $i
9959   3E21 FD 43         mov [d], b
9960   3E23 27            mov b, a
9961   3E24 0A A6 3D      jmp _for178_cond
9962   3E27             _for178_exit:
9963   3E27             ; return result; 
9964   3E27                              
9965   3E27 FA FD FF      lea d, [bp + -3] ; $result
9966   3E2A 2A            mov b, [d]
9967   3E2B 38 00 00      mov c, 0
9968   3E2E F9            leave
9969   3E2F 09            ret
9970   3E30             
9971   3E30             print:
9972   3E30 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9973   3E33             ; --- BEGIN INLINE ASM SEGMENT
9974   3E33 FA 05 00      lea d, [bp + 5] ; $s
9975   3E36 FD 2A         mov d, [d]
9976   3E38             _puts_L1_print:
9977   3E38 1E            mov al, [d]
9978   3E39 B9 00         cmp al, 0
9979   3E3B C6 47 3E      jz _puts_END_print
9980   3E3E 23            mov ah, al
9981   3E3F 19 00         mov al, 0
9982   3E41 05 03         syscall sys_io
9983   3E43 79            inc d
9984   3E44 0A 38 3E      jmp _puts_L1_print
9985   3E47             _puts_END_print:
9986   3E47             ; --- END INLINE ASM SEGMENT
9987   3E47 F9            leave
9988   3E48 09            ret
9989   3E49             
9990   3E49             alloc:
9991   3E49 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9992   3E4C             ; heap_top = heap_top + bytes; 
9993   3E4C 3B BB 53      mov d, _heap_top ; $heap_top
9994   3E4F DA            push d
9995   3E50                              
9996   3E50 3B BB 53      mov d, _heap_top ; $heap_top
9997   3E53 2A            mov b, [d]
9998   3E54 38 00 00      mov c, 0
9999   3E57             ; --- START TERMS
10000  3E57 D7            push a
10001  3E58 11            mov a, b
10002  3E59 FA 05 00      lea d, [bp + 5] ; $bytes
10003  3E5C 2A            mov b, [d]
10004  3E5D 38 00 00      mov c, 0
10005  3E60 56            add b, a
10006  3E61 E4            pop a
10007  3E62             ; --- END TERMS
10008  3E62 E7            pop d
10009  3E63 FD 43         mov [d], b
10010  3E65             ; return heap_top - bytes; 
10011  3E65                              
10012  3E65 3B BB 53      mov d, _heap_top ; $heap_top
10013  3E68 2A            mov b, [d]
10014  3E69 38 00 00      mov c, 0
10015  3E6C             ; --- START TERMS
10016  3E6C D7            push a
10017  3E6D 11            mov a, b
10018  3E6E FA 05 00      lea d, [bp + 5] ; $bytes
10019  3E71 2A            mov b, [d]
10020  3E72 38 00 00      mov c, 0
10021  3E75 60            sub a, b
10022  3E76 27            mov b, a
10023  3E77 E4            pop a
10024  3E78             ; --- END TERMS
10025  3E78 F9            leave
10026  3E79 09            ret
10027  3E7A             
10028  3E7A             is_space:
10029  3E7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
10030  3E7D             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
10031  3E7D                              
10032  3E7D FA 05 00      lea d, [bp + 5] ; $c
10033  3E80 32            mov bl, [d]
10034  3E81 A7 00         mov bh, 0
10035  3E83 38 00 00      mov c, 0
10036  3E86             ; --- START RELATIONAL
10037  3E86 D7            push a
10038  3E87 11            mov a, b
10039  3E88 FD 2E 20 00   mov32 cb, $00000020
10039  3E8C 00 00 
10040  3E8E B0            cmp a, b
10041  3E8F FD 71         seq ; ==
10042  3E91 E4            pop a
10043  3E92             ; --- END RELATIONAL
10044  3E92             ; --- START LOGICAL OR
10045  3E92 D7            push a
10046  3E93 11            mov a, b
10047  3E94 FA 05 00      lea d, [bp + 5] ; $c
10048  3E97 32            mov bl, [d]
10049  3E98 A7 00         mov bh, 0
10050  3E9A 38 00 00      mov c, 0
10051  3E9D             ; --- START RELATIONAL
10052  3E9D D7            push a
10053  3E9E 11            mov a, b
10054  3E9F FD 2E 09 00   mov32 cb, $00000009
10054  3EA3 00 00 
10055  3EA5 B0            cmp a, b
10056  3EA6 FD 71         seq ; ==
10057  3EA8 E4            pop a
10058  3EA9             ; --- END RELATIONAL
10059  3EA9 FD A8         sor a, b ; ||
10060  3EAB 11            mov a, b
10061  3EAC FA 05 00      lea d, [bp + 5] ; $c
10062  3EAF 32            mov bl, [d]
10063  3EB0 A7 00         mov bh, 0
10064  3EB2 38 00 00      mov c, 0
10065  3EB5             ; --- START RELATIONAL
10066  3EB5 D7            push a
10067  3EB6 11            mov a, b
10068  3EB7 FD 2E 0A 00   mov32 cb, $0000000a
10068  3EBB 00 00 
10069  3EBD B0            cmp a, b
10070  3EBE FD 71         seq ; ==
10071  3EC0 E4            pop a
10072  3EC1             ; --- END RELATIONAL
10073  3EC1 FD A8         sor a, b ; ||
10074  3EC3 11            mov a, b
10075  3EC4 FA 05 00      lea d, [bp + 5] ; $c
10076  3EC7 32            mov bl, [d]
10077  3EC8 A7 00         mov bh, 0
10078  3ECA 38 00 00      mov c, 0
10079  3ECD             ; --- START RELATIONAL
10080  3ECD D7            push a
10081  3ECE 11            mov a, b
10082  3ECF FD 2E 0D 00   mov32 cb, $0000000d
10082  3ED3 00 00 
10083  3ED5 B0            cmp a, b
10084  3ED6 FD 71         seq ; ==
10085  3ED8 E4            pop a
10086  3ED9             ; --- END RELATIONAL
10087  3ED9 FD A8         sor a, b ; ||
10088  3EDB E4            pop a
10089  3EDC             ; --- END LOGICAL OR
10090  3EDC F9            leave
10091  3EDD 09            ret
10092  3EDE             
10093  3EDE             is_alpha:
10094  3EDE F8 00 00      enter 0 ; (push bp; mov bp, sp)
10095  3EE1             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
10096  3EE1                              
10097  3EE1                              
10098  3EE1 FA 05 00      lea d, [bp + 5] ; $c
10099  3EE4 32            mov bl, [d]
10100  3EE5 A7 00         mov bh, 0
10101  3EE7 38 00 00      mov c, 0
10102  3EEA             ; --- START RELATIONAL
10103  3EEA D7            push a
10104  3EEB 11            mov a, b
10105  3EEC FD 2E 61 00   mov32 cb, $00000061
10105  3EF0 00 00 
10106  3EF2 B0            cmp a, b
10107  3EF3 FD 80         sge ; >=
10108  3EF5 E4            pop a
10109  3EF6             ; --- END RELATIONAL
10110  3EF6             ; --- START LOGICAL AND
10111  3EF6 D7            push a
10112  3EF7 11            mov a, b
10113  3EF8 FA 05 00      lea d, [bp + 5] ; $c
10114  3EFB 32            mov bl, [d]
10115  3EFC A7 00         mov bh, 0
10116  3EFE 38 00 00      mov c, 0
10117  3F01             ; --- START RELATIONAL
10118  3F01 D7            push a
10119  3F02 11            mov a, b
10120  3F03 FD 2E 7A 00   mov32 cb, $0000007a
10120  3F07 00 00 
10121  3F09 B0            cmp a, b
10122  3F0A FD 74         sle ; <= (signed)
10123  3F0C E4            pop a
10124  3F0D             ; --- END RELATIONAL
10125  3F0D FD A7         sand a, b
10126  3F0F E4            pop a
10127  3F10             ; --- END LOGICAL AND
10128  3F10             ; --- START LOGICAL OR
10129  3F10 D7            push a
10130  3F11 11            mov a, b
10131  3F12 FA 05 00      lea d, [bp + 5] ; $c
10132  3F15 32            mov bl, [d]
10133  3F16 A7 00         mov bh, 0
10134  3F18 38 00 00      mov c, 0
10135  3F1B             ; --- START RELATIONAL
10136  3F1B D7            push a
10137  3F1C 11            mov a, b
10138  3F1D FD 2E 41 00   mov32 cb, $00000041
10138  3F21 00 00 
10139  3F23 B0            cmp a, b
10140  3F24 FD 80         sge ; >=
10141  3F26 E4            pop a
10142  3F27             ; --- END RELATIONAL
10143  3F27             ; --- START LOGICAL AND
10144  3F27 D7            push a
10145  3F28 11            mov a, b
10146  3F29 FA 05 00      lea d, [bp + 5] ; $c
10147  3F2C 32            mov bl, [d]
10148  3F2D A7 00         mov bh, 0
10149  3F2F 38 00 00      mov c, 0
10150  3F32             ; --- START RELATIONAL
10151  3F32 D7            push a
10152  3F33 11            mov a, b
10153  3F34 FD 2E 5A 00   mov32 cb, $0000005a
10153  3F38 00 00 
10154  3F3A B0            cmp a, b
10155  3F3B FD 74         sle ; <= (signed)
10156  3F3D E4            pop a
10157  3F3E             ; --- END RELATIONAL
10158  3F3E FD A7         sand a, b
10159  3F40 E4            pop a
10160  3F41             ; --- END LOGICAL AND
10161  3F41 FD A8         sor a, b ; ||
10162  3F43 11            mov a, b
10163  3F44 FA 05 00      lea d, [bp + 5] ; $c
10164  3F47 32            mov bl, [d]
10165  3F48 A7 00         mov bh, 0
10166  3F4A 38 00 00      mov c, 0
10167  3F4D             ; --- START RELATIONAL
10168  3F4D D7            push a
10169  3F4E 11            mov a, b
10170  3F4F FD 2E 5F 00   mov32 cb, $0000005f
10170  3F53 00 00 
10171  3F55 B0            cmp a, b
10172  3F56 FD 71         seq ; ==
10173  3F58 E4            pop a
10174  3F59             ; --- END RELATIONAL
10175  3F59 FD A8         sor a, b ; ||
10176  3F5B E4            pop a
10177  3F5C             ; --- END LOGICAL OR
10178  3F5C F9            leave
10179  3F5D 09            ret
10180  3F5E             
10181  3F5E             is_digit:
10182  3F5E F8 00 00      enter 0 ; (push bp; mov bp, sp)
10183  3F61             ; return c >= '0' && c <= '9'; 
10184  3F61                              
10185  3F61 FA 05 00      lea d, [bp + 5] ; $c
10186  3F64 32            mov bl, [d]
10187  3F65 A7 00         mov bh, 0
10188  3F67 38 00 00      mov c, 0
10189  3F6A             ; --- START RELATIONAL
10190  3F6A D7            push a
10191  3F6B 11            mov a, b
10192  3F6C FD 2E 30 00   mov32 cb, $00000030
10192  3F70 00 00 
10193  3F72 B0            cmp a, b
10194  3F73 FD 80         sge ; >=
10195  3F75 E4            pop a
10196  3F76             ; --- END RELATIONAL
10197  3F76             ; --- START LOGICAL AND
10198  3F76 D7            push a
10199  3F77 11            mov a, b
10200  3F78 FA 05 00      lea d, [bp + 5] ; $c
10201  3F7B 32            mov bl, [d]
10202  3F7C A7 00         mov bh, 0
10203  3F7E 38 00 00      mov c, 0
10204  3F81             ; --- START RELATIONAL
10205  3F81 D7            push a
10206  3F82 11            mov a, b
10207  3F83 FD 2E 39 00   mov32 cb, $00000039
10207  3F87 00 00 
10208  3F89 B0            cmp a, b
10209  3F8A FD 74         sle ; <= (signed)
10210  3F8C E4            pop a
10211  3F8D             ; --- END RELATIONAL
10212  3F8D FD A7         sand a, b
10213  3F8F E4            pop a
10214  3F90             ; --- END LOGICAL AND
10215  3F90 F9            leave
10216  3F91 09            ret
10217  3F92             
10218  3F92             strcmp:
10219  3F92 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10220  3F95             ; while (*s1 && (*s1 == *s2)) { 
10221  3F95             _while180_cond:
10222  3F95                              
10223  3F95 FA 05 00      lea d, [bp + 5] ; $s1
10224  3F98 2A            mov b, [d]
10225  3F99 38 00 00      mov c, 0
10226  3F9C 74            mov d, b
10227  3F9D 32            mov bl, [d]
10228  3F9E A7 00         mov bh, 0
10229  3FA0 38 00 00      mov c, 0
10230  3FA3             ; --- START LOGICAL AND
10231  3FA3 D7            push a
10232  3FA4 11            mov a, b
10233  3FA5                              
10234  3FA5 FA 05 00      lea d, [bp + 5] ; $s1
10235  3FA8 2A            mov b, [d]
10236  3FA9 38 00 00      mov c, 0
10237  3FAC 74            mov d, b
10238  3FAD 32            mov bl, [d]
10239  3FAE A7 00         mov bh, 0
10240  3FB0 38 00 00      mov c, 0
10241  3FB3             ; --- START RELATIONAL
10242  3FB3 D7            push a
10243  3FB4 11            mov a, b
10244  3FB5 FA 07 00      lea d, [bp + 7] ; $s2
10245  3FB8 2A            mov b, [d]
10246  3FB9 38 00 00      mov c, 0
10247  3FBC 74            mov d, b
10248  3FBD 32            mov bl, [d]
10249  3FBE A7 00         mov bh, 0
10250  3FC0 38 00 00      mov c, 0
10251  3FC3 B0            cmp a, b
10252  3FC4 FD 71         seq ; ==
10253  3FC6 E4            pop a
10254  3FC7             ; --- END RELATIONAL
10255  3FC7 FD A7         sand a, b
10256  3FC9 E4            pop a
10257  3FCA             ; --- END LOGICAL AND
10258  3FCA C0 00 00      cmp b, 0
10259  3FCD C6 F3 3F      je _while180_exit
10260  3FD0             _while180_block:
10261  3FD0             ; s1++; 
10262  3FD0                              
10263  3FD0 FA 05 00      lea d, [bp + 5] ; $s1
10264  3FD3 2A            mov b, [d]
10265  3FD4 38 00 00      mov c, 0
10266  3FD7 FD 77         inc b
10267  3FD9 FA 05 00      lea d, [bp + 5] ; $s1
10268  3FDC FD 43         mov [d], b
10269  3FDE FD 7D         dec b
10270  3FE0             ; s2++; 
10271  3FE0                              
10272  3FE0 FA 07 00      lea d, [bp + 7] ; $s2
10273  3FE3 2A            mov b, [d]
10274  3FE4 38 00 00      mov c, 0
10275  3FE7 FD 77         inc b
10276  3FE9 FA 07 00      lea d, [bp + 7] ; $s2
10277  3FEC FD 43         mov [d], b
10278  3FEE FD 7D         dec b
10279  3FF0 0A 95 3F      jmp _while180_cond
10280  3FF3             _while180_exit:
10281  3FF3             ; return *s1 - *s2; 
10282  3FF3                              
10283  3FF3 FA 05 00      lea d, [bp + 5] ; $s1
10284  3FF6 2A            mov b, [d]
10285  3FF7 38 00 00      mov c, 0
10286  3FFA 74            mov d, b
10287  3FFB 32            mov bl, [d]
10288  3FFC A7 00         mov bh, 0
10289  3FFE 38 00 00      mov c, 0
10290  4001             ; --- START TERMS
10291  4001 D7            push a
10292  4002 11            mov a, b
10293  4003 FA 07 00      lea d, [bp + 7] ; $s2
10294  4006 2A            mov b, [d]
10295  4007 38 00 00      mov c, 0
10296  400A 74            mov d, b
10297  400B 32            mov bl, [d]
10298  400C A7 00         mov bh, 0
10299  400E 38 00 00      mov c, 0
10300  4011 60            sub a, b
10301  4012 27            mov b, a
10302  4013 E4            pop a
10303  4014             ; --- END TERMS
10304  4014 F9            leave
10305  4015 09            ret
10306  4016             
10307  4016             strlen:
10308  4016 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10309  4019             ; int length; 
10310  4019 52 02 00      sub sp, 2
10311  401C             ; length = 0; 
10312  401C FA FF FF      lea d, [bp + -1] ; $length
10313  401F DA            push d
10314  4020                              
10315  4020 FD 2E 00 00   mov32 cb, $00000000
10315  4024 00 00 
10316  4026 E7            pop d
10317  4027 FD 43         mov [d], b
10318  4029             ; while (str[length] != 0) { 
10319  4029             _while181_cond:
10320  4029                              
10321  4029 FA 05 00      lea d, [bp + 5] ; $str
10322  402C FD 2A         mov d, [d]
10323  402E D7            push a
10324  402F DA            push d
10325  4030                              
10326  4030 FA FF FF      lea d, [bp + -1] ; $length
10327  4033 2A            mov b, [d]
10328  4034 38 00 00      mov c, 0
10329  4037 E7            pop d
10330  4038 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
10331  403C E4            pop a
10332  403D 32            mov bl, [d]
10333  403E A7 00         mov bh, 0
10334  4040 38 00 00      mov c, 0
10335  4043             ; --- START RELATIONAL
10336  4043 D7            push a
10337  4044 11            mov a, b
10338  4045 FD 2E 00 00   mov32 cb, $00000000
10338  4049 00 00 
10339  404B B0            cmp a, b
10340  404C FD 72         sneq ; !=
10341  404E E4            pop a
10342  404F             ; --- END RELATIONAL
10343  404F C0 00 00      cmp b, 0
10344  4052 C6 68 40      je _while181_exit
10345  4055             _while181_block:
10346  4055             ; length++; 
10347  4055                              
10348  4055 FA FF FF      lea d, [bp + -1] ; $length
10349  4058 2A            mov b, [d]
10350  4059 38 00 00      mov c, 0
10351  405C 11            mov a, b
10352  405D FD 77         inc b
10353  405F FA FF FF      lea d, [bp + -1] ; $length
10354  4062 FD 43         mov [d], b
10355  4064 27            mov b, a
10356  4065 0A 29 40      jmp _while181_cond
10357  4068             _while181_exit:
10358  4068             ; return length; 
10359  4068                              
10360  4068 FA FF FF      lea d, [bp + -1] ; $length
10361  406B 2A            mov b, [d]
10362  406C 38 00 00      mov c, 0
10363  406F F9            leave
10364  4070 09            ret
10365  4071             
10366  4071             atoi:
10367  4071 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10368  4074             ; int result = 0;  // Initialize result 
10369  4074 52 02 00      sub sp, 2
10370  4077             ; --- START LOCAL VAR INITIALIZATION
10371  4077 FA FF FF      lea d, [bp + -1] ; $result
10372  407A DA            push d
10373  407B                              
10374  407B FD 2E 00 00   mov32 cb, $00000000
10374  407F 00 00 
10375  4081 E7            pop d
10376  4082 FD 43         mov [d], b
10377  4084             ; --- END LOCAL VAR INITIALIZATION
10378  4084             ; int sign = 1;    // Initialize sign as positive 
10379  4084 52 02 00      sub sp, 2
10380  4087             ; --- START LOCAL VAR INITIALIZATION
10381  4087 FA FD FF      lea d, [bp + -3] ; $sign
10382  408A DA            push d
10383  408B                              
10384  408B FD 2E 01 00   mov32 cb, $00000001
10384  408F 00 00 
10385  4091 E7            pop d
10386  4092 FD 43         mov [d], b
10387  4094             ; --- END LOCAL VAR INITIALIZATION
10388  4094             ; while (*str == ' ') str++; 
10389  4094             _while182_cond:
10390  4094                              
10391  4094 FA 05 00      lea d, [bp + 5] ; $str
10392  4097 2A            mov b, [d]
10393  4098 38 00 00      mov c, 0
10394  409B 74            mov d, b
10395  409C 32            mov bl, [d]
10396  409D A7 00         mov bh, 0
10397  409F 38 00 00      mov c, 0
10398  40A2             ; --- START RELATIONAL
10399  40A2 D7            push a
10400  40A3 11            mov a, b
10401  40A4 FD 2E 20 00   mov32 cb, $00000020
10401  40A8 00 00 
10402  40AA B0            cmp a, b
10403  40AB FD 71         seq ; ==
10404  40AD E4            pop a
10405  40AE             ; --- END RELATIONAL
10406  40AE C0 00 00      cmp b, 0
10407  40B1 C6 C7 40      je _while182_exit
10408  40B4             _while182_block:
10409  40B4             ; str++; 
10410  40B4                              
10411  40B4 FA 05 00      lea d, [bp + 5] ; $str
10412  40B7 2A            mov b, [d]
10413  40B8 38 00 00      mov c, 0
10414  40BB FD 77         inc b
10415  40BD FA 05 00      lea d, [bp + 5] ; $str
10416  40C0 FD 43         mov [d], b
10417  40C2 FD 7D         dec b
10418  40C4 0A 94 40      jmp _while182_cond
10419  40C7             _while182_exit:
10420  40C7             ; if (*str == '-' || *str == '+') { 
10421  40C7             _if183_cond:
10422  40C7                              
10423  40C7 FA 05 00      lea d, [bp + 5] ; $str
10424  40CA 2A            mov b, [d]
10425  40CB 38 00 00      mov c, 0
10426  40CE 74            mov d, b
10427  40CF 32            mov bl, [d]
10428  40D0 A7 00         mov bh, 0
10429  40D2 38 00 00      mov c, 0
10430  40D5             ; --- START RELATIONAL
10431  40D5 D7            push a
10432  40D6 11            mov a, b
10433  40D7 FD 2E 2D 00   mov32 cb, $0000002d
10433  40DB 00 00 
10434  40DD B0            cmp a, b
10435  40DE FD 71         seq ; ==
10436  40E0 E4            pop a
10437  40E1             ; --- END RELATIONAL
10438  40E1             ; --- START LOGICAL OR
10439  40E1 D7            push a
10440  40E2 11            mov a, b
10441  40E3 FA 05 00      lea d, [bp + 5] ; $str
10442  40E6 2A            mov b, [d]
10443  40E7 38 00 00      mov c, 0
10444  40EA 74            mov d, b
10445  40EB 32            mov bl, [d]
10446  40EC A7 00         mov bh, 0
10447  40EE 38 00 00      mov c, 0
10448  40F1             ; --- START RELATIONAL
10449  40F1 D7            push a
10450  40F2 11            mov a, b
10451  40F3 FD 2E 2B 00   mov32 cb, $0000002b
10451  40F7 00 00 
10452  40F9 B0            cmp a, b
10453  40FA FD 71         seq ; ==
10454  40FC E4            pop a
10455  40FD             ; --- END RELATIONAL
10456  40FD FD A8         sor a, b ; ||
10457  40FF E4            pop a
10458  4100             ; --- END LOGICAL OR
10459  4100 C0 00 00      cmp b, 0
10460  4103 C6 49 41      je _if183_exit
10461  4106             _if183_TRUE:
10462  4106             ; if (*str == '-') sign = -1; 
10463  4106             _if184_cond:
10464  4106                              
10465  4106 FA 05 00      lea d, [bp + 5] ; $str
10466  4109 2A            mov b, [d]
10467  410A 38 00 00      mov c, 0
10468  410D 74            mov d, b
10469  410E 32            mov bl, [d]
10470  410F A7 00         mov bh, 0
10471  4111 38 00 00      mov c, 0
10472  4114             ; --- START RELATIONAL
10473  4114 D7            push a
10474  4115 11            mov a, b
10475  4116 FD 2E 2D 00   mov32 cb, $0000002d
10475  411A 00 00 
10476  411C B0            cmp a, b
10477  411D FD 71         seq ; ==
10478  411F E4            pop a
10479  4120             ; --- END RELATIONAL
10480  4120 C0 00 00      cmp b, 0
10481  4123 C6 36 41      je _if184_exit
10482  4126             _if184_TRUE:
10483  4126             ; sign = -1; 
10484  4126 FA FD FF      lea d, [bp + -3] ; $sign
10485  4129 DA            push d
10486  412A                              
10487  412A FD 2E FF FF   mov32 cb, $ffffffff
10487  412E FF FF 
10488  4130 E7            pop d
10489  4131 FD 43         mov [d], b
10490  4133 0A 36 41      jmp _if184_exit
10491  4136             _if184_exit:
10492  4136             ; str++; 
10493  4136                              
10494  4136 FA 05 00      lea d, [bp + 5] ; $str
10495  4139 2A            mov b, [d]
10496  413A 38 00 00      mov c, 0
10497  413D FD 77         inc b
10498  413F FA 05 00      lea d, [bp + 5] ; $str
10499  4142 FD 43         mov [d], b
10500  4144 FD 7D         dec b
10501  4146 0A 49 41      jmp _if183_exit
10502  4149             _if183_exit:
10503  4149             ; while (*str >= '0' && *str <= '9') { 
10504  4149             _while185_cond:
10505  4149                              
10506  4149 FA 05 00      lea d, [bp + 5] ; $str
10507  414C 2A            mov b, [d]
10508  414D 38 00 00      mov c, 0
10509  4150 74            mov d, b
10510  4151 32            mov bl, [d]
10511  4152 A7 00         mov bh, 0
10512  4154 38 00 00      mov c, 0
10513  4157             ; --- START RELATIONAL
10514  4157 D7            push a
10515  4158 11            mov a, b
10516  4159 FD 2E 30 00   mov32 cb, $00000030
10516  415D 00 00 
10517  415F B0            cmp a, b
10518  4160 FD 82         sgeu ; >= (unsigned)
10519  4162 E4            pop a
10520  4163             ; --- END RELATIONAL
10521  4163             ; --- START LOGICAL AND
10522  4163 D7            push a
10523  4164 11            mov a, b
10524  4165 FA 05 00      lea d, [bp + 5] ; $str
10525  4168 2A            mov b, [d]
10526  4169 38 00 00      mov c, 0
10527  416C 74            mov d, b
10528  416D 32            mov bl, [d]
10529  416E A7 00         mov bh, 0
10530  4170 38 00 00      mov c, 0
10531  4173             ; --- START RELATIONAL
10532  4173 D7            push a
10533  4174 11            mov a, b
10534  4175 FD 2E 39 00   mov32 cb, $00000039
10534  4179 00 00 
10535  417B B0            cmp a, b
10536  417C FD 76         sleu ; <= (unsigned)
10537  417E E4            pop a
10538  417F             ; --- END RELATIONAL
10539  417F FD A7         sand a, b
10540  4181 E4            pop a
10541  4182             ; --- END LOGICAL AND
10542  4182 C0 00 00      cmp b, 0
10543  4185 C6 11 42      je _while185_exit
10544  4188             _while185_block:
10545  4188             ; result = result * 10 + (*str - '0'); 
10546  4188 FA FF FF      lea d, [bp + -1] ; $result
10547  418B DA            push d
10548  418C                              
10549  418C FA FF FF      lea d, [bp + -1] ; $result
10550  418F 2A            mov b, [d]
10551  4190 38 00 00      mov c, 0
10552  4193             ; --- START FACTORS
10553  4193 D7            push a
10554  4194 FD D8         push g
10555  4196 11            mov a, b
10556  4197 FD 7A         mov g, c
10557  4199 FD 2E 0A 00   mov32 cb, $0000000a
10557  419D 00 00 
10558  419F D7            push a     ; save left operand
10559  41A0 8E            xor a, b   ; xor sign bits
10560  41A1 FD AA         swp a      ; swap bytes
10561  41A3 83            mov cl, al ; save result of xor into 'dl'
10562  41A4 E4            pop a      ; restore left side operator
10563  41A5 DF            push cl    ; save result of xor above
10564  41A6 FD AA         swp a  
10565  41A8 93 80         test al, $80  
10566  41AA FD AA         swp a  
10567  41AC C6 B1 41      jz skip_invert_a_186  
10568  41AF FD 95         neg a 
10569  41B1             skip_invert_a_186:   
10570  41B1 FD AB         swp b
10571  41B3 FD 93 80      test bl, $80  
10572  41B6 FD AB         swp b
10573  41B8 C6 BD 41      jz skip_invert_b_186  
10574  41BB FD 97         neg b 
10575  41BD             skip_invert_b_186:   
10576  41BD AC            mul a, b ; *
10577  41BE FD 78         mov g, a
10578  41C0 11            mov a, b
10579  41C1 EA            pop bl
10580  41C2 FD 93 80      test bl, $80
10581  41C5 C6 D2 41      jz _same_signs_186
10582  41C8 2F            mov bl, al
10583  41C9 95            not a
10584  41CA FD 97         neg b
10585  41CC 5B 00 00      adc a, 0
10586  41CF FD 78         mov g, a
10587  41D1 11            mov a, b
10588  41D2             _same_signs_186:
10589  41D2 FD 38         mov c, g
10590  41D4 27            mov b, a
10591  41D5 FD F1         pop g
10592  41D7 E4            pop a
10593  41D8             ; --- END FACTORS
10594  41D8             ; --- START TERMS
10595  41D8 D7            push a
10596  41D9 FD D8         push g
10597  41DB 11            mov a, b
10598  41DC FD 7A         mov g, c
10599  41DE                              
10600  41DE FA 05 00      lea d, [bp + 5] ; $str
10601  41E1 2A            mov b, [d]
10602  41E2 38 00 00      mov c, 0
10603  41E5 74            mov d, b
10604  41E6 32            mov bl, [d]
10605  41E7 A7 00         mov bh, 0
10606  41E9 38 00 00      mov c, 0
10607  41EC             ; --- START TERMS
10608  41EC D7            push a
10609  41ED 11            mov a, b
10610  41EE FD 2E 30 00   mov32 cb, $00000030
10610  41F2 00 00 
10611  41F4 60            sub a, b
10612  41F5 27            mov b, a
10613  41F6 E4            pop a
10614  41F7             ; --- END TERMS
10615  41F7 56            add b, a
10616  41F8 FD F1         pop g
10617  41FA E4            pop a
10618  41FB             ; --- END TERMS
10619  41FB E7            pop d
10620  41FC FD 43         mov [d], b
10621  41FE             ; str++; 
10622  41FE                              
10623  41FE FA 05 00      lea d, [bp + 5] ; $str
10624  4201 2A            mov b, [d]
10625  4202 38 00 00      mov c, 0
10626  4205 FD 77         inc b
10627  4207 FA 05 00      lea d, [bp + 5] ; $str
10628  420A FD 43         mov [d], b
10629  420C FD 7D         dec b
10630  420E 0A 49 41      jmp _while185_cond
10631  4211             _while185_exit:
10632  4211             ; return sign * result; 
10633  4211                              
10634  4211 FA FD FF      lea d, [bp + -3] ; $sign
10635  4214 2A            mov b, [d]
10636  4215 38 00 00      mov c, 0
10637  4218             ; --- START FACTORS
10638  4218 D7            push a
10639  4219 FD D8         push g
10640  421B 11            mov a, b
10641  421C FD 7A         mov g, c
10642  421E FA FF FF      lea d, [bp + -1] ; $result
10643  4221 2A            mov b, [d]
10644  4222 38 00 00      mov c, 0
10645  4225 D7            push a     ; save left operand
10646  4226 8E            xor a, b   ; xor sign bits
10647  4227 FD AA         swp a      ; swap bytes
10648  4229 83            mov cl, al ; save result of xor into 'dl'
10649  422A E4            pop a      ; restore left side operator
10650  422B DF            push cl    ; save result of xor above
10651  422C FD AA         swp a  
10652  422E 93 80         test al, $80  
10653  4230 FD AA         swp a  
10654  4232 C6 37 42      jz skip_invert_a_187  
10655  4235 FD 95         neg a 
10656  4237             skip_invert_a_187:   
10657  4237 FD AB         swp b
10658  4239 FD 93 80      test bl, $80  
10659  423C FD AB         swp b
10660  423E C6 43 42      jz skip_invert_b_187  
10661  4241 FD 97         neg b 
10662  4243             skip_invert_b_187:   
10663  4243 AC            mul a, b ; *
10664  4244 FD 78         mov g, a
10665  4246 11            mov a, b
10666  4247 EA            pop bl
10667  4248 FD 93 80      test bl, $80
10668  424B C6 58 42      jz _same_signs_187
10669  424E 2F            mov bl, al
10670  424F 95            not a
10671  4250 FD 97         neg b
10672  4252 5B 00 00      adc a, 0
10673  4255 FD 78         mov g, a
10674  4257 11            mov a, b
10675  4258             _same_signs_187:
10676  4258 FD 38         mov c, g
10677  425A 27            mov b, a
10678  425B FD F1         pop g
10679  425D E4            pop a
10680  425E             ; --- END FACTORS
10681  425E F9            leave
10682  425F 09            ret
10683  4260             
10684  4260             printf:
10685  4260 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10686  4263             ; char *p, *format_p; 
10687  4263 52 02 00      sub sp, 2
10688  4266 52 02 00      sub sp, 2
10689  4269             ; format_p = format; 
10690  4269 FA FD FF      lea d, [bp + -3] ; $format_p
10691  426C DA            push d
10692  426D                              
10693  426D FA 05 00      lea d, [bp + 5] ; $format
10694  4270 2A            mov b, [d]
10695  4271 38 00 00      mov c, 0
10696  4274 E7            pop d
10697  4275 FD 43         mov [d], b
10698  4277             ; p = &format + 2; 
10699  4277 FA FF FF      lea d, [bp + -1] ; $p
10700  427A DA            push d
10701  427B                              
10702  427B FA 05 00      lea d, [bp + 5] ; $format
10703  427E 2D            mov b, d
10704  427F             ; --- START TERMS
10705  427F D7            push a
10706  4280 11            mov a, b
10707  4281 FD 2E 02 00   mov32 cb, $00000002
10707  4285 00 00 
10708  4287 56            add b, a
10709  4288 E4            pop a
10710  4289             ; --- END TERMS
10711  4289 E7            pop d
10712  428A FD 43         mov [d], b
10713  428C             ; for(;;){ 
10714  428C             _for188_init:
10715  428C             _for188_cond:
10716  428C             _for188_block:
10717  428C             ; if(!*format_p) break; 
10718  428C             _if189_cond:
10719  428C                              
10720  428C FA FD FF      lea d, [bp + -3] ; $format_p
10721  428F 2A            mov b, [d]
10722  4290 38 00 00      mov c, 0
10723  4293 74            mov d, b
10724  4294 32            mov bl, [d]
10725  4295 A7 00         mov bh, 0
10726  4297 38 00 00      mov c, 0
10727  429A C0 00 00      cmp b, 0
10728  429D FD 71         seq ; !
10729  429F C0 00 00      cmp b, 0
10730  42A2 C6 AB 42      je _if189_else
10731  42A5             _if189_TRUE:
10732  42A5             ; break; 
10733  42A5 0A 5B 45      jmp _for188_exit ; for break
10734  42A8 0A 58 45      jmp _if189_exit
10735  42AB             _if189_else:
10736  42AB             ; if(*format_p == '%'){ 
10737  42AB             _if190_cond:
10738  42AB                              
10739  42AB FA FD FF      lea d, [bp + -3] ; $format_p
10740  42AE 2A            mov b, [d]
10741  42AF 38 00 00      mov c, 0
10742  42B2 74            mov d, b
10743  42B3 32            mov bl, [d]
10744  42B4 A7 00         mov bh, 0
10745  42B6 38 00 00      mov c, 0
10746  42B9             ; --- START RELATIONAL
10747  42B9 D7            push a
10748  42BA 11            mov a, b
10749  42BB FD 2E 25 00   mov32 cb, $00000025
10749  42BF 00 00 
10750  42C1 B0            cmp a, b
10751  42C2 FD 71         seq ; ==
10752  42C4 E4            pop a
10753  42C5             ; --- END RELATIONAL
10754  42C5 C0 00 00      cmp b, 0
10755  42C8 C6 33 45      je _if190_else
10756  42CB             _if190_TRUE:
10757  42CB             ; format_p++; 
10758  42CB                              
10759  42CB FA FD FF      lea d, [bp + -3] ; $format_p
10760  42CE 2A            mov b, [d]
10761  42CF 38 00 00      mov c, 0
10762  42D2 FD 77         inc b
10763  42D4 FA FD FF      lea d, [bp + -3] ; $format_p
10764  42D7 FD 43         mov [d], b
10765  42D9 FD 7D         dec b
10766  42DB             ; switch(*format_p){ 
10767  42DB             _switch191_expr:
10768  42DB                              
10769  42DB FA FD FF      lea d, [bp + -3] ; $format_p
10770  42DE 2A            mov b, [d]
10771  42DF 38 00 00      mov c, 0
10772  42E2 74            mov d, b
10773  42E3 32            mov bl, [d]
10774  42E4 A7 00         mov bh, 0
10775  42E6 38 00 00      mov c, 0
10776  42E9             _switch191_comparisons:
10777  42E9 C1 6C         cmp bl, $6c
10778  42EB C6 17 43      je _switch191_case0
10779  42EE C1 4C         cmp bl, $4c
10780  42F0 C6 17 43      je _switch191_case1
10781  42F3 C1 64         cmp bl, $64
10782  42F5 C6 27 44      je _switch191_case2
10783  42F8 C1 69         cmp bl, $69
10784  42FA C6 27 44      je _switch191_case3
10785  42FD C1 75         cmp bl, $75
10786  42FF C6 57 44      je _switch191_case4
10787  4302 C1 78         cmp bl, $78
10788  4304 C6 87 44      je _switch191_case5
10789  4307 C1 63         cmp bl, $63
10790  4309 C6 B7 44      je _switch191_case6
10791  430C C1 73         cmp bl, $73
10792  430E C6 E7 44      je _switch191_case7
10793  4311 0A 14 45      jmp _switch191_default
10794  4314 0A 20 45      jmp _switch191_exit
10795  4317             _switch191_case0:
10796  4317             _switch191_case1:
10797  4317             ; format_p++; 
10798  4317                              
10799  4317 FA FD FF      lea d, [bp + -3] ; $format_p
10800  431A 2A            mov b, [d]
10801  431B 38 00 00      mov c, 0
10802  431E FD 77         inc b
10803  4320 FA FD FF      lea d, [bp + -3] ; $format_p
10804  4323 FD 43         mov [d], b
10805  4325 FD 7D         dec b
10806  4327             ; if(*format_p == 'd' || *format_p == 'i') 
10807  4327             _if192_cond:
10808  4327                              
10809  4327 FA FD FF      lea d, [bp + -3] ; $format_p
10810  432A 2A            mov b, [d]
10811  432B 38 00 00      mov c, 0
10812  432E 74            mov d, b
10813  432F 32            mov bl, [d]
10814  4330 A7 00         mov bh, 0
10815  4332 38 00 00      mov c, 0
10816  4335             ; --- START RELATIONAL
10817  4335 D7            push a
10818  4336 11            mov a, b
10819  4337 FD 2E 64 00   mov32 cb, $00000064
10819  433B 00 00 
10820  433D B0            cmp a, b
10821  433E FD 71         seq ; ==
10822  4340 E4            pop a
10823  4341             ; --- END RELATIONAL
10824  4341             ; --- START LOGICAL OR
10825  4341 D7            push a
10826  4342 11            mov a, b
10827  4343 FA FD FF      lea d, [bp + -3] ; $format_p
10828  4346 2A            mov b, [d]
10829  4347 38 00 00      mov c, 0
10830  434A 74            mov d, b
10831  434B 32            mov bl, [d]
10832  434C A7 00         mov bh, 0
10833  434E 38 00 00      mov c, 0
10834  4351             ; --- START RELATIONAL
10835  4351 D7            push a
10836  4352 11            mov a, b
10837  4353 FD 2E 69 00   mov32 cb, $00000069
10837  4357 00 00 
10838  4359 B0            cmp a, b
10839  435A FD 71         seq ; ==
10840  435C E4            pop a
10841  435D             ; --- END RELATIONAL
10842  435D FD A8         sor a, b ; ||
10843  435F E4            pop a
10844  4360             ; --- END LOGICAL OR
10845  4360 C0 00 00      cmp b, 0
10846  4363 C6 84 43      je _if192_else
10847  4366             _if192_TRUE:
10848  4366             ; print_signed_long(*(long *)p); 
10849  4366                              
10850  4366             ; --- START FUNCTION CALL
10851  4366                              
10852  4366 FA FF FF      lea d, [bp + -1] ; $p
10853  4369 2A            mov b, [d]
10854  436A 38 00 00      mov c, 0
10855  436D 74            mov d, b
10856  436E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10857  4371 FD 39         mov c, b ; And place it into C
10858  4373 2A            mov b, [d] ; Lower Word in B
10859  4374 12            mov a, c
10860  4375 FD AA         swp a
10861  4377 D7            push a
10862  4378 FD AB         swp b
10863  437A D8            push b
10864  437B 07 5D 45      call print_signed_long
10865  437E 51 04 00      add sp, 4
10866  4381             ; --- END FUNCTION CALL
10867  4381 0A 0C 44      jmp _if192_exit
10868  4384             _if192_else:
10869  4384             ; if(*format_p == 'u') 
10870  4384             _if193_cond:
10871  4384                              
10872  4384 FA FD FF      lea d, [bp + -3] ; $format_p
10873  4387 2A            mov b, [d]
10874  4388 38 00 00      mov c, 0
10875  438B 74            mov d, b
10876  438C 32            mov bl, [d]
10877  438D A7 00         mov bh, 0
10878  438F 38 00 00      mov c, 0
10879  4392             ; --- START RELATIONAL
10880  4392 D7            push a
10881  4393 11            mov a, b
10882  4394 FD 2E 75 00   mov32 cb, $00000075
10882  4398 00 00 
10883  439A B0            cmp a, b
10884  439B FD 71         seq ; ==
10885  439D E4            pop a
10886  439E             ; --- END RELATIONAL
10887  439E C0 00 00      cmp b, 0
10888  43A1 C6 C2 43      je _if193_else
10889  43A4             _if193_TRUE:
10890  43A4             ; print_unsigned_long(*(unsigned long *)p); 
10891  43A4                              
10892  43A4             ; --- START FUNCTION CALL
10893  43A4                              
10894  43A4 FA FF FF      lea d, [bp + -1] ; $p
10895  43A7 2A            mov b, [d]
10896  43A8 38 00 00      mov c, 0
10897  43AB 74            mov d, b
10898  43AC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10899  43AF FD 39         mov c, b ; And place it into C
10900  43B1 2A            mov b, [d] ; Lower Word in B
10901  43B2 12            mov a, c
10902  43B3 FD AA         swp a
10903  43B5 D7            push a
10904  43B6 FD AB         swp b
10905  43B8 D8            push b
10906  43B9 07 F0 46      call print_unsigned_long
10907  43BC 51 04 00      add sp, 4
10908  43BF             ; --- END FUNCTION CALL
10909  43BF 0A 0C 44      jmp _if193_exit
10910  43C2             _if193_else:
10911  43C2             ; if(*format_p == 'x') 
10912  43C2             _if194_cond:
10913  43C2                              
10914  43C2 FA FD FF      lea d, [bp + -3] ; $format_p
10915  43C5 2A            mov b, [d]
10916  43C6 38 00 00      mov c, 0
10917  43C9 74            mov d, b
10918  43CA 32            mov bl, [d]
10919  43CB A7 00         mov bh, 0
10920  43CD 38 00 00      mov c, 0
10921  43D0             ; --- START RELATIONAL
10922  43D0 D7            push a
10923  43D1 11            mov a, b
10924  43D2 FD 2E 78 00   mov32 cb, $00000078
10924  43D6 00 00 
10925  43D8 B0            cmp a, b
10926  43D9 FD 71         seq ; ==
10927  43DB E4            pop a
10928  43DC             ; --- END RELATIONAL
10929  43DC C0 00 00      cmp b, 0
10930  43DF C6 00 44      je _if194_else
10931  43E2             _if194_TRUE:
10932  43E2             ; printx32(*(long int *)p); 
10933  43E2                              
10934  43E2             ; --- START FUNCTION CALL
10935  43E2                              
10936  43E2 FA FF FF      lea d, [bp + -1] ; $p
10937  43E5 2A            mov b, [d]
10938  43E6 38 00 00      mov c, 0
10939  43E9 74            mov d, b
10940  43EA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10941  43ED FD 39         mov c, b ; And place it into C
10942  43EF 2A            mov b, [d] ; Lower Word in B
10943  43F0 12            mov a, c
10944  43F1 FD AA         swp a
10945  43F3 D7            push a
10946  43F4 FD AB         swp b
10947  43F6 D8            push b
10948  43F7 07 24 48      call printx32
10949  43FA 51 04 00      add sp, 4
10950  43FD             ; --- END FUNCTION CALL
10951  43FD 0A 0C 44      jmp _if194_exit
10952  4400             _if194_else:
10953  4400             ; err("Unexpected format in printf."); 
10954  4400                              
10955  4400             ; --- START FUNCTION CALL
10956  4400                              
10957  4400 26 7F 53      mov b, _s82 ; "Unexpected format in printf."
10958  4403 FD AB         swp b
10959  4405 D8            push b
10960  4406 07 84 48      call err
10961  4409 51 02 00      add sp, 2
10962  440C             ; --- END FUNCTION CALL
10963  440C             _if194_exit:
10964  440C             _if193_exit:
10965  440C             _if192_exit:
10966  440C             ; p = p + 4; 
10967  440C FA FF FF      lea d, [bp + -1] ; $p
10968  440F DA            push d
10969  4410                              
10970  4410 FA FF FF      lea d, [bp + -1] ; $p
10971  4413 2A            mov b, [d]
10972  4414 38 00 00      mov c, 0
10973  4417             ; --- START TERMS
10974  4417 D7            push a
10975  4418 11            mov a, b
10976  4419 FD 2E 04 00   mov32 cb, $00000004
10976  441D 00 00 
10977  441F 56            add b, a
10978  4420 E4            pop a
10979  4421             ; --- END TERMS
10980  4421 E7            pop d
10981  4422 FD 43         mov [d], b
10982  4424             ; break; 
10983  4424 0A 20 45      jmp _switch191_exit ; case break
10984  4427             _switch191_case2:
10985  4427             _switch191_case3:
10986  4427             ; print_signed(*(int*)p); 
10987  4427                              
10988  4427             ; --- START FUNCTION CALL
10989  4427                              
10990  4427 FA FF FF      lea d, [bp + -1] ; $p
10991  442A 2A            mov b, [d]
10992  442B 38 00 00      mov c, 0
10993  442E 74            mov d, b
10994  442F 2A            mov b, [d]
10995  4430 38 00 00      mov c, 0
10996  4433 FD AB         swp b
10997  4435 D8            push b
10998  4436 07 99 48      call print_signed
10999  4439 51 02 00      add sp, 2
11000  443C             ; --- END FUNCTION CALL
11001  443C             ; p = p + 2; 
11002  443C FA FF FF      lea d, [bp + -1] ; $p
11003  443F DA            push d
11004  4440                              
11005  4440 FA FF FF      lea d, [bp + -1] ; $p
11006  4443 2A            mov b, [d]
11007  4444 38 00 00      mov c, 0
11008  4447             ; --- START TERMS
11009  4447 D7            push a
11010  4448 11            mov a, b
11011  4449 FD 2E 02 00   mov32 cb, $00000002
11011  444D 00 00 
11012  444F 56            add b, a
11013  4450 E4            pop a
11014  4451             ; --- END TERMS
11015  4451 E7            pop d
11016  4452 FD 43         mov [d], b
11017  4454             ; break; 
11018  4454 0A 20 45      jmp _switch191_exit ; case break
11019  4457             _switch191_case4:
11020  4457             ; print_unsigned(*(unsigned int*)p); 
11021  4457                              
11022  4457             ; --- START FUNCTION CALL
11023  4457                              
11024  4457 FA FF FF      lea d, [bp + -1] ; $p
11025  445A 2A            mov b, [d]
11026  445B 38 00 00      mov c, 0
11027  445E 74            mov d, b
11028  445F 2A            mov b, [d]
11029  4460 38 00 00      mov c, 0
11030  4463 FD AB         swp b
11031  4465 D8            push b
11032  4466 07 EA 49      call print_unsigned
11033  4469 51 02 00      add sp, 2
11034  446C             ; --- END FUNCTION CALL
11035  446C             ; p = p + 2; 
11036  446C FA FF FF      lea d, [bp + -1] ; $p
11037  446F DA            push d
11038  4470                              
11039  4470 FA FF FF      lea d, [bp + -1] ; $p
11040  4473 2A            mov b, [d]
11041  4474 38 00 00      mov c, 0
11042  4477             ; --- START TERMS
11043  4477 D7            push a
11044  4478 11            mov a, b
11045  4479 FD 2E 02 00   mov32 cb, $00000002
11045  447D 00 00 
11046  447F 56            add b, a
11047  4480 E4            pop a
11048  4481             ; --- END TERMS
11049  4481 E7            pop d
11050  4482 FD 43         mov [d], b
11051  4484             ; break; 
11052  4484 0A 20 45      jmp _switch191_exit ; case break
11053  4487             _switch191_case5:
11054  4487             ; printx16(*(int*)p); 
11055  4487                              
11056  4487             ; --- START FUNCTION CALL
11057  4487                              
11058  4487 FA FF FF      lea d, [bp + -1] ; $p
11059  448A 2A            mov b, [d]
11060  448B 38 00 00      mov c, 0
11061  448E 74            mov d, b
11062  448F 2A            mov b, [d]
11063  4490 38 00 00      mov c, 0
11064  4493 FD AB         swp b
11065  4495 D8            push b
11066  4496 07 02 4B      call printx16
11067  4499 51 02 00      add sp, 2
11068  449C             ; --- END FUNCTION CALL
11069  449C             ; p = p + 2; 
11070  449C FA FF FF      lea d, [bp + -1] ; $p
11071  449F DA            push d
11072  44A0                              
11073  44A0 FA FF FF      lea d, [bp + -1] ; $p
11074  44A3 2A            mov b, [d]
11075  44A4 38 00 00      mov c, 0
11076  44A7             ; --- START TERMS
11077  44A7 D7            push a
11078  44A8 11            mov a, b
11079  44A9 FD 2E 02 00   mov32 cb, $00000002
11079  44AD 00 00 
11080  44AF 56            add b, a
11081  44B0 E4            pop a
11082  44B1             ; --- END TERMS
11083  44B1 E7            pop d
11084  44B2 FD 43         mov [d], b
11085  44B4             ; break; 
11086  44B4 0A 20 45      jmp _switch191_exit ; case break
11087  44B7             _switch191_case6:
11088  44B7             ; putchar(*(char*)p); 
11089  44B7                              
11090  44B7             ; --- START FUNCTION CALL
11091  44B7                              
11092  44B7 FA FF FF      lea d, [bp + -1] ; $p
11093  44BA 2A            mov b, [d]
11094  44BB 38 00 00      mov c, 0
11095  44BE 74            mov d, b
11096  44BF 32            mov bl, [d]
11097  44C0 A7 00         mov bh, 0
11098  44C2 38 00 00      mov c, 0
11099  44C5 DD            push bl
11100  44C6 07 E2 46      call putchar
11101  44C9 51 01 00      add sp, 1
11102  44CC             ; --- END FUNCTION CALL
11103  44CC             ; p = p + 1; 
11104  44CC FA FF FF      lea d, [bp + -1] ; $p
11105  44CF DA            push d
11106  44D0                              
11107  44D0 FA FF FF      lea d, [bp + -1] ; $p
11108  44D3 2A            mov b, [d]
11109  44D4 38 00 00      mov c, 0
11110  44D7             ; --- START TERMS
11111  44D7 D7            push a
11112  44D8 11            mov a, b
11113  44D9 FD 2E 01 00   mov32 cb, $00000001
11113  44DD 00 00 
11114  44DF 56            add b, a
11115  44E0 E4            pop a
11116  44E1             ; --- END TERMS
11117  44E1 E7            pop d
11118  44E2 FD 43         mov [d], b
11119  44E4             ; break; 
11120  44E4 0A 20 45      jmp _switch191_exit ; case break
11121  44E7             _switch191_case7:
11122  44E7             ; print(*(char**)p); 
11123  44E7                              
11124  44E7             ; --- START FUNCTION CALL
11125  44E7                              
11126  44E7 FA FF FF      lea d, [bp + -1] ; $p
11127  44EA 2A            mov b, [d]
11128  44EB 38 00 00      mov c, 0
11129  44EE 74            mov d, b
11130  44EF 2A            mov b, [d]
11131  44F0 FD AB         swp b
11132  44F2 D8            push b
11133  44F3 07 30 3E      call print
11134  44F6 51 02 00      add sp, 2
11135  44F9             ; --- END FUNCTION CALL
11136  44F9             ; p = p + 2; 
11137  44F9 FA FF FF      lea d, [bp + -1] ; $p
11138  44FC DA            push d
11139  44FD                              
11140  44FD FA FF FF      lea d, [bp + -1] ; $p
11141  4500 2A            mov b, [d]
11142  4501 38 00 00      mov c, 0
11143  4504             ; --- START TERMS
11144  4504 D7            push a
11145  4505 11            mov a, b
11146  4506 FD 2E 02 00   mov32 cb, $00000002
11146  450A 00 00 
11147  450C 56            add b, a
11148  450D E4            pop a
11149  450E             ; --- END TERMS
11150  450E E7            pop d
11151  450F FD 43         mov [d], b
11152  4511             ; break; 
11153  4511 0A 20 45      jmp _switch191_exit ; case break
11154  4514             _switch191_default:
11155  4514             ; print("Error: Unknown argument type.\n"); 
11156  4514                              
11157  4514             ; --- START FUNCTION CALL
11158  4514                              
11159  4514 26 9C 53      mov b, _s83 ; "Error: Unknown argument type.\n"
11160  4517 FD AB         swp b
11161  4519 D8            push b
11162  451A 07 30 3E      call print
11163  451D 51 02 00      add sp, 2
11164  4520             ; --- END FUNCTION CALL
11165  4520             _switch191_exit:
11166  4520             ; format_p++; 
11167  4520                              
11168  4520 FA FD FF      lea d, [bp + -3] ; $format_p
11169  4523 2A            mov b, [d]
11170  4524 38 00 00      mov c, 0
11171  4527 FD 77         inc b
11172  4529 FA FD FF      lea d, [bp + -3] ; $format_p
11173  452C FD 43         mov [d], b
11174  452E FD 7D         dec b
11175  4530 0A 58 45      jmp _if190_exit
11176  4533             _if190_else:
11177  4533             ; putchar(*format_p); 
11178  4533                              
11179  4533             ; --- START FUNCTION CALL
11180  4533                              
11181  4533 FA FD FF      lea d, [bp + -3] ; $format_p
11182  4536 2A            mov b, [d]
11183  4537 38 00 00      mov c, 0
11184  453A 74            mov d, b
11185  453B 32            mov bl, [d]
11186  453C A7 00         mov bh, 0
11187  453E 38 00 00      mov c, 0
11188  4541 DD            push bl
11189  4542 07 E2 46      call putchar
11190  4545 51 01 00      add sp, 1
11191  4548             ; --- END FUNCTION CALL
11192  4548             ; format_p++; 
11193  4548                              
11194  4548 FA FD FF      lea d, [bp + -3] ; $format_p
11195  454B 2A            mov b, [d]
11196  454C 38 00 00      mov c, 0
11197  454F FD 77         inc b
11198  4551 FA FD FF      lea d, [bp + -3] ; $format_p
11199  4554 FD 43         mov [d], b
11200  4556 FD 7D         dec b
11201  4558             _if190_exit:
11202  4558             _if189_exit:
11203  4558             _for188_update:
11204  4558 0A 8C 42      jmp _for188_cond
11205  455B             _for188_exit:
11206  455B F9            leave
11207  455C 09            ret
11208  455D             
11209  455D             print_signed_long:
11210  455D F8 00 00      enter 0 ; (push bp; mov bp, sp)
11211  4560             ; char digits[10]; 
11212  4560 52 0A 00      sub sp, 10
11213  4563             ; int i = 0; 
11214  4563 52 02 00      sub sp, 2
11215  4566             ; --- START LOCAL VAR INITIALIZATION
11216  4566 FA F5 FF      lea d, [bp + -11] ; $i
11217  4569 DA            push d
11218  456A                              
11219  456A FD 2E 00 00   mov32 cb, $00000000
11219  456E 00 00 
11220  4570 E7            pop d
11221  4571 FD 43         mov [d], b
11222  4573             ; --- END LOCAL VAR INITIALIZATION
11223  4573             ; if (num < 0) { 
11224  4573             _if195_cond:
11225  4573                              
11226  4573 FA 05 00      lea d, [bp + 5] ; $num
11227  4576 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11228  4579 FD 39         mov c, b ; And place it into C
11229  457B 2A            mov b, [d] ; Lower Word in B
11230  457C             ; --- START RELATIONAL
11231  457C D7            push a
11232  457D FD D8         push g
11233  457F 11            mov a, b
11234  4580 FD 7A         mov g, c
11235  4582 FD 2E 00 00   mov32 cb, $00000000
11235  4586 00 00 
11236  4588 FD AF         cmp32 ga, cb
11237  458A FD 73         slt ; <
11238  458C FD F1         pop g
11239  458E E4            pop a
11240  458F             ; --- END RELATIONAL
11241  458F C0 00 00      cmp b, 0
11242  4592 C6 C4 45      je _if195_else
11243  4595             _if195_TRUE:
11244  4595             ; putchar('-'); 
11245  4595                              
11246  4595             ; --- START FUNCTION CALL
11247  4595                              
11248  4595 FD 2E 2D 00   mov32 cb, $0000002d
11248  4599 00 00 
11249  459B DD            push bl
11250  459C 07 E2 46      call putchar
11251  459F 51 01 00      add sp, 1
11252  45A2             ; --- END FUNCTION CALL
11253  45A2             ; num = -num; 
11254  45A2 FA 05 00      lea d, [bp + 5] ; $num
11255  45A5 DA            push d
11256  45A6                              
11257  45A6 FA 05 00      lea d, [bp + 5] ; $num
11258  45A9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11259  45AC FD 39         mov c, b ; And place it into C
11260  45AE 2A            mov b, [d] ; Lower Word in B
11261  45AF 12            mov a, c
11262  45B0 95            not a
11263  45B1 97            not b
11264  45B2 55 01 00      add b, 1
11265  45B5 5B 00 00      adc a, 0
11266  45B8 39            mov c, a
11267  45B9 E7            pop d
11268  45BA FD 43         mov [d], b
11269  45BC 28            mov b, c
11270  45BD FD 44 02 00   mov [d + 2], b
11271  45C1 0A F8 45      jmp _if195_exit
11272  45C4             _if195_else:
11273  45C4             ; if (num == 0) { 
11274  45C4             _if196_cond:
11275  45C4                              
11276  45C4 FA 05 00      lea d, [bp + 5] ; $num
11277  45C7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11278  45CA FD 39         mov c, b ; And place it into C
11279  45CC 2A            mov b, [d] ; Lower Word in B
11280  45CD             ; --- START RELATIONAL
11281  45CD D7            push a
11282  45CE FD D8         push g
11283  45D0 11            mov a, b
11284  45D1 FD 7A         mov g, c
11285  45D3 FD 2E 00 00   mov32 cb, $00000000
11285  45D7 00 00 
11286  45D9 FD AF         cmp32 ga, cb
11287  45DB FD 71         seq ; ==
11288  45DD FD F1         pop g
11289  45DF E4            pop a
11290  45E0             ; --- END RELATIONAL
11291  45E0 C0 00 00      cmp b, 0
11292  45E3 C6 F8 45      je _if196_exit
11293  45E6             _if196_TRUE:
11294  45E6             ; putchar('0'); 
11295  45E6                              
11296  45E6             ; --- START FUNCTION CALL
11297  45E6                              
11298  45E6 FD 2E 30 00   mov32 cb, $00000030
11298  45EA 00 00 
11299  45EC DD            push bl
11300  45ED 07 E2 46      call putchar
11301  45F0 51 01 00      add sp, 1
11302  45F3             ; --- END FUNCTION CALL
11303  45F3             ; return; 
11304  45F3 F9            leave
11305  45F4 09            ret
11306  45F5 0A F8 45      jmp _if196_exit
11307  45F8             _if196_exit:
11308  45F8             _if195_exit:
11309  45F8             ; while (num > 0) { 
11310  45F8             _while197_cond:
11311  45F8                              
11312  45F8 FA 05 00      lea d, [bp + 5] ; $num
11313  45FB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11314  45FE FD 39         mov c, b ; And place it into C
11315  4600 2A            mov b, [d] ; Lower Word in B
11316  4601             ; --- START RELATIONAL
11317  4601 D7            push a
11318  4602 FD D8         push g
11319  4604 11            mov a, b
11320  4605 FD 7A         mov g, c
11321  4607 FD 2E 00 00   mov32 cb, $00000000
11321  460B 00 00 
11322  460D FD AF         cmp32 ga, cb
11323  460F FD 7F         sgt
11324  4611 FD F1         pop g
11325  4613 E4            pop a
11326  4614             ; --- END RELATIONAL
11327  4614 C0 00 00      cmp b, 0
11328  4617 C6 98 46      je _while197_exit
11329  461A             _while197_block:
11330  461A             ; digits[i] = '0' + (num % 10); 
11331  461A FA F7 FF      lea d, [bp + -9] ; $digits
11332  461D D7            push a
11333  461E DA            push d
11334  461F                              
11335  461F FA F5 FF      lea d, [bp + -11] ; $i
11336  4622 2A            mov b, [d]
11337  4623 38 00 00      mov c, 0
11338  4626 E7            pop d
11339  4627 5A            add d, b
11340  4628 E4            pop a
11341  4629 DA            push d
11342  462A                              
11343  462A FD 2E 30 00   mov32 cb, $00000030
11343  462E 00 00 
11344  4630             ; --- START TERMS
11345  4630 D7            push a
11346  4631 11            mov a, b
11347  4632                              
11348  4632 FA 05 00      lea d, [bp + 5] ; $num
11349  4635 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11350  4638 FD 39         mov c, b ; And place it into C
11351  463A 2A            mov b, [d] ; Lower Word in B
11352  463B             ; --- START FACTORS
11353  463B D7            push a
11354  463C FD D8         push g
11355  463E 11            mov a, b
11356  463F FD 7A         mov g, c
11357  4641 FD 2E 0A 00   mov32 cb, $0000000a
11357  4645 00 00 
11358  4647 FD D8         push g ; save 'g' as the div instruction uses it
11359  4649 AE            div a, b ; %, a: quotient, b: remainder
11360  464A 11            mov a, b
11361  464B FD F1         pop g
11362  464D FD 38         mov c, g
11363  464F 27            mov b, a
11364  4650 FD F1         pop g
11365  4652 E4            pop a
11366  4653             ; --- END FACTORS
11367  4653 FD 15         add32 cb, ga
11368  4655 E4            pop a
11369  4656             ; --- END TERMS
11370  4656 E7            pop d
11371  4657 FD 3E         mov [d], bl
11372  4659             ; num = num / 10; 
11373  4659 FA 05 00      lea d, [bp + 5] ; $num
11374  465C DA            push d
11375  465D                              
11376  465D FA 05 00      lea d, [bp + 5] ; $num
11377  4660 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11378  4663 FD 39         mov c, b ; And place it into C
11379  4665 2A            mov b, [d] ; Lower Word in B
11380  4666             ; --- START FACTORS
11381  4666 D7            push a
11382  4667 FD D8         push g
11383  4669 11            mov a, b
11384  466A FD 7A         mov g, c
11385  466C FD 2E 0A 00   mov32 cb, $0000000a
11385  4670 00 00 
11386  4672 FD D8         push g ; save 'g' as the div instruction uses it
11387  4674 AE            div a, b ; /, a: quotient, b: remainder
11388  4675 FD F1         pop g
11389  4677 FD 38         mov c, g
11390  4679 27            mov b, a
11391  467A FD F1         pop g
11392  467C E4            pop a
11393  467D             ; --- END FACTORS
11394  467D E7            pop d
11395  467E FD 43         mov [d], b
11396  4680 28            mov b, c
11397  4681 FD 44 02 00   mov [d + 2], b
11398  4685             ; i++; 
11399  4685                              
11400  4685 FA F5 FF      lea d, [bp + -11] ; $i
11401  4688 2A            mov b, [d]
11402  4689 38 00 00      mov c, 0
11403  468C 11            mov a, b
11404  468D FD 77         inc b
11405  468F FA F5 FF      lea d, [bp + -11] ; $i
11406  4692 FD 43         mov [d], b
11407  4694 27            mov b, a
11408  4695 0A F8 45      jmp _while197_cond
11409  4698             _while197_exit:
11410  4698             ; while (i > 0) { 
11411  4698             _while200_cond:
11412  4698                              
11413  4698 FA F5 FF      lea d, [bp + -11] ; $i
11414  469B 2A            mov b, [d]
11415  469C 38 00 00      mov c, 0
11416  469F             ; --- START RELATIONAL
11417  469F D7            push a
11418  46A0 11            mov a, b
11419  46A1 FD 2E 00 00   mov32 cb, $00000000
11419  46A5 00 00 
11420  46A7 B0            cmp a, b
11421  46A8 FD 7F         sgt ; >
11422  46AA E4            pop a
11423  46AB             ; --- END RELATIONAL
11424  46AB C0 00 00      cmp b, 0
11425  46AE C6 E0 46      je _while200_exit
11426  46B1             _while200_block:
11427  46B1             ; i--; 
11428  46B1                              
11429  46B1 FA F5 FF      lea d, [bp + -11] ; $i
11430  46B4 2A            mov b, [d]
11431  46B5 38 00 00      mov c, 0
11432  46B8 11            mov a, b
11433  46B9 FD 7D         dec b
11434  46BB FA F5 FF      lea d, [bp + -11] ; $i
11435  46BE FD 43         mov [d], b
11436  46C0 27            mov b, a
11437  46C1             ; putchar(digits[i]); 
11438  46C1                              
11439  46C1             ; --- START FUNCTION CALL
11440  46C1                              
11441  46C1 FA F7 FF      lea d, [bp + -9] ; $digits
11442  46C4 D7            push a
11443  46C5 DA            push d
11444  46C6                              
11445  46C6 FA F5 FF      lea d, [bp + -11] ; $i
11446  46C9 2A            mov b, [d]
11447  46CA 38 00 00      mov c, 0
11448  46CD E7            pop d
11449  46CE 5A            add d, b
11450  46CF E4            pop a
11451  46D0 32            mov bl, [d]
11452  46D1 A7 00         mov bh, 0
11453  46D3 38 00 00      mov c, 0
11454  46D6 DD            push bl
11455  46D7 07 E2 46      call putchar
11456  46DA 51 01 00      add sp, 1
11457  46DD             ; --- END FUNCTION CALL
11458  46DD 0A 98 46      jmp _while200_cond
11459  46E0             _while200_exit:
11460  46E0 F9            leave
11461  46E1 09            ret
11462  46E2             
11463  46E2             putchar:
11464  46E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11465  46E5             ; --- BEGIN INLINE ASM SEGMENT
11466  46E5 FA 05 00      lea d, [bp + 5] ; $c
11467  46E8 1E            mov al, [d]
11468  46E9 23            mov ah, al
11469  46EA 19 00         mov al, 0
11470  46EC 05 03         syscall sys_io      ; char in AH
11471  46EE             ; --- END INLINE ASM SEGMENT
11472  46EE F9            leave
11473  46EF 09            ret
11474  46F0             
11475  46F0             print_unsigned_long:
11476  46F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11477  46F3             ; char digits[10]; 
11478  46F3 52 0A 00      sub sp, 10
11479  46F6             ; int i; 
11480  46F6 52 02 00      sub sp, 2
11481  46F9             ; i = 0; 
11482  46F9 FA F5 FF      lea d, [bp + -11] ; $i
11483  46FC DA            push d
11484  46FD                              
11485  46FD FD 2E 00 00   mov32 cb, $00000000
11485  4701 00 00 
11486  4703 E7            pop d
11487  4704 FD 43         mov [d], b
11488  4706             ; if(num == 0){ 
11489  4706             _if201_cond:
11490  4706                              
11491  4706 FA 05 00      lea d, [bp + 5] ; $num
11492  4709 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11493  470C FD 39         mov c, b ; And place it into C
11494  470E 2A            mov b, [d] ; Lower Word in B
11495  470F             ; --- START RELATIONAL
11496  470F D7            push a
11497  4710 FD D8         push g
11498  4712 11            mov a, b
11499  4713 FD 7A         mov g, c
11500  4715 FD 2E 00 00   mov32 cb, $00000000
11500  4719 00 00 
11501  471B FD AF         cmp32 ga, cb
11502  471D FD 71         seq ; ==
11503  471F FD F1         pop g
11504  4721 E4            pop a
11505  4722             ; --- END RELATIONAL
11506  4722 C0 00 00      cmp b, 0
11507  4725 C6 3A 47      je _if201_exit
11508  4728             _if201_TRUE:
11509  4728             ; putchar('0'); 
11510  4728                              
11511  4728             ; --- START FUNCTION CALL
11512  4728                              
11513  4728 FD 2E 30 00   mov32 cb, $00000030
11513  472C 00 00 
11514  472E DD            push bl
11515  472F 07 E2 46      call putchar
11516  4732 51 01 00      add sp, 1
11517  4735             ; --- END FUNCTION CALL
11518  4735             ; return; 
11519  4735 F9            leave
11520  4736 09            ret
11521  4737 0A 3A 47      jmp _if201_exit
11522  473A             _if201_exit:
11523  473A             ; while (num > 0) { 
11524  473A             _while202_cond:
11525  473A                              
11526  473A FA 05 00      lea d, [bp + 5] ; $num
11527  473D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11528  4740 FD 39         mov c, b ; And place it into C
11529  4742 2A            mov b, [d] ; Lower Word in B
11530  4743             ; --- START RELATIONAL
11531  4743 D7            push a
11532  4744 FD D8         push g
11533  4746 11            mov a, b
11534  4747 FD 7A         mov g, c
11535  4749 FD 2E 00 00   mov32 cb, $00000000
11535  474D 00 00 
11536  474F FD AF         cmp32 ga, cb
11537  4751 FD 81         sgu
11538  4753 FD F1         pop g
11539  4755 E4            pop a
11540  4756             ; --- END RELATIONAL
11541  4756 C0 00 00      cmp b, 0
11542  4759 C6 DA 47      je _while202_exit
11543  475C             _while202_block:
11544  475C             ; digits[i] = '0' + (num % 10); 
11545  475C FA F7 FF      lea d, [bp + -9] ; $digits
11546  475F D7            push a
11547  4760 DA            push d
11548  4761                              
11549  4761 FA F5 FF      lea d, [bp + -11] ; $i
11550  4764 2A            mov b, [d]
11551  4765 38 00 00      mov c, 0
11552  4768 E7            pop d
11553  4769 5A            add d, b
11554  476A E4            pop a
11555  476B DA            push d
11556  476C                              
11557  476C FD 2E 30 00   mov32 cb, $00000030
11557  4770 00 00 
11558  4772             ; --- START TERMS
11559  4772 D7            push a
11560  4773 11            mov a, b
11561  4774                              
11562  4774 FA 05 00      lea d, [bp + 5] ; $num
11563  4777 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11564  477A FD 39         mov c, b ; And place it into C
11565  477C 2A            mov b, [d] ; Lower Word in B
11566  477D             ; --- START FACTORS
11567  477D D7            push a
11568  477E FD D8         push g
11569  4780 11            mov a, b
11570  4781 FD 7A         mov g, c
11571  4783 FD 2E 0A 00   mov32 cb, $0000000a
11571  4787 00 00 
11572  4789 FD D8         push g ; save 'g' as the div instruction uses it
11573  478B AE            div a, b ; %, a: quotient, b: remainder
11574  478C 11            mov a, b
11575  478D FD F1         pop g
11576  478F FD 38         mov c, g
11577  4791 27            mov b, a
11578  4792 FD F1         pop g
11579  4794 E4            pop a
11580  4795             ; --- END FACTORS
11581  4795 FD 15         add32 cb, ga
11582  4797 E4            pop a
11583  4798             ; --- END TERMS
11584  4798 E7            pop d
11585  4799 FD 3E         mov [d], bl
11586  479B             ; num = num / 10; 
11587  479B FA 05 00      lea d, [bp + 5] ; $num
11588  479E DA            push d
11589  479F                              
11590  479F FA 05 00      lea d, [bp + 5] ; $num
11591  47A2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11592  47A5 FD 39         mov c, b ; And place it into C
11593  47A7 2A            mov b, [d] ; Lower Word in B
11594  47A8             ; --- START FACTORS
11595  47A8 D7            push a
11596  47A9 FD D8         push g
11597  47AB 11            mov a, b
11598  47AC FD 7A         mov g, c
11599  47AE FD 2E 0A 00   mov32 cb, $0000000a
11599  47B2 00 00 
11600  47B4 FD D8         push g ; save 'g' as the div instruction uses it
11601  47B6 AE            div a, b ; /, a: quotient, b: remainder
11602  47B7 FD F1         pop g
11603  47B9 FD 38         mov c, g
11604  47BB 27            mov b, a
11605  47BC FD F1         pop g
11606  47BE E4            pop a
11607  47BF             ; --- END FACTORS
11608  47BF E7            pop d
11609  47C0 FD 43         mov [d], b
11610  47C2 28            mov b, c
11611  47C3 FD 44 02 00   mov [d + 2], b
11612  47C7             ; i++; 
11613  47C7                              
11614  47C7 FA F5 FF      lea d, [bp + -11] ; $i
11615  47CA 2A            mov b, [d]
11616  47CB 38 00 00      mov c, 0
11617  47CE 11            mov a, b
11618  47CF FD 77         inc b
11619  47D1 FA F5 FF      lea d, [bp + -11] ; $i
11620  47D4 FD 43         mov [d], b
11621  47D6 27            mov b, a
11622  47D7 0A 3A 47      jmp _while202_cond
11623  47DA             _while202_exit:
11624  47DA             ; while (i > 0) { 
11625  47DA             _while205_cond:
11626  47DA                              
11627  47DA FA F5 FF      lea d, [bp + -11] ; $i
11628  47DD 2A            mov b, [d]
11629  47DE 38 00 00      mov c, 0
11630  47E1             ; --- START RELATIONAL
11631  47E1 D7            push a
11632  47E2 11            mov a, b
11633  47E3 FD 2E 00 00   mov32 cb, $00000000
11633  47E7 00 00 
11634  47E9 B0            cmp a, b
11635  47EA FD 7F         sgt ; >
11636  47EC E4            pop a
11637  47ED             ; --- END RELATIONAL
11638  47ED C0 00 00      cmp b, 0
11639  47F0 C6 22 48      je _while205_exit
11640  47F3             _while205_block:
11641  47F3             ; i--; 
11642  47F3                              
11643  47F3 FA F5 FF      lea d, [bp + -11] ; $i
11644  47F6 2A            mov b, [d]
11645  47F7 38 00 00      mov c, 0
11646  47FA 11            mov a, b
11647  47FB FD 7D         dec b
11648  47FD FA F5 FF      lea d, [bp + -11] ; $i
11649  4800 FD 43         mov [d], b
11650  4802 27            mov b, a
11651  4803             ; putchar(digits[i]); 
11652  4803                              
11653  4803             ; --- START FUNCTION CALL
11654  4803                              
11655  4803 FA F7 FF      lea d, [bp + -9] ; $digits
11656  4806 D7            push a
11657  4807 DA            push d
11658  4808                              
11659  4808 FA F5 FF      lea d, [bp + -11] ; $i
11660  480B 2A            mov b, [d]
11661  480C 38 00 00      mov c, 0
11662  480F E7            pop d
11663  4810 5A            add d, b
11664  4811 E4            pop a
11665  4812 32            mov bl, [d]
11666  4813 A7 00         mov bh, 0
11667  4815 38 00 00      mov c, 0
11668  4818 DD            push bl
11669  4819 07 E2 46      call putchar
11670  481C 51 01 00      add sp, 1
11671  481F             ; --- END FUNCTION CALL
11672  481F 0A DA 47      jmp _while205_cond
11673  4822             _while205_exit:
11674  4822 F9            leave
11675  4823 09            ret
11676  4824             
11677  4824             printx32:
11678  4824 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11679  4827             ; --- BEGIN INLINE ASM SEGMENT
11680  4827 FA 05 00      lea d, [bp + 5] ; $hex
11681  482A 2B 02 00      mov b, [d+2]
11682  482D 07 36 48      call print_u16x_printx32
11683  4830 2A            mov b, [d]
11684  4831 07 36 48      call print_u16x_printx32
11685  4834             ; --- END INLINE ASM SEGMENT
11686  4834             ; return; 
11687  4834 F9            leave
11688  4835 09            ret
11689  4836             ; --- BEGIN INLINE ASM SEGMENT
11690  4836             print_u16x_printx32:
11691  4836 D7            push a
11692  4837 D8            push b
11693  4838 DD            push bl
11694  4839 30            mov bl, bh
11695  483A 07 58 48      call _itoa_printx32        ; convert bh to char in A
11696  483D 2F            mov bl, al        ; save al
11697  483E 19 00         mov al, 0
11698  4840 05 03         syscall sys_io        ; display AH
11699  4842 24            mov ah, bl        ; retrieve al
11700  4843 19 00         mov al, 0
11701  4845 05 03         syscall sys_io        ; display AL
11702  4847 EA            pop bl
11703  4848 07 58 48      call _itoa_printx32        ; convert bh to char in A
11704  484B 2F            mov bl, al        ; save al
11705  484C 19 00         mov al, 0
11706  484E 05 03         syscall sys_io        ; display AH
11707  4850 24            mov ah, bl        ; retrieve al
11708  4851 19 00         mov al, 0
11709  4853 05 03         syscall sys_io        ; display AL
11710  4855 E5            pop b
11711  4856 E4            pop a
11712  4857 09            ret
11713  4858             _itoa_printx32:
11714  4858 DA            push d
11715  4859 D8            push b
11716  485A A7 00         mov bh, 0
11717  485C FD A4 04      shr bl, 4  
11718  485F 74            mov d, b
11719  4860 1F 72 48      mov al, [d + s_hex_digits_printx32]
11720  4863 23            mov ah, al
11721  4864 E5            pop b
11722  4865 D8            push b
11723  4866 A7 00         mov bh, 0
11724  4868 FD 87 0F      and bl, $0F
11725  486B 74            mov d, b
11726  486C 1F 72 48      mov al, [d + s_hex_digits_printx32]
11727  486F E5            pop b
11728  4870 E7            pop d
11729  4871 09            ret
11730  4872 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
11730  4876 34 35 36 37 
11730  487A 38 39 41 42 
11730  487E 43 44 45 46 
11731  4882             ; --- END INLINE ASM SEGMENT
11732  4882 F9            leave
11733  4883 09            ret
11734  4884             
11735  4884             err:
11736  4884 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11737  4887             ; print(e); 
11738  4887                              
11739  4887             ; --- START FUNCTION CALL
11740  4887                              
11741  4887 FA 05 00      lea d, [bp + 5] ; $e
11742  488A 2A            mov b, [d]
11743  488B 38 00 00      mov c, 0
11744  488E FD AB         swp b
11745  4890 D8            push b
11746  4891 07 30 3E      call print
11747  4894 51 02 00      add sp, 2
11748  4897             ; --- END FUNCTION CALL
11749  4897 F9            leave
11750  4898 09            ret
11751  4899             
11752  4899             print_signed:
11753  4899 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11754  489C             ; char digits[5]; 
11755  489C 52 05 00      sub sp, 5
11756  489F             ; int i = 0; 
11757  489F 52 02 00      sub sp, 2
11758  48A2             ; --- START LOCAL VAR INITIALIZATION
11759  48A2 FA FA FF      lea d, [bp + -6] ; $i
11760  48A5 DA            push d
11761  48A6                              
11762  48A6 FD 2E 00 00   mov32 cb, $00000000
11762  48AA 00 00 
11763  48AC E7            pop d
11764  48AD FD 43         mov [d], b
11765  48AF             ; --- END LOCAL VAR INITIALIZATION
11766  48AF             ; if (num < 0) { 
11767  48AF             _if206_cond:
11768  48AF                              
11769  48AF FA 05 00      lea d, [bp + 5] ; $num
11770  48B2 2A            mov b, [d]
11771  48B3 38 00 00      mov c, 0
11772  48B6             ; --- START RELATIONAL
11773  48B6 D7            push a
11774  48B7 11            mov a, b
11775  48B8 FD 2E 00 00   mov32 cb, $00000000
11775  48BC 00 00 
11776  48BE B0            cmp a, b
11777  48BF FD 73         slt ; < (signed)
11778  48C1 E4            pop a
11779  48C2             ; --- END RELATIONAL
11780  48C2 C0 00 00      cmp b, 0
11781  48C5 C6 E8 48      je _if206_else
11782  48C8             _if206_TRUE:
11783  48C8             ; putchar('-'); 
11784  48C8                              
11785  48C8             ; --- START FUNCTION CALL
11786  48C8                              
11787  48C8 FD 2E 2D 00   mov32 cb, $0000002d
11787  48CC 00 00 
11788  48CE DD            push bl
11789  48CF 07 E2 46      call putchar
11790  48D2 51 01 00      add sp, 1
11791  48D5             ; --- END FUNCTION CALL
11792  48D5             ; num = -num; 
11793  48D5 FA 05 00      lea d, [bp + 5] ; $num
11794  48D8 DA            push d
11795  48D9                              
11796  48D9 FA 05 00      lea d, [bp + 5] ; $num
11797  48DC 2A            mov b, [d]
11798  48DD 38 00 00      mov c, 0
11799  48E0 FD 97         neg b
11800  48E2 E7            pop d
11801  48E3 FD 43         mov [d], b
11802  48E5 0A 13 49      jmp _if206_exit
11803  48E8             _if206_else:
11804  48E8             ; if (num == 0) { 
11805  48E8             _if207_cond:
11806  48E8                              
11807  48E8 FA 05 00      lea d, [bp + 5] ; $num
11808  48EB 2A            mov b, [d]
11809  48EC 38 00 00      mov c, 0
11810  48EF             ; --- START RELATIONAL
11811  48EF D7            push a
11812  48F0 11            mov a, b
11813  48F1 FD 2E 00 00   mov32 cb, $00000000
11813  48F5 00 00 
11814  48F7 B0            cmp a, b
11815  48F8 FD 71         seq ; ==
11816  48FA E4            pop a
11817  48FB             ; --- END RELATIONAL
11818  48FB C0 00 00      cmp b, 0
11819  48FE C6 13 49      je _if207_exit
11820  4901             _if207_TRUE:
11821  4901             ; putchar('0'); 
11822  4901                              
11823  4901             ; --- START FUNCTION CALL
11824  4901                              
11825  4901 FD 2E 30 00   mov32 cb, $00000030
11825  4905 00 00 
11826  4907 DD            push bl
11827  4908 07 E2 46      call putchar
11828  490B 51 01 00      add sp, 1
11829  490E             ; --- END FUNCTION CALL
11830  490E             ; return; 
11831  490E F9            leave
11832  490F 09            ret
11833  4910 0A 13 49      jmp _if207_exit
11834  4913             _if207_exit:
11835  4913             _if206_exit:
11836  4913             ; while (num > 0) { 
11837  4913             _while208_cond:
11838  4913                              
11839  4913 FA 05 00      lea d, [bp + 5] ; $num
11840  4916 2A            mov b, [d]
11841  4917 38 00 00      mov c, 0
11842  491A             ; --- START RELATIONAL
11843  491A D7            push a
11844  491B 11            mov a, b
11845  491C FD 2E 00 00   mov32 cb, $00000000
11845  4920 00 00 
11846  4922 B0            cmp a, b
11847  4923 FD 7F         sgt ; >
11848  4925 E4            pop a
11849  4926             ; --- END RELATIONAL
11850  4926 C0 00 00      cmp b, 0
11851  4929 C6 A0 49      je _while208_exit
11852  492C             _while208_block:
11853  492C             ; digits[i] = '0' + (num % 10); 
11854  492C FA FC FF      lea d, [bp + -4] ; $digits
11855  492F D7            push a
11856  4930 DA            push d
11857  4931                              
11858  4931 FA FA FF      lea d, [bp + -6] ; $i
11859  4934 2A            mov b, [d]
11860  4935 38 00 00      mov c, 0
11861  4938 E7            pop d
11862  4939 5A            add d, b
11863  493A E4            pop a
11864  493B DA            push d
11865  493C                              
11866  493C FD 2E 30 00   mov32 cb, $00000030
11866  4940 00 00 
11867  4942             ; --- START TERMS
11868  4942 D7            push a
11869  4943 11            mov a, b
11870  4944                              
11871  4944 FA 05 00      lea d, [bp + 5] ; $num
11872  4947 2A            mov b, [d]
11873  4948 38 00 00      mov c, 0
11874  494B             ; --- START FACTORS
11875  494B D7            push a
11876  494C FD D8         push g
11877  494E 11            mov a, b
11878  494F FD 7A         mov g, c
11879  4951 FD 2E 0A 00   mov32 cb, $0000000a
11879  4955 00 00 
11880  4957 FD D8         push g ; save 'g' as the div instruction uses it
11881  4959 AE            div a, b ; %, a: quotient, b: remainder
11882  495A 11            mov a, b
11883  495B FD F1         pop g
11884  495D FD 38         mov c, g
11885  495F 27            mov b, a
11886  4960 FD F1         pop g
11887  4962 E4            pop a
11888  4963             ; --- END FACTORS
11889  4963 56            add b, a
11890  4964 E4            pop a
11891  4965             ; --- END TERMS
11892  4965 E7            pop d
11893  4966 FD 3E         mov [d], bl
11894  4968             ; num = num / 10; 
11895  4968 FA 05 00      lea d, [bp + 5] ; $num
11896  496B DA            push d
11897  496C                              
11898  496C FA 05 00      lea d, [bp + 5] ; $num
11899  496F 2A            mov b, [d]
11900  4970 38 00 00      mov c, 0
11901  4973             ; --- START FACTORS
11902  4973 D7            push a
11903  4974 FD D8         push g
11904  4976 11            mov a, b
11905  4977 FD 7A         mov g, c
11906  4979 FD 2E 0A 00   mov32 cb, $0000000a
11906  497D 00 00 
11907  497F FD D8         push g ; save 'g' as the div instruction uses it
11908  4981 AE            div a, b ; /, a: quotient, b: remainder
11909  4982 FD F1         pop g
11910  4984 FD 38         mov c, g
11911  4986 27            mov b, a
11912  4987 FD F1         pop g
11913  4989 E4            pop a
11914  498A             ; --- END FACTORS
11915  498A E7            pop d
11916  498B FD 43         mov [d], b
11917  498D             ; i++; 
11918  498D                              
11919  498D FA FA FF      lea d, [bp + -6] ; $i
11920  4990 2A            mov b, [d]
11921  4991 38 00 00      mov c, 0
11922  4994 11            mov a, b
11923  4995 FD 77         inc b
11924  4997 FA FA FF      lea d, [bp + -6] ; $i
11925  499A FD 43         mov [d], b
11926  499C 27            mov b, a
11927  499D 0A 13 49      jmp _while208_cond
11928  49A0             _while208_exit:
11929  49A0             ; while (i > 0) { 
11930  49A0             _while211_cond:
11931  49A0                              
11932  49A0 FA FA FF      lea d, [bp + -6] ; $i
11933  49A3 2A            mov b, [d]
11934  49A4 38 00 00      mov c, 0
11935  49A7             ; --- START RELATIONAL
11936  49A7 D7            push a
11937  49A8 11            mov a, b
11938  49A9 FD 2E 00 00   mov32 cb, $00000000
11938  49AD 00 00 
11939  49AF B0            cmp a, b
11940  49B0 FD 7F         sgt ; >
11941  49B2 E4            pop a
11942  49B3             ; --- END RELATIONAL
11943  49B3 C0 00 00      cmp b, 0
11944  49B6 C6 E8 49      je _while211_exit
11945  49B9             _while211_block:
11946  49B9             ; i--; 
11947  49B9                              
11948  49B9 FA FA FF      lea d, [bp + -6] ; $i
11949  49BC 2A            mov b, [d]
11950  49BD 38 00 00      mov c, 0
11951  49C0 11            mov a, b
11952  49C1 FD 7D         dec b
11953  49C3 FA FA FF      lea d, [bp + -6] ; $i
11954  49C6 FD 43         mov [d], b
11955  49C8 27            mov b, a
11956  49C9             ; putchar(digits[i]); 
11957  49C9                              
11958  49C9             ; --- START FUNCTION CALL
11959  49C9                              
11960  49C9 FA FC FF      lea d, [bp + -4] ; $digits
11961  49CC D7            push a
11962  49CD DA            push d
11963  49CE                              
11964  49CE FA FA FF      lea d, [bp + -6] ; $i
11965  49D1 2A            mov b, [d]
11966  49D2 38 00 00      mov c, 0
11967  49D5 E7            pop d
11968  49D6 5A            add d, b
11969  49D7 E4            pop a
11970  49D8 32            mov bl, [d]
11971  49D9 A7 00         mov bh, 0
11972  49DB 38 00 00      mov c, 0
11973  49DE DD            push bl
11974  49DF 07 E2 46      call putchar
11975  49E2 51 01 00      add sp, 1
11976  49E5             ; --- END FUNCTION CALL
11977  49E5 0A A0 49      jmp _while211_cond
11978  49E8             _while211_exit:
11979  49E8 F9            leave
11980  49E9 09            ret
11981  49EA             
11982  49EA             print_unsigned:
11983  49EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
11984  49ED             ; char digits[5]; 
11985  49ED 52 05 00      sub sp, 5
11986  49F0             ; int i; 
11987  49F0 52 02 00      sub sp, 2
11988  49F3             ; i = 0; 
11989  49F3 FA FA FF      lea d, [bp + -6] ; $i
11990  49F6 DA            push d
11991  49F7                              
11992  49F7 FD 2E 00 00   mov32 cb, $00000000
11992  49FB 00 00 
11993  49FD E7            pop d
11994  49FE FD 43         mov [d], b
11995  4A00             ; if(num == 0){ 
11996  4A00             _if212_cond:
11997  4A00                              
11998  4A00 FA 05 00      lea d, [bp + 5] ; $num
11999  4A03 2A            mov b, [d]
12000  4A04 38 00 00      mov c, 0
12001  4A07             ; --- START RELATIONAL
12002  4A07 D7            push a
12003  4A08 11            mov a, b
12004  4A09 FD 2E 00 00   mov32 cb, $00000000
12004  4A0D 00 00 
12005  4A0F B0            cmp a, b
12006  4A10 FD 71         seq ; ==
12007  4A12 E4            pop a
12008  4A13             ; --- END RELATIONAL
12009  4A13 C0 00 00      cmp b, 0
12010  4A16 C6 2B 4A      je _if212_exit
12011  4A19             _if212_TRUE:
12012  4A19             ; putchar('0'); 
12013  4A19                              
12014  4A19             ; --- START FUNCTION CALL
12015  4A19                              
12016  4A19 FD 2E 30 00   mov32 cb, $00000030
12016  4A1D 00 00 
12017  4A1F DD            push bl
12018  4A20 07 E2 46      call putchar
12019  4A23 51 01 00      add sp, 1
12020  4A26             ; --- END FUNCTION CALL
12021  4A26             ; return; 
12022  4A26 F9            leave
12023  4A27 09            ret
12024  4A28 0A 2B 4A      jmp _if212_exit
12025  4A2B             _if212_exit:
12026  4A2B             ; while (num > 0) { 
12027  4A2B             _while213_cond:
12028  4A2B                              
12029  4A2B FA 05 00      lea d, [bp + 5] ; $num
12030  4A2E 2A            mov b, [d]
12031  4A2F 38 00 00      mov c, 0
12032  4A32             ; --- START RELATIONAL
12033  4A32 D7            push a
12034  4A33 11            mov a, b
12035  4A34 FD 2E 00 00   mov32 cb, $00000000
12035  4A38 00 00 
12036  4A3A B0            cmp a, b
12037  4A3B FD 81         sgu ; > (unsigned)
12038  4A3D E4            pop a
12039  4A3E             ; --- END RELATIONAL
12040  4A3E C0 00 00      cmp b, 0
12041  4A41 C6 B8 4A      je _while213_exit
12042  4A44             _while213_block:
12043  4A44             ; digits[i] = '0' + (num % 10); 
12044  4A44 FA FC FF      lea d, [bp + -4] ; $digits
12045  4A47 D7            push a
12046  4A48 DA            push d
12047  4A49                              
12048  4A49 FA FA FF      lea d, [bp + -6] ; $i
12049  4A4C 2A            mov b, [d]
12050  4A4D 38 00 00      mov c, 0
12051  4A50 E7            pop d
12052  4A51 5A            add d, b
12053  4A52 E4            pop a
12054  4A53 DA            push d
12055  4A54                              
12056  4A54 FD 2E 30 00   mov32 cb, $00000030
12056  4A58 00 00 
12057  4A5A             ; --- START TERMS
12058  4A5A D7            push a
12059  4A5B 11            mov a, b
12060  4A5C                              
12061  4A5C FA 05 00      lea d, [bp + 5] ; $num
12062  4A5F 2A            mov b, [d]
12063  4A60 38 00 00      mov c, 0
12064  4A63             ; --- START FACTORS
12065  4A63 D7            push a
12066  4A64 FD D8         push g
12067  4A66 11            mov a, b
12068  4A67 FD 7A         mov g, c
12069  4A69 FD 2E 0A 00   mov32 cb, $0000000a
12069  4A6D 00 00 
12070  4A6F FD D8         push g ; save 'g' as the div instruction uses it
12071  4A71 AE            div a, b ; %, a: quotient, b: remainder
12072  4A72 11            mov a, b
12073  4A73 FD F1         pop g
12074  4A75 FD 38         mov c, g
12075  4A77 27            mov b, a
12076  4A78 FD F1         pop g
12077  4A7A E4            pop a
12078  4A7B             ; --- END FACTORS
12079  4A7B 56            add b, a
12080  4A7C E4            pop a
12081  4A7D             ; --- END TERMS
12082  4A7D E7            pop d
12083  4A7E FD 3E         mov [d], bl
12084  4A80             ; num = num / 10; 
12085  4A80 FA 05 00      lea d, [bp + 5] ; $num
12086  4A83 DA            push d
12087  4A84                              
12088  4A84 FA 05 00      lea d, [bp + 5] ; $num
12089  4A87 2A            mov b, [d]
12090  4A88 38 00 00      mov c, 0
12091  4A8B             ; --- START FACTORS
12092  4A8B D7            push a
12093  4A8C FD D8         push g
12094  4A8E 11            mov a, b
12095  4A8F FD 7A         mov g, c
12096  4A91 FD 2E 0A 00   mov32 cb, $0000000a
12096  4A95 00 00 
12097  4A97 FD D8         push g ; save 'g' as the div instruction uses it
12098  4A99 AE            div a, b ; /, a: quotient, b: remainder
12099  4A9A FD F1         pop g
12100  4A9C FD 38         mov c, g
12101  4A9E 27            mov b, a
12102  4A9F FD F1         pop g
12103  4AA1 E4            pop a
12104  4AA2             ; --- END FACTORS
12105  4AA2 E7            pop d
12106  4AA3 FD 43         mov [d], b
12107  4AA5             ; i++; 
12108  4AA5                              
12109  4AA5 FA FA FF      lea d, [bp + -6] ; $i
12110  4AA8 2A            mov b, [d]
12111  4AA9 38 00 00      mov c, 0
12112  4AAC 11            mov a, b
12113  4AAD FD 77         inc b
12114  4AAF FA FA FF      lea d, [bp + -6] ; $i
12115  4AB2 FD 43         mov [d], b
12116  4AB4 27            mov b, a
12117  4AB5 0A 2B 4A      jmp _while213_cond
12118  4AB8             _while213_exit:
12119  4AB8             ; while (i > 0) { 
12120  4AB8             _while216_cond:
12121  4AB8                              
12122  4AB8 FA FA FF      lea d, [bp + -6] ; $i
12123  4ABB 2A            mov b, [d]
12124  4ABC 38 00 00      mov c, 0
12125  4ABF             ; --- START RELATIONAL
12126  4ABF D7            push a
12127  4AC0 11            mov a, b
12128  4AC1 FD 2E 00 00   mov32 cb, $00000000
12128  4AC5 00 00 
12129  4AC7 B0            cmp a, b
12130  4AC8 FD 7F         sgt ; >
12131  4ACA E4            pop a
12132  4ACB             ; --- END RELATIONAL
12133  4ACB C0 00 00      cmp b, 0
12134  4ACE C6 00 4B      je _while216_exit
12135  4AD1             _while216_block:
12136  4AD1             ; i--; 
12137  4AD1                              
12138  4AD1 FA FA FF      lea d, [bp + -6] ; $i
12139  4AD4 2A            mov b, [d]
12140  4AD5 38 00 00      mov c, 0
12141  4AD8 11            mov a, b
12142  4AD9 FD 7D         dec b
12143  4ADB FA FA FF      lea d, [bp + -6] ; $i
12144  4ADE FD 43         mov [d], b
12145  4AE0 27            mov b, a
12146  4AE1             ; putchar(digits[i]); 
12147  4AE1                              
12148  4AE1             ; --- START FUNCTION CALL
12149  4AE1                              
12150  4AE1 FA FC FF      lea d, [bp + -4] ; $digits
12151  4AE4 D7            push a
12152  4AE5 DA            push d
12153  4AE6                              
12154  4AE6 FA FA FF      lea d, [bp + -6] ; $i
12155  4AE9 2A            mov b, [d]
12156  4AEA 38 00 00      mov c, 0
12157  4AED E7            pop d
12158  4AEE 5A            add d, b
12159  4AEF E4            pop a
12160  4AF0 32            mov bl, [d]
12161  4AF1 A7 00         mov bh, 0
12162  4AF3 38 00 00      mov c, 0
12163  4AF6 DD            push bl
12164  4AF7 07 E2 46      call putchar
12165  4AFA 51 01 00      add sp, 1
12166  4AFD             ; --- END FUNCTION CALL
12167  4AFD 0A B8 4A      jmp _while216_cond
12168  4B00             _while216_exit:
12169  4B00 F9            leave
12170  4B01 09            ret
12171  4B02             
12172  4B02             printx16:
12173  4B02 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12174  4B05             ; --- BEGIN INLINE ASM SEGMENT
12175  4B05 FA 05 00      lea d, [bp + 5] ; $hex
12176  4B08 2A            mov b, [d]
12177  4B09             print_u16x_printx16:
12178  4B09 DD            push bl
12179  4B0A 30            mov bl, bh
12180  4B0B 07 28 4B      call _itoa_printx16        ; convert bh to char in A
12181  4B0E 2F            mov bl, al        ; save al
12182  4B0F 19 00         mov al, 0
12183  4B11 05 03         syscall sys_io        ; display AH
12184  4B13 24            mov ah, bl        ; retrieve al
12185  4B14 19 00         mov al, 0
12186  4B16 05 03         syscall sys_io        ; display AL
12187  4B18 EA            pop bl
12188  4B19 07 28 4B      call _itoa_printx16        ; convert bh to char in A
12189  4B1C 2F            mov bl, al        ; save al
12190  4B1D 19 00         mov al, 0
12191  4B1F 05 03         syscall sys_io        ; display AH
12192  4B21 24            mov ah, bl        ; retrieve al
12193  4B22 19 00         mov al, 0
12194  4B24 05 03         syscall sys_io        ; display AL
12195  4B26             ; --- END INLINE ASM SEGMENT
12196  4B26             ; return; 
12197  4B26 F9            leave
12198  4B27 09            ret
12199  4B28             ; --- BEGIN INLINE ASM SEGMENT
12200  4B28             _itoa_printx16:
12201  4B28 DA            push d
12202  4B29 D8            push b
12203  4B2A A7 00         mov bh, 0
12204  4B2C FD A4 04      shr bl, 4  
12205  4B2F 74            mov d, b
12206  4B30 1F 42 4B      mov al, [d + s_hex_digits_printx16]
12207  4B33 23            mov ah, al
12208  4B34 E5            pop b
12209  4B35 D8            push b
12210  4B36 A7 00         mov bh, 0
12211  4B38 FD 87 0F      and bl, $0F
12212  4B3B 74            mov d, b
12213  4B3C 1F 42 4B      mov al, [d + s_hex_digits_printx16]
12214  4B3F E5            pop b
12215  4B40 E7            pop d
12216  4B41 09            ret
12217  4B42 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
12217  4B46 34 35 36 37 
12217  4B4A 38 39 41 42 
12217  4B4E 43 44 45 46 
12218  4B52             ; --- END INLINE ASM SEGMENT
12219  4B52 F9            leave
12220  4B53 09            ret
12221  4B54             
12222  4B54             exit:
12223  4B54 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12224  4B57             ; --- BEGIN INLINE ASM SEGMENT
12225  4B57 05 0B         syscall sys_terminate_proc
12226  4B59             ; --- END INLINE ASM SEGMENT
12227  4B59 F9            leave
12228  4B5A 09            ret
12229  4B5B             
12230  4B5B             strcpy:
12231  4B5B F8 00 00      enter 0 ; (push bp; mov bp, sp)
12232  4B5E             ; char *psrc; 
12233  4B5E 52 02 00      sub sp, 2
12234  4B61             ; char *pdest; 
12235  4B61 52 02 00      sub sp, 2
12236  4B64             ; psrc = src; 
12237  4B64 FA FF FF      lea d, [bp + -1] ; $psrc
12238  4B67 DA            push d
12239  4B68                              
12240  4B68 FA 07 00      lea d, [bp + 7] ; $src
12241  4B6B 2A            mov b, [d]
12242  4B6C 38 00 00      mov c, 0
12243  4B6F E7            pop d
12244  4B70 FD 43         mov [d], b
12245  4B72             ; pdest = dest; 
12246  4B72 FA FD FF      lea d, [bp + -3] ; $pdest
12247  4B75 DA            push d
12248  4B76                              
12249  4B76 FA 05 00      lea d, [bp + 5] ; $dest
12250  4B79 2A            mov b, [d]
12251  4B7A 38 00 00      mov c, 0
12252  4B7D E7            pop d
12253  4B7E FD 43         mov [d], b
12254  4B80             ; while(*psrc) *pdest++ = *psrc++; 
12255  4B80             _while217_cond:
12256  4B80                              
12257  4B80 FA FF FF      lea d, [bp + -1] ; $psrc
12258  4B83 2A            mov b, [d]
12259  4B84 38 00 00      mov c, 0
12260  4B87 74            mov d, b
12261  4B88 32            mov bl, [d]
12262  4B89 A7 00         mov bh, 0
12263  4B8B 38 00 00      mov c, 0
12264  4B8E C0 00 00      cmp b, 0
12265  4B91 C6 C2 4B      je _while217_exit
12266  4B94             _while217_block:
12267  4B94             ; *pdest++ = *psrc++; 
12268  4B94 FA FD FF      lea d, [bp + -3] ; $pdest
12269  4B97 2A            mov b, [d]
12270  4B98 38 00 00      mov c, 0
12271  4B9B FD 77         inc b
12272  4B9D FA FD FF      lea d, [bp + -3] ; $pdest
12273  4BA0 FD 43         mov [d], b
12274  4BA2 FD 7D         dec b
12275  4BA4 D8            push b
12276  4BA5                              
12277  4BA5 FA FF FF      lea d, [bp + -1] ; $psrc
12278  4BA8 2A            mov b, [d]
12279  4BA9 38 00 00      mov c, 0
12280  4BAC FD 77         inc b
12281  4BAE FA FF FF      lea d, [bp + -1] ; $psrc
12282  4BB1 FD 43         mov [d], b
12283  4BB3 FD 7D         dec b
12284  4BB5 74            mov d, b
12285  4BB6 32            mov bl, [d]
12286  4BB7 A7 00         mov bh, 0
12287  4BB9 38 00 00      mov c, 0
12288  4BBC E7            pop d
12289  4BBD FD 3E         mov [d], bl
12290  4BBF 0A 80 4B      jmp _while217_cond
12291  4BC2             _while217_exit:
12292  4BC2             ; *pdest = '\0'; 
12293  4BC2 FA FD FF      lea d, [bp + -3] ; $pdest
12294  4BC5 2A            mov b, [d]
12295  4BC6 38 00 00      mov c, 0
12296  4BC9 D8            push b
12297  4BCA                              
12298  4BCA FD 2E 00 00   mov32 cb, $00000000
12298  4BCE 00 00 
12299  4BD0 E7            pop d
12300  4BD1 FD 3E         mov [d], bl
12301  4BD3 F9            leave
12302  4BD4 09            ret
12303  4BD5             
12304  4BD5             strcat:
12305  4BD5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12306  4BD8             ; int dest_len; 
12307  4BD8 52 02 00      sub sp, 2
12308  4BDB             ; int i; 
12309  4BDB 52 02 00      sub sp, 2
12310  4BDE             ; dest_len = strlen(dest); 
12311  4BDE FA FF FF      lea d, [bp + -1] ; $dest_len
12312  4BE1 DA            push d
12313  4BE2                              
12314  4BE2             ; --- START FUNCTION CALL
12315  4BE2                              
12316  4BE2 FA 05 00      lea d, [bp + 5] ; $dest
12317  4BE5 2A            mov b, [d]
12318  4BE6 38 00 00      mov c, 0
12319  4BE9 FD AB         swp b
12320  4BEB D8            push b
12321  4BEC 07 16 40      call strlen
12322  4BEF 51 02 00      add sp, 2
12323  4BF2             ; --- END FUNCTION CALL
12324  4BF2 E7            pop d
12325  4BF3 FD 43         mov [d], b
12326  4BF5             ; for (i = 0; src[i] != 0; i=i+1) { 
12327  4BF5             _for218_init:
12328  4BF5 FA FD FF      lea d, [bp + -3] ; $i
12329  4BF8 DA            push d
12330  4BF9                              
12331  4BF9 FD 2E 00 00   mov32 cb, $00000000
12331  4BFD 00 00 
12332  4BFF E7            pop d
12333  4C00 FD 43         mov [d], b
12334  4C02             _for218_cond:
12335  4C02                              
12336  4C02 FA 07 00      lea d, [bp + 7] ; $src
12337  4C05 FD 2A         mov d, [d]
12338  4C07 D7            push a
12339  4C08 DA            push d
12340  4C09                              
12341  4C09 FA FD FF      lea d, [bp + -3] ; $i
12342  4C0C 2A            mov b, [d]
12343  4C0D 38 00 00      mov c, 0
12344  4C10 E7            pop d
12345  4C11 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
12346  4C15 E4            pop a
12347  4C16 32            mov bl, [d]
12348  4C17 A7 00         mov bh, 0
12349  4C19 38 00 00      mov c, 0
12350  4C1C             ; --- START RELATIONAL
12351  4C1C D7            push a
12352  4C1D 11            mov a, b
12353  4C1E FD 2E 00 00   mov32 cb, $00000000
12353  4C22 00 00 
12354  4C24 B0            cmp a, b
12355  4C25 FD 72         sneq ; !=
12356  4C27 E4            pop a
12357  4C28             ; --- END RELATIONAL
12358  4C28 C0 00 00      cmp b, 0
12359  4C2B C6 86 4C      je _for218_exit
12360  4C2E             _for218_block:
12361  4C2E             ; dest[dest_len + i] = src[i]; 
12362  4C2E FA 05 00      lea d, [bp + 5] ; $dest
12363  4C31 FD 2A         mov d, [d]
12364  4C33 D7            push a
12365  4C34 DA            push d
12366  4C35                              
12367  4C35 FA FF FF      lea d, [bp + -1] ; $dest_len
12368  4C38 2A            mov b, [d]
12369  4C39 38 00 00      mov c, 0
12370  4C3C             ; --- START TERMS
12371  4C3C D7            push a
12372  4C3D 11            mov a, b
12373  4C3E FA FD FF      lea d, [bp + -3] ; $i
12374  4C41 2A            mov b, [d]
12375  4C42 38 00 00      mov c, 0
12376  4C45 56            add b, a
12377  4C46 E4            pop a
12378  4C47             ; --- END TERMS
12379  4C47 E7            pop d
12380  4C48 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
12381  4C4C E4            pop a
12382  4C4D DA            push d
12383  4C4E                              
12384  4C4E FA 07 00      lea d, [bp + 7] ; $src
12385  4C51 FD 2A         mov d, [d]
12386  4C53 D7            push a
12387  4C54 DA            push d
12388  4C55                              
12389  4C55 FA FD FF      lea d, [bp + -3] ; $i
12390  4C58 2A            mov b, [d]
12391  4C59 38 00 00      mov c, 0
12392  4C5C E7            pop d
12393  4C5D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
12394  4C61 E4            pop a
12395  4C62 32            mov bl, [d]
12396  4C63 A7 00         mov bh, 0
12397  4C65 38 00 00      mov c, 0
12398  4C68 E7            pop d
12399  4C69 FD 3E         mov [d], bl
12400  4C6B             _for218_update:
12401  4C6B FA FD FF      lea d, [bp + -3] ; $i
12402  4C6E DA            push d
12403  4C6F                              
12404  4C6F FA FD FF      lea d, [bp + -3] ; $i
12405  4C72 2A            mov b, [d]
12406  4C73 38 00 00      mov c, 0
12407  4C76             ; --- START TERMS
12408  4C76 D7            push a
12409  4C77 11            mov a, b
12410  4C78 FD 2E 01 00   mov32 cb, $00000001
12410  4C7C 00 00 
12411  4C7E 56            add b, a
12412  4C7F E4            pop a
12413  4C80             ; --- END TERMS
12414  4C80 E7            pop d
12415  4C81 FD 43         mov [d], b
12416  4C83 0A 02 4C      jmp _for218_cond
12417  4C86             _for218_exit:
12418  4C86             ; dest[dest_len + i] = 0; 
12419  4C86 FA 05 00      lea d, [bp + 5] ; $dest
12420  4C89 FD 2A         mov d, [d]
12421  4C8B D7            push a
12422  4C8C DA            push d
12423  4C8D                              
12424  4C8D FA FF FF      lea d, [bp + -1] ; $dest_len
12425  4C90 2A            mov b, [d]
12426  4C91 38 00 00      mov c, 0
12427  4C94             ; --- START TERMS
12428  4C94 D7            push a
12429  4C95 11            mov a, b
12430  4C96 FA FD FF      lea d, [bp + -3] ; $i
12431  4C99 2A            mov b, [d]
12432  4C9A 38 00 00      mov c, 0
12433  4C9D 56            add b, a
12434  4C9E E4            pop a
12435  4C9F             ; --- END TERMS
12436  4C9F E7            pop d
12437  4CA0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
12438  4CA4 E4            pop a
12439  4CA5 DA            push d
12440  4CA6                              
12441  4CA6 FD 2E 00 00   mov32 cb, $00000000
12441  4CAA 00 00 
12442  4CAC E7            pop d
12443  4CAD FD 3E         mov [d], bl
12444  4CAF             ; return dest; 
12445  4CAF                              
12446  4CAF FA 05 00      lea d, [bp + 5] ; $dest
12447  4CB2 2A            mov b, [d]
12448  4CB3 38 00 00      mov c, 0
12449  4CB6 F9            leave
12450  4CB7 09            ret
12451  4CB8             
12452  4CB8             printx8:
12453  4CB8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12454  4CBB             ; --- BEGIN INLINE ASM SEGMENT
12455  4CBB FA 05 00      lea d, [bp + 5] ; $hex
12456  4CBE 32            mov bl, [d]
12457  4CBF 07 CE 4C      call _itoa_printx8        ; convert bl to char in A
12458  4CC2 2F            mov bl, al        ; save al
12459  4CC3 19 00         mov al, 0
12460  4CC5 05 03         syscall sys_io        ; display AH
12461  4CC7 24            mov ah, bl        ; retrieve al
12462  4CC8 19 00         mov al, 0
12463  4CCA 05 03         syscall sys_io        ; display AL
12464  4CCC             ; --- END INLINE ASM SEGMENT
12465  4CCC             ; return; 
12466  4CCC F9            leave
12467  4CCD 09            ret
12468  4CCE             ; --- BEGIN INLINE ASM SEGMENT
12469  4CCE             _itoa_printx8:
12470  4CCE DA            push d
12471  4CCF D8            push b
12472  4CD0 A7 00         mov bh, 0
12473  4CD2 FD A4 04      shr bl, 4  
12474  4CD5 74            mov d, b
12475  4CD6 1F E8 4C      mov al, [d + s_hex_digits_printx8]
12476  4CD9 23            mov ah, al
12477  4CDA E5            pop b
12478  4CDB D8            push b
12479  4CDC A7 00         mov bh, 0
12480  4CDE FD 87 0F      and bl, $0F
12481  4CE1 74            mov d, b
12482  4CE2 1F E8 4C      mov al, [d + s_hex_digits_printx8]
12483  4CE5 E5            pop b
12484  4CE6 E7            pop d
12485  4CE7 09            ret
12486  4CE8 30 31 32 33 s_hex_digits_printx8:    .db "0123456789ABCDEF"  
12486  4CEC 34 35 36 37 
12486  4CF0 38 39 41 42 
12486  4CF4 43 44 45 46 
12487  4CF8             ; --- END INLINE ASM SEGMENT
12488  4CF8 F9            leave
12489  4CF9 09            ret
12490  4CFA             ; --- END TEXT SEGMENT
12491  4CFA             
12492  4CFA             ; --- BEGIN DATA SEGMENT
12493  4CFA             _keywords_data:
12494  4CFA B1 4F       .dw _s0
12495  4CFC 01          .db 1
12496  4CFD B5 4F       .dw _s1
12497  4CFF 02          .db 2
12498  4D00 BD 4F       .dw _s2
12499  4D02 03          .db 3
12500  4D03 C2 4F       .dw _s3
12501  4D05 04          .db 4
12502  4D06 C7 4F       .dw _s4
12503  4D08 06          .db 6
12504  4D09 CA 4F       .dw _s5
12505  4D0B 07          .db 7
12506  4D0C CD 4F       .dw _s6
12507  4D0E 05          .db 5
12508  4D0F D1 4F       .dw _s7
12509  4D11 00          .db 0
12510  4D12 00 00 00 00 _label_table_data: .fill 288, 0
12510  4D16 00 00 00 00 
12510  4D1A 00 00 00 00 
12510  4D1E 00 00 00 00 
12510  4D22 00 00 00 00 
12510  4D26 00 00 00 00 
12510  4D2A 00 00 00 00 
12510  4D2E 00 00 00 00 
12510  4D32 00 00 00 00 
12510  4D36 00 00 00 00 
12510  4D3A 00 00 00 00 
12510  4D3E 00 00 00 00 
12510  4D42 00 00 00 00 
12510  4D46 00 00 00 00 
12510  4D4A 00 00 00 00 
12510  4D4E 00 00 00 00 
12510  4D52 00 00 00 00 
12510  4D56 00 00 00 00 
12510  4D5A 00 00 00 00 
12510  4D5E 00 00 00 00 
12510  4D62 00 00 00 00 
12510  4D66 00 00 00 00 
12510  4D6A 00 00 00 00 
12510  4D6E 00 00 00 00 
12510  4D72 00 00 00 00 
12510  4D76 00 00 00 00 
12510  4D7A 00 00 00 00 
12510  4D7E 00 00 00 00 
12510  4D82 00 00 00 00 
12510  4D86 00 00 00 00 
12510  4D8A 00 00 00 00 
12510  4D8E 00 00 00 00 
12510  4D92 00 00 00 00 
12510  4D96 00 00 00 00 
12510  4D9A 00 00 00 00 
12510  4D9E 00 00 00 00 
12510  4DA2 00 00 00 00 
12510  4DA6 00 00 00 00 
12510  4DAA 00 00 00 00 
12510  4DAE 00 00 00 00 
12510  4DB2 00 00 00 00 
12510  4DB6 00 00 00 00 
12510  4DBA 00 00 00 00 
12510  4DBE 00 00 00 00 
12510  4DC2 00 00 00 00 
12510  4DC6 00 00 00 00 
12510  4DCA 00 00 00 00 
12510  4DCE 00 00 00 00 
12510  4DD2 00 00 00 00 
12510  4DD6 00 00 00 00 
12510  4DDA 00 00 00 00 
12510  4DDE 00 00 00 00 
12510  4DE2 00 00 00 00 
12510  4DE6 00 00 00 00 
12510  4DEA 00 00 00 00 
12510  4DEE 00 00 00 00 
12510  4DF2 00 00 00 00 
12510  4DF6 00 00 00 00 
12510  4DFA 00 00 00 00 
12510  4DFE 00 00 00 00 
12510  4E02 00 00 00 00 
12510  4E06 00 00 00 00 
12510  4E0A 00 00 00 00 
12510  4E0E 00 00 00 00 
12510  4E12 00 00 00 00 
12510  4E16 00 00 00 00 
12510  4E1A 00 00 00 00 
12510  4E1E 00 00 00 00 
12510  4E22 00 00 00 00 
12510  4E26 00 00 00 00 
12510  4E2A 00 00 00 00 
12510  4E2E 00 00 00 00 
12511  4E32 00 04       __org: .dw $0400
12512  4E34 00 00       _pc: .fill 2, 0
12513  4E36 01          _print_information: .db $01
12514  4E37 00 00       _tok: .fill 2, 0
12515  4E39 00 00       _toktype: .fill 2, 0
12516  4E3B 00 00       _prog: .fill 2, 0
12517  4E3D 00 00 00 00 _token_data: .fill 64, 0
12517  4E41 00 00 00 00 
12517  4E45 00 00 00 00 
12517  4E49 00 00 00 00 
12517  4E4D 00 00 00 00 
12517  4E51 00 00 00 00 
12517  4E55 00 00 00 00 
12517  4E59 00 00 00 00 
12517  4E5D 00 00 00 00 
12517  4E61 00 00 00 00 
12517  4E65 00 00 00 00 
12517  4E69 00 00 00 00 
12517  4E6D 00 00 00 00 
12517  4E71 00 00 00 00 
12517  4E75 00 00 00 00 
12517  4E79 00 00 00 00 
12518  4E7D 00 00 00 00 _string_const_data: .fill 256, 0
12518  4E81 00 00 00 00 
12518  4E85 00 00 00 00 
12518  4E89 00 00 00 00 
12518  4E8D 00 00 00 00 
12518  4E91 00 00 00 00 
12518  4E95 00 00 00 00 
12518  4E99 00 00 00 00 
12518  4E9D 00 00 00 00 
12518  4EA1 00 00 00 00 
12518  4EA5 00 00 00 00 
12518  4EA9 00 00 00 00 
12518  4EAD 00 00 00 00 
12518  4EB1 00 00 00 00 
12518  4EB5 00 00 00 00 
12518  4EB9 00 00 00 00 
12518  4EBD 00 00 00 00 
12518  4EC1 00 00 00 00 
12518  4EC5 00 00 00 00 
12518  4EC9 00 00 00 00 
12518  4ECD 00 00 00 00 
12518  4ED1 00 00 00 00 
12518  4ED5 00 00 00 00 
12518  4ED9 00 00 00 00 
12518  4EDD 00 00 00 00 
12518  4EE1 00 00 00 00 
12518  4EE5 00 00 00 00 
12518  4EE9 00 00 00 00 
12518  4EED 00 00 00 00 
12518  4EF1 00 00 00 00 
12518  4EF5 00 00 00 00 
12518  4EF9 00 00 00 00 
12518  4EFD 00 00 00 00 
12518  4F01 00 00 00 00 
12518  4F05 00 00 00 00 
12518  4F09 00 00 00 00 
12518  4F0D 00 00 00 00 
12518  4F11 00 00 00 00 
12518  4F15 00 00 00 00 
12518  4F19 00 00 00 00 
12518  4F1D 00 00 00 00 
12518  4F21 00 00 00 00 
12518  4F25 00 00 00 00 
12518  4F29 00 00 00 00 
12518  4F2D 00 00 00 00 
12518  4F31 00 00 00 00 
12518  4F35 00 00 00 00 
12518  4F39 00 00 00 00 
12518  4F3D 00 00 00 00 
12518  4F41 00 00 00 00 
12518  4F45 00 00 00 00 
12518  4F49 00 00 00 00 
12518  4F4D 00 00 00 00 
12518  4F51 00 00 00 00 
12518  4F55 00 00 00 00 
12518  4F59 00 00 00 00 
12518  4F5D 00 00 00 00 
12518  4F61 00 00 00 00 
12518  4F65 00 00 00 00 
12518  4F69 00 00 00 00 
12518  4F6D 00 00 00 00 
12518  4F71 00 00 00 00 
12518  4F75 00 00 00 00 
12518  4F79 00 00 00 00 
12519  4F7D 00 00       _int_const: .fill 2, 0
12520  4F7F 00 00       _program: .fill 2, 0
12521  4F81 00 00       _bin_out: .fill 2, 0
12522  4F83 00 00       _bin_p: .fill 2, 0
12523  4F85 00 00       _opcode_table: .fill 2, 0
12524  4F87 00 00 00 00 _prog_stack_data: .fill 20, 0
12524  4F8B 00 00 00 00 
12524  4F8F 00 00 00 00 
12524  4F93 00 00 00 00 
12524  4F97 00 00 00 00 
12525  4F9B 00 00       _prog_tos: .fill 2, 0
12526  4F9D 00 00       _prog_size: .fill 2, 0
12527  4F9F             _symbols_data: 
12528  4F9F 00 00       .dw 
12529  4FA1 D2 4F D4 4F .dw _s8, _s9, _s9, _s8, _s8, _s8, _s9, _s9, 
12529  4FA5 D4 4F D2 4F 
12529  4FA9 D2 4F D2 4F 
12529  4FAD D4 4F D4 4F 
12530  4FB1 6F 72 67 00 _s0: .db "org", 0
12531  4FB5 69 6E 63 6C _s1: .db "include", 0
12531  4FB9 75 64 65 00 
12532  4FBD 64 61 74 61 _s2: .db "data", 0
12532  4FC1 00 
12533  4FC2 74 65 78 74 _s3: .db "text", 0
12533  4FC6 00 
12534  4FC7 64 62 00    _s4: .db "db", 0
12535  4FCA 64 77 00    _s5: .db "dw", 0
12536  4FCD 65 6E 64 00 _s6: .db "end", 0
12537  4FD1 00          _s7: .db "", 0
12538  4FD2 40 00       _s8: .db "@", 0
12539  4FD4 23 00       _s9: .db "#", 0
12540  4FD6 0A 00       _s10: .db "\n", 0
12541  4FD8 2E 2F 63 6F _s11: .db "./config.d/op_tbl", 0
12541  4FDC 6E 66 69 67 
12541  4FE0 2E 64 2F 6F 
12541  4FE4 70 5F 74 62 
12541  4FE8 6C 00 
12542  4FEA 50 61 72 73 _s12: .db "Parsing DATA section...", 0
12542  4FEE 69 6E 67 20 
12542  4FF2 44 41 54 41 
12542  4FF6 20 73 65 63 
12542  4FFA 74 69 6F 6E 
12542  4FFE 2E 2E 2E 00 
12543  5002 44 61 74 61 _s13: .db "Data segment not found.", 0
12543  5006 20 73 65 67 
12543  500A 6D 65 6E 74 
12543  500E 20 6E 6F 74 
12543  5012 20 66 6F 75 
12543  5016 6E 64 2E 00 
12544  501A 2E 64 62 3A _s14: .db ".db: ", 0
12544  501E 20 00 
12545  5020 2C 20 00    _s15: .db ", ", 0
12546  5023 2E 64 77 3A _s16: .db ".dw: ", 0
12546  5027 20 00 
12547  5029 44 6F 6E 65 _s17: .db "Done.\n", 0
12547  502D 2E 0A 00 
12548  5030 49 6E 74 65 _s18: .db "Integer constant expected in .org directive.", 0
12548  5034 67 65 72 20 
12548  5038 63 6F 6E 73 
12548  503C 74 61 6E 74 
12548  5040 20 65 78 70 
12548  5044 65 63 74 65 
12548  5048 64 20 69 6E 
12548  504C 20 2E 6F 72 
12548  5050 67 20 64 69 
12548  5054 72 65 63 74 
12548  5058 69 76 65 2E 
12548  505C 00 
12549  505D 50 61 72 73 _s19: .db "Parsing labels and directives...\n", 0
12549  5061 69 6E 67 20 
12549  5065 6C 61 62 65 
12549  5069 6C 73 20 61 
12549  506D 6E 64 20 64 
12549  5071 69 72 65 63 
12549  5075 74 69 76 65 
12549  5079 73 2E 2E 2E 
12549  507D 0A 00 
12550  507F 2E 00       _s20: .db ".", 0
12551  5081 0A 44 6F 6E _s21: .db "\nDone.\n", 0
12551  5085 65 2E 0A 00 
12552  5089 4F 72 67 3A _s22: .db "Org: %s\n", 0
12552  508D 20 25 73 0A 
12552  5091 00 
12553  5092 0A 4C 61 62 _s23: .db "\nLabels list:\n", 0
12553  5096 65 6C 73 20 
12553  509A 6C 69 73 74 
12553  509E 3A 0A 00 
12554  50A1 25 73 3A 20 _s24: .db "%s: %x\n", 0
12554  50A5 25 78 0A 00 
12555  50A9 20 2E 00    _s25: .db " .", 0
12556  50AC 20 00       _s26: .db " ", 0
12557  50AE 4D 61 78 69 _s27: .db "Maximum number of operands per instruction is 2.", 0
12557  50B2 6D 75 6D 20 
12557  50B6 6E 75 6D 62 
12557  50BA 65 72 20 6F 
12557  50BE 66 20 6F 70 
12557  50C2 65 72 61 6E 
12557  50C6 64 73 20 70 
12557  50CA 65 72 20 69 
12557  50CE 6E 73 74 72 
12557  50D2 75 63 74 69 
12557  50D6 6F 6E 20 69 
12557  50DA 73 20 32 2E 
12557  50DE 00 
12558  50DF 38 62 69 74 _s28: .db "8bit operand expected but 16bit label given.", 0
12558  50E3 20 6F 70 65 
12558  50E7 72 61 6E 64 
12558  50EB 20 65 78 70 
12558  50EF 65 63 74 65 
12558  50F3 64 20 62 75 
12558  50F7 74 20 31 36 
12558  50FB 62 69 74 20 
12558  50FF 6C 61 62 65 
12558  5103 6C 20 67 69 
12558  5107 76 65 6E 2E 
12558  510B 00 
12559  510C 25 78 28 25 _s29: .db "%x(%d): %s\n", 0
12559  5110 64 29 3A 20 
12559  5114 25 73 0A 00 
12560  5118 55 6E 64 65 _s30: .db "Undeclared label: ", 0
12560  511C 63 6C 61 72 
12560  5120 65 64 20 6C 
12560  5124 61 62 65 6C 
12560  5128 3A 20 00 
12561  512B 50 61 72 73 _s31: .db "Parsing TEXT section...\n", 0
12561  512F 69 6E 67 20 
12561  5133 54 45 58 54 
12561  5137 20 73 65 63 
12561  513B 74 69 6F 6E 
12561  513F 2E 2E 2E 0A 
12561  5143 00 
12562  5144 54 45 58 54 _s32: .db "TEXT section not found.", 0
12562  5148 20 73 65 63 
12562  514C 74 69 6F 6E 
12562  5150 20 6E 6F 74 
12562  5154 20 66 6F 75 
12562  5158 6E 64 2E 00 
12563  515C 54 45 58 54 _s33: .db "TEXT section end not found.", 0
12563  5160 20 73 65 63 
12563  5164 74 69 6F 6E 
12563  5168 20 65 6E 64 
12563  516C 20 6E 6F 74 
12563  5170 20 66 6F 75 
12563  5174 6E 64 2E 00 
12564  5178 55 6E 65 78 _s34: .db "Unexpected directive.", 0
12564  517C 70 65 63 74 
12564  5180 65 64 20 64 
12564  5184 69 72 65 63 
12564  5188 74 69 76 65 
12564  518C 2E 00 
12565  518E 44 6F 6E 65 _s35: .db "Done.\n\n", 0
12565  5192 2E 0A 0A 00 
12566  5196 50 72 6F 67 _s36: .db "Prog Offset: %x\n", 0
12566  519A 20 4F 66 66 
12566  519E 73 65 74 3A 
12566  51A2 20 25 78 0A 
12566  51A6 00 
12567  51A7 50 72 6F 67 _s37: .db "Prog value : %c\n", 0
12567  51AB 20 76 61 6C 
12567  51AF 75 65 20 3A 
12567  51B3 20 25 63 0A 
12567  51B7 00 
12568  51B8 54 6F 6B 65 _s38: .db "Token      : %s\n", 0
12568  51BC 6E 20 20 20 
12568  51C0 20 20 20 3A 
12568  51C4 20 25 73 0A 
12568  51C8 00 
12569  51C9 54 6F 6B 20 _s39: .db "Tok        : %d\n", 0
12569  51CD 20 20 20 20 
12569  51D1 20 20 20 3A 
12569  51D5 20 25 64 0A 
12569  51D9 00 
12570  51DA 54 6F 6B 74 _s40: .db "Toktype    : %d\n", 0
12570  51DE 79 70 65 20 
12570  51E2 20 20 20 3A 
12570  51E6 20 25 64 0A 
12570  51EA 00 
12571  51EB 53 74 72 69 _s41: .db "StringConst: %s\n", 0
12571  51EF 6E 67 43 6F 
12571  51F3 6E 73 74 3A 
12571  51F7 20 25 73 0A 
12571  51FB 00 
12572  51FC 50 43 20 20 _s42: .db "PC         : %x\n", 0
12572  5200 20 20 20 20 
12572  5204 20 20 20 3A 
12572  5208 20 25 78 0A 
12572  520C 00 
12573  520D 0A 41 73 73 _s43: .db "\nAssembly complete.\n", 0
12573  5211 65 6D 62 6C 
12573  5215 79 20 63 6F 
12573  5219 6D 70 6C 65 
12573  521D 74 65 2E 0A 
12573  5221 00 
12574  5222 50 72 6F 67 _s44: .db "Program size: %d\n", 0
12574  5226 72 61 6D 20 
12574  522A 73 69 7A 65 
12574  522E 3A 20 25 64 
12574  5232 0A 00 
12575  5234 4C 69 73 74 _s45: .db "Listing: \n", 0
12575  5238 69 6E 67 3A 
12575  523C 20 0A 00 
12576  523F 61 00       _s46: .db "a", 0
12577  5241 61 6C 00    _s47: .db "al", 0
12578  5244 61 68 00    _s48: .db "ah", 0
12579  5247 62 00       _s49: .db "b", 0
12580  5249 62 6C 00    _s50: .db "bl", 0
12581  524C 62 68 00    _s51: .db "bh", 0
12582  524F 63 00       _s52: .db "c", 0
12583  5251 63 6C 00    _s53: .db "cl", 0
12584  5254 63 68 00    _s54: .db "ch", 0
12585  5257 64 00       _s55: .db "d", 0
12586  5259 64 6C 00    _s56: .db "dl", 0
12587  525C 64 68 00    _s57: .db "dh", 0
12588  525F 67 00       _s58: .db "g", 0
12589  5261 67 6C 00    _s59: .db "gl", 0
12590  5264 67 68 00    _s60: .db "gh", 0
12591  5267 70 63 00    _s61: .db "pc", 0
12592  526A 73 70 00    _s62: .db "sp", 0
12593  526D 62 70 00    _s63: .db "bp", 0
12594  5270 73 69 00    _s64: .db "si", 0
12595  5273 64 69 00    _s65: .db "di", 0
12596  5276 77 6F 72 64 _s66: .db "word", 0
12596  527A 00 
12597  527B 62 79 74 65 _s67: .db "byte", 0
12597  527F 00 
12598  5280 63 6D 70 73 _s68: .db "cmpsb", 0
12598  5284 62 00 
12599  5286 6D 6F 76 73 _s69: .db "movsb", 0
12599  528A 62 00 
12600  528C 73 74 6F 73 _s70: .db "stosb", 0
12600  5290 62 00 
12601  5292 64 65 66 69 _s71: .db "define", 0
12601  5296 6E 65 00 
12602  5299 4C 61 62 65 _s72: .db "Label does not exist: ", 0
12602  529D 6C 20 64 6F 
12602  52A1 65 73 20 6E 
12602  52A5 6F 74 20 65 
12602  52A9 78 69 73 74 
12602  52AD 3A 20 00 
12603  52B0 43 6C 6F 73 _s73: .db "Closing single quotes expected.", 0
12603  52B4 69 6E 67 20 
12603  52B8 73 69 6E 67 
12603  52BC 6C 65 20 71 
12603  52C0 75 6F 74 65 
12603  52C4 73 20 65 78 
12603  52C8 70 65 63 74 
12603  52CC 65 64 2E 00 
12604  52D0 44 6F 75 62 _s74: .db "Double quotes expected", 0
12604  52D4 6C 65 20 71 
12604  52D8 75 6F 74 65 
12604  52DC 73 20 65 78 
12604  52E0 70 65 63 74 
12604  52E4 65 64 00 
12605  52E7 54 4F 4B 45 _s75: .db "TOKEN ERROR. Prog: %x\n", 0
12605  52EB 4E 20 45 52 
12605  52EF 52 4F 52 2E 
12605  52F3 20 50 72 6F 
12605  52F7 67 3A 20 25 
12605  52FB 78 0A 00 
12606  52FE 50 72 6F 67 _s76: .db "ProgVal: %x", 0
12606  5302 56 61 6C 3A 
12606  5306 20 25 78 00 
12607  530A 0A 20 54 65 _s77: .db "\n Text after prog: %s\n", 0
12607  530E 78 74 20 61 
12607  5312 66 74 65 72 
12607  5316 20 70 72 6F 
12607  531A 67 3A 20 25 
12607  531E 73 0A 00 
12608  5321 0A 45 72 72 _s78: .db "\nError: %s\n", 0
12608  5325 6F 72 3A 20 
12608  5329 25 73 0A 00 
12609  532D 0A 45 72 72 _s79: .db "\nError: %s %s\n", 0
12609  5331 6F 72 3A 20 
12609  5335 25 73 20 25 
12609  5339 73 0A 00 
12610  533C 43 61 6E 6E _s80: .db "Cannot push prog. Stack overflow.", 0
12610  5340 6F 74 20 70 
12610  5344 75 73 68 20 
12610  5348 70 72 6F 67 
12610  534C 2E 20 53 74 
12610  5350 61 63 6B 20 
12610  5354 6F 76 65 72 
12610  5358 66 6C 6F 77 
12610  535C 2E 00 
12611  535E 43 61 6E 6E _s81: .db "Cannot pop prog. Stack overflow.", 0
12611  5362 6F 74 20 70 
12611  5366 6F 70 20 70 
12611  536A 72 6F 67 2E 
12611  536E 20 53 74 61 
12611  5372 63 6B 20 6F 
12611  5376 76 65 72 66 
12611  537A 6C 6F 77 2E 
12611  537E 00 
12612  537F 55 6E 65 78 _s82: .db "Unexpected format in printf.", 0
12612  5383 70 65 63 74 
12612  5387 65 64 20 66 
12612  538B 6F 72 6D 61 
12612  538F 74 20 69 6E 
12612  5393 20 70 72 69 
12612  5397 6E 74 66 2E 
12612  539B 00 
12613  539C 45 72 72 6F _s83: .db "Error: Unknown argument type.\n", 0
12613  53A0 72 3A 20 55 
12613  53A4 6E 6B 6E 6F 
12613  53A8 77 6E 20 61 
12613  53AC 72 67 75 6D 
12613  53B0 65 6E 74 20 
12613  53B4 74 79 70 65 
12613  53B8 2E 0A 00 
12614  53BB             
12615  53BB BD 53       _heap_top: .dw _heap
12616  53BD 00          _heap: .db 0
12617  53BE             ; --- END DATA SEGMENT
12618  53BE             
12619  53BE             .end
tasm: Number of errors = 0
