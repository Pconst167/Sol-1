0001   0000             ; --- FILENAME: ../solarium/asm/asm.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; char *p; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; print("\n"); 
0013   040B                            
0014   040B             ; --- START FUNCTION CALL
0015   040B                            
0016   040B 26 22 50      mov b, _s10 ; "\n"
0017   040E FD AB         swp b
0018   0410 D8            push b
0019   0411 07 7C 3E      call print
0020   0414 51 02 00      add sp, 2
0021   0417             ; --- END FUNCTION CALL
0022   0417             ; program = alloc(16384); 
0023   0417 3B CB 4F      mov d, _program ; $program
0024   041A DA            push d
0025   041B                            
0026   041B             ; --- START FUNCTION CALL
0027   041B                            
0028   041B FD 2E 00 40   mov32 cb, $00004000
0028   041F 00 00 
0029   0421 FD AB         swp b
0030   0423 D8            push b
0031   0424 07 95 3E      call alloc
0032   0427 51 02 00      add sp, 2
0033   042A             ; --- END FUNCTION CALL
0034   042A E7            pop d
0035   042B FD 43         mov [d], b
0036   042D             ; bin_out = alloc(16384); 
0037   042D 3B CD 4F      mov d, _bin_out ; $bin_out
0038   0430 DA            push d
0039   0431                            
0040   0431             ; --- START FUNCTION CALL
0041   0431                            
0042   0431 FD 2E 00 40   mov32 cb, $00004000
0042   0435 00 00 
0043   0437 FD AB         swp b
0044   0439 D8            push b
0045   043A 07 95 3E      call alloc
0046   043D 51 02 00      add sp, 2
0047   0440             ; --- END FUNCTION CALL
0048   0440 E7            pop d
0049   0441 FD 43         mov [d], b
0050   0443             ; opcode_table = alloc(12310); 
0051   0443 3B D1 4F      mov d, _opcode_table ; $opcode_table
0052   0446 DA            push d
0053   0447                            
0054   0447             ; --- START FUNCTION CALL
0055   0447                            
0056   0447 FD 2E 16 30   mov32 cb, $00003016
0056   044B 00 00 
0057   044D FD AB         swp b
0058   044F D8            push b
0059   0450 07 95 3E      call alloc
0060   0453 51 02 00      add sp, 2
0061   0456             ; --- END FUNCTION CALL
0062   0456 E7            pop d
0063   0457 FD 43         mov [d], b
0064   0459             ; loadfile(0x0000, program); 
0065   0459                            
0066   0459             ; --- START FUNCTION CALL
0067   0459                            
0068   0459 3B CB 4F      mov d, _program ; $program
0069   045C 2A            mov b, [d]
0070   045D 38 00 00      mov c, 0
0071   0460 FD AB         swp b
0072   0462 D8            push b
0073   0463                            
0074   0463 FD 2E 00 00   mov32 cb, $00000000
0074   0467 00 00 
0075   0469 FD AB         swp b
0076   046B D8            push b
0077   046C 07 C2 3D      call loadfile
0078   046F 51 04 00      add sp, 4
0079   0472             ; --- END FUNCTION CALL
0080   0472             ; loadfile("./config.d/op_tbl", opcode_table); 
0081   0472                            
0082   0472             ; --- START FUNCTION CALL
0083   0472                            
0084   0472 3B D1 4F      mov d, _opcode_table ; $opcode_table
0085   0475 2A            mov b, [d]
0086   0476 38 00 00      mov c, 0
0087   0479 FD AB         swp b
0088   047B D8            push b
0089   047C                            
0090   047C 26 24 50      mov b, _s11 ; "./config.d/op_tbl"
0091   047F FD AB         swp b
0092   0481 D8            push b
0093   0482 07 C2 3D      call loadfile
0094   0485 51 04 00      add sp, 4
0095   0488             ; --- END FUNCTION CALL
0096   0488             ; p = program; 
0097   0488 FA FF FF      lea d, [bp + -1] ; $p
0098   048B DA            push d
0099   048C                            
0100   048C 3B CB 4F      mov d, _program ; $program
0101   048F 2A            mov b, [d]
0102   0490 38 00 00      mov c, 0
0103   0493 E7            pop d
0104   0494 FD 43         mov [d], b
0105   0496             ; while(*p) p++; 
0106   0496             _while1_cond:
0107   0496                            
0108   0496 FA FF FF      lea d, [bp + -1] ; $p
0109   0499 2A            mov b, [d]
0110   049A 38 00 00      mov c, 0
0111   049D 74            mov d, b
0112   049E 32            mov bl, [d]
0113   049F A7 00         mov bh, 0
0114   04A1 38 00 00      mov c, 0
0115   04A4 C0 00 00      cmp b, 0
0116   04A7 C6 BD 04      je _while1_exit
0117   04AA             _while1_block:
0118   04AA             ; p++; 
0119   04AA                            
0120   04AA FA FF FF      lea d, [bp + -1] ; $p
0121   04AD 2A            mov b, [d]
0122   04AE 38 00 00      mov c, 0
0123   04B1 FD 77         inc b
0124   04B3 FA FF FF      lea d, [bp + -1] ; $p
0125   04B6 FD 43         mov [d], b
0126   04B8 FD 7D         dec b
0127   04BA 0A 96 04      jmp _while1_cond
0128   04BD             _while1_exit:
0129   04BD             ; while(is_space(*p)) p--; 
0130   04BD             _while2_cond:
0131   04BD                            
0132   04BD             ; --- START FUNCTION CALL
0133   04BD                            
0134   04BD FA FF FF      lea d, [bp + -1] ; $p
0135   04C0 2A            mov b, [d]
0136   04C1 38 00 00      mov c, 0
0137   04C4 74            mov d, b
0138   04C5 32            mov bl, [d]
0139   04C6 A7 00         mov bh, 0
0140   04C8 38 00 00      mov c, 0
0141   04CB DD            push bl
0142   04CC 07 C6 3E      call is_space
0143   04CF 51 01 00      add sp, 1
0144   04D2             ; --- END FUNCTION CALL
0145   04D2 C0 00 00      cmp b, 0
0146   04D5 C6 EB 04      je _while2_exit
0147   04D8             _while2_block:
0148   04D8             ; p--; 
0149   04D8                            
0150   04D8 FA FF FF      lea d, [bp + -1] ; $p
0151   04DB 2A            mov b, [d]
0152   04DC 38 00 00      mov c, 0
0153   04DF FD 7D         dec b
0154   04E1 FA FF FF      lea d, [bp + -1] ; $p
0155   04E4 FD 43         mov [d], b
0156   04E6 FD 77         inc b
0157   04E8 0A BD 04      jmp _while2_cond
0158   04EB             _while2_exit:
0159   04EB             ; p++; 
0160   04EB                            
0161   04EB FA FF FF      lea d, [bp + -1] ; $p
0162   04EE 2A            mov b, [d]
0163   04EF 38 00 00      mov c, 0
0164   04F2 FD 77         inc b
0165   04F4 FA FF FF      lea d, [bp + -1] ; $p
0166   04F7 FD 43         mov [d], b
0167   04F9 FD 7D         dec b
0168   04FB             ; *p = '\0'; 
0169   04FB FA FF FF      lea d, [bp + -1] ; $p
0170   04FE 2A            mov b, [d]
0171   04FF 38 00 00      mov c, 0
0172   0502 D8            push b
0173   0503                            
0174   0503 FD 2E 00 00   mov32 cb, $00000000
0174   0507 00 00 
0175   0509 E7            pop d
0176   050A FD 3E         mov [d], bl
0177   050C             ; prog = program; 
0178   050C 3B 87 4E      mov d, _prog ; $prog
0179   050F DA            push d
0180   0510                            
0181   0510 3B CB 4F      mov d, _program ; $program
0182   0513 2A            mov b, [d]
0183   0514 38 00 00      mov c, 0
0184   0517 E7            pop d
0185   0518 FD 43         mov [d], b
0186   051A             ; bin_p = bin_out + _org; 
0187   051A 3B CF 4F      mov d, _bin_p ; $bin_p
0188   051D DA            push d
0189   051E                            
0190   051E 3B CD 4F      mov d, _bin_out ; $bin_out
0191   0521 2A            mov b, [d]
0192   0522 38 00 00      mov c, 0
0193   0525             ; --- START TERMS
0194   0525 D7            push a
0195   0526 11            mov a, b
0196   0527 3B 7E 4E      mov d, __org ; $_org
0197   052A 2A            mov b, [d]
0198   052B 38 00 00      mov c, 0
0199   052E 56            add b, a
0200   052F E4            pop a
0201   0530             ; --- END TERMS
0202   0530 E7            pop d
0203   0531 FD 43         mov [d], b
0204   0533             ; pc = _org; 
0205   0533 3B 80 4E      mov d, _pc ; $pc
0206   0536 DA            push d
0207   0537                            
0208   0537 3B 7E 4E      mov d, __org ; $_org
0209   053A 2A            mov b, [d]
0210   053B 38 00 00      mov c, 0
0211   053E E7            pop d
0212   053F FD 43         mov [d], b
0213   0541             ; prog_size = 0; 
0214   0541 3B E9 4F      mov d, _prog_size ; $prog_size
0215   0544 DA            push d
0216   0545                            
0217   0545 FD 2E 00 00   mov32 cb, $00000000
0217   0549 00 00 
0218   054B E7            pop d
0219   054C FD 43         mov [d], b
0220   054E             ; label_directive_scan(); 
0221   054E                            
0222   054E             ; --- START FUNCTION CALL
0223   054E 07 20 0A      call label_directive_scan
0224   0551             ; prog_size = 0; 
0225   0551 3B E9 4F      mov d, _prog_size ; $prog_size
0226   0554 DA            push d
0227   0555                            
0228   0555 FD 2E 00 00   mov32 cb, $00000000
0228   0559 00 00 
0229   055B E7            pop d
0230   055C FD 43         mov [d], b
0231   055E             ; parse_text(); 
0232   055E                            
0233   055E             ; --- START FUNCTION CALL
0234   055E 07 34 1C      call parse_text
0235   0561             ; parse_data(); 
0236   0561                            
0237   0561             ; --- START FUNCTION CALL
0238   0561 07 69 05      call parse_data
0239   0564             ; display_output(); 
0240   0564                            
0241   0564             ; --- START FUNCTION CALL
0242   0564 07 76 1E      call display_output
0243   0567 05 0B         syscall sys_terminate_proc
0244   0569             
0245   0569             parse_data:
0246   0569 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0247   056C             ; print("Parsing DATA section..."); 
0248   056C                            
0249   056C             ; --- START FUNCTION CALL
0250   056C                            
0251   056C 26 36 50      mov b, _s12 ; "Parsing DATA section..."
0252   056F FD AB         swp b
0253   0571 D8            push b
0254   0572 07 7C 3E      call print
0255   0575 51 02 00      add sp, 2
0256   0578             ; --- END FUNCTION CALL
0257   0578             ; for(;;){ 
0258   0578             _for3_init:
0259   0578             _for3_cond:
0260   0578             _for3_block:
0261   0578             ; get(); 
0262   0578                            
0263   0578             ; --- START FUNCTION CALL
0264   0578 07 78 2B      call get
0265   057B             ; if(toktype == END) error("Data segment not found."); 
0266   057B             _if4_cond:
0267   057B                            
0268   057B 3B 85 4E      mov d, _toktype ; $toktype
0269   057E 2A            mov b, [d]
0270   057F 38 00 00      mov c, 0
0271   0582             ; --- START RELATIONAL
0272   0582 D7            push a
0273   0583 11            mov a, b
0274   0584 FD 2E 07 00   mov32 cb, $7 ; enum element: END
0274   0588 00 00 
0275   058A B0            cmp a, b
0276   058B FD 71         seq ; ==
0277   058D E4            pop a
0278   058E             ; --- END RELATIONAL
0279   058E C0 00 00      cmp b, 0
0280   0591 C6 A3 05      je _if4_exit
0281   0594             _if4_TRUE:
0282   0594             ; error("Data segment not found."); 
0283   0594                            
0284   0594             ; --- START FUNCTION CALL
0285   0594                            
0286   0594 26 4E 50      mov b, _s13 ; "Data segment not found."
0287   0597 FD AB         swp b
0288   0599 D8            push b
0289   059A 07 82 39      call error
0290   059D 51 02 00      add sp, 2
0291   05A0             ; --- END FUNCTION CALL
0292   05A0 0A A3 05      jmp _if4_exit
0293   05A3             _if4_exit:
0294   05A3             ; if(tok == DOT){ 
0295   05A3             _if5_cond:
0296   05A3                            
0297   05A3 3B 83 4E      mov d, _tok ; $tok
0298   05A6 2A            mov b, [d]
0299   05A7 38 00 00      mov c, 0
0300   05AA             ; --- START RELATIONAL
0301   05AA D7            push a
0302   05AB 11            mov a, b
0303   05AC FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
0303   05B0 00 00 
0304   05B2 B0            cmp a, b
0305   05B3 FD 71         seq ; ==
0306   05B5 E4            pop a
0307   05B6             ; --- END RELATIONAL
0308   05B6 C0 00 00      cmp b, 0
0309   05B9 C6 E1 05      je _if5_exit
0310   05BC             _if5_TRUE:
0311   05BC             ; get(); 
0312   05BC                            
0313   05BC             ; --- START FUNCTION CALL
0314   05BC 07 78 2B      call get
0315   05BF             ; if(tok == DATA) break; 
0316   05BF             _if6_cond:
0317   05BF                            
0318   05BF 3B 83 4E      mov d, _tok ; $tok
0319   05C2 2A            mov b, [d]
0320   05C3 38 00 00      mov c, 0
0321   05C6             ; --- START RELATIONAL
0322   05C6 D7            push a
0323   05C7 11            mov a, b
0324   05C8 FD 2E 03 00   mov32 cb, $3 ; enum element: DATA
0324   05CC 00 00 
0325   05CE B0            cmp a, b
0326   05CF FD 71         seq ; ==
0327   05D1 E4            pop a
0328   05D2             ; --- END RELATIONAL
0329   05D2 C0 00 00      cmp b, 0
0330   05D5 C6 DE 05      je _if6_exit
0331   05D8             _if6_TRUE:
0332   05D8             ; break; 
0333   05D8 0A E4 05      jmp _for3_exit ; for break
0334   05DB 0A DE 05      jmp _if6_exit
0335   05DE             _if6_exit:
0336   05DE 0A E1 05      jmp _if5_exit
0337   05E1             _if5_exit:
0338   05E1             _for3_update:
0339   05E1 0A 78 05      jmp _for3_cond
0340   05E4             _for3_exit:
0341   05E4             ; for(;;){ 
0342   05E4             _for7_init:
0343   05E4             _for7_cond:
0344   05E4             _for7_block:
0345   05E4             ; get(); 
0346   05E4                            
0347   05E4             ; --- START FUNCTION CALL
0348   05E4 07 78 2B      call get
0349   05E7             ; if(tok == SEGMENT_END) break; 
0350   05E7             _if8_cond:
0351   05E7                            
0352   05E7 3B 83 4E      mov d, _tok ; $tok
0353   05EA 2A            mov b, [d]
0354   05EB 38 00 00      mov c, 0
0355   05EE             ; --- START RELATIONAL
0356   05EE D7            push a
0357   05EF 11            mov a, b
0358   05F0 FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
0358   05F4 00 00 
0359   05F6 B0            cmp a, b
0360   05F7 FD 71         seq ; ==
0361   05F9 E4            pop a
0362   05FA             ; --- END RELATIONAL
0363   05FA C0 00 00      cmp b, 0
0364   05FD C6 06 06      je _if8_exit
0365   0600             _if8_TRUE:
0366   0600             ; break; 
0367   0600 0A 27 08      jmp _for7_exit ; for break
0368   0603 0A 06 06      jmp _if8_exit
0369   0606             _if8_exit:
0370   0606             ; if(tok == DB){ 
0371   0606             _if9_cond:
0372   0606                             
0373   0606 3B 83 4E      mov d, _tok ; $tok
0374   0609 2A            mov b, [d]
0375   060A 38 00 00      mov c, 0
0376   060D             ; --- START RELATIONAL
0377   060D D7            push a
0378   060E 11            mov a, b
0379   060F FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0379   0613 00 00 
0380   0615 B0            cmp a, b
0381   0616 FD 71         seq ; ==
0382   0618 E4            pop a
0383   0619             ; --- END RELATIONAL
0384   0619 C0 00 00      cmp b, 0
0385   061C C6 09 07      je _if9_else
0386   061F             _if9_TRUE:
0387   061F             ; print(".db: "); 
0388   061F                             
0389   061F             ; --- START FUNCTION CALL
0390   061F                             
0391   061F 26 66 50      mov b, _s14 ; ".db: "
0392   0622 FD AB         swp b
0393   0624 D8            push b
0394   0625 07 7C 3E      call print
0395   0628 51 02 00      add sp, 2
0396   062B             ; --- END FUNCTION CALL
0397   062B             ; for(;;){ 
0398   062B             _for10_init:
0399   062B             _for10_cond:
0400   062B             _for10_block:
0401   062B             ; get(); 
0402   062B                             
0403   062B             ; --- START FUNCTION CALL
0404   062B 07 78 2B      call get
0405   062E             ; if(toktype == CHAR_CONST){ 
0406   062E             _if11_cond:
0407   062E                             
0408   062E 3B 85 4E      mov d, _toktype ; $toktype
0409   0631 2A            mov b, [d]
0410   0632 38 00 00      mov c, 0
0411   0635             ; --- START RELATIONAL
0412   0635 D7            push a
0413   0636 11            mov a, b
0414   0637 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0414   063B 00 00 
0415   063D B0            cmp a, b
0416   063E FD 71         seq ; ==
0417   0640 E4            pop a
0418   0641             ; --- END RELATIONAL
0419   0641 C0 00 00      cmp b, 0
0420   0644 C6 87 06      je _if11_else
0421   0647             _if11_TRUE:
0422   0647             ; emit_byte(string_const[0], 0); 
0423   0647                             
0424   0647             ; --- START FUNCTION CALL
0425   0647                             
0426   0647 FD 2E 00 00   mov32 cb, $00000000
0426   064B 00 00 
0427   064D DD            push bl
0428   064E                             
0429   064E 3B C9 4E      mov d, _string_const_data ; $string_const
0430   0651 D7            push a
0431   0652 DA            push d
0432   0653                             
0433   0653 FD 2E 00 00   mov32 cb, $00000000
0433   0657 00 00 
0434   0659 E7            pop d
0435   065A 5A            add d, b
0436   065B E4            pop a
0437   065C 32            mov bl, [d]
0438   065D A7 00         mov bh, 0
0439   065F 38 00 00      mov c, 0
0440   0662 DD            push bl
0441   0663 07 7D 27      call emit_byte
0442   0666 51 02 00      add sp, 2
0443   0669             ; --- END FUNCTION CALL
0444   0669             ; printx8(string_const[0]); 
0445   0669                             
0446   0669             ; --- START FUNCTION CALL
0447   0669                             
0448   0669 3B C9 4E      mov d, _string_const_data ; $string_const
0449   066C D7            push a
0450   066D DA            push d
0451   066E                             
0452   066E FD 2E 00 00   mov32 cb, $00000000
0452   0672 00 00 
0453   0674 E7            pop d
0454   0675 5A            add d, b
0455   0676 E4            pop a
0456   0677 32            mov bl, [d]
0457   0678 A7 00         mov bh, 0
0458   067A 38 00 00      mov c, 0
0459   067D DD            push bl
0460   067E 07 04 4D      call printx8
0461   0681 51 01 00      add sp, 1
0462   0684             ; --- END FUNCTION CALL
0463   0684 0A C6 06      jmp _if11_exit
0464   0687             _if11_else:
0465   0687             ; if(toktype == INTEGER_CONST){ 
0466   0687             _if12_cond:
0467   0687                             
0468   0687 3B 85 4E      mov d, _toktype ; $toktype
0469   068A 2A            mov b, [d]
0470   068B 38 00 00      mov c, 0
0471   068E             ; --- START RELATIONAL
0472   068E D7            push a
0473   068F 11            mov a, b
0474   0690 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0474   0694 00 00 
0475   0696 B0            cmp a, b
0476   0697 FD 71         seq ; ==
0477   0699 E4            pop a
0478   069A             ; --- END RELATIONAL
0479   069A C0 00 00      cmp b, 0
0480   069D C6 C6 06      je _if12_exit
0481   06A0             _if12_TRUE:
0482   06A0             ; emit_byte(int_const, 0); 
0483   06A0                             
0484   06A0             ; --- START FUNCTION CALL
0485   06A0                             
0486   06A0 FD 2E 00 00   mov32 cb, $00000000
0486   06A4 00 00 
0487   06A6 DD            push bl
0488   06A7                             
0489   06A7 3B C9 4F      mov d, _int_const ; $int_const
0490   06AA 2A            mov b, [d]
0491   06AB 38 00 00      mov c, 0
0492   06AE DD            push bl
0493   06AF 07 7D 27      call emit_byte
0494   06B2 51 02 00      add sp, 2
0495   06B5             ; --- END FUNCTION CALL
0496   06B5             ; printx8(int_const); 
0497   06B5                             
0498   06B5             ; --- START FUNCTION CALL
0499   06B5                             
0500   06B5 3B C9 4F      mov d, _int_const ; $int_const
0501   06B8 2A            mov b, [d]
0502   06B9 38 00 00      mov c, 0
0503   06BC DD            push bl
0504   06BD 07 04 4D      call printx8
0505   06C0 51 01 00      add sp, 1
0506   06C3             ; --- END FUNCTION CALL
0507   06C3 0A C6 06      jmp _if12_exit
0508   06C6             _if12_exit:
0509   06C6             _if11_exit:
0510   06C6             ; get(); 
0511   06C6                             
0512   06C6             ; --- START FUNCTION CALL
0513   06C6 07 78 2B      call get
0514   06C9             ; if(tok != COMMA){ 
0515   06C9             _if13_cond:
0516   06C9                             
0517   06C9 3B 83 4E      mov d, _tok ; $tok
0518   06CC 2A            mov b, [d]
0519   06CD 38 00 00      mov c, 0
0520   06D0             ; --- START RELATIONAL
0521   06D0 D7            push a
0522   06D1 11            mov a, b
0523   06D2 FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0523   06D6 00 00 
0524   06D8 B0            cmp a, b
0525   06D9 FD 72         sneq ; !=
0526   06DB E4            pop a
0527   06DC             ; --- END RELATIONAL
0528   06DC C0 00 00      cmp b, 0
0529   06DF C6 EB 06      je _if13_exit
0530   06E2             _if13_TRUE:
0531   06E2             ; back(); 
0532   06E2                             
0533   06E2             ; --- START FUNCTION CALL
0534   06E2 07 EB 27      call back
0535   06E5             ; break; 
0536   06E5 0A FA 06      jmp _for10_exit ; for break
0537   06E8 0A EB 06      jmp _if13_exit
0538   06EB             _if13_exit:
0539   06EB             ; print(", "); 
0540   06EB                             
0541   06EB             ; --- START FUNCTION CALL
0542   06EB                             
0543   06EB 26 6C 50      mov b, _s15 ; ", "
0544   06EE FD AB         swp b
0545   06F0 D8            push b
0546   06F1 07 7C 3E      call print
0547   06F4 51 02 00      add sp, 2
0548   06F7             ; --- END FUNCTION CALL
0549   06F7             _for10_update:
0550   06F7 0A 2B 06      jmp _for10_cond
0551   06FA             _for10_exit:
0552   06FA             ; print("\n"); 
0553   06FA                             
0554   06FA             ; --- START FUNCTION CALL
0555   06FA                             
0556   06FA 26 22 50      mov b, _s10 ; "\n"
0557   06FD FD AB         swp b
0558   06FF D8            push b
0559   0700 07 7C 3E      call print
0560   0703 51 02 00      add sp, 2
0561   0706             ; --- END FUNCTION CALL
0562   0706 0A 24 08      jmp _if9_exit
0563   0709             _if9_else:
0564   0709             ; if(tok == DW){ 
0565   0709             _if14_cond:
0566   0709                             
0567   0709 3B 83 4E      mov d, _tok ; $tok
0568   070C 2A            mov b, [d]
0569   070D 38 00 00      mov c, 0
0570   0710             ; --- START RELATIONAL
0571   0710 D7            push a
0572   0711 11            mov a, b
0573   0712 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
0573   0716 00 00 
0574   0718 B0            cmp a, b
0575   0719 FD 71         seq ; ==
0576   071B E4            pop a
0577   071C             ; --- END RELATIONAL
0578   071C C0 00 00      cmp b, 0
0579   071F C6 24 08      je _if14_exit
0580   0722             _if14_TRUE:
0581   0722             ; print(".dw: "); 
0582   0722                             
0583   0722             ; --- START FUNCTION CALL
0584   0722                             
0585   0722 26 6F 50      mov b, _s16 ; ".dw: "
0586   0725 FD AB         swp b
0587   0727 D8            push b
0588   0728 07 7C 3E      call print
0589   072B 51 02 00      add sp, 2
0590   072E             ; --- END FUNCTION CALL
0591   072E             ; for(;;){ 
0592   072E             _for15_init:
0593   072E             _for15_cond:
0594   072E             _for15_block:
0595   072E             ; get(); 
0596   072E                             
0597   072E             ; --- START FUNCTION CALL
0598   072E 07 78 2B      call get
0599   0731             ; if(toktype == CHAR_CONST){ 
0600   0731             _if16_cond:
0601   0731                             
0602   0731 3B 85 4E      mov d, _toktype ; $toktype
0603   0734 2A            mov b, [d]
0604   0735 38 00 00      mov c, 0
0605   0738             ; --- START RELATIONAL
0606   0738 D7            push a
0607   0739 11            mov a, b
0608   073A FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0608   073E 00 00 
0609   0740 B0            cmp a, b
0610   0741 FD 71         seq ; ==
0611   0743 E4            pop a
0612   0744             ; --- END RELATIONAL
0613   0744 C0 00 00      cmp b, 0
0614   0747 C6 9E 07      je _if16_else
0615   074A             _if16_TRUE:
0616   074A             ; emit_byte(string_const[0], 0); 
0617   074A                             
0618   074A             ; --- START FUNCTION CALL
0619   074A                             
0620   074A FD 2E 00 00   mov32 cb, $00000000
0620   074E 00 00 
0621   0750 DD            push bl
0622   0751                             
0623   0751 3B C9 4E      mov d, _string_const_data ; $string_const
0624   0754 D7            push a
0625   0755 DA            push d
0626   0756                             
0627   0756 FD 2E 00 00   mov32 cb, $00000000
0627   075A 00 00 
0628   075C E7            pop d
0629   075D 5A            add d, b
0630   075E E4            pop a
0631   075F 32            mov bl, [d]
0632   0760 A7 00         mov bh, 0
0633   0762 38 00 00      mov c, 0
0634   0765 DD            push bl
0635   0766 07 7D 27      call emit_byte
0636   0769 51 02 00      add sp, 2
0637   076C             ; --- END FUNCTION CALL
0638   076C             ; emit_byte(0, 0); 
0639   076C                             
0640   076C             ; --- START FUNCTION CALL
0641   076C                             
0642   076C FD 2E 00 00   mov32 cb, $00000000
0642   0770 00 00 
0643   0772 DD            push bl
0644   0773                             
0645   0773 FD 2E 00 00   mov32 cb, $00000000
0645   0777 00 00 
0646   0779 DD            push bl
0647   077A 07 7D 27      call emit_byte
0648   077D 51 02 00      add sp, 2
0649   0780             ; --- END FUNCTION CALL
0650   0780             ; printx8(string_const[0]); 
0651   0780                             
0652   0780             ; --- START FUNCTION CALL
0653   0780                             
0654   0780 3B C9 4E      mov d, _string_const_data ; $string_const
0655   0783 D7            push a
0656   0784 DA            push d
0657   0785                             
0658   0785 FD 2E 00 00   mov32 cb, $00000000
0658   0789 00 00 
0659   078B E7            pop d
0660   078C 5A            add d, b
0661   078D E4            pop a
0662   078E 32            mov bl, [d]
0663   078F A7 00         mov bh, 0
0664   0791 38 00 00      mov c, 0
0665   0794 DD            push bl
0666   0795 07 04 4D      call printx8
0667   0798 51 01 00      add sp, 1
0668   079B             ; --- END FUNCTION CALL
0669   079B 0A E1 07      jmp _if16_exit
0670   079E             _if16_else:
0671   079E             ; if(toktype == INTEGER_CONST){ 
0672   079E             _if17_cond:
0673   079E                             
0674   079E 3B 85 4E      mov d, _toktype ; $toktype
0675   07A1 2A            mov b, [d]
0676   07A2 38 00 00      mov c, 0
0677   07A5             ; --- START RELATIONAL
0678   07A5 D7            push a
0679   07A6 11            mov a, b
0680   07A7 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0680   07AB 00 00 
0681   07AD B0            cmp a, b
0682   07AE FD 71         seq ; ==
0683   07B0 E4            pop a
0684   07B1             ; --- END RELATIONAL
0685   07B1 C0 00 00      cmp b, 0
0686   07B4 C6 E1 07      je _if17_exit
0687   07B7             _if17_TRUE:
0688   07B7             ; emit_word(int_const, 0); 
0689   07B7                             
0690   07B7             ; --- START FUNCTION CALL
0691   07B7                             
0692   07B7 FD 2E 00 00   mov32 cb, $00000000
0692   07BB 00 00 
0693   07BD DD            push bl
0694   07BE                             
0695   07BE 3B C9 4F      mov d, _int_const ; $int_const
0696   07C1 2A            mov b, [d]
0697   07C2 38 00 00      mov c, 0
0698   07C5 FD AB         swp b
0699   07C7 D8            push b
0700   07C8 07 B5 27      call emit_word
0701   07CB 51 03 00      add sp, 3
0702   07CE             ; --- END FUNCTION CALL
0703   07CE             ; printx16(int_const); 
0704   07CE                             
0705   07CE             ; --- START FUNCTION CALL
0706   07CE                             
0707   07CE 3B C9 4F      mov d, _int_const ; $int_const
0708   07D1 2A            mov b, [d]
0709   07D2 38 00 00      mov c, 0
0710   07D5 FD AB         swp b
0711   07D7 D8            push b
0712   07D8 07 B3 42      call printx16
0713   07DB 51 02 00      add sp, 2
0714   07DE             ; --- END FUNCTION CALL
0715   07DE 0A E1 07      jmp _if17_exit
0716   07E1             _if17_exit:
0717   07E1             _if16_exit:
0718   07E1             ; get(); 
0719   07E1                             
0720   07E1             ; --- START FUNCTION CALL
0721   07E1 07 78 2B      call get
0722   07E4             ; if(tok != COMMA){ 
0723   07E4             _if18_cond:
0724   07E4                             
0725   07E4 3B 83 4E      mov d, _tok ; $tok
0726   07E7 2A            mov b, [d]
0727   07E8 38 00 00      mov c, 0
0728   07EB             ; --- START RELATIONAL
0729   07EB D7            push a
0730   07EC 11            mov a, b
0731   07ED FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0731   07F1 00 00 
0732   07F3 B0            cmp a, b
0733   07F4 FD 72         sneq ; !=
0734   07F6 E4            pop a
0735   07F7             ; --- END RELATIONAL
0736   07F7 C0 00 00      cmp b, 0
0737   07FA C6 06 08      je _if18_exit
0738   07FD             _if18_TRUE:
0739   07FD             ; back(); 
0740   07FD                             
0741   07FD             ; --- START FUNCTION CALL
0742   07FD 07 EB 27      call back
0743   0800             ; break; 
0744   0800 0A 15 08      jmp _for15_exit ; for break
0745   0803 0A 06 08      jmp _if18_exit
0746   0806             _if18_exit:
0747   0806             ; print(", "); 
0748   0806                             
0749   0806             ; --- START FUNCTION CALL
0750   0806                             
0751   0806 26 6C 50      mov b, _s15 ; ", "
0752   0809 FD AB         swp b
0753   080B D8            push b
0754   080C 07 7C 3E      call print
0755   080F 51 02 00      add sp, 2
0756   0812             ; --- END FUNCTION CALL
0757   0812             _for15_update:
0758   0812 0A 2E 07      jmp _for15_cond
0759   0815             _for15_exit:
0760   0815             ; print("\n"); 
0761   0815                             
0762   0815             ; --- START FUNCTION CALL
0763   0815                             
0764   0815 26 22 50      mov b, _s10 ; "\n"
0765   0818 FD AB         swp b
0766   081A D8            push b
0767   081B 07 7C 3E      call print
0768   081E 51 02 00      add sp, 2
0769   0821             ; --- END FUNCTION CALL
0770   0821 0A 24 08      jmp _if14_exit
0771   0824             _if14_exit:
0772   0824             _if9_exit:
0773   0824             _for7_update:
0774   0824 0A E4 05      jmp _for7_cond
0775   0827             _for7_exit:
0776   0827             ; print("Done.\n"); 
0777   0827                             
0778   0827             ; --- START FUNCTION CALL
0779   0827                             
0780   0827 26 75 50      mov b, _s17 ; "Done.\n"
0781   082A FD AB         swp b
0782   082C D8            push b
0783   082D 07 7C 3E      call print
0784   0830 51 02 00      add sp, 2
0785   0833             ; --- END FUNCTION CALL
0786   0833 F9            leave
0787   0834 09            ret
0788   0835             
0789   0835             parse_directive:
0790   0835 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0791   0838             ; get(); 
0792   0838                             
0793   0838             ; --- START FUNCTION CALL
0794   0838 07 78 2B      call get
0795   083B             ; if(tok == ORG){ 
0796   083B             _if19_cond:
0797   083B                             
0798   083B 3B 83 4E      mov d, _tok ; $tok
0799   083E 2A            mov b, [d]
0800   083F 38 00 00      mov c, 0
0801   0842             ; --- START RELATIONAL
0802   0842 D7            push a
0803   0843 11            mov a, b
0804   0844 FD 2E 01 00   mov32 cb, $1 ; enum element: ORG
0804   0848 00 00 
0805   084A B0            cmp a, b
0806   084B FD 71         seq ; ==
0807   084D E4            pop a
0808   084E             ; --- END RELATIONAL
0809   084E C0 00 00      cmp b, 0
0810   0851 C6 90 08      je _if19_else
0811   0854             _if19_TRUE:
0812   0854             ; get(); 
0813   0854                             
0814   0854             ; --- START FUNCTION CALL
0815   0854 07 78 2B      call get
0816   0857             ; if(toktype != INTEGER_CONST) error("Integer constant expected in .org directive."); 
0817   0857             _if20_cond:
0818   0857                             
0819   0857 3B 85 4E      mov d, _toktype ; $toktype
0820   085A 2A            mov b, [d]
0821   085B 38 00 00      mov c, 0
0822   085E             ; --- START RELATIONAL
0823   085E D7            push a
0824   085F 11            mov a, b
0825   0860 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0825   0864 00 00 
0826   0866 B0            cmp a, b
0827   0867 FD 72         sneq ; !=
0828   0869 E4            pop a
0829   086A             ; --- END RELATIONAL
0830   086A C0 00 00      cmp b, 0
0831   086D C6 7F 08      je _if20_exit
0832   0870             _if20_TRUE:
0833   0870             ; error("Integer constant expected in .org directive."); 
0834   0870                             
0835   0870             ; --- START FUNCTION CALL
0836   0870                             
0837   0870 26 7C 50      mov b, _s18 ; "Integer constant expected in .org directive."
0838   0873 FD AB         swp b
0839   0875 D8            push b
0840   0876 07 82 39      call error
0841   0879 51 02 00      add sp, 2
0842   087C             ; --- END FUNCTION CALL
0843   087C 0A 7F 08      jmp _if20_exit
0844   087F             _if20_exit:
0845   087F             ; _org = int_const; 
0846   087F 3B 7E 4E      mov d, __org ; $_org
0847   0882 DA            push d
0848   0883                             
0849   0883 3B C9 4F      mov d, _int_const ; $int_const
0850   0886 2A            mov b, [d]
0851   0887 38 00 00      mov c, 0
0852   088A E7            pop d
0853   088B FD 43         mov [d], b
0854   088D 0A 1E 0A      jmp _if19_exit
0855   0890             _if19_else:
0856   0890             ; if(tok == DB){ 
0857   0890             _if21_cond:
0858   0890                             
0859   0890 3B 83 4E      mov d, _tok ; $tok
0860   0893 2A            mov b, [d]
0861   0894 38 00 00      mov c, 0
0862   0897             ; --- START RELATIONAL
0863   0897 D7            push a
0864   0898 11            mov a, b
0865   0899 FD 2E 06 00   mov32 cb, $6 ; enum element: DB
0865   089D 00 00 
0866   089F B0            cmp a, b
0867   08A0 FD 71         seq ; ==
0868   08A2 E4            pop a
0869   08A3             ; --- END RELATIONAL
0870   08A3 C0 00 00      cmp b, 0
0871   08A6 C6 4C 09      je _if21_else
0872   08A9             _if21_TRUE:
0873   08A9             ; for(;;){ 
0874   08A9             _for22_init:
0875   08A9             _for22_cond:
0876   08A9             _for22_block:
0877   08A9             ; get(); 
0878   08A9                             
0879   08A9             ; --- START FUNCTION CALL
0880   08A9 07 78 2B      call get
0881   08AC             ; if(toktype == CHAR_CONST){ 
0882   08AC             _if23_cond:
0883   08AC                             
0884   08AC 3B 85 4E      mov d, _toktype ; $toktype
0885   08AF 2A            mov b, [d]
0886   08B0 38 00 00      mov c, 0
0887   08B3             ; --- START RELATIONAL
0888   08B3 D7            push a
0889   08B4 11            mov a, b
0890   08B5 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
0890   08B9 00 00 
0891   08BB B0            cmp a, b
0892   08BC FD 71         seq ; ==
0893   08BE E4            pop a
0894   08BF             ; --- END RELATIONAL
0895   08BF C0 00 00      cmp b, 0
0896   08C2 C6 ED 08      je _if23_else
0897   08C5             _if23_TRUE:
0898   08C5             ; emit_byte(string_const[0], emit_override); 
0899   08C5                             
0900   08C5             ; --- START FUNCTION CALL
0901   08C5                             
0902   08C5 FA 05 00      lea d, [bp + 5] ; $emit_override
0903   08C8 32            mov bl, [d]
0904   08C9 A7 00         mov bh, 0
0905   08CB 38 00 00      mov c, 0
0906   08CE DD            push bl
0907   08CF                             
0908   08CF 3B C9 4E      mov d, _string_const_data ; $string_const
0909   08D2 D7            push a
0910   08D3 DA            push d
0911   08D4                             
0912   08D4 FD 2E 00 00   mov32 cb, $00000000
0912   08D8 00 00 
0913   08DA E7            pop d
0914   08DB 5A            add d, b
0915   08DC E4            pop a
0916   08DD 32            mov bl, [d]
0917   08DE A7 00         mov bh, 0
0918   08E0 38 00 00      mov c, 0
0919   08E3 DD            push bl
0920   08E4 07 7D 27      call emit_byte
0921   08E7 51 02 00      add sp, 2
0922   08EA             ; --- END FUNCTION CALL
0923   08EA 0A 21 09      jmp _if23_exit
0924   08ED             _if23_else:
0925   08ED             ; if(toktype == INTEGER_CONST){ 
0926   08ED             _if24_cond:
0927   08ED                             
0928   08ED 3B 85 4E      mov d, _toktype ; $toktype
0929   08F0 2A            mov b, [d]
0930   08F1 38 00 00      mov c, 0
0931   08F4             ; --- START RELATIONAL
0932   08F4 D7            push a
0933   08F5 11            mov a, b
0934   08F6 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
0934   08FA 00 00 
0935   08FC B0            cmp a, b
0936   08FD FD 71         seq ; ==
0937   08FF E4            pop a
0938   0900             ; --- END RELATIONAL
0939   0900 C0 00 00      cmp b, 0
0940   0903 C6 21 09      je _if24_exit
0941   0906             _if24_TRUE:
0942   0906             ; emit_byte(int_const, emit_override); 
0943   0906                             
0944   0906             ; --- START FUNCTION CALL
0945   0906                             
0946   0906 FA 05 00      lea d, [bp + 5] ; $emit_override
0947   0909 32            mov bl, [d]
0948   090A A7 00         mov bh, 0
0949   090C 38 00 00      mov c, 0
0950   090F DD            push bl
0951   0910                             
0952   0910 3B C9 4F      mov d, _int_const ; $int_const
0953   0913 2A            mov b, [d]
0954   0914 38 00 00      mov c, 0
0955   0917 DD            push bl
0956   0918 07 7D 27      call emit_byte
0957   091B 51 02 00      add sp, 2
0958   091E             ; --- END FUNCTION CALL
0959   091E 0A 21 09      jmp _if24_exit
0960   0921             _if24_exit:
0961   0921             _if23_exit:
0962   0921             ; get(); 
0963   0921                             
0964   0921             ; --- START FUNCTION CALL
0965   0921 07 78 2B      call get
0966   0924             ; if(tok != COMMA){ 
0967   0924             _if25_cond:
0968   0924                             
0969   0924 3B 83 4E      mov d, _tok ; $tok
0970   0927 2A            mov b, [d]
0971   0928 38 00 00      mov c, 0
0972   092B             ; --- START RELATIONAL
0973   092B D7            push a
0974   092C 11            mov a, b
0975   092D FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
0975   0931 00 00 
0976   0933 B0            cmp a, b
0977   0934 FD 72         sneq ; !=
0978   0936 E4            pop a
0979   0937             ; --- END RELATIONAL
0980   0937 C0 00 00      cmp b, 0
0981   093A C6 46 09      je _if25_exit
0982   093D             _if25_TRUE:
0983   093D             ; back(); 
0984   093D                             
0985   093D             ; --- START FUNCTION CALL
0986   093D 07 EB 27      call back
0987   0940             ; break; 
0988   0940 0A 49 09      jmp _for22_exit ; for break
0989   0943 0A 46 09      jmp _if25_exit
0990   0946             _if25_exit:
0991   0946             _for22_update:
0992   0946 0A A9 08      jmp _for22_cond
0993   0949             _for22_exit:
0994   0949 0A 1E 0A      jmp _if21_exit
0995   094C             _if21_else:
0996   094C             ; if(tok == DW){ 
0997   094C             _if26_cond:
0998   094C                             
0999   094C 3B 83 4E      mov d, _tok ; $tok
1000   094F 2A            mov b, [d]
1001   0950 38 00 00      mov c, 0
1002   0953             ; --- START RELATIONAL
1003   0953 D7            push a
1004   0954 11            mov a, b
1005   0955 FD 2E 07 00   mov32 cb, $7 ; enum element: DW
1005   0959 00 00 
1006   095B B0            cmp a, b
1007   095C FD 71         seq ; ==
1008   095E E4            pop a
1009   095F             ; --- END RELATIONAL
1010   095F C0 00 00      cmp b, 0
1011   0962 C6 1E 0A      je _if26_exit
1012   0965             _if26_TRUE:
1013   0965             ; for(;;){ 
1014   0965             _for27_init:
1015   0965             _for27_cond:
1016   0965             _for27_block:
1017   0965             ; get(); 
1018   0965                             
1019   0965             ; --- START FUNCTION CALL
1020   0965 07 78 2B      call get
1021   0968             ; if(toktype == CHAR_CONST){ 
1022   0968             _if28_cond:
1023   0968                             
1024   0968 3B 85 4E      mov d, _toktype ; $toktype
1025   096B 2A            mov b, [d]
1026   096C 38 00 00      mov c, 0
1027   096F             ; --- START RELATIONAL
1028   096F D7            push a
1029   0970 11            mov a, b
1030   0971 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
1030   0975 00 00 
1031   0977 B0            cmp a, b
1032   0978 FD 71         seq ; ==
1033   097A E4            pop a
1034   097B             ; --- END RELATIONAL
1035   097B C0 00 00      cmp b, 0
1036   097E C6 C0 09      je _if28_else
1037   0981             _if28_TRUE:
1038   0981             ; emit_byte(string_const[0], emit_override); 
1039   0981                             
1040   0981             ; --- START FUNCTION CALL
1041   0981                             
1042   0981 FA 05 00      lea d, [bp + 5] ; $emit_override
1043   0984 32            mov bl, [d]
1044   0985 A7 00         mov bh, 0
1045   0987 38 00 00      mov c, 0
1046   098A DD            push bl
1047   098B                             
1048   098B 3B C9 4E      mov d, _string_const_data ; $string_const
1049   098E D7            push a
1050   098F DA            push d
1051   0990                             
1052   0990 FD 2E 00 00   mov32 cb, $00000000
1052   0994 00 00 
1053   0996 E7            pop d
1054   0997 5A            add d, b
1055   0998 E4            pop a
1056   0999 32            mov bl, [d]
1057   099A A7 00         mov bh, 0
1058   099C 38 00 00      mov c, 0
1059   099F DD            push bl
1060   09A0 07 7D 27      call emit_byte
1061   09A3 51 02 00      add sp, 2
1062   09A6             ; --- END FUNCTION CALL
1063   09A6             ; emit_byte(0, emit_override); 
1064   09A6                             
1065   09A6             ; --- START FUNCTION CALL
1066   09A6                             
1067   09A6 FA 05 00      lea d, [bp + 5] ; $emit_override
1068   09A9 32            mov bl, [d]
1069   09AA A7 00         mov bh, 0
1070   09AC 38 00 00      mov c, 0
1071   09AF DD            push bl
1072   09B0                             
1073   09B0 FD 2E 00 00   mov32 cb, $00000000
1073   09B4 00 00 
1074   09B6 DD            push bl
1075   09B7 07 7D 27      call emit_byte
1076   09BA 51 02 00      add sp, 2
1077   09BD             ; --- END FUNCTION CALL
1078   09BD 0A F3 09      jmp _if28_exit
1079   09C0             _if28_else:
1080   09C0             ; if(toktype == INTEGER_CONST){ 
1081   09C0             _if29_cond:
1082   09C0                             
1083   09C0 3B 85 4E      mov d, _toktype ; $toktype
1084   09C3 2A            mov b, [d]
1085   09C4 38 00 00      mov c, 0
1086   09C7             ; --- START RELATIONAL
1087   09C7 D7            push a
1088   09C8 11            mov a, b
1089   09C9 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1089   09CD 00 00 
1090   09CF B0            cmp a, b
1091   09D0 FD 71         seq ; ==
1092   09D2 E4            pop a
1093   09D3             ; --- END RELATIONAL
1094   09D3 C0 00 00      cmp b, 0
1095   09D6 C6 F3 09      je _if29_exit
1096   09D9             _if29_TRUE:
1097   09D9             ; emit_word(int_const, 0); 
1098   09D9                             
1099   09D9             ; --- START FUNCTION CALL
1100   09D9                             
1101   09D9 FD 2E 00 00   mov32 cb, $00000000
1101   09DD 00 00 
1102   09DF DD            push bl
1103   09E0                             
1104   09E0 3B C9 4F      mov d, _int_const ; $int_const
1105   09E3 2A            mov b, [d]
1106   09E4 38 00 00      mov c, 0
1107   09E7 FD AB         swp b
1108   09E9 D8            push b
1109   09EA 07 B5 27      call emit_word
1110   09ED 51 03 00      add sp, 3
1111   09F0             ; --- END FUNCTION CALL
1112   09F0 0A F3 09      jmp _if29_exit
1113   09F3             _if29_exit:
1114   09F3             _if28_exit:
1115   09F3             ; get(); 
1116   09F3                             
1117   09F3             ; --- START FUNCTION CALL
1118   09F3 07 78 2B      call get
1119   09F6             ; if(tok != COMMA){ 
1120   09F6             _if30_cond:
1121   09F6                             
1122   09F6 3B 83 4E      mov d, _tok ; $tok
1123   09F9 2A            mov b, [d]
1124   09FA 38 00 00      mov c, 0
1125   09FD             ; --- START RELATIONAL
1126   09FD D7            push a
1127   09FE 11            mov a, b
1128   09FF FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
1128   0A03 00 00 
1129   0A05 B0            cmp a, b
1130   0A06 FD 72         sneq ; !=
1131   0A08 E4            pop a
1132   0A09             ; --- END RELATIONAL
1133   0A09 C0 00 00      cmp b, 0
1134   0A0C C6 18 0A      je _if30_exit
1135   0A0F             _if30_TRUE:
1136   0A0F             ; back(); 
1137   0A0F                             
1138   0A0F             ; --- START FUNCTION CALL
1139   0A0F 07 EB 27      call back
1140   0A12             ; break; 
1141   0A12 0A 1B 0A      jmp _for27_exit ; for break
1142   0A15 0A 18 0A      jmp _if30_exit
1143   0A18             _if30_exit:
1144   0A18             _for27_update:
1145   0A18 0A 65 09      jmp _for27_cond
1146   0A1B             _for27_exit:
1147   0A1B 0A 1E 0A      jmp _if26_exit
1148   0A1E             _if26_exit:
1149   0A1E             _if21_exit:
1150   0A1E             _if19_exit:
1151   0A1E F9            leave
1152   0A1F 09            ret
1153   0A20             
1154   0A20             label_directive_scan:
1155   0A20 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1156   0A23             ; char *temp_prog; 
1157   0A23 52 02 00      sub sp, 2
1158   0A26             ; int i; 
1159   0A26 52 02 00      sub sp, 2
1160   0A29             ; prog = program; 
1161   0A29 3B 87 4E      mov d, _prog ; $prog
1162   0A2C DA            push d
1163   0A2D                             
1164   0A2D 3B CB 4F      mov d, _program ; $program
1165   0A30 2A            mov b, [d]
1166   0A31 38 00 00      mov c, 0
1167   0A34 E7            pop d
1168   0A35 FD 43         mov [d], b
1169   0A37             ; bin_p = bin_out + _org; 
1170   0A37 3B CF 4F      mov d, _bin_p ; $bin_p
1171   0A3A DA            push d
1172   0A3B                             
1173   0A3B 3B CD 4F      mov d, _bin_out ; $bin_out
1174   0A3E 2A            mov b, [d]
1175   0A3F 38 00 00      mov c, 0
1176   0A42             ; --- START TERMS
1177   0A42 D7            push a
1178   0A43 11            mov a, b
1179   0A44 3B 7E 4E      mov d, __org ; $_org
1180   0A47 2A            mov b, [d]
1181   0A48 38 00 00      mov c, 0
1182   0A4B 56            add b, a
1183   0A4C E4            pop a
1184   0A4D             ; --- END TERMS
1185   0A4D E7            pop d
1186   0A4E FD 43         mov [d], b
1187   0A50             ; pc = _org; 
1188   0A50 3B 80 4E      mov d, _pc ; $pc
1189   0A53 DA            push d
1190   0A54                             
1191   0A54 3B 7E 4E      mov d, __org ; $_org
1192   0A57 2A            mov b, [d]
1193   0A58 38 00 00      mov c, 0
1194   0A5B E7            pop d
1195   0A5C FD 43         mov [d], b
1196   0A5E             ; print("Parsing labels and directives...\n"); 
1197   0A5E                             
1198   0A5E             ; --- START FUNCTION CALL
1199   0A5E                             
1200   0A5E 26 A9 50      mov b, _s19 ; "Parsing labels and directives...\n"
1201   0A61 FD AB         swp b
1202   0A63 D8            push b
1203   0A64 07 7C 3E      call print
1204   0A67 51 02 00      add sp, 2
1205   0A6A             ; --- END FUNCTION CALL
1206   0A6A             ; for(;;){ 
1207   0A6A             _for31_init:
1208   0A6A             _for31_cond:
1209   0A6A             _for31_block:
1210   0A6A             ; get(); back(); 
1211   0A6A                             
1212   0A6A             ; --- START FUNCTION CALL
1213   0A6A 07 78 2B      call get
1214   0A6D             ; back(); 
1215   0A6D                             
1216   0A6D             ; --- START FUNCTION CALL
1217   0A6D 07 EB 27      call back
1218   0A70             ; temp_prog = prog; 
1219   0A70 FA FF FF      lea d, [bp + -1] ; $temp_prog
1220   0A73 DA            push d
1221   0A74                             
1222   0A74 3B 87 4E      mov d, _prog ; $prog
1223   0A77 2A            mov b, [d]
1224   0A78 38 00 00      mov c, 0
1225   0A7B E7            pop d
1226   0A7C FD 43         mov [d], b
1227   0A7E             ; get(); 
1228   0A7E                             
1229   0A7E             ; --- START FUNCTION CALL
1230   0A7E 07 78 2B      call get
1231   0A81             ; if(toktype == END) break; 
1232   0A81             _if32_cond:
1233   0A81                             
1234   0A81 3B 85 4E      mov d, _toktype ; $toktype
1235   0A84 2A            mov b, [d]
1236   0A85 38 00 00      mov c, 0
1237   0A88             ; --- START RELATIONAL
1238   0A88 D7            push a
1239   0A89 11            mov a, b
1240   0A8A FD 2E 07 00   mov32 cb, $7 ; enum element: END
1240   0A8E 00 00 
1241   0A90 B0            cmp a, b
1242   0A91 FD 71         seq ; ==
1243   0A93 E4            pop a
1244   0A94             ; --- END RELATIONAL
1245   0A94 C0 00 00      cmp b, 0
1246   0A97 C6 A0 0A      je _if32_exit
1247   0A9A             _if32_TRUE:
1248   0A9A             ; break; 
1249   0A9A 0A 6A 0B      jmp _for31_exit ; for break
1250   0A9D 0A A0 0A      jmp _if32_exit
1251   0AA0             _if32_exit:
1252   0AA0             ; if(tok == DOT){ 
1253   0AA0             _if33_cond:
1254   0AA0                             
1255   0AA0 3B 83 4E      mov d, _tok ; $tok
1256   0AA3 2A            mov b, [d]
1257   0AA4 38 00 00      mov c, 0
1258   0AA7             ; --- START RELATIONAL
1259   0AA7 D7            push a
1260   0AA8 11            mov a, b
1261   0AA9 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
1261   0AAD 00 00 
1262   0AAF B0            cmp a, b
1263   0AB0 FD 71         seq ; ==
1264   0AB2 E4            pop a
1265   0AB3             ; --- END RELATIONAL
1266   0AB3 C0 00 00      cmp b, 0
1267   0AB6 C6 E8 0A      je _if33_else
1268   0AB9             _if33_TRUE:
1269   0AB9             ; get(); 
1270   0AB9                             
1271   0AB9             ; --- START FUNCTION CALL
1272   0AB9 07 78 2B      call get
1273   0ABC             ; if(is_directive(token)){ 
1274   0ABC             _if34_cond:
1275   0ABC                             
1276   0ABC             ; --- START FUNCTION CALL
1277   0ABC                             
1278   0ABC 3B 89 4E      mov d, _token_data ; $token
1279   0ABF 2D            mov b, d
1280   0AC0 38 00 00      mov c, 0
1281   0AC3 FD AB         swp b
1282   0AC5 D8            push b
1283   0AC6 07 91 21      call is_directive
1284   0AC9 51 02 00      add sp, 2
1285   0ACC             ; --- END FUNCTION CALL
1286   0ACC C0 00 00      cmp b, 0
1287   0ACF C6 E5 0A      je _if34_exit
1288   0AD2             _if34_TRUE:
1289   0AD2             ; back(); 
1290   0AD2                             
1291   0AD2             ; --- START FUNCTION CALL
1292   0AD2 07 EB 27      call back
1293   0AD5             ; parse_directive(1); 
1294   0AD5                             
1295   0AD5             ; --- START FUNCTION CALL
1296   0AD5                             
1297   0AD5 FD 2E 01 00   mov32 cb, $00000001
1297   0AD9 00 00 
1298   0ADB DD            push bl
1299   0ADC 07 35 08      call parse_directive
1300   0ADF 51 01 00      add sp, 1
1301   0AE2             ; --- END FUNCTION CALL
1302   0AE2 0A E5 0A      jmp _if34_exit
1303   0AE5             _if34_exit:
1304   0AE5 0A 67 0B      jmp _if33_exit
1305   0AE8             _if33_else:
1306   0AE8             ; if(toktype == IDENTIFIER){ 
1307   0AE8             _if35_cond:
1308   0AE8                             
1309   0AE8 3B 85 4E      mov d, _toktype ; $toktype
1310   0AEB 2A            mov b, [d]
1311   0AEC 38 00 00      mov c, 0
1312   0AEF             ; --- START RELATIONAL
1313   0AEF D7            push a
1314   0AF0 11            mov a, b
1315   0AF1 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1315   0AF5 00 00 
1316   0AF7 B0            cmp a, b
1317   0AF8 FD 71         seq ; ==
1318   0AFA E4            pop a
1319   0AFB             ; --- END RELATIONAL
1320   0AFB C0 00 00      cmp b, 0
1321   0AFE C6 67 0B      je _if35_exit
1322   0B01             _if35_TRUE:
1323   0B01             ; get(); 
1324   0B01                             
1325   0B01             ; --- START FUNCTION CALL
1326   0B01 07 78 2B      call get
1327   0B04             ; if(tok == COLON){ 
1328   0B04             _if36_cond:
1329   0B04                             
1330   0B04 3B 83 4E      mov d, _tok ; $tok
1331   0B07 2A            mov b, [d]
1332   0B08 38 00 00      mov c, 0
1333   0B0B             ; --- START RELATIONAL
1334   0B0B D7            push a
1335   0B0C 11            mov a, b
1336   0B0D FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
1336   0B11 00 00 
1337   0B13 B0            cmp a, b
1338   0B14 FD 71         seq ; ==
1339   0B16 E4            pop a
1340   0B17             ; --- END RELATIONAL
1341   0B17 C0 00 00      cmp b, 0
1342   0B1A C6 3D 0B      je _if36_else
1343   0B1D             _if36_TRUE:
1344   0B1D             ; prog = temp_prog; 
1345   0B1D 3B 87 4E      mov d, _prog ; $prog
1346   0B20 DA            push d
1347   0B21                             
1348   0B21 FA FF FF      lea d, [bp + -1] ; $temp_prog
1349   0B24 2A            mov b, [d]
1350   0B25 38 00 00      mov c, 0
1351   0B28 E7            pop d
1352   0B29 FD 43         mov [d], b
1353   0B2B             ; parse_label(); 
1354   0B2B                             
1355   0B2B             ; --- START FUNCTION CALL
1356   0B2B 07 C7 21      call parse_label
1357   0B2E             ; print("."); 
1358   0B2E                             
1359   0B2E             ; --- START FUNCTION CALL
1360   0B2E                             
1361   0B2E 26 CB 50      mov b, _s20 ; "."
1362   0B31 FD AB         swp b
1363   0B33 D8            push b
1364   0B34 07 7C 3E      call print
1365   0B37 51 02 00      add sp, 2
1366   0B3A             ; --- END FUNCTION CALL
1367   0B3A 0A 64 0B      jmp _if36_exit
1368   0B3D             _if36_else:
1369   0B3D             ; prog = temp_prog; 
1370   0B3D 3B 87 4E      mov d, _prog ; $prog
1371   0B40 DA            push d
1372   0B41                             
1373   0B41 FA FF FF      lea d, [bp + -1] ; $temp_prog
1374   0B44 2A            mov b, [d]
1375   0B45 38 00 00      mov c, 0
1376   0B48 E7            pop d
1377   0B49 FD 43         mov [d], b
1378   0B4B             ; parse_instr(1);       
1379   0B4B                             
1380   0B4B             ; --- START FUNCTION CALL
1381   0B4B                             
1382   0B4B FD 2E 01 00   mov32 cb, $00000001
1382   0B4F 00 00 
1383   0B51 DD            push bl
1384   0B52 07 88 13      call parse_instr
1385   0B55 51 01 00      add sp, 1
1386   0B58             ; --- END FUNCTION CALL
1387   0B58             ; print("."); 
1388   0B58                             
1389   0B58             ; --- START FUNCTION CALL
1390   0B58                             
1391   0B58 26 CB 50      mov b, _s20 ; "."
1392   0B5B FD AB         swp b
1393   0B5D D8            push b
1394   0B5E 07 7C 3E      call print
1395   0B61 51 02 00      add sp, 2
1396   0B64             ; --- END FUNCTION CALL
1397   0B64             _if36_exit:
1398   0B64 0A 67 0B      jmp _if35_exit
1399   0B67             _if35_exit:
1400   0B67             _if33_exit:
1401   0B67             _for31_update:
1402   0B67 0A 6A 0A      jmp _for31_cond
1403   0B6A             _for31_exit:
1404   0B6A             ; print("\nDone.\n"); 
1405   0B6A                             
1406   0B6A             ; --- START FUNCTION CALL
1407   0B6A                             
1408   0B6A 26 CD 50      mov b, _s21 ; "\nDone.\n"
1409   0B6D FD AB         swp b
1410   0B6F D8            push b
1411   0B70 07 7C 3E      call print
1412   0B73 51 02 00      add sp, 2
1413   0B76             ; --- END FUNCTION CALL
1414   0B76             ; printf("Org: %s\n", _org); 
1415   0B76                             
1416   0B76             ; --- START FUNCTION CALL
1417   0B76                             
1418   0B76 3B 7E 4E      mov d, __org ; $_org
1419   0B79 2A            mov b, [d]
1420   0B7A 38 00 00      mov c, 0
1421   0B7D FD AB         swp b
1422   0B7F D8            push b
1423   0B80                             
1424   0B80 26 D5 50      mov b, _s22 ; "Org: %s\n"
1425   0B83 FD AB         swp b
1426   0B85 D8            push b
1427   0B86 07 70 44      call printf
1428   0B89 51 04 00      add sp, 4
1429   0B8C             ; --- END FUNCTION CALL
1430   0B8C             ; print("\nLabels list:\n"); 
1431   0B8C                             
1432   0B8C             ; --- START FUNCTION CALL
1433   0B8C                             
1434   0B8C 26 DE 50      mov b, _s23 ; "\nLabels list:\n"
1435   0B8F FD AB         swp b
1436   0B91 D8            push b
1437   0B92 07 7C 3E      call print
1438   0B95 51 02 00      add sp, 2
1439   0B98             ; --- END FUNCTION CALL
1440   0B98             ; for(i = 0; label_table[i].name[0]; i++){ 
1441   0B98             _for37_init:
1442   0B98 FA FD FF      lea d, [bp + -3] ; $i
1443   0B9B DA            push d
1444   0B9C                             
1445   0B9C FD 2E 00 00   mov32 cb, $00000000
1445   0BA0 00 00 
1446   0BA2 E7            pop d
1447   0BA3 FD 43         mov [d], b
1448   0BA5             _for37_cond:
1449   0BA5                             
1450   0BA5 3B 5E 4D      mov d, _label_table_data ; $label_table
1451   0BA8 D7            push a
1452   0BA9 DA            push d
1453   0BAA                             
1454   0BAA FA FD FF      lea d, [bp + -3] ; $i
1455   0BAD 2A            mov b, [d]
1456   0BAE 38 00 00      mov c, 0
1457   0BB1 E7            pop d
1458   0BB2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1459   0BB6 E4            pop a
1460   0BB7 58 00 00      add d, 0
1461   0BBA D7            push a
1462   0BBB DA            push d
1463   0BBC                             
1464   0BBC FD 2E 00 00   mov32 cb, $00000000
1464   0BC0 00 00 
1465   0BC2 E7            pop d
1466   0BC3 5A            add d, b
1467   0BC4 E4            pop a
1468   0BC5 32            mov bl, [d]
1469   0BC6 A7 00         mov bh, 0
1470   0BC8 38 00 00      mov c, 0
1471   0BCB C0 00 00      cmp b, 0
1472   0BCE C6 40 0C      je _for37_exit
1473   0BD1             _for37_block:
1474   0BD1             ; print(label_table[i].name); 
1475   0BD1                             
1476   0BD1             ; --- START FUNCTION CALL
1477   0BD1                             
1478   0BD1 3B 5E 4D      mov d, _label_table_data ; $label_table
1479   0BD4 D7            push a
1480   0BD5 DA            push d
1481   0BD6                             
1482   0BD6 FA FD FF      lea d, [bp + -3] ; $i
1483   0BD9 2A            mov b, [d]
1484   0BDA 38 00 00      mov c, 0
1485   0BDD E7            pop d
1486   0BDE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1487   0BE2 E4            pop a
1488   0BE3 58 00 00      add d, 0
1489   0BE6 2D            mov b, d
1490   0BE7 38 00 00      mov c, 0
1491   0BEA FD AB         swp b
1492   0BEC D8            push b
1493   0BED 07 7C 3E      call print
1494   0BF0 51 02 00      add sp, 2
1495   0BF3             ; --- END FUNCTION CALL
1496   0BF3             ; print(": "); 
1497   0BF3                             
1498   0BF3             ; --- START FUNCTION CALL
1499   0BF3                             
1500   0BF3 26 ED 50      mov b, _s24 ; ": "
1501   0BF6 FD AB         swp b
1502   0BF8 D8            push b
1503   0BF9 07 7C 3E      call print
1504   0BFC 51 02 00      add sp, 2
1505   0BFF             ; --- END FUNCTION CALL
1506   0BFF             ; printx16(label_table[i].address); 
1507   0BFF                             
1508   0BFF             ; --- START FUNCTION CALL
1509   0BFF                             
1510   0BFF 3B 5E 4D      mov d, _label_table_data ; $label_table
1511   0C02 D7            push a
1512   0C03 DA            push d
1513   0C04                             
1514   0C04 FA FD FF      lea d, [bp + -3] ; $i
1515   0C07 2A            mov b, [d]
1516   0C08 38 00 00      mov c, 0
1517   0C0B E7            pop d
1518   0C0C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1519   0C10 E4            pop a
1520   0C11 58 10 00      add d, 16
1521   0C14 2A            mov b, [d]
1522   0C15 38 00 00      mov c, 0
1523   0C18 FD AB         swp b
1524   0C1A D8            push b
1525   0C1B 07 B3 42      call printx16
1526   0C1E 51 02 00      add sp, 2
1527   0C21             ; --- END FUNCTION CALL
1528   0C21             ; print("\n"); 
1529   0C21                             
1530   0C21             ; --- START FUNCTION CALL
1531   0C21                             
1532   0C21 26 22 50      mov b, _s10 ; "\n"
1533   0C24 FD AB         swp b
1534   0C26 D8            push b
1535   0C27 07 7C 3E      call print
1536   0C2A 51 02 00      add sp, 2
1537   0C2D             ; --- END FUNCTION CALL
1538   0C2D             _for37_update:
1539   0C2D                             
1540   0C2D FA FD FF      lea d, [bp + -3] ; $i
1541   0C30 2A            mov b, [d]
1542   0C31 38 00 00      mov c, 0
1543   0C34 11            mov a, b
1544   0C35 FD 77         inc b
1545   0C37 FA FD FF      lea d, [bp + -3] ; $i
1546   0C3A FD 43         mov [d], b
1547   0C3C 27            mov b, a
1548   0C3D 0A A5 0B      jmp _for37_cond
1549   0C40             _for37_exit:
1550   0C40             ; print("\n"); 
1551   0C40                             
1552   0C40             ; --- START FUNCTION CALL
1553   0C40                             
1554   0C40 26 22 50      mov b, _s10 ; "\n"
1555   0C43 FD AB         swp b
1556   0C45 D8            push b
1557   0C46 07 7C 3E      call print
1558   0C49 51 02 00      add sp, 2
1559   0C4C             ; --- END FUNCTION CALL
1560   0C4C F9            leave
1561   0C4D 09            ret
1562   0C4E             
1563   0C4E             label_parse_instr:
1564   0C4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1565   0C51             ; char opcode[32]; 
1566   0C51 52 20 00      sub sp, 32
1567   0C54             ; char code_line[64]; 
1568   0C54 52 40 00      sub sp, 64
1569   0C57             ; struct t_opcode op; 
1570   0C57 52 1A 00      sub sp, 26
1571   0C5A             ; int num_operands, num_operandsexp; 
1572   0C5A 52 02 00      sub sp, 2
1573   0C5D 52 02 00      sub sp, 2
1574   0C60             ; int i, j; 
1575   0C60 52 02 00      sub sp, 2
1576   0C63 52 02 00      sub sp, 2
1577   0C66             ; char operand_types[3]; // operand types and locations 
1578   0C66 52 03 00      sub sp, 3
1579   0C69             ; int old_pc; 
1580   0C69 52 02 00      sub sp, 2
1581   0C6C             ; char has_operands; 
1582   0C6C 52 01 00      sub sp, 1
1583   0C6F             ; old_pc = pc; 
1584   0C6F FA 7A FF      lea d, [bp + -134] ; $old_pc
1585   0C72 DA            push d
1586   0C73                             
1587   0C73 3B 80 4E      mov d, _pc ; $pc
1588   0C76 2A            mov b, [d]
1589   0C77 38 00 00      mov c, 0
1590   0C7A E7            pop d
1591   0C7B FD 43         mov [d], b
1592   0C7D             ; get_line(); 
1593   0C7D                             
1594   0C7D             ; --- START FUNCTION CALL
1595   0C7D 07 5B 2A      call get_line
1596   0C80             ; push_prog(); 
1597   0C80                             
1598   0C80             ; --- START FUNCTION CALL
1599   0C80 07 F2 39      call push_prog
1600   0C83             ; strcpy(code_line, string_const); 
1601   0C83                             
1602   0C83             ; --- START FUNCTION CALL
1603   0C83                             
1604   0C83 3B C9 4E      mov d, _string_const_data ; $string_const
1605   0C86 2D            mov b, d
1606   0C87 38 00 00      mov c, 0
1607   0C8A FD AB         swp b
1608   0C8C D8            push b
1609   0C8D                             
1610   0C8D FA A1 FF      lea d, [bp + -95] ; $code_line
1611   0C90 2D            mov b, d
1612   0C91 38 00 00      mov c, 0
1613   0C94 FD AB         swp b
1614   0C96 D8            push b
1615   0C97 07 13 43      call strcpy
1616   0C9A 51 04 00      add sp, 4
1617   0C9D             ; --- END FUNCTION CALL
1618   0C9D             ; has_operands = 0; 
1619   0C9D FA 79 FF      lea d, [bp + -135] ; $has_operands
1620   0CA0 DA            push d
1621   0CA1                             
1622   0CA1 FD 2E 00 00   mov32 cb, $00000000
1622   0CA5 00 00 
1623   0CA7 E7            pop d
1624   0CA8 FD 3E         mov [d], bl
1625   0CAA             ; prog = code_line; 
1626   0CAA 3B 87 4E      mov d, _prog ; $prog
1627   0CAD DA            push d
1628   0CAE                             
1629   0CAE FA A1 FF      lea d, [bp + -95] ; $code_line
1630   0CB1 2D            mov b, d
1631   0CB2 38 00 00      mov c, 0
1632   0CB5 E7            pop d
1633   0CB6 FD 43         mov [d], b
1634   0CB8             ; get(); // get main opcode 
1635   0CB8                             
1636   0CB8             ; --- START FUNCTION CALL
1637   0CB8 07 78 2B      call get
1638   0CBB             ; for(;;){ 
1639   0CBB             _for38_init:
1640   0CBB             _for38_cond:
1641   0CBB             _for38_block:
1642   0CBB             ; get(); 
1643   0CBB                             
1644   0CBB             ; --- START FUNCTION CALL
1645   0CBB 07 78 2B      call get
1646   0CBE             ; if(toktype == END) break; 
1647   0CBE             _if39_cond:
1648   0CBE                             
1649   0CBE 3B 85 4E      mov d, _toktype ; $toktype
1650   0CC1 2A            mov b, [d]
1651   0CC2 38 00 00      mov c, 0
1652   0CC5             ; --- START RELATIONAL
1653   0CC5 D7            push a
1654   0CC6 11            mov a, b
1655   0CC7 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1655   0CCB 00 00 
1656   0CCD B0            cmp a, b
1657   0CCE FD 71         seq ; ==
1658   0CD0 E4            pop a
1659   0CD1             ; --- END RELATIONAL
1660   0CD1 C0 00 00      cmp b, 0
1661   0CD4 C6 DD 0C      je _if39_exit
1662   0CD7             _if39_TRUE:
1663   0CD7             ; break; 
1664   0CD7 0A 39 0D      jmp _for38_exit ; for break
1665   0CDA 0A DD 0C      jmp _if39_exit
1666   0CDD             _if39_exit:
1667   0CDD             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1668   0CDD             _if40_cond:
1669   0CDD                             
1670   0CDD 3B 85 4E      mov d, _toktype ; $toktype
1671   0CE0 2A            mov b, [d]
1672   0CE1 38 00 00      mov c, 0
1673   0CE4             ; --- START RELATIONAL
1674   0CE4 D7            push a
1675   0CE5 11            mov a, b
1676   0CE6 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
1676   0CEA 00 00 
1677   0CEC B0            cmp a, b
1678   0CED FD 71         seq ; ==
1679   0CEF E4            pop a
1680   0CF0             ; --- END RELATIONAL
1681   0CF0             ; --- START LOGICAL OR
1682   0CF0 D7            push a
1683   0CF1 11            mov a, b
1684   0CF2 3B 85 4E      mov d, _toktype ; $toktype
1685   0CF5 2A            mov b, [d]
1686   0CF6 38 00 00      mov c, 0
1687   0CF9             ; --- START RELATIONAL
1688   0CF9 D7            push a
1689   0CFA 11            mov a, b
1690   0CFB FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
1690   0CFF 00 00 
1691   0D01 B0            cmp a, b
1692   0D02 FD 71         seq ; ==
1693   0D04 E4            pop a
1694   0D05             ; --- END RELATIONAL
1695   0D05             ; --- START LOGICAL AND
1696   0D05 D7            push a
1697   0D06 11            mov a, b
1698   0D07             ; --- START FUNCTION CALL
1699   0D07                             
1700   0D07 3B 89 4E      mov d, _token_data ; $token
1701   0D0A 2D            mov b, d
1702   0D0B 38 00 00      mov c, 0
1703   0D0E FD AB         swp b
1704   0D10 D8            push b
1705   0D11 07 1C 1F      call is_reserved
1706   0D14 51 02 00      add sp, 2
1707   0D17             ; --- END FUNCTION CALL
1708   0D17 FD A7         sand a, b
1709   0D19 E4            pop a
1710   0D1A             ; --- END LOGICAL AND
1711   0D1A FD A8         sor a, b ; ||
1712   0D1C E4            pop a
1713   0D1D             ; --- END LOGICAL OR
1714   0D1D C0 00 00      cmp b, 0
1715   0D20 C6 36 0D      je _if40_exit
1716   0D23             _if40_TRUE:
1717   0D23             ; has_operands = 1; 
1718   0D23 FA 79 FF      lea d, [bp + -135] ; $has_operands
1719   0D26 DA            push d
1720   0D27                             
1721   0D27 FD 2E 01 00   mov32 cb, $00000001
1721   0D2B 00 00 
1722   0D2D E7            pop d
1723   0D2E FD 3E         mov [d], bl
1724   0D30             ; break; 
1725   0D30 0A 39 0D      jmp _for38_exit ; for break
1726   0D33 0A 36 0D      jmp _if40_exit
1727   0D36             _if40_exit:
1728   0D36             _for38_update:
1729   0D36 0A BB 0C      jmp _for38_cond
1730   0D39             _for38_exit:
1731   0D39             ; opcode[0] = '\0'; 
1732   0D39 FA E1 FF      lea d, [bp + -31] ; $opcode
1733   0D3C D7            push a
1734   0D3D DA            push d
1735   0D3E                             
1736   0D3E FD 2E 00 00   mov32 cb, $00000000
1736   0D42 00 00 
1737   0D44 E7            pop d
1738   0D45 5A            add d, b
1739   0D46 E4            pop a
1740   0D47 DA            push d
1741   0D48                             
1742   0D48 FD 2E 00 00   mov32 cb, $00000000
1742   0D4C 00 00 
1743   0D4E E7            pop d
1744   0D4F FD 3E         mov [d], bl
1745   0D51             ; prog = code_line; 
1746   0D51 3B 87 4E      mov d, _prog ; $prog
1747   0D54 DA            push d
1748   0D55                             
1749   0D55 FA A1 FF      lea d, [bp + -95] ; $code_line
1750   0D58 2D            mov b, d
1751   0D59 38 00 00      mov c, 0
1752   0D5C E7            pop d
1753   0D5D FD 43         mov [d], b
1754   0D5F             ; if(!has_operands){ 
1755   0D5F             _if41_cond:
1756   0D5F                             
1757   0D5F FA 79 FF      lea d, [bp + -135] ; $has_operands
1758   0D62 32            mov bl, [d]
1759   0D63 A7 00         mov bh, 0
1760   0D65 38 00 00      mov c, 0
1761   0D68 C0 00 00      cmp b, 0
1762   0D6B C6 7F 0E      je _if41_else
1763   0D6E             _if41_TRUE:
1764   0D6E             ; get(); 
1765   0D6E                             
1766   0D6E             ; --- START FUNCTION CALL
1767   0D6E 07 78 2B      call get
1768   0D71             ; strcpy(opcode, token); 
1769   0D71                             
1770   0D71             ; --- START FUNCTION CALL
1771   0D71                             
1772   0D71 3B 89 4E      mov d, _token_data ; $token
1773   0D74 2D            mov b, d
1774   0D75 38 00 00      mov c, 0
1775   0D78 FD AB         swp b
1776   0D7A D8            push b
1777   0D7B                             
1778   0D7B FA E1 FF      lea d, [bp + -31] ; $opcode
1779   0D7E 2D            mov b, d
1780   0D7F 38 00 00      mov c, 0
1781   0D82 FD AB         swp b
1782   0D84 D8            push b
1783   0D85 07 13 43      call strcpy
1784   0D88 51 04 00      add sp, 4
1785   0D8B             ; --- END FUNCTION CALL
1786   0D8B             ; get();  
1787   0D8B                             
1788   0D8B             ; --- START FUNCTION CALL
1789   0D8B 07 78 2B      call get
1790   0D8E             ; if(toktype == END){ 
1791   0D8E             _if42_cond:
1792   0D8E                             
1793   0D8E 3B 85 4E      mov d, _toktype ; $toktype
1794   0D91 2A            mov b, [d]
1795   0D92 38 00 00      mov c, 0
1796   0D95             ; --- START RELATIONAL
1797   0D95 D7            push a
1798   0D96 11            mov a, b
1799   0D97 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1799   0D9B 00 00 
1800   0D9D B0            cmp a, b
1801   0D9E FD 71         seq ; ==
1802   0DA0 E4            pop a
1803   0DA1             ; --- END RELATIONAL
1804   0DA1 C0 00 00      cmp b, 0
1805   0DA4 C6 C0 0D      je _if42_else
1806   0DA7             _if42_TRUE:
1807   0DA7             ; strcat(opcode, " ."); 
1808   0DA7                             
1809   0DA7             ; --- START FUNCTION CALL
1810   0DA7                             
1811   0DA7 26 F0 50      mov b, _s25 ; " ."
1812   0DAA FD AB         swp b
1813   0DAC D8            push b
1814   0DAD                             
1815   0DAD FA E1 FF      lea d, [bp + -31] ; $opcode
1816   0DB0 2D            mov b, d
1817   0DB1 38 00 00      mov c, 0
1818   0DB4 FD AB         swp b
1819   0DB6 D8            push b
1820   0DB7 07 8D 43      call strcat
1821   0DBA 51 04 00      add sp, 4
1822   0DBD             ; --- END FUNCTION CALL
1823   0DBD 0A 2F 0E      jmp _if42_exit
1824   0DC0             _if42_else:
1825   0DC0             ; strcat(opcode, " "); 
1826   0DC0                             
1827   0DC0             ; --- START FUNCTION CALL
1828   0DC0                             
1829   0DC0 26 F3 50      mov b, _s26 ; " "
1830   0DC3 FD AB         swp b
1831   0DC5 D8            push b
1832   0DC6                             
1833   0DC6 FA E1 FF      lea d, [bp + -31] ; $opcode
1834   0DC9 2D            mov b, d
1835   0DCA 38 00 00      mov c, 0
1836   0DCD FD AB         swp b
1837   0DCF D8            push b
1838   0DD0 07 8D 43      call strcat
1839   0DD3 51 04 00      add sp, 4
1840   0DD6             ; --- END FUNCTION CALL
1841   0DD6             ; strcat(opcode, token); 
1842   0DD6                             
1843   0DD6             ; --- START FUNCTION CALL
1844   0DD6                             
1845   0DD6 3B 89 4E      mov d, _token_data ; $token
1846   0DD9 2D            mov b, d
1847   0DDA 38 00 00      mov c, 0
1848   0DDD FD AB         swp b
1849   0DDF D8            push b
1850   0DE0                             
1851   0DE0 FA E1 FF      lea d, [bp + -31] ; $opcode
1852   0DE3 2D            mov b, d
1853   0DE4 38 00 00      mov c, 0
1854   0DE7 FD AB         swp b
1855   0DE9 D8            push b
1856   0DEA 07 8D 43      call strcat
1857   0DED 51 04 00      add sp, 4
1858   0DF0             ; --- END FUNCTION CALL
1859   0DF0             ; for(;;){ 
1860   0DF0             _for43_init:
1861   0DF0             _for43_cond:
1862   0DF0             _for43_block:
1863   0DF0             ; get(); 
1864   0DF0                             
1865   0DF0             ; --- START FUNCTION CALL
1866   0DF0 07 78 2B      call get
1867   0DF3             ; if(toktype == END) break; 
1868   0DF3             _if44_cond:
1869   0DF3                             
1870   0DF3 3B 85 4E      mov d, _toktype ; $toktype
1871   0DF6 2A            mov b, [d]
1872   0DF7 38 00 00      mov c, 0
1873   0DFA             ; --- START RELATIONAL
1874   0DFA D7            push a
1875   0DFB 11            mov a, b
1876   0DFC FD 2E 07 00   mov32 cb, $7 ; enum element: END
1876   0E00 00 00 
1877   0E02 B0            cmp a, b
1878   0E03 FD 71         seq ; ==
1879   0E05 E4            pop a
1880   0E06             ; --- END RELATIONAL
1881   0E06 C0 00 00      cmp b, 0
1882   0E09 C6 12 0E      je _if44_exit
1883   0E0C             _if44_TRUE:
1884   0E0C             ; break; 
1885   0E0C 0A 2F 0E      jmp _for43_exit ; for break
1886   0E0F 0A 12 0E      jmp _if44_exit
1887   0E12             _if44_exit:
1888   0E12             ; strcat(opcode, token); 
1889   0E12                             
1890   0E12             ; --- START FUNCTION CALL
1891   0E12                             
1892   0E12 3B 89 4E      mov d, _token_data ; $token
1893   0E15 2D            mov b, d
1894   0E16 38 00 00      mov c, 0
1895   0E19 FD AB         swp b
1896   0E1B D8            push b
1897   0E1C                             
1898   0E1C FA E1 FF      lea d, [bp + -31] ; $opcode
1899   0E1F 2D            mov b, d
1900   0E20 38 00 00      mov c, 0
1901   0E23 FD AB         swp b
1902   0E25 D8            push b
1903   0E26 07 8D 43      call strcat
1904   0E29 51 04 00      add sp, 4
1905   0E2C             ; --- END FUNCTION CALL
1906   0E2C             _for43_update:
1907   0E2C 0A F0 0D      jmp _for43_cond
1908   0E2F             _for43_exit:
1909   0E2F             _if42_exit:
1910   0E2F             ; op = search_opcode(opcode); 
1911   0E2F FA 87 FF      lea d, [bp + -121] ; $op
1912   0E32 DA            push d
1913   0E33                             
1914   0E33             ; --- START FUNCTION CALL
1915   0E33                             
1916   0E33 FA E1 FF      lea d, [bp + -31] ; $opcode
1917   0E36 2D            mov b, d
1918   0E37 38 00 00      mov c, 0
1919   0E3A FD AB         swp b
1920   0E3C D8            push b
1921   0E3D 07 FA 23      call search_opcode
1922   0E40 51 02 00      add sp, 2
1923   0E43             ; --- END FUNCTION CALL
1924   0E43 E7            pop d
1925   0E44 FD 28         mov si, b
1926   0E46 FD 50         mov di, d
1927   0E48 38 1A 00      mov c, 26
1928   0E4B FD F5         rep movsb
1929   0E4D             ; if(op.opcode_type){ 
1930   0E4D             _if45_cond:
1931   0E4D                             
1932   0E4D FA 87 FF      lea d, [bp + -121] ; $op
1933   0E50 58 19 00      add d, 25
1934   0E53 32            mov bl, [d]
1935   0E54 A7 00         mov bh, 0
1936   0E56 38 00 00      mov c, 0
1937   0E59 C0 00 00      cmp b, 0
1938   0E5C C6 6F 0E      je _if45_exit
1939   0E5F             _if45_TRUE:
1940   0E5F             ; forwards(1); 
1941   0E5F                             
1942   0E5F             ; --- START FUNCTION CALL
1943   0E5F                             
1944   0E5F FD 2E 01 00   mov32 cb, $00000001
1944   0E63 00 00 
1945   0E65 DD            push bl
1946   0E66 07 27 27      call forwards
1947   0E69 51 01 00      add sp, 1
1948   0E6C             ; --- END FUNCTION CALL
1949   0E6C 0A 6F 0E      jmp _if45_exit
1950   0E6F             _if45_exit:
1951   0E6F             ; forwards(1); 
1952   0E6F                             
1953   0E6F             ; --- START FUNCTION CALL
1954   0E6F                             
1955   0E6F FD 2E 01 00   mov32 cb, $00000001
1955   0E73 00 00 
1956   0E75 DD            push bl
1957   0E76 07 27 27      call forwards
1958   0E79 51 01 00      add sp, 1
1959   0E7C             ; --- END FUNCTION CALL
1960   0E7C 0A 83 13      jmp _if41_exit
1961   0E7F             _if41_else:
1962   0E7F             ; num_operands = 0; 
1963   0E7F FA 85 FF      lea d, [bp + -123] ; $num_operands
1964   0E82 DA            push d
1965   0E83                             
1966   0E83 FD 2E 00 00   mov32 cb, $00000000
1966   0E87 00 00 
1967   0E89 E7            pop d
1968   0E8A FD 43         mov [d], b
1969   0E8C             ; for(;;){ 
1970   0E8C             _for46_init:
1971   0E8C             _for46_cond:
1972   0E8C             _for46_block:
1973   0E8C             ; get(); 
1974   0E8C                             
1975   0E8C             ; --- START FUNCTION CALL
1976   0E8C 07 78 2B      call get
1977   0E8F             ; if(toktype == END) break; 
1978   0E8F             _if47_cond:
1979   0E8F                             
1980   0E8F 3B 85 4E      mov d, _toktype ; $toktype
1981   0E92 2A            mov b, [d]
1982   0E93 38 00 00      mov c, 0
1983   0E96             ; --- START RELATIONAL
1984   0E96 D7            push a
1985   0E97 11            mov a, b
1986   0E98 FD 2E 07 00   mov32 cb, $7 ; enum element: END
1986   0E9C 00 00 
1987   0E9E B0            cmp a, b
1988   0E9F FD 71         seq ; ==
1989   0EA1 E4            pop a
1990   0EA2             ; --- END RELATIONAL
1991   0EA2 C0 00 00      cmp b, 0
1992   0EA5 C6 AE 0E      je _if47_exit
1993   0EA8             _if47_TRUE:
1994   0EA8             ; break; 
1995   0EA8 0A 0A 0F      jmp _for46_exit ; for break
1996   0EAB 0A AE 0E      jmp _if47_exit
1997   0EAE             _if47_exit:
1998   0EAE             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
1999   0EAE             _if48_cond:
2000   0EAE                             
2001   0EAE 3B 85 4E      mov d, _toktype ; $toktype
2002   0EB1 2A            mov b, [d]
2003   0EB2 38 00 00      mov c, 0
2004   0EB5             ; --- START RELATIONAL
2005   0EB5 D7            push a
2006   0EB6 11            mov a, b
2007   0EB7 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2007   0EBB 00 00 
2008   0EBD B0            cmp a, b
2009   0EBE FD 71         seq ; ==
2010   0EC0 E4            pop a
2011   0EC1             ; --- END RELATIONAL
2012   0EC1             ; --- START LOGICAL OR
2013   0EC1 D7            push a
2014   0EC2 11            mov a, b
2015   0EC3 3B 85 4E      mov d, _toktype ; $toktype
2016   0EC6 2A            mov b, [d]
2017   0EC7 38 00 00      mov c, 0
2018   0ECA             ; --- START RELATIONAL
2019   0ECA D7            push a
2020   0ECB 11            mov a, b
2021   0ECC FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
2021   0ED0 00 00 
2022   0ED2 B0            cmp a, b
2023   0ED3 FD 71         seq ; ==
2024   0ED5 E4            pop a
2025   0ED6             ; --- END RELATIONAL
2026   0ED6             ; --- START LOGICAL AND
2027   0ED6 D7            push a
2028   0ED7 11            mov a, b
2029   0ED8             ; --- START FUNCTION CALL
2030   0ED8                             
2031   0ED8 3B 89 4E      mov d, _token_data ; $token
2032   0EDB 2D            mov b, d
2033   0EDC 38 00 00      mov c, 0
2034   0EDF FD AB         swp b
2035   0EE1 D8            push b
2036   0EE2 07 1C 1F      call is_reserved
2037   0EE5 51 02 00      add sp, 2
2038   0EE8             ; --- END FUNCTION CALL
2039   0EE8 FD A7         sand a, b
2040   0EEA E4            pop a
2041   0EEB             ; --- END LOGICAL AND
2042   0EEB FD A8         sor a, b ; ||
2043   0EED E4            pop a
2044   0EEE             ; --- END LOGICAL OR
2045   0EEE C0 00 00      cmp b, 0
2046   0EF1 C6 07 0F      je _if48_exit
2047   0EF4             _if48_TRUE:
2048   0EF4             ; num_operands++; 
2049   0EF4                             
2050   0EF4 FA 85 FF      lea d, [bp + -123] ; $num_operands
2051   0EF7 2A            mov b, [d]
2052   0EF8 38 00 00      mov c, 0
2053   0EFB 11            mov a, b
2054   0EFC FD 77         inc b
2055   0EFE FA 85 FF      lea d, [bp + -123] ; $num_operands
2056   0F01 FD 43         mov [d], b
2057   0F03 27            mov b, a
2058   0F04 0A 07 0F      jmp _if48_exit
2059   0F07             _if48_exit:
2060   0F07             _for46_update:
2061   0F07 0A 8C 0E      jmp _for46_cond
2062   0F0A             _for46_exit:
2063   0F0A             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
2064   0F0A             _if49_cond:
2065   0F0A                             
2066   0F0A FA 85 FF      lea d, [bp + -123] ; $num_operands
2067   0F0D 2A            mov b, [d]
2068   0F0E 38 00 00      mov c, 0
2069   0F11             ; --- START RELATIONAL
2070   0F11 D7            push a
2071   0F12 11            mov a, b
2072   0F13 FD 2E 02 00   mov32 cb, $00000002
2072   0F17 00 00 
2073   0F19 B0            cmp a, b
2074   0F1A FD 7F         sgt ; >
2075   0F1C E4            pop a
2076   0F1D             ; --- END RELATIONAL
2077   0F1D C0 00 00      cmp b, 0
2078   0F20 C6 32 0F      je _if49_exit
2079   0F23             _if49_TRUE:
2080   0F23             ; error("Maximum number of operands per instruction is 2."); 
2081   0F23                             
2082   0F23             ; --- START FUNCTION CALL
2083   0F23                             
2084   0F23 26 F5 50      mov b, _s27 ; "Maximum number of operands per instruction is 2."
2085   0F26 FD AB         swp b
2086   0F28 D8            push b
2087   0F29 07 82 39      call error
2088   0F2C 51 02 00      add sp, 2
2089   0F2F             ; --- END FUNCTION CALL
2090   0F2F 0A 32 0F      jmp _if49_exit
2091   0F32             _if49_exit:
2092   0F32             ; num_operandsexp = exp(2, num_operands); 
2093   0F32 FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
2094   0F35 DA            push d
2095   0F36                             
2096   0F36             ; --- START FUNCTION CALL
2097   0F36                             
2098   0F36 FA 85 FF      lea d, [bp + -123] ; $num_operands
2099   0F39 2A            mov b, [d]
2100   0F3A 38 00 00      mov c, 0
2101   0F3D FD AB         swp b
2102   0F3F D8            push b
2103   0F40                             
2104   0F40 FD 2E 02 00   mov32 cb, $00000002
2104   0F44 00 00 
2105   0F46 FD AB         swp b
2106   0F48 D8            push b
2107   0F49 07 CF 3D      call exp
2108   0F4C 51 04 00      add sp, 4
2109   0F4F             ; --- END FUNCTION CALL
2110   0F4F E7            pop d
2111   0F50 FD 43         mov [d], b
2112   0F52             ; for(i = 0; i < num_operandsexp; i++){ 
2113   0F52             _for50_init:
2114   0F52 FA 81 FF      lea d, [bp + -127] ; $i
2115   0F55 DA            push d
2116   0F56                             
2117   0F56 FD 2E 00 00   mov32 cb, $00000000
2117   0F5A 00 00 
2118   0F5C E7            pop d
2119   0F5D FD 43         mov [d], b
2120   0F5F             _for50_cond:
2121   0F5F                             
2122   0F5F FA 81 FF      lea d, [bp + -127] ; $i
2123   0F62 2A            mov b, [d]
2124   0F63 38 00 00      mov c, 0
2125   0F66             ; --- START RELATIONAL
2126   0F66 D7            push a
2127   0F67 11            mov a, b
2128   0F68 FA 83 FF      lea d, [bp + -125] ; $num_operandsexp
2129   0F6B 2A            mov b, [d]
2130   0F6C 38 00 00      mov c, 0
2131   0F6F B0            cmp a, b
2132   0F70 FD 73         slt ; < (signed)
2133   0F72 E4            pop a
2134   0F73             ; --- END RELATIONAL
2135   0F73 C0 00 00      cmp b, 0
2136   0F76 C6 83 13      je _for50_exit
2137   0F79             _for50_block:
2138   0F79             ; prog = code_line; 
2139   0F79 3B 87 4E      mov d, _prog ; $prog
2140   0F7C DA            push d
2141   0F7D                             
2142   0F7D FA A1 FF      lea d, [bp + -95] ; $code_line
2143   0F80 2D            mov b, d
2144   0F81 38 00 00      mov c, 0
2145   0F84 E7            pop d
2146   0F85 FD 43         mov [d], b
2147   0F87             ; get(); 
2148   0F87                             
2149   0F87             ; --- START FUNCTION CALL
2150   0F87 07 78 2B      call get
2151   0F8A             ; strcpy(opcode, token); 
2152   0F8A                             
2153   0F8A             ; --- START FUNCTION CALL
2154   0F8A                             
2155   0F8A 3B 89 4E      mov d, _token_data ; $token
2156   0F8D 2D            mov b, d
2157   0F8E 38 00 00      mov c, 0
2158   0F91 FD AB         swp b
2159   0F93 D8            push b
2160   0F94                             
2161   0F94 FA E1 FF      lea d, [bp + -31] ; $opcode
2162   0F97 2D            mov b, d
2163   0F98 38 00 00      mov c, 0
2164   0F9B FD AB         swp b
2165   0F9D D8            push b
2166   0F9E 07 13 43      call strcpy
2167   0FA1 51 04 00      add sp, 4
2168   0FA4             ; --- END FUNCTION CALL
2169   0FA4             ; strcat(opcode, " "); 
2170   0FA4                             
2171   0FA4             ; --- START FUNCTION CALL
2172   0FA4                             
2173   0FA4 26 F3 50      mov b, _s26 ; " "
2174   0FA7 FD AB         swp b
2175   0FA9 D8            push b
2176   0FAA                             
2177   0FAA FA E1 FF      lea d, [bp + -31] ; $opcode
2178   0FAD 2D            mov b, d
2179   0FAE 38 00 00      mov c, 0
2180   0FB1 FD AB         swp b
2181   0FB3 D8            push b
2182   0FB4 07 8D 43      call strcat
2183   0FB7 51 04 00      add sp, 4
2184   0FBA             ; --- END FUNCTION CALL
2185   0FBA             ; j = 0; 
2186   0FBA FA 7F FF      lea d, [bp + -129] ; $j
2187   0FBD DA            push d
2188   0FBE                             
2189   0FBE FD 2E 00 00   mov32 cb, $00000000
2189   0FC2 00 00 
2190   0FC4 E7            pop d
2191   0FC5 FD 43         mov [d], b
2192   0FC7             ; for(;;){ 
2193   0FC7             _for51_init:
2194   0FC7             _for51_cond:
2195   0FC7             _for51_block:
2196   0FC7             ; get(); 
2197   0FC7                             
2198   0FC7             ; --- START FUNCTION CALL
2199   0FC7 07 78 2B      call get
2200   0FCA             ; if(toktype == END) break; 
2201   0FCA             _if52_cond:
2202   0FCA                             
2203   0FCA 3B 85 4E      mov d, _toktype ; $toktype
2204   0FCD 2A            mov b, [d]
2205   0FCE 38 00 00      mov c, 0
2206   0FD1             ; --- START RELATIONAL
2207   0FD1 D7            push a
2208   0FD2 11            mov a, b
2209   0FD3 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2209   0FD7 00 00 
2210   0FD9 B0            cmp a, b
2211   0FDA FD 71         seq ; ==
2212   0FDC E4            pop a
2213   0FDD             ; --- END RELATIONAL
2214   0FDD C0 00 00      cmp b, 0
2215   0FE0 C6 E9 0F      je _if52_exit
2216   0FE3             _if52_TRUE:
2217   0FE3             ; break; 
2218   0FE3 0A 66 11      jmp _for51_exit ; for break
2219   0FE6 0A E9 0F      jmp _if52_exit
2220   0FE9             _if52_exit:
2221   0FE9             ; if(toktype == INTEGER_CONST || toktype == IDENTIFIER && !is_reserved(token)){ 
2222   0FE9             _if53_cond:
2223   0FE9                             
2224   0FE9 3B 85 4E      mov d, _toktype ; $toktype
2225   0FEC 2A            mov b, [d]
2226   0FED 38 00 00      mov c, 0
2227   0FF0             ; --- START RELATIONAL
2228   0FF0 D7            push a
2229   0FF1 11            mov a, b
2230   0FF2 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2230   0FF6 00 00 
2231   0FF8 B0            cmp a, b
2232   0FF9 FD 71         seq ; ==
2233   0FFB E4            pop a
2234   0FFC             ; --- END RELATIONAL
2235   0FFC             ; --- START LOGICAL OR
2236   0FFC D7            push a
2237   0FFD 11            mov a, b
2238   0FFE 3B 85 4E      mov d, _toktype ; $toktype
2239   1001 2A            mov b, [d]
2240   1002 38 00 00      mov c, 0
2241   1005             ; --- START RELATIONAL
2242   1005 D7            push a
2243   1006 11            mov a, b
2244   1007 FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
2244   100B 00 00 
2245   100D B0            cmp a, b
2246   100E FD 71         seq ; ==
2247   1010 E4            pop a
2248   1011             ; --- END RELATIONAL
2249   1011             ; --- START LOGICAL AND
2250   1011 D7            push a
2251   1012 11            mov a, b
2252   1013             ; --- START FUNCTION CALL
2253   1013                             
2254   1013 3B 89 4E      mov d, _token_data ; $token
2255   1016 2D            mov b, d
2256   1017 38 00 00      mov c, 0
2257   101A FD AB         swp b
2258   101C D8            push b
2259   101D 07 1C 1F      call is_reserved
2260   1020 51 02 00      add sp, 2
2261   1023             ; --- END FUNCTION CALL
2262   1023 FD A7         sand a, b
2263   1025 E4            pop a
2264   1026             ; --- END LOGICAL AND
2265   1026 FD A8         sor a, b ; ||
2266   1028 E4            pop a
2267   1029             ; --- END LOGICAL OR
2268   1029 C0 00 00      cmp b, 0
2269   102C C6 49 11      je _if53_else
2270   102F             _if53_TRUE:
2271   102F             ; strcat(opcode, symbols[i*2+j]); 
2272   102F                             
2273   102F             ; --- START FUNCTION CALL
2274   102F                             
2275   102F 3B EB 4F      mov d, _symbols_data ; $symbols
2276   1032 D7            push a
2277   1033 DA            push d
2278   1034                             
2279   1034 FA 81 FF      lea d, [bp + -127] ; $i
2280   1037 2A            mov b, [d]
2281   1038 38 00 00      mov c, 0
2282   103B             ; --- START FACTORS
2283   103B D7            push a
2284   103C FD D8         push g
2285   103E 11            mov a, b
2286   103F FD 7A         mov g, c
2287   1041 FD 2E 02 00   mov32 cb, $00000002
2287   1045 00 00 
2288   1047 D7            push a     ; save left operand
2289   1048 8E            xor a, b   ; xor sign bits
2290   1049 FD AA         swp a      ; swap bytes
2291   104B 83            mov cl, al ; save result of xor into 'dl'
2292   104C E4            pop a      ; restore left side operator
2293   104D DF            push cl    ; save result of xor above
2294   104E FD AA         swp a  
2295   1050 93 80         test al, $80  
2296   1052 FD AA         swp a  
2297   1054 C6 59 10      jz skip_invert_a_54  
2298   1057 FD 95         neg a 
2299   1059             skip_invert_a_54:   
2300   1059 FD AB         swp b
2301   105B FD 93 80      test bl, $80  
2302   105E FD AB         swp b
2303   1060 C6 65 10      jz skip_invert_b_54  
2304   1063 FD 97         neg b 
2305   1065             skip_invert_b_54:   
2306   1065 AC            mul a, b ; *
2307   1066 FD 78         mov g, a
2308   1068 11            mov a, b
2309   1069 EA            pop bl
2310   106A FD 93 80      test bl, $80
2311   106D C6 7A 10      jz _same_signs_54
2312   1070 2F            mov bl, al
2313   1071 95            not a
2314   1072 FD 97         neg b
2315   1074 5B 00 00      adc a, 0
2316   1077 FD 78         mov g, a
2317   1079 11            mov a, b
2318   107A             _same_signs_54:
2319   107A FD 38         mov c, g
2320   107C 27            mov b, a
2321   107D FD F1         pop g
2322   107F E4            pop a
2323   1080             ; --- END FACTORS
2324   1080             ; --- START TERMS
2325   1080 D7            push a
2326   1081 FD D8         push g
2327   1083 11            mov a, b
2328   1084 FD 7A         mov g, c
2329   1086 FA 7F FF      lea d, [bp + -129] ; $j
2330   1089 2A            mov b, [d]
2331   108A 38 00 00      mov c, 0
2332   108D FD 15         add32 cb, ga
2333   108F FD F1         pop g
2334   1091 E4            pop a
2335   1092             ; --- END TERMS
2336   1092 E7            pop d
2337   1093 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2338   1097 E4            pop a
2339   1098 2A            mov b, [d]
2340   1099 38 00 00      mov c, 0
2341   109C FD AB         swp b
2342   109E D8            push b
2343   109F                             
2344   109F FA E1 FF      lea d, [bp + -31] ; $opcode
2345   10A2 2D            mov b, d
2346   10A3 38 00 00      mov c, 0
2347   10A6 FD AB         swp b
2348   10A8 D8            push b
2349   10A9 07 8D 43      call strcat
2350   10AC 51 04 00      add sp, 4
2351   10AF             ; --- END FUNCTION CALL
2352   10AF             ; operand_types[j] = *symbols[i*2+j]; 
2353   10AF FA 7C FF      lea d, [bp + -132] ; $operand_types
2354   10B2 D7            push a
2355   10B3 DA            push d
2356   10B4                             
2357   10B4 FA 7F FF      lea d, [bp + -129] ; $j
2358   10B7 2A            mov b, [d]
2359   10B8 38 00 00      mov c, 0
2360   10BB E7            pop d
2361   10BC 5A            add d, b
2362   10BD E4            pop a
2363   10BE DA            push d
2364   10BF                             
2365   10BF 3B EB 4F      mov d, _symbols_data ; $symbols
2366   10C2 D7            push a
2367   10C3 DA            push d
2368   10C4                             
2369   10C4 FA 81 FF      lea d, [bp + -127] ; $i
2370   10C7 2A            mov b, [d]
2371   10C8 38 00 00      mov c, 0
2372   10CB             ; --- START FACTORS
2373   10CB D7            push a
2374   10CC FD D8         push g
2375   10CE 11            mov a, b
2376   10CF FD 7A         mov g, c
2377   10D1 FD 2E 02 00   mov32 cb, $00000002
2377   10D5 00 00 
2378   10D7 D7            push a     ; save left operand
2379   10D8 8E            xor a, b   ; xor sign bits
2380   10D9 FD AA         swp a      ; swap bytes
2381   10DB 83            mov cl, al ; save result of xor into 'dl'
2382   10DC E4            pop a      ; restore left side operator
2383   10DD DF            push cl    ; save result of xor above
2384   10DE FD AA         swp a  
2385   10E0 93 80         test al, $80  
2386   10E2 FD AA         swp a  
2387   10E4 C6 E9 10      jz skip_invert_a_55  
2388   10E7 FD 95         neg a 
2389   10E9             skip_invert_a_55:   
2390   10E9 FD AB         swp b
2391   10EB FD 93 80      test bl, $80  
2392   10EE FD AB         swp b
2393   10F0 C6 F5 10      jz skip_invert_b_55  
2394   10F3 FD 97         neg b 
2395   10F5             skip_invert_b_55:   
2396   10F5 AC            mul a, b ; *
2397   10F6 FD 78         mov g, a
2398   10F8 11            mov a, b
2399   10F9 EA            pop bl
2400   10FA FD 93 80      test bl, $80
2401   10FD C6 0A 11      jz _same_signs_55
2402   1100 2F            mov bl, al
2403   1101 95            not a
2404   1102 FD 97         neg b
2405   1104 5B 00 00      adc a, 0
2406   1107 FD 78         mov g, a
2407   1109 11            mov a, b
2408   110A             _same_signs_55:
2409   110A FD 38         mov c, g
2410   110C 27            mov b, a
2411   110D FD F1         pop g
2412   110F E4            pop a
2413   1110             ; --- END FACTORS
2414   1110             ; --- START TERMS
2415   1110 D7            push a
2416   1111 FD D8         push g
2417   1113 11            mov a, b
2418   1114 FD 7A         mov g, c
2419   1116 FA 7F FF      lea d, [bp + -129] ; $j
2420   1119 2A            mov b, [d]
2421   111A 38 00 00      mov c, 0
2422   111D FD 15         add32 cb, ga
2423   111F FD F1         pop g
2424   1121 E4            pop a
2425   1122             ; --- END TERMS
2426   1122 E7            pop d
2427   1123 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2428   1127 E4            pop a
2429   1128 2A            mov b, [d]
2430   1129 38 00 00      mov c, 0
2431   112C 74            mov d, b
2432   112D 32            mov bl, [d]
2433   112E A7 00         mov bh, 0
2434   1130 38 00 00      mov c, 0
2435   1133 E7            pop d
2436   1134 FD 3E         mov [d], bl
2437   1136             ; j++; 
2438   1136                             
2439   1136 FA 7F FF      lea d, [bp + -129] ; $j
2440   1139 2A            mov b, [d]
2441   113A 38 00 00      mov c, 0
2442   113D 11            mov a, b
2443   113E FD 77         inc b
2444   1140 FA 7F FF      lea d, [bp + -129] ; $j
2445   1143 FD 43         mov [d], b
2446   1145 27            mov b, a
2447   1146 0A 63 11      jmp _if53_exit
2448   1149             _if53_else:
2449   1149             ; strcat(opcode, token); 
2450   1149                             
2451   1149             ; --- START FUNCTION CALL
2452   1149                             
2453   1149 3B 89 4E      mov d, _token_data ; $token
2454   114C 2D            mov b, d
2455   114D 38 00 00      mov c, 0
2456   1150 FD AB         swp b
2457   1152 D8            push b
2458   1153                             
2459   1153 FA E1 FF      lea d, [bp + -31] ; $opcode
2460   1156 2D            mov b, d
2461   1157 38 00 00      mov c, 0
2462   115A FD AB         swp b
2463   115C D8            push b
2464   115D 07 8D 43      call strcat
2465   1160 51 04 00      add sp, 4
2466   1163             ; --- END FUNCTION CALL
2467   1163             _if53_exit:
2468   1163             _for51_update:
2469   1163 0A C7 0F      jmp _for51_cond
2470   1166             _for51_exit:
2471   1166             ; op = search_opcode(opcode); 
2472   1166 FA 87 FF      lea d, [bp + -121] ; $op
2473   1169 DA            push d
2474   116A                             
2475   116A             ; --- START FUNCTION CALL
2476   116A                             
2477   116A FA E1 FF      lea d, [bp + -31] ; $opcode
2478   116D 2D            mov b, d
2479   116E 38 00 00      mov c, 0
2480   1171 FD AB         swp b
2481   1173 D8            push b
2482   1174 07 FA 23      call search_opcode
2483   1177 51 02 00      add sp, 2
2484   117A             ; --- END FUNCTION CALL
2485   117A E7            pop d
2486   117B FD 28         mov si, b
2487   117D FD 50         mov di, d
2488   117F 38 1A 00      mov c, 26
2489   1182 FD F5         rep movsb
2490   1184             ; if(op.name[0] == '\0') continue; 
2491   1184             _if56_cond:
2492   1184                             
2493   1184 FA 87 FF      lea d, [bp + -121] ; $op
2494   1187 58 00 00      add d, 0
2495   118A D7            push a
2496   118B DA            push d
2497   118C                             
2498   118C FD 2E 00 00   mov32 cb, $00000000
2498   1190 00 00 
2499   1192 E7            pop d
2500   1193 5A            add d, b
2501   1194 E4            pop a
2502   1195 32            mov bl, [d]
2503   1196 A7 00         mov bh, 0
2504   1198 38 00 00      mov c, 0
2505   119B             ; --- START RELATIONAL
2506   119B D7            push a
2507   119C 11            mov a, b
2508   119D FD 2E 00 00   mov32 cb, $00000000
2508   11A1 00 00 
2509   11A3 B0            cmp a, b
2510   11A4 FD 71         seq ; ==
2511   11A6 E4            pop a
2512   11A7             ; --- END RELATIONAL
2513   11A7 C0 00 00      cmp b, 0
2514   11AA C6 B3 11      je _if56_exit
2515   11AD             _if56_TRUE:
2516   11AD             ; continue; 
2517   11AD 0A 70 13      jmp _for50_update ; for continue
2518   11B0 0A B3 11      jmp _if56_exit
2519   11B3             _if56_exit:
2520   11B3             ; if(op.opcode_type){ 
2521   11B3             _if57_cond:
2522   11B3                             
2523   11B3 FA 87 FF      lea d, [bp + -121] ; $op
2524   11B6 58 19 00      add d, 25
2525   11B9 32            mov bl, [d]
2526   11BA A7 00         mov bh, 0
2527   11BC 38 00 00      mov c, 0
2528   11BF C0 00 00      cmp b, 0
2529   11C2 C6 D5 11      je _if57_exit
2530   11C5             _if57_TRUE:
2531   11C5             ; forwards(1); 
2532   11C5                             
2533   11C5             ; --- START FUNCTION CALL
2534   11C5                             
2535   11C5 FD 2E 01 00   mov32 cb, $00000001
2535   11C9 00 00 
2536   11CB DD            push bl
2537   11CC 07 27 27      call forwards
2538   11CF 51 01 00      add sp, 1
2539   11D2             ; --- END FUNCTION CALL
2540   11D2 0A D5 11      jmp _if57_exit
2541   11D5             _if57_exit:
2542   11D5             ; forwards(1); 
2543   11D5                             
2544   11D5             ; --- START FUNCTION CALL
2545   11D5                             
2546   11D5 FD 2E 01 00   mov32 cb, $00000001
2546   11D9 00 00 
2547   11DB DD            push bl
2548   11DC 07 27 27      call forwards
2549   11DF 51 01 00      add sp, 1
2550   11E2             ; --- END FUNCTION CALL
2551   11E2             ; prog = code_line; 
2552   11E2 3B 87 4E      mov d, _prog ; $prog
2553   11E5 DA            push d
2554   11E6                             
2555   11E6 FA A1 FF      lea d, [bp + -95] ; $code_line
2556   11E9 2D            mov b, d
2557   11EA 38 00 00      mov c, 0
2558   11ED E7            pop d
2559   11EE FD 43         mov [d], b
2560   11F0             ; j = 0; 
2561   11F0 FA 7F FF      lea d, [bp + -129] ; $j
2562   11F3 DA            push d
2563   11F4                             
2564   11F4 FD 2E 00 00   mov32 cb, $00000000
2564   11F8 00 00 
2565   11FA E7            pop d
2566   11FB FD 43         mov [d], b
2567   11FD             ; get(); 
2568   11FD                             
2569   11FD             ; --- START FUNCTION CALL
2570   11FD 07 78 2B      call get
2571   1200             ; for(;;){ 
2572   1200             _for58_init:
2573   1200             _for58_cond:
2574   1200             _for58_block:
2575   1200             ; get(); 
2576   1200                             
2577   1200             ; --- START FUNCTION CALL
2578   1200 07 78 2B      call get
2579   1203             ; if(toktype == END) break; 
2580   1203             _if59_cond:
2581   1203                             
2582   1203 3B 85 4E      mov d, _toktype ; $toktype
2583   1206 2A            mov b, [d]
2584   1207 38 00 00      mov c, 0
2585   120A             ; --- START RELATIONAL
2586   120A D7            push a
2587   120B 11            mov a, b
2588   120C FD 2E 07 00   mov32 cb, $7 ; enum element: END
2588   1210 00 00 
2589   1212 B0            cmp a, b
2590   1213 FD 71         seq ; ==
2591   1215 E4            pop a
2592   1216             ; --- END RELATIONAL
2593   1216 C0 00 00      cmp b, 0
2594   1219 C6 22 12      je _if59_exit
2595   121C             _if59_TRUE:
2596   121C             ; break; 
2597   121C 0A 6D 13      jmp _for58_exit ; for break
2598   121F 0A 22 12      jmp _if59_exit
2599   1222             _if59_exit:
2600   1222             ; if(toktype == IDENTIFIER && !is_reserved(token)){ 
2601   1222             _if60_cond:
2602   1222                             
2603   1222 3B 85 4E      mov d, _toktype ; $toktype
2604   1225 2A            mov b, [d]
2605   1226 38 00 00      mov c, 0
2606   1229             ; --- START RELATIONAL
2607   1229 D7            push a
2608   122A 11            mov a, b
2609   122B FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
2609   122F 00 00 
2610   1231 B0            cmp a, b
2611   1232 FD 71         seq ; ==
2612   1234 E4            pop a
2613   1235             ; --- END RELATIONAL
2614   1235             ; --- START LOGICAL AND
2615   1235 D7            push a
2616   1236 11            mov a, b
2617   1237             ; --- START FUNCTION CALL
2618   1237                             
2619   1237 3B 89 4E      mov d, _token_data ; $token
2620   123A 2D            mov b, d
2621   123B 38 00 00      mov c, 0
2622   123E FD AB         swp b
2623   1240 D8            push b
2624   1241 07 1C 1F      call is_reserved
2625   1244 51 02 00      add sp, 2
2626   1247             ; --- END FUNCTION CALL
2627   1247 FD A7         sand a, b
2628   1249 E4            pop a
2629   124A             ; --- END LOGICAL AND
2630   124A C0 00 00      cmp b, 0
2631   124D C6 D0 12      je _if60_else
2632   1250             _if60_TRUE:
2633   1250             ; if(operand_types[j] == '#'){ 
2634   1250             _if61_cond:
2635   1250                             
2636   1250 FA 7C FF      lea d, [bp + -132] ; $operand_types
2637   1253 D7            push a
2638   1254 DA            push d
2639   1255                             
2640   1255 FA 7F FF      lea d, [bp + -129] ; $j
2641   1258 2A            mov b, [d]
2642   1259 38 00 00      mov c, 0
2643   125C E7            pop d
2644   125D 5A            add d, b
2645   125E E4            pop a
2646   125F 32            mov bl, [d]
2647   1260 A7 00         mov bh, 0
2648   1262 38 00 00      mov c, 0
2649   1265             ; --- START RELATIONAL
2650   1265 D7            push a
2651   1266 11            mov a, b
2652   1267 FD 2E 23 00   mov32 cb, $00000023
2652   126B 00 00 
2653   126D B0            cmp a, b
2654   126E FD 71         seq ; ==
2655   1270 E4            pop a
2656   1271             ; --- END RELATIONAL
2657   1271 C0 00 00      cmp b, 0
2658   1274 C6 86 12      je _if61_else
2659   1277             _if61_TRUE:
2660   1277             ; error("8bit operand expected but 16bit label given."); 
2661   1277                             
2662   1277             ; --- START FUNCTION CALL
2663   1277                             
2664   1277 26 26 51      mov b, _s28 ; "8bit operand expected but 16bit label given."
2665   127A FD AB         swp b
2666   127C D8            push b
2667   127D 07 82 39      call error
2668   1280 51 02 00      add sp, 2
2669   1283             ; --- END FUNCTION CALL
2670   1283 0A BD 12      jmp _if61_exit
2671   1286             _if61_else:
2672   1286             ; if(operand_types[j] == '@'){ 
2673   1286             _if62_cond:
2674   1286                             
2675   1286 FA 7C FF      lea d, [bp + -132] ; $operand_types
2676   1289 D7            push a
2677   128A DA            push d
2678   128B                             
2679   128B FA 7F FF      lea d, [bp + -129] ; $j
2680   128E 2A            mov b, [d]
2681   128F 38 00 00      mov c, 0
2682   1292 E7            pop d
2683   1293 5A            add d, b
2684   1294 E4            pop a
2685   1295 32            mov bl, [d]
2686   1296 A7 00         mov bh, 0
2687   1298 38 00 00      mov c, 0
2688   129B             ; --- START RELATIONAL
2689   129B D7            push a
2690   129C 11            mov a, b
2691   129D FD 2E 40 00   mov32 cb, $00000040
2691   12A1 00 00 
2692   12A3 B0            cmp a, b
2693   12A4 FD 71         seq ; ==
2694   12A6 E4            pop a
2695   12A7             ; --- END RELATIONAL
2696   12A7 C0 00 00      cmp b, 0
2697   12AA C6 BD 12      je _if62_exit
2698   12AD             _if62_TRUE:
2699   12AD             ; forwards(2); 
2700   12AD                             
2701   12AD             ; --- START FUNCTION CALL
2702   12AD                             
2703   12AD FD 2E 02 00   mov32 cb, $00000002
2703   12B1 00 00 
2704   12B3 DD            push bl
2705   12B4 07 27 27      call forwards
2706   12B7 51 01 00      add sp, 1
2707   12BA             ; --- END FUNCTION CALL
2708   12BA 0A BD 12      jmp _if62_exit
2709   12BD             _if62_exit:
2710   12BD             _if61_exit:
2711   12BD             ; j++; 
2712   12BD                             
2713   12BD FA 7F FF      lea d, [bp + -129] ; $j
2714   12C0 2A            mov b, [d]
2715   12C1 38 00 00      mov c, 0
2716   12C4 11            mov a, b
2717   12C5 FD 77         inc b
2718   12C7 FA 7F FF      lea d, [bp + -129] ; $j
2719   12CA FD 43         mov [d], b
2720   12CC 27            mov b, a
2721   12CD 0A 6A 13      jmp _if60_exit
2722   12D0             _if60_else:
2723   12D0             ; if(toktype == INTEGER_CONST){ 
2724   12D0             _if63_cond:
2725   12D0                             
2726   12D0 3B 85 4E      mov d, _toktype ; $toktype
2727   12D3 2A            mov b, [d]
2728   12D4 38 00 00      mov c, 0
2729   12D7             ; --- START RELATIONAL
2730   12D7 D7            push a
2731   12D8 11            mov a, b
2732   12D9 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2732   12DD 00 00 
2733   12DF B0            cmp a, b
2734   12E0 FD 71         seq ; ==
2735   12E2 E4            pop a
2736   12E3             ; --- END RELATIONAL
2737   12E3 C0 00 00      cmp b, 0
2738   12E6 C6 6A 13      je _if63_exit
2739   12E9             _if63_TRUE:
2740   12E9             ; if(operand_types[j] == '#'){ 
2741   12E9             _if64_cond:
2742   12E9                             
2743   12E9 FA 7C FF      lea d, [bp + -132] ; $operand_types
2744   12EC D7            push a
2745   12ED DA            push d
2746   12EE                             
2747   12EE FA 7F FF      lea d, [bp + -129] ; $j
2748   12F1 2A            mov b, [d]
2749   12F2 38 00 00      mov c, 0
2750   12F5 E7            pop d
2751   12F6 5A            add d, b
2752   12F7 E4            pop a
2753   12F8 32            mov bl, [d]
2754   12F9 A7 00         mov bh, 0
2755   12FB 38 00 00      mov c, 0
2756   12FE             ; --- START RELATIONAL
2757   12FE D7            push a
2758   12FF 11            mov a, b
2759   1300 FD 2E 23 00   mov32 cb, $00000023
2759   1304 00 00 
2760   1306 B0            cmp a, b
2761   1307 FD 71         seq ; ==
2762   1309 E4            pop a
2763   130A             ; --- END RELATIONAL
2764   130A C0 00 00      cmp b, 0
2765   130D C6 20 13      je _if64_else
2766   1310             _if64_TRUE:
2767   1310             ; forwards(1); 
2768   1310                             
2769   1310             ; --- START FUNCTION CALL
2770   1310                             
2771   1310 FD 2E 01 00   mov32 cb, $00000001
2771   1314 00 00 
2772   1316 DD            push bl
2773   1317 07 27 27      call forwards
2774   131A 51 01 00      add sp, 1
2775   131D             ; --- END FUNCTION CALL
2776   131D 0A 57 13      jmp _if64_exit
2777   1320             _if64_else:
2778   1320             ; if(operand_types[j] == '@'){ 
2779   1320             _if65_cond:
2780   1320                             
2781   1320 FA 7C FF      lea d, [bp + -132] ; $operand_types
2782   1323 D7            push a
2783   1324 DA            push d
2784   1325                             
2785   1325 FA 7F FF      lea d, [bp + -129] ; $j
2786   1328 2A            mov b, [d]
2787   1329 38 00 00      mov c, 0
2788   132C E7            pop d
2789   132D 5A            add d, b
2790   132E E4            pop a
2791   132F 32            mov bl, [d]
2792   1330 A7 00         mov bh, 0
2793   1332 38 00 00      mov c, 0
2794   1335             ; --- START RELATIONAL
2795   1335 D7            push a
2796   1336 11            mov a, b
2797   1337 FD 2E 40 00   mov32 cb, $00000040
2797   133B 00 00 
2798   133D B0            cmp a, b
2799   133E FD 71         seq ; ==
2800   1340 E4            pop a
2801   1341             ; --- END RELATIONAL
2802   1341 C0 00 00      cmp b, 0
2803   1344 C6 57 13      je _if65_exit
2804   1347             _if65_TRUE:
2805   1347             ; forwards(2); 
2806   1347                             
2807   1347             ; --- START FUNCTION CALL
2808   1347                             
2809   1347 FD 2E 02 00   mov32 cb, $00000002
2809   134B 00 00 
2810   134D DD            push bl
2811   134E 07 27 27      call forwards
2812   1351 51 01 00      add sp, 1
2813   1354             ; --- END FUNCTION CALL
2814   1354 0A 57 13      jmp _if65_exit
2815   1357             _if65_exit:
2816   1357             _if64_exit:
2817   1357             ; j++; 
2818   1357                             
2819   1357 FA 7F FF      lea d, [bp + -129] ; $j
2820   135A 2A            mov b, [d]
2821   135B 38 00 00      mov c, 0
2822   135E 11            mov a, b
2823   135F FD 77         inc b
2824   1361 FA 7F FF      lea d, [bp + -129] ; $j
2825   1364 FD 43         mov [d], b
2826   1366 27            mov b, a
2827   1367 0A 6A 13      jmp _if63_exit
2828   136A             _if63_exit:
2829   136A             _if60_exit:
2830   136A             _for58_update:
2831   136A 0A 00 12      jmp _for58_cond
2832   136D             _for58_exit:
2833   136D             ; break; 
2834   136D 0A 83 13      jmp _for50_exit ; for break
2835   1370             _for50_update:
2836   1370                             
2837   1370 FA 81 FF      lea d, [bp + -127] ; $i
2838   1373 2A            mov b, [d]
2839   1374 38 00 00      mov c, 0
2840   1377 11            mov a, b
2841   1378 FD 77         inc b
2842   137A FA 81 FF      lea d, [bp + -127] ; $i
2843   137D FD 43         mov [d], b
2844   137F 27            mov b, a
2845   1380 0A 5F 0F      jmp _for50_cond
2846   1383             _for50_exit:
2847   1383             _if41_exit:
2848   1383             ; pop_prog(); 
2849   1383                             
2850   1383             ; --- START FUNCTION CALL
2851   1383 07 4C 3A      call pop_prog
2852   1386 F9            leave
2853   1387 09            ret
2854   1388             
2855   1388             parse_instr:
2856   1388 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2857   138B             ; char opcode[32]; 
2858   138B 52 20 00      sub sp, 32
2859   138E             ; char code_line[64]; 
2860   138E 52 40 00      sub sp, 64
2861   1391             ; struct t_opcode op; 
2862   1391 52 1A 00      sub sp, 26
2863   1394             ; int instr_len; 
2864   1394 52 02 00      sub sp, 2
2865   1397             ; int num_operands, num_operandsexp; 
2866   1397 52 02 00      sub sp, 2
2867   139A 52 02 00      sub sp, 2
2868   139D             ; int i, j; 
2869   139D 52 02 00      sub sp, 2
2870   13A0 52 02 00      sub sp, 2
2871   13A3             ; char operand_types[3]; // operand types and locations 
2872   13A3 52 03 00      sub sp, 3
2873   13A6             ; int old_pc; 
2874   13A6 52 02 00      sub sp, 2
2875   13A9             ; char has_operands; 
2876   13A9 52 01 00      sub sp, 1
2877   13AC             ; old_pc = pc; 
2878   13AC FA 78 FF      lea d, [bp + -136] ; $old_pc
2879   13AF DA            push d
2880   13B0                             
2881   13B0 3B 80 4E      mov d, _pc ; $pc
2882   13B3 2A            mov b, [d]
2883   13B4 38 00 00      mov c, 0
2884   13B7 E7            pop d
2885   13B8 FD 43         mov [d], b
2886   13BA             ; get_line(); 
2887   13BA                             
2888   13BA             ; --- START FUNCTION CALL
2889   13BA 07 5B 2A      call get_line
2890   13BD             ; push_prog(); 
2891   13BD                             
2892   13BD             ; --- START FUNCTION CALL
2893   13BD 07 F2 39      call push_prog
2894   13C0             ; strcpy(code_line, string_const); 
2895   13C0                             
2896   13C0             ; --- START FUNCTION CALL
2897   13C0                             
2898   13C0 3B C9 4E      mov d, _string_const_data ; $string_const
2899   13C3 2D            mov b, d
2900   13C4 38 00 00      mov c, 0
2901   13C7 FD AB         swp b
2902   13C9 D8            push b
2903   13CA                             
2904   13CA FA A1 FF      lea d, [bp + -95] ; $code_line
2905   13CD 2D            mov b, d
2906   13CE 38 00 00      mov c, 0
2907   13D1 FD AB         swp b
2908   13D3 D8            push b
2909   13D4 07 13 43      call strcpy
2910   13D7 51 04 00      add sp, 4
2911   13DA             ; --- END FUNCTION CALL
2912   13DA             ; has_operands = 0; 
2913   13DA FA 77 FF      lea d, [bp + -137] ; $has_operands
2914   13DD DA            push d
2915   13DE                             
2916   13DE FD 2E 00 00   mov32 cb, $00000000
2916   13E2 00 00 
2917   13E4 E7            pop d
2918   13E5 FD 3E         mov [d], bl
2919   13E7             ; prog = code_line; 
2920   13E7 3B 87 4E      mov d, _prog ; $prog
2921   13EA DA            push d
2922   13EB                             
2923   13EB FA A1 FF      lea d, [bp + -95] ; $code_line
2924   13EE 2D            mov b, d
2925   13EF 38 00 00      mov c, 0
2926   13F2 E7            pop d
2927   13F3 FD 43         mov [d], b
2928   13F5             ; get(); 
2929   13F5                             
2930   13F5             ; --- START FUNCTION CALL
2931   13F5 07 78 2B      call get
2932   13F8             ; for(;;){ 
2933   13F8             _for66_init:
2934   13F8             _for66_cond:
2935   13F8             _for66_block:
2936   13F8             ; get(); 
2937   13F8                             
2938   13F8             ; --- START FUNCTION CALL
2939   13F8 07 78 2B      call get
2940   13FB             ; if(toktype == END) break; 
2941   13FB             _if67_cond:
2942   13FB                             
2943   13FB 3B 85 4E      mov d, _toktype ; $toktype
2944   13FE 2A            mov b, [d]
2945   13FF 38 00 00      mov c, 0
2946   1402             ; --- START RELATIONAL
2947   1402 D7            push a
2948   1403 11            mov a, b
2949   1404 FD 2E 07 00   mov32 cb, $7 ; enum element: END
2949   1408 00 00 
2950   140A B0            cmp a, b
2951   140B FD 71         seq ; ==
2952   140D E4            pop a
2953   140E             ; --- END RELATIONAL
2954   140E C0 00 00      cmp b, 0
2955   1411 C6 1A 14      je _if67_exit
2956   1414             _if67_TRUE:
2957   1414             ; break; 
2958   1414 0A 6A 14      jmp _for66_exit ; for break
2959   1417 0A 1A 14      jmp _if67_exit
2960   141A             _if67_exit:
2961   141A             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
2962   141A             _if68_cond:
2963   141A                             
2964   141A 3B 85 4E      mov d, _toktype ; $toktype
2965   141D 2A            mov b, [d]
2966   141E 38 00 00      mov c, 0
2967   1421             ; --- START RELATIONAL
2968   1421 D7            push a
2969   1422 11            mov a, b
2970   1423 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
2970   1427 00 00 
2971   1429 B0            cmp a, b
2972   142A FD 71         seq ; ==
2973   142C E4            pop a
2974   142D             ; --- END RELATIONAL
2975   142D             ; --- START LOGICAL OR
2976   142D D7            push a
2977   142E 11            mov a, b
2978   142F             ; --- START FUNCTION CALL
2979   142F                             
2980   142F 3B 89 4E      mov d, _token_data ; $token
2981   1432 2D            mov b, d
2982   1433 38 00 00      mov c, 0
2983   1436 FD AB         swp b
2984   1438 D8            push b
2985   1439 07 75 23      call label_exists
2986   143C 51 02 00      add sp, 2
2987   143F             ; --- END FUNCTION CALL
2988   143F             ; --- START RELATIONAL
2989   143F D7            push a
2990   1440 11            mov a, b
2991   1441 FD 2E FF FF   mov32 cb, $ffffffff
2991   1445 FF FF 
2992   1447 B0            cmp a, b
2993   1448 FD 72         sneq ; !=
2994   144A E4            pop a
2995   144B             ; --- END RELATIONAL
2996   144B FD A8         sor a, b ; ||
2997   144D E4            pop a
2998   144E             ; --- END LOGICAL OR
2999   144E C0 00 00      cmp b, 0
3000   1451 C6 67 14      je _if68_exit
3001   1454             _if68_TRUE:
3002   1454             ; has_operands = 1; 
3003   1454 FA 77 FF      lea d, [bp + -137] ; $has_operands
3004   1457 DA            push d
3005   1458                             
3006   1458 FD 2E 01 00   mov32 cb, $00000001
3006   145C 00 00 
3007   145E E7            pop d
3008   145F FD 3E         mov [d], bl
3009   1461             ; break; 
3010   1461 0A 6A 14      jmp _for66_exit ; for break
3011   1464 0A 67 14      jmp _if68_exit
3012   1467             _if68_exit:
3013   1467             _for66_update:
3014   1467 0A F8 13      jmp _for66_cond
3015   146A             _for66_exit:
3016   146A             ; opcode[0] = '\0'; 
3017   146A FA E1 FF      lea d, [bp + -31] ; $opcode
3018   146D D7            push a
3019   146E DA            push d
3020   146F                             
3021   146F FD 2E 00 00   mov32 cb, $00000000
3021   1473 00 00 
3022   1475 E7            pop d
3023   1476 5A            add d, b
3024   1477 E4            pop a
3025   1478 DA            push d
3026   1479                             
3027   1479 FD 2E 00 00   mov32 cb, $00000000
3027   147D 00 00 
3028   147F E7            pop d
3029   1480 FD 3E         mov [d], bl
3030   1482             ; prog = code_line; 
3031   1482 3B 87 4E      mov d, _prog ; $prog
3032   1485 DA            push d
3033   1486                             
3034   1486 FA A1 FF      lea d, [bp + -95] ; $code_line
3035   1489 2D            mov b, d
3036   148A 38 00 00      mov c, 0
3037   148D E7            pop d
3038   148E FD 43         mov [d], b
3039   1490             ; if(!has_operands){ 
3040   1490             _if69_cond:
3041   1490                             
3042   1490 FA 77 FF      lea d, [bp + -137] ; $has_operands
3043   1493 32            mov bl, [d]
3044   1494 A7 00         mov bh, 0
3045   1496 38 00 00      mov c, 0
3046   1499 C0 00 00      cmp b, 0
3047   149C C6 23 16      je _if69_else
3048   149F             _if69_TRUE:
3049   149F             ; get(); 
3050   149F                             
3051   149F             ; --- START FUNCTION CALL
3052   149F 07 78 2B      call get
3053   14A2             ; strcpy(opcode, token); 
3054   14A2                             
3055   14A2             ; --- START FUNCTION CALL
3056   14A2                             
3057   14A2 3B 89 4E      mov d, _token_data ; $token
3058   14A5 2D            mov b, d
3059   14A6 38 00 00      mov c, 0
3060   14A9 FD AB         swp b
3061   14AB D8            push b
3062   14AC                             
3063   14AC FA E1 FF      lea d, [bp + -31] ; $opcode
3064   14AF 2D            mov b, d
3065   14B0 38 00 00      mov c, 0
3066   14B3 FD AB         swp b
3067   14B5 D8            push b
3068   14B6 07 13 43      call strcpy
3069   14B9 51 04 00      add sp, 4
3070   14BC             ; --- END FUNCTION CALL
3071   14BC             ; get();  
3072   14BC                             
3073   14BC             ; --- START FUNCTION CALL
3074   14BC 07 78 2B      call get
3075   14BF             ; if(toktype == END){ 
3076   14BF             _if70_cond:
3077   14BF                             
3078   14BF 3B 85 4E      mov d, _toktype ; $toktype
3079   14C2 2A            mov b, [d]
3080   14C3 38 00 00      mov c, 0
3081   14C6             ; --- START RELATIONAL
3082   14C6 D7            push a
3083   14C7 11            mov a, b
3084   14C8 FD 2E 07 00   mov32 cb, $7 ; enum element: END
3084   14CC 00 00 
3085   14CE B0            cmp a, b
3086   14CF FD 71         seq ; ==
3087   14D1 E4            pop a
3088   14D2             ; --- END RELATIONAL
3089   14D2 C0 00 00      cmp b, 0
3090   14D5 C6 F1 14      je _if70_else
3091   14D8             _if70_TRUE:
3092   14D8             ; strcat(opcode, " ."); 
3093   14D8                             
3094   14D8             ; --- START FUNCTION CALL
3095   14D8                             
3096   14D8 26 F0 50      mov b, _s25 ; " ."
3097   14DB FD AB         swp b
3098   14DD D8            push b
3099   14DE                             
3100   14DE FA E1 FF      lea d, [bp + -31] ; $opcode
3101   14E1 2D            mov b, d
3102   14E2 38 00 00      mov c, 0
3103   14E5 FD AB         swp b
3104   14E7 D8            push b
3105   14E8 07 8D 43      call strcat
3106   14EB 51 04 00      add sp, 4
3107   14EE             ; --- END FUNCTION CALL
3108   14EE 0A 60 15      jmp _if70_exit
3109   14F1             _if70_else:
3110   14F1             ; strcat(opcode, " "); 
3111   14F1                             
3112   14F1             ; --- START FUNCTION CALL
3113   14F1                             
3114   14F1 26 F3 50      mov b, _s26 ; " "
3115   14F4 FD AB         swp b
3116   14F6 D8            push b
3117   14F7                             
3118   14F7 FA E1 FF      lea d, [bp + -31] ; $opcode
3119   14FA 2D            mov b, d
3120   14FB 38 00 00      mov c, 0
3121   14FE FD AB         swp b
3122   1500 D8            push b
3123   1501 07 8D 43      call strcat
3124   1504 51 04 00      add sp, 4
3125   1507             ; --- END FUNCTION CALL
3126   1507             ; strcat(opcode, token); 
3127   1507                             
3128   1507             ; --- START FUNCTION CALL
3129   1507                             
3130   1507 3B 89 4E      mov d, _token_data ; $token
3131   150A 2D            mov b, d
3132   150B 38 00 00      mov c, 0
3133   150E FD AB         swp b
3134   1510 D8            push b
3135   1511                             
3136   1511 FA E1 FF      lea d, [bp + -31] ; $opcode
3137   1514 2D            mov b, d
3138   1515 38 00 00      mov c, 0
3139   1518 FD AB         swp b
3140   151A D8            push b
3141   151B 07 8D 43      call strcat
3142   151E 51 04 00      add sp, 4
3143   1521             ; --- END FUNCTION CALL
3144   1521             ; for(;;){ 
3145   1521             _for71_init:
3146   1521             _for71_cond:
3147   1521             _for71_block:
3148   1521             ; get(); 
3149   1521                             
3150   1521             ; --- START FUNCTION CALL
3151   1521 07 78 2B      call get
3152   1524             ; if(toktype == END) break; 
3153   1524             _if72_cond:
3154   1524                             
3155   1524 3B 85 4E      mov d, _toktype ; $toktype
3156   1527 2A            mov b, [d]
3157   1528 38 00 00      mov c, 0
3158   152B             ; --- START RELATIONAL
3159   152B D7            push a
3160   152C 11            mov a, b
3161   152D FD 2E 07 00   mov32 cb, $7 ; enum element: END
3161   1531 00 00 
3162   1533 B0            cmp a, b
3163   1534 FD 71         seq ; ==
3164   1536 E4            pop a
3165   1537             ; --- END RELATIONAL
3166   1537 C0 00 00      cmp b, 0
3167   153A C6 43 15      je _if72_exit
3168   153D             _if72_TRUE:
3169   153D             ; break; 
3170   153D 0A 60 15      jmp _for71_exit ; for break
3171   1540 0A 43 15      jmp _if72_exit
3172   1543             _if72_exit:
3173   1543             ; strcat(opcode, token); 
3174   1543                             
3175   1543             ; --- START FUNCTION CALL
3176   1543                             
3177   1543 3B 89 4E      mov d, _token_data ; $token
3178   1546 2D            mov b, d
3179   1547 38 00 00      mov c, 0
3180   154A FD AB         swp b
3181   154C D8            push b
3182   154D                             
3183   154D FA E1 FF      lea d, [bp + -31] ; $opcode
3184   1550 2D            mov b, d
3185   1551 38 00 00      mov c, 0
3186   1554 FD AB         swp b
3187   1556 D8            push b
3188   1557 07 8D 43      call strcat
3189   155A 51 04 00      add sp, 4
3190   155D             ; --- END FUNCTION CALL
3191   155D             _for71_update:
3192   155D 0A 21 15      jmp _for71_cond
3193   1560             _for71_exit:
3194   1560             _if70_exit:
3195   1560             ; op = search_opcode(opcode); 
3196   1560 FA 87 FF      lea d, [bp + -121] ; $op
3197   1563 DA            push d
3198   1564                             
3199   1564             ; --- START FUNCTION CALL
3200   1564                             
3201   1564 FA E1 FF      lea d, [bp + -31] ; $opcode
3202   1567 2D            mov b, d
3203   1568 38 00 00      mov c, 0
3204   156B FD AB         swp b
3205   156D D8            push b
3206   156E 07 FA 23      call search_opcode
3207   1571 51 02 00      add sp, 2
3208   1574             ; --- END FUNCTION CALL
3209   1574 E7            pop d
3210   1575 FD 28         mov si, b
3211   1577 FD 50         mov di, d
3212   1579 38 1A 00      mov c, 26
3213   157C FD F5         rep movsb
3214   157E             ; instr_len = 1; 
3215   157E FA 85 FF      lea d, [bp + -123] ; $instr_len
3216   1581 DA            push d
3217   1582                             
3218   1582 FD 2E 01 00   mov32 cb, $00000001
3218   1586 00 00 
3219   1588 E7            pop d
3220   1589 FD 43         mov [d], b
3221   158B             ; if(op.opcode_type){ 
3222   158B             _if73_cond:
3223   158B                             
3224   158B FA 87 FF      lea d, [bp + -121] ; $op
3225   158E 58 19 00      add d, 25
3226   1591 32            mov bl, [d]
3227   1592 A7 00         mov bh, 0
3228   1594 38 00 00      mov c, 0
3229   1597 C0 00 00      cmp b, 0
3230   159A C6 C7 15      je _if73_exit
3231   159D             _if73_TRUE:
3232   159D             ; instr_len++; 
3233   159D                             
3234   159D FA 85 FF      lea d, [bp + -123] ; $instr_len
3235   15A0 2A            mov b, [d]
3236   15A1 38 00 00      mov c, 0
3237   15A4 11            mov a, b
3238   15A5 FD 77         inc b
3239   15A7 FA 85 FF      lea d, [bp + -123] ; $instr_len
3240   15AA FD 43         mov [d], b
3241   15AC 27            mov b, a
3242   15AD             ; emit_byte(0xFD, emit_override); 
3243   15AD                             
3244   15AD             ; --- START FUNCTION CALL
3245   15AD                             
3246   15AD FA 05 00      lea d, [bp + 5] ; $emit_override
3247   15B0 32            mov bl, [d]
3248   15B1 A7 00         mov bh, 0
3249   15B3 38 00 00      mov c, 0
3250   15B6 DD            push bl
3251   15B7                             
3252   15B7 FD 2E FD 00   mov32 cb, $000000fd
3252   15BB 00 00 
3253   15BD DD            push bl
3254   15BE 07 7D 27      call emit_byte
3255   15C1 51 02 00      add sp, 2
3256   15C4             ; --- END FUNCTION CALL
3257   15C4 0A C7 15      jmp _if73_exit
3258   15C7             _if73_exit:
3259   15C7             ; emit_byte(op.opcode, emit_override); 
3260   15C7                             
3261   15C7             ; --- START FUNCTION CALL
3262   15C7                             
3263   15C7 FA 05 00      lea d, [bp + 5] ; $emit_override
3264   15CA 32            mov bl, [d]
3265   15CB A7 00         mov bh, 0
3266   15CD 38 00 00      mov c, 0
3267   15D0 DD            push bl
3268   15D1                             
3269   15D1 FA 87 FF      lea d, [bp + -121] ; $op
3270   15D4 58 18 00      add d, 24
3271   15D7 32            mov bl, [d]
3272   15D8 A7 00         mov bh, 0
3273   15DA 38 00 00      mov c, 0
3274   15DD DD            push bl
3275   15DE 07 7D 27      call emit_byte
3276   15E1 51 02 00      add sp, 2
3277   15E4             ; --- END FUNCTION CALL
3278   15E4             ; if(!emit_override){ 
3279   15E4             _if74_cond:
3280   15E4                             
3281   15E4 FA 05 00      lea d, [bp + 5] ; $emit_override
3282   15E7 32            mov bl, [d]
3283   15E8 A7 00         mov bh, 0
3284   15EA 38 00 00      mov c, 0
3285   15ED C0 00 00      cmp b, 0
3286   15F0 C6 20 16      je _if74_exit
3287   15F3             _if74_TRUE:
3288   15F3             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
3289   15F3                             
3290   15F3             ; --- START FUNCTION CALL
3291   15F3                             
3292   15F3 FA A1 FF      lea d, [bp + -95] ; $code_line
3293   15F6 2D            mov b, d
3294   15F7 38 00 00      mov c, 0
3295   15FA FD AB         swp b
3296   15FC D8            push b
3297   15FD                             
3298   15FD FA 85 FF      lea d, [bp + -123] ; $instr_len
3299   1600 2A            mov b, [d]
3300   1601 38 00 00      mov c, 0
3301   1604 FD AB         swp b
3302   1606 D8            push b
3303   1607                             
3304   1607 FA 78 FF      lea d, [bp + -136] ; $old_pc
3305   160A 2A            mov b, [d]
3306   160B 38 00 00      mov c, 0
3307   160E FD AB         swp b
3308   1610 D8            push b
3309   1611                             
3310   1611 26 53 51      mov b, _s29 ; "%x(%d): %s\n"
3311   1614 FD AB         swp b
3312   1616 D8            push b
3313   1617 07 70 44      call printf
3314   161A 51 08 00      add sp, 8
3315   161D             ; --- END FUNCTION CALL
3316   161D 0A 20 16      jmp _if74_exit
3317   1620             _if74_exit:
3318   1620 0A 2F 1C      jmp _if69_exit
3319   1623             _if69_else:
3320   1623             ; num_operands = 0; 
3321   1623 FA 83 FF      lea d, [bp + -125] ; $num_operands
3322   1626 DA            push d
3323   1627                             
3324   1627 FD 2E 00 00   mov32 cb, $00000000
3324   162B 00 00 
3325   162D E7            pop d
3326   162E FD 43         mov [d], b
3327   1630             ; for(;;){ 
3328   1630             _for75_init:
3329   1630             _for75_cond:
3330   1630             _for75_block:
3331   1630             ; get(); 
3332   1630                             
3333   1630             ; --- START FUNCTION CALL
3334   1630 07 78 2B      call get
3335   1633             ; if(toktype == END) break; 
3336   1633             _if76_cond:
3337   1633                             
3338   1633 3B 85 4E      mov d, _toktype ; $toktype
3339   1636 2A            mov b, [d]
3340   1637 38 00 00      mov c, 0
3341   163A             ; --- START RELATIONAL
3342   163A D7            push a
3343   163B 11            mov a, b
3344   163C FD 2E 07 00   mov32 cb, $7 ; enum element: END
3344   1640 00 00 
3345   1642 B0            cmp a, b
3346   1643 FD 71         seq ; ==
3347   1645 E4            pop a
3348   1646             ; --- END RELATIONAL
3349   1646 C0 00 00      cmp b, 0
3350   1649 C6 52 16      je _if76_exit
3351   164C             _if76_TRUE:
3352   164C             ; break; 
3353   164C 0A A2 16      jmp _for75_exit ; for break
3354   164F 0A 52 16      jmp _if76_exit
3355   1652             _if76_exit:
3356   1652             ; if(toktype == INTEGER_CONST || label_exists(token) != -1) num_operands++; 
3357   1652             _if77_cond:
3358   1652                             
3359   1652 3B 85 4E      mov d, _toktype ; $toktype
3360   1655 2A            mov b, [d]
3361   1656 38 00 00      mov c, 0
3362   1659             ; --- START RELATIONAL
3363   1659 D7            push a
3364   165A 11            mov a, b
3365   165B FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3365   165F 00 00 
3366   1661 B0            cmp a, b
3367   1662 FD 71         seq ; ==
3368   1664 E4            pop a
3369   1665             ; --- END RELATIONAL
3370   1665             ; --- START LOGICAL OR
3371   1665 D7            push a
3372   1666 11            mov a, b
3373   1667             ; --- START FUNCTION CALL
3374   1667                             
3375   1667 3B 89 4E      mov d, _token_data ; $token
3376   166A 2D            mov b, d
3377   166B 38 00 00      mov c, 0
3378   166E FD AB         swp b
3379   1670 D8            push b
3380   1671 07 75 23      call label_exists
3381   1674 51 02 00      add sp, 2
3382   1677             ; --- END FUNCTION CALL
3383   1677             ; --- START RELATIONAL
3384   1677 D7            push a
3385   1678 11            mov a, b
3386   1679 FD 2E FF FF   mov32 cb, $ffffffff
3386   167D FF FF 
3387   167F B0            cmp a, b
3388   1680 FD 72         sneq ; !=
3389   1682 E4            pop a
3390   1683             ; --- END RELATIONAL
3391   1683 FD A8         sor a, b ; ||
3392   1685 E4            pop a
3393   1686             ; --- END LOGICAL OR
3394   1686 C0 00 00      cmp b, 0
3395   1689 C6 9F 16      je _if77_exit
3396   168C             _if77_TRUE:
3397   168C             ; num_operands++; 
3398   168C                             
3399   168C FA 83 FF      lea d, [bp + -125] ; $num_operands
3400   168F 2A            mov b, [d]
3401   1690 38 00 00      mov c, 0
3402   1693 11            mov a, b
3403   1694 FD 77         inc b
3404   1696 FA 83 FF      lea d, [bp + -125] ; $num_operands
3405   1699 FD 43         mov [d], b
3406   169B 27            mov b, a
3407   169C 0A 9F 16      jmp _if77_exit
3408   169F             _if77_exit:
3409   169F             _for75_update:
3410   169F 0A 30 16      jmp _for75_cond
3411   16A2             _for75_exit:
3412   16A2             ; if(num_operands > 2) error("Maximum number of operands per instruction is 2."); 
3413   16A2             _if78_cond:
3414   16A2                             
3415   16A2 FA 83 FF      lea d, [bp + -125] ; $num_operands
3416   16A5 2A            mov b, [d]
3417   16A6 38 00 00      mov c, 0
3418   16A9             ; --- START RELATIONAL
3419   16A9 D7            push a
3420   16AA 11            mov a, b
3421   16AB FD 2E 02 00   mov32 cb, $00000002
3421   16AF 00 00 
3422   16B1 B0            cmp a, b
3423   16B2 FD 7F         sgt ; >
3424   16B4 E4            pop a
3425   16B5             ; --- END RELATIONAL
3426   16B5 C0 00 00      cmp b, 0
3427   16B8 C6 CA 16      je _if78_exit
3428   16BB             _if78_TRUE:
3429   16BB             ; error("Maximum number of operands per instruction is 2."); 
3430   16BB                             
3431   16BB             ; --- START FUNCTION CALL
3432   16BB                             
3433   16BB 26 F5 50      mov b, _s27 ; "Maximum number of operands per instruction is 2."
3434   16BE FD AB         swp b
3435   16C0 D8            push b
3436   16C1 07 82 39      call error
3437   16C4 51 02 00      add sp, 2
3438   16C7             ; --- END FUNCTION CALL
3439   16C7 0A CA 16      jmp _if78_exit
3440   16CA             _if78_exit:
3441   16CA             ; num_operandsexp = exp(2, num_operands); 
3442   16CA FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
3443   16CD DA            push d
3444   16CE                             
3445   16CE             ; --- START FUNCTION CALL
3446   16CE                             
3447   16CE FA 83 FF      lea d, [bp + -125] ; $num_operands
3448   16D1 2A            mov b, [d]
3449   16D2 38 00 00      mov c, 0
3450   16D5 FD AB         swp b
3451   16D7 D8            push b
3452   16D8                             
3453   16D8 FD 2E 02 00   mov32 cb, $00000002
3453   16DC 00 00 
3454   16DE FD AB         swp b
3455   16E0 D8            push b
3456   16E1 07 CF 3D      call exp
3457   16E4 51 04 00      add sp, 4
3458   16E7             ; --- END FUNCTION CALL
3459   16E7 E7            pop d
3460   16E8 FD 43         mov [d], b
3461   16EA             ; for(i = 0; i < num_operandsexp; i++){ 
3462   16EA             _for79_init:
3463   16EA FA 7F FF      lea d, [bp + -129] ; $i
3464   16ED DA            push d
3465   16EE                             
3466   16EE FD 2E 00 00   mov32 cb, $00000000
3466   16F2 00 00 
3467   16F4 E7            pop d
3468   16F5 FD 43         mov [d], b
3469   16F7             _for79_cond:
3470   16F7                             
3471   16F7 FA 7F FF      lea d, [bp + -129] ; $i
3472   16FA 2A            mov b, [d]
3473   16FB 38 00 00      mov c, 0
3474   16FE             ; --- START RELATIONAL
3475   16FE D7            push a
3476   16FF 11            mov a, b
3477   1700 FA 81 FF      lea d, [bp + -127] ; $num_operandsexp
3478   1703 2A            mov b, [d]
3479   1704 38 00 00      mov c, 0
3480   1707 B0            cmp a, b
3481   1708 FD 73         slt ; < (signed)
3482   170A E4            pop a
3483   170B             ; --- END RELATIONAL
3484   170B C0 00 00      cmp b, 0
3485   170E C6 2F 1C      je _for79_exit
3486   1711             _for79_block:
3487   1711             ; prog = code_line; 
3488   1711 3B 87 4E      mov d, _prog ; $prog
3489   1714 DA            push d
3490   1715                             
3491   1715 FA A1 FF      lea d, [bp + -95] ; $code_line
3492   1718 2D            mov b, d
3493   1719 38 00 00      mov c, 0
3494   171C E7            pop d
3495   171D FD 43         mov [d], b
3496   171F             ; get(); 
3497   171F                             
3498   171F             ; --- START FUNCTION CALL
3499   171F 07 78 2B      call get
3500   1722             ; strcpy(opcode, token); 
3501   1722                             
3502   1722             ; --- START FUNCTION CALL
3503   1722                             
3504   1722 3B 89 4E      mov d, _token_data ; $token
3505   1725 2D            mov b, d
3506   1726 38 00 00      mov c, 0
3507   1729 FD AB         swp b
3508   172B D8            push b
3509   172C                             
3510   172C FA E1 FF      lea d, [bp + -31] ; $opcode
3511   172F 2D            mov b, d
3512   1730 38 00 00      mov c, 0
3513   1733 FD AB         swp b
3514   1735 D8            push b
3515   1736 07 13 43      call strcpy
3516   1739 51 04 00      add sp, 4
3517   173C             ; --- END FUNCTION CALL
3518   173C             ; strcat(opcode, " "); 
3519   173C                             
3520   173C             ; --- START FUNCTION CALL
3521   173C                             
3522   173C 26 F3 50      mov b, _s26 ; " "
3523   173F FD AB         swp b
3524   1741 D8            push b
3525   1742                             
3526   1742 FA E1 FF      lea d, [bp + -31] ; $opcode
3527   1745 2D            mov b, d
3528   1746 38 00 00      mov c, 0
3529   1749 FD AB         swp b
3530   174B D8            push b
3531   174C 07 8D 43      call strcat
3532   174F 51 04 00      add sp, 4
3533   1752             ; --- END FUNCTION CALL
3534   1752             ; j = 0; 
3535   1752 FA 7D FF      lea d, [bp + -131] ; $j
3536   1755 DA            push d
3537   1756                             
3538   1756 FD 2E 00 00   mov32 cb, $00000000
3538   175A 00 00 
3539   175C E7            pop d
3540   175D FD 43         mov [d], b
3541   175F             ; for(;;){ 
3542   175F             _for80_init:
3543   175F             _for80_cond:
3544   175F             _for80_block:
3545   175F             ; get(); 
3546   175F                             
3547   175F             ; --- START FUNCTION CALL
3548   175F 07 78 2B      call get
3549   1762             ; if(toktype == END) break; 
3550   1762             _if81_cond:
3551   1762                             
3552   1762 3B 85 4E      mov d, _toktype ; $toktype
3553   1765 2A            mov b, [d]
3554   1766 38 00 00      mov c, 0
3555   1769             ; --- START RELATIONAL
3556   1769 D7            push a
3557   176A 11            mov a, b
3558   176B FD 2E 07 00   mov32 cb, $7 ; enum element: END
3558   176F 00 00 
3559   1771 B0            cmp a, b
3560   1772 FD 71         seq ; ==
3561   1774 E4            pop a
3562   1775             ; --- END RELATIONAL
3563   1775 C0 00 00      cmp b, 0
3564   1778 C6 81 17      je _if81_exit
3565   177B             _if81_TRUE:
3566   177B             ; break; 
3567   177B 0A F2 18      jmp _for80_exit ; for break
3568   177E 0A 81 17      jmp _if81_exit
3569   1781             _if81_exit:
3570   1781             ; if(toktype == INTEGER_CONST || label_exists(token) != -1){ 
3571   1781             _if82_cond:
3572   1781                             
3573   1781 3B 85 4E      mov d, _toktype ; $toktype
3574   1784 2A            mov b, [d]
3575   1785 38 00 00      mov c, 0
3576   1788             ; --- START RELATIONAL
3577   1788 D7            push a
3578   1789 11            mov a, b
3579   178A FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
3579   178E 00 00 
3580   1790 B0            cmp a, b
3581   1791 FD 71         seq ; ==
3582   1793 E4            pop a
3583   1794             ; --- END RELATIONAL
3584   1794             ; --- START LOGICAL OR
3585   1794 D7            push a
3586   1795 11            mov a, b
3587   1796             ; --- START FUNCTION CALL
3588   1796                             
3589   1796 3B 89 4E      mov d, _token_data ; $token
3590   1799 2D            mov b, d
3591   179A 38 00 00      mov c, 0
3592   179D FD AB         swp b
3593   179F D8            push b
3594   17A0 07 75 23      call label_exists
3595   17A3 51 02 00      add sp, 2
3596   17A6             ; --- END FUNCTION CALL
3597   17A6             ; --- START RELATIONAL
3598   17A6 D7            push a
3599   17A7 11            mov a, b
3600   17A8 FD 2E FF FF   mov32 cb, $ffffffff
3600   17AC FF FF 
3601   17AE B0            cmp a, b
3602   17AF FD 72         sneq ; !=
3603   17B1 E4            pop a
3604   17B2             ; --- END RELATIONAL
3605   17B2 FD A8         sor a, b ; ||
3606   17B4 E4            pop a
3607   17B5             ; --- END LOGICAL OR
3608   17B5 C0 00 00      cmp b, 0
3609   17B8 C6 D5 18      je _if82_else
3610   17BB             _if82_TRUE:
3611   17BB             ; strcat(opcode, symbols[i*2+j]); 
3612   17BB                             
3613   17BB             ; --- START FUNCTION CALL
3614   17BB                             
3615   17BB 3B EB 4F      mov d, _symbols_data ; $symbols
3616   17BE D7            push a
3617   17BF DA            push d
3618   17C0                             
3619   17C0 FA 7F FF      lea d, [bp + -129] ; $i
3620   17C3 2A            mov b, [d]
3621   17C4 38 00 00      mov c, 0
3622   17C7             ; --- START FACTORS
3623   17C7 D7            push a
3624   17C8 FD D8         push g
3625   17CA 11            mov a, b
3626   17CB FD 7A         mov g, c
3627   17CD FD 2E 02 00   mov32 cb, $00000002
3627   17D1 00 00 
3628   17D3 D7            push a     ; save left operand
3629   17D4 8E            xor a, b   ; xor sign bits
3630   17D5 FD AA         swp a      ; swap bytes
3631   17D7 83            mov cl, al ; save result of xor into 'dl'
3632   17D8 E4            pop a      ; restore left side operator
3633   17D9 DF            push cl    ; save result of xor above
3634   17DA FD AA         swp a  
3635   17DC 93 80         test al, $80  
3636   17DE FD AA         swp a  
3637   17E0 C6 E5 17      jz skip_invert_a_83  
3638   17E3 FD 95         neg a 
3639   17E5             skip_invert_a_83:   
3640   17E5 FD AB         swp b
3641   17E7 FD 93 80      test bl, $80  
3642   17EA FD AB         swp b
3643   17EC C6 F1 17      jz skip_invert_b_83  
3644   17EF FD 97         neg b 
3645   17F1             skip_invert_b_83:   
3646   17F1 AC            mul a, b ; *
3647   17F2 FD 78         mov g, a
3648   17F4 11            mov a, b
3649   17F5 EA            pop bl
3650   17F6 FD 93 80      test bl, $80
3651   17F9 C6 06 18      jz _same_signs_83
3652   17FC 2F            mov bl, al
3653   17FD 95            not a
3654   17FE FD 97         neg b
3655   1800 5B 00 00      adc a, 0
3656   1803 FD 78         mov g, a
3657   1805 11            mov a, b
3658   1806             _same_signs_83:
3659   1806 FD 38         mov c, g
3660   1808 27            mov b, a
3661   1809 FD F1         pop g
3662   180B E4            pop a
3663   180C             ; --- END FACTORS
3664   180C             ; --- START TERMS
3665   180C D7            push a
3666   180D FD D8         push g
3667   180F 11            mov a, b
3668   1810 FD 7A         mov g, c
3669   1812 FA 7D FF      lea d, [bp + -131] ; $j
3670   1815 2A            mov b, [d]
3671   1816 38 00 00      mov c, 0
3672   1819 FD 15         add32 cb, ga
3673   181B FD F1         pop g
3674   181D E4            pop a
3675   181E             ; --- END TERMS
3676   181E E7            pop d
3677   181F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3678   1823 E4            pop a
3679   1824 2A            mov b, [d]
3680   1825 38 00 00      mov c, 0
3681   1828 FD AB         swp b
3682   182A D8            push b
3683   182B                             
3684   182B FA E1 FF      lea d, [bp + -31] ; $opcode
3685   182E 2D            mov b, d
3686   182F 38 00 00      mov c, 0
3687   1832 FD AB         swp b
3688   1834 D8            push b
3689   1835 07 8D 43      call strcat
3690   1838 51 04 00      add sp, 4
3691   183B             ; --- END FUNCTION CALL
3692   183B             ; operand_types[j] = *symbols[i*2+j]; 
3693   183B FA 7A FF      lea d, [bp + -134] ; $operand_types
3694   183E D7            push a
3695   183F DA            push d
3696   1840                             
3697   1840 FA 7D FF      lea d, [bp + -131] ; $j
3698   1843 2A            mov b, [d]
3699   1844 38 00 00      mov c, 0
3700   1847 E7            pop d
3701   1848 5A            add d, b
3702   1849 E4            pop a
3703   184A DA            push d
3704   184B                             
3705   184B 3B EB 4F      mov d, _symbols_data ; $symbols
3706   184E D7            push a
3707   184F DA            push d
3708   1850                             
3709   1850 FA 7F FF      lea d, [bp + -129] ; $i
3710   1853 2A            mov b, [d]
3711   1854 38 00 00      mov c, 0
3712   1857             ; --- START FACTORS
3713   1857 D7            push a
3714   1858 FD D8         push g
3715   185A 11            mov a, b
3716   185B FD 7A         mov g, c
3717   185D FD 2E 02 00   mov32 cb, $00000002
3717   1861 00 00 
3718   1863 D7            push a     ; save left operand
3719   1864 8E            xor a, b   ; xor sign bits
3720   1865 FD AA         swp a      ; swap bytes
3721   1867 83            mov cl, al ; save result of xor into 'dl'
3722   1868 E4            pop a      ; restore left side operator
3723   1869 DF            push cl    ; save result of xor above
3724   186A FD AA         swp a  
3725   186C 93 80         test al, $80  
3726   186E FD AA         swp a  
3727   1870 C6 75 18      jz skip_invert_a_84  
3728   1873 FD 95         neg a 
3729   1875             skip_invert_a_84:   
3730   1875 FD AB         swp b
3731   1877 FD 93 80      test bl, $80  
3732   187A FD AB         swp b
3733   187C C6 81 18      jz skip_invert_b_84  
3734   187F FD 97         neg b 
3735   1881             skip_invert_b_84:   
3736   1881 AC            mul a, b ; *
3737   1882 FD 78         mov g, a
3738   1884 11            mov a, b
3739   1885 EA            pop bl
3740   1886 FD 93 80      test bl, $80
3741   1889 C6 96 18      jz _same_signs_84
3742   188C 2F            mov bl, al
3743   188D 95            not a
3744   188E FD 97         neg b
3745   1890 5B 00 00      adc a, 0
3746   1893 FD 78         mov g, a
3747   1895 11            mov a, b
3748   1896             _same_signs_84:
3749   1896 FD 38         mov c, g
3750   1898 27            mov b, a
3751   1899 FD F1         pop g
3752   189B E4            pop a
3753   189C             ; --- END FACTORS
3754   189C             ; --- START TERMS
3755   189C D7            push a
3756   189D FD D8         push g
3757   189F 11            mov a, b
3758   18A0 FD 7A         mov g, c
3759   18A2 FA 7D FF      lea d, [bp + -131] ; $j
3760   18A5 2A            mov b, [d]
3761   18A6 38 00 00      mov c, 0
3762   18A9 FD 15         add32 cb, ga
3763   18AB FD F1         pop g
3764   18AD E4            pop a
3765   18AE             ; --- END TERMS
3766   18AE E7            pop d
3767   18AF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3768   18B3 E4            pop a
3769   18B4 2A            mov b, [d]
3770   18B5 38 00 00      mov c, 0
3771   18B8 74            mov d, b
3772   18B9 32            mov bl, [d]
3773   18BA A7 00         mov bh, 0
3774   18BC 38 00 00      mov c, 0
3775   18BF E7            pop d
3776   18C0 FD 3E         mov [d], bl
3777   18C2             ; j++; 
3778   18C2                             
3779   18C2 FA 7D FF      lea d, [bp + -131] ; $j
3780   18C5 2A            mov b, [d]
3781   18C6 38 00 00      mov c, 0
3782   18C9 11            mov a, b
3783   18CA FD 77         inc b
3784   18CC FA 7D FF      lea d, [bp + -131] ; $j
3785   18CF FD 43         mov [d], b
3786   18D1 27            mov b, a
3787   18D2 0A EF 18      jmp _if82_exit
3788   18D5             _if82_else:
3789   18D5             ; strcat(opcode, token); 
3790   18D5                             
3791   18D5             ; --- START FUNCTION CALL
3792   18D5                             
3793   18D5 3B 89 4E      mov d, _token_data ; $token
3794   18D8 2D            mov b, d
3795   18D9 38 00 00      mov c, 0
3796   18DC FD AB         swp b
3797   18DE D8            push b
3798   18DF                             
3799   18DF FA E1 FF      lea d, [bp + -31] ; $opcode
3800   18E2 2D            mov b, d
3801   18E3 38 00 00      mov c, 0
3802   18E6 FD AB         swp b
3803   18E8 D8            push b
3804   18E9 07 8D 43      call strcat
3805   18EC 51 04 00      add sp, 4
3806   18EF             ; --- END FUNCTION CALL
3807   18EF             _if82_exit:
3808   18EF             _for80_update:
3809   18EF 0A 5F 17      jmp _for80_cond
3810   18F2             _for80_exit:
3811   18F2             ; op = search_opcode(opcode); 
3812   18F2 FA 87 FF      lea d, [bp + -121] ; $op
3813   18F5 DA            push d
3814   18F6                             
3815   18F6             ; --- START FUNCTION CALL
3816   18F6                             
3817   18F6 FA E1 FF      lea d, [bp + -31] ; $opcode
3818   18F9 2D            mov b, d
3819   18FA 38 00 00      mov c, 0
3820   18FD FD AB         swp b
3821   18FF D8            push b
3822   1900 07 FA 23      call search_opcode
3823   1903 51 02 00      add sp, 2
3824   1906             ; --- END FUNCTION CALL
3825   1906 E7            pop d
3826   1907 FD 28         mov si, b
3827   1909 FD 50         mov di, d
3828   190B 38 1A 00      mov c, 26
3829   190E FD F5         rep movsb
3830   1910             ; if(op.name[0] == '\0') continue; 
3831   1910             _if85_cond:
3832   1910                             
3833   1910 FA 87 FF      lea d, [bp + -121] ; $op
3834   1913 58 00 00      add d, 0
3835   1916 D7            push a
3836   1917 DA            push d
3837   1918                             
3838   1918 FD 2E 00 00   mov32 cb, $00000000
3838   191C 00 00 
3839   191E E7            pop d
3840   191F 5A            add d, b
3841   1920 E4            pop a
3842   1921 32            mov bl, [d]
3843   1922 A7 00         mov bh, 0
3844   1924 38 00 00      mov c, 0
3845   1927             ; --- START RELATIONAL
3846   1927 D7            push a
3847   1928 11            mov a, b
3848   1929 FD 2E 00 00   mov32 cb, $00000000
3848   192D 00 00 
3849   192F B0            cmp a, b
3850   1930 FD 71         seq ; ==
3851   1932 E4            pop a
3852   1933             ; --- END RELATIONAL
3853   1933 C0 00 00      cmp b, 0
3854   1936 C6 3F 19      je _if85_exit
3855   1939             _if85_TRUE:
3856   1939             ; continue; 
3857   1939 0A 1C 1C      jmp _for79_update ; for continue
3858   193C 0A 3F 19      jmp _if85_exit
3859   193F             _if85_exit:
3860   193F             ; instr_len = 1; 
3861   193F FA 85 FF      lea d, [bp + -123] ; $instr_len
3862   1942 DA            push d
3863   1943                             
3864   1943 FD 2E 01 00   mov32 cb, $00000001
3864   1947 00 00 
3865   1949 E7            pop d
3866   194A FD 43         mov [d], b
3867   194C             ; if(op.opcode_type){ 
3868   194C             _if86_cond:
3869   194C                             
3870   194C FA 87 FF      lea d, [bp + -121] ; $op
3871   194F 58 19 00      add d, 25
3872   1952 32            mov bl, [d]
3873   1953 A7 00         mov bh, 0
3874   1955 38 00 00      mov c, 0
3875   1958 C0 00 00      cmp b, 0
3876   195B C6 88 19      je _if86_exit
3877   195E             _if86_TRUE:
3878   195E             ; emit_byte(0xFD, emit_override); 
3879   195E                             
3880   195E             ; --- START FUNCTION CALL
3881   195E                             
3882   195E FA 05 00      lea d, [bp + 5] ; $emit_override
3883   1961 32            mov bl, [d]
3884   1962 A7 00         mov bh, 0
3885   1964 38 00 00      mov c, 0
3886   1967 DD            push bl
3887   1968                             
3888   1968 FD 2E FD 00   mov32 cb, $000000fd
3888   196C 00 00 
3889   196E DD            push bl
3890   196F 07 7D 27      call emit_byte
3891   1972 51 02 00      add sp, 2
3892   1975             ; --- END FUNCTION CALL
3893   1975             ; instr_len++; 
3894   1975                             
3895   1975 FA 85 FF      lea d, [bp + -123] ; $instr_len
3896   1978 2A            mov b, [d]
3897   1979 38 00 00      mov c, 0
3898   197C 11            mov a, b
3899   197D FD 77         inc b
3900   197F FA 85 FF      lea d, [bp + -123] ; $instr_len
3901   1982 FD 43         mov [d], b
3902   1984 27            mov b, a
3903   1985 0A 88 19      jmp _if86_exit
3904   1988             _if86_exit:
3905   1988             ; emit_byte(op.opcode, emit_override); 
3906   1988                             
3907   1988             ; --- START FUNCTION CALL
3908   1988                             
3909   1988 FA 05 00      lea d, [bp + 5] ; $emit_override
3910   198B 32            mov bl, [d]
3911   198C A7 00         mov bh, 0
3912   198E 38 00 00      mov c, 0
3913   1991 DD            push bl
3914   1992                             
3915   1992 FA 87 FF      lea d, [bp + -121] ; $op
3916   1995 58 18 00      add d, 24
3917   1998 32            mov bl, [d]
3918   1999 A7 00         mov bh, 0
3919   199B 38 00 00      mov c, 0
3920   199E DD            push bl
3921   199F 07 7D 27      call emit_byte
3922   19A2 51 02 00      add sp, 2
3923   19A5             ; --- END FUNCTION CALL
3924   19A5             ; prog = code_line; 
3925   19A5 3B 87 4E      mov d, _prog ; $prog
3926   19A8 DA            push d
3927   19A9                             
3928   19A9 FA A1 FF      lea d, [bp + -95] ; $code_line
3929   19AC 2D            mov b, d
3930   19AD 38 00 00      mov c, 0
3931   19B0 E7            pop d
3932   19B1 FD 43         mov [d], b
3933   19B3             ; j = 0; 
3934   19B3 FA 7D FF      lea d, [bp + -131] ; $j
3935   19B6 DA            push d
3936   19B7                             
3937   19B7 FD 2E 00 00   mov32 cb, $00000000
3937   19BB 00 00 
3938   19BD E7            pop d
3939   19BE FD 43         mov [d], b
3940   19C0             ; get(); 
3941   19C0                             
3942   19C0             ; --- START FUNCTION CALL
3943   19C0 07 78 2B      call get
3944   19C3             ; for(;;){ 
3945   19C3             _for87_init:
3946   19C3             _for87_cond:
3947   19C3             _for87_block:
3948   19C3             ; get(); 
3949   19C3                             
3950   19C3             ; --- START FUNCTION CALL
3951   19C3 07 78 2B      call get
3952   19C6             ; if(toktype == END) break; 
3953   19C6             _if88_cond:
3954   19C6                             
3955   19C6 3B 85 4E      mov d, _toktype ; $toktype
3956   19C9 2A            mov b, [d]
3957   19CA 38 00 00      mov c, 0
3958   19CD             ; --- START RELATIONAL
3959   19CD D7            push a
3960   19CE 11            mov a, b
3961   19CF FD 2E 07 00   mov32 cb, $7 ; enum element: END
3961   19D3 00 00 
3962   19D5 B0            cmp a, b
3963   19D6 FD 71         seq ; ==
3964   19D8 E4            pop a
3965   19D9             ; --- END RELATIONAL
3966   19D9 C0 00 00      cmp b, 0
3967   19DC C6 E5 19      je _if88_exit
3968   19DF             _if88_TRUE:
3969   19DF             ; break; 
3970   19DF 0A DD 1B      jmp _for87_exit ; for break
3971   19E2 0A E5 19      jmp _if88_exit
3972   19E5             _if88_exit:
3973   19E5             ; if(toktype == IDENTIFIER){ 
3974   19E5             _if89_cond:
3975   19E5                             
3976   19E5 3B 85 4E      mov d, _toktype ; $toktype
3977   19E8 2A            mov b, [d]
3978   19E9 38 00 00      mov c, 0
3979   19EC             ; --- START RELATIONAL
3980   19EC D7            push a
3981   19ED 11            mov a, b
3982   19EE FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
3982   19F2 00 00 
3983   19F4 B0            cmp a, b
3984   19F5 FD 71         seq ; ==
3985   19F7 E4            pop a
3986   19F8             ; --- END RELATIONAL
3987   19F8 C0 00 00      cmp b, 0
3988   19FB C6 00 1B      je _if89_else
3989   19FE             _if89_TRUE:
3990   19FE             ; if(label_exists(token) != -1){ 
3991   19FE             _if90_cond:
3992   19FE                             
3993   19FE             ; --- START FUNCTION CALL
3994   19FE                             
3995   19FE 3B 89 4E      mov d, _token_data ; $token
3996   1A01 2D            mov b, d
3997   1A02 38 00 00      mov c, 0
3998   1A05 FD AB         swp b
3999   1A07 D8            push b
4000   1A08 07 75 23      call label_exists
4001   1A0B 51 02 00      add sp, 2
4002   1A0E             ; --- END FUNCTION CALL
4003   1A0E             ; --- START RELATIONAL
4004   1A0E D7            push a
4005   1A0F 11            mov a, b
4006   1A10 FD 2E FF FF   mov32 cb, $ffffffff
4006   1A14 FF FF 
4007   1A16 B0            cmp a, b
4008   1A17 FD 72         sneq ; !=
4009   1A19 E4            pop a
4010   1A1A             ; --- END RELATIONAL
4011   1A1A C0 00 00      cmp b, 0
4012   1A1D C6 CE 1A      je _if90_else
4013   1A20             _if90_TRUE:
4014   1A20             ; if(operand_types[j] == '#'){ 
4015   1A20             _if91_cond:
4016   1A20                             
4017   1A20 FA 7A FF      lea d, [bp + -134] ; $operand_types
4018   1A23 D7            push a
4019   1A24 DA            push d
4020   1A25                             
4021   1A25 FA 7D FF      lea d, [bp + -131] ; $j
4022   1A28 2A            mov b, [d]
4023   1A29 38 00 00      mov c, 0
4024   1A2C E7            pop d
4025   1A2D 5A            add d, b
4026   1A2E E4            pop a
4027   1A2F 32            mov bl, [d]
4028   1A30 A7 00         mov bh, 0
4029   1A32 38 00 00      mov c, 0
4030   1A35             ; --- START RELATIONAL
4031   1A35 D7            push a
4032   1A36 11            mov a, b
4033   1A37 FD 2E 23 00   mov32 cb, $00000023
4033   1A3B 00 00 
4034   1A3D B0            cmp a, b
4035   1A3E FD 71         seq ; ==
4036   1A40 E4            pop a
4037   1A41             ; --- END RELATIONAL
4038   1A41 C0 00 00      cmp b, 0
4039   1A44 C6 56 1A      je _if91_else
4040   1A47             _if91_TRUE:
4041   1A47             ; error("8bit operand expected but 16bit label given."); 
4042   1A47                             
4043   1A47             ; --- START FUNCTION CALL
4044   1A47                             
4045   1A47 26 26 51      mov b, _s28 ; "8bit operand expected but 16bit label given."
4046   1A4A FD AB         swp b
4047   1A4C D8            push b
4048   1A4D 07 82 39      call error
4049   1A50 51 02 00      add sp, 2
4050   1A53             ; --- END FUNCTION CALL
4051   1A53 0A BB 1A      jmp _if91_exit
4052   1A56             _if91_else:
4053   1A56             ; if(operand_types[j] == '@'){ 
4054   1A56             _if92_cond:
4055   1A56                             
4056   1A56 FA 7A FF      lea d, [bp + -134] ; $operand_types
4057   1A59 D7            push a
4058   1A5A DA            push d
4059   1A5B                             
4060   1A5B FA 7D FF      lea d, [bp + -131] ; $j
4061   1A5E 2A            mov b, [d]
4062   1A5F 38 00 00      mov c, 0
4063   1A62 E7            pop d
4064   1A63 5A            add d, b
4065   1A64 E4            pop a
4066   1A65 32            mov bl, [d]
4067   1A66 A7 00         mov bh, 0
4068   1A68 38 00 00      mov c, 0
4069   1A6B             ; --- START RELATIONAL
4070   1A6B D7            push a
4071   1A6C 11            mov a, b
4072   1A6D FD 2E 40 00   mov32 cb, $00000040
4072   1A71 00 00 
4073   1A73 B0            cmp a, b
4074   1A74 FD 71         seq ; ==
4075   1A76 E4            pop a
4076   1A77             ; --- END RELATIONAL
4077   1A77 C0 00 00      cmp b, 0
4078   1A7A C6 BB 1A      je _if92_exit
4079   1A7D             _if92_TRUE:
4080   1A7D             ; emit_word(get_label_addr(token), emit_override); 
4081   1A7D                             
4082   1A7D             ; --- START FUNCTION CALL
4083   1A7D                             
4084   1A7D FA 05 00      lea d, [bp + 5] ; $emit_override
4085   1A80 32            mov bl, [d]
4086   1A81 A7 00         mov bh, 0
4087   1A83 38 00 00      mov c, 0
4088   1A86 DD            push bl
4089   1A87                             
4090   1A87             ; --- START FUNCTION CALL
4091   1A87                             
4092   1A87 3B 89 4E      mov d, _token_data ; $token
4093   1A8A 2D            mov b, d
4094   1A8B 38 00 00      mov c, 0
4095   1A8E FD AB         swp b
4096   1A90 D8            push b
4097   1A91 07 CE 22      call get_label_addr
4098   1A94 51 02 00      add sp, 2
4099   1A97             ; --- END FUNCTION CALL
4100   1A97 FD AB         swp b
4101   1A99 D8            push b
4102   1A9A 07 B5 27      call emit_word
4103   1A9D 51 03 00      add sp, 3
4104   1AA0             ; --- END FUNCTION CALL
4105   1AA0             ; instr_len = instr_len + 2; 
4106   1AA0 FA 85 FF      lea d, [bp + -123] ; $instr_len
4107   1AA3 DA            push d
4108   1AA4                             
4109   1AA4 FA 85 FF      lea d, [bp + -123] ; $instr_len
4110   1AA7 2A            mov b, [d]
4111   1AA8 38 00 00      mov c, 0
4112   1AAB             ; --- START TERMS
4113   1AAB D7            push a
4114   1AAC 11            mov a, b
4115   1AAD FD 2E 02 00   mov32 cb, $00000002
4115   1AB1 00 00 
4116   1AB3 56            add b, a
4117   1AB4 E4            pop a
4118   1AB5             ; --- END TERMS
4119   1AB5 E7            pop d
4120   1AB6 FD 43         mov [d], b
4121   1AB8 0A BB 1A      jmp _if92_exit
4122   1ABB             _if92_exit:
4123   1ABB             _if91_exit:
4124   1ABB             ; j++; 
4125   1ABB                             
4126   1ABB FA 7D FF      lea d, [bp + -131] ; $j
4127   1ABE 2A            mov b, [d]
4128   1ABF 38 00 00      mov c, 0
4129   1AC2 11            mov a, b
4130   1AC3 FD 77         inc b
4131   1AC5 FA 7D FF      lea d, [bp + -131] ; $j
4132   1AC8 FD 43         mov [d], b
4133   1ACA 27            mov b, a
4134   1ACB 0A FD 1A      jmp _if90_exit
4135   1ACE             _if90_else:
4136   1ACE             ; if(!is_reserved(token)){ 
4137   1ACE             _if93_cond:
4138   1ACE                             
4139   1ACE             ; --- START FUNCTION CALL
4140   1ACE                             
4141   1ACE 3B 89 4E      mov d, _token_data ; $token
4142   1AD1 2D            mov b, d
4143   1AD2 38 00 00      mov c, 0
4144   1AD5 FD AB         swp b
4145   1AD7 D8            push b
4146   1AD8 07 1C 1F      call is_reserved
4147   1ADB 51 02 00      add sp, 2
4148   1ADE             ; --- END FUNCTION CALL
4149   1ADE C0 00 00      cmp b, 0
4150   1AE1 C6 FD 1A      je _if93_exit
4151   1AE4             _if93_TRUE:
4152   1AE4             ; error_s("Undeclared label: ", token); 
4153   1AE4                             
4154   1AE4             ; --- START FUNCTION CALL
4155   1AE4                             
4156   1AE4 3B 89 4E      mov d, _token_data ; $token
4157   1AE7 2D            mov b, d
4158   1AE8 38 00 00      mov c, 0
4159   1AEB FD AB         swp b
4160   1AED D8            push b
4161   1AEE                             
4162   1AEE 26 5F 51      mov b, _s30 ; "Undeclared label: "
4163   1AF1 FD AB         swp b
4164   1AF3 D8            push b
4165   1AF4 07 B2 39      call error_s
4166   1AF7 51 04 00      add sp, 4
4167   1AFA             ; --- END FUNCTION CALL
4168   1AFA 0A FD 1A      jmp _if93_exit
4169   1AFD             _if93_exit:
4170   1AFD             _if90_exit:
4171   1AFD 0A DA 1B      jmp _if89_exit
4172   1B00             _if89_else:
4173   1B00             ; if(toktype == INTEGER_CONST){ 
4174   1B00             _if94_cond:
4175   1B00                             
4176   1B00 3B 85 4E      mov d, _toktype ; $toktype
4177   1B03 2A            mov b, [d]
4178   1B04 38 00 00      mov c, 0
4179   1B07             ; --- START RELATIONAL
4180   1B07 D7            push a
4181   1B08 11            mov a, b
4182   1B09 FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
4182   1B0D 00 00 
4183   1B0F B0            cmp a, b
4184   1B10 FD 71         seq ; ==
4185   1B12 E4            pop a
4186   1B13             ; --- END RELATIONAL
4187   1B13 C0 00 00      cmp b, 0
4188   1B16 C6 DA 1B      je _if94_exit
4189   1B19             _if94_TRUE:
4190   1B19             ; if(operand_types[j] == '#'){ 
4191   1B19             _if95_cond:
4192   1B19                             
4193   1B19 FA 7A FF      lea d, [bp + -134] ; $operand_types
4194   1B1C D7            push a
4195   1B1D DA            push d
4196   1B1E                             
4197   1B1E FA 7D FF      lea d, [bp + -131] ; $j
4198   1B21 2A            mov b, [d]
4199   1B22 38 00 00      mov c, 0
4200   1B25 E7            pop d
4201   1B26 5A            add d, b
4202   1B27 E4            pop a
4203   1B28 32            mov bl, [d]
4204   1B29 A7 00         mov bh, 0
4205   1B2B 38 00 00      mov c, 0
4206   1B2E             ; --- START RELATIONAL
4207   1B2E D7            push a
4208   1B2F 11            mov a, b
4209   1B30 FD 2E 23 00   mov32 cb, $00000023
4209   1B34 00 00 
4210   1B36 B0            cmp a, b
4211   1B37 FD 71         seq ; ==
4212   1B39 E4            pop a
4213   1B3A             ; --- END RELATIONAL
4214   1B3A C0 00 00      cmp b, 0
4215   1B3D C6 6B 1B      je _if95_else
4216   1B40             _if95_TRUE:
4217   1B40             ; emit_byte(int_const, emit_override); 
4218   1B40                             
4219   1B40             ; --- START FUNCTION CALL
4220   1B40                             
4221   1B40 FA 05 00      lea d, [bp + 5] ; $emit_override
4222   1B43 32            mov bl, [d]
4223   1B44 A7 00         mov bh, 0
4224   1B46 38 00 00      mov c, 0
4225   1B49 DD            push bl
4226   1B4A                             
4227   1B4A 3B C9 4F      mov d, _int_const ; $int_const
4228   1B4D 2A            mov b, [d]
4229   1B4E 38 00 00      mov c, 0
4230   1B51 DD            push bl
4231   1B52 07 7D 27      call emit_byte
4232   1B55 51 02 00      add sp, 2
4233   1B58             ; --- END FUNCTION CALL
4234   1B58             ; instr_len++; 
4235   1B58                             
4236   1B58 FA 85 FF      lea d, [bp + -123] ; $instr_len
4237   1B5B 2A            mov b, [d]
4238   1B5C 38 00 00      mov c, 0
4239   1B5F 11            mov a, b
4240   1B60 FD 77         inc b
4241   1B62 FA 85 FF      lea d, [bp + -123] ; $instr_len
4242   1B65 FD 43         mov [d], b
4243   1B67 27            mov b, a
4244   1B68 0A C7 1B      jmp _if95_exit
4245   1B6B             _if95_else:
4246   1B6B             ; if(operand_types[j] == '@'){ 
4247   1B6B             _if96_cond:
4248   1B6B                             
4249   1B6B FA 7A FF      lea d, [bp + -134] ; $operand_types
4250   1B6E D7            push a
4251   1B6F DA            push d
4252   1B70                             
4253   1B70 FA 7D FF      lea d, [bp + -131] ; $j
4254   1B73 2A            mov b, [d]
4255   1B74 38 00 00      mov c, 0
4256   1B77 E7            pop d
4257   1B78 5A            add d, b
4258   1B79 E4            pop a
4259   1B7A 32            mov bl, [d]
4260   1B7B A7 00         mov bh, 0
4261   1B7D 38 00 00      mov c, 0
4262   1B80             ; --- START RELATIONAL
4263   1B80 D7            push a
4264   1B81 11            mov a, b
4265   1B82 FD 2E 40 00   mov32 cb, $00000040
4265   1B86 00 00 
4266   1B88 B0            cmp a, b
4267   1B89 FD 71         seq ; ==
4268   1B8B E4            pop a
4269   1B8C             ; --- END RELATIONAL
4270   1B8C C0 00 00      cmp b, 0
4271   1B8F C6 C7 1B      je _if96_exit
4272   1B92             _if96_TRUE:
4273   1B92             ; emit_word(int_const, emit_override); 
4274   1B92                             
4275   1B92             ; --- START FUNCTION CALL
4276   1B92                             
4277   1B92 FA 05 00      lea d, [bp + 5] ; $emit_override
4278   1B95 32            mov bl, [d]
4279   1B96 A7 00         mov bh, 0
4280   1B98 38 00 00      mov c, 0
4281   1B9B DD            push bl
4282   1B9C                             
4283   1B9C 3B C9 4F      mov d, _int_const ; $int_const
4284   1B9F 2A            mov b, [d]
4285   1BA0 38 00 00      mov c, 0
4286   1BA3 FD AB         swp b
4287   1BA5 D8            push b
4288   1BA6 07 B5 27      call emit_word
4289   1BA9 51 03 00      add sp, 3
4290   1BAC             ; --- END FUNCTION CALL
4291   1BAC             ; instr_len = instr_len + 2; 
4292   1BAC FA 85 FF      lea d, [bp + -123] ; $instr_len
4293   1BAF DA            push d
4294   1BB0                             
4295   1BB0 FA 85 FF      lea d, [bp + -123] ; $instr_len
4296   1BB3 2A            mov b, [d]
4297   1BB4 38 00 00      mov c, 0
4298   1BB7             ; --- START TERMS
4299   1BB7 D7            push a
4300   1BB8 11            mov a, b
4301   1BB9 FD 2E 02 00   mov32 cb, $00000002
4301   1BBD 00 00 
4302   1BBF 56            add b, a
4303   1BC0 E4            pop a
4304   1BC1             ; --- END TERMS
4305   1BC1 E7            pop d
4306   1BC2 FD 43         mov [d], b
4307   1BC4 0A C7 1B      jmp _if96_exit
4308   1BC7             _if96_exit:
4309   1BC7             _if95_exit:
4310   1BC7             ; j++; 
4311   1BC7                             
4312   1BC7 FA 7D FF      lea d, [bp + -131] ; $j
4313   1BCA 2A            mov b, [d]
4314   1BCB 38 00 00      mov c, 0
4315   1BCE 11            mov a, b
4316   1BCF FD 77         inc b
4317   1BD1 FA 7D FF      lea d, [bp + -131] ; $j
4318   1BD4 FD 43         mov [d], b
4319   1BD6 27            mov b, a
4320   1BD7 0A DA 1B      jmp _if94_exit
4321   1BDA             _if94_exit:
4322   1BDA             _if89_exit:
4323   1BDA             _for87_update:
4324   1BDA 0A C3 19      jmp _for87_cond
4325   1BDD             _for87_exit:
4326   1BDD             ; if(!emit_override){ 
4327   1BDD             _if97_cond:
4328   1BDD                             
4329   1BDD FA 05 00      lea d, [bp + 5] ; $emit_override
4330   1BE0 32            mov bl, [d]
4331   1BE1 A7 00         mov bh, 0
4332   1BE3 38 00 00      mov c, 0
4333   1BE6 C0 00 00      cmp b, 0
4334   1BE9 C6 19 1C      je _if97_exit
4335   1BEC             _if97_TRUE:
4336   1BEC             ; printf("%x(%d): %s\n", old_pc, instr_len, code_line); 
4337   1BEC                             
4338   1BEC             ; --- START FUNCTION CALL
4339   1BEC                             
4340   1BEC FA A1 FF      lea d, [bp + -95] ; $code_line
4341   1BEF 2D            mov b, d
4342   1BF0 38 00 00      mov c, 0
4343   1BF3 FD AB         swp b
4344   1BF5 D8            push b
4345   1BF6                             
4346   1BF6 FA 85 FF      lea d, [bp + -123] ; $instr_len
4347   1BF9 2A            mov b, [d]
4348   1BFA 38 00 00      mov c, 0
4349   1BFD FD AB         swp b
4350   1BFF D8            push b
4351   1C00                             
4352   1C00 FA 78 FF      lea d, [bp + -136] ; $old_pc
4353   1C03 2A            mov b, [d]
4354   1C04 38 00 00      mov c, 0
4355   1C07 FD AB         swp b
4356   1C09 D8            push b
4357   1C0A                             
4358   1C0A 26 53 51      mov b, _s29 ; "%x(%d): %s\n"
4359   1C0D FD AB         swp b
4360   1C0F D8            push b
4361   1C10 07 70 44      call printf
4362   1C13 51 08 00      add sp, 8
4363   1C16             ; --- END FUNCTION CALL
4364   1C16 0A 19 1C      jmp _if97_exit
4365   1C19             _if97_exit:
4366   1C19             ; break; 
4367   1C19 0A 2F 1C      jmp _for79_exit ; for break
4368   1C1C             _for79_update:
4369   1C1C                             
4370   1C1C FA 7F FF      lea d, [bp + -129] ; $i
4371   1C1F 2A            mov b, [d]
4372   1C20 38 00 00      mov c, 0
4373   1C23 11            mov a, b
4374   1C24 FD 77         inc b
4375   1C26 FA 7F FF      lea d, [bp + -129] ; $i
4376   1C29 FD 43         mov [d], b
4377   1C2B 27            mov b, a
4378   1C2C 0A F7 16      jmp _for79_cond
4379   1C2F             _for79_exit:
4380   1C2F             _if69_exit:
4381   1C2F             ; pop_prog(); 
4382   1C2F                             
4383   1C2F             ; --- START FUNCTION CALL
4384   1C2F 07 4C 3A      call pop_prog
4385   1C32 F9            leave
4386   1C33 09            ret
4387   1C34             
4388   1C34             parse_text:
4389   1C34 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4390   1C37             ; char *temp_prog; 
4391   1C37 52 02 00      sub sp, 2
4392   1C3A             ; print("Parsing TEXT section...\n"); 
4393   1C3A                             
4394   1C3A             ; --- START FUNCTION CALL
4395   1C3A                             
4396   1C3A 26 72 51      mov b, _s31 ; "Parsing TEXT section...\n"
4397   1C3D FD AB         swp b
4398   1C3F D8            push b
4399   1C40 07 7C 3E      call print
4400   1C43 51 02 00      add sp, 2
4401   1C46             ; --- END FUNCTION CALL
4402   1C46             ; prog = program; 
4403   1C46 3B 87 4E      mov d, _prog ; $prog
4404   1C49 DA            push d
4405   1C4A                             
4406   1C4A 3B CB 4F      mov d, _program ; $program
4407   1C4D 2A            mov b, [d]
4408   1C4E 38 00 00      mov c, 0
4409   1C51 E7            pop d
4410   1C52 FD 43         mov [d], b
4411   1C54             ; bin_p = bin_out + _org; 
4412   1C54 3B CF 4F      mov d, _bin_p ; $bin_p
4413   1C57 DA            push d
4414   1C58                             
4415   1C58 3B CD 4F      mov d, _bin_out ; $bin_out
4416   1C5B 2A            mov b, [d]
4417   1C5C 38 00 00      mov c, 0
4418   1C5F             ; --- START TERMS
4419   1C5F D7            push a
4420   1C60 11            mov a, b
4421   1C61 3B 7E 4E      mov d, __org ; $_org
4422   1C64 2A            mov b, [d]
4423   1C65 38 00 00      mov c, 0
4424   1C68 56            add b, a
4425   1C69 E4            pop a
4426   1C6A             ; --- END TERMS
4427   1C6A E7            pop d
4428   1C6B FD 43         mov [d], b
4429   1C6D             ; pc = _org; 
4430   1C6D 3B 80 4E      mov d, _pc ; $pc
4431   1C70 DA            push d
4432   1C71                             
4433   1C71 3B 7E 4E      mov d, __org ; $_org
4434   1C74 2A            mov b, [d]
4435   1C75 38 00 00      mov c, 0
4436   1C78 E7            pop d
4437   1C79 FD 43         mov [d], b
4438   1C7B             ; for(;;){ 
4439   1C7B             _for98_init:
4440   1C7B             _for98_cond:
4441   1C7B             _for98_block:
4442   1C7B             ; get(); 
4443   1C7B                             
4444   1C7B             ; --- START FUNCTION CALL
4445   1C7B 07 78 2B      call get
4446   1C7E             ; if(toktype == END) error("TEXT section not found."); 
4447   1C7E             _if99_cond:
4448   1C7E                              
4449   1C7E 3B 85 4E      mov d, _toktype ; $toktype
4450   1C81 2A            mov b, [d]
4451   1C82 38 00 00      mov c, 0
4452   1C85             ; --- START RELATIONAL
4453   1C85 D7            push a
4454   1C86 11            mov a, b
4455   1C87 FD 2E 07 00   mov32 cb, $7 ; enum element: END
4455   1C8B 00 00 
4456   1C8D B0            cmp a, b
4457   1C8E FD 71         seq ; ==
4458   1C90 E4            pop a
4459   1C91             ; --- END RELATIONAL
4460   1C91 C0 00 00      cmp b, 0
4461   1C94 C6 A6 1C      je _if99_exit
4462   1C97             _if99_TRUE:
4463   1C97             ; error("TEXT section not found."); 
4464   1C97                              
4465   1C97             ; --- START FUNCTION CALL
4466   1C97                              
4467   1C97 26 8B 51      mov b, _s32 ; "TEXT section not found."
4468   1C9A FD AB         swp b
4469   1C9C D8            push b
4470   1C9D 07 82 39      call error
4471   1CA0 51 02 00      add sp, 2
4472   1CA3             ; --- END FUNCTION CALL
4473   1CA3 0A A6 1C      jmp _if99_exit
4474   1CA6             _if99_exit:
4475   1CA6             ; if(tok == TEXT){ 
4476   1CA6             _if100_cond:
4477   1CA6                              
4478   1CA6 3B 83 4E      mov d, _tok ; $tok
4479   1CA9 2A            mov b, [d]
4480   1CAA 38 00 00      mov c, 0
4481   1CAD             ; --- START RELATIONAL
4482   1CAD D7            push a
4483   1CAE 11            mov a, b
4484   1CAF FD 2E 04 00   mov32 cb, $4 ; enum element: TEXT
4484   1CB3 00 00 
4485   1CB5 B0            cmp a, b
4486   1CB6 FD 71         seq ; ==
4487   1CB8 E4            pop a
4488   1CB9             ; --- END RELATIONAL
4489   1CB9 C0 00 00      cmp b, 0
4490   1CBC C6 C5 1C      je _if100_exit
4491   1CBF             _if100_TRUE:
4492   1CBF             ; break; 
4493   1CBF 0A C8 1C      jmp _for98_exit ; for break
4494   1CC2 0A C5 1C      jmp _if100_exit
4495   1CC5             _if100_exit:
4496   1CC5             _for98_update:
4497   1CC5 0A 7B 1C      jmp _for98_cond
4498   1CC8             _for98_exit:
4499   1CC8             ; for(;;){ 
4500   1CC8             _for101_init:
4501   1CC8             _for101_cond:
4502   1CC8             _for101_block:
4503   1CC8             ; get(); back(); 
4504   1CC8                              
4505   1CC8             ; --- START FUNCTION CALL
4506   1CC8 07 78 2B      call get
4507   1CCB             ; back(); 
4508   1CCB                              
4509   1CCB             ; --- START FUNCTION CALL
4510   1CCB 07 EB 27      call back
4511   1CCE             ; temp_prog = prog; 
4512   1CCE FA FF FF      lea d, [bp + -1] ; $temp_prog
4513   1CD1 DA            push d
4514   1CD2                              
4515   1CD2 3B 87 4E      mov d, _prog ; $prog
4516   1CD5 2A            mov b, [d]
4517   1CD6 38 00 00      mov c, 0
4518   1CD9 E7            pop d
4519   1CDA FD 43         mov [d], b
4520   1CDC             ; get(); 
4521   1CDC                              
4522   1CDC             ; --- START FUNCTION CALL
4523   1CDC 07 78 2B      call get
4524   1CDF             ; if(toktype == END) error("TEXT section end not found."); 
4525   1CDF             _if102_cond:
4526   1CDF                              
4527   1CDF 3B 85 4E      mov d, _toktype ; $toktype
4528   1CE2 2A            mov b, [d]
4529   1CE3 38 00 00      mov c, 0
4530   1CE6             ; --- START RELATIONAL
4531   1CE6 D7            push a
4532   1CE7 11            mov a, b
4533   1CE8 FD 2E 07 00   mov32 cb, $7 ; enum element: END
4533   1CEC 00 00 
4534   1CEE B0            cmp a, b
4535   1CEF FD 71         seq ; ==
4536   1CF1 E4            pop a
4537   1CF2             ; --- END RELATIONAL
4538   1CF2 C0 00 00      cmp b, 0
4539   1CF5 C6 07 1D      je _if102_exit
4540   1CF8             _if102_TRUE:
4541   1CF8             ; error("TEXT section end not found."); 
4542   1CF8                              
4543   1CF8             ; --- START FUNCTION CALL
4544   1CF8                              
4545   1CF8 26 A3 51      mov b, _s33 ; "TEXT section end not found."
4546   1CFB FD AB         swp b
4547   1CFD D8            push b
4548   1CFE 07 82 39      call error
4549   1D01 51 02 00      add sp, 2
4550   1D04             ; --- END FUNCTION CALL
4551   1D04 0A 07 1D      jmp _if102_exit
4552   1D07             _if102_exit:
4553   1D07             ; if(tok == DOT){ 
4554   1D07             _if103_cond:
4555   1D07                              
4556   1D07 3B 83 4E      mov d, _tok ; $tok
4557   1D0A 2A            mov b, [d]
4558   1D0B 38 00 00      mov c, 0
4559   1D0E             ; --- START RELATIONAL
4560   1D0E D7            push a
4561   1D0F 11            mov a, b
4562   1D10 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
4562   1D14 00 00 
4563   1D16 B0            cmp a, b
4564   1D17 FD 71         seq ; ==
4565   1D19 E4            pop a
4566   1D1A             ; --- END RELATIONAL
4567   1D1A C0 00 00      cmp b, 0
4568   1D1D C6 51 1D      je _if103_else
4569   1D20             _if103_TRUE:
4570   1D20             ; get(); 
4571   1D20                              
4572   1D20             ; --- START FUNCTION CALL
4573   1D20 07 78 2B      call get
4574   1D23             ; if(tok == SEGMENT_END) break; 
4575   1D23             _if104_cond:
4576   1D23                              
4577   1D23 3B 83 4E      mov d, _tok ; $tok
4578   1D26 2A            mov b, [d]
4579   1D27 38 00 00      mov c, 0
4580   1D2A             ; --- START RELATIONAL
4581   1D2A D7            push a
4582   1D2B 11            mov a, b
4583   1D2C FD 2E 05 00   mov32 cb, $5 ; enum element: SEGMENT_END
4583   1D30 00 00 
4584   1D32 B0            cmp a, b
4585   1D33 FD 71         seq ; ==
4586   1D35 E4            pop a
4587   1D36             ; --- END RELATIONAL
4588   1D36 C0 00 00      cmp b, 0
4589   1D39 C6 42 1D      je _if104_else
4590   1D3C             _if104_TRUE:
4591   1D3C             ; break; 
4592   1D3C 0A AA 1D      jmp _for101_exit ; for break
4593   1D3F 0A 4E 1D      jmp _if104_exit
4594   1D42             _if104_else:
4595   1D42             ; error("Unexpected directive."); 
4596   1D42                              
4597   1D42             ; --- START FUNCTION CALL
4598   1D42                              
4599   1D42 26 BF 51      mov b, _s34 ; "Unexpected directive."
4600   1D45 FD AB         swp b
4601   1D47 D8            push b
4602   1D48 07 82 39      call error
4603   1D4B 51 02 00      add sp, 2
4604   1D4E             ; --- END FUNCTION CALL
4605   1D4E             _if104_exit:
4606   1D4E 0A A7 1D      jmp _if103_exit
4607   1D51             _if103_else:
4608   1D51             ; if(toktype == IDENTIFIER){ 
4609   1D51             _if105_cond:
4610   1D51                              
4611   1D51 3B 85 4E      mov d, _toktype ; $toktype
4612   1D54 2A            mov b, [d]
4613   1D55 38 00 00      mov c, 0
4614   1D58             ; --- START RELATIONAL
4615   1D58 D7            push a
4616   1D59 11            mov a, b
4617   1D5A FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
4617   1D5E 00 00 
4618   1D60 B0            cmp a, b
4619   1D61 FD 71         seq ; ==
4620   1D63 E4            pop a
4621   1D64             ; --- END RELATIONAL
4622   1D64 C0 00 00      cmp b, 0
4623   1D67 C6 A7 1D      je _if105_exit
4624   1D6A             _if105_TRUE:
4625   1D6A             ; get(); 
4626   1D6A                              
4627   1D6A             ; --- START FUNCTION CALL
4628   1D6A 07 78 2B      call get
4629   1D6D             ; if(tok != COLON){ 
4630   1D6D             _if106_cond:
4631   1D6D                              
4632   1D6D 3B 83 4E      mov d, _tok ; $tok
4633   1D70 2A            mov b, [d]
4634   1D71 38 00 00      mov c, 0
4635   1D74             ; --- START RELATIONAL
4636   1D74 D7            push a
4637   1D75 11            mov a, b
4638   1D76 FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
4638   1D7A 00 00 
4639   1D7C B0            cmp a, b
4640   1D7D FD 72         sneq ; !=
4641   1D7F E4            pop a
4642   1D80             ; --- END RELATIONAL
4643   1D80 C0 00 00      cmp b, 0
4644   1D83 C6 A4 1D      je _if106_exit
4645   1D86             _if106_TRUE:
4646   1D86             ; prog = temp_prog; 
4647   1D86 3B 87 4E      mov d, _prog ; $prog
4648   1D89 DA            push d
4649   1D8A                              
4650   1D8A FA FF FF      lea d, [bp + -1] ; $temp_prog
4651   1D8D 2A            mov b, [d]
4652   1D8E 38 00 00      mov c, 0
4653   1D91 E7            pop d
4654   1D92 FD 43         mov [d], b
4655   1D94             ; parse_instr(0); 
4656   1D94                              
4657   1D94             ; --- START FUNCTION CALL
4658   1D94                              
4659   1D94 FD 2E 00 00   mov32 cb, $00000000
4659   1D98 00 00 
4660   1D9A DD            push bl
4661   1D9B 07 88 13      call parse_instr
4662   1D9E 51 01 00      add sp, 1
4663   1DA1             ; --- END FUNCTION CALL
4664   1DA1 0A A4 1D      jmp _if106_exit
4665   1DA4             _if106_exit:
4666   1DA4 0A A7 1D      jmp _if105_exit
4667   1DA7             _if105_exit:
4668   1DA7             _if103_exit:
4669   1DA7             _for101_update:
4670   1DA7 0A C8 1C      jmp _for101_cond
4671   1DAA             _for101_exit:
4672   1DAA             ; print("Done.\n\n"); 
4673   1DAA                              
4674   1DAA             ; --- START FUNCTION CALL
4675   1DAA                              
4676   1DAA 26 D5 51      mov b, _s35 ; "Done.\n\n"
4677   1DAD FD AB         swp b
4678   1DAF D8            push b
4679   1DB0 07 7C 3E      call print
4680   1DB3 51 02 00      add sp, 2
4681   1DB6             ; --- END FUNCTION CALL
4682   1DB6 F9            leave
4683   1DB7 09            ret
4684   1DB8             
4685   1DB8             debug:
4686   1DB8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4687   1DBB             ; printf("\n"); 
4688   1DBB                              
4689   1DBB             ; --- START FUNCTION CALL
4690   1DBB                              
4691   1DBB 26 22 50      mov b, _s10 ; "\n"
4692   1DBE FD AB         swp b
4693   1DC0 D8            push b
4694   1DC1 07 70 44      call printf
4695   1DC4 51 02 00      add sp, 2
4696   1DC7             ; --- END FUNCTION CALL
4697   1DC7             ; printf("Prog Offset: %x\n", prog - program); 
4698   1DC7                              
4699   1DC7             ; --- START FUNCTION CALL
4700   1DC7                              
4701   1DC7 3B 87 4E      mov d, _prog ; $prog
4702   1DCA 2A            mov b, [d]
4703   1DCB 38 00 00      mov c, 0
4704   1DCE             ; --- START TERMS
4705   1DCE D7            push a
4706   1DCF 11            mov a, b
4707   1DD0 3B CB 4F      mov d, _program ; $program
4708   1DD3 2A            mov b, [d]
4709   1DD4 38 00 00      mov c, 0
4710   1DD7 60            sub a, b
4711   1DD8 27            mov b, a
4712   1DD9 E4            pop a
4713   1DDA             ; --- END TERMS
4714   1DDA FD AB         swp b
4715   1DDC D8            push b
4716   1DDD                              
4717   1DDD 26 DD 51      mov b, _s36 ; "Prog Offset: %x\n"
4718   1DE0 FD AB         swp b
4719   1DE2 D8            push b
4720   1DE3 07 70 44      call printf
4721   1DE6 51 04 00      add sp, 4
4722   1DE9             ; --- END FUNCTION CALL
4723   1DE9             ; printf("Prog value : %c\n", *prog); 
4724   1DE9                              
4725   1DE9             ; --- START FUNCTION CALL
4726   1DE9                              
4727   1DE9 3B 87 4E      mov d, _prog ; $prog
4728   1DEC 2A            mov b, [d]
4729   1DED 38 00 00      mov c, 0
4730   1DF0 74            mov d, b
4731   1DF1 32            mov bl, [d]
4732   1DF2 A7 00         mov bh, 0
4733   1DF4 38 00 00      mov c, 0
4734   1DF7 FD AB         swp b
4735   1DF9 D8            push b
4736   1DFA                              
4737   1DFA 26 EE 51      mov b, _s37 ; "Prog value : %c\n"
4738   1DFD FD AB         swp b
4739   1DFF D8            push b
4740   1E00 07 70 44      call printf
4741   1E03 51 04 00      add sp, 4
4742   1E06             ; --- END FUNCTION CALL
4743   1E06             ; printf("Token      : %s\n", token); 
4744   1E06                              
4745   1E06             ; --- START FUNCTION CALL
4746   1E06                              
4747   1E06 3B 89 4E      mov d, _token_data ; $token
4748   1E09 2D            mov b, d
4749   1E0A 38 00 00      mov c, 0
4750   1E0D FD AB         swp b
4751   1E0F D8            push b
4752   1E10                              
4753   1E10 26 FF 51      mov b, _s38 ; "Token      : %s\n"
4754   1E13 FD AB         swp b
4755   1E15 D8            push b
4756   1E16 07 70 44      call printf
4757   1E19 51 04 00      add sp, 4
4758   1E1C             ; --- END FUNCTION CALL
4759   1E1C             ; printf("Tok        : %d\n", tok); 
4760   1E1C                              
4761   1E1C             ; --- START FUNCTION CALL
4762   1E1C                              
4763   1E1C 3B 83 4E      mov d, _tok ; $tok
4764   1E1F 2A            mov b, [d]
4765   1E20 38 00 00      mov c, 0
4766   1E23 FD AB         swp b
4767   1E25 D8            push b
4768   1E26                              
4769   1E26 26 10 52      mov b, _s39 ; "Tok        : %d\n"
4770   1E29 FD AB         swp b
4771   1E2B D8            push b
4772   1E2C 07 70 44      call printf
4773   1E2F 51 04 00      add sp, 4
4774   1E32             ; --- END FUNCTION CALL
4775   1E32             ; printf("Toktype    : %d\n", toktype); 
4776   1E32                              
4777   1E32             ; --- START FUNCTION CALL
4778   1E32                              
4779   1E32 3B 85 4E      mov d, _toktype ; $toktype
4780   1E35 2A            mov b, [d]
4781   1E36 38 00 00      mov c, 0
4782   1E39 FD AB         swp b
4783   1E3B D8            push b
4784   1E3C                              
4785   1E3C 26 21 52      mov b, _s40 ; "Toktype    : %d\n"
4786   1E3F FD AB         swp b
4787   1E41 D8            push b
4788   1E42 07 70 44      call printf
4789   1E45 51 04 00      add sp, 4
4790   1E48             ; --- END FUNCTION CALL
4791   1E48             ; printf("StringConst: %s\n", string_const); 
4792   1E48                              
4793   1E48             ; --- START FUNCTION CALL
4794   1E48                              
4795   1E48 3B C9 4E      mov d, _string_const_data ; $string_const
4796   1E4B 2D            mov b, d
4797   1E4C 38 00 00      mov c, 0
4798   1E4F FD AB         swp b
4799   1E51 D8            push b
4800   1E52                              
4801   1E52 26 32 52      mov b, _s41 ; "StringConst: %s\n"
4802   1E55 FD AB         swp b
4803   1E57 D8            push b
4804   1E58 07 70 44      call printf
4805   1E5B 51 04 00      add sp, 4
4806   1E5E             ; --- END FUNCTION CALL
4807   1E5E             ; printf("PC         : %x\n", pc); 
4808   1E5E                              
4809   1E5E             ; --- START FUNCTION CALL
4810   1E5E                              
4811   1E5E 3B 80 4E      mov d, _pc ; $pc
4812   1E61 2A            mov b, [d]
4813   1E62 38 00 00      mov c, 0
4814   1E65 FD AB         swp b
4815   1E67 D8            push b
4816   1E68                              
4817   1E68 26 43 52      mov b, _s42 ; "PC         : %x\n"
4818   1E6B FD AB         swp b
4819   1E6D D8            push b
4820   1E6E 07 70 44      call printf
4821   1E71 51 04 00      add sp, 4
4822   1E74             ; --- END FUNCTION CALL
4823   1E74 F9            leave
4824   1E75 09            ret
4825   1E76             
4826   1E76             display_output:
4827   1E76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4828   1E79             ; int i; 
4829   1E79 52 02 00      sub sp, 2
4830   1E7C             ; unsigned char *p; 
4831   1E7C 52 02 00      sub sp, 2
4832   1E7F             ; print("\nAssembly complete.\n"); 
4833   1E7F                              
4834   1E7F             ; --- START FUNCTION CALL
4835   1E7F                              
4836   1E7F 26 54 52      mov b, _s43 ; "\nAssembly complete.\n"
4837   1E82 FD AB         swp b
4838   1E84 D8            push b
4839   1E85 07 7C 3E      call print
4840   1E88 51 02 00      add sp, 2
4841   1E8B             ; --- END FUNCTION CALL
4842   1E8B             ; printf("Program size: %d\n", prog_size); 
4843   1E8B                              
4844   1E8B             ; --- START FUNCTION CALL
4845   1E8B                              
4846   1E8B 3B E9 4F      mov d, _prog_size ; $prog_size
4847   1E8E 2A            mov b, [d]
4848   1E8F 38 00 00      mov c, 0
4849   1E92 FD AB         swp b
4850   1E94 D8            push b
4851   1E95                              
4852   1E95 26 69 52      mov b, _s44 ; "Program size: %d\n"
4853   1E98 FD AB         swp b
4854   1E9A D8            push b
4855   1E9B 07 70 44      call printf
4856   1E9E 51 04 00      add sp, 4
4857   1EA1             ; --- END FUNCTION CALL
4858   1EA1             ; print("Listing: \n"); 
4859   1EA1                              
4860   1EA1             ; --- START FUNCTION CALL
4861   1EA1                              
4862   1EA1 26 7B 52      mov b, _s45 ; "Listing: \n"
4863   1EA4 FD AB         swp b
4864   1EA6 D8            push b
4865   1EA7 07 7C 3E      call print
4866   1EAA 51 02 00      add sp, 2
4867   1EAD             ; --- END FUNCTION CALL
4868   1EAD             ; p = bin_out + _org; 
4869   1EAD FA FD FF      lea d, [bp + -3] ; $p
4870   1EB0 DA            push d
4871   1EB1                              
4872   1EB1 3B CD 4F      mov d, _bin_out ; $bin_out
4873   1EB4 2A            mov b, [d]
4874   1EB5 38 00 00      mov c, 0
4875   1EB8             ; --- START TERMS
4876   1EB8 D7            push a
4877   1EB9 11            mov a, b
4878   1EBA 3B 7E 4E      mov d, __org ; $_org
4879   1EBD 2A            mov b, [d]
4880   1EBE 38 00 00      mov c, 0
4881   1EC1 56            add b, a
4882   1EC2 E4            pop a
4883   1EC3             ; --- END TERMS
4884   1EC3 E7            pop d
4885   1EC4 FD 43         mov [d], b
4886   1EC6             ; for(;;){ 
4887   1EC6             _for107_init:
4888   1EC6             _for107_cond:
4889   1EC6             _for107_block:
4890   1EC6             ; if(p == bin_p) break; 
4891   1EC6             _if108_cond:
4892   1EC6                              
4893   1EC6 FA FD FF      lea d, [bp + -3] ; $p
4894   1EC9 2A            mov b, [d]
4895   1ECA 38 00 00      mov c, 0
4896   1ECD             ; --- START RELATIONAL
4897   1ECD D7            push a
4898   1ECE 11            mov a, b
4899   1ECF 3B CF 4F      mov d, _bin_p ; $bin_p
4900   1ED2 2A            mov b, [d]
4901   1ED3 38 00 00      mov c, 0
4902   1ED6 B0            cmp a, b
4903   1ED7 FD 71         seq ; ==
4904   1ED9 E4            pop a
4905   1EDA             ; --- END RELATIONAL
4906   1EDA C0 00 00      cmp b, 0
4907   1EDD C6 E6 1E      je _if108_exit
4908   1EE0             _if108_TRUE:
4909   1EE0             ; break; 
4910   1EE0 0A 0E 1F      jmp _for107_exit ; for break
4911   1EE3 0A E6 1E      jmp _if108_exit
4912   1EE6             _if108_exit:
4913   1EE6             ; printx8(*p);  
4914   1EE6                              
4915   1EE6             ; --- START FUNCTION CALL
4916   1EE6                              
4917   1EE6 FA FD FF      lea d, [bp + -3] ; $p
4918   1EE9 2A            mov b, [d]
4919   1EEA 38 00 00      mov c, 0
4920   1EED 74            mov d, b
4921   1EEE 32            mov bl, [d]
4922   1EEF A7 00         mov bh, 0
4923   1EF1 38 00 00      mov c, 0
4924   1EF4 DD            push bl
4925   1EF5 07 04 4D      call printx8
4926   1EF8 51 01 00      add sp, 1
4927   1EFB             ; --- END FUNCTION CALL
4928   1EFB             ; p++; 
4929   1EFB                              
4930   1EFB FA FD FF      lea d, [bp + -3] ; $p
4931   1EFE 2A            mov b, [d]
4932   1EFF 38 00 00      mov c, 0
4933   1F02 FD 77         inc b
4934   1F04 FA FD FF      lea d, [bp + -3] ; $p
4935   1F07 FD 43         mov [d], b
4936   1F09 FD 7D         dec b
4937   1F0B             _for107_update:
4938   1F0B 0A C6 1E      jmp _for107_cond
4939   1F0E             _for107_exit:
4940   1F0E             ; print("\n"); 
4941   1F0E                              
4942   1F0E             ; --- START FUNCTION CALL
4943   1F0E                              
4944   1F0E 26 22 50      mov b, _s10 ; "\n"
4945   1F11 FD AB         swp b
4946   1F13 D8            push b
4947   1F14 07 7C 3E      call print
4948   1F17 51 02 00      add sp, 2
4949   1F1A             ; --- END FUNCTION CALL
4950   1F1A F9            leave
4951   1F1B 09            ret
4952   1F1C             
4953   1F1C             is_reserved:
4954   1F1C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4955   1F1F             ; return !strcmp(name, "a") 
4956   1F1F                              
4957   1F1F             ; --- START FUNCTION CALL
4958   1F1F                              
4959   1F1F 26 86 52      mov b, _s46 ; "a"
4960   1F22 FD AB         swp b
4961   1F24 D8            push b
4962   1F25                              
4963   1F25 FA 05 00      lea d, [bp + 5] ; $name
4964   1F28 2A            mov b, [d]
4965   1F29 38 00 00      mov c, 0
4966   1F2C FD AB         swp b
4967   1F2E D8            push b
4968   1F2F 07 DE 3F      call strcmp
4969   1F32 51 04 00      add sp, 4
4970   1F35             ; --- END FUNCTION CALL
4971   1F35             ; --- START LOGICAL OR
4972   1F35 D7            push a
4973   1F36 11            mov a, b
4974   1F37             ; --- START FUNCTION CALL
4975   1F37                              
4976   1F37 26 88 52      mov b, _s47 ; "al"
4977   1F3A FD AB         swp b
4978   1F3C D8            push b
4979   1F3D                              
4980   1F3D FA 05 00      lea d, [bp + 5] ; $name
4981   1F40 2A            mov b, [d]
4982   1F41 38 00 00      mov c, 0
4983   1F44 FD AB         swp b
4984   1F46 D8            push b
4985   1F47 07 DE 3F      call strcmp
4986   1F4A 51 04 00      add sp, 4
4987   1F4D             ; --- END FUNCTION CALL
4988   1F4D FD A8         sor a, b ; ||
4989   1F4F 11            mov a, b
4990   1F50             ; --- START FUNCTION CALL
4991   1F50                              
4992   1F50 26 8B 52      mov b, _s48 ; "ah"
4993   1F53 FD AB         swp b
4994   1F55 D8            push b
4995   1F56                              
4996   1F56 FA 05 00      lea d, [bp + 5] ; $name
4997   1F59 2A            mov b, [d]
4998   1F5A 38 00 00      mov c, 0
4999   1F5D FD AB         swp b
5000   1F5F D8            push b
5001   1F60 07 DE 3F      call strcmp
5002   1F63 51 04 00      add sp, 4
5003   1F66             ; --- END FUNCTION CALL
5004   1F66 FD A8         sor a, b ; ||
5005   1F68 11            mov a, b
5006   1F69             ; --- START FUNCTION CALL
5007   1F69                              
5008   1F69 26 8E 52      mov b, _s49 ; "b"
5009   1F6C FD AB         swp b
5010   1F6E D8            push b
5011   1F6F                              
5012   1F6F FA 05 00      lea d, [bp + 5] ; $name
5013   1F72 2A            mov b, [d]
5014   1F73 38 00 00      mov c, 0
5015   1F76 FD AB         swp b
5016   1F78 D8            push b
5017   1F79 07 DE 3F      call strcmp
5018   1F7C 51 04 00      add sp, 4
5019   1F7F             ; --- END FUNCTION CALL
5020   1F7F FD A8         sor a, b ; ||
5021   1F81 11            mov a, b
5022   1F82             ; --- START FUNCTION CALL
5023   1F82                              
5024   1F82 26 90 52      mov b, _s50 ; "bl"
5025   1F85 FD AB         swp b
5026   1F87 D8            push b
5027   1F88                              
5028   1F88 FA 05 00      lea d, [bp + 5] ; $name
5029   1F8B 2A            mov b, [d]
5030   1F8C 38 00 00      mov c, 0
5031   1F8F FD AB         swp b
5032   1F91 D8            push b
5033   1F92 07 DE 3F      call strcmp
5034   1F95 51 04 00      add sp, 4
5035   1F98             ; --- END FUNCTION CALL
5036   1F98 FD A8         sor a, b ; ||
5037   1F9A 11            mov a, b
5038   1F9B             ; --- START FUNCTION CALL
5039   1F9B                              
5040   1F9B 26 93 52      mov b, _s51 ; "bh"
5041   1F9E FD AB         swp b
5042   1FA0 D8            push b
5043   1FA1                              
5044   1FA1 FA 05 00      lea d, [bp + 5] ; $name
5045   1FA4 2A            mov b, [d]
5046   1FA5 38 00 00      mov c, 0
5047   1FA8 FD AB         swp b
5048   1FAA D8            push b
5049   1FAB 07 DE 3F      call strcmp
5050   1FAE 51 04 00      add sp, 4
5051   1FB1             ; --- END FUNCTION CALL
5052   1FB1 FD A8         sor a, b ; ||
5053   1FB3 11            mov a, b
5054   1FB4             ; --- START FUNCTION CALL
5055   1FB4                              
5056   1FB4 26 96 52      mov b, _s52 ; "c"
5057   1FB7 FD AB         swp b
5058   1FB9 D8            push b
5059   1FBA                              
5060   1FBA FA 05 00      lea d, [bp + 5] ; $name
5061   1FBD 2A            mov b, [d]
5062   1FBE 38 00 00      mov c, 0
5063   1FC1 FD AB         swp b
5064   1FC3 D8            push b
5065   1FC4 07 DE 3F      call strcmp
5066   1FC7 51 04 00      add sp, 4
5067   1FCA             ; --- END FUNCTION CALL
5068   1FCA FD A8         sor a, b ; ||
5069   1FCC 11            mov a, b
5070   1FCD             ; --- START FUNCTION CALL
5071   1FCD                              
5072   1FCD 26 98 52      mov b, _s53 ; "cl"
5073   1FD0 FD AB         swp b
5074   1FD2 D8            push b
5075   1FD3                              
5076   1FD3 FA 05 00      lea d, [bp + 5] ; $name
5077   1FD6 2A            mov b, [d]
5078   1FD7 38 00 00      mov c, 0
5079   1FDA FD AB         swp b
5080   1FDC D8            push b
5081   1FDD 07 DE 3F      call strcmp
5082   1FE0 51 04 00      add sp, 4
5083   1FE3             ; --- END FUNCTION CALL
5084   1FE3 FD A8         sor a, b ; ||
5085   1FE5 11            mov a, b
5086   1FE6             ; --- START FUNCTION CALL
5087   1FE6                              
5088   1FE6 26 9B 52      mov b, _s54 ; "ch"
5089   1FE9 FD AB         swp b
5090   1FEB D8            push b
5091   1FEC                              
5092   1FEC FA 05 00      lea d, [bp + 5] ; $name
5093   1FEF 2A            mov b, [d]
5094   1FF0 38 00 00      mov c, 0
5095   1FF3 FD AB         swp b
5096   1FF5 D8            push b
5097   1FF6 07 DE 3F      call strcmp
5098   1FF9 51 04 00      add sp, 4
5099   1FFC             ; --- END FUNCTION CALL
5100   1FFC FD A8         sor a, b ; ||
5101   1FFE 11            mov a, b
5102   1FFF             ; --- START FUNCTION CALL
5103   1FFF                              
5104   1FFF 26 9E 52      mov b, _s55 ; "d"
5105   2002 FD AB         swp b
5106   2004 D8            push b
5107   2005                              
5108   2005 FA 05 00      lea d, [bp + 5] ; $name
5109   2008 2A            mov b, [d]
5110   2009 38 00 00      mov c, 0
5111   200C FD AB         swp b
5112   200E D8            push b
5113   200F 07 DE 3F      call strcmp
5114   2012 51 04 00      add sp, 4
5115   2015             ; --- END FUNCTION CALL
5116   2015 FD A8         sor a, b ; ||
5117   2017 11            mov a, b
5118   2018             ; --- START FUNCTION CALL
5119   2018                              
5120   2018 26 A0 52      mov b, _s56 ; "dl"
5121   201B FD AB         swp b
5122   201D D8            push b
5123   201E                              
5124   201E FA 05 00      lea d, [bp + 5] ; $name
5125   2021 2A            mov b, [d]
5126   2022 38 00 00      mov c, 0
5127   2025 FD AB         swp b
5128   2027 D8            push b
5129   2028 07 DE 3F      call strcmp
5130   202B 51 04 00      add sp, 4
5131   202E             ; --- END FUNCTION CALL
5132   202E FD A8         sor a, b ; ||
5133   2030 11            mov a, b
5134   2031             ; --- START FUNCTION CALL
5135   2031                              
5136   2031 26 A3 52      mov b, _s57 ; "dh"
5137   2034 FD AB         swp b
5138   2036 D8            push b
5139   2037                              
5140   2037 FA 05 00      lea d, [bp + 5] ; $name
5141   203A 2A            mov b, [d]
5142   203B 38 00 00      mov c, 0
5143   203E FD AB         swp b
5144   2040 D8            push b
5145   2041 07 DE 3F      call strcmp
5146   2044 51 04 00      add sp, 4
5147   2047             ; --- END FUNCTION CALL
5148   2047 FD A8         sor a, b ; ||
5149   2049 11            mov a, b
5150   204A             ; --- START FUNCTION CALL
5151   204A                              
5152   204A 26 A6 52      mov b, _s58 ; "g"
5153   204D FD AB         swp b
5154   204F D8            push b
5155   2050                              
5156   2050 FA 05 00      lea d, [bp + 5] ; $name
5157   2053 2A            mov b, [d]
5158   2054 38 00 00      mov c, 0
5159   2057 FD AB         swp b
5160   2059 D8            push b
5161   205A 07 DE 3F      call strcmp
5162   205D 51 04 00      add sp, 4
5163   2060             ; --- END FUNCTION CALL
5164   2060 FD A8         sor a, b ; ||
5165   2062 11            mov a, b
5166   2063             ; --- START FUNCTION CALL
5167   2063                              
5168   2063 26 A8 52      mov b, _s59 ; "gl"
5169   2066 FD AB         swp b
5170   2068 D8            push b
5171   2069                              
5172   2069 FA 05 00      lea d, [bp + 5] ; $name
5173   206C 2A            mov b, [d]
5174   206D 38 00 00      mov c, 0
5175   2070 FD AB         swp b
5176   2072 D8            push b
5177   2073 07 DE 3F      call strcmp
5178   2076 51 04 00      add sp, 4
5179   2079             ; --- END FUNCTION CALL
5180   2079 FD A8         sor a, b ; ||
5181   207B 11            mov a, b
5182   207C             ; --- START FUNCTION CALL
5183   207C                              
5184   207C 26 AB 52      mov b, _s60 ; "gh"
5185   207F FD AB         swp b
5186   2081 D8            push b
5187   2082                              
5188   2082 FA 05 00      lea d, [bp + 5] ; $name
5189   2085 2A            mov b, [d]
5190   2086 38 00 00      mov c, 0
5191   2089 FD AB         swp b
5192   208B D8            push b
5193   208C 07 DE 3F      call strcmp
5194   208F 51 04 00      add sp, 4
5195   2092             ; --- END FUNCTION CALL
5196   2092 FD A8         sor a, b ; ||
5197   2094 11            mov a, b
5198   2095             ; --- START FUNCTION CALL
5199   2095                              
5200   2095 26 AE 52      mov b, _s61 ; "pc"
5201   2098 FD AB         swp b
5202   209A D8            push b
5203   209B                              
5204   209B FA 05 00      lea d, [bp + 5] ; $name
5205   209E 2A            mov b, [d]
5206   209F 38 00 00      mov c, 0
5207   20A2 FD AB         swp b
5208   20A4 D8            push b
5209   20A5 07 DE 3F      call strcmp
5210   20A8 51 04 00      add sp, 4
5211   20AB             ; --- END FUNCTION CALL
5212   20AB FD A8         sor a, b ; ||
5213   20AD 11            mov a, b
5214   20AE             ; --- START FUNCTION CALL
5215   20AE                              
5216   20AE 26 B1 52      mov b, _s62 ; "sp"
5217   20B1 FD AB         swp b
5218   20B3 D8            push b
5219   20B4                              
5220   20B4 FA 05 00      lea d, [bp + 5] ; $name
5221   20B7 2A            mov b, [d]
5222   20B8 38 00 00      mov c, 0
5223   20BB FD AB         swp b
5224   20BD D8            push b
5225   20BE 07 DE 3F      call strcmp
5226   20C1 51 04 00      add sp, 4
5227   20C4             ; --- END FUNCTION CALL
5228   20C4 FD A8         sor a, b ; ||
5229   20C6 11            mov a, b
5230   20C7             ; --- START FUNCTION CALL
5231   20C7                              
5232   20C7 26 B4 52      mov b, _s63 ; "bp"
5233   20CA FD AB         swp b
5234   20CC D8            push b
5235   20CD                              
5236   20CD FA 05 00      lea d, [bp + 5] ; $name
5237   20D0 2A            mov b, [d]
5238   20D1 38 00 00      mov c, 0
5239   20D4 FD AB         swp b
5240   20D6 D8            push b
5241   20D7 07 DE 3F      call strcmp
5242   20DA 51 04 00      add sp, 4
5243   20DD             ; --- END FUNCTION CALL
5244   20DD FD A8         sor a, b ; ||
5245   20DF 11            mov a, b
5246   20E0             ; --- START FUNCTION CALL
5247   20E0                              
5248   20E0 26 B7 52      mov b, _s64 ; "si"
5249   20E3 FD AB         swp b
5250   20E5 D8            push b
5251   20E6                              
5252   20E6 FA 05 00      lea d, [bp + 5] ; $name
5253   20E9 2A            mov b, [d]
5254   20EA 38 00 00      mov c, 0
5255   20ED FD AB         swp b
5256   20EF D8            push b
5257   20F0 07 DE 3F      call strcmp
5258   20F3 51 04 00      add sp, 4
5259   20F6             ; --- END FUNCTION CALL
5260   20F6 FD A8         sor a, b ; ||
5261   20F8 11            mov a, b
5262   20F9             ; --- START FUNCTION CALL
5263   20F9                              
5264   20F9 26 BA 52      mov b, _s65 ; "di"
5265   20FC FD AB         swp b
5266   20FE D8            push b
5267   20FF                              
5268   20FF FA 05 00      lea d, [bp + 5] ; $name
5269   2102 2A            mov b, [d]
5270   2103 38 00 00      mov c, 0
5271   2106 FD AB         swp b
5272   2108 D8            push b
5273   2109 07 DE 3F      call strcmp
5274   210C 51 04 00      add sp, 4
5275   210F             ; --- END FUNCTION CALL
5276   210F FD A8         sor a, b ; ||
5277   2111 11            mov a, b
5278   2112             ; --- START FUNCTION CALL
5279   2112                              
5280   2112 26 BD 52      mov b, _s66 ; "word"
5281   2115 FD AB         swp b
5282   2117 D8            push b
5283   2118                              
5284   2118 FA 05 00      lea d, [bp + 5] ; $name
5285   211B 2A            mov b, [d]
5286   211C 38 00 00      mov c, 0
5287   211F FD AB         swp b
5288   2121 D8            push b
5289   2122 07 DE 3F      call strcmp
5290   2125 51 04 00      add sp, 4
5291   2128             ; --- END FUNCTION CALL
5292   2128 FD A8         sor a, b ; ||
5293   212A 11            mov a, b
5294   212B             ; --- START FUNCTION CALL
5295   212B                              
5296   212B 26 C2 52      mov b, _s67 ; "byte"
5297   212E FD AB         swp b
5298   2130 D8            push b
5299   2131                              
5300   2131 FA 05 00      lea d, [bp + 5] ; $name
5301   2134 2A            mov b, [d]
5302   2135 38 00 00      mov c, 0
5303   2138 FD AB         swp b
5304   213A D8            push b
5305   213B 07 DE 3F      call strcmp
5306   213E 51 04 00      add sp, 4
5307   2141             ; --- END FUNCTION CALL
5308   2141 FD A8         sor a, b ; ||
5309   2143 11            mov a, b
5310   2144             ; --- START FUNCTION CALL
5311   2144                              
5312   2144 26 C7 52      mov b, _s68 ; "cmpsb"
5313   2147 FD AB         swp b
5314   2149 D8            push b
5315   214A                              
5316   214A FA 05 00      lea d, [bp + 5] ; $name
5317   214D 2A            mov b, [d]
5318   214E 38 00 00      mov c, 0
5319   2151 FD AB         swp b
5320   2153 D8            push b
5321   2154 07 DE 3F      call strcmp
5322   2157 51 04 00      add sp, 4
5323   215A             ; --- END FUNCTION CALL
5324   215A FD A8         sor a, b ; ||
5325   215C 11            mov a, b
5326   215D             ; --- START FUNCTION CALL
5327   215D                              
5328   215D 26 CD 52      mov b, _s69 ; "movsb"
5329   2160 FD AB         swp b
5330   2162 D8            push b
5331   2163                              
5332   2163 FA 05 00      lea d, [bp + 5] ; $name
5333   2166 2A            mov b, [d]
5334   2167 38 00 00      mov c, 0
5335   216A FD AB         swp b
5336   216C D8            push b
5337   216D 07 DE 3F      call strcmp
5338   2170 51 04 00      add sp, 4
5339   2173             ; --- END FUNCTION CALL
5340   2173 FD A8         sor a, b ; ||
5341   2175 11            mov a, b
5342   2176             ; --- START FUNCTION CALL
5343   2176                              
5344   2176 26 D3 52      mov b, _s70 ; "stosb"
5345   2179 FD AB         swp b
5346   217B D8            push b
5347   217C                              
5348   217C FA 05 00      lea d, [bp + 5] ; $name
5349   217F 2A            mov b, [d]
5350   2180 38 00 00      mov c, 0
5351   2183 FD AB         swp b
5352   2185 D8            push b
5353   2186 07 DE 3F      call strcmp
5354   2189 51 04 00      add sp, 4
5355   218C             ; --- END FUNCTION CALL
5356   218C FD A8         sor a, b ; ||
5357   218E E4            pop a
5358   218F             ; --- END LOGICAL OR
5359   218F F9            leave
5360   2190 09            ret
5361   2191             
5362   2191             is_directive:
5363   2191 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5364   2194             ; return !strcmp(name, "org")  
5365   2194                              
5366   2194             ; --- START FUNCTION CALL
5367   2194                              
5368   2194 26 FD 4F      mov b, _s0 ; "org"
5369   2197 FD AB         swp b
5370   2199 D8            push b
5371   219A                              
5372   219A FA 05 00      lea d, [bp + 5] ; $name
5373   219D 2A            mov b, [d]
5374   219E 38 00 00      mov c, 0
5375   21A1 FD AB         swp b
5376   21A3 D8            push b
5377   21A4 07 DE 3F      call strcmp
5378   21A7 51 04 00      add sp, 4
5379   21AA             ; --- END FUNCTION CALL
5380   21AA             ; --- START LOGICAL OR
5381   21AA D7            push a
5382   21AB 11            mov a, b
5383   21AC             ; --- START FUNCTION CALL
5384   21AC                              
5385   21AC 26 D9 52      mov b, _s71 ; "define"
5386   21AF FD AB         swp b
5387   21B1 D8            push b
5388   21B2                              
5389   21B2 FA 05 00      lea d, [bp + 5] ; $name
5390   21B5 2A            mov b, [d]
5391   21B6 38 00 00      mov c, 0
5392   21B9 FD AB         swp b
5393   21BB D8            push b
5394   21BC 07 DE 3F      call strcmp
5395   21BF 51 04 00      add sp, 4
5396   21C2             ; --- END FUNCTION CALL
5397   21C2 FD A8         sor a, b ; ||
5398   21C4 E4            pop a
5399   21C5             ; --- END LOGICAL OR
5400   21C5 F9            leave
5401   21C6 09            ret
5402   21C7             
5403   21C7             parse_label:
5404   21C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5405   21CA             ; char label_name[ 32      ]; 
5406   21CA 52 20 00      sub sp, 32
5407   21CD             ; get(); 
5408   21CD                              
5409   21CD             ; --- START FUNCTION CALL
5410   21CD 07 78 2B      call get
5411   21D0             ; strcpy(label_name, token); 
5412   21D0                              
5413   21D0             ; --- START FUNCTION CALL
5414   21D0                              
5415   21D0 3B 89 4E      mov d, _token_data ; $token
5416   21D3 2D            mov b, d
5417   21D4 38 00 00      mov c, 0
5418   21D7 FD AB         swp b
5419   21D9 D8            push b
5420   21DA                              
5421   21DA FA E1 FF      lea d, [bp + -31] ; $label_name
5422   21DD 2D            mov b, d
5423   21DE 38 00 00      mov c, 0
5424   21E1 FD AB         swp b
5425   21E3 D8            push b
5426   21E4 07 13 43      call strcpy
5427   21E7 51 04 00      add sp, 4
5428   21EA             ; --- END FUNCTION CALL
5429   21EA             ; declare_label(label_name, pc); 
5430   21EA                              
5431   21EA             ; --- START FUNCTION CALL
5432   21EA                              
5433   21EA 3B 80 4E      mov d, _pc ; $pc
5434   21ED 2A            mov b, [d]
5435   21EE 38 00 00      mov c, 0
5436   21F1 FD AB         swp b
5437   21F3 D8            push b
5438   21F4                              
5439   21F4 FA E1 FF      lea d, [bp + -31] ; $label_name
5440   21F7 2D            mov b, d
5441   21F8 38 00 00      mov c, 0
5442   21FB FD AB         swp b
5443   21FD D8            push b
5444   21FE 07 09 22      call declare_label
5445   2201 51 04 00      add sp, 4
5446   2204             ; --- END FUNCTION CALL
5447   2204             ; get(); // get ':' 
5448   2204                              
5449   2204             ; --- START FUNCTION CALL
5450   2204 07 78 2B      call get
5451   2207 F9            leave
5452   2208 09            ret
5453   2209             
5454   2209             declare_label:
5455   2209 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5456   220C             ; int i; 
5457   220C 52 02 00      sub sp, 2
5458   220F             ; for(i = 0; i <  16          ; i++){ 
5459   220F             _for109_init:
5460   220F FA FF FF      lea d, [bp + -1] ; $i
5461   2212 DA            push d
5462   2213                              
5463   2213 FD 2E 00 00   mov32 cb, $00000000
5463   2217 00 00 
5464   2219 E7            pop d
5465   221A FD 43         mov [d], b
5466   221C             _for109_cond:
5467   221C                              
5468   221C FA FF FF      lea d, [bp + -1] ; $i
5469   221F 2A            mov b, [d]
5470   2220 38 00 00      mov c, 0
5471   2223             ; --- START RELATIONAL
5472   2223 D7            push a
5473   2224 11            mov a, b
5474   2225 FD 2E 10 00   mov32 cb, $00000010
5474   2229 00 00 
5475   222B B0            cmp a, b
5476   222C FD 73         slt ; < (signed)
5477   222E E4            pop a
5478   222F             ; --- END RELATIONAL
5479   222F C0 00 00      cmp b, 0
5480   2232 C6 CC 22      je _for109_exit
5481   2235             _for109_block:
5482   2235             ; if(!label_table[i].name[0]){ 
5483   2235             _if110_cond:
5484   2235                              
5485   2235 3B 5E 4D      mov d, _label_table_data ; $label_table
5486   2238 D7            push a
5487   2239 DA            push d
5488   223A                              
5489   223A FA FF FF      lea d, [bp + -1] ; $i
5490   223D 2A            mov b, [d]
5491   223E 38 00 00      mov c, 0
5492   2241 E7            pop d
5493   2242 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5494   2246 E4            pop a
5495   2247 58 00 00      add d, 0
5496   224A D7            push a
5497   224B DA            push d
5498   224C                              
5499   224C FD 2E 00 00   mov32 cb, $00000000
5499   2250 00 00 
5500   2252 E7            pop d
5501   2253 5A            add d, b
5502   2254 E4            pop a
5503   2255 32            mov bl, [d]
5504   2256 A7 00         mov bh, 0
5505   2258 38 00 00      mov c, 0
5506   225B C0 00 00      cmp b, 0
5507   225E C6 B9 22      je _if110_exit
5508   2261             _if110_TRUE:
5509   2261             ; strcpy(label_table[i].name, name); 
5510   2261                              
5511   2261             ; --- START FUNCTION CALL
5512   2261                              
5513   2261 FA 05 00      lea d, [bp + 5] ; $name
5514   2264 2A            mov b, [d]
5515   2265 38 00 00      mov c, 0
5516   2268 FD AB         swp b
5517   226A D8            push b
5518   226B                              
5519   226B 3B 5E 4D      mov d, _label_table_data ; $label_table
5520   226E D7            push a
5521   226F DA            push d
5522   2270                              
5523   2270 FA FF FF      lea d, [bp + -1] ; $i
5524   2273 2A            mov b, [d]
5525   2274 38 00 00      mov c, 0
5526   2277 E7            pop d
5527   2278 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5528   227C E4            pop a
5529   227D 58 00 00      add d, 0
5530   2280 2D            mov b, d
5531   2281 38 00 00      mov c, 0
5532   2284 FD AB         swp b
5533   2286 D8            push b
5534   2287 07 13 43      call strcpy
5535   228A 51 04 00      add sp, 4
5536   228D             ; --- END FUNCTION CALL
5537   228D             ; label_table[i].address = address; 
5538   228D 3B 5E 4D      mov d, _label_table_data ; $label_table
5539   2290 D7            push a
5540   2291 DA            push d
5541   2292                              
5542   2292 FA FF FF      lea d, [bp + -1] ; $i
5543   2295 2A            mov b, [d]
5544   2296 38 00 00      mov c, 0
5545   2299 E7            pop d
5546   229A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5547   229E E4            pop a
5548   229F 58 10 00      add d, 16
5549   22A2 DA            push d
5550   22A3                              
5551   22A3 FA 07 00      lea d, [bp + 7] ; $address
5552   22A6 2A            mov b, [d]
5553   22A7 38 00 00      mov c, 0
5554   22AA E7            pop d
5555   22AB FD 43         mov [d], b
5556   22AD             ; return i; 
5557   22AD                              
5558   22AD FA FF FF      lea d, [bp + -1] ; $i
5559   22B0 2A            mov b, [d]
5560   22B1 38 00 00      mov c, 0
5561   22B4 F9            leave
5562   22B5 09            ret
5563   22B6 0A B9 22      jmp _if110_exit
5564   22B9             _if110_exit:
5565   22B9             _for109_update:
5566   22B9                              
5567   22B9 FA FF FF      lea d, [bp + -1] ; $i
5568   22BC 2A            mov b, [d]
5569   22BD 38 00 00      mov c, 0
5570   22C0 11            mov a, b
5571   22C1 FD 77         inc b
5572   22C3 FA FF FF      lea d, [bp + -1] ; $i
5573   22C6 FD 43         mov [d], b
5574   22C8 27            mov b, a
5575   22C9 0A 1C 22      jmp _for109_cond
5576   22CC             _for109_exit:
5577   22CC F9            leave
5578   22CD 09            ret
5579   22CE             
5580   22CE             get_label_addr:
5581   22CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
5582   22D1             ; int i; 
5583   22D1 52 02 00      sub sp, 2
5584   22D4             ; for(i = 0; i <  16          ; i++){ 
5585   22D4             _for111_init:
5586   22D4 FA FF FF      lea d, [bp + -1] ; $i
5587   22D7 DA            push d
5588   22D8                              
5589   22D8 FD 2E 00 00   mov32 cb, $00000000
5589   22DC 00 00 
5590   22DE E7            pop d
5591   22DF FD 43         mov [d], b
5592   22E1             _for111_cond:
5593   22E1                              
5594   22E1 FA FF FF      lea d, [bp + -1] ; $i
5595   22E4 2A            mov b, [d]
5596   22E5 38 00 00      mov c, 0
5597   22E8             ; --- START RELATIONAL
5598   22E8 D7            push a
5599   22E9 11            mov a, b
5600   22EA FD 2E 10 00   mov32 cb, $00000010
5600   22EE 00 00 
5601   22F0 B0            cmp a, b
5602   22F1 FD 73         slt ; < (signed)
5603   22F3 E4            pop a
5604   22F4             ; --- END RELATIONAL
5605   22F4 C0 00 00      cmp b, 0
5606   22F7 C6 5D 23      je _for111_exit
5607   22FA             _for111_block:
5608   22FA             ; if(!strcmp(label_table[i].name, name)){ 
5609   22FA             _if112_cond:
5610   22FA                              
5611   22FA             ; --- START FUNCTION CALL
5612   22FA                              
5613   22FA FA 05 00      lea d, [bp + 5] ; $name
5614   22FD 2A            mov b, [d]
5615   22FE 38 00 00      mov c, 0
5616   2301 FD AB         swp b
5617   2303 D8            push b
5618   2304                              
5619   2304 3B 5E 4D      mov d, _label_table_data ; $label_table
5620   2307 D7            push a
5621   2308 DA            push d
5622   2309                              
5623   2309 FA FF FF      lea d, [bp + -1] ; $i
5624   230C 2A            mov b, [d]
5625   230D 38 00 00      mov c, 0
5626   2310 E7            pop d
5627   2311 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5628   2315 E4            pop a
5629   2316 58 00 00      add d, 0
5630   2319 2D            mov b, d
5631   231A 38 00 00      mov c, 0
5632   231D FD AB         swp b
5633   231F D8            push b
5634   2320 07 DE 3F      call strcmp
5635   2323 51 04 00      add sp, 4
5636   2326             ; --- END FUNCTION CALL
5637   2326 C0 00 00      cmp b, 0
5638   2329 C6 4A 23      je _if112_exit
5639   232C             _if112_TRUE:
5640   232C             ; return label_table[i].address; 
5641   232C                              
5642   232C 3B 5E 4D      mov d, _label_table_data ; $label_table
5643   232F D7            push a
5644   2330 DA            push d
5645   2331                              
5646   2331 FA FF FF      lea d, [bp + -1] ; $i
5647   2334 2A            mov b, [d]
5648   2335 38 00 00      mov c, 0
5649   2338 E7            pop d
5650   2339 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5651   233D E4            pop a
5652   233E 58 10 00      add d, 16
5653   2341 2A            mov b, [d]
5654   2342 38 00 00      mov c, 0
5655   2345 F9            leave
5656   2346 09            ret
5657   2347 0A 4A 23      jmp _if112_exit
5658   234A             _if112_exit:
5659   234A             _for111_update:
5660   234A                              
5661   234A FA FF FF      lea d, [bp + -1] ; $i
5662   234D 2A            mov b, [d]
5663   234E 38 00 00      mov c, 0
5664   2351 11            mov a, b
5665   2352 FD 77         inc b
5666   2354 FA FF FF      lea d, [bp + -1] ; $i
5667   2357 FD 43         mov [d], b
5668   2359 27            mov b, a
5669   235A 0A E1 22      jmp _for111_cond
5670   235D             _for111_exit:
5671   235D             ; error_s("Label does not exist: ", name); 
5672   235D                              
5673   235D             ; --- START FUNCTION CALL
5674   235D                              
5675   235D FA 05 00      lea d, [bp + 5] ; $name
5676   2360 2A            mov b, [d]
5677   2361 38 00 00      mov c, 0
5678   2364 FD AB         swp b
5679   2366 D8            push b
5680   2367                              
5681   2367 26 E0 52      mov b, _s72 ; "Label does not exist: "
5682   236A FD AB         swp b
5683   236C D8            push b
5684   236D 07 B2 39      call error_s
5685   2370 51 04 00      add sp, 4
5686   2373             ; --- END FUNCTION CALL
5687   2373 F9            leave
5688   2374 09            ret
5689   2375             
5690   2375             label_exists:
5691   2375 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5692   2378             ; int i; 
5693   2378 52 02 00      sub sp, 2
5694   237B             ; for(i = 0; i <  16          ; i++){ 
5695   237B             _for113_init:
5696   237B FA FF FF      lea d, [bp + -1] ; $i
5697   237E DA            push d
5698   237F                              
5699   237F FD 2E 00 00   mov32 cb, $00000000
5699   2383 00 00 
5700   2385 E7            pop d
5701   2386 FD 43         mov [d], b
5702   2388             _for113_cond:
5703   2388                              
5704   2388 FA FF FF      lea d, [bp + -1] ; $i
5705   238B 2A            mov b, [d]
5706   238C 38 00 00      mov c, 0
5707   238F             ; --- START RELATIONAL
5708   238F D7            push a
5709   2390 11            mov a, b
5710   2391 FD 2E 10 00   mov32 cb, $00000010
5710   2395 00 00 
5711   2397 B0            cmp a, b
5712   2398 FD 73         slt ; < (signed)
5713   239A E4            pop a
5714   239B             ; --- END RELATIONAL
5715   239B C0 00 00      cmp b, 0
5716   239E C6 F2 23      je _for113_exit
5717   23A1             _for113_block:
5718   23A1             ; if(!strcmp(label_table[i].name, name)){ 
5719   23A1             _if114_cond:
5720   23A1                              
5721   23A1             ; --- START FUNCTION CALL
5722   23A1                              
5723   23A1 FA 05 00      lea d, [bp + 5] ; $name
5724   23A4 2A            mov b, [d]
5725   23A5 38 00 00      mov c, 0
5726   23A8 FD AB         swp b
5727   23AA D8            push b
5728   23AB                              
5729   23AB 3B 5E 4D      mov d, _label_table_data ; $label_table
5730   23AE D7            push a
5731   23AF DA            push d
5732   23B0                              
5733   23B0 FA FF FF      lea d, [bp + -1] ; $i
5734   23B3 2A            mov b, [d]
5735   23B4 38 00 00      mov c, 0
5736   23B7 E7            pop d
5737   23B8 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5738   23BC E4            pop a
5739   23BD 58 00 00      add d, 0
5740   23C0 2D            mov b, d
5741   23C1 38 00 00      mov c, 0
5742   23C4 FD AB         swp b
5743   23C6 D8            push b
5744   23C7 07 DE 3F      call strcmp
5745   23CA 51 04 00      add sp, 4
5746   23CD             ; --- END FUNCTION CALL
5747   23CD C0 00 00      cmp b, 0
5748   23D0 C6 DF 23      je _if114_exit
5749   23D3             _if114_TRUE:
5750   23D3             ; return i; 
5751   23D3                              
5752   23D3 FA FF FF      lea d, [bp + -1] ; $i
5753   23D6 2A            mov b, [d]
5754   23D7 38 00 00      mov c, 0
5755   23DA F9            leave
5756   23DB 09            ret
5757   23DC 0A DF 23      jmp _if114_exit
5758   23DF             _if114_exit:
5759   23DF             _for113_update:
5760   23DF                              
5761   23DF FA FF FF      lea d, [bp + -1] ; $i
5762   23E2 2A            mov b, [d]
5763   23E3 38 00 00      mov c, 0
5764   23E6 11            mov a, b
5765   23E7 FD 77         inc b
5766   23E9 FA FF FF      lea d, [bp + -1] ; $i
5767   23EC FD 43         mov [d], b
5768   23EE 27            mov b, a
5769   23EF 0A 88 23      jmp _for113_cond
5770   23F2             _for113_exit:
5771   23F2             ; return -1; 
5772   23F2                              
5773   23F2 FD 2E FF FF   mov32 cb, $ffffffff
5773   23F6 FF FF 
5774   23F8 F9            leave
5775   23F9 09            ret
5776   23FA             
5777   23FA             search_opcode:
5778   23FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
5779   23FD             ; char opcode_str[24]; 
5780   23FD 52 18 00      sub sp, 24
5781   2400             ; char opcode_hex[5]; 
5782   2400 52 05 00      sub sp, 5
5783   2403             ; char *hex_p; 
5784   2403 52 02 00      sub sp, 2
5785   2406             ; char *op_p; 
5786   2406 52 02 00      sub sp, 2
5787   2409             ; char *tbl_p; 
5788   2409 52 02 00      sub sp, 2
5789   240C             ; struct t_opcode return_opcode; 
5790   240C 52 1A 00      sub sp, 26
5791   240F             ; tbl_p = opcode_table; 
5792   240F FA DE FF      lea d, [bp + -34] ; $tbl_p
5793   2412 DA            push d
5794   2413                              
5795   2413 3B D1 4F      mov d, _opcode_table ; $opcode_table
5796   2416 2A            mov b, [d]
5797   2417 38 00 00      mov c, 0
5798   241A E7            pop d
5799   241B FD 43         mov [d], b
5800   241D             ; for(;;){ 
5801   241D             _for115_init:
5802   241D             _for115_cond:
5803   241D             _for115_block:
5804   241D             ; op_p = opcode_str; 
5805   241D FA E0 FF      lea d, [bp + -32] ; $op_p
5806   2420 DA            push d
5807   2421                              
5808   2421 FA E9 FF      lea d, [bp + -23] ; $opcode_str
5809   2424 2D            mov b, d
5810   2425 38 00 00      mov c, 0
5811   2428 E7            pop d
5812   2429 FD 43         mov [d], b
5813   242B             ; hex_p = opcode_hex; 
5814   242B FA E2 FF      lea d, [bp + -30] ; $hex_p
5815   242E DA            push d
5816   242F                              
5817   242F FA E4 FF      lea d, [bp + -28] ; $opcode_hex
5818   2432 2D            mov b, d
5819   2433 38 00 00      mov c, 0
5820   2436 E7            pop d
5821   2437 FD 43         mov [d], b
5822   2439             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5823   2439             _while116_cond:
5824   2439                              
5825   2439 FA DE FF      lea d, [bp + -34] ; $tbl_p
5826   243C 2A            mov b, [d]
5827   243D 38 00 00      mov c, 0
5828   2440 74            mov d, b
5829   2441 32            mov bl, [d]
5830   2442 A7 00         mov bh, 0
5831   2444 38 00 00      mov c, 0
5832   2447             ; --- START RELATIONAL
5833   2447 D7            push a
5834   2448 11            mov a, b
5835   2449 FD 2E 20 00   mov32 cb, $00000020
5835   244D 00 00 
5836   244F B0            cmp a, b
5837   2450 FD 72         sneq ; !=
5838   2452 E4            pop a
5839   2453             ; --- END RELATIONAL
5840   2453 C0 00 00      cmp b, 0
5841   2456 C6 87 24      je _while116_exit
5842   2459             _while116_block:
5843   2459             ; *op_p++ = *tbl_p++; 
5844   2459 FA E0 FF      lea d, [bp + -32] ; $op_p
5845   245C 2A            mov b, [d]
5846   245D 38 00 00      mov c, 0
5847   2460 FD 77         inc b
5848   2462 FA E0 FF      lea d, [bp + -32] ; $op_p
5849   2465 FD 43         mov [d], b
5850   2467 FD 7D         dec b
5851   2469 D8            push b
5852   246A                              
5853   246A FA DE FF      lea d, [bp + -34] ; $tbl_p
5854   246D 2A            mov b, [d]
5855   246E 38 00 00      mov c, 0
5856   2471 FD 77         inc b
5857   2473 FA DE FF      lea d, [bp + -34] ; $tbl_p
5858   2476 FD 43         mov [d], b
5859   2478 FD 7D         dec b
5860   247A 74            mov d, b
5861   247B 32            mov bl, [d]
5862   247C A7 00         mov bh, 0
5863   247E 38 00 00      mov c, 0
5864   2481 E7            pop d
5865   2482 FD 3E         mov [d], bl
5866   2484 0A 39 24      jmp _while116_cond
5867   2487             _while116_exit:
5868   2487             ; *op_p++ = *tbl_p++; 
5869   2487 FA E0 FF      lea d, [bp + -32] ; $op_p
5870   248A 2A            mov b, [d]
5871   248B 38 00 00      mov c, 0
5872   248E FD 77         inc b
5873   2490 FA E0 FF      lea d, [bp + -32] ; $op_p
5874   2493 FD 43         mov [d], b
5875   2495 FD 7D         dec b
5876   2497 D8            push b
5877   2498                              
5878   2498 FA DE FF      lea d, [bp + -34] ; $tbl_p
5879   249B 2A            mov b, [d]
5880   249C 38 00 00      mov c, 0
5881   249F FD 77         inc b
5882   24A1 FA DE FF      lea d, [bp + -34] ; $tbl_p
5883   24A4 FD 43         mov [d], b
5884   24A6 FD 7D         dec b
5885   24A8 74            mov d, b
5886   24A9 32            mov bl, [d]
5887   24AA A7 00         mov bh, 0
5888   24AC 38 00 00      mov c, 0
5889   24AF E7            pop d
5890   24B0 FD 3E         mov [d], bl
5891   24B2             ; while(*tbl_p != ' ') *op_p++ = *tbl_p++; 
5892   24B2             _while117_cond:
5893   24B2                              
5894   24B2 FA DE FF      lea d, [bp + -34] ; $tbl_p
5895   24B5 2A            mov b, [d]
5896   24B6 38 00 00      mov c, 0
5897   24B9 74            mov d, b
5898   24BA 32            mov bl, [d]
5899   24BB A7 00         mov bh, 0
5900   24BD 38 00 00      mov c, 0
5901   24C0             ; --- START RELATIONAL
5902   24C0 D7            push a
5903   24C1 11            mov a, b
5904   24C2 FD 2E 20 00   mov32 cb, $00000020
5904   24C6 00 00 
5905   24C8 B0            cmp a, b
5906   24C9 FD 72         sneq ; !=
5907   24CB E4            pop a
5908   24CC             ; --- END RELATIONAL
5909   24CC C0 00 00      cmp b, 0
5910   24CF C6 00 25      je _while117_exit
5911   24D2             _while117_block:
5912   24D2             ; *op_p++ = *tbl_p++; 
5913   24D2 FA E0 FF      lea d, [bp + -32] ; $op_p
5914   24D5 2A            mov b, [d]
5915   24D6 38 00 00      mov c, 0
5916   24D9 FD 77         inc b
5917   24DB FA E0 FF      lea d, [bp + -32] ; $op_p
5918   24DE FD 43         mov [d], b
5919   24E0 FD 7D         dec b
5920   24E2 D8            push b
5921   24E3                              
5922   24E3 FA DE FF      lea d, [bp + -34] ; $tbl_p
5923   24E6 2A            mov b, [d]
5924   24E7 38 00 00      mov c, 0
5925   24EA FD 77         inc b
5926   24EC FA DE FF      lea d, [bp + -34] ; $tbl_p
5927   24EF FD 43         mov [d], b
5928   24F1 FD 7D         dec b
5929   24F3 74            mov d, b
5930   24F4 32            mov bl, [d]
5931   24F5 A7 00         mov bh, 0
5932   24F7 38 00 00      mov c, 0
5933   24FA E7            pop d
5934   24FB FD 3E         mov [d], bl
5935   24FD 0A B2 24      jmp _while117_cond
5936   2500             _while117_exit:
5937   2500             ; *op_p = '\0'; 
5938   2500 FA E0 FF      lea d, [bp + -32] ; $op_p
5939   2503 2A            mov b, [d]
5940   2504 38 00 00      mov c, 0
5941   2507 D8            push b
5942   2508                              
5943   2508 FD 2E 00 00   mov32 cb, $00000000
5943   250C 00 00 
5944   250E E7            pop d
5945   250F FD 3E         mov [d], bl
5946   2511             ; if(!strcmp(opcode_str, what_opcode)){ 
5947   2511             _if118_cond:
5948   2511                              
5949   2511             ; --- START FUNCTION CALL
5950   2511                              
5951   2511 FA 05 00      lea d, [bp + 5] ; $what_opcode
5952   2514 2A            mov b, [d]
5953   2515 38 00 00      mov c, 0
5954   2518 FD AB         swp b
5955   251A D8            push b
5956   251B                              
5957   251B FA E9 FF      lea d, [bp + -23] ; $opcode_str
5958   251E 2D            mov b, d
5959   251F 38 00 00      mov c, 0
5960   2522 FD AB         swp b
5961   2524 D8            push b
5962   2525 07 DE 3F      call strcmp
5963   2528 51 04 00      add sp, 4
5964   252B             ; --- END FUNCTION CALL
5965   252B C0 00 00      cmp b, 0
5966   252E C6 7B 26      je _if118_else
5967   2531             _if118_TRUE:
5968   2531             ; strcpy(return_opcode.name, what_opcode); 
5969   2531                              
5970   2531             ; --- START FUNCTION CALL
5971   2531                              
5972   2531 FA 05 00      lea d, [bp + 5] ; $what_opcode
5973   2534 2A            mov b, [d]
5974   2535 38 00 00      mov c, 0
5975   2538 FD AB         swp b
5976   253A D8            push b
5977   253B                              
5978   253B FA C4 FF      lea d, [bp + -60] ; $return_opcode
5979   253E 58 00 00      add d, 0
5980   2541 2D            mov b, d
5981   2542 38 00 00      mov c, 0
5982   2545 FD AB         swp b
5983   2547 D8            push b
5984   2548 07 13 43      call strcpy
5985   254B 51 04 00      add sp, 4
5986   254E             ; --- END FUNCTION CALL
5987   254E             ; while(*tbl_p == ' ') tbl_p++; 
5988   254E             _while119_cond:
5989   254E                              
5990   254E FA DE FF      lea d, [bp + -34] ; $tbl_p
5991   2551 2A            mov b, [d]
5992   2552 38 00 00      mov c, 0
5993   2555 74            mov d, b
5994   2556 32            mov bl, [d]
5995   2557 A7 00         mov bh, 0
5996   2559 38 00 00      mov c, 0
5997   255C             ; --- START RELATIONAL
5998   255C D7            push a
5999   255D 11            mov a, b
6000   255E FD 2E 20 00   mov32 cb, $00000020
6000   2562 00 00 
6001   2564 B0            cmp a, b
6002   2565 FD 71         seq ; ==
6003   2567 E4            pop a
6004   2568             ; --- END RELATIONAL
6005   2568 C0 00 00      cmp b, 0
6006   256B C6 81 25      je _while119_exit
6007   256E             _while119_block:
6008   256E             ; tbl_p++; 
6009   256E                              
6010   256E FA DE FF      lea d, [bp + -34] ; $tbl_p
6011   2571 2A            mov b, [d]
6012   2572 38 00 00      mov c, 0
6013   2575 FD 77         inc b
6014   2577 FA DE FF      lea d, [bp + -34] ; $tbl_p
6015   257A FD 43         mov [d], b
6016   257C FD 7D         dec b
6017   257E 0A 4E 25      jmp _while119_cond
6018   2581             _while119_exit:
6019   2581             ; while(is_hex_digit(*tbl_p)) *hex_p++ = *tbl_p++; // Copy hex opcode 
6020   2581             _while120_cond:
6021   2581                              
6022   2581             ; --- START FUNCTION CALL
6023   2581                              
6024   2581 FA DE FF      lea d, [bp + -34] ; $tbl_p
6025   2584 2A            mov b, [d]
6026   2585 38 00 00      mov c, 0
6027   2588 74            mov d, b
6028   2589 32            mov bl, [d]
6029   258A A7 00         mov bh, 0
6030   258C 38 00 00      mov c, 0
6031   258F DD            push bl
6032   2590 07 C1 29      call is_hex_digit
6033   2593 51 01 00      add sp, 1
6034   2596             ; --- END FUNCTION CALL
6035   2596 C0 00 00      cmp b, 0
6036   2599 C6 CA 25      je _while120_exit
6037   259C             _while120_block:
6038   259C             ; *hex_p++ = *tbl_p++; // Copy hex opcode 
6039   259C FA E2 FF      lea d, [bp + -30] ; $hex_p
6040   259F 2A            mov b, [d]
6041   25A0 38 00 00      mov c, 0
6042   25A3 FD 77         inc b
6043   25A5 FA E2 FF      lea d, [bp + -30] ; $hex_p
6044   25A8 FD 43         mov [d], b
6045   25AA FD 7D         dec b
6046   25AC D8            push b
6047   25AD                              
6048   25AD FA DE FF      lea d, [bp + -34] ; $tbl_p
6049   25B0 2A            mov b, [d]
6050   25B1 38 00 00      mov c, 0
6051   25B4 FD 77         inc b
6052   25B6 FA DE FF      lea d, [bp + -34] ; $tbl_p
6053   25B9 FD 43         mov [d], b
6054   25BB FD 7D         dec b
6055   25BD 74            mov d, b
6056   25BE 32            mov bl, [d]
6057   25BF A7 00         mov bh, 0
6058   25C1 38 00 00      mov c, 0
6059   25C4 E7            pop d
6060   25C5 FD 3E         mov [d], bl
6061   25C7 0A 81 25      jmp _while120_cond
6062   25CA             _while120_exit:
6063   25CA             ; *hex_p = '\0'; 
6064   25CA FA E2 FF      lea d, [bp + -30] ; $hex_p
6065   25CD 2A            mov b, [d]
6066   25CE 38 00 00      mov c, 0
6067   25D1 D8            push b
6068   25D2                              
6069   25D2 FD 2E 00 00   mov32 cb, $00000000
6069   25D6 00 00 
6070   25D8 E7            pop d
6071   25D9 FD 3E         mov [d], bl
6072   25DB             ; if(strlen(opcode_hex) == 4){ 
6073   25DB             _if121_cond:
6074   25DB                              
6075   25DB             ; --- START FUNCTION CALL
6076   25DB                              
6077   25DB FA E4 FF      lea d, [bp + -28] ; $opcode_hex
6078   25DE 2D            mov b, d
6079   25DF 38 00 00      mov c, 0
6080   25E2 FD AB         swp b
6081   25E4 D8            push b
6082   25E5 07 62 40      call strlen
6083   25E8 51 02 00      add sp, 2
6084   25EB             ; --- END FUNCTION CALL
6085   25EB             ; --- START RELATIONAL
6086   25EB D7            push a
6087   25EC 11            mov a, b
6088   25ED FD 2E 04 00   mov32 cb, $00000004
6088   25F1 00 00 
6089   25F3 B0            cmp a, b
6090   25F4 FD 71         seq ; ==
6091   25F6 E4            pop a
6092   25F7             ; --- END RELATIONAL
6093   25F7 C0 00 00      cmp b, 0
6094   25FA C6 45 26      je _if121_else
6095   25FD             _if121_TRUE:
6096   25FD             ; return_opcode.opcode_type = 1; 
6097   25FD FA C4 FF      lea d, [bp + -60] ; $return_opcode
6098   2600 58 19 00      add d, 25
6099   2603 DA            push d
6100   2604                              
6101   2604 FD 2E 01 00   mov32 cb, $00000001
6101   2608 00 00 
6102   260A E7            pop d
6103   260B FD 3E         mov [d], bl
6104   260D             ; *(opcode_hex + 2) = '\0'; 
6105   260D                              
6106   260D FA E4 FF      lea d, [bp + -28] ; $opcode_hex
6107   2610 2D            mov b, d
6108   2611 38 00 00      mov c, 0
6109   2614             ; --- START TERMS
6110   2614 D7            push a
6111   2615 11            mov a, b
6112   2616 FD 2E 02 00   mov32 cb, $00000002
6112   261A 00 00 
6113   261C 56            add b, a
6114   261D E4            pop a
6115   261E             ; --- END TERMS
6116   261E D8            push b
6117   261F                              
6118   261F FD 2E 00 00   mov32 cb, $00000000
6118   2623 00 00 
6119   2625 E7            pop d
6120   2626 FD 43         mov [d], b
6121   2628             ; return_opcode.opcode = hex_to_int(opcode_hex); 
6122   2628 FA C4 FF      lea d, [bp + -60] ; $return_opcode
6123   262B 58 18 00      add d, 24
6124   262E DA            push d
6125   262F                              
6126   262F             ; --- START FUNCTION CALL
6127   262F                              
6128   262F FA E4 FF      lea d, [bp + -28] ; $opcode_hex
6129   2632 2D            mov b, d
6130   2633 38 00 00      mov c, 0
6131   2636 FD AB         swp b
6132   2638 D8            push b
6133   2639 07 55 3B      call hex_to_int
6134   263C 51 02 00      add sp, 2
6135   263F             ; --- END FUNCTION CALL
6136   263F E7            pop d
6137   2640 FD 3E         mov [d], bl
6138   2642 0A 6F 26      jmp _if121_exit
6139   2645             _if121_else:
6140   2645             ; return_opcode.opcode_type = 0; 
6141   2645 FA C4 FF      lea d, [bp + -60] ; $return_opcode
6142   2648 58 19 00      add d, 25
6143   264B DA            push d
6144   264C                              
6145   264C FD 2E 00 00   mov32 cb, $00000000
6145   2650 00 00 
6146   2652 E7            pop d
6147   2653 FD 3E         mov [d], bl
6148   2655             ; return_opcode.opcode = hex_to_int(opcode_hex); 
6149   2655 FA C4 FF      lea d, [bp + -60] ; $return_opcode
6150   2658 58 18 00      add d, 24
6151   265B DA            push d
6152   265C                              
6153   265C             ; --- START FUNCTION CALL
6154   265C                              
6155   265C FA E4 FF      lea d, [bp + -28] ; $opcode_hex
6156   265F 2D            mov b, d
6157   2660 38 00 00      mov c, 0
6158   2663 FD AB         swp b
6159   2665 D8            push b
6160   2666 07 55 3B      call hex_to_int
6161   2669 51 02 00      add sp, 2
6162   266C             ; --- END FUNCTION CALL
6163   266C E7            pop d
6164   266D FD 3E         mov [d], bl
6165   266F             _if121_exit:
6166   266F             ; return return_opcode; 
6167   266F                              
6168   266F FA C4 FF      lea d, [bp + -60] ; $return_opcode
6169   2672 2D            mov b, d
6170   2673 38 00 00      mov c, 0
6171   2676 F9            leave
6172   2677 09            ret
6173   2678 0A 00 27      jmp _if118_exit
6174   267B             _if118_else:
6175   267B             ; while(*tbl_p != '\n') tbl_p++; 
6176   267B             _while122_cond:
6177   267B                              
6178   267B FA DE FF      lea d, [bp + -34] ; $tbl_p
6179   267E 2A            mov b, [d]
6180   267F 38 00 00      mov c, 0
6181   2682 74            mov d, b
6182   2683 32            mov bl, [d]
6183   2684 A7 00         mov bh, 0
6184   2686 38 00 00      mov c, 0
6185   2689             ; --- START RELATIONAL
6186   2689 D7            push a
6187   268A 11            mov a, b
6188   268B FD 2E 0A 00   mov32 cb, $0000000a
6188   268F 00 00 
6189   2691 B0            cmp a, b
6190   2692 FD 72         sneq ; !=
6191   2694 E4            pop a
6192   2695             ; --- END RELATIONAL
6193   2695 C0 00 00      cmp b, 0
6194   2698 C6 AE 26      je _while122_exit
6195   269B             _while122_block:
6196   269B             ; tbl_p++; 
6197   269B                              
6198   269B FA DE FF      lea d, [bp + -34] ; $tbl_p
6199   269E 2A            mov b, [d]
6200   269F 38 00 00      mov c, 0
6201   26A2 FD 77         inc b
6202   26A4 FA DE FF      lea d, [bp + -34] ; $tbl_p
6203   26A7 FD 43         mov [d], b
6204   26A9 FD 7D         dec b
6205   26AB 0A 7B 26      jmp _while122_cond
6206   26AE             _while122_exit:
6207   26AE             ; while(*tbl_p == '\n') tbl_p++; 
6208   26AE             _while123_cond:
6209   26AE                              
6210   26AE FA DE FF      lea d, [bp + -34] ; $tbl_p
6211   26B1 2A            mov b, [d]
6212   26B2 38 00 00      mov c, 0
6213   26B5 74            mov d, b
6214   26B6 32            mov bl, [d]
6215   26B7 A7 00         mov bh, 0
6216   26B9 38 00 00      mov c, 0
6217   26BC             ; --- START RELATIONAL
6218   26BC D7            push a
6219   26BD 11            mov a, b
6220   26BE FD 2E 0A 00   mov32 cb, $0000000a
6220   26C2 00 00 
6221   26C4 B0            cmp a, b
6222   26C5 FD 71         seq ; ==
6223   26C7 E4            pop a
6224   26C8             ; --- END RELATIONAL
6225   26C8 C0 00 00      cmp b, 0
6226   26CB C6 E1 26      je _while123_exit
6227   26CE             _while123_block:
6228   26CE             ; tbl_p++; 
6229   26CE                              
6230   26CE FA DE FF      lea d, [bp + -34] ; $tbl_p
6231   26D1 2A            mov b, [d]
6232   26D2 38 00 00      mov c, 0
6233   26D5 FD 77         inc b
6234   26D7 FA DE FF      lea d, [bp + -34] ; $tbl_p
6235   26DA FD 43         mov [d], b
6236   26DC FD 7D         dec b
6237   26DE 0A AE 26      jmp _while123_cond
6238   26E1             _while123_exit:
6239   26E1             ; if(!*tbl_p) break; 
6240   26E1             _if124_cond:
6241   26E1                              
6242   26E1 FA DE FF      lea d, [bp + -34] ; $tbl_p
6243   26E4 2A            mov b, [d]
6244   26E5 38 00 00      mov c, 0
6245   26E8 74            mov d, b
6246   26E9 32            mov bl, [d]
6247   26EA A7 00         mov bh, 0
6248   26EC 38 00 00      mov c, 0
6249   26EF C0 00 00      cmp b, 0
6250   26F2 FD 71         seq ; !
6251   26F4 C0 00 00      cmp b, 0
6252   26F7 C6 00 27      je _if124_exit
6253   26FA             _if124_TRUE:
6254   26FA             ; break; 
6255   26FA 0A 03 27      jmp _for115_exit ; for break
6256   26FD 0A 00 27      jmp _if124_exit
6257   2700             _if124_exit:
6258   2700             _if118_exit:
6259   2700             _for115_update:
6260   2700 0A 1D 24      jmp _for115_cond
6261   2703             _for115_exit:
6262   2703             ; return_opcode.name[0] = '\0'; 
6263   2703 FA C4 FF      lea d, [bp + -60] ; $return_opcode
6264   2706 58 00 00      add d, 0
6265   2709 D7            push a
6266   270A DA            push d
6267   270B                              
6268   270B FD 2E 00 00   mov32 cb, $00000000
6268   270F 00 00 
6269   2711 E7            pop d
6270   2712 5A            add d, b
6271   2713 E4            pop a
6272   2714 DA            push d
6273   2715                              
6274   2715 FD 2E 00 00   mov32 cb, $00000000
6274   2719 00 00 
6275   271B E7            pop d
6276   271C FD 3E         mov [d], bl
6277   271E             ; return return_opcode; 
6278   271E                              
6279   271E FA C4 FF      lea d, [bp + -60] ; $return_opcode
6280   2721 2D            mov b, d
6281   2722 38 00 00      mov c, 0
6282   2725 F9            leave
6283   2726 09            ret
6284   2727             
6285   2727             forwards:
6286   2727 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6287   272A             ; bin_p = bin_p + amount; 
6288   272A 3B CF 4F      mov d, _bin_p ; $bin_p
6289   272D DA            push d
6290   272E                              
6291   272E 3B CF 4F      mov d, _bin_p ; $bin_p
6292   2731 2A            mov b, [d]
6293   2732 38 00 00      mov c, 0
6294   2735             ; --- START TERMS
6295   2735 D7            push a
6296   2736 11            mov a, b
6297   2737 FA 05 00      lea d, [bp + 5] ; $amount
6298   273A 32            mov bl, [d]
6299   273B A7 00         mov bh, 0
6300   273D 38 00 00      mov c, 0
6301   2740 56            add b, a
6302   2741 E4            pop a
6303   2742             ; --- END TERMS
6304   2742 E7            pop d
6305   2743 FD 43         mov [d], b
6306   2745             ; prog_size = prog_size + amount; 
6307   2745 3B E9 4F      mov d, _prog_size ; $prog_size
6308   2748 DA            push d
6309   2749                              
6310   2749 3B E9 4F      mov d, _prog_size ; $prog_size
6311   274C 2A            mov b, [d]
6312   274D 38 00 00      mov c, 0
6313   2750             ; --- START TERMS
6314   2750 D7            push a
6315   2751 11            mov a, b
6316   2752 FA 05 00      lea d, [bp + 5] ; $amount
6317   2755 32            mov bl, [d]
6318   2756 A7 00         mov bh, 0
6319   2758 38 00 00      mov c, 0
6320   275B 56            add b, a
6321   275C E4            pop a
6322   275D             ; --- END TERMS
6323   275D E7            pop d
6324   275E FD 43         mov [d], b
6325   2760             ; pc = pc + amount; 
6326   2760 3B 80 4E      mov d, _pc ; $pc
6327   2763 DA            push d
6328   2764                              
6329   2764 3B 80 4E      mov d, _pc ; $pc
6330   2767 2A            mov b, [d]
6331   2768 38 00 00      mov c, 0
6332   276B             ; --- START TERMS
6333   276B D7            push a
6334   276C 11            mov a, b
6335   276D FA 05 00      lea d, [bp + 5] ; $amount
6336   2770 32            mov bl, [d]
6337   2771 A7 00         mov bh, 0
6338   2773 38 00 00      mov c, 0
6339   2776 56            add b, a
6340   2777 E4            pop a
6341   2778             ; --- END TERMS
6342   2778 E7            pop d
6343   2779 FD 43         mov [d], b
6344   277B F9            leave
6345   277C 09            ret
6346   277D             
6347   277D             emit_byte:
6348   277D F8 00 00      enter 0 ; (push bp; mov bp, sp)
6349   2780             ; if(!emit_override){ 
6350   2780             _if125_cond:
6351   2780                              
6352   2780 FA 06 00      lea d, [bp + 6] ; $emit_override
6353   2783 32            mov bl, [d]
6354   2784 A7 00         mov bh, 0
6355   2786 38 00 00      mov c, 0
6356   2789 C0 00 00      cmp b, 0
6357   278C C6 A6 27      je _if125_exit
6358   278F             _if125_TRUE:
6359   278F             ; *bin_p = byte; 
6360   278F 3B CF 4F      mov d, _bin_p ; $bin_p
6361   2792 2A            mov b, [d]
6362   2793 38 00 00      mov c, 0
6363   2796 D8            push b
6364   2797                              
6365   2797 FA 05 00      lea d, [bp + 5] ; $byte
6366   279A 32            mov bl, [d]
6367   279B A7 00         mov bh, 0
6368   279D 38 00 00      mov c, 0
6369   27A0 E7            pop d
6370   27A1 FD 3E         mov [d], bl
6371   27A3 0A A6 27      jmp _if125_exit
6372   27A6             _if125_exit:
6373   27A6             ; forwards(1); 
6374   27A6                              
6375   27A6             ; --- START FUNCTION CALL
6376   27A6                              
6377   27A6 FD 2E 01 00   mov32 cb, $00000001
6377   27AA 00 00 
6378   27AC DD            push bl
6379   27AD 07 27 27      call forwards
6380   27B0 51 01 00      add sp, 1
6381   27B3             ; --- END FUNCTION CALL
6382   27B3 F9            leave
6383   27B4 09            ret
6384   27B5             
6385   27B5             emit_word:
6386   27B5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6387   27B8             ; if(!emit_override){ 
6388   27B8             _if126_cond:
6389   27B8                              
6390   27B8 FA 07 00      lea d, [bp + 7] ; $emit_override
6391   27BB 32            mov bl, [d]
6392   27BC A7 00         mov bh, 0
6393   27BE 38 00 00      mov c, 0
6394   27C1 C0 00 00      cmp b, 0
6395   27C4 C6 DC 27      je _if126_exit
6396   27C7             _if126_TRUE:
6397   27C7             ; *((int*)bin_p) = word; 
6398   27C7                              
6399   27C7 3B CF 4F      mov d, _bin_p ; $bin_p
6400   27CA 2A            mov b, [d]
6401   27CB 38 00 00      mov c, 0
6402   27CE D8            push b
6403   27CF                              
6404   27CF FA 05 00      lea d, [bp + 5] ; $word
6405   27D2 2A            mov b, [d]
6406   27D3 38 00 00      mov c, 0
6407   27D6 E7            pop d
6408   27D7 FD 43         mov [d], b
6409   27D9 0A DC 27      jmp _if126_exit
6410   27DC             _if126_exit:
6411   27DC             ; forwards(2); 
6412   27DC                              
6413   27DC             ; --- START FUNCTION CALL
6414   27DC                              
6415   27DC FD 2E 02 00   mov32 cb, $00000002
6415   27E0 00 00 
6416   27E2 DD            push bl
6417   27E3 07 27 27      call forwards
6418   27E6 51 01 00      add sp, 1
6419   27E9             ; --- END FUNCTION CALL
6420   27E9 F9            leave
6421   27EA 09            ret
6422   27EB             
6423   27EB             back:
6424   27EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
6425   27EE             ; char *t; 
6426   27EE 52 02 00      sub sp, 2
6427   27F1             ; t = token; 
6428   27F1 FA FF FF      lea d, [bp + -1] ; $t
6429   27F4 DA            push d
6430   27F5                              
6431   27F5 3B 89 4E      mov d, _token_data ; $token
6432   27F8 2D            mov b, d
6433   27F9 38 00 00      mov c, 0
6434   27FC E7            pop d
6435   27FD FD 43         mov [d], b
6436   27FF             ; while(*t){ 
6437   27FF             _while127_cond:
6438   27FF                              
6439   27FF FA FF FF      lea d, [bp + -1] ; $t
6440   2802 2A            mov b, [d]
6441   2803 38 00 00      mov c, 0
6442   2806 74            mov d, b
6443   2807 32            mov bl, [d]
6444   2808 A7 00         mov bh, 0
6445   280A 38 00 00      mov c, 0
6446   280D C0 00 00      cmp b, 0
6447   2810 C6 36 28      je _while127_exit
6448   2813             _while127_block:
6449   2813             ; prog--; 
6450   2813                              
6451   2813 3B 87 4E      mov d, _prog ; $prog
6452   2816 2A            mov b, [d]
6453   2817 38 00 00      mov c, 0
6454   281A FD 7D         dec b
6455   281C 3B 87 4E      mov d, _prog ; $prog
6456   281F FD 43         mov [d], b
6457   2821 FD 77         inc b
6458   2823             ; t++; 
6459   2823                              
6460   2823 FA FF FF      lea d, [bp + -1] ; $t
6461   2826 2A            mov b, [d]
6462   2827 38 00 00      mov c, 0
6463   282A FD 77         inc b
6464   282C FA FF FF      lea d, [bp + -1] ; $t
6465   282F FD 43         mov [d], b
6466   2831 FD 7D         dec b
6467   2833 0A FF 27      jmp _while127_cond
6468   2836             _while127_exit:
6469   2836 F9            leave
6470   2837 09            ret
6471   2838             
6472   2838             get_path:
6473   2838 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6474   283B             ; char *t; 
6475   283B 52 02 00      sub sp, 2
6476   283E             ; *token = '\0'; 
6477   283E 3B 89 4E      mov d, _token_data ; $token
6478   2841 2D            mov b, d
6479   2842 38 00 00      mov c, 0
6480   2845 D8            push b
6481   2846                              
6482   2846 FD 2E 00 00   mov32 cb, $00000000
6482   284A 00 00 
6483   284C E7            pop d
6484   284D FD 3E         mov [d], bl
6485   284F             ; tok = 0; 
6486   284F 3B 83 4E      mov d, _tok ; $tok
6487   2852 DA            push d
6488   2853                              
6489   2853 FD 2E 00 00   mov32 cb, $00000000
6489   2857 00 00 
6490   2859 E7            pop d
6491   285A FD 43         mov [d], b
6492   285C             ; toktype = 0; 
6493   285C 3B 85 4E      mov d, _toktype ; $toktype
6494   285F DA            push d
6495   2860                              
6496   2860 FD 2E 00 00   mov32 cb, $00000000
6496   2864 00 00 
6497   2866 E7            pop d
6498   2867 FD 43         mov [d], b
6499   2869             ; t = token; 
6500   2869 FA FF FF      lea d, [bp + -1] ; $t
6501   286C DA            push d
6502   286D                              
6503   286D 3B 89 4E      mov d, _token_data ; $token
6504   2870 2D            mov b, d
6505   2871 38 00 00      mov c, 0
6506   2874 E7            pop d
6507   2875 FD 43         mov [d], b
6508   2877             ; while(is_space(*prog)) prog++; 
6509   2877             _while128_cond:
6510   2877                              
6511   2877             ; --- START FUNCTION CALL
6512   2877                              
6513   2877 3B 87 4E      mov d, _prog ; $prog
6514   287A 2A            mov b, [d]
6515   287B 38 00 00      mov c, 0
6516   287E 74            mov d, b
6517   287F 32            mov bl, [d]
6518   2880 A7 00         mov bh, 0
6519   2882 38 00 00      mov c, 0
6520   2885 DD            push bl
6521   2886 07 C6 3E      call is_space
6522   2889 51 01 00      add sp, 1
6523   288C             ; --- END FUNCTION CALL
6524   288C C0 00 00      cmp b, 0
6525   288F C6 A5 28      je _while128_exit
6526   2892             _while128_block:
6527   2892             ; prog++; 
6528   2892                              
6529   2892 3B 87 4E      mov d, _prog ; $prog
6530   2895 2A            mov b, [d]
6531   2896 38 00 00      mov c, 0
6532   2899 FD 77         inc b
6533   289B 3B 87 4E      mov d, _prog ; $prog
6534   289E FD 43         mov [d], b
6535   28A0 FD 7D         dec b
6536   28A2 0A 77 28      jmp _while128_cond
6537   28A5             _while128_exit:
6538   28A5             ; if(*prog == '\0'){ 
6539   28A5             _if129_cond:
6540   28A5                              
6541   28A5 3B 87 4E      mov d, _prog ; $prog
6542   28A8 2A            mov b, [d]
6543   28A9 38 00 00      mov c, 0
6544   28AC 74            mov d, b
6545   28AD 32            mov bl, [d]
6546   28AE A7 00         mov bh, 0
6547   28B0 38 00 00      mov c, 0
6548   28B3             ; --- START RELATIONAL
6549   28B3 D7            push a
6550   28B4 11            mov a, b
6551   28B5 FD 2E 00 00   mov32 cb, $00000000
6551   28B9 00 00 
6552   28BB B0            cmp a, b
6553   28BC FD 71         seq ; ==
6554   28BE E4            pop a
6555   28BF             ; --- END RELATIONAL
6556   28BF C0 00 00      cmp b, 0
6557   28C2 C6 D7 28      je _if129_exit
6558   28C5             _if129_TRUE:
6559   28C5             ; toktype = END; 
6560   28C5 3B 85 4E      mov d, _toktype ; $toktype
6561   28C8 DA            push d
6562   28C9                              
6563   28C9 FD 2E 07 00   mov32 cb, $7 ; enum element: END
6563   28CD 00 00 
6564   28CF E7            pop d
6565   28D0 FD 43         mov [d], b
6566   28D2             ; return; 
6567   28D2 F9            leave
6568   28D3 09            ret
6569   28D4 0A D7 28      jmp _if129_exit
6570   28D7             _if129_exit:
6571   28D7             ; while(*prog == '/' || is_alpha(*prog) || is_digit(*prog) || *prog == '_' || *prog == '-' || *prog == '.') { 
6572   28D7             _while130_cond:
6573   28D7                              
6574   28D7 3B 87 4E      mov d, _prog ; $prog
6575   28DA 2A            mov b, [d]
6576   28DB 38 00 00      mov c, 0
6577   28DE 74            mov d, b
6578   28DF 32            mov bl, [d]
6579   28E0 A7 00         mov bh, 0
6580   28E2 38 00 00      mov c, 0
6581   28E5             ; --- START RELATIONAL
6582   28E5 D7            push a
6583   28E6 11            mov a, b
6584   28E7 FD 2E 2F 00   mov32 cb, $0000002f
6584   28EB 00 00 
6585   28ED B0            cmp a, b
6586   28EE FD 71         seq ; ==
6587   28F0 E4            pop a
6588   28F1             ; --- END RELATIONAL
6589   28F1             ; --- START LOGICAL OR
6590   28F1 D7            push a
6591   28F2 11            mov a, b
6592   28F3             ; --- START FUNCTION CALL
6593   28F3                              
6594   28F3 3B 87 4E      mov d, _prog ; $prog
6595   28F6 2A            mov b, [d]
6596   28F7 38 00 00      mov c, 0
6597   28FA 74            mov d, b
6598   28FB 32            mov bl, [d]
6599   28FC A7 00         mov bh, 0
6600   28FE 38 00 00      mov c, 0
6601   2901 DD            push bl
6602   2902 07 2A 3F      call is_alpha
6603   2905 51 01 00      add sp, 1
6604   2908             ; --- END FUNCTION CALL
6605   2908 FD A8         sor a, b ; ||
6606   290A 11            mov a, b
6607   290B             ; --- START FUNCTION CALL
6608   290B                              
6609   290B 3B 87 4E      mov d, _prog ; $prog
6610   290E 2A            mov b, [d]
6611   290F 38 00 00      mov c, 0
6612   2912 74            mov d, b
6613   2913 32            mov bl, [d]
6614   2914 A7 00         mov bh, 0
6615   2916 38 00 00      mov c, 0
6616   2919 DD            push bl
6617   291A 07 AA 3F      call is_digit
6618   291D 51 01 00      add sp, 1
6619   2920             ; --- END FUNCTION CALL
6620   2920 FD A8         sor a, b ; ||
6621   2922 11            mov a, b
6622   2923 3B 87 4E      mov d, _prog ; $prog
6623   2926 2A            mov b, [d]
6624   2927 38 00 00      mov c, 0
6625   292A 74            mov d, b
6626   292B 32            mov bl, [d]
6627   292C A7 00         mov bh, 0
6628   292E 38 00 00      mov c, 0
6629   2931             ; --- START RELATIONAL
6630   2931 D7            push a
6631   2932 11            mov a, b
6632   2933 FD 2E 5F 00   mov32 cb, $0000005f
6632   2937 00 00 
6633   2939 B0            cmp a, b
6634   293A FD 71         seq ; ==
6635   293C E4            pop a
6636   293D             ; --- END RELATIONAL
6637   293D FD A8         sor a, b ; ||
6638   293F 11            mov a, b
6639   2940 3B 87 4E      mov d, _prog ; $prog
6640   2943 2A            mov b, [d]
6641   2944 38 00 00      mov c, 0
6642   2947 74            mov d, b
6643   2948 32            mov bl, [d]
6644   2949 A7 00         mov bh, 0
6645   294B 38 00 00      mov c, 0
6646   294E             ; --- START RELATIONAL
6647   294E D7            push a
6648   294F 11            mov a, b
6649   2950 FD 2E 2D 00   mov32 cb, $0000002d
6649   2954 00 00 
6650   2956 B0            cmp a, b
6651   2957 FD 71         seq ; ==
6652   2959 E4            pop a
6653   295A             ; --- END RELATIONAL
6654   295A FD A8         sor a, b ; ||
6655   295C 11            mov a, b
6656   295D 3B 87 4E      mov d, _prog ; $prog
6657   2960 2A            mov b, [d]
6658   2961 38 00 00      mov c, 0
6659   2964 74            mov d, b
6660   2965 32            mov bl, [d]
6661   2966 A7 00         mov bh, 0
6662   2968 38 00 00      mov c, 0
6663   296B             ; --- START RELATIONAL
6664   296B D7            push a
6665   296C 11            mov a, b
6666   296D FD 2E 2E 00   mov32 cb, $0000002e
6666   2971 00 00 
6667   2973 B0            cmp a, b
6668   2974 FD 71         seq ; ==
6669   2976 E4            pop a
6670   2977             ; --- END RELATIONAL
6671   2977 FD A8         sor a, b ; ||
6672   2979 E4            pop a
6673   297A             ; --- END LOGICAL OR
6674   297A C0 00 00      cmp b, 0
6675   297D C6 AE 29      je _while130_exit
6676   2980             _while130_block:
6677   2980             ; *t++ = *prog++; 
6678   2980 FA FF FF      lea d, [bp + -1] ; $t
6679   2983 2A            mov b, [d]
6680   2984 38 00 00      mov c, 0
6681   2987 FD 77         inc b
6682   2989 FA FF FF      lea d, [bp + -1] ; $t
6683   298C FD 43         mov [d], b
6684   298E FD 7D         dec b
6685   2990 D8            push b
6686   2991                              
6687   2991 3B 87 4E      mov d, _prog ; $prog
6688   2994 2A            mov b, [d]
6689   2995 38 00 00      mov c, 0
6690   2998 FD 77         inc b
6691   299A 3B 87 4E      mov d, _prog ; $prog
6692   299D FD 43         mov [d], b
6693   299F FD 7D         dec b
6694   29A1 74            mov d, b
6695   29A2 32            mov bl, [d]
6696   29A3 A7 00         mov bh, 0
6697   29A5 38 00 00      mov c, 0
6698   29A8 E7            pop d
6699   29A9 FD 3E         mov [d], bl
6700   29AB 0A D7 28      jmp _while130_cond
6701   29AE             _while130_exit:
6702   29AE             ; *t = '\0'; 
6703   29AE FA FF FF      lea d, [bp + -1] ; $t
6704   29B1 2A            mov b, [d]
6705   29B2 38 00 00      mov c, 0
6706   29B5 D8            push b
6707   29B6                              
6708   29B6 FD 2E 00 00   mov32 cb, $00000000
6708   29BA 00 00 
6709   29BC E7            pop d
6710   29BD FD 3E         mov [d], bl
6711   29BF F9            leave
6712   29C0 09            ret
6713   29C1             
6714   29C1             is_hex_digit:
6715   29C1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6716   29C4             ; return c >= '0' && c <= '9' || c >= 'A' && c <= 'F' || c >= 'a' && c <= 'f'; 
6717   29C4                              
6718   29C4 FA 05 00      lea d, [bp + 5] ; $c
6719   29C7 32            mov bl, [d]
6720   29C8 A7 00         mov bh, 0
6721   29CA 38 00 00      mov c, 0
6722   29CD             ; --- START RELATIONAL
6723   29CD D7            push a
6724   29CE 11            mov a, b
6725   29CF FD 2E 30 00   mov32 cb, $00000030
6725   29D3 00 00 
6726   29D5 B0            cmp a, b
6727   29D6 FD 80         sge ; >=
6728   29D8 E4            pop a
6729   29D9             ; --- END RELATIONAL
6730   29D9             ; --- START LOGICAL AND
6731   29D9 D7            push a
6732   29DA 11            mov a, b
6733   29DB FA 05 00      lea d, [bp + 5] ; $c
6734   29DE 32            mov bl, [d]
6735   29DF A7 00         mov bh, 0
6736   29E1 38 00 00      mov c, 0
6737   29E4             ; --- START RELATIONAL
6738   29E4 D7            push a
6739   29E5 11            mov a, b
6740   29E6 FD 2E 39 00   mov32 cb, $00000039
6740   29EA 00 00 
6741   29EC B0            cmp a, b
6742   29ED FD 74         sle ; <= (signed)
6743   29EF E4            pop a
6744   29F0             ; --- END RELATIONAL
6745   29F0 FD A7         sand a, b
6746   29F2 E4            pop a
6747   29F3             ; --- END LOGICAL AND
6748   29F3             ; --- START LOGICAL OR
6749   29F3 D7            push a
6750   29F4 11            mov a, b
6751   29F5 FA 05 00      lea d, [bp + 5] ; $c
6752   29F8 32            mov bl, [d]
6753   29F9 A7 00         mov bh, 0
6754   29FB 38 00 00      mov c, 0
6755   29FE             ; --- START RELATIONAL
6756   29FE D7            push a
6757   29FF 11            mov a, b
6758   2A00 FD 2E 41 00   mov32 cb, $00000041
6758   2A04 00 00 
6759   2A06 B0            cmp a, b
6760   2A07 FD 80         sge ; >=
6761   2A09 E4            pop a
6762   2A0A             ; --- END RELATIONAL
6763   2A0A             ; --- START LOGICAL AND
6764   2A0A D7            push a
6765   2A0B 11            mov a, b
6766   2A0C FA 05 00      lea d, [bp + 5] ; $c
6767   2A0F 32            mov bl, [d]
6768   2A10 A7 00         mov bh, 0
6769   2A12 38 00 00      mov c, 0
6770   2A15             ; --- START RELATIONAL
6771   2A15 D7            push a
6772   2A16 11            mov a, b
6773   2A17 FD 2E 46 00   mov32 cb, $00000046
6773   2A1B 00 00 
6774   2A1D B0            cmp a, b
6775   2A1E FD 74         sle ; <= (signed)
6776   2A20 E4            pop a
6777   2A21             ; --- END RELATIONAL
6778   2A21 FD A7         sand a, b
6779   2A23 E4            pop a
6780   2A24             ; --- END LOGICAL AND
6781   2A24 FD A8         sor a, b ; ||
6782   2A26 11            mov a, b
6783   2A27 FA 05 00      lea d, [bp + 5] ; $c
6784   2A2A 32            mov bl, [d]
6785   2A2B A7 00         mov bh, 0
6786   2A2D 38 00 00      mov c, 0
6787   2A30             ; --- START RELATIONAL
6788   2A30 D7            push a
6789   2A31 11            mov a, b
6790   2A32 FD 2E 61 00   mov32 cb, $00000061
6790   2A36 00 00 
6791   2A38 B0            cmp a, b
6792   2A39 FD 80         sge ; >=
6793   2A3B E4            pop a
6794   2A3C             ; --- END RELATIONAL
6795   2A3C             ; --- START LOGICAL AND
6796   2A3C D7            push a
6797   2A3D 11            mov a, b
6798   2A3E FA 05 00      lea d, [bp + 5] ; $c
6799   2A41 32            mov bl, [d]
6800   2A42 A7 00         mov bh, 0
6801   2A44 38 00 00      mov c, 0
6802   2A47             ; --- START RELATIONAL
6803   2A47 D7            push a
6804   2A48 11            mov a, b
6805   2A49 FD 2E 66 00   mov32 cb, $00000066
6805   2A4D 00 00 
6806   2A4F B0            cmp a, b
6807   2A50 FD 74         sle ; <= (signed)
6808   2A52 E4            pop a
6809   2A53             ; --- END RELATIONAL
6810   2A53 FD A7         sand a, b
6811   2A55 E4            pop a
6812   2A56             ; --- END LOGICAL AND
6813   2A56 FD A8         sor a, b ; ||
6814   2A58 E4            pop a
6815   2A59             ; --- END LOGICAL OR
6816   2A59 F9            leave
6817   2A5A 09            ret
6818   2A5B             
6819   2A5B             get_line:
6820   2A5B F8 00 00      enter 0 ; (push bp; mov bp, sp)
6821   2A5E             ; char *t; 
6822   2A5E 52 02 00      sub sp, 2
6823   2A61             ; t = string_const; 
6824   2A61 FA FF FF      lea d, [bp + -1] ; $t
6825   2A64 DA            push d
6826   2A65                              
6827   2A65 3B C9 4E      mov d, _string_const_data ; $string_const
6828   2A68 2D            mov b, d
6829   2A69 38 00 00      mov c, 0
6830   2A6C E7            pop d
6831   2A6D FD 43         mov [d], b
6832   2A6F             ; *t = '\0'; 
6833   2A6F FA FF FF      lea d, [bp + -1] ; $t
6834   2A72 2A            mov b, [d]
6835   2A73 38 00 00      mov c, 0
6836   2A76 D8            push b
6837   2A77                              
6838   2A77 FD 2E 00 00   mov32 cb, $00000000
6838   2A7B 00 00 
6839   2A7D E7            pop d
6840   2A7E FD 3E         mov [d], bl
6841   2A80             ; while(*prog != 0x0A && *prog != '\0'){ 
6842   2A80             _while131_cond:
6843   2A80                              
6844   2A80 3B 87 4E      mov d, _prog ; $prog
6845   2A83 2A            mov b, [d]
6846   2A84 38 00 00      mov c, 0
6847   2A87 74            mov d, b
6848   2A88 32            mov bl, [d]
6849   2A89 A7 00         mov bh, 0
6850   2A8B 38 00 00      mov c, 0
6851   2A8E             ; --- START RELATIONAL
6852   2A8E D7            push a
6853   2A8F 11            mov a, b
6854   2A90 FD 2E 0A 00   mov32 cb, $0000000a
6854   2A94 00 00 
6855   2A96 B0            cmp a, b
6856   2A97 FD 72         sneq ; !=
6857   2A99 E4            pop a
6858   2A9A             ; --- END RELATIONAL
6859   2A9A             ; --- START LOGICAL AND
6860   2A9A D7            push a
6861   2A9B 11            mov a, b
6862   2A9C 3B 87 4E      mov d, _prog ; $prog
6863   2A9F 2A            mov b, [d]
6864   2AA0 38 00 00      mov c, 0
6865   2AA3 74            mov d, b
6866   2AA4 32            mov bl, [d]
6867   2AA5 A7 00         mov bh, 0
6868   2AA7 38 00 00      mov c, 0
6869   2AAA             ; --- START RELATIONAL
6870   2AAA D7            push a
6871   2AAB 11            mov a, b
6872   2AAC FD 2E 00 00   mov32 cb, $00000000
6872   2AB0 00 00 
6873   2AB2 B0            cmp a, b
6874   2AB3 FD 72         sneq ; !=
6875   2AB5 E4            pop a
6876   2AB6             ; --- END RELATIONAL
6877   2AB6 FD A7         sand a, b
6878   2AB8 E4            pop a
6879   2AB9             ; --- END LOGICAL AND
6880   2AB9 C0 00 00      cmp b, 0
6881   2ABC C6 65 2B      je _while131_exit
6882   2ABF             _while131_block:
6883   2ABF             ; if(*prog == ';'){ 
6884   2ABF             _if132_cond:
6885   2ABF                              
6886   2ABF 3B 87 4E      mov d, _prog ; $prog
6887   2AC2 2A            mov b, [d]
6888   2AC3 38 00 00      mov c, 0
6889   2AC6 74            mov d, b
6890   2AC7 32            mov bl, [d]
6891   2AC8 A7 00         mov bh, 0
6892   2ACA 38 00 00      mov c, 0
6893   2ACD             ; --- START RELATIONAL
6894   2ACD D7            push a
6895   2ACE 11            mov a, b
6896   2ACF FD 2E 3B 00   mov32 cb, $0000003b
6896   2AD3 00 00 
6897   2AD5 B0            cmp a, b
6898   2AD6 FD 71         seq ; ==
6899   2AD8 E4            pop a
6900   2AD9             ; --- END RELATIONAL
6901   2AD9 C0 00 00      cmp b, 0
6902   2ADC C6 37 2B      je _if132_else
6903   2ADF             _if132_TRUE:
6904   2ADF             ; while(*prog != 0x0A && *prog != '\0') prog++; 
6905   2ADF             _while133_cond:
6906   2ADF                              
6907   2ADF 3B 87 4E      mov d, _prog ; $prog
6908   2AE2 2A            mov b, [d]
6909   2AE3 38 00 00      mov c, 0
6910   2AE6 74            mov d, b
6911   2AE7 32            mov bl, [d]
6912   2AE8 A7 00         mov bh, 0
6913   2AEA 38 00 00      mov c, 0
6914   2AED             ; --- START RELATIONAL
6915   2AED D7            push a
6916   2AEE 11            mov a, b
6917   2AEF FD 2E 0A 00   mov32 cb, $0000000a
6917   2AF3 00 00 
6918   2AF5 B0            cmp a, b
6919   2AF6 FD 72         sneq ; !=
6920   2AF8 E4            pop a
6921   2AF9             ; --- END RELATIONAL
6922   2AF9             ; --- START LOGICAL AND
6923   2AF9 D7            push a
6924   2AFA 11            mov a, b
6925   2AFB 3B 87 4E      mov d, _prog ; $prog
6926   2AFE 2A            mov b, [d]
6927   2AFF 38 00 00      mov c, 0
6928   2B02 74            mov d, b
6929   2B03 32            mov bl, [d]
6930   2B04 A7 00         mov bh, 0
6931   2B06 38 00 00      mov c, 0
6932   2B09             ; --- START RELATIONAL
6933   2B09 D7            push a
6934   2B0A 11            mov a, b
6935   2B0B FD 2E 00 00   mov32 cb, $00000000
6935   2B0F 00 00 
6936   2B11 B0            cmp a, b
6937   2B12 FD 72         sneq ; !=
6938   2B14 E4            pop a
6939   2B15             ; --- END RELATIONAL
6940   2B15 FD A7         sand a, b
6941   2B17 E4            pop a
6942   2B18             ; --- END LOGICAL AND
6943   2B18 C0 00 00      cmp b, 0
6944   2B1B C6 31 2B      je _while133_exit
6945   2B1E             _while133_block:
6946   2B1E             ; prog++; 
6947   2B1E                              
6948   2B1E 3B 87 4E      mov d, _prog ; $prog
6949   2B21 2A            mov b, [d]
6950   2B22 38 00 00      mov c, 0
6951   2B25 FD 77         inc b
6952   2B27 3B 87 4E      mov d, _prog ; $prog
6953   2B2A FD 43         mov [d], b
6954   2B2C FD 7D         dec b
6955   2B2E 0A DF 2A      jmp _while133_cond
6956   2B31             _while133_exit:
6957   2B31             ; break; 
6958   2B31 0A 65 2B      jmp _while131_exit ; while break
6959   2B34 0A 62 2B      jmp _if132_exit
6960   2B37             _if132_else:
6961   2B37             ; *t++ = *prog++; 
6962   2B37 FA FF FF      lea d, [bp + -1] ; $t
6963   2B3A 2A            mov b, [d]
6964   2B3B 38 00 00      mov c, 0
6965   2B3E FD 77         inc b
6966   2B40 FA FF FF      lea d, [bp + -1] ; $t
6967   2B43 FD 43         mov [d], b
6968   2B45 FD 7D         dec b
6969   2B47 D8            push b
6970   2B48                              
6971   2B48 3B 87 4E      mov d, _prog ; $prog
6972   2B4B 2A            mov b, [d]
6973   2B4C 38 00 00      mov c, 0
6974   2B4F FD 77         inc b
6975   2B51 3B 87 4E      mov d, _prog ; $prog
6976   2B54 FD 43         mov [d], b
6977   2B56 FD 7D         dec b
6978   2B58 74            mov d, b
6979   2B59 32            mov bl, [d]
6980   2B5A A7 00         mov bh, 0
6981   2B5C 38 00 00      mov c, 0
6982   2B5F E7            pop d
6983   2B60 FD 3E         mov [d], bl
6984   2B62             _if132_exit:
6985   2B62 0A 80 2A      jmp _while131_cond
6986   2B65             _while131_exit:
6987   2B65             ; *t = '\0'; 
6988   2B65 FA FF FF      lea d, [bp + -1] ; $t
6989   2B68 2A            mov b, [d]
6990   2B69 38 00 00      mov c, 0
6991   2B6C D8            push b
6992   2B6D                              
6993   2B6D FD 2E 00 00   mov32 cb, $00000000
6993   2B71 00 00 
6994   2B73 E7            pop d
6995   2B74 FD 3E         mov [d], bl
6996   2B76 F9            leave
6997   2B77 09            ret
6998   2B78             
6999   2B78             get:
7000   2B78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7001   2B7B             ; char *t; 
7002   2B7B 52 02 00      sub sp, 2
7003   2B7E             ; char temp_hex[64]; 
7004   2B7E 52 40 00      sub sp, 64
7005   2B81             ; char *p; 
7006   2B81 52 02 00      sub sp, 2
7007   2B84             ; *token = '\0'; 
7008   2B84 3B 89 4E      mov d, _token_data ; $token
7009   2B87 2D            mov b, d
7010   2B88 38 00 00      mov c, 0
7011   2B8B D8            push b
7012   2B8C                              
7013   2B8C FD 2E 00 00   mov32 cb, $00000000
7013   2B90 00 00 
7014   2B92 E7            pop d
7015   2B93 FD 3E         mov [d], bl
7016   2B95             ; tok = TOK_UNDEF; 
7017   2B95 3B 83 4E      mov d, _tok ; $tok
7018   2B98 DA            push d
7019   2B99                              
7020   2B99 FD 2E 00 00   mov32 cb, $0 ; enum element: TOK_UNDEF
7020   2B9D 00 00 
7021   2B9F E7            pop d
7022   2BA0 FD 43         mov [d], b
7023   2BA2             ; toktype = TYPE_UNDEF; 
7024   2BA2 3B 85 4E      mov d, _toktype ; $toktype
7025   2BA5 DA            push d
7026   2BA6                              
7027   2BA6 FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
7027   2BAA 00 00 
7028   2BAC E7            pop d
7029   2BAD FD 43         mov [d], b
7030   2BAF             ; t = token; 
7031   2BAF FA FF FF      lea d, [bp + -1] ; $t
7032   2BB2 DA            push d
7033   2BB3                              
7034   2BB3 3B 89 4E      mov d, _token_data ; $token
7035   2BB6 2D            mov b, d
7036   2BB7 38 00 00      mov c, 0
7037   2BBA E7            pop d
7038   2BBB FD 43         mov [d], b
7039   2BBD             ; do{ 
7040   2BBD             _do134_block:
7041   2BBD             ; while(is_space(*prog)) prog++; 
7042   2BBD             _while135_cond:
7043   2BBD                              
7044   2BBD             ; --- START FUNCTION CALL
7045   2BBD                              
7046   2BBD 3B 87 4E      mov d, _prog ; $prog
7047   2BC0 2A            mov b, [d]
7048   2BC1 38 00 00      mov c, 0
7049   2BC4 74            mov d, b
7050   2BC5 32            mov bl, [d]
7051   2BC6 A7 00         mov bh, 0
7052   2BC8 38 00 00      mov c, 0
7053   2BCB DD            push bl
7054   2BCC 07 C6 3E      call is_space
7055   2BCF 51 01 00      add sp, 1
7056   2BD2             ; --- END FUNCTION CALL
7057   2BD2 C0 00 00      cmp b, 0
7058   2BD5 C6 EB 2B      je _while135_exit
7059   2BD8             _while135_block:
7060   2BD8             ; prog++; 
7061   2BD8                              
7062   2BD8 3B 87 4E      mov d, _prog ; $prog
7063   2BDB 2A            mov b, [d]
7064   2BDC 38 00 00      mov c, 0
7065   2BDF FD 77         inc b
7066   2BE1 3B 87 4E      mov d, _prog ; $prog
7067   2BE4 FD 43         mov [d], b
7068   2BE6 FD 7D         dec b
7069   2BE8 0A BD 2B      jmp _while135_cond
7070   2BEB             _while135_exit:
7071   2BEB             ; if(*prog == ';'){ 
7072   2BEB             _if136_cond:
7073   2BEB                              
7074   2BEB 3B 87 4E      mov d, _prog ; $prog
7075   2BEE 2A            mov b, [d]
7076   2BEF 38 00 00      mov c, 0
7077   2BF2 74            mov d, b
7078   2BF3 32            mov bl, [d]
7079   2BF4 A7 00         mov bh, 0
7080   2BF6 38 00 00      mov c, 0
7081   2BF9             ; --- START RELATIONAL
7082   2BF9 D7            push a
7083   2BFA 11            mov a, b
7084   2BFB FD 2E 3B 00   mov32 cb, $0000003b
7084   2BFF 00 00 
7085   2C01 B0            cmp a, b
7086   2C02 FD 71         seq ; ==
7087   2C04 E4            pop a
7088   2C05             ; --- END RELATIONAL
7089   2C05 C0 00 00      cmp b, 0
7090   2C08 C6 74 2C      je _if136_exit
7091   2C0B             _if136_TRUE:
7092   2C0B             ; while(*prog != '\n') prog++; 
7093   2C0B             _while137_cond:
7094   2C0B                              
7095   2C0B 3B 87 4E      mov d, _prog ; $prog
7096   2C0E 2A            mov b, [d]
7097   2C0F 38 00 00      mov c, 0
7098   2C12 74            mov d, b
7099   2C13 32            mov bl, [d]
7100   2C14 A7 00         mov bh, 0
7101   2C16 38 00 00      mov c, 0
7102   2C19             ; --- START RELATIONAL
7103   2C19 D7            push a
7104   2C1A 11            mov a, b
7105   2C1B FD 2E 0A 00   mov32 cb, $0000000a
7105   2C1F 00 00 
7106   2C21 B0            cmp a, b
7107   2C22 FD 72         sneq ; !=
7108   2C24 E4            pop a
7109   2C25             ; --- END RELATIONAL
7110   2C25 C0 00 00      cmp b, 0
7111   2C28 C6 3E 2C      je _while137_exit
7112   2C2B             _while137_block:
7113   2C2B             ; prog++; 
7114   2C2B                              
7115   2C2B 3B 87 4E      mov d, _prog ; $prog
7116   2C2E 2A            mov b, [d]
7117   2C2F 38 00 00      mov c, 0
7118   2C32 FD 77         inc b
7119   2C34 3B 87 4E      mov d, _prog ; $prog
7120   2C37 FD 43         mov [d], b
7121   2C39 FD 7D         dec b
7122   2C3B 0A 0B 2C      jmp _while137_cond
7123   2C3E             _while137_exit:
7124   2C3E             ; if(*prog == '\n') prog++; 
7125   2C3E             _if138_cond:
7126   2C3E                              
7127   2C3E 3B 87 4E      mov d, _prog ; $prog
7128   2C41 2A            mov b, [d]
7129   2C42 38 00 00      mov c, 0
7130   2C45 74            mov d, b
7131   2C46 32            mov bl, [d]
7132   2C47 A7 00         mov bh, 0
7133   2C49 38 00 00      mov c, 0
7134   2C4C             ; --- START RELATIONAL
7135   2C4C D7            push a
7136   2C4D 11            mov a, b
7137   2C4E FD 2E 0A 00   mov32 cb, $0000000a
7137   2C52 00 00 
7138   2C54 B0            cmp a, b
7139   2C55 FD 71         seq ; ==
7140   2C57 E4            pop a
7141   2C58             ; --- END RELATIONAL
7142   2C58 C0 00 00      cmp b, 0
7143   2C5B C6 71 2C      je _if138_exit
7144   2C5E             _if138_TRUE:
7145   2C5E             ; prog++; 
7146   2C5E                              
7147   2C5E 3B 87 4E      mov d, _prog ; $prog
7148   2C61 2A            mov b, [d]
7149   2C62 38 00 00      mov c, 0
7150   2C65 FD 77         inc b
7151   2C67 3B 87 4E      mov d, _prog ; $prog
7152   2C6A FD 43         mov [d], b
7153   2C6C FD 7D         dec b
7154   2C6E 0A 71 2C      jmp _if138_exit
7155   2C71             _if138_exit:
7156   2C71 0A 74 2C      jmp _if136_exit
7157   2C74             _if136_exit:
7158   2C74             ; } while(is_space(*prog) || *prog == ';'); 
7159   2C74             _do134_cond:
7160   2C74                              
7161   2C74             ; --- START FUNCTION CALL
7162   2C74                              
7163   2C74 3B 87 4E      mov d, _prog ; $prog
7164   2C77 2A            mov b, [d]
7165   2C78 38 00 00      mov c, 0
7166   2C7B 74            mov d, b
7167   2C7C 32            mov bl, [d]
7168   2C7D A7 00         mov bh, 0
7169   2C7F 38 00 00      mov c, 0
7170   2C82 DD            push bl
7171   2C83 07 C6 3E      call is_space
7172   2C86 51 01 00      add sp, 1
7173   2C89             ; --- END FUNCTION CALL
7174   2C89             ; --- START LOGICAL OR
7175   2C89 D7            push a
7176   2C8A 11            mov a, b
7177   2C8B 3B 87 4E      mov d, _prog ; $prog
7178   2C8E 2A            mov b, [d]
7179   2C8F 38 00 00      mov c, 0
7180   2C92 74            mov d, b
7181   2C93 32            mov bl, [d]
7182   2C94 A7 00         mov bh, 0
7183   2C96 38 00 00      mov c, 0
7184   2C99             ; --- START RELATIONAL
7185   2C99 D7            push a
7186   2C9A 11            mov a, b
7187   2C9B FD 2E 3B 00   mov32 cb, $0000003b
7187   2C9F 00 00 
7188   2CA1 B0            cmp a, b
7189   2CA2 FD 71         seq ; ==
7190   2CA4 E4            pop a
7191   2CA5             ; --- END RELATIONAL
7192   2CA5 FD A8         sor a, b ; ||
7193   2CA7 E4            pop a
7194   2CA8             ; --- END LOGICAL OR
7195   2CA8 C0 01 00      cmp b, 1
7196   2CAB C6 BD 2B      je _do134_block
7197   2CAE             _do134_exit:
7198   2CAE             ; if(*prog == '\0'){ 
7199   2CAE             _if139_cond:
7200   2CAE                              
7201   2CAE 3B 87 4E      mov d, _prog ; $prog
7202   2CB1 2A            mov b, [d]
7203   2CB2 38 00 00      mov c, 0
7204   2CB5 74            mov d, b
7205   2CB6 32            mov bl, [d]
7206   2CB7 A7 00         mov bh, 0
7207   2CB9 38 00 00      mov c, 0
7208   2CBC             ; --- START RELATIONAL
7209   2CBC D7            push a
7210   2CBD 11            mov a, b
7211   2CBE FD 2E 00 00   mov32 cb, $00000000
7211   2CC2 00 00 
7212   2CC4 B0            cmp a, b
7213   2CC5 FD 71         seq ; ==
7214   2CC7 E4            pop a
7215   2CC8             ; --- END RELATIONAL
7216   2CC8 C0 00 00      cmp b, 0
7217   2CCB C6 E0 2C      je _if139_exit
7218   2CCE             _if139_TRUE:
7219   2CCE             ; toktype = END; 
7220   2CCE 3B 85 4E      mov d, _toktype ; $toktype
7221   2CD1 DA            push d
7222   2CD2                              
7223   2CD2 FD 2E 07 00   mov32 cb, $7 ; enum element: END
7223   2CD6 00 00 
7224   2CD8 E7            pop d
7225   2CD9 FD 43         mov [d], b
7226   2CDB             ; return; 
7227   2CDB F9            leave
7228   2CDC 09            ret
7229   2CDD 0A E0 2C      jmp _if139_exit
7230   2CE0             _if139_exit:
7231   2CE0             ; if(is_alpha(*prog)){ 
7232   2CE0             _if140_cond:
7233   2CE0                              
7234   2CE0             ; --- START FUNCTION CALL
7235   2CE0                              
7236   2CE0 3B 87 4E      mov d, _prog ; $prog
7237   2CE3 2A            mov b, [d]
7238   2CE4 38 00 00      mov c, 0
7239   2CE7 74            mov d, b
7240   2CE8 32            mov bl, [d]
7241   2CE9 A7 00         mov bh, 0
7242   2CEB 38 00 00      mov c, 0
7243   2CEE DD            push bl
7244   2CEF 07 2A 3F      call is_alpha
7245   2CF2 51 01 00      add sp, 1
7246   2CF5             ; --- END FUNCTION CALL
7247   2CF5 C0 00 00      cmp b, 0
7248   2CF8 C6 B8 2D      je _if140_else
7249   2CFB             _if140_TRUE:
7250   2CFB             ; while(is_alpha(*prog) || is_digit(*prog)){ 
7251   2CFB             _while141_cond:
7252   2CFB                              
7253   2CFB             ; --- START FUNCTION CALL
7254   2CFB                              
7255   2CFB 3B 87 4E      mov d, _prog ; $prog
7256   2CFE 2A            mov b, [d]
7257   2CFF 38 00 00      mov c, 0
7258   2D02 74            mov d, b
7259   2D03 32            mov bl, [d]
7260   2D04 A7 00         mov bh, 0
7261   2D06 38 00 00      mov c, 0
7262   2D09 DD            push bl
7263   2D0A 07 2A 3F      call is_alpha
7264   2D0D 51 01 00      add sp, 1
7265   2D10             ; --- END FUNCTION CALL
7266   2D10             ; --- START LOGICAL OR
7267   2D10 D7            push a
7268   2D11 11            mov a, b
7269   2D12             ; --- START FUNCTION CALL
7270   2D12                              
7271   2D12 3B 87 4E      mov d, _prog ; $prog
7272   2D15 2A            mov b, [d]
7273   2D16 38 00 00      mov c, 0
7274   2D19 74            mov d, b
7275   2D1A 32            mov bl, [d]
7276   2D1B A7 00         mov bh, 0
7277   2D1D 38 00 00      mov c, 0
7278   2D20 DD            push bl
7279   2D21 07 AA 3F      call is_digit
7280   2D24 51 01 00      add sp, 1
7281   2D27             ; --- END FUNCTION CALL
7282   2D27 FD A8         sor a, b ; ||
7283   2D29 E4            pop a
7284   2D2A             ; --- END LOGICAL OR
7285   2D2A C0 00 00      cmp b, 0
7286   2D2D C6 5E 2D      je _while141_exit
7287   2D30             _while141_block:
7288   2D30             ; *t++ = *prog++; 
7289   2D30 FA FF FF      lea d, [bp + -1] ; $t
7290   2D33 2A            mov b, [d]
7291   2D34 38 00 00      mov c, 0
7292   2D37 FD 77         inc b
7293   2D39 FA FF FF      lea d, [bp + -1] ; $t
7294   2D3C FD 43         mov [d], b
7295   2D3E FD 7D         dec b
7296   2D40 D8            push b
7297   2D41                              
7298   2D41 3B 87 4E      mov d, _prog ; $prog
7299   2D44 2A            mov b, [d]
7300   2D45 38 00 00      mov c, 0
7301   2D48 FD 77         inc b
7302   2D4A 3B 87 4E      mov d, _prog ; $prog
7303   2D4D FD 43         mov [d], b
7304   2D4F FD 7D         dec b
7305   2D51 74            mov d, b
7306   2D52 32            mov bl, [d]
7307   2D53 A7 00         mov bh, 0
7308   2D55 38 00 00      mov c, 0
7309   2D58 E7            pop d
7310   2D59 FD 3E         mov [d], bl
7311   2D5B 0A FB 2C      jmp _while141_cond
7312   2D5E             _while141_exit:
7313   2D5E             ; *t = '\0'; 
7314   2D5E FA FF FF      lea d, [bp + -1] ; $t
7315   2D61 2A            mov b, [d]
7316   2D62 38 00 00      mov c, 0
7317   2D65 D8            push b
7318   2D66                              
7319   2D66 FD 2E 00 00   mov32 cb, $00000000
7319   2D6A 00 00 
7320   2D6C E7            pop d
7321   2D6D FD 3E         mov [d], bl
7322   2D6F             ; if((tok = search_keyword(token)) != -1)  
7323   2D6F             _if142_cond:
7324   2D6F                              
7325   2D6F 3B 83 4E      mov d, _tok ; $tok
7326   2D72 DA            push d
7327   2D73                              
7328   2D73             ; --- START FUNCTION CALL
7329   2D73                              
7330   2D73 3B 89 4E      mov d, _token_data ; $token
7331   2D76 2D            mov b, d
7332   2D77 38 00 00      mov c, 0
7333   2D7A FD AB         swp b
7334   2D7C D8            push b
7335   2D7D 07 A6 3A      call search_keyword
7336   2D80 51 02 00      add sp, 2
7337   2D83             ; --- END FUNCTION CALL
7338   2D83 E7            pop d
7339   2D84 FD 43         mov [d], b
7340   2D86             ; --- START RELATIONAL
7341   2D86 D7            push a
7342   2D87 11            mov a, b
7343   2D88 FD 2E FF FF   mov32 cb, $ffffffff
7343   2D8C FF FF 
7344   2D8E B0            cmp a, b
7345   2D8F FD 72         sneq ; !=
7346   2D91 E4            pop a
7347   2D92             ; --- END RELATIONAL
7348   2D92 C0 00 00      cmp b, 0
7349   2D95 C6 A8 2D      je _if142_else
7350   2D98             _if142_TRUE:
7351   2D98             ; toktype = KEYWORD; 
7352   2D98 3B 85 4E      mov d, _toktype ; $toktype
7353   2D9B DA            push d
7354   2D9C                              
7355   2D9C FD 2E 01 00   mov32 cb, $1 ; enum element: KEYWORD
7355   2DA0 00 00 
7356   2DA2 E7            pop d
7357   2DA3 FD 43         mov [d], b
7358   2DA5 0A B5 2D      jmp _if142_exit
7359   2DA8             _if142_else:
7360   2DA8             ; toktype = IDENTIFIER; 
7361   2DA8 3B 85 4E      mov d, _toktype ; $toktype
7362   2DAB DA            push d
7363   2DAC                              
7364   2DAC FD 2E 06 00   mov32 cb, $6 ; enum element: IDENTIFIER
7364   2DB0 00 00 
7365   2DB2 E7            pop d
7366   2DB3 FD 43         mov [d], b
7367   2DB5             _if142_exit:
7368   2DB5 0A 20 36      jmp _if140_exit
7369   2DB8             _if140_else:
7370   2DB8             ; if(is_digit(*prog) || (*prog == '$' && is_hex_digit(*(prog+1)))){ 
7371   2DB8             _if143_cond:
7372   2DB8                              
7373   2DB8             ; --- START FUNCTION CALL
7374   2DB8                              
7375   2DB8 3B 87 4E      mov d, _prog ; $prog
7376   2DBB 2A            mov b, [d]
7377   2DBC 38 00 00      mov c, 0
7378   2DBF 74            mov d, b
7379   2DC0 32            mov bl, [d]
7380   2DC1 A7 00         mov bh, 0
7381   2DC3 38 00 00      mov c, 0
7382   2DC6 DD            push bl
7383   2DC7 07 AA 3F      call is_digit
7384   2DCA 51 01 00      add sp, 1
7385   2DCD             ; --- END FUNCTION CALL
7386   2DCD             ; --- START LOGICAL OR
7387   2DCD D7            push a
7388   2DCE 11            mov a, b
7389   2DCF                              
7390   2DCF 3B 87 4E      mov d, _prog ; $prog
7391   2DD2 2A            mov b, [d]
7392   2DD3 38 00 00      mov c, 0
7393   2DD6 74            mov d, b
7394   2DD7 32            mov bl, [d]
7395   2DD8 A7 00         mov bh, 0
7396   2DDA 38 00 00      mov c, 0
7397   2DDD             ; --- START RELATIONAL
7398   2DDD D7            push a
7399   2DDE 11            mov a, b
7400   2DDF FD 2E 24 00   mov32 cb, $00000024
7400   2DE3 00 00 
7401   2DE5 B0            cmp a, b
7402   2DE6 FD 71         seq ; ==
7403   2DE8 E4            pop a
7404   2DE9             ; --- END RELATIONAL
7405   2DE9             ; --- START LOGICAL AND
7406   2DE9 D7            push a
7407   2DEA 11            mov a, b
7408   2DEB             ; --- START FUNCTION CALL
7409   2DEB                              
7410   2DEB                              
7411   2DEB 3B 87 4E      mov d, _prog ; $prog
7412   2DEE 2A            mov b, [d]
7413   2DEF 38 00 00      mov c, 0
7414   2DF2             ; --- START TERMS
7415   2DF2 D7            push a
7416   2DF3 11            mov a, b
7417   2DF4 FD 2E 01 00   mov32 cb, $00000001
7417   2DF8 00 00 
7418   2DFA 56            add b, a
7419   2DFB E4            pop a
7420   2DFC             ; --- END TERMS
7421   2DFC 74            mov d, b
7422   2DFD 32            mov bl, [d]
7423   2DFE A7 00         mov bh, 0
7424   2E00 38 00 00      mov c, 0
7425   2E03 DD            push bl
7426   2E04 07 C1 29      call is_hex_digit
7427   2E07 51 01 00      add sp, 1
7428   2E0A             ; --- END FUNCTION CALL
7429   2E0A FD A7         sand a, b
7430   2E0C E4            pop a
7431   2E0D             ; --- END LOGICAL AND
7432   2E0D FD A8         sor a, b ; ||
7433   2E0F E4            pop a
7434   2E10             ; --- END LOGICAL OR
7435   2E10 C0 00 00      cmp b, 0
7436   2E13 C6 E6 2F      je _if143_else
7437   2E16             _if143_TRUE:
7438   2E16             ; if(*prog == '$' && is_hex_digit(*(prog+1))){ 
7439   2E16             _if144_cond:
7440   2E16                              
7441   2E16 3B 87 4E      mov d, _prog ; $prog
7442   2E19 2A            mov b, [d]
7443   2E1A 38 00 00      mov c, 0
7444   2E1D 74            mov d, b
7445   2E1E 32            mov bl, [d]
7446   2E1F A7 00         mov bh, 0
7447   2E21 38 00 00      mov c, 0
7448   2E24             ; --- START RELATIONAL
7449   2E24 D7            push a
7450   2E25 11            mov a, b
7451   2E26 FD 2E 24 00   mov32 cb, $00000024
7451   2E2A 00 00 
7452   2E2C B0            cmp a, b
7453   2E2D FD 71         seq ; ==
7454   2E2F E4            pop a
7455   2E30             ; --- END RELATIONAL
7456   2E30             ; --- START LOGICAL AND
7457   2E30 D7            push a
7458   2E31 11            mov a, b
7459   2E32             ; --- START FUNCTION CALL
7460   2E32                              
7461   2E32                              
7462   2E32 3B 87 4E      mov d, _prog ; $prog
7463   2E35 2A            mov b, [d]
7464   2E36 38 00 00      mov c, 0
7465   2E39             ; --- START TERMS
7466   2E39 D7            push a
7467   2E3A 11            mov a, b
7468   2E3B FD 2E 01 00   mov32 cb, $00000001
7468   2E3F 00 00 
7469   2E41 56            add b, a
7470   2E42 E4            pop a
7471   2E43             ; --- END TERMS
7472   2E43 74            mov d, b
7473   2E44 32            mov bl, [d]
7474   2E45 A7 00         mov bh, 0
7475   2E47 38 00 00      mov c, 0
7476   2E4A DD            push bl
7477   2E4B 07 C1 29      call is_hex_digit
7478   2E4E 51 01 00      add sp, 1
7479   2E51             ; --- END FUNCTION CALL
7480   2E51 FD A7         sand a, b
7481   2E53 E4            pop a
7482   2E54             ; --- END LOGICAL AND
7483   2E54 C0 00 00      cmp b, 0
7484   2E57 C6 65 2F      je _if144_else
7485   2E5A             _if144_TRUE:
7486   2E5A             ; *t++ = *prog++; 
7487   2E5A FA FF FF      lea d, [bp + -1] ; $t
7488   2E5D 2A            mov b, [d]
7489   2E5E 38 00 00      mov c, 0
7490   2E61 FD 77         inc b
7491   2E63 FA FF FF      lea d, [bp + -1] ; $t
7492   2E66 FD 43         mov [d], b
7493   2E68 FD 7D         dec b
7494   2E6A D8            push b
7495   2E6B                              
7496   2E6B 3B 87 4E      mov d, _prog ; $prog
7497   2E6E 2A            mov b, [d]
7498   2E6F 38 00 00      mov c, 0
7499   2E72 FD 77         inc b
7500   2E74 3B 87 4E      mov d, _prog ; $prog
7501   2E77 FD 43         mov [d], b
7502   2E79 FD 7D         dec b
7503   2E7B 74            mov d, b
7504   2E7C 32            mov bl, [d]
7505   2E7D A7 00         mov bh, 0
7506   2E7F 38 00 00      mov c, 0
7507   2E82 E7            pop d
7508   2E83 FD 3E         mov [d], bl
7509   2E85             ; p = temp_hex; 
7510   2E85 FA BD FF      lea d, [bp + -67] ; $p
7511   2E88 DA            push d
7512   2E89                              
7513   2E89 FA BF FF      lea d, [bp + -65] ; $temp_hex
7514   2E8C 2D            mov b, d
7515   2E8D 38 00 00      mov c, 0
7516   2E90 E7            pop d
7517   2E91 FD 43         mov [d], b
7518   2E93             ; *t++ = *p++ = *prog++; 
7519   2E93 FA FF FF      lea d, [bp + -1] ; $t
7520   2E96 2A            mov b, [d]
7521   2E97 38 00 00      mov c, 0
7522   2E9A FD 77         inc b
7523   2E9C FA FF FF      lea d, [bp + -1] ; $t
7524   2E9F FD 43         mov [d], b
7525   2EA1 FD 7D         dec b
7526   2EA3 D8            push b
7527   2EA4 FA BD FF      lea d, [bp + -67] ; $p
7528   2EA7 2A            mov b, [d]
7529   2EA8 38 00 00      mov c, 0
7530   2EAB FD 77         inc b
7531   2EAD FA BD FF      lea d, [bp + -67] ; $p
7532   2EB0 FD 43         mov [d], b
7533   2EB2 FD 7D         dec b
7534   2EB4 D8            push b
7535   2EB5                              
7536   2EB5 3B 87 4E      mov d, _prog ; $prog
7537   2EB8 2A            mov b, [d]
7538   2EB9 38 00 00      mov c, 0
7539   2EBC FD 77         inc b
7540   2EBE 3B 87 4E      mov d, _prog ; $prog
7541   2EC1 FD 43         mov [d], b
7542   2EC3 FD 7D         dec b
7543   2EC5 74            mov d, b
7544   2EC6 32            mov bl, [d]
7545   2EC7 A7 00         mov bh, 0
7546   2EC9 38 00 00      mov c, 0
7547   2ECC E7            pop d
7548   2ECD FD 3E         mov [d], bl
7549   2ECF E7            pop d
7550   2ED0 FD 3E         mov [d], bl
7551   2ED2             ; while(is_hex_digit(*prog)){ 
7552   2ED2             _while145_cond:
7553   2ED2                              
7554   2ED2             ; --- START FUNCTION CALL
7555   2ED2                              
7556   2ED2 3B 87 4E      mov d, _prog ; $prog
7557   2ED5 2A            mov b, [d]
7558   2ED6 38 00 00      mov c, 0
7559   2ED9 74            mov d, b
7560   2EDA 32            mov bl, [d]
7561   2EDB A7 00         mov bh, 0
7562   2EDD 38 00 00      mov c, 0
7563   2EE0 DD            push bl
7564   2EE1 07 C1 29      call is_hex_digit
7565   2EE4 51 01 00      add sp, 1
7566   2EE7             ; --- END FUNCTION CALL
7567   2EE7 C0 00 00      cmp b, 0
7568   2EEA C6 2F 2F      je _while145_exit
7569   2EED             _while145_block:
7570   2EED             ; *t++ = *p++ = *prog++; 
7571   2EED FA FF FF      lea d, [bp + -1] ; $t
7572   2EF0 2A            mov b, [d]
7573   2EF1 38 00 00      mov c, 0
7574   2EF4 FD 77         inc b
7575   2EF6 FA FF FF      lea d, [bp + -1] ; $t
7576   2EF9 FD 43         mov [d], b
7577   2EFB FD 7D         dec b
7578   2EFD D8            push b
7579   2EFE FA BD FF      lea d, [bp + -67] ; $p
7580   2F01 2A            mov b, [d]
7581   2F02 38 00 00      mov c, 0
7582   2F05 FD 77         inc b
7583   2F07 FA BD FF      lea d, [bp + -67] ; $p
7584   2F0A FD 43         mov [d], b
7585   2F0C FD 7D         dec b
7586   2F0E D8            push b
7587   2F0F                              
7588   2F0F 3B 87 4E      mov d, _prog ; $prog
7589   2F12 2A            mov b, [d]
7590   2F13 38 00 00      mov c, 0
7591   2F16 FD 77         inc b
7592   2F18 3B 87 4E      mov d, _prog ; $prog
7593   2F1B FD 43         mov [d], b
7594   2F1D FD 7D         dec b
7595   2F1F 74            mov d, b
7596   2F20 32            mov bl, [d]
7597   2F21 A7 00         mov bh, 0
7598   2F23 38 00 00      mov c, 0
7599   2F26 E7            pop d
7600   2F27 FD 3E         mov [d], bl
7601   2F29 E7            pop d
7602   2F2A FD 3E         mov [d], bl
7603   2F2C 0A D2 2E      jmp _while145_cond
7604   2F2F             _while145_exit:
7605   2F2F             ; *t = *p = '\0'; 
7606   2F2F FA FF FF      lea d, [bp + -1] ; $t
7607   2F32 2A            mov b, [d]
7608   2F33 38 00 00      mov c, 0
7609   2F36 D8            push b
7610   2F37 FA BD FF      lea d, [bp + -67] ; $p
7611   2F3A 2A            mov b, [d]
7612   2F3B 38 00 00      mov c, 0
7613   2F3E D8            push b
7614   2F3F                              
7615   2F3F FD 2E 00 00   mov32 cb, $00000000
7615   2F43 00 00 
7616   2F45 E7            pop d
7617   2F46 FD 3E         mov [d], bl
7618   2F48 E7            pop d
7619   2F49 FD 3E         mov [d], bl
7620   2F4B             ; int_const = hex_to_int(temp_hex); 
7621   2F4B 3B C9 4F      mov d, _int_const ; $int_const
7622   2F4E DA            push d
7623   2F4F                              
7624   2F4F             ; --- START FUNCTION CALL
7625   2F4F                              
7626   2F4F FA BF FF      lea d, [bp + -65] ; $temp_hex
7627   2F52 2D            mov b, d
7628   2F53 38 00 00      mov c, 0
7629   2F56 FD AB         swp b
7630   2F58 D8            push b
7631   2F59 07 55 3B      call hex_to_int
7632   2F5C 51 02 00      add sp, 2
7633   2F5F             ; --- END FUNCTION CALL
7634   2F5F E7            pop d
7635   2F60 FD 43         mov [d], b
7636   2F62 0A D6 2F      jmp _if144_exit
7637   2F65             _if144_else:
7638   2F65             ; while(is_digit(*prog)){ 
7639   2F65             _while146_cond:
7640   2F65                              
7641   2F65             ; --- START FUNCTION CALL
7642   2F65                              
7643   2F65 3B 87 4E      mov d, _prog ; $prog
7644   2F68 2A            mov b, [d]
7645   2F69 38 00 00      mov c, 0
7646   2F6C 74            mov d, b
7647   2F6D 32            mov bl, [d]
7648   2F6E A7 00         mov bh, 0
7649   2F70 38 00 00      mov c, 0
7650   2F73 DD            push bl
7651   2F74 07 AA 3F      call is_digit
7652   2F77 51 01 00      add sp, 1
7653   2F7A             ; --- END FUNCTION CALL
7654   2F7A C0 00 00      cmp b, 0
7655   2F7D C6 AE 2F      je _while146_exit
7656   2F80             _while146_block:
7657   2F80             ; *t++ = *prog++; 
7658   2F80 FA FF FF      lea d, [bp + -1] ; $t
7659   2F83 2A            mov b, [d]
7660   2F84 38 00 00      mov c, 0
7661   2F87 FD 77         inc b
7662   2F89 FA FF FF      lea d, [bp + -1] ; $t
7663   2F8C FD 43         mov [d], b
7664   2F8E FD 7D         dec b
7665   2F90 D8            push b
7666   2F91                              
7667   2F91 3B 87 4E      mov d, _prog ; $prog
7668   2F94 2A            mov b, [d]
7669   2F95 38 00 00      mov c, 0
7670   2F98 FD 77         inc b
7671   2F9A 3B 87 4E      mov d, _prog ; $prog
7672   2F9D FD 43         mov [d], b
7673   2F9F FD 7D         dec b
7674   2FA1 74            mov d, b
7675   2FA2 32            mov bl, [d]
7676   2FA3 A7 00         mov bh, 0
7677   2FA5 38 00 00      mov c, 0
7678   2FA8 E7            pop d
7679   2FA9 FD 3E         mov [d], bl
7680   2FAB 0A 65 2F      jmp _while146_cond
7681   2FAE             _while146_exit:
7682   2FAE             ; *t = '\0'; 
7683   2FAE FA FF FF      lea d, [bp + -1] ; $t
7684   2FB1 2A            mov b, [d]
7685   2FB2 38 00 00      mov c, 0
7686   2FB5 D8            push b
7687   2FB6                              
7688   2FB6 FD 2E 00 00   mov32 cb, $00000000
7688   2FBA 00 00 
7689   2FBC E7            pop d
7690   2FBD FD 3E         mov [d], bl
7691   2FBF             ; int_const = atoi(token); 
7692   2FBF 3B C9 4F      mov d, _int_const ; $int_const
7693   2FC2 DA            push d
7694   2FC3                              
7695   2FC3             ; --- START FUNCTION CALL
7696   2FC3                              
7697   2FC3 3B 89 4E      mov d, _token_data ; $token
7698   2FC6 2D            mov b, d
7699   2FC7 38 00 00      mov c, 0
7700   2FCA FD AB         swp b
7701   2FCC D8            push b
7702   2FCD 07 BD 40      call atoi
7703   2FD0 51 02 00      add sp, 2
7704   2FD3             ; --- END FUNCTION CALL
7705   2FD3 E7            pop d
7706   2FD4 FD 43         mov [d], b
7707   2FD6             _if144_exit:
7708   2FD6             ; toktype = INTEGER_CONST; 
7709   2FD6 3B 85 4E      mov d, _toktype ; $toktype
7710   2FD9 DA            push d
7711   2FDA                              
7712   2FDA FD 2E 05 00   mov32 cb, $5 ; enum element: INTEGER_CONST
7712   2FDE 00 00 
7713   2FE0 E7            pop d
7714   2FE1 FD 43         mov [d], b
7715   2FE3 0A 20 36      jmp _if143_exit
7716   2FE6             _if143_else:
7717   2FE6             ; if(*prog == '\''){ 
7718   2FE6             _if147_cond:
7719   2FE6                              
7720   2FE6 3B 87 4E      mov d, _prog ; $prog
7721   2FE9 2A            mov b, [d]
7722   2FEA 38 00 00      mov c, 0
7723   2FED 74            mov d, b
7724   2FEE 32            mov bl, [d]
7725   2FEF A7 00         mov bh, 0
7726   2FF1 38 00 00      mov c, 0
7727   2FF4             ; --- START RELATIONAL
7728   2FF4 D7            push a
7729   2FF5 11            mov a, b
7730   2FF6 FD 2E 27 00   mov32 cb, $00000027
7730   2FFA 00 00 
7731   2FFC B0            cmp a, b
7732   2FFD FD 71         seq ; ==
7733   2FFF E4            pop a
7734   3000             ; --- END RELATIONAL
7735   3000 C0 00 00      cmp b, 0
7736   3003 C6 50 31      je _if147_else
7737   3006             _if147_TRUE:
7738   3006             ; *t++ = '\''; 
7739   3006 FA FF FF      lea d, [bp + -1] ; $t
7740   3009 2A            mov b, [d]
7741   300A 38 00 00      mov c, 0
7742   300D FD 77         inc b
7743   300F FA FF FF      lea d, [bp + -1] ; $t
7744   3012 FD 43         mov [d], b
7745   3014 FD 7D         dec b
7746   3016 D8            push b
7747   3017                              
7748   3017 FD 2E 27 00   mov32 cb, $00000027
7748   301B 00 00 
7749   301D E7            pop d
7750   301E FD 3E         mov [d], bl
7751   3020             ; prog++; 
7752   3020                              
7753   3020 3B 87 4E      mov d, _prog ; $prog
7754   3023 2A            mov b, [d]
7755   3024 38 00 00      mov c, 0
7756   3027 FD 77         inc b
7757   3029 3B 87 4E      mov d, _prog ; $prog
7758   302C FD 43         mov [d], b
7759   302E FD 7D         dec b
7760   3030             ; if(*prog == '\\'){ 
7761   3030             _if148_cond:
7762   3030                              
7763   3030 3B 87 4E      mov d, _prog ; $prog
7764   3033 2A            mov b, [d]
7765   3034 38 00 00      mov c, 0
7766   3037 74            mov d, b
7767   3038 32            mov bl, [d]
7768   3039 A7 00         mov bh, 0
7769   303B 38 00 00      mov c, 0
7770   303E             ; --- START RELATIONAL
7771   303E D7            push a
7772   303F 11            mov a, b
7773   3040 FD 2E 5C 00   mov32 cb, $0000005c
7773   3044 00 00 
7774   3046 B0            cmp a, b
7775   3047 FD 71         seq ; ==
7776   3049 E4            pop a
7777   304A             ; --- END RELATIONAL
7778   304A C0 00 00      cmp b, 0
7779   304D C6 A8 30      je _if148_else
7780   3050             _if148_TRUE:
7781   3050             ; *t++ = '\\'; 
7782   3050 FA FF FF      lea d, [bp + -1] ; $t
7783   3053 2A            mov b, [d]
7784   3054 38 00 00      mov c, 0
7785   3057 FD 77         inc b
7786   3059 FA FF FF      lea d, [bp + -1] ; $t
7787   305C FD 43         mov [d], b
7788   305E FD 7D         dec b
7789   3060 D8            push b
7790   3061                              
7791   3061 FD 2E 5C 00   mov32 cb, $0000005c
7791   3065 00 00 
7792   3067 E7            pop d
7793   3068 FD 3E         mov [d], bl
7794   306A             ; prog++; 
7795   306A                              
7796   306A 3B 87 4E      mov d, _prog ; $prog
7797   306D 2A            mov b, [d]
7798   306E 38 00 00      mov c, 0
7799   3071 FD 77         inc b
7800   3073 3B 87 4E      mov d, _prog ; $prog
7801   3076 FD 43         mov [d], b
7802   3078 FD 7D         dec b
7803   307A             ; *t++ = *prog++; 
7804   307A FA FF FF      lea d, [bp + -1] ; $t
7805   307D 2A            mov b, [d]
7806   307E 38 00 00      mov c, 0
7807   3081 FD 77         inc b
7808   3083 FA FF FF      lea d, [bp + -1] ; $t
7809   3086 FD 43         mov [d], b
7810   3088 FD 7D         dec b
7811   308A D8            push b
7812   308B                              
7813   308B 3B 87 4E      mov d, _prog ; $prog
7814   308E 2A            mov b, [d]
7815   308F 38 00 00      mov c, 0
7816   3092 FD 77         inc b
7817   3094 3B 87 4E      mov d, _prog ; $prog
7818   3097 FD 43         mov [d], b
7819   3099 FD 7D         dec b
7820   309B 74            mov d, b
7821   309C 32            mov bl, [d]
7822   309D A7 00         mov bh, 0
7823   309F 38 00 00      mov c, 0
7824   30A2 E7            pop d
7825   30A3 FD 3E         mov [d], bl
7826   30A5 0A D3 30      jmp _if148_exit
7827   30A8             _if148_else:
7828   30A8             ; *t++ = *prog++; 
7829   30A8 FA FF FF      lea d, [bp + -1] ; $t
7830   30AB 2A            mov b, [d]
7831   30AC 38 00 00      mov c, 0
7832   30AF FD 77         inc b
7833   30B1 FA FF FF      lea d, [bp + -1] ; $t
7834   30B4 FD 43         mov [d], b
7835   30B6 FD 7D         dec b
7836   30B8 D8            push b
7837   30B9                              
7838   30B9 3B 87 4E      mov d, _prog ; $prog
7839   30BC 2A            mov b, [d]
7840   30BD 38 00 00      mov c, 0
7841   30C0 FD 77         inc b
7842   30C2 3B 87 4E      mov d, _prog ; $prog
7843   30C5 FD 43         mov [d], b
7844   30C7 FD 7D         dec b
7845   30C9 74            mov d, b
7846   30CA 32            mov bl, [d]
7847   30CB A7 00         mov bh, 0
7848   30CD 38 00 00      mov c, 0
7849   30D0 E7            pop d
7850   30D1 FD 3E         mov [d], bl
7851   30D3             _if148_exit:
7852   30D3             ; if(*prog != '\''){ 
7853   30D3             _if149_cond:
7854   30D3                              
7855   30D3 3B 87 4E      mov d, _prog ; $prog
7856   30D6 2A            mov b, [d]
7857   30D7 38 00 00      mov c, 0
7858   30DA 74            mov d, b
7859   30DB 32            mov bl, [d]
7860   30DC A7 00         mov bh, 0
7861   30DE 38 00 00      mov c, 0
7862   30E1             ; --- START RELATIONAL
7863   30E1 D7            push a
7864   30E2 11            mov a, b
7865   30E3 FD 2E 27 00   mov32 cb, $00000027
7865   30E7 00 00 
7866   30E9 B0            cmp a, b
7867   30EA FD 72         sneq ; !=
7868   30EC E4            pop a
7869   30ED             ; --- END RELATIONAL
7870   30ED C0 00 00      cmp b, 0
7871   30F0 C6 02 31      je _if149_exit
7872   30F3             _if149_TRUE:
7873   30F3             ; error("Closing single quotes expected."); 
7874   30F3                              
7875   30F3             ; --- START FUNCTION CALL
7876   30F3                              
7877   30F3 26 F7 52      mov b, _s73 ; "Closing single quotes expected."
7878   30F6 FD AB         swp b
7879   30F8 D8            push b
7880   30F9 07 82 39      call error
7881   30FC 51 02 00      add sp, 2
7882   30FF             ; --- END FUNCTION CALL
7883   30FF 0A 02 31      jmp _if149_exit
7884   3102             _if149_exit:
7885   3102             ; *t++ = '\''; 
7886   3102 FA FF FF      lea d, [bp + -1] ; $t
7887   3105 2A            mov b, [d]
7888   3106 38 00 00      mov c, 0
7889   3109 FD 77         inc b
7890   310B FA FF FF      lea d, [bp + -1] ; $t
7891   310E FD 43         mov [d], b
7892   3110 FD 7D         dec b
7893   3112 D8            push b
7894   3113                              
7895   3113 FD 2E 27 00   mov32 cb, $00000027
7895   3117 00 00 
7896   3119 E7            pop d
7897   311A FD 3E         mov [d], bl
7898   311C             ; prog++; 
7899   311C                              
7900   311C 3B 87 4E      mov d, _prog ; $prog
7901   311F 2A            mov b, [d]
7902   3120 38 00 00      mov c, 0
7903   3123 FD 77         inc b
7904   3125 3B 87 4E      mov d, _prog ; $prog
7905   3128 FD 43         mov [d], b
7906   312A FD 7D         dec b
7907   312C             ; toktype = CHAR_CONST; 
7908   312C 3B 85 4E      mov d, _toktype ; $toktype
7909   312F DA            push d
7910   3130                              
7911   3130 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
7911   3134 00 00 
7912   3136 E7            pop d
7913   3137 FD 43         mov [d], b
7914   3139             ; *t = '\0'; 
7915   3139 FA FF FF      lea d, [bp + -1] ; $t
7916   313C 2A            mov b, [d]
7917   313D 38 00 00      mov c, 0
7918   3140 D8            push b
7919   3141                              
7920   3141 FD 2E 00 00   mov32 cb, $00000000
7920   3145 00 00 
7921   3147 E7            pop d
7922   3148 FD 3E         mov [d], bl
7923   314A             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
7924   314A                              
7925   314A             ; --- START FUNCTION CALL
7926   314A 07 B8 36      call convert_constant
7927   314D 0A 20 36      jmp _if147_exit
7928   3150             _if147_else:
7929   3150             ; if(*prog == '\"'){ 
7930   3150             _if150_cond:
7931   3150                              
7932   3150 3B 87 4E      mov d, _prog ; $prog
7933   3153 2A            mov b, [d]
7934   3154 38 00 00      mov c, 0
7935   3157 74            mov d, b
7936   3158 32            mov bl, [d]
7937   3159 A7 00         mov bh, 0
7938   315B 38 00 00      mov c, 0
7939   315E             ; --- START RELATIONAL
7940   315E D7            push a
7941   315F 11            mov a, b
7942   3160 FD 2E 22 00   mov32 cb, $00000022
7942   3164 00 00 
7943   3166 B0            cmp a, b
7944   3167 FD 71         seq ; ==
7945   3169 E4            pop a
7946   316A             ; --- END RELATIONAL
7947   316A C0 00 00      cmp b, 0
7948   316D C6 78 32      je _if150_else
7949   3170             _if150_TRUE:
7950   3170             ; *t++ = '\"'; 
7951   3170 FA FF FF      lea d, [bp + -1] ; $t
7952   3173 2A            mov b, [d]
7953   3174 38 00 00      mov c, 0
7954   3177 FD 77         inc b
7955   3179 FA FF FF      lea d, [bp + -1] ; $t
7956   317C FD 43         mov [d], b
7957   317E FD 7D         dec b
7958   3180 D8            push b
7959   3181                              
7960   3181 FD 2E 22 00   mov32 cb, $00000022
7960   3185 00 00 
7961   3187 E7            pop d
7962   3188 FD 3E         mov [d], bl
7963   318A             ; prog++; 
7964   318A                              
7965   318A 3B 87 4E      mov d, _prog ; $prog
7966   318D 2A            mov b, [d]
7967   318E 38 00 00      mov c, 0
7968   3191 FD 77         inc b
7969   3193 3B 87 4E      mov d, _prog ; $prog
7970   3196 FD 43         mov [d], b
7971   3198 FD 7D         dec b
7972   319A             ; while(*prog != '\"' && *prog){ 
7973   319A             _while151_cond:
7974   319A                              
7975   319A 3B 87 4E      mov d, _prog ; $prog
7976   319D 2A            mov b, [d]
7977   319E 38 00 00      mov c, 0
7978   31A1 74            mov d, b
7979   31A2 32            mov bl, [d]
7980   31A3 A7 00         mov bh, 0
7981   31A5 38 00 00      mov c, 0
7982   31A8             ; --- START RELATIONAL
7983   31A8 D7            push a
7984   31A9 11            mov a, b
7985   31AA FD 2E 22 00   mov32 cb, $00000022
7985   31AE 00 00 
7986   31B0 B0            cmp a, b
7987   31B1 FD 72         sneq ; !=
7988   31B3 E4            pop a
7989   31B4             ; --- END RELATIONAL
7990   31B4             ; --- START LOGICAL AND
7991   31B4 D7            push a
7992   31B5 11            mov a, b
7993   31B6 3B 87 4E      mov d, _prog ; $prog
7994   31B9 2A            mov b, [d]
7995   31BA 38 00 00      mov c, 0
7996   31BD 74            mov d, b
7997   31BE 32            mov bl, [d]
7998   31BF A7 00         mov bh, 0
7999   31C1 38 00 00      mov c, 0
8000   31C4 FD A7         sand a, b
8001   31C6 E4            pop a
8002   31C7             ; --- END LOGICAL AND
8003   31C7 C0 00 00      cmp b, 0
8004   31CA C6 FB 31      je _while151_exit
8005   31CD             _while151_block:
8006   31CD             ; *t++ = *prog++; 
8007   31CD FA FF FF      lea d, [bp + -1] ; $t
8008   31D0 2A            mov b, [d]
8009   31D1 38 00 00      mov c, 0
8010   31D4 FD 77         inc b
8011   31D6 FA FF FF      lea d, [bp + -1] ; $t
8012   31D9 FD 43         mov [d], b
8013   31DB FD 7D         dec b
8014   31DD D8            push b
8015   31DE                              
8016   31DE 3B 87 4E      mov d, _prog ; $prog
8017   31E1 2A            mov b, [d]
8018   31E2 38 00 00      mov c, 0
8019   31E5 FD 77         inc b
8020   31E7 3B 87 4E      mov d, _prog ; $prog
8021   31EA FD 43         mov [d], b
8022   31EC FD 7D         dec b
8023   31EE 74            mov d, b
8024   31EF 32            mov bl, [d]
8025   31F0 A7 00         mov bh, 0
8026   31F2 38 00 00      mov c, 0
8027   31F5 E7            pop d
8028   31F6 FD 3E         mov [d], bl
8029   31F8 0A 9A 31      jmp _while151_cond
8030   31FB             _while151_exit:
8031   31FB             ; if(*prog != '\"') error("Double quotes expected"); 
8032   31FB             _if152_cond:
8033   31FB                              
8034   31FB 3B 87 4E      mov d, _prog ; $prog
8035   31FE 2A            mov b, [d]
8036   31FF 38 00 00      mov c, 0
8037   3202 74            mov d, b
8038   3203 32            mov bl, [d]
8039   3204 A7 00         mov bh, 0
8040   3206 38 00 00      mov c, 0
8041   3209             ; --- START RELATIONAL
8042   3209 D7            push a
8043   320A 11            mov a, b
8044   320B FD 2E 22 00   mov32 cb, $00000022
8044   320F 00 00 
8045   3211 B0            cmp a, b
8046   3212 FD 72         sneq ; !=
8047   3214 E4            pop a
8048   3215             ; --- END RELATIONAL
8049   3215 C0 00 00      cmp b, 0
8050   3218 C6 2A 32      je _if152_exit
8051   321B             _if152_TRUE:
8052   321B             ; error("Double quotes expected"); 
8053   321B                              
8054   321B             ; --- START FUNCTION CALL
8055   321B                              
8056   321B 26 17 53      mov b, _s74 ; "Double quotes expected"
8057   321E FD AB         swp b
8058   3220 D8            push b
8059   3221 07 82 39      call error
8060   3224 51 02 00      add sp, 2
8061   3227             ; --- END FUNCTION CALL
8062   3227 0A 2A 32      jmp _if152_exit
8063   322A             _if152_exit:
8064   322A             ; *t++ = '\"'; 
8065   322A FA FF FF      lea d, [bp + -1] ; $t
8066   322D 2A            mov b, [d]
8067   322E 38 00 00      mov c, 0
8068   3231 FD 77         inc b
8069   3233 FA FF FF      lea d, [bp + -1] ; $t
8070   3236 FD 43         mov [d], b
8071   3238 FD 7D         dec b
8072   323A D8            push b
8073   323B                              
8074   323B FD 2E 22 00   mov32 cb, $00000022
8074   323F 00 00 
8075   3241 E7            pop d
8076   3242 FD 3E         mov [d], bl
8077   3244             ; prog++; 
8078   3244                              
8079   3244 3B 87 4E      mov d, _prog ; $prog
8080   3247 2A            mov b, [d]
8081   3248 38 00 00      mov c, 0
8082   324B FD 77         inc b
8083   324D 3B 87 4E      mov d, _prog ; $prog
8084   3250 FD 43         mov [d], b
8085   3252 FD 7D         dec b
8086   3254             ; toktype = STRING_CONST; 
8087   3254 3B 85 4E      mov d, _toktype ; $toktype
8088   3257 DA            push d
8089   3258                              
8090   3258 FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
8090   325C 00 00 
8091   325E E7            pop d
8092   325F FD 43         mov [d], b
8093   3261             ; *t = '\0'; 
8094   3261 FA FF FF      lea d, [bp + -1] ; $t
8095   3264 2A            mov b, [d]
8096   3265 38 00 00      mov c, 0
8097   3268 D8            push b
8098   3269                              
8099   3269 FD 2E 00 00   mov32 cb, $00000000
8099   326D 00 00 
8100   326F E7            pop d
8101   3270 FD 3E         mov [d], bl
8102   3272             ; convert_constant(); // converts this string token with quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
8103   3272                              
8104   3272             ; --- START FUNCTION CALL
8105   3272 07 B8 36      call convert_constant
8106   3275 0A 20 36      jmp _if150_exit
8107   3278             _if150_else:
8108   3278             ; if(*prog == '['){ 
8109   3278             _if153_cond:
8110   3278                              
8111   3278 3B 87 4E      mov d, _prog ; $prog
8112   327B 2A            mov b, [d]
8113   327C 38 00 00      mov c, 0
8114   327F 74            mov d, b
8115   3280 32            mov bl, [d]
8116   3281 A7 00         mov bh, 0
8117   3283 38 00 00      mov c, 0
8118   3286             ; --- START RELATIONAL
8119   3286 D7            push a
8120   3287 11            mov a, b
8121   3288 FD 2E 5B 00   mov32 cb, $0000005b
8121   328C 00 00 
8122   328E B0            cmp a, b
8123   328F FD 71         seq ; ==
8124   3291 E4            pop a
8125   3292             ; --- END RELATIONAL
8126   3292 C0 00 00      cmp b, 0
8127   3295 C6 E0 32      je _if153_else
8128   3298             _if153_TRUE:
8129   3298             ; *t++ = *prog++; 
8130   3298 FA FF FF      lea d, [bp + -1] ; $t
8131   329B 2A            mov b, [d]
8132   329C 38 00 00      mov c, 0
8133   329F FD 77         inc b
8134   32A1 FA FF FF      lea d, [bp + -1] ; $t
8135   32A4 FD 43         mov [d], b
8136   32A6 FD 7D         dec b
8137   32A8 D8            push b
8138   32A9                              
8139   32A9 3B 87 4E      mov d, _prog ; $prog
8140   32AC 2A            mov b, [d]
8141   32AD 38 00 00      mov c, 0
8142   32B0 FD 77         inc b
8143   32B2 3B 87 4E      mov d, _prog ; $prog
8144   32B5 FD 43         mov [d], b
8145   32B7 FD 7D         dec b
8146   32B9 74            mov d, b
8147   32BA 32            mov bl, [d]
8148   32BB A7 00         mov bh, 0
8149   32BD 38 00 00      mov c, 0
8150   32C0 E7            pop d
8151   32C1 FD 3E         mov [d], bl
8152   32C3             ; tok = OPENING_BRACKET; 
8153   32C3 3B 83 4E      mov d, _tok ; $tok
8154   32C6 DA            push d
8155   32C7                              
8156   32C7 FD 2E 0B 00   mov32 cb, $b ; enum element: OPENING_BRACKET
8156   32CB 00 00 
8157   32CD E7            pop d
8158   32CE FD 43         mov [d], b
8159   32D0             ; toktype = DELIMITER;   
8160   32D0 3B 85 4E      mov d, _toktype ; $toktype
8161   32D3 DA            push d
8162   32D4                              
8163   32D4 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8163   32D8 00 00 
8164   32DA E7            pop d
8165   32DB FD 43         mov [d], b
8166   32DD 0A 20 36      jmp _if153_exit
8167   32E0             _if153_else:
8168   32E0             ; if(*prog == ']'){ 
8169   32E0             _if154_cond:
8170   32E0                              
8171   32E0 3B 87 4E      mov d, _prog ; $prog
8172   32E3 2A            mov b, [d]
8173   32E4 38 00 00      mov c, 0
8174   32E7 74            mov d, b
8175   32E8 32            mov bl, [d]
8176   32E9 A7 00         mov bh, 0
8177   32EB 38 00 00      mov c, 0
8178   32EE             ; --- START RELATIONAL
8179   32EE D7            push a
8180   32EF 11            mov a, b
8181   32F0 FD 2E 5D 00   mov32 cb, $0000005d
8181   32F4 00 00 
8182   32F6 B0            cmp a, b
8183   32F7 FD 71         seq ; ==
8184   32F9 E4            pop a
8185   32FA             ; --- END RELATIONAL
8186   32FA C0 00 00      cmp b, 0
8187   32FD C6 48 33      je _if154_else
8188   3300             _if154_TRUE:
8189   3300             ; *t++ = *prog++; 
8190   3300 FA FF FF      lea d, [bp + -1] ; $t
8191   3303 2A            mov b, [d]
8192   3304 38 00 00      mov c, 0
8193   3307 FD 77         inc b
8194   3309 FA FF FF      lea d, [bp + -1] ; $t
8195   330C FD 43         mov [d], b
8196   330E FD 7D         dec b
8197   3310 D8            push b
8198   3311                              
8199   3311 3B 87 4E      mov d, _prog ; $prog
8200   3314 2A            mov b, [d]
8201   3315 38 00 00      mov c, 0
8202   3318 FD 77         inc b
8203   331A 3B 87 4E      mov d, _prog ; $prog
8204   331D FD 43         mov [d], b
8205   331F FD 7D         dec b
8206   3321 74            mov d, b
8207   3322 32            mov bl, [d]
8208   3323 A7 00         mov bh, 0
8209   3325 38 00 00      mov c, 0
8210   3328 E7            pop d
8211   3329 FD 3E         mov [d], bl
8212   332B             ; tok = CLOSING_BRACKET; 
8213   332B 3B 83 4E      mov d, _tok ; $tok
8214   332E DA            push d
8215   332F                              
8216   332F FD 2E 0C 00   mov32 cb, $c ; enum element: CLOSING_BRACKET
8216   3333 00 00 
8217   3335 E7            pop d
8218   3336 FD 43         mov [d], b
8219   3338             ; toktype = DELIMITER;   
8220   3338 3B 85 4E      mov d, _toktype ; $toktype
8221   333B DA            push d
8222   333C                              
8223   333C FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8223   3340 00 00 
8224   3342 E7            pop d
8225   3343 FD 43         mov [d], b
8226   3345 0A 20 36      jmp _if154_exit
8227   3348             _if154_else:
8228   3348             ; if(*prog == '+'){ 
8229   3348             _if155_cond:
8230   3348                              
8231   3348 3B 87 4E      mov d, _prog ; $prog
8232   334B 2A            mov b, [d]
8233   334C 38 00 00      mov c, 0
8234   334F 74            mov d, b
8235   3350 32            mov bl, [d]
8236   3351 A7 00         mov bh, 0
8237   3353 38 00 00      mov c, 0
8238   3356             ; --- START RELATIONAL
8239   3356 D7            push a
8240   3357 11            mov a, b
8241   3358 FD 2E 2B 00   mov32 cb, $0000002b
8241   335C 00 00 
8242   335E B0            cmp a, b
8243   335F FD 71         seq ; ==
8244   3361 E4            pop a
8245   3362             ; --- END RELATIONAL
8246   3362 C0 00 00      cmp b, 0
8247   3365 C6 B0 33      je _if155_else
8248   3368             _if155_TRUE:
8249   3368             ; *t++ = *prog++; 
8250   3368 FA FF FF      lea d, [bp + -1] ; $t
8251   336B 2A            mov b, [d]
8252   336C 38 00 00      mov c, 0
8253   336F FD 77         inc b
8254   3371 FA FF FF      lea d, [bp + -1] ; $t
8255   3374 FD 43         mov [d], b
8256   3376 FD 7D         dec b
8257   3378 D8            push b
8258   3379                              
8259   3379 3B 87 4E      mov d, _prog ; $prog
8260   337C 2A            mov b, [d]
8261   337D 38 00 00      mov c, 0
8262   3380 FD 77         inc b
8263   3382 3B 87 4E      mov d, _prog ; $prog
8264   3385 FD 43         mov [d], b
8265   3387 FD 7D         dec b
8266   3389 74            mov d, b
8267   338A 32            mov bl, [d]
8268   338B A7 00         mov bh, 0
8269   338D 38 00 00      mov c, 0
8270   3390 E7            pop d
8271   3391 FD 3E         mov [d], bl
8272   3393             ; tok = PLUS; 
8273   3393 3B 83 4E      mov d, _tok ; $tok
8274   3396 DA            push d
8275   3397                              
8276   3397 FD 2E 08 00   mov32 cb, $8 ; enum element: PLUS
8276   339B 00 00 
8277   339D E7            pop d
8278   339E FD 43         mov [d], b
8279   33A0             ; toktype = DELIMITER;   
8280   33A0 3B 85 4E      mov d, _toktype ; $toktype
8281   33A3 DA            push d
8282   33A4                              
8283   33A4 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8283   33A8 00 00 
8284   33AA E7            pop d
8285   33AB FD 43         mov [d], b
8286   33AD 0A 20 36      jmp _if155_exit
8287   33B0             _if155_else:
8288   33B0             ; if(*prog == '-'){ 
8289   33B0             _if156_cond:
8290   33B0                              
8291   33B0 3B 87 4E      mov d, _prog ; $prog
8292   33B3 2A            mov b, [d]
8293   33B4 38 00 00      mov c, 0
8294   33B7 74            mov d, b
8295   33B8 32            mov bl, [d]
8296   33B9 A7 00         mov bh, 0
8297   33BB 38 00 00      mov c, 0
8298   33BE             ; --- START RELATIONAL
8299   33BE D7            push a
8300   33BF 11            mov a, b
8301   33C0 FD 2E 2D 00   mov32 cb, $0000002d
8301   33C4 00 00 
8302   33C6 B0            cmp a, b
8303   33C7 FD 71         seq ; ==
8304   33C9 E4            pop a
8305   33CA             ; --- END RELATIONAL
8306   33CA C0 00 00      cmp b, 0
8307   33CD C6 18 34      je _if156_else
8308   33D0             _if156_TRUE:
8309   33D0             ; *t++ = *prog++; 
8310   33D0 FA FF FF      lea d, [bp + -1] ; $t
8311   33D3 2A            mov b, [d]
8312   33D4 38 00 00      mov c, 0
8313   33D7 FD 77         inc b
8314   33D9 FA FF FF      lea d, [bp + -1] ; $t
8315   33DC FD 43         mov [d], b
8316   33DE FD 7D         dec b
8317   33E0 D8            push b
8318   33E1                              
8319   33E1 3B 87 4E      mov d, _prog ; $prog
8320   33E4 2A            mov b, [d]
8321   33E5 38 00 00      mov c, 0
8322   33E8 FD 77         inc b
8323   33EA 3B 87 4E      mov d, _prog ; $prog
8324   33ED FD 43         mov [d], b
8325   33EF FD 7D         dec b
8326   33F1 74            mov d, b
8327   33F2 32            mov bl, [d]
8328   33F3 A7 00         mov bh, 0
8329   33F5 38 00 00      mov c, 0
8330   33F8 E7            pop d
8331   33F9 FD 3E         mov [d], bl
8332   33FB             ; tok = MINUS; 
8333   33FB 3B 83 4E      mov d, _tok ; $tok
8334   33FE DA            push d
8335   33FF                              
8336   33FF FD 2E 09 00   mov32 cb, $9 ; enum element: MINUS
8336   3403 00 00 
8337   3405 E7            pop d
8338   3406 FD 43         mov [d], b
8339   3408             ; toktype = DELIMITER;   
8340   3408 3B 85 4E      mov d, _toktype ; $toktype
8341   340B DA            push d
8342   340C                              
8343   340C FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8343   3410 00 00 
8344   3412 E7            pop d
8345   3413 FD 43         mov [d], b
8346   3415 0A 20 36      jmp _if156_exit
8347   3418             _if156_else:
8348   3418             ; if(*prog == '$'){ 
8349   3418             _if157_cond:
8350   3418                              
8351   3418 3B 87 4E      mov d, _prog ; $prog
8352   341B 2A            mov b, [d]
8353   341C 38 00 00      mov c, 0
8354   341F 74            mov d, b
8355   3420 32            mov bl, [d]
8356   3421 A7 00         mov bh, 0
8357   3423 38 00 00      mov c, 0
8358   3426             ; --- START RELATIONAL
8359   3426 D7            push a
8360   3427 11            mov a, b
8361   3428 FD 2E 24 00   mov32 cb, $00000024
8361   342C 00 00 
8362   342E B0            cmp a, b
8363   342F FD 71         seq ; ==
8364   3431 E4            pop a
8365   3432             ; --- END RELATIONAL
8366   3432 C0 00 00      cmp b, 0
8367   3435 C6 80 34      je _if157_else
8368   3438             _if157_TRUE:
8369   3438             ; *t++ = *prog++; 
8370   3438 FA FF FF      lea d, [bp + -1] ; $t
8371   343B 2A            mov b, [d]
8372   343C 38 00 00      mov c, 0
8373   343F FD 77         inc b
8374   3441 FA FF FF      lea d, [bp + -1] ; $t
8375   3444 FD 43         mov [d], b
8376   3446 FD 7D         dec b
8377   3448 D8            push b
8378   3449                              
8379   3449 3B 87 4E      mov d, _prog ; $prog
8380   344C 2A            mov b, [d]
8381   344D 38 00 00      mov c, 0
8382   3450 FD 77         inc b
8383   3452 3B 87 4E      mov d, _prog ; $prog
8384   3455 FD 43         mov [d], b
8385   3457 FD 7D         dec b
8386   3459 74            mov d, b
8387   345A 32            mov bl, [d]
8388   345B A7 00         mov bh, 0
8389   345D 38 00 00      mov c, 0
8390   3460 E7            pop d
8391   3461 FD 3E         mov [d], bl
8392   3463             ; tok = DOLLAR; 
8393   3463 3B 83 4E      mov d, _tok ; $tok
8394   3466 DA            push d
8395   3467                              
8396   3467 FD 2E 0A 00   mov32 cb, $a ; enum element: DOLLAR
8396   346B 00 00 
8397   346D E7            pop d
8398   346E FD 43         mov [d], b
8399   3470             ; toktype = DELIMITER;   
8400   3470 3B 85 4E      mov d, _toktype ; $toktype
8401   3473 DA            push d
8402   3474                              
8403   3474 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8403   3478 00 00 
8404   347A E7            pop d
8405   347B FD 43         mov [d], b
8406   347D 0A 20 36      jmp _if157_exit
8407   3480             _if157_else:
8408   3480             ; if(*prog == ':'){ 
8409   3480             _if158_cond:
8410   3480                              
8411   3480 3B 87 4E      mov d, _prog ; $prog
8412   3483 2A            mov b, [d]
8413   3484 38 00 00      mov c, 0
8414   3487 74            mov d, b
8415   3488 32            mov bl, [d]
8416   3489 A7 00         mov bh, 0
8417   348B 38 00 00      mov c, 0
8418   348E             ; --- START RELATIONAL
8419   348E D7            push a
8420   348F 11            mov a, b
8421   3490 FD 2E 3A 00   mov32 cb, $0000003a
8421   3494 00 00 
8422   3496 B0            cmp a, b
8423   3497 FD 71         seq ; ==
8424   3499 E4            pop a
8425   349A             ; --- END RELATIONAL
8426   349A C0 00 00      cmp b, 0
8427   349D C6 E8 34      je _if158_else
8428   34A0             _if158_TRUE:
8429   34A0             ; *t++ = *prog++; 
8430   34A0 FA FF FF      lea d, [bp + -1] ; $t
8431   34A3 2A            mov b, [d]
8432   34A4 38 00 00      mov c, 0
8433   34A7 FD 77         inc b
8434   34A9 FA FF FF      lea d, [bp + -1] ; $t
8435   34AC FD 43         mov [d], b
8436   34AE FD 7D         dec b
8437   34B0 D8            push b
8438   34B1                              
8439   34B1 3B 87 4E      mov d, _prog ; $prog
8440   34B4 2A            mov b, [d]
8441   34B5 38 00 00      mov c, 0
8442   34B8 FD 77         inc b
8443   34BA 3B 87 4E      mov d, _prog ; $prog
8444   34BD FD 43         mov [d], b
8445   34BF FD 7D         dec b
8446   34C1 74            mov d, b
8447   34C2 32            mov bl, [d]
8448   34C3 A7 00         mov bh, 0
8449   34C5 38 00 00      mov c, 0
8450   34C8 E7            pop d
8451   34C9 FD 3E         mov [d], bl
8452   34CB             ; tok = COLON; 
8453   34CB 3B 83 4E      mov d, _tok ; $tok
8454   34CE DA            push d
8455   34CF                              
8456   34CF FD 2E 0D 00   mov32 cb, $d ; enum element: COLON
8456   34D3 00 00 
8457   34D5 E7            pop d
8458   34D6 FD 43         mov [d], b
8459   34D8             ; toktype = DELIMITER;   
8460   34D8 3B 85 4E      mov d, _toktype ; $toktype
8461   34DB DA            push d
8462   34DC                              
8463   34DC FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8463   34E0 00 00 
8464   34E2 E7            pop d
8465   34E3 FD 43         mov [d], b
8466   34E5 0A 20 36      jmp _if158_exit
8467   34E8             _if158_else:
8468   34E8             ; if(*prog == ';'){ 
8469   34E8             _if159_cond:
8470   34E8                              
8471   34E8 3B 87 4E      mov d, _prog ; $prog
8472   34EB 2A            mov b, [d]
8473   34EC 38 00 00      mov c, 0
8474   34EF 74            mov d, b
8475   34F0 32            mov bl, [d]
8476   34F1 A7 00         mov bh, 0
8477   34F3 38 00 00      mov c, 0
8478   34F6             ; --- START RELATIONAL
8479   34F6 D7            push a
8480   34F7 11            mov a, b
8481   34F8 FD 2E 3B 00   mov32 cb, $0000003b
8481   34FC 00 00 
8482   34FE B0            cmp a, b
8483   34FF FD 71         seq ; ==
8484   3501 E4            pop a
8485   3502             ; --- END RELATIONAL
8486   3502 C0 00 00      cmp b, 0
8487   3505 C6 50 35      je _if159_else
8488   3508             _if159_TRUE:
8489   3508             ; *t++ = *prog++; 
8490   3508 FA FF FF      lea d, [bp + -1] ; $t
8491   350B 2A            mov b, [d]
8492   350C 38 00 00      mov c, 0
8493   350F FD 77         inc b
8494   3511 FA FF FF      lea d, [bp + -1] ; $t
8495   3514 FD 43         mov [d], b
8496   3516 FD 7D         dec b
8497   3518 D8            push b
8498   3519                              
8499   3519 3B 87 4E      mov d, _prog ; $prog
8500   351C 2A            mov b, [d]
8501   351D 38 00 00      mov c, 0
8502   3520 FD 77         inc b
8503   3522 3B 87 4E      mov d, _prog ; $prog
8504   3525 FD 43         mov [d], b
8505   3527 FD 7D         dec b
8506   3529 74            mov d, b
8507   352A 32            mov bl, [d]
8508   352B A7 00         mov bh, 0
8509   352D 38 00 00      mov c, 0
8510   3530 E7            pop d
8511   3531 FD 3E         mov [d], bl
8512   3533             ; tok = SEMICOLON; 
8513   3533 3B 83 4E      mov d, _tok ; $tok
8514   3536 DA            push d
8515   3537                              
8516   3537 FD 2E 0E 00   mov32 cb, $e ; enum element: SEMICOLON
8516   353B 00 00 
8517   353D E7            pop d
8518   353E FD 43         mov [d], b
8519   3540             ; toktype = DELIMITER;   
8520   3540 3B 85 4E      mov d, _toktype ; $toktype
8521   3543 DA            push d
8522   3544                              
8523   3544 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8523   3548 00 00 
8524   354A E7            pop d
8525   354B FD 43         mov [d], b
8526   354D 0A 20 36      jmp _if159_exit
8527   3550             _if159_else:
8528   3550             ; if(*prog == ','){ 
8529   3550             _if160_cond:
8530   3550                              
8531   3550 3B 87 4E      mov d, _prog ; $prog
8532   3553 2A            mov b, [d]
8533   3554 38 00 00      mov c, 0
8534   3557 74            mov d, b
8535   3558 32            mov bl, [d]
8536   3559 A7 00         mov bh, 0
8537   355B 38 00 00      mov c, 0
8538   355E             ; --- START RELATIONAL
8539   355E D7            push a
8540   355F 11            mov a, b
8541   3560 FD 2E 2C 00   mov32 cb, $0000002c
8541   3564 00 00 
8542   3566 B0            cmp a, b
8543   3567 FD 71         seq ; ==
8544   3569 E4            pop a
8545   356A             ; --- END RELATIONAL
8546   356A C0 00 00      cmp b, 0
8547   356D C6 B8 35      je _if160_else
8548   3570             _if160_TRUE:
8549   3570             ; *t++ = *prog++; 
8550   3570 FA FF FF      lea d, [bp + -1] ; $t
8551   3573 2A            mov b, [d]
8552   3574 38 00 00      mov c, 0
8553   3577 FD 77         inc b
8554   3579 FA FF FF      lea d, [bp + -1] ; $t
8555   357C FD 43         mov [d], b
8556   357E FD 7D         dec b
8557   3580 D8            push b
8558   3581                              
8559   3581 3B 87 4E      mov d, _prog ; $prog
8560   3584 2A            mov b, [d]
8561   3585 38 00 00      mov c, 0
8562   3588 FD 77         inc b
8563   358A 3B 87 4E      mov d, _prog ; $prog
8564   358D FD 43         mov [d], b
8565   358F FD 7D         dec b
8566   3591 74            mov d, b
8567   3592 32            mov bl, [d]
8568   3593 A7 00         mov bh, 0
8569   3595 38 00 00      mov c, 0
8570   3598 E7            pop d
8571   3599 FD 3E         mov [d], bl
8572   359B             ; tok = COMMA; 
8573   359B 3B 83 4E      mov d, _tok ; $tok
8574   359E DA            push d
8575   359F                              
8576   359F FD 2E 0F 00   mov32 cb, $f ; enum element: COMMA
8576   35A3 00 00 
8577   35A5 E7            pop d
8578   35A6 FD 43         mov [d], b
8579   35A8             ; toktype = DELIMITER;   
8580   35A8 3B 85 4E      mov d, _toktype ; $toktype
8581   35AB DA            push d
8582   35AC                              
8583   35AC FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8583   35B0 00 00 
8584   35B2 E7            pop d
8585   35B3 FD 43         mov [d], b
8586   35B5 0A 20 36      jmp _if160_exit
8587   35B8             _if160_else:
8588   35B8             ; if(*prog == '.'){ 
8589   35B8             _if161_cond:
8590   35B8                              
8591   35B8 3B 87 4E      mov d, _prog ; $prog
8592   35BB 2A            mov b, [d]
8593   35BC 38 00 00      mov c, 0
8594   35BF 74            mov d, b
8595   35C0 32            mov bl, [d]
8596   35C1 A7 00         mov bh, 0
8597   35C3 38 00 00      mov c, 0
8598   35C6             ; --- START RELATIONAL
8599   35C6 D7            push a
8600   35C7 11            mov a, b
8601   35C8 FD 2E 2E 00   mov32 cb, $0000002e
8601   35CC 00 00 
8602   35CE B0            cmp a, b
8603   35CF FD 71         seq ; ==
8604   35D1 E4            pop a
8605   35D2             ; --- END RELATIONAL
8606   35D2 C0 00 00      cmp b, 0
8607   35D5 C6 20 36      je _if161_exit
8608   35D8             _if161_TRUE:
8609   35D8             ; *t++ = *prog++; 
8610   35D8 FA FF FF      lea d, [bp + -1] ; $t
8611   35DB 2A            mov b, [d]
8612   35DC 38 00 00      mov c, 0
8613   35DF FD 77         inc b
8614   35E1 FA FF FF      lea d, [bp + -1] ; $t
8615   35E4 FD 43         mov [d], b
8616   35E6 FD 7D         dec b
8617   35E8 D8            push b
8618   35E9                              
8619   35E9 3B 87 4E      mov d, _prog ; $prog
8620   35EC 2A            mov b, [d]
8621   35ED 38 00 00      mov c, 0
8622   35F0 FD 77         inc b
8623   35F2 3B 87 4E      mov d, _prog ; $prog
8624   35F5 FD 43         mov [d], b
8625   35F7 FD 7D         dec b
8626   35F9 74            mov d, b
8627   35FA 32            mov bl, [d]
8628   35FB A7 00         mov bh, 0
8629   35FD 38 00 00      mov c, 0
8630   3600 E7            pop d
8631   3601 FD 3E         mov [d], bl
8632   3603             ; tok = DOT; 
8633   3603 3B 83 4E      mov d, _tok ; $tok
8634   3606 DA            push d
8635   3607                              
8636   3607 FD 2E 10 00   mov32 cb, $10 ; enum element: DOT
8636   360B 00 00 
8637   360D E7            pop d
8638   360E FD 43         mov [d], b
8639   3610             ; toktype = DELIMITER;   
8640   3610 3B 85 4E      mov d, _toktype ; $toktype
8641   3613 DA            push d
8642   3614                              
8643   3614 FD 2E 02 00   mov32 cb, $2 ; enum element: DELIMITER
8643   3618 00 00 
8644   361A E7            pop d
8645   361B FD 43         mov [d], b
8646   361D 0A 20 36      jmp _if161_exit
8647   3620             _if161_exit:
8648   3620             _if160_exit:
8649   3620             _if159_exit:
8650   3620             _if158_exit:
8651   3620             _if157_exit:
8652   3620             _if156_exit:
8653   3620             _if155_exit:
8654   3620             _if154_exit:
8655   3620             _if153_exit:
8656   3620             _if150_exit:
8657   3620             _if147_exit:
8658   3620             _if143_exit:
8659   3620             _if140_exit:
8660   3620             ; *t = '\0'; 
8661   3620 FA FF FF      lea d, [bp + -1] ; $t
8662   3623 2A            mov b, [d]
8663   3624 38 00 00      mov c, 0
8664   3627 D8            push b
8665   3628                              
8666   3628 FD 2E 00 00   mov32 cb, $00000000
8666   362C 00 00 
8667   362E E7            pop d
8668   362F FD 3E         mov [d], bl
8669   3631             ; if(toktype == TYPE_UNDEF){ 
8670   3631             _if162_cond:
8671   3631                              
8672   3631 3B 85 4E      mov d, _toktype ; $toktype
8673   3634 2A            mov b, [d]
8674   3635 38 00 00      mov c, 0
8675   3638             ; --- START RELATIONAL
8676   3638 D7            push a
8677   3639 11            mov a, b
8678   363A FD 2E 00 00   mov32 cb, $0 ; enum element: TYPE_UNDEF
8678   363E 00 00 
8679   3640 B0            cmp a, b
8680   3641 FD 71         seq ; ==
8681   3643 E4            pop a
8682   3644             ; --- END RELATIONAL
8683   3644 C0 00 00      cmp b, 0
8684   3647 C6 B6 36      je _if162_exit
8685   364A             _if162_TRUE:
8686   364A             ; print("TOKEN ERROR. Prog: "); printx16((int)(prog-program));  
8687   364A                              
8688   364A             ; --- START FUNCTION CALL
8689   364A                              
8690   364A 26 2E 53      mov b, _s75 ; "TOKEN ERROR. Prog: "
8691   364D FD AB         swp b
8692   364F D8            push b
8693   3650 07 7C 3E      call print
8694   3653 51 02 00      add sp, 2
8695   3656             ; --- END FUNCTION CALL
8696   3656             ; printx16((int)(prog-program));  
8697   3656                              
8698   3656             ; --- START FUNCTION CALL
8699   3656                              
8700   3656                              
8701   3656 3B 87 4E      mov d, _prog ; $prog
8702   3659 2A            mov b, [d]
8703   365A 38 00 00      mov c, 0
8704   365D             ; --- START TERMS
8705   365D D7            push a
8706   365E 11            mov a, b
8707   365F 3B CB 4F      mov d, _program ; $program
8708   3662 2A            mov b, [d]
8709   3663 38 00 00      mov c, 0
8710   3666 60            sub a, b
8711   3667 27            mov b, a
8712   3668 E4            pop a
8713   3669             ; --- END TERMS
8714   3669 AB            snex b
8715   366A FD AB         swp b
8716   366C D8            push b
8717   366D 07 B3 42      call printx16
8718   3670 51 02 00      add sp, 2
8719   3673             ; --- END FUNCTION CALL
8720   3673             ; print(", ProgVal: "); putchar(*prog);  
8721   3673                              
8722   3673             ; --- START FUNCTION CALL
8723   3673                              
8724   3673 26 42 53      mov b, _s76 ; ", ProgVal: "
8725   3676 FD AB         swp b
8726   3678 D8            push b
8727   3679 07 7C 3E      call print
8728   367C 51 02 00      add sp, 2
8729   367F             ; --- END FUNCTION CALL
8730   367F             ; putchar(*prog);  
8731   367F                              
8732   367F             ; --- START FUNCTION CALL
8733   367F                              
8734   367F 3B 87 4E      mov d, _prog ; $prog
8735   3682 2A            mov b, [d]
8736   3683 38 00 00      mov c, 0
8737   3686 74            mov d, b
8738   3687 32            mov bl, [d]
8739   3688 A7 00         mov bh, 0
8740   368A 38 00 00      mov c, 0
8741   368D DD            push bl
8742   368E 07 05 43      call putchar
8743   3691 51 01 00      add sp, 1
8744   3694             ; --- END FUNCTION CALL
8745   3694             ; print("\n Text after prog: \n"); 
8746   3694                              
8747   3694             ; --- START FUNCTION CALL
8748   3694                              
8749   3694 26 4E 53      mov b, _s77 ; "\n Text after prog: \n"
8750   3697 FD AB         swp b
8751   3699 D8            push b
8752   369A 07 7C 3E      call print
8753   369D 51 02 00      add sp, 2
8754   36A0             ; --- END FUNCTION CALL
8755   36A0             ; print(prog); 
8756   36A0                              
8757   36A0             ; --- START FUNCTION CALL
8758   36A0                              
8759   36A0 3B 87 4E      mov d, _prog ; $prog
8760   36A3 2A            mov b, [d]
8761   36A4 38 00 00      mov c, 0
8762   36A7 FD AB         swp b
8763   36A9 D8            push b
8764   36AA 07 7C 3E      call print
8765   36AD 51 02 00      add sp, 2
8766   36B0             ; --- END FUNCTION CALL
8767   36B0             ; exit(); 
8768   36B0                              
8769   36B0             ; --- START FUNCTION CALL
8770   36B0 07 AC 42      call exit
8771   36B3 0A B6 36      jmp _if162_exit
8772   36B6             _if162_exit:
8773   36B6 F9            leave
8774   36B7 09            ret
8775   36B8             
8776   36B8             convert_constant:
8777   36B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8778   36BB             ; char *s; 
8779   36BB 52 02 00      sub sp, 2
8780   36BE             ; char *t; 
8781   36BE 52 02 00      sub sp, 2
8782   36C1             ; t = token; 
8783   36C1 FA FD FF      lea d, [bp + -3] ; $t
8784   36C4 DA            push d
8785   36C5                              
8786   36C5 3B 89 4E      mov d, _token_data ; $token
8787   36C8 2D            mov b, d
8788   36C9 38 00 00      mov c, 0
8789   36CC E7            pop d
8790   36CD FD 43         mov [d], b
8791   36CF             ; s = string_const; 
8792   36CF FA FF FF      lea d, [bp + -1] ; $s
8793   36D2 DA            push d
8794   36D3                              
8795   36D3 3B C9 4E      mov d, _string_const_data ; $string_const
8796   36D6 2D            mov b, d
8797   36D7 38 00 00      mov c, 0
8798   36DA E7            pop d
8799   36DB FD 43         mov [d], b
8800   36DD             ; if(toktype == CHAR_CONST){ 
8801   36DD             _if163_cond:
8802   36DD                              
8803   36DD 3B 85 4E      mov d, _toktype ; $toktype
8804   36E0 2A            mov b, [d]
8805   36E1 38 00 00      mov c, 0
8806   36E4             ; --- START RELATIONAL
8807   36E4 D7            push a
8808   36E5 11            mov a, b
8809   36E6 FD 2E 03 00   mov32 cb, $3 ; enum element: CHAR_CONST
8809   36EA 00 00 
8810   36EC B0            cmp a, b
8811   36ED FD 71         seq ; ==
8812   36EF E4            pop a
8813   36F0             ; --- END RELATIONAL
8814   36F0 C0 00 00      cmp b, 0
8815   36F3 C6 E2 38      je _if163_else
8816   36F6             _if163_TRUE:
8817   36F6             ; t++; 
8818   36F6                              
8819   36F6 FA FD FF      lea d, [bp + -3] ; $t
8820   36F9 2A            mov b, [d]
8821   36FA 38 00 00      mov c, 0
8822   36FD FD 77         inc b
8823   36FF FA FD FF      lea d, [bp + -3] ; $t
8824   3702 FD 43         mov [d], b
8825   3704 FD 7D         dec b
8826   3706             ; if(*t == '\\'){ 
8827   3706             _if164_cond:
8828   3706                              
8829   3706 FA FD FF      lea d, [bp + -3] ; $t
8830   3709 2A            mov b, [d]
8831   370A 38 00 00      mov c, 0
8832   370D 74            mov d, b
8833   370E 32            mov bl, [d]
8834   370F A7 00         mov bh, 0
8835   3711 38 00 00      mov c, 0
8836   3714             ; --- START RELATIONAL
8837   3714 D7            push a
8838   3715 11            mov a, b
8839   3716 FD 2E 5C 00   mov32 cb, $0000005c
8839   371A 00 00 
8840   371C B0            cmp a, b
8841   371D FD 71         seq ; ==
8842   371F E4            pop a
8843   3720             ; --- END RELATIONAL
8844   3720 C0 00 00      cmp b, 0
8845   3723 C6 BD 38      je _if164_else
8846   3726             _if164_TRUE:
8847   3726             ; t++; 
8848   3726                              
8849   3726 FA FD FF      lea d, [bp + -3] ; $t
8850   3729 2A            mov b, [d]
8851   372A 38 00 00      mov c, 0
8852   372D FD 77         inc b
8853   372F FA FD FF      lea d, [bp + -3] ; $t
8854   3732 FD 43         mov [d], b
8855   3734 FD 7D         dec b
8856   3736             ; switch(*t){ 
8857   3736             _switch165_expr:
8858   3736                              
8859   3736 FA FD FF      lea d, [bp + -3] ; $t
8860   3739 2A            mov b, [d]
8861   373A 38 00 00      mov c, 0
8862   373D 74            mov d, b
8863   373E 32            mov bl, [d]
8864   373F A7 00         mov bh, 0
8865   3741 38 00 00      mov c, 0
8866   3744             _switch165_comparisons:
8867   3744 C1 30         cmp bl, $30
8868   3746 C6 7E 37      je _switch165_case0
8869   3749 C1 61         cmp bl, $61
8870   374B C6 9B 37      je _switch165_case1
8871   374E C1 62         cmp bl, $62
8872   3750 C6 B8 37      je _switch165_case2
8873   3753 C1 66         cmp bl, $66
8874   3755 C6 D5 37      je _switch165_case3
8875   3758 C1 6E         cmp bl, $6e
8876   375A C6 F2 37      je _switch165_case4
8877   375D C1 72         cmp bl, $72
8878   375F C6 0F 38      je _switch165_case5
8879   3762 C1 74         cmp bl, $74
8880   3764 C6 2C 38      je _switch165_case6
8881   3767 C1 76         cmp bl, $76
8882   3769 C6 49 38      je _switch165_case7
8883   376C C1 5C         cmp bl, $5c
8884   376E C6 66 38      je _switch165_case8
8885   3771 C1 27         cmp bl, $27
8886   3773 C6 83 38      je _switch165_case9
8887   3776 C1 22         cmp bl, $22
8888   3778 C6 A0 38      je _switch165_case10
8889   377B 0A BA 38      jmp _switch165_exit
8890   377E             _switch165_case0:
8891   377E             ; *s++ = '\0'; 
8892   377E FA FF FF      lea d, [bp + -1] ; $s
8893   3781 2A            mov b, [d]
8894   3782 38 00 00      mov c, 0
8895   3785 FD 77         inc b
8896   3787 FA FF FF      lea d, [bp + -1] ; $s
8897   378A FD 43         mov [d], b
8898   378C FD 7D         dec b
8899   378E D8            push b
8900   378F                              
8901   378F FD 2E 00 00   mov32 cb, $00000000
8901   3793 00 00 
8902   3795 E7            pop d
8903   3796 FD 3E         mov [d], bl
8904   3798             ; break; 
8905   3798 0A BA 38      jmp _switch165_exit ; case break
8906   379B             _switch165_case1:
8907   379B             ; *s++ = '\a'; 
8908   379B FA FF FF      lea d, [bp + -1] ; $s
8909   379E 2A            mov b, [d]
8910   379F 38 00 00      mov c, 0
8911   37A2 FD 77         inc b
8912   37A4 FA FF FF      lea d, [bp + -1] ; $s
8913   37A7 FD 43         mov [d], b
8914   37A9 FD 7D         dec b
8915   37AB D8            push b
8916   37AC                              
8917   37AC FD 2E 07 00   mov32 cb, $00000007
8917   37B0 00 00 
8918   37B2 E7            pop d
8919   37B3 FD 3E         mov [d], bl
8920   37B5             ; break; 
8921   37B5 0A BA 38      jmp _switch165_exit ; case break
8922   37B8             _switch165_case2:
8923   37B8             ; *s++ = '\b'; 
8924   37B8 FA FF FF      lea d, [bp + -1] ; $s
8925   37BB 2A            mov b, [d]
8926   37BC 38 00 00      mov c, 0
8927   37BF FD 77         inc b
8928   37C1 FA FF FF      lea d, [bp + -1] ; $s
8929   37C4 FD 43         mov [d], b
8930   37C6 FD 7D         dec b
8931   37C8 D8            push b
8932   37C9                              
8933   37C9 FD 2E 08 00   mov32 cb, $00000008
8933   37CD 00 00 
8934   37CF E7            pop d
8935   37D0 FD 3E         mov [d], bl
8936   37D2             ; break;   
8937   37D2 0A BA 38      jmp _switch165_exit ; case break
8938   37D5             _switch165_case3:
8939   37D5             ; *s++ = '\f'; 
8940   37D5 FA FF FF      lea d, [bp + -1] ; $s
8941   37D8 2A            mov b, [d]
8942   37D9 38 00 00      mov c, 0
8943   37DC FD 77         inc b
8944   37DE FA FF FF      lea d, [bp + -1] ; $s
8945   37E1 FD 43         mov [d], b
8946   37E3 FD 7D         dec b
8947   37E5 D8            push b
8948   37E6                              
8949   37E6 FD 2E 0C 00   mov32 cb, $0000000c
8949   37EA 00 00 
8950   37EC E7            pop d
8951   37ED FD 3E         mov [d], bl
8952   37EF             ; break; 
8953   37EF 0A BA 38      jmp _switch165_exit ; case break
8954   37F2             _switch165_case4:
8955   37F2             ; *s++ = '\n'; 
8956   37F2 FA FF FF      lea d, [bp + -1] ; $s
8957   37F5 2A            mov b, [d]
8958   37F6 38 00 00      mov c, 0
8959   37F9 FD 77         inc b
8960   37FB FA FF FF      lea d, [bp + -1] ; $s
8961   37FE FD 43         mov [d], b
8962   3800 FD 7D         dec b
8963   3802 D8            push b
8964   3803                              
8965   3803 FD 2E 0A 00   mov32 cb, $0000000a
8965   3807 00 00 
8966   3809 E7            pop d
8967   380A FD 3E         mov [d], bl
8968   380C             ; break; 
8969   380C 0A BA 38      jmp _switch165_exit ; case break
8970   380F             _switch165_case5:
8971   380F             ; *s++ = '\r'; 
8972   380F FA FF FF      lea d, [bp + -1] ; $s
8973   3812 2A            mov b, [d]
8974   3813 38 00 00      mov c, 0
8975   3816 FD 77         inc b
8976   3818 FA FF FF      lea d, [bp + -1] ; $s
8977   381B FD 43         mov [d], b
8978   381D FD 7D         dec b
8979   381F D8            push b
8980   3820                              
8981   3820 FD 2E 0D 00   mov32 cb, $0000000d
8981   3824 00 00 
8982   3826 E7            pop d
8983   3827 FD 3E         mov [d], bl
8984   3829             ; break; 
8985   3829 0A BA 38      jmp _switch165_exit ; case break
8986   382C             _switch165_case6:
8987   382C             ; *s++ = '\t'; 
8988   382C FA FF FF      lea d, [bp + -1] ; $s
8989   382F 2A            mov b, [d]
8990   3830 38 00 00      mov c, 0
8991   3833 FD 77         inc b
8992   3835 FA FF FF      lea d, [bp + -1] ; $s
8993   3838 FD 43         mov [d], b
8994   383A FD 7D         dec b
8995   383C D8            push b
8996   383D                              
8997   383D FD 2E 09 00   mov32 cb, $00000009
8997   3841 00 00 
8998   3843 E7            pop d
8999   3844 FD 3E         mov [d], bl
9000   3846             ; break; 
9001   3846 0A BA 38      jmp _switch165_exit ; case break
9002   3849             _switch165_case7:
9003   3849             ; *s++ = '\v'; 
9004   3849 FA FF FF      lea d, [bp + -1] ; $s
9005   384C 2A            mov b, [d]
9006   384D 38 00 00      mov c, 0
9007   3850 FD 77         inc b
9008   3852 FA FF FF      lea d, [bp + -1] ; $s
9009   3855 FD 43         mov [d], b
9010   3857 FD 7D         dec b
9011   3859 D8            push b
9012   385A                              
9013   385A FD 2E 0B 00   mov32 cb, $0000000b
9013   385E 00 00 
9014   3860 E7            pop d
9015   3861 FD 3E         mov [d], bl
9016   3863             ; break; 
9017   3863 0A BA 38      jmp _switch165_exit ; case break
9018   3866             _switch165_case8:
9019   3866             ; *s++ = '\\'; 
9020   3866 FA FF FF      lea d, [bp + -1] ; $s
9021   3869 2A            mov b, [d]
9022   386A 38 00 00      mov c, 0
9023   386D FD 77         inc b
9024   386F FA FF FF      lea d, [bp + -1] ; $s
9025   3872 FD 43         mov [d], b
9026   3874 FD 7D         dec b
9027   3876 D8            push b
9028   3877                              
9029   3877 FD 2E 5C 00   mov32 cb, $0000005c
9029   387B 00 00 
9030   387D E7            pop d
9031   387E FD 3E         mov [d], bl
9032   3880             ; break; 
9033   3880 0A BA 38      jmp _switch165_exit ; case break
9034   3883             _switch165_case9:
9035   3883             ; *s++ = '\''; 
9036   3883 FA FF FF      lea d, [bp + -1] ; $s
9037   3886 2A            mov b, [d]
9038   3887 38 00 00      mov c, 0
9039   388A FD 77         inc b
9040   388C FA FF FF      lea d, [bp + -1] ; $s
9041   388F FD 43         mov [d], b
9042   3891 FD 7D         dec b
9043   3893 D8            push b
9044   3894                              
9045   3894 FD 2E 27 00   mov32 cb, $00000027
9045   3898 00 00 
9046   389A E7            pop d
9047   389B FD 3E         mov [d], bl
9048   389D             ; break; 
9049   389D 0A BA 38      jmp _switch165_exit ; case break
9050   38A0             _switch165_case10:
9051   38A0             ; *s++ = '\"'; 
9052   38A0 FA FF FF      lea d, [bp + -1] ; $s
9053   38A3 2A            mov b, [d]
9054   38A4 38 00 00      mov c, 0
9055   38A7 FD 77         inc b
9056   38A9 FA FF FF      lea d, [bp + -1] ; $s
9057   38AC FD 43         mov [d], b
9058   38AE FD 7D         dec b
9059   38B0 D8            push b
9060   38B1                              
9061   38B1 FD 2E 22 00   mov32 cb, $00000022
9061   38B5 00 00 
9062   38B7 E7            pop d
9063   38B8 FD 3E         mov [d], bl
9064   38BA             _switch165_exit:
9065   38BA 0A DF 38      jmp _if164_exit
9066   38BD             _if164_else:
9067   38BD             ; *s++ = *t; 
9068   38BD FA FF FF      lea d, [bp + -1] ; $s
9069   38C0 2A            mov b, [d]
9070   38C1 38 00 00      mov c, 0
9071   38C4 FD 77         inc b
9072   38C6 FA FF FF      lea d, [bp + -1] ; $s
9073   38C9 FD 43         mov [d], b
9074   38CB FD 7D         dec b
9075   38CD D8            push b
9076   38CE                              
9077   38CE FA FD FF      lea d, [bp + -3] ; $t
9078   38D1 2A            mov b, [d]
9079   38D2 38 00 00      mov c, 0
9080   38D5 74            mov d, b
9081   38D6 32            mov bl, [d]
9082   38D7 A7 00         mov bh, 0
9083   38D9 38 00 00      mov c, 0
9084   38DC E7            pop d
9085   38DD FD 3E         mov [d], bl
9086   38DF             _if164_exit:
9087   38DF 0A 6F 39      jmp _if163_exit
9088   38E2             _if163_else:
9089   38E2             ; if(toktype == STRING_CONST){ 
9090   38E2             _if166_cond:
9091   38E2                              
9092   38E2 3B 85 4E      mov d, _toktype ; $toktype
9093   38E5 2A            mov b, [d]
9094   38E6 38 00 00      mov c, 0
9095   38E9             ; --- START RELATIONAL
9096   38E9 D7            push a
9097   38EA 11            mov a, b
9098   38EB FD 2E 04 00   mov32 cb, $4 ; enum element: STRING_CONST
9098   38EF 00 00 
9099   38F1 B0            cmp a, b
9100   38F2 FD 71         seq ; ==
9101   38F4 E4            pop a
9102   38F5             ; --- END RELATIONAL
9103   38F5 C0 00 00      cmp b, 0
9104   38F8 C6 6F 39      je _if166_exit
9105   38FB             _if166_TRUE:
9106   38FB             ; t++; 
9107   38FB                              
9108   38FB FA FD FF      lea d, [bp + -3] ; $t
9109   38FE 2A            mov b, [d]
9110   38FF 38 00 00      mov c, 0
9111   3902 FD 77         inc b
9112   3904 FA FD FF      lea d, [bp + -3] ; $t
9113   3907 FD 43         mov [d], b
9114   3909 FD 7D         dec b
9115   390B             ; while(*t != '\"' && *t){ 
9116   390B             _while167_cond:
9117   390B                              
9118   390B FA FD FF      lea d, [bp + -3] ; $t
9119   390E 2A            mov b, [d]
9120   390F 38 00 00      mov c, 0
9121   3912 74            mov d, b
9122   3913 32            mov bl, [d]
9123   3914 A7 00         mov bh, 0
9124   3916 38 00 00      mov c, 0
9125   3919             ; --- START RELATIONAL
9126   3919 D7            push a
9127   391A 11            mov a, b
9128   391B FD 2E 22 00   mov32 cb, $00000022
9128   391F 00 00 
9129   3921 B0            cmp a, b
9130   3922 FD 72         sneq ; !=
9131   3924 E4            pop a
9132   3925             ; --- END RELATIONAL
9133   3925             ; --- START LOGICAL AND
9134   3925 D7            push a
9135   3926 11            mov a, b
9136   3927 FA FD FF      lea d, [bp + -3] ; $t
9137   392A 2A            mov b, [d]
9138   392B 38 00 00      mov c, 0
9139   392E 74            mov d, b
9140   392F 32            mov bl, [d]
9141   3930 A7 00         mov bh, 0
9142   3932 38 00 00      mov c, 0
9143   3935 FD A7         sand a, b
9144   3937 E4            pop a
9145   3938             ; --- END LOGICAL AND
9146   3938 C0 00 00      cmp b, 0
9147   393B C6 6C 39      je _while167_exit
9148   393E             _while167_block:
9149   393E             ; *s++ = *t++; 
9150   393E FA FF FF      lea d, [bp + -1] ; $s
9151   3941 2A            mov b, [d]
9152   3942 38 00 00      mov c, 0
9153   3945 FD 77         inc b
9154   3947 FA FF FF      lea d, [bp + -1] ; $s
9155   394A FD 43         mov [d], b
9156   394C FD 7D         dec b
9157   394E D8            push b
9158   394F                              
9159   394F FA FD FF      lea d, [bp + -3] ; $t
9160   3952 2A            mov b, [d]
9161   3953 38 00 00      mov c, 0
9162   3956 FD 77         inc b
9163   3958 FA FD FF      lea d, [bp + -3] ; $t
9164   395B FD 43         mov [d], b
9165   395D FD 7D         dec b
9166   395F 74            mov d, b
9167   3960 32            mov bl, [d]
9168   3961 A7 00         mov bh, 0
9169   3963 38 00 00      mov c, 0
9170   3966 E7            pop d
9171   3967 FD 3E         mov [d], bl
9172   3969 0A 0B 39      jmp _while167_cond
9173   396C             _while167_exit:
9174   396C 0A 6F 39      jmp _if166_exit
9175   396F             _if166_exit:
9176   396F             _if163_exit:
9177   396F             ; *s = '\0'; 
9178   396F FA FF FF      lea d, [bp + -1] ; $s
9179   3972 2A            mov b, [d]
9180   3973 38 00 00      mov c, 0
9181   3976 D8            push b
9182   3977                              
9183   3977 FD 2E 00 00   mov32 cb, $00000000
9183   397B 00 00 
9184   397D E7            pop d
9185   397E FD 3E         mov [d], bl
9186   3980 F9            leave
9187   3981 09            ret
9188   3982             
9189   3982             error:
9190   3982 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9191   3985             ; print("\nError: "); 
9192   3985                              
9193   3985             ; --- START FUNCTION CALL
9194   3985                              
9195   3985 26 63 53      mov b, _s78 ; "\nError: "
9196   3988 FD AB         swp b
9197   398A D8            push b
9198   398B 07 7C 3E      call print
9199   398E 51 02 00      add sp, 2
9200   3991             ; --- END FUNCTION CALL
9201   3991             ; print(msg); 
9202   3991                              
9203   3991             ; --- START FUNCTION CALL
9204   3991                              
9205   3991 FA 05 00      lea d, [bp + 5] ; $msg
9206   3994 2A            mov b, [d]
9207   3995 38 00 00      mov c, 0
9208   3998 FD AB         swp b
9209   399A D8            push b
9210   399B 07 7C 3E      call print
9211   399E 51 02 00      add sp, 2
9212   39A1             ; --- END FUNCTION CALL
9213   39A1             ; print("\n"); 
9214   39A1                              
9215   39A1             ; --- START FUNCTION CALL
9216   39A1                              
9217   39A1 26 22 50      mov b, _s10 ; "\n"
9218   39A4 FD AB         swp b
9219   39A6 D8            push b
9220   39A7 07 7C 3E      call print
9221   39AA 51 02 00      add sp, 2
9222   39AD             ; --- END FUNCTION CALL
9223   39AD             ; exit(); 
9224   39AD                              
9225   39AD             ; --- START FUNCTION CALL
9226   39AD 07 AC 42      call exit
9227   39B0 F9            leave
9228   39B1 09            ret
9229   39B2             
9230   39B2             error_s:
9231   39B2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9232   39B5             ; print("\nError: "); 
9233   39B5                              
9234   39B5             ; --- START FUNCTION CALL
9235   39B5                              
9236   39B5 26 63 53      mov b, _s78 ; "\nError: "
9237   39B8 FD AB         swp b
9238   39BA D8            push b
9239   39BB 07 7C 3E      call print
9240   39BE 51 02 00      add sp, 2
9241   39C1             ; --- END FUNCTION CALL
9242   39C1             ; print(msg); 
9243   39C1                              
9244   39C1             ; --- START FUNCTION CALL
9245   39C1                              
9246   39C1 FA 05 00      lea d, [bp + 5] ; $msg
9247   39C4 2A            mov b, [d]
9248   39C5 38 00 00      mov c, 0
9249   39C8 FD AB         swp b
9250   39CA D8            push b
9251   39CB 07 7C 3E      call print
9252   39CE 51 02 00      add sp, 2
9253   39D1             ; --- END FUNCTION CALL
9254   39D1             ; print(param); 
9255   39D1                              
9256   39D1             ; --- START FUNCTION CALL
9257   39D1                              
9258   39D1 FA 07 00      lea d, [bp + 7] ; $param
9259   39D4 2A            mov b, [d]
9260   39D5 38 00 00      mov c, 0
9261   39D8 FD AB         swp b
9262   39DA D8            push b
9263   39DB 07 7C 3E      call print
9264   39DE 51 02 00      add sp, 2
9265   39E1             ; --- END FUNCTION CALL
9266   39E1             ; print("\n"); 
9267   39E1                              
9268   39E1             ; --- START FUNCTION CALL
9269   39E1                              
9270   39E1 26 22 50      mov b, _s10 ; "\n"
9271   39E4 FD AB         swp b
9272   39E6 D8            push b
9273   39E7 07 7C 3E      call print
9274   39EA 51 02 00      add sp, 2
9275   39ED             ; --- END FUNCTION CALL
9276   39ED             ; exit(); 
9277   39ED                              
9278   39ED             ; --- START FUNCTION CALL
9279   39ED 07 AC 42      call exit
9280   39F0 F9            leave
9281   39F1 09            ret
9282   39F2             
9283   39F2             push_prog:
9284   39F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9285   39F5             ; if(prog_tos == 10) error("Cannot push prog. Stack overflow."); 
9286   39F5             _if168_cond:
9287   39F5                              
9288   39F5 3B E7 4F      mov d, _prog_tos ; $prog_tos
9289   39F8 2A            mov b, [d]
9290   39F9 38 00 00      mov c, 0
9291   39FC             ; --- START RELATIONAL
9292   39FC D7            push a
9293   39FD 11            mov a, b
9294   39FE FD 2E 0A 00   mov32 cb, $0000000a
9294   3A02 00 00 
9295   3A04 B0            cmp a, b
9296   3A05 FD 71         seq ; ==
9297   3A07 E4            pop a
9298   3A08             ; --- END RELATIONAL
9299   3A08 C0 00 00      cmp b, 0
9300   3A0B C6 1D 3A      je _if168_exit
9301   3A0E             _if168_TRUE:
9302   3A0E             ; error("Cannot push prog. Stack overflow."); 
9303   3A0E                              
9304   3A0E             ; --- START FUNCTION CALL
9305   3A0E                              
9306   3A0E 26 6C 53      mov b, _s79 ; "Cannot push prog. Stack overflow."
9307   3A11 FD AB         swp b
9308   3A13 D8            push b
9309   3A14 07 82 39      call error
9310   3A17 51 02 00      add sp, 2
9311   3A1A             ; --- END FUNCTION CALL
9312   3A1A 0A 1D 3A      jmp _if168_exit
9313   3A1D             _if168_exit:
9314   3A1D             ; prog_stack[prog_tos] = prog; 
9315   3A1D 3B D3 4F      mov d, _prog_stack_data ; $prog_stack
9316   3A20 D7            push a
9317   3A21 DA            push d
9318   3A22                              
9319   3A22 3B E7 4F      mov d, _prog_tos ; $prog_tos
9320   3A25 2A            mov b, [d]
9321   3A26 38 00 00      mov c, 0
9322   3A29 E7            pop d
9323   3A2A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9324   3A2E E4            pop a
9325   3A2F DA            push d
9326   3A30                              
9327   3A30 3B 87 4E      mov d, _prog ; $prog
9328   3A33 2A            mov b, [d]
9329   3A34 38 00 00      mov c, 0
9330   3A37 E7            pop d
9331   3A38 FD 43         mov [d], b
9332   3A3A             ; prog_tos++; 
9333   3A3A                              
9334   3A3A 3B E7 4F      mov d, _prog_tos ; $prog_tos
9335   3A3D 2A            mov b, [d]
9336   3A3E 38 00 00      mov c, 0
9337   3A41 11            mov a, b
9338   3A42 FD 77         inc b
9339   3A44 3B E7 4F      mov d, _prog_tos ; $prog_tos
9340   3A47 FD 43         mov [d], b
9341   3A49 27            mov b, a
9342   3A4A F9            leave
9343   3A4B 09            ret
9344   3A4C             
9345   3A4C             pop_prog:
9346   3A4C F8 00 00      enter 0 ; (push bp; mov bp, sp)
9347   3A4F             ; if(prog_tos == 0) error("Cannot pop prog. Stack overflow."); 
9348   3A4F             _if169_cond:
9349   3A4F                              
9350   3A4F 3B E7 4F      mov d, _prog_tos ; $prog_tos
9351   3A52 2A            mov b, [d]
9352   3A53 38 00 00      mov c, 0
9353   3A56             ; --- START RELATIONAL
9354   3A56 D7            push a
9355   3A57 11            mov a, b
9356   3A58 FD 2E 00 00   mov32 cb, $00000000
9356   3A5C 00 00 
9357   3A5E B0            cmp a, b
9358   3A5F FD 71         seq ; ==
9359   3A61 E4            pop a
9360   3A62             ; --- END RELATIONAL
9361   3A62 C0 00 00      cmp b, 0
9362   3A65 C6 77 3A      je _if169_exit
9363   3A68             _if169_TRUE:
9364   3A68             ; error("Cannot pop prog. Stack overflow."); 
9365   3A68                              
9366   3A68             ; --- START FUNCTION CALL
9367   3A68                              
9368   3A68 26 8E 53      mov b, _s80 ; "Cannot pop prog. Stack overflow."
9369   3A6B FD AB         swp b
9370   3A6D D8            push b
9371   3A6E 07 82 39      call error
9372   3A71 51 02 00      add sp, 2
9373   3A74             ; --- END FUNCTION CALL
9374   3A74 0A 77 3A      jmp _if169_exit
9375   3A77             _if169_exit:
9376   3A77             ; prog_tos--; 
9377   3A77                              
9378   3A77 3B E7 4F      mov d, _prog_tos ; $prog_tos
9379   3A7A 2A            mov b, [d]
9380   3A7B 38 00 00      mov c, 0
9381   3A7E 11            mov a, b
9382   3A7F FD 7D         dec b
9383   3A81 3B E7 4F      mov d, _prog_tos ; $prog_tos
9384   3A84 FD 43         mov [d], b
9385   3A86 27            mov b, a
9386   3A87             ; prog = prog_stack[prog_tos]; 
9387   3A87 3B 87 4E      mov d, _prog ; $prog
9388   3A8A DA            push d
9389   3A8B                              
9390   3A8B 3B D3 4F      mov d, _prog_stack_data ; $prog_stack
9391   3A8E D7            push a
9392   3A8F DA            push d
9393   3A90                              
9394   3A90 3B E7 4F      mov d, _prog_tos ; $prog_tos
9395   3A93 2A            mov b, [d]
9396   3A94 38 00 00      mov c, 0
9397   3A97 E7            pop d
9398   3A98 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9399   3A9C E4            pop a
9400   3A9D 2A            mov b, [d]
9401   3A9E 38 00 00      mov c, 0
9402   3AA1 E7            pop d
9403   3AA2 FD 43         mov [d], b
9404   3AA4 F9            leave
9405   3AA5 09            ret
9406   3AA6             
9407   3AA6             search_keyword:
9408   3AA6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9409   3AA9             ; int i; 
9410   3AA9 52 02 00      sub sp, 2
9411   3AAC             ; for(i = 0; keywords[i].keyword[0]; i++) 
9412   3AAC             _for170_init:
9413   3AAC FA FF FF      lea d, [bp + -1] ; $i
9414   3AAF DA            push d
9415   3AB0                              
9416   3AB0 FD 2E 00 00   mov32 cb, $00000000
9416   3AB4 00 00 
9417   3AB6 E7            pop d
9418   3AB7 FD 43         mov [d], b
9419   3AB9             _for170_cond:
9420   3AB9                              
9421   3AB9 3B 46 4D      mov d, _keywords_data ; $keywords
9422   3ABC D7            push a
9423   3ABD DA            push d
9424   3ABE                              
9425   3ABE FA FF FF      lea d, [bp + -1] ; $i
9426   3AC1 2A            mov b, [d]
9427   3AC2 38 00 00      mov c, 0
9428   3AC5 E7            pop d
9429   3AC6 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
9430   3ACA E4            pop a
9431   3ACB 58 00 00      add d, 0
9432   3ACE D7            push a
9433   3ACF DA            push d
9434   3AD0                              
9435   3AD0 FD 2E 00 00   mov32 cb, $00000000
9435   3AD4 00 00 
9436   3AD6 E7            pop d
9437   3AD7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
9438   3ADB E4            pop a
9439   3ADC 32            mov bl, [d]
9440   3ADD A7 00         mov bh, 0
9441   3ADF 38 00 00      mov c, 0
9442   3AE2 C0 00 00      cmp b, 0
9443   3AE5 C6 4D 3B      je _for170_exit
9444   3AE8             _for170_block:
9445   3AE8             ; if (!strcmp(keywords[i].keyword, keyword)) return keywords[i].tok; 
9446   3AE8             _if171_cond:
9447   3AE8                              
9448   3AE8             ; --- START FUNCTION CALL
9449   3AE8                              
9450   3AE8 FA 05 00      lea d, [bp + 5] ; $keyword
9451   3AEB 2A            mov b, [d]
9452   3AEC 38 00 00      mov c, 0
9453   3AEF FD AB         swp b
9454   3AF1 D8            push b
9455   3AF2                              
9456   3AF2 3B 46 4D      mov d, _keywords_data ; $keywords
9457   3AF5 D7            push a
9458   3AF6 DA            push d
9459   3AF7                              
9460   3AF7 FA FF FF      lea d, [bp + -1] ; $i
9461   3AFA 2A            mov b, [d]
9462   3AFB 38 00 00      mov c, 0
9463   3AFE E7            pop d
9464   3AFF FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
9465   3B03 E4            pop a
9466   3B04 58 00 00      add d, 0
9467   3B07 2A            mov b, [d]
9468   3B08 38 00 00      mov c, 0
9469   3B0B FD AB         swp b
9470   3B0D D8            push b
9471   3B0E 07 DE 3F      call strcmp
9472   3B11 51 04 00      add sp, 4
9473   3B14             ; --- END FUNCTION CALL
9474   3B14 C0 00 00      cmp b, 0
9475   3B17 C6 3A 3B      je _if171_exit
9476   3B1A             _if171_TRUE:
9477   3B1A             ; return keywords[i].tok; 
9478   3B1A                              
9479   3B1A 3B 46 4D      mov d, _keywords_data ; $keywords
9480   3B1D D7            push a
9481   3B1E DA            push d
9482   3B1F                              
9483   3B1F FA FF FF      lea d, [bp + -1] ; $i
9484   3B22 2A            mov b, [d]
9485   3B23 38 00 00      mov c, 0
9486   3B26 E7            pop d
9487   3B27 FD 13 03 00   mma 3 ; mov a, 3; mul a, b; add d, b
9488   3B2B E4            pop a
9489   3B2C 58 02 00      add d, 2
9490   3B2F 32            mov bl, [d]
9491   3B30 A7 00         mov bh, 0
9492   3B32 38 00 00      mov c, 0
9493   3B35 F9            leave
9494   3B36 09            ret
9495   3B37 0A 3A 3B      jmp _if171_exit
9496   3B3A             _if171_exit:
9497   3B3A             _for170_update:
9498   3B3A                              
9499   3B3A FA FF FF      lea d, [bp + -1] ; $i
9500   3B3D 2A            mov b, [d]
9501   3B3E 38 00 00      mov c, 0
9502   3B41 11            mov a, b
9503   3B42 FD 77         inc b
9504   3B44 FA FF FF      lea d, [bp + -1] ; $i
9505   3B47 FD 43         mov [d], b
9506   3B49 27            mov b, a
9507   3B4A 0A B9 3A      jmp _for170_cond
9508   3B4D             _for170_exit:
9509   3B4D             ; return -1; 
9510   3B4D                              
9511   3B4D FD 2E FF FF   mov32 cb, $ffffffff
9511   3B51 FF FF 
9512   3B53 F9            leave
9513   3B54 09            ret
9514   3B55             
9515   3B55             hex_to_int:
9516   3B55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9517   3B58             ; int value = 0; 
9518   3B58 52 02 00      sub sp, 2
9519   3B5B             ; --- START LOCAL VAR INITIALIZATION
9520   3B5B FA FF FF      lea d, [bp + -1] ; $value
9521   3B5E DA            push d
9522   3B5F                              
9523   3B5F FD 2E 00 00   mov32 cb, $00000000
9523   3B63 00 00 
9524   3B65 E7            pop d
9525   3B66 FD 43         mov [d], b
9526   3B68             ; --- END LOCAL VAR INITIALIZATION
9527   3B68             ; int i; 
9528   3B68 52 02 00      sub sp, 2
9529   3B6B             ; char hex_char; 
9530   3B6B 52 01 00      sub sp, 1
9531   3B6E             ; int len; 
9532   3B6E 52 02 00      sub sp, 2
9533   3B71             ; len = strlen(hex_string); 
9534   3B71 FA FA FF      lea d, [bp + -6] ; $len
9535   3B74 DA            push d
9536   3B75                              
9537   3B75             ; --- START FUNCTION CALL
9538   3B75                              
9539   3B75 FA 05 00      lea d, [bp + 5] ; $hex_string
9540   3B78 2A            mov b, [d]
9541   3B79 38 00 00      mov c, 0
9542   3B7C FD AB         swp b
9543   3B7E D8            push b
9544   3B7F 07 62 40      call strlen
9545   3B82 51 02 00      add sp, 2
9546   3B85             ; --- END FUNCTION CALL
9547   3B85 E7            pop d
9548   3B86 FD 43         mov [d], b
9549   3B88             ; for (i = 0; i < len; i++) { 
9550   3B88             _for172_init:
9551   3B88 FA FD FF      lea d, [bp + -3] ; $i
9552   3B8B DA            push d
9553   3B8C                              
9554   3B8C FD 2E 00 00   mov32 cb, $00000000
9554   3B90 00 00 
9555   3B92 E7            pop d
9556   3B93 FD 43         mov [d], b
9557   3B95             _for172_cond:
9558   3B95                              
9559   3B95 FA FD FF      lea d, [bp + -3] ; $i
9560   3B98 2A            mov b, [d]
9561   3B99 38 00 00      mov c, 0
9562   3B9C             ; --- START RELATIONAL
9563   3B9C D7            push a
9564   3B9D 11            mov a, b
9565   3B9E FA FA FF      lea d, [bp + -6] ; $len
9566   3BA1 2A            mov b, [d]
9567   3BA2 38 00 00      mov c, 0
9568   3BA5 B0            cmp a, b
9569   3BA6 FD 73         slt ; < (signed)
9570   3BA8 E4            pop a
9571   3BA9             ; --- END RELATIONAL
9572   3BA9 C0 00 00      cmp b, 0
9573   3BAC C6 B9 3D      je _for172_exit
9574   3BAF             _for172_block:
9575   3BAF             ; hex_char = hex_string[i]; 
9576   3BAF FA FC FF      lea d, [bp + -4] ; $hex_char
9577   3BB2 DA            push d
9578   3BB3                              
9579   3BB3 FA 05 00      lea d, [bp + 5] ; $hex_string
9580   3BB6 FD 2A         mov d, [d]
9581   3BB8 D7            push a
9582   3BB9 DA            push d
9583   3BBA                              
9584   3BBA FA FD FF      lea d, [bp + -3] ; $i
9585   3BBD 2A            mov b, [d]
9586   3BBE 38 00 00      mov c, 0
9587   3BC1 E7            pop d
9588   3BC2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
9589   3BC6 E4            pop a
9590   3BC7 32            mov bl, [d]
9591   3BC8 A7 00         mov bh, 0
9592   3BCA 38 00 00      mov c, 0
9593   3BCD E7            pop d
9594   3BCE FD 3E         mov [d], bl
9595   3BD0             ; if (hex_char >= 'a' && hex_char <= 'f')  
9596   3BD0             _if173_cond:
9597   3BD0                              
9598   3BD0 FA FC FF      lea d, [bp + -4] ; $hex_char
9599   3BD3 32            mov bl, [d]
9600   3BD4 A7 00         mov bh, 0
9601   3BD6 38 00 00      mov c, 0
9602   3BD9             ; --- START RELATIONAL
9603   3BD9 D7            push a
9604   3BDA 11            mov a, b
9605   3BDB FD 2E 61 00   mov32 cb, $00000061
9605   3BDF 00 00 
9606   3BE1 B0            cmp a, b
9607   3BE2 FD 80         sge ; >=
9608   3BE4 E4            pop a
9609   3BE5             ; --- END RELATIONAL
9610   3BE5             ; --- START LOGICAL AND
9611   3BE5 D7            push a
9612   3BE6 11            mov a, b
9613   3BE7 FA FC FF      lea d, [bp + -4] ; $hex_char
9614   3BEA 32            mov bl, [d]
9615   3BEB A7 00         mov bh, 0
9616   3BED 38 00 00      mov c, 0
9617   3BF0             ; --- START RELATIONAL
9618   3BF0 D7            push a
9619   3BF1 11            mov a, b
9620   3BF2 FD 2E 66 00   mov32 cb, $00000066
9620   3BF6 00 00 
9621   3BF8 B0            cmp a, b
9622   3BF9 FD 74         sle ; <= (signed)
9623   3BFB E4            pop a
9624   3BFC             ; --- END RELATIONAL
9625   3BFC FD A7         sand a, b
9626   3BFE E4            pop a
9627   3BFF             ; --- END LOGICAL AND
9628   3BFF C0 00 00      cmp b, 0
9629   3C02 C6 82 3C      je _if173_else
9630   3C05             _if173_TRUE:
9631   3C05             ; value = (value * 16) + (hex_char - 'a' + 10); 
9632   3C05 FA FF FF      lea d, [bp + -1] ; $value
9633   3C08 DA            push d
9634   3C09                              
9635   3C09                              
9636   3C09 FA FF FF      lea d, [bp + -1] ; $value
9637   3C0C 2A            mov b, [d]
9638   3C0D 38 00 00      mov c, 0
9639   3C10             ; --- START FACTORS
9640   3C10 D7            push a
9641   3C11 FD D8         push g
9642   3C13 11            mov a, b
9643   3C14 FD 7A         mov g, c
9644   3C16 FD 2E 10 00   mov32 cb, $00000010
9644   3C1A 00 00 
9645   3C1C D7            push a     ; save left operand
9646   3C1D 8E            xor a, b   ; xor sign bits
9647   3C1E FD AA         swp a      ; swap bytes
9648   3C20 83            mov cl, al ; save result of xor into 'dl'
9649   3C21 E4            pop a      ; restore left side operator
9650   3C22 DF            push cl    ; save result of xor above
9651   3C23 FD AA         swp a  
9652   3C25 93 80         test al, $80  
9653   3C27 FD AA         swp a  
9654   3C29 C6 2E 3C      jz skip_invert_a_174  
9655   3C2C FD 95         neg a 
9656   3C2E             skip_invert_a_174:   
9657   3C2E FD AB         swp b
9658   3C30 FD 93 80      test bl, $80  
9659   3C33 FD AB         swp b
9660   3C35 C6 3A 3C      jz skip_invert_b_174  
9661   3C38 FD 97         neg b 
9662   3C3A             skip_invert_b_174:   
9663   3C3A AC            mul a, b ; *
9664   3C3B FD 78         mov g, a
9665   3C3D 11            mov a, b
9666   3C3E EA            pop bl
9667   3C3F FD 93 80      test bl, $80
9668   3C42 C6 4F 3C      jz _same_signs_174
9669   3C45 2F            mov bl, al
9670   3C46 95            not a
9671   3C47 FD 97         neg b
9672   3C49 5B 00 00      adc a, 0
9673   3C4C FD 78         mov g, a
9674   3C4E 11            mov a, b
9675   3C4F             _same_signs_174:
9676   3C4F FD 38         mov c, g
9677   3C51 27            mov b, a
9678   3C52 FD F1         pop g
9679   3C54 E4            pop a
9680   3C55             ; --- END FACTORS
9681   3C55             ; --- START TERMS
9682   3C55 D7            push a
9683   3C56 FD D8         push g
9684   3C58 11            mov a, b
9685   3C59 FD 7A         mov g, c
9686   3C5B                              
9687   3C5B FA FC FF      lea d, [bp + -4] ; $hex_char
9688   3C5E 32            mov bl, [d]
9689   3C5F A7 00         mov bh, 0
9690   3C61 38 00 00      mov c, 0
9691   3C64             ; --- START TERMS
9692   3C64 D7            push a
9693   3C65 11            mov a, b
9694   3C66 FD 2E 61 00   mov32 cb, $00000061
9694   3C6A 00 00 
9695   3C6C 60            sub a, b
9696   3C6D 27            mov b, a
9697   3C6E 11            mov a, b
9698   3C6F FD 2E 0A 00   mov32 cb, $0000000a
9698   3C73 00 00 
9699   3C75 56            add b, a
9700   3C76 E4            pop a
9701   3C77             ; --- END TERMS
9702   3C77 FD 15         add32 cb, ga
9703   3C79 FD F1         pop g
9704   3C7B E4            pop a
9705   3C7C             ; --- END TERMS
9706   3C7C E7            pop d
9707   3C7D FD 43         mov [d], b
9708   3C7F 0A A6 3D      jmp _if173_exit
9709   3C82             _if173_else:
9710   3C82             ; if (hex_char >= 'A' && hex_char <= 'F')  
9711   3C82             _if175_cond:
9712   3C82                              
9713   3C82 FA FC FF      lea d, [bp + -4] ; $hex_char
9714   3C85 32            mov bl, [d]
9715   3C86 A7 00         mov bh, 0
9716   3C88 38 00 00      mov c, 0
9717   3C8B             ; --- START RELATIONAL
9718   3C8B D7            push a
9719   3C8C 11            mov a, b
9720   3C8D FD 2E 41 00   mov32 cb, $00000041
9720   3C91 00 00 
9721   3C93 B0            cmp a, b
9722   3C94 FD 80         sge ; >=
9723   3C96 E4            pop a
9724   3C97             ; --- END RELATIONAL
9725   3C97             ; --- START LOGICAL AND
9726   3C97 D7            push a
9727   3C98 11            mov a, b
9728   3C99 FA FC FF      lea d, [bp + -4] ; $hex_char
9729   3C9C 32            mov bl, [d]
9730   3C9D A7 00         mov bh, 0
9731   3C9F 38 00 00      mov c, 0
9732   3CA2             ; --- START RELATIONAL
9733   3CA2 D7            push a
9734   3CA3 11            mov a, b
9735   3CA4 FD 2E 46 00   mov32 cb, $00000046
9735   3CA8 00 00 
9736   3CAA B0            cmp a, b
9737   3CAB FD 74         sle ; <= (signed)
9738   3CAD E4            pop a
9739   3CAE             ; --- END RELATIONAL
9740   3CAE FD A7         sand a, b
9741   3CB0 E4            pop a
9742   3CB1             ; --- END LOGICAL AND
9743   3CB1 C0 00 00      cmp b, 0
9744   3CB4 C6 34 3D      je _if175_else
9745   3CB7             _if175_TRUE:
9746   3CB7             ; value = (value * 16) + (hex_char - 'A' + 10); 
9747   3CB7 FA FF FF      lea d, [bp + -1] ; $value
9748   3CBA DA            push d
9749   3CBB                              
9750   3CBB                              
9751   3CBB FA FF FF      lea d, [bp + -1] ; $value
9752   3CBE 2A            mov b, [d]
9753   3CBF 38 00 00      mov c, 0
9754   3CC2             ; --- START FACTORS
9755   3CC2 D7            push a
9756   3CC3 FD D8         push g
9757   3CC5 11            mov a, b
9758   3CC6 FD 7A         mov g, c
9759   3CC8 FD 2E 10 00   mov32 cb, $00000010
9759   3CCC 00 00 
9760   3CCE D7            push a     ; save left operand
9761   3CCF 8E            xor a, b   ; xor sign bits
9762   3CD0 FD AA         swp a      ; swap bytes
9763   3CD2 83            mov cl, al ; save result of xor into 'dl'
9764   3CD3 E4            pop a      ; restore left side operator
9765   3CD4 DF            push cl    ; save result of xor above
9766   3CD5 FD AA         swp a  
9767   3CD7 93 80         test al, $80  
9768   3CD9 FD AA         swp a  
9769   3CDB C6 E0 3C      jz skip_invert_a_176  
9770   3CDE FD 95         neg a 
9771   3CE0             skip_invert_a_176:   
9772   3CE0 FD AB         swp b
9773   3CE2 FD 93 80      test bl, $80  
9774   3CE5 FD AB         swp b
9775   3CE7 C6 EC 3C      jz skip_invert_b_176  
9776   3CEA FD 97         neg b 
9777   3CEC             skip_invert_b_176:   
9778   3CEC AC            mul a, b ; *
9779   3CED FD 78         mov g, a
9780   3CEF 11            mov a, b
9781   3CF0 EA            pop bl
9782   3CF1 FD 93 80      test bl, $80
9783   3CF4 C6 01 3D      jz _same_signs_176
9784   3CF7 2F            mov bl, al
9785   3CF8 95            not a
9786   3CF9 FD 97         neg b
9787   3CFB 5B 00 00      adc a, 0
9788   3CFE FD 78         mov g, a
9789   3D00 11            mov a, b
9790   3D01             _same_signs_176:
9791   3D01 FD 38         mov c, g
9792   3D03 27            mov b, a
9793   3D04 FD F1         pop g
9794   3D06 E4            pop a
9795   3D07             ; --- END FACTORS
9796   3D07             ; --- START TERMS
9797   3D07 D7            push a
9798   3D08 FD D8         push g
9799   3D0A 11            mov a, b
9800   3D0B FD 7A         mov g, c
9801   3D0D                              
9802   3D0D FA FC FF      lea d, [bp + -4] ; $hex_char
9803   3D10 32            mov bl, [d]
9804   3D11 A7 00         mov bh, 0
9805   3D13 38 00 00      mov c, 0
9806   3D16             ; --- START TERMS
9807   3D16 D7            push a
9808   3D17 11            mov a, b
9809   3D18 FD 2E 41 00   mov32 cb, $00000041
9809   3D1C 00 00 
9810   3D1E 60            sub a, b
9811   3D1F 27            mov b, a
9812   3D20 11            mov a, b
9813   3D21 FD 2E 0A 00   mov32 cb, $0000000a
9813   3D25 00 00 
9814   3D27 56            add b, a
9815   3D28 E4            pop a
9816   3D29             ; --- END TERMS
9817   3D29 FD 15         add32 cb, ga
9818   3D2B FD F1         pop g
9819   3D2D E4            pop a
9820   3D2E             ; --- END TERMS
9821   3D2E E7            pop d
9822   3D2F FD 43         mov [d], b
9823   3D31 0A A6 3D      jmp _if175_exit
9824   3D34             _if175_else:
9825   3D34             ; value = (value * 16) + (hex_char - '0'); 
9826   3D34 FA FF FF      lea d, [bp + -1] ; $value
9827   3D37 DA            push d
9828   3D38                              
9829   3D38                              
9830   3D38 FA FF FF      lea d, [bp + -1] ; $value
9831   3D3B 2A            mov b, [d]
9832   3D3C 38 00 00      mov c, 0
9833   3D3F             ; --- START FACTORS
9834   3D3F D7            push a
9835   3D40 FD D8         push g
9836   3D42 11            mov a, b
9837   3D43 FD 7A         mov g, c
9838   3D45 FD 2E 10 00   mov32 cb, $00000010
9838   3D49 00 00 
9839   3D4B D7            push a     ; save left operand
9840   3D4C 8E            xor a, b   ; xor sign bits
9841   3D4D FD AA         swp a      ; swap bytes
9842   3D4F 83            mov cl, al ; save result of xor into 'dl'
9843   3D50 E4            pop a      ; restore left side operator
9844   3D51 DF            push cl    ; save result of xor above
9845   3D52 FD AA         swp a  
9846   3D54 93 80         test al, $80  
9847   3D56 FD AA         swp a  
9848   3D58 C6 5D 3D      jz skip_invert_a_177  
9849   3D5B FD 95         neg a 
9850   3D5D             skip_invert_a_177:   
9851   3D5D FD AB         swp b
9852   3D5F FD 93 80      test bl, $80  
9853   3D62 FD AB         swp b
9854   3D64 C6 69 3D      jz skip_invert_b_177  
9855   3D67 FD 97         neg b 
9856   3D69             skip_invert_b_177:   
9857   3D69 AC            mul a, b ; *
9858   3D6A FD 78         mov g, a
9859   3D6C 11            mov a, b
9860   3D6D EA            pop bl
9861   3D6E FD 93 80      test bl, $80
9862   3D71 C6 7E 3D      jz _same_signs_177
9863   3D74 2F            mov bl, al
9864   3D75 95            not a
9865   3D76 FD 97         neg b
9866   3D78 5B 00 00      adc a, 0
9867   3D7B FD 78         mov g, a
9868   3D7D 11            mov a, b
9869   3D7E             _same_signs_177:
9870   3D7E FD 38         mov c, g
9871   3D80 27            mov b, a
9872   3D81 FD F1         pop g
9873   3D83 E4            pop a
9874   3D84             ; --- END FACTORS
9875   3D84             ; --- START TERMS
9876   3D84 D7            push a
9877   3D85 FD D8         push g
9878   3D87 11            mov a, b
9879   3D88 FD 7A         mov g, c
9880   3D8A                              
9881   3D8A FA FC FF      lea d, [bp + -4] ; $hex_char
9882   3D8D 32            mov bl, [d]
9883   3D8E A7 00         mov bh, 0
9884   3D90 38 00 00      mov c, 0
9885   3D93             ; --- START TERMS
9886   3D93 D7            push a
9887   3D94 11            mov a, b
9888   3D95 FD 2E 30 00   mov32 cb, $00000030
9888   3D99 00 00 
9889   3D9B 60            sub a, b
9890   3D9C 27            mov b, a
9891   3D9D E4            pop a
9892   3D9E             ; --- END TERMS
9893   3D9E FD 15         add32 cb, ga
9894   3DA0 FD F1         pop g
9895   3DA2 E4            pop a
9896   3DA3             ; --- END TERMS
9897   3DA3 E7            pop d
9898   3DA4 FD 43         mov [d], b
9899   3DA6             _if175_exit:
9900   3DA6             _if173_exit:
9901   3DA6             _for172_update:
9902   3DA6                              
9903   3DA6 FA FD FF      lea d, [bp + -3] ; $i
9904   3DA9 2A            mov b, [d]
9905   3DAA 38 00 00      mov c, 0
9906   3DAD 11            mov a, b
9907   3DAE FD 77         inc b
9908   3DB0 FA FD FF      lea d, [bp + -3] ; $i
9909   3DB3 FD 43         mov [d], b
9910   3DB5 27            mov b, a
9911   3DB6 0A 95 3B      jmp _for172_cond
9912   3DB9             _for172_exit:
9913   3DB9             ; return value; 
9914   3DB9                              
9915   3DB9 FA FF FF      lea d, [bp + -1] ; $value
9916   3DBC 2A            mov b, [d]
9917   3DBD 38 00 00      mov c, 0
9918   3DC0 F9            leave
9919   3DC1 09            ret
9920   3DC2             
9921   3DC2             loadfile:
9922   3DC2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9923   3DC5             ; --- BEGIN INLINE ASM SEGMENT
9924   3DC5               meta mov d, destination
out/asm.asm line 9924: unrecognized instruction.          (META)
9925   3DC5 15            mov a, [d]
9926   3DC6 4F            mov di, a
9927   3DC7               meta mov d, filename
out/asm.asm line 9927: unrecognized instruction.          (META)
9928   3DC7 FD 2A         mov d, [d]
9929   3DC9 19 14         mov al, 20
9930   3DCB 05 04         syscall sys_filesystem
9931   3DCD             ; --- END INLINE ASM SEGMENT
9932   3DCD F9            leave
9933   3DCE 09            ret
9934   3DCF             
9935   3DCF             exp:
9936   3DCF F8 00 00      enter 0 ; (push bp; mov bp, sp)
9937   3DD2             ; int i; 
9938   3DD2 52 02 00      sub sp, 2
9939   3DD5             ; int result = 1; 
9940   3DD5 52 02 00      sub sp, 2
9941   3DD8             ; --- START LOCAL VAR INITIALIZATION
9942   3DD8 FA FD FF      lea d, [bp + -3] ; $result
9943   3DDB DA            push d
9944   3DDC                              
9945   3DDC FD 2E 01 00   mov32 cb, $00000001
9945   3DE0 00 00 
9946   3DE2 E7            pop d
9947   3DE3 FD 43         mov [d], b
9948   3DE5             ; --- END LOCAL VAR INITIALIZATION
9949   3DE5             ; for(i = 0; i < exp; i++){ 
9950   3DE5             _for178_init:
9951   3DE5 FA FF FF      lea d, [bp + -1] ; $i
9952   3DE8 DA            push d
9953   3DE9                              
9954   3DE9 FD 2E 00 00   mov32 cb, $00000000
9954   3DED 00 00 
9955   3DEF E7            pop d
9956   3DF0 FD 43         mov [d], b
9957   3DF2             _for178_cond:
9958   3DF2                              
9959   3DF2 FA FF FF      lea d, [bp + -1] ; $i
9960   3DF5 2A            mov b, [d]
9961   3DF6 38 00 00      mov c, 0
9962   3DF9             ; --- START RELATIONAL
9963   3DF9 D7            push a
9964   3DFA 11            mov a, b
9965   3DFB FA 07 00      lea d, [bp + 7] ; $exp
9966   3DFE 2A            mov b, [d]
9967   3DFF 38 00 00      mov c, 0
9968   3E02 B0            cmp a, b
9969   3E03 FD 73         slt ; < (signed)
9970   3E05 E4            pop a
9971   3E06             ; --- END RELATIONAL
9972   3E06 C0 00 00      cmp b, 0
9973   3E09 C6 73 3E      je _for178_exit
9974   3E0C             _for178_block:
9975   3E0C             ; result = result * base; 
9976   3E0C FA FD FF      lea d, [bp + -3] ; $result
9977   3E0F DA            push d
9978   3E10                              
9979   3E10 FA FD FF      lea d, [bp + -3] ; $result
9980   3E13 2A            mov b, [d]
9981   3E14 38 00 00      mov c, 0
9982   3E17             ; --- START FACTORS
9983   3E17 D7            push a
9984   3E18 FD D8         push g
9985   3E1A 11            mov a, b
9986   3E1B FD 7A         mov g, c
9987   3E1D FA 05 00      lea d, [bp + 5] ; $base
9988   3E20 2A            mov b, [d]
9989   3E21 38 00 00      mov c, 0
9990   3E24 D7            push a     ; save left operand
9991   3E25 8E            xor a, b   ; xor sign bits
9992   3E26 FD AA         swp a      ; swap bytes
9993   3E28 83            mov cl, al ; save result of xor into 'dl'
9994   3E29 E4            pop a      ; restore left side operator
9995   3E2A DF            push cl    ; save result of xor above
9996   3E2B FD AA         swp a  
9997   3E2D 93 80         test al, $80  
9998   3E2F FD AA         swp a  
9999   3E31 C6 36 3E      jz skip_invert_a_179  
10000  3E34 FD 95         neg a 
10001  3E36             skip_invert_a_179:   
10002  3E36 FD AB         swp b
10003  3E38 FD 93 80      test bl, $80  
10004  3E3B FD AB         swp b
10005  3E3D C6 42 3E      jz skip_invert_b_179  
10006  3E40 FD 97         neg b 
10007  3E42             skip_invert_b_179:   
10008  3E42 AC            mul a, b ; *
10009  3E43 FD 78         mov g, a
10010  3E45 11            mov a, b
10011  3E46 EA            pop bl
10012  3E47 FD 93 80      test bl, $80
10013  3E4A C6 57 3E      jz _same_signs_179
10014  3E4D 2F            mov bl, al
10015  3E4E 95            not a
10016  3E4F FD 97         neg b
10017  3E51 5B 00 00      adc a, 0
10018  3E54 FD 78         mov g, a
10019  3E56 11            mov a, b
10020  3E57             _same_signs_179:
10021  3E57 FD 38         mov c, g
10022  3E59 27            mov b, a
10023  3E5A FD F1         pop g
10024  3E5C E4            pop a
10025  3E5D             ; --- END FACTORS
10026  3E5D E7            pop d
10027  3E5E FD 43         mov [d], b
10028  3E60             _for178_update:
10029  3E60                              
10030  3E60 FA FF FF      lea d, [bp + -1] ; $i
10031  3E63 2A            mov b, [d]
10032  3E64 38 00 00      mov c, 0
10033  3E67 11            mov a, b
10034  3E68 FD 77         inc b
10035  3E6A FA FF FF      lea d, [bp + -1] ; $i
10036  3E6D FD 43         mov [d], b
10037  3E6F 27            mov b, a
10038  3E70 0A F2 3D      jmp _for178_cond
10039  3E73             _for178_exit:
10040  3E73             ; return result; 
10041  3E73                              
10042  3E73 FA FD FF      lea d, [bp + -3] ; $result
10043  3E76 2A            mov b, [d]
10044  3E77 38 00 00      mov c, 0
10045  3E7A F9            leave
10046  3E7B 09            ret
10047  3E7C             
10048  3E7C             print:
10049  3E7C F8 00 00      enter 0 ; (push bp; mov bp, sp)
10050  3E7F             ; --- BEGIN INLINE ASM SEGMENT
10051  3E7F FA 05 00      lea d, [bp + 5] ; $s
10052  3E82 FD 2A         mov d, [d]
10053  3E84             _puts_L1_print:
10054  3E84 1E            mov al, [d]
10055  3E85 B9 00         cmp al, 0
10056  3E87 C6 93 3E      jz _puts_END_print
10057  3E8A 23            mov ah, al
10058  3E8B 19 00         mov al, 0
10059  3E8D 05 03         syscall sys_io
10060  3E8F 79            inc d
10061  3E90 0A 84 3E      jmp _puts_L1_print
10062  3E93             _puts_END_print:
10063  3E93             ; --- END INLINE ASM SEGMENT
10064  3E93 F9            leave
10065  3E94 09            ret
10066  3E95             
10067  3E95             alloc:
10068  3E95 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10069  3E98             ; heap_top = heap_top + bytes; 
10070  3E98 3B EB 53      mov d, _heap_top ; $heap_top
10071  3E9B DA            push d
10072  3E9C                              
10073  3E9C 3B EB 53      mov d, _heap_top ; $heap_top
10074  3E9F 2A            mov b, [d]
10075  3EA0 38 00 00      mov c, 0
10076  3EA3             ; --- START TERMS
10077  3EA3 D7            push a
10078  3EA4 11            mov a, b
10079  3EA5 FA 05 00      lea d, [bp + 5] ; $bytes
10080  3EA8 2A            mov b, [d]
10081  3EA9 38 00 00      mov c, 0
10082  3EAC 56            add b, a
10083  3EAD E4            pop a
10084  3EAE             ; --- END TERMS
10085  3EAE E7            pop d
10086  3EAF FD 43         mov [d], b
10087  3EB1             ; return heap_top - bytes; 
10088  3EB1                              
10089  3EB1 3B EB 53      mov d, _heap_top ; $heap_top
10090  3EB4 2A            mov b, [d]
10091  3EB5 38 00 00      mov c, 0
10092  3EB8             ; --- START TERMS
10093  3EB8 D7            push a
10094  3EB9 11            mov a, b
10095  3EBA FA 05 00      lea d, [bp + 5] ; $bytes
10096  3EBD 2A            mov b, [d]
10097  3EBE 38 00 00      mov c, 0
10098  3EC1 60            sub a, b
10099  3EC2 27            mov b, a
10100  3EC3 E4            pop a
10101  3EC4             ; --- END TERMS
10102  3EC4 F9            leave
10103  3EC5 09            ret
10104  3EC6             
10105  3EC6             is_space:
10106  3EC6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10107  3EC9             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
10108  3EC9                              
10109  3EC9 FA 05 00      lea d, [bp + 5] ; $c
10110  3ECC 32            mov bl, [d]
10111  3ECD A7 00         mov bh, 0
10112  3ECF 38 00 00      mov c, 0
10113  3ED2             ; --- START RELATIONAL
10114  3ED2 D7            push a
10115  3ED3 11            mov a, b
10116  3ED4 FD 2E 20 00   mov32 cb, $00000020
10116  3ED8 00 00 
10117  3EDA B0            cmp a, b
10118  3EDB FD 71         seq ; ==
10119  3EDD E4            pop a
10120  3EDE             ; --- END RELATIONAL
10121  3EDE             ; --- START LOGICAL OR
10122  3EDE D7            push a
10123  3EDF 11            mov a, b
10124  3EE0 FA 05 00      lea d, [bp + 5] ; $c
10125  3EE3 32            mov bl, [d]
10126  3EE4 A7 00         mov bh, 0
10127  3EE6 38 00 00      mov c, 0
10128  3EE9             ; --- START RELATIONAL
10129  3EE9 D7            push a
10130  3EEA 11            mov a, b
10131  3EEB FD 2E 09 00   mov32 cb, $00000009
10131  3EEF 00 00 
10132  3EF1 B0            cmp a, b
10133  3EF2 FD 71         seq ; ==
10134  3EF4 E4            pop a
10135  3EF5             ; --- END RELATIONAL
10136  3EF5 FD A8         sor a, b ; ||
10137  3EF7 11            mov a, b
10138  3EF8 FA 05 00      lea d, [bp + 5] ; $c
10139  3EFB 32            mov bl, [d]
10140  3EFC A7 00         mov bh, 0
10141  3EFE 38 00 00      mov c, 0
10142  3F01             ; --- START RELATIONAL
10143  3F01 D7            push a
10144  3F02 11            mov a, b
10145  3F03 FD 2E 0A 00   mov32 cb, $0000000a
10145  3F07 00 00 
10146  3F09 B0            cmp a, b
10147  3F0A FD 71         seq ; ==
10148  3F0C E4            pop a
10149  3F0D             ; --- END RELATIONAL
10150  3F0D FD A8         sor a, b ; ||
10151  3F0F 11            mov a, b
10152  3F10 FA 05 00      lea d, [bp + 5] ; $c
10153  3F13 32            mov bl, [d]
10154  3F14 A7 00         mov bh, 0
10155  3F16 38 00 00      mov c, 0
10156  3F19             ; --- START RELATIONAL
10157  3F19 D7            push a
10158  3F1A 11            mov a, b
10159  3F1B FD 2E 0D 00   mov32 cb, $0000000d
10159  3F1F 00 00 
10160  3F21 B0            cmp a, b
10161  3F22 FD 71         seq ; ==
10162  3F24 E4            pop a
10163  3F25             ; --- END RELATIONAL
10164  3F25 FD A8         sor a, b ; ||
10165  3F27 E4            pop a
10166  3F28             ; --- END LOGICAL OR
10167  3F28 F9            leave
10168  3F29 09            ret
10169  3F2A             
10170  3F2A             is_alpha:
10171  3F2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
10172  3F2D             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
10173  3F2D                              
10174  3F2D                              
10175  3F2D FA 05 00      lea d, [bp + 5] ; $c
10176  3F30 32            mov bl, [d]
10177  3F31 A7 00         mov bh, 0
10178  3F33 38 00 00      mov c, 0
10179  3F36             ; --- START RELATIONAL
10180  3F36 D7            push a
10181  3F37 11            mov a, b
10182  3F38 FD 2E 61 00   mov32 cb, $00000061
10182  3F3C 00 00 
10183  3F3E B0            cmp a, b
10184  3F3F FD 80         sge ; >=
10185  3F41 E4            pop a
10186  3F42             ; --- END RELATIONAL
10187  3F42             ; --- START LOGICAL AND
10188  3F42 D7            push a
10189  3F43 11            mov a, b
10190  3F44 FA 05 00      lea d, [bp + 5] ; $c
10191  3F47 32            mov bl, [d]
10192  3F48 A7 00         mov bh, 0
10193  3F4A 38 00 00      mov c, 0
10194  3F4D             ; --- START RELATIONAL
10195  3F4D D7            push a
10196  3F4E 11            mov a, b
10197  3F4F FD 2E 7A 00   mov32 cb, $0000007a
10197  3F53 00 00 
10198  3F55 B0            cmp a, b
10199  3F56 FD 74         sle ; <= (signed)
10200  3F58 E4            pop a
10201  3F59             ; --- END RELATIONAL
10202  3F59 FD A7         sand a, b
10203  3F5B E4            pop a
10204  3F5C             ; --- END LOGICAL AND
10205  3F5C             ; --- START LOGICAL OR
10206  3F5C D7            push a
10207  3F5D 11            mov a, b
10208  3F5E FA 05 00      lea d, [bp + 5] ; $c
10209  3F61 32            mov bl, [d]
10210  3F62 A7 00         mov bh, 0
10211  3F64 38 00 00      mov c, 0
10212  3F67             ; --- START RELATIONAL
10213  3F67 D7            push a
10214  3F68 11            mov a, b
10215  3F69 FD 2E 41 00   mov32 cb, $00000041
10215  3F6D 00 00 
10216  3F6F B0            cmp a, b
10217  3F70 FD 80         sge ; >=
10218  3F72 E4            pop a
10219  3F73             ; --- END RELATIONAL
10220  3F73             ; --- START LOGICAL AND
10221  3F73 D7            push a
10222  3F74 11            mov a, b
10223  3F75 FA 05 00      lea d, [bp + 5] ; $c
10224  3F78 32            mov bl, [d]
10225  3F79 A7 00         mov bh, 0
10226  3F7B 38 00 00      mov c, 0
10227  3F7E             ; --- START RELATIONAL
10228  3F7E D7            push a
10229  3F7F 11            mov a, b
10230  3F80 FD 2E 5A 00   mov32 cb, $0000005a
10230  3F84 00 00 
10231  3F86 B0            cmp a, b
10232  3F87 FD 74         sle ; <= (signed)
10233  3F89 E4            pop a
10234  3F8A             ; --- END RELATIONAL
10235  3F8A FD A7         sand a, b
10236  3F8C E4            pop a
10237  3F8D             ; --- END LOGICAL AND
10238  3F8D FD A8         sor a, b ; ||
10239  3F8F 11            mov a, b
10240  3F90 FA 05 00      lea d, [bp + 5] ; $c
10241  3F93 32            mov bl, [d]
10242  3F94 A7 00         mov bh, 0
10243  3F96 38 00 00      mov c, 0
10244  3F99             ; --- START RELATIONAL
10245  3F99 D7            push a
10246  3F9A 11            mov a, b
10247  3F9B FD 2E 5F 00   mov32 cb, $0000005f
10247  3F9F 00 00 
10248  3FA1 B0            cmp a, b
10249  3FA2 FD 71         seq ; ==
10250  3FA4 E4            pop a
10251  3FA5             ; --- END RELATIONAL
10252  3FA5 FD A8         sor a, b ; ||
10253  3FA7 E4            pop a
10254  3FA8             ; --- END LOGICAL OR
10255  3FA8 F9            leave
10256  3FA9 09            ret
10257  3FAA             
10258  3FAA             is_digit:
10259  3FAA F8 00 00      enter 0 ; (push bp; mov bp, sp)
10260  3FAD             ; return c >= '0' && c <= '9'; 
10261  3FAD                              
10262  3FAD FA 05 00      lea d, [bp + 5] ; $c
10263  3FB0 32            mov bl, [d]
10264  3FB1 A7 00         mov bh, 0
10265  3FB3 38 00 00      mov c, 0
10266  3FB6             ; --- START RELATIONAL
10267  3FB6 D7            push a
10268  3FB7 11            mov a, b
10269  3FB8 FD 2E 30 00   mov32 cb, $00000030
10269  3FBC 00 00 
10270  3FBE B0            cmp a, b
10271  3FBF FD 80         sge ; >=
10272  3FC1 E4            pop a
10273  3FC2             ; --- END RELATIONAL
10274  3FC2             ; --- START LOGICAL AND
10275  3FC2 D7            push a
10276  3FC3 11            mov a, b
10277  3FC4 FA 05 00      lea d, [bp + 5] ; $c
10278  3FC7 32            mov bl, [d]
10279  3FC8 A7 00         mov bh, 0
10280  3FCA 38 00 00      mov c, 0
10281  3FCD             ; --- START RELATIONAL
10282  3FCD D7            push a
10283  3FCE 11            mov a, b
10284  3FCF FD 2E 39 00   mov32 cb, $00000039
10284  3FD3 00 00 
10285  3FD5 B0            cmp a, b
10286  3FD6 FD 74         sle ; <= (signed)
10287  3FD8 E4            pop a
10288  3FD9             ; --- END RELATIONAL
10289  3FD9 FD A7         sand a, b
10290  3FDB E4            pop a
10291  3FDC             ; --- END LOGICAL AND
10292  3FDC F9            leave
10293  3FDD 09            ret
10294  3FDE             
10295  3FDE             strcmp:
10296  3FDE F8 00 00      enter 0 ; (push bp; mov bp, sp)
10297  3FE1             ; while (*s1 && (*s1 == *s2)) { 
10298  3FE1             _while180_cond:
10299  3FE1                              
10300  3FE1 FA 05 00      lea d, [bp + 5] ; $s1
10301  3FE4 2A            mov b, [d]
10302  3FE5 38 00 00      mov c, 0
10303  3FE8 74            mov d, b
10304  3FE9 32            mov bl, [d]
10305  3FEA A7 00         mov bh, 0
10306  3FEC 38 00 00      mov c, 0
10307  3FEF             ; --- START LOGICAL AND
10308  3FEF D7            push a
10309  3FF0 11            mov a, b
10310  3FF1                              
10311  3FF1 FA 05 00      lea d, [bp + 5] ; $s1
10312  3FF4 2A            mov b, [d]
10313  3FF5 38 00 00      mov c, 0
10314  3FF8 74            mov d, b
10315  3FF9 32            mov bl, [d]
10316  3FFA A7 00         mov bh, 0
10317  3FFC 38 00 00      mov c, 0
10318  3FFF             ; --- START RELATIONAL
10319  3FFF D7            push a
10320  4000 11            mov a, b
10321  4001 FA 07 00      lea d, [bp + 7] ; $s2
10322  4004 2A            mov b, [d]
10323  4005 38 00 00      mov c, 0
10324  4008 74            mov d, b
10325  4009 32            mov bl, [d]
10326  400A A7 00         mov bh, 0
10327  400C 38 00 00      mov c, 0
10328  400F B0            cmp a, b
10329  4010 FD 71         seq ; ==
10330  4012 E4            pop a
10331  4013             ; --- END RELATIONAL
10332  4013 FD A7         sand a, b
10333  4015 E4            pop a
10334  4016             ; --- END LOGICAL AND
10335  4016 C0 00 00      cmp b, 0
10336  4019 C6 3F 40      je _while180_exit
10337  401C             _while180_block:
10338  401C             ; s1++; 
10339  401C                              
10340  401C FA 05 00      lea d, [bp + 5] ; $s1
10341  401F 2A            mov b, [d]
10342  4020 38 00 00      mov c, 0
10343  4023 FD 77         inc b
10344  4025 FA 05 00      lea d, [bp + 5] ; $s1
10345  4028 FD 43         mov [d], b
10346  402A FD 7D         dec b
10347  402C             ; s2++; 
10348  402C                              
10349  402C FA 07 00      lea d, [bp + 7] ; $s2
10350  402F 2A            mov b, [d]
10351  4030 38 00 00      mov c, 0
10352  4033 FD 77         inc b
10353  4035 FA 07 00      lea d, [bp + 7] ; $s2
10354  4038 FD 43         mov [d], b
10355  403A FD 7D         dec b
10356  403C 0A E1 3F      jmp _while180_cond
10357  403F             _while180_exit:
10358  403F             ; return *s1 - *s2; 
10359  403F                              
10360  403F FA 05 00      lea d, [bp + 5] ; $s1
10361  4042 2A            mov b, [d]
10362  4043 38 00 00      mov c, 0
10363  4046 74            mov d, b
10364  4047 32            mov bl, [d]
10365  4048 A7 00         mov bh, 0
10366  404A 38 00 00      mov c, 0
10367  404D             ; --- START TERMS
10368  404D D7            push a
10369  404E 11            mov a, b
10370  404F FA 07 00      lea d, [bp + 7] ; $s2
10371  4052 2A            mov b, [d]
10372  4053 38 00 00      mov c, 0
10373  4056 74            mov d, b
10374  4057 32            mov bl, [d]
10375  4058 A7 00         mov bh, 0
10376  405A 38 00 00      mov c, 0
10377  405D 60            sub a, b
10378  405E 27            mov b, a
10379  405F E4            pop a
10380  4060             ; --- END TERMS
10381  4060 F9            leave
10382  4061 09            ret
10383  4062             
10384  4062             strlen:
10385  4062 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10386  4065             ; int length; 
10387  4065 52 02 00      sub sp, 2
10388  4068             ; length = 0; 
10389  4068 FA FF FF      lea d, [bp + -1] ; $length
10390  406B DA            push d
10391  406C                              
10392  406C FD 2E 00 00   mov32 cb, $00000000
10392  4070 00 00 
10393  4072 E7            pop d
10394  4073 FD 43         mov [d], b
10395  4075             ; while (str[length] != 0) { 
10396  4075             _while181_cond:
10397  4075                              
10398  4075 FA 05 00      lea d, [bp + 5] ; $str
10399  4078 FD 2A         mov d, [d]
10400  407A D7            push a
10401  407B DA            push d
10402  407C                              
10403  407C FA FF FF      lea d, [bp + -1] ; $length
10404  407F 2A            mov b, [d]
10405  4080 38 00 00      mov c, 0
10406  4083 E7            pop d
10407  4084 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
10408  4088 E4            pop a
10409  4089 32            mov bl, [d]
10410  408A A7 00         mov bh, 0
10411  408C 38 00 00      mov c, 0
10412  408F             ; --- START RELATIONAL
10413  408F D7            push a
10414  4090 11            mov a, b
10415  4091 FD 2E 00 00   mov32 cb, $00000000
10415  4095 00 00 
10416  4097 B0            cmp a, b
10417  4098 FD 72         sneq ; !=
10418  409A E4            pop a
10419  409B             ; --- END RELATIONAL
10420  409B C0 00 00      cmp b, 0
10421  409E C6 B4 40      je _while181_exit
10422  40A1             _while181_block:
10423  40A1             ; length++; 
10424  40A1                              
10425  40A1 FA FF FF      lea d, [bp + -1] ; $length
10426  40A4 2A            mov b, [d]
10427  40A5 38 00 00      mov c, 0
10428  40A8 11            mov a, b
10429  40A9 FD 77         inc b
10430  40AB FA FF FF      lea d, [bp + -1] ; $length
10431  40AE FD 43         mov [d], b
10432  40B0 27            mov b, a
10433  40B1 0A 75 40      jmp _while181_cond
10434  40B4             _while181_exit:
10435  40B4             ; return length; 
10436  40B4                              
10437  40B4 FA FF FF      lea d, [bp + -1] ; $length
10438  40B7 2A            mov b, [d]
10439  40B8 38 00 00      mov c, 0
10440  40BB F9            leave
10441  40BC 09            ret
10442  40BD             
10443  40BD             atoi:
10444  40BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
10445  40C0             ; int result = 0;  // Initialize result 
10446  40C0 52 02 00      sub sp, 2
10447  40C3             ; --- START LOCAL VAR INITIALIZATION
10448  40C3 FA FF FF      lea d, [bp + -1] ; $result
10449  40C6 DA            push d
10450  40C7                              
10451  40C7 FD 2E 00 00   mov32 cb, $00000000
10451  40CB 00 00 
10452  40CD E7            pop d
10453  40CE FD 43         mov [d], b
10454  40D0             ; --- END LOCAL VAR INITIALIZATION
10455  40D0             ; int sign = 1;    // Initialize sign as positive 
10456  40D0 52 02 00      sub sp, 2
10457  40D3             ; --- START LOCAL VAR INITIALIZATION
10458  40D3 FA FD FF      lea d, [bp + -3] ; $sign
10459  40D6 DA            push d
10460  40D7                              
10461  40D7 FD 2E 01 00   mov32 cb, $00000001
10461  40DB 00 00 
10462  40DD E7            pop d
10463  40DE FD 43         mov [d], b
10464  40E0             ; --- END LOCAL VAR INITIALIZATION
10465  40E0             ; while (*str == ' ') str++; 
10466  40E0             _while182_cond:
10467  40E0                              
10468  40E0 FA 05 00      lea d, [bp + 5] ; $str
10469  40E3 2A            mov b, [d]
10470  40E4 38 00 00      mov c, 0
10471  40E7 74            mov d, b
10472  40E8 32            mov bl, [d]
10473  40E9 A7 00         mov bh, 0
10474  40EB 38 00 00      mov c, 0
10475  40EE             ; --- START RELATIONAL
10476  40EE D7            push a
10477  40EF 11            mov a, b
10478  40F0 FD 2E 20 00   mov32 cb, $00000020
10478  40F4 00 00 
10479  40F6 B0            cmp a, b
10480  40F7 FD 71         seq ; ==
10481  40F9 E4            pop a
10482  40FA             ; --- END RELATIONAL
10483  40FA C0 00 00      cmp b, 0
10484  40FD C6 13 41      je _while182_exit
10485  4100             _while182_block:
10486  4100             ; str++; 
10487  4100                              
10488  4100 FA 05 00      lea d, [bp + 5] ; $str
10489  4103 2A            mov b, [d]
10490  4104 38 00 00      mov c, 0
10491  4107 FD 77         inc b
10492  4109 FA 05 00      lea d, [bp + 5] ; $str
10493  410C FD 43         mov [d], b
10494  410E FD 7D         dec b
10495  4110 0A E0 40      jmp _while182_cond
10496  4113             _while182_exit:
10497  4113             ; if (*str == '-' || *str == '+') { 
10498  4113             _if183_cond:
10499  4113                              
10500  4113 FA 05 00      lea d, [bp + 5] ; $str
10501  4116 2A            mov b, [d]
10502  4117 38 00 00      mov c, 0
10503  411A 74            mov d, b
10504  411B 32            mov bl, [d]
10505  411C A7 00         mov bh, 0
10506  411E 38 00 00      mov c, 0
10507  4121             ; --- START RELATIONAL
10508  4121 D7            push a
10509  4122 11            mov a, b
10510  4123 FD 2E 2D 00   mov32 cb, $0000002d
10510  4127 00 00 
10511  4129 B0            cmp a, b
10512  412A FD 71         seq ; ==
10513  412C E4            pop a
10514  412D             ; --- END RELATIONAL
10515  412D             ; --- START LOGICAL OR
10516  412D D7            push a
10517  412E 11            mov a, b
10518  412F FA 05 00      lea d, [bp + 5] ; $str
10519  4132 2A            mov b, [d]
10520  4133 38 00 00      mov c, 0
10521  4136 74            mov d, b
10522  4137 32            mov bl, [d]
10523  4138 A7 00         mov bh, 0
10524  413A 38 00 00      mov c, 0
10525  413D             ; --- START RELATIONAL
10526  413D D7            push a
10527  413E 11            mov a, b
10528  413F FD 2E 2B 00   mov32 cb, $0000002b
10528  4143 00 00 
10529  4145 B0            cmp a, b
10530  4146 FD 71         seq ; ==
10531  4148 E4            pop a
10532  4149             ; --- END RELATIONAL
10533  4149 FD A8         sor a, b ; ||
10534  414B E4            pop a
10535  414C             ; --- END LOGICAL OR
10536  414C C0 00 00      cmp b, 0
10537  414F C6 95 41      je _if183_exit
10538  4152             _if183_TRUE:
10539  4152             ; if (*str == '-') sign = -1; 
10540  4152             _if184_cond:
10541  4152                              
10542  4152 FA 05 00      lea d, [bp + 5] ; $str
10543  4155 2A            mov b, [d]
10544  4156 38 00 00      mov c, 0
10545  4159 74            mov d, b
10546  415A 32            mov bl, [d]
10547  415B A7 00         mov bh, 0
10548  415D 38 00 00      mov c, 0
10549  4160             ; --- START RELATIONAL
10550  4160 D7            push a
10551  4161 11            mov a, b
10552  4162 FD 2E 2D 00   mov32 cb, $0000002d
10552  4166 00 00 
10553  4168 B0            cmp a, b
10554  4169 FD 71         seq ; ==
10555  416B E4            pop a
10556  416C             ; --- END RELATIONAL
10557  416C C0 00 00      cmp b, 0
10558  416F C6 82 41      je _if184_exit
10559  4172             _if184_TRUE:
10560  4172             ; sign = -1; 
10561  4172 FA FD FF      lea d, [bp + -3] ; $sign
10562  4175 DA            push d
10563  4176                              
10564  4176 FD 2E FF FF   mov32 cb, $ffffffff
10564  417A FF FF 
10565  417C E7            pop d
10566  417D FD 43         mov [d], b
10567  417F 0A 82 41      jmp _if184_exit
10568  4182             _if184_exit:
10569  4182             ; str++; 
10570  4182                              
10571  4182 FA 05 00      lea d, [bp + 5] ; $str
10572  4185 2A            mov b, [d]
10573  4186 38 00 00      mov c, 0
10574  4189 FD 77         inc b
10575  418B FA 05 00      lea d, [bp + 5] ; $str
10576  418E FD 43         mov [d], b
10577  4190 FD 7D         dec b
10578  4192 0A 95 41      jmp _if183_exit
10579  4195             _if183_exit:
10580  4195             ; while (*str >= '0' && *str <= '9') { 
10581  4195             _while185_cond:
10582  4195                              
10583  4195 FA 05 00      lea d, [bp + 5] ; $str
10584  4198 2A            mov b, [d]
10585  4199 38 00 00      mov c, 0
10586  419C 74            mov d, b
10587  419D 32            mov bl, [d]
10588  419E A7 00         mov bh, 0
10589  41A0 38 00 00      mov c, 0
10590  41A3             ; --- START RELATIONAL
10591  41A3 D7            push a
10592  41A4 11            mov a, b
10593  41A5 FD 2E 30 00   mov32 cb, $00000030
10593  41A9 00 00 
10594  41AB B0            cmp a, b
10595  41AC FD 82         sgeu ; >= (unsigned)
10596  41AE E4            pop a
10597  41AF             ; --- END RELATIONAL
10598  41AF             ; --- START LOGICAL AND
10599  41AF D7            push a
10600  41B0 11            mov a, b
10601  41B1 FA 05 00      lea d, [bp + 5] ; $str
10602  41B4 2A            mov b, [d]
10603  41B5 38 00 00      mov c, 0
10604  41B8 74            mov d, b
10605  41B9 32            mov bl, [d]
10606  41BA A7 00         mov bh, 0
10607  41BC 38 00 00      mov c, 0
10608  41BF             ; --- START RELATIONAL
10609  41BF D7            push a
10610  41C0 11            mov a, b
10611  41C1 FD 2E 39 00   mov32 cb, $00000039
10611  41C5 00 00 
10612  41C7 B0            cmp a, b
10613  41C8 FD 76         sleu ; <= (unsigned)
10614  41CA E4            pop a
10615  41CB             ; --- END RELATIONAL
10616  41CB FD A7         sand a, b
10617  41CD E4            pop a
10618  41CE             ; --- END LOGICAL AND
10619  41CE C0 00 00      cmp b, 0
10620  41D1 C6 5D 42      je _while185_exit
10621  41D4             _while185_block:
10622  41D4             ; result = result * 10 + (*str - '0'); 
10623  41D4 FA FF FF      lea d, [bp + -1] ; $result
10624  41D7 DA            push d
10625  41D8                              
10626  41D8 FA FF FF      lea d, [bp + -1] ; $result
10627  41DB 2A            mov b, [d]
10628  41DC 38 00 00      mov c, 0
10629  41DF             ; --- START FACTORS
10630  41DF D7            push a
10631  41E0 FD D8         push g
10632  41E2 11            mov a, b
10633  41E3 FD 7A         mov g, c
10634  41E5 FD 2E 0A 00   mov32 cb, $0000000a
10634  41E9 00 00 
10635  41EB D7            push a     ; save left operand
10636  41EC 8E            xor a, b   ; xor sign bits
10637  41ED FD AA         swp a      ; swap bytes
10638  41EF 83            mov cl, al ; save result of xor into 'dl'
10639  41F0 E4            pop a      ; restore left side operator
10640  41F1 DF            push cl    ; save result of xor above
10641  41F2 FD AA         swp a  
10642  41F4 93 80         test al, $80  
10643  41F6 FD AA         swp a  
10644  41F8 C6 FD 41      jz skip_invert_a_186  
10645  41FB FD 95         neg a 
10646  41FD             skip_invert_a_186:   
10647  41FD FD AB         swp b
10648  41FF FD 93 80      test bl, $80  
10649  4202 FD AB         swp b
10650  4204 C6 09 42      jz skip_invert_b_186  
10651  4207 FD 97         neg b 
10652  4209             skip_invert_b_186:   
10653  4209 AC            mul a, b ; *
10654  420A FD 78         mov g, a
10655  420C 11            mov a, b
10656  420D EA            pop bl
10657  420E FD 93 80      test bl, $80
10658  4211 C6 1E 42      jz _same_signs_186
10659  4214 2F            mov bl, al
10660  4215 95            not a
10661  4216 FD 97         neg b
10662  4218 5B 00 00      adc a, 0
10663  421B FD 78         mov g, a
10664  421D 11            mov a, b
10665  421E             _same_signs_186:
10666  421E FD 38         mov c, g
10667  4220 27            mov b, a
10668  4221 FD F1         pop g
10669  4223 E4            pop a
10670  4224             ; --- END FACTORS
10671  4224             ; --- START TERMS
10672  4224 D7            push a
10673  4225 FD D8         push g
10674  4227 11            mov a, b
10675  4228 FD 7A         mov g, c
10676  422A                              
10677  422A FA 05 00      lea d, [bp + 5] ; $str
10678  422D 2A            mov b, [d]
10679  422E 38 00 00      mov c, 0
10680  4231 74            mov d, b
10681  4232 32            mov bl, [d]
10682  4233 A7 00         mov bh, 0
10683  4235 38 00 00      mov c, 0
10684  4238             ; --- START TERMS
10685  4238 D7            push a
10686  4239 11            mov a, b
10687  423A FD 2E 30 00   mov32 cb, $00000030
10687  423E 00 00 
10688  4240 60            sub a, b
10689  4241 27            mov b, a
10690  4242 E4            pop a
10691  4243             ; --- END TERMS
10692  4243 56            add b, a
10693  4244 FD F1         pop g
10694  4246 E4            pop a
10695  4247             ; --- END TERMS
10696  4247 E7            pop d
10697  4248 FD 43         mov [d], b
10698  424A             ; str++; 
10699  424A                              
10700  424A FA 05 00      lea d, [bp + 5] ; $str
10701  424D 2A            mov b, [d]
10702  424E 38 00 00      mov c, 0
10703  4251 FD 77         inc b
10704  4253 FA 05 00      lea d, [bp + 5] ; $str
10705  4256 FD 43         mov [d], b
10706  4258 FD 7D         dec b
10707  425A 0A 95 41      jmp _while185_cond
10708  425D             _while185_exit:
10709  425D             ; return sign * result; 
10710  425D                              
10711  425D FA FD FF      lea d, [bp + -3] ; $sign
10712  4260 2A            mov b, [d]
10713  4261 38 00 00      mov c, 0
10714  4264             ; --- START FACTORS
10715  4264 D7            push a
10716  4265 FD D8         push g
10717  4267 11            mov a, b
10718  4268 FD 7A         mov g, c
10719  426A FA FF FF      lea d, [bp + -1] ; $result
10720  426D 2A            mov b, [d]
10721  426E 38 00 00      mov c, 0
10722  4271 D7            push a     ; save left operand
10723  4272 8E            xor a, b   ; xor sign bits
10724  4273 FD AA         swp a      ; swap bytes
10725  4275 83            mov cl, al ; save result of xor into 'dl'
10726  4276 E4            pop a      ; restore left side operator
10727  4277 DF            push cl    ; save result of xor above
10728  4278 FD AA         swp a  
10729  427A 93 80         test al, $80  
10730  427C FD AA         swp a  
10731  427E C6 83 42      jz skip_invert_a_187  
10732  4281 FD 95         neg a 
10733  4283             skip_invert_a_187:   
10734  4283 FD AB         swp b
10735  4285 FD 93 80      test bl, $80  
10736  4288 FD AB         swp b
10737  428A C6 8F 42      jz skip_invert_b_187  
10738  428D FD 97         neg b 
10739  428F             skip_invert_b_187:   
10740  428F AC            mul a, b ; *
10741  4290 FD 78         mov g, a
10742  4292 11            mov a, b
10743  4293 EA            pop bl
10744  4294 FD 93 80      test bl, $80
10745  4297 C6 A4 42      jz _same_signs_187
10746  429A 2F            mov bl, al
10747  429B 95            not a
10748  429C FD 97         neg b
10749  429E 5B 00 00      adc a, 0
10750  42A1 FD 78         mov g, a
10751  42A3 11            mov a, b
10752  42A4             _same_signs_187:
10753  42A4 FD 38         mov c, g
10754  42A6 27            mov b, a
10755  42A7 FD F1         pop g
10756  42A9 E4            pop a
10757  42AA             ; --- END FACTORS
10758  42AA F9            leave
10759  42AB 09            ret
10760  42AC             
10761  42AC             exit:
10762  42AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
10763  42AF             ; --- BEGIN INLINE ASM SEGMENT
10764  42AF 05 0B         syscall sys_terminate_proc
10765  42B1             ; --- END INLINE ASM SEGMENT
10766  42B1 F9            leave
10767  42B2 09            ret
10768  42B3             
10769  42B3             printx16:
10770  42B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10771  42B6             ; --- BEGIN INLINE ASM SEGMENT
10772  42B6 FA 05 00      lea d, [bp + 5] ; $hex
10773  42B9 2A            mov b, [d]
10774  42BA             print_u16x_printx16:
10775  42BA DD            push bl
10776  42BB 30            mov bl, bh
10777  42BC 07 D9 42      call _itoa_printx16        ; convert bh to char in A
10778  42BF 2F            mov bl, al        ; save al
10779  42C0 19 00         mov al, 0
10780  42C2 05 03         syscall sys_io        ; display AH
10781  42C4 24            mov ah, bl        ; retrieve al
10782  42C5 19 00         mov al, 0
10783  42C7 05 03         syscall sys_io        ; display AL
10784  42C9 EA            pop bl
10785  42CA 07 D9 42      call _itoa_printx16        ; convert bh to char in A
10786  42CD 2F            mov bl, al        ; save al
10787  42CE 19 00         mov al, 0
10788  42D0 05 03         syscall sys_io        ; display AH
10789  42D2 24            mov ah, bl        ; retrieve al
10790  42D3 19 00         mov al, 0
10791  42D5 05 03         syscall sys_io        ; display AL
10792  42D7             ; --- END INLINE ASM SEGMENT
10793  42D7             ; return; 
10794  42D7 F9            leave
10795  42D8 09            ret
10796  42D9             ; --- BEGIN INLINE ASM SEGMENT
10797  42D9             _itoa_printx16:
10798  42D9 DA            push d
10799  42DA D8            push b
10800  42DB A7 00         mov bh, 0
10801  42DD FD A4 04      shr bl, 4  
10802  42E0 74            mov d, b
10803  42E1 1F F3 42      mov al, [d + s_hex_digits_printx16]
10804  42E4 23            mov ah, al
10805  42E5 E5            pop b
10806  42E6 D8            push b
10807  42E7 A7 00         mov bh, 0
10808  42E9 FD 87 0F      and bl, $0F
10809  42EC 74            mov d, b
10810  42ED 1F F3 42      mov al, [d + s_hex_digits_printx16]
10811  42F0 E5            pop b
10812  42F1 E7            pop d
10813  42F2 09            ret
10814  42F3 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
10814  42F7 34 35 36 37 
10814  42FB 38 39 41 42 
10814  42FF 43 44 45 46 
10815  4303             ; --- END INLINE ASM SEGMENT
10816  4303 F9            leave
10817  4304 09            ret
10818  4305             
10819  4305             putchar:
10820  4305 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10821  4308             ; --- BEGIN INLINE ASM SEGMENT
10822  4308 FA 05 00      lea d, [bp + 5] ; $c
10823  430B 1E            mov al, [d]
10824  430C 23            mov ah, al
10825  430D 19 00         mov al, 0
10826  430F 05 03         syscall sys_io      ; char in AH
10827  4311             ; --- END INLINE ASM SEGMENT
10828  4311 F9            leave
10829  4312 09            ret
10830  4313             
10831  4313             strcpy:
10832  4313 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10833  4316             ; char *psrc; 
10834  4316 52 02 00      sub sp, 2
10835  4319             ; char *pdest; 
10836  4319 52 02 00      sub sp, 2
10837  431C             ; psrc = src; 
10838  431C FA FF FF      lea d, [bp + -1] ; $psrc
10839  431F DA            push d
10840  4320                              
10841  4320 FA 07 00      lea d, [bp + 7] ; $src
10842  4323 2A            mov b, [d]
10843  4324 38 00 00      mov c, 0
10844  4327 E7            pop d
10845  4328 FD 43         mov [d], b
10846  432A             ; pdest = dest; 
10847  432A FA FD FF      lea d, [bp + -3] ; $pdest
10848  432D DA            push d
10849  432E                              
10850  432E FA 05 00      lea d, [bp + 5] ; $dest
10851  4331 2A            mov b, [d]
10852  4332 38 00 00      mov c, 0
10853  4335 E7            pop d
10854  4336 FD 43         mov [d], b
10855  4338             ; while(*psrc) *pdest++ = *psrc++; 
10856  4338             _while188_cond:
10857  4338                              
10858  4338 FA FF FF      lea d, [bp + -1] ; $psrc
10859  433B 2A            mov b, [d]
10860  433C 38 00 00      mov c, 0
10861  433F 74            mov d, b
10862  4340 32            mov bl, [d]
10863  4341 A7 00         mov bh, 0
10864  4343 38 00 00      mov c, 0
10865  4346 C0 00 00      cmp b, 0
10866  4349 C6 7A 43      je _while188_exit
10867  434C             _while188_block:
10868  434C             ; *pdest++ = *psrc++; 
10869  434C FA FD FF      lea d, [bp + -3] ; $pdest
10870  434F 2A            mov b, [d]
10871  4350 38 00 00      mov c, 0
10872  4353 FD 77         inc b
10873  4355 FA FD FF      lea d, [bp + -3] ; $pdest
10874  4358 FD 43         mov [d], b
10875  435A FD 7D         dec b
10876  435C D8            push b
10877  435D                              
10878  435D FA FF FF      lea d, [bp + -1] ; $psrc
10879  4360 2A            mov b, [d]
10880  4361 38 00 00      mov c, 0
10881  4364 FD 77         inc b
10882  4366 FA FF FF      lea d, [bp + -1] ; $psrc
10883  4369 FD 43         mov [d], b
10884  436B FD 7D         dec b
10885  436D 74            mov d, b
10886  436E 32            mov bl, [d]
10887  436F A7 00         mov bh, 0
10888  4371 38 00 00      mov c, 0
10889  4374 E7            pop d
10890  4375 FD 3E         mov [d], bl
10891  4377 0A 38 43      jmp _while188_cond
10892  437A             _while188_exit:
10893  437A             ; *pdest = '\0'; 
10894  437A FA FD FF      lea d, [bp + -3] ; $pdest
10895  437D 2A            mov b, [d]
10896  437E 38 00 00      mov c, 0
10897  4381 D8            push b
10898  4382                              
10899  4382 FD 2E 00 00   mov32 cb, $00000000
10899  4386 00 00 
10900  4388 E7            pop d
10901  4389 FD 3E         mov [d], bl
10902  438B F9            leave
10903  438C 09            ret
10904  438D             
10905  438D             strcat:
10906  438D F8 00 00      enter 0 ; (push bp; mov bp, sp)
10907  4390             ; int dest_len; 
10908  4390 52 02 00      sub sp, 2
10909  4393             ; int i; 
10910  4393 52 02 00      sub sp, 2
10911  4396             ; dest_len = strlen(dest); 
10912  4396 FA FF FF      lea d, [bp + -1] ; $dest_len
10913  4399 DA            push d
10914  439A                              
10915  439A             ; --- START FUNCTION CALL
10916  439A                              
10917  439A FA 05 00      lea d, [bp + 5] ; $dest
10918  439D 2A            mov b, [d]
10919  439E 38 00 00      mov c, 0
10920  43A1 FD AB         swp b
10921  43A3 D8            push b
10922  43A4 07 62 40      call strlen
10923  43A7 51 02 00      add sp, 2
10924  43AA             ; --- END FUNCTION CALL
10925  43AA E7            pop d
10926  43AB FD 43         mov [d], b
10927  43AD             ; for (i = 0; src[i] != 0; i=i+1) { 
10928  43AD             _for189_init:
10929  43AD FA FD FF      lea d, [bp + -3] ; $i
10930  43B0 DA            push d
10931  43B1                              
10932  43B1 FD 2E 00 00   mov32 cb, $00000000
10932  43B5 00 00 
10933  43B7 E7            pop d
10934  43B8 FD 43         mov [d], b
10935  43BA             _for189_cond:
10936  43BA                              
10937  43BA FA 07 00      lea d, [bp + 7] ; $src
10938  43BD FD 2A         mov d, [d]
10939  43BF D7            push a
10940  43C0 DA            push d
10941  43C1                              
10942  43C1 FA FD FF      lea d, [bp + -3] ; $i
10943  43C4 2A            mov b, [d]
10944  43C5 38 00 00      mov c, 0
10945  43C8 E7            pop d
10946  43C9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
10947  43CD E4            pop a
10948  43CE 32            mov bl, [d]
10949  43CF A7 00         mov bh, 0
10950  43D1 38 00 00      mov c, 0
10951  43D4             ; --- START RELATIONAL
10952  43D4 D7            push a
10953  43D5 11            mov a, b
10954  43D6 FD 2E 00 00   mov32 cb, $00000000
10954  43DA 00 00 
10955  43DC B0            cmp a, b
10956  43DD FD 72         sneq ; !=
10957  43DF E4            pop a
10958  43E0             ; --- END RELATIONAL
10959  43E0 C0 00 00      cmp b, 0
10960  43E3 C6 3E 44      je _for189_exit
10961  43E6             _for189_block:
10962  43E6             ; dest[dest_len + i] = src[i]; 
10963  43E6 FA 05 00      lea d, [bp + 5] ; $dest
10964  43E9 FD 2A         mov d, [d]
10965  43EB D7            push a
10966  43EC DA            push d
10967  43ED                              
10968  43ED FA FF FF      lea d, [bp + -1] ; $dest_len
10969  43F0 2A            mov b, [d]
10970  43F1 38 00 00      mov c, 0
10971  43F4             ; --- START TERMS
10972  43F4 D7            push a
10973  43F5 11            mov a, b
10974  43F6 FA FD FF      lea d, [bp + -3] ; $i
10975  43F9 2A            mov b, [d]
10976  43FA 38 00 00      mov c, 0
10977  43FD 56            add b, a
10978  43FE E4            pop a
10979  43FF             ; --- END TERMS
10980  43FF E7            pop d
10981  4400 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
10982  4404 E4            pop a
10983  4405 DA            push d
10984  4406                              
10985  4406 FA 07 00      lea d, [bp + 7] ; $src
10986  4409 FD 2A         mov d, [d]
10987  440B D7            push a
10988  440C DA            push d
10989  440D                              
10990  440D FA FD FF      lea d, [bp + -3] ; $i
10991  4410 2A            mov b, [d]
10992  4411 38 00 00      mov c, 0
10993  4414 E7            pop d
10994  4415 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
10995  4419 E4            pop a
10996  441A 32            mov bl, [d]
10997  441B A7 00         mov bh, 0
10998  441D 38 00 00      mov c, 0
10999  4420 E7            pop d
11000  4421 FD 3E         mov [d], bl
11001  4423             _for189_update:
11002  4423 FA FD FF      lea d, [bp + -3] ; $i
11003  4426 DA            push d
11004  4427                              
11005  4427 FA FD FF      lea d, [bp + -3] ; $i
11006  442A 2A            mov b, [d]
11007  442B 38 00 00      mov c, 0
11008  442E             ; --- START TERMS
11009  442E D7            push a
11010  442F 11            mov a, b
11011  4430 FD 2E 01 00   mov32 cb, $00000001
11011  4434 00 00 
11012  4436 56            add b, a
11013  4437 E4            pop a
11014  4438             ; --- END TERMS
11015  4438 E7            pop d
11016  4439 FD 43         mov [d], b
11017  443B 0A BA 43      jmp _for189_cond
11018  443E             _for189_exit:
11019  443E             ; dest[dest_len + i] = 0; 
11020  443E FA 05 00      lea d, [bp + 5] ; $dest
11021  4441 FD 2A         mov d, [d]
11022  4443 D7            push a
11023  4444 DA            push d
11024  4445                              
11025  4445 FA FF FF      lea d, [bp + -1] ; $dest_len
11026  4448 2A            mov b, [d]
11027  4449 38 00 00      mov c, 0
11028  444C             ; --- START TERMS
11029  444C D7            push a
11030  444D 11            mov a, b
11031  444E FA FD FF      lea d, [bp + -3] ; $i
11032  4451 2A            mov b, [d]
11033  4452 38 00 00      mov c, 0
11034  4455 56            add b, a
11035  4456 E4            pop a
11036  4457             ; --- END TERMS
11037  4457 E7            pop d
11038  4458 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
11039  445C E4            pop a
11040  445D DA            push d
11041  445E                              
11042  445E FD 2E 00 00   mov32 cb, $00000000
11042  4462 00 00 
11043  4464 E7            pop d
11044  4465 FD 3E         mov [d], bl
11045  4467             ; return dest; 
11046  4467                              
11047  4467 FA 05 00      lea d, [bp + 5] ; $dest
11048  446A 2A            mov b, [d]
11049  446B 38 00 00      mov c, 0
11050  446E F9            leave
11051  446F 09            ret
11052  4470             
11053  4470             printf:
11054  4470 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11055  4473             ; char *p, *format_p; 
11056  4473 52 02 00      sub sp, 2
11057  4476 52 02 00      sub sp, 2
11058  4479             ; format_p = format; 
11059  4479 FA FD FF      lea d, [bp + -3] ; $format_p
11060  447C DA            push d
11061  447D                              
11062  447D FA 05 00      lea d, [bp + 5] ; $format
11063  4480 2A            mov b, [d]
11064  4481 38 00 00      mov c, 0
11065  4484 E7            pop d
11066  4485 FD 43         mov [d], b
11067  4487             ; p = &format + 2; 
11068  4487 FA FF FF      lea d, [bp + -1] ; $p
11069  448A DA            push d
11070  448B                              
11071  448B FA 05 00      lea d, [bp + 5] ; $format
11072  448E 2D            mov b, d
11073  448F             ; --- START TERMS
11074  448F D7            push a
11075  4490 11            mov a, b
11076  4491 FD 2E 02 00   mov32 cb, $00000002
11076  4495 00 00 
11077  4497 56            add b, a
11078  4498 E4            pop a
11079  4499             ; --- END TERMS
11080  4499 E7            pop d
11081  449A FD 43         mov [d], b
11082  449C             ; for(;;){ 
11083  449C             _for190_init:
11084  449C             _for190_cond:
11085  449C             _for190_block:
11086  449C             ; if(!*format_p) break; 
11087  449C             _if191_cond:
11088  449C                              
11089  449C FA FD FF      lea d, [bp + -3] ; $format_p
11090  449F 2A            mov b, [d]
11091  44A0 38 00 00      mov c, 0
11092  44A3 74            mov d, b
11093  44A4 32            mov bl, [d]
11094  44A5 A7 00         mov bh, 0
11095  44A7 38 00 00      mov c, 0
11096  44AA C0 00 00      cmp b, 0
11097  44AD FD 71         seq ; !
11098  44AF C0 00 00      cmp b, 0
11099  44B2 C6 BB 44      je _if191_else
11100  44B5             _if191_TRUE:
11101  44B5             ; break; 
11102  44B5 0A 6B 47      jmp _for190_exit ; for break
11103  44B8 0A 68 47      jmp _if191_exit
11104  44BB             _if191_else:
11105  44BB             ; if(*format_p == '%'){ 
11106  44BB             _if192_cond:
11107  44BB                              
11108  44BB FA FD FF      lea d, [bp + -3] ; $format_p
11109  44BE 2A            mov b, [d]
11110  44BF 38 00 00      mov c, 0
11111  44C2 74            mov d, b
11112  44C3 32            mov bl, [d]
11113  44C4 A7 00         mov bh, 0
11114  44C6 38 00 00      mov c, 0
11115  44C9             ; --- START RELATIONAL
11116  44C9 D7            push a
11117  44CA 11            mov a, b
11118  44CB FD 2E 25 00   mov32 cb, $00000025
11118  44CF 00 00 
11119  44D1 B0            cmp a, b
11120  44D2 FD 71         seq ; ==
11121  44D4 E4            pop a
11122  44D5             ; --- END RELATIONAL
11123  44D5 C0 00 00      cmp b, 0
11124  44D8 C6 43 47      je _if192_else
11125  44DB             _if192_TRUE:
11126  44DB             ; format_p++; 
11127  44DB                              
11128  44DB FA FD FF      lea d, [bp + -3] ; $format_p
11129  44DE 2A            mov b, [d]
11130  44DF 38 00 00      mov c, 0
11131  44E2 FD 77         inc b
11132  44E4 FA FD FF      lea d, [bp + -3] ; $format_p
11133  44E7 FD 43         mov [d], b
11134  44E9 FD 7D         dec b
11135  44EB             ; switch(*format_p){ 
11136  44EB             _switch193_expr:
11137  44EB                              
11138  44EB FA FD FF      lea d, [bp + -3] ; $format_p
11139  44EE 2A            mov b, [d]
11140  44EF 38 00 00      mov c, 0
11141  44F2 74            mov d, b
11142  44F3 32            mov bl, [d]
11143  44F4 A7 00         mov bh, 0
11144  44F6 38 00 00      mov c, 0
11145  44F9             _switch193_comparisons:
11146  44F9 C1 6C         cmp bl, $6c
11147  44FB C6 27 45      je _switch193_case0
11148  44FE C1 4C         cmp bl, $4c
11149  4500 C6 27 45      je _switch193_case1
11150  4503 C1 64         cmp bl, $64
11151  4505 C6 37 46      je _switch193_case2
11152  4508 C1 69         cmp bl, $69
11153  450A C6 37 46      je _switch193_case3
11154  450D C1 75         cmp bl, $75
11155  450F C6 67 46      je _switch193_case4
11156  4512 C1 78         cmp bl, $78
11157  4514 C6 97 46      je _switch193_case5
11158  4517 C1 63         cmp bl, $63
11159  4519 C6 C7 46      je _switch193_case6
11160  451C C1 73         cmp bl, $73
11161  451E C6 F7 46      je _switch193_case7
11162  4521 0A 24 47      jmp _switch193_default
11163  4524 0A 30 47      jmp _switch193_exit
11164  4527             _switch193_case0:
11165  4527             _switch193_case1:
11166  4527             ; format_p++; 
11167  4527                              
11168  4527 FA FD FF      lea d, [bp + -3] ; $format_p
11169  452A 2A            mov b, [d]
11170  452B 38 00 00      mov c, 0
11171  452E FD 77         inc b
11172  4530 FA FD FF      lea d, [bp + -3] ; $format_p
11173  4533 FD 43         mov [d], b
11174  4535 FD 7D         dec b
11175  4537             ; if(*format_p == 'd' || *format_p == 'i') 
11176  4537             _if194_cond:
11177  4537                              
11178  4537 FA FD FF      lea d, [bp + -3] ; $format_p
11179  453A 2A            mov b, [d]
11180  453B 38 00 00      mov c, 0
11181  453E 74            mov d, b
11182  453F 32            mov bl, [d]
11183  4540 A7 00         mov bh, 0
11184  4542 38 00 00      mov c, 0
11185  4545             ; --- START RELATIONAL
11186  4545 D7            push a
11187  4546 11            mov a, b
11188  4547 FD 2E 64 00   mov32 cb, $00000064
11188  454B 00 00 
11189  454D B0            cmp a, b
11190  454E FD 71         seq ; ==
11191  4550 E4            pop a
11192  4551             ; --- END RELATIONAL
11193  4551             ; --- START LOGICAL OR
11194  4551 D7            push a
11195  4552 11            mov a, b
11196  4553 FA FD FF      lea d, [bp + -3] ; $format_p
11197  4556 2A            mov b, [d]
11198  4557 38 00 00      mov c, 0
11199  455A 74            mov d, b
11200  455B 32            mov bl, [d]
11201  455C A7 00         mov bh, 0
11202  455E 38 00 00      mov c, 0
11203  4561             ; --- START RELATIONAL
11204  4561 D7            push a
11205  4562 11            mov a, b
11206  4563 FD 2E 69 00   mov32 cb, $00000069
11206  4567 00 00 
11207  4569 B0            cmp a, b
11208  456A FD 71         seq ; ==
11209  456C E4            pop a
11210  456D             ; --- END RELATIONAL
11211  456D FD A8         sor a, b ; ||
11212  456F E4            pop a
11213  4570             ; --- END LOGICAL OR
11214  4570 C0 00 00      cmp b, 0
11215  4573 C6 94 45      je _if194_else
11216  4576             _if194_TRUE:
11217  4576             ; print_signed_long(*(long *)p); 
11218  4576                              
11219  4576             ; --- START FUNCTION CALL
11220  4576                              
11221  4576 FA FF FF      lea d, [bp + -1] ; $p
11222  4579 2A            mov b, [d]
11223  457A 38 00 00      mov c, 0
11224  457D 74            mov d, b
11225  457E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11226  4581 FD 39         mov c, b ; And place it into C
11227  4583 2A            mov b, [d] ; Lower Word in B
11228  4584 12            mov a, c
11229  4585 FD AA         swp a
11230  4587 D7            push a
11231  4588 FD AB         swp b
11232  458A D8            push b
11233  458B 07 6D 47      call print_signed_long
11234  458E 51 04 00      add sp, 4
11235  4591             ; --- END FUNCTION CALL
11236  4591 0A 1C 46      jmp _if194_exit
11237  4594             _if194_else:
11238  4594             ; if(*format_p == 'u') 
11239  4594             _if195_cond:
11240  4594                              
11241  4594 FA FD FF      lea d, [bp + -3] ; $format_p
11242  4597 2A            mov b, [d]
11243  4598 38 00 00      mov c, 0
11244  459B 74            mov d, b
11245  459C 32            mov bl, [d]
11246  459D A7 00         mov bh, 0
11247  459F 38 00 00      mov c, 0
11248  45A2             ; --- START RELATIONAL
11249  45A2 D7            push a
11250  45A3 11            mov a, b
11251  45A4 FD 2E 75 00   mov32 cb, $00000075
11251  45A8 00 00 
11252  45AA B0            cmp a, b
11253  45AB FD 71         seq ; ==
11254  45AD E4            pop a
11255  45AE             ; --- END RELATIONAL
11256  45AE C0 00 00      cmp b, 0
11257  45B1 C6 D2 45      je _if195_else
11258  45B4             _if195_TRUE:
11259  45B4             ; print_unsigned_long(*(unsigned long *)p); 
11260  45B4                              
11261  45B4             ; --- START FUNCTION CALL
11262  45B4                              
11263  45B4 FA FF FF      lea d, [bp + -1] ; $p
11264  45B7 2A            mov b, [d]
11265  45B8 38 00 00      mov c, 0
11266  45BB 74            mov d, b
11267  45BC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11268  45BF FD 39         mov c, b ; And place it into C
11269  45C1 2A            mov b, [d] ; Lower Word in B
11270  45C2 12            mov a, c
11271  45C3 FD AA         swp a
11272  45C5 D7            push a
11273  45C6 FD AB         swp b
11274  45C8 D8            push b
11275  45C9 07 F2 48      call print_unsigned_long
11276  45CC 51 04 00      add sp, 4
11277  45CF             ; --- END FUNCTION CALL
11278  45CF 0A 1C 46      jmp _if195_exit
11279  45D2             _if195_else:
11280  45D2             ; if(*format_p == 'x') 
11281  45D2             _if196_cond:
11282  45D2                              
11283  45D2 FA FD FF      lea d, [bp + -3] ; $format_p
11284  45D5 2A            mov b, [d]
11285  45D6 38 00 00      mov c, 0
11286  45D9 74            mov d, b
11287  45DA 32            mov bl, [d]
11288  45DB A7 00         mov bh, 0
11289  45DD 38 00 00      mov c, 0
11290  45E0             ; --- START RELATIONAL
11291  45E0 D7            push a
11292  45E1 11            mov a, b
11293  45E2 FD 2E 78 00   mov32 cb, $00000078
11293  45E6 00 00 
11294  45E8 B0            cmp a, b
11295  45E9 FD 71         seq ; ==
11296  45EB E4            pop a
11297  45EC             ; --- END RELATIONAL
11298  45EC C0 00 00      cmp b, 0
11299  45EF C6 10 46      je _if196_else
11300  45F2             _if196_TRUE:
11301  45F2             ; printx32(*(long int *)p); 
11302  45F2                              
11303  45F2             ; --- START FUNCTION CALL
11304  45F2                              
11305  45F2 FA FF FF      lea d, [bp + -1] ; $p
11306  45F5 2A            mov b, [d]
11307  45F6 38 00 00      mov c, 0
11308  45F9 74            mov d, b
11309  45FA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11310  45FD FD 39         mov c, b ; And place it into C
11311  45FF 2A            mov b, [d] ; Lower Word in B
11312  4600 12            mov a, c
11313  4601 FD AA         swp a
11314  4603 D7            push a
11315  4604 FD AB         swp b
11316  4606 D8            push b
11317  4607 07 26 4A      call printx32
11318  460A 51 04 00      add sp, 4
11319  460D             ; --- END FUNCTION CALL
11320  460D 0A 1C 46      jmp _if196_exit
11321  4610             _if196_else:
11322  4610             ; err("Unexpected format in printf."); 
11323  4610                              
11324  4610             ; --- START FUNCTION CALL
11325  4610                              
11326  4610 26 AF 53      mov b, _s81 ; "Unexpected format in printf."
11327  4613 FD AB         swp b
11328  4615 D8            push b
11329  4616 07 86 4A      call err
11330  4619 51 02 00      add sp, 2
11331  461C             ; --- END FUNCTION CALL
11332  461C             _if196_exit:
11333  461C             _if195_exit:
11334  461C             _if194_exit:
11335  461C             ; p = p + 4; 
11336  461C FA FF FF      lea d, [bp + -1] ; $p
11337  461F DA            push d
11338  4620                              
11339  4620 FA FF FF      lea d, [bp + -1] ; $p
11340  4623 2A            mov b, [d]
11341  4624 38 00 00      mov c, 0
11342  4627             ; --- START TERMS
11343  4627 D7            push a
11344  4628 11            mov a, b
11345  4629 FD 2E 04 00   mov32 cb, $00000004
11345  462D 00 00 
11346  462F 56            add b, a
11347  4630 E4            pop a
11348  4631             ; --- END TERMS
11349  4631 E7            pop d
11350  4632 FD 43         mov [d], b
11351  4634             ; break; 
11352  4634 0A 30 47      jmp _switch193_exit ; case break
11353  4637             _switch193_case2:
11354  4637             _switch193_case3:
11355  4637             ; print_signed(*(int*)p); 
11356  4637                              
11357  4637             ; --- START FUNCTION CALL
11358  4637                              
11359  4637 FA FF FF      lea d, [bp + -1] ; $p
11360  463A 2A            mov b, [d]
11361  463B 38 00 00      mov c, 0
11362  463E 74            mov d, b
11363  463F 2A            mov b, [d]
11364  4640 38 00 00      mov c, 0
11365  4643 FD AB         swp b
11366  4645 D8            push b
11367  4646 07 9B 4A      call print_signed
11368  4649 51 02 00      add sp, 2
11369  464C             ; --- END FUNCTION CALL
11370  464C             ; p = p + 2; 
11371  464C FA FF FF      lea d, [bp + -1] ; $p
11372  464F DA            push d
11373  4650                              
11374  4650 FA FF FF      lea d, [bp + -1] ; $p
11375  4653 2A            mov b, [d]
11376  4654 38 00 00      mov c, 0
11377  4657             ; --- START TERMS
11378  4657 D7            push a
11379  4658 11            mov a, b
11380  4659 FD 2E 02 00   mov32 cb, $00000002
11380  465D 00 00 
11381  465F 56            add b, a
11382  4660 E4            pop a
11383  4661             ; --- END TERMS
11384  4661 E7            pop d
11385  4662 FD 43         mov [d], b
11386  4664             ; break; 
11387  4664 0A 30 47      jmp _switch193_exit ; case break
11388  4667             _switch193_case4:
11389  4667             ; print_unsigned(*(unsigned int*)p); 
11390  4667                              
11391  4667             ; --- START FUNCTION CALL
11392  4667                              
11393  4667 FA FF FF      lea d, [bp + -1] ; $p
11394  466A 2A            mov b, [d]
11395  466B 38 00 00      mov c, 0
11396  466E 74            mov d, b
11397  466F 2A            mov b, [d]
11398  4670 38 00 00      mov c, 0
11399  4673 FD AB         swp b
11400  4675 D8            push b
11401  4676 07 EC 4B      call print_unsigned
11402  4679 51 02 00      add sp, 2
11403  467C             ; --- END FUNCTION CALL
11404  467C             ; p = p + 2; 
11405  467C FA FF FF      lea d, [bp + -1] ; $p
11406  467F DA            push d
11407  4680                              
11408  4680 FA FF FF      lea d, [bp + -1] ; $p
11409  4683 2A            mov b, [d]
11410  4684 38 00 00      mov c, 0
11411  4687             ; --- START TERMS
11412  4687 D7            push a
11413  4688 11            mov a, b
11414  4689 FD 2E 02 00   mov32 cb, $00000002
11414  468D 00 00 
11415  468F 56            add b, a
11416  4690 E4            pop a
11417  4691             ; --- END TERMS
11418  4691 E7            pop d
11419  4692 FD 43         mov [d], b
11420  4694             ; break; 
11421  4694 0A 30 47      jmp _switch193_exit ; case break
11422  4697             _switch193_case5:
11423  4697             ; printx16(*(int*)p); 
11424  4697                              
11425  4697             ; --- START FUNCTION CALL
11426  4697                              
11427  4697 FA FF FF      lea d, [bp + -1] ; $p
11428  469A 2A            mov b, [d]
11429  469B 38 00 00      mov c, 0
11430  469E 74            mov d, b
11431  469F 2A            mov b, [d]
11432  46A0 38 00 00      mov c, 0
11433  46A3 FD AB         swp b
11434  46A5 D8            push b
11435  46A6 07 B3 42      call printx16
11436  46A9 51 02 00      add sp, 2
11437  46AC             ; --- END FUNCTION CALL
11438  46AC             ; p = p + 2; 
11439  46AC FA FF FF      lea d, [bp + -1] ; $p
11440  46AF DA            push d
11441  46B0                              
11442  46B0 FA FF FF      lea d, [bp + -1] ; $p
11443  46B3 2A            mov b, [d]
11444  46B4 38 00 00      mov c, 0
11445  46B7             ; --- START TERMS
11446  46B7 D7            push a
11447  46B8 11            mov a, b
11448  46B9 FD 2E 02 00   mov32 cb, $00000002
11448  46BD 00 00 
11449  46BF 56            add b, a
11450  46C0 E4            pop a
11451  46C1             ; --- END TERMS
11452  46C1 E7            pop d
11453  46C2 FD 43         mov [d], b
11454  46C4             ; break; 
11455  46C4 0A 30 47      jmp _switch193_exit ; case break
11456  46C7             _switch193_case6:
11457  46C7             ; putchar(*(char*)p); 
11458  46C7                              
11459  46C7             ; --- START FUNCTION CALL
11460  46C7                              
11461  46C7 FA FF FF      lea d, [bp + -1] ; $p
11462  46CA 2A            mov b, [d]
11463  46CB 38 00 00      mov c, 0
11464  46CE 74            mov d, b
11465  46CF 32            mov bl, [d]
11466  46D0 A7 00         mov bh, 0
11467  46D2 38 00 00      mov c, 0
11468  46D5 DD            push bl
11469  46D6 07 05 43      call putchar
11470  46D9 51 01 00      add sp, 1
11471  46DC             ; --- END FUNCTION CALL
11472  46DC             ; p = p + 1; 
11473  46DC FA FF FF      lea d, [bp + -1] ; $p
11474  46DF DA            push d
11475  46E0                              
11476  46E0 FA FF FF      lea d, [bp + -1] ; $p
11477  46E3 2A            mov b, [d]
11478  46E4 38 00 00      mov c, 0
11479  46E7             ; --- START TERMS
11480  46E7 D7            push a
11481  46E8 11            mov a, b
11482  46E9 FD 2E 01 00   mov32 cb, $00000001
11482  46ED 00 00 
11483  46EF 56            add b, a
11484  46F0 E4            pop a
11485  46F1             ; --- END TERMS
11486  46F1 E7            pop d
11487  46F2 FD 43         mov [d], b
11488  46F4             ; break; 
11489  46F4 0A 30 47      jmp _switch193_exit ; case break
11490  46F7             _switch193_case7:
11491  46F7             ; print(*(char**)p); 
11492  46F7                              
11493  46F7             ; --- START FUNCTION CALL
11494  46F7                              
11495  46F7 FA FF FF      lea d, [bp + -1] ; $p
11496  46FA 2A            mov b, [d]
11497  46FB 38 00 00      mov c, 0
11498  46FE 74            mov d, b
11499  46FF 2A            mov b, [d]
11500  4700 FD AB         swp b
11501  4702 D8            push b
11502  4703 07 7C 3E      call print
11503  4706 51 02 00      add sp, 2
11504  4709             ; --- END FUNCTION CALL
11505  4709             ; p = p + 2; 
11506  4709 FA FF FF      lea d, [bp + -1] ; $p
11507  470C DA            push d
11508  470D                              
11509  470D FA FF FF      lea d, [bp + -1] ; $p
11510  4710 2A            mov b, [d]
11511  4711 38 00 00      mov c, 0
11512  4714             ; --- START TERMS
11513  4714 D7            push a
11514  4715 11            mov a, b
11515  4716 FD 2E 02 00   mov32 cb, $00000002
11515  471A 00 00 
11516  471C 56            add b, a
11517  471D E4            pop a
11518  471E             ; --- END TERMS
11519  471E E7            pop d
11520  471F FD 43         mov [d], b
11521  4721             ; break; 
11522  4721 0A 30 47      jmp _switch193_exit ; case break
11523  4724             _switch193_default:
11524  4724             ; print("Error: Unknown argument type.\n"); 
11525  4724                              
11526  4724             ; --- START FUNCTION CALL
11527  4724                              
11528  4724 26 CC 53      mov b, _s82 ; "Error: Unknown argument type.\n"
11529  4727 FD AB         swp b
11530  4729 D8            push b
11531  472A 07 7C 3E      call print
11532  472D 51 02 00      add sp, 2
11533  4730             ; --- END FUNCTION CALL
11534  4730             _switch193_exit:
11535  4730             ; format_p++; 
11536  4730                              
11537  4730 FA FD FF      lea d, [bp + -3] ; $format_p
11538  4733 2A            mov b, [d]
11539  4734 38 00 00      mov c, 0
11540  4737 FD 77         inc b
11541  4739 FA FD FF      lea d, [bp + -3] ; $format_p
11542  473C FD 43         mov [d], b
11543  473E FD 7D         dec b
11544  4740 0A 68 47      jmp _if192_exit
11545  4743             _if192_else:
11546  4743             ; putchar(*format_p); 
11547  4743                              
11548  4743             ; --- START FUNCTION CALL
11549  4743                              
11550  4743 FA FD FF      lea d, [bp + -3] ; $format_p
11551  4746 2A            mov b, [d]
11552  4747 38 00 00      mov c, 0
11553  474A 74            mov d, b
11554  474B 32            mov bl, [d]
11555  474C A7 00         mov bh, 0
11556  474E 38 00 00      mov c, 0
11557  4751 DD            push bl
11558  4752 07 05 43      call putchar
11559  4755 51 01 00      add sp, 1
11560  4758             ; --- END FUNCTION CALL
11561  4758             ; format_p++; 
11562  4758                              
11563  4758 FA FD FF      lea d, [bp + -3] ; $format_p
11564  475B 2A            mov b, [d]
11565  475C 38 00 00      mov c, 0
11566  475F FD 77         inc b
11567  4761 FA FD FF      lea d, [bp + -3] ; $format_p
11568  4764 FD 43         mov [d], b
11569  4766 FD 7D         dec b
11570  4768             _if192_exit:
11571  4768             _if191_exit:
11572  4768             _for190_update:
11573  4768 0A 9C 44      jmp _for190_cond
11574  476B             _for190_exit:
11575  476B F9            leave
11576  476C 09            ret
11577  476D             
11578  476D             print_signed_long:
11579  476D F8 00 00      enter 0 ; (push bp; mov bp, sp)
11580  4770             ; char digits[10]; 
11581  4770 52 0A 00      sub sp, 10
11582  4773             ; int i = 0; 
11583  4773 52 02 00      sub sp, 2
11584  4776             ; --- START LOCAL VAR INITIALIZATION
11585  4776 FA F5 FF      lea d, [bp + -11] ; $i
11586  4779 DA            push d
11587  477A                              
11588  477A FD 2E 00 00   mov32 cb, $00000000
11588  477E 00 00 
11589  4780 E7            pop d
11590  4781 FD 43         mov [d], b
11591  4783             ; --- END LOCAL VAR INITIALIZATION
11592  4783             ; if (num < 0) { 
11593  4783             _if197_cond:
11594  4783                              
11595  4783 FA 05 00      lea d, [bp + 5] ; $num
11596  4786 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11597  4789 FD 39         mov c, b ; And place it into C
11598  478B 2A            mov b, [d] ; Lower Word in B
11599  478C             ; --- START RELATIONAL
11600  478C D7            push a
11601  478D FD D8         push g
11602  478F 11            mov a, b
11603  4790 FD 7A         mov g, c
11604  4792 FD 2E 00 00   mov32 cb, $00000000
11604  4796 00 00 
11605  4798 FD AF         cmp32 ga, cb
11606  479A FD 73         slt ; <
11607  479C FD F1         pop g
11608  479E E4            pop a
11609  479F             ; --- END RELATIONAL
11610  479F C0 00 00      cmp b, 0
11611  47A2 C6 D4 47      je _if197_else
11612  47A5             _if197_TRUE:
11613  47A5             ; putchar('-'); 
11614  47A5                              
11615  47A5             ; --- START FUNCTION CALL
11616  47A5                              
11617  47A5 FD 2E 2D 00   mov32 cb, $0000002d
11617  47A9 00 00 
11618  47AB DD            push bl
11619  47AC 07 05 43      call putchar
11620  47AF 51 01 00      add sp, 1
11621  47B2             ; --- END FUNCTION CALL
11622  47B2             ; num = -num; 
11623  47B2 FA 05 00      lea d, [bp + 5] ; $num
11624  47B5 DA            push d
11625  47B6                              
11626  47B6 FA 05 00      lea d, [bp + 5] ; $num
11627  47B9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11628  47BC FD 39         mov c, b ; And place it into C
11629  47BE 2A            mov b, [d] ; Lower Word in B
11630  47BF 12            mov a, c
11631  47C0 95            not a
11632  47C1 97            not b
11633  47C2 55 01 00      add b, 1
11634  47C5 5B 00 00      adc a, 0
11635  47C8 39            mov c, a
11636  47C9 E7            pop d
11637  47CA FD 43         mov [d], b
11638  47CC 28            mov b, c
11639  47CD FD 44 02 00   mov [d + 2], b
11640  47D1 0A 08 48      jmp _if197_exit
11641  47D4             _if197_else:
11642  47D4             ; if (num == 0) { 
11643  47D4             _if198_cond:
11644  47D4                              
11645  47D4 FA 05 00      lea d, [bp + 5] ; $num
11646  47D7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11647  47DA FD 39         mov c, b ; And place it into C
11648  47DC 2A            mov b, [d] ; Lower Word in B
11649  47DD             ; --- START RELATIONAL
11650  47DD D7            push a
11651  47DE FD D8         push g
11652  47E0 11            mov a, b
11653  47E1 FD 7A         mov g, c
11654  47E3 FD 2E 00 00   mov32 cb, $00000000
11654  47E7 00 00 
11655  47E9 FD AF         cmp32 ga, cb
11656  47EB FD 71         seq ; ==
11657  47ED FD F1         pop g
11658  47EF E4            pop a
11659  47F0             ; --- END RELATIONAL
11660  47F0 C0 00 00      cmp b, 0
11661  47F3 C6 08 48      je _if198_exit
11662  47F6             _if198_TRUE:
11663  47F6             ; putchar('0'); 
11664  47F6                              
11665  47F6             ; --- START FUNCTION CALL
11666  47F6                              
11667  47F6 FD 2E 30 00   mov32 cb, $00000030
11667  47FA 00 00 
11668  47FC DD            push bl
11669  47FD 07 05 43      call putchar
11670  4800 51 01 00      add sp, 1
11671  4803             ; --- END FUNCTION CALL
11672  4803             ; return; 
11673  4803 F9            leave
11674  4804 09            ret
11675  4805 0A 08 48      jmp _if198_exit
11676  4808             _if198_exit:
11677  4808             _if197_exit:
11678  4808             ; while (num > 0) { 
11679  4808             _while199_cond:
11680  4808                              
11681  4808 FA 05 00      lea d, [bp + 5] ; $num
11682  480B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11683  480E FD 39         mov c, b ; And place it into C
11684  4810 2A            mov b, [d] ; Lower Word in B
11685  4811             ; --- START RELATIONAL
11686  4811 D7            push a
11687  4812 FD D8         push g
11688  4814 11            mov a, b
11689  4815 FD 7A         mov g, c
11690  4817 FD 2E 00 00   mov32 cb, $00000000
11690  481B 00 00 
11691  481D FD AF         cmp32 ga, cb
11692  481F FD 7F         sgt
11693  4821 FD F1         pop g
11694  4823 E4            pop a
11695  4824             ; --- END RELATIONAL
11696  4824 C0 00 00      cmp b, 0
11697  4827 C6 A8 48      je _while199_exit
11698  482A             _while199_block:
11699  482A             ; digits[i] = '0' + (num % 10); 
11700  482A FA F7 FF      lea d, [bp + -9] ; $digits
11701  482D D7            push a
11702  482E DA            push d
11703  482F                              
11704  482F FA F5 FF      lea d, [bp + -11] ; $i
11705  4832 2A            mov b, [d]
11706  4833 38 00 00      mov c, 0
11707  4836 E7            pop d
11708  4837 5A            add d, b
11709  4838 E4            pop a
11710  4839 DA            push d
11711  483A                              
11712  483A FD 2E 30 00   mov32 cb, $00000030
11712  483E 00 00 
11713  4840             ; --- START TERMS
11714  4840 D7            push a
11715  4841 11            mov a, b
11716  4842                              
11717  4842 FA 05 00      lea d, [bp + 5] ; $num
11718  4845 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11719  4848 FD 39         mov c, b ; And place it into C
11720  484A 2A            mov b, [d] ; Lower Word in B
11721  484B             ; --- START FACTORS
11722  484B D7            push a
11723  484C FD D8         push g
11724  484E 11            mov a, b
11725  484F FD 7A         mov g, c
11726  4851 FD 2E 0A 00   mov32 cb, $0000000a
11726  4855 00 00 
11727  4857 FD D8         push g ; save 'g' as the div instruction uses it
11728  4859 AE            div a, b ; %, a: quotient, b: remainder
11729  485A 11            mov a, b
11730  485B FD F1         pop g
11731  485D FD 38         mov c, g
11732  485F 27            mov b, a
11733  4860 FD F1         pop g
11734  4862 E4            pop a
11735  4863             ; --- END FACTORS
11736  4863 FD 15         add32 cb, ga
11737  4865 E4            pop a
11738  4866             ; --- END TERMS
11739  4866 E7            pop d
11740  4867 FD 3E         mov [d], bl
11741  4869             ; num = num / 10; 
11742  4869 FA 05 00      lea d, [bp + 5] ; $num
11743  486C DA            push d
11744  486D                              
11745  486D FA 05 00      lea d, [bp + 5] ; $num
11746  4870 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11747  4873 FD 39         mov c, b ; And place it into C
11748  4875 2A            mov b, [d] ; Lower Word in B
11749  4876             ; --- START FACTORS
11750  4876 D7            push a
11751  4877 FD D8         push g
11752  4879 11            mov a, b
11753  487A FD 7A         mov g, c
11754  487C FD 2E 0A 00   mov32 cb, $0000000a
11754  4880 00 00 
11755  4882 FD D8         push g ; save 'g' as the div instruction uses it
11756  4884 AE            div a, b ; /, a: quotient, b: remainder
11757  4885 FD F1         pop g
11758  4887 FD 38         mov c, g
11759  4889 27            mov b, a
11760  488A FD F1         pop g
11761  488C E4            pop a
11762  488D             ; --- END FACTORS
11763  488D E7            pop d
11764  488E FD 43         mov [d], b
11765  4890 28            mov b, c
11766  4891 FD 44 02 00   mov [d + 2], b
11767  4895             ; i++; 
11768  4895                              
11769  4895 FA F5 FF      lea d, [bp + -11] ; $i
11770  4898 2A            mov b, [d]
11771  4899 38 00 00      mov c, 0
11772  489C 11            mov a, b
11773  489D FD 77         inc b
11774  489F FA F5 FF      lea d, [bp + -11] ; $i
11775  48A2 FD 43         mov [d], b
11776  48A4 27            mov b, a
11777  48A5 0A 08 48      jmp _while199_cond
11778  48A8             _while199_exit:
11779  48A8             ; while (i > 0) { 
11780  48A8             _while202_cond:
11781  48A8                              
11782  48A8 FA F5 FF      lea d, [bp + -11] ; $i
11783  48AB 2A            mov b, [d]
11784  48AC 38 00 00      mov c, 0
11785  48AF             ; --- START RELATIONAL
11786  48AF D7            push a
11787  48B0 11            mov a, b
11788  48B1 FD 2E 00 00   mov32 cb, $00000000
11788  48B5 00 00 
11789  48B7 B0            cmp a, b
11790  48B8 FD 7F         sgt ; >
11791  48BA E4            pop a
11792  48BB             ; --- END RELATIONAL
11793  48BB C0 00 00      cmp b, 0
11794  48BE C6 F0 48      je _while202_exit
11795  48C1             _while202_block:
11796  48C1             ; i--; 
11797  48C1                              
11798  48C1 FA F5 FF      lea d, [bp + -11] ; $i
11799  48C4 2A            mov b, [d]
11800  48C5 38 00 00      mov c, 0
11801  48C8 11            mov a, b
11802  48C9 FD 7D         dec b
11803  48CB FA F5 FF      lea d, [bp + -11] ; $i
11804  48CE FD 43         mov [d], b
11805  48D0 27            mov b, a
11806  48D1             ; putchar(digits[i]); 
11807  48D1                              
11808  48D1             ; --- START FUNCTION CALL
11809  48D1                              
11810  48D1 FA F7 FF      lea d, [bp + -9] ; $digits
11811  48D4 D7            push a
11812  48D5 DA            push d
11813  48D6                              
11814  48D6 FA F5 FF      lea d, [bp + -11] ; $i
11815  48D9 2A            mov b, [d]
11816  48DA 38 00 00      mov c, 0
11817  48DD E7            pop d
11818  48DE 5A            add d, b
11819  48DF E4            pop a
11820  48E0 32            mov bl, [d]
11821  48E1 A7 00         mov bh, 0
11822  48E3 38 00 00      mov c, 0
11823  48E6 DD            push bl
11824  48E7 07 05 43      call putchar
11825  48EA 51 01 00      add sp, 1
11826  48ED             ; --- END FUNCTION CALL
11827  48ED 0A A8 48      jmp _while202_cond
11828  48F0             _while202_exit:
11829  48F0 F9            leave
11830  48F1 09            ret
11831  48F2             
11832  48F2             print_unsigned_long:
11833  48F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11834  48F5             ; char digits[10]; 
11835  48F5 52 0A 00      sub sp, 10
11836  48F8             ; int i; 
11837  48F8 52 02 00      sub sp, 2
11838  48FB             ; i = 0; 
11839  48FB FA F5 FF      lea d, [bp + -11] ; $i
11840  48FE DA            push d
11841  48FF                              
11842  48FF FD 2E 00 00   mov32 cb, $00000000
11842  4903 00 00 
11843  4905 E7            pop d
11844  4906 FD 43         mov [d], b
11845  4908             ; if(num == 0){ 
11846  4908             _if203_cond:
11847  4908                              
11848  4908 FA 05 00      lea d, [bp + 5] ; $num
11849  490B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11850  490E FD 39         mov c, b ; And place it into C
11851  4910 2A            mov b, [d] ; Lower Word in B
11852  4911             ; --- START RELATIONAL
11853  4911 D7            push a
11854  4912 FD D8         push g
11855  4914 11            mov a, b
11856  4915 FD 7A         mov g, c
11857  4917 FD 2E 00 00   mov32 cb, $00000000
11857  491B 00 00 
11858  491D FD AF         cmp32 ga, cb
11859  491F FD 71         seq ; ==
11860  4921 FD F1         pop g
11861  4923 E4            pop a
11862  4924             ; --- END RELATIONAL
11863  4924 C0 00 00      cmp b, 0
11864  4927 C6 3C 49      je _if203_exit
11865  492A             _if203_TRUE:
11866  492A             ; putchar('0'); 
11867  492A                              
11868  492A             ; --- START FUNCTION CALL
11869  492A                              
11870  492A FD 2E 30 00   mov32 cb, $00000030
11870  492E 00 00 
11871  4930 DD            push bl
11872  4931 07 05 43      call putchar
11873  4934 51 01 00      add sp, 1
11874  4937             ; --- END FUNCTION CALL
11875  4937             ; return; 
11876  4937 F9            leave
11877  4938 09            ret
11878  4939 0A 3C 49      jmp _if203_exit
11879  493C             _if203_exit:
11880  493C             ; while (num > 0) { 
11881  493C             _while204_cond:
11882  493C                              
11883  493C FA 05 00      lea d, [bp + 5] ; $num
11884  493F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11885  4942 FD 39         mov c, b ; And place it into C
11886  4944 2A            mov b, [d] ; Lower Word in B
11887  4945             ; --- START RELATIONAL
11888  4945 D7            push a
11889  4946 FD D8         push g
11890  4948 11            mov a, b
11891  4949 FD 7A         mov g, c
11892  494B FD 2E 00 00   mov32 cb, $00000000
11892  494F 00 00 
11893  4951 FD AF         cmp32 ga, cb
11894  4953 FD 81         sgu
11895  4955 FD F1         pop g
11896  4957 E4            pop a
11897  4958             ; --- END RELATIONAL
11898  4958 C0 00 00      cmp b, 0
11899  495B C6 DC 49      je _while204_exit
11900  495E             _while204_block:
11901  495E             ; digits[i] = '0' + (num % 10); 
11902  495E FA F7 FF      lea d, [bp + -9] ; $digits
11903  4961 D7            push a
11904  4962 DA            push d
11905  4963                              
11906  4963 FA F5 FF      lea d, [bp + -11] ; $i
11907  4966 2A            mov b, [d]
11908  4967 38 00 00      mov c, 0
11909  496A E7            pop d
11910  496B 5A            add d, b
11911  496C E4            pop a
11912  496D DA            push d
11913  496E                              
11914  496E FD 2E 30 00   mov32 cb, $00000030
11914  4972 00 00 
11915  4974             ; --- START TERMS
11916  4974 D7            push a
11917  4975 11            mov a, b
11918  4976                              
11919  4976 FA 05 00      lea d, [bp + 5] ; $num
11920  4979 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11921  497C FD 39         mov c, b ; And place it into C
11922  497E 2A            mov b, [d] ; Lower Word in B
11923  497F             ; --- START FACTORS
11924  497F D7            push a
11925  4980 FD D8         push g
11926  4982 11            mov a, b
11927  4983 FD 7A         mov g, c
11928  4985 FD 2E 0A 00   mov32 cb, $0000000a
11928  4989 00 00 
11929  498B FD D8         push g ; save 'g' as the div instruction uses it
11930  498D AE            div a, b ; %, a: quotient, b: remainder
11931  498E 11            mov a, b
11932  498F FD F1         pop g
11933  4991 FD 38         mov c, g
11934  4993 27            mov b, a
11935  4994 FD F1         pop g
11936  4996 E4            pop a
11937  4997             ; --- END FACTORS
11938  4997 FD 15         add32 cb, ga
11939  4999 E4            pop a
11940  499A             ; --- END TERMS
11941  499A E7            pop d
11942  499B FD 3E         mov [d], bl
11943  499D             ; num = num / 10; 
11944  499D FA 05 00      lea d, [bp + 5] ; $num
11945  49A0 DA            push d
11946  49A1                              
11947  49A1 FA 05 00      lea d, [bp + 5] ; $num
11948  49A4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11949  49A7 FD 39         mov c, b ; And place it into C
11950  49A9 2A            mov b, [d] ; Lower Word in B
11951  49AA             ; --- START FACTORS
11952  49AA D7            push a
11953  49AB FD D8         push g
11954  49AD 11            mov a, b
11955  49AE FD 7A         mov g, c
11956  49B0 FD 2E 0A 00   mov32 cb, $0000000a
11956  49B4 00 00 
11957  49B6 FD D8         push g ; save 'g' as the div instruction uses it
11958  49B8 AE            div a, b ; /, a: quotient, b: remainder
11959  49B9 FD F1         pop g
11960  49BB FD 38         mov c, g
11961  49BD 27            mov b, a
11962  49BE FD F1         pop g
11963  49C0 E4            pop a
11964  49C1             ; --- END FACTORS
11965  49C1 E7            pop d
11966  49C2 FD 43         mov [d], b
11967  49C4 28            mov b, c
11968  49C5 FD 44 02 00   mov [d + 2], b
11969  49C9             ; i++; 
11970  49C9                              
11971  49C9 FA F5 FF      lea d, [bp + -11] ; $i
11972  49CC 2A            mov b, [d]
11973  49CD 38 00 00      mov c, 0
11974  49D0 11            mov a, b
11975  49D1 FD 77         inc b
11976  49D3 FA F5 FF      lea d, [bp + -11] ; $i
11977  49D6 FD 43         mov [d], b
11978  49D8 27            mov b, a
11979  49D9 0A 3C 49      jmp _while204_cond
11980  49DC             _while204_exit:
11981  49DC             ; while (i > 0) { 
11982  49DC             _while207_cond:
11983  49DC                              
11984  49DC FA F5 FF      lea d, [bp + -11] ; $i
11985  49DF 2A            mov b, [d]
11986  49E0 38 00 00      mov c, 0
11987  49E3             ; --- START RELATIONAL
11988  49E3 D7            push a
11989  49E4 11            mov a, b
11990  49E5 FD 2E 00 00   mov32 cb, $00000000
11990  49E9 00 00 
11991  49EB B0            cmp a, b
11992  49EC FD 7F         sgt ; >
11993  49EE E4            pop a
11994  49EF             ; --- END RELATIONAL
11995  49EF C0 00 00      cmp b, 0
11996  49F2 C6 24 4A      je _while207_exit
11997  49F5             _while207_block:
11998  49F5             ; i--; 
11999  49F5                              
12000  49F5 FA F5 FF      lea d, [bp + -11] ; $i
12001  49F8 2A            mov b, [d]
12002  49F9 38 00 00      mov c, 0
12003  49FC 11            mov a, b
12004  49FD FD 7D         dec b
12005  49FF FA F5 FF      lea d, [bp + -11] ; $i
12006  4A02 FD 43         mov [d], b
12007  4A04 27            mov b, a
12008  4A05             ; putchar(digits[i]); 
12009  4A05                              
12010  4A05             ; --- START FUNCTION CALL
12011  4A05                              
12012  4A05 FA F7 FF      lea d, [bp + -9] ; $digits
12013  4A08 D7            push a
12014  4A09 DA            push d
12015  4A0A                              
12016  4A0A FA F5 FF      lea d, [bp + -11] ; $i
12017  4A0D 2A            mov b, [d]
12018  4A0E 38 00 00      mov c, 0
12019  4A11 E7            pop d
12020  4A12 5A            add d, b
12021  4A13 E4            pop a
12022  4A14 32            mov bl, [d]
12023  4A15 A7 00         mov bh, 0
12024  4A17 38 00 00      mov c, 0
12025  4A1A DD            push bl
12026  4A1B 07 05 43      call putchar
12027  4A1E 51 01 00      add sp, 1
12028  4A21             ; --- END FUNCTION CALL
12029  4A21 0A DC 49      jmp _while207_cond
12030  4A24             _while207_exit:
12031  4A24 F9            leave
12032  4A25 09            ret
12033  4A26             
12034  4A26             printx32:
12035  4A26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12036  4A29             ; --- BEGIN INLINE ASM SEGMENT
12037  4A29 FA 05 00      lea d, [bp + 5] ; $hex
12038  4A2C 2B 02 00      mov b, [d+2]
12039  4A2F 07 38 4A      call print_u16x_printx32
12040  4A32 2A            mov b, [d]
12041  4A33 07 38 4A      call print_u16x_printx32
12042  4A36             ; --- END INLINE ASM SEGMENT
12043  4A36             ; return; 
12044  4A36 F9            leave
12045  4A37 09            ret
12046  4A38             ; --- BEGIN INLINE ASM SEGMENT
12047  4A38             print_u16x_printx32:
12048  4A38 D7            push a
12049  4A39 D8            push b
12050  4A3A DD            push bl
12051  4A3B 30            mov bl, bh
12052  4A3C 07 5A 4A      call _itoa_printx32        ; convert bh to char in A
12053  4A3F 2F            mov bl, al        ; save al
12054  4A40 19 00         mov al, 0
12055  4A42 05 03         syscall sys_io        ; display AH
12056  4A44 24            mov ah, bl        ; retrieve al
12057  4A45 19 00         mov al, 0
12058  4A47 05 03         syscall sys_io        ; display AL
12059  4A49 EA            pop bl
12060  4A4A 07 5A 4A      call _itoa_printx32        ; convert bh to char in A
12061  4A4D 2F            mov bl, al        ; save al
12062  4A4E 19 00         mov al, 0
12063  4A50 05 03         syscall sys_io        ; display AH
12064  4A52 24            mov ah, bl        ; retrieve al
12065  4A53 19 00         mov al, 0
12066  4A55 05 03         syscall sys_io        ; display AL
12067  4A57 E5            pop b
12068  4A58 E4            pop a
12069  4A59 09            ret
12070  4A5A             _itoa_printx32:
12071  4A5A DA            push d
12072  4A5B D8            push b
12073  4A5C A7 00         mov bh, 0
12074  4A5E FD A4 04      shr bl, 4  
12075  4A61 74            mov d, b
12076  4A62 1F 74 4A      mov al, [d + s_hex_digits_printx32]
12077  4A65 23            mov ah, al
12078  4A66 E5            pop b
12079  4A67 D8            push b
12080  4A68 A7 00         mov bh, 0
12081  4A6A FD 87 0F      and bl, $0F
12082  4A6D 74            mov d, b
12083  4A6E 1F 74 4A      mov al, [d + s_hex_digits_printx32]
12084  4A71 E5            pop b
12085  4A72 E7            pop d
12086  4A73 09            ret
12087  4A74 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
12087  4A78 34 35 36 37 
12087  4A7C 38 39 41 42 
12087  4A80 43 44 45 46 
12088  4A84             ; --- END INLINE ASM SEGMENT
12089  4A84 F9            leave
12090  4A85 09            ret
12091  4A86             
12092  4A86             err:
12093  4A86 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12094  4A89             ; print(e); 
12095  4A89                              
12096  4A89             ; --- START FUNCTION CALL
12097  4A89                              
12098  4A89 FA 05 00      lea d, [bp + 5] ; $e
12099  4A8C 2A            mov b, [d]
12100  4A8D 38 00 00      mov c, 0
12101  4A90 FD AB         swp b
12102  4A92 D8            push b
12103  4A93 07 7C 3E      call print
12104  4A96 51 02 00      add sp, 2
12105  4A99             ; --- END FUNCTION CALL
12106  4A99 F9            leave
12107  4A9A 09            ret
12108  4A9B             
12109  4A9B             print_signed:
12110  4A9B F8 00 00      enter 0 ; (push bp; mov bp, sp)
12111  4A9E             ; char digits[5]; 
12112  4A9E 52 05 00      sub sp, 5
12113  4AA1             ; int i = 0; 
12114  4AA1 52 02 00      sub sp, 2
12115  4AA4             ; --- START LOCAL VAR INITIALIZATION
12116  4AA4 FA FA FF      lea d, [bp + -6] ; $i
12117  4AA7 DA            push d
12118  4AA8                              
12119  4AA8 FD 2E 00 00   mov32 cb, $00000000
12119  4AAC 00 00 
12120  4AAE E7            pop d
12121  4AAF FD 43         mov [d], b
12122  4AB1             ; --- END LOCAL VAR INITIALIZATION
12123  4AB1             ; if (num < 0) { 
12124  4AB1             _if208_cond:
12125  4AB1                              
12126  4AB1 FA 05 00      lea d, [bp + 5] ; $num
12127  4AB4 2A            mov b, [d]
12128  4AB5 38 00 00      mov c, 0
12129  4AB8             ; --- START RELATIONAL
12130  4AB8 D7            push a
12131  4AB9 11            mov a, b
12132  4ABA FD 2E 00 00   mov32 cb, $00000000
12132  4ABE 00 00 
12133  4AC0 B0            cmp a, b
12134  4AC1 FD 73         slt ; < (signed)
12135  4AC3 E4            pop a
12136  4AC4             ; --- END RELATIONAL
12137  4AC4 C0 00 00      cmp b, 0
12138  4AC7 C6 EA 4A      je _if208_else
12139  4ACA             _if208_TRUE:
12140  4ACA             ; putchar('-'); 
12141  4ACA                              
12142  4ACA             ; --- START FUNCTION CALL
12143  4ACA                              
12144  4ACA FD 2E 2D 00   mov32 cb, $0000002d
12144  4ACE 00 00 
12145  4AD0 DD            push bl
12146  4AD1 07 05 43      call putchar
12147  4AD4 51 01 00      add sp, 1
12148  4AD7             ; --- END FUNCTION CALL
12149  4AD7             ; num = -num; 
12150  4AD7 FA 05 00      lea d, [bp + 5] ; $num
12151  4ADA DA            push d
12152  4ADB                              
12153  4ADB FA 05 00      lea d, [bp + 5] ; $num
12154  4ADE 2A            mov b, [d]
12155  4ADF 38 00 00      mov c, 0
12156  4AE2 FD 97         neg b
12157  4AE4 E7            pop d
12158  4AE5 FD 43         mov [d], b
12159  4AE7 0A 15 4B      jmp _if208_exit
12160  4AEA             _if208_else:
12161  4AEA             ; if (num == 0) { 
12162  4AEA             _if209_cond:
12163  4AEA                              
12164  4AEA FA 05 00      lea d, [bp + 5] ; $num
12165  4AED 2A            mov b, [d]
12166  4AEE 38 00 00      mov c, 0
12167  4AF1             ; --- START RELATIONAL
12168  4AF1 D7            push a
12169  4AF2 11            mov a, b
12170  4AF3 FD 2E 00 00   mov32 cb, $00000000
12170  4AF7 00 00 
12171  4AF9 B0            cmp a, b
12172  4AFA FD 71         seq ; ==
12173  4AFC E4            pop a
12174  4AFD             ; --- END RELATIONAL
12175  4AFD C0 00 00      cmp b, 0
12176  4B00 C6 15 4B      je _if209_exit
12177  4B03             _if209_TRUE:
12178  4B03             ; putchar('0'); 
12179  4B03                              
12180  4B03             ; --- START FUNCTION CALL
12181  4B03                              
12182  4B03 FD 2E 30 00   mov32 cb, $00000030
12182  4B07 00 00 
12183  4B09 DD            push bl
12184  4B0A 07 05 43      call putchar
12185  4B0D 51 01 00      add sp, 1
12186  4B10             ; --- END FUNCTION CALL
12187  4B10             ; return; 
12188  4B10 F9            leave
12189  4B11 09            ret
12190  4B12 0A 15 4B      jmp _if209_exit
12191  4B15             _if209_exit:
12192  4B15             _if208_exit:
12193  4B15             ; while (num > 0) { 
12194  4B15             _while210_cond:
12195  4B15                              
12196  4B15 FA 05 00      lea d, [bp + 5] ; $num
12197  4B18 2A            mov b, [d]
12198  4B19 38 00 00      mov c, 0
12199  4B1C             ; --- START RELATIONAL
12200  4B1C D7            push a
12201  4B1D 11            mov a, b
12202  4B1E FD 2E 00 00   mov32 cb, $00000000
12202  4B22 00 00 
12203  4B24 B0            cmp a, b
12204  4B25 FD 7F         sgt ; >
12205  4B27 E4            pop a
12206  4B28             ; --- END RELATIONAL
12207  4B28 C0 00 00      cmp b, 0
12208  4B2B C6 A2 4B      je _while210_exit
12209  4B2E             _while210_block:
12210  4B2E             ; digits[i] = '0' + (num % 10); 
12211  4B2E FA FC FF      lea d, [bp + -4] ; $digits
12212  4B31 D7            push a
12213  4B32 DA            push d
12214  4B33                              
12215  4B33 FA FA FF      lea d, [bp + -6] ; $i
12216  4B36 2A            mov b, [d]
12217  4B37 38 00 00      mov c, 0
12218  4B3A E7            pop d
12219  4B3B 5A            add d, b
12220  4B3C E4            pop a
12221  4B3D DA            push d
12222  4B3E                              
12223  4B3E FD 2E 30 00   mov32 cb, $00000030
12223  4B42 00 00 
12224  4B44             ; --- START TERMS
12225  4B44 D7            push a
12226  4B45 11            mov a, b
12227  4B46                              
12228  4B46 FA 05 00      lea d, [bp + 5] ; $num
12229  4B49 2A            mov b, [d]
12230  4B4A 38 00 00      mov c, 0
12231  4B4D             ; --- START FACTORS
12232  4B4D D7            push a
12233  4B4E FD D8         push g
12234  4B50 11            mov a, b
12235  4B51 FD 7A         mov g, c
12236  4B53 FD 2E 0A 00   mov32 cb, $0000000a
12236  4B57 00 00 
12237  4B59 FD D8         push g ; save 'g' as the div instruction uses it
12238  4B5B AE            div a, b ; %, a: quotient, b: remainder
12239  4B5C 11            mov a, b
12240  4B5D FD F1         pop g
12241  4B5F FD 38         mov c, g
12242  4B61 27            mov b, a
12243  4B62 FD F1         pop g
12244  4B64 E4            pop a
12245  4B65             ; --- END FACTORS
12246  4B65 56            add b, a
12247  4B66 E4            pop a
12248  4B67             ; --- END TERMS
12249  4B67 E7            pop d
12250  4B68 FD 3E         mov [d], bl
12251  4B6A             ; num = num / 10; 
12252  4B6A FA 05 00      lea d, [bp + 5] ; $num
12253  4B6D DA            push d
12254  4B6E                              
12255  4B6E FA 05 00      lea d, [bp + 5] ; $num
12256  4B71 2A            mov b, [d]
12257  4B72 38 00 00      mov c, 0
12258  4B75             ; --- START FACTORS
12259  4B75 D7            push a
12260  4B76 FD D8         push g
12261  4B78 11            mov a, b
12262  4B79 FD 7A         mov g, c
12263  4B7B FD 2E 0A 00   mov32 cb, $0000000a
12263  4B7F 00 00 
12264  4B81 FD D8         push g ; save 'g' as the div instruction uses it
12265  4B83 AE            div a, b ; /, a: quotient, b: remainder
12266  4B84 FD F1         pop g
12267  4B86 FD 38         mov c, g
12268  4B88 27            mov b, a
12269  4B89 FD F1         pop g
12270  4B8B E4            pop a
12271  4B8C             ; --- END FACTORS
12272  4B8C E7            pop d
12273  4B8D FD 43         mov [d], b
12274  4B8F             ; i++; 
12275  4B8F                              
12276  4B8F FA FA FF      lea d, [bp + -6] ; $i
12277  4B92 2A            mov b, [d]
12278  4B93 38 00 00      mov c, 0
12279  4B96 11            mov a, b
12280  4B97 FD 77         inc b
12281  4B99 FA FA FF      lea d, [bp + -6] ; $i
12282  4B9C FD 43         mov [d], b
12283  4B9E 27            mov b, a
12284  4B9F 0A 15 4B      jmp _while210_cond
12285  4BA2             _while210_exit:
12286  4BA2             ; while (i > 0) { 
12287  4BA2             _while213_cond:
12288  4BA2                              
12289  4BA2 FA FA FF      lea d, [bp + -6] ; $i
12290  4BA5 2A            mov b, [d]
12291  4BA6 38 00 00      mov c, 0
12292  4BA9             ; --- START RELATIONAL
12293  4BA9 D7            push a
12294  4BAA 11            mov a, b
12295  4BAB FD 2E 00 00   mov32 cb, $00000000
12295  4BAF 00 00 
12296  4BB1 B0            cmp a, b
12297  4BB2 FD 7F         sgt ; >
12298  4BB4 E4            pop a
12299  4BB5             ; --- END RELATIONAL
12300  4BB5 C0 00 00      cmp b, 0
12301  4BB8 C6 EA 4B      je _while213_exit
12302  4BBB             _while213_block:
12303  4BBB             ; i--; 
12304  4BBB                              
12305  4BBB FA FA FF      lea d, [bp + -6] ; $i
12306  4BBE 2A            mov b, [d]
12307  4BBF 38 00 00      mov c, 0
12308  4BC2 11            mov a, b
12309  4BC3 FD 7D         dec b
12310  4BC5 FA FA FF      lea d, [bp + -6] ; $i
12311  4BC8 FD 43         mov [d], b
12312  4BCA 27            mov b, a
12313  4BCB             ; putchar(digits[i]); 
12314  4BCB                              
12315  4BCB             ; --- START FUNCTION CALL
12316  4BCB                              
12317  4BCB FA FC FF      lea d, [bp + -4] ; $digits
12318  4BCE D7            push a
12319  4BCF DA            push d
12320  4BD0                              
12321  4BD0 FA FA FF      lea d, [bp + -6] ; $i
12322  4BD3 2A            mov b, [d]
12323  4BD4 38 00 00      mov c, 0
12324  4BD7 E7            pop d
12325  4BD8 5A            add d, b
12326  4BD9 E4            pop a
12327  4BDA 32            mov bl, [d]
12328  4BDB A7 00         mov bh, 0
12329  4BDD 38 00 00      mov c, 0
12330  4BE0 DD            push bl
12331  4BE1 07 05 43      call putchar
12332  4BE4 51 01 00      add sp, 1
12333  4BE7             ; --- END FUNCTION CALL
12334  4BE7 0A A2 4B      jmp _while213_cond
12335  4BEA             _while213_exit:
12336  4BEA F9            leave
12337  4BEB 09            ret
12338  4BEC             
12339  4BEC             print_unsigned:
12340  4BEC F8 00 00      enter 0 ; (push bp; mov bp, sp)
12341  4BEF             ; char digits[5]; 
12342  4BEF 52 05 00      sub sp, 5
12343  4BF2             ; int i; 
12344  4BF2 52 02 00      sub sp, 2
12345  4BF5             ; i = 0; 
12346  4BF5 FA FA FF      lea d, [bp + -6] ; $i
12347  4BF8 DA            push d
12348  4BF9                              
12349  4BF9 FD 2E 00 00   mov32 cb, $00000000
12349  4BFD 00 00 
12350  4BFF E7            pop d
12351  4C00 FD 43         mov [d], b
12352  4C02             ; if(num == 0){ 
12353  4C02             _if214_cond:
12354  4C02                              
12355  4C02 FA 05 00      lea d, [bp + 5] ; $num
12356  4C05 2A            mov b, [d]
12357  4C06 38 00 00      mov c, 0
12358  4C09             ; --- START RELATIONAL
12359  4C09 D7            push a
12360  4C0A 11            mov a, b
12361  4C0B FD 2E 00 00   mov32 cb, $00000000
12361  4C0F 00 00 
12362  4C11 B0            cmp a, b
12363  4C12 FD 71         seq ; ==
12364  4C14 E4            pop a
12365  4C15             ; --- END RELATIONAL
12366  4C15 C0 00 00      cmp b, 0
12367  4C18 C6 2D 4C      je _if214_exit
12368  4C1B             _if214_TRUE:
12369  4C1B             ; putchar('0'); 
12370  4C1B                              
12371  4C1B             ; --- START FUNCTION CALL
12372  4C1B                              
12373  4C1B FD 2E 30 00   mov32 cb, $00000030
12373  4C1F 00 00 
12374  4C21 DD            push bl
12375  4C22 07 05 43      call putchar
12376  4C25 51 01 00      add sp, 1
12377  4C28             ; --- END FUNCTION CALL
12378  4C28             ; return; 
12379  4C28 F9            leave
12380  4C29 09            ret
12381  4C2A 0A 2D 4C      jmp _if214_exit
12382  4C2D             _if214_exit:
12383  4C2D             ; while (num > 0) { 
12384  4C2D             _while215_cond:
12385  4C2D                              
12386  4C2D FA 05 00      lea d, [bp + 5] ; $num
12387  4C30 2A            mov b, [d]
12388  4C31 38 00 00      mov c, 0
12389  4C34             ; --- START RELATIONAL
12390  4C34 D7            push a
12391  4C35 11            mov a, b
12392  4C36 FD 2E 00 00   mov32 cb, $00000000
12392  4C3A 00 00 
12393  4C3C B0            cmp a, b
12394  4C3D FD 81         sgu ; > (unsigned)
12395  4C3F E4            pop a
12396  4C40             ; --- END RELATIONAL
12397  4C40 C0 00 00      cmp b, 0
12398  4C43 C6 BA 4C      je _while215_exit
12399  4C46             _while215_block:
12400  4C46             ; digits[i] = '0' + (num % 10); 
12401  4C46 FA FC FF      lea d, [bp + -4] ; $digits
12402  4C49 D7            push a
12403  4C4A DA            push d
12404  4C4B                              
12405  4C4B FA FA FF      lea d, [bp + -6] ; $i
12406  4C4E 2A            mov b, [d]
12407  4C4F 38 00 00      mov c, 0
12408  4C52 E7            pop d
12409  4C53 5A            add d, b
12410  4C54 E4            pop a
12411  4C55 DA            push d
12412  4C56                              
12413  4C56 FD 2E 30 00   mov32 cb, $00000030
12413  4C5A 00 00 
12414  4C5C             ; --- START TERMS
12415  4C5C D7            push a
12416  4C5D 11            mov a, b
12417  4C5E                              
12418  4C5E FA 05 00      lea d, [bp + 5] ; $num
12419  4C61 2A            mov b, [d]
12420  4C62 38 00 00      mov c, 0
12421  4C65             ; --- START FACTORS
12422  4C65 D7            push a
12423  4C66 FD D8         push g
12424  4C68 11            mov a, b
12425  4C69 FD 7A         mov g, c
12426  4C6B FD 2E 0A 00   mov32 cb, $0000000a
12426  4C6F 00 00 
12427  4C71 FD D8         push g ; save 'g' as the div instruction uses it
12428  4C73 AE            div a, b ; %, a: quotient, b: remainder
12429  4C74 11            mov a, b
12430  4C75 FD F1         pop g
12431  4C77 FD 38         mov c, g
12432  4C79 27            mov b, a
12433  4C7A FD F1         pop g
12434  4C7C E4            pop a
12435  4C7D             ; --- END FACTORS
12436  4C7D 56            add b, a
12437  4C7E E4            pop a
12438  4C7F             ; --- END TERMS
12439  4C7F E7            pop d
12440  4C80 FD 3E         mov [d], bl
12441  4C82             ; num = num / 10; 
12442  4C82 FA 05 00      lea d, [bp + 5] ; $num
12443  4C85 DA            push d
12444  4C86                              
12445  4C86 FA 05 00      lea d, [bp + 5] ; $num
12446  4C89 2A            mov b, [d]
12447  4C8A 38 00 00      mov c, 0
12448  4C8D             ; --- START FACTORS
12449  4C8D D7            push a
12450  4C8E FD D8         push g
12451  4C90 11            mov a, b
12452  4C91 FD 7A         mov g, c
12453  4C93 FD 2E 0A 00   mov32 cb, $0000000a
12453  4C97 00 00 
12454  4C99 FD D8         push g ; save 'g' as the div instruction uses it
12455  4C9B AE            div a, b ; /, a: quotient, b: remainder
12456  4C9C FD F1         pop g
12457  4C9E FD 38         mov c, g
12458  4CA0 27            mov b, a
12459  4CA1 FD F1         pop g
12460  4CA3 E4            pop a
12461  4CA4             ; --- END FACTORS
12462  4CA4 E7            pop d
12463  4CA5 FD 43         mov [d], b
12464  4CA7             ; i++; 
12465  4CA7                              
12466  4CA7 FA FA FF      lea d, [bp + -6] ; $i
12467  4CAA 2A            mov b, [d]
12468  4CAB 38 00 00      mov c, 0
12469  4CAE 11            mov a, b
12470  4CAF FD 77         inc b
12471  4CB1 FA FA FF      lea d, [bp + -6] ; $i
12472  4CB4 FD 43         mov [d], b
12473  4CB6 27            mov b, a
12474  4CB7 0A 2D 4C      jmp _while215_cond
12475  4CBA             _while215_exit:
12476  4CBA             ; while (i > 0) { 
12477  4CBA             _while218_cond:
12478  4CBA                              
12479  4CBA FA FA FF      lea d, [bp + -6] ; $i
12480  4CBD 2A            mov b, [d]
12481  4CBE 38 00 00      mov c, 0
12482  4CC1             ; --- START RELATIONAL
12483  4CC1 D7            push a
12484  4CC2 11            mov a, b
12485  4CC3 FD 2E 00 00   mov32 cb, $00000000
12485  4CC7 00 00 
12486  4CC9 B0            cmp a, b
12487  4CCA FD 7F         sgt ; >
12488  4CCC E4            pop a
12489  4CCD             ; --- END RELATIONAL
12490  4CCD C0 00 00      cmp b, 0
12491  4CD0 C6 02 4D      je _while218_exit
12492  4CD3             _while218_block:
12493  4CD3             ; i--; 
12494  4CD3                              
12495  4CD3 FA FA FF      lea d, [bp + -6] ; $i
12496  4CD6 2A            mov b, [d]
12497  4CD7 38 00 00      mov c, 0
12498  4CDA 11            mov a, b
12499  4CDB FD 7D         dec b
12500  4CDD FA FA FF      lea d, [bp + -6] ; $i
12501  4CE0 FD 43         mov [d], b
12502  4CE2 27            mov b, a
12503  4CE3             ; putchar(digits[i]); 
12504  4CE3                              
12505  4CE3             ; --- START FUNCTION CALL
12506  4CE3                              
12507  4CE3 FA FC FF      lea d, [bp + -4] ; $digits
12508  4CE6 D7            push a
12509  4CE7 DA            push d
12510  4CE8                              
12511  4CE8 FA FA FF      lea d, [bp + -6] ; $i
12512  4CEB 2A            mov b, [d]
12513  4CEC 38 00 00      mov c, 0
12514  4CEF E7            pop d
12515  4CF0 5A            add d, b
12516  4CF1 E4            pop a
12517  4CF2 32            mov bl, [d]
12518  4CF3 A7 00         mov bh, 0
12519  4CF5 38 00 00      mov c, 0
12520  4CF8 DD            push bl
12521  4CF9 07 05 43      call putchar
12522  4CFC 51 01 00      add sp, 1
12523  4CFF             ; --- END FUNCTION CALL
12524  4CFF 0A BA 4C      jmp _while218_cond
12525  4D02             _while218_exit:
12526  4D02 F9            leave
12527  4D03 09            ret
12528  4D04             
12529  4D04             printx8:
12530  4D04 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12531  4D07             ; --- BEGIN INLINE ASM SEGMENT
12532  4D07 FA 05 00      lea d, [bp + 5] ; $hex
12533  4D0A 32            mov bl, [d]
12534  4D0B 07 1A 4D      call _itoa_printx8        ; convert bl to char in A
12535  4D0E 2F            mov bl, al        ; save al
12536  4D0F 19 00         mov al, 0
12537  4D11 05 03         syscall sys_io        ; display AH
12538  4D13 24            mov ah, bl        ; retrieve al
12539  4D14 19 00         mov al, 0
12540  4D16 05 03         syscall sys_io        ; display AL
12541  4D18             ; --- END INLINE ASM SEGMENT
12542  4D18             ; return; 
12543  4D18 F9            leave
12544  4D19 09            ret
12545  4D1A             ; --- BEGIN INLINE ASM SEGMENT
12546  4D1A             _itoa_printx8:
12547  4D1A DA            push d
12548  4D1B D8            push b
12549  4D1C A7 00         mov bh, 0
12550  4D1E FD A4 04      shr bl, 4  
12551  4D21 74            mov d, b
12552  4D22 1F 34 4D      mov al, [d + s_hex_digits_printx8]
12553  4D25 23            mov ah, al
12554  4D26 E5            pop b
12555  4D27 D8            push b
12556  4D28 A7 00         mov bh, 0
12557  4D2A FD 87 0F      and bl, $0F
12558  4D2D 74            mov d, b
12559  4D2E 1F 34 4D      mov al, [d + s_hex_digits_printx8]
12560  4D31 E5            pop b
12561  4D32 E7            pop d
12562  4D33 09            ret
12563  4D34 30 31 32 33 s_hex_digits_printx8:    .db "0123456789ABCDEF"  
12563  4D38 34 35 36 37 
12563  4D3C 38 39 41 42 
12563  4D40 43 44 45 46 
12564  4D44             ; --- END INLINE ASM SEGMENT
12565  4D44 F9            leave
12566  4D45 09            ret
12567  4D46             ; --- END TEXT SEGMENT
12568  4D46             
12569  4D46             ; --- BEGIN DATA SEGMENT
12570  4D46             _keywords_data:
12571  4D46 FD 4F       .dw _s0
12572  4D48 01          .db 1
12573  4D49 01 50       .dw _s1
12574  4D4B 02          .db 2
12575  4D4C 09 50       .dw _s2
12576  4D4E 03          .db 3
12577  4D4F 0E 50       .dw _s3
12578  4D51 04          .db 4
12579  4D52 13 50       .dw _s4
12580  4D54 06          .db 6
12581  4D55 16 50       .dw _s5
12582  4D57 07          .db 7
12583  4D58 19 50       .dw _s6
12584  4D5A 05          .db 5
12585  4D5B 1D 50       .dw _s7
12586  4D5D 00          .db 0
12587  4D5E 00 00 00 00 _label_table_data: .fill 288, 0
12587  4D62 00 00 00 00 
12587  4D66 00 00 00 00 
12587  4D6A 00 00 00 00 
12587  4D6E 00 00 00 00 
12587  4D72 00 00 00 00 
12587  4D76 00 00 00 00 
12587  4D7A 00 00 00 00 
12587  4D7E 00 00 00 00 
12587  4D82 00 00 00 00 
12587  4D86 00 00 00 00 
12587  4D8A 00 00 00 00 
12587  4D8E 00 00 00 00 
12587  4D92 00 00 00 00 
12587  4D96 00 00 00 00 
12587  4D9A 00 00 00 00 
12587  4D9E 00 00 00 00 
12587  4DA2 00 00 00 00 
12587  4DA6 00 00 00 00 
12587  4DAA 00 00 00 00 
12587  4DAE 00 00 00 00 
12587  4DB2 00 00 00 00 
12587  4DB6 00 00 00 00 
12587  4DBA 00 00 00 00 
12587  4DBE 00 00 00 00 
12587  4DC2 00 00 00 00 
12587  4DC6 00 00 00 00 
12587  4DCA 00 00 00 00 
12587  4DCE 00 00 00 00 
12587  4DD2 00 00 00 00 
12587  4DD6 00 00 00 00 
12587  4DDA 00 00 00 00 
12587  4DDE 00 00 00 00 
12587  4DE2 00 00 00 00 
12587  4DE6 00 00 00 00 
12587  4DEA 00 00 00 00 
12587  4DEE 00 00 00 00 
12587  4DF2 00 00 00 00 
12587  4DF6 00 00 00 00 
12587  4DFA 00 00 00 00 
12587  4DFE 00 00 00 00 
12587  4E02 00 00 00 00 
12587  4E06 00 00 00 00 
12587  4E0A 00 00 00 00 
12587  4E0E 00 00 00 00 
12587  4E12 00 00 00 00 
12587  4E16 00 00 00 00 
12587  4E1A 00 00 00 00 
12587  4E1E 00 00 00 00 
12587  4E22 00 00 00 00 
12587  4E26 00 00 00 00 
12587  4E2A 00 00 00 00 
12587  4E2E 00 00 00 00 
12587  4E32 00 00 00 00 
12587  4E36 00 00 00 00 
12587  4E3A 00 00 00 00 
12587  4E3E 00 00 00 00 
12587  4E42 00 00 00 00 
12587  4E46 00 00 00 00 
12587  4E4A 00 00 00 00 
12587  4E4E 00 00 00 00 
12587  4E52 00 00 00 00 
12587  4E56 00 00 00 00 
12587  4E5A 00 00 00 00 
12587  4E5E 00 00 00 00 
12587  4E62 00 00 00 00 
12587  4E66 00 00 00 00 
12587  4E6A 00 00 00 00 
12587  4E6E 00 00 00 00 
12587  4E72 00 00 00 00 
12587  4E76 00 00 00 00 
12587  4E7A 00 00 00 00 
12588  4E7E 00 04       __org: .dw $0400
12589  4E80 00 00       _pc: .fill 2, 0
12590  4E82 01          _print_information: .db $01
12591  4E83 00 00       _tok: .fill 2, 0
12592  4E85 00 00       _toktype: .fill 2, 0
12593  4E87 00 00       _prog: .fill 2, 0
12594  4E89 00 00 00 00 _token_data: .fill 64, 0
12594  4E8D 00 00 00 00 
12594  4E91 00 00 00 00 
12594  4E95 00 00 00 00 
12594  4E99 00 00 00 00 
12594  4E9D 00 00 00 00 
12594  4EA1 00 00 00 00 
12594  4EA5 00 00 00 00 
12594  4EA9 00 00 00 00 
12594  4EAD 00 00 00 00 
12594  4EB1 00 00 00 00 
12594  4EB5 00 00 00 00 
12594  4EB9 00 00 00 00 
12594  4EBD 00 00 00 00 
12594  4EC1 00 00 00 00 
12594  4EC5 00 00 00 00 
12595  4EC9 00 00 00 00 _string_const_data: .fill 256, 0
12595  4ECD 00 00 00 00 
12595  4ED1 00 00 00 00 
12595  4ED5 00 00 00 00 
12595  4ED9 00 00 00 00 
12595  4EDD 00 00 00 00 
12595  4EE1 00 00 00 00 
12595  4EE5 00 00 00 00 
12595  4EE9 00 00 00 00 
12595  4EED 00 00 00 00 
12595  4EF1 00 00 00 00 
12595  4EF5 00 00 00 00 
12595  4EF9 00 00 00 00 
12595  4EFD 00 00 00 00 
12595  4F01 00 00 00 00 
12595  4F05 00 00 00 00 
12595  4F09 00 00 00 00 
12595  4F0D 00 00 00 00 
12595  4F11 00 00 00 00 
12595  4F15 00 00 00 00 
12595  4F19 00 00 00 00 
12595  4F1D 00 00 00 00 
12595  4F21 00 00 00 00 
12595  4F25 00 00 00 00 
12595  4F29 00 00 00 00 
12595  4F2D 00 00 00 00 
12595  4F31 00 00 00 00 
12595  4F35 00 00 00 00 
12595  4F39 00 00 00 00 
12595  4F3D 00 00 00 00 
12595  4F41 00 00 00 00 
12595  4F45 00 00 00 00 
12595  4F49 00 00 00 00 
12595  4F4D 00 00 00 00 
12595  4F51 00 00 00 00 
12595  4F55 00 00 00 00 
12595  4F59 00 00 00 00 
12595  4F5D 00 00 00 00 
12595  4F61 00 00 00 00 
12595  4F65 00 00 00 00 
12595  4F69 00 00 00 00 
12595  4F6D 00 00 00 00 
12595  4F71 00 00 00 00 
12595  4F75 00 00 00 00 
12595  4F79 00 00 00 00 
12595  4F7D 00 00 00 00 
12595  4F81 00 00 00 00 
12595  4F85 00 00 00 00 
12595  4F89 00 00 00 00 
12595  4F8D 00 00 00 00 
12595  4F91 00 00 00 00 
12595  4F95 00 00 00 00 
12595  4F99 00 00 00 00 
12595  4F9D 00 00 00 00 
12595  4FA1 00 00 00 00 
12595  4FA5 00 00 00 00 
12595  4FA9 00 00 00 00 
12595  4FAD 00 00 00 00 
12595  4FB1 00 00 00 00 
12595  4FB5 00 00 00 00 
12595  4FB9 00 00 00 00 
12595  4FBD 00 00 00 00 
12595  4FC1 00 00 00 00 
12595  4FC5 00 00 00 00 
12596  4FC9 00 00       _int_const: .fill 2, 0
12597  4FCB 00 00       _program: .fill 2, 0
12598  4FCD 00 00       _bin_out: .fill 2, 0
12599  4FCF 00 00       _bin_p: .fill 2, 0
12600  4FD1 00 00       _opcode_table: .fill 2, 0
12601  4FD3 00 00 00 00 _prog_stack_data: .fill 20, 0
12601  4FD7 00 00 00 00 
12601  4FDB 00 00 00 00 
12601  4FDF 00 00 00 00 
12601  4FE3 00 00 00 00 
12602  4FE7 00 00       _prog_tos: .fill 2, 0
12603  4FE9 00 00       _prog_size: .fill 2, 0
12604  4FEB             _symbols_data: 
12605  4FEB 00 00       .dw 
12606  4FED 1E 50 20 50 .dw _s8, _s9, _s9, _s8, _s8, _s8, _s9, _s9, 
12606  4FF1 20 50 1E 50 
12606  4FF5 1E 50 1E 50 
12606  4FF9 20 50 20 50 
12607  4FFD 6F 72 67 00 _s0: .db "org", 0
12608  5001 69 6E 63 6C _s1: .db "include", 0
12608  5005 75 64 65 00 
12609  5009 64 61 74 61 _s2: .db "data", 0
12609  500D 00 
12610  500E 74 65 78 74 _s3: .db "text", 0
12610  5012 00 
12611  5013 64 62 00    _s4: .db "db", 0
12612  5016 64 77 00    _s5: .db "dw", 0
12613  5019 65 6E 64 00 _s6: .db "end", 0
12614  501D 00          _s7: .db "", 0
12615  501E 40 00       _s8: .db "@", 0
12616  5020 23 00       _s9: .db "#", 0
12617  5022 0A 00       _s10: .db "\n", 0
12618  5024 2E 2F 63 6F _s11: .db "./config.d/op_tbl", 0
12618  5028 6E 66 69 67 
12618  502C 2E 64 2F 6F 
12618  5030 70 5F 74 62 
12618  5034 6C 00 
12619  5036 50 61 72 73 _s12: .db "Parsing DATA section...", 0
12619  503A 69 6E 67 20 
12619  503E 44 41 54 41 
12619  5042 20 73 65 63 
12619  5046 74 69 6F 6E 
12619  504A 2E 2E 2E 00 
12620  504E 44 61 74 61 _s13: .db "Data segment not found.", 0
12620  5052 20 73 65 67 
12620  5056 6D 65 6E 74 
12620  505A 20 6E 6F 74 
12620  505E 20 66 6F 75 
12620  5062 6E 64 2E 00 
12621  5066 2E 64 62 3A _s14: .db ".db: ", 0
12621  506A 20 00 
12622  506C 2C 20 00    _s15: .db ", ", 0
12623  506F 2E 64 77 3A _s16: .db ".dw: ", 0
12623  5073 20 00 
12624  5075 44 6F 6E 65 _s17: .db "Done.\n", 0
12624  5079 2E 0A 00 
12625  507C 49 6E 74 65 _s18: .db "Integer constant expected in .org directive.", 0
12625  5080 67 65 72 20 
12625  5084 63 6F 6E 73 
12625  5088 74 61 6E 74 
12625  508C 20 65 78 70 
12625  5090 65 63 74 65 
12625  5094 64 20 69 6E 
12625  5098 20 2E 6F 72 
12625  509C 67 20 64 69 
12625  50A0 72 65 63 74 
12625  50A4 69 76 65 2E 
12625  50A8 00 
12626  50A9 50 61 72 73 _s19: .db "Parsing labels and directives...\n", 0
12626  50AD 69 6E 67 20 
12626  50B1 6C 61 62 65 
12626  50B5 6C 73 20 61 
12626  50B9 6E 64 20 64 
12626  50BD 69 72 65 63 
12626  50C1 74 69 76 65 
12626  50C5 73 2E 2E 2E 
12626  50C9 0A 00 
12627  50CB 2E 00       _s20: .db ".", 0
12628  50CD 0A 44 6F 6E _s21: .db "\nDone.\n", 0
12628  50D1 65 2E 0A 00 
12629  50D5 4F 72 67 3A _s22: .db "Org: %s\n", 0
12629  50D9 20 25 73 0A 
12629  50DD 00 
12630  50DE 0A 4C 61 62 _s23: .db "\nLabels list:\n", 0
12630  50E2 65 6C 73 20 
12630  50E6 6C 69 73 74 
12630  50EA 3A 0A 00 
12631  50ED 3A 20 00    _s24: .db ": ", 0
12632  50F0 20 2E 00    _s25: .db " .", 0
12633  50F3 20 00       _s26: .db " ", 0
12634  50F5 4D 61 78 69 _s27: .db "Maximum number of operands per instruction is 2.", 0
12634  50F9 6D 75 6D 20 
12634  50FD 6E 75 6D 62 
12634  5101 65 72 20 6F 
12634  5105 66 20 6F 70 
12634  5109 65 72 61 6E 
12634  510D 64 73 20 70 
12634  5111 65 72 20 69 
12634  5115 6E 73 74 72 
12634  5119 75 63 74 69 
12634  511D 6F 6E 20 69 
12634  5121 73 20 32 2E 
12634  5125 00 
12635  5126 38 62 69 74 _s28: .db "8bit operand expected but 16bit label given.", 0
12635  512A 20 6F 70 65 
12635  512E 72 61 6E 64 
12635  5132 20 65 78 70 
12635  5136 65 63 74 65 
12635  513A 64 20 62 75 
12635  513E 74 20 31 36 
12635  5142 62 69 74 20 
12635  5146 6C 61 62 65 
12635  514A 6C 20 67 69 
12635  514E 76 65 6E 2E 
12635  5152 00 
12636  5153 25 78 28 25 _s29: .db "%x(%d): %s\n", 0
12636  5157 64 29 3A 20 
12636  515B 25 73 0A 00 
12637  515F 55 6E 64 65 _s30: .db "Undeclared label: ", 0
12637  5163 63 6C 61 72 
12637  5167 65 64 20 6C 
12637  516B 61 62 65 6C 
12637  516F 3A 20 00 
12638  5172 50 61 72 73 _s31: .db "Parsing TEXT section...\n", 0
12638  5176 69 6E 67 20 
12638  517A 54 45 58 54 
12638  517E 20 73 65 63 
12638  5182 74 69 6F 6E 
12638  5186 2E 2E 2E 0A 
12638  518A 00 
12639  518B 54 45 58 54 _s32: .db "TEXT section not found.", 0
12639  518F 20 73 65 63 
12639  5193 74 69 6F 6E 
12639  5197 20 6E 6F 74 
12639  519B 20 66 6F 75 
12639  519F 6E 64 2E 00 
12640  51A3 54 45 58 54 _s33: .db "TEXT section end not found.", 0
12640  51A7 20 73 65 63 
12640  51AB 74 69 6F 6E 
12640  51AF 20 65 6E 64 
12640  51B3 20 6E 6F 74 
12640  51B7 20 66 6F 75 
12640  51BB 6E 64 2E 00 
12641  51BF 55 6E 65 78 _s34: .db "Unexpected directive.", 0
12641  51C3 70 65 63 74 
12641  51C7 65 64 20 64 
12641  51CB 69 72 65 63 
12641  51CF 74 69 76 65 
12641  51D3 2E 00 
12642  51D5 44 6F 6E 65 _s35: .db "Done.\n\n", 0
12642  51D9 2E 0A 0A 00 
12643  51DD 50 72 6F 67 _s36: .db "Prog Offset: %x\n", 0
12643  51E1 20 4F 66 66 
12643  51E5 73 65 74 3A 
12643  51E9 20 25 78 0A 
12643  51ED 00 
12644  51EE 50 72 6F 67 _s37: .db "Prog value : %c\n", 0
12644  51F2 20 76 61 6C 
12644  51F6 75 65 20 3A 
12644  51FA 20 25 63 0A 
12644  51FE 00 
12645  51FF 54 6F 6B 65 _s38: .db "Token      : %s\n", 0
12645  5203 6E 20 20 20 
12645  5207 20 20 20 3A 
12645  520B 20 25 73 0A 
12645  520F 00 
12646  5210 54 6F 6B 20 _s39: .db "Tok        : %d\n", 0
12646  5214 20 20 20 20 
12646  5218 20 20 20 3A 
12646  521C 20 25 64 0A 
12646  5220 00 
12647  5221 54 6F 6B 74 _s40: .db "Toktype    : %d\n", 0
12647  5225 79 70 65 20 
12647  5229 20 20 20 3A 
12647  522D 20 25 64 0A 
12647  5231 00 
12648  5232 53 74 72 69 _s41: .db "StringConst: %s\n", 0
12648  5236 6E 67 43 6F 
12648  523A 6E 73 74 3A 
12648  523E 20 25 73 0A 
12648  5242 00 
12649  5243 50 43 20 20 _s42: .db "PC         : %x\n", 0
12649  5247 20 20 20 20 
12649  524B 20 20 20 3A 
12649  524F 20 25 78 0A 
12649  5253 00 
12650  5254 0A 41 73 73 _s43: .db "\nAssembly complete.\n", 0
12650  5258 65 6D 62 6C 
12650  525C 79 20 63 6F 
12650  5260 6D 70 6C 65 
12650  5264 74 65 2E 0A 
12650  5268 00 
12651  5269 50 72 6F 67 _s44: .db "Program size: %d\n", 0
12651  526D 72 61 6D 20 
12651  5271 73 69 7A 65 
12651  5275 3A 20 25 64 
12651  5279 0A 00 
12652  527B 4C 69 73 74 _s45: .db "Listing: \n", 0
12652  527F 69 6E 67 3A 
12652  5283 20 0A 00 
12653  5286 61 00       _s46: .db "a", 0
12654  5288 61 6C 00    _s47: .db "al", 0
12655  528B 61 68 00    _s48: .db "ah", 0
12656  528E 62 00       _s49: .db "b", 0
12657  5290 62 6C 00    _s50: .db "bl", 0
12658  5293 62 68 00    _s51: .db "bh", 0
12659  5296 63 00       _s52: .db "c", 0
12660  5298 63 6C 00    _s53: .db "cl", 0
12661  529B 63 68 00    _s54: .db "ch", 0
12662  529E 64 00       _s55: .db "d", 0
12663  52A0 64 6C 00    _s56: .db "dl", 0
12664  52A3 64 68 00    _s57: .db "dh", 0
12665  52A6 67 00       _s58: .db "g", 0
12666  52A8 67 6C 00    _s59: .db "gl", 0
12667  52AB 67 68 00    _s60: .db "gh", 0
12668  52AE 70 63 00    _s61: .db "pc", 0
12669  52B1 73 70 00    _s62: .db "sp", 0
12670  52B4 62 70 00    _s63: .db "bp", 0
12671  52B7 73 69 00    _s64: .db "si", 0
12672  52BA 64 69 00    _s65: .db "di", 0
12673  52BD 77 6F 72 64 _s66: .db "word", 0
12673  52C1 00 
12674  52C2 62 79 74 65 _s67: .db "byte", 0
12674  52C6 00 
12675  52C7 63 6D 70 73 _s68: .db "cmpsb", 0
12675  52CB 62 00 
12676  52CD 6D 6F 76 73 _s69: .db "movsb", 0
12676  52D1 62 00 
12677  52D3 73 74 6F 73 _s70: .db "stosb", 0
12677  52D7 62 00 
12678  52D9 64 65 66 69 _s71: .db "define", 0
12678  52DD 6E 65 00 
12679  52E0 4C 61 62 65 _s72: .db "Label does not exist: ", 0
12679  52E4 6C 20 64 6F 
12679  52E8 65 73 20 6E 
12679  52EC 6F 74 20 65 
12679  52F0 78 69 73 74 
12679  52F4 3A 20 00 
12680  52F7 43 6C 6F 73 _s73: .db "Closing single quotes expected.", 0
12680  52FB 69 6E 67 20 
12680  52FF 73 69 6E 67 
12680  5303 6C 65 20 71 
12680  5307 75 6F 74 65 
12680  530B 73 20 65 78 
12680  530F 70 65 63 74 
12680  5313 65 64 2E 00 
12681  5317 44 6F 75 62 _s74: .db "Double quotes expected", 0
12681  531B 6C 65 20 71 
12681  531F 75 6F 74 65 
12681  5323 73 20 65 78 
12681  5327 70 65 63 74 
12681  532B 65 64 00 
12682  532E 54 4F 4B 45 _s75: .db "TOKEN ERROR. Prog: ", 0
12682  5332 4E 20 45 52 
12682  5336 52 4F 52 2E 
12682  533A 20 50 72 6F 
12682  533E 67 3A 20 00 
12683  5342 2C 20 50 72 _s76: .db ", ProgVal: ", 0
12683  5346 6F 67 56 61 
12683  534A 6C 3A 20 00 
12684  534E 0A 20 54 65 _s77: .db "\n Text after prog: \n", 0
12684  5352 78 74 20 61 
12684  5356 66 74 65 72 
12684  535A 20 70 72 6F 
12684  535E 67 3A 20 0A 
12684  5362 00 
12685  5363 0A 45 72 72 _s78: .db "\nError: ", 0
12685  5367 6F 72 3A 20 
12685  536B 00 
12686  536C 43 61 6E 6E _s79: .db "Cannot push prog. Stack overflow.", 0
12686  5370 6F 74 20 70 
12686  5374 75 73 68 20 
12686  5378 70 72 6F 67 
12686  537C 2E 20 53 74 
12686  5380 61 63 6B 20 
12686  5384 6F 76 65 72 
12686  5388 66 6C 6F 77 
12686  538C 2E 00 
12687  538E 43 61 6E 6E _s80: .db "Cannot pop prog. Stack overflow.", 0
12687  5392 6F 74 20 70 
12687  5396 6F 70 20 70 
12687  539A 72 6F 67 2E 
12687  539E 20 53 74 61 
12687  53A2 63 6B 20 6F 
12687  53A6 76 65 72 66 
12687  53AA 6C 6F 77 2E 
12687  53AE 00 
12688  53AF 55 6E 65 78 _s81: .db "Unexpected format in printf.", 0
12688  53B3 70 65 63 74 
12688  53B7 65 64 20 66 
12688  53BB 6F 72 6D 61 
12688  53BF 74 20 69 6E 
12688  53C3 20 70 72 69 
12688  53C7 6E 74 66 2E 
12688  53CB 00 
12689  53CC 45 72 72 6F _s82: .db "Error: Unknown argument type.\n", 0
12689  53D0 72 3A 20 55 
12689  53D4 6E 6B 6E 6F 
12689  53D8 77 6E 20 61 
12689  53DC 72 67 75 6D 
12689  53E0 65 6E 74 20 
12689  53E4 74 79 70 65 
12689  53E8 2E 0A 00 
12690  53EB             
12691  53EB ED 53       _heap_top: .dw _heap
12692  53ED 00          _heap: .db 0
12693  53EE             ; --- END DATA SEGMENT
12694  53EE             
12695  53EE             .end
tasm: Number of errors = 2
