0001   0000             ; --- FILENAME: adv
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $arg_p 
0011   0408             ; $arg_line_p 
0012   0408             ; $psrc 
0013   0408             ; $pdest 
0014   0408             ; $arg 
0015   0408             ; $arg_len 
0016   0408             ; $ch 
0017   0408             ; $savefilename 
0018   0408             ; $fp 
0019   0408             ; $optarg 
0020   0408             ; $opts 
0021   0408             ; $usage 
0022   0408 52 56 00      sub sp, 86
0023   040B             ;; argc = 0; 
0024   040B FA 07 00      lea d, [bp + 7] ; $argc
0025   040E DA            push d
0026   040F 26 00 00      mov b, $0
0027   0412 E7            pop d
0028   0413 FD 43         mov [d], b
0029   0415             ;; arg_line_p = 0; 
0030   0415 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0031   0418 DA            push d
0032   0419 26 00 00      mov b, $0
0033   041C E7            pop d
0034   041D FD 43         mov [d], b
0035   041F             ;; for(;;){ 
0036   041F             _for1_init:
0037   041F             _for1_cond:
0038   041F             _for1_block:
0039   041F             ;; arg_p = arg; 
0040   041F FA FF FF      lea d, [bp + -1] ; $arg_p
0041   0422 DA            push d
0042   0423 FA B9 FF      lea d, [bp + -71] ; $arg
0043   0426 2D            mov b, d
0044   0427 E7            pop d
0045   0428 FD 43         mov [d], b
0046   042A             ;; arg_len = 0; 
0047   042A FA B7 FF      lea d, [bp + -73] ; $arg_len
0048   042D DA            push d
0049   042E 26 00 00      mov b, $0
0050   0431 E7            pop d
0051   0432 FD 43         mov [d], b
0052   0434             ;; while(*arg_line_p == ' ' || *arg_line_p == '\t') arg_line_p++; 
0053   0434             _while2_cond:
0054   0434 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0055   0437 2A            mov b, [d]
0056   0438 74            mov d, b
0057   0439 32            mov bl, [d]
0058   043A A7 00         mov bh, 0
0059   043C             ; START RELATIONAL
0060   043C D7            push a
0061   043D 11            mov a, b
0062   043E 26 20 00      mov b, $20
0063   0441 B0            cmp a, b
0064   0442 FD 71         seq ; ==
0065   0444 E4            pop a
0066   0445             ; END RELATIONAL
0067   0445 D7            push a
0068   0446 11            mov a, b
0069   0447 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0070   044A 2A            mov b, [d]
0071   044B 74            mov d, b
0072   044C 32            mov bl, [d]
0073   044D A7 00         mov bh, 0
0074   044F             ; START RELATIONAL
0075   044F D7            push a
0076   0450 11            mov a, b
0077   0451 26 09 00      mov b, $9
0078   0454 B0            cmp a, b
0079   0455 FD 71         seq ; ==
0080   0457 E4            pop a
0081   0458             ; END RELATIONAL
0082   0458 FD A8         sor a, b ; ||
0083   045A E4            pop a
0084   045B C0 00 00      cmp b, 0
0085   045E C6 73 04      je _while2_exit
0086   0461             _while2_block:
0087   0461             ;; arg_line_p++; 
0088   0461 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0089   0464 2A            mov b, [d]
0090   0465 FD 79         mov g, b
0091   0467 FD 77         inc b
0092   0469 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0093   046C FD 43         mov [d], b
0094   046E FD 27         mov b, g
0095   0470 0A 34 04      jmp _while2_cond
0096   0473             _while2_exit:
0097   0473             ;; if(!*arg_line_p) break; 
0098   0473             _if3_cond:
0099   0473 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0100   0476 2A            mov b, [d]
0101   0477 74            mov d, b
0102   0478 32            mov bl, [d]
0103   0479 A7 00         mov bh, 0
0104   047B C0 00 00      cmp b, 0
0105   047E FD 71         seq ; !
0106   0480 C0 00 00      cmp b, 0
0107   0483 C6 8C 04      je _if3_exit
0108   0486             _if3_true:
0109   0486             ;; break; 
0110   0486 0A D7 05      jmp _for1_exit ; for break
0111   0489 0A 8C 04      jmp _if3_exit
0112   048C             _if3_exit:
0113   048C             ;; while(*arg_line_p != ' ' && *arg_line_p != ';' && *arg_line_p){ 
0114   048C             _while4_cond:
0115   048C FA FD FF      lea d, [bp + -3] ; $arg_line_p
0116   048F 2A            mov b, [d]
0117   0490 74            mov d, b
0118   0491 32            mov bl, [d]
0119   0492 A7 00         mov bh, 0
0120   0494             ; START RELATIONAL
0121   0494 D7            push a
0122   0495 11            mov a, b
0123   0496 26 20 00      mov b, $20
0124   0499 B0            cmp a, b
0125   049A FD 72         sneq ; !=
0126   049C E4            pop a
0127   049D             ; END RELATIONAL
0128   049D D7            push a
0129   049E 11            mov a, b
0130   049F FA FD FF      lea d, [bp + -3] ; $arg_line_p
0131   04A2 2A            mov b, [d]
0132   04A3 74            mov d, b
0133   04A4 32            mov bl, [d]
0134   04A5 A7 00         mov bh, 0
0135   04A7             ; START RELATIONAL
0136   04A7 D7            push a
0137   04A8 11            mov a, b
0138   04A9 26 3B 00      mov b, $3b
0139   04AC B0            cmp a, b
0140   04AD FD 72         sneq ; !=
0141   04AF E4            pop a
0142   04B0             ; END RELATIONAL
0143   04B0 FD A7         sand a, b ; &&
0144   04B2 11            mov a, b
0145   04B3 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0146   04B6 2A            mov b, [d]
0147   04B7 74            mov d, b
0148   04B8 32            mov bl, [d]
0149   04B9 A7 00         mov bh, 0
0150   04BB FD A7         sand a, b ; &&
0151   04BD E4            pop a
0152   04BE C0 00 00      cmp b, 0
0153   04C1 C6 25 05      je _while4_exit
0154   04C4             _while4_block:
0155   04C4             ;; if(*arg_line_p == '\\') arg_line_p++; 
0156   04C4             _if5_cond:
0157   04C4 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0158   04C7 2A            mov b, [d]
0159   04C8 74            mov d, b
0160   04C9 32            mov bl, [d]
0161   04CA A7 00         mov bh, 0
0162   04CC             ; START RELATIONAL
0163   04CC D7            push a
0164   04CD 11            mov a, b
0165   04CE 26 5C 00      mov b, $5c
0166   04D1 B0            cmp a, b
0167   04D2 FD 71         seq ; ==
0168   04D4 E4            pop a
0169   04D5             ; END RELATIONAL
0170   04D5 C0 00 00      cmp b, 0
0171   04D8 C6 ED 04      je _if5_exit
0172   04DB             _if5_true:
0173   04DB             ;; arg_line_p++; 
0174   04DB FA FD FF      lea d, [bp + -3] ; $arg_line_p
0175   04DE 2A            mov b, [d]
0176   04DF FD 79         mov g, b
0177   04E1 FD 77         inc b
0178   04E3 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0179   04E6 FD 43         mov [d], b
0180   04E8 FD 27         mov b, g
0181   04EA 0A ED 04      jmp _if5_exit
0182   04ED             _if5_exit:
0183   04ED             ;; *arg_p++ = *arg_line_p++; 
0184   04ED FA FF FF      lea d, [bp + -1] ; $arg_p
0185   04F0 2A            mov b, [d]
0186   04F1 FD 79         mov g, b
0187   04F3 FD 77         inc b
0188   04F5 FA FF FF      lea d, [bp + -1] ; $arg_p
0189   04F8 FD 43         mov [d], b
0190   04FA FD 27         mov b, g
0191   04FC D8            push b
0192   04FD FA FD FF      lea d, [bp + -3] ; $arg_line_p
0193   0500 2A            mov b, [d]
0194   0501 FD 79         mov g, b
0195   0503 FD 77         inc b
0196   0505 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0197   0508 FD 43         mov [d], b
0198   050A FD 27         mov b, g
0199   050C 74            mov d, b
0200   050D 32            mov bl, [d]
0201   050E A7 00         mov bh, 0
0202   0510 E7            pop d
0203   0511 FD 3E         mov [d], bl
0204   0513             ;; arg_len++; 
0205   0513 FA B7 FF      lea d, [bp + -73] ; $arg_len
0206   0516 2A            mov b, [d]
0207   0517 FD 79         mov g, b
0208   0519 FD 77         inc b
0209   051B FA B7 FF      lea d, [bp + -73] ; $arg_len
0210   051E FD 43         mov [d], b
0211   0520 FD 27         mov b, g
0212   0522 0A 8C 04      jmp _while4_cond
0213   0525             _while4_exit:
0214   0525             ;; *arg_p = '\0'; 
0215   0525 FA FF FF      lea d, [bp + -1] ; $arg_p
0216   0528 2A            mov b, [d]
0217   0529 D8            push b
0218   052A 26 00 00      mov b, $0
0219   052D E7            pop d
0220   052E FD 3E         mov [d], bl
0221   0530             ;; argv[argc] = heap_top; 
0222   0530 2C 05 00      mov b, [bp + 5] ; $argv
0223   0533 74            mov d, b
0224   0534 D7            push a
0225   0535 DA            push d
0226   0536 FA 07 00      lea d, [bp + 7] ; $argc
0227   0539 2A            mov b, [d]
0228   053A E7            pop d
0229   053B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0230   053F E4            pop a
0231   0540 DA            push d
0232   0541 3B 2B 17      mov d, _heap_top ; $heap_top
0233   0544 2A            mov b, [d]
0234   0545 E7            pop d
0235   0546 FD 43         mov [d], b
0236   0548             ;; heap_top = heap_top + arg_len + 1; 
0237   0548 3B 2B 17      mov d, _heap_top ; $heap_top
0238   054B DA            push d
0239   054C 3B 2B 17      mov d, _heap_top ; $heap_top
0240   054F 2A            mov b, [d]
0241   0550             ; START TERMS
0242   0550 D7            push a
0243   0551 11            mov a, b
0244   0552 FA B7 FF      lea d, [bp + -73] ; $arg_len
0245   0555 2A            mov b, [d]
0246   0556 54            add a, b
0247   0557 26 01 00      mov b, $1
0248   055A 54            add a, b
0249   055B 27            mov b, a
0250   055C E4            pop a
0251   055D             ; END TERMS
0252   055D E7            pop d
0253   055E FD 43         mov [d], b
0254   0560             ;; psrc = arg; 
0255   0560 FA FB FF      lea d, [bp + -5] ; $psrc
0256   0563 DA            push d
0257   0564 FA B9 FF      lea d, [bp + -71] ; $arg
0258   0567 2D            mov b, d
0259   0568 E7            pop d
0260   0569 FD 43         mov [d], b
0261   056B             ;; pdest = argv[argc]; 
0262   056B FA F9 FF      lea d, [bp + -7] ; $pdest
0263   056E DA            push d
0264   056F 2C 05 00      mov b, [bp + 5] ; $argv
0265   0572 74            mov d, b
0266   0573 D7            push a
0267   0574 DA            push d
0268   0575 FA 07 00      lea d, [bp + 7] ; $argc
0269   0578 2A            mov b, [d]
0270   0579 E7            pop d
0271   057A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0272   057E E4            pop a
0273   057F 2A            mov b, [d]
0274   0580 E7            pop d
0275   0581 FD 43         mov [d], b
0276   0583             ;; while(*psrc) *pdest++ = *psrc++; 
0277   0583             _while6_cond:
0278   0583 FA FB FF      lea d, [bp + -5] ; $psrc
0279   0586 2A            mov b, [d]
0280   0587 74            mov d, b
0281   0588 32            mov bl, [d]
0282   0589 A7 00         mov bh, 0
0283   058B C0 00 00      cmp b, 0
0284   058E C6 BA 05      je _while6_exit
0285   0591             _while6_block:
0286   0591             ;; *pdest++ = *psrc++; 
0287   0591 FA F9 FF      lea d, [bp + -7] ; $pdest
0288   0594 2A            mov b, [d]
0289   0595 FD 79         mov g, b
0290   0597 FD 77         inc b
0291   0599 FA F9 FF      lea d, [bp + -7] ; $pdest
0292   059C FD 43         mov [d], b
0293   059E FD 27         mov b, g
0294   05A0 D8            push b
0295   05A1 FA FB FF      lea d, [bp + -5] ; $psrc
0296   05A4 2A            mov b, [d]
0297   05A5 FD 79         mov g, b
0298   05A7 FD 77         inc b
0299   05A9 FA FB FF      lea d, [bp + -5] ; $psrc
0300   05AC FD 43         mov [d], b
0301   05AE FD 27         mov b, g
0302   05B0 74            mov d, b
0303   05B1 32            mov bl, [d]
0304   05B2 A7 00         mov bh, 0
0305   05B4 E7            pop d
0306   05B5 FD 3E         mov [d], bl
0307   05B7 0A 83 05      jmp _while6_cond
0308   05BA             _while6_exit:
0309   05BA             ;; *pdest = '\0'; 
0310   05BA FA F9 FF      lea d, [bp + -7] ; $pdest
0311   05BD 2A            mov b, [d]
0312   05BE D8            push b
0313   05BF 26 00 00      mov b, $0
0314   05C2 E7            pop d
0315   05C3 FD 3E         mov [d], bl
0316   05C5             ;; argc++; 
0317   05C5 FA 07 00      lea d, [bp + 7] ; $argc
0318   05C8 2A            mov b, [d]
0319   05C9 FD 79         mov g, b
0320   05CB FD 77         inc b
0321   05CD FA 07 00      lea d, [bp + 7] ; $argc
0322   05D0 FD 43         mov [d], b
0323   05D2 FD 27         mov b, g
0324   05D4             _for1_update:
0325   05D4 0A 1F 04      jmp _for1_cond
0326   05D7             _for1_exit:
0327   05D7             ;; initialise(); 
0328   05D7 07 A0 15      call initialise
0329   05DA             ;; game.saved = 1; 
0330   05DA 3B AA 15      mov d, _game_data ; $game
0331   05DD 58 00 00      add d, 0
0332   05E0 FD 14         clb
0333   05E2 DA            push d
0334   05E3 26 01 00      mov b, $1
0335   05E6 E7            pop d
0336   05E7 FD 3E         mov [d], bl
0337   05E9             ;; opts = "d:l:s:t:v:o:"; 
0338   05E9 FA AD FF      lea d, [bp + -83] ; $opts
0339   05EC DA            push d
0340   05ED 26 AF 15      mov b, __s0 ; "d:l:s:t:v:o:"
0341   05F0 E7            pop d
0342   05F1 FD 43         mov [d], b
0343   05F3             ;; usage = "Usage: %s [-d numdie] [-s numsaves] [-v version] -o savefilename \n"; 
0344   05F3 FA AB FF      lea d, [bp + -85] ; $usage
0345   05F6 DA            push d
0346   05F7 26 BC 15      mov b, __s1 ; "Usage: %s [-d numdie] [-s numsaves] [-v version] -o savefilename \n"
0347   05FA E7            pop d
0348   05FB FD 43         mov [d], b
0349   05FD             ;; while ((ch = getopt(argc, argv, opts)) !=  1  ) { 
0350   05FD             _while7_cond:
0351   05FD FA B5 FF      lea d, [bp + -75] ; $ch
0352   0600 DA            push d
0353   0601 FA 07 00      lea d, [bp + 7] ; $argc
0354   0604 2A            mov b, [d]
0355   0605 FD AB         swp b
0356   0607 D8            push b
0357   0608 2C 05 00      mov b, [bp + 5] ; $argv
0358   060B 74            mov d, b
0359   060C 2D            mov b, d
0360   060D FD AB         swp b
0361   060F D8            push b
0362   0610 FA AD FF      lea d, [bp + -83] ; $opts
0363   0613 2A            mov b, [d]
0364   0614 FD AB         swp b
0365   0616 D8            push b
0366   0617 07 A5 15      call getopt
0367   061A 51 06 00      add sp, 6
0368   061D E7            pop d
0369   061E FD 43         mov [d], b
0370   0620             ; START RELATIONAL
0371   0620 D7            push a
0372   0621 11            mov a, b
0373   0622 26 01 00      mov b, $1
0374   0625 B0            cmp a, b
0375   0626 FD 72         sneq ; !=
0376   0628 E4            pop a
0377   0629             ; END RELATIONAL
0378   0629 C0 00 00      cmp b, 0
0379   062C C6 A3 07      je _while7_exit
0380   062F             _while7_block:
0381   062F             ;; switch (ch) { 
0382   062F             _switch8_expr:
0383   062F FA B5 FF      lea d, [bp + -75] ; $ch
0384   0632 2A            mov b, [d]
0385   0633             _switch8_comparisons:
0386   0633 C1 64         cmp bl, $64
0387   0635 C6 57 06      je _switch8_case0
0388   0638 C1 6C         cmp bl, $6c
0389   063A C6 8D 06      je _switch8_case1
0390   063D C1 73         cmp bl, $73
0391   063F C6 C3 06      je _switch8_case2
0392   0642 C1 74         cmp bl, $74
0393   0644 C6 FA 06      je _switch8_case3
0394   0647 C1 76         cmp bl, $76
0395   0649 C6 30 07      je _switch8_case4
0396   064C C1 6F         cmp bl, $6f
0397   064E C6 66 07      je _switch8_case5
0398   0651 0A 74 07      jmp _switch8_default
0399   0654 0A A0 07      jmp _switch8_exit
0400   0657             _switch8_case0:
0401   0657             ;; game.numdie = atoi(optarg); 
0402   0657 3B AA 15      mov d, _game_data ; $game
0403   065A 58 01 00      add d, 1
0404   065D FD 14         clb
0405   065F DA            push d
0406   0660 FA AF FF      lea d, [bp + -81] ; $optarg
0407   0663 2A            mov b, [d]
0408   0664 FD AB         swp b
0409   0666 D8            push b
0410   0667 07 BA 0D      call atoi
0411   066A 51 02 00      add sp, 2
0412   066D E7            pop d
0413   066E FD 3E         mov [d], bl
0414   0670             ;; printf("cheat: game.numdie = %d\n", game.numdie); 
0415   0670 26 FF 15      mov b, __s2 ; "cheat: game.numdie = %d\n"
0416   0673 FD AB         swp b
0417   0675 D8            push b
0418   0676 3B AA 15      mov d, _game_data ; $game
0419   0679 58 01 00      add d, 1
0420   067C FD 14         clb
0421   067E 32            mov bl, [d]
0422   067F A7 00         mov bh, 0
0423   0681 FD AB         swp b
0424   0683 D8            push b
0425   0684 07 DB 0A      call printf
0426   0687 51 04 00      add sp, 4
0427   068A             ;; break; 
0428   068A 0A A0 07      jmp _switch8_exit ; case break
0429   068D             _switch8_case1:
0430   068D             ;; game.limit = atoi(optarg); 
0431   068D 3B AA 15      mov d, _game_data ; $game
0432   0690 58 02 00      add d, 2
0433   0693 FD 14         clb
0434   0695 DA            push d
0435   0696 FA AF FF      lea d, [bp + -81] ; $optarg
0436   0699 2A            mov b, [d]
0437   069A FD AB         swp b
0438   069C D8            push b
0439   069D 07 BA 0D      call atoi
0440   06A0 51 02 00      add sp, 2
0441   06A3 E7            pop d
0442   06A4 FD 3E         mov [d], bl
0443   06A6             ;; printf("cheat: game.limit = %d\n", game.limit); 
0444   06A6 26 18 16      mov b, __s3 ; "cheat: game.limit = %d\n"
0445   06A9 FD AB         swp b
0446   06AB D8            push b
0447   06AC 3B AA 15      mov d, _game_data ; $game
0448   06AF 58 02 00      add d, 2
0449   06B2 FD 14         clb
0450   06B4 32            mov bl, [d]
0451   06B5 A7 00         mov bh, 0
0452   06B7 FD AB         swp b
0453   06B9 D8            push b
0454   06BA 07 DB 0A      call printf
0455   06BD 51 04 00      add sp, 4
0456   06C0             ;; break; 
0457   06C0 0A A0 07      jmp _switch8_exit ; case break
0458   06C3             _switch8_case2:
0459   06C3             ;; game.saved = (int)atoi(optarg); 
0460   06C3 3B AA 15      mov d, _game_data ; $game
0461   06C6 58 00 00      add d, 0
0462   06C9 FD 14         clb
0463   06CB DA            push d
0464   06CC AB            snex b
0465   06CD FA AF FF      lea d, [bp + -81] ; $optarg
0466   06D0 2A            mov b, [d]
0467   06D1 FD AB         swp b
0468   06D3 D8            push b
0469   06D4 07 BA 0D      call atoi
0470   06D7 51 02 00      add sp, 2
0471   06DA E7            pop d
0472   06DB FD 3E         mov [d], bl
0473   06DD             ;; printf("cheat: game.saved = %d\n", game.saved); 
0474   06DD 26 30 16      mov b, __s4 ; "cheat: game.saved = %d\n"
0475   06E0 FD AB         swp b
0476   06E2 D8            push b
0477   06E3 3B AA 15      mov d, _game_data ; $game
0478   06E6 58 00 00      add d, 0
0479   06E9 FD 14         clb
0480   06EB 32            mov bl, [d]
0481   06EC A7 00         mov bh, 0
0482   06EE FD AB         swp b
0483   06F0 D8            push b
0484   06F1 07 DB 0A      call printf
0485   06F4 51 04 00      add sp, 4
0486   06F7             ;; break; 
0487   06F7 0A A0 07      jmp _switch8_exit ; case break
0488   06FA             _switch8_case3:
0489   06FA             ;; game.turns = atoi(optarg); 
0490   06FA 3B AA 15      mov d, _game_data ; $game
0491   06FD 58 03 00      add d, 3
0492   0700 FD 14         clb
0493   0702 DA            push d
0494   0703 FA AF FF      lea d, [bp + -81] ; $optarg
0495   0706 2A            mov b, [d]
0496   0707 FD AB         swp b
0497   0709 D8            push b
0498   070A 07 BA 0D      call atoi
0499   070D 51 02 00      add sp, 2
0500   0710 E7            pop d
0501   0711 FD 3E         mov [d], bl
0502   0713             ;; printf("cheat: game.turns = %d\n", game.turns); 
0503   0713 26 48 16      mov b, __s5 ; "cheat: game.turns = %d\n"
0504   0716 FD AB         swp b
0505   0718 D8            push b
0506   0719 3B AA 15      mov d, _game_data ; $game
0507   071C 58 03 00      add d, 3
0508   071F FD 14         clb
0509   0721 32            mov bl, [d]
0510   0722 A7 00         mov bh, 0
0511   0724 FD AB         swp b
0512   0726 D8            push b
0513   0727 07 DB 0A      call printf
0514   072A 51 04 00      add sp, 4
0515   072D             ;; break; 
0516   072D 0A A0 07      jmp _switch8_exit ; case break
0517   0730             _switch8_case4:
0518   0730             ;; save.version = atoi(optarg); 
0519   0730 3B AE 15      mov d, _save_data ; $save
0520   0733 58 00 00      add d, 0
0521   0736 FD 14         clb
0522   0738 DA            push d
0523   0739 FA AF FF      lea d, [bp + -81] ; $optarg
0524   073C 2A            mov b, [d]
0525   073D FD AB         swp b
0526   073F D8            push b
0527   0740 07 BA 0D      call atoi
0528   0743 51 02 00      add sp, 2
0529   0746 E7            pop d
0530   0747 FD 3E         mov [d], bl
0531   0749             ;; printf("cheat: version = %d\n", save.version); 
0532   0749 26 60 16      mov b, __s6 ; "cheat: version = %d\n"
0533   074C FD AB         swp b
0534   074E D8            push b
0535   074F 3B AE 15      mov d, _save_data ; $save
0536   0752 58 00 00      add d, 0
0537   0755 FD 14         clb
0538   0757 32            mov bl, [d]
0539   0758 A7 00         mov bh, 0
0540   075A FD AB         swp b
0541   075C D8            push b
0542   075D 07 DB 0A      call printf
0543   0760 51 04 00      add sp, 4
0544   0763             ;; break; 
0545   0763 0A A0 07      jmp _switch8_exit ; case break
0546   0766             _switch8_case5:
0547   0766             ;; savefilename = optarg; 
0548   0766 FA B3 FF      lea d, [bp + -77] ; $savefilename
0549   0769 DA            push d
0550   076A FA AF FF      lea d, [bp + -81] ; $optarg
0551   076D 2A            mov b, [d]
0552   076E E7            pop d
0553   076F FD 43         mov [d], b
0554   0771             ;; break; 
0555   0771 0A A0 07      jmp _switch8_exit ; case break
0556   0774             _switch8_default:
0557   0774             ;; fprintf(1, usage, argv[0]); 
0558   0774 26 01 00      mov b, $1
0559   0777 FD AB         swp b
0560   0779 D8            push b
0561   077A FA AB FF      lea d, [bp + -85] ; $usage
0562   077D 2A            mov b, [d]
0563   077E FD AB         swp b
0564   0780 D8            push b
0565   0781 2C 05 00      mov b, [bp + 5] ; $argv
0566   0784 74            mov d, b
0567   0785 D7            push a
0568   0786 DA            push d
0569   0787 26 00 00      mov b, $0
0570   078A E7            pop d
0571   078B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0572   078F E4            pop a
0573   0790 2A            mov b, [d]
0574   0791 FD AB         swp b
0575   0793 D8            push b
0576   0794 07 9B 15      call fprintf
0577   0797 51 06 00      add sp, 6
0578   079A             ;; exit(); 
0579   079A 07 8F 11      call exit
0580   079D             ;; break; 
0581   079D 0A A0 07      jmp _switch8_exit ; case break
0582   07A0             _switch8_exit:
0583   07A0 0A FD 05      jmp _while7_cond
0584   07A3             _while7_exit:
0585   07A3             ;; if (savefilename ==  0   ) { 
0586   07A3             _if9_cond:
0587   07A3 FA B3 FF      lea d, [bp + -77] ; $savefilename
0588   07A6 2A            mov b, [d]
0589   07A7             ; START RELATIONAL
0590   07A7 D7            push a
0591   07A8 11            mov a, b
0592   07A9 26 00 00      mov b, $0
0593   07AC B0            cmp a, b
0594   07AD FD 71         seq ; ==
0595   07AF E4            pop a
0596   07B0             ; END RELATIONAL
0597   07B0 C0 00 00      cmp b, 0
0598   07B3 C6 FA 07      je _if9_exit
0599   07B6             _if9_true:
0600   07B6             ;; fprintf( 1     , 
0601   07B6 26 01 00      mov b, $1
0602   07B9 FD AB         swp b
0603   07BB D8            push b
0604   07BC FA AB FF      lea d, [bp + -85] ; $usage
0605   07BF 2A            mov b, [d]
0606   07C0 FD AB         swp b
0607   07C2 D8            push b
0608   07C3 2C 05 00      mov b, [bp + 5] ; $argv
0609   07C6 74            mov d, b
0610   07C7 D7            push a
0611   07C8 DA            push d
0612   07C9 26 00 00      mov b, $0
0613   07CC E7            pop d
0614   07CD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0615   07D1 E4            pop a
0616   07D2 2A            mov b, [d]
0617   07D3 FD AB         swp b
0618   07D5 D8            push b
0619   07D6 07 9B 15      call fprintf
0620   07D9 51 06 00      add sp, 6
0621   07DC             ;; fprintf( 1     , 
0622   07DC 26 01 00      mov b, $1
0623   07DF FD AB         swp b
0624   07E1 D8            push b
0625   07E2 26 75 16      mov b, __s7 ; "ERROR: filename required\n"
0626   07E5 FD AB         swp b
0627   07E7 D8            push b
0628   07E8 26 01 00      mov b, $1
0629   07EB FD AB         swp b
0630   07ED D8            push b
0631   07EE 07 9B 15      call fprintf
0632   07F1 51 06 00      add sp, 6
0633   07F4             ;; exit(); 
0634   07F4 07 8F 11      call exit
0635   07F7 0A FA 07      jmp _if9_exit
0636   07FA             _if9_exit:
0637   07FA             ;; fp = fopen(savefilename, 1); 
0638   07FA FA B1 FF      lea d, [bp + -79] ; $fp
0639   07FD DA            push d
0640   07FE FA B3 FF      lea d, [bp + -77] ; $savefilename
0641   0801 2A            mov b, [d]
0642   0802 FD AB         swp b
0643   0804 D8            push b
0644   0805 26 01 00      mov b, $1
0645   0808 FD AB         swp b
0646   080A D8            push b
0647   080B 07 46 11      call fopen
0648   080E 51 04 00      add sp, 4
0649   0811 E7            pop d
0650   0812 FD 43         mov [d], b
0651   0814             ;; if (fp ==  0   ) { 
0652   0814             _if10_cond:
0653   0814 FA B1 FF      lea d, [bp + -79] ; $fp
0654   0817 2A            mov b, [d]
0655   0818             ; START RELATIONAL
0656   0818 D7            push a
0657   0819 11            mov a, b
0658   081A 26 00 00      mov b, $0
0659   081D B0            cmp a, b
0660   081E FD 71         seq ; ==
0661   0820 E4            pop a
0662   0821             ; END RELATIONAL
0663   0821 C0 00 00      cmp b, 0
0664   0824 C6 46 08      je _if10_exit
0665   0827             _if10_true:
0666   0827             ;; fprintf( 1     , 
0667   0827 26 01 00      mov b, $1
0668   082A FD AB         swp b
0669   082C D8            push b
0670   082D 26 8F 16      mov b, __s8 ; "Can't open file %s. Exiting.\n"
0671   0830 FD AB         swp b
0672   0832 D8            push b
0673   0833 FA B3 FF      lea d, [bp + -77] ; $savefilename
0674   0836 2A            mov b, [d]
0675   0837 FD AB         swp b
0676   0839 D8            push b
0677   083A 07 9B 15      call fprintf
0678   083D 51 06 00      add sp, 6
0679   0840             ;; exit(); 
0680   0840 07 8F 11      call exit
0681   0843 0A 46 08      jmp _if10_exit
0682   0846             _if10_exit:
0683   0846             ;; savefile(fp); 
0684   0846 FA B1 FF      lea d, [bp + -79] ; $fp
0685   0849 2A            mov b, [d]
0686   084A 52 0C 00      sub sp, 12
0687   084D FD 28         mov si, b
0688   084F FD FA 01 00   lea d, [sp + 1]
0689   0853 FD 50         mov di, d
0690   0855 38 0C 00      mov c, 12
0691   0858 FD F5         rep movsb
0692   085A 07 96 15      call savefile
0693   085D 51 0C 00      add sp, 12
0694   0860             ;; fclose(fp); 
0695   0860 FA B1 FF      lea d, [bp + -79] ; $fp
0696   0863 2A            mov b, [d]
0697   0864 FD AB         swp b
0698   0866 D8            push b
0699   0867 07 4B 11      call fclose
0700   086A 51 02 00      add sp, 2
0701   086D             ;; printf("cheat: %s created.\n", savefilename); 
0702   086D 26 AC 16      mov b, __s9 ; "cheat: %s created.\n"
0703   0870 FD AB         swp b
0704   0872 D8            push b
0705   0873 FA B3 FF      lea d, [bp + -77] ; $savefilename
0706   0876 2A            mov b, [d]
0707   0877 FD AB         swp b
0708   0879 D8            push b
0709   087A 07 DB 0A      call printf
0710   087D 51 04 00      add sp, 4
0711   0880             ;; return  1           ; 
0712   0880 26 01 00      mov b, $1
0713   0883 F9            leave
0714   0884 05 0B         syscall sys_terminate_proc
0715   0886             
0716   0886             strcpy:
0717   0886 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0718   0889             ; $psrc 
0719   0889             ; $pdest 
0720   0889 52 04 00      sub sp, 4
0721   088C             ;; psrc = src; 
0722   088C FA FF FF      lea d, [bp + -1] ; $psrc
0723   088F DA            push d
0724   0890 FA 05 00      lea d, [bp + 5] ; $src
0725   0893 2A            mov b, [d]
0726   0894 E7            pop d
0727   0895 FD 43         mov [d], b
0728   0897             ;; pdest = dest; 
0729   0897 FA FD FF      lea d, [bp + -3] ; $pdest
0730   089A DA            push d
0731   089B FA 07 00      lea d, [bp + 7] ; $dest
0732   089E 2A            mov b, [d]
0733   089F E7            pop d
0734   08A0 FD 43         mov [d], b
0735   08A2             ;; while(*psrc) *pdest++ = *psrc++; 
0736   08A2             _while11_cond:
0737   08A2 FA FF FF      lea d, [bp + -1] ; $psrc
0738   08A5 2A            mov b, [d]
0739   08A6 74            mov d, b
0740   08A7 32            mov bl, [d]
0741   08A8 A7 00         mov bh, 0
0742   08AA C0 00 00      cmp b, 0
0743   08AD C6 D9 08      je _while11_exit
0744   08B0             _while11_block:
0745   08B0             ;; *pdest++ = *psrc++; 
0746   08B0 FA FD FF      lea d, [bp + -3] ; $pdest
0747   08B3 2A            mov b, [d]
0748   08B4 FD 79         mov g, b
0749   08B6 FD 77         inc b
0750   08B8 FA FD FF      lea d, [bp + -3] ; $pdest
0751   08BB FD 43         mov [d], b
0752   08BD FD 27         mov b, g
0753   08BF D8            push b
0754   08C0 FA FF FF      lea d, [bp + -1] ; $psrc
0755   08C3 2A            mov b, [d]
0756   08C4 FD 79         mov g, b
0757   08C6 FD 77         inc b
0758   08C8 FA FF FF      lea d, [bp + -1] ; $psrc
0759   08CB FD 43         mov [d], b
0760   08CD FD 27         mov b, g
0761   08CF 74            mov d, b
0762   08D0 32            mov bl, [d]
0763   08D1 A7 00         mov bh, 0
0764   08D3 E7            pop d
0765   08D4 FD 3E         mov [d], bl
0766   08D6 0A A2 08      jmp _while11_cond
0767   08D9             _while11_exit:
0768   08D9             ;; *pdest = '\0'; 
0769   08D9 FA FD FF      lea d, [bp + -3] ; $pdest
0770   08DC 2A            mov b, [d]
0771   08DD D8            push b
0772   08DE 26 00 00      mov b, $0
0773   08E1 E7            pop d
0774   08E2 FD 3E         mov [d], bl
0775   08E4 F9            leave
0776   08E5 09            ret
0777   08E6             
0778   08E6             strcmp:
0779   08E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0780   08E9             ;; while (*s1 && (*s1 == *s2)) { 
0781   08E9             _while12_cond:
0782   08E9 FA 07 00      lea d, [bp + 7] ; $s1
0783   08EC 2A            mov b, [d]
0784   08ED 74            mov d, b
0785   08EE 32            mov bl, [d]
0786   08EF A7 00         mov bh, 0
0787   08F1 D7            push a
0788   08F2 11            mov a, b
0789   08F3 FA 07 00      lea d, [bp + 7] ; $s1
0790   08F6 2A            mov b, [d]
0791   08F7 74            mov d, b
0792   08F8 32            mov bl, [d]
0793   08F9 A7 00         mov bh, 0
0794   08FB             ; START RELATIONAL
0795   08FB D7            push a
0796   08FC 11            mov a, b
0797   08FD FA 05 00      lea d, [bp + 5] ; $s2
0798   0900 2A            mov b, [d]
0799   0901 74            mov d, b
0800   0902 32            mov bl, [d]
0801   0903 A7 00         mov bh, 0
0802   0905 B0            cmp a, b
0803   0906 FD 71         seq ; ==
0804   0908 E4            pop a
0805   0909             ; END RELATIONAL
0806   0909 FD A7         sand a, b ; &&
0807   090B E4            pop a
0808   090C C0 00 00      cmp b, 0
0809   090F C6 33 09      je _while12_exit
0810   0912             _while12_block:
0811   0912             ;; s1++; 
0812   0912 FA 07 00      lea d, [bp + 7] ; $s1
0813   0915 2A            mov b, [d]
0814   0916 FD 79         mov g, b
0815   0918 FD 77         inc b
0816   091A FA 07 00      lea d, [bp + 7] ; $s1
0817   091D FD 43         mov [d], b
0818   091F FD 27         mov b, g
0819   0921             ;; s2++; 
0820   0921 FA 05 00      lea d, [bp + 5] ; $s2
0821   0924 2A            mov b, [d]
0822   0925 FD 79         mov g, b
0823   0927 FD 77         inc b
0824   0929 FA 05 00      lea d, [bp + 5] ; $s2
0825   092C FD 43         mov [d], b
0826   092E FD 27         mov b, g
0827   0930 0A E9 08      jmp _while12_cond
0828   0933             _while12_exit:
0829   0933             ;; return *s1 - *s2; 
0830   0933 FA 07 00      lea d, [bp + 7] ; $s1
0831   0936 2A            mov b, [d]
0832   0937 74            mov d, b
0833   0938 32            mov bl, [d]
0834   0939 A7 00         mov bh, 0
0835   093B             ; START TERMS
0836   093B D7            push a
0837   093C 11            mov a, b
0838   093D FA 05 00      lea d, [bp + 5] ; $s2
0839   0940 2A            mov b, [d]
0840   0941 74            mov d, b
0841   0942 32            mov bl, [d]
0842   0943 A7 00         mov bh, 0
0843   0945 60            sub a, b
0844   0946 27            mov b, a
0845   0947 E4            pop a
0846   0948             ; END TERMS
0847   0948 F9            leave
0848   0949 09            ret
0849   094A             
0850   094A             strcat:
0851   094A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0852   094D             ; $dest_len 
0853   094D             ; $i 
0854   094D 52 04 00      sub sp, 4
0855   0950             ;; dest_len = strlen(dest); 
0856   0950 FA FF FF      lea d, [bp + -1] ; $dest_len
0857   0953 DA            push d
0858   0954 FA 07 00      lea d, [bp + 7] ; $dest
0859   0957 2A            mov b, [d]
0860   0958 FD AB         swp b
0861   095A D8            push b
0862   095B 07 00 0A      call strlen
0863   095E 51 02 00      add sp, 2
0864   0961 E7            pop d
0865   0962 FD 43         mov [d], b
0866   0964             ;; for (i = 0; src[i] != 0; i=i+1) { 
0867   0964             _for13_init:
0868   0964 FA FD FF      lea d, [bp + -3] ; $i
0869   0967 DA            push d
0870   0968 26 00 00      mov b, $0
0871   096B E7            pop d
0872   096C FD 43         mov [d], b
0873   096E             _for13_cond:
0874   096E FA 05 00      lea d, [bp + 5] ; $src
0875   0971 FD 2A         mov d, [d]
0876   0973 D7            push a
0877   0974 DA            push d
0878   0975 FA FD FF      lea d, [bp + -3] ; $i
0879   0978 2A            mov b, [d]
0880   0979 E7            pop d
0881   097A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0882   097E E4            pop a
0883   097F 32            mov bl, [d]
0884   0980 A7 00         mov bh, 0
0885   0982             ; START RELATIONAL
0886   0982 D7            push a
0887   0983 11            mov a, b
0888   0984 26 00 00      mov b, $0
0889   0987 B0            cmp a, b
0890   0988 FD 72         sneq ; !=
0891   098A E4            pop a
0892   098B             ; END RELATIONAL
0893   098B C0 00 00      cmp b, 0
0894   098E C6 D9 09      je _for13_exit
0895   0991             _for13_block:
0896   0991             ;; dest[dest_len + i] = src[i]; 
0897   0991 FA 07 00      lea d, [bp + 7] ; $dest
0898   0994 FD 2A         mov d, [d]
0899   0996 D7            push a
0900   0997 DA            push d
0901   0998 FA FF FF      lea d, [bp + -1] ; $dest_len
0902   099B 2A            mov b, [d]
0903   099C             ; START TERMS
0904   099C D7            push a
0905   099D 11            mov a, b
0906   099E FA FD FF      lea d, [bp + -3] ; $i
0907   09A1 2A            mov b, [d]
0908   09A2 54            add a, b
0909   09A3 27            mov b, a
0910   09A4 E4            pop a
0911   09A5             ; END TERMS
0912   09A5 E7            pop d
0913   09A6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0914   09AA E4            pop a
0915   09AB DA            push d
0916   09AC FA 05 00      lea d, [bp + 5] ; $src
0917   09AF FD 2A         mov d, [d]
0918   09B1 D7            push a
0919   09B2 DA            push d
0920   09B3 FA FD FF      lea d, [bp + -3] ; $i
0921   09B6 2A            mov b, [d]
0922   09B7 E7            pop d
0923   09B8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0924   09BC E4            pop a
0925   09BD 32            mov bl, [d]
0926   09BE A7 00         mov bh, 0
0927   09C0 E7            pop d
0928   09C1 FD 3E         mov [d], bl
0929   09C3             _for13_update:
0930   09C3 FA FD FF      lea d, [bp + -3] ; $i
0931   09C6 DA            push d
0932   09C7 FA FD FF      lea d, [bp + -3] ; $i
0933   09CA 2A            mov b, [d]
0934   09CB             ; START TERMS
0935   09CB D7            push a
0936   09CC 11            mov a, b
0937   09CD 26 01 00      mov b, $1
0938   09D0 54            add a, b
0939   09D1 27            mov b, a
0940   09D2 E4            pop a
0941   09D3             ; END TERMS
0942   09D3 E7            pop d
0943   09D4 FD 43         mov [d], b
0944   09D6 0A 6E 09      jmp _for13_cond
0945   09D9             _for13_exit:
0946   09D9             ;; dest[dest_len + i] = 0; 
0947   09D9 FA 07 00      lea d, [bp + 7] ; $dest
0948   09DC FD 2A         mov d, [d]
0949   09DE D7            push a
0950   09DF DA            push d
0951   09E0 FA FF FF      lea d, [bp + -1] ; $dest_len
0952   09E3 2A            mov b, [d]
0953   09E4             ; START TERMS
0954   09E4 D7            push a
0955   09E5 11            mov a, b
0956   09E6 FA FD FF      lea d, [bp + -3] ; $i
0957   09E9 2A            mov b, [d]
0958   09EA 54            add a, b
0959   09EB 27            mov b, a
0960   09EC E4            pop a
0961   09ED             ; END TERMS
0962   09ED E7            pop d
0963   09EE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0964   09F2 E4            pop a
0965   09F3 DA            push d
0966   09F4 26 00 00      mov b, $0
0967   09F7 E7            pop d
0968   09F8 FD 3E         mov [d], bl
0969   09FA             ;; return dest; 
0970   09FA FA 07 00      lea d, [bp + 7] ; $dest
0971   09FD 2A            mov b, [d]
0972   09FE F9            leave
0973   09FF 09            ret
0974   0A00             
0975   0A00             strlen:
0976   0A00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0977   0A03             ; $length 
0978   0A03 52 02 00      sub sp, 2
0979   0A06             ;; length = 0; 
0980   0A06 FA FF FF      lea d, [bp + -1] ; $length
0981   0A09 DA            push d
0982   0A0A 26 00 00      mov b, $0
0983   0A0D E7            pop d
0984   0A0E FD 43         mov [d], b
0985   0A10             ;; while (str[length] != 0) { 
0986   0A10             _while14_cond:
0987   0A10 FA 05 00      lea d, [bp + 5] ; $str
0988   0A13 FD 2A         mov d, [d]
0989   0A15 D7            push a
0990   0A16 DA            push d
0991   0A17 FA FF FF      lea d, [bp + -1] ; $length
0992   0A1A 2A            mov b, [d]
0993   0A1B E7            pop d
0994   0A1C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0995   0A20 E4            pop a
0996   0A21 32            mov bl, [d]
0997   0A22 A7 00         mov bh, 0
0998   0A24             ; START RELATIONAL
0999   0A24 D7            push a
1000   0A25 11            mov a, b
1001   0A26 26 00 00      mov b, $0
1002   0A29 B0            cmp a, b
1003   0A2A FD 72         sneq ; !=
1004   0A2C E4            pop a
1005   0A2D             ; END RELATIONAL
1006   0A2D C0 00 00      cmp b, 0
1007   0A30 C6 45 0A      je _while14_exit
1008   0A33             _while14_block:
1009   0A33             ;; length++; 
1010   0A33 FA FF FF      lea d, [bp + -1] ; $length
1011   0A36 2A            mov b, [d]
1012   0A37 FD 79         mov g, b
1013   0A39 FD 77         inc b
1014   0A3B FA FF FF      lea d, [bp + -1] ; $length
1015   0A3E FD 43         mov [d], b
1016   0A40 FD 27         mov b, g
1017   0A42 0A 10 0A      jmp _while14_cond
1018   0A45             _while14_exit:
1019   0A45             ;; return length; 
1020   0A45 FA FF FF      lea d, [bp + -1] ; $length
1021   0A48 2A            mov b, [d]
1022   0A49 F9            leave
1023   0A4A 09            ret
1024   0A4B             
1025   0A4B             va_arg:
1026   0A4B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1027   0A4E             ; $val 
1028   0A4E 52 02 00      sub sp, 2
1029   0A51             ;; if(size == 1){ 
1030   0A51             _if15_cond:
1031   0A51 FA 05 00      lea d, [bp + 5] ; $size
1032   0A54 2A            mov b, [d]
1033   0A55             ; START RELATIONAL
1034   0A55 D7            push a
1035   0A56 11            mov a, b
1036   0A57 26 01 00      mov b, $1
1037   0A5A B0            cmp a, b
1038   0A5B FD 71         seq ; ==
1039   0A5D E4            pop a
1040   0A5E             ; END RELATIONAL
1041   0A5E C0 00 00      cmp b, 0
1042   0A61 C6 7D 0A      je _if15_else
1043   0A64             _if15_true:
1044   0A64             ;; val = *(char*)arg->p; 
1045   0A64 FA FF FF      lea d, [bp + -1] ; $val
1046   0A67 DA            push d
1047   0A68 FA 07 00      lea d, [bp + 7] ; $arg
1048   0A6B FD 2A         mov d, [d]
1049   0A6D 58 00 00      add d, 0
1050   0A70 FD 14         clb
1051   0A72 2A            mov b, [d]
1052   0A73 74            mov d, b
1053   0A74 32            mov bl, [d]
1054   0A75 A7 00         mov bh, 0
1055   0A77 E7            pop d
1056   0A78 FD 43         mov [d], b
1057   0A7A 0A B3 0A      jmp _if15_exit
1058   0A7D             _if15_else:
1059   0A7D             ;; if(size == 2){ 
1060   0A7D             _if16_cond:
1061   0A7D FA 05 00      lea d, [bp + 5] ; $size
1062   0A80 2A            mov b, [d]
1063   0A81             ; START RELATIONAL
1064   0A81 D7            push a
1065   0A82 11            mov a, b
1066   0A83 26 02 00      mov b, $2
1067   0A86 B0            cmp a, b
1068   0A87 FD 71         seq ; ==
1069   0A89 E4            pop a
1070   0A8A             ; END RELATIONAL
1071   0A8A C0 00 00      cmp b, 0
1072   0A8D C6 A7 0A      je _if16_else
1073   0A90             _if16_true:
1074   0A90             ;; val = *(int*)arg->p; 
1075   0A90 FA FF FF      lea d, [bp + -1] ; $val
1076   0A93 DA            push d
1077   0A94 FA 07 00      lea d, [bp + 7] ; $arg
1078   0A97 FD 2A         mov d, [d]
1079   0A99 58 00 00      add d, 0
1080   0A9C FD 14         clb
1081   0A9E 2A            mov b, [d]
1082   0A9F 74            mov d, b
1083   0AA0 2A            mov b, [d]
1084   0AA1 E7            pop d
1085   0AA2 FD 43         mov [d], b
1086   0AA4 0A B3 0A      jmp _if16_exit
1087   0AA7             _if16_else:
1088   0AA7             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
1089   0AA7 26 C0 16      mov b, __s10 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
1090   0AAA FD AB         swp b
1091   0AAC D8            push b
1092   0AAD 07 15 11      call print
1093   0AB0 51 02 00      add sp, 2
1094   0AB3             _if16_exit:
1095   0AB3             _if15_exit:
1096   0AB3             ;; arg->p = arg->p + size; 
1097   0AB3 FA 07 00      lea d, [bp + 7] ; $arg
1098   0AB6 FD 2A         mov d, [d]
1099   0AB8 58 00 00      add d, 0
1100   0ABB FD 14         clb
1101   0ABD DA            push d
1102   0ABE FA 07 00      lea d, [bp + 7] ; $arg
1103   0AC1 FD 2A         mov d, [d]
1104   0AC3 58 00 00      add d, 0
1105   0AC6 FD 14         clb
1106   0AC8 2A            mov b, [d]
1107   0AC9             ; START TERMS
1108   0AC9 D7            push a
1109   0ACA 11            mov a, b
1110   0ACB FA 05 00      lea d, [bp + 5] ; $size
1111   0ACE 2A            mov b, [d]
1112   0ACF 54            add a, b
1113   0AD0 27            mov b, a
1114   0AD1 E4            pop a
1115   0AD2             ; END TERMS
1116   0AD2 E7            pop d
1117   0AD3 FD 43         mov [d], b
1118   0AD5             ;; return val; 
1119   0AD5 FA FF FF      lea d, [bp + -1] ; $val
1120   0AD8 2A            mov b, [d]
1121   0AD9 F9            leave
1122   0ADA 09            ret
1123   0ADB             
1124   0ADB             printf:
1125   0ADB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1126   0ADE             ; $p 
1127   0ADE             ; $fp 
1128   0ADE             ; $i 
1129   0ADE 52 06 00      sub sp, 6
1130   0AE1             ;; fp = format; 
1131   0AE1 FA FD FF      lea d, [bp + -3] ; $fp
1132   0AE4 DA            push d
1133   0AE5 FA 05 00      lea d, [bp + 5] ; $format
1134   0AE8 2A            mov b, [d]
1135   0AE9 E7            pop d
1136   0AEA FD 43         mov [d], b
1137   0AEC             ;; p = &format; 
1138   0AEC FA FF FF      lea d, [bp + -1] ; $p
1139   0AEF DA            push d
1140   0AF0 FA 05 00      lea d, [bp + 5] ; $format
1141   0AF3 2D            mov b, d
1142   0AF4 E7            pop d
1143   0AF5 FD 43         mov [d], b
1144   0AF7             ;; for(;;){ 
1145   0AF7             _for17_init:
1146   0AF7             _for17_cond:
1147   0AF7             _for17_block:
1148   0AF7             ;; if(!*fp) break; 
1149   0AF7             _if18_cond:
1150   0AF7 FA FD FF      lea d, [bp + -3] ; $fp
1151   0AFA 2A            mov b, [d]
1152   0AFB 74            mov d, b
1153   0AFC 32            mov bl, [d]
1154   0AFD A7 00         mov bh, 0
1155   0AFF C0 00 00      cmp b, 0
1156   0B02 FD 71         seq ; !
1157   0B04 C0 00 00      cmp b, 0
1158   0B07 C6 10 0B      je _if18_exit
1159   0B0A             _if18_true:
1160   0B0A             ;; break; 
1161   0B0A 0A 5A 0C      jmp _for17_exit ; for break
1162   0B0D 0A 10 0B      jmp _if18_exit
1163   0B10             _if18_exit:
1164   0B10             ;; if(*fp == '%'){ 
1165   0B10             _if19_cond:
1166   0B10 FA FD FF      lea d, [bp + -3] ; $fp
1167   0B13 2A            mov b, [d]
1168   0B14 74            mov d, b
1169   0B15 32            mov bl, [d]
1170   0B16 A7 00         mov bh, 0
1171   0B18             ; START RELATIONAL
1172   0B18 D7            push a
1173   0B19 11            mov a, b
1174   0B1A 26 25 00      mov b, $25
1175   0B1D B0            cmp a, b
1176   0B1E FD 71         seq ; ==
1177   0B20 E4            pop a
1178   0B21             ; END RELATIONAL
1179   0B21 C0 00 00      cmp b, 0
1180   0B24 C6 39 0C      je _if19_else
1181   0B27             _if19_true:
1182   0B27             ;; fp++; 
1183   0B27 FA FD FF      lea d, [bp + -3] ; $fp
1184   0B2A 2A            mov b, [d]
1185   0B2B FD 79         mov g, b
1186   0B2D FD 77         inc b
1187   0B2F FA FD FF      lea d, [bp + -3] ; $fp
1188   0B32 FD 43         mov [d], b
1189   0B34 FD 27         mov b, g
1190   0B36             ;; switch(*fp){ 
1191   0B36             _switch20_expr:
1192   0B36 FA FD FF      lea d, [bp + -3] ; $fp
1193   0B39 2A            mov b, [d]
1194   0B3A 74            mov d, b
1195   0B3B 32            mov bl, [d]
1196   0B3C A7 00         mov bh, 0
1197   0B3E             _switch20_comparisons:
1198   0B3E C1 64         cmp bl, $64
1199   0B40 C6 62 0B      je _switch20_case0
1200   0B43 C1 69         cmp bl, $69
1201   0B45 C6 62 0B      je _switch20_case1
1202   0B48 C1 75         cmp bl, $75
1203   0B4A C6 87 0B      je _switch20_case2
1204   0B4D C1 78         cmp bl, $78
1205   0B4F C6 AC 0B      je _switch20_case3
1206   0B52 C1 63         cmp bl, $63
1207   0B54 C6 D1 0B      je _switch20_case4
1208   0B57 C1 73         cmp bl, $73
1209   0B59 C6 F6 0B      je _switch20_case5
1210   0B5C 0A 1B 0C      jmp _switch20_default
1211   0B5F 0A 27 0C      jmp _switch20_exit
1212   0B62             _switch20_case0:
1213   0B62             _switch20_case1:
1214   0B62             ;; p = p - 2; 
1215   0B62 FA FF FF      lea d, [bp + -1] ; $p
1216   0B65 DA            push d
1217   0B66 FA FF FF      lea d, [bp + -1] ; $p
1218   0B69 2A            mov b, [d]
1219   0B6A             ; START TERMS
1220   0B6A D7            push a
1221   0B6B 11            mov a, b
1222   0B6C 26 02 00      mov b, $2
1223   0B6F 60            sub a, b
1224   0B70 27            mov b, a
1225   0B71 E4            pop a
1226   0B72             ; END TERMS
1227   0B72 E7            pop d
1228   0B73 FD 43         mov [d], b
1229   0B75             ;; prints(*(int*)p); 
1230   0B75 FA FF FF      lea d, [bp + -1] ; $p
1231   0B78 2A            mov b, [d]
1232   0B79 74            mov d, b
1233   0B7A 2A            mov b, [d]
1234   0B7B FD AB         swp b
1235   0B7D D8            push b
1236   0B7E 07 EC 0E      call prints
1237   0B81 51 02 00      add sp, 2
1238   0B84             ;; break; 
1239   0B84 0A 27 0C      jmp _switch20_exit ; case break
1240   0B87             _switch20_case2:
1241   0B87             ;; p = p - 2; 
1242   0B87 FA FF FF      lea d, [bp + -1] ; $p
1243   0B8A DA            push d
1244   0B8B FA FF FF      lea d, [bp + -1] ; $p
1245   0B8E 2A            mov b, [d]
1246   0B8F             ; START TERMS
1247   0B8F D7            push a
1248   0B90 11            mov a, b
1249   0B91 26 02 00      mov b, $2
1250   0B94 60            sub a, b
1251   0B95 27            mov b, a
1252   0B96 E4            pop a
1253   0B97             ; END TERMS
1254   0B97 E7            pop d
1255   0B98 FD 43         mov [d], b
1256   0B9A             ;; printu(*(unsigned int*)p); 
1257   0B9A FA FF FF      lea d, [bp + -1] ; $p
1258   0B9D 2A            mov b, [d]
1259   0B9E 74            mov d, b
1260   0B9F 2A            mov b, [d]
1261   0BA0 FD AB         swp b
1262   0BA2 D8            push b
1263   0BA3 07 E1 0F      call printu
1264   0BA6 51 02 00      add sp, 2
1265   0BA9             ;; break; 
1266   0BA9 0A 27 0C      jmp _switch20_exit ; case break
1267   0BAC             _switch20_case3:
1268   0BAC             ;; p = p - 2; 
1269   0BAC FA FF FF      lea d, [bp + -1] ; $p
1270   0BAF DA            push d
1271   0BB0 FA FF FF      lea d, [bp + -1] ; $p
1272   0BB3 2A            mov b, [d]
1273   0BB4             ; START TERMS
1274   0BB4 D7            push a
1275   0BB5 11            mov a, b
1276   0BB6 26 02 00      mov b, $2
1277   0BB9 60            sub a, b
1278   0BBA 27            mov b, a
1279   0BBB E4            pop a
1280   0BBC             ; END TERMS
1281   0BBC E7            pop d
1282   0BBD FD 43         mov [d], b
1283   0BBF             ;; printx16(*(unsigned int*)p); 
1284   0BBF FA FF FF      lea d, [bp + -1] ; $p
1285   0BC2 2A            mov b, [d]
1286   0BC3 74            mov d, b
1287   0BC4 2A            mov b, [d]
1288   0BC5 FD AB         swp b
1289   0BC7 D8            push b
1290   0BC8 07 5C 0C      call printx16
1291   0BCB 51 02 00      add sp, 2
1292   0BCE             ;; break; 
1293   0BCE 0A 27 0C      jmp _switch20_exit ; case break
1294   0BD1             _switch20_case4:
1295   0BD1             ;; p = p - 2; 
1296   0BD1 FA FF FF      lea d, [bp + -1] ; $p
1297   0BD4 DA            push d
1298   0BD5 FA FF FF      lea d, [bp + -1] ; $p
1299   0BD8 2A            mov b, [d]
1300   0BD9             ; START TERMS
1301   0BD9 D7            push a
1302   0BDA 11            mov a, b
1303   0BDB 26 02 00      mov b, $2
1304   0BDE 60            sub a, b
1305   0BDF 27            mov b, a
1306   0BE0 E4            pop a
1307   0BE1             ; END TERMS
1308   0BE1 E7            pop d
1309   0BE2 FD 43         mov [d], b
1310   0BE4             ;; putchar(*(char*)p); 
1311   0BE4 FA FF FF      lea d, [bp + -1] ; $p
1312   0BE7 2A            mov b, [d]
1313   0BE8 74            mov d, b
1314   0BE9 32            mov bl, [d]
1315   0BEA A7 00         mov bh, 0
1316   0BEC DD            push bl
1317   0BED 07 CD 10      call putchar
1318   0BF0 51 01 00      add sp, 1
1319   0BF3             ;; break; 
1320   0BF3 0A 27 0C      jmp _switch20_exit ; case break
1321   0BF6             _switch20_case5:
1322   0BF6             ;; p = p - 2; 
1323   0BF6 FA FF FF      lea d, [bp + -1] ; $p
1324   0BF9 DA            push d
1325   0BFA FA FF FF      lea d, [bp + -1] ; $p
1326   0BFD 2A            mov b, [d]
1327   0BFE             ; START TERMS
1328   0BFE D7            push a
1329   0BFF 11            mov a, b
1330   0C00 26 02 00      mov b, $2
1331   0C03 60            sub a, b
1332   0C04 27            mov b, a
1333   0C05 E4            pop a
1334   0C06             ; END TERMS
1335   0C06 E7            pop d
1336   0C07 FD 43         mov [d], b
1337   0C09             ;; print(*(char**)p); 
1338   0C09 FA FF FF      lea d, [bp + -1] ; $p
1339   0C0C 2A            mov b, [d]
1340   0C0D 74            mov d, b
1341   0C0E 2A            mov b, [d]
1342   0C0F FD AB         swp b
1343   0C11 D8            push b
1344   0C12 07 15 11      call print
1345   0C15 51 02 00      add sp, 2
1346   0C18             ;; break; 
1347   0C18 0A 27 0C      jmp _switch20_exit ; case break
1348   0C1B             _switch20_default:
1349   0C1B             ;; print("Error: Unknown argument type.\n"); 
1350   0C1B 26 04 17      mov b, __s11 ; "Error: Unknown argument type.\n"
1351   0C1E FD AB         swp b
1352   0C20 D8            push b
1353   0C21 07 15 11      call print
1354   0C24 51 02 00      add sp, 2
1355   0C27             _switch20_exit:
1356   0C27             ;; fp++; 
1357   0C27 FA FD FF      lea d, [bp + -3] ; $fp
1358   0C2A 2A            mov b, [d]
1359   0C2B FD 79         mov g, b
1360   0C2D FD 77         inc b
1361   0C2F FA FD FF      lea d, [bp + -3] ; $fp
1362   0C32 FD 43         mov [d], b
1363   0C34 FD 27         mov b, g
1364   0C36 0A 57 0C      jmp _if19_exit
1365   0C39             _if19_else:
1366   0C39             ;; putchar(*fp); 
1367   0C39 FA FD FF      lea d, [bp + -3] ; $fp
1368   0C3C 2A            mov b, [d]
1369   0C3D 74            mov d, b
1370   0C3E 32            mov bl, [d]
1371   0C3F A7 00         mov bh, 0
1372   0C41 DD            push bl
1373   0C42 07 CD 10      call putchar
1374   0C45 51 01 00      add sp, 1
1375   0C48             ;; fp++; 
1376   0C48 FA FD FF      lea d, [bp + -3] ; $fp
1377   0C4B 2A            mov b, [d]
1378   0C4C FD 79         mov g, b
1379   0C4E FD 77         inc b
1380   0C50 FA FD FF      lea d, [bp + -3] ; $fp
1381   0C53 FD 43         mov [d], b
1382   0C55 FD 27         mov b, g
1383   0C57             _if19_exit:
1384   0C57             _for17_update:
1385   0C57 0A F7 0A      jmp _for17_cond
1386   0C5A             _for17_exit:
1387   0C5A F9            leave
1388   0C5B 09            ret
1389   0C5C             
1390   0C5C             printx16:
1391   0C5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1392   0C5F             
1393   0C5F             ; --- BEGIN INLINE ASM BLOCK
1394   0C5F FA 05 00      lea d, [bp + 5] ; $hex
1395   0C62 2A            mov b, [d]
1396   0C63 07 96 14      call print_u16x
1397   0C66             ; --- END INLINE ASM BLOCK
1398   0C66             
1399   0C66 F9            leave
1400   0C67 09            ret
1401   0C68             
1402   0C68             printx8:
1403   0C68 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1404   0C6B             
1405   0C6B             ; --- BEGIN INLINE ASM BLOCK
1406   0C6B FA 05 00      lea d, [bp + 5] ; $hex
1407   0C6E 32            mov bl, [d]
1408   0C6F 07 DA 14      call print_u8x
1409   0C72             ; --- END INLINE ASM BLOCK
1410   0C72             
1411   0C72 F9            leave
1412   0C73 09            ret
1413   0C74             
1414   0C74             hex_to_int:
1415   0C74 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1416   0C77             ; $value 
1417   0C77 10 00 00      mov a, $0
1418   0C7A 45 FF FF      mov [bp + -1], a
1419   0C7D             ; $i 
1420   0C7D             ; $hex_char 
1421   0C7D             ; $len 
1422   0C7D 52 07 00      sub sp, 7
1423   0C80             ;; len = strlen(hex_string); 
1424   0C80 FA FA FF      lea d, [bp + -6] ; $len
1425   0C83 DA            push d
1426   0C84 FA 05 00      lea d, [bp + 5] ; $hex_string
1427   0C87 2A            mov b, [d]
1428   0C88 FD AB         swp b
1429   0C8A D8            push b
1430   0C8B 07 00 0A      call strlen
1431   0C8E 51 02 00      add sp, 2
1432   0C91 E7            pop d
1433   0C92 FD 43         mov [d], b
1434   0C94             ;; for (i = 0; i < len; i++) { 
1435   0C94             _for21_init:
1436   0C94 FA FD FF      lea d, [bp + -3] ; $i
1437   0C97 DA            push d
1438   0C98 26 00 00      mov b, $0
1439   0C9B E7            pop d
1440   0C9C FD 43         mov [d], b
1441   0C9E             _for21_cond:
1442   0C9E FA FD FF      lea d, [bp + -3] ; $i
1443   0CA1 2A            mov b, [d]
1444   0CA2             ; START RELATIONAL
1445   0CA2 D7            push a
1446   0CA3 11            mov a, b
1447   0CA4 FA FA FF      lea d, [bp + -6] ; $len
1448   0CA7 2A            mov b, [d]
1449   0CA8 B0            cmp a, b
1450   0CA9 FD 73         slt ; < 
1451   0CAB E4            pop a
1452   0CAC             ; END RELATIONAL
1453   0CAC C0 00 00      cmp b, 0
1454   0CAF C6 B4 0D      je _for21_exit
1455   0CB2             _for21_block:
1456   0CB2             ;; hex_char = hex_string[i]; 
1457   0CB2 FA FC FF      lea d, [bp + -4] ; $hex_char
1458   0CB5 DA            push d
1459   0CB6 FA 05 00      lea d, [bp + 5] ; $hex_string
1460   0CB9 FD 2A         mov d, [d]
1461   0CBB D7            push a
1462   0CBC DA            push d
1463   0CBD FA FD FF      lea d, [bp + -3] ; $i
1464   0CC0 2A            mov b, [d]
1465   0CC1 E7            pop d
1466   0CC2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1467   0CC6 E4            pop a
1468   0CC7 32            mov bl, [d]
1469   0CC8 A7 00         mov bh, 0
1470   0CCA E7            pop d
1471   0CCB FD 3E         mov [d], bl
1472   0CCD             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1473   0CCD             _if22_cond:
1474   0CCD FA FC FF      lea d, [bp + -4] ; $hex_char
1475   0CD0 32            mov bl, [d]
1476   0CD1 A7 00         mov bh, 0
1477   0CD3             ; START RELATIONAL
1478   0CD3 D7            push a
1479   0CD4 11            mov a, b
1480   0CD5 26 61 00      mov b, $61
1481   0CD8 B0            cmp a, b
1482   0CD9 FD 80         sge ; >=
1483   0CDB E4            pop a
1484   0CDC             ; END RELATIONAL
1485   0CDC D7            push a
1486   0CDD 11            mov a, b
1487   0CDE FA FC FF      lea d, [bp + -4] ; $hex_char
1488   0CE1 32            mov bl, [d]
1489   0CE2 A7 00         mov bh, 0
1490   0CE4             ; START RELATIONAL
1491   0CE4 D7            push a
1492   0CE5 11            mov a, b
1493   0CE6 26 66 00      mov b, $66
1494   0CE9 B0            cmp a, b
1495   0CEA FD 74         sle ; <=
1496   0CEC E4            pop a
1497   0CED             ; END RELATIONAL
1498   0CED FD A7         sand a, b ; &&
1499   0CEF E4            pop a
1500   0CF0 C0 00 00      cmp b, 0
1501   0CF3 C6 24 0D      je _if22_else
1502   0CF6             _if22_true:
1503   0CF6             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1504   0CF6 FA FF FF      lea d, [bp + -1] ; $value
1505   0CF9 DA            push d
1506   0CFA FA FF FF      lea d, [bp + -1] ; $value
1507   0CFD 2A            mov b, [d]
1508   0CFE             ; START FACTORS
1509   0CFE D7            push a
1510   0CFF 11            mov a, b
1511   0D00 26 10 00      mov b, $10
1512   0D03 AC            mul a, b ; *
1513   0D04 11            mov a, b
1514   0D05 27            mov b, a
1515   0D06 E4            pop a
1516   0D07             ; END FACTORS
1517   0D07             ; START TERMS
1518   0D07 D7            push a
1519   0D08 11            mov a, b
1520   0D09 FA FC FF      lea d, [bp + -4] ; $hex_char
1521   0D0C 32            mov bl, [d]
1522   0D0D A7 00         mov bh, 0
1523   0D0F             ; START TERMS
1524   0D0F D7            push a
1525   0D10 11            mov a, b
1526   0D11 26 61 00      mov b, $61
1527   0D14 60            sub a, b
1528   0D15 26 0A 00      mov b, $a
1529   0D18 54            add a, b
1530   0D19 27            mov b, a
1531   0D1A E4            pop a
1532   0D1B             ; END TERMS
1533   0D1B 54            add a, b
1534   0D1C 27            mov b, a
1535   0D1D E4            pop a
1536   0D1E             ; END TERMS
1537   0D1E E7            pop d
1538   0D1F FD 43         mov [d], b
1539   0D21 0A A2 0D      jmp _if22_exit
1540   0D24             _if22_else:
1541   0D24             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1542   0D24             _if23_cond:
1543   0D24 FA FC FF      lea d, [bp + -4] ; $hex_char
1544   0D27 32            mov bl, [d]
1545   0D28 A7 00         mov bh, 0
1546   0D2A             ; START RELATIONAL
1547   0D2A D7            push a
1548   0D2B 11            mov a, b
1549   0D2C 26 41 00      mov b, $41
1550   0D2F B0            cmp a, b
1551   0D30 FD 80         sge ; >=
1552   0D32 E4            pop a
1553   0D33             ; END RELATIONAL
1554   0D33 D7            push a
1555   0D34 11            mov a, b
1556   0D35 FA FC FF      lea d, [bp + -4] ; $hex_char
1557   0D38 32            mov bl, [d]
1558   0D39 A7 00         mov bh, 0
1559   0D3B             ; START RELATIONAL
1560   0D3B D7            push a
1561   0D3C 11            mov a, b
1562   0D3D 26 46 00      mov b, $46
1563   0D40 B0            cmp a, b
1564   0D41 FD 74         sle ; <=
1565   0D43 E4            pop a
1566   0D44             ; END RELATIONAL
1567   0D44 FD A7         sand a, b ; &&
1568   0D46 E4            pop a
1569   0D47 C0 00 00      cmp b, 0
1570   0D4A C6 7B 0D      je _if23_else
1571   0D4D             _if23_true:
1572   0D4D             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1573   0D4D FA FF FF      lea d, [bp + -1] ; $value
1574   0D50 DA            push d
1575   0D51 FA FF FF      lea d, [bp + -1] ; $value
1576   0D54 2A            mov b, [d]
1577   0D55             ; START FACTORS
1578   0D55 D7            push a
1579   0D56 11            mov a, b
1580   0D57 26 10 00      mov b, $10
1581   0D5A AC            mul a, b ; *
1582   0D5B 11            mov a, b
1583   0D5C 27            mov b, a
1584   0D5D E4            pop a
1585   0D5E             ; END FACTORS
1586   0D5E             ; START TERMS
1587   0D5E D7            push a
1588   0D5F 11            mov a, b
1589   0D60 FA FC FF      lea d, [bp + -4] ; $hex_char
1590   0D63 32            mov bl, [d]
1591   0D64 A7 00         mov bh, 0
1592   0D66             ; START TERMS
1593   0D66 D7            push a
1594   0D67 11            mov a, b
1595   0D68 26 41 00      mov b, $41
1596   0D6B 60            sub a, b
1597   0D6C 26 0A 00      mov b, $a
1598   0D6F 54            add a, b
1599   0D70 27            mov b, a
1600   0D71 E4            pop a
1601   0D72             ; END TERMS
1602   0D72 54            add a, b
1603   0D73 27            mov b, a
1604   0D74 E4            pop a
1605   0D75             ; END TERMS
1606   0D75 E7            pop d
1607   0D76 FD 43         mov [d], b
1608   0D78 0A A2 0D      jmp _if23_exit
1609   0D7B             _if23_else:
1610   0D7B             ;; value = (value * 16) + (hex_char - '0'); 
1611   0D7B FA FF FF      lea d, [bp + -1] ; $value
1612   0D7E DA            push d
1613   0D7F FA FF FF      lea d, [bp + -1] ; $value
1614   0D82 2A            mov b, [d]
1615   0D83             ; START FACTORS
1616   0D83 D7            push a
1617   0D84 11            mov a, b
1618   0D85 26 10 00      mov b, $10
1619   0D88 AC            mul a, b ; *
1620   0D89 11            mov a, b
1621   0D8A 27            mov b, a
1622   0D8B E4            pop a
1623   0D8C             ; END FACTORS
1624   0D8C             ; START TERMS
1625   0D8C D7            push a
1626   0D8D 11            mov a, b
1627   0D8E FA FC FF      lea d, [bp + -4] ; $hex_char
1628   0D91 32            mov bl, [d]
1629   0D92 A7 00         mov bh, 0
1630   0D94             ; START TERMS
1631   0D94 D7            push a
1632   0D95 11            mov a, b
1633   0D96 26 30 00      mov b, $30
1634   0D99 60            sub a, b
1635   0D9A 27            mov b, a
1636   0D9B E4            pop a
1637   0D9C             ; END TERMS
1638   0D9C 54            add a, b
1639   0D9D 27            mov b, a
1640   0D9E E4            pop a
1641   0D9F             ; END TERMS
1642   0D9F E7            pop d
1643   0DA0 FD 43         mov [d], b
1644   0DA2             _if23_exit:
1645   0DA2             _if22_exit:
1646   0DA2             _for21_update:
1647   0DA2 FA FD FF      lea d, [bp + -3] ; $i
1648   0DA5 2A            mov b, [d]
1649   0DA6 FD 79         mov g, b
1650   0DA8 FD 77         inc b
1651   0DAA FA FD FF      lea d, [bp + -3] ; $i
1652   0DAD FD 43         mov [d], b
1653   0DAF FD 27         mov b, g
1654   0DB1 0A 9E 0C      jmp _for21_cond
1655   0DB4             _for21_exit:
1656   0DB4             ;; return value; 
1657   0DB4 FA FF FF      lea d, [bp + -1] ; $value
1658   0DB7 2A            mov b, [d]
1659   0DB8 F9            leave
1660   0DB9 09            ret
1661   0DBA             
1662   0DBA             atoi:
1663   0DBA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1664   0DBD             ; $result 
1665   0DBD 10 00 00      mov a, $0
1666   0DC0 45 FF FF      mov [bp + -1], a
1667   0DC3             ; $sign 
1668   0DC3 10 01 00      mov a, $1
1669   0DC6 45 FD FF      mov [bp + -3], a
1670   0DC9 52 04 00      sub sp, 4
1671   0DCC             ;; while (*str == ' ') str++; 
1672   0DCC             _while24_cond:
1673   0DCC FA 05 00      lea d, [bp + 5] ; $str
1674   0DCF 2A            mov b, [d]
1675   0DD0 74            mov d, b
1676   0DD1 32            mov bl, [d]
1677   0DD2 A7 00         mov bh, 0
1678   0DD4             ; START RELATIONAL
1679   0DD4 D7            push a
1680   0DD5 11            mov a, b
1681   0DD6 26 20 00      mov b, $20
1682   0DD9 B0            cmp a, b
1683   0DDA FD 71         seq ; ==
1684   0DDC E4            pop a
1685   0DDD             ; END RELATIONAL
1686   0DDD C0 00 00      cmp b, 0
1687   0DE0 C6 F5 0D      je _while24_exit
1688   0DE3             _while24_block:
1689   0DE3             ;; str++; 
1690   0DE3 FA 05 00      lea d, [bp + 5] ; $str
1691   0DE6 2A            mov b, [d]
1692   0DE7 FD 79         mov g, b
1693   0DE9 FD 77         inc b
1694   0DEB FA 05 00      lea d, [bp + 5] ; $str
1695   0DEE FD 43         mov [d], b
1696   0DF0 FD 27         mov b, g
1697   0DF2 0A CC 0D      jmp _while24_cond
1698   0DF5             _while24_exit:
1699   0DF5             ;; if (*str == '-' || *str == '+') { 
1700   0DF5             _if25_cond:
1701   0DF5 FA 05 00      lea d, [bp + 5] ; $str
1702   0DF8 2A            mov b, [d]
1703   0DF9 74            mov d, b
1704   0DFA 32            mov bl, [d]
1705   0DFB A7 00         mov bh, 0
1706   0DFD             ; START RELATIONAL
1707   0DFD D7            push a
1708   0DFE 11            mov a, b
1709   0DFF 26 2D 00      mov b, $2d
1710   0E02 B0            cmp a, b
1711   0E03 FD 71         seq ; ==
1712   0E05 E4            pop a
1713   0E06             ; END RELATIONAL
1714   0E06 D7            push a
1715   0E07 11            mov a, b
1716   0E08 FA 05 00      lea d, [bp + 5] ; $str
1717   0E0B 2A            mov b, [d]
1718   0E0C 74            mov d, b
1719   0E0D 32            mov bl, [d]
1720   0E0E A7 00         mov bh, 0
1721   0E10             ; START RELATIONAL
1722   0E10 D7            push a
1723   0E11 11            mov a, b
1724   0E12 26 2B 00      mov b, $2b
1725   0E15 B0            cmp a, b
1726   0E16 FD 71         seq ; ==
1727   0E18 E4            pop a
1728   0E19             ; END RELATIONAL
1729   0E19 FD A8         sor a, b ; ||
1730   0E1B E4            pop a
1731   0E1C C0 00 00      cmp b, 0
1732   0E1F C6 5A 0E      je _if25_exit
1733   0E22             _if25_true:
1734   0E22             ;; if (*str == '-') sign = -1; 
1735   0E22             _if26_cond:
1736   0E22 FA 05 00      lea d, [bp + 5] ; $str
1737   0E25 2A            mov b, [d]
1738   0E26 74            mov d, b
1739   0E27 32            mov bl, [d]
1740   0E28 A7 00         mov bh, 0
1741   0E2A             ; START RELATIONAL
1742   0E2A D7            push a
1743   0E2B 11            mov a, b
1744   0E2C 26 2D 00      mov b, $2d
1745   0E2F B0            cmp a, b
1746   0E30 FD 71         seq ; ==
1747   0E32 E4            pop a
1748   0E33             ; END RELATIONAL
1749   0E33 C0 00 00      cmp b, 0
1750   0E36 C6 48 0E      je _if26_exit
1751   0E39             _if26_true:
1752   0E39             ;; sign = -1; 
1753   0E39 FA FD FF      lea d, [bp + -3] ; $sign
1754   0E3C DA            push d
1755   0E3D 26 01 00      mov b, $1
1756   0E40 FD 97         neg b
1757   0E42 E7            pop d
1758   0E43 FD 43         mov [d], b
1759   0E45 0A 48 0E      jmp _if26_exit
1760   0E48             _if26_exit:
1761   0E48             ;; str++; 
1762   0E48 FA 05 00      lea d, [bp + 5] ; $str
1763   0E4B 2A            mov b, [d]
1764   0E4C FD 79         mov g, b
1765   0E4E FD 77         inc b
1766   0E50 FA 05 00      lea d, [bp + 5] ; $str
1767   0E53 FD 43         mov [d], b
1768   0E55 FD 27         mov b, g
1769   0E57 0A 5A 0E      jmp _if25_exit
1770   0E5A             _if25_exit:
1771   0E5A             ;; while (*str >= '0' && *str <= '9') { 
1772   0E5A             _while27_cond:
1773   0E5A FA 05 00      lea d, [bp + 5] ; $str
1774   0E5D 2A            mov b, [d]
1775   0E5E 74            mov d, b
1776   0E5F 32            mov bl, [d]
1777   0E60 A7 00         mov bh, 0
1778   0E62             ; START RELATIONAL
1779   0E62 D7            push a
1780   0E63 11            mov a, b
1781   0E64 26 30 00      mov b, $30
1782   0E67 B0            cmp a, b
1783   0E68 FD 80         sge ; >=
1784   0E6A E4            pop a
1785   0E6B             ; END RELATIONAL
1786   0E6B D7            push a
1787   0E6C 11            mov a, b
1788   0E6D FA 05 00      lea d, [bp + 5] ; $str
1789   0E70 2A            mov b, [d]
1790   0E71 74            mov d, b
1791   0E72 32            mov bl, [d]
1792   0E73 A7 00         mov bh, 0
1793   0E75             ; START RELATIONAL
1794   0E75 D7            push a
1795   0E76 11            mov a, b
1796   0E77 26 39 00      mov b, $39
1797   0E7A B0            cmp a, b
1798   0E7B FD 74         sle ; <=
1799   0E7D E4            pop a
1800   0E7E             ; END RELATIONAL
1801   0E7E FD A7         sand a, b ; &&
1802   0E80 E4            pop a
1803   0E81 C0 00 00      cmp b, 0
1804   0E84 C6 C2 0E      je _while27_exit
1805   0E87             _while27_block:
1806   0E87             ;; result = result * 10 + (*str - '0'); 
1807   0E87 FA FF FF      lea d, [bp + -1] ; $result
1808   0E8A DA            push d
1809   0E8B FA FF FF      lea d, [bp + -1] ; $result
1810   0E8E 2A            mov b, [d]
1811   0E8F             ; START FACTORS
1812   0E8F D7            push a
1813   0E90 11            mov a, b
1814   0E91 26 0A 00      mov b, $a
1815   0E94 AC            mul a, b ; *
1816   0E95 11            mov a, b
1817   0E96 27            mov b, a
1818   0E97 E4            pop a
1819   0E98             ; END FACTORS
1820   0E98             ; START TERMS
1821   0E98 D7            push a
1822   0E99 11            mov a, b
1823   0E9A FA 05 00      lea d, [bp + 5] ; $str
1824   0E9D 2A            mov b, [d]
1825   0E9E 74            mov d, b
1826   0E9F 32            mov bl, [d]
1827   0EA0 A7 00         mov bh, 0
1828   0EA2             ; START TERMS
1829   0EA2 D7            push a
1830   0EA3 11            mov a, b
1831   0EA4 26 30 00      mov b, $30
1832   0EA7 60            sub a, b
1833   0EA8 27            mov b, a
1834   0EA9 E4            pop a
1835   0EAA             ; END TERMS
1836   0EAA 54            add a, b
1837   0EAB 27            mov b, a
1838   0EAC E4            pop a
1839   0EAD             ; END TERMS
1840   0EAD E7            pop d
1841   0EAE FD 43         mov [d], b
1842   0EB0             ;; str++; 
1843   0EB0 FA 05 00      lea d, [bp + 5] ; $str
1844   0EB3 2A            mov b, [d]
1845   0EB4 FD 79         mov g, b
1846   0EB6 FD 77         inc b
1847   0EB8 FA 05 00      lea d, [bp + 5] ; $str
1848   0EBB FD 43         mov [d], b
1849   0EBD FD 27         mov b, g
1850   0EBF 0A 5A 0E      jmp _while27_cond
1851   0EC2             _while27_exit:
1852   0EC2             ;; return sign * result; 
1853   0EC2 FA FD FF      lea d, [bp + -3] ; $sign
1854   0EC5 2A            mov b, [d]
1855   0EC6             ; START FACTORS
1856   0EC6 D7            push a
1857   0EC7 11            mov a, b
1858   0EC8 FA FF FF      lea d, [bp + -1] ; $result
1859   0ECB 2A            mov b, [d]
1860   0ECC AC            mul a, b ; *
1861   0ECD 11            mov a, b
1862   0ECE 27            mov b, a
1863   0ECF E4            pop a
1864   0ED0             ; END FACTORS
1865   0ED0 F9            leave
1866   0ED1 09            ret
1867   0ED2             
1868   0ED2             gets:
1869   0ED2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1870   0ED5             
1871   0ED5             ; --- BEGIN INLINE ASM BLOCK
1872   0ED5 FA 05 00      lea d, [bp + 5] ; $s
1873   0ED8 15            mov a, [d]
1874   0ED9 3C            mov d, a
1875   0EDA 07 FB 12      call _gets
1876   0EDD             ; --- END INLINE ASM BLOCK
1877   0EDD             
1878   0EDD             ;; return strlen(s); 
1879   0EDD FA 05 00      lea d, [bp + 5] ; $s
1880   0EE0 2A            mov b, [d]
1881   0EE1 FD AB         swp b
1882   0EE3 D8            push b
1883   0EE4 07 00 0A      call strlen
1884   0EE7 51 02 00      add sp, 2
1885   0EEA F9            leave
1886   0EEB 09            ret
1887   0EEC             
1888   0EEC             prints:
1889   0EEC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1890   0EEF             ; $digits 
1891   0EEF             ; $i 
1892   0EEF 10 00 00      mov a, $0
1893   0EF2 45 FA FF      mov [bp + -6], a
1894   0EF5 52 07 00      sub sp, 7
1895   0EF8             ;; if (num < 0) { 
1896   0EF8             _if28_cond:
1897   0EF8 FA 05 00      lea d, [bp + 5] ; $num
1898   0EFB 2A            mov b, [d]
1899   0EFC             ; START RELATIONAL
1900   0EFC D7            push a
1901   0EFD 11            mov a, b
1902   0EFE 26 00 00      mov b, $0
1903   0F01 B0            cmp a, b
1904   0F02 FD 73         slt ; < 
1905   0F04 E4            pop a
1906   0F05             ; END RELATIONAL
1907   0F05 C0 00 00      cmp b, 0
1908   0F08 C6 25 0F      je _if28_else
1909   0F0B             _if28_true:
1910   0F0B             ;; putchar('-'); 
1911   0F0B 26 2D 00      mov b, $2d
1912   0F0E DD            push bl
1913   0F0F 07 CD 10      call putchar
1914   0F12 51 01 00      add sp, 1
1915   0F15             ;; num = -num; 
1916   0F15 FA 05 00      lea d, [bp + 5] ; $num
1917   0F18 DA            push d
1918   0F19 FA 05 00      lea d, [bp + 5] ; $num
1919   0F1C 2A            mov b, [d]
1920   0F1D FD 97         neg b
1921   0F1F E7            pop d
1922   0F20 FD 43         mov [d], b
1923   0F22 0A 47 0F      jmp _if28_exit
1924   0F25             _if28_else:
1925   0F25             ;; if (num == 0) { 
1926   0F25             _if29_cond:
1927   0F25 FA 05 00      lea d, [bp + 5] ; $num
1928   0F28 2A            mov b, [d]
1929   0F29             ; START RELATIONAL
1930   0F29 D7            push a
1931   0F2A 11            mov a, b
1932   0F2B 26 00 00      mov b, $0
1933   0F2E B0            cmp a, b
1934   0F2F FD 71         seq ; ==
1935   0F31 E4            pop a
1936   0F32             ; END RELATIONAL
1937   0F32 C0 00 00      cmp b, 0
1938   0F35 C6 47 0F      je _if29_exit
1939   0F38             _if29_true:
1940   0F38             ;; putchar('0'); 
1941   0F38 26 30 00      mov b, $30
1942   0F3B DD            push bl
1943   0F3C 07 CD 10      call putchar
1944   0F3F 51 01 00      add sp, 1
1945   0F42             ;; return; 
1946   0F42 F9            leave
1947   0F43 09            ret
1948   0F44 0A 47 0F      jmp _if29_exit
1949   0F47             _if29_exit:
1950   0F47             _if28_exit:
1951   0F47             ;; while (num > 0) { 
1952   0F47             _while30_cond:
1953   0F47 FA 05 00      lea d, [bp + 5] ; $num
1954   0F4A 2A            mov b, [d]
1955   0F4B             ; START RELATIONAL
1956   0F4B D7            push a
1957   0F4C 11            mov a, b
1958   0F4D 26 00 00      mov b, $0
1959   0F50 B0            cmp a, b
1960   0F51 FD 7F         sgt ; >
1961   0F53 E4            pop a
1962   0F54             ; END RELATIONAL
1963   0F54 C0 00 00      cmp b, 0
1964   0F57 C6 A4 0F      je _while30_exit
1965   0F5A             _while30_block:
1966   0F5A             ;; digits[i] = '0' + (num % 10); 
1967   0F5A FA FC FF      lea d, [bp + -4] ; $digits
1968   0F5D D7            push a
1969   0F5E DA            push d
1970   0F5F FA FA FF      lea d, [bp + -6] ; $i
1971   0F62 2A            mov b, [d]
1972   0F63 E7            pop d
1973   0F64 5A            add d, b
1974   0F65 E4            pop a
1975   0F66 DA            push d
1976   0F67 26 30 00      mov b, $30
1977   0F6A             ; START TERMS
1978   0F6A D7            push a
1979   0F6B 11            mov a, b
1980   0F6C FA 05 00      lea d, [bp + 5] ; $num
1981   0F6F 2A            mov b, [d]
1982   0F70             ; START FACTORS
1983   0F70 D7            push a
1984   0F71 11            mov a, b
1985   0F72 26 0A 00      mov b, $a
1986   0F75 AE            div a, b ; 
1987   0F76 11            mov a, b
1988   0F77 27            mov b, a
1989   0F78 E4            pop a
1990   0F79             ; END FACTORS
1991   0F79 54            add a, b
1992   0F7A 27            mov b, a
1993   0F7B E4            pop a
1994   0F7C             ; END TERMS
1995   0F7C E7            pop d
1996   0F7D FD 3E         mov [d], bl
1997   0F7F             ;; num = num / 10; 
1998   0F7F FA 05 00      lea d, [bp + 5] ; $num
1999   0F82 DA            push d
2000   0F83 FA 05 00      lea d, [bp + 5] ; $num
2001   0F86 2A            mov b, [d]
2002   0F87             ; START FACTORS
2003   0F87 D7            push a
2004   0F88 11            mov a, b
2005   0F89 26 0A 00      mov b, $a
2006   0F8C AE            div a, b
2007   0F8D 27            mov b, a
2008   0F8E E4            pop a
2009   0F8F             ; END FACTORS
2010   0F8F E7            pop d
2011   0F90 FD 43         mov [d], b
2012   0F92             ;; i++; 
2013   0F92 FA FA FF      lea d, [bp + -6] ; $i
2014   0F95 2A            mov b, [d]
2015   0F96 FD 79         mov g, b
2016   0F98 FD 77         inc b
2017   0F9A FA FA FF      lea d, [bp + -6] ; $i
2018   0F9D FD 43         mov [d], b
2019   0F9F FD 27         mov b, g
2020   0FA1 0A 47 0F      jmp _while30_cond
2021   0FA4             _while30_exit:
2022   0FA4             ;; while (i > 0) { 
2023   0FA4             _while31_cond:
2024   0FA4 FA FA FF      lea d, [bp + -6] ; $i
2025   0FA7 2A            mov b, [d]
2026   0FA8             ; START RELATIONAL
2027   0FA8 D7            push a
2028   0FA9 11            mov a, b
2029   0FAA 26 00 00      mov b, $0
2030   0FAD B0            cmp a, b
2031   0FAE FD 7F         sgt ; >
2032   0FB0 E4            pop a
2033   0FB1             ; END RELATIONAL
2034   0FB1 C0 00 00      cmp b, 0
2035   0FB4 C6 DF 0F      je _while31_exit
2036   0FB7             _while31_block:
2037   0FB7             ;; i--; 
2038   0FB7 FA FA FF      lea d, [bp + -6] ; $i
2039   0FBA 2A            mov b, [d]
2040   0FBB FD 79         mov g, b
2041   0FBD FD 7D         dec b
2042   0FBF FA FA FF      lea d, [bp + -6] ; $i
2043   0FC2 FD 43         mov [d], b
2044   0FC4 FD 27         mov b, g
2045   0FC6             ;; putchar(digits[i]); 
2046   0FC6 FA FC FF      lea d, [bp + -4] ; $digits
2047   0FC9 D7            push a
2048   0FCA DA            push d
2049   0FCB FA FA FF      lea d, [bp + -6] ; $i
2050   0FCE 2A            mov b, [d]
2051   0FCF E7            pop d
2052   0FD0 5A            add d, b
2053   0FD1 E4            pop a
2054   0FD2 32            mov bl, [d]
2055   0FD3 A7 00         mov bh, 0
2056   0FD5 DD            push bl
2057   0FD6 07 CD 10      call putchar
2058   0FD9 51 01 00      add sp, 1
2059   0FDC 0A A4 0F      jmp _while31_cond
2060   0FDF             _while31_exit:
2061   0FDF F9            leave
2062   0FE0 09            ret
2063   0FE1             
2064   0FE1             printu:
2065   0FE1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2066   0FE4             ; $digits 
2067   0FE4             ; $i 
2068   0FE4 52 07 00      sub sp, 7
2069   0FE7             ;; i = 0; 
2070   0FE7 FA FA FF      lea d, [bp + -6] ; $i
2071   0FEA DA            push d
2072   0FEB 26 00 00      mov b, $0
2073   0FEE E7            pop d
2074   0FEF FD 43         mov [d], b
2075   0FF1             ;; if(num == 0){ 
2076   0FF1             _if32_cond:
2077   0FF1 FA 05 00      lea d, [bp + 5] ; $num
2078   0FF4 2A            mov b, [d]
2079   0FF5             ; START RELATIONAL
2080   0FF5 D7            push a
2081   0FF6 11            mov a, b
2082   0FF7 26 00 00      mov b, $0
2083   0FFA B0            cmp a, b
2084   0FFB FD 71         seq ; ==
2085   0FFD E4            pop a
2086   0FFE             ; END RELATIONAL
2087   0FFE C0 00 00      cmp b, 0
2088   1001 C6 13 10      je _if32_exit
2089   1004             _if32_true:
2090   1004             ;; putchar('0'); 
2091   1004 26 30 00      mov b, $30
2092   1007 DD            push bl
2093   1008 07 CD 10      call putchar
2094   100B 51 01 00      add sp, 1
2095   100E             ;; return; 
2096   100E F9            leave
2097   100F 09            ret
2098   1010 0A 13 10      jmp _if32_exit
2099   1013             _if32_exit:
2100   1013             ;; while (num > 0) { 
2101   1013             _while33_cond:
2102   1013 FA 05 00      lea d, [bp + 5] ; $num
2103   1016 2A            mov b, [d]
2104   1017             ; START RELATIONAL
2105   1017 D7            push a
2106   1018 11            mov a, b
2107   1019 26 00 00      mov b, $0
2108   101C B0            cmp a, b
2109   101D FD 81         sgu ; > (unsigned)
2110   101F E4            pop a
2111   1020             ; END RELATIONAL
2112   1020 C0 00 00      cmp b, 0
2113   1023 C6 70 10      je _while33_exit
2114   1026             _while33_block:
2115   1026             ;; digits[i] = '0' + (num % 10); 
2116   1026 FA FC FF      lea d, [bp + -4] ; $digits
2117   1029 D7            push a
2118   102A DA            push d
2119   102B FA FA FF      lea d, [bp + -6] ; $i
2120   102E 2A            mov b, [d]
2121   102F E7            pop d
2122   1030 5A            add d, b
2123   1031 E4            pop a
2124   1032 DA            push d
2125   1033 26 30 00      mov b, $30
2126   1036             ; START TERMS
2127   1036 D7            push a
2128   1037 11            mov a, b
2129   1038 FA 05 00      lea d, [bp + 5] ; $num
2130   103B 2A            mov b, [d]
2131   103C             ; START FACTORS
2132   103C D7            push a
2133   103D 11            mov a, b
2134   103E 26 0A 00      mov b, $a
2135   1041 AE            div a, b ; 
2136   1042 11            mov a, b
2137   1043 27            mov b, a
2138   1044 E4            pop a
2139   1045             ; END FACTORS
2140   1045 54            add a, b
2141   1046 27            mov b, a
2142   1047 E4            pop a
2143   1048             ; END TERMS
2144   1048 E7            pop d
2145   1049 FD 3E         mov [d], bl
2146   104B             ;; num = num / 10; 
2147   104B FA 05 00      lea d, [bp + 5] ; $num
2148   104E DA            push d
2149   104F FA 05 00      lea d, [bp + 5] ; $num
2150   1052 2A            mov b, [d]
2151   1053             ; START FACTORS
2152   1053 D7            push a
2153   1054 11            mov a, b
2154   1055 26 0A 00      mov b, $a
2155   1058 AE            div a, b
2156   1059 27            mov b, a
2157   105A E4            pop a
2158   105B             ; END FACTORS
2159   105B E7            pop d
2160   105C FD 43         mov [d], b
2161   105E             ;; i++; 
2162   105E FA FA FF      lea d, [bp + -6] ; $i
2163   1061 2A            mov b, [d]
2164   1062 FD 79         mov g, b
2165   1064 FD 77         inc b
2166   1066 FA FA FF      lea d, [bp + -6] ; $i
2167   1069 FD 43         mov [d], b
2168   106B FD 27         mov b, g
2169   106D 0A 13 10      jmp _while33_cond
2170   1070             _while33_exit:
2171   1070             ;; while (i > 0) { 
2172   1070             _while34_cond:
2173   1070 FA FA FF      lea d, [bp + -6] ; $i
2174   1073 2A            mov b, [d]
2175   1074             ; START RELATIONAL
2176   1074 D7            push a
2177   1075 11            mov a, b
2178   1076 26 00 00      mov b, $0
2179   1079 B0            cmp a, b
2180   107A FD 7F         sgt ; >
2181   107C E4            pop a
2182   107D             ; END RELATIONAL
2183   107D C0 00 00      cmp b, 0
2184   1080 C6 AB 10      je _while34_exit
2185   1083             _while34_block:
2186   1083             ;; i--; 
2187   1083 FA FA FF      lea d, [bp + -6] ; $i
2188   1086 2A            mov b, [d]
2189   1087 FD 79         mov g, b
2190   1089 FD 7D         dec b
2191   108B FA FA FF      lea d, [bp + -6] ; $i
2192   108E FD 43         mov [d], b
2193   1090 FD 27         mov b, g
2194   1092             ;; putchar(digits[i]); 
2195   1092 FA FC FF      lea d, [bp + -4] ; $digits
2196   1095 D7            push a
2197   1096 DA            push d
2198   1097 FA FA FF      lea d, [bp + -6] ; $i
2199   109A 2A            mov b, [d]
2200   109B E7            pop d
2201   109C 5A            add d, b
2202   109D E4            pop a
2203   109E 32            mov bl, [d]
2204   109F A7 00         mov bh, 0
2205   10A1 DD            push bl
2206   10A2 07 CD 10      call putchar
2207   10A5 51 01 00      add sp, 1
2208   10A8 0A 70 10      jmp _while34_cond
2209   10AB             _while34_exit:
2210   10AB F9            leave
2211   10AC 09            ret
2212   10AD             
2213   10AD             rand:
2214   10AD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2215   10B0             ; $sec 
2216   10B0 52 01 00      sub sp, 1
2217   10B3             
2218   10B3             ; --- BEGIN INLINE ASM BLOCK
2219   10B3 19 00         mov al, 0
2220   10B5 05 01         syscall sys_rtc					
2221   10B7 1A            mov al, ah
2222   10B8 FA 00 00      lea d, [bp + 0] ; $sec
2223   10BB 1E            mov al, [d]
2224   10BC             ; --- END INLINE ASM BLOCK
2225   10BC             
2226   10BC             ;; return sec; 
2227   10BC FA 00 00      lea d, [bp + 0] ; $sec
2228   10BF 32            mov bl, [d]
2229   10C0 A7 00         mov bh, 0
2230   10C2 F9            leave
2231   10C3 09            ret
2232   10C4             
2233   10C4             date:
2234   10C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2235   10C7             
2236   10C7             ; --- BEGIN INLINE ASM BLOCK
2237   10C7 19 00         mov al, 0 
2238   10C9 05 07         syscall sys_datetime
2239   10CB             ; --- END INLINE ASM BLOCK
2240   10CB             
2241   10CB F9            leave
2242   10CC 09            ret
2243   10CD             
2244   10CD             putchar:
2245   10CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2246   10D0             
2247   10D0             ; --- BEGIN INLINE ASM BLOCK
2248   10D0 FA 05 00      lea d, [bp + 5] ; $c
2249   10D3 1E            mov al, [d]
2250   10D4 23            mov ah, al
2251   10D5 07 F4 12      call _putchar
2252   10D8             ; --- END INLINE ASM BLOCK
2253   10D8             
2254   10D8 F9            leave
2255   10D9 09            ret
2256   10DA             
2257   10DA             getchar:
2258   10DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2259   10DD             ; $c 
2260   10DD 52 01 00      sub sp, 1
2261   10E0             
2262   10E0             ; --- BEGIN INLINE ASM BLOCK
2263   10E0 07 ED 12      call getch
2264   10E3 1A            mov al, ah
2265   10E4 FA 00 00      lea d, [bp + 0] ; $c
2266   10E7 3E            mov [d], al
2267   10E8             ; --- END INLINE ASM BLOCK
2268   10E8             
2269   10E8             ;; return c; 
2270   10E8 FA 00 00      lea d, [bp + 0] ; $c
2271   10EB 32            mov bl, [d]
2272   10EC A7 00         mov bh, 0
2273   10EE F9            leave
2274   10EF 09            ret
2275   10F0             
2276   10F0             scann:
2277   10F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2278   10F3             ; $m 
2279   10F3 52 02 00      sub sp, 2
2280   10F6             
2281   10F6             ; --- BEGIN INLINE ASM BLOCK
2282   10F6 07 38 15      call scan_u16d
2283   10F9 FA FF FF      lea d, [bp + -1] ; $m
2284   10FC 43            mov [d], a
2285   10FD             ; --- END INLINE ASM BLOCK
2286   10FD             
2287   10FD             ;; return m; 
2288   10FD FA FF FF      lea d, [bp + -1] ; $m
2289   1100 2A            mov b, [d]
2290   1101 F9            leave
2291   1102 09            ret
2292   1103             
2293   1103             puts:
2294   1103 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2295   1106             
2296   1106             ; --- BEGIN INLINE ASM BLOCK
2297   1106 FA 05 00      lea d, [bp + 5] ; $s
2298   1109 15            mov a, [d]
2299   110A 3C            mov d, a
2300   110B 07 3E 14      call _puts
2301   110E 10 00 0A      mov a, $0A00
2302   1111 05 03         syscall sys_io
2303   1113             ; --- END INLINE ASM BLOCK
2304   1113             
2305   1113 F9            leave
2306   1114 09            ret
2307   1115             
2308   1115             print:
2309   1115 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2310   1118             
2311   1118             ; --- BEGIN INLINE ASM BLOCK
2312   1118 FA 05 00      lea d, [bp + 5] ; $s
2313   111B FD 2A         mov d, [d]
2314   111D 07 3E 14      call _puts
2315   1120             ; --- END INLINE ASM BLOCK
2316   1120             
2317   1120 F9            leave
2318   1121 09            ret
2319   1122             
2320   1122             loadfile:
2321   1122 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2322   1125             
2323   1125             ; --- BEGIN INLINE ASM BLOCK
2324   1125 FA 05 00      lea d, [bp + 5] ; $destination
2325   1128 15            mov a, [d]
2326   1129 4F            mov di, a
2327   112A FA 07 00      lea d, [bp + 7] ; $filename
2328   112D FD 2A         mov d, [d]
2329   112F 19 14         mov al, 20
2330   1131 05 04         syscall sys_filesystem
2331   1133             ; --- END INLINE ASM BLOCK
2332   1133             
2333   1133 F9            leave
2334   1134 09            ret
2335   1135             
2336   1135             create_file:
2337   1135 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2338   1138 F9            leave
2339   1139 09            ret
2340   113A             
2341   113A             delete_file:
2342   113A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2343   113D             
2344   113D             ; --- BEGIN INLINE ASM BLOCK
2345   113D FA 05 00      lea d, [bp + 5] ; $filename
2346   1140 19 0A         mov al, 10
2347   1142 05 04         syscall sys_filesystem
2348   1144             ; --- END INLINE ASM BLOCK
2349   1144             
2350   1144 F9            leave
2351   1145 09            ret
2352   1146             
2353   1146             fopen:
2354   1146 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2355   1149 F9            leave
2356   114A 09            ret
2357   114B             
2358   114B             fclose:
2359   114B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2360   114E F9            leave
2361   114F 09            ret
2362   1150             
2363   1150             alloc:
2364   1150 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2365   1153             ;; heap_top = heap_top + bytes; 
2366   1153 3B 2B 17      mov d, _heap_top ; $heap_top
2367   1156 DA            push d
2368   1157 3B 2B 17      mov d, _heap_top ; $heap_top
2369   115A 2A            mov b, [d]
2370   115B             ; START TERMS
2371   115B D7            push a
2372   115C 11            mov a, b
2373   115D FA 05 00      lea d, [bp + 5] ; $bytes
2374   1160 2A            mov b, [d]
2375   1161 54            add a, b
2376   1162 27            mov b, a
2377   1163 E4            pop a
2378   1164             ; END TERMS
2379   1164 E7            pop d
2380   1165 FD 43         mov [d], b
2381   1167             ;; return heap_top - bytes; 
2382   1167 3B 2B 17      mov d, _heap_top ; $heap_top
2383   116A 2A            mov b, [d]
2384   116B             ; START TERMS
2385   116B D7            push a
2386   116C 11            mov a, b
2387   116D FA 05 00      lea d, [bp + 5] ; $bytes
2388   1170 2A            mov b, [d]
2389   1171 60            sub a, b
2390   1172 27            mov b, a
2391   1173 E4            pop a
2392   1174             ; END TERMS
2393   1174 F9            leave
2394   1175 09            ret
2395   1176             
2396   1176             free:
2397   1176 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2398   1179             ;; return heap_top = heap_top - bytes; 
2399   1179 3B 2B 17      mov d, _heap_top ; $heap_top
2400   117C DA            push d
2401   117D 3B 2B 17      mov d, _heap_top ; $heap_top
2402   1180 2A            mov b, [d]
2403   1181             ; START TERMS
2404   1181 D7            push a
2405   1182 11            mov a, b
2406   1183 FA 05 00      lea d, [bp + 5] ; $bytes
2407   1186 2A            mov b, [d]
2408   1187 60            sub a, b
2409   1188 27            mov b, a
2410   1189 E4            pop a
2411   118A             ; END TERMS
2412   118A E7            pop d
2413   118B FD 43         mov [d], b
2414   118D F9            leave
2415   118E 09            ret
2416   118F             
2417   118F             exit:
2418   118F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2419   1192             
2420   1192             ; --- BEGIN INLINE ASM BLOCK
2421   1192 05 0B         syscall sys_terminate_proc
2422   1194             ; --- END INLINE ASM BLOCK
2423   1194             
2424   1194 F9            leave
2425   1195 09            ret
2426   1196             
2427   1196             load_hex:
2428   1196 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2429   1199             ; $temp 
2430   1199 52 02 00      sub sp, 2
2431   119C             ;; temp = alloc(32768); 
2432   119C FA FF FF      lea d, [bp + -1] ; $temp
2433   119F DA            push d
2434   11A0 26 00 80      mov b, $8000
2435   11A3 FD AB         swp b
2436   11A5 D8            push b
2437   11A6 07 50 11      call alloc
2438   11A9 51 02 00      add sp, 2
2439   11AC E7            pop d
2440   11AD FD 43         mov [d], b
2441   11AF             
2442   11AF             ; --- BEGIN INLINE ASM BLOCK
2443   11AF               
2444   11AF               
2445   11AF               
2446   11AF               
2447   11AF               
2448   11AF             _load_hex:
2449   11AF D7            push a
2450   11B0 D8            push b
2451   11B1 DA            push d
2452   11B2 E2            push si
2453   11B3 E3            push di
2454   11B4 52 00 80      sub sp, $8000      
2455   11B7 38 00 00      mov c, 0
2456   11BA 48            mov a, sp
2457   11BB 77            inc a
2458   11BC 3C            mov d, a          
2459   11BD 07 FB 12      call _gets        
2460   11C0 4D            mov si, a
2461   11C1             __load_hex_loop:
2462   11C1 F6            lodsb             
2463   11C2 B9 00         cmp al, 0         
2464   11C4 C6 D2 11      jz __load_hex_ret
2465   11C7 36            mov bh, al
2466   11C8 F6            lodsb
2467   11C9 2F            mov bl, al
2468   11CA 07 B1 12      call _atoi        
2469   11CD F7            stosb             
2470   11CE 78            inc c
2471   11CF 0A C1 11      jmp __load_hex_loop
2472   11D2             __load_hex_ret:
2473   11D2 51 00 80      add sp, $8000
2474   11D5 F0            pop di
2475   11D6 EF            pop si
2476   11D7 E7            pop d
2477   11D8 E5            pop b
2478   11D9 E4            pop a
2479   11DA             ; --- END INLINE ASM BLOCK
2480   11DA             
2481   11DA F9            leave
2482   11DB 09            ret
2483   11DC             
2484   11DC             getparam:
2485   11DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2486   11DF             ; $data 
2487   11DF 52 01 00      sub sp, 1
2488   11E2             
2489   11E2             ; --- BEGIN INLINE ASM BLOCK
2490   11E2 19 04         mov al, 4
2491   11E4 FA 05 00      lea d, [bp + 5] ; $address
2492   11E7 FD 2A         mov d, [d]
2493   11E9 05 0C         syscall sys_system
2494   11EB FA 00 00      lea d, [bp + 0] ; $data
2495   11EE FD 3E         mov [d], bl
2496   11F0             ; --- END INLINE ASM BLOCK
2497   11F0             
2498   11F0             ;; return data; 
2499   11F0 FA 00 00      lea d, [bp + 0] ; $data
2500   11F3 32            mov bl, [d]
2501   11F4 A7 00         mov bh, 0
2502   11F6 F9            leave
2503   11F7 09            ret
2504   11F8             
2505   11F8             clear:
2506   11F8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2507   11FB             ;; print("\033[2J\033[H"); 
2508   11FB 26 23 17      mov b, __s12 ; "\033[2J\033[H"
2509   11FE FD AB         swp b
2510   1200 D8            push b
2511   1201 07 15 11      call print
2512   1204 51 02 00      add sp, 2
2513   1207 F9            leave
2514   1208 09            ret
2515   1209             
2516   1209             include_stdio_asm:
2517   1209 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2518   120C             
2519   120C             ; --- BEGIN INLINE ASM BLOCK
2520   120C             .include "lib/stdio.asm"
0001+  120C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  120C             ; stdio.s
0003+  120C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  120C             .include "lib/string.asm"
0001++ 120C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 120C             ; string.s
0003++ 120C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 120C             
0005++ 120C             
0006++ 120C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 120C             ; _strrev
0008++ 120C             ; reverse a string
0009++ 120C             ; D = string address
0010++ 120C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 120C             ; 01234
0012++ 120C             _strrev:
0013++ 120C 4B          	pusha
0014++ 120D 07 53 12    	call _strlen	; length in C
0015++ 1210 12          	mov a, c
0016++ 1211 AF 01 00    	cmp a, 1
0017++ 1214 D0 2E 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1217 7D          	dec a
0019++ 1218 FD 4E       	mov si, d	; beginning of string
0020++ 121A FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 121C 59          	add d, a	; end of string
0022++ 121D 12          	mov a, c
0023++ 121E FD 9B       	shr a		; divide by 2
0024++ 1220 39          	mov c, a	; C now counts the steps
0025++ 1221             _strrev_L0:
0026++ 1221 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1222 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1223 3E          	mov [d], al	; store left char into right side
0029++ 1224 1B          	mov al, bl
0030++ 1225 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1226 7E          	dec c
0032++ 1227 7F          	dec d
0033++ 1228 C2 00 00    	cmp c, 0
0034++ 122B C7 21 12    	jne _strrev_L0
0035++ 122E             _strrev_end:
0036++ 122E 4C          	popa
0037++ 122F 09          	ret
0038++ 1230             	
0039++ 1230             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1230             ; _strchr
0041++ 1230             ; search string in D for char in AL
0042++ 1230             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1230             _strchr:
0044++ 1230             _strchr_L0:
0045++ 1230 32          	mov bl, [d]
0046++ 1231 C1 00       	cmp bl, 0
0047++ 1233 C6 3E 12    	je _strchr_end
0048++ 1236 BA          	cmp al, bl
0049++ 1237 C6 3E 12    	je _strchr_end
0050++ 123A 79          	inc d
0051++ 123B 0A 30 12    	jmp _strchr_L0
0052++ 123E             _strchr_end:
0053++ 123E 1B          	mov al, bl
0054++ 123F 09          	ret
0055++ 1240             
0056++ 1240             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1240             ; _strstr
0058++ 1240             ; find sub-string
0059++ 1240             ; str1 in SI
0060++ 1240             ; str2 in DI
0061++ 1240             ; SI points to end of source string
0062++ 1240             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1240             _strstr:
0064++ 1240 DB          	push al
0065++ 1241 DA          	push d
0066++ 1242 E3          	push di
0067++ 1243             _strstr_loop:
0068++ 1243 F3          	cmpsb					; compare a byte of the strings
0069++ 1244 C7 4F 12    	jne _strstr_ret
0070++ 1247 FC 00 00    	lea d, [di + 0]
0071++ 124A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 124C C7 43 12    	jne _strstr_loop				; equal chars but not at end
0073++ 124F             _strstr_ret:
0074++ 124F F0          	pop di
0075++ 1250 E7          	pop d
0076++ 1251 E8          	pop al
0077++ 1252 09          	ret
0078++ 1253             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1253             ; length of null terminated string
0080++ 1253             ; result in C
0081++ 1253             ; pointer in D
0082++ 1253             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1253             _strlen:
0084++ 1253 DA          	push d
0085++ 1254 38 00 00    	mov c, 0
0086++ 1257             _strlen_L1:
0087++ 1257 BD 00       	cmp byte [d], 0
0088++ 1259 C6 61 12    	je _strlen_ret
0089++ 125C 79          	inc d
0090++ 125D 78          	inc c
0091++ 125E 0A 57 12    	jmp _strlen_L1
0092++ 1261             _strlen_ret:
0093++ 1261 E7          	pop d
0094++ 1262 09          	ret
0095++ 1263             
0096++ 1263             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1263             ; STRCMP
0098++ 1263             ; compare two strings
0099++ 1263             ; str1 in SI
0100++ 1263             ; str2 in DI
0101++ 1263             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1263             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1263             _strcmp:
0104++ 1263 DB          	push al
0105++ 1264 DA          	push d
0106++ 1265 E3          	push di
0107++ 1266 E2          	push si
0108++ 1267             _strcmp_loop:
0109++ 1267 F3          	cmpsb					; compare a byte of the strings
0110++ 1268 C7 73 12    	jne _strcmp_ret
0111++ 126B FB FF FF    	lea d, [si +- 1]
0112++ 126E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1270 C7 67 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 1273             _strcmp_ret:
0115++ 1273 EF          	pop si
0116++ 1274 F0          	pop di
0117++ 1275 E7          	pop d
0118++ 1276 E8          	pop al
0119++ 1277 09          	ret
0120++ 1278             
0121++ 1278             
0122++ 1278             ; STRCPY
0123++ 1278             ; copy null terminated string from SI to DI
0124++ 1278             ; source in SI
0125++ 1278             ; destination in DI
0126++ 1278             _strcpy:
0127++ 1278 E2          	push si
0128++ 1279 E3          	push di
0129++ 127A DB          	push al
0130++ 127B             _strcpy_L1:
0131++ 127B F6          	lodsb
0132++ 127C F7          	stosb
0133++ 127D B9 00       	cmp al, 0
0134++ 127F C7 7B 12    	jne _strcpy_L1
0135++ 1282             _strcpy_end:
0136++ 1282 E8          	pop al
0137++ 1283 F0          	pop di
0138++ 1284 EF          	pop si
0139++ 1285 09          	ret
0140++ 1286             
0141++ 1286             ; STRCAT
0142++ 1286             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1286             ; source in SI
0144++ 1286             ; destination in DI
0145++ 1286             _strcat:
0146++ 1286 E2          	push si
0147++ 1287 E3          	push di
0148++ 1288 D7          	push a
0149++ 1289 DA          	push d
0150++ 128A 50          	mov a, di
0151++ 128B 3C          	mov d, a
0152++ 128C             _strcat_goto_end_L1:
0153++ 128C BD 00       	cmp byte[d], 0
0154++ 128E C6 95 12    	je _strcat_start
0155++ 1291 79          	inc d
0156++ 1292 0A 8C 12    	jmp _strcat_goto_end_L1
0157++ 1295             _strcat_start:
0158++ 1295 FD 50       	mov di, d
0159++ 1297             _strcat_L1:
0160++ 1297 F6          	lodsb
0161++ 1298 F7          	stosb
0162++ 1299 B9 00       	cmp al, 0
0163++ 129B C7 97 12    	jne _strcat_L1
0164++ 129E             _strcat_end:
0165++ 129E E7          	pop d
0166++ 129F E4          	pop a
0167++ 12A0 F0          	pop di
0168++ 12A1 EF          	pop si
0169++ 12A2 09          	ret
0170++ 12A3             
0171++ 12A3             
0005+  12A3             
0006+  12A3             
0007+  12A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  12A3             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  12A3             ; ASCII in BL
0010+  12A3             ; result in AL
0011+  12A3             ; ascii for F = 0100 0110
0012+  12A3             ; ascii for 9 = 0011 1001
0013+  12A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  12A3             hex_ascii_encode:
0015+  12A3 1B            mov al, bl
0016+  12A4 93 40         test al, $40        ; test if letter or number
0017+  12A6 C7 AC 12      jnz hex_letter
0018+  12A9 87 0F         and al, $0F        ; get number
0019+  12AB 09            ret
0020+  12AC             hex_letter:
0021+  12AC 87 0F         and al, $0F        ; get letter
0022+  12AE 6A 09         add al, 9
0023+  12B0 09            ret
0024+  12B1             
0025+  12B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  12B1             ; ATOI
0027+  12B1             ; 2 letter hex string in B
0028+  12B1             ; 8bit integer returned in AL
0029+  12B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  12B1             _atoi:
0031+  12B1 D8            push b
0032+  12B2 07 A3 12      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  12B5 30            mov bl, bh
0034+  12B6 DB            push al          ; save a
0035+  12B7 07 A3 12      call hex_ascii_encode
0036+  12BA EA            pop bl  
0037+  12BB FD 9E 04      shl al, 4
0038+  12BE 8C            or al, bl
0039+  12BF E5            pop b
0040+  12C0 09            ret  
0041+  12C1             
0042+  12C1             
0043+  12C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  12C1             ; scanf
0045+  12C1             ; no need for explanations!
0046+  12C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  12C1             scanf:
0048+  12C1 09            ret
0049+  12C2             
0050+  12C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  12C2             ; ITOA
0052+  12C2             ; 8bit value in BL
0053+  12C2             ; 2 byte ASCII result in A
0054+  12C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  12C2             _itoa:
0056+  12C2 DA            push d
0057+  12C3 D8            push b
0058+  12C4 A7 00         mov bh, 0
0059+  12C6 FD A4 04      shr bl, 4  
0060+  12C9 74            mov d, b
0061+  12CA 1F 72 15      mov al, [d + s_hex_digits]
0062+  12CD 23            mov ah, al
0063+  12CE               
0064+  12CE E5            pop b
0065+  12CF D8            push b
0066+  12D0 A7 00         mov bh, 0
0067+  12D2 FD 87 0F      and bl, $0F
0068+  12D5 74            mov d, b
0069+  12D6 1F 72 15      mov al, [d + s_hex_digits]
0070+  12D9 E5            pop b
0071+  12DA E7            pop d
0072+  12DB 09            ret
0073+  12DC             
0074+  12DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  12DC             ; HEX STRING TO BINARY
0076+  12DC             ; di = destination address
0077+  12DC             ; si = source
0078+  12DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  12DC             _hex_to_int:
0080+  12DC             _hex_to_int_L1:
0081+  12DC F6            lodsb          ; load from [SI] to AL
0082+  12DD B9 00         cmp al, 0        ; check if ASCII 0
0083+  12DF C6 EC 12      jz _hex_to_int_ret
0084+  12E2 36            mov bh, al
0085+  12E3 F6            lodsb
0086+  12E4 2F            mov bl, al
0087+  12E5 07 B1 12      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  12E8 F7            stosb          ; store AL to [DI]
0089+  12E9 0A DC 12      jmp _hex_to_int_L1
0090+  12EC             _hex_to_int_ret:
0091+  12EC 09            ret    
0092+  12ED             
0093+  12ED             
0094+  12ED             
0095+  12ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  12ED             ; GETCHAR
0097+  12ED             ; char in ah
0098+  12ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  12ED             getch:
0100+  12ED DB            push al
0101+  12EE             getch_retry:
0102+  12EE 19 01         mov al, 1
0103+  12F0 05 03         syscall sys_io      ; receive in AH
0104+  12F2 E8            pop al
0105+  12F3 09            ret
0106+  12F4             
0107+  12F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  12F4             ; PUTCHAR
0109+  12F4             ; char in ah
0110+  12F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  12F4             _putchar:
0112+  12F4 D7            push a
0113+  12F5 19 00         mov al, 0
0114+  12F7 05 03         syscall sys_io      ; char in AH
0115+  12F9 E4            pop a
0116+  12FA 09            ret
0117+  12FB             
0118+  12FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  12FB             ;; INPUT A STRING
0120+  12FB             ;; terminates with null
0121+  12FB             ;; pointer in D
0122+  12FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  12FB             _gets:
0124+  12FB D7            push a
0125+  12FC DA            push d
0126+  12FD             _gets_loop:
0127+  12FD 19 01         mov al, 1
0128+  12FF 05 03         syscall sys_io      ; receive in AH
0129+  1301 B9 00         cmp al, 0        ; check error code (AL)
0130+  1303 C6 FD 12      je _gets_loop      ; if no char received, retry
0131+  1306             
0132+  1306 76 1B         cmp ah, 27
0133+  1308 C6 29 13      je _gets_ansi_esc
0134+  130B 76 0A         cmp ah, $0A        ; LF
0135+  130D C6 94 13      je _gets_end
0136+  1310 76 0D         cmp ah, $0D        ; CR
0137+  1312 C6 94 13      je _gets_end
0138+  1315 76 5C         cmp ah, $5C        ; '\\'
0139+  1317 C6 55 13      je _gets_escape
0140+  131A               
0141+  131A 76 08         cmp ah, $08      ; check for backspace
0142+  131C C6 25 13      je _gets_backspace
0143+  131F             
0144+  131F 1A            mov al, ah
0145+  1320 3E            mov [d], al
0146+  1321 79            inc d
0147+  1322 0A FD 12      jmp _gets_loop
0148+  1325             _gets_backspace:
0149+  1325 7F            dec d
0150+  1326 0A FD 12      jmp _gets_loop
0151+  1329             _gets_ansi_esc:
0152+  1329 19 01         mov al, 1
0153+  132B 05 03         syscall sys_io        ; receive in AH without echo
0154+  132D B9 00         cmp al, 0          ; check error code (AL)
0155+  132F C6 29 13      je _gets_ansi_esc    ; if no char received, retry
0156+  1332 76 5B         cmp ah, '['
0157+  1334 C7 FD 12      jne _gets_loop
0158+  1337             _gets_ansi_esc_2:
0159+  1337 19 01         mov al, 1
0160+  1339 05 03         syscall sys_io          ; receive in AH without echo
0161+  133B B9 00         cmp al, 0            ; check error code (AL)
0162+  133D C6 37 13      je _gets_ansi_esc_2  ; if no char received, retry
0163+  1340 76 44         cmp ah, 'D'
0164+  1342 C6 4D 13      je _gets_left_arrow
0165+  1345 76 43         cmp ah, 'C'
0166+  1347 C6 51 13      je _gets_right_arrow
0167+  134A 0A FD 12      jmp _gets_loop
0168+  134D             _gets_left_arrow:
0169+  134D 7F            dec d
0170+  134E 0A FD 12      jmp _gets_loop
0171+  1351             _gets_right_arrow:
0172+  1351 79            inc d
0173+  1352 0A FD 12      jmp _gets_loop
0174+  1355             _gets_escape:
0175+  1355 19 01         mov al, 1
0176+  1357 05 03         syscall sys_io      ; receive in AH
0177+  1359 B9 00         cmp al, 0        ; check error code (AL)
0178+  135B C6 55 13      je _gets_escape      ; if no char received, retry
0179+  135E 76 6E         cmp ah, 'n'
0180+  1360 C6 7F 13      je _gets_LF
0181+  1363 76 72         cmp ah, 'r'
0182+  1365 C6 86 13      je _gets_CR
0183+  1368 76 30         cmp ah, '0'
0184+  136A C6 8D 13      je _gets_NULL
0185+  136D 76 5C         cmp ah, $5C  ; '\'
0186+  136F C6 78 13      je _gets_slash
0187+  1372 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  1373 3E            mov [d], al
0189+  1374 79            inc d
0190+  1375 0A FD 12      jmp _gets_loop
0191+  1378             _gets_slash:
0192+  1378 19 5C         mov al, $5C
0193+  137A 3E            mov [d], al
0194+  137B 79            inc d
0195+  137C 0A FD 12      jmp _gets_loop
0196+  137F             _gets_LF:
0197+  137F 19 0A         mov al, $0A
0198+  1381 3E            mov [d], al
0199+  1382 79            inc d
0200+  1383 0A FD 12      jmp _gets_loop
0201+  1386             _gets_CR:
0202+  1386 19 0D         mov al, $0D
0203+  1388 3E            mov [d], al
0204+  1389 79            inc d
0205+  138A 0A FD 12      jmp _gets_loop
0206+  138D             _gets_NULL:
0207+  138D 19 00         mov al, $00
0208+  138F 3E            mov [d], al
0209+  1390 79            inc d
0210+  1391 0A FD 12      jmp _gets_loop
0211+  1394             _gets_end:
0212+  1394 19 00         mov al, 0
0213+  1396 3E            mov [d], al        ; terminate string
0214+  1397 E7            pop d
0215+  1398 E4            pop a
0216+  1399 09            ret
0217+  139A             
0218+  139A             
0219+  139A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  139A             ;; INPUT TEXT
0221+  139A             ;; terminated with CTRL+D
0222+  139A             ;; pointer in D
0223+  139A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  139A             _gettxt:
0225+  139A D7            push a
0226+  139B DA            push d
0227+  139C             _gettxt_loop:
0228+  139C 19 01         mov al, 1
0229+  139E 05 03         syscall sys_io      ; receive in AH
0230+  13A0 B9 00         cmp al, 0        ; check error code (AL)
0231+  13A2 C6 9C 13      je _gettxt_loop    ; if no char received, retry
0232+  13A5 76 04         cmp ah, 4      ; EOT
0233+  13A7 C6 E5 13      je _gettxt_end
0234+  13AA 76 08         cmp ah, $08      ; check for backspace
0235+  13AC C6 E1 13      je _gettxt_backspace
0236+  13AF 76 5C         cmp ah, $5C        ; '\'
0237+  13B1 C6 BA 13      je _gettxt_escape
0238+  13B4 1A            mov al, ah
0239+  13B5 3E            mov [d], al
0240+  13B6 79            inc d
0241+  13B7 0A 9C 13      jmp _gettxt_loop
0242+  13BA             _gettxt_escape:
0243+  13BA 19 01         mov al, 1
0244+  13BC 05 03         syscall sys_io      ; receive in AH
0245+  13BE B9 00         cmp al, 0        ; check error code (AL)
0246+  13C0 C6 BA 13      je _gettxt_escape    ; if no char received, retry
0247+  13C3 76 6E         cmp ah, 'n'
0248+  13C5 C6 D3 13      je _gettxt_LF
0249+  13C8 76 72         cmp ah, 'r'
0250+  13CA C6 DA 13      je _gettxt_CR
0251+  13CD 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  13CE 3E            mov [d], al
0253+  13CF 79            inc d
0254+  13D0 0A 9C 13      jmp _gettxt_loop
0255+  13D3             _gettxt_LF:
0256+  13D3 19 0A         mov al, $0A
0257+  13D5 3E            mov [d], al
0258+  13D6 79            inc d
0259+  13D7 0A 9C 13      jmp _gettxt_loop
0260+  13DA             _gettxt_CR:
0261+  13DA 19 0D         mov al, $0D
0262+  13DC 3E            mov [d], al
0263+  13DD 79            inc d
0264+  13DE 0A 9C 13      jmp _gettxt_loop
0265+  13E1             _gettxt_backspace:
0266+  13E1 7F            dec d
0267+  13E2 0A 9C 13      jmp _gettxt_loop
0268+  13E5             _gettxt_end:
0269+  13E5 19 00         mov al, 0
0270+  13E7 3E            mov [d], al        ; terminate string
0271+  13E8 E7            pop d
0272+  13E9 E4            pop a
0273+  13EA 09            ret
0274+  13EB             
0275+  13EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  13EB             ; PRINT NEW LINE
0277+  13EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  13EB             printnl:
0279+  13EB D7            push a
0280+  13EC 10 00 0A      mov a, $0A00
0281+  13EF 05 03         syscall sys_io
0282+  13F1 10 00 0D      mov a, $0D00
0283+  13F4 05 03         syscall sys_io
0284+  13F6 E4            pop a
0285+  13F7 09            ret
0286+  13F8             
0287+  13F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  13F8             ; _strtoint
0289+  13F8             ; 4 digit hex string number in d
0290+  13F8             ; integer returned in A
0291+  13F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  13F8             _strtointx:
0293+  13F8 D8            push b
0294+  13F9 32            mov bl, [d]
0295+  13FA 37            mov bh, bl
0296+  13FB 33 01 00      mov bl, [d + 1]
0297+  13FE 07 B1 12      call _atoi        ; convert to int in AL
0298+  1401 23            mov ah, al        ; move to AH
0299+  1402 33 02 00      mov bl, [d + 2]
0300+  1405 37            mov bh, bl
0301+  1406 33 03 00      mov bl, [d + 3]
0302+  1409 07 B1 12      call _atoi        ; convert to int in AL
0303+  140C E5            pop b
0304+  140D 09            ret
0305+  140E             
0306+  140E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  140E             ; _strtoint
0308+  140E             ; 5 digit base10 string number in d
0309+  140E             ; integer returned in A
0310+  140E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  140E             _strtoint:
0312+  140E E2            push si
0313+  140F D8            push b
0314+  1410 D9            push c
0315+  1411 DA            push d
0316+  1412 07 53 12      call _strlen      ; get string length in C
0317+  1415 7E            dec c
0318+  1416 FD 4E         mov si, d
0319+  1418 12            mov a, c
0320+  1419 FD 99         shl a
0321+  141B 3B 8A 15      mov d, table_power
0322+  141E 59            add d, a
0323+  141F 38 00 00      mov c, 0
0324+  1422             _strtoint_L0:
0325+  1422 F6            lodsb      ; load ASCII to al
0326+  1423 B9 00         cmp al, 0
0327+  1425 C6 38 14      je _strtoint_end
0328+  1428 6F 30         sub al, $30    ; make into integer
0329+  142A 22 00         mov ah, 0
0330+  142C 2A            mov b, [d]
0331+  142D AC            mul a, b      ; result in B since it fits in 16bits
0332+  142E 11            mov a, b
0333+  142F 28            mov b, c
0334+  1430 54            add a, b
0335+  1431 39            mov c, a
0336+  1432 63 02 00      sub d, 2
0337+  1435 0A 22 14      jmp _strtoint_L0
0338+  1438             _strtoint_end:
0339+  1438 12            mov a, c
0340+  1439 E7            pop d
0341+  143A E6            pop c
0342+  143B E5            pop b
0343+  143C EF            pop si
0344+  143D 09            ret
0345+  143E             
0346+  143E             
0347+  143E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  143E             ; PRINT NULL TERMINATED STRING
0349+  143E             ; pointer in D
0350+  143E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  143E             _puts:
0352+  143E D7            push a
0353+  143F DA            push d
0354+  1440             _puts_L1:
0355+  1440 1E            mov al, [d]
0356+  1441 B9 00         cmp al, 0
0357+  1443 C6 4F 14      jz _puts_END
0358+  1446 23            mov ah, al
0359+  1447 19 00         mov al, 0
0360+  1449 05 03         syscall sys_io
0361+  144B 79            inc d
0362+  144C 0A 40 14      jmp _puts_L1
0363+  144F             _puts_END:
0364+  144F E7            pop d
0365+  1450 E4            pop a
0366+  1451 09            ret
0367+  1452             
0368+  1452             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1452             ; PRINT N SIZE STRING
0370+  1452             ; pointer in D
0371+  1452             ; size in C
0372+  1452             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1452             _putsn:
0374+  1452 DB            push al
0375+  1453 DA            push d
0376+  1454 D9            push c
0377+  1455             _putsn_L0:
0378+  1455 1E            mov al, [d]
0379+  1456 23            mov ah, al
0380+  1457 19 00         mov al, 0
0381+  1459 05 03         syscall sys_io
0382+  145B 79            inc d
0383+  145C 7E            dec c  
0384+  145D C2 00 00      cmp c, 0
0385+  1460 C7 55 14      jne _putsn_L0
0386+  1463             _putsn_end:
0387+  1463 E6            pop c
0388+  1464 E7            pop d
0389+  1465 E8            pop al
0390+  1466 09            ret
0391+  1467             
0392+  1467             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  1467             ; print 16bit decimal number
0394+  1467             ; input number in A
0395+  1467             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  1467             print_u16d:
0397+  1467 D7            push a
0398+  1468 D8            push b
0399+  1469 26 10 27      mov b, 10000
0400+  146C AE            div a, b      ; get 10000's coeff.
0401+  146D 07 8F 14      call print_number
0402+  1470 11            mov a, b
0403+  1471 26 E8 03      mov b, 1000
0404+  1474 AE            div a, b      ; get 1000's coeff.
0405+  1475 07 8F 14      call print_number
0406+  1478 11            mov a, b
0407+  1479 26 64 00      mov b, 100
0408+  147C AE            div a, b
0409+  147D 07 8F 14      call print_number
0410+  1480 11            mov a, b
0411+  1481 26 0A 00      mov b, 10
0412+  1484 AE            div a, b
0413+  1485 07 8F 14      call print_number
0414+  1488 1B            mov al, bl      ; 1's coeff in bl
0415+  1489 07 8F 14      call print_number
0416+  148C E5            pop b
0417+  148D E4            pop a
0418+  148E 09            ret
0419+  148F             
0420+  148F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  148F             ; print AL
0422+  148F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  148F             print_number:
0424+  148F 6A 30         add al, $30
0425+  1491 23            mov ah, al
0426+  1492 07 F4 12      call _putchar
0427+  1495 09            ret
0428+  1496             
0429+  1496             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  1496             ; PRINT 16BIT HEX INTEGER
0431+  1496             ; integer value in reg B
0432+  1496             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  1496             print_u16x:
0434+  1496 D7            push a
0435+  1497 D8            push b
0436+  1498 DD            push bl
0437+  1499 30            mov bl, bh
0438+  149A 07 C2 12      call _itoa        ; convert bh to char in A
0439+  149D 2F            mov bl, al        ; save al
0440+  149E 19 00         mov al, 0
0441+  14A0 05 03         syscall sys_io        ; display AH
0442+  14A2 24            mov ah, bl        ; retrieve al
0443+  14A3 19 00         mov al, 0
0444+  14A5 05 03         syscall sys_io        ; display AL
0445+  14A7             
0446+  14A7 EA            pop bl
0447+  14A8 07 C2 12      call _itoa        ; convert bh to char in A
0448+  14AB 2F            mov bl, al        ; save al
0449+  14AC 19 00         mov al, 0
0450+  14AE 05 03         syscall sys_io        ; display AH
0451+  14B0 24            mov ah, bl        ; retrieve al
0452+  14B1 19 00         mov al, 0
0453+  14B3 05 03         syscall sys_io        ; display AL
0454+  14B5             
0455+  14B5 E5            pop b
0456+  14B6 E4            pop a
0457+  14B7 09            ret
0458+  14B8             
0459+  14B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  14B8             ; INPUT 16BIT HEX INTEGER
0461+  14B8             ; read 16bit integer into A
0462+  14B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  14B8             scan_u16x:
0464+  14B8 F8 10 00      enter 16
0465+  14BB D8            push b
0466+  14BC DA            push d
0467+  14BD             
0468+  14BD FA F1 FF      lea d, [bp + -15]
0469+  14C0 07 FB 12      call _gets        ; get number
0470+  14C3             
0471+  14C3 32            mov bl, [d]
0472+  14C4 37            mov bh, bl
0473+  14C5 33 01 00      mov bl, [d + 1]
0474+  14C8 07 B1 12      call _atoi        ; convert to int in AL
0475+  14CB 23            mov ah, al        ; move to AH
0476+  14CC             
0477+  14CC 33 02 00      mov bl, [d + 2]
0478+  14CF 37            mov bh, bl
0479+  14D0 33 03 00      mov bl, [d + 3]
0480+  14D3 07 B1 12      call _atoi        ; convert to int in AL
0481+  14D6             
0482+  14D6 E7            pop d
0483+  14D7 E5            pop b
0484+  14D8 F9            leave
0485+  14D9 09            ret
0486+  14DA             
0487+  14DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  14DA             ; PRINT 8bit HEX INTEGER
0489+  14DA             ; integer value in reg bl
0490+  14DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  14DA             print_u8x:
0492+  14DA D7            push a
0493+  14DB DD            push bl
0494+  14DC             
0495+  14DC 07 C2 12      call _itoa        ; convert bl to char in A
0496+  14DF 2F            mov bl, al        ; save al
0497+  14E0 19 00         mov al, 0
0498+  14E2 05 03         syscall sys_io        ; display AH
0499+  14E4 24            mov ah, bl        ; retrieve al
0500+  14E5 19 00         mov al, 0
0501+  14E7 05 03         syscall sys_io        ; display AL
0502+  14E9             
0503+  14E9 EA            pop bl
0504+  14EA E4            pop a
0505+  14EB 09            ret
0506+  14EC             
0507+  14EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  14EC             ; print 8bit decimal unsigned number
0509+  14EC             ; input number in AL
0510+  14EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  14EC             print_u8d:
0512+  14EC D7            push a
0513+  14ED D8            push b
0514+  14EE             
0515+  14EE 22 00         mov ah, 0
0516+  14F0 26 64 00      mov b, 100
0517+  14F3 AE            div a, b
0518+  14F4 D8            push b      ; save remainder
0519+  14F5 B9 00         cmp al, 0
0520+  14F7 C6 01 15      je skip100
0521+  14FA 6A 30         add al, $30
0522+  14FC 23            mov ah, al
0523+  14FD 19 00         mov al, 0
0524+  14FF 05 03         syscall sys_io  ; print coeff
0525+  1501             skip100:
0526+  1501 E4            pop a
0527+  1502 22 00         mov ah, 0
0528+  1504 26 0A 00      mov b, 10
0529+  1507 AE            div a, b
0530+  1508 D8            push b      ; save remainder
0531+  1509 B9 00         cmp al, 0
0532+  150B C6 15 15      je skip10
0533+  150E 6A 30         add al, $30
0534+  1510 23            mov ah, al
0535+  1511 19 00         mov al, 0
0536+  1513 05 03         syscall sys_io  ; print coeff
0537+  1515             skip10:
0538+  1515 E4            pop a
0539+  1516 1B            mov al, bl
0540+  1517 6A 30         add al, $30
0541+  1519 23            mov ah, al
0542+  151A 19 00         mov al, 0
0543+  151C 05 03         syscall sys_io  ; print coeff
0544+  151E E5            pop b
0545+  151F E4            pop a
0546+  1520 09            ret
0547+  1521             
0548+  1521             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  1521             ; INPUT 8BIT HEX INTEGER
0550+  1521             ; read 8bit integer into AL
0551+  1521             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  1521             scan_u8x:
0553+  1521 F8 04 00      enter 4
0554+  1524 D8            push b
0555+  1525 DA            push d
0556+  1526             
0557+  1526 FA FD FF      lea d, [bp + -3]
0558+  1529 07 FB 12      call _gets        ; get number
0559+  152C             
0560+  152C 32            mov bl, [d]
0561+  152D 37            mov bh, bl
0562+  152E 33 01 00      mov bl, [d + 1]
0563+  1531 07 B1 12      call _atoi        ; convert to int in AL
0564+  1534             
0565+  1534 E7            pop d
0566+  1535 E5            pop b
0567+  1536 F9            leave
0568+  1537 09            ret
0569+  1538             
0570+  1538             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  1538             ; input decimal number
0572+  1538             ; result in A
0573+  1538             ; 655'\0'
0574+  1538             ; low--------high
0575+  1538             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  1538             scan_u16d:
0577+  1538 F8 08 00      enter 8
0578+  153B E2            push si
0579+  153C D8            push b
0580+  153D D9            push c
0581+  153E DA            push d
0582+  153F FA F9 FF      lea d, [bp +- 7]
0583+  1542 07 FB 12      call _gets
0584+  1545 07 53 12      call _strlen      ; get string length in C
0585+  1548 7E            dec c
0586+  1549 FD 4E         mov si, d
0587+  154B 12            mov a, c
0588+  154C FD 99         shl a
0589+  154E 3B 8A 15      mov d, table_power
0590+  1551 59            add d, a
0591+  1552 38 00 00      mov c, 0
0592+  1555             mul_loop:
0593+  1555 F6            lodsb      ; load ASCII to al
0594+  1556 B9 00         cmp al, 0
0595+  1558 C6 6B 15      je mul_exit
0596+  155B 6F 30         sub al, $30    ; make into integer
0597+  155D 22 00         mov ah, 0
0598+  155F 2A            mov b, [d]
0599+  1560 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1561 11            mov a, b
0601+  1562 28            mov b, c
0602+  1563 54            add a, b
0603+  1564 39            mov c, a
0604+  1565 63 02 00      sub d, 2
0605+  1568 0A 55 15      jmp mul_loop
0606+  156B             mul_exit:
0607+  156B 12            mov a, c
0608+  156C E7            pop d
0609+  156D E6            pop c
0610+  156E E5            pop b
0611+  156F EF            pop si
0612+  1570 F9            leave
0613+  1571 09            ret
0614+  1572             
0615+  1572             
0616+  1572 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  1576 34 35 36 37 
0616+  157A 38 39 41 42 
0616+  157E 43 44 45 46 
0617+  1582 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  1586 1B 5B 48 00 
0618+  158A             
0619+  158A             table_power:
0620+  158A 01 00         .dw 1
0621+  158C 0A 00         .dw 10
0622+  158E 64 00         .dw 100
0623+  1590 E8 03         .dw 1000
0624+  1592 10 27         .dw 100002521   1594             ; --- END INLINE ASM BLOCK
2522   1594             
2523   1594 F9            leave
2524   1595 09            ret
2525   1596             
2526   1596             savefile:
2527   1596 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2528   1599 F9            leave
2529   159A 09            ret
2530   159B             
2531   159B             fprintf:
2532   159B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2533   159E F9            leave
2534   159F 09            ret
2535   15A0             
2536   15A0             initialise:
2537   15A0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2538   15A3 F9            leave
2539   15A4 09            ret
2540   15A5             
2541   15A5             getopt:
2542   15A5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2543   15A8 F9            leave
2544   15A9 09            ret
2545   15AA             ; --- END TEXT BLOCK
2546   15AA             
2547   15AA             ; --- BEGIN DATA BLOCK
2548   15AA 00 00 00 00 _game_data: .fill 4, 0
2549   15AE 00          _save_data: .fill 1, 0
2550   15AF 64 3A 6C 3A __s0: .db "d:l:s:t:v:o:", 0
2550   15B3 73 3A 74 3A 
2550   15B7 76 3A 6F 3A 
2550   15BB 00 
2551   15BC 55 73 61 67 __s1: .db "Usage: %s [-d numdie] [-s numsaves] [-v version] -o savefilename \n", 0
2551   15C0 65 3A 20 25 
2551   15C4 73 20 5B 2D 
2551   15C8 64 20 6E 75 
2551   15CC 6D 64 69 65 
2551   15D0 5D 20 5B 2D 
2551   15D4 73 20 6E 75 
2551   15D8 6D 73 61 76 
2551   15DC 65 73 5D 20 
2551   15E0 5B 2D 76 20 
2551   15E4 76 65 72 73 
2551   15E8 69 6F 6E 5D 
2551   15EC 20 2D 6F 20 
2551   15F0 73 61 76 65 
2551   15F4 66 69 6C 65 
2551   15F8 6E 61 6D 65 
2551   15FC 20 0A 00 
2552   15FF 63 68 65 61 __s2: .db "cheat: game.numdie = %d\n", 0
2552   1603 74 3A 20 67 
2552   1607 61 6D 65 2E 
2552   160B 6E 75 6D 64 
2552   160F 69 65 20 3D 
2552   1613 20 25 64 0A 
2552   1617 00 
2553   1618 63 68 65 61 __s3: .db "cheat: game.limit = %d\n", 0
2553   161C 74 3A 20 67 
2553   1620 61 6D 65 2E 
2553   1624 6C 69 6D 69 
2553   1628 74 20 3D 20 
2553   162C 25 64 0A 00 
2554   1630 63 68 65 61 __s4: .db "cheat: game.saved = %d\n", 0
2554   1634 74 3A 20 67 
2554   1638 61 6D 65 2E 
2554   163C 73 61 76 65 
2554   1640 64 20 3D 20 
2554   1644 25 64 0A 00 
2555   1648 63 68 65 61 __s5: .db "cheat: game.turns = %d\n", 0
2555   164C 74 3A 20 67 
2555   1650 61 6D 65 2E 
2555   1654 74 75 72 6E 
2555   1658 73 20 3D 20 
2555   165C 25 64 0A 00 
2556   1660 63 68 65 61 __s6: .db "cheat: version = %d\n", 0
2556   1664 74 3A 20 76 
2556   1668 65 72 73 69 
2556   166C 6F 6E 20 3D 
2556   1670 20 25 64 0A 
2556   1674 00 
2557   1675 45 52 52 4F __s7: .db "ERROR: filename required\n", 0
2557   1679 52 3A 20 66 
2557   167D 69 6C 65 6E 
2557   1681 61 6D 65 20 
2557   1685 72 65 71 75 
2557   1689 69 72 65 64 
2557   168D 0A 00 
2558   168F 43 61 6E 27 __s8: .db "Can't open file %s. Exiting.\n", 0
2558   1693 74 20 6F 70 
2558   1697 65 6E 20 66 
2558   169B 69 6C 65 20 
2558   169F 25 73 2E 20 
2558   16A3 45 78 69 74 
2558   16A7 69 6E 67 2E 
2558   16AB 0A 
2559   16AC 63 68 65 61 __s9: .db "cheat: %s created.\n", 0
2559   16B0 74 3A 20 25 
2559   16B4 73 20 63 72 
2559   16B8 65 61 74 65 
2559   16BC 64 2E 0A 00 
2560   16C0 55 6E 6B 6E __s10: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
2560   16C4 6F 77 6E 20 
2560   16C8 74 79 70 65 
2560   16CC 20 73 69 7A 
2560   16D0 65 20 69 6E 
2560   16D4 20 76 61 5F 
2560   16D8 61 72 67 28 
2560   16DC 29 20 63 61 
2560   16E0 6C 6C 2E 20 
2560   16E4 53 69 7A 65 
2560   16E8 20 6E 65 65 
2560   16EC 64 73 20 74 
2560   16F0 6F 20 62 65 
2560   16F4 20 65 69 74 
2560   16F8 68 65 72 20 
2560   16FC 31 20 6F 72 
2560   1700 20 32 2E 00 
2561   1704 45 72 72 6F __s11: .db "Error: Unknown argument type.\n", 0
2561   1708 72 3A 20 55 
2561   170C 6E 6B 6E 6F 
2561   1710 77 6E 20 61 
2561   1714 72 67 75 6D 
2561   1718 65 6E 74 20 
2561   171C 74 79 70 65 
2561   1720 2E 0A 00 
2562   1723 1B 5B 32 4A __s12: .db "\033[2J\033[H", 0
2562   1727 1B 5B 48 00 
2563   172B             
2564   172B 2D 17       _heap_top: .dw _heap
2565   172D 00          _heap: .db 0
2566   172E             ; --- END DATA BLOCK
2567   172E             
2568   172E             .end
tasm: Number of errors = 0
