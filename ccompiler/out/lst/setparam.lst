0001   0000             ; --- FILENAME: ../solarium/usr/bin/setparam
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; prog = 0; 
0011   0408 3B 72 24      mov d, _prog ; $prog         
0012   040B 26 00 00      mov b, $0        
0013   040E FD 43         mov [d], b
0014   0410             ;; get(); 
0015   0410 07 4F 15      call get
0016   0413             ;; address = atoi(token); 
0017   0413 3B 74 26      mov d, _address ; $address
0018   0416 DA            push d
0019   0417 26 74 24      mov b, _token_data ; $token           
0020   041A FD AB         swp b
0021   041C D8            push b
0022   041D 07 3F 0C      call atoi
0023   0420 51 02 00      add sp, 2
0024   0423 E7            pop d
0025   0424 FD 43         mov [d], b
0026   0426             ;; get(); 
0027   0426 07 4F 15      call get
0028   0429             ;; data = atoi(token); 
0029   0429 3B 76 26      mov d, _data ; $data
0030   042C DA            push d
0031   042D 26 74 24      mov b, _token_data ; $token           
0032   0430 FD AB         swp b
0033   0432 D8            push b
0034   0433 07 3F 0C      call atoi
0035   0436 51 02 00      add sp, 2
0036   0439 E7            pop d
0037   043A FD 3E         mov [d], bl
0038   043C             
0039   043C             ; --- BEGIN INLINE ASM BLOCK
0040   043C 19 02         mov al, 2     
0041   043E 3B 74 26      mov d, _address
0042   0441 FD 2A         mov d, [d]
0043   0443 31 76 26      mov bl, [_data]
0044   0446 05 0C         syscall sys_system
0045   0448             ; --- END INLINE ASM BLOCK
0046   0448             
0047   0448 05 0B         syscall sys_terminate_proc
0048   044A             
0049   044A             include_ctype_lib:
0050   044A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0051   044D             
0052   044D             ; --- BEGIN INLINE ASM BLOCK
0053   044D             .include "lib/ctype.asm"
0001+  044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  044D             ; ctype.s
0003+  044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  044D             
0005+  044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  044D             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  044D             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  044D             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  044D             ;; characters are supported.
0010+  044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  044D             ;; _isalnum 
0012+  044D             ;; _isalpha 
0013+  044D             ;; islower 
0014+  044D             ;; isupper 
0015+  044D             ;; _isdigit 
0016+  044D             ;; isxdigit
0017+  044D             ;; iscntrl 
0018+  044D             ;; isgraph 
0019+  044D             ;; _isspace 
0020+  044D             ;; isblank 
0021+  044D             ;; isprint 
0022+  044D             ;; ispunct 
0023+  044D             ;; tolower 
0024+  044D             ;; toupper
0025+  044D             
0026+  044D             
0027+  044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  044D             ;; IS ALPHANUMERIC
0029+  044D             ;; sets ZF according with result
0030+  044D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  044D             _isalnum:
0032+  044D 07 6A 04    	call _isalpha
0033+  0450 C6 56 04    	je _isalnum_exit
0034+  0453 07 57 04    	call _isdigit
0035+  0456             _isalnum_exit:
0036+  0456 09          	ret	
0037+  0457             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0457             ;; IS DIGIT
0039+  0457             ;; sets ZF according with result
0040+  0457             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0457             _isdigit:
0042+  0457 DB          	push al
0043+  0458 B9 30       	cmp al, '0'
0044+  045A C8 66 04    	jlu _isdigit_false
0045+  045D B9 39       	cmp al, '9'
0046+  045F D1 66 04    	jgu _isdigit_false
0047+  0462 87 00       	and al, 0	; set ZF
0048+  0464 E8          	pop al
0049+  0465 09          	ret
0050+  0466             _isdigit_false:
0051+  0466 8B 01       	or al, 1	; clear ZF
0052+  0468 E8          	pop al
0053+  0469 09          	ret	
0054+  046A             	
0055+  046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  046A             ;; IS ALPHA
0057+  046A             ;; sets ZF according with result
0058+  046A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  046A             _isalpha:
0060+  046A DB          	push al
0061+  046B B9 5F       	cmp al, '_'
0062+  046D C6 8D 04    	je _isalpha_true
0063+  0470 B9 2E       	cmp al, '.'
0064+  0472 C6 8D 04    	je _isalpha_true
0065+  0475 B9 41       	cmp al, 'A'
0066+  0477 C8 89 04    	jlu _isalpha_false
0067+  047A B9 7A       	cmp al, 'z'
0068+  047C D1 89 04    	jgu _isalpha_false
0069+  047F B9 5A       	cmp al, 'Z'
0070+  0481 D0 8D 04    	jleu _isalpha_true
0071+  0484 B9 61       	cmp al, 'a'
0072+  0486 C9 8D 04    	jgeu _isalpha_true
0073+  0489             _isalpha_false:
0074+  0489 8B 01       	or al, 1	; clear ZF
0075+  048B E8          	pop al
0076+  048C 09          	ret
0077+  048D             _isalpha_true:
0078+  048D 87 00       	and al, 0	; set ZF
0079+  048F E8          	pop al
0080+  0490 09          	ret
0081+  0491             
0082+  0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  0491             ;; IS PATH-ALPHA
0084+  0491             ;; sets ZF according with result
0085+  0491             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  0491             ispath:
0087+  0491 DB          	push al
0088+  0492 07 57 04    	call _isdigit
0089+  0495 C6 BF 04    	je ispath_true
0090+  0498 B9 5F       	cmp al, '_'
0091+  049A C6 BF 04    	je ispath_true
0092+  049D B9 2F       	cmp al, '/'
0093+  049F C6 BF 04    	je ispath_true
0094+  04A2 B9 2E       	cmp al, '.'
0095+  04A4 C6 BF 04    	je ispath_true
0096+  04A7 B9 41       	cmp al, 'A'
0097+  04A9 C8 BB 04    	jlu ispath_false
0098+  04AC B9 7A       	cmp al, 'z'
0099+  04AE D1 BB 04    	jgu ispath_false
0100+  04B1 B9 5A       	cmp al, 'Z'
0101+  04B3 D0 BF 04    	jleu ispath_true
0102+  04B6 B9 61       	cmp al, 'a'
0103+  04B8 C9 BF 04    	jgeu ispath_true
0104+  04BB             ispath_false:
0105+  04BB 8B 01       	or al, 1	; clear ZF
0106+  04BD E8          	pop al
0107+  04BE 09          	ret
0108+  04BF             ispath_true:
0109+  04BF 87 00       	and al, 0	; set ZF
0110+  04C1 E8          	pop al
0111+  04C2 09          	ret
0112+  04C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  04C3             ;; IS SPACE
0114+  04C3             ;; sets ZF according with result
0115+  04C3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  04C3             _isspace:
0117+  04C3 B9 20       	cmp al, $20		; ' '
0118+  04C5 C6 D9 04    	je _isspace_exit
0119+  04C8 B9 09       	cmp al, $09		; '\t'
0120+  04CA C6 D9 04    	je _isspace_exit
0121+  04CD B9 0A       	cmp al, $0A		; '\n'
0122+  04CF C6 D9 04    	je _isspace_exit
0123+  04D2 B9 0D       	cmp al, $0D		; '\r'
0124+  04D4 C6 D9 04    	je _isspace_exit
0125+  04D7 B9 0B       	cmp al, $0B		; '\v'
0126+  04D9             _isspace_exit:
0127+  04D9 09          	ret	
0128+  04DA             
0129+  04DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  04DA             ; TO LOWER
0131+  04DA             ; input in AL
0132+  04DA             ; output in AL
0133+  04DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  04DA             _to_lower:
0135+  04DA B9 5A       	cmp al, 'Z'
0136+  04DC D1 E1 04    	jgu _to_lower_ret
0137+  04DF 6A 20       	add al, $20				; convert to lower case
0138+  04E1             _to_lower_ret:
0139+  04E1 09          	ret
0140+  04E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  04E2             ; TO UPPER
0142+  04E2             ; input in AL
0143+  04E2             ; output in AL
0144+  04E2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  04E2             _to_upper:
0146+  04E2 B9 61       	cmp al, 'a'
0147+  04E4 C8 E9 04    	jlu _to_upper_ret
0148+  04E7 6F 20       	sub al, $20			; convert to upper case
0149+  04E9             _to_upper_ret:
0150+  04E9 09          	ret
0151+  04EA             
0054   04EA             ; --- END INLINE ASM BLOCK
0055   04EA             
0056   04EA F9            leave
0057   04EB 09            ret
0058   04EC             
0059   04EC             is_space:
0060   04EC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0061   04EF             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0062   04EF 34 05 00      mov bl, [bp + 5] ; $c
0063   04F2 A7 00         mov bh, 0             
0064   04F4             ; START RELATIONAL
0065   04F4 D7            push a
0066   04F5 11            mov a, b
0067   04F6 26 20 00      mov b, $20
0068   04F9 B0            cmp a, b
0069   04FA FD 71         seq ; ==
0070   04FC E4            pop a
0071   04FD             ; END RELATIONAL
0072   04FD D7            push a
0073   04FE 11            mov a, b
0074   04FF 34 05 00      mov bl, [bp + 5] ; $c
0075   0502 A7 00         mov bh, 0             
0076   0504             ; START RELATIONAL
0077   0504 D7            push a
0078   0505 11            mov a, b
0079   0506 26 09 00      mov b, $9
0080   0509 B0            cmp a, b
0081   050A FD 71         seq ; ==
0082   050C E4            pop a
0083   050D             ; END RELATIONAL
0084   050D FD A8         sor a, b ; ||
0085   050F 11            mov a, b
0086   0510 34 05 00      mov bl, [bp + 5] ; $c
0087   0513 A7 00         mov bh, 0             
0088   0515             ; START RELATIONAL
0089   0515 D7            push a
0090   0516 11            mov a, b
0091   0517 26 0A 00      mov b, $a
0092   051A B0            cmp a, b
0093   051B FD 71         seq ; ==
0094   051D E4            pop a
0095   051E             ; END RELATIONAL
0096   051E FD A8         sor a, b ; ||
0097   0520 11            mov a, b
0098   0521 34 05 00      mov bl, [bp + 5] ; $c
0099   0524 A7 00         mov bh, 0             
0100   0526             ; START RELATIONAL
0101   0526 D7            push a
0102   0527 11            mov a, b
0103   0528 26 0D 00      mov b, $d
0104   052B B0            cmp a, b
0105   052C FD 71         seq ; ==
0106   052E E4            pop a
0107   052F             ; END RELATIONAL
0108   052F FD A8         sor a, b ; ||
0109   0531 E4            pop a
0110   0532 F9            leave
0111   0533 09            ret
0112   0534             
0113   0534             is_digit:
0114   0534 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0115   0537             ;; return c >= '0' && c <= '9'; 
0116   0537 34 05 00      mov bl, [bp + 5] ; $c
0117   053A A7 00         mov bh, 0             
0118   053C             ; START RELATIONAL
0119   053C D7            push a
0120   053D 11            mov a, b
0121   053E 26 30 00      mov b, $30
0122   0541 B0            cmp a, b
0123   0542 FD 80         sge ; >=
0124   0544 E4            pop a
0125   0545             ; END RELATIONAL
0126   0545 D7            push a
0127   0546 11            mov a, b
0128   0547 34 05 00      mov bl, [bp + 5] ; $c
0129   054A A7 00         mov bh, 0             
0130   054C             ; START RELATIONAL
0131   054C D7            push a
0132   054D 11            mov a, b
0133   054E 26 39 00      mov b, $39
0134   0551 B0            cmp a, b
0135   0552 FD 74         sle ; <=
0136   0554 E4            pop a
0137   0555             ; END RELATIONAL
0138   0555 FD A7         sand a, b ; &&
0139   0557 E4            pop a
0140   0558 F9            leave
0141   0559 09            ret
0142   055A             
0143   055A             is_alpha:
0144   055A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0145   055D             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
0146   055D 34 05 00      mov bl, [bp + 5] ; $c
0147   0560 A7 00         mov bh, 0             
0148   0562             ; START RELATIONAL
0149   0562 D7            push a
0150   0563 11            mov a, b
0151   0564 26 61 00      mov b, $61
0152   0567 B0            cmp a, b
0153   0568 FD 80         sge ; >=
0154   056A E4            pop a
0155   056B             ; END RELATIONAL
0156   056B D7            push a
0157   056C 11            mov a, b
0158   056D 34 05 00      mov bl, [bp + 5] ; $c
0159   0570 A7 00         mov bh, 0             
0160   0572             ; START RELATIONAL
0161   0572 D7            push a
0162   0573 11            mov a, b
0163   0574 26 7A 00      mov b, $7a
0164   0577 B0            cmp a, b
0165   0578 FD 74         sle ; <=
0166   057A E4            pop a
0167   057B             ; END RELATIONAL
0168   057B FD A7         sand a, b ; &&
0169   057D E4            pop a
0170   057E D7            push a
0171   057F 11            mov a, b
0172   0580 34 05 00      mov bl, [bp + 5] ; $c
0173   0583 A7 00         mov bh, 0             
0174   0585             ; START RELATIONAL
0175   0585 D7            push a
0176   0586 11            mov a, b
0177   0587 26 41 00      mov b, $41
0178   058A B0            cmp a, b
0179   058B FD 80         sge ; >=
0180   058D E4            pop a
0181   058E             ; END RELATIONAL
0182   058E D7            push a
0183   058F 11            mov a, b
0184   0590 34 05 00      mov bl, [bp + 5] ; $c
0185   0593 A7 00         mov bh, 0             
0186   0595             ; START RELATIONAL
0187   0595 D7            push a
0188   0596 11            mov a, b
0189   0597 26 5A 00      mov b, $5a
0190   059A B0            cmp a, b
0191   059B FD 74         sle ; <=
0192   059D E4            pop a
0193   059E             ; END RELATIONAL
0194   059E FD A7         sand a, b ; &&
0195   05A0 E4            pop a
0196   05A1 FD A8         sor a, b ; ||
0197   05A3 11            mov a, b
0198   05A4 34 05 00      mov bl, [bp + 5] ; $c
0199   05A7 A7 00         mov bh, 0             
0200   05A9             ; START RELATIONAL
0201   05A9 D7            push a
0202   05AA 11            mov a, b
0203   05AB 26 5F 00      mov b, $5f
0204   05AE B0            cmp a, b
0205   05AF FD 71         seq ; ==
0206   05B1 E4            pop a
0207   05B2             ; END RELATIONAL
0208   05B2 FD A8         sor a, b ; ||
0209   05B4 E4            pop a
0210   05B5 F9            leave
0211   05B6 09            ret
0212   05B7             
0213   05B7             is_delimiter:
0214   05B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0215   05BA             ;; if( 
0216   05BA             _if1_cond:
0217   05BA 34 05 00      mov bl, [bp + 5] ; $c
0218   05BD A7 00         mov bh, 0             
0219   05BF             ; START RELATIONAL
0220   05BF D7            push a
0221   05C0 11            mov a, b
0222   05C1 26 40 00      mov b, $40
0223   05C4 B0            cmp a, b
0224   05C5 FD 71         seq ; ==
0225   05C7 E4            pop a
0226   05C8             ; END RELATIONAL
0227   05C8 D7            push a
0228   05C9 11            mov a, b
0229   05CA 34 05 00      mov bl, [bp + 5] ; $c
0230   05CD A7 00         mov bh, 0             
0231   05CF             ; START RELATIONAL
0232   05CF D7            push a
0233   05D0 11            mov a, b
0234   05D1 26 23 00      mov b, $23
0235   05D4 B0            cmp a, b
0236   05D5 FD 71         seq ; ==
0237   05D7 E4            pop a
0238   05D8             ; END RELATIONAL
0239   05D8 FD A8         sor a, b ; ||
0240   05DA 11            mov a, b
0241   05DB 34 05 00      mov bl, [bp + 5] ; $c
0242   05DE A7 00         mov bh, 0             
0243   05E0             ; START RELATIONAL
0244   05E0 D7            push a
0245   05E1 11            mov a, b
0246   05E2 26 24 00      mov b, $24
0247   05E5 B0            cmp a, b
0248   05E6 FD 71         seq ; ==
0249   05E8 E4            pop a
0250   05E9             ; END RELATIONAL
0251   05E9 FD A8         sor a, b ; ||
0252   05EB 11            mov a, b
0253   05EC 34 05 00      mov bl, [bp + 5] ; $c
0254   05EF A7 00         mov bh, 0             
0255   05F1             ; START RELATIONAL
0256   05F1 D7            push a
0257   05F2 11            mov a, b
0258   05F3 26 2B 00      mov b, $2b
0259   05F6 B0            cmp a, b
0260   05F7 FD 71         seq ; ==
0261   05F9 E4            pop a
0262   05FA             ; END RELATIONAL
0263   05FA FD A8         sor a, b ; ||
0264   05FC 11            mov a, b
0265   05FD 34 05 00      mov bl, [bp + 5] ; $c
0266   0600 A7 00         mov bh, 0             
0267   0602             ; START RELATIONAL
0268   0602 D7            push a
0269   0603 11            mov a, b
0270   0604 26 2D 00      mov b, $2d
0271   0607 B0            cmp a, b
0272   0608 FD 71         seq ; ==
0273   060A E4            pop a
0274   060B             ; END RELATIONAL
0275   060B FD A8         sor a, b ; ||
0276   060D 11            mov a, b
0277   060E 34 05 00      mov bl, [bp + 5] ; $c
0278   0611 A7 00         mov bh, 0             
0279   0613             ; START RELATIONAL
0280   0613 D7            push a
0281   0614 11            mov a, b
0282   0615 26 2A 00      mov b, $2a
0283   0618 B0            cmp a, b
0284   0619 FD 71         seq ; ==
0285   061B E4            pop a
0286   061C             ; END RELATIONAL
0287   061C FD A8         sor a, b ; ||
0288   061E 11            mov a, b
0289   061F 34 05 00      mov bl, [bp + 5] ; $c
0290   0622 A7 00         mov bh, 0             
0291   0624             ; START RELATIONAL
0292   0624 D7            push a
0293   0625 11            mov a, b
0294   0626 26 2F 00      mov b, $2f
0295   0629 B0            cmp a, b
0296   062A FD 71         seq ; ==
0297   062C E4            pop a
0298   062D             ; END RELATIONAL
0299   062D FD A8         sor a, b ; ||
0300   062F 11            mov a, b
0301   0630 34 05 00      mov bl, [bp + 5] ; $c
0302   0633 A7 00         mov bh, 0             
0303   0635             ; START RELATIONAL
0304   0635 D7            push a
0305   0636 11            mov a, b
0306   0637 26 25 00      mov b, $25
0307   063A B0            cmp a, b
0308   063B FD 71         seq ; ==
0309   063D E4            pop a
0310   063E             ; END RELATIONAL
0311   063E FD A8         sor a, b ; ||
0312   0640 11            mov a, b
0313   0641 34 05 00      mov bl, [bp + 5] ; $c
0314   0644 A7 00         mov bh, 0             
0315   0646             ; START RELATIONAL
0316   0646 D7            push a
0317   0647 11            mov a, b
0318   0648 26 5B 00      mov b, $5b
0319   064B B0            cmp a, b
0320   064C FD 71         seq ; ==
0321   064E E4            pop a
0322   064F             ; END RELATIONAL
0323   064F FD A8         sor a, b ; ||
0324   0651 11            mov a, b
0325   0652 34 05 00      mov bl, [bp + 5] ; $c
0326   0655 A7 00         mov bh, 0             
0327   0657             ; START RELATIONAL
0328   0657 D7            push a
0329   0658 11            mov a, b
0330   0659 26 5D 00      mov b, $5d
0331   065C B0            cmp a, b
0332   065D FD 71         seq ; ==
0333   065F E4            pop a
0334   0660             ; END RELATIONAL
0335   0660 FD A8         sor a, b ; ||
0336   0662 11            mov a, b
0337   0663 34 05 00      mov bl, [bp + 5] ; $c
0338   0666 A7 00         mov bh, 0             
0339   0668             ; START RELATIONAL
0340   0668 D7            push a
0341   0669 11            mov a, b
0342   066A 26 28 00      mov b, $28
0343   066D B0            cmp a, b
0344   066E FD 71         seq ; ==
0345   0670 E4            pop a
0346   0671             ; END RELATIONAL
0347   0671 FD A8         sor a, b ; ||
0348   0673 11            mov a, b
0349   0674 34 05 00      mov bl, [bp + 5] ; $c
0350   0677 A7 00         mov bh, 0             
0351   0679             ; START RELATIONAL
0352   0679 D7            push a
0353   067A 11            mov a, b
0354   067B 26 29 00      mov b, $29
0355   067E B0            cmp a, b
0356   067F FD 71         seq ; ==
0357   0681 E4            pop a
0358   0682             ; END RELATIONAL
0359   0682 FD A8         sor a, b ; ||
0360   0684 11            mov a, b
0361   0685 34 05 00      mov bl, [bp + 5] ; $c
0362   0688 A7 00         mov bh, 0             
0363   068A             ; START RELATIONAL
0364   068A D7            push a
0365   068B 11            mov a, b
0366   068C 26 7B 00      mov b, $7b
0367   068F B0            cmp a, b
0368   0690 FD 71         seq ; ==
0369   0692 E4            pop a
0370   0693             ; END RELATIONAL
0371   0693 FD A8         sor a, b ; ||
0372   0695 11            mov a, b
0373   0696 34 05 00      mov bl, [bp + 5] ; $c
0374   0699 A7 00         mov bh, 0             
0375   069B             ; START RELATIONAL
0376   069B D7            push a
0377   069C 11            mov a, b
0378   069D 26 7D 00      mov b, $7d
0379   06A0 B0            cmp a, b
0380   06A1 FD 71         seq ; ==
0381   06A3 E4            pop a
0382   06A4             ; END RELATIONAL
0383   06A4 FD A8         sor a, b ; ||
0384   06A6 11            mov a, b
0385   06A7 34 05 00      mov bl, [bp + 5] ; $c
0386   06AA A7 00         mov bh, 0             
0387   06AC             ; START RELATIONAL
0388   06AC D7            push a
0389   06AD 11            mov a, b
0390   06AE 26 3A 00      mov b, $3a
0391   06B1 B0            cmp a, b
0392   06B2 FD 71         seq ; ==
0393   06B4 E4            pop a
0394   06B5             ; END RELATIONAL
0395   06B5 FD A8         sor a, b ; ||
0396   06B7 11            mov a, b
0397   06B8 34 05 00      mov bl, [bp + 5] ; $c
0398   06BB A7 00         mov bh, 0             
0399   06BD             ; START RELATIONAL
0400   06BD D7            push a
0401   06BE 11            mov a, b
0402   06BF 26 3B 00      mov b, $3b
0403   06C2 B0            cmp a, b
0404   06C3 FD 71         seq ; ==
0405   06C5 E4            pop a
0406   06C6             ; END RELATIONAL
0407   06C6 FD A8         sor a, b ; ||
0408   06C8 11            mov a, b
0409   06C9 34 05 00      mov bl, [bp + 5] ; $c
0410   06CC A7 00         mov bh, 0             
0411   06CE             ; START RELATIONAL
0412   06CE D7            push a
0413   06CF 11            mov a, b
0414   06D0 26 3C 00      mov b, $3c
0415   06D3 B0            cmp a, b
0416   06D4 FD 71         seq ; ==
0417   06D6 E4            pop a
0418   06D7             ; END RELATIONAL
0419   06D7 FD A8         sor a, b ; ||
0420   06D9 11            mov a, b
0421   06DA 34 05 00      mov bl, [bp + 5] ; $c
0422   06DD A7 00         mov bh, 0             
0423   06DF             ; START RELATIONAL
0424   06DF D7            push a
0425   06E0 11            mov a, b
0426   06E1 26 3E 00      mov b, $3e
0427   06E4 B0            cmp a, b
0428   06E5 FD 71         seq ; ==
0429   06E7 E4            pop a
0430   06E8             ; END RELATIONAL
0431   06E8 FD A8         sor a, b ; ||
0432   06EA 11            mov a, b
0433   06EB 34 05 00      mov bl, [bp + 5] ; $c
0434   06EE A7 00         mov bh, 0             
0435   06F0             ; START RELATIONAL
0436   06F0 D7            push a
0437   06F1 11            mov a, b
0438   06F2 26 3D 00      mov b, $3d
0439   06F5 B0            cmp a, b
0440   06F6 FD 71         seq ; ==
0441   06F8 E4            pop a
0442   06F9             ; END RELATIONAL
0443   06F9 FD A8         sor a, b ; ||
0444   06FB 11            mov a, b
0445   06FC 34 05 00      mov bl, [bp + 5] ; $c
0446   06FF A7 00         mov bh, 0             
0447   0701             ; START RELATIONAL
0448   0701 D7            push a
0449   0702 11            mov a, b
0450   0703 26 21 00      mov b, $21
0451   0706 B0            cmp a, b
0452   0707 FD 71         seq ; ==
0453   0709 E4            pop a
0454   070A             ; END RELATIONAL
0455   070A FD A8         sor a, b ; ||
0456   070C 11            mov a, b
0457   070D 34 05 00      mov bl, [bp + 5] ; $c
0458   0710 A7 00         mov bh, 0             
0459   0712             ; START RELATIONAL
0460   0712 D7            push a
0461   0713 11            mov a, b
0462   0714 26 5E 00      mov b, $5e
0463   0717 B0            cmp a, b
0464   0718 FD 71         seq ; ==
0465   071A E4            pop a
0466   071B             ; END RELATIONAL
0467   071B FD A8         sor a, b ; ||
0468   071D 11            mov a, b
0469   071E 34 05 00      mov bl, [bp + 5] ; $c
0470   0721 A7 00         mov bh, 0             
0471   0723             ; START RELATIONAL
0472   0723 D7            push a
0473   0724 11            mov a, b
0474   0725 26 26 00      mov b, $26
0475   0728 B0            cmp a, b
0476   0729 FD 71         seq ; ==
0477   072B E4            pop a
0478   072C             ; END RELATIONAL
0479   072C FD A8         sor a, b ; ||
0480   072E 11            mov a, b
0481   072F 34 05 00      mov bl, [bp + 5] ; $c
0482   0732 A7 00         mov bh, 0             
0483   0734             ; START RELATIONAL
0484   0734 D7            push a
0485   0735 11            mov a, b
0486   0736 26 7C 00      mov b, $7c
0487   0739 B0            cmp a, b
0488   073A FD 71         seq ; ==
0489   073C E4            pop a
0490   073D             ; END RELATIONAL
0491   073D FD A8         sor a, b ; ||
0492   073F 11            mov a, b
0493   0740 34 05 00      mov bl, [bp + 5] ; $c
0494   0743 A7 00         mov bh, 0             
0495   0745             ; START RELATIONAL
0496   0745 D7            push a
0497   0746 11            mov a, b
0498   0747 26 7E 00      mov b, $7e
0499   074A B0            cmp a, b
0500   074B FD 71         seq ; ==
0501   074D E4            pop a
0502   074E             ; END RELATIONAL
0503   074E FD A8         sor a, b ; ||
0504   0750 11            mov a, b
0505   0751 34 05 00      mov bl, [bp + 5] ; $c
0506   0754 A7 00         mov bh, 0             
0507   0756             ; START RELATIONAL
0508   0756 D7            push a
0509   0757 11            mov a, b
0510   0758 26 2E 00      mov b, $2e
0511   075B B0            cmp a, b
0512   075C FD 71         seq ; ==
0513   075E E4            pop a
0514   075F             ; END RELATIONAL
0515   075F FD A8         sor a, b ; ||
0516   0761 E4            pop a
0517   0762 C0 00 00      cmp b, 0
0518   0765 C6 70 07      je _if1_else
0519   0768             _if1_true:
0520   0768             ;; return 1; 
0521   0768 26 01 00      mov b, $1
0522   076B F9            leave
0523   076C 09            ret
0524   076D 0A 75 07      jmp _if1_exit
0525   0770             _if1_else:
0526   0770             ;; return 0; 
0527   0770 26 00 00      mov b, $0
0528   0773 F9            leave
0529   0774 09            ret
0530   0775             _if1_exit:
0531   0775 F9            leave
0532   0776 09            ret
0533   0777             
0534   0777             strcpy:
0535   0777 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0536   077A             ; $psrc 
0537   077A             ; $pdest 
0538   077A 52 04 00      sub sp, 4
0539   077D             ;; psrc = src; 
0540   077D FA FF FF      lea d, [bp + -1] ; $psrc         
0541   0780 2C 05 00      mov b, [bp + 5] ; $src                     
0542   0783 FD 43         mov [d], b
0543   0785             ;; pdest = dest; 
0544   0785 FA FD FF      lea d, [bp + -3] ; $pdest         
0545   0788 2C 07 00      mov b, [bp + 7] ; $dest                     
0546   078B FD 43         mov [d], b
0547   078D             ;; while(*psrc) *pdest++ = *psrc++; 
0548   078D             _while2_cond:
0549   078D 2C FF FF      mov b, [bp + -1] ; $psrc             
0550   0790 74            mov d, b
0551   0791 32            mov bl, [d]
0552   0792 A7 00         mov bh, 0
0553   0794 C0 00 00      cmp b, 0
0554   0797 C6 C1 07      je _while2_exit
0555   079A             _while2_block:
0556   079A             ;; *pdest++ = *psrc++; 
0557   079A 2C FD FF      mov b, [bp + -3] ; $pdest             
0558   079D FD 79         mov g, b
0559   079F FD 77         inc b
0560   07A1 FA FD FF      lea d, [bp + -3] ; $pdest
0561   07A4 FD 43         mov [d], b
0562   07A6 FD 27         mov b, g
0563   07A8 D8            push b
0564   07A9 2C FF FF      mov b, [bp + -1] ; $psrc             
0565   07AC FD 79         mov g, b
0566   07AE FD 77         inc b
0567   07B0 FA FF FF      lea d, [bp + -1] ; $psrc
0568   07B3 FD 43         mov [d], b
0569   07B5 FD 27         mov b, g
0570   07B7 74            mov d, b
0571   07B8 32            mov bl, [d]
0572   07B9 A7 00         mov bh, 0
0573   07BB E7            pop d
0574   07BC FD 3E         mov [d], bl
0575   07BE 0A 8D 07      jmp _while2_cond
0576   07C1             _while2_exit:
0577   07C1             ;; *pdest = '\0'; 
0578   07C1 2C FD FF      mov b, [bp + -3] ; $pdest             
0579   07C4 D8            push b
0580   07C5 26 00 00      mov b, $0
0581   07C8 E7            pop d
0582   07C9 FD 3E         mov [d], bl
0583   07CB F9            leave
0584   07CC 09            ret
0585   07CD             
0586   07CD             strcmp:
0587   07CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0588   07D0             ;; while (*s1 && (*s1 == *s2)) { 
0589   07D0             _while3_cond:
0590   07D0 2C 07 00      mov b, [bp + 7] ; $s1             
0591   07D3 74            mov d, b
0592   07D4 32            mov bl, [d]
0593   07D5 A7 00         mov bh, 0
0594   07D7 D7            push a
0595   07D8 11            mov a, b
0596   07D9 2C 07 00      mov b, [bp + 7] ; $s1             
0597   07DC 74            mov d, b
0598   07DD 32            mov bl, [d]
0599   07DE A7 00         mov bh, 0
0600   07E0             ; START RELATIONAL
0601   07E0 D7            push a
0602   07E1 11            mov a, b
0603   07E2 2C 05 00      mov b, [bp + 5] ; $s2             
0604   07E5 74            mov d, b
0605   07E6 32            mov bl, [d]
0606   07E7 A7 00         mov bh, 0
0607   07E9 B0            cmp a, b
0608   07EA FD 71         seq ; ==
0609   07EC E4            pop a
0610   07ED             ; END RELATIONAL
0611   07ED FD A7         sand a, b ; &&
0612   07EF E4            pop a
0613   07F0 C0 00 00      cmp b, 0
0614   07F3 C6 15 08      je _while3_exit
0615   07F6             _while3_block:
0616   07F6             ;; s1++; 
0617   07F6 2C 07 00      mov b, [bp + 7] ; $s1             
0618   07F9 FD 79         mov g, b
0619   07FB FD 77         inc b
0620   07FD FA 07 00      lea d, [bp + 7] ; $s1
0621   0800 FD 43         mov [d], b
0622   0802 FD 27         mov b, g
0623   0804             ;; s2++; 
0624   0804 2C 05 00      mov b, [bp + 5] ; $s2             
0625   0807 FD 79         mov g, b
0626   0809 FD 77         inc b
0627   080B FA 05 00      lea d, [bp + 5] ; $s2
0628   080E FD 43         mov [d], b
0629   0810 FD 27         mov b, g
0630   0812 0A D0 07      jmp _while3_cond
0631   0815             _while3_exit:
0632   0815             ;; return *s1 - *s2; 
0633   0815 2C 07 00      mov b, [bp + 7] ; $s1             
0634   0818 74            mov d, b
0635   0819 32            mov bl, [d]
0636   081A A7 00         mov bh, 0
0637   081C             ; START TERMS
0638   081C D7            push a
0639   081D 11            mov a, b
0640   081E 2C 05 00      mov b, [bp + 5] ; $s2             
0641   0821 74            mov d, b
0642   0822 32            mov bl, [d]
0643   0823 A7 00         mov bh, 0
0644   0825 60            sub a, b
0645   0826 27            mov b, a
0646   0827 E4            pop a
0647   0828             ; END TERMS
0648   0828 F9            leave
0649   0829 09            ret
0650   082A             
0651   082A             strcat:
0652   082A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0653   082D             ; $dest_len 
0654   082D             ; $i 
0655   082D 52 04 00      sub sp, 4
0656   0830             ;; dest_len = strlen(dest); 
0657   0830 FA FF FF      lea d, [bp + -1] ; $dest_len
0658   0833 DA            push d
0659   0834 2C 07 00      mov b, [bp + 7] ; $dest             
0660   0837 FD AB         swp b
0661   0839 D8            push b
0662   083A 07 C9 08      call strlen
0663   083D 51 02 00      add sp, 2
0664   0840 E7            pop d
0665   0841 FD 43         mov [d], b
0666   0843             ;; for (i = 0; src[i] != 0; i=i+1) { 
0667   0843             _for4_init:
0668   0843 FA FD FF      lea d, [bp + -3] ; $i         
0669   0846 26 00 00      mov b, $0        
0670   0849 FD 43         mov [d], b
0671   084B             _for4_cond:
0672   084B FA 05 00      lea d, [bp + 5] ; $src
0673   084E FD 2A         mov d, [d]
0674   0850 D7            push a         
0675   0851 2C FD FF      mov b, [bp + -3] ; $i                     
0676   0854 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0677   0858 E4            pop a
0678   0859 32            mov bl, [d]
0679   085A A7 00         mov bh, 0
0680   085C             ; START RELATIONAL
0681   085C D7            push a
0682   085D 11            mov a, b
0683   085E 26 00 00      mov b, $0
0684   0861 B0            cmp a, b
0685   0862 FD 72         sneq ; !=
0686   0864 E4            pop a
0687   0865             ; END RELATIONAL
0688   0865 C0 00 00      cmp b, 0
0689   0868 C6 A9 08      je _for4_exit
0690   086B             _for4_block:
0691   086B             ;; dest[dest_len + i] = src[i]; 
0692   086B FA 07 00      lea d, [bp + 7] ; $dest
0693   086E FD 2A         mov d, [d]
0694   0870 D7            push a         
0695   0871 2C FF FF      mov b, [bp + -1] ; $dest_len             
0696   0874             ; START TERMS
0697   0874 D7            push a
0698   0875 11            mov a, b
0699   0876 2C FD FF      mov b, [bp + -3] ; $i             
0700   0879 54            add a, b
0701   087A 27            mov b, a
0702   087B E4            pop a
0703   087C             ; END TERMS        
0704   087C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0705   0880 E4            pop a
0706   0881 DA            push d
0707   0882 FA 05 00      lea d, [bp + 5] ; $src
0708   0885 FD 2A         mov d, [d]
0709   0887 D7            push a         
0710   0888 2C FD FF      mov b, [bp + -3] ; $i                     
0711   088B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0712   088F E4            pop a
0713   0890 32            mov bl, [d]
0714   0891 A7 00         mov bh, 0
0715   0893 E7            pop d
0716   0894 FD 3E         mov [d], bl
0717   0896             _for4_update:
0718   0896 FA FD FF      lea d, [bp + -3] ; $i         
0719   0899 2C FD FF      mov b, [bp + -3] ; $i             
0720   089C             ; START TERMS
0721   089C D7            push a
0722   089D 11            mov a, b
0723   089E 26 01 00      mov b, $1
0724   08A1 54            add a, b
0725   08A2 27            mov b, a
0726   08A3 E4            pop a
0727   08A4             ; END TERMS        
0728   08A4 FD 43         mov [d], b
0729   08A6 0A 4B 08      jmp _for4_cond
0730   08A9             _for4_exit:
0731   08A9             ;; dest[dest_len + i] = 0; 
0732   08A9 FA 07 00      lea d, [bp + 7] ; $dest
0733   08AC FD 2A         mov d, [d]
0734   08AE D7            push a         
0735   08AF 2C FF FF      mov b, [bp + -1] ; $dest_len             
0736   08B2             ; START TERMS
0737   08B2 D7            push a
0738   08B3 11            mov a, b
0739   08B4 2C FD FF      mov b, [bp + -3] ; $i             
0740   08B7 54            add a, b
0741   08B8 27            mov b, a
0742   08B9 E4            pop a
0743   08BA             ; END TERMS        
0744   08BA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0745   08BE E4            pop a         
0746   08BF 26 00 00      mov b, $0        
0747   08C2 FD 3E         mov [d], bl
0748   08C4             ;; return dest; 
0749   08C4 2C 07 00      mov b, [bp + 7] ; $dest             
0750   08C7 F9            leave
0751   08C8 09            ret
0752   08C9             
0753   08C9             strlen:
0754   08C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0755   08CC             ; $length 
0756   08CC 52 02 00      sub sp, 2
0757   08CF             ;; length = 0; 
0758   08CF FA FF FF      lea d, [bp + -1] ; $length         
0759   08D2 26 00 00      mov b, $0        
0760   08D5 FD 43         mov [d], b
0761   08D7             ;; while (str[length] != 0) { 
0762   08D7             _while5_cond:
0763   08D7 FA 05 00      lea d, [bp + 5] ; $str
0764   08DA FD 2A         mov d, [d]
0765   08DC D7            push a         
0766   08DD 2C FF FF      mov b, [bp + -1] ; $length                     
0767   08E0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0768   08E4 E4            pop a
0769   08E5 32            mov bl, [d]
0770   08E6 A7 00         mov bh, 0
0771   08E8             ; START RELATIONAL
0772   08E8 D7            push a
0773   08E9 11            mov a, b
0774   08EA 26 00 00      mov b, $0
0775   08ED B0            cmp a, b
0776   08EE FD 72         sneq ; !=
0777   08F0 E4            pop a
0778   08F1             ; END RELATIONAL
0779   08F1 C0 00 00      cmp b, 0
0780   08F4 C6 08 09      je _while5_exit
0781   08F7             _while5_block:
0782   08F7             ;; length++; 
0783   08F7 2C FF FF      mov b, [bp + -1] ; $length             
0784   08FA FD 79         mov g, b
0785   08FC FD 77         inc b
0786   08FE FA FF FF      lea d, [bp + -1] ; $length
0787   0901 FD 43         mov [d], b
0788   0903 FD 27         mov b, g
0789   0905 0A D7 08      jmp _while5_cond
0790   0908             _while5_exit:
0791   0908             ;; return length; 
0792   0908 2C FF FF      mov b, [bp + -1] ; $length             
0793   090B F9            leave
0794   090C 09            ret
0795   090D             
0796   090D             va_arg:
0797   090D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0798   0910             ; $val 
0799   0910 52 02 00      sub sp, 2
0800   0913             ;; if(size == 1){ 
0801   0913             _if6_cond:
0802   0913 2C 05 00      mov b, [bp + 5] ; $size             
0803   0916             ; START RELATIONAL
0804   0916 D7            push a
0805   0917 11            mov a, b
0806   0918 26 01 00      mov b, $1
0807   091B B0            cmp a, b
0808   091C FD 71         seq ; ==
0809   091E E4            pop a
0810   091F             ; END RELATIONAL
0811   091F C0 00 00      cmp b, 0
0812   0922 C6 3E 09      je _if6_else
0813   0925             _if6_true:
0814   0925             ;; val = *(char*)arg->p; 
0815   0925 FA FF FF      lea d, [bp + -1] ; $val
0816   0928 DA            push d
0817   0929 FA 07 00      lea d, [bp + 7] ; $arg
0818   092C FD 2A         mov d, [d]
0819   092E 58 00 00      add d, 0
0820   0931 FD 14         clb
0821   0933 2A            mov b, [d]
0822   0934 74            mov d, b
0823   0935 32            mov bl, [d]
0824   0936 A7 00         mov bh, 0
0825   0938 E7            pop d
0826   0939 FD 43         mov [d], b
0827   093B 0A 73 09      jmp _if6_exit
0828   093E             _if6_else:
0829   093E             ;; if(size == 2){ 
0830   093E             _if7_cond:
0831   093E 2C 05 00      mov b, [bp + 5] ; $size             
0832   0941             ; START RELATIONAL
0833   0941 D7            push a
0834   0942 11            mov a, b
0835   0943 26 02 00      mov b, $2
0836   0946 B0            cmp a, b
0837   0947 FD 71         seq ; ==
0838   0949 E4            pop a
0839   094A             ; END RELATIONAL
0840   094A C0 00 00      cmp b, 0
0841   094D C6 67 09      je _if7_else
0842   0950             _if7_true:
0843   0950             ;; val = *(int*)arg->p; 
0844   0950 FA FF FF      lea d, [bp + -1] ; $val
0845   0953 DA            push d
0846   0954 FA 07 00      lea d, [bp + 7] ; $arg
0847   0957 FD 2A         mov d, [d]
0848   0959 58 00 00      add d, 0
0849   095C FD 14         clb
0850   095E 2A            mov b, [d]
0851   095F 74            mov d, b
0852   0960 2A            mov b, [d]
0853   0961 E7            pop d
0854   0962 FD 43         mov [d], b
0855   0964 0A 73 09      jmp _if7_exit
0856   0967             _if7_else:
0857   0967             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0858   0967 26 77 26      mov b, __s0 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0859   096A FD AB         swp b
0860   096C D8            push b
0861   096D 07 5C 0F      call print
0862   0970 51 02 00      add sp, 2
0863   0973             _if7_exit:
0864   0973             _if6_exit:
0865   0973             ;; arg->p = arg->p + size; 
0866   0973 FA 07 00      lea d, [bp + 7] ; $arg
0867   0976 FD 2A         mov d, [d]
0868   0978 58 00 00      add d, 0
0869   097B FD 14         clb
0870   097D DA            push d
0871   097E FA 07 00      lea d, [bp + 7] ; $arg
0872   0981 FD 2A         mov d, [d]
0873   0983 58 00 00      add d, 0
0874   0986 FD 14         clb
0875   0988 2A            mov b, [d]
0876   0989             ; START TERMS
0877   0989 D7            push a
0878   098A 11            mov a, b
0879   098B 2C 05 00      mov b, [bp + 5] ; $size             
0880   098E 54            add a, b
0881   098F 27            mov b, a
0882   0990 E4            pop a
0883   0991             ; END TERMS
0884   0991 E7            pop d
0885   0992 FD 43         mov [d], b
0886   0994             ;; return val; 
0887   0994 2C FF FF      mov b, [bp + -1] ; $val             
0888   0997 F9            leave
0889   0998 09            ret
0890   0999             
0891   0999             printf:
0892   0999 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0893   099C             ; $p 
0894   099C             ; $fp 
0895   099C             ; $i 
0896   099C 52 06 00      sub sp, 6
0897   099F             ;; fp = format; 
0898   099F FA FD FF      lea d, [bp + -3] ; $fp         
0899   09A2 2C 05 00      mov b, [bp + 5] ; $format                     
0900   09A5 FD 43         mov [d], b
0901   09A7             ;; p = &format; 
0902   09A7 FA FF FF      lea d, [bp + -1] ; $p
0903   09AA DA            push d
0904   09AB FA 05 00      lea d, [bp + 5] ; $format
0905   09AE 2D            mov b, d
0906   09AF E7            pop d
0907   09B0 FD 43         mov [d], b
0908   09B2             ;; for(;;){ 
0909   09B2             _for8_init:
0910   09B2             _for8_cond:
0911   09B2             _for8_block:
0912   09B2             ;; if(!*fp) break; 
0913   09B2             _if9_cond:
0914   09B2 2C FD FF      mov b, [bp + -3] ; $fp             
0915   09B5 74            mov d, b
0916   09B6 32            mov bl, [d]
0917   09B7 A7 00         mov bh, 0
0918   09B9 C0 00 00      cmp b, 0
0919   09BC FD 71         seq ; !
0920   09BE C0 00 00      cmp b, 0
0921   09C1 C6 CA 09      je _if9_exit
0922   09C4             _if9_true:
0923   09C4             ;; break; 
0924   09C4 0A FA 0A      jmp _for8_exit ; for break
0925   09C7 0A CA 09      jmp _if9_exit
0926   09CA             _if9_exit:
0927   09CA             ;; if(*fp == '%'){ 
0928   09CA             _if10_cond:
0929   09CA 2C FD FF      mov b, [bp + -3] ; $fp             
0930   09CD 74            mov d, b
0931   09CE 32            mov bl, [d]
0932   09CF A7 00         mov bh, 0
0933   09D1             ; START RELATIONAL
0934   09D1 D7            push a
0935   09D2 11            mov a, b
0936   09D3 26 25 00      mov b, $25
0937   09D6 B0            cmp a, b
0938   09D7 FD 71         seq ; ==
0939   09D9 E4            pop a
0940   09DA             ; END RELATIONAL
0941   09DA C0 00 00      cmp b, 0
0942   09DD C6 DB 0A      je _if10_else
0943   09E0             _if10_true:
0944   09E0             ;; fp++; 
0945   09E0 2C FD FF      mov b, [bp + -3] ; $fp             
0946   09E3 FD 79         mov g, b
0947   09E5 FD 77         inc b
0948   09E7 FA FD FF      lea d, [bp + -3] ; $fp
0949   09EA FD 43         mov [d], b
0950   09EC FD 27         mov b, g
0951   09EE             ;; switch(*fp){ 
0952   09EE             _switch11_expr:
0953   09EE 2C FD FF      mov b, [bp + -3] ; $fp             
0954   09F1 74            mov d, b
0955   09F2 32            mov bl, [d]
0956   09F3 A7 00         mov bh, 0
0957   09F5             _switch11_comparisons:
0958   09F5 C1 64         cmp bl, $64
0959   09F7 C6 19 0A      je _switch11_case0
0960   09FA C1 69         cmp bl, $69
0961   09FC C6 19 0A      je _switch11_case1
0962   09FF C1 75         cmp bl, $75
0963   0A01 C6 3A 0A      je _switch11_case2
0964   0A04 C1 78         cmp bl, $78
0965   0A06 C6 5B 0A      je _switch11_case3
0966   0A09 C1 63         cmp bl, $63
0967   0A0B C6 7C 0A      je _switch11_case4
0968   0A0E C1 73         cmp bl, $73
0969   0A10 C6 9D 0A      je _switch11_case5
0970   0A13 0A BE 0A      jmp _switch11_default
0971   0A16 0A CA 0A      jmp _switch11_exit
0972   0A19             _switch11_case0:
0973   0A19             _switch11_case1:
0974   0A19             ;; p = p - 2; 
0975   0A19 FA FF FF      lea d, [bp + -1] ; $p         
0976   0A1C 2C FF FF      mov b, [bp + -1] ; $p             
0977   0A1F             ; START TERMS
0978   0A1F D7            push a
0979   0A20 11            mov a, b
0980   0A21 26 02 00      mov b, $2
0981   0A24 60            sub a, b
0982   0A25 27            mov b, a
0983   0A26 E4            pop a
0984   0A27             ; END TERMS        
0985   0A27 FD 43         mov [d], b
0986   0A29             ;; prints(*(int*)p); 
0987   0A29 2C FF FF      mov b, [bp + -1] ; $p             
0988   0A2C 74            mov d, b
0989   0A2D 2A            mov b, [d]
0990   0A2E FD AB         swp b
0991   0A30 D8            push b
0992   0A31 07 60 0D      call prints
0993   0A34 51 02 00      add sp, 2
0994   0A37             ;; break; 
0995   0A37 0A CA 0A      jmp _switch11_exit ; case break
0996   0A3A             _switch11_case2:
0997   0A3A             ;; p = p - 2; 
0998   0A3A FA FF FF      lea d, [bp + -1] ; $p         
0999   0A3D 2C FF FF      mov b, [bp + -1] ; $p             
1000   0A40             ; START TERMS
1001   0A40 D7            push a
1002   0A41 11            mov a, b
1003   0A42 26 02 00      mov b, $2
1004   0A45 60            sub a, b
1005   0A46 27            mov b, a
1006   0A47 E4            pop a
1007   0A48             ; END TERMS        
1008   0A48 FD 43         mov [d], b
1009   0A4A             ;; printu(*(unsigned int*)p); 
1010   0A4A 2C FF FF      mov b, [bp + -1] ; $p             
1011   0A4D 74            mov d, b
1012   0A4E 2A            mov b, [d]
1013   0A4F FD AB         swp b
1014   0A51 D8            push b
1015   0A52 07 40 0E      call printu
1016   0A55 51 02 00      add sp, 2
1017   0A58             ;; break; 
1018   0A58 0A CA 0A      jmp _switch11_exit ; case break
1019   0A5B             _switch11_case3:
1020   0A5B             ;; p = p - 2; 
1021   0A5B FA FF FF      lea d, [bp + -1] ; $p         
1022   0A5E 2C FF FF      mov b, [bp + -1] ; $p             
1023   0A61             ; START TERMS
1024   0A61 D7            push a
1025   0A62 11            mov a, b
1026   0A63 26 02 00      mov b, $2
1027   0A66 60            sub a, b
1028   0A67 27            mov b, a
1029   0A68 E4            pop a
1030   0A69             ; END TERMS        
1031   0A69 FD 43         mov [d], b
1032   0A6B             ;; printx16(*(unsigned int*)p); 
1033   0A6B 2C FF FF      mov b, [bp + -1] ; $p             
1034   0A6E 74            mov d, b
1035   0A6F 2A            mov b, [d]
1036   0A70 FD AB         swp b
1037   0A72 D8            push b
1038   0A73 07 FC 0A      call printx16
1039   0A76 51 02 00      add sp, 2
1040   0A79             ;; break; 
1041   0A79 0A CA 0A      jmp _switch11_exit ; case break
1042   0A7C             _switch11_case4:
1043   0A7C             ;; p = p - 2; 
1044   0A7C FA FF FF      lea d, [bp + -1] ; $p         
1045   0A7F 2C FF FF      mov b, [bp + -1] ; $p             
1046   0A82             ; START TERMS
1047   0A82 D7            push a
1048   0A83 11            mov a, b
1049   0A84 26 02 00      mov b, $2
1050   0A87 60            sub a, b
1051   0A88 27            mov b, a
1052   0A89 E4            pop a
1053   0A8A             ; END TERMS        
1054   0A8A FD 43         mov [d], b
1055   0A8C             ;; putchar(*(char*)p); 
1056   0A8C 2C FF FF      mov b, [bp + -1] ; $p             
1057   0A8F 74            mov d, b
1058   0A90 32            mov bl, [d]
1059   0A91 A7 00         mov bh, 0
1060   0A93 DD            push bl
1061   0A94 07 17 0F      call putchar
1062   0A97 51 01 00      add sp, 1
1063   0A9A             ;; break; 
1064   0A9A 0A CA 0A      jmp _switch11_exit ; case break
1065   0A9D             _switch11_case5:
1066   0A9D             ;; p = p - 2; 
1067   0A9D FA FF FF      lea d, [bp + -1] ; $p         
1068   0AA0 2C FF FF      mov b, [bp + -1] ; $p             
1069   0AA3             ; START TERMS
1070   0AA3 D7            push a
1071   0AA4 11            mov a, b
1072   0AA5 26 02 00      mov b, $2
1073   0AA8 60            sub a, b
1074   0AA9 27            mov b, a
1075   0AAA E4            pop a
1076   0AAB             ; END TERMS        
1077   0AAB FD 43         mov [d], b
1078   0AAD             ;; print(*(char**)p); 
1079   0AAD 2C FF FF      mov b, [bp + -1] ; $p             
1080   0AB0 74            mov d, b
1081   0AB1 2A            mov b, [d]
1082   0AB2 FD AB         swp b
1083   0AB4 D8            push b
1084   0AB5 07 5C 0F      call print
1085   0AB8 51 02 00      add sp, 2
1086   0ABB             ;; break; 
1087   0ABB 0A CA 0A      jmp _switch11_exit ; case break
1088   0ABE             _switch11_default:
1089   0ABE             ;; print("Error: Unknown argument type.\n"); 
1090   0ABE 26 BB 26      mov b, __s1 ; "Error: Unknown argument type.\n"
1091   0AC1 FD AB         swp b
1092   0AC3 D8            push b
1093   0AC4 07 5C 0F      call print
1094   0AC7 51 02 00      add sp, 2
1095   0ACA             _switch11_exit:
1096   0ACA             ;; fp++; 
1097   0ACA 2C FD FF      mov b, [bp + -3] ; $fp             
1098   0ACD FD 79         mov g, b
1099   0ACF FD 77         inc b
1100   0AD1 FA FD FF      lea d, [bp + -3] ; $fp
1101   0AD4 FD 43         mov [d], b
1102   0AD6 FD 27         mov b, g
1103   0AD8 0A F7 0A      jmp _if10_exit
1104   0ADB             _if10_else:
1105   0ADB             ;; putchar(*fp); 
1106   0ADB 2C FD FF      mov b, [bp + -3] ; $fp             
1107   0ADE 74            mov d, b
1108   0ADF 32            mov bl, [d]
1109   0AE0 A7 00         mov bh, 0
1110   0AE2 DD            push bl
1111   0AE3 07 17 0F      call putchar
1112   0AE6 51 01 00      add sp, 1
1113   0AE9             ;; fp++; 
1114   0AE9 2C FD FF      mov b, [bp + -3] ; $fp             
1115   0AEC FD 79         mov g, b
1116   0AEE FD 77         inc b
1117   0AF0 FA FD FF      lea d, [bp + -3] ; $fp
1118   0AF3 FD 43         mov [d], b
1119   0AF5 FD 27         mov b, g
1120   0AF7             _if10_exit:
1121   0AF7             _for8_update:
1122   0AF7 0A B2 09      jmp _for8_cond
1123   0AFA             _for8_exit:
1124   0AFA F9            leave
1125   0AFB 09            ret
1126   0AFC             
1127   0AFC             printx16:
1128   0AFC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1129   0AFF             
1130   0AFF             ; --- BEGIN INLINE ASM BLOCK
1131   0AFF 2C 05 00      mov b, [bp + 5] ; $hex             
1132   0B02 07 A4 12      call print_u16x
1133   0B05             ; --- END INLINE ASM BLOCK
1134   0B05             
1135   0B05 F9            leave
1136   0B06 09            ret
1137   0B07             
1138   0B07             printx8:
1139   0B07 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1140   0B0A             
1141   0B0A             ; --- BEGIN INLINE ASM BLOCK
1142   0B0A FA 05 00      lea d, [bp + 5] ; $hex
1143   0B0D 32            mov bl, [d]
1144   0B0E 07 E8 12      call print_u8x
1145   0B11             ; --- END INLINE ASM BLOCK
1146   0B11             
1147   0B11 F9            leave
1148   0B12 09            ret
1149   0B13             
1150   0B13             hex_to_int:
1151   0B13 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1152   0B16             ; $value 
1153   0B16 10 00 00      mov a, $0
1154   0B19 45 FF FF      mov [bp + -1], a
1155   0B1C             ; $i 
1156   0B1C             ; $hex_char 
1157   0B1C             ; $len 
1158   0B1C 52 07 00      sub sp, 7
1159   0B1F             ;; len = strlen(hex_string); 
1160   0B1F FA FA FF      lea d, [bp + -6] ; $len
1161   0B22 DA            push d
1162   0B23 2C 05 00      mov b, [bp + 5] ; $hex_string             
1163   0B26 FD AB         swp b
1164   0B28 D8            push b
1165   0B29 07 C9 08      call strlen
1166   0B2C 51 02 00      add sp, 2
1167   0B2F E7            pop d
1168   0B30 FD 43         mov [d], b
1169   0B32             ;; for (i = 0; i < len; i++) { 
1170   0B32             _for12_init:
1171   0B32 FA FD FF      lea d, [bp + -3] ; $i         
1172   0B35 26 00 00      mov b, $0        
1173   0B38 FD 43         mov [d], b
1174   0B3A             _for12_cond:
1175   0B3A 2C FD FF      mov b, [bp + -3] ; $i             
1176   0B3D             ; START RELATIONAL
1177   0B3D D7            push a
1178   0B3E 11            mov a, b
1179   0B3F 2C FA FF      mov b, [bp + -6] ; $len             
1180   0B42 B0            cmp a, b
1181   0B43 FD 73         slt ; < 
1182   0B45 E4            pop a
1183   0B46             ; END RELATIONAL
1184   0B46 C0 00 00      cmp b, 0
1185   0B49 C6 3A 0C      je _for12_exit
1186   0B4C             _for12_block:
1187   0B4C             ;; hex_char = hex_string[i]; 
1188   0B4C FA FC FF      lea d, [bp + -4] ; $hex_char
1189   0B4F DA            push d
1190   0B50 FA 05 00      lea d, [bp + 5] ; $hex_string
1191   0B53 FD 2A         mov d, [d]
1192   0B55 D7            push a         
1193   0B56 2C FD FF      mov b, [bp + -3] ; $i                     
1194   0B59 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1195   0B5D E4            pop a
1196   0B5E 32            mov bl, [d]
1197   0B5F A7 00         mov bh, 0
1198   0B61 E7            pop d
1199   0B62 FD 3E         mov [d], bl
1200   0B64             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1201   0B64             _if13_cond:
1202   0B64 34 FC FF      mov bl, [bp + -4] ; $hex_char
1203   0B67 A7 00         mov bh, 0             
1204   0B69             ; START RELATIONAL
1205   0B69 D7            push a
1206   0B6A 11            mov a, b
1207   0B6B 26 61 00      mov b, $61
1208   0B6E B0            cmp a, b
1209   0B6F FD 80         sge ; >=
1210   0B71 E4            pop a
1211   0B72             ; END RELATIONAL
1212   0B72 D7            push a
1213   0B73 11            mov a, b
1214   0B74 34 FC FF      mov bl, [bp + -4] ; $hex_char
1215   0B77 A7 00         mov bh, 0             
1216   0B79             ; START RELATIONAL
1217   0B79 D7            push a
1218   0B7A 11            mov a, b
1219   0B7B 26 66 00      mov b, $66
1220   0B7E B0            cmp a, b
1221   0B7F FD 74         sle ; <=
1222   0B81 E4            pop a
1223   0B82             ; END RELATIONAL
1224   0B82 FD A7         sand a, b ; &&
1225   0B84 E4            pop a
1226   0B85 C0 00 00      cmp b, 0
1227   0B88 C6 B5 0B      je _if13_else
1228   0B8B             _if13_true:
1229   0B8B             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1230   0B8B FA FF FF      lea d, [bp + -1] ; $value         
1231   0B8E 2C FF FF      mov b, [bp + -1] ; $value             
1232   0B91             ; START FACTORS
1233   0B91 D7            push a
1234   0B92 11            mov a, b
1235   0B93 26 10 00      mov b, $10
1236   0B96 AC            mul a, b ; *
1237   0B97 11            mov a, b
1238   0B98 27            mov b, a
1239   0B99 E4            pop a
1240   0B9A             ; END FACTORS
1241   0B9A             ; START TERMS
1242   0B9A D7            push a
1243   0B9B 11            mov a, b
1244   0B9C 34 FC FF      mov bl, [bp + -4] ; $hex_char
1245   0B9F A7 00         mov bh, 0             
1246   0BA1             ; START TERMS
1247   0BA1 D7            push a
1248   0BA2 11            mov a, b
1249   0BA3 26 61 00      mov b, $61
1250   0BA6 60            sub a, b
1251   0BA7 26 0A 00      mov b, $a
1252   0BAA 54            add a, b
1253   0BAB 27            mov b, a
1254   0BAC E4            pop a
1255   0BAD             ; END TERMS
1256   0BAD 54            add a, b
1257   0BAE 27            mov b, a
1258   0BAF E4            pop a
1259   0BB0             ; END TERMS        
1260   0BB0 FD 43         mov [d], b
1261   0BB2 0A 29 0C      jmp _if13_exit
1262   0BB5             _if13_else:
1263   0BB5             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1264   0BB5             _if14_cond:
1265   0BB5 34 FC FF      mov bl, [bp + -4] ; $hex_char
1266   0BB8 A7 00         mov bh, 0             
1267   0BBA             ; START RELATIONAL
1268   0BBA D7            push a
1269   0BBB 11            mov a, b
1270   0BBC 26 41 00      mov b, $41
1271   0BBF B0            cmp a, b
1272   0BC0 FD 80         sge ; >=
1273   0BC2 E4            pop a
1274   0BC3             ; END RELATIONAL
1275   0BC3 D7            push a
1276   0BC4 11            mov a, b
1277   0BC5 34 FC FF      mov bl, [bp + -4] ; $hex_char
1278   0BC8 A7 00         mov bh, 0             
1279   0BCA             ; START RELATIONAL
1280   0BCA D7            push a
1281   0BCB 11            mov a, b
1282   0BCC 26 46 00      mov b, $46
1283   0BCF B0            cmp a, b
1284   0BD0 FD 74         sle ; <=
1285   0BD2 E4            pop a
1286   0BD3             ; END RELATIONAL
1287   0BD3 FD A7         sand a, b ; &&
1288   0BD5 E4            pop a
1289   0BD6 C0 00 00      cmp b, 0
1290   0BD9 C6 06 0C      je _if14_else
1291   0BDC             _if14_true:
1292   0BDC             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1293   0BDC FA FF FF      lea d, [bp + -1] ; $value         
1294   0BDF 2C FF FF      mov b, [bp + -1] ; $value             
1295   0BE2             ; START FACTORS
1296   0BE2 D7            push a
1297   0BE3 11            mov a, b
1298   0BE4 26 10 00      mov b, $10
1299   0BE7 AC            mul a, b ; *
1300   0BE8 11            mov a, b
1301   0BE9 27            mov b, a
1302   0BEA E4            pop a
1303   0BEB             ; END FACTORS
1304   0BEB             ; START TERMS
1305   0BEB D7            push a
1306   0BEC 11            mov a, b
1307   0BED 34 FC FF      mov bl, [bp + -4] ; $hex_char
1308   0BF0 A7 00         mov bh, 0             
1309   0BF2             ; START TERMS
1310   0BF2 D7            push a
1311   0BF3 11            mov a, b
1312   0BF4 26 41 00      mov b, $41
1313   0BF7 60            sub a, b
1314   0BF8 26 0A 00      mov b, $a
1315   0BFB 54            add a, b
1316   0BFC 27            mov b, a
1317   0BFD E4            pop a
1318   0BFE             ; END TERMS
1319   0BFE 54            add a, b
1320   0BFF 27            mov b, a
1321   0C00 E4            pop a
1322   0C01             ; END TERMS        
1323   0C01 FD 43         mov [d], b
1324   0C03 0A 29 0C      jmp _if14_exit
1325   0C06             _if14_else:
1326   0C06             ;; value = (value * 16) + (hex_char - '0'); 
1327   0C06 FA FF FF      lea d, [bp + -1] ; $value         
1328   0C09 2C FF FF      mov b, [bp + -1] ; $value             
1329   0C0C             ; START FACTORS
1330   0C0C D7            push a
1331   0C0D 11            mov a, b
1332   0C0E 26 10 00      mov b, $10
1333   0C11 AC            mul a, b ; *
1334   0C12 11            mov a, b
1335   0C13 27            mov b, a
1336   0C14 E4            pop a
1337   0C15             ; END FACTORS
1338   0C15             ; START TERMS
1339   0C15 D7            push a
1340   0C16 11            mov a, b
1341   0C17 34 FC FF      mov bl, [bp + -4] ; $hex_char
1342   0C1A A7 00         mov bh, 0             
1343   0C1C             ; START TERMS
1344   0C1C D7            push a
1345   0C1D 11            mov a, b
1346   0C1E 26 30 00      mov b, $30
1347   0C21 60            sub a, b
1348   0C22 27            mov b, a
1349   0C23 E4            pop a
1350   0C24             ; END TERMS
1351   0C24 54            add a, b
1352   0C25 27            mov b, a
1353   0C26 E4            pop a
1354   0C27             ; END TERMS        
1355   0C27 FD 43         mov [d], b
1356   0C29             _if14_exit:
1357   0C29             _if13_exit:
1358   0C29             _for12_update:
1359   0C29 2C FD FF      mov b, [bp + -3] ; $i             
1360   0C2C FD 79         mov g, b
1361   0C2E FD 77         inc b
1362   0C30 FA FD FF      lea d, [bp + -3] ; $i
1363   0C33 FD 43         mov [d], b
1364   0C35 FD 27         mov b, g
1365   0C37 0A 3A 0B      jmp _for12_cond
1366   0C3A             _for12_exit:
1367   0C3A             ;; return value; 
1368   0C3A 2C FF FF      mov b, [bp + -1] ; $value             
1369   0C3D F9            leave
1370   0C3E 09            ret
1371   0C3F             
1372   0C3F             atoi:
1373   0C3F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1374   0C42             ; $result 
1375   0C42 10 00 00      mov a, $0
1376   0C45 45 FF FF      mov [bp + -1], a
1377   0C48             ; $sign 
1378   0C48 10 01 00      mov a, $1
1379   0C4B 45 FD FF      mov [bp + -3], a
1380   0C4E 52 04 00      sub sp, 4
1381   0C51             ;; while (*str == ' ') str++; 
1382   0C51             _while15_cond:
1383   0C51 2C 05 00      mov b, [bp + 5] ; $str             
1384   0C54 74            mov d, b
1385   0C55 32            mov bl, [d]
1386   0C56 A7 00         mov bh, 0
1387   0C58             ; START RELATIONAL
1388   0C58 D7            push a
1389   0C59 11            mov a, b
1390   0C5A 26 20 00      mov b, $20
1391   0C5D B0            cmp a, b
1392   0C5E FD 71         seq ; ==
1393   0C60 E4            pop a
1394   0C61             ; END RELATIONAL
1395   0C61 C0 00 00      cmp b, 0
1396   0C64 C6 78 0C      je _while15_exit
1397   0C67             _while15_block:
1398   0C67             ;; str++; 
1399   0C67 2C 05 00      mov b, [bp + 5] ; $str             
1400   0C6A FD 79         mov g, b
1401   0C6C FD 77         inc b
1402   0C6E FA 05 00      lea d, [bp + 5] ; $str
1403   0C71 FD 43         mov [d], b
1404   0C73 FD 27         mov b, g
1405   0C75 0A 51 0C      jmp _while15_cond
1406   0C78             _while15_exit:
1407   0C78             ;; if (*str == '-' || *str == '+') { 
1408   0C78             _if16_cond:
1409   0C78 2C 05 00      mov b, [bp + 5] ; $str             
1410   0C7B 74            mov d, b
1411   0C7C 32            mov bl, [d]
1412   0C7D A7 00         mov bh, 0
1413   0C7F             ; START RELATIONAL
1414   0C7F D7            push a
1415   0C80 11            mov a, b
1416   0C81 26 2D 00      mov b, $2d
1417   0C84 B0            cmp a, b
1418   0C85 FD 71         seq ; ==
1419   0C87 E4            pop a
1420   0C88             ; END RELATIONAL
1421   0C88 D7            push a
1422   0C89 11            mov a, b
1423   0C8A 2C 05 00      mov b, [bp + 5] ; $str             
1424   0C8D 74            mov d, b
1425   0C8E 32            mov bl, [d]
1426   0C8F A7 00         mov bh, 0
1427   0C91             ; START RELATIONAL
1428   0C91 D7            push a
1429   0C92 11            mov a, b
1430   0C93 26 2B 00      mov b, $2b
1431   0C96 B0            cmp a, b
1432   0C97 FD 71         seq ; ==
1433   0C99 E4            pop a
1434   0C9A             ; END RELATIONAL
1435   0C9A FD A8         sor a, b ; ||
1436   0C9C E4            pop a
1437   0C9D C0 00 00      cmp b, 0
1438   0CA0 C6 D7 0C      je _if16_exit
1439   0CA3             _if16_true:
1440   0CA3             ;; if (*str == '-') sign = -1; 
1441   0CA3             _if17_cond:
1442   0CA3 2C 05 00      mov b, [bp + 5] ; $str             
1443   0CA6 74            mov d, b
1444   0CA7 32            mov bl, [d]
1445   0CA8 A7 00         mov bh, 0
1446   0CAA             ; START RELATIONAL
1447   0CAA D7            push a
1448   0CAB 11            mov a, b
1449   0CAC 26 2D 00      mov b, $2d
1450   0CAF B0            cmp a, b
1451   0CB0 FD 71         seq ; ==
1452   0CB2 E4            pop a
1453   0CB3             ; END RELATIONAL
1454   0CB3 C0 00 00      cmp b, 0
1455   0CB6 C6 C6 0C      je _if17_exit
1456   0CB9             _if17_true:
1457   0CB9             ;; sign = -1; 
1458   0CB9 FA FD FF      lea d, [bp + -3] ; $sign         
1459   0CBC 26 01 00      mov b, $1
1460   0CBF FD 97         neg b        
1461   0CC1 FD 43         mov [d], b
1462   0CC3 0A C6 0C      jmp _if17_exit
1463   0CC6             _if17_exit:
1464   0CC6             ;; str++; 
1465   0CC6 2C 05 00      mov b, [bp + 5] ; $str             
1466   0CC9 FD 79         mov g, b
1467   0CCB FD 77         inc b
1468   0CCD FA 05 00      lea d, [bp + 5] ; $str
1469   0CD0 FD 43         mov [d], b
1470   0CD2 FD 27         mov b, g
1471   0CD4 0A D7 0C      jmp _if16_exit
1472   0CD7             _if16_exit:
1473   0CD7             ;; while (*str >= '0' && *str <= '9') { 
1474   0CD7             _while18_cond:
1475   0CD7 2C 05 00      mov b, [bp + 5] ; $str             
1476   0CDA 74            mov d, b
1477   0CDB 32            mov bl, [d]
1478   0CDC A7 00         mov bh, 0
1479   0CDE             ; START RELATIONAL
1480   0CDE D7            push a
1481   0CDF 11            mov a, b
1482   0CE0 26 30 00      mov b, $30
1483   0CE3 B0            cmp a, b
1484   0CE4 FD 80         sge ; >=
1485   0CE6 E4            pop a
1486   0CE7             ; END RELATIONAL
1487   0CE7 D7            push a
1488   0CE8 11            mov a, b
1489   0CE9 2C 05 00      mov b, [bp + 5] ; $str             
1490   0CEC 74            mov d, b
1491   0CED 32            mov bl, [d]
1492   0CEE A7 00         mov bh, 0
1493   0CF0             ; START RELATIONAL
1494   0CF0 D7            push a
1495   0CF1 11            mov a, b
1496   0CF2 26 39 00      mov b, $39
1497   0CF5 B0            cmp a, b
1498   0CF6 FD 74         sle ; <=
1499   0CF8 E4            pop a
1500   0CF9             ; END RELATIONAL
1501   0CF9 FD A7         sand a, b ; &&
1502   0CFB E4            pop a
1503   0CFC C0 00 00      cmp b, 0
1504   0CFF C6 3A 0D      je _while18_exit
1505   0D02             _while18_block:
1506   0D02             ;; result = result * 10 + (*str - '0'); 
1507   0D02 FA FF FF      lea d, [bp + -1] ; $result
1508   0D05 DA            push d
1509   0D06 2C FF FF      mov b, [bp + -1] ; $result             
1510   0D09             ; START FACTORS
1511   0D09 D7            push a
1512   0D0A 11            mov a, b
1513   0D0B 26 0A 00      mov b, $a
1514   0D0E AC            mul a, b ; *
1515   0D0F 11            mov a, b
1516   0D10 27            mov b, a
1517   0D11 E4            pop a
1518   0D12             ; END FACTORS
1519   0D12             ; START TERMS
1520   0D12 D7            push a
1521   0D13 11            mov a, b
1522   0D14 2C 05 00      mov b, [bp + 5] ; $str             
1523   0D17 74            mov d, b
1524   0D18 32            mov bl, [d]
1525   0D19 A7 00         mov bh, 0
1526   0D1B             ; START TERMS
1527   0D1B D7            push a
1528   0D1C 11            mov a, b
1529   0D1D 26 30 00      mov b, $30
1530   0D20 60            sub a, b
1531   0D21 27            mov b, a
1532   0D22 E4            pop a
1533   0D23             ; END TERMS
1534   0D23 54            add a, b
1535   0D24 27            mov b, a
1536   0D25 E4            pop a
1537   0D26             ; END TERMS
1538   0D26 E7            pop d
1539   0D27 FD 43         mov [d], b
1540   0D29             ;; str++; 
1541   0D29 2C 05 00      mov b, [bp + 5] ; $str             
1542   0D2C FD 79         mov g, b
1543   0D2E FD 77         inc b
1544   0D30 FA 05 00      lea d, [bp + 5] ; $str
1545   0D33 FD 43         mov [d], b
1546   0D35 FD 27         mov b, g
1547   0D37 0A D7 0C      jmp _while18_cond
1548   0D3A             _while18_exit:
1549   0D3A             ;; return sign * result; 
1550   0D3A 2C FD FF      mov b, [bp + -3] ; $sign             
1551   0D3D             ; START FACTORS
1552   0D3D D7            push a
1553   0D3E 11            mov a, b
1554   0D3F 2C FF FF      mov b, [bp + -1] ; $result             
1555   0D42 AC            mul a, b ; *
1556   0D43 11            mov a, b
1557   0D44 27            mov b, a
1558   0D45 E4            pop a
1559   0D46             ; END FACTORS
1560   0D46 F9            leave
1561   0D47 09            ret
1562   0D48             
1563   0D48             gets:
1564   0D48 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1565   0D4B             
1566   0D4B             ; --- BEGIN INLINE ASM BLOCK
1567   0D4B 17 05 00      mov a, [bp + 5] ; $s             
1568   0D4E 3C            mov d, a
1569   0D4F 07 09 11      call _gets
1570   0D52             ; --- END INLINE ASM BLOCK
1571   0D52             
1572   0D52             ;; return strlen(s); 
1573   0D52 2C 05 00      mov b, [bp + 5] ; $s             
1574   0D55 FD AB         swp b
1575   0D57 D8            push b
1576   0D58 07 C9 08      call strlen
1577   0D5B 51 02 00      add sp, 2
1578   0D5E F9            leave
1579   0D5F 09            ret
1580   0D60             
1581   0D60             prints:
1582   0D60 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1583   0D63             ; $digits 
1584   0D63             ; $i 
1585   0D63 10 00 00      mov a, $0
1586   0D66 45 FA FF      mov [bp + -6], a
1587   0D69 52 07 00      sub sp, 7
1588   0D6C             ;; if (num < 0) { 
1589   0D6C             _if19_cond:
1590   0D6C 2C 05 00      mov b, [bp + 5] ; $num             
1591   0D6F             ; START RELATIONAL
1592   0D6F D7            push a
1593   0D70 11            mov a, b
1594   0D71 26 00 00      mov b, $0
1595   0D74 B0            cmp a, b
1596   0D75 FD 73         slt ; < 
1597   0D77 E4            pop a
1598   0D78             ; END RELATIONAL
1599   0D78 C0 00 00      cmp b, 0
1600   0D7B C6 95 0D      je _if19_else
1601   0D7E             _if19_true:
1602   0D7E             ;; putchar('-'); 
1603   0D7E 26 2D 00      mov b, $2d
1604   0D81 DD            push bl
1605   0D82 07 17 0F      call putchar
1606   0D85 51 01 00      add sp, 1
1607   0D88             ;; num = -num; 
1608   0D88 FA 05 00      lea d, [bp + 5] ; $num         
1609   0D8B 2C 05 00      mov b, [bp + 5] ; $num             
1610   0D8E FD 97         neg b        
1611   0D90 FD 43         mov [d], b
1612   0D92 0A B6 0D      jmp _if19_exit
1613   0D95             _if19_else:
1614   0D95             ;; if (num == 0) { 
1615   0D95             _if20_cond:
1616   0D95 2C 05 00      mov b, [bp + 5] ; $num             
1617   0D98             ; START RELATIONAL
1618   0D98 D7            push a
1619   0D99 11            mov a, b
1620   0D9A 26 00 00      mov b, $0
1621   0D9D B0            cmp a, b
1622   0D9E FD 71         seq ; ==
1623   0DA0 E4            pop a
1624   0DA1             ; END RELATIONAL
1625   0DA1 C0 00 00      cmp b, 0
1626   0DA4 C6 B6 0D      je _if20_exit
1627   0DA7             _if20_true:
1628   0DA7             ;; putchar('0'); 
1629   0DA7 26 30 00      mov b, $30
1630   0DAA DD            push bl
1631   0DAB 07 17 0F      call putchar
1632   0DAE 51 01 00      add sp, 1
1633   0DB1             ;; return; 
1634   0DB1 F9            leave
1635   0DB2 09            ret
1636   0DB3 0A B6 0D      jmp _if20_exit
1637   0DB6             _if20_exit:
1638   0DB6             _if19_exit:
1639   0DB6             ;; while (num > 0) { 
1640   0DB6             _while21_cond:
1641   0DB6 2C 05 00      mov b, [bp + 5] ; $num             
1642   0DB9             ; START RELATIONAL
1643   0DB9 D7            push a
1644   0DBA 11            mov a, b
1645   0DBB 26 00 00      mov b, $0
1646   0DBE B0            cmp a, b
1647   0DBF FD 7F         sgt ; >
1648   0DC1 E4            pop a
1649   0DC2             ; END RELATIONAL
1650   0DC2 C0 00 00      cmp b, 0
1651   0DC5 C6 08 0E      je _while21_exit
1652   0DC8             _while21_block:
1653   0DC8             ;; digits[i] = '0' + (num % 10); 
1654   0DC8 FA FC FF      lea d, [bp + -4] ; $digits
1655   0DCB D7            push a         
1656   0DCC 2C FA FF      mov b, [bp + -6] ; $i                     
1657   0DCF 5A            add d, b
1658   0DD0 E4            pop a         
1659   0DD1 26 30 00      mov b, $30
1660   0DD4             ; START TERMS
1661   0DD4 D7            push a
1662   0DD5 11            mov a, b
1663   0DD6 2C 05 00      mov b, [bp + 5] ; $num             
1664   0DD9             ; START FACTORS
1665   0DD9 D7            push a
1666   0DDA 11            mov a, b
1667   0DDB 26 0A 00      mov b, $a
1668   0DDE AE            div a, b ; 
1669   0DDF 11            mov a, b
1670   0DE0 27            mov b, a
1671   0DE1 E4            pop a
1672   0DE2             ; END FACTORS
1673   0DE2 54            add a, b
1674   0DE3 27            mov b, a
1675   0DE4 E4            pop a
1676   0DE5             ; END TERMS        
1677   0DE5 FD 3E         mov [d], bl
1678   0DE7             ;; num = num / 10; 
1679   0DE7 FA 05 00      lea d, [bp + 5] ; $num         
1680   0DEA 2C 05 00      mov b, [bp + 5] ; $num             
1681   0DED             ; START FACTORS
1682   0DED D7            push a
1683   0DEE 11            mov a, b
1684   0DEF 26 0A 00      mov b, $a
1685   0DF2 AE            div a, b
1686   0DF3 27            mov b, a
1687   0DF4 E4            pop a
1688   0DF5             ; END FACTORS        
1689   0DF5 FD 43         mov [d], b
1690   0DF7             ;; i++; 
1691   0DF7 2C FA FF      mov b, [bp + -6] ; $i             
1692   0DFA FD 79         mov g, b
1693   0DFC FD 77         inc b
1694   0DFE FA FA FF      lea d, [bp + -6] ; $i
1695   0E01 FD 43         mov [d], b
1696   0E03 FD 27         mov b, g
1697   0E05 0A B6 0D      jmp _while21_cond
1698   0E08             _while21_exit:
1699   0E08             ;; while (i > 0) { 
1700   0E08             _while22_cond:
1701   0E08 2C FA FF      mov b, [bp + -6] ; $i             
1702   0E0B             ; START RELATIONAL
1703   0E0B D7            push a
1704   0E0C 11            mov a, b
1705   0E0D 26 00 00      mov b, $0
1706   0E10 B0            cmp a, b
1707   0E11 FD 7F         sgt ; >
1708   0E13 E4            pop a
1709   0E14             ; END RELATIONAL
1710   0E14 C0 00 00      cmp b, 0
1711   0E17 C6 3E 0E      je _while22_exit
1712   0E1A             _while22_block:
1713   0E1A             ;; i--; 
1714   0E1A 2C FA FF      mov b, [bp + -6] ; $i             
1715   0E1D FD 79         mov g, b
1716   0E1F FD 7D         dec b
1717   0E21 FA FA FF      lea d, [bp + -6] ; $i
1718   0E24 FD 43         mov [d], b
1719   0E26 FD 27         mov b, g
1720   0E28             ;; putchar(digits[i]); 
1721   0E28 FA FC FF      lea d, [bp + -4] ; $digits
1722   0E2B D7            push a         
1723   0E2C 2C FA FF      mov b, [bp + -6] ; $i                     
1724   0E2F 5A            add d, b
1725   0E30 E4            pop a
1726   0E31 32            mov bl, [d]
1727   0E32 A7 00         mov bh, 0
1728   0E34 DD            push bl
1729   0E35 07 17 0F      call putchar
1730   0E38 51 01 00      add sp, 1
1731   0E3B 0A 08 0E      jmp _while22_cond
1732   0E3E             _while22_exit:
1733   0E3E F9            leave
1734   0E3F 09            ret
1735   0E40             
1736   0E40             printu:
1737   0E40 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1738   0E43             ; $digits 
1739   0E43             ; $i 
1740   0E43 52 07 00      sub sp, 7
1741   0E46             ;; i = 0; 
1742   0E46 FA FA FF      lea d, [bp + -6] ; $i         
1743   0E49 26 00 00      mov b, $0        
1744   0E4C FD 43         mov [d], b
1745   0E4E             ;; if(num == 0){ 
1746   0E4E             _if23_cond:
1747   0E4E 2C 05 00      mov b, [bp + 5] ; $num             
1748   0E51             ; START RELATIONAL
1749   0E51 D7            push a
1750   0E52 11            mov a, b
1751   0E53 26 00 00      mov b, $0
1752   0E56 B0            cmp a, b
1753   0E57 FD 71         seq ; ==
1754   0E59 E4            pop a
1755   0E5A             ; END RELATIONAL
1756   0E5A C0 00 00      cmp b, 0
1757   0E5D C6 6F 0E      je _if23_exit
1758   0E60             _if23_true:
1759   0E60             ;; putchar('0'); 
1760   0E60 26 30 00      mov b, $30
1761   0E63 DD            push bl
1762   0E64 07 17 0F      call putchar
1763   0E67 51 01 00      add sp, 1
1764   0E6A             ;; return; 
1765   0E6A F9            leave
1766   0E6B 09            ret
1767   0E6C 0A 6F 0E      jmp _if23_exit
1768   0E6F             _if23_exit:
1769   0E6F             ;; while (num > 0) { 
1770   0E6F             _while24_cond:
1771   0E6F 2C 05 00      mov b, [bp + 5] ; $num             
1772   0E72             ; START RELATIONAL
1773   0E72 D7            push a
1774   0E73 11            mov a, b
1775   0E74 26 00 00      mov b, $0
1776   0E77 B0            cmp a, b
1777   0E78 FD 81         sgu ; > (unsigned)
1778   0E7A E4            pop a
1779   0E7B             ; END RELATIONAL
1780   0E7B C0 00 00      cmp b, 0
1781   0E7E C6 C1 0E      je _while24_exit
1782   0E81             _while24_block:
1783   0E81             ;; digits[i] = '0' + (num % 10); 
1784   0E81 FA FC FF      lea d, [bp + -4] ; $digits
1785   0E84 D7            push a         
1786   0E85 2C FA FF      mov b, [bp + -6] ; $i                     
1787   0E88 5A            add d, b
1788   0E89 E4            pop a         
1789   0E8A 26 30 00      mov b, $30
1790   0E8D             ; START TERMS
1791   0E8D D7            push a
1792   0E8E 11            mov a, b
1793   0E8F 2C 05 00      mov b, [bp + 5] ; $num             
1794   0E92             ; START FACTORS
1795   0E92 D7            push a
1796   0E93 11            mov a, b
1797   0E94 26 0A 00      mov b, $a
1798   0E97 AE            div a, b ; 
1799   0E98 11            mov a, b
1800   0E99 27            mov b, a
1801   0E9A E4            pop a
1802   0E9B             ; END FACTORS
1803   0E9B 54            add a, b
1804   0E9C 27            mov b, a
1805   0E9D E4            pop a
1806   0E9E             ; END TERMS        
1807   0E9E FD 3E         mov [d], bl
1808   0EA0             ;; num = num / 10; 
1809   0EA0 FA 05 00      lea d, [bp + 5] ; $num         
1810   0EA3 2C 05 00      mov b, [bp + 5] ; $num             
1811   0EA6             ; START FACTORS
1812   0EA6 D7            push a
1813   0EA7 11            mov a, b
1814   0EA8 26 0A 00      mov b, $a
1815   0EAB AE            div a, b
1816   0EAC 27            mov b, a
1817   0EAD E4            pop a
1818   0EAE             ; END FACTORS        
1819   0EAE FD 43         mov [d], b
1820   0EB0             ;; i++; 
1821   0EB0 2C FA FF      mov b, [bp + -6] ; $i             
1822   0EB3 FD 79         mov g, b
1823   0EB5 FD 77         inc b
1824   0EB7 FA FA FF      lea d, [bp + -6] ; $i
1825   0EBA FD 43         mov [d], b
1826   0EBC FD 27         mov b, g
1827   0EBE 0A 6F 0E      jmp _while24_cond
1828   0EC1             _while24_exit:
1829   0EC1             ;; while (i > 0) { 
1830   0EC1             _while25_cond:
1831   0EC1 2C FA FF      mov b, [bp + -6] ; $i             
1832   0EC4             ; START RELATIONAL
1833   0EC4 D7            push a
1834   0EC5 11            mov a, b
1835   0EC6 26 00 00      mov b, $0
1836   0EC9 B0            cmp a, b
1837   0ECA FD 7F         sgt ; >
1838   0ECC E4            pop a
1839   0ECD             ; END RELATIONAL
1840   0ECD C0 00 00      cmp b, 0
1841   0ED0 C6 F7 0E      je _while25_exit
1842   0ED3             _while25_block:
1843   0ED3             ;; i--; 
1844   0ED3 2C FA FF      mov b, [bp + -6] ; $i             
1845   0ED6 FD 79         mov g, b
1846   0ED8 FD 7D         dec b
1847   0EDA FA FA FF      lea d, [bp + -6] ; $i
1848   0EDD FD 43         mov [d], b
1849   0EDF FD 27         mov b, g
1850   0EE1             ;; putchar(digits[i]); 
1851   0EE1 FA FC FF      lea d, [bp + -4] ; $digits
1852   0EE4 D7            push a         
1853   0EE5 2C FA FF      mov b, [bp + -6] ; $i                     
1854   0EE8 5A            add d, b
1855   0EE9 E4            pop a
1856   0EEA 32            mov bl, [d]
1857   0EEB A7 00         mov bh, 0
1858   0EED DD            push bl
1859   0EEE 07 17 0F      call putchar
1860   0EF1 51 01 00      add sp, 1
1861   0EF4 0A C1 0E      jmp _while25_cond
1862   0EF7             _while25_exit:
1863   0EF7 F9            leave
1864   0EF8 09            ret
1865   0EF9             
1866   0EF9             rand:
1867   0EF9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1868   0EFC             ; $sec 
1869   0EFC 52 01 00      sub sp, 1
1870   0EFF             
1871   0EFF             ; --- BEGIN INLINE ASM BLOCK
1872   0EFF 19 00         mov al, 0
1873   0F01 05 01         syscall sys_rtc					
1874   0F03 1A            mov al, ah
1875   0F04 20 00 00      mov al, [bp + 0] ; $sec
1876   0F07                         
1877   0F07             ; --- END INLINE ASM BLOCK
1878   0F07             
1879   0F07             ;; return sec; 
1880   0F07 34 00 00      mov bl, [bp + 0] ; $sec
1881   0F0A A7 00         mov bh, 0             
1882   0F0C F9            leave
1883   0F0D 09            ret
1884   0F0E             
1885   0F0E             date:
1886   0F0E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1887   0F11             
1888   0F11             ; --- BEGIN INLINE ASM BLOCK
1889   0F11 19 00         mov al, 0 
1890   0F13 05 07         syscall sys_datetime
1891   0F15             ; --- END INLINE ASM BLOCK
1892   0F15             
1893   0F15 F9            leave
1894   0F16 09            ret
1895   0F17             
1896   0F17             putchar:
1897   0F17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1898   0F1A             
1899   0F1A             ; --- BEGIN INLINE ASM BLOCK
1900   0F1A 20 05 00      mov al, [bp + 5] ; $c
1901   0F1D                         
1902   0F1D 23            mov ah, al
1903   0F1E 07 02 11      call _putchar
1904   0F21             ; --- END INLINE ASM BLOCK
1905   0F21             
1906   0F21 F9            leave
1907   0F22 09            ret
1908   0F23             
1909   0F23             getchar:
1910   0F23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1911   0F26             ; $c 
1912   0F26 52 01 00      sub sp, 1
1913   0F29             
1914   0F29             ; --- BEGIN INLINE ASM BLOCK
1915   0F29 07 FB 10      call getch
1916   0F2C 1A            mov al, ah
1917   0F2D FA 00 00      lea d, [bp + 0] ; $c
1918   0F30 3E            mov [d], al
1919   0F31             ; --- END INLINE ASM BLOCK
1920   0F31             
1921   0F31             ;; return c; 
1922   0F31 34 00 00      mov bl, [bp + 0] ; $c
1923   0F34 A7 00         mov bh, 0             
1924   0F36 F9            leave
1925   0F37 09            ret
1926   0F38             
1927   0F38             scann:
1928   0F38 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1929   0F3B             ; $m 
1930   0F3B 52 02 00      sub sp, 2
1931   0F3E             
1932   0F3E             ; --- BEGIN INLINE ASM BLOCK
1933   0F3E 07 46 13      call scan_u16d
1934   0F41 FA FF FF      lea d, [bp + -1] ; $m
1935   0F44 43            mov [d], a
1936   0F45             ; --- END INLINE ASM BLOCK
1937   0F45             
1938   0F45             ;; return m; 
1939   0F45 2C FF FF      mov b, [bp + -1] ; $m             
1940   0F48 F9            leave
1941   0F49 09            ret
1942   0F4A             
1943   0F4A             puts:
1944   0F4A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1945   0F4D             
1946   0F4D             ; --- BEGIN INLINE ASM BLOCK
1947   0F4D 17 05 00      mov a, [bp + 5] ; $s             
1948   0F50 3C            mov d, a
1949   0F51 07 4C 12      call _puts
1950   0F54 22 0A         mov ah, $0A
1951   0F56 19 00         mov al, 0
1952   0F58 05 03         syscall sys_io
1953   0F5A             ; --- END INLINE ASM BLOCK
1954   0F5A             
1955   0F5A F9            leave
1956   0F5B 09            ret
1957   0F5C             
1958   0F5C             print:
1959   0F5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1960   0F5F             
1961   0F5F             ; --- BEGIN INLINE ASM BLOCK
1962   0F5F 17 05 00      mov a, [bp + 5] ; $s             
1963   0F62 3C            mov d, a
1964   0F63 07 4C 12      call _puts
1965   0F66             ; --- END INLINE ASM BLOCK
1966   0F66             
1967   0F66 F9            leave
1968   0F67 09            ret
1969   0F68             
1970   0F68             loadfile:
1971   0F68 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1972   0F6B             
1973   0F6B             ; --- BEGIN INLINE ASM BLOCK
1974   0F6B 17 05 00      mov a, [bp + 5] ; $destination             
1975   0F6E 4F            mov di, a
1976   0F6F FA 07 00      lea d, [bp + 7] ; $filename
1977   0F72 FD 2A         mov d, [d]
1978   0F74 19 14         mov al, 20
1979   0F76 05 04         syscall sys_filesystem
1980   0F78             ; --- END INLINE ASM BLOCK
1981   0F78             
1982   0F78 F9            leave
1983   0F79 09            ret
1984   0F7A             
1985   0F7A             create_file:
1986   0F7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1987   0F7D F9            leave
1988   0F7E 09            ret
1989   0F7F             
1990   0F7F             delete_file:
1991   0F7F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1992   0F82             
1993   0F82             ; --- BEGIN INLINE ASM BLOCK
1994   0F82 FA 05 00      lea d, [bp + 5] ; $filename
1995   0F85 19 0A         mov al, 10
1996   0F87 05 04         syscall sys_filesystem
1997   0F89             ; --- END INLINE ASM BLOCK
1998   0F89             
1999   0F89 F9            leave
2000   0F8A 09            ret
2001   0F8B             
2002   0F8B             fopen:
2003   0F8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2004   0F8E F9            leave
2005   0F8F 09            ret
2006   0F90             
2007   0F90             fclose:
2008   0F90 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2009   0F93 F9            leave
2010   0F94 09            ret
2011   0F95             
2012   0F95             alloc:
2013   0F95 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2014   0F98             ;; heap_top = heap_top + bytes; 
2015   0F98 3B FC 26      mov d, _heap_top ; $heap_top         
2016   0F9B 29 FC 26      mov b, [_heap_top] ; $heap_top           
2017   0F9E             ; START TERMS
2018   0F9E D7            push a
2019   0F9F 11            mov a, b
2020   0FA0 2C 05 00      mov b, [bp + 5] ; $bytes             
2021   0FA3 54            add a, b
2022   0FA4 27            mov b, a
2023   0FA5 E4            pop a
2024   0FA6             ; END TERMS        
2025   0FA6 FD 43         mov [d], b
2026   0FA8             ;; return heap_top - bytes; 
2027   0FA8 29 FC 26      mov b, [_heap_top] ; $heap_top           
2028   0FAB             ; START TERMS
2029   0FAB D7            push a
2030   0FAC 11            mov a, b
2031   0FAD 2C 05 00      mov b, [bp + 5] ; $bytes             
2032   0FB0 60            sub a, b
2033   0FB1 27            mov b, a
2034   0FB2 E4            pop a
2035   0FB3             ; END TERMS
2036   0FB3 F9            leave
2037   0FB4 09            ret
2038   0FB5             
2039   0FB5             free:
2040   0FB5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2041   0FB8             ;; return heap_top = heap_top - bytes; 
2042   0FB8 3B FC 26      mov d, _heap_top ; $heap_top         
2043   0FBB 29 FC 26      mov b, [_heap_top] ; $heap_top           
2044   0FBE             ; START TERMS
2045   0FBE D7            push a
2046   0FBF 11            mov a, b
2047   0FC0 2C 05 00      mov b, [bp + 5] ; $bytes             
2048   0FC3 60            sub a, b
2049   0FC4 27            mov b, a
2050   0FC5 E4            pop a
2051   0FC6             ; END TERMS        
2052   0FC6 FD 43         mov [d], b
2053   0FC8 F9            leave
2054   0FC9 09            ret
2055   0FCA             
2056   0FCA             exit:
2057   0FCA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2058   0FCD             
2059   0FCD             ; --- BEGIN INLINE ASM BLOCK
2060   0FCD 05 0B         syscall sys_terminate_proc
2061   0FCF             ; --- END INLINE ASM BLOCK
2062   0FCF             
2063   0FCF F9            leave
2064   0FD0 09            ret
2065   0FD1             
2066   0FD1             load_hex:
2067   0FD1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2068   0FD4             ; $temp 
2069   0FD4 52 02 00      sub sp, 2
2070   0FD7             ;; temp = alloc(32768); 
2071   0FD7 FA FF FF      lea d, [bp + -1] ; $temp
2072   0FDA DA            push d
2073   0FDB 26 00 80      mov b, $8000
2074   0FDE FD AB         swp b
2075   0FE0 D8            push b
2076   0FE1 07 95 0F      call alloc
2077   0FE4 51 02 00      add sp, 2
2078   0FE7 E7            pop d
2079   0FE8 FD 43         mov [d], b
2080   0FEA             
2081   0FEA             ; --- BEGIN INLINE ASM BLOCK
2082   0FEA               
2083   0FEA               
2084   0FEA               
2085   0FEA               
2086   0FEA               
2087   0FEA             _load_hex:
2088   0FEA D7            push a
2089   0FEB D8            push b
2090   0FEC DA            push d
2091   0FED E2            push si
2092   0FEE E3            push di
2093   0FEF 52 00 80      sub sp, $8000      
2094   0FF2 38 00 00      mov c, 0
2095   0FF5 48            mov a, sp
2096   0FF6 77            inc a
2097   0FF7 3C            mov d, a          
2098   0FF8 07 09 11      call _gets        
2099   0FFB 4D            mov si, a
2100   0FFC             __load_hex_loop:
2101   0FFC F6            lodsb             
2102   0FFD B9 00         cmp al, 0         
2103   0FFF C6 0D 10      jz __load_hex_ret
2104   1002 36            mov bh, al
2105   1003 F6            lodsb
2106   1004 2F            mov bl, al
2107   1005 07 BF 10      call _atoi        
2108   1008 F7            stosb             
2109   1009 78            inc c
2110   100A 0A FC 0F      jmp __load_hex_loop
2111   100D             __load_hex_ret:
2112   100D 51 00 80      add sp, $8000
2113   1010 F0            pop di
2114   1011 EF            pop si
2115   1012 E7            pop d
2116   1013 E5            pop b
2117   1014 E4            pop a
2118   1015             ; --- END INLINE ASM BLOCK
2119   1015             
2120   1015 F9            leave
2121   1016 09            ret
2122   1017             
2123   1017             include_stdio_asm:
2124   1017 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2125   101A             
2126   101A             ; --- BEGIN INLINE ASM BLOCK
2127   101A             .include "lib/stdio.asm"
0001+  101A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  101A             ; stdio.s
0003+  101A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  101A             .include "lib/string.asm"
0001++ 101A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 101A             ; string.s
0003++ 101A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 101A             
0005++ 101A             
0006++ 101A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 101A             ; _strrev
0008++ 101A             ; reverse a string
0009++ 101A             ; D = string address
0010++ 101A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 101A             ; 01234
0012++ 101A             _strrev:
0013++ 101A 4B          	pusha
0014++ 101B 07 61 10    	call _strlen	; length in C
0015++ 101E 12          	mov a, c
0016++ 101F AF 01 00    	cmp a, 1
0017++ 1022 D0 3C 10    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1025 7D          	dec a
0019++ 1026 FD 4E       	mov si, d	; beginning of string
0020++ 1028 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 102A 59          	add d, a	; end of string
0022++ 102B 12          	mov a, c
0023++ 102C FD 9B       	shr a		; divide by 2
0024++ 102E 39          	mov c, a	; C now counts the steps
0025++ 102F             _strrev_L0:
0026++ 102F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1030 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1031 3E          	mov [d], al	; store left char into right side
0029++ 1032 1B          	mov al, bl
0030++ 1033 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1034 7E          	dec c
0032++ 1035 7F          	dec d
0033++ 1036 C2 00 00    	cmp c, 0
0034++ 1039 C7 2F 10    	jne _strrev_L0
0035++ 103C             _strrev_end:
0036++ 103C 4C          	popa
0037++ 103D 09          	ret
0038++ 103E             	
0039++ 103E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 103E             ; _strchr
0041++ 103E             ; search string in D for char in AL
0042++ 103E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 103E             _strchr:
0044++ 103E             _strchr_L0:
0045++ 103E 32          	mov bl, [d]
0046++ 103F C1 00       	cmp bl, 0
0047++ 1041 C6 4C 10    	je _strchr_end
0048++ 1044 BA          	cmp al, bl
0049++ 1045 C6 4C 10    	je _strchr_end
0050++ 1048 79          	inc d
0051++ 1049 0A 3E 10    	jmp _strchr_L0
0052++ 104C             _strchr_end:
0053++ 104C 1B          	mov al, bl
0054++ 104D 09          	ret
0055++ 104E             
0056++ 104E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 104E             ; _strstr
0058++ 104E             ; find sub-string
0059++ 104E             ; str1 in SI
0060++ 104E             ; str2 in DI
0061++ 104E             ; SI points to end of source string
0062++ 104E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 104E             _strstr:
0064++ 104E DB          	push al
0065++ 104F DA          	push d
0066++ 1050 E3          	push di
0067++ 1051             _strstr_loop:
0068++ 1051 F3          	cmpsb					; compare a byte of the strings
0069++ 1052 C7 5D 10    	jne _strstr_ret
0070++ 1055 FC 00 00    	lea d, [di + 0]
0071++ 1058 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 105A C7 51 10    	jne _strstr_loop				; equal chars but not at end
0073++ 105D             _strstr_ret:
0074++ 105D F0          	pop di
0075++ 105E E7          	pop d
0076++ 105F E8          	pop al
0077++ 1060 09          	ret
0078++ 1061             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1061             ; length of null terminated string
0080++ 1061             ; result in C
0081++ 1061             ; pointer in D
0082++ 1061             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1061             _strlen:
0084++ 1061 DA          	push d
0085++ 1062 38 00 00    	mov c, 0
0086++ 1065             _strlen_L1:
0087++ 1065 BD 00       	cmp byte [d], 0
0088++ 1067 C6 6F 10    	je _strlen_ret
0089++ 106A 79          	inc d
0090++ 106B 78          	inc c
0091++ 106C 0A 65 10    	jmp _strlen_L1
0092++ 106F             _strlen_ret:
0093++ 106F E7          	pop d
0094++ 1070 09          	ret
0095++ 1071             
0096++ 1071             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1071             ; STRCMP
0098++ 1071             ; compare two strings
0099++ 1071             ; str1 in SI
0100++ 1071             ; str2 in DI
0101++ 1071             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1071             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1071             _strcmp:
0104++ 1071 DB          	push al
0105++ 1072 DA          	push d
0106++ 1073 E3          	push di
0107++ 1074 E2          	push si
0108++ 1075             _strcmp_loop:
0109++ 1075 F3          	cmpsb					; compare a byte of the strings
0110++ 1076 C7 81 10    	jne _strcmp_ret
0111++ 1079 FB FF FF    	lea d, [si +- 1]
0112++ 107C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 107E C7 75 10    	jne _strcmp_loop				; equal chars but not at end
0114++ 1081             _strcmp_ret:
0115++ 1081 EF          	pop si
0116++ 1082 F0          	pop di
0117++ 1083 E7          	pop d
0118++ 1084 E8          	pop al
0119++ 1085 09          	ret
0120++ 1086             
0121++ 1086             
0122++ 1086             ; STRCPY
0123++ 1086             ; copy null terminated string from SI to DI
0124++ 1086             ; source in SI
0125++ 1086             ; destination in DI
0126++ 1086             _strcpy:
0127++ 1086 E2          	push si
0128++ 1087 E3          	push di
0129++ 1088 DB          	push al
0130++ 1089             _strcpy_L1:
0131++ 1089 F6          	lodsb
0132++ 108A F7          	stosb
0133++ 108B B9 00       	cmp al, 0
0134++ 108D C7 89 10    	jne _strcpy_L1
0135++ 1090             _strcpy_end:
0136++ 1090 E8          	pop al
0137++ 1091 F0          	pop di
0138++ 1092 EF          	pop si
0139++ 1093 09          	ret
0140++ 1094             
0141++ 1094             ; STRCAT
0142++ 1094             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1094             ; source in SI
0144++ 1094             ; destination in DI
0145++ 1094             _strcat:
0146++ 1094 E2          	push si
0147++ 1095 E3          	push di
0148++ 1096 D7          	push a
0149++ 1097 DA          	push d
0150++ 1098 50          	mov a, di
0151++ 1099 3C          	mov d, a
0152++ 109A             _strcat_goto_end_L1:
0153++ 109A BD 00       	cmp byte[d], 0
0154++ 109C C6 A3 10    	je _strcat_start
0155++ 109F 79          	inc d
0156++ 10A0 0A 9A 10    	jmp _strcat_goto_end_L1
0157++ 10A3             _strcat_start:
0158++ 10A3 FD 50       	mov di, d
0159++ 10A5             _strcat_L1:
0160++ 10A5 F6          	lodsb
0161++ 10A6 F7          	stosb
0162++ 10A7 B9 00       	cmp al, 0
0163++ 10A9 C7 A5 10    	jne _strcat_L1
0164++ 10AC             _strcat_end:
0165++ 10AC E7          	pop d
0166++ 10AD E4          	pop a
0167++ 10AE F0          	pop di
0168++ 10AF EF          	pop si
0169++ 10B0 09          	ret
0170++ 10B1             
0171++ 10B1             
0005+  10B1             
0006+  10B1             
0007+  10B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  10B1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  10B1             ; ASCII in BL
0010+  10B1             ; result in AL
0011+  10B1             ; ascii for F = 0100 0110
0012+  10B1             ; ascii for 9 = 0011 1001
0013+  10B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  10B1             hex_ascii_encode:
0015+  10B1 1B            mov al, bl
0016+  10B2 93 40         test al, $40        ; test if letter or number
0017+  10B4 C7 BA 10      jnz hex_letter
0018+  10B7 87 0F         and al, $0F        ; get number
0019+  10B9 09            ret
0020+  10BA             hex_letter:
0021+  10BA 87 0F         and al, $0F        ; get letter
0022+  10BC 6A 09         add al, 9
0023+  10BE 09            ret
0024+  10BF             
0025+  10BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  10BF             ; ATOI
0027+  10BF             ; 2 letter hex string in B
0028+  10BF             ; 8bit integer returned in AL
0029+  10BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  10BF             _atoi:
0031+  10BF D8            push b
0032+  10C0 07 B1 10      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  10C3 30            mov bl, bh
0034+  10C4 DB            push al          ; save a
0035+  10C5 07 B1 10      call hex_ascii_encode
0036+  10C8 EA            pop bl  
0037+  10C9 FD 9E 04      shl al, 4
0038+  10CC 8C            or al, bl
0039+  10CD E5            pop b
0040+  10CE 09            ret  
0041+  10CF             
0042+  10CF             
0043+  10CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  10CF             ; scanf
0045+  10CF             ; no need for explanations!
0046+  10CF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  10CF             scanf:
0048+  10CF 09            ret
0049+  10D0             
0050+  10D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  10D0             ; ITOA
0052+  10D0             ; 8bit value in BL
0053+  10D0             ; 2 byte ASCII result in A
0054+  10D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  10D0             _itoa:
0056+  10D0 DA            push d
0057+  10D1 D8            push b
0058+  10D2 A7 00         mov bh, 0
0059+  10D4 FD A4 04      shr bl, 4  
0060+  10D7 74            mov d, b
0061+  10D8 1F 80 13      mov al, [d + s_hex_digits]
0062+  10DB 23            mov ah, al
0063+  10DC               
0064+  10DC E5            pop b
0065+  10DD D8            push b
0066+  10DE A7 00         mov bh, 0
0067+  10E0 FD 87 0F      and bl, $0F
0068+  10E3 74            mov d, b
0069+  10E4 1F 80 13      mov al, [d + s_hex_digits]
0070+  10E7 E5            pop b
0071+  10E8 E7            pop d
0072+  10E9 09            ret
0073+  10EA             
0074+  10EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  10EA             ; HEX STRING TO BINARY
0076+  10EA             ; di = destination address
0077+  10EA             ; si = source
0078+  10EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  10EA             _hex_to_int:
0080+  10EA             _hex_to_int_L1:
0081+  10EA F6            lodsb          ; load from [SI] to AL
0082+  10EB B9 00         cmp al, 0        ; check if ASCII 0
0083+  10ED C6 FA 10      jz _hex_to_int_ret
0084+  10F0 36            mov bh, al
0085+  10F1 F6            lodsb
0086+  10F2 2F            mov bl, al
0087+  10F3 07 BF 10      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  10F6 F7            stosb          ; store AL to [DI]
0089+  10F7 0A EA 10      jmp _hex_to_int_L1
0090+  10FA             _hex_to_int_ret:
0091+  10FA 09            ret    
0092+  10FB             
0093+  10FB             
0094+  10FB             
0095+  10FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  10FB             ; GETCHAR
0097+  10FB             ; char in ah
0098+  10FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  10FB             getch:
0100+  10FB DB            push al
0101+  10FC             getch_retry:
0102+  10FC 19 01         mov al, 1
0103+  10FE 05 03         syscall sys_io      ; receive in AH
0104+  1100 E8            pop al
0105+  1101 09            ret
0106+  1102             
0107+  1102             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  1102             ; PUTCHAR
0109+  1102             ; char in ah
0110+  1102             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1102             _putchar:
0112+  1102 D7            push a
0113+  1103 19 00         mov al, 0
0114+  1105 05 03         syscall sys_io      ; char in AH
0115+  1107 E4            pop a
0116+  1108 09            ret
0117+  1109             
0118+  1109             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  1109             ;; INPUT A STRING
0120+  1109             ;; terminates with null
0121+  1109             ;; pointer in D
0122+  1109             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  1109             _gets:
0124+  1109 D7            push a
0125+  110A DA            push d
0126+  110B             _gets_loop:
0127+  110B 19 01         mov al, 1
0128+  110D 05 03         syscall sys_io      ; receive in AH
0129+  110F B9 00         cmp al, 0        ; check error code (AL)
0130+  1111 C6 0B 11      je _gets_loop      ; if no char received, retry
0131+  1114             
0132+  1114 76 1B         cmp ah, 27
0133+  1116 C6 37 11      je _gets_ansi_esc
0134+  1119 76 0A         cmp ah, $0A        ; LF
0135+  111B C6 A2 11      je _gets_end
0136+  111E 76 0D         cmp ah, $0D        ; CR
0137+  1120 C6 A2 11      je _gets_end
0138+  1123 76 5C         cmp ah, $5C        ; '\\'
0139+  1125 C6 63 11      je _gets_escape
0140+  1128               
0141+  1128 76 08         cmp ah, $08      ; check for backspace
0142+  112A C6 33 11      je _gets_backspace
0143+  112D             
0144+  112D 1A            mov al, ah
0145+  112E 3E            mov [d], al
0146+  112F 79            inc d
0147+  1130 0A 0B 11      jmp _gets_loop
0148+  1133             _gets_backspace:
0149+  1133 7F            dec d
0150+  1134 0A 0B 11      jmp _gets_loop
0151+  1137             _gets_ansi_esc:
0152+  1137 19 01         mov al, 1
0153+  1139 05 03         syscall sys_io        ; receive in AH without echo
0154+  113B B9 00         cmp al, 0          ; check error code (AL)
0155+  113D C6 37 11      je _gets_ansi_esc    ; if no char received, retry
0156+  1140 76 5B         cmp ah, '['
0157+  1142 C7 0B 11      jne _gets_loop
0158+  1145             _gets_ansi_esc_2:
0159+  1145 19 01         mov al, 1
0160+  1147 05 03         syscall sys_io          ; receive in AH without echo
0161+  1149 B9 00         cmp al, 0            ; check error code (AL)
0162+  114B C6 45 11      je _gets_ansi_esc_2  ; if no char received, retry
0163+  114E 76 44         cmp ah, 'D'
0164+  1150 C6 5B 11      je _gets_left_arrow
0165+  1153 76 43         cmp ah, 'C'
0166+  1155 C6 5F 11      je _gets_right_arrow
0167+  1158 0A 0B 11      jmp _gets_loop
0168+  115B             _gets_left_arrow:
0169+  115B 7F            dec d
0170+  115C 0A 0B 11      jmp _gets_loop
0171+  115F             _gets_right_arrow:
0172+  115F 79            inc d
0173+  1160 0A 0B 11      jmp _gets_loop
0174+  1163             _gets_escape:
0175+  1163 19 01         mov al, 1
0176+  1165 05 03         syscall sys_io      ; receive in AH
0177+  1167 B9 00         cmp al, 0        ; check error code (AL)
0178+  1169 C6 63 11      je _gets_escape      ; if no char received, retry
0179+  116C 76 6E         cmp ah, 'n'
0180+  116E C6 8D 11      je _gets_LF
0181+  1171 76 72         cmp ah, 'r'
0182+  1173 C6 94 11      je _gets_CR
0183+  1176 76 30         cmp ah, '0'
0184+  1178 C6 9B 11      je _gets_NULL
0185+  117B 76 5C         cmp ah, $5C  ; '\'
0186+  117D C6 86 11      je _gets_slash
0187+  1180 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  1181 3E            mov [d], al
0189+  1182 79            inc d
0190+  1183 0A 0B 11      jmp _gets_loop
0191+  1186             _gets_slash:
0192+  1186 19 5C         mov al, $5C
0193+  1188 3E            mov [d], al
0194+  1189 79            inc d
0195+  118A 0A 0B 11      jmp _gets_loop
0196+  118D             _gets_LF:
0197+  118D 19 0A         mov al, $0A
0198+  118F 3E            mov [d], al
0199+  1190 79            inc d
0200+  1191 0A 0B 11      jmp _gets_loop
0201+  1194             _gets_CR:
0202+  1194 19 0D         mov al, $0D
0203+  1196 3E            mov [d], al
0204+  1197 79            inc d
0205+  1198 0A 0B 11      jmp _gets_loop
0206+  119B             _gets_NULL:
0207+  119B 19 00         mov al, $00
0208+  119D 3E            mov [d], al
0209+  119E 79            inc d
0210+  119F 0A 0B 11      jmp _gets_loop
0211+  11A2             _gets_end:
0212+  11A2 19 00         mov al, 0
0213+  11A4 3E            mov [d], al        ; terminate string
0214+  11A5 E7            pop d
0215+  11A6 E4            pop a
0216+  11A7 09            ret
0217+  11A8             
0218+  11A8             
0219+  11A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  11A8             ;; INPUT TEXT
0221+  11A8             ;; terminated with CTRL+D
0222+  11A8             ;; pointer in D
0223+  11A8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  11A8             _gettxt:
0225+  11A8 D7            push a
0226+  11A9 DA            push d
0227+  11AA             _gettxt_loop:
0228+  11AA 19 01         mov al, 1
0229+  11AC 05 03         syscall sys_io      ; receive in AH
0230+  11AE B9 00         cmp al, 0        ; check error code (AL)
0231+  11B0 C6 AA 11      je _gettxt_loop    ; if no char received, retry
0232+  11B3 76 04         cmp ah, 4      ; EOT
0233+  11B5 C6 F3 11      je _gettxt_end
0234+  11B8 76 08         cmp ah, $08      ; check for backspace
0235+  11BA C6 EF 11      je _gettxt_backspace
0236+  11BD 76 5C         cmp ah, $5C        ; '\'
0237+  11BF C6 C8 11      je _gettxt_escape
0238+  11C2 1A            mov al, ah
0239+  11C3 3E            mov [d], al
0240+  11C4 79            inc d
0241+  11C5 0A AA 11      jmp _gettxt_loop
0242+  11C8             _gettxt_escape:
0243+  11C8 19 01         mov al, 1
0244+  11CA 05 03         syscall sys_io      ; receive in AH
0245+  11CC B9 00         cmp al, 0        ; check error code (AL)
0246+  11CE C6 C8 11      je _gettxt_escape    ; if no char received, retry
0247+  11D1 76 6E         cmp ah, 'n'
0248+  11D3 C6 E1 11      je _gettxt_LF
0249+  11D6 76 72         cmp ah, 'r'
0250+  11D8 C6 E8 11      je _gettxt_CR
0251+  11DB 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  11DC 3E            mov [d], al
0253+  11DD 79            inc d
0254+  11DE 0A AA 11      jmp _gettxt_loop
0255+  11E1             _gettxt_LF:
0256+  11E1 19 0A         mov al, $0A
0257+  11E3 3E            mov [d], al
0258+  11E4 79            inc d
0259+  11E5 0A AA 11      jmp _gettxt_loop
0260+  11E8             _gettxt_CR:
0261+  11E8 19 0D         mov al, $0D
0262+  11EA 3E            mov [d], al
0263+  11EB 79            inc d
0264+  11EC 0A AA 11      jmp _gettxt_loop
0265+  11EF             _gettxt_backspace:
0266+  11EF 7F            dec d
0267+  11F0 0A AA 11      jmp _gettxt_loop
0268+  11F3             _gettxt_end:
0269+  11F3 19 00         mov al, 0
0270+  11F5 3E            mov [d], al        ; terminate string
0271+  11F6 E7            pop d
0272+  11F7 E4            pop a
0273+  11F8 09            ret
0274+  11F9             
0275+  11F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  11F9             ; PRINT NEW LINE
0277+  11F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  11F9             printnl:
0279+  11F9 D7            push a
0280+  11FA 10 00 0A      mov a, $0A00
0281+  11FD 05 03         syscall sys_io
0282+  11FF 10 00 0D      mov a, $0D00
0283+  1202 05 03         syscall sys_io
0284+  1204 E4            pop a
0285+  1205 09            ret
0286+  1206             
0287+  1206             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  1206             ; _strtoint
0289+  1206             ; 4 digit hex string number in d
0290+  1206             ; integer returned in A
0291+  1206             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  1206             _strtointx:
0293+  1206 D8            push b
0294+  1207 32            mov bl, [d]
0295+  1208 37            mov bh, bl
0296+  1209 33 01 00      mov bl, [d + 1]
0297+  120C 07 BF 10      call _atoi        ; convert to int in AL
0298+  120F 23            mov ah, al        ; move to AH
0299+  1210 33 02 00      mov bl, [d + 2]
0300+  1213 37            mov bh, bl
0301+  1214 33 03 00      mov bl, [d + 3]
0302+  1217 07 BF 10      call _atoi        ; convert to int in AL
0303+  121A E5            pop b
0304+  121B 09            ret
0305+  121C             
0306+  121C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  121C             ; _strtoint
0308+  121C             ; 5 digit base10 string number in d
0309+  121C             ; integer returned in A
0310+  121C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  121C             _strtoint:
0312+  121C E2            push si
0313+  121D D8            push b
0314+  121E D9            push c
0315+  121F DA            push d
0316+  1220 07 61 10      call _strlen      ; get string length in C
0317+  1223 7E            dec c
0318+  1224 FD 4E         mov si, d
0319+  1226 12            mov a, c
0320+  1227 FD 99         shl a
0321+  1229 3B 98 13      mov d, table_power
0322+  122C 59            add d, a
0323+  122D 38 00 00      mov c, 0
0324+  1230             _strtoint_L0:
0325+  1230 F6            lodsb      ; load ASCII to al
0326+  1231 B9 00         cmp al, 0
0327+  1233 C6 46 12      je _strtoint_end
0328+  1236 6F 30         sub al, $30    ; make into integer
0329+  1238 22 00         mov ah, 0
0330+  123A 2A            mov b, [d]
0331+  123B AC            mul a, b      ; result in B since it fits in 16bits
0332+  123C 11            mov a, b
0333+  123D 28            mov b, c
0334+  123E 54            add a, b
0335+  123F 39            mov c, a
0336+  1240 63 02 00      sub d, 2
0337+  1243 0A 30 12      jmp _strtoint_L0
0338+  1246             _strtoint_end:
0339+  1246 12            mov a, c
0340+  1247 E7            pop d
0341+  1248 E6            pop c
0342+  1249 E5            pop b
0343+  124A EF            pop si
0344+  124B 09            ret
0345+  124C             
0346+  124C             
0347+  124C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  124C             ; PRINT NULL TERMINATED STRING
0349+  124C             ; pointer in D
0350+  124C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  124C             _puts:
0352+  124C D7            push a
0353+  124D DA            push d
0354+  124E             _puts_L1:
0355+  124E 1E            mov al, [d]
0356+  124F B9 00         cmp al, 0
0357+  1251 C6 5D 12      jz _puts_END
0358+  1254 23            mov ah, al
0359+  1255 19 00         mov al, 0
0360+  1257 05 03         syscall sys_io
0361+  1259 79            inc d
0362+  125A 0A 4E 12      jmp _puts_L1
0363+  125D             _puts_END:
0364+  125D E7            pop d
0365+  125E E4            pop a
0366+  125F 09            ret
0367+  1260             
0368+  1260             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1260             ; PRINT N SIZE STRING
0370+  1260             ; pointer in D
0371+  1260             ; size in C
0372+  1260             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1260             _putsn:
0374+  1260 DB            push al
0375+  1261 DA            push d
0376+  1262 D9            push c
0377+  1263             _putsn_L0:
0378+  1263 1E            mov al, [d]
0379+  1264 23            mov ah, al
0380+  1265 19 00         mov al, 0
0381+  1267 05 03         syscall sys_io
0382+  1269 79            inc d
0383+  126A 7E            dec c  
0384+  126B C2 00 00      cmp c, 0
0385+  126E C7 63 12      jne _putsn_L0
0386+  1271             _putsn_end:
0387+  1271 E6            pop c
0388+  1272 E7            pop d
0389+  1273 E8            pop al
0390+  1274 09            ret
0391+  1275             
0392+  1275             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  1275             ; print 16bit decimal number
0394+  1275             ; input number in A
0395+  1275             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  1275             print_u16d:
0397+  1275 D7            push a
0398+  1276 D8            push b
0399+  1277 26 10 27      mov b, 10000
0400+  127A AE            div a, b      ; get 10000's coeff.
0401+  127B 07 9D 12      call print_number
0402+  127E 11            mov a, b
0403+  127F 26 E8 03      mov b, 1000
0404+  1282 AE            div a, b      ; get 1000's coeff.
0405+  1283 07 9D 12      call print_number
0406+  1286 11            mov a, b
0407+  1287 26 64 00      mov b, 100
0408+  128A AE            div a, b
0409+  128B 07 9D 12      call print_number
0410+  128E 11            mov a, b
0411+  128F 26 0A 00      mov b, 10
0412+  1292 AE            div a, b
0413+  1293 07 9D 12      call print_number
0414+  1296 1B            mov al, bl      ; 1's coeff in bl
0415+  1297 07 9D 12      call print_number
0416+  129A E5            pop b
0417+  129B E4            pop a
0418+  129C 09            ret
0419+  129D             
0420+  129D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  129D             ; print AL
0422+  129D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  129D             print_number:
0424+  129D 6A 30         add al, $30
0425+  129F 23            mov ah, al
0426+  12A0 07 02 11      call _putchar
0427+  12A3 09            ret
0428+  12A4             
0429+  12A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  12A4             ; PRINT 16BIT HEX INTEGER
0431+  12A4             ; integer value in reg B
0432+  12A4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  12A4             print_u16x:
0434+  12A4 D7            push a
0435+  12A5 D8            push b
0436+  12A6 DD            push bl
0437+  12A7 30            mov bl, bh
0438+  12A8 07 D0 10      call _itoa        ; convert bh to char in A
0439+  12AB 2F            mov bl, al        ; save al
0440+  12AC 19 00         mov al, 0
0441+  12AE 05 03         syscall sys_io        ; display AH
0442+  12B0 24            mov ah, bl        ; retrieve al
0443+  12B1 19 00         mov al, 0
0444+  12B3 05 03         syscall sys_io        ; display AL
0445+  12B5             
0446+  12B5 EA            pop bl
0447+  12B6 07 D0 10      call _itoa        ; convert bh to char in A
0448+  12B9 2F            mov bl, al        ; save al
0449+  12BA 19 00         mov al, 0
0450+  12BC 05 03         syscall sys_io        ; display AH
0451+  12BE 24            mov ah, bl        ; retrieve al
0452+  12BF 19 00         mov al, 0
0453+  12C1 05 03         syscall sys_io        ; display AL
0454+  12C3             
0455+  12C3 E5            pop b
0456+  12C4 E4            pop a
0457+  12C5 09            ret
0458+  12C6             
0459+  12C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  12C6             ; INPUT 16BIT HEX INTEGER
0461+  12C6             ; read 16bit integer into A
0462+  12C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  12C6             scan_u16x:
0464+  12C6 F8 10 00      enter 16
0465+  12C9 D8            push b
0466+  12CA DA            push d
0467+  12CB             
0468+  12CB FA F1 FF      lea d, [bp + -15]
0469+  12CE 07 09 11      call _gets        ; get number
0470+  12D1             
0471+  12D1 32            mov bl, [d]
0472+  12D2 37            mov bh, bl
0473+  12D3 33 01 00      mov bl, [d + 1]
0474+  12D6 07 BF 10      call _atoi        ; convert to int in AL
0475+  12D9 23            mov ah, al        ; move to AH
0476+  12DA             
0477+  12DA 33 02 00      mov bl, [d + 2]
0478+  12DD 37            mov bh, bl
0479+  12DE 33 03 00      mov bl, [d + 3]
0480+  12E1 07 BF 10      call _atoi        ; convert to int in AL
0481+  12E4             
0482+  12E4 E7            pop d
0483+  12E5 E5            pop b
0484+  12E6 F9            leave
0485+  12E7 09            ret
0486+  12E8             
0487+  12E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  12E8             ; PRINT 8bit HEX INTEGER
0489+  12E8             ; integer value in reg bl
0490+  12E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  12E8             print_u8x:
0492+  12E8 D7            push a
0493+  12E9 DD            push bl
0494+  12EA             
0495+  12EA 07 D0 10      call _itoa        ; convert bl to char in A
0496+  12ED 2F            mov bl, al        ; save al
0497+  12EE 19 00         mov al, 0
0498+  12F0 05 03         syscall sys_io        ; display AH
0499+  12F2 24            mov ah, bl        ; retrieve al
0500+  12F3 19 00         mov al, 0
0501+  12F5 05 03         syscall sys_io        ; display AL
0502+  12F7             
0503+  12F7 EA            pop bl
0504+  12F8 E4            pop a
0505+  12F9 09            ret
0506+  12FA             
0507+  12FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  12FA             ; print 8bit decimal unsigned number
0509+  12FA             ; input number in AL
0510+  12FA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  12FA             print_u8d:
0512+  12FA D7            push a
0513+  12FB D8            push b
0514+  12FC             
0515+  12FC 22 00         mov ah, 0
0516+  12FE 26 64 00      mov b, 100
0517+  1301 AE            div a, b
0518+  1302 D8            push b      ; save remainder
0519+  1303 B9 00         cmp al, 0
0520+  1305 C6 0F 13      je skip100
0521+  1308 6A 30         add al, $30
0522+  130A 23            mov ah, al
0523+  130B 19 00         mov al, 0
0524+  130D 05 03         syscall sys_io  ; print coeff
0525+  130F             skip100:
0526+  130F E4            pop a
0527+  1310 22 00         mov ah, 0
0528+  1312 26 0A 00      mov b, 10
0529+  1315 AE            div a, b
0530+  1316 D8            push b      ; save remainder
0531+  1317 B9 00         cmp al, 0
0532+  1319 C6 23 13      je skip10
0533+  131C 6A 30         add al, $30
0534+  131E 23            mov ah, al
0535+  131F 19 00         mov al, 0
0536+  1321 05 03         syscall sys_io  ; print coeff
0537+  1323             skip10:
0538+  1323 E4            pop a
0539+  1324 1B            mov al, bl
0540+  1325 6A 30         add al, $30
0541+  1327 23            mov ah, al
0542+  1328 19 00         mov al, 0
0543+  132A 05 03         syscall sys_io  ; print coeff
0544+  132C E5            pop b
0545+  132D E4            pop a
0546+  132E 09            ret
0547+  132F             
0548+  132F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  132F             ; INPUT 8BIT HEX INTEGER
0550+  132F             ; read 8bit integer into AL
0551+  132F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  132F             scan_u8x:
0553+  132F F8 04 00      enter 4
0554+  1332 D8            push b
0555+  1333 DA            push d
0556+  1334             
0557+  1334 FA FD FF      lea d, [bp + -3]
0558+  1337 07 09 11      call _gets        ; get number
0559+  133A             
0560+  133A 32            mov bl, [d]
0561+  133B 37            mov bh, bl
0562+  133C 33 01 00      mov bl, [d + 1]
0563+  133F 07 BF 10      call _atoi        ; convert to int in AL
0564+  1342             
0565+  1342 E7            pop d
0566+  1343 E5            pop b
0567+  1344 F9            leave
0568+  1345 09            ret
0569+  1346             
0570+  1346             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  1346             ; input decimal number
0572+  1346             ; result in A
0573+  1346             ; 655'\0'
0574+  1346             ; low--------high
0575+  1346             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  1346             scan_u16d:
0577+  1346 F8 08 00      enter 8
0578+  1349 E2            push si
0579+  134A D8            push b
0580+  134B D9            push c
0581+  134C DA            push d
0582+  134D FA F9 FF      lea d, [bp +- 7]
0583+  1350 07 09 11      call _gets
0584+  1353 07 61 10      call _strlen      ; get string length in C
0585+  1356 7E            dec c
0586+  1357 FD 4E         mov si, d
0587+  1359 12            mov a, c
0588+  135A FD 99         shl a
0589+  135C 3B 98 13      mov d, table_power
0590+  135F 59            add d, a
0591+  1360 38 00 00      mov c, 0
0592+  1363             mul_loop:
0593+  1363 F6            lodsb      ; load ASCII to al
0594+  1364 B9 00         cmp al, 0
0595+  1366 C6 79 13      je mul_exit
0596+  1369 6F 30         sub al, $30    ; make into integer
0597+  136B 22 00         mov ah, 0
0598+  136D 2A            mov b, [d]
0599+  136E AC            mul a, b      ; result in B since it fits in 16bits
0600+  136F 11            mov a, b
0601+  1370 28            mov b, c
0602+  1371 54            add a, b
0603+  1372 39            mov c, a
0604+  1373 63 02 00      sub d, 2
0605+  1376 0A 63 13      jmp mul_loop
0606+  1379             mul_exit:
0607+  1379 12            mov a, c
0608+  137A E7            pop d
0609+  137B E6            pop c
0610+  137C E5            pop b
0611+  137D EF            pop si
0612+  137E F9            leave
0613+  137F 09            ret
0614+  1380             
0615+  1380             
0616+  1380 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  1384 34 35 36 37 
0616+  1388 38 39 41 42 
0616+  138C 43 44 45 46 
0617+  1390 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  1394 1B 5B 48 00 
0618+  1398             
0619+  1398             table_power:
0620+  1398 01 00         .dw 1
0621+  139A 0A 00         .dw 10
0622+  139C 64 00         .dw 100
0623+  139E E8 03         .dw 1000
0624+  13A0 10 27         .dw 100002128   13A2             ; --- END INLINE ASM BLOCK
2129   13A2             
2130   13A2 F9            leave
2131   13A3 09            ret
2132   13A4             
2133   13A4             back:
2134   13A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2135   13A7             ; $t 
2136   13A7 52 02 00      sub sp, 2
2137   13AA             ;; t = token; 
2138   13AA FA FF FF      lea d, [bp + -1] ; $t         
2139   13AD 26 74 24      mov b, _token_data ; $token                   
2140   13B0 FD 43         mov [d], b
2141   13B2             ;; while(*t++) prog--; 
2142   13B2             _while26_cond:
2143   13B2 2C FF FF      mov b, [bp + -1] ; $t             
2144   13B5 FD 79         mov g, b
2145   13B7 FD 77         inc b
2146   13B9 FA FF FF      lea d, [bp + -1] ; $t
2147   13BC FD 43         mov [d], b
2148   13BE FD 27         mov b, g
2149   13C0 74            mov d, b
2150   13C1 32            mov bl, [d]
2151   13C2 A7 00         mov bh, 0
2152   13C4 C0 00 00      cmp b, 0
2153   13C7 C6 DB 13      je _while26_exit
2154   13CA             _while26_block:
2155   13CA             ;; prog--; 
2156   13CA 29 72 24      mov b, [_prog] ; $prog           
2157   13CD FD 79         mov g, b
2158   13CF FD 7D         dec b
2159   13D1 3B 72 24      mov d, _prog ; $prog
2160   13D4 FD 43         mov [d], b
2161   13D6 FD 27         mov b, g
2162   13D8 0A B2 13      jmp _while26_cond
2163   13DB             _while26_exit:
2164   13DB             ;; tok = TOK_UNDEF; 
2165   13DB 3B 6E 24      mov d, _tok ; $tok         
2166   13DE 26 00 00      mov b, 0; TOK_UNDEF        
2167   13E1 FD 43         mov [d], b
2168   13E3             ;; toktype = TYPE_UNDEF; 
2169   13E3 3B 70 24      mov d, _toktype ; $toktype         
2170   13E6 26 00 00      mov b, 0; TYPE_UNDEF        
2171   13E9 FD 43         mov [d], b
2172   13EB             ;; token[0] = '\0'; 
2173   13EB 3B 74 24      mov d, _token_data ; $token
2174   13EE D7            push a         
2175   13EF 26 00 00      mov b, $0        
2176   13F2 5A            add d, b
2177   13F3 E4            pop a         
2178   13F4 26 00 00      mov b, $0        
2179   13F7 FD 3E         mov [d], bl
2180   13F9 F9            leave
2181   13FA 09            ret
2182   13FB             
2183   13FB             get_path:
2184   13FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2185   13FE             ; $t 
2186   13FE 52 02 00      sub sp, 2
2187   1401             ;; *token = '\0'; 
2188   1401 26 74 24      mov b, _token_data ; $token           
2189   1404 D8            push b
2190   1405 26 00 00      mov b, $0
2191   1408 E7            pop d
2192   1409 FD 3E         mov [d], bl
2193   140B             ;; t = token; 
2194   140B FA FF FF      lea d, [bp + -1] ; $t         
2195   140E 26 74 24      mov b, _token_data ; $token                   
2196   1411 FD 43         mov [d], b
2197   1413             ;; while(is_space(*prog)) prog++; 
2198   1413             _while27_cond:
2199   1413 29 72 24      mov b, [_prog] ; $prog           
2200   1416 74            mov d, b
2201   1417 32            mov bl, [d]
2202   1418 A7 00         mov bh, 0
2203   141A DD            push bl
2204   141B 07 EC 04      call is_space
2205   141E 51 01 00      add sp, 1
2206   1421 C0 00 00      cmp b, 0
2207   1424 C6 38 14      je _while27_exit
2208   1427             _while27_block:
2209   1427             ;; prog++; 
2210   1427 29 72 24      mov b, [_prog] ; $prog           
2211   142A FD 79         mov g, b
2212   142C FD 77         inc b
2213   142E 3B 72 24      mov d, _prog ; $prog
2214   1431 FD 43         mov [d], b
2215   1433 FD 27         mov b, g
2216   1435 0A 13 14      jmp _while27_cond
2217   1438             _while27_exit:
2218   1438             ;; if(*prog == '\0'){ 
2219   1438             _if28_cond:
2220   1438 29 72 24      mov b, [_prog] ; $prog           
2221   143B 74            mov d, b
2222   143C 32            mov bl, [d]
2223   143D A7 00         mov bh, 0
2224   143F             ; START RELATIONAL
2225   143F D7            push a
2226   1440 11            mov a, b
2227   1441 26 00 00      mov b, $0
2228   1444 B0            cmp a, b
2229   1445 FD 71         seq ; ==
2230   1447 E4            pop a
2231   1448             ; END RELATIONAL
2232   1448 C0 00 00      cmp b, 0
2233   144B C6 53 14      je _if28_exit
2234   144E             _if28_true:
2235   144E             ;; return; 
2236   144E F9            leave
2237   144F 09            ret
2238   1450 0A 53 14      jmp _if28_exit
2239   1453             _if28_exit:
2240   1453             ;; while( 
2241   1453             _while29_cond:
2242   1453 29 72 24      mov b, [_prog] ; $prog           
2243   1456 74            mov d, b
2244   1457 32            mov bl, [d]
2245   1458 A7 00         mov bh, 0
2246   145A             ; START RELATIONAL
2247   145A D7            push a
2248   145B 11            mov a, b
2249   145C 26 61 00      mov b, $61
2250   145F B0            cmp a, b
2251   1460 FD 80         sge ; >=
2252   1462 E4            pop a
2253   1463             ; END RELATIONAL
2254   1463 D7            push a
2255   1464 11            mov a, b
2256   1465 29 72 24      mov b, [_prog] ; $prog           
2257   1468 74            mov d, b
2258   1469 32            mov bl, [d]
2259   146A A7 00         mov bh, 0
2260   146C             ; START RELATIONAL
2261   146C D7            push a
2262   146D 11            mov a, b
2263   146E 26 7A 00      mov b, $7a
2264   1471 B0            cmp a, b
2265   1472 FD 74         sle ; <=
2266   1474 E4            pop a
2267   1475             ; END RELATIONAL
2268   1475 FD A7         sand a, b ; &&
2269   1477 E4            pop a
2270   1478 D7            push a
2271   1479 11            mov a, b
2272   147A 29 72 24      mov b, [_prog] ; $prog           
2273   147D 74            mov d, b
2274   147E 32            mov bl, [d]
2275   147F A7 00         mov bh, 0
2276   1481             ; START RELATIONAL
2277   1481 D7            push a
2278   1482 11            mov a, b
2279   1483 26 41 00      mov b, $41
2280   1486 B0            cmp a, b
2281   1487 FD 80         sge ; >=
2282   1489 E4            pop a
2283   148A             ; END RELATIONAL
2284   148A D7            push a
2285   148B 11            mov a, b
2286   148C 29 72 24      mov b, [_prog] ; $prog           
2287   148F 74            mov d, b
2288   1490 32            mov bl, [d]
2289   1491 A7 00         mov bh, 0
2290   1493             ; START RELATIONAL
2291   1493 D7            push a
2292   1494 11            mov a, b
2293   1495 26 5A 00      mov b, $5a
2294   1498 B0            cmp a, b
2295   1499 FD 74         sle ; <=
2296   149B E4            pop a
2297   149C             ; END RELATIONAL
2298   149C FD A7         sand a, b ; &&
2299   149E E4            pop a
2300   149F FD A8         sor a, b ; ||
2301   14A1 11            mov a, b
2302   14A2 29 72 24      mov b, [_prog] ; $prog           
2303   14A5 74            mov d, b
2304   14A6 32            mov bl, [d]
2305   14A7 A7 00         mov bh, 0
2306   14A9             ; START RELATIONAL
2307   14A9 D7            push a
2308   14AA 11            mov a, b
2309   14AB 26 30 00      mov b, $30
2310   14AE B0            cmp a, b
2311   14AF FD 80         sge ; >=
2312   14B1 E4            pop a
2313   14B2             ; END RELATIONAL
2314   14B2 D7            push a
2315   14B3 11            mov a, b
2316   14B4 29 72 24      mov b, [_prog] ; $prog           
2317   14B7 74            mov d, b
2318   14B8 32            mov bl, [d]
2319   14B9 A7 00         mov bh, 0
2320   14BB             ; START RELATIONAL
2321   14BB D7            push a
2322   14BC 11            mov a, b
2323   14BD 26 39 00      mov b, $39
2324   14C0 B0            cmp a, b
2325   14C1 FD 74         sle ; <=
2326   14C3 E4            pop a
2327   14C4             ; END RELATIONAL
2328   14C4 FD A7         sand a, b ; &&
2329   14C6 E4            pop a
2330   14C7 FD A8         sor a, b ; ||
2331   14C9 11            mov a, b
2332   14CA 29 72 24      mov b, [_prog] ; $prog           
2333   14CD 74            mov d, b
2334   14CE 32            mov bl, [d]
2335   14CF A7 00         mov bh, 0
2336   14D1             ; START RELATIONAL
2337   14D1 D7            push a
2338   14D2 11            mov a, b
2339   14D3 26 2F 00      mov b, $2f
2340   14D6 B0            cmp a, b
2341   14D7 FD 71         seq ; ==
2342   14D9 E4            pop a
2343   14DA             ; END RELATIONAL
2344   14DA FD A8         sor a, b ; ||
2345   14DC 11            mov a, b
2346   14DD 29 72 24      mov b, [_prog] ; $prog           
2347   14E0 74            mov d, b
2348   14E1 32            mov bl, [d]
2349   14E2 A7 00         mov bh, 0
2350   14E4             ; START RELATIONAL
2351   14E4 D7            push a
2352   14E5 11            mov a, b
2353   14E6 26 5F 00      mov b, $5f
2354   14E9 B0            cmp a, b
2355   14EA FD 71         seq ; ==
2356   14EC E4            pop a
2357   14ED             ; END RELATIONAL
2358   14ED FD A8         sor a, b ; ||
2359   14EF 11            mov a, b
2360   14F0 29 72 24      mov b, [_prog] ; $prog           
2361   14F3 74            mov d, b
2362   14F4 32            mov bl, [d]
2363   14F5 A7 00         mov bh, 0
2364   14F7             ; START RELATIONAL
2365   14F7 D7            push a
2366   14F8 11            mov a, b
2367   14F9 26 2D 00      mov b, $2d
2368   14FC B0            cmp a, b
2369   14FD FD 71         seq ; ==
2370   14FF E4            pop a
2371   1500             ; END RELATIONAL
2372   1500 FD A8         sor a, b ; ||
2373   1502 11            mov a, b
2374   1503 29 72 24      mov b, [_prog] ; $prog           
2375   1506 74            mov d, b
2376   1507 32            mov bl, [d]
2377   1508 A7 00         mov bh, 0
2378   150A             ; START RELATIONAL
2379   150A D7            push a
2380   150B 11            mov a, b
2381   150C 26 2E 00      mov b, $2e
2382   150F B0            cmp a, b
2383   1510 FD 71         seq ; ==
2384   1512 E4            pop a
2385   1513             ; END RELATIONAL
2386   1513 FD A8         sor a, b ; ||
2387   1515 E4            pop a
2388   1516 C0 00 00      cmp b, 0
2389   1519 C6 43 15      je _while29_exit
2390   151C             _while29_block:
2391   151C             ;; *t++ = *prog++; 
2392   151C 2C FF FF      mov b, [bp + -1] ; $t             
2393   151F FD 79         mov g, b
2394   1521 FD 77         inc b
2395   1523 FA FF FF      lea d, [bp + -1] ; $t
2396   1526 FD 43         mov [d], b
2397   1528 FD 27         mov b, g
2398   152A D8            push b
2399   152B 29 72 24      mov b, [_prog] ; $prog           
2400   152E FD 79         mov g, b
2401   1530 FD 77         inc b
2402   1532 3B 72 24      mov d, _prog ; $prog
2403   1535 FD 43         mov [d], b
2404   1537 FD 27         mov b, g
2405   1539 74            mov d, b
2406   153A 32            mov bl, [d]
2407   153B A7 00         mov bh, 0
2408   153D E7            pop d
2409   153E FD 3E         mov [d], bl
2410   1540 0A 53 14      jmp _while29_cond
2411   1543             _while29_exit:
2412   1543             ;; *t = '\0'; 
2413   1543 2C FF FF      mov b, [bp + -1] ; $t             
2414   1546 D8            push b
2415   1547 26 00 00      mov b, $0
2416   154A E7            pop d
2417   154B FD 3E         mov [d], bl
2418   154D F9            leave
2419   154E 09            ret
2420   154F             
2421   154F             get:
2422   154F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2423   1552             ; $t 
2424   1552 52 02 00      sub sp, 2
2425   1555             ;; *token = '\0'; 
2426   1555 26 74 24      mov b, _token_data ; $token           
2427   1558 D8            push b
2428   1559 26 00 00      mov b, $0
2429   155C E7            pop d
2430   155D FD 3E         mov [d], bl
2431   155F             ;; tok = 0; 
2432   155F 3B 6E 24      mov d, _tok ; $tok         
2433   1562 26 00 00      mov b, $0        
2434   1565 FD 43         mov [d], b
2435   1567             ;; toktype = 0; 
2436   1567 3B 70 24      mov d, _toktype ; $toktype         
2437   156A 26 00 00      mov b, $0        
2438   156D FD 43         mov [d], b
2439   156F             ;; t = token; 
2440   156F FA FF FF      lea d, [bp + -1] ; $t         
2441   1572 26 74 24      mov b, _token_data ; $token                   
2442   1575 FD 43         mov [d], b
2443   1577             ;; while(is_space(*prog)) prog++; 
2444   1577             _while30_cond:
2445   1577 29 72 24      mov b, [_prog] ; $prog           
2446   157A 74            mov d, b
2447   157B 32            mov bl, [d]
2448   157C A7 00         mov bh, 0
2449   157E DD            push bl
2450   157F 07 EC 04      call is_space
2451   1582 51 01 00      add sp, 1
2452   1585 C0 00 00      cmp b, 0
2453   1588 C6 9C 15      je _while30_exit
2454   158B             _while30_block:
2455   158B             ;; prog++; 
2456   158B 29 72 24      mov b, [_prog] ; $prog           
2457   158E FD 79         mov g, b
2458   1590 FD 77         inc b
2459   1592 3B 72 24      mov d, _prog ; $prog
2460   1595 FD 43         mov [d], b
2461   1597 FD 27         mov b, g
2462   1599 0A 77 15      jmp _while30_cond
2463   159C             _while30_exit:
2464   159C             ;; if(*prog == '\0'){ 
2465   159C             _if31_cond:
2466   159C 29 72 24      mov b, [_prog] ; $prog           
2467   159F 74            mov d, b
2468   15A0 32            mov bl, [d]
2469   15A1 A7 00         mov bh, 0
2470   15A3             ; START RELATIONAL
2471   15A3 D7            push a
2472   15A4 11            mov a, b
2473   15A5 26 00 00      mov b, $0
2474   15A8 B0            cmp a, b
2475   15A9 FD 71         seq ; ==
2476   15AB E4            pop a
2477   15AC             ; END RELATIONAL
2478   15AC C0 00 00      cmp b, 0
2479   15AF C6 BF 15      je _if31_exit
2480   15B2             _if31_true:
2481   15B2             ;; toktype = END; 
2482   15B2 3B 70 24      mov d, _toktype ; $toktype         
2483   15B5 26 06 00      mov b, 6; END        
2484   15B8 FD 43         mov [d], b
2485   15BA             ;; return; 
2486   15BA F9            leave
2487   15BB 09            ret
2488   15BC 0A BF 15      jmp _if31_exit
2489   15BF             _if31_exit:
2490   15BF             ;; if(is_digit(*prog)){ 
2491   15BF             _if32_cond:
2492   15BF 29 72 24      mov b, [_prog] ; $prog           
2493   15C2 74            mov d, b
2494   15C3 32            mov bl, [d]
2495   15C4 A7 00         mov bh, 0
2496   15C6 DD            push bl
2497   15C7 07 34 05      call is_digit
2498   15CA 51 01 00      add sp, 1
2499   15CD C0 00 00      cmp b, 0
2500   15D0 C6 25 16      je _if32_else
2501   15D3             _if32_true:
2502   15D3             ;; while(is_digit(*prog)){ 
2503   15D3             _while33_cond:
2504   15D3 29 72 24      mov b, [_prog] ; $prog           
2505   15D6 74            mov d, b
2506   15D7 32            mov bl, [d]
2507   15D8 A7 00         mov bh, 0
2508   15DA DD            push bl
2509   15DB 07 34 05      call is_digit
2510   15DE 51 01 00      add sp, 1
2511   15E1 C0 00 00      cmp b, 0
2512   15E4 C6 0E 16      je _while33_exit
2513   15E7             _while33_block:
2514   15E7             ;; *t++ = *prog++; 
2515   15E7 2C FF FF      mov b, [bp + -1] ; $t             
2516   15EA FD 79         mov g, b
2517   15EC FD 77         inc b
2518   15EE FA FF FF      lea d, [bp + -1] ; $t
2519   15F1 FD 43         mov [d], b
2520   15F3 FD 27         mov b, g
2521   15F5 D8            push b
2522   15F6 29 72 24      mov b, [_prog] ; $prog           
2523   15F9 FD 79         mov g, b
2524   15FB FD 77         inc b
2525   15FD 3B 72 24      mov d, _prog ; $prog
2526   1600 FD 43         mov [d], b
2527   1602 FD 27         mov b, g
2528   1604 74            mov d, b
2529   1605 32            mov bl, [d]
2530   1606 A7 00         mov bh, 0
2531   1608 E7            pop d
2532   1609 FD 3E         mov [d], bl
2533   160B 0A D3 15      jmp _while33_cond
2534   160E             _while33_exit:
2535   160E             ;; *t = '\0'; 
2536   160E 2C FF FF      mov b, [bp + -1] ; $t             
2537   1611 D8            push b
2538   1612 26 00 00      mov b, $0
2539   1615 E7            pop d
2540   1616 FD 3E         mov [d], bl
2541   1618             ;; toktype = INTEGER_CONST; 
2542   1618 3B 70 24      mov d, _toktype ; $toktype         
2543   161B 26 04 00      mov b, 4; INTEGER_CONST        
2544   161E FD 43         mov [d], b
2545   1620             ;; return; // return to avoid *t = '\0' line at the end of function 
2546   1620 F9            leave
2547   1621 09            ret
2548   1622 0A 02 22      jmp _if32_exit
2549   1625             _if32_else:
2550   1625             ;; if(is_alpha(*prog)){ 
2551   1625             _if34_cond:
2552   1625 29 72 24      mov b, [_prog] ; $prog           
2553   1628 74            mov d, b
2554   1629 32            mov bl, [d]
2555   162A A7 00         mov bh, 0
2556   162C DD            push bl
2557   162D 07 5A 05      call is_alpha
2558   1630 51 01 00      add sp, 1
2559   1633 C0 00 00      cmp b, 0
2560   1636 C6 9C 16      je _if34_else
2561   1639             _if34_true:
2562   1639             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
2563   1639             _while35_cond:
2564   1639 29 72 24      mov b, [_prog] ; $prog           
2565   163C 74            mov d, b
2566   163D 32            mov bl, [d]
2567   163E A7 00         mov bh, 0
2568   1640 DD            push bl
2569   1641 07 5A 05      call is_alpha
2570   1644 51 01 00      add sp, 1
2571   1647 D7            push a
2572   1648 11            mov a, b
2573   1649 29 72 24      mov b, [_prog] ; $prog           
2574   164C 74            mov d, b
2575   164D 32            mov bl, [d]
2576   164E A7 00         mov bh, 0
2577   1650 DD            push bl
2578   1651 07 34 05      call is_digit
2579   1654 51 01 00      add sp, 1
2580   1657 FD A8         sor a, b ; ||
2581   1659 E4            pop a
2582   165A C0 00 00      cmp b, 0
2583   165D C6 87 16      je _while35_exit
2584   1660             _while35_block:
2585   1660             ;; *t++ = *prog++; 
2586   1660 2C FF FF      mov b, [bp + -1] ; $t             
2587   1663 FD 79         mov g, b
2588   1665 FD 77         inc b
2589   1667 FA FF FF      lea d, [bp + -1] ; $t
2590   166A FD 43         mov [d], b
2591   166C FD 27         mov b, g
2592   166E D8            push b
2593   166F 29 72 24      mov b, [_prog] ; $prog           
2594   1672 FD 79         mov g, b
2595   1674 FD 77         inc b
2596   1676 3B 72 24      mov d, _prog ; $prog
2597   1679 FD 43         mov [d], b
2598   167B FD 27         mov b, g
2599   167D 74            mov d, b
2600   167E 32            mov bl, [d]
2601   167F A7 00         mov bh, 0
2602   1681 E7            pop d
2603   1682 FD 3E         mov [d], bl
2604   1684 0A 39 16      jmp _while35_cond
2605   1687             _while35_exit:
2606   1687             ;; *t = '\0'; 
2607   1687 2C FF FF      mov b, [bp + -1] ; $t             
2608   168A D8            push b
2609   168B 26 00 00      mov b, $0
2610   168E E7            pop d
2611   168F FD 3E         mov [d], bl
2612   1691             ;; toktype = IDENTIFIER; 
2613   1691 3B 70 24      mov d, _toktype ; $toktype         
2614   1694 26 05 00      mov b, 5; IDENTIFIER        
2615   1697 FD 43         mov [d], b
2616   1699 0A 02 22      jmp _if34_exit
2617   169C             _if34_else:
2618   169C             ;; if(*prog == '\"'){ 
2619   169C             _if36_cond:
2620   169C 29 72 24      mov b, [_prog] ; $prog           
2621   169F 74            mov d, b
2622   16A0 32            mov bl, [d]
2623   16A1 A7 00         mov bh, 0
2624   16A3             ; START RELATIONAL
2625   16A3 D7            push a
2626   16A4 11            mov a, b
2627   16A5 26 22 00      mov b, $22
2628   16A8 B0            cmp a, b
2629   16A9 FD 71         seq ; ==
2630   16AB E4            pop a
2631   16AC             ; END RELATIONAL
2632   16AC C0 00 00      cmp b, 0
2633   16AF C6 7E 17      je _if36_else
2634   16B2             _if36_true:
2635   16B2             ;; *t++ = '\"'; 
2636   16B2 2C FF FF      mov b, [bp + -1] ; $t             
2637   16B5 FD 79         mov g, b
2638   16B7 FD 77         inc b
2639   16B9 FA FF FF      lea d, [bp + -1] ; $t
2640   16BC FD 43         mov [d], b
2641   16BE FD 27         mov b, g
2642   16C0 D8            push b
2643   16C1 26 22 00      mov b, $22
2644   16C4 E7            pop d
2645   16C5 FD 3E         mov [d], bl
2646   16C7             ;; prog++; 
2647   16C7 29 72 24      mov b, [_prog] ; $prog           
2648   16CA FD 79         mov g, b
2649   16CC FD 77         inc b
2650   16CE 3B 72 24      mov d, _prog ; $prog
2651   16D1 FD 43         mov [d], b
2652   16D3 FD 27         mov b, g
2653   16D5             ;; while(*prog != '\"' && *prog){ 
2654   16D5             _while37_cond:
2655   16D5 29 72 24      mov b, [_prog] ; $prog           
2656   16D8 74            mov d, b
2657   16D9 32            mov bl, [d]
2658   16DA A7 00         mov bh, 0
2659   16DC             ; START RELATIONAL
2660   16DC D7            push a
2661   16DD 11            mov a, b
2662   16DE 26 22 00      mov b, $22
2663   16E1 B0            cmp a, b
2664   16E2 FD 72         sneq ; !=
2665   16E4 E4            pop a
2666   16E5             ; END RELATIONAL
2667   16E5 D7            push a
2668   16E6 11            mov a, b
2669   16E7 29 72 24      mov b, [_prog] ; $prog           
2670   16EA 74            mov d, b
2671   16EB 32            mov bl, [d]
2672   16EC A7 00         mov bh, 0
2673   16EE FD A7         sand a, b ; &&
2674   16F0 E4            pop a
2675   16F1 C0 00 00      cmp b, 0
2676   16F4 C6 1E 17      je _while37_exit
2677   16F7             _while37_block:
2678   16F7             ;; *t++ = *prog++; 
2679   16F7 2C FF FF      mov b, [bp + -1] ; $t             
2680   16FA FD 79         mov g, b
2681   16FC FD 77         inc b
2682   16FE FA FF FF      lea d, [bp + -1] ; $t
2683   1701 FD 43         mov [d], b
2684   1703 FD 27         mov b, g
2685   1705 D8            push b
2686   1706 29 72 24      mov b, [_prog] ; $prog           
2687   1709 FD 79         mov g, b
2688   170B FD 77         inc b
2689   170D 3B 72 24      mov d, _prog ; $prog
2690   1710 FD 43         mov [d], b
2691   1712 FD 27         mov b, g
2692   1714 74            mov d, b
2693   1715 32            mov bl, [d]
2694   1716 A7 00         mov bh, 0
2695   1718 E7            pop d
2696   1719 FD 3E         mov [d], bl
2697   171B 0A D5 16      jmp _while37_cond
2698   171E             _while37_exit:
2699   171E             ;; if(*prog != '\"') error("Double quotes expected"); 
2700   171E             _if38_cond:
2701   171E 29 72 24      mov b, [_prog] ; $prog           
2702   1721 74            mov d, b
2703   1722 32            mov bl, [d]
2704   1723 A7 00         mov bh, 0
2705   1725             ; START RELATIONAL
2706   1725 D7            push a
2707   1726 11            mov a, b
2708   1727 26 22 00      mov b, $22
2709   172A B0            cmp a, b
2710   172B FD 72         sneq ; !=
2711   172D E4            pop a
2712   172E             ; END RELATIONAL
2713   172E C0 00 00      cmp b, 0
2714   1731 C6 43 17      je _if38_exit
2715   1734             _if38_true:
2716   1734             ;; error("Double quotes expected"); 
2717   1734 26 DA 26      mov b, __s2 ; "Double quotes expected"
2718   1737 FD AB         swp b
2719   1739 D8            push b
2720   173A 07 45 24      call error
2721   173D 51 02 00      add sp, 2
2722   1740 0A 43 17      jmp _if38_exit
2723   1743             _if38_exit:
2724   1743             ;; *t++ = '\"'; 
2725   1743 2C FF FF      mov b, [bp + -1] ; $t             
2726   1746 FD 79         mov g, b
2727   1748 FD 77         inc b
2728   174A FA FF FF      lea d, [bp + -1] ; $t
2729   174D FD 43         mov [d], b
2730   174F FD 27         mov b, g
2731   1751 D8            push b
2732   1752 26 22 00      mov b, $22
2733   1755 E7            pop d
2734   1756 FD 3E         mov [d], bl
2735   1758             ;; prog++; 
2736   1758 29 72 24      mov b, [_prog] ; $prog           
2737   175B FD 79         mov g, b
2738   175D FD 77         inc b
2739   175F 3B 72 24      mov d, _prog ; $prog
2740   1762 FD 43         mov [d], b
2741   1764 FD 27         mov b, g
2742   1766             ;; toktype = STRING_CONST; 
2743   1766 3B 70 24      mov d, _toktype ; $toktype         
2744   1769 26 03 00      mov b, 3; STRING_CONST        
2745   176C FD 43         mov [d], b
2746   176E             ;; *t = '\0'; 
2747   176E 2C FF FF      mov b, [bp + -1] ; $t             
2748   1771 D8            push b
2749   1772 26 00 00      mov b, $0
2750   1775 E7            pop d
2751   1776 FD 3E         mov [d], bl
2752   1778             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
2753   1778 07 0E 22      call convert_constant
2754   177B 0A 02 22      jmp _if36_exit
2755   177E             _if36_else:
2756   177E             ;; if(*prog == '#'){ 
2757   177E             _if39_cond:
2758   177E 29 72 24      mov b, [_prog] ; $prog           
2759   1781 74            mov d, b
2760   1782 32            mov bl, [d]
2761   1783 A7 00         mov bh, 0
2762   1785             ; START RELATIONAL
2763   1785 D7            push a
2764   1786 11            mov a, b
2765   1787 26 23 00      mov b, $23
2766   178A B0            cmp a, b
2767   178B FD 71         seq ; ==
2768   178D E4            pop a
2769   178E             ; END RELATIONAL
2770   178E C0 00 00      cmp b, 0
2771   1791 C6 CB 17      je _if39_else
2772   1794             _if39_true:
2773   1794             ;; *t++ = *prog++; 
2774   1794 2C FF FF      mov b, [bp + -1] ; $t             
2775   1797 FD 79         mov g, b
2776   1799 FD 77         inc b
2777   179B FA FF FF      lea d, [bp + -1] ; $t
2778   179E FD 43         mov [d], b
2779   17A0 FD 27         mov b, g
2780   17A2 D8            push b
2781   17A3 29 72 24      mov b, [_prog] ; $prog           
2782   17A6 FD 79         mov g, b
2783   17A8 FD 77         inc b
2784   17AA 3B 72 24      mov d, _prog ; $prog
2785   17AD FD 43         mov [d], b
2786   17AF FD 27         mov b, g
2787   17B1 74            mov d, b
2788   17B2 32            mov bl, [d]
2789   17B3 A7 00         mov bh, 0
2790   17B5 E7            pop d
2791   17B6 FD 3E         mov [d], bl
2792   17B8             ;; tok = HASH; 
2793   17B8 3B 6E 24      mov d, _tok ; $tok         
2794   17BB 26 15 00      mov b, 21; HASH        
2795   17BE FD 43         mov [d], b
2796   17C0             ;; toktype = DELIMITER;   
2797   17C0 3B 70 24      mov d, _toktype ; $toktype         
2798   17C3 26 01 00      mov b, 1; DELIMITER        
2799   17C6 FD 43         mov [d], b
2800   17C8 0A 02 22      jmp _if39_exit
2801   17CB             _if39_else:
2802   17CB             ;; if(*prog == '{'){ 
2803   17CB             _if40_cond:
2804   17CB 29 72 24      mov b, [_prog] ; $prog           
2805   17CE 74            mov d, b
2806   17CF 32            mov bl, [d]
2807   17D0 A7 00         mov bh, 0
2808   17D2             ; START RELATIONAL
2809   17D2 D7            push a
2810   17D3 11            mov a, b
2811   17D4 26 7B 00      mov b, $7b
2812   17D7 B0            cmp a, b
2813   17D8 FD 71         seq ; ==
2814   17DA E4            pop a
2815   17DB             ; END RELATIONAL
2816   17DB C0 00 00      cmp b, 0
2817   17DE C6 18 18      je _if40_else
2818   17E1             _if40_true:
2819   17E1             ;; *t++ = *prog++; 
2820   17E1 2C FF FF      mov b, [bp + -1] ; $t             
2821   17E4 FD 79         mov g, b
2822   17E6 FD 77         inc b
2823   17E8 FA FF FF      lea d, [bp + -1] ; $t
2824   17EB FD 43         mov [d], b
2825   17ED FD 27         mov b, g
2826   17EF D8            push b
2827   17F0 29 72 24      mov b, [_prog] ; $prog           
2828   17F3 FD 79         mov g, b
2829   17F5 FD 77         inc b
2830   17F7 3B 72 24      mov d, _prog ; $prog
2831   17FA FD 43         mov [d], b
2832   17FC FD 27         mov b, g
2833   17FE 74            mov d, b
2834   17FF 32            mov bl, [d]
2835   1800 A7 00         mov bh, 0
2836   1802 E7            pop d
2837   1803 FD 3E         mov [d], bl
2838   1805             ;; tok = OPENING_BRACE; 
2839   1805 3B 6E 24      mov d, _tok ; $tok         
2840   1808 26 1E 00      mov b, 30; OPENING_BRACE        
2841   180B FD 43         mov [d], b
2842   180D             ;; toktype = DELIMITER;   
2843   180D 3B 70 24      mov d, _toktype ; $toktype         
2844   1810 26 01 00      mov b, 1; DELIMITER        
2845   1813 FD 43         mov [d], b
2846   1815 0A 02 22      jmp _if40_exit
2847   1818             _if40_else:
2848   1818             ;; if(*prog == '}'){ 
2849   1818             _if41_cond:
2850   1818 29 72 24      mov b, [_prog] ; $prog           
2851   181B 74            mov d, b
2852   181C 32            mov bl, [d]
2853   181D A7 00         mov bh, 0
2854   181F             ; START RELATIONAL
2855   181F D7            push a
2856   1820 11            mov a, b
2857   1821 26 7D 00      mov b, $7d
2858   1824 B0            cmp a, b
2859   1825 FD 71         seq ; ==
2860   1827 E4            pop a
2861   1828             ; END RELATIONAL
2862   1828 C0 00 00      cmp b, 0
2863   182B C6 65 18      je _if41_else
2864   182E             _if41_true:
2865   182E             ;; *t++ = *prog++; 
2866   182E 2C FF FF      mov b, [bp + -1] ; $t             
2867   1831 FD 79         mov g, b
2868   1833 FD 77         inc b
2869   1835 FA FF FF      lea d, [bp + -1] ; $t
2870   1838 FD 43         mov [d], b
2871   183A FD 27         mov b, g
2872   183C D8            push b
2873   183D 29 72 24      mov b, [_prog] ; $prog           
2874   1840 FD 79         mov g, b
2875   1842 FD 77         inc b
2876   1844 3B 72 24      mov d, _prog ; $prog
2877   1847 FD 43         mov [d], b
2878   1849 FD 27         mov b, g
2879   184B 74            mov d, b
2880   184C 32            mov bl, [d]
2881   184D A7 00         mov bh, 0
2882   184F E7            pop d
2883   1850 FD 3E         mov [d], bl
2884   1852             ;; tok = CLOSING_BRACE; 
2885   1852 3B 6E 24      mov d, _tok ; $tok         
2886   1855 26 1F 00      mov b, 31; CLOSING_BRACE        
2887   1858 FD 43         mov [d], b
2888   185A             ;; toktype = DELIMITER;   
2889   185A 3B 70 24      mov d, _toktype ; $toktype         
2890   185D 26 01 00      mov b, 1; DELIMITER        
2891   1860 FD 43         mov [d], b
2892   1862 0A 02 22      jmp _if41_exit
2893   1865             _if41_else:
2894   1865             ;; if(*prog == '['){ 
2895   1865             _if42_cond:
2896   1865 29 72 24      mov b, [_prog] ; $prog           
2897   1868 74            mov d, b
2898   1869 32            mov bl, [d]
2899   186A A7 00         mov bh, 0
2900   186C             ; START RELATIONAL
2901   186C D7            push a
2902   186D 11            mov a, b
2903   186E 26 5B 00      mov b, $5b
2904   1871 B0            cmp a, b
2905   1872 FD 71         seq ; ==
2906   1874 E4            pop a
2907   1875             ; END RELATIONAL
2908   1875 C0 00 00      cmp b, 0
2909   1878 C6 B2 18      je _if42_else
2910   187B             _if42_true:
2911   187B             ;; *t++ = *prog++; 
2912   187B 2C FF FF      mov b, [bp + -1] ; $t             
2913   187E FD 79         mov g, b
2914   1880 FD 77         inc b
2915   1882 FA FF FF      lea d, [bp + -1] ; $t
2916   1885 FD 43         mov [d], b
2917   1887 FD 27         mov b, g
2918   1889 D8            push b
2919   188A 29 72 24      mov b, [_prog] ; $prog           
2920   188D FD 79         mov g, b
2921   188F FD 77         inc b
2922   1891 3B 72 24      mov d, _prog ; $prog
2923   1894 FD 43         mov [d], b
2924   1896 FD 27         mov b, g
2925   1898 74            mov d, b
2926   1899 32            mov bl, [d]
2927   189A A7 00         mov bh, 0
2928   189C E7            pop d
2929   189D FD 3E         mov [d], bl
2930   189F             ;; tok = OPENING_BRACKET; 
2931   189F 3B 6E 24      mov d, _tok ; $tok         
2932   18A2 26 20 00      mov b, 32; OPENING_BRACKET        
2933   18A5 FD 43         mov [d], b
2934   18A7             ;; toktype = DELIMITER;   
2935   18A7 3B 70 24      mov d, _toktype ; $toktype         
2936   18AA 26 01 00      mov b, 1; DELIMITER        
2937   18AD FD 43         mov [d], b
2938   18AF 0A 02 22      jmp _if42_exit
2939   18B2             _if42_else:
2940   18B2             ;; if(*prog == ']'){ 
2941   18B2             _if43_cond:
2942   18B2 29 72 24      mov b, [_prog] ; $prog           
2943   18B5 74            mov d, b
2944   18B6 32            mov bl, [d]
2945   18B7 A7 00         mov bh, 0
2946   18B9             ; START RELATIONAL
2947   18B9 D7            push a
2948   18BA 11            mov a, b
2949   18BB 26 5D 00      mov b, $5d
2950   18BE B0            cmp a, b
2951   18BF FD 71         seq ; ==
2952   18C1 E4            pop a
2953   18C2             ; END RELATIONAL
2954   18C2 C0 00 00      cmp b, 0
2955   18C5 C6 FF 18      je _if43_else
2956   18C8             _if43_true:
2957   18C8             ;; *t++ = *prog++; 
2958   18C8 2C FF FF      mov b, [bp + -1] ; $t             
2959   18CB FD 79         mov g, b
2960   18CD FD 77         inc b
2961   18CF FA FF FF      lea d, [bp + -1] ; $t
2962   18D2 FD 43         mov [d], b
2963   18D4 FD 27         mov b, g
2964   18D6 D8            push b
2965   18D7 29 72 24      mov b, [_prog] ; $prog           
2966   18DA FD 79         mov g, b
2967   18DC FD 77         inc b
2968   18DE 3B 72 24      mov d, _prog ; $prog
2969   18E1 FD 43         mov [d], b
2970   18E3 FD 27         mov b, g
2971   18E5 74            mov d, b
2972   18E6 32            mov bl, [d]
2973   18E7 A7 00         mov bh, 0
2974   18E9 E7            pop d
2975   18EA FD 3E         mov [d], bl
2976   18EC             ;; tok = CLOSING_BRACKET; 
2977   18EC 3B 6E 24      mov d, _tok ; $tok         
2978   18EF 26 21 00      mov b, 33; CLOSING_BRACKET        
2979   18F2 FD 43         mov [d], b
2980   18F4             ;; toktype = DELIMITER;   
2981   18F4 3B 70 24      mov d, _toktype ; $toktype         
2982   18F7 26 01 00      mov b, 1; DELIMITER        
2983   18FA FD 43         mov [d], b
2984   18FC 0A 02 22      jmp _if43_exit
2985   18FF             _if43_else:
2986   18FF             ;; if(*prog == '='){ 
2987   18FF             _if44_cond:
2988   18FF 29 72 24      mov b, [_prog] ; $prog           
2989   1902 74            mov d, b
2990   1903 32            mov bl, [d]
2991   1904 A7 00         mov bh, 0
2992   1906             ; START RELATIONAL
2993   1906 D7            push a
2994   1907 11            mov a, b
2995   1908 26 3D 00      mov b, $3d
2996   190B B0            cmp a, b
2997   190C FD 71         seq ; ==
2998   190E E4            pop a
2999   190F             ; END RELATIONAL
3000   190F C0 00 00      cmp b, 0
3001   1912 C6 91 19      je _if44_else
3002   1915             _if44_true:
3003   1915             ;; *t++ = *prog++; 
3004   1915 2C FF FF      mov b, [bp + -1] ; $t             
3005   1918 FD 79         mov g, b
3006   191A FD 77         inc b
3007   191C FA FF FF      lea d, [bp + -1] ; $t
3008   191F FD 43         mov [d], b
3009   1921 FD 27         mov b, g
3010   1923 D8            push b
3011   1924 29 72 24      mov b, [_prog] ; $prog           
3012   1927 FD 79         mov g, b
3013   1929 FD 77         inc b
3014   192B 3B 72 24      mov d, _prog ; $prog
3015   192E FD 43         mov [d], b
3016   1930 FD 27         mov b, g
3017   1932 74            mov d, b
3018   1933 32            mov bl, [d]
3019   1934 A7 00         mov bh, 0
3020   1936 E7            pop d
3021   1937 FD 3E         mov [d], bl
3022   1939             ;; if (*prog == '='){ 
3023   1939             _if45_cond:
3024   1939 29 72 24      mov b, [_prog] ; $prog           
3025   193C 74            mov d, b
3026   193D 32            mov bl, [d]
3027   193E A7 00         mov bh, 0
3028   1940             ; START RELATIONAL
3029   1940 D7            push a
3030   1941 11            mov a, b
3031   1942 26 3D 00      mov b, $3d
3032   1945 B0            cmp a, b
3033   1946 FD 71         seq ; ==
3034   1948 E4            pop a
3035   1949             ; END RELATIONAL
3036   1949 C0 00 00      cmp b, 0
3037   194C C6 7E 19      je _if45_else
3038   194F             _if45_true:
3039   194F             ;; *t++ = *prog++; 
3040   194F 2C FF FF      mov b, [bp + -1] ; $t             
3041   1952 FD 79         mov g, b
3042   1954 FD 77         inc b
3043   1956 FA FF FF      lea d, [bp + -1] ; $t
3044   1959 FD 43         mov [d], b
3045   195B FD 27         mov b, g
3046   195D D8            push b
3047   195E 29 72 24      mov b, [_prog] ; $prog           
3048   1961 FD 79         mov g, b
3049   1963 FD 77         inc b
3050   1965 3B 72 24      mov d, _prog ; $prog
3051   1968 FD 43         mov [d], b
3052   196A FD 27         mov b, g
3053   196C 74            mov d, b
3054   196D 32            mov bl, [d]
3055   196E A7 00         mov bh, 0
3056   1970 E7            pop d
3057   1971 FD 3E         mov [d], bl
3058   1973             ;; tok = EQUAL; 
3059   1973 3B 6E 24      mov d, _tok ; $tok         
3060   1976 26 08 00      mov b, 8; EQUAL        
3061   1979 FD 43         mov [d], b
3062   197B 0A 86 19      jmp _if45_exit
3063   197E             _if45_else:
3064   197E             ;; tok = ASSIGNMENT; 
3065   197E 3B 6E 24      mov d, _tok ; $tok         
3066   1981 26 11 00      mov b, 17; ASSIGNMENT        
3067   1984 FD 43         mov [d], b
3068   1986             _if45_exit:
3069   1986             ;; toktype = DELIMITER;   
3070   1986 3B 70 24      mov d, _toktype ; $toktype         
3071   1989 26 01 00      mov b, 1; DELIMITER        
3072   198C FD 43         mov [d], b
3073   198E 0A 02 22      jmp _if44_exit
3074   1991             _if44_else:
3075   1991             ;; if(*prog == '&'){ 
3076   1991             _if46_cond:
3077   1991 29 72 24      mov b, [_prog] ; $prog           
3078   1994 74            mov d, b
3079   1995 32            mov bl, [d]
3080   1996 A7 00         mov bh, 0
3081   1998             ; START RELATIONAL
3082   1998 D7            push a
3083   1999 11            mov a, b
3084   199A 26 26 00      mov b, $26
3085   199D B0            cmp a, b
3086   199E FD 71         seq ; ==
3087   19A0 E4            pop a
3088   19A1             ; END RELATIONAL
3089   19A1 C0 00 00      cmp b, 0
3090   19A4 C6 23 1A      je _if46_else
3091   19A7             _if46_true:
3092   19A7             ;; *t++ = *prog++; 
3093   19A7 2C FF FF      mov b, [bp + -1] ; $t             
3094   19AA FD 79         mov g, b
3095   19AC FD 77         inc b
3096   19AE FA FF FF      lea d, [bp + -1] ; $t
3097   19B1 FD 43         mov [d], b
3098   19B3 FD 27         mov b, g
3099   19B5 D8            push b
3100   19B6 29 72 24      mov b, [_prog] ; $prog           
3101   19B9 FD 79         mov g, b
3102   19BB FD 77         inc b
3103   19BD 3B 72 24      mov d, _prog ; $prog
3104   19C0 FD 43         mov [d], b
3105   19C2 FD 27         mov b, g
3106   19C4 74            mov d, b
3107   19C5 32            mov bl, [d]
3108   19C6 A7 00         mov bh, 0
3109   19C8 E7            pop d
3110   19C9 FD 3E         mov [d], bl
3111   19CB             ;; if(*prog == '&'){ 
3112   19CB             _if47_cond:
3113   19CB 29 72 24      mov b, [_prog] ; $prog           
3114   19CE 74            mov d, b
3115   19CF 32            mov bl, [d]
3116   19D0 A7 00         mov bh, 0
3117   19D2             ; START RELATIONAL
3118   19D2 D7            push a
3119   19D3 11            mov a, b
3120   19D4 26 26 00      mov b, $26
3121   19D7 B0            cmp a, b
3122   19D8 FD 71         seq ; ==
3123   19DA E4            pop a
3124   19DB             ; END RELATIONAL
3125   19DB C0 00 00      cmp b, 0
3126   19DE C6 10 1A      je _if47_else
3127   19E1             _if47_true:
3128   19E1             ;; *t++ = *prog++; 
3129   19E1 2C FF FF      mov b, [bp + -1] ; $t             
3130   19E4 FD 79         mov g, b
3131   19E6 FD 77         inc b
3132   19E8 FA FF FF      lea d, [bp + -1] ; $t
3133   19EB FD 43         mov [d], b
3134   19ED FD 27         mov b, g
3135   19EF D8            push b
3136   19F0 29 72 24      mov b, [_prog] ; $prog           
3137   19F3 FD 79         mov g, b
3138   19F5 FD 77         inc b
3139   19F7 3B 72 24      mov d, _prog ; $prog
3140   19FA FD 43         mov [d], b
3141   19FC FD 27         mov b, g
3142   19FE 74            mov d, b
3143   19FF 32            mov bl, [d]
3144   1A00 A7 00         mov bh, 0
3145   1A02 E7            pop d
3146   1A03 FD 3E         mov [d], bl
3147   1A05             ;; tok = LOGICAL_AND; 
3148   1A05 3B 6E 24      mov d, _tok ; $tok         
3149   1A08 26 0E 00      mov b, 14; LOGICAL_AND        
3150   1A0B FD 43         mov [d], b
3151   1A0D 0A 18 1A      jmp _if47_exit
3152   1A10             _if47_else:
3153   1A10             ;; tok = AMPERSAND; 
3154   1A10 3B 6E 24      mov d, _tok ; $tok         
3155   1A13 26 16 00      mov b, 22; AMPERSAND        
3156   1A16 FD 43         mov [d], b
3157   1A18             _if47_exit:
3158   1A18             ;; toktype = DELIMITER;   
3159   1A18 3B 70 24      mov d, _toktype ; $toktype         
3160   1A1B 26 01 00      mov b, 1; DELIMITER        
3161   1A1E FD 43         mov [d], b
3162   1A20 0A 02 22      jmp _if46_exit
3163   1A23             _if46_else:
3164   1A23             ;; if(*prog == '|'){ 
3165   1A23             _if48_cond:
3166   1A23 29 72 24      mov b, [_prog] ; $prog           
3167   1A26 74            mov d, b
3168   1A27 32            mov bl, [d]
3169   1A28 A7 00         mov bh, 0
3170   1A2A             ; START RELATIONAL
3171   1A2A D7            push a
3172   1A2B 11            mov a, b
3173   1A2C 26 7C 00      mov b, $7c
3174   1A2F B0            cmp a, b
3175   1A30 FD 71         seq ; ==
3176   1A32 E4            pop a
3177   1A33             ; END RELATIONAL
3178   1A33 C0 00 00      cmp b, 0
3179   1A36 C6 B5 1A      je _if48_else
3180   1A39             _if48_true:
3181   1A39             ;; *t++ = *prog++; 
3182   1A39 2C FF FF      mov b, [bp + -1] ; $t             
3183   1A3C FD 79         mov g, b
3184   1A3E FD 77         inc b
3185   1A40 FA FF FF      lea d, [bp + -1] ; $t
3186   1A43 FD 43         mov [d], b
3187   1A45 FD 27         mov b, g
3188   1A47 D8            push b
3189   1A48 29 72 24      mov b, [_prog] ; $prog           
3190   1A4B FD 79         mov g, b
3191   1A4D FD 77         inc b
3192   1A4F 3B 72 24      mov d, _prog ; $prog
3193   1A52 FD 43         mov [d], b
3194   1A54 FD 27         mov b, g
3195   1A56 74            mov d, b
3196   1A57 32            mov bl, [d]
3197   1A58 A7 00         mov bh, 0
3198   1A5A E7            pop d
3199   1A5B FD 3E         mov [d], bl
3200   1A5D             ;; if (*prog == '|'){ 
3201   1A5D             _if49_cond:
3202   1A5D 29 72 24      mov b, [_prog] ; $prog           
3203   1A60 74            mov d, b
3204   1A61 32            mov bl, [d]
3205   1A62 A7 00         mov bh, 0
3206   1A64             ; START RELATIONAL
3207   1A64 D7            push a
3208   1A65 11            mov a, b
3209   1A66 26 7C 00      mov b, $7c
3210   1A69 B0            cmp a, b
3211   1A6A FD 71         seq ; ==
3212   1A6C E4            pop a
3213   1A6D             ; END RELATIONAL
3214   1A6D C0 00 00      cmp b, 0
3215   1A70 C6 A2 1A      je _if49_else
3216   1A73             _if49_true:
3217   1A73             ;; *t++ = *prog++; 
3218   1A73 2C FF FF      mov b, [bp + -1] ; $t             
3219   1A76 FD 79         mov g, b
3220   1A78 FD 77         inc b
3221   1A7A FA FF FF      lea d, [bp + -1] ; $t
3222   1A7D FD 43         mov [d], b
3223   1A7F FD 27         mov b, g
3224   1A81 D8            push b
3225   1A82 29 72 24      mov b, [_prog] ; $prog           
3226   1A85 FD 79         mov g, b
3227   1A87 FD 77         inc b
3228   1A89 3B 72 24      mov d, _prog ; $prog
3229   1A8C FD 43         mov [d], b
3230   1A8E FD 27         mov b, g
3231   1A90 74            mov d, b
3232   1A91 32            mov bl, [d]
3233   1A92 A7 00         mov bh, 0
3234   1A94 E7            pop d
3235   1A95 FD 3E         mov [d], bl
3236   1A97             ;; tok = LOGICAL_OR; 
3237   1A97 3B 6E 24      mov d, _tok ; $tok         
3238   1A9A 26 0F 00      mov b, 15; LOGICAL_OR        
3239   1A9D FD 43         mov [d], b
3240   1A9F 0A AA 1A      jmp _if49_exit
3241   1AA2             _if49_else:
3242   1AA2             ;; tok = BITWISE_OR; 
3243   1AA2 3B 6E 24      mov d, _tok ; $tok         
3244   1AA5 26 18 00      mov b, 24; BITWISE_OR        
3245   1AA8 FD 43         mov [d], b
3246   1AAA             _if49_exit:
3247   1AAA             ;; toktype = DELIMITER;   
3248   1AAA 3B 70 24      mov d, _toktype ; $toktype         
3249   1AAD 26 01 00      mov b, 1; DELIMITER        
3250   1AB0 FD 43         mov [d], b
3251   1AB2 0A 02 22      jmp _if48_exit
3252   1AB5             _if48_else:
3253   1AB5             ;; if(*prog == '~'){ 
3254   1AB5             _if50_cond:
3255   1AB5 29 72 24      mov b, [_prog] ; $prog           
3256   1AB8 74            mov d, b
3257   1AB9 32            mov bl, [d]
3258   1ABA A7 00         mov bh, 0
3259   1ABC             ; START RELATIONAL
3260   1ABC D7            push a
3261   1ABD 11            mov a, b
3262   1ABE 26 7E 00      mov b, $7e
3263   1AC1 B0            cmp a, b
3264   1AC2 FD 71         seq ; ==
3265   1AC4 E4            pop a
3266   1AC5             ; END RELATIONAL
3267   1AC5 C0 00 00      cmp b, 0
3268   1AC8 C6 02 1B      je _if50_else
3269   1ACB             _if50_true:
3270   1ACB             ;; *t++ = *prog++; 
3271   1ACB 2C FF FF      mov b, [bp + -1] ; $t             
3272   1ACE FD 79         mov g, b
3273   1AD0 FD 77         inc b
3274   1AD2 FA FF FF      lea d, [bp + -1] ; $t
3275   1AD5 FD 43         mov [d], b
3276   1AD7 FD 27         mov b, g
3277   1AD9 D8            push b
3278   1ADA 29 72 24      mov b, [_prog] ; $prog           
3279   1ADD FD 79         mov g, b
3280   1ADF FD 77         inc b
3281   1AE1 3B 72 24      mov d, _prog ; $prog
3282   1AE4 FD 43         mov [d], b
3283   1AE6 FD 27         mov b, g
3284   1AE8 74            mov d, b
3285   1AE9 32            mov bl, [d]
3286   1AEA A7 00         mov bh, 0
3287   1AEC E7            pop d
3288   1AED FD 3E         mov [d], bl
3289   1AEF             ;; tok = BITWISE_NOT; 
3290   1AEF 3B 6E 24      mov d, _tok ; $tok         
3291   1AF2 26 19 00      mov b, 25; BITWISE_NOT        
3292   1AF5 FD 43         mov [d], b
3293   1AF7             ;; toktype = DELIMITER;   
3294   1AF7 3B 70 24      mov d, _toktype ; $toktype         
3295   1AFA 26 01 00      mov b, 1; DELIMITER        
3296   1AFD FD 43         mov [d], b
3297   1AFF 0A 02 22      jmp _if50_exit
3298   1B02             _if50_else:
3299   1B02             ;; if(*prog == '<'){ 
3300   1B02             _if51_cond:
3301   1B02 29 72 24      mov b, [_prog] ; $prog           
3302   1B05 74            mov d, b
3303   1B06 32            mov bl, [d]
3304   1B07 A7 00         mov bh, 0
3305   1B09             ; START RELATIONAL
3306   1B09 D7            push a
3307   1B0A 11            mov a, b
3308   1B0B 26 3C 00      mov b, $3c
3309   1B0E B0            cmp a, b
3310   1B0F FD 71         seq ; ==
3311   1B11 E4            pop a
3312   1B12             ; END RELATIONAL
3313   1B12 C0 00 00      cmp b, 0
3314   1B15 C6 D9 1B      je _if51_else
3315   1B18             _if51_true:
3316   1B18             ;; *t++ = *prog++; 
3317   1B18 2C FF FF      mov b, [bp + -1] ; $t             
3318   1B1B FD 79         mov g, b
3319   1B1D FD 77         inc b
3320   1B1F FA FF FF      lea d, [bp + -1] ; $t
3321   1B22 FD 43         mov [d], b
3322   1B24 FD 27         mov b, g
3323   1B26 D8            push b
3324   1B27 29 72 24      mov b, [_prog] ; $prog           
3325   1B2A FD 79         mov g, b
3326   1B2C FD 77         inc b
3327   1B2E 3B 72 24      mov d, _prog ; $prog
3328   1B31 FD 43         mov [d], b
3329   1B33 FD 27         mov b, g
3330   1B35 74            mov d, b
3331   1B36 32            mov bl, [d]
3332   1B37 A7 00         mov bh, 0
3333   1B39 E7            pop d
3334   1B3A FD 3E         mov [d], bl
3335   1B3C             ;; if (*prog == '='){ 
3336   1B3C             _if52_cond:
3337   1B3C 29 72 24      mov b, [_prog] ; $prog           
3338   1B3F 74            mov d, b
3339   1B40 32            mov bl, [d]
3340   1B41 A7 00         mov bh, 0
3341   1B43             ; START RELATIONAL
3342   1B43 D7            push a
3343   1B44 11            mov a, b
3344   1B45 26 3D 00      mov b, $3d
3345   1B48 B0            cmp a, b
3346   1B49 FD 71         seq ; ==
3347   1B4B E4            pop a
3348   1B4C             ; END RELATIONAL
3349   1B4C C0 00 00      cmp b, 0
3350   1B4F C6 81 1B      je _if52_else
3351   1B52             _if52_true:
3352   1B52             ;; *t++ = *prog++; 
3353   1B52 2C FF FF      mov b, [bp + -1] ; $t             
3354   1B55 FD 79         mov g, b
3355   1B57 FD 77         inc b
3356   1B59 FA FF FF      lea d, [bp + -1] ; $t
3357   1B5C FD 43         mov [d], b
3358   1B5E FD 27         mov b, g
3359   1B60 D8            push b
3360   1B61 29 72 24      mov b, [_prog] ; $prog           
3361   1B64 FD 79         mov g, b
3362   1B66 FD 77         inc b
3363   1B68 3B 72 24      mov d, _prog ; $prog
3364   1B6B FD 43         mov [d], b
3365   1B6D FD 27         mov b, g
3366   1B6F 74            mov d, b
3367   1B70 32            mov bl, [d]
3368   1B71 A7 00         mov bh, 0
3369   1B73 E7            pop d
3370   1B74 FD 3E         mov [d], bl
3371   1B76             ;; tok = LESS_THAN_OR_EQUAL; 
3372   1B76 3B 6E 24      mov d, _tok ; $tok         
3373   1B79 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL        
3374   1B7C FD 43         mov [d], b
3375   1B7E 0A CE 1B      jmp _if52_exit
3376   1B81             _if52_else:
3377   1B81             ;; if (*prog == '<'){ 
3378   1B81             _if53_cond:
3379   1B81 29 72 24      mov b, [_prog] ; $prog           
3380   1B84 74            mov d, b
3381   1B85 32            mov bl, [d]
3382   1B86 A7 00         mov bh, 0
3383   1B88             ; START RELATIONAL
3384   1B88 D7            push a
3385   1B89 11            mov a, b
3386   1B8A 26 3C 00      mov b, $3c
3387   1B8D B0            cmp a, b
3388   1B8E FD 71         seq ; ==
3389   1B90 E4            pop a
3390   1B91             ; END RELATIONAL
3391   1B91 C0 00 00      cmp b, 0
3392   1B94 C6 C6 1B      je _if53_else
3393   1B97             _if53_true:
3394   1B97             ;; *t++ = *prog++; 
3395   1B97 2C FF FF      mov b, [bp + -1] ; $t             
3396   1B9A FD 79         mov g, b
3397   1B9C FD 77         inc b
3398   1B9E FA FF FF      lea d, [bp + -1] ; $t
3399   1BA1 FD 43         mov [d], b
3400   1BA3 FD 27         mov b, g
3401   1BA5 D8            push b
3402   1BA6 29 72 24      mov b, [_prog] ; $prog           
3403   1BA9 FD 79         mov g, b
3404   1BAB FD 77         inc b
3405   1BAD 3B 72 24      mov d, _prog ; $prog
3406   1BB0 FD 43         mov [d], b
3407   1BB2 FD 27         mov b, g
3408   1BB4 74            mov d, b
3409   1BB5 32            mov bl, [d]
3410   1BB6 A7 00         mov bh, 0
3411   1BB8 E7            pop d
3412   1BB9 FD 3E         mov [d], bl
3413   1BBB             ;; tok = BITWISE_SHL; 
3414   1BBB 3B 6E 24      mov d, _tok ; $tok         
3415   1BBE 26 1A 00      mov b, 26; BITWISE_SHL        
3416   1BC1 FD 43         mov [d], b
3417   1BC3 0A CE 1B      jmp _if53_exit
3418   1BC6             _if53_else:
3419   1BC6             ;; tok = LESS_THAN; 
3420   1BC6 3B 6E 24      mov d, _tok ; $tok         
3421   1BC9 26 0A 00      mov b, 10; LESS_THAN        
3422   1BCC FD 43         mov [d], b
3423   1BCE             _if53_exit:
3424   1BCE             _if52_exit:
3425   1BCE             ;; toktype = DELIMITER;   
3426   1BCE 3B 70 24      mov d, _toktype ; $toktype         
3427   1BD1 26 01 00      mov b, 1; DELIMITER        
3428   1BD4 FD 43         mov [d], b
3429   1BD6 0A 02 22      jmp _if51_exit
3430   1BD9             _if51_else:
3431   1BD9             ;; if(*prog == '>'){ 
3432   1BD9             _if54_cond:
3433   1BD9 29 72 24      mov b, [_prog] ; $prog           
3434   1BDC 74            mov d, b
3435   1BDD 32            mov bl, [d]
3436   1BDE A7 00         mov bh, 0
3437   1BE0             ; START RELATIONAL
3438   1BE0 D7            push a
3439   1BE1 11            mov a, b
3440   1BE2 26 3E 00      mov b, $3e
3441   1BE5 B0            cmp a, b
3442   1BE6 FD 71         seq ; ==
3443   1BE8 E4            pop a
3444   1BE9             ; END RELATIONAL
3445   1BE9 C0 00 00      cmp b, 0
3446   1BEC C6 B0 1C      je _if54_else
3447   1BEF             _if54_true:
3448   1BEF             ;; *t++ = *prog++; 
3449   1BEF 2C FF FF      mov b, [bp + -1] ; $t             
3450   1BF2 FD 79         mov g, b
3451   1BF4 FD 77         inc b
3452   1BF6 FA FF FF      lea d, [bp + -1] ; $t
3453   1BF9 FD 43         mov [d], b
3454   1BFB FD 27         mov b, g
3455   1BFD D8            push b
3456   1BFE 29 72 24      mov b, [_prog] ; $prog           
3457   1C01 FD 79         mov g, b
3458   1C03 FD 77         inc b
3459   1C05 3B 72 24      mov d, _prog ; $prog
3460   1C08 FD 43         mov [d], b
3461   1C0A FD 27         mov b, g
3462   1C0C 74            mov d, b
3463   1C0D 32            mov bl, [d]
3464   1C0E A7 00         mov bh, 0
3465   1C10 E7            pop d
3466   1C11 FD 3E         mov [d], bl
3467   1C13             ;; if (*prog == '='){ 
3468   1C13             _if55_cond:
3469   1C13 29 72 24      mov b, [_prog] ; $prog           
3470   1C16 74            mov d, b
3471   1C17 32            mov bl, [d]
3472   1C18 A7 00         mov bh, 0
3473   1C1A             ; START RELATIONAL
3474   1C1A D7            push a
3475   1C1B 11            mov a, b
3476   1C1C 26 3D 00      mov b, $3d
3477   1C1F B0            cmp a, b
3478   1C20 FD 71         seq ; ==
3479   1C22 E4            pop a
3480   1C23             ; END RELATIONAL
3481   1C23 C0 00 00      cmp b, 0
3482   1C26 C6 58 1C      je _if55_else
3483   1C29             _if55_true:
3484   1C29             ;; *t++ = *prog++; 
3485   1C29 2C FF FF      mov b, [bp + -1] ; $t             
3486   1C2C FD 79         mov g, b
3487   1C2E FD 77         inc b
3488   1C30 FA FF FF      lea d, [bp + -1] ; $t
3489   1C33 FD 43         mov [d], b
3490   1C35 FD 27         mov b, g
3491   1C37 D8            push b
3492   1C38 29 72 24      mov b, [_prog] ; $prog           
3493   1C3B FD 79         mov g, b
3494   1C3D FD 77         inc b
3495   1C3F 3B 72 24      mov d, _prog ; $prog
3496   1C42 FD 43         mov [d], b
3497   1C44 FD 27         mov b, g
3498   1C46 74            mov d, b
3499   1C47 32            mov bl, [d]
3500   1C48 A7 00         mov bh, 0
3501   1C4A E7            pop d
3502   1C4B FD 3E         mov [d], bl
3503   1C4D             ;; tok = GREATER_THAN_OR_EQUAL; 
3504   1C4D 3B 6E 24      mov d, _tok ; $tok         
3505   1C50 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL        
3506   1C53 FD 43         mov [d], b
3507   1C55 0A A5 1C      jmp _if55_exit
3508   1C58             _if55_else:
3509   1C58             ;; if (*prog == '>'){ 
3510   1C58             _if56_cond:
3511   1C58 29 72 24      mov b, [_prog] ; $prog           
3512   1C5B 74            mov d, b
3513   1C5C 32            mov bl, [d]
3514   1C5D A7 00         mov bh, 0
3515   1C5F             ; START RELATIONAL
3516   1C5F D7            push a
3517   1C60 11            mov a, b
3518   1C61 26 3E 00      mov b, $3e
3519   1C64 B0            cmp a, b
3520   1C65 FD 71         seq ; ==
3521   1C67 E4            pop a
3522   1C68             ; END RELATIONAL
3523   1C68 C0 00 00      cmp b, 0
3524   1C6B C6 9D 1C      je _if56_else
3525   1C6E             _if56_true:
3526   1C6E             ;; *t++ = *prog++; 
3527   1C6E 2C FF FF      mov b, [bp + -1] ; $t             
3528   1C71 FD 79         mov g, b
3529   1C73 FD 77         inc b
3530   1C75 FA FF FF      lea d, [bp + -1] ; $t
3531   1C78 FD 43         mov [d], b
3532   1C7A FD 27         mov b, g
3533   1C7C D8            push b
3534   1C7D 29 72 24      mov b, [_prog] ; $prog           
3535   1C80 FD 79         mov g, b
3536   1C82 FD 77         inc b
3537   1C84 3B 72 24      mov d, _prog ; $prog
3538   1C87 FD 43         mov [d], b
3539   1C89 FD 27         mov b, g
3540   1C8B 74            mov d, b
3541   1C8C 32            mov bl, [d]
3542   1C8D A7 00         mov bh, 0
3543   1C8F E7            pop d
3544   1C90 FD 3E         mov [d], bl
3545   1C92             ;; tok = BITWISE_SHR; 
3546   1C92 3B 6E 24      mov d, _tok ; $tok         
3547   1C95 26 1B 00      mov b, 27; BITWISE_SHR        
3548   1C98 FD 43         mov [d], b
3549   1C9A 0A A5 1C      jmp _if56_exit
3550   1C9D             _if56_else:
3551   1C9D             ;; tok = GREATER_THAN; 
3552   1C9D 3B 6E 24      mov d, _tok ; $tok         
3553   1CA0 26 0C 00      mov b, 12; GREATER_THAN        
3554   1CA3 FD 43         mov [d], b
3555   1CA5             _if56_exit:
3556   1CA5             _if55_exit:
3557   1CA5             ;; toktype = DELIMITER;   
3558   1CA5 3B 70 24      mov d, _toktype ; $toktype         
3559   1CA8 26 01 00      mov b, 1; DELIMITER        
3560   1CAB FD 43         mov [d], b
3561   1CAD 0A 02 22      jmp _if54_exit
3562   1CB0             _if54_else:
3563   1CB0             ;; if(*prog == '!'){ 
3564   1CB0             _if57_cond:
3565   1CB0 29 72 24      mov b, [_prog] ; $prog           
3566   1CB3 74            mov d, b
3567   1CB4 32            mov bl, [d]
3568   1CB5 A7 00         mov bh, 0
3569   1CB7             ; START RELATIONAL
3570   1CB7 D7            push a
3571   1CB8 11            mov a, b
3572   1CB9 26 21 00      mov b, $21
3573   1CBC B0            cmp a, b
3574   1CBD FD 71         seq ; ==
3575   1CBF E4            pop a
3576   1CC0             ; END RELATIONAL
3577   1CC0 C0 00 00      cmp b, 0
3578   1CC3 C6 42 1D      je _if57_else
3579   1CC6             _if57_true:
3580   1CC6             ;; *t++ = *prog++; 
3581   1CC6 2C FF FF      mov b, [bp + -1] ; $t             
3582   1CC9 FD 79         mov g, b
3583   1CCB FD 77         inc b
3584   1CCD FA FF FF      lea d, [bp + -1] ; $t
3585   1CD0 FD 43         mov [d], b
3586   1CD2 FD 27         mov b, g
3587   1CD4 D8            push b
3588   1CD5 29 72 24      mov b, [_prog] ; $prog           
3589   1CD8 FD 79         mov g, b
3590   1CDA FD 77         inc b
3591   1CDC 3B 72 24      mov d, _prog ; $prog
3592   1CDF FD 43         mov [d], b
3593   1CE1 FD 27         mov b, g
3594   1CE3 74            mov d, b
3595   1CE4 32            mov bl, [d]
3596   1CE5 A7 00         mov bh, 0
3597   1CE7 E7            pop d
3598   1CE8 FD 3E         mov [d], bl
3599   1CEA             ;; if(*prog == '='){ 
3600   1CEA             _if58_cond:
3601   1CEA 29 72 24      mov b, [_prog] ; $prog           
3602   1CED 74            mov d, b
3603   1CEE 32            mov bl, [d]
3604   1CEF A7 00         mov bh, 0
3605   1CF1             ; START RELATIONAL
3606   1CF1 D7            push a
3607   1CF2 11            mov a, b
3608   1CF3 26 3D 00      mov b, $3d
3609   1CF6 B0            cmp a, b
3610   1CF7 FD 71         seq ; ==
3611   1CF9 E4            pop a
3612   1CFA             ; END RELATIONAL
3613   1CFA C0 00 00      cmp b, 0
3614   1CFD C6 2F 1D      je _if58_else
3615   1D00             _if58_true:
3616   1D00             ;; *t++ = *prog++; 
3617   1D00 2C FF FF      mov b, [bp + -1] ; $t             
3618   1D03 FD 79         mov g, b
3619   1D05 FD 77         inc b
3620   1D07 FA FF FF      lea d, [bp + -1] ; $t
3621   1D0A FD 43         mov [d], b
3622   1D0C FD 27         mov b, g
3623   1D0E D8            push b
3624   1D0F 29 72 24      mov b, [_prog] ; $prog           
3625   1D12 FD 79         mov g, b
3626   1D14 FD 77         inc b
3627   1D16 3B 72 24      mov d, _prog ; $prog
3628   1D19 FD 43         mov [d], b
3629   1D1B FD 27         mov b, g
3630   1D1D 74            mov d, b
3631   1D1E 32            mov bl, [d]
3632   1D1F A7 00         mov bh, 0
3633   1D21 E7            pop d
3634   1D22 FD 3E         mov [d], bl
3635   1D24             ;; tok = NOT_EQUAL; 
3636   1D24 3B 6E 24      mov d, _tok ; $tok         
3637   1D27 26 09 00      mov b, 9; NOT_EQUAL        
3638   1D2A FD 43         mov [d], b
3639   1D2C 0A 37 1D      jmp _if58_exit
3640   1D2F             _if58_else:
3641   1D2F             ;; tok = LOGICAL_NOT; 
3642   1D2F 3B 6E 24      mov d, _tok ; $tok         
3643   1D32 26 10 00      mov b, 16; LOGICAL_NOT        
3644   1D35 FD 43         mov [d], b
3645   1D37             _if58_exit:
3646   1D37             ;; toktype = DELIMITER;   
3647   1D37 3B 70 24      mov d, _toktype ; $toktype         
3648   1D3A 26 01 00      mov b, 1; DELIMITER        
3649   1D3D FD 43         mov [d], b
3650   1D3F 0A 02 22      jmp _if57_exit
3651   1D42             _if57_else:
3652   1D42             ;; if(*prog == '+'){ 
3653   1D42             _if59_cond:
3654   1D42 29 72 24      mov b, [_prog] ; $prog           
3655   1D45 74            mov d, b
3656   1D46 32            mov bl, [d]
3657   1D47 A7 00         mov bh, 0
3658   1D49             ; START RELATIONAL
3659   1D49 D7            push a
3660   1D4A 11            mov a, b
3661   1D4B 26 2B 00      mov b, $2b
3662   1D4E B0            cmp a, b
3663   1D4F FD 71         seq ; ==
3664   1D51 E4            pop a
3665   1D52             ; END RELATIONAL
3666   1D52 C0 00 00      cmp b, 0
3667   1D55 C6 D4 1D      je _if59_else
3668   1D58             _if59_true:
3669   1D58             ;; *t++ = *prog++; 
3670   1D58 2C FF FF      mov b, [bp + -1] ; $t             
3671   1D5B FD 79         mov g, b
3672   1D5D FD 77         inc b
3673   1D5F FA FF FF      lea d, [bp + -1] ; $t
3674   1D62 FD 43         mov [d], b
3675   1D64 FD 27         mov b, g
3676   1D66 D8            push b
3677   1D67 29 72 24      mov b, [_prog] ; $prog           
3678   1D6A FD 79         mov g, b
3679   1D6C FD 77         inc b
3680   1D6E 3B 72 24      mov d, _prog ; $prog
3681   1D71 FD 43         mov [d], b
3682   1D73 FD 27         mov b, g
3683   1D75 74            mov d, b
3684   1D76 32            mov bl, [d]
3685   1D77 A7 00         mov bh, 0
3686   1D79 E7            pop d
3687   1D7A FD 3E         mov [d], bl
3688   1D7C             ;; if(*prog == '+'){ 
3689   1D7C             _if60_cond:
3690   1D7C 29 72 24      mov b, [_prog] ; $prog           
3691   1D7F 74            mov d, b
3692   1D80 32            mov bl, [d]
3693   1D81 A7 00         mov bh, 0
3694   1D83             ; START RELATIONAL
3695   1D83 D7            push a
3696   1D84 11            mov a, b
3697   1D85 26 2B 00      mov b, $2b
3698   1D88 B0            cmp a, b
3699   1D89 FD 71         seq ; ==
3700   1D8B E4            pop a
3701   1D8C             ; END RELATIONAL
3702   1D8C C0 00 00      cmp b, 0
3703   1D8F C6 C1 1D      je _if60_else
3704   1D92             _if60_true:
3705   1D92             ;; *t++ = *prog++; 
3706   1D92 2C FF FF      mov b, [bp + -1] ; $t             
3707   1D95 FD 79         mov g, b
3708   1D97 FD 77         inc b
3709   1D99 FA FF FF      lea d, [bp + -1] ; $t
3710   1D9C FD 43         mov [d], b
3711   1D9E FD 27         mov b, g
3712   1DA0 D8            push b
3713   1DA1 29 72 24      mov b, [_prog] ; $prog           
3714   1DA4 FD 79         mov g, b
3715   1DA6 FD 77         inc b
3716   1DA8 3B 72 24      mov d, _prog ; $prog
3717   1DAB FD 43         mov [d], b
3718   1DAD FD 27         mov b, g
3719   1DAF 74            mov d, b
3720   1DB0 32            mov bl, [d]
3721   1DB1 A7 00         mov bh, 0
3722   1DB3 E7            pop d
3723   1DB4 FD 3E         mov [d], bl
3724   1DB6             ;; tok = INCREMENT; 
3725   1DB6 3B 6E 24      mov d, _tok ; $tok         
3726   1DB9 26 05 00      mov b, 5; INCREMENT        
3727   1DBC FD 43         mov [d], b
3728   1DBE 0A C9 1D      jmp _if60_exit
3729   1DC1             _if60_else:
3730   1DC1             ;; tok = PLUS; 
3731   1DC1 3B 6E 24      mov d, _tok ; $tok         
3732   1DC4 26 01 00      mov b, 1; PLUS        
3733   1DC7 FD 43         mov [d], b
3734   1DC9             _if60_exit:
3735   1DC9             ;; toktype = DELIMITER;   
3736   1DC9 3B 70 24      mov d, _toktype ; $toktype         
3737   1DCC 26 01 00      mov b, 1; DELIMITER        
3738   1DCF FD 43         mov [d], b
3739   1DD1 0A 02 22      jmp _if59_exit
3740   1DD4             _if59_else:
3741   1DD4             ;; if(*prog == '-'){ 
3742   1DD4             _if61_cond:
3743   1DD4 29 72 24      mov b, [_prog] ; $prog           
3744   1DD7 74            mov d, b
3745   1DD8 32            mov bl, [d]
3746   1DD9 A7 00         mov bh, 0
3747   1DDB             ; START RELATIONAL
3748   1DDB D7            push a
3749   1DDC 11            mov a, b
3750   1DDD 26 2D 00      mov b, $2d
3751   1DE0 B0            cmp a, b
3752   1DE1 FD 71         seq ; ==
3753   1DE3 E4            pop a
3754   1DE4             ; END RELATIONAL
3755   1DE4 C0 00 00      cmp b, 0
3756   1DE7 C6 66 1E      je _if61_else
3757   1DEA             _if61_true:
3758   1DEA             ;; *t++ = *prog++; 
3759   1DEA 2C FF FF      mov b, [bp + -1] ; $t             
3760   1DED FD 79         mov g, b
3761   1DEF FD 77         inc b
3762   1DF1 FA FF FF      lea d, [bp + -1] ; $t
3763   1DF4 FD 43         mov [d], b
3764   1DF6 FD 27         mov b, g
3765   1DF8 D8            push b
3766   1DF9 29 72 24      mov b, [_prog] ; $prog           
3767   1DFC FD 79         mov g, b
3768   1DFE FD 77         inc b
3769   1E00 3B 72 24      mov d, _prog ; $prog
3770   1E03 FD 43         mov [d], b
3771   1E05 FD 27         mov b, g
3772   1E07 74            mov d, b
3773   1E08 32            mov bl, [d]
3774   1E09 A7 00         mov bh, 0
3775   1E0B E7            pop d
3776   1E0C FD 3E         mov [d], bl
3777   1E0E             ;; if(*prog == '-'){ 
3778   1E0E             _if62_cond:
3779   1E0E 29 72 24      mov b, [_prog] ; $prog           
3780   1E11 74            mov d, b
3781   1E12 32            mov bl, [d]
3782   1E13 A7 00         mov bh, 0
3783   1E15             ; START RELATIONAL
3784   1E15 D7            push a
3785   1E16 11            mov a, b
3786   1E17 26 2D 00      mov b, $2d
3787   1E1A B0            cmp a, b
3788   1E1B FD 71         seq ; ==
3789   1E1D E4            pop a
3790   1E1E             ; END RELATIONAL
3791   1E1E C0 00 00      cmp b, 0
3792   1E21 C6 53 1E      je _if62_else
3793   1E24             _if62_true:
3794   1E24             ;; *t++ = *prog++; 
3795   1E24 2C FF FF      mov b, [bp + -1] ; $t             
3796   1E27 FD 79         mov g, b
3797   1E29 FD 77         inc b
3798   1E2B FA FF FF      lea d, [bp + -1] ; $t
3799   1E2E FD 43         mov [d], b
3800   1E30 FD 27         mov b, g
3801   1E32 D8            push b
3802   1E33 29 72 24      mov b, [_prog] ; $prog           
3803   1E36 FD 79         mov g, b
3804   1E38 FD 77         inc b
3805   1E3A 3B 72 24      mov d, _prog ; $prog
3806   1E3D FD 43         mov [d], b
3807   1E3F FD 27         mov b, g
3808   1E41 74            mov d, b
3809   1E42 32            mov bl, [d]
3810   1E43 A7 00         mov bh, 0
3811   1E45 E7            pop d
3812   1E46 FD 3E         mov [d], bl
3813   1E48             ;; tok = DECREMENT; 
3814   1E48 3B 6E 24      mov d, _tok ; $tok         
3815   1E4B 26 06 00      mov b, 6; DECREMENT        
3816   1E4E FD 43         mov [d], b
3817   1E50 0A 5B 1E      jmp _if62_exit
3818   1E53             _if62_else:
3819   1E53             ;; tok = MINUS; 
3820   1E53 3B 6E 24      mov d, _tok ; $tok         
3821   1E56 26 02 00      mov b, 2; MINUS        
3822   1E59 FD 43         mov [d], b
3823   1E5B             _if62_exit:
3824   1E5B             ;; toktype = DELIMITER;   
3825   1E5B 3B 70 24      mov d, _toktype ; $toktype         
3826   1E5E 26 01 00      mov b, 1; DELIMITER        
3827   1E61 FD 43         mov [d], b
3828   1E63 0A 02 22      jmp _if61_exit
3829   1E66             _if61_else:
3830   1E66             ;; if(*prog == '$'){ 
3831   1E66             _if63_cond:
3832   1E66 29 72 24      mov b, [_prog] ; $prog           
3833   1E69 74            mov d, b
3834   1E6A 32            mov bl, [d]
3835   1E6B A7 00         mov bh, 0
3836   1E6D             ; START RELATIONAL
3837   1E6D D7            push a
3838   1E6E 11            mov a, b
3839   1E6F 26 24 00      mov b, $24
3840   1E72 B0            cmp a, b
3841   1E73 FD 71         seq ; ==
3842   1E75 E4            pop a
3843   1E76             ; END RELATIONAL
3844   1E76 C0 00 00      cmp b, 0
3845   1E79 C6 B3 1E      je _if63_else
3846   1E7C             _if63_true:
3847   1E7C             ;; *t++ = *prog++; 
3848   1E7C 2C FF FF      mov b, [bp + -1] ; $t             
3849   1E7F FD 79         mov g, b
3850   1E81 FD 77         inc b
3851   1E83 FA FF FF      lea d, [bp + -1] ; $t
3852   1E86 FD 43         mov [d], b
3853   1E88 FD 27         mov b, g
3854   1E8A D8            push b
3855   1E8B 29 72 24      mov b, [_prog] ; $prog           
3856   1E8E FD 79         mov g, b
3857   1E90 FD 77         inc b
3858   1E92 3B 72 24      mov d, _prog ; $prog
3859   1E95 FD 43         mov [d], b
3860   1E97 FD 27         mov b, g
3861   1E99 74            mov d, b
3862   1E9A 32            mov bl, [d]
3863   1E9B A7 00         mov bh, 0
3864   1E9D E7            pop d
3865   1E9E FD 3E         mov [d], bl
3866   1EA0             ;; tok = DOLLAR; 
3867   1EA0 3B 6E 24      mov d, _tok ; $tok         
3868   1EA3 26 12 00      mov b, 18; DOLLAR        
3869   1EA6 FD 43         mov [d], b
3870   1EA8             ;; toktype = DELIMITER;   
3871   1EA8 3B 70 24      mov d, _toktype ; $toktype         
3872   1EAB 26 01 00      mov b, 1; DELIMITER        
3873   1EAE FD 43         mov [d], b
3874   1EB0 0A 02 22      jmp _if63_exit
3875   1EB3             _if63_else:
3876   1EB3             ;; if(*prog == '^'){ 
3877   1EB3             _if64_cond:
3878   1EB3 29 72 24      mov b, [_prog] ; $prog           
3879   1EB6 74            mov d, b
3880   1EB7 32            mov bl, [d]
3881   1EB8 A7 00         mov bh, 0
3882   1EBA             ; START RELATIONAL
3883   1EBA D7            push a
3884   1EBB 11            mov a, b
3885   1EBC 26 5E 00      mov b, $5e
3886   1EBF B0            cmp a, b
3887   1EC0 FD 71         seq ; ==
3888   1EC2 E4            pop a
3889   1EC3             ; END RELATIONAL
3890   1EC3 C0 00 00      cmp b, 0
3891   1EC6 C6 00 1F      je _if64_else
3892   1EC9             _if64_true:
3893   1EC9             ;; *t++ = *prog++; 
3894   1EC9 2C FF FF      mov b, [bp + -1] ; $t             
3895   1ECC FD 79         mov g, b
3896   1ECE FD 77         inc b
3897   1ED0 FA FF FF      lea d, [bp + -1] ; $t
3898   1ED3 FD 43         mov [d], b
3899   1ED5 FD 27         mov b, g
3900   1ED7 D8            push b
3901   1ED8 29 72 24      mov b, [_prog] ; $prog           
3902   1EDB FD 79         mov g, b
3903   1EDD FD 77         inc b
3904   1EDF 3B 72 24      mov d, _prog ; $prog
3905   1EE2 FD 43         mov [d], b
3906   1EE4 FD 27         mov b, g
3907   1EE6 74            mov d, b
3908   1EE7 32            mov bl, [d]
3909   1EE8 A7 00         mov bh, 0
3910   1EEA E7            pop d
3911   1EEB FD 3E         mov [d], bl
3912   1EED             ;; tok = BITWISE_XOR; 
3913   1EED 3B 6E 24      mov d, _tok ; $tok         
3914   1EF0 26 17 00      mov b, 23; BITWISE_XOR        
3915   1EF3 FD 43         mov [d], b
3916   1EF5             ;; toktype = DELIMITER;   
3917   1EF5 3B 70 24      mov d, _toktype ; $toktype         
3918   1EF8 26 01 00      mov b, 1; DELIMITER        
3919   1EFB FD 43         mov [d], b
3920   1EFD 0A 02 22      jmp _if64_exit
3921   1F00             _if64_else:
3922   1F00             ;; if(*prog == '@'){ 
3923   1F00             _if65_cond:
3924   1F00 29 72 24      mov b, [_prog] ; $prog           
3925   1F03 74            mov d, b
3926   1F04 32            mov bl, [d]
3927   1F05 A7 00         mov bh, 0
3928   1F07             ; START RELATIONAL
3929   1F07 D7            push a
3930   1F08 11            mov a, b
3931   1F09 26 40 00      mov b, $40
3932   1F0C B0            cmp a, b
3933   1F0D FD 71         seq ; ==
3934   1F0F E4            pop a
3935   1F10             ; END RELATIONAL
3936   1F10 C0 00 00      cmp b, 0
3937   1F13 C6 4D 1F      je _if65_else
3938   1F16             _if65_true:
3939   1F16             ;; *t++ = *prog++; 
3940   1F16 2C FF FF      mov b, [bp + -1] ; $t             
3941   1F19 FD 79         mov g, b
3942   1F1B FD 77         inc b
3943   1F1D FA FF FF      lea d, [bp + -1] ; $t
3944   1F20 FD 43         mov [d], b
3945   1F22 FD 27         mov b, g
3946   1F24 D8            push b
3947   1F25 29 72 24      mov b, [_prog] ; $prog           
3948   1F28 FD 79         mov g, b
3949   1F2A FD 77         inc b
3950   1F2C 3B 72 24      mov d, _prog ; $prog
3951   1F2F FD 43         mov [d], b
3952   1F31 FD 27         mov b, g
3953   1F33 74            mov d, b
3954   1F34 32            mov bl, [d]
3955   1F35 A7 00         mov bh, 0
3956   1F37 E7            pop d
3957   1F38 FD 3E         mov [d], bl
3958   1F3A             ;; tok = AT; 
3959   1F3A 3B 6E 24      mov d, _tok ; $tok         
3960   1F3D 26 14 00      mov b, 20; AT        
3961   1F40 FD 43         mov [d], b
3962   1F42             ;; toktype = DELIMITER;   
3963   1F42 3B 70 24      mov d, _toktype ; $toktype         
3964   1F45 26 01 00      mov b, 1; DELIMITER        
3965   1F48 FD 43         mov [d], b
3966   1F4A 0A 02 22      jmp _if65_exit
3967   1F4D             _if65_else:
3968   1F4D             ;; if(*prog == '*'){ 
3969   1F4D             _if66_cond:
3970   1F4D 29 72 24      mov b, [_prog] ; $prog           
3971   1F50 74            mov d, b
3972   1F51 32            mov bl, [d]
3973   1F52 A7 00         mov bh, 0
3974   1F54             ; START RELATIONAL
3975   1F54 D7            push a
3976   1F55 11            mov a, b
3977   1F56 26 2A 00      mov b, $2a
3978   1F59 B0            cmp a, b
3979   1F5A FD 71         seq ; ==
3980   1F5C E4            pop a
3981   1F5D             ; END RELATIONAL
3982   1F5D C0 00 00      cmp b, 0
3983   1F60 C6 9A 1F      je _if66_else
3984   1F63             _if66_true:
3985   1F63             ;; *t++ = *prog++; 
3986   1F63 2C FF FF      mov b, [bp + -1] ; $t             
3987   1F66 FD 79         mov g, b
3988   1F68 FD 77         inc b
3989   1F6A FA FF FF      lea d, [bp + -1] ; $t
3990   1F6D FD 43         mov [d], b
3991   1F6F FD 27         mov b, g
3992   1F71 D8            push b
3993   1F72 29 72 24      mov b, [_prog] ; $prog           
3994   1F75 FD 79         mov g, b
3995   1F77 FD 77         inc b
3996   1F79 3B 72 24      mov d, _prog ; $prog
3997   1F7C FD 43         mov [d], b
3998   1F7E FD 27         mov b, g
3999   1F80 74            mov d, b
4000   1F81 32            mov bl, [d]
4001   1F82 A7 00         mov bh, 0
4002   1F84 E7            pop d
4003   1F85 FD 3E         mov [d], bl
4004   1F87             ;; tok = STAR; 
4005   1F87 3B 6E 24      mov d, _tok ; $tok         
4006   1F8A 26 03 00      mov b, 3; STAR        
4007   1F8D FD 43         mov [d], b
4008   1F8F             ;; toktype = DELIMITER;   
4009   1F8F 3B 70 24      mov d, _toktype ; $toktype         
4010   1F92 26 01 00      mov b, 1; DELIMITER        
4011   1F95 FD 43         mov [d], b
4012   1F97 0A 02 22      jmp _if66_exit
4013   1F9A             _if66_else:
4014   1F9A             ;; if(*prog == '/'){ 
4015   1F9A             _if67_cond:
4016   1F9A 29 72 24      mov b, [_prog] ; $prog           
4017   1F9D 74            mov d, b
4018   1F9E 32            mov bl, [d]
4019   1F9F A7 00         mov bh, 0
4020   1FA1             ; START RELATIONAL
4021   1FA1 D7            push a
4022   1FA2 11            mov a, b
4023   1FA3 26 2F 00      mov b, $2f
4024   1FA6 B0            cmp a, b
4025   1FA7 FD 71         seq ; ==
4026   1FA9 E4            pop a
4027   1FAA             ; END RELATIONAL
4028   1FAA C0 00 00      cmp b, 0
4029   1FAD C6 E7 1F      je _if67_else
4030   1FB0             _if67_true:
4031   1FB0             ;; *t++ = *prog++; 
4032   1FB0 2C FF FF      mov b, [bp + -1] ; $t             
4033   1FB3 FD 79         mov g, b
4034   1FB5 FD 77         inc b
4035   1FB7 FA FF FF      lea d, [bp + -1] ; $t
4036   1FBA FD 43         mov [d], b
4037   1FBC FD 27         mov b, g
4038   1FBE D8            push b
4039   1FBF 29 72 24      mov b, [_prog] ; $prog           
4040   1FC2 FD 79         mov g, b
4041   1FC4 FD 77         inc b
4042   1FC6 3B 72 24      mov d, _prog ; $prog
4043   1FC9 FD 43         mov [d], b
4044   1FCB FD 27         mov b, g
4045   1FCD 74            mov d, b
4046   1FCE 32            mov bl, [d]
4047   1FCF A7 00         mov bh, 0
4048   1FD1 E7            pop d
4049   1FD2 FD 3E         mov [d], bl
4050   1FD4             ;; tok = FSLASH; 
4051   1FD4 3B 6E 24      mov d, _tok ; $tok         
4052   1FD7 26 04 00      mov b, 4; FSLASH        
4053   1FDA FD 43         mov [d], b
4054   1FDC             ;; toktype = DELIMITER;   
4055   1FDC 3B 70 24      mov d, _toktype ; $toktype         
4056   1FDF 26 01 00      mov b, 1; DELIMITER        
4057   1FE2 FD 43         mov [d], b
4058   1FE4 0A 02 22      jmp _if67_exit
4059   1FE7             _if67_else:
4060   1FE7             ;; if(*prog == '%'){ 
4061   1FE7             _if68_cond:
4062   1FE7 29 72 24      mov b, [_prog] ; $prog           
4063   1FEA 74            mov d, b
4064   1FEB 32            mov bl, [d]
4065   1FEC A7 00         mov bh, 0
4066   1FEE             ; START RELATIONAL
4067   1FEE D7            push a
4068   1FEF 11            mov a, b
4069   1FF0 26 25 00      mov b, $25
4070   1FF3 B0            cmp a, b
4071   1FF4 FD 71         seq ; ==
4072   1FF6 E4            pop a
4073   1FF7             ; END RELATIONAL
4074   1FF7 C0 00 00      cmp b, 0
4075   1FFA C6 34 20      je _if68_else
4076   1FFD             _if68_true:
4077   1FFD             ;; *t++ = *prog++; 
4078   1FFD 2C FF FF      mov b, [bp + -1] ; $t             
4079   2000 FD 79         mov g, b
4080   2002 FD 77         inc b
4081   2004 FA FF FF      lea d, [bp + -1] ; $t
4082   2007 FD 43         mov [d], b
4083   2009 FD 27         mov b, g
4084   200B D8            push b
4085   200C 29 72 24      mov b, [_prog] ; $prog           
4086   200F FD 79         mov g, b
4087   2011 FD 77         inc b
4088   2013 3B 72 24      mov d, _prog ; $prog
4089   2016 FD 43         mov [d], b
4090   2018 FD 27         mov b, g
4091   201A 74            mov d, b
4092   201B 32            mov bl, [d]
4093   201C A7 00         mov bh, 0
4094   201E E7            pop d
4095   201F FD 3E         mov [d], bl
4096   2021             ;; tok = MOD; 
4097   2021 3B 6E 24      mov d, _tok ; $tok         
4098   2024 26 07 00      mov b, 7; MOD        
4099   2027 FD 43         mov [d], b
4100   2029             ;; toktype = DELIMITER;   
4101   2029 3B 70 24      mov d, _toktype ; $toktype         
4102   202C 26 01 00      mov b, 1; DELIMITER        
4103   202F FD 43         mov [d], b
4104   2031 0A 02 22      jmp _if68_exit
4105   2034             _if68_else:
4106   2034             ;; if(*prog == '('){ 
4107   2034             _if69_cond:
4108   2034 29 72 24      mov b, [_prog] ; $prog           
4109   2037 74            mov d, b
4110   2038 32            mov bl, [d]
4111   2039 A7 00         mov bh, 0
4112   203B             ; START RELATIONAL
4113   203B D7            push a
4114   203C 11            mov a, b
4115   203D 26 28 00      mov b, $28
4116   2040 B0            cmp a, b
4117   2041 FD 71         seq ; ==
4118   2043 E4            pop a
4119   2044             ; END RELATIONAL
4120   2044 C0 00 00      cmp b, 0
4121   2047 C6 81 20      je _if69_else
4122   204A             _if69_true:
4123   204A             ;; *t++ = *prog++; 
4124   204A 2C FF FF      mov b, [bp + -1] ; $t             
4125   204D FD 79         mov g, b
4126   204F FD 77         inc b
4127   2051 FA FF FF      lea d, [bp + -1] ; $t
4128   2054 FD 43         mov [d], b
4129   2056 FD 27         mov b, g
4130   2058 D8            push b
4131   2059 29 72 24      mov b, [_prog] ; $prog           
4132   205C FD 79         mov g, b
4133   205E FD 77         inc b
4134   2060 3B 72 24      mov d, _prog ; $prog
4135   2063 FD 43         mov [d], b
4136   2065 FD 27         mov b, g
4137   2067 74            mov d, b
4138   2068 32            mov bl, [d]
4139   2069 A7 00         mov bh, 0
4140   206B E7            pop d
4141   206C FD 3E         mov [d], bl
4142   206E             ;; tok = OPENING_PAREN; 
4143   206E 3B 6E 24      mov d, _tok ; $tok         
4144   2071 26 1C 00      mov b, 28; OPENING_PAREN        
4145   2074 FD 43         mov [d], b
4146   2076             ;; toktype = DELIMITER;   
4147   2076 3B 70 24      mov d, _toktype ; $toktype         
4148   2079 26 01 00      mov b, 1; DELIMITER        
4149   207C FD 43         mov [d], b
4150   207E 0A 02 22      jmp _if69_exit
4151   2081             _if69_else:
4152   2081             ;; if(*prog == ')'){ 
4153   2081             _if70_cond:
4154   2081 29 72 24      mov b, [_prog] ; $prog           
4155   2084 74            mov d, b
4156   2085 32            mov bl, [d]
4157   2086 A7 00         mov bh, 0
4158   2088             ; START RELATIONAL
4159   2088 D7            push a
4160   2089 11            mov a, b
4161   208A 26 29 00      mov b, $29
4162   208D B0            cmp a, b
4163   208E FD 71         seq ; ==
4164   2090 E4            pop a
4165   2091             ; END RELATIONAL
4166   2091 C0 00 00      cmp b, 0
4167   2094 C6 CE 20      je _if70_else
4168   2097             _if70_true:
4169   2097             ;; *t++ = *prog++; 
4170   2097 2C FF FF      mov b, [bp + -1] ; $t             
4171   209A FD 79         mov g, b
4172   209C FD 77         inc b
4173   209E FA FF FF      lea d, [bp + -1] ; $t
4174   20A1 FD 43         mov [d], b
4175   20A3 FD 27         mov b, g
4176   20A5 D8            push b
4177   20A6 29 72 24      mov b, [_prog] ; $prog           
4178   20A9 FD 79         mov g, b
4179   20AB FD 77         inc b
4180   20AD 3B 72 24      mov d, _prog ; $prog
4181   20B0 FD 43         mov [d], b
4182   20B2 FD 27         mov b, g
4183   20B4 74            mov d, b
4184   20B5 32            mov bl, [d]
4185   20B6 A7 00         mov bh, 0
4186   20B8 E7            pop d
4187   20B9 FD 3E         mov [d], bl
4188   20BB             ;; tok = CLOSING_PAREN; 
4189   20BB 3B 6E 24      mov d, _tok ; $tok         
4190   20BE 26 1D 00      mov b, 29; CLOSING_PAREN        
4191   20C1 FD 43         mov [d], b
4192   20C3             ;; toktype = DELIMITER;   
4193   20C3 3B 70 24      mov d, _toktype ; $toktype         
4194   20C6 26 01 00      mov b, 1; DELIMITER        
4195   20C9 FD 43         mov [d], b
4196   20CB 0A 02 22      jmp _if70_exit
4197   20CE             _if70_else:
4198   20CE             ;; if(*prog == ';'){ 
4199   20CE             _if71_cond:
4200   20CE 29 72 24      mov b, [_prog] ; $prog           
4201   20D1 74            mov d, b
4202   20D2 32            mov bl, [d]
4203   20D3 A7 00         mov bh, 0
4204   20D5             ; START RELATIONAL
4205   20D5 D7            push a
4206   20D6 11            mov a, b
4207   20D7 26 3B 00      mov b, $3b
4208   20DA B0            cmp a, b
4209   20DB FD 71         seq ; ==
4210   20DD E4            pop a
4211   20DE             ; END RELATIONAL
4212   20DE C0 00 00      cmp b, 0
4213   20E1 C6 1B 21      je _if71_else
4214   20E4             _if71_true:
4215   20E4             ;; *t++ = *prog++; 
4216   20E4 2C FF FF      mov b, [bp + -1] ; $t             
4217   20E7 FD 79         mov g, b
4218   20E9 FD 77         inc b
4219   20EB FA FF FF      lea d, [bp + -1] ; $t
4220   20EE FD 43         mov [d], b
4221   20F0 FD 27         mov b, g
4222   20F2 D8            push b
4223   20F3 29 72 24      mov b, [_prog] ; $prog           
4224   20F6 FD 79         mov g, b
4225   20F8 FD 77         inc b
4226   20FA 3B 72 24      mov d, _prog ; $prog
4227   20FD FD 43         mov [d], b
4228   20FF FD 27         mov b, g
4229   2101 74            mov d, b
4230   2102 32            mov bl, [d]
4231   2103 A7 00         mov bh, 0
4232   2105 E7            pop d
4233   2106 FD 3E         mov [d], bl
4234   2108             ;; tok = SEMICOLON; 
4235   2108 3B 6E 24      mov d, _tok ; $tok         
4236   210B 26 23 00      mov b, 35; SEMICOLON        
4237   210E FD 43         mov [d], b
4238   2110             ;; toktype = DELIMITER;   
4239   2110 3B 70 24      mov d, _toktype ; $toktype         
4240   2113 26 01 00      mov b, 1; DELIMITER        
4241   2116 FD 43         mov [d], b
4242   2118 0A 02 22      jmp _if71_exit
4243   211B             _if71_else:
4244   211B             ;; if(*prog == ':'){ 
4245   211B             _if72_cond:
4246   211B 29 72 24      mov b, [_prog] ; $prog           
4247   211E 74            mov d, b
4248   211F 32            mov bl, [d]
4249   2120 A7 00         mov bh, 0
4250   2122             ; START RELATIONAL
4251   2122 D7            push a
4252   2123 11            mov a, b
4253   2124 26 3A 00      mov b, $3a
4254   2127 B0            cmp a, b
4255   2128 FD 71         seq ; ==
4256   212A E4            pop a
4257   212B             ; END RELATIONAL
4258   212B C0 00 00      cmp b, 0
4259   212E C6 68 21      je _if72_else
4260   2131             _if72_true:
4261   2131             ;; *t++ = *prog++; 
4262   2131 2C FF FF      mov b, [bp + -1] ; $t             
4263   2134 FD 79         mov g, b
4264   2136 FD 77         inc b
4265   2138 FA FF FF      lea d, [bp + -1] ; $t
4266   213B FD 43         mov [d], b
4267   213D FD 27         mov b, g
4268   213F D8            push b
4269   2140 29 72 24      mov b, [_prog] ; $prog           
4270   2143 FD 79         mov g, b
4271   2145 FD 77         inc b
4272   2147 3B 72 24      mov d, _prog ; $prog
4273   214A FD 43         mov [d], b
4274   214C FD 27         mov b, g
4275   214E 74            mov d, b
4276   214F 32            mov bl, [d]
4277   2150 A7 00         mov bh, 0
4278   2152 E7            pop d
4279   2153 FD 3E         mov [d], bl
4280   2155             ;; tok = COLON; 
4281   2155 3B 6E 24      mov d, _tok ; $tok         
4282   2158 26 22 00      mov b, 34; COLON        
4283   215B FD 43         mov [d], b
4284   215D             ;; toktype = DELIMITER;   
4285   215D 3B 70 24      mov d, _toktype ; $toktype         
4286   2160 26 01 00      mov b, 1; DELIMITER        
4287   2163 FD 43         mov [d], b
4288   2165 0A 02 22      jmp _if72_exit
4289   2168             _if72_else:
4290   2168             ;; if(*prog == ','){ 
4291   2168             _if73_cond:
4292   2168 29 72 24      mov b, [_prog] ; $prog           
4293   216B 74            mov d, b
4294   216C 32            mov bl, [d]
4295   216D A7 00         mov bh, 0
4296   216F             ; START RELATIONAL
4297   216F D7            push a
4298   2170 11            mov a, b
4299   2171 26 2C 00      mov b, $2c
4300   2174 B0            cmp a, b
4301   2175 FD 71         seq ; ==
4302   2177 E4            pop a
4303   2178             ; END RELATIONAL
4304   2178 C0 00 00      cmp b, 0
4305   217B C6 B5 21      je _if73_else
4306   217E             _if73_true:
4307   217E             ;; *t++ = *prog++; 
4308   217E 2C FF FF      mov b, [bp + -1] ; $t             
4309   2181 FD 79         mov g, b
4310   2183 FD 77         inc b
4311   2185 FA FF FF      lea d, [bp + -1] ; $t
4312   2188 FD 43         mov [d], b
4313   218A FD 27         mov b, g
4314   218C D8            push b
4315   218D 29 72 24      mov b, [_prog] ; $prog           
4316   2190 FD 79         mov g, b
4317   2192 FD 77         inc b
4318   2194 3B 72 24      mov d, _prog ; $prog
4319   2197 FD 43         mov [d], b
4320   2199 FD 27         mov b, g
4321   219B 74            mov d, b
4322   219C 32            mov bl, [d]
4323   219D A7 00         mov bh, 0
4324   219F E7            pop d
4325   21A0 FD 3E         mov [d], bl
4326   21A2             ;; tok = COMMA; 
4327   21A2 3B 6E 24      mov d, _tok ; $tok         
4328   21A5 26 24 00      mov b, 36; COMMA        
4329   21A8 FD 43         mov [d], b
4330   21AA             ;; toktype = DELIMITER;   
4331   21AA 3B 70 24      mov d, _toktype ; $toktype         
4332   21AD 26 01 00      mov b, 1; DELIMITER        
4333   21B0 FD 43         mov [d], b
4334   21B2 0A 02 22      jmp _if73_exit
4335   21B5             _if73_else:
4336   21B5             ;; if(*prog == '.'){ 
4337   21B5             _if74_cond:
4338   21B5 29 72 24      mov b, [_prog] ; $prog           
4339   21B8 74            mov d, b
4340   21B9 32            mov bl, [d]
4341   21BA A7 00         mov bh, 0
4342   21BC             ; START RELATIONAL
4343   21BC D7            push a
4344   21BD 11            mov a, b
4345   21BE 26 2E 00      mov b, $2e
4346   21C1 B0            cmp a, b
4347   21C2 FD 71         seq ; ==
4348   21C4 E4            pop a
4349   21C5             ; END RELATIONAL
4350   21C5 C0 00 00      cmp b, 0
4351   21C8 C6 02 22      je _if74_exit
4352   21CB             _if74_true:
4353   21CB             ;; *t++ = *prog++; 
4354   21CB 2C FF FF      mov b, [bp + -1] ; $t             
4355   21CE FD 79         mov g, b
4356   21D0 FD 77         inc b
4357   21D2 FA FF FF      lea d, [bp + -1] ; $t
4358   21D5 FD 43         mov [d], b
4359   21D7 FD 27         mov b, g
4360   21D9 D8            push b
4361   21DA 29 72 24      mov b, [_prog] ; $prog           
4362   21DD FD 79         mov g, b
4363   21DF FD 77         inc b
4364   21E1 3B 72 24      mov d, _prog ; $prog
4365   21E4 FD 43         mov [d], b
4366   21E6 FD 27         mov b, g
4367   21E8 74            mov d, b
4368   21E9 32            mov bl, [d]
4369   21EA A7 00         mov bh, 0
4370   21EC E7            pop d
4371   21ED FD 3E         mov [d], bl
4372   21EF             ;; tok = DOT; 
4373   21EF 3B 6E 24      mov d, _tok ; $tok         
4374   21F2 26 25 00      mov b, 37; DOT        
4375   21F5 FD 43         mov [d], b
4376   21F7             ;; toktype = DELIMITER;   
4377   21F7 3B 70 24      mov d, _toktype ; $toktype         
4378   21FA 26 01 00      mov b, 1; DELIMITER        
4379   21FD FD 43         mov [d], b
4380   21FF 0A 02 22      jmp _if74_exit
4381   2202             _if74_exit:
4382   2202             _if73_exit:
4383   2202             _if72_exit:
4384   2202             _if71_exit:
4385   2202             _if70_exit:
4386   2202             _if69_exit:
4387   2202             _if68_exit:
4388   2202             _if67_exit:
4389   2202             _if66_exit:
4390   2202             _if65_exit:
4391   2202             _if64_exit:
4392   2202             _if63_exit:
4393   2202             _if61_exit:
4394   2202             _if59_exit:
4395   2202             _if57_exit:
4396   2202             _if54_exit:
4397   2202             _if51_exit:
4398   2202             _if50_exit:
4399   2202             _if48_exit:
4400   2202             _if46_exit:
4401   2202             _if44_exit:
4402   2202             _if43_exit:
4403   2202             _if42_exit:
4404   2202             _if41_exit:
4405   2202             _if40_exit:
4406   2202             _if39_exit:
4407   2202             _if36_exit:
4408   2202             _if34_exit:
4409   2202             _if32_exit:
4410   2202             ;; *t = '\0'; 
4411   2202 2C FF FF      mov b, [bp + -1] ; $t             
4412   2205 D8            push b
4413   2206 26 00 00      mov b, $0
4414   2209 E7            pop d
4415   220A FD 3E         mov [d], bl
4416   220C F9            leave
4417   220D 09            ret
4418   220E             
4419   220E             convert_constant:
4420   220E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4421   2211             ; $s 
4422   2211             ; $t 
4423   2211 52 04 00      sub sp, 4
4424   2214             ;; t = token; 
4425   2214 FA FD FF      lea d, [bp + -3] ; $t         
4426   2217 26 74 24      mov b, _token_data ; $token                   
4427   221A FD 43         mov [d], b
4428   221C             ;; s = string_const; 
4429   221C FA FF FF      lea d, [bp + -1] ; $s         
4430   221F 26 74 25      mov b, _string_const_data ; $string_const                   
4431   2222 FD 43         mov [d], b
4432   2224             ;; if(toktype == CHAR_CONST){ 
4433   2224             _if75_cond:
4434   2224 29 70 24      mov b, [_toktype] ; $toktype           
4435   2227             ; START RELATIONAL
4436   2227 D7            push a
4437   2228 11            mov a, b
4438   2229 26 02 00      mov b, 2; CHAR_CONST
4439   222C B0            cmp a, b
4440   222D FD 71         seq ; ==
4441   222F E4            pop a
4442   2230             ; END RELATIONAL
4443   2230 C0 00 00      cmp b, 0
4444   2233 C6 CD 23      je _if75_else
4445   2236             _if75_true:
4446   2236             ;; t++; 
4447   2236 2C FD FF      mov b, [bp + -3] ; $t             
4448   2239 FD 79         mov g, b
4449   223B FD 77         inc b
4450   223D FA FD FF      lea d, [bp + -3] ; $t
4451   2240 FD 43         mov [d], b
4452   2242 FD 27         mov b, g
4453   2244             ;; if(*t == '\\'){ 
4454   2244             _if76_cond:
4455   2244 2C FD FF      mov b, [bp + -3] ; $t             
4456   2247 74            mov d, b
4457   2248 32            mov bl, [d]
4458   2249 A7 00         mov bh, 0
4459   224B             ; START RELATIONAL
4460   224B D7            push a
4461   224C 11            mov a, b
4462   224D 26 5C 00      mov b, $5c
4463   2250 B0            cmp a, b
4464   2251 FD 71         seq ; ==
4465   2253 E4            pop a
4466   2254             ; END RELATIONAL
4467   2254 C0 00 00      cmp b, 0
4468   2257 C6 B1 23      je _if76_else
4469   225A             _if76_true:
4470   225A             ;; t++; 
4471   225A 2C FD FF      mov b, [bp + -3] ; $t             
4472   225D FD 79         mov g, b
4473   225F FD 77         inc b
4474   2261 FA FD FF      lea d, [bp + -3] ; $t
4475   2264 FD 43         mov [d], b
4476   2266 FD 27         mov b, g
4477   2268             ;; switch(*t){ 
4478   2268             _switch77_expr:
4479   2268 2C FD FF      mov b, [bp + -3] ; $t             
4480   226B 74            mov d, b
4481   226C 32            mov bl, [d]
4482   226D A7 00         mov bh, 0
4483   226F             _switch77_comparisons:
4484   226F C1 30         cmp bl, $30
4485   2271 C6 A9 22      je _switch77_case0
4486   2274 C1 61         cmp bl, $61
4487   2276 C6 C1 22      je _switch77_case1
4488   2279 C1 62         cmp bl, $62
4489   227B C6 D9 22      je _switch77_case2
4490   227E C1 66         cmp bl, $66
4491   2280 C6 F1 22      je _switch77_case3
4492   2283 C1 6E         cmp bl, $6e
4493   2285 C6 09 23      je _switch77_case4
4494   2288 C1 72         cmp bl, $72
4495   228A C6 21 23      je _switch77_case5
4496   228D C1 74         cmp bl, $74
4497   228F C6 39 23      je _switch77_case6
4498   2292 C1 76         cmp bl, $76
4499   2294 C6 51 23      je _switch77_case7
4500   2297 C1 5C         cmp bl, $5c
4501   2299 C6 69 23      je _switch77_case8
4502   229C C1 27         cmp bl, $27
4503   229E C6 81 23      je _switch77_case9
4504   22A1 C1 22         cmp bl, $22
4505   22A3 C6 99 23      je _switch77_case10
4506   22A6 0A AE 23      jmp _switch77_exit
4507   22A9             _switch77_case0:
4508   22A9             ;; *s++ = '\0'; 
4509   22A9 2C FF FF      mov b, [bp + -1] ; $s             
4510   22AC FD 79         mov g, b
4511   22AE FD 77         inc b
4512   22B0 FA FF FF      lea d, [bp + -1] ; $s
4513   22B3 FD 43         mov [d], b
4514   22B5 FD 27         mov b, g
4515   22B7 D8            push b
4516   22B8 26 00 00      mov b, $0
4517   22BB E7            pop d
4518   22BC FD 3E         mov [d], bl
4519   22BE             ;; break; 
4520   22BE 0A AE 23      jmp _switch77_exit ; case break
4521   22C1             _switch77_case1:
4522   22C1             ;; *s++ = '\a'; 
4523   22C1 2C FF FF      mov b, [bp + -1] ; $s             
4524   22C4 FD 79         mov g, b
4525   22C6 FD 77         inc b
4526   22C8 FA FF FF      lea d, [bp + -1] ; $s
4527   22CB FD 43         mov [d], b
4528   22CD FD 27         mov b, g
4529   22CF D8            push b
4530   22D0 26 07 00      mov b, $7
4531   22D3 E7            pop d
4532   22D4 FD 3E         mov [d], bl
4533   22D6             ;; break; 
4534   22D6 0A AE 23      jmp _switch77_exit ; case break
4535   22D9             _switch77_case2:
4536   22D9             ;; *s++ = '\b'; 
4537   22D9 2C FF FF      mov b, [bp + -1] ; $s             
4538   22DC FD 79         mov g, b
4539   22DE FD 77         inc b
4540   22E0 FA FF FF      lea d, [bp + -1] ; $s
4541   22E3 FD 43         mov [d], b
4542   22E5 FD 27         mov b, g
4543   22E7 D8            push b
4544   22E8 26 08 00      mov b, $8
4545   22EB E7            pop d
4546   22EC FD 3E         mov [d], bl
4547   22EE             ;; break;   
4548   22EE 0A AE 23      jmp _switch77_exit ; case break
4549   22F1             _switch77_case3:
4550   22F1             ;; *s++ = '\f'; 
4551   22F1 2C FF FF      mov b, [bp + -1] ; $s             
4552   22F4 FD 79         mov g, b
4553   22F6 FD 77         inc b
4554   22F8 FA FF FF      lea d, [bp + -1] ; $s
4555   22FB FD 43         mov [d], b
4556   22FD FD 27         mov b, g
4557   22FF D8            push b
4558   2300 26 0C 00      mov b, $c
4559   2303 E7            pop d
4560   2304 FD 3E         mov [d], bl
4561   2306             ;; break; 
4562   2306 0A AE 23      jmp _switch77_exit ; case break
4563   2309             _switch77_case4:
4564   2309             ;; *s++ = '\n'; 
4565   2309 2C FF FF      mov b, [bp + -1] ; $s             
4566   230C FD 79         mov g, b
4567   230E FD 77         inc b
4568   2310 FA FF FF      lea d, [bp + -1] ; $s
4569   2313 FD 43         mov [d], b
4570   2315 FD 27         mov b, g
4571   2317 D8            push b
4572   2318 26 0A 00      mov b, $a
4573   231B E7            pop d
4574   231C FD 3E         mov [d], bl
4575   231E             ;; break; 
4576   231E 0A AE 23      jmp _switch77_exit ; case break
4577   2321             _switch77_case5:
4578   2321             ;; *s++ = '\r'; 
4579   2321 2C FF FF      mov b, [bp + -1] ; $s             
4580   2324 FD 79         mov g, b
4581   2326 FD 77         inc b
4582   2328 FA FF FF      lea d, [bp + -1] ; $s
4583   232B FD 43         mov [d], b
4584   232D FD 27         mov b, g
4585   232F D8            push b
4586   2330 26 0D 00      mov b, $d
4587   2333 E7            pop d
4588   2334 FD 3E         mov [d], bl
4589   2336             ;; break; 
4590   2336 0A AE 23      jmp _switch77_exit ; case break
4591   2339             _switch77_case6:
4592   2339             ;; *s++ = '\t'; 
4593   2339 2C FF FF      mov b, [bp + -1] ; $s             
4594   233C FD 79         mov g, b
4595   233E FD 77         inc b
4596   2340 FA FF FF      lea d, [bp + -1] ; $s
4597   2343 FD 43         mov [d], b
4598   2345 FD 27         mov b, g
4599   2347 D8            push b
4600   2348 26 09 00      mov b, $9
4601   234B E7            pop d
4602   234C FD 3E         mov [d], bl
4603   234E             ;; break; 
4604   234E 0A AE 23      jmp _switch77_exit ; case break
4605   2351             _switch77_case7:
4606   2351             ;; *s++ = '\v'; 
4607   2351 2C FF FF      mov b, [bp + -1] ; $s             
4608   2354 FD 79         mov g, b
4609   2356 FD 77         inc b
4610   2358 FA FF FF      lea d, [bp + -1] ; $s
4611   235B FD 43         mov [d], b
4612   235D FD 27         mov b, g
4613   235F D8            push b
4614   2360 26 0B 00      mov b, $b
4615   2363 E7            pop d
4616   2364 FD 3E         mov [d], bl
4617   2366             ;; break; 
4618   2366 0A AE 23      jmp _switch77_exit ; case break
4619   2369             _switch77_case8:
4620   2369             ;; *s++ = '\\'; 
4621   2369 2C FF FF      mov b, [bp + -1] ; $s             
4622   236C FD 79         mov g, b
4623   236E FD 77         inc b
4624   2370 FA FF FF      lea d, [bp + -1] ; $s
4625   2373 FD 43         mov [d], b
4626   2375 FD 27         mov b, g
4627   2377 D8            push b
4628   2378 26 5C 00      mov b, $5c
4629   237B E7            pop d
4630   237C FD 3E         mov [d], bl
4631   237E             ;; break; 
4632   237E 0A AE 23      jmp _switch77_exit ; case break
4633   2381             _switch77_case9:
4634   2381             ;; *s++ = '\''; 
4635   2381 2C FF FF      mov b, [bp + -1] ; $s             
4636   2384 FD 79         mov g, b
4637   2386 FD 77         inc b
4638   2388 FA FF FF      lea d, [bp + -1] ; $s
4639   238B FD 43         mov [d], b
4640   238D FD 27         mov b, g
4641   238F D8            push b
4642   2390 26 27 00      mov b, $27
4643   2393 E7            pop d
4644   2394 FD 3E         mov [d], bl
4645   2396             ;; break; 
4646   2396 0A AE 23      jmp _switch77_exit ; case break
4647   2399             _switch77_case10:
4648   2399             ;; *s++ = '\"'; 
4649   2399 2C FF FF      mov b, [bp + -1] ; $s             
4650   239C FD 79         mov g, b
4651   239E FD 77         inc b
4652   23A0 FA FF FF      lea d, [bp + -1] ; $s
4653   23A3 FD 43         mov [d], b
4654   23A5 FD 27         mov b, g
4655   23A7 D8            push b
4656   23A8 26 22 00      mov b, $22
4657   23AB E7            pop d
4658   23AC FD 3E         mov [d], bl
4659   23AE             _switch77_exit:
4660   23AE 0A CA 23      jmp _if76_exit
4661   23B1             _if76_else:
4662   23B1             ;; *s++ = *t; 
4663   23B1 2C FF FF      mov b, [bp + -1] ; $s             
4664   23B4 FD 79         mov g, b
4665   23B6 FD 77         inc b
4666   23B8 FA FF FF      lea d, [bp + -1] ; $s
4667   23BB FD 43         mov [d], b
4668   23BD FD 27         mov b, g
4669   23BF D8            push b
4670   23C0 2C FD FF      mov b, [bp + -3] ; $t             
4671   23C3 74            mov d, b
4672   23C4 32            mov bl, [d]
4673   23C5 A7 00         mov bh, 0
4674   23C7 E7            pop d
4675   23C8 FD 3E         mov [d], bl
4676   23CA             _if76_exit:
4677   23CA 0A 39 24      jmp _if75_exit
4678   23CD             _if75_else:
4679   23CD             ;; if(toktype == STRING_CONST){ 
4680   23CD             _if78_cond:
4681   23CD 29 70 24      mov b, [_toktype] ; $toktype           
4682   23D0             ; START RELATIONAL
4683   23D0 D7            push a
4684   23D1 11            mov a, b
4685   23D2 26 03 00      mov b, 3; STRING_CONST
4686   23D5 B0            cmp a, b
4687   23D6 FD 71         seq ; ==
4688   23D8 E4            pop a
4689   23D9             ; END RELATIONAL
4690   23D9 C0 00 00      cmp b, 0
4691   23DC C6 39 24      je _if78_exit
4692   23DF             _if78_true:
4693   23DF             ;; t++; 
4694   23DF 2C FD FF      mov b, [bp + -3] ; $t             
4695   23E2 FD 79         mov g, b
4696   23E4 FD 77         inc b
4697   23E6 FA FD FF      lea d, [bp + -3] ; $t
4698   23E9 FD 43         mov [d], b
4699   23EB FD 27         mov b, g
4700   23ED             ;; while(*t != '\"' && *t){ 
4701   23ED             _while79_cond:
4702   23ED 2C FD FF      mov b, [bp + -3] ; $t             
4703   23F0 74            mov d, b
4704   23F1 32            mov bl, [d]
4705   23F2 A7 00         mov bh, 0
4706   23F4             ; START RELATIONAL
4707   23F4 D7            push a
4708   23F5 11            mov a, b
4709   23F6 26 22 00      mov b, $22
4710   23F9 B0            cmp a, b
4711   23FA FD 72         sneq ; !=
4712   23FC E4            pop a
4713   23FD             ; END RELATIONAL
4714   23FD D7            push a
4715   23FE 11            mov a, b
4716   23FF 2C FD FF      mov b, [bp + -3] ; $t             
4717   2402 74            mov d, b
4718   2403 32            mov bl, [d]
4719   2404 A7 00         mov bh, 0
4720   2406 FD A7         sand a, b ; &&
4721   2408 E4            pop a
4722   2409 C0 00 00      cmp b, 0
4723   240C C6 36 24      je _while79_exit
4724   240F             _while79_block:
4725   240F             ;; *s++ = *t++; 
4726   240F 2C FF FF      mov b, [bp + -1] ; $s             
4727   2412 FD 79         mov g, b
4728   2414 FD 77         inc b
4729   2416 FA FF FF      lea d, [bp + -1] ; $s
4730   2419 FD 43         mov [d], b
4731   241B FD 27         mov b, g
4732   241D D8            push b
4733   241E 2C FD FF      mov b, [bp + -3] ; $t             
4734   2421 FD 79         mov g, b
4735   2423 FD 77         inc b
4736   2425 FA FD FF      lea d, [bp + -3] ; $t
4737   2428 FD 43         mov [d], b
4738   242A FD 27         mov b, g
4739   242C 74            mov d, b
4740   242D 32            mov bl, [d]
4741   242E A7 00         mov bh, 0
4742   2430 E7            pop d
4743   2431 FD 3E         mov [d], bl
4744   2433 0A ED 23      jmp _while79_cond
4745   2436             _while79_exit:
4746   2436 0A 39 24      jmp _if78_exit
4747   2439             _if78_exit:
4748   2439             _if75_exit:
4749   2439             ;; *s = '\0'; 
4750   2439 2C FF FF      mov b, [bp + -1] ; $s             
4751   243C D8            push b
4752   243D 26 00 00      mov b, $0
4753   2440 E7            pop d
4754   2441 FD 3E         mov [d], bl
4755   2443 F9            leave
4756   2444 09            ret
4757   2445             
4758   2445             error:
4759   2445 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4760   2448             ;; printf("\nError: "); 
4761   2448 26 F1 26      mov b, __s3 ; "\nError: "
4762   244B FD AB         swp b
4763   244D D8            push b
4764   244E 07 99 09      call printf
4765   2451 51 02 00      add sp, 2
4766   2454             ;; printf(msg); 
4767   2454 2C 05 00      mov b, [bp + 5] ; $msg             
4768   2457 FD AB         swp b
4769   2459 D8            push b
4770   245A 07 99 09      call printf
4771   245D 51 02 00      add sp, 2
4772   2460             ;; printf("\n"); 
4773   2460 26 FA 26      mov b, __s4 ; "\n"
4774   2463 FD AB         swp b
4775   2465 D8            push b
4776   2466 07 99 09      call printf
4777   2469 51 02 00      add sp, 2
4778   246C F9            leave
4779   246D 09            ret
4780   246E             ; --- END TEXT BLOCK
4781   246E             
4782   246E             ; --- BEGIN DATA BLOCK
4783   246E 00 00       _tok: .fill 2, 0
4784   2470 00 00       _toktype: .fill 2, 0
4785   2472 00 00       _prog: .fill 2, 0
4786   2474 00 00 00 00 _token_data: .fill 256, 0
4786   2478 00 00 00 00 
4786   247C 00 00 00 00 
4786   2480 00 00 00 00 
4786   2484 00 00 00 00 
4786   2488 00 00 00 00 
4786   248C 00 00 00 00 
4786   2490 00 00 00 00 
4786   2494 00 00 00 00 
4786   2498 00 00 00 00 
4786   249C 00 00 00 00 
4786   24A0 00 00 00 00 
4786   24A4 00 00 00 00 
4786   24A8 00 00 00 00 
4786   24AC 00 00 00 00 
4786   24B0 00 00 00 00 
4786   24B4 00 00 00 00 
4786   24B8 00 00 00 00 
4786   24BC 00 00 00 00 
4786   24C0 00 00 00 00 
4786   24C4 00 00 00 00 
4786   24C8 00 00 00 00 
4786   24CC 00 00 00 00 
4786   24D0 00 00 00 00 
4786   24D4 00 00 00 00 
4786   24D8 00 00 00 00 
4786   24DC 00 00 00 00 
4786   24E0 00 00 00 00 
4786   24E4 00 00 00 00 
4786   24E8 00 00 00 00 
4786   24EC 00 00 00 00 
4786   24F0 00 00 00 00 
4786   24F4 00 00 00 00 
4786   24F8 00 00 00 00 
4786   24FC 00 00 00 00 
4786   2500 00 00 00 00 
4786   2504 00 00 00 00 
4786   2508 00 00 00 00 
4786   250C 00 00 00 00 
4786   2510 00 00 00 00 
4786   2514 00 00 00 00 
4786   2518 00 00 00 00 
4786   251C 00 00 00 00 
4786   2520 00 00 00 00 
4786   2524 00 00 00 00 
4786   2528 00 00 00 00 
4786   252C 00 00 00 00 
4786   2530 00 00 00 00 
4786   2534 00 00 00 00 
4786   2538 00 00 00 00 
4786   253C 00 00 00 00 
4786   2540 00 00 00 00 
4786   2544 00 00 00 00 
4786   2548 00 00 00 00 
4786   254C 00 00 00 00 
4786   2550 00 00 00 00 
4786   2554 00 00 00 00 
4786   2558 00 00 00 00 
4786   255C 00 00 00 00 
4786   2560 00 00 00 00 
4786   2564 00 00 00 00 
4786   2568 00 00 00 00 
4786   256C 00 00 00 00 
4786   2570 00 00 00 00 
4787   2574 00 00 00 00 _string_const_data: .fill 256, 0
4787   2578 00 00 00 00 
4787   257C 00 00 00 00 
4787   2580 00 00 00 00 
4787   2584 00 00 00 00 
4787   2588 00 00 00 00 
4787   258C 00 00 00 00 
4787   2590 00 00 00 00 
4787   2594 00 00 00 00 
4787   2598 00 00 00 00 
4787   259C 00 00 00 00 
4787   25A0 00 00 00 00 
4787   25A4 00 00 00 00 
4787   25A8 00 00 00 00 
4787   25AC 00 00 00 00 
4787   25B0 00 00 00 00 
4787   25B4 00 00 00 00 
4787   25B8 00 00 00 00 
4787   25BC 00 00 00 00 
4787   25C0 00 00 00 00 
4787   25C4 00 00 00 00 
4787   25C8 00 00 00 00 
4787   25CC 00 00 00 00 
4787   25D0 00 00 00 00 
4787   25D4 00 00 00 00 
4787   25D8 00 00 00 00 
4787   25DC 00 00 00 00 
4787   25E0 00 00 00 00 
4787   25E4 00 00 00 00 
4787   25E8 00 00 00 00 
4787   25EC 00 00 00 00 
4787   25F0 00 00 00 00 
4787   25F4 00 00 00 00 
4787   25F8 00 00 00 00 
4787   25FC 00 00 00 00 
4787   2600 00 00 00 00 
4787   2604 00 00 00 00 
4787   2608 00 00 00 00 
4787   260C 00 00 00 00 
4787   2610 00 00 00 00 
4787   2614 00 00 00 00 
4787   2618 00 00 00 00 
4787   261C 00 00 00 00 
4787   2620 00 00 00 00 
4787   2624 00 00 00 00 
4787   2628 00 00 00 00 
4787   262C 00 00 00 00 
4787   2630 00 00 00 00 
4787   2634 00 00 00 00 
4787   2638 00 00 00 00 
4787   263C 00 00 00 00 
4787   2640 00 00 00 00 
4787   2644 00 00 00 00 
4787   2648 00 00 00 00 
4787   264C 00 00 00 00 
4787   2650 00 00 00 00 
4787   2654 00 00 00 00 
4787   2658 00 00 00 00 
4787   265C 00 00 00 00 
4787   2660 00 00 00 00 
4787   2664 00 00 00 00 
4787   2668 00 00 00 00 
4787   266C 00 00 00 00 
4787   2670 00 00 00 00 
4788   2674 00 00       _address: .fill 2, 0
4789   2676 00          _data: .fill 1, 0
4790   2677 55 6E 6B 6E __s0: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
4790   267B 6F 77 6E 20 
4790   267F 74 79 70 65 
4790   2683 20 73 69 7A 
4790   2687 65 20 69 6E 
4790   268B 20 76 61 5F 
4790   268F 61 72 67 28 
4790   2693 29 20 63 61 
4790   2697 6C 6C 2E 20 
4790   269B 53 69 7A 65 
4790   269F 20 6E 65 65 
4790   26A3 64 73 20 74 
4790   26A7 6F 20 62 65 
4790   26AB 20 65 69 74 
4790   26AF 68 65 72 20 
4790   26B3 31 20 6F 72 
4790   26B7 20 32 2E 00 
4791   26BB 45 72 72 6F __s1: .db "Error: Unknown argument type.\n", 0
4791   26BF 72 3A 20 55 
4791   26C3 6E 6B 6E 6F 
4791   26C7 77 6E 20 61 
4791   26CB 72 67 75 6D 
4791   26CF 65 6E 74 20 
4791   26D3 74 79 70 65 
4791   26D7 2E 0A 00 
4792   26DA 44 6F 75 62 __s2: .db "Double quotes expected", 0
4792   26DE 6C 65 20 71 
4792   26E2 75 6F 74 65 
4792   26E6 73 20 65 78 
4792   26EA 70 65 63 74 
4792   26EE 65 64 00 
4793   26F1 0A 45 72 72 __s3: .db "\nError: ", 0
4793   26F5 6F 72 3A 20 
4793   26F9 00 
4794   26FA 0A 00       __s4: .db "\n", 0
4795   26FC             
4796   26FC FE 26       _heap_top: .dw _heap
4797   26FE 00          _heap: .db 0
4798   26FF             ; --- END DATA BLOCK
4799   26FF             
4800   26FF             .end
tasm: Number of errors = 0
