0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; 120 + myfunc(1); 
0011   0408 FD 2E 78 00   mov32 cb, $00000078
0011   040C 00 00 
0012   040E             ; --- START TERMS
0013   040E D7            push a
0014   040F 11            mov a, b
0015   0410             ; --- START FUNCTION CALL
0016   0410 FD 2E 01 00   mov32 cb, $00000001
0016   0414 00 00 
0017   0416 FD AB         swp b
0018   0418 D8            push b
0019   0419 07 71 04      call myfunc
0020   041C 51 02 00      add sp, 2
0021   041F             ; --- END FUNCTION CALL
0022   041F 56            add b, a
0023   0420 E4            pop a
0024   0421             ; --- END TERMS
0025   0421             ; printf("Hello"); 
0026   0421             ; --- START FUNCTION CALL
0027   0421 26 DD 0E      mov b, _s0 ; "Hello"
0028   0424 FD AB         swp b
0029   0426 D8            push b
0030   0427 07 76 04      call printf
0031   042A 51 02 00      add sp, 2
0032   042D             ; --- END FUNCTION CALL
0033   042D             ; print_signed(123); 
0034   042D             ; --- START FUNCTION CALL
0035   042D FD 2E 7B 00   mov32 cb, $0000007b
0035   0431 00 00 
0036   0433 FD AB         swp b
0037   0435 D8            push b
0038   0436 07 9A 0A      call print_signed
0039   0439 51 02 00      add sp, 2
0040   043C             ; --- END FUNCTION CALL
0041   043C             ; strcpy("Hello", "World"); 
0042   043C             ; --- START FUNCTION CALL
0043   043C 26 E3 0E      mov b, _s1 ; "World"
0044   043F FD AB         swp b
0045   0441 D8            push b
0046   0442 26 DD 0E      mov b, _s0 ; "Hello"
0047   0445 FD AB         swp b
0048   0447 D8            push b
0049   0448 07 25 0D      call strcpy
0050   044B 51 04 00      add sp, 4
0051   044E             ; --- END FUNCTION CALL
0052   044E             ; strcat("Hi", "Hello"); 
0053   044E             ; --- START FUNCTION CALL
0054   044E 26 DD 0E      mov b, _s0 ; "Hello"
0055   0451 FD AB         swp b
0056   0453 D8            push b
0057   0454 26 E9 0E      mov b, _s2 ; "Hi"
0058   0457 FD AB         swp b
0059   0459 D8            push b
0060   045A 07 9F 0D      call strcat
0061   045D 51 04 00      add sp, 4
0062   0460             ; --- END FUNCTION CALL
0063   0460             ; print_signed(555); 
0064   0460             ; --- START FUNCTION CALL
0065   0460 FD 2E 2B 02   mov32 cb, $0000022b
0065   0464 00 00 
0066   0466 FD AB         swp b
0067   0468 D8            push b
0068   0469 07 9A 0A      call print_signed
0069   046C 51 02 00      add sp, 2
0070   046F             ; --- END FUNCTION CALL
0071   046F 05 0B         syscall sys_terminate_proc
0072   0471             
0073   0471             myfunc:
0074   0471 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0075   0474 F9            leave
0076   0475 09            ret
0077   0476             
0078   0476             printf:
0079   0476 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0080   0479             ; char *p, *format_p; 
0081   0479 52 02 00      sub sp, 2
0082   047C 52 02 00      sub sp, 2
0083   047F             ; format_p = format; 
0084   047F FA FD FF      lea d, [bp + -3] ; $format_p
0085   0482 DA            push d
0086   0483 FA 05 00      lea d, [bp + 5] ; $format
0087   0486 2A            mov b, [d]
0088   0487 38 00 00      mov c, 0
0089   048A E7            pop d
0090   048B FD 43         mov [d], b
0091   048D             ; p = &format + 2; 
0092   048D FA FF FF      lea d, [bp + -1] ; $p
0093   0490 DA            push d
0094   0491 FA 05 00      lea d, [bp + 5] ; $format
0095   0494 2D            mov b, d
0096   0495             ; --- START TERMS
0097   0495 D7            push a
0098   0496 11            mov a, b
0099   0497 FD 2E 02 00   mov32 cb, $00000002
0099   049B 00 00 
0100   049D 56            add b, a
0101   049E E4            pop a
0102   049F             ; --- END TERMS
0103   049F E7            pop d
0104   04A0 FD 43         mov [d], b
0105   04A2             ; for(;;){ 
0106   04A2             _for1_init:
0107   04A2             _for1_cond:
0108   04A2             _for1_block:
0109   04A2             ; if(!*format_p) break; 
0110   04A2             _if2_cond:
0111   04A2 FA FD FF      lea d, [bp + -3] ; $format_p
0112   04A5 2A            mov b, [d]
0113   04A6 38 00 00      mov c, 0
0114   04A9 74            mov d, b
0115   04AA 32            mov bl, [d]
0116   04AB A7 00         mov bh, 0
0117   04AD 38 00 00      mov c, 0
0118   04B0 C0 00 00      cmp b, 0
0119   04B3 FD 71         seq ; !
0120   04B5 C0 00 00      cmp b, 0
0121   04B8 C6 C1 04      je _if2_else
0122   04BB             _if2_TRUE:
0123   04BB             ; break; 
0124   04BB 0A 71 07      jmp _for1_exit ; for break
0125   04BE 0A 6E 07      jmp _if2_exit
0126   04C1             _if2_else:
0127   04C1             ; if(*format_p == '%'){ 
0128   04C1             _if3_cond:
0129   04C1 FA FD FF      lea d, [bp + -3] ; $format_p
0130   04C4 2A            mov b, [d]
0131   04C5 38 00 00      mov c, 0
0132   04C8 74            mov d, b
0133   04C9 32            mov bl, [d]
0134   04CA A7 00         mov bh, 0
0135   04CC 38 00 00      mov c, 0
0136   04CF             ; --- START RELATIONAL
0137   04CF D7            push a
0138   04D0 11            mov a, b
0139   04D1 FD 2E 25 00   mov32 cb, $00000025
0139   04D5 00 00 
0140   04D7 B0            cmp a, b
0141   04D8 FD 71         seq ; ==
0142   04DA E4            pop a
0143   04DB             ; --- END RELATIONAL
0144   04DB C0 00 00      cmp b, 0
0145   04DE C6 49 07      je _if3_else
0146   04E1             _if3_TRUE:
0147   04E1             ; format_p++; 
0148   04E1 FA FD FF      lea d, [bp + -3] ; $format_p
0149   04E4 2A            mov b, [d]
0150   04E5 38 00 00      mov c, 0
0151   04E8 FD 77         inc b
0152   04EA FA FD FF      lea d, [bp + -3] ; $format_p
0153   04ED FD 43         mov [d], b
0154   04EF FD 7D         dec b
0155   04F1             ; switch(*format_p){ 
0156   04F1             _switch4_expr:
0157   04F1 FA FD FF      lea d, [bp + -3] ; $format_p
0158   04F4 2A            mov b, [d]
0159   04F5 38 00 00      mov c, 0
0160   04F8 74            mov d, b
0161   04F9 32            mov bl, [d]
0162   04FA A7 00         mov bh, 0
0163   04FC 38 00 00      mov c, 0
0164   04FF             _switch4_comparisons:
0165   04FF C1 6C         cmp bl, $6c
0166   0501 C6 2D 05      je _switch4_case0
0167   0504 C1 4C         cmp bl, $4c
0168   0506 C6 2D 05      je _switch4_case1
0169   0509 C1 64         cmp bl, $64
0170   050B C6 3D 06      je _switch4_case2
0171   050E C1 69         cmp bl, $69
0172   0510 C6 3D 06      je _switch4_case3
0173   0513 C1 75         cmp bl, $75
0174   0515 C6 6D 06      je _switch4_case4
0175   0518 C1 78         cmp bl, $78
0176   051A C6 9D 06      je _switch4_case5
0177   051D C1 63         cmp bl, $63
0178   051F C6 CD 06      je _switch4_case6
0179   0522 C1 73         cmp bl, $73
0180   0524 C6 FD 06      je _switch4_case7
0181   0527 0A 2A 07      jmp _switch4_default
0182   052A 0A 36 07      jmp _switch4_exit
0183   052D             _switch4_case0:
0184   052D             _switch4_case1:
0185   052D             ; format_p++; 
0186   052D FA FD FF      lea d, [bp + -3] ; $format_p
0187   0530 2A            mov b, [d]
0188   0531 38 00 00      mov c, 0
0189   0534 FD 77         inc b
0190   0536 FA FD FF      lea d, [bp + -3] ; $format_p
0191   0539 FD 43         mov [d], b
0192   053B FD 7D         dec b
0193   053D             ; if(*format_p == 'd' || *format_p == 'i') 
0194   053D             _if5_cond:
0195   053D FA FD FF      lea d, [bp + -3] ; $format_p
0196   0540 2A            mov b, [d]
0197   0541 38 00 00      mov c, 0
0198   0544 74            mov d, b
0199   0545 32            mov bl, [d]
0200   0546 A7 00         mov bh, 0
0201   0548 38 00 00      mov c, 0
0202   054B             ; --- START RELATIONAL
0203   054B D7            push a
0204   054C 11            mov a, b
0205   054D FD 2E 64 00   mov32 cb, $00000064
0205   0551 00 00 
0206   0553 B0            cmp a, b
0207   0554 FD 71         seq ; ==
0208   0556 E4            pop a
0209   0557             ; --- END RELATIONAL
0210   0557             ; --- START LOGICAL OR
0211   0557 D7            push a
0212   0558 11            mov a, b
0213   0559 FA FD FF      lea d, [bp + -3] ; $format_p
0214   055C 2A            mov b, [d]
0215   055D 38 00 00      mov c, 0
0216   0560 74            mov d, b
0217   0561 32            mov bl, [d]
0218   0562 A7 00         mov bh, 0
0219   0564 38 00 00      mov c, 0
0220   0567             ; --- START RELATIONAL
0221   0567 D7            push a
0222   0568 11            mov a, b
0223   0569 FD 2E 69 00   mov32 cb, $00000069
0223   056D 00 00 
0224   056F B0            cmp a, b
0225   0570 FD 71         seq ; ==
0226   0572 E4            pop a
0227   0573             ; --- END RELATIONAL
0228   0573 FD A8         sor a, b ; ||
0229   0575 E4            pop a
0230   0576             ; --- END LOGICAL OR
0231   0576 C0 00 00      cmp b, 0
0232   0579 C6 9A 05      je _if5_else
0233   057C             _if5_TRUE:
0234   057C             ; print_signed_long(*(long *)p); 
0235   057C             ; --- START FUNCTION CALL
0236   057C FA FF FF      lea d, [bp + -1] ; $p
0237   057F 2A            mov b, [d]
0238   0580 38 00 00      mov c, 0
0239   0583 74            mov d, b
0240   0584 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0241   0587 FD 39         mov c, b ; And place it into C
0242   0589 2A            mov b, [d] ; Lower Word in B
0243   058A 12            mov a, c
0244   058B FD AA         swp a
0245   058D D7            push a
0246   058E FD AB         swp b
0247   0590 D8            push b
0248   0591 07 73 07      call print_signed_long
0249   0594 51 04 00      add sp, 4
0250   0597             ; --- END FUNCTION CALL
0251   0597 0A 22 06      jmp _if5_exit
0252   059A             _if5_else:
0253   059A             ; if(*format_p == 'u') 
0254   059A             _if6_cond:
0255   059A FA FD FF      lea d, [bp + -3] ; $format_p
0256   059D 2A            mov b, [d]
0257   059E 38 00 00      mov c, 0
0258   05A1 74            mov d, b
0259   05A2 32            mov bl, [d]
0260   05A3 A7 00         mov bh, 0
0261   05A5 38 00 00      mov c, 0
0262   05A8             ; --- START RELATIONAL
0263   05A8 D7            push a
0264   05A9 11            mov a, b
0265   05AA FD 2E 75 00   mov32 cb, $00000075
0265   05AE 00 00 
0266   05B0 B0            cmp a, b
0267   05B1 FD 71         seq ; ==
0268   05B3 E4            pop a
0269   05B4             ; --- END RELATIONAL
0270   05B4 C0 00 00      cmp b, 0
0271   05B7 C6 D8 05      je _if6_else
0272   05BA             _if6_TRUE:
0273   05BA             ; print_unsigned_long(*(unsigned long *)p); 
0274   05BA             ; --- START FUNCTION CALL
0275   05BA FA FF FF      lea d, [bp + -1] ; $p
0276   05BD 2A            mov b, [d]
0277   05BE 38 00 00      mov c, 0
0278   05C1 74            mov d, b
0279   05C2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0280   05C5 FD 39         mov c, b ; And place it into C
0281   05C7 2A            mov b, [d] ; Lower Word in B
0282   05C8 12            mov a, c
0283   05C9 FD AA         swp a
0284   05CB D7            push a
0285   05CC FD AB         swp b
0286   05CE D8            push b
0287   05CF 07 F0 08      call print_unsigned_long
0288   05D2 51 04 00      add sp, 4
0289   05D5             ; --- END FUNCTION CALL
0290   05D5 0A 22 06      jmp _if6_exit
0291   05D8             _if6_else:
0292   05D8             ; if(*format_p == 'x') 
0293   05D8             _if7_cond:
0294   05D8 FA FD FF      lea d, [bp + -3] ; $format_p
0295   05DB 2A            mov b, [d]
0296   05DC 38 00 00      mov c, 0
0297   05DF 74            mov d, b
0298   05E0 32            mov bl, [d]
0299   05E1 A7 00         mov bh, 0
0300   05E3 38 00 00      mov c, 0
0301   05E6             ; --- START RELATIONAL
0302   05E6 D7            push a
0303   05E7 11            mov a, b
0304   05E8 FD 2E 78 00   mov32 cb, $00000078
0304   05EC 00 00 
0305   05EE B0            cmp a, b
0306   05EF FD 71         seq ; ==
0307   05F1 E4            pop a
0308   05F2             ; --- END RELATIONAL
0309   05F2 C0 00 00      cmp b, 0
0310   05F5 C6 16 06      je _if7_else
0311   05F8             _if7_TRUE:
0312   05F8             ; printx32(*(long int *)p); 
0313   05F8             ; --- START FUNCTION CALL
0314   05F8 FA FF FF      lea d, [bp + -1] ; $p
0315   05FB 2A            mov b, [d]
0316   05FC 38 00 00      mov c, 0
0317   05FF 74            mov d, b
0318   0600 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0319   0603 FD 39         mov c, b ; And place it into C
0320   0605 2A            mov b, [d] ; Lower Word in B
0321   0606 12            mov a, c
0322   0607 FD AA         swp a
0323   0609 D7            push a
0324   060A FD AB         swp b
0325   060C D8            push b
0326   060D 07 0C 0A      call printx32
0327   0610 51 04 00      add sp, 4
0328   0613             ; --- END FUNCTION CALL
0329   0613 0A 22 06      jmp _if7_exit
0330   0616             _if7_else:
0331   0616             ; err("Unexpected format in printf."); 
0332   0616             ; --- START FUNCTION CALL
0333   0616 26 EC 0E      mov b, _s3 ; "Unexpected format in printf."
0334   0619 FD AB         swp b
0335   061B D8            push b
0336   061C 07 6C 0A      call err
0337   061F 51 02 00      add sp, 2
0338   0622             ; --- END FUNCTION CALL
0339   0622             _if7_exit:
0340   0622             _if6_exit:
0341   0622             _if5_exit:
0342   0622             ; p = p + 4; 
0343   0622 FA FF FF      lea d, [bp + -1] ; $p
0344   0625 DA            push d
0345   0626 FA FF FF      lea d, [bp + -1] ; $p
0346   0629 2A            mov b, [d]
0347   062A 38 00 00      mov c, 0
0348   062D             ; --- START TERMS
0349   062D D7            push a
0350   062E 11            mov a, b
0351   062F FD 2E 04 00   mov32 cb, $00000004
0351   0633 00 00 
0352   0635 56            add b, a
0353   0636 E4            pop a
0354   0637             ; --- END TERMS
0355   0637 E7            pop d
0356   0638 FD 43         mov [d], b
0357   063A             ; break; 
0358   063A 0A 36 07      jmp _switch4_exit ; case break
0359   063D             _switch4_case2:
0360   063D             _switch4_case3:
0361   063D             ; print_signed(*(int*)p); 
0362   063D             ; --- START FUNCTION CALL
0363   063D FA FF FF      lea d, [bp + -1] ; $p
0364   0640 2A            mov b, [d]
0365   0641 38 00 00      mov c, 0
0366   0644 74            mov d, b
0367   0645 2A            mov b, [d]
0368   0646 38 00 00      mov c, 0
0369   0649 FD AB         swp b
0370   064B D8            push b
0371   064C 07 9A 0A      call print_signed
0372   064F 51 02 00      add sp, 2
0373   0652             ; --- END FUNCTION CALL
0374   0652             ; p = p + 2; 
0375   0652 FA FF FF      lea d, [bp + -1] ; $p
0376   0655 DA            push d
0377   0656 FA FF FF      lea d, [bp + -1] ; $p
0378   0659 2A            mov b, [d]
0379   065A 38 00 00      mov c, 0
0380   065D             ; --- START TERMS
0381   065D D7            push a
0382   065E 11            mov a, b
0383   065F FD 2E 02 00   mov32 cb, $00000002
0383   0663 00 00 
0384   0665 56            add b, a
0385   0666 E4            pop a
0386   0667             ; --- END TERMS
0387   0667 E7            pop d
0388   0668 FD 43         mov [d], b
0389   066A             ; break; 
0390   066A 0A 36 07      jmp _switch4_exit ; case break
0391   066D             _switch4_case4:
0392   066D             ; print_unsigned(*(unsigned int*)p); 
0393   066D             ; --- START FUNCTION CALL
0394   066D FA FF FF      lea d, [bp + -1] ; $p
0395   0670 2A            mov b, [d]
0396   0671 38 00 00      mov c, 0
0397   0674 74            mov d, b
0398   0675 2A            mov b, [d]
0399   0676 38 00 00      mov c, 0
0400   0679 FD AB         swp b
0401   067B D8            push b
0402   067C 07 D3 0B      call print_unsigned
0403   067F 51 02 00      add sp, 2
0404   0682             ; --- END FUNCTION CALL
0405   0682             ; p = p + 2; 
0406   0682 FA FF FF      lea d, [bp + -1] ; $p
0407   0685 DA            push d
0408   0686 FA FF FF      lea d, [bp + -1] ; $p
0409   0689 2A            mov b, [d]
0410   068A 38 00 00      mov c, 0
0411   068D             ; --- START TERMS
0412   068D D7            push a
0413   068E 11            mov a, b
0414   068F FD 2E 02 00   mov32 cb, $00000002
0414   0693 00 00 
0415   0695 56            add b, a
0416   0696 E4            pop a
0417   0697             ; --- END TERMS
0418   0697 E7            pop d
0419   0698 FD 43         mov [d], b
0420   069A             ; break; 
0421   069A 0A 36 07      jmp _switch4_exit ; case break
0422   069D             _switch4_case5:
0423   069D             ; printx16(*(int*)p); 
0424   069D             ; --- START FUNCTION CALL
0425   069D FA FF FF      lea d, [bp + -1] ; $p
0426   06A0 2A            mov b, [d]
0427   06A1 38 00 00      mov c, 0
0428   06A4 74            mov d, b
0429   06A5 2A            mov b, [d]
0430   06A6 38 00 00      mov c, 0
0431   06A9 FD AB         swp b
0432   06AB D8            push b
0433   06AC 07 D3 0C      call printx16
0434   06AF 51 02 00      add sp, 2
0435   06B2             ; --- END FUNCTION CALL
0436   06B2             ; p = p + 2; 
0437   06B2 FA FF FF      lea d, [bp + -1] ; $p
0438   06B5 DA            push d
0439   06B6 FA FF FF      lea d, [bp + -1] ; $p
0440   06B9 2A            mov b, [d]
0441   06BA 38 00 00      mov c, 0
0442   06BD             ; --- START TERMS
0443   06BD D7            push a
0444   06BE 11            mov a, b
0445   06BF FD 2E 02 00   mov32 cb, $00000002
0445   06C3 00 00 
0446   06C5 56            add b, a
0447   06C6 E4            pop a
0448   06C7             ; --- END TERMS
0449   06C7 E7            pop d
0450   06C8 FD 43         mov [d], b
0451   06CA             ; break; 
0452   06CA 0A 36 07      jmp _switch4_exit ; case break
0453   06CD             _switch4_case6:
0454   06CD             ; putchar(*(char*)p); 
0455   06CD             ; --- START FUNCTION CALL
0456   06CD FA FF FF      lea d, [bp + -1] ; $p
0457   06D0 2A            mov b, [d]
0458   06D1 38 00 00      mov c, 0
0459   06D4 74            mov d, b
0460   06D5 32            mov bl, [d]
0461   06D6 A7 00         mov bh, 0
0462   06D8 38 00 00      mov c, 0
0463   06DB DD            push bl
0464   06DC 07 E2 08      call putchar
0465   06DF 51 01 00      add sp, 1
0466   06E2             ; --- END FUNCTION CALL
0467   06E2             ; p = p + 1; 
0468   06E2 FA FF FF      lea d, [bp + -1] ; $p
0469   06E5 DA            push d
0470   06E6 FA FF FF      lea d, [bp + -1] ; $p
0471   06E9 2A            mov b, [d]
0472   06EA 38 00 00      mov c, 0
0473   06ED             ; --- START TERMS
0474   06ED D7            push a
0475   06EE 11            mov a, b
0476   06EF FD 2E 01 00   mov32 cb, $00000001
0476   06F3 00 00 
0477   06F5 56            add b, a
0478   06F6 E4            pop a
0479   06F7             ; --- END TERMS
0480   06F7 E7            pop d
0481   06F8 FD 43         mov [d], b
0482   06FA             ; break; 
0483   06FA 0A 36 07      jmp _switch4_exit ; case break
0484   06FD             _switch4_case7:
0485   06FD             ; print(*(char**)p); 
0486   06FD             ; --- START FUNCTION CALL
0487   06FD FA FF FF      lea d, [bp + -1] ; $p
0488   0700 2A            mov b, [d]
0489   0701 38 00 00      mov c, 0
0490   0704 74            mov d, b
0491   0705 2A            mov b, [d]
0492   0706 FD AB         swp b
0493   0708 D8            push b
0494   0709 07 81 0A      call print
0495   070C 51 02 00      add sp, 2
0496   070F             ; --- END FUNCTION CALL
0497   070F             ; p = p + 2; 
0498   070F FA FF FF      lea d, [bp + -1] ; $p
0499   0712 DA            push d
0500   0713 FA FF FF      lea d, [bp + -1] ; $p
0501   0716 2A            mov b, [d]
0502   0717 38 00 00      mov c, 0
0503   071A             ; --- START TERMS
0504   071A D7            push a
0505   071B 11            mov a, b
0506   071C FD 2E 02 00   mov32 cb, $00000002
0506   0720 00 00 
0507   0722 56            add b, a
0508   0723 E4            pop a
0509   0724             ; --- END TERMS
0510   0724 E7            pop d
0511   0725 FD 43         mov [d], b
0512   0727             ; break; 
0513   0727 0A 36 07      jmp _switch4_exit ; case break
0514   072A             _switch4_default:
0515   072A             ; print("Error: Unknown argument type.\n"); 
0516   072A             ; --- START FUNCTION CALL
0517   072A 26 09 0F      mov b, _s4 ; "Error: Unknown argument type.\n"
0518   072D FD AB         swp b
0519   072F D8            push b
0520   0730 07 81 0A      call print
0521   0733 51 02 00      add sp, 2
0522   0736             ; --- END FUNCTION CALL
0523   0736             _switch4_exit:
0524   0736             ; format_p++; 
0525   0736 FA FD FF      lea d, [bp + -3] ; $format_p
0526   0739 2A            mov b, [d]
0527   073A 38 00 00      mov c, 0
0528   073D FD 77         inc b
0529   073F FA FD FF      lea d, [bp + -3] ; $format_p
0530   0742 FD 43         mov [d], b
0531   0744 FD 7D         dec b
0532   0746 0A 6E 07      jmp _if3_exit
0533   0749             _if3_else:
0534   0749             ; putchar(*format_p); 
0535   0749             ; --- START FUNCTION CALL
0536   0749 FA FD FF      lea d, [bp + -3] ; $format_p
0537   074C 2A            mov b, [d]
0538   074D 38 00 00      mov c, 0
0539   0750 74            mov d, b
0540   0751 32            mov bl, [d]
0541   0752 A7 00         mov bh, 0
0542   0754 38 00 00      mov c, 0
0543   0757 DD            push bl
0544   0758 07 E2 08      call putchar
0545   075B 51 01 00      add sp, 1
0546   075E             ; --- END FUNCTION CALL
0547   075E             ; format_p++; 
0548   075E FA FD FF      lea d, [bp + -3] ; $format_p
0549   0761 2A            mov b, [d]
0550   0762 38 00 00      mov c, 0
0551   0765 FD 77         inc b
0552   0767 FA FD FF      lea d, [bp + -3] ; $format_p
0553   076A FD 43         mov [d], b
0554   076C FD 7D         dec b
0555   076E             _if3_exit:
0556   076E             _if2_exit:
0557   076E             _for1_update:
0558   076E 0A A2 04      jmp _for1_cond
0559   0771             _for1_exit:
0560   0771 F9            leave
0561   0772 09            ret
0562   0773             
0563   0773             print_signed_long:
0564   0773 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0565   0776             ; char digits[10]; 
0566   0776 52 0A 00      sub sp, 10
0567   0779             ; int i = 0; 
0568   0779 52 02 00      sub sp, 2
0569   077C             ; --- START LOCAL VAR INITIALIZATION
0570   077C FA F5 FF      lea d, [bp + -11] ; $i
0571   077F DA            push d
0572   0780 FD 2E 00 00   mov32 cb, $00000000
0572   0784 00 00 
0573   0786 E7            pop d
0574   0787 FD 43         mov [d], b
0575   0789             ; --- END LOCAL VAR INITIALIZATION
0576   0789             ; if (num < 0) { 
0577   0789             _if8_cond:
0578   0789 FA 05 00      lea d, [bp + 5] ; $num
0579   078C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0580   078F FD 39         mov c, b ; And place it into C
0581   0791 2A            mov b, [d] ; Lower Word in B
0582   0792             ; --- START RELATIONAL
0583   0792 D7            push a
0584   0793 FD D8         push g
0585   0795 11            mov a, b
0586   0796 FD 7A         mov g, c
0587   0798 FD 2E 00 00   mov32 cb, $00000000
0587   079C 00 00 
0588   079E FD AF         cmp32 ga, cb
0589   07A0 FD 73         slt ; <
0590   07A2 FD F1         pop g
0591   07A4 E4            pop a
0592   07A5             ; --- END RELATIONAL
0593   07A5 C0 00 00      cmp b, 0
0594   07A8 C6 DC 07      je _if8_else
0595   07AB             _if8_TRUE:
0596   07AB             ; putchar('-'); 
0597   07AB             ; --- START FUNCTION CALL
0598   07AB FD 2E 2D 00   mov32 cb, $0000002d
0598   07AF 00 00 
0599   07B1 DD            push bl
0600   07B2 07 E2 08      call putchar
0601   07B5 51 01 00      add sp, 1
0602   07B8             ; --- END FUNCTION CALL
0603   07B8             ; num = -num; 
0604   07B8 FA 05 00      lea d, [bp + 5] ; $num
0605   07BB DA            push d
0606   07BC FA 05 00      lea d, [bp + 5] ; $num
0607   07BF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0608   07C2 FD 39         mov c, b ; And place it into C
0609   07C4 2A            mov b, [d] ; Lower Word in B
0610   07C5 12            mov a, c
0611   07C6 95            not a
0612   07C7 97            not b
0613   07C8 55 01 00      add b, 1
0614   07CB 5B 00 00      adc a, 0
0615   07CE 39            mov c, a
0616   07CF E7            pop d
0617   07D0 FD 43         mov [d], b
0618   07D2 26 00 00      mov b, 0
0619   07D5 FD 44 02 00   mov [d + 2], b
0620   07D9 0A 10 08      jmp _if8_exit
0621   07DC             _if8_else:
0622   07DC             ; if (num == 0) { 
0623   07DC             _if9_cond:
0624   07DC FA 05 00      lea d, [bp + 5] ; $num
0625   07DF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0626   07E2 FD 39         mov c, b ; And place it into C
0627   07E4 2A            mov b, [d] ; Lower Word in B
0628   07E5             ; --- START RELATIONAL
0629   07E5 D7            push a
0630   07E6 FD D8         push g
0631   07E8 11            mov a, b
0632   07E9 FD 7A         mov g, c
0633   07EB FD 2E 00 00   mov32 cb, $00000000
0633   07EF 00 00 
0634   07F1 FD AF         cmp32 ga, cb
0635   07F3 FD 71         seq ; ==
0636   07F5 FD F1         pop g
0637   07F7 E4            pop a
0638   07F8             ; --- END RELATIONAL
0639   07F8 C0 00 00      cmp b, 0
0640   07FB C6 10 08      je _if9_exit
0641   07FE             _if9_TRUE:
0642   07FE             ; putchar('0'); 
0643   07FE             ; --- START FUNCTION CALL
0644   07FE FD 2E 30 00   mov32 cb, $00000030
0644   0802 00 00 
0645   0804 DD            push bl
0646   0805 07 E2 08      call putchar
0647   0808 51 01 00      add sp, 1
0648   080B             ; --- END FUNCTION CALL
0649   080B             ; return; 
0650   080B F9            leave
0651   080C 09            ret
0652   080D 0A 10 08      jmp _if9_exit
0653   0810             _if9_exit:
0654   0810             _if8_exit:
0655   0810             ; while (num > 0) { 
0656   0810             _while10_cond:
0657   0810 FA 05 00      lea d, [bp + 5] ; $num
0658   0813 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0659   0816 FD 39         mov c, b ; And place it into C
0660   0818 2A            mov b, [d] ; Lower Word in B
0661   0819             ; --- START RELATIONAL
0662   0819 D7            push a
0663   081A FD D8         push g
0664   081C 11            mov a, b
0665   081D FD 7A         mov g, c
0666   081F FD 2E 00 00   mov32 cb, $00000000
0666   0823 00 00 
0667   0825 FD AF         cmp32 ga, cb
0668   0827 FD 7F         sgt
0669   0829 FD F1         pop g
0670   082B E4            pop a
0671   082C             ; --- END RELATIONAL
0672   082C C0 00 00      cmp b, 0
0673   082F C6 98 08      je _while10_exit
0674   0832             _while10_block:
0675   0832             ; digits[i] = '0' + (num % 10); 
0676   0832 FA F7 FF      lea d, [bp + -9] ; $digits
0677   0835 D7            push a
0678   0836 DA            push d
0679   0837 FA F5 FF      lea d, [bp + -11] ; $i
0680   083A 2A            mov b, [d]
0681   083B 38 00 00      mov c, 0
0682   083E E7            pop d
0683   083F 5A            add d, b
0684   0840 E4            pop a
0685   0841 DA            push d
0686   0842 FD 2E 30 00   mov32 cb, $00000030
0686   0846 00 00 
0687   0848             ; --- START TERMS
0688   0848 D7            push a
0689   0849 11            mov a, b
0690   084A FA 05 00      lea d, [bp + 5] ; $num
0691   084D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0692   0850 FD 39         mov c, b ; And place it into C
0693   0852 2A            mov b, [d] ; Lower Word in B
0694   0853             ; --- START FACTORS
0695   0853 D7            push a
0696   0854 11            mov a, b
0697   0855 FD 2E 0A 00   mov32 cb, $0000000a
0697   0859 00 00 
0698   085B AE            div a, b ; 
0699   085C 11            mov a, b
0700   085D 27            mov b, a
0701   085E E4            pop a
0702   085F             ; --- END FACTORS
0703   085F FD 15         add32 cb, ga
0704   0861 E4            pop a
0705   0862             ; --- END TERMS
0706   0862 E7            pop d
0707   0863 FD 3E         mov [d], bl
0708   0865             ; num = num / 10; 
0709   0865 FA 05 00      lea d, [bp + 5] ; $num
0710   0868 DA            push d
0711   0869 FA 05 00      lea d, [bp + 5] ; $num
0712   086C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0713   086F FD 39         mov c, b ; And place it into C
0714   0871 2A            mov b, [d] ; Lower Word in B
0715   0872             ; --- START FACTORS
0716   0872 D7            push a
0717   0873 11            mov a, b
0718   0874 FD 2E 0A 00   mov32 cb, $0000000a
0718   0878 00 00 
0719   087A AE            div a, b
0720   087B 27            mov b, a
0721   087C E4            pop a
0722   087D             ; --- END FACTORS
0723   087D E7            pop d
0724   087E FD 43         mov [d], b
0725   0880 28            mov b, c
0726   0881 FD 44 02 00   mov [d + 2], b
0727   0885             ; i++; 
0728   0885 FA F5 FF      lea d, [bp + -11] ; $i
0729   0888 2A            mov b, [d]
0730   0889 38 00 00      mov c, 0
0731   088C 11            mov a, b
0732   088D FD 77         inc b
0733   088F FA F5 FF      lea d, [bp + -11] ; $i
0734   0892 FD 43         mov [d], b
0735   0894 27            mov b, a
0736   0895 0A 10 08      jmp _while10_cond
0737   0898             _while10_exit:
0738   0898             ; while (i > 0) { 
0739   0898             _while11_cond:
0740   0898 FA F5 FF      lea d, [bp + -11] ; $i
0741   089B 2A            mov b, [d]
0742   089C 38 00 00      mov c, 0
0743   089F             ; --- START RELATIONAL
0744   089F D7            push a
0745   08A0 11            mov a, b
0746   08A1 FD 2E 00 00   mov32 cb, $00000000
0746   08A5 00 00 
0747   08A7 B0            cmp a, b
0748   08A8 FD 7F         sgt ; >
0749   08AA E4            pop a
0750   08AB             ; --- END RELATIONAL
0751   08AB C0 00 00      cmp b, 0
0752   08AE C6 E0 08      je _while11_exit
0753   08B1             _while11_block:
0754   08B1             ; i--; 
0755   08B1 FA F5 FF      lea d, [bp + -11] ; $i
0756   08B4 2A            mov b, [d]
0757   08B5 38 00 00      mov c, 0
0758   08B8 11            mov a, b
0759   08B9 FD 7D         dec b
0760   08BB FA F5 FF      lea d, [bp + -11] ; $i
0761   08BE FD 43         mov [d], b
0762   08C0 27            mov b, a
0763   08C1             ; putchar(digits[i]); 
0764   08C1             ; --- START FUNCTION CALL
0765   08C1 FA F7 FF      lea d, [bp + -9] ; $digits
0766   08C4 D7            push a
0767   08C5 DA            push d
0768   08C6 FA F5 FF      lea d, [bp + -11] ; $i
0769   08C9 2A            mov b, [d]
0770   08CA 38 00 00      mov c, 0
0771   08CD E7            pop d
0772   08CE 5A            add d, b
0773   08CF E4            pop a
0774   08D0 32            mov bl, [d]
0775   08D1 A7 00         mov bh, 0
0776   08D3 38 00 00      mov c, 0
0777   08D6 DD            push bl
0778   08D7 07 E2 08      call putchar
0779   08DA 51 01 00      add sp, 1
0780   08DD             ; --- END FUNCTION CALL
0781   08DD 0A 98 08      jmp _while11_cond
0782   08E0             _while11_exit:
0783   08E0 F9            leave
0784   08E1 09            ret
0785   08E2             
0786   08E2             putchar:
0787   08E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0788   08E5             ; --- BEGIN INLINE ASM SEGMENT
0789   08E5 FA 05 00      lea d, [bp + 5] ; $c
0790   08E8 1E            mov al, [d]
0791   08E9 23            mov ah, al
0792   08EA 19 00         mov al, 0
0793   08EC 05 03         syscall sys_io      
0794   08EE             ; --- END INLINE ASM SEGMENT
0795   08EE F9            leave
0796   08EF 09            ret
0797   08F0             
0798   08F0             print_unsigned_long:
0799   08F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0800   08F3             ; char digits[10]; 
0801   08F3 52 0A 00      sub sp, 10
0802   08F6             ; int i; 
0803   08F6 52 02 00      sub sp, 2
0804   08F9             ; i = 0; 
0805   08F9 FA F5 FF      lea d, [bp + -11] ; $i
0806   08FC DA            push d
0807   08FD FD 2E 00 00   mov32 cb, $00000000
0807   0901 00 00 
0808   0903 E7            pop d
0809   0904 FD 43         mov [d], b
0810   0906             ; if(num == 0){ 
0811   0906             _if12_cond:
0812   0906 FA 05 00      lea d, [bp + 5] ; $num
0813   0909 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0814   090C FD 39         mov c, b ; And place it into C
0815   090E 2A            mov b, [d] ; Lower Word in B
0816   090F             ; --- START RELATIONAL
0817   090F D7            push a
0818   0910 FD D8         push g
0819   0912 11            mov a, b
0820   0913 FD 7A         mov g, c
0821   0915 FD 2E 00 00   mov32 cb, $00000000
0821   0919 00 00 
0822   091B FD AF         cmp32 ga, cb
0823   091D FD 71         seq ; ==
0824   091F FD F1         pop g
0825   0921 E4            pop a
0826   0922             ; --- END RELATIONAL
0827   0922 C0 00 00      cmp b, 0
0828   0925 C6 3A 09      je _if12_exit
0829   0928             _if12_TRUE:
0830   0928             ; putchar('0'); 
0831   0928             ; --- START FUNCTION CALL
0832   0928 FD 2E 30 00   mov32 cb, $00000030
0832   092C 00 00 
0833   092E DD            push bl
0834   092F 07 E2 08      call putchar
0835   0932 51 01 00      add sp, 1
0836   0935             ; --- END FUNCTION CALL
0837   0935             ; return; 
0838   0935 F9            leave
0839   0936 09            ret
0840   0937 0A 3A 09      jmp _if12_exit
0841   093A             _if12_exit:
0842   093A             ; while (num > 0) { 
0843   093A             _while13_cond:
0844   093A FA 05 00      lea d, [bp + 5] ; $num
0845   093D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0846   0940 FD 39         mov c, b ; And place it into C
0847   0942 2A            mov b, [d] ; Lower Word in B
0848   0943             ; --- START RELATIONAL
0849   0943 D7            push a
0850   0944 FD D8         push g
0851   0946 11            mov a, b
0852   0947 FD 7A         mov g, c
0853   0949 FD 2E 00 00   mov32 cb, $00000000
0853   094D 00 00 
0854   094F FD AF         cmp32 ga, cb
0855   0951 FD 81         sgu
0856   0953 FD F1         pop g
0857   0955 E4            pop a
0858   0956             ; --- END RELATIONAL
0859   0956 C0 00 00      cmp b, 0
0860   0959 C6 C2 09      je _while13_exit
0861   095C             _while13_block:
0862   095C             ; digits[i] = '0' + (num % 10); 
0863   095C FA F7 FF      lea d, [bp + -9] ; $digits
0864   095F D7            push a
0865   0960 DA            push d
0866   0961 FA F5 FF      lea d, [bp + -11] ; $i
0867   0964 2A            mov b, [d]
0868   0965 38 00 00      mov c, 0
0869   0968 E7            pop d
0870   0969 5A            add d, b
0871   096A E4            pop a
0872   096B DA            push d
0873   096C FD 2E 30 00   mov32 cb, $00000030
0873   0970 00 00 
0874   0972             ; --- START TERMS
0875   0972 D7            push a
0876   0973 11            mov a, b
0877   0974 FA 05 00      lea d, [bp + 5] ; $num
0878   0977 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0879   097A FD 39         mov c, b ; And place it into C
0880   097C 2A            mov b, [d] ; Lower Word in B
0881   097D             ; --- START FACTORS
0882   097D D7            push a
0883   097E 11            mov a, b
0884   097F FD 2E 0A 00   mov32 cb, $0000000a
0884   0983 00 00 
0885   0985 AE            div a, b ; 
0886   0986 11            mov a, b
0887   0987 27            mov b, a
0888   0988 E4            pop a
0889   0989             ; --- END FACTORS
0890   0989 FD 15         add32 cb, ga
0891   098B E4            pop a
0892   098C             ; --- END TERMS
0893   098C E7            pop d
0894   098D FD 3E         mov [d], bl
0895   098F             ; num = num / 10; 
0896   098F FA 05 00      lea d, [bp + 5] ; $num
0897   0992 DA            push d
0898   0993 FA 05 00      lea d, [bp + 5] ; $num
0899   0996 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0900   0999 FD 39         mov c, b ; And place it into C
0901   099B 2A            mov b, [d] ; Lower Word in B
0902   099C             ; --- START FACTORS
0903   099C D7            push a
0904   099D 11            mov a, b
0905   099E FD 2E 0A 00   mov32 cb, $0000000a
0905   09A2 00 00 
0906   09A4 AE            div a, b
0907   09A5 27            mov b, a
0908   09A6 E4            pop a
0909   09A7             ; --- END FACTORS
0910   09A7 E7            pop d
0911   09A8 FD 43         mov [d], b
0912   09AA 28            mov b, c
0913   09AB FD 44 02 00   mov [d + 2], b
0914   09AF             ; i++; 
0915   09AF FA F5 FF      lea d, [bp + -11] ; $i
0916   09B2 2A            mov b, [d]
0917   09B3 38 00 00      mov c, 0
0918   09B6 11            mov a, b
0919   09B7 FD 77         inc b
0920   09B9 FA F5 FF      lea d, [bp + -11] ; $i
0921   09BC FD 43         mov [d], b
0922   09BE 27            mov b, a
0923   09BF 0A 3A 09      jmp _while13_cond
0924   09C2             _while13_exit:
0925   09C2             ; while (i > 0) { 
0926   09C2             _while14_cond:
0927   09C2 FA F5 FF      lea d, [bp + -11] ; $i
0928   09C5 2A            mov b, [d]
0929   09C6 38 00 00      mov c, 0
0930   09C9             ; --- START RELATIONAL
0931   09C9 D7            push a
0932   09CA 11            mov a, b
0933   09CB FD 2E 00 00   mov32 cb, $00000000
0933   09CF 00 00 
0934   09D1 B0            cmp a, b
0935   09D2 FD 7F         sgt ; >
0936   09D4 E4            pop a
0937   09D5             ; --- END RELATIONAL
0938   09D5 C0 00 00      cmp b, 0
0939   09D8 C6 0A 0A      je _while14_exit
0940   09DB             _while14_block:
0941   09DB             ; i--; 
0942   09DB FA F5 FF      lea d, [bp + -11] ; $i
0943   09DE 2A            mov b, [d]
0944   09DF 38 00 00      mov c, 0
0945   09E2 11            mov a, b
0946   09E3 FD 7D         dec b
0947   09E5 FA F5 FF      lea d, [bp + -11] ; $i
0948   09E8 FD 43         mov [d], b
0949   09EA 27            mov b, a
0950   09EB             ; putchar(digits[i]); 
0951   09EB             ; --- START FUNCTION CALL
0952   09EB FA F7 FF      lea d, [bp + -9] ; $digits
0953   09EE D7            push a
0954   09EF DA            push d
0955   09F0 FA F5 FF      lea d, [bp + -11] ; $i
0956   09F3 2A            mov b, [d]
0957   09F4 38 00 00      mov c, 0
0958   09F7 E7            pop d
0959   09F8 5A            add d, b
0960   09F9 E4            pop a
0961   09FA 32            mov bl, [d]
0962   09FB A7 00         mov bh, 0
0963   09FD 38 00 00      mov c, 0
0964   0A00 DD            push bl
0965   0A01 07 E2 08      call putchar
0966   0A04 51 01 00      add sp, 1
0967   0A07             ; --- END FUNCTION CALL
0968   0A07 0A C2 09      jmp _while14_cond
0969   0A0A             _while14_exit:
0970   0A0A F9            leave
0971   0A0B 09            ret
0972   0A0C             
0973   0A0C             printx32:
0974   0A0C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0975   0A0F             ; --- BEGIN INLINE ASM SEGMENT
0976   0A0F FA 05 00      lea d, [bp + 5] ; $hex
0977   0A12 2B 02 00      mov b, [d+2]
0978   0A15 07 1E 0A      call print_u16x_printx32
0979   0A18 2A            mov b, [d]
0980   0A19 07 1E 0A      call print_u16x_printx32
0981   0A1C             ; --- END INLINE ASM SEGMENT
0982   0A1C             ; return; 
0983   0A1C F9            leave
0984   0A1D 09            ret
0985   0A1E             ; --- BEGIN INLINE ASM SEGMENT
0986   0A1E             print_u16x_printx32:
0987   0A1E D7            push a
0988   0A1F D8            push b
0989   0A20 DD            push bl
0990   0A21 30            mov bl, bh
0991   0A22 07 40 0A      call _itoa_printx32        
0992   0A25 2F            mov bl, al        
0993   0A26 19 00         mov al, 0
0994   0A28 05 03         syscall sys_io        
0995   0A2A 24            mov ah, bl        
0996   0A2B 19 00         mov al, 0
0997   0A2D 05 03         syscall sys_io        
0998   0A2F EA            pop bl
0999   0A30 07 40 0A      call _itoa_printx32        
1000   0A33 2F            mov bl, al        
1001   0A34 19 00         mov al, 0
1002   0A36 05 03         syscall sys_io        
1003   0A38 24            mov ah, bl        
1004   0A39 19 00         mov al, 0
1005   0A3B 05 03         syscall sys_io        
1006   0A3D E5            pop b
1007   0A3E E4            pop a
1008   0A3F 09            ret
1009   0A40             _itoa_printx32:
1010   0A40 DA            push d
1011   0A41 D8            push b
1012   0A42 A7 00         mov bh, 0
1013   0A44 FD A4 04      shr bl, 4  
1014   0A47 74            mov d, b
1015   0A48 1F 5A 0A      mov al, [d + s_hex_digits_printx32]
1016   0A4B 23            mov ah, al
1017   0A4C E5            pop b
1018   0A4D D8            push b
1019   0A4E A7 00         mov bh, 0
1020   0A50 FD 87 0F      and bl, $0F
1021   0A53 74            mov d, b
1022   0A54 1F 5A 0A      mov al, [d + s_hex_digits_printx32]
1023   0A57 E5            pop b
1024   0A58 E7            pop d
1025   0A59 09            ret
1026   0A5A 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
1026   0A5E 34 35 36 37 
1026   0A62 38 39 41 42 
1026   0A66 43 44 45 46 
1027   0A6A             ; --- END INLINE ASM SEGMENT
1028   0A6A F9            leave
1029   0A6B 09            ret
1030   0A6C             
1031   0A6C             err:
1032   0A6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1033   0A6F             ; print(e); 
1034   0A6F             ; --- START FUNCTION CALL
1035   0A6F FA 05 00      lea d, [bp + 5] ; $e
1036   0A72 2A            mov b, [d]
1037   0A73 38 00 00      mov c, 0
1038   0A76 FD AB         swp b
1039   0A78 D8            push b
1040   0A79 07 81 0A      call print
1041   0A7C 51 02 00      add sp, 2
1042   0A7F             ; --- END FUNCTION CALL
1043   0A7F F9            leave
1044   0A80 09            ret
1045   0A81             
1046   0A81             print:
1047   0A81 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1048   0A84             ; --- BEGIN INLINE ASM SEGMENT
1049   0A84 FA 05 00      lea d, [bp + 5] ; $s
1050   0A87 FD 2A         mov d, [d]
1051   0A89             _puts_L1_print:
1052   0A89 1E            mov al, [d]
1053   0A8A B9 00         cmp al, 0
1054   0A8C C6 98 0A      jz _puts_END_print
1055   0A8F 23            mov ah, al
1056   0A90 19 00         mov al, 0
1057   0A92 05 03         syscall sys_io
1058   0A94 79            inc d
1059   0A95 0A 89 0A      jmp _puts_L1_print
1060   0A98             _puts_END_print:
1061   0A98             ; --- END INLINE ASM SEGMENT
1062   0A98 F9            leave
1063   0A99 09            ret
1064   0A9A             
1065   0A9A             print_signed:
1066   0A9A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1067   0A9D             ; char digits[5]; 
1068   0A9D 52 05 00      sub sp, 5
1069   0AA0             ; int i = 0; 
1070   0AA0 52 02 00      sub sp, 2
1071   0AA3             ; --- START LOCAL VAR INITIALIZATION
1072   0AA3 FA FA FF      lea d, [bp + -6] ; $i
1073   0AA6 DA            push d
1074   0AA7 FD 2E 00 00   mov32 cb, $00000000
1074   0AAB 00 00 
1075   0AAD E7            pop d
1076   0AAE FD 43         mov [d], b
1077   0AB0             ; --- END LOCAL VAR INITIALIZATION
1078   0AB0             ; if (num < 0) { 
1079   0AB0             _if15_cond:
1080   0AB0 FA 05 00      lea d, [bp + 5] ; $num
1081   0AB3 2A            mov b, [d]
1082   0AB4 38 00 00      mov c, 0
1083   0AB7             ; --- START RELATIONAL
1084   0AB7 D7            push a
1085   0AB8 11            mov a, b
1086   0AB9 FD 2E 00 00   mov32 cb, $00000000
1086   0ABD 00 00 
1087   0ABF B0            cmp a, b
1088   0AC0 FD 73         slt ; < (signed)
1089   0AC2 E4            pop a
1090   0AC3             ; --- END RELATIONAL
1091   0AC3 C0 00 00      cmp b, 0
1092   0AC6 C6 E9 0A      je _if15_else
1093   0AC9             _if15_TRUE:
1094   0AC9             ; putchar('-'); 
1095   0AC9             ; --- START FUNCTION CALL
1096   0AC9 FD 2E 2D 00   mov32 cb, $0000002d
1096   0ACD 00 00 
1097   0ACF DD            push bl
1098   0AD0 07 E2 08      call putchar
1099   0AD3 51 01 00      add sp, 1
1100   0AD6             ; --- END FUNCTION CALL
1101   0AD6             ; num = -num; 
1102   0AD6 FA 05 00      lea d, [bp + 5] ; $num
1103   0AD9 DA            push d
1104   0ADA FA 05 00      lea d, [bp + 5] ; $num
1105   0ADD 2A            mov b, [d]
1106   0ADE 38 00 00      mov c, 0
1107   0AE1 FD 97         neg b
1108   0AE3 E7            pop d
1109   0AE4 FD 43         mov [d], b
1110   0AE6 0A 14 0B      jmp _if15_exit
1111   0AE9             _if15_else:
1112   0AE9             ; if (num == 0) { 
1113   0AE9             _if16_cond:
1114   0AE9 FA 05 00      lea d, [bp + 5] ; $num
1115   0AEC 2A            mov b, [d]
1116   0AED 38 00 00      mov c, 0
1117   0AF0             ; --- START RELATIONAL
1118   0AF0 D7            push a
1119   0AF1 11            mov a, b
1120   0AF2 FD 2E 00 00   mov32 cb, $00000000
1120   0AF6 00 00 
1121   0AF8 B0            cmp a, b
1122   0AF9 FD 71         seq ; ==
1123   0AFB E4            pop a
1124   0AFC             ; --- END RELATIONAL
1125   0AFC C0 00 00      cmp b, 0
1126   0AFF C6 14 0B      je _if16_exit
1127   0B02             _if16_TRUE:
1128   0B02             ; putchar('0'); 
1129   0B02             ; --- START FUNCTION CALL
1130   0B02 FD 2E 30 00   mov32 cb, $00000030
1130   0B06 00 00 
1131   0B08 DD            push bl
1132   0B09 07 E2 08      call putchar
1133   0B0C 51 01 00      add sp, 1
1134   0B0F             ; --- END FUNCTION CALL
1135   0B0F             ; return; 
1136   0B0F F9            leave
1137   0B10 09            ret
1138   0B11 0A 14 0B      jmp _if16_exit
1139   0B14             _if16_exit:
1140   0B14             _if15_exit:
1141   0B14             ; while (num > 0) { 
1142   0B14             _while17_cond:
1143   0B14 FA 05 00      lea d, [bp + 5] ; $num
1144   0B17 2A            mov b, [d]
1145   0B18 38 00 00      mov c, 0
1146   0B1B             ; --- START RELATIONAL
1147   0B1B D7            push a
1148   0B1C 11            mov a, b
1149   0B1D FD 2E 00 00   mov32 cb, $00000000
1149   0B21 00 00 
1150   0B23 B0            cmp a, b
1151   0B24 FD 7F         sgt ; >
1152   0B26 E4            pop a
1153   0B27             ; --- END RELATIONAL
1154   0B27 C0 00 00      cmp b, 0
1155   0B2A C6 89 0B      je _while17_exit
1156   0B2D             _while17_block:
1157   0B2D             ; digits[i] = '0' + (num % 10); 
1158   0B2D FA FC FF      lea d, [bp + -4] ; $digits
1159   0B30 D7            push a
1160   0B31 DA            push d
1161   0B32 FA FA FF      lea d, [bp + -6] ; $i
1162   0B35 2A            mov b, [d]
1163   0B36 38 00 00      mov c, 0
1164   0B39 E7            pop d
1165   0B3A 5A            add d, b
1166   0B3B E4            pop a
1167   0B3C DA            push d
1168   0B3D FD 2E 30 00   mov32 cb, $00000030
1168   0B41 00 00 
1169   0B43             ; --- START TERMS
1170   0B43 D7            push a
1171   0B44 11            mov a, b
1172   0B45 FA 05 00      lea d, [bp + 5] ; $num
1173   0B48 2A            mov b, [d]
1174   0B49 38 00 00      mov c, 0
1175   0B4C             ; --- START FACTORS
1176   0B4C D7            push a
1177   0B4D 11            mov a, b
1178   0B4E FD 2E 0A 00   mov32 cb, $0000000a
1178   0B52 00 00 
1179   0B54 AE            div a, b ; 
1180   0B55 11            mov a, b
1181   0B56 27            mov b, a
1182   0B57 E4            pop a
1183   0B58             ; --- END FACTORS
1184   0B58 56            add b, a
1185   0B59 E4            pop a
1186   0B5A             ; --- END TERMS
1187   0B5A E7            pop d
1188   0B5B FD 3E         mov [d], bl
1189   0B5D             ; num = num / 10; 
1190   0B5D FA 05 00      lea d, [bp + 5] ; $num
1191   0B60 DA            push d
1192   0B61 FA 05 00      lea d, [bp + 5] ; $num
1193   0B64 2A            mov b, [d]
1194   0B65 38 00 00      mov c, 0
1195   0B68             ; --- START FACTORS
1196   0B68 D7            push a
1197   0B69 11            mov a, b
1198   0B6A FD 2E 0A 00   mov32 cb, $0000000a
1198   0B6E 00 00 
1199   0B70 AE            div a, b
1200   0B71 27            mov b, a
1201   0B72 E4            pop a
1202   0B73             ; --- END FACTORS
1203   0B73 E7            pop d
1204   0B74 FD 43         mov [d], b
1205   0B76             ; i++; 
1206   0B76 FA FA FF      lea d, [bp + -6] ; $i
1207   0B79 2A            mov b, [d]
1208   0B7A 38 00 00      mov c, 0
1209   0B7D 11            mov a, b
1210   0B7E FD 77         inc b
1211   0B80 FA FA FF      lea d, [bp + -6] ; $i
1212   0B83 FD 43         mov [d], b
1213   0B85 27            mov b, a
1214   0B86 0A 14 0B      jmp _while17_cond
1215   0B89             _while17_exit:
1216   0B89             ; while (i > 0) { 
1217   0B89             _while18_cond:
1218   0B89 FA FA FF      lea d, [bp + -6] ; $i
1219   0B8C 2A            mov b, [d]
1220   0B8D 38 00 00      mov c, 0
1221   0B90             ; --- START RELATIONAL
1222   0B90 D7            push a
1223   0B91 11            mov a, b
1224   0B92 FD 2E 00 00   mov32 cb, $00000000
1224   0B96 00 00 
1225   0B98 B0            cmp a, b
1226   0B99 FD 7F         sgt ; >
1227   0B9B E4            pop a
1228   0B9C             ; --- END RELATIONAL
1229   0B9C C0 00 00      cmp b, 0
1230   0B9F C6 D1 0B      je _while18_exit
1231   0BA2             _while18_block:
1232   0BA2             ; i--; 
1233   0BA2 FA FA FF      lea d, [bp + -6] ; $i
1234   0BA5 2A            mov b, [d]
1235   0BA6 38 00 00      mov c, 0
1236   0BA9 11            mov a, b
1237   0BAA FD 7D         dec b
1238   0BAC FA FA FF      lea d, [bp + -6] ; $i
1239   0BAF FD 43         mov [d], b
1240   0BB1 27            mov b, a
1241   0BB2             ; putchar(digits[i]); 
1242   0BB2             ; --- START FUNCTION CALL
1243   0BB2 FA FC FF      lea d, [bp + -4] ; $digits
1244   0BB5 D7            push a
1245   0BB6 DA            push d
1246   0BB7 FA FA FF      lea d, [bp + -6] ; $i
1247   0BBA 2A            mov b, [d]
1248   0BBB 38 00 00      mov c, 0
1249   0BBE E7            pop d
1250   0BBF 5A            add d, b
1251   0BC0 E4            pop a
1252   0BC1 32            mov bl, [d]
1253   0BC2 A7 00         mov bh, 0
1254   0BC4 38 00 00      mov c, 0
1255   0BC7 DD            push bl
1256   0BC8 07 E2 08      call putchar
1257   0BCB 51 01 00      add sp, 1
1258   0BCE             ; --- END FUNCTION CALL
1259   0BCE 0A 89 0B      jmp _while18_cond
1260   0BD1             _while18_exit:
1261   0BD1 F9            leave
1262   0BD2 09            ret
1263   0BD3             
1264   0BD3             print_unsigned:
1265   0BD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1266   0BD6             ; char digits[5]; 
1267   0BD6 52 05 00      sub sp, 5
1268   0BD9             ; int i; 
1269   0BD9 52 02 00      sub sp, 2
1270   0BDC             ; i = 0; 
1271   0BDC FA FA FF      lea d, [bp + -6] ; $i
1272   0BDF DA            push d
1273   0BE0 FD 2E 00 00   mov32 cb, $00000000
1273   0BE4 00 00 
1274   0BE6 E7            pop d
1275   0BE7 FD 43         mov [d], b
1276   0BE9             ; if(num == 0){ 
1277   0BE9             _if19_cond:
1278   0BE9 FA 05 00      lea d, [bp + 5] ; $num
1279   0BEC 2A            mov b, [d]
1280   0BED 38 00 00      mov c, 0
1281   0BF0             ; --- START RELATIONAL
1282   0BF0 D7            push a
1283   0BF1 11            mov a, b
1284   0BF2 FD 2E 00 00   mov32 cb, $00000000
1284   0BF6 00 00 
1285   0BF8 B0            cmp a, b
1286   0BF9 FD 71         seq ; ==
1287   0BFB E4            pop a
1288   0BFC             ; --- END RELATIONAL
1289   0BFC C0 00 00      cmp b, 0
1290   0BFF C6 14 0C      je _if19_exit
1291   0C02             _if19_TRUE:
1292   0C02             ; putchar('0'); 
1293   0C02             ; --- START FUNCTION CALL
1294   0C02 FD 2E 30 00   mov32 cb, $00000030
1294   0C06 00 00 
1295   0C08 DD            push bl
1296   0C09 07 E2 08      call putchar
1297   0C0C 51 01 00      add sp, 1
1298   0C0F             ; --- END FUNCTION CALL
1299   0C0F             ; return; 
1300   0C0F F9            leave
1301   0C10 09            ret
1302   0C11 0A 14 0C      jmp _if19_exit
1303   0C14             _if19_exit:
1304   0C14             ; while (num > 0) { 
1305   0C14             _while20_cond:
1306   0C14 FA 05 00      lea d, [bp + 5] ; $num
1307   0C17 2A            mov b, [d]
1308   0C18 38 00 00      mov c, 0
1309   0C1B             ; --- START RELATIONAL
1310   0C1B D7            push a
1311   0C1C 11            mov a, b
1312   0C1D FD 2E 00 00   mov32 cb, $00000000
1312   0C21 00 00 
1313   0C23 B0            cmp a, b
1314   0C24 FD 81         sgu ; > (unsigned)
1315   0C26 E4            pop a
1316   0C27             ; --- END RELATIONAL
1317   0C27 C0 00 00      cmp b, 0
1318   0C2A C6 89 0C      je _while20_exit
1319   0C2D             _while20_block:
1320   0C2D             ; digits[i] = '0' + (num % 10); 
1321   0C2D FA FC FF      lea d, [bp + -4] ; $digits
1322   0C30 D7            push a
1323   0C31 DA            push d
1324   0C32 FA FA FF      lea d, [bp + -6] ; $i
1325   0C35 2A            mov b, [d]
1326   0C36 38 00 00      mov c, 0
1327   0C39 E7            pop d
1328   0C3A 5A            add d, b
1329   0C3B E4            pop a
1330   0C3C DA            push d
1331   0C3D FD 2E 30 00   mov32 cb, $00000030
1331   0C41 00 00 
1332   0C43             ; --- START TERMS
1333   0C43 D7            push a
1334   0C44 11            mov a, b
1335   0C45 FA 05 00      lea d, [bp + 5] ; $num
1336   0C48 2A            mov b, [d]
1337   0C49 38 00 00      mov c, 0
1338   0C4C             ; --- START FACTORS
1339   0C4C D7            push a
1340   0C4D 11            mov a, b
1341   0C4E FD 2E 0A 00   mov32 cb, $0000000a
1341   0C52 00 00 
1342   0C54 AE            div a, b ; 
1343   0C55 11            mov a, b
1344   0C56 27            mov b, a
1345   0C57 E4            pop a
1346   0C58             ; --- END FACTORS
1347   0C58 56            add b, a
1348   0C59 E4            pop a
1349   0C5A             ; --- END TERMS
1350   0C5A E7            pop d
1351   0C5B FD 3E         mov [d], bl
1352   0C5D             ; num = num / 10; 
1353   0C5D FA 05 00      lea d, [bp + 5] ; $num
1354   0C60 DA            push d
1355   0C61 FA 05 00      lea d, [bp + 5] ; $num
1356   0C64 2A            mov b, [d]
1357   0C65 38 00 00      mov c, 0
1358   0C68             ; --- START FACTORS
1359   0C68 D7            push a
1360   0C69 11            mov a, b
1361   0C6A FD 2E 0A 00   mov32 cb, $0000000a
1361   0C6E 00 00 
1362   0C70 AE            div a, b
1363   0C71 27            mov b, a
1364   0C72 E4            pop a
1365   0C73             ; --- END FACTORS
1366   0C73 E7            pop d
1367   0C74 FD 43         mov [d], b
1368   0C76             ; i++; 
1369   0C76 FA FA FF      lea d, [bp + -6] ; $i
1370   0C79 2A            mov b, [d]
1371   0C7A 38 00 00      mov c, 0
1372   0C7D 11            mov a, b
1373   0C7E FD 77         inc b
1374   0C80 FA FA FF      lea d, [bp + -6] ; $i
1375   0C83 FD 43         mov [d], b
1376   0C85 27            mov b, a
1377   0C86 0A 14 0C      jmp _while20_cond
1378   0C89             _while20_exit:
1379   0C89             ; while (i > 0) { 
1380   0C89             _while21_cond:
1381   0C89 FA FA FF      lea d, [bp + -6] ; $i
1382   0C8C 2A            mov b, [d]
1383   0C8D 38 00 00      mov c, 0
1384   0C90             ; --- START RELATIONAL
1385   0C90 D7            push a
1386   0C91 11            mov a, b
1387   0C92 FD 2E 00 00   mov32 cb, $00000000
1387   0C96 00 00 
1388   0C98 B0            cmp a, b
1389   0C99 FD 7F         sgt ; >
1390   0C9B E4            pop a
1391   0C9C             ; --- END RELATIONAL
1392   0C9C C0 00 00      cmp b, 0
1393   0C9F C6 D1 0C      je _while21_exit
1394   0CA2             _while21_block:
1395   0CA2             ; i--; 
1396   0CA2 FA FA FF      lea d, [bp + -6] ; $i
1397   0CA5 2A            mov b, [d]
1398   0CA6 38 00 00      mov c, 0
1399   0CA9 11            mov a, b
1400   0CAA FD 7D         dec b
1401   0CAC FA FA FF      lea d, [bp + -6] ; $i
1402   0CAF FD 43         mov [d], b
1403   0CB1 27            mov b, a
1404   0CB2             ; putchar(digits[i]); 
1405   0CB2             ; --- START FUNCTION CALL
1406   0CB2 FA FC FF      lea d, [bp + -4] ; $digits
1407   0CB5 D7            push a
1408   0CB6 DA            push d
1409   0CB7 FA FA FF      lea d, [bp + -6] ; $i
1410   0CBA 2A            mov b, [d]
1411   0CBB 38 00 00      mov c, 0
1412   0CBE E7            pop d
1413   0CBF 5A            add d, b
1414   0CC0 E4            pop a
1415   0CC1 32            mov bl, [d]
1416   0CC2 A7 00         mov bh, 0
1417   0CC4 38 00 00      mov c, 0
1418   0CC7 DD            push bl
1419   0CC8 07 E2 08      call putchar
1420   0CCB 51 01 00      add sp, 1
1421   0CCE             ; --- END FUNCTION CALL
1422   0CCE 0A 89 0C      jmp _while21_cond
1423   0CD1             _while21_exit:
1424   0CD1 F9            leave
1425   0CD2 09            ret
1426   0CD3             
1427   0CD3             printx16:
1428   0CD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1429   0CD6             ; --- BEGIN INLINE ASM SEGMENT
1430   0CD6 FA 05 00      lea d, [bp + 5] ; $hex
1431   0CD9 2A            mov b, [d]
1432   0CDA             print_u16x_printx16:
1433   0CDA DD            push bl
1434   0CDB 30            mov bl, bh
1435   0CDC 07 F9 0C      call _itoa_printx16        
1436   0CDF 2F            mov bl, al        
1437   0CE0 19 00         mov al, 0
1438   0CE2 05 03         syscall sys_io        
1439   0CE4 24            mov ah, bl        
1440   0CE5 19 00         mov al, 0
1441   0CE7 05 03         syscall sys_io        
1442   0CE9 EA            pop bl
1443   0CEA 07 F9 0C      call _itoa_printx16        
1444   0CED 2F            mov bl, al        
1445   0CEE 19 00         mov al, 0
1446   0CF0 05 03         syscall sys_io        
1447   0CF2 24            mov ah, bl        
1448   0CF3 19 00         mov al, 0
1449   0CF5 05 03         syscall sys_io        
1450   0CF7             ; --- END INLINE ASM SEGMENT
1451   0CF7             ; return; 
1452   0CF7 F9            leave
1453   0CF8 09            ret
1454   0CF9             ; --- BEGIN INLINE ASM SEGMENT
1455   0CF9             _itoa_printx16:
1456   0CF9 DA            push d
1457   0CFA D8            push b
1458   0CFB A7 00         mov bh, 0
1459   0CFD FD A4 04      shr bl, 4  
1460   0D00 74            mov d, b
1461   0D01 1F 13 0D      mov al, [d + s_hex_digits_printx16]
1462   0D04 23            mov ah, al
1463   0D05 E5            pop b
1464   0D06 D8            push b
1465   0D07 A7 00         mov bh, 0
1466   0D09 FD 87 0F      and bl, $0F
1467   0D0C 74            mov d, b
1468   0D0D 1F 13 0D      mov al, [d + s_hex_digits_printx16]
1469   0D10 E5            pop b
1470   0D11 E7            pop d
1471   0D12 09            ret
1472   0D13 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
1472   0D17 34 35 36 37 
1472   0D1B 38 39 41 42 
1472   0D1F 43 44 45 46 
1473   0D23             ; --- END INLINE ASM SEGMENT
1474   0D23 F9            leave
1475   0D24 09            ret
1476   0D25             
1477   0D25             strcpy:
1478   0D25 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1479   0D28             ; char *psrc; 
1480   0D28 52 02 00      sub sp, 2
1481   0D2B             ; char *pdest; 
1482   0D2B 52 02 00      sub sp, 2
1483   0D2E             ; psrc = src; 
1484   0D2E FA FF FF      lea d, [bp + -1] ; $psrc
1485   0D31 DA            push d
1486   0D32 FA 07 00      lea d, [bp + 7] ; $src
1487   0D35 2A            mov b, [d]
1488   0D36 38 00 00      mov c, 0
1489   0D39 E7            pop d
1490   0D3A FD 43         mov [d], b
1491   0D3C             ; pdest = dest; 
1492   0D3C FA FD FF      lea d, [bp + -3] ; $pdest
1493   0D3F DA            push d
1494   0D40 FA 05 00      lea d, [bp + 5] ; $dest
1495   0D43 2A            mov b, [d]
1496   0D44 38 00 00      mov c, 0
1497   0D47 E7            pop d
1498   0D48 FD 43         mov [d], b
1499   0D4A             ; while(*psrc) *pdest++ = *psrc++; 
1500   0D4A             _while22_cond:
1501   0D4A FA FF FF      lea d, [bp + -1] ; $psrc
1502   0D4D 2A            mov b, [d]
1503   0D4E 38 00 00      mov c, 0
1504   0D51 74            mov d, b
1505   0D52 32            mov bl, [d]
1506   0D53 A7 00         mov bh, 0
1507   0D55 38 00 00      mov c, 0
1508   0D58 C0 00 00      cmp b, 0
1509   0D5B C6 8C 0D      je _while22_exit
1510   0D5E             _while22_block:
1511   0D5E             ; *pdest++ = *psrc++; 
1512   0D5E FA FD FF      lea d, [bp + -3] ; $pdest
1513   0D61 2A            mov b, [d]
1514   0D62 38 00 00      mov c, 0
1515   0D65 FD 77         inc b
1516   0D67 FA FD FF      lea d, [bp + -3] ; $pdest
1517   0D6A FD 43         mov [d], b
1518   0D6C FD 7D         dec b
1519   0D6E D8            push b
1520   0D6F FA FF FF      lea d, [bp + -1] ; $psrc
1521   0D72 2A            mov b, [d]
1522   0D73 38 00 00      mov c, 0
1523   0D76 FD 77         inc b
1524   0D78 FA FF FF      lea d, [bp + -1] ; $psrc
1525   0D7B FD 43         mov [d], b
1526   0D7D FD 7D         dec b
1527   0D7F 74            mov d, b
1528   0D80 32            mov bl, [d]
1529   0D81 A7 00         mov bh, 0
1530   0D83 38 00 00      mov c, 0
1531   0D86 E7            pop d
1532   0D87 FD 3E         mov [d], bl
1533   0D89 0A 4A 0D      jmp _while22_cond
1534   0D8C             _while22_exit:
1535   0D8C             ; *pdest = '\0'; 
1536   0D8C FA FD FF      lea d, [bp + -3] ; $pdest
1537   0D8F 2A            mov b, [d]
1538   0D90 38 00 00      mov c, 0
1539   0D93 D8            push b
1540   0D94 FD 2E 00 00   mov32 cb, $00000000
1540   0D98 00 00 
1541   0D9A E7            pop d
1542   0D9B FD 3E         mov [d], bl
1543   0D9D F9            leave
1544   0D9E 09            ret
1545   0D9F             
1546   0D9F             strcat:
1547   0D9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1548   0DA2             ; int dest_len; 
1549   0DA2 52 02 00      sub sp, 2
1550   0DA5             ; int i; 
1551   0DA5 52 02 00      sub sp, 2
1552   0DA8             ; dest_len = strlen(dest); 
1553   0DA8 FA FF FF      lea d, [bp + -1] ; $dest_len
1554   0DAB DA            push d
1555   0DAC             ; --- START FUNCTION CALL
1556   0DAC FA 05 00      lea d, [bp + 5] ; $dest
1557   0DAF 2A            mov b, [d]
1558   0DB0 38 00 00      mov c, 0
1559   0DB3 FD AB         swp b
1560   0DB5 D8            push b
1561   0DB6 07 82 0E      call strlen
1562   0DB9 51 02 00      add sp, 2
1563   0DBC             ; --- END FUNCTION CALL
1564   0DBC E7            pop d
1565   0DBD FD 43         mov [d], b
1566   0DBF             ; for (i = 0; src[i] != 0; i=i+1) { 
1567   0DBF             _for23_init:
1568   0DBF FA FD FF      lea d, [bp + -3] ; $i
1569   0DC2 DA            push d
1570   0DC3 FD 2E 00 00   mov32 cb, $00000000
1570   0DC7 00 00 
1571   0DC9 E7            pop d
1572   0DCA FD 43         mov [d], b
1573   0DCC             _for23_cond:
1574   0DCC FA 07 00      lea d, [bp + 7] ; $src
1575   0DCF FD 2A         mov d, [d]
1576   0DD1 D7            push a
1577   0DD2 DA            push d
1578   0DD3 FA FD FF      lea d, [bp + -3] ; $i
1579   0DD6 2A            mov b, [d]
1580   0DD7 38 00 00      mov c, 0
1581   0DDA E7            pop d
1582   0DDB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1583   0DDF E4            pop a
1584   0DE0 32            mov bl, [d]
1585   0DE1 A7 00         mov bh, 0
1586   0DE3 38 00 00      mov c, 0
1587   0DE6             ; --- START RELATIONAL
1588   0DE6 D7            push a
1589   0DE7 11            mov a, b
1590   0DE8 FD 2E 00 00   mov32 cb, $00000000
1590   0DEC 00 00 
1591   0DEE B0            cmp a, b
1592   0DEF FD 72         sneq ; !=
1593   0DF1 E4            pop a
1594   0DF2             ; --- END RELATIONAL
1595   0DF2 C0 00 00      cmp b, 0
1596   0DF5 C6 50 0E      je _for23_exit
1597   0DF8             _for23_block:
1598   0DF8             ; dest[dest_len + i] = src[i]; 
1599   0DF8 FA 05 00      lea d, [bp + 5] ; $dest
1600   0DFB FD 2A         mov d, [d]
1601   0DFD D7            push a
1602   0DFE DA            push d
1603   0DFF FA FF FF      lea d, [bp + -1] ; $dest_len
1604   0E02 2A            mov b, [d]
1605   0E03 38 00 00      mov c, 0
1606   0E06             ; --- START TERMS
1607   0E06 D7            push a
1608   0E07 11            mov a, b
1609   0E08 FA FD FF      lea d, [bp + -3] ; $i
1610   0E0B 2A            mov b, [d]
1611   0E0C 38 00 00      mov c, 0
1612   0E0F 56            add b, a
1613   0E10 E4            pop a
1614   0E11             ; --- END TERMS
1615   0E11 E7            pop d
1616   0E12 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1617   0E16 E4            pop a
1618   0E17 DA            push d
1619   0E18 FA 07 00      lea d, [bp + 7] ; $src
1620   0E1B FD 2A         mov d, [d]
1621   0E1D D7            push a
1622   0E1E DA            push d
1623   0E1F FA FD FF      lea d, [bp + -3] ; $i
1624   0E22 2A            mov b, [d]
1625   0E23 38 00 00      mov c, 0
1626   0E26 E7            pop d
1627   0E27 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1628   0E2B E4            pop a
1629   0E2C 32            mov bl, [d]
1630   0E2D A7 00         mov bh, 0
1631   0E2F 38 00 00      mov c, 0
1632   0E32 E7            pop d
1633   0E33 FD 3E         mov [d], bl
1634   0E35             _for23_update:
1635   0E35 FA FD FF      lea d, [bp + -3] ; $i
1636   0E38 DA            push d
1637   0E39 FA FD FF      lea d, [bp + -3] ; $i
1638   0E3C 2A            mov b, [d]
1639   0E3D 38 00 00      mov c, 0
1640   0E40             ; --- START TERMS
1641   0E40 D7            push a
1642   0E41 11            mov a, b
1643   0E42 FD 2E 01 00   mov32 cb, $00000001
1643   0E46 00 00 
1644   0E48 56            add b, a
1645   0E49 E4            pop a
1646   0E4A             ; --- END TERMS
1647   0E4A E7            pop d
1648   0E4B FD 43         mov [d], b
1649   0E4D 0A CC 0D      jmp _for23_cond
1650   0E50             _for23_exit:
1651   0E50             ; dest[dest_len + i] = 0; 
1652   0E50 FA 05 00      lea d, [bp + 5] ; $dest
1653   0E53 FD 2A         mov d, [d]
1654   0E55 D7            push a
1655   0E56 DA            push d
1656   0E57 FA FF FF      lea d, [bp + -1] ; $dest_len
1657   0E5A 2A            mov b, [d]
1658   0E5B 38 00 00      mov c, 0
1659   0E5E             ; --- START TERMS
1660   0E5E D7            push a
1661   0E5F 11            mov a, b
1662   0E60 FA FD FF      lea d, [bp + -3] ; $i
1663   0E63 2A            mov b, [d]
1664   0E64 38 00 00      mov c, 0
1665   0E67 56            add b, a
1666   0E68 E4            pop a
1667   0E69             ; --- END TERMS
1668   0E69 E7            pop d
1669   0E6A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1670   0E6E E4            pop a
1671   0E6F DA            push d
1672   0E70 FD 2E 00 00   mov32 cb, $00000000
1672   0E74 00 00 
1673   0E76 E7            pop d
1674   0E77 FD 3E         mov [d], bl
1675   0E79             ; return dest; 
1676   0E79 FA 05 00      lea d, [bp + 5] ; $dest
1677   0E7C 2A            mov b, [d]
1678   0E7D 38 00 00      mov c, 0
1679   0E80 F9            leave
1680   0E81 09            ret
1681   0E82             
1682   0E82             strlen:
1683   0E82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1684   0E85             ; int length; 
1685   0E85 52 02 00      sub sp, 2
1686   0E88             ; length = 0; 
1687   0E88 FA FF FF      lea d, [bp + -1] ; $length
1688   0E8B DA            push d
1689   0E8C FD 2E 00 00   mov32 cb, $00000000
1689   0E90 00 00 
1690   0E92 E7            pop d
1691   0E93 FD 43         mov [d], b
1692   0E95             ; while (str[length] != 0) { 
1693   0E95             _while24_cond:
1694   0E95 FA 05 00      lea d, [bp + 5] ; $str
1695   0E98 FD 2A         mov d, [d]
1696   0E9A D7            push a
1697   0E9B DA            push d
1698   0E9C FA FF FF      lea d, [bp + -1] ; $length
1699   0E9F 2A            mov b, [d]
1700   0EA0 38 00 00      mov c, 0
1701   0EA3 E7            pop d
1702   0EA4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1703   0EA8 E4            pop a
1704   0EA9 32            mov bl, [d]
1705   0EAA A7 00         mov bh, 0
1706   0EAC 38 00 00      mov c, 0
1707   0EAF             ; --- START RELATIONAL
1708   0EAF D7            push a
1709   0EB0 11            mov a, b
1710   0EB1 FD 2E 00 00   mov32 cb, $00000000
1710   0EB5 00 00 
1711   0EB7 B0            cmp a, b
1712   0EB8 FD 72         sneq ; !=
1713   0EBA E4            pop a
1714   0EBB             ; --- END RELATIONAL
1715   0EBB C0 00 00      cmp b, 0
1716   0EBE C6 D4 0E      je _while24_exit
1717   0EC1             _while24_block:
1718   0EC1             ; length++; 
1719   0EC1 FA FF FF      lea d, [bp + -1] ; $length
1720   0EC4 2A            mov b, [d]
1721   0EC5 38 00 00      mov c, 0
1722   0EC8 11            mov a, b
1723   0EC9 FD 77         inc b
1724   0ECB FA FF FF      lea d, [bp + -1] ; $length
1725   0ECE FD 43         mov [d], b
1726   0ED0 27            mov b, a
1727   0ED1 0A 95 0E      jmp _while24_cond
1728   0ED4             _while24_exit:
1729   0ED4             ; return length; 
1730   0ED4 FA FF FF      lea d, [bp + -1] ; $length
1731   0ED7 2A            mov b, [d]
1732   0ED8 38 00 00      mov c, 0
1733   0EDB F9            leave
1734   0EDC 09            ret
1735   0EDD             ; --- END TEXT SEGMENT
1736   0EDD             
1737   0EDD             ; --- BEGIN DATA SEGMENT
1738   0EDD 48 65 6C 6C _s0: .db "Hello", 0
1738   0EE1 6F 00 
1739   0EE3 57 6F 72 6C _s1: .db "World", 0
1739   0EE7 64 00 
1740   0EE9 48 69 00    _s2: .db "Hi", 0
1741   0EEC 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
1741   0EF0 70 65 63 74 
1741   0EF4 65 64 20 66 
1741   0EF8 6F 72 6D 61 
1741   0EFC 74 20 69 6E 
1741   0F00 20 70 72 69 
1741   0F04 6E 74 66 2E 
1741   0F08 00 
1742   0F09 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
1742   0F0D 72 3A 20 55 
1742   0F11 6E 6B 6E 6F 
1742   0F15 77 6E 20 61 
1742   0F19 72 67 75 6D 
1742   0F1D 65 6E 74 20 
1742   0F21 74 79 70 65 
1742   0F25 2E 0A 00 
1743   0F28             
1744   0F28 2A 0F       _heap_top: .dw _heap
1745   0F2A 00          _heap: .db 0
1746   0F2B             ; --- END DATA SEGMENT
1747   0F2B             
1748   0F2B             .end
tasm: Number of errors = 0
