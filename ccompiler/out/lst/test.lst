0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408 05 0B         syscall sys_terminate_proc
0011   040A             
0012   040A             strcpy:
0013   040A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0014   040D             ; $psrc 
0015   040D             ; $pdest 
0016   040D 52 04 00      sub sp, 4
0017   0410             ;; psrc = src; 
0018   0410 FA FF FF      lea d, [bp + -1] ; $psrc
0019   0413 DA            push d
0020   0414 FA 07 00      lea d, [bp + 7] ; $src
0021   0417 2A            mov b, [d]
0022   0418 E7            pop d
0023   0419 FD 43         mov [d], b
0024   041B             ;; pdest = dest; 
0025   041B FA FD FF      lea d, [bp + -3] ; $pdest
0026   041E DA            push d
0027   041F FA 05 00      lea d, [bp + 5] ; $dest
0028   0422 2A            mov b, [d]
0029   0423 E7            pop d
0030   0424 FD 43         mov [d], b
0031   0426             ;; while(*psrc) *pdest++ = *psrc++; 
0032   0426             _while1_cond:
0033   0426 FA FF FF      lea d, [bp + -1] ; $psrc
0034   0429 2A            mov b, [d]
0035   042A 74            mov d, b
0036   042B 32            mov bl, [d]
0037   042C A7 00         mov bh, 0
0038   042E C0 00 00      cmp b, 0
0039   0431 C6 59 04      je _while1_exit
0040   0434             _while1_block:
0041   0434             ;; *pdest++ = *psrc++; 
0042   0434 FA FD FF      lea d, [bp + -3] ; $pdest
0043   0437 2A            mov b, [d]
0044   0438 D8            push b
0045   0439 FD 77         inc b
0046   043B FA FD FF      lea d, [bp + -3] ; $pdest
0047   043E FD 43         mov [d], b
0048   0440 E5            pop b
0049   0441 D8            push b
0050   0442 FA FF FF      lea d, [bp + -1] ; $psrc
0051   0445 2A            mov b, [d]
0052   0446 D8            push b
0053   0447 FD 77         inc b
0054   0449 FA FF FF      lea d, [bp + -1] ; $psrc
0055   044C FD 43         mov [d], b
0056   044E E5            pop b
0057   044F 74            mov d, b
0058   0450 32            mov bl, [d]
0059   0451 A7 00         mov bh, 0
0060   0453 E7            pop d
0061   0454 FD 3E         mov [d], bl
0062   0456 0A 26 04      jmp _while1_cond
0063   0459             _while1_exit:
0064   0459             ;; *pdest = '\0'; 
0065   0459 FA FD FF      lea d, [bp + -3] ; $pdest
0066   045C 2A            mov b, [d]
0067   045D D8            push b
0068   045E 26 00 00      mov b, $0
0069   0461 E7            pop d
0070   0462 FD 3E         mov [d], bl
0071   0464 F9            leave
0072   0465 09            ret
0073   0466             
0074   0466             strcmp:
0075   0466 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0076   0469             ;; while (*s1 && (*s1 == *s2)) { 
0077   0469             _while2_cond:
0078   0469 FA 05 00      lea d, [bp + 5] ; $s1
0079   046C 2A            mov b, [d]
0080   046D 74            mov d, b
0081   046E 32            mov bl, [d]
0082   046F A7 00         mov bh, 0
0083   0471 D7            push a
0084   0472 11            mov a, b
0085   0473 FA 05 00      lea d, [bp + 5] ; $s1
0086   0476 2A            mov b, [d]
0087   0477 74            mov d, b
0088   0478 32            mov bl, [d]
0089   0479 A7 00         mov bh, 0
0090   047B             ; START RELATIONAL
0091   047B D7            push a
0092   047C 11            mov a, b
0093   047D FA 07 00      lea d, [bp + 7] ; $s2
0094   0480 2A            mov b, [d]
0095   0481 74            mov d, b
0096   0482 32            mov bl, [d]
0097   0483 A7 00         mov bh, 0
0098   0485 B0            cmp a, b
0099   0486 FD 71         seq ; ==
0100   0488 E4            pop a
0101   0489             ; END RELATIONAL
0102   0489 FD A7         sand a, b
0103   048B E4            pop a
0104   048C C0 00 00      cmp b, 0
0105   048F C6 AF 04      je _while2_exit
0106   0492             _while2_block:
0107   0492             ;; s1++; 
0108   0492 FA 05 00      lea d, [bp + 5] ; $s1
0109   0495 2A            mov b, [d]
0110   0496 D8            push b
0111   0497 FD 77         inc b
0112   0499 FA 05 00      lea d, [bp + 5] ; $s1
0113   049C FD 43         mov [d], b
0114   049E E5            pop b
0115   049F             ;; s2++; 
0116   049F FA 07 00      lea d, [bp + 7] ; $s2
0117   04A2 2A            mov b, [d]
0118   04A3 D8            push b
0119   04A4 FD 77         inc b
0120   04A6 FA 07 00      lea d, [bp + 7] ; $s2
0121   04A9 FD 43         mov [d], b
0122   04AB E5            pop b
0123   04AC 0A 69 04      jmp _while2_cond
0124   04AF             _while2_exit:
0125   04AF             ;; return *s1 - *s2; 
0126   04AF FA 05 00      lea d, [bp + 5] ; $s1
0127   04B2 2A            mov b, [d]
0128   04B3 74            mov d, b
0129   04B4 32            mov bl, [d]
0130   04B5 A7 00         mov bh, 0
0131   04B7             ; START TERMS
0132   04B7 D7            push a
0133   04B8 11            mov a, b
0134   04B9 FA 07 00      lea d, [bp + 7] ; $s2
0135   04BC 2A            mov b, [d]
0136   04BD 74            mov d, b
0137   04BE 32            mov bl, [d]
0138   04BF A7 00         mov bh, 0
0139   04C1 60            sub a, b
0140   04C2 27            mov b, a
0141   04C3 E4            pop a
0142   04C4             ; END TERMS
0143   04C4 F9            leave
0144   04C5 09            ret
0145   04C6             
0146   04C6             strcat:
0147   04C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0148   04C9             ; $dest_len 
0149   04C9             ; $i 
0150   04C9 52 04 00      sub sp, 4
0151   04CC             ;; dest_len = strlen(dest); 
0152   04CC FA FF FF      lea d, [bp + -1] ; $dest_len
0153   04CF DA            push d
0154   04D0 FA 05 00      lea d, [bp + 5] ; $dest
0155   04D3 2A            mov b, [d]
0156   04D4 FD AB         swp b
0157   04D6 D8            push b
0158   04D7 07 79 05      call strlen
0159   04DA 51 02 00      add sp, 2
0160   04DD E7            pop d
0161   04DE FD 43         mov [d], b
0162   04E0             ;; for (i = 0; src[i] != 0; i=i+1) { 
0163   04E0             _for3_init:
0164   04E0 FA FD FF      lea d, [bp + -3] ; $i
0165   04E3 DA            push d
0166   04E4 26 00 00      mov b, $0
0167   04E7 E7            pop d
0168   04E8 FD 43         mov [d], b
0169   04EA             _for3_cond:
0170   04EA FA 07 00      lea d, [bp + 7] ; $src
0171   04ED FD 2A         mov d, [d]
0172   04EF D7            push a
0173   04F0 DA            push d
0174   04F1 FA FD FF      lea d, [bp + -3] ; $i
0175   04F4 2A            mov b, [d]
0176   04F5 E7            pop d
0177   04F6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0178   04FA E4            pop a
0179   04FB 32            mov bl, [d]
0180   04FC A7 00         mov bh, 0
0181   04FE             ; START RELATIONAL
0182   04FE D7            push a
0183   04FF 11            mov a, b
0184   0500 26 00 00      mov b, $0
0185   0503 B0            cmp a, b
0186   0504 FD 72         sneq ; !=
0187   0506 E4            pop a
0188   0507             ; END RELATIONAL
0189   0507 C0 00 00      cmp b, 0
0190   050A C6 53 05      je _for3_exit
0191   050D             _for3_block:
0192   050D             ;; dest[dest_len + i] = src[i]; 
0193   050D FA 05 00      lea d, [bp + 5] ; $dest
0194   0510 FD 2A         mov d, [d]
0195   0512 D7            push a
0196   0513 DA            push d
0197   0514 FA FF FF      lea d, [bp + -1] ; $dest_len
0198   0517 2A            mov b, [d]
0199   0518             ; START TERMS
0200   0518 D7            push a
0201   0519 11            mov a, b
0202   051A FA FD FF      lea d, [bp + -3] ; $i
0203   051D 2A            mov b, [d]
0204   051E 56            add b, a
0205   051F E4            pop a
0206   0520             ; END TERMS
0207   0520 E7            pop d
0208   0521 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0209   0525 E4            pop a
0210   0526 DA            push d
0211   0527 FA 07 00      lea d, [bp + 7] ; $src
0212   052A FD 2A         mov d, [d]
0213   052C D7            push a
0214   052D DA            push d
0215   052E FA FD FF      lea d, [bp + -3] ; $i
0216   0531 2A            mov b, [d]
0217   0532 E7            pop d
0218   0533 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0219   0537 E4            pop a
0220   0538 32            mov bl, [d]
0221   0539 A7 00         mov bh, 0
0222   053B E7            pop d
0223   053C FD 3E         mov [d], bl
0224   053E             _for3_update:
0225   053E FA FD FF      lea d, [bp + -3] ; $i
0226   0541 DA            push d
0227   0542 FA FD FF      lea d, [bp + -3] ; $i
0228   0545 2A            mov b, [d]
0229   0546             ; START TERMS
0230   0546 D7            push a
0231   0547 11            mov a, b
0232   0548 26 01 00      mov b, $1
0233   054B 56            add b, a
0234   054C E4            pop a
0235   054D             ; END TERMS
0236   054D E7            pop d
0237   054E FD 43         mov [d], b
0238   0550 0A EA 04      jmp _for3_cond
0239   0553             _for3_exit:
0240   0553             ;; dest[dest_len + i] = 0; 
0241   0553 FA 05 00      lea d, [bp + 5] ; $dest
0242   0556 FD 2A         mov d, [d]
0243   0558 D7            push a
0244   0559 DA            push d
0245   055A FA FF FF      lea d, [bp + -1] ; $dest_len
0246   055D 2A            mov b, [d]
0247   055E             ; START TERMS
0248   055E D7            push a
0249   055F 11            mov a, b
0250   0560 FA FD FF      lea d, [bp + -3] ; $i
0251   0563 2A            mov b, [d]
0252   0564 56            add b, a
0253   0565 E4            pop a
0254   0566             ; END TERMS
0255   0566 E7            pop d
0256   0567 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0257   056B E4            pop a
0258   056C DA            push d
0259   056D 26 00 00      mov b, $0
0260   0570 E7            pop d
0261   0571 FD 3E         mov [d], bl
0262   0573             ;; return dest; 
0263   0573 FA 05 00      lea d, [bp + 5] ; $dest
0264   0576 2A            mov b, [d]
0265   0577 F9            leave
0266   0578 09            ret
0267   0579             
0268   0579             strlen:
0269   0579 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0270   057C             ; $length 
0271   057C 52 02 00      sub sp, 2
0272   057F             ;; length = 0; 
0273   057F FA FF FF      lea d, [bp + -1] ; $length
0274   0582 DA            push d
0275   0583 26 00 00      mov b, $0
0276   0586 E7            pop d
0277   0587 FD 43         mov [d], b
0278   0589             ;; while (str[length] != 0) { 
0279   0589             _while4_cond:
0280   0589 FA 05 00      lea d, [bp + 5] ; $str
0281   058C FD 2A         mov d, [d]
0282   058E D7            push a
0283   058F DA            push d
0284   0590 FA FF FF      lea d, [bp + -1] ; $length
0285   0593 2A            mov b, [d]
0286   0594 E7            pop d
0287   0595 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0288   0599 E4            pop a
0289   059A 32            mov bl, [d]
0290   059B A7 00         mov bh, 0
0291   059D             ; START RELATIONAL
0292   059D D7            push a
0293   059E 11            mov a, b
0294   059F 26 00 00      mov b, $0
0295   05A2 B0            cmp a, b
0296   05A3 FD 72         sneq ; !=
0297   05A5 E4            pop a
0298   05A6             ; END RELATIONAL
0299   05A6 C0 00 00      cmp b, 0
0300   05A9 C6 BC 05      je _while4_exit
0301   05AC             _while4_block:
0302   05AC             ;; length++; 
0303   05AC FA FF FF      lea d, [bp + -1] ; $length
0304   05AF 2A            mov b, [d]
0305   05B0 D8            push b
0306   05B1 FD 77         inc b
0307   05B3 FA FF FF      lea d, [bp + -1] ; $length
0308   05B6 FD 43         mov [d], b
0309   05B8 E5            pop b
0310   05B9 0A 89 05      jmp _while4_cond
0311   05BC             _while4_exit:
0312   05BC             ;; return length; 
0313   05BC FA FF FF      lea d, [bp + -1] ; $length
0314   05BF 2A            mov b, [d]
0315   05C0 F9            leave
0316   05C1 09            ret
0317   05C2             
0318   05C2             printf:
0319   05C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0320   05C5             ; $p 
0321   05C5             ; $format_p 
0322   05C5 52 04 00      sub sp, 4
0323   05C8             ;; format_p = format; 
0324   05C8 FA FD FF      lea d, [bp + -3] ; $format_p
0325   05CB DA            push d
0326   05CC FA 05 00      lea d, [bp + 5] ; $format
0327   05CF 2A            mov b, [d]
0328   05D0 E7            pop d
0329   05D1 FD 43         mov [d], b
0330   05D3             ;; p = &format + 2; 
0331   05D3 FA FF FF      lea d, [bp + -1] ; $p
0332   05D6 DA            push d
0333   05D7 FA 05 00      lea d, [bp + 5] ; $format
0334   05DA 2D            mov b, d
0335   05DB             ; START TERMS
0336   05DB D7            push a
0337   05DC 11            mov a, b
0338   05DD 26 02 00      mov b, $2
0339   05E0 56            add b, a
0340   05E1 E4            pop a
0341   05E2             ; END TERMS
0342   05E2 E7            pop d
0343   05E3 FD 43         mov [d], b
0344   05E5             ;; for(;;){ 
0345   05E5             _for5_init:
0346   05E5             _for5_cond:
0347   05E5             _for5_block:
0348   05E5             ;; if(!*format_p) break; 
0349   05E5             _if6_cond:
0350   05E5 FA FD FF      lea d, [bp + -3] ; $format_p
0351   05E8 2A            mov b, [d]
0352   05E9 74            mov d, b
0353   05EA 32            mov bl, [d]
0354   05EB A7 00         mov bh, 0
0355   05ED C0 00 00      cmp b, 0
0356   05F0 FD 71         seq ; !
0357   05F2 C0 00 00      cmp b, 0
0358   05F5 C6 FE 05      je _if6_else
0359   05F8             _if6_true:
0360   05F8             ;; break; 
0361   05F8 0A 07 08      jmp _for5_exit ; for break
0362   05FB 0A 04 08      jmp _if6_exit
0363   05FE             _if6_else:
0364   05FE             ;; if(*format_p == '%'){ 
0365   05FE             _if7_cond:
0366   05FE FA FD FF      lea d, [bp + -3] ; $format_p
0367   0601 2A            mov b, [d]
0368   0602 74            mov d, b
0369   0603 32            mov bl, [d]
0370   0604 A7 00         mov bh, 0
0371   0606             ; START RELATIONAL
0372   0606 D7            push a
0373   0607 11            mov a, b
0374   0608 26 25 00      mov b, $25
0375   060B B0            cmp a, b
0376   060C FD 71         seq ; ==
0377   060E E4            pop a
0378   060F             ; END RELATIONAL
0379   060F C0 00 00      cmp b, 0
0380   0612 C6 E8 07      je _if7_else
0381   0615             _if7_true:
0382   0615             ;; format_p++; 
0383   0615 FA FD FF      lea d, [bp + -3] ; $format_p
0384   0618 2A            mov b, [d]
0385   0619 D8            push b
0386   061A FD 77         inc b
0387   061C FA FD FF      lea d, [bp + -3] ; $format_p
0388   061F FD 43         mov [d], b
0389   0621 E5            pop b
0390   0622             ;; switch(*format_p){ 
0391   0622             _switch8_expr:
0392   0622 FA FD FF      lea d, [bp + -3] ; $format_p
0393   0625 2A            mov b, [d]
0394   0626 74            mov d, b
0395   0627 32            mov bl, [d]
0396   0628 A7 00         mov bh, 0
0397   062A             _switch8_comparisons:
0398   062A C1 6C         cmp bl, $6c
0399   062C C6 58 06      je _switch8_case0
0400   062F C1 4C         cmp bl, $4c
0401   0631 C6 58 06      je _switch8_case1
0402   0634 C1 64         cmp bl, $64
0403   0636 C6 28 07      je _switch8_case2
0404   0639 C1 69         cmp bl, $69
0405   063B C6 28 07      je _switch8_case3
0406   063E C1 75         cmp bl, $75
0407   0640 C6 4C 07      je _switch8_case4
0408   0643 C1 78         cmp bl, $78
0409   0645 C6 70 07      je _switch8_case5
0410   0648 C1 63         cmp bl, $63
0411   064A C6 8E 07      je _switch8_case6
0412   064D C1 73         cmp bl, $73
0413   064F C6 AD 07      je _switch8_case7
0414   0652 0A CC 07      jmp _switch8_default
0415   0655 0A D8 07      jmp _switch8_exit
0416   0658             _switch8_case0:
0417   0658             _switch8_case1:
0418   0658             ;; format_p++; 
0419   0658 FA FD FF      lea d, [bp + -3] ; $format_p
0420   065B 2A            mov b, [d]
0421   065C D8            push b
0422   065D FD 77         inc b
0423   065F FA FD FF      lea d, [bp + -3] ; $format_p
0424   0662 FD 43         mov [d], b
0425   0664 E5            pop b
0426   0665             ;; if(*format_p == 'd' || *format_p == 'i') 
0427   0665             _if9_cond:
0428   0665 FA FD FF      lea d, [bp + -3] ; $format_p
0429   0668 2A            mov b, [d]
0430   0669 74            mov d, b
0431   066A 32            mov bl, [d]
0432   066B A7 00         mov bh, 0
0433   066D             ; START RELATIONAL
0434   066D D7            push a
0435   066E 11            mov a, b
0436   066F 26 64 00      mov b, $64
0437   0672 B0            cmp a, b
0438   0673 FD 71         seq ; ==
0439   0675 E4            pop a
0440   0676             ; END RELATIONAL
0441   0676 D7            push a
0442   0677 11            mov a, b
0443   0678 FA FD FF      lea d, [bp + -3] ; $format_p
0444   067B 2A            mov b, [d]
0445   067C 74            mov d, b
0446   067D 32            mov bl, [d]
0447   067E A7 00         mov bh, 0
0448   0680             ; START RELATIONAL
0449   0680 D7            push a
0450   0681 11            mov a, b
0451   0682 26 69 00      mov b, $69
0452   0685 B0            cmp a, b
0453   0686 FD 71         seq ; ==
0454   0688 E4            pop a
0455   0689             ; END RELATIONAL
0456   0689 FD A8         sor a, b ; ||
0457   068B E4            pop a
0458   068C C0 00 00      cmp b, 0
0459   068F C6 A6 06      je _if9_else
0460   0692             _if9_true:
0461   0692             ;; print_signed_long(*(long *)p); 
0462   0692 FD 79         mov g, b
0463   0694 28            mov b, c
0464   0695 FD AB         swp b
0465   0697 D8            push b
0466   0698 FD 27         mov b, g
0467   069A FD AB         swp b
0468   069C D8            push b
0469   069D 07 14 0F      call print_signed_long
0470   06A0 51 04 00      add sp, 4
0471   06A3 0A 13 07      jmp _if9_exit
0472   06A6             _if9_else:
0473   06A6             ;; if(*format_p == 'u') 
0474   06A6             _if10_cond:
0475   06A6 FA FD FF      lea d, [bp + -3] ; $format_p
0476   06A9 2A            mov b, [d]
0477   06AA 74            mov d, b
0478   06AB 32            mov bl, [d]
0479   06AC A7 00         mov bh, 0
0480   06AE             ; START RELATIONAL
0481   06AE D7            push a
0482   06AF 11            mov a, b
0483   06B0 26 75 00      mov b, $75
0484   06B3 B0            cmp a, b
0485   06B4 FD 71         seq ; ==
0486   06B6 E4            pop a
0487   06B7             ; END RELATIONAL
0488   06B7 C0 00 00      cmp b, 0
0489   06BA C6 D1 06      je _if10_else
0490   06BD             _if10_true:
0491   06BD             ;; print_unsigned_long(*(unsigned long *)p); 
0492   06BD FD 79         mov g, b
0493   06BF 28            mov b, c
0494   06C0 FD AB         swp b
0495   06C2 D8            push b
0496   06C3 FD 27         mov b, g
0497   06C5 FD AB         swp b
0498   06C7 D8            push b
0499   06C8 07 4D 12      call print_unsigned_long
0500   06CB 51 04 00      add sp, 4
0501   06CE 0A 13 07      jmp _if10_exit
0502   06D1             _if10_else:
0503   06D1             ;; if(*format_p == 'x') 
0504   06D1             _if11_cond:
0505   06D1 FA FD FF      lea d, [bp + -3] ; $format_p
0506   06D4 2A            mov b, [d]
0507   06D5 74            mov d, b
0508   06D6 32            mov bl, [d]
0509   06D7 A7 00         mov bh, 0
0510   06D9             ; START RELATIONAL
0511   06D9 D7            push a
0512   06DA 11            mov a, b
0513   06DB 26 78 00      mov b, $78
0514   06DE B0            cmp a, b
0515   06DF FD 71         seq ; ==
0516   06E1 E4            pop a
0517   06E2             ; END RELATIONAL
0518   06E2 C0 00 00      cmp b, 0
0519   06E5 C6 07 07      je _if11_else
0520   06E8             _if11_true:
0521   06E8             ;; printx32(*(long int *)p); 
0522   06E8 FA FF FF      lea d, [bp + -1] ; $p
0523   06EB 2A            mov b, [d]
0524   06EC 74            mov d, b
0525   06ED 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0526   06F0 FD 39         mov c, b ; And place it into C
0527   06F2 2A            mov b, [d] ; Lower Word in B
0528   06F3 FD 79         mov g, b
0529   06F5 28            mov b, c
0530   06F6 FD AB         swp b
0531   06F8 D8            push b
0532   06F9 FD 27         mov b, g
0533   06FB FD AB         swp b
0534   06FD D8            push b
0535   06FE 07 9D 0C      call printx32
0536   0701 51 04 00      add sp, 4
0537   0704 0A 13 07      jmp _if11_exit
0538   0707             _if11_else:
0539   0707             ;; err("Unexpected format in printf."); 
0540   0707 26 78 19      mov b, __s0 ; "Unexpected format in printf."
0541   070A FD AB         swp b
0542   070C D8            push b
0543   070D 07 8B 0C      call err
0544   0710 51 02 00      add sp, 2
0545   0713             _if11_exit:
0546   0713             _if10_exit:
0547   0713             _if9_exit:
0548   0713             ;; p = p + 4; 
0549   0713 FA FF FF      lea d, [bp + -1] ; $p
0550   0716 DA            push d
0551   0717 FA FF FF      lea d, [bp + -1] ; $p
0552   071A 2A            mov b, [d]
0553   071B             ; START TERMS
0554   071B D7            push a
0555   071C 11            mov a, b
0556   071D 26 04 00      mov b, $4
0557   0720 56            add b, a
0558   0721 E4            pop a
0559   0722             ; END TERMS
0560   0722 E7            pop d
0561   0723 FD 43         mov [d], b
0562   0725             ;; break; 
0563   0725 0A D8 07      jmp _switch8_exit ; case break
0564   0728             _switch8_case2:
0565   0728             _switch8_case3:
0566   0728             ;; print_signed(*(int*)p); 
0567   0728 FA FF FF      lea d, [bp + -1] ; $p
0568   072B 2A            mov b, [d]
0569   072C 74            mov d, b
0570   072D 2A            mov b, [d]
0571   072E FD AB         swp b
0572   0730 D8            push b
0573   0731 07 24 0E      call print_signed
0574   0734 51 02 00      add sp, 2
0575   0737             ;; p = p + 2; 
0576   0737 FA FF FF      lea d, [bp + -1] ; $p
0577   073A DA            push d
0578   073B FA FF FF      lea d, [bp + -1] ; $p
0579   073E 2A            mov b, [d]
0580   073F             ; START TERMS
0581   073F D7            push a
0582   0740 11            mov a, b
0583   0741 26 02 00      mov b, $2
0584   0744 56            add b, a
0585   0745 E4            pop a
0586   0746             ; END TERMS
0587   0746 E7            pop d
0588   0747 FD 43         mov [d], b
0589   0749             ;; break; 
0590   0749 0A D8 07      jmp _switch8_exit ; case break
0591   074C             _switch8_case4:
0592   074C             ;; print_unsigned(*(unsigned int*)p); 
0593   074C FA FF FF      lea d, [bp + -1] ; $p
0594   074F 2A            mov b, [d]
0595   0750 74            mov d, b
0596   0751 2A            mov b, [d]
0597   0752 FD AB         swp b
0598   0754 D8            push b
0599   0755 07 45 14      call print_unsigned
0600   0758 51 02 00      add sp, 2
0601   075B             ;; p = p + 2; 
0602   075B FA FF FF      lea d, [bp + -1] ; $p
0603   075E DA            push d
0604   075F FA FF FF      lea d, [bp + -1] ; $p
0605   0762 2A            mov b, [d]
0606   0763             ; START TERMS
0607   0763 D7            push a
0608   0764 11            mov a, b
0609   0765 26 02 00      mov b, $2
0610   0768 56            add b, a
0611   0769 E4            pop a
0612   076A             ; END TERMS
0613   076A E7            pop d
0614   076B FD 43         mov [d], b
0615   076D             ;; break; 
0616   076D 0A D8 07      jmp _switch8_exit ; case break
0617   0770             _switch8_case5:
0618   0770             
0619   0770             ; --- BEGIN INLINE ASM BLOCK
0620   0770 FA FF FF      lea d, [bp + -1] ; $p
0621   0773 FD 2A         mov d, [d]
0622   0775 2A            mov b, [d]
0623   0776 07 23 18      call print_u16x
0624   0779             ; --- END INLINE ASM BLOCK
0625   0779             
0626   0779             ;; p = p + 2; 
0627   0779 FA FF FF      lea d, [bp + -1] ; $p
0628   077C DA            push d
0629   077D FA FF FF      lea d, [bp + -1] ; $p
0630   0780 2A            mov b, [d]
0631   0781             ; START TERMS
0632   0781 D7            push a
0633   0782 11            mov a, b
0634   0783 26 02 00      mov b, $2
0635   0786 56            add b, a
0636   0787 E4            pop a
0637   0788             ; END TERMS
0638   0788 E7            pop d
0639   0789 FD 43         mov [d], b
0640   078B             ;; break; 
0641   078B 0A D8 07      jmp _switch8_exit ; case break
0642   078E             _switch8_case6:
0643   078E             
0644   078E             ; --- BEGIN INLINE ASM BLOCK
0645   078E FA FF FF      lea d, [bp + -1] ; $p
0646   0791 FD 2A         mov d, [d]
0647   0793 1E            mov al, [d]
0648   0794 23            mov ah, al
0649   0795 07 81 16      call _putchar
0650   0798             ; --- END INLINE ASM BLOCK
0651   0798             
0652   0798             ;; p = p + 2; 
0653   0798 FA FF FF      lea d, [bp + -1] ; $p
0654   079B DA            push d
0655   079C FA FF FF      lea d, [bp + -1] ; $p
0656   079F 2A            mov b, [d]
0657   07A0             ; START TERMS
0658   07A0 D7            push a
0659   07A1 11            mov a, b
0660   07A2 26 02 00      mov b, $2
0661   07A5 56            add b, a
0662   07A6 E4            pop a
0663   07A7             ; END TERMS
0664   07A7 E7            pop d
0665   07A8 FD 43         mov [d], b
0666   07AA             ;; break; 
0667   07AA 0A D8 07      jmp _switch8_exit ; case break
0668   07AD             _switch8_case7:
0669   07AD             
0670   07AD             ; --- BEGIN INLINE ASM BLOCK
0671   07AD FA FF FF      lea d, [bp + -1] ; $p
0672   07B0 FD 2A         mov d, [d]
0673   07B2 FD 2A         mov d, [d]
0674   07B4 07 CB 17      call _puts
0675   07B7             ; --- END INLINE ASM BLOCK
0676   07B7             
0677   07B7             ;; p = p + 2; 
0678   07B7 FA FF FF      lea d, [bp + -1] ; $p
0679   07BA DA            push d
0680   07BB FA FF FF      lea d, [bp + -1] ; $p
0681   07BE 2A            mov b, [d]
0682   07BF             ; START TERMS
0683   07BF D7            push a
0684   07C0 11            mov a, b
0685   07C1 26 02 00      mov b, $2
0686   07C4 56            add b, a
0687   07C5 E4            pop a
0688   07C6             ; END TERMS
0689   07C6 E7            pop d
0690   07C7 FD 43         mov [d], b
0691   07C9             ;; break; 
0692   07C9 0A D8 07      jmp _switch8_exit ; case break
0693   07CC             _switch8_default:
0694   07CC             ;; print("Error: Unknown argument type.\n"); 
0695   07CC 26 95 19      mov b, __s1 ; "Error: Unknown argument type.\n"
0696   07CF FD AB         swp b
0697   07D1 D8            push b
0698   07D2 07 5D 15      call print
0699   07D5 51 02 00      add sp, 2
0700   07D8             _switch8_exit:
0701   07D8             ;; format_p++; 
0702   07D8 FA FD FF      lea d, [bp + -3] ; $format_p
0703   07DB 2A            mov b, [d]
0704   07DC D8            push b
0705   07DD FD 77         inc b
0706   07DF FA FD FF      lea d, [bp + -3] ; $format_p
0707   07E2 FD 43         mov [d], b
0708   07E4 E5            pop b
0709   07E5 0A 04 08      jmp _if7_exit
0710   07E8             _if7_else:
0711   07E8             ;; putchar(*format_p); 
0712   07E8 FA FD FF      lea d, [bp + -3] ; $format_p
0713   07EB 2A            mov b, [d]
0714   07EC 74            mov d, b
0715   07ED 32            mov bl, [d]
0716   07EE A7 00         mov bh, 0
0717   07F0 DD            push bl
0718   07F1 07 15 15      call putchar
0719   07F4 51 01 00      add sp, 1
0720   07F7             ;; format_p++; 
0721   07F7 FA FD FF      lea d, [bp + -3] ; $format_p
0722   07FA 2A            mov b, [d]
0723   07FB D8            push b
0724   07FC FD 77         inc b
0725   07FE FA FD FF      lea d, [bp + -3] ; $format_p
0726   0801 FD 43         mov [d], b
0727   0803 E5            pop b
0728   0804             _if7_exit:
0729   0804             _if6_exit:
0730   0804             _for5_update:
0731   0804 0A E5 05      jmp _for5_cond
0732   0807             _for5_exit:
0733   0807 F9            leave
0734   0808 09            ret
0735   0809             
0736   0809             sprintf:
0737   0809 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0738   080C             ; $p 
0739   080C             ; $format_p 
0740   080C 52 04 00      sub sp, 4
0741   080F             ;; format_p = format; 
0742   080F FA FD FF      lea d, [bp + -3] ; $format_p
0743   0812 DA            push d
0744   0813 FA 07 00      lea d, [bp + 7] ; $format
0745   0816 2A            mov b, [d]
0746   0817 E7            pop d
0747   0818 FD 43         mov [d], b
0748   081A             ;; p = &format + 2; 
0749   081A FA FF FF      lea d, [bp + -1] ; $p
0750   081D DA            push d
0751   081E FA 07 00      lea d, [bp + 7] ; $format
0752   0821 2D            mov b, d
0753   0822             ; START TERMS
0754   0822 D7            push a
0755   0823 11            mov a, b
0756   0824 26 02 00      mov b, $2
0757   0827 56            add b, a
0758   0828 E4            pop a
0759   0829             ; END TERMS
0760   0829 E7            pop d
0761   082A FD 43         mov [d], b
0762   082C             ;; for(;;){ 
0763   082C             _for12_init:
0764   082C             _for12_cond:
0765   082C             _for12_block:
0766   082C             ;; if(!*format_p) break; 
0767   082C             _if13_cond:
0768   082C FA FD FF      lea d, [bp + -3] ; $format_p
0769   082F 2A            mov b, [d]
0770   0830 74            mov d, b
0771   0831 32            mov bl, [d]
0772   0832 A7 00         mov bh, 0
0773   0834 C0 00 00      cmp b, 0
0774   0837 FD 71         seq ; !
0775   0839 C0 00 00      cmp b, 0
0776   083C C6 45 08      je _if13_else
0777   083F             _if13_true:
0778   083F             ;; break; 
0779   083F 0A 4E 0A      jmp _for12_exit ; for break
0780   0842 0A 4B 0A      jmp _if13_exit
0781   0845             _if13_else:
0782   0845             ;; if(*format_p == '%'){ 
0783   0845             _if14_cond:
0784   0845 FA FD FF      lea d, [bp + -3] ; $format_p
0785   0848 2A            mov b, [d]
0786   0849 74            mov d, b
0787   084A 32            mov bl, [d]
0788   084B A7 00         mov bh, 0
0789   084D             ; START RELATIONAL
0790   084D D7            push a
0791   084E 11            mov a, b
0792   084F 26 25 00      mov b, $25
0793   0852 B0            cmp a, b
0794   0853 FD 71         seq ; ==
0795   0855 E4            pop a
0796   0856             ; END RELATIONAL
0797   0856 C0 00 00      cmp b, 0
0798   0859 C6 2F 0A      je _if14_else
0799   085C             _if14_true:
0800   085C             ;; format_p++; 
0801   085C FA FD FF      lea d, [bp + -3] ; $format_p
0802   085F 2A            mov b, [d]
0803   0860 D8            push b
0804   0861 FD 77         inc b
0805   0863 FA FD FF      lea d, [bp + -3] ; $format_p
0806   0866 FD 43         mov [d], b
0807   0868 E5            pop b
0808   0869             ;; switch(*format_p){ 
0809   0869             _switch15_expr:
0810   0869 FA FD FF      lea d, [bp + -3] ; $format_p
0811   086C 2A            mov b, [d]
0812   086D 74            mov d, b
0813   086E 32            mov bl, [d]
0814   086F A7 00         mov bh, 0
0815   0871             _switch15_comparisons:
0816   0871 C1 6C         cmp bl, $6c
0817   0873 C6 9F 08      je _switch15_case0
0818   0876 C1 4C         cmp bl, $4c
0819   0878 C6 9F 08      je _switch15_case1
0820   087B C1 64         cmp bl, $64
0821   087D C6 6F 09      je _switch15_case2
0822   0880 C1 69         cmp bl, $69
0823   0882 C6 6F 09      je _switch15_case3
0824   0885 C1 75         cmp bl, $75
0825   0887 C6 93 09      je _switch15_case4
0826   088A C1 78         cmp bl, $78
0827   088C C6 B7 09      je _switch15_case5
0828   088F C1 63         cmp bl, $63
0829   0891 C6 D5 09      je _switch15_case6
0830   0894 C1 73         cmp bl, $73
0831   0896 C6 F4 09      je _switch15_case7
0832   0899 0A 13 0A      jmp _switch15_default
0833   089C 0A 1F 0A      jmp _switch15_exit
0834   089F             _switch15_case0:
0835   089F             _switch15_case1:
0836   089F             ;; format_p++; 
0837   089F FA FD FF      lea d, [bp + -3] ; $format_p
0838   08A2 2A            mov b, [d]
0839   08A3 D8            push b
0840   08A4 FD 77         inc b
0841   08A6 FA FD FF      lea d, [bp + -3] ; $format_p
0842   08A9 FD 43         mov [d], b
0843   08AB E5            pop b
0844   08AC             ;; if(*format_p == 'd' || *format_p == 'i') 
0845   08AC             _if16_cond:
0846   08AC FA FD FF      lea d, [bp + -3] ; $format_p
0847   08AF 2A            mov b, [d]
0848   08B0 74            mov d, b
0849   08B1 32            mov bl, [d]
0850   08B2 A7 00         mov bh, 0
0851   08B4             ; START RELATIONAL
0852   08B4 D7            push a
0853   08B5 11            mov a, b
0854   08B6 26 64 00      mov b, $64
0855   08B9 B0            cmp a, b
0856   08BA FD 71         seq ; ==
0857   08BC E4            pop a
0858   08BD             ; END RELATIONAL
0859   08BD D7            push a
0860   08BE 11            mov a, b
0861   08BF FA FD FF      lea d, [bp + -3] ; $format_p
0862   08C2 2A            mov b, [d]
0863   08C3 74            mov d, b
0864   08C4 32            mov bl, [d]
0865   08C5 A7 00         mov bh, 0
0866   08C7             ; START RELATIONAL
0867   08C7 D7            push a
0868   08C8 11            mov a, b
0869   08C9 26 69 00      mov b, $69
0870   08CC B0            cmp a, b
0871   08CD FD 71         seq ; ==
0872   08CF E4            pop a
0873   08D0             ; END RELATIONAL
0874   08D0 FD A8         sor a, b ; ||
0875   08D2 E4            pop a
0876   08D3 C0 00 00      cmp b, 0
0877   08D6 C6 ED 08      je _if16_else
0878   08D9             _if16_true:
0879   08D9             ;; print_signed_long(*(long *)p); 
0880   08D9 FD 79         mov g, b
0881   08DB 28            mov b, c
0882   08DC FD AB         swp b
0883   08DE D8            push b
0884   08DF FD 27         mov b, g
0885   08E1 FD AB         swp b
0886   08E3 D8            push b
0887   08E4 07 14 0F      call print_signed_long
0888   08E7 51 04 00      add sp, 4
0889   08EA 0A 5A 09      jmp _if16_exit
0890   08ED             _if16_else:
0891   08ED             ;; if(*format_p == 'u') 
0892   08ED             _if17_cond:
0893   08ED FA FD FF      lea d, [bp + -3] ; $format_p
0894   08F0 2A            mov b, [d]
0895   08F1 74            mov d, b
0896   08F2 32            mov bl, [d]
0897   08F3 A7 00         mov bh, 0
0898   08F5             ; START RELATIONAL
0899   08F5 D7            push a
0900   08F6 11            mov a, b
0901   08F7 26 75 00      mov b, $75
0902   08FA B0            cmp a, b
0903   08FB FD 71         seq ; ==
0904   08FD E4            pop a
0905   08FE             ; END RELATIONAL
0906   08FE C0 00 00      cmp b, 0
0907   0901 C6 18 09      je _if17_else
0908   0904             _if17_true:
0909   0904             ;; print_unsigned_long(*(unsigned long *)p); 
0910   0904 FD 79         mov g, b
0911   0906 28            mov b, c
0912   0907 FD AB         swp b
0913   0909 D8            push b
0914   090A FD 27         mov b, g
0915   090C FD AB         swp b
0916   090E D8            push b
0917   090F 07 4D 12      call print_unsigned_long
0918   0912 51 04 00      add sp, 4
0919   0915 0A 5A 09      jmp _if17_exit
0920   0918             _if17_else:
0921   0918             ;; if(*format_p == 'x') 
0922   0918             _if18_cond:
0923   0918 FA FD FF      lea d, [bp + -3] ; $format_p
0924   091B 2A            mov b, [d]
0925   091C 74            mov d, b
0926   091D 32            mov bl, [d]
0927   091E A7 00         mov bh, 0
0928   0920             ; START RELATIONAL
0929   0920 D7            push a
0930   0921 11            mov a, b
0931   0922 26 78 00      mov b, $78
0932   0925 B0            cmp a, b
0933   0926 FD 71         seq ; ==
0934   0928 E4            pop a
0935   0929             ; END RELATIONAL
0936   0929 C0 00 00      cmp b, 0
0937   092C C6 4E 09      je _if18_else
0938   092F             _if18_true:
0939   092F             ;; printx32(*(long int *)p); 
0940   092F FA FF FF      lea d, [bp + -1] ; $p
0941   0932 2A            mov b, [d]
0942   0933 74            mov d, b
0943   0934 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0944   0937 FD 39         mov c, b ; And place it into C
0945   0939 2A            mov b, [d] ; Lower Word in B
0946   093A FD 79         mov g, b
0947   093C 28            mov b, c
0948   093D FD AB         swp b
0949   093F D8            push b
0950   0940 FD 27         mov b, g
0951   0942 FD AB         swp b
0952   0944 D8            push b
0953   0945 07 9D 0C      call printx32
0954   0948 51 04 00      add sp, 4
0955   094B 0A 5A 09      jmp _if18_exit
0956   094E             _if18_else:
0957   094E             ;; err("Unexpected format in printf."); 
0958   094E 26 78 19      mov b, __s0 ; "Unexpected format in printf."
0959   0951 FD AB         swp b
0960   0953 D8            push b
0961   0954 07 8B 0C      call err
0962   0957 51 02 00      add sp, 2
0963   095A             _if18_exit:
0964   095A             _if17_exit:
0965   095A             _if16_exit:
0966   095A             ;; p = p + 4; 
0967   095A FA FF FF      lea d, [bp + -1] ; $p
0968   095D DA            push d
0969   095E FA FF FF      lea d, [bp + -1] ; $p
0970   0961 2A            mov b, [d]
0971   0962             ; START TERMS
0972   0962 D7            push a
0973   0963 11            mov a, b
0974   0964 26 04 00      mov b, $4
0975   0967 56            add b, a
0976   0968 E4            pop a
0977   0969             ; END TERMS
0978   0969 E7            pop d
0979   096A FD 43         mov [d], b
0980   096C             ;; break; 
0981   096C 0A 1F 0A      jmp _switch15_exit ; case break
0982   096F             _switch15_case2:
0983   096F             _switch15_case3:
0984   096F             ;; print_signed(*(int*)p); 
0985   096F FA FF FF      lea d, [bp + -1] ; $p
0986   0972 2A            mov b, [d]
0987   0973 74            mov d, b
0988   0974 2A            mov b, [d]
0989   0975 FD AB         swp b
0990   0977 D8            push b
0991   0978 07 24 0E      call print_signed
0992   097B 51 02 00      add sp, 2
0993   097E             ;; p = p + 2; 
0994   097E FA FF FF      lea d, [bp + -1] ; $p
0995   0981 DA            push d
0996   0982 FA FF FF      lea d, [bp + -1] ; $p
0997   0985 2A            mov b, [d]
0998   0986             ; START TERMS
0999   0986 D7            push a
1000   0987 11            mov a, b
1001   0988 26 02 00      mov b, $2
1002   098B 56            add b, a
1003   098C E4            pop a
1004   098D             ; END TERMS
1005   098D E7            pop d
1006   098E FD 43         mov [d], b
1007   0990             ;; break; 
1008   0990 0A 1F 0A      jmp _switch15_exit ; case break
1009   0993             _switch15_case4:
1010   0993             ;; print_unsigned(*(unsigned int*)p); 
1011   0993 FA FF FF      lea d, [bp + -1] ; $p
1012   0996 2A            mov b, [d]
1013   0997 74            mov d, b
1014   0998 2A            mov b, [d]
1015   0999 FD AB         swp b
1016   099B D8            push b
1017   099C 07 45 14      call print_unsigned
1018   099F 51 02 00      add sp, 2
1019   09A2             ;; p = p + 2; 
1020   09A2 FA FF FF      lea d, [bp + -1] ; $p
1021   09A5 DA            push d
1022   09A6 FA FF FF      lea d, [bp + -1] ; $p
1023   09A9 2A            mov b, [d]
1024   09AA             ; START TERMS
1025   09AA D7            push a
1026   09AB 11            mov a, b
1027   09AC 26 02 00      mov b, $2
1028   09AF 56            add b, a
1029   09B0 E4            pop a
1030   09B1             ; END TERMS
1031   09B1 E7            pop d
1032   09B2 FD 43         mov [d], b
1033   09B4             ;; break; 
1034   09B4 0A 1F 0A      jmp _switch15_exit ; case break
1035   09B7             _switch15_case5:
1036   09B7             
1037   09B7             ; --- BEGIN INLINE ASM BLOCK
1038   09B7 FA FF FF      lea d, [bp + -1] ; $p
1039   09BA FD 2A         mov d, [d]
1040   09BC 2A            mov b, [d]
1041   09BD 07 23 18      call print_u16x
1042   09C0             ; --- END INLINE ASM BLOCK
1043   09C0             
1044   09C0             ;; p = p + 2; 
1045   09C0 FA FF FF      lea d, [bp + -1] ; $p
1046   09C3 DA            push d
1047   09C4 FA FF FF      lea d, [bp + -1] ; $p
1048   09C7 2A            mov b, [d]
1049   09C8             ; START TERMS
1050   09C8 D7            push a
1051   09C9 11            mov a, b
1052   09CA 26 02 00      mov b, $2
1053   09CD 56            add b, a
1054   09CE E4            pop a
1055   09CF             ; END TERMS
1056   09CF E7            pop d
1057   09D0 FD 43         mov [d], b
1058   09D2             ;; break; 
1059   09D2 0A 1F 0A      jmp _switch15_exit ; case break
1060   09D5             _switch15_case6:
1061   09D5             
1062   09D5             ; --- BEGIN INLINE ASM BLOCK
1063   09D5 FA FF FF      lea d, [bp + -1] ; $p
1064   09D8 FD 2A         mov d, [d]
1065   09DA 1E            mov al, [d]
1066   09DB 23            mov ah, al
1067   09DC 07 81 16      call _putchar
1068   09DF             ; --- END INLINE ASM BLOCK
1069   09DF             
1070   09DF             ;; p = p + 2; 
1071   09DF FA FF FF      lea d, [bp + -1] ; $p
1072   09E2 DA            push d
1073   09E3 FA FF FF      lea d, [bp + -1] ; $p
1074   09E6 2A            mov b, [d]
1075   09E7             ; START TERMS
1076   09E7 D7            push a
1077   09E8 11            mov a, b
1078   09E9 26 02 00      mov b, $2
1079   09EC 56            add b, a
1080   09ED E4            pop a
1081   09EE             ; END TERMS
1082   09EE E7            pop d
1083   09EF FD 43         mov [d], b
1084   09F1             ;; break; 
1085   09F1 0A 1F 0A      jmp _switch15_exit ; case break
1086   09F4             _switch15_case7:
1087   09F4             
1088   09F4             ; --- BEGIN INLINE ASM BLOCK
1089   09F4 FA FF FF      lea d, [bp + -1] ; $p
1090   09F7 FD 2A         mov d, [d]
1091   09F9 FD 2A         mov d, [d]
1092   09FB 07 CB 17      call _puts
1093   09FE             ; --- END INLINE ASM BLOCK
1094   09FE             
1095   09FE             ;; p = p + 2; 
1096   09FE FA FF FF      lea d, [bp + -1] ; $p
1097   0A01 DA            push d
1098   0A02 FA FF FF      lea d, [bp + -1] ; $p
1099   0A05 2A            mov b, [d]
1100   0A06             ; START TERMS
1101   0A06 D7            push a
1102   0A07 11            mov a, b
1103   0A08 26 02 00      mov b, $2
1104   0A0B 56            add b, a
1105   0A0C E4            pop a
1106   0A0D             ; END TERMS
1107   0A0D E7            pop d
1108   0A0E FD 43         mov [d], b
1109   0A10             ;; break; 
1110   0A10 0A 1F 0A      jmp _switch15_exit ; case break
1111   0A13             _switch15_default:
1112   0A13             ;; print("Error: Unknown argument type.\n"); 
1113   0A13 26 95 19      mov b, __s1 ; "Error: Unknown argument type.\n"
1114   0A16 FD AB         swp b
1115   0A18 D8            push b
1116   0A19 07 5D 15      call print
1117   0A1C 51 02 00      add sp, 2
1118   0A1F             _switch15_exit:
1119   0A1F             ;; format_p++; 
1120   0A1F FA FD FF      lea d, [bp + -3] ; $format_p
1121   0A22 2A            mov b, [d]
1122   0A23 D8            push b
1123   0A24 FD 77         inc b
1124   0A26 FA FD FF      lea d, [bp + -3] ; $format_p
1125   0A29 FD 43         mov [d], b
1126   0A2B E5            pop b
1127   0A2C 0A 4B 0A      jmp _if14_exit
1128   0A2F             _if14_else:
1129   0A2F             ;; putchar(*format_p); 
1130   0A2F FA FD FF      lea d, [bp + -3] ; $format_p
1131   0A32 2A            mov b, [d]
1132   0A33 74            mov d, b
1133   0A34 32            mov bl, [d]
1134   0A35 A7 00         mov bh, 0
1135   0A37 DD            push bl
1136   0A38 07 15 15      call putchar
1137   0A3B 51 01 00      add sp, 1
1138   0A3E             ;; format_p++; 
1139   0A3E FA FD FF      lea d, [bp + -3] ; $format_p
1140   0A41 2A            mov b, [d]
1141   0A42 D8            push b
1142   0A43 FD 77         inc b
1143   0A45 FA FD FF      lea d, [bp + -3] ; $format_p
1144   0A48 FD 43         mov [d], b
1145   0A4A E5            pop b
1146   0A4B             _if14_exit:
1147   0A4B             _if13_exit:
1148   0A4B             _for12_update:
1149   0A4B 0A 2C 08      jmp _for12_cond
1150   0A4E             _for12_exit:
1151   0A4E F9            leave
1152   0A4F 09            ret
1153   0A50             
1154   0A50             scanf:
1155   0A50 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1156   0A53             ; $p 
1157   0A53             ; $format_p 
1158   0A53             ; $c 
1159   0A53             ; $i 
1160   0A53             ; $input_string 
1161   0A53 52 07 02      sub sp, 519
1162   0A56             ;; format_p = format; 
1163   0A56 FA FD FF      lea d, [bp + -3] ; $format_p
1164   0A59 DA            push d
1165   0A5A FA 05 00      lea d, [bp + 5] ; $format
1166   0A5D 2A            mov b, [d]
1167   0A5E E7            pop d
1168   0A5F FD 43         mov [d], b
1169   0A61             ;; p = &format + 2; 
1170   0A61 FA FF FF      lea d, [bp + -1] ; $p
1171   0A64 DA            push d
1172   0A65 FA 05 00      lea d, [bp + 5] ; $format
1173   0A68 2D            mov b, d
1174   0A69             ; START TERMS
1175   0A69 D7            push a
1176   0A6A 11            mov a, b
1177   0A6B 26 02 00      mov b, $2
1178   0A6E 56            add b, a
1179   0A6F E4            pop a
1180   0A70             ; END TERMS
1181   0A70 E7            pop d
1182   0A71 FD 43         mov [d], b
1183   0A73             ;; for(;;){ 
1184   0A73             _for19_init:
1185   0A73             _for19_cond:
1186   0A73             _for19_block:
1187   0A73             ;; if(!*format_p) break; 
1188   0A73             _if20_cond:
1189   0A73 FA FD FF      lea d, [bp + -3] ; $format_p
1190   0A76 2A            mov b, [d]
1191   0A77 74            mov d, b
1192   0A78 32            mov bl, [d]
1193   0A79 A7 00         mov bh, 0
1194   0A7B C0 00 00      cmp b, 0
1195   0A7E FD 71         seq ; !
1196   0A80 C0 00 00      cmp b, 0
1197   0A83 C6 8C 0A      je _if20_else
1198   0A86             _if20_true:
1199   0A86             ;; break; 
1200   0A86 0A 89 0C      jmp _for19_exit ; for break
1201   0A89 0A 86 0C      jmp _if20_exit
1202   0A8C             _if20_else:
1203   0A8C             ;; if(*format_p == '%'){ 
1204   0A8C             _if21_cond:
1205   0A8C FA FD FF      lea d, [bp + -3] ; $format_p
1206   0A8F 2A            mov b, [d]
1207   0A90 74            mov d, b
1208   0A91 32            mov bl, [d]
1209   0A92 A7 00         mov bh, 0
1210   0A94             ; START RELATIONAL
1211   0A94 D7            push a
1212   0A95 11            mov a, b
1213   0A96 26 25 00      mov b, $25
1214   0A99 B0            cmp a, b
1215   0A9A FD 71         seq ; ==
1216   0A9C E4            pop a
1217   0A9D             ; END RELATIONAL
1218   0A9D C0 00 00      cmp b, 0
1219   0AA0 C6 6A 0C      je _if21_else
1220   0AA3             _if21_true:
1221   0AA3             ;; format_p++; 
1222   0AA3 FA FD FF      lea d, [bp + -3] ; $format_p
1223   0AA6 2A            mov b, [d]
1224   0AA7 D8            push b
1225   0AA8 FD 77         inc b
1226   0AAA FA FD FF      lea d, [bp + -3] ; $format_p
1227   0AAD FD 43         mov [d], b
1228   0AAF E5            pop b
1229   0AB0             ;; switch(*format_p){ 
1230   0AB0             _switch22_expr:
1231   0AB0 FA FD FF      lea d, [bp + -3] ; $format_p
1232   0AB3 2A            mov b, [d]
1233   0AB4 74            mov d, b
1234   0AB5 32            mov bl, [d]
1235   0AB6 A7 00         mov bh, 0
1236   0AB8             _switch22_comparisons:
1237   0AB8 C1 6C         cmp bl, $6c
1238   0ABA C6 E6 0A      je _switch22_case0
1239   0ABD C1 4C         cmp bl, $4c
1240   0ABF C6 E6 0A      je _switch22_case1
1241   0AC2 C1 64         cmp bl, $64
1242   0AC4 C6 78 0B      je _switch22_case2
1243   0AC7 C1 69         cmp bl, $69
1244   0AC9 C6 78 0B      je _switch22_case3
1245   0ACC C1 75         cmp bl, $75
1246   0ACE C6 A5 0B      je _switch22_case4
1247   0AD1 C1 78         cmp bl, $78
1248   0AD3 C6 D2 0B      je _switch22_case5
1249   0AD6 C1 63         cmp bl, $63
1250   0AD8 C6 E7 0B      je _switch22_case6
1251   0ADB C1 73         cmp bl, $73
1252   0ADD C6 16 0C      je _switch22_case7
1253   0AE0 0A 4E 0C      jmp _switch22_default
1254   0AE3 0A 5A 0C      jmp _switch22_exit
1255   0AE6             _switch22_case0:
1256   0AE6             _switch22_case1:
1257   0AE6             ;; format_p++; 
1258   0AE6 FA FD FF      lea d, [bp + -3] ; $format_p
1259   0AE9 2A            mov b, [d]
1260   0AEA D8            push b
1261   0AEB FD 77         inc b
1262   0AED FA FD FF      lea d, [bp + -3] ; $format_p
1263   0AF0 FD 43         mov [d], b
1264   0AF2 E5            pop b
1265   0AF3             ;; if(*format_p == 'd' || *format_p == 'i'); 
1266   0AF3             _if23_cond:
1267   0AF3 FA FD FF      lea d, [bp + -3] ; $format_p
1268   0AF6 2A            mov b, [d]
1269   0AF7 74            mov d, b
1270   0AF8 32            mov bl, [d]
1271   0AF9 A7 00         mov bh, 0
1272   0AFB             ; START RELATIONAL
1273   0AFB D7            push a
1274   0AFC 11            mov a, b
1275   0AFD 26 64 00      mov b, $64
1276   0B00 B0            cmp a, b
1277   0B01 FD 71         seq ; ==
1278   0B03 E4            pop a
1279   0B04             ; END RELATIONAL
1280   0B04 D7            push a
1281   0B05 11            mov a, b
1282   0B06 FA FD FF      lea d, [bp + -3] ; $format_p
1283   0B09 2A            mov b, [d]
1284   0B0A 74            mov d, b
1285   0B0B 32            mov bl, [d]
1286   0B0C A7 00         mov bh, 0
1287   0B0E             ; START RELATIONAL
1288   0B0E D7            push a
1289   0B0F 11            mov a, b
1290   0B10 26 69 00      mov b, $69
1291   0B13 B0            cmp a, b
1292   0B14 FD 71         seq ; ==
1293   0B16 E4            pop a
1294   0B17             ; END RELATIONAL
1295   0B17 FD A8         sor a, b ; ||
1296   0B19 E4            pop a
1297   0B1A C0 00 00      cmp b, 0
1298   0B1D C6 23 0B      je _if23_else
1299   0B20             _if23_true:
1300   0B20             ;; ; 
1301   0B20 0A 63 0B      jmp _if23_exit
1302   0B23             _if23_else:
1303   0B23             ;; if(*format_p == 'u'); 
1304   0B23             _if24_cond:
1305   0B23 FA FD FF      lea d, [bp + -3] ; $format_p
1306   0B26 2A            mov b, [d]
1307   0B27 74            mov d, b
1308   0B28 32            mov bl, [d]
1309   0B29 A7 00         mov bh, 0
1310   0B2B             ; START RELATIONAL
1311   0B2B D7            push a
1312   0B2C 11            mov a, b
1313   0B2D 26 75 00      mov b, $75
1314   0B30 B0            cmp a, b
1315   0B31 FD 71         seq ; ==
1316   0B33 E4            pop a
1317   0B34             ; END RELATIONAL
1318   0B34 C0 00 00      cmp b, 0
1319   0B37 C6 3D 0B      je _if24_else
1320   0B3A             _if24_true:
1321   0B3A             ;; ; 
1322   0B3A 0A 63 0B      jmp _if24_exit
1323   0B3D             _if24_else:
1324   0B3D             ;; if(*format_p == 'x'); 
1325   0B3D             _if25_cond:
1326   0B3D FA FD FF      lea d, [bp + -3] ; $format_p
1327   0B40 2A            mov b, [d]
1328   0B41 74            mov d, b
1329   0B42 32            mov bl, [d]
1330   0B43 A7 00         mov bh, 0
1331   0B45             ; START RELATIONAL
1332   0B45 D7            push a
1333   0B46 11            mov a, b
1334   0B47 26 78 00      mov b, $78
1335   0B4A B0            cmp a, b
1336   0B4B FD 71         seq ; ==
1337   0B4D E4            pop a
1338   0B4E             ; END RELATIONAL
1339   0B4E C0 00 00      cmp b, 0
1340   0B51 C6 57 0B      je _if25_else
1341   0B54             _if25_true:
1342   0B54             ;; ; 
1343   0B54 0A 63 0B      jmp _if25_exit
1344   0B57             _if25_else:
1345   0B57             ;; err("Unexpected format in printf."); 
1346   0B57 26 78 19      mov b, __s0 ; "Unexpected format in printf."
1347   0B5A FD AB         swp b
1348   0B5C D8            push b
1349   0B5D 07 8B 0C      call err
1350   0B60 51 02 00      add sp, 2
1351   0B63             _if25_exit:
1352   0B63             _if24_exit:
1353   0B63             _if23_exit:
1354   0B63             ;; p = p + 4; 
1355   0B63 FA FF FF      lea d, [bp + -1] ; $p
1356   0B66 DA            push d
1357   0B67 FA FF FF      lea d, [bp + -1] ; $p
1358   0B6A 2A            mov b, [d]
1359   0B6B             ; START TERMS
1360   0B6B D7            push a
1361   0B6C 11            mov a, b
1362   0B6D 26 04 00      mov b, $4
1363   0B70 56            add b, a
1364   0B71 E4            pop a
1365   0B72             ; END TERMS
1366   0B72 E7            pop d
1367   0B73 FD 43         mov [d], b
1368   0B75             ;; break; 
1369   0B75 0A 5A 0C      jmp _switch22_exit ; case break
1370   0B78             _switch22_case2:
1371   0B78             _switch22_case3:
1372   0B78             ;; i = scann(); 
1373   0B78 FA FA FF      lea d, [bp + -6] ; $i
1374   0B7B DA            push d
1375   0B7C 07 38 15      call scann
1376   0B7F E7            pop d
1377   0B80 FD 43         mov [d], b
1378   0B82             ;; **(int **)p = i; 
1379   0B82 FA FF FF      lea d, [bp + -1] ; $p
1380   0B85 2A            mov b, [d]
1381   0B86 74            mov d, b
1382   0B87 2A            mov b, [d]
1383   0B88 D8            push b
1384   0B89 FA FA FF      lea d, [bp + -6] ; $i
1385   0B8C 2A            mov b, [d]
1386   0B8D E7            pop d
1387   0B8E FD 43         mov [d], b
1388   0B90             ;; p = p + 2; 
1389   0B90 FA FF FF      lea d, [bp + -1] ; $p
1390   0B93 DA            push d
1391   0B94 FA FF FF      lea d, [bp + -1] ; $p
1392   0B97 2A            mov b, [d]
1393   0B98             ; START TERMS
1394   0B98 D7            push a
1395   0B99 11            mov a, b
1396   0B9A 26 02 00      mov b, $2
1397   0B9D 56            add b, a
1398   0B9E E4            pop a
1399   0B9F             ; END TERMS
1400   0B9F E7            pop d
1401   0BA0 FD 43         mov [d], b
1402   0BA2             ;; break; 
1403   0BA2 0A 5A 0C      jmp _switch22_exit ; case break
1404   0BA5             _switch22_case4:
1405   0BA5             ;; i = scann(); 
1406   0BA5 FA FA FF      lea d, [bp + -6] ; $i
1407   0BA8 DA            push d
1408   0BA9 07 38 15      call scann
1409   0BAC E7            pop d
1410   0BAD FD 43         mov [d], b
1411   0BAF             ;; **(int **)p = i; 
1412   0BAF FA FF FF      lea d, [bp + -1] ; $p
1413   0BB2 2A            mov b, [d]
1414   0BB3 74            mov d, b
1415   0BB4 2A            mov b, [d]
1416   0BB5 D8            push b
1417   0BB6 FA FA FF      lea d, [bp + -6] ; $i
1418   0BB9 2A            mov b, [d]
1419   0BBA E7            pop d
1420   0BBB FD 43         mov [d], b
1421   0BBD             ;; p = p + 2; 
1422   0BBD FA FF FF      lea d, [bp + -1] ; $p
1423   0BC0 DA            push d
1424   0BC1 FA FF FF      lea d, [bp + -1] ; $p
1425   0BC4 2A            mov b, [d]
1426   0BC5             ; START TERMS
1427   0BC5 D7            push a
1428   0BC6 11            mov a, b
1429   0BC7 26 02 00      mov b, $2
1430   0BCA 56            add b, a
1431   0BCB E4            pop a
1432   0BCC             ; END TERMS
1433   0BCC E7            pop d
1434   0BCD FD 43         mov [d], b
1435   0BCF             ;; break; 
1436   0BCF 0A 5A 0C      jmp _switch22_exit ; case break
1437   0BD2             _switch22_case5:
1438   0BD2             ;; p = p + 2; 
1439   0BD2 FA FF FF      lea d, [bp + -1] ; $p
1440   0BD5 DA            push d
1441   0BD6 FA FF FF      lea d, [bp + -1] ; $p
1442   0BD9 2A            mov b, [d]
1443   0BDA             ; START TERMS
1444   0BDA D7            push a
1445   0BDB 11            mov a, b
1446   0BDC 26 02 00      mov b, $2
1447   0BDF 56            add b, a
1448   0BE0 E4            pop a
1449   0BE1             ; END TERMS
1450   0BE1 E7            pop d
1451   0BE2 FD 43         mov [d], b
1452   0BE4             ;; break; 
1453   0BE4 0A 5A 0C      jmp _switch22_exit ; case break
1454   0BE7             _switch22_case6:
1455   0BE7             ;; c = getchar(); 
1456   0BE7 FA FC FF      lea d, [bp + -4] ; $c
1457   0BEA DA            push d
1458   0BEB 07 22 15      call getchar
1459   0BEE E7            pop d
1460   0BEF FD 3E         mov [d], bl
1461   0BF1             ;; **(char **)p = c; 
1462   0BF1 FA FF FF      lea d, [bp + -1] ; $p
1463   0BF4 2A            mov b, [d]
1464   0BF5 74            mov d, b
1465   0BF6 2A            mov b, [d]
1466   0BF7 D8            push b
1467   0BF8 FA FC FF      lea d, [bp + -4] ; $c
1468   0BFB 32            mov bl, [d]
1469   0BFC A7 00         mov bh, 0
1470   0BFE E7            pop d
1471   0BFF FD 43         mov [d], b
1472   0C01             ;; p = p + 2; 
1473   0C01 FA FF FF      lea d, [bp + -1] ; $p
1474   0C04 DA            push d
1475   0C05 FA FF FF      lea d, [bp + -1] ; $p
1476   0C08 2A            mov b, [d]
1477   0C09             ; START TERMS
1478   0C09 D7            push a
1479   0C0A 11            mov a, b
1480   0C0B 26 02 00      mov b, $2
1481   0C0E 56            add b, a
1482   0C0F E4            pop a
1483   0C10             ; END TERMS
1484   0C10 E7            pop d
1485   0C11 FD 43         mov [d], b
1486   0C13             ;; break; 
1487   0C13 0A 5A 0C      jmp _switch22_exit ; case break
1488   0C16             _switch22_case7:
1489   0C16             ;; gets(input_string); 
1490   0C16 FA FA FD      lea d, [bp + -518] ; $input_string
1491   0C19 2D            mov b, d
1492   0C1A FD AB         swp b
1493   0C1C D8            push b
1494   0C1D 07 0A 0E      call gets
1495   0C20 51 02 00      add sp, 2
1496   0C23             ;; strcpy(*(char **)p, input_string); 
1497   0C23 FA FA FD      lea d, [bp + -518] ; $input_string
1498   0C26 2D            mov b, d
1499   0C27 FD AB         swp b
1500   0C29 D8            push b
1501   0C2A FA FF FF      lea d, [bp + -1] ; $p
1502   0C2D 2A            mov b, [d]
1503   0C2E 74            mov d, b
1504   0C2F 2A            mov b, [d]
1505   0C30 FD AB         swp b
1506   0C32 D8            push b
1507   0C33 07 0A 04      call strcpy
1508   0C36 51 04 00      add sp, 4
1509   0C39             ;; p = p + 2; 
1510   0C39 FA FF FF      lea d, [bp + -1] ; $p
1511   0C3C DA            push d
1512   0C3D FA FF FF      lea d, [bp + -1] ; $p
1513   0C40 2A            mov b, [d]
1514   0C41             ; START TERMS
1515   0C41 D7            push a
1516   0C42 11            mov a, b
1517   0C43 26 02 00      mov b, $2
1518   0C46 56            add b, a
1519   0C47 E4            pop a
1520   0C48             ; END TERMS
1521   0C48 E7            pop d
1522   0C49 FD 43         mov [d], b
1523   0C4B             ;; break; 
1524   0C4B 0A 5A 0C      jmp _switch22_exit ; case break
1525   0C4E             _switch22_default:
1526   0C4E             ;; print("Error: Unknown argument type.\n"); 
1527   0C4E 26 95 19      mov b, __s1 ; "Error: Unknown argument type.\n"
1528   0C51 FD AB         swp b
1529   0C53 D8            push b
1530   0C54 07 5D 15      call print
1531   0C57 51 02 00      add sp, 2
1532   0C5A             _switch22_exit:
1533   0C5A             ;; format_p++; 
1534   0C5A FA FD FF      lea d, [bp + -3] ; $format_p
1535   0C5D 2A            mov b, [d]
1536   0C5E D8            push b
1537   0C5F FD 77         inc b
1538   0C61 FA FD FF      lea d, [bp + -3] ; $format_p
1539   0C64 FD 43         mov [d], b
1540   0C66 E5            pop b
1541   0C67 0A 86 0C      jmp _if21_exit
1542   0C6A             _if21_else:
1543   0C6A             ;; putchar(*format_p); 
1544   0C6A FA FD FF      lea d, [bp + -3] ; $format_p
1545   0C6D 2A            mov b, [d]
1546   0C6E 74            mov d, b
1547   0C6F 32            mov bl, [d]
1548   0C70 A7 00         mov bh, 0
1549   0C72 DD            push bl
1550   0C73 07 15 15      call putchar
1551   0C76 51 01 00      add sp, 1
1552   0C79             ;; format_p++; 
1553   0C79 FA FD FF      lea d, [bp + -3] ; $format_p
1554   0C7C 2A            mov b, [d]
1555   0C7D D8            push b
1556   0C7E FD 77         inc b
1557   0C80 FA FD FF      lea d, [bp + -3] ; $format_p
1558   0C83 FD 43         mov [d], b
1559   0C85 E5            pop b
1560   0C86             _if21_exit:
1561   0C86             _if20_exit:
1562   0C86             _for19_update:
1563   0C86 0A 73 0A      jmp _for19_cond
1564   0C89             _for19_exit:
1565   0C89 F9            leave
1566   0C8A 09            ret
1567   0C8B             
1568   0C8B             err:
1569   0C8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1570   0C8E             ;; print(e); 
1571   0C8E FA 05 00      lea d, [bp + 5] ; $e
1572   0C91 2A            mov b, [d]
1573   0C92 FD AB         swp b
1574   0C94 D8            push b
1575   0C95 07 5D 15      call print
1576   0C98 51 02 00      add sp, 2
1577   0C9B F9            leave
1578   0C9C 09            ret
1579   0C9D             
1580   0C9D             printx32:
1581   0C9D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1582   0CA0             
1583   0CA0             ; --- BEGIN INLINE ASM BLOCK
1584   0CA0 FA 05 00      lea d, [bp + 5] ; $hex
1585   0CA3 2B 02 00      mov b, [d+2]
1586   0CA6 07 23 18      call print_u16x
1587   0CA9 2A            mov b, [d]
1588   0CAA 07 23 18      call print_u16x
1589   0CAD             ; --- END INLINE ASM BLOCK
1590   0CAD             
1591   0CAD F9            leave
1592   0CAE 09            ret
1593   0CAF             
1594   0CAF             printx16:
1595   0CAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1596   0CB2             
1597   0CB2             ; --- BEGIN INLINE ASM BLOCK
1598   0CB2 FA 05 00      lea d, [bp + 5] ; $hex
1599   0CB5 2A            mov b, [d]
1600   0CB6 07 23 18      call print_u16x
1601   0CB9             ; --- END INLINE ASM BLOCK
1602   0CB9             
1603   0CB9 F9            leave
1604   0CBA 09            ret
1605   0CBB             
1606   0CBB             printx8:
1607   0CBB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1608   0CBE             
1609   0CBE             ; --- BEGIN INLINE ASM BLOCK
1610   0CBE FA 05 00      lea d, [bp + 5] ; $hex
1611   0CC1 32            mov bl, [d]
1612   0CC2 07 67 18      call print_u8x
1613   0CC5             ; --- END INLINE ASM BLOCK
1614   0CC5             
1615   0CC5 F9            leave
1616   0CC6 09            ret
1617   0CC7             
1618   0CC7             hex_str_to_int:
1619   0CC7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1620   0CCA             ; $value 
1621   0CCA 10 00 00      mov a, $0
1622   0CCD 45 FF FF      mov [bp + -1], a
1623   0CD0             ; $i 
1624   0CD0             ; $hex_char 
1625   0CD0             ; $len 
1626   0CD0 52 07 00      sub sp, 7
1627   0CD3             ;; len = strlen(hex_string); 
1628   0CD3 FA FA FF      lea d, [bp + -6] ; $len
1629   0CD6 DA            push d
1630   0CD7 FA 05 00      lea d, [bp + 5] ; $hex_string
1631   0CDA 2A            mov b, [d]
1632   0CDB FD AB         swp b
1633   0CDD D8            push b
1634   0CDE 07 79 05      call strlen
1635   0CE1 51 02 00      add sp, 2
1636   0CE4 E7            pop d
1637   0CE5 FD 43         mov [d], b
1638   0CE7             ;; for (i = 0; i < len; i++) { 
1639   0CE7             _for26_init:
1640   0CE7 FA FD FF      lea d, [bp + -3] ; $i
1641   0CEA DA            push d
1642   0CEB 26 00 00      mov b, $0
1643   0CEE E7            pop d
1644   0CEF FD 43         mov [d], b
1645   0CF1             _for26_cond:
1646   0CF1 FA FD FF      lea d, [bp + -3] ; $i
1647   0CF4 2A            mov b, [d]
1648   0CF5             ; START RELATIONAL
1649   0CF5 D7            push a
1650   0CF6 11            mov a, b
1651   0CF7 FA FA FF      lea d, [bp + -6] ; $len
1652   0CFA 2A            mov b, [d]
1653   0CFB B0            cmp a, b
1654   0CFC FD 73         slt ; < (signed)
1655   0CFE E4            pop a
1656   0CFF             ; END RELATIONAL
1657   0CFF C0 00 00      cmp b, 0
1658   0D02 C6 04 0E      je _for26_exit
1659   0D05             _for26_block:
1660   0D05             ;; hex_char = hex_string[i]; 
1661   0D05 FA FC FF      lea d, [bp + -4] ; $hex_char
1662   0D08 DA            push d
1663   0D09 FA 05 00      lea d, [bp + 5] ; $hex_string
1664   0D0C FD 2A         mov d, [d]
1665   0D0E D7            push a
1666   0D0F DA            push d
1667   0D10 FA FD FF      lea d, [bp + -3] ; $i
1668   0D13 2A            mov b, [d]
1669   0D14 E7            pop d
1670   0D15 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1671   0D19 E4            pop a
1672   0D1A 32            mov bl, [d]
1673   0D1B A7 00         mov bh, 0
1674   0D1D E7            pop d
1675   0D1E FD 3E         mov [d], bl
1676   0D20             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1677   0D20             _if27_cond:
1678   0D20 FA FC FF      lea d, [bp + -4] ; $hex_char
1679   0D23 32            mov bl, [d]
1680   0D24 A7 00         mov bh, 0
1681   0D26             ; START RELATIONAL
1682   0D26 D7            push a
1683   0D27 11            mov a, b
1684   0D28 26 61 00      mov b, $61
1685   0D2B B0            cmp a, b
1686   0D2C FD 80         sge ; >=
1687   0D2E E4            pop a
1688   0D2F             ; END RELATIONAL
1689   0D2F D7            push a
1690   0D30 11            mov a, b
1691   0D31 FA FC FF      lea d, [bp + -4] ; $hex_char
1692   0D34 32            mov bl, [d]
1693   0D35 A7 00         mov bh, 0
1694   0D37             ; START RELATIONAL
1695   0D37 D7            push a
1696   0D38 11            mov a, b
1697   0D39 26 66 00      mov b, $66
1698   0D3C B0            cmp a, b
1699   0D3D FD 73         slt ; <= (signed)
1700   0D3F E4            pop a
1701   0D40             ; END RELATIONAL
1702   0D40 FD A7         sand a, b
1703   0D42 E4            pop a
1704   0D43 C0 00 00      cmp b, 0
1705   0D46 C6 77 0D      je _if27_else
1706   0D49             _if27_true:
1707   0D49             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1708   0D49 FA FF FF      lea d, [bp + -1] ; $value
1709   0D4C DA            push d
1710   0D4D FA FF FF      lea d, [bp + -1] ; $value
1711   0D50 2A            mov b, [d]
1712   0D51             ; START FACTORS
1713   0D51 D7            push a
1714   0D52 11            mov a, b
1715   0D53 26 10 00      mov b, $10
1716   0D56 AC            mul a, b ; *
1717   0D57 11            mov a, b
1718   0D58 27            mov b, a
1719   0D59 E4            pop a
1720   0D5A             ; END FACTORS
1721   0D5A             ; START TERMS
1722   0D5A D7            push a
1723   0D5B 11            mov a, b
1724   0D5C FA FC FF      lea d, [bp + -4] ; $hex_char
1725   0D5F 32            mov bl, [d]
1726   0D60 A7 00         mov bh, 0
1727   0D62             ; START TERMS
1728   0D62 D7            push a
1729   0D63 11            mov a, b
1730   0D64 26 61 00      mov b, $61
1731   0D67 60            sub a, b
1732   0D68 27            mov b, a
1733   0D69 11            mov a, b
1734   0D6A 26 0A 00      mov b, $a
1735   0D6D 56            add b, a
1736   0D6E E4            pop a
1737   0D6F             ; END TERMS
1738   0D6F 56            add b, a
1739   0D70 E4            pop a
1740   0D71             ; END TERMS
1741   0D71 E7            pop d
1742   0D72 FD 43         mov [d], b
1743   0D74 0A F4 0D      jmp _if27_exit
1744   0D77             _if27_else:
1745   0D77             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1746   0D77             _if28_cond:
1747   0D77 FA FC FF      lea d, [bp + -4] ; $hex_char
1748   0D7A 32            mov bl, [d]
1749   0D7B A7 00         mov bh, 0
1750   0D7D             ; START RELATIONAL
1751   0D7D D7            push a
1752   0D7E 11            mov a, b
1753   0D7F 26 41 00      mov b, $41
1754   0D82 B0            cmp a, b
1755   0D83 FD 80         sge ; >=
1756   0D85 E4            pop a
1757   0D86             ; END RELATIONAL
1758   0D86 D7            push a
1759   0D87 11            mov a, b
1760   0D88 FA FC FF      lea d, [bp + -4] ; $hex_char
1761   0D8B 32            mov bl, [d]
1762   0D8C A7 00         mov bh, 0
1763   0D8E             ; START RELATIONAL
1764   0D8E D7            push a
1765   0D8F 11            mov a, b
1766   0D90 26 46 00      mov b, $46
1767   0D93 B0            cmp a, b
1768   0D94 FD 73         slt ; <= (signed)
1769   0D96 E4            pop a
1770   0D97             ; END RELATIONAL
1771   0D97 FD A7         sand a, b
1772   0D99 E4            pop a
1773   0D9A C0 00 00      cmp b, 0
1774   0D9D C6 CE 0D      je _if28_else
1775   0DA0             _if28_true:
1776   0DA0             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1777   0DA0 FA FF FF      lea d, [bp + -1] ; $value
1778   0DA3 DA            push d
1779   0DA4 FA FF FF      lea d, [bp + -1] ; $value
1780   0DA7 2A            mov b, [d]
1781   0DA8             ; START FACTORS
1782   0DA8 D7            push a
1783   0DA9 11            mov a, b
1784   0DAA 26 10 00      mov b, $10
1785   0DAD AC            mul a, b ; *
1786   0DAE 11            mov a, b
1787   0DAF 27            mov b, a
1788   0DB0 E4            pop a
1789   0DB1             ; END FACTORS
1790   0DB1             ; START TERMS
1791   0DB1 D7            push a
1792   0DB2 11            mov a, b
1793   0DB3 FA FC FF      lea d, [bp + -4] ; $hex_char
1794   0DB6 32            mov bl, [d]
1795   0DB7 A7 00         mov bh, 0
1796   0DB9             ; START TERMS
1797   0DB9 D7            push a
1798   0DBA 11            mov a, b
1799   0DBB 26 41 00      mov b, $41
1800   0DBE 60            sub a, b
1801   0DBF 27            mov b, a
1802   0DC0 11            mov a, b
1803   0DC1 26 0A 00      mov b, $a
1804   0DC4 56            add b, a
1805   0DC5 E4            pop a
1806   0DC6             ; END TERMS
1807   0DC6 56            add b, a
1808   0DC7 E4            pop a
1809   0DC8             ; END TERMS
1810   0DC8 E7            pop d
1811   0DC9 FD 43         mov [d], b
1812   0DCB 0A F4 0D      jmp _if28_exit
1813   0DCE             _if28_else:
1814   0DCE             ;; value = (value * 16) + (hex_char - '0'); 
1815   0DCE FA FF FF      lea d, [bp + -1] ; $value
1816   0DD1 DA            push d
1817   0DD2 FA FF FF      lea d, [bp + -1] ; $value
1818   0DD5 2A            mov b, [d]
1819   0DD6             ; START FACTORS
1820   0DD6 D7            push a
1821   0DD7 11            mov a, b
1822   0DD8 26 10 00      mov b, $10
1823   0DDB AC            mul a, b ; *
1824   0DDC 11            mov a, b
1825   0DDD 27            mov b, a
1826   0DDE E4            pop a
1827   0DDF             ; END FACTORS
1828   0DDF             ; START TERMS
1829   0DDF D7            push a
1830   0DE0 11            mov a, b
1831   0DE1 FA FC FF      lea d, [bp + -4] ; $hex_char
1832   0DE4 32            mov bl, [d]
1833   0DE5 A7 00         mov bh, 0
1834   0DE7             ; START TERMS
1835   0DE7 D7            push a
1836   0DE8 11            mov a, b
1837   0DE9 26 30 00      mov b, $30
1838   0DEC 60            sub a, b
1839   0DED 27            mov b, a
1840   0DEE E4            pop a
1841   0DEF             ; END TERMS
1842   0DEF 56            add b, a
1843   0DF0 E4            pop a
1844   0DF1             ; END TERMS
1845   0DF1 E7            pop d
1846   0DF2 FD 43         mov [d], b
1847   0DF4             _if28_exit:
1848   0DF4             _if27_exit:
1849   0DF4             _for26_update:
1850   0DF4 FA FD FF      lea d, [bp + -3] ; $i
1851   0DF7 2A            mov b, [d]
1852   0DF8 D8            push b
1853   0DF9 FD 77         inc b
1854   0DFB FA FD FF      lea d, [bp + -3] ; $i
1855   0DFE FD 43         mov [d], b
1856   0E00 E5            pop b
1857   0E01 0A F1 0C      jmp _for26_cond
1858   0E04             _for26_exit:
1859   0E04             ;; return value; 
1860   0E04 FA FF FF      lea d, [bp + -1] ; $value
1861   0E07 2A            mov b, [d]
1862   0E08 F9            leave
1863   0E09 09            ret
1864   0E0A             
1865   0E0A             gets:
1866   0E0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1867   0E0D             
1868   0E0D             ; --- BEGIN INLINE ASM BLOCK
1869   0E0D FA 05 00      lea d, [bp + 5] ; $s
1870   0E10 15            mov a, [d]
1871   0E11 3C            mov d, a
1872   0E12 07 88 16      call _gets
1873   0E15             ; --- END INLINE ASM BLOCK
1874   0E15             
1875   0E15             ;; return strlen(s); 
1876   0E15 FA 05 00      lea d, [bp + 5] ; $s
1877   0E18 2A            mov b, [d]
1878   0E19 FD AB         swp b
1879   0E1B D8            push b
1880   0E1C 07 79 05      call strlen
1881   0E1F 51 02 00      add sp, 2
1882   0E22 F9            leave
1883   0E23 09            ret
1884   0E24             
1885   0E24             print_signed:
1886   0E24 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1887   0E27             ; $digits 
1888   0E27             ; $i 
1889   0E27 10 00 00      mov a, $0
1890   0E2A 45 FA FF      mov [bp + -6], a
1891   0E2D 52 07 00      sub sp, 7
1892   0E30             ;; if (num < 0) { 
1893   0E30             _if29_cond:
1894   0E30 FA 05 00      lea d, [bp + 5] ; $num
1895   0E33 2A            mov b, [d]
1896   0E34             ; START RELATIONAL
1897   0E34 D7            push a
1898   0E35 11            mov a, b
1899   0E36 26 00 00      mov b, $0
1900   0E39 B0            cmp a, b
1901   0E3A FD 73         slt ; < (signed)
1902   0E3C E4            pop a
1903   0E3D             ; END RELATIONAL
1904   0E3D C0 00 00      cmp b, 0
1905   0E40 C6 5D 0E      je _if29_else
1906   0E43             _if29_true:
1907   0E43             ;; putchar('-'); 
1908   0E43 26 2D 00      mov b, $2d
1909   0E46 DD            push bl
1910   0E47 07 15 15      call putchar
1911   0E4A 51 01 00      add sp, 1
1912   0E4D             ;; num = -num; 
1913   0E4D FA 05 00      lea d, [bp + 5] ; $num
1914   0E50 DA            push d
1915   0E51 FA 05 00      lea d, [bp + 5] ; $num
1916   0E54 2A            mov b, [d]
1917   0E55 FD 97         neg b
1918   0E57 E7            pop d
1919   0E58 FD 43         mov [d], b
1920   0E5A 0A 7F 0E      jmp _if29_exit
1921   0E5D             _if29_else:
1922   0E5D             ;; if (num == 0) { 
1923   0E5D             _if30_cond:
1924   0E5D FA 05 00      lea d, [bp + 5] ; $num
1925   0E60 2A            mov b, [d]
1926   0E61             ; START RELATIONAL
1927   0E61 D7            push a
1928   0E62 11            mov a, b
1929   0E63 26 00 00      mov b, $0
1930   0E66 B0            cmp a, b
1931   0E67 FD 71         seq ; ==
1932   0E69 E4            pop a
1933   0E6A             ; END RELATIONAL
1934   0E6A C0 00 00      cmp b, 0
1935   0E6D C6 7F 0E      je _if30_exit
1936   0E70             _if30_true:
1937   0E70             ;; putchar('0'); 
1938   0E70 26 30 00      mov b, $30
1939   0E73 DD            push bl
1940   0E74 07 15 15      call putchar
1941   0E77 51 01 00      add sp, 1
1942   0E7A             ;; return; 
1943   0E7A F9            leave
1944   0E7B 09            ret
1945   0E7C 0A 7F 0E      jmp _if30_exit
1946   0E7F             _if30_exit:
1947   0E7F             _if29_exit:
1948   0E7F             ;; while (num > 0) { 
1949   0E7F             _while31_cond:
1950   0E7F FA 05 00      lea d, [bp + 5] ; $num
1951   0E82 2A            mov b, [d]
1952   0E83             ; START RELATIONAL
1953   0E83 D7            push a
1954   0E84 11            mov a, b
1955   0E85 26 00 00      mov b, $0
1956   0E88 B0            cmp a, b
1957   0E89 FD 7F         sgt ; >
1958   0E8B E4            pop a
1959   0E8C             ; END RELATIONAL
1960   0E8C C0 00 00      cmp b, 0
1961   0E8F C6 D9 0E      je _while31_exit
1962   0E92             _while31_block:
1963   0E92             ;; digits[i] = '0' + (num % 10); 
1964   0E92 FA FC FF      lea d, [bp + -4] ; $digits
1965   0E95 D7            push a
1966   0E96 DA            push d
1967   0E97 FA FA FF      lea d, [bp + -6] ; $i
1968   0E9A 2A            mov b, [d]
1969   0E9B E7            pop d
1970   0E9C 5A            add d, b
1971   0E9D E4            pop a
1972   0E9E DA            push d
1973   0E9F 26 30 00      mov b, $30
1974   0EA2             ; START TERMS
1975   0EA2 D7            push a
1976   0EA3 11            mov a, b
1977   0EA4 FA 05 00      lea d, [bp + 5] ; $num
1978   0EA7 2A            mov b, [d]
1979   0EA8             ; START FACTORS
1980   0EA8 D7            push a
1981   0EA9 11            mov a, b
1982   0EAA 26 0A 00      mov b, $a
1983   0EAD AE            div a, b ; 
1984   0EAE 11            mov a, b
1985   0EAF 27            mov b, a
1986   0EB0 E4            pop a
1987   0EB1             ; END FACTORS
1988   0EB1 56            add b, a
1989   0EB2 E4            pop a
1990   0EB3             ; END TERMS
1991   0EB3 E7            pop d
1992   0EB4 FD 3E         mov [d], bl
1993   0EB6             ;; num = num / 10; 
1994   0EB6 FA 05 00      lea d, [bp + 5] ; $num
1995   0EB9 DA            push d
1996   0EBA FA 05 00      lea d, [bp + 5] ; $num
1997   0EBD 2A            mov b, [d]
1998   0EBE             ; START FACTORS
1999   0EBE D7            push a
2000   0EBF 11            mov a, b
2001   0EC0 26 0A 00      mov b, $a
2002   0EC3 AE            div a, b
2003   0EC4 27            mov b, a
2004   0EC5 E4            pop a
2005   0EC6             ; END FACTORS
2006   0EC6 E7            pop d
2007   0EC7 FD 43         mov [d], b
2008   0EC9             ;; i++; 
2009   0EC9 FA FA FF      lea d, [bp + -6] ; $i
2010   0ECC 2A            mov b, [d]
2011   0ECD D8            push b
2012   0ECE FD 77         inc b
2013   0ED0 FA FA FF      lea d, [bp + -6] ; $i
2014   0ED3 FD 43         mov [d], b
2015   0ED5 E5            pop b
2016   0ED6 0A 7F 0E      jmp _while31_cond
2017   0ED9             _while31_exit:
2018   0ED9             ;; while (i > 0) { 
2019   0ED9             _while32_cond:
2020   0ED9 FA FA FF      lea d, [bp + -6] ; $i
2021   0EDC 2A            mov b, [d]
2022   0EDD             ; START RELATIONAL
2023   0EDD D7            push a
2024   0EDE 11            mov a, b
2025   0EDF 26 00 00      mov b, $0
2026   0EE2 B0            cmp a, b
2027   0EE3 FD 7F         sgt ; >
2028   0EE5 E4            pop a
2029   0EE6             ; END RELATIONAL
2030   0EE6 C0 00 00      cmp b, 0
2031   0EE9 C6 12 0F      je _while32_exit
2032   0EEC             _while32_block:
2033   0EEC             ;; i--; 
2034   0EEC FA FA FF      lea d, [bp + -6] ; $i
2035   0EEF 2A            mov b, [d]
2036   0EF0 D8            push b
2037   0EF1 FD 7D         dec b
2038   0EF3 FA FA FF      lea d, [bp + -6] ; $i
2039   0EF6 FD 43         mov [d], b
2040   0EF8 E5            pop b
2041   0EF9             ;; putchar(digits[i]); 
2042   0EF9 FA FC FF      lea d, [bp + -4] ; $digits
2043   0EFC D7            push a
2044   0EFD DA            push d
2045   0EFE FA FA FF      lea d, [bp + -6] ; $i
2046   0F01 2A            mov b, [d]
2047   0F02 E7            pop d
2048   0F03 5A            add d, b
2049   0F04 E4            pop a
2050   0F05 32            mov bl, [d]
2051   0F06 A7 00         mov bh, 0
2052   0F08 DD            push bl
2053   0F09 07 15 15      call putchar
2054   0F0C 51 01 00      add sp, 1
2055   0F0F 0A D9 0E      jmp _while32_cond
2056   0F12             _while32_exit:
2057   0F12 F9            leave
2058   0F13 09            ret
2059   0F14             
2060   0F14             print_signed_long:
2061   0F14 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2062   0F17             ; $digits 
2063   0F17             ; $i 
2064   0F17 10 00 00      mov a, $0
2065   0F1A 45 F5 FF      mov [bp + -11], a
2066   0F1D 52 0C 00      sub sp, 12
2067   0F20             ;; if (num < 0) { 
2068   0F20             _if33_cond:
2069   0F20 FA 05 00      lea d, [bp + 5] ; $num
2070   0F23 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2071   0F26 FD 39         mov c, b ; And place it into C
2072   0F28 2A            mov b, [d] ; Lower Word in B
2073   0F29             ; START RELATIONAL
2074   0F29 D7            push a
2075   0F2A FD D8         push g
2076   0F2C 11            mov a, b
2077   0F2D FD 7A         mov g, c
2078   0F2F 26 00 00      mov b, $0
2079   0F32 38 00 00      mov c, 0
2080   0F35 FD AF 00 00   cmp32 ga, cb
2080   0F39 00 00 00 00 
2080   0F3D 00 00 00 00 
2080   0F41 00 00 00 00 
2080   0F45 00 00 00 00 
2080   0F49 00 00 00 00 
2080   0F4D 00 00 00 00 
2080   0F51 00 00 00 00 
2080   0F55 00 00 00 00 
2080   0F59 00 00 00 00 
2080   0F5D 00 00 00 00 
2080   0F61 00 00 00 00 
2080   0F65 00 00 00 00 
2080   0F69 00 00 00 00 
2080   0F6D 00 00 00 00 
2080   0F71 00 00 00 00 
2080   0F75 00 00 00 00 
2080   0F79 00 00 00 00 
2080   0F7D 00 00 00 00 
2080   0F81 00 00 00 00 
2080   0F85 00 00 00 00 
2080   0F89 00 00 00 00 
2080   0F8D 00 00 00 00 
2080   0F91 00 00 00 00 
2080   0F95 00 00 00 00 
2080   0F99 00 00 00 00 
2080   0F9D 00 00 00 00 
2080   0FA1 00 00 00 00 
2080   0FA5 00 00 00 00 
2080   0FA9 00 00 00 00 
2080   0FAD 00 00 00 00 
2080   0FB1 00 00 00 00 
2080   0FB5 00 00 00 00 
2080   0FB9 00 00 00 00 
2080   0FBD 00 00 00 00 
2080   0FC1 00 00 00 00 
2080   0FC5 00 00 00 00 
2080   0FC9 00 00 00 00 
2080   0FCD 00 00 00 00 
2080   0FD1 00 00 00 00 
2080   0FD5 00 00 00 00 
2080   0FD9 00 00 00 00 
2080   0FDD 00 00 00 00 
2080   0FE1 00 00 00 00 
2080   0FE5 00 00 00 00 
2080   0FE9 00 00 00 00 
2080   0FED 00 00 00 00 
2080   0FF1 00 00 00 00 
2080   0FF5 00 00 00 00 
2080   0FF9 00 00 00 00 
2080   0FFD 00 00 00 00 
2080   1001 00 00 00 00 
2080   1005 00 00 00 00 
2080   1009 00 00 00 00 
2080   100D 00 00 00 00 
2080   1011 00 00 00 00 
2080   1015 00 00 00 00 
2080   1019 00 00 00 00 
2080   101D 00 00 00 00 
2080   1021 00 00 00 00 
2080   1025 00 00 00 00 
2080   1029 00 00 00 00 
2080   102D 00 00 00 00 
2080   1031 00 00 00 00 
2080   1035 00 
2081   1036 FD 73         slt ; <
2082   1038 FD F1         pop g
2083   103A E4            pop a
2084   103B             ; END RELATIONAL
2085   103B C0 00 00      cmp b, 0
2086   103E C6 65 10      je _if33_else
2087   1041             _if33_true:
2088   1041             ;; putchar('-'); 
2089   1041 26 2D 00      mov b, $2d
2090   1044 DD            push bl
2091   1045 07 15 15      call putchar
2092   1048 51 01 00      add sp, 1
2093   104B             ;; num = -num; 
2094   104B FA 05 00      lea d, [bp + 5] ; $num
2095   104E DA            push d
2096   104F FA 05 00      lea d, [bp + 5] ; $num
2097   1052 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2098   1055 FD 39         mov c, b ; And place it into C
2099   1057 2A            mov b, [d] ; Lower Word in B
2100   1058 FD 97         neg b
2101   105A E7            pop d
2102   105B FD 43         mov [d], b
2103   105D 28            mov b, c
2104   105E FD 44 02 00   mov [d + 2], b
2105   1062 0A 95 11      jmp _if33_exit
2106   1065             _if33_else:
2107   1065             ;; if (num == 0) { 
2108   1065             _if34_cond:
2109   1065 FA 05 00      lea d, [bp + 5] ; $num
2110   1068 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2111   106B FD 39         mov c, b ; And place it into C
2112   106D 2A            mov b, [d] ; Lower Word in B
2113   106E             ; START RELATIONAL
2114   106E D7            push a
2115   106F FD D8         push g
2116   1071 11            mov a, b
2117   1072 FD 7A         mov g, c
2118   1074 26 00 00      mov b, $0
2119   1077 38 00 00      mov c, 0
2120   107A FD AF 00 00   cmp32 ga, cb
2120   107E 00 00 00 00 
2120   1082 00 00 00 00 
2120   1086 00 00 00 00 
2120   108A 00 00 00 00 
2120   108E 00 00 00 00 
2120   1092 00 00 00 00 
2120   1096 00 00 00 00 
2120   109A 00 00 00 00 
2120   109E 00 00 00 00 
2120   10A2 00 00 00 00 
2120   10A6 00 00 00 00 
2120   10AA 00 00 00 00 
2120   10AE 00 00 00 00 
2120   10B2 00 00 00 00 
2120   10B6 00 00 00 00 
2120   10BA 00 00 00 00 
2120   10BE 00 00 00 00 
2120   10C2 00 00 00 00 
2120   10C6 00 00 00 00 
2120   10CA 00 00 00 00 
2120   10CE 00 00 00 00 
2120   10D2 00 00 00 00 
2120   10D6 00 00 00 00 
2120   10DA 00 00 00 00 
2120   10DE 00 00 00 00 
2120   10E2 00 00 00 00 
2120   10E6 00 00 00 00 
2120   10EA 00 00 00 00 
2120   10EE 00 00 00 00 
2120   10F2 00 00 00 00 
2120   10F6 00 00 00 00 
2120   10FA 00 00 00 00 
2120   10FE 00 00 00 00 
2120   1102 00 00 00 00 
2120   1106 00 00 00 00 
2120   110A 00 00 00 00 
2120   110E 00 00 00 00 
2120   1112 00 00 00 00 
2120   1116 00 00 00 00 
2120   111A 00 00 00 00 
2120   111E 00 00 00 00 
2120   1122 00 00 00 00 
2120   1126 00 00 00 00 
2120   112A 00 00 00 00 
2120   112E 00 00 00 00 
2120   1132 00 00 00 00 
2120   1136 00 00 00 00 
2120   113A 00 00 00 00 
2120   113E 00 00 00 00 
2120   1142 00 00 00 00 
2120   1146 00 00 00 00 
2120   114A 00 00 00 00 
2120   114E 00 00 00 00 
2120   1152 00 00 00 00 
2120   1156 00 00 00 00 
2120   115A 00 00 00 00 
2120   115E 00 00 00 00 
2120   1162 00 00 00 00 
2120   1166 00 00 00 00 
2120   116A 00 00 00 00 
2120   116E 00 00 00 00 
2120   1172 00 00 00 00 
2120   1176 00 00 00 00 
2120   117A 00 
2121   117B FD 71         seq ; ==
2122   117D FD F1         pop g
2123   117F E4            pop a
2124   1180             ; END RELATIONAL
2125   1180 C0 00 00      cmp b, 0
2126   1183 C6 95 11      je _if34_exit
2127   1186             _if34_true:
2128   1186             ;; putchar('0'); 
2129   1186 26 30 00      mov b, $30
2130   1189 DD            push bl
2131   118A 07 15 15      call putchar
2132   118D 51 01 00      add sp, 1
2133   1190             ;; return; 
2134   1190 F9            leave
2135   1191 09            ret
2136   1192 0A 95 11      jmp _if34_exit
2137   1195             _if34_exit:
2138   1195             _if33_exit:
2139   1195             ;; while (num > 0) { 
2140   1195             _while35_cond:
2141   1195 FA 05 00      lea d, [bp + 5] ; $num
2142   1198 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2143   119B FD 39         mov c, b ; And place it into C
2144   119D 2A            mov b, [d] ; Lower Word in B
2145   119E             ; START RELATIONAL
2146   119E D7            push a
2147   119F FD D8         push g
2148   11A1 11            mov a, b
2149   11A2 FD 7A         mov g, c
2150   11A4 26 00 00      mov b, $0
2151   11A7 38 00 00      mov c, 0
2152   11AA FD 7F         sgt
2153   11AC FD F1         pop g
2154   11AE E4            pop a
2155   11AF             ; END RELATIONAL
2156   11AF C0 00 00      cmp b, 0
2157   11B2 C6 12 12      je _while35_exit
2158   11B5             _while35_block:
2159   11B5             ;; digits[i] = '0' + (num % 10); 
2160   11B5 FA F7 FF      lea d, [bp + -9] ; $digits
2161   11B8 D7            push a
2162   11B9 DA            push d
2163   11BA FA F5 FF      lea d, [bp + -11] ; $i
2164   11BD 2A            mov b, [d]
2165   11BE E7            pop d
2166   11BF 5A            add d, b
2167   11C0 E4            pop a
2168   11C1 DA            push d
2169   11C2 26 30 00      mov b, $30
2170   11C5             ; START TERMS
2171   11C5 D7            push a
2172   11C6 11            mov a, b
2173   11C7 FA 05 00      lea d, [bp + 5] ; $num
2174   11CA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2175   11CD FD 39         mov c, b ; And place it into C
2176   11CF 2A            mov b, [d] ; Lower Word in B
2177   11D0             ; START FACTORS
2178   11D0 D7            push a
2179   11D1 11            mov a, b
2180   11D2 26 0A 00      mov b, $a
2181   11D5 AE            div a, b ; 
2182   11D6 11            mov a, b
2183   11D7 27            mov b, a
2184   11D8 E4            pop a
2185   11D9             ; END FACTORS
2186   11D9 54            add a, b
2187   11DA D7            push a
2188   11DB FD 12         mov a, g
2189   11DD 28            mov b, c
2190   11DE 5C            adc a, b
2191   11DF 39            mov c, a
2192   11E0 E5            pop b
2193   11E1 E4            pop a
2194   11E2             ; END TERMS
2195   11E2 E7            pop d
2196   11E3 FD 3E         mov [d], bl
2197   11E5             ;; num = num / 10; 
2198   11E5 FA 05 00      lea d, [bp + 5] ; $num
2199   11E8 DA            push d
2200   11E9 FA 05 00      lea d, [bp + 5] ; $num
2201   11EC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2202   11EF FD 39         mov c, b ; And place it into C
2203   11F1 2A            mov b, [d] ; Lower Word in B
2204   11F2             ; START FACTORS
2205   11F2 D7            push a
2206   11F3 11            mov a, b
2207   11F4 26 0A 00      mov b, $a
2208   11F7 AE            div a, b
2209   11F8 27            mov b, a
2210   11F9 E4            pop a
2211   11FA             ; END FACTORS
2212   11FA E7            pop d
2213   11FB FD 43         mov [d], b
2214   11FD 28            mov b, c
2215   11FE FD 44 02 00   mov [d + 2], b
2216   1202             ;; i++; 
2217   1202 FA F5 FF      lea d, [bp + -11] ; $i
2218   1205 2A            mov b, [d]
2219   1206 D8            push b
2220   1207 FD 77         inc b
2221   1209 FA F5 FF      lea d, [bp + -11] ; $i
2222   120C FD 43         mov [d], b
2223   120E E5            pop b
2224   120F 0A 95 11      jmp _while35_cond
2225   1212             _while35_exit:
2226   1212             ;; while (i > 0) { 
2227   1212             _while36_cond:
2228   1212 FA F5 FF      lea d, [bp + -11] ; $i
2229   1215 2A            mov b, [d]
2230   1216             ; START RELATIONAL
2231   1216 D7            push a
2232   1217 11            mov a, b
2233   1218 26 00 00      mov b, $0
2234   121B B0            cmp a, b
2235   121C FD 7F         sgt ; >
2236   121E E4            pop a
2237   121F             ; END RELATIONAL
2238   121F C0 00 00      cmp b, 0
2239   1222 C6 4B 12      je _while36_exit
2240   1225             _while36_block:
2241   1225             ;; i--; 
2242   1225 FA F5 FF      lea d, [bp + -11] ; $i
2243   1228 2A            mov b, [d]
2244   1229 D8            push b
2245   122A FD 7D         dec b
2246   122C FA F5 FF      lea d, [bp + -11] ; $i
2247   122F FD 43         mov [d], b
2248   1231 E5            pop b
2249   1232             ;; putchar(digits[i]); 
2250   1232 FA F7 FF      lea d, [bp + -9] ; $digits
2251   1235 D7            push a
2252   1236 DA            push d
2253   1237 FA F5 FF      lea d, [bp + -11] ; $i
2254   123A 2A            mov b, [d]
2255   123B E7            pop d
2256   123C 5A            add d, b
2257   123D E4            pop a
2258   123E 32            mov bl, [d]
2259   123F A7 00         mov bh, 0
2260   1241 DD            push bl
2261   1242 07 15 15      call putchar
2262   1245 51 01 00      add sp, 1
2263   1248 0A 12 12      jmp _while36_cond
2264   124B             _while36_exit:
2265   124B F9            leave
2266   124C 09            ret
2267   124D             
2268   124D             print_unsigned_long:
2269   124D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2270   1250             ; $digits 
2271   1250             ; $i 
2272   1250 52 0C 00      sub sp, 12
2273   1253             ;; i = 0; 
2274   1253 FA F5 FF      lea d, [bp + -11] ; $i
2275   1256 DA            push d
2276   1257 26 00 00      mov b, $0
2277   125A E7            pop d
2278   125B FD 43         mov [d], b
2279   125D             ;; if(num == 0){ 
2280   125D             _if37_cond:
2281   125D FA 05 00      lea d, [bp + 5] ; $num
2282   1260 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2283   1263 FD 39         mov c, b ; And place it into C
2284   1265 2A            mov b, [d] ; Lower Word in B
2285   1266             ; START RELATIONAL
2286   1266 D7            push a
2287   1267 FD D8         push g
2288   1269 11            mov a, b
2289   126A FD 7A         mov g, c
2290   126C 26 00 00      mov b, $0
2291   126F 38 00 00      mov c, 0
2292   1272 FD AF 00 00   cmp32 ga, cb
2292   1276 00 00 00 00 
2292   127A 00 00 00 00 
2292   127E 00 00 00 00 
2292   1282 00 00 00 00 
2292   1286 00 00 00 00 
2292   128A 00 00 00 00 
2292   128E 00 00 00 00 
2292   1292 00 00 00 00 
2292   1296 00 00 00 00 
2292   129A 00 00 00 00 
2292   129E 00 00 00 00 
2292   12A2 00 00 00 00 
2292   12A6 00 00 00 00 
2292   12AA 00 00 00 00 
2292   12AE 00 00 00 00 
2292   12B2 00 00 00 00 
2292   12B6 00 00 00 00 
2292   12BA 00 00 00 00 
2292   12BE 00 00 00 00 
2292   12C2 00 00 00 00 
2292   12C6 00 00 00 00 
2292   12CA 00 00 00 00 
2292   12CE 00 00 00 00 
2292   12D2 00 00 00 00 
2292   12D6 00 00 00 00 
2292   12DA 00 00 00 00 
2292   12DE 00 00 00 00 
2292   12E2 00 00 00 00 
2292   12E6 00 00 00 00 
2292   12EA 00 00 00 00 
2292   12EE 00 00 00 00 
2292   12F2 00 00 00 00 
2292   12F6 00 00 00 00 
2292   12FA 00 00 00 00 
2292   12FE 00 00 00 00 
2292   1302 00 00 00 00 
2292   1306 00 00 00 00 
2292   130A 00 00 00 00 
2292   130E 00 00 00 00 
2292   1312 00 00 00 00 
2292   1316 00 00 00 00 
2292   131A 00 00 00 00 
2292   131E 00 00 00 00 
2292   1322 00 00 00 00 
2292   1326 00 00 00 00 
2292   132A 00 00 00 00 
2292   132E 00 00 00 00 
2292   1332 00 00 00 00 
2292   1336 00 00 00 00 
2292   133A 00 00 00 00 
2292   133E 00 00 00 00 
2292   1342 00 00 00 00 
2292   1346 00 00 00 00 
2292   134A 00 00 00 00 
2292   134E 00 00 00 00 
2292   1352 00 00 00 00 
2292   1356 00 00 00 00 
2292   135A 00 00 00 00 
2292   135E 00 00 00 00 
2292   1362 00 00 00 00 
2292   1366 00 00 00 00 
2292   136A 00 00 00 00 
2292   136E 00 00 00 00 
2292   1372 00 
2293   1373 FD 71         seq ; ==
2294   1375 FD F1         pop g
2295   1377 E4            pop a
2296   1378             ; END RELATIONAL
2297   1378 C0 00 00      cmp b, 0
2298   137B C6 8D 13      je _if37_exit
2299   137E             _if37_true:
2300   137E             ;; putchar('0'); 
2301   137E 26 30 00      mov b, $30
2302   1381 DD            push bl
2303   1382 07 15 15      call putchar
2304   1385 51 01 00      add sp, 1
2305   1388             ;; return; 
2306   1388 F9            leave
2307   1389 09            ret
2308   138A 0A 8D 13      jmp _if37_exit
2309   138D             _if37_exit:
2310   138D             ;; while (num > 0) { 
2311   138D             _while38_cond:
2312   138D FA 05 00      lea d, [bp + 5] ; $num
2313   1390 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2314   1393 FD 39         mov c, b ; And place it into C
2315   1395 2A            mov b, [d] ; Lower Word in B
2316   1396             ; START RELATIONAL
2317   1396 D7            push a
2318   1397 FD D8         push g
2319   1399 11            mov a, b
2320   139A FD 7A         mov g, c
2321   139C 26 00 00      mov b, $0
2322   139F 38 00 00      mov c, 0
2323   13A2 FD 81         sgu
2324   13A4 FD F1         pop g
2325   13A6 E4            pop a
2326   13A7             ; END RELATIONAL
2327   13A7 C0 00 00      cmp b, 0
2328   13AA C6 0A 14      je _while38_exit
2329   13AD             _while38_block:
2330   13AD             ;; digits[i] = '0' + (num % 10); 
2331   13AD FA F7 FF      lea d, [bp + -9] ; $digits
2332   13B0 D7            push a
2333   13B1 DA            push d
2334   13B2 FA F5 FF      lea d, [bp + -11] ; $i
2335   13B5 2A            mov b, [d]
2336   13B6 E7            pop d
2337   13B7 5A            add d, b
2338   13B8 E4            pop a
2339   13B9 DA            push d
2340   13BA 26 30 00      mov b, $30
2341   13BD             ; START TERMS
2342   13BD D7            push a
2343   13BE 11            mov a, b
2344   13BF FA 05 00      lea d, [bp + 5] ; $num
2345   13C2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2346   13C5 FD 39         mov c, b ; And place it into C
2347   13C7 2A            mov b, [d] ; Lower Word in B
2348   13C8             ; START FACTORS
2349   13C8 D7            push a
2350   13C9 11            mov a, b
2351   13CA 26 0A 00      mov b, $a
2352   13CD AE            div a, b ; 
2353   13CE 11            mov a, b
2354   13CF 27            mov b, a
2355   13D0 E4            pop a
2356   13D1             ; END FACTORS
2357   13D1 54            add a, b
2358   13D2 D7            push a
2359   13D3 FD 12         mov a, g
2360   13D5 28            mov b, c
2361   13D6 5C            adc a, b
2362   13D7 39            mov c, a
2363   13D8 E5            pop b
2364   13D9 E4            pop a
2365   13DA             ; END TERMS
2366   13DA E7            pop d
2367   13DB FD 3E         mov [d], bl
2368   13DD             ;; num = num / 10; 
2369   13DD FA 05 00      lea d, [bp + 5] ; $num
2370   13E0 DA            push d
2371   13E1 FA 05 00      lea d, [bp + 5] ; $num
2372   13E4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2373   13E7 FD 39         mov c, b ; And place it into C
2374   13E9 2A            mov b, [d] ; Lower Word in B
2375   13EA             ; START FACTORS
2376   13EA D7            push a
2377   13EB 11            mov a, b
2378   13EC 26 0A 00      mov b, $a
2379   13EF AE            div a, b
2380   13F0 27            mov b, a
2381   13F1 E4            pop a
2382   13F2             ; END FACTORS
2383   13F2 E7            pop d
2384   13F3 FD 43         mov [d], b
2385   13F5 28            mov b, c
2386   13F6 FD 44 02 00   mov [d + 2], b
2387   13FA             ;; i++; 
2388   13FA FA F5 FF      lea d, [bp + -11] ; $i
2389   13FD 2A            mov b, [d]
2390   13FE D8            push b
2391   13FF FD 77         inc b
2392   1401 FA F5 FF      lea d, [bp + -11] ; $i
2393   1404 FD 43         mov [d], b
2394   1406 E5            pop b
2395   1407 0A 8D 13      jmp _while38_cond
2396   140A             _while38_exit:
2397   140A             ;; while (i > 0) { 
2398   140A             _while39_cond:
2399   140A FA F5 FF      lea d, [bp + -11] ; $i
2400   140D 2A            mov b, [d]
2401   140E             ; START RELATIONAL
2402   140E D7            push a
2403   140F 11            mov a, b
2404   1410 26 00 00      mov b, $0
2405   1413 B0            cmp a, b
2406   1414 FD 7F         sgt ; >
2407   1416 E4            pop a
2408   1417             ; END RELATIONAL
2409   1417 C0 00 00      cmp b, 0
2410   141A C6 43 14      je _while39_exit
2411   141D             _while39_block:
2412   141D             ;; i--; 
2413   141D FA F5 FF      lea d, [bp + -11] ; $i
2414   1420 2A            mov b, [d]
2415   1421 D8            push b
2416   1422 FD 7D         dec b
2417   1424 FA F5 FF      lea d, [bp + -11] ; $i
2418   1427 FD 43         mov [d], b
2419   1429 E5            pop b
2420   142A             ;; putchar(digits[i]); 
2421   142A FA F7 FF      lea d, [bp + -9] ; $digits
2422   142D D7            push a
2423   142E DA            push d
2424   142F FA F5 FF      lea d, [bp + -11] ; $i
2425   1432 2A            mov b, [d]
2426   1433 E7            pop d
2427   1434 5A            add d, b
2428   1435 E4            pop a
2429   1436 32            mov bl, [d]
2430   1437 A7 00         mov bh, 0
2431   1439 DD            push bl
2432   143A 07 15 15      call putchar
2433   143D 51 01 00      add sp, 1
2434   1440 0A 0A 14      jmp _while39_cond
2435   1443             _while39_exit:
2436   1443 F9            leave
2437   1444 09            ret
2438   1445             
2439   1445             print_unsigned:
2440   1445 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2441   1448             ; $digits 
2442   1448             ; $i 
2443   1448 52 07 00      sub sp, 7
2444   144B             ;; i = 0; 
2445   144B FA FA FF      lea d, [bp + -6] ; $i
2446   144E DA            push d
2447   144F 26 00 00      mov b, $0
2448   1452 E7            pop d
2449   1453 FD 43         mov [d], b
2450   1455             ;; if(num == 0){ 
2451   1455             _if40_cond:
2452   1455 FA 05 00      lea d, [bp + 5] ; $num
2453   1458 2A            mov b, [d]
2454   1459             ; START RELATIONAL
2455   1459 D7            push a
2456   145A 11            mov a, b
2457   145B 26 00 00      mov b, $0
2458   145E B0            cmp a, b
2459   145F FD 71         seq ; ==
2460   1461 E4            pop a
2461   1462             ; END RELATIONAL
2462   1462 C0 00 00      cmp b, 0
2463   1465 C6 77 14      je _if40_exit
2464   1468             _if40_true:
2465   1468             ;; putchar('0'); 
2466   1468 26 30 00      mov b, $30
2467   146B DD            push bl
2468   146C 07 15 15      call putchar
2469   146F 51 01 00      add sp, 1
2470   1472             ;; return; 
2471   1472 F9            leave
2472   1473 09            ret
2473   1474 0A 77 14      jmp _if40_exit
2474   1477             _if40_exit:
2475   1477             ;; while (num > 0) { 
2476   1477             _while41_cond:
2477   1477 FA 05 00      lea d, [bp + 5] ; $num
2478   147A 2A            mov b, [d]
2479   147B             ; START RELATIONAL
2480   147B D7            push a
2481   147C 11            mov a, b
2482   147D 26 00 00      mov b, $0
2483   1480 B0            cmp a, b
2484   1481 FD 81         sgu ; > (unsigned)
2485   1483 E4            pop a
2486   1484             ; END RELATIONAL
2487   1484 C0 00 00      cmp b, 0
2488   1487 C6 D1 14      je _while41_exit
2489   148A             _while41_block:
2490   148A             ;; digits[i] = '0' + (num % 10); 
2491   148A FA FC FF      lea d, [bp + -4] ; $digits
2492   148D D7            push a
2493   148E DA            push d
2494   148F FA FA FF      lea d, [bp + -6] ; $i
2495   1492 2A            mov b, [d]
2496   1493 E7            pop d
2497   1494 5A            add d, b
2498   1495 E4            pop a
2499   1496 DA            push d
2500   1497 26 30 00      mov b, $30
2501   149A             ; START TERMS
2502   149A D7            push a
2503   149B 11            mov a, b
2504   149C FA 05 00      lea d, [bp + 5] ; $num
2505   149F 2A            mov b, [d]
2506   14A0             ; START FACTORS
2507   14A0 D7            push a
2508   14A1 11            mov a, b
2509   14A2 26 0A 00      mov b, $a
2510   14A5 AE            div a, b ; 
2511   14A6 11            mov a, b
2512   14A7 27            mov b, a
2513   14A8 E4            pop a
2514   14A9             ; END FACTORS
2515   14A9 56            add b, a
2516   14AA E4            pop a
2517   14AB             ; END TERMS
2518   14AB E7            pop d
2519   14AC FD 3E         mov [d], bl
2520   14AE             ;; num = num / 10; 
2521   14AE FA 05 00      lea d, [bp + 5] ; $num
2522   14B1 DA            push d
2523   14B2 FA 05 00      lea d, [bp + 5] ; $num
2524   14B5 2A            mov b, [d]
2525   14B6             ; START FACTORS
2526   14B6 D7            push a
2527   14B7 11            mov a, b
2528   14B8 26 0A 00      mov b, $a
2529   14BB AE            div a, b
2530   14BC 27            mov b, a
2531   14BD E4            pop a
2532   14BE             ; END FACTORS
2533   14BE E7            pop d
2534   14BF FD 43         mov [d], b
2535   14C1             ;; i++; 
2536   14C1 FA FA FF      lea d, [bp + -6] ; $i
2537   14C4 2A            mov b, [d]
2538   14C5 D8            push b
2539   14C6 FD 77         inc b
2540   14C8 FA FA FF      lea d, [bp + -6] ; $i
2541   14CB FD 43         mov [d], b
2542   14CD E5            pop b
2543   14CE 0A 77 14      jmp _while41_cond
2544   14D1             _while41_exit:
2545   14D1             ;; while (i > 0) { 
2546   14D1             _while42_cond:
2547   14D1 FA FA FF      lea d, [bp + -6] ; $i
2548   14D4 2A            mov b, [d]
2549   14D5             ; START RELATIONAL
2550   14D5 D7            push a
2551   14D6 11            mov a, b
2552   14D7 26 00 00      mov b, $0
2553   14DA B0            cmp a, b
2554   14DB FD 7F         sgt ; >
2555   14DD E4            pop a
2556   14DE             ; END RELATIONAL
2557   14DE C0 00 00      cmp b, 0
2558   14E1 C6 0A 15      je _while42_exit
2559   14E4             _while42_block:
2560   14E4             ;; i--; 
2561   14E4 FA FA FF      lea d, [bp + -6] ; $i
2562   14E7 2A            mov b, [d]
2563   14E8 D8            push b
2564   14E9 FD 7D         dec b
2565   14EB FA FA FF      lea d, [bp + -6] ; $i
2566   14EE FD 43         mov [d], b
2567   14F0 E5            pop b
2568   14F1             ;; putchar(digits[i]); 
2569   14F1 FA FC FF      lea d, [bp + -4] ; $digits
2570   14F4 D7            push a
2571   14F5 DA            push d
2572   14F6 FA FA FF      lea d, [bp + -6] ; $i
2573   14F9 2A            mov b, [d]
2574   14FA E7            pop d
2575   14FB 5A            add d, b
2576   14FC E4            pop a
2577   14FD 32            mov bl, [d]
2578   14FE A7 00         mov bh, 0
2579   1500 DD            push bl
2580   1501 07 15 15      call putchar
2581   1504 51 01 00      add sp, 1
2582   1507 0A D1 14      jmp _while42_cond
2583   150A             _while42_exit:
2584   150A F9            leave
2585   150B 09            ret
2586   150C             
2587   150C             date:
2588   150C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2589   150F             
2590   150F             ; --- BEGIN INLINE ASM BLOCK
2591   150F 19 00         mov al, 0 
2592   1511 05 07         syscall sys_datetime
2593   1513             ; --- END INLINE ASM BLOCK
2594   1513             
2595   1513 F9            leave
2596   1514 09            ret
2597   1515             
2598   1515             putchar:
2599   1515 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2600   1518             
2601   1518             ; --- BEGIN INLINE ASM BLOCK
2602   1518 FA 05 00      lea d, [bp + 5] ; $c
2603   151B 1E            mov al, [d]
2604   151C 23            mov ah, al
2605   151D 07 81 16      call _putchar
2606   1520             ; --- END INLINE ASM BLOCK
2607   1520             
2608   1520 F9            leave
2609   1521 09            ret
2610   1522             
2611   1522             getchar:
2612   1522 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2613   1525             ; $c 
2614   1525 52 01 00      sub sp, 1
2615   1528             
2616   1528             ; --- BEGIN INLINE ASM BLOCK
2617   1528 07 7A 16      call getch
2618   152B 1A            mov al, ah
2619   152C FA 00 00      lea d, [bp + 0] ; $c
2620   152F 3E            mov [d], al
2621   1530             ; --- END INLINE ASM BLOCK
2622   1530             
2623   1530             ;; return c; 
2624   1530 FA 00 00      lea d, [bp + 0] ; $c
2625   1533 32            mov bl, [d]
2626   1534 A7 00         mov bh, 0
2627   1536 F9            leave
2628   1537 09            ret
2629   1538             
2630   1538             scann:
2631   1538 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2632   153B             ; $m 
2633   153B 52 02 00      sub sp, 2
2634   153E             
2635   153E             ; --- BEGIN INLINE ASM BLOCK
2636   153E 07 C5 18      call scan_u16d
2637   1541 FA FF FF      lea d, [bp + -1] ; $m
2638   1544 43            mov [d], a
2639   1545             ; --- END INLINE ASM BLOCK
2640   1545             
2641   1545             ;; return m; 
2642   1545 FA FF FF      lea d, [bp + -1] ; $m
2643   1548 2A            mov b, [d]
2644   1549 F9            leave
2645   154A 09            ret
2646   154B             
2647   154B             puts:
2648   154B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2649   154E             
2650   154E             ; --- BEGIN INLINE ASM BLOCK
2651   154E FA 05 00      lea d, [bp + 5] ; $s
2652   1551 15            mov a, [d]
2653   1552 3C            mov d, a
2654   1553 07 CB 17      call _puts
2655   1556 10 00 0A      mov a, $0A00
2656   1559 05 03         syscall sys_io
2657   155B             ; --- END INLINE ASM BLOCK
2658   155B             
2659   155B F9            leave
2660   155C 09            ret
2661   155D             
2662   155D             print:
2663   155D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2664   1560             
2665   1560             ; --- BEGIN INLINE ASM BLOCK
2666   1560 FA 05 00      lea d, [bp + 5] ; $s
2667   1563 FD 2A         mov d, [d]
2668   1565 07 CB 17      call _puts
2669   1568             ; --- END INLINE ASM BLOCK
2670   1568             
2671   1568 F9            leave
2672   1569 09            ret
2673   156A             
2674   156A             getparam:
2675   156A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2676   156D             ; $data 
2677   156D 52 01 00      sub sp, 1
2678   1570             
2679   1570             ; --- BEGIN INLINE ASM BLOCK
2680   1570 19 04         mov al, 4
2681   1572 FA 05 00      lea d, [bp + 5] ; $address
2682   1575 FD 2A         mov d, [d]
2683   1577 05 0C         syscall sys_system
2684   1579 FA 00 00      lea d, [bp + 0] ; $data
2685   157C FD 3E         mov [d], bl
2686   157E             ; --- END INLINE ASM BLOCK
2687   157E             
2688   157E             ;; return data; 
2689   157E FA 00 00      lea d, [bp + 0] ; $data
2690   1581 32            mov bl, [d]
2691   1582 A7 00         mov bh, 0
2692   1584 F9            leave
2693   1585 09            ret
2694   1586             
2695   1586             clear:
2696   1586 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2697   1589             ;; print("\033[2J\033[H"); 
2698   1589 26 B4 19      mov b, __s2 ; "\033[2J\033[H"
2699   158C FD AB         swp b
2700   158E D8            push b
2701   158F 07 5D 15      call print
2702   1592 51 02 00      add sp, 2
2703   1595 F9            leave
2704   1596 09            ret
2705   1597             
2706   1597             include_stdio_asm:
2707   1597 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2708   159A             
2709   159A             ; --- BEGIN INLINE ASM BLOCK
2710   159A             .include "lib/asm/stdio.asm"
0001+  159A             ;-----------------------------------------------------------------------------
0002+  159A             ; stdio.s
0003+  159A             ;-----------------------------------------------------------------------------
0004+  159A             .include "lib/asm/string.asm"
0001++ 159A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 159A             ; string.s
0003++ 159A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 159A             
0005++ 159A             
0006++ 159A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 159A             ; _strrev
0008++ 159A             ; reverse a string
0009++ 159A             ; D = string address
0010++ 159A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 159A             ; 01234
0012++ 159A             _strrev:
0013++ 159A 4B          	pusha
0014++ 159B 07 E1 15    	call _strlen	; length in C
0015++ 159E 12          	mov a, c
0016++ 159F AF 01 00    	cmp a, 1
0017++ 15A2 D0 BC 15    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 15A5 7D          	dec a
0019++ 15A6 FD 4E       	mov si, d	; beginning of string
0020++ 15A8 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 15AA 59          	add d, a	; end of string
0022++ 15AB 12          	mov a, c
0023++ 15AC FD 9B       	shr a		; divide by 2
0024++ 15AE 39          	mov c, a	; C now counts the steps
0025++ 15AF             _strrev_L0:
0026++ 15AF 32          	mov bl, [d]	; save load right-side char into BL
0027++ 15B0 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 15B1 3E          	mov [d], al	; store left char into right side
0029++ 15B2 1B          	mov al, bl
0030++ 15B3 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 15B4 7E          	dec c
0032++ 15B5 7F          	dec d
0033++ 15B6 C2 00 00    	cmp c, 0
0034++ 15B9 C7 AF 15    	jne _strrev_L0
0035++ 15BC             _strrev_end:
0036++ 15BC 4C          	popa
0037++ 15BD 09          	ret
0038++ 15BE             	
0039++ 15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 15BE             ; _strchr
0041++ 15BE             ; search string in D for char in AL
0042++ 15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 15BE             _strchr:
0044++ 15BE             _strchr_L0:
0045++ 15BE 32          	mov bl, [d]
0046++ 15BF C1 00       	cmp bl, 0
0047++ 15C1 C6 CC 15    	je _strchr_end
0048++ 15C4 BA          	cmp al, bl
0049++ 15C5 C6 CC 15    	je _strchr_end
0050++ 15C8 79          	inc d
0051++ 15C9 0A BE 15    	jmp _strchr_L0
0052++ 15CC             _strchr_end:
0053++ 15CC 1B          	mov al, bl
0054++ 15CD 09          	ret
0055++ 15CE             
0056++ 15CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 15CE             ; _strstr
0058++ 15CE             ; find sub-string
0059++ 15CE             ; str1 in SI
0060++ 15CE             ; str2 in DI
0061++ 15CE             ; SI points to end of source string
0062++ 15CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 15CE             _strstr:
0064++ 15CE DB          	push al
0065++ 15CF DA          	push d
0066++ 15D0 E3          	push di
0067++ 15D1             _strstr_loop:
0068++ 15D1 F3          	cmpsb					; compare a byte of the strings
0069++ 15D2 C7 DD 15    	jne _strstr_ret
0070++ 15D5 FC 00 00    	lea d, [di + 0]
0071++ 15D8 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 15DA C7 D1 15    	jne _strstr_loop				; equal chars but not at end
0073++ 15DD             _strstr_ret:
0074++ 15DD F0          	pop di
0075++ 15DE E7          	pop d
0076++ 15DF E8          	pop al
0077++ 15E0 09          	ret
0078++ 15E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 15E1             ; length of null terminated string
0080++ 15E1             ; result in C
0081++ 15E1             ; pointer in D
0082++ 15E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 15E1             _strlen:
0084++ 15E1 DA          	push d
0085++ 15E2 38 00 00    	mov c, 0
0086++ 15E5             _strlen_L1:
0087++ 15E5 BD 00       	cmp byte [d], 0
0088++ 15E7 C6 EF 15    	je _strlen_ret
0089++ 15EA 79          	inc d
0090++ 15EB 78          	inc c
0091++ 15EC 0A E5 15    	jmp _strlen_L1
0092++ 15EF             _strlen_ret:
0093++ 15EF E7          	pop d
0094++ 15F0 09          	ret
0095++ 15F1             
0096++ 15F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 15F1             ; STRCMP
0098++ 15F1             ; compare two strings
0099++ 15F1             ; str1 in SI
0100++ 15F1             ; str2 in DI
0101++ 15F1             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 15F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 15F1             _strcmp:
0104++ 15F1 DB          	push al
0105++ 15F2 DA          	push d
0106++ 15F3 E3          	push di
0107++ 15F4 E2          	push si
0108++ 15F5             _strcmp_loop:
0109++ 15F5 F3          	cmpsb					; compare a byte of the strings
0110++ 15F6 C7 01 16    	jne _strcmp_ret
0111++ 15F9 FB FF FF    	lea d, [si +- 1]
0112++ 15FC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 15FE C7 F5 15    	jne _strcmp_loop				; equal chars but not at end
0114++ 1601             _strcmp_ret:
0115++ 1601 EF          	pop si
0116++ 1602 F0          	pop di
0117++ 1603 E7          	pop d
0118++ 1604 E8          	pop al
0119++ 1605 09          	ret
0120++ 1606             
0121++ 1606             
0122++ 1606             ; STRCPY
0123++ 1606             ; copy null terminated string from SI to DI
0124++ 1606             ; source in SI
0125++ 1606             ; destination in DI
0126++ 1606             _strcpy:
0127++ 1606 E2          	push si
0128++ 1607 E3          	push di
0129++ 1608 DB          	push al
0130++ 1609             _strcpy_L1:
0131++ 1609 F6          	lodsb
0132++ 160A F7          	stosb
0133++ 160B B9 00       	cmp al, 0
0134++ 160D C7 09 16    	jne _strcpy_L1
0135++ 1610             _strcpy_end:
0136++ 1610 E8          	pop al
0137++ 1611 F0          	pop di
0138++ 1612 EF          	pop si
0139++ 1613 09          	ret
0140++ 1614             
0141++ 1614             ; STRCAT
0142++ 1614             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1614             ; source in SI
0144++ 1614             ; destination in DI
0145++ 1614             _strcat:
0146++ 1614 E2          	push si
0147++ 1615 E3          	push di
0148++ 1616 D7          	push a
0149++ 1617 DA          	push d
0150++ 1618 50          	mov a, di
0151++ 1619 3C          	mov d, a
0152++ 161A             _strcat_goto_end_L1:
0153++ 161A BD 00       	cmp byte[d], 0
0154++ 161C C6 23 16    	je _strcat_start
0155++ 161F 79          	inc d
0156++ 1620 0A 1A 16    	jmp _strcat_goto_end_L1
0157++ 1623             _strcat_start:
0158++ 1623 FD 50       	mov di, d
0159++ 1625             _strcat_L1:
0160++ 1625 F6          	lodsb
0161++ 1626 F7          	stosb
0162++ 1627 B9 00       	cmp al, 0
0163++ 1629 C7 25 16    	jne _strcat_L1
0164++ 162C             _strcat_end:
0165++ 162C E7          	pop d
0166++ 162D E4          	pop a
0167++ 162E F0          	pop di
0168++ 162F EF          	pop si
0169++ 1630 09          	ret
0170++ 1631             
0171++ 1631             
0005+  1631             
0006+  1631             ;-----------------------------------------------------------------------------
0007+  1631             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1631             ; ASCII in BL
0009+  1631             ; result in AL
0010+  1631             ; ascii for F = 0100 0110
0011+  1631             ; ascii for 9 = 0011 1001
0012+  1631             ;-----------------------------------------------------------------------------
0013+  1631             hex_ascii_encode:
0014+  1631 1B            mov al, bl
0015+  1632 93 40         test al, $40        ; test if letter or number
0016+  1634 C7 3A 16      jnz hex_letter
0017+  1637 87 0F         and al, $0F        ; get number
0018+  1639 09            ret
0019+  163A             hex_letter:
0020+  163A 87 0F         and al, $0F        ; get letter
0021+  163C 6A 09         add al, 9
0022+  163E 09            ret
0023+  163F             
0024+  163F             ;-----------------------------------------------------------------------------
0025+  163F             ; ATOI
0026+  163F             ; 2 letter hex string in B
0027+  163F             ; 8bit integer returned in AL
0028+  163F             ;-----------------------------------------------------------------------------
0029+  163F             _atoi:
0030+  163F D8            push b
0031+  1640 07 31 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1643 30            mov bl, bh
0033+  1644 DB            push al          ; save a
0034+  1645 07 31 16      call hex_ascii_encode
0035+  1648 EA            pop bl  
0036+  1649 FD 9E 04      shl al, 4
0037+  164C 8C            or al, bl
0038+  164D E5            pop b
0039+  164E 09            ret  
0040+  164F             
0041+  164F             
0042+  164F             ;-----------------------------------------------------------------------------
0043+  164F             ; ITOA
0044+  164F             ; 8bit value in BL
0045+  164F             ; 2 byte ASCII result in A
0046+  164F             ;-----------------------------------------------------------------------------
0047+  164F             _itoa:
0048+  164F DA            push d
0049+  1650 D8            push b
0050+  1651 A7 00         mov bh, 0
0051+  1653 FD A4 04      shr bl, 4  
0052+  1656 74            mov d, b
0053+  1657 1F FF 18      mov al, [d + s_hex_digits]
0054+  165A 23            mov ah, al
0055+  165B               
0056+  165B E5            pop b
0057+  165C D8            push b
0058+  165D A7 00         mov bh, 0
0059+  165F FD 87 0F      and bl, $0F
0060+  1662 74            mov d, b
0061+  1663 1F FF 18      mov al, [d + s_hex_digits]
0062+  1666 E5            pop b
0063+  1667 E7            pop d
0064+  1668 09            ret
0065+  1669             
0066+  1669             ;-----------------------------------------------------------------------------
0067+  1669             ; HEX STRING TO BINARY
0068+  1669             ; di = destination address
0069+  1669             ; si = source
0070+  1669             ;-----------------------------------------------------------------------------
0071+  1669             _hex_to_int:
0072+  1669             _hex_to_int_L1:
0073+  1669 F6            lodsb          ; load from [SI] to AL
0074+  166A B9 00         cmp al, 0        ; check if ASCII 0
0075+  166C C6 79 16      jz _hex_to_int_ret
0076+  166F 36            mov bh, al
0077+  1670 F6            lodsb
0078+  1671 2F            mov bl, al
0079+  1672 07 3F 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1675 F7            stosb          ; store AL to [DI]
0081+  1676 0A 69 16      jmp _hex_to_int_L1
0082+  1679             _hex_to_int_ret:
0083+  1679 09            ret    
0084+  167A             
0085+  167A             ;-----------------------------------------------------------------------------
0086+  167A             ; GETCHAR
0087+  167A             ; char in ah
0088+  167A             ;-----------------------------------------------------------------------------
0089+  167A             getch:
0090+  167A DB            push al
0091+  167B             getch_retry:
0092+  167B 19 01         mov al, 1
0093+  167D 05 03         syscall sys_io      ; receive in AH
0094+  167F E8            pop al
0095+  1680 09            ret
0096+  1681             
0097+  1681             ;-----------------------------------------------------------------------------
0098+  1681             ; PUTCHAR
0099+  1681             ; char in ah
0100+  1681             ;-----------------------------------------------------------------------------
0101+  1681             _putchar:
0102+  1681 D7            push a
0103+  1682 19 00         mov al, 0
0104+  1684 05 03         syscall sys_io      ; char in AH
0105+  1686 E4            pop a
0106+  1687 09            ret
0107+  1688             
0108+  1688             ;-----------------------------------------------------------------------------
0109+  1688             ;; INPUT A STRING
0110+  1688             ;; terminates with null
0111+  1688             ;; pointer in D
0112+  1688             ;-----------------------------------------------------------------------------
0113+  1688             _gets:
0114+  1688 D7            push a
0115+  1689 DA            push d
0116+  168A             _gets_loop:
0117+  168A 19 01         mov al, 1
0118+  168C 05 03         syscall sys_io      ; receive in AH
0119+  168E B9 00         cmp al, 0        ; check error code (AL)
0120+  1690 C6 8A 16      je _gets_loop      ; if no char received, retry
0121+  1693             
0122+  1693 76 1B         cmp ah, 27
0123+  1695 C6 B6 16      je _gets_ansi_esc
0124+  1698 76 0A         cmp ah, $0A        ; LF
0125+  169A C6 21 17      je _gets_end
0126+  169D 76 0D         cmp ah, $0D        ; CR
0127+  169F C6 21 17      je _gets_end
0128+  16A2 76 5C         cmp ah, $5C        ; '\\'
0129+  16A4 C6 E2 16      je _gets_escape
0130+  16A7               
0131+  16A7 76 08         cmp ah, $08      ; check for backspace
0132+  16A9 C6 B2 16      je _gets_backspace
0133+  16AC             
0134+  16AC 1A            mov al, ah
0135+  16AD 3E            mov [d], al
0136+  16AE 79            inc d
0137+  16AF 0A 8A 16      jmp _gets_loop
0138+  16B2             _gets_backspace:
0139+  16B2 7F            dec d
0140+  16B3 0A 8A 16      jmp _gets_loop
0141+  16B6             _gets_ansi_esc:
0142+  16B6 19 01         mov al, 1
0143+  16B8 05 03         syscall sys_io        ; receive in AH without echo
0144+  16BA B9 00         cmp al, 0          ; check error code (AL)
0145+  16BC C6 B6 16      je _gets_ansi_esc    ; if no char received, retry
0146+  16BF 76 5B         cmp ah, '['
0147+  16C1 C7 8A 16      jne _gets_loop
0148+  16C4             _gets_ansi_esc_2:
0149+  16C4 19 01         mov al, 1
0150+  16C6 05 03         syscall sys_io          ; receive in AH without echo
0151+  16C8 B9 00         cmp al, 0            ; check error code (AL)
0152+  16CA C6 C4 16      je _gets_ansi_esc_2  ; if no char received, retry
0153+  16CD 76 44         cmp ah, 'D'
0154+  16CF C6 DA 16      je _gets_left_arrow
0155+  16D2 76 43         cmp ah, 'C'
0156+  16D4 C6 DE 16      je _gets_right_arrow
0157+  16D7 0A 8A 16      jmp _gets_loop
0158+  16DA             _gets_left_arrow:
0159+  16DA 7F            dec d
0160+  16DB 0A 8A 16      jmp _gets_loop
0161+  16DE             _gets_right_arrow:
0162+  16DE 79            inc d
0163+  16DF 0A 8A 16      jmp _gets_loop
0164+  16E2             _gets_escape:
0165+  16E2 19 01         mov al, 1
0166+  16E4 05 03         syscall sys_io      ; receive in AH
0167+  16E6 B9 00         cmp al, 0        ; check error code (AL)
0168+  16E8 C6 E2 16      je _gets_escape      ; if no char received, retry
0169+  16EB 76 6E         cmp ah, 'n'
0170+  16ED C6 0C 17      je _gets_LF
0171+  16F0 76 72         cmp ah, 'r'
0172+  16F2 C6 13 17      je _gets_CR
0173+  16F5 76 30         cmp ah, '0'
0174+  16F7 C6 1A 17      je _gets_NULL
0175+  16FA 76 5C         cmp ah, $5C  ; '\'
0176+  16FC C6 05 17      je _gets_slash
0177+  16FF 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1700 3E            mov [d], al
0179+  1701 79            inc d
0180+  1702 0A 8A 16      jmp _gets_loop
0181+  1705             _gets_slash:
0182+  1705 19 5C         mov al, $5C
0183+  1707 3E            mov [d], al
0184+  1708 79            inc d
0185+  1709 0A 8A 16      jmp _gets_loop
0186+  170C             _gets_LF:
0187+  170C 19 0A         mov al, $0A
0188+  170E 3E            mov [d], al
0189+  170F 79            inc d
0190+  1710 0A 8A 16      jmp _gets_loop
0191+  1713             _gets_CR:
0192+  1713 19 0D         mov al, $0D
0193+  1715 3E            mov [d], al
0194+  1716 79            inc d
0195+  1717 0A 8A 16      jmp _gets_loop
0196+  171A             _gets_NULL:
0197+  171A 19 00         mov al, $00
0198+  171C 3E            mov [d], al
0199+  171D 79            inc d
0200+  171E 0A 8A 16      jmp _gets_loop
0201+  1721             _gets_end:
0202+  1721 19 00         mov al, 0
0203+  1723 3E            mov [d], al        ; terminate string
0204+  1724 E7            pop d
0205+  1725 E4            pop a
0206+  1726 09            ret
0207+  1727             
0208+  1727             ;-----------------------------------------------------------------------------
0209+  1727             ;; INPUT TEXT
0210+  1727             ;; terminated with CTRL+D
0211+  1727             ;; pointer in D
0212+  1727             ;-----------------------------------------------------------------------------
0213+  1727             _gettxt:
0214+  1727 D7            push a
0215+  1728 DA            push d
0216+  1729             _gettxt_loop:
0217+  1729 19 01         mov al, 1
0218+  172B 05 03         syscall sys_io      ; receive in AH
0219+  172D B9 00         cmp al, 0        ; check error code (AL)
0220+  172F C6 29 17      je _gettxt_loop    ; if no char received, retry
0221+  1732 76 04         cmp ah, 4      ; EOT
0222+  1734 C6 72 17      je _gettxt_end
0223+  1737 76 08         cmp ah, $08      ; check for backspace
0224+  1739 C6 6E 17      je _gettxt_backspace
0225+  173C 76 5C         cmp ah, $5C        ; '\'
0226+  173E C6 47 17      je _gettxt_escape
0227+  1741 1A            mov al, ah
0228+  1742 3E            mov [d], al
0229+  1743 79            inc d
0230+  1744 0A 29 17      jmp _gettxt_loop
0231+  1747             _gettxt_escape:
0232+  1747 19 01         mov al, 1
0233+  1749 05 03         syscall sys_io      ; receive in AH
0234+  174B B9 00         cmp al, 0        ; check error code (AL)
0235+  174D C6 47 17      je _gettxt_escape    ; if no char received, retry
0236+  1750 76 6E         cmp ah, 'n'
0237+  1752 C6 60 17      je _gettxt_LF
0238+  1755 76 72         cmp ah, 'r'
0239+  1757 C6 67 17      je _gettxt_CR
0240+  175A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  175B 3E            mov [d], al
0242+  175C 79            inc d
0243+  175D 0A 29 17      jmp _gettxt_loop
0244+  1760             _gettxt_LF:
0245+  1760 19 0A         mov al, $0A
0246+  1762 3E            mov [d], al
0247+  1763 79            inc d
0248+  1764 0A 29 17      jmp _gettxt_loop
0249+  1767             _gettxt_CR:
0250+  1767 19 0D         mov al, $0D
0251+  1769 3E            mov [d], al
0252+  176A 79            inc d
0253+  176B 0A 29 17      jmp _gettxt_loop
0254+  176E             _gettxt_backspace:
0255+  176E 7F            dec d
0256+  176F 0A 29 17      jmp _gettxt_loop
0257+  1772             _gettxt_end:
0258+  1772 19 00         mov al, 0
0259+  1774 3E            mov [d], al        ; terminate string
0260+  1775 E7            pop d
0261+  1776 E4            pop a
0262+  1777 09            ret
0263+  1778             
0264+  1778             ;-----------------------------------------------------------------------------
0265+  1778             ; PRINT NEW LINE
0266+  1778             ;-----------------------------------------------------------------------------
0267+  1778             printnl:
0268+  1778 D7            push a
0269+  1779 10 00 0A      mov a, $0A00
0270+  177C 05 03         syscall sys_io
0271+  177E 10 00 0D      mov a, $0D00
0272+  1781 05 03         syscall sys_io
0273+  1783 E4            pop a
0274+  1784 09            ret
0275+  1785             
0276+  1785             ;-----------------------------------------------------------------------------
0277+  1785             ; _strtoint
0278+  1785             ; 4 digit hex string number in d
0279+  1785             ; integer returned in A
0280+  1785             ;-----------------------------------------------------------------------------
0281+  1785             _strtointx:
0282+  1785 D8            push b
0283+  1786 32            mov bl, [d]
0284+  1787 37            mov bh, bl
0285+  1788 33 01 00      mov bl, [d + 1]
0286+  178B 07 3F 16      call _atoi        ; convert to int in AL
0287+  178E 23            mov ah, al        ; move to AH
0288+  178F 33 02 00      mov bl, [d + 2]
0289+  1792 37            mov bh, bl
0290+  1793 33 03 00      mov bl, [d + 3]
0291+  1796 07 3F 16      call _atoi        ; convert to int in AL
0292+  1799 E5            pop b
0293+  179A 09            ret
0294+  179B             
0295+  179B             ;-----------------------------------------------------------------------------
0296+  179B             ; _strtoint
0297+  179B             ; 5 digit base10 string number in d
0298+  179B             ; integer returned in A
0299+  179B             ;-----------------------------------------------------------------------------
0300+  179B             _strtoint:
0301+  179B E2            push si
0302+  179C D8            push b
0303+  179D D9            push c
0304+  179E DA            push d
0305+  179F 07 E1 15      call _strlen      ; get string length in C
0306+  17A2 7E            dec c
0307+  17A3 FD 4E         mov si, d
0308+  17A5 12            mov a, c
0309+  17A6 FD 99         shl a
0310+  17A8 3B 17 19      mov d, table_power
0311+  17AB 59            add d, a
0312+  17AC 38 00 00      mov c, 0
0313+  17AF             _strtoint_L0:
0314+  17AF F6            lodsb      ; load ASCII to al
0315+  17B0 B9 00         cmp al, 0
0316+  17B2 C6 C5 17      je _strtoint_end
0317+  17B5 6F 30         sub al, $30    ; make into integer
0318+  17B7 22 00         mov ah, 0
0319+  17B9 2A            mov b, [d]
0320+  17BA AC            mul a, b      ; result in B since it fits in 16bits
0321+  17BB 11            mov a, b
0322+  17BC 28            mov b, c
0323+  17BD 54            add a, b
0324+  17BE 39            mov c, a
0325+  17BF 63 02 00      sub d, 2
0326+  17C2 0A AF 17      jmp _strtoint_L0
0327+  17C5             _strtoint_end:
0328+  17C5 12            mov a, c
0329+  17C6 E7            pop d
0330+  17C7 E6            pop c
0331+  17C8 E5            pop b
0332+  17C9 EF            pop si
0333+  17CA 09            ret
0334+  17CB             
0335+  17CB             ;-----------------------------------------------------------------------------
0336+  17CB             ; PRINT NULL TERMINATED STRING
0337+  17CB             ; pointer in D
0338+  17CB             ;-----------------------------------------------------------------------------
0339+  17CB             _puts:
0340+  17CB D7            push a
0341+  17CC DA            push d
0342+  17CD             _puts_L1:
0343+  17CD 1E            mov al, [d]
0344+  17CE B9 00         cmp al, 0
0345+  17D0 C6 DC 17      jz _puts_END
0346+  17D3 23            mov ah, al
0347+  17D4 19 00         mov al, 0
0348+  17D6 05 03         syscall sys_io
0349+  17D8 79            inc d
0350+  17D9 0A CD 17      jmp _puts_L1
0351+  17DC             _puts_END:
0352+  17DC E7            pop d
0353+  17DD E4            pop a
0354+  17DE 09            ret
0355+  17DF             
0356+  17DF             ;-----------------------------------------------------------------------------
0357+  17DF             ; PRINT N SIZE STRING
0358+  17DF             ; pointer in D
0359+  17DF             ; size in C
0360+  17DF             ;-----------------------------------------------------------------------------
0361+  17DF             _putsn:
0362+  17DF DB            push al
0363+  17E0 DA            push d
0364+  17E1 D9            push c
0365+  17E2             _putsn_L0:
0366+  17E2 1E            mov al, [d]
0367+  17E3 23            mov ah, al
0368+  17E4 19 00         mov al, 0
0369+  17E6 05 03         syscall sys_io
0370+  17E8 79            inc d
0371+  17E9 7E            dec c  
0372+  17EA C2 00 00      cmp c, 0
0373+  17ED C7 E2 17      jne _putsn_L0
0374+  17F0             _putsn_end:
0375+  17F0 E6            pop c
0376+  17F1 E7            pop d
0377+  17F2 E8            pop al
0378+  17F3 09            ret
0379+  17F4             
0380+  17F4             ;-----------------------------------------------------------------------------
0381+  17F4             ; print 16bit decimal number
0382+  17F4             ; input number in A
0383+  17F4             ;-----------------------------------------------------------------------------
0384+  17F4             print_u16d:
0385+  17F4 D7            push a
0386+  17F5 D8            push b
0387+  17F6 26 10 27      mov b, 10000
0388+  17F9 AE            div a, b      ; get 10000's coeff.
0389+  17FA 07 1C 18      call print_number
0390+  17FD 11            mov a, b
0391+  17FE 26 E8 03      mov b, 1000
0392+  1801 AE            div a, b      ; get 1000's coeff.
0393+  1802 07 1C 18      call print_number
0394+  1805 11            mov a, b
0395+  1806 26 64 00      mov b, 100
0396+  1809 AE            div a, b
0397+  180A 07 1C 18      call print_number
0398+  180D 11            mov a, b
0399+  180E 26 0A 00      mov b, 10
0400+  1811 AE            div a, b
0401+  1812 07 1C 18      call print_number
0402+  1815 1B            mov al, bl      ; 1's coeff in bl
0403+  1816 07 1C 18      call print_number
0404+  1819 E5            pop b
0405+  181A E4            pop a
0406+  181B 09            ret
0407+  181C             
0408+  181C             ;-----------------------------------------------------------------------------
0409+  181C             ; print AL
0410+  181C             ;-----------------------------------------------------------------------------
0411+  181C             print_number:
0412+  181C 6A 30         add al, $30
0413+  181E 23            mov ah, al
0414+  181F 07 81 16      call _putchar
0415+  1822 09            ret
0416+  1823             
0417+  1823             ;-----------------------------------------------------------------------------
0418+  1823             ; PRINT 16BIT HEX INTEGER
0419+  1823             ; integer value in reg B
0420+  1823             ;-----------------------------------------------------------------------------
0421+  1823             print_u16x:
0422+  1823 D7            push a
0423+  1824 D8            push b
0424+  1825 DD            push bl
0425+  1826 30            mov bl, bh
0426+  1827 07 4F 16      call _itoa        ; convert bh to char in A
0427+  182A 2F            mov bl, al        ; save al
0428+  182B 19 00         mov al, 0
0429+  182D 05 03         syscall sys_io        ; display AH
0430+  182F 24            mov ah, bl        ; retrieve al
0431+  1830 19 00         mov al, 0
0432+  1832 05 03         syscall sys_io        ; display AL
0433+  1834             
0434+  1834 EA            pop bl
0435+  1835 07 4F 16      call _itoa        ; convert bh to char in A
0436+  1838 2F            mov bl, al        ; save al
0437+  1839 19 00         mov al, 0
0438+  183B 05 03         syscall sys_io        ; display AH
0439+  183D 24            mov ah, bl        ; retrieve al
0440+  183E 19 00         mov al, 0
0441+  1840 05 03         syscall sys_io        ; display AL
0442+  1842             
0443+  1842 E5            pop b
0444+  1843 E4            pop a
0445+  1844 09            ret
0446+  1845             
0447+  1845             ;-----------------------------------------------------------------------------
0448+  1845             ; INPUT 16BIT HEX INTEGER
0449+  1845             ; read 16bit integer into A
0450+  1845             ;-----------------------------------------------------------------------------
0451+  1845             scan_u16x:
0452+  1845 F8 10 00      enter 16
0453+  1848 D8            push b
0454+  1849 DA            push d
0455+  184A             
0456+  184A FA F1 FF      lea d, [bp + -15]
0457+  184D 07 88 16      call _gets        ; get number
0458+  1850             
0459+  1850 32            mov bl, [d]
0460+  1851 37            mov bh, bl
0461+  1852 33 01 00      mov bl, [d + 1]
0462+  1855 07 3F 16      call _atoi        ; convert to int in AL
0463+  1858 23            mov ah, al        ; move to AH
0464+  1859             
0465+  1859 33 02 00      mov bl, [d + 2]
0466+  185C 37            mov bh, bl
0467+  185D 33 03 00      mov bl, [d + 3]
0468+  1860 07 3F 16      call _atoi        ; convert to int in AL
0469+  1863             
0470+  1863 E7            pop d
0471+  1864 E5            pop b
0472+  1865 F9            leave
0473+  1866 09            ret
0474+  1867             
0475+  1867             ;-----------------------------------------------------------------------------
0476+  1867             ; PRINT 8bit HEX INTEGER
0477+  1867             ; integer value in reg bl
0478+  1867             ;-----------------------------------------------------------------------------
0479+  1867             print_u8x:
0480+  1867 D7            push a
0481+  1868 DD            push bl
0482+  1869             
0483+  1869 07 4F 16      call _itoa        ; convert bl to char in A
0484+  186C 2F            mov bl, al        ; save al
0485+  186D 19 00         mov al, 0
0486+  186F 05 03         syscall sys_io        ; display AH
0487+  1871 24            mov ah, bl        ; retrieve al
0488+  1872 19 00         mov al, 0
0489+  1874 05 03         syscall sys_io        ; display AL
0490+  1876             
0491+  1876 EA            pop bl
0492+  1877 E4            pop a
0493+  1878 09            ret
0494+  1879             
0495+  1879             ;-----------------------------------------------------------------------------
0496+  1879             ; print 8bit decimal unsigned number
0497+  1879             ; input number in AL
0498+  1879             ;-----------------------------------------------------------------------------
0499+  1879             print_u8d:
0500+  1879 D7            push a
0501+  187A D8            push b
0502+  187B             
0503+  187B 22 00         mov ah, 0
0504+  187D 26 64 00      mov b, 100
0505+  1880 AE            div a, b
0506+  1881 D8            push b      ; save remainder
0507+  1882 B9 00         cmp al, 0
0508+  1884 C6 8E 18      je skip100
0509+  1887 6A 30         add al, $30
0510+  1889 23            mov ah, al
0511+  188A 19 00         mov al, 0
0512+  188C 05 03         syscall sys_io  ; print coeff
0513+  188E             skip100:
0514+  188E E4            pop a
0515+  188F 22 00         mov ah, 0
0516+  1891 26 0A 00      mov b, 10
0517+  1894 AE            div a, b
0518+  1895 D8            push b      ; save remainder
0519+  1896 B9 00         cmp al, 0
0520+  1898 C6 A2 18      je skip10
0521+  189B 6A 30         add al, $30
0522+  189D 23            mov ah, al
0523+  189E 19 00         mov al, 0
0524+  18A0 05 03         syscall sys_io  ; print coeff
0525+  18A2             skip10:
0526+  18A2 E4            pop a
0527+  18A3 1B            mov al, bl
0528+  18A4 6A 30         add al, $30
0529+  18A6 23            mov ah, al
0530+  18A7 19 00         mov al, 0
0531+  18A9 05 03         syscall sys_io  ; print coeff
0532+  18AB E5            pop b
0533+  18AC E4            pop a
0534+  18AD 09            ret
0535+  18AE             
0536+  18AE             ;-----------------------------------------------------------------------------
0537+  18AE             ; INPUT 8BIT HEX INTEGER
0538+  18AE             ; read 8bit integer into AL
0539+  18AE             ;-----------------------------------------------------------------------------
0540+  18AE             scan_u8x:
0541+  18AE F8 04 00      enter 4
0542+  18B1 D8            push b
0543+  18B2 DA            push d
0544+  18B3             
0545+  18B3 FA FD FF      lea d, [bp + -3]
0546+  18B6 07 88 16      call _gets        ; get number
0547+  18B9             
0548+  18B9 32            mov bl, [d]
0549+  18BA 37            mov bh, bl
0550+  18BB 33 01 00      mov bl, [d + 1]
0551+  18BE 07 3F 16      call _atoi        ; convert to int in AL
0552+  18C1             
0553+  18C1 E7            pop d
0554+  18C2 E5            pop b
0555+  18C3 F9            leave
0556+  18C4 09            ret
0557+  18C5             
0558+  18C5             ;-----------------------------------------------------------------------------
0559+  18C5             ; input decimal number
0560+  18C5             ; result in A
0561+  18C5             ; 655'\0'
0562+  18C5             ; low--------high
0563+  18C5             ;-----------------------------------------------------------------------------
0564+  18C5             scan_u16d:
0565+  18C5 F8 08 00      enter 8
0566+  18C8 E2            push si
0567+  18C9 D8            push b
0568+  18CA D9            push c
0569+  18CB DA            push d
0570+  18CC FA F9 FF      lea d, [bp +- 7]
0571+  18CF 07 88 16      call _gets
0572+  18D2 07 E1 15      call _strlen      ; get string length in C
0573+  18D5 7E            dec c
0574+  18D6 FD 4E         mov si, d
0575+  18D8 12            mov a, c
0576+  18D9 FD 99         shl a
0577+  18DB 3B 17 19      mov d, table_power
0578+  18DE 59            add d, a
0579+  18DF 38 00 00      mov c, 0
0580+  18E2             mul_loop:
0581+  18E2 F6            lodsb      ; load ASCII to al
0582+  18E3 B9 00         cmp al, 0
0583+  18E5 C6 F8 18      je mul_exit
0584+  18E8 6F 30         sub al, $30    ; make into integer
0585+  18EA 22 00         mov ah, 0
0586+  18EC 2A            mov b, [d]
0587+  18ED AC            mul a, b      ; result in B since it fits in 16bits
0588+  18EE 11            mov a, b
0589+  18EF 28            mov b, c
0590+  18F0 54            add a, b
0591+  18F1 39            mov c, a
0592+  18F2 63 02 00      sub d, 2
0593+  18F5 0A E2 18      jmp mul_loop
0594+  18F8             mul_exit:
0595+  18F8 12            mov a, c
0596+  18F9 E7            pop d
0597+  18FA E6            pop c
0598+  18FB E5            pop b
0599+  18FC EF            pop si
0600+  18FD F9            leave
0601+  18FE 09            ret
0602+  18FF             
0603+  18FF 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1903 34 35 36 37 
0603+  1907 38 39 41 42 
0603+  190B 43 44 45 46 
0604+  190F 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1913 1B 5B 48 00 
0605+  1917             
0606+  1917             table_power:
0607+  1917 01 00         .dw 1
0608+  1919 0A 00         .dw 10
0609+  191B 64 00         .dw 100
0610+  191D E8 03         .dw 1000
0611+  191F 10 27         .dw 100002711   1921             ; --- END INLINE ASM BLOCK
2712   1921             
2713   1921 F9            leave
2714   1922 09            ret
2715   1923             
2716   1923             find_set_empty_place:
2717   1923 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2718   1926             ; $r1 
2719   1926             ; $r2 
2720   1926 52 02 00      sub sp, 2
2721   1929             ;; do { 
2722   1929             _do43_block:
2723   1929             ;; } while (r1 != 1 ); 
2724   1929             _do43_cond:
2725   1929 FA 00 00      lea d, [bp + 0] ; $r1
2726   192C 32            mov bl, [d]
2727   192D A7 00         mov bh, 0
2728   192F             ; START RELATIONAL
2729   192F D7            push a
2730   1930 11            mov a, b
2731   1931 26 01 00      mov b, $1
2732   1934 B0            cmp a, b
2733   1935 FD 72         sneq ; !=
2734   1937 E4            pop a
2735   1938             ; END RELATIONAL
2736   1938 C0 01 00      cmp b, 1
2737   193B C6 29 19      je _do43_block
2738   193E             _do43_exit:
2739   193E             ;; if (z1) 
2740   193E             _if44_cond:
2741   193E FA 06 00      lea d, [bp + 6] ; $z1
2742   1941 2A            mov b, [d]
2743   1942 C0 00 00      cmp b, 0
2744   1945 C6 59 19      je _if44_exit
2745   1948             _if44_true:
2746   1948             ;; *z1 = r1; 
2747   1948 FA 06 00      lea d, [bp + 6] ; $z1
2748   194B 2A            mov b, [d]
2749   194C D8            push b
2750   194D FA 00 00      lea d, [bp + 0] ; $r1
2751   1950 32            mov bl, [d]
2752   1951 A7 00         mov bh, 0
2753   1953 E7            pop d
2754   1954 FD 3E         mov [d], bl
2755   1956 0A 59 19      jmp _if44_exit
2756   1959             _if44_exit:
2757   1959             ;; if (z2) 
2758   1959             _if45_cond:
2759   1959 FA 08 00      lea d, [bp + 8] ; $z2
2760   195C 2A            mov b, [d]
2761   195D C0 00 00      cmp b, 0
2762   1960 C6 74 19      je _if45_exit
2763   1963             _if45_true:
2764   1963             ;; *z2 = r2; 
2765   1963 FA 08 00      lea d, [bp + 8] ; $z2
2766   1966 2A            mov b, [d]
2767   1967 D8            push b
2768   1968 FA FF FF      lea d, [bp + -1] ; $r2
2769   196B 32            mov bl, [d]
2770   196C A7 00         mov bh, 0
2771   196E E7            pop d
2772   196F FD 3E         mov [d], bl
2773   1971 0A 74 19      jmp _if45_exit
2774   1974             _if45_exit:
2775   1974 F9            leave
2776   1975 09            ret
2777   1976             ; --- END TEXT BLOCK
2778   1976             
2779   1976             ; --- BEGIN DATA BLOCK
2780   1976 00 00       _i: .fill 2, 0
2781   1978 55 6E 65 78 __s0: .db "Unexpected format in printf.", 0
2781   197C 70 65 63 74 
2781   1980 65 64 20 66 
2781   1984 6F 72 6D 61 
2781   1988 74 20 69 6E 
2781   198C 20 70 72 69 
2781   1990 6E 74 66 2E 
2781   1994 00 
2782   1995 45 72 72 6F __s1: .db "Error: Unknown argument type.\n", 0
2782   1999 72 3A 20 55 
2782   199D 6E 6B 6E 6F 
2782   19A1 77 6E 20 61 
2782   19A5 72 67 75 6D 
2782   19A9 65 6E 74 20 
2782   19AD 74 79 70 65 
2782   19B1 2E 0A 00 
2783   19B4 1B 5B 32 4A __s2: .db "\033[2J\033[H", 0
2783   19B8 1B 5B 48 00 
2784   19BC             
2785   19BC BE 19       _heap_top: .dw _heap
2786   19BE 00          _heap: .db 0
2787   19BF             ; --- END DATA BLOCK
2788   19BF             
2789   19BF             .end
tasm: Number of errors = 0
