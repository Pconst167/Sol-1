0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i=0;i<50;i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 32 00      mov b, $32
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; <= (signed)
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 7E 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j=0;j<50;j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 32 00      mov b, $32
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; <= (signed)
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 6E 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; printf("%d\n", n, 12); 
0057   0445 26 0C 00      mov b, $c
0058   0448 FD AB         swp b
0059   044A D8            push b
0060   044B FA FB FF      lea d, [bp + -5] ; $n
0061   044E 2A            mov b, [d]
0062   044F FD AB         swp b
0063   0451 D8            push b
0064   0452 26 9E 27      mov b, __s0 ; "%d\n"
0065   0455 FD AB         swp b
0066   0457 D8            push b
0067   0458 07 22 11      call printf
0068   045B 51 06 00      add sp, 6
0069   045E             _for2_update:
0070   045E FA FD FF      lea d, [bp + -3] ; $j
0071   0461 2A            mov b, [d]
0072   0462 D8            push b
0073   0463 FD 77         inc b
0074   0465 FA FD FF      lea d, [bp + -3] ; $j
0075   0468 FD 43         mov [d], b
0076   046A E5            pop b
0077   046B 0A 32 04      jmp _for2_cond
0078   046E             _for2_exit:
0079   046E             _for1_update:
0080   046E FA FF FF      lea d, [bp + -1] ; $i
0081   0471 2A            mov b, [d]
0082   0472 D8            push b
0083   0473 FD 77         inc b
0084   0475 FA FF FF      lea d, [bp + -1] ; $i
0085   0478 FD 43         mov [d], b
0086   047A E5            pop b
0087   047B 0A 15 04      jmp _for1_cond
0088   047E             _for1_exit:
0089   047E 05 0B         syscall sys_terminate_proc
0090   0480             
0091   0480             strcpy:
0092   0480 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0093   0483             ; $psrc 
0094   0483             ; $pdest 
0095   0483 52 04 00      sub sp, 4
0096   0486             ;; psrc = src; 
0097   0486 FA FF FF      lea d, [bp + -1] ; $psrc
0098   0489 DA            push d
0099   048A FA 07 00      lea d, [bp + 7] ; $src
0100   048D 2A            mov b, [d]
0101   048E E7            pop d
0102   048F FD 43         mov [d], b
0103   0491             ;; pdest = dest; 
0104   0491 FA FD FF      lea d, [bp + -3] ; $pdest
0105   0494 DA            push d
0106   0495 FA 05 00      lea d, [bp + 5] ; $dest
0107   0498 2A            mov b, [d]
0108   0499 E7            pop d
0109   049A FD 43         mov [d], b
0110   049C             ;; while(*psrc) *pdest++ = *psrc++; 
0111   049C             _while3_cond:
0112   049C FA FF FF      lea d, [bp + -1] ; $psrc
0113   049F 2A            mov b, [d]
0114   04A0 74            mov d, b
0115   04A1 32            mov bl, [d]
0116   04A2 A7 00         mov bh, 0
0117   04A4 C0 00 00      cmp b, 0
0118   04A7 C6 CF 04      je _while3_exit
0119   04AA             _while3_block:
0120   04AA             ;; *pdest++ = *psrc++; 
0121   04AA FA FD FF      lea d, [bp + -3] ; $pdest
0122   04AD 2A            mov b, [d]
0123   04AE D8            push b
0124   04AF FD 77         inc b
0125   04B1 FA FD FF      lea d, [bp + -3] ; $pdest
0126   04B4 FD 43         mov [d], b
0127   04B6 E5            pop b
0128   04B7 D8            push b
0129   04B8 FA FF FF      lea d, [bp + -1] ; $psrc
0130   04BB 2A            mov b, [d]
0131   04BC D8            push b
0132   04BD FD 77         inc b
0133   04BF FA FF FF      lea d, [bp + -1] ; $psrc
0134   04C2 FD 43         mov [d], b
0135   04C4 E5            pop b
0136   04C5 74            mov d, b
0137   04C6 32            mov bl, [d]
0138   04C7 A7 00         mov bh, 0
0139   04C9 E7            pop d
0140   04CA FD 3E         mov [d], bl
0141   04CC 0A 9C 04      jmp _while3_cond
0142   04CF             _while3_exit:
0143   04CF             ;; *pdest = '\0'; 
0144   04CF FA FD FF      lea d, [bp + -3] ; $pdest
0145   04D2 2A            mov b, [d]
0146   04D3 D8            push b
0147   04D4 26 00 00      mov b, $0
0148   04D7 E7            pop d
0149   04D8 FD 3E         mov [d], bl
0150   04DA F9            leave
0151   04DB 09            ret
0152   04DC             
0153   04DC             strcmp:
0154   04DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0155   04DF             ;; while (*s1 && (*s1 == *s2)) { 
0156   04DF             _while4_cond:
0157   04DF FA 05 00      lea d, [bp + 5] ; $s1
0158   04E2 2A            mov b, [d]
0159   04E3 74            mov d, b
0160   04E4 32            mov bl, [d]
0161   04E5 A7 00         mov bh, 0
0162   04E7 D7            push a
0163   04E8 11            mov a, b
0164   04E9 FA 05 00      lea d, [bp + 5] ; $s1
0165   04EC 2A            mov b, [d]
0166   04ED 74            mov d, b
0167   04EE 32            mov bl, [d]
0168   04EF A7 00         mov bh, 0
0169   04F1             ; START RELATIONAL
0170   04F1 D7            push a
0171   04F2 11            mov a, b
0172   04F3 FA 07 00      lea d, [bp + 7] ; $s2
0173   04F6 2A            mov b, [d]
0174   04F7 74            mov d, b
0175   04F8 32            mov bl, [d]
0176   04F9 A7 00         mov bh, 0
0177   04FB B0            cmp a, b
0178   04FC FD 71         seq ; ==
0179   04FE E4            pop a
0180   04FF             ; END RELATIONAL
0181   04FF FD A7         sand a, b ; &&
0182   0501 E4            pop a
0183   0502 C0 00 00      cmp b, 0
0184   0505 C6 25 05      je _while4_exit
0185   0508             _while4_block:
0186   0508             ;; s1++; 
0187   0508 FA 05 00      lea d, [bp + 5] ; $s1
0188   050B 2A            mov b, [d]
0189   050C D8            push b
0190   050D FD 77         inc b
0191   050F FA 05 00      lea d, [bp + 5] ; $s1
0192   0512 FD 43         mov [d], b
0193   0514 E5            pop b
0194   0515             ;; s2++; 
0195   0515 FA 07 00      lea d, [bp + 7] ; $s2
0196   0518 2A            mov b, [d]
0197   0519 D8            push b
0198   051A FD 77         inc b
0199   051C FA 07 00      lea d, [bp + 7] ; $s2
0200   051F FD 43         mov [d], b
0201   0521 E5            pop b
0202   0522 0A DF 04      jmp _while4_cond
0203   0525             _while4_exit:
0204   0525             ;; return *s1 - *s2; 
0205   0525 FA 05 00      lea d, [bp + 5] ; $s1
0206   0528 2A            mov b, [d]
0207   0529 74            mov d, b
0208   052A 32            mov bl, [d]
0209   052B A7 00         mov bh, 0
0210   052D             ; START TERMS
0211   052D D7            push a
0212   052E 11            mov a, b
0213   052F FA 07 00      lea d, [bp + 7] ; $s2
0214   0532 2A            mov b, [d]
0215   0533 74            mov d, b
0216   0534 32            mov bl, [d]
0217   0535 A7 00         mov bh, 0
0218   0537 60            sub a, b
0219   0538 27            mov b, a
0220   0539 E4            pop a
0221   053A             ; END TERMS
0222   053A F9            leave
0223   053B 09            ret
0224   053C             
0225   053C             strcat:
0226   053C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0227   053F             ; $dest_len 
0228   053F             ; $i 
0229   053F 52 04 00      sub sp, 4
0230   0542             ;; dest_len = strlen(dest); 
0231   0542 FA FF FF      lea d, [bp + -1] ; $dest_len
0232   0545 DA            push d
0233   0546 FA 05 00      lea d, [bp + 5] ; $dest
0234   0549 2A            mov b, [d]
0235   054A FD AB         swp b
0236   054C D8            push b
0237   054D 07 EF 05      call strlen
0238   0550 51 02 00      add sp, 2
0239   0553 E7            pop d
0240   0554 FD 43         mov [d], b
0241   0556             ;; for (i = 0; src[i] != 0; i=i+1) { 
0242   0556             _for5_init:
0243   0556 FA FD FF      lea d, [bp + -3] ; $i
0244   0559 DA            push d
0245   055A 26 00 00      mov b, $0
0246   055D E7            pop d
0247   055E FD 43         mov [d], b
0248   0560             _for5_cond:
0249   0560 FA 07 00      lea d, [bp + 7] ; $src
0250   0563 FD 2A         mov d, [d]
0251   0565 D7            push a
0252   0566 DA            push d
0253   0567 FA FD FF      lea d, [bp + -3] ; $i
0254   056A 2A            mov b, [d]
0255   056B E7            pop d
0256   056C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0257   0570 E4            pop a
0258   0571 32            mov bl, [d]
0259   0572 A7 00         mov bh, 0
0260   0574             ; START RELATIONAL
0261   0574 D7            push a
0262   0575 11            mov a, b
0263   0576 26 00 00      mov b, $0
0264   0579 B0            cmp a, b
0265   057A FD 72         sneq ; !=
0266   057C E4            pop a
0267   057D             ; END RELATIONAL
0268   057D C0 00 00      cmp b, 0
0269   0580 C6 C9 05      je _for5_exit
0270   0583             _for5_block:
0271   0583             ;; dest[dest_len + i] = src[i]; 
0272   0583 FA 05 00      lea d, [bp + 5] ; $dest
0273   0586 FD 2A         mov d, [d]
0274   0588 D7            push a
0275   0589 DA            push d
0276   058A FA FF FF      lea d, [bp + -1] ; $dest_len
0277   058D 2A            mov b, [d]
0278   058E             ; START TERMS
0279   058E D7            push a
0280   058F 11            mov a, b
0281   0590 FA FD FF      lea d, [bp + -3] ; $i
0282   0593 2A            mov b, [d]
0283   0594 56            add b, a
0284   0595 E4            pop a
0285   0596             ; END TERMS
0286   0596 E7            pop d
0287   0597 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0288   059B E4            pop a
0289   059C DA            push d
0290   059D FA 07 00      lea d, [bp + 7] ; $src
0291   05A0 FD 2A         mov d, [d]
0292   05A2 D7            push a
0293   05A3 DA            push d
0294   05A4 FA FD FF      lea d, [bp + -3] ; $i
0295   05A7 2A            mov b, [d]
0296   05A8 E7            pop d
0297   05A9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0298   05AD E4            pop a
0299   05AE 32            mov bl, [d]
0300   05AF A7 00         mov bh, 0
0301   05B1 E7            pop d
0302   05B2 FD 3E         mov [d], bl
0303   05B4             _for5_update:
0304   05B4 FA FD FF      lea d, [bp + -3] ; $i
0305   05B7 DA            push d
0306   05B8 FA FD FF      lea d, [bp + -3] ; $i
0307   05BB 2A            mov b, [d]
0308   05BC             ; START TERMS
0309   05BC D7            push a
0310   05BD 11            mov a, b
0311   05BE 26 01 00      mov b, $1
0312   05C1 56            add b, a
0313   05C2 E4            pop a
0314   05C3             ; END TERMS
0315   05C3 E7            pop d
0316   05C4 FD 43         mov [d], b
0317   05C6 0A 60 05      jmp _for5_cond
0318   05C9             _for5_exit:
0319   05C9             ;; dest[dest_len + i] = 0; 
0320   05C9 FA 05 00      lea d, [bp + 5] ; $dest
0321   05CC FD 2A         mov d, [d]
0322   05CE D7            push a
0323   05CF DA            push d
0324   05D0 FA FF FF      lea d, [bp + -1] ; $dest_len
0325   05D3 2A            mov b, [d]
0326   05D4             ; START TERMS
0327   05D4 D7            push a
0328   05D5 11            mov a, b
0329   05D6 FA FD FF      lea d, [bp + -3] ; $i
0330   05D9 2A            mov b, [d]
0331   05DA 56            add b, a
0332   05DB E4            pop a
0333   05DC             ; END TERMS
0334   05DC E7            pop d
0335   05DD FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0336   05E1 E4            pop a
0337   05E2 DA            push d
0338   05E3 26 00 00      mov b, $0
0339   05E6 E7            pop d
0340   05E7 FD 3E         mov [d], bl
0341   05E9             ;; return dest; 
0342   05E9 FA 05 00      lea d, [bp + 5] ; $dest
0343   05EC 2A            mov b, [d]
0344   05ED F9            leave
0345   05EE 09            ret
0346   05EF             
0347   05EF             strlen:
0348   05EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0349   05F2             ; $length 
0350   05F2 52 02 00      sub sp, 2
0351   05F5             ;; length = 0; 
0352   05F5 FA FF FF      lea d, [bp + -1] ; $length
0353   05F8 DA            push d
0354   05F9 26 00 00      mov b, $0
0355   05FC E7            pop d
0356   05FD FD 43         mov [d], b
0357   05FF             ;; while (str[length] != 0) { 
0358   05FF             _while6_cond:
0359   05FF FA 05 00      lea d, [bp + 5] ; $str
0360   0602 FD 2A         mov d, [d]
0361   0604 D7            push a
0362   0605 DA            push d
0363   0606 FA FF FF      lea d, [bp + -1] ; $length
0364   0609 2A            mov b, [d]
0365   060A E7            pop d
0366   060B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0367   060F E4            pop a
0368   0610 32            mov bl, [d]
0369   0611 A7 00         mov bh, 0
0370   0613             ; START RELATIONAL
0371   0613 D7            push a
0372   0614 11            mov a, b
0373   0615 26 00 00      mov b, $0
0374   0618 B0            cmp a, b
0375   0619 FD 72         sneq ; !=
0376   061B E4            pop a
0377   061C             ; END RELATIONAL
0378   061C C0 00 00      cmp b, 0
0379   061F C6 32 06      je _while6_exit
0380   0622             _while6_block:
0381   0622             ;; length++; 
0382   0622 FA FF FF      lea d, [bp + -1] ; $length
0383   0625 2A            mov b, [d]
0384   0626 D8            push b
0385   0627 FD 77         inc b
0386   0629 FA FF FF      lea d, [bp + -1] ; $length
0387   062C FD 43         mov [d], b
0388   062E E5            pop b
0389   062F 0A FF 05      jmp _while6_cond
0390   0632             _while6_exit:
0391   0632             ;; return length; 
0392   0632 FA FF FF      lea d, [bp + -1] ; $length
0393   0635 2A            mov b, [d]
0394   0636 F9            leave
0395   0637 09            ret
0396   0638             
0397   0638             exit:
0398   0638 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0399   063B             
0400   063B             ; --- BEGIN INLINE ASM BLOCK
0401   063B 05 0B         syscall sys_terminate_proc
0402   063D             ; --- END INLINE ASM BLOCK
0403   063D             
0404   063D F9            leave
0405   063E 09            ret
0406   063F             
0407   063F             atoi:
0408   063F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0409   0642             ; $result 
0410   0642 10 00 00      mov a, $0
0411   0645 45 FF FF      mov [bp + -1], a
0412   0648             ; $sign 
0413   0648 10 01 00      mov a, $1
0414   064B 45 FD FF      mov [bp + -3], a
0415   064E 52 04 00      sub sp, 4
0416   0651             ;; while (*str == ' ') str++; 
0417   0651             _while7_cond:
0418   0651 FA 05 00      lea d, [bp + 5] ; $str
0419   0654 2A            mov b, [d]
0420   0655 74            mov d, b
0421   0656 32            mov bl, [d]
0422   0657 A7 00         mov bh, 0
0423   0659             ; START RELATIONAL
0424   0659 D7            push a
0425   065A 11            mov a, b
0426   065B 26 20 00      mov b, $20
0427   065E B0            cmp a, b
0428   065F FD 71         seq ; ==
0429   0661 E4            pop a
0430   0662             ; END RELATIONAL
0431   0662 C0 00 00      cmp b, 0
0432   0665 C6 78 06      je _while7_exit
0433   0668             _while7_block:
0434   0668             ;; str++; 
0435   0668 FA 05 00      lea d, [bp + 5] ; $str
0436   066B 2A            mov b, [d]
0437   066C D8            push b
0438   066D FD 77         inc b
0439   066F FA 05 00      lea d, [bp + 5] ; $str
0440   0672 FD 43         mov [d], b
0441   0674 E5            pop b
0442   0675 0A 51 06      jmp _while7_cond
0443   0678             _while7_exit:
0444   0678             ;; if (*str == '-' || *str == '+') { 
0445   0678             _if8_cond:
0446   0678 FA 05 00      lea d, [bp + 5] ; $str
0447   067B 2A            mov b, [d]
0448   067C 74            mov d, b
0449   067D 32            mov bl, [d]
0450   067E A7 00         mov bh, 0
0451   0680             ; START RELATIONAL
0452   0680 D7            push a
0453   0681 11            mov a, b
0454   0682 26 2D 00      mov b, $2d
0455   0685 B0            cmp a, b
0456   0686 FD 71         seq ; ==
0457   0688 E4            pop a
0458   0689             ; END RELATIONAL
0459   0689 D7            push a
0460   068A 11            mov a, b
0461   068B FA 05 00      lea d, [bp + 5] ; $str
0462   068E 2A            mov b, [d]
0463   068F 74            mov d, b
0464   0690 32            mov bl, [d]
0465   0691 A7 00         mov bh, 0
0466   0693             ; START RELATIONAL
0467   0693 D7            push a
0468   0694 11            mov a, b
0469   0695 26 2B 00      mov b, $2b
0470   0698 B0            cmp a, b
0471   0699 FD 71         seq ; ==
0472   069B E4            pop a
0473   069C             ; END RELATIONAL
0474   069C FD A8         sor a, b ; ||
0475   069E E4            pop a
0476   069F C0 00 00      cmp b, 0
0477   06A2 C6 D9 06      je _if8_exit
0478   06A5             _if8_true:
0479   06A5             ;; if (*str == '-') sign = -1; 
0480   06A5             _if9_cond:
0481   06A5 FA 05 00      lea d, [bp + 5] ; $str
0482   06A8 2A            mov b, [d]
0483   06A9 74            mov d, b
0484   06AA 32            mov bl, [d]
0485   06AB A7 00         mov bh, 0
0486   06AD             ; START RELATIONAL
0487   06AD D7            push a
0488   06AE 11            mov a, b
0489   06AF 26 2D 00      mov b, $2d
0490   06B2 B0            cmp a, b
0491   06B3 FD 71         seq ; ==
0492   06B5 E4            pop a
0493   06B6             ; END RELATIONAL
0494   06B6 C0 00 00      cmp b, 0
0495   06B9 C6 C9 06      je _if9_exit
0496   06BC             _if9_true:
0497   06BC             ;; sign = -1; 
0498   06BC FA FD FF      lea d, [bp + -3] ; $sign
0499   06BF DA            push d
0500   06C0 26 FF FF      mov b, $ffff
0501   06C3 E7            pop d
0502   06C4 FD 43         mov [d], b
0503   06C6 0A C9 06      jmp _if9_exit
0504   06C9             _if9_exit:
0505   06C9             ;; str++; 
0506   06C9 FA 05 00      lea d, [bp + 5] ; $str
0507   06CC 2A            mov b, [d]
0508   06CD D8            push b
0509   06CE FD 77         inc b
0510   06D0 FA 05 00      lea d, [bp + 5] ; $str
0511   06D3 FD 43         mov [d], b
0512   06D5 E5            pop b
0513   06D6 0A D9 06      jmp _if8_exit
0514   06D9             _if8_exit:
0515   06D9             ;; while (*str >= '0' && *str <= '9') { 
0516   06D9             _while10_cond:
0517   06D9 FA 05 00      lea d, [bp + 5] ; $str
0518   06DC 2A            mov b, [d]
0519   06DD 74            mov d, b
0520   06DE 32            mov bl, [d]
0521   06DF A7 00         mov bh, 0
0522   06E1             ; START RELATIONAL
0523   06E1 D7            push a
0524   06E2 11            mov a, b
0525   06E3 26 30 00      mov b, $30
0526   06E6 B0            cmp a, b
0527   06E7 FD 82         sgeu ; >= (unsigned)
0528   06E9 E4            pop a
0529   06EA             ; END RELATIONAL
0530   06EA D7            push a
0531   06EB 11            mov a, b
0532   06EC FA 05 00      lea d, [bp + 5] ; $str
0533   06EF 2A            mov b, [d]
0534   06F0 74            mov d, b
0535   06F1 32            mov bl, [d]
0536   06F2 A7 00         mov bh, 0
0537   06F4             ; START RELATIONAL
0538   06F4 D7            push a
0539   06F5 11            mov a, b
0540   06F6 26 39 00      mov b, $39
0541   06F9 B0            cmp a, b
0542   06FA FD 76         sleu ; <= (unsigned)
0543   06FC E4            pop a
0544   06FD             ; END RELATIONAL
0545   06FD FD A7         sand a, b ; &&
0546   06FF E4            pop a
0547   0700 C0 00 00      cmp b, 0
0548   0703 C6 3E 07      je _while10_exit
0549   0706             _while10_block:
0550   0706             ;; result = result * 10 + (*str - '0'); 
0551   0706 FA FF FF      lea d, [bp + -1] ; $result
0552   0709 DA            push d
0553   070A FA FF FF      lea d, [bp + -1] ; $result
0554   070D 2A            mov b, [d]
0555   070E             ; START FACTORS
0556   070E D7            push a
0557   070F 11            mov a, b
0558   0710 26 0A 00      mov b, $a
0559   0713 AC            mul a, b ; *
0560   0714 11            mov a, b
0561   0715 27            mov b, a
0562   0716 E4            pop a
0563   0717             ; END FACTORS
0564   0717             ; START TERMS
0565   0717 D7            push a
0566   0718 11            mov a, b
0567   0719 FA 05 00      lea d, [bp + 5] ; $str
0568   071C 2A            mov b, [d]
0569   071D 74            mov d, b
0570   071E 32            mov bl, [d]
0571   071F A7 00         mov bh, 0
0572   0721             ; START TERMS
0573   0721 D7            push a
0574   0722 11            mov a, b
0575   0723 26 30 00      mov b, $30
0576   0726 60            sub a, b
0577   0727 27            mov b, a
0578   0728 E4            pop a
0579   0729             ; END TERMS
0580   0729 56            add b, a
0581   072A E4            pop a
0582   072B             ; END TERMS
0583   072B E7            pop d
0584   072C FD 43         mov [d], b
0585   072E             ;; str++; 
0586   072E FA 05 00      lea d, [bp + 5] ; $str
0587   0731 2A            mov b, [d]
0588   0732 D8            push b
0589   0733 FD 77         inc b
0590   0735 FA 05 00      lea d, [bp + 5] ; $str
0591   0738 FD 43         mov [d], b
0592   073A E5            pop b
0593   073B 0A D9 06      jmp _while10_cond
0594   073E             _while10_exit:
0595   073E             ;; return sign * result; 
0596   073E FA FD FF      lea d, [bp + -3] ; $sign
0597   0741 2A            mov b, [d]
0598   0742             ; START FACTORS
0599   0742 D7            push a
0600   0743 11            mov a, b
0601   0744 FA FF FF      lea d, [bp + -1] ; $result
0602   0747 2A            mov b, [d]
0603   0748 AC            mul a, b ; *
0604   0749 11            mov a, b
0605   074A 27            mov b, a
0606   074B E4            pop a
0607   074C             ; END FACTORS
0608   074C F9            leave
0609   074D 09            ret
0610   074E             
0611   074E             rand:
0612   074E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0613   0751             ; $sec 
0614   0751 52 02 00      sub sp, 2
0615   0754             
0616   0754             ; --- BEGIN INLINE ASM BLOCK
0617   0754 19 00         mov al, 0
0618   0756 05 01         syscall sys_rtc					
0619   0758 1A            mov al, ah
0620   0759 FA FF FF      lea d, [bp + -1] ; $sec
0621   075C 1E            mov al, [d]
0622   075D 22 00         mov ah, 0
0623   075F             ; --- END INLINE ASM BLOCK
0624   075F             
0625   075F             ;; return sec; 
0626   075F FA FF FF      lea d, [bp + -1] ; $sec
0627   0762 2A            mov b, [d]
0628   0763 F9            leave
0629   0764 09            ret
0630   0765             
0631   0765             srand:
0632   0765 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0633   0768 F9            leave
0634   0769 09            ret
0635   076A             
0636   076A             malloc:
0637   076A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0638   076D F9            leave
0639   076E 09            ret
0640   076F             
0641   076F             calloc:
0642   076F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0643   0772 F9            leave
0644   0773 09            ret
0645   0774             
0646   0774             realloc:
0647   0774 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0648   0777 F9            leave
0649   0778 09            ret
0650   0779             
0651   0779             alloc:
0652   0779 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0653   077C             ;; heap_top = heap_top + bytes; 
0654   077C 3B E6 27      mov d, _heap_top ; $heap_top
0655   077F DA            push d
0656   0780 3B E6 27      mov d, _heap_top ; $heap_top
0657   0783 2A            mov b, [d]
0658   0784             ; START TERMS
0659   0784 D7            push a
0660   0785 11            mov a, b
0661   0786 FA 05 00      lea d, [bp + 5] ; $bytes
0662   0789 2A            mov b, [d]
0663   078A 56            add b, a
0664   078B E4            pop a
0665   078C             ; END TERMS
0666   078C E7            pop d
0667   078D FD 43         mov [d], b
0668   078F             ;; return heap_top - bytes; 
0669   078F 3B E6 27      mov d, _heap_top ; $heap_top
0670   0792 2A            mov b, [d]
0671   0793             ; START TERMS
0672   0793 D7            push a
0673   0794 11            mov a, b
0674   0795 FA 05 00      lea d, [bp + 5] ; $bytes
0675   0798 2A            mov b, [d]
0676   0799 60            sub a, b
0677   079A 27            mov b, a
0678   079B E4            pop a
0679   079C             ; END TERMS
0680   079C F9            leave
0681   079D 09            ret
0682   079E             
0683   079E             free:
0684   079E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0685   07A1             ;; return heap_top = heap_top - bytes; 
0686   07A1 3B E6 27      mov d, _heap_top ; $heap_top
0687   07A4 DA            push d
0688   07A5 3B E6 27      mov d, _heap_top ; $heap_top
0689   07A8 2A            mov b, [d]
0690   07A9             ; START TERMS
0691   07A9 D7            push a
0692   07AA 11            mov a, b
0693   07AB FA 05 00      lea d, [bp + 5] ; $bytes
0694   07AE 2A            mov b, [d]
0695   07AF 60            sub a, b
0696   07B0 27            mov b, a
0697   07B1 E4            pop a
0698   07B2             ; END TERMS
0699   07B2 E7            pop d
0700   07B3 FD 43         mov [d], b
0701   07B5 F9            leave
0702   07B6 09            ret
0703   07B7             
0704   07B7             base64_encode:
0705   07B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0706   07BA             ; $i 
0707   07BA 10 00 00      mov a, $0
0708   07BD 45 FF FF      mov [bp + -1], a
0709   07C0             ; $j 
0710   07C0 10 00 00      mov a, $0
0711   07C3 45 FD FF      mov [bp + -3], a
0712   07C6             ; $k 
0713   07C6             ; $input_len 
0714   07C6             ; $input_buffer 
0715   07C6             ; $output_buffer 
0716   07C6 52 0F 00      sub sp, 15
0717   07C9             ;; input_len = strlen(input); 
0718   07C9 FA F9 FF      lea d, [bp + -7] ; $input_len
0719   07CC DA            push d
0720   07CD FA 05 00      lea d, [bp + 5] ; $input
0721   07D0 2A            mov b, [d]
0722   07D1 FD AB         swp b
0723   07D3 D8            push b
0724   07D4 07 EF 05      call strlen
0725   07D7 51 02 00      add sp, 2
0726   07DA E7            pop d
0727   07DB FD 43         mov [d], b
0728   07DD             ;; while (input_len--) { 
0729   07DD             _while11_cond:
0730   07DD FA F9 FF      lea d, [bp + -7] ; $input_len
0731   07E0 2A            mov b, [d]
0732   07E1 D8            push b
0733   07E2 FD 7D         dec b
0734   07E4 FA F9 FF      lea d, [bp + -7] ; $input_len
0735   07E7 FD 43         mov [d], b
0736   07E9 E5            pop b
0737   07EA C0 00 00      cmp b, 0
0738   07ED C6 A1 09      je _while11_exit
0739   07F0             _while11_block:
0740   07F0             ;; input_buffer[i++] = *(input++); 
0741   07F0 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0742   07F3 D7            push a
0743   07F4 DA            push d
0744   07F5 FA FF FF      lea d, [bp + -1] ; $i
0745   07F8 2A            mov b, [d]
0746   07F9 D8            push b
0747   07FA FD 77         inc b
0748   07FC FA FF FF      lea d, [bp + -1] ; $i
0749   07FF FD 43         mov [d], b
0750   0801 E5            pop b
0751   0802 E7            pop d
0752   0803 5A            add d, b
0753   0804 E4            pop a
0754   0805 DA            push d
0755   0806 FA 05 00      lea d, [bp + 5] ; $input
0756   0809 2A            mov b, [d]
0757   080A D8            push b
0758   080B FD 77         inc b
0759   080D FA 05 00      lea d, [bp + 5] ; $input
0760   0810 FD 43         mov [d], b
0761   0812 E5            pop b
0762   0813 74            mov d, b
0763   0814 32            mov bl, [d]
0764   0815 A7 00         mov bh, 0
0765   0817 E7            pop d
0766   0818 FD 3E         mov [d], bl
0767   081A             ;; if (i == 3) { 
0768   081A             _if12_cond:
0769   081A FA FF FF      lea d, [bp + -1] ; $i
0770   081D 2A            mov b, [d]
0771   081E             ; START RELATIONAL
0772   081E D7            push a
0773   081F 11            mov a, b
0774   0820 26 03 00      mov b, $3
0775   0823 B0            cmp a, b
0776   0824 FD 71         seq ; ==
0777   0826 E4            pop a
0778   0827             ; END RELATIONAL
0779   0827 C0 00 00      cmp b, 0
0780   082A C6 9E 09      je _if12_exit
0781   082D             _if12_true:
0782   082D             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0783   082D FA F2 FF      lea d, [bp + -14] ; $output_buffer
0784   0830 D7            push a
0785   0831 DA            push d
0786   0832 26 00 00      mov b, $0
0787   0835 E7            pop d
0788   0836 5A            add d, b
0789   0837 E4            pop a
0790   0838 DA            push d
0791   0839 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0792   083C D7            push a
0793   083D DA            push d
0794   083E 26 00 00      mov b, $0
0795   0841 E7            pop d
0796   0842 5A            add d, b
0797   0843 E4            pop a
0798   0844 32            mov bl, [d]
0799   0845 A7 00         mov bh, 0
0800   0847 D7            push a
0801   0848 11            mov a, b
0802   0849 26 FC 00      mov b, $fc
0803   084C 86            and a, b ; &
0804   084D 27            mov b, a
0805   084E E4            pop a
0806   084F             ; START SHIFT
0807   084F D7            push a
0808   0850 11            mov a, b
0809   0851 26 02 00      mov b, $2
0810   0854 FD 39         mov c, b
0811   0856 A5            ashr a, cl
0812   0857 27            mov b, a
0813   0858 E4            pop a
0814   0859             ; END SHIFT
0815   0859 E7            pop d
0816   085A FD 3E         mov [d], bl
0817   085C             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0818   085C FA F2 FF      lea d, [bp + -14] ; $output_buffer
0819   085F D7            push a
0820   0860 DA            push d
0821   0861 26 01 00      mov b, $1
0822   0864 E7            pop d
0823   0865 5A            add d, b
0824   0866 E4            pop a
0825   0867 DA            push d
0826   0868 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0827   086B D7            push a
0828   086C DA            push d
0829   086D 26 00 00      mov b, $0
0830   0870 E7            pop d
0831   0871 5A            add d, b
0832   0872 E4            pop a
0833   0873 32            mov bl, [d]
0834   0874 A7 00         mov bh, 0
0835   0876 D7            push a
0836   0877 11            mov a, b
0837   0878 26 03 00      mov b, $3
0838   087B 86            and a, b ; &
0839   087C 27            mov b, a
0840   087D E4            pop a
0841   087E             ; START SHIFT
0842   087E D7            push a
0843   087F 11            mov a, b
0844   0880 26 04 00      mov b, $4
0845   0883 FD 39         mov c, b
0846   0885 9D            shl a, cl
0847   0886 27            mov b, a
0848   0887 E4            pop a
0849   0888             ; END SHIFT
0850   0888             ; START TERMS
0851   0888 D7            push a
0852   0889 11            mov a, b
0853   088A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0854   088D D7            push a
0855   088E DA            push d
0856   088F 26 01 00      mov b, $1
0857   0892 E7            pop d
0858   0893 5A            add d, b
0859   0894 E4            pop a
0860   0895 32            mov bl, [d]
0861   0896 A7 00         mov bh, 0
0862   0898 D7            push a
0863   0899 11            mov a, b
0864   089A 26 F0 00      mov b, $f0
0865   089D 86            and a, b ; &
0866   089E 27            mov b, a
0867   089F E4            pop a
0868   08A0             ; START SHIFT
0869   08A0 D7            push a
0870   08A1 11            mov a, b
0871   08A2 26 04 00      mov b, $4
0872   08A5 FD 39         mov c, b
0873   08A7 A5            ashr a, cl
0874   08A8 27            mov b, a
0875   08A9 E4            pop a
0876   08AA             ; END SHIFT
0877   08AA 56            add b, a
0878   08AB E4            pop a
0879   08AC             ; END TERMS
0880   08AC E7            pop d
0881   08AD FD 3E         mov [d], bl
0882   08AF             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0883   08AF FA F2 FF      lea d, [bp + -14] ; $output_buffer
0884   08B2 D7            push a
0885   08B3 DA            push d
0886   08B4 26 02 00      mov b, $2
0887   08B7 E7            pop d
0888   08B8 5A            add d, b
0889   08B9 E4            pop a
0890   08BA DA            push d
0891   08BB FA F6 FF      lea d, [bp + -10] ; $input_buffer
0892   08BE D7            push a
0893   08BF DA            push d
0894   08C0 26 01 00      mov b, $1
0895   08C3 E7            pop d
0896   08C4 5A            add d, b
0897   08C5 E4            pop a
0898   08C6 32            mov bl, [d]
0899   08C7 A7 00         mov bh, 0
0900   08C9 D7            push a
0901   08CA 11            mov a, b
0902   08CB 26 0F 00      mov b, $f
0903   08CE 86            and a, b ; &
0904   08CF 27            mov b, a
0905   08D0 E4            pop a
0906   08D1             ; START SHIFT
0907   08D1 D7            push a
0908   08D2 11            mov a, b
0909   08D3 26 02 00      mov b, $2
0910   08D6 FD 39         mov c, b
0911   08D8 9D            shl a, cl
0912   08D9 27            mov b, a
0913   08DA E4            pop a
0914   08DB             ; END SHIFT
0915   08DB             ; START TERMS
0916   08DB D7            push a
0917   08DC 11            mov a, b
0918   08DD FA F6 FF      lea d, [bp + -10] ; $input_buffer
0919   08E0 D7            push a
0920   08E1 DA            push d
0921   08E2 26 02 00      mov b, $2
0922   08E5 E7            pop d
0923   08E6 5A            add d, b
0924   08E7 E4            pop a
0925   08E8 32            mov bl, [d]
0926   08E9 A7 00         mov bh, 0
0927   08EB D7            push a
0928   08EC 11            mov a, b
0929   08ED 26 C0 00      mov b, $c0
0930   08F0 86            and a, b ; &
0931   08F1 27            mov b, a
0932   08F2 E4            pop a
0933   08F3             ; START SHIFT
0934   08F3 D7            push a
0935   08F4 11            mov a, b
0936   08F5 26 06 00      mov b, $6
0937   08F8 FD 39         mov c, b
0938   08FA A5            ashr a, cl
0939   08FB 27            mov b, a
0940   08FC E4            pop a
0941   08FD             ; END SHIFT
0942   08FD 56            add b, a
0943   08FE E4            pop a
0944   08FF             ; END TERMS
0945   08FF E7            pop d
0946   0900 FD 3E         mov [d], bl
0947   0902             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
0948   0902 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0949   0905 D7            push a
0950   0906 DA            push d
0951   0907 26 03 00      mov b, $3
0952   090A E7            pop d
0953   090B 5A            add d, b
0954   090C E4            pop a
0955   090D DA            push d
0956   090E FA F6 FF      lea d, [bp + -10] ; $input_buffer
0957   0911 D7            push a
0958   0912 DA            push d
0959   0913 26 02 00      mov b, $2
0960   0916 E7            pop d
0961   0917 5A            add d, b
0962   0918 E4            pop a
0963   0919 32            mov bl, [d]
0964   091A A7 00         mov bh, 0
0965   091C D7            push a
0966   091D 11            mov a, b
0967   091E 26 3F 00      mov b, $3f
0968   0921 86            and a, b ; &
0969   0922 27            mov b, a
0970   0923 E4            pop a
0971   0924 E7            pop d
0972   0925 FD 3E         mov [d], bl
0973   0927             ;; for (i = 0; i < 4; i++) { 
0974   0927             _for13_init:
0975   0927 FA FF FF      lea d, [bp + -1] ; $i
0976   092A DA            push d
0977   092B 26 00 00      mov b, $0
0978   092E E7            pop d
0979   092F FD 43         mov [d], b
0980   0931             _for13_cond:
0981   0931 FA FF FF      lea d, [bp + -1] ; $i
0982   0934 2A            mov b, [d]
0983   0935             ; START RELATIONAL
0984   0935 D7            push a
0985   0936 11            mov a, b
0986   0937 26 04 00      mov b, $4
0987   093A B0            cmp a, b
0988   093B FD 73         slt ; <= (signed)
0989   093D E4            pop a
0990   093E             ; END RELATIONAL
0991   093E C0 00 00      cmp b, 0
0992   0941 C6 91 09      je _for13_exit
0993   0944             _for13_block:
0994   0944             ;; output[j++] = base64_table[output_buffer[i]]; 
0995   0944 FA 07 00      lea d, [bp + 7] ; $output
0996   0947 FD 2A         mov d, [d]
0997   0949 D7            push a
0998   094A DA            push d
0999   094B FA FD FF      lea d, [bp + -3] ; $j
1000   094E 2A            mov b, [d]
1001   094F D8            push b
1002   0950 FD 77         inc b
1003   0952 FA FD FF      lea d, [bp + -3] ; $j
1004   0955 FD 43         mov [d], b
1005   0957 E5            pop b
1006   0958 E7            pop d
1007   0959 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1008   095D E4            pop a
1009   095E DA            push d
1010   095F 3B D8 1D      mov d, _base64_table ; $base64_table
1011   0962 FD 2A         mov d, [d]
1012   0964 D7            push a
1013   0965 DA            push d
1014   0966 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1015   0969 D7            push a
1016   096A DA            push d
1017   096B FA FF FF      lea d, [bp + -1] ; $i
1018   096E 2A            mov b, [d]
1019   096F E7            pop d
1020   0970 5A            add d, b
1021   0971 E4            pop a
1022   0972 32            mov bl, [d]
1023   0973 A7 00         mov bh, 0
1024   0975 E7            pop d
1025   0976 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1026   097A E4            pop a
1027   097B 32            mov bl, [d]
1028   097C A7 00         mov bh, 0
1029   097E E7            pop d
1030   097F FD 3E         mov [d], bl
1031   0981             _for13_update:
1032   0981 FA FF FF      lea d, [bp + -1] ; $i
1033   0984 2A            mov b, [d]
1034   0985 D8            push b
1035   0986 FD 77         inc b
1036   0988 FA FF FF      lea d, [bp + -1] ; $i
1037   098B FD 43         mov [d], b
1038   098D E5            pop b
1039   098E 0A 31 09      jmp _for13_cond
1040   0991             _for13_exit:
1041   0991             ;; i = 0; 
1042   0991 FA FF FF      lea d, [bp + -1] ; $i
1043   0994 DA            push d
1044   0995 26 00 00      mov b, $0
1045   0998 E7            pop d
1046   0999 FD 43         mov [d], b
1047   099B 0A 9E 09      jmp _if12_exit
1048   099E             _if12_exit:
1049   099E 0A DD 07      jmp _while11_cond
1050   09A1             _while11_exit:
1051   09A1             ;; if (i) { 
1052   09A1             _if14_cond:
1053   09A1 FA FF FF      lea d, [bp + -1] ; $i
1054   09A4 2A            mov b, [d]
1055   09A5 C0 00 00      cmp b, 0
1056   09A8 C6 76 0B      je _if14_exit
1057   09AB             _if14_true:
1058   09AB             ;; for (k = i; k < 3; k++) { 
1059   09AB             _for15_init:
1060   09AB FA FB FF      lea d, [bp + -5] ; $k
1061   09AE DA            push d
1062   09AF FA FF FF      lea d, [bp + -1] ; $i
1063   09B2 2A            mov b, [d]
1064   09B3 E7            pop d
1065   09B4 FD 43         mov [d], b
1066   09B6             _for15_cond:
1067   09B6 FA FB FF      lea d, [bp + -5] ; $k
1068   09B9 2A            mov b, [d]
1069   09BA             ; START RELATIONAL
1070   09BA D7            push a
1071   09BB 11            mov a, b
1072   09BC 26 03 00      mov b, $3
1073   09BF B0            cmp a, b
1074   09C0 FD 73         slt ; <= (signed)
1075   09C2 E4            pop a
1076   09C3             ; END RELATIONAL
1077   09C3 C0 00 00      cmp b, 0
1078   09C6 C6 EC 09      je _for15_exit
1079   09C9             _for15_block:
1080   09C9             ;; input_buffer[k] = '\0'; 
1081   09C9 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1082   09CC D7            push a
1083   09CD DA            push d
1084   09CE FA FB FF      lea d, [bp + -5] ; $k
1085   09D1 2A            mov b, [d]
1086   09D2 E7            pop d
1087   09D3 5A            add d, b
1088   09D4 E4            pop a
1089   09D5 DA            push d
1090   09D6 26 00 00      mov b, $0
1091   09D9 E7            pop d
1092   09DA FD 3E         mov [d], bl
1093   09DC             _for15_update:
1094   09DC FA FB FF      lea d, [bp + -5] ; $k
1095   09DF 2A            mov b, [d]
1096   09E0 D8            push b
1097   09E1 FD 77         inc b
1098   09E3 FA FB FF      lea d, [bp + -5] ; $k
1099   09E6 FD 43         mov [d], b
1100   09E8 E5            pop b
1101   09E9 0A B6 09      jmp _for15_cond
1102   09EC             _for15_exit:
1103   09EC             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1104   09EC FA F2 FF      lea d, [bp + -14] ; $output_buffer
1105   09EF D7            push a
1106   09F0 DA            push d
1107   09F1 26 00 00      mov b, $0
1108   09F4 E7            pop d
1109   09F5 5A            add d, b
1110   09F6 E4            pop a
1111   09F7 DA            push d
1112   09F8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1113   09FB D7            push a
1114   09FC DA            push d
1115   09FD 26 00 00      mov b, $0
1116   0A00 E7            pop d
1117   0A01 5A            add d, b
1118   0A02 E4            pop a
1119   0A03 32            mov bl, [d]
1120   0A04 A7 00         mov bh, 0
1121   0A06 D7            push a
1122   0A07 11            mov a, b
1123   0A08 26 FC 00      mov b, $fc
1124   0A0B 86            and a, b ; &
1125   0A0C 27            mov b, a
1126   0A0D E4            pop a
1127   0A0E             ; START SHIFT
1128   0A0E D7            push a
1129   0A0F 11            mov a, b
1130   0A10 26 02 00      mov b, $2
1131   0A13 FD 39         mov c, b
1132   0A15 A5            ashr a, cl
1133   0A16 27            mov b, a
1134   0A17 E4            pop a
1135   0A18             ; END SHIFT
1136   0A18 E7            pop d
1137   0A19 FD 3E         mov [d], bl
1138   0A1B             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1139   0A1B FA F2 FF      lea d, [bp + -14] ; $output_buffer
1140   0A1E D7            push a
1141   0A1F DA            push d
1142   0A20 26 01 00      mov b, $1
1143   0A23 E7            pop d
1144   0A24 5A            add d, b
1145   0A25 E4            pop a
1146   0A26 DA            push d
1147   0A27 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1148   0A2A D7            push a
1149   0A2B DA            push d
1150   0A2C 26 00 00      mov b, $0
1151   0A2F E7            pop d
1152   0A30 5A            add d, b
1153   0A31 E4            pop a
1154   0A32 32            mov bl, [d]
1155   0A33 A7 00         mov bh, 0
1156   0A35 D7            push a
1157   0A36 11            mov a, b
1158   0A37 26 03 00      mov b, $3
1159   0A3A 86            and a, b ; &
1160   0A3B 27            mov b, a
1161   0A3C E4            pop a
1162   0A3D             ; START SHIFT
1163   0A3D D7            push a
1164   0A3E 11            mov a, b
1165   0A3F 26 04 00      mov b, $4
1166   0A42 FD 39         mov c, b
1167   0A44 9D            shl a, cl
1168   0A45 27            mov b, a
1169   0A46 E4            pop a
1170   0A47             ; END SHIFT
1171   0A47             ; START TERMS
1172   0A47 D7            push a
1173   0A48 11            mov a, b
1174   0A49 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1175   0A4C D7            push a
1176   0A4D DA            push d
1177   0A4E 26 01 00      mov b, $1
1178   0A51 E7            pop d
1179   0A52 5A            add d, b
1180   0A53 E4            pop a
1181   0A54 32            mov bl, [d]
1182   0A55 A7 00         mov bh, 0
1183   0A57 D7            push a
1184   0A58 11            mov a, b
1185   0A59 26 F0 00      mov b, $f0
1186   0A5C 86            and a, b ; &
1187   0A5D 27            mov b, a
1188   0A5E E4            pop a
1189   0A5F             ; START SHIFT
1190   0A5F D7            push a
1191   0A60 11            mov a, b
1192   0A61 26 04 00      mov b, $4
1193   0A64 FD 39         mov c, b
1194   0A66 A5            ashr a, cl
1195   0A67 27            mov b, a
1196   0A68 E4            pop a
1197   0A69             ; END SHIFT
1198   0A69 56            add b, a
1199   0A6A E4            pop a
1200   0A6B             ; END TERMS
1201   0A6B E7            pop d
1202   0A6C FD 3E         mov [d], bl
1203   0A6E             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1204   0A6E FA F2 FF      lea d, [bp + -14] ; $output_buffer
1205   0A71 D7            push a
1206   0A72 DA            push d
1207   0A73 26 02 00      mov b, $2
1208   0A76 E7            pop d
1209   0A77 5A            add d, b
1210   0A78 E4            pop a
1211   0A79 DA            push d
1212   0A7A FA F6 FF      lea d, [bp + -10] ; $input_buffer
1213   0A7D D7            push a
1214   0A7E DA            push d
1215   0A7F 26 01 00      mov b, $1
1216   0A82 E7            pop d
1217   0A83 5A            add d, b
1218   0A84 E4            pop a
1219   0A85 32            mov bl, [d]
1220   0A86 A7 00         mov bh, 0
1221   0A88 D7            push a
1222   0A89 11            mov a, b
1223   0A8A 26 0F 00      mov b, $f
1224   0A8D 86            and a, b ; &
1225   0A8E 27            mov b, a
1226   0A8F E4            pop a
1227   0A90             ; START SHIFT
1228   0A90 D7            push a
1229   0A91 11            mov a, b
1230   0A92 26 02 00      mov b, $2
1231   0A95 FD 39         mov c, b
1232   0A97 9D            shl a, cl
1233   0A98 27            mov b, a
1234   0A99 E4            pop a
1235   0A9A             ; END SHIFT
1236   0A9A             ; START TERMS
1237   0A9A D7            push a
1238   0A9B 11            mov a, b
1239   0A9C FA F6 FF      lea d, [bp + -10] ; $input_buffer
1240   0A9F D7            push a
1241   0AA0 DA            push d
1242   0AA1 26 02 00      mov b, $2
1243   0AA4 E7            pop d
1244   0AA5 5A            add d, b
1245   0AA6 E4            pop a
1246   0AA7 32            mov bl, [d]
1247   0AA8 A7 00         mov bh, 0
1248   0AAA D7            push a
1249   0AAB 11            mov a, b
1250   0AAC 26 C0 00      mov b, $c0
1251   0AAF 86            and a, b ; &
1252   0AB0 27            mov b, a
1253   0AB1 E4            pop a
1254   0AB2             ; START SHIFT
1255   0AB2 D7            push a
1256   0AB3 11            mov a, b
1257   0AB4 26 06 00      mov b, $6
1258   0AB7 FD 39         mov c, b
1259   0AB9 A5            ashr a, cl
1260   0ABA 27            mov b, a
1261   0ABB E4            pop a
1262   0ABC             ; END SHIFT
1263   0ABC 56            add b, a
1264   0ABD E4            pop a
1265   0ABE             ; END TERMS
1266   0ABE E7            pop d
1267   0ABF FD 3E         mov [d], bl
1268   0AC1             ;; for (k = 0; k < i + 1; k++) { 
1269   0AC1             _for16_init:
1270   0AC1 FA FB FF      lea d, [bp + -5] ; $k
1271   0AC4 DA            push d
1272   0AC5 26 00 00      mov b, $0
1273   0AC8 E7            pop d
1274   0AC9 FD 43         mov [d], b
1275   0ACB             _for16_cond:
1276   0ACB FA FB FF      lea d, [bp + -5] ; $k
1277   0ACE 2A            mov b, [d]
1278   0ACF             ; START RELATIONAL
1279   0ACF D7            push a
1280   0AD0 11            mov a, b
1281   0AD1 FA FF FF      lea d, [bp + -1] ; $i
1282   0AD4 2A            mov b, [d]
1283   0AD5             ; START TERMS
1284   0AD5 D7            push a
1285   0AD6 11            mov a, b
1286   0AD7 26 01 00      mov b, $1
1287   0ADA 56            add b, a
1288   0ADB E4            pop a
1289   0ADC             ; END TERMS
1290   0ADC B0            cmp a, b
1291   0ADD FD 73         slt ; <= (signed)
1292   0ADF E4            pop a
1293   0AE0             ; END RELATIONAL
1294   0AE0 C0 00 00      cmp b, 0
1295   0AE3 C6 33 0B      je _for16_exit
1296   0AE6             _for16_block:
1297   0AE6             ;; output[j++] = base64_table[output_buffer[k]]; 
1298   0AE6 FA 07 00      lea d, [bp + 7] ; $output
1299   0AE9 FD 2A         mov d, [d]
1300   0AEB D7            push a
1301   0AEC DA            push d
1302   0AED FA FD FF      lea d, [bp + -3] ; $j
1303   0AF0 2A            mov b, [d]
1304   0AF1 D8            push b
1305   0AF2 FD 77         inc b
1306   0AF4 FA FD FF      lea d, [bp + -3] ; $j
1307   0AF7 FD 43         mov [d], b
1308   0AF9 E5            pop b
1309   0AFA E7            pop d
1310   0AFB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1311   0AFF E4            pop a
1312   0B00 DA            push d
1313   0B01 3B D8 1D      mov d, _base64_table ; $base64_table
1314   0B04 FD 2A         mov d, [d]
1315   0B06 D7            push a
1316   0B07 DA            push d
1317   0B08 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1318   0B0B D7            push a
1319   0B0C DA            push d
1320   0B0D FA FB FF      lea d, [bp + -5] ; $k
1321   0B10 2A            mov b, [d]
1322   0B11 E7            pop d
1323   0B12 5A            add d, b
1324   0B13 E4            pop a
1325   0B14 32            mov bl, [d]
1326   0B15 A7 00         mov bh, 0
1327   0B17 E7            pop d
1328   0B18 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1329   0B1C E4            pop a
1330   0B1D 32            mov bl, [d]
1331   0B1E A7 00         mov bh, 0
1332   0B20 E7            pop d
1333   0B21 FD 3E         mov [d], bl
1334   0B23             _for16_update:
1335   0B23 FA FB FF      lea d, [bp + -5] ; $k
1336   0B26 2A            mov b, [d]
1337   0B27 D8            push b
1338   0B28 FD 77         inc b
1339   0B2A FA FB FF      lea d, [bp + -5] ; $k
1340   0B2D FD 43         mov [d], b
1341   0B2F E5            pop b
1342   0B30 0A CB 0A      jmp _for16_cond
1343   0B33             _for16_exit:
1344   0B33             ;; while (i++ < 3) { 
1345   0B33             _while17_cond:
1346   0B33 FA FF FF      lea d, [bp + -1] ; $i
1347   0B36 2A            mov b, [d]
1348   0B37 D8            push b
1349   0B38 FD 77         inc b
1350   0B3A FA FF FF      lea d, [bp + -1] ; $i
1351   0B3D FD 43         mov [d], b
1352   0B3F E5            pop b
1353   0B40             ; START RELATIONAL
1354   0B40 D7            push a
1355   0B41 11            mov a, b
1356   0B42 26 03 00      mov b, $3
1357   0B45 B0            cmp a, b
1358   0B46 FD 73         slt ; <= (signed)
1359   0B48 E4            pop a
1360   0B49             ; END RELATIONAL
1361   0B49 C0 00 00      cmp b, 0
1362   0B4C C6 73 0B      je _while17_exit
1363   0B4F             _while17_block:
1364   0B4F             ;; output[j++] = '='; 
1365   0B4F FA 07 00      lea d, [bp + 7] ; $output
1366   0B52 FD 2A         mov d, [d]
1367   0B54 D7            push a
1368   0B55 DA            push d
1369   0B56 FA FD FF      lea d, [bp + -3] ; $j
1370   0B59 2A            mov b, [d]
1371   0B5A D8            push b
1372   0B5B FD 77         inc b
1373   0B5D FA FD FF      lea d, [bp + -3] ; $j
1374   0B60 FD 43         mov [d], b
1375   0B62 E5            pop b
1376   0B63 E7            pop d
1377   0B64 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1378   0B68 E4            pop a
1379   0B69 DA            push d
1380   0B6A 26 3D 00      mov b, $3d
1381   0B6D E7            pop d
1382   0B6E FD 3E         mov [d], bl
1383   0B70 0A 33 0B      jmp _while17_cond
1384   0B73             _while17_exit:
1385   0B73 0A 76 0B      jmp _if14_exit
1386   0B76             _if14_exit:
1387   0B76             ;; output[j] = '\0'; 
1388   0B76 FA 07 00      lea d, [bp + 7] ; $output
1389   0B79 FD 2A         mov d, [d]
1390   0B7B D7            push a
1391   0B7C DA            push d
1392   0B7D FA FD FF      lea d, [bp + -3] ; $j
1393   0B80 2A            mov b, [d]
1394   0B81 E7            pop d
1395   0B82 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1396   0B86 E4            pop a
1397   0B87 DA            push d
1398   0B88 26 00 00      mov b, $0
1399   0B8B E7            pop d
1400   0B8C FD 3E         mov [d], bl
1401   0B8E F9            leave
1402   0B8F 09            ret
1403   0B90             
1404   0B90             base64_char_value:
1405   0B90 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1406   0B93             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1407   0B93             _if18_cond:
1408   0B93 FA 05 00      lea d, [bp + 5] ; $c
1409   0B96 32            mov bl, [d]
1410   0B97 A7 00         mov bh, 0
1411   0B99             ; START RELATIONAL
1412   0B99 D7            push a
1413   0B9A 11            mov a, b
1414   0B9B 26 41 00      mov b, $41
1415   0B9E B0            cmp a, b
1416   0B9F FD 80         sge ; >=
1417   0BA1 E4            pop a
1418   0BA2             ; END RELATIONAL
1419   0BA2 D7            push a
1420   0BA3 11            mov a, b
1421   0BA4 FA 05 00      lea d, [bp + 5] ; $c
1422   0BA7 32            mov bl, [d]
1423   0BA8 A7 00         mov bh, 0
1424   0BAA             ; START RELATIONAL
1425   0BAA D7            push a
1426   0BAB 11            mov a, b
1427   0BAC 26 5A 00      mov b, $5a
1428   0BAF B0            cmp a, b
1429   0BB0 FD 74         sle ; <=
1430   0BB2 E4            pop a
1431   0BB3             ; END RELATIONAL
1432   0BB3 FD A7         sand a, b ; &&
1433   0BB5 E4            pop a
1434   0BB6 C0 00 00      cmp b, 0
1435   0BB9 C6 CF 0B      je _if18_exit
1436   0BBC             _if18_true:
1437   0BBC             ;; return c - 'A'; 
1438   0BBC FA 05 00      lea d, [bp + 5] ; $c
1439   0BBF 32            mov bl, [d]
1440   0BC0 A7 00         mov bh, 0
1441   0BC2             ; START TERMS
1442   0BC2 D7            push a
1443   0BC3 11            mov a, b
1444   0BC4 26 41 00      mov b, $41
1445   0BC7 60            sub a, b
1446   0BC8 27            mov b, a
1447   0BC9 E4            pop a
1448   0BCA             ; END TERMS
1449   0BCA F9            leave
1450   0BCB 09            ret
1451   0BCC 0A CF 0B      jmp _if18_exit
1452   0BCF             _if18_exit:
1453   0BCF             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1454   0BCF             _if19_cond:
1455   0BCF FA 05 00      lea d, [bp + 5] ; $c
1456   0BD2 32            mov bl, [d]
1457   0BD3 A7 00         mov bh, 0
1458   0BD5             ; START RELATIONAL
1459   0BD5 D7            push a
1460   0BD6 11            mov a, b
1461   0BD7 26 61 00      mov b, $61
1462   0BDA B0            cmp a, b
1463   0BDB FD 80         sge ; >=
1464   0BDD E4            pop a
1465   0BDE             ; END RELATIONAL
1466   0BDE D7            push a
1467   0BDF 11            mov a, b
1468   0BE0 FA 05 00      lea d, [bp + 5] ; $c
1469   0BE3 32            mov bl, [d]
1470   0BE4 A7 00         mov bh, 0
1471   0BE6             ; START RELATIONAL
1472   0BE6 D7            push a
1473   0BE7 11            mov a, b
1474   0BE8 26 7A 00      mov b, $7a
1475   0BEB B0            cmp a, b
1476   0BEC FD 74         sle ; <=
1477   0BEE E4            pop a
1478   0BEF             ; END RELATIONAL
1479   0BEF FD A7         sand a, b ; &&
1480   0BF1 E4            pop a
1481   0BF2 C0 00 00      cmp b, 0
1482   0BF5 C6 10 0C      je _if19_exit
1483   0BF8             _if19_true:
1484   0BF8             ;; return c - 'a' + 26; 
1485   0BF8 FA 05 00      lea d, [bp + 5] ; $c
1486   0BFB 32            mov bl, [d]
1487   0BFC A7 00         mov bh, 0
1488   0BFE             ; START TERMS
1489   0BFE D7            push a
1490   0BFF 11            mov a, b
1491   0C00 26 61 00      mov b, $61
1492   0C03 60            sub a, b
1493   0C04 27            mov b, a
1494   0C05 11            mov a, b
1495   0C06 26 1A 00      mov b, $1a
1496   0C09 56            add b, a
1497   0C0A E4            pop a
1498   0C0B             ; END TERMS
1499   0C0B F9            leave
1500   0C0C 09            ret
1501   0C0D 0A 10 0C      jmp _if19_exit
1502   0C10             _if19_exit:
1503   0C10             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1504   0C10             _if20_cond:
1505   0C10 FA 05 00      lea d, [bp + 5] ; $c
1506   0C13 32            mov bl, [d]
1507   0C14 A7 00         mov bh, 0
1508   0C16             ; START RELATIONAL
1509   0C16 D7            push a
1510   0C17 11            mov a, b
1511   0C18 26 30 00      mov b, $30
1512   0C1B B0            cmp a, b
1513   0C1C FD 80         sge ; >=
1514   0C1E E4            pop a
1515   0C1F             ; END RELATIONAL
1516   0C1F D7            push a
1517   0C20 11            mov a, b
1518   0C21 FA 05 00      lea d, [bp + 5] ; $c
1519   0C24 32            mov bl, [d]
1520   0C25 A7 00         mov bh, 0
1521   0C27             ; START RELATIONAL
1522   0C27 D7            push a
1523   0C28 11            mov a, b
1524   0C29 26 39 00      mov b, $39
1525   0C2C B0            cmp a, b
1526   0C2D FD 74         sle ; <=
1527   0C2F E4            pop a
1528   0C30             ; END RELATIONAL
1529   0C30 FD A7         sand a, b ; &&
1530   0C32 E4            pop a
1531   0C33 C0 00 00      cmp b, 0
1532   0C36 C6 51 0C      je _if20_exit
1533   0C39             _if20_true:
1534   0C39             ;; return c - '0' + 52; 
1535   0C39 FA 05 00      lea d, [bp + 5] ; $c
1536   0C3C 32            mov bl, [d]
1537   0C3D A7 00         mov bh, 0
1538   0C3F             ; START TERMS
1539   0C3F D7            push a
1540   0C40 11            mov a, b
1541   0C41 26 30 00      mov b, $30
1542   0C44 60            sub a, b
1543   0C45 27            mov b, a
1544   0C46 11            mov a, b
1545   0C47 26 34 00      mov b, $34
1546   0C4A 56            add b, a
1547   0C4B E4            pop a
1548   0C4C             ; END TERMS
1549   0C4C F9            leave
1550   0C4D 09            ret
1551   0C4E 0A 51 0C      jmp _if20_exit
1552   0C51             _if20_exit:
1553   0C51             ;; if (c == '+') return 62; 
1554   0C51             _if21_cond:
1555   0C51 FA 05 00      lea d, [bp + 5] ; $c
1556   0C54 32            mov bl, [d]
1557   0C55 A7 00         mov bh, 0
1558   0C57             ; START RELATIONAL
1559   0C57 D7            push a
1560   0C58 11            mov a, b
1561   0C59 26 2B 00      mov b, $2b
1562   0C5C B0            cmp a, b
1563   0C5D FD 71         seq ; ==
1564   0C5F E4            pop a
1565   0C60             ; END RELATIONAL
1566   0C60 C0 00 00      cmp b, 0
1567   0C63 C6 6E 0C      je _if21_exit
1568   0C66             _if21_true:
1569   0C66             ;; return 62; 
1570   0C66 26 3E 00      mov b, $3e
1571   0C69 F9            leave
1572   0C6A 09            ret
1573   0C6B 0A 6E 0C      jmp _if21_exit
1574   0C6E             _if21_exit:
1575   0C6E             ;; if (c == '/') return 63; 
1576   0C6E             _if22_cond:
1577   0C6E FA 05 00      lea d, [bp + 5] ; $c
1578   0C71 32            mov bl, [d]
1579   0C72 A7 00         mov bh, 0
1580   0C74             ; START RELATIONAL
1581   0C74 D7            push a
1582   0C75 11            mov a, b
1583   0C76 26 2F 00      mov b, $2f
1584   0C79 B0            cmp a, b
1585   0C7A FD 71         seq ; ==
1586   0C7C E4            pop a
1587   0C7D             ; END RELATIONAL
1588   0C7D C0 00 00      cmp b, 0
1589   0C80 C6 8B 0C      je _if22_exit
1590   0C83             _if22_true:
1591   0C83             ;; return 63; 
1592   0C83 26 3F 00      mov b, $3f
1593   0C86 F9            leave
1594   0C87 09            ret
1595   0C88 0A 8B 0C      jmp _if22_exit
1596   0C8B             _if22_exit:
1597   0C8B             ;; return -1; 
1598   0C8B 26 FF FF      mov b, $ffff
1599   0C8E F9            leave
1600   0C8F 09            ret
1601   0C90             
1602   0C90             base64_decode:
1603   0C90 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1604   0C93             ; $i 
1605   0C93 10 00 00      mov a, $0
1606   0C96 45 FF FF      mov [bp + -1], a
1607   0C99             ; $j 
1608   0C99 10 00 00      mov a, $0
1609   0C9C 45 FD FF      mov [bp + -3], a
1610   0C9F             ; $k 
1611   0C9F 10 00 00      mov a, $0
1612   0CA2 45 FB FF      mov [bp + -5], a
1613   0CA5             ; $input_len 
1614   0CA5             ; $input_buffer 
1615   0CA5             ; $output_buffer 
1616   0CA5 52 0F 00      sub sp, 15
1617   0CA8             ;; input_len = strlen(input); 
1618   0CA8 FA F9 FF      lea d, [bp + -7] ; $input_len
1619   0CAB DA            push d
1620   0CAC FA 05 00      lea d, [bp + 5] ; $input
1621   0CAF 2A            mov b, [d]
1622   0CB0 FD AB         swp b
1623   0CB2 D8            push b
1624   0CB3 07 EF 05      call strlen
1625   0CB6 51 02 00      add sp, 2
1626   0CB9 E7            pop d
1627   0CBA FD 43         mov [d], b
1628   0CBC             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1629   0CBC             _while23_cond:
1630   0CBC FA F9 FF      lea d, [bp + -7] ; $input_len
1631   0CBF 2A            mov b, [d]
1632   0CC0 D8            push b
1633   0CC1 FD 7D         dec b
1634   0CC3 FA F9 FF      lea d, [bp + -7] ; $input_len
1635   0CC6 FD 43         mov [d], b
1636   0CC8 E5            pop b
1637   0CC9 D7            push a
1638   0CCA 11            mov a, b
1639   0CCB FA 05 00      lea d, [bp + 5] ; $input
1640   0CCE FD 2A         mov d, [d]
1641   0CD0 D7            push a
1642   0CD1 DA            push d
1643   0CD2 FA FB FF      lea d, [bp + -5] ; $k
1644   0CD5 2A            mov b, [d]
1645   0CD6 E7            pop d
1646   0CD7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1647   0CDB E4            pop a
1648   0CDC 32            mov bl, [d]
1649   0CDD A7 00         mov bh, 0
1650   0CDF             ; START RELATIONAL
1651   0CDF D7            push a
1652   0CE0 11            mov a, b
1653   0CE1 26 3D 00      mov b, $3d
1654   0CE4 B0            cmp a, b
1655   0CE5 FD 72         sneq ; !=
1656   0CE7 E4            pop a
1657   0CE8             ; END RELATIONAL
1658   0CE8 FD A7         sand a, b ; &&
1659   0CEA 11            mov a, b
1660   0CEB FA 05 00      lea d, [bp + 5] ; $input
1661   0CEE FD 2A         mov d, [d]
1662   0CF0 D7            push a
1663   0CF1 DA            push d
1664   0CF2 FA FB FF      lea d, [bp + -5] ; $k
1665   0CF5 2A            mov b, [d]
1666   0CF6 E7            pop d
1667   0CF7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1668   0CFB E4            pop a
1669   0CFC 32            mov bl, [d]
1670   0CFD A7 00         mov bh, 0
1671   0CFF DD            push bl
1672   0D00 07 90 0B      call base64_char_value
1673   0D03 51 01 00      add sp, 1
1674   0D06             ; START RELATIONAL
1675   0D06 D7            push a
1676   0D07 11            mov a, b
1677   0D08 26 FF FF      mov b, $ffff
1678   0D0B B0            cmp a, b
1679   0D0C FD 72         sneq ; !=
1680   0D0E E4            pop a
1681   0D0F             ; END RELATIONAL
1682   0D0F FD A7         sand a, b ; &&
1683   0D11 E4            pop a
1684   0D12 C0 00 00      cmp b, 0
1685   0D15 C6 FD 0E      je _while23_exit
1686   0D18             _while23_block:
1687   0D18             ;; input_buffer[i++] = input[k++]; 
1688   0D18 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1689   0D1B D7            push a
1690   0D1C DA            push d
1691   0D1D FA FF FF      lea d, [bp + -1] ; $i
1692   0D20 2A            mov b, [d]
1693   0D21 D8            push b
1694   0D22 FD 77         inc b
1695   0D24 FA FF FF      lea d, [bp + -1] ; $i
1696   0D27 FD 43         mov [d], b
1697   0D29 E5            pop b
1698   0D2A E7            pop d
1699   0D2B 5A            add d, b
1700   0D2C E4            pop a
1701   0D2D DA            push d
1702   0D2E FA 05 00      lea d, [bp + 5] ; $input
1703   0D31 FD 2A         mov d, [d]
1704   0D33 D7            push a
1705   0D34 DA            push d
1706   0D35 FA FB FF      lea d, [bp + -5] ; $k
1707   0D38 2A            mov b, [d]
1708   0D39 D8            push b
1709   0D3A FD 77         inc b
1710   0D3C FA FB FF      lea d, [bp + -5] ; $k
1711   0D3F FD 43         mov [d], b
1712   0D41 E5            pop b
1713   0D42 E7            pop d
1714   0D43 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1715   0D47 E4            pop a
1716   0D48 32            mov bl, [d]
1717   0D49 A7 00         mov bh, 0
1718   0D4B E7            pop d
1719   0D4C FD 3E         mov [d], bl
1720   0D4E             ;; if (i == 4) { 
1721   0D4E             _if24_cond:
1722   0D4E FA FF FF      lea d, [bp + -1] ; $i
1723   0D51 2A            mov b, [d]
1724   0D52             ; START RELATIONAL
1725   0D52 D7            push a
1726   0D53 11            mov a, b
1727   0D54 26 04 00      mov b, $4
1728   0D57 B0            cmp a, b
1729   0D58 FD 71         seq ; ==
1730   0D5A E4            pop a
1731   0D5B             ; END RELATIONAL
1732   0D5B C0 00 00      cmp b, 0
1733   0D5E C6 FA 0E      je _if24_exit
1734   0D61             _if24_true:
1735   0D61             ;; for (i = 0; i < 4; i++) { 
1736   0D61             _for25_init:
1737   0D61 FA FF FF      lea d, [bp + -1] ; $i
1738   0D64 DA            push d
1739   0D65 26 00 00      mov b, $0
1740   0D68 E7            pop d
1741   0D69 FD 43         mov [d], b
1742   0D6B             _for25_cond:
1743   0D6B FA FF FF      lea d, [bp + -1] ; $i
1744   0D6E 2A            mov b, [d]
1745   0D6F             ; START RELATIONAL
1746   0D6F D7            push a
1747   0D70 11            mov a, b
1748   0D71 26 04 00      mov b, $4
1749   0D74 B0            cmp a, b
1750   0D75 FD 73         slt ; <= (signed)
1751   0D77 E4            pop a
1752   0D78             ; END RELATIONAL
1753   0D78 C0 00 00      cmp b, 0
1754   0D7B C6 B4 0D      je _for25_exit
1755   0D7E             _for25_block:
1756   0D7E             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
1757   0D7E FA F5 FF      lea d, [bp + -11] ; $input_buffer
1758   0D81 D7            push a
1759   0D82 DA            push d
1760   0D83 FA FF FF      lea d, [bp + -1] ; $i
1761   0D86 2A            mov b, [d]
1762   0D87 E7            pop d
1763   0D88 5A            add d, b
1764   0D89 E4            pop a
1765   0D8A DA            push d
1766   0D8B FA F5 FF      lea d, [bp + -11] ; $input_buffer
1767   0D8E D7            push a
1768   0D8F DA            push d
1769   0D90 FA FF FF      lea d, [bp + -1] ; $i
1770   0D93 2A            mov b, [d]
1771   0D94 E7            pop d
1772   0D95 5A            add d, b
1773   0D96 E4            pop a
1774   0D97 32            mov bl, [d]
1775   0D98 A7 00         mov bh, 0
1776   0D9A DD            push bl
1777   0D9B 07 90 0B      call base64_char_value
1778   0D9E 51 01 00      add sp, 1
1779   0DA1 E7            pop d
1780   0DA2 FD 3E         mov [d], bl
1781   0DA4             _for25_update:
1782   0DA4 FA FF FF      lea d, [bp + -1] ; $i
1783   0DA7 2A            mov b, [d]
1784   0DA8 D8            push b
1785   0DA9 FD 77         inc b
1786   0DAB FA FF FF      lea d, [bp + -1] ; $i
1787   0DAE FD 43         mov [d], b
1788   0DB0 E5            pop b
1789   0DB1 0A 6B 0D      jmp _for25_cond
1790   0DB4             _for25_exit:
1791   0DB4             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1792   0DB4 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1793   0DB7 D7            push a
1794   0DB8 DA            push d
1795   0DB9 26 00 00      mov b, $0
1796   0DBC E7            pop d
1797   0DBD 5A            add d, b
1798   0DBE E4            pop a
1799   0DBF DA            push d
1800   0DC0 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1801   0DC3 D7            push a
1802   0DC4 DA            push d
1803   0DC5 26 00 00      mov b, $0
1804   0DC8 E7            pop d
1805   0DC9 5A            add d, b
1806   0DCA E4            pop a
1807   0DCB 32            mov bl, [d]
1808   0DCC A7 00         mov bh, 0
1809   0DCE             ; START SHIFT
1810   0DCE D7            push a
1811   0DCF 11            mov a, b
1812   0DD0 26 02 00      mov b, $2
1813   0DD3 FD 39         mov c, b
1814   0DD5 9D            shl a, cl
1815   0DD6 27            mov b, a
1816   0DD7 E4            pop a
1817   0DD8             ; END SHIFT
1818   0DD8             ; START TERMS
1819   0DD8 D7            push a
1820   0DD9 11            mov a, b
1821   0DDA FA F5 FF      lea d, [bp + -11] ; $input_buffer
1822   0DDD D7            push a
1823   0DDE DA            push d
1824   0DDF 26 01 00      mov b, $1
1825   0DE2 E7            pop d
1826   0DE3 5A            add d, b
1827   0DE4 E4            pop a
1828   0DE5 32            mov bl, [d]
1829   0DE6 A7 00         mov bh, 0
1830   0DE8 D7            push a
1831   0DE9 11            mov a, b
1832   0DEA 26 30 00      mov b, $30
1833   0DED 86            and a, b ; &
1834   0DEE 27            mov b, a
1835   0DEF E4            pop a
1836   0DF0             ; START SHIFT
1837   0DF0 D7            push a
1838   0DF1 11            mov a, b
1839   0DF2 26 04 00      mov b, $4
1840   0DF5 FD 39         mov c, b
1841   0DF7 A5            ashr a, cl
1842   0DF8 27            mov b, a
1843   0DF9 E4            pop a
1844   0DFA             ; END SHIFT
1845   0DFA 56            add b, a
1846   0DFB E4            pop a
1847   0DFC             ; END TERMS
1848   0DFC E7            pop d
1849   0DFD FD 3E         mov [d], bl
1850   0DFF             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1851   0DFF FA F2 FF      lea d, [bp + -14] ; $output_buffer
1852   0E02 D7            push a
1853   0E03 DA            push d
1854   0E04 26 01 00      mov b, $1
1855   0E07 E7            pop d
1856   0E08 5A            add d, b
1857   0E09 E4            pop a
1858   0E0A DA            push d
1859   0E0B FA F5 FF      lea d, [bp + -11] ; $input_buffer
1860   0E0E D7            push a
1861   0E0F DA            push d
1862   0E10 26 01 00      mov b, $1
1863   0E13 E7            pop d
1864   0E14 5A            add d, b
1865   0E15 E4            pop a
1866   0E16 32            mov bl, [d]
1867   0E17 A7 00         mov bh, 0
1868   0E19 D7            push a
1869   0E1A 11            mov a, b
1870   0E1B 26 0F 00      mov b, $f
1871   0E1E 86            and a, b ; &
1872   0E1F 27            mov b, a
1873   0E20 E4            pop a
1874   0E21             ; START SHIFT
1875   0E21 D7            push a
1876   0E22 11            mov a, b
1877   0E23 26 04 00      mov b, $4
1878   0E26 FD 39         mov c, b
1879   0E28 9D            shl a, cl
1880   0E29 27            mov b, a
1881   0E2A E4            pop a
1882   0E2B             ; END SHIFT
1883   0E2B             ; START TERMS
1884   0E2B D7            push a
1885   0E2C 11            mov a, b
1886   0E2D FA F5 FF      lea d, [bp + -11] ; $input_buffer
1887   0E30 D7            push a
1888   0E31 DA            push d
1889   0E32 26 02 00      mov b, $2
1890   0E35 E7            pop d
1891   0E36 5A            add d, b
1892   0E37 E4            pop a
1893   0E38 32            mov bl, [d]
1894   0E39 A7 00         mov bh, 0
1895   0E3B D7            push a
1896   0E3C 11            mov a, b
1897   0E3D 26 3C 00      mov b, $3c
1898   0E40 86            and a, b ; &
1899   0E41 27            mov b, a
1900   0E42 E4            pop a
1901   0E43             ; START SHIFT
1902   0E43 D7            push a
1903   0E44 11            mov a, b
1904   0E45 26 02 00      mov b, $2
1905   0E48 FD 39         mov c, b
1906   0E4A A5            ashr a, cl
1907   0E4B 27            mov b, a
1908   0E4C E4            pop a
1909   0E4D             ; END SHIFT
1910   0E4D 56            add b, a
1911   0E4E E4            pop a
1912   0E4F             ; END TERMS
1913   0E4F E7            pop d
1914   0E50 FD 3E         mov [d], bl
1915   0E52             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1916   0E52 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1917   0E55 D7            push a
1918   0E56 DA            push d
1919   0E57 26 02 00      mov b, $2
1920   0E5A E7            pop d
1921   0E5B 5A            add d, b
1922   0E5C E4            pop a
1923   0E5D DA            push d
1924   0E5E FA F5 FF      lea d, [bp + -11] ; $input_buffer
1925   0E61 D7            push a
1926   0E62 DA            push d
1927   0E63 26 02 00      mov b, $2
1928   0E66 E7            pop d
1929   0E67 5A            add d, b
1930   0E68 E4            pop a
1931   0E69 32            mov bl, [d]
1932   0E6A A7 00         mov bh, 0
1933   0E6C D7            push a
1934   0E6D 11            mov a, b
1935   0E6E 26 03 00      mov b, $3
1936   0E71 86            and a, b ; &
1937   0E72 27            mov b, a
1938   0E73 E4            pop a
1939   0E74             ; START SHIFT
1940   0E74 D7            push a
1941   0E75 11            mov a, b
1942   0E76 26 06 00      mov b, $6
1943   0E79 FD 39         mov c, b
1944   0E7B 9D            shl a, cl
1945   0E7C 27            mov b, a
1946   0E7D E4            pop a
1947   0E7E             ; END SHIFT
1948   0E7E             ; START TERMS
1949   0E7E D7            push a
1950   0E7F 11            mov a, b
1951   0E80 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1952   0E83 D7            push a
1953   0E84 DA            push d
1954   0E85 26 03 00      mov b, $3
1955   0E88 E7            pop d
1956   0E89 5A            add d, b
1957   0E8A E4            pop a
1958   0E8B 32            mov bl, [d]
1959   0E8C A7 00         mov bh, 0
1960   0E8E 56            add b, a
1961   0E8F E4            pop a
1962   0E90             ; END TERMS
1963   0E90 E7            pop d
1964   0E91 FD 3E         mov [d], bl
1965   0E93             ;; for (i = 0; i < 3; i++) { 
1966   0E93             _for26_init:
1967   0E93 FA FF FF      lea d, [bp + -1] ; $i
1968   0E96 DA            push d
1969   0E97 26 00 00      mov b, $0
1970   0E9A E7            pop d
1971   0E9B FD 43         mov [d], b
1972   0E9D             _for26_cond:
1973   0E9D FA FF FF      lea d, [bp + -1] ; $i
1974   0EA0 2A            mov b, [d]
1975   0EA1             ; START RELATIONAL
1976   0EA1 D7            push a
1977   0EA2 11            mov a, b
1978   0EA3 26 03 00      mov b, $3
1979   0EA6 B0            cmp a, b
1980   0EA7 FD 73         slt ; <= (signed)
1981   0EA9 E4            pop a
1982   0EAA             ; END RELATIONAL
1983   0EAA C0 00 00      cmp b, 0
1984   0EAD C6 ED 0E      je _for26_exit
1985   0EB0             _for26_block:
1986   0EB0             ;; output[j++] = output_buffer[i]; 
1987   0EB0 FA 07 00      lea d, [bp + 7] ; $output
1988   0EB3 FD 2A         mov d, [d]
1989   0EB5 D7            push a
1990   0EB6 DA            push d
1991   0EB7 FA FD FF      lea d, [bp + -3] ; $j
1992   0EBA 2A            mov b, [d]
1993   0EBB D8            push b
1994   0EBC FD 77         inc b
1995   0EBE FA FD FF      lea d, [bp + -3] ; $j
1996   0EC1 FD 43         mov [d], b
1997   0EC3 E5            pop b
1998   0EC4 E7            pop d
1999   0EC5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2000   0EC9 E4            pop a
2001   0ECA DA            push d
2002   0ECB FA F2 FF      lea d, [bp + -14] ; $output_buffer
2003   0ECE D7            push a
2004   0ECF DA            push d
2005   0ED0 FA FF FF      lea d, [bp + -1] ; $i
2006   0ED3 2A            mov b, [d]
2007   0ED4 E7            pop d
2008   0ED5 5A            add d, b
2009   0ED6 E4            pop a
2010   0ED7 32            mov bl, [d]
2011   0ED8 A7 00         mov bh, 0
2012   0EDA E7            pop d
2013   0EDB FD 3E         mov [d], bl
2014   0EDD             _for26_update:
2015   0EDD FA FF FF      lea d, [bp + -1] ; $i
2016   0EE0 2A            mov b, [d]
2017   0EE1 D8            push b
2018   0EE2 FD 77         inc b
2019   0EE4 FA FF FF      lea d, [bp + -1] ; $i
2020   0EE7 FD 43         mov [d], b
2021   0EE9 E5            pop b
2022   0EEA 0A 9D 0E      jmp _for26_cond
2023   0EED             _for26_exit:
2024   0EED             ;; i = 0; 
2025   0EED FA FF FF      lea d, [bp + -1] ; $i
2026   0EF0 DA            push d
2027   0EF1 26 00 00      mov b, $0
2028   0EF4 E7            pop d
2029   0EF5 FD 43         mov [d], b
2030   0EF7 0A FA 0E      jmp _if24_exit
2031   0EFA             _if24_exit:
2032   0EFA 0A BC 0C      jmp _while23_cond
2033   0EFD             _while23_exit:
2034   0EFD             ;; if (i) { 
2035   0EFD             _if27_cond:
2036   0EFD FA FF FF      lea d, [bp + -1] ; $i
2037   0F00 2A            mov b, [d]
2038   0F01 C0 00 00      cmp b, 0
2039   0F04 C6 9F 10      je _if27_exit
2040   0F07             _if27_true:
2041   0F07             ;; for (k = i; k < 4; k++) { 
2042   0F07             _for28_init:
2043   0F07 FA FB FF      lea d, [bp + -5] ; $k
2044   0F0A DA            push d
2045   0F0B FA FF FF      lea d, [bp + -1] ; $i
2046   0F0E 2A            mov b, [d]
2047   0F0F E7            pop d
2048   0F10 FD 43         mov [d], b
2049   0F12             _for28_cond:
2050   0F12 FA FB FF      lea d, [bp + -5] ; $k
2051   0F15 2A            mov b, [d]
2052   0F16             ; START RELATIONAL
2053   0F16 D7            push a
2054   0F17 11            mov a, b
2055   0F18 26 04 00      mov b, $4
2056   0F1B B0            cmp a, b
2057   0F1C FD 73         slt ; <= (signed)
2058   0F1E E4            pop a
2059   0F1F             ; END RELATIONAL
2060   0F1F C0 00 00      cmp b, 0
2061   0F22 C6 48 0F      je _for28_exit
2062   0F25             _for28_block:
2063   0F25             ;; input_buffer[k] = 0; 
2064   0F25 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2065   0F28 D7            push a
2066   0F29 DA            push d
2067   0F2A FA FB FF      lea d, [bp + -5] ; $k
2068   0F2D 2A            mov b, [d]
2069   0F2E E7            pop d
2070   0F2F 5A            add d, b
2071   0F30 E4            pop a
2072   0F31 DA            push d
2073   0F32 26 00 00      mov b, $0
2074   0F35 E7            pop d
2075   0F36 FD 3E         mov [d], bl
2076   0F38             _for28_update:
2077   0F38 FA FB FF      lea d, [bp + -5] ; $k
2078   0F3B 2A            mov b, [d]
2079   0F3C D8            push b
2080   0F3D FD 77         inc b
2081   0F3F FA FB FF      lea d, [bp + -5] ; $k
2082   0F42 FD 43         mov [d], b
2083   0F44 E5            pop b
2084   0F45 0A 12 0F      jmp _for28_cond
2085   0F48             _for28_exit:
2086   0F48             ;; for (k = 0; k < 4; k++) { 
2087   0F48             _for29_init:
2088   0F48 FA FB FF      lea d, [bp + -5] ; $k
2089   0F4B DA            push d
2090   0F4C 26 00 00      mov b, $0
2091   0F4F E7            pop d
2092   0F50 FD 43         mov [d], b
2093   0F52             _for29_cond:
2094   0F52 FA FB FF      lea d, [bp + -5] ; $k
2095   0F55 2A            mov b, [d]
2096   0F56             ; START RELATIONAL
2097   0F56 D7            push a
2098   0F57 11            mov a, b
2099   0F58 26 04 00      mov b, $4
2100   0F5B B0            cmp a, b
2101   0F5C FD 73         slt ; <= (signed)
2102   0F5E E4            pop a
2103   0F5F             ; END RELATIONAL
2104   0F5F C0 00 00      cmp b, 0
2105   0F62 C6 9B 0F      je _for29_exit
2106   0F65             _for29_block:
2107   0F65             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2108   0F65 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2109   0F68 D7            push a
2110   0F69 DA            push d
2111   0F6A FA FB FF      lea d, [bp + -5] ; $k
2112   0F6D 2A            mov b, [d]
2113   0F6E E7            pop d
2114   0F6F 5A            add d, b
2115   0F70 E4            pop a
2116   0F71 DA            push d
2117   0F72 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2118   0F75 D7            push a
2119   0F76 DA            push d
2120   0F77 FA FB FF      lea d, [bp + -5] ; $k
2121   0F7A 2A            mov b, [d]
2122   0F7B E7            pop d
2123   0F7C 5A            add d, b
2124   0F7D E4            pop a
2125   0F7E 32            mov bl, [d]
2126   0F7F A7 00         mov bh, 0
2127   0F81 DD            push bl
2128   0F82 07 90 0B      call base64_char_value
2129   0F85 51 01 00      add sp, 1
2130   0F88 E7            pop d
2131   0F89 FD 3E         mov [d], bl
2132   0F8B             _for29_update:
2133   0F8B FA FB FF      lea d, [bp + -5] ; $k
2134   0F8E 2A            mov b, [d]
2135   0F8F D8            push b
2136   0F90 FD 77         inc b
2137   0F92 FA FB FF      lea d, [bp + -5] ; $k
2138   0F95 FD 43         mov [d], b
2139   0F97 E5            pop b
2140   0F98 0A 52 0F      jmp _for29_cond
2141   0F9B             _for29_exit:
2142   0F9B             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2143   0F9B FA F2 FF      lea d, [bp + -14] ; $output_buffer
2144   0F9E D7            push a
2145   0F9F DA            push d
2146   0FA0 26 00 00      mov b, $0
2147   0FA3 E7            pop d
2148   0FA4 5A            add d, b
2149   0FA5 E4            pop a
2150   0FA6 DA            push d
2151   0FA7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2152   0FAA D7            push a
2153   0FAB DA            push d
2154   0FAC 26 00 00      mov b, $0
2155   0FAF E7            pop d
2156   0FB0 5A            add d, b
2157   0FB1 E4            pop a
2158   0FB2 32            mov bl, [d]
2159   0FB3 A7 00         mov bh, 0
2160   0FB5             ; START SHIFT
2161   0FB5 D7            push a
2162   0FB6 11            mov a, b
2163   0FB7 26 02 00      mov b, $2
2164   0FBA FD 39         mov c, b
2165   0FBC 9D            shl a, cl
2166   0FBD 27            mov b, a
2167   0FBE E4            pop a
2168   0FBF             ; END SHIFT
2169   0FBF             ; START TERMS
2170   0FBF D7            push a
2171   0FC0 11            mov a, b
2172   0FC1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2173   0FC4 D7            push a
2174   0FC5 DA            push d
2175   0FC6 26 01 00      mov b, $1
2176   0FC9 E7            pop d
2177   0FCA 5A            add d, b
2178   0FCB E4            pop a
2179   0FCC 32            mov bl, [d]
2180   0FCD A7 00         mov bh, 0
2181   0FCF D7            push a
2182   0FD0 11            mov a, b
2183   0FD1 26 30 00      mov b, $30
2184   0FD4 86            and a, b ; &
2185   0FD5 27            mov b, a
2186   0FD6 E4            pop a
2187   0FD7             ; START SHIFT
2188   0FD7 D7            push a
2189   0FD8 11            mov a, b
2190   0FD9 26 04 00      mov b, $4
2191   0FDC FD 39         mov c, b
2192   0FDE A5            ashr a, cl
2193   0FDF 27            mov b, a
2194   0FE0 E4            pop a
2195   0FE1             ; END SHIFT
2196   0FE1 56            add b, a
2197   0FE2 E4            pop a
2198   0FE3             ; END TERMS
2199   0FE3 E7            pop d
2200   0FE4 FD 3E         mov [d], bl
2201   0FE6             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2202   0FE6 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2203   0FE9 D7            push a
2204   0FEA DA            push d
2205   0FEB 26 01 00      mov b, $1
2206   0FEE E7            pop d
2207   0FEF 5A            add d, b
2208   0FF0 E4            pop a
2209   0FF1 DA            push d
2210   0FF2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2211   0FF5 D7            push a
2212   0FF6 DA            push d
2213   0FF7 26 01 00      mov b, $1
2214   0FFA E7            pop d
2215   0FFB 5A            add d, b
2216   0FFC E4            pop a
2217   0FFD 32            mov bl, [d]
2218   0FFE A7 00         mov bh, 0
2219   1000 D7            push a
2220   1001 11            mov a, b
2221   1002 26 0F 00      mov b, $f
2222   1005 86            and a, b ; &
2223   1006 27            mov b, a
2224   1007 E4            pop a
2225   1008             ; START SHIFT
2226   1008 D7            push a
2227   1009 11            mov a, b
2228   100A 26 04 00      mov b, $4
2229   100D FD 39         mov c, b
2230   100F 9D            shl a, cl
2231   1010 27            mov b, a
2232   1011 E4            pop a
2233   1012             ; END SHIFT
2234   1012             ; START TERMS
2235   1012 D7            push a
2236   1013 11            mov a, b
2237   1014 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2238   1017 D7            push a
2239   1018 DA            push d
2240   1019 26 02 00      mov b, $2
2241   101C E7            pop d
2242   101D 5A            add d, b
2243   101E E4            pop a
2244   101F 32            mov bl, [d]
2245   1020 A7 00         mov bh, 0
2246   1022 D7            push a
2247   1023 11            mov a, b
2248   1024 26 3C 00      mov b, $3c
2249   1027 86            and a, b ; &
2250   1028 27            mov b, a
2251   1029 E4            pop a
2252   102A             ; START SHIFT
2253   102A D7            push a
2254   102B 11            mov a, b
2255   102C 26 02 00      mov b, $2
2256   102F FD 39         mov c, b
2257   1031 A5            ashr a, cl
2258   1032 27            mov b, a
2259   1033 E4            pop a
2260   1034             ; END SHIFT
2261   1034 56            add b, a
2262   1035 E4            pop a
2263   1036             ; END TERMS
2264   1036 E7            pop d
2265   1037 FD 3E         mov [d], bl
2266   1039             ;; for (k = 0; k < i - 1; k++) { 
2267   1039             _for30_init:
2268   1039 FA FB FF      lea d, [bp + -5] ; $k
2269   103C DA            push d
2270   103D 26 00 00      mov b, $0
2271   1040 E7            pop d
2272   1041 FD 43         mov [d], b
2273   1043             _for30_cond:
2274   1043 FA FB FF      lea d, [bp + -5] ; $k
2275   1046 2A            mov b, [d]
2276   1047             ; START RELATIONAL
2277   1047 D7            push a
2278   1048 11            mov a, b
2279   1049 FA FF FF      lea d, [bp + -1] ; $i
2280   104C 2A            mov b, [d]
2281   104D             ; START TERMS
2282   104D D7            push a
2283   104E 11            mov a, b
2284   104F 26 01 00      mov b, $1
2285   1052 60            sub a, b
2286   1053 27            mov b, a
2287   1054 E4            pop a
2288   1055             ; END TERMS
2289   1055 B0            cmp a, b
2290   1056 FD 73         slt ; <= (signed)
2291   1058 E4            pop a
2292   1059             ; END RELATIONAL
2293   1059 C0 00 00      cmp b, 0
2294   105C C6 9C 10      je _for30_exit
2295   105F             _for30_block:
2296   105F             ;; output[j++] = output_buffer[k]; 
2297   105F FA 07 00      lea d, [bp + 7] ; $output
2298   1062 FD 2A         mov d, [d]
2299   1064 D7            push a
2300   1065 DA            push d
2301   1066 FA FD FF      lea d, [bp + -3] ; $j
2302   1069 2A            mov b, [d]
2303   106A D8            push b
2304   106B FD 77         inc b
2305   106D FA FD FF      lea d, [bp + -3] ; $j
2306   1070 FD 43         mov [d], b
2307   1072 E5            pop b
2308   1073 E7            pop d
2309   1074 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2310   1078 E4            pop a
2311   1079 DA            push d
2312   107A FA F2 FF      lea d, [bp + -14] ; $output_buffer
2313   107D D7            push a
2314   107E DA            push d
2315   107F FA FB FF      lea d, [bp + -5] ; $k
2316   1082 2A            mov b, [d]
2317   1083 E7            pop d
2318   1084 5A            add d, b
2319   1085 E4            pop a
2320   1086 32            mov bl, [d]
2321   1087 A7 00         mov bh, 0
2322   1089 E7            pop d
2323   108A FD 3E         mov [d], bl
2324   108C             _for30_update:
2325   108C FA FB FF      lea d, [bp + -5] ; $k
2326   108F 2A            mov b, [d]
2327   1090 D8            push b
2328   1091 FD 77         inc b
2329   1093 FA FB FF      lea d, [bp + -5] ; $k
2330   1096 FD 43         mov [d], b
2331   1098 E5            pop b
2332   1099 0A 43 10      jmp _for30_cond
2333   109C             _for30_exit:
2334   109C 0A 9F 10      jmp _if27_exit
2335   109F             _if27_exit:
2336   109F             ;; output[j] = '\0'; 
2337   109F FA 07 00      lea d, [bp + 7] ; $output
2338   10A2 FD 2A         mov d, [d]
2339   10A4 D7            push a
2340   10A5 DA            push d
2341   10A6 FA FD FF      lea d, [bp + -3] ; $j
2342   10A9 2A            mov b, [d]
2343   10AA E7            pop d
2344   10AB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2345   10AF E4            pop a
2346   10B0 DA            push d
2347   10B1 26 00 00      mov b, $0
2348   10B4 E7            pop d
2349   10B5 FD 3E         mov [d], bl
2350   10B7 F9            leave
2351   10B8 09            ret
2352   10B9             
2353   10B9             va_start:
2354   10B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2355   10BC             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2356   10BC FA 05 00      lea d, [bp + 5] ; $argp
2357   10BF FD 2A         mov d, [d]
2358   10C1 58 00 00      add d, 0
2359   10C4 DA            push d
2360   10C5 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2361   10C8 2A            mov b, [d]
2362   10C9             ; START TERMS
2363   10C9 D7            push a
2364   10CA 11            mov a, b
2365   10CB 26 02 00      mov b, 2
2366   10CE 56            add b, a
2367   10CF E4            pop a
2368   10D0             ; END TERMS
2369   10D0 E7            pop d
2370   10D1 FD 43         mov [d], b
2371   10D3 F9            leave
2372   10D4 09            ret
2373   10D5             
2374   10D5             va_arg:
2375   10D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2376   10D8             ; $p 
2377   10D8 52 02 00      sub sp, 2
2378   10DB             ;; p = argp->current_arg; 
2379   10DB FA FF FF      lea d, [bp + -1] ; $p
2380   10DE DA            push d
2381   10DF FA 05 00      lea d, [bp + 5] ; $argp
2382   10E2 FD 2A         mov d, [d]
2383   10E4 58 00 00      add d, 0
2384   10E7 2A            mov b, [d]
2385   10E8 E7            pop d
2386   10E9 FD 43         mov [d], b
2387   10EB             ;; argp->current_arg = argp->current_arg + size; 
2388   10EB FA 05 00      lea d, [bp + 5] ; $argp
2389   10EE FD 2A         mov d, [d]
2390   10F0 58 00 00      add d, 0
2391   10F3 DA            push d
2392   10F4 FA 05 00      lea d, [bp + 5] ; $argp
2393   10F7 FD 2A         mov d, [d]
2394   10F9 58 00 00      add d, 0
2395   10FC 2A            mov b, [d]
2396   10FD             ; START TERMS
2397   10FD D7            push a
2398   10FE 11            mov a, b
2399   10FF FA 07 00      lea d, [bp + 7] ; $size
2400   1102 2A            mov b, [d]
2401   1103 56            add b, a
2402   1104 E4            pop a
2403   1105             ; END TERMS
2404   1105 E7            pop d
2405   1106 FD 43         mov [d], b
2406   1108             ;; return p; 
2407   1108 FA FF FF      lea d, [bp + -1] ; $p
2408   110B 2A            mov b, [d]
2409   110C F9            leave
2410   110D 09            ret
2411   110E             
2412   110E             va_end:
2413   110E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2414   1111             ;; argp->current_arg =   0   ; 
2415   1111 FA 05 00      lea d, [bp + 5] ; $argp
2416   1114 FD 2A         mov d, [d]
2417   1116 58 00 00      add d, 0
2418   1119 DA            push d
2419   111A 26 00 00      mov b, $0
2420   111D E7            pop d
2421   111E FD 43         mov [d], b
2422   1120 F9            leave
2423   1121 09            ret
2424   1122             
2425   1122             printf:
2426   1122 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2427   1125             ; $p 
2428   1125             ; $fp 
2429   1125             ; $i 
2430   1125 52 06 00      sub sp, 6
2431   1128             ;; fp = format; 
2432   1128 FA FD FF      lea d, [bp + -3] ; $fp
2433   112B DA            push d
2434   112C FA 05 00      lea d, [bp + 5] ; $format
2435   112F 2A            mov b, [d]
2436   1130 E7            pop d
2437   1131 FD 43         mov [d], b
2438   1133             ;; p = &format + 2; 
2439   1133 FA FF FF      lea d, [bp + -1] ; $p
2440   1136 DA            push d
2441   1137 FA 05 00      lea d, [bp + 5] ; $format
2442   113A 2D            mov b, d
2443   113B             ; START TERMS
2444   113B D7            push a
2445   113C 11            mov a, b
2446   113D 26 02 00      mov b, $2
2447   1140 56            add b, a
2448   1141 E4            pop a
2449   1142             ; END TERMS
2450   1142 E7            pop d
2451   1143 FD 43         mov [d], b
2452   1145             ;; for(;;){ 
2453   1145             _for31_init:
2454   1145             _for31_cond:
2455   1145             _for31_block:
2456   1145             ;; if(!*fp) break; 
2457   1145             _if32_cond:
2458   1145 FA FD FF      lea d, [bp + -3] ; $fp
2459   1148 2A            mov b, [d]
2460   1149 74            mov d, b
2461   114A 32            mov bl, [d]
2462   114B A7 00         mov bh, 0
2463   114D C0 00 00      cmp b, 0
2464   1150 FD 71         seq ; !
2465   1152 C0 00 00      cmp b, 0
2466   1155 C6 5E 11      je _if32_else
2467   1158             _if32_true:
2468   1158             ;; break; 
2469   1158 0A 67 13      jmp _for31_exit ; for break
2470   115B 0A 64 13      jmp _if32_exit
2471   115E             _if32_else:
2472   115E             ;; if(*fp == '%'){ 
2473   115E             _if33_cond:
2474   115E FA FD FF      lea d, [bp + -3] ; $fp
2475   1161 2A            mov b, [d]
2476   1162 74            mov d, b
2477   1163 32            mov bl, [d]
2478   1164 A7 00         mov bh, 0
2479   1166             ; START RELATIONAL
2480   1166 D7            push a
2481   1167 11            mov a, b
2482   1168 26 25 00      mov b, $25
2483   116B B0            cmp a, b
2484   116C FD 71         seq ; ==
2485   116E E4            pop a
2486   116F             ; END RELATIONAL
2487   116F C0 00 00      cmp b, 0
2488   1172 C6 48 13      je _if33_else
2489   1175             _if33_true:
2490   1175             ;; fp++; 
2491   1175 FA FD FF      lea d, [bp + -3] ; $fp
2492   1178 2A            mov b, [d]
2493   1179 D8            push b
2494   117A FD 77         inc b
2495   117C FA FD FF      lea d, [bp + -3] ; $fp
2496   117F FD 43         mov [d], b
2497   1181 E5            pop b
2498   1182             ;; switch(*fp){ 
2499   1182             _switch34_expr:
2500   1182 FA FD FF      lea d, [bp + -3] ; $fp
2501   1185 2A            mov b, [d]
2502   1186 74            mov d, b
2503   1187 32            mov bl, [d]
2504   1188 A7 00         mov bh, 0
2505   118A             _switch34_comparisons:
2506   118A C1 6C         cmp bl, $6c
2507   118C C6 B8 11      je _switch34_case0
2508   118F C1 4C         cmp bl, $4c
2509   1191 C6 B8 11      je _switch34_case1
2510   1194 C1 64         cmp bl, $64
2511   1196 C6 88 12      je _switch34_case2
2512   1199 C1 69         cmp bl, $69
2513   119B C6 88 12      je _switch34_case3
2514   119E C1 75         cmp bl, $75
2515   11A0 C6 AC 12      je _switch34_case4
2516   11A3 C1 78         cmp bl, $78
2517   11A5 C6 D0 12      je _switch34_case5
2518   11A8 C1 63         cmp bl, $63
2519   11AA C6 EE 12      je _switch34_case6
2520   11AD C1 73         cmp bl, $73
2521   11AF C6 0D 13      je _switch34_case7
2522   11B2 0A 2C 13      jmp _switch34_default
2523   11B5 0A 38 13      jmp _switch34_exit
2524   11B8             _switch34_case0:
2525   11B8             _switch34_case1:
2526   11B8             ;; fp++; 
2527   11B8 FA FD FF      lea d, [bp + -3] ; $fp
2528   11BB 2A            mov b, [d]
2529   11BC D8            push b
2530   11BD FD 77         inc b
2531   11BF FA FD FF      lea d, [bp + -3] ; $fp
2532   11C2 FD 43         mov [d], b
2533   11C4 E5            pop b
2534   11C5             ;; if(*fp == 'd' || *fp == 'i') 
2535   11C5             _if35_cond:
2536   11C5 FA FD FF      lea d, [bp + -3] ; $fp
2537   11C8 2A            mov b, [d]
2538   11C9 74            mov d, b
2539   11CA 32            mov bl, [d]
2540   11CB A7 00         mov bh, 0
2541   11CD             ; START RELATIONAL
2542   11CD D7            push a
2543   11CE 11            mov a, b
2544   11CF 26 64 00      mov b, $64
2545   11D2 B0            cmp a, b
2546   11D3 FD 71         seq ; ==
2547   11D5 E4            pop a
2548   11D6             ; END RELATIONAL
2549   11D6 D7            push a
2550   11D7 11            mov a, b
2551   11D8 FA FD FF      lea d, [bp + -3] ; $fp
2552   11DB 2A            mov b, [d]
2553   11DC 74            mov d, b
2554   11DD 32            mov bl, [d]
2555   11DE A7 00         mov bh, 0
2556   11E0             ; START RELATIONAL
2557   11E0 D7            push a
2558   11E1 11            mov a, b
2559   11E2 26 69 00      mov b, $69
2560   11E5 B0            cmp a, b
2561   11E6 FD 71         seq ; ==
2562   11E8 E4            pop a
2563   11E9             ; END RELATIONAL
2564   11E9 FD A8         sor a, b ; ||
2565   11EB E4            pop a
2566   11EC C0 00 00      cmp b, 0
2567   11EF C6 06 12      je _if35_else
2568   11F2             _if35_true:
2569   11F2             ;; print_signed_long(*(long *)p); 
2570   11F2 FD 79         mov g, b
2571   11F4 28            mov b, c
2572   11F5 FD AB         swp b
2573   11F7 D8            push b
2574   11F8 FD 27         mov b, g
2575   11FA FD AB         swp b
2576   11FC D8            push b
2577   11FD 07 F5 15      call print_signed_long
2578   1200 51 04 00      add sp, 4
2579   1203 0A 73 12      jmp _if35_exit
2580   1206             _if35_else:
2581   1206             ;; if(*fp == 'u') 
2582   1206             _if36_cond:
2583   1206 FA FD FF      lea d, [bp + -3] ; $fp
2584   1209 2A            mov b, [d]
2585   120A 74            mov d, b
2586   120B 32            mov bl, [d]
2587   120C A7 00         mov bh, 0
2588   120E             ; START RELATIONAL
2589   120E D7            push a
2590   120F 11            mov a, b
2591   1210 26 75 00      mov b, $75
2592   1213 B0            cmp a, b
2593   1214 FD 71         seq ; ==
2594   1216 E4            pop a
2595   1217             ; END RELATIONAL
2596   1217 C0 00 00      cmp b, 0
2597   121A C6 31 12      je _if36_else
2598   121D             _if36_true:
2599   121D             ;; print_unsigned_long(*(unsigned long *)p); 
2600   121D FD 79         mov g, b
2601   121F 28            mov b, c
2602   1220 FD AB         swp b
2603   1222 D8            push b
2604   1223 FD 27         mov b, g
2605   1225 FD AB         swp b
2606   1227 D8            push b
2607   1228 07 47 17      call print_unsigned_long
2608   122B 51 04 00      add sp, 4
2609   122E 0A 73 12      jmp _if36_exit
2610   1231             _if36_else:
2611   1231             ;; if(*fp == 'x') 
2612   1231             _if37_cond:
2613   1231 FA FD FF      lea d, [bp + -3] ; $fp
2614   1234 2A            mov b, [d]
2615   1235 74            mov d, b
2616   1236 32            mov bl, [d]
2617   1237 A7 00         mov bh, 0
2618   1239             ; START RELATIONAL
2619   1239 D7            push a
2620   123A 11            mov a, b
2621   123B 26 78 00      mov b, $78
2622   123E B0            cmp a, b
2623   123F FD 71         seq ; ==
2624   1241 E4            pop a
2625   1242             ; END RELATIONAL
2626   1242 C0 00 00      cmp b, 0
2627   1245 C6 67 12      je _if37_else
2628   1248             _if37_true:
2629   1248             ;; printx32(*(long int *)p); 
2630   1248 FA FF FF      lea d, [bp + -1] ; $p
2631   124B 2A            mov b, [d]
2632   124C 74            mov d, b
2633   124D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2634   1250 FD 39         mov c, b ; And place it into C
2635   1252 2A            mov b, [d] ; Lower Word in B
2636   1253 FD 79         mov g, b
2637   1255 28            mov b, c
2638   1256 FD AB         swp b
2639   1258 D8            push b
2640   1259 FD 27         mov b, g
2641   125B FD AB         swp b
2642   125D D8            push b
2643   125E 07 7E 13      call printx32
2644   1261 51 04 00      add sp, 4
2645   1264 0A 73 12      jmp _if37_exit
2646   1267             _if37_else:
2647   1267             ;; err("Unexpected format in printf."); 
2648   1267 26 A2 27      mov b, __s1 ; "Unexpected format in printf."
2649   126A FD AB         swp b
2650   126C D8            push b
2651   126D 07 69 13      call err
2652   1270 51 02 00      add sp, 2
2653   1273             _if37_exit:
2654   1273             _if36_exit:
2655   1273             _if35_exit:
2656   1273             ;; p = p + 4; 
2657   1273 FA FF FF      lea d, [bp + -1] ; $p
2658   1276 DA            push d
2659   1277 FA FF FF      lea d, [bp + -1] ; $p
2660   127A 2A            mov b, [d]
2661   127B             ; START TERMS
2662   127B D7            push a
2663   127C 11            mov a, b
2664   127D 26 04 00      mov b, $4
2665   1280 56            add b, a
2666   1281 E4            pop a
2667   1282             ; END TERMS
2668   1282 E7            pop d
2669   1283 FD 43         mov [d], b
2670   1285             ;; break; 
2671   1285 0A 38 13      jmp _switch34_exit ; case break
2672   1288             _switch34_case2:
2673   1288             _switch34_case3:
2674   1288             ;; print_signed(*(int*)p); 
2675   1288 FA FF FF      lea d, [bp + -1] ; $p
2676   128B 2A            mov b, [d]
2677   128C 74            mov d, b
2678   128D 2A            mov b, [d]
2679   128E FD AB         swp b
2680   1290 D8            push b
2681   1291 07 05 15      call print_signed
2682   1294 51 02 00      add sp, 2
2683   1297             ;; p = p + 2; 
2684   1297 FA FF FF      lea d, [bp + -1] ; $p
2685   129A DA            push d
2686   129B FA FF FF      lea d, [bp + -1] ; $p
2687   129E 2A            mov b, [d]
2688   129F             ; START TERMS
2689   129F D7            push a
2690   12A0 11            mov a, b
2691   12A1 26 02 00      mov b, $2
2692   12A4 56            add b, a
2693   12A5 E4            pop a
2694   12A6             ; END TERMS
2695   12A6 E7            pop d
2696   12A7 FD 43         mov [d], b
2697   12A9             ;; break; 
2698   12A9 0A 38 13      jmp _switch34_exit ; case break
2699   12AC             _switch34_case4:
2700   12AC             ;; print_unsigned(*(unsigned int*)p); 
2701   12AC FA FF FF      lea d, [bp + -1] ; $p
2702   12AF 2A            mov b, [d]
2703   12B0 74            mov d, b
2704   12B1 2A            mov b, [d]
2705   12B2 FD AB         swp b
2706   12B4 D8            push b
2707   12B5 07 44 18      call print_unsigned
2708   12B8 51 02 00      add sp, 2
2709   12BB             ;; p = p + 2; 
2710   12BB FA FF FF      lea d, [bp + -1] ; $p
2711   12BE DA            push d
2712   12BF FA FF FF      lea d, [bp + -1] ; $p
2713   12C2 2A            mov b, [d]
2714   12C3             ; START TERMS
2715   12C3 D7            push a
2716   12C4 11            mov a, b
2717   12C5 26 02 00      mov b, $2
2718   12C8 56            add b, a
2719   12C9 E4            pop a
2720   12CA             ; END TERMS
2721   12CA E7            pop d
2722   12CB FD 43         mov [d], b
2723   12CD             ;; break; 
2724   12CD 0A 38 13      jmp _switch34_exit ; case break
2725   12D0             _switch34_case5:
2726   12D0             
2727   12D0             ; --- BEGIN INLINE ASM BLOCK
2728   12D0 FA FF FF      lea d, [bp + -1] ; $p
2729   12D3 FD 2A         mov d, [d]
2730   12D5 2A            mov b, [d]
2731   12D6 07 97 1C      call print_u16x
2732   12D9             ; --- END INLINE ASM BLOCK
2733   12D9             
2734   12D9             ;; p = p + 2; 
2735   12D9 FA FF FF      lea d, [bp + -1] ; $p
2736   12DC DA            push d
2737   12DD FA FF FF      lea d, [bp + -1] ; $p
2738   12E0 2A            mov b, [d]
2739   12E1             ; START TERMS
2740   12E1 D7            push a
2741   12E2 11            mov a, b
2742   12E3 26 02 00      mov b, $2
2743   12E6 56            add b, a
2744   12E7 E4            pop a
2745   12E8             ; END TERMS
2746   12E8 E7            pop d
2747   12E9 FD 43         mov [d], b
2748   12EB             ;; break; 
2749   12EB 0A 38 13      jmp _switch34_exit ; case break
2750   12EE             _switch34_case6:
2751   12EE             
2752   12EE             ; --- BEGIN INLINE ASM BLOCK
2753   12EE FA FF FF      lea d, [bp + -1] ; $p
2754   12F1 FD 2A         mov d, [d]
2755   12F3 1E            mov al, [d]
2756   12F4 23            mov ah, al
2757   12F5 07 F5 1A      call _putchar
2758   12F8             ; --- END INLINE ASM BLOCK
2759   12F8             
2760   12F8             ;; p = p + 2; 
2761   12F8 FA FF FF      lea d, [bp + -1] ; $p
2762   12FB DA            push d
2763   12FC FA FF FF      lea d, [bp + -1] ; $p
2764   12FF 2A            mov b, [d]
2765   1300             ; START TERMS
2766   1300 D7            push a
2767   1301 11            mov a, b
2768   1302 26 02 00      mov b, $2
2769   1305 56            add b, a
2770   1306 E4            pop a
2771   1307             ; END TERMS
2772   1307 E7            pop d
2773   1308 FD 43         mov [d], b
2774   130A             ;; break; 
2775   130A 0A 38 13      jmp _switch34_exit ; case break
2776   130D             _switch34_case7:
2777   130D             
2778   130D             ; --- BEGIN INLINE ASM BLOCK
2779   130D FA FF FF      lea d, [bp + -1] ; $p
2780   1310 FD 2A         mov d, [d]
2781   1312 FD 2A         mov d, [d]
2782   1314 07 3F 1C      call _puts
2783   1317             ; --- END INLINE ASM BLOCK
2784   1317             
2785   1317             ;; p = p + 2; 
2786   1317 FA FF FF      lea d, [bp + -1] ; $p
2787   131A DA            push d
2788   131B FA FF FF      lea d, [bp + -1] ; $p
2789   131E 2A            mov b, [d]
2790   131F             ; START TERMS
2791   131F D7            push a
2792   1320 11            mov a, b
2793   1321 26 02 00      mov b, $2
2794   1324 56            add b, a
2795   1325 E4            pop a
2796   1326             ; END TERMS
2797   1326 E7            pop d
2798   1327 FD 43         mov [d], b
2799   1329             ;; break; 
2800   1329 0A 38 13      jmp _switch34_exit ; case break
2801   132C             _switch34_default:
2802   132C             ;; print("Error: Unknown argument type.\n"); 
2803   132C 26 BF 27      mov b, __s2 ; "Error: Unknown argument type.\n"
2804   132F FD AB         swp b
2805   1331 D8            push b
2806   1332 07 5C 19      call print
2807   1335 51 02 00      add sp, 2
2808   1338             _switch34_exit:
2809   1338             ;; fp++; 
2810   1338 FA FD FF      lea d, [bp + -3] ; $fp
2811   133B 2A            mov b, [d]
2812   133C D8            push b
2813   133D FD 77         inc b
2814   133F FA FD FF      lea d, [bp + -3] ; $fp
2815   1342 FD 43         mov [d], b
2816   1344 E5            pop b
2817   1345 0A 64 13      jmp _if33_exit
2818   1348             _if33_else:
2819   1348             ;; putchar(*fp); 
2820   1348 FA FD FF      lea d, [bp + -3] ; $fp
2821   134B 2A            mov b, [d]
2822   134C 74            mov d, b
2823   134D 32            mov bl, [d]
2824   134E A7 00         mov bh, 0
2825   1350 DD            push bl
2826   1351 07 14 19      call putchar
2827   1354 51 01 00      add sp, 1
2828   1357             ;; fp++; 
2829   1357 FA FD FF      lea d, [bp + -3] ; $fp
2830   135A 2A            mov b, [d]
2831   135B D8            push b
2832   135C FD 77         inc b
2833   135E FA FD FF      lea d, [bp + -3] ; $fp
2834   1361 FD 43         mov [d], b
2835   1363 E5            pop b
2836   1364             _if33_exit:
2837   1364             _if32_exit:
2838   1364             _for31_update:
2839   1364 0A 45 11      jmp _for31_cond
2840   1367             _for31_exit:
2841   1367 F9            leave
2842   1368 09            ret
2843   1369             
2844   1369             err:
2845   1369 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2846   136C             ;; print(e); 
2847   136C FA 05 00      lea d, [bp + 5] ; $e
2848   136F 2A            mov b, [d]
2849   1370 FD AB         swp b
2850   1372 D8            push b
2851   1373 07 5C 19      call print
2852   1376 51 02 00      add sp, 2
2853   1379             ;; exit(); 
2854   1379 07 38 06      call exit
2855   137C F9            leave
2856   137D 09            ret
2857   137E             
2858   137E             printx32:
2859   137E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2860   1381             
2861   1381             ; --- BEGIN INLINE ASM BLOCK
2862   1381 FA 05 00      lea d, [bp + 5] ; $hex
2863   1384 2B 02 00      mov b, [d+2]
2864   1387 07 97 1C      call print_u16x
2865   138A 2A            mov b, [d]
2866   138B 07 97 1C      call print_u16x
2867   138E             ; --- END INLINE ASM BLOCK
2868   138E             
2869   138E F9            leave
2870   138F 09            ret
2871   1390             
2872   1390             printx16:
2873   1390 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2874   1393             
2875   1393             ; --- BEGIN INLINE ASM BLOCK
2876   1393 FA 05 00      lea d, [bp + 5] ; $hex
2877   1396 2A            mov b, [d]
2878   1397 07 97 1C      call print_u16x
2879   139A             ; --- END INLINE ASM BLOCK
2880   139A             
2881   139A F9            leave
2882   139B 09            ret
2883   139C             
2884   139C             printx8:
2885   139C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2886   139F             
2887   139F             ; --- BEGIN INLINE ASM BLOCK
2888   139F FA 05 00      lea d, [bp + 5] ; $hex
2889   13A2 32            mov bl, [d]
2890   13A3 07 DB 1C      call print_u8x
2891   13A6             ; --- END INLINE ASM BLOCK
2892   13A6             
2893   13A6 F9            leave
2894   13A7 09            ret
2895   13A8             
2896   13A8             hex_to_int:
2897   13A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2898   13AB             ; $value 
2899   13AB 10 00 00      mov a, $0
2900   13AE 45 FF FF      mov [bp + -1], a
2901   13B1             ; $i 
2902   13B1             ; $hex_char 
2903   13B1             ; $len 
2904   13B1 52 07 00      sub sp, 7
2905   13B4             ;; len = strlen(hex_string); 
2906   13B4 FA FA FF      lea d, [bp + -6] ; $len
2907   13B7 DA            push d
2908   13B8 FA 05 00      lea d, [bp + 5] ; $hex_string
2909   13BB 2A            mov b, [d]
2910   13BC FD AB         swp b
2911   13BE D8            push b
2912   13BF 07 EF 05      call strlen
2913   13C2 51 02 00      add sp, 2
2914   13C5 E7            pop d
2915   13C6 FD 43         mov [d], b
2916   13C8             ;; for (i = 0; i < len; i++) { 
2917   13C8             _for38_init:
2918   13C8 FA FD FF      lea d, [bp + -3] ; $i
2919   13CB DA            push d
2920   13CC 26 00 00      mov b, $0
2921   13CF E7            pop d
2922   13D0 FD 43         mov [d], b
2923   13D2             _for38_cond:
2924   13D2 FA FD FF      lea d, [bp + -3] ; $i
2925   13D5 2A            mov b, [d]
2926   13D6             ; START RELATIONAL
2927   13D6 D7            push a
2928   13D7 11            mov a, b
2929   13D8 FA FA FF      lea d, [bp + -6] ; $len
2930   13DB 2A            mov b, [d]
2931   13DC B0            cmp a, b
2932   13DD FD 73         slt ; <= (signed)
2933   13DF E4            pop a
2934   13E0             ; END RELATIONAL
2935   13E0 C0 00 00      cmp b, 0
2936   13E3 C6 E5 14      je _for38_exit
2937   13E6             _for38_block:
2938   13E6             ;; hex_char = hex_string[i]; 
2939   13E6 FA FC FF      lea d, [bp + -4] ; $hex_char
2940   13E9 DA            push d
2941   13EA FA 05 00      lea d, [bp + 5] ; $hex_string
2942   13ED FD 2A         mov d, [d]
2943   13EF D7            push a
2944   13F0 DA            push d
2945   13F1 FA FD FF      lea d, [bp + -3] ; $i
2946   13F4 2A            mov b, [d]
2947   13F5 E7            pop d
2948   13F6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2949   13FA E4            pop a
2950   13FB 32            mov bl, [d]
2951   13FC A7 00         mov bh, 0
2952   13FE E7            pop d
2953   13FF FD 3E         mov [d], bl
2954   1401             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2955   1401             _if39_cond:
2956   1401 FA FC FF      lea d, [bp + -4] ; $hex_char
2957   1404 32            mov bl, [d]
2958   1405 A7 00         mov bh, 0
2959   1407             ; START RELATIONAL
2960   1407 D7            push a
2961   1408 11            mov a, b
2962   1409 26 61 00      mov b, $61
2963   140C B0            cmp a, b
2964   140D FD 80         sge ; >=
2965   140F E4            pop a
2966   1410             ; END RELATIONAL
2967   1410 D7            push a
2968   1411 11            mov a, b
2969   1412 FA FC FF      lea d, [bp + -4] ; $hex_char
2970   1415 32            mov bl, [d]
2971   1416 A7 00         mov bh, 0
2972   1418             ; START RELATIONAL
2973   1418 D7            push a
2974   1419 11            mov a, b
2975   141A 26 66 00      mov b, $66
2976   141D B0            cmp a, b
2977   141E FD 74         sle ; <=
2978   1420 E4            pop a
2979   1421             ; END RELATIONAL
2980   1421 FD A7         sand a, b ; &&
2981   1423 E4            pop a
2982   1424 C0 00 00      cmp b, 0
2983   1427 C6 58 14      je _if39_else
2984   142A             _if39_true:
2985   142A             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2986   142A FA FF FF      lea d, [bp + -1] ; $value
2987   142D DA            push d
2988   142E FA FF FF      lea d, [bp + -1] ; $value
2989   1431 2A            mov b, [d]
2990   1432             ; START FACTORS
2991   1432 D7            push a
2992   1433 11            mov a, b
2993   1434 26 10 00      mov b, $10
2994   1437 AC            mul a, b ; *
2995   1438 11            mov a, b
2996   1439 27            mov b, a
2997   143A E4            pop a
2998   143B             ; END FACTORS
2999   143B             ; START TERMS
3000   143B D7            push a
3001   143C 11            mov a, b
3002   143D FA FC FF      lea d, [bp + -4] ; $hex_char
3003   1440 32            mov bl, [d]
3004   1441 A7 00         mov bh, 0
3005   1443             ; START TERMS
3006   1443 D7            push a
3007   1444 11            mov a, b
3008   1445 26 61 00      mov b, $61
3009   1448 60            sub a, b
3010   1449 27            mov b, a
3011   144A 11            mov a, b
3012   144B 26 0A 00      mov b, $a
3013   144E 56            add b, a
3014   144F E4            pop a
3015   1450             ; END TERMS
3016   1450 56            add b, a
3017   1451 E4            pop a
3018   1452             ; END TERMS
3019   1452 E7            pop d
3020   1453 FD 43         mov [d], b
3021   1455 0A D5 14      jmp _if39_exit
3022   1458             _if39_else:
3023   1458             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3024   1458             _if40_cond:
3025   1458 FA FC FF      lea d, [bp + -4] ; $hex_char
3026   145B 32            mov bl, [d]
3027   145C A7 00         mov bh, 0
3028   145E             ; START RELATIONAL
3029   145E D7            push a
3030   145F 11            mov a, b
3031   1460 26 41 00      mov b, $41
3032   1463 B0            cmp a, b
3033   1464 FD 80         sge ; >=
3034   1466 E4            pop a
3035   1467             ; END RELATIONAL
3036   1467 D7            push a
3037   1468 11            mov a, b
3038   1469 FA FC FF      lea d, [bp + -4] ; $hex_char
3039   146C 32            mov bl, [d]
3040   146D A7 00         mov bh, 0
3041   146F             ; START RELATIONAL
3042   146F D7            push a
3043   1470 11            mov a, b
3044   1471 26 46 00      mov b, $46
3045   1474 B0            cmp a, b
3046   1475 FD 74         sle ; <=
3047   1477 E4            pop a
3048   1478             ; END RELATIONAL
3049   1478 FD A7         sand a, b ; &&
3050   147A E4            pop a
3051   147B C0 00 00      cmp b, 0
3052   147E C6 AF 14      je _if40_else
3053   1481             _if40_true:
3054   1481             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3055   1481 FA FF FF      lea d, [bp + -1] ; $value
3056   1484 DA            push d
3057   1485 FA FF FF      lea d, [bp + -1] ; $value
3058   1488 2A            mov b, [d]
3059   1489             ; START FACTORS
3060   1489 D7            push a
3061   148A 11            mov a, b
3062   148B 26 10 00      mov b, $10
3063   148E AC            mul a, b ; *
3064   148F 11            mov a, b
3065   1490 27            mov b, a
3066   1491 E4            pop a
3067   1492             ; END FACTORS
3068   1492             ; START TERMS
3069   1492 D7            push a
3070   1493 11            mov a, b
3071   1494 FA FC FF      lea d, [bp + -4] ; $hex_char
3072   1497 32            mov bl, [d]
3073   1498 A7 00         mov bh, 0
3074   149A             ; START TERMS
3075   149A D7            push a
3076   149B 11            mov a, b
3077   149C 26 41 00      mov b, $41
3078   149F 60            sub a, b
3079   14A0 27            mov b, a
3080   14A1 11            mov a, b
3081   14A2 26 0A 00      mov b, $a
3082   14A5 56            add b, a
3083   14A6 E4            pop a
3084   14A7             ; END TERMS
3085   14A7 56            add b, a
3086   14A8 E4            pop a
3087   14A9             ; END TERMS
3088   14A9 E7            pop d
3089   14AA FD 43         mov [d], b
3090   14AC 0A D5 14      jmp _if40_exit
3091   14AF             _if40_else:
3092   14AF             ;; value = (value * 16) + (hex_char - '0'); 
3093   14AF FA FF FF      lea d, [bp + -1] ; $value
3094   14B2 DA            push d
3095   14B3 FA FF FF      lea d, [bp + -1] ; $value
3096   14B6 2A            mov b, [d]
3097   14B7             ; START FACTORS
3098   14B7 D7            push a
3099   14B8 11            mov a, b
3100   14B9 26 10 00      mov b, $10
3101   14BC AC            mul a, b ; *
3102   14BD 11            mov a, b
3103   14BE 27            mov b, a
3104   14BF E4            pop a
3105   14C0             ; END FACTORS
3106   14C0             ; START TERMS
3107   14C0 D7            push a
3108   14C1 11            mov a, b
3109   14C2 FA FC FF      lea d, [bp + -4] ; $hex_char
3110   14C5 32            mov bl, [d]
3111   14C6 A7 00         mov bh, 0
3112   14C8             ; START TERMS
3113   14C8 D7            push a
3114   14C9 11            mov a, b
3115   14CA 26 30 00      mov b, $30
3116   14CD 60            sub a, b
3117   14CE 27            mov b, a
3118   14CF E4            pop a
3119   14D0             ; END TERMS
3120   14D0 56            add b, a
3121   14D1 E4            pop a
3122   14D2             ; END TERMS
3123   14D2 E7            pop d
3124   14D3 FD 43         mov [d], b
3125   14D5             _if40_exit:
3126   14D5             _if39_exit:
3127   14D5             _for38_update:
3128   14D5 FA FD FF      lea d, [bp + -3] ; $i
3129   14D8 2A            mov b, [d]
3130   14D9 D8            push b
3131   14DA FD 77         inc b
3132   14DC FA FD FF      lea d, [bp + -3] ; $i
3133   14DF FD 43         mov [d], b
3134   14E1 E5            pop b
3135   14E2 0A D2 13      jmp _for38_cond
3136   14E5             _for38_exit:
3137   14E5             ;; return value; 
3138   14E5 FA FF FF      lea d, [bp + -1] ; $value
3139   14E8 2A            mov b, [d]
3140   14E9 F9            leave
3141   14EA 09            ret
3142   14EB             
3143   14EB             gets:
3144   14EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3145   14EE             
3146   14EE             ; --- BEGIN INLINE ASM BLOCK
3147   14EE FA 05 00      lea d, [bp + 5] ; $s
3148   14F1 15            mov a, [d]
3149   14F2 3C            mov d, a
3150   14F3 07 FC 1A      call _gets
3151   14F6             ; --- END INLINE ASM BLOCK
3152   14F6             
3153   14F6             ;; return strlen(s); 
3154   14F6 FA 05 00      lea d, [bp + 5] ; $s
3155   14F9 2A            mov b, [d]
3156   14FA FD AB         swp b
3157   14FC D8            push b
3158   14FD 07 EF 05      call strlen
3159   1500 51 02 00      add sp, 2
3160   1503 F9            leave
3161   1504 09            ret
3162   1505             
3163   1505             print_signed:
3164   1505 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3165   1508             ; $digits 
3166   1508             ; $i 
3167   1508 10 00 00      mov a, $0
3168   150B 45 FA FF      mov [bp + -6], a
3169   150E 52 07 00      sub sp, 7
3170   1511             ;; if (num < 0) { 
3171   1511             _if41_cond:
3172   1511 FA 05 00      lea d, [bp + 5] ; $num
3173   1514 2A            mov b, [d]
3174   1515             ; START RELATIONAL
3175   1515 D7            push a
3176   1516 11            mov a, b
3177   1517 26 00 00      mov b, $0
3178   151A B0            cmp a, b
3179   151B FD 73         slt ; <= (signed)
3180   151D E4            pop a
3181   151E             ; END RELATIONAL
3182   151E C0 00 00      cmp b, 0
3183   1521 C6 3E 15      je _if41_else
3184   1524             _if41_true:
3185   1524             ;; putchar('-'); 
3186   1524 26 2D 00      mov b, $2d
3187   1527 DD            push bl
3188   1528 07 14 19      call putchar
3189   152B 51 01 00      add sp, 1
3190   152E             ;; num = -num; 
3191   152E FA 05 00      lea d, [bp + 5] ; $num
3192   1531 DA            push d
3193   1532 FA 05 00      lea d, [bp + 5] ; $num
3194   1535 2A            mov b, [d]
3195   1536 FD 97         neg b
3196   1538 E7            pop d
3197   1539 FD 43         mov [d], b
3198   153B 0A 60 15      jmp _if41_exit
3199   153E             _if41_else:
3200   153E             ;; if (num == 0) { 
3201   153E             _if42_cond:
3202   153E FA 05 00      lea d, [bp + 5] ; $num
3203   1541 2A            mov b, [d]
3204   1542             ; START RELATIONAL
3205   1542 D7            push a
3206   1543 11            mov a, b
3207   1544 26 00 00      mov b, $0
3208   1547 B0            cmp a, b
3209   1548 FD 71         seq ; ==
3210   154A E4            pop a
3211   154B             ; END RELATIONAL
3212   154B C0 00 00      cmp b, 0
3213   154E C6 60 15      je _if42_exit
3214   1551             _if42_true:
3215   1551             ;; putchar('0'); 
3216   1551 26 30 00      mov b, $30
3217   1554 DD            push bl
3218   1555 07 14 19      call putchar
3219   1558 51 01 00      add sp, 1
3220   155B             ;; return; 
3221   155B F9            leave
3222   155C 09            ret
3223   155D 0A 60 15      jmp _if42_exit
3224   1560             _if42_exit:
3225   1560             _if41_exit:
3226   1560             ;; while (num > 0) { 
3227   1560             _while43_cond:
3228   1560 FA 05 00      lea d, [bp + 5] ; $num
3229   1563 2A            mov b, [d]
3230   1564             ; START RELATIONAL
3231   1564 D7            push a
3232   1565 11            mov a, b
3233   1566 26 00 00      mov b, $0
3234   1569 B0            cmp a, b
3235   156A FD 7F         sgt ; >
3236   156C E4            pop a
3237   156D             ; END RELATIONAL
3238   156D C0 00 00      cmp b, 0
3239   1570 C6 BA 15      je _while43_exit
3240   1573             _while43_block:
3241   1573             ;; digits[i] = '0' + (num % 10); 
3242   1573 FA FC FF      lea d, [bp + -4] ; $digits
3243   1576 D7            push a
3244   1577 DA            push d
3245   1578 FA FA FF      lea d, [bp + -6] ; $i
3246   157B 2A            mov b, [d]
3247   157C E7            pop d
3248   157D 5A            add d, b
3249   157E E4            pop a
3250   157F DA            push d
3251   1580 26 30 00      mov b, $30
3252   1583             ; START TERMS
3253   1583 D7            push a
3254   1584 11            mov a, b
3255   1585 FA 05 00      lea d, [bp + 5] ; $num
3256   1588 2A            mov b, [d]
3257   1589             ; START FACTORS
3258   1589 D7            push a
3259   158A 11            mov a, b
3260   158B 26 0A 00      mov b, $a
3261   158E AE            div a, b ; 
3262   158F 11            mov a, b
3263   1590 27            mov b, a
3264   1591 E4            pop a
3265   1592             ; END FACTORS
3266   1592 56            add b, a
3267   1593 E4            pop a
3268   1594             ; END TERMS
3269   1594 E7            pop d
3270   1595 FD 3E         mov [d], bl
3271   1597             ;; num = num / 10; 
3272   1597 FA 05 00      lea d, [bp + 5] ; $num
3273   159A DA            push d
3274   159B FA 05 00      lea d, [bp + 5] ; $num
3275   159E 2A            mov b, [d]
3276   159F             ; START FACTORS
3277   159F D7            push a
3278   15A0 11            mov a, b
3279   15A1 26 0A 00      mov b, $a
3280   15A4 AE            div a, b
3281   15A5 27            mov b, a
3282   15A6 E4            pop a
3283   15A7             ; END FACTORS
3284   15A7 E7            pop d
3285   15A8 FD 43         mov [d], b
3286   15AA             ;; i++; 
3287   15AA FA FA FF      lea d, [bp + -6] ; $i
3288   15AD 2A            mov b, [d]
3289   15AE D8            push b
3290   15AF FD 77         inc b
3291   15B1 FA FA FF      lea d, [bp + -6] ; $i
3292   15B4 FD 43         mov [d], b
3293   15B6 E5            pop b
3294   15B7 0A 60 15      jmp _while43_cond
3295   15BA             _while43_exit:
3296   15BA             ;; while (i > 0) { 
3297   15BA             _while44_cond:
3298   15BA FA FA FF      lea d, [bp + -6] ; $i
3299   15BD 2A            mov b, [d]
3300   15BE             ; START RELATIONAL
3301   15BE D7            push a
3302   15BF 11            mov a, b
3303   15C0 26 00 00      mov b, $0
3304   15C3 B0            cmp a, b
3305   15C4 FD 7F         sgt ; >
3306   15C6 E4            pop a
3307   15C7             ; END RELATIONAL
3308   15C7 C0 00 00      cmp b, 0
3309   15CA C6 F3 15      je _while44_exit
3310   15CD             _while44_block:
3311   15CD             ;; i--; 
3312   15CD FA FA FF      lea d, [bp + -6] ; $i
3313   15D0 2A            mov b, [d]
3314   15D1 D8            push b
3315   15D2 FD 7D         dec b
3316   15D4 FA FA FF      lea d, [bp + -6] ; $i
3317   15D7 FD 43         mov [d], b
3318   15D9 E5            pop b
3319   15DA             ;; putchar(digits[i]); 
3320   15DA FA FC FF      lea d, [bp + -4] ; $digits
3321   15DD D7            push a
3322   15DE DA            push d
3323   15DF FA FA FF      lea d, [bp + -6] ; $i
3324   15E2 2A            mov b, [d]
3325   15E3 E7            pop d
3326   15E4 5A            add d, b
3327   15E5 E4            pop a
3328   15E6 32            mov bl, [d]
3329   15E7 A7 00         mov bh, 0
3330   15E9 DD            push bl
3331   15EA 07 14 19      call putchar
3332   15ED 51 01 00      add sp, 1
3333   15F0 0A BA 15      jmp _while44_cond
3334   15F3             _while44_exit:
3335   15F3 F9            leave
3336   15F4 09            ret
3337   15F5             
3338   15F5             print_signed_long:
3339   15F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3340   15F8             ; $digits 
3341   15F8             ; $i 
3342   15F8 10 00 00      mov a, $0
3343   15FB 45 F5 FF      mov [bp + -11], a
3344   15FE 52 0C 00      sub sp, 12
3345   1601             ;; if (num < 0) { 
3346   1601             _if45_cond:
3347   1601 FA 05 00      lea d, [bp + 5] ; $num
3348   1604 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3349   1607 FD 39         mov c, b ; And place it into C
3350   1609 2A            mov b, [d] ; Lower Word in B
3351   160A             ; START RELATIONAL
3352   160A D7            push a
3353   160B FD D8         push g
3354   160D 11            mov a, b
3355   160E FD 7A         mov g, c
3356   1610 26 00 00      mov b, $0
3357   1613 4D            mov si, a
3358   1614 11            mov a, b
3359   1615 4F            mov di, a
3360   1616 FD 12         mov a, g
3361   1618 28            mov b, c
3362   1619 B0            cmp a, b
3363   161A FD 75         slu ; <
3364   161C D8            push b
3365   161D 28            mov b, c
3366   161E FD 71         seq ; ==
3367   1620 D8            push b
3368   1621 50            mov a, di
3369   1622 27            mov b, a
3370   1623 4E            mov a, si
3371   1624 B0            cmp a, b
3372   1625 FD 75         slu ; <
3373   1627 E4            pop a
3374   1628 FD 92         and b, a
3375   162A E4            pop a
3376   162B FD 70         or b, a
3377   162D               
3378   162D FD F1         pop g
3379   162F E4            pop a
3380   1630             ; END RELATIONAL
3381   1630 C0 00 00      cmp b, 0
3382   1633 C6 5A 16      je _if45_else
3383   1636             _if45_true:
3384   1636             ;; putchar('-'); 
3385   1636 26 2D 00      mov b, $2d
3386   1639 DD            push bl
3387   163A 07 14 19      call putchar
3388   163D 51 01 00      add sp, 1
3389   1640             ;; num = -num; 
3390   1640 FA 05 00      lea d, [bp + 5] ; $num
3391   1643 DA            push d
3392   1644 FA 05 00      lea d, [bp + 5] ; $num
3393   1647 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3394   164A FD 39         mov c, b ; And place it into C
3395   164C 2A            mov b, [d] ; Lower Word in B
3396   164D FD 97         neg b
3397   164F E7            pop d
3398   1650 FD 43         mov [d], b
3399   1652 28            mov b, c
3400   1653 FD 44 02 00   mov [d + 2], b
3401   1657 0A 91 16      jmp _if45_exit
3402   165A             _if45_else:
3403   165A             ;; if (num == 0) { 
3404   165A             _if46_cond:
3405   165A FA 05 00      lea d, [bp + 5] ; $num
3406   165D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3407   1660 FD 39         mov c, b ; And place it into C
3408   1662 2A            mov b, [d] ; Lower Word in B
3409   1663             ; START RELATIONAL
3410   1663 D7            push a
3411   1664 FD D8         push g
3412   1666 11            mov a, b
3413   1667 FD 7A         mov g, c
3414   1669 26 00 00      mov b, $0
3415   166C B0            cmp a, b
3416   166D FD 71         seq ; ==
3417   166F D8            push b
3418   1670 12            mov a, c
3419   1671 FD 27         mov b, g
3420   1673 B0            cmp a, b
3421   1674 FD 71         seq ; ==
3422   1676 E4            pop a
3423   1677 FD A7         sand a, b
3424   1679 FD F1         pop g
3425   167B E4            pop a
3426   167C             ; END RELATIONAL
3427   167C C0 00 00      cmp b, 0
3428   167F C6 91 16      je _if46_exit
3429   1682             _if46_true:
3430   1682             ;; putchar('0'); 
3431   1682 26 30 00      mov b, $30
3432   1685 DD            push bl
3433   1686 07 14 19      call putchar
3434   1689 51 01 00      add sp, 1
3435   168C             ;; return; 
3436   168C F9            leave
3437   168D 09            ret
3438   168E 0A 91 16      jmp _if46_exit
3439   1691             _if46_exit:
3440   1691             _if45_exit:
3441   1691             ;; while (num > 0) { 
3442   1691             _while47_cond:
3443   1691 FA 05 00      lea d, [bp + 5] ; $num
3444   1694 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3445   1697 FD 39         mov c, b ; And place it into C
3446   1699 2A            mov b, [d] ; Lower Word in B
3447   169A             ; START RELATIONAL
3448   169A D7            push a
3449   169B FD D8         push g
3450   169D 11            mov a, b
3451   169E FD 7A         mov g, c
3452   16A0 26 00 00      mov b, $0
3453   16A3 B0            cmp a, b
3454   16A4 FD 7F         sgt ; >
3455   16A6 FD F1         pop g
3456   16A8 E4            pop a
3457   16A9             ; END RELATIONAL
3458   16A9 C0 00 00      cmp b, 0
3459   16AC C6 0C 17      je _while47_exit
3460   16AF             _while47_block:
3461   16AF             ;; digits[i] = '0' + (num % 10); 
3462   16AF FA F7 FF      lea d, [bp + -9] ; $digits
3463   16B2 D7            push a
3464   16B3 DA            push d
3465   16B4 FA F5 FF      lea d, [bp + -11] ; $i
3466   16B7 2A            mov b, [d]
3467   16B8 E7            pop d
3468   16B9 5A            add d, b
3469   16BA E4            pop a
3470   16BB DA            push d
3471   16BC 26 30 00      mov b, $30
3472   16BF             ; START TERMS
3473   16BF D7            push a
3474   16C0 11            mov a, b
3475   16C1 FA 05 00      lea d, [bp + 5] ; $num
3476   16C4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3477   16C7 FD 39         mov c, b ; And place it into C
3478   16C9 2A            mov b, [d] ; Lower Word in B
3479   16CA             ; START FACTORS
3480   16CA D7            push a
3481   16CB 11            mov a, b
3482   16CC 26 0A 00      mov b, $a
3483   16CF AE            div a, b ; 
3484   16D0 11            mov a, b
3485   16D1 27            mov b, a
3486   16D2 E4            pop a
3487   16D3             ; END FACTORS
3488   16D3 54            add a, b
3489   16D4 D7            push a
3490   16D5 FD 12         mov a, g
3491   16D7 28            mov b, c
3492   16D8 5C            adc a, b
3493   16D9 39            mov c, a
3494   16DA E5            pop b
3495   16DB E4            pop a
3496   16DC             ; END TERMS
3497   16DC E7            pop d
3498   16DD FD 3E         mov [d], bl
3499   16DF             ;; num = num / 10; 
3500   16DF FA 05 00      lea d, [bp + 5] ; $num
3501   16E2 DA            push d
3502   16E3 FA 05 00      lea d, [bp + 5] ; $num
3503   16E6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3504   16E9 FD 39         mov c, b ; And place it into C
3505   16EB 2A            mov b, [d] ; Lower Word in B
3506   16EC             ; START FACTORS
3507   16EC D7            push a
3508   16ED 11            mov a, b
3509   16EE 26 0A 00      mov b, $a
3510   16F1 AE            div a, b
3511   16F2 27            mov b, a
3512   16F3 E4            pop a
3513   16F4             ; END FACTORS
3514   16F4 E7            pop d
3515   16F5 FD 43         mov [d], b
3516   16F7 28            mov b, c
3517   16F8 FD 44 02 00   mov [d + 2], b
3518   16FC             ;; i++; 
3519   16FC FA F5 FF      lea d, [bp + -11] ; $i
3520   16FF 2A            mov b, [d]
3521   1700 D8            push b
3522   1701 FD 77         inc b
3523   1703 FA F5 FF      lea d, [bp + -11] ; $i
3524   1706 FD 43         mov [d], b
3525   1708 E5            pop b
3526   1709 0A 91 16      jmp _while47_cond
3527   170C             _while47_exit:
3528   170C             ;; while (i > 0) { 
3529   170C             _while48_cond:
3530   170C FA F5 FF      lea d, [bp + -11] ; $i
3531   170F 2A            mov b, [d]
3532   1710             ; START RELATIONAL
3533   1710 D7            push a
3534   1711 11            mov a, b
3535   1712 26 00 00      mov b, $0
3536   1715 B0            cmp a, b
3537   1716 FD 7F         sgt ; >
3538   1718 E4            pop a
3539   1719             ; END RELATIONAL
3540   1719 C0 00 00      cmp b, 0
3541   171C C6 45 17      je _while48_exit
3542   171F             _while48_block:
3543   171F             ;; i--; 
3544   171F FA F5 FF      lea d, [bp + -11] ; $i
3545   1722 2A            mov b, [d]
3546   1723 D8            push b
3547   1724 FD 7D         dec b
3548   1726 FA F5 FF      lea d, [bp + -11] ; $i
3549   1729 FD 43         mov [d], b
3550   172B E5            pop b
3551   172C             ;; putchar(digits[i]); 
3552   172C FA F7 FF      lea d, [bp + -9] ; $digits
3553   172F D7            push a
3554   1730 DA            push d
3555   1731 FA F5 FF      lea d, [bp + -11] ; $i
3556   1734 2A            mov b, [d]
3557   1735 E7            pop d
3558   1736 5A            add d, b
3559   1737 E4            pop a
3560   1738 32            mov bl, [d]
3561   1739 A7 00         mov bh, 0
3562   173B DD            push bl
3563   173C 07 14 19      call putchar
3564   173F 51 01 00      add sp, 1
3565   1742 0A 0C 17      jmp _while48_cond
3566   1745             _while48_exit:
3567   1745 F9            leave
3568   1746 09            ret
3569   1747             
3570   1747             print_unsigned_long:
3571   1747 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3572   174A             ; $digits 
3573   174A             ; $i 
3574   174A 52 0C 00      sub sp, 12
3575   174D             ;; i = 0; 
3576   174D FA F5 FF      lea d, [bp + -11] ; $i
3577   1750 DA            push d
3578   1751 26 00 00      mov b, $0
3579   1754 E7            pop d
3580   1755 FD 43         mov [d], b
3581   1757             ;; if(num == 0){ 
3582   1757             _if49_cond:
3583   1757 FA 05 00      lea d, [bp + 5] ; $num
3584   175A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3585   175D FD 39         mov c, b ; And place it into C
3586   175F 2A            mov b, [d] ; Lower Word in B
3587   1760             ; START RELATIONAL
3588   1760 D7            push a
3589   1761 FD D8         push g
3590   1763 11            mov a, b
3591   1764 FD 7A         mov g, c
3592   1766 26 00 00      mov b, $0
3593   1769 B0            cmp a, b
3594   176A FD 71         seq ; ==
3595   176C D8            push b
3596   176D 12            mov a, c
3597   176E FD 27         mov b, g
3598   1770 B0            cmp a, b
3599   1771 FD 71         seq ; ==
3600   1773 E4            pop a
3601   1774 FD A7         sand a, b
3602   1776 FD F1         pop g
3603   1778 E4            pop a
3604   1779             ; END RELATIONAL
3605   1779 C0 00 00      cmp b, 0
3606   177C C6 8E 17      je _if49_exit
3607   177F             _if49_true:
3608   177F             ;; putchar('0'); 
3609   177F 26 30 00      mov b, $30
3610   1782 DD            push bl
3611   1783 07 14 19      call putchar
3612   1786 51 01 00      add sp, 1
3613   1789             ;; return; 
3614   1789 F9            leave
3615   178A 09            ret
3616   178B 0A 8E 17      jmp _if49_exit
3617   178E             _if49_exit:
3618   178E             ;; while (num > 0) { 
3619   178E             _while50_cond:
3620   178E FA 05 00      lea d, [bp + 5] ; $num
3621   1791 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3622   1794 FD 39         mov c, b ; And place it into C
3623   1796 2A            mov b, [d] ; Lower Word in B
3624   1797             ; START RELATIONAL
3625   1797 D7            push a
3626   1798 FD D8         push g
3627   179A 11            mov a, b
3628   179B FD 7A         mov g, c
3629   179D 26 00 00      mov b, $0
3630   17A0 B0            cmp a, b
3631   17A1 FD 81         sgu ; > (unsigned)
3632   17A3 FD F1         pop g
3633   17A5 E4            pop a
3634   17A6             ; END RELATIONAL
3635   17A6 C0 00 00      cmp b, 0
3636   17A9 C6 09 18      je _while50_exit
3637   17AC             _while50_block:
3638   17AC             ;; digits[i] = '0' + (num % 10); 
3639   17AC FA F7 FF      lea d, [bp + -9] ; $digits
3640   17AF D7            push a
3641   17B0 DA            push d
3642   17B1 FA F5 FF      lea d, [bp + -11] ; $i
3643   17B4 2A            mov b, [d]
3644   17B5 E7            pop d
3645   17B6 5A            add d, b
3646   17B7 E4            pop a
3647   17B8 DA            push d
3648   17B9 26 30 00      mov b, $30
3649   17BC             ; START TERMS
3650   17BC D7            push a
3651   17BD 11            mov a, b
3652   17BE FA 05 00      lea d, [bp + 5] ; $num
3653   17C1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3654   17C4 FD 39         mov c, b ; And place it into C
3655   17C6 2A            mov b, [d] ; Lower Word in B
3656   17C7             ; START FACTORS
3657   17C7 D7            push a
3658   17C8 11            mov a, b
3659   17C9 26 0A 00      mov b, $a
3660   17CC AE            div a, b ; 
3661   17CD 11            mov a, b
3662   17CE 27            mov b, a
3663   17CF E4            pop a
3664   17D0             ; END FACTORS
3665   17D0 54            add a, b
3666   17D1 D7            push a
3667   17D2 FD 12         mov a, g
3668   17D4 28            mov b, c
3669   17D5 5C            adc a, b
3670   17D6 39            mov c, a
3671   17D7 E5            pop b
3672   17D8 E4            pop a
3673   17D9             ; END TERMS
3674   17D9 E7            pop d
3675   17DA FD 3E         mov [d], bl
3676   17DC             ;; num = num / 10; 
3677   17DC FA 05 00      lea d, [bp + 5] ; $num
3678   17DF DA            push d
3679   17E0 FA 05 00      lea d, [bp + 5] ; $num
3680   17E3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3681   17E6 FD 39         mov c, b ; And place it into C
3682   17E8 2A            mov b, [d] ; Lower Word in B
3683   17E9             ; START FACTORS
3684   17E9 D7            push a
3685   17EA 11            mov a, b
3686   17EB 26 0A 00      mov b, $a
3687   17EE AE            div a, b
3688   17EF 27            mov b, a
3689   17F0 E4            pop a
3690   17F1             ; END FACTORS
3691   17F1 E7            pop d
3692   17F2 FD 43         mov [d], b
3693   17F4 28            mov b, c
3694   17F5 FD 44 02 00   mov [d + 2], b
3695   17F9             ;; i++; 
3696   17F9 FA F5 FF      lea d, [bp + -11] ; $i
3697   17FC 2A            mov b, [d]
3698   17FD D8            push b
3699   17FE FD 77         inc b
3700   1800 FA F5 FF      lea d, [bp + -11] ; $i
3701   1803 FD 43         mov [d], b
3702   1805 E5            pop b
3703   1806 0A 8E 17      jmp _while50_cond
3704   1809             _while50_exit:
3705   1809             ;; while (i > 0) { 
3706   1809             _while51_cond:
3707   1809 FA F5 FF      lea d, [bp + -11] ; $i
3708   180C 2A            mov b, [d]
3709   180D             ; START RELATIONAL
3710   180D D7            push a
3711   180E 11            mov a, b
3712   180F 26 00 00      mov b, $0
3713   1812 B0            cmp a, b
3714   1813 FD 7F         sgt ; >
3715   1815 E4            pop a
3716   1816             ; END RELATIONAL
3717   1816 C0 00 00      cmp b, 0
3718   1819 C6 42 18      je _while51_exit
3719   181C             _while51_block:
3720   181C             ;; i--; 
3721   181C FA F5 FF      lea d, [bp + -11] ; $i
3722   181F 2A            mov b, [d]
3723   1820 D8            push b
3724   1821 FD 7D         dec b
3725   1823 FA F5 FF      lea d, [bp + -11] ; $i
3726   1826 FD 43         mov [d], b
3727   1828 E5            pop b
3728   1829             ;; putchar(digits[i]); 
3729   1829 FA F7 FF      lea d, [bp + -9] ; $digits
3730   182C D7            push a
3731   182D DA            push d
3732   182E FA F5 FF      lea d, [bp + -11] ; $i
3733   1831 2A            mov b, [d]
3734   1832 E7            pop d
3735   1833 5A            add d, b
3736   1834 E4            pop a
3737   1835 32            mov bl, [d]
3738   1836 A7 00         mov bh, 0
3739   1838 DD            push bl
3740   1839 07 14 19      call putchar
3741   183C 51 01 00      add sp, 1
3742   183F 0A 09 18      jmp _while51_cond
3743   1842             _while51_exit:
3744   1842 F9            leave
3745   1843 09            ret
3746   1844             
3747   1844             print_unsigned:
3748   1844 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3749   1847             ; $digits 
3750   1847             ; $i 
3751   1847 52 07 00      sub sp, 7
3752   184A             ;; i = 0; 
3753   184A FA FA FF      lea d, [bp + -6] ; $i
3754   184D DA            push d
3755   184E 26 00 00      mov b, $0
3756   1851 E7            pop d
3757   1852 FD 43         mov [d], b
3758   1854             ;; if(num == 0){ 
3759   1854             _if52_cond:
3760   1854 FA 05 00      lea d, [bp + 5] ; $num
3761   1857 2A            mov b, [d]
3762   1858             ; START RELATIONAL
3763   1858 D7            push a
3764   1859 11            mov a, b
3765   185A 26 00 00      mov b, $0
3766   185D B0            cmp a, b
3767   185E FD 71         seq ; ==
3768   1860 E4            pop a
3769   1861             ; END RELATIONAL
3770   1861 C0 00 00      cmp b, 0
3771   1864 C6 76 18      je _if52_exit
3772   1867             _if52_true:
3773   1867             ;; putchar('0'); 
3774   1867 26 30 00      mov b, $30
3775   186A DD            push bl
3776   186B 07 14 19      call putchar
3777   186E 51 01 00      add sp, 1
3778   1871             ;; return; 
3779   1871 F9            leave
3780   1872 09            ret
3781   1873 0A 76 18      jmp _if52_exit
3782   1876             _if52_exit:
3783   1876             ;; while (num > 0) { 
3784   1876             _while53_cond:
3785   1876 FA 05 00      lea d, [bp + 5] ; $num
3786   1879 2A            mov b, [d]
3787   187A             ; START RELATIONAL
3788   187A D7            push a
3789   187B 11            mov a, b
3790   187C 26 00 00      mov b, $0
3791   187F B0            cmp a, b
3792   1880 FD 81         sgu ; > (unsigned)
3793   1882 E4            pop a
3794   1883             ; END RELATIONAL
3795   1883 C0 00 00      cmp b, 0
3796   1886 C6 D0 18      je _while53_exit
3797   1889             _while53_block:
3798   1889             ;; digits[i] = '0' + (num % 10); 
3799   1889 FA FC FF      lea d, [bp + -4] ; $digits
3800   188C D7            push a
3801   188D DA            push d
3802   188E FA FA FF      lea d, [bp + -6] ; $i
3803   1891 2A            mov b, [d]
3804   1892 E7            pop d
3805   1893 5A            add d, b
3806   1894 E4            pop a
3807   1895 DA            push d
3808   1896 26 30 00      mov b, $30
3809   1899             ; START TERMS
3810   1899 D7            push a
3811   189A 11            mov a, b
3812   189B FA 05 00      lea d, [bp + 5] ; $num
3813   189E 2A            mov b, [d]
3814   189F             ; START FACTORS
3815   189F D7            push a
3816   18A0 11            mov a, b
3817   18A1 26 0A 00      mov b, $a
3818   18A4 AE            div a, b ; 
3819   18A5 11            mov a, b
3820   18A6 27            mov b, a
3821   18A7 E4            pop a
3822   18A8             ; END FACTORS
3823   18A8 56            add b, a
3824   18A9 E4            pop a
3825   18AA             ; END TERMS
3826   18AA E7            pop d
3827   18AB FD 3E         mov [d], bl
3828   18AD             ;; num = num / 10; 
3829   18AD FA 05 00      lea d, [bp + 5] ; $num
3830   18B0 DA            push d
3831   18B1 FA 05 00      lea d, [bp + 5] ; $num
3832   18B4 2A            mov b, [d]
3833   18B5             ; START FACTORS
3834   18B5 D7            push a
3835   18B6 11            mov a, b
3836   18B7 26 0A 00      mov b, $a
3837   18BA AE            div a, b
3838   18BB 27            mov b, a
3839   18BC E4            pop a
3840   18BD             ; END FACTORS
3841   18BD E7            pop d
3842   18BE FD 43         mov [d], b
3843   18C0             ;; i++; 
3844   18C0 FA FA FF      lea d, [bp + -6] ; $i
3845   18C3 2A            mov b, [d]
3846   18C4 D8            push b
3847   18C5 FD 77         inc b
3848   18C7 FA FA FF      lea d, [bp + -6] ; $i
3849   18CA FD 43         mov [d], b
3850   18CC E5            pop b
3851   18CD 0A 76 18      jmp _while53_cond
3852   18D0             _while53_exit:
3853   18D0             ;; while (i > 0) { 
3854   18D0             _while54_cond:
3855   18D0 FA FA FF      lea d, [bp + -6] ; $i
3856   18D3 2A            mov b, [d]
3857   18D4             ; START RELATIONAL
3858   18D4 D7            push a
3859   18D5 11            mov a, b
3860   18D6 26 00 00      mov b, $0
3861   18D9 B0            cmp a, b
3862   18DA FD 7F         sgt ; >
3863   18DC E4            pop a
3864   18DD             ; END RELATIONAL
3865   18DD C0 00 00      cmp b, 0
3866   18E0 C6 09 19      je _while54_exit
3867   18E3             _while54_block:
3868   18E3             ;; i--; 
3869   18E3 FA FA FF      lea d, [bp + -6] ; $i
3870   18E6 2A            mov b, [d]
3871   18E7 D8            push b
3872   18E8 FD 7D         dec b
3873   18EA FA FA FF      lea d, [bp + -6] ; $i
3874   18ED FD 43         mov [d], b
3875   18EF E5            pop b
3876   18F0             ;; putchar(digits[i]); 
3877   18F0 FA FC FF      lea d, [bp + -4] ; $digits
3878   18F3 D7            push a
3879   18F4 DA            push d
3880   18F5 FA FA FF      lea d, [bp + -6] ; $i
3881   18F8 2A            mov b, [d]
3882   18F9 E7            pop d
3883   18FA 5A            add d, b
3884   18FB E4            pop a
3885   18FC 32            mov bl, [d]
3886   18FD A7 00         mov bh, 0
3887   18FF DD            push bl
3888   1900 07 14 19      call putchar
3889   1903 51 01 00      add sp, 1
3890   1906 0A D0 18      jmp _while54_cond
3891   1909             _while54_exit:
3892   1909 F9            leave
3893   190A 09            ret
3894   190B             
3895   190B             date:
3896   190B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3897   190E             
3898   190E             ; --- BEGIN INLINE ASM BLOCK
3899   190E 19 00         mov al, 0 
3900   1910 05 07         syscall sys_datetime
3901   1912             ; --- END INLINE ASM BLOCK
3902   1912             
3903   1912 F9            leave
3904   1913 09            ret
3905   1914             
3906   1914             putchar:
3907   1914 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3908   1917             
3909   1917             ; --- BEGIN INLINE ASM BLOCK
3910   1917 FA 05 00      lea d, [bp + 5] ; $c
3911   191A 1E            mov al, [d]
3912   191B 23            mov ah, al
3913   191C 07 F5 1A      call _putchar
3914   191F             ; --- END INLINE ASM BLOCK
3915   191F             
3916   191F F9            leave
3917   1920 09            ret
3918   1921             
3919   1921             getchar:
3920   1921 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3921   1924             ; $c 
3922   1924 52 01 00      sub sp, 1
3923   1927             
3924   1927             ; --- BEGIN INLINE ASM BLOCK
3925   1927 07 EE 1A      call getch
3926   192A 1A            mov al, ah
3927   192B FA 00 00      lea d, [bp + 0] ; $c
3928   192E 3E            mov [d], al
3929   192F             ; --- END INLINE ASM BLOCK
3930   192F             
3931   192F             ;; return c; 
3932   192F FA 00 00      lea d, [bp + 0] ; $c
3933   1932 32            mov bl, [d]
3934   1933 A7 00         mov bh, 0
3935   1935 F9            leave
3936   1936 09            ret
3937   1937             
3938   1937             scann:
3939   1937 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3940   193A             ; $m 
3941   193A 52 02 00      sub sp, 2
3942   193D             
3943   193D             ; --- BEGIN INLINE ASM BLOCK
3944   193D 07 39 1D      call scan_u16d
3945   1940 FA FF FF      lea d, [bp + -1] ; $m
3946   1943 43            mov [d], a
3947   1944             ; --- END INLINE ASM BLOCK
3948   1944             
3949   1944             ;; return m; 
3950   1944 FA FF FF      lea d, [bp + -1] ; $m
3951   1947 2A            mov b, [d]
3952   1948 F9            leave
3953   1949 09            ret
3954   194A             
3955   194A             puts:
3956   194A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3957   194D             
3958   194D             ; --- BEGIN INLINE ASM BLOCK
3959   194D FA 05 00      lea d, [bp + 5] ; $s
3960   1950 15            mov a, [d]
3961   1951 3C            mov d, a
3962   1952 07 3F 1C      call _puts
3963   1955 10 00 0A      mov a, $0A00
3964   1958 05 03         syscall sys_io
3965   195A             ; --- END INLINE ASM BLOCK
3966   195A             
3967   195A F9            leave
3968   195B 09            ret
3969   195C             
3970   195C             print:
3971   195C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3972   195F             
3973   195F             ; --- BEGIN INLINE ASM BLOCK
3974   195F FA 05 00      lea d, [bp + 5] ; $s
3975   1962 FD 2A         mov d, [d]
3976   1964 07 3F 1C      call _puts
3977   1967             ; --- END INLINE ASM BLOCK
3978   1967             
3979   1967 F9            leave
3980   1968 09            ret
3981   1969             
3982   1969             loadfile:
3983   1969 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3984   196C             
3985   196C             ; --- BEGIN INLINE ASM BLOCK
3986   196C FA 07 00      lea d, [bp + 7] ; $destination
3987   196F 15            mov a, [d]
3988   1970 4F            mov di, a
3989   1971 FA 05 00      lea d, [bp + 5] ; $filename
3990   1974 FD 2A         mov d, [d]
3991   1976 19 14         mov al, 20
3992   1978 05 04         syscall sys_filesystem
3993   197A             ; --- END INLINE ASM BLOCK
3994   197A             
3995   197A F9            leave
3996   197B 09            ret
3997   197C             
3998   197C             create_file:
3999   197C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4000   197F F9            leave
4001   1980 09            ret
4002   1981             
4003   1981             delete_file:
4004   1981 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4005   1984             
4006   1984             ; --- BEGIN INLINE ASM BLOCK
4007   1984 FA 05 00      lea d, [bp + 5] ; $filename
4008   1987 19 0A         mov al, 10
4009   1989 05 04         syscall sys_filesystem
4010   198B             ; --- END INLINE ASM BLOCK
4011   198B             
4012   198B F9            leave
4013   198C 09            ret
4014   198D             
4015   198D             fopen:
4016   198D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4017   1990 F9            leave
4018   1991 09            ret
4019   1992             
4020   1992             fclose:
4021   1992 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4022   1995 F9            leave
4023   1996 09            ret
4024   1997             
4025   1997             load_hex:
4026   1997 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4027   199A             ; $temp 
4028   199A 52 02 00      sub sp, 2
4029   199D             ;; temp = alloc(32768); 
4030   199D FA FF FF      lea d, [bp + -1] ; $temp
4031   19A0 DA            push d
4032   19A1 26 00 80      mov b, $8000
4033   19A4 FD AB         swp b
4034   19A6 D8            push b
4035   19A7 07 79 07      call alloc
4036   19AA 51 02 00      add sp, 2
4037   19AD E7            pop d
4038   19AE FD 43         mov [d], b
4039   19B0             
4040   19B0             ; --- BEGIN INLINE ASM BLOCK
4041   19B0               
4042   19B0               
4043   19B0               
4044   19B0               
4045   19B0               
4046   19B0             _load_hex:
4047   19B0 D7            push a
4048   19B1 D8            push b
4049   19B2 DA            push d
4050   19B3 E2            push si
4051   19B4 E3            push di
4052   19B5 52 00 80      sub sp, $8000      
4053   19B8 38 00 00      mov c, 0
4054   19BB 48            mov a, sp
4055   19BC 77            inc a
4056   19BD 3C            mov d, a          
4057   19BE 07 FC 1A      call _gets        
4058   19C1 4D            mov si, a
4059   19C2             __load_hex_loop:
4060   19C2 F6            lodsb             
4061   19C3 B9 00         cmp al, 0         
4062   19C5 C6 D3 19      jz __load_hex_ret
4063   19C8 36            mov bh, al
4064   19C9 F6            lodsb
4065   19CA 2F            mov bl, al
4066   19CB 07 B2 1A      call _atoi        
4067   19CE F7            stosb             
4068   19CF 78            inc c
4069   19D0 0A C2 19      jmp __load_hex_loop
4070   19D3             __load_hex_ret:
4071   19D3 51 00 80      add sp, $8000
4072   19D6 F0            pop di
4073   19D7 EF            pop si
4074   19D8 E7            pop d
4075   19D9 E5            pop b
4076   19DA E4            pop a
4077   19DB             ; --- END INLINE ASM BLOCK
4078   19DB             
4079   19DB F9            leave
4080   19DC 09            ret
4081   19DD             
4082   19DD             getparam:
4083   19DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
4084   19E0             ; $data 
4085   19E0 52 01 00      sub sp, 1
4086   19E3             
4087   19E3             ; --- BEGIN INLINE ASM BLOCK
4088   19E3 19 04         mov al, 4
4089   19E5 FA 05 00      lea d, [bp + 5] ; $address
4090   19E8 FD 2A         mov d, [d]
4091   19EA 05 0C         syscall sys_system
4092   19EC FA 00 00      lea d, [bp + 0] ; $data
4093   19EF FD 3E         mov [d], bl
4094   19F1             ; --- END INLINE ASM BLOCK
4095   19F1             
4096   19F1             ;; return data; 
4097   19F1 FA 00 00      lea d, [bp + 0] ; $data
4098   19F4 32            mov bl, [d]
4099   19F5 A7 00         mov bh, 0
4100   19F7 F9            leave
4101   19F8 09            ret
4102   19F9             
4103   19F9             clear:
4104   19F9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4105   19FC             ;; print("\033[2J\033[H"); 
4106   19FC 26 DE 27      mov b, __s3 ; "\033[2J\033[H"
4107   19FF FD AB         swp b
4108   1A01 D8            push b
4109   1A02 07 5C 19      call print
4110   1A05 51 02 00      add sp, 2
4111   1A08 F9            leave
4112   1A09 09            ret
4113   1A0A             
4114   1A0A             include_stdio_asm:
4115   1A0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4116   1A0D             
4117   1A0D             ; --- BEGIN INLINE ASM BLOCK
4118   1A0D             .include "lib/asm/stdio.asm"
0001+  1A0D             ;-----------------------------------------------------------------------------
0002+  1A0D             ; stdio.s
0003+  1A0D             ;-----------------------------------------------------------------------------
0004+  1A0D             .include "lib/asm/string.asm"
0001++ 1A0D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1A0D             ; string.s
0003++ 1A0D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1A0D             
0005++ 1A0D             
0006++ 1A0D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1A0D             ; _strrev
0008++ 1A0D             ; reverse a string
0009++ 1A0D             ; D = string address
0010++ 1A0D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1A0D             ; 01234
0012++ 1A0D             _strrev:
0013++ 1A0D 4B          	pusha
0014++ 1A0E 07 54 1A    	call _strlen	; length in C
0015++ 1A11 12          	mov a, c
0016++ 1A12 AF 01 00    	cmp a, 1
0017++ 1A15 D0 2F 1A    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1A18 7D          	dec a
0019++ 1A19 FD 4E       	mov si, d	; beginning of string
0020++ 1A1B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1A1D 59          	add d, a	; end of string
0022++ 1A1E 12          	mov a, c
0023++ 1A1F FD 9B       	shr a		; divide by 2
0024++ 1A21 39          	mov c, a	; C now counts the steps
0025++ 1A22             _strrev_L0:
0026++ 1A22 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1A23 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1A24 3E          	mov [d], al	; store left char into right side
0029++ 1A25 1B          	mov al, bl
0030++ 1A26 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1A27 7E          	dec c
0032++ 1A28 7F          	dec d
0033++ 1A29 C2 00 00    	cmp c, 0
0034++ 1A2C C7 22 1A    	jne _strrev_L0
0035++ 1A2F             _strrev_end:
0036++ 1A2F 4C          	popa
0037++ 1A30 09          	ret
0038++ 1A31             	
0039++ 1A31             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1A31             ; _strchr
0041++ 1A31             ; search string in D for char in AL
0042++ 1A31             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1A31             _strchr:
0044++ 1A31             _strchr_L0:
0045++ 1A31 32          	mov bl, [d]
0046++ 1A32 C1 00       	cmp bl, 0
0047++ 1A34 C6 3F 1A    	je _strchr_end
0048++ 1A37 BA          	cmp al, bl
0049++ 1A38 C6 3F 1A    	je _strchr_end
0050++ 1A3B 79          	inc d
0051++ 1A3C 0A 31 1A    	jmp _strchr_L0
0052++ 1A3F             _strchr_end:
0053++ 1A3F 1B          	mov al, bl
0054++ 1A40 09          	ret
0055++ 1A41             
0056++ 1A41             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1A41             ; _strstr
0058++ 1A41             ; find sub-string
0059++ 1A41             ; str1 in SI
0060++ 1A41             ; str2 in DI
0061++ 1A41             ; SI points to end of source string
0062++ 1A41             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1A41             _strstr:
0064++ 1A41 DB          	push al
0065++ 1A42 DA          	push d
0066++ 1A43 E3          	push di
0067++ 1A44             _strstr_loop:
0068++ 1A44 F3          	cmpsb					; compare a byte of the strings
0069++ 1A45 C7 50 1A    	jne _strstr_ret
0070++ 1A48 FC 00 00    	lea d, [di + 0]
0071++ 1A4B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1A4D C7 44 1A    	jne _strstr_loop				; equal chars but not at end
0073++ 1A50             _strstr_ret:
0074++ 1A50 F0          	pop di
0075++ 1A51 E7          	pop d
0076++ 1A52 E8          	pop al
0077++ 1A53 09          	ret
0078++ 1A54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1A54             ; length of null terminated string
0080++ 1A54             ; result in C
0081++ 1A54             ; pointer in D
0082++ 1A54             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1A54             _strlen:
0084++ 1A54 DA          	push d
0085++ 1A55 38 00 00    	mov c, 0
0086++ 1A58             _strlen_L1:
0087++ 1A58 BD 00       	cmp byte [d], 0
0088++ 1A5A C6 62 1A    	je _strlen_ret
0089++ 1A5D 79          	inc d
0090++ 1A5E 78          	inc c
0091++ 1A5F 0A 58 1A    	jmp _strlen_L1
0092++ 1A62             _strlen_ret:
0093++ 1A62 E7          	pop d
0094++ 1A63 09          	ret
0095++ 1A64             
0096++ 1A64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1A64             ; STRCMP
0098++ 1A64             ; compare two strings
0099++ 1A64             ; str1 in SI
0100++ 1A64             ; str2 in DI
0101++ 1A64             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1A64             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1A64             _strcmp:
0104++ 1A64 DB          	push al
0105++ 1A65 DA          	push d
0106++ 1A66 E3          	push di
0107++ 1A67 E2          	push si
0108++ 1A68             _strcmp_loop:
0109++ 1A68 F3          	cmpsb					; compare a byte of the strings
0110++ 1A69 C7 74 1A    	jne _strcmp_ret
0111++ 1A6C FB FF FF    	lea d, [si +- 1]
0112++ 1A6F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1A71 C7 68 1A    	jne _strcmp_loop				; equal chars but not at end
0114++ 1A74             _strcmp_ret:
0115++ 1A74 EF          	pop si
0116++ 1A75 F0          	pop di
0117++ 1A76 E7          	pop d
0118++ 1A77 E8          	pop al
0119++ 1A78 09          	ret
0120++ 1A79             
0121++ 1A79             
0122++ 1A79             ; STRCPY
0123++ 1A79             ; copy null terminated string from SI to DI
0124++ 1A79             ; source in SI
0125++ 1A79             ; destination in DI
0126++ 1A79             _strcpy:
0127++ 1A79 E2          	push si
0128++ 1A7A E3          	push di
0129++ 1A7B DB          	push al
0130++ 1A7C             _strcpy_L1:
0131++ 1A7C F6          	lodsb
0132++ 1A7D F7          	stosb
0133++ 1A7E B9 00       	cmp al, 0
0134++ 1A80 C7 7C 1A    	jne _strcpy_L1
0135++ 1A83             _strcpy_end:
0136++ 1A83 E8          	pop al
0137++ 1A84 F0          	pop di
0138++ 1A85 EF          	pop si
0139++ 1A86 09          	ret
0140++ 1A87             
0141++ 1A87             ; STRCAT
0142++ 1A87             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1A87             ; source in SI
0144++ 1A87             ; destination in DI
0145++ 1A87             _strcat:
0146++ 1A87 E2          	push si
0147++ 1A88 E3          	push di
0148++ 1A89 D7          	push a
0149++ 1A8A DA          	push d
0150++ 1A8B 50          	mov a, di
0151++ 1A8C 3C          	mov d, a
0152++ 1A8D             _strcat_goto_end_L1:
0153++ 1A8D BD 00       	cmp byte[d], 0
0154++ 1A8F C6 96 1A    	je _strcat_start
0155++ 1A92 79          	inc d
0156++ 1A93 0A 8D 1A    	jmp _strcat_goto_end_L1
0157++ 1A96             _strcat_start:
0158++ 1A96 FD 50       	mov di, d
0159++ 1A98             _strcat_L1:
0160++ 1A98 F6          	lodsb
0161++ 1A99 F7          	stosb
0162++ 1A9A B9 00       	cmp al, 0
0163++ 1A9C C7 98 1A    	jne _strcat_L1
0164++ 1A9F             _strcat_end:
0165++ 1A9F E7          	pop d
0166++ 1AA0 E4          	pop a
0167++ 1AA1 F0          	pop di
0168++ 1AA2 EF          	pop si
0169++ 1AA3 09          	ret
0170++ 1AA4             
0171++ 1AA4             
0005+  1AA4             
0006+  1AA4             ;-----------------------------------------------------------------------------
0007+  1AA4             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1AA4             ; ASCII in BL
0009+  1AA4             ; result in AL
0010+  1AA4             ; ascii for F = 0100 0110
0011+  1AA4             ; ascii for 9 = 0011 1001
0012+  1AA4             ;-----------------------------------------------------------------------------
0013+  1AA4             hex_ascii_encode:
0014+  1AA4 1B            mov al, bl
0015+  1AA5 93 40         test al, $40        ; test if letter or number
0016+  1AA7 C7 AD 1A      jnz hex_letter
0017+  1AAA 87 0F         and al, $0F        ; get number
0018+  1AAC 09            ret
0019+  1AAD             hex_letter:
0020+  1AAD 87 0F         and al, $0F        ; get letter
0021+  1AAF 6A 09         add al, 9
0022+  1AB1 09            ret
0023+  1AB2             
0024+  1AB2             ;-----------------------------------------------------------------------------
0025+  1AB2             ; ATOI
0026+  1AB2             ; 2 letter hex string in B
0027+  1AB2             ; 8bit integer returned in AL
0028+  1AB2             ;-----------------------------------------------------------------------------
0029+  1AB2             _atoi:
0030+  1AB2 D8            push b
0031+  1AB3 07 A4 1A      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1AB6 30            mov bl, bh
0033+  1AB7 DB            push al          ; save a
0034+  1AB8 07 A4 1A      call hex_ascii_encode
0035+  1ABB EA            pop bl  
0036+  1ABC FD 9E 04      shl al, 4
0037+  1ABF 8C            or al, bl
0038+  1AC0 E5            pop b
0039+  1AC1 09            ret  
0040+  1AC2             
0041+  1AC2             ;-----------------------------------------------------------------------------
0042+  1AC2             ; scanf
0043+  1AC2             ; no need for explanations!
0044+  1AC2             ;-----------------------------------------------------------------------------
0045+  1AC2             scanf:
0046+  1AC2 09            ret
0047+  1AC3             
0048+  1AC3             ;-----------------------------------------------------------------------------
0049+  1AC3             ; ITOA
0050+  1AC3             ; 8bit value in BL
0051+  1AC3             ; 2 byte ASCII result in A
0052+  1AC3             ;-----------------------------------------------------------------------------
0053+  1AC3             _itoa:
0054+  1AC3 DA            push d
0055+  1AC4 D8            push b
0056+  1AC5 A7 00         mov bh, 0
0057+  1AC7 FD A4 04      shr bl, 4  
0058+  1ACA 74            mov d, b
0059+  1ACB 1F 73 1D      mov al, [d + s_hex_digits]
0060+  1ACE 23            mov ah, al
0061+  1ACF               
0062+  1ACF E5            pop b
0063+  1AD0 D8            push b
0064+  1AD1 A7 00         mov bh, 0
0065+  1AD3 FD 87 0F      and bl, $0F
0066+  1AD6 74            mov d, b
0067+  1AD7 1F 73 1D      mov al, [d + s_hex_digits]
0068+  1ADA E5            pop b
0069+  1ADB E7            pop d
0070+  1ADC 09            ret
0071+  1ADD             
0072+  1ADD             ;-----------------------------------------------------------------------------
0073+  1ADD             ; HEX STRING TO BINARY
0074+  1ADD             ; di = destination address
0075+  1ADD             ; si = source
0076+  1ADD             ;-----------------------------------------------------------------------------
0077+  1ADD             _hex_to_int:
0078+  1ADD             _hex_to_int_L1:
0079+  1ADD F6            lodsb          ; load from [SI] to AL
0080+  1ADE B9 00         cmp al, 0        ; check if ASCII 0
0081+  1AE0 C6 ED 1A      jz _hex_to_int_ret
0082+  1AE3 36            mov bh, al
0083+  1AE4 F6            lodsb
0084+  1AE5 2F            mov bl, al
0085+  1AE6 07 B2 1A      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  1AE9 F7            stosb          ; store AL to [DI]
0087+  1AEA 0A DD 1A      jmp _hex_to_int_L1
0088+  1AED             _hex_to_int_ret:
0089+  1AED 09            ret    
0090+  1AEE             
0091+  1AEE             ;-----------------------------------------------------------------------------
0092+  1AEE             ; GETCHAR
0093+  1AEE             ; char in ah
0094+  1AEE             ;-----------------------------------------------------------------------------
0095+  1AEE             getch:
0096+  1AEE DB            push al
0097+  1AEF             getch_retry:
0098+  1AEF 19 01         mov al, 1
0099+  1AF1 05 03         syscall sys_io      ; receive in AH
0100+  1AF3 E8            pop al
0101+  1AF4 09            ret
0102+  1AF5             
0103+  1AF5             ;-----------------------------------------------------------------------------
0104+  1AF5             ; PUTCHAR
0105+  1AF5             ; char in ah
0106+  1AF5             ;-----------------------------------------------------------------------------
0107+  1AF5             _putchar:
0108+  1AF5 D7            push a
0109+  1AF6 19 00         mov al, 0
0110+  1AF8 05 03         syscall sys_io      ; char in AH
0111+  1AFA E4            pop a
0112+  1AFB 09            ret
0113+  1AFC             
0114+  1AFC             ;-----------------------------------------------------------------------------
0115+  1AFC             ;; INPUT A STRING
0116+  1AFC             ;; terminates with null
0117+  1AFC             ;; pointer in D
0118+  1AFC             ;-----------------------------------------------------------------------------
0119+  1AFC             _gets:
0120+  1AFC D7            push a
0121+  1AFD DA            push d
0122+  1AFE             _gets_loop:
0123+  1AFE 19 01         mov al, 1
0124+  1B00 05 03         syscall sys_io      ; receive in AH
0125+  1B02 B9 00         cmp al, 0        ; check error code (AL)
0126+  1B04 C6 FE 1A      je _gets_loop      ; if no char received, retry
0127+  1B07             
0128+  1B07 76 1B         cmp ah, 27
0129+  1B09 C6 2A 1B      je _gets_ansi_esc
0130+  1B0C 76 0A         cmp ah, $0A        ; LF
0131+  1B0E C6 95 1B      je _gets_end
0132+  1B11 76 0D         cmp ah, $0D        ; CR
0133+  1B13 C6 95 1B      je _gets_end
0134+  1B16 76 5C         cmp ah, $5C        ; '\\'
0135+  1B18 C6 56 1B      je _gets_escape
0136+  1B1B               
0137+  1B1B 76 08         cmp ah, $08      ; check for backspace
0138+  1B1D C6 26 1B      je _gets_backspace
0139+  1B20             
0140+  1B20 1A            mov al, ah
0141+  1B21 3E            mov [d], al
0142+  1B22 79            inc d
0143+  1B23 0A FE 1A      jmp _gets_loop
0144+  1B26             _gets_backspace:
0145+  1B26 7F            dec d
0146+  1B27 0A FE 1A      jmp _gets_loop
0147+  1B2A             _gets_ansi_esc:
0148+  1B2A 19 01         mov al, 1
0149+  1B2C 05 03         syscall sys_io        ; receive in AH without echo
0150+  1B2E B9 00         cmp al, 0          ; check error code (AL)
0151+  1B30 C6 2A 1B      je _gets_ansi_esc    ; if no char received, retry
0152+  1B33 76 5B         cmp ah, '['
0153+  1B35 C7 FE 1A      jne _gets_loop
0154+  1B38             _gets_ansi_esc_2:
0155+  1B38 19 01         mov al, 1
0156+  1B3A 05 03         syscall sys_io          ; receive in AH without echo
0157+  1B3C B9 00         cmp al, 0            ; check error code (AL)
0158+  1B3E C6 38 1B      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1B41 76 44         cmp ah, 'D'
0160+  1B43 C6 4E 1B      je _gets_left_arrow
0161+  1B46 76 43         cmp ah, 'C'
0162+  1B48 C6 52 1B      je _gets_right_arrow
0163+  1B4B 0A FE 1A      jmp _gets_loop
0164+  1B4E             _gets_left_arrow:
0165+  1B4E 7F            dec d
0166+  1B4F 0A FE 1A      jmp _gets_loop
0167+  1B52             _gets_right_arrow:
0168+  1B52 79            inc d
0169+  1B53 0A FE 1A      jmp _gets_loop
0170+  1B56             _gets_escape:
0171+  1B56 19 01         mov al, 1
0172+  1B58 05 03         syscall sys_io      ; receive in AH
0173+  1B5A B9 00         cmp al, 0        ; check error code (AL)
0174+  1B5C C6 56 1B      je _gets_escape      ; if no char received, retry
0175+  1B5F 76 6E         cmp ah, 'n'
0176+  1B61 C6 80 1B      je _gets_LF
0177+  1B64 76 72         cmp ah, 'r'
0178+  1B66 C6 87 1B      je _gets_CR
0179+  1B69 76 30         cmp ah, '0'
0180+  1B6B C6 8E 1B      je _gets_NULL
0181+  1B6E 76 5C         cmp ah, $5C  ; '\'
0182+  1B70 C6 79 1B      je _gets_slash
0183+  1B73 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1B74 3E            mov [d], al
0185+  1B75 79            inc d
0186+  1B76 0A FE 1A      jmp _gets_loop
0187+  1B79             _gets_slash:
0188+  1B79 19 5C         mov al, $5C
0189+  1B7B 3E            mov [d], al
0190+  1B7C 79            inc d
0191+  1B7D 0A FE 1A      jmp _gets_loop
0192+  1B80             _gets_LF:
0193+  1B80 19 0A         mov al, $0A
0194+  1B82 3E            mov [d], al
0195+  1B83 79            inc d
0196+  1B84 0A FE 1A      jmp _gets_loop
0197+  1B87             _gets_CR:
0198+  1B87 19 0D         mov al, $0D
0199+  1B89 3E            mov [d], al
0200+  1B8A 79            inc d
0201+  1B8B 0A FE 1A      jmp _gets_loop
0202+  1B8E             _gets_NULL:
0203+  1B8E 19 00         mov al, $00
0204+  1B90 3E            mov [d], al
0205+  1B91 79            inc d
0206+  1B92 0A FE 1A      jmp _gets_loop
0207+  1B95             _gets_end:
0208+  1B95 19 00         mov al, 0
0209+  1B97 3E            mov [d], al        ; terminate string
0210+  1B98 E7            pop d
0211+  1B99 E4            pop a
0212+  1B9A 09            ret
0213+  1B9B             
0214+  1B9B             ;-----------------------------------------------------------------------------
0215+  1B9B             ;; INPUT TEXT
0216+  1B9B             ;; terminated with CTRL+D
0217+  1B9B             ;; pointer in D
0218+  1B9B             ;-----------------------------------------------------------------------------
0219+  1B9B             _gettxt:
0220+  1B9B D7            push a
0221+  1B9C DA            push d
0222+  1B9D             _gettxt_loop:
0223+  1B9D 19 01         mov al, 1
0224+  1B9F 05 03         syscall sys_io      ; receive in AH
0225+  1BA1 B9 00         cmp al, 0        ; check error code (AL)
0226+  1BA3 C6 9D 1B      je _gettxt_loop    ; if no char received, retry
0227+  1BA6 76 04         cmp ah, 4      ; EOT
0228+  1BA8 C6 E6 1B      je _gettxt_end
0229+  1BAB 76 08         cmp ah, $08      ; check for backspace
0230+  1BAD C6 E2 1B      je _gettxt_backspace
0231+  1BB0 76 5C         cmp ah, $5C        ; '\'
0232+  1BB2 C6 BB 1B      je _gettxt_escape
0233+  1BB5 1A            mov al, ah
0234+  1BB6 3E            mov [d], al
0235+  1BB7 79            inc d
0236+  1BB8 0A 9D 1B      jmp _gettxt_loop
0237+  1BBB             _gettxt_escape:
0238+  1BBB 19 01         mov al, 1
0239+  1BBD 05 03         syscall sys_io      ; receive in AH
0240+  1BBF B9 00         cmp al, 0        ; check error code (AL)
0241+  1BC1 C6 BB 1B      je _gettxt_escape    ; if no char received, retry
0242+  1BC4 76 6E         cmp ah, 'n'
0243+  1BC6 C6 D4 1B      je _gettxt_LF
0244+  1BC9 76 72         cmp ah, 'r'
0245+  1BCB C6 DB 1B      je _gettxt_CR
0246+  1BCE 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  1BCF 3E            mov [d], al
0248+  1BD0 79            inc d
0249+  1BD1 0A 9D 1B      jmp _gettxt_loop
0250+  1BD4             _gettxt_LF:
0251+  1BD4 19 0A         mov al, $0A
0252+  1BD6 3E            mov [d], al
0253+  1BD7 79            inc d
0254+  1BD8 0A 9D 1B      jmp _gettxt_loop
0255+  1BDB             _gettxt_CR:
0256+  1BDB 19 0D         mov al, $0D
0257+  1BDD 3E            mov [d], al
0258+  1BDE 79            inc d
0259+  1BDF 0A 9D 1B      jmp _gettxt_loop
0260+  1BE2             _gettxt_backspace:
0261+  1BE2 7F            dec d
0262+  1BE3 0A 9D 1B      jmp _gettxt_loop
0263+  1BE6             _gettxt_end:
0264+  1BE6 19 00         mov al, 0
0265+  1BE8 3E            mov [d], al        ; terminate string
0266+  1BE9 E7            pop d
0267+  1BEA E4            pop a
0268+  1BEB 09            ret
0269+  1BEC             
0270+  1BEC             ;-----------------------------------------------------------------------------
0271+  1BEC             ; PRINT NEW LINE
0272+  1BEC             ;-----------------------------------------------------------------------------
0273+  1BEC             printnl:
0274+  1BEC D7            push a
0275+  1BED 10 00 0A      mov a, $0A00
0276+  1BF0 05 03         syscall sys_io
0277+  1BF2 10 00 0D      mov a, $0D00
0278+  1BF5 05 03         syscall sys_io
0279+  1BF7 E4            pop a
0280+  1BF8 09            ret
0281+  1BF9             
0282+  1BF9             ;-----------------------------------------------------------------------------
0283+  1BF9             ; _strtoint
0284+  1BF9             ; 4 digit hex string number in d
0285+  1BF9             ; integer returned in A
0286+  1BF9             ;-----------------------------------------------------------------------------
0287+  1BF9             _strtointx:
0288+  1BF9 D8            push b
0289+  1BFA 32            mov bl, [d]
0290+  1BFB 37            mov bh, bl
0291+  1BFC 33 01 00      mov bl, [d + 1]
0292+  1BFF 07 B2 1A      call _atoi        ; convert to int in AL
0293+  1C02 23            mov ah, al        ; move to AH
0294+  1C03 33 02 00      mov bl, [d + 2]
0295+  1C06 37            mov bh, bl
0296+  1C07 33 03 00      mov bl, [d + 3]
0297+  1C0A 07 B2 1A      call _atoi        ; convert to int in AL
0298+  1C0D E5            pop b
0299+  1C0E 09            ret
0300+  1C0F             
0301+  1C0F             ;-----------------------------------------------------------------------------
0302+  1C0F             ; _strtoint
0303+  1C0F             ; 5 digit base10 string number in d
0304+  1C0F             ; integer returned in A
0305+  1C0F             ;-----------------------------------------------------------------------------
0306+  1C0F             _strtoint:
0307+  1C0F E2            push si
0308+  1C10 D8            push b
0309+  1C11 D9            push c
0310+  1C12 DA            push d
0311+  1C13 07 54 1A      call _strlen      ; get string length in C
0312+  1C16 7E            dec c
0313+  1C17 FD 4E         mov si, d
0314+  1C19 12            mov a, c
0315+  1C1A FD 99         shl a
0316+  1C1C 3B 8B 1D      mov d, table_power
0317+  1C1F 59            add d, a
0318+  1C20 38 00 00      mov c, 0
0319+  1C23             _strtoint_L0:
0320+  1C23 F6            lodsb      ; load ASCII to al
0321+  1C24 B9 00         cmp al, 0
0322+  1C26 C6 39 1C      je _strtoint_end
0323+  1C29 6F 30         sub al, $30    ; make into integer
0324+  1C2B 22 00         mov ah, 0
0325+  1C2D 2A            mov b, [d]
0326+  1C2E AC            mul a, b      ; result in B since it fits in 16bits
0327+  1C2F 11            mov a, b
0328+  1C30 28            mov b, c
0329+  1C31 54            add a, b
0330+  1C32 39            mov c, a
0331+  1C33 63 02 00      sub d, 2
0332+  1C36 0A 23 1C      jmp _strtoint_L0
0333+  1C39             _strtoint_end:
0334+  1C39 12            mov a, c
0335+  1C3A E7            pop d
0336+  1C3B E6            pop c
0337+  1C3C E5            pop b
0338+  1C3D EF            pop si
0339+  1C3E 09            ret
0340+  1C3F             
0341+  1C3F             ;-----------------------------------------------------------------------------
0342+  1C3F             ; PRINT NULL TERMINATED STRING
0343+  1C3F             ; pointer in D
0344+  1C3F             ;-----------------------------------------------------------------------------
0345+  1C3F             _puts:
0346+  1C3F D7            push a
0347+  1C40 DA            push d
0348+  1C41             _puts_L1:
0349+  1C41 1E            mov al, [d]
0350+  1C42 B9 00         cmp al, 0
0351+  1C44 C6 50 1C      jz _puts_END
0352+  1C47 23            mov ah, al
0353+  1C48 19 00         mov al, 0
0354+  1C4A 05 03         syscall sys_io
0355+  1C4C 79            inc d
0356+  1C4D 0A 41 1C      jmp _puts_L1
0357+  1C50             _puts_END:
0358+  1C50 E7            pop d
0359+  1C51 E4            pop a
0360+  1C52 09            ret
0361+  1C53             
0362+  1C53             ;-----------------------------------------------------------------------------
0363+  1C53             ; PRINT N SIZE STRING
0364+  1C53             ; pointer in D
0365+  1C53             ; size in C
0366+  1C53             ;-----------------------------------------------------------------------------
0367+  1C53             _putsn:
0368+  1C53 DB            push al
0369+  1C54 DA            push d
0370+  1C55 D9            push c
0371+  1C56             _putsn_L0:
0372+  1C56 1E            mov al, [d]
0373+  1C57 23            mov ah, al
0374+  1C58 19 00         mov al, 0
0375+  1C5A 05 03         syscall sys_io
0376+  1C5C 79            inc d
0377+  1C5D 7E            dec c  
0378+  1C5E C2 00 00      cmp c, 0
0379+  1C61 C7 56 1C      jne _putsn_L0
0380+  1C64             _putsn_end:
0381+  1C64 E6            pop c
0382+  1C65 E7            pop d
0383+  1C66 E8            pop al
0384+  1C67 09            ret
0385+  1C68             
0386+  1C68             ;-----------------------------------------------------------------------------
0387+  1C68             ; print 16bit decimal number
0388+  1C68             ; input number in A
0389+  1C68             ;-----------------------------------------------------------------------------
0390+  1C68             print_u16d:
0391+  1C68 D7            push a
0392+  1C69 D8            push b
0393+  1C6A 26 10 27      mov b, 10000
0394+  1C6D AE            div a, b      ; get 10000's coeff.
0395+  1C6E 07 90 1C      call print_number
0396+  1C71 11            mov a, b
0397+  1C72 26 E8 03      mov b, 1000
0398+  1C75 AE            div a, b      ; get 1000's coeff.
0399+  1C76 07 90 1C      call print_number
0400+  1C79 11            mov a, b
0401+  1C7A 26 64 00      mov b, 100
0402+  1C7D AE            div a, b
0403+  1C7E 07 90 1C      call print_number
0404+  1C81 11            mov a, b
0405+  1C82 26 0A 00      mov b, 10
0406+  1C85 AE            div a, b
0407+  1C86 07 90 1C      call print_number
0408+  1C89 1B            mov al, bl      ; 1's coeff in bl
0409+  1C8A 07 90 1C      call print_number
0410+  1C8D E5            pop b
0411+  1C8E E4            pop a
0412+  1C8F 09            ret
0413+  1C90             
0414+  1C90             ;-----------------------------------------------------------------------------
0415+  1C90             ; print AL
0416+  1C90             ;-----------------------------------------------------------------------------
0417+  1C90             print_number:
0418+  1C90 6A 30         add al, $30
0419+  1C92 23            mov ah, al
0420+  1C93 07 F5 1A      call _putchar
0421+  1C96 09            ret
0422+  1C97             
0423+  1C97             ;-----------------------------------------------------------------------------
0424+  1C97             ; PRINT 16BIT HEX INTEGER
0425+  1C97             ; integer value in reg B
0426+  1C97             ;-----------------------------------------------------------------------------
0427+  1C97             print_u16x:
0428+  1C97 D7            push a
0429+  1C98 D8            push b
0430+  1C99 DD            push bl
0431+  1C9A 30            mov bl, bh
0432+  1C9B 07 C3 1A      call _itoa        ; convert bh to char in A
0433+  1C9E 2F            mov bl, al        ; save al
0434+  1C9F 19 00         mov al, 0
0435+  1CA1 05 03         syscall sys_io        ; display AH
0436+  1CA3 24            mov ah, bl        ; retrieve al
0437+  1CA4 19 00         mov al, 0
0438+  1CA6 05 03         syscall sys_io        ; display AL
0439+  1CA8             
0440+  1CA8 EA            pop bl
0441+  1CA9 07 C3 1A      call _itoa        ; convert bh to char in A
0442+  1CAC 2F            mov bl, al        ; save al
0443+  1CAD 19 00         mov al, 0
0444+  1CAF 05 03         syscall sys_io        ; display AH
0445+  1CB1 24            mov ah, bl        ; retrieve al
0446+  1CB2 19 00         mov al, 0
0447+  1CB4 05 03         syscall sys_io        ; display AL
0448+  1CB6             
0449+  1CB6 E5            pop b
0450+  1CB7 E4            pop a
0451+  1CB8 09            ret
0452+  1CB9             
0453+  1CB9             ;-----------------------------------------------------------------------------
0454+  1CB9             ; INPUT 16BIT HEX INTEGER
0455+  1CB9             ; read 16bit integer into A
0456+  1CB9             ;-----------------------------------------------------------------------------
0457+  1CB9             scan_u16x:
0458+  1CB9 F8 10 00      enter 16
0459+  1CBC D8            push b
0460+  1CBD DA            push d
0461+  1CBE             
0462+  1CBE FA F1 FF      lea d, [bp + -15]
0463+  1CC1 07 FC 1A      call _gets        ; get number
0464+  1CC4             
0465+  1CC4 32            mov bl, [d]
0466+  1CC5 37            mov bh, bl
0467+  1CC6 33 01 00      mov bl, [d + 1]
0468+  1CC9 07 B2 1A      call _atoi        ; convert to int in AL
0469+  1CCC 23            mov ah, al        ; move to AH
0470+  1CCD             
0471+  1CCD 33 02 00      mov bl, [d + 2]
0472+  1CD0 37            mov bh, bl
0473+  1CD1 33 03 00      mov bl, [d + 3]
0474+  1CD4 07 B2 1A      call _atoi        ; convert to int in AL
0475+  1CD7             
0476+  1CD7 E7            pop d
0477+  1CD8 E5            pop b
0478+  1CD9 F9            leave
0479+  1CDA 09            ret
0480+  1CDB             
0481+  1CDB             ;-----------------------------------------------------------------------------
0482+  1CDB             ; PRINT 8bit HEX INTEGER
0483+  1CDB             ; integer value in reg bl
0484+  1CDB             ;-----------------------------------------------------------------------------
0485+  1CDB             print_u8x:
0486+  1CDB D7            push a
0487+  1CDC DD            push bl
0488+  1CDD             
0489+  1CDD 07 C3 1A      call _itoa        ; convert bl to char in A
0490+  1CE0 2F            mov bl, al        ; save al
0491+  1CE1 19 00         mov al, 0
0492+  1CE3 05 03         syscall sys_io        ; display AH
0493+  1CE5 24            mov ah, bl        ; retrieve al
0494+  1CE6 19 00         mov al, 0
0495+  1CE8 05 03         syscall sys_io        ; display AL
0496+  1CEA             
0497+  1CEA EA            pop bl
0498+  1CEB E4            pop a
0499+  1CEC 09            ret
0500+  1CED             
0501+  1CED             ;-----------------------------------------------------------------------------
0502+  1CED             ; print 8bit decimal unsigned number
0503+  1CED             ; input number in AL
0504+  1CED             ;-----------------------------------------------------------------------------
0505+  1CED             print_u8d:
0506+  1CED D7            push a
0507+  1CEE D8            push b
0508+  1CEF             
0509+  1CEF 22 00         mov ah, 0
0510+  1CF1 26 64 00      mov b, 100
0511+  1CF4 AE            div a, b
0512+  1CF5 D8            push b      ; save remainder
0513+  1CF6 B9 00         cmp al, 0
0514+  1CF8 C6 02 1D      je skip100
0515+  1CFB 6A 30         add al, $30
0516+  1CFD 23            mov ah, al
0517+  1CFE 19 00         mov al, 0
0518+  1D00 05 03         syscall sys_io  ; print coeff
0519+  1D02             skip100:
0520+  1D02 E4            pop a
0521+  1D03 22 00         mov ah, 0
0522+  1D05 26 0A 00      mov b, 10
0523+  1D08 AE            div a, b
0524+  1D09 D8            push b      ; save remainder
0525+  1D0A B9 00         cmp al, 0
0526+  1D0C C6 16 1D      je skip10
0527+  1D0F 6A 30         add al, $30
0528+  1D11 23            mov ah, al
0529+  1D12 19 00         mov al, 0
0530+  1D14 05 03         syscall sys_io  ; print coeff
0531+  1D16             skip10:
0532+  1D16 E4            pop a
0533+  1D17 1B            mov al, bl
0534+  1D18 6A 30         add al, $30
0535+  1D1A 23            mov ah, al
0536+  1D1B 19 00         mov al, 0
0537+  1D1D 05 03         syscall sys_io  ; print coeff
0538+  1D1F E5            pop b
0539+  1D20 E4            pop a
0540+  1D21 09            ret
0541+  1D22             
0542+  1D22             ;-----------------------------------------------------------------------------
0543+  1D22             ; INPUT 8BIT HEX INTEGER
0544+  1D22             ; read 8bit integer into AL
0545+  1D22             ;-----------------------------------------------------------------------------
0546+  1D22             scan_u8x:
0547+  1D22 F8 04 00      enter 4
0548+  1D25 D8            push b
0549+  1D26 DA            push d
0550+  1D27             
0551+  1D27 FA FD FF      lea d, [bp + -3]
0552+  1D2A 07 FC 1A      call _gets        ; get number
0553+  1D2D             
0554+  1D2D 32            mov bl, [d]
0555+  1D2E 37            mov bh, bl
0556+  1D2F 33 01 00      mov bl, [d + 1]
0557+  1D32 07 B2 1A      call _atoi        ; convert to int in AL
0558+  1D35             
0559+  1D35 E7            pop d
0560+  1D36 E5            pop b
0561+  1D37 F9            leave
0562+  1D38 09            ret
0563+  1D39             
0564+  1D39             ;-----------------------------------------------------------------------------
0565+  1D39             ; input decimal number
0566+  1D39             ; result in A
0567+  1D39             ; 655'\0'
0568+  1D39             ; low--------high
0569+  1D39             ;-----------------------------------------------------------------------------
0570+  1D39             scan_u16d:
0571+  1D39 F8 08 00      enter 8
0572+  1D3C E2            push si
0573+  1D3D D8            push b
0574+  1D3E D9            push c
0575+  1D3F DA            push d
0576+  1D40 FA F9 FF      lea d, [bp +- 7]
0577+  1D43 07 FC 1A      call _gets
0578+  1D46 07 54 1A      call _strlen      ; get string length in C
0579+  1D49 7E            dec c
0580+  1D4A FD 4E         mov si, d
0581+  1D4C 12            mov a, c
0582+  1D4D FD 99         shl a
0583+  1D4F 3B 8B 1D      mov d, table_power
0584+  1D52 59            add d, a
0585+  1D53 38 00 00      mov c, 0
0586+  1D56             mul_loop:
0587+  1D56 F6            lodsb      ; load ASCII to al
0588+  1D57 B9 00         cmp al, 0
0589+  1D59 C6 6C 1D      je mul_exit
0590+  1D5C 6F 30         sub al, $30    ; make into integer
0591+  1D5E 22 00         mov ah, 0
0592+  1D60 2A            mov b, [d]
0593+  1D61 AC            mul a, b      ; result in B since it fits in 16bits
0594+  1D62 11            mov a, b
0595+  1D63 28            mov b, c
0596+  1D64 54            add a, b
0597+  1D65 39            mov c, a
0598+  1D66 63 02 00      sub d, 2
0599+  1D69 0A 56 1D      jmp mul_loop
0600+  1D6C             mul_exit:
0601+  1D6C 12            mov a, c
0602+  1D6D E7            pop d
0603+  1D6E E6            pop c
0604+  1D6F E5            pop b
0605+  1D70 EF            pop si
0606+  1D71 F9            leave
0607+  1D72 09            ret
0608+  1D73             
0609+  1D73 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1D77 34 35 36 37 
0609+  1D7B 38 39 41 42 
0609+  1D7F 43 44 45 46 
0610+  1D83 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1D87 1B 5B 48 00 
0611+  1D8B             
0612+  1D8B             table_power:
0613+  1D8B 01 00         .dw 1
0614+  1D8D 0A 00         .dw 10
0615+  1D8F 64 00         .dw 100
0616+  1D91 E8 03         .dw 1000
0617+  1D93 10 27         .dw 100004119   1D95             ; --- END INLINE ASM BLOCK
4120   1D95             
4121   1D95 F9            leave
4122   1D96 09            ret
4123   1D97             ; --- END TEXT BLOCK
4124   1D97             
4125   1D97             ; --- BEGIN DATA BLOCK
4126   1D97 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4126   1D9B 45 46 47 48 
4126   1D9F 49 4A 4B 4C 
4126   1DA3 4D 4E 4F 50 
4126   1DA7 51 52 53 54 
4126   1DAB 55 56 57 58 
4126   1DAF 59 5A 61 62 
4126   1DB3 63 64 65 66 
4126   1DB7 67 68 69 6A 
4126   1DBB 6B 6C 6D 6E 
4126   1DBF 6F 70 71 72 
4126   1DC3 73 74 75 76 
4126   1DC7 77 78 79 7A 
4126   1DCB 30 31 32 33 
4126   1DCF 34 35 36 37 
4126   1DD3 38 39 2B 2F 
4126   1DD7 00 
4127   1DD8 97 1D       _base64_table: .dw _base64_table_data
4128   1DDA 00 00 00 00 _currState_data: .fill 2500, 0
4128   1DDE 00 00 00 00 
4128   1DE2 00 00 00 00 
4128   1DE6 00 00 00 00 
4128   1DEA 00 00 00 00 
4128   1DEE 00 00 00 00 
4128   1DF2 00 00 00 00 
4128   1DF6 00 00 00 00 
4128   1DFA 00 00 00 00 
4128   1DFE 00 00 00 00 
4128   1E02 00 00 00 00 
4128   1E06 00 00 00 00 
4128   1E0A 00 00 00 00 
4128   1E0E 00 00 00 00 
4128   1E12 00 00 00 00 
4128   1E16 00 00 00 00 
4128   1E1A 00 00 00 00 
4128   1E1E 00 00 00 00 
4128   1E22 00 00 00 00 
4128   1E26 00 00 00 00 
4128   1E2A 00 00 00 00 
4128   1E2E 00 00 00 00 
4128   1E32 00 00 00 00 
4128   1E36 00 00 00 00 
4128   1E3A 00 00 00 00 
4128   1E3E 00 00 00 00 
4128   1E42 00 00 00 00 
4128   1E46 00 00 00 00 
4128   1E4A 00 00 00 00 
4128   1E4E 00 00 00 00 
4128   1E52 00 00 00 00 
4128   1E56 00 00 00 00 
4128   1E5A 00 00 00 00 
4128   1E5E 00 00 00 00 
4128   1E62 00 00 00 00 
4128   1E66 00 00 00 00 
4128   1E6A 00 00 00 00 
4128   1E6E 00 00 00 00 
4128   1E72 00 00 00 00 
4128   1E76 00 00 00 00 
4128   1E7A 00 00 00 00 
4128   1E7E 00 00 00 00 
4128   1E82 00 00 00 00 
4128   1E86 00 00 00 00 
4128   1E8A 00 00 00 00 
4128   1E8E 00 00 00 00 
4128   1E92 00 00 00 00 
4128   1E96 00 00 00 00 
4128   1E9A 00 00 00 00 
4128   1E9E 00 00 00 00 
4128   1EA2 00 00 00 00 
4128   1EA6 00 00 00 00 
4128   1EAA 00 00 00 00 
4128   1EAE 00 00 00 00 
4128   1EB2 00 00 00 00 
4128   1EB6 00 00 00 00 
4128   1EBA 00 00 00 00 
4128   1EBE 00 00 00 00 
4128   1EC2 00 00 00 00 
4128   1EC6 00 00 00 00 
4128   1ECA 00 00 00 00 
4128   1ECE 00 00 00 00 
4128   1ED2 00 00 00 00 
4128   1ED6 00 00 00 00 
4128   1EDA 00 00 00 00 
4128   1EDE 00 00 00 00 
4128   1EE2 00 00 00 00 
4128   1EE6 00 00 00 00 
4128   1EEA 00 00 00 00 
4128   1EEE 00 00 00 00 
4128   1EF2 00 00 00 00 
4128   1EF6 00 00 00 00 
4128   1EFA 00 00 00 00 
4128   1EFE 00 00 00 00 
4128   1F02 00 00 00 00 
4128   1F06 00 00 00 00 
4128   1F0A 00 00 00 00 
4128   1F0E 00 00 00 00 
4128   1F12 00 00 00 00 
4128   1F16 00 00 00 00 
4128   1F1A 00 00 00 00 
4128   1F1E 00 00 00 00 
4128   1F22 00 00 00 00 
4128   1F26 00 00 00 00 
4128   1F2A 00 00 00 00 
4128   1F2E 00 00 00 00 
4128   1F32 00 00 00 00 
4128   1F36 00 00 00 00 
4128   1F3A 00 00 00 00 
4128   1F3E 00 00 00 00 
4128   1F42 00 00 00 00 
4128   1F46 00 00 00 00 
4128   1F4A 00 00 00 00 
4128   1F4E 00 00 00 00 
4128   1F52 00 00 00 00 
4128   1F56 00 00 00 00 
4128   1F5A 00 00 00 00 
4128   1F5E 00 00 00 00 
4128   1F62 00 00 00 00 
4128   1F66 00 00 00 00 
4128   1F6A 00 00 00 00 
4128   1F6E 00 00 00 00 
4128   1F72 00 00 00 00 
4128   1F76 00 00 00 00 
4128   1F7A 00 00 00 00 
4128   1F7E 00 00 00 00 
4128   1F82 00 00 00 00 
4128   1F86 00 00 00 00 
4128   1F8A 00 00 00 00 
4128   1F8E 00 00 00 00 
4128   1F92 00 00 00 00 
4128   1F96 00 00 00 00 
4128   1F9A 00 00 00 00 
4128   1F9E 00 00 00 00 
4128   1FA2 00 00 00 00 
4128   1FA6 00 00 00 00 
4128   1FAA 00 00 00 00 
4128   1FAE 00 00 00 00 
4128   1FB2 00 00 00 00 
4128   1FB6 00 00 00 00 
4128   1FBA 00 00 00 00 
4128   1FBE 00 00 00 00 
4128   1FC2 00 00 00 00 
4128   1FC6 00 00 00 00 
4128   1FCA 00 00 00 00 
4128   1FCE 00 00 00 00 
4128   1FD2 00 00 00 00 
4128   1FD6 00 00 00 00 
4128   1FDA 00 00 00 00 
4128   1FDE 00 00 00 00 
4128   1FE2 00 00 00 00 
4128   1FE6 00 00 00 00 
4128   1FEA 00 00 00 00 
4128   1FEE 00 00 00 00 
4128   1FF2 00 00 00 00 
4128   1FF6 00 00 00 00 
4128   1FFA 00 00 00 00 
4128   1FFE 00 00 00 00 
4128   2002 00 00 00 00 
4128   2006 00 00 00 00 
4128   200A 00 00 00 00 
4128   200E 00 00 00 00 
4128   2012 00 00 00 00 
4128   2016 00 00 00 00 
4128   201A 00 00 00 00 
4128   201E 00 00 00 00 
4128   2022 00 00 00 00 
4128   2026 00 00 00 00 
4128   202A 00 00 00 00 
4128   202E 00 00 00 00 
4128   2032 00 00 00 00 
4128   2036 00 00 00 00 
4128   203A 00 00 00 00 
4128   203E 00 00 00 00 
4128   2042 00 00 00 00 
4128   2046 00 00 00 00 
4128   204A 00 00 00 00 
4128   204E 00 00 00 00 
4128   2052 00 00 00 00 
4128   2056 00 00 00 00 
4128   205A 00 00 00 00 
4128   205E 00 00 00 00 
4128   2062 00 00 00 00 
4128   2066 00 00 00 00 
4128   206A 00 00 00 00 
4128   206E 00 00 00 00 
4128   2072 00 00 00 00 
4128   2076 00 00 00 00 
4128   207A 00 00 00 00 
4128   207E 00 00 00 00 
4128   2082 00 00 00 00 
4128   2086 00 00 00 00 
4128   208A 00 00 00 00 
4128   208E 00 00 00 00 
4128   2092 00 00 00 00 
4128   2096 00 00 00 00 
4128   209A 00 00 00 00 
4128   209E 00 00 00 00 
4128   20A2 00 00 00 00 
4128   20A6 00 00 00 00 
4128   20AA 00 00 00 00 
4128   20AE 00 00 00 00 
4128   20B2 00 00 00 00 
4128   20B6 00 00 00 00 
4128   20BA 00 00 00 00 
4128   20BE 00 00 00 00 
4128   20C2 00 00 00 00 
4128   20C6 00 00 00 00 
4128   20CA 00 00 00 00 
4128   20CE 00 00 00 00 
4128   20D2 00 00 00 00 
4128   20D6 00 00 00 00 
4128   20DA 00 00 00 00 
4128   20DE 00 00 00 00 
4128   20E2 00 00 00 00 
4128   20E6 00 00 00 00 
4128   20EA 00 00 00 00 
4128   20EE 00 00 00 00 
4128   20F2 00 00 00 00 
4128   20F6 00 00 00 00 
4128   20FA 00 00 00 00 
4128   20FE 00 00 00 00 
4128   2102 00 00 00 00 
4128   2106 00 00 00 00 
4128   210A 00 00 00 00 
4128   210E 00 00 00 00 
4128   2112 00 00 00 00 
4128   2116 00 00 00 00 
4128   211A 00 00 00 00 
4128   211E 00 00 00 00 
4128   2122 00 00 00 00 
4128   2126 00 00 00 00 
4128   212A 00 00 00 00 
4128   212E 00 00 00 00 
4128   2132 00 00 00 00 
4128   2136 00 00 00 00 
4128   213A 00 00 00 00 
4128   213E 00 00 00 00 
4128   2142 00 00 00 00 
4128   2146 00 00 00 00 
4128   214A 00 00 00 00 
4128   214E 00 00 00 00 
4128   2152 00 00 00 00 
4128   2156 00 00 00 00 
4128   215A 00 00 00 00 
4128   215E 00 00 00 00 
4128   2162 00 00 00 00 
4128   2166 00 00 00 00 
4128   216A 00 00 00 00 
4128   216E 00 00 00 00 
4128   2172 00 00 00 00 
4128   2176 00 00 00 00 
4128   217A 00 00 00 00 
4128   217E 00 00 00 00 
4128   2182 00 00 00 00 
4128   2186 00 00 00 00 
4128   218A 00 00 00 00 
4128   218E 00 00 00 00 
4128   2192 00 00 00 00 
4128   2196 00 00 00 00 
4128   219A 00 00 00 00 
4128   219E 00 00 00 00 
4128   21A2 00 00 00 00 
4128   21A6 00 00 00 00 
4128   21AA 00 00 00 00 
4128   21AE 00 00 00 00 
4128   21B2 00 00 00 00 
4128   21B6 00 00 00 00 
4128   21BA 00 00 00 00 
4128   21BE 00 00 00 00 
4128   21C2 00 00 00 00 
4128   21C6 00 00 00 00 
4128   21CA 00 00 00 00 
4128   21CE 00 00 00 00 
4128   21D2 00 00 00 00 
4128   21D6 00 00 00 00 
4128   21DA 00 00 00 00 
4128   21DE 00 00 00 00 
4128   21E2 00 00 00 00 
4128   21E6 00 00 00 00 
4128   21EA 00 00 00 00 
4128   21EE 00 00 00 00 
4128   21F2 00 00 00 00 
4128   21F6 00 00 00 00 
4128   21FA 00 00 00 00 
4128   21FE 00 00 00 00 
4128   2202 00 00 00 00 
4128   2206 00 00 00 00 
4128   220A 00 00 00 00 
4128   220E 00 00 00 00 
4128   2212 00 00 00 00 
4128   2216 00 00 00 00 
4128   221A 00 00 00 00 
4128   221E 00 00 00 00 
4128   2222 00 00 00 00 
4128   2226 00 00 00 00 
4128   222A 00 00 00 00 
4128   222E 00 00 00 00 
4128   2232 00 00 00 00 
4128   2236 00 00 00 00 
4128   223A 00 00 00 00 
4128   223E 00 00 00 00 
4128   2242 00 00 00 00 
4128   2246 00 00 00 00 
4128   224A 00 00 00 00 
4128   224E 00 00 00 00 
4128   2252 00 00 00 00 
4128   2256 00 00 00 00 
4128   225A 00 00 00 00 
4128   225E 00 00 00 00 
4128   2262 00 00 00 00 
4128   2266 00 00 00 00 
4128   226A 00 00 00 00 
4128   226E 00 00 00 00 
4128   2272 00 00 00 00 
4128   2276 00 00 00 00 
4128   227A 00 00 00 00 
4128   227E 00 00 00 00 
4128   2282 00 00 00 00 
4128   2286 00 00 00 00 
4128   228A 00 00 00 00 
4128   228E 00 00 00 00 
4128   2292 00 00 00 00 
4128   2296 00 00 00 00 
4128   229A 00 00 00 00 
4128   229E 00 00 00 00 
4128   22A2 00 00 00 00 
4128   22A6 00 00 00 00 
4128   22AA 00 00 00 00 
4128   22AE 00 00 00 00 
4128   22B2 00 00 00 00 
4128   22B6 00 00 00 00 
4128   22BA 00 00 00 00 
4128   22BE 00 00 00 00 
4128   22C2 00 00 00 00 
4128   22C6 00 00 00 00 
4128   22CA 00 00 00 00 
4128   22CE 00 00 00 00 
4128   22D2 00 00 00 00 
4128   22D6 00 00 00 00 
4128   22DA 00 00 00 00 
4128   22DE 00 00 00 00 
4128   22E2 00 00 00 00 
4128   22E6 00 00 00 00 
4128   22EA 00 00 00 00 
4128   22EE 00 00 00 00 
4128   22F2 00 00 00 00 
4128   22F6 00 00 00 00 
4128   22FA 00 00 00 00 
4128   22FE 00 00 00 00 
4128   2302 00 00 00 00 
4128   2306 00 00 00 00 
4128   230A 00 00 00 00 
4128   230E 00 00 00 00 
4128   2312 00 00 00 00 
4128   2316 00 00 00 00 
4128   231A 00 00 00 00 
4128   231E 00 00 00 00 
4128   2322 00 00 00 00 
4128   2326 00 00 00 00 
4128   232A 00 00 00 00 
4128   232E 00 00 00 00 
4128   2332 00 00 00 00 
4128   2336 00 00 00 00 
4128   233A 00 00 00 00 
4128   233E 00 00 00 00 
4128   2342 00 00 00 00 
4128   2346 00 00 00 00 
4128   234A 00 00 00 00 
4128   234E 00 00 00 00 
4128   2352 00 00 00 00 
4128   2356 00 00 00 00 
4128   235A 00 00 00 00 
4128   235E 00 00 00 00 
4128   2362 00 00 00 00 
4128   2366 00 00 00 00 
4128   236A 00 00 00 00 
4128   236E 00 00 00 00 
4128   2372 00 00 00 00 
4128   2376 00 00 00 00 
4128   237A 00 00 00 00 
4128   237E 00 00 00 00 
4128   2382 00 00 00 00 
4128   2386 00 00 00 00 
4128   238A 00 00 00 00 
4128   238E 00 00 00 00 
4128   2392 00 00 00 00 
4128   2396 00 00 00 00 
4128   239A 00 00 00 00 
4128   239E 00 00 00 00 
4128   23A2 00 00 00 00 
4128   23A6 00 00 00 00 
4128   23AA 00 00 00 00 
4128   23AE 00 00 00 00 
4128   23B2 00 00 00 00 
4128   23B6 00 00 00 00 
4128   23BA 00 00 00 00 
4128   23BE 00 00 00 00 
4128   23C2 00 00 00 00 
4128   23C6 00 00 00 00 
4128   23CA 00 00 00 00 
4128   23CE 00 00 00 00 
4128   23D2 00 00 00 00 
4128   23D6 00 00 00 00 
4128   23DA 00 00 00 00 
4128   23DE 00 00 00 00 
4128   23E2 00 00 00 00 
4128   23E6 00 00 00 00 
4128   23EA 00 00 00 00 
4128   23EE 00 00 00 00 
4128   23F2 00 00 00 00 
4128   23F6 00 00 00 00 
4128   23FA 00 00 00 00 
4128   23FE 00 00 00 00 
4128   2402 00 00 00 00 
4128   2406 00 00 00 00 
4128   240A 00 00 00 00 
4128   240E 00 00 00 00 
4128   2412 00 00 00 00 
4128   2416 00 00 00 00 
4128   241A 00 00 00 00 
4128   241E 00 00 00 00 
4128   2422 00 00 00 00 
4128   2426 00 00 00 00 
4128   242A 00 00 00 00 
4128   242E 00 00 00 00 
4128   2432 00 00 00 00 
4128   2436 00 00 00 00 
4128   243A 00 00 00 00 
4128   243E 00 00 00 00 
4128   2442 00 00 00 00 
4128   2446 00 00 00 00 
4128   244A 00 00 00 00 
4128   244E 00 00 00 00 
4128   2452 00 00 00 00 
4128   2456 00 00 00 00 
4128   245A 00 00 00 00 
4128   245E 00 00 00 00 
4128   2462 00 00 00 00 
4128   2466 00 00 00 00 
4128   246A 00 00 00 00 
4128   246E 00 00 00 00 
4128   2472 00 00 00 00 
4128   2476 00 00 00 00 
4128   247A 00 00 00 00 
4128   247E 00 00 00 00 
4128   2482 00 00 00 00 
4128   2486 00 00 00 00 
4128   248A 00 00 00 00 
4128   248E 00 00 00 00 
4128   2492 00 00 00 00 
4128   2496 00 00 00 00 
4128   249A 00 00 00 00 
4128   249E 00 00 00 00 
4128   24A2 00 00 00 00 
4128   24A6 00 00 00 00 
4128   24AA 00 00 00 00 
4128   24AE 00 00 00 00 
4128   24B2 00 00 00 00 
4128   24B6 00 00 00 00 
4128   24BA 00 00 00 00 
4128   24BE 00 00 00 00 
4128   24C2 00 00 00 00 
4128   24C6 00 00 00 00 
4128   24CA 00 00 00 00 
4128   24CE 00 00 00 00 
4128   24D2 00 00 00 00 
4128   24D6 00 00 00 00 
4128   24DA 00 00 00 00 
4128   24DE 00 00 00 00 
4128   24E2 00 00 00 00 
4128   24E6 00 00 00 00 
4128   24EA 00 00 00 00 
4128   24EE 00 00 00 00 
4128   24F2 00 00 00 00 
4128   24F6 00 00 00 00 
4128   24FA 00 00 00 00 
4128   24FE 00 00 00 00 
4128   2502 00 00 00 00 
4128   2506 00 00 00 00 
4128   250A 00 00 00 00 
4128   250E 00 00 00 00 
4128   2512 00 00 00 00 
4128   2516 00 00 00 00 
4128   251A 00 00 00 00 
4128   251E 00 00 00 00 
4128   2522 00 00 00 00 
4128   2526 00 00 00 00 
4128   252A 00 00 00 00 
4128   252E 00 00 00 00 
4128   2532 00 00 00 00 
4128   2536 00 00 00 00 
4128   253A 00 00 00 00 
4128   253E 00 00 00 00 
4128   2542 00 00 00 00 
4128   2546 00 00 00 00 
4128   254A 00 00 00 00 
4128   254E 00 00 00 00 
4128   2552 00 00 00 00 
4128   2556 00 00 00 00 
4128   255A 00 00 00 00 
4128   255E 00 00 00 00 
4128   2562 00 00 00 00 
4128   2566 00 00 00 00 
4128   256A 00 00 00 00 
4128   256E 00 00 00 00 
4128   2572 00 00 00 00 
4128   2576 00 00 00 00 
4128   257A 00 00 00 00 
4128   257E 00 00 00 00 
4128   2582 00 00 00 00 
4128   2586 00 00 00 00 
4128   258A 00 00 00 00 
4128   258E 00 00 00 00 
4128   2592 00 00 00 00 
4128   2596 00 00 00 00 
4128   259A 00 00 00 00 
4128   259E 00 00 00 00 
4128   25A2 00 00 00 00 
4128   25A6 00 00 00 00 
4128   25AA 00 00 00 00 
4128   25AE 00 00 00 00 
4128   25B2 00 00 00 00 
4128   25B6 00 00 00 00 
4128   25BA 00 00 00 00 
4128   25BE 00 00 00 00 
4128   25C2 00 00 00 00 
4128   25C6 00 00 00 00 
4128   25CA 00 00 00 00 
4128   25CE 00 00 00 00 
4128   25D2 00 00 00 00 
4128   25D6 00 00 00 00 
4128   25DA 00 00 00 00 
4128   25DE 00 00 00 00 
4128   25E2 00 00 00 00 
4128   25E6 00 00 00 00 
4128   25EA 00 00 00 00 
4128   25EE 00 00 00 00 
4128   25F2 00 00 00 00 
4128   25F6 00 00 00 00 
4128   25FA 00 00 00 00 
4128   25FE 00 00 00 00 
4128   2602 00 00 00 00 
4128   2606 00 00 00 00 
4128   260A 00 00 00 00 
4128   260E 00 00 00 00 
4128   2612 00 00 00 00 
4128   2616 00 00 00 00 
4128   261A 00 00 00 00 
4128   261E 00 00 00 00 
4128   2622 00 00 00 00 
4128   2626 00 00 00 00 
4128   262A 00 00 00 00 
4128   262E 00 00 00 00 
4128   2632 00 00 00 00 
4128   2636 00 00 00 00 
4128   263A 00 00 00 00 
4128   263E 00 00 00 00 
4128   2642 00 00 00 00 
4128   2646 00 00 00 00 
4128   264A 00 00 00 00 
4128   264E 00 00 00 00 
4128   2652 00 00 00 00 
4128   2656 00 00 00 00 
4128   265A 00 00 00 00 
4128   265E 00 00 00 00 
4128   2662 00 00 00 00 
4128   2666 00 00 00 00 
4128   266A 00 00 00 00 
4128   266E 00 00 00 00 
4128   2672 00 00 00 00 
4128   2676 00 00 00 00 
4128   267A 00 00 00 00 
4128   267E 00 00 00 00 
4128   2682 00 00 00 00 
4128   2686 00 00 00 00 
4128   268A 00 00 00 00 
4128   268E 00 00 00 00 
4128   2692 00 00 00 00 
4128   2696 00 00 00 00 
4128   269A 00 00 00 00 
4128   269E 00 00 00 00 
4128   26A2 00 00 00 00 
4128   26A6 00 00 00 00 
4128   26AA 00 00 00 00 
4128   26AE 00 00 00 00 
4128   26B2 00 00 00 00 
4128   26B6 00 00 00 00 
4128   26BA 00 00 00 00 
4128   26BE 00 00 00 00 
4128   26C2 00 00 00 00 
4128   26C6 00 00 00 00 
4128   26CA 00 00 00 00 
4128   26CE 00 00 00 00 
4128   26D2 00 00 00 00 
4128   26D6 00 00 00 00 
4128   26DA 00 00 00 00 
4128   26DE 00 00 00 00 
4128   26E2 00 00 00 00 
4128   26E6 00 00 00 00 
4128   26EA 00 00 00 00 
4128   26EE 00 00 00 00 
4128   26F2 00 00 00 00 
4128   26F6 00 00 00 00 
4128   26FA 00 00 00 00 
4128   26FE 00 00 00 00 
4128   2702 00 00 00 00 
4128   2706 00 00 00 00 
4128   270A 00 00 00 00 
4128   270E 00 00 00 00 
4128   2712 00 00 00 00 
4128   2716 00 00 00 00 
4128   271A 00 00 00 00 
4128   271E 00 00 00 00 
4128   2722 00 00 00 00 
4128   2726 00 00 00 00 
4128   272A 00 00 00 00 
4128   272E 00 00 00 00 
4128   2732 00 00 00 00 
4128   2736 00 00 00 00 
4128   273A 00 00 00 00 
4128   273E 00 00 00 00 
4128   2742 00 00 00 00 
4128   2746 00 00 00 00 
4128   274A 00 00 00 00 
4128   274E 00 00 00 00 
4128   2752 00 00 00 00 
4128   2756 00 00 00 00 
4128   275A 00 00 00 00 
4128   275E 00 00 00 00 
4128   2762 00 00 00 00 
4128   2766 00 00 00 00 
4128   276A 00 00 00 00 
4128   276E 00 00 00 00 
4128   2772 00 00 00 00 
4128   2776 00 00 00 00 
4128   277A 00 00 00 00 
4128   277E 00 00 00 00 
4128   2782 00 00 00 00 
4128   2786 00 00 00 00 
4128   278A 00 00 00 00 
4128   278E 00 00 00 00 
4128   2792 00 00 00 00 
4128   2796 00 00 00 00 
4128   279A 00 00 00 00 
4129   279E 25 64 0A 00 __s0: .db "%d\n", 0
4130   27A2 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
4130   27A6 70 65 63 74 
4130   27AA 65 64 20 66 
4130   27AE 6F 72 6D 61 
4130   27B2 74 20 69 6E 
4130   27B6 20 70 72 69 
4130   27BA 6E 74 66 2E 
4130   27BE 00 
4131   27BF 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
4131   27C3 72 3A 20 55 
4131   27C7 6E 6B 6E 6F 
4131   27CB 77 6E 20 61 
4131   27CF 72 67 75 6D 
4131   27D3 65 6E 74 20 
4131   27D7 74 79 70 65 
4131   27DB 2E 0A 00 
4132   27DE 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
4132   27E2 1B 5B 48 00 
4133   27E6             
4134   27E6 E8 27       _heap_top: .dw _heap
4135   27E8 00          _heap: .db 0
4136   27E9             ; --- END DATA BLOCK
4137   27E9             
4138   27E9             .end
tasm: Number of errors = 0
