0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; strcpy(variables[0].varname, "Sol-1."); 
0011   0408             ; --- START FUNCTION CALL
0012   0408 26 8D 27      mov b, _s0 ; "Sol-1."
0013   040B FD AB         swp b
0014   040D D8            push b
0015   040E 3B 6D 22      mov d, _variables_data ; $variables
0016   0411 D7            push a
0017   0412 DA            push d
0018   0413 FD 2E 00 00   mov32 cb, $00000000
0018   0417 00 00 
0019   0419 E7            pop d
0020   041A FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0021   041E E4            pop a
0022   041F 58 00 00      add d, 0
0023   0422 2D            mov b, d
0024   0423 38 00 00      mov c, 0
0025   0426 FD AB         swp b
0026   0428 D8            push b
0027   0429 07 32 05      call strcpy
0028   042C 51 04 00      add sp, 4
0029   042F             ; --- END FUNCTION CALL
0030   042F             ; strcpy(variables[0].as_string, "String Value."); 
0031   042F             ; --- START FUNCTION CALL
0032   042F 26 94 27      mov b, _s1 ; "String Value."
0033   0432 FD AB         swp b
0034   0434 D8            push b
0035   0435 3B 6D 22      mov d, _variables_data ; $variables
0036   0438 D7            push a
0037   0439 DA            push d
0038   043A FD 2E 00 00   mov32 cb, $00000000
0038   043E 00 00 
0039   0440 E7            pop d
0040   0441 FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0041   0445 E4            pop a
0042   0446 58 41 00      add d, 65
0043   0449 2D            mov b, d
0044   044A 38 00 00      mov c, 0
0045   044D FD AB         swp b
0046   044F D8            push b
0047   0450 07 32 05      call strcpy
0048   0453 51 04 00      add sp, 4
0049   0456             ; --- END FUNCTION CALL
0050   0456             ; variables[0].var_type = 5; 
0051   0456 3B 6D 22      mov d, _variables_data ; $variables
0052   0459 D7            push a
0053   045A DA            push d
0054   045B FD 2E 00 00   mov32 cb, $00000000
0054   045F 00 00 
0055   0461 E7            pop d
0056   0462 FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0057   0466 E4            pop a
0058   0467 58 40 00      add d, 64
0059   046A DA            push d
0060   046B FD 2E 05 00   mov32 cb, $00000005
0060   046F 00 00 
0061   0471 E7            pop d
0062   0472 FD 3E         mov [d], bl
0063   0474             ; variables[0].as_int = 123; 
0064   0474 3B 6D 22      mov d, _variables_data ; $variables
0065   0477 D7            push a
0066   0478 DA            push d
0067   0479 FD 2E 00 00   mov32 cb, $00000000
0067   047D 00 00 
0068   047F E7            pop d
0069   0480 FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0070   0484 E4            pop a
0071   0485 58 81 00      add d, 129
0072   0488 DA            push d
0073   0489 FD 2E 7B 00   mov32 cb, $0000007b
0073   048D 00 00 
0074   048F E7            pop d
0075   0490 FD 43         mov [d], b
0076   0492             ; printf("\nvarname: %s", variables[0].varname); 
0077   0492             ; --- START FUNCTION CALL
0078   0492 3B 6D 22      mov d, _variables_data ; $variables
0079   0495 D7            push a
0080   0496 DA            push d
0081   0497 FD 2E 00 00   mov32 cb, $00000000
0081   049B 00 00 
0082   049D E7            pop d
0083   049E FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0084   04A2 E4            pop a
0085   04A3 58 00 00      add d, 0
0086   04A6 2D            mov b, d
0087   04A7 38 00 00      mov c, 0
0088   04AA FD AB         swp b
0089   04AC D8            push b
0090   04AD 26 A2 27      mov b, _s2 ; "\nvarname: %s"
0091   04B0 FD AB         swp b
0092   04B2 D8            push b
0093   04B3 07 63 0A      call printf
0094   04B6 51 04 00      add sp, 4
0095   04B9             ; --- END FUNCTION CALL
0096   04B9             ; printf("\nvar_type: %d\n", variables[0].var_type); 
0097   04B9             ; --- START FUNCTION CALL
0098   04B9 3B 6D 22      mov d, _variables_data ; $variables
0099   04BC D7            push a
0100   04BD DA            push d
0101   04BE FD 2E 00 00   mov32 cb, $00000000
0101   04C2 00 00 
0102   04C4 E7            pop d
0103   04C5 FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0104   04C9 E4            pop a
0105   04CA 58 40 00      add d, 64
0106   04CD 32            mov bl, [d]
0107   04CE A7 00         mov bh, 0
0108   04D0 38 00 00      mov c, 0
0109   04D3 A7 00         mov bh, 0
0110   04D5 D8            push b
0111   04D6 26 AF 27      mov b, _s3 ; "\nvar_type: %d\n"
0112   04D9 FD AB         swp b
0113   04DB D8            push b
0114   04DC 07 63 0A      call printf
0115   04DF 51 03 00      add sp, 3
0116   04E2             ; --- END FUNCTION CALL
0117   04E2             ; printf("\nas_string: %s\n",	variables[0].as_string); 
0118   04E2             ; --- START FUNCTION CALL
0119   04E2 3B 6D 22      mov d, _variables_data ; $variables
0120   04E5 D7            push a
0121   04E6 DA            push d
0122   04E7 FD 2E 00 00   mov32 cb, $00000000
0122   04EB 00 00 
0123   04ED E7            pop d
0124   04EE FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0125   04F2 E4            pop a
0126   04F3 58 41 00      add d, 65
0127   04F6 2D            mov b, d
0128   04F7 38 00 00      mov c, 0
0129   04FA FD AB         swp b
0130   04FC D8            push b
0131   04FD 26 BE 27      mov b, _s4 ; "\nas_string: %s\n"
0132   0500 FD AB         swp b
0133   0502 D8            push b
0134   0503 07 63 0A      call printf
0135   0506 51 04 00      add sp, 4
0136   0509             ; --- END FUNCTION CALL
0137   0509             ; printf("\nas_int: %d\n", variables[0].as_int); 
0138   0509             ; --- START FUNCTION CALL
0139   0509 3B 6D 22      mov d, _variables_data ; $variables
0140   050C D7            push a
0141   050D DA            push d
0142   050E FD 2E 00 00   mov32 cb, $00000000
0142   0512 00 00 
0143   0514 E7            pop d
0144   0515 FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0145   0519 E4            pop a
0146   051A 58 81 00      add d, 129
0147   051D 2A            mov b, [d]
0148   051E 38 00 00      mov c, 0
0149   0521 FD AB         swp b
0150   0523 D8            push b
0151   0524 26 CE 27      mov b, _s5 ; "\nas_int: %d\n"
0152   0527 FD AB         swp b
0153   0529 D8            push b
0154   052A 07 63 0A      call printf
0155   052D 51 04 00      add sp, 4
0156   0530             ; --- END FUNCTION CALL
0157   0530 05 0B         syscall sys_terminate_proc
0158   0532             
0159   0532             strcpy:
0160   0532 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0161   0535             ; char *psrc; 
0162   0535 52 02 00      sub sp, 2
0163   0538             ; char *pdest; 
0164   0538 52 02 00      sub sp, 2
0165   053B             ; psrc = src; 
0166   053B FA FF FF      lea d, [bp + -1] ; $psrc
0167   053E DA            push d
0168   053F FA 07 00      lea d, [bp + 7] ; $src
0169   0542 2A            mov b, [d]
0170   0543 38 00 00      mov c, 0
0171   0546 E7            pop d
0172   0547 FD 43         mov [d], b
0173   0549             ; pdest = dest; 
0174   0549 FA FD FF      lea d, [bp + -3] ; $pdest
0175   054C DA            push d
0176   054D FA 05 00      lea d, [bp + 5] ; $dest
0177   0550 2A            mov b, [d]
0178   0551 38 00 00      mov c, 0
0179   0554 E7            pop d
0180   0555 FD 43         mov [d], b
0181   0557             ; while(*psrc) *pdest++ = *psrc++; 
0182   0557             _while1_cond:
0183   0557 FA FF FF      lea d, [bp + -1] ; $psrc
0184   055A 2A            mov b, [d]
0185   055B 38 00 00      mov c, 0
0186   055E 74            mov d, b
0187   055F 32            mov bl, [d]
0188   0560 A7 00         mov bh, 0
0189   0562 38 00 00      mov c, 0
0190   0565 C0 00 00      cmp b, 0
0191   0568 C6 99 05      je _while1_exit
0192   056B             _while1_block:
0193   056B             ; *pdest++ = *psrc++; 
0194   056B FA FD FF      lea d, [bp + -3] ; $pdest
0195   056E 2A            mov b, [d]
0196   056F 38 00 00      mov c, 0
0197   0572 FD 77         inc b
0198   0574 FA FD FF      lea d, [bp + -3] ; $pdest
0199   0577 FD 43         mov [d], b
0200   0579 FD 7D         dec b
0201   057B D8            push b
0202   057C FA FF FF      lea d, [bp + -1] ; $psrc
0203   057F 2A            mov b, [d]
0204   0580 38 00 00      mov c, 0
0205   0583 FD 77         inc b
0206   0585 FA FF FF      lea d, [bp + -1] ; $psrc
0207   0588 FD 43         mov [d], b
0208   058A FD 7D         dec b
0209   058C 74            mov d, b
0210   058D 32            mov bl, [d]
0211   058E A7 00         mov bh, 0
0212   0590 38 00 00      mov c, 0
0213   0593 E7            pop d
0214   0594 FD 3E         mov [d], bl
0215   0596 0A 57 05      jmp _while1_cond
0216   0599             _while1_exit:
0217   0599             ; *pdest = '\0'; 
0218   0599 FA FD FF      lea d, [bp + -3] ; $pdest
0219   059C 2A            mov b, [d]
0220   059D 38 00 00      mov c, 0
0221   05A0 D8            push b
0222   05A1 FD 2E 00 00   mov32 cb, $00000000
0222   05A5 00 00 
0223   05A7 E7            pop d
0224   05A8 FD 3E         mov [d], bl
0225   05AA F9            leave
0226   05AB 09            ret
0227   05AC             
0228   05AC             strcmp:
0229   05AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0230   05AF             ; while (*s1 && (*s1 == *s2)) { 
0231   05AF             _while2_cond:
0232   05AF FA 05 00      lea d, [bp + 5] ; $s1
0233   05B2 2A            mov b, [d]
0234   05B3 38 00 00      mov c, 0
0235   05B6 74            mov d, b
0236   05B7 32            mov bl, [d]
0237   05B8 A7 00         mov bh, 0
0238   05BA 38 00 00      mov c, 0
0239   05BD             ; --- START LOGICAL AND
0240   05BD D7            push a
0241   05BE 11            mov a, b
0242   05BF FA 05 00      lea d, [bp + 5] ; $s1
0243   05C2 2A            mov b, [d]
0244   05C3 38 00 00      mov c, 0
0245   05C6 74            mov d, b
0246   05C7 32            mov bl, [d]
0247   05C8 A7 00         mov bh, 0
0248   05CA 38 00 00      mov c, 0
0249   05CD             ; --- START RELATIONAL
0250   05CD D7            push a
0251   05CE 11            mov a, b
0252   05CF FA 07 00      lea d, [bp + 7] ; $s2
0253   05D2 2A            mov b, [d]
0254   05D3 38 00 00      mov c, 0
0255   05D6 74            mov d, b
0256   05D7 32            mov bl, [d]
0257   05D8 A7 00         mov bh, 0
0258   05DA 38 00 00      mov c, 0
0259   05DD B0            cmp a, b
0260   05DE FD 71         seq ; ==
0261   05E0 E4            pop a
0262   05E1             ; --- END RELATIONAL
0263   05E1 FD A7         sand a, b
0264   05E3 E4            pop a
0265   05E4             ; --- END LOGICAL AND
0266   05E4 C0 00 00      cmp b, 0
0267   05E7 C6 0D 06      je _while2_exit
0268   05EA             _while2_block:
0269   05EA             ; s1++; 
0270   05EA FA 05 00      lea d, [bp + 5] ; $s1
0271   05ED 2A            mov b, [d]
0272   05EE 38 00 00      mov c, 0
0273   05F1 FD 77         inc b
0274   05F3 FA 05 00      lea d, [bp + 5] ; $s1
0275   05F6 FD 43         mov [d], b
0276   05F8 FD 7D         dec b
0277   05FA             ; s2++; 
0278   05FA FA 07 00      lea d, [bp + 7] ; $s2
0279   05FD 2A            mov b, [d]
0280   05FE 38 00 00      mov c, 0
0281   0601 FD 77         inc b
0282   0603 FA 07 00      lea d, [bp + 7] ; $s2
0283   0606 FD 43         mov [d], b
0284   0608 FD 7D         dec b
0285   060A 0A AF 05      jmp _while2_cond
0286   060D             _while2_exit:
0287   060D             ; return *s1 - *s2; 
0288   060D FA 05 00      lea d, [bp + 5] ; $s1
0289   0610 2A            mov b, [d]
0290   0611 38 00 00      mov c, 0
0291   0614 74            mov d, b
0292   0615 32            mov bl, [d]
0293   0616 A7 00         mov bh, 0
0294   0618 38 00 00      mov c, 0
0295   061B             ; --- START TERMS
0296   061B D7            push a
0297   061C 11            mov a, b
0298   061D FA 07 00      lea d, [bp + 7] ; $s2
0299   0620 2A            mov b, [d]
0300   0621 38 00 00      mov c, 0
0301   0624 74            mov d, b
0302   0625 32            mov bl, [d]
0303   0626 A7 00         mov bh, 0
0304   0628 38 00 00      mov c, 0
0305   062B 60            sub a, b
0306   062C 27            mov b, a
0307   062D E4            pop a
0308   062E             ; --- END TERMS
0309   062E F9            leave
0310   062F 09            ret
0311   0630             
0312   0630             strncmp:
0313   0630 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0314   0633 F9            leave
0315   0634 09            ret
0316   0635             
0317   0635             strcat:
0318   0635 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0319   0638             ; int dest_len; 
0320   0638 52 02 00      sub sp, 2
0321   063B             ; int i; 
0322   063B 52 02 00      sub sp, 2
0323   063E             ; dest_len = strlen(dest); 
0324   063E FA FF FF      lea d, [bp + -1] ; $dest_len
0325   0641 DA            push d
0326   0642             ; --- START FUNCTION CALL
0327   0642 FA 05 00      lea d, [bp + 5] ; $dest
0328   0645 2A            mov b, [d]
0329   0646 38 00 00      mov c, 0
0330   0649 FD AB         swp b
0331   064B D8            push b
0332   064C 07 18 07      call strlen
0333   064F 51 02 00      add sp, 2
0334   0652             ; --- END FUNCTION CALL
0335   0652 E7            pop d
0336   0653 FD 43         mov [d], b
0337   0655             ; for (i = 0; src[i] != 0; i=i+1) { 
0338   0655             _for3_init:
0339   0655 FA FD FF      lea d, [bp + -3] ; $i
0340   0658 DA            push d
0341   0659 FD 2E 00 00   mov32 cb, $00000000
0341   065D 00 00 
0342   065F E7            pop d
0343   0660 FD 43         mov [d], b
0344   0662             _for3_cond:
0345   0662 FA 07 00      lea d, [bp + 7] ; $src
0346   0665 FD 2A         mov d, [d]
0347   0667 D7            push a
0348   0668 DA            push d
0349   0669 FA FD FF      lea d, [bp + -3] ; $i
0350   066C 2A            mov b, [d]
0351   066D 38 00 00      mov c, 0
0352   0670 E7            pop d
0353   0671 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0354   0675 E4            pop a
0355   0676 32            mov bl, [d]
0356   0677 A7 00         mov bh, 0
0357   0679 38 00 00      mov c, 0
0358   067C             ; --- START RELATIONAL
0359   067C D7            push a
0360   067D 11            mov a, b
0361   067E FD 2E 00 00   mov32 cb, $00000000
0361   0682 00 00 
0362   0684 B0            cmp a, b
0363   0685 FD 72         sneq ; !=
0364   0687 E4            pop a
0365   0688             ; --- END RELATIONAL
0366   0688 C0 00 00      cmp b, 0
0367   068B C6 E6 06      je _for3_exit
0368   068E             _for3_block:
0369   068E             ; dest[dest_len + i] = src[i]; 
0370   068E FA 05 00      lea d, [bp + 5] ; $dest
0371   0691 FD 2A         mov d, [d]
0372   0693 D7            push a
0373   0694 DA            push d
0374   0695 FA FF FF      lea d, [bp + -1] ; $dest_len
0375   0698 2A            mov b, [d]
0376   0699 38 00 00      mov c, 0
0377   069C             ; --- START TERMS
0378   069C D7            push a
0379   069D 11            mov a, b
0380   069E FA FD FF      lea d, [bp + -3] ; $i
0381   06A1 2A            mov b, [d]
0382   06A2 38 00 00      mov c, 0
0383   06A5 56            add b, a
0384   06A6 E4            pop a
0385   06A7             ; --- END TERMS
0386   06A7 E7            pop d
0387   06A8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0388   06AC E4            pop a
0389   06AD DA            push d
0390   06AE FA 07 00      lea d, [bp + 7] ; $src
0391   06B1 FD 2A         mov d, [d]
0392   06B3 D7            push a
0393   06B4 DA            push d
0394   06B5 FA FD FF      lea d, [bp + -3] ; $i
0395   06B8 2A            mov b, [d]
0396   06B9 38 00 00      mov c, 0
0397   06BC E7            pop d
0398   06BD FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0399   06C1 E4            pop a
0400   06C2 32            mov bl, [d]
0401   06C3 A7 00         mov bh, 0
0402   06C5 38 00 00      mov c, 0
0403   06C8 E7            pop d
0404   06C9 FD 3E         mov [d], bl
0405   06CB             _for3_update:
0406   06CB FA FD FF      lea d, [bp + -3] ; $i
0407   06CE DA            push d
0408   06CF FA FD FF      lea d, [bp + -3] ; $i
0409   06D2 2A            mov b, [d]
0410   06D3 38 00 00      mov c, 0
0411   06D6             ; --- START TERMS
0412   06D6 D7            push a
0413   06D7 11            mov a, b
0414   06D8 FD 2E 01 00   mov32 cb, $00000001
0414   06DC 00 00 
0415   06DE 56            add b, a
0416   06DF E4            pop a
0417   06E0             ; --- END TERMS
0418   06E0 E7            pop d
0419   06E1 FD 43         mov [d], b
0420   06E3 0A 62 06      jmp _for3_cond
0421   06E6             _for3_exit:
0422   06E6             ; dest[dest_len + i] = 0; 
0423   06E6 FA 05 00      lea d, [bp + 5] ; $dest
0424   06E9 FD 2A         mov d, [d]
0425   06EB D7            push a
0426   06EC DA            push d
0427   06ED FA FF FF      lea d, [bp + -1] ; $dest_len
0428   06F0 2A            mov b, [d]
0429   06F1 38 00 00      mov c, 0
0430   06F4             ; --- START TERMS
0431   06F4 D7            push a
0432   06F5 11            mov a, b
0433   06F6 FA FD FF      lea d, [bp + -3] ; $i
0434   06F9 2A            mov b, [d]
0435   06FA 38 00 00      mov c, 0
0436   06FD 56            add b, a
0437   06FE E4            pop a
0438   06FF             ; --- END TERMS
0439   06FF E7            pop d
0440   0700 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0441   0704 E4            pop a
0442   0705 DA            push d
0443   0706 FD 2E 00 00   mov32 cb, $00000000
0443   070A 00 00 
0444   070C E7            pop d
0445   070D FD 3E         mov [d], bl
0446   070F             ; return dest; 
0447   070F FA 05 00      lea d, [bp + 5] ; $dest
0448   0712 2A            mov b, [d]
0449   0713 38 00 00      mov c, 0
0450   0716 F9            leave
0451   0717 09            ret
0452   0718             
0453   0718             strlen:
0454   0718 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0455   071B             ; int length; 
0456   071B 52 02 00      sub sp, 2
0457   071E             ; length = 0; 
0458   071E FA FF FF      lea d, [bp + -1] ; $length
0459   0721 DA            push d
0460   0722 FD 2E 00 00   mov32 cb, $00000000
0460   0726 00 00 
0461   0728 E7            pop d
0462   0729 FD 43         mov [d], b
0463   072B             ; while (str[length] != 0) { 
0464   072B             _while4_cond:
0465   072B FA 05 00      lea d, [bp + 5] ; $str
0466   072E FD 2A         mov d, [d]
0467   0730 D7            push a
0468   0731 DA            push d
0469   0732 FA FF FF      lea d, [bp + -1] ; $length
0470   0735 2A            mov b, [d]
0471   0736 38 00 00      mov c, 0
0472   0739 E7            pop d
0473   073A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0474   073E E4            pop a
0475   073F 32            mov bl, [d]
0476   0740 A7 00         mov bh, 0
0477   0742 38 00 00      mov c, 0
0478   0745             ; --- START RELATIONAL
0479   0745 D7            push a
0480   0746 11            mov a, b
0481   0747 FD 2E 00 00   mov32 cb, $00000000
0481   074B 00 00 
0482   074D B0            cmp a, b
0483   074E FD 72         sneq ; !=
0484   0750 E4            pop a
0485   0751             ; --- END RELATIONAL
0486   0751 C0 00 00      cmp b, 0
0487   0754 C6 6A 07      je _while4_exit
0488   0757             _while4_block:
0489   0757             ; length++; 
0490   0757 FA FF FF      lea d, [bp + -1] ; $length
0491   075A 2A            mov b, [d]
0492   075B 38 00 00      mov c, 0
0493   075E 11            mov a, b
0494   075F FD 77         inc b
0495   0761 FA FF FF      lea d, [bp + -1] ; $length
0496   0764 FD 43         mov [d], b
0497   0766 27            mov b, a
0498   0767 0A 2B 07      jmp _while4_cond
0499   076A             _while4_exit:
0500   076A             ; return length; 
0501   076A FA FF FF      lea d, [bp + -1] ; $length
0502   076D 2A            mov b, [d]
0503   076E 38 00 00      mov c, 0
0504   0771 F9            leave
0505   0772 09            ret
0506   0773             
0507   0773             exit:
0508   0773 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0509   0776             
0510   0776             ; --- BEGIN INLINE ASM SEGMENT
0511   0776 05 0B         syscall sys_terminate_proc
0512   0778             ; --- END INLINE ASM SEGMENT
0513   0778             
0514   0778 F9            leave
0515   0779 09            ret
0516   077A             
0517   077A             memset:
0518   077A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0519   077D             ; int i; 
0520   077D 52 02 00      sub sp, 2
0521   0780             ; for(i = 0; i < size; i++){ 
0522   0780             _for5_init:
0523   0780 FA FF FF      lea d, [bp + -1] ; $i
0524   0783 DA            push d
0525   0784 FD 2E 00 00   mov32 cb, $00000000
0525   0788 00 00 
0526   078A E7            pop d
0527   078B FD 43         mov [d], b
0528   078D             _for5_cond:
0529   078D FA FF FF      lea d, [bp + -1] ; $i
0530   0790 2A            mov b, [d]
0531   0791 38 00 00      mov c, 0
0532   0794             ; --- START RELATIONAL
0533   0794 D7            push a
0534   0795 11            mov a, b
0535   0796 FA 08 00      lea d, [bp + 8] ; $size
0536   0799 2A            mov b, [d]
0537   079A 38 00 00      mov c, 0
0538   079D B0            cmp a, b
0539   079E FD 73         slt ; < (signed)
0540   07A0 E4            pop a
0541   07A1             ; --- END RELATIONAL
0542   07A1 C0 00 00      cmp b, 0
0543   07A4 C6 D9 07      je _for5_exit
0544   07A7             _for5_block:
0545   07A7             ; *(s+i) = c; 
0546   07A7 FA 05 00      lea d, [bp + 5] ; $s
0547   07AA 2A            mov b, [d]
0548   07AB 38 00 00      mov c, 0
0549   07AE             ; --- START TERMS
0550   07AE D7            push a
0551   07AF 11            mov a, b
0552   07B0 FA FF FF      lea d, [bp + -1] ; $i
0553   07B3 2A            mov b, [d]
0554   07B4 38 00 00      mov c, 0
0555   07B7 56            add b, a
0556   07B8 E4            pop a
0557   07B9             ; --- END TERMS
0558   07B9 D8            push b
0559   07BA FA 07 00      lea d, [bp + 7] ; $c
0560   07BD 32            mov bl, [d]
0561   07BE A7 00         mov bh, 0
0562   07C0 38 00 00      mov c, 0
0563   07C3 E7            pop d
0564   07C4 FD 3E         mov [d], bl
0565   07C6             _for5_update:
0566   07C6 FA FF FF      lea d, [bp + -1] ; $i
0567   07C9 2A            mov b, [d]
0568   07CA 38 00 00      mov c, 0
0569   07CD 11            mov a, b
0570   07CE FD 77         inc b
0571   07D0 FA FF FF      lea d, [bp + -1] ; $i
0572   07D3 FD 43         mov [d], b
0573   07D5 27            mov b, a
0574   07D6 0A 8D 07      jmp _for5_cond
0575   07D9             _for5_exit:
0576   07D9             ; return s; 
0577   07D9 FA 05 00      lea d, [bp + 5] ; $s
0578   07DC 2A            mov b, [d]
0579   07DD 38 00 00      mov c, 0
0580   07E0 F9            leave
0581   07E1 09            ret
0582   07E2             
0583   07E2             atoi:
0584   07E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0585   07E5             ; int result = 0;  // Initialize result 
0586   07E5 52 02 00      sub sp, 2
0587   07E8             ; --- START LOCAL VAR INITIALIZATION
0588   07E8 FA FF FF      lea d, [bp + -1] ; $result
0589   07EB DA            push d
0590   07EC FD 2E 00 00   mov32 cb, $00000000
0590   07F0 00 00 
0591   07F2 E7            pop d
0592   07F3 FD 43         mov [d], b
0593   07F5             ; --- END LOCAL VAR INITIALIZATION
0594   07F5             ; int sign = 1;    // Initialize sign as positive 
0595   07F5 52 02 00      sub sp, 2
0596   07F8             ; --- START LOCAL VAR INITIALIZATION
0597   07F8 FA FD FF      lea d, [bp + -3] ; $sign
0598   07FB DA            push d
0599   07FC FD 2E 01 00   mov32 cb, $00000001
0599   0800 00 00 
0600   0802 E7            pop d
0601   0803 FD 43         mov [d], b
0602   0805             ; --- END LOCAL VAR INITIALIZATION
0603   0805             ; while (*str == ' ') str++; 
0604   0805             _while6_cond:
0605   0805 FA 05 00      lea d, [bp + 5] ; $str
0606   0808 2A            mov b, [d]
0607   0809 38 00 00      mov c, 0
0608   080C 74            mov d, b
0609   080D 32            mov bl, [d]
0610   080E A7 00         mov bh, 0
0611   0810 38 00 00      mov c, 0
0612   0813             ; --- START RELATIONAL
0613   0813 D7            push a
0614   0814 11            mov a, b
0615   0815 FD 2E 20 00   mov32 cb, $00000020
0615   0819 00 00 
0616   081B B0            cmp a, b
0617   081C FD 71         seq ; ==
0618   081E E4            pop a
0619   081F             ; --- END RELATIONAL
0620   081F C0 00 00      cmp b, 0
0621   0822 C6 38 08      je _while6_exit
0622   0825             _while6_block:
0623   0825             ; str++; 
0624   0825 FA 05 00      lea d, [bp + 5] ; $str
0625   0828 2A            mov b, [d]
0626   0829 38 00 00      mov c, 0
0627   082C FD 77         inc b
0628   082E FA 05 00      lea d, [bp + 5] ; $str
0629   0831 FD 43         mov [d], b
0630   0833 FD 7D         dec b
0631   0835 0A 05 08      jmp _while6_cond
0632   0838             _while6_exit:
0633   0838             ; if (*str == '-' || *str == '+') { 
0634   0838             _if7_cond:
0635   0838 FA 05 00      lea d, [bp + 5] ; $str
0636   083B 2A            mov b, [d]
0637   083C 38 00 00      mov c, 0
0638   083F 74            mov d, b
0639   0840 32            mov bl, [d]
0640   0841 A7 00         mov bh, 0
0641   0843 38 00 00      mov c, 0
0642   0846             ; --- START RELATIONAL
0643   0846 D7            push a
0644   0847 11            mov a, b
0645   0848 FD 2E 2D 00   mov32 cb, $0000002d
0645   084C 00 00 
0646   084E B0            cmp a, b
0647   084F FD 71         seq ; ==
0648   0851 E4            pop a
0649   0852             ; --- END RELATIONAL
0650   0852             ; --- START LOGICAL OR
0651   0852 D7            push a
0652   0853 11            mov a, b
0653   0854 FA 05 00      lea d, [bp + 5] ; $str
0654   0857 2A            mov b, [d]
0655   0858 38 00 00      mov c, 0
0656   085B 74            mov d, b
0657   085C 32            mov bl, [d]
0658   085D A7 00         mov bh, 0
0659   085F 38 00 00      mov c, 0
0660   0862             ; --- START RELATIONAL
0661   0862 D7            push a
0662   0863 11            mov a, b
0663   0864 FD 2E 2B 00   mov32 cb, $0000002b
0663   0868 00 00 
0664   086A B0            cmp a, b
0665   086B FD 71         seq ; ==
0666   086D E4            pop a
0667   086E             ; --- END RELATIONAL
0668   086E FD A8         sor a, b ; ||
0669   0870 E4            pop a
0670   0871             ; --- END LOGICAL OR
0671   0871 C0 00 00      cmp b, 0
0672   0874 C6 BC 08      je _if7_exit
0673   0877             _if7_TRUE:
0674   0877             ; if (*str == '-') sign = -1; 
0675   0877             _if8_cond:
0676   0877 FA 05 00      lea d, [bp + 5] ; $str
0677   087A 2A            mov b, [d]
0678   087B 38 00 00      mov c, 0
0679   087E 74            mov d, b
0680   087F 32            mov bl, [d]
0681   0880 A7 00         mov bh, 0
0682   0882 38 00 00      mov c, 0
0683   0885             ; --- START RELATIONAL
0684   0885 D7            push a
0685   0886 11            mov a, b
0686   0887 FD 2E 2D 00   mov32 cb, $0000002d
0686   088B 00 00 
0687   088D B0            cmp a, b
0688   088E FD 71         seq ; ==
0689   0890 E4            pop a
0690   0891             ; --- END RELATIONAL
0691   0891 C0 00 00      cmp b, 0
0692   0894 C6 A9 08      je _if8_exit
0693   0897             _if8_TRUE:
0694   0897             ; sign = -1; 
0695   0897 FA FD FF      lea d, [bp + -3] ; $sign
0696   089A DA            push d
0697   089B FD 2E 01 00   mov32 cb, $00000001
0697   089F 00 00 
0698   08A1 FD 97         neg b
0699   08A3 E7            pop d
0700   08A4 FD 43         mov [d], b
0701   08A6 0A A9 08      jmp _if8_exit
0702   08A9             _if8_exit:
0703   08A9             ; str++; 
0704   08A9 FA 05 00      lea d, [bp + 5] ; $str
0705   08AC 2A            mov b, [d]
0706   08AD 38 00 00      mov c, 0
0707   08B0 FD 77         inc b
0708   08B2 FA 05 00      lea d, [bp + 5] ; $str
0709   08B5 FD 43         mov [d], b
0710   08B7 FD 7D         dec b
0711   08B9 0A BC 08      jmp _if7_exit
0712   08BC             _if7_exit:
0713   08BC             ; while (*str >= '0' && *str <= '9') { 
0714   08BC             _while9_cond:
0715   08BC FA 05 00      lea d, [bp + 5] ; $str
0716   08BF 2A            mov b, [d]
0717   08C0 38 00 00      mov c, 0
0718   08C3 74            mov d, b
0719   08C4 32            mov bl, [d]
0720   08C5 A7 00         mov bh, 0
0721   08C7 38 00 00      mov c, 0
0722   08CA             ; --- START RELATIONAL
0723   08CA D7            push a
0724   08CB 11            mov a, b
0725   08CC FD 2E 30 00   mov32 cb, $00000030
0725   08D0 00 00 
0726   08D2 B0            cmp a, b
0727   08D3 FD 82         sgeu ; >= (unsigned)
0728   08D5 E4            pop a
0729   08D6             ; --- END RELATIONAL
0730   08D6             ; --- START LOGICAL AND
0731   08D6 D7            push a
0732   08D7 11            mov a, b
0733   08D8 FA 05 00      lea d, [bp + 5] ; $str
0734   08DB 2A            mov b, [d]
0735   08DC 38 00 00      mov c, 0
0736   08DF 74            mov d, b
0737   08E0 32            mov bl, [d]
0738   08E1 A7 00         mov bh, 0
0739   08E3 38 00 00      mov c, 0
0740   08E6             ; --- START RELATIONAL
0741   08E6 D7            push a
0742   08E7 11            mov a, b
0743   08E8 FD 2E 39 00   mov32 cb, $00000039
0743   08EC 00 00 
0744   08EE B0            cmp a, b
0745   08EF FD 76         sleu ; <= (unsigned)
0746   08F1 E4            pop a
0747   08F2             ; --- END RELATIONAL
0748   08F2 FD A7         sand a, b
0749   08F4 E4            pop a
0750   08F5             ; --- END LOGICAL AND
0751   08F5 C0 00 00      cmp b, 0
0752   08F8 C6 45 09      je _while9_exit
0753   08FB             _while9_block:
0754   08FB             ; result = result * 10 + (*str - '0'); 
0755   08FB FA FF FF      lea d, [bp + -1] ; $result
0756   08FE DA            push d
0757   08FF FA FF FF      lea d, [bp + -1] ; $result
0758   0902 2A            mov b, [d]
0759   0903 38 00 00      mov c, 0
0760   0906             ; --- START FACTORS
0761   0906 D7            push a
0762   0907 11            mov a, b
0763   0908 FD 2E 0A 00   mov32 cb, $0000000a
0763   090C 00 00 
0764   090E AC            mul a, b ; *
0765   090F 11            mov a, b
0766   0910 27            mov b, a
0767   0911 E4            pop a
0768   0912             ; --- END FACTORS
0769   0912             ; --- START TERMS
0770   0912 D7            push a
0771   0913 11            mov a, b
0772   0914 FA 05 00      lea d, [bp + 5] ; $str
0773   0917 2A            mov b, [d]
0774   0918 38 00 00      mov c, 0
0775   091B 74            mov d, b
0776   091C 32            mov bl, [d]
0777   091D A7 00         mov bh, 0
0778   091F 38 00 00      mov c, 0
0779   0922             ; --- START TERMS
0780   0922 D7            push a
0781   0923 11            mov a, b
0782   0924 FD 2E 30 00   mov32 cb, $00000030
0782   0928 00 00 
0783   092A 60            sub a, b
0784   092B 27            mov b, a
0785   092C E4            pop a
0786   092D             ; --- END TERMS
0787   092D 56            add b, a
0788   092E E4            pop a
0789   092F             ; --- END TERMS
0790   092F E7            pop d
0791   0930 FD 43         mov [d], b
0792   0932             ; str++; 
0793   0932 FA 05 00      lea d, [bp + 5] ; $str
0794   0935 2A            mov b, [d]
0795   0936 38 00 00      mov c, 0
0796   0939 FD 77         inc b
0797   093B FA 05 00      lea d, [bp + 5] ; $str
0798   093E FD 43         mov [d], b
0799   0940 FD 7D         dec b
0800   0942 0A BC 08      jmp _while9_cond
0801   0945             _while9_exit:
0802   0945             ; return sign * result; 
0803   0945 FA FD FF      lea d, [bp + -3] ; $sign
0804   0948 2A            mov b, [d]
0805   0949 38 00 00      mov c, 0
0806   094C             ; --- START FACTORS
0807   094C D7            push a
0808   094D 11            mov a, b
0809   094E FA FF FF      lea d, [bp + -1] ; $result
0810   0951 2A            mov b, [d]
0811   0952 38 00 00      mov c, 0
0812   0955 AC            mul a, b ; *
0813   0956 11            mov a, b
0814   0957 27            mov b, a
0815   0958 E4            pop a
0816   0959             ; --- END FACTORS
0817   0959 F9            leave
0818   095A 09            ret
0819   095B             
0820   095B             rand:
0821   095B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0822   095E             ; int  sec; 
0823   095E 52 02 00      sub sp, 2
0824   0961             
0825   0961             ; --- BEGIN INLINE ASM SEGMENT
0826   0961 19 00         mov al, 0
0827   0963 05 01         syscall sys_rtc					
0828   0965 1A            mov al, ah
0829   0966 FA FF FF      lea d, [bp + -1] ; $sec
0830   0969 1E            mov al, [d]
0831   096A 22 00         mov ah, 0
0832   096C             ; --- END INLINE ASM SEGMENT
0833   096C             
0834   096C             ; return sec; 
0835   096C FA FF FF      lea d, [bp + -1] ; $sec
0836   096F 2A            mov b, [d]
0837   0970 38 00 00      mov c, 0
0838   0973 F9            leave
0839   0974 09            ret
0840   0975             
0841   0975             alloc:
0842   0975 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0843   0978             ; heap_top = heap_top + bytes; 
0844   0978 3B 1F 28      mov d, _heap_top ; $heap_top
0845   097B DA            push d
0846   097C 3B 1F 28      mov d, _heap_top ; $heap_top
0847   097F 2A            mov b, [d]
0848   0980 38 00 00      mov c, 0
0849   0983             ; --- START TERMS
0850   0983 D7            push a
0851   0984 11            mov a, b
0852   0985 FA 05 00      lea d, [bp + 5] ; $bytes
0853   0988 2A            mov b, [d]
0854   0989 38 00 00      mov c, 0
0855   098C 56            add b, a
0856   098D E4            pop a
0857   098E             ; --- END TERMS
0858   098E E7            pop d
0859   098F FD 43         mov [d], b
0860   0991             ; return heap_top - bytes; 
0861   0991 3B 1F 28      mov d, _heap_top ; $heap_top
0862   0994 2A            mov b, [d]
0863   0995 38 00 00      mov c, 0
0864   0998             ; --- START TERMS
0865   0998 D7            push a
0866   0999 11            mov a, b
0867   099A FA 05 00      lea d, [bp + 5] ; $bytes
0868   099D 2A            mov b, [d]
0869   099E 38 00 00      mov c, 0
0870   09A1 60            sub a, b
0871   09A2 27            mov b, a
0872   09A3 E4            pop a
0873   09A4             ; --- END TERMS
0874   09A4 F9            leave
0875   09A5 09            ret
0876   09A6             
0877   09A6             free:
0878   09A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0879   09A9             ; return heap_top = heap_top - bytes; 
0880   09A9 3B 1F 28      mov d, _heap_top ; $heap_top
0881   09AC DA            push d
0882   09AD 3B 1F 28      mov d, _heap_top ; $heap_top
0883   09B0 2A            mov b, [d]
0884   09B1 38 00 00      mov c, 0
0885   09B4             ; --- START TERMS
0886   09B4 D7            push a
0887   09B5 11            mov a, b
0888   09B6 FA 05 00      lea d, [bp + 5] ; $bytes
0889   09B9 2A            mov b, [d]
0890   09BA 38 00 00      mov c, 0
0891   09BD 60            sub a, b
0892   09BE 27            mov b, a
0893   09BF E4            pop a
0894   09C0             ; --- END TERMS
0895   09C0 E7            pop d
0896   09C1 FD 43         mov [d], b
0897   09C3 F9            leave
0898   09C4 09            ret
0899   09C5             
0900   09C5             fopen:
0901   09C5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0902   09C8             ; FILE *fp; 
0903   09C8 52 02 00      sub sp, 2
0904   09CB             ; static int max_handle = 0; 
0905   09CB 52 02 00      sub sp, 2
0906   09CE             ; fp = alloc(sizeof(FILE)); 
0907   09CE FA FF FF      lea d, [bp + -1] ; $fp
0908   09D1 DA            push d
0909   09D2             ; --- START FUNCTION CALL
0910   09D2 FD 2E 04 01   mov32 cb, 260
0910   09D6 00 00 
0911   09D8 FD AB         swp b
0912   09DA D8            push b
0913   09DB 07 75 09      call alloc
0914   09DE 51 02 00      add sp, 2
0915   09E1             ; --- END FUNCTION CALL
0916   09E1 E7            pop d
0917   09E2 FD 43         mov [d], b
0918   09E4             ; strcpy(fp->filename, filename); 
0919   09E4             ; --- START FUNCTION CALL
0920   09E4 FA 05 00      lea d, [bp + 5] ; $filename
0921   09E7 2A            mov b, [d]
0922   09E8 38 00 00      mov c, 0
0923   09EB FD AB         swp b
0924   09ED D8            push b
0925   09EE FA FF FF      lea d, [bp + -1] ; $fp
0926   09F1 FD 2A         mov d, [d]
0927   09F3 58 02 00      add d, 2
0928   09F6 2D            mov b, d
0929   09F7 38 00 00      mov c, 0
0930   09FA FD AB         swp b
0931   09FC D8            push b
0932   09FD 07 32 05      call strcpy
0933   0A00 51 04 00      add sp, 4
0934   0A03             ; --- END FUNCTION CALL
0935   0A03             ; fp->handle = max_handle; 
0936   0A03 FA FF FF      lea d, [bp + -1] ; $fp
0937   0A06 FD 2A         mov d, [d]
0938   0A08 58 00 00      add d, 0
0939   0A0B DA            push d
0940   0A0C 3B 8B 27      mov d, st_fopen_max_handle ; static max_handle
0941   0A0F 2A            mov b, [d]
0942   0A10 38 00 00      mov c, 0
0943   0A13 E7            pop d
0944   0A14 FD 43         mov [d], b
0945   0A16             ; fp->mode = mode; 
0946   0A16 FA FF FF      lea d, [bp + -1] ; $fp
0947   0A19 FD 2A         mov d, [d]
0948   0A1B 58 02 01      add d, 258
0949   0A1E DA            push d
0950   0A1F FA 07 00      lea d, [bp + 7] ; $mode
0951   0A22 32            mov bl, [d]
0952   0A23 A7 00         mov bh, 0
0953   0A25 38 00 00      mov c, 0
0954   0A28 E7            pop d
0955   0A29 FD 3E         mov [d], bl
0956   0A2B             ; fp->loc = 0; 
0957   0A2B FA FF FF      lea d, [bp + -1] ; $fp
0958   0A2E FD 2A         mov d, [d]
0959   0A30 58 03 01      add d, 259
0960   0A33 DA            push d
0961   0A34 FD 2E 00 00   mov32 cb, $00000000
0961   0A38 00 00 
0962   0A3A E7            pop d
0963   0A3B FD 3E         mov [d], bl
0964   0A3D             ; max_handle++; 
0965   0A3D 3B 8B 27      mov d, st_fopen_max_handle ; static max_handle
0966   0A40 2A            mov b, [d]
0967   0A41 38 00 00      mov c, 0
0968   0A44 11            mov a, b
0969   0A45 FD 77         inc b
0970   0A47 3B 8B 27      mov d, st_fopen_max_handle ; static max_handle
0971   0A4A FD 43         mov [d], b
0972   0A4C 27            mov b, a
0973   0A4D F9            leave
0974   0A4E 09            ret
0975   0A4F             
0976   0A4F             fclose:
0977   0A4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0978   0A52             ; free(sizeof(FILE)); 
0979   0A52             ; --- START FUNCTION CALL
0980   0A52 FD 2E 04 01   mov32 cb, 260
0980   0A56 00 00 
0981   0A58 FD AB         swp b
0982   0A5A D8            push b
0983   0A5B 07 A6 09      call free
0984   0A5E 51 02 00      add sp, 2
0985   0A61             ; --- END FUNCTION CALL
0986   0A61 F9            leave
0987   0A62 09            ret
0988   0A63             
0989   0A63             printf:
0990   0A63 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0991   0A66             ; char *p, *format_p; 
0992   0A66 52 02 00      sub sp, 2
0993   0A69 52 02 00      sub sp, 2
0994   0A6C             ; format_p = format; 
0995   0A6C FA FD FF      lea d, [bp + -3] ; $format_p
0996   0A6F DA            push d
0997   0A70 FA 05 00      lea d, [bp + 5] ; $format
0998   0A73 2A            mov b, [d]
0999   0A74 38 00 00      mov c, 0
1000   0A77 E7            pop d
1001   0A78 FD 43         mov [d], b
1002   0A7A             ; p = &format + 2; 
1003   0A7A FA FF FF      lea d, [bp + -1] ; $p
1004   0A7D DA            push d
1005   0A7E FA 05 00      lea d, [bp + 5] ; $format
1006   0A81 2D            mov b, d
1007   0A82             ; --- START TERMS
1008   0A82 D7            push a
1009   0A83 11            mov a, b
1010   0A84 FD 2E 02 00   mov32 cb, $00000002
1010   0A88 00 00 
1011   0A8A 56            add b, a
1012   0A8B E4            pop a
1013   0A8C             ; --- END TERMS
1014   0A8C E7            pop d
1015   0A8D FD 43         mov [d], b
1016   0A8F             ; for(;;){ 
1017   0A8F             _for10_init:
1018   0A8F             _for10_cond:
1019   0A8F             _for10_block:
1020   0A8F             ; if(!*format_p) break; 
1021   0A8F             _if11_cond:
1022   0A8F FA FD FF      lea d, [bp + -3] ; $format_p
1023   0A92 2A            mov b, [d]
1024   0A93 38 00 00      mov c, 0
1025   0A96 74            mov d, b
1026   0A97 32            mov bl, [d]
1027   0A98 A7 00         mov bh, 0
1028   0A9A 38 00 00      mov c, 0
1029   0A9D C0 00 00      cmp b, 0
1030   0AA0 FD 71         seq ; !
1031   0AA2 C0 00 00      cmp b, 0
1032   0AA5 C6 AE 0A      je _if11_else
1033   0AA8             _if11_TRUE:
1034   0AA8             ; break; 
1035   0AA8 0A 3F 0D      jmp _for10_exit ; for break
1036   0AAB 0A 3C 0D      jmp _if11_exit
1037   0AAE             _if11_else:
1038   0AAE             ; if(*format_p == '%'){ 
1039   0AAE             _if12_cond:
1040   0AAE FA FD FF      lea d, [bp + -3] ; $format_p
1041   0AB1 2A            mov b, [d]
1042   0AB2 38 00 00      mov c, 0
1043   0AB5 74            mov d, b
1044   0AB6 32            mov bl, [d]
1045   0AB7 A7 00         mov bh, 0
1046   0AB9 38 00 00      mov c, 0
1047   0ABC             ; --- START RELATIONAL
1048   0ABC D7            push a
1049   0ABD 11            mov a, b
1050   0ABE FD 2E 25 00   mov32 cb, $00000025
1050   0AC2 00 00 
1051   0AC4 B0            cmp a, b
1052   0AC5 FD 71         seq ; ==
1053   0AC7 E4            pop a
1054   0AC8             ; --- END RELATIONAL
1055   0AC8 C0 00 00      cmp b, 0
1056   0ACB C6 17 0D      je _if12_else
1057   0ACE             _if12_TRUE:
1058   0ACE             ; format_p++; 
1059   0ACE FA FD FF      lea d, [bp + -3] ; $format_p
1060   0AD1 2A            mov b, [d]
1061   0AD2 38 00 00      mov c, 0
1062   0AD5 FD 77         inc b
1063   0AD7 FA FD FF      lea d, [bp + -3] ; $format_p
1064   0ADA FD 43         mov [d], b
1065   0ADC FD 7D         dec b
1066   0ADE             ; switch(*format_p){ 
1067   0ADE             _switch13_expr:
1068   0ADE FA FD FF      lea d, [bp + -3] ; $format_p
1069   0AE1 2A            mov b, [d]
1070   0AE2 38 00 00      mov c, 0
1071   0AE5 74            mov d, b
1072   0AE6 32            mov bl, [d]
1073   0AE7 A7 00         mov bh, 0
1074   0AE9 38 00 00      mov c, 0
1075   0AEC             _switch13_comparisons:
1076   0AEC C1 6C         cmp bl, $6c
1077   0AEE C6 1A 0B      je _switch13_case0
1078   0AF1 C1 4C         cmp bl, $4c
1079   0AF3 C6 1A 0B      je _switch13_case1
1080   0AF6 C1 64         cmp bl, $64
1081   0AF8 C6 2A 0C      je _switch13_case2
1082   0AFB C1 69         cmp bl, $69
1083   0AFD C6 2A 0C      je _switch13_case3
1084   0B00 C1 75         cmp bl, $75
1085   0B02 C6 5A 0C      je _switch13_case4
1086   0B05 C1 78         cmp bl, $78
1087   0B07 C6 8A 0C      je _switch13_case5
1088   0B0A C1 63         cmp bl, $63
1089   0B0C C6 AE 0C      je _switch13_case6
1090   0B0F C1 73         cmp bl, $73
1091   0B11 C6 D3 0C      je _switch13_case7
1092   0B14 0A F8 0C      jmp _switch13_default
1093   0B17 0A 04 0D      jmp _switch13_exit
1094   0B1A             _switch13_case0:
1095   0B1A             _switch13_case1:
1096   0B1A             ; format_p++; 
1097   0B1A FA FD FF      lea d, [bp + -3] ; $format_p
1098   0B1D 2A            mov b, [d]
1099   0B1E 38 00 00      mov c, 0
1100   0B21 FD 77         inc b
1101   0B23 FA FD FF      lea d, [bp + -3] ; $format_p
1102   0B26 FD 43         mov [d], b
1103   0B28 FD 7D         dec b
1104   0B2A             ; if(*format_p == 'd' || *format_p == 'i') 
1105   0B2A             _if14_cond:
1106   0B2A FA FD FF      lea d, [bp + -3] ; $format_p
1107   0B2D 2A            mov b, [d]
1108   0B2E 38 00 00      mov c, 0
1109   0B31 74            mov d, b
1110   0B32 32            mov bl, [d]
1111   0B33 A7 00         mov bh, 0
1112   0B35 38 00 00      mov c, 0
1113   0B38             ; --- START RELATIONAL
1114   0B38 D7            push a
1115   0B39 11            mov a, b
1116   0B3A FD 2E 64 00   mov32 cb, $00000064
1116   0B3E 00 00 
1117   0B40 B0            cmp a, b
1118   0B41 FD 71         seq ; ==
1119   0B43 E4            pop a
1120   0B44             ; --- END RELATIONAL
1121   0B44             ; --- START LOGICAL OR
1122   0B44 D7            push a
1123   0B45 11            mov a, b
1124   0B46 FA FD FF      lea d, [bp + -3] ; $format_p
1125   0B49 2A            mov b, [d]
1126   0B4A 38 00 00      mov c, 0
1127   0B4D 74            mov d, b
1128   0B4E 32            mov bl, [d]
1129   0B4F A7 00         mov bh, 0
1130   0B51 38 00 00      mov c, 0
1131   0B54             ; --- START RELATIONAL
1132   0B54 D7            push a
1133   0B55 11            mov a, b
1134   0B56 FD 2E 69 00   mov32 cb, $00000069
1134   0B5A 00 00 
1135   0B5C B0            cmp a, b
1136   0B5D FD 71         seq ; ==
1137   0B5F E4            pop a
1138   0B60             ; --- END RELATIONAL
1139   0B60 FD A8         sor a, b ; ||
1140   0B62 E4            pop a
1141   0B63             ; --- END LOGICAL OR
1142   0B63 C0 00 00      cmp b, 0
1143   0B66 C6 87 0B      je _if14_else
1144   0B69             _if14_TRUE:
1145   0B69             ; print_signed_long(*(long *)p); 
1146   0B69             ; --- START FUNCTION CALL
1147   0B69 FA FF FF      lea d, [bp + -1] ; $p
1148   0B6C 2A            mov b, [d]
1149   0B6D 38 00 00      mov c, 0
1150   0B70 74            mov d, b
1151   0B71 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1152   0B74 FD 39         mov c, b ; And place it into C
1153   0B76 2A            mov b, [d] ; Lower Word in B
1154   0B77 12            mov a, c
1155   0B78 FD AA         swp a
1156   0B7A D7            push a
1157   0B7B FD AB         swp b
1158   0B7D D8            push b
1159   0B7E 07 11 17      call print_signed_long
1160   0B81 51 04 00      add sp, 4
1161   0B84             ; --- END FUNCTION CALL
1162   0B84 0A 0F 0C      jmp _if14_exit
1163   0B87             _if14_else:
1164   0B87             ; if(*format_p == 'u') 
1165   0B87             _if15_cond:
1166   0B87 FA FD FF      lea d, [bp + -3] ; $format_p
1167   0B8A 2A            mov b, [d]
1168   0B8B 38 00 00      mov c, 0
1169   0B8E 74            mov d, b
1170   0B8F 32            mov bl, [d]
1171   0B90 A7 00         mov bh, 0
1172   0B92 38 00 00      mov c, 0
1173   0B95             ; --- START RELATIONAL
1174   0B95 D7            push a
1175   0B96 11            mov a, b
1176   0B97 FD 2E 75 00   mov32 cb, $00000075
1176   0B9B 00 00 
1177   0B9D B0            cmp a, b
1178   0B9E FD 71         seq ; ==
1179   0BA0 E4            pop a
1180   0BA1             ; --- END RELATIONAL
1181   0BA1 C0 00 00      cmp b, 0
1182   0BA4 C6 C5 0B      je _if15_else
1183   0BA7             _if15_TRUE:
1184   0BA7             ; print_unsigned_long(*(unsigned long *)p); 
1185   0BA7             ; --- START FUNCTION CALL
1186   0BA7 FA FF FF      lea d, [bp + -1] ; $p
1187   0BAA 2A            mov b, [d]
1188   0BAB 38 00 00      mov c, 0
1189   0BAE 74            mov d, b
1190   0BAF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1191   0BB2 FD 39         mov c, b ; And place it into C
1192   0BB4 2A            mov b, [d] ; Lower Word in B
1193   0BB5 12            mov a, c
1194   0BB6 FD AA         swp a
1195   0BB8 D7            push a
1196   0BB9 FD AB         swp b
1197   0BBB D8            push b
1198   0BBC 07 80 18      call print_unsigned_long
1199   0BBF 51 04 00      add sp, 4
1200   0BC2             ; --- END FUNCTION CALL
1201   0BC2 0A 0F 0C      jmp _if15_exit
1202   0BC5             _if15_else:
1203   0BC5             ; if(*format_p == 'x') 
1204   0BC5             _if16_cond:
1205   0BC5 FA FD FF      lea d, [bp + -3] ; $format_p
1206   0BC8 2A            mov b, [d]
1207   0BC9 38 00 00      mov c, 0
1208   0BCC 74            mov d, b
1209   0BCD 32            mov bl, [d]
1210   0BCE A7 00         mov bh, 0
1211   0BD0 38 00 00      mov c, 0
1212   0BD3             ; --- START RELATIONAL
1213   0BD3 D7            push a
1214   0BD4 11            mov a, b
1215   0BD5 FD 2E 78 00   mov32 cb, $00000078
1215   0BD9 00 00 
1216   0BDB B0            cmp a, b
1217   0BDC FD 71         seq ; ==
1218   0BDE E4            pop a
1219   0BDF             ; --- END RELATIONAL
1220   0BDF C0 00 00      cmp b, 0
1221   0BE2 C6 03 0C      je _if16_else
1222   0BE5             _if16_TRUE:
1223   0BE5             ; printx32(*(long int *)p); 
1224   0BE5             ; --- START FUNCTION CALL
1225   0BE5 FA FF FF      lea d, [bp + -1] ; $p
1226   0BE8 2A            mov b, [d]
1227   0BE9 38 00 00      mov c, 0
1228   0BEC 74            mov d, b
1229   0BED 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1230   0BF0 FD 39         mov c, b ; And place it into C
1231   0BF2 2A            mov b, [d] ; Lower Word in B
1232   0BF3 12            mov a, c
1233   0BF4 FD AA         swp a
1234   0BF6 D7            push a
1235   0BF7 FD AB         swp b
1236   0BF9 D8            push b
1237   0BFA 07 E4 13      call printx32
1238   0BFD 51 04 00      add sp, 4
1239   0C00             ; --- END FUNCTION CALL
1240   0C00 0A 0F 0C      jmp _if16_exit
1241   0C03             _if16_else:
1242   0C03             ; err("Unexpected format in printf."); 
1243   0C03             ; --- START FUNCTION CALL
1244   0C03 26 DB 27      mov b, _s6 ; "Unexpected format in printf."
1245   0C06 FD AB         swp b
1246   0C08 D8            push b
1247   0C09 07 CF 13      call err
1248   0C0C 51 02 00      add sp, 2
1249   0C0F             ; --- END FUNCTION CALL
1250   0C0F             _if16_exit:
1251   0C0F             _if15_exit:
1252   0C0F             _if14_exit:
1253   0C0F             ; p = p + 4; 
1254   0C0F FA FF FF      lea d, [bp + -1] ; $p
1255   0C12 DA            push d
1256   0C13 FA FF FF      lea d, [bp + -1] ; $p
1257   0C16 2A            mov b, [d]
1258   0C17 38 00 00      mov c, 0
1259   0C1A             ; --- START TERMS
1260   0C1A D7            push a
1261   0C1B 11            mov a, b
1262   0C1C FD 2E 04 00   mov32 cb, $00000004
1262   0C20 00 00 
1263   0C22 56            add b, a
1264   0C23 E4            pop a
1265   0C24             ; --- END TERMS
1266   0C24 E7            pop d
1267   0C25 FD 43         mov [d], b
1268   0C27             ; break; 
1269   0C27 0A 04 0D      jmp _switch13_exit ; case break
1270   0C2A             _switch13_case2:
1271   0C2A             _switch13_case3:
1272   0C2A             ; print_signed(*(int*)p); 
1273   0C2A             ; --- START FUNCTION CALL
1274   0C2A FA FF FF      lea d, [bp + -1] ; $p
1275   0C2D 2A            mov b, [d]
1276   0C2E 38 00 00      mov c, 0
1277   0C31 74            mov d, b
1278   0C32 2A            mov b, [d]
1279   0C33 38 00 00      mov c, 0
1280   0C36 FD AB         swp b
1281   0C38 D8            push b
1282   0C39 07 D8 15      call print_signed
1283   0C3C 51 02 00      add sp, 2
1284   0C3F             ; --- END FUNCTION CALL
1285   0C3F             ; p = p + 2; 
1286   0C3F FA FF FF      lea d, [bp + -1] ; $p
1287   0C42 DA            push d
1288   0C43 FA FF FF      lea d, [bp + -1] ; $p
1289   0C46 2A            mov b, [d]
1290   0C47 38 00 00      mov c, 0
1291   0C4A             ; --- START TERMS
1292   0C4A D7            push a
1293   0C4B 11            mov a, b
1294   0C4C FD 2E 02 00   mov32 cb, $00000002
1294   0C50 00 00 
1295   0C52 56            add b, a
1296   0C53 E4            pop a
1297   0C54             ; --- END TERMS
1298   0C54 E7            pop d
1299   0C55 FD 43         mov [d], b
1300   0C57             ; break; 
1301   0C57 0A 04 0D      jmp _switch13_exit ; case break
1302   0C5A             _switch13_case4:
1303   0C5A             ; print_unsigned(*(unsigned int*)p); 
1304   0C5A             ; --- START FUNCTION CALL
1305   0C5A FA FF FF      lea d, [bp + -1] ; $p
1306   0C5D 2A            mov b, [d]
1307   0C5E 38 00 00      mov c, 0
1308   0C61 74            mov d, b
1309   0C62 2A            mov b, [d]
1310   0C63 38 00 00      mov c, 0
1311   0C66 FD AB         swp b
1312   0C68 D8            push b
1313   0C69 07 F4 1A      call print_unsigned
1314   0C6C 51 02 00      add sp, 2
1315   0C6F             ; --- END FUNCTION CALL
1316   0C6F             ; p = p + 2; 
1317   0C6F FA FF FF      lea d, [bp + -1] ; $p
1318   0C72 DA            push d
1319   0C73 FA FF FF      lea d, [bp + -1] ; $p
1320   0C76 2A            mov b, [d]
1321   0C77 38 00 00      mov c, 0
1322   0C7A             ; --- START TERMS
1323   0C7A D7            push a
1324   0C7B 11            mov a, b
1325   0C7C FD 2E 02 00   mov32 cb, $00000002
1325   0C80 00 00 
1326   0C82 56            add b, a
1327   0C83 E4            pop a
1328   0C84             ; --- END TERMS
1329   0C84 E7            pop d
1330   0C85 FD 43         mov [d], b
1331   0C87             ; break; 
1332   0C87 0A 04 0D      jmp _switch13_exit ; case break
1333   0C8A             _switch13_case5:
1334   0C8A             
1335   0C8A             ; --- BEGIN INLINE ASM SEGMENT
1336   0C8A FA FF FF      lea d, [bp + -1] ; $p
1337   0C8D FD 2A         mov d, [d]
1338   0C8F 2A            mov b, [d]
1339   0C90 07 6D 21      call print_u16x
1340   0C93             ; --- END INLINE ASM SEGMENT
1341   0C93             
1342   0C93             ; p = p + 2; 
1343   0C93 FA FF FF      lea d, [bp + -1] ; $p
1344   0C96 DA            push d
1345   0C97 FA FF FF      lea d, [bp + -1] ; $p
1346   0C9A 2A            mov b, [d]
1347   0C9B 38 00 00      mov c, 0
1348   0C9E             ; --- START TERMS
1349   0C9E D7            push a
1350   0C9F 11            mov a, b
1351   0CA0 FD 2E 02 00   mov32 cb, $00000002
1351   0CA4 00 00 
1352   0CA6 56            add b, a
1353   0CA7 E4            pop a
1354   0CA8             ; --- END TERMS
1355   0CA8 E7            pop d
1356   0CA9 FD 43         mov [d], b
1357   0CAB             ; break; 
1358   0CAB 0A 04 0D      jmp _switch13_exit ; case break
1359   0CAE             _switch13_case6:
1360   0CAE             
1361   0CAE             ; --- BEGIN INLINE ASM SEGMENT
1362   0CAE FA FF FF      lea d, [bp + -1] ; $p
1363   0CB1 FD 2A         mov d, [d]
1364   0CB3 1E            mov al, [d]
1365   0CB4 23            mov ah, al
1366   0CB5 07 CB 1F      call _putchar
1367   0CB8             ; --- END INLINE ASM SEGMENT
1368   0CB8             
1369   0CB8             ; p = p + 1; 
1370   0CB8 FA FF FF      lea d, [bp + -1] ; $p
1371   0CBB DA            push d
1372   0CBC FA FF FF      lea d, [bp + -1] ; $p
1373   0CBF 2A            mov b, [d]
1374   0CC0 38 00 00      mov c, 0
1375   0CC3             ; --- START TERMS
1376   0CC3 D7            push a
1377   0CC4 11            mov a, b
1378   0CC5 FD 2E 01 00   mov32 cb, $00000001
1378   0CC9 00 00 
1379   0CCB 56            add b, a
1380   0CCC E4            pop a
1381   0CCD             ; --- END TERMS
1382   0CCD E7            pop d
1383   0CCE FD 43         mov [d], b
1384   0CD0             ; break; 
1385   0CD0 0A 04 0D      jmp _switch13_exit ; case break
1386   0CD3             _switch13_case7:
1387   0CD3             
1388   0CD3             ; --- BEGIN INLINE ASM SEGMENT
1389   0CD3 FA FF FF      lea d, [bp + -1] ; $p
1390   0CD6 FD 2A         mov d, [d]
1391   0CD8 FD 2A         mov d, [d]
1392   0CDA 07 15 21      call _puts
1393   0CDD             ; --- END INLINE ASM SEGMENT
1394   0CDD             
1395   0CDD             ; p = p + 2; 
1396   0CDD FA FF FF      lea d, [bp + -1] ; $p
1397   0CE0 DA            push d
1398   0CE1 FA FF FF      lea d, [bp + -1] ; $p
1399   0CE4 2A            mov b, [d]
1400   0CE5 38 00 00      mov c, 0
1401   0CE8             ; --- START TERMS
1402   0CE8 D7            push a
1403   0CE9 11            mov a, b
1404   0CEA FD 2E 02 00   mov32 cb, $00000002
1404   0CEE 00 00 
1405   0CF0 56            add b, a
1406   0CF1 E4            pop a
1407   0CF2             ; --- END TERMS
1408   0CF2 E7            pop d
1409   0CF3 FD 43         mov [d], b
1410   0CF5             ; break; 
1411   0CF5 0A 04 0D      jmp _switch13_exit ; case break
1412   0CF8             _switch13_default:
1413   0CF8             ; print("Error: Unknown argument type.\n"); 
1414   0CF8             ; --- START FUNCTION CALL
1415   0CF8 26 F8 27      mov b, _s7 ; "Error: Unknown argument type.\n"
1416   0CFB FD AB         swp b
1417   0CFD D8            push b
1418   0CFE 07 0A 1E      call print
1419   0D01 51 02 00      add sp, 2
1420   0D04             ; --- END FUNCTION CALL
1421   0D04             _switch13_exit:
1422   0D04             ; format_p++; 
1423   0D04 FA FD FF      lea d, [bp + -3] ; $format_p
1424   0D07 2A            mov b, [d]
1425   0D08 38 00 00      mov c, 0
1426   0D0B FD 77         inc b
1427   0D0D FA FD FF      lea d, [bp + -3] ; $format_p
1428   0D10 FD 43         mov [d], b
1429   0D12 FD 7D         dec b
1430   0D14 0A 3C 0D      jmp _if12_exit
1431   0D17             _if12_else:
1432   0D17             ; putchar(*format_p); 
1433   0D17             ; --- START FUNCTION CALL
1434   0D17 FA FD FF      lea d, [bp + -3] ; $format_p
1435   0D1A 2A            mov b, [d]
1436   0D1B 38 00 00      mov c, 0
1437   0D1E 74            mov d, b
1438   0D1F 32            mov bl, [d]
1439   0D20 A7 00         mov bh, 0
1440   0D22 38 00 00      mov c, 0
1441   0D25 DD            push bl
1442   0D26 07 BC 1D      call putchar
1443   0D29 51 01 00      add sp, 1
1444   0D2C             ; --- END FUNCTION CALL
1445   0D2C             ; format_p++; 
1446   0D2C FA FD FF      lea d, [bp + -3] ; $format_p
1447   0D2F 2A            mov b, [d]
1448   0D30 38 00 00      mov c, 0
1449   0D33 FD 77         inc b
1450   0D35 FA FD FF      lea d, [bp + -3] ; $format_p
1451   0D38 FD 43         mov [d], b
1452   0D3A FD 7D         dec b
1453   0D3C             _if12_exit:
1454   0D3C             _if11_exit:
1455   0D3C             _for10_update:
1456   0D3C 0A 8F 0A      jmp _for10_cond
1457   0D3F             _for10_exit:
1458   0D3F F9            leave
1459   0D40 09            ret
1460   0D41             
1461   0D41             scanf:
1462   0D41 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1463   0D44             ; char *p, *format_p; 
1464   0D44 52 02 00      sub sp, 2
1465   0D47 52 02 00      sub sp, 2
1466   0D4A             ; char c; 
1467   0D4A 52 01 00      sub sp, 1
1468   0D4D             ; int i; 
1469   0D4D 52 02 00      sub sp, 2
1470   0D50             ; char input_string[  512                    ]; 
1471   0D50 52 00 02      sub sp, 512
1472   0D53             ; format_p = format; 
1473   0D53 FA FD FF      lea d, [bp + -3] ; $format_p
1474   0D56 DA            push d
1475   0D57 FA 05 00      lea d, [bp + 5] ; $format
1476   0D5A 2A            mov b, [d]
1477   0D5B 38 00 00      mov c, 0
1478   0D5E E7            pop d
1479   0D5F FD 43         mov [d], b
1480   0D61             ; p = &format + 2; 
1481   0D61 FA FF FF      lea d, [bp + -1] ; $p
1482   0D64 DA            push d
1483   0D65 FA 05 00      lea d, [bp + 5] ; $format
1484   0D68 2D            mov b, d
1485   0D69             ; --- START TERMS
1486   0D69 D7            push a
1487   0D6A 11            mov a, b
1488   0D6B FD 2E 02 00   mov32 cb, $00000002
1488   0D6F 00 00 
1489   0D71 56            add b, a
1490   0D72 E4            pop a
1491   0D73             ; --- END TERMS
1492   0D73 E7            pop d
1493   0D74 FD 43         mov [d], b
1494   0D76             ; for(;;){ 
1495   0D76             _for17_init:
1496   0D76             _for17_cond:
1497   0D76             _for17_block:
1498   0D76             ; if(!*format_p) break; 
1499   0D76             _if18_cond:
1500   0D76 FA FD FF      lea d, [bp + -3] ; $format_p
1501   0D79 2A            mov b, [d]
1502   0D7A 38 00 00      mov c, 0
1503   0D7D 74            mov d, b
1504   0D7E 32            mov bl, [d]
1505   0D7F A7 00         mov bh, 0
1506   0D81 38 00 00      mov c, 0
1507   0D84 C0 00 00      cmp b, 0
1508   0D87 FD 71         seq ; !
1509   0D89 C0 00 00      cmp b, 0
1510   0D8C C6 95 0D      je _if18_else
1511   0D8F             _if18_TRUE:
1512   0D8F             ; break; 
1513   0D8F 0A 1D 10      jmp _for17_exit ; for break
1514   0D92 0A 1A 10      jmp _if18_exit
1515   0D95             _if18_else:
1516   0D95             ; if(*format_p == '%'){ 
1517   0D95             _if19_cond:
1518   0D95 FA FD FF      lea d, [bp + -3] ; $format_p
1519   0D98 2A            mov b, [d]
1520   0D99 38 00 00      mov c, 0
1521   0D9C 74            mov d, b
1522   0D9D 32            mov bl, [d]
1523   0D9E A7 00         mov bh, 0
1524   0DA0 38 00 00      mov c, 0
1525   0DA3             ; --- START RELATIONAL
1526   0DA3 D7            push a
1527   0DA4 11            mov a, b
1528   0DA5 FD 2E 25 00   mov32 cb, $00000025
1528   0DA9 00 00 
1529   0DAB B0            cmp a, b
1530   0DAC FD 71         seq ; ==
1531   0DAE E4            pop a
1532   0DAF             ; --- END RELATIONAL
1533   0DAF C0 00 00      cmp b, 0
1534   0DB2 C6 F5 0F      je _if19_else
1535   0DB5             _if19_TRUE:
1536   0DB5             ; format_p++; 
1537   0DB5 FA FD FF      lea d, [bp + -3] ; $format_p
1538   0DB8 2A            mov b, [d]
1539   0DB9 38 00 00      mov c, 0
1540   0DBC FD 77         inc b
1541   0DBE FA FD FF      lea d, [bp + -3] ; $format_p
1542   0DC1 FD 43         mov [d], b
1543   0DC3 FD 7D         dec b
1544   0DC5             ; switch(*format_p){ 
1545   0DC5             _switch20_expr:
1546   0DC5 FA FD FF      lea d, [bp + -3] ; $format_p
1547   0DC8 2A            mov b, [d]
1548   0DC9 38 00 00      mov c, 0
1549   0DCC 74            mov d, b
1550   0DCD 32            mov bl, [d]
1551   0DCE A7 00         mov bh, 0
1552   0DD0 38 00 00      mov c, 0
1553   0DD3             _switch20_comparisons:
1554   0DD3 C1 6C         cmp bl, $6c
1555   0DD5 C6 01 0E      je _switch20_case0
1556   0DD8 C1 4C         cmp bl, $4c
1557   0DDA C6 01 0E      je _switch20_case1
1558   0DDD C1 64         cmp bl, $64
1559   0DDF C6 C0 0E      je _switch20_case2
1560   0DE2 C1 69         cmp bl, $69
1561   0DE4 C6 C0 0E      je _switch20_case3
1562   0DE7 C1 75         cmp bl, $75
1563   0DE9 C6 F9 0E      je _switch20_case4
1564   0DEC C1 78         cmp bl, $78
1565   0DEE C6 32 0F      je _switch20_case5
1566   0DF1 C1 63         cmp bl, $63
1567   0DF3 C6 4D 0F      je _switch20_case6
1568   0DF6 C1 73         cmp bl, $73
1569   0DF8 C6 8F 0F      je _switch20_case7
1570   0DFB 0A D6 0F      jmp _switch20_default
1571   0DFE 0A E2 0F      jmp _switch20_exit
1572   0E01             _switch20_case0:
1573   0E01             _switch20_case1:
1574   0E01             ; format_p++; 
1575   0E01 FA FD FF      lea d, [bp + -3] ; $format_p
1576   0E04 2A            mov b, [d]
1577   0E05 38 00 00      mov c, 0
1578   0E08 FD 77         inc b
1579   0E0A FA FD FF      lea d, [bp + -3] ; $format_p
1580   0E0D FD 43         mov [d], b
1581   0E0F FD 7D         dec b
1582   0E11             ; if(*format_p == 'd' || *format_p == 'i'); 
1583   0E11             _if21_cond:
1584   0E11 FA FD FF      lea d, [bp + -3] ; $format_p
1585   0E14 2A            mov b, [d]
1586   0E15 38 00 00      mov c, 0
1587   0E18 74            mov d, b
1588   0E19 32            mov bl, [d]
1589   0E1A A7 00         mov bh, 0
1590   0E1C 38 00 00      mov c, 0
1591   0E1F             ; --- START RELATIONAL
1592   0E1F D7            push a
1593   0E20 11            mov a, b
1594   0E21 FD 2E 64 00   mov32 cb, $00000064
1594   0E25 00 00 
1595   0E27 B0            cmp a, b
1596   0E28 FD 71         seq ; ==
1597   0E2A E4            pop a
1598   0E2B             ; --- END RELATIONAL
1599   0E2B             ; --- START LOGICAL OR
1600   0E2B D7            push a
1601   0E2C 11            mov a, b
1602   0E2D FA FD FF      lea d, [bp + -3] ; $format_p
1603   0E30 2A            mov b, [d]
1604   0E31 38 00 00      mov c, 0
1605   0E34 74            mov d, b
1606   0E35 32            mov bl, [d]
1607   0E36 A7 00         mov bh, 0
1608   0E38 38 00 00      mov c, 0
1609   0E3B             ; --- START RELATIONAL
1610   0E3B D7            push a
1611   0E3C 11            mov a, b
1612   0E3D FD 2E 69 00   mov32 cb, $00000069
1612   0E41 00 00 
1613   0E43 B0            cmp a, b
1614   0E44 FD 71         seq ; ==
1615   0E46 E4            pop a
1616   0E47             ; --- END RELATIONAL
1617   0E47 FD A8         sor a, b ; ||
1618   0E49 E4            pop a
1619   0E4A             ; --- END LOGICAL OR
1620   0E4A C0 00 00      cmp b, 0
1621   0E4D C6 53 0E      je _if21_else
1622   0E50             _if21_TRUE:
1623   0E50             ; ; 
1624   0E50 0A A5 0E      jmp _if21_exit
1625   0E53             _if21_else:
1626   0E53             ; if(*format_p == 'u'); 
1627   0E53             _if22_cond:
1628   0E53 FA FD FF      lea d, [bp + -3] ; $format_p
1629   0E56 2A            mov b, [d]
1630   0E57 38 00 00      mov c, 0
1631   0E5A 74            mov d, b
1632   0E5B 32            mov bl, [d]
1633   0E5C A7 00         mov bh, 0
1634   0E5E 38 00 00      mov c, 0
1635   0E61             ; --- START RELATIONAL
1636   0E61 D7            push a
1637   0E62 11            mov a, b
1638   0E63 FD 2E 75 00   mov32 cb, $00000075
1638   0E67 00 00 
1639   0E69 B0            cmp a, b
1640   0E6A FD 71         seq ; ==
1641   0E6C E4            pop a
1642   0E6D             ; --- END RELATIONAL
1643   0E6D C0 00 00      cmp b, 0
1644   0E70 C6 76 0E      je _if22_else
1645   0E73             _if22_TRUE:
1646   0E73             ; ; 
1647   0E73 0A A5 0E      jmp _if22_exit
1648   0E76             _if22_else:
1649   0E76             ; if(*format_p == 'x'); 
1650   0E76             _if23_cond:
1651   0E76 FA FD FF      lea d, [bp + -3] ; $format_p
1652   0E79 2A            mov b, [d]
1653   0E7A 38 00 00      mov c, 0
1654   0E7D 74            mov d, b
1655   0E7E 32            mov bl, [d]
1656   0E7F A7 00         mov bh, 0
1657   0E81 38 00 00      mov c, 0
1658   0E84             ; --- START RELATIONAL
1659   0E84 D7            push a
1660   0E85 11            mov a, b
1661   0E86 FD 2E 78 00   mov32 cb, $00000078
1661   0E8A 00 00 
1662   0E8C B0            cmp a, b
1663   0E8D FD 71         seq ; ==
1664   0E8F E4            pop a
1665   0E90             ; --- END RELATIONAL
1666   0E90 C0 00 00      cmp b, 0
1667   0E93 C6 99 0E      je _if23_else
1668   0E96             _if23_TRUE:
1669   0E96             ; ; 
1670   0E96 0A A5 0E      jmp _if23_exit
1671   0E99             _if23_else:
1672   0E99             ; err("Unexpected format in printf."); 
1673   0E99             ; --- START FUNCTION CALL
1674   0E99 26 DB 27      mov b, _s6 ; "Unexpected format in printf."
1675   0E9C FD AB         swp b
1676   0E9E D8            push b
1677   0E9F 07 CF 13      call err
1678   0EA2 51 02 00      add sp, 2
1679   0EA5             ; --- END FUNCTION CALL
1680   0EA5             _if23_exit:
1681   0EA5             _if22_exit:
1682   0EA5             _if21_exit:
1683   0EA5             ; p = p + 4; 
1684   0EA5 FA FF FF      lea d, [bp + -1] ; $p
1685   0EA8 DA            push d
1686   0EA9 FA FF FF      lea d, [bp + -1] ; $p
1687   0EAC 2A            mov b, [d]
1688   0EAD 38 00 00      mov c, 0
1689   0EB0             ; --- START TERMS
1690   0EB0 D7            push a
1691   0EB1 11            mov a, b
1692   0EB2 FD 2E 04 00   mov32 cb, $00000004
1692   0EB6 00 00 
1693   0EB8 56            add b, a
1694   0EB9 E4            pop a
1695   0EBA             ; --- END TERMS
1696   0EBA E7            pop d
1697   0EBB FD 43         mov [d], b
1698   0EBD             ; break; 
1699   0EBD 0A E2 0F      jmp _switch20_exit ; case break
1700   0EC0             _switch20_case2:
1701   0EC0             _switch20_case3:
1702   0EC0             ; i = scann(); 
1703   0EC0 FA FA FF      lea d, [bp + -6] ; $i
1704   0EC3 DA            push d
1705   0EC4             ; --- START FUNCTION CALL
1706   0EC4 07 E2 1D      call scann
1707   0EC7 E7            pop d
1708   0EC8 FD 43         mov [d], b
1709   0ECA             ; **(int **)p = i; 
1710   0ECA FA FF FF      lea d, [bp + -1] ; $p
1711   0ECD 2A            mov b, [d]
1712   0ECE 38 00 00      mov c, 0
1713   0ED1 74            mov d, b
1714   0ED2 2A            mov b, [d]
1715   0ED3 D8            push b
1716   0ED4 FA FA FF      lea d, [bp + -6] ; $i
1717   0ED7 2A            mov b, [d]
1718   0ED8 38 00 00      mov c, 0
1719   0EDB E7            pop d
1720   0EDC FD 43         mov [d], b
1721   0EDE             ; p = p + 2; 
1722   0EDE FA FF FF      lea d, [bp + -1] ; $p
1723   0EE1 DA            push d
1724   0EE2 FA FF FF      lea d, [bp + -1] ; $p
1725   0EE5 2A            mov b, [d]
1726   0EE6 38 00 00      mov c, 0
1727   0EE9             ; --- START TERMS
1728   0EE9 D7            push a
1729   0EEA 11            mov a, b
1730   0EEB FD 2E 02 00   mov32 cb, $00000002
1730   0EEF 00 00 
1731   0EF1 56            add b, a
1732   0EF2 E4            pop a
1733   0EF3             ; --- END TERMS
1734   0EF3 E7            pop d
1735   0EF4 FD 43         mov [d], b
1736   0EF6             ; break; 
1737   0EF6 0A E2 0F      jmp _switch20_exit ; case break
1738   0EF9             _switch20_case4:
1739   0EF9             ; i = scann(); 
1740   0EF9 FA FA FF      lea d, [bp + -6] ; $i
1741   0EFC DA            push d
1742   0EFD             ; --- START FUNCTION CALL
1743   0EFD 07 E2 1D      call scann
1744   0F00 E7            pop d
1745   0F01 FD 43         mov [d], b
1746   0F03             ; **(int **)p = i; 
1747   0F03 FA FF FF      lea d, [bp + -1] ; $p
1748   0F06 2A            mov b, [d]
1749   0F07 38 00 00      mov c, 0
1750   0F0A 74            mov d, b
1751   0F0B 2A            mov b, [d]
1752   0F0C D8            push b
1753   0F0D FA FA FF      lea d, [bp + -6] ; $i
1754   0F10 2A            mov b, [d]
1755   0F11 38 00 00      mov c, 0
1756   0F14 E7            pop d
1757   0F15 FD 43         mov [d], b
1758   0F17             ; p = p + 2; 
1759   0F17 FA FF FF      lea d, [bp + -1] ; $p
1760   0F1A DA            push d
1761   0F1B FA FF FF      lea d, [bp + -1] ; $p
1762   0F1E 2A            mov b, [d]
1763   0F1F 38 00 00      mov c, 0
1764   0F22             ; --- START TERMS
1765   0F22 D7            push a
1766   0F23 11            mov a, b
1767   0F24 FD 2E 02 00   mov32 cb, $00000002
1767   0F28 00 00 
1768   0F2A 56            add b, a
1769   0F2B E4            pop a
1770   0F2C             ; --- END TERMS
1771   0F2C E7            pop d
1772   0F2D FD 43         mov [d], b
1773   0F2F             ; break; 
1774   0F2F 0A E2 0F      jmp _switch20_exit ; case break
1775   0F32             _switch20_case5:
1776   0F32             ; p = p + 2; 
1777   0F32 FA FF FF      lea d, [bp + -1] ; $p
1778   0F35 DA            push d
1779   0F36 FA FF FF      lea d, [bp + -1] ; $p
1780   0F39 2A            mov b, [d]
1781   0F3A 38 00 00      mov c, 0
1782   0F3D             ; --- START TERMS
1783   0F3D D7            push a
1784   0F3E 11            mov a, b
1785   0F3F FD 2E 02 00   mov32 cb, $00000002
1785   0F43 00 00 
1786   0F45 56            add b, a
1787   0F46 E4            pop a
1788   0F47             ; --- END TERMS
1789   0F47 E7            pop d
1790   0F48 FD 43         mov [d], b
1791   0F4A             ; break; 
1792   0F4A 0A E2 0F      jmp _switch20_exit ; case break
1793   0F4D             _switch20_case6:
1794   0F4D             ; c = getchar(); 
1795   0F4D FA FC FF      lea d, [bp + -4] ; $c
1796   0F50 DA            push d
1797   0F51             ; --- START FUNCTION CALL
1798   0F51 07 C9 1D      call getchar
1799   0F54 E7            pop d
1800   0F55 FD 3E         mov [d], bl
1801   0F57             ; **(char **)p = *(char *)c; 
1802   0F57 FA FF FF      lea d, [bp + -1] ; $p
1803   0F5A 2A            mov b, [d]
1804   0F5B 38 00 00      mov c, 0
1805   0F5E 74            mov d, b
1806   0F5F 2A            mov b, [d]
1807   0F60 D8            push b
1808   0F61 FA FC FF      lea d, [bp + -4] ; $c
1809   0F64 32            mov bl, [d]
1810   0F65 A7 00         mov bh, 0
1811   0F67 38 00 00      mov c, 0
1812   0F6A 74            mov d, b
1813   0F6B 32            mov bl, [d]
1814   0F6C A7 00         mov bh, 0
1815   0F6E 38 00 00      mov c, 0
1816   0F71 E7            pop d
1817   0F72 FD 43         mov [d], b
1818   0F74             ; p = p + 1; 
1819   0F74 FA FF FF      lea d, [bp + -1] ; $p
1820   0F77 DA            push d
1821   0F78 FA FF FF      lea d, [bp + -1] ; $p
1822   0F7B 2A            mov b, [d]
1823   0F7C 38 00 00      mov c, 0
1824   0F7F             ; --- START TERMS
1825   0F7F D7            push a
1826   0F80 11            mov a, b
1827   0F81 FD 2E 01 00   mov32 cb, $00000001
1827   0F85 00 00 
1828   0F87 56            add b, a
1829   0F88 E4            pop a
1830   0F89             ; --- END TERMS
1831   0F89 E7            pop d
1832   0F8A FD 43         mov [d], b
1833   0F8C             ; break; 
1834   0F8C 0A E2 0F      jmp _switch20_exit ; case break
1835   0F8F             _switch20_case7:
1836   0F8F             ; gets(input_string); 
1837   0F8F             ; --- START FUNCTION CALL
1838   0F8F FA FA FD      lea d, [bp + -518] ; $input_string
1839   0F92 2D            mov b, d
1840   0F93 38 00 00      mov c, 0
1841   0F96 FD AB         swp b
1842   0F98 D8            push b
1843   0F99 07 BB 15      call gets
1844   0F9C 51 02 00      add sp, 2
1845   0F9F             ; --- END FUNCTION CALL
1846   0F9F             ; strcpy(*(char **)p, input_string); 
1847   0F9F             ; --- START FUNCTION CALL
1848   0F9F FA FA FD      lea d, [bp + -518] ; $input_string
1849   0FA2 2D            mov b, d
1850   0FA3 38 00 00      mov c, 0
1851   0FA6 FD AB         swp b
1852   0FA8 D8            push b
1853   0FA9 FA FF FF      lea d, [bp + -1] ; $p
1854   0FAC 2A            mov b, [d]
1855   0FAD 38 00 00      mov c, 0
1856   0FB0 74            mov d, b
1857   0FB1 2A            mov b, [d]
1858   0FB2 FD AB         swp b
1859   0FB4 D8            push b
1860   0FB5 07 32 05      call strcpy
1861   0FB8 51 04 00      add sp, 4
1862   0FBB             ; --- END FUNCTION CALL
1863   0FBB             ; p = p + 2; 
1864   0FBB FA FF FF      lea d, [bp + -1] ; $p
1865   0FBE DA            push d
1866   0FBF FA FF FF      lea d, [bp + -1] ; $p
1867   0FC2 2A            mov b, [d]
1868   0FC3 38 00 00      mov c, 0
1869   0FC6             ; --- START TERMS
1870   0FC6 D7            push a
1871   0FC7 11            mov a, b
1872   0FC8 FD 2E 02 00   mov32 cb, $00000002
1872   0FCC 00 00 
1873   0FCE 56            add b, a
1874   0FCF E4            pop a
1875   0FD0             ; --- END TERMS
1876   0FD0 E7            pop d
1877   0FD1 FD 43         mov [d], b
1878   0FD3             ; break; 
1879   0FD3 0A E2 0F      jmp _switch20_exit ; case break
1880   0FD6             _switch20_default:
1881   0FD6             ; print("Error: Unknown argument type.\n"); 
1882   0FD6             ; --- START FUNCTION CALL
1883   0FD6 26 F8 27      mov b, _s7 ; "Error: Unknown argument type.\n"
1884   0FD9 FD AB         swp b
1885   0FDB D8            push b
1886   0FDC 07 0A 1E      call print
1887   0FDF 51 02 00      add sp, 2
1888   0FE2             ; --- END FUNCTION CALL
1889   0FE2             _switch20_exit:
1890   0FE2             ; format_p++; 
1891   0FE2 FA FD FF      lea d, [bp + -3] ; $format_p
1892   0FE5 2A            mov b, [d]
1893   0FE6 38 00 00      mov c, 0
1894   0FE9 FD 77         inc b
1895   0FEB FA FD FF      lea d, [bp + -3] ; $format_p
1896   0FEE FD 43         mov [d], b
1897   0FF0 FD 7D         dec b
1898   0FF2 0A 1A 10      jmp _if19_exit
1899   0FF5             _if19_else:
1900   0FF5             ; putchar(*format_p); 
1901   0FF5             ; --- START FUNCTION CALL
1902   0FF5 FA FD FF      lea d, [bp + -3] ; $format_p
1903   0FF8 2A            mov b, [d]
1904   0FF9 38 00 00      mov c, 0
1905   0FFC 74            mov d, b
1906   0FFD 32            mov bl, [d]
1907   0FFE A7 00         mov bh, 0
1908   1000 38 00 00      mov c, 0
1909   1003 DD            push bl
1910   1004 07 BC 1D      call putchar
1911   1007 51 01 00      add sp, 1
1912   100A             ; --- END FUNCTION CALL
1913   100A             ; format_p++; 
1914   100A FA FD FF      lea d, [bp + -3] ; $format_p
1915   100D 2A            mov b, [d]
1916   100E 38 00 00      mov c, 0
1917   1011 FD 77         inc b
1918   1013 FA FD FF      lea d, [bp + -3] ; $format_p
1919   1016 FD 43         mov [d], b
1920   1018 FD 7D         dec b
1921   101A             _if19_exit:
1922   101A             _if18_exit:
1923   101A             _for17_update:
1924   101A 0A 76 0D      jmp _for17_cond
1925   101D             _for17_exit:
1926   101D F9            leave
1927   101E 09            ret
1928   101F             
1929   101F             sprintf:
1930   101F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1931   1022             ; char *p, *format_p; 
1932   1022 52 02 00      sub sp, 2
1933   1025 52 02 00      sub sp, 2
1934   1028             ; char *sp; 
1935   1028 52 02 00      sub sp, 2
1936   102B             ; sp = dest; 
1937   102B FA FB FF      lea d, [bp + -5] ; $sp
1938   102E DA            push d
1939   102F FA 05 00      lea d, [bp + 5] ; $dest
1940   1032 2A            mov b, [d]
1941   1033 38 00 00      mov c, 0
1942   1036 E7            pop d
1943   1037 FD 43         mov [d], b
1944   1039             ; format_p = format; 
1945   1039 FA FD FF      lea d, [bp + -3] ; $format_p
1946   103C DA            push d
1947   103D FA 07 00      lea d, [bp + 7] ; $format
1948   1040 2A            mov b, [d]
1949   1041 38 00 00      mov c, 0
1950   1044 E7            pop d
1951   1045 FD 43         mov [d], b
1952   1047             ; p = &format + 2; 
1953   1047 FA FF FF      lea d, [bp + -1] ; $p
1954   104A DA            push d
1955   104B FA 07 00      lea d, [bp + 7] ; $format
1956   104E 2D            mov b, d
1957   104F             ; --- START TERMS
1958   104F D7            push a
1959   1050 11            mov a, b
1960   1051 FD 2E 02 00   mov32 cb, $00000002
1960   1055 00 00 
1961   1057 56            add b, a
1962   1058 E4            pop a
1963   1059             ; --- END TERMS
1964   1059 E7            pop d
1965   105A FD 43         mov [d], b
1966   105C             ; for(;;){ 
1967   105C             _for24_init:
1968   105C             _for24_cond:
1969   105C             _for24_block:
1970   105C             ; if(!*format_p) break; 
1971   105C             _if25_cond:
1972   105C FA FD FF      lea d, [bp + -3] ; $format_p
1973   105F 2A            mov b, [d]
1974   1060 38 00 00      mov c, 0
1975   1063 74            mov d, b
1976   1064 32            mov bl, [d]
1977   1065 A7 00         mov bh, 0
1978   1067 38 00 00      mov c, 0
1979   106A C0 00 00      cmp b, 0
1980   106D FD 71         seq ; !
1981   106F C0 00 00      cmp b, 0
1982   1072 C6 7B 10      je _if25_else
1983   1075             _if25_TRUE:
1984   1075             ; break; 
1985   1075 0A A9 13      jmp _for24_exit ; for break
1986   1078 0A A6 13      jmp _if25_exit
1987   107B             _if25_else:
1988   107B             ; if(*format_p == '%'){ 
1989   107B             _if26_cond:
1990   107B FA FD FF      lea d, [bp + -3] ; $format_p
1991   107E 2A            mov b, [d]
1992   107F 38 00 00      mov c, 0
1993   1082 74            mov d, b
1994   1083 32            mov bl, [d]
1995   1084 A7 00         mov bh, 0
1996   1086 38 00 00      mov c, 0
1997   1089             ; --- START RELATIONAL
1998   1089 D7            push a
1999   108A 11            mov a, b
2000   108B FD 2E 25 00   mov32 cb, $00000025
2000   108F 00 00 
2001   1091 B0            cmp a, b
2002   1092 FD 71         seq ; ==
2003   1094 E4            pop a
2004   1095             ; --- END RELATIONAL
2005   1095 C0 00 00      cmp b, 0
2006   1098 C6 7B 13      je _if26_else
2007   109B             _if26_TRUE:
2008   109B             ; format_p++; 
2009   109B FA FD FF      lea d, [bp + -3] ; $format_p
2010   109E 2A            mov b, [d]
2011   109F 38 00 00      mov c, 0
2012   10A2 FD 77         inc b
2013   10A4 FA FD FF      lea d, [bp + -3] ; $format_p
2014   10A7 FD 43         mov [d], b
2015   10A9 FD 7D         dec b
2016   10AB             ; switch(*format_p){ 
2017   10AB             _switch27_expr:
2018   10AB FA FD FF      lea d, [bp + -3] ; $format_p
2019   10AE 2A            mov b, [d]
2020   10AF 38 00 00      mov c, 0
2021   10B2 74            mov d, b
2022   10B3 32            mov bl, [d]
2023   10B4 A7 00         mov bh, 0
2024   10B6 38 00 00      mov c, 0
2025   10B9             _switch27_comparisons:
2026   10B9 C1 6C         cmp bl, $6c
2027   10BB C6 E7 10      je _switch27_case0
2028   10BE C1 4C         cmp bl, $4c
2029   10C0 C6 E7 10      je _switch27_case1
2030   10C3 C1 64         cmp bl, $64
2031   10C5 C6 F7 11      je _switch27_case2
2032   10C8 C1 69         cmp bl, $69
2033   10CA C6 F7 11      je _switch27_case3
2034   10CD C1 75         cmp bl, $75
2035   10CF C6 43 12      je _switch27_case4
2036   10D2 C1 78         cmp bl, $78
2037   10D4 C6 8F 12      je _switch27_case5
2038   10D7 C1 63         cmp bl, $63
2039   10D9 C6 B3 12      je _switch27_case6
2040   10DC C1 73         cmp bl, $73
2041   10DE C6 F0 12      je _switch27_case7
2042   10E1 0A 5C 13      jmp _switch27_default
2043   10E4 0A 68 13      jmp _switch27_exit
2044   10E7             _switch27_case0:
2045   10E7             _switch27_case1:
2046   10E7             ; format_p++; 
2047   10E7 FA FD FF      lea d, [bp + -3] ; $format_p
2048   10EA 2A            mov b, [d]
2049   10EB 38 00 00      mov c, 0
2050   10EE FD 77         inc b
2051   10F0 FA FD FF      lea d, [bp + -3] ; $format_p
2052   10F3 FD 43         mov [d], b
2053   10F5 FD 7D         dec b
2054   10F7             ; if(*format_p == 'd' || *format_p == 'i') 
2055   10F7             _if28_cond:
2056   10F7 FA FD FF      lea d, [bp + -3] ; $format_p
2057   10FA 2A            mov b, [d]
2058   10FB 38 00 00      mov c, 0
2059   10FE 74            mov d, b
2060   10FF 32            mov bl, [d]
2061   1100 A7 00         mov bh, 0
2062   1102 38 00 00      mov c, 0
2063   1105             ; --- START RELATIONAL
2064   1105 D7            push a
2065   1106 11            mov a, b
2066   1107 FD 2E 64 00   mov32 cb, $00000064
2066   110B 00 00 
2067   110D B0            cmp a, b
2068   110E FD 71         seq ; ==
2069   1110 E4            pop a
2070   1111             ; --- END RELATIONAL
2071   1111             ; --- START LOGICAL OR
2072   1111 D7            push a
2073   1112 11            mov a, b
2074   1113 FA FD FF      lea d, [bp + -3] ; $format_p
2075   1116 2A            mov b, [d]
2076   1117 38 00 00      mov c, 0
2077   111A 74            mov d, b
2078   111B 32            mov bl, [d]
2079   111C A7 00         mov bh, 0
2080   111E 38 00 00      mov c, 0
2081   1121             ; --- START RELATIONAL
2082   1121 D7            push a
2083   1122 11            mov a, b
2084   1123 FD 2E 69 00   mov32 cb, $00000069
2084   1127 00 00 
2085   1129 B0            cmp a, b
2086   112A FD 71         seq ; ==
2087   112C E4            pop a
2088   112D             ; --- END RELATIONAL
2089   112D FD A8         sor a, b ; ||
2090   112F E4            pop a
2091   1130             ; --- END LOGICAL OR
2092   1130 C0 00 00      cmp b, 0
2093   1133 C6 54 11      je _if28_else
2094   1136             _if28_TRUE:
2095   1136             ; print_signed_long(*(long *)p); 
2096   1136             ; --- START FUNCTION CALL
2097   1136 FA FF FF      lea d, [bp + -1] ; $p
2098   1139 2A            mov b, [d]
2099   113A 38 00 00      mov c, 0
2100   113D 74            mov d, b
2101   113E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2102   1141 FD 39         mov c, b ; And place it into C
2103   1143 2A            mov b, [d] ; Lower Word in B
2104   1144 12            mov a, c
2105   1145 FD AA         swp a
2106   1147 D7            push a
2107   1148 FD AB         swp b
2108   114A D8            push b
2109   114B 07 11 17      call print_signed_long
2110   114E 51 04 00      add sp, 4
2111   1151             ; --- END FUNCTION CALL
2112   1151 0A DC 11      jmp _if28_exit
2113   1154             _if28_else:
2114   1154             ; if(*format_p == 'u') 
2115   1154             _if29_cond:
2116   1154 FA FD FF      lea d, [bp + -3] ; $format_p
2117   1157 2A            mov b, [d]
2118   1158 38 00 00      mov c, 0
2119   115B 74            mov d, b
2120   115C 32            mov bl, [d]
2121   115D A7 00         mov bh, 0
2122   115F 38 00 00      mov c, 0
2123   1162             ; --- START RELATIONAL
2124   1162 D7            push a
2125   1163 11            mov a, b
2126   1164 FD 2E 75 00   mov32 cb, $00000075
2126   1168 00 00 
2127   116A B0            cmp a, b
2128   116B FD 71         seq ; ==
2129   116D E4            pop a
2130   116E             ; --- END RELATIONAL
2131   116E C0 00 00      cmp b, 0
2132   1171 C6 92 11      je _if29_else
2133   1174             _if29_TRUE:
2134   1174             ; print_unsigned_long(*(unsigned long *)p); 
2135   1174             ; --- START FUNCTION CALL
2136   1174 FA FF FF      lea d, [bp + -1] ; $p
2137   1177 2A            mov b, [d]
2138   1178 38 00 00      mov c, 0
2139   117B 74            mov d, b
2140   117C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2141   117F FD 39         mov c, b ; And place it into C
2142   1181 2A            mov b, [d] ; Lower Word in B
2143   1182 12            mov a, c
2144   1183 FD AA         swp a
2145   1185 D7            push a
2146   1186 FD AB         swp b
2147   1188 D8            push b
2148   1189 07 80 18      call print_unsigned_long
2149   118C 51 04 00      add sp, 4
2150   118F             ; --- END FUNCTION CALL
2151   118F 0A DC 11      jmp _if29_exit
2152   1192             _if29_else:
2153   1192             ; if(*format_p == 'x') 
2154   1192             _if30_cond:
2155   1192 FA FD FF      lea d, [bp + -3] ; $format_p
2156   1195 2A            mov b, [d]
2157   1196 38 00 00      mov c, 0
2158   1199 74            mov d, b
2159   119A 32            mov bl, [d]
2160   119B A7 00         mov bh, 0
2161   119D 38 00 00      mov c, 0
2162   11A0             ; --- START RELATIONAL
2163   11A0 D7            push a
2164   11A1 11            mov a, b
2165   11A2 FD 2E 78 00   mov32 cb, $00000078
2165   11A6 00 00 
2166   11A8 B0            cmp a, b
2167   11A9 FD 71         seq ; ==
2168   11AB E4            pop a
2169   11AC             ; --- END RELATIONAL
2170   11AC C0 00 00      cmp b, 0
2171   11AF C6 D0 11      je _if30_else
2172   11B2             _if30_TRUE:
2173   11B2             ; printx32(*(long int *)p); 
2174   11B2             ; --- START FUNCTION CALL
2175   11B2 FA FF FF      lea d, [bp + -1] ; $p
2176   11B5 2A            mov b, [d]
2177   11B6 38 00 00      mov c, 0
2178   11B9 74            mov d, b
2179   11BA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2180   11BD FD 39         mov c, b ; And place it into C
2181   11BF 2A            mov b, [d] ; Lower Word in B
2182   11C0 12            mov a, c
2183   11C1 FD AA         swp a
2184   11C3 D7            push a
2185   11C4 FD AB         swp b
2186   11C6 D8            push b
2187   11C7 07 E4 13      call printx32
2188   11CA 51 04 00      add sp, 4
2189   11CD             ; --- END FUNCTION CALL
2190   11CD 0A DC 11      jmp _if30_exit
2191   11D0             _if30_else:
2192   11D0             ; err("Unexpected format in printf."); 
2193   11D0             ; --- START FUNCTION CALL
2194   11D0 26 DB 27      mov b, _s6 ; "Unexpected format in printf."
2195   11D3 FD AB         swp b
2196   11D5 D8            push b
2197   11D6 07 CF 13      call err
2198   11D9 51 02 00      add sp, 2
2199   11DC             ; --- END FUNCTION CALL
2200   11DC             _if30_exit:
2201   11DC             _if29_exit:
2202   11DC             _if28_exit:
2203   11DC             ; p = p + 4; 
2204   11DC FA FF FF      lea d, [bp + -1] ; $p
2205   11DF DA            push d
2206   11E0 FA FF FF      lea d, [bp + -1] ; $p
2207   11E3 2A            mov b, [d]
2208   11E4 38 00 00      mov c, 0
2209   11E7             ; --- START TERMS
2210   11E7 D7            push a
2211   11E8 11            mov a, b
2212   11E9 FD 2E 04 00   mov32 cb, $00000004
2212   11ED 00 00 
2213   11EF 56            add b, a
2214   11F0 E4            pop a
2215   11F1             ; --- END TERMS
2216   11F1 E7            pop d
2217   11F2 FD 43         mov [d], b
2218   11F4             ; break; 
2219   11F4 0A 68 13      jmp _switch27_exit ; case break
2220   11F7             _switch27_case2:
2221   11F7             _switch27_case3:
2222   11F7             ; sp = sp + sprint_signed(sp, *(int*)p); 
2223   11F7 FA FB FF      lea d, [bp + -5] ; $sp
2224   11FA DA            push d
2225   11FB FA FB FF      lea d, [bp + -5] ; $sp
2226   11FE 2A            mov b, [d]
2227   11FF 38 00 00      mov c, 0
2228   1202             ; --- START TERMS
2229   1202 D7            push a
2230   1203 11            mov a, b
2231   1204             ; --- START FUNCTION CALL
2232   1204 FA FF FF      lea d, [bp + -1] ; $p
2233   1207 2A            mov b, [d]
2234   1208 38 00 00      mov c, 0
2235   120B 74            mov d, b
2236   120C 2A            mov b, [d]
2237   120D 38 00 00      mov c, 0
2238   1210 FD AB         swp b
2239   1212 D8            push b
2240   1213 FA FB FF      lea d, [bp + -5] ; $sp
2241   1216 2A            mov b, [d]
2242   1217 38 00 00      mov c, 0
2243   121A FD AB         swp b
2244   121C D8            push b
2245   121D 07 F4 1B      call sprint_signed
2246   1220 51 04 00      add sp, 4
2247   1223             ; --- END FUNCTION CALL
2248   1223 56            add b, a
2249   1224 E4            pop a
2250   1225             ; --- END TERMS
2251   1225 E7            pop d
2252   1226 FD 43         mov [d], b
2253   1228             ; p = p + 2; 
2254   1228 FA FF FF      lea d, [bp + -1] ; $p
2255   122B DA            push d
2256   122C FA FF FF      lea d, [bp + -1] ; $p
2257   122F 2A            mov b, [d]
2258   1230 38 00 00      mov c, 0
2259   1233             ; --- START TERMS
2260   1233 D7            push a
2261   1234 11            mov a, b
2262   1235 FD 2E 02 00   mov32 cb, $00000002
2262   1239 00 00 
2263   123B 56            add b, a
2264   123C E4            pop a
2265   123D             ; --- END TERMS
2266   123D E7            pop d
2267   123E FD 43         mov [d], b
2268   1240             ; break; 
2269   1240 0A 68 13      jmp _switch27_exit ; case break
2270   1243             _switch27_case4:
2271   1243             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2272   1243 FA FB FF      lea d, [bp + -5] ; $sp
2273   1246 DA            push d
2274   1247 FA FB FF      lea d, [bp + -5] ; $sp
2275   124A 2A            mov b, [d]
2276   124B 38 00 00      mov c, 0
2277   124E             ; --- START TERMS
2278   124E D7            push a
2279   124F 11            mov a, b
2280   1250             ; --- START FUNCTION CALL
2281   1250 FA FF FF      lea d, [bp + -1] ; $p
2282   1253 2A            mov b, [d]
2283   1254 38 00 00      mov c, 0
2284   1257 74            mov d, b
2285   1258 2A            mov b, [d]
2286   1259 38 00 00      mov c, 0
2287   125C FD AB         swp b
2288   125E D8            push b
2289   125F FA FB FF      lea d, [bp + -5] ; $sp
2290   1262 2A            mov b, [d]
2291   1263 38 00 00      mov c, 0
2292   1266 FD AB         swp b
2293   1268 D8            push b
2294   1269 07 9C 19      call sprint_unsigned
2295   126C 51 04 00      add sp, 4
2296   126F             ; --- END FUNCTION CALL
2297   126F 56            add b, a
2298   1270 E4            pop a
2299   1271             ; --- END TERMS
2300   1271 E7            pop d
2301   1272 FD 43         mov [d], b
2302   1274             ; p = p + 2; 
2303   1274 FA FF FF      lea d, [bp + -1] ; $p
2304   1277 DA            push d
2305   1278 FA FF FF      lea d, [bp + -1] ; $p
2306   127B 2A            mov b, [d]
2307   127C 38 00 00      mov c, 0
2308   127F             ; --- START TERMS
2309   127F D7            push a
2310   1280 11            mov a, b
2311   1281 FD 2E 02 00   mov32 cb, $00000002
2311   1285 00 00 
2312   1287 56            add b, a
2313   1288 E4            pop a
2314   1289             ; --- END TERMS
2315   1289 E7            pop d
2316   128A FD 43         mov [d], b
2317   128C             ; break; 
2318   128C 0A 68 13      jmp _switch27_exit ; case break
2319   128F             _switch27_case5:
2320   128F             
2321   128F             ; --- BEGIN INLINE ASM SEGMENT
2322   128F FA FF FF      lea d, [bp + -1] ; $p
2323   1292 FD 2A         mov d, [d]
2324   1294 2A            mov b, [d]
2325   1295 07 6D 21      call print_u16x
2326   1298             ; --- END INLINE ASM SEGMENT
2327   1298             
2328   1298             ; p = p + 2; 
2329   1298 FA FF FF      lea d, [bp + -1] ; $p
2330   129B DA            push d
2331   129C FA FF FF      lea d, [bp + -1] ; $p
2332   129F 2A            mov b, [d]
2333   12A0 38 00 00      mov c, 0
2334   12A3             ; --- START TERMS
2335   12A3 D7            push a
2336   12A4 11            mov a, b
2337   12A5 FD 2E 02 00   mov32 cb, $00000002
2337   12A9 00 00 
2338   12AB 56            add b, a
2339   12AC E4            pop a
2340   12AD             ; --- END TERMS
2341   12AD E7            pop d
2342   12AE FD 43         mov [d], b
2343   12B0             ; break; 
2344   12B0 0A 68 13      jmp _switch27_exit ; case break
2345   12B3             _switch27_case6:
2346   12B3             ; *sp++ = *(char *)p; 
2347   12B3 FA FB FF      lea d, [bp + -5] ; $sp
2348   12B6 2A            mov b, [d]
2349   12B7 38 00 00      mov c, 0
2350   12BA FD 77         inc b
2351   12BC FA FB FF      lea d, [bp + -5] ; $sp
2352   12BF FD 43         mov [d], b
2353   12C1 FD 7D         dec b
2354   12C3 D8            push b
2355   12C4 FA FF FF      lea d, [bp + -1] ; $p
2356   12C7 2A            mov b, [d]
2357   12C8 38 00 00      mov c, 0
2358   12CB 74            mov d, b
2359   12CC 32            mov bl, [d]
2360   12CD A7 00         mov bh, 0
2361   12CF 38 00 00      mov c, 0
2362   12D2 E7            pop d
2363   12D3 FD 3E         mov [d], bl
2364   12D5             ; p = p + 1; 
2365   12D5 FA FF FF      lea d, [bp + -1] ; $p
2366   12D8 DA            push d
2367   12D9 FA FF FF      lea d, [bp + -1] ; $p
2368   12DC 2A            mov b, [d]
2369   12DD 38 00 00      mov c, 0
2370   12E0             ; --- START TERMS
2371   12E0 D7            push a
2372   12E1 11            mov a, b
2373   12E2 FD 2E 01 00   mov32 cb, $00000001
2373   12E6 00 00 
2374   12E8 56            add b, a
2375   12E9 E4            pop a
2376   12EA             ; --- END TERMS
2377   12EA E7            pop d
2378   12EB FD 43         mov [d], b
2379   12ED             ; break; 
2380   12ED 0A 68 13      jmp _switch27_exit ; case break
2381   12F0             _switch27_case7:
2382   12F0             ; int len = strlen(*(char **)p); 
2383   12F0 52 02 00      sub sp, 2
2384   12F3             ; --- START LOCAL VAR INITIALIZATION
2385   12F3 FA F9 FF      lea d, [bp + -7] ; $len
2386   12F6 DA            push d
2387   12F7             ; --- START FUNCTION CALL
2388   12F7 FA FF FF      lea d, [bp + -1] ; $p
2389   12FA 2A            mov b, [d]
2390   12FB 38 00 00      mov c, 0
2391   12FE 74            mov d, b
2392   12FF 2A            mov b, [d]
2393   1300 FD AB         swp b
2394   1302 D8            push b
2395   1303 07 18 07      call strlen
2396   1306 51 02 00      add sp, 2
2397   1309             ; --- END FUNCTION CALL
2398   1309 E7            pop d
2399   130A FD 43         mov [d], b
2400   130C             ; --- END LOCAL VAR INITIALIZATION
2401   130C             ; strcpy(sp, *(char **)p); 
2402   130C             ; --- START FUNCTION CALL
2403   130C FA FF FF      lea d, [bp + -1] ; $p
2404   130F 2A            mov b, [d]
2405   1310 38 00 00      mov c, 0
2406   1313 74            mov d, b
2407   1314 2A            mov b, [d]
2408   1315 FD AB         swp b
2409   1317 D8            push b
2410   1318 FA FB FF      lea d, [bp + -5] ; $sp
2411   131B 2A            mov b, [d]
2412   131C 38 00 00      mov c, 0
2413   131F FD AB         swp b
2414   1321 D8            push b
2415   1322 07 32 05      call strcpy
2416   1325 51 04 00      add sp, 4
2417   1328             ; --- END FUNCTION CALL
2418   1328             ; sp = sp + len; 
2419   1328 FA FB FF      lea d, [bp + -5] ; $sp
2420   132B DA            push d
2421   132C FA FB FF      lea d, [bp + -5] ; $sp
2422   132F 2A            mov b, [d]
2423   1330 38 00 00      mov c, 0
2424   1333             ; --- START TERMS
2425   1333 D7            push a
2426   1334 11            mov a, b
2427   1335 FA F9 FF      lea d, [bp + -7] ; $len
2428   1338 2A            mov b, [d]
2429   1339 38 00 00      mov c, 0
2430   133C 56            add b, a
2431   133D E4            pop a
2432   133E             ; --- END TERMS
2433   133E E7            pop d
2434   133F FD 43         mov [d], b
2435   1341             ; p = p + 2; 
2436   1341 FA FF FF      lea d, [bp + -1] ; $p
2437   1344 DA            push d
2438   1345 FA FF FF      lea d, [bp + -1] ; $p
2439   1348 2A            mov b, [d]
2440   1349 38 00 00      mov c, 0
2441   134C             ; --- START TERMS
2442   134C D7            push a
2443   134D 11            mov a, b
2444   134E FD 2E 02 00   mov32 cb, $00000002
2444   1352 00 00 
2445   1354 56            add b, a
2446   1355 E4            pop a
2447   1356             ; --- END TERMS
2448   1356 E7            pop d
2449   1357 FD 43         mov [d], b
2450   1359             ; break; 
2451   1359 0A 68 13      jmp _switch27_exit ; case break
2452   135C             _switch27_default:
2453   135C             ; print("Error: Unknown argument type.\n"); 
2454   135C             ; --- START FUNCTION CALL
2455   135C 26 F8 27      mov b, _s7 ; "Error: Unknown argument type.\n"
2456   135F FD AB         swp b
2457   1361 D8            push b
2458   1362 07 0A 1E      call print
2459   1365 51 02 00      add sp, 2
2460   1368             ; --- END FUNCTION CALL
2461   1368             _switch27_exit:
2462   1368             ; format_p++; 
2463   1368 FA FD FF      lea d, [bp + -3] ; $format_p
2464   136B 2A            mov b, [d]
2465   136C 38 00 00      mov c, 0
2466   136F FD 77         inc b
2467   1371 FA FD FF      lea d, [bp + -3] ; $format_p
2468   1374 FD 43         mov [d], b
2469   1376 FD 7D         dec b
2470   1378 0A A6 13      jmp _if26_exit
2471   137B             _if26_else:
2472   137B             ; *sp++ = *format_p++; 
2473   137B FA FB FF      lea d, [bp + -5] ; $sp
2474   137E 2A            mov b, [d]
2475   137F 38 00 00      mov c, 0
2476   1382 FD 77         inc b
2477   1384 FA FB FF      lea d, [bp + -5] ; $sp
2478   1387 FD 43         mov [d], b
2479   1389 FD 7D         dec b
2480   138B D8            push b
2481   138C FA FD FF      lea d, [bp + -3] ; $format_p
2482   138F 2A            mov b, [d]
2483   1390 38 00 00      mov c, 0
2484   1393 FD 77         inc b
2485   1395 FA FD FF      lea d, [bp + -3] ; $format_p
2486   1398 FD 43         mov [d], b
2487   139A FD 7D         dec b
2488   139C 74            mov d, b
2489   139D 32            mov bl, [d]
2490   139E A7 00         mov bh, 0
2491   13A0 38 00 00      mov c, 0
2492   13A3 E7            pop d
2493   13A4 FD 3E         mov [d], bl
2494   13A6             _if26_exit:
2495   13A6             _if25_exit:
2496   13A6             _for24_update:
2497   13A6 0A 5C 10      jmp _for24_cond
2498   13A9             _for24_exit:
2499   13A9             ; *sp = '\0'; 
2500   13A9 FA FB FF      lea d, [bp + -5] ; $sp
2501   13AC 2A            mov b, [d]
2502   13AD 38 00 00      mov c, 0
2503   13B0 D8            push b
2504   13B1 FD 2E 00 00   mov32 cb, $00000000
2504   13B5 00 00 
2505   13B7 E7            pop d
2506   13B8 FD 3E         mov [d], bl
2507   13BA             ; return sp - dest; // return total number of chars written 
2508   13BA FA FB FF      lea d, [bp + -5] ; $sp
2509   13BD 2A            mov b, [d]
2510   13BE 38 00 00      mov c, 0
2511   13C1             ; --- START TERMS
2512   13C1 D7            push a
2513   13C2 11            mov a, b
2514   13C3 FA 05 00      lea d, [bp + 5] ; $dest
2515   13C6 2A            mov b, [d]
2516   13C7 38 00 00      mov c, 0
2517   13CA 60            sub a, b
2518   13CB 27            mov b, a
2519   13CC E4            pop a
2520   13CD             ; --- END TERMS
2521   13CD F9            leave
2522   13CE 09            ret
2523   13CF             
2524   13CF             err:
2525   13CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2526   13D2             ; print(e); 
2527   13D2             ; --- START FUNCTION CALL
2528   13D2 FA 05 00      lea d, [bp + 5] ; $e
2529   13D5 2A            mov b, [d]
2530   13D6 38 00 00      mov c, 0
2531   13D9 FD AB         swp b
2532   13DB D8            push b
2533   13DC 07 0A 1E      call print
2534   13DF 51 02 00      add sp, 2
2535   13E2             ; --- END FUNCTION CALL
2536   13E2 F9            leave
2537   13E3 09            ret
2538   13E4             
2539   13E4             printx32:
2540   13E4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2541   13E7             
2542   13E7             ; --- BEGIN INLINE ASM SEGMENT
2543   13E7 FA 05 00      lea d, [bp + 5] ; $hex
2544   13EA 2B 02 00      mov b, [d+2]
2545   13ED 07 6D 21      call print_u16x
2546   13F0 2A            mov b, [d]
2547   13F1 07 6D 21      call print_u16x
2548   13F4             ; --- END INLINE ASM SEGMENT
2549   13F4             
2550   13F4 F9            leave
2551   13F5 09            ret
2552   13F6             
2553   13F6             printx16:
2554   13F6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2555   13F9             
2556   13F9             ; --- BEGIN INLINE ASM SEGMENT
2557   13F9 FA 05 00      lea d, [bp + 5] ; $hex
2558   13FC 2A            mov b, [d]
2559   13FD 07 6D 21      call print_u16x
2560   1400             ; --- END INLINE ASM SEGMENT
2561   1400             
2562   1400 F9            leave
2563   1401 09            ret
2564   1402             
2565   1402             printx8:
2566   1402 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2567   1405             
2568   1405             ; --- BEGIN INLINE ASM SEGMENT
2569   1405 FA 05 00      lea d, [bp + 5] ; $hex
2570   1408 32            mov bl, [d]
2571   1409 07 B1 21      call print_u8x
2572   140C             ; --- END INLINE ASM SEGMENT
2573   140C             
2574   140C F9            leave
2575   140D 09            ret
2576   140E             
2577   140E             hex_str_to_int:
2578   140E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2579   1411             ; int value = 0; 
2580   1411 52 02 00      sub sp, 2
2581   1414             ; --- START LOCAL VAR INITIALIZATION
2582   1414 FA FF FF      lea d, [bp + -1] ; $value
2583   1417 DA            push d
2584   1418 FD 2E 00 00   mov32 cb, $00000000
2584   141C 00 00 
2585   141E E7            pop d
2586   141F FD 43         mov [d], b
2587   1421             ; --- END LOCAL VAR INITIALIZATION
2588   1421             ; int i; 
2589   1421 52 02 00      sub sp, 2
2590   1424             ; char hex_char; 
2591   1424 52 01 00      sub sp, 1
2592   1427             ; int len; 
2593   1427 52 02 00      sub sp, 2
2594   142A             ; len = strlen(hex_string); 
2595   142A FA FA FF      lea d, [bp + -6] ; $len
2596   142D DA            push d
2597   142E             ; --- START FUNCTION CALL
2598   142E FA 05 00      lea d, [bp + 5] ; $hex_string
2599   1431 2A            mov b, [d]
2600   1432 38 00 00      mov c, 0
2601   1435 FD AB         swp b
2602   1437 D8            push b
2603   1438 07 18 07      call strlen
2604   143B 51 02 00      add sp, 2
2605   143E             ; --- END FUNCTION CALL
2606   143E E7            pop d
2607   143F FD 43         mov [d], b
2608   1441             ; for (i = 0; i < len; i++) { 
2609   1441             _for31_init:
2610   1441 FA FD FF      lea d, [bp + -3] ; $i
2611   1444 DA            push d
2612   1445 FD 2E 00 00   mov32 cb, $00000000
2612   1449 00 00 
2613   144B E7            pop d
2614   144C FD 43         mov [d], b
2615   144E             _for31_cond:
2616   144E FA FD FF      lea d, [bp + -3] ; $i
2617   1451 2A            mov b, [d]
2618   1452 38 00 00      mov c, 0
2619   1455             ; --- START RELATIONAL
2620   1455 D7            push a
2621   1456 11            mov a, b
2622   1457 FA FA FF      lea d, [bp + -6] ; $len
2623   145A 2A            mov b, [d]
2624   145B 38 00 00      mov c, 0
2625   145E B0            cmp a, b
2626   145F FD 73         slt ; < (signed)
2627   1461 E4            pop a
2628   1462             ; --- END RELATIONAL
2629   1462 C0 00 00      cmp b, 0
2630   1465 C6 B2 15      je _for31_exit
2631   1468             _for31_block:
2632   1468             ; hex_char = hex_string[i]; 
2633   1468 FA FC FF      lea d, [bp + -4] ; $hex_char
2634   146B DA            push d
2635   146C FA 05 00      lea d, [bp + 5] ; $hex_string
2636   146F FD 2A         mov d, [d]
2637   1471 D7            push a
2638   1472 DA            push d
2639   1473 FA FD FF      lea d, [bp + -3] ; $i
2640   1476 2A            mov b, [d]
2641   1477 38 00 00      mov c, 0
2642   147A E7            pop d
2643   147B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2644   147F E4            pop a
2645   1480 32            mov bl, [d]
2646   1481 A7 00         mov bh, 0
2647   1483 38 00 00      mov c, 0
2648   1486 E7            pop d
2649   1487 FD 3E         mov [d], bl
2650   1489             ; if (hex_char >= 'a' && hex_char <= 'f')  
2651   1489             _if32_cond:
2652   1489 FA FC FF      lea d, [bp + -4] ; $hex_char
2653   148C 32            mov bl, [d]
2654   148D A7 00         mov bh, 0
2655   148F 38 00 00      mov c, 0
2656   1492             ; --- START RELATIONAL
2657   1492 D7            push a
2658   1493 11            mov a, b
2659   1494 FD 2E 61 00   mov32 cb, $00000061
2659   1498 00 00 
2660   149A B0            cmp a, b
2661   149B FD 80         sge ; >=
2662   149D E4            pop a
2663   149E             ; --- END RELATIONAL
2664   149E             ; --- START LOGICAL AND
2665   149E D7            push a
2666   149F 11            mov a, b
2667   14A0 FA FC FF      lea d, [bp + -4] ; $hex_char
2668   14A3 32            mov bl, [d]
2669   14A4 A7 00         mov bh, 0
2670   14A6 38 00 00      mov c, 0
2671   14A9             ; --- START RELATIONAL
2672   14A9 D7            push a
2673   14AA 11            mov a, b
2674   14AB FD 2E 66 00   mov32 cb, $00000066
2674   14AF 00 00 
2675   14B1 B0            cmp a, b
2676   14B2 FD 74         sle ; <= (signed)
2677   14B4 E4            pop a
2678   14B5             ; --- END RELATIONAL
2679   14B5 FD A7         sand a, b
2680   14B7 E4            pop a
2681   14B8             ; --- END LOGICAL AND
2682   14B8 C0 00 00      cmp b, 0
2683   14BB C6 FB 14      je _if32_else
2684   14BE             _if32_TRUE:
2685   14BE             ; value = (value * 16) + (hex_char - 'a' + 10); 
2686   14BE FA FF FF      lea d, [bp + -1] ; $value
2687   14C1 DA            push d
2688   14C2 FA FF FF      lea d, [bp + -1] ; $value
2689   14C5 2A            mov b, [d]
2690   14C6 38 00 00      mov c, 0
2691   14C9             ; --- START FACTORS
2692   14C9 D7            push a
2693   14CA 11            mov a, b
2694   14CB FD 2E 10 00   mov32 cb, $00000010
2694   14CF 00 00 
2695   14D1 AC            mul a, b ; *
2696   14D2 11            mov a, b
2697   14D3 27            mov b, a
2698   14D4 E4            pop a
2699   14D5             ; --- END FACTORS
2700   14D5             ; --- START TERMS
2701   14D5 D7            push a
2702   14D6 11            mov a, b
2703   14D7 FA FC FF      lea d, [bp + -4] ; $hex_char
2704   14DA 32            mov bl, [d]
2705   14DB A7 00         mov bh, 0
2706   14DD 38 00 00      mov c, 0
2707   14E0             ; --- START TERMS
2708   14E0 D7            push a
2709   14E1 11            mov a, b
2710   14E2 FD 2E 61 00   mov32 cb, $00000061
2710   14E6 00 00 
2711   14E8 60            sub a, b
2712   14E9 27            mov b, a
2713   14EA 11            mov a, b
2714   14EB FD 2E 0A 00   mov32 cb, $0000000a
2714   14EF 00 00 
2715   14F1 56            add b, a
2716   14F2 E4            pop a
2717   14F3             ; --- END TERMS
2718   14F3 56            add b, a
2719   14F4 E4            pop a
2720   14F5             ; --- END TERMS
2721   14F5 E7            pop d
2722   14F6 FD 43         mov [d], b
2723   14F8 0A 9F 15      jmp _if32_exit
2724   14FB             _if32_else:
2725   14FB             ; if (hex_char >= 'A' && hex_char <= 'F')  
2726   14FB             _if33_cond:
2727   14FB FA FC FF      lea d, [bp + -4] ; $hex_char
2728   14FE 32            mov bl, [d]
2729   14FF A7 00         mov bh, 0
2730   1501 38 00 00      mov c, 0
2731   1504             ; --- START RELATIONAL
2732   1504 D7            push a
2733   1505 11            mov a, b
2734   1506 FD 2E 41 00   mov32 cb, $00000041
2734   150A 00 00 
2735   150C B0            cmp a, b
2736   150D FD 80         sge ; >=
2737   150F E4            pop a
2738   1510             ; --- END RELATIONAL
2739   1510             ; --- START LOGICAL AND
2740   1510 D7            push a
2741   1511 11            mov a, b
2742   1512 FA FC FF      lea d, [bp + -4] ; $hex_char
2743   1515 32            mov bl, [d]
2744   1516 A7 00         mov bh, 0
2745   1518 38 00 00      mov c, 0
2746   151B             ; --- START RELATIONAL
2747   151B D7            push a
2748   151C 11            mov a, b
2749   151D FD 2E 46 00   mov32 cb, $00000046
2749   1521 00 00 
2750   1523 B0            cmp a, b
2751   1524 FD 74         sle ; <= (signed)
2752   1526 E4            pop a
2753   1527             ; --- END RELATIONAL
2754   1527 FD A7         sand a, b
2755   1529 E4            pop a
2756   152A             ; --- END LOGICAL AND
2757   152A C0 00 00      cmp b, 0
2758   152D C6 6D 15      je _if33_else
2759   1530             _if33_TRUE:
2760   1530             ; value = (value * 16) + (hex_char - 'A' + 10); 
2761   1530 FA FF FF      lea d, [bp + -1] ; $value
2762   1533 DA            push d
2763   1534 FA FF FF      lea d, [bp + -1] ; $value
2764   1537 2A            mov b, [d]
2765   1538 38 00 00      mov c, 0
2766   153B             ; --- START FACTORS
2767   153B D7            push a
2768   153C 11            mov a, b
2769   153D FD 2E 10 00   mov32 cb, $00000010
2769   1541 00 00 
2770   1543 AC            mul a, b ; *
2771   1544 11            mov a, b
2772   1545 27            mov b, a
2773   1546 E4            pop a
2774   1547             ; --- END FACTORS
2775   1547             ; --- START TERMS
2776   1547 D7            push a
2777   1548 11            mov a, b
2778   1549 FA FC FF      lea d, [bp + -4] ; $hex_char
2779   154C 32            mov bl, [d]
2780   154D A7 00         mov bh, 0
2781   154F 38 00 00      mov c, 0
2782   1552             ; --- START TERMS
2783   1552 D7            push a
2784   1553 11            mov a, b
2785   1554 FD 2E 41 00   mov32 cb, $00000041
2785   1558 00 00 
2786   155A 60            sub a, b
2787   155B 27            mov b, a
2788   155C 11            mov a, b
2789   155D FD 2E 0A 00   mov32 cb, $0000000a
2789   1561 00 00 
2790   1563 56            add b, a
2791   1564 E4            pop a
2792   1565             ; --- END TERMS
2793   1565 56            add b, a
2794   1566 E4            pop a
2795   1567             ; --- END TERMS
2796   1567 E7            pop d
2797   1568 FD 43         mov [d], b
2798   156A 0A 9F 15      jmp _if33_exit
2799   156D             _if33_else:
2800   156D             ; value = (value * 16) + (hex_char - '0'); 
2801   156D FA FF FF      lea d, [bp + -1] ; $value
2802   1570 DA            push d
2803   1571 FA FF FF      lea d, [bp + -1] ; $value
2804   1574 2A            mov b, [d]
2805   1575 38 00 00      mov c, 0
2806   1578             ; --- START FACTORS
2807   1578 D7            push a
2808   1579 11            mov a, b
2809   157A FD 2E 10 00   mov32 cb, $00000010
2809   157E 00 00 
2810   1580 AC            mul a, b ; *
2811   1581 11            mov a, b
2812   1582 27            mov b, a
2813   1583 E4            pop a
2814   1584             ; --- END FACTORS
2815   1584             ; --- START TERMS
2816   1584 D7            push a
2817   1585 11            mov a, b
2818   1586 FA FC FF      lea d, [bp + -4] ; $hex_char
2819   1589 32            mov bl, [d]
2820   158A A7 00         mov bh, 0
2821   158C 38 00 00      mov c, 0
2822   158F             ; --- START TERMS
2823   158F D7            push a
2824   1590 11            mov a, b
2825   1591 FD 2E 30 00   mov32 cb, $00000030
2825   1595 00 00 
2826   1597 60            sub a, b
2827   1598 27            mov b, a
2828   1599 E4            pop a
2829   159A             ; --- END TERMS
2830   159A 56            add b, a
2831   159B E4            pop a
2832   159C             ; --- END TERMS
2833   159C E7            pop d
2834   159D FD 43         mov [d], b
2835   159F             _if33_exit:
2836   159F             _if32_exit:
2837   159F             _for31_update:
2838   159F FA FD FF      lea d, [bp + -3] ; $i
2839   15A2 2A            mov b, [d]
2840   15A3 38 00 00      mov c, 0
2841   15A6 11            mov a, b
2842   15A7 FD 77         inc b
2843   15A9 FA FD FF      lea d, [bp + -3] ; $i
2844   15AC FD 43         mov [d], b
2845   15AE 27            mov b, a
2846   15AF 0A 4E 14      jmp _for31_cond
2847   15B2             _for31_exit:
2848   15B2             ; return value; 
2849   15B2 FA FF FF      lea d, [bp + -1] ; $value
2850   15B5 2A            mov b, [d]
2851   15B6 38 00 00      mov c, 0
2852   15B9 F9            leave
2853   15BA 09            ret
2854   15BB             
2855   15BB             gets:
2856   15BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2857   15BE             
2858   15BE             ; --- BEGIN INLINE ASM SEGMENT
2859   15BE FA 05 00      lea d, [bp + 5] ; $s
2860   15C1 15            mov a, [d]
2861   15C2 3C            mov d, a
2862   15C3 07 D2 1F      call _gets
2863   15C6             ; --- END INLINE ASM SEGMENT
2864   15C6             
2865   15C6             ; return strlen(s); 
2866   15C6             ; --- START FUNCTION CALL
2867   15C6 FA 05 00      lea d, [bp + 5] ; $s
2868   15C9 2A            mov b, [d]
2869   15CA 38 00 00      mov c, 0
2870   15CD FD AB         swp b
2871   15CF D8            push b
2872   15D0 07 18 07      call strlen
2873   15D3 51 02 00      add sp, 2
2874   15D6             ; --- END FUNCTION CALL
2875   15D6 F9            leave
2876   15D7 09            ret
2877   15D8             
2878   15D8             print_signed:
2879   15D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2880   15DB             ; char digits[5]; 
2881   15DB 52 05 00      sub sp, 5
2882   15DE             ; int i = 0; 
2883   15DE 52 02 00      sub sp, 2
2884   15E1             ; --- START LOCAL VAR INITIALIZATION
2885   15E1 FA FA FF      lea d, [bp + -6] ; $i
2886   15E4 DA            push d
2887   15E5 FD 2E 00 00   mov32 cb, $00000000
2887   15E9 00 00 
2888   15EB E7            pop d
2889   15EC FD 43         mov [d], b
2890   15EE             ; --- END LOCAL VAR INITIALIZATION
2891   15EE             ; if (num < 0) { 
2892   15EE             _if34_cond:
2893   15EE FA 05 00      lea d, [bp + 5] ; $num
2894   15F1 2A            mov b, [d]
2895   15F2 38 00 00      mov c, 0
2896   15F5             ; --- START RELATIONAL
2897   15F5 D7            push a
2898   15F6 11            mov a, b
2899   15F7 FD 2E 00 00   mov32 cb, $00000000
2899   15FB 00 00 
2900   15FD B0            cmp a, b
2901   15FE FD 73         slt ; < (signed)
2902   1600 E4            pop a
2903   1601             ; --- END RELATIONAL
2904   1601 C0 00 00      cmp b, 0
2905   1604 C6 27 16      je _if34_else
2906   1607             _if34_TRUE:
2907   1607             ; putchar('-'); 
2908   1607             ; --- START FUNCTION CALL
2909   1607 FD 2E 2D 00   mov32 cb, $0000002d
2909   160B 00 00 
2910   160D DD            push bl
2911   160E 07 BC 1D      call putchar
2912   1611 51 01 00      add sp, 1
2913   1614             ; --- END FUNCTION CALL
2914   1614             ; num = -num; 
2915   1614 FA 05 00      lea d, [bp + 5] ; $num
2916   1617 DA            push d
2917   1618 FA 05 00      lea d, [bp + 5] ; $num
2918   161B 2A            mov b, [d]
2919   161C 38 00 00      mov c, 0
2920   161F FD 97         neg b
2921   1621 E7            pop d
2922   1622 FD 43         mov [d], b
2923   1624 0A 52 16      jmp _if34_exit
2924   1627             _if34_else:
2925   1627             ; if (num == 0) { 
2926   1627             _if35_cond:
2927   1627 FA 05 00      lea d, [bp + 5] ; $num
2928   162A 2A            mov b, [d]
2929   162B 38 00 00      mov c, 0
2930   162E             ; --- START RELATIONAL
2931   162E D7            push a
2932   162F 11            mov a, b
2933   1630 FD 2E 00 00   mov32 cb, $00000000
2933   1634 00 00 
2934   1636 B0            cmp a, b
2935   1637 FD 71         seq ; ==
2936   1639 E4            pop a
2937   163A             ; --- END RELATIONAL
2938   163A C0 00 00      cmp b, 0
2939   163D C6 52 16      je _if35_exit
2940   1640             _if35_TRUE:
2941   1640             ; putchar('0'); 
2942   1640             ; --- START FUNCTION CALL
2943   1640 FD 2E 30 00   mov32 cb, $00000030
2943   1644 00 00 
2944   1646 DD            push bl
2945   1647 07 BC 1D      call putchar
2946   164A 51 01 00      add sp, 1
2947   164D             ; --- END FUNCTION CALL
2948   164D             ; return; 
2949   164D F9            leave
2950   164E 09            ret
2951   164F 0A 52 16      jmp _if35_exit
2952   1652             _if35_exit:
2953   1652             _if34_exit:
2954   1652             ; while (num > 0) { 
2955   1652             _while36_cond:
2956   1652 FA 05 00      lea d, [bp + 5] ; $num
2957   1655 2A            mov b, [d]
2958   1656 38 00 00      mov c, 0
2959   1659             ; --- START RELATIONAL
2960   1659 D7            push a
2961   165A 11            mov a, b
2962   165B FD 2E 00 00   mov32 cb, $00000000
2962   165F 00 00 
2963   1661 B0            cmp a, b
2964   1662 FD 7F         sgt ; >
2965   1664 E4            pop a
2966   1665             ; --- END RELATIONAL
2967   1665 C0 00 00      cmp b, 0
2968   1668 C6 C7 16      je _while36_exit
2969   166B             _while36_block:
2970   166B             ; digits[i] = '0' + (num % 10); 
2971   166B FA FC FF      lea d, [bp + -4] ; $digits
2972   166E D7            push a
2973   166F DA            push d
2974   1670 FA FA FF      lea d, [bp + -6] ; $i
2975   1673 2A            mov b, [d]
2976   1674 38 00 00      mov c, 0
2977   1677 E7            pop d
2978   1678 5A            add d, b
2979   1679 E4            pop a
2980   167A DA            push d
2981   167B FD 2E 30 00   mov32 cb, $00000030
2981   167F 00 00 
2982   1681             ; --- START TERMS
2983   1681 D7            push a
2984   1682 11            mov a, b
2985   1683 FA 05 00      lea d, [bp + 5] ; $num
2986   1686 2A            mov b, [d]
2987   1687 38 00 00      mov c, 0
2988   168A             ; --- START FACTORS
2989   168A D7            push a
2990   168B 11            mov a, b
2991   168C FD 2E 0A 00   mov32 cb, $0000000a
2991   1690 00 00 
2992   1692 AE            div a, b ; 
2993   1693 11            mov a, b
2994   1694 27            mov b, a
2995   1695 E4            pop a
2996   1696             ; --- END FACTORS
2997   1696 56            add b, a
2998   1697 E4            pop a
2999   1698             ; --- END TERMS
3000   1698 E7            pop d
3001   1699 FD 3E         mov [d], bl
3002   169B             ; num = num / 10; 
3003   169B FA 05 00      lea d, [bp + 5] ; $num
3004   169E DA            push d
3005   169F FA 05 00      lea d, [bp + 5] ; $num
3006   16A2 2A            mov b, [d]
3007   16A3 38 00 00      mov c, 0
3008   16A6             ; --- START FACTORS
3009   16A6 D7            push a
3010   16A7 11            mov a, b
3011   16A8 FD 2E 0A 00   mov32 cb, $0000000a
3011   16AC 00 00 
3012   16AE AE            div a, b
3013   16AF 27            mov b, a
3014   16B0 E4            pop a
3015   16B1             ; --- END FACTORS
3016   16B1 E7            pop d
3017   16B2 FD 43         mov [d], b
3018   16B4             ; i++; 
3019   16B4 FA FA FF      lea d, [bp + -6] ; $i
3020   16B7 2A            mov b, [d]
3021   16B8 38 00 00      mov c, 0
3022   16BB 11            mov a, b
3023   16BC FD 77         inc b
3024   16BE FA FA FF      lea d, [bp + -6] ; $i
3025   16C1 FD 43         mov [d], b
3026   16C3 27            mov b, a
3027   16C4 0A 52 16      jmp _while36_cond
3028   16C7             _while36_exit:
3029   16C7             ; while (i > 0) { 
3030   16C7             _while37_cond:
3031   16C7 FA FA FF      lea d, [bp + -6] ; $i
3032   16CA 2A            mov b, [d]
3033   16CB 38 00 00      mov c, 0
3034   16CE             ; --- START RELATIONAL
3035   16CE D7            push a
3036   16CF 11            mov a, b
3037   16D0 FD 2E 00 00   mov32 cb, $00000000
3037   16D4 00 00 
3038   16D6 B0            cmp a, b
3039   16D7 FD 7F         sgt ; >
3040   16D9 E4            pop a
3041   16DA             ; --- END RELATIONAL
3042   16DA C0 00 00      cmp b, 0
3043   16DD C6 0F 17      je _while37_exit
3044   16E0             _while37_block:
3045   16E0             ; i--; 
3046   16E0 FA FA FF      lea d, [bp + -6] ; $i
3047   16E3 2A            mov b, [d]
3048   16E4 38 00 00      mov c, 0
3049   16E7 11            mov a, b
3050   16E8 FD 7D         dec b
3051   16EA FA FA FF      lea d, [bp + -6] ; $i
3052   16ED FD 43         mov [d], b
3053   16EF 27            mov b, a
3054   16F0             ; putchar(digits[i]); 
3055   16F0             ; --- START FUNCTION CALL
3056   16F0 FA FC FF      lea d, [bp + -4] ; $digits
3057   16F3 D7            push a
3058   16F4 DA            push d
3059   16F5 FA FA FF      lea d, [bp + -6] ; $i
3060   16F8 2A            mov b, [d]
3061   16F9 38 00 00      mov c, 0
3062   16FC E7            pop d
3063   16FD 5A            add d, b
3064   16FE E4            pop a
3065   16FF 32            mov bl, [d]
3066   1700 A7 00         mov bh, 0
3067   1702 38 00 00      mov c, 0
3068   1705 DD            push bl
3069   1706 07 BC 1D      call putchar
3070   1709 51 01 00      add sp, 1
3071   170C             ; --- END FUNCTION CALL
3072   170C 0A C7 16      jmp _while37_cond
3073   170F             _while37_exit:
3074   170F F9            leave
3075   1710 09            ret
3076   1711             
3077   1711             print_signed_long:
3078   1711 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3079   1714             ; char digits[10]; 
3080   1714 52 0A 00      sub sp, 10
3081   1717             ; int i = 0; 
3082   1717 52 02 00      sub sp, 2
3083   171A             ; --- START LOCAL VAR INITIALIZATION
3084   171A FA F5 FF      lea d, [bp + -11] ; $i
3085   171D DA            push d
3086   171E FD 2E 00 00   mov32 cb, $00000000
3086   1722 00 00 
3087   1724 E7            pop d
3088   1725 FD 43         mov [d], b
3089   1727             ; --- END LOCAL VAR INITIALIZATION
3090   1727             ; if (num < 0) { 
3091   1727             _if38_cond:
3092   1727 FA 05 00      lea d, [bp + 5] ; $num
3093   172A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3094   172D FD 39         mov c, b ; And place it into C
3095   172F 2A            mov b, [d] ; Lower Word in B
3096   1730             ; --- START RELATIONAL
3097   1730 D7            push a
3098   1731 FD D8         push g
3099   1733 11            mov a, b
3100   1734 FD 7A         mov g, c
3101   1736 FD 2E 00 00   mov32 cb, $00000000
3101   173A 00 00 
3102   173C FD AF         cmp32 ga, cb
3103   173E FD 73         slt ; <
3104   1740 FD F1         pop g
3105   1742 E4            pop a
3106   1743             ; --- END RELATIONAL
3107   1743 C0 00 00      cmp b, 0
3108   1746 C6 7A 17      je _if38_else
3109   1749             _if38_TRUE:
3110   1749             ; putchar('-'); 
3111   1749             ; --- START FUNCTION CALL
3112   1749 FD 2E 2D 00   mov32 cb, $0000002d
3112   174D 00 00 
3113   174F DD            push bl
3114   1750 07 BC 1D      call putchar
3115   1753 51 01 00      add sp, 1
3116   1756             ; --- END FUNCTION CALL
3117   1756             ; num = -num; 
3118   1756 FA 05 00      lea d, [bp + 5] ; $num
3119   1759 DA            push d
3120   175A FA 05 00      lea d, [bp + 5] ; $num
3121   175D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3122   1760 FD 39         mov c, b ; And place it into C
3123   1762 2A            mov b, [d] ; Lower Word in B
3124   1763 12            mov a, c
3125   1764 95            not a
3126   1765 97            not b
3127   1766 55 01 00      add b, 1
3128   1769 5B 00 00      adc a, 0
3129   176C 39            mov c, a
3130   176D E7            pop d
3131   176E FD 43         mov [d], b
3132   1770 26 00 00      mov b, 0
3133   1773 FD 44 02 00   mov [d + 2], b
3134   1777 0A AE 17      jmp _if38_exit
3135   177A             _if38_else:
3136   177A             ; if (num == 0) { 
3137   177A             _if39_cond:
3138   177A FA 05 00      lea d, [bp + 5] ; $num
3139   177D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3140   1780 FD 39         mov c, b ; And place it into C
3141   1782 2A            mov b, [d] ; Lower Word in B
3142   1783             ; --- START RELATIONAL
3143   1783 D7            push a
3144   1784 FD D8         push g
3145   1786 11            mov a, b
3146   1787 FD 7A         mov g, c
3147   1789 FD 2E 00 00   mov32 cb, $00000000
3147   178D 00 00 
3148   178F FD AF         cmp32 ga, cb
3149   1791 FD 71         seq ; ==
3150   1793 FD F1         pop g
3151   1795 E4            pop a
3152   1796             ; --- END RELATIONAL
3153   1796 C0 00 00      cmp b, 0
3154   1799 C6 AE 17      je _if39_exit
3155   179C             _if39_TRUE:
3156   179C             ; putchar('0'); 
3157   179C             ; --- START FUNCTION CALL
3158   179C FD 2E 30 00   mov32 cb, $00000030
3158   17A0 00 00 
3159   17A2 DD            push bl
3160   17A3 07 BC 1D      call putchar
3161   17A6 51 01 00      add sp, 1
3162   17A9             ; --- END FUNCTION CALL
3163   17A9             ; return; 
3164   17A9 F9            leave
3165   17AA 09            ret
3166   17AB 0A AE 17      jmp _if39_exit
3167   17AE             _if39_exit:
3168   17AE             _if38_exit:
3169   17AE             ; while (num > 0) { 
3170   17AE             _while40_cond:
3171   17AE FA 05 00      lea d, [bp + 5] ; $num
3172   17B1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3173   17B4 FD 39         mov c, b ; And place it into C
3174   17B6 2A            mov b, [d] ; Lower Word in B
3175   17B7             ; --- START RELATIONAL
3176   17B7 D7            push a
3177   17B8 FD D8         push g
3178   17BA 11            mov a, b
3179   17BB FD 7A         mov g, c
3180   17BD FD 2E 00 00   mov32 cb, $00000000
3180   17C1 00 00 
3181   17C3 FD AF         cmp32 ga, cb
3182   17C5 FD 7F         sgt
3183   17C7 FD F1         pop g
3184   17C9 E4            pop a
3185   17CA             ; --- END RELATIONAL
3186   17CA C0 00 00      cmp b, 0
3187   17CD C6 36 18      je _while40_exit
3188   17D0             _while40_block:
3189   17D0             ; digits[i] = '0' + (num % 10); 
3190   17D0 FA F7 FF      lea d, [bp + -9] ; $digits
3191   17D3 D7            push a
3192   17D4 DA            push d
3193   17D5 FA F5 FF      lea d, [bp + -11] ; $i
3194   17D8 2A            mov b, [d]
3195   17D9 38 00 00      mov c, 0
3196   17DC E7            pop d
3197   17DD 5A            add d, b
3198   17DE E4            pop a
3199   17DF DA            push d
3200   17E0 FD 2E 30 00   mov32 cb, $00000030
3200   17E4 00 00 
3201   17E6             ; --- START TERMS
3202   17E6 D7            push a
3203   17E7 11            mov a, b
3204   17E8 FA 05 00      lea d, [bp + 5] ; $num
3205   17EB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3206   17EE FD 39         mov c, b ; And place it into C
3207   17F0 2A            mov b, [d] ; Lower Word in B
3208   17F1             ; --- START FACTORS
3209   17F1 D7            push a
3210   17F2 11            mov a, b
3211   17F3 FD 2E 0A 00   mov32 cb, $0000000a
3211   17F7 00 00 
3212   17F9 AE            div a, b ; 
3213   17FA 11            mov a, b
3214   17FB 27            mov b, a
3215   17FC E4            pop a
3216   17FD             ; --- END FACTORS
3217   17FD FD 15         add32 cb, ga
3218   17FF E4            pop a
3219   1800             ; --- END TERMS
3220   1800 E7            pop d
3221   1801 FD 3E         mov [d], bl
3222   1803             ; num = num / 10; 
3223   1803 FA 05 00      lea d, [bp + 5] ; $num
3224   1806 DA            push d
3225   1807 FA 05 00      lea d, [bp + 5] ; $num
3226   180A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3227   180D FD 39         mov c, b ; And place it into C
3228   180F 2A            mov b, [d] ; Lower Word in B
3229   1810             ; --- START FACTORS
3230   1810 D7            push a
3231   1811 11            mov a, b
3232   1812 FD 2E 0A 00   mov32 cb, $0000000a
3232   1816 00 00 
3233   1818 AE            div a, b
3234   1819 27            mov b, a
3235   181A E4            pop a
3236   181B             ; --- END FACTORS
3237   181B E7            pop d
3238   181C FD 43         mov [d], b
3239   181E 28            mov b, c
3240   181F FD 44 02 00   mov [d + 2], b
3241   1823             ; i++; 
3242   1823 FA F5 FF      lea d, [bp + -11] ; $i
3243   1826 2A            mov b, [d]
3244   1827 38 00 00      mov c, 0
3245   182A 11            mov a, b
3246   182B FD 77         inc b
3247   182D FA F5 FF      lea d, [bp + -11] ; $i
3248   1830 FD 43         mov [d], b
3249   1832 27            mov b, a
3250   1833 0A AE 17      jmp _while40_cond
3251   1836             _while40_exit:
3252   1836             ; while (i > 0) { 
3253   1836             _while41_cond:
3254   1836 FA F5 FF      lea d, [bp + -11] ; $i
3255   1839 2A            mov b, [d]
3256   183A 38 00 00      mov c, 0
3257   183D             ; --- START RELATIONAL
3258   183D D7            push a
3259   183E 11            mov a, b
3260   183F FD 2E 00 00   mov32 cb, $00000000
3260   1843 00 00 
3261   1845 B0            cmp a, b
3262   1846 FD 7F         sgt ; >
3263   1848 E4            pop a
3264   1849             ; --- END RELATIONAL
3265   1849 C0 00 00      cmp b, 0
3266   184C C6 7E 18      je _while41_exit
3267   184F             _while41_block:
3268   184F             ; i--; 
3269   184F FA F5 FF      lea d, [bp + -11] ; $i
3270   1852 2A            mov b, [d]
3271   1853 38 00 00      mov c, 0
3272   1856 11            mov a, b
3273   1857 FD 7D         dec b
3274   1859 FA F5 FF      lea d, [bp + -11] ; $i
3275   185C FD 43         mov [d], b
3276   185E 27            mov b, a
3277   185F             ; putchar(digits[i]); 
3278   185F             ; --- START FUNCTION CALL
3279   185F FA F7 FF      lea d, [bp + -9] ; $digits
3280   1862 D7            push a
3281   1863 DA            push d
3282   1864 FA F5 FF      lea d, [bp + -11] ; $i
3283   1867 2A            mov b, [d]
3284   1868 38 00 00      mov c, 0
3285   186B E7            pop d
3286   186C 5A            add d, b
3287   186D E4            pop a
3288   186E 32            mov bl, [d]
3289   186F A7 00         mov bh, 0
3290   1871 38 00 00      mov c, 0
3291   1874 DD            push bl
3292   1875 07 BC 1D      call putchar
3293   1878 51 01 00      add sp, 1
3294   187B             ; --- END FUNCTION CALL
3295   187B 0A 36 18      jmp _while41_cond
3296   187E             _while41_exit:
3297   187E F9            leave
3298   187F 09            ret
3299   1880             
3300   1880             print_unsigned_long:
3301   1880 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3302   1883             ; char digits[10]; 
3303   1883 52 0A 00      sub sp, 10
3304   1886             ; int i; 
3305   1886 52 02 00      sub sp, 2
3306   1889             ; i = 0; 
3307   1889 FA F5 FF      lea d, [bp + -11] ; $i
3308   188C DA            push d
3309   188D FD 2E 00 00   mov32 cb, $00000000
3309   1891 00 00 
3310   1893 E7            pop d
3311   1894 FD 43         mov [d], b
3312   1896             ; if(num == 0){ 
3313   1896             _if42_cond:
3314   1896 FA 05 00      lea d, [bp + 5] ; $num
3315   1899 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3316   189C FD 39         mov c, b ; And place it into C
3317   189E 2A            mov b, [d] ; Lower Word in B
3318   189F             ; --- START RELATIONAL
3319   189F D7            push a
3320   18A0 FD D8         push g
3321   18A2 11            mov a, b
3322   18A3 FD 7A         mov g, c
3323   18A5 FD 2E 00 00   mov32 cb, $00000000
3323   18A9 00 00 
3324   18AB FD AF         cmp32 ga, cb
3325   18AD FD 71         seq ; ==
3326   18AF FD F1         pop g
3327   18B1 E4            pop a
3328   18B2             ; --- END RELATIONAL
3329   18B2 C0 00 00      cmp b, 0
3330   18B5 C6 CA 18      je _if42_exit
3331   18B8             _if42_TRUE:
3332   18B8             ; putchar('0'); 
3333   18B8             ; --- START FUNCTION CALL
3334   18B8 FD 2E 30 00   mov32 cb, $00000030
3334   18BC 00 00 
3335   18BE DD            push bl
3336   18BF 07 BC 1D      call putchar
3337   18C2 51 01 00      add sp, 1
3338   18C5             ; --- END FUNCTION CALL
3339   18C5             ; return; 
3340   18C5 F9            leave
3341   18C6 09            ret
3342   18C7 0A CA 18      jmp _if42_exit
3343   18CA             _if42_exit:
3344   18CA             ; while (num > 0) { 
3345   18CA             _while43_cond:
3346   18CA FA 05 00      lea d, [bp + 5] ; $num
3347   18CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3348   18D0 FD 39         mov c, b ; And place it into C
3349   18D2 2A            mov b, [d] ; Lower Word in B
3350   18D3             ; --- START RELATIONAL
3351   18D3 D7            push a
3352   18D4 FD D8         push g
3353   18D6 11            mov a, b
3354   18D7 FD 7A         mov g, c
3355   18D9 FD 2E 00 00   mov32 cb, $00000000
3355   18DD 00 00 
3356   18DF FD AF         cmp32 ga, cb
3357   18E1 FD 81         sgu
3358   18E3 FD F1         pop g
3359   18E5 E4            pop a
3360   18E6             ; --- END RELATIONAL
3361   18E6 C0 00 00      cmp b, 0
3362   18E9 C6 52 19      je _while43_exit
3363   18EC             _while43_block:
3364   18EC             ; digits[i] = '0' + (num % 10); 
3365   18EC FA F7 FF      lea d, [bp + -9] ; $digits
3366   18EF D7            push a
3367   18F0 DA            push d
3368   18F1 FA F5 FF      lea d, [bp + -11] ; $i
3369   18F4 2A            mov b, [d]
3370   18F5 38 00 00      mov c, 0
3371   18F8 E7            pop d
3372   18F9 5A            add d, b
3373   18FA E4            pop a
3374   18FB DA            push d
3375   18FC FD 2E 30 00   mov32 cb, $00000030
3375   1900 00 00 
3376   1902             ; --- START TERMS
3377   1902 D7            push a
3378   1903 11            mov a, b
3379   1904 FA 05 00      lea d, [bp + 5] ; $num
3380   1907 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3381   190A FD 39         mov c, b ; And place it into C
3382   190C 2A            mov b, [d] ; Lower Word in B
3383   190D             ; --- START FACTORS
3384   190D D7            push a
3385   190E 11            mov a, b
3386   190F FD 2E 0A 00   mov32 cb, $0000000a
3386   1913 00 00 
3387   1915 AE            div a, b ; 
3388   1916 11            mov a, b
3389   1917 27            mov b, a
3390   1918 E4            pop a
3391   1919             ; --- END FACTORS
3392   1919 FD 15         add32 cb, ga
3393   191B E4            pop a
3394   191C             ; --- END TERMS
3395   191C E7            pop d
3396   191D FD 3E         mov [d], bl
3397   191F             ; num = num / 10; 
3398   191F FA 05 00      lea d, [bp + 5] ; $num
3399   1922 DA            push d
3400   1923 FA 05 00      lea d, [bp + 5] ; $num
3401   1926 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3402   1929 FD 39         mov c, b ; And place it into C
3403   192B 2A            mov b, [d] ; Lower Word in B
3404   192C             ; --- START FACTORS
3405   192C D7            push a
3406   192D 11            mov a, b
3407   192E FD 2E 0A 00   mov32 cb, $0000000a
3407   1932 00 00 
3408   1934 AE            div a, b
3409   1935 27            mov b, a
3410   1936 E4            pop a
3411   1937             ; --- END FACTORS
3412   1937 E7            pop d
3413   1938 FD 43         mov [d], b
3414   193A 28            mov b, c
3415   193B FD 44 02 00   mov [d + 2], b
3416   193F             ; i++; 
3417   193F FA F5 FF      lea d, [bp + -11] ; $i
3418   1942 2A            mov b, [d]
3419   1943 38 00 00      mov c, 0
3420   1946 11            mov a, b
3421   1947 FD 77         inc b
3422   1949 FA F5 FF      lea d, [bp + -11] ; $i
3423   194C FD 43         mov [d], b
3424   194E 27            mov b, a
3425   194F 0A CA 18      jmp _while43_cond
3426   1952             _while43_exit:
3427   1952             ; while (i > 0) { 
3428   1952             _while44_cond:
3429   1952 FA F5 FF      lea d, [bp + -11] ; $i
3430   1955 2A            mov b, [d]
3431   1956 38 00 00      mov c, 0
3432   1959             ; --- START RELATIONAL
3433   1959 D7            push a
3434   195A 11            mov a, b
3435   195B FD 2E 00 00   mov32 cb, $00000000
3435   195F 00 00 
3436   1961 B0            cmp a, b
3437   1962 FD 7F         sgt ; >
3438   1964 E4            pop a
3439   1965             ; --- END RELATIONAL
3440   1965 C0 00 00      cmp b, 0
3441   1968 C6 9A 19      je _while44_exit
3442   196B             _while44_block:
3443   196B             ; i--; 
3444   196B FA F5 FF      lea d, [bp + -11] ; $i
3445   196E 2A            mov b, [d]
3446   196F 38 00 00      mov c, 0
3447   1972 11            mov a, b
3448   1973 FD 7D         dec b
3449   1975 FA F5 FF      lea d, [bp + -11] ; $i
3450   1978 FD 43         mov [d], b
3451   197A 27            mov b, a
3452   197B             ; putchar(digits[i]); 
3453   197B             ; --- START FUNCTION CALL
3454   197B FA F7 FF      lea d, [bp + -9] ; $digits
3455   197E D7            push a
3456   197F DA            push d
3457   1980 FA F5 FF      lea d, [bp + -11] ; $i
3458   1983 2A            mov b, [d]
3459   1984 38 00 00      mov c, 0
3460   1987 E7            pop d
3461   1988 5A            add d, b
3462   1989 E4            pop a
3463   198A 32            mov bl, [d]
3464   198B A7 00         mov bh, 0
3465   198D 38 00 00      mov c, 0
3466   1990 DD            push bl
3467   1991 07 BC 1D      call putchar
3468   1994 51 01 00      add sp, 1
3469   1997             ; --- END FUNCTION CALL
3470   1997 0A 52 19      jmp _while44_cond
3471   199A             _while44_exit:
3472   199A F9            leave
3473   199B 09            ret
3474   199C             
3475   199C             sprint_unsigned:
3476   199C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3477   199F             ; char digits[5]; 
3478   199F 52 05 00      sub sp, 5
3479   19A2             ; int i; 
3480   19A2 52 02 00      sub sp, 2
3481   19A5             ; int len = 0; 
3482   19A5 52 02 00      sub sp, 2
3483   19A8             ; --- START LOCAL VAR INITIALIZATION
3484   19A8 FA F8 FF      lea d, [bp + -8] ; $len
3485   19AB DA            push d
3486   19AC FD 2E 00 00   mov32 cb, $00000000
3486   19B0 00 00 
3487   19B2 E7            pop d
3488   19B3 FD 43         mov [d], b
3489   19B5             ; --- END LOCAL VAR INITIALIZATION
3490   19B5             ; i = 0; 
3491   19B5 FA FA FF      lea d, [bp + -6] ; $i
3492   19B8 DA            push d
3493   19B9 FD 2E 00 00   mov32 cb, $00000000
3493   19BD 00 00 
3494   19BF E7            pop d
3495   19C0 FD 43         mov [d], b
3496   19C2             ; if(num == 0){ 
3497   19C2             _if45_cond:
3498   19C2 FA 07 00      lea d, [bp + 7] ; $num
3499   19C5 2A            mov b, [d]
3500   19C6 38 00 00      mov c, 0
3501   19C9             ; --- START RELATIONAL
3502   19C9 D7            push a
3503   19CA 11            mov a, b
3504   19CB FD 2E 00 00   mov32 cb, $00000000
3504   19CF 00 00 
3505   19D1 B0            cmp a, b
3506   19D2 FD 71         seq ; ==
3507   19D4 E4            pop a
3508   19D5             ; --- END RELATIONAL
3509   19D5 C0 00 00      cmp b, 0
3510   19D8 C6 00 1A      je _if45_exit
3511   19DB             _if45_TRUE:
3512   19DB             ; *dest++ = '0'; 
3513   19DB FA 05 00      lea d, [bp + 5] ; $dest
3514   19DE 2A            mov b, [d]
3515   19DF 38 00 00      mov c, 0
3516   19E2 FD 77         inc b
3517   19E4 FA 05 00      lea d, [bp + 5] ; $dest
3518   19E7 FD 43         mov [d], b
3519   19E9 FD 7D         dec b
3520   19EB D8            push b
3521   19EC FD 2E 30 00   mov32 cb, $00000030
3521   19F0 00 00 
3522   19F2 E7            pop d
3523   19F3 FD 3E         mov [d], bl
3524   19F5             ; return 1; 
3525   19F5 FD 2E 01 00   mov32 cb, $00000001
3525   19F9 00 00 
3526   19FB F9            leave
3527   19FC 09            ret
3528   19FD 0A 00 1A      jmp _if45_exit
3529   1A00             _if45_exit:
3530   1A00             ; while (num > 0) { 
3531   1A00             _while46_cond:
3532   1A00 FA 07 00      lea d, [bp + 7] ; $num
3533   1A03 2A            mov b, [d]
3534   1A04 38 00 00      mov c, 0
3535   1A07             ; --- START RELATIONAL
3536   1A07 D7            push a
3537   1A08 11            mov a, b
3538   1A09 FD 2E 00 00   mov32 cb, $00000000
3538   1A0D 00 00 
3539   1A0F B0            cmp a, b
3540   1A10 FD 81         sgu ; > (unsigned)
3541   1A12 E4            pop a
3542   1A13             ; --- END RELATIONAL
3543   1A13 C0 00 00      cmp b, 0
3544   1A16 C6 75 1A      je _while46_exit
3545   1A19             _while46_block:
3546   1A19             ; digits[i] = '0' + (num % 10); 
3547   1A19 FA FC FF      lea d, [bp + -4] ; $digits
3548   1A1C D7            push a
3549   1A1D DA            push d
3550   1A1E FA FA FF      lea d, [bp + -6] ; $i
3551   1A21 2A            mov b, [d]
3552   1A22 38 00 00      mov c, 0
3553   1A25 E7            pop d
3554   1A26 5A            add d, b
3555   1A27 E4            pop a
3556   1A28 DA            push d
3557   1A29 FD 2E 30 00   mov32 cb, $00000030
3557   1A2D 00 00 
3558   1A2F             ; --- START TERMS
3559   1A2F D7            push a
3560   1A30 11            mov a, b
3561   1A31 FA 07 00      lea d, [bp + 7] ; $num
3562   1A34 2A            mov b, [d]
3563   1A35 38 00 00      mov c, 0
3564   1A38             ; --- START FACTORS
3565   1A38 D7            push a
3566   1A39 11            mov a, b
3567   1A3A FD 2E 0A 00   mov32 cb, $0000000a
3567   1A3E 00 00 
3568   1A40 AE            div a, b ; 
3569   1A41 11            mov a, b
3570   1A42 27            mov b, a
3571   1A43 E4            pop a
3572   1A44             ; --- END FACTORS
3573   1A44 56            add b, a
3574   1A45 E4            pop a
3575   1A46             ; --- END TERMS
3576   1A46 E7            pop d
3577   1A47 FD 3E         mov [d], bl
3578   1A49             ; num = num / 10; 
3579   1A49 FA 07 00      lea d, [bp + 7] ; $num
3580   1A4C DA            push d
3581   1A4D FA 07 00      lea d, [bp + 7] ; $num
3582   1A50 2A            mov b, [d]
3583   1A51 38 00 00      mov c, 0
3584   1A54             ; --- START FACTORS
3585   1A54 D7            push a
3586   1A55 11            mov a, b
3587   1A56 FD 2E 0A 00   mov32 cb, $0000000a
3587   1A5A 00 00 
3588   1A5C AE            div a, b
3589   1A5D 27            mov b, a
3590   1A5E E4            pop a
3591   1A5F             ; --- END FACTORS
3592   1A5F E7            pop d
3593   1A60 FD 43         mov [d], b
3594   1A62             ; i++; 
3595   1A62 FA FA FF      lea d, [bp + -6] ; $i
3596   1A65 2A            mov b, [d]
3597   1A66 38 00 00      mov c, 0
3598   1A69 11            mov a, b
3599   1A6A FD 77         inc b
3600   1A6C FA FA FF      lea d, [bp + -6] ; $i
3601   1A6F FD 43         mov [d], b
3602   1A71 27            mov b, a
3603   1A72 0A 00 1A      jmp _while46_cond
3604   1A75             _while46_exit:
3605   1A75             ; while (i > 0) { 
3606   1A75             _while47_cond:
3607   1A75 FA FA FF      lea d, [bp + -6] ; $i
3608   1A78 2A            mov b, [d]
3609   1A79 38 00 00      mov c, 0
3610   1A7C             ; --- START RELATIONAL
3611   1A7C D7            push a
3612   1A7D 11            mov a, b
3613   1A7E FD 2E 00 00   mov32 cb, $00000000
3613   1A82 00 00 
3614   1A84 B0            cmp a, b
3615   1A85 FD 7F         sgt ; >
3616   1A87 E4            pop a
3617   1A88             ; --- END RELATIONAL
3618   1A88 C0 00 00      cmp b, 0
3619   1A8B C6 DA 1A      je _while47_exit
3620   1A8E             _while47_block:
3621   1A8E             ; i--; 
3622   1A8E FA FA FF      lea d, [bp + -6] ; $i
3623   1A91 2A            mov b, [d]
3624   1A92 38 00 00      mov c, 0
3625   1A95 11            mov a, b
3626   1A96 FD 7D         dec b
3627   1A98 FA FA FF      lea d, [bp + -6] ; $i
3628   1A9B FD 43         mov [d], b
3629   1A9D 27            mov b, a
3630   1A9E             ; *dest++ = digits[i]; 
3631   1A9E FA 05 00      lea d, [bp + 5] ; $dest
3632   1AA1 2A            mov b, [d]
3633   1AA2 38 00 00      mov c, 0
3634   1AA5 FD 77         inc b
3635   1AA7 FA 05 00      lea d, [bp + 5] ; $dest
3636   1AAA FD 43         mov [d], b
3637   1AAC FD 7D         dec b
3638   1AAE D8            push b
3639   1AAF FA FC FF      lea d, [bp + -4] ; $digits
3640   1AB2 D7            push a
3641   1AB3 DA            push d
3642   1AB4 FA FA FF      lea d, [bp + -6] ; $i
3643   1AB7 2A            mov b, [d]
3644   1AB8 38 00 00      mov c, 0
3645   1ABB E7            pop d
3646   1ABC 5A            add d, b
3647   1ABD E4            pop a
3648   1ABE 32            mov bl, [d]
3649   1ABF A7 00         mov bh, 0
3650   1AC1 38 00 00      mov c, 0
3651   1AC4 E7            pop d
3652   1AC5 FD 3E         mov [d], bl
3653   1AC7             ; len++; 
3654   1AC7 FA F8 FF      lea d, [bp + -8] ; $len
3655   1ACA 2A            mov b, [d]
3656   1ACB 38 00 00      mov c, 0
3657   1ACE 11            mov a, b
3658   1ACF FD 77         inc b
3659   1AD1 FA F8 FF      lea d, [bp + -8] ; $len
3660   1AD4 FD 43         mov [d], b
3661   1AD6 27            mov b, a
3662   1AD7 0A 75 1A      jmp _while47_cond
3663   1ADA             _while47_exit:
3664   1ADA             ; *dest = '\0'; 
3665   1ADA FA 05 00      lea d, [bp + 5] ; $dest
3666   1ADD 2A            mov b, [d]
3667   1ADE 38 00 00      mov c, 0
3668   1AE1 D8            push b
3669   1AE2 FD 2E 00 00   mov32 cb, $00000000
3669   1AE6 00 00 
3670   1AE8 E7            pop d
3671   1AE9 FD 3E         mov [d], bl
3672   1AEB             ; return len; 
3673   1AEB FA F8 FF      lea d, [bp + -8] ; $len
3674   1AEE 2A            mov b, [d]
3675   1AEF 38 00 00      mov c, 0
3676   1AF2 F9            leave
3677   1AF3 09            ret
3678   1AF4             
3679   1AF4             print_unsigned:
3680   1AF4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3681   1AF7             ; char digits[5]; 
3682   1AF7 52 05 00      sub sp, 5
3683   1AFA             ; int i; 
3684   1AFA 52 02 00      sub sp, 2
3685   1AFD             ; i = 0; 
3686   1AFD FA FA FF      lea d, [bp + -6] ; $i
3687   1B00 DA            push d
3688   1B01 FD 2E 00 00   mov32 cb, $00000000
3688   1B05 00 00 
3689   1B07 E7            pop d
3690   1B08 FD 43         mov [d], b
3691   1B0A             ; if(num == 0){ 
3692   1B0A             _if48_cond:
3693   1B0A FA 05 00      lea d, [bp + 5] ; $num
3694   1B0D 2A            mov b, [d]
3695   1B0E 38 00 00      mov c, 0
3696   1B11             ; --- START RELATIONAL
3697   1B11 D7            push a
3698   1B12 11            mov a, b
3699   1B13 FD 2E 00 00   mov32 cb, $00000000
3699   1B17 00 00 
3700   1B19 B0            cmp a, b
3701   1B1A FD 71         seq ; ==
3702   1B1C E4            pop a
3703   1B1D             ; --- END RELATIONAL
3704   1B1D C0 00 00      cmp b, 0
3705   1B20 C6 35 1B      je _if48_exit
3706   1B23             _if48_TRUE:
3707   1B23             ; putchar('0'); 
3708   1B23             ; --- START FUNCTION CALL
3709   1B23 FD 2E 30 00   mov32 cb, $00000030
3709   1B27 00 00 
3710   1B29 DD            push bl
3711   1B2A 07 BC 1D      call putchar
3712   1B2D 51 01 00      add sp, 1
3713   1B30             ; --- END FUNCTION CALL
3714   1B30             ; return; 
3715   1B30 F9            leave
3716   1B31 09            ret
3717   1B32 0A 35 1B      jmp _if48_exit
3718   1B35             _if48_exit:
3719   1B35             ; while (num > 0) { 
3720   1B35             _while49_cond:
3721   1B35 FA 05 00      lea d, [bp + 5] ; $num
3722   1B38 2A            mov b, [d]
3723   1B39 38 00 00      mov c, 0
3724   1B3C             ; --- START RELATIONAL
3725   1B3C D7            push a
3726   1B3D 11            mov a, b
3727   1B3E FD 2E 00 00   mov32 cb, $00000000
3727   1B42 00 00 
3728   1B44 B0            cmp a, b
3729   1B45 FD 81         sgu ; > (unsigned)
3730   1B47 E4            pop a
3731   1B48             ; --- END RELATIONAL
3732   1B48 C0 00 00      cmp b, 0
3733   1B4B C6 AA 1B      je _while49_exit
3734   1B4E             _while49_block:
3735   1B4E             ; digits[i] = '0' + (num % 10); 
3736   1B4E FA FC FF      lea d, [bp + -4] ; $digits
3737   1B51 D7            push a
3738   1B52 DA            push d
3739   1B53 FA FA FF      lea d, [bp + -6] ; $i
3740   1B56 2A            mov b, [d]
3741   1B57 38 00 00      mov c, 0
3742   1B5A E7            pop d
3743   1B5B 5A            add d, b
3744   1B5C E4            pop a
3745   1B5D DA            push d
3746   1B5E FD 2E 30 00   mov32 cb, $00000030
3746   1B62 00 00 
3747   1B64             ; --- START TERMS
3748   1B64 D7            push a
3749   1B65 11            mov a, b
3750   1B66 FA 05 00      lea d, [bp + 5] ; $num
3751   1B69 2A            mov b, [d]
3752   1B6A 38 00 00      mov c, 0
3753   1B6D             ; --- START FACTORS
3754   1B6D D7            push a
3755   1B6E 11            mov a, b
3756   1B6F FD 2E 0A 00   mov32 cb, $0000000a
3756   1B73 00 00 
3757   1B75 AE            div a, b ; 
3758   1B76 11            mov a, b
3759   1B77 27            mov b, a
3760   1B78 E4            pop a
3761   1B79             ; --- END FACTORS
3762   1B79 56            add b, a
3763   1B7A E4            pop a
3764   1B7B             ; --- END TERMS
3765   1B7B E7            pop d
3766   1B7C FD 3E         mov [d], bl
3767   1B7E             ; num = num / 10; 
3768   1B7E FA 05 00      lea d, [bp + 5] ; $num
3769   1B81 DA            push d
3770   1B82 FA 05 00      lea d, [bp + 5] ; $num
3771   1B85 2A            mov b, [d]
3772   1B86 38 00 00      mov c, 0
3773   1B89             ; --- START FACTORS
3774   1B89 D7            push a
3775   1B8A 11            mov a, b
3776   1B8B FD 2E 0A 00   mov32 cb, $0000000a
3776   1B8F 00 00 
3777   1B91 AE            div a, b
3778   1B92 27            mov b, a
3779   1B93 E4            pop a
3780   1B94             ; --- END FACTORS
3781   1B94 E7            pop d
3782   1B95 FD 43         mov [d], b
3783   1B97             ; i++; 
3784   1B97 FA FA FF      lea d, [bp + -6] ; $i
3785   1B9A 2A            mov b, [d]
3786   1B9B 38 00 00      mov c, 0
3787   1B9E 11            mov a, b
3788   1B9F FD 77         inc b
3789   1BA1 FA FA FF      lea d, [bp + -6] ; $i
3790   1BA4 FD 43         mov [d], b
3791   1BA6 27            mov b, a
3792   1BA7 0A 35 1B      jmp _while49_cond
3793   1BAA             _while49_exit:
3794   1BAA             ; while (i > 0) { 
3795   1BAA             _while50_cond:
3796   1BAA FA FA FF      lea d, [bp + -6] ; $i
3797   1BAD 2A            mov b, [d]
3798   1BAE 38 00 00      mov c, 0
3799   1BB1             ; --- START RELATIONAL
3800   1BB1 D7            push a
3801   1BB2 11            mov a, b
3802   1BB3 FD 2E 00 00   mov32 cb, $00000000
3802   1BB7 00 00 
3803   1BB9 B0            cmp a, b
3804   1BBA FD 7F         sgt ; >
3805   1BBC E4            pop a
3806   1BBD             ; --- END RELATIONAL
3807   1BBD C0 00 00      cmp b, 0
3808   1BC0 C6 F2 1B      je _while50_exit
3809   1BC3             _while50_block:
3810   1BC3             ; i--; 
3811   1BC3 FA FA FF      lea d, [bp + -6] ; $i
3812   1BC6 2A            mov b, [d]
3813   1BC7 38 00 00      mov c, 0
3814   1BCA 11            mov a, b
3815   1BCB FD 7D         dec b
3816   1BCD FA FA FF      lea d, [bp + -6] ; $i
3817   1BD0 FD 43         mov [d], b
3818   1BD2 27            mov b, a
3819   1BD3             ; putchar(digits[i]); 
3820   1BD3             ; --- START FUNCTION CALL
3821   1BD3 FA FC FF      lea d, [bp + -4] ; $digits
3822   1BD6 D7            push a
3823   1BD7 DA            push d
3824   1BD8 FA FA FF      lea d, [bp + -6] ; $i
3825   1BDB 2A            mov b, [d]
3826   1BDC 38 00 00      mov c, 0
3827   1BDF E7            pop d
3828   1BE0 5A            add d, b
3829   1BE1 E4            pop a
3830   1BE2 32            mov bl, [d]
3831   1BE3 A7 00         mov bh, 0
3832   1BE5 38 00 00      mov c, 0
3833   1BE8 DD            push bl
3834   1BE9 07 BC 1D      call putchar
3835   1BEC 51 01 00      add sp, 1
3836   1BEF             ; --- END FUNCTION CALL
3837   1BEF 0A AA 1B      jmp _while50_cond
3838   1BF2             _while50_exit:
3839   1BF2 F9            leave
3840   1BF3 09            ret
3841   1BF4             
3842   1BF4             sprint_signed:
3843   1BF4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3844   1BF7             ; char digits[5]; 
3845   1BF7 52 05 00      sub sp, 5
3846   1BFA             ; int i = 0; 
3847   1BFA 52 02 00      sub sp, 2
3848   1BFD             ; --- START LOCAL VAR INITIALIZATION
3849   1BFD FA FA FF      lea d, [bp + -6] ; $i
3850   1C00 DA            push d
3851   1C01 FD 2E 00 00   mov32 cb, $00000000
3851   1C05 00 00 
3852   1C07 E7            pop d
3853   1C08 FD 43         mov [d], b
3854   1C0A             ; --- END LOCAL VAR INITIALIZATION
3855   1C0A             ; int len = 0; 
3856   1C0A 52 02 00      sub sp, 2
3857   1C0D             ; --- START LOCAL VAR INITIALIZATION
3858   1C0D FA F8 FF      lea d, [bp + -8] ; $len
3859   1C10 DA            push d
3860   1C11 FD 2E 00 00   mov32 cb, $00000000
3860   1C15 00 00 
3861   1C17 E7            pop d
3862   1C18 FD 43         mov [d], b
3863   1C1A             ; --- END LOCAL VAR INITIALIZATION
3864   1C1A             ; if (num < 0) { 
3865   1C1A             _if51_cond:
3866   1C1A FA 07 00      lea d, [bp + 7] ; $num
3867   1C1D 2A            mov b, [d]
3868   1C1E 38 00 00      mov c, 0
3869   1C21             ; --- START RELATIONAL
3870   1C21 D7            push a
3871   1C22 11            mov a, b
3872   1C23 FD 2E 00 00   mov32 cb, $00000000
3872   1C27 00 00 
3873   1C29 B0            cmp a, b
3874   1C2A FD 73         slt ; < (signed)
3875   1C2C E4            pop a
3876   1C2D             ; --- END RELATIONAL
3877   1C2D C0 00 00      cmp b, 0
3878   1C30 C6 70 1C      je _if51_else
3879   1C33             _if51_TRUE:
3880   1C33             ; *dest++ = '-'; 
3881   1C33 FA 05 00      lea d, [bp + 5] ; $dest
3882   1C36 2A            mov b, [d]
3883   1C37 38 00 00      mov c, 0
3884   1C3A FD 77         inc b
3885   1C3C FA 05 00      lea d, [bp + 5] ; $dest
3886   1C3F FD 43         mov [d], b
3887   1C41 FD 7D         dec b
3888   1C43 D8            push b
3889   1C44 FD 2E 2D 00   mov32 cb, $0000002d
3889   1C48 00 00 
3890   1C4A E7            pop d
3891   1C4B FD 3E         mov [d], bl
3892   1C4D             ; num = -num; 
3893   1C4D FA 07 00      lea d, [bp + 7] ; $num
3894   1C50 DA            push d
3895   1C51 FA 07 00      lea d, [bp + 7] ; $num
3896   1C54 2A            mov b, [d]
3897   1C55 38 00 00      mov c, 0
3898   1C58 FD 97         neg b
3899   1C5A E7            pop d
3900   1C5B FD 43         mov [d], b
3901   1C5D             ; len++; 
3902   1C5D FA F8 FF      lea d, [bp + -8] ; $len
3903   1C60 2A            mov b, [d]
3904   1C61 38 00 00      mov c, 0
3905   1C64 11            mov a, b
3906   1C65 FD 77         inc b
3907   1C67 FA F8 FF      lea d, [bp + -8] ; $len
3908   1C6A FD 43         mov [d], b
3909   1C6C 27            mov b, a
3910   1C6D 0A BF 1C      jmp _if51_exit
3911   1C70             _if51_else:
3912   1C70             ; if (num == 0) { 
3913   1C70             _if52_cond:
3914   1C70 FA 07 00      lea d, [bp + 7] ; $num
3915   1C73 2A            mov b, [d]
3916   1C74 38 00 00      mov c, 0
3917   1C77             ; --- START RELATIONAL
3918   1C77 D7            push a
3919   1C78 11            mov a, b
3920   1C79 FD 2E 00 00   mov32 cb, $00000000
3920   1C7D 00 00 
3921   1C7F B0            cmp a, b
3922   1C80 FD 71         seq ; ==
3923   1C82 E4            pop a
3924   1C83             ; --- END RELATIONAL
3925   1C83 C0 00 00      cmp b, 0
3926   1C86 C6 BF 1C      je _if52_exit
3927   1C89             _if52_TRUE:
3928   1C89             ; *dest++ = '0'; 
3929   1C89 FA 05 00      lea d, [bp + 5] ; $dest
3930   1C8C 2A            mov b, [d]
3931   1C8D 38 00 00      mov c, 0
3932   1C90 FD 77         inc b
3933   1C92 FA 05 00      lea d, [bp + 5] ; $dest
3934   1C95 FD 43         mov [d], b
3935   1C97 FD 7D         dec b
3936   1C99 D8            push b
3937   1C9A FD 2E 30 00   mov32 cb, $00000030
3937   1C9E 00 00 
3938   1CA0 E7            pop d
3939   1CA1 FD 3E         mov [d], bl
3940   1CA3             ; *dest = '\0'; 
3941   1CA3 FA 05 00      lea d, [bp + 5] ; $dest
3942   1CA6 2A            mov b, [d]
3943   1CA7 38 00 00      mov c, 0
3944   1CAA D8            push b
3945   1CAB FD 2E 00 00   mov32 cb, $00000000
3945   1CAF 00 00 
3946   1CB1 E7            pop d
3947   1CB2 FD 3E         mov [d], bl
3948   1CB4             ; return 1; 
3949   1CB4 FD 2E 01 00   mov32 cb, $00000001
3949   1CB8 00 00 
3950   1CBA F9            leave
3951   1CBB 09            ret
3952   1CBC 0A BF 1C      jmp _if52_exit
3953   1CBF             _if52_exit:
3954   1CBF             _if51_exit:
3955   1CBF             ; while (num > 0) { 
3956   1CBF             _while53_cond:
3957   1CBF FA 07 00      lea d, [bp + 7] ; $num
3958   1CC2 2A            mov b, [d]
3959   1CC3 38 00 00      mov c, 0
3960   1CC6             ; --- START RELATIONAL
3961   1CC6 D7            push a
3962   1CC7 11            mov a, b
3963   1CC8 FD 2E 00 00   mov32 cb, $00000000
3963   1CCC 00 00 
3964   1CCE B0            cmp a, b
3965   1CCF FD 7F         sgt ; >
3966   1CD1 E4            pop a
3967   1CD2             ; --- END RELATIONAL
3968   1CD2 C0 00 00      cmp b, 0
3969   1CD5 C6 34 1D      je _while53_exit
3970   1CD8             _while53_block:
3971   1CD8             ; digits[i] = '0' + (num % 10); 
3972   1CD8 FA FC FF      lea d, [bp + -4] ; $digits
3973   1CDB D7            push a
3974   1CDC DA            push d
3975   1CDD FA FA FF      lea d, [bp + -6] ; $i
3976   1CE0 2A            mov b, [d]
3977   1CE1 38 00 00      mov c, 0
3978   1CE4 E7            pop d
3979   1CE5 5A            add d, b
3980   1CE6 E4            pop a
3981   1CE7 DA            push d
3982   1CE8 FD 2E 30 00   mov32 cb, $00000030
3982   1CEC 00 00 
3983   1CEE             ; --- START TERMS
3984   1CEE D7            push a
3985   1CEF 11            mov a, b
3986   1CF0 FA 07 00      lea d, [bp + 7] ; $num
3987   1CF3 2A            mov b, [d]
3988   1CF4 38 00 00      mov c, 0
3989   1CF7             ; --- START FACTORS
3990   1CF7 D7            push a
3991   1CF8 11            mov a, b
3992   1CF9 FD 2E 0A 00   mov32 cb, $0000000a
3992   1CFD 00 00 
3993   1CFF AE            div a, b ; 
3994   1D00 11            mov a, b
3995   1D01 27            mov b, a
3996   1D02 E4            pop a
3997   1D03             ; --- END FACTORS
3998   1D03 56            add b, a
3999   1D04 E4            pop a
4000   1D05             ; --- END TERMS
4001   1D05 E7            pop d
4002   1D06 FD 3E         mov [d], bl
4003   1D08             ; num = num / 10; 
4004   1D08 FA 07 00      lea d, [bp + 7] ; $num
4005   1D0B DA            push d
4006   1D0C FA 07 00      lea d, [bp + 7] ; $num
4007   1D0F 2A            mov b, [d]
4008   1D10 38 00 00      mov c, 0
4009   1D13             ; --- START FACTORS
4010   1D13 D7            push a
4011   1D14 11            mov a, b
4012   1D15 FD 2E 0A 00   mov32 cb, $0000000a
4012   1D19 00 00 
4013   1D1B AE            div a, b
4014   1D1C 27            mov b, a
4015   1D1D E4            pop a
4016   1D1E             ; --- END FACTORS
4017   1D1E E7            pop d
4018   1D1F FD 43         mov [d], b
4019   1D21             ; i++; 
4020   1D21 FA FA FF      lea d, [bp + -6] ; $i
4021   1D24 2A            mov b, [d]
4022   1D25 38 00 00      mov c, 0
4023   1D28 11            mov a, b
4024   1D29 FD 77         inc b
4025   1D2B FA FA FF      lea d, [bp + -6] ; $i
4026   1D2E FD 43         mov [d], b
4027   1D30 27            mov b, a
4028   1D31 0A BF 1C      jmp _while53_cond
4029   1D34             _while53_exit:
4030   1D34             ; while (i > 0) { 
4031   1D34             _while54_cond:
4032   1D34 FA FA FF      lea d, [bp + -6] ; $i
4033   1D37 2A            mov b, [d]
4034   1D38 38 00 00      mov c, 0
4035   1D3B             ; --- START RELATIONAL
4036   1D3B D7            push a
4037   1D3C 11            mov a, b
4038   1D3D FD 2E 00 00   mov32 cb, $00000000
4038   1D41 00 00 
4039   1D43 B0            cmp a, b
4040   1D44 FD 7F         sgt ; >
4041   1D46 E4            pop a
4042   1D47             ; --- END RELATIONAL
4043   1D47 C0 00 00      cmp b, 0
4044   1D4A C6 99 1D      je _while54_exit
4045   1D4D             _while54_block:
4046   1D4D             ; i--; 
4047   1D4D FA FA FF      lea d, [bp + -6] ; $i
4048   1D50 2A            mov b, [d]
4049   1D51 38 00 00      mov c, 0
4050   1D54 11            mov a, b
4051   1D55 FD 7D         dec b
4052   1D57 FA FA FF      lea d, [bp + -6] ; $i
4053   1D5A FD 43         mov [d], b
4054   1D5C 27            mov b, a
4055   1D5D             ; *dest++ = digits[i]; 
4056   1D5D FA 05 00      lea d, [bp + 5] ; $dest
4057   1D60 2A            mov b, [d]
4058   1D61 38 00 00      mov c, 0
4059   1D64 FD 77         inc b
4060   1D66 FA 05 00      lea d, [bp + 5] ; $dest
4061   1D69 FD 43         mov [d], b
4062   1D6B FD 7D         dec b
4063   1D6D D8            push b
4064   1D6E FA FC FF      lea d, [bp + -4] ; $digits
4065   1D71 D7            push a
4066   1D72 DA            push d
4067   1D73 FA FA FF      lea d, [bp + -6] ; $i
4068   1D76 2A            mov b, [d]
4069   1D77 38 00 00      mov c, 0
4070   1D7A E7            pop d
4071   1D7B 5A            add d, b
4072   1D7C E4            pop a
4073   1D7D 32            mov bl, [d]
4074   1D7E A7 00         mov bh, 0
4075   1D80 38 00 00      mov c, 0
4076   1D83 E7            pop d
4077   1D84 FD 3E         mov [d], bl
4078   1D86             ; len++; 
4079   1D86 FA F8 FF      lea d, [bp + -8] ; $len
4080   1D89 2A            mov b, [d]
4081   1D8A 38 00 00      mov c, 0
4082   1D8D 11            mov a, b
4083   1D8E FD 77         inc b
4084   1D90 FA F8 FF      lea d, [bp + -8] ; $len
4085   1D93 FD 43         mov [d], b
4086   1D95 27            mov b, a
4087   1D96 0A 34 1D      jmp _while54_cond
4088   1D99             _while54_exit:
4089   1D99             ; *dest = '\0'; 
4090   1D99 FA 05 00      lea d, [bp + 5] ; $dest
4091   1D9C 2A            mov b, [d]
4092   1D9D 38 00 00      mov c, 0
4093   1DA0 D8            push b
4094   1DA1 FD 2E 00 00   mov32 cb, $00000000
4094   1DA5 00 00 
4095   1DA7 E7            pop d
4096   1DA8 FD 3E         mov [d], bl
4097   1DAA             ; return len; 
4098   1DAA FA F8 FF      lea d, [bp + -8] ; $len
4099   1DAD 2A            mov b, [d]
4100   1DAE 38 00 00      mov c, 0
4101   1DB1 F9            leave
4102   1DB2 09            ret
4103   1DB3             
4104   1DB3             date:
4105   1DB3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4106   1DB6             
4107   1DB6             ; --- BEGIN INLINE ASM SEGMENT
4108   1DB6 19 00         mov al, 0 
4109   1DB8 05 07         syscall sys_datetime
4110   1DBA             ; --- END INLINE ASM SEGMENT
4111   1DBA             
4112   1DBA F9            leave
4113   1DBB 09            ret
4114   1DBC             
4115   1DBC             putchar:
4116   1DBC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4117   1DBF             
4118   1DBF             ; --- BEGIN INLINE ASM SEGMENT
4119   1DBF FA 05 00      lea d, [bp + 5] ; $c
4120   1DC2 1E            mov al, [d]
4121   1DC3 23            mov ah, al
4122   1DC4 07 CB 1F      call _putchar
4123   1DC7             ; --- END INLINE ASM SEGMENT
4124   1DC7             
4125   1DC7 F9            leave
4126   1DC8 09            ret
4127   1DC9             
4128   1DC9             getchar:
4129   1DC9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4130   1DCC             ; char c; 
4131   1DCC 52 01 00      sub sp, 1
4132   1DCF             
4133   1DCF             ; --- BEGIN INLINE ASM SEGMENT
4134   1DCF 07 C4 1F      call getch
4135   1DD2 1A            mov al, ah
4136   1DD3 FA 00 00      lea d, [bp + 0] ; $c
4137   1DD6 3E            mov [d], al
4138   1DD7             ; --- END INLINE ASM SEGMENT
4139   1DD7             
4140   1DD7             ; return c; 
4141   1DD7 FA 00 00      lea d, [bp + 0] ; $c
4142   1DDA 32            mov bl, [d]
4143   1DDB A7 00         mov bh, 0
4144   1DDD 38 00 00      mov c, 0
4145   1DE0 F9            leave
4146   1DE1 09            ret
4147   1DE2             
4148   1DE2             scann:
4149   1DE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4150   1DE5             ; int m; 
4151   1DE5 52 02 00      sub sp, 2
4152   1DE8             
4153   1DE8             ; --- BEGIN INLINE ASM SEGMENT
4154   1DE8 07 0F 22      call scan_u16d
4155   1DEB FA FF FF      lea d, [bp + -1] ; $m
4156   1DEE 43            mov [d], a
4157   1DEF             ; --- END INLINE ASM SEGMENT
4158   1DEF             
4159   1DEF             ; return m; 
4160   1DEF FA FF FF      lea d, [bp + -1] ; $m
4161   1DF2 2A            mov b, [d]
4162   1DF3 38 00 00      mov c, 0
4163   1DF6 F9            leave
4164   1DF7 09            ret
4165   1DF8             
4166   1DF8             puts:
4167   1DF8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4168   1DFB             
4169   1DFB             ; --- BEGIN INLINE ASM SEGMENT
4170   1DFB FA 05 00      lea d, [bp + 5] ; $s
4171   1DFE 15            mov a, [d]
4172   1DFF 3C            mov d, a
4173   1E00 07 15 21      call _puts
4174   1E03 10 00 0A      mov a, $0A00
4175   1E06 05 03         syscall sys_io
4176   1E08             ; --- END INLINE ASM SEGMENT
4177   1E08             
4178   1E08 F9            leave
4179   1E09 09            ret
4180   1E0A             
4181   1E0A             print:
4182   1E0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4183   1E0D             
4184   1E0D             ; --- BEGIN INLINE ASM SEGMENT
4185   1E0D FA 05 00      lea d, [bp + 5] ; $s
4186   1E10 FD 2A         mov d, [d]
4187   1E12 07 15 21      call _puts
4188   1E15             ; --- END INLINE ASM SEGMENT
4189   1E15             
4190   1E15 F9            leave
4191   1E16 09            ret
4192   1E17             
4193   1E17             getparam:
4194   1E17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4195   1E1A             ; char data; 
4196   1E1A 52 01 00      sub sp, 1
4197   1E1D             
4198   1E1D             ; --- BEGIN INLINE ASM SEGMENT
4199   1E1D 19 04         mov al, 4
4200   1E1F FA 05 00      lea d, [bp + 5] ; $address
4201   1E22 FD 2A         mov d, [d]
4202   1E24 05 0C         syscall sys_system
4203   1E26 FA 00 00      lea d, [bp + 0] ; $data
4204   1E29 FD 3E         mov [d], bl
4205   1E2B             ; --- END INLINE ASM SEGMENT
4206   1E2B             
4207   1E2B             ; return data; 
4208   1E2B FA 00 00      lea d, [bp + 0] ; $data
4209   1E2E 32            mov bl, [d]
4210   1E2F A7 00         mov bh, 0
4211   1E31 38 00 00      mov c, 0
4212   1E34 F9            leave
4213   1E35 09            ret
4214   1E36             
4215   1E36             clear:
4216   1E36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4217   1E39             ; print("\033[2J\033[H"); 
4218   1E39             ; --- START FUNCTION CALL
4219   1E39 26 17 28      mov b, _s8 ; "\033[2J\033[H"
4220   1E3C FD AB         swp b
4221   1E3E D8            push b
4222   1E3F 07 0A 1E      call print
4223   1E42 51 02 00      add sp, 2
4224   1E45             ; --- END FUNCTION CALL
4225   1E45 F9            leave
4226   1E46 09            ret
4227   1E47             
4228   1E47             abs:
4229   1E47 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4230   1E4A             ; return i < 0 ? -i : i; 
4231   1E4A             _ternary55_cond:
4232   1E4A FA 05 00      lea d, [bp + 5] ; $i
4233   1E4D 2A            mov b, [d]
4234   1E4E 38 00 00      mov c, 0
4235   1E51             ; --- START RELATIONAL
4236   1E51 D7            push a
4237   1E52 11            mov a, b
4238   1E53 FD 2E 00 00   mov32 cb, $00000000
4238   1E57 00 00 
4239   1E59 B0            cmp a, b
4240   1E5A FD 73         slt ; < (signed)
4241   1E5C E4            pop a
4242   1E5D             ; --- END RELATIONAL
4243   1E5D C0 00 00      cmp b, 0
4244   1E60 C6 6F 1E      je _ternary55_FALSE
4245   1E63             _ternary55_TRUE:
4246   1E63 FA 05 00      lea d, [bp + 5] ; $i
4247   1E66 2A            mov b, [d]
4248   1E67 38 00 00      mov c, 0
4249   1E6A FD 97         neg b
4250   1E6C 0A 76 1E      jmp _ternary55_exit
4251   1E6F             _ternary55_FALSE:
4252   1E6F FA 05 00      lea d, [bp + 5] ; $i
4253   1E72 2A            mov b, [d]
4254   1E73 38 00 00      mov c, 0
4255   1E76             _ternary55_exit:
4256   1E76 F9            leave
4257   1E77 09            ret
4258   1E78             
4259   1E78             loadfile:
4260   1E78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4261   1E7B             
4262   1E7B             ; --- BEGIN INLINE ASM SEGMENT
4263   1E7B FA 07 00      lea d, [bp + 7] ; $destination
4264   1E7E 15            mov a, [d]
4265   1E7F 4F            mov di, a
4266   1E80 FA 05 00      lea d, [bp + 5] ; $filename
4267   1E83 FD 2A         mov d, [d]
4268   1E85 19 14         mov al, 20
4269   1E87 05 04         syscall sys_filesystem
4270   1E89             ; --- END INLINE ASM SEGMENT
4271   1E89             
4272   1E89 F9            leave
4273   1E8A 09            ret
4274   1E8B             
4275   1E8B             create_file:
4276   1E8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4277   1E8E F9            leave
4278   1E8F 09            ret
4279   1E90             
4280   1E90             delete_file:
4281   1E90 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4282   1E93             
4283   1E93             ; --- BEGIN INLINE ASM SEGMENT
4284   1E93 FA 05 00      lea d, [bp + 5] ; $filename
4285   1E96 19 0A         mov al, 10
4286   1E98 05 04         syscall sys_filesystem
4287   1E9A             ; --- END INLINE ASM SEGMENT
4288   1E9A             
4289   1E9A F9            leave
4290   1E9B 09            ret
4291   1E9C             
4292   1E9C             load_hex:
4293   1E9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4294   1E9F             ; char *temp; 
4295   1E9F 52 02 00      sub sp, 2
4296   1EA2             ; temp = alloc(32768); 
4297   1EA2 FA FF FF      lea d, [bp + -1] ; $temp
4298   1EA5 DA            push d
4299   1EA6             ; --- START FUNCTION CALL
4300   1EA6 FD 2E 00 80   mov32 cb, $00008000
4300   1EAA 00 00 
4301   1EAC FD AB         swp b
4302   1EAE D8            push b
4303   1EAF 07 75 09      call alloc
4304   1EB2 51 02 00      add sp, 2
4305   1EB5             ; --- END FUNCTION CALL
4306   1EB5 E7            pop d
4307   1EB6 FD 43         mov [d], b
4308   1EB8             
4309   1EB8             ; --- BEGIN INLINE ASM SEGMENT
4310   1EB8               
4311   1EB8               
4312   1EB8               
4313   1EB8             _load_hex:
4314   1EB8 FA 05 00      lea d, [bp + 5] ; $destination
4315   1EBB FD 2A         mov d, [d]
4316   1EBD FD 50         mov di, d
4317   1EBF FA FF FF      lea d, [bp + -1] ; $temp
4318   1EC2 FD 2A         mov d, [d]
4319   1EC4 38 00 00      mov c, 0
4320   1EC7 48            mov a, sp
4321   1EC8 77            inc a
4322   1EC9 3C            mov d, a          
4323   1ECA 07 D2 1F      call _gets        
4324   1ECD 4D            mov si, a
4325   1ECE             __load_hex_loop:
4326   1ECE F6            lodsb             
4327   1ECF B9 00         cmp al, 0         
4328   1ED1 C6 DF 1E      jz __load_hex_ret
4329   1ED4 36            mov bh, al
4330   1ED5 F6            lodsb
4331   1ED6 2F            mov bl, al
4332   1ED7 07 89 1F      call _atoi        
4333   1EDA F7            stosb             
4334   1EDB 78            inc c
4335   1EDC 0A CE 1E      jmp __load_hex_loop
4336   1EDF             __load_hex_ret:
4337   1EDF             ; --- END INLINE ASM SEGMENT
4338   1EDF             
4339   1EDF F9            leave
4340   1EE0 09            ret
4341   1EE1             
4342   1EE1             include_stdio_asm:
4343   1EE1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4344   1EE4             
4345   1EE4             ; --- BEGIN INLINE ASM SEGMENT
4346   1EE4             .include "lib/asm/stdio.asm"
0001+  1EE4             ;-----------------------------------------------------------------------------
0002+  1EE4             ; stdio.s
0003+  1EE4             ;-----------------------------------------------------------------------------
0004+  1EE4             .include "lib/asm/string.asm"
0001++ 1EE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1EE4             ; string.s
0003++ 1EE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1EE4             
0005++ 1EE4             
0006++ 1EE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1EE4             ; _strrev
0008++ 1EE4             ; reverse a string
0009++ 1EE4             ; D = string address
0010++ 1EE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1EE4             ; 01234
0012++ 1EE4             _strrev:
0013++ 1EE4 4B          	pusha
0014++ 1EE5 07 2B 1F    	call _strlen	; length in C
0015++ 1EE8 12          	mov a, c
0016++ 1EE9 AF 01 00    	cmp a, 1
0017++ 1EEC D0 06 1F    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1EEF 7D          	dec a
0019++ 1EF0 FD 4E       	mov si, d	; beginning of string
0020++ 1EF2 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1EF4 59          	add d, a	; end of string
0022++ 1EF5 12          	mov a, c
0023++ 1EF6 FD 9B       	shr a		; divide by 2
0024++ 1EF8 39          	mov c, a	; C now counts the steps
0025++ 1EF9             _strrev_L0:
0026++ 1EF9 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1EFA F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1EFB 3E          	mov [d], al	; store left char into right side
0029++ 1EFC 1B          	mov al, bl
0030++ 1EFD F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1EFE 7E          	dec c
0032++ 1EFF 7F          	dec d
0033++ 1F00 C2 00 00    	cmp c, 0
0034++ 1F03 C7 F9 1E    	jne _strrev_L0
0035++ 1F06             _strrev_end:
0036++ 1F06 4C          	popa
0037++ 1F07 09          	ret
0038++ 1F08             	
0039++ 1F08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1F08             ; _strchr
0041++ 1F08             ; search string in D for char in AL
0042++ 1F08             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1F08             _strchr:
0044++ 1F08             _strchr_L0:
0045++ 1F08 32          	mov bl, [d]
0046++ 1F09 C1 00       	cmp bl, 0
0047++ 1F0B C6 16 1F    	je _strchr_end
0048++ 1F0E BA          	cmp al, bl
0049++ 1F0F C6 16 1F    	je _strchr_end
0050++ 1F12 79          	inc d
0051++ 1F13 0A 08 1F    	jmp _strchr_L0
0052++ 1F16             _strchr_end:
0053++ 1F16 1B          	mov al, bl
0054++ 1F17 09          	ret
0055++ 1F18             
0056++ 1F18             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1F18             ; _strstr
0058++ 1F18             ; find sub-string
0059++ 1F18             ; str1 in SI
0060++ 1F18             ; str2 in DI
0061++ 1F18             ; SI points to end of source string
0062++ 1F18             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1F18             _strstr:
0064++ 1F18 DB          	push al
0065++ 1F19 DA          	push d
0066++ 1F1A E3          	push di
0067++ 1F1B             _strstr_loop:
0068++ 1F1B F3          	cmpsb					; compare a byte of the strings
0069++ 1F1C C7 27 1F    	jne _strstr_ret
0070++ 1F1F FC 00 00    	lea d, [di + 0]
0071++ 1F22 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1F24 C7 1B 1F    	jne _strstr_loop				; equal chars but not at end
0073++ 1F27             _strstr_ret:
0074++ 1F27 F0          	pop di
0075++ 1F28 E7          	pop d
0076++ 1F29 E8          	pop al
0077++ 1F2A 09          	ret
0078++ 1F2B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1F2B             ; length of null terminated string
0080++ 1F2B             ; result in C
0081++ 1F2B             ; pointer in D
0082++ 1F2B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1F2B             _strlen:
0084++ 1F2B DA          	push d
0085++ 1F2C 38 00 00    	mov c, 0
0086++ 1F2F             _strlen_L1:
0087++ 1F2F BD 00       	cmp byte [d], 0
0088++ 1F31 C6 39 1F    	je _strlen_ret
0089++ 1F34 79          	inc d
0090++ 1F35 78          	inc c
0091++ 1F36 0A 2F 1F    	jmp _strlen_L1
0092++ 1F39             _strlen_ret:
0093++ 1F39 E7          	pop d
0094++ 1F3A 09          	ret
0095++ 1F3B             
0096++ 1F3B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1F3B             ; STRCMP
0098++ 1F3B             ; compare two strings
0099++ 1F3B             ; str1 in SI
0100++ 1F3B             ; str2 in DI
0101++ 1F3B             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1F3B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1F3B             _strcmp:
0104++ 1F3B DB          	push al
0105++ 1F3C DA          	push d
0106++ 1F3D E3          	push di
0107++ 1F3E E2          	push si
0108++ 1F3F             _strcmp_loop:
0109++ 1F3F F3          	cmpsb					; compare a byte of the strings
0110++ 1F40 C7 4B 1F    	jne _strcmp_ret
0111++ 1F43 FB FF FF    	lea d, [si +- 1]
0112++ 1F46 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1F48 C7 3F 1F    	jne _strcmp_loop				; equal chars but not at end
0114++ 1F4B             _strcmp_ret:
0115++ 1F4B EF          	pop si
0116++ 1F4C F0          	pop di
0117++ 1F4D E7          	pop d
0118++ 1F4E E8          	pop al
0119++ 1F4F 09          	ret
0120++ 1F50             
0121++ 1F50             
0122++ 1F50             ; STRCPY
0123++ 1F50             ; copy null terminated string from SI to DI
0124++ 1F50             ; source in SI
0125++ 1F50             ; destination in DI
0126++ 1F50             _strcpy:
0127++ 1F50 E2          	push si
0128++ 1F51 E3          	push di
0129++ 1F52 DB          	push al
0130++ 1F53             _strcpy_L1:
0131++ 1F53 F6          	lodsb
0132++ 1F54 F7          	stosb
0133++ 1F55 B9 00       	cmp al, 0
0134++ 1F57 C7 53 1F    	jne _strcpy_L1
0135++ 1F5A             _strcpy_end:
0136++ 1F5A E8          	pop al
0137++ 1F5B F0          	pop di
0138++ 1F5C EF          	pop si
0139++ 1F5D 09          	ret
0140++ 1F5E             
0141++ 1F5E             ; STRCAT
0142++ 1F5E             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1F5E             ; source in SI
0144++ 1F5E             ; destination in DI
0145++ 1F5E             _strcat:
0146++ 1F5E E2          	push si
0147++ 1F5F E3          	push di
0148++ 1F60 D7          	push a
0149++ 1F61 DA          	push d
0150++ 1F62 50          	mov a, di
0151++ 1F63 3C          	mov d, a
0152++ 1F64             _strcat_goto_end_L1:
0153++ 1F64 BD 00       	cmp byte[d], 0
0154++ 1F66 C6 6D 1F    	je _strcat_start
0155++ 1F69 79          	inc d
0156++ 1F6A 0A 64 1F    	jmp _strcat_goto_end_L1
0157++ 1F6D             _strcat_start:
0158++ 1F6D FD 50       	mov di, d
0159++ 1F6F             _strcat_L1:
0160++ 1F6F F6          	lodsb
0161++ 1F70 F7          	stosb
0162++ 1F71 B9 00       	cmp al, 0
0163++ 1F73 C7 6F 1F    	jne _strcat_L1
0164++ 1F76             _strcat_end:
0165++ 1F76 E7          	pop d
0166++ 1F77 E4          	pop a
0167++ 1F78 F0          	pop di
0168++ 1F79 EF          	pop si
0169++ 1F7A 09          	ret
0170++ 1F7B             
0171++ 1F7B             
0005+  1F7B             
0006+  1F7B             ;-----------------------------------------------------------------------------
0007+  1F7B             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1F7B             ; ASCII in BL
0009+  1F7B             ; result in AL
0010+  1F7B             ; ascii for F = 0100 0110
0011+  1F7B             ; ascii for 9 = 0011 1001
0012+  1F7B             ;-----------------------------------------------------------------------------
0013+  1F7B             hex_ascii_encode:
0014+  1F7B 1B            mov al, bl
0015+  1F7C 93 40         test al, $40        ; test if letter or number
0016+  1F7E C7 84 1F      jnz hex_letter
0017+  1F81 87 0F         and al, $0F        ; get number
0018+  1F83 09            ret
0019+  1F84             hex_letter:
0020+  1F84 87 0F         and al, $0F        ; get letter
0021+  1F86 6A 09         add al, 9
0022+  1F88 09            ret
0023+  1F89             
0024+  1F89             ;-----------------------------------------------------------------------------
0025+  1F89             ; ATOI
0026+  1F89             ; 2 letter hex string in B
0027+  1F89             ; 8bit integer returned in AL
0028+  1F89             ;-----------------------------------------------------------------------------
0029+  1F89             _atoi:
0030+  1F89 D8            push b
0031+  1F8A 07 7B 1F      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1F8D 30            mov bl, bh
0033+  1F8E DB            push al          ; save a
0034+  1F8F 07 7B 1F      call hex_ascii_encode
0035+  1F92 EA            pop bl  
0036+  1F93 FD 9E 04      shl al, 4
0037+  1F96 8C            or al, bl
0038+  1F97 E5            pop b
0039+  1F98 09            ret  
0040+  1F99             
0041+  1F99             
0042+  1F99             ;-----------------------------------------------------------------------------
0043+  1F99             ; ITOA
0044+  1F99             ; 8bit value in BL
0045+  1F99             ; 2 byte ASCII result in A
0046+  1F99             ;-----------------------------------------------------------------------------
0047+  1F99             _itoa:
0048+  1F99 DA            push d
0049+  1F9A D8            push b
0050+  1F9B A7 00         mov bh, 0
0051+  1F9D FD A4 04      shr bl, 4  
0052+  1FA0 74            mov d, b
0053+  1FA1 1F 49 22      mov al, [d + s_hex_digits]
0054+  1FA4 23            mov ah, al
0055+  1FA5               
0056+  1FA5 E5            pop b
0057+  1FA6 D8            push b
0058+  1FA7 A7 00         mov bh, 0
0059+  1FA9 FD 87 0F      and bl, $0F
0060+  1FAC 74            mov d, b
0061+  1FAD 1F 49 22      mov al, [d + s_hex_digits]
0062+  1FB0 E5            pop b
0063+  1FB1 E7            pop d
0064+  1FB2 09            ret
0065+  1FB3             
0066+  1FB3             ;-----------------------------------------------------------------------------
0067+  1FB3             ; HEX STRING TO BINARY
0068+  1FB3             ; di = destination address
0069+  1FB3             ; si = source
0070+  1FB3             ;-----------------------------------------------------------------------------
0071+  1FB3             _hex_to_int:
0072+  1FB3             _hex_to_int_L1:
0073+  1FB3 F6            lodsb          ; load from [SI] to AL
0074+  1FB4 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1FB6 C6 C3 1F      jz _hex_to_int_ret
0076+  1FB9 36            mov bh, al
0077+  1FBA F6            lodsb
0078+  1FBB 2F            mov bl, al
0079+  1FBC 07 89 1F      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1FBF F7            stosb          ; store AL to [DI]
0081+  1FC0 0A B3 1F      jmp _hex_to_int_L1
0082+  1FC3             _hex_to_int_ret:
0083+  1FC3 09            ret    
0084+  1FC4             
0085+  1FC4             ;-----------------------------------------------------------------------------
0086+  1FC4             ; GETCHAR
0087+  1FC4             ; char in ah
0088+  1FC4             ;-----------------------------------------------------------------------------
0089+  1FC4             getch:
0090+  1FC4 DB            push al
0091+  1FC5             getch_retry:
0092+  1FC5 19 01         mov al, 1
0093+  1FC7 05 03         syscall sys_io      ; receive in AH
0094+  1FC9 E8            pop al
0095+  1FCA 09            ret
0096+  1FCB             
0097+  1FCB             ;-----------------------------------------------------------------------------
0098+  1FCB             ; PUTCHAR
0099+  1FCB             ; char in ah
0100+  1FCB             ;-----------------------------------------------------------------------------
0101+  1FCB             _putchar:
0102+  1FCB D7            push a
0103+  1FCC 19 00         mov al, 0
0104+  1FCE 05 03         syscall sys_io      ; char in AH
0105+  1FD0 E4            pop a
0106+  1FD1 09            ret
0107+  1FD2             
0108+  1FD2             ;-----------------------------------------------------------------------------
0109+  1FD2             ;; INPUT A STRING
0110+  1FD2             ;; terminates with null
0111+  1FD2             ;; pointer in D
0112+  1FD2             ;-----------------------------------------------------------------------------
0113+  1FD2             _gets:
0114+  1FD2 D7            push a
0115+  1FD3 DA            push d
0116+  1FD4             _gets_loop:
0117+  1FD4 19 01         mov al, 1
0118+  1FD6 05 03         syscall sys_io      ; receive in AH
0119+  1FD8 B9 00         cmp al, 0        ; check error code (AL)
0120+  1FDA C6 D4 1F      je _gets_loop      ; if no char received, retry
0121+  1FDD             
0122+  1FDD 76 1B         cmp ah, 27
0123+  1FDF C6 00 20      je _gets_ansi_esc
0124+  1FE2 76 0A         cmp ah, $0A        ; LF
0125+  1FE4 C6 6B 20      je _gets_end
0126+  1FE7 76 0D         cmp ah, $0D        ; CR
0127+  1FE9 C6 6B 20      je _gets_end
0128+  1FEC 76 5C         cmp ah, $5C        ; '\\'
0129+  1FEE C6 2C 20      je _gets_escape
0130+  1FF1               
0131+  1FF1 76 08         cmp ah, $08      ; check for backspace
0132+  1FF3 C6 FC 1F      je _gets_backspace
0133+  1FF6             
0134+  1FF6 1A            mov al, ah
0135+  1FF7 3E            mov [d], al
0136+  1FF8 79            inc d
0137+  1FF9 0A D4 1F      jmp _gets_loop
0138+  1FFC             _gets_backspace:
0139+  1FFC 7F            dec d
0140+  1FFD 0A D4 1F      jmp _gets_loop
0141+  2000             _gets_ansi_esc:
0142+  2000 19 01         mov al, 1
0143+  2002 05 03         syscall sys_io        ; receive in AH without echo
0144+  2004 B9 00         cmp al, 0          ; check error code (AL)
0145+  2006 C6 00 20      je _gets_ansi_esc    ; if no char received, retry
0146+  2009 76 5B         cmp ah, '['
0147+  200B C7 D4 1F      jne _gets_loop
0148+  200E             _gets_ansi_esc_2:
0149+  200E 19 01         mov al, 1
0150+  2010 05 03         syscall sys_io          ; receive in AH without echo
0151+  2012 B9 00         cmp al, 0            ; check error code (AL)
0152+  2014 C6 0E 20      je _gets_ansi_esc_2  ; if no char received, retry
0153+  2017 76 44         cmp ah, 'D'
0154+  2019 C6 24 20      je _gets_left_arrow
0155+  201C 76 43         cmp ah, 'C'
0156+  201E C6 28 20      je _gets_right_arrow
0157+  2021 0A D4 1F      jmp _gets_loop
0158+  2024             _gets_left_arrow:
0159+  2024 7F            dec d
0160+  2025 0A D4 1F      jmp _gets_loop
0161+  2028             _gets_right_arrow:
0162+  2028 79            inc d
0163+  2029 0A D4 1F      jmp _gets_loop
0164+  202C             _gets_escape:
0165+  202C 19 01         mov al, 1
0166+  202E 05 03         syscall sys_io      ; receive in AH
0167+  2030 B9 00         cmp al, 0        ; check error code (AL)
0168+  2032 C6 2C 20      je _gets_escape      ; if no char received, retry
0169+  2035 76 6E         cmp ah, 'n'
0170+  2037 C6 56 20      je _gets_LF
0171+  203A 76 72         cmp ah, 'r'
0172+  203C C6 5D 20      je _gets_CR
0173+  203F 76 30         cmp ah, '0'
0174+  2041 C6 64 20      je _gets_NULL
0175+  2044 76 5C         cmp ah, $5C  ; '\'
0176+  2046 C6 4F 20      je _gets_slash
0177+  2049 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  204A 3E            mov [d], al
0179+  204B 79            inc d
0180+  204C 0A D4 1F      jmp _gets_loop
0181+  204F             _gets_slash:
0182+  204F 19 5C         mov al, $5C
0183+  2051 3E            mov [d], al
0184+  2052 79            inc d
0185+  2053 0A D4 1F      jmp _gets_loop
0186+  2056             _gets_LF:
0187+  2056 19 0A         mov al, $0A
0188+  2058 3E            mov [d], al
0189+  2059 79            inc d
0190+  205A 0A D4 1F      jmp _gets_loop
0191+  205D             _gets_CR:
0192+  205D 19 0D         mov al, $0D
0193+  205F 3E            mov [d], al
0194+  2060 79            inc d
0195+  2061 0A D4 1F      jmp _gets_loop
0196+  2064             _gets_NULL:
0197+  2064 19 00         mov al, $00
0198+  2066 3E            mov [d], al
0199+  2067 79            inc d
0200+  2068 0A D4 1F      jmp _gets_loop
0201+  206B             _gets_end:
0202+  206B 19 00         mov al, 0
0203+  206D 3E            mov [d], al        ; terminate string
0204+  206E E7            pop d
0205+  206F E4            pop a
0206+  2070 09            ret
0207+  2071             
0208+  2071             ;-----------------------------------------------------------------------------
0209+  2071             ;; INPUT TEXT
0210+  2071             ;; terminated with CTRL+D
0211+  2071             ;; pointer in D
0212+  2071             ;-----------------------------------------------------------------------------
0213+  2071             _gettxt:
0214+  2071 D7            push a
0215+  2072 DA            push d
0216+  2073             _gettxt_loop:
0217+  2073 19 01         mov al, 1
0218+  2075 05 03         syscall sys_io      ; receive in AH
0219+  2077 B9 00         cmp al, 0        ; check error code (AL)
0220+  2079 C6 73 20      je _gettxt_loop    ; if no char received, retry
0221+  207C 76 04         cmp ah, 4      ; EOT
0222+  207E C6 BC 20      je _gettxt_end
0223+  2081 76 08         cmp ah, $08      ; check for backspace
0224+  2083 C6 B8 20      je _gettxt_backspace
0225+  2086 76 5C         cmp ah, $5C        ; '\'
0226+  2088 C6 91 20      je _gettxt_escape
0227+  208B 1A            mov al, ah
0228+  208C 3E            mov [d], al
0229+  208D 79            inc d
0230+  208E 0A 73 20      jmp _gettxt_loop
0231+  2091             _gettxt_escape:
0232+  2091 19 01         mov al, 1
0233+  2093 05 03         syscall sys_io      ; receive in AH
0234+  2095 B9 00         cmp al, 0        ; check error code (AL)
0235+  2097 C6 91 20      je _gettxt_escape    ; if no char received, retry
0236+  209A 76 6E         cmp ah, 'n'
0237+  209C C6 AA 20      je _gettxt_LF
0238+  209F 76 72         cmp ah, 'r'
0239+  20A1 C6 B1 20      je _gettxt_CR
0240+  20A4 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  20A5 3E            mov [d], al
0242+  20A6 79            inc d
0243+  20A7 0A 73 20      jmp _gettxt_loop
0244+  20AA             _gettxt_LF:
0245+  20AA 19 0A         mov al, $0A
0246+  20AC 3E            mov [d], al
0247+  20AD 79            inc d
0248+  20AE 0A 73 20      jmp _gettxt_loop
0249+  20B1             _gettxt_CR:
0250+  20B1 19 0D         mov al, $0D
0251+  20B3 3E            mov [d], al
0252+  20B4 79            inc d
0253+  20B5 0A 73 20      jmp _gettxt_loop
0254+  20B8             _gettxt_backspace:
0255+  20B8 7F            dec d
0256+  20B9 0A 73 20      jmp _gettxt_loop
0257+  20BC             _gettxt_end:
0258+  20BC 19 00         mov al, 0
0259+  20BE 3E            mov [d], al        ; terminate string
0260+  20BF E7            pop d
0261+  20C0 E4            pop a
0262+  20C1 09            ret
0263+  20C2             
0264+  20C2             ;-----------------------------------------------------------------------------
0265+  20C2             ; PRINT NEW LINE
0266+  20C2             ;-----------------------------------------------------------------------------
0267+  20C2             printnl:
0268+  20C2 D7            push a
0269+  20C3 10 00 0A      mov a, $0A00
0270+  20C6 05 03         syscall sys_io
0271+  20C8 10 00 0D      mov a, $0D00
0272+  20CB 05 03         syscall sys_io
0273+  20CD E4            pop a
0274+  20CE 09            ret
0275+  20CF             
0276+  20CF             ;-----------------------------------------------------------------------------
0277+  20CF             ; _strtoint
0278+  20CF             ; 4 digit hex string number in d
0279+  20CF             ; integer returned in A
0280+  20CF             ;-----------------------------------------------------------------------------
0281+  20CF             _strtointx:
0282+  20CF D8            push b
0283+  20D0 32            mov bl, [d]
0284+  20D1 37            mov bh, bl
0285+  20D2 33 01 00      mov bl, [d + 1]
0286+  20D5 07 89 1F      call _atoi        ; convert to int in AL
0287+  20D8 23            mov ah, al        ; move to AH
0288+  20D9 33 02 00      mov bl, [d + 2]
0289+  20DC 37            mov bh, bl
0290+  20DD 33 03 00      mov bl, [d + 3]
0291+  20E0 07 89 1F      call _atoi        ; convert to int in AL
0292+  20E3 E5            pop b
0293+  20E4 09            ret
0294+  20E5             
0295+  20E5             ;-----------------------------------------------------------------------------
0296+  20E5             ; _strtoint
0297+  20E5             ; 5 digit base10 string number in d
0298+  20E5             ; integer returned in A
0299+  20E5             ;-----------------------------------------------------------------------------
0300+  20E5             _strtoint:
0301+  20E5 E2            push si
0302+  20E6 D8            push b
0303+  20E7 D9            push c
0304+  20E8 DA            push d
0305+  20E9 07 2B 1F      call _strlen      ; get string length in C
0306+  20EC 7E            dec c
0307+  20ED FD 4E         mov si, d
0308+  20EF 12            mov a, c
0309+  20F0 FD 99         shl a
0310+  20F2 3B 61 22      mov d, table_power
0311+  20F5 59            add d, a
0312+  20F6 38 00 00      mov c, 0
0313+  20F9             _strtoint_L0:
0314+  20F9 F6            lodsb      ; load ASCII to al
0315+  20FA B9 00         cmp al, 0
0316+  20FC C6 0F 21      je _strtoint_end
0317+  20FF 6F 30         sub al, $30    ; make into integer
0318+  2101 22 00         mov ah, 0
0319+  2103 2A            mov b, [d]
0320+  2104 AC            mul a, b      ; result in B since it fits in 16bits
0321+  2105 11            mov a, b
0322+  2106 28            mov b, c
0323+  2107 54            add a, b
0324+  2108 39            mov c, a
0325+  2109 63 02 00      sub d, 2
0326+  210C 0A F9 20      jmp _strtoint_L0
0327+  210F             _strtoint_end:
0328+  210F 12            mov a, c
0329+  2110 E7            pop d
0330+  2111 E6            pop c
0331+  2112 E5            pop b
0332+  2113 EF            pop si
0333+  2114 09            ret
0334+  2115             
0335+  2115             ;-----------------------------------------------------------------------------
0336+  2115             ; PRINT NULL TERMINATED STRING
0337+  2115             ; pointer in D
0338+  2115             ;-----------------------------------------------------------------------------
0339+  2115             _puts:
0340+  2115 D7            push a
0341+  2116 DA            push d
0342+  2117             _puts_L1:
0343+  2117 1E            mov al, [d]
0344+  2118 B9 00         cmp al, 0
0345+  211A C6 26 21      jz _puts_END
0346+  211D 23            mov ah, al
0347+  211E 19 00         mov al, 0
0348+  2120 05 03         syscall sys_io
0349+  2122 79            inc d
0350+  2123 0A 17 21      jmp _puts_L1
0351+  2126             _puts_END:
0352+  2126 E7            pop d
0353+  2127 E4            pop a
0354+  2128 09            ret
0355+  2129             
0356+  2129             ;-----------------------------------------------------------------------------
0357+  2129             ; PRINT N SIZE STRING
0358+  2129             ; pointer in D
0359+  2129             ; size in C
0360+  2129             ;-----------------------------------------------------------------------------
0361+  2129             _putsn:
0362+  2129 DB            push al
0363+  212A DA            push d
0364+  212B D9            push c
0365+  212C             _putsn_L0:
0366+  212C 1E            mov al, [d]
0367+  212D 23            mov ah, al
0368+  212E 19 00         mov al, 0
0369+  2130 05 03         syscall sys_io
0370+  2132 79            inc d
0371+  2133 7E            dec c  
0372+  2134 C2 00 00      cmp c, 0
0373+  2137 C7 2C 21      jne _putsn_L0
0374+  213A             _putsn_end:
0375+  213A E6            pop c
0376+  213B E7            pop d
0377+  213C E8            pop al
0378+  213D 09            ret
0379+  213E             
0380+  213E             ;-----------------------------------------------------------------------------
0381+  213E             ; print 16bit decimal number
0382+  213E             ; input number in A
0383+  213E             ;-----------------------------------------------------------------------------
0384+  213E             print_u16d:
0385+  213E D7            push a
0386+  213F D8            push b
0387+  2140 26 10 27      mov b, 10000
0388+  2143 AE            div a, b      ; get 10000's coeff.
0389+  2144 07 66 21      call print_number
0390+  2147 11            mov a, b
0391+  2148 26 E8 03      mov b, 1000
0392+  214B AE            div a, b      ; get 1000's coeff.
0393+  214C 07 66 21      call print_number
0394+  214F 11            mov a, b
0395+  2150 26 64 00      mov b, 100
0396+  2153 AE            div a, b
0397+  2154 07 66 21      call print_number
0398+  2157 11            mov a, b
0399+  2158 26 0A 00      mov b, 10
0400+  215B AE            div a, b
0401+  215C 07 66 21      call print_number
0402+  215F 1B            mov al, bl      ; 1's coeff in bl
0403+  2160 07 66 21      call print_number
0404+  2163 E5            pop b
0405+  2164 E4            pop a
0406+  2165 09            ret
0407+  2166             
0408+  2166             ;-----------------------------------------------------------------------------
0409+  2166             ; print AL
0410+  2166             ;-----------------------------------------------------------------------------
0411+  2166             print_number:
0412+  2166 6A 30         add al, $30
0413+  2168 23            mov ah, al
0414+  2169 07 CB 1F      call _putchar
0415+  216C 09            ret
0416+  216D             
0417+  216D             ;-----------------------------------------------------------------------------
0418+  216D             ; PRINT 16BIT HEX INTEGER
0419+  216D             ; integer value in reg B
0420+  216D             ;-----------------------------------------------------------------------------
0421+  216D             print_u16x:
0422+  216D D7            push a
0423+  216E D8            push b
0424+  216F DD            push bl
0425+  2170 30            mov bl, bh
0426+  2171 07 99 1F      call _itoa        ; convert bh to char in A
0427+  2174 2F            mov bl, al        ; save al
0428+  2175 19 00         mov al, 0
0429+  2177 05 03         syscall sys_io        ; display AH
0430+  2179 24            mov ah, bl        ; retrieve al
0431+  217A 19 00         mov al, 0
0432+  217C 05 03         syscall sys_io        ; display AL
0433+  217E             
0434+  217E EA            pop bl
0435+  217F 07 99 1F      call _itoa        ; convert bh to char in A
0436+  2182 2F            mov bl, al        ; save al
0437+  2183 19 00         mov al, 0
0438+  2185 05 03         syscall sys_io        ; display AH
0439+  2187 24            mov ah, bl        ; retrieve al
0440+  2188 19 00         mov al, 0
0441+  218A 05 03         syscall sys_io        ; display AL
0442+  218C             
0443+  218C E5            pop b
0444+  218D E4            pop a
0445+  218E 09            ret
0446+  218F             
0447+  218F             ;-----------------------------------------------------------------------------
0448+  218F             ; INPUT 16BIT HEX INTEGER
0449+  218F             ; read 16bit integer into A
0450+  218F             ;-----------------------------------------------------------------------------
0451+  218F             scan_u16x:
0452+  218F F8 10 00      enter 16
0453+  2192 D8            push b
0454+  2193 DA            push d
0455+  2194             
0456+  2194 FA F1 FF      lea d, [bp + -15]
0457+  2197 07 D2 1F      call _gets        ; get number
0458+  219A             
0459+  219A 32            mov bl, [d]
0460+  219B 37            mov bh, bl
0461+  219C 33 01 00      mov bl, [d + 1]
0462+  219F 07 89 1F      call _atoi        ; convert to int in AL
0463+  21A2 23            mov ah, al        ; move to AH
0464+  21A3             
0465+  21A3 33 02 00      mov bl, [d + 2]
0466+  21A6 37            mov bh, bl
0467+  21A7 33 03 00      mov bl, [d + 3]
0468+  21AA 07 89 1F      call _atoi        ; convert to int in AL
0469+  21AD             
0470+  21AD E7            pop d
0471+  21AE E5            pop b
0472+  21AF F9            leave
0473+  21B0 09            ret
0474+  21B1             
0475+  21B1             ;-----------------------------------------------------------------------------
0476+  21B1             ; PRINT 8bit HEX INTEGER
0477+  21B1             ; integer value in reg bl
0478+  21B1             ;-----------------------------------------------------------------------------
0479+  21B1             print_u8x:
0480+  21B1 D7            push a
0481+  21B2 DD            push bl
0482+  21B3             
0483+  21B3 07 99 1F      call _itoa        ; convert bl to char in A
0484+  21B6 2F            mov bl, al        ; save al
0485+  21B7 19 00         mov al, 0
0486+  21B9 05 03         syscall sys_io        ; display AH
0487+  21BB 24            mov ah, bl        ; retrieve al
0488+  21BC 19 00         mov al, 0
0489+  21BE 05 03         syscall sys_io        ; display AL
0490+  21C0             
0491+  21C0 EA            pop bl
0492+  21C1 E4            pop a
0493+  21C2 09            ret
0494+  21C3             
0495+  21C3             ;-----------------------------------------------------------------------------
0496+  21C3             ; print 8bit decimal unsigned number
0497+  21C3             ; input number in AL
0498+  21C3             ;-----------------------------------------------------------------------------
0499+  21C3             print_u8d:
0500+  21C3 D7            push a
0501+  21C4 D8            push b
0502+  21C5             
0503+  21C5 22 00         mov ah, 0
0504+  21C7 26 64 00      mov b, 100
0505+  21CA AE            div a, b
0506+  21CB D8            push b      ; save remainder
0507+  21CC B9 00         cmp al, 0
0508+  21CE C6 D8 21      je skip100
0509+  21D1 6A 30         add al, $30
0510+  21D3 23            mov ah, al
0511+  21D4 19 00         mov al, 0
0512+  21D6 05 03         syscall sys_io  ; print coeff
0513+  21D8             skip100:
0514+  21D8 E4            pop a
0515+  21D9 22 00         mov ah, 0
0516+  21DB 26 0A 00      mov b, 10
0517+  21DE AE            div a, b
0518+  21DF D8            push b      ; save remainder
0519+  21E0 B9 00         cmp al, 0
0520+  21E2 C6 EC 21      je skip10
0521+  21E5 6A 30         add al, $30
0522+  21E7 23            mov ah, al
0523+  21E8 19 00         mov al, 0
0524+  21EA 05 03         syscall sys_io  ; print coeff
0525+  21EC             skip10:
0526+  21EC E4            pop a
0527+  21ED 1B            mov al, bl
0528+  21EE 6A 30         add al, $30
0529+  21F0 23            mov ah, al
0530+  21F1 19 00         mov al, 0
0531+  21F3 05 03         syscall sys_io  ; print coeff
0532+  21F5 E5            pop b
0533+  21F6 E4            pop a
0534+  21F7 09            ret
0535+  21F8             
0536+  21F8             ;-----------------------------------------------------------------------------
0537+  21F8             ; INPUT 8BIT HEX INTEGER
0538+  21F8             ; read 8bit integer into AL
0539+  21F8             ;-----------------------------------------------------------------------------
0540+  21F8             scan_u8x:
0541+  21F8 F8 04 00      enter 4
0542+  21FB D8            push b
0543+  21FC DA            push d
0544+  21FD             
0545+  21FD FA FD FF      lea d, [bp + -3]
0546+  2200 07 D2 1F      call _gets        ; get number
0547+  2203             
0548+  2203 32            mov bl, [d]
0549+  2204 37            mov bh, bl
0550+  2205 33 01 00      mov bl, [d + 1]
0551+  2208 07 89 1F      call _atoi        ; convert to int in AL
0552+  220B             
0553+  220B E7            pop d
0554+  220C E5            pop b
0555+  220D F9            leave
0556+  220E 09            ret
0557+  220F             
0558+  220F             ;-----------------------------------------------------------------------------
0559+  220F             ; input decimal number
0560+  220F             ; result in A
0561+  220F             ; 655'\0'
0562+  220F             ; low--------high
0563+  220F             ;-----------------------------------------------------------------------------
0564+  220F             scan_u16d:
0565+  220F F8 08 00      enter 8
0566+  2212 E2            push si
0567+  2213 D8            push b
0568+  2214 D9            push c
0569+  2215 DA            push d
0570+  2216 FA F9 FF      lea d, [bp +- 7]
0571+  2219 07 D2 1F      call _gets
0572+  221C 07 2B 1F      call _strlen      ; get string length in C
0573+  221F 7E            dec c
0574+  2220 FD 4E         mov si, d
0575+  2222 12            mov a, c
0576+  2223 FD 99         shl a
0577+  2225 3B 61 22      mov d, table_power
0578+  2228 59            add d, a
0579+  2229 38 00 00      mov c, 0
0580+  222C             mul_loop:
0581+  222C F6            lodsb      ; load ASCII to al
0582+  222D B9 00         cmp al, 0
0583+  222F C6 42 22      je mul_exit
0584+  2232 6F 30         sub al, $30    ; make into integer
0585+  2234 22 00         mov ah, 0
0586+  2236 2A            mov b, [d]
0587+  2237 AC            mul a, b      ; result in B since it fits in 16bits
0588+  2238 11            mov a, b
0589+  2239 28            mov b, c
0590+  223A 54            add a, b
0591+  223B 39            mov c, a
0592+  223C 63 02 00      sub d, 2
0593+  223F 0A 2C 22      jmp mul_loop
0594+  2242             mul_exit:
0595+  2242 12            mov a, c
0596+  2243 E7            pop d
0597+  2244 E6            pop c
0598+  2245 E5            pop b
0599+  2246 EF            pop si
0600+  2247 F9            leave
0601+  2248 09            ret
0602+  2249             
0603+  2249 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  224D 34 35 36 37 
0603+  2251 38 39 41 42 
0603+  2255 43 44 45 46 
0604+  2259 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  225D 1B 5B 48 00 
0605+  2261             
0606+  2261             table_power:
0607+  2261 01 00         .dw 1
0608+  2263 0A 00         .dw 10
0609+  2265 64 00         .dw 100
0610+  2267 E8 03         .dw 1000
0611+  2269 10 27         .dw 100004347   226B             ; --- END INLINE ASM SEGMENT
4348   226B             
4349   226B F9            leave
4350   226C 09            ret
4351   226D             ; --- END TEXT SEGMENT
4352   226D             
4353   226D             ; --- BEGIN DATA SEGMENT
4354   226D 00 00 00 00 _variables_data: .fill 1310, 0
4354   2271 00 00 00 00 
4354   2275 00 00 00 00 
4354   2279 00 00 00 00 
4354   227D 00 00 00 00 
4354   2281 00 00 00 00 
4354   2285 00 00 00 00 
4354   2289 00 00 00 00 
4354   228D 00 00 00 00 
4354   2291 00 00 00 00 
4354   2295 00 00 00 00 
4354   2299 00 00 00 00 
4354   229D 00 00 00 00 
4354   22A1 00 00 00 00 
4354   22A5 00 00 00 00 
4354   22A9 00 00 00 00 
4354   22AD 00 00 00 00 
4354   22B1 00 00 00 00 
4354   22B5 00 00 00 00 
4354   22B9 00 00 00 00 
4354   22BD 00 00 00 00 
4354   22C1 00 00 00 00 
4354   22C5 00 00 00 00 
4354   22C9 00 00 00 00 
4354   22CD 00 00 00 00 
4354   22D1 00 00 00 00 
4354   22D5 00 00 00 00 
4354   22D9 00 00 00 00 
4354   22DD 00 00 00 00 
4354   22E1 00 00 00 00 
4354   22E5 00 00 00 00 
4354   22E9 00 00 00 00 
4354   22ED 00 00 00 00 
4354   22F1 00 00 00 00 
4354   22F5 00 00 00 00 
4354   22F9 00 00 00 00 
4354   22FD 00 00 00 00 
4354   2301 00 00 00 00 
4354   2305 00 00 00 00 
4354   2309 00 00 00 00 
4354   230D 00 00 00 00 
4354   2311 00 00 00 00 
4354   2315 00 00 00 00 
4354   2319 00 00 00 00 
4354   231D 00 00 00 00 
4354   2321 00 00 00 00 
4354   2325 00 00 00 00 
4354   2329 00 00 00 00 
4354   232D 00 00 00 00 
4354   2331 00 00 00 00 
4354   2335 00 00 00 00 
4354   2339 00 00 00 00 
4354   233D 00 00 00 00 
4354   2341 00 00 00 00 
4354   2345 00 00 00 00 
4354   2349 00 00 00 00 
4354   234D 00 00 00 00 
4354   2351 00 00 00 00 
4354   2355 00 00 00 00 
4354   2359 00 00 00 00 
4354   235D 00 00 00 00 
4354   2361 00 00 00 00 
4354   2365 00 00 00 00 
4354   2369 00 00 00 00 
4354   236D 00 00 00 00 
4354   2371 00 00 00 00 
4354   2375 00 00 00 00 
4354   2379 00 00 00 00 
4354   237D 00 00 00 00 
4354   2381 00 00 00 00 
4354   2385 00 00 00 00 
4354   2389 00 00 00 00 
4354   238D 00 00 00 00 
4354   2391 00 00 00 00 
4354   2395 00 00 00 00 
4354   2399 00 00 00 00 
4354   239D 00 00 00 00 
4354   23A1 00 00 00 00 
4354   23A5 00 00 00 00 
4354   23A9 00 00 00 00 
4354   23AD 00 00 00 00 
4354   23B1 00 00 00 00 
4354   23B5 00 00 00 00 
4354   23B9 00 00 00 00 
4354   23BD 00 00 00 00 
4354   23C1 00 00 00 00 
4354   23C5 00 00 00 00 
4354   23C9 00 00 00 00 
4354   23CD 00 00 00 00 
4354   23D1 00 00 00 00 
4354   23D5 00 00 00 00 
4354   23D9 00 00 00 00 
4354   23DD 00 00 00 00 
4354   23E1 00 00 00 00 
4354   23E5 00 00 00 00 
4354   23E9 00 00 00 00 
4354   23ED 00 00 00 00 
4354   23F1 00 00 00 00 
4354   23F5 00 00 00 00 
4354   23F9 00 00 00 00 
4354   23FD 00 00 00 00 
4354   2401 00 00 00 00 
4354   2405 00 00 00 00 
4354   2409 00 00 00 00 
4354   240D 00 00 00 00 
4354   2411 00 00 00 00 
4354   2415 00 00 00 00 
4354   2419 00 00 00 00 
4354   241D 00 00 00 00 
4354   2421 00 00 00 00 
4354   2425 00 00 00 00 
4354   2429 00 00 00 00 
4354   242D 00 00 00 00 
4354   2431 00 00 00 00 
4354   2435 00 00 00 00 
4354   2439 00 00 00 00 
4354   243D 00 00 00 00 
4354   2441 00 00 00 00 
4354   2445 00 00 00 00 
4354   2449 00 00 00 00 
4354   244D 00 00 00 00 
4354   2451 00 00 00 00 
4354   2455 00 00 00 00 
4354   2459 00 00 00 00 
4354   245D 00 00 00 00 
4354   2461 00 00 00 00 
4354   2465 00 00 00 00 
4354   2469 00 00 00 00 
4354   246D 00 00 00 00 
4354   2471 00 00 00 00 
4354   2475 00 00 00 00 
4354   2479 00 00 00 00 
4354   247D 00 00 00 00 
4354   2481 00 00 00 00 
4354   2485 00 00 00 00 
4354   2489 00 00 00 00 
4354   248D 00 00 00 00 
4354   2491 00 00 00 00 
4354   2495 00 00 00 00 
4354   2499 00 00 00 00 
4354   249D 00 00 00 00 
4354   24A1 00 00 00 00 
4354   24A5 00 00 00 00 
4354   24A9 00 00 00 00 
4354   24AD 00 00 00 00 
4354   24B1 00 00 00 00 
4354   24B5 00 00 00 00 
4354   24B9 00 00 00 00 
4354   24BD 00 00 00 00 
4354   24C1 00 00 00 00 
4354   24C5 00 00 00 00 
4354   24C9 00 00 00 00 
4354   24CD 00 00 00 00 
4354   24D1 00 00 00 00 
4354   24D5 00 00 00 00 
4354   24D9 00 00 00 00 
4354   24DD 00 00 00 00 
4354   24E1 00 00 00 00 
4354   24E5 00 00 00 00 
4354   24E9 00 00 00 00 
4354   24ED 00 00 00 00 
4354   24F1 00 00 00 00 
4354   24F5 00 00 00 00 
4354   24F9 00 00 00 00 
4354   24FD 00 00 00 00 
4354   2501 00 00 00 00 
4354   2505 00 00 00 00 
4354   2509 00 00 00 00 
4354   250D 00 00 00 00 
4354   2511 00 00 00 00 
4354   2515 00 00 00 00 
4354   2519 00 00 00 00 
4354   251D 00 00 00 00 
4354   2521 00 00 00 00 
4354   2525 00 00 00 00 
4354   2529 00 00 00 00 
4354   252D 00 00 00 00 
4354   2531 00 00 00 00 
4354   2535 00 00 00 00 
4354   2539 00 00 00 00 
4354   253D 00 00 00 00 
4354   2541 00 00 00 00 
4354   2545 00 00 00 00 
4354   2549 00 00 00 00 
4354   254D 00 00 00 00 
4354   2551 00 00 00 00 
4354   2555 00 00 00 00 
4354   2559 00 00 00 00 
4354   255D 00 00 00 00 
4354   2561 00 00 00 00 
4354   2565 00 00 00 00 
4354   2569 00 00 00 00 
4354   256D 00 00 00 00 
4354   2571 00 00 00 00 
4354   2575 00 00 00 00 
4354   2579 00 00 00 00 
4354   257D 00 00 00 00 
4354   2581 00 00 00 00 
4354   2585 00 00 00 00 
4354   2589 00 00 00 00 
4354   258D 00 00 00 00 
4354   2591 00 00 00 00 
4354   2595 00 00 00 00 
4354   2599 00 00 00 00 
4354   259D 00 00 00 00 
4354   25A1 00 00 00 00 
4354   25A5 00 00 00 00 
4354   25A9 00 00 00 00 
4354   25AD 00 00 00 00 
4354   25B1 00 00 00 00 
4354   25B5 00 00 00 00 
4354   25B9 00 00 00 00 
4354   25BD 00 00 00 00 
4354   25C1 00 00 00 00 
4354   25C5 00 00 00 00 
4354   25C9 00 00 00 00 
4354   25CD 00 00 00 00 
4354   25D1 00 00 00 00 
4354   25D5 00 00 00 00 
4354   25D9 00 00 00 00 
4354   25DD 00 00 00 00 
4354   25E1 00 00 00 00 
4354   25E5 00 00 00 00 
4354   25E9 00 00 00 00 
4354   25ED 00 00 00 00 
4354   25F1 00 00 00 00 
4354   25F5 00 00 00 00 
4354   25F9 00 00 00 00 
4354   25FD 00 00 00 00 
4354   2601 00 00 00 00 
4354   2605 00 00 00 00 
4354   2609 00 00 00 00 
4354   260D 00 00 00 00 
4354   2611 00 00 00 00 
4354   2615 00 00 00 00 
4354   2619 00 00 00 00 
4354   261D 00 00 00 00 
4354   2621 00 00 00 00 
4354   2625 00 00 00 00 
4354   2629 00 00 00 00 
4354   262D 00 00 00 00 
4354   2631 00 00 00 00 
4354   2635 00 00 00 00 
4354   2639 00 00 00 00 
4354   263D 00 00 00 00 
4354   2641 00 00 00 00 
4354   2645 00 00 00 00 
4354   2649 00 00 00 00 
4354   264D 00 00 00 00 
4354   2651 00 00 00 00 
4354   2655 00 00 00 00 
4354   2659 00 00 00 00 
4354   265D 00 00 00 00 
4354   2661 00 00 00 00 
4354   2665 00 00 00 00 
4354   2669 00 00 00 00 
4354   266D 00 00 00 00 
4354   2671 00 00 00 00 
4354   2675 00 00 00 00 
4354   2679 00 00 00 00 
4354   267D 00 00 00 00 
4354   2681 00 00 00 00 
4354   2685 00 00 00 00 
4354   2689 00 00 00 00 
4354   268D 00 00 00 00 
4354   2691 00 00 00 00 
4354   2695 00 00 00 00 
4354   2699 00 00 00 00 
4354   269D 00 00 00 00 
4354   26A1 00 00 00 00 
4354   26A5 00 00 00 00 
4354   26A9 00 00 00 00 
4354   26AD 00 00 00 00 
4354   26B1 00 00 00 00 
4354   26B5 00 00 00 00 
4354   26B9 00 00 00 00 
4354   26BD 00 00 00 00 
4354   26C1 00 00 00 00 
4354   26C5 00 00 00 00 
4354   26C9 00 00 00 00 
4354   26CD 00 00 00 00 
4354   26D1 00 00 00 00 
4354   26D5 00 00 00 00 
4354   26D9 00 00 00 00 
4354   26DD 00 00 00 00 
4354   26E1 00 00 00 00 
4354   26E5 00 00 00 00 
4354   26E9 00 00 00 00 
4354   26ED 00 00 00 00 
4354   26F1 00 00 00 00 
4354   26F5 00 00 00 00 
4354   26F9 00 00 00 00 
4354   26FD 00 00 00 00 
4354   2701 00 00 00 00 
4354   2705 00 00 00 00 
4354   2709 00 00 00 00 
4354   270D 00 00 00 00 
4354   2711 00 00 00 00 
4354   2715 00 00 00 00 
4354   2719 00 00 00 00 
4354   271D 00 00 00 00 
4354   2721 00 00 00 00 
4354   2725 00 00 00 00 
4354   2729 00 00 00 00 
4354   272D 00 00 00 00 
4354   2731 00 00 00 00 
4354   2735 00 00 00 00 
4354   2739 00 00 00 00 
4354   273D 00 00 00 00 
4354   2741 00 00 00 00 
4354   2745 00 00 00 00 
4354   2749 00 00 00 00 
4354   274D 00 00 00 00 
4354   2751 00 00 00 00 
4354   2755 00 00 00 00 
4354   2759 00 00 00 00 
4354   275D 00 00 00 00 
4354   2761 00 00 00 00 
4354   2765 00 00 00 00 
4354   2769 00 00 00 00 
4354   276D 00 00 00 00 
4354   2771 00 00 00 00 
4354   2775 00 00 00 00 
4354   2779 00 00 00 00 
4354   277D 00 00 00 00 
4354   2781 00 00 00 00 
4354   2785 00 00 00 00 
4354   2789 00 00 
4355   278B 00 00       st_fopen_max_handle: .dw 0
4356   278D 53 6F 6C 2D _s0: .db "Sol-1.", 0
4356   2791 31 2E 00 
4357   2794 53 74 72 69 _s1: .db "String Value.", 0
4357   2798 6E 67 20 56 
4357   279C 61 6C 75 65 
4357   27A0 2E 00 
4358   27A2 0A 76 61 72 _s2: .db "\nvarname: %s", 0
4358   27A6 6E 61 6D 65 
4358   27AA 3A 20 25 73 
4358   27AE 00 
4359   27AF 0A 76 61 72 _s3: .db "\nvar_type: %d\n", 0
4359   27B3 5F 74 79 70 
4359   27B7 65 3A 20 25 
4359   27BB 64 0A 00 
4360   27BE 0A 61 73 5F _s4: .db "\nas_string: %s\n", 0
4360   27C2 73 74 72 69 
4360   27C6 6E 67 3A 20 
4360   27CA 25 73 0A 00 
4361   27CE 0A 61 73 5F _s5: .db "\nas_int: %d\n", 0
4361   27D2 69 6E 74 3A 
4361   27D6 20 25 64 0A 
4361   27DA 00 
4362   27DB 55 6E 65 78 _s6: .db "Unexpected format in printf.", 0
4362   27DF 70 65 63 74 
4362   27E3 65 64 20 66 
4362   27E7 6F 72 6D 61 
4362   27EB 74 20 69 6E 
4362   27EF 20 70 72 69 
4362   27F3 6E 74 66 2E 
4362   27F7 00 
4363   27F8 45 72 72 6F _s7: .db "Error: Unknown argument type.\n", 0
4363   27FC 72 3A 20 55 
4363   2800 6E 6B 6E 6F 
4363   2804 77 6E 20 61 
4363   2808 72 67 75 6D 
4363   280C 65 6E 74 20 
4363   2810 74 79 70 65 
4363   2814 2E 0A 00 
4364   2817 1B 5B 32 4A _s8: .db "\033[2J\033[H", 0
4364   281B 1B 5B 48 00 
4365   281F             
4366   281F 21 28       _heap_top: .dw _heap
4367   2821 00          _heap: .db 0
4368   2822             ; --- END DATA SEGMENT
4369   2822             
4370   2822             .end
tasm: Number of errors = 0
