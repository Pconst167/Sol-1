0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; print("Hello World"); 
0011   0408             ; --- START FUNCTION CALL
0012   0408 26 2F 04      mov b, _s0 ; "Hello World"
0013   040B FD AB         swp b
0014   040D D8            push b
0015   040E 07 16 04      call print
0016   0411 51 02 00      add sp, 2
0017   0414             ; --- END FUNCTION CALL
0018   0414 05 0B         syscall sys_terminate_proc
0019   0416             
0020   0416             print:
0021   0416 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0022   0419             ; --- BEGIN INLINE ASM SEGMENT
0023   0419 FA 05 00      lea d, [bp + 5] ; $s
0024   041C FD 2A         mov d, [d]
0025   041E             _puts_L1_print:
0026   041E 1E            mov al, [d]
0027   041F B9 00         cmp al, 0
0028   0421 C6 2D 04      jz _puts_END_print
0029   0424 23            mov ah, al
0030   0425 19 00         mov al, 0
0031   0427 05 03         syscall sys_io
0032   0429 79            inc d
0033   042A 0A 1E 04      jmp _puts_L1_print
0034   042D             _puts_END_print:
0035   042D             ; --- END INLINE ASM SEGMENT
0036   042D F9            leave
0037   042E 09            ret
0038   042F             ; --- END TEXT SEGMENT
0039   042F             
0040   042F             ; --- BEGIN DATA SEGMENT
0041   042F 48 65 6C 6C _s0: .db "Hello World", 0
0041   0433 6F 20 57 6F 
0041   0437 72 6C 64 00 
0042   043B             
0043   043B 3D 04       _heap_top: .dw _heap
0044   043D 00          _heap: .db 0
0045   043E             ; --- END DATA SEGMENT
0046   043E             
0047   043E             .end
tasm: Number of errors = 0
