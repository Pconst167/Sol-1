0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i=0;i<50;i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 32 00      mov b, $32
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; <= (signed)
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 8D 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j=0;j<50;j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 32 00      mov b, $32
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; <= (signed)
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 7D 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; n = neighbours(i, j); 
0057   0445 FA FB FF      lea d, [bp + -5] ; $n
0058   0448 DA            push d
0059   0449 FA FD FF      lea d, [bp + -3] ; $j
0060   044C 2A            mov b, [d]
0061   044D FD AB         swp b
0062   044F D8            push b
0063   0450 FA FF FF      lea d, [bp + -1] ; $i
0064   0453 2A            mov b, [d]
0065   0454 FD AB         swp b
0066   0456 D8            push b
0067   0457 07 A3 1D      call neighbours
0068   045A E7            pop d
0069   045B FD 43         mov [d], b
0070   045D             ;; printf("%d\n", n); 
0071   045D FA FB FF      lea d, [bp + -5] ; $n
0072   0460 2A            mov b, [d]
0073   0461 FD AB         swp b
0074   0463 D8            push b
0075   0464 26 D4 29      mov b, __s0 ; "%d\n"
0076   0467 FD AB         swp b
0077   0469 D8            push b
0078   046A 07 31 11      call printf
0079   046D             _for2_update:
0080   046D FA FD FF      lea d, [bp + -3] ; $j
0081   0470 2A            mov b, [d]
0082   0471 D8            push b
0083   0472 FD 77         inc b
0084   0474 FA FD FF      lea d, [bp + -3] ; $j
0085   0477 FD 43         mov [d], b
0086   0479 E5            pop b
0087   047A 0A 32 04      jmp _for2_cond
0088   047D             _for2_exit:
0089   047D             _for1_update:
0090   047D FA FF FF      lea d, [bp + -1] ; $i
0091   0480 2A            mov b, [d]
0092   0481 D8            push b
0093   0482 FD 77         inc b
0094   0484 FA FF FF      lea d, [bp + -1] ; $i
0095   0487 FD 43         mov [d], b
0096   0489 E5            pop b
0097   048A 0A 15 04      jmp _for1_cond
0098   048D             _for1_exit:
0099   048D 05 0B         syscall sys_terminate_proc
0100   048F             
0101   048F             strcpy:
0102   048F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0103   0492             ; $psrc 
0104   0492             ; $pdest 
0105   0492 52 04 00      sub sp, 4
0106   0495             ;; psrc = src; 
0107   0495 FA FF FF      lea d, [bp + -1] ; $psrc
0108   0498 DA            push d
0109   0499 FA 07 00      lea d, [bp + 7] ; $src
0110   049C 2A            mov b, [d]
0111   049D E7            pop d
0112   049E FD 43         mov [d], b
0113   04A0             ;; pdest = dest; 
0114   04A0 FA FD FF      lea d, [bp + -3] ; $pdest
0115   04A3 DA            push d
0116   04A4 FA 05 00      lea d, [bp + 5] ; $dest
0117   04A7 2A            mov b, [d]
0118   04A8 E7            pop d
0119   04A9 FD 43         mov [d], b
0120   04AB             ;; while(*psrc) *pdest++ = *psrc++; 
0121   04AB             _while3_cond:
0122   04AB FA FF FF      lea d, [bp + -1] ; $psrc
0123   04AE 2A            mov b, [d]
0124   04AF 74            mov d, b
0125   04B0 32            mov bl, [d]
0126   04B1 A7 00         mov bh, 0
0127   04B3 C0 00 00      cmp b, 0
0128   04B6 C6 DE 04      je _while3_exit
0129   04B9             _while3_block:
0130   04B9             ;; *pdest++ = *psrc++; 
0131   04B9 FA FD FF      lea d, [bp + -3] ; $pdest
0132   04BC 2A            mov b, [d]
0133   04BD D8            push b
0134   04BE FD 77         inc b
0135   04C0 FA FD FF      lea d, [bp + -3] ; $pdest
0136   04C3 FD 43         mov [d], b
0137   04C5 E5            pop b
0138   04C6 D8            push b
0139   04C7 FA FF FF      lea d, [bp + -1] ; $psrc
0140   04CA 2A            mov b, [d]
0141   04CB D8            push b
0142   04CC FD 77         inc b
0143   04CE FA FF FF      lea d, [bp + -1] ; $psrc
0144   04D1 FD 43         mov [d], b
0145   04D3 E5            pop b
0146   04D4 74            mov d, b
0147   04D5 32            mov bl, [d]
0148   04D6 A7 00         mov bh, 0
0149   04D8 E7            pop d
0150   04D9 FD 3E         mov [d], bl
0151   04DB 0A AB 04      jmp _while3_cond
0152   04DE             _while3_exit:
0153   04DE             ;; *pdest = '\0'; 
0154   04DE FA FD FF      lea d, [bp + -3] ; $pdest
0155   04E1 2A            mov b, [d]
0156   04E2 D8            push b
0157   04E3 26 00 00      mov b, $0
0158   04E6 E7            pop d
0159   04E7 FD 3E         mov [d], bl
0160   04E9 F9            leave
0161   04EA 09            ret
0162   04EB             
0163   04EB             strcmp:
0164   04EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0165   04EE             ;; while (*s1 && (*s1 == *s2)) { 
0166   04EE             _while4_cond:
0167   04EE FA 05 00      lea d, [bp + 5] ; $s1
0168   04F1 2A            mov b, [d]
0169   04F2 74            mov d, b
0170   04F3 32            mov bl, [d]
0171   04F4 A7 00         mov bh, 0
0172   04F6 D7            push a
0173   04F7 11            mov a, b
0174   04F8 FA 05 00      lea d, [bp + 5] ; $s1
0175   04FB 2A            mov b, [d]
0176   04FC 74            mov d, b
0177   04FD 32            mov bl, [d]
0178   04FE A7 00         mov bh, 0
0179   0500             ; START RELATIONAL
0180   0500 D7            push a
0181   0501 11            mov a, b
0182   0502 FA 07 00      lea d, [bp + 7] ; $s2
0183   0505 2A            mov b, [d]
0184   0506 74            mov d, b
0185   0507 32            mov bl, [d]
0186   0508 A7 00         mov bh, 0
0187   050A B0            cmp a, b
0188   050B FD 71         seq ; ==
0189   050D E4            pop a
0190   050E             ; END RELATIONAL
0191   050E FD A7         sand a, b ; &&
0192   0510 E4            pop a
0193   0511 C0 00 00      cmp b, 0
0194   0514 C6 34 05      je _while4_exit
0195   0517             _while4_block:
0196   0517             ;; s1++; 
0197   0517 FA 05 00      lea d, [bp + 5] ; $s1
0198   051A 2A            mov b, [d]
0199   051B D8            push b
0200   051C FD 77         inc b
0201   051E FA 05 00      lea d, [bp + 5] ; $s1
0202   0521 FD 43         mov [d], b
0203   0523 E5            pop b
0204   0524             ;; s2++; 
0205   0524 FA 07 00      lea d, [bp + 7] ; $s2
0206   0527 2A            mov b, [d]
0207   0528 D8            push b
0208   0529 FD 77         inc b
0209   052B FA 07 00      lea d, [bp + 7] ; $s2
0210   052E FD 43         mov [d], b
0211   0530 E5            pop b
0212   0531 0A EE 04      jmp _while4_cond
0213   0534             _while4_exit:
0214   0534             ;; return *s1 - *s2; 
0215   0534 FA 05 00      lea d, [bp + 5] ; $s1
0216   0537 2A            mov b, [d]
0217   0538 74            mov d, b
0218   0539 32            mov bl, [d]
0219   053A A7 00         mov bh, 0
0220   053C             ; START TERMS
0221   053C D7            push a
0222   053D 11            mov a, b
0223   053E FA 07 00      lea d, [bp + 7] ; $s2
0224   0541 2A            mov b, [d]
0225   0542 74            mov d, b
0226   0543 32            mov bl, [d]
0227   0544 A7 00         mov bh, 0
0228   0546 60            sub a, b
0229   0547 27            mov b, a
0230   0548 E4            pop a
0231   0549             ; END TERMS
0232   0549 F9            leave
0233   054A 09            ret
0234   054B             
0235   054B             strcat:
0236   054B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0237   054E             ; $dest_len 
0238   054E             ; $i 
0239   054E 52 04 00      sub sp, 4
0240   0551             ;; dest_len = strlen(dest); 
0241   0551 FA FF FF      lea d, [bp + -1] ; $dest_len
0242   0554 DA            push d
0243   0555 FA 05 00      lea d, [bp + 5] ; $dest
0244   0558 2A            mov b, [d]
0245   0559 FD AB         swp b
0246   055B D8            push b
0247   055C 07 FE 05      call strlen
0248   055F 51 02 00      add sp, 2
0249   0562 E7            pop d
0250   0563 FD 43         mov [d], b
0251   0565             ;; for (i = 0; src[i] != 0; i=i+1) { 
0252   0565             _for5_init:
0253   0565 FA FD FF      lea d, [bp + -3] ; $i
0254   0568 DA            push d
0255   0569 26 00 00      mov b, $0
0256   056C E7            pop d
0257   056D FD 43         mov [d], b
0258   056F             _for5_cond:
0259   056F FA 07 00      lea d, [bp + 7] ; $src
0260   0572 FD 2A         mov d, [d]
0261   0574 D7            push a
0262   0575 DA            push d
0263   0576 FA FD FF      lea d, [bp + -3] ; $i
0264   0579 2A            mov b, [d]
0265   057A E7            pop d
0266   057B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0267   057F E4            pop a
0268   0580 32            mov bl, [d]
0269   0581 A7 00         mov bh, 0
0270   0583             ; START RELATIONAL
0271   0583 D7            push a
0272   0584 11            mov a, b
0273   0585 26 00 00      mov b, $0
0274   0588 B0            cmp a, b
0275   0589 FD 72         sneq ; !=
0276   058B E4            pop a
0277   058C             ; END RELATIONAL
0278   058C C0 00 00      cmp b, 0
0279   058F C6 D8 05      je _for5_exit
0280   0592             _for5_block:
0281   0592             ;; dest[dest_len + i] = src[i]; 
0282   0592 FA 05 00      lea d, [bp + 5] ; $dest
0283   0595 FD 2A         mov d, [d]
0284   0597 D7            push a
0285   0598 DA            push d
0286   0599 FA FF FF      lea d, [bp + -1] ; $dest_len
0287   059C 2A            mov b, [d]
0288   059D             ; START TERMS
0289   059D D7            push a
0290   059E 11            mov a, b
0291   059F FA FD FF      lea d, [bp + -3] ; $i
0292   05A2 2A            mov b, [d]
0293   05A3 56            add b, a
0294   05A4 E4            pop a
0295   05A5             ; END TERMS
0296   05A5 E7            pop d
0297   05A6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0298   05AA E4            pop a
0299   05AB DA            push d
0300   05AC FA 07 00      lea d, [bp + 7] ; $src
0301   05AF FD 2A         mov d, [d]
0302   05B1 D7            push a
0303   05B2 DA            push d
0304   05B3 FA FD FF      lea d, [bp + -3] ; $i
0305   05B6 2A            mov b, [d]
0306   05B7 E7            pop d
0307   05B8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0308   05BC E4            pop a
0309   05BD 32            mov bl, [d]
0310   05BE A7 00         mov bh, 0
0311   05C0 E7            pop d
0312   05C1 FD 3E         mov [d], bl
0313   05C3             _for5_update:
0314   05C3 FA FD FF      lea d, [bp + -3] ; $i
0315   05C6 DA            push d
0316   05C7 FA FD FF      lea d, [bp + -3] ; $i
0317   05CA 2A            mov b, [d]
0318   05CB             ; START TERMS
0319   05CB D7            push a
0320   05CC 11            mov a, b
0321   05CD 26 01 00      mov b, $1
0322   05D0 56            add b, a
0323   05D1 E4            pop a
0324   05D2             ; END TERMS
0325   05D2 E7            pop d
0326   05D3 FD 43         mov [d], b
0327   05D5 0A 6F 05      jmp _for5_cond
0328   05D8             _for5_exit:
0329   05D8             ;; dest[dest_len + i] = 0; 
0330   05D8 FA 05 00      lea d, [bp + 5] ; $dest
0331   05DB FD 2A         mov d, [d]
0332   05DD D7            push a
0333   05DE DA            push d
0334   05DF FA FF FF      lea d, [bp + -1] ; $dest_len
0335   05E2 2A            mov b, [d]
0336   05E3             ; START TERMS
0337   05E3 D7            push a
0338   05E4 11            mov a, b
0339   05E5 FA FD FF      lea d, [bp + -3] ; $i
0340   05E8 2A            mov b, [d]
0341   05E9 56            add b, a
0342   05EA E4            pop a
0343   05EB             ; END TERMS
0344   05EB E7            pop d
0345   05EC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0346   05F0 E4            pop a
0347   05F1 DA            push d
0348   05F2 26 00 00      mov b, $0
0349   05F5 E7            pop d
0350   05F6 FD 3E         mov [d], bl
0351   05F8             ;; return dest; 
0352   05F8 FA 05 00      lea d, [bp + 5] ; $dest
0353   05FB 2A            mov b, [d]
0354   05FC F9            leave
0355   05FD 09            ret
0356   05FE             
0357   05FE             strlen:
0358   05FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0359   0601             ; $length 
0360   0601 52 02 00      sub sp, 2
0361   0604             ;; length = 0; 
0362   0604 FA FF FF      lea d, [bp + -1] ; $length
0363   0607 DA            push d
0364   0608 26 00 00      mov b, $0
0365   060B E7            pop d
0366   060C FD 43         mov [d], b
0367   060E             ;; while (str[length] != 0) { 
0368   060E             _while6_cond:
0369   060E FA 05 00      lea d, [bp + 5] ; $str
0370   0611 FD 2A         mov d, [d]
0371   0613 D7            push a
0372   0614 DA            push d
0373   0615 FA FF FF      lea d, [bp + -1] ; $length
0374   0618 2A            mov b, [d]
0375   0619 E7            pop d
0376   061A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0377   061E E4            pop a
0378   061F 32            mov bl, [d]
0379   0620 A7 00         mov bh, 0
0380   0622             ; START RELATIONAL
0381   0622 D7            push a
0382   0623 11            mov a, b
0383   0624 26 00 00      mov b, $0
0384   0627 B0            cmp a, b
0385   0628 FD 72         sneq ; !=
0386   062A E4            pop a
0387   062B             ; END RELATIONAL
0388   062B C0 00 00      cmp b, 0
0389   062E C6 41 06      je _while6_exit
0390   0631             _while6_block:
0391   0631             ;; length++; 
0392   0631 FA FF FF      lea d, [bp + -1] ; $length
0393   0634 2A            mov b, [d]
0394   0635 D8            push b
0395   0636 FD 77         inc b
0396   0638 FA FF FF      lea d, [bp + -1] ; $length
0397   063B FD 43         mov [d], b
0398   063D E5            pop b
0399   063E 0A 0E 06      jmp _while6_cond
0400   0641             _while6_exit:
0401   0641             ;; return length; 
0402   0641 FA FF FF      lea d, [bp + -1] ; $length
0403   0644 2A            mov b, [d]
0404   0645 F9            leave
0405   0646 09            ret
0406   0647             
0407   0647             exit:
0408   0647 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0409   064A             
0410   064A             ; --- BEGIN INLINE ASM BLOCK
0411   064A 05 0B         syscall sys_terminate_proc
0412   064C             ; --- END INLINE ASM BLOCK
0413   064C             
0414   064C F9            leave
0415   064D 09            ret
0416   064E             
0417   064E             atoi:
0418   064E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0419   0651             ; $result 
0420   0651 10 00 00      mov a, $0
0421   0654 45 FF FF      mov [bp + -1], a
0422   0657             ; $sign 
0423   0657 10 01 00      mov a, $1
0424   065A 45 FD FF      mov [bp + -3], a
0425   065D 52 04 00      sub sp, 4
0426   0660             ;; while (*str == ' ') str++; 
0427   0660             _while7_cond:
0428   0660 FA 05 00      lea d, [bp + 5] ; $str
0429   0663 2A            mov b, [d]
0430   0664 74            mov d, b
0431   0665 32            mov bl, [d]
0432   0666 A7 00         mov bh, 0
0433   0668             ; START RELATIONAL
0434   0668 D7            push a
0435   0669 11            mov a, b
0436   066A 26 20 00      mov b, $20
0437   066D B0            cmp a, b
0438   066E FD 71         seq ; ==
0439   0670 E4            pop a
0440   0671             ; END RELATIONAL
0441   0671 C0 00 00      cmp b, 0
0442   0674 C6 87 06      je _while7_exit
0443   0677             _while7_block:
0444   0677             ;; str++; 
0445   0677 FA 05 00      lea d, [bp + 5] ; $str
0446   067A 2A            mov b, [d]
0447   067B D8            push b
0448   067C FD 77         inc b
0449   067E FA 05 00      lea d, [bp + 5] ; $str
0450   0681 FD 43         mov [d], b
0451   0683 E5            pop b
0452   0684 0A 60 06      jmp _while7_cond
0453   0687             _while7_exit:
0454   0687             ;; if (*str == '-' || *str == '+') { 
0455   0687             _if8_cond:
0456   0687 FA 05 00      lea d, [bp + 5] ; $str
0457   068A 2A            mov b, [d]
0458   068B 74            mov d, b
0459   068C 32            mov bl, [d]
0460   068D A7 00         mov bh, 0
0461   068F             ; START RELATIONAL
0462   068F D7            push a
0463   0690 11            mov a, b
0464   0691 26 2D 00      mov b, $2d
0465   0694 B0            cmp a, b
0466   0695 FD 71         seq ; ==
0467   0697 E4            pop a
0468   0698             ; END RELATIONAL
0469   0698 D7            push a
0470   0699 11            mov a, b
0471   069A FA 05 00      lea d, [bp + 5] ; $str
0472   069D 2A            mov b, [d]
0473   069E 74            mov d, b
0474   069F 32            mov bl, [d]
0475   06A0 A7 00         mov bh, 0
0476   06A2             ; START RELATIONAL
0477   06A2 D7            push a
0478   06A3 11            mov a, b
0479   06A4 26 2B 00      mov b, $2b
0480   06A7 B0            cmp a, b
0481   06A8 FD 71         seq ; ==
0482   06AA E4            pop a
0483   06AB             ; END RELATIONAL
0484   06AB FD A8         sor a, b ; ||
0485   06AD E4            pop a
0486   06AE C0 00 00      cmp b, 0
0487   06B1 C6 E8 06      je _if8_exit
0488   06B4             _if8_true:
0489   06B4             ;; if (*str == '-') sign = -1; 
0490   06B4             _if9_cond:
0491   06B4 FA 05 00      lea d, [bp + 5] ; $str
0492   06B7 2A            mov b, [d]
0493   06B8 74            mov d, b
0494   06B9 32            mov bl, [d]
0495   06BA A7 00         mov bh, 0
0496   06BC             ; START RELATIONAL
0497   06BC D7            push a
0498   06BD 11            mov a, b
0499   06BE 26 2D 00      mov b, $2d
0500   06C1 B0            cmp a, b
0501   06C2 FD 71         seq ; ==
0502   06C4 E4            pop a
0503   06C5             ; END RELATIONAL
0504   06C5 C0 00 00      cmp b, 0
0505   06C8 C6 D8 06      je _if9_exit
0506   06CB             _if9_true:
0507   06CB             ;; sign = -1; 
0508   06CB FA FD FF      lea d, [bp + -3] ; $sign
0509   06CE DA            push d
0510   06CF 26 FF FF      mov b, $ffff
0511   06D2 E7            pop d
0512   06D3 FD 43         mov [d], b
0513   06D5 0A D8 06      jmp _if9_exit
0514   06D8             _if9_exit:
0515   06D8             ;; str++; 
0516   06D8 FA 05 00      lea d, [bp + 5] ; $str
0517   06DB 2A            mov b, [d]
0518   06DC D8            push b
0519   06DD FD 77         inc b
0520   06DF FA 05 00      lea d, [bp + 5] ; $str
0521   06E2 FD 43         mov [d], b
0522   06E4 E5            pop b
0523   06E5 0A E8 06      jmp _if8_exit
0524   06E8             _if8_exit:
0525   06E8             ;; while (*str >= '0' && *str <= '9') { 
0526   06E8             _while10_cond:
0527   06E8 FA 05 00      lea d, [bp + 5] ; $str
0528   06EB 2A            mov b, [d]
0529   06EC 74            mov d, b
0530   06ED 32            mov bl, [d]
0531   06EE A7 00         mov bh, 0
0532   06F0             ; START RELATIONAL
0533   06F0 D7            push a
0534   06F1 11            mov a, b
0535   06F2 26 30 00      mov b, $30
0536   06F5 B0            cmp a, b
0537   06F6 FD 82         sgeu ; >= (unsigned)
0538   06F8 E4            pop a
0539   06F9             ; END RELATIONAL
0540   06F9 D7            push a
0541   06FA 11            mov a, b
0542   06FB FA 05 00      lea d, [bp + 5] ; $str
0543   06FE 2A            mov b, [d]
0544   06FF 74            mov d, b
0545   0700 32            mov bl, [d]
0546   0701 A7 00         mov bh, 0
0547   0703             ; START RELATIONAL
0548   0703 D7            push a
0549   0704 11            mov a, b
0550   0705 26 39 00      mov b, $39
0551   0708 B0            cmp a, b
0552   0709 FD 76         sleu ; <= (unsigned)
0553   070B E4            pop a
0554   070C             ; END RELATIONAL
0555   070C FD A7         sand a, b ; &&
0556   070E E4            pop a
0557   070F C0 00 00      cmp b, 0
0558   0712 C6 4D 07      je _while10_exit
0559   0715             _while10_block:
0560   0715             ;; result = result * 10 + (*str - '0'); 
0561   0715 FA FF FF      lea d, [bp + -1] ; $result
0562   0718 DA            push d
0563   0719 FA FF FF      lea d, [bp + -1] ; $result
0564   071C 2A            mov b, [d]
0565   071D             ; START FACTORS
0566   071D D7            push a
0567   071E 11            mov a, b
0568   071F 26 0A 00      mov b, $a
0569   0722 AC            mul a, b ; *
0570   0723 11            mov a, b
0571   0724 27            mov b, a
0572   0725 E4            pop a
0573   0726             ; END FACTORS
0574   0726             ; START TERMS
0575   0726 D7            push a
0576   0727 11            mov a, b
0577   0728 FA 05 00      lea d, [bp + 5] ; $str
0578   072B 2A            mov b, [d]
0579   072C 74            mov d, b
0580   072D 32            mov bl, [d]
0581   072E A7 00         mov bh, 0
0582   0730             ; START TERMS
0583   0730 D7            push a
0584   0731 11            mov a, b
0585   0732 26 30 00      mov b, $30
0586   0735 60            sub a, b
0587   0736 27            mov b, a
0588   0737 E4            pop a
0589   0738             ; END TERMS
0590   0738 56            add b, a
0591   0739 E4            pop a
0592   073A             ; END TERMS
0593   073A E7            pop d
0594   073B FD 43         mov [d], b
0595   073D             ;; str++; 
0596   073D FA 05 00      lea d, [bp + 5] ; $str
0597   0740 2A            mov b, [d]
0598   0741 D8            push b
0599   0742 FD 77         inc b
0600   0744 FA 05 00      lea d, [bp + 5] ; $str
0601   0747 FD 43         mov [d], b
0602   0749 E5            pop b
0603   074A 0A E8 06      jmp _while10_cond
0604   074D             _while10_exit:
0605   074D             ;; return sign * result; 
0606   074D FA FD FF      lea d, [bp + -3] ; $sign
0607   0750 2A            mov b, [d]
0608   0751             ; START FACTORS
0609   0751 D7            push a
0610   0752 11            mov a, b
0611   0753 FA FF FF      lea d, [bp + -1] ; $result
0612   0756 2A            mov b, [d]
0613   0757 AC            mul a, b ; *
0614   0758 11            mov a, b
0615   0759 27            mov b, a
0616   075A E4            pop a
0617   075B             ; END FACTORS
0618   075B F9            leave
0619   075C 09            ret
0620   075D             
0621   075D             rand:
0622   075D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0623   0760             ; $sec 
0624   0760 52 02 00      sub sp, 2
0625   0763             
0626   0763             ; --- BEGIN INLINE ASM BLOCK
0627   0763 19 00         mov al, 0
0628   0765 05 01         syscall sys_rtc					
0629   0767 1A            mov al, ah
0630   0768 FA FF FF      lea d, [bp + -1] ; $sec
0631   076B 1E            mov al, [d]
0632   076C 22 00         mov ah, 0
0633   076E             ; --- END INLINE ASM BLOCK
0634   076E             
0635   076E             ;; return sec; 
0636   076E FA FF FF      lea d, [bp + -1] ; $sec
0637   0771 2A            mov b, [d]
0638   0772 F9            leave
0639   0773 09            ret
0640   0774             
0641   0774             srand:
0642   0774 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0643   0777 F9            leave
0644   0778 09            ret
0645   0779             
0646   0779             malloc:
0647   0779 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0648   077C F9            leave
0649   077D 09            ret
0650   077E             
0651   077E             calloc:
0652   077E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0653   0781 F9            leave
0654   0782 09            ret
0655   0783             
0656   0783             realloc:
0657   0783 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0658   0786 F9            leave
0659   0787 09            ret
0660   0788             
0661   0788             alloc:
0662   0788 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0663   078B             ;; heap_top = heap_top + bytes; 
0664   078B 3B 1C 2A      mov d, _heap_top ; $heap_top
0665   078E DA            push d
0666   078F 3B 1C 2A      mov d, _heap_top ; $heap_top
0667   0792 2A            mov b, [d]
0668   0793             ; START TERMS
0669   0793 D7            push a
0670   0794 11            mov a, b
0671   0795 FA 05 00      lea d, [bp + 5] ; $bytes
0672   0798 2A            mov b, [d]
0673   0799 56            add b, a
0674   079A E4            pop a
0675   079B             ; END TERMS
0676   079B E7            pop d
0677   079C FD 43         mov [d], b
0678   079E             ;; return heap_top - bytes; 
0679   079E 3B 1C 2A      mov d, _heap_top ; $heap_top
0680   07A1 2A            mov b, [d]
0681   07A2             ; START TERMS
0682   07A2 D7            push a
0683   07A3 11            mov a, b
0684   07A4 FA 05 00      lea d, [bp + 5] ; $bytes
0685   07A7 2A            mov b, [d]
0686   07A8 60            sub a, b
0687   07A9 27            mov b, a
0688   07AA E4            pop a
0689   07AB             ; END TERMS
0690   07AB F9            leave
0691   07AC 09            ret
0692   07AD             
0693   07AD             free:
0694   07AD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0695   07B0             ;; return heap_top = heap_top - bytes; 
0696   07B0 3B 1C 2A      mov d, _heap_top ; $heap_top
0697   07B3 DA            push d
0698   07B4 3B 1C 2A      mov d, _heap_top ; $heap_top
0699   07B7 2A            mov b, [d]
0700   07B8             ; START TERMS
0701   07B8 D7            push a
0702   07B9 11            mov a, b
0703   07BA FA 05 00      lea d, [bp + 5] ; $bytes
0704   07BD 2A            mov b, [d]
0705   07BE 60            sub a, b
0706   07BF 27            mov b, a
0707   07C0 E4            pop a
0708   07C1             ; END TERMS
0709   07C1 E7            pop d
0710   07C2 FD 43         mov [d], b
0711   07C4 F9            leave
0712   07C5 09            ret
0713   07C6             
0714   07C6             base64_encode:
0715   07C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0716   07C9             ; $i 
0717   07C9 10 00 00      mov a, $0
0718   07CC 45 FF FF      mov [bp + -1], a
0719   07CF             ; $j 
0720   07CF 10 00 00      mov a, $0
0721   07D2 45 FD FF      mov [bp + -3], a
0722   07D5             ; $k 
0723   07D5             ; $input_len 
0724   07D5             ; $input_buffer 
0725   07D5             ; $output_buffer 
0726   07D5 52 0F 00      sub sp, 15
0727   07D8             ;; input_len = strlen(input); 
0728   07D8 FA F9 FF      lea d, [bp + -7] ; $input_len
0729   07DB DA            push d
0730   07DC FA 05 00      lea d, [bp + 5] ; $input
0731   07DF 2A            mov b, [d]
0732   07E0 FD AB         swp b
0733   07E2 D8            push b
0734   07E3 07 FE 05      call strlen
0735   07E6 51 02 00      add sp, 2
0736   07E9 E7            pop d
0737   07EA FD 43         mov [d], b
0738   07EC             ;; while (input_len--) { 
0739   07EC             _while11_cond:
0740   07EC FA F9 FF      lea d, [bp + -7] ; $input_len
0741   07EF 2A            mov b, [d]
0742   07F0 D8            push b
0743   07F1 FD 7D         dec b
0744   07F3 FA F9 FF      lea d, [bp + -7] ; $input_len
0745   07F6 FD 43         mov [d], b
0746   07F8 E5            pop b
0747   07F9 C0 00 00      cmp b, 0
0748   07FC C6 B0 09      je _while11_exit
0749   07FF             _while11_block:
0750   07FF             ;; input_buffer[i++] = *(input++); 
0751   07FF FA F6 FF      lea d, [bp + -10] ; $input_buffer
0752   0802 D7            push a
0753   0803 DA            push d
0754   0804 FA FF FF      lea d, [bp + -1] ; $i
0755   0807 2A            mov b, [d]
0756   0808 D8            push b
0757   0809 FD 77         inc b
0758   080B FA FF FF      lea d, [bp + -1] ; $i
0759   080E FD 43         mov [d], b
0760   0810 E5            pop b
0761   0811 E7            pop d
0762   0812 5A            add d, b
0763   0813 E4            pop a
0764   0814 DA            push d
0765   0815 FA 05 00      lea d, [bp + 5] ; $input
0766   0818 2A            mov b, [d]
0767   0819 D8            push b
0768   081A FD 77         inc b
0769   081C FA 05 00      lea d, [bp + 5] ; $input
0770   081F FD 43         mov [d], b
0771   0821 E5            pop b
0772   0822 74            mov d, b
0773   0823 32            mov bl, [d]
0774   0824 A7 00         mov bh, 0
0775   0826 E7            pop d
0776   0827 FD 3E         mov [d], bl
0777   0829             ;; if (i == 3) { 
0778   0829             _if12_cond:
0779   0829 FA FF FF      lea d, [bp + -1] ; $i
0780   082C 2A            mov b, [d]
0781   082D             ; START RELATIONAL
0782   082D D7            push a
0783   082E 11            mov a, b
0784   082F 26 03 00      mov b, $3
0785   0832 B0            cmp a, b
0786   0833 FD 71         seq ; ==
0787   0835 E4            pop a
0788   0836             ; END RELATIONAL
0789   0836 C0 00 00      cmp b, 0
0790   0839 C6 AD 09      je _if12_exit
0791   083C             _if12_true:
0792   083C             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0793   083C FA F2 FF      lea d, [bp + -14] ; $output_buffer
0794   083F D7            push a
0795   0840 DA            push d
0796   0841 26 00 00      mov b, $0
0797   0844 E7            pop d
0798   0845 5A            add d, b
0799   0846 E4            pop a
0800   0847 DA            push d
0801   0848 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0802   084B D7            push a
0803   084C DA            push d
0804   084D 26 00 00      mov b, $0
0805   0850 E7            pop d
0806   0851 5A            add d, b
0807   0852 E4            pop a
0808   0853 32            mov bl, [d]
0809   0854 A7 00         mov bh, 0
0810   0856 D7            push a
0811   0857 11            mov a, b
0812   0858 26 FC 00      mov b, $fc
0813   085B 86            and a, b ; &
0814   085C 27            mov b, a
0815   085D E4            pop a
0816   085E             ; START SHIFT
0817   085E D7            push a
0818   085F 11            mov a, b
0819   0860 26 02 00      mov b, $2
0820   0863 FD 39         mov c, b
0821   0865 A5            ashr a, cl
0822   0866 27            mov b, a
0823   0867 E4            pop a
0824   0868             ; END SHIFT
0825   0868 E7            pop d
0826   0869 FD 3E         mov [d], bl
0827   086B             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0828   086B FA F2 FF      lea d, [bp + -14] ; $output_buffer
0829   086E D7            push a
0830   086F DA            push d
0831   0870 26 01 00      mov b, $1
0832   0873 E7            pop d
0833   0874 5A            add d, b
0834   0875 E4            pop a
0835   0876 DA            push d
0836   0877 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0837   087A D7            push a
0838   087B DA            push d
0839   087C 26 00 00      mov b, $0
0840   087F E7            pop d
0841   0880 5A            add d, b
0842   0881 E4            pop a
0843   0882 32            mov bl, [d]
0844   0883 A7 00         mov bh, 0
0845   0885 D7            push a
0846   0886 11            mov a, b
0847   0887 26 03 00      mov b, $3
0848   088A 86            and a, b ; &
0849   088B 27            mov b, a
0850   088C E4            pop a
0851   088D             ; START SHIFT
0852   088D D7            push a
0853   088E 11            mov a, b
0854   088F 26 04 00      mov b, $4
0855   0892 FD 39         mov c, b
0856   0894 9D            shl a, cl
0857   0895 27            mov b, a
0858   0896 E4            pop a
0859   0897             ; END SHIFT
0860   0897             ; START TERMS
0861   0897 D7            push a
0862   0898 11            mov a, b
0863   0899 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0864   089C D7            push a
0865   089D DA            push d
0866   089E 26 01 00      mov b, $1
0867   08A1 E7            pop d
0868   08A2 5A            add d, b
0869   08A3 E4            pop a
0870   08A4 32            mov bl, [d]
0871   08A5 A7 00         mov bh, 0
0872   08A7 D7            push a
0873   08A8 11            mov a, b
0874   08A9 26 F0 00      mov b, $f0
0875   08AC 86            and a, b ; &
0876   08AD 27            mov b, a
0877   08AE E4            pop a
0878   08AF             ; START SHIFT
0879   08AF D7            push a
0880   08B0 11            mov a, b
0881   08B1 26 04 00      mov b, $4
0882   08B4 FD 39         mov c, b
0883   08B6 A5            ashr a, cl
0884   08B7 27            mov b, a
0885   08B8 E4            pop a
0886   08B9             ; END SHIFT
0887   08B9 56            add b, a
0888   08BA E4            pop a
0889   08BB             ; END TERMS
0890   08BB E7            pop d
0891   08BC FD 3E         mov [d], bl
0892   08BE             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0893   08BE FA F2 FF      lea d, [bp + -14] ; $output_buffer
0894   08C1 D7            push a
0895   08C2 DA            push d
0896   08C3 26 02 00      mov b, $2
0897   08C6 E7            pop d
0898   08C7 5A            add d, b
0899   08C8 E4            pop a
0900   08C9 DA            push d
0901   08CA FA F6 FF      lea d, [bp + -10] ; $input_buffer
0902   08CD D7            push a
0903   08CE DA            push d
0904   08CF 26 01 00      mov b, $1
0905   08D2 E7            pop d
0906   08D3 5A            add d, b
0907   08D4 E4            pop a
0908   08D5 32            mov bl, [d]
0909   08D6 A7 00         mov bh, 0
0910   08D8 D7            push a
0911   08D9 11            mov a, b
0912   08DA 26 0F 00      mov b, $f
0913   08DD 86            and a, b ; &
0914   08DE 27            mov b, a
0915   08DF E4            pop a
0916   08E0             ; START SHIFT
0917   08E0 D7            push a
0918   08E1 11            mov a, b
0919   08E2 26 02 00      mov b, $2
0920   08E5 FD 39         mov c, b
0921   08E7 9D            shl a, cl
0922   08E8 27            mov b, a
0923   08E9 E4            pop a
0924   08EA             ; END SHIFT
0925   08EA             ; START TERMS
0926   08EA D7            push a
0927   08EB 11            mov a, b
0928   08EC FA F6 FF      lea d, [bp + -10] ; $input_buffer
0929   08EF D7            push a
0930   08F0 DA            push d
0931   08F1 26 02 00      mov b, $2
0932   08F4 E7            pop d
0933   08F5 5A            add d, b
0934   08F6 E4            pop a
0935   08F7 32            mov bl, [d]
0936   08F8 A7 00         mov bh, 0
0937   08FA D7            push a
0938   08FB 11            mov a, b
0939   08FC 26 C0 00      mov b, $c0
0940   08FF 86            and a, b ; &
0941   0900 27            mov b, a
0942   0901 E4            pop a
0943   0902             ; START SHIFT
0944   0902 D7            push a
0945   0903 11            mov a, b
0946   0904 26 06 00      mov b, $6
0947   0907 FD 39         mov c, b
0948   0909 A5            ashr a, cl
0949   090A 27            mov b, a
0950   090B E4            pop a
0951   090C             ; END SHIFT
0952   090C 56            add b, a
0953   090D E4            pop a
0954   090E             ; END TERMS
0955   090E E7            pop d
0956   090F FD 3E         mov [d], bl
0957   0911             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
0958   0911 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0959   0914 D7            push a
0960   0915 DA            push d
0961   0916 26 03 00      mov b, $3
0962   0919 E7            pop d
0963   091A 5A            add d, b
0964   091B E4            pop a
0965   091C DA            push d
0966   091D FA F6 FF      lea d, [bp + -10] ; $input_buffer
0967   0920 D7            push a
0968   0921 DA            push d
0969   0922 26 02 00      mov b, $2
0970   0925 E7            pop d
0971   0926 5A            add d, b
0972   0927 E4            pop a
0973   0928 32            mov bl, [d]
0974   0929 A7 00         mov bh, 0
0975   092B D7            push a
0976   092C 11            mov a, b
0977   092D 26 3F 00      mov b, $3f
0978   0930 86            and a, b ; &
0979   0931 27            mov b, a
0980   0932 E4            pop a
0981   0933 E7            pop d
0982   0934 FD 3E         mov [d], bl
0983   0936             ;; for (i = 0; i < 4; i++) { 
0984   0936             _for13_init:
0985   0936 FA FF FF      lea d, [bp + -1] ; $i
0986   0939 DA            push d
0987   093A 26 00 00      mov b, $0
0988   093D E7            pop d
0989   093E FD 43         mov [d], b
0990   0940             _for13_cond:
0991   0940 FA FF FF      lea d, [bp + -1] ; $i
0992   0943 2A            mov b, [d]
0993   0944             ; START RELATIONAL
0994   0944 D7            push a
0995   0945 11            mov a, b
0996   0946 26 04 00      mov b, $4
0997   0949 B0            cmp a, b
0998   094A FD 73         slt ; <= (signed)
0999   094C E4            pop a
1000   094D             ; END RELATIONAL
1001   094D C0 00 00      cmp b, 0
1002   0950 C6 A0 09      je _for13_exit
1003   0953             _for13_block:
1004   0953             ;; output[j++] = base64_table[output_buffer[i]]; 
1005   0953 FA 07 00      lea d, [bp + 7] ; $output
1006   0956 FD 2A         mov d, [d]
1007   0958 D7            push a
1008   0959 DA            push d
1009   095A FA FD FF      lea d, [bp + -3] ; $j
1010   095D 2A            mov b, [d]
1011   095E D8            push b
1012   095F FD 77         inc b
1013   0961 FA FD FF      lea d, [bp + -3] ; $j
1014   0964 FD 43         mov [d], b
1015   0966 E5            pop b
1016   0967 E7            pop d
1017   0968 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1018   096C E4            pop a
1019   096D DA            push d
1020   096E 3B 0E 20      mov d, _base64_table ; $base64_table
1021   0971 FD 2A         mov d, [d]
1022   0973 D7            push a
1023   0974 DA            push d
1024   0975 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1025   0978 D7            push a
1026   0979 DA            push d
1027   097A FA FF FF      lea d, [bp + -1] ; $i
1028   097D 2A            mov b, [d]
1029   097E E7            pop d
1030   097F 5A            add d, b
1031   0980 E4            pop a
1032   0981 32            mov bl, [d]
1033   0982 A7 00         mov bh, 0
1034   0984 E7            pop d
1035   0985 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1036   0989 E4            pop a
1037   098A 32            mov bl, [d]
1038   098B A7 00         mov bh, 0
1039   098D E7            pop d
1040   098E FD 3E         mov [d], bl
1041   0990             _for13_update:
1042   0990 FA FF FF      lea d, [bp + -1] ; $i
1043   0993 2A            mov b, [d]
1044   0994 D8            push b
1045   0995 FD 77         inc b
1046   0997 FA FF FF      lea d, [bp + -1] ; $i
1047   099A FD 43         mov [d], b
1048   099C E5            pop b
1049   099D 0A 40 09      jmp _for13_cond
1050   09A0             _for13_exit:
1051   09A0             ;; i = 0; 
1052   09A0 FA FF FF      lea d, [bp + -1] ; $i
1053   09A3 DA            push d
1054   09A4 26 00 00      mov b, $0
1055   09A7 E7            pop d
1056   09A8 FD 43         mov [d], b
1057   09AA 0A AD 09      jmp _if12_exit
1058   09AD             _if12_exit:
1059   09AD 0A EC 07      jmp _while11_cond
1060   09B0             _while11_exit:
1061   09B0             ;; if (i) { 
1062   09B0             _if14_cond:
1063   09B0 FA FF FF      lea d, [bp + -1] ; $i
1064   09B3 2A            mov b, [d]
1065   09B4 C0 00 00      cmp b, 0
1066   09B7 C6 85 0B      je _if14_exit
1067   09BA             _if14_true:
1068   09BA             ;; for (k = i; k < 3; k++) { 
1069   09BA             _for15_init:
1070   09BA FA FB FF      lea d, [bp + -5] ; $k
1071   09BD DA            push d
1072   09BE FA FF FF      lea d, [bp + -1] ; $i
1073   09C1 2A            mov b, [d]
1074   09C2 E7            pop d
1075   09C3 FD 43         mov [d], b
1076   09C5             _for15_cond:
1077   09C5 FA FB FF      lea d, [bp + -5] ; $k
1078   09C8 2A            mov b, [d]
1079   09C9             ; START RELATIONAL
1080   09C9 D7            push a
1081   09CA 11            mov a, b
1082   09CB 26 03 00      mov b, $3
1083   09CE B0            cmp a, b
1084   09CF FD 73         slt ; <= (signed)
1085   09D1 E4            pop a
1086   09D2             ; END RELATIONAL
1087   09D2 C0 00 00      cmp b, 0
1088   09D5 C6 FB 09      je _for15_exit
1089   09D8             _for15_block:
1090   09D8             ;; input_buffer[k] = '\0'; 
1091   09D8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1092   09DB D7            push a
1093   09DC DA            push d
1094   09DD FA FB FF      lea d, [bp + -5] ; $k
1095   09E0 2A            mov b, [d]
1096   09E1 E7            pop d
1097   09E2 5A            add d, b
1098   09E3 E4            pop a
1099   09E4 DA            push d
1100   09E5 26 00 00      mov b, $0
1101   09E8 E7            pop d
1102   09E9 FD 3E         mov [d], bl
1103   09EB             _for15_update:
1104   09EB FA FB FF      lea d, [bp + -5] ; $k
1105   09EE 2A            mov b, [d]
1106   09EF D8            push b
1107   09F0 FD 77         inc b
1108   09F2 FA FB FF      lea d, [bp + -5] ; $k
1109   09F5 FD 43         mov [d], b
1110   09F7 E5            pop b
1111   09F8 0A C5 09      jmp _for15_cond
1112   09FB             _for15_exit:
1113   09FB             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1114   09FB FA F2 FF      lea d, [bp + -14] ; $output_buffer
1115   09FE D7            push a
1116   09FF DA            push d
1117   0A00 26 00 00      mov b, $0
1118   0A03 E7            pop d
1119   0A04 5A            add d, b
1120   0A05 E4            pop a
1121   0A06 DA            push d
1122   0A07 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1123   0A0A D7            push a
1124   0A0B DA            push d
1125   0A0C 26 00 00      mov b, $0
1126   0A0F E7            pop d
1127   0A10 5A            add d, b
1128   0A11 E4            pop a
1129   0A12 32            mov bl, [d]
1130   0A13 A7 00         mov bh, 0
1131   0A15 D7            push a
1132   0A16 11            mov a, b
1133   0A17 26 FC 00      mov b, $fc
1134   0A1A 86            and a, b ; &
1135   0A1B 27            mov b, a
1136   0A1C E4            pop a
1137   0A1D             ; START SHIFT
1138   0A1D D7            push a
1139   0A1E 11            mov a, b
1140   0A1F 26 02 00      mov b, $2
1141   0A22 FD 39         mov c, b
1142   0A24 A5            ashr a, cl
1143   0A25 27            mov b, a
1144   0A26 E4            pop a
1145   0A27             ; END SHIFT
1146   0A27 E7            pop d
1147   0A28 FD 3E         mov [d], bl
1148   0A2A             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1149   0A2A FA F2 FF      lea d, [bp + -14] ; $output_buffer
1150   0A2D D7            push a
1151   0A2E DA            push d
1152   0A2F 26 01 00      mov b, $1
1153   0A32 E7            pop d
1154   0A33 5A            add d, b
1155   0A34 E4            pop a
1156   0A35 DA            push d
1157   0A36 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1158   0A39 D7            push a
1159   0A3A DA            push d
1160   0A3B 26 00 00      mov b, $0
1161   0A3E E7            pop d
1162   0A3F 5A            add d, b
1163   0A40 E4            pop a
1164   0A41 32            mov bl, [d]
1165   0A42 A7 00         mov bh, 0
1166   0A44 D7            push a
1167   0A45 11            mov a, b
1168   0A46 26 03 00      mov b, $3
1169   0A49 86            and a, b ; &
1170   0A4A 27            mov b, a
1171   0A4B E4            pop a
1172   0A4C             ; START SHIFT
1173   0A4C D7            push a
1174   0A4D 11            mov a, b
1175   0A4E 26 04 00      mov b, $4
1176   0A51 FD 39         mov c, b
1177   0A53 9D            shl a, cl
1178   0A54 27            mov b, a
1179   0A55 E4            pop a
1180   0A56             ; END SHIFT
1181   0A56             ; START TERMS
1182   0A56 D7            push a
1183   0A57 11            mov a, b
1184   0A58 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1185   0A5B D7            push a
1186   0A5C DA            push d
1187   0A5D 26 01 00      mov b, $1
1188   0A60 E7            pop d
1189   0A61 5A            add d, b
1190   0A62 E4            pop a
1191   0A63 32            mov bl, [d]
1192   0A64 A7 00         mov bh, 0
1193   0A66 D7            push a
1194   0A67 11            mov a, b
1195   0A68 26 F0 00      mov b, $f0
1196   0A6B 86            and a, b ; &
1197   0A6C 27            mov b, a
1198   0A6D E4            pop a
1199   0A6E             ; START SHIFT
1200   0A6E D7            push a
1201   0A6F 11            mov a, b
1202   0A70 26 04 00      mov b, $4
1203   0A73 FD 39         mov c, b
1204   0A75 A5            ashr a, cl
1205   0A76 27            mov b, a
1206   0A77 E4            pop a
1207   0A78             ; END SHIFT
1208   0A78 56            add b, a
1209   0A79 E4            pop a
1210   0A7A             ; END TERMS
1211   0A7A E7            pop d
1212   0A7B FD 3E         mov [d], bl
1213   0A7D             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1214   0A7D FA F2 FF      lea d, [bp + -14] ; $output_buffer
1215   0A80 D7            push a
1216   0A81 DA            push d
1217   0A82 26 02 00      mov b, $2
1218   0A85 E7            pop d
1219   0A86 5A            add d, b
1220   0A87 E4            pop a
1221   0A88 DA            push d
1222   0A89 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1223   0A8C D7            push a
1224   0A8D DA            push d
1225   0A8E 26 01 00      mov b, $1
1226   0A91 E7            pop d
1227   0A92 5A            add d, b
1228   0A93 E4            pop a
1229   0A94 32            mov bl, [d]
1230   0A95 A7 00         mov bh, 0
1231   0A97 D7            push a
1232   0A98 11            mov a, b
1233   0A99 26 0F 00      mov b, $f
1234   0A9C 86            and a, b ; &
1235   0A9D 27            mov b, a
1236   0A9E E4            pop a
1237   0A9F             ; START SHIFT
1238   0A9F D7            push a
1239   0AA0 11            mov a, b
1240   0AA1 26 02 00      mov b, $2
1241   0AA4 FD 39         mov c, b
1242   0AA6 9D            shl a, cl
1243   0AA7 27            mov b, a
1244   0AA8 E4            pop a
1245   0AA9             ; END SHIFT
1246   0AA9             ; START TERMS
1247   0AA9 D7            push a
1248   0AAA 11            mov a, b
1249   0AAB FA F6 FF      lea d, [bp + -10] ; $input_buffer
1250   0AAE D7            push a
1251   0AAF DA            push d
1252   0AB0 26 02 00      mov b, $2
1253   0AB3 E7            pop d
1254   0AB4 5A            add d, b
1255   0AB5 E4            pop a
1256   0AB6 32            mov bl, [d]
1257   0AB7 A7 00         mov bh, 0
1258   0AB9 D7            push a
1259   0ABA 11            mov a, b
1260   0ABB 26 C0 00      mov b, $c0
1261   0ABE 86            and a, b ; &
1262   0ABF 27            mov b, a
1263   0AC0 E4            pop a
1264   0AC1             ; START SHIFT
1265   0AC1 D7            push a
1266   0AC2 11            mov a, b
1267   0AC3 26 06 00      mov b, $6
1268   0AC6 FD 39         mov c, b
1269   0AC8 A5            ashr a, cl
1270   0AC9 27            mov b, a
1271   0ACA E4            pop a
1272   0ACB             ; END SHIFT
1273   0ACB 56            add b, a
1274   0ACC E4            pop a
1275   0ACD             ; END TERMS
1276   0ACD E7            pop d
1277   0ACE FD 3E         mov [d], bl
1278   0AD0             ;; for (k = 0; k < i + 1; k++) { 
1279   0AD0             _for16_init:
1280   0AD0 FA FB FF      lea d, [bp + -5] ; $k
1281   0AD3 DA            push d
1282   0AD4 26 00 00      mov b, $0
1283   0AD7 E7            pop d
1284   0AD8 FD 43         mov [d], b
1285   0ADA             _for16_cond:
1286   0ADA FA FB FF      lea d, [bp + -5] ; $k
1287   0ADD 2A            mov b, [d]
1288   0ADE             ; START RELATIONAL
1289   0ADE D7            push a
1290   0ADF 11            mov a, b
1291   0AE0 FA FF FF      lea d, [bp + -1] ; $i
1292   0AE3 2A            mov b, [d]
1293   0AE4             ; START TERMS
1294   0AE4 D7            push a
1295   0AE5 11            mov a, b
1296   0AE6 26 01 00      mov b, $1
1297   0AE9 56            add b, a
1298   0AEA E4            pop a
1299   0AEB             ; END TERMS
1300   0AEB B0            cmp a, b
1301   0AEC FD 73         slt ; <= (signed)
1302   0AEE E4            pop a
1303   0AEF             ; END RELATIONAL
1304   0AEF C0 00 00      cmp b, 0
1305   0AF2 C6 42 0B      je _for16_exit
1306   0AF5             _for16_block:
1307   0AF5             ;; output[j++] = base64_table[output_buffer[k]]; 
1308   0AF5 FA 07 00      lea d, [bp + 7] ; $output
1309   0AF8 FD 2A         mov d, [d]
1310   0AFA D7            push a
1311   0AFB DA            push d
1312   0AFC FA FD FF      lea d, [bp + -3] ; $j
1313   0AFF 2A            mov b, [d]
1314   0B00 D8            push b
1315   0B01 FD 77         inc b
1316   0B03 FA FD FF      lea d, [bp + -3] ; $j
1317   0B06 FD 43         mov [d], b
1318   0B08 E5            pop b
1319   0B09 E7            pop d
1320   0B0A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1321   0B0E E4            pop a
1322   0B0F DA            push d
1323   0B10 3B 0E 20      mov d, _base64_table ; $base64_table
1324   0B13 FD 2A         mov d, [d]
1325   0B15 D7            push a
1326   0B16 DA            push d
1327   0B17 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1328   0B1A D7            push a
1329   0B1B DA            push d
1330   0B1C FA FB FF      lea d, [bp + -5] ; $k
1331   0B1F 2A            mov b, [d]
1332   0B20 E7            pop d
1333   0B21 5A            add d, b
1334   0B22 E4            pop a
1335   0B23 32            mov bl, [d]
1336   0B24 A7 00         mov bh, 0
1337   0B26 E7            pop d
1338   0B27 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1339   0B2B E4            pop a
1340   0B2C 32            mov bl, [d]
1341   0B2D A7 00         mov bh, 0
1342   0B2F E7            pop d
1343   0B30 FD 3E         mov [d], bl
1344   0B32             _for16_update:
1345   0B32 FA FB FF      lea d, [bp + -5] ; $k
1346   0B35 2A            mov b, [d]
1347   0B36 D8            push b
1348   0B37 FD 77         inc b
1349   0B39 FA FB FF      lea d, [bp + -5] ; $k
1350   0B3C FD 43         mov [d], b
1351   0B3E E5            pop b
1352   0B3F 0A DA 0A      jmp _for16_cond
1353   0B42             _for16_exit:
1354   0B42             ;; while (i++ < 3) { 
1355   0B42             _while17_cond:
1356   0B42 FA FF FF      lea d, [bp + -1] ; $i
1357   0B45 2A            mov b, [d]
1358   0B46 D8            push b
1359   0B47 FD 77         inc b
1360   0B49 FA FF FF      lea d, [bp + -1] ; $i
1361   0B4C FD 43         mov [d], b
1362   0B4E E5            pop b
1363   0B4F             ; START RELATIONAL
1364   0B4F D7            push a
1365   0B50 11            mov a, b
1366   0B51 26 03 00      mov b, $3
1367   0B54 B0            cmp a, b
1368   0B55 FD 73         slt ; <= (signed)
1369   0B57 E4            pop a
1370   0B58             ; END RELATIONAL
1371   0B58 C0 00 00      cmp b, 0
1372   0B5B C6 82 0B      je _while17_exit
1373   0B5E             _while17_block:
1374   0B5E             ;; output[j++] = '='; 
1375   0B5E FA 07 00      lea d, [bp + 7] ; $output
1376   0B61 FD 2A         mov d, [d]
1377   0B63 D7            push a
1378   0B64 DA            push d
1379   0B65 FA FD FF      lea d, [bp + -3] ; $j
1380   0B68 2A            mov b, [d]
1381   0B69 D8            push b
1382   0B6A FD 77         inc b
1383   0B6C FA FD FF      lea d, [bp + -3] ; $j
1384   0B6F FD 43         mov [d], b
1385   0B71 E5            pop b
1386   0B72 E7            pop d
1387   0B73 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1388   0B77 E4            pop a
1389   0B78 DA            push d
1390   0B79 26 3D 00      mov b, $3d
1391   0B7C E7            pop d
1392   0B7D FD 3E         mov [d], bl
1393   0B7F 0A 42 0B      jmp _while17_cond
1394   0B82             _while17_exit:
1395   0B82 0A 85 0B      jmp _if14_exit
1396   0B85             _if14_exit:
1397   0B85             ;; output[j] = '\0'; 
1398   0B85 FA 07 00      lea d, [bp + 7] ; $output
1399   0B88 FD 2A         mov d, [d]
1400   0B8A D7            push a
1401   0B8B DA            push d
1402   0B8C FA FD FF      lea d, [bp + -3] ; $j
1403   0B8F 2A            mov b, [d]
1404   0B90 E7            pop d
1405   0B91 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1406   0B95 E4            pop a
1407   0B96 DA            push d
1408   0B97 26 00 00      mov b, $0
1409   0B9A E7            pop d
1410   0B9B FD 3E         mov [d], bl
1411   0B9D F9            leave
1412   0B9E 09            ret
1413   0B9F             
1414   0B9F             base64_char_value:
1415   0B9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1416   0BA2             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1417   0BA2             _if18_cond:
1418   0BA2 FA 05 00      lea d, [bp + 5] ; $c
1419   0BA5 32            mov bl, [d]
1420   0BA6 A7 00         mov bh, 0
1421   0BA8             ; START RELATIONAL
1422   0BA8 D7            push a
1423   0BA9 11            mov a, b
1424   0BAA 26 41 00      mov b, $41
1425   0BAD B0            cmp a, b
1426   0BAE FD 80         sge ; >=
1427   0BB0 E4            pop a
1428   0BB1             ; END RELATIONAL
1429   0BB1 D7            push a
1430   0BB2 11            mov a, b
1431   0BB3 FA 05 00      lea d, [bp + 5] ; $c
1432   0BB6 32            mov bl, [d]
1433   0BB7 A7 00         mov bh, 0
1434   0BB9             ; START RELATIONAL
1435   0BB9 D7            push a
1436   0BBA 11            mov a, b
1437   0BBB 26 5A 00      mov b, $5a
1438   0BBE B0            cmp a, b
1439   0BBF FD 74         sle ; <=
1440   0BC1 E4            pop a
1441   0BC2             ; END RELATIONAL
1442   0BC2 FD A7         sand a, b ; &&
1443   0BC4 E4            pop a
1444   0BC5 C0 00 00      cmp b, 0
1445   0BC8 C6 DE 0B      je _if18_exit
1446   0BCB             _if18_true:
1447   0BCB             ;; return c - 'A'; 
1448   0BCB FA 05 00      lea d, [bp + 5] ; $c
1449   0BCE 32            mov bl, [d]
1450   0BCF A7 00         mov bh, 0
1451   0BD1             ; START TERMS
1452   0BD1 D7            push a
1453   0BD2 11            mov a, b
1454   0BD3 26 41 00      mov b, $41
1455   0BD6 60            sub a, b
1456   0BD7 27            mov b, a
1457   0BD8 E4            pop a
1458   0BD9             ; END TERMS
1459   0BD9 F9            leave
1460   0BDA 09            ret
1461   0BDB 0A DE 0B      jmp _if18_exit
1462   0BDE             _if18_exit:
1463   0BDE             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1464   0BDE             _if19_cond:
1465   0BDE FA 05 00      lea d, [bp + 5] ; $c
1466   0BE1 32            mov bl, [d]
1467   0BE2 A7 00         mov bh, 0
1468   0BE4             ; START RELATIONAL
1469   0BE4 D7            push a
1470   0BE5 11            mov a, b
1471   0BE6 26 61 00      mov b, $61
1472   0BE9 B0            cmp a, b
1473   0BEA FD 80         sge ; >=
1474   0BEC E4            pop a
1475   0BED             ; END RELATIONAL
1476   0BED D7            push a
1477   0BEE 11            mov a, b
1478   0BEF FA 05 00      lea d, [bp + 5] ; $c
1479   0BF2 32            mov bl, [d]
1480   0BF3 A7 00         mov bh, 0
1481   0BF5             ; START RELATIONAL
1482   0BF5 D7            push a
1483   0BF6 11            mov a, b
1484   0BF7 26 7A 00      mov b, $7a
1485   0BFA B0            cmp a, b
1486   0BFB FD 74         sle ; <=
1487   0BFD E4            pop a
1488   0BFE             ; END RELATIONAL
1489   0BFE FD A7         sand a, b ; &&
1490   0C00 E4            pop a
1491   0C01 C0 00 00      cmp b, 0
1492   0C04 C6 1F 0C      je _if19_exit
1493   0C07             _if19_true:
1494   0C07             ;; return c - 'a' + 26; 
1495   0C07 FA 05 00      lea d, [bp + 5] ; $c
1496   0C0A 32            mov bl, [d]
1497   0C0B A7 00         mov bh, 0
1498   0C0D             ; START TERMS
1499   0C0D D7            push a
1500   0C0E 11            mov a, b
1501   0C0F 26 61 00      mov b, $61
1502   0C12 60            sub a, b
1503   0C13 27            mov b, a
1504   0C14 11            mov a, b
1505   0C15 26 1A 00      mov b, $1a
1506   0C18 56            add b, a
1507   0C19 E4            pop a
1508   0C1A             ; END TERMS
1509   0C1A F9            leave
1510   0C1B 09            ret
1511   0C1C 0A 1F 0C      jmp _if19_exit
1512   0C1F             _if19_exit:
1513   0C1F             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1514   0C1F             _if20_cond:
1515   0C1F FA 05 00      lea d, [bp + 5] ; $c
1516   0C22 32            mov bl, [d]
1517   0C23 A7 00         mov bh, 0
1518   0C25             ; START RELATIONAL
1519   0C25 D7            push a
1520   0C26 11            mov a, b
1521   0C27 26 30 00      mov b, $30
1522   0C2A B0            cmp a, b
1523   0C2B FD 80         sge ; >=
1524   0C2D E4            pop a
1525   0C2E             ; END RELATIONAL
1526   0C2E D7            push a
1527   0C2F 11            mov a, b
1528   0C30 FA 05 00      lea d, [bp + 5] ; $c
1529   0C33 32            mov bl, [d]
1530   0C34 A7 00         mov bh, 0
1531   0C36             ; START RELATIONAL
1532   0C36 D7            push a
1533   0C37 11            mov a, b
1534   0C38 26 39 00      mov b, $39
1535   0C3B B0            cmp a, b
1536   0C3C FD 74         sle ; <=
1537   0C3E E4            pop a
1538   0C3F             ; END RELATIONAL
1539   0C3F FD A7         sand a, b ; &&
1540   0C41 E4            pop a
1541   0C42 C0 00 00      cmp b, 0
1542   0C45 C6 60 0C      je _if20_exit
1543   0C48             _if20_true:
1544   0C48             ;; return c - '0' + 52; 
1545   0C48 FA 05 00      lea d, [bp + 5] ; $c
1546   0C4B 32            mov bl, [d]
1547   0C4C A7 00         mov bh, 0
1548   0C4E             ; START TERMS
1549   0C4E D7            push a
1550   0C4F 11            mov a, b
1551   0C50 26 30 00      mov b, $30
1552   0C53 60            sub a, b
1553   0C54 27            mov b, a
1554   0C55 11            mov a, b
1555   0C56 26 34 00      mov b, $34
1556   0C59 56            add b, a
1557   0C5A E4            pop a
1558   0C5B             ; END TERMS
1559   0C5B F9            leave
1560   0C5C 09            ret
1561   0C5D 0A 60 0C      jmp _if20_exit
1562   0C60             _if20_exit:
1563   0C60             ;; if (c == '+') return 62; 
1564   0C60             _if21_cond:
1565   0C60 FA 05 00      lea d, [bp + 5] ; $c
1566   0C63 32            mov bl, [d]
1567   0C64 A7 00         mov bh, 0
1568   0C66             ; START RELATIONAL
1569   0C66 D7            push a
1570   0C67 11            mov a, b
1571   0C68 26 2B 00      mov b, $2b
1572   0C6B B0            cmp a, b
1573   0C6C FD 71         seq ; ==
1574   0C6E E4            pop a
1575   0C6F             ; END RELATIONAL
1576   0C6F C0 00 00      cmp b, 0
1577   0C72 C6 7D 0C      je _if21_exit
1578   0C75             _if21_true:
1579   0C75             ;; return 62; 
1580   0C75 26 3E 00      mov b, $3e
1581   0C78 F9            leave
1582   0C79 09            ret
1583   0C7A 0A 7D 0C      jmp _if21_exit
1584   0C7D             _if21_exit:
1585   0C7D             ;; if (c == '/') return 63; 
1586   0C7D             _if22_cond:
1587   0C7D FA 05 00      lea d, [bp + 5] ; $c
1588   0C80 32            mov bl, [d]
1589   0C81 A7 00         mov bh, 0
1590   0C83             ; START RELATIONAL
1591   0C83 D7            push a
1592   0C84 11            mov a, b
1593   0C85 26 2F 00      mov b, $2f
1594   0C88 B0            cmp a, b
1595   0C89 FD 71         seq ; ==
1596   0C8B E4            pop a
1597   0C8C             ; END RELATIONAL
1598   0C8C C0 00 00      cmp b, 0
1599   0C8F C6 9A 0C      je _if22_exit
1600   0C92             _if22_true:
1601   0C92             ;; return 63; 
1602   0C92 26 3F 00      mov b, $3f
1603   0C95 F9            leave
1604   0C96 09            ret
1605   0C97 0A 9A 0C      jmp _if22_exit
1606   0C9A             _if22_exit:
1607   0C9A             ;; return -1; 
1608   0C9A 26 FF FF      mov b, $ffff
1609   0C9D F9            leave
1610   0C9E 09            ret
1611   0C9F             
1612   0C9F             base64_decode:
1613   0C9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1614   0CA2             ; $i 
1615   0CA2 10 00 00      mov a, $0
1616   0CA5 45 FF FF      mov [bp + -1], a
1617   0CA8             ; $j 
1618   0CA8 10 00 00      mov a, $0
1619   0CAB 45 FD FF      mov [bp + -3], a
1620   0CAE             ; $k 
1621   0CAE 10 00 00      mov a, $0
1622   0CB1 45 FB FF      mov [bp + -5], a
1623   0CB4             ; $input_len 
1624   0CB4             ; $input_buffer 
1625   0CB4             ; $output_buffer 
1626   0CB4 52 0F 00      sub sp, 15
1627   0CB7             ;; input_len = strlen(input); 
1628   0CB7 FA F9 FF      lea d, [bp + -7] ; $input_len
1629   0CBA DA            push d
1630   0CBB FA 05 00      lea d, [bp + 5] ; $input
1631   0CBE 2A            mov b, [d]
1632   0CBF FD AB         swp b
1633   0CC1 D8            push b
1634   0CC2 07 FE 05      call strlen
1635   0CC5 51 02 00      add sp, 2
1636   0CC8 E7            pop d
1637   0CC9 FD 43         mov [d], b
1638   0CCB             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1639   0CCB             _while23_cond:
1640   0CCB FA F9 FF      lea d, [bp + -7] ; $input_len
1641   0CCE 2A            mov b, [d]
1642   0CCF D8            push b
1643   0CD0 FD 7D         dec b
1644   0CD2 FA F9 FF      lea d, [bp + -7] ; $input_len
1645   0CD5 FD 43         mov [d], b
1646   0CD7 E5            pop b
1647   0CD8 D7            push a
1648   0CD9 11            mov a, b
1649   0CDA FA 05 00      lea d, [bp + 5] ; $input
1650   0CDD FD 2A         mov d, [d]
1651   0CDF D7            push a
1652   0CE0 DA            push d
1653   0CE1 FA FB FF      lea d, [bp + -5] ; $k
1654   0CE4 2A            mov b, [d]
1655   0CE5 E7            pop d
1656   0CE6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1657   0CEA E4            pop a
1658   0CEB 32            mov bl, [d]
1659   0CEC A7 00         mov bh, 0
1660   0CEE             ; START RELATIONAL
1661   0CEE D7            push a
1662   0CEF 11            mov a, b
1663   0CF0 26 3D 00      mov b, $3d
1664   0CF3 B0            cmp a, b
1665   0CF4 FD 72         sneq ; !=
1666   0CF6 E4            pop a
1667   0CF7             ; END RELATIONAL
1668   0CF7 FD A7         sand a, b ; &&
1669   0CF9 11            mov a, b
1670   0CFA FA 05 00      lea d, [bp + 5] ; $input
1671   0CFD FD 2A         mov d, [d]
1672   0CFF D7            push a
1673   0D00 DA            push d
1674   0D01 FA FB FF      lea d, [bp + -5] ; $k
1675   0D04 2A            mov b, [d]
1676   0D05 E7            pop d
1677   0D06 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1678   0D0A E4            pop a
1679   0D0B 32            mov bl, [d]
1680   0D0C A7 00         mov bh, 0
1681   0D0E DD            push bl
1682   0D0F 07 9F 0B      call base64_char_value
1683   0D12 51 01 00      add sp, 1
1684   0D15             ; START RELATIONAL
1685   0D15 D7            push a
1686   0D16 11            mov a, b
1687   0D17 26 FF FF      mov b, $ffff
1688   0D1A B0            cmp a, b
1689   0D1B FD 72         sneq ; !=
1690   0D1D E4            pop a
1691   0D1E             ; END RELATIONAL
1692   0D1E FD A7         sand a, b ; &&
1693   0D20 E4            pop a
1694   0D21 C0 00 00      cmp b, 0
1695   0D24 C6 0C 0F      je _while23_exit
1696   0D27             _while23_block:
1697   0D27             ;; input_buffer[i++] = input[k++]; 
1698   0D27 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1699   0D2A D7            push a
1700   0D2B DA            push d
1701   0D2C FA FF FF      lea d, [bp + -1] ; $i
1702   0D2F 2A            mov b, [d]
1703   0D30 D8            push b
1704   0D31 FD 77         inc b
1705   0D33 FA FF FF      lea d, [bp + -1] ; $i
1706   0D36 FD 43         mov [d], b
1707   0D38 E5            pop b
1708   0D39 E7            pop d
1709   0D3A 5A            add d, b
1710   0D3B E4            pop a
1711   0D3C DA            push d
1712   0D3D FA 05 00      lea d, [bp + 5] ; $input
1713   0D40 FD 2A         mov d, [d]
1714   0D42 D7            push a
1715   0D43 DA            push d
1716   0D44 FA FB FF      lea d, [bp + -5] ; $k
1717   0D47 2A            mov b, [d]
1718   0D48 D8            push b
1719   0D49 FD 77         inc b
1720   0D4B FA FB FF      lea d, [bp + -5] ; $k
1721   0D4E FD 43         mov [d], b
1722   0D50 E5            pop b
1723   0D51 E7            pop d
1724   0D52 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1725   0D56 E4            pop a
1726   0D57 32            mov bl, [d]
1727   0D58 A7 00         mov bh, 0
1728   0D5A E7            pop d
1729   0D5B FD 3E         mov [d], bl
1730   0D5D             ;; if (i == 4) { 
1731   0D5D             _if24_cond:
1732   0D5D FA FF FF      lea d, [bp + -1] ; $i
1733   0D60 2A            mov b, [d]
1734   0D61             ; START RELATIONAL
1735   0D61 D7            push a
1736   0D62 11            mov a, b
1737   0D63 26 04 00      mov b, $4
1738   0D66 B0            cmp a, b
1739   0D67 FD 71         seq ; ==
1740   0D69 E4            pop a
1741   0D6A             ; END RELATIONAL
1742   0D6A C0 00 00      cmp b, 0
1743   0D6D C6 09 0F      je _if24_exit
1744   0D70             _if24_true:
1745   0D70             ;; for (i = 0; i < 4; i++) { 
1746   0D70             _for25_init:
1747   0D70 FA FF FF      lea d, [bp + -1] ; $i
1748   0D73 DA            push d
1749   0D74 26 00 00      mov b, $0
1750   0D77 E7            pop d
1751   0D78 FD 43         mov [d], b
1752   0D7A             _for25_cond:
1753   0D7A FA FF FF      lea d, [bp + -1] ; $i
1754   0D7D 2A            mov b, [d]
1755   0D7E             ; START RELATIONAL
1756   0D7E D7            push a
1757   0D7F 11            mov a, b
1758   0D80 26 04 00      mov b, $4
1759   0D83 B0            cmp a, b
1760   0D84 FD 73         slt ; <= (signed)
1761   0D86 E4            pop a
1762   0D87             ; END RELATIONAL
1763   0D87 C0 00 00      cmp b, 0
1764   0D8A C6 C3 0D      je _for25_exit
1765   0D8D             _for25_block:
1766   0D8D             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
1767   0D8D FA F5 FF      lea d, [bp + -11] ; $input_buffer
1768   0D90 D7            push a
1769   0D91 DA            push d
1770   0D92 FA FF FF      lea d, [bp + -1] ; $i
1771   0D95 2A            mov b, [d]
1772   0D96 E7            pop d
1773   0D97 5A            add d, b
1774   0D98 E4            pop a
1775   0D99 DA            push d
1776   0D9A FA F5 FF      lea d, [bp + -11] ; $input_buffer
1777   0D9D D7            push a
1778   0D9E DA            push d
1779   0D9F FA FF FF      lea d, [bp + -1] ; $i
1780   0DA2 2A            mov b, [d]
1781   0DA3 E7            pop d
1782   0DA4 5A            add d, b
1783   0DA5 E4            pop a
1784   0DA6 32            mov bl, [d]
1785   0DA7 A7 00         mov bh, 0
1786   0DA9 DD            push bl
1787   0DAA 07 9F 0B      call base64_char_value
1788   0DAD 51 01 00      add sp, 1
1789   0DB0 E7            pop d
1790   0DB1 FD 3E         mov [d], bl
1791   0DB3             _for25_update:
1792   0DB3 FA FF FF      lea d, [bp + -1] ; $i
1793   0DB6 2A            mov b, [d]
1794   0DB7 D8            push b
1795   0DB8 FD 77         inc b
1796   0DBA FA FF FF      lea d, [bp + -1] ; $i
1797   0DBD FD 43         mov [d], b
1798   0DBF E5            pop b
1799   0DC0 0A 7A 0D      jmp _for25_cond
1800   0DC3             _for25_exit:
1801   0DC3             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1802   0DC3 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1803   0DC6 D7            push a
1804   0DC7 DA            push d
1805   0DC8 26 00 00      mov b, $0
1806   0DCB E7            pop d
1807   0DCC 5A            add d, b
1808   0DCD E4            pop a
1809   0DCE DA            push d
1810   0DCF FA F5 FF      lea d, [bp + -11] ; $input_buffer
1811   0DD2 D7            push a
1812   0DD3 DA            push d
1813   0DD4 26 00 00      mov b, $0
1814   0DD7 E7            pop d
1815   0DD8 5A            add d, b
1816   0DD9 E4            pop a
1817   0DDA 32            mov bl, [d]
1818   0DDB A7 00         mov bh, 0
1819   0DDD             ; START SHIFT
1820   0DDD D7            push a
1821   0DDE 11            mov a, b
1822   0DDF 26 02 00      mov b, $2
1823   0DE2 FD 39         mov c, b
1824   0DE4 9D            shl a, cl
1825   0DE5 27            mov b, a
1826   0DE6 E4            pop a
1827   0DE7             ; END SHIFT
1828   0DE7             ; START TERMS
1829   0DE7 D7            push a
1830   0DE8 11            mov a, b
1831   0DE9 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1832   0DEC D7            push a
1833   0DED DA            push d
1834   0DEE 26 01 00      mov b, $1
1835   0DF1 E7            pop d
1836   0DF2 5A            add d, b
1837   0DF3 E4            pop a
1838   0DF4 32            mov bl, [d]
1839   0DF5 A7 00         mov bh, 0
1840   0DF7 D7            push a
1841   0DF8 11            mov a, b
1842   0DF9 26 30 00      mov b, $30
1843   0DFC 86            and a, b ; &
1844   0DFD 27            mov b, a
1845   0DFE E4            pop a
1846   0DFF             ; START SHIFT
1847   0DFF D7            push a
1848   0E00 11            mov a, b
1849   0E01 26 04 00      mov b, $4
1850   0E04 FD 39         mov c, b
1851   0E06 A5            ashr a, cl
1852   0E07 27            mov b, a
1853   0E08 E4            pop a
1854   0E09             ; END SHIFT
1855   0E09 56            add b, a
1856   0E0A E4            pop a
1857   0E0B             ; END TERMS
1858   0E0B E7            pop d
1859   0E0C FD 3E         mov [d], bl
1860   0E0E             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1861   0E0E FA F2 FF      lea d, [bp + -14] ; $output_buffer
1862   0E11 D7            push a
1863   0E12 DA            push d
1864   0E13 26 01 00      mov b, $1
1865   0E16 E7            pop d
1866   0E17 5A            add d, b
1867   0E18 E4            pop a
1868   0E19 DA            push d
1869   0E1A FA F5 FF      lea d, [bp + -11] ; $input_buffer
1870   0E1D D7            push a
1871   0E1E DA            push d
1872   0E1F 26 01 00      mov b, $1
1873   0E22 E7            pop d
1874   0E23 5A            add d, b
1875   0E24 E4            pop a
1876   0E25 32            mov bl, [d]
1877   0E26 A7 00         mov bh, 0
1878   0E28 D7            push a
1879   0E29 11            mov a, b
1880   0E2A 26 0F 00      mov b, $f
1881   0E2D 86            and a, b ; &
1882   0E2E 27            mov b, a
1883   0E2F E4            pop a
1884   0E30             ; START SHIFT
1885   0E30 D7            push a
1886   0E31 11            mov a, b
1887   0E32 26 04 00      mov b, $4
1888   0E35 FD 39         mov c, b
1889   0E37 9D            shl a, cl
1890   0E38 27            mov b, a
1891   0E39 E4            pop a
1892   0E3A             ; END SHIFT
1893   0E3A             ; START TERMS
1894   0E3A D7            push a
1895   0E3B 11            mov a, b
1896   0E3C FA F5 FF      lea d, [bp + -11] ; $input_buffer
1897   0E3F D7            push a
1898   0E40 DA            push d
1899   0E41 26 02 00      mov b, $2
1900   0E44 E7            pop d
1901   0E45 5A            add d, b
1902   0E46 E4            pop a
1903   0E47 32            mov bl, [d]
1904   0E48 A7 00         mov bh, 0
1905   0E4A D7            push a
1906   0E4B 11            mov a, b
1907   0E4C 26 3C 00      mov b, $3c
1908   0E4F 86            and a, b ; &
1909   0E50 27            mov b, a
1910   0E51 E4            pop a
1911   0E52             ; START SHIFT
1912   0E52 D7            push a
1913   0E53 11            mov a, b
1914   0E54 26 02 00      mov b, $2
1915   0E57 FD 39         mov c, b
1916   0E59 A5            ashr a, cl
1917   0E5A 27            mov b, a
1918   0E5B E4            pop a
1919   0E5C             ; END SHIFT
1920   0E5C 56            add b, a
1921   0E5D E4            pop a
1922   0E5E             ; END TERMS
1923   0E5E E7            pop d
1924   0E5F FD 3E         mov [d], bl
1925   0E61             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1926   0E61 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1927   0E64 D7            push a
1928   0E65 DA            push d
1929   0E66 26 02 00      mov b, $2
1930   0E69 E7            pop d
1931   0E6A 5A            add d, b
1932   0E6B E4            pop a
1933   0E6C DA            push d
1934   0E6D FA F5 FF      lea d, [bp + -11] ; $input_buffer
1935   0E70 D7            push a
1936   0E71 DA            push d
1937   0E72 26 02 00      mov b, $2
1938   0E75 E7            pop d
1939   0E76 5A            add d, b
1940   0E77 E4            pop a
1941   0E78 32            mov bl, [d]
1942   0E79 A7 00         mov bh, 0
1943   0E7B D7            push a
1944   0E7C 11            mov a, b
1945   0E7D 26 03 00      mov b, $3
1946   0E80 86            and a, b ; &
1947   0E81 27            mov b, a
1948   0E82 E4            pop a
1949   0E83             ; START SHIFT
1950   0E83 D7            push a
1951   0E84 11            mov a, b
1952   0E85 26 06 00      mov b, $6
1953   0E88 FD 39         mov c, b
1954   0E8A 9D            shl a, cl
1955   0E8B 27            mov b, a
1956   0E8C E4            pop a
1957   0E8D             ; END SHIFT
1958   0E8D             ; START TERMS
1959   0E8D D7            push a
1960   0E8E 11            mov a, b
1961   0E8F FA F5 FF      lea d, [bp + -11] ; $input_buffer
1962   0E92 D7            push a
1963   0E93 DA            push d
1964   0E94 26 03 00      mov b, $3
1965   0E97 E7            pop d
1966   0E98 5A            add d, b
1967   0E99 E4            pop a
1968   0E9A 32            mov bl, [d]
1969   0E9B A7 00         mov bh, 0
1970   0E9D 56            add b, a
1971   0E9E E4            pop a
1972   0E9F             ; END TERMS
1973   0E9F E7            pop d
1974   0EA0 FD 3E         mov [d], bl
1975   0EA2             ;; for (i = 0; i < 3; i++) { 
1976   0EA2             _for26_init:
1977   0EA2 FA FF FF      lea d, [bp + -1] ; $i
1978   0EA5 DA            push d
1979   0EA6 26 00 00      mov b, $0
1980   0EA9 E7            pop d
1981   0EAA FD 43         mov [d], b
1982   0EAC             _for26_cond:
1983   0EAC FA FF FF      lea d, [bp + -1] ; $i
1984   0EAF 2A            mov b, [d]
1985   0EB0             ; START RELATIONAL
1986   0EB0 D7            push a
1987   0EB1 11            mov a, b
1988   0EB2 26 03 00      mov b, $3
1989   0EB5 B0            cmp a, b
1990   0EB6 FD 73         slt ; <= (signed)
1991   0EB8 E4            pop a
1992   0EB9             ; END RELATIONAL
1993   0EB9 C0 00 00      cmp b, 0
1994   0EBC C6 FC 0E      je _for26_exit
1995   0EBF             _for26_block:
1996   0EBF             ;; output[j++] = output_buffer[i]; 
1997   0EBF FA 07 00      lea d, [bp + 7] ; $output
1998   0EC2 FD 2A         mov d, [d]
1999   0EC4 D7            push a
2000   0EC5 DA            push d
2001   0EC6 FA FD FF      lea d, [bp + -3] ; $j
2002   0EC9 2A            mov b, [d]
2003   0ECA D8            push b
2004   0ECB FD 77         inc b
2005   0ECD FA FD FF      lea d, [bp + -3] ; $j
2006   0ED0 FD 43         mov [d], b
2007   0ED2 E5            pop b
2008   0ED3 E7            pop d
2009   0ED4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2010   0ED8 E4            pop a
2011   0ED9 DA            push d
2012   0EDA FA F2 FF      lea d, [bp + -14] ; $output_buffer
2013   0EDD D7            push a
2014   0EDE DA            push d
2015   0EDF FA FF FF      lea d, [bp + -1] ; $i
2016   0EE2 2A            mov b, [d]
2017   0EE3 E7            pop d
2018   0EE4 5A            add d, b
2019   0EE5 E4            pop a
2020   0EE6 32            mov bl, [d]
2021   0EE7 A7 00         mov bh, 0
2022   0EE9 E7            pop d
2023   0EEA FD 3E         mov [d], bl
2024   0EEC             _for26_update:
2025   0EEC FA FF FF      lea d, [bp + -1] ; $i
2026   0EEF 2A            mov b, [d]
2027   0EF0 D8            push b
2028   0EF1 FD 77         inc b
2029   0EF3 FA FF FF      lea d, [bp + -1] ; $i
2030   0EF6 FD 43         mov [d], b
2031   0EF8 E5            pop b
2032   0EF9 0A AC 0E      jmp _for26_cond
2033   0EFC             _for26_exit:
2034   0EFC             ;; i = 0; 
2035   0EFC FA FF FF      lea d, [bp + -1] ; $i
2036   0EFF DA            push d
2037   0F00 26 00 00      mov b, $0
2038   0F03 E7            pop d
2039   0F04 FD 43         mov [d], b
2040   0F06 0A 09 0F      jmp _if24_exit
2041   0F09             _if24_exit:
2042   0F09 0A CB 0C      jmp _while23_cond
2043   0F0C             _while23_exit:
2044   0F0C             ;; if (i) { 
2045   0F0C             _if27_cond:
2046   0F0C FA FF FF      lea d, [bp + -1] ; $i
2047   0F0F 2A            mov b, [d]
2048   0F10 C0 00 00      cmp b, 0
2049   0F13 C6 AE 10      je _if27_exit
2050   0F16             _if27_true:
2051   0F16             ;; for (k = i; k < 4; k++) { 
2052   0F16             _for28_init:
2053   0F16 FA FB FF      lea d, [bp + -5] ; $k
2054   0F19 DA            push d
2055   0F1A FA FF FF      lea d, [bp + -1] ; $i
2056   0F1D 2A            mov b, [d]
2057   0F1E E7            pop d
2058   0F1F FD 43         mov [d], b
2059   0F21             _for28_cond:
2060   0F21 FA FB FF      lea d, [bp + -5] ; $k
2061   0F24 2A            mov b, [d]
2062   0F25             ; START RELATIONAL
2063   0F25 D7            push a
2064   0F26 11            mov a, b
2065   0F27 26 04 00      mov b, $4
2066   0F2A B0            cmp a, b
2067   0F2B FD 73         slt ; <= (signed)
2068   0F2D E4            pop a
2069   0F2E             ; END RELATIONAL
2070   0F2E C0 00 00      cmp b, 0
2071   0F31 C6 57 0F      je _for28_exit
2072   0F34             _for28_block:
2073   0F34             ;; input_buffer[k] = 0; 
2074   0F34 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2075   0F37 D7            push a
2076   0F38 DA            push d
2077   0F39 FA FB FF      lea d, [bp + -5] ; $k
2078   0F3C 2A            mov b, [d]
2079   0F3D E7            pop d
2080   0F3E 5A            add d, b
2081   0F3F E4            pop a
2082   0F40 DA            push d
2083   0F41 26 00 00      mov b, $0
2084   0F44 E7            pop d
2085   0F45 FD 3E         mov [d], bl
2086   0F47             _for28_update:
2087   0F47 FA FB FF      lea d, [bp + -5] ; $k
2088   0F4A 2A            mov b, [d]
2089   0F4B D8            push b
2090   0F4C FD 77         inc b
2091   0F4E FA FB FF      lea d, [bp + -5] ; $k
2092   0F51 FD 43         mov [d], b
2093   0F53 E5            pop b
2094   0F54 0A 21 0F      jmp _for28_cond
2095   0F57             _for28_exit:
2096   0F57             ;; for (k = 0; k < 4; k++) { 
2097   0F57             _for29_init:
2098   0F57 FA FB FF      lea d, [bp + -5] ; $k
2099   0F5A DA            push d
2100   0F5B 26 00 00      mov b, $0
2101   0F5E E7            pop d
2102   0F5F FD 43         mov [d], b
2103   0F61             _for29_cond:
2104   0F61 FA FB FF      lea d, [bp + -5] ; $k
2105   0F64 2A            mov b, [d]
2106   0F65             ; START RELATIONAL
2107   0F65 D7            push a
2108   0F66 11            mov a, b
2109   0F67 26 04 00      mov b, $4
2110   0F6A B0            cmp a, b
2111   0F6B FD 73         slt ; <= (signed)
2112   0F6D E4            pop a
2113   0F6E             ; END RELATIONAL
2114   0F6E C0 00 00      cmp b, 0
2115   0F71 C6 AA 0F      je _for29_exit
2116   0F74             _for29_block:
2117   0F74             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2118   0F74 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2119   0F77 D7            push a
2120   0F78 DA            push d
2121   0F79 FA FB FF      lea d, [bp + -5] ; $k
2122   0F7C 2A            mov b, [d]
2123   0F7D E7            pop d
2124   0F7E 5A            add d, b
2125   0F7F E4            pop a
2126   0F80 DA            push d
2127   0F81 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2128   0F84 D7            push a
2129   0F85 DA            push d
2130   0F86 FA FB FF      lea d, [bp + -5] ; $k
2131   0F89 2A            mov b, [d]
2132   0F8A E7            pop d
2133   0F8B 5A            add d, b
2134   0F8C E4            pop a
2135   0F8D 32            mov bl, [d]
2136   0F8E A7 00         mov bh, 0
2137   0F90 DD            push bl
2138   0F91 07 9F 0B      call base64_char_value
2139   0F94 51 01 00      add sp, 1
2140   0F97 E7            pop d
2141   0F98 FD 3E         mov [d], bl
2142   0F9A             _for29_update:
2143   0F9A FA FB FF      lea d, [bp + -5] ; $k
2144   0F9D 2A            mov b, [d]
2145   0F9E D8            push b
2146   0F9F FD 77         inc b
2147   0FA1 FA FB FF      lea d, [bp + -5] ; $k
2148   0FA4 FD 43         mov [d], b
2149   0FA6 E5            pop b
2150   0FA7 0A 61 0F      jmp _for29_cond
2151   0FAA             _for29_exit:
2152   0FAA             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2153   0FAA FA F2 FF      lea d, [bp + -14] ; $output_buffer
2154   0FAD D7            push a
2155   0FAE DA            push d
2156   0FAF 26 00 00      mov b, $0
2157   0FB2 E7            pop d
2158   0FB3 5A            add d, b
2159   0FB4 E4            pop a
2160   0FB5 DA            push d
2161   0FB6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2162   0FB9 D7            push a
2163   0FBA DA            push d
2164   0FBB 26 00 00      mov b, $0
2165   0FBE E7            pop d
2166   0FBF 5A            add d, b
2167   0FC0 E4            pop a
2168   0FC1 32            mov bl, [d]
2169   0FC2 A7 00         mov bh, 0
2170   0FC4             ; START SHIFT
2171   0FC4 D7            push a
2172   0FC5 11            mov a, b
2173   0FC6 26 02 00      mov b, $2
2174   0FC9 FD 39         mov c, b
2175   0FCB 9D            shl a, cl
2176   0FCC 27            mov b, a
2177   0FCD E4            pop a
2178   0FCE             ; END SHIFT
2179   0FCE             ; START TERMS
2180   0FCE D7            push a
2181   0FCF 11            mov a, b
2182   0FD0 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2183   0FD3 D7            push a
2184   0FD4 DA            push d
2185   0FD5 26 01 00      mov b, $1
2186   0FD8 E7            pop d
2187   0FD9 5A            add d, b
2188   0FDA E4            pop a
2189   0FDB 32            mov bl, [d]
2190   0FDC A7 00         mov bh, 0
2191   0FDE D7            push a
2192   0FDF 11            mov a, b
2193   0FE0 26 30 00      mov b, $30
2194   0FE3 86            and a, b ; &
2195   0FE4 27            mov b, a
2196   0FE5 E4            pop a
2197   0FE6             ; START SHIFT
2198   0FE6 D7            push a
2199   0FE7 11            mov a, b
2200   0FE8 26 04 00      mov b, $4
2201   0FEB FD 39         mov c, b
2202   0FED A5            ashr a, cl
2203   0FEE 27            mov b, a
2204   0FEF E4            pop a
2205   0FF0             ; END SHIFT
2206   0FF0 56            add b, a
2207   0FF1 E4            pop a
2208   0FF2             ; END TERMS
2209   0FF2 E7            pop d
2210   0FF3 FD 3E         mov [d], bl
2211   0FF5             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2212   0FF5 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2213   0FF8 D7            push a
2214   0FF9 DA            push d
2215   0FFA 26 01 00      mov b, $1
2216   0FFD E7            pop d
2217   0FFE 5A            add d, b
2218   0FFF E4            pop a
2219   1000 DA            push d
2220   1001 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2221   1004 D7            push a
2222   1005 DA            push d
2223   1006 26 01 00      mov b, $1
2224   1009 E7            pop d
2225   100A 5A            add d, b
2226   100B E4            pop a
2227   100C 32            mov bl, [d]
2228   100D A7 00         mov bh, 0
2229   100F D7            push a
2230   1010 11            mov a, b
2231   1011 26 0F 00      mov b, $f
2232   1014 86            and a, b ; &
2233   1015 27            mov b, a
2234   1016 E4            pop a
2235   1017             ; START SHIFT
2236   1017 D7            push a
2237   1018 11            mov a, b
2238   1019 26 04 00      mov b, $4
2239   101C FD 39         mov c, b
2240   101E 9D            shl a, cl
2241   101F 27            mov b, a
2242   1020 E4            pop a
2243   1021             ; END SHIFT
2244   1021             ; START TERMS
2245   1021 D7            push a
2246   1022 11            mov a, b
2247   1023 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2248   1026 D7            push a
2249   1027 DA            push d
2250   1028 26 02 00      mov b, $2
2251   102B E7            pop d
2252   102C 5A            add d, b
2253   102D E4            pop a
2254   102E 32            mov bl, [d]
2255   102F A7 00         mov bh, 0
2256   1031 D7            push a
2257   1032 11            mov a, b
2258   1033 26 3C 00      mov b, $3c
2259   1036 86            and a, b ; &
2260   1037 27            mov b, a
2261   1038 E4            pop a
2262   1039             ; START SHIFT
2263   1039 D7            push a
2264   103A 11            mov a, b
2265   103B 26 02 00      mov b, $2
2266   103E FD 39         mov c, b
2267   1040 A5            ashr a, cl
2268   1041 27            mov b, a
2269   1042 E4            pop a
2270   1043             ; END SHIFT
2271   1043 56            add b, a
2272   1044 E4            pop a
2273   1045             ; END TERMS
2274   1045 E7            pop d
2275   1046 FD 3E         mov [d], bl
2276   1048             ;; for (k = 0; k < i - 1; k++) { 
2277   1048             _for30_init:
2278   1048 FA FB FF      lea d, [bp + -5] ; $k
2279   104B DA            push d
2280   104C 26 00 00      mov b, $0
2281   104F E7            pop d
2282   1050 FD 43         mov [d], b
2283   1052             _for30_cond:
2284   1052 FA FB FF      lea d, [bp + -5] ; $k
2285   1055 2A            mov b, [d]
2286   1056             ; START RELATIONAL
2287   1056 D7            push a
2288   1057 11            mov a, b
2289   1058 FA FF FF      lea d, [bp + -1] ; $i
2290   105B 2A            mov b, [d]
2291   105C             ; START TERMS
2292   105C D7            push a
2293   105D 11            mov a, b
2294   105E 26 01 00      mov b, $1
2295   1061 60            sub a, b
2296   1062 27            mov b, a
2297   1063 E4            pop a
2298   1064             ; END TERMS
2299   1064 B0            cmp a, b
2300   1065 FD 73         slt ; <= (signed)
2301   1067 E4            pop a
2302   1068             ; END RELATIONAL
2303   1068 C0 00 00      cmp b, 0
2304   106B C6 AB 10      je _for30_exit
2305   106E             _for30_block:
2306   106E             ;; output[j++] = output_buffer[k]; 
2307   106E FA 07 00      lea d, [bp + 7] ; $output
2308   1071 FD 2A         mov d, [d]
2309   1073 D7            push a
2310   1074 DA            push d
2311   1075 FA FD FF      lea d, [bp + -3] ; $j
2312   1078 2A            mov b, [d]
2313   1079 D8            push b
2314   107A FD 77         inc b
2315   107C FA FD FF      lea d, [bp + -3] ; $j
2316   107F FD 43         mov [d], b
2317   1081 E5            pop b
2318   1082 E7            pop d
2319   1083 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2320   1087 E4            pop a
2321   1088 DA            push d
2322   1089 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2323   108C D7            push a
2324   108D DA            push d
2325   108E FA FB FF      lea d, [bp + -5] ; $k
2326   1091 2A            mov b, [d]
2327   1092 E7            pop d
2328   1093 5A            add d, b
2329   1094 E4            pop a
2330   1095 32            mov bl, [d]
2331   1096 A7 00         mov bh, 0
2332   1098 E7            pop d
2333   1099 FD 3E         mov [d], bl
2334   109B             _for30_update:
2335   109B FA FB FF      lea d, [bp + -5] ; $k
2336   109E 2A            mov b, [d]
2337   109F D8            push b
2338   10A0 FD 77         inc b
2339   10A2 FA FB FF      lea d, [bp + -5] ; $k
2340   10A5 FD 43         mov [d], b
2341   10A7 E5            pop b
2342   10A8 0A 52 10      jmp _for30_cond
2343   10AB             _for30_exit:
2344   10AB 0A AE 10      jmp _if27_exit
2345   10AE             _if27_exit:
2346   10AE             ;; output[j] = '\0'; 
2347   10AE FA 07 00      lea d, [bp + 7] ; $output
2348   10B1 FD 2A         mov d, [d]
2349   10B3 D7            push a
2350   10B4 DA            push d
2351   10B5 FA FD FF      lea d, [bp + -3] ; $j
2352   10B8 2A            mov b, [d]
2353   10B9 E7            pop d
2354   10BA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2355   10BE E4            pop a
2356   10BF DA            push d
2357   10C0 26 00 00      mov b, $0
2358   10C3 E7            pop d
2359   10C4 FD 3E         mov [d], bl
2360   10C6 F9            leave
2361   10C7 09            ret
2362   10C8             
2363   10C8             va_start:
2364   10C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2365   10CB             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2366   10CB FA 05 00      lea d, [bp + 5] ; $argp
2367   10CE FD 2A         mov d, [d]
2368   10D0 58 00 00      add d, 0
2369   10D3 DA            push d
2370   10D4 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2371   10D7 2A            mov b, [d]
2372   10D8             ; START TERMS
2373   10D8 D7            push a
2374   10D9 11            mov a, b
2375   10DA 26 02 00      mov b, 2
2376   10DD 56            add b, a
2377   10DE E4            pop a
2378   10DF             ; END TERMS
2379   10DF E7            pop d
2380   10E0 FD 43         mov [d], b
2381   10E2 F9            leave
2382   10E3 09            ret
2383   10E4             
2384   10E4             va_arg:
2385   10E4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2386   10E7             ; $p 
2387   10E7 52 02 00      sub sp, 2
2388   10EA             ;; p = argp->current_arg; 
2389   10EA FA FF FF      lea d, [bp + -1] ; $p
2390   10ED DA            push d
2391   10EE FA 05 00      lea d, [bp + 5] ; $argp
2392   10F1 FD 2A         mov d, [d]
2393   10F3 58 00 00      add d, 0
2394   10F6 2A            mov b, [d]
2395   10F7 E7            pop d
2396   10F8 FD 43         mov [d], b
2397   10FA             ;; argp->current_arg = argp->current_arg + size; 
2398   10FA FA 05 00      lea d, [bp + 5] ; $argp
2399   10FD FD 2A         mov d, [d]
2400   10FF 58 00 00      add d, 0
2401   1102 DA            push d
2402   1103 FA 05 00      lea d, [bp + 5] ; $argp
2403   1106 FD 2A         mov d, [d]
2404   1108 58 00 00      add d, 0
2405   110B 2A            mov b, [d]
2406   110C             ; START TERMS
2407   110C D7            push a
2408   110D 11            mov a, b
2409   110E FA 07 00      lea d, [bp + 7] ; $size
2410   1111 2A            mov b, [d]
2411   1112 56            add b, a
2412   1113 E4            pop a
2413   1114             ; END TERMS
2414   1114 E7            pop d
2415   1115 FD 43         mov [d], b
2416   1117             ;; return p; 
2417   1117 FA FF FF      lea d, [bp + -1] ; $p
2418   111A 2A            mov b, [d]
2419   111B F9            leave
2420   111C 09            ret
2421   111D             
2422   111D             va_end:
2423   111D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2424   1120             ;; argp->current_arg =   0   ; 
2425   1120 FA 05 00      lea d, [bp + 5] ; $argp
2426   1123 FD 2A         mov d, [d]
2427   1125 58 00 00      add d, 0
2428   1128 DA            push d
2429   1129 26 00 00      mov b, $0
2430   112C E7            pop d
2431   112D FD 43         mov [d], b
2432   112F F9            leave
2433   1130 09            ret
2434   1131             
2435   1131             printf:
2436   1131 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2437   1134             ; $p 
2438   1134             ; $fp 
2439   1134             ; $i 
2440   1134 52 06 00      sub sp, 6
2441   1137             ;; fp = format; 
2442   1137 FA FD FF      lea d, [bp + -3] ; $fp
2443   113A DA            push d
2444   113B FA 05 00      lea d, [bp + 5] ; $format
2445   113E 2A            mov b, [d]
2446   113F E7            pop d
2447   1140 FD 43         mov [d], b
2448   1142             ;; p = &format + 2; 
2449   1142 FA FF FF      lea d, [bp + -1] ; $p
2450   1145 DA            push d
2451   1146 FA 05 00      lea d, [bp + 5] ; $format
2452   1149 2D            mov b, d
2453   114A             ; START TERMS
2454   114A D7            push a
2455   114B 11            mov a, b
2456   114C 26 02 00      mov b, $2
2457   114F 56            add b, a
2458   1150 E4            pop a
2459   1151             ; END TERMS
2460   1151 E7            pop d
2461   1152 FD 43         mov [d], b
2462   1154             ;; for(;;){ 
2463   1154             _for31_init:
2464   1154             _for31_cond:
2465   1154             _for31_block:
2466   1154             ;; if(!*fp) break; 
2467   1154             _if32_cond:
2468   1154 FA FD FF      lea d, [bp + -3] ; $fp
2469   1157 2A            mov b, [d]
2470   1158 74            mov d, b
2471   1159 32            mov bl, [d]
2472   115A A7 00         mov bh, 0
2473   115C C0 00 00      cmp b, 0
2474   115F FD 71         seq ; !
2475   1161 C0 00 00      cmp b, 0
2476   1164 C6 6D 11      je _if32_else
2477   1167             _if32_true:
2478   1167             ;; break; 
2479   1167 0A 73 13      jmp _for31_exit ; for break
2480   116A 0A 70 13      jmp _if32_exit
2481   116D             _if32_else:
2482   116D             ;; if(*fp == '%'){ 
2483   116D             _if33_cond:
2484   116D FA FD FF      lea d, [bp + -3] ; $fp
2485   1170 2A            mov b, [d]
2486   1171 74            mov d, b
2487   1172 32            mov bl, [d]
2488   1173 A7 00         mov bh, 0
2489   1175             ; START RELATIONAL
2490   1175 D7            push a
2491   1176 11            mov a, b
2492   1177 26 25 00      mov b, $25
2493   117A B0            cmp a, b
2494   117B FD 71         seq ; ==
2495   117D E4            pop a
2496   117E             ; END RELATIONAL
2497   117E C0 00 00      cmp b, 0
2498   1181 C6 54 13      je _if33_else
2499   1184             _if33_true:
2500   1184             ;; fp++; 
2501   1184 FA FD FF      lea d, [bp + -3] ; $fp
2502   1187 2A            mov b, [d]
2503   1188 D8            push b
2504   1189 FD 77         inc b
2505   118B FA FD FF      lea d, [bp + -3] ; $fp
2506   118E FD 43         mov [d], b
2507   1190 E5            pop b
2508   1191             ;; switch(*fp){ 
2509   1191             _switch34_expr:
2510   1191 FA FD FF      lea d, [bp + -3] ; $fp
2511   1194 2A            mov b, [d]
2512   1195 74            mov d, b
2513   1196 32            mov bl, [d]
2514   1197 A7 00         mov bh, 0
2515   1199             _switch34_comparisons:
2516   1199 C1 6C         cmp bl, $6c
2517   119B C6 C7 11      je _switch34_case0
2518   119E C1 4C         cmp bl, $4c
2519   11A0 C6 C7 11      je _switch34_case1
2520   11A3 C1 64         cmp bl, $64
2521   11A5 C6 94 12      je _switch34_case2
2522   11A8 C1 69         cmp bl, $69
2523   11AA C6 94 12      je _switch34_case3
2524   11AD C1 75         cmp bl, $75
2525   11AF C6 B8 12      je _switch34_case4
2526   11B2 C1 78         cmp bl, $78
2527   11B4 C6 DC 12      je _switch34_case5
2528   11B7 C1 63         cmp bl, $63
2529   11B9 C6 FA 12      je _switch34_case6
2530   11BC C1 73         cmp bl, $73
2531   11BE C6 19 13      je _switch34_case7
2532   11C1 0A 38 13      jmp _switch34_default
2533   11C4 0A 44 13      jmp _switch34_exit
2534   11C7             _switch34_case0:
2535   11C7             _switch34_case1:
2536   11C7             ;; fp++; 
2537   11C7 FA FD FF      lea d, [bp + -3] ; $fp
2538   11CA 2A            mov b, [d]
2539   11CB D8            push b
2540   11CC FD 77         inc b
2541   11CE FA FD FF      lea d, [bp + -3] ; $fp
2542   11D1 FD 43         mov [d], b
2543   11D3 E5            pop b
2544   11D4             ;; if(*fp == 'd' || *fp == 'i') 
2545   11D4             _if35_cond:
2546   11D4 FA FD FF      lea d, [bp + -3] ; $fp
2547   11D7 2A            mov b, [d]
2548   11D8 74            mov d, b
2549   11D9 32            mov bl, [d]
2550   11DA A7 00         mov bh, 0
2551   11DC             ; START RELATIONAL
2552   11DC D7            push a
2553   11DD 11            mov a, b
2554   11DE 26 64 00      mov b, $64
2555   11E1 B0            cmp a, b
2556   11E2 FD 71         seq ; ==
2557   11E4 E4            pop a
2558   11E5             ; END RELATIONAL
2559   11E5 D7            push a
2560   11E6 11            mov a, b
2561   11E7 FA FD FF      lea d, [bp + -3] ; $fp
2562   11EA 2A            mov b, [d]
2563   11EB 74            mov d, b
2564   11EC 32            mov bl, [d]
2565   11ED A7 00         mov bh, 0
2566   11EF             ; START RELATIONAL
2567   11EF D7            push a
2568   11F0 11            mov a, b
2569   11F1 26 69 00      mov b, $69
2570   11F4 B0            cmp a, b
2571   11F5 FD 71         seq ; ==
2572   11F7 E4            pop a
2573   11F8             ; END RELATIONAL
2574   11F8 FD A8         sor a, b ; ||
2575   11FA E4            pop a
2576   11FB C0 00 00      cmp b, 0
2577   11FE C6 15 12      je _if35_else
2578   1201             _if35_true:
2579   1201             ;; print_signed_long(*(long *)p); 
2580   1201 FD 79         mov g, b
2581   1203 28            mov b, c
2582   1204 FD AB         swp b
2583   1206 D8            push b
2584   1207 FD 27         mov b, g
2585   1209 FD AB         swp b
2586   120B D8            push b
2587   120C 07 01 16      call print_signed_long
2588   120F 51 04 00      add sp, 4
2589   1212 0A 7F 12      jmp _if35_exit
2590   1215             _if35_else:
2591   1215             ;; if(*fp == 'u') 
2592   1215             _if36_cond:
2593   1215 FA FD FF      lea d, [bp + -3] ; $fp
2594   1218 2A            mov b, [d]
2595   1219 74            mov d, b
2596   121A 32            mov bl, [d]
2597   121B A7 00         mov bh, 0
2598   121D             ; START RELATIONAL
2599   121D D7            push a
2600   121E 11            mov a, b
2601   121F 26 75 00      mov b, $75
2602   1222 B0            cmp a, b
2603   1223 FD 71         seq ; ==
2604   1225 E4            pop a
2605   1226             ; END RELATIONAL
2606   1226 C0 00 00      cmp b, 0
2607   1229 C6 40 12      je _if36_else
2608   122C             _if36_true:
2609   122C             ;; print_unsigned_long(*(unsigned long *)p); 
2610   122C FD 79         mov g, b
2611   122E 28            mov b, c
2612   122F FD AB         swp b
2613   1231 D8            push b
2614   1232 FD 27         mov b, g
2615   1234 FD AB         swp b
2616   1236 D8            push b
2617   1237 07 53 17      call print_unsigned_long
2618   123A 51 04 00      add sp, 4
2619   123D 0A 7F 12      jmp _if36_exit
2620   1240             _if36_else:
2621   1240             ;; if(*fp == 'x') 
2622   1240             _if37_cond:
2623   1240 FA FD FF      lea d, [bp + -3] ; $fp
2624   1243 2A            mov b, [d]
2625   1244 74            mov d, b
2626   1245 32            mov bl, [d]
2627   1246 A7 00         mov bh, 0
2628   1248             ; START RELATIONAL
2629   1248 D7            push a
2630   1249 11            mov a, b
2631   124A 26 78 00      mov b, $78
2632   124D B0            cmp a, b
2633   124E FD 71         seq ; ==
2634   1250 E4            pop a
2635   1251             ; END RELATIONAL
2636   1251 C0 00 00      cmp b, 0
2637   1254 C6 76 12      je _if37_else
2638   1257             _if37_true:
2639   1257             ;; printx32(*(long int *)p); 
2640   1257 FA FF FF      lea d, [bp + -1] ; $p
2641   125A 2A            mov b, [d]
2642   125B 74            mov d, b
2643   125C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2644   125F FD 39         mov c, b ; And place it into C
2645   1261 2A            mov b, [d] ; Lower Word in B
2646   1262 FD 79         mov g, b
2647   1264 28            mov b, c
2648   1265 FD AB         swp b
2649   1267 D8            push b
2650   1268 FD 27         mov b, g
2651   126A FD AB         swp b
2652   126C D8            push b
2653   126D 07 8A 13      call printx32
2654   1270 51 04 00      add sp, 4
2655   1273 0A 7F 12      jmp _if37_exit
2656   1276             _if37_else:
2657   1276             ;; err("Unexpected format in printf."); 
2658   1276 26 D8 29      mov b, __s1 ; "Unexpected format in printf."
2659   1279 FD AB         swp b
2660   127B D8            push b
2661   127C 07 75 13      call err
2662   127F             _if37_exit:
2663   127F             _if36_exit:
2664   127F             _if35_exit:
2665   127F             ;; p = p + 4; 
2666   127F FA FF FF      lea d, [bp + -1] ; $p
2667   1282 DA            push d
2668   1283 FA FF FF      lea d, [bp + -1] ; $p
2669   1286 2A            mov b, [d]
2670   1287             ; START TERMS
2671   1287 D7            push a
2672   1288 11            mov a, b
2673   1289 26 04 00      mov b, $4
2674   128C 56            add b, a
2675   128D E4            pop a
2676   128E             ; END TERMS
2677   128E E7            pop d
2678   128F FD 43         mov [d], b
2679   1291             ;; break; 
2680   1291 0A 44 13      jmp _switch34_exit ; case break
2681   1294             _switch34_case2:
2682   1294             _switch34_case3:
2683   1294             ;; print_signed(*(int*)p); 
2684   1294 FA FF FF      lea d, [bp + -1] ; $p
2685   1297 2A            mov b, [d]
2686   1298 74            mov d, b
2687   1299 2A            mov b, [d]
2688   129A FD AB         swp b
2689   129C D8            push b
2690   129D 07 11 15      call print_signed
2691   12A0 51 02 00      add sp, 2
2692   12A3             ;; p = p + 2; 
2693   12A3 FA FF FF      lea d, [bp + -1] ; $p
2694   12A6 DA            push d
2695   12A7 FA FF FF      lea d, [bp + -1] ; $p
2696   12AA 2A            mov b, [d]
2697   12AB             ; START TERMS
2698   12AB D7            push a
2699   12AC 11            mov a, b
2700   12AD 26 02 00      mov b, $2
2701   12B0 56            add b, a
2702   12B1 E4            pop a
2703   12B2             ; END TERMS
2704   12B2 E7            pop d
2705   12B3 FD 43         mov [d], b
2706   12B5             ;; break; 
2707   12B5 0A 44 13      jmp _switch34_exit ; case break
2708   12B8             _switch34_case4:
2709   12B8             ;; print_unsigned(*(unsigned int*)p); 
2710   12B8 FA FF FF      lea d, [bp + -1] ; $p
2711   12BB 2A            mov b, [d]
2712   12BC 74            mov d, b
2713   12BD 2A            mov b, [d]
2714   12BE FD AB         swp b
2715   12C0 D8            push b
2716   12C1 07 50 18      call print_unsigned
2717   12C4 51 02 00      add sp, 2
2718   12C7             ;; p = p + 2; 
2719   12C7 FA FF FF      lea d, [bp + -1] ; $p
2720   12CA DA            push d
2721   12CB FA FF FF      lea d, [bp + -1] ; $p
2722   12CE 2A            mov b, [d]
2723   12CF             ; START TERMS
2724   12CF D7            push a
2725   12D0 11            mov a, b
2726   12D1 26 02 00      mov b, $2
2727   12D4 56            add b, a
2728   12D5 E4            pop a
2729   12D6             ; END TERMS
2730   12D6 E7            pop d
2731   12D7 FD 43         mov [d], b
2732   12D9             ;; break; 
2733   12D9 0A 44 13      jmp _switch34_exit ; case break
2734   12DC             _switch34_case5:
2735   12DC             
2736   12DC             ; --- BEGIN INLINE ASM BLOCK
2737   12DC FA FF FF      lea d, [bp + -1] ; $p
2738   12DF FD 2A         mov d, [d]
2739   12E1 2A            mov b, [d]
2740   12E2 07 A3 1C      call print_u16x
2741   12E5             ; --- END INLINE ASM BLOCK
2742   12E5             
2743   12E5             ;; p = p + 2; 
2744   12E5 FA FF FF      lea d, [bp + -1] ; $p
2745   12E8 DA            push d
2746   12E9 FA FF FF      lea d, [bp + -1] ; $p
2747   12EC 2A            mov b, [d]
2748   12ED             ; START TERMS
2749   12ED D7            push a
2750   12EE 11            mov a, b
2751   12EF 26 02 00      mov b, $2
2752   12F2 56            add b, a
2753   12F3 E4            pop a
2754   12F4             ; END TERMS
2755   12F4 E7            pop d
2756   12F5 FD 43         mov [d], b
2757   12F7             ;; break; 
2758   12F7 0A 44 13      jmp _switch34_exit ; case break
2759   12FA             _switch34_case6:
2760   12FA             
2761   12FA             ; --- BEGIN INLINE ASM BLOCK
2762   12FA FA FF FF      lea d, [bp + -1] ; $p
2763   12FD FD 2A         mov d, [d]
2764   12FF 1E            mov al, [d]
2765   1300 23            mov ah, al
2766   1301 07 01 1B      call _putchar
2767   1304             ; --- END INLINE ASM BLOCK
2768   1304             
2769   1304             ;; p = p + 2; 
2770   1304 FA FF FF      lea d, [bp + -1] ; $p
2771   1307 DA            push d
2772   1308 FA FF FF      lea d, [bp + -1] ; $p
2773   130B 2A            mov b, [d]
2774   130C             ; START TERMS
2775   130C D7            push a
2776   130D 11            mov a, b
2777   130E 26 02 00      mov b, $2
2778   1311 56            add b, a
2779   1312 E4            pop a
2780   1313             ; END TERMS
2781   1313 E7            pop d
2782   1314 FD 43         mov [d], b
2783   1316             ;; break; 
2784   1316 0A 44 13      jmp _switch34_exit ; case break
2785   1319             _switch34_case7:
2786   1319             
2787   1319             ; --- BEGIN INLINE ASM BLOCK
2788   1319 FA FF FF      lea d, [bp + -1] ; $p
2789   131C FD 2A         mov d, [d]
2790   131E FD 2A         mov d, [d]
2791   1320 07 4B 1C      call _puts
2792   1323             ; --- END INLINE ASM BLOCK
2793   1323             
2794   1323             ;; p = p + 2; 
2795   1323 FA FF FF      lea d, [bp + -1] ; $p
2796   1326 DA            push d
2797   1327 FA FF FF      lea d, [bp + -1] ; $p
2798   132A 2A            mov b, [d]
2799   132B             ; START TERMS
2800   132B D7            push a
2801   132C 11            mov a, b
2802   132D 26 02 00      mov b, $2
2803   1330 56            add b, a
2804   1331 E4            pop a
2805   1332             ; END TERMS
2806   1332 E7            pop d
2807   1333 FD 43         mov [d], b
2808   1335             ;; break; 
2809   1335 0A 44 13      jmp _switch34_exit ; case break
2810   1338             _switch34_default:
2811   1338             ;; print("Error: Unknown argument type.\n"); 
2812   1338 26 F5 29      mov b, __s2 ; "Error: Unknown argument type.\n"
2813   133B FD AB         swp b
2814   133D D8            push b
2815   133E 07 68 19      call print
2816   1341 51 02 00      add sp, 2
2817   1344             _switch34_exit:
2818   1344             ;; fp++; 
2819   1344 FA FD FF      lea d, [bp + -3] ; $fp
2820   1347 2A            mov b, [d]
2821   1348 D8            push b
2822   1349 FD 77         inc b
2823   134B FA FD FF      lea d, [bp + -3] ; $fp
2824   134E FD 43         mov [d], b
2825   1350 E5            pop b
2826   1351 0A 70 13      jmp _if33_exit
2827   1354             _if33_else:
2828   1354             ;; putchar(*fp); 
2829   1354 FA FD FF      lea d, [bp + -3] ; $fp
2830   1357 2A            mov b, [d]
2831   1358 74            mov d, b
2832   1359 32            mov bl, [d]
2833   135A A7 00         mov bh, 0
2834   135C DD            push bl
2835   135D 07 20 19      call putchar
2836   1360 51 01 00      add sp, 1
2837   1363             ;; fp++; 
2838   1363 FA FD FF      lea d, [bp + -3] ; $fp
2839   1366 2A            mov b, [d]
2840   1367 D8            push b
2841   1368 FD 77         inc b
2842   136A FA FD FF      lea d, [bp + -3] ; $fp
2843   136D FD 43         mov [d], b
2844   136F E5            pop b
2845   1370             _if33_exit:
2846   1370             _if32_exit:
2847   1370             _for31_update:
2848   1370 0A 54 11      jmp _for31_cond
2849   1373             _for31_exit:
2850   1373 F9            leave
2851   1374 09            ret
2852   1375             
2853   1375             err:
2854   1375 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2855   1378             ;; print(e); 
2856   1378 FA 05 00      lea d, [bp + 5] ; $e
2857   137B 2A            mov b, [d]
2858   137C FD AB         swp b
2859   137E D8            push b
2860   137F 07 68 19      call print
2861   1382 51 02 00      add sp, 2
2862   1385             ;; exit(); 
2863   1385 07 47 06      call exit
2864   1388 F9            leave
2865   1389 09            ret
2866   138A             
2867   138A             printx32:
2868   138A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2869   138D             
2870   138D             ; --- BEGIN INLINE ASM BLOCK
2871   138D FA 05 00      lea d, [bp + 5] ; $hex
2872   1390 2B 02 00      mov b, [d+2]
2873   1393 07 A3 1C      call print_u16x
2874   1396 2A            mov b, [d]
2875   1397 07 A3 1C      call print_u16x
2876   139A             ; --- END INLINE ASM BLOCK
2877   139A             
2878   139A F9            leave
2879   139B 09            ret
2880   139C             
2881   139C             printx16:
2882   139C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2883   139F             
2884   139F             ; --- BEGIN INLINE ASM BLOCK
2885   139F FA 05 00      lea d, [bp + 5] ; $hex
2886   13A2 2A            mov b, [d]
2887   13A3 07 A3 1C      call print_u16x
2888   13A6             ; --- END INLINE ASM BLOCK
2889   13A6             
2890   13A6 F9            leave
2891   13A7 09            ret
2892   13A8             
2893   13A8             printx8:
2894   13A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2895   13AB             
2896   13AB             ; --- BEGIN INLINE ASM BLOCK
2897   13AB FA 05 00      lea d, [bp + 5] ; $hex
2898   13AE 32            mov bl, [d]
2899   13AF 07 E7 1C      call print_u8x
2900   13B2             ; --- END INLINE ASM BLOCK
2901   13B2             
2902   13B2 F9            leave
2903   13B3 09            ret
2904   13B4             
2905   13B4             hex_to_int:
2906   13B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2907   13B7             ; $value 
2908   13B7 10 00 00      mov a, $0
2909   13BA 45 FF FF      mov [bp + -1], a
2910   13BD             ; $i 
2911   13BD             ; $hex_char 
2912   13BD             ; $len 
2913   13BD 52 07 00      sub sp, 7
2914   13C0             ;; len = strlen(hex_string); 
2915   13C0 FA FA FF      lea d, [bp + -6] ; $len
2916   13C3 DA            push d
2917   13C4 FA 05 00      lea d, [bp + 5] ; $hex_string
2918   13C7 2A            mov b, [d]
2919   13C8 FD AB         swp b
2920   13CA D8            push b
2921   13CB 07 FE 05      call strlen
2922   13CE 51 02 00      add sp, 2
2923   13D1 E7            pop d
2924   13D2 FD 43         mov [d], b
2925   13D4             ;; for (i = 0; i < len; i++) { 
2926   13D4             _for38_init:
2927   13D4 FA FD FF      lea d, [bp + -3] ; $i
2928   13D7 DA            push d
2929   13D8 26 00 00      mov b, $0
2930   13DB E7            pop d
2931   13DC FD 43         mov [d], b
2932   13DE             _for38_cond:
2933   13DE FA FD FF      lea d, [bp + -3] ; $i
2934   13E1 2A            mov b, [d]
2935   13E2             ; START RELATIONAL
2936   13E2 D7            push a
2937   13E3 11            mov a, b
2938   13E4 FA FA FF      lea d, [bp + -6] ; $len
2939   13E7 2A            mov b, [d]
2940   13E8 B0            cmp a, b
2941   13E9 FD 73         slt ; <= (signed)
2942   13EB E4            pop a
2943   13EC             ; END RELATIONAL
2944   13EC C0 00 00      cmp b, 0
2945   13EF C6 F1 14      je _for38_exit
2946   13F2             _for38_block:
2947   13F2             ;; hex_char = hex_string[i]; 
2948   13F2 FA FC FF      lea d, [bp + -4] ; $hex_char
2949   13F5 DA            push d
2950   13F6 FA 05 00      lea d, [bp + 5] ; $hex_string
2951   13F9 FD 2A         mov d, [d]
2952   13FB D7            push a
2953   13FC DA            push d
2954   13FD FA FD FF      lea d, [bp + -3] ; $i
2955   1400 2A            mov b, [d]
2956   1401 E7            pop d
2957   1402 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2958   1406 E4            pop a
2959   1407 32            mov bl, [d]
2960   1408 A7 00         mov bh, 0
2961   140A E7            pop d
2962   140B FD 3E         mov [d], bl
2963   140D             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2964   140D             _if39_cond:
2965   140D FA FC FF      lea d, [bp + -4] ; $hex_char
2966   1410 32            mov bl, [d]
2967   1411 A7 00         mov bh, 0
2968   1413             ; START RELATIONAL
2969   1413 D7            push a
2970   1414 11            mov a, b
2971   1415 26 61 00      mov b, $61
2972   1418 B0            cmp a, b
2973   1419 FD 80         sge ; >=
2974   141B E4            pop a
2975   141C             ; END RELATIONAL
2976   141C D7            push a
2977   141D 11            mov a, b
2978   141E FA FC FF      lea d, [bp + -4] ; $hex_char
2979   1421 32            mov bl, [d]
2980   1422 A7 00         mov bh, 0
2981   1424             ; START RELATIONAL
2982   1424 D7            push a
2983   1425 11            mov a, b
2984   1426 26 66 00      mov b, $66
2985   1429 B0            cmp a, b
2986   142A FD 74         sle ; <=
2987   142C E4            pop a
2988   142D             ; END RELATIONAL
2989   142D FD A7         sand a, b ; &&
2990   142F E4            pop a
2991   1430 C0 00 00      cmp b, 0
2992   1433 C6 64 14      je _if39_else
2993   1436             _if39_true:
2994   1436             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2995   1436 FA FF FF      lea d, [bp + -1] ; $value
2996   1439 DA            push d
2997   143A FA FF FF      lea d, [bp + -1] ; $value
2998   143D 2A            mov b, [d]
2999   143E             ; START FACTORS
3000   143E D7            push a
3001   143F 11            mov a, b
3002   1440 26 10 00      mov b, $10
3003   1443 AC            mul a, b ; *
3004   1444 11            mov a, b
3005   1445 27            mov b, a
3006   1446 E4            pop a
3007   1447             ; END FACTORS
3008   1447             ; START TERMS
3009   1447 D7            push a
3010   1448 11            mov a, b
3011   1449 FA FC FF      lea d, [bp + -4] ; $hex_char
3012   144C 32            mov bl, [d]
3013   144D A7 00         mov bh, 0
3014   144F             ; START TERMS
3015   144F D7            push a
3016   1450 11            mov a, b
3017   1451 26 61 00      mov b, $61
3018   1454 60            sub a, b
3019   1455 27            mov b, a
3020   1456 11            mov a, b
3021   1457 26 0A 00      mov b, $a
3022   145A 56            add b, a
3023   145B E4            pop a
3024   145C             ; END TERMS
3025   145C 56            add b, a
3026   145D E4            pop a
3027   145E             ; END TERMS
3028   145E E7            pop d
3029   145F FD 43         mov [d], b
3030   1461 0A E1 14      jmp _if39_exit
3031   1464             _if39_else:
3032   1464             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3033   1464             _if40_cond:
3034   1464 FA FC FF      lea d, [bp + -4] ; $hex_char
3035   1467 32            mov bl, [d]
3036   1468 A7 00         mov bh, 0
3037   146A             ; START RELATIONAL
3038   146A D7            push a
3039   146B 11            mov a, b
3040   146C 26 41 00      mov b, $41
3041   146F B0            cmp a, b
3042   1470 FD 80         sge ; >=
3043   1472 E4            pop a
3044   1473             ; END RELATIONAL
3045   1473 D7            push a
3046   1474 11            mov a, b
3047   1475 FA FC FF      lea d, [bp + -4] ; $hex_char
3048   1478 32            mov bl, [d]
3049   1479 A7 00         mov bh, 0
3050   147B             ; START RELATIONAL
3051   147B D7            push a
3052   147C 11            mov a, b
3053   147D 26 46 00      mov b, $46
3054   1480 B0            cmp a, b
3055   1481 FD 74         sle ; <=
3056   1483 E4            pop a
3057   1484             ; END RELATIONAL
3058   1484 FD A7         sand a, b ; &&
3059   1486 E4            pop a
3060   1487 C0 00 00      cmp b, 0
3061   148A C6 BB 14      je _if40_else
3062   148D             _if40_true:
3063   148D             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3064   148D FA FF FF      lea d, [bp + -1] ; $value
3065   1490 DA            push d
3066   1491 FA FF FF      lea d, [bp + -1] ; $value
3067   1494 2A            mov b, [d]
3068   1495             ; START FACTORS
3069   1495 D7            push a
3070   1496 11            mov a, b
3071   1497 26 10 00      mov b, $10
3072   149A AC            mul a, b ; *
3073   149B 11            mov a, b
3074   149C 27            mov b, a
3075   149D E4            pop a
3076   149E             ; END FACTORS
3077   149E             ; START TERMS
3078   149E D7            push a
3079   149F 11            mov a, b
3080   14A0 FA FC FF      lea d, [bp + -4] ; $hex_char
3081   14A3 32            mov bl, [d]
3082   14A4 A7 00         mov bh, 0
3083   14A6             ; START TERMS
3084   14A6 D7            push a
3085   14A7 11            mov a, b
3086   14A8 26 41 00      mov b, $41
3087   14AB 60            sub a, b
3088   14AC 27            mov b, a
3089   14AD 11            mov a, b
3090   14AE 26 0A 00      mov b, $a
3091   14B1 56            add b, a
3092   14B2 E4            pop a
3093   14B3             ; END TERMS
3094   14B3 56            add b, a
3095   14B4 E4            pop a
3096   14B5             ; END TERMS
3097   14B5 E7            pop d
3098   14B6 FD 43         mov [d], b
3099   14B8 0A E1 14      jmp _if40_exit
3100   14BB             _if40_else:
3101   14BB             ;; value = (value * 16) + (hex_char - '0'); 
3102   14BB FA FF FF      lea d, [bp + -1] ; $value
3103   14BE DA            push d
3104   14BF FA FF FF      lea d, [bp + -1] ; $value
3105   14C2 2A            mov b, [d]
3106   14C3             ; START FACTORS
3107   14C3 D7            push a
3108   14C4 11            mov a, b
3109   14C5 26 10 00      mov b, $10
3110   14C8 AC            mul a, b ; *
3111   14C9 11            mov a, b
3112   14CA 27            mov b, a
3113   14CB E4            pop a
3114   14CC             ; END FACTORS
3115   14CC             ; START TERMS
3116   14CC D7            push a
3117   14CD 11            mov a, b
3118   14CE FA FC FF      lea d, [bp + -4] ; $hex_char
3119   14D1 32            mov bl, [d]
3120   14D2 A7 00         mov bh, 0
3121   14D4             ; START TERMS
3122   14D4 D7            push a
3123   14D5 11            mov a, b
3124   14D6 26 30 00      mov b, $30
3125   14D9 60            sub a, b
3126   14DA 27            mov b, a
3127   14DB E4            pop a
3128   14DC             ; END TERMS
3129   14DC 56            add b, a
3130   14DD E4            pop a
3131   14DE             ; END TERMS
3132   14DE E7            pop d
3133   14DF FD 43         mov [d], b
3134   14E1             _if40_exit:
3135   14E1             _if39_exit:
3136   14E1             _for38_update:
3137   14E1 FA FD FF      lea d, [bp + -3] ; $i
3138   14E4 2A            mov b, [d]
3139   14E5 D8            push b
3140   14E6 FD 77         inc b
3141   14E8 FA FD FF      lea d, [bp + -3] ; $i
3142   14EB FD 43         mov [d], b
3143   14ED E5            pop b
3144   14EE 0A DE 13      jmp _for38_cond
3145   14F1             _for38_exit:
3146   14F1             ;; return value; 
3147   14F1 FA FF FF      lea d, [bp + -1] ; $value
3148   14F4 2A            mov b, [d]
3149   14F5 F9            leave
3150   14F6 09            ret
3151   14F7             
3152   14F7             gets:
3153   14F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3154   14FA             
3155   14FA             ; --- BEGIN INLINE ASM BLOCK
3156   14FA FA 05 00      lea d, [bp + 5] ; $s
3157   14FD 15            mov a, [d]
3158   14FE 3C            mov d, a
3159   14FF 07 08 1B      call _gets
3160   1502             ; --- END INLINE ASM BLOCK
3161   1502             
3162   1502             ;; return strlen(s); 
3163   1502 FA 05 00      lea d, [bp + 5] ; $s
3164   1505 2A            mov b, [d]
3165   1506 FD AB         swp b
3166   1508 D8            push b
3167   1509 07 FE 05      call strlen
3168   150C 51 02 00      add sp, 2
3169   150F F9            leave
3170   1510 09            ret
3171   1511             
3172   1511             print_signed:
3173   1511 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3174   1514             ; $digits 
3175   1514             ; $i 
3176   1514 10 00 00      mov a, $0
3177   1517 45 FA FF      mov [bp + -6], a
3178   151A 52 07 00      sub sp, 7
3179   151D             ;; if (num < 0) { 
3180   151D             _if41_cond:
3181   151D FA 05 00      lea d, [bp + 5] ; $num
3182   1520 2A            mov b, [d]
3183   1521             ; START RELATIONAL
3184   1521 D7            push a
3185   1522 11            mov a, b
3186   1523 26 00 00      mov b, $0
3187   1526 B0            cmp a, b
3188   1527 FD 73         slt ; <= (signed)
3189   1529 E4            pop a
3190   152A             ; END RELATIONAL
3191   152A C0 00 00      cmp b, 0
3192   152D C6 4A 15      je _if41_else
3193   1530             _if41_true:
3194   1530             ;; putchar('-'); 
3195   1530 26 2D 00      mov b, $2d
3196   1533 DD            push bl
3197   1534 07 20 19      call putchar
3198   1537 51 01 00      add sp, 1
3199   153A             ;; num = -num; 
3200   153A FA 05 00      lea d, [bp + 5] ; $num
3201   153D DA            push d
3202   153E FA 05 00      lea d, [bp + 5] ; $num
3203   1541 2A            mov b, [d]
3204   1542 FD 97         neg b
3205   1544 E7            pop d
3206   1545 FD 43         mov [d], b
3207   1547 0A 6C 15      jmp _if41_exit
3208   154A             _if41_else:
3209   154A             ;; if (num == 0) { 
3210   154A             _if42_cond:
3211   154A FA 05 00      lea d, [bp + 5] ; $num
3212   154D 2A            mov b, [d]
3213   154E             ; START RELATIONAL
3214   154E D7            push a
3215   154F 11            mov a, b
3216   1550 26 00 00      mov b, $0
3217   1553 B0            cmp a, b
3218   1554 FD 71         seq ; ==
3219   1556 E4            pop a
3220   1557             ; END RELATIONAL
3221   1557 C0 00 00      cmp b, 0
3222   155A C6 6C 15      je _if42_exit
3223   155D             _if42_true:
3224   155D             ;; putchar('0'); 
3225   155D 26 30 00      mov b, $30
3226   1560 DD            push bl
3227   1561 07 20 19      call putchar
3228   1564 51 01 00      add sp, 1
3229   1567             ;; return; 
3230   1567 F9            leave
3231   1568 09            ret
3232   1569 0A 6C 15      jmp _if42_exit
3233   156C             _if42_exit:
3234   156C             _if41_exit:
3235   156C             ;; while (num > 0) { 
3236   156C             _while43_cond:
3237   156C FA 05 00      lea d, [bp + 5] ; $num
3238   156F 2A            mov b, [d]
3239   1570             ; START RELATIONAL
3240   1570 D7            push a
3241   1571 11            mov a, b
3242   1572 26 00 00      mov b, $0
3243   1575 B0            cmp a, b
3244   1576 FD 7F         sgt ; >
3245   1578 E4            pop a
3246   1579             ; END RELATIONAL
3247   1579 C0 00 00      cmp b, 0
3248   157C C6 C6 15      je _while43_exit
3249   157F             _while43_block:
3250   157F             ;; digits[i] = '0' + (num % 10); 
3251   157F FA FC FF      lea d, [bp + -4] ; $digits
3252   1582 D7            push a
3253   1583 DA            push d
3254   1584 FA FA FF      lea d, [bp + -6] ; $i
3255   1587 2A            mov b, [d]
3256   1588 E7            pop d
3257   1589 5A            add d, b
3258   158A E4            pop a
3259   158B DA            push d
3260   158C 26 30 00      mov b, $30
3261   158F             ; START TERMS
3262   158F D7            push a
3263   1590 11            mov a, b
3264   1591 FA 05 00      lea d, [bp + 5] ; $num
3265   1594 2A            mov b, [d]
3266   1595             ; START FACTORS
3267   1595 D7            push a
3268   1596 11            mov a, b
3269   1597 26 0A 00      mov b, $a
3270   159A AE            div a, b ; 
3271   159B 11            mov a, b
3272   159C 27            mov b, a
3273   159D E4            pop a
3274   159E             ; END FACTORS
3275   159E 56            add b, a
3276   159F E4            pop a
3277   15A0             ; END TERMS
3278   15A0 E7            pop d
3279   15A1 FD 3E         mov [d], bl
3280   15A3             ;; num = num / 10; 
3281   15A3 FA 05 00      lea d, [bp + 5] ; $num
3282   15A6 DA            push d
3283   15A7 FA 05 00      lea d, [bp + 5] ; $num
3284   15AA 2A            mov b, [d]
3285   15AB             ; START FACTORS
3286   15AB D7            push a
3287   15AC 11            mov a, b
3288   15AD 26 0A 00      mov b, $a
3289   15B0 AE            div a, b
3290   15B1 27            mov b, a
3291   15B2 E4            pop a
3292   15B3             ; END FACTORS
3293   15B3 E7            pop d
3294   15B4 FD 43         mov [d], b
3295   15B6             ;; i++; 
3296   15B6 FA FA FF      lea d, [bp + -6] ; $i
3297   15B9 2A            mov b, [d]
3298   15BA D8            push b
3299   15BB FD 77         inc b
3300   15BD FA FA FF      lea d, [bp + -6] ; $i
3301   15C0 FD 43         mov [d], b
3302   15C2 E5            pop b
3303   15C3 0A 6C 15      jmp _while43_cond
3304   15C6             _while43_exit:
3305   15C6             ;; while (i > 0) { 
3306   15C6             _while44_cond:
3307   15C6 FA FA FF      lea d, [bp + -6] ; $i
3308   15C9 2A            mov b, [d]
3309   15CA             ; START RELATIONAL
3310   15CA D7            push a
3311   15CB 11            mov a, b
3312   15CC 26 00 00      mov b, $0
3313   15CF B0            cmp a, b
3314   15D0 FD 7F         sgt ; >
3315   15D2 E4            pop a
3316   15D3             ; END RELATIONAL
3317   15D3 C0 00 00      cmp b, 0
3318   15D6 C6 FF 15      je _while44_exit
3319   15D9             _while44_block:
3320   15D9             ;; i--; 
3321   15D9 FA FA FF      lea d, [bp + -6] ; $i
3322   15DC 2A            mov b, [d]
3323   15DD D8            push b
3324   15DE FD 7D         dec b
3325   15E0 FA FA FF      lea d, [bp + -6] ; $i
3326   15E3 FD 43         mov [d], b
3327   15E5 E5            pop b
3328   15E6             ;; putchar(digits[i]); 
3329   15E6 FA FC FF      lea d, [bp + -4] ; $digits
3330   15E9 D7            push a
3331   15EA DA            push d
3332   15EB FA FA FF      lea d, [bp + -6] ; $i
3333   15EE 2A            mov b, [d]
3334   15EF E7            pop d
3335   15F0 5A            add d, b
3336   15F1 E4            pop a
3337   15F2 32            mov bl, [d]
3338   15F3 A7 00         mov bh, 0
3339   15F5 DD            push bl
3340   15F6 07 20 19      call putchar
3341   15F9 51 01 00      add sp, 1
3342   15FC 0A C6 15      jmp _while44_cond
3343   15FF             _while44_exit:
3344   15FF F9            leave
3345   1600 09            ret
3346   1601             
3347   1601             print_signed_long:
3348   1601 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3349   1604             ; $digits 
3350   1604             ; $i 
3351   1604 10 00 00      mov a, $0
3352   1607 45 F5 FF      mov [bp + -11], a
3353   160A 52 0C 00      sub sp, 12
3354   160D             ;; if (num < 0) { 
3355   160D             _if45_cond:
3356   160D FA 05 00      lea d, [bp + 5] ; $num
3357   1610 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3358   1613 FD 39         mov c, b ; And place it into C
3359   1615 2A            mov b, [d] ; Lower Word in B
3360   1616             ; START RELATIONAL
3361   1616 D7            push a
3362   1617 FD D8         push g
3363   1619 11            mov a, b
3364   161A FD 7A         mov g, c
3365   161C 26 00 00      mov b, $0
3366   161F 4D            mov si, a
3367   1620 11            mov a, b
3368   1621 4F            mov di, a
3369   1622 FD 12         mov a, g
3370   1624 28            mov b, c
3371   1625 B0            cmp a, b
3372   1626 FD 75         slu ; <
3373   1628 D8            push b
3374   1629 28            mov b, c
3375   162A FD 71         seq ; ==
3376   162C D8            push b
3377   162D 50            mov a, di
3378   162E 27            mov b, a
3379   162F 4E            mov a, si
3380   1630 B0            cmp a, b
3381   1631 FD 75         slu ; <
3382   1633 E4            pop a
3383   1634 FD 92         and b, a
3384   1636 E4            pop a
3385   1637 FD 70         or b, a
3386   1639               
3387   1639 FD F1         pop g
3388   163B E4            pop a
3389   163C             ; END RELATIONAL
3390   163C C0 00 00      cmp b, 0
3391   163F C6 66 16      je _if45_else
3392   1642             _if45_true:
3393   1642             ;; putchar('-'); 
3394   1642 26 2D 00      mov b, $2d
3395   1645 DD            push bl
3396   1646 07 20 19      call putchar
3397   1649 51 01 00      add sp, 1
3398   164C             ;; num = -num; 
3399   164C FA 05 00      lea d, [bp + 5] ; $num
3400   164F DA            push d
3401   1650 FA 05 00      lea d, [bp + 5] ; $num
3402   1653 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3403   1656 FD 39         mov c, b ; And place it into C
3404   1658 2A            mov b, [d] ; Lower Word in B
3405   1659 FD 97         neg b
3406   165B E7            pop d
3407   165C FD 43         mov [d], b
3408   165E 28            mov b, c
3409   165F FD 44 02 00   mov [d + 2], b
3410   1663 0A 9D 16      jmp _if45_exit
3411   1666             _if45_else:
3412   1666             ;; if (num == 0) { 
3413   1666             _if46_cond:
3414   1666 FA 05 00      lea d, [bp + 5] ; $num
3415   1669 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3416   166C FD 39         mov c, b ; And place it into C
3417   166E 2A            mov b, [d] ; Lower Word in B
3418   166F             ; START RELATIONAL
3419   166F D7            push a
3420   1670 FD D8         push g
3421   1672 11            mov a, b
3422   1673 FD 7A         mov g, c
3423   1675 26 00 00      mov b, $0
3424   1678 B0            cmp a, b
3425   1679 FD 71         seq ; ==
3426   167B D8            push b
3427   167C 12            mov a, c
3428   167D FD 27         mov b, g
3429   167F B0            cmp a, b
3430   1680 FD 71         seq ; ==
3431   1682 E4            pop a
3432   1683 FD A7         sand a, b
3433   1685 FD F1         pop g
3434   1687 E4            pop a
3435   1688             ; END RELATIONAL
3436   1688 C0 00 00      cmp b, 0
3437   168B C6 9D 16      je _if46_exit
3438   168E             _if46_true:
3439   168E             ;; putchar('0'); 
3440   168E 26 30 00      mov b, $30
3441   1691 DD            push bl
3442   1692 07 20 19      call putchar
3443   1695 51 01 00      add sp, 1
3444   1698             ;; return; 
3445   1698 F9            leave
3446   1699 09            ret
3447   169A 0A 9D 16      jmp _if46_exit
3448   169D             _if46_exit:
3449   169D             _if45_exit:
3450   169D             ;; while (num > 0) { 
3451   169D             _while47_cond:
3452   169D FA 05 00      lea d, [bp + 5] ; $num
3453   16A0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3454   16A3 FD 39         mov c, b ; And place it into C
3455   16A5 2A            mov b, [d] ; Lower Word in B
3456   16A6             ; START RELATIONAL
3457   16A6 D7            push a
3458   16A7 FD D8         push g
3459   16A9 11            mov a, b
3460   16AA FD 7A         mov g, c
3461   16AC 26 00 00      mov b, $0
3462   16AF B0            cmp a, b
3463   16B0 FD 7F         sgt ; >
3464   16B2 FD F1         pop g
3465   16B4 E4            pop a
3466   16B5             ; END RELATIONAL
3467   16B5 C0 00 00      cmp b, 0
3468   16B8 C6 18 17      je _while47_exit
3469   16BB             _while47_block:
3470   16BB             ;; digits[i] = '0' + (num % 10); 
3471   16BB FA F7 FF      lea d, [bp + -9] ; $digits
3472   16BE D7            push a
3473   16BF DA            push d
3474   16C0 FA F5 FF      lea d, [bp + -11] ; $i
3475   16C3 2A            mov b, [d]
3476   16C4 E7            pop d
3477   16C5 5A            add d, b
3478   16C6 E4            pop a
3479   16C7 DA            push d
3480   16C8 26 30 00      mov b, $30
3481   16CB             ; START TERMS
3482   16CB D7            push a
3483   16CC 11            mov a, b
3484   16CD FA 05 00      lea d, [bp + 5] ; $num
3485   16D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3486   16D3 FD 39         mov c, b ; And place it into C
3487   16D5 2A            mov b, [d] ; Lower Word in B
3488   16D6             ; START FACTORS
3489   16D6 D7            push a
3490   16D7 11            mov a, b
3491   16D8 26 0A 00      mov b, $a
3492   16DB AE            div a, b ; 
3493   16DC 11            mov a, b
3494   16DD 27            mov b, a
3495   16DE E4            pop a
3496   16DF             ; END FACTORS
3497   16DF 54            add a, b
3498   16E0 D7            push a
3499   16E1 FD 12         mov a, g
3500   16E3 28            mov b, c
3501   16E4 5C            adc a, b
3502   16E5 39            mov c, a
3503   16E6 E5            pop b
3504   16E7 E4            pop a
3505   16E8             ; END TERMS
3506   16E8 E7            pop d
3507   16E9 FD 3E         mov [d], bl
3508   16EB             ;; num = num / 10; 
3509   16EB FA 05 00      lea d, [bp + 5] ; $num
3510   16EE DA            push d
3511   16EF FA 05 00      lea d, [bp + 5] ; $num
3512   16F2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3513   16F5 FD 39         mov c, b ; And place it into C
3514   16F7 2A            mov b, [d] ; Lower Word in B
3515   16F8             ; START FACTORS
3516   16F8 D7            push a
3517   16F9 11            mov a, b
3518   16FA 26 0A 00      mov b, $a
3519   16FD AE            div a, b
3520   16FE 27            mov b, a
3521   16FF E4            pop a
3522   1700             ; END FACTORS
3523   1700 E7            pop d
3524   1701 FD 43         mov [d], b
3525   1703 28            mov b, c
3526   1704 FD 44 02 00   mov [d + 2], b
3527   1708             ;; i++; 
3528   1708 FA F5 FF      lea d, [bp + -11] ; $i
3529   170B 2A            mov b, [d]
3530   170C D8            push b
3531   170D FD 77         inc b
3532   170F FA F5 FF      lea d, [bp + -11] ; $i
3533   1712 FD 43         mov [d], b
3534   1714 E5            pop b
3535   1715 0A 9D 16      jmp _while47_cond
3536   1718             _while47_exit:
3537   1718             ;; while (i > 0) { 
3538   1718             _while48_cond:
3539   1718 FA F5 FF      lea d, [bp + -11] ; $i
3540   171B 2A            mov b, [d]
3541   171C             ; START RELATIONAL
3542   171C D7            push a
3543   171D 11            mov a, b
3544   171E 26 00 00      mov b, $0
3545   1721 B0            cmp a, b
3546   1722 FD 7F         sgt ; >
3547   1724 E4            pop a
3548   1725             ; END RELATIONAL
3549   1725 C0 00 00      cmp b, 0
3550   1728 C6 51 17      je _while48_exit
3551   172B             _while48_block:
3552   172B             ;; i--; 
3553   172B FA F5 FF      lea d, [bp + -11] ; $i
3554   172E 2A            mov b, [d]
3555   172F D8            push b
3556   1730 FD 7D         dec b
3557   1732 FA F5 FF      lea d, [bp + -11] ; $i
3558   1735 FD 43         mov [d], b
3559   1737 E5            pop b
3560   1738             ;; putchar(digits[i]); 
3561   1738 FA F7 FF      lea d, [bp + -9] ; $digits
3562   173B D7            push a
3563   173C DA            push d
3564   173D FA F5 FF      lea d, [bp + -11] ; $i
3565   1740 2A            mov b, [d]
3566   1741 E7            pop d
3567   1742 5A            add d, b
3568   1743 E4            pop a
3569   1744 32            mov bl, [d]
3570   1745 A7 00         mov bh, 0
3571   1747 DD            push bl
3572   1748 07 20 19      call putchar
3573   174B 51 01 00      add sp, 1
3574   174E 0A 18 17      jmp _while48_cond
3575   1751             _while48_exit:
3576   1751 F9            leave
3577   1752 09            ret
3578   1753             
3579   1753             print_unsigned_long:
3580   1753 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3581   1756             ; $digits 
3582   1756             ; $i 
3583   1756 52 0C 00      sub sp, 12
3584   1759             ;; i = 0; 
3585   1759 FA F5 FF      lea d, [bp + -11] ; $i
3586   175C DA            push d
3587   175D 26 00 00      mov b, $0
3588   1760 E7            pop d
3589   1761 FD 43         mov [d], b
3590   1763             ;; if(num == 0){ 
3591   1763             _if49_cond:
3592   1763 FA 05 00      lea d, [bp + 5] ; $num
3593   1766 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3594   1769 FD 39         mov c, b ; And place it into C
3595   176B 2A            mov b, [d] ; Lower Word in B
3596   176C             ; START RELATIONAL
3597   176C D7            push a
3598   176D FD D8         push g
3599   176F 11            mov a, b
3600   1770 FD 7A         mov g, c
3601   1772 26 00 00      mov b, $0
3602   1775 B0            cmp a, b
3603   1776 FD 71         seq ; ==
3604   1778 D8            push b
3605   1779 12            mov a, c
3606   177A FD 27         mov b, g
3607   177C B0            cmp a, b
3608   177D FD 71         seq ; ==
3609   177F E4            pop a
3610   1780 FD A7         sand a, b
3611   1782 FD F1         pop g
3612   1784 E4            pop a
3613   1785             ; END RELATIONAL
3614   1785 C0 00 00      cmp b, 0
3615   1788 C6 9A 17      je _if49_exit
3616   178B             _if49_true:
3617   178B             ;; putchar('0'); 
3618   178B 26 30 00      mov b, $30
3619   178E DD            push bl
3620   178F 07 20 19      call putchar
3621   1792 51 01 00      add sp, 1
3622   1795             ;; return; 
3623   1795 F9            leave
3624   1796 09            ret
3625   1797 0A 9A 17      jmp _if49_exit
3626   179A             _if49_exit:
3627   179A             ;; while (num > 0) { 
3628   179A             _while50_cond:
3629   179A FA 05 00      lea d, [bp + 5] ; $num
3630   179D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3631   17A0 FD 39         mov c, b ; And place it into C
3632   17A2 2A            mov b, [d] ; Lower Word in B
3633   17A3             ; START RELATIONAL
3634   17A3 D7            push a
3635   17A4 FD D8         push g
3636   17A6 11            mov a, b
3637   17A7 FD 7A         mov g, c
3638   17A9 26 00 00      mov b, $0
3639   17AC B0            cmp a, b
3640   17AD FD 81         sgu ; > (unsigned)
3641   17AF FD F1         pop g
3642   17B1 E4            pop a
3643   17B2             ; END RELATIONAL
3644   17B2 C0 00 00      cmp b, 0
3645   17B5 C6 15 18      je _while50_exit
3646   17B8             _while50_block:
3647   17B8             ;; digits[i] = '0' + (num % 10); 
3648   17B8 FA F7 FF      lea d, [bp + -9] ; $digits
3649   17BB D7            push a
3650   17BC DA            push d
3651   17BD FA F5 FF      lea d, [bp + -11] ; $i
3652   17C0 2A            mov b, [d]
3653   17C1 E7            pop d
3654   17C2 5A            add d, b
3655   17C3 E4            pop a
3656   17C4 DA            push d
3657   17C5 26 30 00      mov b, $30
3658   17C8             ; START TERMS
3659   17C8 D7            push a
3660   17C9 11            mov a, b
3661   17CA FA 05 00      lea d, [bp + 5] ; $num
3662   17CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3663   17D0 FD 39         mov c, b ; And place it into C
3664   17D2 2A            mov b, [d] ; Lower Word in B
3665   17D3             ; START FACTORS
3666   17D3 D7            push a
3667   17D4 11            mov a, b
3668   17D5 26 0A 00      mov b, $a
3669   17D8 AE            div a, b ; 
3670   17D9 11            mov a, b
3671   17DA 27            mov b, a
3672   17DB E4            pop a
3673   17DC             ; END FACTORS
3674   17DC 54            add a, b
3675   17DD D7            push a
3676   17DE FD 12         mov a, g
3677   17E0 28            mov b, c
3678   17E1 5C            adc a, b
3679   17E2 39            mov c, a
3680   17E3 E5            pop b
3681   17E4 E4            pop a
3682   17E5             ; END TERMS
3683   17E5 E7            pop d
3684   17E6 FD 3E         mov [d], bl
3685   17E8             ;; num = num / 10; 
3686   17E8 FA 05 00      lea d, [bp + 5] ; $num
3687   17EB DA            push d
3688   17EC FA 05 00      lea d, [bp + 5] ; $num
3689   17EF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3690   17F2 FD 39         mov c, b ; And place it into C
3691   17F4 2A            mov b, [d] ; Lower Word in B
3692   17F5             ; START FACTORS
3693   17F5 D7            push a
3694   17F6 11            mov a, b
3695   17F7 26 0A 00      mov b, $a
3696   17FA AE            div a, b
3697   17FB 27            mov b, a
3698   17FC E4            pop a
3699   17FD             ; END FACTORS
3700   17FD E7            pop d
3701   17FE FD 43         mov [d], b
3702   1800 28            mov b, c
3703   1801 FD 44 02 00   mov [d + 2], b
3704   1805             ;; i++; 
3705   1805 FA F5 FF      lea d, [bp + -11] ; $i
3706   1808 2A            mov b, [d]
3707   1809 D8            push b
3708   180A FD 77         inc b
3709   180C FA F5 FF      lea d, [bp + -11] ; $i
3710   180F FD 43         mov [d], b
3711   1811 E5            pop b
3712   1812 0A 9A 17      jmp _while50_cond
3713   1815             _while50_exit:
3714   1815             ;; while (i > 0) { 
3715   1815             _while51_cond:
3716   1815 FA F5 FF      lea d, [bp + -11] ; $i
3717   1818 2A            mov b, [d]
3718   1819             ; START RELATIONAL
3719   1819 D7            push a
3720   181A 11            mov a, b
3721   181B 26 00 00      mov b, $0
3722   181E B0            cmp a, b
3723   181F FD 7F         sgt ; >
3724   1821 E4            pop a
3725   1822             ; END RELATIONAL
3726   1822 C0 00 00      cmp b, 0
3727   1825 C6 4E 18      je _while51_exit
3728   1828             _while51_block:
3729   1828             ;; i--; 
3730   1828 FA F5 FF      lea d, [bp + -11] ; $i
3731   182B 2A            mov b, [d]
3732   182C D8            push b
3733   182D FD 7D         dec b
3734   182F FA F5 FF      lea d, [bp + -11] ; $i
3735   1832 FD 43         mov [d], b
3736   1834 E5            pop b
3737   1835             ;; putchar(digits[i]); 
3738   1835 FA F7 FF      lea d, [bp + -9] ; $digits
3739   1838 D7            push a
3740   1839 DA            push d
3741   183A FA F5 FF      lea d, [bp + -11] ; $i
3742   183D 2A            mov b, [d]
3743   183E E7            pop d
3744   183F 5A            add d, b
3745   1840 E4            pop a
3746   1841 32            mov bl, [d]
3747   1842 A7 00         mov bh, 0
3748   1844 DD            push bl
3749   1845 07 20 19      call putchar
3750   1848 51 01 00      add sp, 1
3751   184B 0A 15 18      jmp _while51_cond
3752   184E             _while51_exit:
3753   184E F9            leave
3754   184F 09            ret
3755   1850             
3756   1850             print_unsigned:
3757   1850 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3758   1853             ; $digits 
3759   1853             ; $i 
3760   1853 52 07 00      sub sp, 7
3761   1856             ;; i = 0; 
3762   1856 FA FA FF      lea d, [bp + -6] ; $i
3763   1859 DA            push d
3764   185A 26 00 00      mov b, $0
3765   185D E7            pop d
3766   185E FD 43         mov [d], b
3767   1860             ;; if(num == 0){ 
3768   1860             _if52_cond:
3769   1860 FA 05 00      lea d, [bp + 5] ; $num
3770   1863 2A            mov b, [d]
3771   1864             ; START RELATIONAL
3772   1864 D7            push a
3773   1865 11            mov a, b
3774   1866 26 00 00      mov b, $0
3775   1869 B0            cmp a, b
3776   186A FD 71         seq ; ==
3777   186C E4            pop a
3778   186D             ; END RELATIONAL
3779   186D C0 00 00      cmp b, 0
3780   1870 C6 82 18      je _if52_exit
3781   1873             _if52_true:
3782   1873             ;; putchar('0'); 
3783   1873 26 30 00      mov b, $30
3784   1876 DD            push bl
3785   1877 07 20 19      call putchar
3786   187A 51 01 00      add sp, 1
3787   187D             ;; return; 
3788   187D F9            leave
3789   187E 09            ret
3790   187F 0A 82 18      jmp _if52_exit
3791   1882             _if52_exit:
3792   1882             ;; while (num > 0) { 
3793   1882             _while53_cond:
3794   1882 FA 05 00      lea d, [bp + 5] ; $num
3795   1885 2A            mov b, [d]
3796   1886             ; START RELATIONAL
3797   1886 D7            push a
3798   1887 11            mov a, b
3799   1888 26 00 00      mov b, $0
3800   188B B0            cmp a, b
3801   188C FD 81         sgu ; > (unsigned)
3802   188E E4            pop a
3803   188F             ; END RELATIONAL
3804   188F C0 00 00      cmp b, 0
3805   1892 C6 DC 18      je _while53_exit
3806   1895             _while53_block:
3807   1895             ;; digits[i] = '0' + (num % 10); 
3808   1895 FA FC FF      lea d, [bp + -4] ; $digits
3809   1898 D7            push a
3810   1899 DA            push d
3811   189A FA FA FF      lea d, [bp + -6] ; $i
3812   189D 2A            mov b, [d]
3813   189E E7            pop d
3814   189F 5A            add d, b
3815   18A0 E4            pop a
3816   18A1 DA            push d
3817   18A2 26 30 00      mov b, $30
3818   18A5             ; START TERMS
3819   18A5 D7            push a
3820   18A6 11            mov a, b
3821   18A7 FA 05 00      lea d, [bp + 5] ; $num
3822   18AA 2A            mov b, [d]
3823   18AB             ; START FACTORS
3824   18AB D7            push a
3825   18AC 11            mov a, b
3826   18AD 26 0A 00      mov b, $a
3827   18B0 AE            div a, b ; 
3828   18B1 11            mov a, b
3829   18B2 27            mov b, a
3830   18B3 E4            pop a
3831   18B4             ; END FACTORS
3832   18B4 56            add b, a
3833   18B5 E4            pop a
3834   18B6             ; END TERMS
3835   18B6 E7            pop d
3836   18B7 FD 3E         mov [d], bl
3837   18B9             ;; num = num / 10; 
3838   18B9 FA 05 00      lea d, [bp + 5] ; $num
3839   18BC DA            push d
3840   18BD FA 05 00      lea d, [bp + 5] ; $num
3841   18C0 2A            mov b, [d]
3842   18C1             ; START FACTORS
3843   18C1 D7            push a
3844   18C2 11            mov a, b
3845   18C3 26 0A 00      mov b, $a
3846   18C6 AE            div a, b
3847   18C7 27            mov b, a
3848   18C8 E4            pop a
3849   18C9             ; END FACTORS
3850   18C9 E7            pop d
3851   18CA FD 43         mov [d], b
3852   18CC             ;; i++; 
3853   18CC FA FA FF      lea d, [bp + -6] ; $i
3854   18CF 2A            mov b, [d]
3855   18D0 D8            push b
3856   18D1 FD 77         inc b
3857   18D3 FA FA FF      lea d, [bp + -6] ; $i
3858   18D6 FD 43         mov [d], b
3859   18D8 E5            pop b
3860   18D9 0A 82 18      jmp _while53_cond
3861   18DC             _while53_exit:
3862   18DC             ;; while (i > 0) { 
3863   18DC             _while54_cond:
3864   18DC FA FA FF      lea d, [bp + -6] ; $i
3865   18DF 2A            mov b, [d]
3866   18E0             ; START RELATIONAL
3867   18E0 D7            push a
3868   18E1 11            mov a, b
3869   18E2 26 00 00      mov b, $0
3870   18E5 B0            cmp a, b
3871   18E6 FD 7F         sgt ; >
3872   18E8 E4            pop a
3873   18E9             ; END RELATIONAL
3874   18E9 C0 00 00      cmp b, 0
3875   18EC C6 15 19      je _while54_exit
3876   18EF             _while54_block:
3877   18EF             ;; i--; 
3878   18EF FA FA FF      lea d, [bp + -6] ; $i
3879   18F2 2A            mov b, [d]
3880   18F3 D8            push b
3881   18F4 FD 7D         dec b
3882   18F6 FA FA FF      lea d, [bp + -6] ; $i
3883   18F9 FD 43         mov [d], b
3884   18FB E5            pop b
3885   18FC             ;; putchar(digits[i]); 
3886   18FC FA FC FF      lea d, [bp + -4] ; $digits
3887   18FF D7            push a
3888   1900 DA            push d
3889   1901 FA FA FF      lea d, [bp + -6] ; $i
3890   1904 2A            mov b, [d]
3891   1905 E7            pop d
3892   1906 5A            add d, b
3893   1907 E4            pop a
3894   1908 32            mov bl, [d]
3895   1909 A7 00         mov bh, 0
3896   190B DD            push bl
3897   190C 07 20 19      call putchar
3898   190F 51 01 00      add sp, 1
3899   1912 0A DC 18      jmp _while54_cond
3900   1915             _while54_exit:
3901   1915 F9            leave
3902   1916 09            ret
3903   1917             
3904   1917             date:
3905   1917 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3906   191A             
3907   191A             ; --- BEGIN INLINE ASM BLOCK
3908   191A 19 00         mov al, 0 
3909   191C 05 07         syscall sys_datetime
3910   191E             ; --- END INLINE ASM BLOCK
3911   191E             
3912   191E F9            leave
3913   191F 09            ret
3914   1920             
3915   1920             putchar:
3916   1920 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3917   1923             
3918   1923             ; --- BEGIN INLINE ASM BLOCK
3919   1923 FA 05 00      lea d, [bp + 5] ; $c
3920   1926 1E            mov al, [d]
3921   1927 23            mov ah, al
3922   1928 07 01 1B      call _putchar
3923   192B             ; --- END INLINE ASM BLOCK
3924   192B             
3925   192B F9            leave
3926   192C 09            ret
3927   192D             
3928   192D             getchar:
3929   192D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3930   1930             ; $c 
3931   1930 52 01 00      sub sp, 1
3932   1933             
3933   1933             ; --- BEGIN INLINE ASM BLOCK
3934   1933 07 FA 1A      call getch
3935   1936 1A            mov al, ah
3936   1937 FA 00 00      lea d, [bp + 0] ; $c
3937   193A 3E            mov [d], al
3938   193B             ; --- END INLINE ASM BLOCK
3939   193B             
3940   193B             ;; return c; 
3941   193B FA 00 00      lea d, [bp + 0] ; $c
3942   193E 32            mov bl, [d]
3943   193F A7 00         mov bh, 0
3944   1941 F9            leave
3945   1942 09            ret
3946   1943             
3947   1943             scann:
3948   1943 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3949   1946             ; $m 
3950   1946 52 02 00      sub sp, 2
3951   1949             
3952   1949             ; --- BEGIN INLINE ASM BLOCK
3953   1949 07 45 1D      call scan_u16d
3954   194C FA FF FF      lea d, [bp + -1] ; $m
3955   194F 43            mov [d], a
3956   1950             ; --- END INLINE ASM BLOCK
3957   1950             
3958   1950             ;; return m; 
3959   1950 FA FF FF      lea d, [bp + -1] ; $m
3960   1953 2A            mov b, [d]
3961   1954 F9            leave
3962   1955 09            ret
3963   1956             
3964   1956             puts:
3965   1956 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3966   1959             
3967   1959             ; --- BEGIN INLINE ASM BLOCK
3968   1959 FA 05 00      lea d, [bp + 5] ; $s
3969   195C 15            mov a, [d]
3970   195D 3C            mov d, a
3971   195E 07 4B 1C      call _puts
3972   1961 10 00 0A      mov a, $0A00
3973   1964 05 03         syscall sys_io
3974   1966             ; --- END INLINE ASM BLOCK
3975   1966             
3976   1966 F9            leave
3977   1967 09            ret
3978   1968             
3979   1968             print:
3980   1968 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3981   196B             
3982   196B             ; --- BEGIN INLINE ASM BLOCK
3983   196B FA 05 00      lea d, [bp + 5] ; $s
3984   196E FD 2A         mov d, [d]
3985   1970 07 4B 1C      call _puts
3986   1973             ; --- END INLINE ASM BLOCK
3987   1973             
3988   1973 F9            leave
3989   1974 09            ret
3990   1975             
3991   1975             loadfile:
3992   1975 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3993   1978             
3994   1978             ; --- BEGIN INLINE ASM BLOCK
3995   1978 FA 07 00      lea d, [bp + 7] ; $destination
3996   197B 15            mov a, [d]
3997   197C 4F            mov di, a
3998   197D FA 05 00      lea d, [bp + 5] ; $filename
3999   1980 FD 2A         mov d, [d]
4000   1982 19 14         mov al, 20
4001   1984 05 04         syscall sys_filesystem
4002   1986             ; --- END INLINE ASM BLOCK
4003   1986             
4004   1986 F9            leave
4005   1987 09            ret
4006   1988             
4007   1988             create_file:
4008   1988 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4009   198B F9            leave
4010   198C 09            ret
4011   198D             
4012   198D             delete_file:
4013   198D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4014   1990             
4015   1990             ; --- BEGIN INLINE ASM BLOCK
4016   1990 FA 05 00      lea d, [bp + 5] ; $filename
4017   1993 19 0A         mov al, 10
4018   1995 05 04         syscall sys_filesystem
4019   1997             ; --- END INLINE ASM BLOCK
4020   1997             
4021   1997 F9            leave
4022   1998 09            ret
4023   1999             
4024   1999             fopen:
4025   1999 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4026   199C F9            leave
4027   199D 09            ret
4028   199E             
4029   199E             fclose:
4030   199E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4031   19A1 F9            leave
4032   19A2 09            ret
4033   19A3             
4034   19A3             load_hex:
4035   19A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4036   19A6             ; $temp 
4037   19A6 52 02 00      sub sp, 2
4038   19A9             ;; temp = alloc(32768); 
4039   19A9 FA FF FF      lea d, [bp + -1] ; $temp
4040   19AC DA            push d
4041   19AD 26 00 80      mov b, $8000
4042   19B0 FD AB         swp b
4043   19B2 D8            push b
4044   19B3 07 88 07      call alloc
4045   19B6 51 02 00      add sp, 2
4046   19B9 E7            pop d
4047   19BA FD 43         mov [d], b
4048   19BC             
4049   19BC             ; --- BEGIN INLINE ASM BLOCK
4050   19BC               
4051   19BC               
4052   19BC               
4053   19BC               
4054   19BC               
4055   19BC             _load_hex:
4056   19BC D7            push a
4057   19BD D8            push b
4058   19BE DA            push d
4059   19BF E2            push si
4060   19C0 E3            push di
4061   19C1 52 00 80      sub sp, $8000      
4062   19C4 38 00 00      mov c, 0
4063   19C7 48            mov a, sp
4064   19C8 77            inc a
4065   19C9 3C            mov d, a          
4066   19CA 07 08 1B      call _gets        
4067   19CD 4D            mov si, a
4068   19CE             __load_hex_loop:
4069   19CE F6            lodsb             
4070   19CF B9 00         cmp al, 0         
4071   19D1 C6 DF 19      jz __load_hex_ret
4072   19D4 36            mov bh, al
4073   19D5 F6            lodsb
4074   19D6 2F            mov bl, al
4075   19D7 07 BE 1A      call _atoi        
4076   19DA F7            stosb             
4077   19DB 78            inc c
4078   19DC 0A CE 19      jmp __load_hex_loop
4079   19DF             __load_hex_ret:
4080   19DF 51 00 80      add sp, $8000
4081   19E2 F0            pop di
4082   19E3 EF            pop si
4083   19E4 E7            pop d
4084   19E5 E5            pop b
4085   19E6 E4            pop a
4086   19E7             ; --- END INLINE ASM BLOCK
4087   19E7             
4088   19E7 F9            leave
4089   19E8 09            ret
4090   19E9             
4091   19E9             getparam:
4092   19E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4093   19EC             ; $data 
4094   19EC 52 01 00      sub sp, 1
4095   19EF             
4096   19EF             ; --- BEGIN INLINE ASM BLOCK
4097   19EF 19 04         mov al, 4
4098   19F1 FA 05 00      lea d, [bp + 5] ; $address
4099   19F4 FD 2A         mov d, [d]
4100   19F6 05 0C         syscall sys_system
4101   19F8 FA 00 00      lea d, [bp + 0] ; $data
4102   19FB FD 3E         mov [d], bl
4103   19FD             ; --- END INLINE ASM BLOCK
4104   19FD             
4105   19FD             ;; return data; 
4106   19FD FA 00 00      lea d, [bp + 0] ; $data
4107   1A00 32            mov bl, [d]
4108   1A01 A7 00         mov bh, 0
4109   1A03 F9            leave
4110   1A04 09            ret
4111   1A05             
4112   1A05             clear:
4113   1A05 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4114   1A08             ;; print("\033[2J\033[H"); 
4115   1A08 26 14 2A      mov b, __s3 ; "\033[2J\033[H"
4116   1A0B FD AB         swp b
4117   1A0D D8            push b
4118   1A0E 07 68 19      call print
4119   1A11 51 02 00      add sp, 2
4120   1A14 F9            leave
4121   1A15 09            ret
4122   1A16             
4123   1A16             include_stdio_asm:
4124   1A16 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4125   1A19             
4126   1A19             ; --- BEGIN INLINE ASM BLOCK
4127   1A19             .include "lib/asm/stdio.asm"
0001+  1A19             ;-----------------------------------------------------------------------------
0002+  1A19             ; stdio.s
0003+  1A19             ;-----------------------------------------------------------------------------
0004+  1A19             .include "lib/asm/string.asm"
0001++ 1A19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1A19             ; string.s
0003++ 1A19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1A19             
0005++ 1A19             
0006++ 1A19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1A19             ; _strrev
0008++ 1A19             ; reverse a string
0009++ 1A19             ; D = string address
0010++ 1A19             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1A19             ; 01234
0012++ 1A19             _strrev:
0013++ 1A19 4B          	pusha
0014++ 1A1A 07 60 1A    	call _strlen	; length in C
0015++ 1A1D 12          	mov a, c
0016++ 1A1E AF 01 00    	cmp a, 1
0017++ 1A21 D0 3B 1A    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1A24 7D          	dec a
0019++ 1A25 FD 4E       	mov si, d	; beginning of string
0020++ 1A27 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1A29 59          	add d, a	; end of string
0022++ 1A2A 12          	mov a, c
0023++ 1A2B FD 9B       	shr a		; divide by 2
0024++ 1A2D 39          	mov c, a	; C now counts the steps
0025++ 1A2E             _strrev_L0:
0026++ 1A2E 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1A2F F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1A30 3E          	mov [d], al	; store left char into right side
0029++ 1A31 1B          	mov al, bl
0030++ 1A32 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1A33 7E          	dec c
0032++ 1A34 7F          	dec d
0033++ 1A35 C2 00 00    	cmp c, 0
0034++ 1A38 C7 2E 1A    	jne _strrev_L0
0035++ 1A3B             _strrev_end:
0036++ 1A3B 4C          	popa
0037++ 1A3C 09          	ret
0038++ 1A3D             	
0039++ 1A3D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1A3D             ; _strchr
0041++ 1A3D             ; search string in D for char in AL
0042++ 1A3D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1A3D             _strchr:
0044++ 1A3D             _strchr_L0:
0045++ 1A3D 32          	mov bl, [d]
0046++ 1A3E C1 00       	cmp bl, 0
0047++ 1A40 C6 4B 1A    	je _strchr_end
0048++ 1A43 BA          	cmp al, bl
0049++ 1A44 C6 4B 1A    	je _strchr_end
0050++ 1A47 79          	inc d
0051++ 1A48 0A 3D 1A    	jmp _strchr_L0
0052++ 1A4B             _strchr_end:
0053++ 1A4B 1B          	mov al, bl
0054++ 1A4C 09          	ret
0055++ 1A4D             
0056++ 1A4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1A4D             ; _strstr
0058++ 1A4D             ; find sub-string
0059++ 1A4D             ; str1 in SI
0060++ 1A4D             ; str2 in DI
0061++ 1A4D             ; SI points to end of source string
0062++ 1A4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1A4D             _strstr:
0064++ 1A4D DB          	push al
0065++ 1A4E DA          	push d
0066++ 1A4F E3          	push di
0067++ 1A50             _strstr_loop:
0068++ 1A50 F3          	cmpsb					; compare a byte of the strings
0069++ 1A51 C7 5C 1A    	jne _strstr_ret
0070++ 1A54 FC 00 00    	lea d, [di + 0]
0071++ 1A57 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1A59 C7 50 1A    	jne _strstr_loop				; equal chars but not at end
0073++ 1A5C             _strstr_ret:
0074++ 1A5C F0          	pop di
0075++ 1A5D E7          	pop d
0076++ 1A5E E8          	pop al
0077++ 1A5F 09          	ret
0078++ 1A60             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1A60             ; length of null terminated string
0080++ 1A60             ; result in C
0081++ 1A60             ; pointer in D
0082++ 1A60             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1A60             _strlen:
0084++ 1A60 DA          	push d
0085++ 1A61 38 00 00    	mov c, 0
0086++ 1A64             _strlen_L1:
0087++ 1A64 BD 00       	cmp byte [d], 0
0088++ 1A66 C6 6E 1A    	je _strlen_ret
0089++ 1A69 79          	inc d
0090++ 1A6A 78          	inc c
0091++ 1A6B 0A 64 1A    	jmp _strlen_L1
0092++ 1A6E             _strlen_ret:
0093++ 1A6E E7          	pop d
0094++ 1A6F 09          	ret
0095++ 1A70             
0096++ 1A70             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1A70             ; STRCMP
0098++ 1A70             ; compare two strings
0099++ 1A70             ; str1 in SI
0100++ 1A70             ; str2 in DI
0101++ 1A70             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1A70             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1A70             _strcmp:
0104++ 1A70 DB          	push al
0105++ 1A71 DA          	push d
0106++ 1A72 E3          	push di
0107++ 1A73 E2          	push si
0108++ 1A74             _strcmp_loop:
0109++ 1A74 F3          	cmpsb					; compare a byte of the strings
0110++ 1A75 C7 80 1A    	jne _strcmp_ret
0111++ 1A78 FB FF FF    	lea d, [si +- 1]
0112++ 1A7B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1A7D C7 74 1A    	jne _strcmp_loop				; equal chars but not at end
0114++ 1A80             _strcmp_ret:
0115++ 1A80 EF          	pop si
0116++ 1A81 F0          	pop di
0117++ 1A82 E7          	pop d
0118++ 1A83 E8          	pop al
0119++ 1A84 09          	ret
0120++ 1A85             
0121++ 1A85             
0122++ 1A85             ; STRCPY
0123++ 1A85             ; copy null terminated string from SI to DI
0124++ 1A85             ; source in SI
0125++ 1A85             ; destination in DI
0126++ 1A85             _strcpy:
0127++ 1A85 E2          	push si
0128++ 1A86 E3          	push di
0129++ 1A87 DB          	push al
0130++ 1A88             _strcpy_L1:
0131++ 1A88 F6          	lodsb
0132++ 1A89 F7          	stosb
0133++ 1A8A B9 00       	cmp al, 0
0134++ 1A8C C7 88 1A    	jne _strcpy_L1
0135++ 1A8F             _strcpy_end:
0136++ 1A8F E8          	pop al
0137++ 1A90 F0          	pop di
0138++ 1A91 EF          	pop si
0139++ 1A92 09          	ret
0140++ 1A93             
0141++ 1A93             ; STRCAT
0142++ 1A93             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1A93             ; source in SI
0144++ 1A93             ; destination in DI
0145++ 1A93             _strcat:
0146++ 1A93 E2          	push si
0147++ 1A94 E3          	push di
0148++ 1A95 D7          	push a
0149++ 1A96 DA          	push d
0150++ 1A97 50          	mov a, di
0151++ 1A98 3C          	mov d, a
0152++ 1A99             _strcat_goto_end_L1:
0153++ 1A99 BD 00       	cmp byte[d], 0
0154++ 1A9B C6 A2 1A    	je _strcat_start
0155++ 1A9E 79          	inc d
0156++ 1A9F 0A 99 1A    	jmp _strcat_goto_end_L1
0157++ 1AA2             _strcat_start:
0158++ 1AA2 FD 50       	mov di, d
0159++ 1AA4             _strcat_L1:
0160++ 1AA4 F6          	lodsb
0161++ 1AA5 F7          	stosb
0162++ 1AA6 B9 00       	cmp al, 0
0163++ 1AA8 C7 A4 1A    	jne _strcat_L1
0164++ 1AAB             _strcat_end:
0165++ 1AAB E7          	pop d
0166++ 1AAC E4          	pop a
0167++ 1AAD F0          	pop di
0168++ 1AAE EF          	pop si
0169++ 1AAF 09          	ret
0170++ 1AB0             
0171++ 1AB0             
0005+  1AB0             
0006+  1AB0             ;-----------------------------------------------------------------------------
0007+  1AB0             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1AB0             ; ASCII in BL
0009+  1AB0             ; result in AL
0010+  1AB0             ; ascii for F = 0100 0110
0011+  1AB0             ; ascii for 9 = 0011 1001
0012+  1AB0             ;-----------------------------------------------------------------------------
0013+  1AB0             hex_ascii_encode:
0014+  1AB0 1B            mov al, bl
0015+  1AB1 93 40         test al, $40        ; test if letter or number
0016+  1AB3 C7 B9 1A      jnz hex_letter
0017+  1AB6 87 0F         and al, $0F        ; get number
0018+  1AB8 09            ret
0019+  1AB9             hex_letter:
0020+  1AB9 87 0F         and al, $0F        ; get letter
0021+  1ABB 6A 09         add al, 9
0022+  1ABD 09            ret
0023+  1ABE             
0024+  1ABE             ;-----------------------------------------------------------------------------
0025+  1ABE             ; ATOI
0026+  1ABE             ; 2 letter hex string in B
0027+  1ABE             ; 8bit integer returned in AL
0028+  1ABE             ;-----------------------------------------------------------------------------
0029+  1ABE             _atoi:
0030+  1ABE D8            push b
0031+  1ABF 07 B0 1A      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1AC2 30            mov bl, bh
0033+  1AC3 DB            push al          ; save a
0034+  1AC4 07 B0 1A      call hex_ascii_encode
0035+  1AC7 EA            pop bl  
0036+  1AC8 FD 9E 04      shl al, 4
0037+  1ACB 8C            or al, bl
0038+  1ACC E5            pop b
0039+  1ACD 09            ret  
0040+  1ACE             
0041+  1ACE             ;-----------------------------------------------------------------------------
0042+  1ACE             ; scanf
0043+  1ACE             ; no need for explanations!
0044+  1ACE             ;-----------------------------------------------------------------------------
0045+  1ACE             scanf:
0046+  1ACE 09            ret
0047+  1ACF             
0048+  1ACF             ;-----------------------------------------------------------------------------
0049+  1ACF             ; ITOA
0050+  1ACF             ; 8bit value in BL
0051+  1ACF             ; 2 byte ASCII result in A
0052+  1ACF             ;-----------------------------------------------------------------------------
0053+  1ACF             _itoa:
0054+  1ACF DA            push d
0055+  1AD0 D8            push b
0056+  1AD1 A7 00         mov bh, 0
0057+  1AD3 FD A4 04      shr bl, 4  
0058+  1AD6 74            mov d, b
0059+  1AD7 1F 7F 1D      mov al, [d + s_hex_digits]
0060+  1ADA 23            mov ah, al
0061+  1ADB               
0062+  1ADB E5            pop b
0063+  1ADC D8            push b
0064+  1ADD A7 00         mov bh, 0
0065+  1ADF FD 87 0F      and bl, $0F
0066+  1AE2 74            mov d, b
0067+  1AE3 1F 7F 1D      mov al, [d + s_hex_digits]
0068+  1AE6 E5            pop b
0069+  1AE7 E7            pop d
0070+  1AE8 09            ret
0071+  1AE9             
0072+  1AE9             ;-----------------------------------------------------------------------------
0073+  1AE9             ; HEX STRING TO BINARY
0074+  1AE9             ; di = destination address
0075+  1AE9             ; si = source
0076+  1AE9             ;-----------------------------------------------------------------------------
0077+  1AE9             _hex_to_int:
0078+  1AE9             _hex_to_int_L1:
0079+  1AE9 F6            lodsb          ; load from [SI] to AL
0080+  1AEA B9 00         cmp al, 0        ; check if ASCII 0
0081+  1AEC C6 F9 1A      jz _hex_to_int_ret
0082+  1AEF 36            mov bh, al
0083+  1AF0 F6            lodsb
0084+  1AF1 2F            mov bl, al
0085+  1AF2 07 BE 1A      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  1AF5 F7            stosb          ; store AL to [DI]
0087+  1AF6 0A E9 1A      jmp _hex_to_int_L1
0088+  1AF9             _hex_to_int_ret:
0089+  1AF9 09            ret    
0090+  1AFA             
0091+  1AFA             ;-----------------------------------------------------------------------------
0092+  1AFA             ; GETCHAR
0093+  1AFA             ; char in ah
0094+  1AFA             ;-----------------------------------------------------------------------------
0095+  1AFA             getch:
0096+  1AFA DB            push al
0097+  1AFB             getch_retry:
0098+  1AFB 19 01         mov al, 1
0099+  1AFD 05 03         syscall sys_io      ; receive in AH
0100+  1AFF E8            pop al
0101+  1B00 09            ret
0102+  1B01             
0103+  1B01             ;-----------------------------------------------------------------------------
0104+  1B01             ; PUTCHAR
0105+  1B01             ; char in ah
0106+  1B01             ;-----------------------------------------------------------------------------
0107+  1B01             _putchar:
0108+  1B01 D7            push a
0109+  1B02 19 00         mov al, 0
0110+  1B04 05 03         syscall sys_io      ; char in AH
0111+  1B06 E4            pop a
0112+  1B07 09            ret
0113+  1B08             
0114+  1B08             ;-----------------------------------------------------------------------------
0115+  1B08             ;; INPUT A STRING
0116+  1B08             ;; terminates with null
0117+  1B08             ;; pointer in D
0118+  1B08             ;-----------------------------------------------------------------------------
0119+  1B08             _gets:
0120+  1B08 D7            push a
0121+  1B09 DA            push d
0122+  1B0A             _gets_loop:
0123+  1B0A 19 01         mov al, 1
0124+  1B0C 05 03         syscall sys_io      ; receive in AH
0125+  1B0E B9 00         cmp al, 0        ; check error code (AL)
0126+  1B10 C6 0A 1B      je _gets_loop      ; if no char received, retry
0127+  1B13             
0128+  1B13 76 1B         cmp ah, 27
0129+  1B15 C6 36 1B      je _gets_ansi_esc
0130+  1B18 76 0A         cmp ah, $0A        ; LF
0131+  1B1A C6 A1 1B      je _gets_end
0132+  1B1D 76 0D         cmp ah, $0D        ; CR
0133+  1B1F C6 A1 1B      je _gets_end
0134+  1B22 76 5C         cmp ah, $5C        ; '\\'
0135+  1B24 C6 62 1B      je _gets_escape
0136+  1B27               
0137+  1B27 76 08         cmp ah, $08      ; check for backspace
0138+  1B29 C6 32 1B      je _gets_backspace
0139+  1B2C             
0140+  1B2C 1A            mov al, ah
0141+  1B2D 3E            mov [d], al
0142+  1B2E 79            inc d
0143+  1B2F 0A 0A 1B      jmp _gets_loop
0144+  1B32             _gets_backspace:
0145+  1B32 7F            dec d
0146+  1B33 0A 0A 1B      jmp _gets_loop
0147+  1B36             _gets_ansi_esc:
0148+  1B36 19 01         mov al, 1
0149+  1B38 05 03         syscall sys_io        ; receive in AH without echo
0150+  1B3A B9 00         cmp al, 0          ; check error code (AL)
0151+  1B3C C6 36 1B      je _gets_ansi_esc    ; if no char received, retry
0152+  1B3F 76 5B         cmp ah, '['
0153+  1B41 C7 0A 1B      jne _gets_loop
0154+  1B44             _gets_ansi_esc_2:
0155+  1B44 19 01         mov al, 1
0156+  1B46 05 03         syscall sys_io          ; receive in AH without echo
0157+  1B48 B9 00         cmp al, 0            ; check error code (AL)
0158+  1B4A C6 44 1B      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1B4D 76 44         cmp ah, 'D'
0160+  1B4F C6 5A 1B      je _gets_left_arrow
0161+  1B52 76 43         cmp ah, 'C'
0162+  1B54 C6 5E 1B      je _gets_right_arrow
0163+  1B57 0A 0A 1B      jmp _gets_loop
0164+  1B5A             _gets_left_arrow:
0165+  1B5A 7F            dec d
0166+  1B5B 0A 0A 1B      jmp _gets_loop
0167+  1B5E             _gets_right_arrow:
0168+  1B5E 79            inc d
0169+  1B5F 0A 0A 1B      jmp _gets_loop
0170+  1B62             _gets_escape:
0171+  1B62 19 01         mov al, 1
0172+  1B64 05 03         syscall sys_io      ; receive in AH
0173+  1B66 B9 00         cmp al, 0        ; check error code (AL)
0174+  1B68 C6 62 1B      je _gets_escape      ; if no char received, retry
0175+  1B6B 76 6E         cmp ah, 'n'
0176+  1B6D C6 8C 1B      je _gets_LF
0177+  1B70 76 72         cmp ah, 'r'
0178+  1B72 C6 93 1B      je _gets_CR
0179+  1B75 76 30         cmp ah, '0'
0180+  1B77 C6 9A 1B      je _gets_NULL
0181+  1B7A 76 5C         cmp ah, $5C  ; '\'
0182+  1B7C C6 85 1B      je _gets_slash
0183+  1B7F 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1B80 3E            mov [d], al
0185+  1B81 79            inc d
0186+  1B82 0A 0A 1B      jmp _gets_loop
0187+  1B85             _gets_slash:
0188+  1B85 19 5C         mov al, $5C
0189+  1B87 3E            mov [d], al
0190+  1B88 79            inc d
0191+  1B89 0A 0A 1B      jmp _gets_loop
0192+  1B8C             _gets_LF:
0193+  1B8C 19 0A         mov al, $0A
0194+  1B8E 3E            mov [d], al
0195+  1B8F 79            inc d
0196+  1B90 0A 0A 1B      jmp _gets_loop
0197+  1B93             _gets_CR:
0198+  1B93 19 0D         mov al, $0D
0199+  1B95 3E            mov [d], al
0200+  1B96 79            inc d
0201+  1B97 0A 0A 1B      jmp _gets_loop
0202+  1B9A             _gets_NULL:
0203+  1B9A 19 00         mov al, $00
0204+  1B9C 3E            mov [d], al
0205+  1B9D 79            inc d
0206+  1B9E 0A 0A 1B      jmp _gets_loop
0207+  1BA1             _gets_end:
0208+  1BA1 19 00         mov al, 0
0209+  1BA3 3E            mov [d], al        ; terminate string
0210+  1BA4 E7            pop d
0211+  1BA5 E4            pop a
0212+  1BA6 09            ret
0213+  1BA7             
0214+  1BA7             ;-----------------------------------------------------------------------------
0215+  1BA7             ;; INPUT TEXT
0216+  1BA7             ;; terminated with CTRL+D
0217+  1BA7             ;; pointer in D
0218+  1BA7             ;-----------------------------------------------------------------------------
0219+  1BA7             _gettxt:
0220+  1BA7 D7            push a
0221+  1BA8 DA            push d
0222+  1BA9             _gettxt_loop:
0223+  1BA9 19 01         mov al, 1
0224+  1BAB 05 03         syscall sys_io      ; receive in AH
0225+  1BAD B9 00         cmp al, 0        ; check error code (AL)
0226+  1BAF C6 A9 1B      je _gettxt_loop    ; if no char received, retry
0227+  1BB2 76 04         cmp ah, 4      ; EOT
0228+  1BB4 C6 F2 1B      je _gettxt_end
0229+  1BB7 76 08         cmp ah, $08      ; check for backspace
0230+  1BB9 C6 EE 1B      je _gettxt_backspace
0231+  1BBC 76 5C         cmp ah, $5C        ; '\'
0232+  1BBE C6 C7 1B      je _gettxt_escape
0233+  1BC1 1A            mov al, ah
0234+  1BC2 3E            mov [d], al
0235+  1BC3 79            inc d
0236+  1BC4 0A A9 1B      jmp _gettxt_loop
0237+  1BC7             _gettxt_escape:
0238+  1BC7 19 01         mov al, 1
0239+  1BC9 05 03         syscall sys_io      ; receive in AH
0240+  1BCB B9 00         cmp al, 0        ; check error code (AL)
0241+  1BCD C6 C7 1B      je _gettxt_escape    ; if no char received, retry
0242+  1BD0 76 6E         cmp ah, 'n'
0243+  1BD2 C6 E0 1B      je _gettxt_LF
0244+  1BD5 76 72         cmp ah, 'r'
0245+  1BD7 C6 E7 1B      je _gettxt_CR
0246+  1BDA 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  1BDB 3E            mov [d], al
0248+  1BDC 79            inc d
0249+  1BDD 0A A9 1B      jmp _gettxt_loop
0250+  1BE0             _gettxt_LF:
0251+  1BE0 19 0A         mov al, $0A
0252+  1BE2 3E            mov [d], al
0253+  1BE3 79            inc d
0254+  1BE4 0A A9 1B      jmp _gettxt_loop
0255+  1BE7             _gettxt_CR:
0256+  1BE7 19 0D         mov al, $0D
0257+  1BE9 3E            mov [d], al
0258+  1BEA 79            inc d
0259+  1BEB 0A A9 1B      jmp _gettxt_loop
0260+  1BEE             _gettxt_backspace:
0261+  1BEE 7F            dec d
0262+  1BEF 0A A9 1B      jmp _gettxt_loop
0263+  1BF2             _gettxt_end:
0264+  1BF2 19 00         mov al, 0
0265+  1BF4 3E            mov [d], al        ; terminate string
0266+  1BF5 E7            pop d
0267+  1BF6 E4            pop a
0268+  1BF7 09            ret
0269+  1BF8             
0270+  1BF8             ;-----------------------------------------------------------------------------
0271+  1BF8             ; PRINT NEW LINE
0272+  1BF8             ;-----------------------------------------------------------------------------
0273+  1BF8             printnl:
0274+  1BF8 D7            push a
0275+  1BF9 10 00 0A      mov a, $0A00
0276+  1BFC 05 03         syscall sys_io
0277+  1BFE 10 00 0D      mov a, $0D00
0278+  1C01 05 03         syscall sys_io
0279+  1C03 E4            pop a
0280+  1C04 09            ret
0281+  1C05             
0282+  1C05             ;-----------------------------------------------------------------------------
0283+  1C05             ; _strtoint
0284+  1C05             ; 4 digit hex string number in d
0285+  1C05             ; integer returned in A
0286+  1C05             ;-----------------------------------------------------------------------------
0287+  1C05             _strtointx:
0288+  1C05 D8            push b
0289+  1C06 32            mov bl, [d]
0290+  1C07 37            mov bh, bl
0291+  1C08 33 01 00      mov bl, [d + 1]
0292+  1C0B 07 BE 1A      call _atoi        ; convert to int in AL
0293+  1C0E 23            mov ah, al        ; move to AH
0294+  1C0F 33 02 00      mov bl, [d + 2]
0295+  1C12 37            mov bh, bl
0296+  1C13 33 03 00      mov bl, [d + 3]
0297+  1C16 07 BE 1A      call _atoi        ; convert to int in AL
0298+  1C19 E5            pop b
0299+  1C1A 09            ret
0300+  1C1B             
0301+  1C1B             ;-----------------------------------------------------------------------------
0302+  1C1B             ; _strtoint
0303+  1C1B             ; 5 digit base10 string number in d
0304+  1C1B             ; integer returned in A
0305+  1C1B             ;-----------------------------------------------------------------------------
0306+  1C1B             _strtoint:
0307+  1C1B E2            push si
0308+  1C1C D8            push b
0309+  1C1D D9            push c
0310+  1C1E DA            push d
0311+  1C1F 07 60 1A      call _strlen      ; get string length in C
0312+  1C22 7E            dec c
0313+  1C23 FD 4E         mov si, d
0314+  1C25 12            mov a, c
0315+  1C26 FD 99         shl a
0316+  1C28 3B 97 1D      mov d, table_power
0317+  1C2B 59            add d, a
0318+  1C2C 38 00 00      mov c, 0
0319+  1C2F             _strtoint_L0:
0320+  1C2F F6            lodsb      ; load ASCII to al
0321+  1C30 B9 00         cmp al, 0
0322+  1C32 C6 45 1C      je _strtoint_end
0323+  1C35 6F 30         sub al, $30    ; make into integer
0324+  1C37 22 00         mov ah, 0
0325+  1C39 2A            mov b, [d]
0326+  1C3A AC            mul a, b      ; result in B since it fits in 16bits
0327+  1C3B 11            mov a, b
0328+  1C3C 28            mov b, c
0329+  1C3D 54            add a, b
0330+  1C3E 39            mov c, a
0331+  1C3F 63 02 00      sub d, 2
0332+  1C42 0A 2F 1C      jmp _strtoint_L0
0333+  1C45             _strtoint_end:
0334+  1C45 12            mov a, c
0335+  1C46 E7            pop d
0336+  1C47 E6            pop c
0337+  1C48 E5            pop b
0338+  1C49 EF            pop si
0339+  1C4A 09            ret
0340+  1C4B             
0341+  1C4B             ;-----------------------------------------------------------------------------
0342+  1C4B             ; PRINT NULL TERMINATED STRING
0343+  1C4B             ; pointer in D
0344+  1C4B             ;-----------------------------------------------------------------------------
0345+  1C4B             _puts:
0346+  1C4B D7            push a
0347+  1C4C DA            push d
0348+  1C4D             _puts_L1:
0349+  1C4D 1E            mov al, [d]
0350+  1C4E B9 00         cmp al, 0
0351+  1C50 C6 5C 1C      jz _puts_END
0352+  1C53 23            mov ah, al
0353+  1C54 19 00         mov al, 0
0354+  1C56 05 03         syscall sys_io
0355+  1C58 79            inc d
0356+  1C59 0A 4D 1C      jmp _puts_L1
0357+  1C5C             _puts_END:
0358+  1C5C E7            pop d
0359+  1C5D E4            pop a
0360+  1C5E 09            ret
0361+  1C5F             
0362+  1C5F             ;-----------------------------------------------------------------------------
0363+  1C5F             ; PRINT N SIZE STRING
0364+  1C5F             ; pointer in D
0365+  1C5F             ; size in C
0366+  1C5F             ;-----------------------------------------------------------------------------
0367+  1C5F             _putsn:
0368+  1C5F DB            push al
0369+  1C60 DA            push d
0370+  1C61 D9            push c
0371+  1C62             _putsn_L0:
0372+  1C62 1E            mov al, [d]
0373+  1C63 23            mov ah, al
0374+  1C64 19 00         mov al, 0
0375+  1C66 05 03         syscall sys_io
0376+  1C68 79            inc d
0377+  1C69 7E            dec c  
0378+  1C6A C2 00 00      cmp c, 0
0379+  1C6D C7 62 1C      jne _putsn_L0
0380+  1C70             _putsn_end:
0381+  1C70 E6            pop c
0382+  1C71 E7            pop d
0383+  1C72 E8            pop al
0384+  1C73 09            ret
0385+  1C74             
0386+  1C74             ;-----------------------------------------------------------------------------
0387+  1C74             ; print 16bit decimal number
0388+  1C74             ; input number in A
0389+  1C74             ;-----------------------------------------------------------------------------
0390+  1C74             print_u16d:
0391+  1C74 D7            push a
0392+  1C75 D8            push b
0393+  1C76 26 10 27      mov b, 10000
0394+  1C79 AE            div a, b      ; get 10000's coeff.
0395+  1C7A 07 9C 1C      call print_number
0396+  1C7D 11            mov a, b
0397+  1C7E 26 E8 03      mov b, 1000
0398+  1C81 AE            div a, b      ; get 1000's coeff.
0399+  1C82 07 9C 1C      call print_number
0400+  1C85 11            mov a, b
0401+  1C86 26 64 00      mov b, 100
0402+  1C89 AE            div a, b
0403+  1C8A 07 9C 1C      call print_number
0404+  1C8D 11            mov a, b
0405+  1C8E 26 0A 00      mov b, 10
0406+  1C91 AE            div a, b
0407+  1C92 07 9C 1C      call print_number
0408+  1C95 1B            mov al, bl      ; 1's coeff in bl
0409+  1C96 07 9C 1C      call print_number
0410+  1C99 E5            pop b
0411+  1C9A E4            pop a
0412+  1C9B 09            ret
0413+  1C9C             
0414+  1C9C             ;-----------------------------------------------------------------------------
0415+  1C9C             ; print AL
0416+  1C9C             ;-----------------------------------------------------------------------------
0417+  1C9C             print_number:
0418+  1C9C 6A 30         add al, $30
0419+  1C9E 23            mov ah, al
0420+  1C9F 07 01 1B      call _putchar
0421+  1CA2 09            ret
0422+  1CA3             
0423+  1CA3             ;-----------------------------------------------------------------------------
0424+  1CA3             ; PRINT 16BIT HEX INTEGER
0425+  1CA3             ; integer value in reg B
0426+  1CA3             ;-----------------------------------------------------------------------------
0427+  1CA3             print_u16x:
0428+  1CA3 D7            push a
0429+  1CA4 D8            push b
0430+  1CA5 DD            push bl
0431+  1CA6 30            mov bl, bh
0432+  1CA7 07 CF 1A      call _itoa        ; convert bh to char in A
0433+  1CAA 2F            mov bl, al        ; save al
0434+  1CAB 19 00         mov al, 0
0435+  1CAD 05 03         syscall sys_io        ; display AH
0436+  1CAF 24            mov ah, bl        ; retrieve al
0437+  1CB0 19 00         mov al, 0
0438+  1CB2 05 03         syscall sys_io        ; display AL
0439+  1CB4             
0440+  1CB4 EA            pop bl
0441+  1CB5 07 CF 1A      call _itoa        ; convert bh to char in A
0442+  1CB8 2F            mov bl, al        ; save al
0443+  1CB9 19 00         mov al, 0
0444+  1CBB 05 03         syscall sys_io        ; display AH
0445+  1CBD 24            mov ah, bl        ; retrieve al
0446+  1CBE 19 00         mov al, 0
0447+  1CC0 05 03         syscall sys_io        ; display AL
0448+  1CC2             
0449+  1CC2 E5            pop b
0450+  1CC3 E4            pop a
0451+  1CC4 09            ret
0452+  1CC5             
0453+  1CC5             ;-----------------------------------------------------------------------------
0454+  1CC5             ; INPUT 16BIT HEX INTEGER
0455+  1CC5             ; read 16bit integer into A
0456+  1CC5             ;-----------------------------------------------------------------------------
0457+  1CC5             scan_u16x:
0458+  1CC5 F8 10 00      enter 16
0459+  1CC8 D8            push b
0460+  1CC9 DA            push d
0461+  1CCA             
0462+  1CCA FA F1 FF      lea d, [bp + -15]
0463+  1CCD 07 08 1B      call _gets        ; get number
0464+  1CD0             
0465+  1CD0 32            mov bl, [d]
0466+  1CD1 37            mov bh, bl
0467+  1CD2 33 01 00      mov bl, [d + 1]
0468+  1CD5 07 BE 1A      call _atoi        ; convert to int in AL
0469+  1CD8 23            mov ah, al        ; move to AH
0470+  1CD9             
0471+  1CD9 33 02 00      mov bl, [d + 2]
0472+  1CDC 37            mov bh, bl
0473+  1CDD 33 03 00      mov bl, [d + 3]
0474+  1CE0 07 BE 1A      call _atoi        ; convert to int in AL
0475+  1CE3             
0476+  1CE3 E7            pop d
0477+  1CE4 E5            pop b
0478+  1CE5 F9            leave
0479+  1CE6 09            ret
0480+  1CE7             
0481+  1CE7             ;-----------------------------------------------------------------------------
0482+  1CE7             ; PRINT 8bit HEX INTEGER
0483+  1CE7             ; integer value in reg bl
0484+  1CE7             ;-----------------------------------------------------------------------------
0485+  1CE7             print_u8x:
0486+  1CE7 D7            push a
0487+  1CE8 DD            push bl
0488+  1CE9             
0489+  1CE9 07 CF 1A      call _itoa        ; convert bl to char in A
0490+  1CEC 2F            mov bl, al        ; save al
0491+  1CED 19 00         mov al, 0
0492+  1CEF 05 03         syscall sys_io        ; display AH
0493+  1CF1 24            mov ah, bl        ; retrieve al
0494+  1CF2 19 00         mov al, 0
0495+  1CF4 05 03         syscall sys_io        ; display AL
0496+  1CF6             
0497+  1CF6 EA            pop bl
0498+  1CF7 E4            pop a
0499+  1CF8 09            ret
0500+  1CF9             
0501+  1CF9             ;-----------------------------------------------------------------------------
0502+  1CF9             ; print 8bit decimal unsigned number
0503+  1CF9             ; input number in AL
0504+  1CF9             ;-----------------------------------------------------------------------------
0505+  1CF9             print_u8d:
0506+  1CF9 D7            push a
0507+  1CFA D8            push b
0508+  1CFB             
0509+  1CFB 22 00         mov ah, 0
0510+  1CFD 26 64 00      mov b, 100
0511+  1D00 AE            div a, b
0512+  1D01 D8            push b      ; save remainder
0513+  1D02 B9 00         cmp al, 0
0514+  1D04 C6 0E 1D      je skip100
0515+  1D07 6A 30         add al, $30
0516+  1D09 23            mov ah, al
0517+  1D0A 19 00         mov al, 0
0518+  1D0C 05 03         syscall sys_io  ; print coeff
0519+  1D0E             skip100:
0520+  1D0E E4            pop a
0521+  1D0F 22 00         mov ah, 0
0522+  1D11 26 0A 00      mov b, 10
0523+  1D14 AE            div a, b
0524+  1D15 D8            push b      ; save remainder
0525+  1D16 B9 00         cmp al, 0
0526+  1D18 C6 22 1D      je skip10
0527+  1D1B 6A 30         add al, $30
0528+  1D1D 23            mov ah, al
0529+  1D1E 19 00         mov al, 0
0530+  1D20 05 03         syscall sys_io  ; print coeff
0531+  1D22             skip10:
0532+  1D22 E4            pop a
0533+  1D23 1B            mov al, bl
0534+  1D24 6A 30         add al, $30
0535+  1D26 23            mov ah, al
0536+  1D27 19 00         mov al, 0
0537+  1D29 05 03         syscall sys_io  ; print coeff
0538+  1D2B E5            pop b
0539+  1D2C E4            pop a
0540+  1D2D 09            ret
0541+  1D2E             
0542+  1D2E             ;-----------------------------------------------------------------------------
0543+  1D2E             ; INPUT 8BIT HEX INTEGER
0544+  1D2E             ; read 8bit integer into AL
0545+  1D2E             ;-----------------------------------------------------------------------------
0546+  1D2E             scan_u8x:
0547+  1D2E F8 04 00      enter 4
0548+  1D31 D8            push b
0549+  1D32 DA            push d
0550+  1D33             
0551+  1D33 FA FD FF      lea d, [bp + -3]
0552+  1D36 07 08 1B      call _gets        ; get number
0553+  1D39             
0554+  1D39 32            mov bl, [d]
0555+  1D3A 37            mov bh, bl
0556+  1D3B 33 01 00      mov bl, [d + 1]
0557+  1D3E 07 BE 1A      call _atoi        ; convert to int in AL
0558+  1D41             
0559+  1D41 E7            pop d
0560+  1D42 E5            pop b
0561+  1D43 F9            leave
0562+  1D44 09            ret
0563+  1D45             
0564+  1D45             ;-----------------------------------------------------------------------------
0565+  1D45             ; input decimal number
0566+  1D45             ; result in A
0567+  1D45             ; 655'\0'
0568+  1D45             ; low--------high
0569+  1D45             ;-----------------------------------------------------------------------------
0570+  1D45             scan_u16d:
0571+  1D45 F8 08 00      enter 8
0572+  1D48 E2            push si
0573+  1D49 D8            push b
0574+  1D4A D9            push c
0575+  1D4B DA            push d
0576+  1D4C FA F9 FF      lea d, [bp +- 7]
0577+  1D4F 07 08 1B      call _gets
0578+  1D52 07 60 1A      call _strlen      ; get string length in C
0579+  1D55 7E            dec c
0580+  1D56 FD 4E         mov si, d
0581+  1D58 12            mov a, c
0582+  1D59 FD 99         shl a
0583+  1D5B 3B 97 1D      mov d, table_power
0584+  1D5E 59            add d, a
0585+  1D5F 38 00 00      mov c, 0
0586+  1D62             mul_loop:
0587+  1D62 F6            lodsb      ; load ASCII to al
0588+  1D63 B9 00         cmp al, 0
0589+  1D65 C6 78 1D      je mul_exit
0590+  1D68 6F 30         sub al, $30    ; make into integer
0591+  1D6A 22 00         mov ah, 0
0592+  1D6C 2A            mov b, [d]
0593+  1D6D AC            mul a, b      ; result in B since it fits in 16bits
0594+  1D6E 11            mov a, b
0595+  1D6F 28            mov b, c
0596+  1D70 54            add a, b
0597+  1D71 39            mov c, a
0598+  1D72 63 02 00      sub d, 2
0599+  1D75 0A 62 1D      jmp mul_loop
0600+  1D78             mul_exit:
0601+  1D78 12            mov a, c
0602+  1D79 E7            pop d
0603+  1D7A E6            pop c
0604+  1D7B E5            pop b
0605+  1D7C EF            pop si
0606+  1D7D F9            leave
0607+  1D7E 09            ret
0608+  1D7F             
0609+  1D7F 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1D83 34 35 36 37 
0609+  1D87 38 39 41 42 
0609+  1D8B 43 44 45 46 
0610+  1D8F 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1D93 1B 5B 48 00 
0611+  1D97             
0612+  1D97             table_power:
0613+  1D97 01 00         .dw 1
0614+  1D99 0A 00         .dw 10
0615+  1D9B 64 00         .dw 100
0616+  1D9D E8 03         .dw 1000
0617+  1D9F 10 27         .dw 100004128   1DA1             ; --- END INLINE ASM BLOCK
4129   1DA1             
4130   1DA1 F9            leave
4131   1DA2 09            ret
4132   1DA3             
4133   1DA3             neighbours:
4134   1DA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4135   1DA6             ; $count 
4136   1DA6 52 02 00      sub sp, 2
4137   1DA9             ;; count = 0; 
4138   1DA9 FA FF FF      lea d, [bp + -1] ; $count
4139   1DAC DA            push d
4140   1DAD 26 00 00      mov b, $0
4141   1DB0 E7            pop d
4142   1DB1 FD 43         mov [d], b
4143   1DB3             ;; if(currState[i+-1][j] == '@')			count++; 
4144   1DB3             _if55_cond:
4145   1DB3 3B 10 20      mov d, _currState_data ; $currState
4146   1DB6 D7            push a
4147   1DB7 DA            push d
4148   1DB8 FA 05 00      lea d, [bp + 5] ; $i
4149   1DBB 2A            mov b, [d]
4150   1DBC             ; START TERMS
4151   1DBC D7            push a
4152   1DBD 11            mov a, b
4153   1DBE 26 FF FF      mov b, $ffff
4154   1DC1 56            add b, a
4155   1DC2 E4            pop a
4156   1DC3             ; END TERMS
4157   1DC3 E7            pop d
4158   1DC4 FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4159   1DC8 DA            push d
4160   1DC9 FA 07 00      lea d, [bp + 7] ; $j
4161   1DCC 2A            mov b, [d]
4162   1DCD E7            pop d
4163   1DCE 5A            add d, b
4164   1DCF E4            pop a
4165   1DD0 32            mov bl, [d]
4166   1DD1 A7 00         mov bh, 0
4167   1DD3             ; START RELATIONAL
4168   1DD3 D7            push a
4169   1DD4 11            mov a, b
4170   1DD5 26 40 00      mov b, $40
4171   1DD8 B0            cmp a, b
4172   1DD9 FD 71         seq ; ==
4173   1DDB E4            pop a
4174   1DDC             ; END RELATIONAL
4175   1DDC C0 00 00      cmp b, 0
4176   1DDF C6 F2 1D      je _if55_exit
4177   1DE2             _if55_true:
4178   1DE2             ;; count++; 
4179   1DE2 FA FF FF      lea d, [bp + -1] ; $count
4180   1DE5 2A            mov b, [d]
4181   1DE6 D8            push b
4182   1DE7 FD 77         inc b
4183   1DE9 FA FF FF      lea d, [bp + -1] ; $count
4184   1DEC FD 43         mov [d], b
4185   1DEE E5            pop b
4186   1DEF 0A F2 1D      jmp _if55_exit
4187   1DF2             _if55_exit:
4188   1DF2             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
4189   1DF2             _if56_cond:
4190   1DF2 3B 10 20      mov d, _currState_data ; $currState
4191   1DF5 D7            push a
4192   1DF6 DA            push d
4193   1DF7 FA 05 00      lea d, [bp + 5] ; $i
4194   1DFA 2A            mov b, [d]
4195   1DFB             ; START TERMS
4196   1DFB D7            push a
4197   1DFC 11            mov a, b
4198   1DFD 26 FF FF      mov b, $ffff
4199   1E00 56            add b, a
4200   1E01 E4            pop a
4201   1E02             ; END TERMS
4202   1E02 E7            pop d
4203   1E03 FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4204   1E07 DA            push d
4205   1E08 FA 07 00      lea d, [bp + 7] ; $j
4206   1E0B 2A            mov b, [d]
4207   1E0C             ; START TERMS
4208   1E0C D7            push a
4209   1E0D 11            mov a, b
4210   1E0E 26 FF FF      mov b, $ffff
4211   1E11 56            add b, a
4212   1E12 E4            pop a
4213   1E13             ; END TERMS
4214   1E13 E7            pop d
4215   1E14 5A            add d, b
4216   1E15 E4            pop a
4217   1E16 32            mov bl, [d]
4218   1E17 A7 00         mov bh, 0
4219   1E19             ; START RELATIONAL
4220   1E19 D7            push a
4221   1E1A 11            mov a, b
4222   1E1B 26 40 00      mov b, $40
4223   1E1E B0            cmp a, b
4224   1E1F FD 71         seq ; ==
4225   1E21 E4            pop a
4226   1E22             ; END RELATIONAL
4227   1E22 C0 00 00      cmp b, 0
4228   1E25 C6 38 1E      je _if56_exit
4229   1E28             _if56_true:
4230   1E28             ;; count++; 
4231   1E28 FA FF FF      lea d, [bp + -1] ; $count
4232   1E2B 2A            mov b, [d]
4233   1E2C D8            push b
4234   1E2D FD 77         inc b
4235   1E2F FA FF FF      lea d, [bp + -1] ; $count
4236   1E32 FD 43         mov [d], b
4237   1E34 E5            pop b
4238   1E35 0A 38 1E      jmp _if56_exit
4239   1E38             _if56_exit:
4240   1E38             ;; if(currState[i+-1][j+1] == '@') 	count++; 
4241   1E38             _if57_cond:
4242   1E38 3B 10 20      mov d, _currState_data ; $currState
4243   1E3B D7            push a
4244   1E3C DA            push d
4245   1E3D FA 05 00      lea d, [bp + 5] ; $i
4246   1E40 2A            mov b, [d]
4247   1E41             ; START TERMS
4248   1E41 D7            push a
4249   1E42 11            mov a, b
4250   1E43 26 FF FF      mov b, $ffff
4251   1E46 56            add b, a
4252   1E47 E4            pop a
4253   1E48             ; END TERMS
4254   1E48 E7            pop d
4255   1E49 FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4256   1E4D DA            push d
4257   1E4E FA 07 00      lea d, [bp + 7] ; $j
4258   1E51 2A            mov b, [d]
4259   1E52             ; START TERMS
4260   1E52 D7            push a
4261   1E53 11            mov a, b
4262   1E54 26 01 00      mov b, $1
4263   1E57 56            add b, a
4264   1E58 E4            pop a
4265   1E59             ; END TERMS
4266   1E59 E7            pop d
4267   1E5A 5A            add d, b
4268   1E5B E4            pop a
4269   1E5C 32            mov bl, [d]
4270   1E5D A7 00         mov bh, 0
4271   1E5F             ; START RELATIONAL
4272   1E5F D7            push a
4273   1E60 11            mov a, b
4274   1E61 26 40 00      mov b, $40
4275   1E64 B0            cmp a, b
4276   1E65 FD 71         seq ; ==
4277   1E67 E4            pop a
4278   1E68             ; END RELATIONAL
4279   1E68 C0 00 00      cmp b, 0
4280   1E6B C6 7E 1E      je _if57_exit
4281   1E6E             _if57_true:
4282   1E6E             ;; count++; 
4283   1E6E FA FF FF      lea d, [bp + -1] ; $count
4284   1E71 2A            mov b, [d]
4285   1E72 D8            push b
4286   1E73 FD 77         inc b
4287   1E75 FA FF FF      lea d, [bp + -1] ; $count
4288   1E78 FD 43         mov [d], b
4289   1E7A E5            pop b
4290   1E7B 0A 7E 1E      jmp _if57_exit
4291   1E7E             _if57_exit:
4292   1E7E             ;; if(currState[i][j+-1] == '@') 		count++; 
4293   1E7E             _if58_cond:
4294   1E7E 3B 10 20      mov d, _currState_data ; $currState
4295   1E81 D7            push a
4296   1E82 DA            push d
4297   1E83 FA 05 00      lea d, [bp + 5] ; $i
4298   1E86 2A            mov b, [d]
4299   1E87 E7            pop d
4300   1E88 FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4301   1E8C DA            push d
4302   1E8D FA 07 00      lea d, [bp + 7] ; $j
4303   1E90 2A            mov b, [d]
4304   1E91             ; START TERMS
4305   1E91 D7            push a
4306   1E92 11            mov a, b
4307   1E93 26 FF FF      mov b, $ffff
4308   1E96 56            add b, a
4309   1E97 E4            pop a
4310   1E98             ; END TERMS
4311   1E98 E7            pop d
4312   1E99 5A            add d, b
4313   1E9A E4            pop a
4314   1E9B 32            mov bl, [d]
4315   1E9C A7 00         mov bh, 0
4316   1E9E             ; START RELATIONAL
4317   1E9E D7            push a
4318   1E9F 11            mov a, b
4319   1EA0 26 40 00      mov b, $40
4320   1EA3 B0            cmp a, b
4321   1EA4 FD 71         seq ; ==
4322   1EA6 E4            pop a
4323   1EA7             ; END RELATIONAL
4324   1EA7 C0 00 00      cmp b, 0
4325   1EAA C6 BD 1E      je _if58_exit
4326   1EAD             _if58_true:
4327   1EAD             ;; count++; 
4328   1EAD FA FF FF      lea d, [bp + -1] ; $count
4329   1EB0 2A            mov b, [d]
4330   1EB1 D8            push b
4331   1EB2 FD 77         inc b
4332   1EB4 FA FF FF      lea d, [bp + -1] ; $count
4333   1EB7 FD 43         mov [d], b
4334   1EB9 E5            pop b
4335   1EBA 0A BD 1E      jmp _if58_exit
4336   1EBD             _if58_exit:
4337   1EBD             ;; if(currState[i][j+1] == '@') 			count++; 
4338   1EBD             _if59_cond:
4339   1EBD 3B 10 20      mov d, _currState_data ; $currState
4340   1EC0 D7            push a
4341   1EC1 DA            push d
4342   1EC2 FA 05 00      lea d, [bp + 5] ; $i
4343   1EC5 2A            mov b, [d]
4344   1EC6 E7            pop d
4345   1EC7 FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4346   1ECB DA            push d
4347   1ECC FA 07 00      lea d, [bp + 7] ; $j
4348   1ECF 2A            mov b, [d]
4349   1ED0             ; START TERMS
4350   1ED0 D7            push a
4351   1ED1 11            mov a, b
4352   1ED2 26 01 00      mov b, $1
4353   1ED5 56            add b, a
4354   1ED6 E4            pop a
4355   1ED7             ; END TERMS
4356   1ED7 E7            pop d
4357   1ED8 5A            add d, b
4358   1ED9 E4            pop a
4359   1EDA 32            mov bl, [d]
4360   1EDB A7 00         mov bh, 0
4361   1EDD             ; START RELATIONAL
4362   1EDD D7            push a
4363   1EDE 11            mov a, b
4364   1EDF 26 40 00      mov b, $40
4365   1EE2 B0            cmp a, b
4366   1EE3 FD 71         seq ; ==
4367   1EE5 E4            pop a
4368   1EE6             ; END RELATIONAL
4369   1EE6 C0 00 00      cmp b, 0
4370   1EE9 C6 FC 1E      je _if59_exit
4371   1EEC             _if59_true:
4372   1EEC             ;; count++; 
4373   1EEC FA FF FF      lea d, [bp + -1] ; $count
4374   1EEF 2A            mov b, [d]
4375   1EF0 D8            push b
4376   1EF1 FD 77         inc b
4377   1EF3 FA FF FF      lea d, [bp + -1] ; $count
4378   1EF6 FD 43         mov [d], b
4379   1EF8 E5            pop b
4380   1EF9 0A FC 1E      jmp _if59_exit
4381   1EFC             _if59_exit:
4382   1EFC             ;; if(currState[i+1][j+-1] == '@') 	count++; 
4383   1EFC             _if60_cond:
4384   1EFC 3B 10 20      mov d, _currState_data ; $currState
4385   1EFF D7            push a
4386   1F00 DA            push d
4387   1F01 FA 05 00      lea d, [bp + 5] ; $i
4388   1F04 2A            mov b, [d]
4389   1F05             ; START TERMS
4390   1F05 D7            push a
4391   1F06 11            mov a, b
4392   1F07 26 01 00      mov b, $1
4393   1F0A 56            add b, a
4394   1F0B E4            pop a
4395   1F0C             ; END TERMS
4396   1F0C E7            pop d
4397   1F0D FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4398   1F11 DA            push d
4399   1F12 FA 07 00      lea d, [bp + 7] ; $j
4400   1F15 2A            mov b, [d]
4401   1F16             ; START TERMS
4402   1F16 D7            push a
4403   1F17 11            mov a, b
4404   1F18 26 FF FF      mov b, $ffff
4405   1F1B 56            add b, a
4406   1F1C E4            pop a
4407   1F1D             ; END TERMS
4408   1F1D E7            pop d
4409   1F1E 5A            add d, b
4410   1F1F E4            pop a
4411   1F20 32            mov bl, [d]
4412   1F21 A7 00         mov bh, 0
4413   1F23             ; START RELATIONAL
4414   1F23 D7            push a
4415   1F24 11            mov a, b
4416   1F25 26 40 00      mov b, $40
4417   1F28 B0            cmp a, b
4418   1F29 FD 71         seq ; ==
4419   1F2B E4            pop a
4420   1F2C             ; END RELATIONAL
4421   1F2C C0 00 00      cmp b, 0
4422   1F2F C6 42 1F      je _if60_exit
4423   1F32             _if60_true:
4424   1F32             ;; count++; 
4425   1F32 FA FF FF      lea d, [bp + -1] ; $count
4426   1F35 2A            mov b, [d]
4427   1F36 D8            push b
4428   1F37 FD 77         inc b
4429   1F39 FA FF FF      lea d, [bp + -1] ; $count
4430   1F3C FD 43         mov [d], b
4431   1F3E E5            pop b
4432   1F3F 0A 42 1F      jmp _if60_exit
4433   1F42             _if60_exit:
4434   1F42             ;; if(currState[i+1][j] == '@') 			count++; 
4435   1F42             _if61_cond:
4436   1F42 3B 10 20      mov d, _currState_data ; $currState
4437   1F45 D7            push a
4438   1F46 DA            push d
4439   1F47 FA 05 00      lea d, [bp + 5] ; $i
4440   1F4A 2A            mov b, [d]
4441   1F4B             ; START TERMS
4442   1F4B D7            push a
4443   1F4C 11            mov a, b
4444   1F4D 26 01 00      mov b, $1
4445   1F50 56            add b, a
4446   1F51 E4            pop a
4447   1F52             ; END TERMS
4448   1F52 E7            pop d
4449   1F53 FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4450   1F57 DA            push d
4451   1F58 FA 07 00      lea d, [bp + 7] ; $j
4452   1F5B 2A            mov b, [d]
4453   1F5C E7            pop d
4454   1F5D 5A            add d, b
4455   1F5E E4            pop a
4456   1F5F 32            mov bl, [d]
4457   1F60 A7 00         mov bh, 0
4458   1F62             ; START RELATIONAL
4459   1F62 D7            push a
4460   1F63 11            mov a, b
4461   1F64 26 40 00      mov b, $40
4462   1F67 B0            cmp a, b
4463   1F68 FD 71         seq ; ==
4464   1F6A E4            pop a
4465   1F6B             ; END RELATIONAL
4466   1F6B C0 00 00      cmp b, 0
4467   1F6E C6 81 1F      je _if61_exit
4468   1F71             _if61_true:
4469   1F71             ;; count++; 
4470   1F71 FA FF FF      lea d, [bp + -1] ; $count
4471   1F74 2A            mov b, [d]
4472   1F75 D8            push b
4473   1F76 FD 77         inc b
4474   1F78 FA FF FF      lea d, [bp + -1] ; $count
4475   1F7B FD 43         mov [d], b
4476   1F7D E5            pop b
4477   1F7E 0A 81 1F      jmp _if61_exit
4478   1F81             _if61_exit:
4479   1F81             ;; if(currState[i+1][j+1] == '@') 		count++; 
4480   1F81             _if62_cond:
4481   1F81 3B 10 20      mov d, _currState_data ; $currState
4482   1F84 D7            push a
4483   1F85 DA            push d
4484   1F86 FA 05 00      lea d, [bp + 5] ; $i
4485   1F89 2A            mov b, [d]
4486   1F8A             ; START TERMS
4487   1F8A D7            push a
4488   1F8B 11            mov a, b
4489   1F8C 26 01 00      mov b, $1
4490   1F8F 56            add b, a
4491   1F90 E4            pop a
4492   1F91             ; END TERMS
4493   1F91 E7            pop d
4494   1F92 FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4495   1F96 DA            push d
4496   1F97 FA 07 00      lea d, [bp + 7] ; $j
4497   1F9A 2A            mov b, [d]
4498   1F9B             ; START TERMS
4499   1F9B D7            push a
4500   1F9C 11            mov a, b
4501   1F9D 26 01 00      mov b, $1
4502   1FA0 56            add b, a
4503   1FA1 E4            pop a
4504   1FA2             ; END TERMS
4505   1FA2 E7            pop d
4506   1FA3 5A            add d, b
4507   1FA4 E4            pop a
4508   1FA5 32            mov bl, [d]
4509   1FA6 A7 00         mov bh, 0
4510   1FA8             ; START RELATIONAL
4511   1FA8 D7            push a
4512   1FA9 11            mov a, b
4513   1FAA 26 40 00      mov b, $40
4514   1FAD B0            cmp a, b
4515   1FAE FD 71         seq ; ==
4516   1FB0 E4            pop a
4517   1FB1             ; END RELATIONAL
4518   1FB1 C0 00 00      cmp b, 0
4519   1FB4 C6 C7 1F      je _if62_exit
4520   1FB7             _if62_true:
4521   1FB7             ;; count++; 
4522   1FB7 FA FF FF      lea d, [bp + -1] ; $count
4523   1FBA 2A            mov b, [d]
4524   1FBB D8            push b
4525   1FBC FD 77         inc b
4526   1FBE FA FF FF      lea d, [bp + -1] ; $count
4527   1FC1 FD 43         mov [d], b
4528   1FC3 E5            pop b
4529   1FC4 0A C7 1F      jmp _if62_exit
4530   1FC7             _if62_exit:
4531   1FC7             ;; return count; 
4532   1FC7 FA FF FF      lea d, [bp + -1] ; $count
4533   1FCA 2A            mov b, [d]
4534   1FCB F9            leave
4535   1FCC 09            ret
4536   1FCD             ; --- END TEXT BLOCK
4537   1FCD             
4538   1FCD             ; --- BEGIN DATA BLOCK
4539   1FCD 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4539   1FD1 45 46 47 48 
4539   1FD5 49 4A 4B 4C 
4539   1FD9 4D 4E 4F 50 
4539   1FDD 51 52 53 54 
4539   1FE1 55 56 57 58 
4539   1FE5 59 5A 61 62 
4539   1FE9 63 64 65 66 
4539   1FED 67 68 69 6A 
4539   1FF1 6B 6C 6D 6E 
4539   1FF5 6F 70 71 72 
4539   1FF9 73 74 75 76 
4539   1FFD 77 78 79 7A 
4539   2001 30 31 32 33 
4539   2005 34 35 36 37 
4539   2009 38 39 2B 2F 
4539   200D 00 
4540   200E CD 1F       _base64_table: .dw _base64_table_data
4541   2010 00 00 00 00 _currState_data: .fill 2500, 0
4541   2014 00 00 00 00 
4541   2018 00 00 00 00 
4541   201C 00 00 00 00 
4541   2020 00 00 00 00 
4541   2024 00 00 00 00 
4541   2028 00 00 00 00 
4541   202C 00 00 00 00 
4541   2030 00 00 00 00 
4541   2034 00 00 00 00 
4541   2038 00 00 00 00 
4541   203C 00 00 00 00 
4541   2040 00 00 00 00 
4541   2044 00 00 00 00 
4541   2048 00 00 00 00 
4541   204C 00 00 00 00 
4541   2050 00 00 00 00 
4541   2054 00 00 00 00 
4541   2058 00 00 00 00 
4541   205C 00 00 00 00 
4541   2060 00 00 00 00 
4541   2064 00 00 00 00 
4541   2068 00 00 00 00 
4541   206C 00 00 00 00 
4541   2070 00 00 00 00 
4541   2074 00 00 00 00 
4541   2078 00 00 00 00 
4541   207C 00 00 00 00 
4541   2080 00 00 00 00 
4541   2084 00 00 00 00 
4541   2088 00 00 00 00 
4541   208C 00 00 00 00 
4541   2090 00 00 00 00 
4541   2094 00 00 00 00 
4541   2098 00 00 00 00 
4541   209C 00 00 00 00 
4541   20A0 00 00 00 00 
4541   20A4 00 00 00 00 
4541   20A8 00 00 00 00 
4541   20AC 00 00 00 00 
4541   20B0 00 00 00 00 
4541   20B4 00 00 00 00 
4541   20B8 00 00 00 00 
4541   20BC 00 00 00 00 
4541   20C0 00 00 00 00 
4541   20C4 00 00 00 00 
4541   20C8 00 00 00 00 
4541   20CC 00 00 00 00 
4541   20D0 00 00 00 00 
4541   20D4 00 00 00 00 
4541   20D8 00 00 00 00 
4541   20DC 00 00 00 00 
4541   20E0 00 00 00 00 
4541   20E4 00 00 00 00 
4541   20E8 00 00 00 00 
4541   20EC 00 00 00 00 
4541   20F0 00 00 00 00 
4541   20F4 00 00 00 00 
4541   20F8 00 00 00 00 
4541   20FC 00 00 00 00 
4541   2100 00 00 00 00 
4541   2104 00 00 00 00 
4541   2108 00 00 00 00 
4541   210C 00 00 00 00 
4541   2110 00 00 00 00 
4541   2114 00 00 00 00 
4541   2118 00 00 00 00 
4541   211C 00 00 00 00 
4541   2120 00 00 00 00 
4541   2124 00 00 00 00 
4541   2128 00 00 00 00 
4541   212C 00 00 00 00 
4541   2130 00 00 00 00 
4541   2134 00 00 00 00 
4541   2138 00 00 00 00 
4541   213C 00 00 00 00 
4541   2140 00 00 00 00 
4541   2144 00 00 00 00 
4541   2148 00 00 00 00 
4541   214C 00 00 00 00 
4541   2150 00 00 00 00 
4541   2154 00 00 00 00 
4541   2158 00 00 00 00 
4541   215C 00 00 00 00 
4541   2160 00 00 00 00 
4541   2164 00 00 00 00 
4541   2168 00 00 00 00 
4541   216C 00 00 00 00 
4541   2170 00 00 00 00 
4541   2174 00 00 00 00 
4541   2178 00 00 00 00 
4541   217C 00 00 00 00 
4541   2180 00 00 00 00 
4541   2184 00 00 00 00 
4541   2188 00 00 00 00 
4541   218C 00 00 00 00 
4541   2190 00 00 00 00 
4541   2194 00 00 00 00 
4541   2198 00 00 00 00 
4541   219C 00 00 00 00 
4541   21A0 00 00 00 00 
4541   21A4 00 00 00 00 
4541   21A8 00 00 00 00 
4541   21AC 00 00 00 00 
4541   21B0 00 00 00 00 
4541   21B4 00 00 00 00 
4541   21B8 00 00 00 00 
4541   21BC 00 00 00 00 
4541   21C0 00 00 00 00 
4541   21C4 00 00 00 00 
4541   21C8 00 00 00 00 
4541   21CC 00 00 00 00 
4541   21D0 00 00 00 00 
4541   21D4 00 00 00 00 
4541   21D8 00 00 00 00 
4541   21DC 00 00 00 00 
4541   21E0 00 00 00 00 
4541   21E4 00 00 00 00 
4541   21E8 00 00 00 00 
4541   21EC 00 00 00 00 
4541   21F0 00 00 00 00 
4541   21F4 00 00 00 00 
4541   21F8 00 00 00 00 
4541   21FC 00 00 00 00 
4541   2200 00 00 00 00 
4541   2204 00 00 00 00 
4541   2208 00 00 00 00 
4541   220C 00 00 00 00 
4541   2210 00 00 00 00 
4541   2214 00 00 00 00 
4541   2218 00 00 00 00 
4541   221C 00 00 00 00 
4541   2220 00 00 00 00 
4541   2224 00 00 00 00 
4541   2228 00 00 00 00 
4541   222C 00 00 00 00 
4541   2230 00 00 00 00 
4541   2234 00 00 00 00 
4541   2238 00 00 00 00 
4541   223C 00 00 00 00 
4541   2240 00 00 00 00 
4541   2244 00 00 00 00 
4541   2248 00 00 00 00 
4541   224C 00 00 00 00 
4541   2250 00 00 00 00 
4541   2254 00 00 00 00 
4541   2258 00 00 00 00 
4541   225C 00 00 00 00 
4541   2260 00 00 00 00 
4541   2264 00 00 00 00 
4541   2268 00 00 00 00 
4541   226C 00 00 00 00 
4541   2270 00 00 00 00 
4541   2274 00 00 00 00 
4541   2278 00 00 00 00 
4541   227C 00 00 00 00 
4541   2280 00 00 00 00 
4541   2284 00 00 00 00 
4541   2288 00 00 00 00 
4541   228C 00 00 00 00 
4541   2290 00 00 00 00 
4541   2294 00 00 00 00 
4541   2298 00 00 00 00 
4541   229C 00 00 00 00 
4541   22A0 00 00 00 00 
4541   22A4 00 00 00 00 
4541   22A8 00 00 00 00 
4541   22AC 00 00 00 00 
4541   22B0 00 00 00 00 
4541   22B4 00 00 00 00 
4541   22B8 00 00 00 00 
4541   22BC 00 00 00 00 
4541   22C0 00 00 00 00 
4541   22C4 00 00 00 00 
4541   22C8 00 00 00 00 
4541   22CC 00 00 00 00 
4541   22D0 00 00 00 00 
4541   22D4 00 00 00 00 
4541   22D8 00 00 00 00 
4541   22DC 00 00 00 00 
4541   22E0 00 00 00 00 
4541   22E4 00 00 00 00 
4541   22E8 00 00 00 00 
4541   22EC 00 00 00 00 
4541   22F0 00 00 00 00 
4541   22F4 00 00 00 00 
4541   22F8 00 00 00 00 
4541   22FC 00 00 00 00 
4541   2300 00 00 00 00 
4541   2304 00 00 00 00 
4541   2308 00 00 00 00 
4541   230C 00 00 00 00 
4541   2310 00 00 00 00 
4541   2314 00 00 00 00 
4541   2318 00 00 00 00 
4541   231C 00 00 00 00 
4541   2320 00 00 00 00 
4541   2324 00 00 00 00 
4541   2328 00 00 00 00 
4541   232C 00 00 00 00 
4541   2330 00 00 00 00 
4541   2334 00 00 00 00 
4541   2338 00 00 00 00 
4541   233C 00 00 00 00 
4541   2340 00 00 00 00 
4541   2344 00 00 00 00 
4541   2348 00 00 00 00 
4541   234C 00 00 00 00 
4541   2350 00 00 00 00 
4541   2354 00 00 00 00 
4541   2358 00 00 00 00 
4541   235C 00 00 00 00 
4541   2360 00 00 00 00 
4541   2364 00 00 00 00 
4541   2368 00 00 00 00 
4541   236C 00 00 00 00 
4541   2370 00 00 00 00 
4541   2374 00 00 00 00 
4541   2378 00 00 00 00 
4541   237C 00 00 00 00 
4541   2380 00 00 00 00 
4541   2384 00 00 00 00 
4541   2388 00 00 00 00 
4541   238C 00 00 00 00 
4541   2390 00 00 00 00 
4541   2394 00 00 00 00 
4541   2398 00 00 00 00 
4541   239C 00 00 00 00 
4541   23A0 00 00 00 00 
4541   23A4 00 00 00 00 
4541   23A8 00 00 00 00 
4541   23AC 00 00 00 00 
4541   23B0 00 00 00 00 
4541   23B4 00 00 00 00 
4541   23B8 00 00 00 00 
4541   23BC 00 00 00 00 
4541   23C0 00 00 00 00 
4541   23C4 00 00 00 00 
4541   23C8 00 00 00 00 
4541   23CC 00 00 00 00 
4541   23D0 00 00 00 00 
4541   23D4 00 00 00 00 
4541   23D8 00 00 00 00 
4541   23DC 00 00 00 00 
4541   23E0 00 00 00 00 
4541   23E4 00 00 00 00 
4541   23E8 00 00 00 00 
4541   23EC 00 00 00 00 
4541   23F0 00 00 00 00 
4541   23F4 00 00 00 00 
4541   23F8 00 00 00 00 
4541   23FC 00 00 00 00 
4541   2400 00 00 00 00 
4541   2404 00 00 00 00 
4541   2408 00 00 00 00 
4541   240C 00 00 00 00 
4541   2410 00 00 00 00 
4541   2414 00 00 00 00 
4541   2418 00 00 00 00 
4541   241C 00 00 00 00 
4541   2420 00 00 00 00 
4541   2424 00 00 00 00 
4541   2428 00 00 00 00 
4541   242C 00 00 00 00 
4541   2430 00 00 00 00 
4541   2434 00 00 00 00 
4541   2438 00 00 00 00 
4541   243C 00 00 00 00 
4541   2440 00 00 00 00 
4541   2444 00 00 00 00 
4541   2448 00 00 00 00 
4541   244C 00 00 00 00 
4541   2450 00 00 00 00 
4541   2454 00 00 00 00 
4541   2458 00 00 00 00 
4541   245C 00 00 00 00 
4541   2460 00 00 00 00 
4541   2464 00 00 00 00 
4541   2468 00 00 00 00 
4541   246C 00 00 00 00 
4541   2470 00 00 00 00 
4541   2474 00 00 00 00 
4541   2478 00 00 00 00 
4541   247C 00 00 00 00 
4541   2480 00 00 00 00 
4541   2484 00 00 00 00 
4541   2488 00 00 00 00 
4541   248C 00 00 00 00 
4541   2490 00 00 00 00 
4541   2494 00 00 00 00 
4541   2498 00 00 00 00 
4541   249C 00 00 00 00 
4541   24A0 00 00 00 00 
4541   24A4 00 00 00 00 
4541   24A8 00 00 00 00 
4541   24AC 00 00 00 00 
4541   24B0 00 00 00 00 
4541   24B4 00 00 00 00 
4541   24B8 00 00 00 00 
4541   24BC 00 00 00 00 
4541   24C0 00 00 00 00 
4541   24C4 00 00 00 00 
4541   24C8 00 00 00 00 
4541   24CC 00 00 00 00 
4541   24D0 00 00 00 00 
4541   24D4 00 00 00 00 
4541   24D8 00 00 00 00 
4541   24DC 00 00 00 00 
4541   24E0 00 00 00 00 
4541   24E4 00 00 00 00 
4541   24E8 00 00 00 00 
4541   24EC 00 00 00 00 
4541   24F0 00 00 00 00 
4541   24F4 00 00 00 00 
4541   24F8 00 00 00 00 
4541   24FC 00 00 00 00 
4541   2500 00 00 00 00 
4541   2504 00 00 00 00 
4541   2508 00 00 00 00 
4541   250C 00 00 00 00 
4541   2510 00 00 00 00 
4541   2514 00 00 00 00 
4541   2518 00 00 00 00 
4541   251C 00 00 00 00 
4541   2520 00 00 00 00 
4541   2524 00 00 00 00 
4541   2528 00 00 00 00 
4541   252C 00 00 00 00 
4541   2530 00 00 00 00 
4541   2534 00 00 00 00 
4541   2538 00 00 00 00 
4541   253C 00 00 00 00 
4541   2540 00 00 00 00 
4541   2544 00 00 00 00 
4541   2548 00 00 00 00 
4541   254C 00 00 00 00 
4541   2550 00 00 00 00 
4541   2554 00 00 00 00 
4541   2558 00 00 00 00 
4541   255C 00 00 00 00 
4541   2560 00 00 00 00 
4541   2564 00 00 00 00 
4541   2568 00 00 00 00 
4541   256C 00 00 00 00 
4541   2570 00 00 00 00 
4541   2574 00 00 00 00 
4541   2578 00 00 00 00 
4541   257C 00 00 00 00 
4541   2580 00 00 00 00 
4541   2584 00 00 00 00 
4541   2588 00 00 00 00 
4541   258C 00 00 00 00 
4541   2590 00 00 00 00 
4541   2594 00 00 00 00 
4541   2598 00 00 00 00 
4541   259C 00 00 00 00 
4541   25A0 00 00 00 00 
4541   25A4 00 00 00 00 
4541   25A8 00 00 00 00 
4541   25AC 00 00 00 00 
4541   25B0 00 00 00 00 
4541   25B4 00 00 00 00 
4541   25B8 00 00 00 00 
4541   25BC 00 00 00 00 
4541   25C0 00 00 00 00 
4541   25C4 00 00 00 00 
4541   25C8 00 00 00 00 
4541   25CC 00 00 00 00 
4541   25D0 00 00 00 00 
4541   25D4 00 00 00 00 
4541   25D8 00 00 00 00 
4541   25DC 00 00 00 00 
4541   25E0 00 00 00 00 
4541   25E4 00 00 00 00 
4541   25E8 00 00 00 00 
4541   25EC 00 00 00 00 
4541   25F0 00 00 00 00 
4541   25F4 00 00 00 00 
4541   25F8 00 00 00 00 
4541   25FC 00 00 00 00 
4541   2600 00 00 00 00 
4541   2604 00 00 00 00 
4541   2608 00 00 00 00 
4541   260C 00 00 00 00 
4541   2610 00 00 00 00 
4541   2614 00 00 00 00 
4541   2618 00 00 00 00 
4541   261C 00 00 00 00 
4541   2620 00 00 00 00 
4541   2624 00 00 00 00 
4541   2628 00 00 00 00 
4541   262C 00 00 00 00 
4541   2630 00 00 00 00 
4541   2634 00 00 00 00 
4541   2638 00 00 00 00 
4541   263C 00 00 00 00 
4541   2640 00 00 00 00 
4541   2644 00 00 00 00 
4541   2648 00 00 00 00 
4541   264C 00 00 00 00 
4541   2650 00 00 00 00 
4541   2654 00 00 00 00 
4541   2658 00 00 00 00 
4541   265C 00 00 00 00 
4541   2660 00 00 00 00 
4541   2664 00 00 00 00 
4541   2668 00 00 00 00 
4541   266C 00 00 00 00 
4541   2670 00 00 00 00 
4541   2674 00 00 00 00 
4541   2678 00 00 00 00 
4541   267C 00 00 00 00 
4541   2680 00 00 00 00 
4541   2684 00 00 00 00 
4541   2688 00 00 00 00 
4541   268C 00 00 00 00 
4541   2690 00 00 00 00 
4541   2694 00 00 00 00 
4541   2698 00 00 00 00 
4541   269C 00 00 00 00 
4541   26A0 00 00 00 00 
4541   26A4 00 00 00 00 
4541   26A8 00 00 00 00 
4541   26AC 00 00 00 00 
4541   26B0 00 00 00 00 
4541   26B4 00 00 00 00 
4541   26B8 00 00 00 00 
4541   26BC 00 00 00 00 
4541   26C0 00 00 00 00 
4541   26C4 00 00 00 00 
4541   26C8 00 00 00 00 
4541   26CC 00 00 00 00 
4541   26D0 00 00 00 00 
4541   26D4 00 00 00 00 
4541   26D8 00 00 00 00 
4541   26DC 00 00 00 00 
4541   26E0 00 00 00 00 
4541   26E4 00 00 00 00 
4541   26E8 00 00 00 00 
4541   26EC 00 00 00 00 
4541   26F0 00 00 00 00 
4541   26F4 00 00 00 00 
4541   26F8 00 00 00 00 
4541   26FC 00 00 00 00 
4541   2700 00 00 00 00 
4541   2704 00 00 00 00 
4541   2708 00 00 00 00 
4541   270C 00 00 00 00 
4541   2710 00 00 00 00 
4541   2714 00 00 00 00 
4541   2718 00 00 00 00 
4541   271C 00 00 00 00 
4541   2720 00 00 00 00 
4541   2724 00 00 00 00 
4541   2728 00 00 00 00 
4541   272C 00 00 00 00 
4541   2730 00 00 00 00 
4541   2734 00 00 00 00 
4541   2738 00 00 00 00 
4541   273C 00 00 00 00 
4541   2740 00 00 00 00 
4541   2744 00 00 00 00 
4541   2748 00 00 00 00 
4541   274C 00 00 00 00 
4541   2750 00 00 00 00 
4541   2754 00 00 00 00 
4541   2758 00 00 00 00 
4541   275C 00 00 00 00 
4541   2760 00 00 00 00 
4541   2764 00 00 00 00 
4541   2768 00 00 00 00 
4541   276C 00 00 00 00 
4541   2770 00 00 00 00 
4541   2774 00 00 00 00 
4541   2778 00 00 00 00 
4541   277C 00 00 00 00 
4541   2780 00 00 00 00 
4541   2784 00 00 00 00 
4541   2788 00 00 00 00 
4541   278C 00 00 00 00 
4541   2790 00 00 00 00 
4541   2794 00 00 00 00 
4541   2798 00 00 00 00 
4541   279C 00 00 00 00 
4541   27A0 00 00 00 00 
4541   27A4 00 00 00 00 
4541   27A8 00 00 00 00 
4541   27AC 00 00 00 00 
4541   27B0 00 00 00 00 
4541   27B4 00 00 00 00 
4541   27B8 00 00 00 00 
4541   27BC 00 00 00 00 
4541   27C0 00 00 00 00 
4541   27C4 00 00 00 00 
4541   27C8 00 00 00 00 
4541   27CC 00 00 00 00 
4541   27D0 00 00 00 00 
4541   27D4 00 00 00 00 
4541   27D8 00 00 00 00 
4541   27DC 00 00 00 00 
4541   27E0 00 00 00 00 
4541   27E4 00 00 00 00 
4541   27E8 00 00 00 00 
4541   27EC 00 00 00 00 
4541   27F0 00 00 00 00 
4541   27F4 00 00 00 00 
4541   27F8 00 00 00 00 
4541   27FC 00 00 00 00 
4541   2800 00 00 00 00 
4541   2804 00 00 00 00 
4541   2808 00 00 00 00 
4541   280C 00 00 00 00 
4541   2810 00 00 00 00 
4541   2814 00 00 00 00 
4541   2818 00 00 00 00 
4541   281C 00 00 00 00 
4541   2820 00 00 00 00 
4541   2824 00 00 00 00 
4541   2828 00 00 00 00 
4541   282C 00 00 00 00 
4541   2830 00 00 00 00 
4541   2834 00 00 00 00 
4541   2838 00 00 00 00 
4541   283C 00 00 00 00 
4541   2840 00 00 00 00 
4541   2844 00 00 00 00 
4541   2848 00 00 00 00 
4541   284C 00 00 00 00 
4541   2850 00 00 00 00 
4541   2854 00 00 00 00 
4541   2858 00 00 00 00 
4541   285C 00 00 00 00 
4541   2860 00 00 00 00 
4541   2864 00 00 00 00 
4541   2868 00 00 00 00 
4541   286C 00 00 00 00 
4541   2870 00 00 00 00 
4541   2874 00 00 00 00 
4541   2878 00 00 00 00 
4541   287C 00 00 00 00 
4541   2880 00 00 00 00 
4541   2884 00 00 00 00 
4541   2888 00 00 00 00 
4541   288C 00 00 00 00 
4541   2890 00 00 00 00 
4541   2894 00 00 00 00 
4541   2898 00 00 00 00 
4541   289C 00 00 00 00 
4541   28A0 00 00 00 00 
4541   28A4 00 00 00 00 
4541   28A8 00 00 00 00 
4541   28AC 00 00 00 00 
4541   28B0 00 00 00 00 
4541   28B4 00 00 00 00 
4541   28B8 00 00 00 00 
4541   28BC 00 00 00 00 
4541   28C0 00 00 00 00 
4541   28C4 00 00 00 00 
4541   28C8 00 00 00 00 
4541   28CC 00 00 00 00 
4541   28D0 00 00 00 00 
4541   28D4 00 00 00 00 
4541   28D8 00 00 00 00 
4541   28DC 00 00 00 00 
4541   28E0 00 00 00 00 
4541   28E4 00 00 00 00 
4541   28E8 00 00 00 00 
4541   28EC 00 00 00 00 
4541   28F0 00 00 00 00 
4541   28F4 00 00 00 00 
4541   28F8 00 00 00 00 
4541   28FC 00 00 00 00 
4541   2900 00 00 00 00 
4541   2904 00 00 00 00 
4541   2908 00 00 00 00 
4541   290C 00 00 00 00 
4541   2910 00 00 00 00 
4541   2914 00 00 00 00 
4541   2918 00 00 00 00 
4541   291C 00 00 00 00 
4541   2920 00 00 00 00 
4541   2924 00 00 00 00 
4541   2928 00 00 00 00 
4541   292C 00 00 00 00 
4541   2930 00 00 00 00 
4541   2934 00 00 00 00 
4541   2938 00 00 00 00 
4541   293C 00 00 00 00 
4541   2940 00 00 00 00 
4541   2944 00 00 00 00 
4541   2948 00 00 00 00 
4541   294C 00 00 00 00 
4541   2950 00 00 00 00 
4541   2954 00 00 00 00 
4541   2958 00 00 00 00 
4541   295C 00 00 00 00 
4541   2960 00 00 00 00 
4541   2964 00 00 00 00 
4541   2968 00 00 00 00 
4541   296C 00 00 00 00 
4541   2970 00 00 00 00 
4541   2974 00 00 00 00 
4541   2978 00 00 00 00 
4541   297C 00 00 00 00 
4541   2980 00 00 00 00 
4541   2984 00 00 00 00 
4541   2988 00 00 00 00 
4541   298C 00 00 00 00 
4541   2990 00 00 00 00 
4541   2994 00 00 00 00 
4541   2998 00 00 00 00 
4541   299C 00 00 00 00 
4541   29A0 00 00 00 00 
4541   29A4 00 00 00 00 
4541   29A8 00 00 00 00 
4541   29AC 00 00 00 00 
4541   29B0 00 00 00 00 
4541   29B4 00 00 00 00 
4541   29B8 00 00 00 00 
4541   29BC 00 00 00 00 
4541   29C0 00 00 00 00 
4541   29C4 00 00 00 00 
4541   29C8 00 00 00 00 
4541   29CC 00 00 00 00 
4541   29D0 00 00 00 00 
4542   29D4 25 64 0A 00 __s0: .db "%d\n", 0
4543   29D8 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
4543   29DC 70 65 63 74 
4543   29E0 65 64 20 66 
4543   29E4 6F 72 6D 61 
4543   29E8 74 20 69 6E 
4543   29EC 20 70 72 69 
4543   29F0 6E 74 66 2E 
4543   29F4 00 
4544   29F5 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
4544   29F9 72 3A 20 55 
4544   29FD 6E 6B 6E 6F 
4544   2A01 77 6E 20 61 
4544   2A05 72 67 75 6D 
4544   2A09 65 6E 74 20 
4544   2A0D 74 79 70 65 
4544   2A11 2E 0A 00 
4545   2A14 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
4545   2A18 1B 5B 48 00 
4546   2A1C             
4547   2A1C 1E 2A       _heap_top: .dw _heap
4548   2A1E 00          _heap: .db 0
4549   2A1F             ; --- END DATA BLOCK
4550   2A1F             
4551   2A1F             .end
tasm: Number of errors = 0
