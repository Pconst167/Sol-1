0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i=0;i<50;i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 32 00      mov b, $32
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; <= (signed)
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 75 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j=0;j<50;j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 32 00      mov b, $32
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; <= (signed)
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 65 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; printf("%d\n", n); 
0057   0445 FA FB FF      lea d, [bp + -5] ; $n
0058   0448 2A            mov b, [d]
0059   0449 FD AB         swp b
0060   044B D8            push b
0061   044C 26 BC 29      mov b, __s0 ; "%d\n"
0062   044F FD AB         swp b
0063   0451 D8            push b
0064   0452 07 19 11      call printf
0065   0455             _for2_update:
0066   0455 FA FD FF      lea d, [bp + -3] ; $j
0067   0458 2A            mov b, [d]
0068   0459 D8            push b
0069   045A FD 77         inc b
0070   045C FA FD FF      lea d, [bp + -3] ; $j
0071   045F FD 43         mov [d], b
0072   0461 E5            pop b
0073   0462 0A 32 04      jmp _for2_cond
0074   0465             _for2_exit:
0075   0465             _for1_update:
0076   0465 FA FF FF      lea d, [bp + -1] ; $i
0077   0468 2A            mov b, [d]
0078   0469 D8            push b
0079   046A FD 77         inc b
0080   046C FA FF FF      lea d, [bp + -1] ; $i
0081   046F FD 43         mov [d], b
0082   0471 E5            pop b
0083   0472 0A 15 04      jmp _for1_cond
0084   0475             _for1_exit:
0085   0475 05 0B         syscall sys_terminate_proc
0086   0477             
0087   0477             strcpy:
0088   0477 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0089   047A             ; $psrc 
0090   047A             ; $pdest 
0091   047A 52 04 00      sub sp, 4
0092   047D             ;; psrc = src; 
0093   047D FA FF FF      lea d, [bp + -1] ; $psrc
0094   0480 DA            push d
0095   0481 FA 07 00      lea d, [bp + 7] ; $src
0096   0484 2A            mov b, [d]
0097   0485 E7            pop d
0098   0486 FD 43         mov [d], b
0099   0488             ;; pdest = dest; 
0100   0488 FA FD FF      lea d, [bp + -3] ; $pdest
0101   048B DA            push d
0102   048C FA 05 00      lea d, [bp + 5] ; $dest
0103   048F 2A            mov b, [d]
0104   0490 E7            pop d
0105   0491 FD 43         mov [d], b
0106   0493             ;; while(*psrc) *pdest++ = *psrc++; 
0107   0493             _while3_cond:
0108   0493 FA FF FF      lea d, [bp + -1] ; $psrc
0109   0496 2A            mov b, [d]
0110   0497 74            mov d, b
0111   0498 32            mov bl, [d]
0112   0499 A7 00         mov bh, 0
0113   049B C0 00 00      cmp b, 0
0114   049E C6 C6 04      je _while3_exit
0115   04A1             _while3_block:
0116   04A1             ;; *pdest++ = *psrc++; 
0117   04A1 FA FD FF      lea d, [bp + -3] ; $pdest
0118   04A4 2A            mov b, [d]
0119   04A5 D8            push b
0120   04A6 FD 77         inc b
0121   04A8 FA FD FF      lea d, [bp + -3] ; $pdest
0122   04AB FD 43         mov [d], b
0123   04AD E5            pop b
0124   04AE D8            push b
0125   04AF FA FF FF      lea d, [bp + -1] ; $psrc
0126   04B2 2A            mov b, [d]
0127   04B3 D8            push b
0128   04B4 FD 77         inc b
0129   04B6 FA FF FF      lea d, [bp + -1] ; $psrc
0130   04B9 FD 43         mov [d], b
0131   04BB E5            pop b
0132   04BC 74            mov d, b
0133   04BD 32            mov bl, [d]
0134   04BE A7 00         mov bh, 0
0135   04C0 E7            pop d
0136   04C1 FD 3E         mov [d], bl
0137   04C3 0A 93 04      jmp _while3_cond
0138   04C6             _while3_exit:
0139   04C6             ;; *pdest = '\0'; 
0140   04C6 FA FD FF      lea d, [bp + -3] ; $pdest
0141   04C9 2A            mov b, [d]
0142   04CA D8            push b
0143   04CB 26 00 00      mov b, $0
0144   04CE E7            pop d
0145   04CF FD 3E         mov [d], bl
0146   04D1 F9            leave
0147   04D2 09            ret
0148   04D3             
0149   04D3             strcmp:
0150   04D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0151   04D6             ;; while (*s1 && (*s1 == *s2)) { 
0152   04D6             _while4_cond:
0153   04D6 FA 05 00      lea d, [bp + 5] ; $s1
0154   04D9 2A            mov b, [d]
0155   04DA 74            mov d, b
0156   04DB 32            mov bl, [d]
0157   04DC A7 00         mov bh, 0
0158   04DE D7            push a
0159   04DF 11            mov a, b
0160   04E0 FA 05 00      lea d, [bp + 5] ; $s1
0161   04E3 2A            mov b, [d]
0162   04E4 74            mov d, b
0163   04E5 32            mov bl, [d]
0164   04E6 A7 00         mov bh, 0
0165   04E8             ; START RELATIONAL
0166   04E8 D7            push a
0167   04E9 11            mov a, b
0168   04EA FA 07 00      lea d, [bp + 7] ; $s2
0169   04ED 2A            mov b, [d]
0170   04EE 74            mov d, b
0171   04EF 32            mov bl, [d]
0172   04F0 A7 00         mov bh, 0
0173   04F2 B0            cmp a, b
0174   04F3 FD 71         seq ; ==
0175   04F5 E4            pop a
0176   04F6             ; END RELATIONAL
0177   04F6 FD A7         sand a, b ; &&
0178   04F8 E4            pop a
0179   04F9 C0 00 00      cmp b, 0
0180   04FC C6 1C 05      je _while4_exit
0181   04FF             _while4_block:
0182   04FF             ;; s1++; 
0183   04FF FA 05 00      lea d, [bp + 5] ; $s1
0184   0502 2A            mov b, [d]
0185   0503 D8            push b
0186   0504 FD 77         inc b
0187   0506 FA 05 00      lea d, [bp + 5] ; $s1
0188   0509 FD 43         mov [d], b
0189   050B E5            pop b
0190   050C             ;; s2++; 
0191   050C FA 07 00      lea d, [bp + 7] ; $s2
0192   050F 2A            mov b, [d]
0193   0510 D8            push b
0194   0511 FD 77         inc b
0195   0513 FA 07 00      lea d, [bp + 7] ; $s2
0196   0516 FD 43         mov [d], b
0197   0518 E5            pop b
0198   0519 0A D6 04      jmp _while4_cond
0199   051C             _while4_exit:
0200   051C             ;; return *s1 - *s2; 
0201   051C FA 05 00      lea d, [bp + 5] ; $s1
0202   051F 2A            mov b, [d]
0203   0520 74            mov d, b
0204   0521 32            mov bl, [d]
0205   0522 A7 00         mov bh, 0
0206   0524             ; START TERMS
0207   0524 D7            push a
0208   0525 11            mov a, b
0209   0526 FA 07 00      lea d, [bp + 7] ; $s2
0210   0529 2A            mov b, [d]
0211   052A 74            mov d, b
0212   052B 32            mov bl, [d]
0213   052C A7 00         mov bh, 0
0214   052E 60            sub a, b
0215   052F 27            mov b, a
0216   0530 E4            pop a
0217   0531             ; END TERMS
0218   0531 F9            leave
0219   0532 09            ret
0220   0533             
0221   0533             strcat:
0222   0533 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0223   0536             ; $dest_len 
0224   0536             ; $i 
0225   0536 52 04 00      sub sp, 4
0226   0539             ;; dest_len = strlen(dest); 
0227   0539 FA FF FF      lea d, [bp + -1] ; $dest_len
0228   053C DA            push d
0229   053D FA 05 00      lea d, [bp + 5] ; $dest
0230   0540 2A            mov b, [d]
0231   0541 FD AB         swp b
0232   0543 D8            push b
0233   0544 07 E6 05      call strlen
0234   0547 51 02 00      add sp, 2
0235   054A E7            pop d
0236   054B FD 43         mov [d], b
0237   054D             ;; for (i = 0; src[i] != 0; i=i+1) { 
0238   054D             _for5_init:
0239   054D FA FD FF      lea d, [bp + -3] ; $i
0240   0550 DA            push d
0241   0551 26 00 00      mov b, $0
0242   0554 E7            pop d
0243   0555 FD 43         mov [d], b
0244   0557             _for5_cond:
0245   0557 FA 07 00      lea d, [bp + 7] ; $src
0246   055A FD 2A         mov d, [d]
0247   055C D7            push a
0248   055D DA            push d
0249   055E FA FD FF      lea d, [bp + -3] ; $i
0250   0561 2A            mov b, [d]
0251   0562 E7            pop d
0252   0563 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0253   0567 E4            pop a
0254   0568 32            mov bl, [d]
0255   0569 A7 00         mov bh, 0
0256   056B             ; START RELATIONAL
0257   056B D7            push a
0258   056C 11            mov a, b
0259   056D 26 00 00      mov b, $0
0260   0570 B0            cmp a, b
0261   0571 FD 72         sneq ; !=
0262   0573 E4            pop a
0263   0574             ; END RELATIONAL
0264   0574 C0 00 00      cmp b, 0
0265   0577 C6 C0 05      je _for5_exit
0266   057A             _for5_block:
0267   057A             ;; dest[dest_len + i] = src[i]; 
0268   057A FA 05 00      lea d, [bp + 5] ; $dest
0269   057D FD 2A         mov d, [d]
0270   057F D7            push a
0271   0580 DA            push d
0272   0581 FA FF FF      lea d, [bp + -1] ; $dest_len
0273   0584 2A            mov b, [d]
0274   0585             ; START TERMS
0275   0585 D7            push a
0276   0586 11            mov a, b
0277   0587 FA FD FF      lea d, [bp + -3] ; $i
0278   058A 2A            mov b, [d]
0279   058B 56            add b, a
0280   058C E4            pop a
0281   058D             ; END TERMS
0282   058D E7            pop d
0283   058E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0284   0592 E4            pop a
0285   0593 DA            push d
0286   0594 FA 07 00      lea d, [bp + 7] ; $src
0287   0597 FD 2A         mov d, [d]
0288   0599 D7            push a
0289   059A DA            push d
0290   059B FA FD FF      lea d, [bp + -3] ; $i
0291   059E 2A            mov b, [d]
0292   059F E7            pop d
0293   05A0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0294   05A4 E4            pop a
0295   05A5 32            mov bl, [d]
0296   05A6 A7 00         mov bh, 0
0297   05A8 E7            pop d
0298   05A9 FD 3E         mov [d], bl
0299   05AB             _for5_update:
0300   05AB FA FD FF      lea d, [bp + -3] ; $i
0301   05AE DA            push d
0302   05AF FA FD FF      lea d, [bp + -3] ; $i
0303   05B2 2A            mov b, [d]
0304   05B3             ; START TERMS
0305   05B3 D7            push a
0306   05B4 11            mov a, b
0307   05B5 26 01 00      mov b, $1
0308   05B8 56            add b, a
0309   05B9 E4            pop a
0310   05BA             ; END TERMS
0311   05BA E7            pop d
0312   05BB FD 43         mov [d], b
0313   05BD 0A 57 05      jmp _for5_cond
0314   05C0             _for5_exit:
0315   05C0             ;; dest[dest_len + i] = 0; 
0316   05C0 FA 05 00      lea d, [bp + 5] ; $dest
0317   05C3 FD 2A         mov d, [d]
0318   05C5 D7            push a
0319   05C6 DA            push d
0320   05C7 FA FF FF      lea d, [bp + -1] ; $dest_len
0321   05CA 2A            mov b, [d]
0322   05CB             ; START TERMS
0323   05CB D7            push a
0324   05CC 11            mov a, b
0325   05CD FA FD FF      lea d, [bp + -3] ; $i
0326   05D0 2A            mov b, [d]
0327   05D1 56            add b, a
0328   05D2 E4            pop a
0329   05D3             ; END TERMS
0330   05D3 E7            pop d
0331   05D4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0332   05D8 E4            pop a
0333   05D9 DA            push d
0334   05DA 26 00 00      mov b, $0
0335   05DD E7            pop d
0336   05DE FD 3E         mov [d], bl
0337   05E0             ;; return dest; 
0338   05E0 FA 05 00      lea d, [bp + 5] ; $dest
0339   05E3 2A            mov b, [d]
0340   05E4 F9            leave
0341   05E5 09            ret
0342   05E6             
0343   05E6             strlen:
0344   05E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0345   05E9             ; $length 
0346   05E9 52 02 00      sub sp, 2
0347   05EC             ;; length = 0; 
0348   05EC FA FF FF      lea d, [bp + -1] ; $length
0349   05EF DA            push d
0350   05F0 26 00 00      mov b, $0
0351   05F3 E7            pop d
0352   05F4 FD 43         mov [d], b
0353   05F6             ;; while (str[length] != 0) { 
0354   05F6             _while6_cond:
0355   05F6 FA 05 00      lea d, [bp + 5] ; $str
0356   05F9 FD 2A         mov d, [d]
0357   05FB D7            push a
0358   05FC DA            push d
0359   05FD FA FF FF      lea d, [bp + -1] ; $length
0360   0600 2A            mov b, [d]
0361   0601 E7            pop d
0362   0602 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0363   0606 E4            pop a
0364   0607 32            mov bl, [d]
0365   0608 A7 00         mov bh, 0
0366   060A             ; START RELATIONAL
0367   060A D7            push a
0368   060B 11            mov a, b
0369   060C 26 00 00      mov b, $0
0370   060F B0            cmp a, b
0371   0610 FD 72         sneq ; !=
0372   0612 E4            pop a
0373   0613             ; END RELATIONAL
0374   0613 C0 00 00      cmp b, 0
0375   0616 C6 29 06      je _while6_exit
0376   0619             _while6_block:
0377   0619             ;; length++; 
0378   0619 FA FF FF      lea d, [bp + -1] ; $length
0379   061C 2A            mov b, [d]
0380   061D D8            push b
0381   061E FD 77         inc b
0382   0620 FA FF FF      lea d, [bp + -1] ; $length
0383   0623 FD 43         mov [d], b
0384   0625 E5            pop b
0385   0626 0A F6 05      jmp _while6_cond
0386   0629             _while6_exit:
0387   0629             ;; return length; 
0388   0629 FA FF FF      lea d, [bp + -1] ; $length
0389   062C 2A            mov b, [d]
0390   062D F9            leave
0391   062E 09            ret
0392   062F             
0393   062F             exit:
0394   062F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0395   0632             
0396   0632             ; --- BEGIN INLINE ASM BLOCK
0397   0632 05 0B         syscall sys_terminate_proc
0398   0634             ; --- END INLINE ASM BLOCK
0399   0634             
0400   0634 F9            leave
0401   0635 09            ret
0402   0636             
0403   0636             atoi:
0404   0636 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0405   0639             ; $result 
0406   0639 10 00 00      mov a, $0
0407   063C 45 FF FF      mov [bp + -1], a
0408   063F             ; $sign 
0409   063F 10 01 00      mov a, $1
0410   0642 45 FD FF      mov [bp + -3], a
0411   0645 52 04 00      sub sp, 4
0412   0648             ;; while (*str == ' ') str++; 
0413   0648             _while7_cond:
0414   0648 FA 05 00      lea d, [bp + 5] ; $str
0415   064B 2A            mov b, [d]
0416   064C 74            mov d, b
0417   064D 32            mov bl, [d]
0418   064E A7 00         mov bh, 0
0419   0650             ; START RELATIONAL
0420   0650 D7            push a
0421   0651 11            mov a, b
0422   0652 26 20 00      mov b, $20
0423   0655 B0            cmp a, b
0424   0656 FD 71         seq ; ==
0425   0658 E4            pop a
0426   0659             ; END RELATIONAL
0427   0659 C0 00 00      cmp b, 0
0428   065C C6 6F 06      je _while7_exit
0429   065F             _while7_block:
0430   065F             ;; str++; 
0431   065F FA 05 00      lea d, [bp + 5] ; $str
0432   0662 2A            mov b, [d]
0433   0663 D8            push b
0434   0664 FD 77         inc b
0435   0666 FA 05 00      lea d, [bp + 5] ; $str
0436   0669 FD 43         mov [d], b
0437   066B E5            pop b
0438   066C 0A 48 06      jmp _while7_cond
0439   066F             _while7_exit:
0440   066F             ;; if (*str == '-' || *str == '+') { 
0441   066F             _if8_cond:
0442   066F FA 05 00      lea d, [bp + 5] ; $str
0443   0672 2A            mov b, [d]
0444   0673 74            mov d, b
0445   0674 32            mov bl, [d]
0446   0675 A7 00         mov bh, 0
0447   0677             ; START RELATIONAL
0448   0677 D7            push a
0449   0678 11            mov a, b
0450   0679 26 2D 00      mov b, $2d
0451   067C B0            cmp a, b
0452   067D FD 71         seq ; ==
0453   067F E4            pop a
0454   0680             ; END RELATIONAL
0455   0680 D7            push a
0456   0681 11            mov a, b
0457   0682 FA 05 00      lea d, [bp + 5] ; $str
0458   0685 2A            mov b, [d]
0459   0686 74            mov d, b
0460   0687 32            mov bl, [d]
0461   0688 A7 00         mov bh, 0
0462   068A             ; START RELATIONAL
0463   068A D7            push a
0464   068B 11            mov a, b
0465   068C 26 2B 00      mov b, $2b
0466   068F B0            cmp a, b
0467   0690 FD 71         seq ; ==
0468   0692 E4            pop a
0469   0693             ; END RELATIONAL
0470   0693 FD A8         sor a, b ; ||
0471   0695 E4            pop a
0472   0696 C0 00 00      cmp b, 0
0473   0699 C6 D0 06      je _if8_exit
0474   069C             _if8_true:
0475   069C             ;; if (*str == '-') sign = -1; 
0476   069C             _if9_cond:
0477   069C FA 05 00      lea d, [bp + 5] ; $str
0478   069F 2A            mov b, [d]
0479   06A0 74            mov d, b
0480   06A1 32            mov bl, [d]
0481   06A2 A7 00         mov bh, 0
0482   06A4             ; START RELATIONAL
0483   06A4 D7            push a
0484   06A5 11            mov a, b
0485   06A6 26 2D 00      mov b, $2d
0486   06A9 B0            cmp a, b
0487   06AA FD 71         seq ; ==
0488   06AC E4            pop a
0489   06AD             ; END RELATIONAL
0490   06AD C0 00 00      cmp b, 0
0491   06B0 C6 C0 06      je _if9_exit
0492   06B3             _if9_true:
0493   06B3             ;; sign = -1; 
0494   06B3 FA FD FF      lea d, [bp + -3] ; $sign
0495   06B6 DA            push d
0496   06B7 26 FF FF      mov b, $ffff
0497   06BA E7            pop d
0498   06BB FD 43         mov [d], b
0499   06BD 0A C0 06      jmp _if9_exit
0500   06C0             _if9_exit:
0501   06C0             ;; str++; 
0502   06C0 FA 05 00      lea d, [bp + 5] ; $str
0503   06C3 2A            mov b, [d]
0504   06C4 D8            push b
0505   06C5 FD 77         inc b
0506   06C7 FA 05 00      lea d, [bp + 5] ; $str
0507   06CA FD 43         mov [d], b
0508   06CC E5            pop b
0509   06CD 0A D0 06      jmp _if8_exit
0510   06D0             _if8_exit:
0511   06D0             ;; while (*str >= '0' && *str <= '9') { 
0512   06D0             _while10_cond:
0513   06D0 FA 05 00      lea d, [bp + 5] ; $str
0514   06D3 2A            mov b, [d]
0515   06D4 74            mov d, b
0516   06D5 32            mov bl, [d]
0517   06D6 A7 00         mov bh, 0
0518   06D8             ; START RELATIONAL
0519   06D8 D7            push a
0520   06D9 11            mov a, b
0521   06DA 26 30 00      mov b, $30
0522   06DD B0            cmp a, b
0523   06DE FD 82         sgeu ; >= (unsigned)
0524   06E0 E4            pop a
0525   06E1             ; END RELATIONAL
0526   06E1 D7            push a
0527   06E2 11            mov a, b
0528   06E3 FA 05 00      lea d, [bp + 5] ; $str
0529   06E6 2A            mov b, [d]
0530   06E7 74            mov d, b
0531   06E8 32            mov bl, [d]
0532   06E9 A7 00         mov bh, 0
0533   06EB             ; START RELATIONAL
0534   06EB D7            push a
0535   06EC 11            mov a, b
0536   06ED 26 39 00      mov b, $39
0537   06F0 B0            cmp a, b
0538   06F1 FD 76         sleu ; <= (unsigned)
0539   06F3 E4            pop a
0540   06F4             ; END RELATIONAL
0541   06F4 FD A7         sand a, b ; &&
0542   06F6 E4            pop a
0543   06F7 C0 00 00      cmp b, 0
0544   06FA C6 35 07      je _while10_exit
0545   06FD             _while10_block:
0546   06FD             ;; result = result * 10 + (*str - '0'); 
0547   06FD FA FF FF      lea d, [bp + -1] ; $result
0548   0700 DA            push d
0549   0701 FA FF FF      lea d, [bp + -1] ; $result
0550   0704 2A            mov b, [d]
0551   0705             ; START FACTORS
0552   0705 D7            push a
0553   0706 11            mov a, b
0554   0707 26 0A 00      mov b, $a
0555   070A AC            mul a, b ; *
0556   070B 11            mov a, b
0557   070C 27            mov b, a
0558   070D E4            pop a
0559   070E             ; END FACTORS
0560   070E             ; START TERMS
0561   070E D7            push a
0562   070F 11            mov a, b
0563   0710 FA 05 00      lea d, [bp + 5] ; $str
0564   0713 2A            mov b, [d]
0565   0714 74            mov d, b
0566   0715 32            mov bl, [d]
0567   0716 A7 00         mov bh, 0
0568   0718             ; START TERMS
0569   0718 D7            push a
0570   0719 11            mov a, b
0571   071A 26 30 00      mov b, $30
0572   071D 60            sub a, b
0573   071E 27            mov b, a
0574   071F E4            pop a
0575   0720             ; END TERMS
0576   0720 56            add b, a
0577   0721 E4            pop a
0578   0722             ; END TERMS
0579   0722 E7            pop d
0580   0723 FD 43         mov [d], b
0581   0725             ;; str++; 
0582   0725 FA 05 00      lea d, [bp + 5] ; $str
0583   0728 2A            mov b, [d]
0584   0729 D8            push b
0585   072A FD 77         inc b
0586   072C FA 05 00      lea d, [bp + 5] ; $str
0587   072F FD 43         mov [d], b
0588   0731 E5            pop b
0589   0732 0A D0 06      jmp _while10_cond
0590   0735             _while10_exit:
0591   0735             ;; return sign * result; 
0592   0735 FA FD FF      lea d, [bp + -3] ; $sign
0593   0738 2A            mov b, [d]
0594   0739             ; START FACTORS
0595   0739 D7            push a
0596   073A 11            mov a, b
0597   073B FA FF FF      lea d, [bp + -1] ; $result
0598   073E 2A            mov b, [d]
0599   073F AC            mul a, b ; *
0600   0740 11            mov a, b
0601   0741 27            mov b, a
0602   0742 E4            pop a
0603   0743             ; END FACTORS
0604   0743 F9            leave
0605   0744 09            ret
0606   0745             
0607   0745             rand:
0608   0745 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0609   0748             ; $sec 
0610   0748 52 02 00      sub sp, 2
0611   074B             
0612   074B             ; --- BEGIN INLINE ASM BLOCK
0613   074B 19 00         mov al, 0
0614   074D 05 01         syscall sys_rtc					
0615   074F 1A            mov al, ah
0616   0750 FA FF FF      lea d, [bp + -1] ; $sec
0617   0753 1E            mov al, [d]
0618   0754 22 00         mov ah, 0
0619   0756             ; --- END INLINE ASM BLOCK
0620   0756             
0621   0756             ;; return sec; 
0622   0756 FA FF FF      lea d, [bp + -1] ; $sec
0623   0759 2A            mov b, [d]
0624   075A F9            leave
0625   075B 09            ret
0626   075C             
0627   075C             srand:
0628   075C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0629   075F F9            leave
0630   0760 09            ret
0631   0761             
0632   0761             malloc:
0633   0761 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0634   0764 F9            leave
0635   0765 09            ret
0636   0766             
0637   0766             calloc:
0638   0766 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0639   0769 F9            leave
0640   076A 09            ret
0641   076B             
0642   076B             realloc:
0643   076B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0644   076E F9            leave
0645   076F 09            ret
0646   0770             
0647   0770             alloc:
0648   0770 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0649   0773             ;; heap_top = heap_top + bytes; 
0650   0773 3B 04 2A      mov d, _heap_top ; $heap_top
0651   0776 DA            push d
0652   0777 3B 04 2A      mov d, _heap_top ; $heap_top
0653   077A 2A            mov b, [d]
0654   077B             ; START TERMS
0655   077B D7            push a
0656   077C 11            mov a, b
0657   077D FA 05 00      lea d, [bp + 5] ; $bytes
0658   0780 2A            mov b, [d]
0659   0781 56            add b, a
0660   0782 E4            pop a
0661   0783             ; END TERMS
0662   0783 E7            pop d
0663   0784 FD 43         mov [d], b
0664   0786             ;; return heap_top - bytes; 
0665   0786 3B 04 2A      mov d, _heap_top ; $heap_top
0666   0789 2A            mov b, [d]
0667   078A             ; START TERMS
0668   078A D7            push a
0669   078B 11            mov a, b
0670   078C FA 05 00      lea d, [bp + 5] ; $bytes
0671   078F 2A            mov b, [d]
0672   0790 60            sub a, b
0673   0791 27            mov b, a
0674   0792 E4            pop a
0675   0793             ; END TERMS
0676   0793 F9            leave
0677   0794 09            ret
0678   0795             
0679   0795             free:
0680   0795 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0681   0798             ;; return heap_top = heap_top - bytes; 
0682   0798 3B 04 2A      mov d, _heap_top ; $heap_top
0683   079B DA            push d
0684   079C 3B 04 2A      mov d, _heap_top ; $heap_top
0685   079F 2A            mov b, [d]
0686   07A0             ; START TERMS
0687   07A0 D7            push a
0688   07A1 11            mov a, b
0689   07A2 FA 05 00      lea d, [bp + 5] ; $bytes
0690   07A5 2A            mov b, [d]
0691   07A6 60            sub a, b
0692   07A7 27            mov b, a
0693   07A8 E4            pop a
0694   07A9             ; END TERMS
0695   07A9 E7            pop d
0696   07AA FD 43         mov [d], b
0697   07AC F9            leave
0698   07AD 09            ret
0699   07AE             
0700   07AE             base64_encode:
0701   07AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0702   07B1             ; $i 
0703   07B1 10 00 00      mov a, $0
0704   07B4 45 FF FF      mov [bp + -1], a
0705   07B7             ; $j 
0706   07B7 10 00 00      mov a, $0
0707   07BA 45 FD FF      mov [bp + -3], a
0708   07BD             ; $k 
0709   07BD             ; $input_len 
0710   07BD             ; $input_buffer 
0711   07BD             ; $output_buffer 
0712   07BD 52 0F 00      sub sp, 15
0713   07C0             ;; input_len = strlen(input); 
0714   07C0 FA F9 FF      lea d, [bp + -7] ; $input_len
0715   07C3 DA            push d
0716   07C4 FA 05 00      lea d, [bp + 5] ; $input
0717   07C7 2A            mov b, [d]
0718   07C8 FD AB         swp b
0719   07CA D8            push b
0720   07CB 07 E6 05      call strlen
0721   07CE 51 02 00      add sp, 2
0722   07D1 E7            pop d
0723   07D2 FD 43         mov [d], b
0724   07D4             ;; while (input_len--) { 
0725   07D4             _while11_cond:
0726   07D4 FA F9 FF      lea d, [bp + -7] ; $input_len
0727   07D7 2A            mov b, [d]
0728   07D8 D8            push b
0729   07D9 FD 7D         dec b
0730   07DB FA F9 FF      lea d, [bp + -7] ; $input_len
0731   07DE FD 43         mov [d], b
0732   07E0 E5            pop b
0733   07E1 C0 00 00      cmp b, 0
0734   07E4 C6 98 09      je _while11_exit
0735   07E7             _while11_block:
0736   07E7             ;; input_buffer[i++] = *(input++); 
0737   07E7 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0738   07EA D7            push a
0739   07EB DA            push d
0740   07EC FA FF FF      lea d, [bp + -1] ; $i
0741   07EF 2A            mov b, [d]
0742   07F0 D8            push b
0743   07F1 FD 77         inc b
0744   07F3 FA FF FF      lea d, [bp + -1] ; $i
0745   07F6 FD 43         mov [d], b
0746   07F8 E5            pop b
0747   07F9 E7            pop d
0748   07FA 5A            add d, b
0749   07FB E4            pop a
0750   07FC DA            push d
0751   07FD FA 05 00      lea d, [bp + 5] ; $input
0752   0800 2A            mov b, [d]
0753   0801 D8            push b
0754   0802 FD 77         inc b
0755   0804 FA 05 00      lea d, [bp + 5] ; $input
0756   0807 FD 43         mov [d], b
0757   0809 E5            pop b
0758   080A 74            mov d, b
0759   080B 32            mov bl, [d]
0760   080C A7 00         mov bh, 0
0761   080E E7            pop d
0762   080F FD 3E         mov [d], bl
0763   0811             ;; if (i == 3) { 
0764   0811             _if12_cond:
0765   0811 FA FF FF      lea d, [bp + -1] ; $i
0766   0814 2A            mov b, [d]
0767   0815             ; START RELATIONAL
0768   0815 D7            push a
0769   0816 11            mov a, b
0770   0817 26 03 00      mov b, $3
0771   081A B0            cmp a, b
0772   081B FD 71         seq ; ==
0773   081D E4            pop a
0774   081E             ; END RELATIONAL
0775   081E C0 00 00      cmp b, 0
0776   0821 C6 95 09      je _if12_exit
0777   0824             _if12_true:
0778   0824             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0779   0824 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0780   0827 D7            push a
0781   0828 DA            push d
0782   0829 26 00 00      mov b, $0
0783   082C E7            pop d
0784   082D 5A            add d, b
0785   082E E4            pop a
0786   082F DA            push d
0787   0830 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0788   0833 D7            push a
0789   0834 DA            push d
0790   0835 26 00 00      mov b, $0
0791   0838 E7            pop d
0792   0839 5A            add d, b
0793   083A E4            pop a
0794   083B 32            mov bl, [d]
0795   083C A7 00         mov bh, 0
0796   083E D7            push a
0797   083F 11            mov a, b
0798   0840 26 FC 00      mov b, $fc
0799   0843 86            and a, b ; &
0800   0844 27            mov b, a
0801   0845 E4            pop a
0802   0846             ; START SHIFT
0803   0846 D7            push a
0804   0847 11            mov a, b
0805   0848 26 02 00      mov b, $2
0806   084B FD 39         mov c, b
0807   084D A5            ashr a, cl
0808   084E 27            mov b, a
0809   084F E4            pop a
0810   0850             ; END SHIFT
0811   0850 E7            pop d
0812   0851 FD 3E         mov [d], bl
0813   0853             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0814   0853 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0815   0856 D7            push a
0816   0857 DA            push d
0817   0858 26 01 00      mov b, $1
0818   085B E7            pop d
0819   085C 5A            add d, b
0820   085D E4            pop a
0821   085E DA            push d
0822   085F FA F6 FF      lea d, [bp + -10] ; $input_buffer
0823   0862 D7            push a
0824   0863 DA            push d
0825   0864 26 00 00      mov b, $0
0826   0867 E7            pop d
0827   0868 5A            add d, b
0828   0869 E4            pop a
0829   086A 32            mov bl, [d]
0830   086B A7 00         mov bh, 0
0831   086D D7            push a
0832   086E 11            mov a, b
0833   086F 26 03 00      mov b, $3
0834   0872 86            and a, b ; &
0835   0873 27            mov b, a
0836   0874 E4            pop a
0837   0875             ; START SHIFT
0838   0875 D7            push a
0839   0876 11            mov a, b
0840   0877 26 04 00      mov b, $4
0841   087A FD 39         mov c, b
0842   087C 9D            shl a, cl
0843   087D 27            mov b, a
0844   087E E4            pop a
0845   087F             ; END SHIFT
0846   087F             ; START TERMS
0847   087F D7            push a
0848   0880 11            mov a, b
0849   0881 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0850   0884 D7            push a
0851   0885 DA            push d
0852   0886 26 01 00      mov b, $1
0853   0889 E7            pop d
0854   088A 5A            add d, b
0855   088B E4            pop a
0856   088C 32            mov bl, [d]
0857   088D A7 00         mov bh, 0
0858   088F D7            push a
0859   0890 11            mov a, b
0860   0891 26 F0 00      mov b, $f0
0861   0894 86            and a, b ; &
0862   0895 27            mov b, a
0863   0896 E4            pop a
0864   0897             ; START SHIFT
0865   0897 D7            push a
0866   0898 11            mov a, b
0867   0899 26 04 00      mov b, $4
0868   089C FD 39         mov c, b
0869   089E A5            ashr a, cl
0870   089F 27            mov b, a
0871   08A0 E4            pop a
0872   08A1             ; END SHIFT
0873   08A1 56            add b, a
0874   08A2 E4            pop a
0875   08A3             ; END TERMS
0876   08A3 E7            pop d
0877   08A4 FD 3E         mov [d], bl
0878   08A6             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0879   08A6 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0880   08A9 D7            push a
0881   08AA DA            push d
0882   08AB 26 02 00      mov b, $2
0883   08AE E7            pop d
0884   08AF 5A            add d, b
0885   08B0 E4            pop a
0886   08B1 DA            push d
0887   08B2 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0888   08B5 D7            push a
0889   08B6 DA            push d
0890   08B7 26 01 00      mov b, $1
0891   08BA E7            pop d
0892   08BB 5A            add d, b
0893   08BC E4            pop a
0894   08BD 32            mov bl, [d]
0895   08BE A7 00         mov bh, 0
0896   08C0 D7            push a
0897   08C1 11            mov a, b
0898   08C2 26 0F 00      mov b, $f
0899   08C5 86            and a, b ; &
0900   08C6 27            mov b, a
0901   08C7 E4            pop a
0902   08C8             ; START SHIFT
0903   08C8 D7            push a
0904   08C9 11            mov a, b
0905   08CA 26 02 00      mov b, $2
0906   08CD FD 39         mov c, b
0907   08CF 9D            shl a, cl
0908   08D0 27            mov b, a
0909   08D1 E4            pop a
0910   08D2             ; END SHIFT
0911   08D2             ; START TERMS
0912   08D2 D7            push a
0913   08D3 11            mov a, b
0914   08D4 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0915   08D7 D7            push a
0916   08D8 DA            push d
0917   08D9 26 02 00      mov b, $2
0918   08DC E7            pop d
0919   08DD 5A            add d, b
0920   08DE E4            pop a
0921   08DF 32            mov bl, [d]
0922   08E0 A7 00         mov bh, 0
0923   08E2 D7            push a
0924   08E3 11            mov a, b
0925   08E4 26 C0 00      mov b, $c0
0926   08E7 86            and a, b ; &
0927   08E8 27            mov b, a
0928   08E9 E4            pop a
0929   08EA             ; START SHIFT
0930   08EA D7            push a
0931   08EB 11            mov a, b
0932   08EC 26 06 00      mov b, $6
0933   08EF FD 39         mov c, b
0934   08F1 A5            ashr a, cl
0935   08F2 27            mov b, a
0936   08F3 E4            pop a
0937   08F4             ; END SHIFT
0938   08F4 56            add b, a
0939   08F5 E4            pop a
0940   08F6             ; END TERMS
0941   08F6 E7            pop d
0942   08F7 FD 3E         mov [d], bl
0943   08F9             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
0944   08F9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0945   08FC D7            push a
0946   08FD DA            push d
0947   08FE 26 03 00      mov b, $3
0948   0901 E7            pop d
0949   0902 5A            add d, b
0950   0903 E4            pop a
0951   0904 DA            push d
0952   0905 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0953   0908 D7            push a
0954   0909 DA            push d
0955   090A 26 02 00      mov b, $2
0956   090D E7            pop d
0957   090E 5A            add d, b
0958   090F E4            pop a
0959   0910 32            mov bl, [d]
0960   0911 A7 00         mov bh, 0
0961   0913 D7            push a
0962   0914 11            mov a, b
0963   0915 26 3F 00      mov b, $3f
0964   0918 86            and a, b ; &
0965   0919 27            mov b, a
0966   091A E4            pop a
0967   091B E7            pop d
0968   091C FD 3E         mov [d], bl
0969   091E             ;; for (i = 0; i < 4; i++) { 
0970   091E             _for13_init:
0971   091E FA FF FF      lea d, [bp + -1] ; $i
0972   0921 DA            push d
0973   0922 26 00 00      mov b, $0
0974   0925 E7            pop d
0975   0926 FD 43         mov [d], b
0976   0928             _for13_cond:
0977   0928 FA FF FF      lea d, [bp + -1] ; $i
0978   092B 2A            mov b, [d]
0979   092C             ; START RELATIONAL
0980   092C D7            push a
0981   092D 11            mov a, b
0982   092E 26 04 00      mov b, $4
0983   0931 B0            cmp a, b
0984   0932 FD 73         slt ; <= (signed)
0985   0934 E4            pop a
0986   0935             ; END RELATIONAL
0987   0935 C0 00 00      cmp b, 0
0988   0938 C6 88 09      je _for13_exit
0989   093B             _for13_block:
0990   093B             ;; output[j++] = base64_table[output_buffer[i]]; 
0991   093B FA 07 00      lea d, [bp + 7] ; $output
0992   093E FD 2A         mov d, [d]
0993   0940 D7            push a
0994   0941 DA            push d
0995   0942 FA FD FF      lea d, [bp + -3] ; $j
0996   0945 2A            mov b, [d]
0997   0946 D8            push b
0998   0947 FD 77         inc b
0999   0949 FA FD FF      lea d, [bp + -3] ; $j
1000   094C FD 43         mov [d], b
1001   094E E5            pop b
1002   094F E7            pop d
1003   0950 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1004   0954 E4            pop a
1005   0955 DA            push d
1006   0956 3B F6 1F      mov d, _base64_table ; $base64_table
1007   0959 FD 2A         mov d, [d]
1008   095B D7            push a
1009   095C DA            push d
1010   095D FA F2 FF      lea d, [bp + -14] ; $output_buffer
1011   0960 D7            push a
1012   0961 DA            push d
1013   0962 FA FF FF      lea d, [bp + -1] ; $i
1014   0965 2A            mov b, [d]
1015   0966 E7            pop d
1016   0967 5A            add d, b
1017   0968 E4            pop a
1018   0969 32            mov bl, [d]
1019   096A A7 00         mov bh, 0
1020   096C E7            pop d
1021   096D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1022   0971 E4            pop a
1023   0972 32            mov bl, [d]
1024   0973 A7 00         mov bh, 0
1025   0975 E7            pop d
1026   0976 FD 3E         mov [d], bl
1027   0978             _for13_update:
1028   0978 FA FF FF      lea d, [bp + -1] ; $i
1029   097B 2A            mov b, [d]
1030   097C D8            push b
1031   097D FD 77         inc b
1032   097F FA FF FF      lea d, [bp + -1] ; $i
1033   0982 FD 43         mov [d], b
1034   0984 E5            pop b
1035   0985 0A 28 09      jmp _for13_cond
1036   0988             _for13_exit:
1037   0988             ;; i = 0; 
1038   0988 FA FF FF      lea d, [bp + -1] ; $i
1039   098B DA            push d
1040   098C 26 00 00      mov b, $0
1041   098F E7            pop d
1042   0990 FD 43         mov [d], b
1043   0992 0A 95 09      jmp _if12_exit
1044   0995             _if12_exit:
1045   0995 0A D4 07      jmp _while11_cond
1046   0998             _while11_exit:
1047   0998             ;; if (i) { 
1048   0998             _if14_cond:
1049   0998 FA FF FF      lea d, [bp + -1] ; $i
1050   099B 2A            mov b, [d]
1051   099C C0 00 00      cmp b, 0
1052   099F C6 6D 0B      je _if14_exit
1053   09A2             _if14_true:
1054   09A2             ;; for (k = i; k < 3; k++) { 
1055   09A2             _for15_init:
1056   09A2 FA FB FF      lea d, [bp + -5] ; $k
1057   09A5 DA            push d
1058   09A6 FA FF FF      lea d, [bp + -1] ; $i
1059   09A9 2A            mov b, [d]
1060   09AA E7            pop d
1061   09AB FD 43         mov [d], b
1062   09AD             _for15_cond:
1063   09AD FA FB FF      lea d, [bp + -5] ; $k
1064   09B0 2A            mov b, [d]
1065   09B1             ; START RELATIONAL
1066   09B1 D7            push a
1067   09B2 11            mov a, b
1068   09B3 26 03 00      mov b, $3
1069   09B6 B0            cmp a, b
1070   09B7 FD 73         slt ; <= (signed)
1071   09B9 E4            pop a
1072   09BA             ; END RELATIONAL
1073   09BA C0 00 00      cmp b, 0
1074   09BD C6 E3 09      je _for15_exit
1075   09C0             _for15_block:
1076   09C0             ;; input_buffer[k] = '\0'; 
1077   09C0 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1078   09C3 D7            push a
1079   09C4 DA            push d
1080   09C5 FA FB FF      lea d, [bp + -5] ; $k
1081   09C8 2A            mov b, [d]
1082   09C9 E7            pop d
1083   09CA 5A            add d, b
1084   09CB E4            pop a
1085   09CC DA            push d
1086   09CD 26 00 00      mov b, $0
1087   09D0 E7            pop d
1088   09D1 FD 3E         mov [d], bl
1089   09D3             _for15_update:
1090   09D3 FA FB FF      lea d, [bp + -5] ; $k
1091   09D6 2A            mov b, [d]
1092   09D7 D8            push b
1093   09D8 FD 77         inc b
1094   09DA FA FB FF      lea d, [bp + -5] ; $k
1095   09DD FD 43         mov [d], b
1096   09DF E5            pop b
1097   09E0 0A AD 09      jmp _for15_cond
1098   09E3             _for15_exit:
1099   09E3             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1100   09E3 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1101   09E6 D7            push a
1102   09E7 DA            push d
1103   09E8 26 00 00      mov b, $0
1104   09EB E7            pop d
1105   09EC 5A            add d, b
1106   09ED E4            pop a
1107   09EE DA            push d
1108   09EF FA F6 FF      lea d, [bp + -10] ; $input_buffer
1109   09F2 D7            push a
1110   09F3 DA            push d
1111   09F4 26 00 00      mov b, $0
1112   09F7 E7            pop d
1113   09F8 5A            add d, b
1114   09F9 E4            pop a
1115   09FA 32            mov bl, [d]
1116   09FB A7 00         mov bh, 0
1117   09FD D7            push a
1118   09FE 11            mov a, b
1119   09FF 26 FC 00      mov b, $fc
1120   0A02 86            and a, b ; &
1121   0A03 27            mov b, a
1122   0A04 E4            pop a
1123   0A05             ; START SHIFT
1124   0A05 D7            push a
1125   0A06 11            mov a, b
1126   0A07 26 02 00      mov b, $2
1127   0A0A FD 39         mov c, b
1128   0A0C A5            ashr a, cl
1129   0A0D 27            mov b, a
1130   0A0E E4            pop a
1131   0A0F             ; END SHIFT
1132   0A0F E7            pop d
1133   0A10 FD 3E         mov [d], bl
1134   0A12             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1135   0A12 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1136   0A15 D7            push a
1137   0A16 DA            push d
1138   0A17 26 01 00      mov b, $1
1139   0A1A E7            pop d
1140   0A1B 5A            add d, b
1141   0A1C E4            pop a
1142   0A1D DA            push d
1143   0A1E FA F6 FF      lea d, [bp + -10] ; $input_buffer
1144   0A21 D7            push a
1145   0A22 DA            push d
1146   0A23 26 00 00      mov b, $0
1147   0A26 E7            pop d
1148   0A27 5A            add d, b
1149   0A28 E4            pop a
1150   0A29 32            mov bl, [d]
1151   0A2A A7 00         mov bh, 0
1152   0A2C D7            push a
1153   0A2D 11            mov a, b
1154   0A2E 26 03 00      mov b, $3
1155   0A31 86            and a, b ; &
1156   0A32 27            mov b, a
1157   0A33 E4            pop a
1158   0A34             ; START SHIFT
1159   0A34 D7            push a
1160   0A35 11            mov a, b
1161   0A36 26 04 00      mov b, $4
1162   0A39 FD 39         mov c, b
1163   0A3B 9D            shl a, cl
1164   0A3C 27            mov b, a
1165   0A3D E4            pop a
1166   0A3E             ; END SHIFT
1167   0A3E             ; START TERMS
1168   0A3E D7            push a
1169   0A3F 11            mov a, b
1170   0A40 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1171   0A43 D7            push a
1172   0A44 DA            push d
1173   0A45 26 01 00      mov b, $1
1174   0A48 E7            pop d
1175   0A49 5A            add d, b
1176   0A4A E4            pop a
1177   0A4B 32            mov bl, [d]
1178   0A4C A7 00         mov bh, 0
1179   0A4E D7            push a
1180   0A4F 11            mov a, b
1181   0A50 26 F0 00      mov b, $f0
1182   0A53 86            and a, b ; &
1183   0A54 27            mov b, a
1184   0A55 E4            pop a
1185   0A56             ; START SHIFT
1186   0A56 D7            push a
1187   0A57 11            mov a, b
1188   0A58 26 04 00      mov b, $4
1189   0A5B FD 39         mov c, b
1190   0A5D A5            ashr a, cl
1191   0A5E 27            mov b, a
1192   0A5F E4            pop a
1193   0A60             ; END SHIFT
1194   0A60 56            add b, a
1195   0A61 E4            pop a
1196   0A62             ; END TERMS
1197   0A62 E7            pop d
1198   0A63 FD 3E         mov [d], bl
1199   0A65             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1200   0A65 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1201   0A68 D7            push a
1202   0A69 DA            push d
1203   0A6A 26 02 00      mov b, $2
1204   0A6D E7            pop d
1205   0A6E 5A            add d, b
1206   0A6F E4            pop a
1207   0A70 DA            push d
1208   0A71 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1209   0A74 D7            push a
1210   0A75 DA            push d
1211   0A76 26 01 00      mov b, $1
1212   0A79 E7            pop d
1213   0A7A 5A            add d, b
1214   0A7B E4            pop a
1215   0A7C 32            mov bl, [d]
1216   0A7D A7 00         mov bh, 0
1217   0A7F D7            push a
1218   0A80 11            mov a, b
1219   0A81 26 0F 00      mov b, $f
1220   0A84 86            and a, b ; &
1221   0A85 27            mov b, a
1222   0A86 E4            pop a
1223   0A87             ; START SHIFT
1224   0A87 D7            push a
1225   0A88 11            mov a, b
1226   0A89 26 02 00      mov b, $2
1227   0A8C FD 39         mov c, b
1228   0A8E 9D            shl a, cl
1229   0A8F 27            mov b, a
1230   0A90 E4            pop a
1231   0A91             ; END SHIFT
1232   0A91             ; START TERMS
1233   0A91 D7            push a
1234   0A92 11            mov a, b
1235   0A93 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1236   0A96 D7            push a
1237   0A97 DA            push d
1238   0A98 26 02 00      mov b, $2
1239   0A9B E7            pop d
1240   0A9C 5A            add d, b
1241   0A9D E4            pop a
1242   0A9E 32            mov bl, [d]
1243   0A9F A7 00         mov bh, 0
1244   0AA1 D7            push a
1245   0AA2 11            mov a, b
1246   0AA3 26 C0 00      mov b, $c0
1247   0AA6 86            and a, b ; &
1248   0AA7 27            mov b, a
1249   0AA8 E4            pop a
1250   0AA9             ; START SHIFT
1251   0AA9 D7            push a
1252   0AAA 11            mov a, b
1253   0AAB 26 06 00      mov b, $6
1254   0AAE FD 39         mov c, b
1255   0AB0 A5            ashr a, cl
1256   0AB1 27            mov b, a
1257   0AB2 E4            pop a
1258   0AB3             ; END SHIFT
1259   0AB3 56            add b, a
1260   0AB4 E4            pop a
1261   0AB5             ; END TERMS
1262   0AB5 E7            pop d
1263   0AB6 FD 3E         mov [d], bl
1264   0AB8             ;; for (k = 0; k < i + 1; k++) { 
1265   0AB8             _for16_init:
1266   0AB8 FA FB FF      lea d, [bp + -5] ; $k
1267   0ABB DA            push d
1268   0ABC 26 00 00      mov b, $0
1269   0ABF E7            pop d
1270   0AC0 FD 43         mov [d], b
1271   0AC2             _for16_cond:
1272   0AC2 FA FB FF      lea d, [bp + -5] ; $k
1273   0AC5 2A            mov b, [d]
1274   0AC6             ; START RELATIONAL
1275   0AC6 D7            push a
1276   0AC7 11            mov a, b
1277   0AC8 FA FF FF      lea d, [bp + -1] ; $i
1278   0ACB 2A            mov b, [d]
1279   0ACC             ; START TERMS
1280   0ACC D7            push a
1281   0ACD 11            mov a, b
1282   0ACE 26 01 00      mov b, $1
1283   0AD1 56            add b, a
1284   0AD2 E4            pop a
1285   0AD3             ; END TERMS
1286   0AD3 B0            cmp a, b
1287   0AD4 FD 73         slt ; <= (signed)
1288   0AD6 E4            pop a
1289   0AD7             ; END RELATIONAL
1290   0AD7 C0 00 00      cmp b, 0
1291   0ADA C6 2A 0B      je _for16_exit
1292   0ADD             _for16_block:
1293   0ADD             ;; output[j++] = base64_table[output_buffer[k]]; 
1294   0ADD FA 07 00      lea d, [bp + 7] ; $output
1295   0AE0 FD 2A         mov d, [d]
1296   0AE2 D7            push a
1297   0AE3 DA            push d
1298   0AE4 FA FD FF      lea d, [bp + -3] ; $j
1299   0AE7 2A            mov b, [d]
1300   0AE8 D8            push b
1301   0AE9 FD 77         inc b
1302   0AEB FA FD FF      lea d, [bp + -3] ; $j
1303   0AEE FD 43         mov [d], b
1304   0AF0 E5            pop b
1305   0AF1 E7            pop d
1306   0AF2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1307   0AF6 E4            pop a
1308   0AF7 DA            push d
1309   0AF8 3B F6 1F      mov d, _base64_table ; $base64_table
1310   0AFB FD 2A         mov d, [d]
1311   0AFD D7            push a
1312   0AFE DA            push d
1313   0AFF FA F2 FF      lea d, [bp + -14] ; $output_buffer
1314   0B02 D7            push a
1315   0B03 DA            push d
1316   0B04 FA FB FF      lea d, [bp + -5] ; $k
1317   0B07 2A            mov b, [d]
1318   0B08 E7            pop d
1319   0B09 5A            add d, b
1320   0B0A E4            pop a
1321   0B0B 32            mov bl, [d]
1322   0B0C A7 00         mov bh, 0
1323   0B0E E7            pop d
1324   0B0F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1325   0B13 E4            pop a
1326   0B14 32            mov bl, [d]
1327   0B15 A7 00         mov bh, 0
1328   0B17 E7            pop d
1329   0B18 FD 3E         mov [d], bl
1330   0B1A             _for16_update:
1331   0B1A FA FB FF      lea d, [bp + -5] ; $k
1332   0B1D 2A            mov b, [d]
1333   0B1E D8            push b
1334   0B1F FD 77         inc b
1335   0B21 FA FB FF      lea d, [bp + -5] ; $k
1336   0B24 FD 43         mov [d], b
1337   0B26 E5            pop b
1338   0B27 0A C2 0A      jmp _for16_cond
1339   0B2A             _for16_exit:
1340   0B2A             ;; while (i++ < 3) { 
1341   0B2A             _while17_cond:
1342   0B2A FA FF FF      lea d, [bp + -1] ; $i
1343   0B2D 2A            mov b, [d]
1344   0B2E D8            push b
1345   0B2F FD 77         inc b
1346   0B31 FA FF FF      lea d, [bp + -1] ; $i
1347   0B34 FD 43         mov [d], b
1348   0B36 E5            pop b
1349   0B37             ; START RELATIONAL
1350   0B37 D7            push a
1351   0B38 11            mov a, b
1352   0B39 26 03 00      mov b, $3
1353   0B3C B0            cmp a, b
1354   0B3D FD 73         slt ; <= (signed)
1355   0B3F E4            pop a
1356   0B40             ; END RELATIONAL
1357   0B40 C0 00 00      cmp b, 0
1358   0B43 C6 6A 0B      je _while17_exit
1359   0B46             _while17_block:
1360   0B46             ;; output[j++] = '='; 
1361   0B46 FA 07 00      lea d, [bp + 7] ; $output
1362   0B49 FD 2A         mov d, [d]
1363   0B4B D7            push a
1364   0B4C DA            push d
1365   0B4D FA FD FF      lea d, [bp + -3] ; $j
1366   0B50 2A            mov b, [d]
1367   0B51 D8            push b
1368   0B52 FD 77         inc b
1369   0B54 FA FD FF      lea d, [bp + -3] ; $j
1370   0B57 FD 43         mov [d], b
1371   0B59 E5            pop b
1372   0B5A E7            pop d
1373   0B5B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1374   0B5F E4            pop a
1375   0B60 DA            push d
1376   0B61 26 3D 00      mov b, $3d
1377   0B64 E7            pop d
1378   0B65 FD 3E         mov [d], bl
1379   0B67 0A 2A 0B      jmp _while17_cond
1380   0B6A             _while17_exit:
1381   0B6A 0A 6D 0B      jmp _if14_exit
1382   0B6D             _if14_exit:
1383   0B6D             ;; output[j] = '\0'; 
1384   0B6D FA 07 00      lea d, [bp + 7] ; $output
1385   0B70 FD 2A         mov d, [d]
1386   0B72 D7            push a
1387   0B73 DA            push d
1388   0B74 FA FD FF      lea d, [bp + -3] ; $j
1389   0B77 2A            mov b, [d]
1390   0B78 E7            pop d
1391   0B79 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1392   0B7D E4            pop a
1393   0B7E DA            push d
1394   0B7F 26 00 00      mov b, $0
1395   0B82 E7            pop d
1396   0B83 FD 3E         mov [d], bl
1397   0B85 F9            leave
1398   0B86 09            ret
1399   0B87             
1400   0B87             base64_char_value:
1401   0B87 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1402   0B8A             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1403   0B8A             _if18_cond:
1404   0B8A FA 05 00      lea d, [bp + 5] ; $c
1405   0B8D 32            mov bl, [d]
1406   0B8E A7 00         mov bh, 0
1407   0B90             ; START RELATIONAL
1408   0B90 D7            push a
1409   0B91 11            mov a, b
1410   0B92 26 41 00      mov b, $41
1411   0B95 B0            cmp a, b
1412   0B96 FD 80         sge ; >=
1413   0B98 E4            pop a
1414   0B99             ; END RELATIONAL
1415   0B99 D7            push a
1416   0B9A 11            mov a, b
1417   0B9B FA 05 00      lea d, [bp + 5] ; $c
1418   0B9E 32            mov bl, [d]
1419   0B9F A7 00         mov bh, 0
1420   0BA1             ; START RELATIONAL
1421   0BA1 D7            push a
1422   0BA2 11            mov a, b
1423   0BA3 26 5A 00      mov b, $5a
1424   0BA6 B0            cmp a, b
1425   0BA7 FD 74         sle ; <=
1426   0BA9 E4            pop a
1427   0BAA             ; END RELATIONAL
1428   0BAA FD A7         sand a, b ; &&
1429   0BAC E4            pop a
1430   0BAD C0 00 00      cmp b, 0
1431   0BB0 C6 C6 0B      je _if18_exit
1432   0BB3             _if18_true:
1433   0BB3             ;; return c - 'A'; 
1434   0BB3 FA 05 00      lea d, [bp + 5] ; $c
1435   0BB6 32            mov bl, [d]
1436   0BB7 A7 00         mov bh, 0
1437   0BB9             ; START TERMS
1438   0BB9 D7            push a
1439   0BBA 11            mov a, b
1440   0BBB 26 41 00      mov b, $41
1441   0BBE 60            sub a, b
1442   0BBF 27            mov b, a
1443   0BC0 E4            pop a
1444   0BC1             ; END TERMS
1445   0BC1 F9            leave
1446   0BC2 09            ret
1447   0BC3 0A C6 0B      jmp _if18_exit
1448   0BC6             _if18_exit:
1449   0BC6             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1450   0BC6             _if19_cond:
1451   0BC6 FA 05 00      lea d, [bp + 5] ; $c
1452   0BC9 32            mov bl, [d]
1453   0BCA A7 00         mov bh, 0
1454   0BCC             ; START RELATIONAL
1455   0BCC D7            push a
1456   0BCD 11            mov a, b
1457   0BCE 26 61 00      mov b, $61
1458   0BD1 B0            cmp a, b
1459   0BD2 FD 80         sge ; >=
1460   0BD4 E4            pop a
1461   0BD5             ; END RELATIONAL
1462   0BD5 D7            push a
1463   0BD6 11            mov a, b
1464   0BD7 FA 05 00      lea d, [bp + 5] ; $c
1465   0BDA 32            mov bl, [d]
1466   0BDB A7 00         mov bh, 0
1467   0BDD             ; START RELATIONAL
1468   0BDD D7            push a
1469   0BDE 11            mov a, b
1470   0BDF 26 7A 00      mov b, $7a
1471   0BE2 B0            cmp a, b
1472   0BE3 FD 74         sle ; <=
1473   0BE5 E4            pop a
1474   0BE6             ; END RELATIONAL
1475   0BE6 FD A7         sand a, b ; &&
1476   0BE8 E4            pop a
1477   0BE9 C0 00 00      cmp b, 0
1478   0BEC C6 07 0C      je _if19_exit
1479   0BEF             _if19_true:
1480   0BEF             ;; return c - 'a' + 26; 
1481   0BEF FA 05 00      lea d, [bp + 5] ; $c
1482   0BF2 32            mov bl, [d]
1483   0BF3 A7 00         mov bh, 0
1484   0BF5             ; START TERMS
1485   0BF5 D7            push a
1486   0BF6 11            mov a, b
1487   0BF7 26 61 00      mov b, $61
1488   0BFA 60            sub a, b
1489   0BFB 27            mov b, a
1490   0BFC 11            mov a, b
1491   0BFD 26 1A 00      mov b, $1a
1492   0C00 56            add b, a
1493   0C01 E4            pop a
1494   0C02             ; END TERMS
1495   0C02 F9            leave
1496   0C03 09            ret
1497   0C04 0A 07 0C      jmp _if19_exit
1498   0C07             _if19_exit:
1499   0C07             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1500   0C07             _if20_cond:
1501   0C07 FA 05 00      lea d, [bp + 5] ; $c
1502   0C0A 32            mov bl, [d]
1503   0C0B A7 00         mov bh, 0
1504   0C0D             ; START RELATIONAL
1505   0C0D D7            push a
1506   0C0E 11            mov a, b
1507   0C0F 26 30 00      mov b, $30
1508   0C12 B0            cmp a, b
1509   0C13 FD 80         sge ; >=
1510   0C15 E4            pop a
1511   0C16             ; END RELATIONAL
1512   0C16 D7            push a
1513   0C17 11            mov a, b
1514   0C18 FA 05 00      lea d, [bp + 5] ; $c
1515   0C1B 32            mov bl, [d]
1516   0C1C A7 00         mov bh, 0
1517   0C1E             ; START RELATIONAL
1518   0C1E D7            push a
1519   0C1F 11            mov a, b
1520   0C20 26 39 00      mov b, $39
1521   0C23 B0            cmp a, b
1522   0C24 FD 74         sle ; <=
1523   0C26 E4            pop a
1524   0C27             ; END RELATIONAL
1525   0C27 FD A7         sand a, b ; &&
1526   0C29 E4            pop a
1527   0C2A C0 00 00      cmp b, 0
1528   0C2D C6 48 0C      je _if20_exit
1529   0C30             _if20_true:
1530   0C30             ;; return c - '0' + 52; 
1531   0C30 FA 05 00      lea d, [bp + 5] ; $c
1532   0C33 32            mov bl, [d]
1533   0C34 A7 00         mov bh, 0
1534   0C36             ; START TERMS
1535   0C36 D7            push a
1536   0C37 11            mov a, b
1537   0C38 26 30 00      mov b, $30
1538   0C3B 60            sub a, b
1539   0C3C 27            mov b, a
1540   0C3D 11            mov a, b
1541   0C3E 26 34 00      mov b, $34
1542   0C41 56            add b, a
1543   0C42 E4            pop a
1544   0C43             ; END TERMS
1545   0C43 F9            leave
1546   0C44 09            ret
1547   0C45 0A 48 0C      jmp _if20_exit
1548   0C48             _if20_exit:
1549   0C48             ;; if (c == '+') return 62; 
1550   0C48             _if21_cond:
1551   0C48 FA 05 00      lea d, [bp + 5] ; $c
1552   0C4B 32            mov bl, [d]
1553   0C4C A7 00         mov bh, 0
1554   0C4E             ; START RELATIONAL
1555   0C4E D7            push a
1556   0C4F 11            mov a, b
1557   0C50 26 2B 00      mov b, $2b
1558   0C53 B0            cmp a, b
1559   0C54 FD 71         seq ; ==
1560   0C56 E4            pop a
1561   0C57             ; END RELATIONAL
1562   0C57 C0 00 00      cmp b, 0
1563   0C5A C6 65 0C      je _if21_exit
1564   0C5D             _if21_true:
1565   0C5D             ;; return 62; 
1566   0C5D 26 3E 00      mov b, $3e
1567   0C60 F9            leave
1568   0C61 09            ret
1569   0C62 0A 65 0C      jmp _if21_exit
1570   0C65             _if21_exit:
1571   0C65             ;; if (c == '/') return 63; 
1572   0C65             _if22_cond:
1573   0C65 FA 05 00      lea d, [bp + 5] ; $c
1574   0C68 32            mov bl, [d]
1575   0C69 A7 00         mov bh, 0
1576   0C6B             ; START RELATIONAL
1577   0C6B D7            push a
1578   0C6C 11            mov a, b
1579   0C6D 26 2F 00      mov b, $2f
1580   0C70 B0            cmp a, b
1581   0C71 FD 71         seq ; ==
1582   0C73 E4            pop a
1583   0C74             ; END RELATIONAL
1584   0C74 C0 00 00      cmp b, 0
1585   0C77 C6 82 0C      je _if22_exit
1586   0C7A             _if22_true:
1587   0C7A             ;; return 63; 
1588   0C7A 26 3F 00      mov b, $3f
1589   0C7D F9            leave
1590   0C7E 09            ret
1591   0C7F 0A 82 0C      jmp _if22_exit
1592   0C82             _if22_exit:
1593   0C82             ;; return -1; 
1594   0C82 26 FF FF      mov b, $ffff
1595   0C85 F9            leave
1596   0C86 09            ret
1597   0C87             
1598   0C87             base64_decode:
1599   0C87 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1600   0C8A             ; $i 
1601   0C8A 10 00 00      mov a, $0
1602   0C8D 45 FF FF      mov [bp + -1], a
1603   0C90             ; $j 
1604   0C90 10 00 00      mov a, $0
1605   0C93 45 FD FF      mov [bp + -3], a
1606   0C96             ; $k 
1607   0C96 10 00 00      mov a, $0
1608   0C99 45 FB FF      mov [bp + -5], a
1609   0C9C             ; $input_len 
1610   0C9C             ; $input_buffer 
1611   0C9C             ; $output_buffer 
1612   0C9C 52 0F 00      sub sp, 15
1613   0C9F             ;; input_len = strlen(input); 
1614   0C9F FA F9 FF      lea d, [bp + -7] ; $input_len
1615   0CA2 DA            push d
1616   0CA3 FA 05 00      lea d, [bp + 5] ; $input
1617   0CA6 2A            mov b, [d]
1618   0CA7 FD AB         swp b
1619   0CA9 D8            push b
1620   0CAA 07 E6 05      call strlen
1621   0CAD 51 02 00      add sp, 2
1622   0CB0 E7            pop d
1623   0CB1 FD 43         mov [d], b
1624   0CB3             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1625   0CB3             _while23_cond:
1626   0CB3 FA F9 FF      lea d, [bp + -7] ; $input_len
1627   0CB6 2A            mov b, [d]
1628   0CB7 D8            push b
1629   0CB8 FD 7D         dec b
1630   0CBA FA F9 FF      lea d, [bp + -7] ; $input_len
1631   0CBD FD 43         mov [d], b
1632   0CBF E5            pop b
1633   0CC0 D7            push a
1634   0CC1 11            mov a, b
1635   0CC2 FA 05 00      lea d, [bp + 5] ; $input
1636   0CC5 FD 2A         mov d, [d]
1637   0CC7 D7            push a
1638   0CC8 DA            push d
1639   0CC9 FA FB FF      lea d, [bp + -5] ; $k
1640   0CCC 2A            mov b, [d]
1641   0CCD E7            pop d
1642   0CCE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1643   0CD2 E4            pop a
1644   0CD3 32            mov bl, [d]
1645   0CD4 A7 00         mov bh, 0
1646   0CD6             ; START RELATIONAL
1647   0CD6 D7            push a
1648   0CD7 11            mov a, b
1649   0CD8 26 3D 00      mov b, $3d
1650   0CDB B0            cmp a, b
1651   0CDC FD 72         sneq ; !=
1652   0CDE E4            pop a
1653   0CDF             ; END RELATIONAL
1654   0CDF FD A7         sand a, b ; &&
1655   0CE1 11            mov a, b
1656   0CE2 FA 05 00      lea d, [bp + 5] ; $input
1657   0CE5 FD 2A         mov d, [d]
1658   0CE7 D7            push a
1659   0CE8 DA            push d
1660   0CE9 FA FB FF      lea d, [bp + -5] ; $k
1661   0CEC 2A            mov b, [d]
1662   0CED E7            pop d
1663   0CEE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1664   0CF2 E4            pop a
1665   0CF3 32            mov bl, [d]
1666   0CF4 A7 00         mov bh, 0
1667   0CF6 DD            push bl
1668   0CF7 07 87 0B      call base64_char_value
1669   0CFA 51 01 00      add sp, 1
1670   0CFD             ; START RELATIONAL
1671   0CFD D7            push a
1672   0CFE 11            mov a, b
1673   0CFF 26 FF FF      mov b, $ffff
1674   0D02 B0            cmp a, b
1675   0D03 FD 72         sneq ; !=
1676   0D05 E4            pop a
1677   0D06             ; END RELATIONAL
1678   0D06 FD A7         sand a, b ; &&
1679   0D08 E4            pop a
1680   0D09 C0 00 00      cmp b, 0
1681   0D0C C6 F4 0E      je _while23_exit
1682   0D0F             _while23_block:
1683   0D0F             ;; input_buffer[i++] = input[k++]; 
1684   0D0F FA F5 FF      lea d, [bp + -11] ; $input_buffer
1685   0D12 D7            push a
1686   0D13 DA            push d
1687   0D14 FA FF FF      lea d, [bp + -1] ; $i
1688   0D17 2A            mov b, [d]
1689   0D18 D8            push b
1690   0D19 FD 77         inc b
1691   0D1B FA FF FF      lea d, [bp + -1] ; $i
1692   0D1E FD 43         mov [d], b
1693   0D20 E5            pop b
1694   0D21 E7            pop d
1695   0D22 5A            add d, b
1696   0D23 E4            pop a
1697   0D24 DA            push d
1698   0D25 FA 05 00      lea d, [bp + 5] ; $input
1699   0D28 FD 2A         mov d, [d]
1700   0D2A D7            push a
1701   0D2B DA            push d
1702   0D2C FA FB FF      lea d, [bp + -5] ; $k
1703   0D2F 2A            mov b, [d]
1704   0D30 D8            push b
1705   0D31 FD 77         inc b
1706   0D33 FA FB FF      lea d, [bp + -5] ; $k
1707   0D36 FD 43         mov [d], b
1708   0D38 E5            pop b
1709   0D39 E7            pop d
1710   0D3A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1711   0D3E E4            pop a
1712   0D3F 32            mov bl, [d]
1713   0D40 A7 00         mov bh, 0
1714   0D42 E7            pop d
1715   0D43 FD 3E         mov [d], bl
1716   0D45             ;; if (i == 4) { 
1717   0D45             _if24_cond:
1718   0D45 FA FF FF      lea d, [bp + -1] ; $i
1719   0D48 2A            mov b, [d]
1720   0D49             ; START RELATIONAL
1721   0D49 D7            push a
1722   0D4A 11            mov a, b
1723   0D4B 26 04 00      mov b, $4
1724   0D4E B0            cmp a, b
1725   0D4F FD 71         seq ; ==
1726   0D51 E4            pop a
1727   0D52             ; END RELATIONAL
1728   0D52 C0 00 00      cmp b, 0
1729   0D55 C6 F1 0E      je _if24_exit
1730   0D58             _if24_true:
1731   0D58             ;; for (i = 0; i < 4; i++) { 
1732   0D58             _for25_init:
1733   0D58 FA FF FF      lea d, [bp + -1] ; $i
1734   0D5B DA            push d
1735   0D5C 26 00 00      mov b, $0
1736   0D5F E7            pop d
1737   0D60 FD 43         mov [d], b
1738   0D62             _for25_cond:
1739   0D62 FA FF FF      lea d, [bp + -1] ; $i
1740   0D65 2A            mov b, [d]
1741   0D66             ; START RELATIONAL
1742   0D66 D7            push a
1743   0D67 11            mov a, b
1744   0D68 26 04 00      mov b, $4
1745   0D6B B0            cmp a, b
1746   0D6C FD 73         slt ; <= (signed)
1747   0D6E E4            pop a
1748   0D6F             ; END RELATIONAL
1749   0D6F C0 00 00      cmp b, 0
1750   0D72 C6 AB 0D      je _for25_exit
1751   0D75             _for25_block:
1752   0D75             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
1753   0D75 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1754   0D78 D7            push a
1755   0D79 DA            push d
1756   0D7A FA FF FF      lea d, [bp + -1] ; $i
1757   0D7D 2A            mov b, [d]
1758   0D7E E7            pop d
1759   0D7F 5A            add d, b
1760   0D80 E4            pop a
1761   0D81 DA            push d
1762   0D82 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1763   0D85 D7            push a
1764   0D86 DA            push d
1765   0D87 FA FF FF      lea d, [bp + -1] ; $i
1766   0D8A 2A            mov b, [d]
1767   0D8B E7            pop d
1768   0D8C 5A            add d, b
1769   0D8D E4            pop a
1770   0D8E 32            mov bl, [d]
1771   0D8F A7 00         mov bh, 0
1772   0D91 DD            push bl
1773   0D92 07 87 0B      call base64_char_value
1774   0D95 51 01 00      add sp, 1
1775   0D98 E7            pop d
1776   0D99 FD 3E         mov [d], bl
1777   0D9B             _for25_update:
1778   0D9B FA FF FF      lea d, [bp + -1] ; $i
1779   0D9E 2A            mov b, [d]
1780   0D9F D8            push b
1781   0DA0 FD 77         inc b
1782   0DA2 FA FF FF      lea d, [bp + -1] ; $i
1783   0DA5 FD 43         mov [d], b
1784   0DA7 E5            pop b
1785   0DA8 0A 62 0D      jmp _for25_cond
1786   0DAB             _for25_exit:
1787   0DAB             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1788   0DAB FA F2 FF      lea d, [bp + -14] ; $output_buffer
1789   0DAE D7            push a
1790   0DAF DA            push d
1791   0DB0 26 00 00      mov b, $0
1792   0DB3 E7            pop d
1793   0DB4 5A            add d, b
1794   0DB5 E4            pop a
1795   0DB6 DA            push d
1796   0DB7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1797   0DBA D7            push a
1798   0DBB DA            push d
1799   0DBC 26 00 00      mov b, $0
1800   0DBF E7            pop d
1801   0DC0 5A            add d, b
1802   0DC1 E4            pop a
1803   0DC2 32            mov bl, [d]
1804   0DC3 A7 00         mov bh, 0
1805   0DC5             ; START SHIFT
1806   0DC5 D7            push a
1807   0DC6 11            mov a, b
1808   0DC7 26 02 00      mov b, $2
1809   0DCA FD 39         mov c, b
1810   0DCC 9D            shl a, cl
1811   0DCD 27            mov b, a
1812   0DCE E4            pop a
1813   0DCF             ; END SHIFT
1814   0DCF             ; START TERMS
1815   0DCF D7            push a
1816   0DD0 11            mov a, b
1817   0DD1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1818   0DD4 D7            push a
1819   0DD5 DA            push d
1820   0DD6 26 01 00      mov b, $1
1821   0DD9 E7            pop d
1822   0DDA 5A            add d, b
1823   0DDB E4            pop a
1824   0DDC 32            mov bl, [d]
1825   0DDD A7 00         mov bh, 0
1826   0DDF D7            push a
1827   0DE0 11            mov a, b
1828   0DE1 26 30 00      mov b, $30
1829   0DE4 86            and a, b ; &
1830   0DE5 27            mov b, a
1831   0DE6 E4            pop a
1832   0DE7             ; START SHIFT
1833   0DE7 D7            push a
1834   0DE8 11            mov a, b
1835   0DE9 26 04 00      mov b, $4
1836   0DEC FD 39         mov c, b
1837   0DEE A5            ashr a, cl
1838   0DEF 27            mov b, a
1839   0DF0 E4            pop a
1840   0DF1             ; END SHIFT
1841   0DF1 56            add b, a
1842   0DF2 E4            pop a
1843   0DF3             ; END TERMS
1844   0DF3 E7            pop d
1845   0DF4 FD 3E         mov [d], bl
1846   0DF6             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1847   0DF6 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1848   0DF9 D7            push a
1849   0DFA DA            push d
1850   0DFB 26 01 00      mov b, $1
1851   0DFE E7            pop d
1852   0DFF 5A            add d, b
1853   0E00 E4            pop a
1854   0E01 DA            push d
1855   0E02 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1856   0E05 D7            push a
1857   0E06 DA            push d
1858   0E07 26 01 00      mov b, $1
1859   0E0A E7            pop d
1860   0E0B 5A            add d, b
1861   0E0C E4            pop a
1862   0E0D 32            mov bl, [d]
1863   0E0E A7 00         mov bh, 0
1864   0E10 D7            push a
1865   0E11 11            mov a, b
1866   0E12 26 0F 00      mov b, $f
1867   0E15 86            and a, b ; &
1868   0E16 27            mov b, a
1869   0E17 E4            pop a
1870   0E18             ; START SHIFT
1871   0E18 D7            push a
1872   0E19 11            mov a, b
1873   0E1A 26 04 00      mov b, $4
1874   0E1D FD 39         mov c, b
1875   0E1F 9D            shl a, cl
1876   0E20 27            mov b, a
1877   0E21 E4            pop a
1878   0E22             ; END SHIFT
1879   0E22             ; START TERMS
1880   0E22 D7            push a
1881   0E23 11            mov a, b
1882   0E24 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1883   0E27 D7            push a
1884   0E28 DA            push d
1885   0E29 26 02 00      mov b, $2
1886   0E2C E7            pop d
1887   0E2D 5A            add d, b
1888   0E2E E4            pop a
1889   0E2F 32            mov bl, [d]
1890   0E30 A7 00         mov bh, 0
1891   0E32 D7            push a
1892   0E33 11            mov a, b
1893   0E34 26 3C 00      mov b, $3c
1894   0E37 86            and a, b ; &
1895   0E38 27            mov b, a
1896   0E39 E4            pop a
1897   0E3A             ; START SHIFT
1898   0E3A D7            push a
1899   0E3B 11            mov a, b
1900   0E3C 26 02 00      mov b, $2
1901   0E3F FD 39         mov c, b
1902   0E41 A5            ashr a, cl
1903   0E42 27            mov b, a
1904   0E43 E4            pop a
1905   0E44             ; END SHIFT
1906   0E44 56            add b, a
1907   0E45 E4            pop a
1908   0E46             ; END TERMS
1909   0E46 E7            pop d
1910   0E47 FD 3E         mov [d], bl
1911   0E49             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1912   0E49 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1913   0E4C D7            push a
1914   0E4D DA            push d
1915   0E4E 26 02 00      mov b, $2
1916   0E51 E7            pop d
1917   0E52 5A            add d, b
1918   0E53 E4            pop a
1919   0E54 DA            push d
1920   0E55 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1921   0E58 D7            push a
1922   0E59 DA            push d
1923   0E5A 26 02 00      mov b, $2
1924   0E5D E7            pop d
1925   0E5E 5A            add d, b
1926   0E5F E4            pop a
1927   0E60 32            mov bl, [d]
1928   0E61 A7 00         mov bh, 0
1929   0E63 D7            push a
1930   0E64 11            mov a, b
1931   0E65 26 03 00      mov b, $3
1932   0E68 86            and a, b ; &
1933   0E69 27            mov b, a
1934   0E6A E4            pop a
1935   0E6B             ; START SHIFT
1936   0E6B D7            push a
1937   0E6C 11            mov a, b
1938   0E6D 26 06 00      mov b, $6
1939   0E70 FD 39         mov c, b
1940   0E72 9D            shl a, cl
1941   0E73 27            mov b, a
1942   0E74 E4            pop a
1943   0E75             ; END SHIFT
1944   0E75             ; START TERMS
1945   0E75 D7            push a
1946   0E76 11            mov a, b
1947   0E77 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1948   0E7A D7            push a
1949   0E7B DA            push d
1950   0E7C 26 03 00      mov b, $3
1951   0E7F E7            pop d
1952   0E80 5A            add d, b
1953   0E81 E4            pop a
1954   0E82 32            mov bl, [d]
1955   0E83 A7 00         mov bh, 0
1956   0E85 56            add b, a
1957   0E86 E4            pop a
1958   0E87             ; END TERMS
1959   0E87 E7            pop d
1960   0E88 FD 3E         mov [d], bl
1961   0E8A             ;; for (i = 0; i < 3; i++) { 
1962   0E8A             _for26_init:
1963   0E8A FA FF FF      lea d, [bp + -1] ; $i
1964   0E8D DA            push d
1965   0E8E 26 00 00      mov b, $0
1966   0E91 E7            pop d
1967   0E92 FD 43         mov [d], b
1968   0E94             _for26_cond:
1969   0E94 FA FF FF      lea d, [bp + -1] ; $i
1970   0E97 2A            mov b, [d]
1971   0E98             ; START RELATIONAL
1972   0E98 D7            push a
1973   0E99 11            mov a, b
1974   0E9A 26 03 00      mov b, $3
1975   0E9D B0            cmp a, b
1976   0E9E FD 73         slt ; <= (signed)
1977   0EA0 E4            pop a
1978   0EA1             ; END RELATIONAL
1979   0EA1 C0 00 00      cmp b, 0
1980   0EA4 C6 E4 0E      je _for26_exit
1981   0EA7             _for26_block:
1982   0EA7             ;; output[j++] = output_buffer[i]; 
1983   0EA7 FA 07 00      lea d, [bp + 7] ; $output
1984   0EAA FD 2A         mov d, [d]
1985   0EAC D7            push a
1986   0EAD DA            push d
1987   0EAE FA FD FF      lea d, [bp + -3] ; $j
1988   0EB1 2A            mov b, [d]
1989   0EB2 D8            push b
1990   0EB3 FD 77         inc b
1991   0EB5 FA FD FF      lea d, [bp + -3] ; $j
1992   0EB8 FD 43         mov [d], b
1993   0EBA E5            pop b
1994   0EBB E7            pop d
1995   0EBC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1996   0EC0 E4            pop a
1997   0EC1 DA            push d
1998   0EC2 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1999   0EC5 D7            push a
2000   0EC6 DA            push d
2001   0EC7 FA FF FF      lea d, [bp + -1] ; $i
2002   0ECA 2A            mov b, [d]
2003   0ECB E7            pop d
2004   0ECC 5A            add d, b
2005   0ECD E4            pop a
2006   0ECE 32            mov bl, [d]
2007   0ECF A7 00         mov bh, 0
2008   0ED1 E7            pop d
2009   0ED2 FD 3E         mov [d], bl
2010   0ED4             _for26_update:
2011   0ED4 FA FF FF      lea d, [bp + -1] ; $i
2012   0ED7 2A            mov b, [d]
2013   0ED8 D8            push b
2014   0ED9 FD 77         inc b
2015   0EDB FA FF FF      lea d, [bp + -1] ; $i
2016   0EDE FD 43         mov [d], b
2017   0EE0 E5            pop b
2018   0EE1 0A 94 0E      jmp _for26_cond
2019   0EE4             _for26_exit:
2020   0EE4             ;; i = 0; 
2021   0EE4 FA FF FF      lea d, [bp + -1] ; $i
2022   0EE7 DA            push d
2023   0EE8 26 00 00      mov b, $0
2024   0EEB E7            pop d
2025   0EEC FD 43         mov [d], b
2026   0EEE 0A F1 0E      jmp _if24_exit
2027   0EF1             _if24_exit:
2028   0EF1 0A B3 0C      jmp _while23_cond
2029   0EF4             _while23_exit:
2030   0EF4             ;; if (i) { 
2031   0EF4             _if27_cond:
2032   0EF4 FA FF FF      lea d, [bp + -1] ; $i
2033   0EF7 2A            mov b, [d]
2034   0EF8 C0 00 00      cmp b, 0
2035   0EFB C6 96 10      je _if27_exit
2036   0EFE             _if27_true:
2037   0EFE             ;; for (k = i; k < 4; k++) { 
2038   0EFE             _for28_init:
2039   0EFE FA FB FF      lea d, [bp + -5] ; $k
2040   0F01 DA            push d
2041   0F02 FA FF FF      lea d, [bp + -1] ; $i
2042   0F05 2A            mov b, [d]
2043   0F06 E7            pop d
2044   0F07 FD 43         mov [d], b
2045   0F09             _for28_cond:
2046   0F09 FA FB FF      lea d, [bp + -5] ; $k
2047   0F0C 2A            mov b, [d]
2048   0F0D             ; START RELATIONAL
2049   0F0D D7            push a
2050   0F0E 11            mov a, b
2051   0F0F 26 04 00      mov b, $4
2052   0F12 B0            cmp a, b
2053   0F13 FD 73         slt ; <= (signed)
2054   0F15 E4            pop a
2055   0F16             ; END RELATIONAL
2056   0F16 C0 00 00      cmp b, 0
2057   0F19 C6 3F 0F      je _for28_exit
2058   0F1C             _for28_block:
2059   0F1C             ;; input_buffer[k] = 0; 
2060   0F1C FA F5 FF      lea d, [bp + -11] ; $input_buffer
2061   0F1F D7            push a
2062   0F20 DA            push d
2063   0F21 FA FB FF      lea d, [bp + -5] ; $k
2064   0F24 2A            mov b, [d]
2065   0F25 E7            pop d
2066   0F26 5A            add d, b
2067   0F27 E4            pop a
2068   0F28 DA            push d
2069   0F29 26 00 00      mov b, $0
2070   0F2C E7            pop d
2071   0F2D FD 3E         mov [d], bl
2072   0F2F             _for28_update:
2073   0F2F FA FB FF      lea d, [bp + -5] ; $k
2074   0F32 2A            mov b, [d]
2075   0F33 D8            push b
2076   0F34 FD 77         inc b
2077   0F36 FA FB FF      lea d, [bp + -5] ; $k
2078   0F39 FD 43         mov [d], b
2079   0F3B E5            pop b
2080   0F3C 0A 09 0F      jmp _for28_cond
2081   0F3F             _for28_exit:
2082   0F3F             ;; for (k = 0; k < 4; k++) { 
2083   0F3F             _for29_init:
2084   0F3F FA FB FF      lea d, [bp + -5] ; $k
2085   0F42 DA            push d
2086   0F43 26 00 00      mov b, $0
2087   0F46 E7            pop d
2088   0F47 FD 43         mov [d], b
2089   0F49             _for29_cond:
2090   0F49 FA FB FF      lea d, [bp + -5] ; $k
2091   0F4C 2A            mov b, [d]
2092   0F4D             ; START RELATIONAL
2093   0F4D D7            push a
2094   0F4E 11            mov a, b
2095   0F4F 26 04 00      mov b, $4
2096   0F52 B0            cmp a, b
2097   0F53 FD 73         slt ; <= (signed)
2098   0F55 E4            pop a
2099   0F56             ; END RELATIONAL
2100   0F56 C0 00 00      cmp b, 0
2101   0F59 C6 92 0F      je _for29_exit
2102   0F5C             _for29_block:
2103   0F5C             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2104   0F5C FA F5 FF      lea d, [bp + -11] ; $input_buffer
2105   0F5F D7            push a
2106   0F60 DA            push d
2107   0F61 FA FB FF      lea d, [bp + -5] ; $k
2108   0F64 2A            mov b, [d]
2109   0F65 E7            pop d
2110   0F66 5A            add d, b
2111   0F67 E4            pop a
2112   0F68 DA            push d
2113   0F69 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2114   0F6C D7            push a
2115   0F6D DA            push d
2116   0F6E FA FB FF      lea d, [bp + -5] ; $k
2117   0F71 2A            mov b, [d]
2118   0F72 E7            pop d
2119   0F73 5A            add d, b
2120   0F74 E4            pop a
2121   0F75 32            mov bl, [d]
2122   0F76 A7 00         mov bh, 0
2123   0F78 DD            push bl
2124   0F79 07 87 0B      call base64_char_value
2125   0F7C 51 01 00      add sp, 1
2126   0F7F E7            pop d
2127   0F80 FD 3E         mov [d], bl
2128   0F82             _for29_update:
2129   0F82 FA FB FF      lea d, [bp + -5] ; $k
2130   0F85 2A            mov b, [d]
2131   0F86 D8            push b
2132   0F87 FD 77         inc b
2133   0F89 FA FB FF      lea d, [bp + -5] ; $k
2134   0F8C FD 43         mov [d], b
2135   0F8E E5            pop b
2136   0F8F 0A 49 0F      jmp _for29_cond
2137   0F92             _for29_exit:
2138   0F92             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2139   0F92 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2140   0F95 D7            push a
2141   0F96 DA            push d
2142   0F97 26 00 00      mov b, $0
2143   0F9A E7            pop d
2144   0F9B 5A            add d, b
2145   0F9C E4            pop a
2146   0F9D DA            push d
2147   0F9E FA F5 FF      lea d, [bp + -11] ; $input_buffer
2148   0FA1 D7            push a
2149   0FA2 DA            push d
2150   0FA3 26 00 00      mov b, $0
2151   0FA6 E7            pop d
2152   0FA7 5A            add d, b
2153   0FA8 E4            pop a
2154   0FA9 32            mov bl, [d]
2155   0FAA A7 00         mov bh, 0
2156   0FAC             ; START SHIFT
2157   0FAC D7            push a
2158   0FAD 11            mov a, b
2159   0FAE 26 02 00      mov b, $2
2160   0FB1 FD 39         mov c, b
2161   0FB3 9D            shl a, cl
2162   0FB4 27            mov b, a
2163   0FB5 E4            pop a
2164   0FB6             ; END SHIFT
2165   0FB6             ; START TERMS
2166   0FB6 D7            push a
2167   0FB7 11            mov a, b
2168   0FB8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2169   0FBB D7            push a
2170   0FBC DA            push d
2171   0FBD 26 01 00      mov b, $1
2172   0FC0 E7            pop d
2173   0FC1 5A            add d, b
2174   0FC2 E4            pop a
2175   0FC3 32            mov bl, [d]
2176   0FC4 A7 00         mov bh, 0
2177   0FC6 D7            push a
2178   0FC7 11            mov a, b
2179   0FC8 26 30 00      mov b, $30
2180   0FCB 86            and a, b ; &
2181   0FCC 27            mov b, a
2182   0FCD E4            pop a
2183   0FCE             ; START SHIFT
2184   0FCE D7            push a
2185   0FCF 11            mov a, b
2186   0FD0 26 04 00      mov b, $4
2187   0FD3 FD 39         mov c, b
2188   0FD5 A5            ashr a, cl
2189   0FD6 27            mov b, a
2190   0FD7 E4            pop a
2191   0FD8             ; END SHIFT
2192   0FD8 56            add b, a
2193   0FD9 E4            pop a
2194   0FDA             ; END TERMS
2195   0FDA E7            pop d
2196   0FDB FD 3E         mov [d], bl
2197   0FDD             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2198   0FDD FA F2 FF      lea d, [bp + -14] ; $output_buffer
2199   0FE0 D7            push a
2200   0FE1 DA            push d
2201   0FE2 26 01 00      mov b, $1
2202   0FE5 E7            pop d
2203   0FE6 5A            add d, b
2204   0FE7 E4            pop a
2205   0FE8 DA            push d
2206   0FE9 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2207   0FEC D7            push a
2208   0FED DA            push d
2209   0FEE 26 01 00      mov b, $1
2210   0FF1 E7            pop d
2211   0FF2 5A            add d, b
2212   0FF3 E4            pop a
2213   0FF4 32            mov bl, [d]
2214   0FF5 A7 00         mov bh, 0
2215   0FF7 D7            push a
2216   0FF8 11            mov a, b
2217   0FF9 26 0F 00      mov b, $f
2218   0FFC 86            and a, b ; &
2219   0FFD 27            mov b, a
2220   0FFE E4            pop a
2221   0FFF             ; START SHIFT
2222   0FFF D7            push a
2223   1000 11            mov a, b
2224   1001 26 04 00      mov b, $4
2225   1004 FD 39         mov c, b
2226   1006 9D            shl a, cl
2227   1007 27            mov b, a
2228   1008 E4            pop a
2229   1009             ; END SHIFT
2230   1009             ; START TERMS
2231   1009 D7            push a
2232   100A 11            mov a, b
2233   100B FA F5 FF      lea d, [bp + -11] ; $input_buffer
2234   100E D7            push a
2235   100F DA            push d
2236   1010 26 02 00      mov b, $2
2237   1013 E7            pop d
2238   1014 5A            add d, b
2239   1015 E4            pop a
2240   1016 32            mov bl, [d]
2241   1017 A7 00         mov bh, 0
2242   1019 D7            push a
2243   101A 11            mov a, b
2244   101B 26 3C 00      mov b, $3c
2245   101E 86            and a, b ; &
2246   101F 27            mov b, a
2247   1020 E4            pop a
2248   1021             ; START SHIFT
2249   1021 D7            push a
2250   1022 11            mov a, b
2251   1023 26 02 00      mov b, $2
2252   1026 FD 39         mov c, b
2253   1028 A5            ashr a, cl
2254   1029 27            mov b, a
2255   102A E4            pop a
2256   102B             ; END SHIFT
2257   102B 56            add b, a
2258   102C E4            pop a
2259   102D             ; END TERMS
2260   102D E7            pop d
2261   102E FD 3E         mov [d], bl
2262   1030             ;; for (k = 0; k < i - 1; k++) { 
2263   1030             _for30_init:
2264   1030 FA FB FF      lea d, [bp + -5] ; $k
2265   1033 DA            push d
2266   1034 26 00 00      mov b, $0
2267   1037 E7            pop d
2268   1038 FD 43         mov [d], b
2269   103A             _for30_cond:
2270   103A FA FB FF      lea d, [bp + -5] ; $k
2271   103D 2A            mov b, [d]
2272   103E             ; START RELATIONAL
2273   103E D7            push a
2274   103F 11            mov a, b
2275   1040 FA FF FF      lea d, [bp + -1] ; $i
2276   1043 2A            mov b, [d]
2277   1044             ; START TERMS
2278   1044 D7            push a
2279   1045 11            mov a, b
2280   1046 26 01 00      mov b, $1
2281   1049 60            sub a, b
2282   104A 27            mov b, a
2283   104B E4            pop a
2284   104C             ; END TERMS
2285   104C B0            cmp a, b
2286   104D FD 73         slt ; <= (signed)
2287   104F E4            pop a
2288   1050             ; END RELATIONAL
2289   1050 C0 00 00      cmp b, 0
2290   1053 C6 93 10      je _for30_exit
2291   1056             _for30_block:
2292   1056             ;; output[j++] = output_buffer[k]; 
2293   1056 FA 07 00      lea d, [bp + 7] ; $output
2294   1059 FD 2A         mov d, [d]
2295   105B D7            push a
2296   105C DA            push d
2297   105D FA FD FF      lea d, [bp + -3] ; $j
2298   1060 2A            mov b, [d]
2299   1061 D8            push b
2300   1062 FD 77         inc b
2301   1064 FA FD FF      lea d, [bp + -3] ; $j
2302   1067 FD 43         mov [d], b
2303   1069 E5            pop b
2304   106A E7            pop d
2305   106B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2306   106F E4            pop a
2307   1070 DA            push d
2308   1071 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2309   1074 D7            push a
2310   1075 DA            push d
2311   1076 FA FB FF      lea d, [bp + -5] ; $k
2312   1079 2A            mov b, [d]
2313   107A E7            pop d
2314   107B 5A            add d, b
2315   107C E4            pop a
2316   107D 32            mov bl, [d]
2317   107E A7 00         mov bh, 0
2318   1080 E7            pop d
2319   1081 FD 3E         mov [d], bl
2320   1083             _for30_update:
2321   1083 FA FB FF      lea d, [bp + -5] ; $k
2322   1086 2A            mov b, [d]
2323   1087 D8            push b
2324   1088 FD 77         inc b
2325   108A FA FB FF      lea d, [bp + -5] ; $k
2326   108D FD 43         mov [d], b
2327   108F E5            pop b
2328   1090 0A 3A 10      jmp _for30_cond
2329   1093             _for30_exit:
2330   1093 0A 96 10      jmp _if27_exit
2331   1096             _if27_exit:
2332   1096             ;; output[j] = '\0'; 
2333   1096 FA 07 00      lea d, [bp + 7] ; $output
2334   1099 FD 2A         mov d, [d]
2335   109B D7            push a
2336   109C DA            push d
2337   109D FA FD FF      lea d, [bp + -3] ; $j
2338   10A0 2A            mov b, [d]
2339   10A1 E7            pop d
2340   10A2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2341   10A6 E4            pop a
2342   10A7 DA            push d
2343   10A8 26 00 00      mov b, $0
2344   10AB E7            pop d
2345   10AC FD 3E         mov [d], bl
2346   10AE F9            leave
2347   10AF 09            ret
2348   10B0             
2349   10B0             va_start:
2350   10B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2351   10B3             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2352   10B3 FA 05 00      lea d, [bp + 5] ; $argp
2353   10B6 FD 2A         mov d, [d]
2354   10B8 58 00 00      add d, 0
2355   10BB DA            push d
2356   10BC FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2357   10BF 2A            mov b, [d]
2358   10C0             ; START TERMS
2359   10C0 D7            push a
2360   10C1 11            mov a, b
2361   10C2 26 02 00      mov b, 2
2362   10C5 56            add b, a
2363   10C6 E4            pop a
2364   10C7             ; END TERMS
2365   10C7 E7            pop d
2366   10C8 FD 43         mov [d], b
2367   10CA F9            leave
2368   10CB 09            ret
2369   10CC             
2370   10CC             va_arg:
2371   10CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2372   10CF             ; $p 
2373   10CF 52 02 00      sub sp, 2
2374   10D2             ;; p = argp->current_arg; 
2375   10D2 FA FF FF      lea d, [bp + -1] ; $p
2376   10D5 DA            push d
2377   10D6 FA 05 00      lea d, [bp + 5] ; $argp
2378   10D9 FD 2A         mov d, [d]
2379   10DB 58 00 00      add d, 0
2380   10DE 2A            mov b, [d]
2381   10DF E7            pop d
2382   10E0 FD 43         mov [d], b
2383   10E2             ;; argp->current_arg = argp->current_arg + size; 
2384   10E2 FA 05 00      lea d, [bp + 5] ; $argp
2385   10E5 FD 2A         mov d, [d]
2386   10E7 58 00 00      add d, 0
2387   10EA DA            push d
2388   10EB FA 05 00      lea d, [bp + 5] ; $argp
2389   10EE FD 2A         mov d, [d]
2390   10F0 58 00 00      add d, 0
2391   10F3 2A            mov b, [d]
2392   10F4             ; START TERMS
2393   10F4 D7            push a
2394   10F5 11            mov a, b
2395   10F6 FA 07 00      lea d, [bp + 7] ; $size
2396   10F9 2A            mov b, [d]
2397   10FA 56            add b, a
2398   10FB E4            pop a
2399   10FC             ; END TERMS
2400   10FC E7            pop d
2401   10FD FD 43         mov [d], b
2402   10FF             ;; return p; 
2403   10FF FA FF FF      lea d, [bp + -1] ; $p
2404   1102 2A            mov b, [d]
2405   1103 F9            leave
2406   1104 09            ret
2407   1105             
2408   1105             va_end:
2409   1105 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2410   1108             ;; argp->current_arg =   0   ; 
2411   1108 FA 05 00      lea d, [bp + 5] ; $argp
2412   110B FD 2A         mov d, [d]
2413   110D 58 00 00      add d, 0
2414   1110 DA            push d
2415   1111 26 00 00      mov b, $0
2416   1114 E7            pop d
2417   1115 FD 43         mov [d], b
2418   1117 F9            leave
2419   1118 09            ret
2420   1119             
2421   1119             printf:
2422   1119 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2423   111C             ; $p 
2424   111C             ; $fp 
2425   111C             ; $i 
2426   111C 52 06 00      sub sp, 6
2427   111F             ;; fp = format; 
2428   111F FA FD FF      lea d, [bp + -3] ; $fp
2429   1122 DA            push d
2430   1123 FA 05 00      lea d, [bp + 5] ; $format
2431   1126 2A            mov b, [d]
2432   1127 E7            pop d
2433   1128 FD 43         mov [d], b
2434   112A             ;; p = &format + 2; 
2435   112A FA FF FF      lea d, [bp + -1] ; $p
2436   112D DA            push d
2437   112E FA 05 00      lea d, [bp + 5] ; $format
2438   1131 2D            mov b, d
2439   1132             ; START TERMS
2440   1132 D7            push a
2441   1133 11            mov a, b
2442   1134 26 02 00      mov b, $2
2443   1137 56            add b, a
2444   1138 E4            pop a
2445   1139             ; END TERMS
2446   1139 E7            pop d
2447   113A FD 43         mov [d], b
2448   113C             ;; for(;;){ 
2449   113C             _for31_init:
2450   113C             _for31_cond:
2451   113C             _for31_block:
2452   113C             ;; if(!*fp) break; 
2453   113C             _if32_cond:
2454   113C FA FD FF      lea d, [bp + -3] ; $fp
2455   113F 2A            mov b, [d]
2456   1140 74            mov d, b
2457   1141 32            mov bl, [d]
2458   1142 A7 00         mov bh, 0
2459   1144 C0 00 00      cmp b, 0
2460   1147 FD 71         seq ; !
2461   1149 C0 00 00      cmp b, 0
2462   114C C6 55 11      je _if32_else
2463   114F             _if32_true:
2464   114F             ;; break; 
2465   114F 0A 5B 13      jmp _for31_exit ; for break
2466   1152 0A 58 13      jmp _if32_exit
2467   1155             _if32_else:
2468   1155             ;; if(*fp == '%'){ 
2469   1155             _if33_cond:
2470   1155 FA FD FF      lea d, [bp + -3] ; $fp
2471   1158 2A            mov b, [d]
2472   1159 74            mov d, b
2473   115A 32            mov bl, [d]
2474   115B A7 00         mov bh, 0
2475   115D             ; START RELATIONAL
2476   115D D7            push a
2477   115E 11            mov a, b
2478   115F 26 25 00      mov b, $25
2479   1162 B0            cmp a, b
2480   1163 FD 71         seq ; ==
2481   1165 E4            pop a
2482   1166             ; END RELATIONAL
2483   1166 C0 00 00      cmp b, 0
2484   1169 C6 3C 13      je _if33_else
2485   116C             _if33_true:
2486   116C             ;; fp++; 
2487   116C FA FD FF      lea d, [bp + -3] ; $fp
2488   116F 2A            mov b, [d]
2489   1170 D8            push b
2490   1171 FD 77         inc b
2491   1173 FA FD FF      lea d, [bp + -3] ; $fp
2492   1176 FD 43         mov [d], b
2493   1178 E5            pop b
2494   1179             ;; switch(*fp){ 
2495   1179             _switch34_expr:
2496   1179 FA FD FF      lea d, [bp + -3] ; $fp
2497   117C 2A            mov b, [d]
2498   117D 74            mov d, b
2499   117E 32            mov bl, [d]
2500   117F A7 00         mov bh, 0
2501   1181             _switch34_comparisons:
2502   1181 C1 6C         cmp bl, $6c
2503   1183 C6 AF 11      je _switch34_case0
2504   1186 C1 4C         cmp bl, $4c
2505   1188 C6 AF 11      je _switch34_case1
2506   118B C1 64         cmp bl, $64
2507   118D C6 7C 12      je _switch34_case2
2508   1190 C1 69         cmp bl, $69
2509   1192 C6 7C 12      je _switch34_case3
2510   1195 C1 75         cmp bl, $75
2511   1197 C6 A0 12      je _switch34_case4
2512   119A C1 78         cmp bl, $78
2513   119C C6 C4 12      je _switch34_case5
2514   119F C1 63         cmp bl, $63
2515   11A1 C6 E2 12      je _switch34_case6
2516   11A4 C1 73         cmp bl, $73
2517   11A6 C6 01 13      je _switch34_case7
2518   11A9 0A 20 13      jmp _switch34_default
2519   11AC 0A 2C 13      jmp _switch34_exit
2520   11AF             _switch34_case0:
2521   11AF             _switch34_case1:
2522   11AF             ;; fp++; 
2523   11AF FA FD FF      lea d, [bp + -3] ; $fp
2524   11B2 2A            mov b, [d]
2525   11B3 D8            push b
2526   11B4 FD 77         inc b
2527   11B6 FA FD FF      lea d, [bp + -3] ; $fp
2528   11B9 FD 43         mov [d], b
2529   11BB E5            pop b
2530   11BC             ;; if(*fp == 'd' || *fp == 'i') 
2531   11BC             _if35_cond:
2532   11BC FA FD FF      lea d, [bp + -3] ; $fp
2533   11BF 2A            mov b, [d]
2534   11C0 74            mov d, b
2535   11C1 32            mov bl, [d]
2536   11C2 A7 00         mov bh, 0
2537   11C4             ; START RELATIONAL
2538   11C4 D7            push a
2539   11C5 11            mov a, b
2540   11C6 26 64 00      mov b, $64
2541   11C9 B0            cmp a, b
2542   11CA FD 71         seq ; ==
2543   11CC E4            pop a
2544   11CD             ; END RELATIONAL
2545   11CD D7            push a
2546   11CE 11            mov a, b
2547   11CF FA FD FF      lea d, [bp + -3] ; $fp
2548   11D2 2A            mov b, [d]
2549   11D3 74            mov d, b
2550   11D4 32            mov bl, [d]
2551   11D5 A7 00         mov bh, 0
2552   11D7             ; START RELATIONAL
2553   11D7 D7            push a
2554   11D8 11            mov a, b
2555   11D9 26 69 00      mov b, $69
2556   11DC B0            cmp a, b
2557   11DD FD 71         seq ; ==
2558   11DF E4            pop a
2559   11E0             ; END RELATIONAL
2560   11E0 FD A8         sor a, b ; ||
2561   11E2 E4            pop a
2562   11E3 C0 00 00      cmp b, 0
2563   11E6 C6 FD 11      je _if35_else
2564   11E9             _if35_true:
2565   11E9             ;; print_signed_long(*(long *)p); 
2566   11E9 FD 79         mov g, b
2567   11EB 28            mov b, c
2568   11EC FD AB         swp b
2569   11EE D8            push b
2570   11EF FD 27         mov b, g
2571   11F1 FD AB         swp b
2572   11F3 D8            push b
2573   11F4 07 E9 15      call print_signed_long
2574   11F7 51 04 00      add sp, 4
2575   11FA 0A 67 12      jmp _if35_exit
2576   11FD             _if35_else:
2577   11FD             ;; if(*fp == 'u') 
2578   11FD             _if36_cond:
2579   11FD FA FD FF      lea d, [bp + -3] ; $fp
2580   1200 2A            mov b, [d]
2581   1201 74            mov d, b
2582   1202 32            mov bl, [d]
2583   1203 A7 00         mov bh, 0
2584   1205             ; START RELATIONAL
2585   1205 D7            push a
2586   1206 11            mov a, b
2587   1207 26 75 00      mov b, $75
2588   120A B0            cmp a, b
2589   120B FD 71         seq ; ==
2590   120D E4            pop a
2591   120E             ; END RELATIONAL
2592   120E C0 00 00      cmp b, 0
2593   1211 C6 28 12      je _if36_else
2594   1214             _if36_true:
2595   1214             ;; print_unsigned_long(*(unsigned long *)p); 
2596   1214 FD 79         mov g, b
2597   1216 28            mov b, c
2598   1217 FD AB         swp b
2599   1219 D8            push b
2600   121A FD 27         mov b, g
2601   121C FD AB         swp b
2602   121E D8            push b
2603   121F 07 3B 17      call print_unsigned_long
2604   1222 51 04 00      add sp, 4
2605   1225 0A 67 12      jmp _if36_exit
2606   1228             _if36_else:
2607   1228             ;; if(*fp == 'x') 
2608   1228             _if37_cond:
2609   1228 FA FD FF      lea d, [bp + -3] ; $fp
2610   122B 2A            mov b, [d]
2611   122C 74            mov d, b
2612   122D 32            mov bl, [d]
2613   122E A7 00         mov bh, 0
2614   1230             ; START RELATIONAL
2615   1230 D7            push a
2616   1231 11            mov a, b
2617   1232 26 78 00      mov b, $78
2618   1235 B0            cmp a, b
2619   1236 FD 71         seq ; ==
2620   1238 E4            pop a
2621   1239             ; END RELATIONAL
2622   1239 C0 00 00      cmp b, 0
2623   123C C6 5E 12      je _if37_else
2624   123F             _if37_true:
2625   123F             ;; printx32(*(long int *)p); 
2626   123F FA FF FF      lea d, [bp + -1] ; $p
2627   1242 2A            mov b, [d]
2628   1243 74            mov d, b
2629   1244 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2630   1247 FD 39         mov c, b ; And place it into C
2631   1249 2A            mov b, [d] ; Lower Word in B
2632   124A FD 79         mov g, b
2633   124C 28            mov b, c
2634   124D FD AB         swp b
2635   124F D8            push b
2636   1250 FD 27         mov b, g
2637   1252 FD AB         swp b
2638   1254 D8            push b
2639   1255 07 72 13      call printx32
2640   1258 51 04 00      add sp, 4
2641   125B 0A 67 12      jmp _if37_exit
2642   125E             _if37_else:
2643   125E             ;; err("Unexpected format in printf."); 
2644   125E 26 C0 29      mov b, __s1 ; "Unexpected format in printf."
2645   1261 FD AB         swp b
2646   1263 D8            push b
2647   1264 07 5D 13      call err
2648   1267             _if37_exit:
2649   1267             _if36_exit:
2650   1267             _if35_exit:
2651   1267             ;; p = p + 4; 
2652   1267 FA FF FF      lea d, [bp + -1] ; $p
2653   126A DA            push d
2654   126B FA FF FF      lea d, [bp + -1] ; $p
2655   126E 2A            mov b, [d]
2656   126F             ; START TERMS
2657   126F D7            push a
2658   1270 11            mov a, b
2659   1271 26 04 00      mov b, $4
2660   1274 56            add b, a
2661   1275 E4            pop a
2662   1276             ; END TERMS
2663   1276 E7            pop d
2664   1277 FD 43         mov [d], b
2665   1279             ;; break; 
2666   1279 0A 2C 13      jmp _switch34_exit ; case break
2667   127C             _switch34_case2:
2668   127C             _switch34_case3:
2669   127C             ;; print_signed(*(int*)p); 
2670   127C FA FF FF      lea d, [bp + -1] ; $p
2671   127F 2A            mov b, [d]
2672   1280 74            mov d, b
2673   1281 2A            mov b, [d]
2674   1282 FD AB         swp b
2675   1284 D8            push b
2676   1285 07 F9 14      call print_signed
2677   1288 51 02 00      add sp, 2
2678   128B             ;; p = p + 2; 
2679   128B FA FF FF      lea d, [bp + -1] ; $p
2680   128E DA            push d
2681   128F FA FF FF      lea d, [bp + -1] ; $p
2682   1292 2A            mov b, [d]
2683   1293             ; START TERMS
2684   1293 D7            push a
2685   1294 11            mov a, b
2686   1295 26 02 00      mov b, $2
2687   1298 56            add b, a
2688   1299 E4            pop a
2689   129A             ; END TERMS
2690   129A E7            pop d
2691   129B FD 43         mov [d], b
2692   129D             ;; break; 
2693   129D 0A 2C 13      jmp _switch34_exit ; case break
2694   12A0             _switch34_case4:
2695   12A0             ;; print_unsigned(*(unsigned int*)p); 
2696   12A0 FA FF FF      lea d, [bp + -1] ; $p
2697   12A3 2A            mov b, [d]
2698   12A4 74            mov d, b
2699   12A5 2A            mov b, [d]
2700   12A6 FD AB         swp b
2701   12A8 D8            push b
2702   12A9 07 38 18      call print_unsigned
2703   12AC 51 02 00      add sp, 2
2704   12AF             ;; p = p + 2; 
2705   12AF FA FF FF      lea d, [bp + -1] ; $p
2706   12B2 DA            push d
2707   12B3 FA FF FF      lea d, [bp + -1] ; $p
2708   12B6 2A            mov b, [d]
2709   12B7             ; START TERMS
2710   12B7 D7            push a
2711   12B8 11            mov a, b
2712   12B9 26 02 00      mov b, $2
2713   12BC 56            add b, a
2714   12BD E4            pop a
2715   12BE             ; END TERMS
2716   12BE E7            pop d
2717   12BF FD 43         mov [d], b
2718   12C1             ;; break; 
2719   12C1 0A 2C 13      jmp _switch34_exit ; case break
2720   12C4             _switch34_case5:
2721   12C4             
2722   12C4             ; --- BEGIN INLINE ASM BLOCK
2723   12C4 FA FF FF      lea d, [bp + -1] ; $p
2724   12C7 FD 2A         mov d, [d]
2725   12C9 2A            mov b, [d]
2726   12CA 07 8B 1C      call print_u16x
2727   12CD             ; --- END INLINE ASM BLOCK
2728   12CD             
2729   12CD             ;; p = p + 2; 
2730   12CD FA FF FF      lea d, [bp + -1] ; $p
2731   12D0 DA            push d
2732   12D1 FA FF FF      lea d, [bp + -1] ; $p
2733   12D4 2A            mov b, [d]
2734   12D5             ; START TERMS
2735   12D5 D7            push a
2736   12D6 11            mov a, b
2737   12D7 26 02 00      mov b, $2
2738   12DA 56            add b, a
2739   12DB E4            pop a
2740   12DC             ; END TERMS
2741   12DC E7            pop d
2742   12DD FD 43         mov [d], b
2743   12DF             ;; break; 
2744   12DF 0A 2C 13      jmp _switch34_exit ; case break
2745   12E2             _switch34_case6:
2746   12E2             
2747   12E2             ; --- BEGIN INLINE ASM BLOCK
2748   12E2 FA FF FF      lea d, [bp + -1] ; $p
2749   12E5 FD 2A         mov d, [d]
2750   12E7 1E            mov al, [d]
2751   12E8 23            mov ah, al
2752   12E9 07 E9 1A      call _putchar
2753   12EC             ; --- END INLINE ASM BLOCK
2754   12EC             
2755   12EC             ;; p = p + 2; 
2756   12EC FA FF FF      lea d, [bp + -1] ; $p
2757   12EF DA            push d
2758   12F0 FA FF FF      lea d, [bp + -1] ; $p
2759   12F3 2A            mov b, [d]
2760   12F4             ; START TERMS
2761   12F4 D7            push a
2762   12F5 11            mov a, b
2763   12F6 26 02 00      mov b, $2
2764   12F9 56            add b, a
2765   12FA E4            pop a
2766   12FB             ; END TERMS
2767   12FB E7            pop d
2768   12FC FD 43         mov [d], b
2769   12FE             ;; break; 
2770   12FE 0A 2C 13      jmp _switch34_exit ; case break
2771   1301             _switch34_case7:
2772   1301             
2773   1301             ; --- BEGIN INLINE ASM BLOCK
2774   1301 FA FF FF      lea d, [bp + -1] ; $p
2775   1304 FD 2A         mov d, [d]
2776   1306 FD 2A         mov d, [d]
2777   1308 07 33 1C      call _puts
2778   130B             ; --- END INLINE ASM BLOCK
2779   130B             
2780   130B             ;; p = p + 2; 
2781   130B FA FF FF      lea d, [bp + -1] ; $p
2782   130E DA            push d
2783   130F FA FF FF      lea d, [bp + -1] ; $p
2784   1312 2A            mov b, [d]
2785   1313             ; START TERMS
2786   1313 D7            push a
2787   1314 11            mov a, b
2788   1315 26 02 00      mov b, $2
2789   1318 56            add b, a
2790   1319 E4            pop a
2791   131A             ; END TERMS
2792   131A E7            pop d
2793   131B FD 43         mov [d], b
2794   131D             ;; break; 
2795   131D 0A 2C 13      jmp _switch34_exit ; case break
2796   1320             _switch34_default:
2797   1320             ;; print("Error: Unknown argument type.\n"); 
2798   1320 26 DD 29      mov b, __s2 ; "Error: Unknown argument type.\n"
2799   1323 FD AB         swp b
2800   1325 D8            push b
2801   1326 07 50 19      call print
2802   1329 51 02 00      add sp, 2
2803   132C             _switch34_exit:
2804   132C             ;; fp++; 
2805   132C FA FD FF      lea d, [bp + -3] ; $fp
2806   132F 2A            mov b, [d]
2807   1330 D8            push b
2808   1331 FD 77         inc b
2809   1333 FA FD FF      lea d, [bp + -3] ; $fp
2810   1336 FD 43         mov [d], b
2811   1338 E5            pop b
2812   1339 0A 58 13      jmp _if33_exit
2813   133C             _if33_else:
2814   133C             ;; putchar(*fp); 
2815   133C FA FD FF      lea d, [bp + -3] ; $fp
2816   133F 2A            mov b, [d]
2817   1340 74            mov d, b
2818   1341 32            mov bl, [d]
2819   1342 A7 00         mov bh, 0
2820   1344 DD            push bl
2821   1345 07 08 19      call putchar
2822   1348 51 01 00      add sp, 1
2823   134B             ;; fp++; 
2824   134B FA FD FF      lea d, [bp + -3] ; $fp
2825   134E 2A            mov b, [d]
2826   134F D8            push b
2827   1350 FD 77         inc b
2828   1352 FA FD FF      lea d, [bp + -3] ; $fp
2829   1355 FD 43         mov [d], b
2830   1357 E5            pop b
2831   1358             _if33_exit:
2832   1358             _if32_exit:
2833   1358             _for31_update:
2834   1358 0A 3C 11      jmp _for31_cond
2835   135B             _for31_exit:
2836   135B F9            leave
2837   135C 09            ret
2838   135D             
2839   135D             err:
2840   135D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2841   1360             ;; print(e); 
2842   1360 FA 05 00      lea d, [bp + 5] ; $e
2843   1363 2A            mov b, [d]
2844   1364 FD AB         swp b
2845   1366 D8            push b
2846   1367 07 50 19      call print
2847   136A 51 02 00      add sp, 2
2848   136D             ;; exit(); 
2849   136D 07 2F 06      call exit
2850   1370 F9            leave
2851   1371 09            ret
2852   1372             
2853   1372             printx32:
2854   1372 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2855   1375             
2856   1375             ; --- BEGIN INLINE ASM BLOCK
2857   1375 FA 05 00      lea d, [bp + 5] ; $hex
2858   1378 2B 02 00      mov b, [d+2]
2859   137B 07 8B 1C      call print_u16x
2860   137E 2A            mov b, [d]
2861   137F 07 8B 1C      call print_u16x
2862   1382             ; --- END INLINE ASM BLOCK
2863   1382             
2864   1382 F9            leave
2865   1383 09            ret
2866   1384             
2867   1384             printx16:
2868   1384 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2869   1387             
2870   1387             ; --- BEGIN INLINE ASM BLOCK
2871   1387 FA 05 00      lea d, [bp + 5] ; $hex
2872   138A 2A            mov b, [d]
2873   138B 07 8B 1C      call print_u16x
2874   138E             ; --- END INLINE ASM BLOCK
2875   138E             
2876   138E F9            leave
2877   138F 09            ret
2878   1390             
2879   1390             printx8:
2880   1390 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2881   1393             
2882   1393             ; --- BEGIN INLINE ASM BLOCK
2883   1393 FA 05 00      lea d, [bp + 5] ; $hex
2884   1396 32            mov bl, [d]
2885   1397 07 CF 1C      call print_u8x
2886   139A             ; --- END INLINE ASM BLOCK
2887   139A             
2888   139A F9            leave
2889   139B 09            ret
2890   139C             
2891   139C             hex_to_int:
2892   139C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2893   139F             ; $value 
2894   139F 10 00 00      mov a, $0
2895   13A2 45 FF FF      mov [bp + -1], a
2896   13A5             ; $i 
2897   13A5             ; $hex_char 
2898   13A5             ; $len 
2899   13A5 52 07 00      sub sp, 7
2900   13A8             ;; len = strlen(hex_string); 
2901   13A8 FA FA FF      lea d, [bp + -6] ; $len
2902   13AB DA            push d
2903   13AC FA 05 00      lea d, [bp + 5] ; $hex_string
2904   13AF 2A            mov b, [d]
2905   13B0 FD AB         swp b
2906   13B2 D8            push b
2907   13B3 07 E6 05      call strlen
2908   13B6 51 02 00      add sp, 2
2909   13B9 E7            pop d
2910   13BA FD 43         mov [d], b
2911   13BC             ;; for (i = 0; i < len; i++) { 
2912   13BC             _for38_init:
2913   13BC FA FD FF      lea d, [bp + -3] ; $i
2914   13BF DA            push d
2915   13C0 26 00 00      mov b, $0
2916   13C3 E7            pop d
2917   13C4 FD 43         mov [d], b
2918   13C6             _for38_cond:
2919   13C6 FA FD FF      lea d, [bp + -3] ; $i
2920   13C9 2A            mov b, [d]
2921   13CA             ; START RELATIONAL
2922   13CA D7            push a
2923   13CB 11            mov a, b
2924   13CC FA FA FF      lea d, [bp + -6] ; $len
2925   13CF 2A            mov b, [d]
2926   13D0 B0            cmp a, b
2927   13D1 FD 73         slt ; <= (signed)
2928   13D3 E4            pop a
2929   13D4             ; END RELATIONAL
2930   13D4 C0 00 00      cmp b, 0
2931   13D7 C6 D9 14      je _for38_exit
2932   13DA             _for38_block:
2933   13DA             ;; hex_char = hex_string[i]; 
2934   13DA FA FC FF      lea d, [bp + -4] ; $hex_char
2935   13DD DA            push d
2936   13DE FA 05 00      lea d, [bp + 5] ; $hex_string
2937   13E1 FD 2A         mov d, [d]
2938   13E3 D7            push a
2939   13E4 DA            push d
2940   13E5 FA FD FF      lea d, [bp + -3] ; $i
2941   13E8 2A            mov b, [d]
2942   13E9 E7            pop d
2943   13EA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2944   13EE E4            pop a
2945   13EF 32            mov bl, [d]
2946   13F0 A7 00         mov bh, 0
2947   13F2 E7            pop d
2948   13F3 FD 3E         mov [d], bl
2949   13F5             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2950   13F5             _if39_cond:
2951   13F5 FA FC FF      lea d, [bp + -4] ; $hex_char
2952   13F8 32            mov bl, [d]
2953   13F9 A7 00         mov bh, 0
2954   13FB             ; START RELATIONAL
2955   13FB D7            push a
2956   13FC 11            mov a, b
2957   13FD 26 61 00      mov b, $61
2958   1400 B0            cmp a, b
2959   1401 FD 80         sge ; >=
2960   1403 E4            pop a
2961   1404             ; END RELATIONAL
2962   1404 D7            push a
2963   1405 11            mov a, b
2964   1406 FA FC FF      lea d, [bp + -4] ; $hex_char
2965   1409 32            mov bl, [d]
2966   140A A7 00         mov bh, 0
2967   140C             ; START RELATIONAL
2968   140C D7            push a
2969   140D 11            mov a, b
2970   140E 26 66 00      mov b, $66
2971   1411 B0            cmp a, b
2972   1412 FD 74         sle ; <=
2973   1414 E4            pop a
2974   1415             ; END RELATIONAL
2975   1415 FD A7         sand a, b ; &&
2976   1417 E4            pop a
2977   1418 C0 00 00      cmp b, 0
2978   141B C6 4C 14      je _if39_else
2979   141E             _if39_true:
2980   141E             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2981   141E FA FF FF      lea d, [bp + -1] ; $value
2982   1421 DA            push d
2983   1422 FA FF FF      lea d, [bp + -1] ; $value
2984   1425 2A            mov b, [d]
2985   1426             ; START FACTORS
2986   1426 D7            push a
2987   1427 11            mov a, b
2988   1428 26 10 00      mov b, $10
2989   142B AC            mul a, b ; *
2990   142C 11            mov a, b
2991   142D 27            mov b, a
2992   142E E4            pop a
2993   142F             ; END FACTORS
2994   142F             ; START TERMS
2995   142F D7            push a
2996   1430 11            mov a, b
2997   1431 FA FC FF      lea d, [bp + -4] ; $hex_char
2998   1434 32            mov bl, [d]
2999   1435 A7 00         mov bh, 0
3000   1437             ; START TERMS
3001   1437 D7            push a
3002   1438 11            mov a, b
3003   1439 26 61 00      mov b, $61
3004   143C 60            sub a, b
3005   143D 27            mov b, a
3006   143E 11            mov a, b
3007   143F 26 0A 00      mov b, $a
3008   1442 56            add b, a
3009   1443 E4            pop a
3010   1444             ; END TERMS
3011   1444 56            add b, a
3012   1445 E4            pop a
3013   1446             ; END TERMS
3014   1446 E7            pop d
3015   1447 FD 43         mov [d], b
3016   1449 0A C9 14      jmp _if39_exit
3017   144C             _if39_else:
3018   144C             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3019   144C             _if40_cond:
3020   144C FA FC FF      lea d, [bp + -4] ; $hex_char
3021   144F 32            mov bl, [d]
3022   1450 A7 00         mov bh, 0
3023   1452             ; START RELATIONAL
3024   1452 D7            push a
3025   1453 11            mov a, b
3026   1454 26 41 00      mov b, $41
3027   1457 B0            cmp a, b
3028   1458 FD 80         sge ; >=
3029   145A E4            pop a
3030   145B             ; END RELATIONAL
3031   145B D7            push a
3032   145C 11            mov a, b
3033   145D FA FC FF      lea d, [bp + -4] ; $hex_char
3034   1460 32            mov bl, [d]
3035   1461 A7 00         mov bh, 0
3036   1463             ; START RELATIONAL
3037   1463 D7            push a
3038   1464 11            mov a, b
3039   1465 26 46 00      mov b, $46
3040   1468 B0            cmp a, b
3041   1469 FD 74         sle ; <=
3042   146B E4            pop a
3043   146C             ; END RELATIONAL
3044   146C FD A7         sand a, b ; &&
3045   146E E4            pop a
3046   146F C0 00 00      cmp b, 0
3047   1472 C6 A3 14      je _if40_else
3048   1475             _if40_true:
3049   1475             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3050   1475 FA FF FF      lea d, [bp + -1] ; $value
3051   1478 DA            push d
3052   1479 FA FF FF      lea d, [bp + -1] ; $value
3053   147C 2A            mov b, [d]
3054   147D             ; START FACTORS
3055   147D D7            push a
3056   147E 11            mov a, b
3057   147F 26 10 00      mov b, $10
3058   1482 AC            mul a, b ; *
3059   1483 11            mov a, b
3060   1484 27            mov b, a
3061   1485 E4            pop a
3062   1486             ; END FACTORS
3063   1486             ; START TERMS
3064   1486 D7            push a
3065   1487 11            mov a, b
3066   1488 FA FC FF      lea d, [bp + -4] ; $hex_char
3067   148B 32            mov bl, [d]
3068   148C A7 00         mov bh, 0
3069   148E             ; START TERMS
3070   148E D7            push a
3071   148F 11            mov a, b
3072   1490 26 41 00      mov b, $41
3073   1493 60            sub a, b
3074   1494 27            mov b, a
3075   1495 11            mov a, b
3076   1496 26 0A 00      mov b, $a
3077   1499 56            add b, a
3078   149A E4            pop a
3079   149B             ; END TERMS
3080   149B 56            add b, a
3081   149C E4            pop a
3082   149D             ; END TERMS
3083   149D E7            pop d
3084   149E FD 43         mov [d], b
3085   14A0 0A C9 14      jmp _if40_exit
3086   14A3             _if40_else:
3087   14A3             ;; value = (value * 16) + (hex_char - '0'); 
3088   14A3 FA FF FF      lea d, [bp + -1] ; $value
3089   14A6 DA            push d
3090   14A7 FA FF FF      lea d, [bp + -1] ; $value
3091   14AA 2A            mov b, [d]
3092   14AB             ; START FACTORS
3093   14AB D7            push a
3094   14AC 11            mov a, b
3095   14AD 26 10 00      mov b, $10
3096   14B0 AC            mul a, b ; *
3097   14B1 11            mov a, b
3098   14B2 27            mov b, a
3099   14B3 E4            pop a
3100   14B4             ; END FACTORS
3101   14B4             ; START TERMS
3102   14B4 D7            push a
3103   14B5 11            mov a, b
3104   14B6 FA FC FF      lea d, [bp + -4] ; $hex_char
3105   14B9 32            mov bl, [d]
3106   14BA A7 00         mov bh, 0
3107   14BC             ; START TERMS
3108   14BC D7            push a
3109   14BD 11            mov a, b
3110   14BE 26 30 00      mov b, $30
3111   14C1 60            sub a, b
3112   14C2 27            mov b, a
3113   14C3 E4            pop a
3114   14C4             ; END TERMS
3115   14C4 56            add b, a
3116   14C5 E4            pop a
3117   14C6             ; END TERMS
3118   14C6 E7            pop d
3119   14C7 FD 43         mov [d], b
3120   14C9             _if40_exit:
3121   14C9             _if39_exit:
3122   14C9             _for38_update:
3123   14C9 FA FD FF      lea d, [bp + -3] ; $i
3124   14CC 2A            mov b, [d]
3125   14CD D8            push b
3126   14CE FD 77         inc b
3127   14D0 FA FD FF      lea d, [bp + -3] ; $i
3128   14D3 FD 43         mov [d], b
3129   14D5 E5            pop b
3130   14D6 0A C6 13      jmp _for38_cond
3131   14D9             _for38_exit:
3132   14D9             ;; return value; 
3133   14D9 FA FF FF      lea d, [bp + -1] ; $value
3134   14DC 2A            mov b, [d]
3135   14DD F9            leave
3136   14DE 09            ret
3137   14DF             
3138   14DF             gets:
3139   14DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3140   14E2             
3141   14E2             ; --- BEGIN INLINE ASM BLOCK
3142   14E2 FA 05 00      lea d, [bp + 5] ; $s
3143   14E5 15            mov a, [d]
3144   14E6 3C            mov d, a
3145   14E7 07 F0 1A      call _gets
3146   14EA             ; --- END INLINE ASM BLOCK
3147   14EA             
3148   14EA             ;; return strlen(s); 
3149   14EA FA 05 00      lea d, [bp + 5] ; $s
3150   14ED 2A            mov b, [d]
3151   14EE FD AB         swp b
3152   14F0 D8            push b
3153   14F1 07 E6 05      call strlen
3154   14F4 51 02 00      add sp, 2
3155   14F7 F9            leave
3156   14F8 09            ret
3157   14F9             
3158   14F9             print_signed:
3159   14F9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3160   14FC             ; $digits 
3161   14FC             ; $i 
3162   14FC 10 00 00      mov a, $0
3163   14FF 45 FA FF      mov [bp + -6], a
3164   1502 52 07 00      sub sp, 7
3165   1505             ;; if (num < 0) { 
3166   1505             _if41_cond:
3167   1505 FA 05 00      lea d, [bp + 5] ; $num
3168   1508 2A            mov b, [d]
3169   1509             ; START RELATIONAL
3170   1509 D7            push a
3171   150A 11            mov a, b
3172   150B 26 00 00      mov b, $0
3173   150E B0            cmp a, b
3174   150F FD 73         slt ; <= (signed)
3175   1511 E4            pop a
3176   1512             ; END RELATIONAL
3177   1512 C0 00 00      cmp b, 0
3178   1515 C6 32 15      je _if41_else
3179   1518             _if41_true:
3180   1518             ;; putchar('-'); 
3181   1518 26 2D 00      mov b, $2d
3182   151B DD            push bl
3183   151C 07 08 19      call putchar
3184   151F 51 01 00      add sp, 1
3185   1522             ;; num = -num; 
3186   1522 FA 05 00      lea d, [bp + 5] ; $num
3187   1525 DA            push d
3188   1526 FA 05 00      lea d, [bp + 5] ; $num
3189   1529 2A            mov b, [d]
3190   152A FD 97         neg b
3191   152C E7            pop d
3192   152D FD 43         mov [d], b
3193   152F 0A 54 15      jmp _if41_exit
3194   1532             _if41_else:
3195   1532             ;; if (num == 0) { 
3196   1532             _if42_cond:
3197   1532 FA 05 00      lea d, [bp + 5] ; $num
3198   1535 2A            mov b, [d]
3199   1536             ; START RELATIONAL
3200   1536 D7            push a
3201   1537 11            mov a, b
3202   1538 26 00 00      mov b, $0
3203   153B B0            cmp a, b
3204   153C FD 71         seq ; ==
3205   153E E4            pop a
3206   153F             ; END RELATIONAL
3207   153F C0 00 00      cmp b, 0
3208   1542 C6 54 15      je _if42_exit
3209   1545             _if42_true:
3210   1545             ;; putchar('0'); 
3211   1545 26 30 00      mov b, $30
3212   1548 DD            push bl
3213   1549 07 08 19      call putchar
3214   154C 51 01 00      add sp, 1
3215   154F             ;; return; 
3216   154F F9            leave
3217   1550 09            ret
3218   1551 0A 54 15      jmp _if42_exit
3219   1554             _if42_exit:
3220   1554             _if41_exit:
3221   1554             ;; while (num > 0) { 
3222   1554             _while43_cond:
3223   1554 FA 05 00      lea d, [bp + 5] ; $num
3224   1557 2A            mov b, [d]
3225   1558             ; START RELATIONAL
3226   1558 D7            push a
3227   1559 11            mov a, b
3228   155A 26 00 00      mov b, $0
3229   155D B0            cmp a, b
3230   155E FD 7F         sgt ; >
3231   1560 E4            pop a
3232   1561             ; END RELATIONAL
3233   1561 C0 00 00      cmp b, 0
3234   1564 C6 AE 15      je _while43_exit
3235   1567             _while43_block:
3236   1567             ;; digits[i] = '0' + (num % 10); 
3237   1567 FA FC FF      lea d, [bp + -4] ; $digits
3238   156A D7            push a
3239   156B DA            push d
3240   156C FA FA FF      lea d, [bp + -6] ; $i
3241   156F 2A            mov b, [d]
3242   1570 E7            pop d
3243   1571 5A            add d, b
3244   1572 E4            pop a
3245   1573 DA            push d
3246   1574 26 30 00      mov b, $30
3247   1577             ; START TERMS
3248   1577 D7            push a
3249   1578 11            mov a, b
3250   1579 FA 05 00      lea d, [bp + 5] ; $num
3251   157C 2A            mov b, [d]
3252   157D             ; START FACTORS
3253   157D D7            push a
3254   157E 11            mov a, b
3255   157F 26 0A 00      mov b, $a
3256   1582 AE            div a, b ; 
3257   1583 11            mov a, b
3258   1584 27            mov b, a
3259   1585 E4            pop a
3260   1586             ; END FACTORS
3261   1586 56            add b, a
3262   1587 E4            pop a
3263   1588             ; END TERMS
3264   1588 E7            pop d
3265   1589 FD 3E         mov [d], bl
3266   158B             ;; num = num / 10; 
3267   158B FA 05 00      lea d, [bp + 5] ; $num
3268   158E DA            push d
3269   158F FA 05 00      lea d, [bp + 5] ; $num
3270   1592 2A            mov b, [d]
3271   1593             ; START FACTORS
3272   1593 D7            push a
3273   1594 11            mov a, b
3274   1595 26 0A 00      mov b, $a
3275   1598 AE            div a, b
3276   1599 27            mov b, a
3277   159A E4            pop a
3278   159B             ; END FACTORS
3279   159B E7            pop d
3280   159C FD 43         mov [d], b
3281   159E             ;; i++; 
3282   159E FA FA FF      lea d, [bp + -6] ; $i
3283   15A1 2A            mov b, [d]
3284   15A2 D8            push b
3285   15A3 FD 77         inc b
3286   15A5 FA FA FF      lea d, [bp + -6] ; $i
3287   15A8 FD 43         mov [d], b
3288   15AA E5            pop b
3289   15AB 0A 54 15      jmp _while43_cond
3290   15AE             _while43_exit:
3291   15AE             ;; while (i > 0) { 
3292   15AE             _while44_cond:
3293   15AE FA FA FF      lea d, [bp + -6] ; $i
3294   15B1 2A            mov b, [d]
3295   15B2             ; START RELATIONAL
3296   15B2 D7            push a
3297   15B3 11            mov a, b
3298   15B4 26 00 00      mov b, $0
3299   15B7 B0            cmp a, b
3300   15B8 FD 7F         sgt ; >
3301   15BA E4            pop a
3302   15BB             ; END RELATIONAL
3303   15BB C0 00 00      cmp b, 0
3304   15BE C6 E7 15      je _while44_exit
3305   15C1             _while44_block:
3306   15C1             ;; i--; 
3307   15C1 FA FA FF      lea d, [bp + -6] ; $i
3308   15C4 2A            mov b, [d]
3309   15C5 D8            push b
3310   15C6 FD 7D         dec b
3311   15C8 FA FA FF      lea d, [bp + -6] ; $i
3312   15CB FD 43         mov [d], b
3313   15CD E5            pop b
3314   15CE             ;; putchar(digits[i]); 
3315   15CE FA FC FF      lea d, [bp + -4] ; $digits
3316   15D1 D7            push a
3317   15D2 DA            push d
3318   15D3 FA FA FF      lea d, [bp + -6] ; $i
3319   15D6 2A            mov b, [d]
3320   15D7 E7            pop d
3321   15D8 5A            add d, b
3322   15D9 E4            pop a
3323   15DA 32            mov bl, [d]
3324   15DB A7 00         mov bh, 0
3325   15DD DD            push bl
3326   15DE 07 08 19      call putchar
3327   15E1 51 01 00      add sp, 1
3328   15E4 0A AE 15      jmp _while44_cond
3329   15E7             _while44_exit:
3330   15E7 F9            leave
3331   15E8 09            ret
3332   15E9             
3333   15E9             print_signed_long:
3334   15E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3335   15EC             ; $digits 
3336   15EC             ; $i 
3337   15EC 10 00 00      mov a, $0
3338   15EF 45 F5 FF      mov [bp + -11], a
3339   15F2 52 0C 00      sub sp, 12
3340   15F5             ;; if (num < 0) { 
3341   15F5             _if45_cond:
3342   15F5 FA 05 00      lea d, [bp + 5] ; $num
3343   15F8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3344   15FB FD 39         mov c, b ; And place it into C
3345   15FD 2A            mov b, [d] ; Lower Word in B
3346   15FE             ; START RELATIONAL
3347   15FE D7            push a
3348   15FF FD D8         push g
3349   1601 11            mov a, b
3350   1602 FD 7A         mov g, c
3351   1604 26 00 00      mov b, $0
3352   1607 4D            mov si, a
3353   1608 11            mov a, b
3354   1609 4F            mov di, a
3355   160A FD 12         mov a, g
3356   160C 28            mov b, c
3357   160D B0            cmp a, b
3358   160E FD 75         slu ; <
3359   1610 D8            push b
3360   1611 28            mov b, c
3361   1612 FD 71         seq ; ==
3362   1614 D8            push b
3363   1615 50            mov a, di
3364   1616 27            mov b, a
3365   1617 4E            mov a, si
3366   1618 B0            cmp a, b
3367   1619 FD 75         slu ; <
3368   161B E4            pop a
3369   161C FD 92         and b, a
3370   161E E4            pop a
3371   161F FD 70         or b, a
3372   1621               
3373   1621 FD F1         pop g
3374   1623 E4            pop a
3375   1624             ; END RELATIONAL
3376   1624 C0 00 00      cmp b, 0
3377   1627 C6 4E 16      je _if45_else
3378   162A             _if45_true:
3379   162A             ;; putchar('-'); 
3380   162A 26 2D 00      mov b, $2d
3381   162D DD            push bl
3382   162E 07 08 19      call putchar
3383   1631 51 01 00      add sp, 1
3384   1634             ;; num = -num; 
3385   1634 FA 05 00      lea d, [bp + 5] ; $num
3386   1637 DA            push d
3387   1638 FA 05 00      lea d, [bp + 5] ; $num
3388   163B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3389   163E FD 39         mov c, b ; And place it into C
3390   1640 2A            mov b, [d] ; Lower Word in B
3391   1641 FD 97         neg b
3392   1643 E7            pop d
3393   1644 FD 43         mov [d], b
3394   1646 28            mov b, c
3395   1647 FD 44 02 00   mov [d + 2], b
3396   164B 0A 85 16      jmp _if45_exit
3397   164E             _if45_else:
3398   164E             ;; if (num == 0) { 
3399   164E             _if46_cond:
3400   164E FA 05 00      lea d, [bp + 5] ; $num
3401   1651 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3402   1654 FD 39         mov c, b ; And place it into C
3403   1656 2A            mov b, [d] ; Lower Word in B
3404   1657             ; START RELATIONAL
3405   1657 D7            push a
3406   1658 FD D8         push g
3407   165A 11            mov a, b
3408   165B FD 7A         mov g, c
3409   165D 26 00 00      mov b, $0
3410   1660 B0            cmp a, b
3411   1661 FD 71         seq ; ==
3412   1663 D8            push b
3413   1664 12            mov a, c
3414   1665 FD 27         mov b, g
3415   1667 B0            cmp a, b
3416   1668 FD 71         seq ; ==
3417   166A E4            pop a
3418   166B FD A7         sand a, b
3419   166D FD F1         pop g
3420   166F E4            pop a
3421   1670             ; END RELATIONAL
3422   1670 C0 00 00      cmp b, 0
3423   1673 C6 85 16      je _if46_exit
3424   1676             _if46_true:
3425   1676             ;; putchar('0'); 
3426   1676 26 30 00      mov b, $30
3427   1679 DD            push bl
3428   167A 07 08 19      call putchar
3429   167D 51 01 00      add sp, 1
3430   1680             ;; return; 
3431   1680 F9            leave
3432   1681 09            ret
3433   1682 0A 85 16      jmp _if46_exit
3434   1685             _if46_exit:
3435   1685             _if45_exit:
3436   1685             ;; while (num > 0) { 
3437   1685             _while47_cond:
3438   1685 FA 05 00      lea d, [bp + 5] ; $num
3439   1688 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3440   168B FD 39         mov c, b ; And place it into C
3441   168D 2A            mov b, [d] ; Lower Word in B
3442   168E             ; START RELATIONAL
3443   168E D7            push a
3444   168F FD D8         push g
3445   1691 11            mov a, b
3446   1692 FD 7A         mov g, c
3447   1694 26 00 00      mov b, $0
3448   1697 B0            cmp a, b
3449   1698 FD 7F         sgt ; >
3450   169A FD F1         pop g
3451   169C E4            pop a
3452   169D             ; END RELATIONAL
3453   169D C0 00 00      cmp b, 0
3454   16A0 C6 00 17      je _while47_exit
3455   16A3             _while47_block:
3456   16A3             ;; digits[i] = '0' + (num % 10); 
3457   16A3 FA F7 FF      lea d, [bp + -9] ; $digits
3458   16A6 D7            push a
3459   16A7 DA            push d
3460   16A8 FA F5 FF      lea d, [bp + -11] ; $i
3461   16AB 2A            mov b, [d]
3462   16AC E7            pop d
3463   16AD 5A            add d, b
3464   16AE E4            pop a
3465   16AF DA            push d
3466   16B0 26 30 00      mov b, $30
3467   16B3             ; START TERMS
3468   16B3 D7            push a
3469   16B4 11            mov a, b
3470   16B5 FA 05 00      lea d, [bp + 5] ; $num
3471   16B8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3472   16BB FD 39         mov c, b ; And place it into C
3473   16BD 2A            mov b, [d] ; Lower Word in B
3474   16BE             ; START FACTORS
3475   16BE D7            push a
3476   16BF 11            mov a, b
3477   16C0 26 0A 00      mov b, $a
3478   16C3 AE            div a, b ; 
3479   16C4 11            mov a, b
3480   16C5 27            mov b, a
3481   16C6 E4            pop a
3482   16C7             ; END FACTORS
3483   16C7 54            add a, b
3484   16C8 D7            push a
3485   16C9 FD 12         mov a, g
3486   16CB 28            mov b, c
3487   16CC 5C            adc a, b
3488   16CD 39            mov c, a
3489   16CE E5            pop b
3490   16CF E4            pop a
3491   16D0             ; END TERMS
3492   16D0 E7            pop d
3493   16D1 FD 3E         mov [d], bl
3494   16D3             ;; num = num / 10; 
3495   16D3 FA 05 00      lea d, [bp + 5] ; $num
3496   16D6 DA            push d
3497   16D7 FA 05 00      lea d, [bp + 5] ; $num
3498   16DA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3499   16DD FD 39         mov c, b ; And place it into C
3500   16DF 2A            mov b, [d] ; Lower Word in B
3501   16E0             ; START FACTORS
3502   16E0 D7            push a
3503   16E1 11            mov a, b
3504   16E2 26 0A 00      mov b, $a
3505   16E5 AE            div a, b
3506   16E6 27            mov b, a
3507   16E7 E4            pop a
3508   16E8             ; END FACTORS
3509   16E8 E7            pop d
3510   16E9 FD 43         mov [d], b
3511   16EB 28            mov b, c
3512   16EC FD 44 02 00   mov [d + 2], b
3513   16F0             ;; i++; 
3514   16F0 FA F5 FF      lea d, [bp + -11] ; $i
3515   16F3 2A            mov b, [d]
3516   16F4 D8            push b
3517   16F5 FD 77         inc b
3518   16F7 FA F5 FF      lea d, [bp + -11] ; $i
3519   16FA FD 43         mov [d], b
3520   16FC E5            pop b
3521   16FD 0A 85 16      jmp _while47_cond
3522   1700             _while47_exit:
3523   1700             ;; while (i > 0) { 
3524   1700             _while48_cond:
3525   1700 FA F5 FF      lea d, [bp + -11] ; $i
3526   1703 2A            mov b, [d]
3527   1704             ; START RELATIONAL
3528   1704 D7            push a
3529   1705 11            mov a, b
3530   1706 26 00 00      mov b, $0
3531   1709 B0            cmp a, b
3532   170A FD 7F         sgt ; >
3533   170C E4            pop a
3534   170D             ; END RELATIONAL
3535   170D C0 00 00      cmp b, 0
3536   1710 C6 39 17      je _while48_exit
3537   1713             _while48_block:
3538   1713             ;; i--; 
3539   1713 FA F5 FF      lea d, [bp + -11] ; $i
3540   1716 2A            mov b, [d]
3541   1717 D8            push b
3542   1718 FD 7D         dec b
3543   171A FA F5 FF      lea d, [bp + -11] ; $i
3544   171D FD 43         mov [d], b
3545   171F E5            pop b
3546   1720             ;; putchar(digits[i]); 
3547   1720 FA F7 FF      lea d, [bp + -9] ; $digits
3548   1723 D7            push a
3549   1724 DA            push d
3550   1725 FA F5 FF      lea d, [bp + -11] ; $i
3551   1728 2A            mov b, [d]
3552   1729 E7            pop d
3553   172A 5A            add d, b
3554   172B E4            pop a
3555   172C 32            mov bl, [d]
3556   172D A7 00         mov bh, 0
3557   172F DD            push bl
3558   1730 07 08 19      call putchar
3559   1733 51 01 00      add sp, 1
3560   1736 0A 00 17      jmp _while48_cond
3561   1739             _while48_exit:
3562   1739 F9            leave
3563   173A 09            ret
3564   173B             
3565   173B             print_unsigned_long:
3566   173B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3567   173E             ; $digits 
3568   173E             ; $i 
3569   173E 52 0C 00      sub sp, 12
3570   1741             ;; i = 0; 
3571   1741 FA F5 FF      lea d, [bp + -11] ; $i
3572   1744 DA            push d
3573   1745 26 00 00      mov b, $0
3574   1748 E7            pop d
3575   1749 FD 43         mov [d], b
3576   174B             ;; if(num == 0){ 
3577   174B             _if49_cond:
3578   174B FA 05 00      lea d, [bp + 5] ; $num
3579   174E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3580   1751 FD 39         mov c, b ; And place it into C
3581   1753 2A            mov b, [d] ; Lower Word in B
3582   1754             ; START RELATIONAL
3583   1754 D7            push a
3584   1755 FD D8         push g
3585   1757 11            mov a, b
3586   1758 FD 7A         mov g, c
3587   175A 26 00 00      mov b, $0
3588   175D B0            cmp a, b
3589   175E FD 71         seq ; ==
3590   1760 D8            push b
3591   1761 12            mov a, c
3592   1762 FD 27         mov b, g
3593   1764 B0            cmp a, b
3594   1765 FD 71         seq ; ==
3595   1767 E4            pop a
3596   1768 FD A7         sand a, b
3597   176A FD F1         pop g
3598   176C E4            pop a
3599   176D             ; END RELATIONAL
3600   176D C0 00 00      cmp b, 0
3601   1770 C6 82 17      je _if49_exit
3602   1773             _if49_true:
3603   1773             ;; putchar('0'); 
3604   1773 26 30 00      mov b, $30
3605   1776 DD            push bl
3606   1777 07 08 19      call putchar
3607   177A 51 01 00      add sp, 1
3608   177D             ;; return; 
3609   177D F9            leave
3610   177E 09            ret
3611   177F 0A 82 17      jmp _if49_exit
3612   1782             _if49_exit:
3613   1782             ;; while (num > 0) { 
3614   1782             _while50_cond:
3615   1782 FA 05 00      lea d, [bp + 5] ; $num
3616   1785 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3617   1788 FD 39         mov c, b ; And place it into C
3618   178A 2A            mov b, [d] ; Lower Word in B
3619   178B             ; START RELATIONAL
3620   178B D7            push a
3621   178C FD D8         push g
3622   178E 11            mov a, b
3623   178F FD 7A         mov g, c
3624   1791 26 00 00      mov b, $0
3625   1794 B0            cmp a, b
3626   1795 FD 81         sgu ; > (unsigned)
3627   1797 FD F1         pop g
3628   1799 E4            pop a
3629   179A             ; END RELATIONAL
3630   179A C0 00 00      cmp b, 0
3631   179D C6 FD 17      je _while50_exit
3632   17A0             _while50_block:
3633   17A0             ;; digits[i] = '0' + (num % 10); 
3634   17A0 FA F7 FF      lea d, [bp + -9] ; $digits
3635   17A3 D7            push a
3636   17A4 DA            push d
3637   17A5 FA F5 FF      lea d, [bp + -11] ; $i
3638   17A8 2A            mov b, [d]
3639   17A9 E7            pop d
3640   17AA 5A            add d, b
3641   17AB E4            pop a
3642   17AC DA            push d
3643   17AD 26 30 00      mov b, $30
3644   17B0             ; START TERMS
3645   17B0 D7            push a
3646   17B1 11            mov a, b
3647   17B2 FA 05 00      lea d, [bp + 5] ; $num
3648   17B5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3649   17B8 FD 39         mov c, b ; And place it into C
3650   17BA 2A            mov b, [d] ; Lower Word in B
3651   17BB             ; START FACTORS
3652   17BB D7            push a
3653   17BC 11            mov a, b
3654   17BD 26 0A 00      mov b, $a
3655   17C0 AE            div a, b ; 
3656   17C1 11            mov a, b
3657   17C2 27            mov b, a
3658   17C3 E4            pop a
3659   17C4             ; END FACTORS
3660   17C4 54            add a, b
3661   17C5 D7            push a
3662   17C6 FD 12         mov a, g
3663   17C8 28            mov b, c
3664   17C9 5C            adc a, b
3665   17CA 39            mov c, a
3666   17CB E5            pop b
3667   17CC E4            pop a
3668   17CD             ; END TERMS
3669   17CD E7            pop d
3670   17CE FD 3E         mov [d], bl
3671   17D0             ;; num = num / 10; 
3672   17D0 FA 05 00      lea d, [bp + 5] ; $num
3673   17D3 DA            push d
3674   17D4 FA 05 00      lea d, [bp + 5] ; $num
3675   17D7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3676   17DA FD 39         mov c, b ; And place it into C
3677   17DC 2A            mov b, [d] ; Lower Word in B
3678   17DD             ; START FACTORS
3679   17DD D7            push a
3680   17DE 11            mov a, b
3681   17DF 26 0A 00      mov b, $a
3682   17E2 AE            div a, b
3683   17E3 27            mov b, a
3684   17E4 E4            pop a
3685   17E5             ; END FACTORS
3686   17E5 E7            pop d
3687   17E6 FD 43         mov [d], b
3688   17E8 28            mov b, c
3689   17E9 FD 44 02 00   mov [d + 2], b
3690   17ED             ;; i++; 
3691   17ED FA F5 FF      lea d, [bp + -11] ; $i
3692   17F0 2A            mov b, [d]
3693   17F1 D8            push b
3694   17F2 FD 77         inc b
3695   17F4 FA F5 FF      lea d, [bp + -11] ; $i
3696   17F7 FD 43         mov [d], b
3697   17F9 E5            pop b
3698   17FA 0A 82 17      jmp _while50_cond
3699   17FD             _while50_exit:
3700   17FD             ;; while (i > 0) { 
3701   17FD             _while51_cond:
3702   17FD FA F5 FF      lea d, [bp + -11] ; $i
3703   1800 2A            mov b, [d]
3704   1801             ; START RELATIONAL
3705   1801 D7            push a
3706   1802 11            mov a, b
3707   1803 26 00 00      mov b, $0
3708   1806 B0            cmp a, b
3709   1807 FD 7F         sgt ; >
3710   1809 E4            pop a
3711   180A             ; END RELATIONAL
3712   180A C0 00 00      cmp b, 0
3713   180D C6 36 18      je _while51_exit
3714   1810             _while51_block:
3715   1810             ;; i--; 
3716   1810 FA F5 FF      lea d, [bp + -11] ; $i
3717   1813 2A            mov b, [d]
3718   1814 D8            push b
3719   1815 FD 7D         dec b
3720   1817 FA F5 FF      lea d, [bp + -11] ; $i
3721   181A FD 43         mov [d], b
3722   181C E5            pop b
3723   181D             ;; putchar(digits[i]); 
3724   181D FA F7 FF      lea d, [bp + -9] ; $digits
3725   1820 D7            push a
3726   1821 DA            push d
3727   1822 FA F5 FF      lea d, [bp + -11] ; $i
3728   1825 2A            mov b, [d]
3729   1826 E7            pop d
3730   1827 5A            add d, b
3731   1828 E4            pop a
3732   1829 32            mov bl, [d]
3733   182A A7 00         mov bh, 0
3734   182C DD            push bl
3735   182D 07 08 19      call putchar
3736   1830 51 01 00      add sp, 1
3737   1833 0A FD 17      jmp _while51_cond
3738   1836             _while51_exit:
3739   1836 F9            leave
3740   1837 09            ret
3741   1838             
3742   1838             print_unsigned:
3743   1838 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3744   183B             ; $digits 
3745   183B             ; $i 
3746   183B 52 07 00      sub sp, 7
3747   183E             ;; i = 0; 
3748   183E FA FA FF      lea d, [bp + -6] ; $i
3749   1841 DA            push d
3750   1842 26 00 00      mov b, $0
3751   1845 E7            pop d
3752   1846 FD 43         mov [d], b
3753   1848             ;; if(num == 0){ 
3754   1848             _if52_cond:
3755   1848 FA 05 00      lea d, [bp + 5] ; $num
3756   184B 2A            mov b, [d]
3757   184C             ; START RELATIONAL
3758   184C D7            push a
3759   184D 11            mov a, b
3760   184E 26 00 00      mov b, $0
3761   1851 B0            cmp a, b
3762   1852 FD 71         seq ; ==
3763   1854 E4            pop a
3764   1855             ; END RELATIONAL
3765   1855 C0 00 00      cmp b, 0
3766   1858 C6 6A 18      je _if52_exit
3767   185B             _if52_true:
3768   185B             ;; putchar('0'); 
3769   185B 26 30 00      mov b, $30
3770   185E DD            push bl
3771   185F 07 08 19      call putchar
3772   1862 51 01 00      add sp, 1
3773   1865             ;; return; 
3774   1865 F9            leave
3775   1866 09            ret
3776   1867 0A 6A 18      jmp _if52_exit
3777   186A             _if52_exit:
3778   186A             ;; while (num > 0) { 
3779   186A             _while53_cond:
3780   186A FA 05 00      lea d, [bp + 5] ; $num
3781   186D 2A            mov b, [d]
3782   186E             ; START RELATIONAL
3783   186E D7            push a
3784   186F 11            mov a, b
3785   1870 26 00 00      mov b, $0
3786   1873 B0            cmp a, b
3787   1874 FD 81         sgu ; > (unsigned)
3788   1876 E4            pop a
3789   1877             ; END RELATIONAL
3790   1877 C0 00 00      cmp b, 0
3791   187A C6 C4 18      je _while53_exit
3792   187D             _while53_block:
3793   187D             ;; digits[i] = '0' + (num % 10); 
3794   187D FA FC FF      lea d, [bp + -4] ; $digits
3795   1880 D7            push a
3796   1881 DA            push d
3797   1882 FA FA FF      lea d, [bp + -6] ; $i
3798   1885 2A            mov b, [d]
3799   1886 E7            pop d
3800   1887 5A            add d, b
3801   1888 E4            pop a
3802   1889 DA            push d
3803   188A 26 30 00      mov b, $30
3804   188D             ; START TERMS
3805   188D D7            push a
3806   188E 11            mov a, b
3807   188F FA 05 00      lea d, [bp + 5] ; $num
3808   1892 2A            mov b, [d]
3809   1893             ; START FACTORS
3810   1893 D7            push a
3811   1894 11            mov a, b
3812   1895 26 0A 00      mov b, $a
3813   1898 AE            div a, b ; 
3814   1899 11            mov a, b
3815   189A 27            mov b, a
3816   189B E4            pop a
3817   189C             ; END FACTORS
3818   189C 56            add b, a
3819   189D E4            pop a
3820   189E             ; END TERMS
3821   189E E7            pop d
3822   189F FD 3E         mov [d], bl
3823   18A1             ;; num = num / 10; 
3824   18A1 FA 05 00      lea d, [bp + 5] ; $num
3825   18A4 DA            push d
3826   18A5 FA 05 00      lea d, [bp + 5] ; $num
3827   18A8 2A            mov b, [d]
3828   18A9             ; START FACTORS
3829   18A9 D7            push a
3830   18AA 11            mov a, b
3831   18AB 26 0A 00      mov b, $a
3832   18AE AE            div a, b
3833   18AF 27            mov b, a
3834   18B0 E4            pop a
3835   18B1             ; END FACTORS
3836   18B1 E7            pop d
3837   18B2 FD 43         mov [d], b
3838   18B4             ;; i++; 
3839   18B4 FA FA FF      lea d, [bp + -6] ; $i
3840   18B7 2A            mov b, [d]
3841   18B8 D8            push b
3842   18B9 FD 77         inc b
3843   18BB FA FA FF      lea d, [bp + -6] ; $i
3844   18BE FD 43         mov [d], b
3845   18C0 E5            pop b
3846   18C1 0A 6A 18      jmp _while53_cond
3847   18C4             _while53_exit:
3848   18C4             ;; while (i > 0) { 
3849   18C4             _while54_cond:
3850   18C4 FA FA FF      lea d, [bp + -6] ; $i
3851   18C7 2A            mov b, [d]
3852   18C8             ; START RELATIONAL
3853   18C8 D7            push a
3854   18C9 11            mov a, b
3855   18CA 26 00 00      mov b, $0
3856   18CD B0            cmp a, b
3857   18CE FD 7F         sgt ; >
3858   18D0 E4            pop a
3859   18D1             ; END RELATIONAL
3860   18D1 C0 00 00      cmp b, 0
3861   18D4 C6 FD 18      je _while54_exit
3862   18D7             _while54_block:
3863   18D7             ;; i--; 
3864   18D7 FA FA FF      lea d, [bp + -6] ; $i
3865   18DA 2A            mov b, [d]
3866   18DB D8            push b
3867   18DC FD 7D         dec b
3868   18DE FA FA FF      lea d, [bp + -6] ; $i
3869   18E1 FD 43         mov [d], b
3870   18E3 E5            pop b
3871   18E4             ;; putchar(digits[i]); 
3872   18E4 FA FC FF      lea d, [bp + -4] ; $digits
3873   18E7 D7            push a
3874   18E8 DA            push d
3875   18E9 FA FA FF      lea d, [bp + -6] ; $i
3876   18EC 2A            mov b, [d]
3877   18ED E7            pop d
3878   18EE 5A            add d, b
3879   18EF E4            pop a
3880   18F0 32            mov bl, [d]
3881   18F1 A7 00         mov bh, 0
3882   18F3 DD            push bl
3883   18F4 07 08 19      call putchar
3884   18F7 51 01 00      add sp, 1
3885   18FA 0A C4 18      jmp _while54_cond
3886   18FD             _while54_exit:
3887   18FD F9            leave
3888   18FE 09            ret
3889   18FF             
3890   18FF             date:
3891   18FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3892   1902             
3893   1902             ; --- BEGIN INLINE ASM BLOCK
3894   1902 19 00         mov al, 0 
3895   1904 05 07         syscall sys_datetime
3896   1906             ; --- END INLINE ASM BLOCK
3897   1906             
3898   1906 F9            leave
3899   1907 09            ret
3900   1908             
3901   1908             putchar:
3902   1908 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3903   190B             
3904   190B             ; --- BEGIN INLINE ASM BLOCK
3905   190B FA 05 00      lea d, [bp + 5] ; $c
3906   190E 1E            mov al, [d]
3907   190F 23            mov ah, al
3908   1910 07 E9 1A      call _putchar
3909   1913             ; --- END INLINE ASM BLOCK
3910   1913             
3911   1913 F9            leave
3912   1914 09            ret
3913   1915             
3914   1915             getchar:
3915   1915 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3916   1918             ; $c 
3917   1918 52 01 00      sub sp, 1
3918   191B             
3919   191B             ; --- BEGIN INLINE ASM BLOCK
3920   191B 07 E2 1A      call getch
3921   191E 1A            mov al, ah
3922   191F FA 00 00      lea d, [bp + 0] ; $c
3923   1922 3E            mov [d], al
3924   1923             ; --- END INLINE ASM BLOCK
3925   1923             
3926   1923             ;; return c; 
3927   1923 FA 00 00      lea d, [bp + 0] ; $c
3928   1926 32            mov bl, [d]
3929   1927 A7 00         mov bh, 0
3930   1929 F9            leave
3931   192A 09            ret
3932   192B             
3933   192B             scann:
3934   192B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3935   192E             ; $m 
3936   192E 52 02 00      sub sp, 2
3937   1931             
3938   1931             ; --- BEGIN INLINE ASM BLOCK
3939   1931 07 2D 1D      call scan_u16d
3940   1934 FA FF FF      lea d, [bp + -1] ; $m
3941   1937 43            mov [d], a
3942   1938             ; --- END INLINE ASM BLOCK
3943   1938             
3944   1938             ;; return m; 
3945   1938 FA FF FF      lea d, [bp + -1] ; $m
3946   193B 2A            mov b, [d]
3947   193C F9            leave
3948   193D 09            ret
3949   193E             
3950   193E             puts:
3951   193E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3952   1941             
3953   1941             ; --- BEGIN INLINE ASM BLOCK
3954   1941 FA 05 00      lea d, [bp + 5] ; $s
3955   1944 15            mov a, [d]
3956   1945 3C            mov d, a
3957   1946 07 33 1C      call _puts
3958   1949 10 00 0A      mov a, $0A00
3959   194C 05 03         syscall sys_io
3960   194E             ; --- END INLINE ASM BLOCK
3961   194E             
3962   194E F9            leave
3963   194F 09            ret
3964   1950             
3965   1950             print:
3966   1950 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3967   1953             
3968   1953             ; --- BEGIN INLINE ASM BLOCK
3969   1953 FA 05 00      lea d, [bp + 5] ; $s
3970   1956 FD 2A         mov d, [d]
3971   1958 07 33 1C      call _puts
3972   195B             ; --- END INLINE ASM BLOCK
3973   195B             
3974   195B F9            leave
3975   195C 09            ret
3976   195D             
3977   195D             loadfile:
3978   195D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3979   1960             
3980   1960             ; --- BEGIN INLINE ASM BLOCK
3981   1960 FA 07 00      lea d, [bp + 7] ; $destination
3982   1963 15            mov a, [d]
3983   1964 4F            mov di, a
3984   1965 FA 05 00      lea d, [bp + 5] ; $filename
3985   1968 FD 2A         mov d, [d]
3986   196A 19 14         mov al, 20
3987   196C 05 04         syscall sys_filesystem
3988   196E             ; --- END INLINE ASM BLOCK
3989   196E             
3990   196E F9            leave
3991   196F 09            ret
3992   1970             
3993   1970             create_file:
3994   1970 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3995   1973 F9            leave
3996   1974 09            ret
3997   1975             
3998   1975             delete_file:
3999   1975 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4000   1978             
4001   1978             ; --- BEGIN INLINE ASM BLOCK
4002   1978 FA 05 00      lea d, [bp + 5] ; $filename
4003   197B 19 0A         mov al, 10
4004   197D 05 04         syscall sys_filesystem
4005   197F             ; --- END INLINE ASM BLOCK
4006   197F             
4007   197F F9            leave
4008   1980 09            ret
4009   1981             
4010   1981             fopen:
4011   1981 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4012   1984 F9            leave
4013   1985 09            ret
4014   1986             
4015   1986             fclose:
4016   1986 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4017   1989 F9            leave
4018   198A 09            ret
4019   198B             
4020   198B             load_hex:
4021   198B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4022   198E             ; $temp 
4023   198E 52 02 00      sub sp, 2
4024   1991             ;; temp = alloc(32768); 
4025   1991 FA FF FF      lea d, [bp + -1] ; $temp
4026   1994 DA            push d
4027   1995 26 00 80      mov b, $8000
4028   1998 FD AB         swp b
4029   199A D8            push b
4030   199B 07 70 07      call alloc
4031   199E 51 02 00      add sp, 2
4032   19A1 E7            pop d
4033   19A2 FD 43         mov [d], b
4034   19A4             
4035   19A4             ; --- BEGIN INLINE ASM BLOCK
4036   19A4               
4037   19A4               
4038   19A4               
4039   19A4               
4040   19A4               
4041   19A4             _load_hex:
4042   19A4 D7            push a
4043   19A5 D8            push b
4044   19A6 DA            push d
4045   19A7 E2            push si
4046   19A8 E3            push di
4047   19A9 52 00 80      sub sp, $8000      
4048   19AC 38 00 00      mov c, 0
4049   19AF 48            mov a, sp
4050   19B0 77            inc a
4051   19B1 3C            mov d, a          
4052   19B2 07 F0 1A      call _gets        
4053   19B5 4D            mov si, a
4054   19B6             __load_hex_loop:
4055   19B6 F6            lodsb             
4056   19B7 B9 00         cmp al, 0         
4057   19B9 C6 C7 19      jz __load_hex_ret
4058   19BC 36            mov bh, al
4059   19BD F6            lodsb
4060   19BE 2F            mov bl, al
4061   19BF 07 A6 1A      call _atoi        
4062   19C2 F7            stosb             
4063   19C3 78            inc c
4064   19C4 0A B6 19      jmp __load_hex_loop
4065   19C7             __load_hex_ret:
4066   19C7 51 00 80      add sp, $8000
4067   19CA F0            pop di
4068   19CB EF            pop si
4069   19CC E7            pop d
4070   19CD E5            pop b
4071   19CE E4            pop a
4072   19CF             ; --- END INLINE ASM BLOCK
4073   19CF             
4074   19CF F9            leave
4075   19D0 09            ret
4076   19D1             
4077   19D1             getparam:
4078   19D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4079   19D4             ; $data 
4080   19D4 52 01 00      sub sp, 1
4081   19D7             
4082   19D7             ; --- BEGIN INLINE ASM BLOCK
4083   19D7 19 04         mov al, 4
4084   19D9 FA 05 00      lea d, [bp + 5] ; $address
4085   19DC FD 2A         mov d, [d]
4086   19DE 05 0C         syscall sys_system
4087   19E0 FA 00 00      lea d, [bp + 0] ; $data
4088   19E3 FD 3E         mov [d], bl
4089   19E5             ; --- END INLINE ASM BLOCK
4090   19E5             
4091   19E5             ;; return data; 
4092   19E5 FA 00 00      lea d, [bp + 0] ; $data
4093   19E8 32            mov bl, [d]
4094   19E9 A7 00         mov bh, 0
4095   19EB F9            leave
4096   19EC 09            ret
4097   19ED             
4098   19ED             clear:
4099   19ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
4100   19F0             ;; print("\033[2J\033[H"); 
4101   19F0 26 FC 29      mov b, __s3 ; "\033[2J\033[H"
4102   19F3 FD AB         swp b
4103   19F5 D8            push b
4104   19F6 07 50 19      call print
4105   19F9 51 02 00      add sp, 2
4106   19FC F9            leave
4107   19FD 09            ret
4108   19FE             
4109   19FE             include_stdio_asm:
4110   19FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4111   1A01             
4112   1A01             ; --- BEGIN INLINE ASM BLOCK
4113   1A01             .include "lib/asm/stdio.asm"
0001+  1A01             ;-----------------------------------------------------------------------------
0002+  1A01             ; stdio.s
0003+  1A01             ;-----------------------------------------------------------------------------
0004+  1A01             .include "lib/asm/string.asm"
0001++ 1A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1A01             ; string.s
0003++ 1A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1A01             
0005++ 1A01             
0006++ 1A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1A01             ; _strrev
0008++ 1A01             ; reverse a string
0009++ 1A01             ; D = string address
0010++ 1A01             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1A01             ; 01234
0012++ 1A01             _strrev:
0013++ 1A01 4B          	pusha
0014++ 1A02 07 48 1A    	call _strlen	; length in C
0015++ 1A05 12          	mov a, c
0016++ 1A06 AF 01 00    	cmp a, 1
0017++ 1A09 D0 23 1A    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1A0C 7D          	dec a
0019++ 1A0D FD 4E       	mov si, d	; beginning of string
0020++ 1A0F FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1A11 59          	add d, a	; end of string
0022++ 1A12 12          	mov a, c
0023++ 1A13 FD 9B       	shr a		; divide by 2
0024++ 1A15 39          	mov c, a	; C now counts the steps
0025++ 1A16             _strrev_L0:
0026++ 1A16 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1A17 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1A18 3E          	mov [d], al	; store left char into right side
0029++ 1A19 1B          	mov al, bl
0030++ 1A1A F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1A1B 7E          	dec c
0032++ 1A1C 7F          	dec d
0033++ 1A1D C2 00 00    	cmp c, 0
0034++ 1A20 C7 16 1A    	jne _strrev_L0
0035++ 1A23             _strrev_end:
0036++ 1A23 4C          	popa
0037++ 1A24 09          	ret
0038++ 1A25             	
0039++ 1A25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1A25             ; _strchr
0041++ 1A25             ; search string in D for char in AL
0042++ 1A25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1A25             _strchr:
0044++ 1A25             _strchr_L0:
0045++ 1A25 32          	mov bl, [d]
0046++ 1A26 C1 00       	cmp bl, 0
0047++ 1A28 C6 33 1A    	je _strchr_end
0048++ 1A2B BA          	cmp al, bl
0049++ 1A2C C6 33 1A    	je _strchr_end
0050++ 1A2F 79          	inc d
0051++ 1A30 0A 25 1A    	jmp _strchr_L0
0052++ 1A33             _strchr_end:
0053++ 1A33 1B          	mov al, bl
0054++ 1A34 09          	ret
0055++ 1A35             
0056++ 1A35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1A35             ; _strstr
0058++ 1A35             ; find sub-string
0059++ 1A35             ; str1 in SI
0060++ 1A35             ; str2 in DI
0061++ 1A35             ; SI points to end of source string
0062++ 1A35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1A35             _strstr:
0064++ 1A35 DB          	push al
0065++ 1A36 DA          	push d
0066++ 1A37 E3          	push di
0067++ 1A38             _strstr_loop:
0068++ 1A38 F3          	cmpsb					; compare a byte of the strings
0069++ 1A39 C7 44 1A    	jne _strstr_ret
0070++ 1A3C FC 00 00    	lea d, [di + 0]
0071++ 1A3F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1A41 C7 38 1A    	jne _strstr_loop				; equal chars but not at end
0073++ 1A44             _strstr_ret:
0074++ 1A44 F0          	pop di
0075++ 1A45 E7          	pop d
0076++ 1A46 E8          	pop al
0077++ 1A47 09          	ret
0078++ 1A48             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1A48             ; length of null terminated string
0080++ 1A48             ; result in C
0081++ 1A48             ; pointer in D
0082++ 1A48             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1A48             _strlen:
0084++ 1A48 DA          	push d
0085++ 1A49 38 00 00    	mov c, 0
0086++ 1A4C             _strlen_L1:
0087++ 1A4C BD 00       	cmp byte [d], 0
0088++ 1A4E C6 56 1A    	je _strlen_ret
0089++ 1A51 79          	inc d
0090++ 1A52 78          	inc c
0091++ 1A53 0A 4C 1A    	jmp _strlen_L1
0092++ 1A56             _strlen_ret:
0093++ 1A56 E7          	pop d
0094++ 1A57 09          	ret
0095++ 1A58             
0096++ 1A58             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1A58             ; STRCMP
0098++ 1A58             ; compare two strings
0099++ 1A58             ; str1 in SI
0100++ 1A58             ; str2 in DI
0101++ 1A58             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1A58             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1A58             _strcmp:
0104++ 1A58 DB          	push al
0105++ 1A59 DA          	push d
0106++ 1A5A E3          	push di
0107++ 1A5B E2          	push si
0108++ 1A5C             _strcmp_loop:
0109++ 1A5C F3          	cmpsb					; compare a byte of the strings
0110++ 1A5D C7 68 1A    	jne _strcmp_ret
0111++ 1A60 FB FF FF    	lea d, [si +- 1]
0112++ 1A63 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1A65 C7 5C 1A    	jne _strcmp_loop				; equal chars but not at end
0114++ 1A68             _strcmp_ret:
0115++ 1A68 EF          	pop si
0116++ 1A69 F0          	pop di
0117++ 1A6A E7          	pop d
0118++ 1A6B E8          	pop al
0119++ 1A6C 09          	ret
0120++ 1A6D             
0121++ 1A6D             
0122++ 1A6D             ; STRCPY
0123++ 1A6D             ; copy null terminated string from SI to DI
0124++ 1A6D             ; source in SI
0125++ 1A6D             ; destination in DI
0126++ 1A6D             _strcpy:
0127++ 1A6D E2          	push si
0128++ 1A6E E3          	push di
0129++ 1A6F DB          	push al
0130++ 1A70             _strcpy_L1:
0131++ 1A70 F6          	lodsb
0132++ 1A71 F7          	stosb
0133++ 1A72 B9 00       	cmp al, 0
0134++ 1A74 C7 70 1A    	jne _strcpy_L1
0135++ 1A77             _strcpy_end:
0136++ 1A77 E8          	pop al
0137++ 1A78 F0          	pop di
0138++ 1A79 EF          	pop si
0139++ 1A7A 09          	ret
0140++ 1A7B             
0141++ 1A7B             ; STRCAT
0142++ 1A7B             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1A7B             ; source in SI
0144++ 1A7B             ; destination in DI
0145++ 1A7B             _strcat:
0146++ 1A7B E2          	push si
0147++ 1A7C E3          	push di
0148++ 1A7D D7          	push a
0149++ 1A7E DA          	push d
0150++ 1A7F 50          	mov a, di
0151++ 1A80 3C          	mov d, a
0152++ 1A81             _strcat_goto_end_L1:
0153++ 1A81 BD 00       	cmp byte[d], 0
0154++ 1A83 C6 8A 1A    	je _strcat_start
0155++ 1A86 79          	inc d
0156++ 1A87 0A 81 1A    	jmp _strcat_goto_end_L1
0157++ 1A8A             _strcat_start:
0158++ 1A8A FD 50       	mov di, d
0159++ 1A8C             _strcat_L1:
0160++ 1A8C F6          	lodsb
0161++ 1A8D F7          	stosb
0162++ 1A8E B9 00       	cmp al, 0
0163++ 1A90 C7 8C 1A    	jne _strcat_L1
0164++ 1A93             _strcat_end:
0165++ 1A93 E7          	pop d
0166++ 1A94 E4          	pop a
0167++ 1A95 F0          	pop di
0168++ 1A96 EF          	pop si
0169++ 1A97 09          	ret
0170++ 1A98             
0171++ 1A98             
0005+  1A98             
0006+  1A98             ;-----------------------------------------------------------------------------
0007+  1A98             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1A98             ; ASCII in BL
0009+  1A98             ; result in AL
0010+  1A98             ; ascii for F = 0100 0110
0011+  1A98             ; ascii for 9 = 0011 1001
0012+  1A98             ;-----------------------------------------------------------------------------
0013+  1A98             hex_ascii_encode:
0014+  1A98 1B            mov al, bl
0015+  1A99 93 40         test al, $40        ; test if letter or number
0016+  1A9B C7 A1 1A      jnz hex_letter
0017+  1A9E 87 0F         and al, $0F        ; get number
0018+  1AA0 09            ret
0019+  1AA1             hex_letter:
0020+  1AA1 87 0F         and al, $0F        ; get letter
0021+  1AA3 6A 09         add al, 9
0022+  1AA5 09            ret
0023+  1AA6             
0024+  1AA6             ;-----------------------------------------------------------------------------
0025+  1AA6             ; ATOI
0026+  1AA6             ; 2 letter hex string in B
0027+  1AA6             ; 8bit integer returned in AL
0028+  1AA6             ;-----------------------------------------------------------------------------
0029+  1AA6             _atoi:
0030+  1AA6 D8            push b
0031+  1AA7 07 98 1A      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1AAA 30            mov bl, bh
0033+  1AAB DB            push al          ; save a
0034+  1AAC 07 98 1A      call hex_ascii_encode
0035+  1AAF EA            pop bl  
0036+  1AB0 FD 9E 04      shl al, 4
0037+  1AB3 8C            or al, bl
0038+  1AB4 E5            pop b
0039+  1AB5 09            ret  
0040+  1AB6             
0041+  1AB6             ;-----------------------------------------------------------------------------
0042+  1AB6             ; scanf
0043+  1AB6             ; no need for explanations!
0044+  1AB6             ;-----------------------------------------------------------------------------
0045+  1AB6             scanf:
0046+  1AB6 09            ret
0047+  1AB7             
0048+  1AB7             ;-----------------------------------------------------------------------------
0049+  1AB7             ; ITOA
0050+  1AB7             ; 8bit value in BL
0051+  1AB7             ; 2 byte ASCII result in A
0052+  1AB7             ;-----------------------------------------------------------------------------
0053+  1AB7             _itoa:
0054+  1AB7 DA            push d
0055+  1AB8 D8            push b
0056+  1AB9 A7 00         mov bh, 0
0057+  1ABB FD A4 04      shr bl, 4  
0058+  1ABE 74            mov d, b
0059+  1ABF 1F 67 1D      mov al, [d + s_hex_digits]
0060+  1AC2 23            mov ah, al
0061+  1AC3               
0062+  1AC3 E5            pop b
0063+  1AC4 D8            push b
0064+  1AC5 A7 00         mov bh, 0
0065+  1AC7 FD 87 0F      and bl, $0F
0066+  1ACA 74            mov d, b
0067+  1ACB 1F 67 1D      mov al, [d + s_hex_digits]
0068+  1ACE E5            pop b
0069+  1ACF E7            pop d
0070+  1AD0 09            ret
0071+  1AD1             
0072+  1AD1             ;-----------------------------------------------------------------------------
0073+  1AD1             ; HEX STRING TO BINARY
0074+  1AD1             ; di = destination address
0075+  1AD1             ; si = source
0076+  1AD1             ;-----------------------------------------------------------------------------
0077+  1AD1             _hex_to_int:
0078+  1AD1             _hex_to_int_L1:
0079+  1AD1 F6            lodsb          ; load from [SI] to AL
0080+  1AD2 B9 00         cmp al, 0        ; check if ASCII 0
0081+  1AD4 C6 E1 1A      jz _hex_to_int_ret
0082+  1AD7 36            mov bh, al
0083+  1AD8 F6            lodsb
0084+  1AD9 2F            mov bl, al
0085+  1ADA 07 A6 1A      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  1ADD F7            stosb          ; store AL to [DI]
0087+  1ADE 0A D1 1A      jmp _hex_to_int_L1
0088+  1AE1             _hex_to_int_ret:
0089+  1AE1 09            ret    
0090+  1AE2             
0091+  1AE2             ;-----------------------------------------------------------------------------
0092+  1AE2             ; GETCHAR
0093+  1AE2             ; char in ah
0094+  1AE2             ;-----------------------------------------------------------------------------
0095+  1AE2             getch:
0096+  1AE2 DB            push al
0097+  1AE3             getch_retry:
0098+  1AE3 19 01         mov al, 1
0099+  1AE5 05 03         syscall sys_io      ; receive in AH
0100+  1AE7 E8            pop al
0101+  1AE8 09            ret
0102+  1AE9             
0103+  1AE9             ;-----------------------------------------------------------------------------
0104+  1AE9             ; PUTCHAR
0105+  1AE9             ; char in ah
0106+  1AE9             ;-----------------------------------------------------------------------------
0107+  1AE9             _putchar:
0108+  1AE9 D7            push a
0109+  1AEA 19 00         mov al, 0
0110+  1AEC 05 03         syscall sys_io      ; char in AH
0111+  1AEE E4            pop a
0112+  1AEF 09            ret
0113+  1AF0             
0114+  1AF0             ;-----------------------------------------------------------------------------
0115+  1AF0             ;; INPUT A STRING
0116+  1AF0             ;; terminates with null
0117+  1AF0             ;; pointer in D
0118+  1AF0             ;-----------------------------------------------------------------------------
0119+  1AF0             _gets:
0120+  1AF0 D7            push a
0121+  1AF1 DA            push d
0122+  1AF2             _gets_loop:
0123+  1AF2 19 01         mov al, 1
0124+  1AF4 05 03         syscall sys_io      ; receive in AH
0125+  1AF6 B9 00         cmp al, 0        ; check error code (AL)
0126+  1AF8 C6 F2 1A      je _gets_loop      ; if no char received, retry
0127+  1AFB             
0128+  1AFB 76 1B         cmp ah, 27
0129+  1AFD C6 1E 1B      je _gets_ansi_esc
0130+  1B00 76 0A         cmp ah, $0A        ; LF
0131+  1B02 C6 89 1B      je _gets_end
0132+  1B05 76 0D         cmp ah, $0D        ; CR
0133+  1B07 C6 89 1B      je _gets_end
0134+  1B0A 76 5C         cmp ah, $5C        ; '\\'
0135+  1B0C C6 4A 1B      je _gets_escape
0136+  1B0F               
0137+  1B0F 76 08         cmp ah, $08      ; check for backspace
0138+  1B11 C6 1A 1B      je _gets_backspace
0139+  1B14             
0140+  1B14 1A            mov al, ah
0141+  1B15 3E            mov [d], al
0142+  1B16 79            inc d
0143+  1B17 0A F2 1A      jmp _gets_loop
0144+  1B1A             _gets_backspace:
0145+  1B1A 7F            dec d
0146+  1B1B 0A F2 1A      jmp _gets_loop
0147+  1B1E             _gets_ansi_esc:
0148+  1B1E 19 01         mov al, 1
0149+  1B20 05 03         syscall sys_io        ; receive in AH without echo
0150+  1B22 B9 00         cmp al, 0          ; check error code (AL)
0151+  1B24 C6 1E 1B      je _gets_ansi_esc    ; if no char received, retry
0152+  1B27 76 5B         cmp ah, '['
0153+  1B29 C7 F2 1A      jne _gets_loop
0154+  1B2C             _gets_ansi_esc_2:
0155+  1B2C 19 01         mov al, 1
0156+  1B2E 05 03         syscall sys_io          ; receive in AH without echo
0157+  1B30 B9 00         cmp al, 0            ; check error code (AL)
0158+  1B32 C6 2C 1B      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1B35 76 44         cmp ah, 'D'
0160+  1B37 C6 42 1B      je _gets_left_arrow
0161+  1B3A 76 43         cmp ah, 'C'
0162+  1B3C C6 46 1B      je _gets_right_arrow
0163+  1B3F 0A F2 1A      jmp _gets_loop
0164+  1B42             _gets_left_arrow:
0165+  1B42 7F            dec d
0166+  1B43 0A F2 1A      jmp _gets_loop
0167+  1B46             _gets_right_arrow:
0168+  1B46 79            inc d
0169+  1B47 0A F2 1A      jmp _gets_loop
0170+  1B4A             _gets_escape:
0171+  1B4A 19 01         mov al, 1
0172+  1B4C 05 03         syscall sys_io      ; receive in AH
0173+  1B4E B9 00         cmp al, 0        ; check error code (AL)
0174+  1B50 C6 4A 1B      je _gets_escape      ; if no char received, retry
0175+  1B53 76 6E         cmp ah, 'n'
0176+  1B55 C6 74 1B      je _gets_LF
0177+  1B58 76 72         cmp ah, 'r'
0178+  1B5A C6 7B 1B      je _gets_CR
0179+  1B5D 76 30         cmp ah, '0'
0180+  1B5F C6 82 1B      je _gets_NULL
0181+  1B62 76 5C         cmp ah, $5C  ; '\'
0182+  1B64 C6 6D 1B      je _gets_slash
0183+  1B67 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1B68 3E            mov [d], al
0185+  1B69 79            inc d
0186+  1B6A 0A F2 1A      jmp _gets_loop
0187+  1B6D             _gets_slash:
0188+  1B6D 19 5C         mov al, $5C
0189+  1B6F 3E            mov [d], al
0190+  1B70 79            inc d
0191+  1B71 0A F2 1A      jmp _gets_loop
0192+  1B74             _gets_LF:
0193+  1B74 19 0A         mov al, $0A
0194+  1B76 3E            mov [d], al
0195+  1B77 79            inc d
0196+  1B78 0A F2 1A      jmp _gets_loop
0197+  1B7B             _gets_CR:
0198+  1B7B 19 0D         mov al, $0D
0199+  1B7D 3E            mov [d], al
0200+  1B7E 79            inc d
0201+  1B7F 0A F2 1A      jmp _gets_loop
0202+  1B82             _gets_NULL:
0203+  1B82 19 00         mov al, $00
0204+  1B84 3E            mov [d], al
0205+  1B85 79            inc d
0206+  1B86 0A F2 1A      jmp _gets_loop
0207+  1B89             _gets_end:
0208+  1B89 19 00         mov al, 0
0209+  1B8B 3E            mov [d], al        ; terminate string
0210+  1B8C E7            pop d
0211+  1B8D E4            pop a
0212+  1B8E 09            ret
0213+  1B8F             
0214+  1B8F             ;-----------------------------------------------------------------------------
0215+  1B8F             ;; INPUT TEXT
0216+  1B8F             ;; terminated with CTRL+D
0217+  1B8F             ;; pointer in D
0218+  1B8F             ;-----------------------------------------------------------------------------
0219+  1B8F             _gettxt:
0220+  1B8F D7            push a
0221+  1B90 DA            push d
0222+  1B91             _gettxt_loop:
0223+  1B91 19 01         mov al, 1
0224+  1B93 05 03         syscall sys_io      ; receive in AH
0225+  1B95 B9 00         cmp al, 0        ; check error code (AL)
0226+  1B97 C6 91 1B      je _gettxt_loop    ; if no char received, retry
0227+  1B9A 76 04         cmp ah, 4      ; EOT
0228+  1B9C C6 DA 1B      je _gettxt_end
0229+  1B9F 76 08         cmp ah, $08      ; check for backspace
0230+  1BA1 C6 D6 1B      je _gettxt_backspace
0231+  1BA4 76 5C         cmp ah, $5C        ; '\'
0232+  1BA6 C6 AF 1B      je _gettxt_escape
0233+  1BA9 1A            mov al, ah
0234+  1BAA 3E            mov [d], al
0235+  1BAB 79            inc d
0236+  1BAC 0A 91 1B      jmp _gettxt_loop
0237+  1BAF             _gettxt_escape:
0238+  1BAF 19 01         mov al, 1
0239+  1BB1 05 03         syscall sys_io      ; receive in AH
0240+  1BB3 B9 00         cmp al, 0        ; check error code (AL)
0241+  1BB5 C6 AF 1B      je _gettxt_escape    ; if no char received, retry
0242+  1BB8 76 6E         cmp ah, 'n'
0243+  1BBA C6 C8 1B      je _gettxt_LF
0244+  1BBD 76 72         cmp ah, 'r'
0245+  1BBF C6 CF 1B      je _gettxt_CR
0246+  1BC2 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  1BC3 3E            mov [d], al
0248+  1BC4 79            inc d
0249+  1BC5 0A 91 1B      jmp _gettxt_loop
0250+  1BC8             _gettxt_LF:
0251+  1BC8 19 0A         mov al, $0A
0252+  1BCA 3E            mov [d], al
0253+  1BCB 79            inc d
0254+  1BCC 0A 91 1B      jmp _gettxt_loop
0255+  1BCF             _gettxt_CR:
0256+  1BCF 19 0D         mov al, $0D
0257+  1BD1 3E            mov [d], al
0258+  1BD2 79            inc d
0259+  1BD3 0A 91 1B      jmp _gettxt_loop
0260+  1BD6             _gettxt_backspace:
0261+  1BD6 7F            dec d
0262+  1BD7 0A 91 1B      jmp _gettxt_loop
0263+  1BDA             _gettxt_end:
0264+  1BDA 19 00         mov al, 0
0265+  1BDC 3E            mov [d], al        ; terminate string
0266+  1BDD E7            pop d
0267+  1BDE E4            pop a
0268+  1BDF 09            ret
0269+  1BE0             
0270+  1BE0             ;-----------------------------------------------------------------------------
0271+  1BE0             ; PRINT NEW LINE
0272+  1BE0             ;-----------------------------------------------------------------------------
0273+  1BE0             printnl:
0274+  1BE0 D7            push a
0275+  1BE1 10 00 0A      mov a, $0A00
0276+  1BE4 05 03         syscall sys_io
0277+  1BE6 10 00 0D      mov a, $0D00
0278+  1BE9 05 03         syscall sys_io
0279+  1BEB E4            pop a
0280+  1BEC 09            ret
0281+  1BED             
0282+  1BED             ;-----------------------------------------------------------------------------
0283+  1BED             ; _strtoint
0284+  1BED             ; 4 digit hex string number in d
0285+  1BED             ; integer returned in A
0286+  1BED             ;-----------------------------------------------------------------------------
0287+  1BED             _strtointx:
0288+  1BED D8            push b
0289+  1BEE 32            mov bl, [d]
0290+  1BEF 37            mov bh, bl
0291+  1BF0 33 01 00      mov bl, [d + 1]
0292+  1BF3 07 A6 1A      call _atoi        ; convert to int in AL
0293+  1BF6 23            mov ah, al        ; move to AH
0294+  1BF7 33 02 00      mov bl, [d + 2]
0295+  1BFA 37            mov bh, bl
0296+  1BFB 33 03 00      mov bl, [d + 3]
0297+  1BFE 07 A6 1A      call _atoi        ; convert to int in AL
0298+  1C01 E5            pop b
0299+  1C02 09            ret
0300+  1C03             
0301+  1C03             ;-----------------------------------------------------------------------------
0302+  1C03             ; _strtoint
0303+  1C03             ; 5 digit base10 string number in d
0304+  1C03             ; integer returned in A
0305+  1C03             ;-----------------------------------------------------------------------------
0306+  1C03             _strtoint:
0307+  1C03 E2            push si
0308+  1C04 D8            push b
0309+  1C05 D9            push c
0310+  1C06 DA            push d
0311+  1C07 07 48 1A      call _strlen      ; get string length in C
0312+  1C0A 7E            dec c
0313+  1C0B FD 4E         mov si, d
0314+  1C0D 12            mov a, c
0315+  1C0E FD 99         shl a
0316+  1C10 3B 7F 1D      mov d, table_power
0317+  1C13 59            add d, a
0318+  1C14 38 00 00      mov c, 0
0319+  1C17             _strtoint_L0:
0320+  1C17 F6            lodsb      ; load ASCII to al
0321+  1C18 B9 00         cmp al, 0
0322+  1C1A C6 2D 1C      je _strtoint_end
0323+  1C1D 6F 30         sub al, $30    ; make into integer
0324+  1C1F 22 00         mov ah, 0
0325+  1C21 2A            mov b, [d]
0326+  1C22 AC            mul a, b      ; result in B since it fits in 16bits
0327+  1C23 11            mov a, b
0328+  1C24 28            mov b, c
0329+  1C25 54            add a, b
0330+  1C26 39            mov c, a
0331+  1C27 63 02 00      sub d, 2
0332+  1C2A 0A 17 1C      jmp _strtoint_L0
0333+  1C2D             _strtoint_end:
0334+  1C2D 12            mov a, c
0335+  1C2E E7            pop d
0336+  1C2F E6            pop c
0337+  1C30 E5            pop b
0338+  1C31 EF            pop si
0339+  1C32 09            ret
0340+  1C33             
0341+  1C33             ;-----------------------------------------------------------------------------
0342+  1C33             ; PRINT NULL TERMINATED STRING
0343+  1C33             ; pointer in D
0344+  1C33             ;-----------------------------------------------------------------------------
0345+  1C33             _puts:
0346+  1C33 D7            push a
0347+  1C34 DA            push d
0348+  1C35             _puts_L1:
0349+  1C35 1E            mov al, [d]
0350+  1C36 B9 00         cmp al, 0
0351+  1C38 C6 44 1C      jz _puts_END
0352+  1C3B 23            mov ah, al
0353+  1C3C 19 00         mov al, 0
0354+  1C3E 05 03         syscall sys_io
0355+  1C40 79            inc d
0356+  1C41 0A 35 1C      jmp _puts_L1
0357+  1C44             _puts_END:
0358+  1C44 E7            pop d
0359+  1C45 E4            pop a
0360+  1C46 09            ret
0361+  1C47             
0362+  1C47             ;-----------------------------------------------------------------------------
0363+  1C47             ; PRINT N SIZE STRING
0364+  1C47             ; pointer in D
0365+  1C47             ; size in C
0366+  1C47             ;-----------------------------------------------------------------------------
0367+  1C47             _putsn:
0368+  1C47 DB            push al
0369+  1C48 DA            push d
0370+  1C49 D9            push c
0371+  1C4A             _putsn_L0:
0372+  1C4A 1E            mov al, [d]
0373+  1C4B 23            mov ah, al
0374+  1C4C 19 00         mov al, 0
0375+  1C4E 05 03         syscall sys_io
0376+  1C50 79            inc d
0377+  1C51 7E            dec c  
0378+  1C52 C2 00 00      cmp c, 0
0379+  1C55 C7 4A 1C      jne _putsn_L0
0380+  1C58             _putsn_end:
0381+  1C58 E6            pop c
0382+  1C59 E7            pop d
0383+  1C5A E8            pop al
0384+  1C5B 09            ret
0385+  1C5C             
0386+  1C5C             ;-----------------------------------------------------------------------------
0387+  1C5C             ; print 16bit decimal number
0388+  1C5C             ; input number in A
0389+  1C5C             ;-----------------------------------------------------------------------------
0390+  1C5C             print_u16d:
0391+  1C5C D7            push a
0392+  1C5D D8            push b
0393+  1C5E 26 10 27      mov b, 10000
0394+  1C61 AE            div a, b      ; get 10000's coeff.
0395+  1C62 07 84 1C      call print_number
0396+  1C65 11            mov a, b
0397+  1C66 26 E8 03      mov b, 1000
0398+  1C69 AE            div a, b      ; get 1000's coeff.
0399+  1C6A 07 84 1C      call print_number
0400+  1C6D 11            mov a, b
0401+  1C6E 26 64 00      mov b, 100
0402+  1C71 AE            div a, b
0403+  1C72 07 84 1C      call print_number
0404+  1C75 11            mov a, b
0405+  1C76 26 0A 00      mov b, 10
0406+  1C79 AE            div a, b
0407+  1C7A 07 84 1C      call print_number
0408+  1C7D 1B            mov al, bl      ; 1's coeff in bl
0409+  1C7E 07 84 1C      call print_number
0410+  1C81 E5            pop b
0411+  1C82 E4            pop a
0412+  1C83 09            ret
0413+  1C84             
0414+  1C84             ;-----------------------------------------------------------------------------
0415+  1C84             ; print AL
0416+  1C84             ;-----------------------------------------------------------------------------
0417+  1C84             print_number:
0418+  1C84 6A 30         add al, $30
0419+  1C86 23            mov ah, al
0420+  1C87 07 E9 1A      call _putchar
0421+  1C8A 09            ret
0422+  1C8B             
0423+  1C8B             ;-----------------------------------------------------------------------------
0424+  1C8B             ; PRINT 16BIT HEX INTEGER
0425+  1C8B             ; integer value in reg B
0426+  1C8B             ;-----------------------------------------------------------------------------
0427+  1C8B             print_u16x:
0428+  1C8B D7            push a
0429+  1C8C D8            push b
0430+  1C8D DD            push bl
0431+  1C8E 30            mov bl, bh
0432+  1C8F 07 B7 1A      call _itoa        ; convert bh to char in A
0433+  1C92 2F            mov bl, al        ; save al
0434+  1C93 19 00         mov al, 0
0435+  1C95 05 03         syscall sys_io        ; display AH
0436+  1C97 24            mov ah, bl        ; retrieve al
0437+  1C98 19 00         mov al, 0
0438+  1C9A 05 03         syscall sys_io        ; display AL
0439+  1C9C             
0440+  1C9C EA            pop bl
0441+  1C9D 07 B7 1A      call _itoa        ; convert bh to char in A
0442+  1CA0 2F            mov bl, al        ; save al
0443+  1CA1 19 00         mov al, 0
0444+  1CA3 05 03         syscall sys_io        ; display AH
0445+  1CA5 24            mov ah, bl        ; retrieve al
0446+  1CA6 19 00         mov al, 0
0447+  1CA8 05 03         syscall sys_io        ; display AL
0448+  1CAA             
0449+  1CAA E5            pop b
0450+  1CAB E4            pop a
0451+  1CAC 09            ret
0452+  1CAD             
0453+  1CAD             ;-----------------------------------------------------------------------------
0454+  1CAD             ; INPUT 16BIT HEX INTEGER
0455+  1CAD             ; read 16bit integer into A
0456+  1CAD             ;-----------------------------------------------------------------------------
0457+  1CAD             scan_u16x:
0458+  1CAD F8 10 00      enter 16
0459+  1CB0 D8            push b
0460+  1CB1 DA            push d
0461+  1CB2             
0462+  1CB2 FA F1 FF      lea d, [bp + -15]
0463+  1CB5 07 F0 1A      call _gets        ; get number
0464+  1CB8             
0465+  1CB8 32            mov bl, [d]
0466+  1CB9 37            mov bh, bl
0467+  1CBA 33 01 00      mov bl, [d + 1]
0468+  1CBD 07 A6 1A      call _atoi        ; convert to int in AL
0469+  1CC0 23            mov ah, al        ; move to AH
0470+  1CC1             
0471+  1CC1 33 02 00      mov bl, [d + 2]
0472+  1CC4 37            mov bh, bl
0473+  1CC5 33 03 00      mov bl, [d + 3]
0474+  1CC8 07 A6 1A      call _atoi        ; convert to int in AL
0475+  1CCB             
0476+  1CCB E7            pop d
0477+  1CCC E5            pop b
0478+  1CCD F9            leave
0479+  1CCE 09            ret
0480+  1CCF             
0481+  1CCF             ;-----------------------------------------------------------------------------
0482+  1CCF             ; PRINT 8bit HEX INTEGER
0483+  1CCF             ; integer value in reg bl
0484+  1CCF             ;-----------------------------------------------------------------------------
0485+  1CCF             print_u8x:
0486+  1CCF D7            push a
0487+  1CD0 DD            push bl
0488+  1CD1             
0489+  1CD1 07 B7 1A      call _itoa        ; convert bl to char in A
0490+  1CD4 2F            mov bl, al        ; save al
0491+  1CD5 19 00         mov al, 0
0492+  1CD7 05 03         syscall sys_io        ; display AH
0493+  1CD9 24            mov ah, bl        ; retrieve al
0494+  1CDA 19 00         mov al, 0
0495+  1CDC 05 03         syscall sys_io        ; display AL
0496+  1CDE             
0497+  1CDE EA            pop bl
0498+  1CDF E4            pop a
0499+  1CE0 09            ret
0500+  1CE1             
0501+  1CE1             ;-----------------------------------------------------------------------------
0502+  1CE1             ; print 8bit decimal unsigned number
0503+  1CE1             ; input number in AL
0504+  1CE1             ;-----------------------------------------------------------------------------
0505+  1CE1             print_u8d:
0506+  1CE1 D7            push a
0507+  1CE2 D8            push b
0508+  1CE3             
0509+  1CE3 22 00         mov ah, 0
0510+  1CE5 26 64 00      mov b, 100
0511+  1CE8 AE            div a, b
0512+  1CE9 D8            push b      ; save remainder
0513+  1CEA B9 00         cmp al, 0
0514+  1CEC C6 F6 1C      je skip100
0515+  1CEF 6A 30         add al, $30
0516+  1CF1 23            mov ah, al
0517+  1CF2 19 00         mov al, 0
0518+  1CF4 05 03         syscall sys_io  ; print coeff
0519+  1CF6             skip100:
0520+  1CF6 E4            pop a
0521+  1CF7 22 00         mov ah, 0
0522+  1CF9 26 0A 00      mov b, 10
0523+  1CFC AE            div a, b
0524+  1CFD D8            push b      ; save remainder
0525+  1CFE B9 00         cmp al, 0
0526+  1D00 C6 0A 1D      je skip10
0527+  1D03 6A 30         add al, $30
0528+  1D05 23            mov ah, al
0529+  1D06 19 00         mov al, 0
0530+  1D08 05 03         syscall sys_io  ; print coeff
0531+  1D0A             skip10:
0532+  1D0A E4            pop a
0533+  1D0B 1B            mov al, bl
0534+  1D0C 6A 30         add al, $30
0535+  1D0E 23            mov ah, al
0536+  1D0F 19 00         mov al, 0
0537+  1D11 05 03         syscall sys_io  ; print coeff
0538+  1D13 E5            pop b
0539+  1D14 E4            pop a
0540+  1D15 09            ret
0541+  1D16             
0542+  1D16             ;-----------------------------------------------------------------------------
0543+  1D16             ; INPUT 8BIT HEX INTEGER
0544+  1D16             ; read 8bit integer into AL
0545+  1D16             ;-----------------------------------------------------------------------------
0546+  1D16             scan_u8x:
0547+  1D16 F8 04 00      enter 4
0548+  1D19 D8            push b
0549+  1D1A DA            push d
0550+  1D1B             
0551+  1D1B FA FD FF      lea d, [bp + -3]
0552+  1D1E 07 F0 1A      call _gets        ; get number
0553+  1D21             
0554+  1D21 32            mov bl, [d]
0555+  1D22 37            mov bh, bl
0556+  1D23 33 01 00      mov bl, [d + 1]
0557+  1D26 07 A6 1A      call _atoi        ; convert to int in AL
0558+  1D29             
0559+  1D29 E7            pop d
0560+  1D2A E5            pop b
0561+  1D2B F9            leave
0562+  1D2C 09            ret
0563+  1D2D             
0564+  1D2D             ;-----------------------------------------------------------------------------
0565+  1D2D             ; input decimal number
0566+  1D2D             ; result in A
0567+  1D2D             ; 655'\0'
0568+  1D2D             ; low--------high
0569+  1D2D             ;-----------------------------------------------------------------------------
0570+  1D2D             scan_u16d:
0571+  1D2D F8 08 00      enter 8
0572+  1D30 E2            push si
0573+  1D31 D8            push b
0574+  1D32 D9            push c
0575+  1D33 DA            push d
0576+  1D34 FA F9 FF      lea d, [bp +- 7]
0577+  1D37 07 F0 1A      call _gets
0578+  1D3A 07 48 1A      call _strlen      ; get string length in C
0579+  1D3D 7E            dec c
0580+  1D3E FD 4E         mov si, d
0581+  1D40 12            mov a, c
0582+  1D41 FD 99         shl a
0583+  1D43 3B 7F 1D      mov d, table_power
0584+  1D46 59            add d, a
0585+  1D47 38 00 00      mov c, 0
0586+  1D4A             mul_loop:
0587+  1D4A F6            lodsb      ; load ASCII to al
0588+  1D4B B9 00         cmp al, 0
0589+  1D4D C6 60 1D      je mul_exit
0590+  1D50 6F 30         sub al, $30    ; make into integer
0591+  1D52 22 00         mov ah, 0
0592+  1D54 2A            mov b, [d]
0593+  1D55 AC            mul a, b      ; result in B since it fits in 16bits
0594+  1D56 11            mov a, b
0595+  1D57 28            mov b, c
0596+  1D58 54            add a, b
0597+  1D59 39            mov c, a
0598+  1D5A 63 02 00      sub d, 2
0599+  1D5D 0A 4A 1D      jmp mul_loop
0600+  1D60             mul_exit:
0601+  1D60 12            mov a, c
0602+  1D61 E7            pop d
0603+  1D62 E6            pop c
0604+  1D63 E5            pop b
0605+  1D64 EF            pop si
0606+  1D65 F9            leave
0607+  1D66 09            ret
0608+  1D67             
0609+  1D67 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1D6B 34 35 36 37 
0609+  1D6F 38 39 41 42 
0609+  1D73 43 44 45 46 
0610+  1D77 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1D7B 1B 5B 48 00 
0611+  1D7F             
0612+  1D7F             table_power:
0613+  1D7F 01 00         .dw 1
0614+  1D81 0A 00         .dw 10
0615+  1D83 64 00         .dw 100
0616+  1D85 E8 03         .dw 1000
0617+  1D87 10 27         .dw 100004114   1D89             ; --- END INLINE ASM BLOCK
4115   1D89             
4116   1D89 F9            leave
4117   1D8A 09            ret
4118   1D8B             
4119   1D8B             neighbours:
4120   1D8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4121   1D8E             ; $count 
4122   1D8E 52 02 00      sub sp, 2
4123   1D91             ;; count = 0; 
4124   1D91 FA FF FF      lea d, [bp + -1] ; $count
4125   1D94 DA            push d
4126   1D95 26 00 00      mov b, $0
4127   1D98 E7            pop d
4128   1D99 FD 43         mov [d], b
4129   1D9B             ;; if(currState[i+-1][j] == '@')			count++; 
4130   1D9B             _if55_cond:
4131   1D9B 3B F8 1F      mov d, _currState_data ; $currState
4132   1D9E D7            push a
4133   1D9F DA            push d
4134   1DA0 FA 05 00      lea d, [bp + 5] ; $i
4135   1DA3 2A            mov b, [d]
4136   1DA4             ; START TERMS
4137   1DA4 D7            push a
4138   1DA5 11            mov a, b
4139   1DA6 26 FF FF      mov b, $ffff
4140   1DA9 56            add b, a
4141   1DAA E4            pop a
4142   1DAB             ; END TERMS
4143   1DAB E7            pop d
4144   1DAC FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4145   1DB0 DA            push d
4146   1DB1 FA 07 00      lea d, [bp + 7] ; $j
4147   1DB4 2A            mov b, [d]
4148   1DB5 E7            pop d
4149   1DB6 5A            add d, b
4150   1DB7 E4            pop a
4151   1DB8 32            mov bl, [d]
4152   1DB9 A7 00         mov bh, 0
4153   1DBB             ; START RELATIONAL
4154   1DBB D7            push a
4155   1DBC 11            mov a, b
4156   1DBD 26 40 00      mov b, $40
4157   1DC0 B0            cmp a, b
4158   1DC1 FD 71         seq ; ==
4159   1DC3 E4            pop a
4160   1DC4             ; END RELATIONAL
4161   1DC4 C0 00 00      cmp b, 0
4162   1DC7 C6 DA 1D      je _if55_exit
4163   1DCA             _if55_true:
4164   1DCA             ;; count++; 
4165   1DCA FA FF FF      lea d, [bp + -1] ; $count
4166   1DCD 2A            mov b, [d]
4167   1DCE D8            push b
4168   1DCF FD 77         inc b
4169   1DD1 FA FF FF      lea d, [bp + -1] ; $count
4170   1DD4 FD 43         mov [d], b
4171   1DD6 E5            pop b
4172   1DD7 0A DA 1D      jmp _if55_exit
4173   1DDA             _if55_exit:
4174   1DDA             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
4175   1DDA             _if56_cond:
4176   1DDA 3B F8 1F      mov d, _currState_data ; $currState
4177   1DDD D7            push a
4178   1DDE DA            push d
4179   1DDF FA 05 00      lea d, [bp + 5] ; $i
4180   1DE2 2A            mov b, [d]
4181   1DE3             ; START TERMS
4182   1DE3 D7            push a
4183   1DE4 11            mov a, b
4184   1DE5 26 FF FF      mov b, $ffff
4185   1DE8 56            add b, a
4186   1DE9 E4            pop a
4187   1DEA             ; END TERMS
4188   1DEA E7            pop d
4189   1DEB FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4190   1DEF DA            push d
4191   1DF0 FA 07 00      lea d, [bp + 7] ; $j
4192   1DF3 2A            mov b, [d]
4193   1DF4             ; START TERMS
4194   1DF4 D7            push a
4195   1DF5 11            mov a, b
4196   1DF6 26 FF FF      mov b, $ffff
4197   1DF9 56            add b, a
4198   1DFA E4            pop a
4199   1DFB             ; END TERMS
4200   1DFB E7            pop d
4201   1DFC 5A            add d, b
4202   1DFD E4            pop a
4203   1DFE 32            mov bl, [d]
4204   1DFF A7 00         mov bh, 0
4205   1E01             ; START RELATIONAL
4206   1E01 D7            push a
4207   1E02 11            mov a, b
4208   1E03 26 40 00      mov b, $40
4209   1E06 B0            cmp a, b
4210   1E07 FD 71         seq ; ==
4211   1E09 E4            pop a
4212   1E0A             ; END RELATIONAL
4213   1E0A C0 00 00      cmp b, 0
4214   1E0D C6 20 1E      je _if56_exit
4215   1E10             _if56_true:
4216   1E10             ;; count++; 
4217   1E10 FA FF FF      lea d, [bp + -1] ; $count
4218   1E13 2A            mov b, [d]
4219   1E14 D8            push b
4220   1E15 FD 77         inc b
4221   1E17 FA FF FF      lea d, [bp + -1] ; $count
4222   1E1A FD 43         mov [d], b
4223   1E1C E5            pop b
4224   1E1D 0A 20 1E      jmp _if56_exit
4225   1E20             _if56_exit:
4226   1E20             ;; if(currState[i+-1][j+1] == '@') 	count++; 
4227   1E20             _if57_cond:
4228   1E20 3B F8 1F      mov d, _currState_data ; $currState
4229   1E23 D7            push a
4230   1E24 DA            push d
4231   1E25 FA 05 00      lea d, [bp + 5] ; $i
4232   1E28 2A            mov b, [d]
4233   1E29             ; START TERMS
4234   1E29 D7            push a
4235   1E2A 11            mov a, b
4236   1E2B 26 FF FF      mov b, $ffff
4237   1E2E 56            add b, a
4238   1E2F E4            pop a
4239   1E30             ; END TERMS
4240   1E30 E7            pop d
4241   1E31 FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4242   1E35 DA            push d
4243   1E36 FA 07 00      lea d, [bp + 7] ; $j
4244   1E39 2A            mov b, [d]
4245   1E3A             ; START TERMS
4246   1E3A D7            push a
4247   1E3B 11            mov a, b
4248   1E3C 26 01 00      mov b, $1
4249   1E3F 56            add b, a
4250   1E40 E4            pop a
4251   1E41             ; END TERMS
4252   1E41 E7            pop d
4253   1E42 5A            add d, b
4254   1E43 E4            pop a
4255   1E44 32            mov bl, [d]
4256   1E45 A7 00         mov bh, 0
4257   1E47             ; START RELATIONAL
4258   1E47 D7            push a
4259   1E48 11            mov a, b
4260   1E49 26 40 00      mov b, $40
4261   1E4C B0            cmp a, b
4262   1E4D FD 71         seq ; ==
4263   1E4F E4            pop a
4264   1E50             ; END RELATIONAL
4265   1E50 C0 00 00      cmp b, 0
4266   1E53 C6 66 1E      je _if57_exit
4267   1E56             _if57_true:
4268   1E56             ;; count++; 
4269   1E56 FA FF FF      lea d, [bp + -1] ; $count
4270   1E59 2A            mov b, [d]
4271   1E5A D8            push b
4272   1E5B FD 77         inc b
4273   1E5D FA FF FF      lea d, [bp + -1] ; $count
4274   1E60 FD 43         mov [d], b
4275   1E62 E5            pop b
4276   1E63 0A 66 1E      jmp _if57_exit
4277   1E66             _if57_exit:
4278   1E66             ;; if(currState[i][j+-1] == '@') 		count++; 
4279   1E66             _if58_cond:
4280   1E66 3B F8 1F      mov d, _currState_data ; $currState
4281   1E69 D7            push a
4282   1E6A DA            push d
4283   1E6B FA 05 00      lea d, [bp + 5] ; $i
4284   1E6E 2A            mov b, [d]
4285   1E6F E7            pop d
4286   1E70 FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4287   1E74 DA            push d
4288   1E75 FA 07 00      lea d, [bp + 7] ; $j
4289   1E78 2A            mov b, [d]
4290   1E79             ; START TERMS
4291   1E79 D7            push a
4292   1E7A 11            mov a, b
4293   1E7B 26 FF FF      mov b, $ffff
4294   1E7E 56            add b, a
4295   1E7F E4            pop a
4296   1E80             ; END TERMS
4297   1E80 E7            pop d
4298   1E81 5A            add d, b
4299   1E82 E4            pop a
4300   1E83 32            mov bl, [d]
4301   1E84 A7 00         mov bh, 0
4302   1E86             ; START RELATIONAL
4303   1E86 D7            push a
4304   1E87 11            mov a, b
4305   1E88 26 40 00      mov b, $40
4306   1E8B B0            cmp a, b
4307   1E8C FD 71         seq ; ==
4308   1E8E E4            pop a
4309   1E8F             ; END RELATIONAL
4310   1E8F C0 00 00      cmp b, 0
4311   1E92 C6 A5 1E      je _if58_exit
4312   1E95             _if58_true:
4313   1E95             ;; count++; 
4314   1E95 FA FF FF      lea d, [bp + -1] ; $count
4315   1E98 2A            mov b, [d]
4316   1E99 D8            push b
4317   1E9A FD 77         inc b
4318   1E9C FA FF FF      lea d, [bp + -1] ; $count
4319   1E9F FD 43         mov [d], b
4320   1EA1 E5            pop b
4321   1EA2 0A A5 1E      jmp _if58_exit
4322   1EA5             _if58_exit:
4323   1EA5             ;; if(currState[i][j+1] == '@') 			count++; 
4324   1EA5             _if59_cond:
4325   1EA5 3B F8 1F      mov d, _currState_data ; $currState
4326   1EA8 D7            push a
4327   1EA9 DA            push d
4328   1EAA FA 05 00      lea d, [bp + 5] ; $i
4329   1EAD 2A            mov b, [d]
4330   1EAE E7            pop d
4331   1EAF FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4332   1EB3 DA            push d
4333   1EB4 FA 07 00      lea d, [bp + 7] ; $j
4334   1EB7 2A            mov b, [d]
4335   1EB8             ; START TERMS
4336   1EB8 D7            push a
4337   1EB9 11            mov a, b
4338   1EBA 26 01 00      mov b, $1
4339   1EBD 56            add b, a
4340   1EBE E4            pop a
4341   1EBF             ; END TERMS
4342   1EBF E7            pop d
4343   1EC0 5A            add d, b
4344   1EC1 E4            pop a
4345   1EC2 32            mov bl, [d]
4346   1EC3 A7 00         mov bh, 0
4347   1EC5             ; START RELATIONAL
4348   1EC5 D7            push a
4349   1EC6 11            mov a, b
4350   1EC7 26 40 00      mov b, $40
4351   1ECA B0            cmp a, b
4352   1ECB FD 71         seq ; ==
4353   1ECD E4            pop a
4354   1ECE             ; END RELATIONAL
4355   1ECE C0 00 00      cmp b, 0
4356   1ED1 C6 E4 1E      je _if59_exit
4357   1ED4             _if59_true:
4358   1ED4             ;; count++; 
4359   1ED4 FA FF FF      lea d, [bp + -1] ; $count
4360   1ED7 2A            mov b, [d]
4361   1ED8 D8            push b
4362   1ED9 FD 77         inc b
4363   1EDB FA FF FF      lea d, [bp + -1] ; $count
4364   1EDE FD 43         mov [d], b
4365   1EE0 E5            pop b
4366   1EE1 0A E4 1E      jmp _if59_exit
4367   1EE4             _if59_exit:
4368   1EE4             ;; if(currState[i+1][j+-1] == '@') 	count++; 
4369   1EE4             _if60_cond:
4370   1EE4 3B F8 1F      mov d, _currState_data ; $currState
4371   1EE7 D7            push a
4372   1EE8 DA            push d
4373   1EE9 FA 05 00      lea d, [bp + 5] ; $i
4374   1EEC 2A            mov b, [d]
4375   1EED             ; START TERMS
4376   1EED D7            push a
4377   1EEE 11            mov a, b
4378   1EEF 26 01 00      mov b, $1
4379   1EF2 56            add b, a
4380   1EF3 E4            pop a
4381   1EF4             ; END TERMS
4382   1EF4 E7            pop d
4383   1EF5 FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4384   1EF9 DA            push d
4385   1EFA FA 07 00      lea d, [bp + 7] ; $j
4386   1EFD 2A            mov b, [d]
4387   1EFE             ; START TERMS
4388   1EFE D7            push a
4389   1EFF 11            mov a, b
4390   1F00 26 FF FF      mov b, $ffff
4391   1F03 56            add b, a
4392   1F04 E4            pop a
4393   1F05             ; END TERMS
4394   1F05 E7            pop d
4395   1F06 5A            add d, b
4396   1F07 E4            pop a
4397   1F08 32            mov bl, [d]
4398   1F09 A7 00         mov bh, 0
4399   1F0B             ; START RELATIONAL
4400   1F0B D7            push a
4401   1F0C 11            mov a, b
4402   1F0D 26 40 00      mov b, $40
4403   1F10 B0            cmp a, b
4404   1F11 FD 71         seq ; ==
4405   1F13 E4            pop a
4406   1F14             ; END RELATIONAL
4407   1F14 C0 00 00      cmp b, 0
4408   1F17 C6 2A 1F      je _if60_exit
4409   1F1A             _if60_true:
4410   1F1A             ;; count++; 
4411   1F1A FA FF FF      lea d, [bp + -1] ; $count
4412   1F1D 2A            mov b, [d]
4413   1F1E D8            push b
4414   1F1F FD 77         inc b
4415   1F21 FA FF FF      lea d, [bp + -1] ; $count
4416   1F24 FD 43         mov [d], b
4417   1F26 E5            pop b
4418   1F27 0A 2A 1F      jmp _if60_exit
4419   1F2A             _if60_exit:
4420   1F2A             ;; if(currState[i+1][j] == '@') 			count++; 
4421   1F2A             _if61_cond:
4422   1F2A 3B F8 1F      mov d, _currState_data ; $currState
4423   1F2D D7            push a
4424   1F2E DA            push d
4425   1F2F FA 05 00      lea d, [bp + 5] ; $i
4426   1F32 2A            mov b, [d]
4427   1F33             ; START TERMS
4428   1F33 D7            push a
4429   1F34 11            mov a, b
4430   1F35 26 01 00      mov b, $1
4431   1F38 56            add b, a
4432   1F39 E4            pop a
4433   1F3A             ; END TERMS
4434   1F3A E7            pop d
4435   1F3B FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4436   1F3F DA            push d
4437   1F40 FA 07 00      lea d, [bp + 7] ; $j
4438   1F43 2A            mov b, [d]
4439   1F44 E7            pop d
4440   1F45 5A            add d, b
4441   1F46 E4            pop a
4442   1F47 32            mov bl, [d]
4443   1F48 A7 00         mov bh, 0
4444   1F4A             ; START RELATIONAL
4445   1F4A D7            push a
4446   1F4B 11            mov a, b
4447   1F4C 26 40 00      mov b, $40
4448   1F4F B0            cmp a, b
4449   1F50 FD 71         seq ; ==
4450   1F52 E4            pop a
4451   1F53             ; END RELATIONAL
4452   1F53 C0 00 00      cmp b, 0
4453   1F56 C6 69 1F      je _if61_exit
4454   1F59             _if61_true:
4455   1F59             ;; count++; 
4456   1F59 FA FF FF      lea d, [bp + -1] ; $count
4457   1F5C 2A            mov b, [d]
4458   1F5D D8            push b
4459   1F5E FD 77         inc b
4460   1F60 FA FF FF      lea d, [bp + -1] ; $count
4461   1F63 FD 43         mov [d], b
4462   1F65 E5            pop b
4463   1F66 0A 69 1F      jmp _if61_exit
4464   1F69             _if61_exit:
4465   1F69             ;; if(currState[i+1][j+1] == '@') 		count++; 
4466   1F69             _if62_cond:
4467   1F69 3B F8 1F      mov d, _currState_data ; $currState
4468   1F6C D7            push a
4469   1F6D DA            push d
4470   1F6E FA 05 00      lea d, [bp + 5] ; $i
4471   1F71 2A            mov b, [d]
4472   1F72             ; START TERMS
4473   1F72 D7            push a
4474   1F73 11            mov a, b
4475   1F74 26 01 00      mov b, $1
4476   1F77 56            add b, a
4477   1F78 E4            pop a
4478   1F79             ; END TERMS
4479   1F79 E7            pop d
4480   1F7A FD 13 32 00   mma 50 ; mov a, 50; mul a, b; add d, b
4481   1F7E DA            push d
4482   1F7F FA 07 00      lea d, [bp + 7] ; $j
4483   1F82 2A            mov b, [d]
4484   1F83             ; START TERMS
4485   1F83 D7            push a
4486   1F84 11            mov a, b
4487   1F85 26 01 00      mov b, $1
4488   1F88 56            add b, a
4489   1F89 E4            pop a
4490   1F8A             ; END TERMS
4491   1F8A E7            pop d
4492   1F8B 5A            add d, b
4493   1F8C E4            pop a
4494   1F8D 32            mov bl, [d]
4495   1F8E A7 00         mov bh, 0
4496   1F90             ; START RELATIONAL
4497   1F90 D7            push a
4498   1F91 11            mov a, b
4499   1F92 26 40 00      mov b, $40
4500   1F95 B0            cmp a, b
4501   1F96 FD 71         seq ; ==
4502   1F98 E4            pop a
4503   1F99             ; END RELATIONAL
4504   1F99 C0 00 00      cmp b, 0
4505   1F9C C6 AF 1F      je _if62_exit
4506   1F9F             _if62_true:
4507   1F9F             ;; count++; 
4508   1F9F FA FF FF      lea d, [bp + -1] ; $count
4509   1FA2 2A            mov b, [d]
4510   1FA3 D8            push b
4511   1FA4 FD 77         inc b
4512   1FA6 FA FF FF      lea d, [bp + -1] ; $count
4513   1FA9 FD 43         mov [d], b
4514   1FAB E5            pop b
4515   1FAC 0A AF 1F      jmp _if62_exit
4516   1FAF             _if62_exit:
4517   1FAF             ;; return count; 
4518   1FAF FA FF FF      lea d, [bp + -1] ; $count
4519   1FB2 2A            mov b, [d]
4520   1FB3 F9            leave
4521   1FB4 09            ret
4522   1FB5             ; --- END TEXT BLOCK
4523   1FB5             
4524   1FB5             ; --- BEGIN DATA BLOCK
4525   1FB5 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4525   1FB9 45 46 47 48 
4525   1FBD 49 4A 4B 4C 
4525   1FC1 4D 4E 4F 50 
4525   1FC5 51 52 53 54 
4525   1FC9 55 56 57 58 
4525   1FCD 59 5A 61 62 
4525   1FD1 63 64 65 66 
4525   1FD5 67 68 69 6A 
4525   1FD9 6B 6C 6D 6E 
4525   1FDD 6F 70 71 72 
4525   1FE1 73 74 75 76 
4525   1FE5 77 78 79 7A 
4525   1FE9 30 31 32 33 
4525   1FED 34 35 36 37 
4525   1FF1 38 39 2B 2F 
4525   1FF5 00 
4526   1FF6 B5 1F       _base64_table: .dw _base64_table_data
4527   1FF8 00 00 00 00 _currState_data: .fill 2500, 0
4527   1FFC 00 00 00 00 
4527   2000 00 00 00 00 
4527   2004 00 00 00 00 
4527   2008 00 00 00 00 
4527   200C 00 00 00 00 
4527   2010 00 00 00 00 
4527   2014 00 00 00 00 
4527   2018 00 00 00 00 
4527   201C 00 00 00 00 
4527   2020 00 00 00 00 
4527   2024 00 00 00 00 
4527   2028 00 00 00 00 
4527   202C 00 00 00 00 
4527   2030 00 00 00 00 
4527   2034 00 00 00 00 
4527   2038 00 00 00 00 
4527   203C 00 00 00 00 
4527   2040 00 00 00 00 
4527   2044 00 00 00 00 
4527   2048 00 00 00 00 
4527   204C 00 00 00 00 
4527   2050 00 00 00 00 
4527   2054 00 00 00 00 
4527   2058 00 00 00 00 
4527   205C 00 00 00 00 
4527   2060 00 00 00 00 
4527   2064 00 00 00 00 
4527   2068 00 00 00 00 
4527   206C 00 00 00 00 
4527   2070 00 00 00 00 
4527   2074 00 00 00 00 
4527   2078 00 00 00 00 
4527   207C 00 00 00 00 
4527   2080 00 00 00 00 
4527   2084 00 00 00 00 
4527   2088 00 00 00 00 
4527   208C 00 00 00 00 
4527   2090 00 00 00 00 
4527   2094 00 00 00 00 
4527   2098 00 00 00 00 
4527   209C 00 00 00 00 
4527   20A0 00 00 00 00 
4527   20A4 00 00 00 00 
4527   20A8 00 00 00 00 
4527   20AC 00 00 00 00 
4527   20B0 00 00 00 00 
4527   20B4 00 00 00 00 
4527   20B8 00 00 00 00 
4527   20BC 00 00 00 00 
4527   20C0 00 00 00 00 
4527   20C4 00 00 00 00 
4527   20C8 00 00 00 00 
4527   20CC 00 00 00 00 
4527   20D0 00 00 00 00 
4527   20D4 00 00 00 00 
4527   20D8 00 00 00 00 
4527   20DC 00 00 00 00 
4527   20E0 00 00 00 00 
4527   20E4 00 00 00 00 
4527   20E8 00 00 00 00 
4527   20EC 00 00 00 00 
4527   20F0 00 00 00 00 
4527   20F4 00 00 00 00 
4527   20F8 00 00 00 00 
4527   20FC 00 00 00 00 
4527   2100 00 00 00 00 
4527   2104 00 00 00 00 
4527   2108 00 00 00 00 
4527   210C 00 00 00 00 
4527   2110 00 00 00 00 
4527   2114 00 00 00 00 
4527   2118 00 00 00 00 
4527   211C 00 00 00 00 
4527   2120 00 00 00 00 
4527   2124 00 00 00 00 
4527   2128 00 00 00 00 
4527   212C 00 00 00 00 
4527   2130 00 00 00 00 
4527   2134 00 00 00 00 
4527   2138 00 00 00 00 
4527   213C 00 00 00 00 
4527   2140 00 00 00 00 
4527   2144 00 00 00 00 
4527   2148 00 00 00 00 
4527   214C 00 00 00 00 
4527   2150 00 00 00 00 
4527   2154 00 00 00 00 
4527   2158 00 00 00 00 
4527   215C 00 00 00 00 
4527   2160 00 00 00 00 
4527   2164 00 00 00 00 
4527   2168 00 00 00 00 
4527   216C 00 00 00 00 
4527   2170 00 00 00 00 
4527   2174 00 00 00 00 
4527   2178 00 00 00 00 
4527   217C 00 00 00 00 
4527   2180 00 00 00 00 
4527   2184 00 00 00 00 
4527   2188 00 00 00 00 
4527   218C 00 00 00 00 
4527   2190 00 00 00 00 
4527   2194 00 00 00 00 
4527   2198 00 00 00 00 
4527   219C 00 00 00 00 
4527   21A0 00 00 00 00 
4527   21A4 00 00 00 00 
4527   21A8 00 00 00 00 
4527   21AC 00 00 00 00 
4527   21B0 00 00 00 00 
4527   21B4 00 00 00 00 
4527   21B8 00 00 00 00 
4527   21BC 00 00 00 00 
4527   21C0 00 00 00 00 
4527   21C4 00 00 00 00 
4527   21C8 00 00 00 00 
4527   21CC 00 00 00 00 
4527   21D0 00 00 00 00 
4527   21D4 00 00 00 00 
4527   21D8 00 00 00 00 
4527   21DC 00 00 00 00 
4527   21E0 00 00 00 00 
4527   21E4 00 00 00 00 
4527   21E8 00 00 00 00 
4527   21EC 00 00 00 00 
4527   21F0 00 00 00 00 
4527   21F4 00 00 00 00 
4527   21F8 00 00 00 00 
4527   21FC 00 00 00 00 
4527   2200 00 00 00 00 
4527   2204 00 00 00 00 
4527   2208 00 00 00 00 
4527   220C 00 00 00 00 
4527   2210 00 00 00 00 
4527   2214 00 00 00 00 
4527   2218 00 00 00 00 
4527   221C 00 00 00 00 
4527   2220 00 00 00 00 
4527   2224 00 00 00 00 
4527   2228 00 00 00 00 
4527   222C 00 00 00 00 
4527   2230 00 00 00 00 
4527   2234 00 00 00 00 
4527   2238 00 00 00 00 
4527   223C 00 00 00 00 
4527   2240 00 00 00 00 
4527   2244 00 00 00 00 
4527   2248 00 00 00 00 
4527   224C 00 00 00 00 
4527   2250 00 00 00 00 
4527   2254 00 00 00 00 
4527   2258 00 00 00 00 
4527   225C 00 00 00 00 
4527   2260 00 00 00 00 
4527   2264 00 00 00 00 
4527   2268 00 00 00 00 
4527   226C 00 00 00 00 
4527   2270 00 00 00 00 
4527   2274 00 00 00 00 
4527   2278 00 00 00 00 
4527   227C 00 00 00 00 
4527   2280 00 00 00 00 
4527   2284 00 00 00 00 
4527   2288 00 00 00 00 
4527   228C 00 00 00 00 
4527   2290 00 00 00 00 
4527   2294 00 00 00 00 
4527   2298 00 00 00 00 
4527   229C 00 00 00 00 
4527   22A0 00 00 00 00 
4527   22A4 00 00 00 00 
4527   22A8 00 00 00 00 
4527   22AC 00 00 00 00 
4527   22B0 00 00 00 00 
4527   22B4 00 00 00 00 
4527   22B8 00 00 00 00 
4527   22BC 00 00 00 00 
4527   22C0 00 00 00 00 
4527   22C4 00 00 00 00 
4527   22C8 00 00 00 00 
4527   22CC 00 00 00 00 
4527   22D0 00 00 00 00 
4527   22D4 00 00 00 00 
4527   22D8 00 00 00 00 
4527   22DC 00 00 00 00 
4527   22E0 00 00 00 00 
4527   22E4 00 00 00 00 
4527   22E8 00 00 00 00 
4527   22EC 00 00 00 00 
4527   22F0 00 00 00 00 
4527   22F4 00 00 00 00 
4527   22F8 00 00 00 00 
4527   22FC 00 00 00 00 
4527   2300 00 00 00 00 
4527   2304 00 00 00 00 
4527   2308 00 00 00 00 
4527   230C 00 00 00 00 
4527   2310 00 00 00 00 
4527   2314 00 00 00 00 
4527   2318 00 00 00 00 
4527   231C 00 00 00 00 
4527   2320 00 00 00 00 
4527   2324 00 00 00 00 
4527   2328 00 00 00 00 
4527   232C 00 00 00 00 
4527   2330 00 00 00 00 
4527   2334 00 00 00 00 
4527   2338 00 00 00 00 
4527   233C 00 00 00 00 
4527   2340 00 00 00 00 
4527   2344 00 00 00 00 
4527   2348 00 00 00 00 
4527   234C 00 00 00 00 
4527   2350 00 00 00 00 
4527   2354 00 00 00 00 
4527   2358 00 00 00 00 
4527   235C 00 00 00 00 
4527   2360 00 00 00 00 
4527   2364 00 00 00 00 
4527   2368 00 00 00 00 
4527   236C 00 00 00 00 
4527   2370 00 00 00 00 
4527   2374 00 00 00 00 
4527   2378 00 00 00 00 
4527   237C 00 00 00 00 
4527   2380 00 00 00 00 
4527   2384 00 00 00 00 
4527   2388 00 00 00 00 
4527   238C 00 00 00 00 
4527   2390 00 00 00 00 
4527   2394 00 00 00 00 
4527   2398 00 00 00 00 
4527   239C 00 00 00 00 
4527   23A0 00 00 00 00 
4527   23A4 00 00 00 00 
4527   23A8 00 00 00 00 
4527   23AC 00 00 00 00 
4527   23B0 00 00 00 00 
4527   23B4 00 00 00 00 
4527   23B8 00 00 00 00 
4527   23BC 00 00 00 00 
4527   23C0 00 00 00 00 
4527   23C4 00 00 00 00 
4527   23C8 00 00 00 00 
4527   23CC 00 00 00 00 
4527   23D0 00 00 00 00 
4527   23D4 00 00 00 00 
4527   23D8 00 00 00 00 
4527   23DC 00 00 00 00 
4527   23E0 00 00 00 00 
4527   23E4 00 00 00 00 
4527   23E8 00 00 00 00 
4527   23EC 00 00 00 00 
4527   23F0 00 00 00 00 
4527   23F4 00 00 00 00 
4527   23F8 00 00 00 00 
4527   23FC 00 00 00 00 
4527   2400 00 00 00 00 
4527   2404 00 00 00 00 
4527   2408 00 00 00 00 
4527   240C 00 00 00 00 
4527   2410 00 00 00 00 
4527   2414 00 00 00 00 
4527   2418 00 00 00 00 
4527   241C 00 00 00 00 
4527   2420 00 00 00 00 
4527   2424 00 00 00 00 
4527   2428 00 00 00 00 
4527   242C 00 00 00 00 
4527   2430 00 00 00 00 
4527   2434 00 00 00 00 
4527   2438 00 00 00 00 
4527   243C 00 00 00 00 
4527   2440 00 00 00 00 
4527   2444 00 00 00 00 
4527   2448 00 00 00 00 
4527   244C 00 00 00 00 
4527   2450 00 00 00 00 
4527   2454 00 00 00 00 
4527   2458 00 00 00 00 
4527   245C 00 00 00 00 
4527   2460 00 00 00 00 
4527   2464 00 00 00 00 
4527   2468 00 00 00 00 
4527   246C 00 00 00 00 
4527   2470 00 00 00 00 
4527   2474 00 00 00 00 
4527   2478 00 00 00 00 
4527   247C 00 00 00 00 
4527   2480 00 00 00 00 
4527   2484 00 00 00 00 
4527   2488 00 00 00 00 
4527   248C 00 00 00 00 
4527   2490 00 00 00 00 
4527   2494 00 00 00 00 
4527   2498 00 00 00 00 
4527   249C 00 00 00 00 
4527   24A0 00 00 00 00 
4527   24A4 00 00 00 00 
4527   24A8 00 00 00 00 
4527   24AC 00 00 00 00 
4527   24B0 00 00 00 00 
4527   24B4 00 00 00 00 
4527   24B8 00 00 00 00 
4527   24BC 00 00 00 00 
4527   24C0 00 00 00 00 
4527   24C4 00 00 00 00 
4527   24C8 00 00 00 00 
4527   24CC 00 00 00 00 
4527   24D0 00 00 00 00 
4527   24D4 00 00 00 00 
4527   24D8 00 00 00 00 
4527   24DC 00 00 00 00 
4527   24E0 00 00 00 00 
4527   24E4 00 00 00 00 
4527   24E8 00 00 00 00 
4527   24EC 00 00 00 00 
4527   24F0 00 00 00 00 
4527   24F4 00 00 00 00 
4527   24F8 00 00 00 00 
4527   24FC 00 00 00 00 
4527   2500 00 00 00 00 
4527   2504 00 00 00 00 
4527   2508 00 00 00 00 
4527   250C 00 00 00 00 
4527   2510 00 00 00 00 
4527   2514 00 00 00 00 
4527   2518 00 00 00 00 
4527   251C 00 00 00 00 
4527   2520 00 00 00 00 
4527   2524 00 00 00 00 
4527   2528 00 00 00 00 
4527   252C 00 00 00 00 
4527   2530 00 00 00 00 
4527   2534 00 00 00 00 
4527   2538 00 00 00 00 
4527   253C 00 00 00 00 
4527   2540 00 00 00 00 
4527   2544 00 00 00 00 
4527   2548 00 00 00 00 
4527   254C 00 00 00 00 
4527   2550 00 00 00 00 
4527   2554 00 00 00 00 
4527   2558 00 00 00 00 
4527   255C 00 00 00 00 
4527   2560 00 00 00 00 
4527   2564 00 00 00 00 
4527   2568 00 00 00 00 
4527   256C 00 00 00 00 
4527   2570 00 00 00 00 
4527   2574 00 00 00 00 
4527   2578 00 00 00 00 
4527   257C 00 00 00 00 
4527   2580 00 00 00 00 
4527   2584 00 00 00 00 
4527   2588 00 00 00 00 
4527   258C 00 00 00 00 
4527   2590 00 00 00 00 
4527   2594 00 00 00 00 
4527   2598 00 00 00 00 
4527   259C 00 00 00 00 
4527   25A0 00 00 00 00 
4527   25A4 00 00 00 00 
4527   25A8 00 00 00 00 
4527   25AC 00 00 00 00 
4527   25B0 00 00 00 00 
4527   25B4 00 00 00 00 
4527   25B8 00 00 00 00 
4527   25BC 00 00 00 00 
4527   25C0 00 00 00 00 
4527   25C4 00 00 00 00 
4527   25C8 00 00 00 00 
4527   25CC 00 00 00 00 
4527   25D0 00 00 00 00 
4527   25D4 00 00 00 00 
4527   25D8 00 00 00 00 
4527   25DC 00 00 00 00 
4527   25E0 00 00 00 00 
4527   25E4 00 00 00 00 
4527   25E8 00 00 00 00 
4527   25EC 00 00 00 00 
4527   25F0 00 00 00 00 
4527   25F4 00 00 00 00 
4527   25F8 00 00 00 00 
4527   25FC 00 00 00 00 
4527   2600 00 00 00 00 
4527   2604 00 00 00 00 
4527   2608 00 00 00 00 
4527   260C 00 00 00 00 
4527   2610 00 00 00 00 
4527   2614 00 00 00 00 
4527   2618 00 00 00 00 
4527   261C 00 00 00 00 
4527   2620 00 00 00 00 
4527   2624 00 00 00 00 
4527   2628 00 00 00 00 
4527   262C 00 00 00 00 
4527   2630 00 00 00 00 
4527   2634 00 00 00 00 
4527   2638 00 00 00 00 
4527   263C 00 00 00 00 
4527   2640 00 00 00 00 
4527   2644 00 00 00 00 
4527   2648 00 00 00 00 
4527   264C 00 00 00 00 
4527   2650 00 00 00 00 
4527   2654 00 00 00 00 
4527   2658 00 00 00 00 
4527   265C 00 00 00 00 
4527   2660 00 00 00 00 
4527   2664 00 00 00 00 
4527   2668 00 00 00 00 
4527   266C 00 00 00 00 
4527   2670 00 00 00 00 
4527   2674 00 00 00 00 
4527   2678 00 00 00 00 
4527   267C 00 00 00 00 
4527   2680 00 00 00 00 
4527   2684 00 00 00 00 
4527   2688 00 00 00 00 
4527   268C 00 00 00 00 
4527   2690 00 00 00 00 
4527   2694 00 00 00 00 
4527   2698 00 00 00 00 
4527   269C 00 00 00 00 
4527   26A0 00 00 00 00 
4527   26A4 00 00 00 00 
4527   26A8 00 00 00 00 
4527   26AC 00 00 00 00 
4527   26B0 00 00 00 00 
4527   26B4 00 00 00 00 
4527   26B8 00 00 00 00 
4527   26BC 00 00 00 00 
4527   26C0 00 00 00 00 
4527   26C4 00 00 00 00 
4527   26C8 00 00 00 00 
4527   26CC 00 00 00 00 
4527   26D0 00 00 00 00 
4527   26D4 00 00 00 00 
4527   26D8 00 00 00 00 
4527   26DC 00 00 00 00 
4527   26E0 00 00 00 00 
4527   26E4 00 00 00 00 
4527   26E8 00 00 00 00 
4527   26EC 00 00 00 00 
4527   26F0 00 00 00 00 
4527   26F4 00 00 00 00 
4527   26F8 00 00 00 00 
4527   26FC 00 00 00 00 
4527   2700 00 00 00 00 
4527   2704 00 00 00 00 
4527   2708 00 00 00 00 
4527   270C 00 00 00 00 
4527   2710 00 00 00 00 
4527   2714 00 00 00 00 
4527   2718 00 00 00 00 
4527   271C 00 00 00 00 
4527   2720 00 00 00 00 
4527   2724 00 00 00 00 
4527   2728 00 00 00 00 
4527   272C 00 00 00 00 
4527   2730 00 00 00 00 
4527   2734 00 00 00 00 
4527   2738 00 00 00 00 
4527   273C 00 00 00 00 
4527   2740 00 00 00 00 
4527   2744 00 00 00 00 
4527   2748 00 00 00 00 
4527   274C 00 00 00 00 
4527   2750 00 00 00 00 
4527   2754 00 00 00 00 
4527   2758 00 00 00 00 
4527   275C 00 00 00 00 
4527   2760 00 00 00 00 
4527   2764 00 00 00 00 
4527   2768 00 00 00 00 
4527   276C 00 00 00 00 
4527   2770 00 00 00 00 
4527   2774 00 00 00 00 
4527   2778 00 00 00 00 
4527   277C 00 00 00 00 
4527   2780 00 00 00 00 
4527   2784 00 00 00 00 
4527   2788 00 00 00 00 
4527   278C 00 00 00 00 
4527   2790 00 00 00 00 
4527   2794 00 00 00 00 
4527   2798 00 00 00 00 
4527   279C 00 00 00 00 
4527   27A0 00 00 00 00 
4527   27A4 00 00 00 00 
4527   27A8 00 00 00 00 
4527   27AC 00 00 00 00 
4527   27B0 00 00 00 00 
4527   27B4 00 00 00 00 
4527   27B8 00 00 00 00 
4527   27BC 00 00 00 00 
4527   27C0 00 00 00 00 
4527   27C4 00 00 00 00 
4527   27C8 00 00 00 00 
4527   27CC 00 00 00 00 
4527   27D0 00 00 00 00 
4527   27D4 00 00 00 00 
4527   27D8 00 00 00 00 
4527   27DC 00 00 00 00 
4527   27E0 00 00 00 00 
4527   27E4 00 00 00 00 
4527   27E8 00 00 00 00 
4527   27EC 00 00 00 00 
4527   27F0 00 00 00 00 
4527   27F4 00 00 00 00 
4527   27F8 00 00 00 00 
4527   27FC 00 00 00 00 
4527   2800 00 00 00 00 
4527   2804 00 00 00 00 
4527   2808 00 00 00 00 
4527   280C 00 00 00 00 
4527   2810 00 00 00 00 
4527   2814 00 00 00 00 
4527   2818 00 00 00 00 
4527   281C 00 00 00 00 
4527   2820 00 00 00 00 
4527   2824 00 00 00 00 
4527   2828 00 00 00 00 
4527   282C 00 00 00 00 
4527   2830 00 00 00 00 
4527   2834 00 00 00 00 
4527   2838 00 00 00 00 
4527   283C 00 00 00 00 
4527   2840 00 00 00 00 
4527   2844 00 00 00 00 
4527   2848 00 00 00 00 
4527   284C 00 00 00 00 
4527   2850 00 00 00 00 
4527   2854 00 00 00 00 
4527   2858 00 00 00 00 
4527   285C 00 00 00 00 
4527   2860 00 00 00 00 
4527   2864 00 00 00 00 
4527   2868 00 00 00 00 
4527   286C 00 00 00 00 
4527   2870 00 00 00 00 
4527   2874 00 00 00 00 
4527   2878 00 00 00 00 
4527   287C 00 00 00 00 
4527   2880 00 00 00 00 
4527   2884 00 00 00 00 
4527   2888 00 00 00 00 
4527   288C 00 00 00 00 
4527   2890 00 00 00 00 
4527   2894 00 00 00 00 
4527   2898 00 00 00 00 
4527   289C 00 00 00 00 
4527   28A0 00 00 00 00 
4527   28A4 00 00 00 00 
4527   28A8 00 00 00 00 
4527   28AC 00 00 00 00 
4527   28B0 00 00 00 00 
4527   28B4 00 00 00 00 
4527   28B8 00 00 00 00 
4527   28BC 00 00 00 00 
4527   28C0 00 00 00 00 
4527   28C4 00 00 00 00 
4527   28C8 00 00 00 00 
4527   28CC 00 00 00 00 
4527   28D0 00 00 00 00 
4527   28D4 00 00 00 00 
4527   28D8 00 00 00 00 
4527   28DC 00 00 00 00 
4527   28E0 00 00 00 00 
4527   28E4 00 00 00 00 
4527   28E8 00 00 00 00 
4527   28EC 00 00 00 00 
4527   28F0 00 00 00 00 
4527   28F4 00 00 00 00 
4527   28F8 00 00 00 00 
4527   28FC 00 00 00 00 
4527   2900 00 00 00 00 
4527   2904 00 00 00 00 
4527   2908 00 00 00 00 
4527   290C 00 00 00 00 
4527   2910 00 00 00 00 
4527   2914 00 00 00 00 
4527   2918 00 00 00 00 
4527   291C 00 00 00 00 
4527   2920 00 00 00 00 
4527   2924 00 00 00 00 
4527   2928 00 00 00 00 
4527   292C 00 00 00 00 
4527   2930 00 00 00 00 
4527   2934 00 00 00 00 
4527   2938 00 00 00 00 
4527   293C 00 00 00 00 
4527   2940 00 00 00 00 
4527   2944 00 00 00 00 
4527   2948 00 00 00 00 
4527   294C 00 00 00 00 
4527   2950 00 00 00 00 
4527   2954 00 00 00 00 
4527   2958 00 00 00 00 
4527   295C 00 00 00 00 
4527   2960 00 00 00 00 
4527   2964 00 00 00 00 
4527   2968 00 00 00 00 
4527   296C 00 00 00 00 
4527   2970 00 00 00 00 
4527   2974 00 00 00 00 
4527   2978 00 00 00 00 
4527   297C 00 00 00 00 
4527   2980 00 00 00 00 
4527   2984 00 00 00 00 
4527   2988 00 00 00 00 
4527   298C 00 00 00 00 
4527   2990 00 00 00 00 
4527   2994 00 00 00 00 
4527   2998 00 00 00 00 
4527   299C 00 00 00 00 
4527   29A0 00 00 00 00 
4527   29A4 00 00 00 00 
4527   29A8 00 00 00 00 
4527   29AC 00 00 00 00 
4527   29B0 00 00 00 00 
4527   29B4 00 00 00 00 
4527   29B8 00 00 00 00 
4528   29BC 25 64 0A 00 __s0: .db "%d\n", 0
4529   29C0 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
4529   29C4 70 65 63 74 
4529   29C8 65 64 20 66 
4529   29CC 6F 72 6D 61 
4529   29D0 74 20 69 6E 
4529   29D4 20 70 72 69 
4529   29D8 6E 74 66 2E 
4529   29DC 00 
4530   29DD 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
4530   29E1 72 3A 20 55 
4530   29E5 6E 6B 6E 6F 
4530   29E9 77 6E 20 61 
4530   29ED 72 67 75 6D 
4530   29F1 65 6E 74 20 
4530   29F5 74 79 70 65 
4530   29F9 2E 0A 00 
4531   29FC 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
4531   2A00 1B 5B 48 00 
4532   2A04             
4533   2A04 06 2A       _heap_top: .dw _heap
4534   2A06 00          _heap: .db 0
4535   2A07             ; --- END DATA BLOCK
4536   2A07             
4537   2A07             .end
tasm: Number of errors = 0
