0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $j 
0011   0408             ; $i 
0012   0408 FA FD FF      lea d, [bp + -3] ; $i
0013   040B DA            push d
0014   040C FA FF FF      lea d, [bp + -1] ; $j
0015   040F 2A            mov b, [d]
0016   0410             ; START TERMS
0017   0410 D7            push a
0018   0411 11            mov a, b
0019   0412 26 01 00      mov b, $1
0020   0415 56            add b, a
0021   0416 E4            pop a
0022   0417             ; END TERMS
0023   0417 E7            pop d
0024   0418 FD 43         mov [d], b
0025   041A 52 04 00      sub sp, 4
0026   041D 05 0B         syscall sys_terminate_proc
0027   041F             
0028   041F             strcpy:
0029   041F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0030   0422             ; $psrc 
0031   0422             ; $pdest 
0032   0422 52 04 00      sub sp, 4
0033   0425             ;; psrc = src; 
0034   0425 FA FF FF      lea d, [bp + -1] ; $psrc
0035   0428 DA            push d
0036   0429 FA 07 00      lea d, [bp + 7] ; $src
0037   042C 2A            mov b, [d]
0038   042D E7            pop d
0039   042E FD 43         mov [d], b
0040   0430             ;; pdest = dest; 
0041   0430 FA FD FF      lea d, [bp + -3] ; $pdest
0042   0433 DA            push d
0043   0434 FA 05 00      lea d, [bp + 5] ; $dest
0044   0437 2A            mov b, [d]
0045   0438 E7            pop d
0046   0439 FD 43         mov [d], b
0047   043B             ;; while(*psrc) *pdest++ = *psrc++; 
0048   043B             _while1_cond:
0049   043B FA FF FF      lea d, [bp + -1] ; $psrc
0050   043E 2A            mov b, [d]
0051   043F 74            mov d, b
0052   0440 32            mov bl, [d]
0053   0441 A7 00         mov bh, 0
0054   0443 C0 00 00      cmp b, 0
0055   0446 C6 6E 04      je _while1_exit
0056   0449             _while1_block:
0057   0449             ;; *pdest++ = *psrc++; 
0058   0449 FA FD FF      lea d, [bp + -3] ; $pdest
0059   044C 2A            mov b, [d]
0060   044D D8            push b
0061   044E FD 77         inc b
0062   0450 FA FD FF      lea d, [bp + -3] ; $pdest
0063   0453 FD 43         mov [d], b
0064   0455 E5            pop b
0065   0456 D8            push b
0066   0457 FA FF FF      lea d, [bp + -1] ; $psrc
0067   045A 2A            mov b, [d]
0068   045B D8            push b
0069   045C FD 77         inc b
0070   045E FA FF FF      lea d, [bp + -1] ; $psrc
0071   0461 FD 43         mov [d], b
0072   0463 E5            pop b
0073   0464 74            mov d, b
0074   0465 32            mov bl, [d]
0075   0466 A7 00         mov bh, 0
0076   0468 E7            pop d
0077   0469 FD 3E         mov [d], bl
0078   046B 0A 3B 04      jmp _while1_cond
0079   046E             _while1_exit:
0080   046E             ;; *pdest = '\0'; 
0081   046E FA FD FF      lea d, [bp + -3] ; $pdest
0082   0471 2A            mov b, [d]
0083   0472 D8            push b
0084   0473 26 00 00      mov b, $0
0085   0476 E7            pop d
0086   0477 FD 3E         mov [d], bl
0087   0479 F9            leave
0088   047A 09            ret
0089   047B             
0090   047B             strcmp:
0091   047B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0092   047E             ;; while (*s1 && (*s1 == *s2)) { 
0093   047E             _while2_cond:
0094   047E FA 05 00      lea d, [bp + 5] ; $s1
0095   0481 2A            mov b, [d]
0096   0482 74            mov d, b
0097   0483 32            mov bl, [d]
0098   0484 A7 00         mov bh, 0
0099   0486 D7            push a
0100   0487 11            mov a, b
0101   0488 FA 05 00      lea d, [bp + 5] ; $s1
0102   048B 2A            mov b, [d]
0103   048C 74            mov d, b
0104   048D 32            mov bl, [d]
0105   048E A7 00         mov bh, 0
0106   0490             ; START RELATIONAL
0107   0490 D7            push a
0108   0491 11            mov a, b
0109   0492 FA 07 00      lea d, [bp + 7] ; $s2
0110   0495 2A            mov b, [d]
0111   0496 74            mov d, b
0112   0497 32            mov bl, [d]
0113   0498 A7 00         mov bh, 0
0114   049A B0            cmp a, b
0115   049B FD 71         seq ; ==
0116   049D E4            pop a
0117   049E             ; END RELATIONAL
0118   049E FD A7         sand a, b
0119   04A0 E4            pop a
0120   04A1 C0 00 00      cmp b, 0
0121   04A4 C6 C4 04      je _while2_exit
0122   04A7             _while2_block:
0123   04A7             ;; s1++; 
0124   04A7 FA 05 00      lea d, [bp + 5] ; $s1
0125   04AA 2A            mov b, [d]
0126   04AB D8            push b
0127   04AC FD 77         inc b
0128   04AE FA 05 00      lea d, [bp + 5] ; $s1
0129   04B1 FD 43         mov [d], b
0130   04B3 E5            pop b
0131   04B4             ;; s2++; 
0132   04B4 FA 07 00      lea d, [bp + 7] ; $s2
0133   04B7 2A            mov b, [d]
0134   04B8 D8            push b
0135   04B9 FD 77         inc b
0136   04BB FA 07 00      lea d, [bp + 7] ; $s2
0137   04BE FD 43         mov [d], b
0138   04C0 E5            pop b
0139   04C1 0A 7E 04      jmp _while2_cond
0140   04C4             _while2_exit:
0141   04C4             ;; return *s1 - *s2; 
0142   04C4 FA 05 00      lea d, [bp + 5] ; $s1
0143   04C7 2A            mov b, [d]
0144   04C8 74            mov d, b
0145   04C9 32            mov bl, [d]
0146   04CA A7 00         mov bh, 0
0147   04CC             ; START TERMS
0148   04CC D7            push a
0149   04CD 11            mov a, b
0150   04CE FA 07 00      lea d, [bp + 7] ; $s2
0151   04D1 2A            mov b, [d]
0152   04D2 74            mov d, b
0153   04D3 32            mov bl, [d]
0154   04D4 A7 00         mov bh, 0
0155   04D6 60            sub a, b
0156   04D7 27            mov b, a
0157   04D8 E4            pop a
0158   04D9             ; END TERMS
0159   04D9 F9            leave
0160   04DA 09            ret
0161   04DB             
0162   04DB             strncmp:
0163   04DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0164   04DE F9            leave
0165   04DF 09            ret
0166   04E0             
0167   04E0             strcat:
0168   04E0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0169   04E3             ; $dest_len 
0170   04E3             ; $i 
0171   04E3 52 04 00      sub sp, 4
0172   04E6             ;; dest_len = strlen(dest); 
0173   04E6 FA FF FF      lea d, [bp + -1] ; $dest_len
0174   04E9 DA            push d
0175   04EA FA 05 00      lea d, [bp + 5] ; $dest
0176   04ED 2A            mov b, [d]
0177   04EE FD AB         swp b
0178   04F0 D8            push b
0179   04F1 07 93 05      call strlen
0180   04F4 51 02 00      add sp, 2
0181   04F7 E7            pop d
0182   04F8 FD 43         mov [d], b
0183   04FA             ;; for (i = 0; src[i] != 0; i=i+1) { 
0184   04FA             _for3_init:
0185   04FA FA FD FF      lea d, [bp + -3] ; $i
0186   04FD DA            push d
0187   04FE 26 00 00      mov b, $0
0188   0501 E7            pop d
0189   0502 FD 43         mov [d], b
0190   0504             _for3_cond:
0191   0504 FA 07 00      lea d, [bp + 7] ; $src
0192   0507 FD 2A         mov d, [d]
0193   0509 D7            push a
0194   050A DA            push d
0195   050B FA FD FF      lea d, [bp + -3] ; $i
0196   050E 2A            mov b, [d]
0197   050F E7            pop d
0198   0510 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0199   0514 E4            pop a
0200   0515 32            mov bl, [d]
0201   0516 A7 00         mov bh, 0
0202   0518             ; START RELATIONAL
0203   0518 D7            push a
0204   0519 11            mov a, b
0205   051A 26 00 00      mov b, $0
0206   051D B0            cmp a, b
0207   051E FD 72         sneq ; !=
0208   0520 E4            pop a
0209   0521             ; END RELATIONAL
0210   0521 C0 00 00      cmp b, 0
0211   0524 C6 6D 05      je _for3_exit
0212   0527             _for3_block:
0213   0527             ;; dest[dest_len + i] = src[i]; 
0214   0527 FA 05 00      lea d, [bp + 5] ; $dest
0215   052A FD 2A         mov d, [d]
0216   052C D7            push a
0217   052D DA            push d
0218   052E FA FF FF      lea d, [bp + -1] ; $dest_len
0219   0531 2A            mov b, [d]
0220   0532             ; START TERMS
0221   0532 D7            push a
0222   0533 11            mov a, b
0223   0534 FA FD FF      lea d, [bp + -3] ; $i
0224   0537 2A            mov b, [d]
0225   0538 56            add b, a
0226   0539 E4            pop a
0227   053A             ; END TERMS
0228   053A E7            pop d
0229   053B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0230   053F E4            pop a
0231   0540 DA            push d
0232   0541 FA 07 00      lea d, [bp + 7] ; $src
0233   0544 FD 2A         mov d, [d]
0234   0546 D7            push a
0235   0547 DA            push d
0236   0548 FA FD FF      lea d, [bp + -3] ; $i
0237   054B 2A            mov b, [d]
0238   054C E7            pop d
0239   054D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0240   0551 E4            pop a
0241   0552 32            mov bl, [d]
0242   0553 A7 00         mov bh, 0
0243   0555 E7            pop d
0244   0556 FD 3E         mov [d], bl
0245   0558             _for3_update:
0246   0558 FA FD FF      lea d, [bp + -3] ; $i
0247   055B DA            push d
0248   055C FA FD FF      lea d, [bp + -3] ; $i
0249   055F 2A            mov b, [d]
0250   0560             ; START TERMS
0251   0560 D7            push a
0252   0561 11            mov a, b
0253   0562 26 01 00      mov b, $1
0254   0565 56            add b, a
0255   0566 E4            pop a
0256   0567             ; END TERMS
0257   0567 E7            pop d
0258   0568 FD 43         mov [d], b
0259   056A 0A 04 05      jmp _for3_cond
0260   056D             _for3_exit:
0261   056D             ;; dest[dest_len + i] = 0; 
0262   056D FA 05 00      lea d, [bp + 5] ; $dest
0263   0570 FD 2A         mov d, [d]
0264   0572 D7            push a
0265   0573 DA            push d
0266   0574 FA FF FF      lea d, [bp + -1] ; $dest_len
0267   0577 2A            mov b, [d]
0268   0578             ; START TERMS
0269   0578 D7            push a
0270   0579 11            mov a, b
0271   057A FA FD FF      lea d, [bp + -3] ; $i
0272   057D 2A            mov b, [d]
0273   057E 56            add b, a
0274   057F E4            pop a
0275   0580             ; END TERMS
0276   0580 E7            pop d
0277   0581 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0278   0585 E4            pop a
0279   0586 DA            push d
0280   0587 26 00 00      mov b, $0
0281   058A E7            pop d
0282   058B FD 3E         mov [d], bl
0283   058D             ;; return dest; 
0284   058D FA 05 00      lea d, [bp + 5] ; $dest
0285   0590 2A            mov b, [d]
0286   0591 F9            leave
0287   0592 09            ret
0288   0593             
0289   0593             strlen:
0290   0593 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0291   0596             ; $length 
0292   0596 52 02 00      sub sp, 2
0293   0599             ;; length = 0; 
0294   0599 FA FF FF      lea d, [bp + -1] ; $length
0295   059C DA            push d
0296   059D 26 00 00      mov b, $0
0297   05A0 E7            pop d
0298   05A1 FD 43         mov [d], b
0299   05A3             ;; while (str[length] != 0) { 
0300   05A3             _while4_cond:
0301   05A3 FA 05 00      lea d, [bp + 5] ; $str
0302   05A6 FD 2A         mov d, [d]
0303   05A8 D7            push a
0304   05A9 DA            push d
0305   05AA FA FF FF      lea d, [bp + -1] ; $length
0306   05AD 2A            mov b, [d]
0307   05AE E7            pop d
0308   05AF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0309   05B3 E4            pop a
0310   05B4 32            mov bl, [d]
0311   05B5 A7 00         mov bh, 0
0312   05B7             ; START RELATIONAL
0313   05B7 D7            push a
0314   05B8 11            mov a, b
0315   05B9 26 00 00      mov b, $0
0316   05BC B0            cmp a, b
0317   05BD FD 72         sneq ; !=
0318   05BF E4            pop a
0319   05C0             ; END RELATIONAL
0320   05C0 C0 00 00      cmp b, 0
0321   05C3 C6 D6 05      je _while4_exit
0322   05C6             _while4_block:
0323   05C6             ;; length++; 
0324   05C6 FA FF FF      lea d, [bp + -1] ; $length
0325   05C9 2A            mov b, [d]
0326   05CA D8            push b
0327   05CB FD 77         inc b
0328   05CD FA FF FF      lea d, [bp + -1] ; $length
0329   05D0 FD 43         mov [d], b
0330   05D2 E5            pop b
0331   05D3 0A A3 05      jmp _while4_cond
0332   05D6             _while4_exit:
0333   05D6             ;; return length; 
0334   05D6 FA FF FF      lea d, [bp + -1] ; $length
0335   05D9 2A            mov b, [d]
0336   05DA F9            leave
0337   05DB 09            ret
0338   05DC             
0339   05DC             exit:
0340   05DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0341   05DF             
0342   05DF             ; --- BEGIN INLINE ASM BLOCK
0343   05DF 05 0B         syscall sys_terminate_proc
0344   05E1             ; --- END INLINE ASM BLOCK
0345   05E1             
0346   05E1 F9            leave
0347   05E2 09            ret
0348   05E3             
0349   05E3             memset:
0350   05E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0351   05E6             ; $i 
0352   05E6 52 02 00      sub sp, 2
0353   05E9             ;; for(i = 0; i < size; i++){ 
0354   05E9             _for5_init:
0355   05E9 FA FF FF      lea d, [bp + -1] ; $i
0356   05EC DA            push d
0357   05ED 26 00 00      mov b, $0
0358   05F0 E7            pop d
0359   05F1 FD 43         mov [d], b
0360   05F3             _for5_cond:
0361   05F3 FA FF FF      lea d, [bp + -1] ; $i
0362   05F6 2A            mov b, [d]
0363   05F7             ; START RELATIONAL
0364   05F7 D7            push a
0365   05F8 11            mov a, b
0366   05F9 FA 08 00      lea d, [bp + 8] ; $size
0367   05FC 2A            mov b, [d]
0368   05FD B0            cmp a, b
0369   05FE FD 73         slt ; < (signed)
0370   0600 E4            pop a
0371   0601             ; END RELATIONAL
0372   0601 C0 00 00      cmp b, 0
0373   0604 C6 2D 06      je _for5_exit
0374   0607             _for5_block:
0375   0607             ;; *(s+i) = c; 
0376   0607 FA 05 00      lea d, [bp + 5] ; $s
0377   060A 2A            mov b, [d]
0378   060B             ; START TERMS
0379   060B D7            push a
0380   060C 11            mov a, b
0381   060D FA FF FF      lea d, [bp + -1] ; $i
0382   0610 2A            mov b, [d]
0383   0611 56            add b, a
0384   0612 E4            pop a
0385   0613             ; END TERMS
0386   0613 D8            push b
0387   0614 FA 07 00      lea d, [bp + 7] ; $c
0388   0617 32            mov bl, [d]
0389   0618 A7 00         mov bh, 0
0390   061A E7            pop d
0391   061B FD 3E         mov [d], bl
0392   061D             _for5_update:
0393   061D FA FF FF      lea d, [bp + -1] ; $i
0394   0620 2A            mov b, [d]
0395   0621 D8            push b
0396   0622 FD 77         inc b
0397   0624 FA FF FF      lea d, [bp + -1] ; $i
0398   0627 FD 43         mov [d], b
0399   0629 E5            pop b
0400   062A 0A F3 05      jmp _for5_cond
0401   062D             _for5_exit:
0402   062D             ;; return s; 
0403   062D FA 05 00      lea d, [bp + 5] ; $s
0404   0630 2A            mov b, [d]
0405   0631 F9            leave
0406   0632 09            ret
0407   0633             
0408   0633             atoi:
0409   0633 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0410   0636             ; $result 
0411   0636 FA FF FF      lea d, [bp + -1] ; $result
0412   0639 DA            push d
0413   063A 26 00 00      mov b, $0
0414   063D E7            pop d
0415   063E FD 43         mov [d], b
0416   0640             ; $sign 
0417   0640 FA FD FF      lea d, [bp + -3] ; $sign
0418   0643 DA            push d
0419   0644 26 01 00      mov b, $1
0420   0647 E7            pop d
0421   0648 FD 43         mov [d], b
0422   064A 52 04 00      sub sp, 4
0423   064D             ;; while (*str == ' ') str++; 
0424   064D             _while6_cond:
0425   064D FA 05 00      lea d, [bp + 5] ; $str
0426   0650 2A            mov b, [d]
0427   0651 74            mov d, b
0428   0652 32            mov bl, [d]
0429   0653 A7 00         mov bh, 0
0430   0655             ; START RELATIONAL
0431   0655 D7            push a
0432   0656 11            mov a, b
0433   0657 26 20 00      mov b, $20
0434   065A B0            cmp a, b
0435   065B FD 71         seq ; ==
0436   065D E4            pop a
0437   065E             ; END RELATIONAL
0438   065E C0 00 00      cmp b, 0
0439   0661 C6 74 06      je _while6_exit
0440   0664             _while6_block:
0441   0664             ;; str++; 
0442   0664 FA 05 00      lea d, [bp + 5] ; $str
0443   0667 2A            mov b, [d]
0444   0668 D8            push b
0445   0669 FD 77         inc b
0446   066B FA 05 00      lea d, [bp + 5] ; $str
0447   066E FD 43         mov [d], b
0448   0670 E5            pop b
0449   0671 0A 4D 06      jmp _while6_cond
0450   0674             _while6_exit:
0451   0674             ;; if (*str == '-' || *str == '+') { 
0452   0674             _if7_cond:
0453   0674 FA 05 00      lea d, [bp + 5] ; $str
0454   0677 2A            mov b, [d]
0455   0678 74            mov d, b
0456   0679 32            mov bl, [d]
0457   067A A7 00         mov bh, 0
0458   067C             ; START RELATIONAL
0459   067C D7            push a
0460   067D 11            mov a, b
0461   067E 26 2D 00      mov b, $2d
0462   0681 B0            cmp a, b
0463   0682 FD 71         seq ; ==
0464   0684 E4            pop a
0465   0685             ; END RELATIONAL
0466   0685 D7            push a
0467   0686 11            mov a, b
0468   0687 FA 05 00      lea d, [bp + 5] ; $str
0469   068A 2A            mov b, [d]
0470   068B 74            mov d, b
0471   068C 32            mov bl, [d]
0472   068D A7 00         mov bh, 0
0473   068F             ; START RELATIONAL
0474   068F D7            push a
0475   0690 11            mov a, b
0476   0691 26 2B 00      mov b, $2b
0477   0694 B0            cmp a, b
0478   0695 FD 71         seq ; ==
0479   0697 E4            pop a
0480   0698             ; END RELATIONAL
0481   0698 FD A8         sor a, b ; ||
0482   069A E4            pop a
0483   069B C0 00 00      cmp b, 0
0484   069E C6 D5 06      je _if7_exit
0485   06A1             _if7_true:
0486   06A1             ;; if (*str == '-') sign = -1; 
0487   06A1             _if8_cond:
0488   06A1 FA 05 00      lea d, [bp + 5] ; $str
0489   06A4 2A            mov b, [d]
0490   06A5 74            mov d, b
0491   06A6 32            mov bl, [d]
0492   06A7 A7 00         mov bh, 0
0493   06A9             ; START RELATIONAL
0494   06A9 D7            push a
0495   06AA 11            mov a, b
0496   06AB 26 2D 00      mov b, $2d
0497   06AE B0            cmp a, b
0498   06AF FD 71         seq ; ==
0499   06B1 E4            pop a
0500   06B2             ; END RELATIONAL
0501   06B2 C0 00 00      cmp b, 0
0502   06B5 C6 C5 06      je _if8_exit
0503   06B8             _if8_true:
0504   06B8             ;; sign = -1; 
0505   06B8 FA FD FF      lea d, [bp + -3] ; $sign
0506   06BB DA            push d
0507   06BC 26 FF FF      mov b, $ffff
0508   06BF E7            pop d
0509   06C0 FD 43         mov [d], b
0510   06C2 0A C5 06      jmp _if8_exit
0511   06C5             _if8_exit:
0512   06C5             ;; str++; 
0513   06C5 FA 05 00      lea d, [bp + 5] ; $str
0514   06C8 2A            mov b, [d]
0515   06C9 D8            push b
0516   06CA FD 77         inc b
0517   06CC FA 05 00      lea d, [bp + 5] ; $str
0518   06CF FD 43         mov [d], b
0519   06D1 E5            pop b
0520   06D2 0A D5 06      jmp _if7_exit
0521   06D5             _if7_exit:
0522   06D5             ;; while (*str >= '0' && *str <= '9') { 
0523   06D5             _while9_cond:
0524   06D5 FA 05 00      lea d, [bp + 5] ; $str
0525   06D8 2A            mov b, [d]
0526   06D9 74            mov d, b
0527   06DA 32            mov bl, [d]
0528   06DB A7 00         mov bh, 0
0529   06DD             ; START RELATIONAL
0530   06DD D7            push a
0531   06DE 11            mov a, b
0532   06DF 26 30 00      mov b, $30
0533   06E2 B0            cmp a, b
0534   06E3 FD 82         sgeu ; >= (unsigned)
0535   06E5 E4            pop a
0536   06E6             ; END RELATIONAL
0537   06E6 D7            push a
0538   06E7 11            mov a, b
0539   06E8 FA 05 00      lea d, [bp + 5] ; $str
0540   06EB 2A            mov b, [d]
0541   06EC 74            mov d, b
0542   06ED 32            mov bl, [d]
0543   06EE A7 00         mov bh, 0
0544   06F0             ; START RELATIONAL
0545   06F0 D7            push a
0546   06F1 11            mov a, b
0547   06F2 26 39 00      mov b, $39
0548   06F5 B0            cmp a, b
0549   06F6 FD 75         slu ; <= (unsigned)
0550   06F8 E4            pop a
0551   06F9             ; END RELATIONAL
0552   06F9 FD A7         sand a, b
0553   06FB E4            pop a
0554   06FC C0 00 00      cmp b, 0
0555   06FF C6 3A 07      je _while9_exit
0556   0702             _while9_block:
0557   0702             ;; result = result * 10 + (*str - '0'); 
0558   0702 FA FF FF      lea d, [bp + -1] ; $result
0559   0705 DA            push d
0560   0706 FA FF FF      lea d, [bp + -1] ; $result
0561   0709 2A            mov b, [d]
0562   070A             ; START FACTORS
0563   070A D7            push a
0564   070B 11            mov a, b
0565   070C 26 0A 00      mov b, $a
0566   070F AC            mul a, b ; *
0567   0710 11            mov a, b
0568   0711 27            mov b, a
0569   0712 E4            pop a
0570   0713             ; END FACTORS
0571   0713             ; START TERMS
0572   0713 D7            push a
0573   0714 11            mov a, b
0574   0715 FA 05 00      lea d, [bp + 5] ; $str
0575   0718 2A            mov b, [d]
0576   0719 74            mov d, b
0577   071A 32            mov bl, [d]
0578   071B A7 00         mov bh, 0
0579   071D             ; START TERMS
0580   071D D7            push a
0581   071E 11            mov a, b
0582   071F 26 30 00      mov b, $30
0583   0722 60            sub a, b
0584   0723 27            mov b, a
0585   0724 E4            pop a
0586   0725             ; END TERMS
0587   0725 56            add b, a
0588   0726 E4            pop a
0589   0727             ; END TERMS
0590   0727 E7            pop d
0591   0728 FD 43         mov [d], b
0592   072A             ;; str++; 
0593   072A FA 05 00      lea d, [bp + 5] ; $str
0594   072D 2A            mov b, [d]
0595   072E D8            push b
0596   072F FD 77         inc b
0597   0731 FA 05 00      lea d, [bp + 5] ; $str
0598   0734 FD 43         mov [d], b
0599   0736 E5            pop b
0600   0737 0A D5 06      jmp _while9_cond
0601   073A             _while9_exit:
0602   073A             ;; return sign * result; 
0603   073A FA FD FF      lea d, [bp + -3] ; $sign
0604   073D 2A            mov b, [d]
0605   073E             ; START FACTORS
0606   073E D7            push a
0607   073F 11            mov a, b
0608   0740 FA FF FF      lea d, [bp + -1] ; $result
0609   0743 2A            mov b, [d]
0610   0744 AC            mul a, b ; *
0611   0745 11            mov a, b
0612   0746 27            mov b, a
0613   0747 E4            pop a
0614   0748             ; END FACTORS
0615   0748 F9            leave
0616   0749 09            ret
0617   074A             
0618   074A             rand:
0619   074A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0620   074D             ; $sec 
0621   074D 52 02 00      sub sp, 2
0622   0750             
0623   0750             ; --- BEGIN INLINE ASM BLOCK
0624   0750 19 00         mov al, 0
0625   0752 05 01         syscall sys_rtc					
0626   0754 1A            mov al, ah
0627   0755 FA FF FF      lea d, [bp + -1] ; $sec
0628   0758 1E            mov al, [d]
0629   0759 22 00         mov ah, 0
0630   075B             ; --- END INLINE ASM BLOCK
0631   075B             
0632   075B             ;; return sec; 
0633   075B FA FF FF      lea d, [bp + -1] ; $sec
0634   075E 2A            mov b, [d]
0635   075F F9            leave
0636   0760 09            ret
0637   0761             
0638   0761             alloc:
0639   0761 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0640   0764             ;; heap_top = heap_top + bytes; 
0641   0764 3B 6B 19      mov d, _heap_top ; $heap_top
0642   0767 DA            push d
0643   0768 3B 6B 19      mov d, _heap_top ; $heap_top
0644   076B 2A            mov b, [d]
0645   076C             ; START TERMS
0646   076C D7            push a
0647   076D 11            mov a, b
0648   076E FA 05 00      lea d, [bp + 5] ; $bytes
0649   0771 2A            mov b, [d]
0650   0772 56            add b, a
0651   0773 E4            pop a
0652   0774             ; END TERMS
0653   0774 E7            pop d
0654   0775 FD 43         mov [d], b
0655   0777             ;; return heap_top - bytes; 
0656   0777 3B 6B 19      mov d, _heap_top ; $heap_top
0657   077A 2A            mov b, [d]
0658   077B             ; START TERMS
0659   077B D7            push a
0660   077C 11            mov a, b
0661   077D FA 05 00      lea d, [bp + 5] ; $bytes
0662   0780 2A            mov b, [d]
0663   0781 60            sub a, b
0664   0782 27            mov b, a
0665   0783 E4            pop a
0666   0784             ; END TERMS
0667   0784 F9            leave
0668   0785 09            ret
0669   0786             
0670   0786             free:
0671   0786 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0672   0789             ;; return heap_top = heap_top - bytes; 
0673   0789 3B 6B 19      mov d, _heap_top ; $heap_top
0674   078C DA            push d
0675   078D 3B 6B 19      mov d, _heap_top ; $heap_top
0676   0790 2A            mov b, [d]
0677   0791             ; START TERMS
0678   0791 D7            push a
0679   0792 11            mov a, b
0680   0793 FA 05 00      lea d, [bp + 5] ; $bytes
0681   0796 2A            mov b, [d]
0682   0797 60            sub a, b
0683   0798 27            mov b, a
0684   0799 E4            pop a
0685   079A             ; END TERMS
0686   079A E7            pop d
0687   079B FD 43         mov [d], b
0688   079D F9            leave
0689   079E 09            ret
0690   079F             
0691   079F             fopen:
0692   079F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0693   07A2             ; $fp 
0694   07A2 52 02 00      sub sp, 2
0695   07A5             ;; fp = alloc(sizeof(struct _FILE)); 
0696   07A5 FA FF FF      lea d, [bp + -1] ; $fp
0697   07A8 DA            push d
out/test.asm line 0698: Unused data in MS byte of argument. (9d48)
0698   07A9 26 00 82      mov b, -1656192512
0699   07AC FD AB         swp b
0700   07AE D8            push b
0701   07AF 07 61 07      call alloc
0702   07B2 51 02 00      add sp, 2
0703   07B5 E7            pop d
0704   07B6 FD 43         mov [d], b
0705   07B8 F9            leave
0706   07B9 09            ret
0707   07BA             
0708   07BA             printf:
0709   07BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0710   07BD             ; $p 
0711   07BD             ; $format_p 
0712   07BD 52 04 00      sub sp, 4
0713   07C0             ;; format_p = format; 
0714   07C0 FA FD FF      lea d, [bp + -3] ; $format_p
0715   07C3 DA            push d
0716   07C4 FA 05 00      lea d, [bp + 5] ; $format
0717   07C7 2A            mov b, [d]
0718   07C8 E7            pop d
0719   07C9 FD 43         mov [d], b
0720   07CB             ;; p = &format + 2; 
0721   07CB FA FF FF      lea d, [bp + -1] ; $p
0722   07CE DA            push d
0723   07CF FA 05 00      lea d, [bp + 5] ; $format
0724   07D2 2D            mov b, d
0725   07D3             ; START TERMS
0726   07D3 D7            push a
0727   07D4 11            mov a, b
0728   07D5 26 02 00      mov b, $2
0729   07D8 56            add b, a
0730   07D9 E4            pop a
0731   07DA             ; END TERMS
0732   07DA E7            pop d
0733   07DB FD 43         mov [d], b
0734   07DD             ;; for(;;){ 
0735   07DD             _for10_init:
0736   07DD             _for10_cond:
0737   07DD             _for10_block:
0738   07DD             ;; if(!*format_p) break; 
0739   07DD             _if11_cond:
0740   07DD FA FD FF      lea d, [bp + -3] ; $format_p
0741   07E0 2A            mov b, [d]
0742   07E1 74            mov d, b
0743   07E2 32            mov bl, [d]
0744   07E3 A7 00         mov bh, 0
0745   07E5 C0 00 00      cmp b, 0
0746   07E8 FD 71         seq ; !
0747   07EA C0 00 00      cmp b, 0
0748   07ED C6 F6 07      je _if11_else
0749   07F0             _if11_true:
0750   07F0             ;; break; 
0751   07F0 0A 1D 0A      jmp _for10_exit ; for break
0752   07F3 0A 1A 0A      jmp _if11_exit
0753   07F6             _if11_else:
0754   07F6             ;; if(*format_p == '%'){ 
0755   07F6             _if12_cond:
0756   07F6 FA FD FF      lea d, [bp + -3] ; $format_p
0757   07F9 2A            mov b, [d]
0758   07FA 74            mov d, b
0759   07FB 32            mov bl, [d]
0760   07FC A7 00         mov bh, 0
0761   07FE             ; START RELATIONAL
0762   07FE D7            push a
0763   07FF 11            mov a, b
0764   0800 26 25 00      mov b, $25
0765   0803 B0            cmp a, b
0766   0804 FD 71         seq ; ==
0767   0806 E4            pop a
0768   0807             ; END RELATIONAL
0769   0807 C0 00 00      cmp b, 0
0770   080A C6 FE 09      je _if12_else
0771   080D             _if12_true:
0772   080D             ;; format_p++; 
0773   080D FA FD FF      lea d, [bp + -3] ; $format_p
0774   0810 2A            mov b, [d]
0775   0811 D8            push b
0776   0812 FD 77         inc b
0777   0814 FA FD FF      lea d, [bp + -3] ; $format_p
0778   0817 FD 43         mov [d], b
0779   0819 E5            pop b
0780   081A             ;; switch(*format_p){ 
0781   081A             _switch13_expr:
0782   081A FA FD FF      lea d, [bp + -3] ; $format_p
0783   081D 2A            mov b, [d]
0784   081E 74            mov d, b
0785   081F 32            mov bl, [d]
0786   0820 A7 00         mov bh, 0
0787   0822             _switch13_comparisons:
0788   0822 C1 6C         cmp bl, $6c
0789   0824 C6 50 08      je _switch13_case0
0790   0827 C1 4C         cmp bl, $4c
0791   0829 C6 50 08      je _switch13_case1
0792   082C C1 64         cmp bl, $64
0793   082E C6 3E 09      je _switch13_case2
0794   0831 C1 69         cmp bl, $69
0795   0833 C6 3E 09      je _switch13_case3
0796   0836 C1 75         cmp bl, $75
0797   0838 C6 62 09      je _switch13_case4
0798   083B C1 78         cmp bl, $78
0799   083D C6 86 09      je _switch13_case5
0800   0840 C1 63         cmp bl, $63
0801   0842 C6 A4 09      je _switch13_case6
0802   0845 C1 73         cmp bl, $73
0803   0847 C6 C3 09      je _switch13_case7
0804   084A 0A E2 09      jmp _switch13_default
0805   084D 0A EE 09      jmp _switch13_exit
0806   0850             _switch13_case0:
0807   0850             _switch13_case1:
0808   0850             ;; format_p++; 
0809   0850 FA FD FF      lea d, [bp + -3] ; $format_p
0810   0853 2A            mov b, [d]
0811   0854 D8            push b
0812   0855 FD 77         inc b
0813   0857 FA FD FF      lea d, [bp + -3] ; $format_p
0814   085A FD 43         mov [d], b
0815   085C E5            pop b
0816   085D             ;; if(*format_p == 'd' || *format_p == 'i') 
0817   085D             _if14_cond:
0818   085D FA FD FF      lea d, [bp + -3] ; $format_p
0819   0860 2A            mov b, [d]
0820   0861 74            mov d, b
0821   0862 32            mov bl, [d]
0822   0863 A7 00         mov bh, 0
0823   0865             ; START RELATIONAL
0824   0865 D7            push a
0825   0866 11            mov a, b
0826   0867 26 64 00      mov b, $64
0827   086A B0            cmp a, b
0828   086B FD 71         seq ; ==
0829   086D E4            pop a
0830   086E             ; END RELATIONAL
0831   086E D7            push a
0832   086F 11            mov a, b
0833   0870 FA FD FF      lea d, [bp + -3] ; $format_p
0834   0873 2A            mov b, [d]
0835   0874 74            mov d, b
0836   0875 32            mov bl, [d]
0837   0876 A7 00         mov bh, 0
0838   0878             ; START RELATIONAL
0839   0878 D7            push a
0840   0879 11            mov a, b
0841   087A 26 69 00      mov b, $69
0842   087D B0            cmp a, b
0843   087E FD 71         seq ; ==
0844   0880 E4            pop a
0845   0881             ; END RELATIONAL
0846   0881 FD A8         sor a, b ; ||
0847   0883 E4            pop a
0848   0884 C0 00 00      cmp b, 0
0849   0887 C6 AC 08      je _if14_else
0850   088A             _if14_true:
0851   088A             ;; print_signed_long(*(long *)p); 
0852   088A FA FF FF      lea d, [bp + -1] ; $p
0853   088D 2A            mov b, [d]
0854   088E AB            snex b
0855   088F FD 39         mov c, b
0856   0891 74            mov d, b
0857   0892 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0858   0895 FD 39         mov c, b ; And place it into C
0859   0897 2A            mov b, [d] ; Lower Word in B
0860   0898 FD 79         mov g, b
0861   089A 28            mov b, c
0862   089B FD AB         swp b
0863   089D D8            push b
0864   089E FD 27         mov b, g
0865   08A0 FD AB         swp b
0866   08A2 D8            push b
0867   08A3 07 EB 0E      call print_signed_long
0868   08A6 51 04 00      add sp, 4
0869   08A9 0A 29 09      jmp _if14_exit
0870   08AC             _if14_else:
0871   08AC             ;; if(*format_p == 'u') 
0872   08AC             _if15_cond:
0873   08AC FA FD FF      lea d, [bp + -3] ; $format_p
0874   08AF 2A            mov b, [d]
0875   08B0 74            mov d, b
0876   08B1 32            mov bl, [d]
0877   08B2 A7 00         mov bh, 0
0878   08B4             ; START RELATIONAL
0879   08B4 D7            push a
0880   08B5 11            mov a, b
0881   08B6 26 75 00      mov b, $75
0882   08B9 B0            cmp a, b
0883   08BA FD 71         seq ; ==
0884   08BC E4            pop a
0885   08BD             ; END RELATIONAL
0886   08BD C0 00 00      cmp b, 0
0887   08C0 C6 E7 08      je _if15_else
0888   08C3             _if15_true:
0889   08C3             ;; print_unsigned_long(*(unsigned long *)p); 
0890   08C3 FA FF FF      lea d, [bp + -1] ; $p
0891   08C6 2A            mov b, [d]
0892   08C7 A7 00         mov bh, 0
0893   08C9 38 00 00      mov c, 0
0894   08CC 74            mov d, b
0895   08CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0896   08D0 FD 39         mov c, b ; And place it into C
0897   08D2 2A            mov b, [d] ; Lower Word in B
0898   08D3 FD 79         mov g, b
0899   08D5 28            mov b, c
0900   08D6 FD AB         swp b
0901   08D8 D8            push b
0902   08D9 FD 27         mov b, g
0903   08DB FD AB         swp b
0904   08DD D8            push b
0905   08DE 07 28 12      call print_unsigned_long
0906   08E1 51 04 00      add sp, 4
0907   08E4 0A 29 09      jmp _if15_exit
0908   08E7             _if15_else:
0909   08E7             ;; if(*format_p == 'x') 
0910   08E7             _if16_cond:
0911   08E7 FA FD FF      lea d, [bp + -3] ; $format_p
0912   08EA 2A            mov b, [d]
0913   08EB 74            mov d, b
0914   08EC 32            mov bl, [d]
0915   08ED A7 00         mov bh, 0
0916   08EF             ; START RELATIONAL
0917   08EF D7            push a
0918   08F0 11            mov a, b
0919   08F1 26 78 00      mov b, $78
0920   08F4 B0            cmp a, b
0921   08F5 FD 71         seq ; ==
0922   08F7 E4            pop a
0923   08F8             ; END RELATIONAL
0924   08F8 C0 00 00      cmp b, 0
0925   08FB C6 1D 09      je _if16_else
0926   08FE             _if16_true:
0927   08FE             ;; printx32(*(long int *)p); 
0928   08FE FA FF FF      lea d, [bp + -1] ; $p
0929   0901 2A            mov b, [d]
0930   0902 74            mov d, b
0931   0903 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0932   0906 FD 39         mov c, b ; And place it into C
0933   0908 2A            mov b, [d] ; Lower Word in B
0934   0909 FD 79         mov g, b
0935   090B 28            mov b, c
0936   090C FD AB         swp b
0937   090E D8            push b
0938   090F FD 27         mov b, g
0939   0911 FD AB         swp b
0940   0913 D8            push b
0941   0914 07 6C 0C      call printx32
0942   0917 51 04 00      add sp, 4
0943   091A 0A 29 09      jmp _if16_exit
0944   091D             _if16_else:
0945   091D             ;; err("Unexpected format in printf."); 
0946   091D 26 27 19      mov b, _s0 ; "Unexpected format in printf."
0947   0920 FD AB         swp b
0948   0922 D8            push b
0949   0923 07 5A 0C      call err
0950   0926 51 02 00      add sp, 2
0951   0929             _if16_exit:
0952   0929             _if15_exit:
0953   0929             _if14_exit:
0954   0929             ;; p = p + 4; 
0955   0929 FA FF FF      lea d, [bp + -1] ; $p
0956   092C DA            push d
0957   092D FA FF FF      lea d, [bp + -1] ; $p
0958   0930 2A            mov b, [d]
0959   0931             ; START TERMS
0960   0931 D7            push a
0961   0932 11            mov a, b
0962   0933 26 04 00      mov b, $4
0963   0936 56            add b, a
0964   0937 E4            pop a
0965   0938             ; END TERMS
0966   0938 E7            pop d
0967   0939 FD 43         mov [d], b
0968   093B             ;; break; 
0969   093B 0A EE 09      jmp _switch13_exit ; case break
0970   093E             _switch13_case2:
0971   093E             _switch13_case3:
0972   093E             ;; print_signed(*(int*)p); 
0973   093E FA FF FF      lea d, [bp + -1] ; $p
0974   0941 2A            mov b, [d]
0975   0942 74            mov d, b
0976   0943 2A            mov b, [d]
0977   0944 FD AB         swp b
0978   0946 D8            push b
0979   0947 07 F7 0D      call print_signed
0980   094A 51 02 00      add sp, 2
0981   094D             ;; p = p + 2; 
0982   094D FA FF FF      lea d, [bp + -1] ; $p
0983   0950 DA            push d
0984   0951 FA FF FF      lea d, [bp + -1] ; $p
0985   0954 2A            mov b, [d]
0986   0955             ; START TERMS
0987   0955 D7            push a
0988   0956 11            mov a, b
0989   0957 26 02 00      mov b, $2
0990   095A 56            add b, a
0991   095B E4            pop a
0992   095C             ; END TERMS
0993   095C E7            pop d
0994   095D FD 43         mov [d], b
0995   095F             ;; break; 
0996   095F 0A EE 09      jmp _switch13_exit ; case break
0997   0962             _switch13_case4:
0998   0962             ;; print_unsigned(*(unsigned int*)p); 
0999   0962 FA FF FF      lea d, [bp + -1] ; $p
1000   0965 2A            mov b, [d]
1001   0966 74            mov d, b
1002   0967 2A            mov b, [d]
1003   0968 FD AB         swp b
1004   096A D8            push b
1005   096B 07 20 14      call print_unsigned
1006   096E 51 02 00      add sp, 2
1007   0971             ;; p = p + 2; 
1008   0971 FA FF FF      lea d, [bp + -1] ; $p
1009   0974 DA            push d
1010   0975 FA FF FF      lea d, [bp + -1] ; $p
1011   0978 2A            mov b, [d]
1012   0979             ; START TERMS
1013   0979 D7            push a
1014   097A 11            mov a, b
1015   097B 26 02 00      mov b, $2
1016   097E 56            add b, a
1017   097F E4            pop a
1018   0980             ; END TERMS
1019   0980 E7            pop d
1020   0981 FD 43         mov [d], b
1021   0983             ;; break; 
1022   0983 0A EE 09      jmp _switch13_exit ; case break
1023   0986             _switch13_case5:
1024   0986             
1025   0986             ; --- BEGIN INLINE ASM BLOCK
1026   0986 FA FF FF      lea d, [bp + -1] ; $p
1027   0989 FD 2A         mov d, [d]
1028   098B 2A            mov b, [d]
1029   098C 07 23 18      call print_u16x
1030   098F             ; --- END INLINE ASM BLOCK
1031   098F             
1032   098F             ;; p = p + 2; 
1033   098F FA FF FF      lea d, [bp + -1] ; $p
1034   0992 DA            push d
1035   0993 FA FF FF      lea d, [bp + -1] ; $p
1036   0996 2A            mov b, [d]
1037   0997             ; START TERMS
1038   0997 D7            push a
1039   0998 11            mov a, b
1040   0999 26 02 00      mov b, $2
1041   099C 56            add b, a
1042   099D E4            pop a
1043   099E             ; END TERMS
1044   099E E7            pop d
1045   099F FD 43         mov [d], b
1046   09A1             ;; break; 
1047   09A1 0A EE 09      jmp _switch13_exit ; case break
1048   09A4             _switch13_case6:
1049   09A4             
1050   09A4             ; --- BEGIN INLINE ASM BLOCK
1051   09A4 FA FF FF      lea d, [bp + -1] ; $p
1052   09A7 FD 2A         mov d, [d]
1053   09A9 1E            mov al, [d]
1054   09AA 23            mov ah, al
1055   09AB 07 81 16      call _putchar
1056   09AE             ; --- END INLINE ASM BLOCK
1057   09AE             
1058   09AE             ;; p = p + 2; 
1059   09AE FA FF FF      lea d, [bp + -1] ; $p
1060   09B1 DA            push d
1061   09B2 FA FF FF      lea d, [bp + -1] ; $p
1062   09B5 2A            mov b, [d]
1063   09B6             ; START TERMS
1064   09B6 D7            push a
1065   09B7 11            mov a, b
1066   09B8 26 02 00      mov b, $2
1067   09BB 56            add b, a
1068   09BC E4            pop a
1069   09BD             ; END TERMS
1070   09BD E7            pop d
1071   09BE FD 43         mov [d], b
1072   09C0             ;; break; 
1073   09C0 0A EE 09      jmp _switch13_exit ; case break
1074   09C3             _switch13_case7:
1075   09C3             
1076   09C3             ; --- BEGIN INLINE ASM BLOCK
1077   09C3 FA FF FF      lea d, [bp + -1] ; $p
1078   09C6 FD 2A         mov d, [d]
1079   09C8 FD 2A         mov d, [d]
1080   09CA 07 CB 17      call _puts
1081   09CD             ; --- END INLINE ASM BLOCK
1082   09CD             
1083   09CD             ;; p = p + 2; 
1084   09CD FA FF FF      lea d, [bp + -1] ; $p
1085   09D0 DA            push d
1086   09D1 FA FF FF      lea d, [bp + -1] ; $p
1087   09D4 2A            mov b, [d]
1088   09D5             ; START TERMS
1089   09D5 D7            push a
1090   09D6 11            mov a, b
1091   09D7 26 02 00      mov b, $2
1092   09DA 56            add b, a
1093   09DB E4            pop a
1094   09DC             ; END TERMS
1095   09DC E7            pop d
1096   09DD FD 43         mov [d], b
1097   09DF             ;; break; 
1098   09DF 0A EE 09      jmp _switch13_exit ; case break
1099   09E2             _switch13_default:
1100   09E2             ;; print("Error: Unknown argument type.\n"); 
1101   09E2 26 44 19      mov b, _s1 ; "Error: Unknown argument type.\n"
1102   09E5 FD AB         swp b
1103   09E7 D8            push b
1104   09E8 07 38 15      call print
1105   09EB 51 02 00      add sp, 2
1106   09EE             _switch13_exit:
1107   09EE             ;; format_p++; 
1108   09EE FA FD FF      lea d, [bp + -3] ; $format_p
1109   09F1 2A            mov b, [d]
1110   09F2 D8            push b
1111   09F3 FD 77         inc b
1112   09F5 FA FD FF      lea d, [bp + -3] ; $format_p
1113   09F8 FD 43         mov [d], b
1114   09FA E5            pop b
1115   09FB 0A 1A 0A      jmp _if12_exit
1116   09FE             _if12_else:
1117   09FE             ;; putchar(*format_p); 
1118   09FE FA FD FF      lea d, [bp + -3] ; $format_p
1119   0A01 2A            mov b, [d]
1120   0A02 74            mov d, b
1121   0A03 32            mov bl, [d]
1122   0A04 A7 00         mov bh, 0
1123   0A06 DD            push bl
1124   0A07 07 F0 14      call putchar
1125   0A0A 51 01 00      add sp, 1
1126   0A0D             ;; format_p++; 
1127   0A0D FA FD FF      lea d, [bp + -3] ; $format_p
1128   0A10 2A            mov b, [d]
1129   0A11 D8            push b
1130   0A12 FD 77         inc b
1131   0A14 FA FD FF      lea d, [bp + -3] ; $format_p
1132   0A17 FD 43         mov [d], b
1133   0A19 E5            pop b
1134   0A1A             _if12_exit:
1135   0A1A             _if11_exit:
1136   0A1A             _for10_update:
1137   0A1A 0A DD 07      jmp _for10_cond
1138   0A1D             _for10_exit:
1139   0A1D F9            leave
1140   0A1E 09            ret
1141   0A1F             
1142   0A1F             scanf:
1143   0A1F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1144   0A22             ; $p 
1145   0A22             ; $format_p 
1146   0A22             ; $c 
1147   0A22             ; $i 
1148   0A22             ; $input_string 
1149   0A22 52 07 02      sub sp, 519
1150   0A25             ;; format_p = format; 
1151   0A25 FA FD FF      lea d, [bp + -3] ; $format_p
1152   0A28 DA            push d
1153   0A29 FA 05 00      lea d, [bp + 5] ; $format
1154   0A2C 2A            mov b, [d]
1155   0A2D E7            pop d
1156   0A2E FD 43         mov [d], b
1157   0A30             ;; p = &format + 2; 
1158   0A30 FA FF FF      lea d, [bp + -1] ; $p
1159   0A33 DA            push d
1160   0A34 FA 05 00      lea d, [bp + 5] ; $format
1161   0A37 2D            mov b, d
1162   0A38             ; START TERMS
1163   0A38 D7            push a
1164   0A39 11            mov a, b
1165   0A3A 26 02 00      mov b, $2
1166   0A3D 56            add b, a
1167   0A3E E4            pop a
1168   0A3F             ; END TERMS
1169   0A3F E7            pop d
1170   0A40 FD 43         mov [d], b
1171   0A42             ;; for(;;){ 
1172   0A42             _for17_init:
1173   0A42             _for17_cond:
1174   0A42             _for17_block:
1175   0A42             ;; if(!*format_p) break; 
1176   0A42             _if18_cond:
1177   0A42 FA FD FF      lea d, [bp + -3] ; $format_p
1178   0A45 2A            mov b, [d]
1179   0A46 74            mov d, b
1180   0A47 32            mov bl, [d]
1181   0A48 A7 00         mov bh, 0
1182   0A4A C0 00 00      cmp b, 0
1183   0A4D FD 71         seq ; !
1184   0A4F C0 00 00      cmp b, 0
1185   0A52 C6 5B 0A      je _if18_else
1186   0A55             _if18_true:
1187   0A55             ;; break; 
1188   0A55 0A 58 0C      jmp _for17_exit ; for break
1189   0A58 0A 55 0C      jmp _if18_exit
1190   0A5B             _if18_else:
1191   0A5B             ;; if(*format_p == '%'){ 
1192   0A5B             _if19_cond:
1193   0A5B FA FD FF      lea d, [bp + -3] ; $format_p
1194   0A5E 2A            mov b, [d]
1195   0A5F 74            mov d, b
1196   0A60 32            mov bl, [d]
1197   0A61 A7 00         mov bh, 0
1198   0A63             ; START RELATIONAL
1199   0A63 D7            push a
1200   0A64 11            mov a, b
1201   0A65 26 25 00      mov b, $25
1202   0A68 B0            cmp a, b
1203   0A69 FD 71         seq ; ==
1204   0A6B E4            pop a
1205   0A6C             ; END RELATIONAL
1206   0A6C C0 00 00      cmp b, 0
1207   0A6F C6 39 0C      je _if19_else
1208   0A72             _if19_true:
1209   0A72             ;; format_p++; 
1210   0A72 FA FD FF      lea d, [bp + -3] ; $format_p
1211   0A75 2A            mov b, [d]
1212   0A76 D8            push b
1213   0A77 FD 77         inc b
1214   0A79 FA FD FF      lea d, [bp + -3] ; $format_p
1215   0A7C FD 43         mov [d], b
1216   0A7E E5            pop b
1217   0A7F             ;; switch(*format_p){ 
1218   0A7F             _switch20_expr:
1219   0A7F FA FD FF      lea d, [bp + -3] ; $format_p
1220   0A82 2A            mov b, [d]
1221   0A83 74            mov d, b
1222   0A84 32            mov bl, [d]
1223   0A85 A7 00         mov bh, 0
1224   0A87             _switch20_comparisons:
1225   0A87 C1 6C         cmp bl, $6c
1226   0A89 C6 B5 0A      je _switch20_case0
1227   0A8C C1 4C         cmp bl, $4c
1228   0A8E C6 B5 0A      je _switch20_case1
1229   0A91 C1 64         cmp bl, $64
1230   0A93 C6 47 0B      je _switch20_case2
1231   0A96 C1 69         cmp bl, $69
1232   0A98 C6 47 0B      je _switch20_case3
1233   0A9B C1 75         cmp bl, $75
1234   0A9D C6 74 0B      je _switch20_case4
1235   0AA0 C1 78         cmp bl, $78
1236   0AA2 C6 A1 0B      je _switch20_case5
1237   0AA5 C1 63         cmp bl, $63
1238   0AA7 C6 B6 0B      je _switch20_case6
1239   0AAA C1 73         cmp bl, $73
1240   0AAC C6 E5 0B      je _switch20_case7
1241   0AAF 0A 1D 0C      jmp _switch20_default
1242   0AB2 0A 29 0C      jmp _switch20_exit
1243   0AB5             _switch20_case0:
1244   0AB5             _switch20_case1:
1245   0AB5             ;; format_p++; 
1246   0AB5 FA FD FF      lea d, [bp + -3] ; $format_p
1247   0AB8 2A            mov b, [d]
1248   0AB9 D8            push b
1249   0ABA FD 77         inc b
1250   0ABC FA FD FF      lea d, [bp + -3] ; $format_p
1251   0ABF FD 43         mov [d], b
1252   0AC1 E5            pop b
1253   0AC2             ;; if(*format_p == 'd' || *format_p == 'i'); 
1254   0AC2             _if21_cond:
1255   0AC2 FA FD FF      lea d, [bp + -3] ; $format_p
1256   0AC5 2A            mov b, [d]
1257   0AC6 74            mov d, b
1258   0AC7 32            mov bl, [d]
1259   0AC8 A7 00         mov bh, 0
1260   0ACA             ; START RELATIONAL
1261   0ACA D7            push a
1262   0ACB 11            mov a, b
1263   0ACC 26 64 00      mov b, $64
1264   0ACF B0            cmp a, b
1265   0AD0 FD 71         seq ; ==
1266   0AD2 E4            pop a
1267   0AD3             ; END RELATIONAL
1268   0AD3 D7            push a
1269   0AD4 11            mov a, b
1270   0AD5 FA FD FF      lea d, [bp + -3] ; $format_p
1271   0AD8 2A            mov b, [d]
1272   0AD9 74            mov d, b
1273   0ADA 32            mov bl, [d]
1274   0ADB A7 00         mov bh, 0
1275   0ADD             ; START RELATIONAL
1276   0ADD D7            push a
1277   0ADE 11            mov a, b
1278   0ADF 26 69 00      mov b, $69
1279   0AE2 B0            cmp a, b
1280   0AE3 FD 71         seq ; ==
1281   0AE5 E4            pop a
1282   0AE6             ; END RELATIONAL
1283   0AE6 FD A8         sor a, b ; ||
1284   0AE8 E4            pop a
1285   0AE9 C0 00 00      cmp b, 0
1286   0AEC C6 F2 0A      je _if21_else
1287   0AEF             _if21_true:
1288   0AEF             ;; ; 
1289   0AEF 0A 32 0B      jmp _if21_exit
1290   0AF2             _if21_else:
1291   0AF2             ;; if(*format_p == 'u'); 
1292   0AF2             _if22_cond:
1293   0AF2 FA FD FF      lea d, [bp + -3] ; $format_p
1294   0AF5 2A            mov b, [d]
1295   0AF6 74            mov d, b
1296   0AF7 32            mov bl, [d]
1297   0AF8 A7 00         mov bh, 0
1298   0AFA             ; START RELATIONAL
1299   0AFA D7            push a
1300   0AFB 11            mov a, b
1301   0AFC 26 75 00      mov b, $75
1302   0AFF B0            cmp a, b
1303   0B00 FD 71         seq ; ==
1304   0B02 E4            pop a
1305   0B03             ; END RELATIONAL
1306   0B03 C0 00 00      cmp b, 0
1307   0B06 C6 0C 0B      je _if22_else
1308   0B09             _if22_true:
1309   0B09             ;; ; 
1310   0B09 0A 32 0B      jmp _if22_exit
1311   0B0C             _if22_else:
1312   0B0C             ;; if(*format_p == 'x'); 
1313   0B0C             _if23_cond:
1314   0B0C FA FD FF      lea d, [bp + -3] ; $format_p
1315   0B0F 2A            mov b, [d]
1316   0B10 74            mov d, b
1317   0B11 32            mov bl, [d]
1318   0B12 A7 00         mov bh, 0
1319   0B14             ; START RELATIONAL
1320   0B14 D7            push a
1321   0B15 11            mov a, b
1322   0B16 26 78 00      mov b, $78
1323   0B19 B0            cmp a, b
1324   0B1A FD 71         seq ; ==
1325   0B1C E4            pop a
1326   0B1D             ; END RELATIONAL
1327   0B1D C0 00 00      cmp b, 0
1328   0B20 C6 26 0B      je _if23_else
1329   0B23             _if23_true:
1330   0B23             ;; ; 
1331   0B23 0A 32 0B      jmp _if23_exit
1332   0B26             _if23_else:
1333   0B26             ;; err("Unexpected format in printf."); 
1334   0B26 26 27 19      mov b, _s0 ; "Unexpected format in printf."
1335   0B29 FD AB         swp b
1336   0B2B D8            push b
1337   0B2C 07 5A 0C      call err
1338   0B2F 51 02 00      add sp, 2
1339   0B32             _if23_exit:
1340   0B32             _if22_exit:
1341   0B32             _if21_exit:
1342   0B32             ;; p = p + 4; 
1343   0B32 FA FF FF      lea d, [bp + -1] ; $p
1344   0B35 DA            push d
1345   0B36 FA FF FF      lea d, [bp + -1] ; $p
1346   0B39 2A            mov b, [d]
1347   0B3A             ; START TERMS
1348   0B3A D7            push a
1349   0B3B 11            mov a, b
1350   0B3C 26 04 00      mov b, $4
1351   0B3F 56            add b, a
1352   0B40 E4            pop a
1353   0B41             ; END TERMS
1354   0B41 E7            pop d
1355   0B42 FD 43         mov [d], b
1356   0B44             ;; break; 
1357   0B44 0A 29 0C      jmp _switch20_exit ; case break
1358   0B47             _switch20_case2:
1359   0B47             _switch20_case3:
1360   0B47             ;; i = scann(); 
1361   0B47 FA FA FF      lea d, [bp + -6] ; $i
1362   0B4A DA            push d
1363   0B4B 07 13 15      call scann
1364   0B4E E7            pop d
1365   0B4F FD 43         mov [d], b
1366   0B51             ;; **(int **)p = i; 
1367   0B51 FA FF FF      lea d, [bp + -1] ; $p
1368   0B54 2A            mov b, [d]
1369   0B55 74            mov d, b
1370   0B56 2A            mov b, [d]
1371   0B57 D8            push b
1372   0B58 FA FA FF      lea d, [bp + -6] ; $i
1373   0B5B 2A            mov b, [d]
1374   0B5C E7            pop d
1375   0B5D FD 43         mov [d], b
1376   0B5F             ;; p = p + 2; 
1377   0B5F FA FF FF      lea d, [bp + -1] ; $p
1378   0B62 DA            push d
1379   0B63 FA FF FF      lea d, [bp + -1] ; $p
1380   0B66 2A            mov b, [d]
1381   0B67             ; START TERMS
1382   0B67 D7            push a
1383   0B68 11            mov a, b
1384   0B69 26 02 00      mov b, $2
1385   0B6C 56            add b, a
1386   0B6D E4            pop a
1387   0B6E             ; END TERMS
1388   0B6E E7            pop d
1389   0B6F FD 43         mov [d], b
1390   0B71             ;; break; 
1391   0B71 0A 29 0C      jmp _switch20_exit ; case break
1392   0B74             _switch20_case4:
1393   0B74             ;; i = scann(); 
1394   0B74 FA FA FF      lea d, [bp + -6] ; $i
1395   0B77 DA            push d
1396   0B78 07 13 15      call scann
1397   0B7B E7            pop d
1398   0B7C FD 43         mov [d], b
1399   0B7E             ;; **(int **)p = i; 
1400   0B7E FA FF FF      lea d, [bp + -1] ; $p
1401   0B81 2A            mov b, [d]
1402   0B82 74            mov d, b
1403   0B83 2A            mov b, [d]
1404   0B84 D8            push b
1405   0B85 FA FA FF      lea d, [bp + -6] ; $i
1406   0B88 2A            mov b, [d]
1407   0B89 E7            pop d
1408   0B8A FD 43         mov [d], b
1409   0B8C             ;; p = p + 2; 
1410   0B8C FA FF FF      lea d, [bp + -1] ; $p
1411   0B8F DA            push d
1412   0B90 FA FF FF      lea d, [bp + -1] ; $p
1413   0B93 2A            mov b, [d]
1414   0B94             ; START TERMS
1415   0B94 D7            push a
1416   0B95 11            mov a, b
1417   0B96 26 02 00      mov b, $2
1418   0B99 56            add b, a
1419   0B9A E4            pop a
1420   0B9B             ; END TERMS
1421   0B9B E7            pop d
1422   0B9C FD 43         mov [d], b
1423   0B9E             ;; break; 
1424   0B9E 0A 29 0C      jmp _switch20_exit ; case break
1425   0BA1             _switch20_case5:
1426   0BA1             ;; p = p + 2; 
1427   0BA1 FA FF FF      lea d, [bp + -1] ; $p
1428   0BA4 DA            push d
1429   0BA5 FA FF FF      lea d, [bp + -1] ; $p
1430   0BA8 2A            mov b, [d]
1431   0BA9             ; START TERMS
1432   0BA9 D7            push a
1433   0BAA 11            mov a, b
1434   0BAB 26 02 00      mov b, $2
1435   0BAE 56            add b, a
1436   0BAF E4            pop a
1437   0BB0             ; END TERMS
1438   0BB0 E7            pop d
1439   0BB1 FD 43         mov [d], b
1440   0BB3             ;; break; 
1441   0BB3 0A 29 0C      jmp _switch20_exit ; case break
1442   0BB6             _switch20_case6:
1443   0BB6             ;; c = getchar(); 
1444   0BB6 FA FC FF      lea d, [bp + -4] ; $c
1445   0BB9 DA            push d
1446   0BBA 07 FD 14      call getchar
1447   0BBD E7            pop d
1448   0BBE FD 3E         mov [d], bl
1449   0BC0             ;; **(char **)p = c; 
1450   0BC0 FA FF FF      lea d, [bp + -1] ; $p
1451   0BC3 2A            mov b, [d]
1452   0BC4 74            mov d, b
1453   0BC5 2A            mov b, [d]
1454   0BC6 D8            push b
1455   0BC7 FA FC FF      lea d, [bp + -4] ; $c
1456   0BCA 32            mov bl, [d]
1457   0BCB A7 00         mov bh, 0
1458   0BCD E7            pop d
1459   0BCE FD 43         mov [d], b
1460   0BD0             ;; p = p + 2; 
1461   0BD0 FA FF FF      lea d, [bp + -1] ; $p
1462   0BD3 DA            push d
1463   0BD4 FA FF FF      lea d, [bp + -1] ; $p
1464   0BD7 2A            mov b, [d]
1465   0BD8             ; START TERMS
1466   0BD8 D7            push a
1467   0BD9 11            mov a, b
1468   0BDA 26 02 00      mov b, $2
1469   0BDD 56            add b, a
1470   0BDE E4            pop a
1471   0BDF             ; END TERMS
1472   0BDF E7            pop d
1473   0BE0 FD 43         mov [d], b
1474   0BE2             ;; break; 
1475   0BE2 0A 29 0C      jmp _switch20_exit ; case break
1476   0BE5             _switch20_case7:
1477   0BE5             ;; gets(input_string); 
1478   0BE5 FA FA FD      lea d, [bp + -518] ; $input_string
1479   0BE8 2D            mov b, d
1480   0BE9 FD AB         swp b
1481   0BEB D8            push b
1482   0BEC 07 DD 0D      call gets
1483   0BEF 51 02 00      add sp, 2
1484   0BF2             ;; strcpy(*(char **)p, input_string); 
1485   0BF2 FA FA FD      lea d, [bp + -518] ; $input_string
1486   0BF5 2D            mov b, d
1487   0BF6 FD AB         swp b
1488   0BF8 D8            push b
1489   0BF9 FA FF FF      lea d, [bp + -1] ; $p
1490   0BFC 2A            mov b, [d]
1491   0BFD 74            mov d, b
1492   0BFE 2A            mov b, [d]
1493   0BFF FD AB         swp b
1494   0C01 D8            push b
1495   0C02 07 1F 04      call strcpy
1496   0C05 51 04 00      add sp, 4
1497   0C08             ;; p = p + 2; 
1498   0C08 FA FF FF      lea d, [bp + -1] ; $p
1499   0C0B DA            push d
1500   0C0C FA FF FF      lea d, [bp + -1] ; $p
1501   0C0F 2A            mov b, [d]
1502   0C10             ; START TERMS
1503   0C10 D7            push a
1504   0C11 11            mov a, b
1505   0C12 26 02 00      mov b, $2
1506   0C15 56            add b, a
1507   0C16 E4            pop a
1508   0C17             ; END TERMS
1509   0C17 E7            pop d
1510   0C18 FD 43         mov [d], b
1511   0C1A             ;; break; 
1512   0C1A 0A 29 0C      jmp _switch20_exit ; case break
1513   0C1D             _switch20_default:
1514   0C1D             ;; print("Error: Unknown argument type.\n"); 
1515   0C1D 26 44 19      mov b, _s1 ; "Error: Unknown argument type.\n"
1516   0C20 FD AB         swp b
1517   0C22 D8            push b
1518   0C23 07 38 15      call print
1519   0C26 51 02 00      add sp, 2
1520   0C29             _switch20_exit:
1521   0C29             ;; format_p++; 
1522   0C29 FA FD FF      lea d, [bp + -3] ; $format_p
1523   0C2C 2A            mov b, [d]
1524   0C2D D8            push b
1525   0C2E FD 77         inc b
1526   0C30 FA FD FF      lea d, [bp + -3] ; $format_p
1527   0C33 FD 43         mov [d], b
1528   0C35 E5            pop b
1529   0C36 0A 55 0C      jmp _if19_exit
1530   0C39             _if19_else:
1531   0C39             ;; putchar(*format_p); 
1532   0C39 FA FD FF      lea d, [bp + -3] ; $format_p
1533   0C3C 2A            mov b, [d]
1534   0C3D 74            mov d, b
1535   0C3E 32            mov bl, [d]
1536   0C3F A7 00         mov bh, 0
1537   0C41 DD            push bl
1538   0C42 07 F0 14      call putchar
1539   0C45 51 01 00      add sp, 1
1540   0C48             ;; format_p++; 
1541   0C48 FA FD FF      lea d, [bp + -3] ; $format_p
1542   0C4B 2A            mov b, [d]
1543   0C4C D8            push b
1544   0C4D FD 77         inc b
1545   0C4F FA FD FF      lea d, [bp + -3] ; $format_p
1546   0C52 FD 43         mov [d], b
1547   0C54 E5            pop b
1548   0C55             _if19_exit:
1549   0C55             _if18_exit:
1550   0C55             _for17_update:
1551   0C55 0A 42 0A      jmp _for17_cond
1552   0C58             _for17_exit:
1553   0C58 F9            leave
1554   0C59 09            ret
1555   0C5A             
1556   0C5A             err:
1557   0C5A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1558   0C5D             ;; print(e); 
1559   0C5D FA 05 00      lea d, [bp + 5] ; $e
1560   0C60 2A            mov b, [d]
1561   0C61 FD AB         swp b
1562   0C63 D8            push b
1563   0C64 07 38 15      call print
1564   0C67 51 02 00      add sp, 2
1565   0C6A F9            leave
1566   0C6B 09            ret
1567   0C6C             
1568   0C6C             printx32:
1569   0C6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1570   0C6F             
1571   0C6F             ; --- BEGIN INLINE ASM BLOCK
1572   0C6F FA 05 00      lea d, [bp + 5] ; $hex
1573   0C72 2B 02 00      mov b, [d+2]
1574   0C75 07 23 18      call print_u16x
1575   0C78 2A            mov b, [d]
1576   0C79 07 23 18      call print_u16x
1577   0C7C             ; --- END INLINE ASM BLOCK
1578   0C7C             
1579   0C7C F9            leave
1580   0C7D 09            ret
1581   0C7E             
1582   0C7E             printx16:
1583   0C7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1584   0C81             
1585   0C81             ; --- BEGIN INLINE ASM BLOCK
1586   0C81 FA 05 00      lea d, [bp + 5] ; $hex
1587   0C84 2A            mov b, [d]
1588   0C85 07 23 18      call print_u16x
1589   0C88             ; --- END INLINE ASM BLOCK
1590   0C88             
1591   0C88 F9            leave
1592   0C89 09            ret
1593   0C8A             
1594   0C8A             printx8:
1595   0C8A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1596   0C8D             
1597   0C8D             ; --- BEGIN INLINE ASM BLOCK
1598   0C8D FA 05 00      lea d, [bp + 5] ; $hex
1599   0C90 32            mov bl, [d]
1600   0C91 07 67 18      call print_u8x
1601   0C94             ; --- END INLINE ASM BLOCK
1602   0C94             
1603   0C94 F9            leave
1604   0C95 09            ret
1605   0C96             
1606   0C96             hex_str_to_int:
1607   0C96 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1608   0C99             ; $value 
1609   0C99 FA FF FF      lea d, [bp + -1] ; $value
1610   0C9C DA            push d
1611   0C9D 26 00 00      mov b, $0
1612   0CA0 E7            pop d
1613   0CA1 FD 43         mov [d], b
1614   0CA3             ; $i 
1615   0CA3             ; $hex_char 
1616   0CA3             ; $len 
1617   0CA3 52 07 00      sub sp, 7
1618   0CA6             ;; len = strlen(hex_string); 
1619   0CA6 FA FA FF      lea d, [bp + -6] ; $len
1620   0CA9 DA            push d
1621   0CAA FA 05 00      lea d, [bp + 5] ; $hex_string
1622   0CAD 2A            mov b, [d]
1623   0CAE FD AB         swp b
1624   0CB0 D8            push b
1625   0CB1 07 93 05      call strlen
1626   0CB4 51 02 00      add sp, 2
1627   0CB7 E7            pop d
1628   0CB8 FD 43         mov [d], b
1629   0CBA             ;; for (i = 0; i < len; i++) { 
1630   0CBA             _for24_init:
1631   0CBA FA FD FF      lea d, [bp + -3] ; $i
1632   0CBD DA            push d
1633   0CBE 26 00 00      mov b, $0
1634   0CC1 E7            pop d
1635   0CC2 FD 43         mov [d], b
1636   0CC4             _for24_cond:
1637   0CC4 FA FD FF      lea d, [bp + -3] ; $i
1638   0CC7 2A            mov b, [d]
1639   0CC8             ; START RELATIONAL
1640   0CC8 D7            push a
1641   0CC9 11            mov a, b
1642   0CCA FA FA FF      lea d, [bp + -6] ; $len
1643   0CCD 2A            mov b, [d]
1644   0CCE B0            cmp a, b
1645   0CCF FD 73         slt ; < (signed)
1646   0CD1 E4            pop a
1647   0CD2             ; END RELATIONAL
1648   0CD2 C0 00 00      cmp b, 0
1649   0CD5 C6 D7 0D      je _for24_exit
1650   0CD8             _for24_block:
1651   0CD8             ;; hex_char = hex_string[i]; 
1652   0CD8 FA FC FF      lea d, [bp + -4] ; $hex_char
1653   0CDB DA            push d
1654   0CDC FA 05 00      lea d, [bp + 5] ; $hex_string
1655   0CDF FD 2A         mov d, [d]
1656   0CE1 D7            push a
1657   0CE2 DA            push d
1658   0CE3 FA FD FF      lea d, [bp + -3] ; $i
1659   0CE6 2A            mov b, [d]
1660   0CE7 E7            pop d
1661   0CE8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1662   0CEC E4            pop a
1663   0CED 32            mov bl, [d]
1664   0CEE A7 00         mov bh, 0
1665   0CF0 E7            pop d
1666   0CF1 FD 3E         mov [d], bl
1667   0CF3             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1668   0CF3             _if25_cond:
1669   0CF3 FA FC FF      lea d, [bp + -4] ; $hex_char
1670   0CF6 32            mov bl, [d]
1671   0CF7 A7 00         mov bh, 0
1672   0CF9             ; START RELATIONAL
1673   0CF9 D7            push a
1674   0CFA 11            mov a, b
1675   0CFB 26 61 00      mov b, $61
1676   0CFE B0            cmp a, b
1677   0CFF FD 80         sge ; >=
1678   0D01 E4            pop a
1679   0D02             ; END RELATIONAL
1680   0D02 D7            push a
1681   0D03 11            mov a, b
1682   0D04 FA FC FF      lea d, [bp + -4] ; $hex_char
1683   0D07 32            mov bl, [d]
1684   0D08 A7 00         mov bh, 0
1685   0D0A             ; START RELATIONAL
1686   0D0A D7            push a
1687   0D0B 11            mov a, b
1688   0D0C 26 66 00      mov b, $66
1689   0D0F B0            cmp a, b
1690   0D10 FD 73         slt ; <= (signed)
1691   0D12 E4            pop a
1692   0D13             ; END RELATIONAL
1693   0D13 FD A7         sand a, b
1694   0D15 E4            pop a
1695   0D16 C0 00 00      cmp b, 0
1696   0D19 C6 4A 0D      je _if25_else
1697   0D1C             _if25_true:
1698   0D1C             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1699   0D1C FA FF FF      lea d, [bp + -1] ; $value
1700   0D1F DA            push d
1701   0D20 FA FF FF      lea d, [bp + -1] ; $value
1702   0D23 2A            mov b, [d]
1703   0D24             ; START FACTORS
1704   0D24 D7            push a
1705   0D25 11            mov a, b
1706   0D26 26 10 00      mov b, $10
1707   0D29 AC            mul a, b ; *
1708   0D2A 11            mov a, b
1709   0D2B 27            mov b, a
1710   0D2C E4            pop a
1711   0D2D             ; END FACTORS
1712   0D2D             ; START TERMS
1713   0D2D D7            push a
1714   0D2E 11            mov a, b
1715   0D2F FA FC FF      lea d, [bp + -4] ; $hex_char
1716   0D32 32            mov bl, [d]
1717   0D33 A7 00         mov bh, 0
1718   0D35             ; START TERMS
1719   0D35 D7            push a
1720   0D36 11            mov a, b
1721   0D37 26 61 00      mov b, $61
1722   0D3A 60            sub a, b
1723   0D3B 27            mov b, a
1724   0D3C 11            mov a, b
1725   0D3D 26 0A 00      mov b, $a
1726   0D40 56            add b, a
1727   0D41 E4            pop a
1728   0D42             ; END TERMS
1729   0D42 56            add b, a
1730   0D43 E4            pop a
1731   0D44             ; END TERMS
1732   0D44 E7            pop d
1733   0D45 FD 43         mov [d], b
1734   0D47 0A C7 0D      jmp _if25_exit
1735   0D4A             _if25_else:
1736   0D4A             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1737   0D4A             _if26_cond:
1738   0D4A FA FC FF      lea d, [bp + -4] ; $hex_char
1739   0D4D 32            mov bl, [d]
1740   0D4E A7 00         mov bh, 0
1741   0D50             ; START RELATIONAL
1742   0D50 D7            push a
1743   0D51 11            mov a, b
1744   0D52 26 41 00      mov b, $41
1745   0D55 B0            cmp a, b
1746   0D56 FD 80         sge ; >=
1747   0D58 E4            pop a
1748   0D59             ; END RELATIONAL
1749   0D59 D7            push a
1750   0D5A 11            mov a, b
1751   0D5B FA FC FF      lea d, [bp + -4] ; $hex_char
1752   0D5E 32            mov bl, [d]
1753   0D5F A7 00         mov bh, 0
1754   0D61             ; START RELATIONAL
1755   0D61 D7            push a
1756   0D62 11            mov a, b
1757   0D63 26 46 00      mov b, $46
1758   0D66 B0            cmp a, b
1759   0D67 FD 73         slt ; <= (signed)
1760   0D69 E4            pop a
1761   0D6A             ; END RELATIONAL
1762   0D6A FD A7         sand a, b
1763   0D6C E4            pop a
1764   0D6D C0 00 00      cmp b, 0
1765   0D70 C6 A1 0D      je _if26_else
1766   0D73             _if26_true:
1767   0D73             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1768   0D73 FA FF FF      lea d, [bp + -1] ; $value
1769   0D76 DA            push d
1770   0D77 FA FF FF      lea d, [bp + -1] ; $value
1771   0D7A 2A            mov b, [d]
1772   0D7B             ; START FACTORS
1773   0D7B D7            push a
1774   0D7C 11            mov a, b
1775   0D7D 26 10 00      mov b, $10
1776   0D80 AC            mul a, b ; *
1777   0D81 11            mov a, b
1778   0D82 27            mov b, a
1779   0D83 E4            pop a
1780   0D84             ; END FACTORS
1781   0D84             ; START TERMS
1782   0D84 D7            push a
1783   0D85 11            mov a, b
1784   0D86 FA FC FF      lea d, [bp + -4] ; $hex_char
1785   0D89 32            mov bl, [d]
1786   0D8A A7 00         mov bh, 0
1787   0D8C             ; START TERMS
1788   0D8C D7            push a
1789   0D8D 11            mov a, b
1790   0D8E 26 41 00      mov b, $41
1791   0D91 60            sub a, b
1792   0D92 27            mov b, a
1793   0D93 11            mov a, b
1794   0D94 26 0A 00      mov b, $a
1795   0D97 56            add b, a
1796   0D98 E4            pop a
1797   0D99             ; END TERMS
1798   0D99 56            add b, a
1799   0D9A E4            pop a
1800   0D9B             ; END TERMS
1801   0D9B E7            pop d
1802   0D9C FD 43         mov [d], b
1803   0D9E 0A C7 0D      jmp _if26_exit
1804   0DA1             _if26_else:
1805   0DA1             ;; value = (value * 16) + (hex_char - '0'); 
1806   0DA1 FA FF FF      lea d, [bp + -1] ; $value
1807   0DA4 DA            push d
1808   0DA5 FA FF FF      lea d, [bp + -1] ; $value
1809   0DA8 2A            mov b, [d]
1810   0DA9             ; START FACTORS
1811   0DA9 D7            push a
1812   0DAA 11            mov a, b
1813   0DAB 26 10 00      mov b, $10
1814   0DAE AC            mul a, b ; *
1815   0DAF 11            mov a, b
1816   0DB0 27            mov b, a
1817   0DB1 E4            pop a
1818   0DB2             ; END FACTORS
1819   0DB2             ; START TERMS
1820   0DB2 D7            push a
1821   0DB3 11            mov a, b
1822   0DB4 FA FC FF      lea d, [bp + -4] ; $hex_char
1823   0DB7 32            mov bl, [d]
1824   0DB8 A7 00         mov bh, 0
1825   0DBA             ; START TERMS
1826   0DBA D7            push a
1827   0DBB 11            mov a, b
1828   0DBC 26 30 00      mov b, $30
1829   0DBF 60            sub a, b
1830   0DC0 27            mov b, a
1831   0DC1 E4            pop a
1832   0DC2             ; END TERMS
1833   0DC2 56            add b, a
1834   0DC3 E4            pop a
1835   0DC4             ; END TERMS
1836   0DC4 E7            pop d
1837   0DC5 FD 43         mov [d], b
1838   0DC7             _if26_exit:
1839   0DC7             _if25_exit:
1840   0DC7             _for24_update:
1841   0DC7 FA FD FF      lea d, [bp + -3] ; $i
1842   0DCA 2A            mov b, [d]
1843   0DCB D8            push b
1844   0DCC FD 77         inc b
1845   0DCE FA FD FF      lea d, [bp + -3] ; $i
1846   0DD1 FD 43         mov [d], b
1847   0DD3 E5            pop b
1848   0DD4 0A C4 0C      jmp _for24_cond
1849   0DD7             _for24_exit:
1850   0DD7             ;; return value; 
1851   0DD7 FA FF FF      lea d, [bp + -1] ; $value
1852   0DDA 2A            mov b, [d]
1853   0DDB F9            leave
1854   0DDC 09            ret
1855   0DDD             
1856   0DDD             gets:
1857   0DDD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1858   0DE0             
1859   0DE0             ; --- BEGIN INLINE ASM BLOCK
1860   0DE0 FA 05 00      lea d, [bp + 5] ; $s
1861   0DE3 15            mov a, [d]
1862   0DE4 3C            mov d, a
1863   0DE5 07 88 16      call _gets
1864   0DE8             ; --- END INLINE ASM BLOCK
1865   0DE8             
1866   0DE8             ;; return strlen(s); 
1867   0DE8 FA 05 00      lea d, [bp + 5] ; $s
1868   0DEB 2A            mov b, [d]
1869   0DEC FD AB         swp b
1870   0DEE D8            push b
1871   0DEF 07 93 05      call strlen
1872   0DF2 51 02 00      add sp, 2
1873   0DF5 F9            leave
1874   0DF6 09            ret
1875   0DF7             
1876   0DF7             print_signed:
1877   0DF7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1878   0DFA             ; $digits 
1879   0DFA             ; $i 
1880   0DFA FA FA FF      lea d, [bp + -6] ; $i
1881   0DFD DA            push d
1882   0DFE 26 00 00      mov b, $0
1883   0E01 E7            pop d
1884   0E02 FD 43         mov [d], b
1885   0E04 52 07 00      sub sp, 7
1886   0E07             ;; if (num < 0) { 
1887   0E07             _if27_cond:
1888   0E07 FA 05 00      lea d, [bp + 5] ; $num
1889   0E0A 2A            mov b, [d]
1890   0E0B             ; START RELATIONAL
1891   0E0B D7            push a
1892   0E0C 11            mov a, b
1893   0E0D 26 00 00      mov b, $0
1894   0E10 B0            cmp a, b
1895   0E11 FD 73         slt ; < (signed)
1896   0E13 E4            pop a
1897   0E14             ; END RELATIONAL
1898   0E14 C0 00 00      cmp b, 0
1899   0E17 C6 34 0E      je _if27_else
1900   0E1A             _if27_true:
1901   0E1A             ;; putchar('-'); 
1902   0E1A 26 2D 00      mov b, $2d
1903   0E1D DD            push bl
1904   0E1E 07 F0 14      call putchar
1905   0E21 51 01 00      add sp, 1
1906   0E24             ;; num = -num; 
1907   0E24 FA 05 00      lea d, [bp + 5] ; $num
1908   0E27 DA            push d
1909   0E28 FA 05 00      lea d, [bp + 5] ; $num
1910   0E2B 2A            mov b, [d]
1911   0E2C FD 97         neg b
1912   0E2E E7            pop d
1913   0E2F FD 43         mov [d], b
1914   0E31 0A 56 0E      jmp _if27_exit
1915   0E34             _if27_else:
1916   0E34             ;; if (num == 0) { 
1917   0E34             _if28_cond:
1918   0E34 FA 05 00      lea d, [bp + 5] ; $num
1919   0E37 2A            mov b, [d]
1920   0E38             ; START RELATIONAL
1921   0E38 D7            push a
1922   0E39 11            mov a, b
1923   0E3A 26 00 00      mov b, $0
1924   0E3D B0            cmp a, b
1925   0E3E FD 71         seq ; ==
1926   0E40 E4            pop a
1927   0E41             ; END RELATIONAL
1928   0E41 C0 00 00      cmp b, 0
1929   0E44 C6 56 0E      je _if28_exit
1930   0E47             _if28_true:
1931   0E47             ;; putchar('0'); 
1932   0E47 26 30 00      mov b, $30
1933   0E4A DD            push bl
1934   0E4B 07 F0 14      call putchar
1935   0E4E 51 01 00      add sp, 1
1936   0E51             ;; return; 
1937   0E51 F9            leave
1938   0E52 09            ret
1939   0E53 0A 56 0E      jmp _if28_exit
1940   0E56             _if28_exit:
1941   0E56             _if27_exit:
1942   0E56             ;; while (num > 0) { 
1943   0E56             _while29_cond:
1944   0E56 FA 05 00      lea d, [bp + 5] ; $num
1945   0E59 2A            mov b, [d]
1946   0E5A             ; START RELATIONAL
1947   0E5A D7            push a
1948   0E5B 11            mov a, b
1949   0E5C 26 00 00      mov b, $0
1950   0E5F B0            cmp a, b
1951   0E60 FD 7F         sgt ; >
1952   0E62 E4            pop a
1953   0E63             ; END RELATIONAL
1954   0E63 C0 00 00      cmp b, 0
1955   0E66 C6 B0 0E      je _while29_exit
1956   0E69             _while29_block:
1957   0E69             ;; digits[i] = '0' + (num % 10); 
1958   0E69 FA FC FF      lea d, [bp + -4] ; $digits
1959   0E6C D7            push a
1960   0E6D DA            push d
1961   0E6E FA FA FF      lea d, [bp + -6] ; $i
1962   0E71 2A            mov b, [d]
1963   0E72 E7            pop d
1964   0E73 5A            add d, b
1965   0E74 E4            pop a
1966   0E75 DA            push d
1967   0E76 26 30 00      mov b, $30
1968   0E79             ; START TERMS
1969   0E79 D7            push a
1970   0E7A 11            mov a, b
1971   0E7B FA 05 00      lea d, [bp + 5] ; $num
1972   0E7E 2A            mov b, [d]
1973   0E7F             ; START FACTORS
1974   0E7F D7            push a
1975   0E80 11            mov a, b
1976   0E81 26 0A 00      mov b, $a
1977   0E84 AE            div a, b ; 
1978   0E85 11            mov a, b
1979   0E86 27            mov b, a
1980   0E87 E4            pop a
1981   0E88             ; END FACTORS
1982   0E88 56            add b, a
1983   0E89 E4            pop a
1984   0E8A             ; END TERMS
1985   0E8A E7            pop d
1986   0E8B FD 3E         mov [d], bl
1987   0E8D             ;; num = num / 10; 
1988   0E8D FA 05 00      lea d, [bp + 5] ; $num
1989   0E90 DA            push d
1990   0E91 FA 05 00      lea d, [bp + 5] ; $num
1991   0E94 2A            mov b, [d]
1992   0E95             ; START FACTORS
1993   0E95 D7            push a
1994   0E96 11            mov a, b
1995   0E97 26 0A 00      mov b, $a
1996   0E9A AE            div a, b
1997   0E9B 27            mov b, a
1998   0E9C E4            pop a
1999   0E9D             ; END FACTORS
2000   0E9D E7            pop d
2001   0E9E FD 43         mov [d], b
2002   0EA0             ;; i++; 
2003   0EA0 FA FA FF      lea d, [bp + -6] ; $i
2004   0EA3 2A            mov b, [d]
2005   0EA4 D8            push b
2006   0EA5 FD 77         inc b
2007   0EA7 FA FA FF      lea d, [bp + -6] ; $i
2008   0EAA FD 43         mov [d], b
2009   0EAC E5            pop b
2010   0EAD 0A 56 0E      jmp _while29_cond
2011   0EB0             _while29_exit:
2012   0EB0             ;; while (i > 0) { 
2013   0EB0             _while30_cond:
2014   0EB0 FA FA FF      lea d, [bp + -6] ; $i
2015   0EB3 2A            mov b, [d]
2016   0EB4             ; START RELATIONAL
2017   0EB4 D7            push a
2018   0EB5 11            mov a, b
2019   0EB6 26 00 00      mov b, $0
2020   0EB9 B0            cmp a, b
2021   0EBA FD 7F         sgt ; >
2022   0EBC E4            pop a
2023   0EBD             ; END RELATIONAL
2024   0EBD C0 00 00      cmp b, 0
2025   0EC0 C6 E9 0E      je _while30_exit
2026   0EC3             _while30_block:
2027   0EC3             ;; i--; 
2028   0EC3 FA FA FF      lea d, [bp + -6] ; $i
2029   0EC6 2A            mov b, [d]
2030   0EC7 D8            push b
2031   0EC8 FD 7D         dec b
2032   0ECA FA FA FF      lea d, [bp + -6] ; $i
2033   0ECD FD 43         mov [d], b
2034   0ECF E5            pop b
2035   0ED0             ;; putchar(digits[i]); 
2036   0ED0 FA FC FF      lea d, [bp + -4] ; $digits
2037   0ED3 D7            push a
2038   0ED4 DA            push d
2039   0ED5 FA FA FF      lea d, [bp + -6] ; $i
2040   0ED8 2A            mov b, [d]
2041   0ED9 E7            pop d
2042   0EDA 5A            add d, b
2043   0EDB E4            pop a
2044   0EDC 32            mov bl, [d]
2045   0EDD A7 00         mov bh, 0
2046   0EDF DD            push bl
2047   0EE0 07 F0 14      call putchar
2048   0EE3 51 01 00      add sp, 1
2049   0EE6 0A B0 0E      jmp _while30_cond
2050   0EE9             _while30_exit:
2051   0EE9 F9            leave
2052   0EEA 09            ret
2053   0EEB             
2054   0EEB             print_signed_long:
2055   0EEB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2056   0EEE             ; $digits 
2057   0EEE             ; $i 
2058   0EEE FA F5 FF      lea d, [bp + -11] ; $i
2059   0EF1 DA            push d
2060   0EF2 26 00 00      mov b, $0
2061   0EF5 E7            pop d
2062   0EF6 FD 43         mov [d], b
2063   0EF8 52 0C 00      sub sp, 12
2064   0EFB             ;; if (num < 0) { 
2065   0EFB             _if31_cond:
2066   0EFB FA 05 00      lea d, [bp + 5] ; $num
2067   0EFE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2068   0F01 FD 39         mov c, b ; And place it into C
2069   0F03 2A            mov b, [d] ; Lower Word in B
2070   0F04             ; START RELATIONAL
2071   0F04 D7            push a
2072   0F05 FD D8         push g
2073   0F07 11            mov a, b
2074   0F08 FD 7A         mov g, c
2075   0F0A 26 00 00      mov b, $0
2076   0F0D 38 00 00      mov c, 0
2077   0F10 FD AF 00 00   cmp32 ga, cb
2077   0F14 00 00 00 00 
2077   0F18 00 00 00 00 
2077   0F1C 00 00 00 00 
2077   0F20 00 00 00 00 
2077   0F24 00 00 00 00 
2077   0F28 00 00 00 00 
2077   0F2C 00 00 00 00 
2077   0F30 00 00 00 00 
2077   0F34 00 00 00 00 
2077   0F38 00 00 00 00 
2077   0F3C 00 00 00 00 
2077   0F40 00 00 00 00 
2077   0F44 00 00 00 00 
2077   0F48 00 00 00 00 
2077   0F4C 00 00 00 00 
2077   0F50 00 00 00 00 
2077   0F54 00 00 00 00 
2077   0F58 00 00 00 00 
2077   0F5C 00 00 00 00 
2077   0F60 00 00 00 00 
2077   0F64 00 00 00 00 
2077   0F68 00 00 00 00 
2077   0F6C 00 00 00 00 
2077   0F70 00 00 00 00 
2077   0F74 00 00 00 00 
2077   0F78 00 00 00 00 
2077   0F7C 00 00 00 00 
2077   0F80 00 00 00 00 
2077   0F84 00 00 00 00 
2077   0F88 00 00 00 00 
2077   0F8C 00 00 00 00 
2077   0F90 00 00 00 00 
2077   0F94 00 00 00 00 
2077   0F98 00 00 00 00 
2077   0F9C 00 00 00 00 
2077   0FA0 00 00 00 00 
2077   0FA4 00 00 00 00 
2077   0FA8 00 00 00 00 
2077   0FAC 00 00 00 00 
2077   0FB0 00 00 00 00 
2077   0FB4 00 00 00 00 
2077   0FB8 00 00 00 00 
2077   0FBC 00 00 00 00 
2077   0FC0 00 00 00 00 
2077   0FC4 00 00 00 00 
2077   0FC8 00 00 00 00 
2077   0FCC 00 00 00 00 
2077   0FD0 00 00 00 00 
2077   0FD4 00 00 00 00 
2077   0FD8 00 00 00 00 
2077   0FDC 00 00 00 00 
2077   0FE0 00 00 00 00 
2077   0FE4 00 00 00 00 
2077   0FE8 00 00 00 00 
2077   0FEC 00 00 00 00 
2077   0FF0 00 00 00 00 
2077   0FF4 00 00 00 00 
2077   0FF8 00 00 00 00 
2077   0FFC 00 00 00 00 
2077   1000 00 00 00 00 
2077   1004 00 00 00 00 
2077   1008 00 00 00 00 
2077   100C 00 00 00 00 
2077   1010 00 
2078   1011 FD 73         slt ; <
2079   1013 FD F1         pop g
2080   1015 E4            pop a
2081   1016             ; END RELATIONAL
2082   1016 C0 00 00      cmp b, 0
2083   1019 C6 40 10      je _if31_else
2084   101C             _if31_true:
2085   101C             ;; putchar('-'); 
2086   101C 26 2D 00      mov b, $2d
2087   101F DD            push bl
2088   1020 07 F0 14      call putchar
2089   1023 51 01 00      add sp, 1
2090   1026             ;; num = -num; 
2091   1026 FA 05 00      lea d, [bp + 5] ; $num
2092   1029 DA            push d
2093   102A FA 05 00      lea d, [bp + 5] ; $num
2094   102D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2095   1030 FD 39         mov c, b ; And place it into C
2096   1032 2A            mov b, [d] ; Lower Word in B
2097   1033 FD 97         neg b
2098   1035 E7            pop d
2099   1036 FD 43         mov [d], b
2100   1038 28            mov b, c
2101   1039 FD 44 02 00   mov [d + 2], b
2102   103D 0A 70 11      jmp _if31_exit
2103   1040             _if31_else:
2104   1040             ;; if (num == 0) { 
2105   1040             _if32_cond:
2106   1040 FA 05 00      lea d, [bp + 5] ; $num
2107   1043 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2108   1046 FD 39         mov c, b ; And place it into C
2109   1048 2A            mov b, [d] ; Lower Word in B
2110   1049             ; START RELATIONAL
2111   1049 D7            push a
2112   104A FD D8         push g
2113   104C 11            mov a, b
2114   104D FD 7A         mov g, c
2115   104F 26 00 00      mov b, $0
2116   1052 38 00 00      mov c, 0
2117   1055 FD AF 00 00   cmp32 ga, cb
2117   1059 00 00 00 00 
2117   105D 00 00 00 00 
2117   1061 00 00 00 00 
2117   1065 00 00 00 00 
2117   1069 00 00 00 00 
2117   106D 00 00 00 00 
2117   1071 00 00 00 00 
2117   1075 00 00 00 00 
2117   1079 00 00 00 00 
2117   107D 00 00 00 00 
2117   1081 00 00 00 00 
2117   1085 00 00 00 00 
2117   1089 00 00 00 00 
2117   108D 00 00 00 00 
2117   1091 00 00 00 00 
2117   1095 00 00 00 00 
2117   1099 00 00 00 00 
2117   109D 00 00 00 00 
2117   10A1 00 00 00 00 
2117   10A5 00 00 00 00 
2117   10A9 00 00 00 00 
2117   10AD 00 00 00 00 
2117   10B1 00 00 00 00 
2117   10B5 00 00 00 00 
2117   10B9 00 00 00 00 
2117   10BD 00 00 00 00 
2117   10C1 00 00 00 00 
2117   10C5 00 00 00 00 
2117   10C9 00 00 00 00 
2117   10CD 00 00 00 00 
2117   10D1 00 00 00 00 
2117   10D5 00 00 00 00 
2117   10D9 00 00 00 00 
2117   10DD 00 00 00 00 
2117   10E1 00 00 00 00 
2117   10E5 00 00 00 00 
2117   10E9 00 00 00 00 
2117   10ED 00 00 00 00 
2117   10F1 00 00 00 00 
2117   10F5 00 00 00 00 
2117   10F9 00 00 00 00 
2117   10FD 00 00 00 00 
2117   1101 00 00 00 00 
2117   1105 00 00 00 00 
2117   1109 00 00 00 00 
2117   110D 00 00 00 00 
2117   1111 00 00 00 00 
2117   1115 00 00 00 00 
2117   1119 00 00 00 00 
2117   111D 00 00 00 00 
2117   1121 00 00 00 00 
2117   1125 00 00 00 00 
2117   1129 00 00 00 00 
2117   112D 00 00 00 00 
2117   1131 00 00 00 00 
2117   1135 00 00 00 00 
2117   1139 00 00 00 00 
2117   113D 00 00 00 00 
2117   1141 00 00 00 00 
2117   1145 00 00 00 00 
2117   1149 00 00 00 00 
2117   114D 00 00 00 00 
2117   1151 00 00 00 00 
2117   1155 00 
2118   1156 FD 71         seq ; ==
2119   1158 FD F1         pop g
2120   115A E4            pop a
2121   115B             ; END RELATIONAL
2122   115B C0 00 00      cmp b, 0
2123   115E C6 70 11      je _if32_exit
2124   1161             _if32_true:
2125   1161             ;; putchar('0'); 
2126   1161 26 30 00      mov b, $30
2127   1164 DD            push bl
2128   1165 07 F0 14      call putchar
2129   1168 51 01 00      add sp, 1
2130   116B             ;; return; 
2131   116B F9            leave
2132   116C 09            ret
2133   116D 0A 70 11      jmp _if32_exit
2134   1170             _if32_exit:
2135   1170             _if31_exit:
2136   1170             ;; while (num > 0) { 
2137   1170             _while33_cond:
2138   1170 FA 05 00      lea d, [bp + 5] ; $num
2139   1173 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2140   1176 FD 39         mov c, b ; And place it into C
2141   1178 2A            mov b, [d] ; Lower Word in B
2142   1179             ; START RELATIONAL
2143   1179 D7            push a
2144   117A FD D8         push g
2145   117C 11            mov a, b
2146   117D FD 7A         mov g, c
2147   117F 26 00 00      mov b, $0
2148   1182 38 00 00      mov c, 0
2149   1185 FD 7F         sgt
2150   1187 FD F1         pop g
2151   1189 E4            pop a
2152   118A             ; END RELATIONAL
2153   118A C0 00 00      cmp b, 0
2154   118D C6 ED 11      je _while33_exit
2155   1190             _while33_block:
2156   1190             ;; digits[i] = '0' + (num % 10); 
2157   1190 FA F7 FF      lea d, [bp + -9] ; $digits
2158   1193 D7            push a
2159   1194 DA            push d
2160   1195 FA F5 FF      lea d, [bp + -11] ; $i
2161   1198 2A            mov b, [d]
2162   1199 E7            pop d
2163   119A 5A            add d, b
2164   119B E4            pop a
2165   119C DA            push d
2166   119D 26 30 00      mov b, $30
2167   11A0             ; START TERMS
2168   11A0 D7            push a
2169   11A1 11            mov a, b
2170   11A2 FA 05 00      lea d, [bp + 5] ; $num
2171   11A5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2172   11A8 FD 39         mov c, b ; And place it into C
2173   11AA 2A            mov b, [d] ; Lower Word in B
2174   11AB             ; START FACTORS
2175   11AB D7            push a
2176   11AC 11            mov a, b
2177   11AD 26 0A 00      mov b, $a
2178   11B0 AE            div a, b ; 
2179   11B1 11            mov a, b
2180   11B2 27            mov b, a
2181   11B3 E4            pop a
2182   11B4             ; END FACTORS
2183   11B4 54            add a, b
2184   11B5 D7            push a
2185   11B6 FD 12         mov a, g
2186   11B8 28            mov b, c
2187   11B9 5C            adc a, b
2188   11BA 39            mov c, a
2189   11BB E5            pop b
2190   11BC E4            pop a
2191   11BD             ; END TERMS
2192   11BD E7            pop d
2193   11BE FD 3E         mov [d], bl
2194   11C0             ;; num = num / 10; 
2195   11C0 FA 05 00      lea d, [bp + 5] ; $num
2196   11C3 DA            push d
2197   11C4 FA 05 00      lea d, [bp + 5] ; $num
2198   11C7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2199   11CA FD 39         mov c, b ; And place it into C
2200   11CC 2A            mov b, [d] ; Lower Word in B
2201   11CD             ; START FACTORS
2202   11CD D7            push a
2203   11CE 11            mov a, b
2204   11CF 26 0A 00      mov b, $a
2205   11D2 AE            div a, b
2206   11D3 27            mov b, a
2207   11D4 E4            pop a
2208   11D5             ; END FACTORS
2209   11D5 E7            pop d
2210   11D6 FD 43         mov [d], b
2211   11D8 28            mov b, c
2212   11D9 FD 44 02 00   mov [d + 2], b
2213   11DD             ;; i++; 
2214   11DD FA F5 FF      lea d, [bp + -11] ; $i
2215   11E0 2A            mov b, [d]
2216   11E1 D8            push b
2217   11E2 FD 77         inc b
2218   11E4 FA F5 FF      lea d, [bp + -11] ; $i
2219   11E7 FD 43         mov [d], b
2220   11E9 E5            pop b
2221   11EA 0A 70 11      jmp _while33_cond
2222   11ED             _while33_exit:
2223   11ED             ;; while (i > 0) { 
2224   11ED             _while34_cond:
2225   11ED FA F5 FF      lea d, [bp + -11] ; $i
2226   11F0 2A            mov b, [d]
2227   11F1             ; START RELATIONAL
2228   11F1 D7            push a
2229   11F2 11            mov a, b
2230   11F3 26 00 00      mov b, $0
2231   11F6 B0            cmp a, b
2232   11F7 FD 7F         sgt ; >
2233   11F9 E4            pop a
2234   11FA             ; END RELATIONAL
2235   11FA C0 00 00      cmp b, 0
2236   11FD C6 26 12      je _while34_exit
2237   1200             _while34_block:
2238   1200             ;; i--; 
2239   1200 FA F5 FF      lea d, [bp + -11] ; $i
2240   1203 2A            mov b, [d]
2241   1204 D8            push b
2242   1205 FD 7D         dec b
2243   1207 FA F5 FF      lea d, [bp + -11] ; $i
2244   120A FD 43         mov [d], b
2245   120C E5            pop b
2246   120D             ;; putchar(digits[i]); 
2247   120D FA F7 FF      lea d, [bp + -9] ; $digits
2248   1210 D7            push a
2249   1211 DA            push d
2250   1212 FA F5 FF      lea d, [bp + -11] ; $i
2251   1215 2A            mov b, [d]
2252   1216 E7            pop d
2253   1217 5A            add d, b
2254   1218 E4            pop a
2255   1219 32            mov bl, [d]
2256   121A A7 00         mov bh, 0
2257   121C DD            push bl
2258   121D 07 F0 14      call putchar
2259   1220 51 01 00      add sp, 1
2260   1223 0A ED 11      jmp _while34_cond
2261   1226             _while34_exit:
2262   1226 F9            leave
2263   1227 09            ret
2264   1228             
2265   1228             print_unsigned_long:
2266   1228 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2267   122B             ; $digits 
2268   122B             ; $i 
2269   122B 52 0C 00      sub sp, 12
2270   122E             ;; i = 0; 
2271   122E FA F5 FF      lea d, [bp + -11] ; $i
2272   1231 DA            push d
2273   1232 26 00 00      mov b, $0
2274   1235 E7            pop d
2275   1236 FD 43         mov [d], b
2276   1238             ;; if(num == 0){ 
2277   1238             _if35_cond:
2278   1238 FA 05 00      lea d, [bp + 5] ; $num
2279   123B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2280   123E FD 39         mov c, b ; And place it into C
2281   1240 2A            mov b, [d] ; Lower Word in B
2282   1241             ; START RELATIONAL
2283   1241 D7            push a
2284   1242 FD D8         push g
2285   1244 11            mov a, b
2286   1245 FD 7A         mov g, c
2287   1247 26 00 00      mov b, $0
2288   124A 38 00 00      mov c, 0
2289   124D FD AF 00 00   cmp32 ga, cb
2289   1251 00 00 00 00 
2289   1255 00 00 00 00 
2289   1259 00 00 00 00 
2289   125D 00 00 00 00 
2289   1261 00 00 00 00 
2289   1265 00 00 00 00 
2289   1269 00 00 00 00 
2289   126D 00 00 00 00 
2289   1271 00 00 00 00 
2289   1275 00 00 00 00 
2289   1279 00 00 00 00 
2289   127D 00 00 00 00 
2289   1281 00 00 00 00 
2289   1285 00 00 00 00 
2289   1289 00 00 00 00 
2289   128D 00 00 00 00 
2289   1291 00 00 00 00 
2289   1295 00 00 00 00 
2289   1299 00 00 00 00 
2289   129D 00 00 00 00 
2289   12A1 00 00 00 00 
2289   12A5 00 00 00 00 
2289   12A9 00 00 00 00 
2289   12AD 00 00 00 00 
2289   12B1 00 00 00 00 
2289   12B5 00 00 00 00 
2289   12B9 00 00 00 00 
2289   12BD 00 00 00 00 
2289   12C1 00 00 00 00 
2289   12C5 00 00 00 00 
2289   12C9 00 00 00 00 
2289   12CD 00 00 00 00 
2289   12D1 00 00 00 00 
2289   12D5 00 00 00 00 
2289   12D9 00 00 00 00 
2289   12DD 00 00 00 00 
2289   12E1 00 00 00 00 
2289   12E5 00 00 00 00 
2289   12E9 00 00 00 00 
2289   12ED 00 00 00 00 
2289   12F1 00 00 00 00 
2289   12F5 00 00 00 00 
2289   12F9 00 00 00 00 
2289   12FD 00 00 00 00 
2289   1301 00 00 00 00 
2289   1305 00 00 00 00 
2289   1309 00 00 00 00 
2289   130D 00 00 00 00 
2289   1311 00 00 00 00 
2289   1315 00 00 00 00 
2289   1319 00 00 00 00 
2289   131D 00 00 00 00 
2289   1321 00 00 00 00 
2289   1325 00 00 00 00 
2289   1329 00 00 00 00 
2289   132D 00 00 00 00 
2289   1331 00 00 00 00 
2289   1335 00 00 00 00 
2289   1339 00 00 00 00 
2289   133D 00 00 00 00 
2289   1341 00 00 00 00 
2289   1345 00 00 00 00 
2289   1349 00 00 00 00 
2289   134D 00 
2290   134E FD 71         seq ; ==
2291   1350 FD F1         pop g
2292   1352 E4            pop a
2293   1353             ; END RELATIONAL
2294   1353 C0 00 00      cmp b, 0
2295   1356 C6 68 13      je _if35_exit
2296   1359             _if35_true:
2297   1359             ;; putchar('0'); 
2298   1359 26 30 00      mov b, $30
2299   135C DD            push bl
2300   135D 07 F0 14      call putchar
2301   1360 51 01 00      add sp, 1
2302   1363             ;; return; 
2303   1363 F9            leave
2304   1364 09            ret
2305   1365 0A 68 13      jmp _if35_exit
2306   1368             _if35_exit:
2307   1368             ;; while (num > 0) { 
2308   1368             _while36_cond:
2309   1368 FA 05 00      lea d, [bp + 5] ; $num
2310   136B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2311   136E FD 39         mov c, b ; And place it into C
2312   1370 2A            mov b, [d] ; Lower Word in B
2313   1371             ; START RELATIONAL
2314   1371 D7            push a
2315   1372 FD D8         push g
2316   1374 11            mov a, b
2317   1375 FD 7A         mov g, c
2318   1377 26 00 00      mov b, $0
2319   137A 38 00 00      mov c, 0
2320   137D FD 81         sgu
2321   137F FD F1         pop g
2322   1381 E4            pop a
2323   1382             ; END RELATIONAL
2324   1382 C0 00 00      cmp b, 0
2325   1385 C6 E5 13      je _while36_exit
2326   1388             _while36_block:
2327   1388             ;; digits[i] = '0' + (num % 10); 
2328   1388 FA F7 FF      lea d, [bp + -9] ; $digits
2329   138B D7            push a
2330   138C DA            push d
2331   138D FA F5 FF      lea d, [bp + -11] ; $i
2332   1390 2A            mov b, [d]
2333   1391 E7            pop d
2334   1392 5A            add d, b
2335   1393 E4            pop a
2336   1394 DA            push d
2337   1395 26 30 00      mov b, $30
2338   1398             ; START TERMS
2339   1398 D7            push a
2340   1399 11            mov a, b
2341   139A FA 05 00      lea d, [bp + 5] ; $num
2342   139D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2343   13A0 FD 39         mov c, b ; And place it into C
2344   13A2 2A            mov b, [d] ; Lower Word in B
2345   13A3             ; START FACTORS
2346   13A3 D7            push a
2347   13A4 11            mov a, b
2348   13A5 26 0A 00      mov b, $a
2349   13A8 AE            div a, b ; 
2350   13A9 11            mov a, b
2351   13AA 27            mov b, a
2352   13AB E4            pop a
2353   13AC             ; END FACTORS
2354   13AC 54            add a, b
2355   13AD D7            push a
2356   13AE FD 12         mov a, g
2357   13B0 28            mov b, c
2358   13B1 5C            adc a, b
2359   13B2 39            mov c, a
2360   13B3 E5            pop b
2361   13B4 E4            pop a
2362   13B5             ; END TERMS
2363   13B5 E7            pop d
2364   13B6 FD 3E         mov [d], bl
2365   13B8             ;; num = num / 10; 
2366   13B8 FA 05 00      lea d, [bp + 5] ; $num
2367   13BB DA            push d
2368   13BC FA 05 00      lea d, [bp + 5] ; $num
2369   13BF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2370   13C2 FD 39         mov c, b ; And place it into C
2371   13C4 2A            mov b, [d] ; Lower Word in B
2372   13C5             ; START FACTORS
2373   13C5 D7            push a
2374   13C6 11            mov a, b
2375   13C7 26 0A 00      mov b, $a
2376   13CA AE            div a, b
2377   13CB 27            mov b, a
2378   13CC E4            pop a
2379   13CD             ; END FACTORS
2380   13CD E7            pop d
2381   13CE FD 43         mov [d], b
2382   13D0 28            mov b, c
2383   13D1 FD 44 02 00   mov [d + 2], b
2384   13D5             ;; i++; 
2385   13D5 FA F5 FF      lea d, [bp + -11] ; $i
2386   13D8 2A            mov b, [d]
2387   13D9 D8            push b
2388   13DA FD 77         inc b
2389   13DC FA F5 FF      lea d, [bp + -11] ; $i
2390   13DF FD 43         mov [d], b
2391   13E1 E5            pop b
2392   13E2 0A 68 13      jmp _while36_cond
2393   13E5             _while36_exit:
2394   13E5             ;; while (i > 0) { 
2395   13E5             _while37_cond:
2396   13E5 FA F5 FF      lea d, [bp + -11] ; $i
2397   13E8 2A            mov b, [d]
2398   13E9             ; START RELATIONAL
2399   13E9 D7            push a
2400   13EA 11            mov a, b
2401   13EB 26 00 00      mov b, $0
2402   13EE B0            cmp a, b
2403   13EF FD 7F         sgt ; >
2404   13F1 E4            pop a
2405   13F2             ; END RELATIONAL
2406   13F2 C0 00 00      cmp b, 0
2407   13F5 C6 1E 14      je _while37_exit
2408   13F8             _while37_block:
2409   13F8             ;; i--; 
2410   13F8 FA F5 FF      lea d, [bp + -11] ; $i
2411   13FB 2A            mov b, [d]
2412   13FC D8            push b
2413   13FD FD 7D         dec b
2414   13FF FA F5 FF      lea d, [bp + -11] ; $i
2415   1402 FD 43         mov [d], b
2416   1404 E5            pop b
2417   1405             ;; putchar(digits[i]); 
2418   1405 FA F7 FF      lea d, [bp + -9] ; $digits
2419   1408 D7            push a
2420   1409 DA            push d
2421   140A FA F5 FF      lea d, [bp + -11] ; $i
2422   140D 2A            mov b, [d]
2423   140E E7            pop d
2424   140F 5A            add d, b
2425   1410 E4            pop a
2426   1411 32            mov bl, [d]
2427   1412 A7 00         mov bh, 0
2428   1414 DD            push bl
2429   1415 07 F0 14      call putchar
2430   1418 51 01 00      add sp, 1
2431   141B 0A E5 13      jmp _while37_cond
2432   141E             _while37_exit:
2433   141E F9            leave
2434   141F 09            ret
2435   1420             
2436   1420             print_unsigned:
2437   1420 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2438   1423             ; $digits 
2439   1423             ; $i 
2440   1423 52 07 00      sub sp, 7
2441   1426             ;; i = 0; 
2442   1426 FA FA FF      lea d, [bp + -6] ; $i
2443   1429 DA            push d
2444   142A 26 00 00      mov b, $0
2445   142D E7            pop d
2446   142E FD 43         mov [d], b
2447   1430             ;; if(num == 0){ 
2448   1430             _if38_cond:
2449   1430 FA 05 00      lea d, [bp + 5] ; $num
2450   1433 2A            mov b, [d]
2451   1434             ; START RELATIONAL
2452   1434 D7            push a
2453   1435 11            mov a, b
2454   1436 26 00 00      mov b, $0
2455   1439 B0            cmp a, b
2456   143A FD 71         seq ; ==
2457   143C E4            pop a
2458   143D             ; END RELATIONAL
2459   143D C0 00 00      cmp b, 0
2460   1440 C6 52 14      je _if38_exit
2461   1443             _if38_true:
2462   1443             ;; putchar('0'); 
2463   1443 26 30 00      mov b, $30
2464   1446 DD            push bl
2465   1447 07 F0 14      call putchar
2466   144A 51 01 00      add sp, 1
2467   144D             ;; return; 
2468   144D F9            leave
2469   144E 09            ret
2470   144F 0A 52 14      jmp _if38_exit
2471   1452             _if38_exit:
2472   1452             ;; while (num > 0) { 
2473   1452             _while39_cond:
2474   1452 FA 05 00      lea d, [bp + 5] ; $num
2475   1455 2A            mov b, [d]
2476   1456             ; START RELATIONAL
2477   1456 D7            push a
2478   1457 11            mov a, b
2479   1458 26 00 00      mov b, $0
2480   145B B0            cmp a, b
2481   145C FD 81         sgu ; > (unsigned)
2482   145E E4            pop a
2483   145F             ; END RELATIONAL
2484   145F C0 00 00      cmp b, 0
2485   1462 C6 AC 14      je _while39_exit
2486   1465             _while39_block:
2487   1465             ;; digits[i] = '0' + (num % 10); 
2488   1465 FA FC FF      lea d, [bp + -4] ; $digits
2489   1468 D7            push a
2490   1469 DA            push d
2491   146A FA FA FF      lea d, [bp + -6] ; $i
2492   146D 2A            mov b, [d]
2493   146E E7            pop d
2494   146F 5A            add d, b
2495   1470 E4            pop a
2496   1471 DA            push d
2497   1472 26 30 00      mov b, $30
2498   1475             ; START TERMS
2499   1475 D7            push a
2500   1476 11            mov a, b
2501   1477 FA 05 00      lea d, [bp + 5] ; $num
2502   147A 2A            mov b, [d]
2503   147B             ; START FACTORS
2504   147B D7            push a
2505   147C 11            mov a, b
2506   147D 26 0A 00      mov b, $a
2507   1480 AE            div a, b ; 
2508   1481 11            mov a, b
2509   1482 27            mov b, a
2510   1483 E4            pop a
2511   1484             ; END FACTORS
2512   1484 56            add b, a
2513   1485 E4            pop a
2514   1486             ; END TERMS
2515   1486 E7            pop d
2516   1487 FD 3E         mov [d], bl
2517   1489             ;; num = num / 10; 
2518   1489 FA 05 00      lea d, [bp + 5] ; $num
2519   148C DA            push d
2520   148D FA 05 00      lea d, [bp + 5] ; $num
2521   1490 2A            mov b, [d]
2522   1491             ; START FACTORS
2523   1491 D7            push a
2524   1492 11            mov a, b
2525   1493 26 0A 00      mov b, $a
2526   1496 AE            div a, b
2527   1497 27            mov b, a
2528   1498 E4            pop a
2529   1499             ; END FACTORS
2530   1499 E7            pop d
2531   149A FD 43         mov [d], b
2532   149C             ;; i++; 
2533   149C FA FA FF      lea d, [bp + -6] ; $i
2534   149F 2A            mov b, [d]
2535   14A0 D8            push b
2536   14A1 FD 77         inc b
2537   14A3 FA FA FF      lea d, [bp + -6] ; $i
2538   14A6 FD 43         mov [d], b
2539   14A8 E5            pop b
2540   14A9 0A 52 14      jmp _while39_cond
2541   14AC             _while39_exit:
2542   14AC             ;; while (i > 0) { 
2543   14AC             _while40_cond:
2544   14AC FA FA FF      lea d, [bp + -6] ; $i
2545   14AF 2A            mov b, [d]
2546   14B0             ; START RELATIONAL
2547   14B0 D7            push a
2548   14B1 11            mov a, b
2549   14B2 26 00 00      mov b, $0
2550   14B5 B0            cmp a, b
2551   14B6 FD 7F         sgt ; >
2552   14B8 E4            pop a
2553   14B9             ; END RELATIONAL
2554   14B9 C0 00 00      cmp b, 0
2555   14BC C6 E5 14      je _while40_exit
2556   14BF             _while40_block:
2557   14BF             ;; i--; 
2558   14BF FA FA FF      lea d, [bp + -6] ; $i
2559   14C2 2A            mov b, [d]
2560   14C3 D8            push b
2561   14C4 FD 7D         dec b
2562   14C6 FA FA FF      lea d, [bp + -6] ; $i
2563   14C9 FD 43         mov [d], b
2564   14CB E5            pop b
2565   14CC             ;; putchar(digits[i]); 
2566   14CC FA FC FF      lea d, [bp + -4] ; $digits
2567   14CF D7            push a
2568   14D0 DA            push d
2569   14D1 FA FA FF      lea d, [bp + -6] ; $i
2570   14D4 2A            mov b, [d]
2571   14D5 E7            pop d
2572   14D6 5A            add d, b
2573   14D7 E4            pop a
2574   14D8 32            mov bl, [d]
2575   14D9 A7 00         mov bh, 0
2576   14DB DD            push bl
2577   14DC 07 F0 14      call putchar
2578   14DF 51 01 00      add sp, 1
2579   14E2 0A AC 14      jmp _while40_cond
2580   14E5             _while40_exit:
2581   14E5 F9            leave
2582   14E6 09            ret
2583   14E7             
2584   14E7             date:
2585   14E7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2586   14EA             
2587   14EA             ; --- BEGIN INLINE ASM BLOCK
2588   14EA 19 00         mov al, 0 
2589   14EC 05 07         syscall sys_datetime
2590   14EE             ; --- END INLINE ASM BLOCK
2591   14EE             
2592   14EE F9            leave
2593   14EF 09            ret
2594   14F0             
2595   14F0             putchar:
2596   14F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2597   14F3             
2598   14F3             ; --- BEGIN INLINE ASM BLOCK
2599   14F3 FA 05 00      lea d, [bp + 5] ; $c
2600   14F6 1E            mov al, [d]
2601   14F7 23            mov ah, al
2602   14F8 07 81 16      call _putchar
2603   14FB             ; --- END INLINE ASM BLOCK
2604   14FB             
2605   14FB F9            leave
2606   14FC 09            ret
2607   14FD             
2608   14FD             getchar:
2609   14FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2610   1500             ; $c 
2611   1500 52 01 00      sub sp, 1
2612   1503             
2613   1503             ; --- BEGIN INLINE ASM BLOCK
2614   1503 07 7A 16      call getch
2615   1506 1A            mov al, ah
2616   1507 FA 00 00      lea d, [bp + 0] ; $c
2617   150A 3E            mov [d], al
2618   150B             ; --- END INLINE ASM BLOCK
2619   150B             
2620   150B             ;; return c; 
2621   150B FA 00 00      lea d, [bp + 0] ; $c
2622   150E 32            mov bl, [d]
2623   150F A7 00         mov bh, 0
2624   1511 F9            leave
2625   1512 09            ret
2626   1513             
2627   1513             scann:
2628   1513 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2629   1516             ; $m 
2630   1516 52 02 00      sub sp, 2
2631   1519             
2632   1519             ; --- BEGIN INLINE ASM BLOCK
2633   1519 07 C5 18      call scan_u16d
2634   151C FA FF FF      lea d, [bp + -1] ; $m
2635   151F 43            mov [d], a
2636   1520             ; --- END INLINE ASM BLOCK
2637   1520             
2638   1520             ;; return m; 
2639   1520 FA FF FF      lea d, [bp + -1] ; $m
2640   1523 2A            mov b, [d]
2641   1524 F9            leave
2642   1525 09            ret
2643   1526             
2644   1526             puts:
2645   1526 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2646   1529             
2647   1529             ; --- BEGIN INLINE ASM BLOCK
2648   1529 FA 05 00      lea d, [bp + 5] ; $s
2649   152C 15            mov a, [d]
2650   152D 3C            mov d, a
2651   152E 07 CB 17      call _puts
2652   1531 10 00 0A      mov a, $0A00
2653   1534 05 03         syscall sys_io
2654   1536             ; --- END INLINE ASM BLOCK
2655   1536             
2656   1536 F9            leave
2657   1537 09            ret
2658   1538             
2659   1538             print:
2660   1538 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2661   153B             
2662   153B             ; --- BEGIN INLINE ASM BLOCK
2663   153B FA 05 00      lea d, [bp + 5] ; $s
2664   153E FD 2A         mov d, [d]
2665   1540 07 CB 17      call _puts
2666   1543             ; --- END INLINE ASM BLOCK
2667   1543             
2668   1543 F9            leave
2669   1544 09            ret
2670   1545             
2671   1545             getparam:
2672   1545 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2673   1548             ; $data 
2674   1548 52 01 00      sub sp, 1
2675   154B             
2676   154B             ; --- BEGIN INLINE ASM BLOCK
2677   154B 19 04         mov al, 4
2678   154D FA 05 00      lea d, [bp + 5] ; $address
2679   1550 FD 2A         mov d, [d]
2680   1552 05 0C         syscall sys_system
2681   1554 FA 00 00      lea d, [bp + 0] ; $data
2682   1557 FD 3E         mov [d], bl
2683   1559             ; --- END INLINE ASM BLOCK
2684   1559             
2685   1559             ;; return data; 
2686   1559 FA 00 00      lea d, [bp + 0] ; $data
2687   155C 32            mov bl, [d]
2688   155D A7 00         mov bh, 0
2689   155F F9            leave
2690   1560 09            ret
2691   1561             
2692   1561             clear:
2693   1561 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2694   1564             ;; print("\033[2J\033[H"); 
2695   1564 26 63 19      mov b, _s2 ; "\033[2J\033[H"
2696   1567 FD AB         swp b
2697   1569 D8            push b
2698   156A 07 38 15      call print
2699   156D 51 02 00      add sp, 2
2700   1570 F9            leave
2701   1571 09            ret
2702   1572             
2703   1572             abs:
2704   1572 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2705   1575             ;; return i < 0 ? -i : i; 
2706   1575             _ternary41_cond:
2707   1575 FA 05 00      lea d, [bp + 5] ; $i
2708   1578 2A            mov b, [d]
2709   1579             ; START RELATIONAL
2710   1579 D7            push a
2711   157A 11            mov a, b
2712   157B 26 00 00      mov b, $0
2713   157E B0            cmp a, b
2714   157F FD 73         slt ; < (signed)
2715   1581 E4            pop a
2716   1582             ; END RELATIONAL
2717   1582 C0 00 00      cmp b, 0
2718   1585 C6 91 15      je _ternary41_false
2719   1588             _ternary41_true:
2720   1588 FA 05 00      lea d, [bp + 5] ; $i
2721   158B 2A            mov b, [d]
2722   158C FD 97         neg b
2723   158E 0A 95 15      jmp _ternary41_exit
2724   1591             _ternary41_false:
2725   1591 FA 05 00      lea d, [bp + 5] ; $i
2726   1594 2A            mov b, [d]
2727   1595             _ternary41_exit:
2728   1595 F9            leave
2729   1596 09            ret
2730   1597             
2731   1597             include_stdio_asm:
2732   1597 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2733   159A             
2734   159A             ; --- BEGIN INLINE ASM BLOCK
2735   159A             .include "lib/asm/stdio.asm"
0001+  159A             ;-----------------------------------------------------------------------------
0002+  159A             ; stdio.s
0003+  159A             ;-----------------------------------------------------------------------------
0004+  159A             .include "lib/asm/string.asm"
0001++ 159A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 159A             ; string.s
0003++ 159A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 159A             
0005++ 159A             
0006++ 159A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 159A             ; _strrev
0008++ 159A             ; reverse a string
0009++ 159A             ; D = string address
0010++ 159A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 159A             ; 01234
0012++ 159A             _strrev:
0013++ 159A 4B          	pusha
0014++ 159B 07 E1 15    	call _strlen	; length in C
0015++ 159E 12          	mov a, c
0016++ 159F AF 01 00    	cmp a, 1
0017++ 15A2 D0 BC 15    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 15A5 7D          	dec a
0019++ 15A6 FD 4E       	mov si, d	; beginning of string
0020++ 15A8 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 15AA 59          	add d, a	; end of string
0022++ 15AB 12          	mov a, c
0023++ 15AC FD 9B       	shr a		; divide by 2
0024++ 15AE 39          	mov c, a	; C now counts the steps
0025++ 15AF             _strrev_L0:
0026++ 15AF 32          	mov bl, [d]	; save load right-side char into BL
0027++ 15B0 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 15B1 3E          	mov [d], al	; store left char into right side
0029++ 15B2 1B          	mov al, bl
0030++ 15B3 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 15B4 7E          	dec c
0032++ 15B5 7F          	dec d
0033++ 15B6 C2 00 00    	cmp c, 0
0034++ 15B9 C7 AF 15    	jne _strrev_L0
0035++ 15BC             _strrev_end:
0036++ 15BC 4C          	popa
0037++ 15BD 09          	ret
0038++ 15BE             	
0039++ 15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 15BE             ; _strchr
0041++ 15BE             ; search string in D for char in AL
0042++ 15BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 15BE             _strchr:
0044++ 15BE             _strchr_L0:
0045++ 15BE 32          	mov bl, [d]
0046++ 15BF C1 00       	cmp bl, 0
0047++ 15C1 C6 CC 15    	je _strchr_end
0048++ 15C4 BA          	cmp al, bl
0049++ 15C5 C6 CC 15    	je _strchr_end
0050++ 15C8 79          	inc d
0051++ 15C9 0A BE 15    	jmp _strchr_L0
0052++ 15CC             _strchr_end:
0053++ 15CC 1B          	mov al, bl
0054++ 15CD 09          	ret
0055++ 15CE             
0056++ 15CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 15CE             ; _strstr
0058++ 15CE             ; find sub-string
0059++ 15CE             ; str1 in SI
0060++ 15CE             ; str2 in DI
0061++ 15CE             ; SI points to end of source string
0062++ 15CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 15CE             _strstr:
0064++ 15CE DB          	push al
0065++ 15CF DA          	push d
0066++ 15D0 E3          	push di
0067++ 15D1             _strstr_loop:
0068++ 15D1 F3          	cmpsb					; compare a byte of the strings
0069++ 15D2 C7 DD 15    	jne _strstr_ret
0070++ 15D5 FC 00 00    	lea d, [di + 0]
0071++ 15D8 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 15DA C7 D1 15    	jne _strstr_loop				; equal chars but not at end
0073++ 15DD             _strstr_ret:
0074++ 15DD F0          	pop di
0075++ 15DE E7          	pop d
0076++ 15DF E8          	pop al
0077++ 15E0 09          	ret
0078++ 15E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 15E1             ; length of null terminated string
0080++ 15E1             ; result in C
0081++ 15E1             ; pointer in D
0082++ 15E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 15E1             _strlen:
0084++ 15E1 DA          	push d
0085++ 15E2 38 00 00    	mov c, 0
0086++ 15E5             _strlen_L1:
0087++ 15E5 BD 00       	cmp byte [d], 0
0088++ 15E7 C6 EF 15    	je _strlen_ret
0089++ 15EA 79          	inc d
0090++ 15EB 78          	inc c
0091++ 15EC 0A E5 15    	jmp _strlen_L1
0092++ 15EF             _strlen_ret:
0093++ 15EF E7          	pop d
0094++ 15F0 09          	ret
0095++ 15F1             
0096++ 15F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 15F1             ; STRCMP
0098++ 15F1             ; compare two strings
0099++ 15F1             ; str1 in SI
0100++ 15F1             ; str2 in DI
0101++ 15F1             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 15F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 15F1             _strcmp:
0104++ 15F1 DB          	push al
0105++ 15F2 DA          	push d
0106++ 15F3 E3          	push di
0107++ 15F4 E2          	push si
0108++ 15F5             _strcmp_loop:
0109++ 15F5 F3          	cmpsb					; compare a byte of the strings
0110++ 15F6 C7 01 16    	jne _strcmp_ret
0111++ 15F9 FB FF FF    	lea d, [si +- 1]
0112++ 15FC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 15FE C7 F5 15    	jne _strcmp_loop				; equal chars but not at end
0114++ 1601             _strcmp_ret:
0115++ 1601 EF          	pop si
0116++ 1602 F0          	pop di
0117++ 1603 E7          	pop d
0118++ 1604 E8          	pop al
0119++ 1605 09          	ret
0120++ 1606             
0121++ 1606             
0122++ 1606             ; STRCPY
0123++ 1606             ; copy null terminated string from SI to DI
0124++ 1606             ; source in SI
0125++ 1606             ; destination in DI
0126++ 1606             _strcpy:
0127++ 1606 E2          	push si
0128++ 1607 E3          	push di
0129++ 1608 DB          	push al
0130++ 1609             _strcpy_L1:
0131++ 1609 F6          	lodsb
0132++ 160A F7          	stosb
0133++ 160B B9 00       	cmp al, 0
0134++ 160D C7 09 16    	jne _strcpy_L1
0135++ 1610             _strcpy_end:
0136++ 1610 E8          	pop al
0137++ 1611 F0          	pop di
0138++ 1612 EF          	pop si
0139++ 1613 09          	ret
0140++ 1614             
0141++ 1614             ; STRCAT
0142++ 1614             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1614             ; source in SI
0144++ 1614             ; destination in DI
0145++ 1614             _strcat:
0146++ 1614 E2          	push si
0147++ 1615 E3          	push di
0148++ 1616 D7          	push a
0149++ 1617 DA          	push d
0150++ 1618 50          	mov a, di
0151++ 1619 3C          	mov d, a
0152++ 161A             _strcat_goto_end_L1:
0153++ 161A BD 00       	cmp byte[d], 0
0154++ 161C C6 23 16    	je _strcat_start
0155++ 161F 79          	inc d
0156++ 1620 0A 1A 16    	jmp _strcat_goto_end_L1
0157++ 1623             _strcat_start:
0158++ 1623 FD 50       	mov di, d
0159++ 1625             _strcat_L1:
0160++ 1625 F6          	lodsb
0161++ 1626 F7          	stosb
0162++ 1627 B9 00       	cmp al, 0
0163++ 1629 C7 25 16    	jne _strcat_L1
0164++ 162C             _strcat_end:
0165++ 162C E7          	pop d
0166++ 162D E4          	pop a
0167++ 162E F0          	pop di
0168++ 162F EF          	pop si
0169++ 1630 09          	ret
0170++ 1631             
0171++ 1631             
0005+  1631             
0006+  1631             ;-----------------------------------------------------------------------------
0007+  1631             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1631             ; ASCII in BL
0009+  1631             ; result in AL
0010+  1631             ; ascii for F = 0100 0110
0011+  1631             ; ascii for 9 = 0011 1001
0012+  1631             ;-----------------------------------------------------------------------------
0013+  1631             hex_ascii_encode:
0014+  1631 1B            mov al, bl
0015+  1632 93 40         test al, $40        ; test if letter or number
0016+  1634 C7 3A 16      jnz hex_letter
0017+  1637 87 0F         and al, $0F        ; get number
0018+  1639 09            ret
0019+  163A             hex_letter:
0020+  163A 87 0F         and al, $0F        ; get letter
0021+  163C 6A 09         add al, 9
0022+  163E 09            ret
0023+  163F             
0024+  163F             ;-----------------------------------------------------------------------------
0025+  163F             ; ATOI
0026+  163F             ; 2 letter hex string in B
0027+  163F             ; 8bit integer returned in AL
0028+  163F             ;-----------------------------------------------------------------------------
0029+  163F             _atoi:
0030+  163F D8            push b
0031+  1640 07 31 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1643 30            mov bl, bh
0033+  1644 DB            push al          ; save a
0034+  1645 07 31 16      call hex_ascii_encode
0035+  1648 EA            pop bl  
0036+  1649 FD 9E 04      shl al, 4
0037+  164C 8C            or al, bl
0038+  164D E5            pop b
0039+  164E 09            ret  
0040+  164F             
0041+  164F             
0042+  164F             ;-----------------------------------------------------------------------------
0043+  164F             ; ITOA
0044+  164F             ; 8bit value in BL
0045+  164F             ; 2 byte ASCII result in A
0046+  164F             ;-----------------------------------------------------------------------------
0047+  164F             _itoa:
0048+  164F DA            push d
0049+  1650 D8            push b
0050+  1651 A7 00         mov bh, 0
0051+  1653 FD A4 04      shr bl, 4  
0052+  1656 74            mov d, b
0053+  1657 1F FF 18      mov al, [d + s_hex_digits]
0054+  165A 23            mov ah, al
0055+  165B               
0056+  165B E5            pop b
0057+  165C D8            push b
0058+  165D A7 00         mov bh, 0
0059+  165F FD 87 0F      and bl, $0F
0060+  1662 74            mov d, b
0061+  1663 1F FF 18      mov al, [d + s_hex_digits]
0062+  1666 E5            pop b
0063+  1667 E7            pop d
0064+  1668 09            ret
0065+  1669             
0066+  1669             ;-----------------------------------------------------------------------------
0067+  1669             ; HEX STRING TO BINARY
0068+  1669             ; di = destination address
0069+  1669             ; si = source
0070+  1669             ;-----------------------------------------------------------------------------
0071+  1669             _hex_to_int:
0072+  1669             _hex_to_int_L1:
0073+  1669 F6            lodsb          ; load from [SI] to AL
0074+  166A B9 00         cmp al, 0        ; check if ASCII 0
0075+  166C C6 79 16      jz _hex_to_int_ret
0076+  166F 36            mov bh, al
0077+  1670 F6            lodsb
0078+  1671 2F            mov bl, al
0079+  1672 07 3F 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1675 F7            stosb          ; store AL to [DI]
0081+  1676 0A 69 16      jmp _hex_to_int_L1
0082+  1679             _hex_to_int_ret:
0083+  1679 09            ret    
0084+  167A             
0085+  167A             ;-----------------------------------------------------------------------------
0086+  167A             ; GETCHAR
0087+  167A             ; char in ah
0088+  167A             ;-----------------------------------------------------------------------------
0089+  167A             getch:
0090+  167A DB            push al
0091+  167B             getch_retry:
0092+  167B 19 01         mov al, 1
0093+  167D 05 03         syscall sys_io      ; receive in AH
0094+  167F E8            pop al
0095+  1680 09            ret
0096+  1681             
0097+  1681             ;-----------------------------------------------------------------------------
0098+  1681             ; PUTCHAR
0099+  1681             ; char in ah
0100+  1681             ;-----------------------------------------------------------------------------
0101+  1681             _putchar:
0102+  1681 D7            push a
0103+  1682 19 00         mov al, 0
0104+  1684 05 03         syscall sys_io      ; char in AH
0105+  1686 E4            pop a
0106+  1687 09            ret
0107+  1688             
0108+  1688             ;-----------------------------------------------------------------------------
0109+  1688             ;; INPUT A STRING
0110+  1688             ;; terminates with null
0111+  1688             ;; pointer in D
0112+  1688             ;-----------------------------------------------------------------------------
0113+  1688             _gets:
0114+  1688 D7            push a
0115+  1689 DA            push d
0116+  168A             _gets_loop:
0117+  168A 19 01         mov al, 1
0118+  168C 05 03         syscall sys_io      ; receive in AH
0119+  168E B9 00         cmp al, 0        ; check error code (AL)
0120+  1690 C6 8A 16      je _gets_loop      ; if no char received, retry
0121+  1693             
0122+  1693 76 1B         cmp ah, 27
0123+  1695 C6 B6 16      je _gets_ansi_esc
0124+  1698 76 0A         cmp ah, $0A        ; LF
0125+  169A C6 21 17      je _gets_end
0126+  169D 76 0D         cmp ah, $0D        ; CR
0127+  169F C6 21 17      je _gets_end
0128+  16A2 76 5C         cmp ah, $5C        ; '\\'
0129+  16A4 C6 E2 16      je _gets_escape
0130+  16A7               
0131+  16A7 76 08         cmp ah, $08      ; check for backspace
0132+  16A9 C6 B2 16      je _gets_backspace
0133+  16AC             
0134+  16AC 1A            mov al, ah
0135+  16AD 3E            mov [d], al
0136+  16AE 79            inc d
0137+  16AF 0A 8A 16      jmp _gets_loop
0138+  16B2             _gets_backspace:
0139+  16B2 7F            dec d
0140+  16B3 0A 8A 16      jmp _gets_loop
0141+  16B6             _gets_ansi_esc:
0142+  16B6 19 01         mov al, 1
0143+  16B8 05 03         syscall sys_io        ; receive in AH without echo
0144+  16BA B9 00         cmp al, 0          ; check error code (AL)
0145+  16BC C6 B6 16      je _gets_ansi_esc    ; if no char received, retry
0146+  16BF 76 5B         cmp ah, '['
0147+  16C1 C7 8A 16      jne _gets_loop
0148+  16C4             _gets_ansi_esc_2:
0149+  16C4 19 01         mov al, 1
0150+  16C6 05 03         syscall sys_io          ; receive in AH without echo
0151+  16C8 B9 00         cmp al, 0            ; check error code (AL)
0152+  16CA C6 C4 16      je _gets_ansi_esc_2  ; if no char received, retry
0153+  16CD 76 44         cmp ah, 'D'
0154+  16CF C6 DA 16      je _gets_left_arrow
0155+  16D2 76 43         cmp ah, 'C'
0156+  16D4 C6 DE 16      je _gets_right_arrow
0157+  16D7 0A 8A 16      jmp _gets_loop
0158+  16DA             _gets_left_arrow:
0159+  16DA 7F            dec d
0160+  16DB 0A 8A 16      jmp _gets_loop
0161+  16DE             _gets_right_arrow:
0162+  16DE 79            inc d
0163+  16DF 0A 8A 16      jmp _gets_loop
0164+  16E2             _gets_escape:
0165+  16E2 19 01         mov al, 1
0166+  16E4 05 03         syscall sys_io      ; receive in AH
0167+  16E6 B9 00         cmp al, 0        ; check error code (AL)
0168+  16E8 C6 E2 16      je _gets_escape      ; if no char received, retry
0169+  16EB 76 6E         cmp ah, 'n'
0170+  16ED C6 0C 17      je _gets_LF
0171+  16F0 76 72         cmp ah, 'r'
0172+  16F2 C6 13 17      je _gets_CR
0173+  16F5 76 30         cmp ah, '0'
0174+  16F7 C6 1A 17      je _gets_NULL
0175+  16FA 76 5C         cmp ah, $5C  ; '\'
0176+  16FC C6 05 17      je _gets_slash
0177+  16FF 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1700 3E            mov [d], al
0179+  1701 79            inc d
0180+  1702 0A 8A 16      jmp _gets_loop
0181+  1705             _gets_slash:
0182+  1705 19 5C         mov al, $5C
0183+  1707 3E            mov [d], al
0184+  1708 79            inc d
0185+  1709 0A 8A 16      jmp _gets_loop
0186+  170C             _gets_LF:
0187+  170C 19 0A         mov al, $0A
0188+  170E 3E            mov [d], al
0189+  170F 79            inc d
0190+  1710 0A 8A 16      jmp _gets_loop
0191+  1713             _gets_CR:
0192+  1713 19 0D         mov al, $0D
0193+  1715 3E            mov [d], al
0194+  1716 79            inc d
0195+  1717 0A 8A 16      jmp _gets_loop
0196+  171A             _gets_NULL:
0197+  171A 19 00         mov al, $00
0198+  171C 3E            mov [d], al
0199+  171D 79            inc d
0200+  171E 0A 8A 16      jmp _gets_loop
0201+  1721             _gets_end:
0202+  1721 19 00         mov al, 0
0203+  1723 3E            mov [d], al        ; terminate string
0204+  1724 E7            pop d
0205+  1725 E4            pop a
0206+  1726 09            ret
0207+  1727             
0208+  1727             ;-----------------------------------------------------------------------------
0209+  1727             ;; INPUT TEXT
0210+  1727             ;; terminated with CTRL+D
0211+  1727             ;; pointer in D
0212+  1727             ;-----------------------------------------------------------------------------
0213+  1727             _gettxt:
0214+  1727 D7            push a
0215+  1728 DA            push d
0216+  1729             _gettxt_loop:
0217+  1729 19 01         mov al, 1
0218+  172B 05 03         syscall sys_io      ; receive in AH
0219+  172D B9 00         cmp al, 0        ; check error code (AL)
0220+  172F C6 29 17      je _gettxt_loop    ; if no char received, retry
0221+  1732 76 04         cmp ah, 4      ; EOT
0222+  1734 C6 72 17      je _gettxt_end
0223+  1737 76 08         cmp ah, $08      ; check for backspace
0224+  1739 C6 6E 17      je _gettxt_backspace
0225+  173C 76 5C         cmp ah, $5C        ; '\'
0226+  173E C6 47 17      je _gettxt_escape
0227+  1741 1A            mov al, ah
0228+  1742 3E            mov [d], al
0229+  1743 79            inc d
0230+  1744 0A 29 17      jmp _gettxt_loop
0231+  1747             _gettxt_escape:
0232+  1747 19 01         mov al, 1
0233+  1749 05 03         syscall sys_io      ; receive in AH
0234+  174B B9 00         cmp al, 0        ; check error code (AL)
0235+  174D C6 47 17      je _gettxt_escape    ; if no char received, retry
0236+  1750 76 6E         cmp ah, 'n'
0237+  1752 C6 60 17      je _gettxt_LF
0238+  1755 76 72         cmp ah, 'r'
0239+  1757 C6 67 17      je _gettxt_CR
0240+  175A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  175B 3E            mov [d], al
0242+  175C 79            inc d
0243+  175D 0A 29 17      jmp _gettxt_loop
0244+  1760             _gettxt_LF:
0245+  1760 19 0A         mov al, $0A
0246+  1762 3E            mov [d], al
0247+  1763 79            inc d
0248+  1764 0A 29 17      jmp _gettxt_loop
0249+  1767             _gettxt_CR:
0250+  1767 19 0D         mov al, $0D
0251+  1769 3E            mov [d], al
0252+  176A 79            inc d
0253+  176B 0A 29 17      jmp _gettxt_loop
0254+  176E             _gettxt_backspace:
0255+  176E 7F            dec d
0256+  176F 0A 29 17      jmp _gettxt_loop
0257+  1772             _gettxt_end:
0258+  1772 19 00         mov al, 0
0259+  1774 3E            mov [d], al        ; terminate string
0260+  1775 E7            pop d
0261+  1776 E4            pop a
0262+  1777 09            ret
0263+  1778             
0264+  1778             ;-----------------------------------------------------------------------------
0265+  1778             ; PRINT NEW LINE
0266+  1778             ;-----------------------------------------------------------------------------
0267+  1778             printnl:
0268+  1778 D7            push a
0269+  1779 10 00 0A      mov a, $0A00
0270+  177C 05 03         syscall sys_io
0271+  177E 10 00 0D      mov a, $0D00
0272+  1781 05 03         syscall sys_io
0273+  1783 E4            pop a
0274+  1784 09            ret
0275+  1785             
0276+  1785             ;-----------------------------------------------------------------------------
0277+  1785             ; _strtoint
0278+  1785             ; 4 digit hex string number in d
0279+  1785             ; integer returned in A
0280+  1785             ;-----------------------------------------------------------------------------
0281+  1785             _strtointx:
0282+  1785 D8            push b
0283+  1786 32            mov bl, [d]
0284+  1787 37            mov bh, bl
0285+  1788 33 01 00      mov bl, [d + 1]
0286+  178B 07 3F 16      call _atoi        ; convert to int in AL
0287+  178E 23            mov ah, al        ; move to AH
0288+  178F 33 02 00      mov bl, [d + 2]
0289+  1792 37            mov bh, bl
0290+  1793 33 03 00      mov bl, [d + 3]
0291+  1796 07 3F 16      call _atoi        ; convert to int in AL
0292+  1799 E5            pop b
0293+  179A 09            ret
0294+  179B             
0295+  179B             ;-----------------------------------------------------------------------------
0296+  179B             ; _strtoint
0297+  179B             ; 5 digit base10 string number in d
0298+  179B             ; integer returned in A
0299+  179B             ;-----------------------------------------------------------------------------
0300+  179B             _strtoint:
0301+  179B E2            push si
0302+  179C D8            push b
0303+  179D D9            push c
0304+  179E DA            push d
0305+  179F 07 E1 15      call _strlen      ; get string length in C
0306+  17A2 7E            dec c
0307+  17A3 FD 4E         mov si, d
0308+  17A5 12            mov a, c
0309+  17A6 FD 99         shl a
0310+  17A8 3B 17 19      mov d, table_power
0311+  17AB 59            add d, a
0312+  17AC 38 00 00      mov c, 0
0313+  17AF             _strtoint_L0:
0314+  17AF F6            lodsb      ; load ASCII to al
0315+  17B0 B9 00         cmp al, 0
0316+  17B2 C6 C5 17      je _strtoint_end
0317+  17B5 6F 30         sub al, $30    ; make into integer
0318+  17B7 22 00         mov ah, 0
0319+  17B9 2A            mov b, [d]
0320+  17BA AC            mul a, b      ; result in B since it fits in 16bits
0321+  17BB 11            mov a, b
0322+  17BC 28            mov b, c
0323+  17BD 54            add a, b
0324+  17BE 39            mov c, a
0325+  17BF 63 02 00      sub d, 2
0326+  17C2 0A AF 17      jmp _strtoint_L0
0327+  17C5             _strtoint_end:
0328+  17C5 12            mov a, c
0329+  17C6 E7            pop d
0330+  17C7 E6            pop c
0331+  17C8 E5            pop b
0332+  17C9 EF            pop si
0333+  17CA 09            ret
0334+  17CB             
0335+  17CB             ;-----------------------------------------------------------------------------
0336+  17CB             ; PRINT NULL TERMINATED STRING
0337+  17CB             ; pointer in D
0338+  17CB             ;-----------------------------------------------------------------------------
0339+  17CB             _puts:
0340+  17CB D7            push a
0341+  17CC DA            push d
0342+  17CD             _puts_L1:
0343+  17CD 1E            mov al, [d]
0344+  17CE B9 00         cmp al, 0
0345+  17D0 C6 DC 17      jz _puts_END
0346+  17D3 23            mov ah, al
0347+  17D4 19 00         mov al, 0
0348+  17D6 05 03         syscall sys_io
0349+  17D8 79            inc d
0350+  17D9 0A CD 17      jmp _puts_L1
0351+  17DC             _puts_END:
0352+  17DC E7            pop d
0353+  17DD E4            pop a
0354+  17DE 09            ret
0355+  17DF             
0356+  17DF             ;-----------------------------------------------------------------------------
0357+  17DF             ; PRINT N SIZE STRING
0358+  17DF             ; pointer in D
0359+  17DF             ; size in C
0360+  17DF             ;-----------------------------------------------------------------------------
0361+  17DF             _putsn:
0362+  17DF DB            push al
0363+  17E0 DA            push d
0364+  17E1 D9            push c
0365+  17E2             _putsn_L0:
0366+  17E2 1E            mov al, [d]
0367+  17E3 23            mov ah, al
0368+  17E4 19 00         mov al, 0
0369+  17E6 05 03         syscall sys_io
0370+  17E8 79            inc d
0371+  17E9 7E            dec c  
0372+  17EA C2 00 00      cmp c, 0
0373+  17ED C7 E2 17      jne _putsn_L0
0374+  17F0             _putsn_end:
0375+  17F0 E6            pop c
0376+  17F1 E7            pop d
0377+  17F2 E8            pop al
0378+  17F3 09            ret
0379+  17F4             
0380+  17F4             ;-----------------------------------------------------------------------------
0381+  17F4             ; print 16bit decimal number
0382+  17F4             ; input number in A
0383+  17F4             ;-----------------------------------------------------------------------------
0384+  17F4             print_u16d:
0385+  17F4 D7            push a
0386+  17F5 D8            push b
0387+  17F6 26 10 27      mov b, 10000
0388+  17F9 AE            div a, b      ; get 10000's coeff.
0389+  17FA 07 1C 18      call print_number
0390+  17FD 11            mov a, b
0391+  17FE 26 E8 03      mov b, 1000
0392+  1801 AE            div a, b      ; get 1000's coeff.
0393+  1802 07 1C 18      call print_number
0394+  1805 11            mov a, b
0395+  1806 26 64 00      mov b, 100
0396+  1809 AE            div a, b
0397+  180A 07 1C 18      call print_number
0398+  180D 11            mov a, b
0399+  180E 26 0A 00      mov b, 10
0400+  1811 AE            div a, b
0401+  1812 07 1C 18      call print_number
0402+  1815 1B            mov al, bl      ; 1's coeff in bl
0403+  1816 07 1C 18      call print_number
0404+  1819 E5            pop b
0405+  181A E4            pop a
0406+  181B 09            ret
0407+  181C             
0408+  181C             ;-----------------------------------------------------------------------------
0409+  181C             ; print AL
0410+  181C             ;-----------------------------------------------------------------------------
0411+  181C             print_number:
0412+  181C 6A 30         add al, $30
0413+  181E 23            mov ah, al
0414+  181F 07 81 16      call _putchar
0415+  1822 09            ret
0416+  1823             
0417+  1823             ;-----------------------------------------------------------------------------
0418+  1823             ; PRINT 16BIT HEX INTEGER
0419+  1823             ; integer value in reg B
0420+  1823             ;-----------------------------------------------------------------------------
0421+  1823             print_u16x:
0422+  1823 D7            push a
0423+  1824 D8            push b
0424+  1825 DD            push bl
0425+  1826 30            mov bl, bh
0426+  1827 07 4F 16      call _itoa        ; convert bh to char in A
0427+  182A 2F            mov bl, al        ; save al
0428+  182B 19 00         mov al, 0
0429+  182D 05 03         syscall sys_io        ; display AH
0430+  182F 24            mov ah, bl        ; retrieve al
0431+  1830 19 00         mov al, 0
0432+  1832 05 03         syscall sys_io        ; display AL
0433+  1834             
0434+  1834 EA            pop bl
0435+  1835 07 4F 16      call _itoa        ; convert bh to char in A
0436+  1838 2F            mov bl, al        ; save al
0437+  1839 19 00         mov al, 0
0438+  183B 05 03         syscall sys_io        ; display AH
0439+  183D 24            mov ah, bl        ; retrieve al
0440+  183E 19 00         mov al, 0
0441+  1840 05 03         syscall sys_io        ; display AL
0442+  1842             
0443+  1842 E5            pop b
0444+  1843 E4            pop a
0445+  1844 09            ret
0446+  1845             
0447+  1845             ;-----------------------------------------------------------------------------
0448+  1845             ; INPUT 16BIT HEX INTEGER
0449+  1845             ; read 16bit integer into A
0450+  1845             ;-----------------------------------------------------------------------------
0451+  1845             scan_u16x:
0452+  1845 F8 10 00      enter 16
0453+  1848 D8            push b
0454+  1849 DA            push d
0455+  184A             
0456+  184A FA F1 FF      lea d, [bp + -15]
0457+  184D 07 88 16      call _gets        ; get number
0458+  1850             
0459+  1850 32            mov bl, [d]
0460+  1851 37            mov bh, bl
0461+  1852 33 01 00      mov bl, [d + 1]
0462+  1855 07 3F 16      call _atoi        ; convert to int in AL
0463+  1858 23            mov ah, al        ; move to AH
0464+  1859             
0465+  1859 33 02 00      mov bl, [d + 2]
0466+  185C 37            mov bh, bl
0467+  185D 33 03 00      mov bl, [d + 3]
0468+  1860 07 3F 16      call _atoi        ; convert to int in AL
0469+  1863             
0470+  1863 E7            pop d
0471+  1864 E5            pop b
0472+  1865 F9            leave
0473+  1866 09            ret
0474+  1867             
0475+  1867             ;-----------------------------------------------------------------------------
0476+  1867             ; PRINT 8bit HEX INTEGER
0477+  1867             ; integer value in reg bl
0478+  1867             ;-----------------------------------------------------------------------------
0479+  1867             print_u8x:
0480+  1867 D7            push a
0481+  1868 DD            push bl
0482+  1869             
0483+  1869 07 4F 16      call _itoa        ; convert bl to char in A
0484+  186C 2F            mov bl, al        ; save al
0485+  186D 19 00         mov al, 0
0486+  186F 05 03         syscall sys_io        ; display AH
0487+  1871 24            mov ah, bl        ; retrieve al
0488+  1872 19 00         mov al, 0
0489+  1874 05 03         syscall sys_io        ; display AL
0490+  1876             
0491+  1876 EA            pop bl
0492+  1877 E4            pop a
0493+  1878 09            ret
0494+  1879             
0495+  1879             ;-----------------------------------------------------------------------------
0496+  1879             ; print 8bit decimal unsigned number
0497+  1879             ; input number in AL
0498+  1879             ;-----------------------------------------------------------------------------
0499+  1879             print_u8d:
0500+  1879 D7            push a
0501+  187A D8            push b
0502+  187B             
0503+  187B 22 00         mov ah, 0
0504+  187D 26 64 00      mov b, 100
0505+  1880 AE            div a, b
0506+  1881 D8            push b      ; save remainder
0507+  1882 B9 00         cmp al, 0
0508+  1884 C6 8E 18      je skip100
0509+  1887 6A 30         add al, $30
0510+  1889 23            mov ah, al
0511+  188A 19 00         mov al, 0
0512+  188C 05 03         syscall sys_io  ; print coeff
0513+  188E             skip100:
0514+  188E E4            pop a
0515+  188F 22 00         mov ah, 0
0516+  1891 26 0A 00      mov b, 10
0517+  1894 AE            div a, b
0518+  1895 D8            push b      ; save remainder
0519+  1896 B9 00         cmp al, 0
0520+  1898 C6 A2 18      je skip10
0521+  189B 6A 30         add al, $30
0522+  189D 23            mov ah, al
0523+  189E 19 00         mov al, 0
0524+  18A0 05 03         syscall sys_io  ; print coeff
0525+  18A2             skip10:
0526+  18A2 E4            pop a
0527+  18A3 1B            mov al, bl
0528+  18A4 6A 30         add al, $30
0529+  18A6 23            mov ah, al
0530+  18A7 19 00         mov al, 0
0531+  18A9 05 03         syscall sys_io  ; print coeff
0532+  18AB E5            pop b
0533+  18AC E4            pop a
0534+  18AD 09            ret
0535+  18AE             
0536+  18AE             ;-----------------------------------------------------------------------------
0537+  18AE             ; INPUT 8BIT HEX INTEGER
0538+  18AE             ; read 8bit integer into AL
0539+  18AE             ;-----------------------------------------------------------------------------
0540+  18AE             scan_u8x:
0541+  18AE F8 04 00      enter 4
0542+  18B1 D8            push b
0543+  18B2 DA            push d
0544+  18B3             
0545+  18B3 FA FD FF      lea d, [bp + -3]
0546+  18B6 07 88 16      call _gets        ; get number
0547+  18B9             
0548+  18B9 32            mov bl, [d]
0549+  18BA 37            mov bh, bl
0550+  18BB 33 01 00      mov bl, [d + 1]
0551+  18BE 07 3F 16      call _atoi        ; convert to int in AL
0552+  18C1             
0553+  18C1 E7            pop d
0554+  18C2 E5            pop b
0555+  18C3 F9            leave
0556+  18C4 09            ret
0557+  18C5             
0558+  18C5             ;-----------------------------------------------------------------------------
0559+  18C5             ; input decimal number
0560+  18C5             ; result in A
0561+  18C5             ; 655'\0'
0562+  18C5             ; low--------high
0563+  18C5             ;-----------------------------------------------------------------------------
0564+  18C5             scan_u16d:
0565+  18C5 F8 08 00      enter 8
0566+  18C8 E2            push si
0567+  18C9 D8            push b
0568+  18CA D9            push c
0569+  18CB DA            push d
0570+  18CC FA F9 FF      lea d, [bp +- 7]
0571+  18CF 07 88 16      call _gets
0572+  18D2 07 E1 15      call _strlen      ; get string length in C
0573+  18D5 7E            dec c
0574+  18D6 FD 4E         mov si, d
0575+  18D8 12            mov a, c
0576+  18D9 FD 99         shl a
0577+  18DB 3B 17 19      mov d, table_power
0578+  18DE 59            add d, a
0579+  18DF 38 00 00      mov c, 0
0580+  18E2             mul_loop:
0581+  18E2 F6            lodsb      ; load ASCII to al
0582+  18E3 B9 00         cmp al, 0
0583+  18E5 C6 F8 18      je mul_exit
0584+  18E8 6F 30         sub al, $30    ; make into integer
0585+  18EA 22 00         mov ah, 0
0586+  18EC 2A            mov b, [d]
0587+  18ED AC            mul a, b      ; result in B since it fits in 16bits
0588+  18EE 11            mov a, b
0589+  18EF 28            mov b, c
0590+  18F0 54            add a, b
0591+  18F1 39            mov c, a
0592+  18F2 63 02 00      sub d, 2
0593+  18F5 0A E2 18      jmp mul_loop
0594+  18F8             mul_exit:
0595+  18F8 12            mov a, c
0596+  18F9 E7            pop d
0597+  18FA E6            pop c
0598+  18FB E5            pop b
0599+  18FC EF            pop si
0600+  18FD F9            leave
0601+  18FE 09            ret
0602+  18FF             
0603+  18FF 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1903 34 35 36 37 
0603+  1907 38 39 41 42 
0603+  190B 43 44 45 46 
0604+  190F 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1913 1B 5B 48 00 
0605+  1917             
0606+  1917             table_power:
0607+  1917 01 00         .dw 1
0608+  1919 0A 00         .dw 10
0609+  191B 64 00         .dw 100
0610+  191D E8 03         .dw 1000
0611+  191F 10 27         .dw 100002736   1921             ; --- END INLINE ASM BLOCK
2737   1921             
2738   1921 F9            leave
2739   1922 09            ret
2740   1923             ; --- END TEXT BLOCK
2741   1923             
2742   1923             ; --- BEGIN DATA BLOCK
2743   1923 00 00       _a: .fill 2, 0
2744   1925 00 00       _b: .fill 2, 0
2745   1927 55 6E 65 78 _s0: .db "Unexpected format in printf.", 0
2745   192B 70 65 63 74 
2745   192F 65 64 20 66 
2745   1933 6F 72 6D 61 
2745   1937 74 20 69 6E 
2745   193B 20 70 72 69 
2745   193F 6E 74 66 2E 
2745   1943 00 
2746   1944 45 72 72 6F _s1: .db "Error: Unknown argument type.\n", 0
2746   1948 72 3A 20 55 
2746   194C 6E 6B 6E 6F 
2746   1950 77 6E 20 61 
2746   1954 72 67 75 6D 
2746   1958 65 6E 74 20 
2746   195C 74 79 70 65 
2746   1960 2E 0A 00 
2747   1963 1B 5B 32 4A _s2: .db "\033[2J\033[H", 0
2747   1967 1B 5B 48 00 
2748   196B             
2749   196B 6D 19       _heap_top: .dw _heap
2750   196D 00          _heap: .db 0
2751   196E             ; --- END DATA BLOCK
2752   196E             
2753   196E             .end
tasm: Number of errors = 1
