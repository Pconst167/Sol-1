0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; u.bytes.lsb = 0xCD; 
0011   0408 3B 29 0D      mov d, _u_data ; $u
0012   040B 58 00 00      add d, 0
0013   040E 58 00 00      add d, 0
0014   0411 DA            push d
0015   0412 FD 2E CD 00   mov32 cb, $000000cd
0015   0416 00 00 
0016   0418 E7            pop d
0017   0419 FD 3E         mov [d], bl
0018   041B             ; u.bytes.msb = 0xAB; 
0019   041B 3B 29 0D      mov d, _u_data ; $u
0020   041E 58 00 00      add d, 0
0021   0421 58 01 00      add d, 1
0022   0424 DA            push d
0023   0425 FD 2E AB 00   mov32 cb, $000000ab
0023   0429 00 00 
0024   042B E7            pop d
0025   042C FD 3E         mov [d], bl
0026   042E             ; printf("\nc1: %x, c2: %x\n", u.bytes.msb, u.bytes.lsb); 
0027   042E             ; --- START FUNCTION CALL
0028   042E 3B 29 0D      mov d, _u_data ; $u
0029   0431 58 00 00      add d, 0
0030   0434 58 00 00      add d, 0
0031   0437 32            mov bl, [d]
0032   0438 A7 00         mov bh, 0
0033   043A 38 00 00      mov c, 0
0034   043D FD AA         swp a
0035   043F D8            push b
0036   0440 3B 29 0D      mov d, _u_data ; $u
0037   0443 58 00 00      add d, 0
0038   0446 58 01 00      add d, 1
0039   0449 32            mov bl, [d]
0040   044A A7 00         mov bh, 0
0041   044C 38 00 00      mov c, 0
0042   044F FD AA         swp a
0043   0451 D8            push b
0044   0452 26 2B 0D      mov b, _s0 ; "\nc1: %x, c2: %x\n"
0045   0455 FD AB         swp b
0046   0457 D8            push b
0047   0458 07 7A 04      call printf
0048   045B 51 04 00      add sp, 4
0049   045E             ; --- END FUNCTION CALL
0050   045E             ; printf("\ninteger val: %x\n", u.i); 
0051   045E             ; --- START FUNCTION CALL
0052   045E 3B 29 0D      mov d, _u_data ; $u
0053   0461 58 00 00      add d, 0
0054   0464 2A            mov b, [d]
0055   0465 38 00 00      mov c, 0
0056   0468 FD AB         swp b
0057   046A D8            push b
0058   046B 26 3C 0D      mov b, _s1 ; "\ninteger val: %x\n"
0059   046E FD AB         swp b
0060   0470 D8            push b
0061   0471 07 7A 04      call printf
0062   0474 51 04 00      add sp, 4
0063   0477             ; --- END FUNCTION CALL
0064   0477             ; return; 
0065   0477 F9            leave
0066   0478 05 0B         syscall sys_terminate_proc
0067   047A             
0068   047A             printf:
0069   047A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0070   047D             ; char *p, *format_p; 
0071   047D 52 02 00      sub sp, 2
0072   0480 52 02 00      sub sp, 2
0073   0483             ; format_p = format; 
0074   0483 FA FD FF      lea d, [bp + -3] ; $format_p
0075   0486 DA            push d
0076   0487 FA 05 00      lea d, [bp + 5] ; $format
0077   048A 2A            mov b, [d]
0078   048B 38 00 00      mov c, 0
0079   048E E7            pop d
0080   048F FD 43         mov [d], b
0081   0491             ; p = &format + 2; 
0082   0491 FA FF FF      lea d, [bp + -1] ; $p
0083   0494 DA            push d
0084   0495 FA 05 00      lea d, [bp + 5] ; $format
0085   0498 2D            mov b, d
0086   0499             ; --- START TERMS
0087   0499 D7            push a
0088   049A 11            mov a, b
0089   049B FD 2E 02 00   mov32 cb, $00000002
0089   049F 00 00 
0090   04A1 56            add b, a
0091   04A2 E4            pop a
0092   04A3             ; --- END TERMS
0093   04A3 E7            pop d
0094   04A4 FD 43         mov [d], b
0095   04A6             ; for(;;){ 
0096   04A6             _for1_init:
0097   04A6             _for1_cond:
0098   04A6             _for1_block:
0099   04A6             ; if(!*format_p) break; 
0100   04A6             _if2_cond:
0101   04A6 FA FD FF      lea d, [bp + -3] ; $format_p
0102   04A9 2A            mov b, [d]
0103   04AA 38 00 00      mov c, 0
0104   04AD 74            mov d, b
0105   04AE 32            mov bl, [d]
0106   04AF A7 00         mov bh, 0
0107   04B1 38 00 00      mov c, 0
0108   04B4 C0 00 00      cmp b, 0
0109   04B7 FD 71         seq ; !
0110   04B9 C0 00 00      cmp b, 0
0111   04BC C6 C5 04      je _if2_else
0112   04BF             _if2_TRUE:
0113   04BF             ; break; 
0114   04BF 0A 75 07      jmp _for1_exit ; for break
0115   04C2 0A 72 07      jmp _if2_exit
0116   04C5             _if2_else:
0117   04C5             ; if(*format_p == '%'){ 
0118   04C5             _if3_cond:
0119   04C5 FA FD FF      lea d, [bp + -3] ; $format_p
0120   04C8 2A            mov b, [d]
0121   04C9 38 00 00      mov c, 0
0122   04CC 74            mov d, b
0123   04CD 32            mov bl, [d]
0124   04CE A7 00         mov bh, 0
0125   04D0 38 00 00      mov c, 0
0126   04D3             ; --- START RELATIONAL
0127   04D3 D7            push a
0128   04D4 11            mov a, b
0129   04D5 FD 2E 25 00   mov32 cb, $00000025
0129   04D9 00 00 
0130   04DB B0            cmp a, b
0131   04DC FD 71         seq ; ==
0132   04DE E4            pop a
0133   04DF             ; --- END RELATIONAL
0134   04DF C0 00 00      cmp b, 0
0135   04E2 C6 4D 07      je _if3_else
0136   04E5             _if3_TRUE:
0137   04E5             ; format_p++; 
0138   04E5 FA FD FF      lea d, [bp + -3] ; $format_p
0139   04E8 2A            mov b, [d]
0140   04E9 38 00 00      mov c, 0
0141   04EC FD 77         inc b
0142   04EE FA FD FF      lea d, [bp + -3] ; $format_p
0143   04F1 FD 43         mov [d], b
0144   04F3 FD 7D         dec b
0145   04F5             ; switch(*format_p){ 
0146   04F5             _switch4_expr:
0147   04F5 FA FD FF      lea d, [bp + -3] ; $format_p
0148   04F8 2A            mov b, [d]
0149   04F9 38 00 00      mov c, 0
0150   04FC 74            mov d, b
0151   04FD 32            mov bl, [d]
0152   04FE A7 00         mov bh, 0
0153   0500 38 00 00      mov c, 0
0154   0503             _switch4_comparisons:
0155   0503 C1 6C         cmp bl, $6c
0156   0505 C6 31 05      je _switch4_case0
0157   0508 C1 4C         cmp bl, $4c
0158   050A C6 31 05      je _switch4_case1
0159   050D C1 64         cmp bl, $64
0160   050F C6 41 06      je _switch4_case2
0161   0512 C1 69         cmp bl, $69
0162   0514 C6 41 06      je _switch4_case3
0163   0517 C1 75         cmp bl, $75
0164   0519 C6 71 06      je _switch4_case4
0165   051C C1 78         cmp bl, $78
0166   051E C6 A1 06      je _switch4_case5
0167   0521 C1 63         cmp bl, $63
0168   0523 C6 D1 06      je _switch4_case6
0169   0526 C1 73         cmp bl, $73
0170   0528 C6 01 07      je _switch4_case7
0171   052B 0A 2E 07      jmp _switch4_default
0172   052E 0A 3A 07      jmp _switch4_exit
0173   0531             _switch4_case0:
0174   0531             _switch4_case1:
0175   0531             ; format_p++; 
0176   0531 FA FD FF      lea d, [bp + -3] ; $format_p
0177   0534 2A            mov b, [d]
0178   0535 38 00 00      mov c, 0
0179   0538 FD 77         inc b
0180   053A FA FD FF      lea d, [bp + -3] ; $format_p
0181   053D FD 43         mov [d], b
0182   053F FD 7D         dec b
0183   0541             ; if(*format_p == 'd' || *format_p == 'i') 
0184   0541             _if5_cond:
0185   0541 FA FD FF      lea d, [bp + -3] ; $format_p
0186   0544 2A            mov b, [d]
0187   0545 38 00 00      mov c, 0
0188   0548 74            mov d, b
0189   0549 32            mov bl, [d]
0190   054A A7 00         mov bh, 0
0191   054C 38 00 00      mov c, 0
0192   054F             ; --- START RELATIONAL
0193   054F D7            push a
0194   0550 11            mov a, b
0195   0551 FD 2E 64 00   mov32 cb, $00000064
0195   0555 00 00 
0196   0557 B0            cmp a, b
0197   0558 FD 71         seq ; ==
0198   055A E4            pop a
0199   055B             ; --- END RELATIONAL
0200   055B             ; --- START LOGICAL OR
0201   055B D7            push a
0202   055C 11            mov a, b
0203   055D FA FD FF      lea d, [bp + -3] ; $format_p
0204   0560 2A            mov b, [d]
0205   0561 38 00 00      mov c, 0
0206   0564 74            mov d, b
0207   0565 32            mov bl, [d]
0208   0566 A7 00         mov bh, 0
0209   0568 38 00 00      mov c, 0
0210   056B             ; --- START RELATIONAL
0211   056B D7            push a
0212   056C 11            mov a, b
0213   056D FD 2E 69 00   mov32 cb, $00000069
0213   0571 00 00 
0214   0573 B0            cmp a, b
0215   0574 FD 71         seq ; ==
0216   0576 E4            pop a
0217   0577             ; --- END RELATIONAL
0218   0577 FD A8         sor a, b ; ||
0219   0579 E4            pop a
0220   057A             ; --- END LOGICAL OR
0221   057A C0 00 00      cmp b, 0
0222   057D C6 9E 05      je _if5_else
0223   0580             _if5_TRUE:
0224   0580             ; print_signed_long(*(long *)p); 
0225   0580             ; --- START FUNCTION CALL
0226   0580 FA FF FF      lea d, [bp + -1] ; $p
0227   0583 2A            mov b, [d]
0228   0584 38 00 00      mov c, 0
0229   0587 74            mov d, b
0230   0588 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0231   058B FD 39         mov c, b ; And place it into C
0232   058D 2A            mov b, [d] ; Lower Word in B
0233   058E 12            mov a, c
0234   058F FD AA         swp a
0235   0591 D7            push a
0236   0592 FD AB         swp b
0237   0594 D8            push b
0238   0595 07 77 07      call print_signed_long
0239   0598 51 04 00      add sp, 4
0240   059B             ; --- END FUNCTION CALL
0241   059B 0A 26 06      jmp _if5_exit
0242   059E             _if5_else:
0243   059E             ; if(*format_p == 'u') 
0244   059E             _if6_cond:
0245   059E FA FD FF      lea d, [bp + -3] ; $format_p
0246   05A1 2A            mov b, [d]
0247   05A2 38 00 00      mov c, 0
0248   05A5 74            mov d, b
0249   05A6 32            mov bl, [d]
0250   05A7 A7 00         mov bh, 0
0251   05A9 38 00 00      mov c, 0
0252   05AC             ; --- START RELATIONAL
0253   05AC D7            push a
0254   05AD 11            mov a, b
0255   05AE FD 2E 75 00   mov32 cb, $00000075
0255   05B2 00 00 
0256   05B4 B0            cmp a, b
0257   05B5 FD 71         seq ; ==
0258   05B7 E4            pop a
0259   05B8             ; --- END RELATIONAL
0260   05B8 C0 00 00      cmp b, 0
0261   05BB C6 DC 05      je _if6_else
0262   05BE             _if6_TRUE:
0263   05BE             ; print_unsigned_long(*(unsigned long *)p); 
0264   05BE             ; --- START FUNCTION CALL
0265   05BE FA FF FF      lea d, [bp + -1] ; $p
0266   05C1 2A            mov b, [d]
0267   05C2 38 00 00      mov c, 0
0268   05C5 74            mov d, b
0269   05C6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0270   05C9 FD 39         mov c, b ; And place it into C
0271   05CB 2A            mov b, [d] ; Lower Word in B
0272   05CC 12            mov a, c
0273   05CD FD AA         swp a
0274   05CF D7            push a
0275   05D0 FD AB         swp b
0276   05D2 D8            push b
0277   05D3 07 F4 08      call print_unsigned_long
0278   05D6 51 04 00      add sp, 4
0279   05D9             ; --- END FUNCTION CALL
0280   05D9 0A 26 06      jmp _if6_exit
0281   05DC             _if6_else:
0282   05DC             ; if(*format_p == 'x') 
0283   05DC             _if7_cond:
0284   05DC FA FD FF      lea d, [bp + -3] ; $format_p
0285   05DF 2A            mov b, [d]
0286   05E0 38 00 00      mov c, 0
0287   05E3 74            mov d, b
0288   05E4 32            mov bl, [d]
0289   05E5 A7 00         mov bh, 0
0290   05E7 38 00 00      mov c, 0
0291   05EA             ; --- START RELATIONAL
0292   05EA D7            push a
0293   05EB 11            mov a, b
0294   05EC FD 2E 78 00   mov32 cb, $00000078
0294   05F0 00 00 
0295   05F2 B0            cmp a, b
0296   05F3 FD 71         seq ; ==
0297   05F5 E4            pop a
0298   05F6             ; --- END RELATIONAL
0299   05F6 C0 00 00      cmp b, 0
0300   05F9 C6 1A 06      je _if7_else
0301   05FC             _if7_TRUE:
0302   05FC             ; printx32(*(long int *)p); 
0303   05FC             ; --- START FUNCTION CALL
0304   05FC FA FF FF      lea d, [bp + -1] ; $p
0305   05FF 2A            mov b, [d]
0306   0600 38 00 00      mov c, 0
0307   0603 74            mov d, b
0308   0604 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0309   0607 FD 39         mov c, b ; And place it into C
0310   0609 2A            mov b, [d] ; Lower Word in B
0311   060A 12            mov a, c
0312   060B FD AA         swp a
0313   060D D7            push a
0314   060E FD AB         swp b
0315   0610 D8            push b
0316   0611 07 10 0A      call printx32
0317   0614 51 04 00      add sp, 4
0318   0617             ; --- END FUNCTION CALL
0319   0617 0A 26 06      jmp _if7_exit
0320   061A             _if7_else:
0321   061A             ; err("Unexpected format in printf."); 
0322   061A             ; --- START FUNCTION CALL
0323   061A 26 4E 0D      mov b, _s2 ; "Unexpected format in printf."
0324   061D FD AB         swp b
0325   061F D8            push b
0326   0620 07 70 0A      call err
0327   0623 51 02 00      add sp, 2
0328   0626             ; --- END FUNCTION CALL
0329   0626             _if7_exit:
0330   0626             _if6_exit:
0331   0626             _if5_exit:
0332   0626             ; p = p + 4; 
0333   0626 FA FF FF      lea d, [bp + -1] ; $p
0334   0629 DA            push d
0335   062A FA FF FF      lea d, [bp + -1] ; $p
0336   062D 2A            mov b, [d]
0337   062E 38 00 00      mov c, 0
0338   0631             ; --- START TERMS
0339   0631 D7            push a
0340   0632 11            mov a, b
0341   0633 FD 2E 04 00   mov32 cb, $00000004
0341   0637 00 00 
0342   0639 56            add b, a
0343   063A E4            pop a
0344   063B             ; --- END TERMS
0345   063B E7            pop d
0346   063C FD 43         mov [d], b
0347   063E             ; break; 
0348   063E 0A 3A 07      jmp _switch4_exit ; case break
0349   0641             _switch4_case2:
0350   0641             _switch4_case3:
0351   0641             ; print_signed(*(int*)p); 
0352   0641             ; --- START FUNCTION CALL
0353   0641 FA FF FF      lea d, [bp + -1] ; $p
0354   0644 2A            mov b, [d]
0355   0645 38 00 00      mov c, 0
0356   0648 74            mov d, b
0357   0649 2A            mov b, [d]
0358   064A 38 00 00      mov c, 0
0359   064D FD AB         swp b
0360   064F D8            push b
0361   0650 07 9E 0A      call print_signed
0362   0653 51 02 00      add sp, 2
0363   0656             ; --- END FUNCTION CALL
0364   0656             ; p = p + 2; 
0365   0656 FA FF FF      lea d, [bp + -1] ; $p
0366   0659 DA            push d
0367   065A FA FF FF      lea d, [bp + -1] ; $p
0368   065D 2A            mov b, [d]
0369   065E 38 00 00      mov c, 0
0370   0661             ; --- START TERMS
0371   0661 D7            push a
0372   0662 11            mov a, b
0373   0663 FD 2E 02 00   mov32 cb, $00000002
0373   0667 00 00 
0374   0669 56            add b, a
0375   066A E4            pop a
0376   066B             ; --- END TERMS
0377   066B E7            pop d
0378   066C FD 43         mov [d], b
0379   066E             ; break; 
0380   066E 0A 3A 07      jmp _switch4_exit ; case break
0381   0671             _switch4_case4:
0382   0671             ; print_unsigned(*(unsigned int*)p); 
0383   0671             ; --- START FUNCTION CALL
0384   0671 FA FF FF      lea d, [bp + -1] ; $p
0385   0674 2A            mov b, [d]
0386   0675 38 00 00      mov c, 0
0387   0678 74            mov d, b
0388   0679 2A            mov b, [d]
0389   067A 38 00 00      mov c, 0
0390   067D FD AB         swp b
0391   067F D8            push b
0392   0680 07 D7 0B      call print_unsigned
0393   0683 51 02 00      add sp, 2
0394   0686             ; --- END FUNCTION CALL
0395   0686             ; p = p + 2; 
0396   0686 FA FF FF      lea d, [bp + -1] ; $p
0397   0689 DA            push d
0398   068A FA FF FF      lea d, [bp + -1] ; $p
0399   068D 2A            mov b, [d]
0400   068E 38 00 00      mov c, 0
0401   0691             ; --- START TERMS
0402   0691 D7            push a
0403   0692 11            mov a, b
0404   0693 FD 2E 02 00   mov32 cb, $00000002
0404   0697 00 00 
0405   0699 56            add b, a
0406   069A E4            pop a
0407   069B             ; --- END TERMS
0408   069B E7            pop d
0409   069C FD 43         mov [d], b
0410   069E             ; break; 
0411   069E 0A 3A 07      jmp _switch4_exit ; case break
0412   06A1             _switch4_case5:
0413   06A1             ; printx16(*(int*)p); 
0414   06A1             ; --- START FUNCTION CALL
0415   06A1 FA FF FF      lea d, [bp + -1] ; $p
0416   06A4 2A            mov b, [d]
0417   06A5 38 00 00      mov c, 0
0418   06A8 74            mov d, b
0419   06A9 2A            mov b, [d]
0420   06AA 38 00 00      mov c, 0
0421   06AD FD AB         swp b
0422   06AF D8            push b
0423   06B0 07 D7 0C      call printx16
0424   06B3 51 02 00      add sp, 2
0425   06B6             ; --- END FUNCTION CALL
0426   06B6             ; p = p + 2; 
0427   06B6 FA FF FF      lea d, [bp + -1] ; $p
0428   06B9 DA            push d
0429   06BA FA FF FF      lea d, [bp + -1] ; $p
0430   06BD 2A            mov b, [d]
0431   06BE 38 00 00      mov c, 0
0432   06C1             ; --- START TERMS
0433   06C1 D7            push a
0434   06C2 11            mov a, b
0435   06C3 FD 2E 02 00   mov32 cb, $00000002
0435   06C7 00 00 
0436   06C9 56            add b, a
0437   06CA E4            pop a
0438   06CB             ; --- END TERMS
0439   06CB E7            pop d
0440   06CC FD 43         mov [d], b
0441   06CE             ; break; 
0442   06CE 0A 3A 07      jmp _switch4_exit ; case break
0443   06D1             _switch4_case6:
0444   06D1             ; putchar(*(char*)p); 
0445   06D1             ; --- START FUNCTION CALL
0446   06D1 FA FF FF      lea d, [bp + -1] ; $p
0447   06D4 2A            mov b, [d]
0448   06D5 38 00 00      mov c, 0
0449   06D8 74            mov d, b
0450   06D9 32            mov bl, [d]
0451   06DA A7 00         mov bh, 0
0452   06DC 38 00 00      mov c, 0
0453   06DF DD            push bl
0454   06E0 07 E6 08      call putchar
0455   06E3 51 01 00      add sp, 1
0456   06E6             ; --- END FUNCTION CALL
0457   06E6             ; p = p + 1; 
0458   06E6 FA FF FF      lea d, [bp + -1] ; $p
0459   06E9 DA            push d
0460   06EA FA FF FF      lea d, [bp + -1] ; $p
0461   06ED 2A            mov b, [d]
0462   06EE 38 00 00      mov c, 0
0463   06F1             ; --- START TERMS
0464   06F1 D7            push a
0465   06F2 11            mov a, b
0466   06F3 FD 2E 01 00   mov32 cb, $00000001
0466   06F7 00 00 
0467   06F9 56            add b, a
0468   06FA E4            pop a
0469   06FB             ; --- END TERMS
0470   06FB E7            pop d
0471   06FC FD 43         mov [d], b
0472   06FE             ; break; 
0473   06FE 0A 3A 07      jmp _switch4_exit ; case break
0474   0701             _switch4_case7:
0475   0701             ; print(*(char**)p); 
0476   0701             ; --- START FUNCTION CALL
0477   0701 FA FF FF      lea d, [bp + -1] ; $p
0478   0704 2A            mov b, [d]
0479   0705 38 00 00      mov c, 0
0480   0708 74            mov d, b
0481   0709 2A            mov b, [d]
0482   070A FD AB         swp b
0483   070C D8            push b
0484   070D 07 85 0A      call print
0485   0710 51 02 00      add sp, 2
0486   0713             ; --- END FUNCTION CALL
0487   0713             ; p = p + 2; 
0488   0713 FA FF FF      lea d, [bp + -1] ; $p
0489   0716 DA            push d
0490   0717 FA FF FF      lea d, [bp + -1] ; $p
0491   071A 2A            mov b, [d]
0492   071B 38 00 00      mov c, 0
0493   071E             ; --- START TERMS
0494   071E D7            push a
0495   071F 11            mov a, b
0496   0720 FD 2E 02 00   mov32 cb, $00000002
0496   0724 00 00 
0497   0726 56            add b, a
0498   0727 E4            pop a
0499   0728             ; --- END TERMS
0500   0728 E7            pop d
0501   0729 FD 43         mov [d], b
0502   072B             ; break; 
0503   072B 0A 3A 07      jmp _switch4_exit ; case break
0504   072E             _switch4_default:
0505   072E             ; print("Error: Unknown argument type.\n"); 
0506   072E             ; --- START FUNCTION CALL
0507   072E 26 6B 0D      mov b, _s3 ; "Error: Unknown argument type.\n"
0508   0731 FD AB         swp b
0509   0733 D8            push b
0510   0734 07 85 0A      call print
0511   0737 51 02 00      add sp, 2
0512   073A             ; --- END FUNCTION CALL
0513   073A             _switch4_exit:
0514   073A             ; format_p++; 
0515   073A FA FD FF      lea d, [bp + -3] ; $format_p
0516   073D 2A            mov b, [d]
0517   073E 38 00 00      mov c, 0
0518   0741 FD 77         inc b
0519   0743 FA FD FF      lea d, [bp + -3] ; $format_p
0520   0746 FD 43         mov [d], b
0521   0748 FD 7D         dec b
0522   074A 0A 72 07      jmp _if3_exit
0523   074D             _if3_else:
0524   074D             ; putchar(*format_p); 
0525   074D             ; --- START FUNCTION CALL
0526   074D FA FD FF      lea d, [bp + -3] ; $format_p
0527   0750 2A            mov b, [d]
0528   0751 38 00 00      mov c, 0
0529   0754 74            mov d, b
0530   0755 32            mov bl, [d]
0531   0756 A7 00         mov bh, 0
0532   0758 38 00 00      mov c, 0
0533   075B DD            push bl
0534   075C 07 E6 08      call putchar
0535   075F 51 01 00      add sp, 1
0536   0762             ; --- END FUNCTION CALL
0537   0762             ; format_p++; 
0538   0762 FA FD FF      lea d, [bp + -3] ; $format_p
0539   0765 2A            mov b, [d]
0540   0766 38 00 00      mov c, 0
0541   0769 FD 77         inc b
0542   076B FA FD FF      lea d, [bp + -3] ; $format_p
0543   076E FD 43         mov [d], b
0544   0770 FD 7D         dec b
0545   0772             _if3_exit:
0546   0772             _if2_exit:
0547   0772             _for1_update:
0548   0772 0A A6 04      jmp _for1_cond
0549   0775             _for1_exit:
0550   0775 F9            leave
0551   0776 09            ret
0552   0777             
0553   0777             print_signed_long:
0554   0777 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0555   077A             ; char digits[10]; 
0556   077A 52 0A 00      sub sp, 10
0557   077D             ; int i = 0; 
0558   077D 52 02 00      sub sp, 2
0559   0780             ; --- START LOCAL VAR INITIALIZATION
0560   0780 FA F5 FF      lea d, [bp + -11] ; $i
0561   0783 DA            push d
0562   0784 FD 2E 00 00   mov32 cb, $00000000
0562   0788 00 00 
0563   078A E7            pop d
0564   078B FD 43         mov [d], b
0565   078D             ; --- END LOCAL VAR INITIALIZATION
0566   078D             ; if (num < 0) { 
0567   078D             _if8_cond:
0568   078D FA 05 00      lea d, [bp + 5] ; $num
0569   0790 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0570   0793 FD 39         mov c, b ; And place it into C
0571   0795 2A            mov b, [d] ; Lower Word in B
0572   0796             ; --- START RELATIONAL
0573   0796 D7            push a
0574   0797 FD D8         push g
0575   0799 11            mov a, b
0576   079A FD 7A         mov g, c
0577   079C FD 2E 00 00   mov32 cb, $00000000
0577   07A0 00 00 
0578   07A2 FD AF         cmp32 ga, cb
0579   07A4 FD 73         slt ; <
0580   07A6 FD F1         pop g
0581   07A8 E4            pop a
0582   07A9             ; --- END RELATIONAL
0583   07A9 C0 00 00      cmp b, 0
0584   07AC C6 E0 07      je _if8_else
0585   07AF             _if8_TRUE:
0586   07AF             ; putchar('-'); 
0587   07AF             ; --- START FUNCTION CALL
0588   07AF FD 2E 2D 00   mov32 cb, $0000002d
0588   07B3 00 00 
0589   07B5 DD            push bl
0590   07B6 07 E6 08      call putchar
0591   07B9 51 01 00      add sp, 1
0592   07BC             ; --- END FUNCTION CALL
0593   07BC             ; num = -num; 
0594   07BC FA 05 00      lea d, [bp + 5] ; $num
0595   07BF DA            push d
0596   07C0 FA 05 00      lea d, [bp + 5] ; $num
0597   07C3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0598   07C6 FD 39         mov c, b ; And place it into C
0599   07C8 2A            mov b, [d] ; Lower Word in B
0600   07C9 12            mov a, c
0601   07CA 95            not a
0602   07CB 97            not b
0603   07CC 55 01 00      add b, 1
0604   07CF 5B 00 00      adc a, 0
0605   07D2 39            mov c, a
0606   07D3 E7            pop d
0607   07D4 FD 43         mov [d], b
0608   07D6 26 00 00      mov b, 0
0609   07D9 FD 44 02 00   mov [d + 2], b
0610   07DD 0A 14 08      jmp _if8_exit
0611   07E0             _if8_else:
0612   07E0             ; if (num == 0) { 
0613   07E0             _if9_cond:
0614   07E0 FA 05 00      lea d, [bp + 5] ; $num
0615   07E3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0616   07E6 FD 39         mov c, b ; And place it into C
0617   07E8 2A            mov b, [d] ; Lower Word in B
0618   07E9             ; --- START RELATIONAL
0619   07E9 D7            push a
0620   07EA FD D8         push g
0621   07EC 11            mov a, b
0622   07ED FD 7A         mov g, c
0623   07EF FD 2E 00 00   mov32 cb, $00000000
0623   07F3 00 00 
0624   07F5 FD AF         cmp32 ga, cb
0625   07F7 FD 71         seq ; ==
0626   07F9 FD F1         pop g
0627   07FB E4            pop a
0628   07FC             ; --- END RELATIONAL
0629   07FC C0 00 00      cmp b, 0
0630   07FF C6 14 08      je _if9_exit
0631   0802             _if9_TRUE:
0632   0802             ; putchar('0'); 
0633   0802             ; --- START FUNCTION CALL
0634   0802 FD 2E 30 00   mov32 cb, $00000030
0634   0806 00 00 
0635   0808 DD            push bl
0636   0809 07 E6 08      call putchar
0637   080C 51 01 00      add sp, 1
0638   080F             ; --- END FUNCTION CALL
0639   080F             ; return; 
0640   080F F9            leave
0641   0810 09            ret
0642   0811 0A 14 08      jmp _if9_exit
0643   0814             _if9_exit:
0644   0814             _if8_exit:
0645   0814             ; while (num > 0) { 
0646   0814             _while10_cond:
0647   0814 FA 05 00      lea d, [bp + 5] ; $num
0648   0817 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0649   081A FD 39         mov c, b ; And place it into C
0650   081C 2A            mov b, [d] ; Lower Word in B
0651   081D             ; --- START RELATIONAL
0652   081D D7            push a
0653   081E FD D8         push g
0654   0820 11            mov a, b
0655   0821 FD 7A         mov g, c
0656   0823 FD 2E 00 00   mov32 cb, $00000000
0656   0827 00 00 
0657   0829 FD AF         cmp32 ga, cb
0658   082B FD 7F         sgt
0659   082D FD F1         pop g
0660   082F E4            pop a
0661   0830             ; --- END RELATIONAL
0662   0830 C0 00 00      cmp b, 0
0663   0833 C6 9C 08      je _while10_exit
0664   0836             _while10_block:
0665   0836             ; digits[i] = '0' + (num % 10); 
0666   0836 FA F7 FF      lea d, [bp + -9] ; $digits
0667   0839 D7            push a
0668   083A DA            push d
0669   083B FA F5 FF      lea d, [bp + -11] ; $i
0670   083E 2A            mov b, [d]
0671   083F 38 00 00      mov c, 0
0672   0842 E7            pop d
0673   0843 5A            add d, b
0674   0844 E4            pop a
0675   0845 DA            push d
0676   0846 FD 2E 30 00   mov32 cb, $00000030
0676   084A 00 00 
0677   084C             ; --- START TERMS
0678   084C D7            push a
0679   084D 11            mov a, b
0680   084E FA 05 00      lea d, [bp + 5] ; $num
0681   0851 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0682   0854 FD 39         mov c, b ; And place it into C
0683   0856 2A            mov b, [d] ; Lower Word in B
0684   0857             ; --- START FACTORS
0685   0857 D7            push a
0686   0858 11            mov a, b
0687   0859 FD 2E 0A 00   mov32 cb, $0000000a
0687   085D 00 00 
0688   085F AE            div a, b ; 
0689   0860 11            mov a, b
0690   0861 27            mov b, a
0691   0862 E4            pop a
0692   0863             ; --- END FACTORS
0693   0863 FD 15         add32 cb, ga
0694   0865 E4            pop a
0695   0866             ; --- END TERMS
0696   0866 E7            pop d
0697   0867 FD 3E         mov [d], bl
0698   0869             ; num = num / 10; 
0699   0869 FA 05 00      lea d, [bp + 5] ; $num
0700   086C DA            push d
0701   086D FA 05 00      lea d, [bp + 5] ; $num
0702   0870 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0703   0873 FD 39         mov c, b ; And place it into C
0704   0875 2A            mov b, [d] ; Lower Word in B
0705   0876             ; --- START FACTORS
0706   0876 D7            push a
0707   0877 11            mov a, b
0708   0878 FD 2E 0A 00   mov32 cb, $0000000a
0708   087C 00 00 
0709   087E AE            div a, b
0710   087F 27            mov b, a
0711   0880 E4            pop a
0712   0881             ; --- END FACTORS
0713   0881 E7            pop d
0714   0882 FD 43         mov [d], b
0715   0884 28            mov b, c
0716   0885 FD 44 02 00   mov [d + 2], b
0717   0889             ; i++; 
0718   0889 FA F5 FF      lea d, [bp + -11] ; $i
0719   088C 2A            mov b, [d]
0720   088D 38 00 00      mov c, 0
0721   0890 11            mov a, b
0722   0891 FD 77         inc b
0723   0893 FA F5 FF      lea d, [bp + -11] ; $i
0724   0896 FD 43         mov [d], b
0725   0898 27            mov b, a
0726   0899 0A 14 08      jmp _while10_cond
0727   089C             _while10_exit:
0728   089C             ; while (i > 0) { 
0729   089C             _while11_cond:
0730   089C FA F5 FF      lea d, [bp + -11] ; $i
0731   089F 2A            mov b, [d]
0732   08A0 38 00 00      mov c, 0
0733   08A3             ; --- START RELATIONAL
0734   08A3 D7            push a
0735   08A4 11            mov a, b
0736   08A5 FD 2E 00 00   mov32 cb, $00000000
0736   08A9 00 00 
0737   08AB B0            cmp a, b
0738   08AC FD 7F         sgt ; >
0739   08AE E4            pop a
0740   08AF             ; --- END RELATIONAL
0741   08AF C0 00 00      cmp b, 0
0742   08B2 C6 E4 08      je _while11_exit
0743   08B5             _while11_block:
0744   08B5             ; i--; 
0745   08B5 FA F5 FF      lea d, [bp + -11] ; $i
0746   08B8 2A            mov b, [d]
0747   08B9 38 00 00      mov c, 0
0748   08BC 11            mov a, b
0749   08BD FD 7D         dec b
0750   08BF FA F5 FF      lea d, [bp + -11] ; $i
0751   08C2 FD 43         mov [d], b
0752   08C4 27            mov b, a
0753   08C5             ; putchar(digits[i]); 
0754   08C5             ; --- START FUNCTION CALL
0755   08C5 FA F7 FF      lea d, [bp + -9] ; $digits
0756   08C8 D7            push a
0757   08C9 DA            push d
0758   08CA FA F5 FF      lea d, [bp + -11] ; $i
0759   08CD 2A            mov b, [d]
0760   08CE 38 00 00      mov c, 0
0761   08D1 E7            pop d
0762   08D2 5A            add d, b
0763   08D3 E4            pop a
0764   08D4 32            mov bl, [d]
0765   08D5 A7 00         mov bh, 0
0766   08D7 38 00 00      mov c, 0
0767   08DA DD            push bl
0768   08DB 07 E6 08      call putchar
0769   08DE 51 01 00      add sp, 1
0770   08E1             ; --- END FUNCTION CALL
0771   08E1 0A 9C 08      jmp _while11_cond
0772   08E4             _while11_exit:
0773   08E4 F9            leave
0774   08E5 09            ret
0775   08E6             
0776   08E6             putchar:
0777   08E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0778   08E9             ; --- BEGIN INLINE ASM SEGMENT
0779   08E9 FA 05 00      lea d, [bp + 5] ; $c
0780   08EC 1E            mov al, [d]
0781   08ED 23            mov ah, al
0782   08EE 19 00         mov al, 0
0783   08F0 05 03         syscall sys_io      
0784   08F2             ; --- END INLINE ASM SEGMENT
0785   08F2 F9            leave
0786   08F3 09            ret
0787   08F4             
0788   08F4             print_unsigned_long:
0789   08F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0790   08F7             ; char digits[10]; 
0791   08F7 52 0A 00      sub sp, 10
0792   08FA             ; int i; 
0793   08FA 52 02 00      sub sp, 2
0794   08FD             ; i = 0; 
0795   08FD FA F5 FF      lea d, [bp + -11] ; $i
0796   0900 DA            push d
0797   0901 FD 2E 00 00   mov32 cb, $00000000
0797   0905 00 00 
0798   0907 E7            pop d
0799   0908 FD 43         mov [d], b
0800   090A             ; if(num == 0){ 
0801   090A             _if12_cond:
0802   090A FA 05 00      lea d, [bp + 5] ; $num
0803   090D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0804   0910 FD 39         mov c, b ; And place it into C
0805   0912 2A            mov b, [d] ; Lower Word in B
0806   0913             ; --- START RELATIONAL
0807   0913 D7            push a
0808   0914 FD D8         push g
0809   0916 11            mov a, b
0810   0917 FD 7A         mov g, c
0811   0919 FD 2E 00 00   mov32 cb, $00000000
0811   091D 00 00 
0812   091F FD AF         cmp32 ga, cb
0813   0921 FD 71         seq ; ==
0814   0923 FD F1         pop g
0815   0925 E4            pop a
0816   0926             ; --- END RELATIONAL
0817   0926 C0 00 00      cmp b, 0
0818   0929 C6 3E 09      je _if12_exit
0819   092C             _if12_TRUE:
0820   092C             ; putchar('0'); 
0821   092C             ; --- START FUNCTION CALL
0822   092C FD 2E 30 00   mov32 cb, $00000030
0822   0930 00 00 
0823   0932 DD            push bl
0824   0933 07 E6 08      call putchar
0825   0936 51 01 00      add sp, 1
0826   0939             ; --- END FUNCTION CALL
0827   0939             ; return; 
0828   0939 F9            leave
0829   093A 09            ret
0830   093B 0A 3E 09      jmp _if12_exit
0831   093E             _if12_exit:
0832   093E             ; while (num > 0) { 
0833   093E             _while13_cond:
0834   093E FA 05 00      lea d, [bp + 5] ; $num
0835   0941 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0836   0944 FD 39         mov c, b ; And place it into C
0837   0946 2A            mov b, [d] ; Lower Word in B
0838   0947             ; --- START RELATIONAL
0839   0947 D7            push a
0840   0948 FD D8         push g
0841   094A 11            mov a, b
0842   094B FD 7A         mov g, c
0843   094D FD 2E 00 00   mov32 cb, $00000000
0843   0951 00 00 
0844   0953 FD AF         cmp32 ga, cb
0845   0955 FD 81         sgu
0846   0957 FD F1         pop g
0847   0959 E4            pop a
0848   095A             ; --- END RELATIONAL
0849   095A C0 00 00      cmp b, 0
0850   095D C6 C6 09      je _while13_exit
0851   0960             _while13_block:
0852   0960             ; digits[i] = '0' + (num % 10); 
0853   0960 FA F7 FF      lea d, [bp + -9] ; $digits
0854   0963 D7            push a
0855   0964 DA            push d
0856   0965 FA F5 FF      lea d, [bp + -11] ; $i
0857   0968 2A            mov b, [d]
0858   0969 38 00 00      mov c, 0
0859   096C E7            pop d
0860   096D 5A            add d, b
0861   096E E4            pop a
0862   096F DA            push d
0863   0970 FD 2E 30 00   mov32 cb, $00000030
0863   0974 00 00 
0864   0976             ; --- START TERMS
0865   0976 D7            push a
0866   0977 11            mov a, b
0867   0978 FA 05 00      lea d, [bp + 5] ; $num
0868   097B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0869   097E FD 39         mov c, b ; And place it into C
0870   0980 2A            mov b, [d] ; Lower Word in B
0871   0981             ; --- START FACTORS
0872   0981 D7            push a
0873   0982 11            mov a, b
0874   0983 FD 2E 0A 00   mov32 cb, $0000000a
0874   0987 00 00 
0875   0989 AE            div a, b ; 
0876   098A 11            mov a, b
0877   098B 27            mov b, a
0878   098C E4            pop a
0879   098D             ; --- END FACTORS
0880   098D FD 15         add32 cb, ga
0881   098F E4            pop a
0882   0990             ; --- END TERMS
0883   0990 E7            pop d
0884   0991 FD 3E         mov [d], bl
0885   0993             ; num = num / 10; 
0886   0993 FA 05 00      lea d, [bp + 5] ; $num
0887   0996 DA            push d
0888   0997 FA 05 00      lea d, [bp + 5] ; $num
0889   099A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0890   099D FD 39         mov c, b ; And place it into C
0891   099F 2A            mov b, [d] ; Lower Word in B
0892   09A0             ; --- START FACTORS
0893   09A0 D7            push a
0894   09A1 11            mov a, b
0895   09A2 FD 2E 0A 00   mov32 cb, $0000000a
0895   09A6 00 00 
0896   09A8 AE            div a, b
0897   09A9 27            mov b, a
0898   09AA E4            pop a
0899   09AB             ; --- END FACTORS
0900   09AB E7            pop d
0901   09AC FD 43         mov [d], b
0902   09AE 28            mov b, c
0903   09AF FD 44 02 00   mov [d + 2], b
0904   09B3             ; i++; 
0905   09B3 FA F5 FF      lea d, [bp + -11] ; $i
0906   09B6 2A            mov b, [d]
0907   09B7 38 00 00      mov c, 0
0908   09BA 11            mov a, b
0909   09BB FD 77         inc b
0910   09BD FA F5 FF      lea d, [bp + -11] ; $i
0911   09C0 FD 43         mov [d], b
0912   09C2 27            mov b, a
0913   09C3 0A 3E 09      jmp _while13_cond
0914   09C6             _while13_exit:
0915   09C6             ; while (i > 0) { 
0916   09C6             _while14_cond:
0917   09C6 FA F5 FF      lea d, [bp + -11] ; $i
0918   09C9 2A            mov b, [d]
0919   09CA 38 00 00      mov c, 0
0920   09CD             ; --- START RELATIONAL
0921   09CD D7            push a
0922   09CE 11            mov a, b
0923   09CF FD 2E 00 00   mov32 cb, $00000000
0923   09D3 00 00 
0924   09D5 B0            cmp a, b
0925   09D6 FD 7F         sgt ; >
0926   09D8 E4            pop a
0927   09D9             ; --- END RELATIONAL
0928   09D9 C0 00 00      cmp b, 0
0929   09DC C6 0E 0A      je _while14_exit
0930   09DF             _while14_block:
0931   09DF             ; i--; 
0932   09DF FA F5 FF      lea d, [bp + -11] ; $i
0933   09E2 2A            mov b, [d]
0934   09E3 38 00 00      mov c, 0
0935   09E6 11            mov a, b
0936   09E7 FD 7D         dec b
0937   09E9 FA F5 FF      lea d, [bp + -11] ; $i
0938   09EC FD 43         mov [d], b
0939   09EE 27            mov b, a
0940   09EF             ; putchar(digits[i]); 
0941   09EF             ; --- START FUNCTION CALL
0942   09EF FA F7 FF      lea d, [bp + -9] ; $digits
0943   09F2 D7            push a
0944   09F3 DA            push d
0945   09F4 FA F5 FF      lea d, [bp + -11] ; $i
0946   09F7 2A            mov b, [d]
0947   09F8 38 00 00      mov c, 0
0948   09FB E7            pop d
0949   09FC 5A            add d, b
0950   09FD E4            pop a
0951   09FE 32            mov bl, [d]
0952   09FF A7 00         mov bh, 0
0953   0A01 38 00 00      mov c, 0
0954   0A04 DD            push bl
0955   0A05 07 E6 08      call putchar
0956   0A08 51 01 00      add sp, 1
0957   0A0B             ; --- END FUNCTION CALL
0958   0A0B 0A C6 09      jmp _while14_cond
0959   0A0E             _while14_exit:
0960   0A0E F9            leave
0961   0A0F 09            ret
0962   0A10             
0963   0A10             printx32:
0964   0A10 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0965   0A13             ; --- BEGIN INLINE ASM SEGMENT
0966   0A13 FA 05 00      lea d, [bp + 5] ; $hex
0967   0A16 2B 02 00      mov b, [d+2]
0968   0A19 07 22 0A      call print_u16x_printx32
0969   0A1C 2A            mov b, [d]
0970   0A1D 07 22 0A      call print_u16x_printx32
0971   0A20             ; --- END INLINE ASM SEGMENT
0972   0A20             ; return; 
0973   0A20 F9            leave
0974   0A21 09            ret
0975   0A22             ; --- BEGIN INLINE ASM SEGMENT
0976   0A22             print_u16x_printx32:
0977   0A22 D7            push a
0978   0A23 D8            push b
0979   0A24 DD            push bl
0980   0A25 30            mov bl, bh
0981   0A26 07 44 0A      call _itoa_printx32        
0982   0A29 2F            mov bl, al        
0983   0A2A 19 00         mov al, 0
0984   0A2C 05 03         syscall sys_io        
0985   0A2E 24            mov ah, bl        
0986   0A2F 19 00         mov al, 0
0987   0A31 05 03         syscall sys_io        
0988   0A33 EA            pop bl
0989   0A34 07 44 0A      call _itoa_printx32        
0990   0A37 2F            mov bl, al        
0991   0A38 19 00         mov al, 0
0992   0A3A 05 03         syscall sys_io        
0993   0A3C 24            mov ah, bl        
0994   0A3D 19 00         mov al, 0
0995   0A3F 05 03         syscall sys_io        
0996   0A41 E5            pop b
0997   0A42 E4            pop a
0998   0A43 09            ret
0999   0A44             _itoa_printx32:
1000   0A44 DA            push d
1001   0A45 D8            push b
1002   0A46 A7 00         mov bh, 0
1003   0A48 FD A4 04      shr bl, 4  
1004   0A4B 74            mov d, b
1005   0A4C 1F 5E 0A      mov al, [d + s_hex_digits_printx32]
1006   0A4F 23            mov ah, al
1007   0A50 E5            pop b
1008   0A51 D8            push b
1009   0A52 A7 00         mov bh, 0
1010   0A54 FD 87 0F      and bl, $0F
1011   0A57 74            mov d, b
1012   0A58 1F 5E 0A      mov al, [d + s_hex_digits_printx32]
1013   0A5B E5            pop b
1014   0A5C E7            pop d
1015   0A5D 09            ret
1016   0A5E 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
1016   0A62 34 35 36 37 
1016   0A66 38 39 41 42 
1016   0A6A 43 44 45 46 
1017   0A6E             ; --- END INLINE ASM SEGMENT
1018   0A6E F9            leave
1019   0A6F 09            ret
1020   0A70             
1021   0A70             err:
1022   0A70 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1023   0A73             ; print(e); 
1024   0A73             ; --- START FUNCTION CALL
1025   0A73 FA 05 00      lea d, [bp + 5] ; $e
1026   0A76 2A            mov b, [d]
1027   0A77 38 00 00      mov c, 0
1028   0A7A FD AB         swp b
1029   0A7C D8            push b
1030   0A7D 07 85 0A      call print
1031   0A80 51 02 00      add sp, 2
1032   0A83             ; --- END FUNCTION CALL
1033   0A83 F9            leave
1034   0A84 09            ret
1035   0A85             
1036   0A85             print:
1037   0A85 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1038   0A88             ; --- BEGIN INLINE ASM SEGMENT
1039   0A88 FA 05 00      lea d, [bp + 5] ; $s
1040   0A8B FD 2A         mov d, [d]
1041   0A8D             _puts_L1_print:
1042   0A8D 1E            mov al, [d]
1043   0A8E B9 00         cmp al, 0
1044   0A90 C6 9C 0A      jz _puts_END_print
1045   0A93 23            mov ah, al
1046   0A94 19 00         mov al, 0
1047   0A96 05 03         syscall sys_io
1048   0A98 79            inc d
1049   0A99 0A 8D 0A      jmp _puts_L1_print
1050   0A9C             _puts_END_print:
1051   0A9C             ; --- END INLINE ASM SEGMENT
1052   0A9C F9            leave
1053   0A9D 09            ret
1054   0A9E             
1055   0A9E             print_signed:
1056   0A9E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1057   0AA1             ; char digits[5]; 
1058   0AA1 52 05 00      sub sp, 5
1059   0AA4             ; int i = 0; 
1060   0AA4 52 02 00      sub sp, 2
1061   0AA7             ; --- START LOCAL VAR INITIALIZATION
1062   0AA7 FA FA FF      lea d, [bp + -6] ; $i
1063   0AAA DA            push d
1064   0AAB FD 2E 00 00   mov32 cb, $00000000
1064   0AAF 00 00 
1065   0AB1 E7            pop d
1066   0AB2 FD 43         mov [d], b
1067   0AB4             ; --- END LOCAL VAR INITIALIZATION
1068   0AB4             ; if (num < 0) { 
1069   0AB4             _if15_cond:
1070   0AB4 FA 05 00      lea d, [bp + 5] ; $num
1071   0AB7 2A            mov b, [d]
1072   0AB8 38 00 00      mov c, 0
1073   0ABB             ; --- START RELATIONAL
1074   0ABB D7            push a
1075   0ABC 11            mov a, b
1076   0ABD FD 2E 00 00   mov32 cb, $00000000
1076   0AC1 00 00 
1077   0AC3 B0            cmp a, b
1078   0AC4 FD 73         slt ; < (signed)
1079   0AC6 E4            pop a
1080   0AC7             ; --- END RELATIONAL
1081   0AC7 C0 00 00      cmp b, 0
1082   0ACA C6 ED 0A      je _if15_else
1083   0ACD             _if15_TRUE:
1084   0ACD             ; putchar('-'); 
1085   0ACD             ; --- START FUNCTION CALL
1086   0ACD FD 2E 2D 00   mov32 cb, $0000002d
1086   0AD1 00 00 
1087   0AD3 DD            push bl
1088   0AD4 07 E6 08      call putchar
1089   0AD7 51 01 00      add sp, 1
1090   0ADA             ; --- END FUNCTION CALL
1091   0ADA             ; num = -num; 
1092   0ADA FA 05 00      lea d, [bp + 5] ; $num
1093   0ADD DA            push d
1094   0ADE FA 05 00      lea d, [bp + 5] ; $num
1095   0AE1 2A            mov b, [d]
1096   0AE2 38 00 00      mov c, 0
1097   0AE5 FD 97         neg b
1098   0AE7 E7            pop d
1099   0AE8 FD 43         mov [d], b
1100   0AEA 0A 18 0B      jmp _if15_exit
1101   0AED             _if15_else:
1102   0AED             ; if (num == 0) { 
1103   0AED             _if16_cond:
1104   0AED FA 05 00      lea d, [bp + 5] ; $num
1105   0AF0 2A            mov b, [d]
1106   0AF1 38 00 00      mov c, 0
1107   0AF4             ; --- START RELATIONAL
1108   0AF4 D7            push a
1109   0AF5 11            mov a, b
1110   0AF6 FD 2E 00 00   mov32 cb, $00000000
1110   0AFA 00 00 
1111   0AFC B0            cmp a, b
1112   0AFD FD 71         seq ; ==
1113   0AFF E4            pop a
1114   0B00             ; --- END RELATIONAL
1115   0B00 C0 00 00      cmp b, 0
1116   0B03 C6 18 0B      je _if16_exit
1117   0B06             _if16_TRUE:
1118   0B06             ; putchar('0'); 
1119   0B06             ; --- START FUNCTION CALL
1120   0B06 FD 2E 30 00   mov32 cb, $00000030
1120   0B0A 00 00 
1121   0B0C DD            push bl
1122   0B0D 07 E6 08      call putchar
1123   0B10 51 01 00      add sp, 1
1124   0B13             ; --- END FUNCTION CALL
1125   0B13             ; return; 
1126   0B13 F9            leave
1127   0B14 09            ret
1128   0B15 0A 18 0B      jmp _if16_exit
1129   0B18             _if16_exit:
1130   0B18             _if15_exit:
1131   0B18             ; while (num > 0) { 
1132   0B18             _while17_cond:
1133   0B18 FA 05 00      lea d, [bp + 5] ; $num
1134   0B1B 2A            mov b, [d]
1135   0B1C 38 00 00      mov c, 0
1136   0B1F             ; --- START RELATIONAL
1137   0B1F D7            push a
1138   0B20 11            mov a, b
1139   0B21 FD 2E 00 00   mov32 cb, $00000000
1139   0B25 00 00 
1140   0B27 B0            cmp a, b
1141   0B28 FD 7F         sgt ; >
1142   0B2A E4            pop a
1143   0B2B             ; --- END RELATIONAL
1144   0B2B C0 00 00      cmp b, 0
1145   0B2E C6 8D 0B      je _while17_exit
1146   0B31             _while17_block:
1147   0B31             ; digits[i] = '0' + (num % 10); 
1148   0B31 FA FC FF      lea d, [bp + -4] ; $digits
1149   0B34 D7            push a
1150   0B35 DA            push d
1151   0B36 FA FA FF      lea d, [bp + -6] ; $i
1152   0B39 2A            mov b, [d]
1153   0B3A 38 00 00      mov c, 0
1154   0B3D E7            pop d
1155   0B3E 5A            add d, b
1156   0B3F E4            pop a
1157   0B40 DA            push d
1158   0B41 FD 2E 30 00   mov32 cb, $00000030
1158   0B45 00 00 
1159   0B47             ; --- START TERMS
1160   0B47 D7            push a
1161   0B48 11            mov a, b
1162   0B49 FA 05 00      lea d, [bp + 5] ; $num
1163   0B4C 2A            mov b, [d]
1164   0B4D 38 00 00      mov c, 0
1165   0B50             ; --- START FACTORS
1166   0B50 D7            push a
1167   0B51 11            mov a, b
1168   0B52 FD 2E 0A 00   mov32 cb, $0000000a
1168   0B56 00 00 
1169   0B58 AE            div a, b ; 
1170   0B59 11            mov a, b
1171   0B5A 27            mov b, a
1172   0B5B E4            pop a
1173   0B5C             ; --- END FACTORS
1174   0B5C 56            add b, a
1175   0B5D E4            pop a
1176   0B5E             ; --- END TERMS
1177   0B5E E7            pop d
1178   0B5F FD 3E         mov [d], bl
1179   0B61             ; num = num / 10; 
1180   0B61 FA 05 00      lea d, [bp + 5] ; $num
1181   0B64 DA            push d
1182   0B65 FA 05 00      lea d, [bp + 5] ; $num
1183   0B68 2A            mov b, [d]
1184   0B69 38 00 00      mov c, 0
1185   0B6C             ; --- START FACTORS
1186   0B6C D7            push a
1187   0B6D 11            mov a, b
1188   0B6E FD 2E 0A 00   mov32 cb, $0000000a
1188   0B72 00 00 
1189   0B74 AE            div a, b
1190   0B75 27            mov b, a
1191   0B76 E4            pop a
1192   0B77             ; --- END FACTORS
1193   0B77 E7            pop d
1194   0B78 FD 43         mov [d], b
1195   0B7A             ; i++; 
1196   0B7A FA FA FF      lea d, [bp + -6] ; $i
1197   0B7D 2A            mov b, [d]
1198   0B7E 38 00 00      mov c, 0
1199   0B81 11            mov a, b
1200   0B82 FD 77         inc b
1201   0B84 FA FA FF      lea d, [bp + -6] ; $i
1202   0B87 FD 43         mov [d], b
1203   0B89 27            mov b, a
1204   0B8A 0A 18 0B      jmp _while17_cond
1205   0B8D             _while17_exit:
1206   0B8D             ; while (i > 0) { 
1207   0B8D             _while18_cond:
1208   0B8D FA FA FF      lea d, [bp + -6] ; $i
1209   0B90 2A            mov b, [d]
1210   0B91 38 00 00      mov c, 0
1211   0B94             ; --- START RELATIONAL
1212   0B94 D7            push a
1213   0B95 11            mov a, b
1214   0B96 FD 2E 00 00   mov32 cb, $00000000
1214   0B9A 00 00 
1215   0B9C B0            cmp a, b
1216   0B9D FD 7F         sgt ; >
1217   0B9F E4            pop a
1218   0BA0             ; --- END RELATIONAL
1219   0BA0 C0 00 00      cmp b, 0
1220   0BA3 C6 D5 0B      je _while18_exit
1221   0BA6             _while18_block:
1222   0BA6             ; i--; 
1223   0BA6 FA FA FF      lea d, [bp + -6] ; $i
1224   0BA9 2A            mov b, [d]
1225   0BAA 38 00 00      mov c, 0
1226   0BAD 11            mov a, b
1227   0BAE FD 7D         dec b
1228   0BB0 FA FA FF      lea d, [bp + -6] ; $i
1229   0BB3 FD 43         mov [d], b
1230   0BB5 27            mov b, a
1231   0BB6             ; putchar(digits[i]); 
1232   0BB6             ; --- START FUNCTION CALL
1233   0BB6 FA FC FF      lea d, [bp + -4] ; $digits
1234   0BB9 D7            push a
1235   0BBA DA            push d
1236   0BBB FA FA FF      lea d, [bp + -6] ; $i
1237   0BBE 2A            mov b, [d]
1238   0BBF 38 00 00      mov c, 0
1239   0BC2 E7            pop d
1240   0BC3 5A            add d, b
1241   0BC4 E4            pop a
1242   0BC5 32            mov bl, [d]
1243   0BC6 A7 00         mov bh, 0
1244   0BC8 38 00 00      mov c, 0
1245   0BCB DD            push bl
1246   0BCC 07 E6 08      call putchar
1247   0BCF 51 01 00      add sp, 1
1248   0BD2             ; --- END FUNCTION CALL
1249   0BD2 0A 8D 0B      jmp _while18_cond
1250   0BD5             _while18_exit:
1251   0BD5 F9            leave
1252   0BD6 09            ret
1253   0BD7             
1254   0BD7             print_unsigned:
1255   0BD7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1256   0BDA             ; char digits[5]; 
1257   0BDA 52 05 00      sub sp, 5
1258   0BDD             ; int i; 
1259   0BDD 52 02 00      sub sp, 2
1260   0BE0             ; i = 0; 
1261   0BE0 FA FA FF      lea d, [bp + -6] ; $i
1262   0BE3 DA            push d
1263   0BE4 FD 2E 00 00   mov32 cb, $00000000
1263   0BE8 00 00 
1264   0BEA E7            pop d
1265   0BEB FD 43         mov [d], b
1266   0BED             ; if(num == 0){ 
1267   0BED             _if19_cond:
1268   0BED FA 05 00      lea d, [bp + 5] ; $num
1269   0BF0 2A            mov b, [d]
1270   0BF1 38 00 00      mov c, 0
1271   0BF4             ; --- START RELATIONAL
1272   0BF4 D7            push a
1273   0BF5 11            mov a, b
1274   0BF6 FD 2E 00 00   mov32 cb, $00000000
1274   0BFA 00 00 
1275   0BFC B0            cmp a, b
1276   0BFD FD 71         seq ; ==
1277   0BFF E4            pop a
1278   0C00             ; --- END RELATIONAL
1279   0C00 C0 00 00      cmp b, 0
1280   0C03 C6 18 0C      je _if19_exit
1281   0C06             _if19_TRUE:
1282   0C06             ; putchar('0'); 
1283   0C06             ; --- START FUNCTION CALL
1284   0C06 FD 2E 30 00   mov32 cb, $00000030
1284   0C0A 00 00 
1285   0C0C DD            push bl
1286   0C0D 07 E6 08      call putchar
1287   0C10 51 01 00      add sp, 1
1288   0C13             ; --- END FUNCTION CALL
1289   0C13             ; return; 
1290   0C13 F9            leave
1291   0C14 09            ret
1292   0C15 0A 18 0C      jmp _if19_exit
1293   0C18             _if19_exit:
1294   0C18             ; while (num > 0) { 
1295   0C18             _while20_cond:
1296   0C18 FA 05 00      lea d, [bp + 5] ; $num
1297   0C1B 2A            mov b, [d]
1298   0C1C 38 00 00      mov c, 0
1299   0C1F             ; --- START RELATIONAL
1300   0C1F D7            push a
1301   0C20 11            mov a, b
1302   0C21 FD 2E 00 00   mov32 cb, $00000000
1302   0C25 00 00 
1303   0C27 B0            cmp a, b
1304   0C28 FD 81         sgu ; > (unsigned)
1305   0C2A E4            pop a
1306   0C2B             ; --- END RELATIONAL
1307   0C2B C0 00 00      cmp b, 0
1308   0C2E C6 8D 0C      je _while20_exit
1309   0C31             _while20_block:
1310   0C31             ; digits[i] = '0' + (num % 10); 
1311   0C31 FA FC FF      lea d, [bp + -4] ; $digits
1312   0C34 D7            push a
1313   0C35 DA            push d
1314   0C36 FA FA FF      lea d, [bp + -6] ; $i
1315   0C39 2A            mov b, [d]
1316   0C3A 38 00 00      mov c, 0
1317   0C3D E7            pop d
1318   0C3E 5A            add d, b
1319   0C3F E4            pop a
1320   0C40 DA            push d
1321   0C41 FD 2E 30 00   mov32 cb, $00000030
1321   0C45 00 00 
1322   0C47             ; --- START TERMS
1323   0C47 D7            push a
1324   0C48 11            mov a, b
1325   0C49 FA 05 00      lea d, [bp + 5] ; $num
1326   0C4C 2A            mov b, [d]
1327   0C4D 38 00 00      mov c, 0
1328   0C50             ; --- START FACTORS
1329   0C50 D7            push a
1330   0C51 11            mov a, b
1331   0C52 FD 2E 0A 00   mov32 cb, $0000000a
1331   0C56 00 00 
1332   0C58 AE            div a, b ; 
1333   0C59 11            mov a, b
1334   0C5A 27            mov b, a
1335   0C5B E4            pop a
1336   0C5C             ; --- END FACTORS
1337   0C5C 56            add b, a
1338   0C5D E4            pop a
1339   0C5E             ; --- END TERMS
1340   0C5E E7            pop d
1341   0C5F FD 3E         mov [d], bl
1342   0C61             ; num = num / 10; 
1343   0C61 FA 05 00      lea d, [bp + 5] ; $num
1344   0C64 DA            push d
1345   0C65 FA 05 00      lea d, [bp + 5] ; $num
1346   0C68 2A            mov b, [d]
1347   0C69 38 00 00      mov c, 0
1348   0C6C             ; --- START FACTORS
1349   0C6C D7            push a
1350   0C6D 11            mov a, b
1351   0C6E FD 2E 0A 00   mov32 cb, $0000000a
1351   0C72 00 00 
1352   0C74 AE            div a, b
1353   0C75 27            mov b, a
1354   0C76 E4            pop a
1355   0C77             ; --- END FACTORS
1356   0C77 E7            pop d
1357   0C78 FD 43         mov [d], b
1358   0C7A             ; i++; 
1359   0C7A FA FA FF      lea d, [bp + -6] ; $i
1360   0C7D 2A            mov b, [d]
1361   0C7E 38 00 00      mov c, 0
1362   0C81 11            mov a, b
1363   0C82 FD 77         inc b
1364   0C84 FA FA FF      lea d, [bp + -6] ; $i
1365   0C87 FD 43         mov [d], b
1366   0C89 27            mov b, a
1367   0C8A 0A 18 0C      jmp _while20_cond
1368   0C8D             _while20_exit:
1369   0C8D             ; while (i > 0) { 
1370   0C8D             _while21_cond:
1371   0C8D FA FA FF      lea d, [bp + -6] ; $i
1372   0C90 2A            mov b, [d]
1373   0C91 38 00 00      mov c, 0
1374   0C94             ; --- START RELATIONAL
1375   0C94 D7            push a
1376   0C95 11            mov a, b
1377   0C96 FD 2E 00 00   mov32 cb, $00000000
1377   0C9A 00 00 
1378   0C9C B0            cmp a, b
1379   0C9D FD 7F         sgt ; >
1380   0C9F E4            pop a
1381   0CA0             ; --- END RELATIONAL
1382   0CA0 C0 00 00      cmp b, 0
1383   0CA3 C6 D5 0C      je _while21_exit
1384   0CA6             _while21_block:
1385   0CA6             ; i--; 
1386   0CA6 FA FA FF      lea d, [bp + -6] ; $i
1387   0CA9 2A            mov b, [d]
1388   0CAA 38 00 00      mov c, 0
1389   0CAD 11            mov a, b
1390   0CAE FD 7D         dec b
1391   0CB0 FA FA FF      lea d, [bp + -6] ; $i
1392   0CB3 FD 43         mov [d], b
1393   0CB5 27            mov b, a
1394   0CB6             ; putchar(digits[i]); 
1395   0CB6             ; --- START FUNCTION CALL
1396   0CB6 FA FC FF      lea d, [bp + -4] ; $digits
1397   0CB9 D7            push a
1398   0CBA DA            push d
1399   0CBB FA FA FF      lea d, [bp + -6] ; $i
1400   0CBE 2A            mov b, [d]
1401   0CBF 38 00 00      mov c, 0
1402   0CC2 E7            pop d
1403   0CC3 5A            add d, b
1404   0CC4 E4            pop a
1405   0CC5 32            mov bl, [d]
1406   0CC6 A7 00         mov bh, 0
1407   0CC8 38 00 00      mov c, 0
1408   0CCB DD            push bl
1409   0CCC 07 E6 08      call putchar
1410   0CCF 51 01 00      add sp, 1
1411   0CD2             ; --- END FUNCTION CALL
1412   0CD2 0A 8D 0C      jmp _while21_cond
1413   0CD5             _while21_exit:
1414   0CD5 F9            leave
1415   0CD6 09            ret
1416   0CD7             
1417   0CD7             printx16:
1418   0CD7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1419   0CDA             ; --- BEGIN INLINE ASM SEGMENT
1420   0CDA FA 05 00      lea d, [bp + 5] ; $hex
1421   0CDD 2A            mov b, [d]
1422   0CDE             print_u16x_printx16:
1423   0CDE DD            push bl
1424   0CDF 30            mov bl, bh
1425   0CE0 07 FD 0C      call _itoa_printx16        
1426   0CE3 2F            mov bl, al        
1427   0CE4 19 00         mov al, 0
1428   0CE6 05 03         syscall sys_io        
1429   0CE8 24            mov ah, bl        
1430   0CE9 19 00         mov al, 0
1431   0CEB 05 03         syscall sys_io        
1432   0CED EA            pop bl
1433   0CEE 07 FD 0C      call _itoa_printx16        
1434   0CF1 2F            mov bl, al        
1435   0CF2 19 00         mov al, 0
1436   0CF4 05 03         syscall sys_io        
1437   0CF6 24            mov ah, bl        
1438   0CF7 19 00         mov al, 0
1439   0CF9 05 03         syscall sys_io        
1440   0CFB             ; --- END INLINE ASM SEGMENT
1441   0CFB             ; return; 
1442   0CFB F9            leave
1443   0CFC 09            ret
1444   0CFD             ; --- BEGIN INLINE ASM SEGMENT
1445   0CFD             _itoa_printx16:
1446   0CFD DA            push d
1447   0CFE D8            push b
1448   0CFF A7 00         mov bh, 0
1449   0D01 FD A4 04      shr bl, 4  
1450   0D04 74            mov d, b
1451   0D05 1F 17 0D      mov al, [d + s_hex_digits_printx16]
1452   0D08 23            mov ah, al
1453   0D09 E5            pop b
1454   0D0A D8            push b
1455   0D0B A7 00         mov bh, 0
1456   0D0D FD 87 0F      and bl, $0F
1457   0D10 74            mov d, b
1458   0D11 1F 17 0D      mov al, [d + s_hex_digits_printx16]
1459   0D14 E5            pop b
1460   0D15 E7            pop d
1461   0D16 09            ret
1462   0D17 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
1462   0D1B 34 35 36 37 
1462   0D1F 38 39 41 42 
1462   0D23 43 44 45 46 
1463   0D27             ; --- END INLINE ASM SEGMENT
1464   0D27 F9            leave
1465   0D28 09            ret
1466   0D29             ; --- END TEXT SEGMENT
1467   0D29             
1468   0D29             ; --- BEGIN DATA SEGMENT
1469   0D29 00 00       _u_data: .fill 2, 0
1470   0D2B 0A 63 31 3A _s0: .db "\nc1: %x, c2: %x\n", 0
1470   0D2F 20 25 78 2C 
1470   0D33 20 63 32 3A 
1470   0D37 20 25 78 0A 
1470   0D3B 00 
1471   0D3C 0A 69 6E 74 _s1: .db "\ninteger val: %x\n", 0
1471   0D40 65 67 65 72 
1471   0D44 20 76 61 6C 
1471   0D48 3A 20 25 78 
1471   0D4C 0A 00 
1472   0D4E 55 6E 65 78 _s2: .db "Unexpected format in printf.", 0
1472   0D52 70 65 63 74 
1472   0D56 65 64 20 66 
1472   0D5A 6F 72 6D 61 
1472   0D5E 74 20 69 6E 
1472   0D62 20 70 72 69 
1472   0D66 6E 74 66 2E 
1472   0D6A 00 
1473   0D6B 45 72 72 6F _s3: .db "Error: Unknown argument type.\n", 0
1473   0D6F 72 3A 20 55 
1473   0D73 6E 6B 6E 6F 
1473   0D77 77 6E 20 61 
1473   0D7B 72 67 75 6D 
1473   0D7F 65 6E 74 20 
1473   0D83 74 79 70 65 
1473   0D87 2E 0A 00 
1474   0D8A             
1475   0D8A 8C 0D       _heap_top: .dw _heap
1476   0D8C 00          _heap: .db 0
1477   0D8D             ; --- END DATA SEGMENT
1478   0D8D             
1479   0D8D             .end
tasm: Number of errors = 0
