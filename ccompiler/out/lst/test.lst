0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; long int i, j; 
0011   0408 52 04 00      sub sp, 4
0012   040B 52 04 00      sub sp, 4
0013   040E             ; i = 0x0F0F0F0F; 
0014   040E FA FD FF      lea d, [bp + -3] ; $i
0015   0411 DA            push d
0016   0412 26 0F 0F      mov b, 3855
0017   0415 38 0F 0F      mov c, 3855
0018   0418 E7            pop d
0019   0419 FD 43         mov [d], b
0020   041B 28            mov b, c
0021   041C FD 44 02 00   mov [d + 2], b
0022   0420             ; j = 0x01010101; 
0023   0420 FA F9 FF      lea d, [bp + -7] ; $j
0024   0423 DA            push d
0025   0424 26 01 01      mov b, 257
0026   0427 38 01 01      mov c, 257
0027   042A E7            pop d
0028   042B FD 43         mov [d], b
0029   042D 28            mov b, c
0030   042E FD 44 02 00   mov [d + 2], b
0031   0432             ; printx32(i-j); 
0032   0432             ; --- START FUNCTION CALL
0033   0432 FA FD FF      lea d, [bp + -3] ; $i
0034   0435 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0035   0438 FD 39         mov c, b ; And place it into C
0036   043A 2A            mov b, [d] ; Lower Word in B
0037   043B             ; --- START TERMS
0038   043B D7            push a
0039   043C FD D8         push g
0040   043E 11            mov a, b
0041   043F FD 7A         mov g, c
0042   0441 FA F9 FF      lea d, [bp + -7] ; $j
0043   0444 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0044   0447 FD 39         mov c, b ; And place it into C
0045   0449 2A            mov b, [d] ; Lower Word in B
0046   044A FD 19         sbb32 ga, cb
0047   044C 27            mov b, a
0048   044D FD 38         mov c, g
0049   044F FD F1         pop g
0050   0451 E4            pop a
0051   0452             ; --- END TERMS
0052   0452 12            mov a, c
0053   0453 FD AA         swp a
0054   0455 D7            push a
0055   0456 FD AB         swp b
0056   0458 D8            push b
0057   0459 07 99 12      call printx32
0058   045C 51 04 00      add sp, 4
0059   045F             ; --- END FUNCTION CALL
0060   045F 05 0B         syscall sys_terminate_proc
0061   0461             
0062   0461             strcpy:
0063   0461 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0064   0464             ; char *psrc; 
0065   0464 52 02 00      sub sp, 2
0066   0467             ; char *pdest; 
0067   0467 52 02 00      sub sp, 2
0068   046A             ; psrc = src; 
0069   046A FA FF FF      lea d, [bp + -1] ; $psrc
0070   046D DA            push d
0071   046E FA 07 00      lea d, [bp + 7] ; $src
0072   0471 2A            mov b, [d]
0073   0472 38 00 00      mov c, 0
0074   0475 E7            pop d
0075   0476 FD 43         mov [d], b
0076   0478             ; pdest = dest; 
0077   0478 FA FD FF      lea d, [bp + -3] ; $pdest
0078   047B DA            push d
0079   047C FA 05 00      lea d, [bp + 5] ; $dest
0080   047F 2A            mov b, [d]
0081   0480 38 00 00      mov c, 0
0082   0483 E7            pop d
0083   0484 FD 43         mov [d], b
0084   0486             ; while(*psrc) *pdest++ = *psrc++; 
0085   0486             _while1_cond:
0086   0486 FA FF FF      lea d, [bp + -1] ; $psrc
0087   0489 2A            mov b, [d]
0088   048A 38 00 00      mov c, 0
0089   048D 74            mov d, b
0090   048E 32            mov bl, [d]
0091   048F A7 00         mov bh, 0
0092   0491 C0 00 00      cmp b, 0
0093   0494 C6 C2 04      je _while1_exit
0094   0497             _while1_block:
0095   0497             ; *pdest++ = *psrc++; 
0096   0497 FA FD FF      lea d, [bp + -3] ; $pdest
0097   049A 2A            mov b, [d]
0098   049B 38 00 00      mov c, 0
0099   049E FD 77         inc b
0100   04A0 FA FD FF      lea d, [bp + -3] ; $pdest
0101   04A3 FD 43         mov [d], b
0102   04A5 FD 7D         dec b
0103   04A7 D8            push b
0104   04A8 FA FF FF      lea d, [bp + -1] ; $psrc
0105   04AB 2A            mov b, [d]
0106   04AC 38 00 00      mov c, 0
0107   04AF FD 77         inc b
0108   04B1 FA FF FF      lea d, [bp + -1] ; $psrc
0109   04B4 FD 43         mov [d], b
0110   04B6 FD 7D         dec b
0111   04B8 74            mov d, b
0112   04B9 32            mov bl, [d]
0113   04BA A7 00         mov bh, 0
0114   04BC E7            pop d
0115   04BD FD 3E         mov [d], bl
0116   04BF 0A 86 04      jmp _while1_cond
0117   04C2             _while1_exit:
0118   04C2             ; *pdest = '\0'; 
0119   04C2 FA FD FF      lea d, [bp + -3] ; $pdest
0120   04C5 2A            mov b, [d]
0121   04C6 38 00 00      mov c, 0
0122   04C9 D8            push b
0123   04CA 26 00 00      mov b, $0
0124   04CD 38 00 00      mov c, 0
0125   04D0 E7            pop d
0126   04D1 FD 3E         mov [d], bl
0127   04D3 F9            leave
0128   04D4 09            ret
0129   04D5             
0130   04D5             strcmp:
0131   04D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0132   04D8             ; while (*s1 && (*s1 == *s2)) { 
0133   04D8             _while2_cond:
0134   04D8 FA 05 00      lea d, [bp + 5] ; $s1
0135   04DB 2A            mov b, [d]
0136   04DC 38 00 00      mov c, 0
0137   04DF 74            mov d, b
0138   04E0 32            mov bl, [d]
0139   04E1 A7 00         mov bh, 0
0140   04E3             ; --- START LOGICAL AND
0141   04E3 D7            push a
0142   04E4 11            mov a, b
0143   04E5 FA 05 00      lea d, [bp + 5] ; $s1
0144   04E8 2A            mov b, [d]
0145   04E9 38 00 00      mov c, 0
0146   04EC 74            mov d, b
0147   04ED 32            mov bl, [d]
0148   04EE A7 00         mov bh, 0
0149   04F0             ; --- START RELATIONAL
0150   04F0 D7            push a
0151   04F1 11            mov a, b
0152   04F2 FA 07 00      lea d, [bp + 7] ; $s2
0153   04F5 2A            mov b, [d]
0154   04F6 38 00 00      mov c, 0
0155   04F9 74            mov d, b
0156   04FA 32            mov bl, [d]
0157   04FB A7 00         mov bh, 0
0158   04FD B0            cmp a, b
0159   04FE FD 71         seq ; ==
0160   0500 E4            pop a
0161   0501             ; --- END RELATIONAL
0162   0501 FD A7         sand a, b
0163   0503 E4            pop a
0164   0504             ; --- END LOGICAL AND
0165   0504 C0 00 00      cmp b, 0
0166   0507 C6 2D 05      je _while2_exit
0167   050A             _while2_block:
0168   050A             ; s1++; 
0169   050A FA 05 00      lea d, [bp + 5] ; $s1
0170   050D 2A            mov b, [d]
0171   050E 38 00 00      mov c, 0
0172   0511 FD 77         inc b
0173   0513 FA 05 00      lea d, [bp + 5] ; $s1
0174   0516 FD 43         mov [d], b
0175   0518 FD 7D         dec b
0176   051A             ; s2++; 
0177   051A FA 07 00      lea d, [bp + 7] ; $s2
0178   051D 2A            mov b, [d]
0179   051E 38 00 00      mov c, 0
0180   0521 FD 77         inc b
0181   0523 FA 07 00      lea d, [bp + 7] ; $s2
0182   0526 FD 43         mov [d], b
0183   0528 FD 7D         dec b
0184   052A 0A D8 04      jmp _while2_cond
0185   052D             _while2_exit:
0186   052D             ; return *s1 - *s2; 
0187   052D FA 05 00      lea d, [bp + 5] ; $s1
0188   0530 2A            mov b, [d]
0189   0531 38 00 00      mov c, 0
0190   0534 74            mov d, b
0191   0535 32            mov bl, [d]
0192   0536 A7 00         mov bh, 0
0193   0538             ; --- START TERMS
0194   0538 D7            push a
0195   0539 11            mov a, b
0196   053A FA 07 00      lea d, [bp + 7] ; $s2
0197   053D 2A            mov b, [d]
0198   053E 38 00 00      mov c, 0
0199   0541 74            mov d, b
0200   0542 32            mov bl, [d]
0201   0543 A7 00         mov bh, 0
0202   0545 60            sub a, b
0203   0546 27            mov b, a
0204   0547 E4            pop a
0205   0548             ; --- END TERMS
0206   0548 F9            leave
0207   0549 09            ret
0208   054A             
0209   054A             strncmp:
0210   054A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0211   054D F9            leave
0212   054E 09            ret
0213   054F             
0214   054F             strcat:
0215   054F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0216   0552             ; int dest_len; 
0217   0552 52 02 00      sub sp, 2
0218   0555             ; int i; 
0219   0555 52 02 00      sub sp, 2
0220   0558             ; dest_len = strlen(dest); 
0221   0558 FA FF FF      lea d, [bp + -1] ; $dest_len
0222   055B DA            push d
0223   055C             ; --- START FUNCTION CALL
0224   055C FA 05 00      lea d, [bp + 5] ; $dest
0225   055F 2A            mov b, [d]
0226   0560 38 00 00      mov c, 0
0227   0563 FD AB         swp b
0228   0565 D8            push b
0229   0566 07 32 06      call strlen
0230   0569 51 02 00      add sp, 2
0231   056C             ; --- END FUNCTION CALL
0232   056C E7            pop d
0233   056D FD 43         mov [d], b
0234   056F             ; for (i = 0; src[i] != 0; i=i+1) { 
0235   056F             _for3_init:
0236   056F FA FD FF      lea d, [bp + -3] ; $i
0237   0572 DA            push d
0238   0573 26 00 00      mov b, $0
0239   0576 38 00 00      mov c, 0
0240   0579 E7            pop d
0241   057A FD 43         mov [d], b
0242   057C             _for3_cond:
0243   057C FA 07 00      lea d, [bp + 7] ; $src
0244   057F FD 2A         mov d, [d]
0245   0581 D7            push a
0246   0582 DA            push d
0247   0583 FA FD FF      lea d, [bp + -3] ; $i
0248   0586 2A            mov b, [d]
0249   0587 38 00 00      mov c, 0
0250   058A E7            pop d
0251   058B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0252   058F E4            pop a
0253   0590 32            mov bl, [d]
0254   0591 A7 00         mov bh, 0
0255   0593 38 00 00      mov c, 0
0256   0596             ; --- START RELATIONAL
0257   0596 D7            push a
0258   0597 11            mov a, b
0259   0598 26 00 00      mov b, $0
0260   059B 38 00 00      mov c, 0
0261   059E B0            cmp a, b
0262   059F FD 72         sneq ; !=
0263   05A1 E4            pop a
0264   05A2             ; --- END RELATIONAL
0265   05A2 C0 00 00      cmp b, 0
0266   05A5 C6 00 06      je _for3_exit
0267   05A8             _for3_block:
0268   05A8             ; dest[dest_len + i] = src[i]; 
0269   05A8 FA 05 00      lea d, [bp + 5] ; $dest
0270   05AB FD 2A         mov d, [d]
0271   05AD D7            push a
0272   05AE DA            push d
0273   05AF FA FF FF      lea d, [bp + -1] ; $dest_len
0274   05B2 2A            mov b, [d]
0275   05B3 38 00 00      mov c, 0
0276   05B6             ; --- START TERMS
0277   05B6 D7            push a
0278   05B7 11            mov a, b
0279   05B8 FA FD FF      lea d, [bp + -3] ; $i
0280   05BB 2A            mov b, [d]
0281   05BC 38 00 00      mov c, 0
0282   05BF 56            add b, a
0283   05C0 E4            pop a
0284   05C1             ; --- END TERMS
0285   05C1 E7            pop d
0286   05C2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0287   05C6 E4            pop a
0288   05C7 DA            push d
0289   05C8 FA 07 00      lea d, [bp + 7] ; $src
0290   05CB FD 2A         mov d, [d]
0291   05CD D7            push a
0292   05CE DA            push d
0293   05CF FA FD FF      lea d, [bp + -3] ; $i
0294   05D2 2A            mov b, [d]
0295   05D3 38 00 00      mov c, 0
0296   05D6 E7            pop d
0297   05D7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0298   05DB E4            pop a
0299   05DC 32            mov bl, [d]
0300   05DD A7 00         mov bh, 0
0301   05DF 38 00 00      mov c, 0
0302   05E2 E7            pop d
0303   05E3 FD 3E         mov [d], bl
0304   05E5             _for3_update:
0305   05E5 FA FD FF      lea d, [bp + -3] ; $i
0306   05E8 DA            push d
0307   05E9 FA FD FF      lea d, [bp + -3] ; $i
0308   05EC 2A            mov b, [d]
0309   05ED 38 00 00      mov c, 0
0310   05F0             ; --- START TERMS
0311   05F0 D7            push a
0312   05F1 11            mov a, b
0313   05F2 26 01 00      mov b, $1
0314   05F5 38 00 00      mov c, 0
0315   05F8 56            add b, a
0316   05F9 E4            pop a
0317   05FA             ; --- END TERMS
0318   05FA E7            pop d
0319   05FB FD 43         mov [d], b
0320   05FD 0A 7C 05      jmp _for3_cond
0321   0600             _for3_exit:
0322   0600             ; dest[dest_len + i] = 0; 
0323   0600 FA 05 00      lea d, [bp + 5] ; $dest
0324   0603 FD 2A         mov d, [d]
0325   0605 D7            push a
0326   0606 DA            push d
0327   0607 FA FF FF      lea d, [bp + -1] ; $dest_len
0328   060A 2A            mov b, [d]
0329   060B 38 00 00      mov c, 0
0330   060E             ; --- START TERMS
0331   060E D7            push a
0332   060F 11            mov a, b
0333   0610 FA FD FF      lea d, [bp + -3] ; $i
0334   0613 2A            mov b, [d]
0335   0614 38 00 00      mov c, 0
0336   0617 56            add b, a
0337   0618 E4            pop a
0338   0619             ; --- END TERMS
0339   0619 E7            pop d
0340   061A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0341   061E E4            pop a
0342   061F DA            push d
0343   0620 26 00 00      mov b, $0
0344   0623 38 00 00      mov c, 0
0345   0626 E7            pop d
0346   0627 FD 3E         mov [d], bl
0347   0629             ; return dest; 
0348   0629 FA 05 00      lea d, [bp + 5] ; $dest
0349   062C 2A            mov b, [d]
0350   062D 38 00 00      mov c, 0
0351   0630 F9            leave
0352   0631 09            ret
0353   0632             
0354   0632             strlen:
0355   0632 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0356   0635             ; int length; 
0357   0635 52 02 00      sub sp, 2
0358   0638             ; length = 0; 
0359   0638 FA FF FF      lea d, [bp + -1] ; $length
0360   063B DA            push d
0361   063C 26 00 00      mov b, $0
0362   063F 38 00 00      mov c, 0
0363   0642 E7            pop d
0364   0643 FD 43         mov [d], b
0365   0645             ; while (str[length] != 0) { 
0366   0645             _while4_cond:
0367   0645 FA 05 00      lea d, [bp + 5] ; $str
0368   0648 FD 2A         mov d, [d]
0369   064A D7            push a
0370   064B DA            push d
0371   064C FA FF FF      lea d, [bp + -1] ; $length
0372   064F 2A            mov b, [d]
0373   0650 38 00 00      mov c, 0
0374   0653 E7            pop d
0375   0654 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0376   0658 E4            pop a
0377   0659 32            mov bl, [d]
0378   065A A7 00         mov bh, 0
0379   065C 38 00 00      mov c, 0
0380   065F             ; --- START RELATIONAL
0381   065F D7            push a
0382   0660 11            mov a, b
0383   0661 26 00 00      mov b, $0
0384   0664 38 00 00      mov c, 0
0385   0667 B0            cmp a, b
0386   0668 FD 72         sneq ; !=
0387   066A E4            pop a
0388   066B             ; --- END RELATIONAL
0389   066B C0 00 00      cmp b, 0
0390   066E C6 84 06      je _while4_exit
0391   0671             _while4_block:
0392   0671             ; length++; 
0393   0671 FA FF FF      lea d, [bp + -1] ; $length
0394   0674 2A            mov b, [d]
0395   0675 38 00 00      mov c, 0
0396   0678 FD 77         inc b
0397   067A FA FF FF      lea d, [bp + -1] ; $length
0398   067D FD 43         mov [d], b
0399   067F FD 7D         dec b
0400   0681 0A 45 06      jmp _while4_cond
0401   0684             _while4_exit:
0402   0684             ; return length; 
0403   0684 FA FF FF      lea d, [bp + -1] ; $length
0404   0687 2A            mov b, [d]
0405   0688 38 00 00      mov c, 0
0406   068B F9            leave
0407   068C 09            ret
0408   068D             
0409   068D             exit:
0410   068D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0411   0690             
0412   0690             ; --- BEGIN INLINE ASM SEGMENT
0413   0690 05 0B         syscall sys_terminate_proc
0414   0692             ; --- END INLINE ASM SEGMENT
0415   0692             
0416   0692 F9            leave
0417   0693 09            ret
0418   0694             
0419   0694             memset:
0420   0694 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0421   0697             ; int i; 
0422   0697 52 02 00      sub sp, 2
0423   069A             ; for(i = 0; i < size; i++){ 
0424   069A             _for5_init:
0425   069A FA FF FF      lea d, [bp + -1] ; $i
0426   069D DA            push d
0427   069E 26 00 00      mov b, $0
0428   06A1 38 00 00      mov c, 0
0429   06A4 E7            pop d
0430   06A5 FD 43         mov [d], b
0431   06A7             _for5_cond:
0432   06A7 FA FF FF      lea d, [bp + -1] ; $i
0433   06AA 2A            mov b, [d]
0434   06AB 38 00 00      mov c, 0
0435   06AE             ; --- START RELATIONAL
0436   06AE D7            push a
0437   06AF 11            mov a, b
0438   06B0 FA 08 00      lea d, [bp + 8] ; $size
0439   06B3 2A            mov b, [d]
0440   06B4 38 00 00      mov c, 0
0441   06B7 B0            cmp a, b
0442   06B8 FD 73         slt ; < (signed)
0443   06BA E4            pop a
0444   06BB             ; --- END RELATIONAL
0445   06BB C0 00 00      cmp b, 0
0446   06BE C6 F3 06      je _for5_exit
0447   06C1             _for5_block:
0448   06C1             ; *(s+i) = c; 
0449   06C1 FA 05 00      lea d, [bp + 5] ; $s
0450   06C4 2A            mov b, [d]
0451   06C5 38 00 00      mov c, 0
0452   06C8             ; --- START TERMS
0453   06C8 D7            push a
0454   06C9 11            mov a, b
0455   06CA FA FF FF      lea d, [bp + -1] ; $i
0456   06CD 2A            mov b, [d]
0457   06CE 38 00 00      mov c, 0
0458   06D1 56            add b, a
0459   06D2 E4            pop a
0460   06D3             ; --- END TERMS
0461   06D3 D8            push b
0462   06D4 FA 07 00      lea d, [bp + 7] ; $c
0463   06D7 32            mov bl, [d]
0464   06D8 A7 00         mov bh, 0
0465   06DA 38 00 00      mov c, 0
0466   06DD E7            pop d
0467   06DE FD 3E         mov [d], bl
0468   06E0             _for5_update:
0469   06E0 FA FF FF      lea d, [bp + -1] ; $i
0470   06E3 2A            mov b, [d]
0471   06E4 38 00 00      mov c, 0
0472   06E7 FD 77         inc b
0473   06E9 FA FF FF      lea d, [bp + -1] ; $i
0474   06EC FD 43         mov [d], b
0475   06EE FD 7D         dec b
0476   06F0 0A A7 06      jmp _for5_cond
0477   06F3             _for5_exit:
0478   06F3             ; return s; 
0479   06F3 FA 05 00      lea d, [bp + 5] ; $s
0480   06F6 2A            mov b, [d]
0481   06F7 38 00 00      mov c, 0
0482   06FA F9            leave
0483   06FB 09            ret
0484   06FC             
0485   06FC             atoi:
0486   06FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0487   06FF             ; int result = 0;  // Initialize result 
0488   06FF 52 02 00      sub sp, 2
0489   0702             ; --- START LOCAL VAR INITIALIZATION
0490   0702 FA FF FF      lea d, [bp + -1] ; $result
0491   0705 DA            push d
0492   0706 26 00 00      mov b, $0
0493   0709 38 00 00      mov c, 0
0494   070C E7            pop d
0495   070D FD 43         mov [d], b
0496   070F             ; --- END LOCAL VAR INITIALIZATION
0497   070F             ; int sign = 1;    // Initialize sign as positive 
0498   070F 52 02 00      sub sp, 2
0499   0712             ; --- START LOCAL VAR INITIALIZATION
0500   0712 FA FD FF      lea d, [bp + -3] ; $sign
0501   0715 DA            push d
0502   0716 26 01 00      mov b, $1
0503   0719 38 00 00      mov c, 0
0504   071C E7            pop d
0505   071D FD 43         mov [d], b
0506   071F             ; --- END LOCAL VAR INITIALIZATION
0507   071F             ; while (*str == ' ') str++; 
0508   071F             _while6_cond:
0509   071F FA 05 00      lea d, [bp + 5] ; $str
0510   0722 2A            mov b, [d]
0511   0723 38 00 00      mov c, 0
0512   0726 74            mov d, b
0513   0727 32            mov bl, [d]
0514   0728 A7 00         mov bh, 0
0515   072A             ; --- START RELATIONAL
0516   072A D7            push a
0517   072B 11            mov a, b
0518   072C 26 20 00      mov b, $20
0519   072F 38 00 00      mov c, 0
0520   0732 B0            cmp a, b
0521   0733 FD 71         seq ; ==
0522   0735 E4            pop a
0523   0736             ; --- END RELATIONAL
0524   0736 C0 00 00      cmp b, 0
0525   0739 C6 4F 07      je _while6_exit
0526   073C             _while6_block:
0527   073C             ; str++; 
0528   073C FA 05 00      lea d, [bp + 5] ; $str
0529   073F 2A            mov b, [d]
0530   0740 38 00 00      mov c, 0
0531   0743 FD 77         inc b
0532   0745 FA 05 00      lea d, [bp + 5] ; $str
0533   0748 FD 43         mov [d], b
0534   074A FD 7D         dec b
0535   074C 0A 1F 07      jmp _while6_cond
0536   074F             _while6_exit:
0537   074F             ; if (*str == '-' || *str == '+') { 
0538   074F             _if7_cond:
0539   074F FA 05 00      lea d, [bp + 5] ; $str
0540   0752 2A            mov b, [d]
0541   0753 38 00 00      mov c, 0
0542   0756 74            mov d, b
0543   0757 32            mov bl, [d]
0544   0758 A7 00         mov bh, 0
0545   075A             ; --- START RELATIONAL
0546   075A D7            push a
0547   075B 11            mov a, b
0548   075C 26 2D 00      mov b, $2d
0549   075F 38 00 00      mov c, 0
0550   0762 B0            cmp a, b
0551   0763 FD 71         seq ; ==
0552   0765 E4            pop a
0553   0766             ; --- END RELATIONAL
0554   0766             ; --- START LOGICAL OR
0555   0766 D7            push a
0556   0767 11            mov a, b
0557   0768 FA 05 00      lea d, [bp + 5] ; $str
0558   076B 2A            mov b, [d]
0559   076C 38 00 00      mov c, 0
0560   076F 74            mov d, b
0561   0770 32            mov bl, [d]
0562   0771 A7 00         mov bh, 0
0563   0773             ; --- START RELATIONAL
0564   0773 D7            push a
0565   0774 11            mov a, b
0566   0775 26 2B 00      mov b, $2b
0567   0778 38 00 00      mov c, 0
0568   077B B0            cmp a, b
0569   077C FD 71         seq ; ==
0570   077E E4            pop a
0571   077F             ; --- END RELATIONAL
0572   077F FD A8         sor a, b ; ||
0573   0781 E4            pop a
0574   0782             ; --- END LOGICAL OR
0575   0782 C0 00 00      cmp b, 0
0576   0785 C6 CA 07      je _if7_exit
0577   0788             _if7_true:
0578   0788             ; if (*str == '-') sign = -1; 
0579   0788             _if8_cond:
0580   0788 FA 05 00      lea d, [bp + 5] ; $str
0581   078B 2A            mov b, [d]
0582   078C 38 00 00      mov c, 0
0583   078F 74            mov d, b
0584   0790 32            mov bl, [d]
0585   0791 A7 00         mov bh, 0
0586   0793             ; --- START RELATIONAL
0587   0793 D7            push a
0588   0794 11            mov a, b
0589   0795 26 2D 00      mov b, $2d
0590   0798 38 00 00      mov c, 0
0591   079B B0            cmp a, b
0592   079C FD 71         seq ; ==
0593   079E E4            pop a
0594   079F             ; --- END RELATIONAL
0595   079F C0 00 00      cmp b, 0
0596   07A2 C6 B7 07      je _if8_exit
0597   07A5             _if8_true:
0598   07A5             ; sign = -1; 
0599   07A5 FA FD FF      lea d, [bp + -3] ; $sign
0600   07A8 DA            push d
0601   07A9 26 01 00      mov b, $1
0602   07AC 38 00 00      mov c, 0
0603   07AF FD 97         neg b
0604   07B1 E7            pop d
0605   07B2 FD 43         mov [d], b
0606   07B4 0A B7 07      jmp _if8_exit
0607   07B7             _if8_exit:
0608   07B7             ; str++; 
0609   07B7 FA 05 00      lea d, [bp + 5] ; $str
0610   07BA 2A            mov b, [d]
0611   07BB 38 00 00      mov c, 0
0612   07BE FD 77         inc b
0613   07C0 FA 05 00      lea d, [bp + 5] ; $str
0614   07C3 FD 43         mov [d], b
0615   07C5 FD 7D         dec b
0616   07C7 0A CA 07      jmp _if7_exit
0617   07CA             _if7_exit:
0618   07CA             ; while (*str >= '0' && *str <= '9') { 
0619   07CA             _while9_cond:
0620   07CA FA 05 00      lea d, [bp + 5] ; $str
0621   07CD 2A            mov b, [d]
0622   07CE 38 00 00      mov c, 0
0623   07D1 74            mov d, b
0624   07D2 32            mov bl, [d]
0625   07D3 A7 00         mov bh, 0
0626   07D5             ; --- START RELATIONAL
0627   07D5 D7            push a
0628   07D6 11            mov a, b
0629   07D7 26 30 00      mov b, $30
0630   07DA 38 00 00      mov c, 0
0631   07DD B0            cmp a, b
0632   07DE FD 82         sgeu ; >= (unsigned)
0633   07E0 E4            pop a
0634   07E1             ; --- END RELATIONAL
0635   07E1             ; --- START LOGICAL AND
0636   07E1 D7            push a
0637   07E2 11            mov a, b
0638   07E3 FA 05 00      lea d, [bp + 5] ; $str
0639   07E6 2A            mov b, [d]
0640   07E7 38 00 00      mov c, 0
0641   07EA 74            mov d, b
0642   07EB 32            mov bl, [d]
0643   07EC A7 00         mov bh, 0
0644   07EE             ; --- START RELATIONAL
0645   07EE D7            push a
0646   07EF 11            mov a, b
0647   07F0 26 39 00      mov b, $39
0648   07F3 38 00 00      mov c, 0
0649   07F6 B0            cmp a, b
0650   07F7 FD 76         sleu ; <= (unsigned)
0651   07F9 E4            pop a
0652   07FA             ; --- END RELATIONAL
0653   07FA FD A7         sand a, b
0654   07FC E4            pop a
0655   07FD             ; --- END LOGICAL AND
0656   07FD C0 00 00      cmp b, 0
0657   0800 C6 4A 08      je _while9_exit
0658   0803             _while9_block:
0659   0803             ; result = result * 10 + (*str - '0'); 
0660   0803 FA FF FF      lea d, [bp + -1] ; $result
0661   0806 DA            push d
0662   0807 FA FF FF      lea d, [bp + -1] ; $result
0663   080A 2A            mov b, [d]
0664   080B 38 00 00      mov c, 0
0665   080E             ; --- START FACTORS
0666   080E D7            push a
0667   080F 11            mov a, b
0668   0810 26 0A 00      mov b, $a
0669   0813 38 00 00      mov c, 0
0670   0816 AC            mul a, b ; *
0671   0817 11            mov a, b
0672   0818 27            mov b, a
0673   0819 E4            pop a
0674   081A             ; --- END FACTORS
0675   081A             ; --- START TERMS
0676   081A D7            push a
0677   081B 11            mov a, b
0678   081C FA 05 00      lea d, [bp + 5] ; $str
0679   081F 2A            mov b, [d]
0680   0820 38 00 00      mov c, 0
0681   0823 74            mov d, b
0682   0824 32            mov bl, [d]
0683   0825 A7 00         mov bh, 0
0684   0827             ; --- START TERMS
0685   0827 D7            push a
0686   0828 11            mov a, b
0687   0829 26 30 00      mov b, $30
0688   082C 38 00 00      mov c, 0
0689   082F 60            sub a, b
0690   0830 27            mov b, a
0691   0831 E4            pop a
0692   0832             ; --- END TERMS
0693   0832 56            add b, a
0694   0833 E4            pop a
0695   0834             ; --- END TERMS
0696   0834 E7            pop d
0697   0835 FD 43         mov [d], b
0698   0837             ; str++; 
0699   0837 FA 05 00      lea d, [bp + 5] ; $str
0700   083A 2A            mov b, [d]
0701   083B 38 00 00      mov c, 0
0702   083E FD 77         inc b
0703   0840 FA 05 00      lea d, [bp + 5] ; $str
0704   0843 FD 43         mov [d], b
0705   0845 FD 7D         dec b
0706   0847 0A CA 07      jmp _while9_cond
0707   084A             _while9_exit:
0708   084A             ; return sign * result; 
0709   084A FA FD FF      lea d, [bp + -3] ; $sign
0710   084D 2A            mov b, [d]
0711   084E 38 00 00      mov c, 0
0712   0851             ; --- START FACTORS
0713   0851 D7            push a
0714   0852 11            mov a, b
0715   0853 FA FF FF      lea d, [bp + -1] ; $result
0716   0856 2A            mov b, [d]
0717   0857 38 00 00      mov c, 0
0718   085A AC            mul a, b ; *
0719   085B 11            mov a, b
0720   085C 27            mov b, a
0721   085D E4            pop a
0722   085E             ; --- END FACTORS
0723   085E F9            leave
0724   085F 09            ret
0725   0860             
0726   0860             rand:
0727   0860 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0728   0863             ; int  sec; 
0729   0863 52 02 00      sub sp, 2
0730   0866             
0731   0866             ; --- BEGIN INLINE ASM SEGMENT
0732   0866 19 00         mov al, 0
0733   0868 05 01         syscall sys_rtc					
0734   086A 1A            mov al, ah
0735   086B FA FF FF      lea d, [bp + -1] ; $sec
0736   086E 1E            mov al, [d]
0737   086F 22 00         mov ah, 0
0738   0871             ; --- END INLINE ASM SEGMENT
0739   0871             
0740   0871             ; return sec; 
0741   0871 FA FF FF      lea d, [bp + -1] ; $sec
0742   0874 2A            mov b, [d]
0743   0875 38 00 00      mov c, 0
0744   0878 F9            leave
0745   0879 09            ret
0746   087A             
0747   087A             alloc:
0748   087A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0749   087D             ; heap_top = heap_top + bytes; 
0750   087D 3B 6F 21      mov d, _heap_top ; $heap_top
0751   0880 DA            push d
0752   0881 3B 6F 21      mov d, _heap_top ; $heap_top
0753   0884 2A            mov b, [d]
0754   0885 38 00 00      mov c, 0
0755   0888             ; --- START TERMS
0756   0888 D7            push a
0757   0889 11            mov a, b
0758   088A FA 05 00      lea d, [bp + 5] ; $bytes
0759   088D 2A            mov b, [d]
0760   088E 38 00 00      mov c, 0
0761   0891 56            add b, a
0762   0892 E4            pop a
0763   0893             ; --- END TERMS
0764   0893 E7            pop d
0765   0894 FD 43         mov [d], b
0766   0896             ; return heap_top - bytes; 
0767   0896 3B 6F 21      mov d, _heap_top ; $heap_top
0768   0899 2A            mov b, [d]
0769   089A 38 00 00      mov c, 0
0770   089D             ; --- START TERMS
0771   089D D7            push a
0772   089E 11            mov a, b
0773   089F FA 05 00      lea d, [bp + 5] ; $bytes
0774   08A2 2A            mov b, [d]
0775   08A3 38 00 00      mov c, 0
0776   08A6 60            sub a, b
0777   08A7 27            mov b, a
0778   08A8 E4            pop a
0779   08A9             ; --- END TERMS
0780   08A9 F9            leave
0781   08AA 09            ret
0782   08AB             
0783   08AB             free:
0784   08AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0785   08AE             ; return heap_top = heap_top - bytes; 
0786   08AE 3B 6F 21      mov d, _heap_top ; $heap_top
0787   08B1 DA            push d
0788   08B2 3B 6F 21      mov d, _heap_top ; $heap_top
0789   08B5 2A            mov b, [d]
0790   08B6 38 00 00      mov c, 0
0791   08B9             ; --- START TERMS
0792   08B9 D7            push a
0793   08BA 11            mov a, b
0794   08BB FA 05 00      lea d, [bp + 5] ; $bytes
0795   08BE 2A            mov b, [d]
0796   08BF 38 00 00      mov c, 0
0797   08C2 60            sub a, b
0798   08C3 27            mov b, a
0799   08C4 E4            pop a
0800   08C5             ; --- END TERMS
0801   08C5 E7            pop d
0802   08C6 FD 43         mov [d], b
0803   08C8 F9            leave
0804   08C9 09            ret
0805   08CA             
0806   08CA             fopen:
0807   08CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0808   08CD             ; FILE *fp; 
0809   08CD 52 02 00      sub sp, 2
0810   08D0             ; static int max_handle = 0; 
0811   08D0 52 02 00      sub sp, 2
0812   08D3             ; fp = alloc(sizeof(FILE)); 
0813   08D3 FA FF FF      lea d, [bp + -1] ; $fp
0814   08D6 DA            push d
0815   08D7             ; --- START FUNCTION CALL
0816   08D7 26 04 01      mov b, 260
0817   08DA FD AB         swp b
0818   08DC D8            push b
0819   08DD 07 7A 08      call alloc
0820   08E0 51 02 00      add sp, 2
0821   08E3             ; --- END FUNCTION CALL
0822   08E3 E7            pop d
0823   08E4 FD 43         mov [d], b
0824   08E6             ; strcpy(fp->filename, filename); 
0825   08E6             ; --- START FUNCTION CALL
0826   08E6 FA 05 00      lea d, [bp + 5] ; $filename
0827   08E9 2A            mov b, [d]
0828   08EA 38 00 00      mov c, 0
0829   08ED FD AB         swp b
0830   08EF D8            push b
0831   08F0 FA FF FF      lea d, [bp + -1] ; $fp
0832   08F3 FD 2A         mov d, [d]
0833   08F5 58 02 00      add d, 2
0834   08F8 2D            mov b, d
0835   08F9 38 00 00      mov c, 0
0836   08FC FD AB         swp b
0837   08FE D8            push b
0838   08FF 07 61 04      call strcpy
0839   0902 51 04 00      add sp, 4
0840   0905             ; --- END FUNCTION CALL
0841   0905             ; fp->handle = max_handle; 
0842   0905 FA FF FF      lea d, [bp + -1] ; $fp
0843   0908 FD 2A         mov d, [d]
0844   090A 58 00 00      add d, 0
0845   090D DA            push d
0846   090E 3B 29 21      mov d, st_fopen_max_handle ; static max_handle
0847   0911 2A            mov b, [d]
0848   0912 38 00 00      mov c, 0
0849   0915 E7            pop d
0850   0916 FD 43         mov [d], b
0851   0918             ; fp->mode = mode; 
0852   0918 FA FF FF      lea d, [bp + -1] ; $fp
0853   091B FD 2A         mov d, [d]
0854   091D 58 02 01      add d, 258
0855   0920 DA            push d
0856   0921 FA 07 00      lea d, [bp + 7] ; $mode
0857   0924 32            mov bl, [d]
0858   0925 A7 00         mov bh, 0
0859   0927 38 00 00      mov c, 0
0860   092A E7            pop d
0861   092B FD 3E         mov [d], bl
0862   092D             ; fp->loc = 0; 
0863   092D FA FF FF      lea d, [bp + -1] ; $fp
0864   0930 FD 2A         mov d, [d]
0865   0932 58 03 01      add d, 259
0866   0935 DA            push d
0867   0936 26 00 00      mov b, $0
0868   0939 38 00 00      mov c, 0
0869   093C E7            pop d
0870   093D FD 3E         mov [d], bl
0871   093F             ; max_handle++; 
0872   093F 3B 29 21      mov d, st_fopen_max_handle ; static max_handle
0873   0942 2A            mov b, [d]
0874   0943 38 00 00      mov c, 0
0875   0946 FD 77         inc b
0876   0948 3B 29 21      mov d, st_fopen_max_handle ; static max_handle
0877   094B FD 43         mov [d], b
0878   094D FD 7D         dec b
0879   094F F9            leave
0880   0950 09            ret
0881   0951             
0882   0951             fclose:
0883   0951 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0884   0954             ; free(sizeof(FILE)); 
0885   0954             ; --- START FUNCTION CALL
0886   0954 26 04 01      mov b, 260
0887   0957 FD AB         swp b
0888   0959 D8            push b
0889   095A 07 AB 08      call free
0890   095D 51 02 00      add sp, 2
0891   0960             ; --- END FUNCTION CALL
0892   0960 F9            leave
0893   0961 09            ret
0894   0962             
0895   0962             printf:
0896   0962 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0897   0965             ; char *p, *format_p; 
0898   0965 52 02 00      sub sp, 2
0899   0968 52 02 00      sub sp, 2
0900   096B             ; format_p = format; 
0901   096B FA FD FF      lea d, [bp + -3] ; $format_p
0902   096E DA            push d
0903   096F FA 05 00      lea d, [bp + 5] ; $format
0904   0972 2A            mov b, [d]
0905   0973 38 00 00      mov c, 0
0906   0976 E7            pop d
0907   0977 FD 43         mov [d], b
0908   0979             ; p = &format + 2; 
0909   0979 FA FF FF      lea d, [bp + -1] ; $p
0910   097C DA            push d
0911   097D FA 05 00      lea d, [bp + 5] ; $format
0912   0980 2D            mov b, d
0913   0981             ; --- START TERMS
0914   0981 D7            push a
0915   0982 11            mov a, b
0916   0983 26 02 00      mov b, $2
0917   0986 38 00 00      mov c, 0
0918   0989 56            add b, a
0919   098A E4            pop a
0920   098B             ; --- END TERMS
0921   098B E7            pop d
0922   098C FD 43         mov [d], b
0923   098E             ; for(;;){ 
0924   098E             _for10_init:
0925   098E             _for10_cond:
0926   098E             _for10_block:
0927   098E             ; if(!*format_p) break; 
0928   098E             _if11_cond:
0929   098E FA FD FF      lea d, [bp + -3] ; $format_p
0930   0991 2A            mov b, [d]
0931   0992 38 00 00      mov c, 0
0932   0995 74            mov d, b
0933   0996 32            mov bl, [d]
0934   0997 A7 00         mov bh, 0
0935   0999 C0 00 00      cmp b, 0
0936   099C FD 71         seq ; !
0937   099E C0 00 00      cmp b, 0
0938   09A1 C6 AA 09      je _if11_else
0939   09A4             _if11_true:
0940   09A4             ; break; 
0941   09A4 0A 28 0C      jmp _for10_exit ; for break
0942   09A7 0A 25 0C      jmp _if11_exit
0943   09AA             _if11_else:
0944   09AA             ; if(*format_p == '%'){ 
0945   09AA             _if12_cond:
0946   09AA FA FD FF      lea d, [bp + -3] ; $format_p
0947   09AD 2A            mov b, [d]
0948   09AE 38 00 00      mov c, 0
0949   09B1 74            mov d, b
0950   09B2 32            mov bl, [d]
0951   09B3 A7 00         mov bh, 0
0952   09B5             ; --- START RELATIONAL
0953   09B5 D7            push a
0954   09B6 11            mov a, b
0955   09B7 26 25 00      mov b, $25
0956   09BA 38 00 00      mov c, 0
0957   09BD B0            cmp a, b
0958   09BE FD 71         seq ; ==
0959   09C0 E4            pop a
0960   09C1             ; --- END RELATIONAL
0961   09C1 C0 00 00      cmp b, 0
0962   09C4 C6 03 0C      je _if12_else
0963   09C7             _if12_true:
0964   09C7             ; format_p++; 
0965   09C7 FA FD FF      lea d, [bp + -3] ; $format_p
0966   09CA 2A            mov b, [d]
0967   09CB 38 00 00      mov c, 0
0968   09CE FD 77         inc b
0969   09D0 FA FD FF      lea d, [bp + -3] ; $format_p
0970   09D3 FD 43         mov [d], b
0971   09D5 FD 7D         dec b
0972   09D7             ; switch(*format_p){ 
0973   09D7             _switch13_expr:
0974   09D7 FA FD FF      lea d, [bp + -3] ; $format_p
0975   09DA 2A            mov b, [d]
0976   09DB 38 00 00      mov c, 0
0977   09DE 74            mov d, b
0978   09DF 32            mov bl, [d]
0979   09E0 A7 00         mov bh, 0
0980   09E2             _switch13_comparisons:
0981   09E2 C1 6C         cmp bl, $6c
0982   09E4 C6 10 0A      je _switch13_case0
0983   09E7 C1 4C         cmp bl, $4c
0984   09E9 C6 10 0A      je _switch13_case1
0985   09EC C1 64         cmp bl, $64
0986   09EE C6 1C 0B      je _switch13_case2
0987   09F1 C1 69         cmp bl, $69
0988   09F3 C6 1C 0B      je _switch13_case3
0989   09F6 C1 75         cmp bl, $75
0990   09F8 C6 49 0B      je _switch13_case4
0991   09FB C1 78         cmp bl, $78
0992   09FD C6 76 0B      je _switch13_case5
0993   0A00 C1 63         cmp bl, $63
0994   0A02 C6 9A 0B      je _switch13_case6
0995   0A05 C1 73         cmp bl, $73
0996   0A07 C6 BF 0B      je _switch13_case7
0997   0A0A 0A E4 0B      jmp _switch13_default
0998   0A0D 0A F0 0B      jmp _switch13_exit
0999   0A10             _switch13_case0:
1000   0A10             _switch13_case1:
1001   0A10             ; format_p++; 
1002   0A10 FA FD FF      lea d, [bp + -3] ; $format_p
1003   0A13 2A            mov b, [d]
1004   0A14 38 00 00      mov c, 0
1005   0A17 FD 77         inc b
1006   0A19 FA FD FF      lea d, [bp + -3] ; $format_p
1007   0A1C FD 43         mov [d], b
1008   0A1E FD 7D         dec b
1009   0A20             ; if(*format_p == 'd' || *format_p == 'i') 
1010   0A20             _if14_cond:
1011   0A20 FA FD FF      lea d, [bp + -3] ; $format_p
1012   0A23 2A            mov b, [d]
1013   0A24 38 00 00      mov c, 0
1014   0A27 74            mov d, b
1015   0A28 32            mov bl, [d]
1016   0A29 A7 00         mov bh, 0
1017   0A2B             ; --- START RELATIONAL
1018   0A2B D7            push a
1019   0A2C 11            mov a, b
1020   0A2D 26 64 00      mov b, $64
1021   0A30 38 00 00      mov c, 0
1022   0A33 B0            cmp a, b
1023   0A34 FD 71         seq ; ==
1024   0A36 E4            pop a
1025   0A37             ; --- END RELATIONAL
1026   0A37             ; --- START LOGICAL OR
1027   0A37 D7            push a
1028   0A38 11            mov a, b
1029   0A39 FA FD FF      lea d, [bp + -3] ; $format_p
1030   0A3C 2A            mov b, [d]
1031   0A3D 38 00 00      mov c, 0
1032   0A40 74            mov d, b
1033   0A41 32            mov bl, [d]
1034   0A42 A7 00         mov bh, 0
1035   0A44             ; --- START RELATIONAL
1036   0A44 D7            push a
1037   0A45 11            mov a, b
1038   0A46 26 69 00      mov b, $69
1039   0A49 38 00 00      mov c, 0
1040   0A4C B0            cmp a, b
1041   0A4D FD 71         seq ; ==
1042   0A4F E4            pop a
1043   0A50             ; --- END RELATIONAL
1044   0A50 FD A8         sor a, b ; ||
1045   0A52 E4            pop a
1046   0A53             ; --- END LOGICAL OR
1047   0A53 C0 00 00      cmp b, 0
1048   0A56 C6 7A 0A      je _if14_else
1049   0A59             _if14_true:
1050   0A59             ; print_signed_long(*(long *)p); 
1051   0A59             ; --- START FUNCTION CALL
1052   0A59 FA FF FF      lea d, [bp + -1] ; $p
1053   0A5C 2A            mov b, [d]
1054   0A5D 38 00 00      mov c, 0
1055   0A60 AB            snex b
1056   0A61 FD 39         mov c, b
1057   0A63 74            mov d, b
1058   0A64 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1059   0A67 FD 39         mov c, b ; And place it into C
1060   0A69 2A            mov b, [d] ; Lower Word in B
1061   0A6A 12            mov a, c
1062   0A6B FD AA         swp a
1063   0A6D D7            push a
1064   0A6E FD AB         swp b
1065   0A70 D8            push b
1066   0A71 07 C6 15      call print_signed_long
1067   0A74 51 04 00      add sp, 4
1068   0A77             ; --- END FUNCTION CALL
1069   0A77 0A 01 0B      jmp _if14_exit
1070   0A7A             _if14_else:
1071   0A7A             ; if(*format_p == 'u') 
1072   0A7A             _if15_cond:
1073   0A7A FA FD FF      lea d, [bp + -3] ; $format_p
1074   0A7D 2A            mov b, [d]
1075   0A7E 38 00 00      mov c, 0
1076   0A81 74            mov d, b
1077   0A82 32            mov bl, [d]
1078   0A83 A7 00         mov bh, 0
1079   0A85             ; --- START RELATIONAL
1080   0A85 D7            push a
1081   0A86 11            mov a, b
1082   0A87 26 75 00      mov b, $75
1083   0A8A 38 00 00      mov c, 0
1084   0A8D B0            cmp a, b
1085   0A8E FD 71         seq ; ==
1086   0A90 E4            pop a
1087   0A91             ; --- END RELATIONAL
1088   0A91 C0 00 00      cmp b, 0
1089   0A94 C6 BA 0A      je _if15_else
1090   0A97             _if15_true:
1091   0A97             ; print_unsigned_long(*(unsigned long *)p); 
1092   0A97             ; --- START FUNCTION CALL
1093   0A97 FA FF FF      lea d, [bp + -1] ; $p
1094   0A9A 2A            mov b, [d]
1095   0A9B 38 00 00      mov c, 0
1096   0A9E A7 00         mov bh, 0
1097   0AA0 38 00 00      mov c, 0
1098   0AA3 74            mov d, b
1099   0AA4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1100   0AA7 FD 39         mov c, b ; And place it into C
1101   0AA9 2A            mov b, [d] ; Lower Word in B
1102   0AAA 12            mov a, c
1103   0AAB FD AA         swp a
1104   0AAD D7            push a
1105   0AAE FD AB         swp b
1106   0AB0 D8            push b
1107   0AB1 07 36 17      call print_unsigned_long
1108   0AB4 51 04 00      add sp, 4
1109   0AB7             ; --- END FUNCTION CALL
1110   0AB7 0A 01 0B      jmp _if15_exit
1111   0ABA             _if15_else:
1112   0ABA             ; if(*format_p == 'x') 
1113   0ABA             _if16_cond:
1114   0ABA FA FD FF      lea d, [bp + -3] ; $format_p
1115   0ABD 2A            mov b, [d]
1116   0ABE 38 00 00      mov c, 0
1117   0AC1 74            mov d, b
1118   0AC2 32            mov bl, [d]
1119   0AC3 A7 00         mov bh, 0
1120   0AC5             ; --- START RELATIONAL
1121   0AC5 D7            push a
1122   0AC6 11            mov a, b
1123   0AC7 26 78 00      mov b, $78
1124   0ACA 38 00 00      mov c, 0
1125   0ACD B0            cmp a, b
1126   0ACE FD 71         seq ; ==
1127   0AD0 E4            pop a
1128   0AD1             ; --- END RELATIONAL
1129   0AD1 C0 00 00      cmp b, 0
1130   0AD4 C6 F5 0A      je _if16_else
1131   0AD7             _if16_true:
1132   0AD7             ; printx32(*(long int *)p); 
1133   0AD7             ; --- START FUNCTION CALL
1134   0AD7 FA FF FF      lea d, [bp + -1] ; $p
1135   0ADA 2A            mov b, [d]
1136   0ADB 38 00 00      mov c, 0
1137   0ADE 74            mov d, b
1138   0ADF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1139   0AE2 FD 39         mov c, b ; And place it into C
1140   0AE4 2A            mov b, [d] ; Lower Word in B
1141   0AE5 12            mov a, c
1142   0AE6 FD AA         swp a
1143   0AE8 D7            push a
1144   0AE9 FD AB         swp b
1145   0AEB D8            push b
1146   0AEC 07 99 12      call printx32
1147   0AEF 51 04 00      add sp, 4
1148   0AF2             ; --- END FUNCTION CALL
1149   0AF2 0A 01 0B      jmp _if16_exit
1150   0AF5             _if16_else:
1151   0AF5             ; err("Unexpected format in printf."); 
1152   0AF5             ; --- START FUNCTION CALL
1153   0AF5 26 2B 21      mov b, _s0 ; "Unexpected format in printf."
1154   0AF8 FD AB         swp b
1155   0AFA D8            push b
1156   0AFB 07 84 12      call err
1157   0AFE 51 02 00      add sp, 2
1158   0B01             ; --- END FUNCTION CALL
1159   0B01             _if16_exit:
1160   0B01             _if15_exit:
1161   0B01             _if14_exit:
1162   0B01             ; p = p + 4; 
1163   0B01 FA FF FF      lea d, [bp + -1] ; $p
1164   0B04 DA            push d
1165   0B05 FA FF FF      lea d, [bp + -1] ; $p
1166   0B08 2A            mov b, [d]
1167   0B09 38 00 00      mov c, 0
1168   0B0C             ; --- START TERMS
1169   0B0C D7            push a
1170   0B0D 11            mov a, b
1171   0B0E 26 04 00      mov b, $4
1172   0B11 38 00 00      mov c, 0
1173   0B14 56            add b, a
1174   0B15 E4            pop a
1175   0B16             ; --- END TERMS
1176   0B16 E7            pop d
1177   0B17 FD 43         mov [d], b
1178   0B19             ; break; 
1179   0B19 0A F0 0B      jmp _switch13_exit ; case break
1180   0B1C             _switch13_case2:
1181   0B1C             _switch13_case3:
1182   0B1C             ; print_signed(*(int*)p); 
1183   0B1C             ; --- START FUNCTION CALL
1184   0B1C FA FF FF      lea d, [bp + -1] ; $p
1185   0B1F 2A            mov b, [d]
1186   0B20 38 00 00      mov c, 0
1187   0B23 74            mov d, b
1188   0B24 2A            mov b, [d]
1189   0B25 FD AB         swp b
1190   0B27 D8            push b
1191   0B28 07 8D 14      call print_signed
1192   0B2B 51 02 00      add sp, 2
1193   0B2E             ; --- END FUNCTION CALL
1194   0B2E             ; p = p + 2; 
1195   0B2E FA FF FF      lea d, [bp + -1] ; $p
1196   0B31 DA            push d
1197   0B32 FA FF FF      lea d, [bp + -1] ; $p
1198   0B35 2A            mov b, [d]
1199   0B36 38 00 00      mov c, 0
1200   0B39             ; --- START TERMS
1201   0B39 D7            push a
1202   0B3A 11            mov a, b
1203   0B3B 26 02 00      mov b, $2
1204   0B3E 38 00 00      mov c, 0
1205   0B41 56            add b, a
1206   0B42 E4            pop a
1207   0B43             ; --- END TERMS
1208   0B43 E7            pop d
1209   0B44 FD 43         mov [d], b
1210   0B46             ; break; 
1211   0B46 0A F0 0B      jmp _switch13_exit ; case break
1212   0B49             _switch13_case4:
1213   0B49             ; print_unsigned(*(unsigned int*)p); 
1214   0B49             ; --- START FUNCTION CALL
1215   0B49 FA FF FF      lea d, [bp + -1] ; $p
1216   0B4C 2A            mov b, [d]
1217   0B4D 38 00 00      mov c, 0
1218   0B50 74            mov d, b
1219   0B51 2A            mov b, [d]
1220   0B52 FD AB         swp b
1221   0B54 D8            push b
1222   0B55 07 B0 19      call print_unsigned
1223   0B58 51 02 00      add sp, 2
1224   0B5B             ; --- END FUNCTION CALL
1225   0B5B             ; p = p + 2; 
1226   0B5B FA FF FF      lea d, [bp + -1] ; $p
1227   0B5E DA            push d
1228   0B5F FA FF FF      lea d, [bp + -1] ; $p
1229   0B62 2A            mov b, [d]
1230   0B63 38 00 00      mov c, 0
1231   0B66             ; --- START TERMS
1232   0B66 D7            push a
1233   0B67 11            mov a, b
1234   0B68 26 02 00      mov b, $2
1235   0B6B 38 00 00      mov c, 0
1236   0B6E 56            add b, a
1237   0B6F E4            pop a
1238   0B70             ; --- END TERMS
1239   0B70 E7            pop d
1240   0B71 FD 43         mov [d], b
1241   0B73             ; break; 
1242   0B73 0A F0 0B      jmp _switch13_exit ; case break
1243   0B76             _switch13_case5:
1244   0B76             
1245   0B76             ; --- BEGIN INLINE ASM SEGMENT
1246   0B76 FA FF FF      lea d, [bp + -1] ; $p
1247   0B79 FD 2A         mov d, [d]
1248   0B7B 2A            mov b, [d]
1249   0B7C 07 29 20      call print_u16x
1250   0B7F             ; --- END INLINE ASM SEGMENT
1251   0B7F             
1252   0B7F             ; p = p + 2; 
1253   0B7F FA FF FF      lea d, [bp + -1] ; $p
1254   0B82 DA            push d
1255   0B83 FA FF FF      lea d, [bp + -1] ; $p
1256   0B86 2A            mov b, [d]
1257   0B87 38 00 00      mov c, 0
1258   0B8A             ; --- START TERMS
1259   0B8A D7            push a
1260   0B8B 11            mov a, b
1261   0B8C 26 02 00      mov b, $2
1262   0B8F 38 00 00      mov c, 0
1263   0B92 56            add b, a
1264   0B93 E4            pop a
1265   0B94             ; --- END TERMS
1266   0B94 E7            pop d
1267   0B95 FD 43         mov [d], b
1268   0B97             ; break; 
1269   0B97 0A F0 0B      jmp _switch13_exit ; case break
1270   0B9A             _switch13_case6:
1271   0B9A             
1272   0B9A             ; --- BEGIN INLINE ASM SEGMENT
1273   0B9A FA FF FF      lea d, [bp + -1] ; $p
1274   0B9D FD 2A         mov d, [d]
1275   0B9F 1E            mov al, [d]
1276   0BA0 23            mov ah, al
1277   0BA1 07 87 1E      call _putchar
1278   0BA4             ; --- END INLINE ASM SEGMENT
1279   0BA4             
1280   0BA4             ; p = p + 1; 
1281   0BA4 FA FF FF      lea d, [bp + -1] ; $p
1282   0BA7 DA            push d
1283   0BA8 FA FF FF      lea d, [bp + -1] ; $p
1284   0BAB 2A            mov b, [d]
1285   0BAC 38 00 00      mov c, 0
1286   0BAF             ; --- START TERMS
1287   0BAF D7            push a
1288   0BB0 11            mov a, b
1289   0BB1 26 01 00      mov b, $1
1290   0BB4 38 00 00      mov c, 0
1291   0BB7 56            add b, a
1292   0BB8 E4            pop a
1293   0BB9             ; --- END TERMS
1294   0BB9 E7            pop d
1295   0BBA FD 43         mov [d], b
1296   0BBC             ; break; 
1297   0BBC 0A F0 0B      jmp _switch13_exit ; case break
1298   0BBF             _switch13_case7:
1299   0BBF             
1300   0BBF             ; --- BEGIN INLINE ASM SEGMENT
1301   0BBF FA FF FF      lea d, [bp + -1] ; $p
1302   0BC2 FD 2A         mov d, [d]
1303   0BC4 FD 2A         mov d, [d]
1304   0BC6 07 D1 1F      call _puts
1305   0BC9             ; --- END INLINE ASM SEGMENT
1306   0BC9             
1307   0BC9             ; p = p + 2; 
1308   0BC9 FA FF FF      lea d, [bp + -1] ; $p
1309   0BCC DA            push d
1310   0BCD FA FF FF      lea d, [bp + -1] ; $p
1311   0BD0 2A            mov b, [d]
1312   0BD1 38 00 00      mov c, 0
1313   0BD4             ; --- START TERMS
1314   0BD4 D7            push a
1315   0BD5 11            mov a, b
1316   0BD6 26 02 00      mov b, $2
1317   0BD9 38 00 00      mov c, 0
1318   0BDC 56            add b, a
1319   0BDD E4            pop a
1320   0BDE             ; --- END TERMS
1321   0BDE E7            pop d
1322   0BDF FD 43         mov [d], b
1323   0BE1             ; break; 
1324   0BE1 0A F0 0B      jmp _switch13_exit ; case break
1325   0BE4             _switch13_default:
1326   0BE4             ; print("Error: Unknown argument type.\n"); 
1327   0BE4             ; --- START FUNCTION CALL
1328   0BE4 26 48 21      mov b, _s1 ; "Error: Unknown argument type.\n"
1329   0BE7 FD AB         swp b
1330   0BE9 D8            push b
1331   0BEA 07 C6 1C      call print
1332   0BED 51 02 00      add sp, 2
1333   0BF0             ; --- END FUNCTION CALL
1334   0BF0             _switch13_exit:
1335   0BF0             ; format_p++; 
1336   0BF0 FA FD FF      lea d, [bp + -3] ; $format_p
1337   0BF3 2A            mov b, [d]
1338   0BF4 38 00 00      mov c, 0
1339   0BF7 FD 77         inc b
1340   0BF9 FA FD FF      lea d, [bp + -3] ; $format_p
1341   0BFC FD 43         mov [d], b
1342   0BFE FD 7D         dec b
1343   0C00 0A 25 0C      jmp _if12_exit
1344   0C03             _if12_else:
1345   0C03             ; putchar(*format_p); 
1346   0C03             ; --- START FUNCTION CALL
1347   0C03 FA FD FF      lea d, [bp + -3] ; $format_p
1348   0C06 2A            mov b, [d]
1349   0C07 38 00 00      mov c, 0
1350   0C0A 74            mov d, b
1351   0C0B 32            mov bl, [d]
1352   0C0C A7 00         mov bh, 0
1353   0C0E DD            push bl
1354   0C0F 07 78 1C      call putchar
1355   0C12 51 01 00      add sp, 1
1356   0C15             ; --- END FUNCTION CALL
1357   0C15             ; format_p++; 
1358   0C15 FA FD FF      lea d, [bp + -3] ; $format_p
1359   0C18 2A            mov b, [d]
1360   0C19 38 00 00      mov c, 0
1361   0C1C FD 77         inc b
1362   0C1E FA FD FF      lea d, [bp + -3] ; $format_p
1363   0C21 FD 43         mov [d], b
1364   0C23 FD 7D         dec b
1365   0C25             _if12_exit:
1366   0C25             _if11_exit:
1367   0C25             _for10_update:
1368   0C25 0A 8E 09      jmp _for10_cond
1369   0C28             _for10_exit:
1370   0C28 F9            leave
1371   0C29 09            ret
1372   0C2A             
1373   0C2A             scanf:
1374   0C2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1375   0C2D             ; char *p, *format_p; 
1376   0C2D 52 02 00      sub sp, 2
1377   0C30 52 02 00      sub sp, 2
1378   0C33             ; char c; 
1379   0C33 52 01 00      sub sp, 1
1380   0C36             ; int i; 
1381   0C36 52 02 00      sub sp, 2
1382   0C39             ; char input_string[  512                    ]; 
1383   0C39 52 00 02      sub sp, 512
1384   0C3C             ; format_p = format; 
1385   0C3C FA FD FF      lea d, [bp + -3] ; $format_p
1386   0C3F DA            push d
1387   0C40 FA 05 00      lea d, [bp + 5] ; $format
1388   0C43 2A            mov b, [d]
1389   0C44 38 00 00      mov c, 0
1390   0C47 E7            pop d
1391   0C48 FD 43         mov [d], b
1392   0C4A             ; p = &format + 2; 
1393   0C4A FA FF FF      lea d, [bp + -1] ; $p
1394   0C4D DA            push d
1395   0C4E FA 05 00      lea d, [bp + 5] ; $format
1396   0C51 2D            mov b, d
1397   0C52             ; --- START TERMS
1398   0C52 D7            push a
1399   0C53 11            mov a, b
1400   0C54 26 02 00      mov b, $2
1401   0C57 38 00 00      mov c, 0
1402   0C5A 56            add b, a
1403   0C5B E4            pop a
1404   0C5C             ; --- END TERMS
1405   0C5C E7            pop d
1406   0C5D FD 43         mov [d], b
1407   0C5F             ; for(;;){ 
1408   0C5F             _for17_init:
1409   0C5F             _for17_cond:
1410   0C5F             _for17_block:
1411   0C5F             ; if(!*format_p) break; 
1412   0C5F             _if18_cond:
1413   0C5F FA FD FF      lea d, [bp + -3] ; $format_p
1414   0C62 2A            mov b, [d]
1415   0C63 38 00 00      mov c, 0
1416   0C66 74            mov d, b
1417   0C67 32            mov bl, [d]
1418   0C68 A7 00         mov bh, 0
1419   0C6A C0 00 00      cmp b, 0
1420   0C6D FD 71         seq ; !
1421   0C6F C0 00 00      cmp b, 0
1422   0C72 C6 7B 0C      je _if18_else
1423   0C75             _if18_true:
1424   0C75             ; break; 
1425   0C75 0A EB 0E      jmp _for17_exit ; for break
1426   0C78 0A E8 0E      jmp _if18_exit
1427   0C7B             _if18_else:
1428   0C7B             ; if(*format_p == '%'){ 
1429   0C7B             _if19_cond:
1430   0C7B FA FD FF      lea d, [bp + -3] ; $format_p
1431   0C7E 2A            mov b, [d]
1432   0C7F 38 00 00      mov c, 0
1433   0C82 74            mov d, b
1434   0C83 32            mov bl, [d]
1435   0C84 A7 00         mov bh, 0
1436   0C86             ; --- START RELATIONAL
1437   0C86 D7            push a
1438   0C87 11            mov a, b
1439   0C88 26 25 00      mov b, $25
1440   0C8B 38 00 00      mov c, 0
1441   0C8E B0            cmp a, b
1442   0C8F FD 71         seq ; ==
1443   0C91 E4            pop a
1444   0C92             ; --- END RELATIONAL
1445   0C92 C0 00 00      cmp b, 0
1446   0C95 C6 C6 0E      je _if19_else
1447   0C98             _if19_true:
1448   0C98             ; format_p++; 
1449   0C98 FA FD FF      lea d, [bp + -3] ; $format_p
1450   0C9B 2A            mov b, [d]
1451   0C9C 38 00 00      mov c, 0
1452   0C9F FD 77         inc b
1453   0CA1 FA FD FF      lea d, [bp + -3] ; $format_p
1454   0CA4 FD 43         mov [d], b
1455   0CA6 FD 7D         dec b
1456   0CA8             ; switch(*format_p){ 
1457   0CA8             _switch20_expr:
1458   0CA8 FA FD FF      lea d, [bp + -3] ; $format_p
1459   0CAB 2A            mov b, [d]
1460   0CAC 38 00 00      mov c, 0
1461   0CAF 74            mov d, b
1462   0CB0 32            mov bl, [d]
1463   0CB1 A7 00         mov bh, 0
1464   0CB3             _switch20_comparisons:
1465   0CB3 C1 6C         cmp bl, $6c
1466   0CB5 C6 E1 0C      je _switch20_case0
1467   0CB8 C1 4C         cmp bl, $4c
1468   0CBA C6 E1 0C      je _switch20_case1
1469   0CBD C1 64         cmp bl, $64
1470   0CBF C6 94 0D      je _switch20_case2
1471   0CC2 C1 69         cmp bl, $69
1472   0CC4 C6 94 0D      je _switch20_case3
1473   0CC7 C1 75         cmp bl, $75
1474   0CC9 C6 CD 0D      je _switch20_case4
1475   0CCC C1 78         cmp bl, $78
1476   0CCE C6 06 0E      je _switch20_case5
1477   0CD1 C1 63         cmp bl, $63
1478   0CD3 C6 21 0E      je _switch20_case6
1479   0CD6 C1 73         cmp bl, $73
1480   0CD8 C6 60 0E      je _switch20_case7
1481   0CDB 0A A7 0E      jmp _switch20_default
1482   0CDE 0A B3 0E      jmp _switch20_exit
1483   0CE1             _switch20_case0:
1484   0CE1             _switch20_case1:
1485   0CE1             ; format_p++; 
1486   0CE1 FA FD FF      lea d, [bp + -3] ; $format_p
1487   0CE4 2A            mov b, [d]
1488   0CE5 38 00 00      mov c, 0
1489   0CE8 FD 77         inc b
1490   0CEA FA FD FF      lea d, [bp + -3] ; $format_p
1491   0CED FD 43         mov [d], b
1492   0CEF FD 7D         dec b
1493   0CF1             ; if(*format_p == 'd' || *format_p == 'i'); 
1494   0CF1             _if21_cond:
1495   0CF1 FA FD FF      lea d, [bp + -3] ; $format_p
1496   0CF4 2A            mov b, [d]
1497   0CF5 38 00 00      mov c, 0
1498   0CF8 74            mov d, b
1499   0CF9 32            mov bl, [d]
1500   0CFA A7 00         mov bh, 0
1501   0CFC             ; --- START RELATIONAL
1502   0CFC D7            push a
1503   0CFD 11            mov a, b
1504   0CFE 26 64 00      mov b, $64
1505   0D01 38 00 00      mov c, 0
1506   0D04 B0            cmp a, b
1507   0D05 FD 71         seq ; ==
1508   0D07 E4            pop a
1509   0D08             ; --- END RELATIONAL
1510   0D08             ; --- START LOGICAL OR
1511   0D08 D7            push a
1512   0D09 11            mov a, b
1513   0D0A FA FD FF      lea d, [bp + -3] ; $format_p
1514   0D0D 2A            mov b, [d]
1515   0D0E 38 00 00      mov c, 0
1516   0D11 74            mov d, b
1517   0D12 32            mov bl, [d]
1518   0D13 A7 00         mov bh, 0
1519   0D15             ; --- START RELATIONAL
1520   0D15 D7            push a
1521   0D16 11            mov a, b
1522   0D17 26 69 00      mov b, $69
1523   0D1A 38 00 00      mov c, 0
1524   0D1D B0            cmp a, b
1525   0D1E FD 71         seq ; ==
1526   0D20 E4            pop a
1527   0D21             ; --- END RELATIONAL
1528   0D21 FD A8         sor a, b ; ||
1529   0D23 E4            pop a
1530   0D24             ; --- END LOGICAL OR
1531   0D24 C0 00 00      cmp b, 0
1532   0D27 C6 2D 0D      je _if21_else
1533   0D2A             _if21_true:
1534   0D2A             ; ; 
1535   0D2A 0A 79 0D      jmp _if21_exit
1536   0D2D             _if21_else:
1537   0D2D             ; if(*format_p == 'u'); 
1538   0D2D             _if22_cond:
1539   0D2D FA FD FF      lea d, [bp + -3] ; $format_p
1540   0D30 2A            mov b, [d]
1541   0D31 38 00 00      mov c, 0
1542   0D34 74            mov d, b
1543   0D35 32            mov bl, [d]
1544   0D36 A7 00         mov bh, 0
1545   0D38             ; --- START RELATIONAL
1546   0D38 D7            push a
1547   0D39 11            mov a, b
1548   0D3A 26 75 00      mov b, $75
1549   0D3D 38 00 00      mov c, 0
1550   0D40 B0            cmp a, b
1551   0D41 FD 71         seq ; ==
1552   0D43 E4            pop a
1553   0D44             ; --- END RELATIONAL
1554   0D44 C0 00 00      cmp b, 0
1555   0D47 C6 4D 0D      je _if22_else
1556   0D4A             _if22_true:
1557   0D4A             ; ; 
1558   0D4A 0A 79 0D      jmp _if22_exit
1559   0D4D             _if22_else:
1560   0D4D             ; if(*format_p == 'x'); 
1561   0D4D             _if23_cond:
1562   0D4D FA FD FF      lea d, [bp + -3] ; $format_p
1563   0D50 2A            mov b, [d]
1564   0D51 38 00 00      mov c, 0
1565   0D54 74            mov d, b
1566   0D55 32            mov bl, [d]
1567   0D56 A7 00         mov bh, 0
1568   0D58             ; --- START RELATIONAL
1569   0D58 D7            push a
1570   0D59 11            mov a, b
1571   0D5A 26 78 00      mov b, $78
1572   0D5D 38 00 00      mov c, 0
1573   0D60 B0            cmp a, b
1574   0D61 FD 71         seq ; ==
1575   0D63 E4            pop a
1576   0D64             ; --- END RELATIONAL
1577   0D64 C0 00 00      cmp b, 0
1578   0D67 C6 6D 0D      je _if23_else
1579   0D6A             _if23_true:
1580   0D6A             ; ; 
1581   0D6A 0A 79 0D      jmp _if23_exit
1582   0D6D             _if23_else:
1583   0D6D             ; err("Unexpected format in printf."); 
1584   0D6D             ; --- START FUNCTION CALL
1585   0D6D 26 2B 21      mov b, _s0 ; "Unexpected format in printf."
1586   0D70 FD AB         swp b
1587   0D72 D8            push b
1588   0D73 07 84 12      call err
1589   0D76 51 02 00      add sp, 2
1590   0D79             ; --- END FUNCTION CALL
1591   0D79             _if23_exit:
1592   0D79             _if22_exit:
1593   0D79             _if21_exit:
1594   0D79             ; p = p + 4; 
1595   0D79 FA FF FF      lea d, [bp + -1] ; $p
1596   0D7C DA            push d
1597   0D7D FA FF FF      lea d, [bp + -1] ; $p
1598   0D80 2A            mov b, [d]
1599   0D81 38 00 00      mov c, 0
1600   0D84             ; --- START TERMS
1601   0D84 D7            push a
1602   0D85 11            mov a, b
1603   0D86 26 04 00      mov b, $4
1604   0D89 38 00 00      mov c, 0
1605   0D8C 56            add b, a
1606   0D8D E4            pop a
1607   0D8E             ; --- END TERMS
1608   0D8E E7            pop d
1609   0D8F FD 43         mov [d], b
1610   0D91             ; break; 
1611   0D91 0A B3 0E      jmp _switch20_exit ; case break
1612   0D94             _switch20_case2:
1613   0D94             _switch20_case3:
1614   0D94             ; i = scann(); 
1615   0D94 FA FA FF      lea d, [bp + -6] ; $i
1616   0D97 DA            push d
1617   0D98             ; --- START FUNCTION CALL
1618   0D98 07 9E 1C      call scann
1619   0D9B E7            pop d
1620   0D9C FD 43         mov [d], b
1621   0D9E             ; **(int **)p = i; 
1622   0D9E FA FF FF      lea d, [bp + -1] ; $p
1623   0DA1 2A            mov b, [d]
1624   0DA2 38 00 00      mov c, 0
1625   0DA5 74            mov d, b
1626   0DA6 2A            mov b, [d]
1627   0DA7 D8            push b
1628   0DA8 FA FA FF      lea d, [bp + -6] ; $i
1629   0DAB 2A            mov b, [d]
1630   0DAC 38 00 00      mov c, 0
1631   0DAF E7            pop d
1632   0DB0 FD 43         mov [d], b
1633   0DB2             ; p = p + 2; 
1634   0DB2 FA FF FF      lea d, [bp + -1] ; $p
1635   0DB5 DA            push d
1636   0DB6 FA FF FF      lea d, [bp + -1] ; $p
1637   0DB9 2A            mov b, [d]
1638   0DBA 38 00 00      mov c, 0
1639   0DBD             ; --- START TERMS
1640   0DBD D7            push a
1641   0DBE 11            mov a, b
1642   0DBF 26 02 00      mov b, $2
1643   0DC2 38 00 00      mov c, 0
1644   0DC5 56            add b, a
1645   0DC6 E4            pop a
1646   0DC7             ; --- END TERMS
1647   0DC7 E7            pop d
1648   0DC8 FD 43         mov [d], b
1649   0DCA             ; break; 
1650   0DCA 0A B3 0E      jmp _switch20_exit ; case break
1651   0DCD             _switch20_case4:
1652   0DCD             ; i = scann(); 
1653   0DCD FA FA FF      lea d, [bp + -6] ; $i
1654   0DD0 DA            push d
1655   0DD1             ; --- START FUNCTION CALL
1656   0DD1 07 9E 1C      call scann
1657   0DD4 E7            pop d
1658   0DD5 FD 43         mov [d], b
1659   0DD7             ; **(int **)p = i; 
1660   0DD7 FA FF FF      lea d, [bp + -1] ; $p
1661   0DDA 2A            mov b, [d]
1662   0DDB 38 00 00      mov c, 0
1663   0DDE 74            mov d, b
1664   0DDF 2A            mov b, [d]
1665   0DE0 D8            push b
1666   0DE1 FA FA FF      lea d, [bp + -6] ; $i
1667   0DE4 2A            mov b, [d]
1668   0DE5 38 00 00      mov c, 0
1669   0DE8 E7            pop d
1670   0DE9 FD 43         mov [d], b
1671   0DEB             ; p = p + 2; 
1672   0DEB FA FF FF      lea d, [bp + -1] ; $p
1673   0DEE DA            push d
1674   0DEF FA FF FF      lea d, [bp + -1] ; $p
1675   0DF2 2A            mov b, [d]
1676   0DF3 38 00 00      mov c, 0
1677   0DF6             ; --- START TERMS
1678   0DF6 D7            push a
1679   0DF7 11            mov a, b
1680   0DF8 26 02 00      mov b, $2
1681   0DFB 38 00 00      mov c, 0
1682   0DFE 56            add b, a
1683   0DFF E4            pop a
1684   0E00             ; --- END TERMS
1685   0E00 E7            pop d
1686   0E01 FD 43         mov [d], b
1687   0E03             ; break; 
1688   0E03 0A B3 0E      jmp _switch20_exit ; case break
1689   0E06             _switch20_case5:
1690   0E06             ; p = p + 2; 
1691   0E06 FA FF FF      lea d, [bp + -1] ; $p
1692   0E09 DA            push d
1693   0E0A FA FF FF      lea d, [bp + -1] ; $p
1694   0E0D 2A            mov b, [d]
1695   0E0E 38 00 00      mov c, 0
1696   0E11             ; --- START TERMS
1697   0E11 D7            push a
1698   0E12 11            mov a, b
1699   0E13 26 02 00      mov b, $2
1700   0E16 38 00 00      mov c, 0
1701   0E19 56            add b, a
1702   0E1A E4            pop a
1703   0E1B             ; --- END TERMS
1704   0E1B E7            pop d
1705   0E1C FD 43         mov [d], b
1706   0E1E             ; break; 
1707   0E1E 0A B3 0E      jmp _switch20_exit ; case break
1708   0E21             _switch20_case6:
1709   0E21             ; c = getchar(); 
1710   0E21 FA FC FF      lea d, [bp + -4] ; $c
1711   0E24 DA            push d
1712   0E25             ; --- START FUNCTION CALL
1713   0E25 07 85 1C      call getchar
1714   0E28 E7            pop d
1715   0E29 FD 3E         mov [d], bl
1716   0E2B             ; **(char **)p = *(char *)c; 
1717   0E2B FA FF FF      lea d, [bp + -1] ; $p
1718   0E2E 2A            mov b, [d]
1719   0E2F 38 00 00      mov c, 0
1720   0E32 74            mov d, b
1721   0E33 2A            mov b, [d]
1722   0E34 D8            push b
1723   0E35 FA FC FF      lea d, [bp + -4] ; $c
1724   0E38 32            mov bl, [d]
1725   0E39 A7 00         mov bh, 0
1726   0E3B 38 00 00      mov c, 0
1727   0E3E 74            mov d, b
1728   0E3F 32            mov bl, [d]
1729   0E40 A7 00         mov bh, 0
1730   0E42 E7            pop d
1731   0E43 FD 43         mov [d], b
1732   0E45             ; p = p + 1; 
1733   0E45 FA FF FF      lea d, [bp + -1] ; $p
1734   0E48 DA            push d
1735   0E49 FA FF FF      lea d, [bp + -1] ; $p
1736   0E4C 2A            mov b, [d]
1737   0E4D 38 00 00      mov c, 0
1738   0E50             ; --- START TERMS
1739   0E50 D7            push a
1740   0E51 11            mov a, b
1741   0E52 26 01 00      mov b, $1
1742   0E55 38 00 00      mov c, 0
1743   0E58 56            add b, a
1744   0E59 E4            pop a
1745   0E5A             ; --- END TERMS
1746   0E5A E7            pop d
1747   0E5B FD 43         mov [d], b
1748   0E5D             ; break; 
1749   0E5D 0A B3 0E      jmp _switch20_exit ; case break
1750   0E60             _switch20_case7:
1751   0E60             ; gets(input_string); 
1752   0E60             ; --- START FUNCTION CALL
1753   0E60 FA FA FD      lea d, [bp + -518] ; $input_string
1754   0E63 2D            mov b, d
1755   0E64 38 00 00      mov c, 0
1756   0E67 FD AB         swp b
1757   0E69 D8            push b
1758   0E6A 07 70 14      call gets
1759   0E6D 51 02 00      add sp, 2
1760   0E70             ; --- END FUNCTION CALL
1761   0E70             ; strcpy(*(char **)p, input_string); 
1762   0E70             ; --- START FUNCTION CALL
1763   0E70 FA FA FD      lea d, [bp + -518] ; $input_string
1764   0E73 2D            mov b, d
1765   0E74 38 00 00      mov c, 0
1766   0E77 FD AB         swp b
1767   0E79 D8            push b
1768   0E7A FA FF FF      lea d, [bp + -1] ; $p
1769   0E7D 2A            mov b, [d]
1770   0E7E 38 00 00      mov c, 0
1771   0E81 74            mov d, b
1772   0E82 2A            mov b, [d]
1773   0E83 FD AB         swp b
1774   0E85 D8            push b
1775   0E86 07 61 04      call strcpy
1776   0E89 51 04 00      add sp, 4
1777   0E8C             ; --- END FUNCTION CALL
1778   0E8C             ; p = p + 2; 
1779   0E8C FA FF FF      lea d, [bp + -1] ; $p
1780   0E8F DA            push d
1781   0E90 FA FF FF      lea d, [bp + -1] ; $p
1782   0E93 2A            mov b, [d]
1783   0E94 38 00 00      mov c, 0
1784   0E97             ; --- START TERMS
1785   0E97 D7            push a
1786   0E98 11            mov a, b
1787   0E99 26 02 00      mov b, $2
1788   0E9C 38 00 00      mov c, 0
1789   0E9F 56            add b, a
1790   0EA0 E4            pop a
1791   0EA1             ; --- END TERMS
1792   0EA1 E7            pop d
1793   0EA2 FD 43         mov [d], b
1794   0EA4             ; break; 
1795   0EA4 0A B3 0E      jmp _switch20_exit ; case break
1796   0EA7             _switch20_default:
1797   0EA7             ; print("Error: Unknown argument type.\n"); 
1798   0EA7             ; --- START FUNCTION CALL
1799   0EA7 26 48 21      mov b, _s1 ; "Error: Unknown argument type.\n"
1800   0EAA FD AB         swp b
1801   0EAC D8            push b
1802   0EAD 07 C6 1C      call print
1803   0EB0 51 02 00      add sp, 2
1804   0EB3             ; --- END FUNCTION CALL
1805   0EB3             _switch20_exit:
1806   0EB3             ; format_p++; 
1807   0EB3 FA FD FF      lea d, [bp + -3] ; $format_p
1808   0EB6 2A            mov b, [d]
1809   0EB7 38 00 00      mov c, 0
1810   0EBA FD 77         inc b
1811   0EBC FA FD FF      lea d, [bp + -3] ; $format_p
1812   0EBF FD 43         mov [d], b
1813   0EC1 FD 7D         dec b
1814   0EC3 0A E8 0E      jmp _if19_exit
1815   0EC6             _if19_else:
1816   0EC6             ; putchar(*format_p); 
1817   0EC6             ; --- START FUNCTION CALL
1818   0EC6 FA FD FF      lea d, [bp + -3] ; $format_p
1819   0EC9 2A            mov b, [d]
1820   0ECA 38 00 00      mov c, 0
1821   0ECD 74            mov d, b
1822   0ECE 32            mov bl, [d]
1823   0ECF A7 00         mov bh, 0
1824   0ED1 DD            push bl
1825   0ED2 07 78 1C      call putchar
1826   0ED5 51 01 00      add sp, 1
1827   0ED8             ; --- END FUNCTION CALL
1828   0ED8             ; format_p++; 
1829   0ED8 FA FD FF      lea d, [bp + -3] ; $format_p
1830   0EDB 2A            mov b, [d]
1831   0EDC 38 00 00      mov c, 0
1832   0EDF FD 77         inc b
1833   0EE1 FA FD FF      lea d, [bp + -3] ; $format_p
1834   0EE4 FD 43         mov [d], b
1835   0EE6 FD 7D         dec b
1836   0EE8             _if19_exit:
1837   0EE8             _if18_exit:
1838   0EE8             _for17_update:
1839   0EE8 0A 5F 0C      jmp _for17_cond
1840   0EEB             _for17_exit:
1841   0EEB F9            leave
1842   0EEC 09            ret
1843   0EED             
1844   0EED             sprintf:
1845   0EED F8 00 00      enter 0 ; (push bp; mov bp, sp)
1846   0EF0             ; char *p, *format_p; 
1847   0EF0 52 02 00      sub sp, 2
1848   0EF3 52 02 00      sub sp, 2
1849   0EF6             ; char *sp; 
1850   0EF6 52 02 00      sub sp, 2
1851   0EF9             ; sp = dest; 
1852   0EF9 FA FB FF      lea d, [bp + -5] ; $sp
1853   0EFC DA            push d
1854   0EFD FA 05 00      lea d, [bp + 5] ; $dest
1855   0F00 2A            mov b, [d]
1856   0F01 38 00 00      mov c, 0
1857   0F04 E7            pop d
1858   0F05 FD 43         mov [d], b
1859   0F07             ; format_p = format; 
1860   0F07 FA FD FF      lea d, [bp + -3] ; $format_p
1861   0F0A DA            push d
1862   0F0B FA 07 00      lea d, [bp + 7] ; $format
1863   0F0E 2A            mov b, [d]
1864   0F0F 38 00 00      mov c, 0
1865   0F12 E7            pop d
1866   0F13 FD 43         mov [d], b
1867   0F15             ; p = &format + 2; 
1868   0F15 FA FF FF      lea d, [bp + -1] ; $p
1869   0F18 DA            push d
1870   0F19 FA 07 00      lea d, [bp + 7] ; $format
1871   0F1C 2D            mov b, d
1872   0F1D             ; --- START TERMS
1873   0F1D D7            push a
1874   0F1E 11            mov a, b
1875   0F1F 26 02 00      mov b, $2
1876   0F22 38 00 00      mov c, 0
1877   0F25 56            add b, a
1878   0F26 E4            pop a
1879   0F27             ; --- END TERMS
1880   0F27 E7            pop d
1881   0F28 FD 43         mov [d], b
1882   0F2A             ; for(;;){ 
1883   0F2A             _for24_init:
1884   0F2A             _for24_cond:
1885   0F2A             _for24_block:
1886   0F2A             ; if(!*format_p) break; 
1887   0F2A             _if25_cond:
1888   0F2A FA FD FF      lea d, [bp + -3] ; $format_p
1889   0F2D 2A            mov b, [d]
1890   0F2E 38 00 00      mov c, 0
1891   0F31 74            mov d, b
1892   0F32 32            mov bl, [d]
1893   0F33 A7 00         mov bh, 0
1894   0F35 C0 00 00      cmp b, 0
1895   0F38 FD 71         seq ; !
1896   0F3A C0 00 00      cmp b, 0
1897   0F3D C6 46 0F      je _if25_else
1898   0F40             _if25_true:
1899   0F40             ; break; 
1900   0F40 0A 5E 12      jmp _for24_exit ; for break
1901   0F43 0A 5B 12      jmp _if25_exit
1902   0F46             _if25_else:
1903   0F46             ; if(*format_p == '%'){ 
1904   0F46             _if26_cond:
1905   0F46 FA FD FF      lea d, [bp + -3] ; $format_p
1906   0F49 2A            mov b, [d]
1907   0F4A 38 00 00      mov c, 0
1908   0F4D 74            mov d, b
1909   0F4E 32            mov bl, [d]
1910   0F4F A7 00         mov bh, 0
1911   0F51             ; --- START RELATIONAL
1912   0F51 D7            push a
1913   0F52 11            mov a, b
1914   0F53 26 25 00      mov b, $25
1915   0F56 38 00 00      mov c, 0
1916   0F59 B0            cmp a, b
1917   0F5A FD 71         seq ; ==
1918   0F5C E4            pop a
1919   0F5D             ; --- END RELATIONAL
1920   0F5D C0 00 00      cmp b, 0
1921   0F60 C6 33 12      je _if26_else
1922   0F63             _if26_true:
1923   0F63             ; format_p++; 
1924   0F63 FA FD FF      lea d, [bp + -3] ; $format_p
1925   0F66 2A            mov b, [d]
1926   0F67 38 00 00      mov c, 0
1927   0F6A FD 77         inc b
1928   0F6C FA FD FF      lea d, [bp + -3] ; $format_p
1929   0F6F FD 43         mov [d], b
1930   0F71 FD 7D         dec b
1931   0F73             ; switch(*format_p){ 
1932   0F73             _switch27_expr:
1933   0F73 FA FD FF      lea d, [bp + -3] ; $format_p
1934   0F76 2A            mov b, [d]
1935   0F77 38 00 00      mov c, 0
1936   0F7A 74            mov d, b
1937   0F7B 32            mov bl, [d]
1938   0F7C A7 00         mov bh, 0
1939   0F7E             _switch27_comparisons:
1940   0F7E C1 6C         cmp bl, $6c
1941   0F80 C6 AC 0F      je _switch27_case0
1942   0F83 C1 4C         cmp bl, $4c
1943   0F85 C6 AC 0F      je _switch27_case1
1944   0F88 C1 64         cmp bl, $64
1945   0F8A C6 B8 10      je _switch27_case2
1946   0F8D C1 69         cmp bl, $69
1947   0F8F C6 B8 10      je _switch27_case3
1948   0F92 C1 75         cmp bl, $75
1949   0F94 C6 01 11      je _switch27_case4
1950   0F97 C1 78         cmp bl, $78
1951   0F99 C6 4A 11      je _switch27_case5
1952   0F9C C1 63         cmp bl, $63
1953   0F9E C6 6E 11      je _switch27_case6
1954   0FA1 C1 73         cmp bl, $73
1955   0FA3 C6 A8 11      je _switch27_case7
1956   0FA6 0A 14 12      jmp _switch27_default
1957   0FA9 0A 20 12      jmp _switch27_exit
1958   0FAC             _switch27_case0:
1959   0FAC             _switch27_case1:
1960   0FAC             ; format_p++; 
1961   0FAC FA FD FF      lea d, [bp + -3] ; $format_p
1962   0FAF 2A            mov b, [d]
1963   0FB0 38 00 00      mov c, 0
1964   0FB3 FD 77         inc b
1965   0FB5 FA FD FF      lea d, [bp + -3] ; $format_p
1966   0FB8 FD 43         mov [d], b
1967   0FBA FD 7D         dec b
1968   0FBC             ; if(*format_p == 'd' || *format_p == 'i') 
1969   0FBC             _if28_cond:
1970   0FBC FA FD FF      lea d, [bp + -3] ; $format_p
1971   0FBF 2A            mov b, [d]
1972   0FC0 38 00 00      mov c, 0
1973   0FC3 74            mov d, b
1974   0FC4 32            mov bl, [d]
1975   0FC5 A7 00         mov bh, 0
1976   0FC7             ; --- START RELATIONAL
1977   0FC7 D7            push a
1978   0FC8 11            mov a, b
1979   0FC9 26 64 00      mov b, $64
1980   0FCC 38 00 00      mov c, 0
1981   0FCF B0            cmp a, b
1982   0FD0 FD 71         seq ; ==
1983   0FD2 E4            pop a
1984   0FD3             ; --- END RELATIONAL
1985   0FD3             ; --- START LOGICAL OR
1986   0FD3 D7            push a
1987   0FD4 11            mov a, b
1988   0FD5 FA FD FF      lea d, [bp + -3] ; $format_p
1989   0FD8 2A            mov b, [d]
1990   0FD9 38 00 00      mov c, 0
1991   0FDC 74            mov d, b
1992   0FDD 32            mov bl, [d]
1993   0FDE A7 00         mov bh, 0
1994   0FE0             ; --- START RELATIONAL
1995   0FE0 D7            push a
1996   0FE1 11            mov a, b
1997   0FE2 26 69 00      mov b, $69
1998   0FE5 38 00 00      mov c, 0
1999   0FE8 B0            cmp a, b
2000   0FE9 FD 71         seq ; ==
2001   0FEB E4            pop a
2002   0FEC             ; --- END RELATIONAL
2003   0FEC FD A8         sor a, b ; ||
2004   0FEE E4            pop a
2005   0FEF             ; --- END LOGICAL OR
2006   0FEF C0 00 00      cmp b, 0
2007   0FF2 C6 16 10      je _if28_else
2008   0FF5             _if28_true:
2009   0FF5             ; print_signed_long(*(long *)p); 
2010   0FF5             ; --- START FUNCTION CALL
2011   0FF5 FA FF FF      lea d, [bp + -1] ; $p
2012   0FF8 2A            mov b, [d]
2013   0FF9 38 00 00      mov c, 0
2014   0FFC AB            snex b
2015   0FFD FD 39         mov c, b
2016   0FFF 74            mov d, b
2017   1000 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2018   1003 FD 39         mov c, b ; And place it into C
2019   1005 2A            mov b, [d] ; Lower Word in B
2020   1006 12            mov a, c
2021   1007 FD AA         swp a
2022   1009 D7            push a
2023   100A FD AB         swp b
2024   100C D8            push b
2025   100D 07 C6 15      call print_signed_long
2026   1010 51 04 00      add sp, 4
2027   1013             ; --- END FUNCTION CALL
2028   1013 0A 9D 10      jmp _if28_exit
2029   1016             _if28_else:
2030   1016             ; if(*format_p == 'u') 
2031   1016             _if29_cond:
2032   1016 FA FD FF      lea d, [bp + -3] ; $format_p
2033   1019 2A            mov b, [d]
2034   101A 38 00 00      mov c, 0
2035   101D 74            mov d, b
2036   101E 32            mov bl, [d]
2037   101F A7 00         mov bh, 0
2038   1021             ; --- START RELATIONAL
2039   1021 D7            push a
2040   1022 11            mov a, b
2041   1023 26 75 00      mov b, $75
2042   1026 38 00 00      mov c, 0
2043   1029 B0            cmp a, b
2044   102A FD 71         seq ; ==
2045   102C E4            pop a
2046   102D             ; --- END RELATIONAL
2047   102D C0 00 00      cmp b, 0
2048   1030 C6 56 10      je _if29_else
2049   1033             _if29_true:
2050   1033             ; print_unsigned_long(*(unsigned long *)p); 
2051   1033             ; --- START FUNCTION CALL
2052   1033 FA FF FF      lea d, [bp + -1] ; $p
2053   1036 2A            mov b, [d]
2054   1037 38 00 00      mov c, 0
2055   103A A7 00         mov bh, 0
2056   103C 38 00 00      mov c, 0
2057   103F 74            mov d, b
2058   1040 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2059   1043 FD 39         mov c, b ; And place it into C
2060   1045 2A            mov b, [d] ; Lower Word in B
2061   1046 12            mov a, c
2062   1047 FD AA         swp a
2063   1049 D7            push a
2064   104A FD AB         swp b
2065   104C D8            push b
2066   104D 07 36 17      call print_unsigned_long
2067   1050 51 04 00      add sp, 4
2068   1053             ; --- END FUNCTION CALL
2069   1053 0A 9D 10      jmp _if29_exit
2070   1056             _if29_else:
2071   1056             ; if(*format_p == 'x') 
2072   1056             _if30_cond:
2073   1056 FA FD FF      lea d, [bp + -3] ; $format_p
2074   1059 2A            mov b, [d]
2075   105A 38 00 00      mov c, 0
2076   105D 74            mov d, b
2077   105E 32            mov bl, [d]
2078   105F A7 00         mov bh, 0
2079   1061             ; --- START RELATIONAL
2080   1061 D7            push a
2081   1062 11            mov a, b
2082   1063 26 78 00      mov b, $78
2083   1066 38 00 00      mov c, 0
2084   1069 B0            cmp a, b
2085   106A FD 71         seq ; ==
2086   106C E4            pop a
2087   106D             ; --- END RELATIONAL
2088   106D C0 00 00      cmp b, 0
2089   1070 C6 91 10      je _if30_else
2090   1073             _if30_true:
2091   1073             ; printx32(*(long int *)p); 
2092   1073             ; --- START FUNCTION CALL
2093   1073 FA FF FF      lea d, [bp + -1] ; $p
2094   1076 2A            mov b, [d]
2095   1077 38 00 00      mov c, 0
2096   107A 74            mov d, b
2097   107B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2098   107E FD 39         mov c, b ; And place it into C
2099   1080 2A            mov b, [d] ; Lower Word in B
2100   1081 12            mov a, c
2101   1082 FD AA         swp a
2102   1084 D7            push a
2103   1085 FD AB         swp b
2104   1087 D8            push b
2105   1088 07 99 12      call printx32
2106   108B 51 04 00      add sp, 4
2107   108E             ; --- END FUNCTION CALL
2108   108E 0A 9D 10      jmp _if30_exit
2109   1091             _if30_else:
2110   1091             ; err("Unexpected format in printf."); 
2111   1091             ; --- START FUNCTION CALL
2112   1091 26 2B 21      mov b, _s0 ; "Unexpected format in printf."
2113   1094 FD AB         swp b
2114   1096 D8            push b
2115   1097 07 84 12      call err
2116   109A 51 02 00      add sp, 2
2117   109D             ; --- END FUNCTION CALL
2118   109D             _if30_exit:
2119   109D             _if29_exit:
2120   109D             _if28_exit:
2121   109D             ; p = p + 4; 
2122   109D FA FF FF      lea d, [bp + -1] ; $p
2123   10A0 DA            push d
2124   10A1 FA FF FF      lea d, [bp + -1] ; $p
2125   10A4 2A            mov b, [d]
2126   10A5 38 00 00      mov c, 0
2127   10A8             ; --- START TERMS
2128   10A8 D7            push a
2129   10A9 11            mov a, b
2130   10AA 26 04 00      mov b, $4
2131   10AD 38 00 00      mov c, 0
2132   10B0 56            add b, a
2133   10B1 E4            pop a
2134   10B2             ; --- END TERMS
2135   10B2 E7            pop d
2136   10B3 FD 43         mov [d], b
2137   10B5             ; break; 
2138   10B5 0A 20 12      jmp _switch27_exit ; case break
2139   10B8             _switch27_case2:
2140   10B8             _switch27_case3:
2141   10B8             ; sp = sp + sprint_signed(sp, *(int*)p); 
2142   10B8 FA FB FF      lea d, [bp + -5] ; $sp
2143   10BB DA            push d
2144   10BC FA FB FF      lea d, [bp + -5] ; $sp
2145   10BF 2A            mov b, [d]
2146   10C0 38 00 00      mov c, 0
2147   10C3             ; --- START TERMS
2148   10C3 D7            push a
2149   10C4 11            mov a, b
2150   10C5             ; --- START FUNCTION CALL
2151   10C5 FA FF FF      lea d, [bp + -1] ; $p
2152   10C8 2A            mov b, [d]
2153   10C9 38 00 00      mov c, 0
2154   10CC 74            mov d, b
2155   10CD 2A            mov b, [d]
2156   10CE FD AB         swp b
2157   10D0 D8            push b
2158   10D1 FA FB FF      lea d, [bp + -5] ; $sp
2159   10D4 2A            mov b, [d]
2160   10D5 38 00 00      mov c, 0
2161   10D8 FD AB         swp b
2162   10DA D8            push b
2163   10DB 07 B0 1A      call sprint_signed
2164   10DE 51 04 00      add sp, 4
2165   10E1             ; --- END FUNCTION CALL
2166   10E1 56            add b, a
2167   10E2 E4            pop a
2168   10E3             ; --- END TERMS
2169   10E3 E7            pop d
2170   10E4 FD 43         mov [d], b
2171   10E6             ; p = p + 2; 
2172   10E6 FA FF FF      lea d, [bp + -1] ; $p
2173   10E9 DA            push d
2174   10EA FA FF FF      lea d, [bp + -1] ; $p
2175   10ED 2A            mov b, [d]
2176   10EE 38 00 00      mov c, 0
2177   10F1             ; --- START TERMS
2178   10F1 D7            push a
2179   10F2 11            mov a, b
2180   10F3 26 02 00      mov b, $2
2181   10F6 38 00 00      mov c, 0
2182   10F9 56            add b, a
2183   10FA E4            pop a
2184   10FB             ; --- END TERMS
2185   10FB E7            pop d
2186   10FC FD 43         mov [d], b
2187   10FE             ; break; 
2188   10FE 0A 20 12      jmp _switch27_exit ; case break
2189   1101             _switch27_case4:
2190   1101             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2191   1101 FA FB FF      lea d, [bp + -5] ; $sp
2192   1104 DA            push d
2193   1105 FA FB FF      lea d, [bp + -5] ; $sp
2194   1108 2A            mov b, [d]
2195   1109 38 00 00      mov c, 0
2196   110C             ; --- START TERMS
2197   110C D7            push a
2198   110D 11            mov a, b
2199   110E             ; --- START FUNCTION CALL
2200   110E FA FF FF      lea d, [bp + -1] ; $p
2201   1111 2A            mov b, [d]
2202   1112 38 00 00      mov c, 0
2203   1115 74            mov d, b
2204   1116 2A            mov b, [d]
2205   1117 FD AB         swp b
2206   1119 D8            push b
2207   111A FA FB FF      lea d, [bp + -5] ; $sp
2208   111D 2A            mov b, [d]
2209   111E 38 00 00      mov c, 0
2210   1121 FD AB         swp b
2211   1123 D8            push b
2212   1124 07 58 18      call sprint_unsigned
2213   1127 51 04 00      add sp, 4
2214   112A             ; --- END FUNCTION CALL
2215   112A 56            add b, a
2216   112B E4            pop a
2217   112C             ; --- END TERMS
2218   112C E7            pop d
2219   112D FD 43         mov [d], b
2220   112F             ; p = p + 2; 
2221   112F FA FF FF      lea d, [bp + -1] ; $p
2222   1132 DA            push d
2223   1133 FA FF FF      lea d, [bp + -1] ; $p
2224   1136 2A            mov b, [d]
2225   1137 38 00 00      mov c, 0
2226   113A             ; --- START TERMS
2227   113A D7            push a
2228   113B 11            mov a, b
2229   113C 26 02 00      mov b, $2
2230   113F 38 00 00      mov c, 0
2231   1142 56            add b, a
2232   1143 E4            pop a
2233   1144             ; --- END TERMS
2234   1144 E7            pop d
2235   1145 FD 43         mov [d], b
2236   1147             ; break; 
2237   1147 0A 20 12      jmp _switch27_exit ; case break
2238   114A             _switch27_case5:
2239   114A             
2240   114A             ; --- BEGIN INLINE ASM SEGMENT
2241   114A FA FF FF      lea d, [bp + -1] ; $p
2242   114D FD 2A         mov d, [d]
2243   114F 2A            mov b, [d]
2244   1150 07 29 20      call print_u16x
2245   1153             ; --- END INLINE ASM SEGMENT
2246   1153             
2247   1153             ; p = p + 2; 
2248   1153 FA FF FF      lea d, [bp + -1] ; $p
2249   1156 DA            push d
2250   1157 FA FF FF      lea d, [bp + -1] ; $p
2251   115A 2A            mov b, [d]
2252   115B 38 00 00      mov c, 0
2253   115E             ; --- START TERMS
2254   115E D7            push a
2255   115F 11            mov a, b
2256   1160 26 02 00      mov b, $2
2257   1163 38 00 00      mov c, 0
2258   1166 56            add b, a
2259   1167 E4            pop a
2260   1168             ; --- END TERMS
2261   1168 E7            pop d
2262   1169 FD 43         mov [d], b
2263   116B             ; break; 
2264   116B 0A 20 12      jmp _switch27_exit ; case break
2265   116E             _switch27_case6:
2266   116E             ; *sp++ = *(char *)p; 
2267   116E FA FB FF      lea d, [bp + -5] ; $sp
2268   1171 2A            mov b, [d]
2269   1172 38 00 00      mov c, 0
2270   1175 FD 77         inc b
2271   1177 FA FB FF      lea d, [bp + -5] ; $sp
2272   117A FD 43         mov [d], b
2273   117C FD 7D         dec b
2274   117E D8            push b
2275   117F FA FF FF      lea d, [bp + -1] ; $p
2276   1182 2A            mov b, [d]
2277   1183 38 00 00      mov c, 0
2278   1186 74            mov d, b
2279   1187 32            mov bl, [d]
2280   1188 A7 00         mov bh, 0
2281   118A E7            pop d
2282   118B FD 3E         mov [d], bl
2283   118D             ; p = p + 1; 
2284   118D FA FF FF      lea d, [bp + -1] ; $p
2285   1190 DA            push d
2286   1191 FA FF FF      lea d, [bp + -1] ; $p
2287   1194 2A            mov b, [d]
2288   1195 38 00 00      mov c, 0
2289   1198             ; --- START TERMS
2290   1198 D7            push a
2291   1199 11            mov a, b
2292   119A 26 01 00      mov b, $1
2293   119D 38 00 00      mov c, 0
2294   11A0 56            add b, a
2295   11A1 E4            pop a
2296   11A2             ; --- END TERMS
2297   11A2 E7            pop d
2298   11A3 FD 43         mov [d], b
2299   11A5             ; break; 
2300   11A5 0A 20 12      jmp _switch27_exit ; case break
2301   11A8             _switch27_case7:
2302   11A8             ; int len = strlen(*(char **)p); 
2303   11A8 52 02 00      sub sp, 2
2304   11AB             ; --- START LOCAL VAR INITIALIZATION
2305   11AB FA F9 FF      lea d, [bp + -7] ; $len
2306   11AE DA            push d
2307   11AF             ; --- START FUNCTION CALL
2308   11AF FA FF FF      lea d, [bp + -1] ; $p
2309   11B2 2A            mov b, [d]
2310   11B3 38 00 00      mov c, 0
2311   11B6 74            mov d, b
2312   11B7 2A            mov b, [d]
2313   11B8 FD AB         swp b
2314   11BA D8            push b
2315   11BB 07 32 06      call strlen
2316   11BE 51 02 00      add sp, 2
2317   11C1             ; --- END FUNCTION CALL
2318   11C1 E7            pop d
2319   11C2 FD 43         mov [d], b
2320   11C4             ; --- END LOCAL VAR INITIALIZATION
2321   11C4             ; strcpy(sp, *(char **)p); 
2322   11C4             ; --- START FUNCTION CALL
2323   11C4 FA FF FF      lea d, [bp + -1] ; $p
2324   11C7 2A            mov b, [d]
2325   11C8 38 00 00      mov c, 0
2326   11CB 74            mov d, b
2327   11CC 2A            mov b, [d]
2328   11CD FD AB         swp b
2329   11CF D8            push b
2330   11D0 FA FB FF      lea d, [bp + -5] ; $sp
2331   11D3 2A            mov b, [d]
2332   11D4 38 00 00      mov c, 0
2333   11D7 FD AB         swp b
2334   11D9 D8            push b
2335   11DA 07 61 04      call strcpy
2336   11DD 51 04 00      add sp, 4
2337   11E0             ; --- END FUNCTION CALL
2338   11E0             ; sp = sp + len; 
2339   11E0 FA FB FF      lea d, [bp + -5] ; $sp
2340   11E3 DA            push d
2341   11E4 FA FB FF      lea d, [bp + -5] ; $sp
2342   11E7 2A            mov b, [d]
2343   11E8 38 00 00      mov c, 0
2344   11EB             ; --- START TERMS
2345   11EB D7            push a
2346   11EC 11            mov a, b
2347   11ED FA F9 FF      lea d, [bp + -7] ; $len
2348   11F0 2A            mov b, [d]
2349   11F1 38 00 00      mov c, 0
2350   11F4 56            add b, a
2351   11F5 E4            pop a
2352   11F6             ; --- END TERMS
2353   11F6 E7            pop d
2354   11F7 FD 43         mov [d], b
2355   11F9             ; p = p + 2; 
2356   11F9 FA FF FF      lea d, [bp + -1] ; $p
2357   11FC DA            push d
2358   11FD FA FF FF      lea d, [bp + -1] ; $p
2359   1200 2A            mov b, [d]
2360   1201 38 00 00      mov c, 0
2361   1204             ; --- START TERMS
2362   1204 D7            push a
2363   1205 11            mov a, b
2364   1206 26 02 00      mov b, $2
2365   1209 38 00 00      mov c, 0
2366   120C 56            add b, a
2367   120D E4            pop a
2368   120E             ; --- END TERMS
2369   120E E7            pop d
2370   120F FD 43         mov [d], b
2371   1211             ; break; 
2372   1211 0A 20 12      jmp _switch27_exit ; case break
2373   1214             _switch27_default:
2374   1214             ; print("Error: Unknown argument type.\n"); 
2375   1214             ; --- START FUNCTION CALL
2376   1214 26 48 21      mov b, _s1 ; "Error: Unknown argument type.\n"
2377   1217 FD AB         swp b
2378   1219 D8            push b
2379   121A 07 C6 1C      call print
2380   121D 51 02 00      add sp, 2
2381   1220             ; --- END FUNCTION CALL
2382   1220             _switch27_exit:
2383   1220             ; format_p++; 
2384   1220 FA FD FF      lea d, [bp + -3] ; $format_p
2385   1223 2A            mov b, [d]
2386   1224 38 00 00      mov c, 0
2387   1227 FD 77         inc b
2388   1229 FA FD FF      lea d, [bp + -3] ; $format_p
2389   122C FD 43         mov [d], b
2390   122E FD 7D         dec b
2391   1230 0A 5B 12      jmp _if26_exit
2392   1233             _if26_else:
2393   1233             ; *sp++ = *format_p++; 
2394   1233 FA FB FF      lea d, [bp + -5] ; $sp
2395   1236 2A            mov b, [d]
2396   1237 38 00 00      mov c, 0
2397   123A FD 77         inc b
2398   123C FA FB FF      lea d, [bp + -5] ; $sp
2399   123F FD 43         mov [d], b
2400   1241 FD 7D         dec b
2401   1243 D8            push b
2402   1244 FA FD FF      lea d, [bp + -3] ; $format_p
2403   1247 2A            mov b, [d]
2404   1248 38 00 00      mov c, 0
2405   124B FD 77         inc b
2406   124D FA FD FF      lea d, [bp + -3] ; $format_p
2407   1250 FD 43         mov [d], b
2408   1252 FD 7D         dec b
2409   1254 74            mov d, b
2410   1255 32            mov bl, [d]
2411   1256 A7 00         mov bh, 0
2412   1258 E7            pop d
2413   1259 FD 3E         mov [d], bl
2414   125B             _if26_exit:
2415   125B             _if25_exit:
2416   125B             _for24_update:
2417   125B 0A 2A 0F      jmp _for24_cond
2418   125E             _for24_exit:
2419   125E             ; *sp = '\0'; 
2420   125E FA FB FF      lea d, [bp + -5] ; $sp
2421   1261 2A            mov b, [d]
2422   1262 38 00 00      mov c, 0
2423   1265 D8            push b
2424   1266 26 00 00      mov b, $0
2425   1269 38 00 00      mov c, 0
2426   126C E7            pop d
2427   126D FD 3E         mov [d], bl
2428   126F             ; return sp - dest; // return total number of chars written 
2429   126F FA FB FF      lea d, [bp + -5] ; $sp
2430   1272 2A            mov b, [d]
2431   1273 38 00 00      mov c, 0
2432   1276             ; --- START TERMS
2433   1276 D7            push a
2434   1277 11            mov a, b
2435   1278 FA 05 00      lea d, [bp + 5] ; $dest
2436   127B 2A            mov b, [d]
2437   127C 38 00 00      mov c, 0
2438   127F 60            sub a, b
2439   1280 27            mov b, a
2440   1281 E4            pop a
2441   1282             ; --- END TERMS
2442   1282 F9            leave
2443   1283 09            ret
2444   1284             
2445   1284             err:
2446   1284 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2447   1287             ; print(e); 
2448   1287             ; --- START FUNCTION CALL
2449   1287 FA 05 00      lea d, [bp + 5] ; $e
2450   128A 2A            mov b, [d]
2451   128B 38 00 00      mov c, 0
2452   128E FD AB         swp b
2453   1290 D8            push b
2454   1291 07 C6 1C      call print
2455   1294 51 02 00      add sp, 2
2456   1297             ; --- END FUNCTION CALL
2457   1297 F9            leave
2458   1298 09            ret
2459   1299             
2460   1299             printx32:
2461   1299 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2462   129C             
2463   129C             ; --- BEGIN INLINE ASM SEGMENT
2464   129C FA 05 00      lea d, [bp + 5] ; $hex
2465   129F 2B 02 00      mov b, [d+2]
2466   12A2 07 29 20      call print_u16x
2467   12A5 2A            mov b, [d]
2468   12A6 07 29 20      call print_u16x
2469   12A9             ; --- END INLINE ASM SEGMENT
2470   12A9             
2471   12A9 F9            leave
2472   12AA 09            ret
2473   12AB             
2474   12AB             printx16:
2475   12AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2476   12AE             
2477   12AE             ; --- BEGIN INLINE ASM SEGMENT
2478   12AE FA 05 00      lea d, [bp + 5] ; $hex
2479   12B1 2A            mov b, [d]
2480   12B2 07 29 20      call print_u16x
2481   12B5             ; --- END INLINE ASM SEGMENT
2482   12B5             
2483   12B5 F9            leave
2484   12B6 09            ret
2485   12B7             
2486   12B7             printx8:
2487   12B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2488   12BA             
2489   12BA             ; --- BEGIN INLINE ASM SEGMENT
2490   12BA FA 05 00      lea d, [bp + 5] ; $hex
2491   12BD 32            mov bl, [d]
2492   12BE 07 6D 20      call print_u8x
2493   12C1             ; --- END INLINE ASM SEGMENT
2494   12C1             
2495   12C1 F9            leave
2496   12C2 09            ret
2497   12C3             
2498   12C3             hex_str_to_int:
2499   12C3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2500   12C6             ; int value = 0; 
2501   12C6 52 02 00      sub sp, 2
2502   12C9             ; --- START LOCAL VAR INITIALIZATION
2503   12C9 FA FF FF      lea d, [bp + -1] ; $value
2504   12CC DA            push d
2505   12CD 26 00 00      mov b, $0
2506   12D0 38 00 00      mov c, 0
2507   12D3 E7            pop d
2508   12D4 FD 43         mov [d], b
2509   12D6             ; --- END LOCAL VAR INITIALIZATION
2510   12D6             ; int i; 
2511   12D6 52 02 00      sub sp, 2
2512   12D9             ; char hex_char; 
2513   12D9 52 01 00      sub sp, 1
2514   12DC             ; int len; 
2515   12DC 52 02 00      sub sp, 2
2516   12DF             ; len = strlen(hex_string); 
2517   12DF FA FA FF      lea d, [bp + -6] ; $len
2518   12E2 DA            push d
2519   12E3             ; --- START FUNCTION CALL
2520   12E3 FA 05 00      lea d, [bp + 5] ; $hex_string
2521   12E6 2A            mov b, [d]
2522   12E7 38 00 00      mov c, 0
2523   12EA FD AB         swp b
2524   12EC D8            push b
2525   12ED 07 32 06      call strlen
2526   12F0 51 02 00      add sp, 2
2527   12F3             ; --- END FUNCTION CALL
2528   12F3 E7            pop d
2529   12F4 FD 43         mov [d], b
2530   12F6             ; for (i = 0; i < len; i++) { 
2531   12F6             _for31_init:
2532   12F6 FA FD FF      lea d, [bp + -3] ; $i
2533   12F9 DA            push d
2534   12FA 26 00 00      mov b, $0
2535   12FD 38 00 00      mov c, 0
2536   1300 E7            pop d
2537   1301 FD 43         mov [d], b
2538   1303             _for31_cond:
2539   1303 FA FD FF      lea d, [bp + -3] ; $i
2540   1306 2A            mov b, [d]
2541   1307 38 00 00      mov c, 0
2542   130A             ; --- START RELATIONAL
2543   130A D7            push a
2544   130B 11            mov a, b
2545   130C FA FA FF      lea d, [bp + -6] ; $len
2546   130F 2A            mov b, [d]
2547   1310 38 00 00      mov c, 0
2548   1313 B0            cmp a, b
2549   1314 FD 73         slt ; < (signed)
2550   1316 E4            pop a
2551   1317             ; --- END RELATIONAL
2552   1317 C0 00 00      cmp b, 0
2553   131A C6 67 14      je _for31_exit
2554   131D             _for31_block:
2555   131D             ; hex_char = hex_string[i]; 
2556   131D FA FC FF      lea d, [bp + -4] ; $hex_char
2557   1320 DA            push d
2558   1321 FA 05 00      lea d, [bp + 5] ; $hex_string
2559   1324 FD 2A         mov d, [d]
2560   1326 D7            push a
2561   1327 DA            push d
2562   1328 FA FD FF      lea d, [bp + -3] ; $i
2563   132B 2A            mov b, [d]
2564   132C 38 00 00      mov c, 0
2565   132F E7            pop d
2566   1330 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2567   1334 E4            pop a
2568   1335 32            mov bl, [d]
2569   1336 A7 00         mov bh, 0
2570   1338 38 00 00      mov c, 0
2571   133B E7            pop d
2572   133C FD 3E         mov [d], bl
2573   133E             ; if (hex_char >= 'a' && hex_char <= 'f')  
2574   133E             _if32_cond:
2575   133E FA FC FF      lea d, [bp + -4] ; $hex_char
2576   1341 32            mov bl, [d]
2577   1342 A7 00         mov bh, 0
2578   1344 38 00 00      mov c, 0
2579   1347             ; --- START RELATIONAL
2580   1347 D7            push a
2581   1348 11            mov a, b
2582   1349 26 61 00      mov b, $61
2583   134C 38 00 00      mov c, 0
2584   134F B0            cmp a, b
2585   1350 FD 80         sge ; >=
2586   1352 E4            pop a
2587   1353             ; --- END RELATIONAL
2588   1353             ; --- START LOGICAL AND
2589   1353 D7            push a
2590   1354 11            mov a, b
2591   1355 FA FC FF      lea d, [bp + -4] ; $hex_char
2592   1358 32            mov bl, [d]
2593   1359 A7 00         mov bh, 0
2594   135B 38 00 00      mov c, 0
2595   135E             ; --- START RELATIONAL
2596   135E D7            push a
2597   135F 11            mov a, b
2598   1360 26 66 00      mov b, $66
2599   1363 38 00 00      mov c, 0
2600   1366 B0            cmp a, b
2601   1367 FD 74         sle ; <= (signed)
2602   1369 E4            pop a
2603   136A             ; --- END RELATIONAL
2604   136A FD A7         sand a, b
2605   136C E4            pop a
2606   136D             ; --- END LOGICAL AND
2607   136D C0 00 00      cmp b, 0
2608   1370 C6 B0 13      je _if32_else
2609   1373             _if32_true:
2610   1373             ; value = (value * 16) + (hex_char - 'a' + 10); 
2611   1373 FA FF FF      lea d, [bp + -1] ; $value
2612   1376 DA            push d
2613   1377 FA FF FF      lea d, [bp + -1] ; $value
2614   137A 2A            mov b, [d]
2615   137B 38 00 00      mov c, 0
2616   137E             ; --- START FACTORS
2617   137E D7            push a
2618   137F 11            mov a, b
2619   1380 26 10 00      mov b, $10
2620   1383 38 00 00      mov c, 0
2621   1386 AC            mul a, b ; *
2622   1387 11            mov a, b
2623   1388 27            mov b, a
2624   1389 E4            pop a
2625   138A             ; --- END FACTORS
2626   138A             ; --- START TERMS
2627   138A D7            push a
2628   138B 11            mov a, b
2629   138C FA FC FF      lea d, [bp + -4] ; $hex_char
2630   138F 32            mov bl, [d]
2631   1390 A7 00         mov bh, 0
2632   1392 38 00 00      mov c, 0
2633   1395             ; --- START TERMS
2634   1395 D7            push a
2635   1396 11            mov a, b
2636   1397 26 61 00      mov b, $61
2637   139A 38 00 00      mov c, 0
2638   139D 60            sub a, b
2639   139E 27            mov b, a
2640   139F 11            mov a, b
2641   13A0 26 0A 00      mov b, $a
2642   13A3 38 00 00      mov c, 0
2643   13A6 56            add b, a
2644   13A7 E4            pop a
2645   13A8             ; --- END TERMS
2646   13A8 56            add b, a
2647   13A9 E4            pop a
2648   13AA             ; --- END TERMS
2649   13AA E7            pop d
2650   13AB FD 43         mov [d], b
2651   13AD 0A 54 14      jmp _if32_exit
2652   13B0             _if32_else:
2653   13B0             ; if (hex_char >= 'A' && hex_char <= 'F')  
2654   13B0             _if33_cond:
2655   13B0 FA FC FF      lea d, [bp + -4] ; $hex_char
2656   13B3 32            mov bl, [d]
2657   13B4 A7 00         mov bh, 0
2658   13B6 38 00 00      mov c, 0
2659   13B9             ; --- START RELATIONAL
2660   13B9 D7            push a
2661   13BA 11            mov a, b
2662   13BB 26 41 00      mov b, $41
2663   13BE 38 00 00      mov c, 0
2664   13C1 B0            cmp a, b
2665   13C2 FD 80         sge ; >=
2666   13C4 E4            pop a
2667   13C5             ; --- END RELATIONAL
2668   13C5             ; --- START LOGICAL AND
2669   13C5 D7            push a
2670   13C6 11            mov a, b
2671   13C7 FA FC FF      lea d, [bp + -4] ; $hex_char
2672   13CA 32            mov bl, [d]
2673   13CB A7 00         mov bh, 0
2674   13CD 38 00 00      mov c, 0
2675   13D0             ; --- START RELATIONAL
2676   13D0 D7            push a
2677   13D1 11            mov a, b
2678   13D2 26 46 00      mov b, $46
2679   13D5 38 00 00      mov c, 0
2680   13D8 B0            cmp a, b
2681   13D9 FD 74         sle ; <= (signed)
2682   13DB E4            pop a
2683   13DC             ; --- END RELATIONAL
2684   13DC FD A7         sand a, b
2685   13DE E4            pop a
2686   13DF             ; --- END LOGICAL AND
2687   13DF C0 00 00      cmp b, 0
2688   13E2 C6 22 14      je _if33_else
2689   13E5             _if33_true:
2690   13E5             ; value = (value * 16) + (hex_char - 'A' + 10); 
2691   13E5 FA FF FF      lea d, [bp + -1] ; $value
2692   13E8 DA            push d
2693   13E9 FA FF FF      lea d, [bp + -1] ; $value
2694   13EC 2A            mov b, [d]
2695   13ED 38 00 00      mov c, 0
2696   13F0             ; --- START FACTORS
2697   13F0 D7            push a
2698   13F1 11            mov a, b
2699   13F2 26 10 00      mov b, $10
2700   13F5 38 00 00      mov c, 0
2701   13F8 AC            mul a, b ; *
2702   13F9 11            mov a, b
2703   13FA 27            mov b, a
2704   13FB E4            pop a
2705   13FC             ; --- END FACTORS
2706   13FC             ; --- START TERMS
2707   13FC D7            push a
2708   13FD 11            mov a, b
2709   13FE FA FC FF      lea d, [bp + -4] ; $hex_char
2710   1401 32            mov bl, [d]
2711   1402 A7 00         mov bh, 0
2712   1404 38 00 00      mov c, 0
2713   1407             ; --- START TERMS
2714   1407 D7            push a
2715   1408 11            mov a, b
2716   1409 26 41 00      mov b, $41
2717   140C 38 00 00      mov c, 0
2718   140F 60            sub a, b
2719   1410 27            mov b, a
2720   1411 11            mov a, b
2721   1412 26 0A 00      mov b, $a
2722   1415 38 00 00      mov c, 0
2723   1418 56            add b, a
2724   1419 E4            pop a
2725   141A             ; --- END TERMS
2726   141A 56            add b, a
2727   141B E4            pop a
2728   141C             ; --- END TERMS
2729   141C E7            pop d
2730   141D FD 43         mov [d], b
2731   141F 0A 54 14      jmp _if33_exit
2732   1422             _if33_else:
2733   1422             ; value = (value * 16) + (hex_char - '0'); 
2734   1422 FA FF FF      lea d, [bp + -1] ; $value
2735   1425 DA            push d
2736   1426 FA FF FF      lea d, [bp + -1] ; $value
2737   1429 2A            mov b, [d]
2738   142A 38 00 00      mov c, 0
2739   142D             ; --- START FACTORS
2740   142D D7            push a
2741   142E 11            mov a, b
2742   142F 26 10 00      mov b, $10
2743   1432 38 00 00      mov c, 0
2744   1435 AC            mul a, b ; *
2745   1436 11            mov a, b
2746   1437 27            mov b, a
2747   1438 E4            pop a
2748   1439             ; --- END FACTORS
2749   1439             ; --- START TERMS
2750   1439 D7            push a
2751   143A 11            mov a, b
2752   143B FA FC FF      lea d, [bp + -4] ; $hex_char
2753   143E 32            mov bl, [d]
2754   143F A7 00         mov bh, 0
2755   1441 38 00 00      mov c, 0
2756   1444             ; --- START TERMS
2757   1444 D7            push a
2758   1445 11            mov a, b
2759   1446 26 30 00      mov b, $30
2760   1449 38 00 00      mov c, 0
2761   144C 60            sub a, b
2762   144D 27            mov b, a
2763   144E E4            pop a
2764   144F             ; --- END TERMS
2765   144F 56            add b, a
2766   1450 E4            pop a
2767   1451             ; --- END TERMS
2768   1451 E7            pop d
2769   1452 FD 43         mov [d], b
2770   1454             _if33_exit:
2771   1454             _if32_exit:
2772   1454             _for31_update:
2773   1454 FA FD FF      lea d, [bp + -3] ; $i
2774   1457 2A            mov b, [d]
2775   1458 38 00 00      mov c, 0
2776   145B FD 77         inc b
2777   145D FA FD FF      lea d, [bp + -3] ; $i
2778   1460 FD 43         mov [d], b
2779   1462 FD 7D         dec b
2780   1464 0A 03 13      jmp _for31_cond
2781   1467             _for31_exit:
2782   1467             ; return value; 
2783   1467 FA FF FF      lea d, [bp + -1] ; $value
2784   146A 2A            mov b, [d]
2785   146B 38 00 00      mov c, 0
2786   146E F9            leave
2787   146F 09            ret
2788   1470             
2789   1470             gets:
2790   1470 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2791   1473             
2792   1473             ; --- BEGIN INLINE ASM SEGMENT
2793   1473 FA 05 00      lea d, [bp + 5] ; $s
2794   1476 15            mov a, [d]
2795   1477 3C            mov d, a
2796   1478 07 8E 1E      call _gets
2797   147B             ; --- END INLINE ASM SEGMENT
2798   147B             
2799   147B             ; return strlen(s); 
2800   147B             ; --- START FUNCTION CALL
2801   147B FA 05 00      lea d, [bp + 5] ; $s
2802   147E 2A            mov b, [d]
2803   147F 38 00 00      mov c, 0
2804   1482 FD AB         swp b
2805   1484 D8            push b
2806   1485 07 32 06      call strlen
2807   1488 51 02 00      add sp, 2
2808   148B             ; --- END FUNCTION CALL
2809   148B F9            leave
2810   148C 09            ret
2811   148D             
2812   148D             print_signed:
2813   148D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2814   1490             ; char digits[5]; 
2815   1490 52 05 00      sub sp, 5
2816   1493             ; int i = 0; 
2817   1493 52 02 00      sub sp, 2
2818   1496             ; --- START LOCAL VAR INITIALIZATION
2819   1496 FA FA FF      lea d, [bp + -6] ; $i
2820   1499 DA            push d
2821   149A 26 00 00      mov b, $0
2822   149D 38 00 00      mov c, 0
2823   14A0 E7            pop d
2824   14A1 FD 43         mov [d], b
2825   14A3             ; --- END LOCAL VAR INITIALIZATION
2826   14A3             ; if (num < 0) { 
2827   14A3             _if34_cond:
2828   14A3 FA 05 00      lea d, [bp + 5] ; $num
2829   14A6 2A            mov b, [d]
2830   14A7 38 00 00      mov c, 0
2831   14AA             ; --- START RELATIONAL
2832   14AA D7            push a
2833   14AB 11            mov a, b
2834   14AC 26 00 00      mov b, $0
2835   14AF 38 00 00      mov c, 0
2836   14B2 B0            cmp a, b
2837   14B3 FD 73         slt ; < (signed)
2838   14B5 E4            pop a
2839   14B6             ; --- END RELATIONAL
2840   14B6 C0 00 00      cmp b, 0
2841   14B9 C6 DC 14      je _if34_else
2842   14BC             _if34_true:
2843   14BC             ; putchar('-'); 
2844   14BC             ; --- START FUNCTION CALL
2845   14BC 26 2D 00      mov b, $2d
2846   14BF 38 00 00      mov c, 0
2847   14C2 DD            push bl
2848   14C3 07 78 1C      call putchar
2849   14C6 51 01 00      add sp, 1
2850   14C9             ; --- END FUNCTION CALL
2851   14C9             ; num = -num; 
2852   14C9 FA 05 00      lea d, [bp + 5] ; $num
2853   14CC DA            push d
2854   14CD FA 05 00      lea d, [bp + 5] ; $num
2855   14D0 2A            mov b, [d]
2856   14D1 38 00 00      mov c, 0
2857   14D4 FD 97         neg b
2858   14D6 E7            pop d
2859   14D7 FD 43         mov [d], b
2860   14D9 0A 07 15      jmp _if34_exit
2861   14DC             _if34_else:
2862   14DC             ; if (num == 0) { 
2863   14DC             _if35_cond:
2864   14DC FA 05 00      lea d, [bp + 5] ; $num
2865   14DF 2A            mov b, [d]
2866   14E0 38 00 00      mov c, 0
2867   14E3             ; --- START RELATIONAL
2868   14E3 D7            push a
2869   14E4 11            mov a, b
2870   14E5 26 00 00      mov b, $0
2871   14E8 38 00 00      mov c, 0
2872   14EB B0            cmp a, b
2873   14EC FD 71         seq ; ==
2874   14EE E4            pop a
2875   14EF             ; --- END RELATIONAL
2876   14EF C0 00 00      cmp b, 0
2877   14F2 C6 07 15      je _if35_exit
2878   14F5             _if35_true:
2879   14F5             ; putchar('0'); 
2880   14F5             ; --- START FUNCTION CALL
2881   14F5 26 30 00      mov b, $30
2882   14F8 38 00 00      mov c, 0
2883   14FB DD            push bl
2884   14FC 07 78 1C      call putchar
2885   14FF 51 01 00      add sp, 1
2886   1502             ; --- END FUNCTION CALL
2887   1502             ; return; 
2888   1502 F9            leave
2889   1503 09            ret
2890   1504 0A 07 15      jmp _if35_exit
2891   1507             _if35_exit:
2892   1507             _if34_exit:
2893   1507             ; while (num > 0) { 
2894   1507             _while36_cond:
2895   1507 FA 05 00      lea d, [bp + 5] ; $num
2896   150A 2A            mov b, [d]
2897   150B 38 00 00      mov c, 0
2898   150E             ; --- START RELATIONAL
2899   150E D7            push a
2900   150F 11            mov a, b
2901   1510 26 00 00      mov b, $0
2902   1513 38 00 00      mov c, 0
2903   1516 B0            cmp a, b
2904   1517 FD 7F         sgt ; >
2905   1519 E4            pop a
2906   151A             ; --- END RELATIONAL
2907   151A C0 00 00      cmp b, 0
2908   151D C6 7C 15      je _while36_exit
2909   1520             _while36_block:
2910   1520             ; digits[i] = '0' + (num % 10); 
2911   1520 FA FC FF      lea d, [bp + -4] ; $digits
2912   1523 D7            push a
2913   1524 DA            push d
2914   1525 FA FA FF      lea d, [bp + -6] ; $i
2915   1528 2A            mov b, [d]
2916   1529 38 00 00      mov c, 0
2917   152C E7            pop d
2918   152D 5A            add d, b
2919   152E E4            pop a
2920   152F DA            push d
2921   1530 26 30 00      mov b, $30
2922   1533 38 00 00      mov c, 0
2923   1536             ; --- START TERMS
2924   1536 D7            push a
2925   1537 11            mov a, b
2926   1538 FA 05 00      lea d, [bp + 5] ; $num
2927   153B 2A            mov b, [d]
2928   153C 38 00 00      mov c, 0
2929   153F             ; --- START FACTORS
2930   153F D7            push a
2931   1540 11            mov a, b
2932   1541 26 0A 00      mov b, $a
2933   1544 38 00 00      mov c, 0
2934   1547 AE            div a, b ; 
2935   1548 11            mov a, b
2936   1549 27            mov b, a
2937   154A E4            pop a
2938   154B             ; --- END FACTORS
2939   154B 56            add b, a
2940   154C E4            pop a
2941   154D             ; --- END TERMS
2942   154D E7            pop d
2943   154E FD 3E         mov [d], bl
2944   1550             ; num = num / 10; 
2945   1550 FA 05 00      lea d, [bp + 5] ; $num
2946   1553 DA            push d
2947   1554 FA 05 00      lea d, [bp + 5] ; $num
2948   1557 2A            mov b, [d]
2949   1558 38 00 00      mov c, 0
2950   155B             ; --- START FACTORS
2951   155B D7            push a
2952   155C 11            mov a, b
2953   155D 26 0A 00      mov b, $a
2954   1560 38 00 00      mov c, 0
2955   1563 AE            div a, b
2956   1564 27            mov b, a
2957   1565 E4            pop a
2958   1566             ; --- END FACTORS
2959   1566 E7            pop d
2960   1567 FD 43         mov [d], b
2961   1569             ; i++; 
2962   1569 FA FA FF      lea d, [bp + -6] ; $i
2963   156C 2A            mov b, [d]
2964   156D 38 00 00      mov c, 0
2965   1570 FD 77         inc b
2966   1572 FA FA FF      lea d, [bp + -6] ; $i
2967   1575 FD 43         mov [d], b
2968   1577 FD 7D         dec b
2969   1579 0A 07 15      jmp _while36_cond
2970   157C             _while36_exit:
2971   157C             ; while (i > 0) { 
2972   157C             _while37_cond:
2973   157C FA FA FF      lea d, [bp + -6] ; $i
2974   157F 2A            mov b, [d]
2975   1580 38 00 00      mov c, 0
2976   1583             ; --- START RELATIONAL
2977   1583 D7            push a
2978   1584 11            mov a, b
2979   1585 26 00 00      mov b, $0
2980   1588 38 00 00      mov c, 0
2981   158B B0            cmp a, b
2982   158C FD 7F         sgt ; >
2983   158E E4            pop a
2984   158F             ; --- END RELATIONAL
2985   158F C0 00 00      cmp b, 0
2986   1592 C6 C4 15      je _while37_exit
2987   1595             _while37_block:
2988   1595             ; i--; 
2989   1595 FA FA FF      lea d, [bp + -6] ; $i
2990   1598 2A            mov b, [d]
2991   1599 38 00 00      mov c, 0
2992   159C FD 7D         dec b
2993   159E FA FA FF      lea d, [bp + -6] ; $i
2994   15A1 FD 43         mov [d], b
2995   15A3 FD 77         inc b
2996   15A5             ; putchar(digits[i]); 
2997   15A5             ; --- START FUNCTION CALL
2998   15A5 FA FC FF      lea d, [bp + -4] ; $digits
2999   15A8 D7            push a
3000   15A9 DA            push d
3001   15AA FA FA FF      lea d, [bp + -6] ; $i
3002   15AD 2A            mov b, [d]
3003   15AE 38 00 00      mov c, 0
3004   15B1 E7            pop d
3005   15B2 5A            add d, b
3006   15B3 E4            pop a
3007   15B4 32            mov bl, [d]
3008   15B5 A7 00         mov bh, 0
3009   15B7 38 00 00      mov c, 0
3010   15BA DD            push bl
3011   15BB 07 78 1C      call putchar
3012   15BE 51 01 00      add sp, 1
3013   15C1             ; --- END FUNCTION CALL
3014   15C1 0A 7C 15      jmp _while37_cond
3015   15C4             _while37_exit:
3016   15C4 F9            leave
3017   15C5 09            ret
3018   15C6             
3019   15C6             print_signed_long:
3020   15C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3021   15C9             ; char digits[10]; 
3022   15C9 52 0A 00      sub sp, 10
3023   15CC             ; int i = 0; 
3024   15CC 52 02 00      sub sp, 2
3025   15CF             ; --- START LOCAL VAR INITIALIZATION
3026   15CF FA F5 FF      lea d, [bp + -11] ; $i
3027   15D2 DA            push d
3028   15D3 26 00 00      mov b, $0
3029   15D6 38 00 00      mov c, 0
3030   15D9 E7            pop d
3031   15DA FD 43         mov [d], b
3032   15DC             ; --- END LOCAL VAR INITIALIZATION
3033   15DC             ; if (num < 0) { 
3034   15DC             _if38_cond:
3035   15DC FA 05 00      lea d, [bp + 5] ; $num
3036   15DF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3037   15E2 FD 39         mov c, b ; And place it into C
3038   15E4 2A            mov b, [d] ; Lower Word in B
3039   15E5             ; --- START RELATIONAL
3040   15E5 D7            push a
3041   15E6 FD D8         push g
3042   15E8 11            mov a, b
3043   15E9 FD 7A         mov g, c
3044   15EB 26 00 00      mov b, $0
3045   15EE 38 00 00      mov c, 0
3046   15F1 38 00 00      mov c, 0
3047   15F4 FD AF         cmp32 ga, cb
3048   15F6 FD 73         slt ; <
3049   15F8 FD F1         pop g
3050   15FA E4            pop a
3051   15FB             ; --- END RELATIONAL
3052   15FB C0 00 00      cmp b, 0
3053   15FE C6 2A 16      je _if38_else
3054   1601             _if38_true:
3055   1601             ; putchar('-'); 
3056   1601             ; --- START FUNCTION CALL
3057   1601 26 2D 00      mov b, $2d
3058   1604 38 00 00      mov c, 0
3059   1607 DD            push bl
3060   1608 07 78 1C      call putchar
3061   160B 51 01 00      add sp, 1
3062   160E             ; --- END FUNCTION CALL
3063   160E             ; num = -num; 
3064   160E FA 05 00      lea d, [bp + 5] ; $num
3065   1611 DA            push d
3066   1612 FA 05 00      lea d, [bp + 5] ; $num
3067   1615 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3068   1618 FD 39         mov c, b ; And place it into C
3069   161A 2A            mov b, [d] ; Lower Word in B
3070   161B FD 97         neg b
3071   161D E7            pop d
3072   161E FD 43         mov [d], b
3073   1620 26 00 00      mov b, 0
3074   1623 FD 44 02 00   mov [d + 2], b
3075   1627 0A 61 16      jmp _if38_exit
3076   162A             _if38_else:
3077   162A             ; if (num == 0) { 
3078   162A             _if39_cond:
3079   162A FA 05 00      lea d, [bp + 5] ; $num
3080   162D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3081   1630 FD 39         mov c, b ; And place it into C
3082   1632 2A            mov b, [d] ; Lower Word in B
3083   1633             ; --- START RELATIONAL
3084   1633 D7            push a
3085   1634 FD D8         push g
3086   1636 11            mov a, b
3087   1637 FD 7A         mov g, c
3088   1639 26 00 00      mov b, $0
3089   163C 38 00 00      mov c, 0
3090   163F 38 00 00      mov c, 0
3091   1642 FD AF         cmp32 ga, cb
3092   1644 FD 71         seq ; ==
3093   1646 FD F1         pop g
3094   1648 E4            pop a
3095   1649             ; --- END RELATIONAL
3096   1649 C0 00 00      cmp b, 0
3097   164C C6 61 16      je _if39_exit
3098   164F             _if39_true:
3099   164F             ; putchar('0'); 
3100   164F             ; --- START FUNCTION CALL
3101   164F 26 30 00      mov b, $30
3102   1652 38 00 00      mov c, 0
3103   1655 DD            push bl
3104   1656 07 78 1C      call putchar
3105   1659 51 01 00      add sp, 1
3106   165C             ; --- END FUNCTION CALL
3107   165C             ; return; 
3108   165C F9            leave
3109   165D 09            ret
3110   165E 0A 61 16      jmp _if39_exit
3111   1661             _if39_exit:
3112   1661             _if38_exit:
3113   1661             ; while (num > 0) { 
3114   1661             _while40_cond:
3115   1661 FA 05 00      lea d, [bp + 5] ; $num
3116   1664 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3117   1667 FD 39         mov c, b ; And place it into C
3118   1669 2A            mov b, [d] ; Lower Word in B
3119   166A             ; --- START RELATIONAL
3120   166A D7            push a
3121   166B FD D8         push g
3122   166D 11            mov a, b
3123   166E FD 7A         mov g, c
3124   1670 26 00 00      mov b, $0
3125   1673 38 00 00      mov c, 0
3126   1676 38 00 00      mov c, 0
3127   1679 FD AF         cmp32 ga, cb
3128   167B FD 7F         sgt
3129   167D FD F1         pop g
3130   167F E4            pop a
3131   1680             ; --- END RELATIONAL
3132   1680 C0 00 00      cmp b, 0
3133   1683 C6 EC 16      je _while40_exit
3134   1686             _while40_block:
3135   1686             ; digits[i] = '0' + (num % 10); 
3136   1686 FA F7 FF      lea d, [bp + -9] ; $digits
3137   1689 D7            push a
3138   168A DA            push d
3139   168B FA F5 FF      lea d, [bp + -11] ; $i
3140   168E 2A            mov b, [d]
3141   168F 38 00 00      mov c, 0
3142   1692 E7            pop d
3143   1693 5A            add d, b
3144   1694 E4            pop a
3145   1695 DA            push d
3146   1696 26 30 00      mov b, $30
3147   1699 38 00 00      mov c, 0
3148   169C             ; --- START TERMS
3149   169C D7            push a
3150   169D 11            mov a, b
3151   169E FA 05 00      lea d, [bp + 5] ; $num
3152   16A1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3153   16A4 FD 39         mov c, b ; And place it into C
3154   16A6 2A            mov b, [d] ; Lower Word in B
3155   16A7             ; --- START FACTORS
3156   16A7 D7            push a
3157   16A8 11            mov a, b
3158   16A9 26 0A 00      mov b, $a
3159   16AC 38 00 00      mov c, 0
3160   16AF AE            div a, b ; 
3161   16B0 11            mov a, b
3162   16B1 27            mov b, a
3163   16B2 E4            pop a
3164   16B3             ; --- END FACTORS
3165   16B3 FD 15         add32 cb, ga
3166   16B5 E4            pop a
3167   16B6             ; --- END TERMS
3168   16B6 E7            pop d
3169   16B7 FD 3E         mov [d], bl
3170   16B9             ; num = num / 10; 
3171   16B9 FA 05 00      lea d, [bp + 5] ; $num
3172   16BC DA            push d
3173   16BD FA 05 00      lea d, [bp + 5] ; $num
3174   16C0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3175   16C3 FD 39         mov c, b ; And place it into C
3176   16C5 2A            mov b, [d] ; Lower Word in B
3177   16C6             ; --- START FACTORS
3178   16C6 D7            push a
3179   16C7 11            mov a, b
3180   16C8 26 0A 00      mov b, $a
3181   16CB 38 00 00      mov c, 0
3182   16CE AE            div a, b
3183   16CF 27            mov b, a
3184   16D0 E4            pop a
3185   16D1             ; --- END FACTORS
3186   16D1 E7            pop d
3187   16D2 FD 43         mov [d], b
3188   16D4 28            mov b, c
3189   16D5 FD 44 02 00   mov [d + 2], b
3190   16D9             ; i++; 
3191   16D9 FA F5 FF      lea d, [bp + -11] ; $i
3192   16DC 2A            mov b, [d]
3193   16DD 38 00 00      mov c, 0
3194   16E0 FD 77         inc b
3195   16E2 FA F5 FF      lea d, [bp + -11] ; $i
3196   16E5 FD 43         mov [d], b
3197   16E7 FD 7D         dec b
3198   16E9 0A 61 16      jmp _while40_cond
3199   16EC             _while40_exit:
3200   16EC             ; while (i > 0) { 
3201   16EC             _while41_cond:
3202   16EC FA F5 FF      lea d, [bp + -11] ; $i
3203   16EF 2A            mov b, [d]
3204   16F0 38 00 00      mov c, 0
3205   16F3             ; --- START RELATIONAL
3206   16F3 D7            push a
3207   16F4 11            mov a, b
3208   16F5 26 00 00      mov b, $0
3209   16F8 38 00 00      mov c, 0
3210   16FB B0            cmp a, b
3211   16FC FD 7F         sgt ; >
3212   16FE E4            pop a
3213   16FF             ; --- END RELATIONAL
3214   16FF C0 00 00      cmp b, 0
3215   1702 C6 34 17      je _while41_exit
3216   1705             _while41_block:
3217   1705             ; i--; 
3218   1705 FA F5 FF      lea d, [bp + -11] ; $i
3219   1708 2A            mov b, [d]
3220   1709 38 00 00      mov c, 0
3221   170C FD 7D         dec b
3222   170E FA F5 FF      lea d, [bp + -11] ; $i
3223   1711 FD 43         mov [d], b
3224   1713 FD 77         inc b
3225   1715             ; putchar(digits[i]); 
3226   1715             ; --- START FUNCTION CALL
3227   1715 FA F7 FF      lea d, [bp + -9] ; $digits
3228   1718 D7            push a
3229   1719 DA            push d
3230   171A FA F5 FF      lea d, [bp + -11] ; $i
3231   171D 2A            mov b, [d]
3232   171E 38 00 00      mov c, 0
3233   1721 E7            pop d
3234   1722 5A            add d, b
3235   1723 E4            pop a
3236   1724 32            mov bl, [d]
3237   1725 A7 00         mov bh, 0
3238   1727 38 00 00      mov c, 0
3239   172A DD            push bl
3240   172B 07 78 1C      call putchar
3241   172E 51 01 00      add sp, 1
3242   1731             ; --- END FUNCTION CALL
3243   1731 0A EC 16      jmp _while41_cond
3244   1734             _while41_exit:
3245   1734 F9            leave
3246   1735 09            ret
3247   1736             
3248   1736             print_unsigned_long:
3249   1736 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3250   1739             ; char digits[10]; 
3251   1739 52 0A 00      sub sp, 10
3252   173C             ; int i; 
3253   173C 52 02 00      sub sp, 2
3254   173F             ; i = 0; 
3255   173F FA F5 FF      lea d, [bp + -11] ; $i
3256   1742 DA            push d
3257   1743 26 00 00      mov b, $0
3258   1746 38 00 00      mov c, 0
3259   1749 E7            pop d
3260   174A FD 43         mov [d], b
3261   174C             ; if(num == 0){ 
3262   174C             _if42_cond:
3263   174C FA 05 00      lea d, [bp + 5] ; $num
3264   174F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3265   1752 FD 39         mov c, b ; And place it into C
3266   1754 2A            mov b, [d] ; Lower Word in B
3267   1755             ; --- START RELATIONAL
3268   1755 D7            push a
3269   1756 FD D8         push g
3270   1758 11            mov a, b
3271   1759 FD 7A         mov g, c
3272   175B 26 00 00      mov b, $0
3273   175E 38 00 00      mov c, 0
3274   1761 38 00 00      mov c, 0
3275   1764 FD AF         cmp32 ga, cb
3276   1766 FD 71         seq ; ==
3277   1768 FD F1         pop g
3278   176A E4            pop a
3279   176B             ; --- END RELATIONAL
3280   176B C0 00 00      cmp b, 0
3281   176E C6 83 17      je _if42_exit
3282   1771             _if42_true:
3283   1771             ; putchar('0'); 
3284   1771             ; --- START FUNCTION CALL
3285   1771 26 30 00      mov b, $30
3286   1774 38 00 00      mov c, 0
3287   1777 DD            push bl
3288   1778 07 78 1C      call putchar
3289   177B 51 01 00      add sp, 1
3290   177E             ; --- END FUNCTION CALL
3291   177E             ; return; 
3292   177E F9            leave
3293   177F 09            ret
3294   1780 0A 83 17      jmp _if42_exit
3295   1783             _if42_exit:
3296   1783             ; while (num > 0) { 
3297   1783             _while43_cond:
3298   1783 FA 05 00      lea d, [bp + 5] ; $num
3299   1786 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3300   1789 FD 39         mov c, b ; And place it into C
3301   178B 2A            mov b, [d] ; Lower Word in B
3302   178C             ; --- START RELATIONAL
3303   178C D7            push a
3304   178D FD D8         push g
3305   178F 11            mov a, b
3306   1790 FD 7A         mov g, c
3307   1792 26 00 00      mov b, $0
3308   1795 38 00 00      mov c, 0
3309   1798 38 00 00      mov c, 0
3310   179B FD AF         cmp32 ga, cb
3311   179D FD 81         sgu
3312   179F FD F1         pop g
3313   17A1 E4            pop a
3314   17A2             ; --- END RELATIONAL
3315   17A2 C0 00 00      cmp b, 0
3316   17A5 C6 0E 18      je _while43_exit
3317   17A8             _while43_block:
3318   17A8             ; digits[i] = '0' + (num % 10); 
3319   17A8 FA F7 FF      lea d, [bp + -9] ; $digits
3320   17AB D7            push a
3321   17AC DA            push d
3322   17AD FA F5 FF      lea d, [bp + -11] ; $i
3323   17B0 2A            mov b, [d]
3324   17B1 38 00 00      mov c, 0
3325   17B4 E7            pop d
3326   17B5 5A            add d, b
3327   17B6 E4            pop a
3328   17B7 DA            push d
3329   17B8 26 30 00      mov b, $30
3330   17BB 38 00 00      mov c, 0
3331   17BE             ; --- START TERMS
3332   17BE D7            push a
3333   17BF 11            mov a, b
3334   17C0 FA 05 00      lea d, [bp + 5] ; $num
3335   17C3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3336   17C6 FD 39         mov c, b ; And place it into C
3337   17C8 2A            mov b, [d] ; Lower Word in B
3338   17C9             ; --- START FACTORS
3339   17C9 D7            push a
3340   17CA 11            mov a, b
3341   17CB 26 0A 00      mov b, $a
3342   17CE 38 00 00      mov c, 0
3343   17D1 AE            div a, b ; 
3344   17D2 11            mov a, b
3345   17D3 27            mov b, a
3346   17D4 E4            pop a
3347   17D5             ; --- END FACTORS
3348   17D5 FD 15         add32 cb, ga
3349   17D7 E4            pop a
3350   17D8             ; --- END TERMS
3351   17D8 E7            pop d
3352   17D9 FD 3E         mov [d], bl
3353   17DB             ; num = num / 10; 
3354   17DB FA 05 00      lea d, [bp + 5] ; $num
3355   17DE DA            push d
3356   17DF FA 05 00      lea d, [bp + 5] ; $num
3357   17E2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3358   17E5 FD 39         mov c, b ; And place it into C
3359   17E7 2A            mov b, [d] ; Lower Word in B
3360   17E8             ; --- START FACTORS
3361   17E8 D7            push a
3362   17E9 11            mov a, b
3363   17EA 26 0A 00      mov b, $a
3364   17ED 38 00 00      mov c, 0
3365   17F0 AE            div a, b
3366   17F1 27            mov b, a
3367   17F2 E4            pop a
3368   17F3             ; --- END FACTORS
3369   17F3 E7            pop d
3370   17F4 FD 43         mov [d], b
3371   17F6 28            mov b, c
3372   17F7 FD 44 02 00   mov [d + 2], b
3373   17FB             ; i++; 
3374   17FB FA F5 FF      lea d, [bp + -11] ; $i
3375   17FE 2A            mov b, [d]
3376   17FF 38 00 00      mov c, 0
3377   1802 FD 77         inc b
3378   1804 FA F5 FF      lea d, [bp + -11] ; $i
3379   1807 FD 43         mov [d], b
3380   1809 FD 7D         dec b
3381   180B 0A 83 17      jmp _while43_cond
3382   180E             _while43_exit:
3383   180E             ; while (i > 0) { 
3384   180E             _while44_cond:
3385   180E FA F5 FF      lea d, [bp + -11] ; $i
3386   1811 2A            mov b, [d]
3387   1812 38 00 00      mov c, 0
3388   1815             ; --- START RELATIONAL
3389   1815 D7            push a
3390   1816 11            mov a, b
3391   1817 26 00 00      mov b, $0
3392   181A 38 00 00      mov c, 0
3393   181D B0            cmp a, b
3394   181E FD 7F         sgt ; >
3395   1820 E4            pop a
3396   1821             ; --- END RELATIONAL
3397   1821 C0 00 00      cmp b, 0
3398   1824 C6 56 18      je _while44_exit
3399   1827             _while44_block:
3400   1827             ; i--; 
3401   1827 FA F5 FF      lea d, [bp + -11] ; $i
3402   182A 2A            mov b, [d]
3403   182B 38 00 00      mov c, 0
3404   182E FD 7D         dec b
3405   1830 FA F5 FF      lea d, [bp + -11] ; $i
3406   1833 FD 43         mov [d], b
3407   1835 FD 77         inc b
3408   1837             ; putchar(digits[i]); 
3409   1837             ; --- START FUNCTION CALL
3410   1837 FA F7 FF      lea d, [bp + -9] ; $digits
3411   183A D7            push a
3412   183B DA            push d
3413   183C FA F5 FF      lea d, [bp + -11] ; $i
3414   183F 2A            mov b, [d]
3415   1840 38 00 00      mov c, 0
3416   1843 E7            pop d
3417   1844 5A            add d, b
3418   1845 E4            pop a
3419   1846 32            mov bl, [d]
3420   1847 A7 00         mov bh, 0
3421   1849 38 00 00      mov c, 0
3422   184C DD            push bl
3423   184D 07 78 1C      call putchar
3424   1850 51 01 00      add sp, 1
3425   1853             ; --- END FUNCTION CALL
3426   1853 0A 0E 18      jmp _while44_cond
3427   1856             _while44_exit:
3428   1856 F9            leave
3429   1857 09            ret
3430   1858             
3431   1858             sprint_unsigned:
3432   1858 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3433   185B             ; char digits[5]; 
3434   185B 52 05 00      sub sp, 5
3435   185E             ; int i; 
3436   185E 52 02 00      sub sp, 2
3437   1861             ; int len = 0; 
3438   1861 52 02 00      sub sp, 2
3439   1864             ; --- START LOCAL VAR INITIALIZATION
3440   1864 FA F8 FF      lea d, [bp + -8] ; $len
3441   1867 DA            push d
3442   1868 26 00 00      mov b, $0
3443   186B 38 00 00      mov c, 0
3444   186E E7            pop d
3445   186F FD 43         mov [d], b
3446   1871             ; --- END LOCAL VAR INITIALIZATION
3447   1871             ; i = 0; 
3448   1871 FA FA FF      lea d, [bp + -6] ; $i
3449   1874 DA            push d
3450   1875 26 00 00      mov b, $0
3451   1878 38 00 00      mov c, 0
3452   187B E7            pop d
3453   187C FD 43         mov [d], b
3454   187E             ; if(num == 0){ 
3455   187E             _if45_cond:
3456   187E FA 07 00      lea d, [bp + 7] ; $num
3457   1881 2A            mov b, [d]
3458   1882 38 00 00      mov c, 0
3459   1885             ; --- START RELATIONAL
3460   1885 D7            push a
3461   1886 11            mov a, b
3462   1887 26 00 00      mov b, $0
3463   188A 38 00 00      mov c, 0
3464   188D B0            cmp a, b
3465   188E FD 71         seq ; ==
3466   1890 E4            pop a
3467   1891             ; --- END RELATIONAL
3468   1891 C0 00 00      cmp b, 0
3469   1894 C6 BC 18      je _if45_exit
3470   1897             _if45_true:
3471   1897             ; *dest++ = '0'; 
3472   1897 FA 05 00      lea d, [bp + 5] ; $dest
3473   189A 2A            mov b, [d]
3474   189B 38 00 00      mov c, 0
3475   189E FD 77         inc b
3476   18A0 FA 05 00      lea d, [bp + 5] ; $dest
3477   18A3 FD 43         mov [d], b
3478   18A5 FD 7D         dec b
3479   18A7 D8            push b
3480   18A8 26 30 00      mov b, $30
3481   18AB 38 00 00      mov c, 0
3482   18AE E7            pop d
3483   18AF FD 3E         mov [d], bl
3484   18B1             ; return 1; 
3485   18B1 26 01 00      mov b, $1
3486   18B4 38 00 00      mov c, 0
3487   18B7 F9            leave
3488   18B8 09            ret
3489   18B9 0A BC 18      jmp _if45_exit
3490   18BC             _if45_exit:
3491   18BC             ; while (num > 0) { 
3492   18BC             _while46_cond:
3493   18BC FA 07 00      lea d, [bp + 7] ; $num
3494   18BF 2A            mov b, [d]
3495   18C0 38 00 00      mov c, 0
3496   18C3             ; --- START RELATIONAL
3497   18C3 D7            push a
3498   18C4 11            mov a, b
3499   18C5 26 00 00      mov b, $0
3500   18C8 38 00 00      mov c, 0
3501   18CB B0            cmp a, b
3502   18CC FD 81         sgu ; > (unsigned)
3503   18CE E4            pop a
3504   18CF             ; --- END RELATIONAL
3505   18CF C0 00 00      cmp b, 0
3506   18D2 C6 31 19      je _while46_exit
3507   18D5             _while46_block:
3508   18D5             ; digits[i] = '0' + (num % 10); 
3509   18D5 FA FC FF      lea d, [bp + -4] ; $digits
3510   18D8 D7            push a
3511   18D9 DA            push d
3512   18DA FA FA FF      lea d, [bp + -6] ; $i
3513   18DD 2A            mov b, [d]
3514   18DE 38 00 00      mov c, 0
3515   18E1 E7            pop d
3516   18E2 5A            add d, b
3517   18E3 E4            pop a
3518   18E4 DA            push d
3519   18E5 26 30 00      mov b, $30
3520   18E8 38 00 00      mov c, 0
3521   18EB             ; --- START TERMS
3522   18EB D7            push a
3523   18EC 11            mov a, b
3524   18ED FA 07 00      lea d, [bp + 7] ; $num
3525   18F0 2A            mov b, [d]
3526   18F1 38 00 00      mov c, 0
3527   18F4             ; --- START FACTORS
3528   18F4 D7            push a
3529   18F5 11            mov a, b
3530   18F6 26 0A 00      mov b, $a
3531   18F9 38 00 00      mov c, 0
3532   18FC AE            div a, b ; 
3533   18FD 11            mov a, b
3534   18FE 27            mov b, a
3535   18FF E4            pop a
3536   1900             ; --- END FACTORS
3537   1900 56            add b, a
3538   1901 E4            pop a
3539   1902             ; --- END TERMS
3540   1902 E7            pop d
3541   1903 FD 3E         mov [d], bl
3542   1905             ; num = num / 10; 
3543   1905 FA 07 00      lea d, [bp + 7] ; $num
3544   1908 DA            push d
3545   1909 FA 07 00      lea d, [bp + 7] ; $num
3546   190C 2A            mov b, [d]
3547   190D 38 00 00      mov c, 0
3548   1910             ; --- START FACTORS
3549   1910 D7            push a
3550   1911 11            mov a, b
3551   1912 26 0A 00      mov b, $a
3552   1915 38 00 00      mov c, 0
3553   1918 AE            div a, b
3554   1919 27            mov b, a
3555   191A E4            pop a
3556   191B             ; --- END FACTORS
3557   191B E7            pop d
3558   191C FD 43         mov [d], b
3559   191E             ; i++; 
3560   191E FA FA FF      lea d, [bp + -6] ; $i
3561   1921 2A            mov b, [d]
3562   1922 38 00 00      mov c, 0
3563   1925 FD 77         inc b
3564   1927 FA FA FF      lea d, [bp + -6] ; $i
3565   192A FD 43         mov [d], b
3566   192C FD 7D         dec b
3567   192E 0A BC 18      jmp _while46_cond
3568   1931             _while46_exit:
3569   1931             ; while (i > 0) { 
3570   1931             _while47_cond:
3571   1931 FA FA FF      lea d, [bp + -6] ; $i
3572   1934 2A            mov b, [d]
3573   1935 38 00 00      mov c, 0
3574   1938             ; --- START RELATIONAL
3575   1938 D7            push a
3576   1939 11            mov a, b
3577   193A 26 00 00      mov b, $0
3578   193D 38 00 00      mov c, 0
3579   1940 B0            cmp a, b
3580   1941 FD 7F         sgt ; >
3581   1943 E4            pop a
3582   1944             ; --- END RELATIONAL
3583   1944 C0 00 00      cmp b, 0
3584   1947 C6 96 19      je _while47_exit
3585   194A             _while47_block:
3586   194A             ; i--; 
3587   194A FA FA FF      lea d, [bp + -6] ; $i
3588   194D 2A            mov b, [d]
3589   194E 38 00 00      mov c, 0
3590   1951 FD 7D         dec b
3591   1953 FA FA FF      lea d, [bp + -6] ; $i
3592   1956 FD 43         mov [d], b
3593   1958 FD 77         inc b
3594   195A             ; *dest++ = digits[i]; 
3595   195A FA 05 00      lea d, [bp + 5] ; $dest
3596   195D 2A            mov b, [d]
3597   195E 38 00 00      mov c, 0
3598   1961 FD 77         inc b
3599   1963 FA 05 00      lea d, [bp + 5] ; $dest
3600   1966 FD 43         mov [d], b
3601   1968 FD 7D         dec b
3602   196A D8            push b
3603   196B FA FC FF      lea d, [bp + -4] ; $digits
3604   196E D7            push a
3605   196F DA            push d
3606   1970 FA FA FF      lea d, [bp + -6] ; $i
3607   1973 2A            mov b, [d]
3608   1974 38 00 00      mov c, 0
3609   1977 E7            pop d
3610   1978 5A            add d, b
3611   1979 E4            pop a
3612   197A 32            mov bl, [d]
3613   197B A7 00         mov bh, 0
3614   197D 38 00 00      mov c, 0
3615   1980 E7            pop d
3616   1981 FD 3E         mov [d], bl
3617   1983             ; len++; 
3618   1983 FA F8 FF      lea d, [bp + -8] ; $len
3619   1986 2A            mov b, [d]
3620   1987 38 00 00      mov c, 0
3621   198A FD 77         inc b
3622   198C FA F8 FF      lea d, [bp + -8] ; $len
3623   198F FD 43         mov [d], b
3624   1991 FD 7D         dec b
3625   1993 0A 31 19      jmp _while47_cond
3626   1996             _while47_exit:
3627   1996             ; *dest = '\0'; 
3628   1996 FA 05 00      lea d, [bp + 5] ; $dest
3629   1999 2A            mov b, [d]
3630   199A 38 00 00      mov c, 0
3631   199D D8            push b
3632   199E 26 00 00      mov b, $0
3633   19A1 38 00 00      mov c, 0
3634   19A4 E7            pop d
3635   19A5 FD 3E         mov [d], bl
3636   19A7             ; return len; 
3637   19A7 FA F8 FF      lea d, [bp + -8] ; $len
3638   19AA 2A            mov b, [d]
3639   19AB 38 00 00      mov c, 0
3640   19AE F9            leave
3641   19AF 09            ret
3642   19B0             
3643   19B0             print_unsigned:
3644   19B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3645   19B3             ; char digits[5]; 
3646   19B3 52 05 00      sub sp, 5
3647   19B6             ; int i; 
3648   19B6 52 02 00      sub sp, 2
3649   19B9             ; i = 0; 
3650   19B9 FA FA FF      lea d, [bp + -6] ; $i
3651   19BC DA            push d
3652   19BD 26 00 00      mov b, $0
3653   19C0 38 00 00      mov c, 0
3654   19C3 E7            pop d
3655   19C4 FD 43         mov [d], b
3656   19C6             ; if(num == 0){ 
3657   19C6             _if48_cond:
3658   19C6 FA 05 00      lea d, [bp + 5] ; $num
3659   19C9 2A            mov b, [d]
3660   19CA 38 00 00      mov c, 0
3661   19CD             ; --- START RELATIONAL
3662   19CD D7            push a
3663   19CE 11            mov a, b
3664   19CF 26 00 00      mov b, $0
3665   19D2 38 00 00      mov c, 0
3666   19D5 B0            cmp a, b
3667   19D6 FD 71         seq ; ==
3668   19D8 E4            pop a
3669   19D9             ; --- END RELATIONAL
3670   19D9 C0 00 00      cmp b, 0
3671   19DC C6 F1 19      je _if48_exit
3672   19DF             _if48_true:
3673   19DF             ; putchar('0'); 
3674   19DF             ; --- START FUNCTION CALL
3675   19DF 26 30 00      mov b, $30
3676   19E2 38 00 00      mov c, 0
3677   19E5 DD            push bl
3678   19E6 07 78 1C      call putchar
3679   19E9 51 01 00      add sp, 1
3680   19EC             ; --- END FUNCTION CALL
3681   19EC             ; return; 
3682   19EC F9            leave
3683   19ED 09            ret
3684   19EE 0A F1 19      jmp _if48_exit
3685   19F1             _if48_exit:
3686   19F1             ; while (num > 0) { 
3687   19F1             _while49_cond:
3688   19F1 FA 05 00      lea d, [bp + 5] ; $num
3689   19F4 2A            mov b, [d]
3690   19F5 38 00 00      mov c, 0
3691   19F8             ; --- START RELATIONAL
3692   19F8 D7            push a
3693   19F9 11            mov a, b
3694   19FA 26 00 00      mov b, $0
3695   19FD 38 00 00      mov c, 0
3696   1A00 B0            cmp a, b
3697   1A01 FD 81         sgu ; > (unsigned)
3698   1A03 E4            pop a
3699   1A04             ; --- END RELATIONAL
3700   1A04 C0 00 00      cmp b, 0
3701   1A07 C6 66 1A      je _while49_exit
3702   1A0A             _while49_block:
3703   1A0A             ; digits[i] = '0' + (num % 10); 
3704   1A0A FA FC FF      lea d, [bp + -4] ; $digits
3705   1A0D D7            push a
3706   1A0E DA            push d
3707   1A0F FA FA FF      lea d, [bp + -6] ; $i
3708   1A12 2A            mov b, [d]
3709   1A13 38 00 00      mov c, 0
3710   1A16 E7            pop d
3711   1A17 5A            add d, b
3712   1A18 E4            pop a
3713   1A19 DA            push d
3714   1A1A 26 30 00      mov b, $30
3715   1A1D 38 00 00      mov c, 0
3716   1A20             ; --- START TERMS
3717   1A20 D7            push a
3718   1A21 11            mov a, b
3719   1A22 FA 05 00      lea d, [bp + 5] ; $num
3720   1A25 2A            mov b, [d]
3721   1A26 38 00 00      mov c, 0
3722   1A29             ; --- START FACTORS
3723   1A29 D7            push a
3724   1A2A 11            mov a, b
3725   1A2B 26 0A 00      mov b, $a
3726   1A2E 38 00 00      mov c, 0
3727   1A31 AE            div a, b ; 
3728   1A32 11            mov a, b
3729   1A33 27            mov b, a
3730   1A34 E4            pop a
3731   1A35             ; --- END FACTORS
3732   1A35 56            add b, a
3733   1A36 E4            pop a
3734   1A37             ; --- END TERMS
3735   1A37 E7            pop d
3736   1A38 FD 3E         mov [d], bl
3737   1A3A             ; num = num / 10; 
3738   1A3A FA 05 00      lea d, [bp + 5] ; $num
3739   1A3D DA            push d
3740   1A3E FA 05 00      lea d, [bp + 5] ; $num
3741   1A41 2A            mov b, [d]
3742   1A42 38 00 00      mov c, 0
3743   1A45             ; --- START FACTORS
3744   1A45 D7            push a
3745   1A46 11            mov a, b
3746   1A47 26 0A 00      mov b, $a
3747   1A4A 38 00 00      mov c, 0
3748   1A4D AE            div a, b
3749   1A4E 27            mov b, a
3750   1A4F E4            pop a
3751   1A50             ; --- END FACTORS
3752   1A50 E7            pop d
3753   1A51 FD 43         mov [d], b
3754   1A53             ; i++; 
3755   1A53 FA FA FF      lea d, [bp + -6] ; $i
3756   1A56 2A            mov b, [d]
3757   1A57 38 00 00      mov c, 0
3758   1A5A FD 77         inc b
3759   1A5C FA FA FF      lea d, [bp + -6] ; $i
3760   1A5F FD 43         mov [d], b
3761   1A61 FD 7D         dec b
3762   1A63 0A F1 19      jmp _while49_cond
3763   1A66             _while49_exit:
3764   1A66             ; while (i > 0) { 
3765   1A66             _while50_cond:
3766   1A66 FA FA FF      lea d, [bp + -6] ; $i
3767   1A69 2A            mov b, [d]
3768   1A6A 38 00 00      mov c, 0
3769   1A6D             ; --- START RELATIONAL
3770   1A6D D7            push a
3771   1A6E 11            mov a, b
3772   1A6F 26 00 00      mov b, $0
3773   1A72 38 00 00      mov c, 0
3774   1A75 B0            cmp a, b
3775   1A76 FD 7F         sgt ; >
3776   1A78 E4            pop a
3777   1A79             ; --- END RELATIONAL
3778   1A79 C0 00 00      cmp b, 0
3779   1A7C C6 AE 1A      je _while50_exit
3780   1A7F             _while50_block:
3781   1A7F             ; i--; 
3782   1A7F FA FA FF      lea d, [bp + -6] ; $i
3783   1A82 2A            mov b, [d]
3784   1A83 38 00 00      mov c, 0
3785   1A86 FD 7D         dec b
3786   1A88 FA FA FF      lea d, [bp + -6] ; $i
3787   1A8B FD 43         mov [d], b
3788   1A8D FD 77         inc b
3789   1A8F             ; putchar(digits[i]); 
3790   1A8F             ; --- START FUNCTION CALL
3791   1A8F FA FC FF      lea d, [bp + -4] ; $digits
3792   1A92 D7            push a
3793   1A93 DA            push d
3794   1A94 FA FA FF      lea d, [bp + -6] ; $i
3795   1A97 2A            mov b, [d]
3796   1A98 38 00 00      mov c, 0
3797   1A9B E7            pop d
3798   1A9C 5A            add d, b
3799   1A9D E4            pop a
3800   1A9E 32            mov bl, [d]
3801   1A9F A7 00         mov bh, 0
3802   1AA1 38 00 00      mov c, 0
3803   1AA4 DD            push bl
3804   1AA5 07 78 1C      call putchar
3805   1AA8 51 01 00      add sp, 1
3806   1AAB             ; --- END FUNCTION CALL
3807   1AAB 0A 66 1A      jmp _while50_cond
3808   1AAE             _while50_exit:
3809   1AAE F9            leave
3810   1AAF 09            ret
3811   1AB0             
3812   1AB0             sprint_signed:
3813   1AB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3814   1AB3             ; char digits[5]; 
3815   1AB3 52 05 00      sub sp, 5
3816   1AB6             ; int i = 0; 
3817   1AB6 52 02 00      sub sp, 2
3818   1AB9             ; --- START LOCAL VAR INITIALIZATION
3819   1AB9 FA FA FF      lea d, [bp + -6] ; $i
3820   1ABC DA            push d
3821   1ABD 26 00 00      mov b, $0
3822   1AC0 38 00 00      mov c, 0
3823   1AC3 E7            pop d
3824   1AC4 FD 43         mov [d], b
3825   1AC6             ; --- END LOCAL VAR INITIALIZATION
3826   1AC6             ; int len = 0; 
3827   1AC6 52 02 00      sub sp, 2
3828   1AC9             ; --- START LOCAL VAR INITIALIZATION
3829   1AC9 FA F8 FF      lea d, [bp + -8] ; $len
3830   1ACC DA            push d
3831   1ACD 26 00 00      mov b, $0
3832   1AD0 38 00 00      mov c, 0
3833   1AD3 E7            pop d
3834   1AD4 FD 43         mov [d], b
3835   1AD6             ; --- END LOCAL VAR INITIALIZATION
3836   1AD6             ; if (num < 0) { 
3837   1AD6             _if51_cond:
3838   1AD6 FA 07 00      lea d, [bp + 7] ; $num
3839   1AD9 2A            mov b, [d]
3840   1ADA 38 00 00      mov c, 0
3841   1ADD             ; --- START RELATIONAL
3842   1ADD D7            push a
3843   1ADE 11            mov a, b
3844   1ADF 26 00 00      mov b, $0
3845   1AE2 38 00 00      mov c, 0
3846   1AE5 B0            cmp a, b
3847   1AE6 FD 73         slt ; < (signed)
3848   1AE8 E4            pop a
3849   1AE9             ; --- END RELATIONAL
3850   1AE9 C0 00 00      cmp b, 0
3851   1AEC C6 2C 1B      je _if51_else
3852   1AEF             _if51_true:
3853   1AEF             ; *dest++ = '-'; 
3854   1AEF FA 05 00      lea d, [bp + 5] ; $dest
3855   1AF2 2A            mov b, [d]
3856   1AF3 38 00 00      mov c, 0
3857   1AF6 FD 77         inc b
3858   1AF8 FA 05 00      lea d, [bp + 5] ; $dest
3859   1AFB FD 43         mov [d], b
3860   1AFD FD 7D         dec b
3861   1AFF D8            push b
3862   1B00 26 2D 00      mov b, $2d
3863   1B03 38 00 00      mov c, 0
3864   1B06 E7            pop d
3865   1B07 FD 3E         mov [d], bl
3866   1B09             ; num = -num; 
3867   1B09 FA 07 00      lea d, [bp + 7] ; $num
3868   1B0C DA            push d
3869   1B0D FA 07 00      lea d, [bp + 7] ; $num
3870   1B10 2A            mov b, [d]
3871   1B11 38 00 00      mov c, 0
3872   1B14 FD 97         neg b
3873   1B16 E7            pop d
3874   1B17 FD 43         mov [d], b
3875   1B19             ; len++; 
3876   1B19 FA F8 FF      lea d, [bp + -8] ; $len
3877   1B1C 2A            mov b, [d]
3878   1B1D 38 00 00      mov c, 0
3879   1B20 FD 77         inc b
3880   1B22 FA F8 FF      lea d, [bp + -8] ; $len
3881   1B25 FD 43         mov [d], b
3882   1B27 FD 7D         dec b
3883   1B29 0A 7B 1B      jmp _if51_exit
3884   1B2C             _if51_else:
3885   1B2C             ; if (num == 0) { 
3886   1B2C             _if52_cond:
3887   1B2C FA 07 00      lea d, [bp + 7] ; $num
3888   1B2F 2A            mov b, [d]
3889   1B30 38 00 00      mov c, 0
3890   1B33             ; --- START RELATIONAL
3891   1B33 D7            push a
3892   1B34 11            mov a, b
3893   1B35 26 00 00      mov b, $0
3894   1B38 38 00 00      mov c, 0
3895   1B3B B0            cmp a, b
3896   1B3C FD 71         seq ; ==
3897   1B3E E4            pop a
3898   1B3F             ; --- END RELATIONAL
3899   1B3F C0 00 00      cmp b, 0
3900   1B42 C6 7B 1B      je _if52_exit
3901   1B45             _if52_true:
3902   1B45             ; *dest++ = '0'; 
3903   1B45 FA 05 00      lea d, [bp + 5] ; $dest
3904   1B48 2A            mov b, [d]
3905   1B49 38 00 00      mov c, 0
3906   1B4C FD 77         inc b
3907   1B4E FA 05 00      lea d, [bp + 5] ; $dest
3908   1B51 FD 43         mov [d], b
3909   1B53 FD 7D         dec b
3910   1B55 D8            push b
3911   1B56 26 30 00      mov b, $30
3912   1B59 38 00 00      mov c, 0
3913   1B5C E7            pop d
3914   1B5D FD 3E         mov [d], bl
3915   1B5F             ; *dest = '\0'; 
3916   1B5F FA 05 00      lea d, [bp + 5] ; $dest
3917   1B62 2A            mov b, [d]
3918   1B63 38 00 00      mov c, 0
3919   1B66 D8            push b
3920   1B67 26 00 00      mov b, $0
3921   1B6A 38 00 00      mov c, 0
3922   1B6D E7            pop d
3923   1B6E FD 3E         mov [d], bl
3924   1B70             ; return 1; 
3925   1B70 26 01 00      mov b, $1
3926   1B73 38 00 00      mov c, 0
3927   1B76 F9            leave
3928   1B77 09            ret
3929   1B78 0A 7B 1B      jmp _if52_exit
3930   1B7B             _if52_exit:
3931   1B7B             _if51_exit:
3932   1B7B             ; while (num > 0) { 
3933   1B7B             _while53_cond:
3934   1B7B FA 07 00      lea d, [bp + 7] ; $num
3935   1B7E 2A            mov b, [d]
3936   1B7F 38 00 00      mov c, 0
3937   1B82             ; --- START RELATIONAL
3938   1B82 D7            push a
3939   1B83 11            mov a, b
3940   1B84 26 00 00      mov b, $0
3941   1B87 38 00 00      mov c, 0
3942   1B8A B0            cmp a, b
3943   1B8B FD 7F         sgt ; >
3944   1B8D E4            pop a
3945   1B8E             ; --- END RELATIONAL
3946   1B8E C0 00 00      cmp b, 0
3947   1B91 C6 F0 1B      je _while53_exit
3948   1B94             _while53_block:
3949   1B94             ; digits[i] = '0' + (num % 10); 
3950   1B94 FA FC FF      lea d, [bp + -4] ; $digits
3951   1B97 D7            push a
3952   1B98 DA            push d
3953   1B99 FA FA FF      lea d, [bp + -6] ; $i
3954   1B9C 2A            mov b, [d]
3955   1B9D 38 00 00      mov c, 0
3956   1BA0 E7            pop d
3957   1BA1 5A            add d, b
3958   1BA2 E4            pop a
3959   1BA3 DA            push d
3960   1BA4 26 30 00      mov b, $30
3961   1BA7 38 00 00      mov c, 0
3962   1BAA             ; --- START TERMS
3963   1BAA D7            push a
3964   1BAB 11            mov a, b
3965   1BAC FA 07 00      lea d, [bp + 7] ; $num
3966   1BAF 2A            mov b, [d]
3967   1BB0 38 00 00      mov c, 0
3968   1BB3             ; --- START FACTORS
3969   1BB3 D7            push a
3970   1BB4 11            mov a, b
3971   1BB5 26 0A 00      mov b, $a
3972   1BB8 38 00 00      mov c, 0
3973   1BBB AE            div a, b ; 
3974   1BBC 11            mov a, b
3975   1BBD 27            mov b, a
3976   1BBE E4            pop a
3977   1BBF             ; --- END FACTORS
3978   1BBF 56            add b, a
3979   1BC0 E4            pop a
3980   1BC1             ; --- END TERMS
3981   1BC1 E7            pop d
3982   1BC2 FD 3E         mov [d], bl
3983   1BC4             ; num = num / 10; 
3984   1BC4 FA 07 00      lea d, [bp + 7] ; $num
3985   1BC7 DA            push d
3986   1BC8 FA 07 00      lea d, [bp + 7] ; $num
3987   1BCB 2A            mov b, [d]
3988   1BCC 38 00 00      mov c, 0
3989   1BCF             ; --- START FACTORS
3990   1BCF D7            push a
3991   1BD0 11            mov a, b
3992   1BD1 26 0A 00      mov b, $a
3993   1BD4 38 00 00      mov c, 0
3994   1BD7 AE            div a, b
3995   1BD8 27            mov b, a
3996   1BD9 E4            pop a
3997   1BDA             ; --- END FACTORS
3998   1BDA E7            pop d
3999   1BDB FD 43         mov [d], b
4000   1BDD             ; i++; 
4001   1BDD FA FA FF      lea d, [bp + -6] ; $i
4002   1BE0 2A            mov b, [d]
4003   1BE1 38 00 00      mov c, 0
4004   1BE4 FD 77         inc b
4005   1BE6 FA FA FF      lea d, [bp + -6] ; $i
4006   1BE9 FD 43         mov [d], b
4007   1BEB FD 7D         dec b
4008   1BED 0A 7B 1B      jmp _while53_cond
4009   1BF0             _while53_exit:
4010   1BF0             ; while (i > 0) { 
4011   1BF0             _while54_cond:
4012   1BF0 FA FA FF      lea d, [bp + -6] ; $i
4013   1BF3 2A            mov b, [d]
4014   1BF4 38 00 00      mov c, 0
4015   1BF7             ; --- START RELATIONAL
4016   1BF7 D7            push a
4017   1BF8 11            mov a, b
4018   1BF9 26 00 00      mov b, $0
4019   1BFC 38 00 00      mov c, 0
4020   1BFF B0            cmp a, b
4021   1C00 FD 7F         sgt ; >
4022   1C02 E4            pop a
4023   1C03             ; --- END RELATIONAL
4024   1C03 C0 00 00      cmp b, 0
4025   1C06 C6 55 1C      je _while54_exit
4026   1C09             _while54_block:
4027   1C09             ; i--; 
4028   1C09 FA FA FF      lea d, [bp + -6] ; $i
4029   1C0C 2A            mov b, [d]
4030   1C0D 38 00 00      mov c, 0
4031   1C10 FD 7D         dec b
4032   1C12 FA FA FF      lea d, [bp + -6] ; $i
4033   1C15 FD 43         mov [d], b
4034   1C17 FD 77         inc b
4035   1C19             ; *dest++ = digits[i]; 
4036   1C19 FA 05 00      lea d, [bp + 5] ; $dest
4037   1C1C 2A            mov b, [d]
4038   1C1D 38 00 00      mov c, 0
4039   1C20 FD 77         inc b
4040   1C22 FA 05 00      lea d, [bp + 5] ; $dest
4041   1C25 FD 43         mov [d], b
4042   1C27 FD 7D         dec b
4043   1C29 D8            push b
4044   1C2A FA FC FF      lea d, [bp + -4] ; $digits
4045   1C2D D7            push a
4046   1C2E DA            push d
4047   1C2F FA FA FF      lea d, [bp + -6] ; $i
4048   1C32 2A            mov b, [d]
4049   1C33 38 00 00      mov c, 0
4050   1C36 E7            pop d
4051   1C37 5A            add d, b
4052   1C38 E4            pop a
4053   1C39 32            mov bl, [d]
4054   1C3A A7 00         mov bh, 0
4055   1C3C 38 00 00      mov c, 0
4056   1C3F E7            pop d
4057   1C40 FD 3E         mov [d], bl
4058   1C42             ; len++; 
4059   1C42 FA F8 FF      lea d, [bp + -8] ; $len
4060   1C45 2A            mov b, [d]
4061   1C46 38 00 00      mov c, 0
4062   1C49 FD 77         inc b
4063   1C4B FA F8 FF      lea d, [bp + -8] ; $len
4064   1C4E FD 43         mov [d], b
4065   1C50 FD 7D         dec b
4066   1C52 0A F0 1B      jmp _while54_cond
4067   1C55             _while54_exit:
4068   1C55             ; *dest = '\0'; 
4069   1C55 FA 05 00      lea d, [bp + 5] ; $dest
4070   1C58 2A            mov b, [d]
4071   1C59 38 00 00      mov c, 0
4072   1C5C D8            push b
4073   1C5D 26 00 00      mov b, $0
4074   1C60 38 00 00      mov c, 0
4075   1C63 E7            pop d
4076   1C64 FD 3E         mov [d], bl
4077   1C66             ; return len; 
4078   1C66 FA F8 FF      lea d, [bp + -8] ; $len
4079   1C69 2A            mov b, [d]
4080   1C6A 38 00 00      mov c, 0
4081   1C6D F9            leave
4082   1C6E 09            ret
4083   1C6F             
4084   1C6F             date:
4085   1C6F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4086   1C72             
4087   1C72             ; --- BEGIN INLINE ASM SEGMENT
4088   1C72 19 00         mov al, 0 
4089   1C74 05 07         syscall sys_datetime
4090   1C76             ; --- END INLINE ASM SEGMENT
4091   1C76             
4092   1C76 F9            leave
4093   1C77 09            ret
4094   1C78             
4095   1C78             putchar:
4096   1C78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4097   1C7B             
4098   1C7B             ; --- BEGIN INLINE ASM SEGMENT
4099   1C7B FA 05 00      lea d, [bp + 5] ; $c
4100   1C7E 1E            mov al, [d]
4101   1C7F 23            mov ah, al
4102   1C80 07 87 1E      call _putchar
4103   1C83             ; --- END INLINE ASM SEGMENT
4104   1C83             
4105   1C83 F9            leave
4106   1C84 09            ret
4107   1C85             
4108   1C85             getchar:
4109   1C85 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4110   1C88             ; char c; 
4111   1C88 52 01 00      sub sp, 1
4112   1C8B             
4113   1C8B             ; --- BEGIN INLINE ASM SEGMENT
4114   1C8B 07 80 1E      call getch
4115   1C8E 1A            mov al, ah
4116   1C8F FA 00 00      lea d, [bp + 0] ; $c
4117   1C92 3E            mov [d], al
4118   1C93             ; --- END INLINE ASM SEGMENT
4119   1C93             
4120   1C93             ; return c; 
4121   1C93 FA 00 00      lea d, [bp + 0] ; $c
4122   1C96 32            mov bl, [d]
4123   1C97 A7 00         mov bh, 0
4124   1C99 38 00 00      mov c, 0
4125   1C9C F9            leave
4126   1C9D 09            ret
4127   1C9E             
4128   1C9E             scann:
4129   1C9E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4130   1CA1             ; int m; 
4131   1CA1 52 02 00      sub sp, 2
4132   1CA4             
4133   1CA4             ; --- BEGIN INLINE ASM SEGMENT
4134   1CA4 07 CB 20      call scan_u16d
4135   1CA7 FA FF FF      lea d, [bp + -1] ; $m
4136   1CAA 43            mov [d], a
4137   1CAB             ; --- END INLINE ASM SEGMENT
4138   1CAB             
4139   1CAB             ; return m; 
4140   1CAB FA FF FF      lea d, [bp + -1] ; $m
4141   1CAE 2A            mov b, [d]
4142   1CAF 38 00 00      mov c, 0
4143   1CB2 F9            leave
4144   1CB3 09            ret
4145   1CB4             
4146   1CB4             puts:
4147   1CB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4148   1CB7             
4149   1CB7             ; --- BEGIN INLINE ASM SEGMENT
4150   1CB7 FA 05 00      lea d, [bp + 5] ; $s
4151   1CBA 15            mov a, [d]
4152   1CBB 3C            mov d, a
4153   1CBC 07 D1 1F      call _puts
4154   1CBF 10 00 0A      mov a, $0A00
4155   1CC2 05 03         syscall sys_io
4156   1CC4             ; --- END INLINE ASM SEGMENT
4157   1CC4             
4158   1CC4 F9            leave
4159   1CC5 09            ret
4160   1CC6             
4161   1CC6             print:
4162   1CC6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4163   1CC9             
4164   1CC9             ; --- BEGIN INLINE ASM SEGMENT
4165   1CC9 FA 05 00      lea d, [bp + 5] ; $s
4166   1CCC FD 2A         mov d, [d]
4167   1CCE 07 D1 1F      call _puts
4168   1CD1             ; --- END INLINE ASM SEGMENT
4169   1CD1             
4170   1CD1 F9            leave
4171   1CD2 09            ret
4172   1CD3             
4173   1CD3             getparam:
4174   1CD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4175   1CD6             ; char data; 
4176   1CD6 52 01 00      sub sp, 1
4177   1CD9             
4178   1CD9             ; --- BEGIN INLINE ASM SEGMENT
4179   1CD9 19 04         mov al, 4
4180   1CDB FA 05 00      lea d, [bp + 5] ; $address
4181   1CDE FD 2A         mov d, [d]
4182   1CE0 05 0C         syscall sys_system
4183   1CE2 FA 00 00      lea d, [bp + 0] ; $data
4184   1CE5 FD 3E         mov [d], bl
4185   1CE7             ; --- END INLINE ASM SEGMENT
4186   1CE7             
4187   1CE7             ; return data; 
4188   1CE7 FA 00 00      lea d, [bp + 0] ; $data
4189   1CEA 32            mov bl, [d]
4190   1CEB A7 00         mov bh, 0
4191   1CED 38 00 00      mov c, 0
4192   1CF0 F9            leave
4193   1CF1 09            ret
4194   1CF2             
4195   1CF2             clear:
4196   1CF2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4197   1CF5             ; print("\033[2J\033[H"); 
4198   1CF5             ; --- START FUNCTION CALL
4199   1CF5 26 67 21      mov b, _s2 ; "\033[2J\033[H"
4200   1CF8 FD AB         swp b
4201   1CFA D8            push b
4202   1CFB 07 C6 1C      call print
4203   1CFE 51 02 00      add sp, 2
4204   1D01             ; --- END FUNCTION CALL
4205   1D01 F9            leave
4206   1D02 09            ret
4207   1D03             
4208   1D03             abs:
4209   1D03 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4210   1D06             ; return i < 0 ? -i : i; 
4211   1D06             _ternary55_cond:
4212   1D06 FA 05 00      lea d, [bp + 5] ; $i
4213   1D09 2A            mov b, [d]
4214   1D0A 38 00 00      mov c, 0
4215   1D0D             ; --- START RELATIONAL
4216   1D0D D7            push a
4217   1D0E 11            mov a, b
4218   1D0F 26 00 00      mov b, $0
4219   1D12 38 00 00      mov c, 0
4220   1D15 B0            cmp a, b
4221   1D16 FD 73         slt ; < (signed)
4222   1D18 E4            pop a
4223   1D19             ; --- END RELATIONAL
4224   1D19 C0 00 00      cmp b, 0
4225   1D1C C6 2B 1D      je _ternary55_false
4226   1D1F             _ternary55_true:
4227   1D1F FA 05 00      lea d, [bp + 5] ; $i
4228   1D22 2A            mov b, [d]
4229   1D23 38 00 00      mov c, 0
4230   1D26 FD 97         neg b
4231   1D28 0A 32 1D      jmp _ternary55_exit
4232   1D2B             _ternary55_false:
4233   1D2B FA 05 00      lea d, [bp + 5] ; $i
4234   1D2E 2A            mov b, [d]
4235   1D2F 38 00 00      mov c, 0
4236   1D32             _ternary55_exit:
4237   1D32 F9            leave
4238   1D33 09            ret
4239   1D34             
4240   1D34             loadfile:
4241   1D34 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4242   1D37             
4243   1D37             ; --- BEGIN INLINE ASM SEGMENT
4244   1D37 FA 07 00      lea d, [bp + 7] ; $destination
4245   1D3A 15            mov a, [d]
4246   1D3B 4F            mov di, a
4247   1D3C FA 05 00      lea d, [bp + 5] ; $filename
4248   1D3F FD 2A         mov d, [d]
4249   1D41 19 14         mov al, 20
4250   1D43 05 04         syscall sys_filesystem
4251   1D45             ; --- END INLINE ASM SEGMENT
4252   1D45             
4253   1D45 F9            leave
4254   1D46 09            ret
4255   1D47             
4256   1D47             create_file:
4257   1D47 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4258   1D4A F9            leave
4259   1D4B 09            ret
4260   1D4C             
4261   1D4C             delete_file:
4262   1D4C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4263   1D4F             
4264   1D4F             ; --- BEGIN INLINE ASM SEGMENT
4265   1D4F FA 05 00      lea d, [bp + 5] ; $filename
4266   1D52 19 0A         mov al, 10
4267   1D54 05 04         syscall sys_filesystem
4268   1D56             ; --- END INLINE ASM SEGMENT
4269   1D56             
4270   1D56 F9            leave
4271   1D57 09            ret
4272   1D58             
4273   1D58             load_hex:
4274   1D58 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4275   1D5B             ; char *temp; 
4276   1D5B 52 02 00      sub sp, 2
4277   1D5E             ; temp = alloc(32768); 
4278   1D5E FA FF FF      lea d, [bp + -1] ; $temp
4279   1D61 DA            push d
4280   1D62             ; --- START FUNCTION CALL
4281   1D62 26 00 80      mov b, $8000
4282   1D65 38 00 00      mov c, 0
4283   1D68 FD AB         swp b
4284   1D6A D8            push b
4285   1D6B 07 7A 08      call alloc
4286   1D6E 51 02 00      add sp, 2
4287   1D71             ; --- END FUNCTION CALL
4288   1D71 E7            pop d
4289   1D72 FD 43         mov [d], b
4290   1D74             
4291   1D74             ; --- BEGIN INLINE ASM SEGMENT
4292   1D74               
4293   1D74               
4294   1D74               
4295   1D74             _load_hex:
4296   1D74 FA 05 00      lea d, [bp + 5] ; $destination
4297   1D77 FD 2A         mov d, [d]
4298   1D79 FD 50         mov di, d
4299   1D7B FA FF FF      lea d, [bp + -1] ; $temp
4300   1D7E FD 2A         mov d, [d]
4301   1D80 38 00 00      mov c, 0
4302   1D83 48            mov a, sp
4303   1D84 77            inc a
4304   1D85 3C            mov d, a          
4305   1D86 07 8E 1E      call _gets        
4306   1D89 4D            mov si, a
4307   1D8A             __load_hex_loop:
4308   1D8A F6            lodsb             
4309   1D8B B9 00         cmp al, 0         
4310   1D8D C6 9B 1D      jz __load_hex_ret
4311   1D90 36            mov bh, al
4312   1D91 F6            lodsb
4313   1D92 2F            mov bl, al
4314   1D93 07 45 1E      call _atoi        
4315   1D96 F7            stosb             
4316   1D97 78            inc c
4317   1D98 0A 8A 1D      jmp __load_hex_loop
4318   1D9B             __load_hex_ret:
4319   1D9B             ; --- END INLINE ASM SEGMENT
4320   1D9B             
4321   1D9B F9            leave
4322   1D9C 09            ret
4323   1D9D             
4324   1D9D             include_stdio_asm:
4325   1D9D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4326   1DA0             
4327   1DA0             ; --- BEGIN INLINE ASM SEGMENT
4328   1DA0             .include "lib/asm/stdio.asm"
0001+  1DA0             ;-----------------------------------------------------------------------------
0002+  1DA0             ; stdio.s
0003+  1DA0             ;-----------------------------------------------------------------------------
0004+  1DA0             .include "lib/asm/string.asm"
0001++ 1DA0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1DA0             ; string.s
0003++ 1DA0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1DA0             
0005++ 1DA0             
0006++ 1DA0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1DA0             ; _strrev
0008++ 1DA0             ; reverse a string
0009++ 1DA0             ; D = string address
0010++ 1DA0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1DA0             ; 01234
0012++ 1DA0             _strrev:
0013++ 1DA0 4B          	pusha
0014++ 1DA1 07 E7 1D    	call _strlen	; length in C
0015++ 1DA4 12          	mov a, c
0016++ 1DA5 AF 01 00    	cmp a, 1
0017++ 1DA8 D0 C2 1D    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1DAB 7D          	dec a
0019++ 1DAC FD 4E       	mov si, d	; beginning of string
0020++ 1DAE FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1DB0 59          	add d, a	; end of string
0022++ 1DB1 12          	mov a, c
0023++ 1DB2 FD 9B       	shr a		; divide by 2
0024++ 1DB4 39          	mov c, a	; C now counts the steps
0025++ 1DB5             _strrev_L0:
0026++ 1DB5 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1DB6 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1DB7 3E          	mov [d], al	; store left char into right side
0029++ 1DB8 1B          	mov al, bl
0030++ 1DB9 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1DBA 7E          	dec c
0032++ 1DBB 7F          	dec d
0033++ 1DBC C2 00 00    	cmp c, 0
0034++ 1DBF C7 B5 1D    	jne _strrev_L0
0035++ 1DC2             _strrev_end:
0036++ 1DC2 4C          	popa
0037++ 1DC3 09          	ret
0038++ 1DC4             	
0039++ 1DC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1DC4             ; _strchr
0041++ 1DC4             ; search string in D for char in AL
0042++ 1DC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1DC4             _strchr:
0044++ 1DC4             _strchr_L0:
0045++ 1DC4 32          	mov bl, [d]
0046++ 1DC5 C1 00       	cmp bl, 0
0047++ 1DC7 C6 D2 1D    	je _strchr_end
0048++ 1DCA BA          	cmp al, bl
0049++ 1DCB C6 D2 1D    	je _strchr_end
0050++ 1DCE 79          	inc d
0051++ 1DCF 0A C4 1D    	jmp _strchr_L0
0052++ 1DD2             _strchr_end:
0053++ 1DD2 1B          	mov al, bl
0054++ 1DD3 09          	ret
0055++ 1DD4             
0056++ 1DD4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1DD4             ; _strstr
0058++ 1DD4             ; find sub-string
0059++ 1DD4             ; str1 in SI
0060++ 1DD4             ; str2 in DI
0061++ 1DD4             ; SI points to end of source string
0062++ 1DD4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1DD4             _strstr:
0064++ 1DD4 DB          	push al
0065++ 1DD5 DA          	push d
0066++ 1DD6 E3          	push di
0067++ 1DD7             _strstr_loop:
0068++ 1DD7 F3          	cmpsb					; compare a byte of the strings
0069++ 1DD8 C7 E3 1D    	jne _strstr_ret
0070++ 1DDB FC 00 00    	lea d, [di + 0]
0071++ 1DDE BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1DE0 C7 D7 1D    	jne _strstr_loop				; equal chars but not at end
0073++ 1DE3             _strstr_ret:
0074++ 1DE3 F0          	pop di
0075++ 1DE4 E7          	pop d
0076++ 1DE5 E8          	pop al
0077++ 1DE6 09          	ret
0078++ 1DE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1DE7             ; length of null terminated string
0080++ 1DE7             ; result in C
0081++ 1DE7             ; pointer in D
0082++ 1DE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1DE7             _strlen:
0084++ 1DE7 DA          	push d
0085++ 1DE8 38 00 00    	mov c, 0
0086++ 1DEB             _strlen_L1:
0087++ 1DEB BD 00       	cmp byte [d], 0
0088++ 1DED C6 F5 1D    	je _strlen_ret
0089++ 1DF0 79          	inc d
0090++ 1DF1 78          	inc c
0091++ 1DF2 0A EB 1D    	jmp _strlen_L1
0092++ 1DF5             _strlen_ret:
0093++ 1DF5 E7          	pop d
0094++ 1DF6 09          	ret
0095++ 1DF7             
0096++ 1DF7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1DF7             ; STRCMP
0098++ 1DF7             ; compare two strings
0099++ 1DF7             ; str1 in SI
0100++ 1DF7             ; str2 in DI
0101++ 1DF7             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1DF7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1DF7             _strcmp:
0104++ 1DF7 DB          	push al
0105++ 1DF8 DA          	push d
0106++ 1DF9 E3          	push di
0107++ 1DFA E2          	push si
0108++ 1DFB             _strcmp_loop:
0109++ 1DFB F3          	cmpsb					; compare a byte of the strings
0110++ 1DFC C7 07 1E    	jne _strcmp_ret
0111++ 1DFF FB FF FF    	lea d, [si +- 1]
0112++ 1E02 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1E04 C7 FB 1D    	jne _strcmp_loop				; equal chars but not at end
0114++ 1E07             _strcmp_ret:
0115++ 1E07 EF          	pop si
0116++ 1E08 F0          	pop di
0117++ 1E09 E7          	pop d
0118++ 1E0A E8          	pop al
0119++ 1E0B 09          	ret
0120++ 1E0C             
0121++ 1E0C             
0122++ 1E0C             ; STRCPY
0123++ 1E0C             ; copy null terminated string from SI to DI
0124++ 1E0C             ; source in SI
0125++ 1E0C             ; destination in DI
0126++ 1E0C             _strcpy:
0127++ 1E0C E2          	push si
0128++ 1E0D E3          	push di
0129++ 1E0E DB          	push al
0130++ 1E0F             _strcpy_L1:
0131++ 1E0F F6          	lodsb
0132++ 1E10 F7          	stosb
0133++ 1E11 B9 00       	cmp al, 0
0134++ 1E13 C7 0F 1E    	jne _strcpy_L1
0135++ 1E16             _strcpy_end:
0136++ 1E16 E8          	pop al
0137++ 1E17 F0          	pop di
0138++ 1E18 EF          	pop si
0139++ 1E19 09          	ret
0140++ 1E1A             
0141++ 1E1A             ; STRCAT
0142++ 1E1A             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1E1A             ; source in SI
0144++ 1E1A             ; destination in DI
0145++ 1E1A             _strcat:
0146++ 1E1A E2          	push si
0147++ 1E1B E3          	push di
0148++ 1E1C D7          	push a
0149++ 1E1D DA          	push d
0150++ 1E1E 50          	mov a, di
0151++ 1E1F 3C          	mov d, a
0152++ 1E20             _strcat_goto_end_L1:
0153++ 1E20 BD 00       	cmp byte[d], 0
0154++ 1E22 C6 29 1E    	je _strcat_start
0155++ 1E25 79          	inc d
0156++ 1E26 0A 20 1E    	jmp _strcat_goto_end_L1
0157++ 1E29             _strcat_start:
0158++ 1E29 FD 50       	mov di, d
0159++ 1E2B             _strcat_L1:
0160++ 1E2B F6          	lodsb
0161++ 1E2C F7          	stosb
0162++ 1E2D B9 00       	cmp al, 0
0163++ 1E2F C7 2B 1E    	jne _strcat_L1
0164++ 1E32             _strcat_end:
0165++ 1E32 E7          	pop d
0166++ 1E33 E4          	pop a
0167++ 1E34 F0          	pop di
0168++ 1E35 EF          	pop si
0169++ 1E36 09          	ret
0170++ 1E37             
0171++ 1E37             
0005+  1E37             
0006+  1E37             ;-----------------------------------------------------------------------------
0007+  1E37             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1E37             ; ASCII in BL
0009+  1E37             ; result in AL
0010+  1E37             ; ascii for F = 0100 0110
0011+  1E37             ; ascii for 9 = 0011 1001
0012+  1E37             ;-----------------------------------------------------------------------------
0013+  1E37             hex_ascii_encode:
0014+  1E37 1B            mov al, bl
0015+  1E38 93 40         test al, $40        ; test if letter or number
0016+  1E3A C7 40 1E      jnz hex_letter
0017+  1E3D 87 0F         and al, $0F        ; get number
0018+  1E3F 09            ret
0019+  1E40             hex_letter:
0020+  1E40 87 0F         and al, $0F        ; get letter
0021+  1E42 6A 09         add al, 9
0022+  1E44 09            ret
0023+  1E45             
0024+  1E45             ;-----------------------------------------------------------------------------
0025+  1E45             ; ATOI
0026+  1E45             ; 2 letter hex string in B
0027+  1E45             ; 8bit integer returned in AL
0028+  1E45             ;-----------------------------------------------------------------------------
0029+  1E45             _atoi:
0030+  1E45 D8            push b
0031+  1E46 07 37 1E      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1E49 30            mov bl, bh
0033+  1E4A DB            push al          ; save a
0034+  1E4B 07 37 1E      call hex_ascii_encode
0035+  1E4E EA            pop bl  
0036+  1E4F FD 9E 04      shl al, 4
0037+  1E52 8C            or al, bl
0038+  1E53 E5            pop b
0039+  1E54 09            ret  
0040+  1E55             
0041+  1E55             
0042+  1E55             ;-----------------------------------------------------------------------------
0043+  1E55             ; ITOA
0044+  1E55             ; 8bit value in BL
0045+  1E55             ; 2 byte ASCII result in A
0046+  1E55             ;-----------------------------------------------------------------------------
0047+  1E55             _itoa:
0048+  1E55 DA            push d
0049+  1E56 D8            push b
0050+  1E57 A7 00         mov bh, 0
0051+  1E59 FD A4 04      shr bl, 4  
0052+  1E5C 74            mov d, b
0053+  1E5D 1F 05 21      mov al, [d + s_hex_digits]
0054+  1E60 23            mov ah, al
0055+  1E61               
0056+  1E61 E5            pop b
0057+  1E62 D8            push b
0058+  1E63 A7 00         mov bh, 0
0059+  1E65 FD 87 0F      and bl, $0F
0060+  1E68 74            mov d, b
0061+  1E69 1F 05 21      mov al, [d + s_hex_digits]
0062+  1E6C E5            pop b
0063+  1E6D E7            pop d
0064+  1E6E 09            ret
0065+  1E6F             
0066+  1E6F             ;-----------------------------------------------------------------------------
0067+  1E6F             ; HEX STRING TO BINARY
0068+  1E6F             ; di = destination address
0069+  1E6F             ; si = source
0070+  1E6F             ;-----------------------------------------------------------------------------
0071+  1E6F             _hex_to_int:
0072+  1E6F             _hex_to_int_L1:
0073+  1E6F F6            lodsb          ; load from [SI] to AL
0074+  1E70 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1E72 C6 7F 1E      jz _hex_to_int_ret
0076+  1E75 36            mov bh, al
0077+  1E76 F6            lodsb
0078+  1E77 2F            mov bl, al
0079+  1E78 07 45 1E      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1E7B F7            stosb          ; store AL to [DI]
0081+  1E7C 0A 6F 1E      jmp _hex_to_int_L1
0082+  1E7F             _hex_to_int_ret:
0083+  1E7F 09            ret    
0084+  1E80             
0085+  1E80             ;-----------------------------------------------------------------------------
0086+  1E80             ; GETCHAR
0087+  1E80             ; char in ah
0088+  1E80             ;-----------------------------------------------------------------------------
0089+  1E80             getch:
0090+  1E80 DB            push al
0091+  1E81             getch_retry:
0092+  1E81 19 01         mov al, 1
0093+  1E83 05 03         syscall sys_io      ; receive in AH
0094+  1E85 E8            pop al
0095+  1E86 09            ret
0096+  1E87             
0097+  1E87             ;-----------------------------------------------------------------------------
0098+  1E87             ; PUTCHAR
0099+  1E87             ; char in ah
0100+  1E87             ;-----------------------------------------------------------------------------
0101+  1E87             _putchar:
0102+  1E87 D7            push a
0103+  1E88 19 00         mov al, 0
0104+  1E8A 05 03         syscall sys_io      ; char in AH
0105+  1E8C E4            pop a
0106+  1E8D 09            ret
0107+  1E8E             
0108+  1E8E             ;-----------------------------------------------------------------------------
0109+  1E8E             ;; INPUT A STRING
0110+  1E8E             ;; terminates with null
0111+  1E8E             ;; pointer in D
0112+  1E8E             ;-----------------------------------------------------------------------------
0113+  1E8E             _gets:
0114+  1E8E D7            push a
0115+  1E8F DA            push d
0116+  1E90             _gets_loop:
0117+  1E90 19 01         mov al, 1
0118+  1E92 05 03         syscall sys_io      ; receive in AH
0119+  1E94 B9 00         cmp al, 0        ; check error code (AL)
0120+  1E96 C6 90 1E      je _gets_loop      ; if no char received, retry
0121+  1E99             
0122+  1E99 76 1B         cmp ah, 27
0123+  1E9B C6 BC 1E      je _gets_ansi_esc
0124+  1E9E 76 0A         cmp ah, $0A        ; LF
0125+  1EA0 C6 27 1F      je _gets_end
0126+  1EA3 76 0D         cmp ah, $0D        ; CR
0127+  1EA5 C6 27 1F      je _gets_end
0128+  1EA8 76 5C         cmp ah, $5C        ; '\\'
0129+  1EAA C6 E8 1E      je _gets_escape
0130+  1EAD               
0131+  1EAD 76 08         cmp ah, $08      ; check for backspace
0132+  1EAF C6 B8 1E      je _gets_backspace
0133+  1EB2             
0134+  1EB2 1A            mov al, ah
0135+  1EB3 3E            mov [d], al
0136+  1EB4 79            inc d
0137+  1EB5 0A 90 1E      jmp _gets_loop
0138+  1EB8             _gets_backspace:
0139+  1EB8 7F            dec d
0140+  1EB9 0A 90 1E      jmp _gets_loop
0141+  1EBC             _gets_ansi_esc:
0142+  1EBC 19 01         mov al, 1
0143+  1EBE 05 03         syscall sys_io        ; receive in AH without echo
0144+  1EC0 B9 00         cmp al, 0          ; check error code (AL)
0145+  1EC2 C6 BC 1E      je _gets_ansi_esc    ; if no char received, retry
0146+  1EC5 76 5B         cmp ah, '['
0147+  1EC7 C7 90 1E      jne _gets_loop
0148+  1ECA             _gets_ansi_esc_2:
0149+  1ECA 19 01         mov al, 1
0150+  1ECC 05 03         syscall sys_io          ; receive in AH without echo
0151+  1ECE B9 00         cmp al, 0            ; check error code (AL)
0152+  1ED0 C6 CA 1E      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1ED3 76 44         cmp ah, 'D'
0154+  1ED5 C6 E0 1E      je _gets_left_arrow
0155+  1ED8 76 43         cmp ah, 'C'
0156+  1EDA C6 E4 1E      je _gets_right_arrow
0157+  1EDD 0A 90 1E      jmp _gets_loop
0158+  1EE0             _gets_left_arrow:
0159+  1EE0 7F            dec d
0160+  1EE1 0A 90 1E      jmp _gets_loop
0161+  1EE4             _gets_right_arrow:
0162+  1EE4 79            inc d
0163+  1EE5 0A 90 1E      jmp _gets_loop
0164+  1EE8             _gets_escape:
0165+  1EE8 19 01         mov al, 1
0166+  1EEA 05 03         syscall sys_io      ; receive in AH
0167+  1EEC B9 00         cmp al, 0        ; check error code (AL)
0168+  1EEE C6 E8 1E      je _gets_escape      ; if no char received, retry
0169+  1EF1 76 6E         cmp ah, 'n'
0170+  1EF3 C6 12 1F      je _gets_LF
0171+  1EF6 76 72         cmp ah, 'r'
0172+  1EF8 C6 19 1F      je _gets_CR
0173+  1EFB 76 30         cmp ah, '0'
0174+  1EFD C6 20 1F      je _gets_NULL
0175+  1F00 76 5C         cmp ah, $5C  ; '\'
0176+  1F02 C6 0B 1F      je _gets_slash
0177+  1F05 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1F06 3E            mov [d], al
0179+  1F07 79            inc d
0180+  1F08 0A 90 1E      jmp _gets_loop
0181+  1F0B             _gets_slash:
0182+  1F0B 19 5C         mov al, $5C
0183+  1F0D 3E            mov [d], al
0184+  1F0E 79            inc d
0185+  1F0F 0A 90 1E      jmp _gets_loop
0186+  1F12             _gets_LF:
0187+  1F12 19 0A         mov al, $0A
0188+  1F14 3E            mov [d], al
0189+  1F15 79            inc d
0190+  1F16 0A 90 1E      jmp _gets_loop
0191+  1F19             _gets_CR:
0192+  1F19 19 0D         mov al, $0D
0193+  1F1B 3E            mov [d], al
0194+  1F1C 79            inc d
0195+  1F1D 0A 90 1E      jmp _gets_loop
0196+  1F20             _gets_NULL:
0197+  1F20 19 00         mov al, $00
0198+  1F22 3E            mov [d], al
0199+  1F23 79            inc d
0200+  1F24 0A 90 1E      jmp _gets_loop
0201+  1F27             _gets_end:
0202+  1F27 19 00         mov al, 0
0203+  1F29 3E            mov [d], al        ; terminate string
0204+  1F2A E7            pop d
0205+  1F2B E4            pop a
0206+  1F2C 09            ret
0207+  1F2D             
0208+  1F2D             ;-----------------------------------------------------------------------------
0209+  1F2D             ;; INPUT TEXT
0210+  1F2D             ;; terminated with CTRL+D
0211+  1F2D             ;; pointer in D
0212+  1F2D             ;-----------------------------------------------------------------------------
0213+  1F2D             _gettxt:
0214+  1F2D D7            push a
0215+  1F2E DA            push d
0216+  1F2F             _gettxt_loop:
0217+  1F2F 19 01         mov al, 1
0218+  1F31 05 03         syscall sys_io      ; receive in AH
0219+  1F33 B9 00         cmp al, 0        ; check error code (AL)
0220+  1F35 C6 2F 1F      je _gettxt_loop    ; if no char received, retry
0221+  1F38 76 04         cmp ah, 4      ; EOT
0222+  1F3A C6 78 1F      je _gettxt_end
0223+  1F3D 76 08         cmp ah, $08      ; check for backspace
0224+  1F3F C6 74 1F      je _gettxt_backspace
0225+  1F42 76 5C         cmp ah, $5C        ; '\'
0226+  1F44 C6 4D 1F      je _gettxt_escape
0227+  1F47 1A            mov al, ah
0228+  1F48 3E            mov [d], al
0229+  1F49 79            inc d
0230+  1F4A 0A 2F 1F      jmp _gettxt_loop
0231+  1F4D             _gettxt_escape:
0232+  1F4D 19 01         mov al, 1
0233+  1F4F 05 03         syscall sys_io      ; receive in AH
0234+  1F51 B9 00         cmp al, 0        ; check error code (AL)
0235+  1F53 C6 4D 1F      je _gettxt_escape    ; if no char received, retry
0236+  1F56 76 6E         cmp ah, 'n'
0237+  1F58 C6 66 1F      je _gettxt_LF
0238+  1F5B 76 72         cmp ah, 'r'
0239+  1F5D C6 6D 1F      je _gettxt_CR
0240+  1F60 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1F61 3E            mov [d], al
0242+  1F62 79            inc d
0243+  1F63 0A 2F 1F      jmp _gettxt_loop
0244+  1F66             _gettxt_LF:
0245+  1F66 19 0A         mov al, $0A
0246+  1F68 3E            mov [d], al
0247+  1F69 79            inc d
0248+  1F6A 0A 2F 1F      jmp _gettxt_loop
0249+  1F6D             _gettxt_CR:
0250+  1F6D 19 0D         mov al, $0D
0251+  1F6F 3E            mov [d], al
0252+  1F70 79            inc d
0253+  1F71 0A 2F 1F      jmp _gettxt_loop
0254+  1F74             _gettxt_backspace:
0255+  1F74 7F            dec d
0256+  1F75 0A 2F 1F      jmp _gettxt_loop
0257+  1F78             _gettxt_end:
0258+  1F78 19 00         mov al, 0
0259+  1F7A 3E            mov [d], al        ; terminate string
0260+  1F7B E7            pop d
0261+  1F7C E4            pop a
0262+  1F7D 09            ret
0263+  1F7E             
0264+  1F7E             ;-----------------------------------------------------------------------------
0265+  1F7E             ; PRINT NEW LINE
0266+  1F7E             ;-----------------------------------------------------------------------------
0267+  1F7E             printnl:
0268+  1F7E D7            push a
0269+  1F7F 10 00 0A      mov a, $0A00
0270+  1F82 05 03         syscall sys_io
0271+  1F84 10 00 0D      mov a, $0D00
0272+  1F87 05 03         syscall sys_io
0273+  1F89 E4            pop a
0274+  1F8A 09            ret
0275+  1F8B             
0276+  1F8B             ;-----------------------------------------------------------------------------
0277+  1F8B             ; _strtoint
0278+  1F8B             ; 4 digit hex string number in d
0279+  1F8B             ; integer returned in A
0280+  1F8B             ;-----------------------------------------------------------------------------
0281+  1F8B             _strtointx:
0282+  1F8B D8            push b
0283+  1F8C 32            mov bl, [d]
0284+  1F8D 37            mov bh, bl
0285+  1F8E 33 01 00      mov bl, [d + 1]
0286+  1F91 07 45 1E      call _atoi        ; convert to int in AL
0287+  1F94 23            mov ah, al        ; move to AH
0288+  1F95 33 02 00      mov bl, [d + 2]
0289+  1F98 37            mov bh, bl
0290+  1F99 33 03 00      mov bl, [d + 3]
0291+  1F9C 07 45 1E      call _atoi        ; convert to int in AL
0292+  1F9F E5            pop b
0293+  1FA0 09            ret
0294+  1FA1             
0295+  1FA1             ;-----------------------------------------------------------------------------
0296+  1FA1             ; _strtoint
0297+  1FA1             ; 5 digit base10 string number in d
0298+  1FA1             ; integer returned in A
0299+  1FA1             ;-----------------------------------------------------------------------------
0300+  1FA1             _strtoint:
0301+  1FA1 E2            push si
0302+  1FA2 D8            push b
0303+  1FA3 D9            push c
0304+  1FA4 DA            push d
0305+  1FA5 07 E7 1D      call _strlen      ; get string length in C
0306+  1FA8 7E            dec c
0307+  1FA9 FD 4E         mov si, d
0308+  1FAB 12            mov a, c
0309+  1FAC FD 99         shl a
0310+  1FAE 3B 1D 21      mov d, table_power
0311+  1FB1 59            add d, a
0312+  1FB2 38 00 00      mov c, 0
0313+  1FB5             _strtoint_L0:
0314+  1FB5 F6            lodsb      ; load ASCII to al
0315+  1FB6 B9 00         cmp al, 0
0316+  1FB8 C6 CB 1F      je _strtoint_end
0317+  1FBB 6F 30         sub al, $30    ; make into integer
0318+  1FBD 22 00         mov ah, 0
0319+  1FBF 2A            mov b, [d]
0320+  1FC0 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1FC1 11            mov a, b
0322+  1FC2 28            mov b, c
0323+  1FC3 54            add a, b
0324+  1FC4 39            mov c, a
0325+  1FC5 63 02 00      sub d, 2
0326+  1FC8 0A B5 1F      jmp _strtoint_L0
0327+  1FCB             _strtoint_end:
0328+  1FCB 12            mov a, c
0329+  1FCC E7            pop d
0330+  1FCD E6            pop c
0331+  1FCE E5            pop b
0332+  1FCF EF            pop si
0333+  1FD0 09            ret
0334+  1FD1             
0335+  1FD1             ;-----------------------------------------------------------------------------
0336+  1FD1             ; PRINT NULL TERMINATED STRING
0337+  1FD1             ; pointer in D
0338+  1FD1             ;-----------------------------------------------------------------------------
0339+  1FD1             _puts:
0340+  1FD1 D7            push a
0341+  1FD2 DA            push d
0342+  1FD3             _puts_L1:
0343+  1FD3 1E            mov al, [d]
0344+  1FD4 B9 00         cmp al, 0
0345+  1FD6 C6 E2 1F      jz _puts_END
0346+  1FD9 23            mov ah, al
0347+  1FDA 19 00         mov al, 0
0348+  1FDC 05 03         syscall sys_io
0349+  1FDE 79            inc d
0350+  1FDF 0A D3 1F      jmp _puts_L1
0351+  1FE2             _puts_END:
0352+  1FE2 E7            pop d
0353+  1FE3 E4            pop a
0354+  1FE4 09            ret
0355+  1FE5             
0356+  1FE5             ;-----------------------------------------------------------------------------
0357+  1FE5             ; PRINT N SIZE STRING
0358+  1FE5             ; pointer in D
0359+  1FE5             ; size in C
0360+  1FE5             ;-----------------------------------------------------------------------------
0361+  1FE5             _putsn:
0362+  1FE5 DB            push al
0363+  1FE6 DA            push d
0364+  1FE7 D9            push c
0365+  1FE8             _putsn_L0:
0366+  1FE8 1E            mov al, [d]
0367+  1FE9 23            mov ah, al
0368+  1FEA 19 00         mov al, 0
0369+  1FEC 05 03         syscall sys_io
0370+  1FEE 79            inc d
0371+  1FEF 7E            dec c  
0372+  1FF0 C2 00 00      cmp c, 0
0373+  1FF3 C7 E8 1F      jne _putsn_L0
0374+  1FF6             _putsn_end:
0375+  1FF6 E6            pop c
0376+  1FF7 E7            pop d
0377+  1FF8 E8            pop al
0378+  1FF9 09            ret
0379+  1FFA             
0380+  1FFA             ;-----------------------------------------------------------------------------
0381+  1FFA             ; print 16bit decimal number
0382+  1FFA             ; input number in A
0383+  1FFA             ;-----------------------------------------------------------------------------
0384+  1FFA             print_u16d:
0385+  1FFA D7            push a
0386+  1FFB D8            push b
0387+  1FFC 26 10 27      mov b, 10000
0388+  1FFF AE            div a, b      ; get 10000's coeff.
0389+  2000 07 22 20      call print_number
0390+  2003 11            mov a, b
0391+  2004 26 E8 03      mov b, 1000
0392+  2007 AE            div a, b      ; get 1000's coeff.
0393+  2008 07 22 20      call print_number
0394+  200B 11            mov a, b
0395+  200C 26 64 00      mov b, 100
0396+  200F AE            div a, b
0397+  2010 07 22 20      call print_number
0398+  2013 11            mov a, b
0399+  2014 26 0A 00      mov b, 10
0400+  2017 AE            div a, b
0401+  2018 07 22 20      call print_number
0402+  201B 1B            mov al, bl      ; 1's coeff in bl
0403+  201C 07 22 20      call print_number
0404+  201F E5            pop b
0405+  2020 E4            pop a
0406+  2021 09            ret
0407+  2022             
0408+  2022             ;-----------------------------------------------------------------------------
0409+  2022             ; print AL
0410+  2022             ;-----------------------------------------------------------------------------
0411+  2022             print_number:
0412+  2022 6A 30         add al, $30
0413+  2024 23            mov ah, al
0414+  2025 07 87 1E      call _putchar
0415+  2028 09            ret
0416+  2029             
0417+  2029             ;-----------------------------------------------------------------------------
0418+  2029             ; PRINT 16BIT HEX INTEGER
0419+  2029             ; integer value in reg B
0420+  2029             ;-----------------------------------------------------------------------------
0421+  2029             print_u16x:
0422+  2029 D7            push a
0423+  202A D8            push b
0424+  202B DD            push bl
0425+  202C 30            mov bl, bh
0426+  202D 07 55 1E      call _itoa        ; convert bh to char in A
0427+  2030 2F            mov bl, al        ; save al
0428+  2031 19 00         mov al, 0
0429+  2033 05 03         syscall sys_io        ; display AH
0430+  2035 24            mov ah, bl        ; retrieve al
0431+  2036 19 00         mov al, 0
0432+  2038 05 03         syscall sys_io        ; display AL
0433+  203A             
0434+  203A EA            pop bl
0435+  203B 07 55 1E      call _itoa        ; convert bh to char in A
0436+  203E 2F            mov bl, al        ; save al
0437+  203F 19 00         mov al, 0
0438+  2041 05 03         syscall sys_io        ; display AH
0439+  2043 24            mov ah, bl        ; retrieve al
0440+  2044 19 00         mov al, 0
0441+  2046 05 03         syscall sys_io        ; display AL
0442+  2048             
0443+  2048 E5            pop b
0444+  2049 E4            pop a
0445+  204A 09            ret
0446+  204B             
0447+  204B             ;-----------------------------------------------------------------------------
0448+  204B             ; INPUT 16BIT HEX INTEGER
0449+  204B             ; read 16bit integer into A
0450+  204B             ;-----------------------------------------------------------------------------
0451+  204B             scan_u16x:
0452+  204B F8 10 00      enter 16
0453+  204E D8            push b
0454+  204F DA            push d
0455+  2050             
0456+  2050 FA F1 FF      lea d, [bp + -15]
0457+  2053 07 8E 1E      call _gets        ; get number
0458+  2056             
0459+  2056 32            mov bl, [d]
0460+  2057 37            mov bh, bl
0461+  2058 33 01 00      mov bl, [d + 1]
0462+  205B 07 45 1E      call _atoi        ; convert to int in AL
0463+  205E 23            mov ah, al        ; move to AH
0464+  205F             
0465+  205F 33 02 00      mov bl, [d + 2]
0466+  2062 37            mov bh, bl
0467+  2063 33 03 00      mov bl, [d + 3]
0468+  2066 07 45 1E      call _atoi        ; convert to int in AL
0469+  2069             
0470+  2069 E7            pop d
0471+  206A E5            pop b
0472+  206B F9            leave
0473+  206C 09            ret
0474+  206D             
0475+  206D             ;-----------------------------------------------------------------------------
0476+  206D             ; PRINT 8bit HEX INTEGER
0477+  206D             ; integer value in reg bl
0478+  206D             ;-----------------------------------------------------------------------------
0479+  206D             print_u8x:
0480+  206D D7            push a
0481+  206E DD            push bl
0482+  206F             
0483+  206F 07 55 1E      call _itoa        ; convert bl to char in A
0484+  2072 2F            mov bl, al        ; save al
0485+  2073 19 00         mov al, 0
0486+  2075 05 03         syscall sys_io        ; display AH
0487+  2077 24            mov ah, bl        ; retrieve al
0488+  2078 19 00         mov al, 0
0489+  207A 05 03         syscall sys_io        ; display AL
0490+  207C             
0491+  207C EA            pop bl
0492+  207D E4            pop a
0493+  207E 09            ret
0494+  207F             
0495+  207F             ;-----------------------------------------------------------------------------
0496+  207F             ; print 8bit decimal unsigned number
0497+  207F             ; input number in AL
0498+  207F             ;-----------------------------------------------------------------------------
0499+  207F             print_u8d:
0500+  207F D7            push a
0501+  2080 D8            push b
0502+  2081             
0503+  2081 22 00         mov ah, 0
0504+  2083 26 64 00      mov b, 100
0505+  2086 AE            div a, b
0506+  2087 D8            push b      ; save remainder
0507+  2088 B9 00         cmp al, 0
0508+  208A C6 94 20      je skip100
0509+  208D 6A 30         add al, $30
0510+  208F 23            mov ah, al
0511+  2090 19 00         mov al, 0
0512+  2092 05 03         syscall sys_io  ; print coeff
0513+  2094             skip100:
0514+  2094 E4            pop a
0515+  2095 22 00         mov ah, 0
0516+  2097 26 0A 00      mov b, 10
0517+  209A AE            div a, b
0518+  209B D8            push b      ; save remainder
0519+  209C B9 00         cmp al, 0
0520+  209E C6 A8 20      je skip10
0521+  20A1 6A 30         add al, $30
0522+  20A3 23            mov ah, al
0523+  20A4 19 00         mov al, 0
0524+  20A6 05 03         syscall sys_io  ; print coeff
0525+  20A8             skip10:
0526+  20A8 E4            pop a
0527+  20A9 1B            mov al, bl
0528+  20AA 6A 30         add al, $30
0529+  20AC 23            mov ah, al
0530+  20AD 19 00         mov al, 0
0531+  20AF 05 03         syscall sys_io  ; print coeff
0532+  20B1 E5            pop b
0533+  20B2 E4            pop a
0534+  20B3 09            ret
0535+  20B4             
0536+  20B4             ;-----------------------------------------------------------------------------
0537+  20B4             ; INPUT 8BIT HEX INTEGER
0538+  20B4             ; read 8bit integer into AL
0539+  20B4             ;-----------------------------------------------------------------------------
0540+  20B4             scan_u8x:
0541+  20B4 F8 04 00      enter 4
0542+  20B7 D8            push b
0543+  20B8 DA            push d
0544+  20B9             
0545+  20B9 FA FD FF      lea d, [bp + -3]
0546+  20BC 07 8E 1E      call _gets        ; get number
0547+  20BF             
0548+  20BF 32            mov bl, [d]
0549+  20C0 37            mov bh, bl
0550+  20C1 33 01 00      mov bl, [d + 1]
0551+  20C4 07 45 1E      call _atoi        ; convert to int in AL
0552+  20C7             
0553+  20C7 E7            pop d
0554+  20C8 E5            pop b
0555+  20C9 F9            leave
0556+  20CA 09            ret
0557+  20CB             
0558+  20CB             ;-----------------------------------------------------------------------------
0559+  20CB             ; input decimal number
0560+  20CB             ; result in A
0561+  20CB             ; 655'\0'
0562+  20CB             ; low--------high
0563+  20CB             ;-----------------------------------------------------------------------------
0564+  20CB             scan_u16d:
0565+  20CB F8 08 00      enter 8
0566+  20CE E2            push si
0567+  20CF D8            push b
0568+  20D0 D9            push c
0569+  20D1 DA            push d
0570+  20D2 FA F9 FF      lea d, [bp +- 7]
0571+  20D5 07 8E 1E      call _gets
0572+  20D8 07 E7 1D      call _strlen      ; get string length in C
0573+  20DB 7E            dec c
0574+  20DC FD 4E         mov si, d
0575+  20DE 12            mov a, c
0576+  20DF FD 99         shl a
0577+  20E1 3B 1D 21      mov d, table_power
0578+  20E4 59            add d, a
0579+  20E5 38 00 00      mov c, 0
0580+  20E8             mul_loop:
0581+  20E8 F6            lodsb      ; load ASCII to al
0582+  20E9 B9 00         cmp al, 0
0583+  20EB C6 FE 20      je mul_exit
0584+  20EE 6F 30         sub al, $30    ; make into integer
0585+  20F0 22 00         mov ah, 0
0586+  20F2 2A            mov b, [d]
0587+  20F3 AC            mul a, b      ; result in B since it fits in 16bits
0588+  20F4 11            mov a, b
0589+  20F5 28            mov b, c
0590+  20F6 54            add a, b
0591+  20F7 39            mov c, a
0592+  20F8 63 02 00      sub d, 2
0593+  20FB 0A E8 20      jmp mul_loop
0594+  20FE             mul_exit:
0595+  20FE 12            mov a, c
0596+  20FF E7            pop d
0597+  2100 E6            pop c
0598+  2101 E5            pop b
0599+  2102 EF            pop si
0600+  2103 F9            leave
0601+  2104 09            ret
0602+  2105             
0603+  2105 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  2109 34 35 36 37 
0603+  210D 38 39 41 42 
0603+  2111 43 44 45 46 
0604+  2115 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  2119 1B 5B 48 00 
0605+  211D             
0606+  211D             table_power:
0607+  211D 01 00         .dw 1
0608+  211F 0A 00         .dw 10
0609+  2121 64 00         .dw 100
0610+  2123 E8 03         .dw 1000
0611+  2125 10 27         .dw 100004329   2127             ; --- END INLINE ASM SEGMENT
4330   2127             
4331   2127 F9            leave
4332   2128 09            ret
4333   2129             ; --- END TEXT SEGMENT
4334   2129             
4335   2129             ; --- BEGIN DATA SEGMENT
4336   2129 00 00       st_fopen_max_handle: .dw 0
4337   212B 55 6E 65 78 _s0: .db "Unexpected format in printf.", 0
4337   212F 70 65 63 74 
4337   2133 65 64 20 66 
4337   2137 6F 72 6D 61 
4337   213B 74 20 69 6E 
4337   213F 20 70 72 69 
4337   2143 6E 74 66 2E 
4337   2147 00 
4338   2148 45 72 72 6F _s1: .db "Error: Unknown argument type.\n", 0
4338   214C 72 3A 20 55 
4338   2150 6E 6B 6E 6F 
4338   2154 77 6E 20 61 
4338   2158 72 67 75 6D 
4338   215C 65 6E 74 20 
4338   2160 74 79 70 65 
4338   2164 2E 0A 00 
4339   2167 1B 5B 32 4A _s2: .db "\033[2J\033[H", 0
4339   216B 1B 5B 48 00 
4340   216F             
4341   216F 71 21       _heap_top: .dw _heap
4342   2171 00          _heap: .db 0
4343   2172             ; --- END DATA SEGMENT
4344   2172             
4345   2172             .end
tasm: Number of errors = 0
