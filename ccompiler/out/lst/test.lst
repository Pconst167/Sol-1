0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; p++ + 1; 
0011   0408 3B 7E 21      mov d, _p ; $p
0012   040B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0013   040E FD 39         mov c, b ; And place it into C
0014   0410 2A            mov b, [d] ; Lower Word in B
0015   0411 FD 2D 01 00   mov32 ga, 1
0015   0415 00 00 
0016   0417 FD 15         add32 cb, ga
0017   0419 3B 7E 21      mov d, _p ; $p
0018   041C 28            mov b, c
0019   041D FD 44 02 00   mov [d+2], b
0020   0421 FD 43         mov [d], b
0021   0423 FD 7A         mov g, c
0022   0425 11            mov a, b
0023   0426 FD 2E 01 00   mov32 cb, 1
0023   042A 00 00 
0024   042C FD 1C         sub32 ga, cb
0025   042E FD 38         mov c, g
0026   0430 27            mov b, a
0027   0431             ; --- START TERMS
0028   0431 D7            push a
0029   0432 FD D8         push g
0030   0434 11            mov a, b
0031   0435 FD 7A         mov g, c
0032   0437 FD 2E 01 00   mov32 cb, $00000001
0032   043B 00 00 
0033   043D FD 15         add32 cb, ga
0034   043F FD F1         pop g
0035   0441 E4            pop a
0036   0442             ; --- END TERMS
0037   0442 05 0B         syscall sys_terminate_proc
0038   0444             
0039   0444             strcpy:
0040   0444 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0041   0447             ; char *psrc; 
0042   0447 52 02 00      sub sp, 2
0043   044A             ; char *pdest; 
0044   044A 52 02 00      sub sp, 2
0045   044D             ; psrc = src; 
0046   044D FA FF FF      lea d, [bp + -1] ; $psrc
0047   0450 DA            push d
0048   0451 FA 07 00      lea d, [bp + 7] ; $src
0049   0454 2A            mov b, [d]
0050   0455 38 00 00      mov c, 0
0051   0458 E7            pop d
0052   0459 FD 43         mov [d], b
0053   045B             ; pdest = dest; 
0054   045B FA FD FF      lea d, [bp + -3] ; $pdest
0055   045E DA            push d
0056   045F FA 05 00      lea d, [bp + 5] ; $dest
0057   0462 2A            mov b, [d]
0058   0463 38 00 00      mov c, 0
0059   0466 E7            pop d
0060   0467 FD 43         mov [d], b
0061   0469             ; while(*psrc) *pdest++ = *psrc++; 
0062   0469             _while1_cond:
0063   0469 FA FF FF      lea d, [bp + -1] ; $psrc
0064   046C 2A            mov b, [d]
0065   046D 38 00 00      mov c, 0
0066   0470 74            mov d, b
0067   0471 32            mov bl, [d]
0068   0472 A7 00         mov bh, 0
0069   0474 38 00 00      mov c, 0
0070   0477 C0 00 00      cmp b, 0
0071   047A C6 AB 04      je _while1_exit
0072   047D             _while1_block:
0073   047D             ; *pdest++ = *psrc++; 
0074   047D FA FD FF      lea d, [bp + -3] ; $pdest
0075   0480 2A            mov b, [d]
0076   0481 38 00 00      mov c, 0
0077   0484 FD 77         inc b
0078   0486 FA FD FF      lea d, [bp + -3] ; $pdest
0079   0489 FD 3E         mov [d], bl
0080   048B FD 7D         dec b
0081   048D D8            push b
0082   048E FA FF FF      lea d, [bp + -1] ; $psrc
0083   0491 2A            mov b, [d]
0084   0492 38 00 00      mov c, 0
0085   0495 FD 77         inc b
0086   0497 FA FF FF      lea d, [bp + -1] ; $psrc
0087   049A FD 3E         mov [d], bl
0088   049C FD 7D         dec b
0089   049E 74            mov d, b
0090   049F 32            mov bl, [d]
0091   04A0 A7 00         mov bh, 0
0092   04A2 38 00 00      mov c, 0
0093   04A5 E7            pop d
0094   04A6 FD 3E         mov [d], bl
0095   04A8 0A 69 04      jmp _while1_cond
0096   04AB             _while1_exit:
0097   04AB             ; *pdest = '\0'; 
0098   04AB FA FD FF      lea d, [bp + -3] ; $pdest
0099   04AE 2A            mov b, [d]
0100   04AF 38 00 00      mov c, 0
0101   04B2 D8            push b
0102   04B3 FD 2E 00 00   mov32 cb, $00000000
0102   04B7 00 00 
0103   04B9 E7            pop d
0104   04BA FD 3E         mov [d], bl
0105   04BC F9            leave
0106   04BD 09            ret
0107   04BE             
0108   04BE             strcmp:
0109   04BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0110   04C1             ; while (*s1 && (*s1 == *s2)) { 
0111   04C1             _while2_cond:
0112   04C1 FA 05 00      lea d, [bp + 5] ; $s1
0113   04C4 2A            mov b, [d]
0114   04C5 38 00 00      mov c, 0
0115   04C8 74            mov d, b
0116   04C9 32            mov bl, [d]
0117   04CA A7 00         mov bh, 0
0118   04CC 38 00 00      mov c, 0
0119   04CF             ; --- START LOGICAL AND
0120   04CF D7            push a
0121   04D0 11            mov a, b
0122   04D1 FA 05 00      lea d, [bp + 5] ; $s1
0123   04D4 2A            mov b, [d]
0124   04D5 38 00 00      mov c, 0
0125   04D8 74            mov d, b
0126   04D9 32            mov bl, [d]
0127   04DA A7 00         mov bh, 0
0128   04DC 38 00 00      mov c, 0
0129   04DF             ; --- START RELATIONAL
0130   04DF D7            push a
0131   04E0 11            mov a, b
0132   04E1 FA 07 00      lea d, [bp + 7] ; $s2
0133   04E4 2A            mov b, [d]
0134   04E5 38 00 00      mov c, 0
0135   04E8 74            mov d, b
0136   04E9 32            mov bl, [d]
0137   04EA A7 00         mov bh, 0
0138   04EC 38 00 00      mov c, 0
0139   04EF B0            cmp a, b
0140   04F0 FD 71         seq ; ==
0141   04F2 E4            pop a
0142   04F3             ; --- END RELATIONAL
0143   04F3 FD A7         sand a, b
0144   04F5 E4            pop a
0145   04F6             ; --- END LOGICAL AND
0146   04F6 C0 00 00      cmp b, 0
0147   04F9 C6 1F 05      je _while2_exit
0148   04FC             _while2_block:
0149   04FC             ; s1++; 
0150   04FC FA 05 00      lea d, [bp + 5] ; $s1
0151   04FF 2A            mov b, [d]
0152   0500 38 00 00      mov c, 0
0153   0503 FD 77         inc b
0154   0505 FA 05 00      lea d, [bp + 5] ; $s1
0155   0508 FD 3E         mov [d], bl
0156   050A FD 7D         dec b
0157   050C             ; s2++; 
0158   050C FA 07 00      lea d, [bp + 7] ; $s2
0159   050F 2A            mov b, [d]
0160   0510 38 00 00      mov c, 0
0161   0513 FD 77         inc b
0162   0515 FA 07 00      lea d, [bp + 7] ; $s2
0163   0518 FD 3E         mov [d], bl
0164   051A FD 7D         dec b
0165   051C 0A C1 04      jmp _while2_cond
0166   051F             _while2_exit:
0167   051F             ; return *s1 - *s2; 
0168   051F FA 05 00      lea d, [bp + 5] ; $s1
0169   0522 2A            mov b, [d]
0170   0523 38 00 00      mov c, 0
0171   0526 74            mov d, b
0172   0527 32            mov bl, [d]
0173   0528 A7 00         mov bh, 0
0174   052A 38 00 00      mov c, 0
0175   052D             ; --- START TERMS
0176   052D D7            push a
0177   052E 11            mov a, b
0178   052F FA 07 00      lea d, [bp + 7] ; $s2
0179   0532 2A            mov b, [d]
0180   0533 38 00 00      mov c, 0
0181   0536 74            mov d, b
0182   0537 32            mov bl, [d]
0183   0538 A7 00         mov bh, 0
0184   053A 38 00 00      mov c, 0
0185   053D 60            sub a, b
0186   053E 27            mov b, a
0187   053F E4            pop a
0188   0540             ; --- END TERMS
0189   0540 F9            leave
0190   0541 09            ret
0191   0542             
0192   0542             strncmp:
0193   0542 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0194   0545 F9            leave
0195   0546 09            ret
0196   0547             
0197   0547             strcat:
0198   0547 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0199   054A             ; int dest_len; 
0200   054A 52 02 00      sub sp, 2
0201   054D             ; int i; 
0202   054D 52 02 00      sub sp, 2
0203   0550             ; dest_len = strlen(dest); 
0204   0550 FA FF FF      lea d, [bp + -1] ; $dest_len
0205   0553 DA            push d
0206   0554             ; --- START FUNCTION CALL
0207   0554 FA 05 00      lea d, [bp + 5] ; $dest
0208   0557 2A            mov b, [d]
0209   0558 38 00 00      mov c, 0
0210   055B FD AB         swp b
0211   055D D8            push b
0212   055E 07 2A 06      call strlen
0213   0561 51 02 00      add sp, 2
0214   0564             ; --- END FUNCTION CALL
0215   0564 E7            pop d
0216   0565 FD 43         mov [d], b
0217   0567             ; for (i = 0; src[i] != 0; i=i+1) { 
0218   0567             _for3_init:
0219   0567 FA FD FF      lea d, [bp + -3] ; $i
0220   056A DA            push d
0221   056B FD 2E 00 00   mov32 cb, $00000000
0221   056F 00 00 
0222   0571 E7            pop d
0223   0572 FD 43         mov [d], b
0224   0574             _for3_cond:
0225   0574 FA 07 00      lea d, [bp + 7] ; $src
0226   0577 FD 2A         mov d, [d]
0227   0579 D7            push a
0228   057A DA            push d
0229   057B FA FD FF      lea d, [bp + -3] ; $i
0230   057E 2A            mov b, [d]
0231   057F 38 00 00      mov c, 0
0232   0582 E7            pop d
0233   0583 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0234   0587 E4            pop a
0235   0588 32            mov bl, [d]
0236   0589 A7 00         mov bh, 0
0237   058B 38 00 00      mov c, 0
0238   058E             ; --- START RELATIONAL
0239   058E D7            push a
0240   058F 11            mov a, b
0241   0590 FD 2E 00 00   mov32 cb, $00000000
0241   0594 00 00 
0242   0596 B0            cmp a, b
0243   0597 FD 72         sneq ; !=
0244   0599 E4            pop a
0245   059A             ; --- END RELATIONAL
0246   059A C0 00 00      cmp b, 0
0247   059D C6 F8 05      je _for3_exit
0248   05A0             _for3_block:
0249   05A0             ; dest[dest_len + i] = src[i]; 
0250   05A0 FA 05 00      lea d, [bp + 5] ; $dest
0251   05A3 FD 2A         mov d, [d]
0252   05A5 D7            push a
0253   05A6 DA            push d
0254   05A7 FA FF FF      lea d, [bp + -1] ; $dest_len
0255   05AA 2A            mov b, [d]
0256   05AB 38 00 00      mov c, 0
0257   05AE             ; --- START TERMS
0258   05AE D7            push a
0259   05AF 11            mov a, b
0260   05B0 FA FD FF      lea d, [bp + -3] ; $i
0261   05B3 2A            mov b, [d]
0262   05B4 38 00 00      mov c, 0
0263   05B7 56            add b, a
0264   05B8 E4            pop a
0265   05B9             ; --- END TERMS
0266   05B9 E7            pop d
0267   05BA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0268   05BE E4            pop a
0269   05BF DA            push d
0270   05C0 FA 07 00      lea d, [bp + 7] ; $src
0271   05C3 FD 2A         mov d, [d]
0272   05C5 D7            push a
0273   05C6 DA            push d
0274   05C7 FA FD FF      lea d, [bp + -3] ; $i
0275   05CA 2A            mov b, [d]
0276   05CB 38 00 00      mov c, 0
0277   05CE E7            pop d
0278   05CF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0279   05D3 E4            pop a
0280   05D4 32            mov bl, [d]
0281   05D5 A7 00         mov bh, 0
0282   05D7 38 00 00      mov c, 0
0283   05DA E7            pop d
0284   05DB FD 3E         mov [d], bl
0285   05DD             _for3_update:
0286   05DD FA FD FF      lea d, [bp + -3] ; $i
0287   05E0 DA            push d
0288   05E1 FA FD FF      lea d, [bp + -3] ; $i
0289   05E4 2A            mov b, [d]
0290   05E5 38 00 00      mov c, 0
0291   05E8             ; --- START TERMS
0292   05E8 D7            push a
0293   05E9 11            mov a, b
0294   05EA FD 2E 01 00   mov32 cb, $00000001
0294   05EE 00 00 
0295   05F0 56            add b, a
0296   05F1 E4            pop a
0297   05F2             ; --- END TERMS
0298   05F2 E7            pop d
0299   05F3 FD 43         mov [d], b
0300   05F5 0A 74 05      jmp _for3_cond
0301   05F8             _for3_exit:
0302   05F8             ; dest[dest_len + i] = 0; 
0303   05F8 FA 05 00      lea d, [bp + 5] ; $dest
0304   05FB FD 2A         mov d, [d]
0305   05FD D7            push a
0306   05FE DA            push d
0307   05FF FA FF FF      lea d, [bp + -1] ; $dest_len
0308   0602 2A            mov b, [d]
0309   0603 38 00 00      mov c, 0
0310   0606             ; --- START TERMS
0311   0606 D7            push a
0312   0607 11            mov a, b
0313   0608 FA FD FF      lea d, [bp + -3] ; $i
0314   060B 2A            mov b, [d]
0315   060C 38 00 00      mov c, 0
0316   060F 56            add b, a
0317   0610 E4            pop a
0318   0611             ; --- END TERMS
0319   0611 E7            pop d
0320   0612 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0321   0616 E4            pop a
0322   0617 DA            push d
0323   0618 FD 2E 00 00   mov32 cb, $00000000
0323   061C 00 00 
0324   061E E7            pop d
0325   061F FD 3E         mov [d], bl
0326   0621             ; return dest; 
0327   0621 FA 05 00      lea d, [bp + 5] ; $dest
0328   0624 2A            mov b, [d]
0329   0625 38 00 00      mov c, 0
0330   0628 F9            leave
0331   0629 09            ret
0332   062A             
0333   062A             strlen:
0334   062A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0335   062D             ; int length; 
0336   062D 52 02 00      sub sp, 2
0337   0630             ; length = 0; 
0338   0630 FA FF FF      lea d, [bp + -1] ; $length
0339   0633 DA            push d
0340   0634 FD 2E 00 00   mov32 cb, $00000000
0340   0638 00 00 
0341   063A E7            pop d
0342   063B FD 43         mov [d], b
0343   063D             ; while (str[length] != 0) { 
0344   063D             _while4_cond:
0345   063D FA 05 00      lea d, [bp + 5] ; $str
0346   0640 FD 2A         mov d, [d]
0347   0642 D7            push a
0348   0643 DA            push d
0349   0644 FA FF FF      lea d, [bp + -1] ; $length
0350   0647 2A            mov b, [d]
0351   0648 38 00 00      mov c, 0
0352   064B E7            pop d
0353   064C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0354   0650 E4            pop a
0355   0651 32            mov bl, [d]
0356   0652 A7 00         mov bh, 0
0357   0654 38 00 00      mov c, 0
0358   0657             ; --- START RELATIONAL
0359   0657 D7            push a
0360   0658 11            mov a, b
0361   0659 FD 2E 00 00   mov32 cb, $00000000
0361   065D 00 00 
0362   065F B0            cmp a, b
0363   0660 FD 72         sneq ; !=
0364   0662 E4            pop a
0365   0663             ; --- END RELATIONAL
0366   0663 C0 00 00      cmp b, 0
0367   0666 C6 7C 06      je _while4_exit
0368   0669             _while4_block:
0369   0669             ; length++; 
0370   0669 FA FF FF      lea d, [bp + -1] ; $length
0371   066C 2A            mov b, [d]
0372   066D 38 00 00      mov c, 0
0373   0670 11            mov a, b
0374   0671 FD 77         inc b
0375   0673 FA FF FF      lea d, [bp + -1] ; $length
0376   0676 FD 43         mov [d], b
0377   0678 27            mov b, a
0378   0679 0A 3D 06      jmp _while4_cond
0379   067C             _while4_exit:
0380   067C             ; return length; 
0381   067C FA FF FF      lea d, [bp + -1] ; $length
0382   067F 2A            mov b, [d]
0383   0680 38 00 00      mov c, 0
0384   0683 F9            leave
0385   0684 09            ret
0386   0685             
0387   0685             exit:
0388   0685 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0389   0688             
0390   0688             ; --- BEGIN INLINE ASM SEGMENT
0391   0688 05 0B         syscall sys_terminate_proc
0392   068A             ; --- END INLINE ASM SEGMENT
0393   068A             
0394   068A F9            leave
0395   068B 09            ret
0396   068C             
0397   068C             memset:
0398   068C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0399   068F             ; int i; 
0400   068F 52 02 00      sub sp, 2
0401   0692             ; for(i = 0; i < size; i++){ 
0402   0692             _for5_init:
0403   0692 FA FF FF      lea d, [bp + -1] ; $i
0404   0695 DA            push d
0405   0696 FD 2E 00 00   mov32 cb, $00000000
0405   069A 00 00 
0406   069C E7            pop d
0407   069D FD 43         mov [d], b
0408   069F             _for5_cond:
0409   069F FA FF FF      lea d, [bp + -1] ; $i
0410   06A2 2A            mov b, [d]
0411   06A3 38 00 00      mov c, 0
0412   06A6             ; --- START RELATIONAL
0413   06A6 D7            push a
0414   06A7 11            mov a, b
0415   06A8 FA 08 00      lea d, [bp + 8] ; $size
0416   06AB 2A            mov b, [d]
0417   06AC 38 00 00      mov c, 0
0418   06AF B0            cmp a, b
0419   06B0 FD 73         slt ; < (signed)
0420   06B2 E4            pop a
0421   06B3             ; --- END RELATIONAL
0422   06B3 C0 00 00      cmp b, 0
0423   06B6 C6 EB 06      je _for5_exit
0424   06B9             _for5_block:
0425   06B9             ; *(s+i) = c; 
0426   06B9 FA 05 00      lea d, [bp + 5] ; $s
0427   06BC 2A            mov b, [d]
0428   06BD 38 00 00      mov c, 0
0429   06C0             ; --- START TERMS
0430   06C0 D7            push a
0431   06C1 11            mov a, b
0432   06C2 FA FF FF      lea d, [bp + -1] ; $i
0433   06C5 2A            mov b, [d]
0434   06C6 38 00 00      mov c, 0
0435   06C9 56            add b, a
0436   06CA E4            pop a
0437   06CB             ; --- END TERMS
0438   06CB D8            push b
0439   06CC FA 07 00      lea d, [bp + 7] ; $c
0440   06CF 32            mov bl, [d]
0441   06D0 A7 00         mov bh, 0
0442   06D2 38 00 00      mov c, 0
0443   06D5 E7            pop d
0444   06D6 FD 3E         mov [d], bl
0445   06D8             _for5_update:
0446   06D8 FA FF FF      lea d, [bp + -1] ; $i
0447   06DB 2A            mov b, [d]
0448   06DC 38 00 00      mov c, 0
0449   06DF 11            mov a, b
0450   06E0 FD 77         inc b
0451   06E2 FA FF FF      lea d, [bp + -1] ; $i
0452   06E5 FD 43         mov [d], b
0453   06E7 27            mov b, a
0454   06E8 0A 9F 06      jmp _for5_cond
0455   06EB             _for5_exit:
0456   06EB             ; return s; 
0457   06EB FA 05 00      lea d, [bp + 5] ; $s
0458   06EE 2A            mov b, [d]
0459   06EF 38 00 00      mov c, 0
0460   06F2 F9            leave
0461   06F3 09            ret
0462   06F4             
0463   06F4             atoi:
0464   06F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0465   06F7             ; int result = 0;  // Initialize result 
0466   06F7 52 02 00      sub sp, 2
0467   06FA             ; --- START LOCAL VAR INITIALIZATION
0468   06FA FA FF FF      lea d, [bp + -1] ; $result
0469   06FD DA            push d
0470   06FE FD 2E 00 00   mov32 cb, $00000000
0470   0702 00 00 
0471   0704 E7            pop d
0472   0705 FD 43         mov [d], b
0473   0707             ; --- END LOCAL VAR INITIALIZATION
0474   0707             ; int sign = 1;    // Initialize sign as positive 
0475   0707 52 02 00      sub sp, 2
0476   070A             ; --- START LOCAL VAR INITIALIZATION
0477   070A FA FD FF      lea d, [bp + -3] ; $sign
0478   070D DA            push d
0479   070E FD 2E 01 00   mov32 cb, $00000001
0479   0712 00 00 
0480   0714 E7            pop d
0481   0715 FD 43         mov [d], b
0482   0717             ; --- END LOCAL VAR INITIALIZATION
0483   0717             ; while (*str == ' ') str++; 
0484   0717             _while6_cond:
0485   0717 FA 05 00      lea d, [bp + 5] ; $str
0486   071A 2A            mov b, [d]
0487   071B 38 00 00      mov c, 0
0488   071E 74            mov d, b
0489   071F 32            mov bl, [d]
0490   0720 A7 00         mov bh, 0
0491   0722 38 00 00      mov c, 0
0492   0725             ; --- START RELATIONAL
0493   0725 D7            push a
0494   0726 11            mov a, b
0495   0727 FD 2E 20 00   mov32 cb, $00000020
0495   072B 00 00 
0496   072D B0            cmp a, b
0497   072E FD 71         seq ; ==
0498   0730 E4            pop a
0499   0731             ; --- END RELATIONAL
0500   0731 C0 00 00      cmp b, 0
0501   0734 C6 4A 07      je _while6_exit
0502   0737             _while6_block:
0503   0737             ; str++; 
0504   0737 FA 05 00      lea d, [bp + 5] ; $str
0505   073A 2A            mov b, [d]
0506   073B 38 00 00      mov c, 0
0507   073E FD 77         inc b
0508   0740 FA 05 00      lea d, [bp + 5] ; $str
0509   0743 FD 3E         mov [d], bl
0510   0745 FD 7D         dec b
0511   0747 0A 17 07      jmp _while6_cond
0512   074A             _while6_exit:
0513   074A             ; if (*str == '-' || *str == '+') { 
0514   074A             _if7_cond:
0515   074A FA 05 00      lea d, [bp + 5] ; $str
0516   074D 2A            mov b, [d]
0517   074E 38 00 00      mov c, 0
0518   0751 74            mov d, b
0519   0752 32            mov bl, [d]
0520   0753 A7 00         mov bh, 0
0521   0755 38 00 00      mov c, 0
0522   0758             ; --- START RELATIONAL
0523   0758 D7            push a
0524   0759 11            mov a, b
0525   075A FD 2E 2D 00   mov32 cb, $0000002d
0525   075E 00 00 
0526   0760 B0            cmp a, b
0527   0761 FD 71         seq ; ==
0528   0763 E4            pop a
0529   0764             ; --- END RELATIONAL
0530   0764             ; --- START LOGICAL OR
0531   0764 D7            push a
0532   0765 11            mov a, b
0533   0766 FA 05 00      lea d, [bp + 5] ; $str
0534   0769 2A            mov b, [d]
0535   076A 38 00 00      mov c, 0
0536   076D 74            mov d, b
0537   076E 32            mov bl, [d]
0538   076F A7 00         mov bh, 0
0539   0771 38 00 00      mov c, 0
0540   0774             ; --- START RELATIONAL
0541   0774 D7            push a
0542   0775 11            mov a, b
0543   0776 FD 2E 2B 00   mov32 cb, $0000002b
0543   077A 00 00 
0544   077C B0            cmp a, b
0545   077D FD 71         seq ; ==
0546   077F E4            pop a
0547   0780             ; --- END RELATIONAL
0548   0780 FD A8         sor a, b ; ||
0549   0782 E4            pop a
0550   0783             ; --- END LOGICAL OR
0551   0783 C0 00 00      cmp b, 0
0552   0786 C6 CE 07      je _if7_exit
0553   0789             _if7_true:
0554   0789             ; if (*str == '-') sign = -1; 
0555   0789             _if8_cond:
0556   0789 FA 05 00      lea d, [bp + 5] ; $str
0557   078C 2A            mov b, [d]
0558   078D 38 00 00      mov c, 0
0559   0790 74            mov d, b
0560   0791 32            mov bl, [d]
0561   0792 A7 00         mov bh, 0
0562   0794 38 00 00      mov c, 0
0563   0797             ; --- START RELATIONAL
0564   0797 D7            push a
0565   0798 11            mov a, b
0566   0799 FD 2E 2D 00   mov32 cb, $0000002d
0566   079D 00 00 
0567   079F B0            cmp a, b
0568   07A0 FD 71         seq ; ==
0569   07A2 E4            pop a
0570   07A3             ; --- END RELATIONAL
0571   07A3 C0 00 00      cmp b, 0
0572   07A6 C6 BB 07      je _if8_exit
0573   07A9             _if8_true:
0574   07A9             ; sign = -1; 
0575   07A9 FA FD FF      lea d, [bp + -3] ; $sign
0576   07AC DA            push d
0577   07AD FD 2E 01 00   mov32 cb, $00000001
0577   07B1 00 00 
0578   07B3 FD 97         neg b
0579   07B5 E7            pop d
0580   07B6 FD 43         mov [d], b
0581   07B8 0A BB 07      jmp _if8_exit
0582   07BB             _if8_exit:
0583   07BB             ; str++; 
0584   07BB FA 05 00      lea d, [bp + 5] ; $str
0585   07BE 2A            mov b, [d]
0586   07BF 38 00 00      mov c, 0
0587   07C2 FD 77         inc b
0588   07C4 FA 05 00      lea d, [bp + 5] ; $str
0589   07C7 FD 3E         mov [d], bl
0590   07C9 FD 7D         dec b
0591   07CB 0A CE 07      jmp _if7_exit
0592   07CE             _if7_exit:
0593   07CE             ; while (*str >= '0' && *str <= '9') { 
0594   07CE             _while9_cond:
0595   07CE FA 05 00      lea d, [bp + 5] ; $str
0596   07D1 2A            mov b, [d]
0597   07D2 38 00 00      mov c, 0
0598   07D5 74            mov d, b
0599   07D6 32            mov bl, [d]
0600   07D7 A7 00         mov bh, 0
0601   07D9 38 00 00      mov c, 0
0602   07DC             ; --- START RELATIONAL
0603   07DC D7            push a
0604   07DD 11            mov a, b
0605   07DE FD 2E 30 00   mov32 cb, $00000030
0605   07E2 00 00 
0606   07E4 B0            cmp a, b
0607   07E5 FD 82         sgeu ; >= (unsigned)
0608   07E7 E4            pop a
0609   07E8             ; --- END RELATIONAL
0610   07E8             ; --- START LOGICAL AND
0611   07E8 D7            push a
0612   07E9 11            mov a, b
0613   07EA FA 05 00      lea d, [bp + 5] ; $str
0614   07ED 2A            mov b, [d]
0615   07EE 38 00 00      mov c, 0
0616   07F1 74            mov d, b
0617   07F2 32            mov bl, [d]
0618   07F3 A7 00         mov bh, 0
0619   07F5 38 00 00      mov c, 0
0620   07F8             ; --- START RELATIONAL
0621   07F8 D7            push a
0622   07F9 11            mov a, b
0623   07FA FD 2E 39 00   mov32 cb, $00000039
0623   07FE 00 00 
0624   0800 B0            cmp a, b
0625   0801 FD 76         sleu ; <= (unsigned)
0626   0803 E4            pop a
0627   0804             ; --- END RELATIONAL
0628   0804 FD A7         sand a, b
0629   0806 E4            pop a
0630   0807             ; --- END LOGICAL AND
0631   0807 C0 00 00      cmp b, 0
0632   080A C6 57 08      je _while9_exit
0633   080D             _while9_block:
0634   080D             ; result = result * 10 + (*str - '0'); 
0635   080D FA FF FF      lea d, [bp + -1] ; $result
0636   0810 DA            push d
0637   0811 FA FF FF      lea d, [bp + -1] ; $result
0638   0814 2A            mov b, [d]
0639   0815 38 00 00      mov c, 0
0640   0818             ; --- START FACTORS
0641   0818 D7            push a
0642   0819 11            mov a, b
0643   081A FD 2E 0A 00   mov32 cb, $0000000a
0643   081E 00 00 
0644   0820 AC            mul a, b ; *
0645   0821 11            mov a, b
0646   0822 27            mov b, a
0647   0823 E4            pop a
0648   0824             ; --- END FACTORS
0649   0824             ; --- START TERMS
0650   0824 D7            push a
0651   0825 11            mov a, b
0652   0826 FA 05 00      lea d, [bp + 5] ; $str
0653   0829 2A            mov b, [d]
0654   082A 38 00 00      mov c, 0
0655   082D 74            mov d, b
0656   082E 32            mov bl, [d]
0657   082F A7 00         mov bh, 0
0658   0831 38 00 00      mov c, 0
0659   0834             ; --- START TERMS
0660   0834 D7            push a
0661   0835 11            mov a, b
0662   0836 FD 2E 30 00   mov32 cb, $00000030
0662   083A 00 00 
0663   083C 60            sub a, b
0664   083D 27            mov b, a
0665   083E E4            pop a
0666   083F             ; --- END TERMS
0667   083F 56            add b, a
0668   0840 E4            pop a
0669   0841             ; --- END TERMS
0670   0841 E7            pop d
0671   0842 FD 43         mov [d], b
0672   0844             ; str++; 
0673   0844 FA 05 00      lea d, [bp + 5] ; $str
0674   0847 2A            mov b, [d]
0675   0848 38 00 00      mov c, 0
0676   084B FD 77         inc b
0677   084D FA 05 00      lea d, [bp + 5] ; $str
0678   0850 FD 3E         mov [d], bl
0679   0852 FD 7D         dec b
0680   0854 0A CE 07      jmp _while9_cond
0681   0857             _while9_exit:
0682   0857             ; return sign * result; 
0683   0857 FA FD FF      lea d, [bp + -3] ; $sign
0684   085A 2A            mov b, [d]
0685   085B 38 00 00      mov c, 0
0686   085E             ; --- START FACTORS
0687   085E D7            push a
0688   085F 11            mov a, b
0689   0860 FA FF FF      lea d, [bp + -1] ; $result
0690   0863 2A            mov b, [d]
0691   0864 38 00 00      mov c, 0
0692   0867 AC            mul a, b ; *
0693   0868 11            mov a, b
0694   0869 27            mov b, a
0695   086A E4            pop a
0696   086B             ; --- END FACTORS
0697   086B F9            leave
0698   086C 09            ret
0699   086D             
0700   086D             rand:
0701   086D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0702   0870             ; int  sec; 
0703   0870 52 02 00      sub sp, 2
0704   0873             
0705   0873             ; --- BEGIN INLINE ASM SEGMENT
0706   0873 19 00         mov al, 0
0707   0875 05 01         syscall sys_rtc					
0708   0877 1A            mov al, ah
0709   0878 FA FF FF      lea d, [bp + -1] ; $sec
0710   087B 1E            mov al, [d]
0711   087C 22 00         mov ah, 0
0712   087E             ; --- END INLINE ASM SEGMENT
0713   087E             
0714   087E             ; return sec; 
0715   087E FA FF FF      lea d, [bp + -1] ; $sec
0716   0881 2A            mov b, [d]
0717   0882 38 00 00      mov c, 0
0718   0885 F9            leave
0719   0886 09            ret
0720   0887             
0721   0887             alloc:
0722   0887 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0723   088A             ; heap_top = heap_top + bytes; 
0724   088A 3B C8 21      mov d, _heap_top ; $heap_top
0725   088D DA            push d
0726   088E 3B C8 21      mov d, _heap_top ; $heap_top
0727   0891 2A            mov b, [d]
0728   0892 38 00 00      mov c, 0
0729   0895             ; --- START TERMS
0730   0895 D7            push a
0731   0896 11            mov a, b
0732   0897 FA 05 00      lea d, [bp + 5] ; $bytes
0733   089A 2A            mov b, [d]
0734   089B 38 00 00      mov c, 0
0735   089E 56            add b, a
0736   089F E4            pop a
0737   08A0             ; --- END TERMS
0738   08A0 E7            pop d
0739   08A1 FD 43         mov [d], b
0740   08A3             ; return heap_top - bytes; 
0741   08A3 3B C8 21      mov d, _heap_top ; $heap_top
0742   08A6 2A            mov b, [d]
0743   08A7 38 00 00      mov c, 0
0744   08AA             ; --- START TERMS
0745   08AA D7            push a
0746   08AB 11            mov a, b
0747   08AC FA 05 00      lea d, [bp + 5] ; $bytes
0748   08AF 2A            mov b, [d]
0749   08B0 38 00 00      mov c, 0
0750   08B3 60            sub a, b
0751   08B4 27            mov b, a
0752   08B5 E4            pop a
0753   08B6             ; --- END TERMS
0754   08B6 F9            leave
0755   08B7 09            ret
0756   08B8             
0757   08B8             free:
0758   08B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0759   08BB             ; return heap_top = heap_top - bytes; 
0760   08BB 3B C8 21      mov d, _heap_top ; $heap_top
0761   08BE DA            push d
0762   08BF 3B C8 21      mov d, _heap_top ; $heap_top
0763   08C2 2A            mov b, [d]
0764   08C3 38 00 00      mov c, 0
0765   08C6             ; --- START TERMS
0766   08C6 D7            push a
0767   08C7 11            mov a, b
0768   08C8 FA 05 00      lea d, [bp + 5] ; $bytes
0769   08CB 2A            mov b, [d]
0770   08CC 38 00 00      mov c, 0
0771   08CF 60            sub a, b
0772   08D0 27            mov b, a
0773   08D1 E4            pop a
0774   08D2             ; --- END TERMS
0775   08D2 E7            pop d
0776   08D3 FD 43         mov [d], b
0777   08D5 F9            leave
0778   08D6 09            ret
0779   08D7             
0780   08D7             fopen:
0781   08D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0782   08DA             ; FILE *fp; 
0783   08DA 52 02 00      sub sp, 2
0784   08DD             ; static int max_handle = 0; 
0785   08DD 52 02 00      sub sp, 2
0786   08E0             ; fp = alloc(sizeof(FILE)); 
0787   08E0 FA FF FF      lea d, [bp + -1] ; $fp
0788   08E3 DA            push d
0789   08E4             ; --- START FUNCTION CALL
0790   08E4 26 04 01      mov b, 260
0791   08E7 FD AB         swp b
0792   08E9 D8            push b
0793   08EA 07 87 08      call alloc
0794   08ED 51 02 00      add sp, 2
0795   08F0             ; --- END FUNCTION CALL
0796   08F0 E7            pop d
0797   08F1 FD 43         mov [d], b
0798   08F3             ; strcpy(fp->filename, filename); 
0799   08F3             ; --- START FUNCTION CALL
0800   08F3 FA 05 00      lea d, [bp + 5] ; $filename
0801   08F6 2A            mov b, [d]
0802   08F7 38 00 00      mov c, 0
0803   08FA FD AB         swp b
0804   08FC D8            push b
0805   08FD FA FF FF      lea d, [bp + -1] ; $fp
0806   0900 FD 2A         mov d, [d]
0807   0902 58 02 00      add d, 2
0808   0905 2D            mov b, d
0809   0906 38 00 00      mov c, 0
0810   0909 FD AB         swp b
0811   090B D8            push b
0812   090C 07 44 04      call strcpy
0813   090F 51 04 00      add sp, 4
0814   0912             ; --- END FUNCTION CALL
0815   0912             ; fp->handle = max_handle; 
0816   0912 FA FF FF      lea d, [bp + -1] ; $fp
0817   0915 FD 2A         mov d, [d]
0818   0917 58 00 00      add d, 0
0819   091A DA            push d
0820   091B 3B 82 21      mov d, st_fopen_max_handle ; static max_handle
0821   091E 2A            mov b, [d]
0822   091F 38 00 00      mov c, 0
0823   0922 E7            pop d
0824   0923 FD 43         mov [d], b
0825   0925             ; fp->mode = mode; 
0826   0925 FA FF FF      lea d, [bp + -1] ; $fp
0827   0928 FD 2A         mov d, [d]
0828   092A 58 02 01      add d, 258
0829   092D DA            push d
0830   092E FA 07 00      lea d, [bp + 7] ; $mode
0831   0931 32            mov bl, [d]
0832   0932 A7 00         mov bh, 0
0833   0934 38 00 00      mov c, 0
0834   0937 E7            pop d
0835   0938 FD 3E         mov [d], bl
0836   093A             ; fp->loc = 0; 
0837   093A FA FF FF      lea d, [bp + -1] ; $fp
0838   093D FD 2A         mov d, [d]
0839   093F 58 03 01      add d, 259
0840   0942 DA            push d
0841   0943 FD 2E 00 00   mov32 cb, $00000000
0841   0947 00 00 
0842   0949 E7            pop d
0843   094A FD 3E         mov [d], bl
0844   094C             ; max_handle++; 
0845   094C 3B 82 21      mov d, st_fopen_max_handle ; static max_handle
0846   094F 2A            mov b, [d]
0847   0950 38 00 00      mov c, 0
0848   0953 11            mov a, b
0849   0954 FD 77         inc b
0850   0956 3B 82 21      mov d, st_fopen_max_handle ; static max_handle
0851   0959 FD 43         mov [d], b
0852   095B 27            mov b, a
0853   095C F9            leave
0854   095D 09            ret
0855   095E             
0856   095E             fclose:
0857   095E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0858   0961             ; free(sizeof(FILE)); 
0859   0961             ; --- START FUNCTION CALL
0860   0961 26 04 01      mov b, 260
0861   0964 FD AB         swp b
0862   0966 D8            push b
0863   0967 07 B8 08      call free
0864   096A 51 02 00      add sp, 2
0865   096D             ; --- END FUNCTION CALL
0866   096D F9            leave
0867   096E 09            ret
0868   096F             
0869   096F             printf:
0870   096F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0871   0972             ; char *p, *format_p; 
0872   0972 52 02 00      sub sp, 2
0873   0975 52 02 00      sub sp, 2
0874   0978             ; format_p = format; 
0875   0978 FA FD FF      lea d, [bp + -3] ; $format_p
0876   097B DA            push d
0877   097C FA 05 00      lea d, [bp + 5] ; $format
0878   097F 2A            mov b, [d]
0879   0980 38 00 00      mov c, 0
0880   0983 E7            pop d
0881   0984 FD 43         mov [d], b
0882   0986             ; p = &format + 2; 
0883   0986 FA FF FF      lea d, [bp + -1] ; $p
0884   0989 DA            push d
0885   098A FA 05 00      lea d, [bp + 5] ; $format
0886   098D 2D            mov b, d
0887   098E             ; --- START TERMS
0888   098E D7            push a
0889   098F 11            mov a, b
0890   0990 FD 2E 02 00   mov32 cb, $00000002
0890   0994 00 00 
0891   0996 56            add b, a
0892   0997 E4            pop a
0893   0998             ; --- END TERMS
0894   0998 E7            pop d
0895   0999 FD 43         mov [d], b
0896   099B             ; for(;;){ 
0897   099B             _for10_init:
0898   099B             _for10_cond:
0899   099B             _for10_block:
0900   099B             ; if(!*format_p) break; 
0901   099B             _if11_cond:
0902   099B FA FD FF      lea d, [bp + -3] ; $format_p
0903   099E 2A            mov b, [d]
0904   099F 38 00 00      mov c, 0
0905   09A2 74            mov d, b
0906   09A3 32            mov bl, [d]
0907   09A4 A7 00         mov bh, 0
0908   09A6 38 00 00      mov c, 0
0909   09A9 C0 00 00      cmp b, 0
0910   09AC FD 71         seq ; !
0911   09AE C0 00 00      cmp b, 0
0912   09B1 C6 BA 09      je _if11_else
0913   09B4             _if11_true:
0914   09B4             ; break; 
0915   09B4 0A 4B 0C      jmp _for10_exit ; for break
0916   09B7 0A 48 0C      jmp _if11_exit
0917   09BA             _if11_else:
0918   09BA             ; if(*format_p == '%'){ 
0919   09BA             _if12_cond:
0920   09BA FA FD FF      lea d, [bp + -3] ; $format_p
0921   09BD 2A            mov b, [d]
0922   09BE 38 00 00      mov c, 0
0923   09C1 74            mov d, b
0924   09C2 32            mov bl, [d]
0925   09C3 A7 00         mov bh, 0
0926   09C5 38 00 00      mov c, 0
0927   09C8             ; --- START RELATIONAL
0928   09C8 D7            push a
0929   09C9 11            mov a, b
0930   09CA FD 2E 25 00   mov32 cb, $00000025
0930   09CE 00 00 
0931   09D0 B0            cmp a, b
0932   09D1 FD 71         seq ; ==
0933   09D3 E4            pop a
0934   09D4             ; --- END RELATIONAL
0935   09D4 C0 00 00      cmp b, 0
0936   09D7 C6 23 0C      je _if12_else
0937   09DA             _if12_true:
0938   09DA             ; format_p++; 
0939   09DA FA FD FF      lea d, [bp + -3] ; $format_p
0940   09DD 2A            mov b, [d]
0941   09DE 38 00 00      mov c, 0
0942   09E1 FD 77         inc b
0943   09E3 FA FD FF      lea d, [bp + -3] ; $format_p
0944   09E6 FD 3E         mov [d], bl
0945   09E8 FD 7D         dec b
0946   09EA             ; switch(*format_p){ 
0947   09EA             _switch13_expr:
0948   09EA FA FD FF      lea d, [bp + -3] ; $format_p
0949   09ED 2A            mov b, [d]
0950   09EE 38 00 00      mov c, 0
0951   09F1 74            mov d, b
0952   09F2 32            mov bl, [d]
0953   09F3 A7 00         mov bh, 0
0954   09F5 38 00 00      mov c, 0
0955   09F8             _switch13_comparisons:
0956   09F8 C1 6C         cmp bl, $6c
0957   09FA C6 26 0A      je _switch13_case0
0958   09FD C1 4C         cmp bl, $4c
0959   09FF C6 26 0A      je _switch13_case1
0960   0A02 C1 64         cmp bl, $64
0961   0A04 C6 36 0B      je _switch13_case2
0962   0A07 C1 69         cmp bl, $69
0963   0A09 C6 36 0B      je _switch13_case3
0964   0A0C C1 75         cmp bl, $75
0965   0A0E C6 66 0B      je _switch13_case4
0966   0A11 C1 78         cmp bl, $78
0967   0A13 C6 96 0B      je _switch13_case5
0968   0A16 C1 63         cmp bl, $63
0969   0A18 C6 BA 0B      je _switch13_case6
0970   0A1B C1 73         cmp bl, $73
0971   0A1D C6 DF 0B      je _switch13_case7
0972   0A20 0A 04 0C      jmp _switch13_default
0973   0A23 0A 10 0C      jmp _switch13_exit
0974   0A26             _switch13_case0:
0975   0A26             _switch13_case1:
0976   0A26             ; format_p++; 
0977   0A26 FA FD FF      lea d, [bp + -3] ; $format_p
0978   0A29 2A            mov b, [d]
0979   0A2A 38 00 00      mov c, 0
0980   0A2D FD 77         inc b
0981   0A2F FA FD FF      lea d, [bp + -3] ; $format_p
0982   0A32 FD 3E         mov [d], bl
0983   0A34 FD 7D         dec b
0984   0A36             ; if(*format_p == 'd' || *format_p == 'i') 
0985   0A36             _if14_cond:
0986   0A36 FA FD FF      lea d, [bp + -3] ; $format_p
0987   0A39 2A            mov b, [d]
0988   0A3A 38 00 00      mov c, 0
0989   0A3D 74            mov d, b
0990   0A3E 32            mov bl, [d]
0991   0A3F A7 00         mov bh, 0
0992   0A41 38 00 00      mov c, 0
0993   0A44             ; --- START RELATIONAL
0994   0A44 D7            push a
0995   0A45 11            mov a, b
0996   0A46 FD 2E 64 00   mov32 cb, $00000064
0996   0A4A 00 00 
0997   0A4C B0            cmp a, b
0998   0A4D FD 71         seq ; ==
0999   0A4F E4            pop a
1000   0A50             ; --- END RELATIONAL
1001   0A50             ; --- START LOGICAL OR
1002   0A50 D7            push a
1003   0A51 11            mov a, b
1004   0A52 FA FD FF      lea d, [bp + -3] ; $format_p
1005   0A55 2A            mov b, [d]
1006   0A56 38 00 00      mov c, 0
1007   0A59 74            mov d, b
1008   0A5A 32            mov bl, [d]
1009   0A5B A7 00         mov bh, 0
1010   0A5D 38 00 00      mov c, 0
1011   0A60             ; --- START RELATIONAL
1012   0A60 D7            push a
1013   0A61 11            mov a, b
1014   0A62 FD 2E 69 00   mov32 cb, $00000069
1014   0A66 00 00 
1015   0A68 B0            cmp a, b
1016   0A69 FD 71         seq ; ==
1017   0A6B E4            pop a
1018   0A6C             ; --- END RELATIONAL
1019   0A6C FD A8         sor a, b ; ||
1020   0A6E E4            pop a
1021   0A6F             ; --- END LOGICAL OR
1022   0A6F C0 00 00      cmp b, 0
1023   0A72 C6 93 0A      je _if14_else
1024   0A75             _if14_true:
1025   0A75             ; print_signed_long(*(long *)p); 
1026   0A75             ; --- START FUNCTION CALL
1027   0A75 FA FF FF      lea d, [bp + -1] ; $p
1028   0A78 2A            mov b, [d]
1029   0A79 38 00 00      mov c, 0
1030   0A7C 74            mov d, b
1031   0A7D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1032   0A80 FD 39         mov c, b ; And place it into C
1033   0A82 2A            mov b, [d] ; Lower Word in B
1034   0A83 12            mov a, c
1035   0A84 FD AA         swp a
1036   0A86 D7            push a
1037   0A87 FD AB         swp b
1038   0A89 D8            push b
1039   0A8A 07 1D 16      call print_signed_long
1040   0A8D 51 04 00      add sp, 4
1041   0A90             ; --- END FUNCTION CALL
1042   0A90 0A 1B 0B      jmp _if14_exit
1043   0A93             _if14_else:
1044   0A93             ; if(*format_p == 'u') 
1045   0A93             _if15_cond:
1046   0A93 FA FD FF      lea d, [bp + -3] ; $format_p
1047   0A96 2A            mov b, [d]
1048   0A97 38 00 00      mov c, 0
1049   0A9A 74            mov d, b
1050   0A9B 32            mov bl, [d]
1051   0A9C A7 00         mov bh, 0
1052   0A9E 38 00 00      mov c, 0
1053   0AA1             ; --- START RELATIONAL
1054   0AA1 D7            push a
1055   0AA2 11            mov a, b
1056   0AA3 FD 2E 75 00   mov32 cb, $00000075
1056   0AA7 00 00 
1057   0AA9 B0            cmp a, b
1058   0AAA FD 71         seq ; ==
1059   0AAC E4            pop a
1060   0AAD             ; --- END RELATIONAL
1061   0AAD C0 00 00      cmp b, 0
1062   0AB0 C6 D1 0A      je _if15_else
1063   0AB3             _if15_true:
1064   0AB3             ; print_unsigned_long(*(unsigned long *)p); 
1065   0AB3             ; --- START FUNCTION CALL
1066   0AB3 FA FF FF      lea d, [bp + -1] ; $p
1067   0AB6 2A            mov b, [d]
1068   0AB7 38 00 00      mov c, 0
1069   0ABA 74            mov d, b
1070   0ABB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1071   0ABE FD 39         mov c, b ; And place it into C
1072   0AC0 2A            mov b, [d] ; Lower Word in B
1073   0AC1 12            mov a, c
1074   0AC2 FD AA         swp a
1075   0AC4 D7            push a
1076   0AC5 FD AB         swp b
1077   0AC7 D8            push b
1078   0AC8 07 8C 17      call print_unsigned_long
1079   0ACB 51 04 00      add sp, 4
1080   0ACE             ; --- END FUNCTION CALL
1081   0ACE 0A 1B 0B      jmp _if15_exit
1082   0AD1             _if15_else:
1083   0AD1             ; if(*format_p == 'x') 
1084   0AD1             _if16_cond:
1085   0AD1 FA FD FF      lea d, [bp + -3] ; $format_p
1086   0AD4 2A            mov b, [d]
1087   0AD5 38 00 00      mov c, 0
1088   0AD8 74            mov d, b
1089   0AD9 32            mov bl, [d]
1090   0ADA A7 00         mov bh, 0
1091   0ADC 38 00 00      mov c, 0
1092   0ADF             ; --- START RELATIONAL
1093   0ADF D7            push a
1094   0AE0 11            mov a, b
1095   0AE1 FD 2E 78 00   mov32 cb, $00000078
1095   0AE5 00 00 
1096   0AE7 B0            cmp a, b
1097   0AE8 FD 71         seq ; ==
1098   0AEA E4            pop a
1099   0AEB             ; --- END RELATIONAL
1100   0AEB C0 00 00      cmp b, 0
1101   0AEE C6 0F 0B      je _if16_else
1102   0AF1             _if16_true:
1103   0AF1             ; printx32(*(long int *)p); 
1104   0AF1             ; --- START FUNCTION CALL
1105   0AF1 FA FF FF      lea d, [bp + -1] ; $p
1106   0AF4 2A            mov b, [d]
1107   0AF5 38 00 00      mov c, 0
1108   0AF8 74            mov d, b
1109   0AF9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1110   0AFC FD 39         mov c, b ; And place it into C
1111   0AFE 2A            mov b, [d] ; Lower Word in B
1112   0AFF 12            mov a, c
1113   0B00 FD AA         swp a
1114   0B02 D7            push a
1115   0B03 FD AB         swp b
1116   0B05 D8            push b
1117   0B06 07 F0 12      call printx32
1118   0B09 51 04 00      add sp, 4
1119   0B0C             ; --- END FUNCTION CALL
1120   0B0C 0A 1B 0B      jmp _if16_exit
1121   0B0F             _if16_else:
1122   0B0F             ; err("Unexpected format in printf."); 
1123   0B0F             ; --- START FUNCTION CALL
1124   0B0F 26 84 21      mov b, _s0 ; "Unexpected format in printf."
1125   0B12 FD AB         swp b
1126   0B14 D8            push b
1127   0B15 07 DB 12      call err
1128   0B18 51 02 00      add sp, 2
1129   0B1B             ; --- END FUNCTION CALL
1130   0B1B             _if16_exit:
1131   0B1B             _if15_exit:
1132   0B1B             _if14_exit:
1133   0B1B             ; p = p + 4; 
1134   0B1B FA FF FF      lea d, [bp + -1] ; $p
1135   0B1E DA            push d
1136   0B1F FA FF FF      lea d, [bp + -1] ; $p
1137   0B22 2A            mov b, [d]
1138   0B23 38 00 00      mov c, 0
1139   0B26             ; --- START TERMS
1140   0B26 D7            push a
1141   0B27 11            mov a, b
1142   0B28 FD 2E 04 00   mov32 cb, $00000004
1142   0B2C 00 00 
1143   0B2E 56            add b, a
1144   0B2F E4            pop a
1145   0B30             ; --- END TERMS
1146   0B30 E7            pop d
1147   0B31 FD 43         mov [d], b
1148   0B33             ; break; 
1149   0B33 0A 10 0C      jmp _switch13_exit ; case break
1150   0B36             _switch13_case2:
1151   0B36             _switch13_case3:
1152   0B36             ; print_signed(*(int*)p); 
1153   0B36             ; --- START FUNCTION CALL
1154   0B36 FA FF FF      lea d, [bp + -1] ; $p
1155   0B39 2A            mov b, [d]
1156   0B3A 38 00 00      mov c, 0
1157   0B3D 74            mov d, b
1158   0B3E 2A            mov b, [d]
1159   0B3F 38 00 00      mov c, 0
1160   0B42 FD AB         swp b
1161   0B44 D8            push b
1162   0B45 07 E4 14      call print_signed
1163   0B48 51 02 00      add sp, 2
1164   0B4B             ; --- END FUNCTION CALL
1165   0B4B             ; p = p + 2; 
1166   0B4B FA FF FF      lea d, [bp + -1] ; $p
1167   0B4E DA            push d
1168   0B4F FA FF FF      lea d, [bp + -1] ; $p
1169   0B52 2A            mov b, [d]
1170   0B53 38 00 00      mov c, 0
1171   0B56             ; --- START TERMS
1172   0B56 D7            push a
1173   0B57 11            mov a, b
1174   0B58 FD 2E 02 00   mov32 cb, $00000002
1174   0B5C 00 00 
1175   0B5E 56            add b, a
1176   0B5F E4            pop a
1177   0B60             ; --- END TERMS
1178   0B60 E7            pop d
1179   0B61 FD 43         mov [d], b
1180   0B63             ; break; 
1181   0B63 0A 10 0C      jmp _switch13_exit ; case break
1182   0B66             _switch13_case4:
1183   0B66             ; print_unsigned(*(unsigned int*)p); 
1184   0B66             ; --- START FUNCTION CALL
1185   0B66 FA FF FF      lea d, [bp + -1] ; $p
1186   0B69 2A            mov b, [d]
1187   0B6A 38 00 00      mov c, 0
1188   0B6D 74            mov d, b
1189   0B6E 2A            mov b, [d]
1190   0B6F 38 00 00      mov c, 0
1191   0B72 FD AB         swp b
1192   0B74 D8            push b
1193   0B75 07 00 1A      call print_unsigned
1194   0B78 51 02 00      add sp, 2
1195   0B7B             ; --- END FUNCTION CALL
1196   0B7B             ; p = p + 2; 
1197   0B7B FA FF FF      lea d, [bp + -1] ; $p
1198   0B7E DA            push d
1199   0B7F FA FF FF      lea d, [bp + -1] ; $p
1200   0B82 2A            mov b, [d]
1201   0B83 38 00 00      mov c, 0
1202   0B86             ; --- START TERMS
1203   0B86 D7            push a
1204   0B87 11            mov a, b
1205   0B88 FD 2E 02 00   mov32 cb, $00000002
1205   0B8C 00 00 
1206   0B8E 56            add b, a
1207   0B8F E4            pop a
1208   0B90             ; --- END TERMS
1209   0B90 E7            pop d
1210   0B91 FD 43         mov [d], b
1211   0B93             ; break; 
1212   0B93 0A 10 0C      jmp _switch13_exit ; case break
1213   0B96             _switch13_case5:
1214   0B96             
1215   0B96             ; --- BEGIN INLINE ASM SEGMENT
1216   0B96 FA FF FF      lea d, [bp + -1] ; $p
1217   0B99 FD 2A         mov d, [d]
1218   0B9B 2A            mov b, [d]
1219   0B9C 07 79 20      call print_u16x
1220   0B9F             ; --- END INLINE ASM SEGMENT
1221   0B9F             
1222   0B9F             ; p = p + 2; 
1223   0B9F FA FF FF      lea d, [bp + -1] ; $p
1224   0BA2 DA            push d
1225   0BA3 FA FF FF      lea d, [bp + -1] ; $p
1226   0BA6 2A            mov b, [d]
1227   0BA7 38 00 00      mov c, 0
1228   0BAA             ; --- START TERMS
1229   0BAA D7            push a
1230   0BAB 11            mov a, b
1231   0BAC FD 2E 02 00   mov32 cb, $00000002
1231   0BB0 00 00 
1232   0BB2 56            add b, a
1233   0BB3 E4            pop a
1234   0BB4             ; --- END TERMS
1235   0BB4 E7            pop d
1236   0BB5 FD 43         mov [d], b
1237   0BB7             ; break; 
1238   0BB7 0A 10 0C      jmp _switch13_exit ; case break
1239   0BBA             _switch13_case6:
1240   0BBA             
1241   0BBA             ; --- BEGIN INLINE ASM SEGMENT
1242   0BBA FA FF FF      lea d, [bp + -1] ; $p
1243   0BBD FD 2A         mov d, [d]
1244   0BBF 1E            mov al, [d]
1245   0BC0 23            mov ah, al
1246   0BC1 07 D7 1E      call _putchar
1247   0BC4             ; --- END INLINE ASM SEGMENT
1248   0BC4             
1249   0BC4             ; p = p + 1; 
1250   0BC4 FA FF FF      lea d, [bp + -1] ; $p
1251   0BC7 DA            push d
1252   0BC8 FA FF FF      lea d, [bp + -1] ; $p
1253   0BCB 2A            mov b, [d]
1254   0BCC 38 00 00      mov c, 0
1255   0BCF             ; --- START TERMS
1256   0BCF D7            push a
1257   0BD0 11            mov a, b
1258   0BD1 FD 2E 01 00   mov32 cb, $00000001
1258   0BD5 00 00 
1259   0BD7 56            add b, a
1260   0BD8 E4            pop a
1261   0BD9             ; --- END TERMS
1262   0BD9 E7            pop d
1263   0BDA FD 43         mov [d], b
1264   0BDC             ; break; 
1265   0BDC 0A 10 0C      jmp _switch13_exit ; case break
1266   0BDF             _switch13_case7:
1267   0BDF             
1268   0BDF             ; --- BEGIN INLINE ASM SEGMENT
1269   0BDF FA FF FF      lea d, [bp + -1] ; $p
1270   0BE2 FD 2A         mov d, [d]
1271   0BE4 FD 2A         mov d, [d]
1272   0BE6 07 21 20      call _puts
1273   0BE9             ; --- END INLINE ASM SEGMENT
1274   0BE9             
1275   0BE9             ; p = p + 2; 
1276   0BE9 FA FF FF      lea d, [bp + -1] ; $p
1277   0BEC DA            push d
1278   0BED FA FF FF      lea d, [bp + -1] ; $p
1279   0BF0 2A            mov b, [d]
1280   0BF1 38 00 00      mov c, 0
1281   0BF4             ; --- START TERMS
1282   0BF4 D7            push a
1283   0BF5 11            mov a, b
1284   0BF6 FD 2E 02 00   mov32 cb, $00000002
1284   0BFA 00 00 
1285   0BFC 56            add b, a
1286   0BFD E4            pop a
1287   0BFE             ; --- END TERMS
1288   0BFE E7            pop d
1289   0BFF FD 43         mov [d], b
1290   0C01             ; break; 
1291   0C01 0A 10 0C      jmp _switch13_exit ; case break
1292   0C04             _switch13_default:
1293   0C04             ; print("Error: Unknown argument type.\n"); 
1294   0C04             ; --- START FUNCTION CALL
1295   0C04 26 A1 21      mov b, _s1 ; "Error: Unknown argument type.\n"
1296   0C07 FD AB         swp b
1297   0C09 D8            push b
1298   0C0A 07 16 1D      call print
1299   0C0D 51 02 00      add sp, 2
1300   0C10             ; --- END FUNCTION CALL
1301   0C10             _switch13_exit:
1302   0C10             ; format_p++; 
1303   0C10 FA FD FF      lea d, [bp + -3] ; $format_p
1304   0C13 2A            mov b, [d]
1305   0C14 38 00 00      mov c, 0
1306   0C17 FD 77         inc b
1307   0C19 FA FD FF      lea d, [bp + -3] ; $format_p
1308   0C1C FD 3E         mov [d], bl
1309   0C1E FD 7D         dec b
1310   0C20 0A 48 0C      jmp _if12_exit
1311   0C23             _if12_else:
1312   0C23             ; putchar(*format_p); 
1313   0C23             ; --- START FUNCTION CALL
1314   0C23 FA FD FF      lea d, [bp + -3] ; $format_p
1315   0C26 2A            mov b, [d]
1316   0C27 38 00 00      mov c, 0
1317   0C2A 74            mov d, b
1318   0C2B 32            mov bl, [d]
1319   0C2C A7 00         mov bh, 0
1320   0C2E 38 00 00      mov c, 0
1321   0C31 DD            push bl
1322   0C32 07 C8 1C      call putchar
1323   0C35 51 01 00      add sp, 1
1324   0C38             ; --- END FUNCTION CALL
1325   0C38             ; format_p++; 
1326   0C38 FA FD FF      lea d, [bp + -3] ; $format_p
1327   0C3B 2A            mov b, [d]
1328   0C3C 38 00 00      mov c, 0
1329   0C3F FD 77         inc b
1330   0C41 FA FD FF      lea d, [bp + -3] ; $format_p
1331   0C44 FD 3E         mov [d], bl
1332   0C46 FD 7D         dec b
1333   0C48             _if12_exit:
1334   0C48             _if11_exit:
1335   0C48             _for10_update:
1336   0C48 0A 9B 09      jmp _for10_cond
1337   0C4B             _for10_exit:
1338   0C4B F9            leave
1339   0C4C 09            ret
1340   0C4D             
1341   0C4D             scanf:
1342   0C4D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1343   0C50             ; char *p, *format_p; 
1344   0C50 52 02 00      sub sp, 2
1345   0C53 52 02 00      sub sp, 2
1346   0C56             ; char c; 
1347   0C56 52 01 00      sub sp, 1
1348   0C59             ; int i; 
1349   0C59 52 02 00      sub sp, 2
1350   0C5C             ; char input_string[  512                    ]; 
1351   0C5C 52 00 02      sub sp, 512
1352   0C5F             ; format_p = format; 
1353   0C5F FA FD FF      lea d, [bp + -3] ; $format_p
1354   0C62 DA            push d
1355   0C63 FA 05 00      lea d, [bp + 5] ; $format
1356   0C66 2A            mov b, [d]
1357   0C67 38 00 00      mov c, 0
1358   0C6A E7            pop d
1359   0C6B FD 43         mov [d], b
1360   0C6D             ; p = &format + 2; 
1361   0C6D FA FF FF      lea d, [bp + -1] ; $p
1362   0C70 DA            push d
1363   0C71 FA 05 00      lea d, [bp + 5] ; $format
1364   0C74 2D            mov b, d
1365   0C75             ; --- START TERMS
1366   0C75 D7            push a
1367   0C76 11            mov a, b
1368   0C77 FD 2E 02 00   mov32 cb, $00000002
1368   0C7B 00 00 
1369   0C7D 56            add b, a
1370   0C7E E4            pop a
1371   0C7F             ; --- END TERMS
1372   0C7F E7            pop d
1373   0C80 FD 43         mov [d], b
1374   0C82             ; for(;;){ 
1375   0C82             _for17_init:
1376   0C82             _for17_cond:
1377   0C82             _for17_block:
1378   0C82             ; if(!*format_p) break; 
1379   0C82             _if18_cond:
1380   0C82 FA FD FF      lea d, [bp + -3] ; $format_p
1381   0C85 2A            mov b, [d]
1382   0C86 38 00 00      mov c, 0
1383   0C89 74            mov d, b
1384   0C8A 32            mov bl, [d]
1385   0C8B A7 00         mov bh, 0
1386   0C8D 38 00 00      mov c, 0
1387   0C90 C0 00 00      cmp b, 0
1388   0C93 FD 71         seq ; !
1389   0C95 C0 00 00      cmp b, 0
1390   0C98 C6 A1 0C      je _if18_else
1391   0C9B             _if18_true:
1392   0C9B             ; break; 
1393   0C9B 0A 29 0F      jmp _for17_exit ; for break
1394   0C9E 0A 26 0F      jmp _if18_exit
1395   0CA1             _if18_else:
1396   0CA1             ; if(*format_p == '%'){ 
1397   0CA1             _if19_cond:
1398   0CA1 FA FD FF      lea d, [bp + -3] ; $format_p
1399   0CA4 2A            mov b, [d]
1400   0CA5 38 00 00      mov c, 0
1401   0CA8 74            mov d, b
1402   0CA9 32            mov bl, [d]
1403   0CAA A7 00         mov bh, 0
1404   0CAC 38 00 00      mov c, 0
1405   0CAF             ; --- START RELATIONAL
1406   0CAF D7            push a
1407   0CB0 11            mov a, b
1408   0CB1 FD 2E 25 00   mov32 cb, $00000025
1408   0CB5 00 00 
1409   0CB7 B0            cmp a, b
1410   0CB8 FD 71         seq ; ==
1411   0CBA E4            pop a
1412   0CBB             ; --- END RELATIONAL
1413   0CBB C0 00 00      cmp b, 0
1414   0CBE C6 01 0F      je _if19_else
1415   0CC1             _if19_true:
1416   0CC1             ; format_p++; 
1417   0CC1 FA FD FF      lea d, [bp + -3] ; $format_p
1418   0CC4 2A            mov b, [d]
1419   0CC5 38 00 00      mov c, 0
1420   0CC8 FD 77         inc b
1421   0CCA FA FD FF      lea d, [bp + -3] ; $format_p
1422   0CCD FD 3E         mov [d], bl
1423   0CCF FD 7D         dec b
1424   0CD1             ; switch(*format_p){ 
1425   0CD1             _switch20_expr:
1426   0CD1 FA FD FF      lea d, [bp + -3] ; $format_p
1427   0CD4 2A            mov b, [d]
1428   0CD5 38 00 00      mov c, 0
1429   0CD8 74            mov d, b
1430   0CD9 32            mov bl, [d]
1431   0CDA A7 00         mov bh, 0
1432   0CDC 38 00 00      mov c, 0
1433   0CDF             _switch20_comparisons:
1434   0CDF C1 6C         cmp bl, $6c
1435   0CE1 C6 0D 0D      je _switch20_case0
1436   0CE4 C1 4C         cmp bl, $4c
1437   0CE6 C6 0D 0D      je _switch20_case1
1438   0CE9 C1 64         cmp bl, $64
1439   0CEB C6 CC 0D      je _switch20_case2
1440   0CEE C1 69         cmp bl, $69
1441   0CF0 C6 CC 0D      je _switch20_case3
1442   0CF3 C1 75         cmp bl, $75
1443   0CF5 C6 05 0E      je _switch20_case4
1444   0CF8 C1 78         cmp bl, $78
1445   0CFA C6 3E 0E      je _switch20_case5
1446   0CFD C1 63         cmp bl, $63
1447   0CFF C6 59 0E      je _switch20_case6
1448   0D02 C1 73         cmp bl, $73
1449   0D04 C6 9B 0E      je _switch20_case7
1450   0D07 0A E2 0E      jmp _switch20_default
1451   0D0A 0A EE 0E      jmp _switch20_exit
1452   0D0D             _switch20_case0:
1453   0D0D             _switch20_case1:
1454   0D0D             ; format_p++; 
1455   0D0D FA FD FF      lea d, [bp + -3] ; $format_p
1456   0D10 2A            mov b, [d]
1457   0D11 38 00 00      mov c, 0
1458   0D14 FD 77         inc b
1459   0D16 FA FD FF      lea d, [bp + -3] ; $format_p
1460   0D19 FD 3E         mov [d], bl
1461   0D1B FD 7D         dec b
1462   0D1D             ; if(*format_p == 'd' || *format_p == 'i'); 
1463   0D1D             _if21_cond:
1464   0D1D FA FD FF      lea d, [bp + -3] ; $format_p
1465   0D20 2A            mov b, [d]
1466   0D21 38 00 00      mov c, 0
1467   0D24 74            mov d, b
1468   0D25 32            mov bl, [d]
1469   0D26 A7 00         mov bh, 0
1470   0D28 38 00 00      mov c, 0
1471   0D2B             ; --- START RELATIONAL
1472   0D2B D7            push a
1473   0D2C 11            mov a, b
1474   0D2D FD 2E 64 00   mov32 cb, $00000064
1474   0D31 00 00 
1475   0D33 B0            cmp a, b
1476   0D34 FD 71         seq ; ==
1477   0D36 E4            pop a
1478   0D37             ; --- END RELATIONAL
1479   0D37             ; --- START LOGICAL OR
1480   0D37 D7            push a
1481   0D38 11            mov a, b
1482   0D39 FA FD FF      lea d, [bp + -3] ; $format_p
1483   0D3C 2A            mov b, [d]
1484   0D3D 38 00 00      mov c, 0
1485   0D40 74            mov d, b
1486   0D41 32            mov bl, [d]
1487   0D42 A7 00         mov bh, 0
1488   0D44 38 00 00      mov c, 0
1489   0D47             ; --- START RELATIONAL
1490   0D47 D7            push a
1491   0D48 11            mov a, b
1492   0D49 FD 2E 69 00   mov32 cb, $00000069
1492   0D4D 00 00 
1493   0D4F B0            cmp a, b
1494   0D50 FD 71         seq ; ==
1495   0D52 E4            pop a
1496   0D53             ; --- END RELATIONAL
1497   0D53 FD A8         sor a, b ; ||
1498   0D55 E4            pop a
1499   0D56             ; --- END LOGICAL OR
1500   0D56 C0 00 00      cmp b, 0
1501   0D59 C6 5F 0D      je _if21_else
1502   0D5C             _if21_true:
1503   0D5C             ; ; 
1504   0D5C 0A B1 0D      jmp _if21_exit
1505   0D5F             _if21_else:
1506   0D5F             ; if(*format_p == 'u'); 
1507   0D5F             _if22_cond:
1508   0D5F FA FD FF      lea d, [bp + -3] ; $format_p
1509   0D62 2A            mov b, [d]
1510   0D63 38 00 00      mov c, 0
1511   0D66 74            mov d, b
1512   0D67 32            mov bl, [d]
1513   0D68 A7 00         mov bh, 0
1514   0D6A 38 00 00      mov c, 0
1515   0D6D             ; --- START RELATIONAL
1516   0D6D D7            push a
1517   0D6E 11            mov a, b
1518   0D6F FD 2E 75 00   mov32 cb, $00000075
1518   0D73 00 00 
1519   0D75 B0            cmp a, b
1520   0D76 FD 71         seq ; ==
1521   0D78 E4            pop a
1522   0D79             ; --- END RELATIONAL
1523   0D79 C0 00 00      cmp b, 0
1524   0D7C C6 82 0D      je _if22_else
1525   0D7F             _if22_true:
1526   0D7F             ; ; 
1527   0D7F 0A B1 0D      jmp _if22_exit
1528   0D82             _if22_else:
1529   0D82             ; if(*format_p == 'x'); 
1530   0D82             _if23_cond:
1531   0D82 FA FD FF      lea d, [bp + -3] ; $format_p
1532   0D85 2A            mov b, [d]
1533   0D86 38 00 00      mov c, 0
1534   0D89 74            mov d, b
1535   0D8A 32            mov bl, [d]
1536   0D8B A7 00         mov bh, 0
1537   0D8D 38 00 00      mov c, 0
1538   0D90             ; --- START RELATIONAL
1539   0D90 D7            push a
1540   0D91 11            mov a, b
1541   0D92 FD 2E 78 00   mov32 cb, $00000078
1541   0D96 00 00 
1542   0D98 B0            cmp a, b
1543   0D99 FD 71         seq ; ==
1544   0D9B E4            pop a
1545   0D9C             ; --- END RELATIONAL
1546   0D9C C0 00 00      cmp b, 0
1547   0D9F C6 A5 0D      je _if23_else
1548   0DA2             _if23_true:
1549   0DA2             ; ; 
1550   0DA2 0A B1 0D      jmp _if23_exit
1551   0DA5             _if23_else:
1552   0DA5             ; err("Unexpected format in printf."); 
1553   0DA5             ; --- START FUNCTION CALL
1554   0DA5 26 84 21      mov b, _s0 ; "Unexpected format in printf."
1555   0DA8 FD AB         swp b
1556   0DAA D8            push b
1557   0DAB 07 DB 12      call err
1558   0DAE 51 02 00      add sp, 2
1559   0DB1             ; --- END FUNCTION CALL
1560   0DB1             _if23_exit:
1561   0DB1             _if22_exit:
1562   0DB1             _if21_exit:
1563   0DB1             ; p = p + 4; 
1564   0DB1 FA FF FF      lea d, [bp + -1] ; $p
1565   0DB4 DA            push d
1566   0DB5 FA FF FF      lea d, [bp + -1] ; $p
1567   0DB8 2A            mov b, [d]
1568   0DB9 38 00 00      mov c, 0
1569   0DBC             ; --- START TERMS
1570   0DBC D7            push a
1571   0DBD 11            mov a, b
1572   0DBE FD 2E 04 00   mov32 cb, $00000004
1572   0DC2 00 00 
1573   0DC4 56            add b, a
1574   0DC5 E4            pop a
1575   0DC6             ; --- END TERMS
1576   0DC6 E7            pop d
1577   0DC7 FD 43         mov [d], b
1578   0DC9             ; break; 
1579   0DC9 0A EE 0E      jmp _switch20_exit ; case break
1580   0DCC             _switch20_case2:
1581   0DCC             _switch20_case3:
1582   0DCC             ; i = scann(); 
1583   0DCC FA FA FF      lea d, [bp + -6] ; $i
1584   0DCF DA            push d
1585   0DD0             ; --- START FUNCTION CALL
1586   0DD0 07 EE 1C      call scann
1587   0DD3 E7            pop d
1588   0DD4 FD 43         mov [d], b
1589   0DD6             ; **(int **)p = i; 
1590   0DD6 FA FF FF      lea d, [bp + -1] ; $p
1591   0DD9 2A            mov b, [d]
1592   0DDA 38 00 00      mov c, 0
1593   0DDD 74            mov d, b
1594   0DDE 2A            mov b, [d]
1595   0DDF D8            push b
1596   0DE0 FA FA FF      lea d, [bp + -6] ; $i
1597   0DE3 2A            mov b, [d]
1598   0DE4 38 00 00      mov c, 0
1599   0DE7 E7            pop d
1600   0DE8 FD 43         mov [d], b
1601   0DEA             ; p = p + 2; 
1602   0DEA FA FF FF      lea d, [bp + -1] ; $p
1603   0DED DA            push d
1604   0DEE FA FF FF      lea d, [bp + -1] ; $p
1605   0DF1 2A            mov b, [d]
1606   0DF2 38 00 00      mov c, 0
1607   0DF5             ; --- START TERMS
1608   0DF5 D7            push a
1609   0DF6 11            mov a, b
1610   0DF7 FD 2E 02 00   mov32 cb, $00000002
1610   0DFB 00 00 
1611   0DFD 56            add b, a
1612   0DFE E4            pop a
1613   0DFF             ; --- END TERMS
1614   0DFF E7            pop d
1615   0E00 FD 43         mov [d], b
1616   0E02             ; break; 
1617   0E02 0A EE 0E      jmp _switch20_exit ; case break
1618   0E05             _switch20_case4:
1619   0E05             ; i = scann(); 
1620   0E05 FA FA FF      lea d, [bp + -6] ; $i
1621   0E08 DA            push d
1622   0E09             ; --- START FUNCTION CALL
1623   0E09 07 EE 1C      call scann
1624   0E0C E7            pop d
1625   0E0D FD 43         mov [d], b
1626   0E0F             ; **(int **)p = i; 
1627   0E0F FA FF FF      lea d, [bp + -1] ; $p
1628   0E12 2A            mov b, [d]
1629   0E13 38 00 00      mov c, 0
1630   0E16 74            mov d, b
1631   0E17 2A            mov b, [d]
1632   0E18 D8            push b
1633   0E19 FA FA FF      lea d, [bp + -6] ; $i
1634   0E1C 2A            mov b, [d]
1635   0E1D 38 00 00      mov c, 0
1636   0E20 E7            pop d
1637   0E21 FD 43         mov [d], b
1638   0E23             ; p = p + 2; 
1639   0E23 FA FF FF      lea d, [bp + -1] ; $p
1640   0E26 DA            push d
1641   0E27 FA FF FF      lea d, [bp + -1] ; $p
1642   0E2A 2A            mov b, [d]
1643   0E2B 38 00 00      mov c, 0
1644   0E2E             ; --- START TERMS
1645   0E2E D7            push a
1646   0E2F 11            mov a, b
1647   0E30 FD 2E 02 00   mov32 cb, $00000002
1647   0E34 00 00 
1648   0E36 56            add b, a
1649   0E37 E4            pop a
1650   0E38             ; --- END TERMS
1651   0E38 E7            pop d
1652   0E39 FD 43         mov [d], b
1653   0E3B             ; break; 
1654   0E3B 0A EE 0E      jmp _switch20_exit ; case break
1655   0E3E             _switch20_case5:
1656   0E3E             ; p = p + 2; 
1657   0E3E FA FF FF      lea d, [bp + -1] ; $p
1658   0E41 DA            push d
1659   0E42 FA FF FF      lea d, [bp + -1] ; $p
1660   0E45 2A            mov b, [d]
1661   0E46 38 00 00      mov c, 0
1662   0E49             ; --- START TERMS
1663   0E49 D7            push a
1664   0E4A 11            mov a, b
1665   0E4B FD 2E 02 00   mov32 cb, $00000002
1665   0E4F 00 00 
1666   0E51 56            add b, a
1667   0E52 E4            pop a
1668   0E53             ; --- END TERMS
1669   0E53 E7            pop d
1670   0E54 FD 43         mov [d], b
1671   0E56             ; break; 
1672   0E56 0A EE 0E      jmp _switch20_exit ; case break
1673   0E59             _switch20_case6:
1674   0E59             ; c = getchar(); 
1675   0E59 FA FC FF      lea d, [bp + -4] ; $c
1676   0E5C DA            push d
1677   0E5D             ; --- START FUNCTION CALL
1678   0E5D 07 D5 1C      call getchar
1679   0E60 E7            pop d
1680   0E61 FD 3E         mov [d], bl
1681   0E63             ; **(char **)p = *(char *)c; 
1682   0E63 FA FF FF      lea d, [bp + -1] ; $p
1683   0E66 2A            mov b, [d]
1684   0E67 38 00 00      mov c, 0
1685   0E6A 74            mov d, b
1686   0E6B 2A            mov b, [d]
1687   0E6C D8            push b
1688   0E6D FA FC FF      lea d, [bp + -4] ; $c
1689   0E70 32            mov bl, [d]
1690   0E71 A7 00         mov bh, 0
1691   0E73 38 00 00      mov c, 0
1692   0E76 74            mov d, b
1693   0E77 32            mov bl, [d]
1694   0E78 A7 00         mov bh, 0
1695   0E7A 38 00 00      mov c, 0
1696   0E7D E7            pop d
1697   0E7E FD 43         mov [d], b
1698   0E80             ; p = p + 1; 
1699   0E80 FA FF FF      lea d, [bp + -1] ; $p
1700   0E83 DA            push d
1701   0E84 FA FF FF      lea d, [bp + -1] ; $p
1702   0E87 2A            mov b, [d]
1703   0E88 38 00 00      mov c, 0
1704   0E8B             ; --- START TERMS
1705   0E8B D7            push a
1706   0E8C 11            mov a, b
1707   0E8D FD 2E 01 00   mov32 cb, $00000001
1707   0E91 00 00 
1708   0E93 56            add b, a
1709   0E94 E4            pop a
1710   0E95             ; --- END TERMS
1711   0E95 E7            pop d
1712   0E96 FD 43         mov [d], b
1713   0E98             ; break; 
1714   0E98 0A EE 0E      jmp _switch20_exit ; case break
1715   0E9B             _switch20_case7:
1716   0E9B             ; gets(input_string); 
1717   0E9B             ; --- START FUNCTION CALL
1718   0E9B FA FA FD      lea d, [bp + -518] ; $input_string
1719   0E9E 2D            mov b, d
1720   0E9F 38 00 00      mov c, 0
1721   0EA2 FD AB         swp b
1722   0EA4 D8            push b
1723   0EA5 07 C7 14      call gets
1724   0EA8 51 02 00      add sp, 2
1725   0EAB             ; --- END FUNCTION CALL
1726   0EAB             ; strcpy(*(char **)p, input_string); 
1727   0EAB             ; --- START FUNCTION CALL
1728   0EAB FA FA FD      lea d, [bp + -518] ; $input_string
1729   0EAE 2D            mov b, d
1730   0EAF 38 00 00      mov c, 0
1731   0EB2 FD AB         swp b
1732   0EB4 D8            push b
1733   0EB5 FA FF FF      lea d, [bp + -1] ; $p
1734   0EB8 2A            mov b, [d]
1735   0EB9 38 00 00      mov c, 0
1736   0EBC 74            mov d, b
1737   0EBD 2A            mov b, [d]
1738   0EBE FD AB         swp b
1739   0EC0 D8            push b
1740   0EC1 07 44 04      call strcpy
1741   0EC4 51 04 00      add sp, 4
1742   0EC7             ; --- END FUNCTION CALL
1743   0EC7             ; p = p + 2; 
1744   0EC7 FA FF FF      lea d, [bp + -1] ; $p
1745   0ECA DA            push d
1746   0ECB FA FF FF      lea d, [bp + -1] ; $p
1747   0ECE 2A            mov b, [d]
1748   0ECF 38 00 00      mov c, 0
1749   0ED2             ; --- START TERMS
1750   0ED2 D7            push a
1751   0ED3 11            mov a, b
1752   0ED4 FD 2E 02 00   mov32 cb, $00000002
1752   0ED8 00 00 
1753   0EDA 56            add b, a
1754   0EDB E4            pop a
1755   0EDC             ; --- END TERMS
1756   0EDC E7            pop d
1757   0EDD FD 43         mov [d], b
1758   0EDF             ; break; 
1759   0EDF 0A EE 0E      jmp _switch20_exit ; case break
1760   0EE2             _switch20_default:
1761   0EE2             ; print("Error: Unknown argument type.\n"); 
1762   0EE2             ; --- START FUNCTION CALL
1763   0EE2 26 A1 21      mov b, _s1 ; "Error: Unknown argument type.\n"
1764   0EE5 FD AB         swp b
1765   0EE7 D8            push b
1766   0EE8 07 16 1D      call print
1767   0EEB 51 02 00      add sp, 2
1768   0EEE             ; --- END FUNCTION CALL
1769   0EEE             _switch20_exit:
1770   0EEE             ; format_p++; 
1771   0EEE FA FD FF      lea d, [bp + -3] ; $format_p
1772   0EF1 2A            mov b, [d]
1773   0EF2 38 00 00      mov c, 0
1774   0EF5 FD 77         inc b
1775   0EF7 FA FD FF      lea d, [bp + -3] ; $format_p
1776   0EFA FD 3E         mov [d], bl
1777   0EFC FD 7D         dec b
1778   0EFE 0A 26 0F      jmp _if19_exit
1779   0F01             _if19_else:
1780   0F01             ; putchar(*format_p); 
1781   0F01             ; --- START FUNCTION CALL
1782   0F01 FA FD FF      lea d, [bp + -3] ; $format_p
1783   0F04 2A            mov b, [d]
1784   0F05 38 00 00      mov c, 0
1785   0F08 74            mov d, b
1786   0F09 32            mov bl, [d]
1787   0F0A A7 00         mov bh, 0
1788   0F0C 38 00 00      mov c, 0
1789   0F0F DD            push bl
1790   0F10 07 C8 1C      call putchar
1791   0F13 51 01 00      add sp, 1
1792   0F16             ; --- END FUNCTION CALL
1793   0F16             ; format_p++; 
1794   0F16 FA FD FF      lea d, [bp + -3] ; $format_p
1795   0F19 2A            mov b, [d]
1796   0F1A 38 00 00      mov c, 0
1797   0F1D FD 77         inc b
1798   0F1F FA FD FF      lea d, [bp + -3] ; $format_p
1799   0F22 FD 3E         mov [d], bl
1800   0F24 FD 7D         dec b
1801   0F26             _if19_exit:
1802   0F26             _if18_exit:
1803   0F26             _for17_update:
1804   0F26 0A 82 0C      jmp _for17_cond
1805   0F29             _for17_exit:
1806   0F29 F9            leave
1807   0F2A 09            ret
1808   0F2B             
1809   0F2B             sprintf:
1810   0F2B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1811   0F2E             ; char *p, *format_p; 
1812   0F2E 52 02 00      sub sp, 2
1813   0F31 52 02 00      sub sp, 2
1814   0F34             ; char *sp; 
1815   0F34 52 02 00      sub sp, 2
1816   0F37             ; sp = dest; 
1817   0F37 FA FB FF      lea d, [bp + -5] ; $sp
1818   0F3A DA            push d
1819   0F3B FA 05 00      lea d, [bp + 5] ; $dest
1820   0F3E 2A            mov b, [d]
1821   0F3F 38 00 00      mov c, 0
1822   0F42 E7            pop d
1823   0F43 FD 43         mov [d], b
1824   0F45             ; format_p = format; 
1825   0F45 FA FD FF      lea d, [bp + -3] ; $format_p
1826   0F48 DA            push d
1827   0F49 FA 07 00      lea d, [bp + 7] ; $format
1828   0F4C 2A            mov b, [d]
1829   0F4D 38 00 00      mov c, 0
1830   0F50 E7            pop d
1831   0F51 FD 43         mov [d], b
1832   0F53             ; p = &format + 2; 
1833   0F53 FA FF FF      lea d, [bp + -1] ; $p
1834   0F56 DA            push d
1835   0F57 FA 07 00      lea d, [bp + 7] ; $format
1836   0F5A 2D            mov b, d
1837   0F5B             ; --- START TERMS
1838   0F5B D7            push a
1839   0F5C 11            mov a, b
1840   0F5D FD 2E 02 00   mov32 cb, $00000002
1840   0F61 00 00 
1841   0F63 56            add b, a
1842   0F64 E4            pop a
1843   0F65             ; --- END TERMS
1844   0F65 E7            pop d
1845   0F66 FD 43         mov [d], b
1846   0F68             ; for(;;){ 
1847   0F68             _for24_init:
1848   0F68             _for24_cond:
1849   0F68             _for24_block:
1850   0F68             ; if(!*format_p) break; 
1851   0F68             _if25_cond:
1852   0F68 FA FD FF      lea d, [bp + -3] ; $format_p
1853   0F6B 2A            mov b, [d]
1854   0F6C 38 00 00      mov c, 0
1855   0F6F 74            mov d, b
1856   0F70 32            mov bl, [d]
1857   0F71 A7 00         mov bh, 0
1858   0F73 38 00 00      mov c, 0
1859   0F76 C0 00 00      cmp b, 0
1860   0F79 FD 71         seq ; !
1861   0F7B C0 00 00      cmp b, 0
1862   0F7E C6 87 0F      je _if25_else
1863   0F81             _if25_true:
1864   0F81             ; break; 
1865   0F81 0A B5 12      jmp _for24_exit ; for break
1866   0F84 0A B2 12      jmp _if25_exit
1867   0F87             _if25_else:
1868   0F87             ; if(*format_p == '%'){ 
1869   0F87             _if26_cond:
1870   0F87 FA FD FF      lea d, [bp + -3] ; $format_p
1871   0F8A 2A            mov b, [d]
1872   0F8B 38 00 00      mov c, 0
1873   0F8E 74            mov d, b
1874   0F8F 32            mov bl, [d]
1875   0F90 A7 00         mov bh, 0
1876   0F92 38 00 00      mov c, 0
1877   0F95             ; --- START RELATIONAL
1878   0F95 D7            push a
1879   0F96 11            mov a, b
1880   0F97 FD 2E 25 00   mov32 cb, $00000025
1880   0F9B 00 00 
1881   0F9D B0            cmp a, b
1882   0F9E FD 71         seq ; ==
1883   0FA0 E4            pop a
1884   0FA1             ; --- END RELATIONAL
1885   0FA1 C0 00 00      cmp b, 0
1886   0FA4 C6 87 12      je _if26_else
1887   0FA7             _if26_true:
1888   0FA7             ; format_p++; 
1889   0FA7 FA FD FF      lea d, [bp + -3] ; $format_p
1890   0FAA 2A            mov b, [d]
1891   0FAB 38 00 00      mov c, 0
1892   0FAE FD 77         inc b
1893   0FB0 FA FD FF      lea d, [bp + -3] ; $format_p
1894   0FB3 FD 3E         mov [d], bl
1895   0FB5 FD 7D         dec b
1896   0FB7             ; switch(*format_p){ 
1897   0FB7             _switch27_expr:
1898   0FB7 FA FD FF      lea d, [bp + -3] ; $format_p
1899   0FBA 2A            mov b, [d]
1900   0FBB 38 00 00      mov c, 0
1901   0FBE 74            mov d, b
1902   0FBF 32            mov bl, [d]
1903   0FC0 A7 00         mov bh, 0
1904   0FC2 38 00 00      mov c, 0
1905   0FC5             _switch27_comparisons:
1906   0FC5 C1 6C         cmp bl, $6c
1907   0FC7 C6 F3 0F      je _switch27_case0
1908   0FCA C1 4C         cmp bl, $4c
1909   0FCC C6 F3 0F      je _switch27_case1
1910   0FCF C1 64         cmp bl, $64
1911   0FD1 C6 03 11      je _switch27_case2
1912   0FD4 C1 69         cmp bl, $69
1913   0FD6 C6 03 11      je _switch27_case3
1914   0FD9 C1 75         cmp bl, $75
1915   0FDB C6 4F 11      je _switch27_case4
1916   0FDE C1 78         cmp bl, $78
1917   0FE0 C6 9B 11      je _switch27_case5
1918   0FE3 C1 63         cmp bl, $63
1919   0FE5 C6 BF 11      je _switch27_case6
1920   0FE8 C1 73         cmp bl, $73
1921   0FEA C6 FC 11      je _switch27_case7
1922   0FED 0A 68 12      jmp _switch27_default
1923   0FF0 0A 74 12      jmp _switch27_exit
1924   0FF3             _switch27_case0:
1925   0FF3             _switch27_case1:
1926   0FF3             ; format_p++; 
1927   0FF3 FA FD FF      lea d, [bp + -3] ; $format_p
1928   0FF6 2A            mov b, [d]
1929   0FF7 38 00 00      mov c, 0
1930   0FFA FD 77         inc b
1931   0FFC FA FD FF      lea d, [bp + -3] ; $format_p
1932   0FFF FD 3E         mov [d], bl
1933   1001 FD 7D         dec b
1934   1003             ; if(*format_p == 'd' || *format_p == 'i') 
1935   1003             _if28_cond:
1936   1003 FA FD FF      lea d, [bp + -3] ; $format_p
1937   1006 2A            mov b, [d]
1938   1007 38 00 00      mov c, 0
1939   100A 74            mov d, b
1940   100B 32            mov bl, [d]
1941   100C A7 00         mov bh, 0
1942   100E 38 00 00      mov c, 0
1943   1011             ; --- START RELATIONAL
1944   1011 D7            push a
1945   1012 11            mov a, b
1946   1013 FD 2E 64 00   mov32 cb, $00000064
1946   1017 00 00 
1947   1019 B0            cmp a, b
1948   101A FD 71         seq ; ==
1949   101C E4            pop a
1950   101D             ; --- END RELATIONAL
1951   101D             ; --- START LOGICAL OR
1952   101D D7            push a
1953   101E 11            mov a, b
1954   101F FA FD FF      lea d, [bp + -3] ; $format_p
1955   1022 2A            mov b, [d]
1956   1023 38 00 00      mov c, 0
1957   1026 74            mov d, b
1958   1027 32            mov bl, [d]
1959   1028 A7 00         mov bh, 0
1960   102A 38 00 00      mov c, 0
1961   102D             ; --- START RELATIONAL
1962   102D D7            push a
1963   102E 11            mov a, b
1964   102F FD 2E 69 00   mov32 cb, $00000069
1964   1033 00 00 
1965   1035 B0            cmp a, b
1966   1036 FD 71         seq ; ==
1967   1038 E4            pop a
1968   1039             ; --- END RELATIONAL
1969   1039 FD A8         sor a, b ; ||
1970   103B E4            pop a
1971   103C             ; --- END LOGICAL OR
1972   103C C0 00 00      cmp b, 0
1973   103F C6 60 10      je _if28_else
1974   1042             _if28_true:
1975   1042             ; print_signed_long(*(long *)p); 
1976   1042             ; --- START FUNCTION CALL
1977   1042 FA FF FF      lea d, [bp + -1] ; $p
1978   1045 2A            mov b, [d]
1979   1046 38 00 00      mov c, 0
1980   1049 74            mov d, b
1981   104A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1982   104D FD 39         mov c, b ; And place it into C
1983   104F 2A            mov b, [d] ; Lower Word in B
1984   1050 12            mov a, c
1985   1051 FD AA         swp a
1986   1053 D7            push a
1987   1054 FD AB         swp b
1988   1056 D8            push b
1989   1057 07 1D 16      call print_signed_long
1990   105A 51 04 00      add sp, 4
1991   105D             ; --- END FUNCTION CALL
1992   105D 0A E8 10      jmp _if28_exit
1993   1060             _if28_else:
1994   1060             ; if(*format_p == 'u') 
1995   1060             _if29_cond:
1996   1060 FA FD FF      lea d, [bp + -3] ; $format_p
1997   1063 2A            mov b, [d]
1998   1064 38 00 00      mov c, 0
1999   1067 74            mov d, b
2000   1068 32            mov bl, [d]
2001   1069 A7 00         mov bh, 0
2002   106B 38 00 00      mov c, 0
2003   106E             ; --- START RELATIONAL
2004   106E D7            push a
2005   106F 11            mov a, b
2006   1070 FD 2E 75 00   mov32 cb, $00000075
2006   1074 00 00 
2007   1076 B0            cmp a, b
2008   1077 FD 71         seq ; ==
2009   1079 E4            pop a
2010   107A             ; --- END RELATIONAL
2011   107A C0 00 00      cmp b, 0
2012   107D C6 9E 10      je _if29_else
2013   1080             _if29_true:
2014   1080             ; print_unsigned_long(*(unsigned long *)p); 
2015   1080             ; --- START FUNCTION CALL
2016   1080 FA FF FF      lea d, [bp + -1] ; $p
2017   1083 2A            mov b, [d]
2018   1084 38 00 00      mov c, 0
2019   1087 74            mov d, b
2020   1088 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2021   108B FD 39         mov c, b ; And place it into C
2022   108D 2A            mov b, [d] ; Lower Word in B
2023   108E 12            mov a, c
2024   108F FD AA         swp a
2025   1091 D7            push a
2026   1092 FD AB         swp b
2027   1094 D8            push b
2028   1095 07 8C 17      call print_unsigned_long
2029   1098 51 04 00      add sp, 4
2030   109B             ; --- END FUNCTION CALL
2031   109B 0A E8 10      jmp _if29_exit
2032   109E             _if29_else:
2033   109E             ; if(*format_p == 'x') 
2034   109E             _if30_cond:
2035   109E FA FD FF      lea d, [bp + -3] ; $format_p
2036   10A1 2A            mov b, [d]
2037   10A2 38 00 00      mov c, 0
2038   10A5 74            mov d, b
2039   10A6 32            mov bl, [d]
2040   10A7 A7 00         mov bh, 0
2041   10A9 38 00 00      mov c, 0
2042   10AC             ; --- START RELATIONAL
2043   10AC D7            push a
2044   10AD 11            mov a, b
2045   10AE FD 2E 78 00   mov32 cb, $00000078
2045   10B2 00 00 
2046   10B4 B0            cmp a, b
2047   10B5 FD 71         seq ; ==
2048   10B7 E4            pop a
2049   10B8             ; --- END RELATIONAL
2050   10B8 C0 00 00      cmp b, 0
2051   10BB C6 DC 10      je _if30_else
2052   10BE             _if30_true:
2053   10BE             ; printx32(*(long int *)p); 
2054   10BE             ; --- START FUNCTION CALL
2055   10BE FA FF FF      lea d, [bp + -1] ; $p
2056   10C1 2A            mov b, [d]
2057   10C2 38 00 00      mov c, 0
2058   10C5 74            mov d, b
2059   10C6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2060   10C9 FD 39         mov c, b ; And place it into C
2061   10CB 2A            mov b, [d] ; Lower Word in B
2062   10CC 12            mov a, c
2063   10CD FD AA         swp a
2064   10CF D7            push a
2065   10D0 FD AB         swp b
2066   10D2 D8            push b
2067   10D3 07 F0 12      call printx32
2068   10D6 51 04 00      add sp, 4
2069   10D9             ; --- END FUNCTION CALL
2070   10D9 0A E8 10      jmp _if30_exit
2071   10DC             _if30_else:
2072   10DC             ; err("Unexpected format in printf."); 
2073   10DC             ; --- START FUNCTION CALL
2074   10DC 26 84 21      mov b, _s0 ; "Unexpected format in printf."
2075   10DF FD AB         swp b
2076   10E1 D8            push b
2077   10E2 07 DB 12      call err
2078   10E5 51 02 00      add sp, 2
2079   10E8             ; --- END FUNCTION CALL
2080   10E8             _if30_exit:
2081   10E8             _if29_exit:
2082   10E8             _if28_exit:
2083   10E8             ; p = p + 4; 
2084   10E8 FA FF FF      lea d, [bp + -1] ; $p
2085   10EB DA            push d
2086   10EC FA FF FF      lea d, [bp + -1] ; $p
2087   10EF 2A            mov b, [d]
2088   10F0 38 00 00      mov c, 0
2089   10F3             ; --- START TERMS
2090   10F3 D7            push a
2091   10F4 11            mov a, b
2092   10F5 FD 2E 04 00   mov32 cb, $00000004
2092   10F9 00 00 
2093   10FB 56            add b, a
2094   10FC E4            pop a
2095   10FD             ; --- END TERMS
2096   10FD E7            pop d
2097   10FE FD 43         mov [d], b
2098   1100             ; break; 
2099   1100 0A 74 12      jmp _switch27_exit ; case break
2100   1103             _switch27_case2:
2101   1103             _switch27_case3:
2102   1103             ; sp = sp + sprint_signed(sp, *(int*)p); 
2103   1103 FA FB FF      lea d, [bp + -5] ; $sp
2104   1106 DA            push d
2105   1107 FA FB FF      lea d, [bp + -5] ; $sp
2106   110A 2A            mov b, [d]
2107   110B 38 00 00      mov c, 0
2108   110E             ; --- START TERMS
2109   110E D7            push a
2110   110F 11            mov a, b
2111   1110             ; --- START FUNCTION CALL
2112   1110 FA FF FF      lea d, [bp + -1] ; $p
2113   1113 2A            mov b, [d]
2114   1114 38 00 00      mov c, 0
2115   1117 74            mov d, b
2116   1118 2A            mov b, [d]
2117   1119 38 00 00      mov c, 0
2118   111C FD AB         swp b
2119   111E D8            push b
2120   111F FA FB FF      lea d, [bp + -5] ; $sp
2121   1122 2A            mov b, [d]
2122   1123 38 00 00      mov c, 0
2123   1126 FD AB         swp b
2124   1128 D8            push b
2125   1129 07 00 1B      call sprint_signed
2126   112C 51 04 00      add sp, 4
2127   112F             ; --- END FUNCTION CALL
2128   112F 56            add b, a
2129   1130 E4            pop a
2130   1131             ; --- END TERMS
2131   1131 E7            pop d
2132   1132 FD 43         mov [d], b
2133   1134             ; p = p + 2; 
2134   1134 FA FF FF      lea d, [bp + -1] ; $p
2135   1137 DA            push d
2136   1138 FA FF FF      lea d, [bp + -1] ; $p
2137   113B 2A            mov b, [d]
2138   113C 38 00 00      mov c, 0
2139   113F             ; --- START TERMS
2140   113F D7            push a
2141   1140 11            mov a, b
2142   1141 FD 2E 02 00   mov32 cb, $00000002
2142   1145 00 00 
2143   1147 56            add b, a
2144   1148 E4            pop a
2145   1149             ; --- END TERMS
2146   1149 E7            pop d
2147   114A FD 43         mov [d], b
2148   114C             ; break; 
2149   114C 0A 74 12      jmp _switch27_exit ; case break
2150   114F             _switch27_case4:
2151   114F             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2152   114F FA FB FF      lea d, [bp + -5] ; $sp
2153   1152 DA            push d
2154   1153 FA FB FF      lea d, [bp + -5] ; $sp
2155   1156 2A            mov b, [d]
2156   1157 38 00 00      mov c, 0
2157   115A             ; --- START TERMS
2158   115A D7            push a
2159   115B 11            mov a, b
2160   115C             ; --- START FUNCTION CALL
2161   115C FA FF FF      lea d, [bp + -1] ; $p
2162   115F 2A            mov b, [d]
2163   1160 38 00 00      mov c, 0
2164   1163 74            mov d, b
2165   1164 2A            mov b, [d]
2166   1165 38 00 00      mov c, 0
2167   1168 FD AB         swp b
2168   116A D8            push b
2169   116B FA FB FF      lea d, [bp + -5] ; $sp
2170   116E 2A            mov b, [d]
2171   116F 38 00 00      mov c, 0
2172   1172 FD AB         swp b
2173   1174 D8            push b
2174   1175 07 A8 18      call sprint_unsigned
2175   1178 51 04 00      add sp, 4
2176   117B             ; --- END FUNCTION CALL
2177   117B 56            add b, a
2178   117C E4            pop a
2179   117D             ; --- END TERMS
2180   117D E7            pop d
2181   117E FD 43         mov [d], b
2182   1180             ; p = p + 2; 
2183   1180 FA FF FF      lea d, [bp + -1] ; $p
2184   1183 DA            push d
2185   1184 FA FF FF      lea d, [bp + -1] ; $p
2186   1187 2A            mov b, [d]
2187   1188 38 00 00      mov c, 0
2188   118B             ; --- START TERMS
2189   118B D7            push a
2190   118C 11            mov a, b
2191   118D FD 2E 02 00   mov32 cb, $00000002
2191   1191 00 00 
2192   1193 56            add b, a
2193   1194 E4            pop a
2194   1195             ; --- END TERMS
2195   1195 E7            pop d
2196   1196 FD 43         mov [d], b
2197   1198             ; break; 
2198   1198 0A 74 12      jmp _switch27_exit ; case break
2199   119B             _switch27_case5:
2200   119B             
2201   119B             ; --- BEGIN INLINE ASM SEGMENT
2202   119B FA FF FF      lea d, [bp + -1] ; $p
2203   119E FD 2A         mov d, [d]
2204   11A0 2A            mov b, [d]
2205   11A1 07 79 20      call print_u16x
2206   11A4             ; --- END INLINE ASM SEGMENT
2207   11A4             
2208   11A4             ; p = p + 2; 
2209   11A4 FA FF FF      lea d, [bp + -1] ; $p
2210   11A7 DA            push d
2211   11A8 FA FF FF      lea d, [bp + -1] ; $p
2212   11AB 2A            mov b, [d]
2213   11AC 38 00 00      mov c, 0
2214   11AF             ; --- START TERMS
2215   11AF D7            push a
2216   11B0 11            mov a, b
2217   11B1 FD 2E 02 00   mov32 cb, $00000002
2217   11B5 00 00 
2218   11B7 56            add b, a
2219   11B8 E4            pop a
2220   11B9             ; --- END TERMS
2221   11B9 E7            pop d
2222   11BA FD 43         mov [d], b
2223   11BC             ; break; 
2224   11BC 0A 74 12      jmp _switch27_exit ; case break
2225   11BF             _switch27_case6:
2226   11BF             ; *sp++ = *(char *)p; 
2227   11BF FA FB FF      lea d, [bp + -5] ; $sp
2228   11C2 2A            mov b, [d]
2229   11C3 38 00 00      mov c, 0
2230   11C6 FD 77         inc b
2231   11C8 FA FB FF      lea d, [bp + -5] ; $sp
2232   11CB FD 3E         mov [d], bl
2233   11CD FD 7D         dec b
2234   11CF D8            push b
2235   11D0 FA FF FF      lea d, [bp + -1] ; $p
2236   11D3 2A            mov b, [d]
2237   11D4 38 00 00      mov c, 0
2238   11D7 74            mov d, b
2239   11D8 32            mov bl, [d]
2240   11D9 A7 00         mov bh, 0
2241   11DB 38 00 00      mov c, 0
2242   11DE E7            pop d
2243   11DF FD 3E         mov [d], bl
2244   11E1             ; p = p + 1; 
2245   11E1 FA FF FF      lea d, [bp + -1] ; $p
2246   11E4 DA            push d
2247   11E5 FA FF FF      lea d, [bp + -1] ; $p
2248   11E8 2A            mov b, [d]
2249   11E9 38 00 00      mov c, 0
2250   11EC             ; --- START TERMS
2251   11EC D7            push a
2252   11ED 11            mov a, b
2253   11EE FD 2E 01 00   mov32 cb, $00000001
2253   11F2 00 00 
2254   11F4 56            add b, a
2255   11F5 E4            pop a
2256   11F6             ; --- END TERMS
2257   11F6 E7            pop d
2258   11F7 FD 43         mov [d], b
2259   11F9             ; break; 
2260   11F9 0A 74 12      jmp _switch27_exit ; case break
2261   11FC             _switch27_case7:
2262   11FC             ; int len = strlen(*(char **)p); 
2263   11FC 52 02 00      sub sp, 2
2264   11FF             ; --- START LOCAL VAR INITIALIZATION
2265   11FF FA F9 FF      lea d, [bp + -7] ; $len
2266   1202 DA            push d
2267   1203             ; --- START FUNCTION CALL
2268   1203 FA FF FF      lea d, [bp + -1] ; $p
2269   1206 2A            mov b, [d]
2270   1207 38 00 00      mov c, 0
2271   120A 74            mov d, b
2272   120B 2A            mov b, [d]
2273   120C FD AB         swp b
2274   120E D8            push b
2275   120F 07 2A 06      call strlen
2276   1212 51 02 00      add sp, 2
2277   1215             ; --- END FUNCTION CALL
2278   1215 E7            pop d
2279   1216 FD 43         mov [d], b
2280   1218             ; --- END LOCAL VAR INITIALIZATION
2281   1218             ; strcpy(sp, *(char **)p); 
2282   1218             ; --- START FUNCTION CALL
2283   1218 FA FF FF      lea d, [bp + -1] ; $p
2284   121B 2A            mov b, [d]
2285   121C 38 00 00      mov c, 0
2286   121F 74            mov d, b
2287   1220 2A            mov b, [d]
2288   1221 FD AB         swp b
2289   1223 D8            push b
2290   1224 FA FB FF      lea d, [bp + -5] ; $sp
2291   1227 2A            mov b, [d]
2292   1228 38 00 00      mov c, 0
2293   122B FD AB         swp b
2294   122D D8            push b
2295   122E 07 44 04      call strcpy
2296   1231 51 04 00      add sp, 4
2297   1234             ; --- END FUNCTION CALL
2298   1234             ; sp = sp + len; 
2299   1234 FA FB FF      lea d, [bp + -5] ; $sp
2300   1237 DA            push d
2301   1238 FA FB FF      lea d, [bp + -5] ; $sp
2302   123B 2A            mov b, [d]
2303   123C 38 00 00      mov c, 0
2304   123F             ; --- START TERMS
2305   123F D7            push a
2306   1240 11            mov a, b
2307   1241 FA F9 FF      lea d, [bp + -7] ; $len
2308   1244 2A            mov b, [d]
2309   1245 38 00 00      mov c, 0
2310   1248 56            add b, a
2311   1249 E4            pop a
2312   124A             ; --- END TERMS
2313   124A E7            pop d
2314   124B FD 43         mov [d], b
2315   124D             ; p = p + 2; 
2316   124D FA FF FF      lea d, [bp + -1] ; $p
2317   1250 DA            push d
2318   1251 FA FF FF      lea d, [bp + -1] ; $p
2319   1254 2A            mov b, [d]
2320   1255 38 00 00      mov c, 0
2321   1258             ; --- START TERMS
2322   1258 D7            push a
2323   1259 11            mov a, b
2324   125A FD 2E 02 00   mov32 cb, $00000002
2324   125E 00 00 
2325   1260 56            add b, a
2326   1261 E4            pop a
2327   1262             ; --- END TERMS
2328   1262 E7            pop d
2329   1263 FD 43         mov [d], b
2330   1265             ; break; 
2331   1265 0A 74 12      jmp _switch27_exit ; case break
2332   1268             _switch27_default:
2333   1268             ; print("Error: Unknown argument type.\n"); 
2334   1268             ; --- START FUNCTION CALL
2335   1268 26 A1 21      mov b, _s1 ; "Error: Unknown argument type.\n"
2336   126B FD AB         swp b
2337   126D D8            push b
2338   126E 07 16 1D      call print
2339   1271 51 02 00      add sp, 2
2340   1274             ; --- END FUNCTION CALL
2341   1274             _switch27_exit:
2342   1274             ; format_p++; 
2343   1274 FA FD FF      lea d, [bp + -3] ; $format_p
2344   1277 2A            mov b, [d]
2345   1278 38 00 00      mov c, 0
2346   127B FD 77         inc b
2347   127D FA FD FF      lea d, [bp + -3] ; $format_p
2348   1280 FD 3E         mov [d], bl
2349   1282 FD 7D         dec b
2350   1284 0A B2 12      jmp _if26_exit
2351   1287             _if26_else:
2352   1287             ; *sp++ = *format_p++; 
2353   1287 FA FB FF      lea d, [bp + -5] ; $sp
2354   128A 2A            mov b, [d]
2355   128B 38 00 00      mov c, 0
2356   128E FD 77         inc b
2357   1290 FA FB FF      lea d, [bp + -5] ; $sp
2358   1293 FD 3E         mov [d], bl
2359   1295 FD 7D         dec b
2360   1297 D8            push b
2361   1298 FA FD FF      lea d, [bp + -3] ; $format_p
2362   129B 2A            mov b, [d]
2363   129C 38 00 00      mov c, 0
2364   129F FD 77         inc b
2365   12A1 FA FD FF      lea d, [bp + -3] ; $format_p
2366   12A4 FD 3E         mov [d], bl
2367   12A6 FD 7D         dec b
2368   12A8 74            mov d, b
2369   12A9 32            mov bl, [d]
2370   12AA A7 00         mov bh, 0
2371   12AC 38 00 00      mov c, 0
2372   12AF E7            pop d
2373   12B0 FD 3E         mov [d], bl
2374   12B2             _if26_exit:
2375   12B2             _if25_exit:
2376   12B2             _for24_update:
2377   12B2 0A 68 0F      jmp _for24_cond
2378   12B5             _for24_exit:
2379   12B5             ; *sp = '\0'; 
2380   12B5 FA FB FF      lea d, [bp + -5] ; $sp
2381   12B8 2A            mov b, [d]
2382   12B9 38 00 00      mov c, 0
2383   12BC D8            push b
2384   12BD FD 2E 00 00   mov32 cb, $00000000
2384   12C1 00 00 
2385   12C3 E7            pop d
2386   12C4 FD 3E         mov [d], bl
2387   12C6             ; return sp - dest; // return total number of chars written 
2388   12C6 FA FB FF      lea d, [bp + -5] ; $sp
2389   12C9 2A            mov b, [d]
2390   12CA 38 00 00      mov c, 0
2391   12CD             ; --- START TERMS
2392   12CD D7            push a
2393   12CE 11            mov a, b
2394   12CF FA 05 00      lea d, [bp + 5] ; $dest
2395   12D2 2A            mov b, [d]
2396   12D3 38 00 00      mov c, 0
2397   12D6 60            sub a, b
2398   12D7 27            mov b, a
2399   12D8 E4            pop a
2400   12D9             ; --- END TERMS
2401   12D9 F9            leave
2402   12DA 09            ret
2403   12DB             
2404   12DB             err:
2405   12DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2406   12DE             ; print(e); 
2407   12DE             ; --- START FUNCTION CALL
2408   12DE FA 05 00      lea d, [bp + 5] ; $e
2409   12E1 2A            mov b, [d]
2410   12E2 38 00 00      mov c, 0
2411   12E5 FD AB         swp b
2412   12E7 D8            push b
2413   12E8 07 16 1D      call print
2414   12EB 51 02 00      add sp, 2
2415   12EE             ; --- END FUNCTION CALL
2416   12EE F9            leave
2417   12EF 09            ret
2418   12F0             
2419   12F0             printx32:
2420   12F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2421   12F3             
2422   12F3             ; --- BEGIN INLINE ASM SEGMENT
2423   12F3 FA 05 00      lea d, [bp + 5] ; $hex
2424   12F6 2B 02 00      mov b, [d+2]
2425   12F9 07 79 20      call print_u16x
2426   12FC 2A            mov b, [d]
2427   12FD 07 79 20      call print_u16x
2428   1300             ; --- END INLINE ASM SEGMENT
2429   1300             
2430   1300 F9            leave
2431   1301 09            ret
2432   1302             
2433   1302             printx16:
2434   1302 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2435   1305             
2436   1305             ; --- BEGIN INLINE ASM SEGMENT
2437   1305 FA 05 00      lea d, [bp + 5] ; $hex
2438   1308 2A            mov b, [d]
2439   1309 07 79 20      call print_u16x
2440   130C             ; --- END INLINE ASM SEGMENT
2441   130C             
2442   130C F9            leave
2443   130D 09            ret
2444   130E             
2445   130E             printx8:
2446   130E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2447   1311             
2448   1311             ; --- BEGIN INLINE ASM SEGMENT
2449   1311 FA 05 00      lea d, [bp + 5] ; $hex
2450   1314 32            mov bl, [d]
2451   1315 07 BD 20      call print_u8x
2452   1318             ; --- END INLINE ASM SEGMENT
2453   1318             
2454   1318 F9            leave
2455   1319 09            ret
2456   131A             
2457   131A             hex_str_to_int:
2458   131A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2459   131D             ; int value = 0; 
2460   131D 52 02 00      sub sp, 2
2461   1320             ; --- START LOCAL VAR INITIALIZATION
2462   1320 FA FF FF      lea d, [bp + -1] ; $value
2463   1323 DA            push d
2464   1324 FD 2E 00 00   mov32 cb, $00000000
2464   1328 00 00 
2465   132A E7            pop d
2466   132B FD 43         mov [d], b
2467   132D             ; --- END LOCAL VAR INITIALIZATION
2468   132D             ; int i; 
2469   132D 52 02 00      sub sp, 2
2470   1330             ; char hex_char; 
2471   1330 52 01 00      sub sp, 1
2472   1333             ; int len; 
2473   1333 52 02 00      sub sp, 2
2474   1336             ; len = strlen(hex_string); 
2475   1336 FA FA FF      lea d, [bp + -6] ; $len
2476   1339 DA            push d
2477   133A             ; --- START FUNCTION CALL
2478   133A FA 05 00      lea d, [bp + 5] ; $hex_string
2479   133D 2A            mov b, [d]
2480   133E 38 00 00      mov c, 0
2481   1341 FD AB         swp b
2482   1343 D8            push b
2483   1344 07 2A 06      call strlen
2484   1347 51 02 00      add sp, 2
2485   134A             ; --- END FUNCTION CALL
2486   134A E7            pop d
2487   134B FD 43         mov [d], b
2488   134D             ; for (i = 0; i < len; i++) { 
2489   134D             _for31_init:
2490   134D FA FD FF      lea d, [bp + -3] ; $i
2491   1350 DA            push d
2492   1351 FD 2E 00 00   mov32 cb, $00000000
2492   1355 00 00 
2493   1357 E7            pop d
2494   1358 FD 43         mov [d], b
2495   135A             _for31_cond:
2496   135A FA FD FF      lea d, [bp + -3] ; $i
2497   135D 2A            mov b, [d]
2498   135E 38 00 00      mov c, 0
2499   1361             ; --- START RELATIONAL
2500   1361 D7            push a
2501   1362 11            mov a, b
2502   1363 FA FA FF      lea d, [bp + -6] ; $len
2503   1366 2A            mov b, [d]
2504   1367 38 00 00      mov c, 0
2505   136A B0            cmp a, b
2506   136B FD 73         slt ; < (signed)
2507   136D E4            pop a
2508   136E             ; --- END RELATIONAL
2509   136E C0 00 00      cmp b, 0
2510   1371 C6 BE 14      je _for31_exit
2511   1374             _for31_block:
2512   1374             ; hex_char = hex_string[i]; 
2513   1374 FA FC FF      lea d, [bp + -4] ; $hex_char
2514   1377 DA            push d
2515   1378 FA 05 00      lea d, [bp + 5] ; $hex_string
2516   137B FD 2A         mov d, [d]
2517   137D D7            push a
2518   137E DA            push d
2519   137F FA FD FF      lea d, [bp + -3] ; $i
2520   1382 2A            mov b, [d]
2521   1383 38 00 00      mov c, 0
2522   1386 E7            pop d
2523   1387 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2524   138B E4            pop a
2525   138C 32            mov bl, [d]
2526   138D A7 00         mov bh, 0
2527   138F 38 00 00      mov c, 0
2528   1392 E7            pop d
2529   1393 FD 3E         mov [d], bl
2530   1395             ; if (hex_char >= 'a' && hex_char <= 'f')  
2531   1395             _if32_cond:
2532   1395 FA FC FF      lea d, [bp + -4] ; $hex_char
2533   1398 32            mov bl, [d]
2534   1399 A7 00         mov bh, 0
2535   139B 38 00 00      mov c, 0
2536   139E             ; --- START RELATIONAL
2537   139E D7            push a
2538   139F 11            mov a, b
2539   13A0 FD 2E 61 00   mov32 cb, $00000061
2539   13A4 00 00 
2540   13A6 B0            cmp a, b
2541   13A7 FD 80         sge ; >=
2542   13A9 E4            pop a
2543   13AA             ; --- END RELATIONAL
2544   13AA             ; --- START LOGICAL AND
2545   13AA D7            push a
2546   13AB 11            mov a, b
2547   13AC FA FC FF      lea d, [bp + -4] ; $hex_char
2548   13AF 32            mov bl, [d]
2549   13B0 A7 00         mov bh, 0
2550   13B2 38 00 00      mov c, 0
2551   13B5             ; --- START RELATIONAL
2552   13B5 D7            push a
2553   13B6 11            mov a, b
2554   13B7 FD 2E 66 00   mov32 cb, $00000066
2554   13BB 00 00 
2555   13BD B0            cmp a, b
2556   13BE FD 74         sle ; <= (signed)
2557   13C0 E4            pop a
2558   13C1             ; --- END RELATIONAL
2559   13C1 FD A7         sand a, b
2560   13C3 E4            pop a
2561   13C4             ; --- END LOGICAL AND
2562   13C4 C0 00 00      cmp b, 0
2563   13C7 C6 07 14      je _if32_else
2564   13CA             _if32_true:
2565   13CA             ; value = (value * 16) + (hex_char - 'a' + 10); 
2566   13CA FA FF FF      lea d, [bp + -1] ; $value
2567   13CD DA            push d
2568   13CE FA FF FF      lea d, [bp + -1] ; $value
2569   13D1 2A            mov b, [d]
2570   13D2 38 00 00      mov c, 0
2571   13D5             ; --- START FACTORS
2572   13D5 D7            push a
2573   13D6 11            mov a, b
2574   13D7 FD 2E 10 00   mov32 cb, $00000010
2574   13DB 00 00 
2575   13DD AC            mul a, b ; *
2576   13DE 11            mov a, b
2577   13DF 27            mov b, a
2578   13E0 E4            pop a
2579   13E1             ; --- END FACTORS
2580   13E1             ; --- START TERMS
2581   13E1 D7            push a
2582   13E2 11            mov a, b
2583   13E3 FA FC FF      lea d, [bp + -4] ; $hex_char
2584   13E6 32            mov bl, [d]
2585   13E7 A7 00         mov bh, 0
2586   13E9 38 00 00      mov c, 0
2587   13EC             ; --- START TERMS
2588   13EC D7            push a
2589   13ED 11            mov a, b
2590   13EE FD 2E 61 00   mov32 cb, $00000061
2590   13F2 00 00 
2591   13F4 60            sub a, b
2592   13F5 27            mov b, a
2593   13F6 11            mov a, b
2594   13F7 FD 2E 0A 00   mov32 cb, $0000000a
2594   13FB 00 00 
2595   13FD 56            add b, a
2596   13FE E4            pop a
2597   13FF             ; --- END TERMS
2598   13FF 56            add b, a
2599   1400 E4            pop a
2600   1401             ; --- END TERMS
2601   1401 E7            pop d
2602   1402 FD 43         mov [d], b
2603   1404 0A AB 14      jmp _if32_exit
2604   1407             _if32_else:
2605   1407             ; if (hex_char >= 'A' && hex_char <= 'F')  
2606   1407             _if33_cond:
2607   1407 FA FC FF      lea d, [bp + -4] ; $hex_char
2608   140A 32            mov bl, [d]
2609   140B A7 00         mov bh, 0
2610   140D 38 00 00      mov c, 0
2611   1410             ; --- START RELATIONAL
2612   1410 D7            push a
2613   1411 11            mov a, b
2614   1412 FD 2E 41 00   mov32 cb, $00000041
2614   1416 00 00 
2615   1418 B0            cmp a, b
2616   1419 FD 80         sge ; >=
2617   141B E4            pop a
2618   141C             ; --- END RELATIONAL
2619   141C             ; --- START LOGICAL AND
2620   141C D7            push a
2621   141D 11            mov a, b
2622   141E FA FC FF      lea d, [bp + -4] ; $hex_char
2623   1421 32            mov bl, [d]
2624   1422 A7 00         mov bh, 0
2625   1424 38 00 00      mov c, 0
2626   1427             ; --- START RELATIONAL
2627   1427 D7            push a
2628   1428 11            mov a, b
2629   1429 FD 2E 46 00   mov32 cb, $00000046
2629   142D 00 00 
2630   142F B0            cmp a, b
2631   1430 FD 74         sle ; <= (signed)
2632   1432 E4            pop a
2633   1433             ; --- END RELATIONAL
2634   1433 FD A7         sand a, b
2635   1435 E4            pop a
2636   1436             ; --- END LOGICAL AND
2637   1436 C0 00 00      cmp b, 0
2638   1439 C6 79 14      je _if33_else
2639   143C             _if33_true:
2640   143C             ; value = (value * 16) + (hex_char - 'A' + 10); 
2641   143C FA FF FF      lea d, [bp + -1] ; $value
2642   143F DA            push d
2643   1440 FA FF FF      lea d, [bp + -1] ; $value
2644   1443 2A            mov b, [d]
2645   1444 38 00 00      mov c, 0
2646   1447             ; --- START FACTORS
2647   1447 D7            push a
2648   1448 11            mov a, b
2649   1449 FD 2E 10 00   mov32 cb, $00000010
2649   144D 00 00 
2650   144F AC            mul a, b ; *
2651   1450 11            mov a, b
2652   1451 27            mov b, a
2653   1452 E4            pop a
2654   1453             ; --- END FACTORS
2655   1453             ; --- START TERMS
2656   1453 D7            push a
2657   1454 11            mov a, b
2658   1455 FA FC FF      lea d, [bp + -4] ; $hex_char
2659   1458 32            mov bl, [d]
2660   1459 A7 00         mov bh, 0
2661   145B 38 00 00      mov c, 0
2662   145E             ; --- START TERMS
2663   145E D7            push a
2664   145F 11            mov a, b
2665   1460 FD 2E 41 00   mov32 cb, $00000041
2665   1464 00 00 
2666   1466 60            sub a, b
2667   1467 27            mov b, a
2668   1468 11            mov a, b
2669   1469 FD 2E 0A 00   mov32 cb, $0000000a
2669   146D 00 00 
2670   146F 56            add b, a
2671   1470 E4            pop a
2672   1471             ; --- END TERMS
2673   1471 56            add b, a
2674   1472 E4            pop a
2675   1473             ; --- END TERMS
2676   1473 E7            pop d
2677   1474 FD 43         mov [d], b
2678   1476 0A AB 14      jmp _if33_exit
2679   1479             _if33_else:
2680   1479             ; value = (value * 16) + (hex_char - '0'); 
2681   1479 FA FF FF      lea d, [bp + -1] ; $value
2682   147C DA            push d
2683   147D FA FF FF      lea d, [bp + -1] ; $value
2684   1480 2A            mov b, [d]
2685   1481 38 00 00      mov c, 0
2686   1484             ; --- START FACTORS
2687   1484 D7            push a
2688   1485 11            mov a, b
2689   1486 FD 2E 10 00   mov32 cb, $00000010
2689   148A 00 00 
2690   148C AC            mul a, b ; *
2691   148D 11            mov a, b
2692   148E 27            mov b, a
2693   148F E4            pop a
2694   1490             ; --- END FACTORS
2695   1490             ; --- START TERMS
2696   1490 D7            push a
2697   1491 11            mov a, b
2698   1492 FA FC FF      lea d, [bp + -4] ; $hex_char
2699   1495 32            mov bl, [d]
2700   1496 A7 00         mov bh, 0
2701   1498 38 00 00      mov c, 0
2702   149B             ; --- START TERMS
2703   149B D7            push a
2704   149C 11            mov a, b
2705   149D FD 2E 30 00   mov32 cb, $00000030
2705   14A1 00 00 
2706   14A3 60            sub a, b
2707   14A4 27            mov b, a
2708   14A5 E4            pop a
2709   14A6             ; --- END TERMS
2710   14A6 56            add b, a
2711   14A7 E4            pop a
2712   14A8             ; --- END TERMS
2713   14A8 E7            pop d
2714   14A9 FD 43         mov [d], b
2715   14AB             _if33_exit:
2716   14AB             _if32_exit:
2717   14AB             _for31_update:
2718   14AB FA FD FF      lea d, [bp + -3] ; $i
2719   14AE 2A            mov b, [d]
2720   14AF 38 00 00      mov c, 0
2721   14B2 11            mov a, b
2722   14B3 FD 77         inc b
2723   14B5 FA FD FF      lea d, [bp + -3] ; $i
2724   14B8 FD 43         mov [d], b
2725   14BA 27            mov b, a
2726   14BB 0A 5A 13      jmp _for31_cond
2727   14BE             _for31_exit:
2728   14BE             ; return value; 
2729   14BE FA FF FF      lea d, [bp + -1] ; $value
2730   14C1 2A            mov b, [d]
2731   14C2 38 00 00      mov c, 0
2732   14C5 F9            leave
2733   14C6 09            ret
2734   14C7             
2735   14C7             gets:
2736   14C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2737   14CA             
2738   14CA             ; --- BEGIN INLINE ASM SEGMENT
2739   14CA FA 05 00      lea d, [bp + 5] ; $s
2740   14CD 15            mov a, [d]
2741   14CE 3C            mov d, a
2742   14CF 07 DE 1E      call _gets
2743   14D2             ; --- END INLINE ASM SEGMENT
2744   14D2             
2745   14D2             ; return strlen(s); 
2746   14D2             ; --- START FUNCTION CALL
2747   14D2 FA 05 00      lea d, [bp + 5] ; $s
2748   14D5 2A            mov b, [d]
2749   14D6 38 00 00      mov c, 0
2750   14D9 FD AB         swp b
2751   14DB D8            push b
2752   14DC 07 2A 06      call strlen
2753   14DF 51 02 00      add sp, 2
2754   14E2             ; --- END FUNCTION CALL
2755   14E2 F9            leave
2756   14E3 09            ret
2757   14E4             
2758   14E4             print_signed:
2759   14E4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2760   14E7             ; char digits[5]; 
2761   14E7 52 05 00      sub sp, 5
2762   14EA             ; int i = 0; 
2763   14EA 52 02 00      sub sp, 2
2764   14ED             ; --- START LOCAL VAR INITIALIZATION
2765   14ED FA FA FF      lea d, [bp + -6] ; $i
2766   14F0 DA            push d
2767   14F1 FD 2E 00 00   mov32 cb, $00000000
2767   14F5 00 00 
2768   14F7 E7            pop d
2769   14F8 FD 43         mov [d], b
2770   14FA             ; --- END LOCAL VAR INITIALIZATION
2771   14FA             ; if (num < 0) { 
2772   14FA             _if34_cond:
2773   14FA FA 05 00      lea d, [bp + 5] ; $num
2774   14FD 2A            mov b, [d]
2775   14FE 38 00 00      mov c, 0
2776   1501             ; --- START RELATIONAL
2777   1501 D7            push a
2778   1502 11            mov a, b
2779   1503 FD 2E 00 00   mov32 cb, $00000000
2779   1507 00 00 
2780   1509 B0            cmp a, b
2781   150A FD 73         slt ; < (signed)
2782   150C E4            pop a
2783   150D             ; --- END RELATIONAL
2784   150D C0 00 00      cmp b, 0
2785   1510 C6 33 15      je _if34_else
2786   1513             _if34_true:
2787   1513             ; putchar('-'); 
2788   1513             ; --- START FUNCTION CALL
2789   1513 FD 2E 2D 00   mov32 cb, $0000002d
2789   1517 00 00 
2790   1519 DD            push bl
2791   151A 07 C8 1C      call putchar
2792   151D 51 01 00      add sp, 1
2793   1520             ; --- END FUNCTION CALL
2794   1520             ; num = -num; 
2795   1520 FA 05 00      lea d, [bp + 5] ; $num
2796   1523 DA            push d
2797   1524 FA 05 00      lea d, [bp + 5] ; $num
2798   1527 2A            mov b, [d]
2799   1528 38 00 00      mov c, 0
2800   152B FD 97         neg b
2801   152D E7            pop d
2802   152E FD 43         mov [d], b
2803   1530 0A 5E 15      jmp _if34_exit
2804   1533             _if34_else:
2805   1533             ; if (num == 0) { 
2806   1533             _if35_cond:
2807   1533 FA 05 00      lea d, [bp + 5] ; $num
2808   1536 2A            mov b, [d]
2809   1537 38 00 00      mov c, 0
2810   153A             ; --- START RELATIONAL
2811   153A D7            push a
2812   153B 11            mov a, b
2813   153C FD 2E 00 00   mov32 cb, $00000000
2813   1540 00 00 
2814   1542 B0            cmp a, b
2815   1543 FD 71         seq ; ==
2816   1545 E4            pop a
2817   1546             ; --- END RELATIONAL
2818   1546 C0 00 00      cmp b, 0
2819   1549 C6 5E 15      je _if35_exit
2820   154C             _if35_true:
2821   154C             ; putchar('0'); 
2822   154C             ; --- START FUNCTION CALL
2823   154C FD 2E 30 00   mov32 cb, $00000030
2823   1550 00 00 
2824   1552 DD            push bl
2825   1553 07 C8 1C      call putchar
2826   1556 51 01 00      add sp, 1
2827   1559             ; --- END FUNCTION CALL
2828   1559             ; return; 
2829   1559 F9            leave
2830   155A 09            ret
2831   155B 0A 5E 15      jmp _if35_exit
2832   155E             _if35_exit:
2833   155E             _if34_exit:
2834   155E             ; while (num > 0) { 
2835   155E             _while36_cond:
2836   155E FA 05 00      lea d, [bp + 5] ; $num
2837   1561 2A            mov b, [d]
2838   1562 38 00 00      mov c, 0
2839   1565             ; --- START RELATIONAL
2840   1565 D7            push a
2841   1566 11            mov a, b
2842   1567 FD 2E 00 00   mov32 cb, $00000000
2842   156B 00 00 
2843   156D B0            cmp a, b
2844   156E FD 7F         sgt ; >
2845   1570 E4            pop a
2846   1571             ; --- END RELATIONAL
2847   1571 C0 00 00      cmp b, 0
2848   1574 C6 D3 15      je _while36_exit
2849   1577             _while36_block:
2850   1577             ; digits[i] = '0' + (num % 10); 
2851   1577 FA FC FF      lea d, [bp + -4] ; $digits
2852   157A D7            push a
2853   157B DA            push d
2854   157C FA FA FF      lea d, [bp + -6] ; $i
2855   157F 2A            mov b, [d]
2856   1580 38 00 00      mov c, 0
2857   1583 E7            pop d
2858   1584 5A            add d, b
2859   1585 E4            pop a
2860   1586 DA            push d
2861   1587 FD 2E 30 00   mov32 cb, $00000030
2861   158B 00 00 
2862   158D             ; --- START TERMS
2863   158D D7            push a
2864   158E 11            mov a, b
2865   158F FA 05 00      lea d, [bp + 5] ; $num
2866   1592 2A            mov b, [d]
2867   1593 38 00 00      mov c, 0
2868   1596             ; --- START FACTORS
2869   1596 D7            push a
2870   1597 11            mov a, b
2871   1598 FD 2E 0A 00   mov32 cb, $0000000a
2871   159C 00 00 
2872   159E AE            div a, b ; 
2873   159F 11            mov a, b
2874   15A0 27            mov b, a
2875   15A1 E4            pop a
2876   15A2             ; --- END FACTORS
2877   15A2 56            add b, a
2878   15A3 E4            pop a
2879   15A4             ; --- END TERMS
2880   15A4 E7            pop d
2881   15A5 FD 3E         mov [d], bl
2882   15A7             ; num = num / 10; 
2883   15A7 FA 05 00      lea d, [bp + 5] ; $num
2884   15AA DA            push d
2885   15AB FA 05 00      lea d, [bp + 5] ; $num
2886   15AE 2A            mov b, [d]
2887   15AF 38 00 00      mov c, 0
2888   15B2             ; --- START FACTORS
2889   15B2 D7            push a
2890   15B3 11            mov a, b
2891   15B4 FD 2E 0A 00   mov32 cb, $0000000a
2891   15B8 00 00 
2892   15BA AE            div a, b
2893   15BB 27            mov b, a
2894   15BC E4            pop a
2895   15BD             ; --- END FACTORS
2896   15BD E7            pop d
2897   15BE FD 43         mov [d], b
2898   15C0             ; i++; 
2899   15C0 FA FA FF      lea d, [bp + -6] ; $i
2900   15C3 2A            mov b, [d]
2901   15C4 38 00 00      mov c, 0
2902   15C7 11            mov a, b
2903   15C8 FD 77         inc b
2904   15CA FA FA FF      lea d, [bp + -6] ; $i
2905   15CD FD 43         mov [d], b
2906   15CF 27            mov b, a
2907   15D0 0A 5E 15      jmp _while36_cond
2908   15D3             _while36_exit:
2909   15D3             ; while (i > 0) { 
2910   15D3             _while37_cond:
2911   15D3 FA FA FF      lea d, [bp + -6] ; $i
2912   15D6 2A            mov b, [d]
2913   15D7 38 00 00      mov c, 0
2914   15DA             ; --- START RELATIONAL
2915   15DA D7            push a
2916   15DB 11            mov a, b
2917   15DC FD 2E 00 00   mov32 cb, $00000000
2917   15E0 00 00 
2918   15E2 B0            cmp a, b
2919   15E3 FD 7F         sgt ; >
2920   15E5 E4            pop a
2921   15E6             ; --- END RELATIONAL
2922   15E6 C0 00 00      cmp b, 0
2923   15E9 C6 1B 16      je _while37_exit
2924   15EC             _while37_block:
2925   15EC             ; i--; 
2926   15EC FA FA FF      lea d, [bp + -6] ; $i
2927   15EF 2A            mov b, [d]
2928   15F0 38 00 00      mov c, 0
2929   15F3 11            mov a, b
2930   15F4 FD 7D         dec b
2931   15F6 FA FA FF      lea d, [bp + -6] ; $i
2932   15F9 FD 43         mov [d], b
2933   15FB 27            mov b, a
2934   15FC             ; putchar(digits[i]); 
2935   15FC             ; --- START FUNCTION CALL
2936   15FC FA FC FF      lea d, [bp + -4] ; $digits
2937   15FF D7            push a
2938   1600 DA            push d
2939   1601 FA FA FF      lea d, [bp + -6] ; $i
2940   1604 2A            mov b, [d]
2941   1605 38 00 00      mov c, 0
2942   1608 E7            pop d
2943   1609 5A            add d, b
2944   160A E4            pop a
2945   160B 32            mov bl, [d]
2946   160C A7 00         mov bh, 0
2947   160E 38 00 00      mov c, 0
2948   1611 DD            push bl
2949   1612 07 C8 1C      call putchar
2950   1615 51 01 00      add sp, 1
2951   1618             ; --- END FUNCTION CALL
2952   1618 0A D3 15      jmp _while37_cond
2953   161B             _while37_exit:
2954   161B F9            leave
2955   161C 09            ret
2956   161D             
2957   161D             print_signed_long:
2958   161D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2959   1620             ; char digits[10]; 
2960   1620 52 0A 00      sub sp, 10
2961   1623             ; int i = 0; 
2962   1623 52 02 00      sub sp, 2
2963   1626             ; --- START LOCAL VAR INITIALIZATION
2964   1626 FA F5 FF      lea d, [bp + -11] ; $i
2965   1629 DA            push d
2966   162A FD 2E 00 00   mov32 cb, $00000000
2966   162E 00 00 
2967   1630 E7            pop d
2968   1631 FD 43         mov [d], b
2969   1633             ; --- END LOCAL VAR INITIALIZATION
2970   1633             ; if (num < 0) { 
2971   1633             _if38_cond:
2972   1633 FA 05 00      lea d, [bp + 5] ; $num
2973   1636 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2974   1639 FD 39         mov c, b ; And place it into C
2975   163B 2A            mov b, [d] ; Lower Word in B
2976   163C             ; --- START RELATIONAL
2977   163C D7            push a
2978   163D FD D8         push g
2979   163F 11            mov a, b
2980   1640 FD 7A         mov g, c
2981   1642 FD 2E 00 00   mov32 cb, $00000000
2981   1646 00 00 
2982   1648 FD AF         cmp32 ga, cb
2983   164A FD 73         slt ; <
2984   164C FD F1         pop g
2985   164E E4            pop a
2986   164F             ; --- END RELATIONAL
2987   164F C0 00 00      cmp b, 0
2988   1652 C6 86 16      je _if38_else
2989   1655             _if38_true:
2990   1655             ; putchar('-'); 
2991   1655             ; --- START FUNCTION CALL
2992   1655 FD 2E 2D 00   mov32 cb, $0000002d
2992   1659 00 00 
2993   165B DD            push bl
2994   165C 07 C8 1C      call putchar
2995   165F 51 01 00      add sp, 1
2996   1662             ; --- END FUNCTION CALL
2997   1662             ; num = -num; 
2998   1662 FA 05 00      lea d, [bp + 5] ; $num
2999   1665 DA            push d
3000   1666 FA 05 00      lea d, [bp + 5] ; $num
3001   1669 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3002   166C FD 39         mov c, b ; And place it into C
3003   166E 2A            mov b, [d] ; Lower Word in B
3004   166F 12            mov a, c
3005   1670 95            not a
3006   1671 97            not b
3007   1672 55 01 00      add b, 1
3008   1675 5B 00 00      adc a, 0
3009   1678 39            mov c, a
3010   1679 E7            pop d
3011   167A FD 43         mov [d], b
3012   167C 26 00 00      mov b, 0
3013   167F FD 44 02 00   mov [d + 2], b
3014   1683 0A BA 16      jmp _if38_exit
3015   1686             _if38_else:
3016   1686             ; if (num == 0) { 
3017   1686             _if39_cond:
3018   1686 FA 05 00      lea d, [bp + 5] ; $num
3019   1689 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3020   168C FD 39         mov c, b ; And place it into C
3021   168E 2A            mov b, [d] ; Lower Word in B
3022   168F             ; --- START RELATIONAL
3023   168F D7            push a
3024   1690 FD D8         push g
3025   1692 11            mov a, b
3026   1693 FD 7A         mov g, c
3027   1695 FD 2E 00 00   mov32 cb, $00000000
3027   1699 00 00 
3028   169B FD AF         cmp32 ga, cb
3029   169D FD 71         seq ; ==
3030   169F FD F1         pop g
3031   16A1 E4            pop a
3032   16A2             ; --- END RELATIONAL
3033   16A2 C0 00 00      cmp b, 0
3034   16A5 C6 BA 16      je _if39_exit
3035   16A8             _if39_true:
3036   16A8             ; putchar('0'); 
3037   16A8             ; --- START FUNCTION CALL
3038   16A8 FD 2E 30 00   mov32 cb, $00000030
3038   16AC 00 00 
3039   16AE DD            push bl
3040   16AF 07 C8 1C      call putchar
3041   16B2 51 01 00      add sp, 1
3042   16B5             ; --- END FUNCTION CALL
3043   16B5             ; return; 
3044   16B5 F9            leave
3045   16B6 09            ret
3046   16B7 0A BA 16      jmp _if39_exit
3047   16BA             _if39_exit:
3048   16BA             _if38_exit:
3049   16BA             ; while (num > 0) { 
3050   16BA             _while40_cond:
3051   16BA FA 05 00      lea d, [bp + 5] ; $num
3052   16BD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3053   16C0 FD 39         mov c, b ; And place it into C
3054   16C2 2A            mov b, [d] ; Lower Word in B
3055   16C3             ; --- START RELATIONAL
3056   16C3 D7            push a
3057   16C4 FD D8         push g
3058   16C6 11            mov a, b
3059   16C7 FD 7A         mov g, c
3060   16C9 FD 2E 00 00   mov32 cb, $00000000
3060   16CD 00 00 
3061   16CF FD AF         cmp32 ga, cb
3062   16D1 FD 7F         sgt
3063   16D3 FD F1         pop g
3064   16D5 E4            pop a
3065   16D6             ; --- END RELATIONAL
3066   16D6 C0 00 00      cmp b, 0
3067   16D9 C6 42 17      je _while40_exit
3068   16DC             _while40_block:
3069   16DC             ; digits[i] = '0' + (num % 10); 
3070   16DC FA F7 FF      lea d, [bp + -9] ; $digits
3071   16DF D7            push a
3072   16E0 DA            push d
3073   16E1 FA F5 FF      lea d, [bp + -11] ; $i
3074   16E4 2A            mov b, [d]
3075   16E5 38 00 00      mov c, 0
3076   16E8 E7            pop d
3077   16E9 5A            add d, b
3078   16EA E4            pop a
3079   16EB DA            push d
3080   16EC FD 2E 30 00   mov32 cb, $00000030
3080   16F0 00 00 
3081   16F2             ; --- START TERMS
3082   16F2 D7            push a
3083   16F3 11            mov a, b
3084   16F4 FA 05 00      lea d, [bp + 5] ; $num
3085   16F7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3086   16FA FD 39         mov c, b ; And place it into C
3087   16FC 2A            mov b, [d] ; Lower Word in B
3088   16FD             ; --- START FACTORS
3089   16FD D7            push a
3090   16FE 11            mov a, b
3091   16FF FD 2E 0A 00   mov32 cb, $0000000a
3091   1703 00 00 
3092   1705 AE            div a, b ; 
3093   1706 11            mov a, b
3094   1707 27            mov b, a
3095   1708 E4            pop a
3096   1709             ; --- END FACTORS
3097   1709 FD 15         add32 cb, ga
3098   170B E4            pop a
3099   170C             ; --- END TERMS
3100   170C E7            pop d
3101   170D FD 3E         mov [d], bl
3102   170F             ; num = num / 10; 
3103   170F FA 05 00      lea d, [bp + 5] ; $num
3104   1712 DA            push d
3105   1713 FA 05 00      lea d, [bp + 5] ; $num
3106   1716 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3107   1719 FD 39         mov c, b ; And place it into C
3108   171B 2A            mov b, [d] ; Lower Word in B
3109   171C             ; --- START FACTORS
3110   171C D7            push a
3111   171D 11            mov a, b
3112   171E FD 2E 0A 00   mov32 cb, $0000000a
3112   1722 00 00 
3113   1724 AE            div a, b
3114   1725 27            mov b, a
3115   1726 E4            pop a
3116   1727             ; --- END FACTORS
3117   1727 E7            pop d
3118   1728 FD 43         mov [d], b
3119   172A 28            mov b, c
3120   172B FD 44 02 00   mov [d + 2], b
3121   172F             ; i++; 
3122   172F FA F5 FF      lea d, [bp + -11] ; $i
3123   1732 2A            mov b, [d]
3124   1733 38 00 00      mov c, 0
3125   1736 11            mov a, b
3126   1737 FD 77         inc b
3127   1739 FA F5 FF      lea d, [bp + -11] ; $i
3128   173C FD 43         mov [d], b
3129   173E 27            mov b, a
3130   173F 0A BA 16      jmp _while40_cond
3131   1742             _while40_exit:
3132   1742             ; while (i > 0) { 
3133   1742             _while41_cond:
3134   1742 FA F5 FF      lea d, [bp + -11] ; $i
3135   1745 2A            mov b, [d]
3136   1746 38 00 00      mov c, 0
3137   1749             ; --- START RELATIONAL
3138   1749 D7            push a
3139   174A 11            mov a, b
3140   174B FD 2E 00 00   mov32 cb, $00000000
3140   174F 00 00 
3141   1751 B0            cmp a, b
3142   1752 FD 7F         sgt ; >
3143   1754 E4            pop a
3144   1755             ; --- END RELATIONAL
3145   1755 C0 00 00      cmp b, 0
3146   1758 C6 8A 17      je _while41_exit
3147   175B             _while41_block:
3148   175B             ; i--; 
3149   175B FA F5 FF      lea d, [bp + -11] ; $i
3150   175E 2A            mov b, [d]
3151   175F 38 00 00      mov c, 0
3152   1762 11            mov a, b
3153   1763 FD 7D         dec b
3154   1765 FA F5 FF      lea d, [bp + -11] ; $i
3155   1768 FD 43         mov [d], b
3156   176A 27            mov b, a
3157   176B             ; putchar(digits[i]); 
3158   176B             ; --- START FUNCTION CALL
3159   176B FA F7 FF      lea d, [bp + -9] ; $digits
3160   176E D7            push a
3161   176F DA            push d
3162   1770 FA F5 FF      lea d, [bp + -11] ; $i
3163   1773 2A            mov b, [d]
3164   1774 38 00 00      mov c, 0
3165   1777 E7            pop d
3166   1778 5A            add d, b
3167   1779 E4            pop a
3168   177A 32            mov bl, [d]
3169   177B A7 00         mov bh, 0
3170   177D 38 00 00      mov c, 0
3171   1780 DD            push bl
3172   1781 07 C8 1C      call putchar
3173   1784 51 01 00      add sp, 1
3174   1787             ; --- END FUNCTION CALL
3175   1787 0A 42 17      jmp _while41_cond
3176   178A             _while41_exit:
3177   178A F9            leave
3178   178B 09            ret
3179   178C             
3180   178C             print_unsigned_long:
3181   178C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3182   178F             ; char digits[10]; 
3183   178F 52 0A 00      sub sp, 10
3184   1792             ; int i; 
3185   1792 52 02 00      sub sp, 2
3186   1795             ; i = 0; 
3187   1795 FA F5 FF      lea d, [bp + -11] ; $i
3188   1798 DA            push d
3189   1799 FD 2E 00 00   mov32 cb, $00000000
3189   179D 00 00 
3190   179F E7            pop d
3191   17A0 FD 43         mov [d], b
3192   17A2             ; if(num == 0){ 
3193   17A2             _if42_cond:
3194   17A2 FA 05 00      lea d, [bp + 5] ; $num
3195   17A5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3196   17A8 FD 39         mov c, b ; And place it into C
3197   17AA 2A            mov b, [d] ; Lower Word in B
3198   17AB             ; --- START RELATIONAL
3199   17AB D7            push a
3200   17AC FD D8         push g
3201   17AE 11            mov a, b
3202   17AF FD 7A         mov g, c
3203   17B1 FD 2E 00 00   mov32 cb, $00000000
3203   17B5 00 00 
3204   17B7 FD AF         cmp32 ga, cb
3205   17B9 FD 71         seq ; ==
3206   17BB FD F1         pop g
3207   17BD E4            pop a
3208   17BE             ; --- END RELATIONAL
3209   17BE C0 00 00      cmp b, 0
3210   17C1 C6 D6 17      je _if42_exit
3211   17C4             _if42_true:
3212   17C4             ; putchar('0'); 
3213   17C4             ; --- START FUNCTION CALL
3214   17C4 FD 2E 30 00   mov32 cb, $00000030
3214   17C8 00 00 
3215   17CA DD            push bl
3216   17CB 07 C8 1C      call putchar
3217   17CE 51 01 00      add sp, 1
3218   17D1             ; --- END FUNCTION CALL
3219   17D1             ; return; 
3220   17D1 F9            leave
3221   17D2 09            ret
3222   17D3 0A D6 17      jmp _if42_exit
3223   17D6             _if42_exit:
3224   17D6             ; while (num > 0) { 
3225   17D6             _while43_cond:
3226   17D6 FA 05 00      lea d, [bp + 5] ; $num
3227   17D9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3228   17DC FD 39         mov c, b ; And place it into C
3229   17DE 2A            mov b, [d] ; Lower Word in B
3230   17DF             ; --- START RELATIONAL
3231   17DF D7            push a
3232   17E0 FD D8         push g
3233   17E2 11            mov a, b
3234   17E3 FD 7A         mov g, c
3235   17E5 FD 2E 00 00   mov32 cb, $00000000
3235   17E9 00 00 
3236   17EB FD AF         cmp32 ga, cb
3237   17ED FD 81         sgu
3238   17EF FD F1         pop g
3239   17F1 E4            pop a
3240   17F2             ; --- END RELATIONAL
3241   17F2 C0 00 00      cmp b, 0
3242   17F5 C6 5E 18      je _while43_exit
3243   17F8             _while43_block:
3244   17F8             ; digits[i] = '0' + (num % 10); 
3245   17F8 FA F7 FF      lea d, [bp + -9] ; $digits
3246   17FB D7            push a
3247   17FC DA            push d
3248   17FD FA F5 FF      lea d, [bp + -11] ; $i
3249   1800 2A            mov b, [d]
3250   1801 38 00 00      mov c, 0
3251   1804 E7            pop d
3252   1805 5A            add d, b
3253   1806 E4            pop a
3254   1807 DA            push d
3255   1808 FD 2E 30 00   mov32 cb, $00000030
3255   180C 00 00 
3256   180E             ; --- START TERMS
3257   180E D7            push a
3258   180F 11            mov a, b
3259   1810 FA 05 00      lea d, [bp + 5] ; $num
3260   1813 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3261   1816 FD 39         mov c, b ; And place it into C
3262   1818 2A            mov b, [d] ; Lower Word in B
3263   1819             ; --- START FACTORS
3264   1819 D7            push a
3265   181A 11            mov a, b
3266   181B FD 2E 0A 00   mov32 cb, $0000000a
3266   181F 00 00 
3267   1821 AE            div a, b ; 
3268   1822 11            mov a, b
3269   1823 27            mov b, a
3270   1824 E4            pop a
3271   1825             ; --- END FACTORS
3272   1825 FD 15         add32 cb, ga
3273   1827 E4            pop a
3274   1828             ; --- END TERMS
3275   1828 E7            pop d
3276   1829 FD 3E         mov [d], bl
3277   182B             ; num = num / 10; 
3278   182B FA 05 00      lea d, [bp + 5] ; $num
3279   182E DA            push d
3280   182F FA 05 00      lea d, [bp + 5] ; $num
3281   1832 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3282   1835 FD 39         mov c, b ; And place it into C
3283   1837 2A            mov b, [d] ; Lower Word in B
3284   1838             ; --- START FACTORS
3285   1838 D7            push a
3286   1839 11            mov a, b
3287   183A FD 2E 0A 00   mov32 cb, $0000000a
3287   183E 00 00 
3288   1840 AE            div a, b
3289   1841 27            mov b, a
3290   1842 E4            pop a
3291   1843             ; --- END FACTORS
3292   1843 E7            pop d
3293   1844 FD 43         mov [d], b
3294   1846 28            mov b, c
3295   1847 FD 44 02 00   mov [d + 2], b
3296   184B             ; i++; 
3297   184B FA F5 FF      lea d, [bp + -11] ; $i
3298   184E 2A            mov b, [d]
3299   184F 38 00 00      mov c, 0
3300   1852 11            mov a, b
3301   1853 FD 77         inc b
3302   1855 FA F5 FF      lea d, [bp + -11] ; $i
3303   1858 FD 43         mov [d], b
3304   185A 27            mov b, a
3305   185B 0A D6 17      jmp _while43_cond
3306   185E             _while43_exit:
3307   185E             ; while (i > 0) { 
3308   185E             _while44_cond:
3309   185E FA F5 FF      lea d, [bp + -11] ; $i
3310   1861 2A            mov b, [d]
3311   1862 38 00 00      mov c, 0
3312   1865             ; --- START RELATIONAL
3313   1865 D7            push a
3314   1866 11            mov a, b
3315   1867 FD 2E 00 00   mov32 cb, $00000000
3315   186B 00 00 
3316   186D B0            cmp a, b
3317   186E FD 7F         sgt ; >
3318   1870 E4            pop a
3319   1871             ; --- END RELATIONAL
3320   1871 C0 00 00      cmp b, 0
3321   1874 C6 A6 18      je _while44_exit
3322   1877             _while44_block:
3323   1877             ; i--; 
3324   1877 FA F5 FF      lea d, [bp + -11] ; $i
3325   187A 2A            mov b, [d]
3326   187B 38 00 00      mov c, 0
3327   187E 11            mov a, b
3328   187F FD 7D         dec b
3329   1881 FA F5 FF      lea d, [bp + -11] ; $i
3330   1884 FD 43         mov [d], b
3331   1886 27            mov b, a
3332   1887             ; putchar(digits[i]); 
3333   1887             ; --- START FUNCTION CALL
3334   1887 FA F7 FF      lea d, [bp + -9] ; $digits
3335   188A D7            push a
3336   188B DA            push d
3337   188C FA F5 FF      lea d, [bp + -11] ; $i
3338   188F 2A            mov b, [d]
3339   1890 38 00 00      mov c, 0
3340   1893 E7            pop d
3341   1894 5A            add d, b
3342   1895 E4            pop a
3343   1896 32            mov bl, [d]
3344   1897 A7 00         mov bh, 0
3345   1899 38 00 00      mov c, 0
3346   189C DD            push bl
3347   189D 07 C8 1C      call putchar
3348   18A0 51 01 00      add sp, 1
3349   18A3             ; --- END FUNCTION CALL
3350   18A3 0A 5E 18      jmp _while44_cond
3351   18A6             _while44_exit:
3352   18A6 F9            leave
3353   18A7 09            ret
3354   18A8             
3355   18A8             sprint_unsigned:
3356   18A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3357   18AB             ; char digits[5]; 
3358   18AB 52 05 00      sub sp, 5
3359   18AE             ; int i; 
3360   18AE 52 02 00      sub sp, 2
3361   18B1             ; int len = 0; 
3362   18B1 52 02 00      sub sp, 2
3363   18B4             ; --- START LOCAL VAR INITIALIZATION
3364   18B4 FA F8 FF      lea d, [bp + -8] ; $len
3365   18B7 DA            push d
3366   18B8 FD 2E 00 00   mov32 cb, $00000000
3366   18BC 00 00 
3367   18BE E7            pop d
3368   18BF FD 43         mov [d], b
3369   18C1             ; --- END LOCAL VAR INITIALIZATION
3370   18C1             ; i = 0; 
3371   18C1 FA FA FF      lea d, [bp + -6] ; $i
3372   18C4 DA            push d
3373   18C5 FD 2E 00 00   mov32 cb, $00000000
3373   18C9 00 00 
3374   18CB E7            pop d
3375   18CC FD 43         mov [d], b
3376   18CE             ; if(num == 0){ 
3377   18CE             _if45_cond:
3378   18CE FA 07 00      lea d, [bp + 7] ; $num
3379   18D1 2A            mov b, [d]
3380   18D2 38 00 00      mov c, 0
3381   18D5             ; --- START RELATIONAL
3382   18D5 D7            push a
3383   18D6 11            mov a, b
3384   18D7 FD 2E 00 00   mov32 cb, $00000000
3384   18DB 00 00 
3385   18DD B0            cmp a, b
3386   18DE FD 71         seq ; ==
3387   18E0 E4            pop a
3388   18E1             ; --- END RELATIONAL
3389   18E1 C0 00 00      cmp b, 0
3390   18E4 C6 0C 19      je _if45_exit
3391   18E7             _if45_true:
3392   18E7             ; *dest++ = '0'; 
3393   18E7 FA 05 00      lea d, [bp + 5] ; $dest
3394   18EA 2A            mov b, [d]
3395   18EB 38 00 00      mov c, 0
3396   18EE FD 77         inc b
3397   18F0 FA 05 00      lea d, [bp + 5] ; $dest
3398   18F3 FD 3E         mov [d], bl
3399   18F5 FD 7D         dec b
3400   18F7 D8            push b
3401   18F8 FD 2E 30 00   mov32 cb, $00000030
3401   18FC 00 00 
3402   18FE E7            pop d
3403   18FF FD 3E         mov [d], bl
3404   1901             ; return 1; 
3405   1901 FD 2E 01 00   mov32 cb, $00000001
3405   1905 00 00 
3406   1907 F9            leave
3407   1908 09            ret
3408   1909 0A 0C 19      jmp _if45_exit
3409   190C             _if45_exit:
3410   190C             ; while (num > 0) { 
3411   190C             _while46_cond:
3412   190C FA 07 00      lea d, [bp + 7] ; $num
3413   190F 2A            mov b, [d]
3414   1910 38 00 00      mov c, 0
3415   1913             ; --- START RELATIONAL
3416   1913 D7            push a
3417   1914 11            mov a, b
3418   1915 FD 2E 00 00   mov32 cb, $00000000
3418   1919 00 00 
3419   191B B0            cmp a, b
3420   191C FD 81         sgu ; > (unsigned)
3421   191E E4            pop a
3422   191F             ; --- END RELATIONAL
3423   191F C0 00 00      cmp b, 0
3424   1922 C6 81 19      je _while46_exit
3425   1925             _while46_block:
3426   1925             ; digits[i] = '0' + (num % 10); 
3427   1925 FA FC FF      lea d, [bp + -4] ; $digits
3428   1928 D7            push a
3429   1929 DA            push d
3430   192A FA FA FF      lea d, [bp + -6] ; $i
3431   192D 2A            mov b, [d]
3432   192E 38 00 00      mov c, 0
3433   1931 E7            pop d
3434   1932 5A            add d, b
3435   1933 E4            pop a
3436   1934 DA            push d
3437   1935 FD 2E 30 00   mov32 cb, $00000030
3437   1939 00 00 
3438   193B             ; --- START TERMS
3439   193B D7            push a
3440   193C 11            mov a, b
3441   193D FA 07 00      lea d, [bp + 7] ; $num
3442   1940 2A            mov b, [d]
3443   1941 38 00 00      mov c, 0
3444   1944             ; --- START FACTORS
3445   1944 D7            push a
3446   1945 11            mov a, b
3447   1946 FD 2E 0A 00   mov32 cb, $0000000a
3447   194A 00 00 
3448   194C AE            div a, b ; 
3449   194D 11            mov a, b
3450   194E 27            mov b, a
3451   194F E4            pop a
3452   1950             ; --- END FACTORS
3453   1950 56            add b, a
3454   1951 E4            pop a
3455   1952             ; --- END TERMS
3456   1952 E7            pop d
3457   1953 FD 3E         mov [d], bl
3458   1955             ; num = num / 10; 
3459   1955 FA 07 00      lea d, [bp + 7] ; $num
3460   1958 DA            push d
3461   1959 FA 07 00      lea d, [bp + 7] ; $num
3462   195C 2A            mov b, [d]
3463   195D 38 00 00      mov c, 0
3464   1960             ; --- START FACTORS
3465   1960 D7            push a
3466   1961 11            mov a, b
3467   1962 FD 2E 0A 00   mov32 cb, $0000000a
3467   1966 00 00 
3468   1968 AE            div a, b
3469   1969 27            mov b, a
3470   196A E4            pop a
3471   196B             ; --- END FACTORS
3472   196B E7            pop d
3473   196C FD 43         mov [d], b
3474   196E             ; i++; 
3475   196E FA FA FF      lea d, [bp + -6] ; $i
3476   1971 2A            mov b, [d]
3477   1972 38 00 00      mov c, 0
3478   1975 11            mov a, b
3479   1976 FD 77         inc b
3480   1978 FA FA FF      lea d, [bp + -6] ; $i
3481   197B FD 43         mov [d], b
3482   197D 27            mov b, a
3483   197E 0A 0C 19      jmp _while46_cond
3484   1981             _while46_exit:
3485   1981             ; while (i > 0) { 
3486   1981             _while47_cond:
3487   1981 FA FA FF      lea d, [bp + -6] ; $i
3488   1984 2A            mov b, [d]
3489   1985 38 00 00      mov c, 0
3490   1988             ; --- START RELATIONAL
3491   1988 D7            push a
3492   1989 11            mov a, b
3493   198A FD 2E 00 00   mov32 cb, $00000000
3493   198E 00 00 
3494   1990 B0            cmp a, b
3495   1991 FD 7F         sgt ; >
3496   1993 E4            pop a
3497   1994             ; --- END RELATIONAL
3498   1994 C0 00 00      cmp b, 0
3499   1997 C6 E6 19      je _while47_exit
3500   199A             _while47_block:
3501   199A             ; i--; 
3502   199A FA FA FF      lea d, [bp + -6] ; $i
3503   199D 2A            mov b, [d]
3504   199E 38 00 00      mov c, 0
3505   19A1 11            mov a, b
3506   19A2 FD 7D         dec b
3507   19A4 FA FA FF      lea d, [bp + -6] ; $i
3508   19A7 FD 43         mov [d], b
3509   19A9 27            mov b, a
3510   19AA             ; *dest++ = digits[i]; 
3511   19AA FA 05 00      lea d, [bp + 5] ; $dest
3512   19AD 2A            mov b, [d]
3513   19AE 38 00 00      mov c, 0
3514   19B1 FD 77         inc b
3515   19B3 FA 05 00      lea d, [bp + 5] ; $dest
3516   19B6 FD 3E         mov [d], bl
3517   19B8 FD 7D         dec b
3518   19BA D8            push b
3519   19BB FA FC FF      lea d, [bp + -4] ; $digits
3520   19BE D7            push a
3521   19BF DA            push d
3522   19C0 FA FA FF      lea d, [bp + -6] ; $i
3523   19C3 2A            mov b, [d]
3524   19C4 38 00 00      mov c, 0
3525   19C7 E7            pop d
3526   19C8 5A            add d, b
3527   19C9 E4            pop a
3528   19CA 32            mov bl, [d]
3529   19CB A7 00         mov bh, 0
3530   19CD 38 00 00      mov c, 0
3531   19D0 E7            pop d
3532   19D1 FD 3E         mov [d], bl
3533   19D3             ; len++; 
3534   19D3 FA F8 FF      lea d, [bp + -8] ; $len
3535   19D6 2A            mov b, [d]
3536   19D7 38 00 00      mov c, 0
3537   19DA 11            mov a, b
3538   19DB FD 77         inc b
3539   19DD FA F8 FF      lea d, [bp + -8] ; $len
3540   19E0 FD 43         mov [d], b
3541   19E2 27            mov b, a
3542   19E3 0A 81 19      jmp _while47_cond
3543   19E6             _while47_exit:
3544   19E6             ; *dest = '\0'; 
3545   19E6 FA 05 00      lea d, [bp + 5] ; $dest
3546   19E9 2A            mov b, [d]
3547   19EA 38 00 00      mov c, 0
3548   19ED D8            push b
3549   19EE FD 2E 00 00   mov32 cb, $00000000
3549   19F2 00 00 
3550   19F4 E7            pop d
3551   19F5 FD 3E         mov [d], bl
3552   19F7             ; return len; 
3553   19F7 FA F8 FF      lea d, [bp + -8] ; $len
3554   19FA 2A            mov b, [d]
3555   19FB 38 00 00      mov c, 0
3556   19FE F9            leave
3557   19FF 09            ret
3558   1A00             
3559   1A00             print_unsigned:
3560   1A00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3561   1A03             ; char digits[5]; 
3562   1A03 52 05 00      sub sp, 5
3563   1A06             ; int i; 
3564   1A06 52 02 00      sub sp, 2
3565   1A09             ; i = 0; 
3566   1A09 FA FA FF      lea d, [bp + -6] ; $i
3567   1A0C DA            push d
3568   1A0D FD 2E 00 00   mov32 cb, $00000000
3568   1A11 00 00 
3569   1A13 E7            pop d
3570   1A14 FD 43         mov [d], b
3571   1A16             ; if(num == 0){ 
3572   1A16             _if48_cond:
3573   1A16 FA 05 00      lea d, [bp + 5] ; $num
3574   1A19 2A            mov b, [d]
3575   1A1A 38 00 00      mov c, 0
3576   1A1D             ; --- START RELATIONAL
3577   1A1D D7            push a
3578   1A1E 11            mov a, b
3579   1A1F FD 2E 00 00   mov32 cb, $00000000
3579   1A23 00 00 
3580   1A25 B0            cmp a, b
3581   1A26 FD 71         seq ; ==
3582   1A28 E4            pop a
3583   1A29             ; --- END RELATIONAL
3584   1A29 C0 00 00      cmp b, 0
3585   1A2C C6 41 1A      je _if48_exit
3586   1A2F             _if48_true:
3587   1A2F             ; putchar('0'); 
3588   1A2F             ; --- START FUNCTION CALL
3589   1A2F FD 2E 30 00   mov32 cb, $00000030
3589   1A33 00 00 
3590   1A35 DD            push bl
3591   1A36 07 C8 1C      call putchar
3592   1A39 51 01 00      add sp, 1
3593   1A3C             ; --- END FUNCTION CALL
3594   1A3C             ; return; 
3595   1A3C F9            leave
3596   1A3D 09            ret
3597   1A3E 0A 41 1A      jmp _if48_exit
3598   1A41             _if48_exit:
3599   1A41             ; while (num > 0) { 
3600   1A41             _while49_cond:
3601   1A41 FA 05 00      lea d, [bp + 5] ; $num
3602   1A44 2A            mov b, [d]
3603   1A45 38 00 00      mov c, 0
3604   1A48             ; --- START RELATIONAL
3605   1A48 D7            push a
3606   1A49 11            mov a, b
3607   1A4A FD 2E 00 00   mov32 cb, $00000000
3607   1A4E 00 00 
3608   1A50 B0            cmp a, b
3609   1A51 FD 81         sgu ; > (unsigned)
3610   1A53 E4            pop a
3611   1A54             ; --- END RELATIONAL
3612   1A54 C0 00 00      cmp b, 0
3613   1A57 C6 B6 1A      je _while49_exit
3614   1A5A             _while49_block:
3615   1A5A             ; digits[i] = '0' + (num % 10); 
3616   1A5A FA FC FF      lea d, [bp + -4] ; $digits
3617   1A5D D7            push a
3618   1A5E DA            push d
3619   1A5F FA FA FF      lea d, [bp + -6] ; $i
3620   1A62 2A            mov b, [d]
3621   1A63 38 00 00      mov c, 0
3622   1A66 E7            pop d
3623   1A67 5A            add d, b
3624   1A68 E4            pop a
3625   1A69 DA            push d
3626   1A6A FD 2E 30 00   mov32 cb, $00000030
3626   1A6E 00 00 
3627   1A70             ; --- START TERMS
3628   1A70 D7            push a
3629   1A71 11            mov a, b
3630   1A72 FA 05 00      lea d, [bp + 5] ; $num
3631   1A75 2A            mov b, [d]
3632   1A76 38 00 00      mov c, 0
3633   1A79             ; --- START FACTORS
3634   1A79 D7            push a
3635   1A7A 11            mov a, b
3636   1A7B FD 2E 0A 00   mov32 cb, $0000000a
3636   1A7F 00 00 
3637   1A81 AE            div a, b ; 
3638   1A82 11            mov a, b
3639   1A83 27            mov b, a
3640   1A84 E4            pop a
3641   1A85             ; --- END FACTORS
3642   1A85 56            add b, a
3643   1A86 E4            pop a
3644   1A87             ; --- END TERMS
3645   1A87 E7            pop d
3646   1A88 FD 3E         mov [d], bl
3647   1A8A             ; num = num / 10; 
3648   1A8A FA 05 00      lea d, [bp + 5] ; $num
3649   1A8D DA            push d
3650   1A8E FA 05 00      lea d, [bp + 5] ; $num
3651   1A91 2A            mov b, [d]
3652   1A92 38 00 00      mov c, 0
3653   1A95             ; --- START FACTORS
3654   1A95 D7            push a
3655   1A96 11            mov a, b
3656   1A97 FD 2E 0A 00   mov32 cb, $0000000a
3656   1A9B 00 00 
3657   1A9D AE            div a, b
3658   1A9E 27            mov b, a
3659   1A9F E4            pop a
3660   1AA0             ; --- END FACTORS
3661   1AA0 E7            pop d
3662   1AA1 FD 43         mov [d], b
3663   1AA3             ; i++; 
3664   1AA3 FA FA FF      lea d, [bp + -6] ; $i
3665   1AA6 2A            mov b, [d]
3666   1AA7 38 00 00      mov c, 0
3667   1AAA 11            mov a, b
3668   1AAB FD 77         inc b
3669   1AAD FA FA FF      lea d, [bp + -6] ; $i
3670   1AB0 FD 43         mov [d], b
3671   1AB2 27            mov b, a
3672   1AB3 0A 41 1A      jmp _while49_cond
3673   1AB6             _while49_exit:
3674   1AB6             ; while (i > 0) { 
3675   1AB6             _while50_cond:
3676   1AB6 FA FA FF      lea d, [bp + -6] ; $i
3677   1AB9 2A            mov b, [d]
3678   1ABA 38 00 00      mov c, 0
3679   1ABD             ; --- START RELATIONAL
3680   1ABD D7            push a
3681   1ABE 11            mov a, b
3682   1ABF FD 2E 00 00   mov32 cb, $00000000
3682   1AC3 00 00 
3683   1AC5 B0            cmp a, b
3684   1AC6 FD 7F         sgt ; >
3685   1AC8 E4            pop a
3686   1AC9             ; --- END RELATIONAL
3687   1AC9 C0 00 00      cmp b, 0
3688   1ACC C6 FE 1A      je _while50_exit
3689   1ACF             _while50_block:
3690   1ACF             ; i--; 
3691   1ACF FA FA FF      lea d, [bp + -6] ; $i
3692   1AD2 2A            mov b, [d]
3693   1AD3 38 00 00      mov c, 0
3694   1AD6 11            mov a, b
3695   1AD7 FD 7D         dec b
3696   1AD9 FA FA FF      lea d, [bp + -6] ; $i
3697   1ADC FD 43         mov [d], b
3698   1ADE 27            mov b, a
3699   1ADF             ; putchar(digits[i]); 
3700   1ADF             ; --- START FUNCTION CALL
3701   1ADF FA FC FF      lea d, [bp + -4] ; $digits
3702   1AE2 D7            push a
3703   1AE3 DA            push d
3704   1AE4 FA FA FF      lea d, [bp + -6] ; $i
3705   1AE7 2A            mov b, [d]
3706   1AE8 38 00 00      mov c, 0
3707   1AEB E7            pop d
3708   1AEC 5A            add d, b
3709   1AED E4            pop a
3710   1AEE 32            mov bl, [d]
3711   1AEF A7 00         mov bh, 0
3712   1AF1 38 00 00      mov c, 0
3713   1AF4 DD            push bl
3714   1AF5 07 C8 1C      call putchar
3715   1AF8 51 01 00      add sp, 1
3716   1AFB             ; --- END FUNCTION CALL
3717   1AFB 0A B6 1A      jmp _while50_cond
3718   1AFE             _while50_exit:
3719   1AFE F9            leave
3720   1AFF 09            ret
3721   1B00             
3722   1B00             sprint_signed:
3723   1B00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3724   1B03             ; char digits[5]; 
3725   1B03 52 05 00      sub sp, 5
3726   1B06             ; int i = 0; 
3727   1B06 52 02 00      sub sp, 2
3728   1B09             ; --- START LOCAL VAR INITIALIZATION
3729   1B09 FA FA FF      lea d, [bp + -6] ; $i
3730   1B0C DA            push d
3731   1B0D FD 2E 00 00   mov32 cb, $00000000
3731   1B11 00 00 
3732   1B13 E7            pop d
3733   1B14 FD 43         mov [d], b
3734   1B16             ; --- END LOCAL VAR INITIALIZATION
3735   1B16             ; int len = 0; 
3736   1B16 52 02 00      sub sp, 2
3737   1B19             ; --- START LOCAL VAR INITIALIZATION
3738   1B19 FA F8 FF      lea d, [bp + -8] ; $len
3739   1B1C DA            push d
3740   1B1D FD 2E 00 00   mov32 cb, $00000000
3740   1B21 00 00 
3741   1B23 E7            pop d
3742   1B24 FD 43         mov [d], b
3743   1B26             ; --- END LOCAL VAR INITIALIZATION
3744   1B26             ; if (num < 0) { 
3745   1B26             _if51_cond:
3746   1B26 FA 07 00      lea d, [bp + 7] ; $num
3747   1B29 2A            mov b, [d]
3748   1B2A 38 00 00      mov c, 0
3749   1B2D             ; --- START RELATIONAL
3750   1B2D D7            push a
3751   1B2E 11            mov a, b
3752   1B2F FD 2E 00 00   mov32 cb, $00000000
3752   1B33 00 00 
3753   1B35 B0            cmp a, b
3754   1B36 FD 73         slt ; < (signed)
3755   1B38 E4            pop a
3756   1B39             ; --- END RELATIONAL
3757   1B39 C0 00 00      cmp b, 0
3758   1B3C C6 7C 1B      je _if51_else
3759   1B3F             _if51_true:
3760   1B3F             ; *dest++ = '-'; 
3761   1B3F FA 05 00      lea d, [bp + 5] ; $dest
3762   1B42 2A            mov b, [d]
3763   1B43 38 00 00      mov c, 0
3764   1B46 FD 77         inc b
3765   1B48 FA 05 00      lea d, [bp + 5] ; $dest
3766   1B4B FD 3E         mov [d], bl
3767   1B4D FD 7D         dec b
3768   1B4F D8            push b
3769   1B50 FD 2E 2D 00   mov32 cb, $0000002d
3769   1B54 00 00 
3770   1B56 E7            pop d
3771   1B57 FD 3E         mov [d], bl
3772   1B59             ; num = -num; 
3773   1B59 FA 07 00      lea d, [bp + 7] ; $num
3774   1B5C DA            push d
3775   1B5D FA 07 00      lea d, [bp + 7] ; $num
3776   1B60 2A            mov b, [d]
3777   1B61 38 00 00      mov c, 0
3778   1B64 FD 97         neg b
3779   1B66 E7            pop d
3780   1B67 FD 43         mov [d], b
3781   1B69             ; len++; 
3782   1B69 FA F8 FF      lea d, [bp + -8] ; $len
3783   1B6C 2A            mov b, [d]
3784   1B6D 38 00 00      mov c, 0
3785   1B70 11            mov a, b
3786   1B71 FD 77         inc b
3787   1B73 FA F8 FF      lea d, [bp + -8] ; $len
3788   1B76 FD 43         mov [d], b
3789   1B78 27            mov b, a
3790   1B79 0A CB 1B      jmp _if51_exit
3791   1B7C             _if51_else:
3792   1B7C             ; if (num == 0) { 
3793   1B7C             _if52_cond:
3794   1B7C FA 07 00      lea d, [bp + 7] ; $num
3795   1B7F 2A            mov b, [d]
3796   1B80 38 00 00      mov c, 0
3797   1B83             ; --- START RELATIONAL
3798   1B83 D7            push a
3799   1B84 11            mov a, b
3800   1B85 FD 2E 00 00   mov32 cb, $00000000
3800   1B89 00 00 
3801   1B8B B0            cmp a, b
3802   1B8C FD 71         seq ; ==
3803   1B8E E4            pop a
3804   1B8F             ; --- END RELATIONAL
3805   1B8F C0 00 00      cmp b, 0
3806   1B92 C6 CB 1B      je _if52_exit
3807   1B95             _if52_true:
3808   1B95             ; *dest++ = '0'; 
3809   1B95 FA 05 00      lea d, [bp + 5] ; $dest
3810   1B98 2A            mov b, [d]
3811   1B99 38 00 00      mov c, 0
3812   1B9C FD 77         inc b
3813   1B9E FA 05 00      lea d, [bp + 5] ; $dest
3814   1BA1 FD 3E         mov [d], bl
3815   1BA3 FD 7D         dec b
3816   1BA5 D8            push b
3817   1BA6 FD 2E 30 00   mov32 cb, $00000030
3817   1BAA 00 00 
3818   1BAC E7            pop d
3819   1BAD FD 3E         mov [d], bl
3820   1BAF             ; *dest = '\0'; 
3821   1BAF FA 05 00      lea d, [bp + 5] ; $dest
3822   1BB2 2A            mov b, [d]
3823   1BB3 38 00 00      mov c, 0
3824   1BB6 D8            push b
3825   1BB7 FD 2E 00 00   mov32 cb, $00000000
3825   1BBB 00 00 
3826   1BBD E7            pop d
3827   1BBE FD 3E         mov [d], bl
3828   1BC0             ; return 1; 
3829   1BC0 FD 2E 01 00   mov32 cb, $00000001
3829   1BC4 00 00 
3830   1BC6 F9            leave
3831   1BC7 09            ret
3832   1BC8 0A CB 1B      jmp _if52_exit
3833   1BCB             _if52_exit:
3834   1BCB             _if51_exit:
3835   1BCB             ; while (num > 0) { 
3836   1BCB             _while53_cond:
3837   1BCB FA 07 00      lea d, [bp + 7] ; $num
3838   1BCE 2A            mov b, [d]
3839   1BCF 38 00 00      mov c, 0
3840   1BD2             ; --- START RELATIONAL
3841   1BD2 D7            push a
3842   1BD3 11            mov a, b
3843   1BD4 FD 2E 00 00   mov32 cb, $00000000
3843   1BD8 00 00 
3844   1BDA B0            cmp a, b
3845   1BDB FD 7F         sgt ; >
3846   1BDD E4            pop a
3847   1BDE             ; --- END RELATIONAL
3848   1BDE C0 00 00      cmp b, 0
3849   1BE1 C6 40 1C      je _while53_exit
3850   1BE4             _while53_block:
3851   1BE4             ; digits[i] = '0' + (num % 10); 
3852   1BE4 FA FC FF      lea d, [bp + -4] ; $digits
3853   1BE7 D7            push a
3854   1BE8 DA            push d
3855   1BE9 FA FA FF      lea d, [bp + -6] ; $i
3856   1BEC 2A            mov b, [d]
3857   1BED 38 00 00      mov c, 0
3858   1BF0 E7            pop d
3859   1BF1 5A            add d, b
3860   1BF2 E4            pop a
3861   1BF3 DA            push d
3862   1BF4 FD 2E 30 00   mov32 cb, $00000030
3862   1BF8 00 00 
3863   1BFA             ; --- START TERMS
3864   1BFA D7            push a
3865   1BFB 11            mov a, b
3866   1BFC FA 07 00      lea d, [bp + 7] ; $num
3867   1BFF 2A            mov b, [d]
3868   1C00 38 00 00      mov c, 0
3869   1C03             ; --- START FACTORS
3870   1C03 D7            push a
3871   1C04 11            mov a, b
3872   1C05 FD 2E 0A 00   mov32 cb, $0000000a
3872   1C09 00 00 
3873   1C0B AE            div a, b ; 
3874   1C0C 11            mov a, b
3875   1C0D 27            mov b, a
3876   1C0E E4            pop a
3877   1C0F             ; --- END FACTORS
3878   1C0F 56            add b, a
3879   1C10 E4            pop a
3880   1C11             ; --- END TERMS
3881   1C11 E7            pop d
3882   1C12 FD 3E         mov [d], bl
3883   1C14             ; num = num / 10; 
3884   1C14 FA 07 00      lea d, [bp + 7] ; $num
3885   1C17 DA            push d
3886   1C18 FA 07 00      lea d, [bp + 7] ; $num
3887   1C1B 2A            mov b, [d]
3888   1C1C 38 00 00      mov c, 0
3889   1C1F             ; --- START FACTORS
3890   1C1F D7            push a
3891   1C20 11            mov a, b
3892   1C21 FD 2E 0A 00   mov32 cb, $0000000a
3892   1C25 00 00 
3893   1C27 AE            div a, b
3894   1C28 27            mov b, a
3895   1C29 E4            pop a
3896   1C2A             ; --- END FACTORS
3897   1C2A E7            pop d
3898   1C2B FD 43         mov [d], b
3899   1C2D             ; i++; 
3900   1C2D FA FA FF      lea d, [bp + -6] ; $i
3901   1C30 2A            mov b, [d]
3902   1C31 38 00 00      mov c, 0
3903   1C34 11            mov a, b
3904   1C35 FD 77         inc b
3905   1C37 FA FA FF      lea d, [bp + -6] ; $i
3906   1C3A FD 43         mov [d], b
3907   1C3C 27            mov b, a
3908   1C3D 0A CB 1B      jmp _while53_cond
3909   1C40             _while53_exit:
3910   1C40             ; while (i > 0) { 
3911   1C40             _while54_cond:
3912   1C40 FA FA FF      lea d, [bp + -6] ; $i
3913   1C43 2A            mov b, [d]
3914   1C44 38 00 00      mov c, 0
3915   1C47             ; --- START RELATIONAL
3916   1C47 D7            push a
3917   1C48 11            mov a, b
3918   1C49 FD 2E 00 00   mov32 cb, $00000000
3918   1C4D 00 00 
3919   1C4F B0            cmp a, b
3920   1C50 FD 7F         sgt ; >
3921   1C52 E4            pop a
3922   1C53             ; --- END RELATIONAL
3923   1C53 C0 00 00      cmp b, 0
3924   1C56 C6 A5 1C      je _while54_exit
3925   1C59             _while54_block:
3926   1C59             ; i--; 
3927   1C59 FA FA FF      lea d, [bp + -6] ; $i
3928   1C5C 2A            mov b, [d]
3929   1C5D 38 00 00      mov c, 0
3930   1C60 11            mov a, b
3931   1C61 FD 7D         dec b
3932   1C63 FA FA FF      lea d, [bp + -6] ; $i
3933   1C66 FD 43         mov [d], b
3934   1C68 27            mov b, a
3935   1C69             ; *dest++ = digits[i]; 
3936   1C69 FA 05 00      lea d, [bp + 5] ; $dest
3937   1C6C 2A            mov b, [d]
3938   1C6D 38 00 00      mov c, 0
3939   1C70 FD 77         inc b
3940   1C72 FA 05 00      lea d, [bp + 5] ; $dest
3941   1C75 FD 3E         mov [d], bl
3942   1C77 FD 7D         dec b
3943   1C79 D8            push b
3944   1C7A FA FC FF      lea d, [bp + -4] ; $digits
3945   1C7D D7            push a
3946   1C7E DA            push d
3947   1C7F FA FA FF      lea d, [bp + -6] ; $i
3948   1C82 2A            mov b, [d]
3949   1C83 38 00 00      mov c, 0
3950   1C86 E7            pop d
3951   1C87 5A            add d, b
3952   1C88 E4            pop a
3953   1C89 32            mov bl, [d]
3954   1C8A A7 00         mov bh, 0
3955   1C8C 38 00 00      mov c, 0
3956   1C8F E7            pop d
3957   1C90 FD 3E         mov [d], bl
3958   1C92             ; len++; 
3959   1C92 FA F8 FF      lea d, [bp + -8] ; $len
3960   1C95 2A            mov b, [d]
3961   1C96 38 00 00      mov c, 0
3962   1C99 11            mov a, b
3963   1C9A FD 77         inc b
3964   1C9C FA F8 FF      lea d, [bp + -8] ; $len
3965   1C9F FD 43         mov [d], b
3966   1CA1 27            mov b, a
3967   1CA2 0A 40 1C      jmp _while54_cond
3968   1CA5             _while54_exit:
3969   1CA5             ; *dest = '\0'; 
3970   1CA5 FA 05 00      lea d, [bp + 5] ; $dest
3971   1CA8 2A            mov b, [d]
3972   1CA9 38 00 00      mov c, 0
3973   1CAC D8            push b
3974   1CAD FD 2E 00 00   mov32 cb, $00000000
3974   1CB1 00 00 
3975   1CB3 E7            pop d
3976   1CB4 FD 3E         mov [d], bl
3977   1CB6             ; return len; 
3978   1CB6 FA F8 FF      lea d, [bp + -8] ; $len
3979   1CB9 2A            mov b, [d]
3980   1CBA 38 00 00      mov c, 0
3981   1CBD F9            leave
3982   1CBE 09            ret
3983   1CBF             
3984   1CBF             date:
3985   1CBF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3986   1CC2             
3987   1CC2             ; --- BEGIN INLINE ASM SEGMENT
3988   1CC2 19 00         mov al, 0 
3989   1CC4 05 07         syscall sys_datetime
3990   1CC6             ; --- END INLINE ASM SEGMENT
3991   1CC6             
3992   1CC6 F9            leave
3993   1CC7 09            ret
3994   1CC8             
3995   1CC8             putchar:
3996   1CC8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3997   1CCB             
3998   1CCB             ; --- BEGIN INLINE ASM SEGMENT
3999   1CCB FA 05 00      lea d, [bp + 5] ; $c
4000   1CCE 1E            mov al, [d]
4001   1CCF 23            mov ah, al
4002   1CD0 07 D7 1E      call _putchar
4003   1CD3             ; --- END INLINE ASM SEGMENT
4004   1CD3             
4005   1CD3 F9            leave
4006   1CD4 09            ret
4007   1CD5             
4008   1CD5             getchar:
4009   1CD5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4010   1CD8             ; char c; 
4011   1CD8 52 01 00      sub sp, 1
4012   1CDB             
4013   1CDB             ; --- BEGIN INLINE ASM SEGMENT
4014   1CDB 07 D0 1E      call getch
4015   1CDE 1A            mov al, ah
4016   1CDF FA 00 00      lea d, [bp + 0] ; $c
4017   1CE2 3E            mov [d], al
4018   1CE3             ; --- END INLINE ASM SEGMENT
4019   1CE3             
4020   1CE3             ; return c; 
4021   1CE3 FA 00 00      lea d, [bp + 0] ; $c
4022   1CE6 32            mov bl, [d]
4023   1CE7 A7 00         mov bh, 0
4024   1CE9 38 00 00      mov c, 0
4025   1CEC F9            leave
4026   1CED 09            ret
4027   1CEE             
4028   1CEE             scann:
4029   1CEE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4030   1CF1             ; int m; 
4031   1CF1 52 02 00      sub sp, 2
4032   1CF4             
4033   1CF4             ; --- BEGIN INLINE ASM SEGMENT
4034   1CF4 07 1B 21      call scan_u16d
4035   1CF7 FA FF FF      lea d, [bp + -1] ; $m
4036   1CFA 43            mov [d], a
4037   1CFB             ; --- END INLINE ASM SEGMENT
4038   1CFB             
4039   1CFB             ; return m; 
4040   1CFB FA FF FF      lea d, [bp + -1] ; $m
4041   1CFE 2A            mov b, [d]
4042   1CFF 38 00 00      mov c, 0
4043   1D02 F9            leave
4044   1D03 09            ret
4045   1D04             
4046   1D04             puts:
4047   1D04 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4048   1D07             
4049   1D07             ; --- BEGIN INLINE ASM SEGMENT
4050   1D07 FA 05 00      lea d, [bp + 5] ; $s
4051   1D0A 15            mov a, [d]
4052   1D0B 3C            mov d, a
4053   1D0C 07 21 20      call _puts
4054   1D0F 10 00 0A      mov a, $0A00
4055   1D12 05 03         syscall sys_io
4056   1D14             ; --- END INLINE ASM SEGMENT
4057   1D14             
4058   1D14 F9            leave
4059   1D15 09            ret
4060   1D16             
4061   1D16             print:
4062   1D16 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4063   1D19             
4064   1D19             ; --- BEGIN INLINE ASM SEGMENT
4065   1D19 FA 05 00      lea d, [bp + 5] ; $s
4066   1D1C FD 2A         mov d, [d]
4067   1D1E 07 21 20      call _puts
4068   1D21             ; --- END INLINE ASM SEGMENT
4069   1D21             
4070   1D21 F9            leave
4071   1D22 09            ret
4072   1D23             
4073   1D23             getparam:
4074   1D23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4075   1D26             ; char data; 
4076   1D26 52 01 00      sub sp, 1
4077   1D29             
4078   1D29             ; --- BEGIN INLINE ASM SEGMENT
4079   1D29 19 04         mov al, 4
4080   1D2B FA 05 00      lea d, [bp + 5] ; $address
4081   1D2E FD 2A         mov d, [d]
4082   1D30 05 0C         syscall sys_system
4083   1D32 FA 00 00      lea d, [bp + 0] ; $data
4084   1D35 FD 3E         mov [d], bl
4085   1D37             ; --- END INLINE ASM SEGMENT
4086   1D37             
4087   1D37             ; return data; 
4088   1D37 FA 00 00      lea d, [bp + 0] ; $data
4089   1D3A 32            mov bl, [d]
4090   1D3B A7 00         mov bh, 0
4091   1D3D 38 00 00      mov c, 0
4092   1D40 F9            leave
4093   1D41 09            ret
4094   1D42             
4095   1D42             clear:
4096   1D42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4097   1D45             ; print("\033[2J\033[H"); 
4098   1D45             ; --- START FUNCTION CALL
4099   1D45 26 C0 21      mov b, _s2 ; "\033[2J\033[H"
4100   1D48 FD AB         swp b
4101   1D4A D8            push b
4102   1D4B 07 16 1D      call print
4103   1D4E 51 02 00      add sp, 2
4104   1D51             ; --- END FUNCTION CALL
4105   1D51 F9            leave
4106   1D52 09            ret
4107   1D53             
4108   1D53             abs:
4109   1D53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4110   1D56             ; return i < 0 ? -i : i; 
4111   1D56             _ternary55_cond:
4112   1D56 FA 05 00      lea d, [bp + 5] ; $i
4113   1D59 2A            mov b, [d]
4114   1D5A 38 00 00      mov c, 0
4115   1D5D             ; --- START RELATIONAL
4116   1D5D D7            push a
4117   1D5E 11            mov a, b
4118   1D5F FD 2E 00 00   mov32 cb, $00000000
4118   1D63 00 00 
4119   1D65 B0            cmp a, b
4120   1D66 FD 73         slt ; < (signed)
4121   1D68 E4            pop a
4122   1D69             ; --- END RELATIONAL
4123   1D69 C0 00 00      cmp b, 0
4124   1D6C C6 7B 1D      je _ternary55_false
4125   1D6F             _ternary55_true:
4126   1D6F FA 05 00      lea d, [bp + 5] ; $i
4127   1D72 2A            mov b, [d]
4128   1D73 38 00 00      mov c, 0
4129   1D76 FD 97         neg b
4130   1D78 0A 82 1D      jmp _ternary55_exit
4131   1D7B             _ternary55_false:
4132   1D7B FA 05 00      lea d, [bp + 5] ; $i
4133   1D7E 2A            mov b, [d]
4134   1D7F 38 00 00      mov c, 0
4135   1D82             _ternary55_exit:
4136   1D82 F9            leave
4137   1D83 09            ret
4138   1D84             
4139   1D84             loadfile:
4140   1D84 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4141   1D87             
4142   1D87             ; --- BEGIN INLINE ASM SEGMENT
4143   1D87 FA 07 00      lea d, [bp + 7] ; $destination
4144   1D8A 15            mov a, [d]
4145   1D8B 4F            mov di, a
4146   1D8C FA 05 00      lea d, [bp + 5] ; $filename
4147   1D8F FD 2A         mov d, [d]
4148   1D91 19 14         mov al, 20
4149   1D93 05 04         syscall sys_filesystem
4150   1D95             ; --- END INLINE ASM SEGMENT
4151   1D95             
4152   1D95 F9            leave
4153   1D96 09            ret
4154   1D97             
4155   1D97             create_file:
4156   1D97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4157   1D9A F9            leave
4158   1D9B 09            ret
4159   1D9C             
4160   1D9C             delete_file:
4161   1D9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4162   1D9F             
4163   1D9F             ; --- BEGIN INLINE ASM SEGMENT
4164   1D9F FA 05 00      lea d, [bp + 5] ; $filename
4165   1DA2 19 0A         mov al, 10
4166   1DA4 05 04         syscall sys_filesystem
4167   1DA6             ; --- END INLINE ASM SEGMENT
4168   1DA6             
4169   1DA6 F9            leave
4170   1DA7 09            ret
4171   1DA8             
4172   1DA8             load_hex:
4173   1DA8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4174   1DAB             ; char *temp; 
4175   1DAB 52 02 00      sub sp, 2
4176   1DAE             ; temp = alloc(32768); 
4177   1DAE FA FF FF      lea d, [bp + -1] ; $temp
4178   1DB1 DA            push d
4179   1DB2             ; --- START FUNCTION CALL
4180   1DB2 FD 2E 00 80   mov32 cb, $00008000
4180   1DB6 00 00 
4181   1DB8 FD AB         swp b
4182   1DBA D8            push b
4183   1DBB 07 87 08      call alloc
4184   1DBE 51 02 00      add sp, 2
4185   1DC1             ; --- END FUNCTION CALL
4186   1DC1 E7            pop d
4187   1DC2 FD 43         mov [d], b
4188   1DC4             
4189   1DC4             ; --- BEGIN INLINE ASM SEGMENT
4190   1DC4               
4191   1DC4               
4192   1DC4               
4193   1DC4             _load_hex:
4194   1DC4 FA 05 00      lea d, [bp + 5] ; $destination
4195   1DC7 FD 2A         mov d, [d]
4196   1DC9 FD 50         mov di, d
4197   1DCB FA FF FF      lea d, [bp + -1] ; $temp
4198   1DCE FD 2A         mov d, [d]
4199   1DD0 38 00 00      mov c, 0
4200   1DD3 48            mov a, sp
4201   1DD4 77            inc a
4202   1DD5 3C            mov d, a          
4203   1DD6 07 DE 1E      call _gets        
4204   1DD9 4D            mov si, a
4205   1DDA             __load_hex_loop:
4206   1DDA F6            lodsb             
4207   1DDB B9 00         cmp al, 0         
4208   1DDD C6 EB 1D      jz __load_hex_ret
4209   1DE0 36            mov bh, al
4210   1DE1 F6            lodsb
4211   1DE2 2F            mov bl, al
4212   1DE3 07 95 1E      call _atoi        
4213   1DE6 F7            stosb             
4214   1DE7 78            inc c
4215   1DE8 0A DA 1D      jmp __load_hex_loop
4216   1DEB             __load_hex_ret:
4217   1DEB             ; --- END INLINE ASM SEGMENT
4218   1DEB             
4219   1DEB F9            leave
4220   1DEC 09            ret
4221   1DED             
4222   1DED             include_stdio_asm:
4223   1DED F8 00 00      enter 0 ; (push bp; mov bp, sp)
4224   1DF0             
4225   1DF0             ; --- BEGIN INLINE ASM SEGMENT
4226   1DF0             .include "lib/asm/stdio.asm"
0001+  1DF0             ;-----------------------------------------------------------------------------
0002+  1DF0             ; stdio.s
0003+  1DF0             ;-----------------------------------------------------------------------------
0004+  1DF0             .include "lib/asm/string.asm"
0001++ 1DF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1DF0             ; string.s
0003++ 1DF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1DF0             
0005++ 1DF0             
0006++ 1DF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1DF0             ; _strrev
0008++ 1DF0             ; reverse a string
0009++ 1DF0             ; D = string address
0010++ 1DF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1DF0             ; 01234
0012++ 1DF0             _strrev:
0013++ 1DF0 4B          	pusha
0014++ 1DF1 07 37 1E    	call _strlen	; length in C
0015++ 1DF4 12          	mov a, c
0016++ 1DF5 AF 01 00    	cmp a, 1
0017++ 1DF8 D0 12 1E    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1DFB 7D          	dec a
0019++ 1DFC FD 4E       	mov si, d	; beginning of string
0020++ 1DFE FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1E00 59          	add d, a	; end of string
0022++ 1E01 12          	mov a, c
0023++ 1E02 FD 9B       	shr a		; divide by 2
0024++ 1E04 39          	mov c, a	; C now counts the steps
0025++ 1E05             _strrev_L0:
0026++ 1E05 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1E06 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1E07 3E          	mov [d], al	; store left char into right side
0029++ 1E08 1B          	mov al, bl
0030++ 1E09 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1E0A 7E          	dec c
0032++ 1E0B 7F          	dec d
0033++ 1E0C C2 00 00    	cmp c, 0
0034++ 1E0F C7 05 1E    	jne _strrev_L0
0035++ 1E12             _strrev_end:
0036++ 1E12 4C          	popa
0037++ 1E13 09          	ret
0038++ 1E14             	
0039++ 1E14             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1E14             ; _strchr
0041++ 1E14             ; search string in D for char in AL
0042++ 1E14             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1E14             _strchr:
0044++ 1E14             _strchr_L0:
0045++ 1E14 32          	mov bl, [d]
0046++ 1E15 C1 00       	cmp bl, 0
0047++ 1E17 C6 22 1E    	je _strchr_end
0048++ 1E1A BA          	cmp al, bl
0049++ 1E1B C6 22 1E    	je _strchr_end
0050++ 1E1E 79          	inc d
0051++ 1E1F 0A 14 1E    	jmp _strchr_L0
0052++ 1E22             _strchr_end:
0053++ 1E22 1B          	mov al, bl
0054++ 1E23 09          	ret
0055++ 1E24             
0056++ 1E24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1E24             ; _strstr
0058++ 1E24             ; find sub-string
0059++ 1E24             ; str1 in SI
0060++ 1E24             ; str2 in DI
0061++ 1E24             ; SI points to end of source string
0062++ 1E24             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1E24             _strstr:
0064++ 1E24 DB          	push al
0065++ 1E25 DA          	push d
0066++ 1E26 E3          	push di
0067++ 1E27             _strstr_loop:
0068++ 1E27 F3          	cmpsb					; compare a byte of the strings
0069++ 1E28 C7 33 1E    	jne _strstr_ret
0070++ 1E2B FC 00 00    	lea d, [di + 0]
0071++ 1E2E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1E30 C7 27 1E    	jne _strstr_loop				; equal chars but not at end
0073++ 1E33             _strstr_ret:
0074++ 1E33 F0          	pop di
0075++ 1E34 E7          	pop d
0076++ 1E35 E8          	pop al
0077++ 1E36 09          	ret
0078++ 1E37             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1E37             ; length of null terminated string
0080++ 1E37             ; result in C
0081++ 1E37             ; pointer in D
0082++ 1E37             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1E37             _strlen:
0084++ 1E37 DA          	push d
0085++ 1E38 38 00 00    	mov c, 0
0086++ 1E3B             _strlen_L1:
0087++ 1E3B BD 00       	cmp byte [d], 0
0088++ 1E3D C6 45 1E    	je _strlen_ret
0089++ 1E40 79          	inc d
0090++ 1E41 78          	inc c
0091++ 1E42 0A 3B 1E    	jmp _strlen_L1
0092++ 1E45             _strlen_ret:
0093++ 1E45 E7          	pop d
0094++ 1E46 09          	ret
0095++ 1E47             
0096++ 1E47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1E47             ; STRCMP
0098++ 1E47             ; compare two strings
0099++ 1E47             ; str1 in SI
0100++ 1E47             ; str2 in DI
0101++ 1E47             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1E47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1E47             _strcmp:
0104++ 1E47 DB          	push al
0105++ 1E48 DA          	push d
0106++ 1E49 E3          	push di
0107++ 1E4A E2          	push si
0108++ 1E4B             _strcmp_loop:
0109++ 1E4B F3          	cmpsb					; compare a byte of the strings
0110++ 1E4C C7 57 1E    	jne _strcmp_ret
0111++ 1E4F FB FF FF    	lea d, [si +- 1]
0112++ 1E52 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1E54 C7 4B 1E    	jne _strcmp_loop				; equal chars but not at end
0114++ 1E57             _strcmp_ret:
0115++ 1E57 EF          	pop si
0116++ 1E58 F0          	pop di
0117++ 1E59 E7          	pop d
0118++ 1E5A E8          	pop al
0119++ 1E5B 09          	ret
0120++ 1E5C             
0121++ 1E5C             
0122++ 1E5C             ; STRCPY
0123++ 1E5C             ; copy null terminated string from SI to DI
0124++ 1E5C             ; source in SI
0125++ 1E5C             ; destination in DI
0126++ 1E5C             _strcpy:
0127++ 1E5C E2          	push si
0128++ 1E5D E3          	push di
0129++ 1E5E DB          	push al
0130++ 1E5F             _strcpy_L1:
0131++ 1E5F F6          	lodsb
0132++ 1E60 F7          	stosb
0133++ 1E61 B9 00       	cmp al, 0
0134++ 1E63 C7 5F 1E    	jne _strcpy_L1
0135++ 1E66             _strcpy_end:
0136++ 1E66 E8          	pop al
0137++ 1E67 F0          	pop di
0138++ 1E68 EF          	pop si
0139++ 1E69 09          	ret
0140++ 1E6A             
0141++ 1E6A             ; STRCAT
0142++ 1E6A             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1E6A             ; source in SI
0144++ 1E6A             ; destination in DI
0145++ 1E6A             _strcat:
0146++ 1E6A E2          	push si
0147++ 1E6B E3          	push di
0148++ 1E6C D7          	push a
0149++ 1E6D DA          	push d
0150++ 1E6E 50          	mov a, di
0151++ 1E6F 3C          	mov d, a
0152++ 1E70             _strcat_goto_end_L1:
0153++ 1E70 BD 00       	cmp byte[d], 0
0154++ 1E72 C6 79 1E    	je _strcat_start
0155++ 1E75 79          	inc d
0156++ 1E76 0A 70 1E    	jmp _strcat_goto_end_L1
0157++ 1E79             _strcat_start:
0158++ 1E79 FD 50       	mov di, d
0159++ 1E7B             _strcat_L1:
0160++ 1E7B F6          	lodsb
0161++ 1E7C F7          	stosb
0162++ 1E7D B9 00       	cmp al, 0
0163++ 1E7F C7 7B 1E    	jne _strcat_L1
0164++ 1E82             _strcat_end:
0165++ 1E82 E7          	pop d
0166++ 1E83 E4          	pop a
0167++ 1E84 F0          	pop di
0168++ 1E85 EF          	pop si
0169++ 1E86 09          	ret
0170++ 1E87             
0171++ 1E87             
0005+  1E87             
0006+  1E87             ;-----------------------------------------------------------------------------
0007+  1E87             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1E87             ; ASCII in BL
0009+  1E87             ; result in AL
0010+  1E87             ; ascii for F = 0100 0110
0011+  1E87             ; ascii for 9 = 0011 1001
0012+  1E87             ;-----------------------------------------------------------------------------
0013+  1E87             hex_ascii_encode:
0014+  1E87 1B            mov al, bl
0015+  1E88 93 40         test al, $40        ; test if letter or number
0016+  1E8A C7 90 1E      jnz hex_letter
0017+  1E8D 87 0F         and al, $0F        ; get number
0018+  1E8F 09            ret
0019+  1E90             hex_letter:
0020+  1E90 87 0F         and al, $0F        ; get letter
0021+  1E92 6A 09         add al, 9
0022+  1E94 09            ret
0023+  1E95             
0024+  1E95             ;-----------------------------------------------------------------------------
0025+  1E95             ; ATOI
0026+  1E95             ; 2 letter hex string in B
0027+  1E95             ; 8bit integer returned in AL
0028+  1E95             ;-----------------------------------------------------------------------------
0029+  1E95             _atoi:
0030+  1E95 D8            push b
0031+  1E96 07 87 1E      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1E99 30            mov bl, bh
0033+  1E9A DB            push al          ; save a
0034+  1E9B 07 87 1E      call hex_ascii_encode
0035+  1E9E EA            pop bl  
0036+  1E9F FD 9E 04      shl al, 4
0037+  1EA2 8C            or al, bl
0038+  1EA3 E5            pop b
0039+  1EA4 09            ret  
0040+  1EA5             
0041+  1EA5             
0042+  1EA5             ;-----------------------------------------------------------------------------
0043+  1EA5             ; ITOA
0044+  1EA5             ; 8bit value in BL
0045+  1EA5             ; 2 byte ASCII result in A
0046+  1EA5             ;-----------------------------------------------------------------------------
0047+  1EA5             _itoa:
0048+  1EA5 DA            push d
0049+  1EA6 D8            push b
0050+  1EA7 A7 00         mov bh, 0
0051+  1EA9 FD A4 04      shr bl, 4  
0052+  1EAC 74            mov d, b
0053+  1EAD 1F 55 21      mov al, [d + s_hex_digits]
0054+  1EB0 23            mov ah, al
0055+  1EB1               
0056+  1EB1 E5            pop b
0057+  1EB2 D8            push b
0058+  1EB3 A7 00         mov bh, 0
0059+  1EB5 FD 87 0F      and bl, $0F
0060+  1EB8 74            mov d, b
0061+  1EB9 1F 55 21      mov al, [d + s_hex_digits]
0062+  1EBC E5            pop b
0063+  1EBD E7            pop d
0064+  1EBE 09            ret
0065+  1EBF             
0066+  1EBF             ;-----------------------------------------------------------------------------
0067+  1EBF             ; HEX STRING TO BINARY
0068+  1EBF             ; di = destination address
0069+  1EBF             ; si = source
0070+  1EBF             ;-----------------------------------------------------------------------------
0071+  1EBF             _hex_to_int:
0072+  1EBF             _hex_to_int_L1:
0073+  1EBF F6            lodsb          ; load from [SI] to AL
0074+  1EC0 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1EC2 C6 CF 1E      jz _hex_to_int_ret
0076+  1EC5 36            mov bh, al
0077+  1EC6 F6            lodsb
0078+  1EC7 2F            mov bl, al
0079+  1EC8 07 95 1E      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1ECB F7            stosb          ; store AL to [DI]
0081+  1ECC 0A BF 1E      jmp _hex_to_int_L1
0082+  1ECF             _hex_to_int_ret:
0083+  1ECF 09            ret    
0084+  1ED0             
0085+  1ED0             ;-----------------------------------------------------------------------------
0086+  1ED0             ; GETCHAR
0087+  1ED0             ; char in ah
0088+  1ED0             ;-----------------------------------------------------------------------------
0089+  1ED0             getch:
0090+  1ED0 DB            push al
0091+  1ED1             getch_retry:
0092+  1ED1 19 01         mov al, 1
0093+  1ED3 05 03         syscall sys_io      ; receive in AH
0094+  1ED5 E8            pop al
0095+  1ED6 09            ret
0096+  1ED7             
0097+  1ED7             ;-----------------------------------------------------------------------------
0098+  1ED7             ; PUTCHAR
0099+  1ED7             ; char in ah
0100+  1ED7             ;-----------------------------------------------------------------------------
0101+  1ED7             _putchar:
0102+  1ED7 D7            push a
0103+  1ED8 19 00         mov al, 0
0104+  1EDA 05 03         syscall sys_io      ; char in AH
0105+  1EDC E4            pop a
0106+  1EDD 09            ret
0107+  1EDE             
0108+  1EDE             ;-----------------------------------------------------------------------------
0109+  1EDE             ;; INPUT A STRING
0110+  1EDE             ;; terminates with null
0111+  1EDE             ;; pointer in D
0112+  1EDE             ;-----------------------------------------------------------------------------
0113+  1EDE             _gets:
0114+  1EDE D7            push a
0115+  1EDF DA            push d
0116+  1EE0             _gets_loop:
0117+  1EE0 19 01         mov al, 1
0118+  1EE2 05 03         syscall sys_io      ; receive in AH
0119+  1EE4 B9 00         cmp al, 0        ; check error code (AL)
0120+  1EE6 C6 E0 1E      je _gets_loop      ; if no char received, retry
0121+  1EE9             
0122+  1EE9 76 1B         cmp ah, 27
0123+  1EEB C6 0C 1F      je _gets_ansi_esc
0124+  1EEE 76 0A         cmp ah, $0A        ; LF
0125+  1EF0 C6 77 1F      je _gets_end
0126+  1EF3 76 0D         cmp ah, $0D        ; CR
0127+  1EF5 C6 77 1F      je _gets_end
0128+  1EF8 76 5C         cmp ah, $5C        ; '\\'
0129+  1EFA C6 38 1F      je _gets_escape
0130+  1EFD               
0131+  1EFD 76 08         cmp ah, $08      ; check for backspace
0132+  1EFF C6 08 1F      je _gets_backspace
0133+  1F02             
0134+  1F02 1A            mov al, ah
0135+  1F03 3E            mov [d], al
0136+  1F04 79            inc d
0137+  1F05 0A E0 1E      jmp _gets_loop
0138+  1F08             _gets_backspace:
0139+  1F08 7F            dec d
0140+  1F09 0A E0 1E      jmp _gets_loop
0141+  1F0C             _gets_ansi_esc:
0142+  1F0C 19 01         mov al, 1
0143+  1F0E 05 03         syscall sys_io        ; receive in AH without echo
0144+  1F10 B9 00         cmp al, 0          ; check error code (AL)
0145+  1F12 C6 0C 1F      je _gets_ansi_esc    ; if no char received, retry
0146+  1F15 76 5B         cmp ah, '['
0147+  1F17 C7 E0 1E      jne _gets_loop
0148+  1F1A             _gets_ansi_esc_2:
0149+  1F1A 19 01         mov al, 1
0150+  1F1C 05 03         syscall sys_io          ; receive in AH without echo
0151+  1F1E B9 00         cmp al, 0            ; check error code (AL)
0152+  1F20 C6 1A 1F      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1F23 76 44         cmp ah, 'D'
0154+  1F25 C6 30 1F      je _gets_left_arrow
0155+  1F28 76 43         cmp ah, 'C'
0156+  1F2A C6 34 1F      je _gets_right_arrow
0157+  1F2D 0A E0 1E      jmp _gets_loop
0158+  1F30             _gets_left_arrow:
0159+  1F30 7F            dec d
0160+  1F31 0A E0 1E      jmp _gets_loop
0161+  1F34             _gets_right_arrow:
0162+  1F34 79            inc d
0163+  1F35 0A E0 1E      jmp _gets_loop
0164+  1F38             _gets_escape:
0165+  1F38 19 01         mov al, 1
0166+  1F3A 05 03         syscall sys_io      ; receive in AH
0167+  1F3C B9 00         cmp al, 0        ; check error code (AL)
0168+  1F3E C6 38 1F      je _gets_escape      ; if no char received, retry
0169+  1F41 76 6E         cmp ah, 'n'
0170+  1F43 C6 62 1F      je _gets_LF
0171+  1F46 76 72         cmp ah, 'r'
0172+  1F48 C6 69 1F      je _gets_CR
0173+  1F4B 76 30         cmp ah, '0'
0174+  1F4D C6 70 1F      je _gets_NULL
0175+  1F50 76 5C         cmp ah, $5C  ; '\'
0176+  1F52 C6 5B 1F      je _gets_slash
0177+  1F55 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1F56 3E            mov [d], al
0179+  1F57 79            inc d
0180+  1F58 0A E0 1E      jmp _gets_loop
0181+  1F5B             _gets_slash:
0182+  1F5B 19 5C         mov al, $5C
0183+  1F5D 3E            mov [d], al
0184+  1F5E 79            inc d
0185+  1F5F 0A E0 1E      jmp _gets_loop
0186+  1F62             _gets_LF:
0187+  1F62 19 0A         mov al, $0A
0188+  1F64 3E            mov [d], al
0189+  1F65 79            inc d
0190+  1F66 0A E0 1E      jmp _gets_loop
0191+  1F69             _gets_CR:
0192+  1F69 19 0D         mov al, $0D
0193+  1F6B 3E            mov [d], al
0194+  1F6C 79            inc d
0195+  1F6D 0A E0 1E      jmp _gets_loop
0196+  1F70             _gets_NULL:
0197+  1F70 19 00         mov al, $00
0198+  1F72 3E            mov [d], al
0199+  1F73 79            inc d
0200+  1F74 0A E0 1E      jmp _gets_loop
0201+  1F77             _gets_end:
0202+  1F77 19 00         mov al, 0
0203+  1F79 3E            mov [d], al        ; terminate string
0204+  1F7A E7            pop d
0205+  1F7B E4            pop a
0206+  1F7C 09            ret
0207+  1F7D             
0208+  1F7D             ;-----------------------------------------------------------------------------
0209+  1F7D             ;; INPUT TEXT
0210+  1F7D             ;; terminated with CTRL+D
0211+  1F7D             ;; pointer in D
0212+  1F7D             ;-----------------------------------------------------------------------------
0213+  1F7D             _gettxt:
0214+  1F7D D7            push a
0215+  1F7E DA            push d
0216+  1F7F             _gettxt_loop:
0217+  1F7F 19 01         mov al, 1
0218+  1F81 05 03         syscall sys_io      ; receive in AH
0219+  1F83 B9 00         cmp al, 0        ; check error code (AL)
0220+  1F85 C6 7F 1F      je _gettxt_loop    ; if no char received, retry
0221+  1F88 76 04         cmp ah, 4      ; EOT
0222+  1F8A C6 C8 1F      je _gettxt_end
0223+  1F8D 76 08         cmp ah, $08      ; check for backspace
0224+  1F8F C6 C4 1F      je _gettxt_backspace
0225+  1F92 76 5C         cmp ah, $5C        ; '\'
0226+  1F94 C6 9D 1F      je _gettxt_escape
0227+  1F97 1A            mov al, ah
0228+  1F98 3E            mov [d], al
0229+  1F99 79            inc d
0230+  1F9A 0A 7F 1F      jmp _gettxt_loop
0231+  1F9D             _gettxt_escape:
0232+  1F9D 19 01         mov al, 1
0233+  1F9F 05 03         syscall sys_io      ; receive in AH
0234+  1FA1 B9 00         cmp al, 0        ; check error code (AL)
0235+  1FA3 C6 9D 1F      je _gettxt_escape    ; if no char received, retry
0236+  1FA6 76 6E         cmp ah, 'n'
0237+  1FA8 C6 B6 1F      je _gettxt_LF
0238+  1FAB 76 72         cmp ah, 'r'
0239+  1FAD C6 BD 1F      je _gettxt_CR
0240+  1FB0 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1FB1 3E            mov [d], al
0242+  1FB2 79            inc d
0243+  1FB3 0A 7F 1F      jmp _gettxt_loop
0244+  1FB6             _gettxt_LF:
0245+  1FB6 19 0A         mov al, $0A
0246+  1FB8 3E            mov [d], al
0247+  1FB9 79            inc d
0248+  1FBA 0A 7F 1F      jmp _gettxt_loop
0249+  1FBD             _gettxt_CR:
0250+  1FBD 19 0D         mov al, $0D
0251+  1FBF 3E            mov [d], al
0252+  1FC0 79            inc d
0253+  1FC1 0A 7F 1F      jmp _gettxt_loop
0254+  1FC4             _gettxt_backspace:
0255+  1FC4 7F            dec d
0256+  1FC5 0A 7F 1F      jmp _gettxt_loop
0257+  1FC8             _gettxt_end:
0258+  1FC8 19 00         mov al, 0
0259+  1FCA 3E            mov [d], al        ; terminate string
0260+  1FCB E7            pop d
0261+  1FCC E4            pop a
0262+  1FCD 09            ret
0263+  1FCE             
0264+  1FCE             ;-----------------------------------------------------------------------------
0265+  1FCE             ; PRINT NEW LINE
0266+  1FCE             ;-----------------------------------------------------------------------------
0267+  1FCE             printnl:
0268+  1FCE D7            push a
0269+  1FCF 10 00 0A      mov a, $0A00
0270+  1FD2 05 03         syscall sys_io
0271+  1FD4 10 00 0D      mov a, $0D00
0272+  1FD7 05 03         syscall sys_io
0273+  1FD9 E4            pop a
0274+  1FDA 09            ret
0275+  1FDB             
0276+  1FDB             ;-----------------------------------------------------------------------------
0277+  1FDB             ; _strtoint
0278+  1FDB             ; 4 digit hex string number in d
0279+  1FDB             ; integer returned in A
0280+  1FDB             ;-----------------------------------------------------------------------------
0281+  1FDB             _strtointx:
0282+  1FDB D8            push b
0283+  1FDC 32            mov bl, [d]
0284+  1FDD 37            mov bh, bl
0285+  1FDE 33 01 00      mov bl, [d + 1]
0286+  1FE1 07 95 1E      call _atoi        ; convert to int in AL
0287+  1FE4 23            mov ah, al        ; move to AH
0288+  1FE5 33 02 00      mov bl, [d + 2]
0289+  1FE8 37            mov bh, bl
0290+  1FE9 33 03 00      mov bl, [d + 3]
0291+  1FEC 07 95 1E      call _atoi        ; convert to int in AL
0292+  1FEF E5            pop b
0293+  1FF0 09            ret
0294+  1FF1             
0295+  1FF1             ;-----------------------------------------------------------------------------
0296+  1FF1             ; _strtoint
0297+  1FF1             ; 5 digit base10 string number in d
0298+  1FF1             ; integer returned in A
0299+  1FF1             ;-----------------------------------------------------------------------------
0300+  1FF1             _strtoint:
0301+  1FF1 E2            push si
0302+  1FF2 D8            push b
0303+  1FF3 D9            push c
0304+  1FF4 DA            push d
0305+  1FF5 07 37 1E      call _strlen      ; get string length in C
0306+  1FF8 7E            dec c
0307+  1FF9 FD 4E         mov si, d
0308+  1FFB 12            mov a, c
0309+  1FFC FD 99         shl a
0310+  1FFE 3B 6D 21      mov d, table_power
0311+  2001 59            add d, a
0312+  2002 38 00 00      mov c, 0
0313+  2005             _strtoint_L0:
0314+  2005 F6            lodsb      ; load ASCII to al
0315+  2006 B9 00         cmp al, 0
0316+  2008 C6 1B 20      je _strtoint_end
0317+  200B 6F 30         sub al, $30    ; make into integer
0318+  200D 22 00         mov ah, 0
0319+  200F 2A            mov b, [d]
0320+  2010 AC            mul a, b      ; result in B since it fits in 16bits
0321+  2011 11            mov a, b
0322+  2012 28            mov b, c
0323+  2013 54            add a, b
0324+  2014 39            mov c, a
0325+  2015 63 02 00      sub d, 2
0326+  2018 0A 05 20      jmp _strtoint_L0
0327+  201B             _strtoint_end:
0328+  201B 12            mov a, c
0329+  201C E7            pop d
0330+  201D E6            pop c
0331+  201E E5            pop b
0332+  201F EF            pop si
0333+  2020 09            ret
0334+  2021             
0335+  2021             ;-----------------------------------------------------------------------------
0336+  2021             ; PRINT NULL TERMINATED STRING
0337+  2021             ; pointer in D
0338+  2021             ;-----------------------------------------------------------------------------
0339+  2021             _puts:
0340+  2021 D7            push a
0341+  2022 DA            push d
0342+  2023             _puts_L1:
0343+  2023 1E            mov al, [d]
0344+  2024 B9 00         cmp al, 0
0345+  2026 C6 32 20      jz _puts_END
0346+  2029 23            mov ah, al
0347+  202A 19 00         mov al, 0
0348+  202C 05 03         syscall sys_io
0349+  202E 79            inc d
0350+  202F 0A 23 20      jmp _puts_L1
0351+  2032             _puts_END:
0352+  2032 E7            pop d
0353+  2033 E4            pop a
0354+  2034 09            ret
0355+  2035             
0356+  2035             ;-----------------------------------------------------------------------------
0357+  2035             ; PRINT N SIZE STRING
0358+  2035             ; pointer in D
0359+  2035             ; size in C
0360+  2035             ;-----------------------------------------------------------------------------
0361+  2035             _putsn:
0362+  2035 DB            push al
0363+  2036 DA            push d
0364+  2037 D9            push c
0365+  2038             _putsn_L0:
0366+  2038 1E            mov al, [d]
0367+  2039 23            mov ah, al
0368+  203A 19 00         mov al, 0
0369+  203C 05 03         syscall sys_io
0370+  203E 79            inc d
0371+  203F 7E            dec c  
0372+  2040 C2 00 00      cmp c, 0
0373+  2043 C7 38 20      jne _putsn_L0
0374+  2046             _putsn_end:
0375+  2046 E6            pop c
0376+  2047 E7            pop d
0377+  2048 E8            pop al
0378+  2049 09            ret
0379+  204A             
0380+  204A             ;-----------------------------------------------------------------------------
0381+  204A             ; print 16bit decimal number
0382+  204A             ; input number in A
0383+  204A             ;-----------------------------------------------------------------------------
0384+  204A             print_u16d:
0385+  204A D7            push a
0386+  204B D8            push b
0387+  204C 26 10 27      mov b, 10000
0388+  204F AE            div a, b      ; get 10000's coeff.
0389+  2050 07 72 20      call print_number
0390+  2053 11            mov a, b
0391+  2054 26 E8 03      mov b, 1000
0392+  2057 AE            div a, b      ; get 1000's coeff.
0393+  2058 07 72 20      call print_number
0394+  205B 11            mov a, b
0395+  205C 26 64 00      mov b, 100
0396+  205F AE            div a, b
0397+  2060 07 72 20      call print_number
0398+  2063 11            mov a, b
0399+  2064 26 0A 00      mov b, 10
0400+  2067 AE            div a, b
0401+  2068 07 72 20      call print_number
0402+  206B 1B            mov al, bl      ; 1's coeff in bl
0403+  206C 07 72 20      call print_number
0404+  206F E5            pop b
0405+  2070 E4            pop a
0406+  2071 09            ret
0407+  2072             
0408+  2072             ;-----------------------------------------------------------------------------
0409+  2072             ; print AL
0410+  2072             ;-----------------------------------------------------------------------------
0411+  2072             print_number:
0412+  2072 6A 30         add al, $30
0413+  2074 23            mov ah, al
0414+  2075 07 D7 1E      call _putchar
0415+  2078 09            ret
0416+  2079             
0417+  2079             ;-----------------------------------------------------------------------------
0418+  2079             ; PRINT 16BIT HEX INTEGER
0419+  2079             ; integer value in reg B
0420+  2079             ;-----------------------------------------------------------------------------
0421+  2079             print_u16x:
0422+  2079 D7            push a
0423+  207A D8            push b
0424+  207B DD            push bl
0425+  207C 30            mov bl, bh
0426+  207D 07 A5 1E      call _itoa        ; convert bh to char in A
0427+  2080 2F            mov bl, al        ; save al
0428+  2081 19 00         mov al, 0
0429+  2083 05 03         syscall sys_io        ; display AH
0430+  2085 24            mov ah, bl        ; retrieve al
0431+  2086 19 00         mov al, 0
0432+  2088 05 03         syscall sys_io        ; display AL
0433+  208A             
0434+  208A EA            pop bl
0435+  208B 07 A5 1E      call _itoa        ; convert bh to char in A
0436+  208E 2F            mov bl, al        ; save al
0437+  208F 19 00         mov al, 0
0438+  2091 05 03         syscall sys_io        ; display AH
0439+  2093 24            mov ah, bl        ; retrieve al
0440+  2094 19 00         mov al, 0
0441+  2096 05 03         syscall sys_io        ; display AL
0442+  2098             
0443+  2098 E5            pop b
0444+  2099 E4            pop a
0445+  209A 09            ret
0446+  209B             
0447+  209B             ;-----------------------------------------------------------------------------
0448+  209B             ; INPUT 16BIT HEX INTEGER
0449+  209B             ; read 16bit integer into A
0450+  209B             ;-----------------------------------------------------------------------------
0451+  209B             scan_u16x:
0452+  209B F8 10 00      enter 16
0453+  209E D8            push b
0454+  209F DA            push d
0455+  20A0             
0456+  20A0 FA F1 FF      lea d, [bp + -15]
0457+  20A3 07 DE 1E      call _gets        ; get number
0458+  20A6             
0459+  20A6 32            mov bl, [d]
0460+  20A7 37            mov bh, bl
0461+  20A8 33 01 00      mov bl, [d + 1]
0462+  20AB 07 95 1E      call _atoi        ; convert to int in AL
0463+  20AE 23            mov ah, al        ; move to AH
0464+  20AF             
0465+  20AF 33 02 00      mov bl, [d + 2]
0466+  20B2 37            mov bh, bl
0467+  20B3 33 03 00      mov bl, [d + 3]
0468+  20B6 07 95 1E      call _atoi        ; convert to int in AL
0469+  20B9             
0470+  20B9 E7            pop d
0471+  20BA E5            pop b
0472+  20BB F9            leave
0473+  20BC 09            ret
0474+  20BD             
0475+  20BD             ;-----------------------------------------------------------------------------
0476+  20BD             ; PRINT 8bit HEX INTEGER
0477+  20BD             ; integer value in reg bl
0478+  20BD             ;-----------------------------------------------------------------------------
0479+  20BD             print_u8x:
0480+  20BD D7            push a
0481+  20BE DD            push bl
0482+  20BF             
0483+  20BF 07 A5 1E      call _itoa        ; convert bl to char in A
0484+  20C2 2F            mov bl, al        ; save al
0485+  20C3 19 00         mov al, 0
0486+  20C5 05 03         syscall sys_io        ; display AH
0487+  20C7 24            mov ah, bl        ; retrieve al
0488+  20C8 19 00         mov al, 0
0489+  20CA 05 03         syscall sys_io        ; display AL
0490+  20CC             
0491+  20CC EA            pop bl
0492+  20CD E4            pop a
0493+  20CE 09            ret
0494+  20CF             
0495+  20CF             ;-----------------------------------------------------------------------------
0496+  20CF             ; print 8bit decimal unsigned number
0497+  20CF             ; input number in AL
0498+  20CF             ;-----------------------------------------------------------------------------
0499+  20CF             print_u8d:
0500+  20CF D7            push a
0501+  20D0 D8            push b
0502+  20D1             
0503+  20D1 22 00         mov ah, 0
0504+  20D3 26 64 00      mov b, 100
0505+  20D6 AE            div a, b
0506+  20D7 D8            push b      ; save remainder
0507+  20D8 B9 00         cmp al, 0
0508+  20DA C6 E4 20      je skip100
0509+  20DD 6A 30         add al, $30
0510+  20DF 23            mov ah, al
0511+  20E0 19 00         mov al, 0
0512+  20E2 05 03         syscall sys_io  ; print coeff
0513+  20E4             skip100:
0514+  20E4 E4            pop a
0515+  20E5 22 00         mov ah, 0
0516+  20E7 26 0A 00      mov b, 10
0517+  20EA AE            div a, b
0518+  20EB D8            push b      ; save remainder
0519+  20EC B9 00         cmp al, 0
0520+  20EE C6 F8 20      je skip10
0521+  20F1 6A 30         add al, $30
0522+  20F3 23            mov ah, al
0523+  20F4 19 00         mov al, 0
0524+  20F6 05 03         syscall sys_io  ; print coeff
0525+  20F8             skip10:
0526+  20F8 E4            pop a
0527+  20F9 1B            mov al, bl
0528+  20FA 6A 30         add al, $30
0529+  20FC 23            mov ah, al
0530+  20FD 19 00         mov al, 0
0531+  20FF 05 03         syscall sys_io  ; print coeff
0532+  2101 E5            pop b
0533+  2102 E4            pop a
0534+  2103 09            ret
0535+  2104             
0536+  2104             ;-----------------------------------------------------------------------------
0537+  2104             ; INPUT 8BIT HEX INTEGER
0538+  2104             ; read 8bit integer into AL
0539+  2104             ;-----------------------------------------------------------------------------
0540+  2104             scan_u8x:
0541+  2104 F8 04 00      enter 4
0542+  2107 D8            push b
0543+  2108 DA            push d
0544+  2109             
0545+  2109 FA FD FF      lea d, [bp + -3]
0546+  210C 07 DE 1E      call _gets        ; get number
0547+  210F             
0548+  210F 32            mov bl, [d]
0549+  2110 37            mov bh, bl
0550+  2111 33 01 00      mov bl, [d + 1]
0551+  2114 07 95 1E      call _atoi        ; convert to int in AL
0552+  2117             
0553+  2117 E7            pop d
0554+  2118 E5            pop b
0555+  2119 F9            leave
0556+  211A 09            ret
0557+  211B             
0558+  211B             ;-----------------------------------------------------------------------------
0559+  211B             ; input decimal number
0560+  211B             ; result in A
0561+  211B             ; 655'\0'
0562+  211B             ; low--------high
0563+  211B             ;-----------------------------------------------------------------------------
0564+  211B             scan_u16d:
0565+  211B F8 08 00      enter 8
0566+  211E E2            push si
0567+  211F D8            push b
0568+  2120 D9            push c
0569+  2121 DA            push d
0570+  2122 FA F9 FF      lea d, [bp +- 7]
0571+  2125 07 DE 1E      call _gets
0572+  2128 07 37 1E      call _strlen      ; get string length in C
0573+  212B 7E            dec c
0574+  212C FD 4E         mov si, d
0575+  212E 12            mov a, c
0576+  212F FD 99         shl a
0577+  2131 3B 6D 21      mov d, table_power
0578+  2134 59            add d, a
0579+  2135 38 00 00      mov c, 0
0580+  2138             mul_loop:
0581+  2138 F6            lodsb      ; load ASCII to al
0582+  2139 B9 00         cmp al, 0
0583+  213B C6 4E 21      je mul_exit
0584+  213E 6F 30         sub al, $30    ; make into integer
0585+  2140 22 00         mov ah, 0
0586+  2142 2A            mov b, [d]
0587+  2143 AC            mul a, b      ; result in B since it fits in 16bits
0588+  2144 11            mov a, b
0589+  2145 28            mov b, c
0590+  2146 54            add a, b
0591+  2147 39            mov c, a
0592+  2148 63 02 00      sub d, 2
0593+  214B 0A 38 21      jmp mul_loop
0594+  214E             mul_exit:
0595+  214E 12            mov a, c
0596+  214F E7            pop d
0597+  2150 E6            pop c
0598+  2151 E5            pop b
0599+  2152 EF            pop si
0600+  2153 F9            leave
0601+  2154 09            ret
0602+  2155             
0603+  2155 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  2159 34 35 36 37 
0603+  215D 38 39 41 42 
0603+  2161 43 44 45 46 
0604+  2165 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  2169 1B 5B 48 00 
0605+  216D             
0606+  216D             table_power:
0607+  216D 01 00         .dw 1
0608+  216F 0A 00         .dw 10
0609+  2171 64 00         .dw 100
0610+  2173 E8 03         .dw 1000
0611+  2175 10 27         .dw 100004227   2177             ; --- END INLINE ASM SEGMENT
4228   2177             
4229   2177 F9            leave
4230   2178 09            ret
4231   2179             
4232   2179             func:
4233   2179 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4234   217C F9            leave
4235   217D 09            ret
4236   217E             ; --- END TEXT SEGMENT
4237   217E             
4238   217E             ; --- BEGIN DATA SEGMENT
4239   217E 00 00 00 00 _p: .fill 4, 0
4240   2182 00 00       st_fopen_max_handle: .dw 0
4241   2184 55 6E 65 78 _s0: .db "Unexpected format in printf.", 0
4241   2188 70 65 63 74 
4241   218C 65 64 20 66 
4241   2190 6F 72 6D 61 
4241   2194 74 20 69 6E 
4241   2198 20 70 72 69 
4241   219C 6E 74 66 2E 
4241   21A0 00 
4242   21A1 45 72 72 6F _s1: .db "Error: Unknown argument type.\n", 0
4242   21A5 72 3A 20 55 
4242   21A9 6E 6B 6E 6F 
4242   21AD 77 6E 20 61 
4242   21B1 72 67 75 6D 
4242   21B5 65 6E 74 20 
4242   21B9 74 79 70 65 
4242   21BD 2E 0A 00 
4243   21C0 1B 5B 32 4A _s2: .db "\033[2J\033[H", 0
4243   21C4 1B 5B 48 00 
4244   21C8             
4245   21C8 CA 21       _heap_top: .dw _heap
4246   21CA 00          _heap: .db 0
4247   21CB             ; --- END DATA SEGMENT
4248   21CB             
4249   21CB             .end
tasm: Number of errors = 0
