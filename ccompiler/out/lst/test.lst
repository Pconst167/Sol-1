0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; printf("Value: %ld", 4294967295L); 
0011   0408 26 FF FF      mov b, $ffff
0012   040B 38 FF FF      mov c, $ffffffff
0013   040E FD AB         swp b
0014   0410 D8            push b
0015   0411 26 8C 0B      mov b, __s0 ; "Value: %ld"
0016   0414 FD AB         swp b
0017   0416 D8            push b
0018   0417 07 1F 04      call printf
0019   041A 51 06 00      add sp, 6
0020   041D 05 0B         syscall sys_terminate_proc
0021   041F             
0022   041F             printf:
0023   041F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0024   0422             ; $p 
0025   0422             ; $fp 
0026   0422             ; $i 
0027   0422 52 06 00      sub sp, 6
0028   0425             ;; fp = format; 
0029   0425 FA FD FF      lea d, [bp + -3] ; $fp
0030   0428 DA            push d
0031   0429 FA 05 00      lea d, [bp + 5] ; $format
0032   042C 2A            mov b, [d]
0033   042D E7            pop d
0034   042E FD 43         mov [d], b
0035   0430             ;; p = &format + 2; 
0036   0430 FA FF FF      lea d, [bp + -1] ; $p
0037   0433 DA            push d
0038   0434 FA 05 00      lea d, [bp + 5] ; $format
0039   0437 2D            mov b, d
0040   0438             ; START TERMS
0041   0438 D7            push a
0042   0439 11            mov a, b
0043   043A 26 02 00      mov b, $2
0044   043D 54            add a, b
0045   043E 27            mov b, a
0046   043F E4            pop a
0047   0440             ; END TERMS
0048   0440 E7            pop d
0049   0441 FD 43         mov [d], b
0050   0443             ;; for(;;){ 
0051   0443             _for1_init:
0052   0443             _for1_cond:
0053   0443             _for1_block:
0054   0443             ;; if(!*fp) break; 
0055   0443             _if2_cond:
0056   0443 FA FD FF      lea d, [bp + -3] ; $fp
0057   0446 2A            mov b, [d]
0058   0447 74            mov d, b
0059   0448 32            mov bl, [d]
0060   0449 A7 00         mov bh, 0
0061   044B C0 00 00      cmp b, 0
0062   044E FD 71         seq ; !
0063   0450 C0 00 00      cmp b, 0
0064   0453 C6 5C 04      je _if2_else
0065   0456             _if2_true:
0066   0456             ;; break; 
0067   0456 0A 6F 05      jmp _for1_exit ; for break
0068   0459 0A 6C 05      jmp _if2_exit
0069   045C             _if2_else:
0070   045C             ;; if(*fp == '%'){ 
0071   045C             _if3_cond:
0072   045C FA FD FF      lea d, [bp + -3] ; $fp
0073   045F 2A            mov b, [d]
0074   0460 74            mov d, b
0075   0461 32            mov bl, [d]
0076   0462 A7 00         mov bh, 0
0077   0464             ; START RELATIONAL
0078   0464 D7            push a
0079   0465 11            mov a, b
0080   0466 26 25 00      mov b, $25
0081   0469 B0            cmp a, b
0082   046A FD 71         seq ; ==
0083   046C E4            pop a
0084   046D             ; END RELATIONAL
0085   046D C0 00 00      cmp b, 0
0086   0470 C6 50 05      je _if3_else
0087   0473             _if3_true:
0088   0473             ;; fp++; 
0089   0473 FA FD FF      lea d, [bp + -3] ; $fp
0090   0476 2A            mov b, [d]
0091   0477 D8            push b
0092   0478 FD 77         inc b
0093   047A FA FD FF      lea d, [bp + -3] ; $fp
0094   047D FD 43         mov [d], b
0095   047F E5            pop b
0096   0480             ;; switch(*fp){ 
0097   0480             _switch4_expr:
0098   0480 FA FD FF      lea d, [bp + -3] ; $fp
0099   0483 2A            mov b, [d]
0100   0484 74            mov d, b
0101   0485 32            mov bl, [d]
0102   0486 A7 00         mov bh, 0
0103   0488             _switch4_comparisons:
0104   0488 C1 6C         cmp bl, $6c
0105   048A C6 98 04      je _switch4_case0
0106   048D C1 4C         cmp bl, $4c
0107   048F C6 98 04      je _switch4_case1
0108   0492 0A 40 05      jmp _switch4_default
0109   0495 0A 40 05      jmp _switch4_exit
0110   0498             _switch4_case0:
0111   0498             _switch4_case1:
0112   0498             ;; fp++; 
0113   0498 FA FD FF      lea d, [bp + -3] ; $fp
0114   049B 2A            mov b, [d]
0115   049C D8            push b
0116   049D FD 77         inc b
0117   049F FA FD FF      lea d, [bp + -3] ; $fp
0118   04A2 FD 43         mov [d], b
0119   04A4 E5            pop b
0120   04A5             ;; if(*fp == 'd' || *fp == 'i'){ 
0121   04A5             _if5_cond:
0122   04A5 FA FD FF      lea d, [bp + -3] ; $fp
0123   04A8 2A            mov b, [d]
0124   04A9 74            mov d, b
0125   04AA 32            mov bl, [d]
0126   04AB A7 00         mov bh, 0
0127   04AD             ; START RELATIONAL
0128   04AD D7            push a
0129   04AE 11            mov a, b
0130   04AF 26 64 00      mov b, $64
0131   04B2 B0            cmp a, b
0132   04B3 FD 71         seq ; ==
0133   04B5 E4            pop a
0134   04B6             ; END RELATIONAL
0135   04B6 D7            push a
0136   04B7 11            mov a, b
0137   04B8 FA FD FF      lea d, [bp + -3] ; $fp
0138   04BB 2A            mov b, [d]
0139   04BC 74            mov d, b
0140   04BD 32            mov bl, [d]
0141   04BE A7 00         mov bh, 0
0142   04C0             ; START RELATIONAL
0143   04C0 D7            push a
0144   04C1 11            mov a, b
0145   04C2 26 69 00      mov b, $69
0146   04C5 B0            cmp a, b
0147   04C6 FD 71         seq ; ==
0148   04C8 E4            pop a
0149   04C9             ; END RELATIONAL
0150   04C9 FD A8         sor a, b ; ||
0151   04CB E4            pop a
0152   04CC C0 00 00      cmp b, 0
0153   04CF C6 FC 04      je _if5_else
0154   04D2             _if5_true:
0155   04D2             ;; print_signed_long(*(long *)p); 
0156   04D2 FA FF FF      lea d, [bp + -1] ; $p
0157   04D5 2A            mov b, [d]
0158   04D6 74            mov d, b
0159   04D7 2B 02 00      mov b, [d + 2]
0160   04DA FD 39         mov c, b
0161   04DC 2A            mov b, [d]
0162   04DD FD AB         swp b
0163   04DF D8            push b
0164   04E0 07 0B 09      call print_signed_long
0165   04E3 51 02 00      add sp, 2
0166   04E6             ;; p = p + 4; 
0167   04E6 FA FF FF      lea d, [bp + -1] ; $p
0168   04E9 DA            push d
0169   04EA FA FF FF      lea d, [bp + -1] ; $p
0170   04ED 2A            mov b, [d]
0171   04EE             ; START TERMS
0172   04EE D7            push a
0173   04EF 11            mov a, b
0174   04F0 26 04 00      mov b, $4
0175   04F3 54            add a, b
0176   04F4 27            mov b, a
0177   04F5 E4            pop a
0178   04F6             ; END TERMS
0179   04F6 E7            pop d
0180   04F7 FD 43         mov [d], b
0181   04F9 0A 3D 05      jmp _if5_exit
0182   04FC             _if5_else:
0183   04FC             ;; if(*fp == 'u'){ 
0184   04FC             _if6_cond:
0185   04FC FA FD FF      lea d, [bp + -3] ; $fp
0186   04FF 2A            mov b, [d]
0187   0500 74            mov d, b
0188   0501 32            mov bl, [d]
0189   0502 A7 00         mov bh, 0
0190   0504             ; START RELATIONAL
0191   0504 D7            push a
0192   0505 11            mov a, b
0193   0506 26 75 00      mov b, $75
0194   0509 B0            cmp a, b
0195   050A FD 71         seq ; ==
0196   050C E4            pop a
0197   050D             ; END RELATIONAL
0198   050D C0 00 00      cmp b, 0
0199   0510 C6 3D 05      je _if6_exit
0200   0513             _if6_true:
0201   0513             ;; print_unsigned_long(*(unsigned long *)p); 
0202   0513 FA FF FF      lea d, [bp + -1] ; $p
0203   0516 2A            mov b, [d]
0204   0517 74            mov d, b
0205   0518 2B 02 00      mov b, [d + 2]
0206   051B FD 39         mov c, b
0207   051D 2A            mov b, [d]
0208   051E FD AB         swp b
0209   0520 D8            push b
0210   0521 07 FC 09      call print_unsigned_long
0211   0524 51 02 00      add sp, 2
0212   0527             ;; p = p + 4; 
0213   0527 FA FF FF      lea d, [bp + -1] ; $p
0214   052A DA            push d
0215   052B FA FF FF      lea d, [bp + -1] ; $p
0216   052E 2A            mov b, [d]
0217   052F             ; START TERMS
0218   052F D7            push a
0219   0530 11            mov a, b
0220   0531 26 04 00      mov b, $4
0221   0534 54            add a, b
0222   0535 27            mov b, a
0223   0536 E4            pop a
0224   0537             ; END TERMS
0225   0537 E7            pop d
0226   0538 FD 43         mov [d], b
0227   053A 0A 3D 05      jmp _if6_exit
0228   053D             _if6_exit:
0229   053D             _if5_exit:
0230   053D             ;; break; 
0231   053D 0A 40 05      jmp _switch4_exit ; case break
0232   0540             _switch4_default:
0233   0540             _switch4_exit:
0234   0540             ;; fp++; 
0235   0540 FA FD FF      lea d, [bp + -3] ; $fp
0236   0543 2A            mov b, [d]
0237   0544 D8            push b
0238   0545 FD 77         inc b
0239   0547 FA FD FF      lea d, [bp + -3] ; $fp
0240   054A FD 43         mov [d], b
0241   054C E5            pop b
0242   054D 0A 6C 05      jmp _if3_exit
0243   0550             _if3_else:
0244   0550             ;; putchar(*fp); 
0245   0550 FA FD FF      lea d, [bp + -3] ; $fp
0246   0553 2A            mov b, [d]
0247   0554 74            mov d, b
0248   0555 32            mov bl, [d]
0249   0556 A7 00         mov bh, 0
0250   0558 DD            push bl
0251   0559 07 71 05      call putchar
0252   055C 51 01 00      add sp, 1
0253   055F             ;; fp++; 
0254   055F FA FD FF      lea d, [bp + -3] ; $fp
0255   0562 2A            mov b, [d]
0256   0563 D8            push b
0257   0564 FD 77         inc b
0258   0566 FA FD FF      lea d, [bp + -3] ; $fp
0259   0569 FD 43         mov [d], b
0260   056B E5            pop b
0261   056C             _if3_exit:
0262   056C             _if2_exit:
0263   056C             _for1_update:
0264   056C 0A 43 04      jmp _for1_cond
0265   056F             _for1_exit:
0266   056F F9            leave
0267   0570 09            ret
0268   0571             
0269   0571             putchar:
0270   0571 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0271   0574             
0272   0574             ; --- BEGIN INLINE ASM BLOCK
0273   0574 FA 05 00      lea d, [bp + 5] ; $c
0274   0577 1E            mov al, [d]
0275   0578 23            mov ah, al
0276   0579 07 69 06      call _putchar
0277   057C             ; --- END INLINE ASM BLOCK
0278   057C             
0279   057C F9            leave
0280   057D 09            ret
0281   057E             
0282   057E             include_stdio_asm:
0283   057E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0284   0581             
0285   0581             ; --- BEGIN INLINE ASM BLOCK
0286   0581             .include "lib/asm/stdio.asm"
0001+  0581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0581             ; stdio.s
0003+  0581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0581             .include "lib/asm/string.asm"
0001++ 0581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0581             ; string.s
0003++ 0581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0581             
0005++ 0581             
0006++ 0581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0581             ; _strrev
0008++ 0581             ; reverse a string
0009++ 0581             ; D = string address
0010++ 0581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0581             ; 01234
0012++ 0581             _strrev:
0013++ 0581 4B          	pusha
0014++ 0582 07 C8 05    	call _strlen	; length in C
0015++ 0585 12          	mov a, c
0016++ 0586 AF 01 00    	cmp a, 1
0017++ 0589 D0 A3 05    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 058C 7D          	dec a
0019++ 058D FD 4E       	mov si, d	; beginning of string
0020++ 058F FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0591 59          	add d, a	; end of string
0022++ 0592 12          	mov a, c
0023++ 0593 FD 9B       	shr a		; divide by 2
0024++ 0595 39          	mov c, a	; C now counts the steps
0025++ 0596             _strrev_L0:
0026++ 0596 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0597 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0598 3E          	mov [d], al	; store left char into right side
0029++ 0599 1B          	mov al, bl
0030++ 059A F7          	stosb		; store right-side char into left-side; increase DI
0031++ 059B 7E          	dec c
0032++ 059C 7F          	dec d
0033++ 059D C2 00 00    	cmp c, 0
0034++ 05A0 C7 96 05    	jne _strrev_L0
0035++ 05A3             _strrev_end:
0036++ 05A3 4C          	popa
0037++ 05A4 09          	ret
0038++ 05A5             	
0039++ 05A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 05A5             ; _strchr
0041++ 05A5             ; search string in D for char in AL
0042++ 05A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 05A5             _strchr:
0044++ 05A5             _strchr_L0:
0045++ 05A5 32          	mov bl, [d]
0046++ 05A6 C1 00       	cmp bl, 0
0047++ 05A8 C6 B3 05    	je _strchr_end
0048++ 05AB BA          	cmp al, bl
0049++ 05AC C6 B3 05    	je _strchr_end
0050++ 05AF 79          	inc d
0051++ 05B0 0A A5 05    	jmp _strchr_L0
0052++ 05B3             _strchr_end:
0053++ 05B3 1B          	mov al, bl
0054++ 05B4 09          	ret
0055++ 05B5             
0056++ 05B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 05B5             ; _strstr
0058++ 05B5             ; find sub-string
0059++ 05B5             ; str1 in SI
0060++ 05B5             ; str2 in DI
0061++ 05B5             ; SI points to end of source string
0062++ 05B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 05B5             _strstr:
0064++ 05B5 DB          	push al
0065++ 05B6 DA          	push d
0066++ 05B7 E3          	push di
0067++ 05B8             _strstr_loop:
0068++ 05B8 F3          	cmpsb					; compare a byte of the strings
0069++ 05B9 C7 C4 05    	jne _strstr_ret
0070++ 05BC FC 00 00    	lea d, [di + 0]
0071++ 05BF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 05C1 C7 B8 05    	jne _strstr_loop				; equal chars but not at end
0073++ 05C4             _strstr_ret:
0074++ 05C4 F0          	pop di
0075++ 05C5 E7          	pop d
0076++ 05C6 E8          	pop al
0077++ 05C7 09          	ret
0078++ 05C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 05C8             ; length of null terminated string
0080++ 05C8             ; result in C
0081++ 05C8             ; pointer in D
0082++ 05C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 05C8             _strlen:
0084++ 05C8 DA          	push d
0085++ 05C9 38 00 00    	mov c, 0
0086++ 05CC             _strlen_L1:
0087++ 05CC BD 00       	cmp byte [d], 0
0088++ 05CE C6 D6 05    	je _strlen_ret
0089++ 05D1 79          	inc d
0090++ 05D2 78          	inc c
0091++ 05D3 0A CC 05    	jmp _strlen_L1
0092++ 05D6             _strlen_ret:
0093++ 05D6 E7          	pop d
0094++ 05D7 09          	ret
0095++ 05D8             
0096++ 05D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 05D8             ; STRCMP
0098++ 05D8             ; compare two strings
0099++ 05D8             ; str1 in SI
0100++ 05D8             ; str2 in DI
0101++ 05D8             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 05D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 05D8             _strcmp:
0104++ 05D8 DB          	push al
0105++ 05D9 DA          	push d
0106++ 05DA E3          	push di
0107++ 05DB E2          	push si
0108++ 05DC             _strcmp_loop:
0109++ 05DC F3          	cmpsb					; compare a byte of the strings
0110++ 05DD C7 E8 05    	jne _strcmp_ret
0111++ 05E0 FB FF FF    	lea d, [si +- 1]
0112++ 05E3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 05E5 C7 DC 05    	jne _strcmp_loop				; equal chars but not at end
0114++ 05E8             _strcmp_ret:
0115++ 05E8 EF          	pop si
0116++ 05E9 F0          	pop di
0117++ 05EA E7          	pop d
0118++ 05EB E8          	pop al
0119++ 05EC 09          	ret
0120++ 05ED             
0121++ 05ED             
0122++ 05ED             ; STRCPY
0123++ 05ED             ; copy null terminated string from SI to DI
0124++ 05ED             ; source in SI
0125++ 05ED             ; destination in DI
0126++ 05ED             _strcpy:
0127++ 05ED E2          	push si
0128++ 05EE E3          	push di
0129++ 05EF DB          	push al
0130++ 05F0             _strcpy_L1:
0131++ 05F0 F6          	lodsb
0132++ 05F1 F7          	stosb
0133++ 05F2 B9 00       	cmp al, 0
0134++ 05F4 C7 F0 05    	jne _strcpy_L1
0135++ 05F7             _strcpy_end:
0136++ 05F7 E8          	pop al
0137++ 05F8 F0          	pop di
0138++ 05F9 EF          	pop si
0139++ 05FA 09          	ret
0140++ 05FB             
0141++ 05FB             ; STRCAT
0142++ 05FB             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 05FB             ; source in SI
0144++ 05FB             ; destination in DI
0145++ 05FB             _strcat:
0146++ 05FB E2          	push si
0147++ 05FC E3          	push di
0148++ 05FD D7          	push a
0149++ 05FE DA          	push d
0150++ 05FF 50          	mov a, di
0151++ 0600 3C          	mov d, a
0152++ 0601             _strcat_goto_end_L1:
0153++ 0601 BD 00       	cmp byte[d], 0
0154++ 0603 C6 0A 06    	je _strcat_start
0155++ 0606 79          	inc d
0156++ 0607 0A 01 06    	jmp _strcat_goto_end_L1
0157++ 060A             _strcat_start:
0158++ 060A FD 50       	mov di, d
0159++ 060C             _strcat_L1:
0160++ 060C F6          	lodsb
0161++ 060D F7          	stosb
0162++ 060E B9 00       	cmp al, 0
0163++ 0610 C7 0C 06    	jne _strcat_L1
0164++ 0613             _strcat_end:
0165++ 0613 E7          	pop d
0166++ 0614 E4          	pop a
0167++ 0615 F0          	pop di
0168++ 0616 EF          	pop si
0169++ 0617 09          	ret
0170++ 0618             
0171++ 0618             
0005+  0618             
0006+  0618             
0007+  0618             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  0618             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  0618             ; ASCII in BL
0010+  0618             ; result in AL
0011+  0618             ; ascii for F = 0100 0110
0012+  0618             ; ascii for 9 = 0011 1001
0013+  0618             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  0618             hex_ascii_encode:
0015+  0618 1B            mov al, bl
0016+  0619 93 40         test al, $40        ; test if letter or number
0017+  061B C7 21 06      jnz hex_letter
0018+  061E 87 0F         and al, $0F        ; get number
0019+  0620 09            ret
0020+  0621             hex_letter:
0021+  0621 87 0F         and al, $0F        ; get letter
0022+  0623 6A 09         add al, 9
0023+  0625 09            ret
0024+  0626             
0025+  0626             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0626             ; ATOI
0027+  0626             ; 2 letter hex string in B
0028+  0626             ; 8bit integer returned in AL
0029+  0626             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  0626             _atoi:
0031+  0626 D8            push b
0032+  0627 07 18 06      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  062A 30            mov bl, bh
0034+  062B DB            push al          ; save a
0035+  062C 07 18 06      call hex_ascii_encode
0036+  062F EA            pop bl  
0037+  0630 FD 9E 04      shl al, 4
0038+  0633 8C            or al, bl
0039+  0634 E5            pop b
0040+  0635 09            ret  
0041+  0636             
0042+  0636             
0043+  0636             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0636             ; scanf
0045+  0636             ; no need for explanations!
0046+  0636             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0636             scanf:
0048+  0636 09            ret
0049+  0637             
0050+  0637             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0637             ; ITOA
0052+  0637             ; 8bit value in BL
0053+  0637             ; 2 byte ASCII result in A
0054+  0637             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0637             _itoa:
0056+  0637 DA            push d
0057+  0638 D8            push b
0058+  0639 A7 00         mov bh, 0
0059+  063B FD A4 04      shr bl, 4  
0060+  063E 74            mov d, b
0061+  063F 1F E7 08      mov al, [d + s_hex_digits]
0062+  0642 23            mov ah, al
0063+  0643               
0064+  0643 E5            pop b
0065+  0644 D8            push b
0066+  0645 A7 00         mov bh, 0
0067+  0647 FD 87 0F      and bl, $0F
0068+  064A 74            mov d, b
0069+  064B 1F E7 08      mov al, [d + s_hex_digits]
0070+  064E E5            pop b
0071+  064F E7            pop d
0072+  0650 09            ret
0073+  0651             
0074+  0651             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0651             ; HEX STRING TO BINARY
0076+  0651             ; di = destination address
0077+  0651             ; si = source
0078+  0651             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0651             _hex_to_int:
0080+  0651             _hex_to_int_L1:
0081+  0651 F6            lodsb          ; load from [SI] to AL
0082+  0652 B9 00         cmp al, 0        ; check if ASCII 0
0083+  0654 C6 61 06      jz _hex_to_int_ret
0084+  0657 36            mov bh, al
0085+  0658 F6            lodsb
0086+  0659 2F            mov bl, al
0087+  065A 07 26 06      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  065D F7            stosb          ; store AL to [DI]
0089+  065E 0A 51 06      jmp _hex_to_int_L1
0090+  0661             _hex_to_int_ret:
0091+  0661 09            ret    
0092+  0662             
0093+  0662             
0094+  0662             
0095+  0662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0662             ; GETCHAR
0097+  0662             ; char in ah
0098+  0662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0662             getch:
0100+  0662 DB            push al
0101+  0663             getch_retry:
0102+  0663 19 01         mov al, 1
0103+  0665 05 03         syscall sys_io      ; receive in AH
0104+  0667 E8            pop al
0105+  0668 09            ret
0106+  0669             
0107+  0669             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0669             ; PUTCHAR
0109+  0669             ; char in ah
0110+  0669             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0669             _putchar:
0112+  0669 D7            push a
0113+  066A 19 00         mov al, 0
0114+  066C 05 03         syscall sys_io      ; char in AH
0115+  066E E4            pop a
0116+  066F 09            ret
0117+  0670             
0118+  0670             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0670             ;; INPUT A STRING
0120+  0670             ;; terminates with null
0121+  0670             ;; pointer in D
0122+  0670             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0670             _gets:
0124+  0670 D7            push a
0125+  0671 DA            push d
0126+  0672             _gets_loop:
0127+  0672 19 01         mov al, 1
0128+  0674 05 03         syscall sys_io      ; receive in AH
0129+  0676 B9 00         cmp al, 0        ; check error code (AL)
0130+  0678 C6 72 06      je _gets_loop      ; if no char received, retry
0131+  067B             
0132+  067B 76 1B         cmp ah, 27
0133+  067D C6 9E 06      je _gets_ansi_esc
0134+  0680 76 0A         cmp ah, $0A        ; LF
0135+  0682 C6 09 07      je _gets_end
0136+  0685 76 0D         cmp ah, $0D        ; CR
0137+  0687 C6 09 07      je _gets_end
0138+  068A 76 5C         cmp ah, $5C        ; '\\'
0139+  068C C6 CA 06      je _gets_escape
0140+  068F               
0141+  068F 76 08         cmp ah, $08      ; check for backspace
0142+  0691 C6 9A 06      je _gets_backspace
0143+  0694             
0144+  0694 1A            mov al, ah
0145+  0695 3E            mov [d], al
0146+  0696 79            inc d
0147+  0697 0A 72 06      jmp _gets_loop
0148+  069A             _gets_backspace:
0149+  069A 7F            dec d
0150+  069B 0A 72 06      jmp _gets_loop
0151+  069E             _gets_ansi_esc:
0152+  069E 19 01         mov al, 1
0153+  06A0 05 03         syscall sys_io        ; receive in AH without echo
0154+  06A2 B9 00         cmp al, 0          ; check error code (AL)
0155+  06A4 C6 9E 06      je _gets_ansi_esc    ; if no char received, retry
0156+  06A7 76 5B         cmp ah, '['
0157+  06A9 C7 72 06      jne _gets_loop
0158+  06AC             _gets_ansi_esc_2:
0159+  06AC 19 01         mov al, 1
0160+  06AE 05 03         syscall sys_io          ; receive in AH without echo
0161+  06B0 B9 00         cmp al, 0            ; check error code (AL)
0162+  06B2 C6 AC 06      je _gets_ansi_esc_2  ; if no char received, retry
0163+  06B5 76 44         cmp ah, 'D'
0164+  06B7 C6 C2 06      je _gets_left_arrow
0165+  06BA 76 43         cmp ah, 'C'
0166+  06BC C6 C6 06      je _gets_right_arrow
0167+  06BF 0A 72 06      jmp _gets_loop
0168+  06C2             _gets_left_arrow:
0169+  06C2 7F            dec d
0170+  06C3 0A 72 06      jmp _gets_loop
0171+  06C6             _gets_right_arrow:
0172+  06C6 79            inc d
0173+  06C7 0A 72 06      jmp _gets_loop
0174+  06CA             _gets_escape:
0175+  06CA 19 01         mov al, 1
0176+  06CC 05 03         syscall sys_io      ; receive in AH
0177+  06CE B9 00         cmp al, 0        ; check error code (AL)
0178+  06D0 C6 CA 06      je _gets_escape      ; if no char received, retry
0179+  06D3 76 6E         cmp ah, 'n'
0180+  06D5 C6 F4 06      je _gets_LF
0181+  06D8 76 72         cmp ah, 'r'
0182+  06DA C6 FB 06      je _gets_CR
0183+  06DD 76 30         cmp ah, '0'
0184+  06DF C6 02 07      je _gets_NULL
0185+  06E2 76 5C         cmp ah, $5C  ; '\'
0186+  06E4 C6 ED 06      je _gets_slash
0187+  06E7 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  06E8 3E            mov [d], al
0189+  06E9 79            inc d
0190+  06EA 0A 72 06      jmp _gets_loop
0191+  06ED             _gets_slash:
0192+  06ED 19 5C         mov al, $5C
0193+  06EF 3E            mov [d], al
0194+  06F0 79            inc d
0195+  06F1 0A 72 06      jmp _gets_loop
0196+  06F4             _gets_LF:
0197+  06F4 19 0A         mov al, $0A
0198+  06F6 3E            mov [d], al
0199+  06F7 79            inc d
0200+  06F8 0A 72 06      jmp _gets_loop
0201+  06FB             _gets_CR:
0202+  06FB 19 0D         mov al, $0D
0203+  06FD 3E            mov [d], al
0204+  06FE 79            inc d
0205+  06FF 0A 72 06      jmp _gets_loop
0206+  0702             _gets_NULL:
0207+  0702 19 00         mov al, $00
0208+  0704 3E            mov [d], al
0209+  0705 79            inc d
0210+  0706 0A 72 06      jmp _gets_loop
0211+  0709             _gets_end:
0212+  0709 19 00         mov al, 0
0213+  070B 3E            mov [d], al        ; terminate string
0214+  070C E7            pop d
0215+  070D E4            pop a
0216+  070E 09            ret
0217+  070F             
0218+  070F             
0219+  070F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  070F             ;; INPUT TEXT
0221+  070F             ;; terminated with CTRL+D
0222+  070F             ;; pointer in D
0223+  070F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  070F             _gettxt:
0225+  070F D7            push a
0226+  0710 DA            push d
0227+  0711             _gettxt_loop:
0228+  0711 19 01         mov al, 1
0229+  0713 05 03         syscall sys_io      ; receive in AH
0230+  0715 B9 00         cmp al, 0        ; check error code (AL)
0231+  0717 C6 11 07      je _gettxt_loop    ; if no char received, retry
0232+  071A 76 04         cmp ah, 4      ; EOT
0233+  071C C6 5A 07      je _gettxt_end
0234+  071F 76 08         cmp ah, $08      ; check for backspace
0235+  0721 C6 56 07      je _gettxt_backspace
0236+  0724 76 5C         cmp ah, $5C        ; '\'
0237+  0726 C6 2F 07      je _gettxt_escape
0238+  0729 1A            mov al, ah
0239+  072A 3E            mov [d], al
0240+  072B 79            inc d
0241+  072C 0A 11 07      jmp _gettxt_loop
0242+  072F             _gettxt_escape:
0243+  072F 19 01         mov al, 1
0244+  0731 05 03         syscall sys_io      ; receive in AH
0245+  0733 B9 00         cmp al, 0        ; check error code (AL)
0246+  0735 C6 2F 07      je _gettxt_escape    ; if no char received, retry
0247+  0738 76 6E         cmp ah, 'n'
0248+  073A C6 48 07      je _gettxt_LF
0249+  073D 76 72         cmp ah, 'r'
0250+  073F C6 4F 07      je _gettxt_CR
0251+  0742 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  0743 3E            mov [d], al
0253+  0744 79            inc d
0254+  0745 0A 11 07      jmp _gettxt_loop
0255+  0748             _gettxt_LF:
0256+  0748 19 0A         mov al, $0A
0257+  074A 3E            mov [d], al
0258+  074B 79            inc d
0259+  074C 0A 11 07      jmp _gettxt_loop
0260+  074F             _gettxt_CR:
0261+  074F 19 0D         mov al, $0D
0262+  0751 3E            mov [d], al
0263+  0752 79            inc d
0264+  0753 0A 11 07      jmp _gettxt_loop
0265+  0756             _gettxt_backspace:
0266+  0756 7F            dec d
0267+  0757 0A 11 07      jmp _gettxt_loop
0268+  075A             _gettxt_end:
0269+  075A 19 00         mov al, 0
0270+  075C 3E            mov [d], al        ; terminate string
0271+  075D E7            pop d
0272+  075E E4            pop a
0273+  075F 09            ret
0274+  0760             
0275+  0760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  0760             ; PRINT NEW LINE
0277+  0760             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  0760             printnl:
0279+  0760 D7            push a
0280+  0761 10 00 0A      mov a, $0A00
0281+  0764 05 03         syscall sys_io
0282+  0766 10 00 0D      mov a, $0D00
0283+  0769 05 03         syscall sys_io
0284+  076B E4            pop a
0285+  076C 09            ret
0286+  076D             
0287+  076D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  076D             ; _strtoint
0289+  076D             ; 4 digit hex string number in d
0290+  076D             ; integer returned in A
0291+  076D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  076D             _strtointx:
0293+  076D D8            push b
0294+  076E 32            mov bl, [d]
0295+  076F 37            mov bh, bl
0296+  0770 33 01 00      mov bl, [d + 1]
0297+  0773 07 26 06      call _atoi        ; convert to int in AL
0298+  0776 23            mov ah, al        ; move to AH
0299+  0777 33 02 00      mov bl, [d + 2]
0300+  077A 37            mov bh, bl
0301+  077B 33 03 00      mov bl, [d + 3]
0302+  077E 07 26 06      call _atoi        ; convert to int in AL
0303+  0781 E5            pop b
0304+  0782 09            ret
0305+  0783             
0306+  0783             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  0783             ; _strtoint
0308+  0783             ; 5 digit base10 string number in d
0309+  0783             ; integer returned in A
0310+  0783             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  0783             _strtoint:
0312+  0783 E2            push si
0313+  0784 D8            push b
0314+  0785 D9            push c
0315+  0786 DA            push d
0316+  0787 07 C8 05      call _strlen      ; get string length in C
0317+  078A 7E            dec c
0318+  078B FD 4E         mov si, d
0319+  078D 12            mov a, c
0320+  078E FD 99         shl a
0321+  0790 3B FF 08      mov d, table_power
0322+  0793 59            add d, a
0323+  0794 38 00 00      mov c, 0
0324+  0797             _strtoint_L0:
0325+  0797 F6            lodsb      ; load ASCII to al
0326+  0798 B9 00         cmp al, 0
0327+  079A C6 AD 07      je _strtoint_end
0328+  079D 6F 30         sub al, $30    ; make into integer
0329+  079F 22 00         mov ah, 0
0330+  07A1 2A            mov b, [d]
0331+  07A2 AC            mul a, b      ; result in B since it fits in 16bits
0332+  07A3 11            mov a, b
0333+  07A4 28            mov b, c
0334+  07A5 54            add a, b
0335+  07A6 39            mov c, a
0336+  07A7 63 02 00      sub d, 2
0337+  07AA 0A 97 07      jmp _strtoint_L0
0338+  07AD             _strtoint_end:
0339+  07AD 12            mov a, c
0340+  07AE E7            pop d
0341+  07AF E6            pop c
0342+  07B0 E5            pop b
0343+  07B1 EF            pop si
0344+  07B2 09            ret
0345+  07B3             
0346+  07B3             
0347+  07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  07B3             ; PRINT NULL TERMINATED STRING
0349+  07B3             ; pointer in D
0350+  07B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  07B3             _puts:
0352+  07B3 D7            push a
0353+  07B4 DA            push d
0354+  07B5             _puts_L1:
0355+  07B5 1E            mov al, [d]
0356+  07B6 B9 00         cmp al, 0
0357+  07B8 C6 C4 07      jz _puts_END
0358+  07BB 23            mov ah, al
0359+  07BC 19 00         mov al, 0
0360+  07BE 05 03         syscall sys_io
0361+  07C0 79            inc d
0362+  07C1 0A B5 07      jmp _puts_L1
0363+  07C4             _puts_END:
0364+  07C4 E7            pop d
0365+  07C5 E4            pop a
0366+  07C6 09            ret
0367+  07C7             
0368+  07C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  07C7             ; PRINT N SIZE STRING
0370+  07C7             ; pointer in D
0371+  07C7             ; size in C
0372+  07C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  07C7             _putsn:
0374+  07C7 DB            push al
0375+  07C8 DA            push d
0376+  07C9 D9            push c
0377+  07CA             _putsn_L0:
0378+  07CA 1E            mov al, [d]
0379+  07CB 23            mov ah, al
0380+  07CC 19 00         mov al, 0
0381+  07CE 05 03         syscall sys_io
0382+  07D0 79            inc d
0383+  07D1 7E            dec c  
0384+  07D2 C2 00 00      cmp c, 0
0385+  07D5 C7 CA 07      jne _putsn_L0
0386+  07D8             _putsn_end:
0387+  07D8 E6            pop c
0388+  07D9 E7            pop d
0389+  07DA E8            pop al
0390+  07DB 09            ret
0391+  07DC             
0392+  07DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  07DC             ; print 16bit decimal number
0394+  07DC             ; input number in A
0395+  07DC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  07DC             print_u16d:
0397+  07DC D7            push a
0398+  07DD D8            push b
0399+  07DE 26 10 27      mov b, 10000
0400+  07E1 AE            div a, b      ; get 10000's coeff.
0401+  07E2 07 04 08      call print_number
0402+  07E5 11            mov a, b
0403+  07E6 26 E8 03      mov b, 1000
0404+  07E9 AE            div a, b      ; get 1000's coeff.
0405+  07EA 07 04 08      call print_number
0406+  07ED 11            mov a, b
0407+  07EE 26 64 00      mov b, 100
0408+  07F1 AE            div a, b
0409+  07F2 07 04 08      call print_number
0410+  07F5 11            mov a, b
0411+  07F6 26 0A 00      mov b, 10
0412+  07F9 AE            div a, b
0413+  07FA 07 04 08      call print_number
0414+  07FD 1B            mov al, bl      ; 1's coeff in bl
0415+  07FE 07 04 08      call print_number
0416+  0801 E5            pop b
0417+  0802 E4            pop a
0418+  0803 09            ret
0419+  0804             
0420+  0804             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  0804             ; print AL
0422+  0804             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  0804             print_number:
0424+  0804 6A 30         add al, $30
0425+  0806 23            mov ah, al
0426+  0807 07 69 06      call _putchar
0427+  080A 09            ret
0428+  080B             
0429+  080B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  080B             ; PRINT 16BIT HEX INTEGER
0431+  080B             ; integer value in reg B
0432+  080B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  080B             print_u16x:
0434+  080B D7            push a
0435+  080C D8            push b
0436+  080D DD            push bl
0437+  080E 30            mov bl, bh
0438+  080F 07 37 06      call _itoa        ; convert bh to char in A
0439+  0812 2F            mov bl, al        ; save al
0440+  0813 19 00         mov al, 0
0441+  0815 05 03         syscall sys_io        ; display AH
0442+  0817 24            mov ah, bl        ; retrieve al
0443+  0818 19 00         mov al, 0
0444+  081A 05 03         syscall sys_io        ; display AL
0445+  081C             
0446+  081C EA            pop bl
0447+  081D 07 37 06      call _itoa        ; convert bh to char in A
0448+  0820 2F            mov bl, al        ; save al
0449+  0821 19 00         mov al, 0
0450+  0823 05 03         syscall sys_io        ; display AH
0451+  0825 24            mov ah, bl        ; retrieve al
0452+  0826 19 00         mov al, 0
0453+  0828 05 03         syscall sys_io        ; display AL
0454+  082A             
0455+  082A E5            pop b
0456+  082B E4            pop a
0457+  082C 09            ret
0458+  082D             
0459+  082D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  082D             ; INPUT 16BIT HEX INTEGER
0461+  082D             ; read 16bit integer into A
0462+  082D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  082D             scan_u16x:
0464+  082D F8 10 00      enter 16
0465+  0830 D8            push b
0466+  0831 DA            push d
0467+  0832             
0468+  0832 FA F1 FF      lea d, [bp + -15]
0469+  0835 07 70 06      call _gets        ; get number
0470+  0838             
0471+  0838 32            mov bl, [d]
0472+  0839 37            mov bh, bl
0473+  083A 33 01 00      mov bl, [d + 1]
0474+  083D 07 26 06      call _atoi        ; convert to int in AL
0475+  0840 23            mov ah, al        ; move to AH
0476+  0841             
0477+  0841 33 02 00      mov bl, [d + 2]
0478+  0844 37            mov bh, bl
0479+  0845 33 03 00      mov bl, [d + 3]
0480+  0848 07 26 06      call _atoi        ; convert to int in AL
0481+  084B             
0482+  084B E7            pop d
0483+  084C E5            pop b
0484+  084D F9            leave
0485+  084E 09            ret
0486+  084F             
0487+  084F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  084F             ; PRINT 8bit HEX INTEGER
0489+  084F             ; integer value in reg bl
0490+  084F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  084F             print_u8x:
0492+  084F D7            push a
0493+  0850 DD            push bl
0494+  0851             
0495+  0851 07 37 06      call _itoa        ; convert bl to char in A
0496+  0854 2F            mov bl, al        ; save al
0497+  0855 19 00         mov al, 0
0498+  0857 05 03         syscall sys_io        ; display AH
0499+  0859 24            mov ah, bl        ; retrieve al
0500+  085A 19 00         mov al, 0
0501+  085C 05 03         syscall sys_io        ; display AL
0502+  085E             
0503+  085E EA            pop bl
0504+  085F E4            pop a
0505+  0860 09            ret
0506+  0861             
0507+  0861             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  0861             ; print 8bit decimal unsigned number
0509+  0861             ; input number in AL
0510+  0861             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  0861             print_u8d:
0512+  0861 D7            push a
0513+  0862 D8            push b
0514+  0863             
0515+  0863 22 00         mov ah, 0
0516+  0865 26 64 00      mov b, 100
0517+  0868 AE            div a, b
0518+  0869 D8            push b      ; save remainder
0519+  086A B9 00         cmp al, 0
0520+  086C C6 76 08      je skip100
0521+  086F 6A 30         add al, $30
0522+  0871 23            mov ah, al
0523+  0872 19 00         mov al, 0
0524+  0874 05 03         syscall sys_io  ; print coeff
0525+  0876             skip100:
0526+  0876 E4            pop a
0527+  0877 22 00         mov ah, 0
0528+  0879 26 0A 00      mov b, 10
0529+  087C AE            div a, b
0530+  087D D8            push b      ; save remainder
0531+  087E B9 00         cmp al, 0
0532+  0880 C6 8A 08      je skip10
0533+  0883 6A 30         add al, $30
0534+  0885 23            mov ah, al
0535+  0886 19 00         mov al, 0
0536+  0888 05 03         syscall sys_io  ; print coeff
0537+  088A             skip10:
0538+  088A E4            pop a
0539+  088B 1B            mov al, bl
0540+  088C 6A 30         add al, $30
0541+  088E 23            mov ah, al
0542+  088F 19 00         mov al, 0
0543+  0891 05 03         syscall sys_io  ; print coeff
0544+  0893 E5            pop b
0545+  0894 E4            pop a
0546+  0895 09            ret
0547+  0896             
0548+  0896             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  0896             ; INPUT 8BIT HEX INTEGER
0550+  0896             ; read 8bit integer into AL
0551+  0896             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  0896             scan_u8x:
0553+  0896 F8 04 00      enter 4
0554+  0899 D8            push b
0555+  089A DA            push d
0556+  089B             
0557+  089B FA FD FF      lea d, [bp + -3]
0558+  089E 07 70 06      call _gets        ; get number
0559+  08A1             
0560+  08A1 32            mov bl, [d]
0561+  08A2 37            mov bh, bl
0562+  08A3 33 01 00      mov bl, [d + 1]
0563+  08A6 07 26 06      call _atoi        ; convert to int in AL
0564+  08A9             
0565+  08A9 E7            pop d
0566+  08AA E5            pop b
0567+  08AB F9            leave
0568+  08AC 09            ret
0569+  08AD             
0570+  08AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  08AD             ; input decimal number
0572+  08AD             ; result in A
0573+  08AD             ; 655'\0'
0574+  08AD             ; low--------high
0575+  08AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  08AD             scan_u16d:
0577+  08AD F8 08 00      enter 8
0578+  08B0 E2            push si
0579+  08B1 D8            push b
0580+  08B2 D9            push c
0581+  08B3 DA            push d
0582+  08B4 FA F9 FF      lea d, [bp +- 7]
0583+  08B7 07 70 06      call _gets
0584+  08BA 07 C8 05      call _strlen      ; get string length in C
0585+  08BD 7E            dec c
0586+  08BE FD 4E         mov si, d
0587+  08C0 12            mov a, c
0588+  08C1 FD 99         shl a
0589+  08C3 3B FF 08      mov d, table_power
0590+  08C6 59            add d, a
0591+  08C7 38 00 00      mov c, 0
0592+  08CA             mul_loop:
0593+  08CA F6            lodsb      ; load ASCII to al
0594+  08CB B9 00         cmp al, 0
0595+  08CD C6 E0 08      je mul_exit
0596+  08D0 6F 30         sub al, $30    ; make into integer
0597+  08D2 22 00         mov ah, 0
0598+  08D4 2A            mov b, [d]
0599+  08D5 AC            mul a, b      ; result in B since it fits in 16bits
0600+  08D6 11            mov a, b
0601+  08D7 28            mov b, c
0602+  08D8 54            add a, b
0603+  08D9 39            mov c, a
0604+  08DA 63 02 00      sub d, 2
0605+  08DD 0A CA 08      jmp mul_loop
0606+  08E0             mul_exit:
0607+  08E0 12            mov a, c
0608+  08E1 E7            pop d
0609+  08E2 E6            pop c
0610+  08E3 E5            pop b
0611+  08E4 EF            pop si
0612+  08E5 F9            leave
0613+  08E6 09            ret
0614+  08E7             
0615+  08E7             
0616+  08E7 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  08EB 34 35 36 37 
0616+  08EF 38 39 41 42 
0616+  08F3 43 44 45 46 
0617+  08F7 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  08FB 1B 5B 48 00 
0618+  08FF             
0619+  08FF             table_power:
0620+  08FF 01 00         .dw 1
0621+  0901 0A 00         .dw 10
0622+  0903 64 00         .dw 100
0623+  0905 E8 03         .dw 1000
0624+  0907 10 27         .dw 100000287   0909             ; --- END INLINE ASM BLOCK
0288   0909             
0289   0909 F9            leave
0290   090A 09            ret
0291   090B             
0292   090B             print_signed_long:
0293   090B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0294   090E             ; $digits 
0295   090E             ; $i 
0296   090E 10 00 00      mov a, $0
0297   0911 45 F5 FF      mov [bp + -11], a
0298   0914 52 0C 00      sub sp, 12
0299   0917             ;; if (num < 0) { 
0300   0917             _if7_cond:
0301   0917 FA 05 00      lea d, [bp + 5] ; $num
0302   091A 2A            mov b, [d]
0303   091B             ; START RELATIONAL
0304   091B D7            push a
0305   091C 11            mov a, b
0306   091D 26 00 00      mov b, $0
0307   0920 B0            cmp a, b
0308   0921 FD 73         slt ; < 
0309   0923 E4            pop a
0310   0924             ; END RELATIONAL
0311   0924 C0 00 00      cmp b, 0
0312   0927 C6 44 09      je _if7_else
0313   092A             _if7_true:
0314   092A             ;; putchar('-'); 
0315   092A 26 2D 00      mov b, $2d
0316   092D DD            push bl
0317   092E 07 71 05      call putchar
0318   0931 51 01 00      add sp, 1
0319   0934             ;; num = -num; 
0320   0934 FA 05 00      lea d, [bp + 5] ; $num
0321   0937 DA            push d
0322   0938 FA 05 00      lea d, [bp + 5] ; $num
0323   093B 2A            mov b, [d]
0324   093C FD 97         neg b
0325   093E E7            pop d
0326   093F FD 43         mov [d], b
0327   0941 0A 66 09      jmp _if7_exit
0328   0944             _if7_else:
0329   0944             ;; if (num == 0) { 
0330   0944             _if8_cond:
0331   0944 FA 05 00      lea d, [bp + 5] ; $num
0332   0947 2A            mov b, [d]
0333   0948             ; START RELATIONAL
0334   0948 D7            push a
0335   0949 11            mov a, b
0336   094A 26 00 00      mov b, $0
0337   094D B0            cmp a, b
0338   094E FD 71         seq ; ==
0339   0950 E4            pop a
0340   0951             ; END RELATIONAL
0341   0951 C0 00 00      cmp b, 0
0342   0954 C6 66 09      je _if8_exit
0343   0957             _if8_true:
0344   0957             ;; putchar('0'); 
0345   0957 26 30 00      mov b, $30
0346   095A DD            push bl
0347   095B 07 71 05      call putchar
0348   095E 51 01 00      add sp, 1
0349   0961             ;; return; 
0350   0961 F9            leave
0351   0962 09            ret
0352   0963 0A 66 09      jmp _if8_exit
0353   0966             _if8_exit:
0354   0966             _if7_exit:
0355   0966             ;; while (num > 0) { 
0356   0966             _while9_cond:
0357   0966 FA 05 00      lea d, [bp + 5] ; $num
0358   0969 2A            mov b, [d]
0359   096A             ; START RELATIONAL
0360   096A D7            push a
0361   096B 11            mov a, b
0362   096C 26 00 00      mov b, $0
0363   096F B0            cmp a, b
0364   0970 FD 7F         sgt ; >
0365   0972 E4            pop a
0366   0973             ; END RELATIONAL
0367   0973 C0 00 00      cmp b, 0
0368   0976 C6 C1 09      je _while9_exit
0369   0979             _while9_block:
0370   0979             ;; digits[i] = '0' + (num % 10); 
0371   0979 FA F7 FF      lea d, [bp + -9] ; $digits
0372   097C D7            push a
0373   097D DA            push d
0374   097E FA F5 FF      lea d, [bp + -11] ; $i
0375   0981 2A            mov b, [d]
0376   0982 E7            pop d
0377   0983 5A            add d, b
0378   0984 E4            pop a
0379   0985 DA            push d
0380   0986 26 30 00      mov b, $30
0381   0989             ; START TERMS
0382   0989 D7            push a
0383   098A 11            mov a, b
0384   098B FA 05 00      lea d, [bp + 5] ; $num
0385   098E 2A            mov b, [d]
0386   098F             ; START FACTORS
0387   098F D7            push a
0388   0990 11            mov a, b
0389   0991 26 0A 00      mov b, $a
0390   0994 AE            div a, b ; 
0391   0995 11            mov a, b
0392   0996 27            mov b, a
0393   0997 E4            pop a
0394   0998             ; END FACTORS
0395   0998 54            add a, b
0396   0999 27            mov b, a
0397   099A E4            pop a
0398   099B             ; END TERMS
0399   099B E7            pop d
0400   099C FD 3E         mov [d], bl
0401   099E             ;; num = num / 10; 
0402   099E FA 05 00      lea d, [bp + 5] ; $num
0403   09A1 DA            push d
0404   09A2 FA 05 00      lea d, [bp + 5] ; $num
0405   09A5 2A            mov b, [d]
0406   09A6             ; START FACTORS
0407   09A6 D7            push a
0408   09A7 11            mov a, b
0409   09A8 26 0A 00      mov b, $a
0410   09AB AE            div a, b
0411   09AC 27            mov b, a
0412   09AD E4            pop a
0413   09AE             ; END FACTORS
0414   09AE E7            pop d
0415   09AF FD 43         mov [d], b
0416   09B1             ;; i++; 
0417   09B1 FA F5 FF      lea d, [bp + -11] ; $i
0418   09B4 2A            mov b, [d]
0419   09B5 D8            push b
0420   09B6 FD 77         inc b
0421   09B8 FA F5 FF      lea d, [bp + -11] ; $i
0422   09BB FD 43         mov [d], b
0423   09BD E5            pop b
0424   09BE 0A 66 09      jmp _while9_cond
0425   09C1             _while9_exit:
0426   09C1             ;; while (i > 0) { 
0427   09C1             _while10_cond:
0428   09C1 FA F5 FF      lea d, [bp + -11] ; $i
0429   09C4 2A            mov b, [d]
0430   09C5             ; START RELATIONAL
0431   09C5 D7            push a
0432   09C6 11            mov a, b
0433   09C7 26 00 00      mov b, $0
0434   09CA B0            cmp a, b
0435   09CB FD 7F         sgt ; >
0436   09CD E4            pop a
0437   09CE             ; END RELATIONAL
0438   09CE C0 00 00      cmp b, 0
0439   09D1 C6 FA 09      je _while10_exit
0440   09D4             _while10_block:
0441   09D4             ;; i--; 
0442   09D4 FA F5 FF      lea d, [bp + -11] ; $i
0443   09D7 2A            mov b, [d]
0444   09D8 D8            push b
0445   09D9 FD 7D         dec b
0446   09DB FA F5 FF      lea d, [bp + -11] ; $i
0447   09DE FD 43         mov [d], b
0448   09E0 E5            pop b
0449   09E1             ;; putchar(digits[i]); 
0450   09E1 FA F7 FF      lea d, [bp + -9] ; $digits
0451   09E4 D7            push a
0452   09E5 DA            push d
0453   09E6 FA F5 FF      lea d, [bp + -11] ; $i
0454   09E9 2A            mov b, [d]
0455   09EA E7            pop d
0456   09EB 5A            add d, b
0457   09EC E4            pop a
0458   09ED 32            mov bl, [d]
0459   09EE A7 00         mov bh, 0
0460   09F0 DD            push bl
0461   09F1 07 71 05      call putchar
0462   09F4 51 01 00      add sp, 1
0463   09F7 0A C1 09      jmp _while10_cond
0464   09FA             _while10_exit:
0465   09FA F9            leave
0466   09FB 09            ret
0467   09FC             
0468   09FC             print_unsigned_long:
0469   09FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0470   09FF             ; $digits 
0471   09FF             ; $i 
0472   09FF 52 0C 00      sub sp, 12
0473   0A02             ;; i = 0; 
0474   0A02 FA F5 FF      lea d, [bp + -11] ; $i
0475   0A05 DA            push d
0476   0A06 26 00 00      mov b, $0
0477   0A09 E7            pop d
0478   0A0A FD 43         mov [d], b
0479   0A0C             ;; if(num == 0){ 
0480   0A0C             _if11_cond:
0481   0A0C FA 05 00      lea d, [bp + 5] ; $num
0482   0A0F 2A            mov b, [d]
0483   0A10             ; START RELATIONAL
0484   0A10 D7            push a
0485   0A11 11            mov a, b
0486   0A12 26 00 00      mov b, $0
0487   0A15 B0            cmp a, b
0488   0A16 FD 71         seq ; ==
0489   0A18 E4            pop a
0490   0A19             ; END RELATIONAL
0491   0A19 C0 00 00      cmp b, 0
0492   0A1C C6 2E 0A      je _if11_exit
0493   0A1F             _if11_true:
0494   0A1F             ;; putchar('0'); 
0495   0A1F 26 30 00      mov b, $30
0496   0A22 DD            push bl
0497   0A23 07 71 05      call putchar
0498   0A26 51 01 00      add sp, 1
0499   0A29             ;; return; 
0500   0A29 F9            leave
0501   0A2A 09            ret
0502   0A2B 0A 2E 0A      jmp _if11_exit
0503   0A2E             _if11_exit:
0504   0A2E             ;; while (num > 0) { 
0505   0A2E             _while12_cond:
0506   0A2E FA 05 00      lea d, [bp + 5] ; $num
0507   0A31 2A            mov b, [d]
0508   0A32             ; START RELATIONAL
0509   0A32 D7            push a
0510   0A33 11            mov a, b
0511   0A34 26 00 00      mov b, $0
0512   0A37 B0            cmp a, b
0513   0A38 FD 81         sgu ; > (unsigned)
0514   0A3A E4            pop a
0515   0A3B             ; END RELATIONAL
0516   0A3B C0 00 00      cmp b, 0
0517   0A3E C6 89 0A      je _while12_exit
0518   0A41             _while12_block:
0519   0A41             ;; digits[i] = '0' + (num % 10); 
0520   0A41 FA F7 FF      lea d, [bp + -9] ; $digits
0521   0A44 D7            push a
0522   0A45 DA            push d
0523   0A46 FA F5 FF      lea d, [bp + -11] ; $i
0524   0A49 2A            mov b, [d]
0525   0A4A E7            pop d
0526   0A4B 5A            add d, b
0527   0A4C E4            pop a
0528   0A4D DA            push d
0529   0A4E 26 30 00      mov b, $30
0530   0A51             ; START TERMS
0531   0A51 D7            push a
0532   0A52 11            mov a, b
0533   0A53 FA 05 00      lea d, [bp + 5] ; $num
0534   0A56 2A            mov b, [d]
0535   0A57             ; START FACTORS
0536   0A57 D7            push a
0537   0A58 11            mov a, b
0538   0A59 26 0A 00      mov b, $a
0539   0A5C AE            div a, b ; 
0540   0A5D 11            mov a, b
0541   0A5E 27            mov b, a
0542   0A5F E4            pop a
0543   0A60             ; END FACTORS
0544   0A60 54            add a, b
0545   0A61 27            mov b, a
0546   0A62 E4            pop a
0547   0A63             ; END TERMS
0548   0A63 E7            pop d
0549   0A64 FD 3E         mov [d], bl
0550   0A66             ;; num = num / 10; 
0551   0A66 FA 05 00      lea d, [bp + 5] ; $num
0552   0A69 DA            push d
0553   0A6A FA 05 00      lea d, [bp + 5] ; $num
0554   0A6D 2A            mov b, [d]
0555   0A6E             ; START FACTORS
0556   0A6E D7            push a
0557   0A6F 11            mov a, b
0558   0A70 26 0A 00      mov b, $a
0559   0A73 AE            div a, b
0560   0A74 27            mov b, a
0561   0A75 E4            pop a
0562   0A76             ; END FACTORS
0563   0A76 E7            pop d
0564   0A77 FD 43         mov [d], b
0565   0A79             ;; i++; 
0566   0A79 FA F5 FF      lea d, [bp + -11] ; $i
0567   0A7C 2A            mov b, [d]
0568   0A7D D8            push b
0569   0A7E FD 77         inc b
0570   0A80 FA F5 FF      lea d, [bp + -11] ; $i
0571   0A83 FD 43         mov [d], b
0572   0A85 E5            pop b
0573   0A86 0A 2E 0A      jmp _while12_cond
0574   0A89             _while12_exit:
0575   0A89             ;; while (i > 0) { 
0576   0A89             _while13_cond:
0577   0A89 FA F5 FF      lea d, [bp + -11] ; $i
0578   0A8C 2A            mov b, [d]
0579   0A8D             ; START RELATIONAL
0580   0A8D D7            push a
0581   0A8E 11            mov a, b
0582   0A8F 26 00 00      mov b, $0
0583   0A92 B0            cmp a, b
0584   0A93 FD 7F         sgt ; >
0585   0A95 E4            pop a
0586   0A96             ; END RELATIONAL
0587   0A96 C0 00 00      cmp b, 0
0588   0A99 C6 C2 0A      je _while13_exit
0589   0A9C             _while13_block:
0590   0A9C             ;; i--; 
0591   0A9C FA F5 FF      lea d, [bp + -11] ; $i
0592   0A9F 2A            mov b, [d]
0593   0AA0 D8            push b
0594   0AA1 FD 7D         dec b
0595   0AA3 FA F5 FF      lea d, [bp + -11] ; $i
0596   0AA6 FD 43         mov [d], b
0597   0AA8 E5            pop b
0598   0AA9             ;; putchar(digits[i]); 
0599   0AA9 FA F7 FF      lea d, [bp + -9] ; $digits
0600   0AAC D7            push a
0601   0AAD DA            push d
0602   0AAE FA F5 FF      lea d, [bp + -11] ; $i
0603   0AB1 2A            mov b, [d]
0604   0AB2 E7            pop d
0605   0AB3 5A            add d, b
0606   0AB4 E4            pop a
0607   0AB5 32            mov bl, [d]
0608   0AB6 A7 00         mov bh, 0
0609   0AB8 DD            push bl
0610   0AB9 07 71 05      call putchar
0611   0ABC 51 01 00      add sp, 1
0612   0ABF 0A 89 0A      jmp _while13_cond
0613   0AC2             _while13_exit:
0614   0AC2 F9            leave
0615   0AC3 09            ret
0616   0AC4             
0617   0AC4             print_unsigned:
0618   0AC4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0619   0AC7             ; $digits 
0620   0AC7             ; $i 
0621   0AC7 52 07 00      sub sp, 7
0622   0ACA             ;; i = 0; 
0623   0ACA FA FA FF      lea d, [bp + -6] ; $i
0624   0ACD DA            push d
0625   0ACE 26 00 00      mov b, $0
0626   0AD1 E7            pop d
0627   0AD2 FD 43         mov [d], b
0628   0AD4             ;; if(num == 0){ 
0629   0AD4             _if14_cond:
0630   0AD4 FA 05 00      lea d, [bp + 5] ; $num
0631   0AD7 2A            mov b, [d]
0632   0AD8             ; START RELATIONAL
0633   0AD8 D7            push a
0634   0AD9 11            mov a, b
0635   0ADA 26 00 00      mov b, $0
0636   0ADD B0            cmp a, b
0637   0ADE FD 71         seq ; ==
0638   0AE0 E4            pop a
0639   0AE1             ; END RELATIONAL
0640   0AE1 C0 00 00      cmp b, 0
0641   0AE4 C6 F6 0A      je _if14_exit
0642   0AE7             _if14_true:
0643   0AE7             ;; putchar('0'); 
0644   0AE7 26 30 00      mov b, $30
0645   0AEA DD            push bl
0646   0AEB 07 71 05      call putchar
0647   0AEE 51 01 00      add sp, 1
0648   0AF1             ;; return; 
0649   0AF1 F9            leave
0650   0AF2 09            ret
0651   0AF3 0A F6 0A      jmp _if14_exit
0652   0AF6             _if14_exit:
0653   0AF6             ;; while (num > 0) { 
0654   0AF6             _while15_cond:
0655   0AF6 FA 05 00      lea d, [bp + 5] ; $num
0656   0AF9 2A            mov b, [d]
0657   0AFA             ; START RELATIONAL
0658   0AFA D7            push a
0659   0AFB 11            mov a, b
0660   0AFC 26 00 00      mov b, $0
0661   0AFF B0            cmp a, b
0662   0B00 FD 81         sgu ; > (unsigned)
0663   0B02 E4            pop a
0664   0B03             ; END RELATIONAL
0665   0B03 C0 00 00      cmp b, 0
0666   0B06 C6 51 0B      je _while15_exit
0667   0B09             _while15_block:
0668   0B09             ;; digits[i] = '0' + (num % 10); 
0669   0B09 FA FC FF      lea d, [bp + -4] ; $digits
0670   0B0C D7            push a
0671   0B0D DA            push d
0672   0B0E FA FA FF      lea d, [bp + -6] ; $i
0673   0B11 2A            mov b, [d]
0674   0B12 E7            pop d
0675   0B13 5A            add d, b
0676   0B14 E4            pop a
0677   0B15 DA            push d
0678   0B16 26 30 00      mov b, $30
0679   0B19             ; START TERMS
0680   0B19 D7            push a
0681   0B1A 11            mov a, b
0682   0B1B FA 05 00      lea d, [bp + 5] ; $num
0683   0B1E 2A            mov b, [d]
0684   0B1F             ; START FACTORS
0685   0B1F D7            push a
0686   0B20 11            mov a, b
0687   0B21 26 0A 00      mov b, $a
0688   0B24 AE            div a, b ; 
0689   0B25 11            mov a, b
0690   0B26 27            mov b, a
0691   0B27 E4            pop a
0692   0B28             ; END FACTORS
0693   0B28 54            add a, b
0694   0B29 27            mov b, a
0695   0B2A E4            pop a
0696   0B2B             ; END TERMS
0697   0B2B E7            pop d
0698   0B2C FD 3E         mov [d], bl
0699   0B2E             ;; num = num / 10; 
0700   0B2E FA 05 00      lea d, [bp + 5] ; $num
0701   0B31 DA            push d
0702   0B32 FA 05 00      lea d, [bp + 5] ; $num
0703   0B35 2A            mov b, [d]
0704   0B36             ; START FACTORS
0705   0B36 D7            push a
0706   0B37 11            mov a, b
0707   0B38 26 0A 00      mov b, $a
0708   0B3B AE            div a, b
0709   0B3C 27            mov b, a
0710   0B3D E4            pop a
0711   0B3E             ; END FACTORS
0712   0B3E E7            pop d
0713   0B3F FD 43         mov [d], b
0714   0B41             ;; i++; 
0715   0B41 FA FA FF      lea d, [bp + -6] ; $i
0716   0B44 2A            mov b, [d]
0717   0B45 D8            push b
0718   0B46 FD 77         inc b
0719   0B48 FA FA FF      lea d, [bp + -6] ; $i
0720   0B4B FD 43         mov [d], b
0721   0B4D E5            pop b
0722   0B4E 0A F6 0A      jmp _while15_cond
0723   0B51             _while15_exit:
0724   0B51             ;; while (i > 0) { 
0725   0B51             _while16_cond:
0726   0B51 FA FA FF      lea d, [bp + -6] ; $i
0727   0B54 2A            mov b, [d]
0728   0B55             ; START RELATIONAL
0729   0B55 D7            push a
0730   0B56 11            mov a, b
0731   0B57 26 00 00      mov b, $0
0732   0B5A B0            cmp a, b
0733   0B5B FD 7F         sgt ; >
0734   0B5D E4            pop a
0735   0B5E             ; END RELATIONAL
0736   0B5E C0 00 00      cmp b, 0
0737   0B61 C6 8A 0B      je _while16_exit
0738   0B64             _while16_block:
0739   0B64             ;; i--; 
0740   0B64 FA FA FF      lea d, [bp + -6] ; $i
0741   0B67 2A            mov b, [d]
0742   0B68 D8            push b
0743   0B69 FD 7D         dec b
0744   0B6B FA FA FF      lea d, [bp + -6] ; $i
0745   0B6E FD 43         mov [d], b
0746   0B70 E5            pop b
0747   0B71             ;; putchar(digits[i]); 
0748   0B71 FA FC FF      lea d, [bp + -4] ; $digits
0749   0B74 D7            push a
0750   0B75 DA            push d
0751   0B76 FA FA FF      lea d, [bp + -6] ; $i
0752   0B79 2A            mov b, [d]
0753   0B7A E7            pop d
0754   0B7B 5A            add d, b
0755   0B7C E4            pop a
0756   0B7D 32            mov bl, [d]
0757   0B7E A7 00         mov bh, 0
0758   0B80 DD            push bl
0759   0B81 07 71 05      call putchar
0760   0B84 51 01 00      add sp, 1
0761   0B87 0A 51 0B      jmp _while16_cond
0762   0B8A             _while16_exit:
0763   0B8A F9            leave
0764   0B8B 09            ret
0765   0B8C             ; --- END TEXT BLOCK
0766   0B8C             
0767   0B8C             ; --- BEGIN DATA BLOCK
0768   0B8C 56 61 6C 75 __s0: .db "Value: %ld", 0
0768   0B90 65 3A 20 25 
0768   0B94 6C 64 00 
0769   0B97             
0770   0B97 99 0B       _heap_top: .dw _heap
0771   0B99 00          _heap: .db 0
0772   0B9A             ; --- END DATA BLOCK
0773   0B9A             
0774   0B9A             .end
tasm: Number of errors = 0
