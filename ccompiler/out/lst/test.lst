0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; 10 * 5 % 49 == 1; 
0011   0408 FD 2E 0A 00   mov32 cb, $0000000a
0011   040C 00 00 
0012   040E             ; --- START FACTORS
0013   040E D7            push a
0014   040F FD D8         push g
0015   0411 11            mov a, b
0016   0412 FD 7A         mov g, c
0017   0414 FD 2E 05 00   mov32 cb, $00000005
0017   0418 00 00 
0018   041A D7            push a     ; save left operand
0019   041B 8E            xor a, b   ; xor sign bits
0020   041C FD AA         swp a      ; swap bytes
0021   041E 83            mov cl, al ; save result of xor into 'dl'
0022   041F E4            pop a      ; restore left side operator
0023   0420 DF            push cl    ; save result of xor above
0024   0421 FD AA         swp a  
0025   0423 93 80         test al, $80  
0026   0425 FD AA         swp a  
0027   0427 C6 2C 04      jz skip_invert_a_3  
0028   042A FD 95         neg a 
0029   042C             skip_invert_a_3:   
0030   042C FD AB         swp b
0031   042E FD 93 80      test bl, $80  
0032   0431 FD AB         swp b
0033   0433 C6 38 04      jz skip_invert_b_3  
0034   0436 FD 97         neg b 
0035   0438             skip_invert_b_3:   
0036   0438 AC            mul a, b ; *
0037   0439 FD 78         mov g, a
0038   043B 11            mov a, b
0039   043C EA            pop bl
0040   043D FD 93 80      test bl, $80
0041   0440 C6 51 04      jz _same_signs_3
0042   0443 27            mov b, a
0043   0444 FD 12         mov a, g
0044   0446 95            not a
0045   0447 97            not b
0046   0448 55 01 00      add b, 1
0047   044B 5B 00 00      adc a, 0
0048   044E FD 78         mov g, a
0049   0450 11            mov a, b
0050   0451             _same_signs_3:
0051   0451 FD 2E 31 00   mov32 cb, $00000031
0051   0455 00 00 
0052   0457 AE            div a, b ; %, a: quotient, b: remainder
0053   0458 11            mov a, b
0054   0459 FD 38         mov c, g
0055   045B 27            mov b, a
0056   045C FD F1         pop g
0057   045E E4            pop a
0058   045F             ; --- END FACTORS
0059   045F             ; --- START RELATIONAL
0060   045F D7            push a
0061   0460 FD D8         push g
0062   0462 11            mov a, b
0063   0463 FD 7A         mov g, c
0064   0465 FD 2E 01 00   mov32 cb, $00000001
0064   0469 00 00 
0065   046B FD AF         cmp32 ga, cb
0066   046D FD 71         seq ; ==
0067   046F FD F1         pop g
0068   0471 E4            pop a
0069   0472             ; --- END RELATIONAL
0070   0472 05 0B         syscall sys_terminate_proc
0071   0474             ; --- END TEXT SEGMENT
0072   0474             
0073   0474             ; --- BEGIN DATA SEGMENT
0074   0474             
0075   0474 76 04       _heap_top: .dw _heap
0076   0476 00          _heap: .db 0
0077   0477             ; --- END DATA SEGMENT
0078   0477             
0079   0477             .end
tasm: Number of errors = 0
