0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; prin(110, 123); 
0011   0408 26 7B 00      mov b, $7b
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 26 6E 00      mov b, $6e
0015   0411 FD AB         swp b
0016   0413 D8            push b
0017   0414 07 20 04      call prin
0018   0417 51 04 00      add sp, 4
0019   041A             ;; return 0; 
0020   041A 26 00 00      mov b, $0
0021   041D F9            leave
0022   041E 05 0B         syscall sys_terminate_proc
0023   0420             
0024   0420             prin:
0025   0420 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0026   0423             ;; printu(a); 
0027   0423 FA 05 00      lea d, [bp + 5] ; $a
0028   0426 2A            mov b, [d]
0029   0427 FD AB         swp b
0030   0429 D8            push b
0031   042A 07 7E 04      call printu
0032   042D 51 02 00      add sp, 2
0033   0430             ;; printu(b); 
0034   0430 FA 07 00      lea d, [bp + 7] ; $b
0035   0433 2A            mov b, [d]
0036   0434 FD AB         swp b
0037   0436 D8            push b
0038   0437 07 7E 04      call printu
0039   043A 51 02 00      add sp, 2
0040   043D F9            leave
0041   043E 09            ret
0042   043F             
0043   043F             gcd:
0044   043F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0045   0442             ;; if (b == 0) { 
0046   0442             _if1_cond:
0047   0442 FA 07 00      lea d, [bp + 7] ; $b
0048   0445 2A            mov b, [d]
0049   0446             ; START RELATIONAL
0050   0446 D7            push a
0051   0447 11            mov a, b
0052   0448 26 00 00      mov b, $0
0053   044B B0            cmp a, b
0054   044C FD 71         seq ; ==
0055   044E E4            pop a
0056   044F             ; END RELATIONAL
0057   044F C0 00 00      cmp b, 0
0058   0452 C6 5E 04      je _if1_exit
0059   0455             _if1_true:
0060   0455             ;; return a; 
0061   0455 FA 05 00      lea d, [bp + 5] ; $a
0062   0458 2A            mov b, [d]
0063   0459 F9            leave
0064   045A 09            ret
0065   045B 0A 5E 04      jmp _if1_exit
0066   045E             _if1_exit:
0067   045E             ;; return gcd(b, a % b); 
0068   045E FA 05 00      lea d, [bp + 5] ; $a
0069   0461 2A            mov b, [d]
0070   0462             ; START FACTORS
0071   0462 D7            push a
0072   0463 11            mov a, b
0073   0464 FA 07 00      lea d, [bp + 7] ; $b
0074   0467 2A            mov b, [d]
0075   0468 AE            div a, b ; 
0076   0469 11            mov a, b
0077   046A 27            mov b, a
0078   046B E4            pop a
0079   046C             ; END FACTORS
0080   046C FD AB         swp b
0081   046E D8            push b
0082   046F FA 07 00      lea d, [bp + 7] ; $b
0083   0472 2A            mov b, [d]
0084   0473 FD AB         swp b
0085   0475 D8            push b
0086   0476 07 3F 04      call gcd
0087   0479 51 04 00      add sp, 4
0088   047C F9            leave
0089   047D 09            ret
0090   047E             
0091   047E             printu:
0092   047E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0093   0481             ; $digits 
0094   0481             ; $i 
0095   0481 52 07 00      sub sp, 7
0096   0484             ;; i = 0; 
0097   0484 FA FA FF      lea d, [bp + -6] ; $i
0098   0487 DA            push d
0099   0488 26 00 00      mov b, $0
0100   048B E7            pop d
0101   048C FD 43         mov [d], b
0102   048E             ;; if(num == 0){ 
0103   048E             _if2_cond:
0104   048E FA 05 00      lea d, [bp + 5] ; $num
0105   0491 2A            mov b, [d]
0106   0492             ; START RELATIONAL
0107   0492 D7            push a
0108   0493 11            mov a, b
0109   0494 26 00 00      mov b, $0
0110   0497 B0            cmp a, b
0111   0498 FD 71         seq ; ==
0112   049A E4            pop a
0113   049B             ; END RELATIONAL
0114   049B C0 00 00      cmp b, 0
0115   049E C6 B0 04      je _if2_exit
0116   04A1             _if2_true:
0117   04A1             ;; putchar('0'); 
0118   04A1 26 30 00      mov b, $30
0119   04A4 DD            push bl
0120   04A5 07 4A 05      call putchar
0121   04A8 51 01 00      add sp, 1
0122   04AB             ;; return; 
0123   04AB F9            leave
0124   04AC 09            ret
0125   04AD 0A B0 04      jmp _if2_exit
0126   04B0             _if2_exit:
0127   04B0             ;; while (num > 0) { 
0128   04B0             _while3_cond:
0129   04B0 FA 05 00      lea d, [bp + 5] ; $num
0130   04B3 2A            mov b, [d]
0131   04B4             ; START RELATIONAL
0132   04B4 D7            push a
0133   04B5 11            mov a, b
0134   04B6 26 00 00      mov b, $0
0135   04B9 B0            cmp a, b
0136   04BA FD 81         sgu ; > (unsigned)
0137   04BC E4            pop a
0138   04BD             ; END RELATIONAL
0139   04BD C0 00 00      cmp b, 0
0140   04C0 C6 0D 05      je _while3_exit
0141   04C3             _while3_block:
0142   04C3             ;; digits[i] = '0' + (num % 10); 
0143   04C3 FA FC FF      lea d, [bp + -4] ; $digits
0144   04C6 D7            push a
0145   04C7 DA            push d
0146   04C8 FA FA FF      lea d, [bp + -6] ; $i
0147   04CB 2A            mov b, [d]
0148   04CC E7            pop d
0149   04CD 5A            add d, b
0150   04CE E4            pop a
0151   04CF DA            push d
0152   04D0 26 30 00      mov b, $30
0153   04D3             ; START TERMS
0154   04D3 D7            push a
0155   04D4 11            mov a, b
0156   04D5 FA 05 00      lea d, [bp + 5] ; $num
0157   04D8 2A            mov b, [d]
0158   04D9             ; START FACTORS
0159   04D9 D7            push a
0160   04DA 11            mov a, b
0161   04DB 26 0A 00      mov b, $a
0162   04DE AE            div a, b ; 
0163   04DF 11            mov a, b
0164   04E0 27            mov b, a
0165   04E1 E4            pop a
0166   04E2             ; END FACTORS
0167   04E2 54            add a, b
0168   04E3 27            mov b, a
0169   04E4 E4            pop a
0170   04E5             ; END TERMS
0171   04E5 E7            pop d
0172   04E6 FD 3E         mov [d], bl
0173   04E8             ;; num = num / 10; 
0174   04E8 FA 05 00      lea d, [bp + 5] ; $num
0175   04EB DA            push d
0176   04EC FA 05 00      lea d, [bp + 5] ; $num
0177   04EF 2A            mov b, [d]
0178   04F0             ; START FACTORS
0179   04F0 D7            push a
0180   04F1 11            mov a, b
0181   04F2 26 0A 00      mov b, $a
0182   04F5 AE            div a, b
0183   04F6 27            mov b, a
0184   04F7 E4            pop a
0185   04F8             ; END FACTORS
0186   04F8 E7            pop d
0187   04F9 FD 43         mov [d], b
0188   04FB             ;; i++; 
0189   04FB FA FA FF      lea d, [bp + -6] ; $i
0190   04FE 2A            mov b, [d]
0191   04FF FD 79         mov g, b
0192   0501 FD 77         inc b
0193   0503 FA FA FF      lea d, [bp + -6] ; $i
0194   0506 FD 43         mov [d], b
0195   0508 FD 27         mov b, g
0196   050A 0A B0 04      jmp _while3_cond
0197   050D             _while3_exit:
0198   050D             ;; while (i > 0) { 
0199   050D             _while4_cond:
0200   050D FA FA FF      lea d, [bp + -6] ; $i
0201   0510 2A            mov b, [d]
0202   0511             ; START RELATIONAL
0203   0511 D7            push a
0204   0512 11            mov a, b
0205   0513 26 00 00      mov b, $0
0206   0516 B0            cmp a, b
0207   0517 FD 7F         sgt ; >
0208   0519 E4            pop a
0209   051A             ; END RELATIONAL
0210   051A C0 00 00      cmp b, 0
0211   051D C6 48 05      je _while4_exit
0212   0520             _while4_block:
0213   0520             ;; i--; 
0214   0520 FA FA FF      lea d, [bp + -6] ; $i
0215   0523 2A            mov b, [d]
0216   0524 FD 79         mov g, b
0217   0526 FD 7D         dec b
0218   0528 FA FA FF      lea d, [bp + -6] ; $i
0219   052B FD 43         mov [d], b
0220   052D FD 27         mov b, g
0221   052F             ;; putchar(digits[i]); 
0222   052F FA FC FF      lea d, [bp + -4] ; $digits
0223   0532 D7            push a
0224   0533 DA            push d
0225   0534 FA FA FF      lea d, [bp + -6] ; $i
0226   0537 2A            mov b, [d]
0227   0538 E7            pop d
0228   0539 5A            add d, b
0229   053A E4            pop a
0230   053B 32            mov bl, [d]
0231   053C A7 00         mov bh, 0
0232   053E DD            push bl
0233   053F 07 4A 05      call putchar
0234   0542 51 01 00      add sp, 1
0235   0545 0A 0D 05      jmp _while4_cond
0236   0548             _while4_exit:
0237   0548 F9            leave
0238   0549 09            ret
0239   054A             
0240   054A             putchar:
0241   054A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0242   054D             
0243   054D             ; --- BEGIN INLINE ASM BLOCK
0244   054D FA 05 00      lea d, [bp + 5] ; $c
0245   0550 1E            mov al, [d]
0246   0551 23            mov ah, al
0247   0552 07 42 06      call _putchar
0248   0555             ; --- END INLINE ASM BLOCK
0249   0555             
0250   0555 F9            leave
0251   0556 09            ret
0252   0557             
0253   0557             include_stdio_asm:
0254   0557 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0255   055A             
0256   055A             ; --- BEGIN INLINE ASM BLOCK
0257   055A             .include "lib/stdio.asm"
0001+  055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  055A             ; stdio.s
0003+  055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  055A             .include "lib/string.asm"
0001++ 055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 055A             ; string.s
0003++ 055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 055A             
0005++ 055A             
0006++ 055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 055A             ; _strrev
0008++ 055A             ; reverse a string
0009++ 055A             ; D = string address
0010++ 055A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 055A             ; 01234
0012++ 055A             _strrev:
0013++ 055A 4B          	pusha
0014++ 055B 07 A1 05    	call _strlen	; length in C
0015++ 055E 12          	mov a, c
0016++ 055F AF 01 00    	cmp a, 1
0017++ 0562 D0 7C 05    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0565 7D          	dec a
0019++ 0566 FD 4E       	mov si, d	; beginning of string
0020++ 0568 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 056A 59          	add d, a	; end of string
0022++ 056B 12          	mov a, c
0023++ 056C FD 9B       	shr a		; divide by 2
0024++ 056E 39          	mov c, a	; C now counts the steps
0025++ 056F             _strrev_L0:
0026++ 056F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0570 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0571 3E          	mov [d], al	; store left char into right side
0029++ 0572 1B          	mov al, bl
0030++ 0573 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0574 7E          	dec c
0032++ 0575 7F          	dec d
0033++ 0576 C2 00 00    	cmp c, 0
0034++ 0579 C7 6F 05    	jne _strrev_L0
0035++ 057C             _strrev_end:
0036++ 057C 4C          	popa
0037++ 057D 09          	ret
0038++ 057E             	
0039++ 057E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 057E             ; _strchr
0041++ 057E             ; search string in D for char in AL
0042++ 057E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 057E             _strchr:
0044++ 057E             _strchr_L0:
0045++ 057E 32          	mov bl, [d]
0046++ 057F C1 00       	cmp bl, 0
0047++ 0581 C6 8C 05    	je _strchr_end
0048++ 0584 BA          	cmp al, bl
0049++ 0585 C6 8C 05    	je _strchr_end
0050++ 0588 79          	inc d
0051++ 0589 0A 7E 05    	jmp _strchr_L0
0052++ 058C             _strchr_end:
0053++ 058C 1B          	mov al, bl
0054++ 058D 09          	ret
0055++ 058E             
0056++ 058E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 058E             ; _strstr
0058++ 058E             ; find sub-string
0059++ 058E             ; str1 in SI
0060++ 058E             ; str2 in DI
0061++ 058E             ; SI points to end of source string
0062++ 058E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 058E             _strstr:
0064++ 058E DB          	push al
0065++ 058F DA          	push d
0066++ 0590 E3          	push di
0067++ 0591             _strstr_loop:
0068++ 0591 F3          	cmpsb					; compare a byte of the strings
0069++ 0592 C7 9D 05    	jne _strstr_ret
0070++ 0595 FC 00 00    	lea d, [di + 0]
0071++ 0598 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 059A C7 91 05    	jne _strstr_loop				; equal chars but not at end
0073++ 059D             _strstr_ret:
0074++ 059D F0          	pop di
0075++ 059E E7          	pop d
0076++ 059F E8          	pop al
0077++ 05A0 09          	ret
0078++ 05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 05A1             ; length of null terminated string
0080++ 05A1             ; result in C
0081++ 05A1             ; pointer in D
0082++ 05A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 05A1             _strlen:
0084++ 05A1 DA          	push d
0085++ 05A2 38 00 00    	mov c, 0
0086++ 05A5             _strlen_L1:
0087++ 05A5 BD 00       	cmp byte [d], 0
0088++ 05A7 C6 AF 05    	je _strlen_ret
0089++ 05AA 79          	inc d
0090++ 05AB 78          	inc c
0091++ 05AC 0A A5 05    	jmp _strlen_L1
0092++ 05AF             _strlen_ret:
0093++ 05AF E7          	pop d
0094++ 05B0 09          	ret
0095++ 05B1             
0096++ 05B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 05B1             ; STRCMP
0098++ 05B1             ; compare two strings
0099++ 05B1             ; str1 in SI
0100++ 05B1             ; str2 in DI
0101++ 05B1             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 05B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 05B1             _strcmp:
0104++ 05B1 DB          	push al
0105++ 05B2 DA          	push d
0106++ 05B3 E3          	push di
0107++ 05B4 E2          	push si
0108++ 05B5             _strcmp_loop:
0109++ 05B5 F3          	cmpsb					; compare a byte of the strings
0110++ 05B6 C7 C1 05    	jne _strcmp_ret
0111++ 05B9 FB FF FF    	lea d, [si +- 1]
0112++ 05BC BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 05BE C7 B5 05    	jne _strcmp_loop				; equal chars but not at end
0114++ 05C1             _strcmp_ret:
0115++ 05C1 EF          	pop si
0116++ 05C2 F0          	pop di
0117++ 05C3 E7          	pop d
0118++ 05C4 E8          	pop al
0119++ 05C5 09          	ret
0120++ 05C6             
0121++ 05C6             
0122++ 05C6             ; STRCPY
0123++ 05C6             ; copy null terminated string from SI to DI
0124++ 05C6             ; source in SI
0125++ 05C6             ; destination in DI
0126++ 05C6             _strcpy:
0127++ 05C6 E2          	push si
0128++ 05C7 E3          	push di
0129++ 05C8 DB          	push al
0130++ 05C9             _strcpy_L1:
0131++ 05C9 F6          	lodsb
0132++ 05CA F7          	stosb
0133++ 05CB B9 00       	cmp al, 0
0134++ 05CD C7 C9 05    	jne _strcpy_L1
0135++ 05D0             _strcpy_end:
0136++ 05D0 E8          	pop al
0137++ 05D1 F0          	pop di
0138++ 05D2 EF          	pop si
0139++ 05D3 09          	ret
0140++ 05D4             
0141++ 05D4             ; STRCAT
0142++ 05D4             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 05D4             ; source in SI
0144++ 05D4             ; destination in DI
0145++ 05D4             _strcat:
0146++ 05D4 E2          	push si
0147++ 05D5 E3          	push di
0148++ 05D6 D7          	push a
0149++ 05D7 DA          	push d
0150++ 05D8 50          	mov a, di
0151++ 05D9 3C          	mov d, a
0152++ 05DA             _strcat_goto_end_L1:
0153++ 05DA BD 00       	cmp byte[d], 0
0154++ 05DC C6 E3 05    	je _strcat_start
0155++ 05DF 79          	inc d
0156++ 05E0 0A DA 05    	jmp _strcat_goto_end_L1
0157++ 05E3             _strcat_start:
0158++ 05E3 FD 50       	mov di, d
0159++ 05E5             _strcat_L1:
0160++ 05E5 F6          	lodsb
0161++ 05E6 F7          	stosb
0162++ 05E7 B9 00       	cmp al, 0
0163++ 05E9 C7 E5 05    	jne _strcat_L1
0164++ 05EC             _strcat_end:
0165++ 05EC E7          	pop d
0166++ 05ED E4          	pop a
0167++ 05EE F0          	pop di
0168++ 05EF EF          	pop si
0169++ 05F0 09          	ret
0170++ 05F1             
0171++ 05F1             
0005+  05F1             
0006+  05F1             
0007+  05F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  05F1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  05F1             ; ASCII in BL
0010+  05F1             ; result in AL
0011+  05F1             ; ascii for F = 0100 0110
0012+  05F1             ; ascii for 9 = 0011 1001
0013+  05F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  05F1             hex_ascii_encode:
0015+  05F1 1B            mov al, bl
0016+  05F2 93 40         test al, $40        ; test if letter or number
0017+  05F4 C7 FA 05      jnz hex_letter
0018+  05F7 87 0F         and al, $0F        ; get number
0019+  05F9 09            ret
0020+  05FA             hex_letter:
0021+  05FA 87 0F         and al, $0F        ; get letter
0022+  05FC 6A 09         add al, 9
0023+  05FE 09            ret
0024+  05FF             
0025+  05FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  05FF             ; ATOI
0027+  05FF             ; 2 letter hex string in B
0028+  05FF             ; 8bit integer returned in AL
0029+  05FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  05FF             _atoi:
0031+  05FF D8            push b
0032+  0600 07 F1 05      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  0603 30            mov bl, bh
0034+  0604 DB            push al          ; save a
0035+  0605 07 F1 05      call hex_ascii_encode
0036+  0608 EA            pop bl  
0037+  0609 FD 9E 04      shl al, 4
0038+  060C 8C            or al, bl
0039+  060D E5            pop b
0040+  060E 09            ret  
0041+  060F             
0042+  060F             
0043+  060F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  060F             ; scanf
0045+  060F             ; no need for explanations!
0046+  060F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  060F             scanf:
0048+  060F 09            ret
0049+  0610             
0050+  0610             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0610             ; ITOA
0052+  0610             ; 8bit value in BL
0053+  0610             ; 2 byte ASCII result in A
0054+  0610             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0610             _itoa:
0056+  0610 DA            push d
0057+  0611 D8            push b
0058+  0612 A7 00         mov bh, 0
0059+  0614 FD A4 04      shr bl, 4  
0060+  0617 74            mov d, b
0061+  0618 1F C0 08      mov al, [d + s_hex_digits]
0062+  061B 23            mov ah, al
0063+  061C               
0064+  061C E5            pop b
0065+  061D D8            push b
0066+  061E A7 00         mov bh, 0
0067+  0620 FD 87 0F      and bl, $0F
0068+  0623 74            mov d, b
0069+  0624 1F C0 08      mov al, [d + s_hex_digits]
0070+  0627 E5            pop b
0071+  0628 E7            pop d
0072+  0629 09            ret
0073+  062A             
0074+  062A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  062A             ; HEX STRING TO BINARY
0076+  062A             ; di = destination address
0077+  062A             ; si = source
0078+  062A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  062A             _hex_to_int:
0080+  062A             _hex_to_int_L1:
0081+  062A F6            lodsb          ; load from [SI] to AL
0082+  062B B9 00         cmp al, 0        ; check if ASCII 0
0083+  062D C6 3A 06      jz _hex_to_int_ret
0084+  0630 36            mov bh, al
0085+  0631 F6            lodsb
0086+  0632 2F            mov bl, al
0087+  0633 07 FF 05      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  0636 F7            stosb          ; store AL to [DI]
0089+  0637 0A 2A 06      jmp _hex_to_int_L1
0090+  063A             _hex_to_int_ret:
0091+  063A 09            ret    
0092+  063B             
0093+  063B             
0094+  063B             
0095+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  063B             ; GETCHAR
0097+  063B             ; char in ah
0098+  063B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  063B             getch:
0100+  063B DB            push al
0101+  063C             getch_retry:
0102+  063C 19 01         mov al, 1
0103+  063E 05 03         syscall sys_io      ; receive in AH
0104+  0640 E8            pop al
0105+  0641 09            ret
0106+  0642             
0107+  0642             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0642             ; PUTCHAR
0109+  0642             ; char in ah
0110+  0642             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0642             _putchar:
0112+  0642 D7            push a
0113+  0643 19 00         mov al, 0
0114+  0645 05 03         syscall sys_io      ; char in AH
0115+  0647 E4            pop a
0116+  0648 09            ret
0117+  0649             
0118+  0649             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0649             ;; INPUT A STRING
0120+  0649             ;; terminates with null
0121+  0649             ;; pointer in D
0122+  0649             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0649             _gets:
0124+  0649 D7            push a
0125+  064A DA            push d
0126+  064B             _gets_loop:
0127+  064B 19 01         mov al, 1
0128+  064D 05 03         syscall sys_io      ; receive in AH
0129+  064F B9 00         cmp al, 0        ; check error code (AL)
0130+  0651 C6 4B 06      je _gets_loop      ; if no char received, retry
0131+  0654             
0132+  0654 76 1B         cmp ah, 27
0133+  0656 C6 77 06      je _gets_ansi_esc
0134+  0659 76 0A         cmp ah, $0A        ; LF
0135+  065B C6 E2 06      je _gets_end
0136+  065E 76 0D         cmp ah, $0D        ; CR
0137+  0660 C6 E2 06      je _gets_end
0138+  0663 76 5C         cmp ah, $5C        ; '\\'
0139+  0665 C6 A3 06      je _gets_escape
0140+  0668               
0141+  0668 76 08         cmp ah, $08      ; check for backspace
0142+  066A C6 73 06      je _gets_backspace
0143+  066D             
0144+  066D 1A            mov al, ah
0145+  066E 3E            mov [d], al
0146+  066F 79            inc d
0147+  0670 0A 4B 06      jmp _gets_loop
0148+  0673             _gets_backspace:
0149+  0673 7F            dec d
0150+  0674 0A 4B 06      jmp _gets_loop
0151+  0677             _gets_ansi_esc:
0152+  0677 19 01         mov al, 1
0153+  0679 05 03         syscall sys_io        ; receive in AH without echo
0154+  067B B9 00         cmp al, 0          ; check error code (AL)
0155+  067D C6 77 06      je _gets_ansi_esc    ; if no char received, retry
0156+  0680 76 5B         cmp ah, '['
0157+  0682 C7 4B 06      jne _gets_loop
0158+  0685             _gets_ansi_esc_2:
0159+  0685 19 01         mov al, 1
0160+  0687 05 03         syscall sys_io          ; receive in AH without echo
0161+  0689 B9 00         cmp al, 0            ; check error code (AL)
0162+  068B C6 85 06      je _gets_ansi_esc_2  ; if no char received, retry
0163+  068E 76 44         cmp ah, 'D'
0164+  0690 C6 9B 06      je _gets_left_arrow
0165+  0693 76 43         cmp ah, 'C'
0166+  0695 C6 9F 06      je _gets_right_arrow
0167+  0698 0A 4B 06      jmp _gets_loop
0168+  069B             _gets_left_arrow:
0169+  069B 7F            dec d
0170+  069C 0A 4B 06      jmp _gets_loop
0171+  069F             _gets_right_arrow:
0172+  069F 79            inc d
0173+  06A0 0A 4B 06      jmp _gets_loop
0174+  06A3             _gets_escape:
0175+  06A3 19 01         mov al, 1
0176+  06A5 05 03         syscall sys_io      ; receive in AH
0177+  06A7 B9 00         cmp al, 0        ; check error code (AL)
0178+  06A9 C6 A3 06      je _gets_escape      ; if no char received, retry
0179+  06AC 76 6E         cmp ah, 'n'
0180+  06AE C6 CD 06      je _gets_LF
0181+  06B1 76 72         cmp ah, 'r'
0182+  06B3 C6 D4 06      je _gets_CR
0183+  06B6 76 30         cmp ah, '0'
0184+  06B8 C6 DB 06      je _gets_NULL
0185+  06BB 76 5C         cmp ah, $5C  ; '\'
0186+  06BD C6 C6 06      je _gets_slash
0187+  06C0 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  06C1 3E            mov [d], al
0189+  06C2 79            inc d
0190+  06C3 0A 4B 06      jmp _gets_loop
0191+  06C6             _gets_slash:
0192+  06C6 19 5C         mov al, $5C
0193+  06C8 3E            mov [d], al
0194+  06C9 79            inc d
0195+  06CA 0A 4B 06      jmp _gets_loop
0196+  06CD             _gets_LF:
0197+  06CD 19 0A         mov al, $0A
0198+  06CF 3E            mov [d], al
0199+  06D0 79            inc d
0200+  06D1 0A 4B 06      jmp _gets_loop
0201+  06D4             _gets_CR:
0202+  06D4 19 0D         mov al, $0D
0203+  06D6 3E            mov [d], al
0204+  06D7 79            inc d
0205+  06D8 0A 4B 06      jmp _gets_loop
0206+  06DB             _gets_NULL:
0207+  06DB 19 00         mov al, $00
0208+  06DD 3E            mov [d], al
0209+  06DE 79            inc d
0210+  06DF 0A 4B 06      jmp _gets_loop
0211+  06E2             _gets_end:
0212+  06E2 19 00         mov al, 0
0213+  06E4 3E            mov [d], al        ; terminate string
0214+  06E5 E7            pop d
0215+  06E6 E4            pop a
0216+  06E7 09            ret
0217+  06E8             
0218+  06E8             
0219+  06E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  06E8             ;; INPUT TEXT
0221+  06E8             ;; terminated with CTRL+D
0222+  06E8             ;; pointer in D
0223+  06E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  06E8             _gettxt:
0225+  06E8 D7            push a
0226+  06E9 DA            push d
0227+  06EA             _gettxt_loop:
0228+  06EA 19 01         mov al, 1
0229+  06EC 05 03         syscall sys_io      ; receive in AH
0230+  06EE B9 00         cmp al, 0        ; check error code (AL)
0231+  06F0 C6 EA 06      je _gettxt_loop    ; if no char received, retry
0232+  06F3 76 04         cmp ah, 4      ; EOT
0233+  06F5 C6 33 07      je _gettxt_end
0234+  06F8 76 08         cmp ah, $08      ; check for backspace
0235+  06FA C6 2F 07      je _gettxt_backspace
0236+  06FD 76 5C         cmp ah, $5C        ; '\'
0237+  06FF C6 08 07      je _gettxt_escape
0238+  0702 1A            mov al, ah
0239+  0703 3E            mov [d], al
0240+  0704 79            inc d
0241+  0705 0A EA 06      jmp _gettxt_loop
0242+  0708             _gettxt_escape:
0243+  0708 19 01         mov al, 1
0244+  070A 05 03         syscall sys_io      ; receive in AH
0245+  070C B9 00         cmp al, 0        ; check error code (AL)
0246+  070E C6 08 07      je _gettxt_escape    ; if no char received, retry
0247+  0711 76 6E         cmp ah, 'n'
0248+  0713 C6 21 07      je _gettxt_LF
0249+  0716 76 72         cmp ah, 'r'
0250+  0718 C6 28 07      je _gettxt_CR
0251+  071B 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  071C 3E            mov [d], al
0253+  071D 79            inc d
0254+  071E 0A EA 06      jmp _gettxt_loop
0255+  0721             _gettxt_LF:
0256+  0721 19 0A         mov al, $0A
0257+  0723 3E            mov [d], al
0258+  0724 79            inc d
0259+  0725 0A EA 06      jmp _gettxt_loop
0260+  0728             _gettxt_CR:
0261+  0728 19 0D         mov al, $0D
0262+  072A 3E            mov [d], al
0263+  072B 79            inc d
0264+  072C 0A EA 06      jmp _gettxt_loop
0265+  072F             _gettxt_backspace:
0266+  072F 7F            dec d
0267+  0730 0A EA 06      jmp _gettxt_loop
0268+  0733             _gettxt_end:
0269+  0733 19 00         mov al, 0
0270+  0735 3E            mov [d], al        ; terminate string
0271+  0736 E7            pop d
0272+  0737 E4            pop a
0273+  0738 09            ret
0274+  0739             
0275+  0739             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  0739             ; PRINT NEW LINE
0277+  0739             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  0739             printnl:
0279+  0739 D7            push a
0280+  073A 10 00 0A      mov a, $0A00
0281+  073D 05 03         syscall sys_io
0282+  073F 10 00 0D      mov a, $0D00
0283+  0742 05 03         syscall sys_io
0284+  0744 E4            pop a
0285+  0745 09            ret
0286+  0746             
0287+  0746             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0746             ; _strtoint
0289+  0746             ; 4 digit hex string number in d
0290+  0746             ; integer returned in A
0291+  0746             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  0746             _strtointx:
0293+  0746 D8            push b
0294+  0747 32            mov bl, [d]
0295+  0748 37            mov bh, bl
0296+  0749 33 01 00      mov bl, [d + 1]
0297+  074C 07 FF 05      call _atoi        ; convert to int in AL
0298+  074F 23            mov ah, al        ; move to AH
0299+  0750 33 02 00      mov bl, [d + 2]
0300+  0753 37            mov bh, bl
0301+  0754 33 03 00      mov bl, [d + 3]
0302+  0757 07 FF 05      call _atoi        ; convert to int in AL
0303+  075A E5            pop b
0304+  075B 09            ret
0305+  075C             
0306+  075C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  075C             ; _strtoint
0308+  075C             ; 5 digit base10 string number in d
0309+  075C             ; integer returned in A
0310+  075C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  075C             _strtoint:
0312+  075C E2            push si
0313+  075D D8            push b
0314+  075E D9            push c
0315+  075F DA            push d
0316+  0760 07 A1 05      call _strlen      ; get string length in C
0317+  0763 7E            dec c
0318+  0764 FD 4E         mov si, d
0319+  0766 12            mov a, c
0320+  0767 FD 99         shl a
0321+  0769 3B D8 08      mov d, table_power
0322+  076C 59            add d, a
0323+  076D 38 00 00      mov c, 0
0324+  0770             _strtoint_L0:
0325+  0770 F6            lodsb      ; load ASCII to al
0326+  0771 B9 00         cmp al, 0
0327+  0773 C6 86 07      je _strtoint_end
0328+  0776 6F 30         sub al, $30    ; make into integer
0329+  0778 22 00         mov ah, 0
0330+  077A 2A            mov b, [d]
0331+  077B AC            mul a, b      ; result in B since it fits in 16bits
0332+  077C 11            mov a, b
0333+  077D 28            mov b, c
0334+  077E 54            add a, b
0335+  077F 39            mov c, a
0336+  0780 63 02 00      sub d, 2
0337+  0783 0A 70 07      jmp _strtoint_L0
0338+  0786             _strtoint_end:
0339+  0786 12            mov a, c
0340+  0787 E7            pop d
0341+  0788 E6            pop c
0342+  0789 E5            pop b
0343+  078A EF            pop si
0344+  078B 09            ret
0345+  078C             
0346+  078C             
0347+  078C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  078C             ; PRINT NULL TERMINATED STRING
0349+  078C             ; pointer in D
0350+  078C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  078C             _puts:
0352+  078C D7            push a
0353+  078D DA            push d
0354+  078E             _puts_L1:
0355+  078E 1E            mov al, [d]
0356+  078F B9 00         cmp al, 0
0357+  0791 C6 9D 07      jz _puts_END
0358+  0794 23            mov ah, al
0359+  0795 19 00         mov al, 0
0360+  0797 05 03         syscall sys_io
0361+  0799 79            inc d
0362+  079A 0A 8E 07      jmp _puts_L1
0363+  079D             _puts_END:
0364+  079D E7            pop d
0365+  079E E4            pop a
0366+  079F 09            ret
0367+  07A0             
0368+  07A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  07A0             ; PRINT N SIZE STRING
0370+  07A0             ; pointer in D
0371+  07A0             ; size in C
0372+  07A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  07A0             _putsn:
0374+  07A0 DB            push al
0375+  07A1 DA            push d
0376+  07A2 D9            push c
0377+  07A3             _putsn_L0:
0378+  07A3 1E            mov al, [d]
0379+  07A4 23            mov ah, al
0380+  07A5 19 00         mov al, 0
0381+  07A7 05 03         syscall sys_io
0382+  07A9 79            inc d
0383+  07AA 7E            dec c  
0384+  07AB C2 00 00      cmp c, 0
0385+  07AE C7 A3 07      jne _putsn_L0
0386+  07B1             _putsn_end:
0387+  07B1 E6            pop c
0388+  07B2 E7            pop d
0389+  07B3 E8            pop al
0390+  07B4 09            ret
0391+  07B5             
0392+  07B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  07B5             ; print 16bit decimal number
0394+  07B5             ; input number in A
0395+  07B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  07B5             print_u16d:
0397+  07B5 D7            push a
0398+  07B6 D8            push b
0399+  07B7 26 10 27      mov b, 10000
0400+  07BA AE            div a, b      ; get 10000's coeff.
0401+  07BB 07 DD 07      call print_number
0402+  07BE 11            mov a, b
0403+  07BF 26 E8 03      mov b, 1000
0404+  07C2 AE            div a, b      ; get 1000's coeff.
0405+  07C3 07 DD 07      call print_number
0406+  07C6 11            mov a, b
0407+  07C7 26 64 00      mov b, 100
0408+  07CA AE            div a, b
0409+  07CB 07 DD 07      call print_number
0410+  07CE 11            mov a, b
0411+  07CF 26 0A 00      mov b, 10
0412+  07D2 AE            div a, b
0413+  07D3 07 DD 07      call print_number
0414+  07D6 1B            mov al, bl      ; 1's coeff in bl
0415+  07D7 07 DD 07      call print_number
0416+  07DA E5            pop b
0417+  07DB E4            pop a
0418+  07DC 09            ret
0419+  07DD             
0420+  07DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  07DD             ; print AL
0422+  07DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  07DD             print_number:
0424+  07DD 6A 30         add al, $30
0425+  07DF 23            mov ah, al
0426+  07E0 07 42 06      call _putchar
0427+  07E3 09            ret
0428+  07E4             
0429+  07E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  07E4             ; PRINT 16BIT HEX INTEGER
0431+  07E4             ; integer value in reg B
0432+  07E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  07E4             print_u16x:
0434+  07E4 D7            push a
0435+  07E5 D8            push b
0436+  07E6 DD            push bl
0437+  07E7 30            mov bl, bh
0438+  07E8 07 10 06      call _itoa        ; convert bh to char in A
0439+  07EB 2F            mov bl, al        ; save al
0440+  07EC 19 00         mov al, 0
0441+  07EE 05 03         syscall sys_io        ; display AH
0442+  07F0 24            mov ah, bl        ; retrieve al
0443+  07F1 19 00         mov al, 0
0444+  07F3 05 03         syscall sys_io        ; display AL
0445+  07F5             
0446+  07F5 EA            pop bl
0447+  07F6 07 10 06      call _itoa        ; convert bh to char in A
0448+  07F9 2F            mov bl, al        ; save al
0449+  07FA 19 00         mov al, 0
0450+  07FC 05 03         syscall sys_io        ; display AH
0451+  07FE 24            mov ah, bl        ; retrieve al
0452+  07FF 19 00         mov al, 0
0453+  0801 05 03         syscall sys_io        ; display AL
0454+  0803             
0455+  0803 E5            pop b
0456+  0804 E4            pop a
0457+  0805 09            ret
0458+  0806             
0459+  0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  0806             ; INPUT 16BIT HEX INTEGER
0461+  0806             ; read 16bit integer into A
0462+  0806             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  0806             scan_u16x:
0464+  0806 F8 10 00      enter 16
0465+  0809 D8            push b
0466+  080A DA            push d
0467+  080B             
0468+  080B FA F1 FF      lea d, [bp + -15]
0469+  080E 07 49 06      call _gets        ; get number
0470+  0811             
0471+  0811 32            mov bl, [d]
0472+  0812 37            mov bh, bl
0473+  0813 33 01 00      mov bl, [d + 1]
0474+  0816 07 FF 05      call _atoi        ; convert to int in AL
0475+  0819 23            mov ah, al        ; move to AH
0476+  081A             
0477+  081A 33 02 00      mov bl, [d + 2]
0478+  081D 37            mov bh, bl
0479+  081E 33 03 00      mov bl, [d + 3]
0480+  0821 07 FF 05      call _atoi        ; convert to int in AL
0481+  0824             
0482+  0824 E7            pop d
0483+  0825 E5            pop b
0484+  0826 F9            leave
0485+  0827 09            ret
0486+  0828             
0487+  0828             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  0828             ; PRINT 8bit HEX INTEGER
0489+  0828             ; integer value in reg bl
0490+  0828             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  0828             print_u8x:
0492+  0828 D7            push a
0493+  0829 DD            push bl
0494+  082A             
0495+  082A 07 10 06      call _itoa        ; convert bl to char in A
0496+  082D 2F            mov bl, al        ; save al
0497+  082E 19 00         mov al, 0
0498+  0830 05 03         syscall sys_io        ; display AH
0499+  0832 24            mov ah, bl        ; retrieve al
0500+  0833 19 00         mov al, 0
0501+  0835 05 03         syscall sys_io        ; display AL
0502+  0837             
0503+  0837 EA            pop bl
0504+  0838 E4            pop a
0505+  0839 09            ret
0506+  083A             
0507+  083A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  083A             ; print 8bit decimal unsigned number
0509+  083A             ; input number in AL
0510+  083A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  083A             print_u8d:
0512+  083A D7            push a
0513+  083B D8            push b
0514+  083C             
0515+  083C 22 00         mov ah, 0
0516+  083E 26 64 00      mov b, 100
0517+  0841 AE            div a, b
0518+  0842 D8            push b      ; save remainder
0519+  0843 B9 00         cmp al, 0
0520+  0845 C6 4F 08      je skip100
0521+  0848 6A 30         add al, $30
0522+  084A 23            mov ah, al
0523+  084B 19 00         mov al, 0
0524+  084D 05 03         syscall sys_io  ; print coeff
0525+  084F             skip100:
0526+  084F E4            pop a
0527+  0850 22 00         mov ah, 0
0528+  0852 26 0A 00      mov b, 10
0529+  0855 AE            div a, b
0530+  0856 D8            push b      ; save remainder
0531+  0857 B9 00         cmp al, 0
0532+  0859 C6 63 08      je skip10
0533+  085C 6A 30         add al, $30
0534+  085E 23            mov ah, al
0535+  085F 19 00         mov al, 0
0536+  0861 05 03         syscall sys_io  ; print coeff
0537+  0863             skip10:
0538+  0863 E4            pop a
0539+  0864 1B            mov al, bl
0540+  0865 6A 30         add al, $30
0541+  0867 23            mov ah, al
0542+  0868 19 00         mov al, 0
0543+  086A 05 03         syscall sys_io  ; print coeff
0544+  086C E5            pop b
0545+  086D E4            pop a
0546+  086E 09            ret
0547+  086F             
0548+  086F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  086F             ; INPUT 8BIT HEX INTEGER
0550+  086F             ; read 8bit integer into AL
0551+  086F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  086F             scan_u8x:
0553+  086F F8 04 00      enter 4
0554+  0872 D8            push b
0555+  0873 DA            push d
0556+  0874             
0557+  0874 FA FD FF      lea d, [bp + -3]
0558+  0877 07 49 06      call _gets        ; get number
0559+  087A             
0560+  087A 32            mov bl, [d]
0561+  087B 37            mov bh, bl
0562+  087C 33 01 00      mov bl, [d + 1]
0563+  087F 07 FF 05      call _atoi        ; convert to int in AL
0564+  0882             
0565+  0882 E7            pop d
0566+  0883 E5            pop b
0567+  0884 F9            leave
0568+  0885 09            ret
0569+  0886             
0570+  0886             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  0886             ; input decimal number
0572+  0886             ; result in A
0573+  0886             ; 655'\0'
0574+  0886             ; low--------high
0575+  0886             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  0886             scan_u16d:
0577+  0886 F8 08 00      enter 8
0578+  0889 E2            push si
0579+  088A D8            push b
0580+  088B D9            push c
0581+  088C DA            push d
0582+  088D FA F9 FF      lea d, [bp +- 7]
0583+  0890 07 49 06      call _gets
0584+  0893 07 A1 05      call _strlen      ; get string length in C
0585+  0896 7E            dec c
0586+  0897 FD 4E         mov si, d
0587+  0899 12            mov a, c
0588+  089A FD 99         shl a
0589+  089C 3B D8 08      mov d, table_power
0590+  089F 59            add d, a
0591+  08A0 38 00 00      mov c, 0
0592+  08A3             mul_loop:
0593+  08A3 F6            lodsb      ; load ASCII to al
0594+  08A4 B9 00         cmp al, 0
0595+  08A6 C6 B9 08      je mul_exit
0596+  08A9 6F 30         sub al, $30    ; make into integer
0597+  08AB 22 00         mov ah, 0
0598+  08AD 2A            mov b, [d]
0599+  08AE AC            mul a, b      ; result in B since it fits in 16bits
0600+  08AF 11            mov a, b
0601+  08B0 28            mov b, c
0602+  08B1 54            add a, b
0603+  08B2 39            mov c, a
0604+  08B3 63 02 00      sub d, 2
0605+  08B6 0A A3 08      jmp mul_loop
0606+  08B9             mul_exit:
0607+  08B9 12            mov a, c
0608+  08BA E7            pop d
0609+  08BB E6            pop c
0610+  08BC E5            pop b
0611+  08BD EF            pop si
0612+  08BE F9            leave
0613+  08BF 09            ret
0614+  08C0             
0615+  08C0             
0616+  08C0 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  08C4 34 35 36 37 
0616+  08C8 38 39 41 42 
0616+  08CC 43 44 45 46 
0617+  08D0 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  08D4 1B 5B 48 00 
0618+  08D8             
0619+  08D8             table_power:
0620+  08D8 01 00         .dw 1
0621+  08DA 0A 00         .dw 10
0622+  08DC 64 00         .dw 100
0623+  08DE E8 03         .dw 1000
0624+  08E0 10 27         .dw 100000258   08E2             ; --- END INLINE ASM BLOCK
0259   08E2             
0260   08E2 F9            leave
0261   08E3 09            ret
0262   08E4             ; --- END TEXT BLOCK
0263   08E4             
0264   08E4             ; --- BEGIN DATA BLOCK
0265   08E4             
0266   08E4 E6 08       _heap_top: .dw _heap
0267   08E6 00          _heap: .db 0
0268   08E7             ; --- END DATA BLOCK
0269   08E7             
0270   08E7             .end
tasm: Number of errors = 0
