0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; base64_decode(s, output); 
0011   0408 3B 14 1E      mov d, _output_data ; $output
0012   040B 2D            mov b, d
0013   040C FD AB         swp b
0014   040E D8            push b
0015   040F 3B 12 1E      mov d, _s ; $s
0016   0412 2A            mov b, [d]
0017   0413 FD AB         swp b
0018   0415 D8            push b
0019   0416 07 C3 19      call base64_decode
0020   0419 51 04 00      add sp, 4
0021   041C 05 0B         syscall sys_terminate_proc
0022   041E             
0023   041E             strcpy:
0024   041E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0025   0421             ;; char *psrc; 
0026   0421             ; $psrc 
0027   0421             ;; char *pdest; 
0028   0421             ; $pdest 
0029   0421             ;; psrc = src; 
0030   0421 FA FF FF      lea d, [bp + -1] ; $psrc
0031   0424 DA            push d
0032   0425 FA 07 00      lea d, [bp + 7] ; $src
0033   0428 2A            mov b, [d]
0034   0429 E7            pop d
0035   042A FD 43         mov [d], b
0036   042C             ;; pdest = dest; 
0037   042C FA FD FF      lea d, [bp + -3] ; $pdest
0038   042F DA            push d
0039   0430 FA 05 00      lea d, [bp + 5] ; $dest
0040   0433 2A            mov b, [d]
0041   0434 E7            pop d
0042   0435 FD 43         mov [d], b
0043   0437             ;; while(*psrc) *pdest++ = *psrc++; 
0044   0437             _while1_cond:
0045   0437 FA FF FF      lea d, [bp + -1] ; $psrc
0046   043A 2A            mov b, [d]
0047   043B 74            mov d, b
0048   043C 32            mov bl, [d]
0049   043D A7 00         mov bh, 0
0050   043F C0 00 00      cmp b, 0
0051   0442 C6 6A 04      je _while1_exit
0052   0445             _while1_block:
0053   0445             ;; *pdest++ = *psrc++; 
0054   0445 FA FD FF      lea d, [bp + -3] ; $pdest
0055   0448 2A            mov b, [d]
0056   0449 FD 77         inc b
0057   044B FA FD FF      lea d, [bp + -3] ; $pdest
0058   044E FD 43         mov [d], b
0059   0450 FD 7D         dec b
0060   0452 D8            push b
0061   0453 FA FF FF      lea d, [bp + -1] ; $psrc
0062   0456 2A            mov b, [d]
0063   0457 FD 77         inc b
0064   0459 FA FF FF      lea d, [bp + -1] ; $psrc
0065   045C FD 43         mov [d], b
0066   045E FD 7D         dec b
0067   0460 74            mov d, b
0068   0461 32            mov bl, [d]
0069   0462 A7 00         mov bh, 0
0070   0464 E7            pop d
0071   0465 FD 3E         mov [d], bl
0072   0467 0A 37 04      jmp _while1_cond
0073   046A             _while1_exit:
0074   046A             ;; *pdest = '\0'; 
0075   046A FA FD FF      lea d, [bp + -3] ; $pdest
0076   046D 2A            mov b, [d]
0077   046E D8            push b
0078   046F 26 00 00      mov b, $0
0079   0472 E7            pop d
0080   0473 FD 3E         mov [d], bl
0081   0475 F9            leave
0082   0476 09            ret
0083   0477             
0084   0477             strcmp:
0085   0477 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0086   047A             ;; while (*s1 && (*s1 == *s2)) { 
0087   047A             _while2_cond:
0088   047A FA 05 00      lea d, [bp + 5] ; $s1
0089   047D 2A            mov b, [d]
0090   047E 74            mov d, b
0091   047F 32            mov bl, [d]
0092   0480 A7 00         mov bh, 0
0093   0482             ; START LOGICAL AND
0094   0482 D7            push a
0095   0483 11            mov a, b
0096   0484 FA 05 00      lea d, [bp + 5] ; $s1
0097   0487 2A            mov b, [d]
0098   0488 74            mov d, b
0099   0489 32            mov bl, [d]
0100   048A A7 00         mov bh, 0
0101   048C             ; START RELATIONAL
0102   048C D7            push a
0103   048D 11            mov a, b
0104   048E FA 07 00      lea d, [bp + 7] ; $s2
0105   0491 2A            mov b, [d]
0106   0492 74            mov d, b
0107   0493 32            mov bl, [d]
0108   0494 A7 00         mov bh, 0
0109   0496 B0            cmp a, b
0110   0497 FD 71         seq ; ==
0111   0499 E4            pop a
0112   049A             ; END RELATIONAL
0113   049A FD A7         sand a, b
0114   049C E4            pop a
0115   049D             ; END LOGICAL AND
0116   049D C0 00 00      cmp b, 0
0117   04A0 C6 C0 04      je _while2_exit
0118   04A3             _while2_block:
0119   04A3             ;; s1++; 
0120   04A3 FA 05 00      lea d, [bp + 5] ; $s1
0121   04A6 2A            mov b, [d]
0122   04A7 FD 77         inc b
0123   04A9 FA 05 00      lea d, [bp + 5] ; $s1
0124   04AC FD 43         mov [d], b
0125   04AE FD 7D         dec b
0126   04B0             ;; s2++; 
0127   04B0 FA 07 00      lea d, [bp + 7] ; $s2
0128   04B3 2A            mov b, [d]
0129   04B4 FD 77         inc b
0130   04B6 FA 07 00      lea d, [bp + 7] ; $s2
0131   04B9 FD 43         mov [d], b
0132   04BB FD 7D         dec b
0133   04BD 0A 7A 04      jmp _while2_cond
0134   04C0             _while2_exit:
0135   04C0             ;; return *s1 - *s2; 
0136   04C0 FA 05 00      lea d, [bp + 5] ; $s1
0137   04C3 2A            mov b, [d]
0138   04C4 74            mov d, b
0139   04C5 32            mov bl, [d]
0140   04C6 A7 00         mov bh, 0
0141   04C8             ; START TERMS
0142   04C8 D7            push a
0143   04C9 11            mov a, b
0144   04CA FA 07 00      lea d, [bp + 7] ; $s2
0145   04CD 2A            mov b, [d]
0146   04CE 74            mov d, b
0147   04CF 32            mov bl, [d]
0148   04D0 A7 00         mov bh, 0
0149   04D2 60            sub a, b
0150   04D3 27            mov b, a
0151   04D4 E4            pop a
0152   04D5             ; END TERMS
0153   04D5 F9            leave
0154   04D6 09            ret
0155   04D7             
0156   04D7             strncmp:
0157   04D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0158   04DA F9            leave
0159   04DB 09            ret
0160   04DC             
0161   04DC             strcat:
0162   04DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0163   04DF             ;; int dest_len; 
0164   04DF             ; $dest_len 
0165   04DF             ;; int i; 
0166   04DF             ; $i 
0167   04DF             ;; dest_len = strlen(dest); 
0168   04DF FA FF FF      lea d, [bp + -1] ; $dest_len
0169   04E2 DA            push d
0170   04E3 FA 05 00      lea d, [bp + 5] ; $dest
0171   04E6 2A            mov b, [d]
0172   04E7 FD AB         swp b
0173   04E9 D8            push b
0174   04EA 07 8C 05      call strlen
0175   04ED 51 02 00      add sp, 2
0176   04F0 E7            pop d
0177   04F1 FD 43         mov [d], b
0178   04F3             ;; for (i = 0; src[i] != 0; i=i+1) { 
0179   04F3             _for3_init:
0180   04F3 FA FD FF      lea d, [bp + -3] ; $i
0181   04F6 DA            push d
0182   04F7 26 00 00      mov b, $0
0183   04FA E7            pop d
0184   04FB FD 43         mov [d], b
0185   04FD             _for3_cond:
0186   04FD FA 07 00      lea d, [bp + 7] ; $src
0187   0500 FD 2A         mov d, [d]
0188   0502 D7            push a
0189   0503 DA            push d
0190   0504 FA FD FF      lea d, [bp + -3] ; $i
0191   0507 2A            mov b, [d]
0192   0508 E7            pop d
0193   0509 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0194   050D E4            pop a
0195   050E 32            mov bl, [d]
0196   050F A7 00         mov bh, 0
0197   0511             ; START RELATIONAL
0198   0511 D7            push a
0199   0512 11            mov a, b
0200   0513 26 00 00      mov b, $0
0201   0516 B0            cmp a, b
0202   0517 FD 72         sneq ; !=
0203   0519 E4            pop a
0204   051A             ; END RELATIONAL
0205   051A C0 00 00      cmp b, 0
0206   051D C6 66 05      je _for3_exit
0207   0520             _for3_block:
0208   0520             ;; dest[dest_len + i] = src[i]; 
0209   0520 FA 05 00      lea d, [bp + 5] ; $dest
0210   0523 FD 2A         mov d, [d]
0211   0525 D7            push a
0212   0526 DA            push d
0213   0527 FA FF FF      lea d, [bp + -1] ; $dest_len
0214   052A 2A            mov b, [d]
0215   052B             ; START TERMS
0216   052B D7            push a
0217   052C 11            mov a, b
0218   052D FA FD FF      lea d, [bp + -3] ; $i
0219   0530 2A            mov b, [d]
0220   0531 56            add b, a
0221   0532 E4            pop a
0222   0533             ; END TERMS
0223   0533 E7            pop d
0224   0534 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0225   0538 E4            pop a
0226   0539 DA            push d
0227   053A FA 07 00      lea d, [bp + 7] ; $src
0228   053D FD 2A         mov d, [d]
0229   053F D7            push a
0230   0540 DA            push d
0231   0541 FA FD FF      lea d, [bp + -3] ; $i
0232   0544 2A            mov b, [d]
0233   0545 E7            pop d
0234   0546 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0235   054A E4            pop a
0236   054B 32            mov bl, [d]
0237   054C A7 00         mov bh, 0
0238   054E E7            pop d
0239   054F FD 3E         mov [d], bl
0240   0551             _for3_update:
0241   0551 FA FD FF      lea d, [bp + -3] ; $i
0242   0554 DA            push d
0243   0555 FA FD FF      lea d, [bp + -3] ; $i
0244   0558 2A            mov b, [d]
0245   0559             ; START TERMS
0246   0559 D7            push a
0247   055A 11            mov a, b
0248   055B 26 01 00      mov b, $1
0249   055E 56            add b, a
0250   055F E4            pop a
0251   0560             ; END TERMS
0252   0560 E7            pop d
0253   0561 FD 43         mov [d], b
0254   0563 0A FD 04      jmp _for3_cond
0255   0566             _for3_exit:
0256   0566             ;; dest[dest_len + i] = 0; 
0257   0566 FA 05 00      lea d, [bp + 5] ; $dest
0258   0569 FD 2A         mov d, [d]
0259   056B D7            push a
0260   056C DA            push d
0261   056D FA FF FF      lea d, [bp + -1] ; $dest_len
0262   0570 2A            mov b, [d]
0263   0571             ; START TERMS
0264   0571 D7            push a
0265   0572 11            mov a, b
0266   0573 FA FD FF      lea d, [bp + -3] ; $i
0267   0576 2A            mov b, [d]
0268   0577 56            add b, a
0269   0578 E4            pop a
0270   0579             ; END TERMS
0271   0579 E7            pop d
0272   057A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0273   057E E4            pop a
0274   057F DA            push d
0275   0580 26 00 00      mov b, $0
0276   0583 E7            pop d
0277   0584 FD 3E         mov [d], bl
0278   0586             ;; return dest; 
0279   0586 FA 05 00      lea d, [bp + 5] ; $dest
0280   0589 2A            mov b, [d]
0281   058A F9            leave
0282   058B 09            ret
0283   058C             
0284   058C             strlen:
0285   058C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0286   058F             ;; int length; 
0287   058F             ; $length 
0288   058F             ;; length = 0; 
0289   058F FA FF FF      lea d, [bp + -1] ; $length
0290   0592 DA            push d
0291   0593 26 00 00      mov b, $0
0292   0596 E7            pop d
0293   0597 FD 43         mov [d], b
0294   0599             ;; while (str[length] != 0) { 
0295   0599             _while4_cond:
0296   0599 FA 05 00      lea d, [bp + 5] ; $str
0297   059C FD 2A         mov d, [d]
0298   059E D7            push a
0299   059F DA            push d
0300   05A0 FA FF FF      lea d, [bp + -1] ; $length
0301   05A3 2A            mov b, [d]
0302   05A4 E7            pop d
0303   05A5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0304   05A9 E4            pop a
0305   05AA 32            mov bl, [d]
0306   05AB A7 00         mov bh, 0
0307   05AD             ; START RELATIONAL
0308   05AD D7            push a
0309   05AE 11            mov a, b
0310   05AF 26 00 00      mov b, $0
0311   05B2 B0            cmp a, b
0312   05B3 FD 72         sneq ; !=
0313   05B5 E4            pop a
0314   05B6             ; END RELATIONAL
0315   05B6 C0 00 00      cmp b, 0
0316   05B9 C6 CC 05      je _while4_exit
0317   05BC             _while4_block:
0318   05BC             ;; length++; 
0319   05BC FA FF FF      lea d, [bp + -1] ; $length
0320   05BF 2A            mov b, [d]
0321   05C0 FD 77         inc b
0322   05C2 FA FF FF      lea d, [bp + -1] ; $length
0323   05C5 FD 43         mov [d], b
0324   05C7 FD 7D         dec b
0325   05C9 0A 99 05      jmp _while4_cond
0326   05CC             _while4_exit:
0327   05CC             ;; return length; 
0328   05CC FA FF FF      lea d, [bp + -1] ; $length
0329   05CF 2A            mov b, [d]
0330   05D0 F9            leave
0331   05D1 09            ret
0332   05D2             
0333   05D2             exit:
0334   05D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0335   05D5             
0336   05D5             ; --- BEGIN INLINE ASM BLOCK
0337   05D5 05 0B         syscall sys_terminate_proc
0338   05D7             ; --- END INLINE ASM BLOCK
0339   05D7             
0340   05D7 F9            leave
0341   05D8 09            ret
0342   05D9             
0343   05D9             memset:
0344   05D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0345   05DC             ;; int i; 
0346   05DC             ; $i 
0347   05DC             ;; for(i = 0; i < size; i++){ 
0348   05DC             _for5_init:
0349   05DC FA FF FF      lea d, [bp + -1] ; $i
0350   05DF DA            push d
0351   05E0 26 00 00      mov b, $0
0352   05E3 E7            pop d
0353   05E4 FD 43         mov [d], b
0354   05E6             _for5_cond:
0355   05E6 FA FF FF      lea d, [bp + -1] ; $i
0356   05E9 2A            mov b, [d]
0357   05EA             ; START RELATIONAL
0358   05EA D7            push a
0359   05EB 11            mov a, b
0360   05EC FA 08 00      lea d, [bp + 8] ; $size
0361   05EF 2A            mov b, [d]
0362   05F0 B0            cmp a, b
0363   05F1 FD 73         slt ; < (signed)
0364   05F3 E4            pop a
0365   05F4             ; END RELATIONAL
0366   05F4 C0 00 00      cmp b, 0
0367   05F7 C6 20 06      je _for5_exit
0368   05FA             _for5_block:
0369   05FA             ;; *(s+i) = c; 
0370   05FA FA 05 00      lea d, [bp + 5] ; $s
0371   05FD 2A            mov b, [d]
0372   05FE             ; START TERMS
0373   05FE D7            push a
0374   05FF 11            mov a, b
0375   0600 FA FF FF      lea d, [bp + -1] ; $i
0376   0603 2A            mov b, [d]
0377   0604 56            add b, a
0378   0605 E4            pop a
0379   0606             ; END TERMS
0380   0606 D8            push b
0381   0607 FA 07 00      lea d, [bp + 7] ; $c
0382   060A 32            mov bl, [d]
0383   060B A7 00         mov bh, 0
0384   060D E7            pop d
0385   060E FD 3E         mov [d], bl
0386   0610             _for5_update:
0387   0610 FA FF FF      lea d, [bp + -1] ; $i
0388   0613 2A            mov b, [d]
0389   0614 FD 77         inc b
0390   0616 FA FF FF      lea d, [bp + -1] ; $i
0391   0619 FD 43         mov [d], b
0392   061B FD 7D         dec b
0393   061D 0A E6 05      jmp _for5_cond
0394   0620             _for5_exit:
0395   0620             ;; return s; 
0396   0620 FA 05 00      lea d, [bp + 5] ; $s
0397   0623 2A            mov b, [d]
0398   0624 F9            leave
0399   0625 09            ret
0400   0626             
0401   0626             atoi:
0402   0626 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0403   0629             ;; int result = 0;  // Initialize result 
0404   0629             ; $result 
0405   0629 10 00 00      mov a, $0
0406   062C 45 FF FF      mov [bp + -1], a
0407   062F             ;; int sign = 1;    // Initialize sign as positive 
0408   062F             ; $sign 
0409   062F 10 01 00      mov a, $1
0410   0632 45 FD FF      mov [bp + -3], a
0411   0635             ;; while (*str == ' ') str++; 
0412   0635             _while6_cond:
0413   0635 FA 05 00      lea d, [bp + 5] ; $str
0414   0638 2A            mov b, [d]
0415   0639 74            mov d, b
0416   063A 32            mov bl, [d]
0417   063B A7 00         mov bh, 0
0418   063D             ; START RELATIONAL
0419   063D D7            push a
0420   063E 11            mov a, b
0421   063F 26 20 00      mov b, $20
0422   0642 B0            cmp a, b
0423   0643 FD 71         seq ; ==
0424   0645 E4            pop a
0425   0646             ; END RELATIONAL
0426   0646 C0 00 00      cmp b, 0
0427   0649 C6 5C 06      je _while6_exit
0428   064C             _while6_block:
0429   064C             ;; str++; 
0430   064C FA 05 00      lea d, [bp + 5] ; $str
0431   064F 2A            mov b, [d]
0432   0650 FD 77         inc b
0433   0652 FA 05 00      lea d, [bp + 5] ; $str
0434   0655 FD 43         mov [d], b
0435   0657 FD 7D         dec b
0436   0659 0A 35 06      jmp _while6_cond
0437   065C             _while6_exit:
0438   065C             ;; if (*str == '-' || *str == '+') { 
0439   065C             _if7_cond:
0440   065C FA 05 00      lea d, [bp + 5] ; $str
0441   065F 2A            mov b, [d]
0442   0660 74            mov d, b
0443   0661 32            mov bl, [d]
0444   0662 A7 00         mov bh, 0
0445   0664             ; START RELATIONAL
0446   0664 D7            push a
0447   0665 11            mov a, b
0448   0666 26 2D 00      mov b, $2d
0449   0669 B0            cmp a, b
0450   066A FD 71         seq ; ==
0451   066C E4            pop a
0452   066D             ; END RELATIONAL
0453   066D             ; START LOGICAL OR
0454   066D D7            push a
0455   066E 11            mov a, b
0456   066F FA 05 00      lea d, [bp + 5] ; $str
0457   0672 2A            mov b, [d]
0458   0673 74            mov d, b
0459   0674 32            mov bl, [d]
0460   0675 A7 00         mov bh, 0
0461   0677             ; START RELATIONAL
0462   0677 D7            push a
0463   0678 11            mov a, b
0464   0679 26 2B 00      mov b, $2b
0465   067C B0            cmp a, b
0466   067D FD 71         seq ; ==
0467   067F E4            pop a
0468   0680             ; END RELATIONAL
0469   0680 FD A8         sor a, b ; ||
0470   0682 E4            pop a
0471   0683             ; END LOGICAL OR
0472   0683 C0 00 00      cmp b, 0
0473   0686 C6 BD 06      je _if7_exit
0474   0689             _if7_true:
0475   0689             ;; if (*str == '-') sign = -1; 
0476   0689             _if8_cond:
0477   0689 FA 05 00      lea d, [bp + 5] ; $str
0478   068C 2A            mov b, [d]
0479   068D 74            mov d, b
0480   068E 32            mov bl, [d]
0481   068F A7 00         mov bh, 0
0482   0691             ; START RELATIONAL
0483   0691 D7            push a
0484   0692 11            mov a, b
0485   0693 26 2D 00      mov b, $2d
0486   0696 B0            cmp a, b
0487   0697 FD 71         seq ; ==
0488   0699 E4            pop a
0489   069A             ; END RELATIONAL
0490   069A C0 00 00      cmp b, 0
0491   069D C6 AD 06      je _if8_exit
0492   06A0             _if8_true:
0493   06A0             ;; sign = -1; 
0494   06A0 FA FD FF      lea d, [bp + -3] ; $sign
0495   06A3 DA            push d
0496   06A4 26 FF FF      mov b, $ffff
0497   06A7 E7            pop d
0498   06A8 FD 43         mov [d], b
0499   06AA 0A AD 06      jmp _if8_exit
0500   06AD             _if8_exit:
0501   06AD             ;; str++; 
0502   06AD FA 05 00      lea d, [bp + 5] ; $str
0503   06B0 2A            mov b, [d]
0504   06B1 FD 77         inc b
0505   06B3 FA 05 00      lea d, [bp + 5] ; $str
0506   06B6 FD 43         mov [d], b
0507   06B8 FD 7D         dec b
0508   06BA 0A BD 06      jmp _if7_exit
0509   06BD             _if7_exit:
0510   06BD             ;; while (*str >= '0' && *str <= '9') { 
0511   06BD             _while9_cond:
0512   06BD FA 05 00      lea d, [bp + 5] ; $str
0513   06C0 2A            mov b, [d]
0514   06C1 74            mov d, b
0515   06C2 32            mov bl, [d]
0516   06C3 A7 00         mov bh, 0
0517   06C5             ; START RELATIONAL
0518   06C5 D7            push a
0519   06C6 11            mov a, b
0520   06C7 26 30 00      mov b, $30
0521   06CA B0            cmp a, b
0522   06CB FD 82         sgeu ; >= (unsigned)
0523   06CD E4            pop a
0524   06CE             ; END RELATIONAL
0525   06CE             ; START LOGICAL AND
0526   06CE D7            push a
0527   06CF 11            mov a, b
0528   06D0 FA 05 00      lea d, [bp + 5] ; $str
0529   06D3 2A            mov b, [d]
0530   06D4 74            mov d, b
0531   06D5 32            mov bl, [d]
0532   06D6 A7 00         mov bh, 0
0533   06D8             ; START RELATIONAL
0534   06D8 D7            push a
0535   06D9 11            mov a, b
0536   06DA 26 39 00      mov b, $39
0537   06DD B0            cmp a, b
0538   06DE FD 75         slu ; <= (unsigned)
0539   06E0 E4            pop a
0540   06E1             ; END RELATIONAL
0541   06E1 FD A7         sand a, b
0542   06E3 E4            pop a
0543   06E4             ; END LOGICAL AND
0544   06E4 C0 00 00      cmp b, 0
0545   06E7 C6 22 07      je _while9_exit
0546   06EA             _while9_block:
0547   06EA             ;; result = result * 10 + (*str - '0'); 
0548   06EA FA FF FF      lea d, [bp + -1] ; $result
0549   06ED DA            push d
0550   06EE FA FF FF      lea d, [bp + -1] ; $result
0551   06F1 2A            mov b, [d]
0552   06F2             ; START FACTORS
0553   06F2 D7            push a
0554   06F3 11            mov a, b
0555   06F4 26 0A 00      mov b, $a
0556   06F7 AC            mul a, b ; *
0557   06F8 11            mov a, b
0558   06F9 27            mov b, a
0559   06FA E4            pop a
0560   06FB             ; END FACTORS
0561   06FB             ; START TERMS
0562   06FB D7            push a
0563   06FC 11            mov a, b
0564   06FD FA 05 00      lea d, [bp + 5] ; $str
0565   0700 2A            mov b, [d]
0566   0701 74            mov d, b
0567   0702 32            mov bl, [d]
0568   0703 A7 00         mov bh, 0
0569   0705             ; START TERMS
0570   0705 D7            push a
0571   0706 11            mov a, b
0572   0707 26 30 00      mov b, $30
0573   070A 60            sub a, b
0574   070B 27            mov b, a
0575   070C E4            pop a
0576   070D             ; END TERMS
0577   070D 56            add b, a
0578   070E E4            pop a
0579   070F             ; END TERMS
0580   070F E7            pop d
0581   0710 FD 43         mov [d], b
0582   0712             ;; str++; 
0583   0712 FA 05 00      lea d, [bp + 5] ; $str
0584   0715 2A            mov b, [d]
0585   0716 FD 77         inc b
0586   0718 FA 05 00      lea d, [bp + 5] ; $str
0587   071B FD 43         mov [d], b
0588   071D FD 7D         dec b
0589   071F 0A BD 06      jmp _while9_cond
0590   0722             _while9_exit:
0591   0722             ;; return sign * result; 
0592   0722 FA FD FF      lea d, [bp + -3] ; $sign
0593   0725 2A            mov b, [d]
0594   0726             ; START FACTORS
0595   0726 D7            push a
0596   0727 11            mov a, b
0597   0728 FA FF FF      lea d, [bp + -1] ; $result
0598   072B 2A            mov b, [d]
0599   072C AC            mul a, b ; *
0600   072D 11            mov a, b
0601   072E 27            mov b, a
0602   072F E4            pop a
0603   0730             ; END FACTORS
0604   0730 F9            leave
0605   0731 09            ret
0606   0732             
0607   0732             rand:
0608   0732 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0609   0735             ;; int  sec; 
0610   0735             ; $sec 
0611   0735             
0612   0735             ; --- BEGIN INLINE ASM BLOCK
0613   0735 19 00         mov al, 0
0614   0737 05 01         syscall sys_rtc					
0615   0739 1A            mov al, ah
0616   073A FA FF FF      lea d, [bp + -1] ; $sec
0617   073D 1E            mov al, [d]
0618   073E 22 00         mov ah, 0
0619   0740             ; --- END INLINE ASM BLOCK
0620   0740             
0621   0740             ;; return sec; 
0622   0740 FA FF FF      lea d, [bp + -1] ; $sec
0623   0743 2A            mov b, [d]
0624   0744 F9            leave
0625   0745 09            ret
0626   0746             
0627   0746             alloc:
0628   0746 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0629   0749             ;; heap_top = heap_top + bytes; 
0630   0749 3B 58 20      mov d, _heap_top ; $heap_top
0631   074C DA            push d
0632   074D 3B 58 20      mov d, _heap_top ; $heap_top
0633   0750 2A            mov b, [d]
0634   0751             ; START TERMS
0635   0751 D7            push a
0636   0752 11            mov a, b
0637   0753 FA 05 00      lea d, [bp + 5] ; $bytes
0638   0756 2A            mov b, [d]
0639   0757 56            add b, a
0640   0758 E4            pop a
0641   0759             ; END TERMS
0642   0759 E7            pop d
0643   075A FD 43         mov [d], b
0644   075C             ;; return heap_top - bytes; 
0645   075C 3B 58 20      mov d, _heap_top ; $heap_top
0646   075F 2A            mov b, [d]
0647   0760             ; START TERMS
0648   0760 D7            push a
0649   0761 11            mov a, b
0650   0762 FA 05 00      lea d, [bp + 5] ; $bytes
0651   0765 2A            mov b, [d]
0652   0766 60            sub a, b
0653   0767 27            mov b, a
0654   0768 E4            pop a
0655   0769             ; END TERMS
0656   0769 F9            leave
0657   076A 09            ret
0658   076B             
0659   076B             free:
0660   076B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0661   076E             ;; return heap_top = heap_top - bytes; 
0662   076E 3B 58 20      mov d, _heap_top ; $heap_top
0663   0771 DA            push d
0664   0772 3B 58 20      mov d, _heap_top ; $heap_top
0665   0775 2A            mov b, [d]
0666   0776             ; START TERMS
0667   0776 D7            push a
0668   0777 11            mov a, b
0669   0778 FA 05 00      lea d, [bp + 5] ; $bytes
0670   077B 2A            mov b, [d]
0671   077C 60            sub a, b
0672   077D 27            mov b, a
0673   077E E4            pop a
0674   077F             ; END TERMS
0675   077F E7            pop d
0676   0780 FD 43         mov [d], b
0677   0782 F9            leave
0678   0783 09            ret
0679   0784             
0680   0784             printf:
0681   0784 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0682   0787             ;; char *p, *format_p; 
0683   0787             ; $p 
0684   0787             ; $format_p 
0685   0787             ;; format_p = format; 
0686   0787 FA FD FF      lea d, [bp + -3] ; $format_p
0687   078A DA            push d
0688   078B FA 05 00      lea d, [bp + 5] ; $format
0689   078E 2A            mov b, [d]
0690   078F E7            pop d
0691   0790 FD 43         mov [d], b
0692   0792             ;; p = &format + 2; 
0693   0792 FA FF FF      lea d, [bp + -1] ; $p
0694   0795 DA            push d
0695   0796 FA 05 00      lea d, [bp + 5] ; $format
0696   0799 2D            mov b, d
0697   079A             ; START TERMS
0698   079A D7            push a
0699   079B 11            mov a, b
0700   079C 26 02 00      mov b, $2
0701   079F 56            add b, a
0702   07A0 E4            pop a
0703   07A1             ; END TERMS
0704   07A1 E7            pop d
0705   07A2 FD 43         mov [d], b
0706   07A4             ;; for(;;){ 
0707   07A4             _for10_init:
0708   07A4             _for10_cond:
0709   07A4             _for10_block:
0710   07A4             ;; if(!*format_p) break; 
0711   07A4             _if11_cond:
0712   07A4 FA FD FF      lea d, [bp + -3] ; $format_p
0713   07A7 2A            mov b, [d]
0714   07A8 74            mov d, b
0715   07A9 32            mov bl, [d]
0716   07AA A7 00         mov bh, 0
0717   07AC C0 00 00      cmp b, 0
0718   07AF FD 71         seq ; !
0719   07B1 C0 00 00      cmp b, 0
0720   07B4 C6 BD 07      je _if11_else
0721   07B7             _if11_true:
0722   07B7             ;; break; 
0723   07B7 0A E4 09      jmp _for10_exit ; for break
0724   07BA 0A E1 09      jmp _if11_exit
0725   07BD             _if11_else:
0726   07BD             ;; if(*format_p == '%'){ 
0727   07BD             _if12_cond:
0728   07BD FA FD FF      lea d, [bp + -3] ; $format_p
0729   07C0 2A            mov b, [d]
0730   07C1 74            mov d, b
0731   07C2 32            mov bl, [d]
0732   07C3 A7 00         mov bh, 0
0733   07C5             ; START RELATIONAL
0734   07C5 D7            push a
0735   07C6 11            mov a, b
0736   07C7 26 25 00      mov b, $25
0737   07CA B0            cmp a, b
0738   07CB FD 71         seq ; ==
0739   07CD E4            pop a
0740   07CE             ; END RELATIONAL
0741   07CE C0 00 00      cmp b, 0
0742   07D1 C6 C5 09      je _if12_else
0743   07D4             _if12_true:
0744   07D4             ;; format_p++; 
0745   07D4 FA FD FF      lea d, [bp + -3] ; $format_p
0746   07D7 2A            mov b, [d]
0747   07D8 FD 77         inc b
0748   07DA FA FD FF      lea d, [bp + -3] ; $format_p
0749   07DD FD 43         mov [d], b
0750   07DF FD 7D         dec b
0751   07E1             ;; switch(*format_p){ 
0752   07E1             _switch13_expr:
0753   07E1 FA FD FF      lea d, [bp + -3] ; $format_p
0754   07E4 2A            mov b, [d]
0755   07E5 74            mov d, b
0756   07E6 32            mov bl, [d]
0757   07E7 A7 00         mov bh, 0
0758   07E9             _switch13_comparisons:
0759   07E9 C1 6C         cmp bl, $6c
0760   07EB C6 17 08      je _switch13_case0
0761   07EE C1 4C         cmp bl, $4c
0762   07F0 C6 17 08      je _switch13_case1
0763   07F3 C1 64         cmp bl, $64
0764   07F5 C6 05 09      je _switch13_case2
0765   07F8 C1 69         cmp bl, $69
0766   07FA C6 05 09      je _switch13_case3
0767   07FD C1 75         cmp bl, $75
0768   07FF C6 29 09      je _switch13_case4
0769   0802 C1 78         cmp bl, $78
0770   0804 C6 4D 09      je _switch13_case5
0771   0807 C1 63         cmp bl, $63
0772   0809 C6 6B 09      je _switch13_case6
0773   080C C1 73         cmp bl, $73
0774   080E C6 8A 09      je _switch13_case7
0775   0811 0A A9 09      jmp _switch13_default
0776   0814 0A B5 09      jmp _switch13_exit
0777   0817             _switch13_case0:
0778   0817             _switch13_case1:
0779   0817             ;; format_p++; 
0780   0817 FA FD FF      lea d, [bp + -3] ; $format_p
0781   081A 2A            mov b, [d]
0782   081B FD 77         inc b
0783   081D FA FD FF      lea d, [bp + -3] ; $format_p
0784   0820 FD 43         mov [d], b
0785   0822 FD 7D         dec b
0786   0824             ;; if(*format_p == 'd' || *format_p == 'i') 
0787   0824             _if14_cond:
0788   0824 FA FD FF      lea d, [bp + -3] ; $format_p
0789   0827 2A            mov b, [d]
0790   0828 74            mov d, b
0791   0829 32            mov bl, [d]
0792   082A A7 00         mov bh, 0
0793   082C             ; START RELATIONAL
0794   082C D7            push a
0795   082D 11            mov a, b
0796   082E 26 64 00      mov b, $64
0797   0831 B0            cmp a, b
0798   0832 FD 71         seq ; ==
0799   0834 E4            pop a
0800   0835             ; END RELATIONAL
0801   0835             ; START LOGICAL OR
0802   0835 D7            push a
0803   0836 11            mov a, b
0804   0837 FA FD FF      lea d, [bp + -3] ; $format_p
0805   083A 2A            mov b, [d]
0806   083B 74            mov d, b
0807   083C 32            mov bl, [d]
0808   083D A7 00         mov bh, 0
0809   083F             ; START RELATIONAL
0810   083F D7            push a
0811   0840 11            mov a, b
0812   0841 26 69 00      mov b, $69
0813   0844 B0            cmp a, b
0814   0845 FD 71         seq ; ==
0815   0847 E4            pop a
0816   0848             ; END RELATIONAL
0817   0848 FD A8         sor a, b ; ||
0818   084A E4            pop a
0819   084B             ; END LOGICAL OR
0820   084B C0 00 00      cmp b, 0
0821   084E C6 73 08      je _if14_else
0822   0851             _if14_true:
0823   0851             ;; print_signed_long(*(long *)p); 
0824   0851 FA FF FF      lea d, [bp + -1] ; $p
0825   0854 2A            mov b, [d]
0826   0855 AB            snex b
0827   0856 FD 39         mov c, b
0828   0858 74            mov d, b
0829   0859 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0830   085C FD 39         mov c, b ; And place it into C
0831   085E 2A            mov b, [d] ; Lower Word in B
0832   085F FD 79         mov g, b
0833   0861 28            mov b, c
0834   0862 FD AB         swp b
0835   0864 D8            push b
0836   0865 FD 27         mov b, g
0837   0867 FD AB         swp b
0838   0869 D8            push b
0839   086A 07 A1 0E      call print_signed_long
0840   086D 51 04 00      add sp, 4
0841   0870 0A F0 08      jmp _if14_exit
0842   0873             _if14_else:
0843   0873             ;; if(*format_p == 'u') 
0844   0873             _if15_cond:
0845   0873 FA FD FF      lea d, [bp + -3] ; $format_p
0846   0876 2A            mov b, [d]
0847   0877 74            mov d, b
0848   0878 32            mov bl, [d]
0849   0879 A7 00         mov bh, 0
0850   087B             ; START RELATIONAL
0851   087B D7            push a
0852   087C 11            mov a, b
0853   087D 26 75 00      mov b, $75
0854   0880 B0            cmp a, b
0855   0881 FD 71         seq ; ==
0856   0883 E4            pop a
0857   0884             ; END RELATIONAL
0858   0884 C0 00 00      cmp b, 0
0859   0887 C6 AE 08      je _if15_else
0860   088A             _if15_true:
0861   088A             ;; print_unsigned_long(*(unsigned long *)p); 
0862   088A FA FF FF      lea d, [bp + -1] ; $p
0863   088D 2A            mov b, [d]
0864   088E A7 00         mov bh, 0
0865   0890 38 00 00      mov c, 0
0866   0893 74            mov d, b
0867   0894 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0868   0897 FD 39         mov c, b ; And place it into C
0869   0899 2A            mov b, [d] ; Lower Word in B
0870   089A FD 79         mov g, b
0871   089C 28            mov b, c
0872   089D FD AB         swp b
0873   089F D8            push b
0874   08A0 FD 27         mov b, g
0875   08A2 FD AB         swp b
0876   08A4 D8            push b
0877   08A5 07 D7 11      call print_unsigned_long
0878   08A8 51 04 00      add sp, 4
0879   08AB 0A F0 08      jmp _if15_exit
0880   08AE             _if15_else:
0881   08AE             ;; if(*format_p == 'x') 
0882   08AE             _if16_cond:
0883   08AE FA FD FF      lea d, [bp + -3] ; $format_p
0884   08B1 2A            mov b, [d]
0885   08B2 74            mov d, b
0886   08B3 32            mov bl, [d]
0887   08B4 A7 00         mov bh, 0
0888   08B6             ; START RELATIONAL
0889   08B6 D7            push a
0890   08B7 11            mov a, b
0891   08B8 26 78 00      mov b, $78
0892   08BB B0            cmp a, b
0893   08BC FD 71         seq ; ==
0894   08BE E4            pop a
0895   08BF             ; END RELATIONAL
0896   08BF C0 00 00      cmp b, 0
0897   08C2 C6 E4 08      je _if16_else
0898   08C5             _if16_true:
0899   08C5             ;; printx32(*(long int *)p); 
0900   08C5 FA FF FF      lea d, [bp + -1] ; $p
0901   08C8 2A            mov b, [d]
0902   08C9 74            mov d, b
0903   08CA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0904   08CD FD 39         mov c, b ; And place it into C
0905   08CF 2A            mov b, [d] ; Lower Word in B
0906   08D0 FD 79         mov g, b
0907   08D2 28            mov b, c
0908   08D3 FD AB         swp b
0909   08D5 D8            push b
0910   08D6 FD 27         mov b, g
0911   08D8 FD AB         swp b
0912   08DA D8            push b
0913   08DB 07 30 0C      call printx32
0914   08DE 51 04 00      add sp, 4
0915   08E1 0A F0 08      jmp _if16_exit
0916   08E4             _if16_else:
0917   08E4             ;; err("Unexpected format in printf."); 
0918   08E4 26 14 20      mov b, _s0 ; "Unexpected format in printf."
0919   08E7 FD AB         swp b
0920   08E9 D8            push b
0921   08EA 07 1E 0C      call err
0922   08ED 51 02 00      add sp, 2
0923   08F0             _if16_exit:
0924   08F0             _if15_exit:
0925   08F0             _if14_exit:
0926   08F0             ;; p = p + 4; 
0927   08F0 FA FF FF      lea d, [bp + -1] ; $p
0928   08F3 DA            push d
0929   08F4 FA FF FF      lea d, [bp + -1] ; $p
0930   08F7 2A            mov b, [d]
0931   08F8             ; START TERMS
0932   08F8 D7            push a
0933   08F9 11            mov a, b
0934   08FA 26 04 00      mov b, $4
0935   08FD 56            add b, a
0936   08FE E4            pop a
0937   08FF             ; END TERMS
0938   08FF E7            pop d
0939   0900 FD 43         mov [d], b
0940   0902             ;; break; 
0941   0902 0A B5 09      jmp _switch13_exit ; case break
0942   0905             _switch13_case2:
0943   0905             _switch13_case3:
0944   0905             ;; print_signed(*(int*)p); 
0945   0905 FA FF FF      lea d, [bp + -1] ; $p
0946   0908 2A            mov b, [d]
0947   0909 74            mov d, b
0948   090A 2A            mov b, [d]
0949   090B FD AB         swp b
0950   090D D8            push b
0951   090E 07 B4 0D      call print_signed
0952   0911 51 02 00      add sp, 2
0953   0914             ;; p = p + 2; 
0954   0914 FA FF FF      lea d, [bp + -1] ; $p
0955   0917 DA            push d
0956   0918 FA FF FF      lea d, [bp + -1] ; $p
0957   091B 2A            mov b, [d]
0958   091C             ; START TERMS
0959   091C D7            push a
0960   091D 11            mov a, b
0961   091E 26 02 00      mov b, $2
0962   0921 56            add b, a
0963   0922 E4            pop a
0964   0923             ; END TERMS
0965   0923 E7            pop d
0966   0924 FD 43         mov [d], b
0967   0926             ;; break; 
0968   0926 0A B5 09      jmp _switch13_exit ; case break
0969   0929             _switch13_case4:
0970   0929             ;; print_unsigned(*(unsigned int*)p); 
0971   0929 FA FF FF      lea d, [bp + -1] ; $p
0972   092C 2A            mov b, [d]
0973   092D 74            mov d, b
0974   092E 2A            mov b, [d]
0975   092F FD AB         swp b
0976   0931 D8            push b
0977   0932 07 CC 13      call print_unsigned
0978   0935 51 02 00      add sp, 2
0979   0938             ;; p = p + 2; 
0980   0938 FA FF FF      lea d, [bp + -1] ; $p
0981   093B DA            push d
0982   093C FA FF FF      lea d, [bp + -1] ; $p
0983   093F 2A            mov b, [d]
0984   0940             ; START TERMS
0985   0940 D7            push a
0986   0941 11            mov a, b
0987   0942 26 02 00      mov b, $2
0988   0945 56            add b, a
0989   0946 E4            pop a
0990   0947             ; END TERMS
0991   0947 E7            pop d
0992   0948 FD 43         mov [d], b
0993   094A             ;; break; 
0994   094A 0A B5 09      jmp _switch13_exit ; case break
0995   094D             _switch13_case5:
0996   094D             
0997   094D             ; --- BEGIN INLINE ASM BLOCK
0998   094D FA FF FF      lea d, [bp + -1] ; $p
0999   0950 FD 2A         mov d, [d]
1000   0952 2A            mov b, [d]
1001   0953 07 C3 17      call print_u16x
1002   0956             ; --- END INLINE ASM BLOCK
1003   0956             
1004   0956             ;; p = p + 2; 
1005   0956 FA FF FF      lea d, [bp + -1] ; $p
1006   0959 DA            push d
1007   095A FA FF FF      lea d, [bp + -1] ; $p
1008   095D 2A            mov b, [d]
1009   095E             ; START TERMS
1010   095E D7            push a
1011   095F 11            mov a, b
1012   0960 26 02 00      mov b, $2
1013   0963 56            add b, a
1014   0964 E4            pop a
1015   0965             ; END TERMS
1016   0965 E7            pop d
1017   0966 FD 43         mov [d], b
1018   0968             ;; break; 
1019   0968 0A B5 09      jmp _switch13_exit ; case break
1020   096B             _switch13_case6:
1021   096B             
1022   096B             ; --- BEGIN INLINE ASM BLOCK
1023   096B FA FF FF      lea d, [bp + -1] ; $p
1024   096E FD 2A         mov d, [d]
1025   0970 1E            mov al, [d]
1026   0971 23            mov ah, al
1027   0972 07 21 16      call _putchar
1028   0975             ; --- END INLINE ASM BLOCK
1029   0975             
1030   0975             ;; p = p + 2; 
1031   0975 FA FF FF      lea d, [bp + -1] ; $p
1032   0978 DA            push d
1033   0979 FA FF FF      lea d, [bp + -1] ; $p
1034   097C 2A            mov b, [d]
1035   097D             ; START TERMS
1036   097D D7            push a
1037   097E 11            mov a, b
1038   097F 26 02 00      mov b, $2
1039   0982 56            add b, a
1040   0983 E4            pop a
1041   0984             ; END TERMS
1042   0984 E7            pop d
1043   0985 FD 43         mov [d], b
1044   0987             ;; break; 
1045   0987 0A B5 09      jmp _switch13_exit ; case break
1046   098A             _switch13_case7:
1047   098A             
1048   098A             ; --- BEGIN INLINE ASM BLOCK
1049   098A FA FF FF      lea d, [bp + -1] ; $p
1050   098D FD 2A         mov d, [d]
1051   098F FD 2A         mov d, [d]
1052   0991 07 6B 17      call _puts
1053   0994             ; --- END INLINE ASM BLOCK
1054   0994             
1055   0994             ;; p = p + 2; 
1056   0994 FA FF FF      lea d, [bp + -1] ; $p
1057   0997 DA            push d
1058   0998 FA FF FF      lea d, [bp + -1] ; $p
1059   099B 2A            mov b, [d]
1060   099C             ; START TERMS
1061   099C D7            push a
1062   099D 11            mov a, b
1063   099E 26 02 00      mov b, $2
1064   09A1 56            add b, a
1065   09A2 E4            pop a
1066   09A3             ; END TERMS
1067   09A3 E7            pop d
1068   09A4 FD 43         mov [d], b
1069   09A6             ;; break; 
1070   09A6 0A B5 09      jmp _switch13_exit ; case break
1071   09A9             _switch13_default:
1072   09A9             ;; print("Error: Unknown argument type.\n"); 
1073   09A9 26 31 20      mov b, _s1 ; "Error: Unknown argument type.\n"
1074   09AC FD AB         swp b
1075   09AE D8            push b
1076   09AF 07 DB 14      call print
1077   09B2 51 02 00      add sp, 2
1078   09B5             _switch13_exit:
1079   09B5             ;; format_p++; 
1080   09B5 FA FD FF      lea d, [bp + -3] ; $format_p
1081   09B8 2A            mov b, [d]
1082   09B9 FD 77         inc b
1083   09BB FA FD FF      lea d, [bp + -3] ; $format_p
1084   09BE FD 43         mov [d], b
1085   09C0 FD 7D         dec b
1086   09C2 0A E1 09      jmp _if12_exit
1087   09C5             _if12_else:
1088   09C5             ;; putchar(*format_p); 
1089   09C5 FA FD FF      lea d, [bp + -3] ; $format_p
1090   09C8 2A            mov b, [d]
1091   09C9 74            mov d, b
1092   09CA 32            mov bl, [d]
1093   09CB A7 00         mov bh, 0
1094   09CD DD            push bl
1095   09CE 07 99 14      call putchar
1096   09D1 51 01 00      add sp, 1
1097   09D4             ;; format_p++; 
1098   09D4 FA FD FF      lea d, [bp + -3] ; $format_p
1099   09D7 2A            mov b, [d]
1100   09D8 FD 77         inc b
1101   09DA FA FD FF      lea d, [bp + -3] ; $format_p
1102   09DD FD 43         mov [d], b
1103   09DF FD 7D         dec b
1104   09E1             _if12_exit:
1105   09E1             _if11_exit:
1106   09E1             _for10_update:
1107   09E1 0A A4 07      jmp _for10_cond
1108   09E4             _for10_exit:
1109   09E4 F9            leave
1110   09E5 09            ret
1111   09E6             
1112   09E6             scanf:
1113   09E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1114   09E9             ;; char *p, *format_p; 
1115   09E9             ; $p 
1116   09E9             ; $format_p 
1117   09E9             ;; char c; 
1118   09E9             ; $c 
1119   09E9             ;; int i; 
1120   09E9             ; $i 
1121   09E9             ;; char input_string[  512                    ]; 
1122   09E9             ; $input_string 
1123   09E9             ;; format_p = format; 
1124   09E9 FA FD FF      lea d, [bp + -3] ; $format_p
1125   09EC DA            push d
1126   09ED FA 05 00      lea d, [bp + 5] ; $format
1127   09F0 2A            mov b, [d]
1128   09F1 E7            pop d
1129   09F2 FD 43         mov [d], b
1130   09F4             ;; p = &format + 2; 
1131   09F4 FA FF FF      lea d, [bp + -1] ; $p
1132   09F7 DA            push d
1133   09F8 FA 05 00      lea d, [bp + 5] ; $format
1134   09FB 2D            mov b, d
1135   09FC             ; START TERMS
1136   09FC D7            push a
1137   09FD 11            mov a, b
1138   09FE 26 02 00      mov b, $2
1139   0A01 56            add b, a
1140   0A02 E4            pop a
1141   0A03             ; END TERMS
1142   0A03 E7            pop d
1143   0A04 FD 43         mov [d], b
1144   0A06             ;; for(;;){ 
1145   0A06             _for17_init:
1146   0A06             _for17_cond:
1147   0A06             _for17_block:
1148   0A06             ;; if(!*format_p) break; 
1149   0A06             _if18_cond:
1150   0A06 FA FD FF      lea d, [bp + -3] ; $format_p
1151   0A09 2A            mov b, [d]
1152   0A0A 74            mov d, b
1153   0A0B 32            mov bl, [d]
1154   0A0C A7 00         mov bh, 0
1155   0A0E C0 00 00      cmp b, 0
1156   0A11 FD 71         seq ; !
1157   0A13 C0 00 00      cmp b, 0
1158   0A16 C6 1F 0A      je _if18_else
1159   0A19             _if18_true:
1160   0A19             ;; break; 
1161   0A19 0A 1C 0C      jmp _for17_exit ; for break
1162   0A1C 0A 19 0C      jmp _if18_exit
1163   0A1F             _if18_else:
1164   0A1F             ;; if(*format_p == '%'){ 
1165   0A1F             _if19_cond:
1166   0A1F FA FD FF      lea d, [bp + -3] ; $format_p
1167   0A22 2A            mov b, [d]
1168   0A23 74            mov d, b
1169   0A24 32            mov bl, [d]
1170   0A25 A7 00         mov bh, 0
1171   0A27             ; START RELATIONAL
1172   0A27 D7            push a
1173   0A28 11            mov a, b
1174   0A29 26 25 00      mov b, $25
1175   0A2C B0            cmp a, b
1176   0A2D FD 71         seq ; ==
1177   0A2F E4            pop a
1178   0A30             ; END RELATIONAL
1179   0A30 C0 00 00      cmp b, 0
1180   0A33 C6 FD 0B      je _if19_else
1181   0A36             _if19_true:
1182   0A36             ;; format_p++; 
1183   0A36 FA FD FF      lea d, [bp + -3] ; $format_p
1184   0A39 2A            mov b, [d]
1185   0A3A FD 77         inc b
1186   0A3C FA FD FF      lea d, [bp + -3] ; $format_p
1187   0A3F FD 43         mov [d], b
1188   0A41 FD 7D         dec b
1189   0A43             ;; switch(*format_p){ 
1190   0A43             _switch20_expr:
1191   0A43 FA FD FF      lea d, [bp + -3] ; $format_p
1192   0A46 2A            mov b, [d]
1193   0A47 74            mov d, b
1194   0A48 32            mov bl, [d]
1195   0A49 A7 00         mov bh, 0
1196   0A4B             _switch20_comparisons:
1197   0A4B C1 6C         cmp bl, $6c
1198   0A4D C6 79 0A      je _switch20_case0
1199   0A50 C1 4C         cmp bl, $4c
1200   0A52 C6 79 0A      je _switch20_case1
1201   0A55 C1 64         cmp bl, $64
1202   0A57 C6 0B 0B      je _switch20_case2
1203   0A5A C1 69         cmp bl, $69
1204   0A5C C6 0B 0B      je _switch20_case3
1205   0A5F C1 75         cmp bl, $75
1206   0A61 C6 38 0B      je _switch20_case4
1207   0A64 C1 78         cmp bl, $78
1208   0A66 C6 65 0B      je _switch20_case5
1209   0A69 C1 63         cmp bl, $63
1210   0A6B C6 7A 0B      je _switch20_case6
1211   0A6E C1 73         cmp bl, $73
1212   0A70 C6 A9 0B      je _switch20_case7
1213   0A73 0A E1 0B      jmp _switch20_default
1214   0A76 0A ED 0B      jmp _switch20_exit
1215   0A79             _switch20_case0:
1216   0A79             _switch20_case1:
1217   0A79             ;; format_p++; 
1218   0A79 FA FD FF      lea d, [bp + -3] ; $format_p
1219   0A7C 2A            mov b, [d]
1220   0A7D FD 77         inc b
1221   0A7F FA FD FF      lea d, [bp + -3] ; $format_p
1222   0A82 FD 43         mov [d], b
1223   0A84 FD 7D         dec b
1224   0A86             ;; if(*format_p == 'd' || *format_p == 'i'); 
1225   0A86             _if21_cond:
1226   0A86 FA FD FF      lea d, [bp + -3] ; $format_p
1227   0A89 2A            mov b, [d]
1228   0A8A 74            mov d, b
1229   0A8B 32            mov bl, [d]
1230   0A8C A7 00         mov bh, 0
1231   0A8E             ; START RELATIONAL
1232   0A8E D7            push a
1233   0A8F 11            mov a, b
1234   0A90 26 64 00      mov b, $64
1235   0A93 B0            cmp a, b
1236   0A94 FD 71         seq ; ==
1237   0A96 E4            pop a
1238   0A97             ; END RELATIONAL
1239   0A97             ; START LOGICAL OR
1240   0A97 D7            push a
1241   0A98 11            mov a, b
1242   0A99 FA FD FF      lea d, [bp + -3] ; $format_p
1243   0A9C 2A            mov b, [d]
1244   0A9D 74            mov d, b
1245   0A9E 32            mov bl, [d]
1246   0A9F A7 00         mov bh, 0
1247   0AA1             ; START RELATIONAL
1248   0AA1 D7            push a
1249   0AA2 11            mov a, b
1250   0AA3 26 69 00      mov b, $69
1251   0AA6 B0            cmp a, b
1252   0AA7 FD 71         seq ; ==
1253   0AA9 E4            pop a
1254   0AAA             ; END RELATIONAL
1255   0AAA FD A8         sor a, b ; ||
1256   0AAC E4            pop a
1257   0AAD             ; END LOGICAL OR
1258   0AAD C0 00 00      cmp b, 0
1259   0AB0 C6 B6 0A      je _if21_else
1260   0AB3             _if21_true:
1261   0AB3             ;; ; 
1262   0AB3 0A F6 0A      jmp _if21_exit
1263   0AB6             _if21_else:
1264   0AB6             ;; if(*format_p == 'u'); 
1265   0AB6             _if22_cond:
1266   0AB6 FA FD FF      lea d, [bp + -3] ; $format_p
1267   0AB9 2A            mov b, [d]
1268   0ABA 74            mov d, b
1269   0ABB 32            mov bl, [d]
1270   0ABC A7 00         mov bh, 0
1271   0ABE             ; START RELATIONAL
1272   0ABE D7            push a
1273   0ABF 11            mov a, b
1274   0AC0 26 75 00      mov b, $75
1275   0AC3 B0            cmp a, b
1276   0AC4 FD 71         seq ; ==
1277   0AC6 E4            pop a
1278   0AC7             ; END RELATIONAL
1279   0AC7 C0 00 00      cmp b, 0
1280   0ACA C6 D0 0A      je _if22_else
1281   0ACD             _if22_true:
1282   0ACD             ;; ; 
1283   0ACD 0A F6 0A      jmp _if22_exit
1284   0AD0             _if22_else:
1285   0AD0             ;; if(*format_p == 'x'); 
1286   0AD0             _if23_cond:
1287   0AD0 FA FD FF      lea d, [bp + -3] ; $format_p
1288   0AD3 2A            mov b, [d]
1289   0AD4 74            mov d, b
1290   0AD5 32            mov bl, [d]
1291   0AD6 A7 00         mov bh, 0
1292   0AD8             ; START RELATIONAL
1293   0AD8 D7            push a
1294   0AD9 11            mov a, b
1295   0ADA 26 78 00      mov b, $78
1296   0ADD B0            cmp a, b
1297   0ADE FD 71         seq ; ==
1298   0AE0 E4            pop a
1299   0AE1             ; END RELATIONAL
1300   0AE1 C0 00 00      cmp b, 0
1301   0AE4 C6 EA 0A      je _if23_else
1302   0AE7             _if23_true:
1303   0AE7             ;; ; 
1304   0AE7 0A F6 0A      jmp _if23_exit
1305   0AEA             _if23_else:
1306   0AEA             ;; err("Unexpected format in printf."); 
1307   0AEA 26 14 20      mov b, _s0 ; "Unexpected format in printf."
1308   0AED FD AB         swp b
1309   0AEF D8            push b
1310   0AF0 07 1E 0C      call err
1311   0AF3 51 02 00      add sp, 2
1312   0AF6             _if23_exit:
1313   0AF6             _if22_exit:
1314   0AF6             _if21_exit:
1315   0AF6             ;; p = p + 4; 
1316   0AF6 FA FF FF      lea d, [bp + -1] ; $p
1317   0AF9 DA            push d
1318   0AFA FA FF FF      lea d, [bp + -1] ; $p
1319   0AFD 2A            mov b, [d]
1320   0AFE             ; START TERMS
1321   0AFE D7            push a
1322   0AFF 11            mov a, b
1323   0B00 26 04 00      mov b, $4
1324   0B03 56            add b, a
1325   0B04 E4            pop a
1326   0B05             ; END TERMS
1327   0B05 E7            pop d
1328   0B06 FD 43         mov [d], b
1329   0B08             ;; break; 
1330   0B08 0A ED 0B      jmp _switch20_exit ; case break
1331   0B0B             _switch20_case2:
1332   0B0B             _switch20_case3:
1333   0B0B             ;; i = scann(); 
1334   0B0B FA FA FF      lea d, [bp + -6] ; $i
1335   0B0E DA            push d
1336   0B0F 07 B9 14      call scann
1337   0B12 E7            pop d
1338   0B13 FD 43         mov [d], b
1339   0B15             ;; **(int **)p = i; 
1340   0B15 FA FF FF      lea d, [bp + -1] ; $p
1341   0B18 2A            mov b, [d]
1342   0B19 74            mov d, b
1343   0B1A 2A            mov b, [d]
1344   0B1B D8            push b
1345   0B1C FA FA FF      lea d, [bp + -6] ; $i
1346   0B1F 2A            mov b, [d]
1347   0B20 E7            pop d
1348   0B21 FD 43         mov [d], b
1349   0B23             ;; p = p + 2; 
1350   0B23 FA FF FF      lea d, [bp + -1] ; $p
1351   0B26 DA            push d
1352   0B27 FA FF FF      lea d, [bp + -1] ; $p
1353   0B2A 2A            mov b, [d]
1354   0B2B             ; START TERMS
1355   0B2B D7            push a
1356   0B2C 11            mov a, b
1357   0B2D 26 02 00      mov b, $2
1358   0B30 56            add b, a
1359   0B31 E4            pop a
1360   0B32             ; END TERMS
1361   0B32 E7            pop d
1362   0B33 FD 43         mov [d], b
1363   0B35             ;; break; 
1364   0B35 0A ED 0B      jmp _switch20_exit ; case break
1365   0B38             _switch20_case4:
1366   0B38             ;; i = scann(); 
1367   0B38 FA FA FF      lea d, [bp + -6] ; $i
1368   0B3B DA            push d
1369   0B3C 07 B9 14      call scann
1370   0B3F E7            pop d
1371   0B40 FD 43         mov [d], b
1372   0B42             ;; **(int **)p = i; 
1373   0B42 FA FF FF      lea d, [bp + -1] ; $p
1374   0B45 2A            mov b, [d]
1375   0B46 74            mov d, b
1376   0B47 2A            mov b, [d]
1377   0B48 D8            push b
1378   0B49 FA FA FF      lea d, [bp + -6] ; $i
1379   0B4C 2A            mov b, [d]
1380   0B4D E7            pop d
1381   0B4E FD 43         mov [d], b
1382   0B50             ;; p = p + 2; 
1383   0B50 FA FF FF      lea d, [bp + -1] ; $p
1384   0B53 DA            push d
1385   0B54 FA FF FF      lea d, [bp + -1] ; $p
1386   0B57 2A            mov b, [d]
1387   0B58             ; START TERMS
1388   0B58 D7            push a
1389   0B59 11            mov a, b
1390   0B5A 26 02 00      mov b, $2
1391   0B5D 56            add b, a
1392   0B5E E4            pop a
1393   0B5F             ; END TERMS
1394   0B5F E7            pop d
1395   0B60 FD 43         mov [d], b
1396   0B62             ;; break; 
1397   0B62 0A ED 0B      jmp _switch20_exit ; case break
1398   0B65             _switch20_case5:
1399   0B65             ;; p = p + 2; 
1400   0B65 FA FF FF      lea d, [bp + -1] ; $p
1401   0B68 DA            push d
1402   0B69 FA FF FF      lea d, [bp + -1] ; $p
1403   0B6C 2A            mov b, [d]
1404   0B6D             ; START TERMS
1405   0B6D D7            push a
1406   0B6E 11            mov a, b
1407   0B6F 26 02 00      mov b, $2
1408   0B72 56            add b, a
1409   0B73 E4            pop a
1410   0B74             ; END TERMS
1411   0B74 E7            pop d
1412   0B75 FD 43         mov [d], b
1413   0B77             ;; break; 
1414   0B77 0A ED 0B      jmp _switch20_exit ; case break
1415   0B7A             _switch20_case6:
1416   0B7A             ;; c = getchar(); 
1417   0B7A FA FC FF      lea d, [bp + -4] ; $c
1418   0B7D DA            push d
1419   0B7E 07 A6 14      call getchar
1420   0B81 E7            pop d
1421   0B82 FD 3E         mov [d], bl
1422   0B84             ;; **(char **)p = c; 
1423   0B84 FA FF FF      lea d, [bp + -1] ; $p
1424   0B87 2A            mov b, [d]
1425   0B88 74            mov d, b
1426   0B89 2A            mov b, [d]
1427   0B8A D8            push b
1428   0B8B FA FC FF      lea d, [bp + -4] ; $c
1429   0B8E 32            mov bl, [d]
1430   0B8F A7 00         mov bh, 0
1431   0B91 E7            pop d
1432   0B92 FD 43         mov [d], b
1433   0B94             ;; p = p + 2; 
1434   0B94 FA FF FF      lea d, [bp + -1] ; $p
1435   0B97 DA            push d
1436   0B98 FA FF FF      lea d, [bp + -1] ; $p
1437   0B9B 2A            mov b, [d]
1438   0B9C             ; START TERMS
1439   0B9C D7            push a
1440   0B9D 11            mov a, b
1441   0B9E 26 02 00      mov b, $2
1442   0BA1 56            add b, a
1443   0BA2 E4            pop a
1444   0BA3             ; END TERMS
1445   0BA3 E7            pop d
1446   0BA4 FD 43         mov [d], b
1447   0BA6             ;; break; 
1448   0BA6 0A ED 0B      jmp _switch20_exit ; case break
1449   0BA9             _switch20_case7:
1450   0BA9             ;; gets(input_string); 
1451   0BA9 FA FA FD      lea d, [bp + -518] ; $input_string
1452   0BAC 2D            mov b, d
1453   0BAD FD AB         swp b
1454   0BAF D8            push b
1455   0BB0 07 9A 0D      call gets
1456   0BB3 51 02 00      add sp, 2
1457   0BB6             ;; strcpy(*(char **)p, input_string); 
1458   0BB6 FA FA FD      lea d, [bp + -518] ; $input_string
1459   0BB9 2D            mov b, d
1460   0BBA FD AB         swp b
1461   0BBC D8            push b
1462   0BBD FA FF FF      lea d, [bp + -1] ; $p
1463   0BC0 2A            mov b, [d]
1464   0BC1 74            mov d, b
1465   0BC2 2A            mov b, [d]
1466   0BC3 FD AB         swp b
1467   0BC5 D8            push b
1468   0BC6 07 1E 04      call strcpy
1469   0BC9 51 04 00      add sp, 4
1470   0BCC             ;; p = p + 2; 
1471   0BCC FA FF FF      lea d, [bp + -1] ; $p
1472   0BCF DA            push d
1473   0BD0 FA FF FF      lea d, [bp + -1] ; $p
1474   0BD3 2A            mov b, [d]
1475   0BD4             ; START TERMS
1476   0BD4 D7            push a
1477   0BD5 11            mov a, b
1478   0BD6 26 02 00      mov b, $2
1479   0BD9 56            add b, a
1480   0BDA E4            pop a
1481   0BDB             ; END TERMS
1482   0BDB E7            pop d
1483   0BDC FD 43         mov [d], b
1484   0BDE             ;; break; 
1485   0BDE 0A ED 0B      jmp _switch20_exit ; case break
1486   0BE1             _switch20_default:
1487   0BE1             ;; print("Error: Unknown argument type.\n"); 
1488   0BE1 26 31 20      mov b, _s1 ; "Error: Unknown argument type.\n"
1489   0BE4 FD AB         swp b
1490   0BE6 D8            push b
1491   0BE7 07 DB 14      call print
1492   0BEA 51 02 00      add sp, 2
1493   0BED             _switch20_exit:
1494   0BED             ;; format_p++; 
1495   0BED FA FD FF      lea d, [bp + -3] ; $format_p
1496   0BF0 2A            mov b, [d]
1497   0BF1 FD 77         inc b
1498   0BF3 FA FD FF      lea d, [bp + -3] ; $format_p
1499   0BF6 FD 43         mov [d], b
1500   0BF8 FD 7D         dec b
1501   0BFA 0A 19 0C      jmp _if19_exit
1502   0BFD             _if19_else:
1503   0BFD             ;; putchar(*format_p); 
1504   0BFD FA FD FF      lea d, [bp + -3] ; $format_p
1505   0C00 2A            mov b, [d]
1506   0C01 74            mov d, b
1507   0C02 32            mov bl, [d]
1508   0C03 A7 00         mov bh, 0
1509   0C05 DD            push bl
1510   0C06 07 99 14      call putchar
1511   0C09 51 01 00      add sp, 1
1512   0C0C             ;; format_p++; 
1513   0C0C FA FD FF      lea d, [bp + -3] ; $format_p
1514   0C0F 2A            mov b, [d]
1515   0C10 FD 77         inc b
1516   0C12 FA FD FF      lea d, [bp + -3] ; $format_p
1517   0C15 FD 43         mov [d], b
1518   0C17 FD 7D         dec b
1519   0C19             _if19_exit:
1520   0C19             _if18_exit:
1521   0C19             _for17_update:
1522   0C19 0A 06 0A      jmp _for17_cond
1523   0C1C             _for17_exit:
1524   0C1C F9            leave
1525   0C1D 09            ret
1526   0C1E             
1527   0C1E             err:
1528   0C1E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1529   0C21             ;; print(e); 
1530   0C21 FA 05 00      lea d, [bp + 5] ; $e
1531   0C24 2A            mov b, [d]
1532   0C25 FD AB         swp b
1533   0C27 D8            push b
1534   0C28 07 DB 14      call print
1535   0C2B 51 02 00      add sp, 2
1536   0C2E F9            leave
1537   0C2F 09            ret
1538   0C30             
1539   0C30             printx32:
1540   0C30 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1541   0C33             
1542   0C33             ; --- BEGIN INLINE ASM BLOCK
1543   0C33 FA 05 00      lea d, [bp + 5] ; $hex
1544   0C36 2B 02 00      mov b, [d+2]
1545   0C39 07 C3 17      call print_u16x
1546   0C3C 2A            mov b, [d]
1547   0C3D 07 C3 17      call print_u16x
1548   0C40             ; --- END INLINE ASM BLOCK
1549   0C40             
1550   0C40 F9            leave
1551   0C41 09            ret
1552   0C42             
1553   0C42             printx16:
1554   0C42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1555   0C45             
1556   0C45             ; --- BEGIN INLINE ASM BLOCK
1557   0C45 FA 05 00      lea d, [bp + 5] ; $hex
1558   0C48 2A            mov b, [d]
1559   0C49 07 C3 17      call print_u16x
1560   0C4C             ; --- END INLINE ASM BLOCK
1561   0C4C             
1562   0C4C F9            leave
1563   0C4D 09            ret
1564   0C4E             
1565   0C4E             printx8:
1566   0C4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1567   0C51             
1568   0C51             ; --- BEGIN INLINE ASM BLOCK
1569   0C51 FA 05 00      lea d, [bp + 5] ; $hex
1570   0C54 32            mov bl, [d]
1571   0C55 07 07 18      call print_u8x
1572   0C58             ; --- END INLINE ASM BLOCK
1573   0C58             
1574   0C58 F9            leave
1575   0C59 09            ret
1576   0C5A             
1577   0C5A             hex_str_to_int:
1578   0C5A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1579   0C5D             ;; int value = 0; 
1580   0C5D             ; $value 
1581   0C5D 10 00 00      mov a, $0
1582   0C60 45 FF FF      mov [bp + -1], a
1583   0C63             ;; int i; 
1584   0C63             ; $i 
1585   0C63             ;; char hex_char; 
1586   0C63             ; $hex_char 
1587   0C63             ;; int len; 
1588   0C63             ; $len 
1589   0C63             ;; len = strlen(hex_string); 
1590   0C63 FA FA FF      lea d, [bp + -6] ; $len
1591   0C66 DA            push d
1592   0C67 FA 05 00      lea d, [bp + 5] ; $hex_string
1593   0C6A 2A            mov b, [d]
1594   0C6B FD AB         swp b
1595   0C6D D8            push b
1596   0C6E 07 8C 05      call strlen
1597   0C71 51 02 00      add sp, 2
1598   0C74 E7            pop d
1599   0C75 FD 43         mov [d], b
1600   0C77             ;; for (i = 0; i < len; i++) { 
1601   0C77             _for24_init:
1602   0C77 FA FD FF      lea d, [bp + -3] ; $i
1603   0C7A DA            push d
1604   0C7B 26 00 00      mov b, $0
1605   0C7E E7            pop d
1606   0C7F FD 43         mov [d], b
1607   0C81             _for24_cond:
1608   0C81 FA FD FF      lea d, [bp + -3] ; $i
1609   0C84 2A            mov b, [d]
1610   0C85             ; START RELATIONAL
1611   0C85 D7            push a
1612   0C86 11            mov a, b
1613   0C87 FA FA FF      lea d, [bp + -6] ; $len
1614   0C8A 2A            mov b, [d]
1615   0C8B B0            cmp a, b
1616   0C8C FD 73         slt ; < (signed)
1617   0C8E E4            pop a
1618   0C8F             ; END RELATIONAL
1619   0C8F C0 00 00      cmp b, 0
1620   0C92 C6 94 0D      je _for24_exit
1621   0C95             _for24_block:
1622   0C95             ;; hex_char = hex_string[i]; 
1623   0C95 FA FC FF      lea d, [bp + -4] ; $hex_char
1624   0C98 DA            push d
1625   0C99 FA 05 00      lea d, [bp + 5] ; $hex_string
1626   0C9C FD 2A         mov d, [d]
1627   0C9E D7            push a
1628   0C9F DA            push d
1629   0CA0 FA FD FF      lea d, [bp + -3] ; $i
1630   0CA3 2A            mov b, [d]
1631   0CA4 E7            pop d
1632   0CA5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1633   0CA9 E4            pop a
1634   0CAA 32            mov bl, [d]
1635   0CAB A7 00         mov bh, 0
1636   0CAD E7            pop d
1637   0CAE FD 3E         mov [d], bl
1638   0CB0             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1639   0CB0             _if25_cond:
1640   0CB0 FA FC FF      lea d, [bp + -4] ; $hex_char
1641   0CB3 32            mov bl, [d]
1642   0CB4 A7 00         mov bh, 0
1643   0CB6             ; START RELATIONAL
1644   0CB6 D7            push a
1645   0CB7 11            mov a, b
1646   0CB8 26 61 00      mov b, $61
1647   0CBB B0            cmp a, b
1648   0CBC FD 80         sge ; >=
1649   0CBE E4            pop a
1650   0CBF             ; END RELATIONAL
1651   0CBF             ; START LOGICAL AND
1652   0CBF D7            push a
1653   0CC0 11            mov a, b
1654   0CC1 FA FC FF      lea d, [bp + -4] ; $hex_char
1655   0CC4 32            mov bl, [d]
1656   0CC5 A7 00         mov bh, 0
1657   0CC7             ; START RELATIONAL
1658   0CC7 D7            push a
1659   0CC8 11            mov a, b
1660   0CC9 26 66 00      mov b, $66
1661   0CCC B0            cmp a, b
1662   0CCD FD 73         slt ; <= (signed)
1663   0CCF E4            pop a
1664   0CD0             ; END RELATIONAL
1665   0CD0 FD A7         sand a, b
1666   0CD2 E4            pop a
1667   0CD3             ; END LOGICAL AND
1668   0CD3 C0 00 00      cmp b, 0
1669   0CD6 C6 07 0D      je _if25_else
1670   0CD9             _if25_true:
1671   0CD9             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1672   0CD9 FA FF FF      lea d, [bp + -1] ; $value
1673   0CDC DA            push d
1674   0CDD FA FF FF      lea d, [bp + -1] ; $value
1675   0CE0 2A            mov b, [d]
1676   0CE1             ; START FACTORS
1677   0CE1 D7            push a
1678   0CE2 11            mov a, b
1679   0CE3 26 10 00      mov b, $10
1680   0CE6 AC            mul a, b ; *
1681   0CE7 11            mov a, b
1682   0CE8 27            mov b, a
1683   0CE9 E4            pop a
1684   0CEA             ; END FACTORS
1685   0CEA             ; START TERMS
1686   0CEA D7            push a
1687   0CEB 11            mov a, b
1688   0CEC FA FC FF      lea d, [bp + -4] ; $hex_char
1689   0CEF 32            mov bl, [d]
1690   0CF0 A7 00         mov bh, 0
1691   0CF2             ; START TERMS
1692   0CF2 D7            push a
1693   0CF3 11            mov a, b
1694   0CF4 26 61 00      mov b, $61
1695   0CF7 60            sub a, b
1696   0CF8 27            mov b, a
1697   0CF9 11            mov a, b
1698   0CFA 26 0A 00      mov b, $a
1699   0CFD 56            add b, a
1700   0CFE E4            pop a
1701   0CFF             ; END TERMS
1702   0CFF 56            add b, a
1703   0D00 E4            pop a
1704   0D01             ; END TERMS
1705   0D01 E7            pop d
1706   0D02 FD 43         mov [d], b
1707   0D04 0A 84 0D      jmp _if25_exit
1708   0D07             _if25_else:
1709   0D07             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1710   0D07             _if26_cond:
1711   0D07 FA FC FF      lea d, [bp + -4] ; $hex_char
1712   0D0A 32            mov bl, [d]
1713   0D0B A7 00         mov bh, 0
1714   0D0D             ; START RELATIONAL
1715   0D0D D7            push a
1716   0D0E 11            mov a, b
1717   0D0F 26 41 00      mov b, $41
1718   0D12 B0            cmp a, b
1719   0D13 FD 80         sge ; >=
1720   0D15 E4            pop a
1721   0D16             ; END RELATIONAL
1722   0D16             ; START LOGICAL AND
1723   0D16 D7            push a
1724   0D17 11            mov a, b
1725   0D18 FA FC FF      lea d, [bp + -4] ; $hex_char
1726   0D1B 32            mov bl, [d]
1727   0D1C A7 00         mov bh, 0
1728   0D1E             ; START RELATIONAL
1729   0D1E D7            push a
1730   0D1F 11            mov a, b
1731   0D20 26 46 00      mov b, $46
1732   0D23 B0            cmp a, b
1733   0D24 FD 73         slt ; <= (signed)
1734   0D26 E4            pop a
1735   0D27             ; END RELATIONAL
1736   0D27 FD A7         sand a, b
1737   0D29 E4            pop a
1738   0D2A             ; END LOGICAL AND
1739   0D2A C0 00 00      cmp b, 0
1740   0D2D C6 5E 0D      je _if26_else
1741   0D30             _if26_true:
1742   0D30             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1743   0D30 FA FF FF      lea d, [bp + -1] ; $value
1744   0D33 DA            push d
1745   0D34 FA FF FF      lea d, [bp + -1] ; $value
1746   0D37 2A            mov b, [d]
1747   0D38             ; START FACTORS
1748   0D38 D7            push a
1749   0D39 11            mov a, b
1750   0D3A 26 10 00      mov b, $10
1751   0D3D AC            mul a, b ; *
1752   0D3E 11            mov a, b
1753   0D3F 27            mov b, a
1754   0D40 E4            pop a
1755   0D41             ; END FACTORS
1756   0D41             ; START TERMS
1757   0D41 D7            push a
1758   0D42 11            mov a, b
1759   0D43 FA FC FF      lea d, [bp + -4] ; $hex_char
1760   0D46 32            mov bl, [d]
1761   0D47 A7 00         mov bh, 0
1762   0D49             ; START TERMS
1763   0D49 D7            push a
1764   0D4A 11            mov a, b
1765   0D4B 26 41 00      mov b, $41
1766   0D4E 60            sub a, b
1767   0D4F 27            mov b, a
1768   0D50 11            mov a, b
1769   0D51 26 0A 00      mov b, $a
1770   0D54 56            add b, a
1771   0D55 E4            pop a
1772   0D56             ; END TERMS
1773   0D56 56            add b, a
1774   0D57 E4            pop a
1775   0D58             ; END TERMS
1776   0D58 E7            pop d
1777   0D59 FD 43         mov [d], b
1778   0D5B 0A 84 0D      jmp _if26_exit
1779   0D5E             _if26_else:
1780   0D5E             ;; value = (value * 16) + (hex_char - '0'); 
1781   0D5E FA FF FF      lea d, [bp + -1] ; $value
1782   0D61 DA            push d
1783   0D62 FA FF FF      lea d, [bp + -1] ; $value
1784   0D65 2A            mov b, [d]
1785   0D66             ; START FACTORS
1786   0D66 D7            push a
1787   0D67 11            mov a, b
1788   0D68 26 10 00      mov b, $10
1789   0D6B AC            mul a, b ; *
1790   0D6C 11            mov a, b
1791   0D6D 27            mov b, a
1792   0D6E E4            pop a
1793   0D6F             ; END FACTORS
1794   0D6F             ; START TERMS
1795   0D6F D7            push a
1796   0D70 11            mov a, b
1797   0D71 FA FC FF      lea d, [bp + -4] ; $hex_char
1798   0D74 32            mov bl, [d]
1799   0D75 A7 00         mov bh, 0
1800   0D77             ; START TERMS
1801   0D77 D7            push a
1802   0D78 11            mov a, b
1803   0D79 26 30 00      mov b, $30
1804   0D7C 60            sub a, b
1805   0D7D 27            mov b, a
1806   0D7E E4            pop a
1807   0D7F             ; END TERMS
1808   0D7F 56            add b, a
1809   0D80 E4            pop a
1810   0D81             ; END TERMS
1811   0D81 E7            pop d
1812   0D82 FD 43         mov [d], b
1813   0D84             _if26_exit:
1814   0D84             _if25_exit:
1815   0D84             _for24_update:
1816   0D84 FA FD FF      lea d, [bp + -3] ; $i
1817   0D87 2A            mov b, [d]
1818   0D88 FD 77         inc b
1819   0D8A FA FD FF      lea d, [bp + -3] ; $i
1820   0D8D FD 43         mov [d], b
1821   0D8F FD 7D         dec b
1822   0D91 0A 81 0C      jmp _for24_cond
1823   0D94             _for24_exit:
1824   0D94             ;; return value; 
1825   0D94 FA FF FF      lea d, [bp + -1] ; $value
1826   0D97 2A            mov b, [d]
1827   0D98 F9            leave
1828   0D99 09            ret
1829   0D9A             
1830   0D9A             gets:
1831   0D9A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1832   0D9D             
1833   0D9D             ; --- BEGIN INLINE ASM BLOCK
1834   0D9D FA 05 00      lea d, [bp + 5] ; $s
1835   0DA0 15            mov a, [d]
1836   0DA1 3C            mov d, a
1837   0DA2 07 28 16      call _gets
1838   0DA5             ; --- END INLINE ASM BLOCK
1839   0DA5             
1840   0DA5             ;; return strlen(s); 
1841   0DA5 FA 05 00      lea d, [bp + 5] ; $s
1842   0DA8 2A            mov b, [d]
1843   0DA9 FD AB         swp b
1844   0DAB D8            push b
1845   0DAC 07 8C 05      call strlen
1846   0DAF 51 02 00      add sp, 2
1847   0DB2 F9            leave
1848   0DB3 09            ret
1849   0DB4             
1850   0DB4             print_signed:
1851   0DB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1852   0DB7             ;; char digits[5]; 
1853   0DB7             ; $digits 
1854   0DB7             ;; int i = 0; 
1855   0DB7             ; $i 
1856   0DB7 10 00 00      mov a, $0
1857   0DBA 45 FA FF      mov [bp + -6], a
1858   0DBD             ;; if (num < 0) { 
1859   0DBD             _if27_cond:
1860   0DBD FA 05 00      lea d, [bp + 5] ; $num
1861   0DC0 2A            mov b, [d]
1862   0DC1             ; START RELATIONAL
1863   0DC1 D7            push a
1864   0DC2 11            mov a, b
1865   0DC3 26 00 00      mov b, $0
1866   0DC6 B0            cmp a, b
1867   0DC7 FD 73         slt ; < (signed)
1868   0DC9 E4            pop a
1869   0DCA             ; END RELATIONAL
1870   0DCA C0 00 00      cmp b, 0
1871   0DCD C6 EA 0D      je _if27_else
1872   0DD0             _if27_true:
1873   0DD0             ;; putchar('-'); 
1874   0DD0 26 2D 00      mov b, $2d
1875   0DD3 DD            push bl
1876   0DD4 07 99 14      call putchar
1877   0DD7 51 01 00      add sp, 1
1878   0DDA             ;; num = -num; 
1879   0DDA FA 05 00      lea d, [bp + 5] ; $num
1880   0DDD DA            push d
1881   0DDE FA 05 00      lea d, [bp + 5] ; $num
1882   0DE1 2A            mov b, [d]
1883   0DE2 FD 97         neg b
1884   0DE4 E7            pop d
1885   0DE5 FD 43         mov [d], b
1886   0DE7 0A 0C 0E      jmp _if27_exit
1887   0DEA             _if27_else:
1888   0DEA             ;; if (num == 0) { 
1889   0DEA             _if28_cond:
1890   0DEA FA 05 00      lea d, [bp + 5] ; $num
1891   0DED 2A            mov b, [d]
1892   0DEE             ; START RELATIONAL
1893   0DEE D7            push a
1894   0DEF 11            mov a, b
1895   0DF0 26 00 00      mov b, $0
1896   0DF3 B0            cmp a, b
1897   0DF4 FD 71         seq ; ==
1898   0DF6 E4            pop a
1899   0DF7             ; END RELATIONAL
1900   0DF7 C0 00 00      cmp b, 0
1901   0DFA C6 0C 0E      je _if28_exit
1902   0DFD             _if28_true:
1903   0DFD             ;; putchar('0'); 
1904   0DFD 26 30 00      mov b, $30
1905   0E00 DD            push bl
1906   0E01 07 99 14      call putchar
1907   0E04 51 01 00      add sp, 1
1908   0E07             ;; return; 
1909   0E07 F9            leave
1910   0E08 09            ret
1911   0E09 0A 0C 0E      jmp _if28_exit
1912   0E0C             _if28_exit:
1913   0E0C             _if27_exit:
1914   0E0C             ;; while (num > 0) { 
1915   0E0C             _while29_cond:
1916   0E0C FA 05 00      lea d, [bp + 5] ; $num
1917   0E0F 2A            mov b, [d]
1918   0E10             ; START RELATIONAL
1919   0E10 D7            push a
1920   0E11 11            mov a, b
1921   0E12 26 00 00      mov b, $0
1922   0E15 B0            cmp a, b
1923   0E16 FD 7F         sgt ; >
1924   0E18 E4            pop a
1925   0E19             ; END RELATIONAL
1926   0E19 C0 00 00      cmp b, 0
1927   0E1C C6 66 0E      je _while29_exit
1928   0E1F             _while29_block:
1929   0E1F             ;; digits[i] = '0' + (num % 10); 
1930   0E1F FA FC FF      lea d, [bp + -4] ; $digits
1931   0E22 D7            push a
1932   0E23 DA            push d
1933   0E24 FA FA FF      lea d, [bp + -6] ; $i
1934   0E27 2A            mov b, [d]
1935   0E28 E7            pop d
1936   0E29 5A            add d, b
1937   0E2A E4            pop a
1938   0E2B DA            push d
1939   0E2C 26 30 00      mov b, $30
1940   0E2F             ; START TERMS
1941   0E2F D7            push a
1942   0E30 11            mov a, b
1943   0E31 FA 05 00      lea d, [bp + 5] ; $num
1944   0E34 2A            mov b, [d]
1945   0E35             ; START FACTORS
1946   0E35 D7            push a
1947   0E36 11            mov a, b
1948   0E37 26 0A 00      mov b, $a
1949   0E3A AE            div a, b ; 
1950   0E3B 11            mov a, b
1951   0E3C 27            mov b, a
1952   0E3D E4            pop a
1953   0E3E             ; END FACTORS
1954   0E3E 56            add b, a
1955   0E3F E4            pop a
1956   0E40             ; END TERMS
1957   0E40 E7            pop d
1958   0E41 FD 3E         mov [d], bl
1959   0E43             ;; num = num / 10; 
1960   0E43 FA 05 00      lea d, [bp + 5] ; $num
1961   0E46 DA            push d
1962   0E47 FA 05 00      lea d, [bp + 5] ; $num
1963   0E4A 2A            mov b, [d]
1964   0E4B             ; START FACTORS
1965   0E4B D7            push a
1966   0E4C 11            mov a, b
1967   0E4D 26 0A 00      mov b, $a
1968   0E50 AE            div a, b
1969   0E51 27            mov b, a
1970   0E52 E4            pop a
1971   0E53             ; END FACTORS
1972   0E53 E7            pop d
1973   0E54 FD 43         mov [d], b
1974   0E56             ;; i++; 
1975   0E56 FA FA FF      lea d, [bp + -6] ; $i
1976   0E59 2A            mov b, [d]
1977   0E5A FD 77         inc b
1978   0E5C FA FA FF      lea d, [bp + -6] ; $i
1979   0E5F FD 43         mov [d], b
1980   0E61 FD 7D         dec b
1981   0E63 0A 0C 0E      jmp _while29_cond
1982   0E66             _while29_exit:
1983   0E66             ;; while (i > 0) { 
1984   0E66             _while30_cond:
1985   0E66 FA FA FF      lea d, [bp + -6] ; $i
1986   0E69 2A            mov b, [d]
1987   0E6A             ; START RELATIONAL
1988   0E6A D7            push a
1989   0E6B 11            mov a, b
1990   0E6C 26 00 00      mov b, $0
1991   0E6F B0            cmp a, b
1992   0E70 FD 7F         sgt ; >
1993   0E72 E4            pop a
1994   0E73             ; END RELATIONAL
1995   0E73 C0 00 00      cmp b, 0
1996   0E76 C6 9F 0E      je _while30_exit
1997   0E79             _while30_block:
1998   0E79             ;; i--; 
1999   0E79 FA FA FF      lea d, [bp + -6] ; $i
2000   0E7C 2A            mov b, [d]
2001   0E7D FD 7D         dec b
2002   0E7F FA FA FF      lea d, [bp + -6] ; $i
2003   0E82 FD 43         mov [d], b
2004   0E84 FD 77         inc b
2005   0E86             ;; putchar(digits[i]); 
2006   0E86 FA FC FF      lea d, [bp + -4] ; $digits
2007   0E89 D7            push a
2008   0E8A DA            push d
2009   0E8B FA FA FF      lea d, [bp + -6] ; $i
2010   0E8E 2A            mov b, [d]
2011   0E8F E7            pop d
2012   0E90 5A            add d, b
2013   0E91 E4            pop a
2014   0E92 32            mov bl, [d]
2015   0E93 A7 00         mov bh, 0
2016   0E95 DD            push bl
2017   0E96 07 99 14      call putchar
2018   0E99 51 01 00      add sp, 1
2019   0E9C 0A 66 0E      jmp _while30_cond
2020   0E9F             _while30_exit:
2021   0E9F F9            leave
2022   0EA0 09            ret
2023   0EA1             
2024   0EA1             print_signed_long:
2025   0EA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2026   0EA4             ;; char digits[10]; 
2027   0EA4             ; $digits 
2028   0EA4             ;; int i = 0; 
2029   0EA4             ; $i 
2030   0EA4 10 00 00      mov a, $0
2031   0EA7 45 F5 FF      mov [bp + -11], a
2032   0EAA             ;; if (num < 0) { 
2033   0EAA             _if31_cond:
2034   0EAA FA 05 00      lea d, [bp + 5] ; $num
2035   0EAD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2036   0EB0 FD 39         mov c, b ; And place it into C
2037   0EB2 2A            mov b, [d] ; Lower Word in B
2038   0EB3             ; START RELATIONAL
2039   0EB3 D7            push a
2040   0EB4 FD D8         push g
2041   0EB6 11            mov a, b
2042   0EB7 FD 7A         mov g, c
2043   0EB9 26 00 00      mov b, $0
2044   0EBC 38 00 00      mov c, 0
2045   0EBF FD AF 00 00   cmp32 ga, cb
2045   0EC3 00 00 00 00 
2045   0EC7 00 00 00 00 
2045   0ECB 00 00 00 00 
2045   0ECF 00 00 00 00 
2045   0ED3 00 00 00 00 
2045   0ED7 00 00 00 00 
2045   0EDB 00 00 00 00 
2045   0EDF 00 00 00 00 
2045   0EE3 00 00 00 00 
2045   0EE7 00 00 00 00 
2045   0EEB 00 00 00 00 
2045   0EEF 00 00 00 00 
2045   0EF3 00 00 00 00 
2045   0EF7 00 00 00 00 
2045   0EFB 00 00 00 00 
2045   0EFF 00 00 00 00 
2045   0F03 00 00 00 00 
2045   0F07 00 00 00 00 
2045   0F0B 00 00 00 00 
2045   0F0F 00 00 00 00 
2045   0F13 00 00 00 00 
2045   0F17 00 00 00 00 
2045   0F1B 00 00 00 00 
2045   0F1F 00 00 00 00 
2045   0F23 00 00 00 00 
2045   0F27 00 00 00 00 
2045   0F2B 00 00 00 00 
2045   0F2F 00 00 00 00 
2045   0F33 00 00 00 00 
2045   0F37 00 00 00 00 
2045   0F3B 00 00 00 00 
2045   0F3F 00 00 00 00 
2045   0F43 00 00 00 00 
2045   0F47 00 00 00 00 
2045   0F4B 00 00 00 00 
2045   0F4F 00 00 00 00 
2045   0F53 00 00 00 00 
2045   0F57 00 00 00 00 
2045   0F5B 00 00 00 00 
2045   0F5F 00 00 00 00 
2045   0F63 00 00 00 00 
2045   0F67 00 00 00 00 
2045   0F6B 00 00 00 00 
2045   0F6F 00 00 00 00 
2045   0F73 00 00 00 00 
2045   0F77 00 00 00 00 
2045   0F7B 00 00 00 00 
2045   0F7F 00 00 00 00 
2045   0F83 00 00 00 00 
2045   0F87 00 00 00 00 
2045   0F8B 00 00 00 00 
2045   0F8F 00 00 00 00 
2045   0F93 00 00 00 00 
2045   0F97 00 00 00 00 
2045   0F9B 00 00 00 00 
2045   0F9F 00 00 00 00 
2045   0FA3 00 00 00 00 
2045   0FA7 00 00 00 00 
2045   0FAB 00 00 00 00 
2045   0FAF 00 00 00 00 
2045   0FB3 00 00 00 00 
2045   0FB7 00 00 00 00 
2045   0FBB 00 00 00 00 
2045   0FBF 00 
2046   0FC0 FD 73         slt ; <
2047   0FC2 FD F1         pop g
2048   0FC4 E4            pop a
2049   0FC5             ; END RELATIONAL
2050   0FC5 C0 00 00      cmp b, 0
2051   0FC8 C6 EF 0F      je _if31_else
2052   0FCB             _if31_true:
2053   0FCB             ;; putchar('-'); 
2054   0FCB 26 2D 00      mov b, $2d
2055   0FCE DD            push bl
2056   0FCF 07 99 14      call putchar
2057   0FD2 51 01 00      add sp, 1
2058   0FD5             ;; num = -num; 
2059   0FD5 FA 05 00      lea d, [bp + 5] ; $num
2060   0FD8 DA            push d
2061   0FD9 FA 05 00      lea d, [bp + 5] ; $num
2062   0FDC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2063   0FDF FD 39         mov c, b ; And place it into C
2064   0FE1 2A            mov b, [d] ; Lower Word in B
2065   0FE2 FD 97         neg b
2066   0FE4 E7            pop d
2067   0FE5 FD 43         mov [d], b
2068   0FE7 28            mov b, c
2069   0FE8 FD 44 02 00   mov [d + 2], b
2070   0FEC 0A 1F 11      jmp _if31_exit
2071   0FEF             _if31_else:
2072   0FEF             ;; if (num == 0) { 
2073   0FEF             _if32_cond:
2074   0FEF FA 05 00      lea d, [bp + 5] ; $num
2075   0FF2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2076   0FF5 FD 39         mov c, b ; And place it into C
2077   0FF7 2A            mov b, [d] ; Lower Word in B
2078   0FF8             ; START RELATIONAL
2079   0FF8 D7            push a
2080   0FF9 FD D8         push g
2081   0FFB 11            mov a, b
2082   0FFC FD 7A         mov g, c
2083   0FFE 26 00 00      mov b, $0
2084   1001 38 00 00      mov c, 0
2085   1004 FD AF 00 00   cmp32 ga, cb
2085   1008 00 00 00 00 
2085   100C 00 00 00 00 
2085   1010 00 00 00 00 
2085   1014 00 00 00 00 
2085   1018 00 00 00 00 
2085   101C 00 00 00 00 
2085   1020 00 00 00 00 
2085   1024 00 00 00 00 
2085   1028 00 00 00 00 
2085   102C 00 00 00 00 
2085   1030 00 00 00 00 
2085   1034 00 00 00 00 
2085   1038 00 00 00 00 
2085   103C 00 00 00 00 
2085   1040 00 00 00 00 
2085   1044 00 00 00 00 
2085   1048 00 00 00 00 
2085   104C 00 00 00 00 
2085   1050 00 00 00 00 
2085   1054 00 00 00 00 
2085   1058 00 00 00 00 
2085   105C 00 00 00 00 
2085   1060 00 00 00 00 
2085   1064 00 00 00 00 
2085   1068 00 00 00 00 
2085   106C 00 00 00 00 
2085   1070 00 00 00 00 
2085   1074 00 00 00 00 
2085   1078 00 00 00 00 
2085   107C 00 00 00 00 
2085   1080 00 00 00 00 
2085   1084 00 00 00 00 
2085   1088 00 00 00 00 
2085   108C 00 00 00 00 
2085   1090 00 00 00 00 
2085   1094 00 00 00 00 
2085   1098 00 00 00 00 
2085   109C 00 00 00 00 
2085   10A0 00 00 00 00 
2085   10A4 00 00 00 00 
2085   10A8 00 00 00 00 
2085   10AC 00 00 00 00 
2085   10B0 00 00 00 00 
2085   10B4 00 00 00 00 
2085   10B8 00 00 00 00 
2085   10BC 00 00 00 00 
2085   10C0 00 00 00 00 
2085   10C4 00 00 00 00 
2085   10C8 00 00 00 00 
2085   10CC 00 00 00 00 
2085   10D0 00 00 00 00 
2085   10D4 00 00 00 00 
2085   10D8 00 00 00 00 
2085   10DC 00 00 00 00 
2085   10E0 00 00 00 00 
2085   10E4 00 00 00 00 
2085   10E8 00 00 00 00 
2085   10EC 00 00 00 00 
2085   10F0 00 00 00 00 
2085   10F4 00 00 00 00 
2085   10F8 00 00 00 00 
2085   10FC 00 00 00 00 
2085   1100 00 00 00 00 
2085   1104 00 
2086   1105 FD 71         seq ; ==
2087   1107 FD F1         pop g
2088   1109 E4            pop a
2089   110A             ; END RELATIONAL
2090   110A C0 00 00      cmp b, 0
2091   110D C6 1F 11      je _if32_exit
2092   1110             _if32_true:
2093   1110             ;; putchar('0'); 
2094   1110 26 30 00      mov b, $30
2095   1113 DD            push bl
2096   1114 07 99 14      call putchar
2097   1117 51 01 00      add sp, 1
2098   111A             ;; return; 
2099   111A F9            leave
2100   111B 09            ret
2101   111C 0A 1F 11      jmp _if32_exit
2102   111F             _if32_exit:
2103   111F             _if31_exit:
2104   111F             ;; while (num > 0) { 
2105   111F             _while33_cond:
2106   111F FA 05 00      lea d, [bp + 5] ; $num
2107   1122 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2108   1125 FD 39         mov c, b ; And place it into C
2109   1127 2A            mov b, [d] ; Lower Word in B
2110   1128             ; START RELATIONAL
2111   1128 D7            push a
2112   1129 FD D8         push g
2113   112B 11            mov a, b
2114   112C FD 7A         mov g, c
2115   112E 26 00 00      mov b, $0
2116   1131 38 00 00      mov c, 0
2117   1134 FD 7F         sgt
2118   1136 FD F1         pop g
2119   1138 E4            pop a
2120   1139             ; END RELATIONAL
2121   1139 C0 00 00      cmp b, 0
2122   113C C6 9C 11      je _while33_exit
2123   113F             _while33_block:
2124   113F             ;; digits[i] = '0' + (num % 10); 
2125   113F FA F7 FF      lea d, [bp + -9] ; $digits
2126   1142 D7            push a
2127   1143 DA            push d
2128   1144 FA F5 FF      lea d, [bp + -11] ; $i
2129   1147 2A            mov b, [d]
2130   1148 E7            pop d
2131   1149 5A            add d, b
2132   114A E4            pop a
2133   114B DA            push d
2134   114C 26 30 00      mov b, $30
2135   114F             ; START TERMS
2136   114F D7            push a
2137   1150 11            mov a, b
2138   1151 FA 05 00      lea d, [bp + 5] ; $num
2139   1154 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2140   1157 FD 39         mov c, b ; And place it into C
2141   1159 2A            mov b, [d] ; Lower Word in B
2142   115A             ; START FACTORS
2143   115A D7            push a
2144   115B 11            mov a, b
2145   115C 26 0A 00      mov b, $a
2146   115F AE            div a, b ; 
2147   1160 11            mov a, b
2148   1161 27            mov b, a
2149   1162 E4            pop a
2150   1163             ; END FACTORS
2151   1163 54            add a, b
2152   1164 D7            push a
2153   1165 FD 12         mov a, g
2154   1167 28            mov b, c
2155   1168 5C            adc a, b
2156   1169 39            mov c, a
2157   116A E5            pop b
2158   116B E4            pop a
2159   116C             ; END TERMS
2160   116C E7            pop d
2161   116D FD 3E         mov [d], bl
2162   116F             ;; num = num / 10; 
2163   116F FA 05 00      lea d, [bp + 5] ; $num
2164   1172 DA            push d
2165   1173 FA 05 00      lea d, [bp + 5] ; $num
2166   1176 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2167   1179 FD 39         mov c, b ; And place it into C
2168   117B 2A            mov b, [d] ; Lower Word in B
2169   117C             ; START FACTORS
2170   117C D7            push a
2171   117D 11            mov a, b
2172   117E 26 0A 00      mov b, $a
2173   1181 AE            div a, b
2174   1182 27            mov b, a
2175   1183 E4            pop a
2176   1184             ; END FACTORS
2177   1184 E7            pop d
2178   1185 FD 43         mov [d], b
2179   1187 28            mov b, c
2180   1188 FD 44 02 00   mov [d + 2], b
2181   118C             ;; i++; 
2182   118C FA F5 FF      lea d, [bp + -11] ; $i
2183   118F 2A            mov b, [d]
2184   1190 FD 77         inc b
2185   1192 FA F5 FF      lea d, [bp + -11] ; $i
2186   1195 FD 43         mov [d], b
2187   1197 FD 7D         dec b
2188   1199 0A 1F 11      jmp _while33_cond
2189   119C             _while33_exit:
2190   119C             ;; while (i > 0) { 
2191   119C             _while34_cond:
2192   119C FA F5 FF      lea d, [bp + -11] ; $i
2193   119F 2A            mov b, [d]
2194   11A0             ; START RELATIONAL
2195   11A0 D7            push a
2196   11A1 11            mov a, b
2197   11A2 26 00 00      mov b, $0
2198   11A5 B0            cmp a, b
2199   11A6 FD 7F         sgt ; >
2200   11A8 E4            pop a
2201   11A9             ; END RELATIONAL
2202   11A9 C0 00 00      cmp b, 0
2203   11AC C6 D5 11      je _while34_exit
2204   11AF             _while34_block:
2205   11AF             ;; i--; 
2206   11AF FA F5 FF      lea d, [bp + -11] ; $i
2207   11B2 2A            mov b, [d]
2208   11B3 FD 7D         dec b
2209   11B5 FA F5 FF      lea d, [bp + -11] ; $i
2210   11B8 FD 43         mov [d], b
2211   11BA FD 77         inc b
2212   11BC             ;; putchar(digits[i]); 
2213   11BC FA F7 FF      lea d, [bp + -9] ; $digits
2214   11BF D7            push a
2215   11C0 DA            push d
2216   11C1 FA F5 FF      lea d, [bp + -11] ; $i
2217   11C4 2A            mov b, [d]
2218   11C5 E7            pop d
2219   11C6 5A            add d, b
2220   11C7 E4            pop a
2221   11C8 32            mov bl, [d]
2222   11C9 A7 00         mov bh, 0
2223   11CB DD            push bl
2224   11CC 07 99 14      call putchar
2225   11CF 51 01 00      add sp, 1
2226   11D2 0A 9C 11      jmp _while34_cond
2227   11D5             _while34_exit:
2228   11D5 F9            leave
2229   11D6 09            ret
2230   11D7             
2231   11D7             print_unsigned_long:
2232   11D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2233   11DA             ;; char digits[10]; 
2234   11DA             ; $digits 
2235   11DA             ;; int i; 
2236   11DA             ; $i 
2237   11DA             ;; i = 0; 
2238   11DA FA F5 FF      lea d, [bp + -11] ; $i
2239   11DD DA            push d
2240   11DE 26 00 00      mov b, $0
2241   11E1 E7            pop d
2242   11E2 FD 43         mov [d], b
2243   11E4             ;; if(num == 0){ 
2244   11E4             _if35_cond:
2245   11E4 FA 05 00      lea d, [bp + 5] ; $num
2246   11E7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2247   11EA FD 39         mov c, b ; And place it into C
2248   11EC 2A            mov b, [d] ; Lower Word in B
2249   11ED             ; START RELATIONAL
2250   11ED D7            push a
2251   11EE FD D8         push g
2252   11F0 11            mov a, b
2253   11F1 FD 7A         mov g, c
2254   11F3 26 00 00      mov b, $0
2255   11F6 38 00 00      mov c, 0
2256   11F9 FD AF 00 00   cmp32 ga, cb
2256   11FD 00 00 00 00 
2256   1201 00 00 00 00 
2256   1205 00 00 00 00 
2256   1209 00 00 00 00 
2256   120D 00 00 00 00 
2256   1211 00 00 00 00 
2256   1215 00 00 00 00 
2256   1219 00 00 00 00 
2256   121D 00 00 00 00 
2256   1221 00 00 00 00 
2256   1225 00 00 00 00 
2256   1229 00 00 00 00 
2256   122D 00 00 00 00 
2256   1231 00 00 00 00 
2256   1235 00 00 00 00 
2256   1239 00 00 00 00 
2256   123D 00 00 00 00 
2256   1241 00 00 00 00 
2256   1245 00 00 00 00 
2256   1249 00 00 00 00 
2256   124D 00 00 00 00 
2256   1251 00 00 00 00 
2256   1255 00 00 00 00 
2256   1259 00 00 00 00 
2256   125D 00 00 00 00 
2256   1261 00 00 00 00 
2256   1265 00 00 00 00 
2256   1269 00 00 00 00 
2256   126D 00 00 00 00 
2256   1271 00 00 00 00 
2256   1275 00 00 00 00 
2256   1279 00 00 00 00 
2256   127D 00 00 00 00 
2256   1281 00 00 00 00 
2256   1285 00 00 00 00 
2256   1289 00 00 00 00 
2256   128D 00 00 00 00 
2256   1291 00 00 00 00 
2256   1295 00 00 00 00 
2256   1299 00 00 00 00 
2256   129D 00 00 00 00 
2256   12A1 00 00 00 00 
2256   12A5 00 00 00 00 
2256   12A9 00 00 00 00 
2256   12AD 00 00 00 00 
2256   12B1 00 00 00 00 
2256   12B5 00 00 00 00 
2256   12B9 00 00 00 00 
2256   12BD 00 00 00 00 
2256   12C1 00 00 00 00 
2256   12C5 00 00 00 00 
2256   12C9 00 00 00 00 
2256   12CD 00 00 00 00 
2256   12D1 00 00 00 00 
2256   12D5 00 00 00 00 
2256   12D9 00 00 00 00 
2256   12DD 00 00 00 00 
2256   12E1 00 00 00 00 
2256   12E5 00 00 00 00 
2256   12E9 00 00 00 00 
2256   12ED 00 00 00 00 
2256   12F1 00 00 00 00 
2256   12F5 00 00 00 00 
2256   12F9 00 
2257   12FA FD 71         seq ; ==
2258   12FC FD F1         pop g
2259   12FE E4            pop a
2260   12FF             ; END RELATIONAL
2261   12FF C0 00 00      cmp b, 0
2262   1302 C6 14 13      je _if35_exit
2263   1305             _if35_true:
2264   1305             ;; putchar('0'); 
2265   1305 26 30 00      mov b, $30
2266   1308 DD            push bl
2267   1309 07 99 14      call putchar
2268   130C 51 01 00      add sp, 1
2269   130F             ;; return; 
2270   130F F9            leave
2271   1310 09            ret
2272   1311 0A 14 13      jmp _if35_exit
2273   1314             _if35_exit:
2274   1314             ;; while (num > 0) { 
2275   1314             _while36_cond:
2276   1314 FA 05 00      lea d, [bp + 5] ; $num
2277   1317 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2278   131A FD 39         mov c, b ; And place it into C
2279   131C 2A            mov b, [d] ; Lower Word in B
2280   131D             ; START RELATIONAL
2281   131D D7            push a
2282   131E FD D8         push g
2283   1320 11            mov a, b
2284   1321 FD 7A         mov g, c
2285   1323 26 00 00      mov b, $0
2286   1326 38 00 00      mov c, 0
2287   1329 FD 81         sgu
2288   132B FD F1         pop g
2289   132D E4            pop a
2290   132E             ; END RELATIONAL
2291   132E C0 00 00      cmp b, 0
2292   1331 C6 91 13      je _while36_exit
2293   1334             _while36_block:
2294   1334             ;; digits[i] = '0' + (num % 10); 
2295   1334 FA F7 FF      lea d, [bp + -9] ; $digits
2296   1337 D7            push a
2297   1338 DA            push d
2298   1339 FA F5 FF      lea d, [bp + -11] ; $i
2299   133C 2A            mov b, [d]
2300   133D E7            pop d
2301   133E 5A            add d, b
2302   133F E4            pop a
2303   1340 DA            push d
2304   1341 26 30 00      mov b, $30
2305   1344             ; START TERMS
2306   1344 D7            push a
2307   1345 11            mov a, b
2308   1346 FA 05 00      lea d, [bp + 5] ; $num
2309   1349 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2310   134C FD 39         mov c, b ; And place it into C
2311   134E 2A            mov b, [d] ; Lower Word in B
2312   134F             ; START FACTORS
2313   134F D7            push a
2314   1350 11            mov a, b
2315   1351 26 0A 00      mov b, $a
2316   1354 AE            div a, b ; 
2317   1355 11            mov a, b
2318   1356 27            mov b, a
2319   1357 E4            pop a
2320   1358             ; END FACTORS
2321   1358 54            add a, b
2322   1359 D7            push a
2323   135A FD 12         mov a, g
2324   135C 28            mov b, c
2325   135D 5C            adc a, b
2326   135E 39            mov c, a
2327   135F E5            pop b
2328   1360 E4            pop a
2329   1361             ; END TERMS
2330   1361 E7            pop d
2331   1362 FD 3E         mov [d], bl
2332   1364             ;; num = num / 10; 
2333   1364 FA 05 00      lea d, [bp + 5] ; $num
2334   1367 DA            push d
2335   1368 FA 05 00      lea d, [bp + 5] ; $num
2336   136B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2337   136E FD 39         mov c, b ; And place it into C
2338   1370 2A            mov b, [d] ; Lower Word in B
2339   1371             ; START FACTORS
2340   1371 D7            push a
2341   1372 11            mov a, b
2342   1373 26 0A 00      mov b, $a
2343   1376 AE            div a, b
2344   1377 27            mov b, a
2345   1378 E4            pop a
2346   1379             ; END FACTORS
2347   1379 E7            pop d
2348   137A FD 43         mov [d], b
2349   137C 28            mov b, c
2350   137D FD 44 02 00   mov [d + 2], b
2351   1381             ;; i++; 
2352   1381 FA F5 FF      lea d, [bp + -11] ; $i
2353   1384 2A            mov b, [d]
2354   1385 FD 77         inc b
2355   1387 FA F5 FF      lea d, [bp + -11] ; $i
2356   138A FD 43         mov [d], b
2357   138C FD 7D         dec b
2358   138E 0A 14 13      jmp _while36_cond
2359   1391             _while36_exit:
2360   1391             ;; while (i > 0) { 
2361   1391             _while37_cond:
2362   1391 FA F5 FF      lea d, [bp + -11] ; $i
2363   1394 2A            mov b, [d]
2364   1395             ; START RELATIONAL
2365   1395 D7            push a
2366   1396 11            mov a, b
2367   1397 26 00 00      mov b, $0
2368   139A B0            cmp a, b
2369   139B FD 7F         sgt ; >
2370   139D E4            pop a
2371   139E             ; END RELATIONAL
2372   139E C0 00 00      cmp b, 0
2373   13A1 C6 CA 13      je _while37_exit
2374   13A4             _while37_block:
2375   13A4             ;; i--; 
2376   13A4 FA F5 FF      lea d, [bp + -11] ; $i
2377   13A7 2A            mov b, [d]
2378   13A8 FD 7D         dec b
2379   13AA FA F5 FF      lea d, [bp + -11] ; $i
2380   13AD FD 43         mov [d], b
2381   13AF FD 77         inc b
2382   13B1             ;; putchar(digits[i]); 
2383   13B1 FA F7 FF      lea d, [bp + -9] ; $digits
2384   13B4 D7            push a
2385   13B5 DA            push d
2386   13B6 FA F5 FF      lea d, [bp + -11] ; $i
2387   13B9 2A            mov b, [d]
2388   13BA E7            pop d
2389   13BB 5A            add d, b
2390   13BC E4            pop a
2391   13BD 32            mov bl, [d]
2392   13BE A7 00         mov bh, 0
2393   13C0 DD            push bl
2394   13C1 07 99 14      call putchar
2395   13C4 51 01 00      add sp, 1
2396   13C7 0A 91 13      jmp _while37_cond
2397   13CA             _while37_exit:
2398   13CA F9            leave
2399   13CB 09            ret
2400   13CC             
2401   13CC             print_unsigned:
2402   13CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2403   13CF             ;; char digits[5]; 
2404   13CF             ; $digits 
2405   13CF             ;; int i; 
2406   13CF             ; $i 
2407   13CF             ;; i = 0; 
2408   13CF FA FA FF      lea d, [bp + -6] ; $i
2409   13D2 DA            push d
2410   13D3 26 00 00      mov b, $0
2411   13D6 E7            pop d
2412   13D7 FD 43         mov [d], b
2413   13D9             ;; if(num == 0){ 
2414   13D9             _if38_cond:
2415   13D9 FA 05 00      lea d, [bp + 5] ; $num
2416   13DC 2A            mov b, [d]
2417   13DD             ; START RELATIONAL
2418   13DD D7            push a
2419   13DE 11            mov a, b
2420   13DF 26 00 00      mov b, $0
2421   13E2 B0            cmp a, b
2422   13E3 FD 71         seq ; ==
2423   13E5 E4            pop a
2424   13E6             ; END RELATIONAL
2425   13E6 C0 00 00      cmp b, 0
2426   13E9 C6 FB 13      je _if38_exit
2427   13EC             _if38_true:
2428   13EC             ;; putchar('0'); 
2429   13EC 26 30 00      mov b, $30
2430   13EF DD            push bl
2431   13F0 07 99 14      call putchar
2432   13F3 51 01 00      add sp, 1
2433   13F6             ;; return; 
2434   13F6 F9            leave
2435   13F7 09            ret
2436   13F8 0A FB 13      jmp _if38_exit
2437   13FB             _if38_exit:
2438   13FB             ;; while (num > 0) { 
2439   13FB             _while39_cond:
2440   13FB FA 05 00      lea d, [bp + 5] ; $num
2441   13FE 2A            mov b, [d]
2442   13FF             ; START RELATIONAL
2443   13FF D7            push a
2444   1400 11            mov a, b
2445   1401 26 00 00      mov b, $0
2446   1404 B0            cmp a, b
2447   1405 FD 81         sgu ; > (unsigned)
2448   1407 E4            pop a
2449   1408             ; END RELATIONAL
2450   1408 C0 00 00      cmp b, 0
2451   140B C6 55 14      je _while39_exit
2452   140E             _while39_block:
2453   140E             ;; digits[i] = '0' + (num % 10); 
2454   140E FA FC FF      lea d, [bp + -4] ; $digits
2455   1411 D7            push a
2456   1412 DA            push d
2457   1413 FA FA FF      lea d, [bp + -6] ; $i
2458   1416 2A            mov b, [d]
2459   1417 E7            pop d
2460   1418 5A            add d, b
2461   1419 E4            pop a
2462   141A DA            push d
2463   141B 26 30 00      mov b, $30
2464   141E             ; START TERMS
2465   141E D7            push a
2466   141F 11            mov a, b
2467   1420 FA 05 00      lea d, [bp + 5] ; $num
2468   1423 2A            mov b, [d]
2469   1424             ; START FACTORS
2470   1424 D7            push a
2471   1425 11            mov a, b
2472   1426 26 0A 00      mov b, $a
2473   1429 AE            div a, b ; 
2474   142A 11            mov a, b
2475   142B 27            mov b, a
2476   142C E4            pop a
2477   142D             ; END FACTORS
2478   142D 56            add b, a
2479   142E E4            pop a
2480   142F             ; END TERMS
2481   142F E7            pop d
2482   1430 FD 3E         mov [d], bl
2483   1432             ;; num = num / 10; 
2484   1432 FA 05 00      lea d, [bp + 5] ; $num
2485   1435 DA            push d
2486   1436 FA 05 00      lea d, [bp + 5] ; $num
2487   1439 2A            mov b, [d]
2488   143A             ; START FACTORS
2489   143A D7            push a
2490   143B 11            mov a, b
2491   143C 26 0A 00      mov b, $a
2492   143F AE            div a, b
2493   1440 27            mov b, a
2494   1441 E4            pop a
2495   1442             ; END FACTORS
2496   1442 E7            pop d
2497   1443 FD 43         mov [d], b
2498   1445             ;; i++; 
2499   1445 FA FA FF      lea d, [bp + -6] ; $i
2500   1448 2A            mov b, [d]
2501   1449 FD 77         inc b
2502   144B FA FA FF      lea d, [bp + -6] ; $i
2503   144E FD 43         mov [d], b
2504   1450 FD 7D         dec b
2505   1452 0A FB 13      jmp _while39_cond
2506   1455             _while39_exit:
2507   1455             ;; while (i > 0) { 
2508   1455             _while40_cond:
2509   1455 FA FA FF      lea d, [bp + -6] ; $i
2510   1458 2A            mov b, [d]
2511   1459             ; START RELATIONAL
2512   1459 D7            push a
2513   145A 11            mov a, b
2514   145B 26 00 00      mov b, $0
2515   145E B0            cmp a, b
2516   145F FD 7F         sgt ; >
2517   1461 E4            pop a
2518   1462             ; END RELATIONAL
2519   1462 C0 00 00      cmp b, 0
2520   1465 C6 8E 14      je _while40_exit
2521   1468             _while40_block:
2522   1468             ;; i--; 
2523   1468 FA FA FF      lea d, [bp + -6] ; $i
2524   146B 2A            mov b, [d]
2525   146C FD 7D         dec b
2526   146E FA FA FF      lea d, [bp + -6] ; $i
2527   1471 FD 43         mov [d], b
2528   1473 FD 77         inc b
2529   1475             ;; putchar(digits[i]); 
2530   1475 FA FC FF      lea d, [bp + -4] ; $digits
2531   1478 D7            push a
2532   1479 DA            push d
2533   147A FA FA FF      lea d, [bp + -6] ; $i
2534   147D 2A            mov b, [d]
2535   147E E7            pop d
2536   147F 5A            add d, b
2537   1480 E4            pop a
2538   1481 32            mov bl, [d]
2539   1482 A7 00         mov bh, 0
2540   1484 DD            push bl
2541   1485 07 99 14      call putchar
2542   1488 51 01 00      add sp, 1
2543   148B 0A 55 14      jmp _while40_cond
2544   148E             _while40_exit:
2545   148E F9            leave
2546   148F 09            ret
2547   1490             
2548   1490             date:
2549   1490 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2550   1493             
2551   1493             ; --- BEGIN INLINE ASM BLOCK
2552   1493 19 00         mov al, 0 
2553   1495 05 07         syscall sys_datetime
2554   1497             ; --- END INLINE ASM BLOCK
2555   1497             
2556   1497 F9            leave
2557   1498 09            ret
2558   1499             
2559   1499             putchar:
2560   1499 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2561   149C             
2562   149C             ; --- BEGIN INLINE ASM BLOCK
2563   149C FA 05 00      lea d, [bp + 5] ; $c
2564   149F 1E            mov al, [d]
2565   14A0 23            mov ah, al
2566   14A1 07 21 16      call _putchar
2567   14A4             ; --- END INLINE ASM BLOCK
2568   14A4             
2569   14A4 F9            leave
2570   14A5 09            ret
2571   14A6             
2572   14A6             getchar:
2573   14A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2574   14A9             ;; char c; 
2575   14A9             ; $c 
2576   14A9             
2577   14A9             ; --- BEGIN INLINE ASM BLOCK
2578   14A9 07 1A 16      call getch
2579   14AC 1A            mov al, ah
2580   14AD FA 00 00      lea d, [bp + 0] ; $c
2581   14B0 3E            mov [d], al
2582   14B1             ; --- END INLINE ASM BLOCK
2583   14B1             
2584   14B1             ;; return c; 
2585   14B1 FA 00 00      lea d, [bp + 0] ; $c
2586   14B4 32            mov bl, [d]
2587   14B5 A7 00         mov bh, 0
2588   14B7 F9            leave
2589   14B8 09            ret
2590   14B9             
2591   14B9             scann:
2592   14B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2593   14BC             ;; int m; 
2594   14BC             ; $m 
2595   14BC             
2596   14BC             ; --- BEGIN INLINE ASM BLOCK
2597   14BC 07 65 18      call scan_u16d
2598   14BF FA FF FF      lea d, [bp + -1] ; $m
2599   14C2 43            mov [d], a
2600   14C3             ; --- END INLINE ASM BLOCK
2601   14C3             
2602   14C3             ;; return m; 
2603   14C3 FA FF FF      lea d, [bp + -1] ; $m
2604   14C6 2A            mov b, [d]
2605   14C7 F9            leave
2606   14C8 09            ret
2607   14C9             
2608   14C9             puts:
2609   14C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2610   14CC             
2611   14CC             ; --- BEGIN INLINE ASM BLOCK
2612   14CC FA 05 00      lea d, [bp + 5] ; $s
2613   14CF 15            mov a, [d]
2614   14D0 3C            mov d, a
2615   14D1 07 6B 17      call _puts
2616   14D4 10 00 0A      mov a, $0A00
2617   14D7 05 03         syscall sys_io
2618   14D9             ; --- END INLINE ASM BLOCK
2619   14D9             
2620   14D9 F9            leave
2621   14DA 09            ret
2622   14DB             
2623   14DB             print:
2624   14DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2625   14DE             
2626   14DE             ; --- BEGIN INLINE ASM BLOCK
2627   14DE FA 05 00      lea d, [bp + 5] ; $s
2628   14E1 FD 2A         mov d, [d]
2629   14E3 07 6B 17      call _puts
2630   14E6             ; --- END INLINE ASM BLOCK
2631   14E6             
2632   14E6 F9            leave
2633   14E7 09            ret
2634   14E8             
2635   14E8             getparam:
2636   14E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2637   14EB             ;; char data; 
2638   14EB             ; $data 
2639   14EB             
2640   14EB             ; --- BEGIN INLINE ASM BLOCK
2641   14EB 19 04         mov al, 4
2642   14ED FA 05 00      lea d, [bp + 5] ; $address
2643   14F0 FD 2A         mov d, [d]
2644   14F2 05 0C         syscall sys_system
2645   14F4 FA 00 00      lea d, [bp + 0] ; $data
2646   14F7 FD 3E         mov [d], bl
2647   14F9             ; --- END INLINE ASM BLOCK
2648   14F9             
2649   14F9             ;; return data; 
2650   14F9 FA 00 00      lea d, [bp + 0] ; $data
2651   14FC 32            mov bl, [d]
2652   14FD A7 00         mov bh, 0
2653   14FF F9            leave
2654   1500 09            ret
2655   1501             
2656   1501             clear:
2657   1501 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2658   1504             ;; print("\033[2J\033[H"); 
2659   1504 26 50 20      mov b, _s2 ; "\033[2J\033[H"
2660   1507 FD AB         swp b
2661   1509 D8            push b
2662   150A 07 DB 14      call print
2663   150D 51 02 00      add sp, 2
2664   1510 F9            leave
2665   1511 09            ret
2666   1512             
2667   1512             abs:
2668   1512 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2669   1515             ;; return i < 0 ? -i : i; 
2670   1515             _ternary41_cond:
2671   1515 FA 05 00      lea d, [bp + 5] ; $i
2672   1518 2A            mov b, [d]
2673   1519             ; START RELATIONAL
2674   1519 D7            push a
2675   151A 11            mov a, b
2676   151B 26 00 00      mov b, $0
2677   151E B0            cmp a, b
2678   151F FD 73         slt ; < (signed)
2679   1521 E4            pop a
2680   1522             ; END RELATIONAL
2681   1522 C0 00 00      cmp b, 0
2682   1525 C6 31 15      je _ternary41_false
2683   1528             _ternary41_true:
2684   1528 FA 05 00      lea d, [bp + 5] ; $i
2685   152B 2A            mov b, [d]
2686   152C FD 97         neg b
2687   152E 0A 35 15      jmp _ternary41_exit
2688   1531             _ternary41_false:
2689   1531 FA 05 00      lea d, [bp + 5] ; $i
2690   1534 2A            mov b, [d]
2691   1535             _ternary41_exit:
2692   1535 F9            leave
2693   1536 09            ret
2694   1537             
2695   1537             include_stdio_asm:
2696   1537 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2697   153A             
2698   153A             ; --- BEGIN INLINE ASM BLOCK
2699   153A             .include "lib/asm/stdio.asm"
0001+  153A             ;-----------------------------------------------------------------------------
0002+  153A             ; stdio.s
0003+  153A             ;-----------------------------------------------------------------------------
0004+  153A             .include "lib/asm/string.asm"
0001++ 153A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 153A             ; string.s
0003++ 153A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 153A             
0005++ 153A             
0006++ 153A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 153A             ; _strrev
0008++ 153A             ; reverse a string
0009++ 153A             ; D = string address
0010++ 153A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 153A             ; 01234
0012++ 153A             _strrev:
0013++ 153A 4B          	pusha
0014++ 153B 07 81 15    	call _strlen	; length in C
0015++ 153E 12          	mov a, c
0016++ 153F AF 01 00    	cmp a, 1
0017++ 1542 D0 5C 15    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1545 7D          	dec a
0019++ 1546 FD 4E       	mov si, d	; beginning of string
0020++ 1548 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 154A 59          	add d, a	; end of string
0022++ 154B 12          	mov a, c
0023++ 154C FD 9B       	shr a		; divide by 2
0024++ 154E 39          	mov c, a	; C now counts the steps
0025++ 154F             _strrev_L0:
0026++ 154F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1550 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1551 3E          	mov [d], al	; store left char into right side
0029++ 1552 1B          	mov al, bl
0030++ 1553 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1554 7E          	dec c
0032++ 1555 7F          	dec d
0033++ 1556 C2 00 00    	cmp c, 0
0034++ 1559 C7 4F 15    	jne _strrev_L0
0035++ 155C             _strrev_end:
0036++ 155C 4C          	popa
0037++ 155D 09          	ret
0038++ 155E             	
0039++ 155E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 155E             ; _strchr
0041++ 155E             ; search string in D for char in AL
0042++ 155E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 155E             _strchr:
0044++ 155E             _strchr_L0:
0045++ 155E 32          	mov bl, [d]
0046++ 155F C1 00       	cmp bl, 0
0047++ 1561 C6 6C 15    	je _strchr_end
0048++ 1564 BA          	cmp al, bl
0049++ 1565 C6 6C 15    	je _strchr_end
0050++ 1568 79          	inc d
0051++ 1569 0A 5E 15    	jmp _strchr_L0
0052++ 156C             _strchr_end:
0053++ 156C 1B          	mov al, bl
0054++ 156D 09          	ret
0055++ 156E             
0056++ 156E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 156E             ; _strstr
0058++ 156E             ; find sub-string
0059++ 156E             ; str1 in SI
0060++ 156E             ; str2 in DI
0061++ 156E             ; SI points to end of source string
0062++ 156E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 156E             _strstr:
0064++ 156E DB          	push al
0065++ 156F DA          	push d
0066++ 1570 E3          	push di
0067++ 1571             _strstr_loop:
0068++ 1571 F3          	cmpsb					; compare a byte of the strings
0069++ 1572 C7 7D 15    	jne _strstr_ret
0070++ 1575 FC 00 00    	lea d, [di + 0]
0071++ 1578 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 157A C7 71 15    	jne _strstr_loop				; equal chars but not at end
0073++ 157D             _strstr_ret:
0074++ 157D F0          	pop di
0075++ 157E E7          	pop d
0076++ 157F E8          	pop al
0077++ 1580 09          	ret
0078++ 1581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1581             ; length of null terminated string
0080++ 1581             ; result in C
0081++ 1581             ; pointer in D
0082++ 1581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1581             _strlen:
0084++ 1581 DA          	push d
0085++ 1582 38 00 00    	mov c, 0
0086++ 1585             _strlen_L1:
0087++ 1585 BD 00       	cmp byte [d], 0
0088++ 1587 C6 8F 15    	je _strlen_ret
0089++ 158A 79          	inc d
0090++ 158B 78          	inc c
0091++ 158C 0A 85 15    	jmp _strlen_L1
0092++ 158F             _strlen_ret:
0093++ 158F E7          	pop d
0094++ 1590 09          	ret
0095++ 1591             
0096++ 1591             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1591             ; STRCMP
0098++ 1591             ; compare two strings
0099++ 1591             ; str1 in SI
0100++ 1591             ; str2 in DI
0101++ 1591             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1591             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1591             _strcmp:
0104++ 1591 DB          	push al
0105++ 1592 DA          	push d
0106++ 1593 E3          	push di
0107++ 1594 E2          	push si
0108++ 1595             _strcmp_loop:
0109++ 1595 F3          	cmpsb					; compare a byte of the strings
0110++ 1596 C7 A1 15    	jne _strcmp_ret
0111++ 1599 FB FF FF    	lea d, [si +- 1]
0112++ 159C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 159E C7 95 15    	jne _strcmp_loop				; equal chars but not at end
0114++ 15A1             _strcmp_ret:
0115++ 15A1 EF          	pop si
0116++ 15A2 F0          	pop di
0117++ 15A3 E7          	pop d
0118++ 15A4 E8          	pop al
0119++ 15A5 09          	ret
0120++ 15A6             
0121++ 15A6             
0122++ 15A6             ; STRCPY
0123++ 15A6             ; copy null terminated string from SI to DI
0124++ 15A6             ; source in SI
0125++ 15A6             ; destination in DI
0126++ 15A6             _strcpy:
0127++ 15A6 E2          	push si
0128++ 15A7 E3          	push di
0129++ 15A8 DB          	push al
0130++ 15A9             _strcpy_L1:
0131++ 15A9 F6          	lodsb
0132++ 15AA F7          	stosb
0133++ 15AB B9 00       	cmp al, 0
0134++ 15AD C7 A9 15    	jne _strcpy_L1
0135++ 15B0             _strcpy_end:
0136++ 15B0 E8          	pop al
0137++ 15B1 F0          	pop di
0138++ 15B2 EF          	pop si
0139++ 15B3 09          	ret
0140++ 15B4             
0141++ 15B4             ; STRCAT
0142++ 15B4             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 15B4             ; source in SI
0144++ 15B4             ; destination in DI
0145++ 15B4             _strcat:
0146++ 15B4 E2          	push si
0147++ 15B5 E3          	push di
0148++ 15B6 D7          	push a
0149++ 15B7 DA          	push d
0150++ 15B8 50          	mov a, di
0151++ 15B9 3C          	mov d, a
0152++ 15BA             _strcat_goto_end_L1:
0153++ 15BA BD 00       	cmp byte[d], 0
0154++ 15BC C6 C3 15    	je _strcat_start
0155++ 15BF 79          	inc d
0156++ 15C0 0A BA 15    	jmp _strcat_goto_end_L1
0157++ 15C3             _strcat_start:
0158++ 15C3 FD 50       	mov di, d
0159++ 15C5             _strcat_L1:
0160++ 15C5 F6          	lodsb
0161++ 15C6 F7          	stosb
0162++ 15C7 B9 00       	cmp al, 0
0163++ 15C9 C7 C5 15    	jne _strcat_L1
0164++ 15CC             _strcat_end:
0165++ 15CC E7          	pop d
0166++ 15CD E4          	pop a
0167++ 15CE F0          	pop di
0168++ 15CF EF          	pop si
0169++ 15D0 09          	ret
0170++ 15D1             
0171++ 15D1             
0005+  15D1             
0006+  15D1             ;-----------------------------------------------------------------------------
0007+  15D1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  15D1             ; ASCII in BL
0009+  15D1             ; result in AL
0010+  15D1             ; ascii for F = 0100 0110
0011+  15D1             ; ascii for 9 = 0011 1001
0012+  15D1             ;-----------------------------------------------------------------------------
0013+  15D1             hex_ascii_encode:
0014+  15D1 1B            mov al, bl
0015+  15D2 93 40         test al, $40        ; test if letter or number
0016+  15D4 C7 DA 15      jnz hex_letter
0017+  15D7 87 0F         and al, $0F        ; get number
0018+  15D9 09            ret
0019+  15DA             hex_letter:
0020+  15DA 87 0F         and al, $0F        ; get letter
0021+  15DC 6A 09         add al, 9
0022+  15DE 09            ret
0023+  15DF             
0024+  15DF             ;-----------------------------------------------------------------------------
0025+  15DF             ; ATOI
0026+  15DF             ; 2 letter hex string in B
0027+  15DF             ; 8bit integer returned in AL
0028+  15DF             ;-----------------------------------------------------------------------------
0029+  15DF             _atoi:
0030+  15DF D8            push b
0031+  15E0 07 D1 15      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  15E3 30            mov bl, bh
0033+  15E4 DB            push al          ; save a
0034+  15E5 07 D1 15      call hex_ascii_encode
0035+  15E8 EA            pop bl  
0036+  15E9 FD 9E 04      shl al, 4
0037+  15EC 8C            or al, bl
0038+  15ED E5            pop b
0039+  15EE 09            ret  
0040+  15EF             
0041+  15EF             
0042+  15EF             ;-----------------------------------------------------------------------------
0043+  15EF             ; ITOA
0044+  15EF             ; 8bit value in BL
0045+  15EF             ; 2 byte ASCII result in A
0046+  15EF             ;-----------------------------------------------------------------------------
0047+  15EF             _itoa:
0048+  15EF DA            push d
0049+  15F0 D8            push b
0050+  15F1 A7 00         mov bh, 0
0051+  15F3 FD A4 04      shr bl, 4  
0052+  15F6 74            mov d, b
0053+  15F7 1F 9F 18      mov al, [d + s_hex_digits]
0054+  15FA 23            mov ah, al
0055+  15FB               
0056+  15FB E5            pop b
0057+  15FC D8            push b
0058+  15FD A7 00         mov bh, 0
0059+  15FF FD 87 0F      and bl, $0F
0060+  1602 74            mov d, b
0061+  1603 1F 9F 18      mov al, [d + s_hex_digits]
0062+  1606 E5            pop b
0063+  1607 E7            pop d
0064+  1608 09            ret
0065+  1609             
0066+  1609             ;-----------------------------------------------------------------------------
0067+  1609             ; HEX STRING TO BINARY
0068+  1609             ; di = destination address
0069+  1609             ; si = source
0070+  1609             ;-----------------------------------------------------------------------------
0071+  1609             _hex_to_int:
0072+  1609             _hex_to_int_L1:
0073+  1609 F6            lodsb          ; load from [SI] to AL
0074+  160A B9 00         cmp al, 0        ; check if ASCII 0
0075+  160C C6 19 16      jz _hex_to_int_ret
0076+  160F 36            mov bh, al
0077+  1610 F6            lodsb
0078+  1611 2F            mov bl, al
0079+  1612 07 DF 15      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1615 F7            stosb          ; store AL to [DI]
0081+  1616 0A 09 16      jmp _hex_to_int_L1
0082+  1619             _hex_to_int_ret:
0083+  1619 09            ret    
0084+  161A             
0085+  161A             ;-----------------------------------------------------------------------------
0086+  161A             ; GETCHAR
0087+  161A             ; char in ah
0088+  161A             ;-----------------------------------------------------------------------------
0089+  161A             getch:
0090+  161A DB            push al
0091+  161B             getch_retry:
0092+  161B 19 01         mov al, 1
0093+  161D 05 03         syscall sys_io      ; receive in AH
0094+  161F E8            pop al
0095+  1620 09            ret
0096+  1621             
0097+  1621             ;-----------------------------------------------------------------------------
0098+  1621             ; PUTCHAR
0099+  1621             ; char in ah
0100+  1621             ;-----------------------------------------------------------------------------
0101+  1621             _putchar:
0102+  1621 D7            push a
0103+  1622 19 00         mov al, 0
0104+  1624 05 03         syscall sys_io      ; char in AH
0105+  1626 E4            pop a
0106+  1627 09            ret
0107+  1628             
0108+  1628             ;-----------------------------------------------------------------------------
0109+  1628             ;; INPUT A STRING
0110+  1628             ;; terminates with null
0111+  1628             ;; pointer in D
0112+  1628             ;-----------------------------------------------------------------------------
0113+  1628             _gets:
0114+  1628 D7            push a
0115+  1629 DA            push d
0116+  162A             _gets_loop:
0117+  162A 19 01         mov al, 1
0118+  162C 05 03         syscall sys_io      ; receive in AH
0119+  162E B9 00         cmp al, 0        ; check error code (AL)
0120+  1630 C6 2A 16      je _gets_loop      ; if no char received, retry
0121+  1633             
0122+  1633 76 1B         cmp ah, 27
0123+  1635 C6 56 16      je _gets_ansi_esc
0124+  1638 76 0A         cmp ah, $0A        ; LF
0125+  163A C6 C1 16      je _gets_end
0126+  163D 76 0D         cmp ah, $0D        ; CR
0127+  163F C6 C1 16      je _gets_end
0128+  1642 76 5C         cmp ah, $5C        ; '\\'
0129+  1644 C6 82 16      je _gets_escape
0130+  1647               
0131+  1647 76 08         cmp ah, $08      ; check for backspace
0132+  1649 C6 52 16      je _gets_backspace
0133+  164C             
0134+  164C 1A            mov al, ah
0135+  164D 3E            mov [d], al
0136+  164E 79            inc d
0137+  164F 0A 2A 16      jmp _gets_loop
0138+  1652             _gets_backspace:
0139+  1652 7F            dec d
0140+  1653 0A 2A 16      jmp _gets_loop
0141+  1656             _gets_ansi_esc:
0142+  1656 19 01         mov al, 1
0143+  1658 05 03         syscall sys_io        ; receive in AH without echo
0144+  165A B9 00         cmp al, 0          ; check error code (AL)
0145+  165C C6 56 16      je _gets_ansi_esc    ; if no char received, retry
0146+  165F 76 5B         cmp ah, '['
0147+  1661 C7 2A 16      jne _gets_loop
0148+  1664             _gets_ansi_esc_2:
0149+  1664 19 01         mov al, 1
0150+  1666 05 03         syscall sys_io          ; receive in AH without echo
0151+  1668 B9 00         cmp al, 0            ; check error code (AL)
0152+  166A C6 64 16      je _gets_ansi_esc_2  ; if no char received, retry
0153+  166D 76 44         cmp ah, 'D'
0154+  166F C6 7A 16      je _gets_left_arrow
0155+  1672 76 43         cmp ah, 'C'
0156+  1674 C6 7E 16      je _gets_right_arrow
0157+  1677 0A 2A 16      jmp _gets_loop
0158+  167A             _gets_left_arrow:
0159+  167A 7F            dec d
0160+  167B 0A 2A 16      jmp _gets_loop
0161+  167E             _gets_right_arrow:
0162+  167E 79            inc d
0163+  167F 0A 2A 16      jmp _gets_loop
0164+  1682             _gets_escape:
0165+  1682 19 01         mov al, 1
0166+  1684 05 03         syscall sys_io      ; receive in AH
0167+  1686 B9 00         cmp al, 0        ; check error code (AL)
0168+  1688 C6 82 16      je _gets_escape      ; if no char received, retry
0169+  168B 76 6E         cmp ah, 'n'
0170+  168D C6 AC 16      je _gets_LF
0171+  1690 76 72         cmp ah, 'r'
0172+  1692 C6 B3 16      je _gets_CR
0173+  1695 76 30         cmp ah, '0'
0174+  1697 C6 BA 16      je _gets_NULL
0175+  169A 76 5C         cmp ah, $5C  ; '\'
0176+  169C C6 A5 16      je _gets_slash
0177+  169F 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  16A0 3E            mov [d], al
0179+  16A1 79            inc d
0180+  16A2 0A 2A 16      jmp _gets_loop
0181+  16A5             _gets_slash:
0182+  16A5 19 5C         mov al, $5C
0183+  16A7 3E            mov [d], al
0184+  16A8 79            inc d
0185+  16A9 0A 2A 16      jmp _gets_loop
0186+  16AC             _gets_LF:
0187+  16AC 19 0A         mov al, $0A
0188+  16AE 3E            mov [d], al
0189+  16AF 79            inc d
0190+  16B0 0A 2A 16      jmp _gets_loop
0191+  16B3             _gets_CR:
0192+  16B3 19 0D         mov al, $0D
0193+  16B5 3E            mov [d], al
0194+  16B6 79            inc d
0195+  16B7 0A 2A 16      jmp _gets_loop
0196+  16BA             _gets_NULL:
0197+  16BA 19 00         mov al, $00
0198+  16BC 3E            mov [d], al
0199+  16BD 79            inc d
0200+  16BE 0A 2A 16      jmp _gets_loop
0201+  16C1             _gets_end:
0202+  16C1 19 00         mov al, 0
0203+  16C3 3E            mov [d], al        ; terminate string
0204+  16C4 E7            pop d
0205+  16C5 E4            pop a
0206+  16C6 09            ret
0207+  16C7             
0208+  16C7             ;-----------------------------------------------------------------------------
0209+  16C7             ;; INPUT TEXT
0210+  16C7             ;; terminated with CTRL+D
0211+  16C7             ;; pointer in D
0212+  16C7             ;-----------------------------------------------------------------------------
0213+  16C7             _gettxt:
0214+  16C7 D7            push a
0215+  16C8 DA            push d
0216+  16C9             _gettxt_loop:
0217+  16C9 19 01         mov al, 1
0218+  16CB 05 03         syscall sys_io      ; receive in AH
0219+  16CD B9 00         cmp al, 0        ; check error code (AL)
0220+  16CF C6 C9 16      je _gettxt_loop    ; if no char received, retry
0221+  16D2 76 04         cmp ah, 4      ; EOT
0222+  16D4 C6 12 17      je _gettxt_end
0223+  16D7 76 08         cmp ah, $08      ; check for backspace
0224+  16D9 C6 0E 17      je _gettxt_backspace
0225+  16DC 76 5C         cmp ah, $5C        ; '\'
0226+  16DE C6 E7 16      je _gettxt_escape
0227+  16E1 1A            mov al, ah
0228+  16E2 3E            mov [d], al
0229+  16E3 79            inc d
0230+  16E4 0A C9 16      jmp _gettxt_loop
0231+  16E7             _gettxt_escape:
0232+  16E7 19 01         mov al, 1
0233+  16E9 05 03         syscall sys_io      ; receive in AH
0234+  16EB B9 00         cmp al, 0        ; check error code (AL)
0235+  16ED C6 E7 16      je _gettxt_escape    ; if no char received, retry
0236+  16F0 76 6E         cmp ah, 'n'
0237+  16F2 C6 00 17      je _gettxt_LF
0238+  16F5 76 72         cmp ah, 'r'
0239+  16F7 C6 07 17      je _gettxt_CR
0240+  16FA 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  16FB 3E            mov [d], al
0242+  16FC 79            inc d
0243+  16FD 0A C9 16      jmp _gettxt_loop
0244+  1700             _gettxt_LF:
0245+  1700 19 0A         mov al, $0A
0246+  1702 3E            mov [d], al
0247+  1703 79            inc d
0248+  1704 0A C9 16      jmp _gettxt_loop
0249+  1707             _gettxt_CR:
0250+  1707 19 0D         mov al, $0D
0251+  1709 3E            mov [d], al
0252+  170A 79            inc d
0253+  170B 0A C9 16      jmp _gettxt_loop
0254+  170E             _gettxt_backspace:
0255+  170E 7F            dec d
0256+  170F 0A C9 16      jmp _gettxt_loop
0257+  1712             _gettxt_end:
0258+  1712 19 00         mov al, 0
0259+  1714 3E            mov [d], al        ; terminate string
0260+  1715 E7            pop d
0261+  1716 E4            pop a
0262+  1717 09            ret
0263+  1718             
0264+  1718             ;-----------------------------------------------------------------------------
0265+  1718             ; PRINT NEW LINE
0266+  1718             ;-----------------------------------------------------------------------------
0267+  1718             printnl:
0268+  1718 D7            push a
0269+  1719 10 00 0A      mov a, $0A00
0270+  171C 05 03         syscall sys_io
0271+  171E 10 00 0D      mov a, $0D00
0272+  1721 05 03         syscall sys_io
0273+  1723 E4            pop a
0274+  1724 09            ret
0275+  1725             
0276+  1725             ;-----------------------------------------------------------------------------
0277+  1725             ; _strtoint
0278+  1725             ; 4 digit hex string number in d
0279+  1725             ; integer returned in A
0280+  1725             ;-----------------------------------------------------------------------------
0281+  1725             _strtointx:
0282+  1725 D8            push b
0283+  1726 32            mov bl, [d]
0284+  1727 37            mov bh, bl
0285+  1728 33 01 00      mov bl, [d + 1]
0286+  172B 07 DF 15      call _atoi        ; convert to int in AL
0287+  172E 23            mov ah, al        ; move to AH
0288+  172F 33 02 00      mov bl, [d + 2]
0289+  1732 37            mov bh, bl
0290+  1733 33 03 00      mov bl, [d + 3]
0291+  1736 07 DF 15      call _atoi        ; convert to int in AL
0292+  1739 E5            pop b
0293+  173A 09            ret
0294+  173B             
0295+  173B             ;-----------------------------------------------------------------------------
0296+  173B             ; _strtoint
0297+  173B             ; 5 digit base10 string number in d
0298+  173B             ; integer returned in A
0299+  173B             ;-----------------------------------------------------------------------------
0300+  173B             _strtoint:
0301+  173B E2            push si
0302+  173C D8            push b
0303+  173D D9            push c
0304+  173E DA            push d
0305+  173F 07 81 15      call _strlen      ; get string length in C
0306+  1742 7E            dec c
0307+  1743 FD 4E         mov si, d
0308+  1745 12            mov a, c
0309+  1746 FD 99         shl a
0310+  1748 3B B7 18      mov d, table_power
0311+  174B 59            add d, a
0312+  174C 38 00 00      mov c, 0
0313+  174F             _strtoint_L0:
0314+  174F F6            lodsb      ; load ASCII to al
0315+  1750 B9 00         cmp al, 0
0316+  1752 C6 65 17      je _strtoint_end
0317+  1755 6F 30         sub al, $30    ; make into integer
0318+  1757 22 00         mov ah, 0
0319+  1759 2A            mov b, [d]
0320+  175A AC            mul a, b      ; result in B since it fits in 16bits
0321+  175B 11            mov a, b
0322+  175C 28            mov b, c
0323+  175D 54            add a, b
0324+  175E 39            mov c, a
0325+  175F 63 02 00      sub d, 2
0326+  1762 0A 4F 17      jmp _strtoint_L0
0327+  1765             _strtoint_end:
0328+  1765 12            mov a, c
0329+  1766 E7            pop d
0330+  1767 E6            pop c
0331+  1768 E5            pop b
0332+  1769 EF            pop si
0333+  176A 09            ret
0334+  176B             
0335+  176B             ;-----------------------------------------------------------------------------
0336+  176B             ; PRINT NULL TERMINATED STRING
0337+  176B             ; pointer in D
0338+  176B             ;-----------------------------------------------------------------------------
0339+  176B             _puts:
0340+  176B D7            push a
0341+  176C DA            push d
0342+  176D             _puts_L1:
0343+  176D 1E            mov al, [d]
0344+  176E B9 00         cmp al, 0
0345+  1770 C6 7C 17      jz _puts_END
0346+  1773 23            mov ah, al
0347+  1774 19 00         mov al, 0
0348+  1776 05 03         syscall sys_io
0349+  1778 79            inc d
0350+  1779 0A 6D 17      jmp _puts_L1
0351+  177C             _puts_END:
0352+  177C E7            pop d
0353+  177D E4            pop a
0354+  177E 09            ret
0355+  177F             
0356+  177F             ;-----------------------------------------------------------------------------
0357+  177F             ; PRINT N SIZE STRING
0358+  177F             ; pointer in D
0359+  177F             ; size in C
0360+  177F             ;-----------------------------------------------------------------------------
0361+  177F             _putsn:
0362+  177F DB            push al
0363+  1780 DA            push d
0364+  1781 D9            push c
0365+  1782             _putsn_L0:
0366+  1782 1E            mov al, [d]
0367+  1783 23            mov ah, al
0368+  1784 19 00         mov al, 0
0369+  1786 05 03         syscall sys_io
0370+  1788 79            inc d
0371+  1789 7E            dec c  
0372+  178A C2 00 00      cmp c, 0
0373+  178D C7 82 17      jne _putsn_L0
0374+  1790             _putsn_end:
0375+  1790 E6            pop c
0376+  1791 E7            pop d
0377+  1792 E8            pop al
0378+  1793 09            ret
0379+  1794             
0380+  1794             ;-----------------------------------------------------------------------------
0381+  1794             ; print 16bit decimal number
0382+  1794             ; input number in A
0383+  1794             ;-----------------------------------------------------------------------------
0384+  1794             print_u16d:
0385+  1794 D7            push a
0386+  1795 D8            push b
0387+  1796 26 10 27      mov b, 10000
0388+  1799 AE            div a, b      ; get 10000's coeff.
0389+  179A 07 BC 17      call print_number
0390+  179D 11            mov a, b
0391+  179E 26 E8 03      mov b, 1000
0392+  17A1 AE            div a, b      ; get 1000's coeff.
0393+  17A2 07 BC 17      call print_number
0394+  17A5 11            mov a, b
0395+  17A6 26 64 00      mov b, 100
0396+  17A9 AE            div a, b
0397+  17AA 07 BC 17      call print_number
0398+  17AD 11            mov a, b
0399+  17AE 26 0A 00      mov b, 10
0400+  17B1 AE            div a, b
0401+  17B2 07 BC 17      call print_number
0402+  17B5 1B            mov al, bl      ; 1's coeff in bl
0403+  17B6 07 BC 17      call print_number
0404+  17B9 E5            pop b
0405+  17BA E4            pop a
0406+  17BB 09            ret
0407+  17BC             
0408+  17BC             ;-----------------------------------------------------------------------------
0409+  17BC             ; print AL
0410+  17BC             ;-----------------------------------------------------------------------------
0411+  17BC             print_number:
0412+  17BC 6A 30         add al, $30
0413+  17BE 23            mov ah, al
0414+  17BF 07 21 16      call _putchar
0415+  17C2 09            ret
0416+  17C3             
0417+  17C3             ;-----------------------------------------------------------------------------
0418+  17C3             ; PRINT 16BIT HEX INTEGER
0419+  17C3             ; integer value in reg B
0420+  17C3             ;-----------------------------------------------------------------------------
0421+  17C3             print_u16x:
0422+  17C3 D7            push a
0423+  17C4 D8            push b
0424+  17C5 DD            push bl
0425+  17C6 30            mov bl, bh
0426+  17C7 07 EF 15      call _itoa        ; convert bh to char in A
0427+  17CA 2F            mov bl, al        ; save al
0428+  17CB 19 00         mov al, 0
0429+  17CD 05 03         syscall sys_io        ; display AH
0430+  17CF 24            mov ah, bl        ; retrieve al
0431+  17D0 19 00         mov al, 0
0432+  17D2 05 03         syscall sys_io        ; display AL
0433+  17D4             
0434+  17D4 EA            pop bl
0435+  17D5 07 EF 15      call _itoa        ; convert bh to char in A
0436+  17D8 2F            mov bl, al        ; save al
0437+  17D9 19 00         mov al, 0
0438+  17DB 05 03         syscall sys_io        ; display AH
0439+  17DD 24            mov ah, bl        ; retrieve al
0440+  17DE 19 00         mov al, 0
0441+  17E0 05 03         syscall sys_io        ; display AL
0442+  17E2             
0443+  17E2 E5            pop b
0444+  17E3 E4            pop a
0445+  17E4 09            ret
0446+  17E5             
0447+  17E5             ;-----------------------------------------------------------------------------
0448+  17E5             ; INPUT 16BIT HEX INTEGER
0449+  17E5             ; read 16bit integer into A
0450+  17E5             ;-----------------------------------------------------------------------------
0451+  17E5             scan_u16x:
0452+  17E5 F8 10 00      enter 16
0453+  17E8 D8            push b
0454+  17E9 DA            push d
0455+  17EA             
0456+  17EA FA F1 FF      lea d, [bp + -15]
0457+  17ED 07 28 16      call _gets        ; get number
0458+  17F0             
0459+  17F0 32            mov bl, [d]
0460+  17F1 37            mov bh, bl
0461+  17F2 33 01 00      mov bl, [d + 1]
0462+  17F5 07 DF 15      call _atoi        ; convert to int in AL
0463+  17F8 23            mov ah, al        ; move to AH
0464+  17F9             
0465+  17F9 33 02 00      mov bl, [d + 2]
0466+  17FC 37            mov bh, bl
0467+  17FD 33 03 00      mov bl, [d + 3]
0468+  1800 07 DF 15      call _atoi        ; convert to int in AL
0469+  1803             
0470+  1803 E7            pop d
0471+  1804 E5            pop b
0472+  1805 F9            leave
0473+  1806 09            ret
0474+  1807             
0475+  1807             ;-----------------------------------------------------------------------------
0476+  1807             ; PRINT 8bit HEX INTEGER
0477+  1807             ; integer value in reg bl
0478+  1807             ;-----------------------------------------------------------------------------
0479+  1807             print_u8x:
0480+  1807 D7            push a
0481+  1808 DD            push bl
0482+  1809             
0483+  1809 07 EF 15      call _itoa        ; convert bl to char in A
0484+  180C 2F            mov bl, al        ; save al
0485+  180D 19 00         mov al, 0
0486+  180F 05 03         syscall sys_io        ; display AH
0487+  1811 24            mov ah, bl        ; retrieve al
0488+  1812 19 00         mov al, 0
0489+  1814 05 03         syscall sys_io        ; display AL
0490+  1816             
0491+  1816 EA            pop bl
0492+  1817 E4            pop a
0493+  1818 09            ret
0494+  1819             
0495+  1819             ;-----------------------------------------------------------------------------
0496+  1819             ; print 8bit decimal unsigned number
0497+  1819             ; input number in AL
0498+  1819             ;-----------------------------------------------------------------------------
0499+  1819             print_u8d:
0500+  1819 D7            push a
0501+  181A D8            push b
0502+  181B             
0503+  181B 22 00         mov ah, 0
0504+  181D 26 64 00      mov b, 100
0505+  1820 AE            div a, b
0506+  1821 D8            push b      ; save remainder
0507+  1822 B9 00         cmp al, 0
0508+  1824 C6 2E 18      je skip100
0509+  1827 6A 30         add al, $30
0510+  1829 23            mov ah, al
0511+  182A 19 00         mov al, 0
0512+  182C 05 03         syscall sys_io  ; print coeff
0513+  182E             skip100:
0514+  182E E4            pop a
0515+  182F 22 00         mov ah, 0
0516+  1831 26 0A 00      mov b, 10
0517+  1834 AE            div a, b
0518+  1835 D8            push b      ; save remainder
0519+  1836 B9 00         cmp al, 0
0520+  1838 C6 42 18      je skip10
0521+  183B 6A 30         add al, $30
0522+  183D 23            mov ah, al
0523+  183E 19 00         mov al, 0
0524+  1840 05 03         syscall sys_io  ; print coeff
0525+  1842             skip10:
0526+  1842 E4            pop a
0527+  1843 1B            mov al, bl
0528+  1844 6A 30         add al, $30
0529+  1846 23            mov ah, al
0530+  1847 19 00         mov al, 0
0531+  1849 05 03         syscall sys_io  ; print coeff
0532+  184B E5            pop b
0533+  184C E4            pop a
0534+  184D 09            ret
0535+  184E             
0536+  184E             ;-----------------------------------------------------------------------------
0537+  184E             ; INPUT 8BIT HEX INTEGER
0538+  184E             ; read 8bit integer into AL
0539+  184E             ;-----------------------------------------------------------------------------
0540+  184E             scan_u8x:
0541+  184E F8 04 00      enter 4
0542+  1851 D8            push b
0543+  1852 DA            push d
0544+  1853             
0545+  1853 FA FD FF      lea d, [bp + -3]
0546+  1856 07 28 16      call _gets        ; get number
0547+  1859             
0548+  1859 32            mov bl, [d]
0549+  185A 37            mov bh, bl
0550+  185B 33 01 00      mov bl, [d + 1]
0551+  185E 07 DF 15      call _atoi        ; convert to int in AL
0552+  1861             
0553+  1861 E7            pop d
0554+  1862 E5            pop b
0555+  1863 F9            leave
0556+  1864 09            ret
0557+  1865             
0558+  1865             ;-----------------------------------------------------------------------------
0559+  1865             ; input decimal number
0560+  1865             ; result in A
0561+  1865             ; 655'\0'
0562+  1865             ; low--------high
0563+  1865             ;-----------------------------------------------------------------------------
0564+  1865             scan_u16d:
0565+  1865 F8 08 00      enter 8
0566+  1868 E2            push si
0567+  1869 D8            push b
0568+  186A D9            push c
0569+  186B DA            push d
0570+  186C FA F9 FF      lea d, [bp +- 7]
0571+  186F 07 28 16      call _gets
0572+  1872 07 81 15      call _strlen      ; get string length in C
0573+  1875 7E            dec c
0574+  1876 FD 4E         mov si, d
0575+  1878 12            mov a, c
0576+  1879 FD 99         shl a
0577+  187B 3B B7 18      mov d, table_power
0578+  187E 59            add d, a
0579+  187F 38 00 00      mov c, 0
0580+  1882             mul_loop:
0581+  1882 F6            lodsb      ; load ASCII to al
0582+  1883 B9 00         cmp al, 0
0583+  1885 C6 98 18      je mul_exit
0584+  1888 6F 30         sub al, $30    ; make into integer
0585+  188A 22 00         mov ah, 0
0586+  188C 2A            mov b, [d]
0587+  188D AC            mul a, b      ; result in B since it fits in 16bits
0588+  188E 11            mov a, b
0589+  188F 28            mov b, c
0590+  1890 54            add a, b
0591+  1891 39            mov c, a
0592+  1892 63 02 00      sub d, 2
0593+  1895 0A 82 18      jmp mul_loop
0594+  1898             mul_exit:
0595+  1898 12            mov a, c
0596+  1899 E7            pop d
0597+  189A E6            pop c
0598+  189B E5            pop b
0599+  189C EF            pop si
0600+  189D F9            leave
0601+  189E 09            ret
0602+  189F             
0603+  189F 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  18A3 34 35 36 37 
0603+  18A7 38 39 41 42 
0603+  18AB 43 44 45 46 
0604+  18AF 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  18B3 1B 5B 48 00 
0605+  18B7             
0606+  18B7             table_power:
0607+  18B7 01 00         .dw 1
0608+  18B9 0A 00         .dw 10
0609+  18BB 64 00         .dw 100
0610+  18BD E8 03         .dw 1000
0611+  18BF 10 27         .dw 100002700   18C1             ; --- END INLINE ASM BLOCK
2701   18C1             
2702   18C1 F9            leave
2703   18C2 09            ret
2704   18C3             
2705   18C3             base64_char_value:
2706   18C3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2707   18C6             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
2708   18C6             _if42_cond:
2709   18C6 FA 05 00      lea d, [bp + 5] ; $c
2710   18C9 32            mov bl, [d]
2711   18CA A7 00         mov bh, 0
2712   18CC             ; START RELATIONAL
2713   18CC D7            push a
2714   18CD 11            mov a, b
2715   18CE 26 41 00      mov b, $41
2716   18D1 B0            cmp a, b
2717   18D2 FD 80         sge ; >=
2718   18D4 E4            pop a
2719   18D5             ; END RELATIONAL
2720   18D5             ; START LOGICAL AND
2721   18D5 D7            push a
2722   18D6 11            mov a, b
2723   18D7 FA 05 00      lea d, [bp + 5] ; $c
2724   18DA 32            mov bl, [d]
2725   18DB A7 00         mov bh, 0
2726   18DD             ; START RELATIONAL
2727   18DD D7            push a
2728   18DE 11            mov a, b
2729   18DF 26 5A 00      mov b, $5a
2730   18E2 B0            cmp a, b
2731   18E3 FD 73         slt ; <= (signed)
2732   18E5 E4            pop a
2733   18E6             ; END RELATIONAL
2734   18E6 FD A7         sand a, b
2735   18E8 E4            pop a
2736   18E9             ; END LOGICAL AND
2737   18E9 C0 00 00      cmp b, 0
2738   18EC C6 02 19      je _if42_exit
2739   18EF             _if42_true:
2740   18EF             ;; return c - 'A'; 
2741   18EF FA 05 00      lea d, [bp + 5] ; $c
2742   18F2 32            mov bl, [d]
2743   18F3 A7 00         mov bh, 0
2744   18F5             ; START TERMS
2745   18F5 D7            push a
2746   18F6 11            mov a, b
2747   18F7 26 41 00      mov b, $41
2748   18FA 60            sub a, b
2749   18FB 27            mov b, a
2750   18FC E4            pop a
2751   18FD             ; END TERMS
2752   18FD F9            leave
2753   18FE 09            ret
2754   18FF 0A 02 19      jmp _if42_exit
2755   1902             _if42_exit:
2756   1902             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
2757   1902             _if43_cond:
2758   1902 FA 05 00      lea d, [bp + 5] ; $c
2759   1905 32            mov bl, [d]
2760   1906 A7 00         mov bh, 0
2761   1908             ; START RELATIONAL
2762   1908 D7            push a
2763   1909 11            mov a, b
2764   190A 26 61 00      mov b, $61
2765   190D B0            cmp a, b
2766   190E FD 80         sge ; >=
2767   1910 E4            pop a
2768   1911             ; END RELATIONAL
2769   1911             ; START LOGICAL AND
2770   1911 D7            push a
2771   1912 11            mov a, b
2772   1913 FA 05 00      lea d, [bp + 5] ; $c
2773   1916 32            mov bl, [d]
2774   1917 A7 00         mov bh, 0
2775   1919             ; START RELATIONAL
2776   1919 D7            push a
2777   191A 11            mov a, b
2778   191B 26 7A 00      mov b, $7a
2779   191E B0            cmp a, b
2780   191F FD 73         slt ; <= (signed)
2781   1921 E4            pop a
2782   1922             ; END RELATIONAL
2783   1922 FD A7         sand a, b
2784   1924 E4            pop a
2785   1925             ; END LOGICAL AND
2786   1925 C0 00 00      cmp b, 0
2787   1928 C6 43 19      je _if43_exit
2788   192B             _if43_true:
2789   192B             ;; return c - 'a' + 26; 
2790   192B FA 05 00      lea d, [bp + 5] ; $c
2791   192E 32            mov bl, [d]
2792   192F A7 00         mov bh, 0
2793   1931             ; START TERMS
2794   1931 D7            push a
2795   1932 11            mov a, b
2796   1933 26 61 00      mov b, $61
2797   1936 60            sub a, b
2798   1937 27            mov b, a
2799   1938 11            mov a, b
2800   1939 26 1A 00      mov b, $1a
2801   193C 56            add b, a
2802   193D E4            pop a
2803   193E             ; END TERMS
2804   193E F9            leave
2805   193F 09            ret
2806   1940 0A 43 19      jmp _if43_exit
2807   1943             _if43_exit:
2808   1943             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
2809   1943             _if44_cond:
2810   1943 FA 05 00      lea d, [bp + 5] ; $c
2811   1946 32            mov bl, [d]
2812   1947 A7 00         mov bh, 0
2813   1949             ; START RELATIONAL
2814   1949 D7            push a
2815   194A 11            mov a, b
2816   194B 26 30 00      mov b, $30
2817   194E B0            cmp a, b
2818   194F FD 80         sge ; >=
2819   1951 E4            pop a
2820   1952             ; END RELATIONAL
2821   1952             ; START LOGICAL AND
2822   1952 D7            push a
2823   1953 11            mov a, b
2824   1954 FA 05 00      lea d, [bp + 5] ; $c
2825   1957 32            mov bl, [d]
2826   1958 A7 00         mov bh, 0
2827   195A             ; START RELATIONAL
2828   195A D7            push a
2829   195B 11            mov a, b
2830   195C 26 39 00      mov b, $39
2831   195F B0            cmp a, b
2832   1960 FD 73         slt ; <= (signed)
2833   1962 E4            pop a
2834   1963             ; END RELATIONAL
2835   1963 FD A7         sand a, b
2836   1965 E4            pop a
2837   1966             ; END LOGICAL AND
2838   1966 C0 00 00      cmp b, 0
2839   1969 C6 84 19      je _if44_exit
2840   196C             _if44_true:
2841   196C             ;; return c - '0' + 52; 
2842   196C FA 05 00      lea d, [bp + 5] ; $c
2843   196F 32            mov bl, [d]
2844   1970 A7 00         mov bh, 0
2845   1972             ; START TERMS
2846   1972 D7            push a
2847   1973 11            mov a, b
2848   1974 26 30 00      mov b, $30
2849   1977 60            sub a, b
2850   1978 27            mov b, a
2851   1979 11            mov a, b
2852   197A 26 34 00      mov b, $34
2853   197D 56            add b, a
2854   197E E4            pop a
2855   197F             ; END TERMS
2856   197F F9            leave
2857   1980 09            ret
2858   1981 0A 84 19      jmp _if44_exit
2859   1984             _if44_exit:
2860   1984             ;; if (c == '+') return 62; 
2861   1984             _if45_cond:
2862   1984 FA 05 00      lea d, [bp + 5] ; $c
2863   1987 32            mov bl, [d]
2864   1988 A7 00         mov bh, 0
2865   198A             ; START RELATIONAL
2866   198A D7            push a
2867   198B 11            mov a, b
2868   198C 26 2B 00      mov b, $2b
2869   198F B0            cmp a, b
2870   1990 FD 71         seq ; ==
2871   1992 E4            pop a
2872   1993             ; END RELATIONAL
2873   1993 C0 00 00      cmp b, 0
2874   1996 C6 A1 19      je _if45_exit
2875   1999             _if45_true:
2876   1999             ;; return 62; 
2877   1999 26 3E 00      mov b, $3e
2878   199C F9            leave
2879   199D 09            ret
2880   199E 0A A1 19      jmp _if45_exit
2881   19A1             _if45_exit:
2882   19A1             ;; if (c == '/') return 63; 
2883   19A1             _if46_cond:
2884   19A1 FA 05 00      lea d, [bp + 5] ; $c
2885   19A4 32            mov bl, [d]
2886   19A5 A7 00         mov bh, 0
2887   19A7             ; START RELATIONAL
2888   19A7 D7            push a
2889   19A8 11            mov a, b
2890   19A9 26 2F 00      mov b, $2f
2891   19AC B0            cmp a, b
2892   19AD FD 71         seq ; ==
2893   19AF E4            pop a
2894   19B0             ; END RELATIONAL
2895   19B0 C0 00 00      cmp b, 0
2896   19B3 C6 BE 19      je _if46_exit
2897   19B6             _if46_true:
2898   19B6             ;; return 63; 
2899   19B6 26 3F 00      mov b, $3f
2900   19B9 F9            leave
2901   19BA 09            ret
2902   19BB 0A BE 19      jmp _if46_exit
2903   19BE             _if46_exit:
2904   19BE             ;; return -1; 
2905   19BE 26 FF FF      mov b, $ffff
2906   19C1 F9            leave
2907   19C2 09            ret
2908   19C3             
2909   19C3             base64_decode:
2910   19C3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2911   19C6             ;; int i = 0, j = 0, k = 0; 
2912   19C6             ; $i 
2913   19C6 10 00 00      mov a, $0
2914   19C9 45 FF FF      mov [bp + -1], a
2915   19CC             ; $j 
2916   19CC 10 00 00      mov a, $0
2917   19CF 45 FD FF      mov [bp + -3], a
2918   19D2             ; $k 
2919   19D2 10 00 00      mov a, $0
2920   19D5 45 FB FF      mov [bp + -5], a
2921   19D8             ;; int input_len; 
2922   19D8             ; $input_len 
2923   19D8             ;; unsigned char input_buffer[4]; 
2924   19D8             ; $input_buffer 
2925   19D8             ;; unsigned char output_buffer[3]; 
2926   19D8             ; $output_buffer 
2927   19D8             ;; input_len = strlen(input); 
2928   19D8 FA F9 FF      lea d, [bp + -7] ; $input_len
2929   19DB DA            push d
2930   19DC FA 05 00      lea d, [bp + 5] ; $input
2931   19DF 2A            mov b, [d]
2932   19E0 FD AB         swp b
2933   19E2 D8            push b
2934   19E3 07 8C 05      call strlen
2935   19E6 51 02 00      add sp, 2
2936   19E9 E7            pop d
2937   19EA FD 43         mov [d], b
2938   19EC             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
2939   19EC             _while47_cond:
2940   19EC FA F9 FF      lea d, [bp + -7] ; $input_len
2941   19EF 2A            mov b, [d]
2942   19F0 FD 7D         dec b
2943   19F2 FA F9 FF      lea d, [bp + -7] ; $input_len
2944   19F5 FD 43         mov [d], b
2945   19F7 FD 77         inc b
2946   19F9             ; START LOGICAL AND
2947   19F9 D7            push a
2948   19FA 11            mov a, b
2949   19FB FA 05 00      lea d, [bp + 5] ; $input
2950   19FE FD 2A         mov d, [d]
2951   1A00 D7            push a
2952   1A01 DA            push d
2953   1A02 FA FB FF      lea d, [bp + -5] ; $k
2954   1A05 2A            mov b, [d]
2955   1A06 E7            pop d
2956   1A07 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2957   1A0B E4            pop a
2958   1A0C 32            mov bl, [d]
2959   1A0D A7 00         mov bh, 0
2960   1A0F             ; START RELATIONAL
2961   1A0F D7            push a
2962   1A10 11            mov a, b
2963   1A11 26 3D 00      mov b, $3d
2964   1A14 B0            cmp a, b
2965   1A15 FD 72         sneq ; !=
2966   1A17 E4            pop a
2967   1A18             ; END RELATIONAL
2968   1A18 FD A7         sand a, b
2969   1A1A 11            mov a, b
2970   1A1B FA 05 00      lea d, [bp + 5] ; $input
2971   1A1E FD 2A         mov d, [d]
2972   1A20 D7            push a
2973   1A21 DA            push d
2974   1A22 FA FB FF      lea d, [bp + -5] ; $k
2975   1A25 2A            mov b, [d]
2976   1A26 E7            pop d
2977   1A27 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2978   1A2B E4            pop a
2979   1A2C 32            mov bl, [d]
2980   1A2D A7 00         mov bh, 0
2981   1A2F DD            push bl
2982   1A30 07 C3 18      call base64_char_value
2983   1A33 51 01 00      add sp, 1
2984   1A36             ; START RELATIONAL
2985   1A36 D7            push a
2986   1A37 11            mov a, b
2987   1A38 26 FF FF      mov b, $ffff
2988   1A3B B0            cmp a, b
2989   1A3C FD 72         sneq ; !=
2990   1A3E E4            pop a
2991   1A3F             ; END RELATIONAL
2992   1A3F FD A7         sand a, b
2993   1A41 E4            pop a
2994   1A42             ; END LOGICAL AND
2995   1A42 C0 00 00      cmp b, 0
2996   1A45 C6 2D 1C      je _while47_exit
2997   1A48             _while47_block:
2998   1A48             ;; input_buffer[i++] = input[k++]; 
2999   1A48 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3000   1A4B D7            push a
3001   1A4C DA            push d
3002   1A4D FA FF FF      lea d, [bp + -1] ; $i
3003   1A50 2A            mov b, [d]
3004   1A51 FD 77         inc b
3005   1A53 FA FF FF      lea d, [bp + -1] ; $i
3006   1A56 FD 43         mov [d], b
3007   1A58 FD 7D         dec b
3008   1A5A E7            pop d
3009   1A5B 5A            add d, b
3010   1A5C E4            pop a
3011   1A5D DA            push d
3012   1A5E FA 05 00      lea d, [bp + 5] ; $input
3013   1A61 FD 2A         mov d, [d]
3014   1A63 D7            push a
3015   1A64 DA            push d
3016   1A65 FA FB FF      lea d, [bp + -5] ; $k
3017   1A68 2A            mov b, [d]
3018   1A69 FD 77         inc b
3019   1A6B FA FB FF      lea d, [bp + -5] ; $k
3020   1A6E FD 43         mov [d], b
3021   1A70 FD 7D         dec b
3022   1A72 E7            pop d
3023   1A73 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3024   1A77 E4            pop a
3025   1A78 32            mov bl, [d]
3026   1A79 A7 00         mov bh, 0
3027   1A7B E7            pop d
3028   1A7C FD 3E         mov [d], bl
3029   1A7E             ;; if (i == 4) { 
3030   1A7E             _if48_cond:
3031   1A7E FA FF FF      lea d, [bp + -1] ; $i
3032   1A81 2A            mov b, [d]
3033   1A82             ; START RELATIONAL
3034   1A82 D7            push a
3035   1A83 11            mov a, b
3036   1A84 26 04 00      mov b, $4
3037   1A87 B0            cmp a, b
3038   1A88 FD 71         seq ; ==
3039   1A8A E4            pop a
3040   1A8B             ; END RELATIONAL
3041   1A8B C0 00 00      cmp b, 0
3042   1A8E C6 2A 1C      je _if48_exit
3043   1A91             _if48_true:
3044   1A91             ;; for (i = 0; i < 4; i++) { 
3045   1A91             _for49_init:
3046   1A91 FA FF FF      lea d, [bp + -1] ; $i
3047   1A94 DA            push d
3048   1A95 26 00 00      mov b, $0
3049   1A98 E7            pop d
3050   1A99 FD 43         mov [d], b
3051   1A9B             _for49_cond:
3052   1A9B FA FF FF      lea d, [bp + -1] ; $i
3053   1A9E 2A            mov b, [d]
3054   1A9F             ; START RELATIONAL
3055   1A9F D7            push a
3056   1AA0 11            mov a, b
3057   1AA1 26 04 00      mov b, $4
3058   1AA4 B0            cmp a, b
3059   1AA5 FD 73         slt ; < (signed)
3060   1AA7 E4            pop a
3061   1AA8             ; END RELATIONAL
3062   1AA8 C0 00 00      cmp b, 0
3063   1AAB C6 E4 1A      je _for49_exit
3064   1AAE             _for49_block:
3065   1AAE             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
3066   1AAE FA F5 FF      lea d, [bp + -11] ; $input_buffer
3067   1AB1 D7            push a
3068   1AB2 DA            push d
3069   1AB3 FA FF FF      lea d, [bp + -1] ; $i
3070   1AB6 2A            mov b, [d]
3071   1AB7 E7            pop d
3072   1AB8 5A            add d, b
3073   1AB9 E4            pop a
3074   1ABA DA            push d
3075   1ABB FA F5 FF      lea d, [bp + -11] ; $input_buffer
3076   1ABE D7            push a
3077   1ABF DA            push d
3078   1AC0 FA FF FF      lea d, [bp + -1] ; $i
3079   1AC3 2A            mov b, [d]
3080   1AC4 E7            pop d
3081   1AC5 5A            add d, b
3082   1AC6 E4            pop a
3083   1AC7 32            mov bl, [d]
3084   1AC8 A7 00         mov bh, 0
3085   1ACA DD            push bl
3086   1ACB 07 C3 18      call base64_char_value
3087   1ACE 51 01 00      add sp, 1
3088   1AD1 E7            pop d
3089   1AD2 FD 3E         mov [d], bl
3090   1AD4             _for49_update:
3091   1AD4 FA FF FF      lea d, [bp + -1] ; $i
3092   1AD7 2A            mov b, [d]
3093   1AD8 FD 77         inc b
3094   1ADA FA FF FF      lea d, [bp + -1] ; $i
3095   1ADD FD 43         mov [d], b
3096   1ADF FD 7D         dec b
3097   1AE1 0A 9B 1A      jmp _for49_cond
3098   1AE4             _for49_exit:
3099   1AE4             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3100   1AE4 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3101   1AE7 D7            push a
3102   1AE8 DA            push d
3103   1AE9 26 00 00      mov b, $0
3104   1AEC E7            pop d
3105   1AED 5A            add d, b
3106   1AEE E4            pop a
3107   1AEF DA            push d
3108   1AF0 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3109   1AF3 D7            push a
3110   1AF4 DA            push d
3111   1AF5 26 00 00      mov b, $0
3112   1AF8 E7            pop d
3113   1AF9 5A            add d, b
3114   1AFA E4            pop a
3115   1AFB 32            mov bl, [d]
3116   1AFC A7 00         mov bh, 0
3117   1AFE             ; START SHIFT
3118   1AFE D7            push a
3119   1AFF 11            mov a, b
3120   1B00 26 02 00      mov b, $2
3121   1B03 FD 39         mov c, b
3122   1B05 9D            shl a, cl
3123   1B06 27            mov b, a
3124   1B07 E4            pop a
3125   1B08             ; END SHIFT
3126   1B08             ; START TERMS
3127   1B08 D7            push a
3128   1B09 11            mov a, b
3129   1B0A FA F5 FF      lea d, [bp + -11] ; $input_buffer
3130   1B0D D7            push a
3131   1B0E DA            push d
3132   1B0F 26 01 00      mov b, $1
3133   1B12 E7            pop d
3134   1B13 5A            add d, b
3135   1B14 E4            pop a
3136   1B15 32            mov bl, [d]
3137   1B16 A7 00         mov bh, 0
3138   1B18 D7            push a
3139   1B19 11            mov a, b
3140   1B1A 26 30 00      mov b, $30
3141   1B1D FD 92         and b, a ; &
3142   1B1F E4            pop a
3143   1B20             ; START SHIFT
3144   1B20 D7            push a
3145   1B21 11            mov a, b
3146   1B22 26 04 00      mov b, $4
3147   1B25 FD 39         mov c, b
3148   1B27 A5            ashr a, cl
3149   1B28 27            mov b, a
3150   1B29 E4            pop a
3151   1B2A             ; END SHIFT
3152   1B2A 56            add b, a
3153   1B2B E4            pop a
3154   1B2C             ; END TERMS
3155   1B2C E7            pop d
3156   1B2D FD 3E         mov [d], bl
3157   1B2F             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3158   1B2F FA F2 FF      lea d, [bp + -14] ; $output_buffer
3159   1B32 D7            push a
3160   1B33 DA            push d
3161   1B34 26 01 00      mov b, $1
3162   1B37 E7            pop d
3163   1B38 5A            add d, b
3164   1B39 E4            pop a
3165   1B3A DA            push d
3166   1B3B FA F5 FF      lea d, [bp + -11] ; $input_buffer
3167   1B3E D7            push a
3168   1B3F DA            push d
3169   1B40 26 01 00      mov b, $1
3170   1B43 E7            pop d
3171   1B44 5A            add d, b
3172   1B45 E4            pop a
3173   1B46 32            mov bl, [d]
3174   1B47 A7 00         mov bh, 0
3175   1B49 D7            push a
3176   1B4A 11            mov a, b
3177   1B4B 26 0F 00      mov b, $f
3178   1B4E FD 92         and b, a ; &
3179   1B50 E4            pop a
3180   1B51             ; START SHIFT
3181   1B51 D7            push a
3182   1B52 11            mov a, b
3183   1B53 26 04 00      mov b, $4
3184   1B56 FD 39         mov c, b
3185   1B58 9D            shl a, cl
3186   1B59 27            mov b, a
3187   1B5A E4            pop a
3188   1B5B             ; END SHIFT
3189   1B5B             ; START TERMS
3190   1B5B D7            push a
3191   1B5C 11            mov a, b
3192   1B5D FA F5 FF      lea d, [bp + -11] ; $input_buffer
3193   1B60 D7            push a
3194   1B61 DA            push d
3195   1B62 26 02 00      mov b, $2
3196   1B65 E7            pop d
3197   1B66 5A            add d, b
3198   1B67 E4            pop a
3199   1B68 32            mov bl, [d]
3200   1B69 A7 00         mov bh, 0
3201   1B6B D7            push a
3202   1B6C 11            mov a, b
3203   1B6D 26 3C 00      mov b, $3c
3204   1B70 FD 92         and b, a ; &
3205   1B72 E4            pop a
3206   1B73             ; START SHIFT
3207   1B73 D7            push a
3208   1B74 11            mov a, b
3209   1B75 26 02 00      mov b, $2
3210   1B78 FD 39         mov c, b
3211   1B7A A5            ashr a, cl
3212   1B7B 27            mov b, a
3213   1B7C E4            pop a
3214   1B7D             ; END SHIFT
3215   1B7D 56            add b, a
3216   1B7E E4            pop a
3217   1B7F             ; END TERMS
3218   1B7F E7            pop d
3219   1B80 FD 3E         mov [d], bl
3220   1B82             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
3221   1B82 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3222   1B85 D7            push a
3223   1B86 DA            push d
3224   1B87 26 02 00      mov b, $2
3225   1B8A E7            pop d
3226   1B8B 5A            add d, b
3227   1B8C E4            pop a
3228   1B8D DA            push d
3229   1B8E FA F5 FF      lea d, [bp + -11] ; $input_buffer
3230   1B91 D7            push a
3231   1B92 DA            push d
3232   1B93 26 02 00      mov b, $2
3233   1B96 E7            pop d
3234   1B97 5A            add d, b
3235   1B98 E4            pop a
3236   1B99 32            mov bl, [d]
3237   1B9A A7 00         mov bh, 0
3238   1B9C D7            push a
3239   1B9D 11            mov a, b
3240   1B9E 26 03 00      mov b, $3
3241   1BA1 FD 92         and b, a ; &
3242   1BA3 E4            pop a
3243   1BA4             ; START SHIFT
3244   1BA4 D7            push a
3245   1BA5 11            mov a, b
3246   1BA6 26 06 00      mov b, $6
3247   1BA9 FD 39         mov c, b
3248   1BAB 9D            shl a, cl
3249   1BAC 27            mov b, a
3250   1BAD E4            pop a
3251   1BAE             ; END SHIFT
3252   1BAE             ; START TERMS
3253   1BAE D7            push a
3254   1BAF 11            mov a, b
3255   1BB0 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3256   1BB3 D7            push a
3257   1BB4 DA            push d
3258   1BB5 26 03 00      mov b, $3
3259   1BB8 E7            pop d
3260   1BB9 5A            add d, b
3261   1BBA E4            pop a
3262   1BBB 32            mov bl, [d]
3263   1BBC A7 00         mov bh, 0
3264   1BBE 56            add b, a
3265   1BBF E4            pop a
3266   1BC0             ; END TERMS
3267   1BC0 E7            pop d
3268   1BC1 FD 3E         mov [d], bl
3269   1BC3             ;; for (i = 0; i < 3; i++) { 
3270   1BC3             _for50_init:
3271   1BC3 FA FF FF      lea d, [bp + -1] ; $i
3272   1BC6 DA            push d
3273   1BC7 26 00 00      mov b, $0
3274   1BCA E7            pop d
3275   1BCB FD 43         mov [d], b
3276   1BCD             _for50_cond:
3277   1BCD FA FF FF      lea d, [bp + -1] ; $i
3278   1BD0 2A            mov b, [d]
3279   1BD1             ; START RELATIONAL
3280   1BD1 D7            push a
3281   1BD2 11            mov a, b
3282   1BD3 26 03 00      mov b, $3
3283   1BD6 B0            cmp a, b
3284   1BD7 FD 73         slt ; < (signed)
3285   1BD9 E4            pop a
3286   1BDA             ; END RELATIONAL
3287   1BDA C0 00 00      cmp b, 0
3288   1BDD C6 1D 1C      je _for50_exit
3289   1BE0             _for50_block:
3290   1BE0             ;; output[j++] = output_buffer[i]; 
3291   1BE0 FA 07 00      lea d, [bp + 7] ; $output
3292   1BE3 FD 2A         mov d, [d]
3293   1BE5 D7            push a
3294   1BE6 DA            push d
3295   1BE7 FA FD FF      lea d, [bp + -3] ; $j
3296   1BEA 2A            mov b, [d]
3297   1BEB FD 77         inc b
3298   1BED FA FD FF      lea d, [bp + -3] ; $j
3299   1BF0 FD 43         mov [d], b
3300   1BF2 FD 7D         dec b
3301   1BF4 E7            pop d
3302   1BF5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3303   1BF9 E4            pop a
3304   1BFA DA            push d
3305   1BFB FA F2 FF      lea d, [bp + -14] ; $output_buffer
3306   1BFE D7            push a
3307   1BFF DA            push d
3308   1C00 FA FF FF      lea d, [bp + -1] ; $i
3309   1C03 2A            mov b, [d]
3310   1C04 E7            pop d
3311   1C05 5A            add d, b
3312   1C06 E4            pop a
3313   1C07 32            mov bl, [d]
3314   1C08 A7 00         mov bh, 0
3315   1C0A E7            pop d
3316   1C0B FD 3E         mov [d], bl
3317   1C0D             _for50_update:
3318   1C0D FA FF FF      lea d, [bp + -1] ; $i
3319   1C10 2A            mov b, [d]
3320   1C11 FD 77         inc b
3321   1C13 FA FF FF      lea d, [bp + -1] ; $i
3322   1C16 FD 43         mov [d], b
3323   1C18 FD 7D         dec b
3324   1C1A 0A CD 1B      jmp _for50_cond
3325   1C1D             _for50_exit:
3326   1C1D             ;; i = 0; 
3327   1C1D FA FF FF      lea d, [bp + -1] ; $i
3328   1C20 DA            push d
3329   1C21 26 00 00      mov b, $0
3330   1C24 E7            pop d
3331   1C25 FD 43         mov [d], b
3332   1C27 0A 2A 1C      jmp _if48_exit
3333   1C2A             _if48_exit:
3334   1C2A 0A EC 19      jmp _while47_cond
3335   1C2D             _while47_exit:
3336   1C2D             ;; if (i) { 
3337   1C2D             _if51_cond:
3338   1C2D FA FF FF      lea d, [bp + -1] ; $i
3339   1C30 2A            mov b, [d]
3340   1C31 C0 00 00      cmp b, 0
3341   1C34 C6 CF 1D      je _if51_exit
3342   1C37             _if51_true:
3343   1C37             ;; for (k = i; k < 4; k++) { 
3344   1C37             _for52_init:
3345   1C37 FA FB FF      lea d, [bp + -5] ; $k
3346   1C3A DA            push d
3347   1C3B FA FF FF      lea d, [bp + -1] ; $i
3348   1C3E 2A            mov b, [d]
3349   1C3F E7            pop d
3350   1C40 FD 43         mov [d], b
3351   1C42             _for52_cond:
3352   1C42 FA FB FF      lea d, [bp + -5] ; $k
3353   1C45 2A            mov b, [d]
3354   1C46             ; START RELATIONAL
3355   1C46 D7            push a
3356   1C47 11            mov a, b
3357   1C48 26 04 00      mov b, $4
3358   1C4B B0            cmp a, b
3359   1C4C FD 73         slt ; < (signed)
3360   1C4E E4            pop a
3361   1C4F             ; END RELATIONAL
3362   1C4F C0 00 00      cmp b, 0
3363   1C52 C6 78 1C      je _for52_exit
3364   1C55             _for52_block:
3365   1C55             ;; input_buffer[k] = 0; 
3366   1C55 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3367   1C58 D7            push a
3368   1C59 DA            push d
3369   1C5A FA FB FF      lea d, [bp + -5] ; $k
3370   1C5D 2A            mov b, [d]
3371   1C5E E7            pop d
3372   1C5F 5A            add d, b
3373   1C60 E4            pop a
3374   1C61 DA            push d
3375   1C62 26 00 00      mov b, $0
3376   1C65 E7            pop d
3377   1C66 FD 3E         mov [d], bl
3378   1C68             _for52_update:
3379   1C68 FA FB FF      lea d, [bp + -5] ; $k
3380   1C6B 2A            mov b, [d]
3381   1C6C FD 77         inc b
3382   1C6E FA FB FF      lea d, [bp + -5] ; $k
3383   1C71 FD 43         mov [d], b
3384   1C73 FD 7D         dec b
3385   1C75 0A 42 1C      jmp _for52_cond
3386   1C78             _for52_exit:
3387   1C78             ;; for (k = 0; k < 4; k++) { 
3388   1C78             _for53_init:
3389   1C78 FA FB FF      lea d, [bp + -5] ; $k
3390   1C7B DA            push d
3391   1C7C 26 00 00      mov b, $0
3392   1C7F E7            pop d
3393   1C80 FD 43         mov [d], b
3394   1C82             _for53_cond:
3395   1C82 FA FB FF      lea d, [bp + -5] ; $k
3396   1C85 2A            mov b, [d]
3397   1C86             ; START RELATIONAL
3398   1C86 D7            push a
3399   1C87 11            mov a, b
3400   1C88 26 04 00      mov b, $4
3401   1C8B B0            cmp a, b
3402   1C8C FD 73         slt ; < (signed)
3403   1C8E E4            pop a
3404   1C8F             ; END RELATIONAL
3405   1C8F C0 00 00      cmp b, 0
3406   1C92 C6 CB 1C      je _for53_exit
3407   1C95             _for53_block:
3408   1C95             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
3409   1C95 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3410   1C98 D7            push a
3411   1C99 DA            push d
3412   1C9A FA FB FF      lea d, [bp + -5] ; $k
3413   1C9D 2A            mov b, [d]
3414   1C9E E7            pop d
3415   1C9F 5A            add d, b
3416   1CA0 E4            pop a
3417   1CA1 DA            push d
3418   1CA2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3419   1CA5 D7            push a
3420   1CA6 DA            push d
3421   1CA7 FA FB FF      lea d, [bp + -5] ; $k
3422   1CAA 2A            mov b, [d]
3423   1CAB E7            pop d
3424   1CAC 5A            add d, b
3425   1CAD E4            pop a
3426   1CAE 32            mov bl, [d]
3427   1CAF A7 00         mov bh, 0
3428   1CB1 DD            push bl
3429   1CB2 07 C3 18      call base64_char_value
3430   1CB5 51 01 00      add sp, 1
3431   1CB8 E7            pop d
3432   1CB9 FD 3E         mov [d], bl
3433   1CBB             _for53_update:
3434   1CBB FA FB FF      lea d, [bp + -5] ; $k
3435   1CBE 2A            mov b, [d]
3436   1CBF FD 77         inc b
3437   1CC1 FA FB FF      lea d, [bp + -5] ; $k
3438   1CC4 FD 43         mov [d], b
3439   1CC6 FD 7D         dec b
3440   1CC8 0A 82 1C      jmp _for53_cond
3441   1CCB             _for53_exit:
3442   1CCB             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
3443   1CCB FA F2 FF      lea d, [bp + -14] ; $output_buffer
3444   1CCE D7            push a
3445   1CCF DA            push d
3446   1CD0 26 00 00      mov b, $0
3447   1CD3 E7            pop d
3448   1CD4 5A            add d, b
3449   1CD5 E4            pop a
3450   1CD6 DA            push d
3451   1CD7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3452   1CDA D7            push a
3453   1CDB DA            push d
3454   1CDC 26 00 00      mov b, $0
3455   1CDF E7            pop d
3456   1CE0 5A            add d, b
3457   1CE1 E4            pop a
3458   1CE2 32            mov bl, [d]
3459   1CE3 A7 00         mov bh, 0
3460   1CE5             ; START SHIFT
3461   1CE5 D7            push a
3462   1CE6 11            mov a, b
3463   1CE7 26 02 00      mov b, $2
3464   1CEA FD 39         mov c, b
3465   1CEC 9D            shl a, cl
3466   1CED 27            mov b, a
3467   1CEE E4            pop a
3468   1CEF             ; END SHIFT
3469   1CEF             ; START TERMS
3470   1CEF D7            push a
3471   1CF0 11            mov a, b
3472   1CF1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3473   1CF4 D7            push a
3474   1CF5 DA            push d
3475   1CF6 26 01 00      mov b, $1
3476   1CF9 E7            pop d
3477   1CFA 5A            add d, b
3478   1CFB E4            pop a
3479   1CFC 32            mov bl, [d]
3480   1CFD A7 00         mov bh, 0
3481   1CFF D7            push a
3482   1D00 11            mov a, b
3483   1D01 26 30 00      mov b, $30
3484   1D04 FD 92         and b, a ; &
3485   1D06 E4            pop a
3486   1D07             ; START SHIFT
3487   1D07 D7            push a
3488   1D08 11            mov a, b
3489   1D09 26 04 00      mov b, $4
3490   1D0C FD 39         mov c, b
3491   1D0E A5            ashr a, cl
3492   1D0F 27            mov b, a
3493   1D10 E4            pop a
3494   1D11             ; END SHIFT
3495   1D11 56            add b, a
3496   1D12 E4            pop a
3497   1D13             ; END TERMS
3498   1D13 E7            pop d
3499   1D14 FD 3E         mov [d], bl
3500   1D16             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
3501   1D16 FA F2 FF      lea d, [bp + -14] ; $output_buffer
3502   1D19 D7            push a
3503   1D1A DA            push d
3504   1D1B 26 01 00      mov b, $1
3505   1D1E E7            pop d
3506   1D1F 5A            add d, b
3507   1D20 E4            pop a
3508   1D21 DA            push d
3509   1D22 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3510   1D25 D7            push a
3511   1D26 DA            push d
3512   1D27 26 01 00      mov b, $1
3513   1D2A E7            pop d
3514   1D2B 5A            add d, b
3515   1D2C E4            pop a
3516   1D2D 32            mov bl, [d]
3517   1D2E A7 00         mov bh, 0
3518   1D30 D7            push a
3519   1D31 11            mov a, b
3520   1D32 26 0F 00      mov b, $f
3521   1D35 FD 92         and b, a ; &
3522   1D37 E4            pop a
3523   1D38             ; START SHIFT
3524   1D38 D7            push a
3525   1D39 11            mov a, b
3526   1D3A 26 04 00      mov b, $4
3527   1D3D FD 39         mov c, b
3528   1D3F 9D            shl a, cl
3529   1D40 27            mov b, a
3530   1D41 E4            pop a
3531   1D42             ; END SHIFT
3532   1D42             ; START TERMS
3533   1D42 D7            push a
3534   1D43 11            mov a, b
3535   1D44 FA F5 FF      lea d, [bp + -11] ; $input_buffer
3536   1D47 D7            push a
3537   1D48 DA            push d
3538   1D49 26 02 00      mov b, $2
3539   1D4C E7            pop d
3540   1D4D 5A            add d, b
3541   1D4E E4            pop a
3542   1D4F 32            mov bl, [d]
3543   1D50 A7 00         mov bh, 0
3544   1D52 D7            push a
3545   1D53 11            mov a, b
3546   1D54 26 3C 00      mov b, $3c
3547   1D57 FD 92         and b, a ; &
3548   1D59 E4            pop a
3549   1D5A             ; START SHIFT
3550   1D5A D7            push a
3551   1D5B 11            mov a, b
3552   1D5C 26 02 00      mov b, $2
3553   1D5F FD 39         mov c, b
3554   1D61 A5            ashr a, cl
3555   1D62 27            mov b, a
3556   1D63 E4            pop a
3557   1D64             ; END SHIFT
3558   1D64 56            add b, a
3559   1D65 E4            pop a
3560   1D66             ; END TERMS
3561   1D66 E7            pop d
3562   1D67 FD 3E         mov [d], bl
3563   1D69             ;; for (k = 0; k < i - 1; k++) { 
3564   1D69             _for54_init:
3565   1D69 FA FB FF      lea d, [bp + -5] ; $k
3566   1D6C DA            push d
3567   1D6D 26 00 00      mov b, $0
3568   1D70 E7            pop d
3569   1D71 FD 43         mov [d], b
3570   1D73             _for54_cond:
3571   1D73 FA FB FF      lea d, [bp + -5] ; $k
3572   1D76 2A            mov b, [d]
3573   1D77             ; START RELATIONAL
3574   1D77 D7            push a
3575   1D78 11            mov a, b
3576   1D79 FA FF FF      lea d, [bp + -1] ; $i
3577   1D7C 2A            mov b, [d]
3578   1D7D             ; START TERMS
3579   1D7D D7            push a
3580   1D7E 11            mov a, b
3581   1D7F 26 01 00      mov b, $1
3582   1D82 60            sub a, b
3583   1D83 27            mov b, a
3584   1D84 E4            pop a
3585   1D85             ; END TERMS
3586   1D85 B0            cmp a, b
3587   1D86 FD 73         slt ; < (signed)
3588   1D88 E4            pop a
3589   1D89             ; END RELATIONAL
3590   1D89 C0 00 00      cmp b, 0
3591   1D8C C6 CC 1D      je _for54_exit
3592   1D8F             _for54_block:
3593   1D8F             ;; output[j++] = output_buffer[k]; 
3594   1D8F FA 07 00      lea d, [bp + 7] ; $output
3595   1D92 FD 2A         mov d, [d]
3596   1D94 D7            push a
3597   1D95 DA            push d
3598   1D96 FA FD FF      lea d, [bp + -3] ; $j
3599   1D99 2A            mov b, [d]
3600   1D9A FD 77         inc b
3601   1D9C FA FD FF      lea d, [bp + -3] ; $j
3602   1D9F FD 43         mov [d], b
3603   1DA1 FD 7D         dec b
3604   1DA3 E7            pop d
3605   1DA4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3606   1DA8 E4            pop a
3607   1DA9 DA            push d
3608   1DAA FA F2 FF      lea d, [bp + -14] ; $output_buffer
3609   1DAD D7            push a
3610   1DAE DA            push d
3611   1DAF FA FB FF      lea d, [bp + -5] ; $k
3612   1DB2 2A            mov b, [d]
3613   1DB3 E7            pop d
3614   1DB4 5A            add d, b
3615   1DB5 E4            pop a
3616   1DB6 32            mov bl, [d]
3617   1DB7 A7 00         mov bh, 0
3618   1DB9 E7            pop d
3619   1DBA FD 3E         mov [d], bl
3620   1DBC             _for54_update:
3621   1DBC FA FB FF      lea d, [bp + -5] ; $k
3622   1DBF 2A            mov b, [d]
3623   1DC0 FD 77         inc b
3624   1DC2 FA FB FF      lea d, [bp + -5] ; $k
3625   1DC5 FD 43         mov [d], b
3626   1DC7 FD 7D         dec b
3627   1DC9 0A 73 1D      jmp _for54_cond
3628   1DCC             _for54_exit:
3629   1DCC 0A CF 1D      jmp _if51_exit
3630   1DCF             _if51_exit:
3631   1DCF             ;; output[j] = '\0'; 
3632   1DCF FA 07 00      lea d, [bp + 7] ; $output
3633   1DD2 FD 2A         mov d, [d]
3634   1DD4 D7            push a
3635   1DD5 DA            push d
3636   1DD6 FA FD FF      lea d, [bp + -3] ; $j
3637   1DD9 2A            mov b, [d]
3638   1DDA E7            pop d
3639   1DDB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3640   1DDF E4            pop a
3641   1DE0 DA            push d
3642   1DE1 26 00 00      mov b, $0
3643   1DE4 E7            pop d
3644   1DE5 FD 3E         mov [d], bl
3645   1DE7 F9            leave
3646   1DE8 09            ret
3647   1DE9             ; --- END TEXT BLOCK
3648   1DE9             
3649   1DE9             ; --- BEGIN DATA BLOCK
3650   1DE9 61 47 56 73 _s_data: .db "aGVsbG8gd29ybGQgbXkgbmFtZSBpcyBzb2wtMS4=", 0
3650   1DED 62 47 38 67 
3650   1DF1 64 32 39 79 
3650   1DF5 62 47 51 67 
3650   1DF9 62 58 6B 67 
3650   1DFD 62 6D 46 74 
3650   1E01 5A 53 42 70 
3650   1E05 63 79 42 7A 
3650   1E09 62 32 77 74 
3650   1E0D 4D 53 34 3D 
3650   1E11 00 
3651   1E12 E9 1D       _s: .dw _s_data
3652   1E14 00 00 00 00 _output_data: .fill 512, 0
3652   1E18 00 00 00 00 
3652   1E1C 00 00 00 00 
3652   1E20 00 00 00 00 
3652   1E24 00 00 00 00 
3652   1E28 00 00 00 00 
3652   1E2C 00 00 00 00 
3652   1E30 00 00 00 00 
3652   1E34 00 00 00 00 
3652   1E38 00 00 00 00 
3652   1E3C 00 00 00 00 
3652   1E40 00 00 00 00 
3652   1E44 00 00 00 00 
3652   1E48 00 00 00 00 
3652   1E4C 00 00 00 00 
3652   1E50 00 00 00 00 
3652   1E54 00 00 00 00 
3652   1E58 00 00 00 00 
3652   1E5C 00 00 00 00 
3652   1E60 00 00 00 00 
3652   1E64 00 00 00 00 
3652   1E68 00 00 00 00 
3652   1E6C 00 00 00 00 
3652   1E70 00 00 00 00 
3652   1E74 00 00 00 00 
3652   1E78 00 00 00 00 
3652   1E7C 00 00 00 00 
3652   1E80 00 00 00 00 
3652   1E84 00 00 00 00 
3652   1E88 00 00 00 00 
3652   1E8C 00 00 00 00 
3652   1E90 00 00 00 00 
3652   1E94 00 00 00 00 
3652   1E98 00 00 00 00 
3652   1E9C 00 00 00 00 
3652   1EA0 00 00 00 00 
3652   1EA4 00 00 00 00 
3652   1EA8 00 00 00 00 
3652   1EAC 00 00 00 00 
3652   1EB0 00 00 00 00 
3652   1EB4 00 00 00 00 
3652   1EB8 00 00 00 00 
3652   1EBC 00 00 00 00 
3652   1EC0 00 00 00 00 
3652   1EC4 00 00 00 00 
3652   1EC8 00 00 00 00 
3652   1ECC 00 00 00 00 
3652   1ED0 00 00 00 00 
3652   1ED4 00 00 00 00 
3652   1ED8 00 00 00 00 
3652   1EDC 00 00 00 00 
3652   1EE0 00 00 00 00 
3652   1EE4 00 00 00 00 
3652   1EE8 00 00 00 00 
3652   1EEC 00 00 00 00 
3652   1EF0 00 00 00 00 
3652   1EF4 00 00 00 00 
3652   1EF8 00 00 00 00 
3652   1EFC 00 00 00 00 
3652   1F00 00 00 00 00 
3652   1F04 00 00 00 00 
3652   1F08 00 00 00 00 
3652   1F0C 00 00 00 00 
3652   1F10 00 00 00 00 
3652   1F14 00 00 00 00 
3652   1F18 00 00 00 00 
3652   1F1C 00 00 00 00 
3652   1F20 00 00 00 00 
3652   1F24 00 00 00 00 
3652   1F28 00 00 00 00 
3652   1F2C 00 00 00 00 
3652   1F30 00 00 00 00 
3652   1F34 00 00 00 00 
3652   1F38 00 00 00 00 
3652   1F3C 00 00 00 00 
3652   1F40 00 00 00 00 
3652   1F44 00 00 00 00 
3652   1F48 00 00 00 00 
3652   1F4C 00 00 00 00 
3652   1F50 00 00 00 00 
3652   1F54 00 00 00 00 
3652   1F58 00 00 00 00 
3652   1F5C 00 00 00 00 
3652   1F60 00 00 00 00 
3652   1F64 00 00 00 00 
3652   1F68 00 00 00 00 
3652   1F6C 00 00 00 00 
3652   1F70 00 00 00 00 
3652   1F74 00 00 00 00 
3652   1F78 00 00 00 00 
3652   1F7C 00 00 00 00 
3652   1F80 00 00 00 00 
3652   1F84 00 00 00 00 
3652   1F88 00 00 00 00 
3652   1F8C 00 00 00 00 
3652   1F90 00 00 00 00 
3652   1F94 00 00 00 00 
3652   1F98 00 00 00 00 
3652   1F9C 00 00 00 00 
3652   1FA0 00 00 00 00 
3652   1FA4 00 00 00 00 
3652   1FA8 00 00 00 00 
3652   1FAC 00 00 00 00 
3652   1FB0 00 00 00 00 
3652   1FB4 00 00 00 00 
3652   1FB8 00 00 00 00 
3652   1FBC 00 00 00 00 
3652   1FC0 00 00 00 00 
3652   1FC4 00 00 00 00 
3652   1FC8 00 00 00 00 
3652   1FCC 00 00 00 00 
3652   1FD0 00 00 00 00 
3652   1FD4 00 00 00 00 
3652   1FD8 00 00 00 00 
3652   1FDC 00 00 00 00 
3652   1FE0 00 00 00 00 
3652   1FE4 00 00 00 00 
3652   1FE8 00 00 00 00 
3652   1FEC 00 00 00 00 
3652   1FF0 00 00 00 00 
3652   1FF4 00 00 00 00 
3652   1FF8 00 00 00 00 
3652   1FFC 00 00 00 00 
3652   2000 00 00 00 00 
3652   2004 00 00 00 00 
3652   2008 00 00 00 00 
3652   200C 00 00 00 00 
3652   2010 00 00 00 00 
3653   2014 55 6E 65 78 _s0: .db "Unexpected format in printf.", 0
3653   2018 70 65 63 74 
3653   201C 65 64 20 66 
3653   2020 6F 72 6D 61 
3653   2024 74 20 69 6E 
3653   2028 20 70 72 69 
3653   202C 6E 74 66 2E 
3653   2030 00 
3654   2031 45 72 72 6F _s1: .db "Error: Unknown argument type.\n", 0
3654   2035 72 3A 20 55 
3654   2039 6E 6B 6E 6F 
3654   203D 77 6E 20 61 
3654   2041 72 67 75 6D 
3654   2045 65 6E 74 20 
3654   2049 74 79 70 65 
3654   204D 2E 0A 00 
3655   2050 1B 5B 32 4A _s2: .db "\033[2J\033[H", 0
3655   2054 1B 5B 48 00 
3656   2058             
3657   2058 5A 20       _heap_top: .dw _heap
3658   205A 00          _heap: .db 0
3659   205B             ; --- END DATA BLOCK
3660   205B             
3661   205B             .end
tasm: Number of errors = 0
