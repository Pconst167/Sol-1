0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; strcpy(variables[0].varname, "Sol-1."); 
0011   0408             ; --- START FUNCTION CALL
0012   0408 26 8B 27      mov b, _s0 ; "Sol-1."
0013   040B FD AB         swp b
0014   040D D8            push b
0015   040E 3B 6B 22      mov d, _variables_data ; $variables
0016   0411 D7            push a
0017   0412 DA            push d
0018   0413 FD 2E 00 00   mov32 cb, $00000000
0018   0417 00 00 
0019   0419 E7            pop d
0020   041A FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0021   041E E4            pop a
0022   041F 58 00 00      add d, 0
0023   0422 2D            mov b, d
0024   0423 38 00 00      mov c, 0
0025   0426 FD AB         swp b
0026   0428 D8            push b
0027   0429 07 30 05      call strcpy
0028   042C 51 04 00      add sp, 4
0029   042F             ; --- END FUNCTION CALL
0030   042F             ; strcpy(variables[0].as_string, "String Value."); 
0031   042F             ; --- START FUNCTION CALL
0032   042F 26 92 27      mov b, _s1 ; "String Value."
0033   0432 FD AB         swp b
0034   0434 D8            push b
0035   0435 3B 6B 22      mov d, _variables_data ; $variables
0036   0438 D7            push a
0037   0439 DA            push d
0038   043A FD 2E 00 00   mov32 cb, $00000000
0038   043E 00 00 
0039   0440 E7            pop d
0040   0441 FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0041   0445 E4            pop a
0042   0446 58 41 00      add d, 65
0043   0449 2D            mov b, d
0044   044A 38 00 00      mov c, 0
0045   044D FD AB         swp b
0046   044F D8            push b
0047   0450 07 30 05      call strcpy
0048   0453 51 04 00      add sp, 4
0049   0456             ; --- END FUNCTION CALL
0050   0456             ; variables[0].var_type = 5; 
0051   0456 3B 6B 22      mov d, _variables_data ; $variables
0052   0459 D7            push a
0053   045A DA            push d
0054   045B FD 2E 00 00   mov32 cb, $00000000
0054   045F 00 00 
0055   0461 E7            pop d
0056   0462 FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0057   0466 E4            pop a
0058   0467 58 40 00      add d, 64
0059   046A DA            push d
0060   046B FD 2E 05 00   mov32 cb, $00000005
0060   046F 00 00 
0061   0471 E7            pop d
0062   0472 FD 3E         mov [d], bl
0063   0474             ; variables[0].as_int = 123; 
0064   0474 3B 6B 22      mov d, _variables_data ; $variables
0065   0477 D7            push a
0066   0478 DA            push d
0067   0479 FD 2E 00 00   mov32 cb, $00000000
0067   047D 00 00 
0068   047F E7            pop d
0069   0480 FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0070   0484 E4            pop a
0071   0485 58 81 00      add d, 129
0072   0488 DA            push d
0073   0489 FD 2E 7B 00   mov32 cb, $0000007b
0073   048D 00 00 
0074   048F E7            pop d
0075   0490 FD 43         mov [d], b
0076   0492             ; printf("\nvarname: %s", variables[0].varname); 
0077   0492             ; --- START FUNCTION CALL
0078   0492 3B 6B 22      mov d, _variables_data ; $variables
0079   0495 D7            push a
0080   0496 DA            push d
0081   0497 FD 2E 00 00   mov32 cb, $00000000
0081   049B 00 00 
0082   049D E7            pop d
0083   049E FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0084   04A2 E4            pop a
0085   04A3 58 00 00      add d, 0
0086   04A6 2D            mov b, d
0087   04A7 38 00 00      mov c, 0
0088   04AA FD AB         swp b
0089   04AC D8            push b
0090   04AD 26 A0 27      mov b, _s2 ; "\nvarname: %s"
0091   04B0 FD AB         swp b
0092   04B2 D8            push b
0093   04B3 07 61 0A      call printf
0094   04B6 51 04 00      add sp, 4
0095   04B9             ; --- END FUNCTION CALL
0096   04B9             ; printf("\nvar_type: %d\n", variables[0].var_type); 
0097   04B9             ; --- START FUNCTION CALL
0098   04B9 3B 6B 22      mov d, _variables_data ; $variables
0099   04BC D7            push a
0100   04BD DA            push d
0101   04BE FD 2E 00 00   mov32 cb, $00000000
0101   04C2 00 00 
0102   04C4 E7            pop d
0103   04C5 FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0104   04C9 E4            pop a
0105   04CA 58 40 00      add d, 64
0106   04CD 32            mov bl, [d]
0107   04CE A7 00         mov bh, 0
0108   04D0 38 00 00      mov c, 0
0109   04D3 DD            push bl
0110   04D4 26 AD 27      mov b, _s3 ; "\nvar_type: %d\n"
0111   04D7 FD AB         swp b
0112   04D9 D8            push b
0113   04DA 07 61 0A      call printf
0114   04DD 51 03 00      add sp, 3
0115   04E0             ; --- END FUNCTION CALL
0116   04E0             ; printf("\nas_string: %s\n",	variables[0].as_string); 
0117   04E0             ; --- START FUNCTION CALL
0118   04E0 3B 6B 22      mov d, _variables_data ; $variables
0119   04E3 D7            push a
0120   04E4 DA            push d
0121   04E5 FD 2E 00 00   mov32 cb, $00000000
0121   04E9 00 00 
0122   04EB E7            pop d
0123   04EC FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0124   04F0 E4            pop a
0125   04F1 58 41 00      add d, 65
0126   04F4 2D            mov b, d
0127   04F5 38 00 00      mov c, 0
0128   04F8 FD AB         swp b
0129   04FA D8            push b
0130   04FB 26 BC 27      mov b, _s4 ; "\nas_string: %s\n"
0131   04FE FD AB         swp b
0132   0500 D8            push b
0133   0501 07 61 0A      call printf
0134   0504 51 04 00      add sp, 4
0135   0507             ; --- END FUNCTION CALL
0136   0507             ; printf("\nas_int: %d\n", variables[0].as_int); 
0137   0507             ; --- START FUNCTION CALL
0138   0507 3B 6B 22      mov d, _variables_data ; $variables
0139   050A D7            push a
0140   050B DA            push d
0141   050C FD 2E 00 00   mov32 cb, $00000000
0141   0510 00 00 
0142   0512 E7            pop d
0143   0513 FD 13 83 00   mma 131 ; mov a, 131; mul a, b; add d, b
0144   0517 E4            pop a
0145   0518 58 81 00      add d, 129
0146   051B 2A            mov b, [d]
0147   051C 38 00 00      mov c, 0
0148   051F FD AB         swp b
0149   0521 D8            push b
0150   0522 26 CC 27      mov b, _s5 ; "\nas_int: %d\n"
0151   0525 FD AB         swp b
0152   0527 D8            push b
0153   0528 07 61 0A      call printf
0154   052B 51 04 00      add sp, 4
0155   052E             ; --- END FUNCTION CALL
0156   052E 05 0B         syscall sys_terminate_proc
0157   0530             
0158   0530             strcpy:
0159   0530 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0160   0533             ; char *psrc; 
0161   0533 52 02 00      sub sp, 2
0162   0536             ; char *pdest; 
0163   0536 52 02 00      sub sp, 2
0164   0539             ; psrc = src; 
0165   0539 FA FF FF      lea d, [bp + -1] ; $psrc
0166   053C DA            push d
0167   053D FA 07 00      lea d, [bp + 7] ; $src
0168   0540 2A            mov b, [d]
0169   0541 38 00 00      mov c, 0
0170   0544 E7            pop d
0171   0545 FD 43         mov [d], b
0172   0547             ; pdest = dest; 
0173   0547 FA FD FF      lea d, [bp + -3] ; $pdest
0174   054A DA            push d
0175   054B FA 05 00      lea d, [bp + 5] ; $dest
0176   054E 2A            mov b, [d]
0177   054F 38 00 00      mov c, 0
0178   0552 E7            pop d
0179   0553 FD 43         mov [d], b
0180   0555             ; while(*psrc) *pdest++ = *psrc++; 
0181   0555             _while1_cond:
0182   0555 FA FF FF      lea d, [bp + -1] ; $psrc
0183   0558 2A            mov b, [d]
0184   0559 38 00 00      mov c, 0
0185   055C 74            mov d, b
0186   055D 32            mov bl, [d]
0187   055E A7 00         mov bh, 0
0188   0560 38 00 00      mov c, 0
0189   0563 C0 00 00      cmp b, 0
0190   0566 C6 97 05      je _while1_exit
0191   0569             _while1_block:
0192   0569             ; *pdest++ = *psrc++; 
0193   0569 FA FD FF      lea d, [bp + -3] ; $pdest
0194   056C 2A            mov b, [d]
0195   056D 38 00 00      mov c, 0
0196   0570 FD 77         inc b
0197   0572 FA FD FF      lea d, [bp + -3] ; $pdest
0198   0575 FD 43         mov [d], b
0199   0577 FD 7D         dec b
0200   0579 D8            push b
0201   057A FA FF FF      lea d, [bp + -1] ; $psrc
0202   057D 2A            mov b, [d]
0203   057E 38 00 00      mov c, 0
0204   0581 FD 77         inc b
0205   0583 FA FF FF      lea d, [bp + -1] ; $psrc
0206   0586 FD 43         mov [d], b
0207   0588 FD 7D         dec b
0208   058A 74            mov d, b
0209   058B 32            mov bl, [d]
0210   058C A7 00         mov bh, 0
0211   058E 38 00 00      mov c, 0
0212   0591 E7            pop d
0213   0592 FD 3E         mov [d], bl
0214   0594 0A 55 05      jmp _while1_cond
0215   0597             _while1_exit:
0216   0597             ; *pdest = '\0'; 
0217   0597 FA FD FF      lea d, [bp + -3] ; $pdest
0218   059A 2A            mov b, [d]
0219   059B 38 00 00      mov c, 0
0220   059E D8            push b
0221   059F FD 2E 00 00   mov32 cb, $00000000
0221   05A3 00 00 
0222   05A5 E7            pop d
0223   05A6 FD 3E         mov [d], bl
0224   05A8 F9            leave
0225   05A9 09            ret
0226   05AA             
0227   05AA             strcmp:
0228   05AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0229   05AD             ; while (*s1 && (*s1 == *s2)) { 
0230   05AD             _while2_cond:
0231   05AD FA 05 00      lea d, [bp + 5] ; $s1
0232   05B0 2A            mov b, [d]
0233   05B1 38 00 00      mov c, 0
0234   05B4 74            mov d, b
0235   05B5 32            mov bl, [d]
0236   05B6 A7 00         mov bh, 0
0237   05B8 38 00 00      mov c, 0
0238   05BB             ; --- START LOGICAL AND
0239   05BB D7            push a
0240   05BC 11            mov a, b
0241   05BD FA 05 00      lea d, [bp + 5] ; $s1
0242   05C0 2A            mov b, [d]
0243   05C1 38 00 00      mov c, 0
0244   05C4 74            mov d, b
0245   05C5 32            mov bl, [d]
0246   05C6 A7 00         mov bh, 0
0247   05C8 38 00 00      mov c, 0
0248   05CB             ; --- START RELATIONAL
0249   05CB D7            push a
0250   05CC 11            mov a, b
0251   05CD FA 07 00      lea d, [bp + 7] ; $s2
0252   05D0 2A            mov b, [d]
0253   05D1 38 00 00      mov c, 0
0254   05D4 74            mov d, b
0255   05D5 32            mov bl, [d]
0256   05D6 A7 00         mov bh, 0
0257   05D8 38 00 00      mov c, 0
0258   05DB B0            cmp a, b
0259   05DC FD 71         seq ; ==
0260   05DE E4            pop a
0261   05DF             ; --- END RELATIONAL
0262   05DF FD A7         sand a, b
0263   05E1 E4            pop a
0264   05E2             ; --- END LOGICAL AND
0265   05E2 C0 00 00      cmp b, 0
0266   05E5 C6 0B 06      je _while2_exit
0267   05E8             _while2_block:
0268   05E8             ; s1++; 
0269   05E8 FA 05 00      lea d, [bp + 5] ; $s1
0270   05EB 2A            mov b, [d]
0271   05EC 38 00 00      mov c, 0
0272   05EF FD 77         inc b
0273   05F1 FA 05 00      lea d, [bp + 5] ; $s1
0274   05F4 FD 43         mov [d], b
0275   05F6 FD 7D         dec b
0276   05F8             ; s2++; 
0277   05F8 FA 07 00      lea d, [bp + 7] ; $s2
0278   05FB 2A            mov b, [d]
0279   05FC 38 00 00      mov c, 0
0280   05FF FD 77         inc b
0281   0601 FA 07 00      lea d, [bp + 7] ; $s2
0282   0604 FD 43         mov [d], b
0283   0606 FD 7D         dec b
0284   0608 0A AD 05      jmp _while2_cond
0285   060B             _while2_exit:
0286   060B             ; return *s1 - *s2; 
0287   060B FA 05 00      lea d, [bp + 5] ; $s1
0288   060E 2A            mov b, [d]
0289   060F 38 00 00      mov c, 0
0290   0612 74            mov d, b
0291   0613 32            mov bl, [d]
0292   0614 A7 00         mov bh, 0
0293   0616 38 00 00      mov c, 0
0294   0619             ; --- START TERMS
0295   0619 D7            push a
0296   061A 11            mov a, b
0297   061B FA 07 00      lea d, [bp + 7] ; $s2
0298   061E 2A            mov b, [d]
0299   061F 38 00 00      mov c, 0
0300   0622 74            mov d, b
0301   0623 32            mov bl, [d]
0302   0624 A7 00         mov bh, 0
0303   0626 38 00 00      mov c, 0
0304   0629 60            sub a, b
0305   062A 27            mov b, a
0306   062B E4            pop a
0307   062C             ; --- END TERMS
0308   062C F9            leave
0309   062D 09            ret
0310   062E             
0311   062E             strncmp:
0312   062E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0313   0631 F9            leave
0314   0632 09            ret
0315   0633             
0316   0633             strcat:
0317   0633 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0318   0636             ; int dest_len; 
0319   0636 52 02 00      sub sp, 2
0320   0639             ; int i; 
0321   0639 52 02 00      sub sp, 2
0322   063C             ; dest_len = strlen(dest); 
0323   063C FA FF FF      lea d, [bp + -1] ; $dest_len
0324   063F DA            push d
0325   0640             ; --- START FUNCTION CALL
0326   0640 FA 05 00      lea d, [bp + 5] ; $dest
0327   0643 2A            mov b, [d]
0328   0644 38 00 00      mov c, 0
0329   0647 FD AB         swp b
0330   0649 D8            push b
0331   064A 07 16 07      call strlen
0332   064D 51 02 00      add sp, 2
0333   0650             ; --- END FUNCTION CALL
0334   0650 E7            pop d
0335   0651 FD 43         mov [d], b
0336   0653             ; for (i = 0; src[i] != 0; i=i+1) { 
0337   0653             _for3_init:
0338   0653 FA FD FF      lea d, [bp + -3] ; $i
0339   0656 DA            push d
0340   0657 FD 2E 00 00   mov32 cb, $00000000
0340   065B 00 00 
0341   065D E7            pop d
0342   065E FD 43         mov [d], b
0343   0660             _for3_cond:
0344   0660 FA 07 00      lea d, [bp + 7] ; $src
0345   0663 FD 2A         mov d, [d]
0346   0665 D7            push a
0347   0666 DA            push d
0348   0667 FA FD FF      lea d, [bp + -3] ; $i
0349   066A 2A            mov b, [d]
0350   066B 38 00 00      mov c, 0
0351   066E E7            pop d
0352   066F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0353   0673 E4            pop a
0354   0674 32            mov bl, [d]
0355   0675 A7 00         mov bh, 0
0356   0677 38 00 00      mov c, 0
0357   067A             ; --- START RELATIONAL
0358   067A D7            push a
0359   067B 11            mov a, b
0360   067C FD 2E 00 00   mov32 cb, $00000000
0360   0680 00 00 
0361   0682 B0            cmp a, b
0362   0683 FD 72         sneq ; !=
0363   0685 E4            pop a
0364   0686             ; --- END RELATIONAL
0365   0686 C0 00 00      cmp b, 0
0366   0689 C6 E4 06      je _for3_exit
0367   068C             _for3_block:
0368   068C             ; dest[dest_len + i] = src[i]; 
0369   068C FA 05 00      lea d, [bp + 5] ; $dest
0370   068F FD 2A         mov d, [d]
0371   0691 D7            push a
0372   0692 DA            push d
0373   0693 FA FF FF      lea d, [bp + -1] ; $dest_len
0374   0696 2A            mov b, [d]
0375   0697 38 00 00      mov c, 0
0376   069A             ; --- START TERMS
0377   069A D7            push a
0378   069B 11            mov a, b
0379   069C FA FD FF      lea d, [bp + -3] ; $i
0380   069F 2A            mov b, [d]
0381   06A0 38 00 00      mov c, 0
0382   06A3 56            add b, a
0383   06A4 E4            pop a
0384   06A5             ; --- END TERMS
0385   06A5 E7            pop d
0386   06A6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0387   06AA E4            pop a
0388   06AB DA            push d
0389   06AC FA 07 00      lea d, [bp + 7] ; $src
0390   06AF FD 2A         mov d, [d]
0391   06B1 D7            push a
0392   06B2 DA            push d
0393   06B3 FA FD FF      lea d, [bp + -3] ; $i
0394   06B6 2A            mov b, [d]
0395   06B7 38 00 00      mov c, 0
0396   06BA E7            pop d
0397   06BB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0398   06BF E4            pop a
0399   06C0 32            mov bl, [d]
0400   06C1 A7 00         mov bh, 0
0401   06C3 38 00 00      mov c, 0
0402   06C6 E7            pop d
0403   06C7 FD 3E         mov [d], bl
0404   06C9             _for3_update:
0405   06C9 FA FD FF      lea d, [bp + -3] ; $i
0406   06CC DA            push d
0407   06CD FA FD FF      lea d, [bp + -3] ; $i
0408   06D0 2A            mov b, [d]
0409   06D1 38 00 00      mov c, 0
0410   06D4             ; --- START TERMS
0411   06D4 D7            push a
0412   06D5 11            mov a, b
0413   06D6 FD 2E 01 00   mov32 cb, $00000001
0413   06DA 00 00 
0414   06DC 56            add b, a
0415   06DD E4            pop a
0416   06DE             ; --- END TERMS
0417   06DE E7            pop d
0418   06DF FD 43         mov [d], b
0419   06E1 0A 60 06      jmp _for3_cond
0420   06E4             _for3_exit:
0421   06E4             ; dest[dest_len + i] = 0; 
0422   06E4 FA 05 00      lea d, [bp + 5] ; $dest
0423   06E7 FD 2A         mov d, [d]
0424   06E9 D7            push a
0425   06EA DA            push d
0426   06EB FA FF FF      lea d, [bp + -1] ; $dest_len
0427   06EE 2A            mov b, [d]
0428   06EF 38 00 00      mov c, 0
0429   06F2             ; --- START TERMS
0430   06F2 D7            push a
0431   06F3 11            mov a, b
0432   06F4 FA FD FF      lea d, [bp + -3] ; $i
0433   06F7 2A            mov b, [d]
0434   06F8 38 00 00      mov c, 0
0435   06FB 56            add b, a
0436   06FC E4            pop a
0437   06FD             ; --- END TERMS
0438   06FD E7            pop d
0439   06FE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0440   0702 E4            pop a
0441   0703 DA            push d
0442   0704 FD 2E 00 00   mov32 cb, $00000000
0442   0708 00 00 
0443   070A E7            pop d
0444   070B FD 3E         mov [d], bl
0445   070D             ; return dest; 
0446   070D FA 05 00      lea d, [bp + 5] ; $dest
0447   0710 2A            mov b, [d]
0448   0711 38 00 00      mov c, 0
0449   0714 F9            leave
0450   0715 09            ret
0451   0716             
0452   0716             strlen:
0453   0716 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0454   0719             ; int length; 
0455   0719 52 02 00      sub sp, 2
0456   071C             ; length = 0; 
0457   071C FA FF FF      lea d, [bp + -1] ; $length
0458   071F DA            push d
0459   0720 FD 2E 00 00   mov32 cb, $00000000
0459   0724 00 00 
0460   0726 E7            pop d
0461   0727 FD 43         mov [d], b
0462   0729             ; while (str[length] != 0) { 
0463   0729             _while4_cond:
0464   0729 FA 05 00      lea d, [bp + 5] ; $str
0465   072C FD 2A         mov d, [d]
0466   072E D7            push a
0467   072F DA            push d
0468   0730 FA FF FF      lea d, [bp + -1] ; $length
0469   0733 2A            mov b, [d]
0470   0734 38 00 00      mov c, 0
0471   0737 E7            pop d
0472   0738 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0473   073C E4            pop a
0474   073D 32            mov bl, [d]
0475   073E A7 00         mov bh, 0
0476   0740 38 00 00      mov c, 0
0477   0743             ; --- START RELATIONAL
0478   0743 D7            push a
0479   0744 11            mov a, b
0480   0745 FD 2E 00 00   mov32 cb, $00000000
0480   0749 00 00 
0481   074B B0            cmp a, b
0482   074C FD 72         sneq ; !=
0483   074E E4            pop a
0484   074F             ; --- END RELATIONAL
0485   074F C0 00 00      cmp b, 0
0486   0752 C6 68 07      je _while4_exit
0487   0755             _while4_block:
0488   0755             ; length++; 
0489   0755 FA FF FF      lea d, [bp + -1] ; $length
0490   0758 2A            mov b, [d]
0491   0759 38 00 00      mov c, 0
0492   075C 11            mov a, b
0493   075D FD 77         inc b
0494   075F FA FF FF      lea d, [bp + -1] ; $length
0495   0762 FD 43         mov [d], b
0496   0764 27            mov b, a
0497   0765 0A 29 07      jmp _while4_cond
0498   0768             _while4_exit:
0499   0768             ; return length; 
0500   0768 FA FF FF      lea d, [bp + -1] ; $length
0501   076B 2A            mov b, [d]
0502   076C 38 00 00      mov c, 0
0503   076F F9            leave
0504   0770 09            ret
0505   0771             
0506   0771             exit:
0507   0771 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0508   0774             
0509   0774             ; --- BEGIN INLINE ASM SEGMENT
0510   0774 05 0B         syscall sys_terminate_proc
0511   0776             ; --- END INLINE ASM SEGMENT
0512   0776             
0513   0776 F9            leave
0514   0777 09            ret
0515   0778             
0516   0778             memset:
0517   0778 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0518   077B             ; int i; 
0519   077B 52 02 00      sub sp, 2
0520   077E             ; for(i = 0; i < size; i++){ 
0521   077E             _for5_init:
0522   077E FA FF FF      lea d, [bp + -1] ; $i
0523   0781 DA            push d
0524   0782 FD 2E 00 00   mov32 cb, $00000000
0524   0786 00 00 
0525   0788 E7            pop d
0526   0789 FD 43         mov [d], b
0527   078B             _for5_cond:
0528   078B FA FF FF      lea d, [bp + -1] ; $i
0529   078E 2A            mov b, [d]
0530   078F 38 00 00      mov c, 0
0531   0792             ; --- START RELATIONAL
0532   0792 D7            push a
0533   0793 11            mov a, b
0534   0794 FA 08 00      lea d, [bp + 8] ; $size
0535   0797 2A            mov b, [d]
0536   0798 38 00 00      mov c, 0
0537   079B B0            cmp a, b
0538   079C FD 73         slt ; < (signed)
0539   079E E4            pop a
0540   079F             ; --- END RELATIONAL
0541   079F C0 00 00      cmp b, 0
0542   07A2 C6 D7 07      je _for5_exit
0543   07A5             _for5_block:
0544   07A5             ; *(s+i) = c; 
0545   07A5 FA 05 00      lea d, [bp + 5] ; $s
0546   07A8 2A            mov b, [d]
0547   07A9 38 00 00      mov c, 0
0548   07AC             ; --- START TERMS
0549   07AC D7            push a
0550   07AD 11            mov a, b
0551   07AE FA FF FF      lea d, [bp + -1] ; $i
0552   07B1 2A            mov b, [d]
0553   07B2 38 00 00      mov c, 0
0554   07B5 56            add b, a
0555   07B6 E4            pop a
0556   07B7             ; --- END TERMS
0557   07B7 D8            push b
0558   07B8 FA 07 00      lea d, [bp + 7] ; $c
0559   07BB 32            mov bl, [d]
0560   07BC A7 00         mov bh, 0
0561   07BE 38 00 00      mov c, 0
0562   07C1 E7            pop d
0563   07C2 FD 3E         mov [d], bl
0564   07C4             _for5_update:
0565   07C4 FA FF FF      lea d, [bp + -1] ; $i
0566   07C7 2A            mov b, [d]
0567   07C8 38 00 00      mov c, 0
0568   07CB 11            mov a, b
0569   07CC FD 77         inc b
0570   07CE FA FF FF      lea d, [bp + -1] ; $i
0571   07D1 FD 43         mov [d], b
0572   07D3 27            mov b, a
0573   07D4 0A 8B 07      jmp _for5_cond
0574   07D7             _for5_exit:
0575   07D7             ; return s; 
0576   07D7 FA 05 00      lea d, [bp + 5] ; $s
0577   07DA 2A            mov b, [d]
0578   07DB 38 00 00      mov c, 0
0579   07DE F9            leave
0580   07DF 09            ret
0581   07E0             
0582   07E0             atoi:
0583   07E0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0584   07E3             ; int result = 0;  // Initialize result 
0585   07E3 52 02 00      sub sp, 2
0586   07E6             ; --- START LOCAL VAR INITIALIZATION
0587   07E6 FA FF FF      lea d, [bp + -1] ; $result
0588   07E9 DA            push d
0589   07EA FD 2E 00 00   mov32 cb, $00000000
0589   07EE 00 00 
0590   07F0 E7            pop d
0591   07F1 FD 43         mov [d], b
0592   07F3             ; --- END LOCAL VAR INITIALIZATION
0593   07F3             ; int sign = 1;    // Initialize sign as positive 
0594   07F3 52 02 00      sub sp, 2
0595   07F6             ; --- START LOCAL VAR INITIALIZATION
0596   07F6 FA FD FF      lea d, [bp + -3] ; $sign
0597   07F9 DA            push d
0598   07FA FD 2E 01 00   mov32 cb, $00000001
0598   07FE 00 00 
0599   0800 E7            pop d
0600   0801 FD 43         mov [d], b
0601   0803             ; --- END LOCAL VAR INITIALIZATION
0602   0803             ; while (*str == ' ') str++; 
0603   0803             _while6_cond:
0604   0803 FA 05 00      lea d, [bp + 5] ; $str
0605   0806 2A            mov b, [d]
0606   0807 38 00 00      mov c, 0
0607   080A 74            mov d, b
0608   080B 32            mov bl, [d]
0609   080C A7 00         mov bh, 0
0610   080E 38 00 00      mov c, 0
0611   0811             ; --- START RELATIONAL
0612   0811 D7            push a
0613   0812 11            mov a, b
0614   0813 FD 2E 20 00   mov32 cb, $00000020
0614   0817 00 00 
0615   0819 B0            cmp a, b
0616   081A FD 71         seq ; ==
0617   081C E4            pop a
0618   081D             ; --- END RELATIONAL
0619   081D C0 00 00      cmp b, 0
0620   0820 C6 36 08      je _while6_exit
0621   0823             _while6_block:
0622   0823             ; str++; 
0623   0823 FA 05 00      lea d, [bp + 5] ; $str
0624   0826 2A            mov b, [d]
0625   0827 38 00 00      mov c, 0
0626   082A FD 77         inc b
0627   082C FA 05 00      lea d, [bp + 5] ; $str
0628   082F FD 43         mov [d], b
0629   0831 FD 7D         dec b
0630   0833 0A 03 08      jmp _while6_cond
0631   0836             _while6_exit:
0632   0836             ; if (*str == '-' || *str == '+') { 
0633   0836             _if7_cond:
0634   0836 FA 05 00      lea d, [bp + 5] ; $str
0635   0839 2A            mov b, [d]
0636   083A 38 00 00      mov c, 0
0637   083D 74            mov d, b
0638   083E 32            mov bl, [d]
0639   083F A7 00         mov bh, 0
0640   0841 38 00 00      mov c, 0
0641   0844             ; --- START RELATIONAL
0642   0844 D7            push a
0643   0845 11            mov a, b
0644   0846 FD 2E 2D 00   mov32 cb, $0000002d
0644   084A 00 00 
0645   084C B0            cmp a, b
0646   084D FD 71         seq ; ==
0647   084F E4            pop a
0648   0850             ; --- END RELATIONAL
0649   0850             ; --- START LOGICAL OR
0650   0850 D7            push a
0651   0851 11            mov a, b
0652   0852 FA 05 00      lea d, [bp + 5] ; $str
0653   0855 2A            mov b, [d]
0654   0856 38 00 00      mov c, 0
0655   0859 74            mov d, b
0656   085A 32            mov bl, [d]
0657   085B A7 00         mov bh, 0
0658   085D 38 00 00      mov c, 0
0659   0860             ; --- START RELATIONAL
0660   0860 D7            push a
0661   0861 11            mov a, b
0662   0862 FD 2E 2B 00   mov32 cb, $0000002b
0662   0866 00 00 
0663   0868 B0            cmp a, b
0664   0869 FD 71         seq ; ==
0665   086B E4            pop a
0666   086C             ; --- END RELATIONAL
0667   086C FD A8         sor a, b ; ||
0668   086E E4            pop a
0669   086F             ; --- END LOGICAL OR
0670   086F C0 00 00      cmp b, 0
0671   0872 C6 BA 08      je _if7_exit
0672   0875             _if7_TRUE:
0673   0875             ; if (*str == '-') sign = -1; 
0674   0875             _if8_cond:
0675   0875 FA 05 00      lea d, [bp + 5] ; $str
0676   0878 2A            mov b, [d]
0677   0879 38 00 00      mov c, 0
0678   087C 74            mov d, b
0679   087D 32            mov bl, [d]
0680   087E A7 00         mov bh, 0
0681   0880 38 00 00      mov c, 0
0682   0883             ; --- START RELATIONAL
0683   0883 D7            push a
0684   0884 11            mov a, b
0685   0885 FD 2E 2D 00   mov32 cb, $0000002d
0685   0889 00 00 
0686   088B B0            cmp a, b
0687   088C FD 71         seq ; ==
0688   088E E4            pop a
0689   088F             ; --- END RELATIONAL
0690   088F C0 00 00      cmp b, 0
0691   0892 C6 A7 08      je _if8_exit
0692   0895             _if8_TRUE:
0693   0895             ; sign = -1; 
0694   0895 FA FD FF      lea d, [bp + -3] ; $sign
0695   0898 DA            push d
0696   0899 FD 2E 01 00   mov32 cb, $00000001
0696   089D 00 00 
0697   089F FD 97         neg b
0698   08A1 E7            pop d
0699   08A2 FD 43         mov [d], b
0700   08A4 0A A7 08      jmp _if8_exit
0701   08A7             _if8_exit:
0702   08A7             ; str++; 
0703   08A7 FA 05 00      lea d, [bp + 5] ; $str
0704   08AA 2A            mov b, [d]
0705   08AB 38 00 00      mov c, 0
0706   08AE FD 77         inc b
0707   08B0 FA 05 00      lea d, [bp + 5] ; $str
0708   08B3 FD 43         mov [d], b
0709   08B5 FD 7D         dec b
0710   08B7 0A BA 08      jmp _if7_exit
0711   08BA             _if7_exit:
0712   08BA             ; while (*str >= '0' && *str <= '9') { 
0713   08BA             _while9_cond:
0714   08BA FA 05 00      lea d, [bp + 5] ; $str
0715   08BD 2A            mov b, [d]
0716   08BE 38 00 00      mov c, 0
0717   08C1 74            mov d, b
0718   08C2 32            mov bl, [d]
0719   08C3 A7 00         mov bh, 0
0720   08C5 38 00 00      mov c, 0
0721   08C8             ; --- START RELATIONAL
0722   08C8 D7            push a
0723   08C9 11            mov a, b
0724   08CA FD 2E 30 00   mov32 cb, $00000030
0724   08CE 00 00 
0725   08D0 B0            cmp a, b
0726   08D1 FD 82         sgeu ; >= (unsigned)
0727   08D3 E4            pop a
0728   08D4             ; --- END RELATIONAL
0729   08D4             ; --- START LOGICAL AND
0730   08D4 D7            push a
0731   08D5 11            mov a, b
0732   08D6 FA 05 00      lea d, [bp + 5] ; $str
0733   08D9 2A            mov b, [d]
0734   08DA 38 00 00      mov c, 0
0735   08DD 74            mov d, b
0736   08DE 32            mov bl, [d]
0737   08DF A7 00         mov bh, 0
0738   08E1 38 00 00      mov c, 0
0739   08E4             ; --- START RELATIONAL
0740   08E4 D7            push a
0741   08E5 11            mov a, b
0742   08E6 FD 2E 39 00   mov32 cb, $00000039
0742   08EA 00 00 
0743   08EC B0            cmp a, b
0744   08ED FD 76         sleu ; <= (unsigned)
0745   08EF E4            pop a
0746   08F0             ; --- END RELATIONAL
0747   08F0 FD A7         sand a, b
0748   08F2 E4            pop a
0749   08F3             ; --- END LOGICAL AND
0750   08F3 C0 00 00      cmp b, 0
0751   08F6 C6 43 09      je _while9_exit
0752   08F9             _while9_block:
0753   08F9             ; result = result * 10 + (*str - '0'); 
0754   08F9 FA FF FF      lea d, [bp + -1] ; $result
0755   08FC DA            push d
0756   08FD FA FF FF      lea d, [bp + -1] ; $result
0757   0900 2A            mov b, [d]
0758   0901 38 00 00      mov c, 0
0759   0904             ; --- START FACTORS
0760   0904 D7            push a
0761   0905 11            mov a, b
0762   0906 FD 2E 0A 00   mov32 cb, $0000000a
0762   090A 00 00 
0763   090C AC            mul a, b ; *
0764   090D 11            mov a, b
0765   090E 27            mov b, a
0766   090F E4            pop a
0767   0910             ; --- END FACTORS
0768   0910             ; --- START TERMS
0769   0910 D7            push a
0770   0911 11            mov a, b
0771   0912 FA 05 00      lea d, [bp + 5] ; $str
0772   0915 2A            mov b, [d]
0773   0916 38 00 00      mov c, 0
0774   0919 74            mov d, b
0775   091A 32            mov bl, [d]
0776   091B A7 00         mov bh, 0
0777   091D 38 00 00      mov c, 0
0778   0920             ; --- START TERMS
0779   0920 D7            push a
0780   0921 11            mov a, b
0781   0922 FD 2E 30 00   mov32 cb, $00000030
0781   0926 00 00 
0782   0928 60            sub a, b
0783   0929 27            mov b, a
0784   092A E4            pop a
0785   092B             ; --- END TERMS
0786   092B 56            add b, a
0787   092C E4            pop a
0788   092D             ; --- END TERMS
0789   092D E7            pop d
0790   092E FD 43         mov [d], b
0791   0930             ; str++; 
0792   0930 FA 05 00      lea d, [bp + 5] ; $str
0793   0933 2A            mov b, [d]
0794   0934 38 00 00      mov c, 0
0795   0937 FD 77         inc b
0796   0939 FA 05 00      lea d, [bp + 5] ; $str
0797   093C FD 43         mov [d], b
0798   093E FD 7D         dec b
0799   0940 0A BA 08      jmp _while9_cond
0800   0943             _while9_exit:
0801   0943             ; return sign * result; 
0802   0943 FA FD FF      lea d, [bp + -3] ; $sign
0803   0946 2A            mov b, [d]
0804   0947 38 00 00      mov c, 0
0805   094A             ; --- START FACTORS
0806   094A D7            push a
0807   094B 11            mov a, b
0808   094C FA FF FF      lea d, [bp + -1] ; $result
0809   094F 2A            mov b, [d]
0810   0950 38 00 00      mov c, 0
0811   0953 AC            mul a, b ; *
0812   0954 11            mov a, b
0813   0955 27            mov b, a
0814   0956 E4            pop a
0815   0957             ; --- END FACTORS
0816   0957 F9            leave
0817   0958 09            ret
0818   0959             
0819   0959             rand:
0820   0959 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0821   095C             ; int  sec; 
0822   095C 52 02 00      sub sp, 2
0823   095F             
0824   095F             ; --- BEGIN INLINE ASM SEGMENT
0825   095F 19 00         mov al, 0
0826   0961 05 01         syscall sys_rtc					
0827   0963 1A            mov al, ah
0828   0964 FA FF FF      lea d, [bp + -1] ; $sec
0829   0967 1E            mov al, [d]
0830   0968 22 00         mov ah, 0
0831   096A             ; --- END INLINE ASM SEGMENT
0832   096A             
0833   096A             ; return sec; 
0834   096A FA FF FF      lea d, [bp + -1] ; $sec
0835   096D 2A            mov b, [d]
0836   096E 38 00 00      mov c, 0
0837   0971 F9            leave
0838   0972 09            ret
0839   0973             
0840   0973             alloc:
0841   0973 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0842   0976             ; heap_top = heap_top + bytes; 
0843   0976 3B 1D 28      mov d, _heap_top ; $heap_top
0844   0979 DA            push d
0845   097A 3B 1D 28      mov d, _heap_top ; $heap_top
0846   097D 2A            mov b, [d]
0847   097E 38 00 00      mov c, 0
0848   0981             ; --- START TERMS
0849   0981 D7            push a
0850   0982 11            mov a, b
0851   0983 FA 05 00      lea d, [bp + 5] ; $bytes
0852   0986 2A            mov b, [d]
0853   0987 38 00 00      mov c, 0
0854   098A 56            add b, a
0855   098B E4            pop a
0856   098C             ; --- END TERMS
0857   098C E7            pop d
0858   098D FD 43         mov [d], b
0859   098F             ; return heap_top - bytes; 
0860   098F 3B 1D 28      mov d, _heap_top ; $heap_top
0861   0992 2A            mov b, [d]
0862   0993 38 00 00      mov c, 0
0863   0996             ; --- START TERMS
0864   0996 D7            push a
0865   0997 11            mov a, b
0866   0998 FA 05 00      lea d, [bp + 5] ; $bytes
0867   099B 2A            mov b, [d]
0868   099C 38 00 00      mov c, 0
0869   099F 60            sub a, b
0870   09A0 27            mov b, a
0871   09A1 E4            pop a
0872   09A2             ; --- END TERMS
0873   09A2 F9            leave
0874   09A3 09            ret
0875   09A4             
0876   09A4             free:
0877   09A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0878   09A7             ; return heap_top = heap_top - bytes; 
0879   09A7 3B 1D 28      mov d, _heap_top ; $heap_top
0880   09AA DA            push d
0881   09AB 3B 1D 28      mov d, _heap_top ; $heap_top
0882   09AE 2A            mov b, [d]
0883   09AF 38 00 00      mov c, 0
0884   09B2             ; --- START TERMS
0885   09B2 D7            push a
0886   09B3 11            mov a, b
0887   09B4 FA 05 00      lea d, [bp + 5] ; $bytes
0888   09B7 2A            mov b, [d]
0889   09B8 38 00 00      mov c, 0
0890   09BB 60            sub a, b
0891   09BC 27            mov b, a
0892   09BD E4            pop a
0893   09BE             ; --- END TERMS
0894   09BE E7            pop d
0895   09BF FD 43         mov [d], b
0896   09C1 F9            leave
0897   09C2 09            ret
0898   09C3             
0899   09C3             fopen:
0900   09C3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0901   09C6             ; FILE *fp; 
0902   09C6 52 02 00      sub sp, 2
0903   09C9             ; static int max_handle = 0; 
0904   09C9 52 02 00      sub sp, 2
0905   09CC             ; fp = alloc(sizeof(FILE)); 
0906   09CC FA FF FF      lea d, [bp + -1] ; $fp
0907   09CF DA            push d
0908   09D0             ; --- START FUNCTION CALL
0909   09D0 FD 2E 04 01   mov32 cb, 260
0909   09D4 00 00 
0910   09D6 FD AB         swp b
0911   09D8 D8            push b
0912   09D9 07 73 09      call alloc
0913   09DC 51 02 00      add sp, 2
0914   09DF             ; --- END FUNCTION CALL
0915   09DF E7            pop d
0916   09E0 FD 43         mov [d], b
0917   09E2             ; strcpy(fp->filename, filename); 
0918   09E2             ; --- START FUNCTION CALL
0919   09E2 FA 05 00      lea d, [bp + 5] ; $filename
0920   09E5 2A            mov b, [d]
0921   09E6 38 00 00      mov c, 0
0922   09E9 FD AB         swp b
0923   09EB D8            push b
0924   09EC FA FF FF      lea d, [bp + -1] ; $fp
0925   09EF FD 2A         mov d, [d]
0926   09F1 58 02 00      add d, 2
0927   09F4 2D            mov b, d
0928   09F5 38 00 00      mov c, 0
0929   09F8 FD AB         swp b
0930   09FA D8            push b
0931   09FB 07 30 05      call strcpy
0932   09FE 51 04 00      add sp, 4
0933   0A01             ; --- END FUNCTION CALL
0934   0A01             ; fp->handle = max_handle; 
0935   0A01 FA FF FF      lea d, [bp + -1] ; $fp
0936   0A04 FD 2A         mov d, [d]
0937   0A06 58 00 00      add d, 0
0938   0A09 DA            push d
0939   0A0A 3B 89 27      mov d, st_fopen_max_handle ; static max_handle
0940   0A0D 2A            mov b, [d]
0941   0A0E 38 00 00      mov c, 0
0942   0A11 E7            pop d
0943   0A12 FD 43         mov [d], b
0944   0A14             ; fp->mode = mode; 
0945   0A14 FA FF FF      lea d, [bp + -1] ; $fp
0946   0A17 FD 2A         mov d, [d]
0947   0A19 58 02 01      add d, 258
0948   0A1C DA            push d
0949   0A1D FA 07 00      lea d, [bp + 7] ; $mode
0950   0A20 32            mov bl, [d]
0951   0A21 A7 00         mov bh, 0
0952   0A23 38 00 00      mov c, 0
0953   0A26 E7            pop d
0954   0A27 FD 3E         mov [d], bl
0955   0A29             ; fp->loc = 0; 
0956   0A29 FA FF FF      lea d, [bp + -1] ; $fp
0957   0A2C FD 2A         mov d, [d]
0958   0A2E 58 03 01      add d, 259
0959   0A31 DA            push d
0960   0A32 FD 2E 00 00   mov32 cb, $00000000
0960   0A36 00 00 
0961   0A38 E7            pop d
0962   0A39 FD 3E         mov [d], bl
0963   0A3B             ; max_handle++; 
0964   0A3B 3B 89 27      mov d, st_fopen_max_handle ; static max_handle
0965   0A3E 2A            mov b, [d]
0966   0A3F 38 00 00      mov c, 0
0967   0A42 11            mov a, b
0968   0A43 FD 77         inc b
0969   0A45 3B 89 27      mov d, st_fopen_max_handle ; static max_handle
0970   0A48 FD 43         mov [d], b
0971   0A4A 27            mov b, a
0972   0A4B F9            leave
0973   0A4C 09            ret
0974   0A4D             
0975   0A4D             fclose:
0976   0A4D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0977   0A50             ; free(sizeof(FILE)); 
0978   0A50             ; --- START FUNCTION CALL
0979   0A50 FD 2E 04 01   mov32 cb, 260
0979   0A54 00 00 
0980   0A56 FD AB         swp b
0981   0A58 D8            push b
0982   0A59 07 A4 09      call free
0983   0A5C 51 02 00      add sp, 2
0984   0A5F             ; --- END FUNCTION CALL
0985   0A5F F9            leave
0986   0A60 09            ret
0987   0A61             
0988   0A61             printf:
0989   0A61 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0990   0A64             ; char *p, *format_p; 
0991   0A64 52 02 00      sub sp, 2
0992   0A67 52 02 00      sub sp, 2
0993   0A6A             ; format_p = format; 
0994   0A6A FA FD FF      lea d, [bp + -3] ; $format_p
0995   0A6D DA            push d
0996   0A6E FA 05 00      lea d, [bp + 5] ; $format
0997   0A71 2A            mov b, [d]
0998   0A72 38 00 00      mov c, 0
0999   0A75 E7            pop d
1000   0A76 FD 43         mov [d], b
1001   0A78             ; p = &format + 2; 
1002   0A78 FA FF FF      lea d, [bp + -1] ; $p
1003   0A7B DA            push d
1004   0A7C FA 05 00      lea d, [bp + 5] ; $format
1005   0A7F 2D            mov b, d
1006   0A80             ; --- START TERMS
1007   0A80 D7            push a
1008   0A81 11            mov a, b
1009   0A82 FD 2E 02 00   mov32 cb, $00000002
1009   0A86 00 00 
1010   0A88 56            add b, a
1011   0A89 E4            pop a
1012   0A8A             ; --- END TERMS
1013   0A8A E7            pop d
1014   0A8B FD 43         mov [d], b
1015   0A8D             ; for(;;){ 
1016   0A8D             _for10_init:
1017   0A8D             _for10_cond:
1018   0A8D             _for10_block:
1019   0A8D             ; if(!*format_p) break; 
1020   0A8D             _if11_cond:
1021   0A8D FA FD FF      lea d, [bp + -3] ; $format_p
1022   0A90 2A            mov b, [d]
1023   0A91 38 00 00      mov c, 0
1024   0A94 74            mov d, b
1025   0A95 32            mov bl, [d]
1026   0A96 A7 00         mov bh, 0
1027   0A98 38 00 00      mov c, 0
1028   0A9B C0 00 00      cmp b, 0
1029   0A9E FD 71         seq ; !
1030   0AA0 C0 00 00      cmp b, 0
1031   0AA3 C6 AC 0A      je _if11_else
1032   0AA6             _if11_TRUE:
1033   0AA6             ; break; 
1034   0AA6 0A 3D 0D      jmp _for10_exit ; for break
1035   0AA9 0A 3A 0D      jmp _if11_exit
1036   0AAC             _if11_else:
1037   0AAC             ; if(*format_p == '%'){ 
1038   0AAC             _if12_cond:
1039   0AAC FA FD FF      lea d, [bp + -3] ; $format_p
1040   0AAF 2A            mov b, [d]
1041   0AB0 38 00 00      mov c, 0
1042   0AB3 74            mov d, b
1043   0AB4 32            mov bl, [d]
1044   0AB5 A7 00         mov bh, 0
1045   0AB7 38 00 00      mov c, 0
1046   0ABA             ; --- START RELATIONAL
1047   0ABA D7            push a
1048   0ABB 11            mov a, b
1049   0ABC FD 2E 25 00   mov32 cb, $00000025
1049   0AC0 00 00 
1050   0AC2 B0            cmp a, b
1051   0AC3 FD 71         seq ; ==
1052   0AC5 E4            pop a
1053   0AC6             ; --- END RELATIONAL
1054   0AC6 C0 00 00      cmp b, 0
1055   0AC9 C6 15 0D      je _if12_else
1056   0ACC             _if12_TRUE:
1057   0ACC             ; format_p++; 
1058   0ACC FA FD FF      lea d, [bp + -3] ; $format_p
1059   0ACF 2A            mov b, [d]
1060   0AD0 38 00 00      mov c, 0
1061   0AD3 FD 77         inc b
1062   0AD5 FA FD FF      lea d, [bp + -3] ; $format_p
1063   0AD8 FD 43         mov [d], b
1064   0ADA FD 7D         dec b
1065   0ADC             ; switch(*format_p){ 
1066   0ADC             _switch13_expr:
1067   0ADC FA FD FF      lea d, [bp + -3] ; $format_p
1068   0ADF 2A            mov b, [d]
1069   0AE0 38 00 00      mov c, 0
1070   0AE3 74            mov d, b
1071   0AE4 32            mov bl, [d]
1072   0AE5 A7 00         mov bh, 0
1073   0AE7 38 00 00      mov c, 0
1074   0AEA             _switch13_comparisons:
1075   0AEA C1 6C         cmp bl, $6c
1076   0AEC C6 18 0B      je _switch13_case0
1077   0AEF C1 4C         cmp bl, $4c
1078   0AF1 C6 18 0B      je _switch13_case1
1079   0AF4 C1 64         cmp bl, $64
1080   0AF6 C6 28 0C      je _switch13_case2
1081   0AF9 C1 69         cmp bl, $69
1082   0AFB C6 28 0C      je _switch13_case3
1083   0AFE C1 75         cmp bl, $75
1084   0B00 C6 58 0C      je _switch13_case4
1085   0B03 C1 78         cmp bl, $78
1086   0B05 C6 88 0C      je _switch13_case5
1087   0B08 C1 63         cmp bl, $63
1088   0B0A C6 AC 0C      je _switch13_case6
1089   0B0D C1 73         cmp bl, $73
1090   0B0F C6 D1 0C      je _switch13_case7
1091   0B12 0A F6 0C      jmp _switch13_default
1092   0B15 0A 02 0D      jmp _switch13_exit
1093   0B18             _switch13_case0:
1094   0B18             _switch13_case1:
1095   0B18             ; format_p++; 
1096   0B18 FA FD FF      lea d, [bp + -3] ; $format_p
1097   0B1B 2A            mov b, [d]
1098   0B1C 38 00 00      mov c, 0
1099   0B1F FD 77         inc b
1100   0B21 FA FD FF      lea d, [bp + -3] ; $format_p
1101   0B24 FD 43         mov [d], b
1102   0B26 FD 7D         dec b
1103   0B28             ; if(*format_p == 'd' || *format_p == 'i') 
1104   0B28             _if14_cond:
1105   0B28 FA FD FF      lea d, [bp + -3] ; $format_p
1106   0B2B 2A            mov b, [d]
1107   0B2C 38 00 00      mov c, 0
1108   0B2F 74            mov d, b
1109   0B30 32            mov bl, [d]
1110   0B31 A7 00         mov bh, 0
1111   0B33 38 00 00      mov c, 0
1112   0B36             ; --- START RELATIONAL
1113   0B36 D7            push a
1114   0B37 11            mov a, b
1115   0B38 FD 2E 64 00   mov32 cb, $00000064
1115   0B3C 00 00 
1116   0B3E B0            cmp a, b
1117   0B3F FD 71         seq ; ==
1118   0B41 E4            pop a
1119   0B42             ; --- END RELATIONAL
1120   0B42             ; --- START LOGICAL OR
1121   0B42 D7            push a
1122   0B43 11            mov a, b
1123   0B44 FA FD FF      lea d, [bp + -3] ; $format_p
1124   0B47 2A            mov b, [d]
1125   0B48 38 00 00      mov c, 0
1126   0B4B 74            mov d, b
1127   0B4C 32            mov bl, [d]
1128   0B4D A7 00         mov bh, 0
1129   0B4F 38 00 00      mov c, 0
1130   0B52             ; --- START RELATIONAL
1131   0B52 D7            push a
1132   0B53 11            mov a, b
1133   0B54 FD 2E 69 00   mov32 cb, $00000069
1133   0B58 00 00 
1134   0B5A B0            cmp a, b
1135   0B5B FD 71         seq ; ==
1136   0B5D E4            pop a
1137   0B5E             ; --- END RELATIONAL
1138   0B5E FD A8         sor a, b ; ||
1139   0B60 E4            pop a
1140   0B61             ; --- END LOGICAL OR
1141   0B61 C0 00 00      cmp b, 0
1142   0B64 C6 85 0B      je _if14_else
1143   0B67             _if14_TRUE:
1144   0B67             ; print_signed_long(*(long *)p); 
1145   0B67             ; --- START FUNCTION CALL
1146   0B67 FA FF FF      lea d, [bp + -1] ; $p
1147   0B6A 2A            mov b, [d]
1148   0B6B 38 00 00      mov c, 0
1149   0B6E 74            mov d, b
1150   0B6F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1151   0B72 FD 39         mov c, b ; And place it into C
1152   0B74 2A            mov b, [d] ; Lower Word in B
1153   0B75 12            mov a, c
1154   0B76 FD AA         swp a
1155   0B78 D7            push a
1156   0B79 FD AB         swp b
1157   0B7B D8            push b
1158   0B7C 07 0F 17      call print_signed_long
1159   0B7F 51 04 00      add sp, 4
1160   0B82             ; --- END FUNCTION CALL
1161   0B82 0A 0D 0C      jmp _if14_exit
1162   0B85             _if14_else:
1163   0B85             ; if(*format_p == 'u') 
1164   0B85             _if15_cond:
1165   0B85 FA FD FF      lea d, [bp + -3] ; $format_p
1166   0B88 2A            mov b, [d]
1167   0B89 38 00 00      mov c, 0
1168   0B8C 74            mov d, b
1169   0B8D 32            mov bl, [d]
1170   0B8E A7 00         mov bh, 0
1171   0B90 38 00 00      mov c, 0
1172   0B93             ; --- START RELATIONAL
1173   0B93 D7            push a
1174   0B94 11            mov a, b
1175   0B95 FD 2E 75 00   mov32 cb, $00000075
1175   0B99 00 00 
1176   0B9B B0            cmp a, b
1177   0B9C FD 71         seq ; ==
1178   0B9E E4            pop a
1179   0B9F             ; --- END RELATIONAL
1180   0B9F C0 00 00      cmp b, 0
1181   0BA2 C6 C3 0B      je _if15_else
1182   0BA5             _if15_TRUE:
1183   0BA5             ; print_unsigned_long(*(unsigned long *)p); 
1184   0BA5             ; --- START FUNCTION CALL
1185   0BA5 FA FF FF      lea d, [bp + -1] ; $p
1186   0BA8 2A            mov b, [d]
1187   0BA9 38 00 00      mov c, 0
1188   0BAC 74            mov d, b
1189   0BAD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1190   0BB0 FD 39         mov c, b ; And place it into C
1191   0BB2 2A            mov b, [d] ; Lower Word in B
1192   0BB3 12            mov a, c
1193   0BB4 FD AA         swp a
1194   0BB6 D7            push a
1195   0BB7 FD AB         swp b
1196   0BB9 D8            push b
1197   0BBA 07 7E 18      call print_unsigned_long
1198   0BBD 51 04 00      add sp, 4
1199   0BC0             ; --- END FUNCTION CALL
1200   0BC0 0A 0D 0C      jmp _if15_exit
1201   0BC3             _if15_else:
1202   0BC3             ; if(*format_p == 'x') 
1203   0BC3             _if16_cond:
1204   0BC3 FA FD FF      lea d, [bp + -3] ; $format_p
1205   0BC6 2A            mov b, [d]
1206   0BC7 38 00 00      mov c, 0
1207   0BCA 74            mov d, b
1208   0BCB 32            mov bl, [d]
1209   0BCC A7 00         mov bh, 0
1210   0BCE 38 00 00      mov c, 0
1211   0BD1             ; --- START RELATIONAL
1212   0BD1 D7            push a
1213   0BD2 11            mov a, b
1214   0BD3 FD 2E 78 00   mov32 cb, $00000078
1214   0BD7 00 00 
1215   0BD9 B0            cmp a, b
1216   0BDA FD 71         seq ; ==
1217   0BDC E4            pop a
1218   0BDD             ; --- END RELATIONAL
1219   0BDD C0 00 00      cmp b, 0
1220   0BE0 C6 01 0C      je _if16_else
1221   0BE3             _if16_TRUE:
1222   0BE3             ; printx32(*(long int *)p); 
1223   0BE3             ; --- START FUNCTION CALL
1224   0BE3 FA FF FF      lea d, [bp + -1] ; $p
1225   0BE6 2A            mov b, [d]
1226   0BE7 38 00 00      mov c, 0
1227   0BEA 74            mov d, b
1228   0BEB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1229   0BEE FD 39         mov c, b ; And place it into C
1230   0BF0 2A            mov b, [d] ; Lower Word in B
1231   0BF1 12            mov a, c
1232   0BF2 FD AA         swp a
1233   0BF4 D7            push a
1234   0BF5 FD AB         swp b
1235   0BF7 D8            push b
1236   0BF8 07 E2 13      call printx32
1237   0BFB 51 04 00      add sp, 4
1238   0BFE             ; --- END FUNCTION CALL
1239   0BFE 0A 0D 0C      jmp _if16_exit
1240   0C01             _if16_else:
1241   0C01             ; err("Unexpected format in printf."); 
1242   0C01             ; --- START FUNCTION CALL
1243   0C01 26 D9 27      mov b, _s6 ; "Unexpected format in printf."
1244   0C04 FD AB         swp b
1245   0C06 D8            push b
1246   0C07 07 CD 13      call err
1247   0C0A 51 02 00      add sp, 2
1248   0C0D             ; --- END FUNCTION CALL
1249   0C0D             _if16_exit:
1250   0C0D             _if15_exit:
1251   0C0D             _if14_exit:
1252   0C0D             ; p = p + 4; 
1253   0C0D FA FF FF      lea d, [bp + -1] ; $p
1254   0C10 DA            push d
1255   0C11 FA FF FF      lea d, [bp + -1] ; $p
1256   0C14 2A            mov b, [d]
1257   0C15 38 00 00      mov c, 0
1258   0C18             ; --- START TERMS
1259   0C18 D7            push a
1260   0C19 11            mov a, b
1261   0C1A FD 2E 04 00   mov32 cb, $00000004
1261   0C1E 00 00 
1262   0C20 56            add b, a
1263   0C21 E4            pop a
1264   0C22             ; --- END TERMS
1265   0C22 E7            pop d
1266   0C23 FD 43         mov [d], b
1267   0C25             ; break; 
1268   0C25 0A 02 0D      jmp _switch13_exit ; case break
1269   0C28             _switch13_case2:
1270   0C28             _switch13_case3:
1271   0C28             ; print_signed(*(int*)p); 
1272   0C28             ; --- START FUNCTION CALL
1273   0C28 FA FF FF      lea d, [bp + -1] ; $p
1274   0C2B 2A            mov b, [d]
1275   0C2C 38 00 00      mov c, 0
1276   0C2F 74            mov d, b
1277   0C30 2A            mov b, [d]
1278   0C31 38 00 00      mov c, 0
1279   0C34 FD AB         swp b
1280   0C36 D8            push b
1281   0C37 07 D6 15      call print_signed
1282   0C3A 51 02 00      add sp, 2
1283   0C3D             ; --- END FUNCTION CALL
1284   0C3D             ; p = p + 2; 
1285   0C3D FA FF FF      lea d, [bp + -1] ; $p
1286   0C40 DA            push d
1287   0C41 FA FF FF      lea d, [bp + -1] ; $p
1288   0C44 2A            mov b, [d]
1289   0C45 38 00 00      mov c, 0
1290   0C48             ; --- START TERMS
1291   0C48 D7            push a
1292   0C49 11            mov a, b
1293   0C4A FD 2E 02 00   mov32 cb, $00000002
1293   0C4E 00 00 
1294   0C50 56            add b, a
1295   0C51 E4            pop a
1296   0C52             ; --- END TERMS
1297   0C52 E7            pop d
1298   0C53 FD 43         mov [d], b
1299   0C55             ; break; 
1300   0C55 0A 02 0D      jmp _switch13_exit ; case break
1301   0C58             _switch13_case4:
1302   0C58             ; print_unsigned(*(unsigned int*)p); 
1303   0C58             ; --- START FUNCTION CALL
1304   0C58 FA FF FF      lea d, [bp + -1] ; $p
1305   0C5B 2A            mov b, [d]
1306   0C5C 38 00 00      mov c, 0
1307   0C5F 74            mov d, b
1308   0C60 2A            mov b, [d]
1309   0C61 38 00 00      mov c, 0
1310   0C64 FD AB         swp b
1311   0C66 D8            push b
1312   0C67 07 F2 1A      call print_unsigned
1313   0C6A 51 02 00      add sp, 2
1314   0C6D             ; --- END FUNCTION CALL
1315   0C6D             ; p = p + 2; 
1316   0C6D FA FF FF      lea d, [bp + -1] ; $p
1317   0C70 DA            push d
1318   0C71 FA FF FF      lea d, [bp + -1] ; $p
1319   0C74 2A            mov b, [d]
1320   0C75 38 00 00      mov c, 0
1321   0C78             ; --- START TERMS
1322   0C78 D7            push a
1323   0C79 11            mov a, b
1324   0C7A FD 2E 02 00   mov32 cb, $00000002
1324   0C7E 00 00 
1325   0C80 56            add b, a
1326   0C81 E4            pop a
1327   0C82             ; --- END TERMS
1328   0C82 E7            pop d
1329   0C83 FD 43         mov [d], b
1330   0C85             ; break; 
1331   0C85 0A 02 0D      jmp _switch13_exit ; case break
1332   0C88             _switch13_case5:
1333   0C88             
1334   0C88             ; --- BEGIN INLINE ASM SEGMENT
1335   0C88 FA FF FF      lea d, [bp + -1] ; $p
1336   0C8B FD 2A         mov d, [d]
1337   0C8D 2A            mov b, [d]
1338   0C8E 07 6B 21      call print_u16x
1339   0C91             ; --- END INLINE ASM SEGMENT
1340   0C91             
1341   0C91             ; p = p + 2; 
1342   0C91 FA FF FF      lea d, [bp + -1] ; $p
1343   0C94 DA            push d
1344   0C95 FA FF FF      lea d, [bp + -1] ; $p
1345   0C98 2A            mov b, [d]
1346   0C99 38 00 00      mov c, 0
1347   0C9C             ; --- START TERMS
1348   0C9C D7            push a
1349   0C9D 11            mov a, b
1350   0C9E FD 2E 02 00   mov32 cb, $00000002
1350   0CA2 00 00 
1351   0CA4 56            add b, a
1352   0CA5 E4            pop a
1353   0CA6             ; --- END TERMS
1354   0CA6 E7            pop d
1355   0CA7 FD 43         mov [d], b
1356   0CA9             ; break; 
1357   0CA9 0A 02 0D      jmp _switch13_exit ; case break
1358   0CAC             _switch13_case6:
1359   0CAC             
1360   0CAC             ; --- BEGIN INLINE ASM SEGMENT
1361   0CAC FA FF FF      lea d, [bp + -1] ; $p
1362   0CAF FD 2A         mov d, [d]
1363   0CB1 1E            mov al, [d]
1364   0CB2 23            mov ah, al
1365   0CB3 07 C9 1F      call _putchar
1366   0CB6             ; --- END INLINE ASM SEGMENT
1367   0CB6             
1368   0CB6             ; p = p + 1; 
1369   0CB6 FA FF FF      lea d, [bp + -1] ; $p
1370   0CB9 DA            push d
1371   0CBA FA FF FF      lea d, [bp + -1] ; $p
1372   0CBD 2A            mov b, [d]
1373   0CBE 38 00 00      mov c, 0
1374   0CC1             ; --- START TERMS
1375   0CC1 D7            push a
1376   0CC2 11            mov a, b
1377   0CC3 FD 2E 01 00   mov32 cb, $00000001
1377   0CC7 00 00 
1378   0CC9 56            add b, a
1379   0CCA E4            pop a
1380   0CCB             ; --- END TERMS
1381   0CCB E7            pop d
1382   0CCC FD 43         mov [d], b
1383   0CCE             ; break; 
1384   0CCE 0A 02 0D      jmp _switch13_exit ; case break
1385   0CD1             _switch13_case7:
1386   0CD1             
1387   0CD1             ; --- BEGIN INLINE ASM SEGMENT
1388   0CD1 FA FF FF      lea d, [bp + -1] ; $p
1389   0CD4 FD 2A         mov d, [d]
1390   0CD6 FD 2A         mov d, [d]
1391   0CD8 07 13 21      call _puts
1392   0CDB             ; --- END INLINE ASM SEGMENT
1393   0CDB             
1394   0CDB             ; p = p + 2; 
1395   0CDB FA FF FF      lea d, [bp + -1] ; $p
1396   0CDE DA            push d
1397   0CDF FA FF FF      lea d, [bp + -1] ; $p
1398   0CE2 2A            mov b, [d]
1399   0CE3 38 00 00      mov c, 0
1400   0CE6             ; --- START TERMS
1401   0CE6 D7            push a
1402   0CE7 11            mov a, b
1403   0CE8 FD 2E 02 00   mov32 cb, $00000002
1403   0CEC 00 00 
1404   0CEE 56            add b, a
1405   0CEF E4            pop a
1406   0CF0             ; --- END TERMS
1407   0CF0 E7            pop d
1408   0CF1 FD 43         mov [d], b
1409   0CF3             ; break; 
1410   0CF3 0A 02 0D      jmp _switch13_exit ; case break
1411   0CF6             _switch13_default:
1412   0CF6             ; print("Error: Unknown argument type.\n"); 
1413   0CF6             ; --- START FUNCTION CALL
1414   0CF6 26 F6 27      mov b, _s7 ; "Error: Unknown argument type.\n"
1415   0CF9 FD AB         swp b
1416   0CFB D8            push b
1417   0CFC 07 08 1E      call print
1418   0CFF 51 02 00      add sp, 2
1419   0D02             ; --- END FUNCTION CALL
1420   0D02             _switch13_exit:
1421   0D02             ; format_p++; 
1422   0D02 FA FD FF      lea d, [bp + -3] ; $format_p
1423   0D05 2A            mov b, [d]
1424   0D06 38 00 00      mov c, 0
1425   0D09 FD 77         inc b
1426   0D0B FA FD FF      lea d, [bp + -3] ; $format_p
1427   0D0E FD 43         mov [d], b
1428   0D10 FD 7D         dec b
1429   0D12 0A 3A 0D      jmp _if12_exit
1430   0D15             _if12_else:
1431   0D15             ; putchar(*format_p); 
1432   0D15             ; --- START FUNCTION CALL
1433   0D15 FA FD FF      lea d, [bp + -3] ; $format_p
1434   0D18 2A            mov b, [d]
1435   0D19 38 00 00      mov c, 0
1436   0D1C 74            mov d, b
1437   0D1D 32            mov bl, [d]
1438   0D1E A7 00         mov bh, 0
1439   0D20 38 00 00      mov c, 0
1440   0D23 DD            push bl
1441   0D24 07 BA 1D      call putchar
1442   0D27 51 01 00      add sp, 1
1443   0D2A             ; --- END FUNCTION CALL
1444   0D2A             ; format_p++; 
1445   0D2A FA FD FF      lea d, [bp + -3] ; $format_p
1446   0D2D 2A            mov b, [d]
1447   0D2E 38 00 00      mov c, 0
1448   0D31 FD 77         inc b
1449   0D33 FA FD FF      lea d, [bp + -3] ; $format_p
1450   0D36 FD 43         mov [d], b
1451   0D38 FD 7D         dec b
1452   0D3A             _if12_exit:
1453   0D3A             _if11_exit:
1454   0D3A             _for10_update:
1455   0D3A 0A 8D 0A      jmp _for10_cond
1456   0D3D             _for10_exit:
1457   0D3D F9            leave
1458   0D3E 09            ret
1459   0D3F             
1460   0D3F             scanf:
1461   0D3F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1462   0D42             ; char *p, *format_p; 
1463   0D42 52 02 00      sub sp, 2
1464   0D45 52 02 00      sub sp, 2
1465   0D48             ; char c; 
1466   0D48 52 01 00      sub sp, 1
1467   0D4B             ; int i; 
1468   0D4B 52 02 00      sub sp, 2
1469   0D4E             ; char input_string[  512                    ]; 
1470   0D4E 52 00 02      sub sp, 512
1471   0D51             ; format_p = format; 
1472   0D51 FA FD FF      lea d, [bp + -3] ; $format_p
1473   0D54 DA            push d
1474   0D55 FA 05 00      lea d, [bp + 5] ; $format
1475   0D58 2A            mov b, [d]
1476   0D59 38 00 00      mov c, 0
1477   0D5C E7            pop d
1478   0D5D FD 43         mov [d], b
1479   0D5F             ; p = &format + 2; 
1480   0D5F FA FF FF      lea d, [bp + -1] ; $p
1481   0D62 DA            push d
1482   0D63 FA 05 00      lea d, [bp + 5] ; $format
1483   0D66 2D            mov b, d
1484   0D67             ; --- START TERMS
1485   0D67 D7            push a
1486   0D68 11            mov a, b
1487   0D69 FD 2E 02 00   mov32 cb, $00000002
1487   0D6D 00 00 
1488   0D6F 56            add b, a
1489   0D70 E4            pop a
1490   0D71             ; --- END TERMS
1491   0D71 E7            pop d
1492   0D72 FD 43         mov [d], b
1493   0D74             ; for(;;){ 
1494   0D74             _for17_init:
1495   0D74             _for17_cond:
1496   0D74             _for17_block:
1497   0D74             ; if(!*format_p) break; 
1498   0D74             _if18_cond:
1499   0D74 FA FD FF      lea d, [bp + -3] ; $format_p
1500   0D77 2A            mov b, [d]
1501   0D78 38 00 00      mov c, 0
1502   0D7B 74            mov d, b
1503   0D7C 32            mov bl, [d]
1504   0D7D A7 00         mov bh, 0
1505   0D7F 38 00 00      mov c, 0
1506   0D82 C0 00 00      cmp b, 0
1507   0D85 FD 71         seq ; !
1508   0D87 C0 00 00      cmp b, 0
1509   0D8A C6 93 0D      je _if18_else
1510   0D8D             _if18_TRUE:
1511   0D8D             ; break; 
1512   0D8D 0A 1B 10      jmp _for17_exit ; for break
1513   0D90 0A 18 10      jmp _if18_exit
1514   0D93             _if18_else:
1515   0D93             ; if(*format_p == '%'){ 
1516   0D93             _if19_cond:
1517   0D93 FA FD FF      lea d, [bp + -3] ; $format_p
1518   0D96 2A            mov b, [d]
1519   0D97 38 00 00      mov c, 0
1520   0D9A 74            mov d, b
1521   0D9B 32            mov bl, [d]
1522   0D9C A7 00         mov bh, 0
1523   0D9E 38 00 00      mov c, 0
1524   0DA1             ; --- START RELATIONAL
1525   0DA1 D7            push a
1526   0DA2 11            mov a, b
1527   0DA3 FD 2E 25 00   mov32 cb, $00000025
1527   0DA7 00 00 
1528   0DA9 B0            cmp a, b
1529   0DAA FD 71         seq ; ==
1530   0DAC E4            pop a
1531   0DAD             ; --- END RELATIONAL
1532   0DAD C0 00 00      cmp b, 0
1533   0DB0 C6 F3 0F      je _if19_else
1534   0DB3             _if19_TRUE:
1535   0DB3             ; format_p++; 
1536   0DB3 FA FD FF      lea d, [bp + -3] ; $format_p
1537   0DB6 2A            mov b, [d]
1538   0DB7 38 00 00      mov c, 0
1539   0DBA FD 77         inc b
1540   0DBC FA FD FF      lea d, [bp + -3] ; $format_p
1541   0DBF FD 43         mov [d], b
1542   0DC1 FD 7D         dec b
1543   0DC3             ; switch(*format_p){ 
1544   0DC3             _switch20_expr:
1545   0DC3 FA FD FF      lea d, [bp + -3] ; $format_p
1546   0DC6 2A            mov b, [d]
1547   0DC7 38 00 00      mov c, 0
1548   0DCA 74            mov d, b
1549   0DCB 32            mov bl, [d]
1550   0DCC A7 00         mov bh, 0
1551   0DCE 38 00 00      mov c, 0
1552   0DD1             _switch20_comparisons:
1553   0DD1 C1 6C         cmp bl, $6c
1554   0DD3 C6 FF 0D      je _switch20_case0
1555   0DD6 C1 4C         cmp bl, $4c
1556   0DD8 C6 FF 0D      je _switch20_case1
1557   0DDB C1 64         cmp bl, $64
1558   0DDD C6 BE 0E      je _switch20_case2
1559   0DE0 C1 69         cmp bl, $69
1560   0DE2 C6 BE 0E      je _switch20_case3
1561   0DE5 C1 75         cmp bl, $75
1562   0DE7 C6 F7 0E      je _switch20_case4
1563   0DEA C1 78         cmp bl, $78
1564   0DEC C6 30 0F      je _switch20_case5
1565   0DEF C1 63         cmp bl, $63
1566   0DF1 C6 4B 0F      je _switch20_case6
1567   0DF4 C1 73         cmp bl, $73
1568   0DF6 C6 8D 0F      je _switch20_case7
1569   0DF9 0A D4 0F      jmp _switch20_default
1570   0DFC 0A E0 0F      jmp _switch20_exit
1571   0DFF             _switch20_case0:
1572   0DFF             _switch20_case1:
1573   0DFF             ; format_p++; 
1574   0DFF FA FD FF      lea d, [bp + -3] ; $format_p
1575   0E02 2A            mov b, [d]
1576   0E03 38 00 00      mov c, 0
1577   0E06 FD 77         inc b
1578   0E08 FA FD FF      lea d, [bp + -3] ; $format_p
1579   0E0B FD 43         mov [d], b
1580   0E0D FD 7D         dec b
1581   0E0F             ; if(*format_p == 'd' || *format_p == 'i'); 
1582   0E0F             _if21_cond:
1583   0E0F FA FD FF      lea d, [bp + -3] ; $format_p
1584   0E12 2A            mov b, [d]
1585   0E13 38 00 00      mov c, 0
1586   0E16 74            mov d, b
1587   0E17 32            mov bl, [d]
1588   0E18 A7 00         mov bh, 0
1589   0E1A 38 00 00      mov c, 0
1590   0E1D             ; --- START RELATIONAL
1591   0E1D D7            push a
1592   0E1E 11            mov a, b
1593   0E1F FD 2E 64 00   mov32 cb, $00000064
1593   0E23 00 00 
1594   0E25 B0            cmp a, b
1595   0E26 FD 71         seq ; ==
1596   0E28 E4            pop a
1597   0E29             ; --- END RELATIONAL
1598   0E29             ; --- START LOGICAL OR
1599   0E29 D7            push a
1600   0E2A 11            mov a, b
1601   0E2B FA FD FF      lea d, [bp + -3] ; $format_p
1602   0E2E 2A            mov b, [d]
1603   0E2F 38 00 00      mov c, 0
1604   0E32 74            mov d, b
1605   0E33 32            mov bl, [d]
1606   0E34 A7 00         mov bh, 0
1607   0E36 38 00 00      mov c, 0
1608   0E39             ; --- START RELATIONAL
1609   0E39 D7            push a
1610   0E3A 11            mov a, b
1611   0E3B FD 2E 69 00   mov32 cb, $00000069
1611   0E3F 00 00 
1612   0E41 B0            cmp a, b
1613   0E42 FD 71         seq ; ==
1614   0E44 E4            pop a
1615   0E45             ; --- END RELATIONAL
1616   0E45 FD A8         sor a, b ; ||
1617   0E47 E4            pop a
1618   0E48             ; --- END LOGICAL OR
1619   0E48 C0 00 00      cmp b, 0
1620   0E4B C6 51 0E      je _if21_else
1621   0E4E             _if21_TRUE:
1622   0E4E             ; ; 
1623   0E4E 0A A3 0E      jmp _if21_exit
1624   0E51             _if21_else:
1625   0E51             ; if(*format_p == 'u'); 
1626   0E51             _if22_cond:
1627   0E51 FA FD FF      lea d, [bp + -3] ; $format_p
1628   0E54 2A            mov b, [d]
1629   0E55 38 00 00      mov c, 0
1630   0E58 74            mov d, b
1631   0E59 32            mov bl, [d]
1632   0E5A A7 00         mov bh, 0
1633   0E5C 38 00 00      mov c, 0
1634   0E5F             ; --- START RELATIONAL
1635   0E5F D7            push a
1636   0E60 11            mov a, b
1637   0E61 FD 2E 75 00   mov32 cb, $00000075
1637   0E65 00 00 
1638   0E67 B0            cmp a, b
1639   0E68 FD 71         seq ; ==
1640   0E6A E4            pop a
1641   0E6B             ; --- END RELATIONAL
1642   0E6B C0 00 00      cmp b, 0
1643   0E6E C6 74 0E      je _if22_else
1644   0E71             _if22_TRUE:
1645   0E71             ; ; 
1646   0E71 0A A3 0E      jmp _if22_exit
1647   0E74             _if22_else:
1648   0E74             ; if(*format_p == 'x'); 
1649   0E74             _if23_cond:
1650   0E74 FA FD FF      lea d, [bp + -3] ; $format_p
1651   0E77 2A            mov b, [d]
1652   0E78 38 00 00      mov c, 0
1653   0E7B 74            mov d, b
1654   0E7C 32            mov bl, [d]
1655   0E7D A7 00         mov bh, 0
1656   0E7F 38 00 00      mov c, 0
1657   0E82             ; --- START RELATIONAL
1658   0E82 D7            push a
1659   0E83 11            mov a, b
1660   0E84 FD 2E 78 00   mov32 cb, $00000078
1660   0E88 00 00 
1661   0E8A B0            cmp a, b
1662   0E8B FD 71         seq ; ==
1663   0E8D E4            pop a
1664   0E8E             ; --- END RELATIONAL
1665   0E8E C0 00 00      cmp b, 0
1666   0E91 C6 97 0E      je _if23_else
1667   0E94             _if23_TRUE:
1668   0E94             ; ; 
1669   0E94 0A A3 0E      jmp _if23_exit
1670   0E97             _if23_else:
1671   0E97             ; err("Unexpected format in printf."); 
1672   0E97             ; --- START FUNCTION CALL
1673   0E97 26 D9 27      mov b, _s6 ; "Unexpected format in printf."
1674   0E9A FD AB         swp b
1675   0E9C D8            push b
1676   0E9D 07 CD 13      call err
1677   0EA0 51 02 00      add sp, 2
1678   0EA3             ; --- END FUNCTION CALL
1679   0EA3             _if23_exit:
1680   0EA3             _if22_exit:
1681   0EA3             _if21_exit:
1682   0EA3             ; p = p + 4; 
1683   0EA3 FA FF FF      lea d, [bp + -1] ; $p
1684   0EA6 DA            push d
1685   0EA7 FA FF FF      lea d, [bp + -1] ; $p
1686   0EAA 2A            mov b, [d]
1687   0EAB 38 00 00      mov c, 0
1688   0EAE             ; --- START TERMS
1689   0EAE D7            push a
1690   0EAF 11            mov a, b
1691   0EB0 FD 2E 04 00   mov32 cb, $00000004
1691   0EB4 00 00 
1692   0EB6 56            add b, a
1693   0EB7 E4            pop a
1694   0EB8             ; --- END TERMS
1695   0EB8 E7            pop d
1696   0EB9 FD 43         mov [d], b
1697   0EBB             ; break; 
1698   0EBB 0A E0 0F      jmp _switch20_exit ; case break
1699   0EBE             _switch20_case2:
1700   0EBE             _switch20_case3:
1701   0EBE             ; i = scann(); 
1702   0EBE FA FA FF      lea d, [bp + -6] ; $i
1703   0EC1 DA            push d
1704   0EC2             ; --- START FUNCTION CALL
1705   0EC2 07 E0 1D      call scann
1706   0EC5 E7            pop d
1707   0EC6 FD 43         mov [d], b
1708   0EC8             ; **(int **)p = i; 
1709   0EC8 FA FF FF      lea d, [bp + -1] ; $p
1710   0ECB 2A            mov b, [d]
1711   0ECC 38 00 00      mov c, 0
1712   0ECF 74            mov d, b
1713   0ED0 2A            mov b, [d]
1714   0ED1 D8            push b
1715   0ED2 FA FA FF      lea d, [bp + -6] ; $i
1716   0ED5 2A            mov b, [d]
1717   0ED6 38 00 00      mov c, 0
1718   0ED9 E7            pop d
1719   0EDA FD 43         mov [d], b
1720   0EDC             ; p = p + 2; 
1721   0EDC FA FF FF      lea d, [bp + -1] ; $p
1722   0EDF DA            push d
1723   0EE0 FA FF FF      lea d, [bp + -1] ; $p
1724   0EE3 2A            mov b, [d]
1725   0EE4 38 00 00      mov c, 0
1726   0EE7             ; --- START TERMS
1727   0EE7 D7            push a
1728   0EE8 11            mov a, b
1729   0EE9 FD 2E 02 00   mov32 cb, $00000002
1729   0EED 00 00 
1730   0EEF 56            add b, a
1731   0EF0 E4            pop a
1732   0EF1             ; --- END TERMS
1733   0EF1 E7            pop d
1734   0EF2 FD 43         mov [d], b
1735   0EF4             ; break; 
1736   0EF4 0A E0 0F      jmp _switch20_exit ; case break
1737   0EF7             _switch20_case4:
1738   0EF7             ; i = scann(); 
1739   0EF7 FA FA FF      lea d, [bp + -6] ; $i
1740   0EFA DA            push d
1741   0EFB             ; --- START FUNCTION CALL
1742   0EFB 07 E0 1D      call scann
1743   0EFE E7            pop d
1744   0EFF FD 43         mov [d], b
1745   0F01             ; **(int **)p = i; 
1746   0F01 FA FF FF      lea d, [bp + -1] ; $p
1747   0F04 2A            mov b, [d]
1748   0F05 38 00 00      mov c, 0
1749   0F08 74            mov d, b
1750   0F09 2A            mov b, [d]
1751   0F0A D8            push b
1752   0F0B FA FA FF      lea d, [bp + -6] ; $i
1753   0F0E 2A            mov b, [d]
1754   0F0F 38 00 00      mov c, 0
1755   0F12 E7            pop d
1756   0F13 FD 43         mov [d], b
1757   0F15             ; p = p + 2; 
1758   0F15 FA FF FF      lea d, [bp + -1] ; $p
1759   0F18 DA            push d
1760   0F19 FA FF FF      lea d, [bp + -1] ; $p
1761   0F1C 2A            mov b, [d]
1762   0F1D 38 00 00      mov c, 0
1763   0F20             ; --- START TERMS
1764   0F20 D7            push a
1765   0F21 11            mov a, b
1766   0F22 FD 2E 02 00   mov32 cb, $00000002
1766   0F26 00 00 
1767   0F28 56            add b, a
1768   0F29 E4            pop a
1769   0F2A             ; --- END TERMS
1770   0F2A E7            pop d
1771   0F2B FD 43         mov [d], b
1772   0F2D             ; break; 
1773   0F2D 0A E0 0F      jmp _switch20_exit ; case break
1774   0F30             _switch20_case5:
1775   0F30             ; p = p + 2; 
1776   0F30 FA FF FF      lea d, [bp + -1] ; $p
1777   0F33 DA            push d
1778   0F34 FA FF FF      lea d, [bp + -1] ; $p
1779   0F37 2A            mov b, [d]
1780   0F38 38 00 00      mov c, 0
1781   0F3B             ; --- START TERMS
1782   0F3B D7            push a
1783   0F3C 11            mov a, b
1784   0F3D FD 2E 02 00   mov32 cb, $00000002
1784   0F41 00 00 
1785   0F43 56            add b, a
1786   0F44 E4            pop a
1787   0F45             ; --- END TERMS
1788   0F45 E7            pop d
1789   0F46 FD 43         mov [d], b
1790   0F48             ; break; 
1791   0F48 0A E0 0F      jmp _switch20_exit ; case break
1792   0F4B             _switch20_case6:
1793   0F4B             ; c = getchar(); 
1794   0F4B FA FC FF      lea d, [bp + -4] ; $c
1795   0F4E DA            push d
1796   0F4F             ; --- START FUNCTION CALL
1797   0F4F 07 C7 1D      call getchar
1798   0F52 E7            pop d
1799   0F53 FD 3E         mov [d], bl
1800   0F55             ; **(char **)p = *(char *)c; 
1801   0F55 FA FF FF      lea d, [bp + -1] ; $p
1802   0F58 2A            mov b, [d]
1803   0F59 38 00 00      mov c, 0
1804   0F5C 74            mov d, b
1805   0F5D 2A            mov b, [d]
1806   0F5E D8            push b
1807   0F5F FA FC FF      lea d, [bp + -4] ; $c
1808   0F62 32            mov bl, [d]
1809   0F63 A7 00         mov bh, 0
1810   0F65 38 00 00      mov c, 0
1811   0F68 74            mov d, b
1812   0F69 32            mov bl, [d]
1813   0F6A A7 00         mov bh, 0
1814   0F6C 38 00 00      mov c, 0
1815   0F6F E7            pop d
1816   0F70 FD 43         mov [d], b
1817   0F72             ; p = p + 1; 
1818   0F72 FA FF FF      lea d, [bp + -1] ; $p
1819   0F75 DA            push d
1820   0F76 FA FF FF      lea d, [bp + -1] ; $p
1821   0F79 2A            mov b, [d]
1822   0F7A 38 00 00      mov c, 0
1823   0F7D             ; --- START TERMS
1824   0F7D D7            push a
1825   0F7E 11            mov a, b
1826   0F7F FD 2E 01 00   mov32 cb, $00000001
1826   0F83 00 00 
1827   0F85 56            add b, a
1828   0F86 E4            pop a
1829   0F87             ; --- END TERMS
1830   0F87 E7            pop d
1831   0F88 FD 43         mov [d], b
1832   0F8A             ; break; 
1833   0F8A 0A E0 0F      jmp _switch20_exit ; case break
1834   0F8D             _switch20_case7:
1835   0F8D             ; gets(input_string); 
1836   0F8D             ; --- START FUNCTION CALL
1837   0F8D FA FA FD      lea d, [bp + -518] ; $input_string
1838   0F90 2D            mov b, d
1839   0F91 38 00 00      mov c, 0
1840   0F94 FD AB         swp b
1841   0F96 D8            push b
1842   0F97 07 B9 15      call gets
1843   0F9A 51 02 00      add sp, 2
1844   0F9D             ; --- END FUNCTION CALL
1845   0F9D             ; strcpy(*(char **)p, input_string); 
1846   0F9D             ; --- START FUNCTION CALL
1847   0F9D FA FA FD      lea d, [bp + -518] ; $input_string
1848   0FA0 2D            mov b, d
1849   0FA1 38 00 00      mov c, 0
1850   0FA4 FD AB         swp b
1851   0FA6 D8            push b
1852   0FA7 FA FF FF      lea d, [bp + -1] ; $p
1853   0FAA 2A            mov b, [d]
1854   0FAB 38 00 00      mov c, 0
1855   0FAE 74            mov d, b
1856   0FAF 2A            mov b, [d]
1857   0FB0 FD AB         swp b
1858   0FB2 D8            push b
1859   0FB3 07 30 05      call strcpy
1860   0FB6 51 04 00      add sp, 4
1861   0FB9             ; --- END FUNCTION CALL
1862   0FB9             ; p = p + 2; 
1863   0FB9 FA FF FF      lea d, [bp + -1] ; $p
1864   0FBC DA            push d
1865   0FBD FA FF FF      lea d, [bp + -1] ; $p
1866   0FC0 2A            mov b, [d]
1867   0FC1 38 00 00      mov c, 0
1868   0FC4             ; --- START TERMS
1869   0FC4 D7            push a
1870   0FC5 11            mov a, b
1871   0FC6 FD 2E 02 00   mov32 cb, $00000002
1871   0FCA 00 00 
1872   0FCC 56            add b, a
1873   0FCD E4            pop a
1874   0FCE             ; --- END TERMS
1875   0FCE E7            pop d
1876   0FCF FD 43         mov [d], b
1877   0FD1             ; break; 
1878   0FD1 0A E0 0F      jmp _switch20_exit ; case break
1879   0FD4             _switch20_default:
1880   0FD4             ; print("Error: Unknown argument type.\n"); 
1881   0FD4             ; --- START FUNCTION CALL
1882   0FD4 26 F6 27      mov b, _s7 ; "Error: Unknown argument type.\n"
1883   0FD7 FD AB         swp b
1884   0FD9 D8            push b
1885   0FDA 07 08 1E      call print
1886   0FDD 51 02 00      add sp, 2
1887   0FE0             ; --- END FUNCTION CALL
1888   0FE0             _switch20_exit:
1889   0FE0             ; format_p++; 
1890   0FE0 FA FD FF      lea d, [bp + -3] ; $format_p
1891   0FE3 2A            mov b, [d]
1892   0FE4 38 00 00      mov c, 0
1893   0FE7 FD 77         inc b
1894   0FE9 FA FD FF      lea d, [bp + -3] ; $format_p
1895   0FEC FD 43         mov [d], b
1896   0FEE FD 7D         dec b
1897   0FF0 0A 18 10      jmp _if19_exit
1898   0FF3             _if19_else:
1899   0FF3             ; putchar(*format_p); 
1900   0FF3             ; --- START FUNCTION CALL
1901   0FF3 FA FD FF      lea d, [bp + -3] ; $format_p
1902   0FF6 2A            mov b, [d]
1903   0FF7 38 00 00      mov c, 0
1904   0FFA 74            mov d, b
1905   0FFB 32            mov bl, [d]
1906   0FFC A7 00         mov bh, 0
1907   0FFE 38 00 00      mov c, 0
1908   1001 DD            push bl
1909   1002 07 BA 1D      call putchar
1910   1005 51 01 00      add sp, 1
1911   1008             ; --- END FUNCTION CALL
1912   1008             ; format_p++; 
1913   1008 FA FD FF      lea d, [bp + -3] ; $format_p
1914   100B 2A            mov b, [d]
1915   100C 38 00 00      mov c, 0
1916   100F FD 77         inc b
1917   1011 FA FD FF      lea d, [bp + -3] ; $format_p
1918   1014 FD 43         mov [d], b
1919   1016 FD 7D         dec b
1920   1018             _if19_exit:
1921   1018             _if18_exit:
1922   1018             _for17_update:
1923   1018 0A 74 0D      jmp _for17_cond
1924   101B             _for17_exit:
1925   101B F9            leave
1926   101C 09            ret
1927   101D             
1928   101D             sprintf:
1929   101D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1930   1020             ; char *p, *format_p; 
1931   1020 52 02 00      sub sp, 2
1932   1023 52 02 00      sub sp, 2
1933   1026             ; char *sp; 
1934   1026 52 02 00      sub sp, 2
1935   1029             ; sp = dest; 
1936   1029 FA FB FF      lea d, [bp + -5] ; $sp
1937   102C DA            push d
1938   102D FA 05 00      lea d, [bp + 5] ; $dest
1939   1030 2A            mov b, [d]
1940   1031 38 00 00      mov c, 0
1941   1034 E7            pop d
1942   1035 FD 43         mov [d], b
1943   1037             ; format_p = format; 
1944   1037 FA FD FF      lea d, [bp + -3] ; $format_p
1945   103A DA            push d
1946   103B FA 07 00      lea d, [bp + 7] ; $format
1947   103E 2A            mov b, [d]
1948   103F 38 00 00      mov c, 0
1949   1042 E7            pop d
1950   1043 FD 43         mov [d], b
1951   1045             ; p = &format + 2; 
1952   1045 FA FF FF      lea d, [bp + -1] ; $p
1953   1048 DA            push d
1954   1049 FA 07 00      lea d, [bp + 7] ; $format
1955   104C 2D            mov b, d
1956   104D             ; --- START TERMS
1957   104D D7            push a
1958   104E 11            mov a, b
1959   104F FD 2E 02 00   mov32 cb, $00000002
1959   1053 00 00 
1960   1055 56            add b, a
1961   1056 E4            pop a
1962   1057             ; --- END TERMS
1963   1057 E7            pop d
1964   1058 FD 43         mov [d], b
1965   105A             ; for(;;){ 
1966   105A             _for24_init:
1967   105A             _for24_cond:
1968   105A             _for24_block:
1969   105A             ; if(!*format_p) break; 
1970   105A             _if25_cond:
1971   105A FA FD FF      lea d, [bp + -3] ; $format_p
1972   105D 2A            mov b, [d]
1973   105E 38 00 00      mov c, 0
1974   1061 74            mov d, b
1975   1062 32            mov bl, [d]
1976   1063 A7 00         mov bh, 0
1977   1065 38 00 00      mov c, 0
1978   1068 C0 00 00      cmp b, 0
1979   106B FD 71         seq ; !
1980   106D C0 00 00      cmp b, 0
1981   1070 C6 79 10      je _if25_else
1982   1073             _if25_TRUE:
1983   1073             ; break; 
1984   1073 0A A7 13      jmp _for24_exit ; for break
1985   1076 0A A4 13      jmp _if25_exit
1986   1079             _if25_else:
1987   1079             ; if(*format_p == '%'){ 
1988   1079             _if26_cond:
1989   1079 FA FD FF      lea d, [bp + -3] ; $format_p
1990   107C 2A            mov b, [d]
1991   107D 38 00 00      mov c, 0
1992   1080 74            mov d, b
1993   1081 32            mov bl, [d]
1994   1082 A7 00         mov bh, 0
1995   1084 38 00 00      mov c, 0
1996   1087             ; --- START RELATIONAL
1997   1087 D7            push a
1998   1088 11            mov a, b
1999   1089 FD 2E 25 00   mov32 cb, $00000025
1999   108D 00 00 
2000   108F B0            cmp a, b
2001   1090 FD 71         seq ; ==
2002   1092 E4            pop a
2003   1093             ; --- END RELATIONAL
2004   1093 C0 00 00      cmp b, 0
2005   1096 C6 79 13      je _if26_else
2006   1099             _if26_TRUE:
2007   1099             ; format_p++; 
2008   1099 FA FD FF      lea d, [bp + -3] ; $format_p
2009   109C 2A            mov b, [d]
2010   109D 38 00 00      mov c, 0
2011   10A0 FD 77         inc b
2012   10A2 FA FD FF      lea d, [bp + -3] ; $format_p
2013   10A5 FD 43         mov [d], b
2014   10A7 FD 7D         dec b
2015   10A9             ; switch(*format_p){ 
2016   10A9             _switch27_expr:
2017   10A9 FA FD FF      lea d, [bp + -3] ; $format_p
2018   10AC 2A            mov b, [d]
2019   10AD 38 00 00      mov c, 0
2020   10B0 74            mov d, b
2021   10B1 32            mov bl, [d]
2022   10B2 A7 00         mov bh, 0
2023   10B4 38 00 00      mov c, 0
2024   10B7             _switch27_comparisons:
2025   10B7 C1 6C         cmp bl, $6c
2026   10B9 C6 E5 10      je _switch27_case0
2027   10BC C1 4C         cmp bl, $4c
2028   10BE C6 E5 10      je _switch27_case1
2029   10C1 C1 64         cmp bl, $64
2030   10C3 C6 F5 11      je _switch27_case2
2031   10C6 C1 69         cmp bl, $69
2032   10C8 C6 F5 11      je _switch27_case3
2033   10CB C1 75         cmp bl, $75
2034   10CD C6 41 12      je _switch27_case4
2035   10D0 C1 78         cmp bl, $78
2036   10D2 C6 8D 12      je _switch27_case5
2037   10D5 C1 63         cmp bl, $63
2038   10D7 C6 B1 12      je _switch27_case6
2039   10DA C1 73         cmp bl, $73
2040   10DC C6 EE 12      je _switch27_case7
2041   10DF 0A 5A 13      jmp _switch27_default
2042   10E2 0A 66 13      jmp _switch27_exit
2043   10E5             _switch27_case0:
2044   10E5             _switch27_case1:
2045   10E5             ; format_p++; 
2046   10E5 FA FD FF      lea d, [bp + -3] ; $format_p
2047   10E8 2A            mov b, [d]
2048   10E9 38 00 00      mov c, 0
2049   10EC FD 77         inc b
2050   10EE FA FD FF      lea d, [bp + -3] ; $format_p
2051   10F1 FD 43         mov [d], b
2052   10F3 FD 7D         dec b
2053   10F5             ; if(*format_p == 'd' || *format_p == 'i') 
2054   10F5             _if28_cond:
2055   10F5 FA FD FF      lea d, [bp + -3] ; $format_p
2056   10F8 2A            mov b, [d]
2057   10F9 38 00 00      mov c, 0
2058   10FC 74            mov d, b
2059   10FD 32            mov bl, [d]
2060   10FE A7 00         mov bh, 0
2061   1100 38 00 00      mov c, 0
2062   1103             ; --- START RELATIONAL
2063   1103 D7            push a
2064   1104 11            mov a, b
2065   1105 FD 2E 64 00   mov32 cb, $00000064
2065   1109 00 00 
2066   110B B0            cmp a, b
2067   110C FD 71         seq ; ==
2068   110E E4            pop a
2069   110F             ; --- END RELATIONAL
2070   110F             ; --- START LOGICAL OR
2071   110F D7            push a
2072   1110 11            mov a, b
2073   1111 FA FD FF      lea d, [bp + -3] ; $format_p
2074   1114 2A            mov b, [d]
2075   1115 38 00 00      mov c, 0
2076   1118 74            mov d, b
2077   1119 32            mov bl, [d]
2078   111A A7 00         mov bh, 0
2079   111C 38 00 00      mov c, 0
2080   111F             ; --- START RELATIONAL
2081   111F D7            push a
2082   1120 11            mov a, b
2083   1121 FD 2E 69 00   mov32 cb, $00000069
2083   1125 00 00 
2084   1127 B0            cmp a, b
2085   1128 FD 71         seq ; ==
2086   112A E4            pop a
2087   112B             ; --- END RELATIONAL
2088   112B FD A8         sor a, b ; ||
2089   112D E4            pop a
2090   112E             ; --- END LOGICAL OR
2091   112E C0 00 00      cmp b, 0
2092   1131 C6 52 11      je _if28_else
2093   1134             _if28_TRUE:
2094   1134             ; print_signed_long(*(long *)p); 
2095   1134             ; --- START FUNCTION CALL
2096   1134 FA FF FF      lea d, [bp + -1] ; $p
2097   1137 2A            mov b, [d]
2098   1138 38 00 00      mov c, 0
2099   113B 74            mov d, b
2100   113C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2101   113F FD 39         mov c, b ; And place it into C
2102   1141 2A            mov b, [d] ; Lower Word in B
2103   1142 12            mov a, c
2104   1143 FD AA         swp a
2105   1145 D7            push a
2106   1146 FD AB         swp b
2107   1148 D8            push b
2108   1149 07 0F 17      call print_signed_long
2109   114C 51 04 00      add sp, 4
2110   114F             ; --- END FUNCTION CALL
2111   114F 0A DA 11      jmp _if28_exit
2112   1152             _if28_else:
2113   1152             ; if(*format_p == 'u') 
2114   1152             _if29_cond:
2115   1152 FA FD FF      lea d, [bp + -3] ; $format_p
2116   1155 2A            mov b, [d]
2117   1156 38 00 00      mov c, 0
2118   1159 74            mov d, b
2119   115A 32            mov bl, [d]
2120   115B A7 00         mov bh, 0
2121   115D 38 00 00      mov c, 0
2122   1160             ; --- START RELATIONAL
2123   1160 D7            push a
2124   1161 11            mov a, b
2125   1162 FD 2E 75 00   mov32 cb, $00000075
2125   1166 00 00 
2126   1168 B0            cmp a, b
2127   1169 FD 71         seq ; ==
2128   116B E4            pop a
2129   116C             ; --- END RELATIONAL
2130   116C C0 00 00      cmp b, 0
2131   116F C6 90 11      je _if29_else
2132   1172             _if29_TRUE:
2133   1172             ; print_unsigned_long(*(unsigned long *)p); 
2134   1172             ; --- START FUNCTION CALL
2135   1172 FA FF FF      lea d, [bp + -1] ; $p
2136   1175 2A            mov b, [d]
2137   1176 38 00 00      mov c, 0
2138   1179 74            mov d, b
2139   117A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2140   117D FD 39         mov c, b ; And place it into C
2141   117F 2A            mov b, [d] ; Lower Word in B
2142   1180 12            mov a, c
2143   1181 FD AA         swp a
2144   1183 D7            push a
2145   1184 FD AB         swp b
2146   1186 D8            push b
2147   1187 07 7E 18      call print_unsigned_long
2148   118A 51 04 00      add sp, 4
2149   118D             ; --- END FUNCTION CALL
2150   118D 0A DA 11      jmp _if29_exit
2151   1190             _if29_else:
2152   1190             ; if(*format_p == 'x') 
2153   1190             _if30_cond:
2154   1190 FA FD FF      lea d, [bp + -3] ; $format_p
2155   1193 2A            mov b, [d]
2156   1194 38 00 00      mov c, 0
2157   1197 74            mov d, b
2158   1198 32            mov bl, [d]
2159   1199 A7 00         mov bh, 0
2160   119B 38 00 00      mov c, 0
2161   119E             ; --- START RELATIONAL
2162   119E D7            push a
2163   119F 11            mov a, b
2164   11A0 FD 2E 78 00   mov32 cb, $00000078
2164   11A4 00 00 
2165   11A6 B0            cmp a, b
2166   11A7 FD 71         seq ; ==
2167   11A9 E4            pop a
2168   11AA             ; --- END RELATIONAL
2169   11AA C0 00 00      cmp b, 0
2170   11AD C6 CE 11      je _if30_else
2171   11B0             _if30_TRUE:
2172   11B0             ; printx32(*(long int *)p); 
2173   11B0             ; --- START FUNCTION CALL
2174   11B0 FA FF FF      lea d, [bp + -1] ; $p
2175   11B3 2A            mov b, [d]
2176   11B4 38 00 00      mov c, 0
2177   11B7 74            mov d, b
2178   11B8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2179   11BB FD 39         mov c, b ; And place it into C
2180   11BD 2A            mov b, [d] ; Lower Word in B
2181   11BE 12            mov a, c
2182   11BF FD AA         swp a
2183   11C1 D7            push a
2184   11C2 FD AB         swp b
2185   11C4 D8            push b
2186   11C5 07 E2 13      call printx32
2187   11C8 51 04 00      add sp, 4
2188   11CB             ; --- END FUNCTION CALL
2189   11CB 0A DA 11      jmp _if30_exit
2190   11CE             _if30_else:
2191   11CE             ; err("Unexpected format in printf."); 
2192   11CE             ; --- START FUNCTION CALL
2193   11CE 26 D9 27      mov b, _s6 ; "Unexpected format in printf."
2194   11D1 FD AB         swp b
2195   11D3 D8            push b
2196   11D4 07 CD 13      call err
2197   11D7 51 02 00      add sp, 2
2198   11DA             ; --- END FUNCTION CALL
2199   11DA             _if30_exit:
2200   11DA             _if29_exit:
2201   11DA             _if28_exit:
2202   11DA             ; p = p + 4; 
2203   11DA FA FF FF      lea d, [bp + -1] ; $p
2204   11DD DA            push d
2205   11DE FA FF FF      lea d, [bp + -1] ; $p
2206   11E1 2A            mov b, [d]
2207   11E2 38 00 00      mov c, 0
2208   11E5             ; --- START TERMS
2209   11E5 D7            push a
2210   11E6 11            mov a, b
2211   11E7 FD 2E 04 00   mov32 cb, $00000004
2211   11EB 00 00 
2212   11ED 56            add b, a
2213   11EE E4            pop a
2214   11EF             ; --- END TERMS
2215   11EF E7            pop d
2216   11F0 FD 43         mov [d], b
2217   11F2             ; break; 
2218   11F2 0A 66 13      jmp _switch27_exit ; case break
2219   11F5             _switch27_case2:
2220   11F5             _switch27_case3:
2221   11F5             ; sp = sp + sprint_signed(sp, *(int*)p); 
2222   11F5 FA FB FF      lea d, [bp + -5] ; $sp
2223   11F8 DA            push d
2224   11F9 FA FB FF      lea d, [bp + -5] ; $sp
2225   11FC 2A            mov b, [d]
2226   11FD 38 00 00      mov c, 0
2227   1200             ; --- START TERMS
2228   1200 D7            push a
2229   1201 11            mov a, b
2230   1202             ; --- START FUNCTION CALL
2231   1202 FA FF FF      lea d, [bp + -1] ; $p
2232   1205 2A            mov b, [d]
2233   1206 38 00 00      mov c, 0
2234   1209 74            mov d, b
2235   120A 2A            mov b, [d]
2236   120B 38 00 00      mov c, 0
2237   120E FD AB         swp b
2238   1210 D8            push b
2239   1211 FA FB FF      lea d, [bp + -5] ; $sp
2240   1214 2A            mov b, [d]
2241   1215 38 00 00      mov c, 0
2242   1218 FD AB         swp b
2243   121A D8            push b
2244   121B 07 F2 1B      call sprint_signed
2245   121E 51 04 00      add sp, 4
2246   1221             ; --- END FUNCTION CALL
2247   1221 56            add b, a
2248   1222 E4            pop a
2249   1223             ; --- END TERMS
2250   1223 E7            pop d
2251   1224 FD 43         mov [d], b
2252   1226             ; p = p + 2; 
2253   1226 FA FF FF      lea d, [bp + -1] ; $p
2254   1229 DA            push d
2255   122A FA FF FF      lea d, [bp + -1] ; $p
2256   122D 2A            mov b, [d]
2257   122E 38 00 00      mov c, 0
2258   1231             ; --- START TERMS
2259   1231 D7            push a
2260   1232 11            mov a, b
2261   1233 FD 2E 02 00   mov32 cb, $00000002
2261   1237 00 00 
2262   1239 56            add b, a
2263   123A E4            pop a
2264   123B             ; --- END TERMS
2265   123B E7            pop d
2266   123C FD 43         mov [d], b
2267   123E             ; break; 
2268   123E 0A 66 13      jmp _switch27_exit ; case break
2269   1241             _switch27_case4:
2270   1241             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2271   1241 FA FB FF      lea d, [bp + -5] ; $sp
2272   1244 DA            push d
2273   1245 FA FB FF      lea d, [bp + -5] ; $sp
2274   1248 2A            mov b, [d]
2275   1249 38 00 00      mov c, 0
2276   124C             ; --- START TERMS
2277   124C D7            push a
2278   124D 11            mov a, b
2279   124E             ; --- START FUNCTION CALL
2280   124E FA FF FF      lea d, [bp + -1] ; $p
2281   1251 2A            mov b, [d]
2282   1252 38 00 00      mov c, 0
2283   1255 74            mov d, b
2284   1256 2A            mov b, [d]
2285   1257 38 00 00      mov c, 0
2286   125A FD AB         swp b
2287   125C D8            push b
2288   125D FA FB FF      lea d, [bp + -5] ; $sp
2289   1260 2A            mov b, [d]
2290   1261 38 00 00      mov c, 0
2291   1264 FD AB         swp b
2292   1266 D8            push b
2293   1267 07 9A 19      call sprint_unsigned
2294   126A 51 04 00      add sp, 4
2295   126D             ; --- END FUNCTION CALL
2296   126D 56            add b, a
2297   126E E4            pop a
2298   126F             ; --- END TERMS
2299   126F E7            pop d
2300   1270 FD 43         mov [d], b
2301   1272             ; p = p + 2; 
2302   1272 FA FF FF      lea d, [bp + -1] ; $p
2303   1275 DA            push d
2304   1276 FA FF FF      lea d, [bp + -1] ; $p
2305   1279 2A            mov b, [d]
2306   127A 38 00 00      mov c, 0
2307   127D             ; --- START TERMS
2308   127D D7            push a
2309   127E 11            mov a, b
2310   127F FD 2E 02 00   mov32 cb, $00000002
2310   1283 00 00 
2311   1285 56            add b, a
2312   1286 E4            pop a
2313   1287             ; --- END TERMS
2314   1287 E7            pop d
2315   1288 FD 43         mov [d], b
2316   128A             ; break; 
2317   128A 0A 66 13      jmp _switch27_exit ; case break
2318   128D             _switch27_case5:
2319   128D             
2320   128D             ; --- BEGIN INLINE ASM SEGMENT
2321   128D FA FF FF      lea d, [bp + -1] ; $p
2322   1290 FD 2A         mov d, [d]
2323   1292 2A            mov b, [d]
2324   1293 07 6B 21      call print_u16x
2325   1296             ; --- END INLINE ASM SEGMENT
2326   1296             
2327   1296             ; p = p + 2; 
2328   1296 FA FF FF      lea d, [bp + -1] ; $p
2329   1299 DA            push d
2330   129A FA FF FF      lea d, [bp + -1] ; $p
2331   129D 2A            mov b, [d]
2332   129E 38 00 00      mov c, 0
2333   12A1             ; --- START TERMS
2334   12A1 D7            push a
2335   12A2 11            mov a, b
2336   12A3 FD 2E 02 00   mov32 cb, $00000002
2336   12A7 00 00 
2337   12A9 56            add b, a
2338   12AA E4            pop a
2339   12AB             ; --- END TERMS
2340   12AB E7            pop d
2341   12AC FD 43         mov [d], b
2342   12AE             ; break; 
2343   12AE 0A 66 13      jmp _switch27_exit ; case break
2344   12B1             _switch27_case6:
2345   12B1             ; *sp++ = *(char *)p; 
2346   12B1 FA FB FF      lea d, [bp + -5] ; $sp
2347   12B4 2A            mov b, [d]
2348   12B5 38 00 00      mov c, 0
2349   12B8 FD 77         inc b
2350   12BA FA FB FF      lea d, [bp + -5] ; $sp
2351   12BD FD 43         mov [d], b
2352   12BF FD 7D         dec b
2353   12C1 D8            push b
2354   12C2 FA FF FF      lea d, [bp + -1] ; $p
2355   12C5 2A            mov b, [d]
2356   12C6 38 00 00      mov c, 0
2357   12C9 74            mov d, b
2358   12CA 32            mov bl, [d]
2359   12CB A7 00         mov bh, 0
2360   12CD 38 00 00      mov c, 0
2361   12D0 E7            pop d
2362   12D1 FD 3E         mov [d], bl
2363   12D3             ; p = p + 1; 
2364   12D3 FA FF FF      lea d, [bp + -1] ; $p
2365   12D6 DA            push d
2366   12D7 FA FF FF      lea d, [bp + -1] ; $p
2367   12DA 2A            mov b, [d]
2368   12DB 38 00 00      mov c, 0
2369   12DE             ; --- START TERMS
2370   12DE D7            push a
2371   12DF 11            mov a, b
2372   12E0 FD 2E 01 00   mov32 cb, $00000001
2372   12E4 00 00 
2373   12E6 56            add b, a
2374   12E7 E4            pop a
2375   12E8             ; --- END TERMS
2376   12E8 E7            pop d
2377   12E9 FD 43         mov [d], b
2378   12EB             ; break; 
2379   12EB 0A 66 13      jmp _switch27_exit ; case break
2380   12EE             _switch27_case7:
2381   12EE             ; int len = strlen(*(char **)p); 
2382   12EE 52 02 00      sub sp, 2
2383   12F1             ; --- START LOCAL VAR INITIALIZATION
2384   12F1 FA F9 FF      lea d, [bp + -7] ; $len
2385   12F4 DA            push d
2386   12F5             ; --- START FUNCTION CALL
2387   12F5 FA FF FF      lea d, [bp + -1] ; $p
2388   12F8 2A            mov b, [d]
2389   12F9 38 00 00      mov c, 0
2390   12FC 74            mov d, b
2391   12FD 2A            mov b, [d]
2392   12FE FD AB         swp b
2393   1300 D8            push b
2394   1301 07 16 07      call strlen
2395   1304 51 02 00      add sp, 2
2396   1307             ; --- END FUNCTION CALL
2397   1307 E7            pop d
2398   1308 FD 43         mov [d], b
2399   130A             ; --- END LOCAL VAR INITIALIZATION
2400   130A             ; strcpy(sp, *(char **)p); 
2401   130A             ; --- START FUNCTION CALL
2402   130A FA FF FF      lea d, [bp + -1] ; $p
2403   130D 2A            mov b, [d]
2404   130E 38 00 00      mov c, 0
2405   1311 74            mov d, b
2406   1312 2A            mov b, [d]
2407   1313 FD AB         swp b
2408   1315 D8            push b
2409   1316 FA FB FF      lea d, [bp + -5] ; $sp
2410   1319 2A            mov b, [d]
2411   131A 38 00 00      mov c, 0
2412   131D FD AB         swp b
2413   131F D8            push b
2414   1320 07 30 05      call strcpy
2415   1323 51 04 00      add sp, 4
2416   1326             ; --- END FUNCTION CALL
2417   1326             ; sp = sp + len; 
2418   1326 FA FB FF      lea d, [bp + -5] ; $sp
2419   1329 DA            push d
2420   132A FA FB FF      lea d, [bp + -5] ; $sp
2421   132D 2A            mov b, [d]
2422   132E 38 00 00      mov c, 0
2423   1331             ; --- START TERMS
2424   1331 D7            push a
2425   1332 11            mov a, b
2426   1333 FA F9 FF      lea d, [bp + -7] ; $len
2427   1336 2A            mov b, [d]
2428   1337 38 00 00      mov c, 0
2429   133A 56            add b, a
2430   133B E4            pop a
2431   133C             ; --- END TERMS
2432   133C E7            pop d
2433   133D FD 43         mov [d], b
2434   133F             ; p = p + 2; 
2435   133F FA FF FF      lea d, [bp + -1] ; $p
2436   1342 DA            push d
2437   1343 FA FF FF      lea d, [bp + -1] ; $p
2438   1346 2A            mov b, [d]
2439   1347 38 00 00      mov c, 0
2440   134A             ; --- START TERMS
2441   134A D7            push a
2442   134B 11            mov a, b
2443   134C FD 2E 02 00   mov32 cb, $00000002
2443   1350 00 00 
2444   1352 56            add b, a
2445   1353 E4            pop a
2446   1354             ; --- END TERMS
2447   1354 E7            pop d
2448   1355 FD 43         mov [d], b
2449   1357             ; break; 
2450   1357 0A 66 13      jmp _switch27_exit ; case break
2451   135A             _switch27_default:
2452   135A             ; print("Error: Unknown argument type.\n"); 
2453   135A             ; --- START FUNCTION CALL
2454   135A 26 F6 27      mov b, _s7 ; "Error: Unknown argument type.\n"
2455   135D FD AB         swp b
2456   135F D8            push b
2457   1360 07 08 1E      call print
2458   1363 51 02 00      add sp, 2
2459   1366             ; --- END FUNCTION CALL
2460   1366             _switch27_exit:
2461   1366             ; format_p++; 
2462   1366 FA FD FF      lea d, [bp + -3] ; $format_p
2463   1369 2A            mov b, [d]
2464   136A 38 00 00      mov c, 0
2465   136D FD 77         inc b
2466   136F FA FD FF      lea d, [bp + -3] ; $format_p
2467   1372 FD 43         mov [d], b
2468   1374 FD 7D         dec b
2469   1376 0A A4 13      jmp _if26_exit
2470   1379             _if26_else:
2471   1379             ; *sp++ = *format_p++; 
2472   1379 FA FB FF      lea d, [bp + -5] ; $sp
2473   137C 2A            mov b, [d]
2474   137D 38 00 00      mov c, 0
2475   1380 FD 77         inc b
2476   1382 FA FB FF      lea d, [bp + -5] ; $sp
2477   1385 FD 43         mov [d], b
2478   1387 FD 7D         dec b
2479   1389 D8            push b
2480   138A FA FD FF      lea d, [bp + -3] ; $format_p
2481   138D 2A            mov b, [d]
2482   138E 38 00 00      mov c, 0
2483   1391 FD 77         inc b
2484   1393 FA FD FF      lea d, [bp + -3] ; $format_p
2485   1396 FD 43         mov [d], b
2486   1398 FD 7D         dec b
2487   139A 74            mov d, b
2488   139B 32            mov bl, [d]
2489   139C A7 00         mov bh, 0
2490   139E 38 00 00      mov c, 0
2491   13A1 E7            pop d
2492   13A2 FD 3E         mov [d], bl
2493   13A4             _if26_exit:
2494   13A4             _if25_exit:
2495   13A4             _for24_update:
2496   13A4 0A 5A 10      jmp _for24_cond
2497   13A7             _for24_exit:
2498   13A7             ; *sp = '\0'; 
2499   13A7 FA FB FF      lea d, [bp + -5] ; $sp
2500   13AA 2A            mov b, [d]
2501   13AB 38 00 00      mov c, 0
2502   13AE D8            push b
2503   13AF FD 2E 00 00   mov32 cb, $00000000
2503   13B3 00 00 
2504   13B5 E7            pop d
2505   13B6 FD 3E         mov [d], bl
2506   13B8             ; return sp - dest; // return total number of chars written 
2507   13B8 FA FB FF      lea d, [bp + -5] ; $sp
2508   13BB 2A            mov b, [d]
2509   13BC 38 00 00      mov c, 0
2510   13BF             ; --- START TERMS
2511   13BF D7            push a
2512   13C0 11            mov a, b
2513   13C1 FA 05 00      lea d, [bp + 5] ; $dest
2514   13C4 2A            mov b, [d]
2515   13C5 38 00 00      mov c, 0
2516   13C8 60            sub a, b
2517   13C9 27            mov b, a
2518   13CA E4            pop a
2519   13CB             ; --- END TERMS
2520   13CB F9            leave
2521   13CC 09            ret
2522   13CD             
2523   13CD             err:
2524   13CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2525   13D0             ; print(e); 
2526   13D0             ; --- START FUNCTION CALL
2527   13D0 FA 05 00      lea d, [bp + 5] ; $e
2528   13D3 2A            mov b, [d]
2529   13D4 38 00 00      mov c, 0
2530   13D7 FD AB         swp b
2531   13D9 D8            push b
2532   13DA 07 08 1E      call print
2533   13DD 51 02 00      add sp, 2
2534   13E0             ; --- END FUNCTION CALL
2535   13E0 F9            leave
2536   13E1 09            ret
2537   13E2             
2538   13E2             printx32:
2539   13E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2540   13E5             
2541   13E5             ; --- BEGIN INLINE ASM SEGMENT
2542   13E5 FA 05 00      lea d, [bp + 5] ; $hex
2543   13E8 2B 02 00      mov b, [d+2]
2544   13EB 07 6B 21      call print_u16x
2545   13EE 2A            mov b, [d]
2546   13EF 07 6B 21      call print_u16x
2547   13F2             ; --- END INLINE ASM SEGMENT
2548   13F2             
2549   13F2 F9            leave
2550   13F3 09            ret
2551   13F4             
2552   13F4             printx16:
2553   13F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2554   13F7             
2555   13F7             ; --- BEGIN INLINE ASM SEGMENT
2556   13F7 FA 05 00      lea d, [bp + 5] ; $hex
2557   13FA 2A            mov b, [d]
2558   13FB 07 6B 21      call print_u16x
2559   13FE             ; --- END INLINE ASM SEGMENT
2560   13FE             
2561   13FE F9            leave
2562   13FF 09            ret
2563   1400             
2564   1400             printx8:
2565   1400 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2566   1403             
2567   1403             ; --- BEGIN INLINE ASM SEGMENT
2568   1403 FA 05 00      lea d, [bp + 5] ; $hex
2569   1406 32            mov bl, [d]
2570   1407 07 AF 21      call print_u8x
2571   140A             ; --- END INLINE ASM SEGMENT
2572   140A             
2573   140A F9            leave
2574   140B 09            ret
2575   140C             
2576   140C             hex_str_to_int:
2577   140C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2578   140F             ; int value = 0; 
2579   140F 52 02 00      sub sp, 2
2580   1412             ; --- START LOCAL VAR INITIALIZATION
2581   1412 FA FF FF      lea d, [bp + -1] ; $value
2582   1415 DA            push d
2583   1416 FD 2E 00 00   mov32 cb, $00000000
2583   141A 00 00 
2584   141C E7            pop d
2585   141D FD 43         mov [d], b
2586   141F             ; --- END LOCAL VAR INITIALIZATION
2587   141F             ; int i; 
2588   141F 52 02 00      sub sp, 2
2589   1422             ; char hex_char; 
2590   1422 52 01 00      sub sp, 1
2591   1425             ; int len; 
2592   1425 52 02 00      sub sp, 2
2593   1428             ; len = strlen(hex_string); 
2594   1428 FA FA FF      lea d, [bp + -6] ; $len
2595   142B DA            push d
2596   142C             ; --- START FUNCTION CALL
2597   142C FA 05 00      lea d, [bp + 5] ; $hex_string
2598   142F 2A            mov b, [d]
2599   1430 38 00 00      mov c, 0
2600   1433 FD AB         swp b
2601   1435 D8            push b
2602   1436 07 16 07      call strlen
2603   1439 51 02 00      add sp, 2
2604   143C             ; --- END FUNCTION CALL
2605   143C E7            pop d
2606   143D FD 43         mov [d], b
2607   143F             ; for (i = 0; i < len; i++) { 
2608   143F             _for31_init:
2609   143F FA FD FF      lea d, [bp + -3] ; $i
2610   1442 DA            push d
2611   1443 FD 2E 00 00   mov32 cb, $00000000
2611   1447 00 00 
2612   1449 E7            pop d
2613   144A FD 43         mov [d], b
2614   144C             _for31_cond:
2615   144C FA FD FF      lea d, [bp + -3] ; $i
2616   144F 2A            mov b, [d]
2617   1450 38 00 00      mov c, 0
2618   1453             ; --- START RELATIONAL
2619   1453 D7            push a
2620   1454 11            mov a, b
2621   1455 FA FA FF      lea d, [bp + -6] ; $len
2622   1458 2A            mov b, [d]
2623   1459 38 00 00      mov c, 0
2624   145C B0            cmp a, b
2625   145D FD 73         slt ; < (signed)
2626   145F E4            pop a
2627   1460             ; --- END RELATIONAL
2628   1460 C0 00 00      cmp b, 0
2629   1463 C6 B0 15      je _for31_exit
2630   1466             _for31_block:
2631   1466             ; hex_char = hex_string[i]; 
2632   1466 FA FC FF      lea d, [bp + -4] ; $hex_char
2633   1469 DA            push d
2634   146A FA 05 00      lea d, [bp + 5] ; $hex_string
2635   146D FD 2A         mov d, [d]
2636   146F D7            push a
2637   1470 DA            push d
2638   1471 FA FD FF      lea d, [bp + -3] ; $i
2639   1474 2A            mov b, [d]
2640   1475 38 00 00      mov c, 0
2641   1478 E7            pop d
2642   1479 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2643   147D E4            pop a
2644   147E 32            mov bl, [d]
2645   147F A7 00         mov bh, 0
2646   1481 38 00 00      mov c, 0
2647   1484 E7            pop d
2648   1485 FD 3E         mov [d], bl
2649   1487             ; if (hex_char >= 'a' && hex_char <= 'f')  
2650   1487             _if32_cond:
2651   1487 FA FC FF      lea d, [bp + -4] ; $hex_char
2652   148A 32            mov bl, [d]
2653   148B A7 00         mov bh, 0
2654   148D 38 00 00      mov c, 0
2655   1490             ; --- START RELATIONAL
2656   1490 D7            push a
2657   1491 11            mov a, b
2658   1492 FD 2E 61 00   mov32 cb, $00000061
2658   1496 00 00 
2659   1498 B0            cmp a, b
2660   1499 FD 80         sge ; >=
2661   149B E4            pop a
2662   149C             ; --- END RELATIONAL
2663   149C             ; --- START LOGICAL AND
2664   149C D7            push a
2665   149D 11            mov a, b
2666   149E FA FC FF      lea d, [bp + -4] ; $hex_char
2667   14A1 32            mov bl, [d]
2668   14A2 A7 00         mov bh, 0
2669   14A4 38 00 00      mov c, 0
2670   14A7             ; --- START RELATIONAL
2671   14A7 D7            push a
2672   14A8 11            mov a, b
2673   14A9 FD 2E 66 00   mov32 cb, $00000066
2673   14AD 00 00 
2674   14AF B0            cmp a, b
2675   14B0 FD 74         sle ; <= (signed)
2676   14B2 E4            pop a
2677   14B3             ; --- END RELATIONAL
2678   14B3 FD A7         sand a, b
2679   14B5 E4            pop a
2680   14B6             ; --- END LOGICAL AND
2681   14B6 C0 00 00      cmp b, 0
2682   14B9 C6 F9 14      je _if32_else
2683   14BC             _if32_TRUE:
2684   14BC             ; value = (value * 16) + (hex_char - 'a' + 10); 
2685   14BC FA FF FF      lea d, [bp + -1] ; $value
2686   14BF DA            push d
2687   14C0 FA FF FF      lea d, [bp + -1] ; $value
2688   14C3 2A            mov b, [d]
2689   14C4 38 00 00      mov c, 0
2690   14C7             ; --- START FACTORS
2691   14C7 D7            push a
2692   14C8 11            mov a, b
2693   14C9 FD 2E 10 00   mov32 cb, $00000010
2693   14CD 00 00 
2694   14CF AC            mul a, b ; *
2695   14D0 11            mov a, b
2696   14D1 27            mov b, a
2697   14D2 E4            pop a
2698   14D3             ; --- END FACTORS
2699   14D3             ; --- START TERMS
2700   14D3 D7            push a
2701   14D4 11            mov a, b
2702   14D5 FA FC FF      lea d, [bp + -4] ; $hex_char
2703   14D8 32            mov bl, [d]
2704   14D9 A7 00         mov bh, 0
2705   14DB 38 00 00      mov c, 0
2706   14DE             ; --- START TERMS
2707   14DE D7            push a
2708   14DF 11            mov a, b
2709   14E0 FD 2E 61 00   mov32 cb, $00000061
2709   14E4 00 00 
2710   14E6 60            sub a, b
2711   14E7 27            mov b, a
2712   14E8 11            mov a, b
2713   14E9 FD 2E 0A 00   mov32 cb, $0000000a
2713   14ED 00 00 
2714   14EF 56            add b, a
2715   14F0 E4            pop a
2716   14F1             ; --- END TERMS
2717   14F1 56            add b, a
2718   14F2 E4            pop a
2719   14F3             ; --- END TERMS
2720   14F3 E7            pop d
2721   14F4 FD 43         mov [d], b
2722   14F6 0A 9D 15      jmp _if32_exit
2723   14F9             _if32_else:
2724   14F9             ; if (hex_char >= 'A' && hex_char <= 'F')  
2725   14F9             _if33_cond:
2726   14F9 FA FC FF      lea d, [bp + -4] ; $hex_char
2727   14FC 32            mov bl, [d]
2728   14FD A7 00         mov bh, 0
2729   14FF 38 00 00      mov c, 0
2730   1502             ; --- START RELATIONAL
2731   1502 D7            push a
2732   1503 11            mov a, b
2733   1504 FD 2E 41 00   mov32 cb, $00000041
2733   1508 00 00 
2734   150A B0            cmp a, b
2735   150B FD 80         sge ; >=
2736   150D E4            pop a
2737   150E             ; --- END RELATIONAL
2738   150E             ; --- START LOGICAL AND
2739   150E D7            push a
2740   150F 11            mov a, b
2741   1510 FA FC FF      lea d, [bp + -4] ; $hex_char
2742   1513 32            mov bl, [d]
2743   1514 A7 00         mov bh, 0
2744   1516 38 00 00      mov c, 0
2745   1519             ; --- START RELATIONAL
2746   1519 D7            push a
2747   151A 11            mov a, b
2748   151B FD 2E 46 00   mov32 cb, $00000046
2748   151F 00 00 
2749   1521 B0            cmp a, b
2750   1522 FD 74         sle ; <= (signed)
2751   1524 E4            pop a
2752   1525             ; --- END RELATIONAL
2753   1525 FD A7         sand a, b
2754   1527 E4            pop a
2755   1528             ; --- END LOGICAL AND
2756   1528 C0 00 00      cmp b, 0
2757   152B C6 6B 15      je _if33_else
2758   152E             _if33_TRUE:
2759   152E             ; value = (value * 16) + (hex_char - 'A' + 10); 
2760   152E FA FF FF      lea d, [bp + -1] ; $value
2761   1531 DA            push d
2762   1532 FA FF FF      lea d, [bp + -1] ; $value
2763   1535 2A            mov b, [d]
2764   1536 38 00 00      mov c, 0
2765   1539             ; --- START FACTORS
2766   1539 D7            push a
2767   153A 11            mov a, b
2768   153B FD 2E 10 00   mov32 cb, $00000010
2768   153F 00 00 
2769   1541 AC            mul a, b ; *
2770   1542 11            mov a, b
2771   1543 27            mov b, a
2772   1544 E4            pop a
2773   1545             ; --- END FACTORS
2774   1545             ; --- START TERMS
2775   1545 D7            push a
2776   1546 11            mov a, b
2777   1547 FA FC FF      lea d, [bp + -4] ; $hex_char
2778   154A 32            mov bl, [d]
2779   154B A7 00         mov bh, 0
2780   154D 38 00 00      mov c, 0
2781   1550             ; --- START TERMS
2782   1550 D7            push a
2783   1551 11            mov a, b
2784   1552 FD 2E 41 00   mov32 cb, $00000041
2784   1556 00 00 
2785   1558 60            sub a, b
2786   1559 27            mov b, a
2787   155A 11            mov a, b
2788   155B FD 2E 0A 00   mov32 cb, $0000000a
2788   155F 00 00 
2789   1561 56            add b, a
2790   1562 E4            pop a
2791   1563             ; --- END TERMS
2792   1563 56            add b, a
2793   1564 E4            pop a
2794   1565             ; --- END TERMS
2795   1565 E7            pop d
2796   1566 FD 43         mov [d], b
2797   1568 0A 9D 15      jmp _if33_exit
2798   156B             _if33_else:
2799   156B             ; value = (value * 16) + (hex_char - '0'); 
2800   156B FA FF FF      lea d, [bp + -1] ; $value
2801   156E DA            push d
2802   156F FA FF FF      lea d, [bp + -1] ; $value
2803   1572 2A            mov b, [d]
2804   1573 38 00 00      mov c, 0
2805   1576             ; --- START FACTORS
2806   1576 D7            push a
2807   1577 11            mov a, b
2808   1578 FD 2E 10 00   mov32 cb, $00000010
2808   157C 00 00 
2809   157E AC            mul a, b ; *
2810   157F 11            mov a, b
2811   1580 27            mov b, a
2812   1581 E4            pop a
2813   1582             ; --- END FACTORS
2814   1582             ; --- START TERMS
2815   1582 D7            push a
2816   1583 11            mov a, b
2817   1584 FA FC FF      lea d, [bp + -4] ; $hex_char
2818   1587 32            mov bl, [d]
2819   1588 A7 00         mov bh, 0
2820   158A 38 00 00      mov c, 0
2821   158D             ; --- START TERMS
2822   158D D7            push a
2823   158E 11            mov a, b
2824   158F FD 2E 30 00   mov32 cb, $00000030
2824   1593 00 00 
2825   1595 60            sub a, b
2826   1596 27            mov b, a
2827   1597 E4            pop a
2828   1598             ; --- END TERMS
2829   1598 56            add b, a
2830   1599 E4            pop a
2831   159A             ; --- END TERMS
2832   159A E7            pop d
2833   159B FD 43         mov [d], b
2834   159D             _if33_exit:
2835   159D             _if32_exit:
2836   159D             _for31_update:
2837   159D FA FD FF      lea d, [bp + -3] ; $i
2838   15A0 2A            mov b, [d]
2839   15A1 38 00 00      mov c, 0
2840   15A4 11            mov a, b
2841   15A5 FD 77         inc b
2842   15A7 FA FD FF      lea d, [bp + -3] ; $i
2843   15AA FD 43         mov [d], b
2844   15AC 27            mov b, a
2845   15AD 0A 4C 14      jmp _for31_cond
2846   15B0             _for31_exit:
2847   15B0             ; return value; 
2848   15B0 FA FF FF      lea d, [bp + -1] ; $value
2849   15B3 2A            mov b, [d]
2850   15B4 38 00 00      mov c, 0
2851   15B7 F9            leave
2852   15B8 09            ret
2853   15B9             
2854   15B9             gets:
2855   15B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2856   15BC             
2857   15BC             ; --- BEGIN INLINE ASM SEGMENT
2858   15BC FA 05 00      lea d, [bp + 5] ; $s
2859   15BF 15            mov a, [d]
2860   15C0 3C            mov d, a
2861   15C1 07 D0 1F      call _gets
2862   15C4             ; --- END INLINE ASM SEGMENT
2863   15C4             
2864   15C4             ; return strlen(s); 
2865   15C4             ; --- START FUNCTION CALL
2866   15C4 FA 05 00      lea d, [bp + 5] ; $s
2867   15C7 2A            mov b, [d]
2868   15C8 38 00 00      mov c, 0
2869   15CB FD AB         swp b
2870   15CD D8            push b
2871   15CE 07 16 07      call strlen
2872   15D1 51 02 00      add sp, 2
2873   15D4             ; --- END FUNCTION CALL
2874   15D4 F9            leave
2875   15D5 09            ret
2876   15D6             
2877   15D6             print_signed:
2878   15D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2879   15D9             ; char digits[5]; 
2880   15D9 52 05 00      sub sp, 5
2881   15DC             ; int i = 0; 
2882   15DC 52 02 00      sub sp, 2
2883   15DF             ; --- START LOCAL VAR INITIALIZATION
2884   15DF FA FA FF      lea d, [bp + -6] ; $i
2885   15E2 DA            push d
2886   15E3 FD 2E 00 00   mov32 cb, $00000000
2886   15E7 00 00 
2887   15E9 E7            pop d
2888   15EA FD 43         mov [d], b
2889   15EC             ; --- END LOCAL VAR INITIALIZATION
2890   15EC             ; if (num < 0) { 
2891   15EC             _if34_cond:
2892   15EC FA 05 00      lea d, [bp + 5] ; $num
2893   15EF 2A            mov b, [d]
2894   15F0 38 00 00      mov c, 0
2895   15F3             ; --- START RELATIONAL
2896   15F3 D7            push a
2897   15F4 11            mov a, b
2898   15F5 FD 2E 00 00   mov32 cb, $00000000
2898   15F9 00 00 
2899   15FB B0            cmp a, b
2900   15FC FD 73         slt ; < (signed)
2901   15FE E4            pop a
2902   15FF             ; --- END RELATIONAL
2903   15FF C0 00 00      cmp b, 0
2904   1602 C6 25 16      je _if34_else
2905   1605             _if34_TRUE:
2906   1605             ; putchar('-'); 
2907   1605             ; --- START FUNCTION CALL
2908   1605 FD 2E 2D 00   mov32 cb, $0000002d
2908   1609 00 00 
2909   160B DD            push bl
2910   160C 07 BA 1D      call putchar
2911   160F 51 01 00      add sp, 1
2912   1612             ; --- END FUNCTION CALL
2913   1612             ; num = -num; 
2914   1612 FA 05 00      lea d, [bp + 5] ; $num
2915   1615 DA            push d
2916   1616 FA 05 00      lea d, [bp + 5] ; $num
2917   1619 2A            mov b, [d]
2918   161A 38 00 00      mov c, 0
2919   161D FD 97         neg b
2920   161F E7            pop d
2921   1620 FD 43         mov [d], b
2922   1622 0A 50 16      jmp _if34_exit
2923   1625             _if34_else:
2924   1625             ; if (num == 0) { 
2925   1625             _if35_cond:
2926   1625 FA 05 00      lea d, [bp + 5] ; $num
2927   1628 2A            mov b, [d]
2928   1629 38 00 00      mov c, 0
2929   162C             ; --- START RELATIONAL
2930   162C D7            push a
2931   162D 11            mov a, b
2932   162E FD 2E 00 00   mov32 cb, $00000000
2932   1632 00 00 
2933   1634 B0            cmp a, b
2934   1635 FD 71         seq ; ==
2935   1637 E4            pop a
2936   1638             ; --- END RELATIONAL
2937   1638 C0 00 00      cmp b, 0
2938   163B C6 50 16      je _if35_exit
2939   163E             _if35_TRUE:
2940   163E             ; putchar('0'); 
2941   163E             ; --- START FUNCTION CALL
2942   163E FD 2E 30 00   mov32 cb, $00000030
2942   1642 00 00 
2943   1644 DD            push bl
2944   1645 07 BA 1D      call putchar
2945   1648 51 01 00      add sp, 1
2946   164B             ; --- END FUNCTION CALL
2947   164B             ; return; 
2948   164B F9            leave
2949   164C 09            ret
2950   164D 0A 50 16      jmp _if35_exit
2951   1650             _if35_exit:
2952   1650             _if34_exit:
2953   1650             ; while (num > 0) { 
2954   1650             _while36_cond:
2955   1650 FA 05 00      lea d, [bp + 5] ; $num
2956   1653 2A            mov b, [d]
2957   1654 38 00 00      mov c, 0
2958   1657             ; --- START RELATIONAL
2959   1657 D7            push a
2960   1658 11            mov a, b
2961   1659 FD 2E 00 00   mov32 cb, $00000000
2961   165D 00 00 
2962   165F B0            cmp a, b
2963   1660 FD 7F         sgt ; >
2964   1662 E4            pop a
2965   1663             ; --- END RELATIONAL
2966   1663 C0 00 00      cmp b, 0
2967   1666 C6 C5 16      je _while36_exit
2968   1669             _while36_block:
2969   1669             ; digits[i] = '0' + (num % 10); 
2970   1669 FA FC FF      lea d, [bp + -4] ; $digits
2971   166C D7            push a
2972   166D DA            push d
2973   166E FA FA FF      lea d, [bp + -6] ; $i
2974   1671 2A            mov b, [d]
2975   1672 38 00 00      mov c, 0
2976   1675 E7            pop d
2977   1676 5A            add d, b
2978   1677 E4            pop a
2979   1678 DA            push d
2980   1679 FD 2E 30 00   mov32 cb, $00000030
2980   167D 00 00 
2981   167F             ; --- START TERMS
2982   167F D7            push a
2983   1680 11            mov a, b
2984   1681 FA 05 00      lea d, [bp + 5] ; $num
2985   1684 2A            mov b, [d]
2986   1685 38 00 00      mov c, 0
2987   1688             ; --- START FACTORS
2988   1688 D7            push a
2989   1689 11            mov a, b
2990   168A FD 2E 0A 00   mov32 cb, $0000000a
2990   168E 00 00 
2991   1690 AE            div a, b ; 
2992   1691 11            mov a, b
2993   1692 27            mov b, a
2994   1693 E4            pop a
2995   1694             ; --- END FACTORS
2996   1694 56            add b, a
2997   1695 E4            pop a
2998   1696             ; --- END TERMS
2999   1696 E7            pop d
3000   1697 FD 3E         mov [d], bl
3001   1699             ; num = num / 10; 
3002   1699 FA 05 00      lea d, [bp + 5] ; $num
3003   169C DA            push d
3004   169D FA 05 00      lea d, [bp + 5] ; $num
3005   16A0 2A            mov b, [d]
3006   16A1 38 00 00      mov c, 0
3007   16A4             ; --- START FACTORS
3008   16A4 D7            push a
3009   16A5 11            mov a, b
3010   16A6 FD 2E 0A 00   mov32 cb, $0000000a
3010   16AA 00 00 
3011   16AC AE            div a, b
3012   16AD 27            mov b, a
3013   16AE E4            pop a
3014   16AF             ; --- END FACTORS
3015   16AF E7            pop d
3016   16B0 FD 43         mov [d], b
3017   16B2             ; i++; 
3018   16B2 FA FA FF      lea d, [bp + -6] ; $i
3019   16B5 2A            mov b, [d]
3020   16B6 38 00 00      mov c, 0
3021   16B9 11            mov a, b
3022   16BA FD 77         inc b
3023   16BC FA FA FF      lea d, [bp + -6] ; $i
3024   16BF FD 43         mov [d], b
3025   16C1 27            mov b, a
3026   16C2 0A 50 16      jmp _while36_cond
3027   16C5             _while36_exit:
3028   16C5             ; while (i > 0) { 
3029   16C5             _while37_cond:
3030   16C5 FA FA FF      lea d, [bp + -6] ; $i
3031   16C8 2A            mov b, [d]
3032   16C9 38 00 00      mov c, 0
3033   16CC             ; --- START RELATIONAL
3034   16CC D7            push a
3035   16CD 11            mov a, b
3036   16CE FD 2E 00 00   mov32 cb, $00000000
3036   16D2 00 00 
3037   16D4 B0            cmp a, b
3038   16D5 FD 7F         sgt ; >
3039   16D7 E4            pop a
3040   16D8             ; --- END RELATIONAL
3041   16D8 C0 00 00      cmp b, 0
3042   16DB C6 0D 17      je _while37_exit
3043   16DE             _while37_block:
3044   16DE             ; i--; 
3045   16DE FA FA FF      lea d, [bp + -6] ; $i
3046   16E1 2A            mov b, [d]
3047   16E2 38 00 00      mov c, 0
3048   16E5 11            mov a, b
3049   16E6 FD 7D         dec b
3050   16E8 FA FA FF      lea d, [bp + -6] ; $i
3051   16EB FD 43         mov [d], b
3052   16ED 27            mov b, a
3053   16EE             ; putchar(digits[i]); 
3054   16EE             ; --- START FUNCTION CALL
3055   16EE FA FC FF      lea d, [bp + -4] ; $digits
3056   16F1 D7            push a
3057   16F2 DA            push d
3058   16F3 FA FA FF      lea d, [bp + -6] ; $i
3059   16F6 2A            mov b, [d]
3060   16F7 38 00 00      mov c, 0
3061   16FA E7            pop d
3062   16FB 5A            add d, b
3063   16FC E4            pop a
3064   16FD 32            mov bl, [d]
3065   16FE A7 00         mov bh, 0
3066   1700 38 00 00      mov c, 0
3067   1703 DD            push bl
3068   1704 07 BA 1D      call putchar
3069   1707 51 01 00      add sp, 1
3070   170A             ; --- END FUNCTION CALL
3071   170A 0A C5 16      jmp _while37_cond
3072   170D             _while37_exit:
3073   170D F9            leave
3074   170E 09            ret
3075   170F             
3076   170F             print_signed_long:
3077   170F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3078   1712             ; char digits[10]; 
3079   1712 52 0A 00      sub sp, 10
3080   1715             ; int i = 0; 
3081   1715 52 02 00      sub sp, 2
3082   1718             ; --- START LOCAL VAR INITIALIZATION
3083   1718 FA F5 FF      lea d, [bp + -11] ; $i
3084   171B DA            push d
3085   171C FD 2E 00 00   mov32 cb, $00000000
3085   1720 00 00 
3086   1722 E7            pop d
3087   1723 FD 43         mov [d], b
3088   1725             ; --- END LOCAL VAR INITIALIZATION
3089   1725             ; if (num < 0) { 
3090   1725             _if38_cond:
3091   1725 FA 05 00      lea d, [bp + 5] ; $num
3092   1728 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3093   172B FD 39         mov c, b ; And place it into C
3094   172D 2A            mov b, [d] ; Lower Word in B
3095   172E             ; --- START RELATIONAL
3096   172E D7            push a
3097   172F FD D8         push g
3098   1731 11            mov a, b
3099   1732 FD 7A         mov g, c
3100   1734 FD 2E 00 00   mov32 cb, $00000000
3100   1738 00 00 
3101   173A FD AF         cmp32 ga, cb
3102   173C FD 73         slt ; <
3103   173E FD F1         pop g
3104   1740 E4            pop a
3105   1741             ; --- END RELATIONAL
3106   1741 C0 00 00      cmp b, 0
3107   1744 C6 78 17      je _if38_else
3108   1747             _if38_TRUE:
3109   1747             ; putchar('-'); 
3110   1747             ; --- START FUNCTION CALL
3111   1747 FD 2E 2D 00   mov32 cb, $0000002d
3111   174B 00 00 
3112   174D DD            push bl
3113   174E 07 BA 1D      call putchar
3114   1751 51 01 00      add sp, 1
3115   1754             ; --- END FUNCTION CALL
3116   1754             ; num = -num; 
3117   1754 FA 05 00      lea d, [bp + 5] ; $num
3118   1757 DA            push d
3119   1758 FA 05 00      lea d, [bp + 5] ; $num
3120   175B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3121   175E FD 39         mov c, b ; And place it into C
3122   1760 2A            mov b, [d] ; Lower Word in B
3123   1761 12            mov a, c
3124   1762 95            not a
3125   1763 97            not b
3126   1764 55 01 00      add b, 1
3127   1767 5B 00 00      adc a, 0
3128   176A 39            mov c, a
3129   176B E7            pop d
3130   176C FD 43         mov [d], b
3131   176E 26 00 00      mov b, 0
3132   1771 FD 44 02 00   mov [d + 2], b
3133   1775 0A AC 17      jmp _if38_exit
3134   1778             _if38_else:
3135   1778             ; if (num == 0) { 
3136   1778             _if39_cond:
3137   1778 FA 05 00      lea d, [bp + 5] ; $num
3138   177B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3139   177E FD 39         mov c, b ; And place it into C
3140   1780 2A            mov b, [d] ; Lower Word in B
3141   1781             ; --- START RELATIONAL
3142   1781 D7            push a
3143   1782 FD D8         push g
3144   1784 11            mov a, b
3145   1785 FD 7A         mov g, c
3146   1787 FD 2E 00 00   mov32 cb, $00000000
3146   178B 00 00 
3147   178D FD AF         cmp32 ga, cb
3148   178F FD 71         seq ; ==
3149   1791 FD F1         pop g
3150   1793 E4            pop a
3151   1794             ; --- END RELATIONAL
3152   1794 C0 00 00      cmp b, 0
3153   1797 C6 AC 17      je _if39_exit
3154   179A             _if39_TRUE:
3155   179A             ; putchar('0'); 
3156   179A             ; --- START FUNCTION CALL
3157   179A FD 2E 30 00   mov32 cb, $00000030
3157   179E 00 00 
3158   17A0 DD            push bl
3159   17A1 07 BA 1D      call putchar
3160   17A4 51 01 00      add sp, 1
3161   17A7             ; --- END FUNCTION CALL
3162   17A7             ; return; 
3163   17A7 F9            leave
3164   17A8 09            ret
3165   17A9 0A AC 17      jmp _if39_exit
3166   17AC             _if39_exit:
3167   17AC             _if38_exit:
3168   17AC             ; while (num > 0) { 
3169   17AC             _while40_cond:
3170   17AC FA 05 00      lea d, [bp + 5] ; $num
3171   17AF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3172   17B2 FD 39         mov c, b ; And place it into C
3173   17B4 2A            mov b, [d] ; Lower Word in B
3174   17B5             ; --- START RELATIONAL
3175   17B5 D7            push a
3176   17B6 FD D8         push g
3177   17B8 11            mov a, b
3178   17B9 FD 7A         mov g, c
3179   17BB FD 2E 00 00   mov32 cb, $00000000
3179   17BF 00 00 
3180   17C1 FD AF         cmp32 ga, cb
3181   17C3 FD 7F         sgt
3182   17C5 FD F1         pop g
3183   17C7 E4            pop a
3184   17C8             ; --- END RELATIONAL
3185   17C8 C0 00 00      cmp b, 0
3186   17CB C6 34 18      je _while40_exit
3187   17CE             _while40_block:
3188   17CE             ; digits[i] = '0' + (num % 10); 
3189   17CE FA F7 FF      lea d, [bp + -9] ; $digits
3190   17D1 D7            push a
3191   17D2 DA            push d
3192   17D3 FA F5 FF      lea d, [bp + -11] ; $i
3193   17D6 2A            mov b, [d]
3194   17D7 38 00 00      mov c, 0
3195   17DA E7            pop d
3196   17DB 5A            add d, b
3197   17DC E4            pop a
3198   17DD DA            push d
3199   17DE FD 2E 30 00   mov32 cb, $00000030
3199   17E2 00 00 
3200   17E4             ; --- START TERMS
3201   17E4 D7            push a
3202   17E5 11            mov a, b
3203   17E6 FA 05 00      lea d, [bp + 5] ; $num
3204   17E9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3205   17EC FD 39         mov c, b ; And place it into C
3206   17EE 2A            mov b, [d] ; Lower Word in B
3207   17EF             ; --- START FACTORS
3208   17EF D7            push a
3209   17F0 11            mov a, b
3210   17F1 FD 2E 0A 00   mov32 cb, $0000000a
3210   17F5 00 00 
3211   17F7 AE            div a, b ; 
3212   17F8 11            mov a, b
3213   17F9 27            mov b, a
3214   17FA E4            pop a
3215   17FB             ; --- END FACTORS
3216   17FB FD 15         add32 cb, ga
3217   17FD E4            pop a
3218   17FE             ; --- END TERMS
3219   17FE E7            pop d
3220   17FF FD 3E         mov [d], bl
3221   1801             ; num = num / 10; 
3222   1801 FA 05 00      lea d, [bp + 5] ; $num
3223   1804 DA            push d
3224   1805 FA 05 00      lea d, [bp + 5] ; $num
3225   1808 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3226   180B FD 39         mov c, b ; And place it into C
3227   180D 2A            mov b, [d] ; Lower Word in B
3228   180E             ; --- START FACTORS
3229   180E D7            push a
3230   180F 11            mov a, b
3231   1810 FD 2E 0A 00   mov32 cb, $0000000a
3231   1814 00 00 
3232   1816 AE            div a, b
3233   1817 27            mov b, a
3234   1818 E4            pop a
3235   1819             ; --- END FACTORS
3236   1819 E7            pop d
3237   181A FD 43         mov [d], b
3238   181C 28            mov b, c
3239   181D FD 44 02 00   mov [d + 2], b
3240   1821             ; i++; 
3241   1821 FA F5 FF      lea d, [bp + -11] ; $i
3242   1824 2A            mov b, [d]
3243   1825 38 00 00      mov c, 0
3244   1828 11            mov a, b
3245   1829 FD 77         inc b
3246   182B FA F5 FF      lea d, [bp + -11] ; $i
3247   182E FD 43         mov [d], b
3248   1830 27            mov b, a
3249   1831 0A AC 17      jmp _while40_cond
3250   1834             _while40_exit:
3251   1834             ; while (i > 0) { 
3252   1834             _while41_cond:
3253   1834 FA F5 FF      lea d, [bp + -11] ; $i
3254   1837 2A            mov b, [d]
3255   1838 38 00 00      mov c, 0
3256   183B             ; --- START RELATIONAL
3257   183B D7            push a
3258   183C 11            mov a, b
3259   183D FD 2E 00 00   mov32 cb, $00000000
3259   1841 00 00 
3260   1843 B0            cmp a, b
3261   1844 FD 7F         sgt ; >
3262   1846 E4            pop a
3263   1847             ; --- END RELATIONAL
3264   1847 C0 00 00      cmp b, 0
3265   184A C6 7C 18      je _while41_exit
3266   184D             _while41_block:
3267   184D             ; i--; 
3268   184D FA F5 FF      lea d, [bp + -11] ; $i
3269   1850 2A            mov b, [d]
3270   1851 38 00 00      mov c, 0
3271   1854 11            mov a, b
3272   1855 FD 7D         dec b
3273   1857 FA F5 FF      lea d, [bp + -11] ; $i
3274   185A FD 43         mov [d], b
3275   185C 27            mov b, a
3276   185D             ; putchar(digits[i]); 
3277   185D             ; --- START FUNCTION CALL
3278   185D FA F7 FF      lea d, [bp + -9] ; $digits
3279   1860 D7            push a
3280   1861 DA            push d
3281   1862 FA F5 FF      lea d, [bp + -11] ; $i
3282   1865 2A            mov b, [d]
3283   1866 38 00 00      mov c, 0
3284   1869 E7            pop d
3285   186A 5A            add d, b
3286   186B E4            pop a
3287   186C 32            mov bl, [d]
3288   186D A7 00         mov bh, 0
3289   186F 38 00 00      mov c, 0
3290   1872 DD            push bl
3291   1873 07 BA 1D      call putchar
3292   1876 51 01 00      add sp, 1
3293   1879             ; --- END FUNCTION CALL
3294   1879 0A 34 18      jmp _while41_cond
3295   187C             _while41_exit:
3296   187C F9            leave
3297   187D 09            ret
3298   187E             
3299   187E             print_unsigned_long:
3300   187E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3301   1881             ; char digits[10]; 
3302   1881 52 0A 00      sub sp, 10
3303   1884             ; int i; 
3304   1884 52 02 00      sub sp, 2
3305   1887             ; i = 0; 
3306   1887 FA F5 FF      lea d, [bp + -11] ; $i
3307   188A DA            push d
3308   188B FD 2E 00 00   mov32 cb, $00000000
3308   188F 00 00 
3309   1891 E7            pop d
3310   1892 FD 43         mov [d], b
3311   1894             ; if(num == 0){ 
3312   1894             _if42_cond:
3313   1894 FA 05 00      lea d, [bp + 5] ; $num
3314   1897 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3315   189A FD 39         mov c, b ; And place it into C
3316   189C 2A            mov b, [d] ; Lower Word in B
3317   189D             ; --- START RELATIONAL
3318   189D D7            push a
3319   189E FD D8         push g
3320   18A0 11            mov a, b
3321   18A1 FD 7A         mov g, c
3322   18A3 FD 2E 00 00   mov32 cb, $00000000
3322   18A7 00 00 
3323   18A9 FD AF         cmp32 ga, cb
3324   18AB FD 71         seq ; ==
3325   18AD FD F1         pop g
3326   18AF E4            pop a
3327   18B0             ; --- END RELATIONAL
3328   18B0 C0 00 00      cmp b, 0
3329   18B3 C6 C8 18      je _if42_exit
3330   18B6             _if42_TRUE:
3331   18B6             ; putchar('0'); 
3332   18B6             ; --- START FUNCTION CALL
3333   18B6 FD 2E 30 00   mov32 cb, $00000030
3333   18BA 00 00 
3334   18BC DD            push bl
3335   18BD 07 BA 1D      call putchar
3336   18C0 51 01 00      add sp, 1
3337   18C3             ; --- END FUNCTION CALL
3338   18C3             ; return; 
3339   18C3 F9            leave
3340   18C4 09            ret
3341   18C5 0A C8 18      jmp _if42_exit
3342   18C8             _if42_exit:
3343   18C8             ; while (num > 0) { 
3344   18C8             _while43_cond:
3345   18C8 FA 05 00      lea d, [bp + 5] ; $num
3346   18CB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3347   18CE FD 39         mov c, b ; And place it into C
3348   18D0 2A            mov b, [d] ; Lower Word in B
3349   18D1             ; --- START RELATIONAL
3350   18D1 D7            push a
3351   18D2 FD D8         push g
3352   18D4 11            mov a, b
3353   18D5 FD 7A         mov g, c
3354   18D7 FD 2E 00 00   mov32 cb, $00000000
3354   18DB 00 00 
3355   18DD FD AF         cmp32 ga, cb
3356   18DF FD 81         sgu
3357   18E1 FD F1         pop g
3358   18E3 E4            pop a
3359   18E4             ; --- END RELATIONAL
3360   18E4 C0 00 00      cmp b, 0
3361   18E7 C6 50 19      je _while43_exit
3362   18EA             _while43_block:
3363   18EA             ; digits[i] = '0' + (num % 10); 
3364   18EA FA F7 FF      lea d, [bp + -9] ; $digits
3365   18ED D7            push a
3366   18EE DA            push d
3367   18EF FA F5 FF      lea d, [bp + -11] ; $i
3368   18F2 2A            mov b, [d]
3369   18F3 38 00 00      mov c, 0
3370   18F6 E7            pop d
3371   18F7 5A            add d, b
3372   18F8 E4            pop a
3373   18F9 DA            push d
3374   18FA FD 2E 30 00   mov32 cb, $00000030
3374   18FE 00 00 
3375   1900             ; --- START TERMS
3376   1900 D7            push a
3377   1901 11            mov a, b
3378   1902 FA 05 00      lea d, [bp + 5] ; $num
3379   1905 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3380   1908 FD 39         mov c, b ; And place it into C
3381   190A 2A            mov b, [d] ; Lower Word in B
3382   190B             ; --- START FACTORS
3383   190B D7            push a
3384   190C 11            mov a, b
3385   190D FD 2E 0A 00   mov32 cb, $0000000a
3385   1911 00 00 
3386   1913 AE            div a, b ; 
3387   1914 11            mov a, b
3388   1915 27            mov b, a
3389   1916 E4            pop a
3390   1917             ; --- END FACTORS
3391   1917 FD 15         add32 cb, ga
3392   1919 E4            pop a
3393   191A             ; --- END TERMS
3394   191A E7            pop d
3395   191B FD 3E         mov [d], bl
3396   191D             ; num = num / 10; 
3397   191D FA 05 00      lea d, [bp + 5] ; $num
3398   1920 DA            push d
3399   1921 FA 05 00      lea d, [bp + 5] ; $num
3400   1924 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3401   1927 FD 39         mov c, b ; And place it into C
3402   1929 2A            mov b, [d] ; Lower Word in B
3403   192A             ; --- START FACTORS
3404   192A D7            push a
3405   192B 11            mov a, b
3406   192C FD 2E 0A 00   mov32 cb, $0000000a
3406   1930 00 00 
3407   1932 AE            div a, b
3408   1933 27            mov b, a
3409   1934 E4            pop a
3410   1935             ; --- END FACTORS
3411   1935 E7            pop d
3412   1936 FD 43         mov [d], b
3413   1938 28            mov b, c
3414   1939 FD 44 02 00   mov [d + 2], b
3415   193D             ; i++; 
3416   193D FA F5 FF      lea d, [bp + -11] ; $i
3417   1940 2A            mov b, [d]
3418   1941 38 00 00      mov c, 0
3419   1944 11            mov a, b
3420   1945 FD 77         inc b
3421   1947 FA F5 FF      lea d, [bp + -11] ; $i
3422   194A FD 43         mov [d], b
3423   194C 27            mov b, a
3424   194D 0A C8 18      jmp _while43_cond
3425   1950             _while43_exit:
3426   1950             ; while (i > 0) { 
3427   1950             _while44_cond:
3428   1950 FA F5 FF      lea d, [bp + -11] ; $i
3429   1953 2A            mov b, [d]
3430   1954 38 00 00      mov c, 0
3431   1957             ; --- START RELATIONAL
3432   1957 D7            push a
3433   1958 11            mov a, b
3434   1959 FD 2E 00 00   mov32 cb, $00000000
3434   195D 00 00 
3435   195F B0            cmp a, b
3436   1960 FD 7F         sgt ; >
3437   1962 E4            pop a
3438   1963             ; --- END RELATIONAL
3439   1963 C0 00 00      cmp b, 0
3440   1966 C6 98 19      je _while44_exit
3441   1969             _while44_block:
3442   1969             ; i--; 
3443   1969 FA F5 FF      lea d, [bp + -11] ; $i
3444   196C 2A            mov b, [d]
3445   196D 38 00 00      mov c, 0
3446   1970 11            mov a, b
3447   1971 FD 7D         dec b
3448   1973 FA F5 FF      lea d, [bp + -11] ; $i
3449   1976 FD 43         mov [d], b
3450   1978 27            mov b, a
3451   1979             ; putchar(digits[i]); 
3452   1979             ; --- START FUNCTION CALL
3453   1979 FA F7 FF      lea d, [bp + -9] ; $digits
3454   197C D7            push a
3455   197D DA            push d
3456   197E FA F5 FF      lea d, [bp + -11] ; $i
3457   1981 2A            mov b, [d]
3458   1982 38 00 00      mov c, 0
3459   1985 E7            pop d
3460   1986 5A            add d, b
3461   1987 E4            pop a
3462   1988 32            mov bl, [d]
3463   1989 A7 00         mov bh, 0
3464   198B 38 00 00      mov c, 0
3465   198E DD            push bl
3466   198F 07 BA 1D      call putchar
3467   1992 51 01 00      add sp, 1
3468   1995             ; --- END FUNCTION CALL
3469   1995 0A 50 19      jmp _while44_cond
3470   1998             _while44_exit:
3471   1998 F9            leave
3472   1999 09            ret
3473   199A             
3474   199A             sprint_unsigned:
3475   199A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3476   199D             ; char digits[5]; 
3477   199D 52 05 00      sub sp, 5
3478   19A0             ; int i; 
3479   19A0 52 02 00      sub sp, 2
3480   19A3             ; int len = 0; 
3481   19A3 52 02 00      sub sp, 2
3482   19A6             ; --- START LOCAL VAR INITIALIZATION
3483   19A6 FA F8 FF      lea d, [bp + -8] ; $len
3484   19A9 DA            push d
3485   19AA FD 2E 00 00   mov32 cb, $00000000
3485   19AE 00 00 
3486   19B0 E7            pop d
3487   19B1 FD 43         mov [d], b
3488   19B3             ; --- END LOCAL VAR INITIALIZATION
3489   19B3             ; i = 0; 
3490   19B3 FA FA FF      lea d, [bp + -6] ; $i
3491   19B6 DA            push d
3492   19B7 FD 2E 00 00   mov32 cb, $00000000
3492   19BB 00 00 
3493   19BD E7            pop d
3494   19BE FD 43         mov [d], b
3495   19C0             ; if(num == 0){ 
3496   19C0             _if45_cond:
3497   19C0 FA 07 00      lea d, [bp + 7] ; $num
3498   19C3 2A            mov b, [d]
3499   19C4 38 00 00      mov c, 0
3500   19C7             ; --- START RELATIONAL
3501   19C7 D7            push a
3502   19C8 11            mov a, b
3503   19C9 FD 2E 00 00   mov32 cb, $00000000
3503   19CD 00 00 
3504   19CF B0            cmp a, b
3505   19D0 FD 71         seq ; ==
3506   19D2 E4            pop a
3507   19D3             ; --- END RELATIONAL
3508   19D3 C0 00 00      cmp b, 0
3509   19D6 C6 FE 19      je _if45_exit
3510   19D9             _if45_TRUE:
3511   19D9             ; *dest++ = '0'; 
3512   19D9 FA 05 00      lea d, [bp + 5] ; $dest
3513   19DC 2A            mov b, [d]
3514   19DD 38 00 00      mov c, 0
3515   19E0 FD 77         inc b
3516   19E2 FA 05 00      lea d, [bp + 5] ; $dest
3517   19E5 FD 43         mov [d], b
3518   19E7 FD 7D         dec b
3519   19E9 D8            push b
3520   19EA FD 2E 30 00   mov32 cb, $00000030
3520   19EE 00 00 
3521   19F0 E7            pop d
3522   19F1 FD 3E         mov [d], bl
3523   19F3             ; return 1; 
3524   19F3 FD 2E 01 00   mov32 cb, $00000001
3524   19F7 00 00 
3525   19F9 F9            leave
3526   19FA 09            ret
3527   19FB 0A FE 19      jmp _if45_exit
3528   19FE             _if45_exit:
3529   19FE             ; while (num > 0) { 
3530   19FE             _while46_cond:
3531   19FE FA 07 00      lea d, [bp + 7] ; $num
3532   1A01 2A            mov b, [d]
3533   1A02 38 00 00      mov c, 0
3534   1A05             ; --- START RELATIONAL
3535   1A05 D7            push a
3536   1A06 11            mov a, b
3537   1A07 FD 2E 00 00   mov32 cb, $00000000
3537   1A0B 00 00 
3538   1A0D B0            cmp a, b
3539   1A0E FD 81         sgu ; > (unsigned)
3540   1A10 E4            pop a
3541   1A11             ; --- END RELATIONAL
3542   1A11 C0 00 00      cmp b, 0
3543   1A14 C6 73 1A      je _while46_exit
3544   1A17             _while46_block:
3545   1A17             ; digits[i] = '0' + (num % 10); 
3546   1A17 FA FC FF      lea d, [bp + -4] ; $digits
3547   1A1A D7            push a
3548   1A1B DA            push d
3549   1A1C FA FA FF      lea d, [bp + -6] ; $i
3550   1A1F 2A            mov b, [d]
3551   1A20 38 00 00      mov c, 0
3552   1A23 E7            pop d
3553   1A24 5A            add d, b
3554   1A25 E4            pop a
3555   1A26 DA            push d
3556   1A27 FD 2E 30 00   mov32 cb, $00000030
3556   1A2B 00 00 
3557   1A2D             ; --- START TERMS
3558   1A2D D7            push a
3559   1A2E 11            mov a, b
3560   1A2F FA 07 00      lea d, [bp + 7] ; $num
3561   1A32 2A            mov b, [d]
3562   1A33 38 00 00      mov c, 0
3563   1A36             ; --- START FACTORS
3564   1A36 D7            push a
3565   1A37 11            mov a, b
3566   1A38 FD 2E 0A 00   mov32 cb, $0000000a
3566   1A3C 00 00 
3567   1A3E AE            div a, b ; 
3568   1A3F 11            mov a, b
3569   1A40 27            mov b, a
3570   1A41 E4            pop a
3571   1A42             ; --- END FACTORS
3572   1A42 56            add b, a
3573   1A43 E4            pop a
3574   1A44             ; --- END TERMS
3575   1A44 E7            pop d
3576   1A45 FD 3E         mov [d], bl
3577   1A47             ; num = num / 10; 
3578   1A47 FA 07 00      lea d, [bp + 7] ; $num
3579   1A4A DA            push d
3580   1A4B FA 07 00      lea d, [bp + 7] ; $num
3581   1A4E 2A            mov b, [d]
3582   1A4F 38 00 00      mov c, 0
3583   1A52             ; --- START FACTORS
3584   1A52 D7            push a
3585   1A53 11            mov a, b
3586   1A54 FD 2E 0A 00   mov32 cb, $0000000a
3586   1A58 00 00 
3587   1A5A AE            div a, b
3588   1A5B 27            mov b, a
3589   1A5C E4            pop a
3590   1A5D             ; --- END FACTORS
3591   1A5D E7            pop d
3592   1A5E FD 43         mov [d], b
3593   1A60             ; i++; 
3594   1A60 FA FA FF      lea d, [bp + -6] ; $i
3595   1A63 2A            mov b, [d]
3596   1A64 38 00 00      mov c, 0
3597   1A67 11            mov a, b
3598   1A68 FD 77         inc b
3599   1A6A FA FA FF      lea d, [bp + -6] ; $i
3600   1A6D FD 43         mov [d], b
3601   1A6F 27            mov b, a
3602   1A70 0A FE 19      jmp _while46_cond
3603   1A73             _while46_exit:
3604   1A73             ; while (i > 0) { 
3605   1A73             _while47_cond:
3606   1A73 FA FA FF      lea d, [bp + -6] ; $i
3607   1A76 2A            mov b, [d]
3608   1A77 38 00 00      mov c, 0
3609   1A7A             ; --- START RELATIONAL
3610   1A7A D7            push a
3611   1A7B 11            mov a, b
3612   1A7C FD 2E 00 00   mov32 cb, $00000000
3612   1A80 00 00 
3613   1A82 B0            cmp a, b
3614   1A83 FD 7F         sgt ; >
3615   1A85 E4            pop a
3616   1A86             ; --- END RELATIONAL
3617   1A86 C0 00 00      cmp b, 0
3618   1A89 C6 D8 1A      je _while47_exit
3619   1A8C             _while47_block:
3620   1A8C             ; i--; 
3621   1A8C FA FA FF      lea d, [bp + -6] ; $i
3622   1A8F 2A            mov b, [d]
3623   1A90 38 00 00      mov c, 0
3624   1A93 11            mov a, b
3625   1A94 FD 7D         dec b
3626   1A96 FA FA FF      lea d, [bp + -6] ; $i
3627   1A99 FD 43         mov [d], b
3628   1A9B 27            mov b, a
3629   1A9C             ; *dest++ = digits[i]; 
3630   1A9C FA 05 00      lea d, [bp + 5] ; $dest
3631   1A9F 2A            mov b, [d]
3632   1AA0 38 00 00      mov c, 0
3633   1AA3 FD 77         inc b
3634   1AA5 FA 05 00      lea d, [bp + 5] ; $dest
3635   1AA8 FD 43         mov [d], b
3636   1AAA FD 7D         dec b
3637   1AAC D8            push b
3638   1AAD FA FC FF      lea d, [bp + -4] ; $digits
3639   1AB0 D7            push a
3640   1AB1 DA            push d
3641   1AB2 FA FA FF      lea d, [bp + -6] ; $i
3642   1AB5 2A            mov b, [d]
3643   1AB6 38 00 00      mov c, 0
3644   1AB9 E7            pop d
3645   1ABA 5A            add d, b
3646   1ABB E4            pop a
3647   1ABC 32            mov bl, [d]
3648   1ABD A7 00         mov bh, 0
3649   1ABF 38 00 00      mov c, 0
3650   1AC2 E7            pop d
3651   1AC3 FD 3E         mov [d], bl
3652   1AC5             ; len++; 
3653   1AC5 FA F8 FF      lea d, [bp + -8] ; $len
3654   1AC8 2A            mov b, [d]
3655   1AC9 38 00 00      mov c, 0
3656   1ACC 11            mov a, b
3657   1ACD FD 77         inc b
3658   1ACF FA F8 FF      lea d, [bp + -8] ; $len
3659   1AD2 FD 43         mov [d], b
3660   1AD4 27            mov b, a
3661   1AD5 0A 73 1A      jmp _while47_cond
3662   1AD8             _while47_exit:
3663   1AD8             ; *dest = '\0'; 
3664   1AD8 FA 05 00      lea d, [bp + 5] ; $dest
3665   1ADB 2A            mov b, [d]
3666   1ADC 38 00 00      mov c, 0
3667   1ADF D8            push b
3668   1AE0 FD 2E 00 00   mov32 cb, $00000000
3668   1AE4 00 00 
3669   1AE6 E7            pop d
3670   1AE7 FD 3E         mov [d], bl
3671   1AE9             ; return len; 
3672   1AE9 FA F8 FF      lea d, [bp + -8] ; $len
3673   1AEC 2A            mov b, [d]
3674   1AED 38 00 00      mov c, 0
3675   1AF0 F9            leave
3676   1AF1 09            ret
3677   1AF2             
3678   1AF2             print_unsigned:
3679   1AF2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3680   1AF5             ; char digits[5]; 
3681   1AF5 52 05 00      sub sp, 5
3682   1AF8             ; int i; 
3683   1AF8 52 02 00      sub sp, 2
3684   1AFB             ; i = 0; 
3685   1AFB FA FA FF      lea d, [bp + -6] ; $i
3686   1AFE DA            push d
3687   1AFF FD 2E 00 00   mov32 cb, $00000000
3687   1B03 00 00 
3688   1B05 E7            pop d
3689   1B06 FD 43         mov [d], b
3690   1B08             ; if(num == 0){ 
3691   1B08             _if48_cond:
3692   1B08 FA 05 00      lea d, [bp + 5] ; $num
3693   1B0B 2A            mov b, [d]
3694   1B0C 38 00 00      mov c, 0
3695   1B0F             ; --- START RELATIONAL
3696   1B0F D7            push a
3697   1B10 11            mov a, b
3698   1B11 FD 2E 00 00   mov32 cb, $00000000
3698   1B15 00 00 
3699   1B17 B0            cmp a, b
3700   1B18 FD 71         seq ; ==
3701   1B1A E4            pop a
3702   1B1B             ; --- END RELATIONAL
3703   1B1B C0 00 00      cmp b, 0
3704   1B1E C6 33 1B      je _if48_exit
3705   1B21             _if48_TRUE:
3706   1B21             ; putchar('0'); 
3707   1B21             ; --- START FUNCTION CALL
3708   1B21 FD 2E 30 00   mov32 cb, $00000030
3708   1B25 00 00 
3709   1B27 DD            push bl
3710   1B28 07 BA 1D      call putchar
3711   1B2B 51 01 00      add sp, 1
3712   1B2E             ; --- END FUNCTION CALL
3713   1B2E             ; return; 
3714   1B2E F9            leave
3715   1B2F 09            ret
3716   1B30 0A 33 1B      jmp _if48_exit
3717   1B33             _if48_exit:
3718   1B33             ; while (num > 0) { 
3719   1B33             _while49_cond:
3720   1B33 FA 05 00      lea d, [bp + 5] ; $num
3721   1B36 2A            mov b, [d]
3722   1B37 38 00 00      mov c, 0
3723   1B3A             ; --- START RELATIONAL
3724   1B3A D7            push a
3725   1B3B 11            mov a, b
3726   1B3C FD 2E 00 00   mov32 cb, $00000000
3726   1B40 00 00 
3727   1B42 B0            cmp a, b
3728   1B43 FD 81         sgu ; > (unsigned)
3729   1B45 E4            pop a
3730   1B46             ; --- END RELATIONAL
3731   1B46 C0 00 00      cmp b, 0
3732   1B49 C6 A8 1B      je _while49_exit
3733   1B4C             _while49_block:
3734   1B4C             ; digits[i] = '0' + (num % 10); 
3735   1B4C FA FC FF      lea d, [bp + -4] ; $digits
3736   1B4F D7            push a
3737   1B50 DA            push d
3738   1B51 FA FA FF      lea d, [bp + -6] ; $i
3739   1B54 2A            mov b, [d]
3740   1B55 38 00 00      mov c, 0
3741   1B58 E7            pop d
3742   1B59 5A            add d, b
3743   1B5A E4            pop a
3744   1B5B DA            push d
3745   1B5C FD 2E 30 00   mov32 cb, $00000030
3745   1B60 00 00 
3746   1B62             ; --- START TERMS
3747   1B62 D7            push a
3748   1B63 11            mov a, b
3749   1B64 FA 05 00      lea d, [bp + 5] ; $num
3750   1B67 2A            mov b, [d]
3751   1B68 38 00 00      mov c, 0
3752   1B6B             ; --- START FACTORS
3753   1B6B D7            push a
3754   1B6C 11            mov a, b
3755   1B6D FD 2E 0A 00   mov32 cb, $0000000a
3755   1B71 00 00 
3756   1B73 AE            div a, b ; 
3757   1B74 11            mov a, b
3758   1B75 27            mov b, a
3759   1B76 E4            pop a
3760   1B77             ; --- END FACTORS
3761   1B77 56            add b, a
3762   1B78 E4            pop a
3763   1B79             ; --- END TERMS
3764   1B79 E7            pop d
3765   1B7A FD 3E         mov [d], bl
3766   1B7C             ; num = num / 10; 
3767   1B7C FA 05 00      lea d, [bp + 5] ; $num
3768   1B7F DA            push d
3769   1B80 FA 05 00      lea d, [bp + 5] ; $num
3770   1B83 2A            mov b, [d]
3771   1B84 38 00 00      mov c, 0
3772   1B87             ; --- START FACTORS
3773   1B87 D7            push a
3774   1B88 11            mov a, b
3775   1B89 FD 2E 0A 00   mov32 cb, $0000000a
3775   1B8D 00 00 
3776   1B8F AE            div a, b
3777   1B90 27            mov b, a
3778   1B91 E4            pop a
3779   1B92             ; --- END FACTORS
3780   1B92 E7            pop d
3781   1B93 FD 43         mov [d], b
3782   1B95             ; i++; 
3783   1B95 FA FA FF      lea d, [bp + -6] ; $i
3784   1B98 2A            mov b, [d]
3785   1B99 38 00 00      mov c, 0
3786   1B9C 11            mov a, b
3787   1B9D FD 77         inc b
3788   1B9F FA FA FF      lea d, [bp + -6] ; $i
3789   1BA2 FD 43         mov [d], b
3790   1BA4 27            mov b, a
3791   1BA5 0A 33 1B      jmp _while49_cond
3792   1BA8             _while49_exit:
3793   1BA8             ; while (i > 0) { 
3794   1BA8             _while50_cond:
3795   1BA8 FA FA FF      lea d, [bp + -6] ; $i
3796   1BAB 2A            mov b, [d]
3797   1BAC 38 00 00      mov c, 0
3798   1BAF             ; --- START RELATIONAL
3799   1BAF D7            push a
3800   1BB0 11            mov a, b
3801   1BB1 FD 2E 00 00   mov32 cb, $00000000
3801   1BB5 00 00 
3802   1BB7 B0            cmp a, b
3803   1BB8 FD 7F         sgt ; >
3804   1BBA E4            pop a
3805   1BBB             ; --- END RELATIONAL
3806   1BBB C0 00 00      cmp b, 0
3807   1BBE C6 F0 1B      je _while50_exit
3808   1BC1             _while50_block:
3809   1BC1             ; i--; 
3810   1BC1 FA FA FF      lea d, [bp + -6] ; $i
3811   1BC4 2A            mov b, [d]
3812   1BC5 38 00 00      mov c, 0
3813   1BC8 11            mov a, b
3814   1BC9 FD 7D         dec b
3815   1BCB FA FA FF      lea d, [bp + -6] ; $i
3816   1BCE FD 43         mov [d], b
3817   1BD0 27            mov b, a
3818   1BD1             ; putchar(digits[i]); 
3819   1BD1             ; --- START FUNCTION CALL
3820   1BD1 FA FC FF      lea d, [bp + -4] ; $digits
3821   1BD4 D7            push a
3822   1BD5 DA            push d
3823   1BD6 FA FA FF      lea d, [bp + -6] ; $i
3824   1BD9 2A            mov b, [d]
3825   1BDA 38 00 00      mov c, 0
3826   1BDD E7            pop d
3827   1BDE 5A            add d, b
3828   1BDF E4            pop a
3829   1BE0 32            mov bl, [d]
3830   1BE1 A7 00         mov bh, 0
3831   1BE3 38 00 00      mov c, 0
3832   1BE6 DD            push bl
3833   1BE7 07 BA 1D      call putchar
3834   1BEA 51 01 00      add sp, 1
3835   1BED             ; --- END FUNCTION CALL
3836   1BED 0A A8 1B      jmp _while50_cond
3837   1BF0             _while50_exit:
3838   1BF0 F9            leave
3839   1BF1 09            ret
3840   1BF2             
3841   1BF2             sprint_signed:
3842   1BF2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3843   1BF5             ; char digits[5]; 
3844   1BF5 52 05 00      sub sp, 5
3845   1BF8             ; int i = 0; 
3846   1BF8 52 02 00      sub sp, 2
3847   1BFB             ; --- START LOCAL VAR INITIALIZATION
3848   1BFB FA FA FF      lea d, [bp + -6] ; $i
3849   1BFE DA            push d
3850   1BFF FD 2E 00 00   mov32 cb, $00000000
3850   1C03 00 00 
3851   1C05 E7            pop d
3852   1C06 FD 43         mov [d], b
3853   1C08             ; --- END LOCAL VAR INITIALIZATION
3854   1C08             ; int len = 0; 
3855   1C08 52 02 00      sub sp, 2
3856   1C0B             ; --- START LOCAL VAR INITIALIZATION
3857   1C0B FA F8 FF      lea d, [bp + -8] ; $len
3858   1C0E DA            push d
3859   1C0F FD 2E 00 00   mov32 cb, $00000000
3859   1C13 00 00 
3860   1C15 E7            pop d
3861   1C16 FD 43         mov [d], b
3862   1C18             ; --- END LOCAL VAR INITIALIZATION
3863   1C18             ; if (num < 0) { 
3864   1C18             _if51_cond:
3865   1C18 FA 07 00      lea d, [bp + 7] ; $num
3866   1C1B 2A            mov b, [d]
3867   1C1C 38 00 00      mov c, 0
3868   1C1F             ; --- START RELATIONAL
3869   1C1F D7            push a
3870   1C20 11            mov a, b
3871   1C21 FD 2E 00 00   mov32 cb, $00000000
3871   1C25 00 00 
3872   1C27 B0            cmp a, b
3873   1C28 FD 73         slt ; < (signed)
3874   1C2A E4            pop a
3875   1C2B             ; --- END RELATIONAL
3876   1C2B C0 00 00      cmp b, 0
3877   1C2E C6 6E 1C      je _if51_else
3878   1C31             _if51_TRUE:
3879   1C31             ; *dest++ = '-'; 
3880   1C31 FA 05 00      lea d, [bp + 5] ; $dest
3881   1C34 2A            mov b, [d]
3882   1C35 38 00 00      mov c, 0
3883   1C38 FD 77         inc b
3884   1C3A FA 05 00      lea d, [bp + 5] ; $dest
3885   1C3D FD 43         mov [d], b
3886   1C3F FD 7D         dec b
3887   1C41 D8            push b
3888   1C42 FD 2E 2D 00   mov32 cb, $0000002d
3888   1C46 00 00 
3889   1C48 E7            pop d
3890   1C49 FD 3E         mov [d], bl
3891   1C4B             ; num = -num; 
3892   1C4B FA 07 00      lea d, [bp + 7] ; $num
3893   1C4E DA            push d
3894   1C4F FA 07 00      lea d, [bp + 7] ; $num
3895   1C52 2A            mov b, [d]
3896   1C53 38 00 00      mov c, 0
3897   1C56 FD 97         neg b
3898   1C58 E7            pop d
3899   1C59 FD 43         mov [d], b
3900   1C5B             ; len++; 
3901   1C5B FA F8 FF      lea d, [bp + -8] ; $len
3902   1C5E 2A            mov b, [d]
3903   1C5F 38 00 00      mov c, 0
3904   1C62 11            mov a, b
3905   1C63 FD 77         inc b
3906   1C65 FA F8 FF      lea d, [bp + -8] ; $len
3907   1C68 FD 43         mov [d], b
3908   1C6A 27            mov b, a
3909   1C6B 0A BD 1C      jmp _if51_exit
3910   1C6E             _if51_else:
3911   1C6E             ; if (num == 0) { 
3912   1C6E             _if52_cond:
3913   1C6E FA 07 00      lea d, [bp + 7] ; $num
3914   1C71 2A            mov b, [d]
3915   1C72 38 00 00      mov c, 0
3916   1C75             ; --- START RELATIONAL
3917   1C75 D7            push a
3918   1C76 11            mov a, b
3919   1C77 FD 2E 00 00   mov32 cb, $00000000
3919   1C7B 00 00 
3920   1C7D B0            cmp a, b
3921   1C7E FD 71         seq ; ==
3922   1C80 E4            pop a
3923   1C81             ; --- END RELATIONAL
3924   1C81 C0 00 00      cmp b, 0
3925   1C84 C6 BD 1C      je _if52_exit
3926   1C87             _if52_TRUE:
3927   1C87             ; *dest++ = '0'; 
3928   1C87 FA 05 00      lea d, [bp + 5] ; $dest
3929   1C8A 2A            mov b, [d]
3930   1C8B 38 00 00      mov c, 0
3931   1C8E FD 77         inc b
3932   1C90 FA 05 00      lea d, [bp + 5] ; $dest
3933   1C93 FD 43         mov [d], b
3934   1C95 FD 7D         dec b
3935   1C97 D8            push b
3936   1C98 FD 2E 30 00   mov32 cb, $00000030
3936   1C9C 00 00 
3937   1C9E E7            pop d
3938   1C9F FD 3E         mov [d], bl
3939   1CA1             ; *dest = '\0'; 
3940   1CA1 FA 05 00      lea d, [bp + 5] ; $dest
3941   1CA4 2A            mov b, [d]
3942   1CA5 38 00 00      mov c, 0
3943   1CA8 D8            push b
3944   1CA9 FD 2E 00 00   mov32 cb, $00000000
3944   1CAD 00 00 
3945   1CAF E7            pop d
3946   1CB0 FD 3E         mov [d], bl
3947   1CB2             ; return 1; 
3948   1CB2 FD 2E 01 00   mov32 cb, $00000001
3948   1CB6 00 00 
3949   1CB8 F9            leave
3950   1CB9 09            ret
3951   1CBA 0A BD 1C      jmp _if52_exit
3952   1CBD             _if52_exit:
3953   1CBD             _if51_exit:
3954   1CBD             ; while (num > 0) { 
3955   1CBD             _while53_cond:
3956   1CBD FA 07 00      lea d, [bp + 7] ; $num
3957   1CC0 2A            mov b, [d]
3958   1CC1 38 00 00      mov c, 0
3959   1CC4             ; --- START RELATIONAL
3960   1CC4 D7            push a
3961   1CC5 11            mov a, b
3962   1CC6 FD 2E 00 00   mov32 cb, $00000000
3962   1CCA 00 00 
3963   1CCC B0            cmp a, b
3964   1CCD FD 7F         sgt ; >
3965   1CCF E4            pop a
3966   1CD0             ; --- END RELATIONAL
3967   1CD0 C0 00 00      cmp b, 0
3968   1CD3 C6 32 1D      je _while53_exit
3969   1CD6             _while53_block:
3970   1CD6             ; digits[i] = '0' + (num % 10); 
3971   1CD6 FA FC FF      lea d, [bp + -4] ; $digits
3972   1CD9 D7            push a
3973   1CDA DA            push d
3974   1CDB FA FA FF      lea d, [bp + -6] ; $i
3975   1CDE 2A            mov b, [d]
3976   1CDF 38 00 00      mov c, 0
3977   1CE2 E7            pop d
3978   1CE3 5A            add d, b
3979   1CE4 E4            pop a
3980   1CE5 DA            push d
3981   1CE6 FD 2E 30 00   mov32 cb, $00000030
3981   1CEA 00 00 
3982   1CEC             ; --- START TERMS
3983   1CEC D7            push a
3984   1CED 11            mov a, b
3985   1CEE FA 07 00      lea d, [bp + 7] ; $num
3986   1CF1 2A            mov b, [d]
3987   1CF2 38 00 00      mov c, 0
3988   1CF5             ; --- START FACTORS
3989   1CF5 D7            push a
3990   1CF6 11            mov a, b
3991   1CF7 FD 2E 0A 00   mov32 cb, $0000000a
3991   1CFB 00 00 
3992   1CFD AE            div a, b ; 
3993   1CFE 11            mov a, b
3994   1CFF 27            mov b, a
3995   1D00 E4            pop a
3996   1D01             ; --- END FACTORS
3997   1D01 56            add b, a
3998   1D02 E4            pop a
3999   1D03             ; --- END TERMS
4000   1D03 E7            pop d
4001   1D04 FD 3E         mov [d], bl
4002   1D06             ; num = num / 10; 
4003   1D06 FA 07 00      lea d, [bp + 7] ; $num
4004   1D09 DA            push d
4005   1D0A FA 07 00      lea d, [bp + 7] ; $num
4006   1D0D 2A            mov b, [d]
4007   1D0E 38 00 00      mov c, 0
4008   1D11             ; --- START FACTORS
4009   1D11 D7            push a
4010   1D12 11            mov a, b
4011   1D13 FD 2E 0A 00   mov32 cb, $0000000a
4011   1D17 00 00 
4012   1D19 AE            div a, b
4013   1D1A 27            mov b, a
4014   1D1B E4            pop a
4015   1D1C             ; --- END FACTORS
4016   1D1C E7            pop d
4017   1D1D FD 43         mov [d], b
4018   1D1F             ; i++; 
4019   1D1F FA FA FF      lea d, [bp + -6] ; $i
4020   1D22 2A            mov b, [d]
4021   1D23 38 00 00      mov c, 0
4022   1D26 11            mov a, b
4023   1D27 FD 77         inc b
4024   1D29 FA FA FF      lea d, [bp + -6] ; $i
4025   1D2C FD 43         mov [d], b
4026   1D2E 27            mov b, a
4027   1D2F 0A BD 1C      jmp _while53_cond
4028   1D32             _while53_exit:
4029   1D32             ; while (i > 0) { 
4030   1D32             _while54_cond:
4031   1D32 FA FA FF      lea d, [bp + -6] ; $i
4032   1D35 2A            mov b, [d]
4033   1D36 38 00 00      mov c, 0
4034   1D39             ; --- START RELATIONAL
4035   1D39 D7            push a
4036   1D3A 11            mov a, b
4037   1D3B FD 2E 00 00   mov32 cb, $00000000
4037   1D3F 00 00 
4038   1D41 B0            cmp a, b
4039   1D42 FD 7F         sgt ; >
4040   1D44 E4            pop a
4041   1D45             ; --- END RELATIONAL
4042   1D45 C0 00 00      cmp b, 0
4043   1D48 C6 97 1D      je _while54_exit
4044   1D4B             _while54_block:
4045   1D4B             ; i--; 
4046   1D4B FA FA FF      lea d, [bp + -6] ; $i
4047   1D4E 2A            mov b, [d]
4048   1D4F 38 00 00      mov c, 0
4049   1D52 11            mov a, b
4050   1D53 FD 7D         dec b
4051   1D55 FA FA FF      lea d, [bp + -6] ; $i
4052   1D58 FD 43         mov [d], b
4053   1D5A 27            mov b, a
4054   1D5B             ; *dest++ = digits[i]; 
4055   1D5B FA 05 00      lea d, [bp + 5] ; $dest
4056   1D5E 2A            mov b, [d]
4057   1D5F 38 00 00      mov c, 0
4058   1D62 FD 77         inc b
4059   1D64 FA 05 00      lea d, [bp + 5] ; $dest
4060   1D67 FD 43         mov [d], b
4061   1D69 FD 7D         dec b
4062   1D6B D8            push b
4063   1D6C FA FC FF      lea d, [bp + -4] ; $digits
4064   1D6F D7            push a
4065   1D70 DA            push d
4066   1D71 FA FA FF      lea d, [bp + -6] ; $i
4067   1D74 2A            mov b, [d]
4068   1D75 38 00 00      mov c, 0
4069   1D78 E7            pop d
4070   1D79 5A            add d, b
4071   1D7A E4            pop a
4072   1D7B 32            mov bl, [d]
4073   1D7C A7 00         mov bh, 0
4074   1D7E 38 00 00      mov c, 0
4075   1D81 E7            pop d
4076   1D82 FD 3E         mov [d], bl
4077   1D84             ; len++; 
4078   1D84 FA F8 FF      lea d, [bp + -8] ; $len
4079   1D87 2A            mov b, [d]
4080   1D88 38 00 00      mov c, 0
4081   1D8B 11            mov a, b
4082   1D8C FD 77         inc b
4083   1D8E FA F8 FF      lea d, [bp + -8] ; $len
4084   1D91 FD 43         mov [d], b
4085   1D93 27            mov b, a
4086   1D94 0A 32 1D      jmp _while54_cond
4087   1D97             _while54_exit:
4088   1D97             ; *dest = '\0'; 
4089   1D97 FA 05 00      lea d, [bp + 5] ; $dest
4090   1D9A 2A            mov b, [d]
4091   1D9B 38 00 00      mov c, 0
4092   1D9E D8            push b
4093   1D9F FD 2E 00 00   mov32 cb, $00000000
4093   1DA3 00 00 
4094   1DA5 E7            pop d
4095   1DA6 FD 3E         mov [d], bl
4096   1DA8             ; return len; 
4097   1DA8 FA F8 FF      lea d, [bp + -8] ; $len
4098   1DAB 2A            mov b, [d]
4099   1DAC 38 00 00      mov c, 0
4100   1DAF F9            leave
4101   1DB0 09            ret
4102   1DB1             
4103   1DB1             date:
4104   1DB1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4105   1DB4             
4106   1DB4             ; --- BEGIN INLINE ASM SEGMENT
4107   1DB4 19 00         mov al, 0 
4108   1DB6 05 07         syscall sys_datetime
4109   1DB8             ; --- END INLINE ASM SEGMENT
4110   1DB8             
4111   1DB8 F9            leave
4112   1DB9 09            ret
4113   1DBA             
4114   1DBA             putchar:
4115   1DBA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4116   1DBD             
4117   1DBD             ; --- BEGIN INLINE ASM SEGMENT
4118   1DBD FA 05 00      lea d, [bp + 5] ; $c
4119   1DC0 1E            mov al, [d]
4120   1DC1 23            mov ah, al
4121   1DC2 07 C9 1F      call _putchar
4122   1DC5             ; --- END INLINE ASM SEGMENT
4123   1DC5             
4124   1DC5 F9            leave
4125   1DC6 09            ret
4126   1DC7             
4127   1DC7             getchar:
4128   1DC7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4129   1DCA             ; char c; 
4130   1DCA 52 01 00      sub sp, 1
4131   1DCD             
4132   1DCD             ; --- BEGIN INLINE ASM SEGMENT
4133   1DCD 07 C2 1F      call getch
4134   1DD0 1A            mov al, ah
4135   1DD1 FA 00 00      lea d, [bp + 0] ; $c
4136   1DD4 3E            mov [d], al
4137   1DD5             ; --- END INLINE ASM SEGMENT
4138   1DD5             
4139   1DD5             ; return c; 
4140   1DD5 FA 00 00      lea d, [bp + 0] ; $c
4141   1DD8 32            mov bl, [d]
4142   1DD9 A7 00         mov bh, 0
4143   1DDB 38 00 00      mov c, 0
4144   1DDE F9            leave
4145   1DDF 09            ret
4146   1DE0             
4147   1DE0             scann:
4148   1DE0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4149   1DE3             ; int m; 
4150   1DE3 52 02 00      sub sp, 2
4151   1DE6             
4152   1DE6             ; --- BEGIN INLINE ASM SEGMENT
4153   1DE6 07 0D 22      call scan_u16d
4154   1DE9 FA FF FF      lea d, [bp + -1] ; $m
4155   1DEC 43            mov [d], a
4156   1DED             ; --- END INLINE ASM SEGMENT
4157   1DED             
4158   1DED             ; return m; 
4159   1DED FA FF FF      lea d, [bp + -1] ; $m
4160   1DF0 2A            mov b, [d]
4161   1DF1 38 00 00      mov c, 0
4162   1DF4 F9            leave
4163   1DF5 09            ret
4164   1DF6             
4165   1DF6             puts:
4166   1DF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4167   1DF9             
4168   1DF9             ; --- BEGIN INLINE ASM SEGMENT
4169   1DF9 FA 05 00      lea d, [bp + 5] ; $s
4170   1DFC 15            mov a, [d]
4171   1DFD 3C            mov d, a
4172   1DFE 07 13 21      call _puts
4173   1E01 10 00 0A      mov a, $0A00
4174   1E04 05 03         syscall sys_io
4175   1E06             ; --- END INLINE ASM SEGMENT
4176   1E06             
4177   1E06 F9            leave
4178   1E07 09            ret
4179   1E08             
4180   1E08             print:
4181   1E08 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4182   1E0B             
4183   1E0B             ; --- BEGIN INLINE ASM SEGMENT
4184   1E0B FA 05 00      lea d, [bp + 5] ; $s
4185   1E0E FD 2A         mov d, [d]
4186   1E10 07 13 21      call _puts
4187   1E13             ; --- END INLINE ASM SEGMENT
4188   1E13             
4189   1E13 F9            leave
4190   1E14 09            ret
4191   1E15             
4192   1E15             getparam:
4193   1E15 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4194   1E18             ; char data; 
4195   1E18 52 01 00      sub sp, 1
4196   1E1B             
4197   1E1B             ; --- BEGIN INLINE ASM SEGMENT
4198   1E1B 19 04         mov al, 4
4199   1E1D FA 05 00      lea d, [bp + 5] ; $address
4200   1E20 FD 2A         mov d, [d]
4201   1E22 05 0C         syscall sys_system
4202   1E24 FA 00 00      lea d, [bp + 0] ; $data
4203   1E27 FD 3E         mov [d], bl
4204   1E29             ; --- END INLINE ASM SEGMENT
4205   1E29             
4206   1E29             ; return data; 
4207   1E29 FA 00 00      lea d, [bp + 0] ; $data
4208   1E2C 32            mov bl, [d]
4209   1E2D A7 00         mov bh, 0
4210   1E2F 38 00 00      mov c, 0
4211   1E32 F9            leave
4212   1E33 09            ret
4213   1E34             
4214   1E34             clear:
4215   1E34 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4216   1E37             ; print("\033[2J\033[H"); 
4217   1E37             ; --- START FUNCTION CALL
4218   1E37 26 15 28      mov b, _s8 ; "\033[2J\033[H"
4219   1E3A FD AB         swp b
4220   1E3C D8            push b
4221   1E3D 07 08 1E      call print
4222   1E40 51 02 00      add sp, 2
4223   1E43             ; --- END FUNCTION CALL
4224   1E43 F9            leave
4225   1E44 09            ret
4226   1E45             
4227   1E45             abs:
4228   1E45 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4229   1E48             ; return i < 0 ? -i : i; 
4230   1E48             _ternary55_cond:
4231   1E48 FA 05 00      lea d, [bp + 5] ; $i
4232   1E4B 2A            mov b, [d]
4233   1E4C 38 00 00      mov c, 0
4234   1E4F             ; --- START RELATIONAL
4235   1E4F D7            push a
4236   1E50 11            mov a, b
4237   1E51 FD 2E 00 00   mov32 cb, $00000000
4237   1E55 00 00 
4238   1E57 B0            cmp a, b
4239   1E58 FD 73         slt ; < (signed)
4240   1E5A E4            pop a
4241   1E5B             ; --- END RELATIONAL
4242   1E5B C0 00 00      cmp b, 0
4243   1E5E C6 6D 1E      je _ternary55_FALSE
4244   1E61             _ternary55_TRUE:
4245   1E61 FA 05 00      lea d, [bp + 5] ; $i
4246   1E64 2A            mov b, [d]
4247   1E65 38 00 00      mov c, 0
4248   1E68 FD 97         neg b
4249   1E6A 0A 74 1E      jmp _ternary55_exit
4250   1E6D             _ternary55_FALSE:
4251   1E6D FA 05 00      lea d, [bp + 5] ; $i
4252   1E70 2A            mov b, [d]
4253   1E71 38 00 00      mov c, 0
4254   1E74             _ternary55_exit:
4255   1E74 F9            leave
4256   1E75 09            ret
4257   1E76             
4258   1E76             loadfile:
4259   1E76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4260   1E79             
4261   1E79             ; --- BEGIN INLINE ASM SEGMENT
4262   1E79 FA 07 00      lea d, [bp + 7] ; $destination
4263   1E7C 15            mov a, [d]
4264   1E7D 4F            mov di, a
4265   1E7E FA 05 00      lea d, [bp + 5] ; $filename
4266   1E81 FD 2A         mov d, [d]
4267   1E83 19 14         mov al, 20
4268   1E85 05 04         syscall sys_filesystem
4269   1E87             ; --- END INLINE ASM SEGMENT
4270   1E87             
4271   1E87 F9            leave
4272   1E88 09            ret
4273   1E89             
4274   1E89             create_file:
4275   1E89 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4276   1E8C F9            leave
4277   1E8D 09            ret
4278   1E8E             
4279   1E8E             delete_file:
4280   1E8E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4281   1E91             
4282   1E91             ; --- BEGIN INLINE ASM SEGMENT
4283   1E91 FA 05 00      lea d, [bp + 5] ; $filename
4284   1E94 19 0A         mov al, 10
4285   1E96 05 04         syscall sys_filesystem
4286   1E98             ; --- END INLINE ASM SEGMENT
4287   1E98             
4288   1E98 F9            leave
4289   1E99 09            ret
4290   1E9A             
4291   1E9A             load_hex:
4292   1E9A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4293   1E9D             ; char *temp; 
4294   1E9D 52 02 00      sub sp, 2
4295   1EA0             ; temp = alloc(32768); 
4296   1EA0 FA FF FF      lea d, [bp + -1] ; $temp
4297   1EA3 DA            push d
4298   1EA4             ; --- START FUNCTION CALL
4299   1EA4 FD 2E 00 80   mov32 cb, $00008000
4299   1EA8 00 00 
4300   1EAA FD AB         swp b
4301   1EAC D8            push b
4302   1EAD 07 73 09      call alloc
4303   1EB0 51 02 00      add sp, 2
4304   1EB3             ; --- END FUNCTION CALL
4305   1EB3 E7            pop d
4306   1EB4 FD 43         mov [d], b
4307   1EB6             
4308   1EB6             ; --- BEGIN INLINE ASM SEGMENT
4309   1EB6               
4310   1EB6               
4311   1EB6               
4312   1EB6             _load_hex:
4313   1EB6 FA 05 00      lea d, [bp + 5] ; $destination
4314   1EB9 FD 2A         mov d, [d]
4315   1EBB FD 50         mov di, d
4316   1EBD FA FF FF      lea d, [bp + -1] ; $temp
4317   1EC0 FD 2A         mov d, [d]
4318   1EC2 38 00 00      mov c, 0
4319   1EC5 48            mov a, sp
4320   1EC6 77            inc a
4321   1EC7 3C            mov d, a          
4322   1EC8 07 D0 1F      call _gets        
4323   1ECB 4D            mov si, a
4324   1ECC             __load_hex_loop:
4325   1ECC F6            lodsb             
4326   1ECD B9 00         cmp al, 0         
4327   1ECF C6 DD 1E      jz __load_hex_ret
4328   1ED2 36            mov bh, al
4329   1ED3 F6            lodsb
4330   1ED4 2F            mov bl, al
4331   1ED5 07 87 1F      call _atoi        
4332   1ED8 F7            stosb             
4333   1ED9 78            inc c
4334   1EDA 0A CC 1E      jmp __load_hex_loop
4335   1EDD             __load_hex_ret:
4336   1EDD             ; --- END INLINE ASM SEGMENT
4337   1EDD             
4338   1EDD F9            leave
4339   1EDE 09            ret
4340   1EDF             
4341   1EDF             include_stdio_asm:
4342   1EDF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4343   1EE2             
4344   1EE2             ; --- BEGIN INLINE ASM SEGMENT
4345   1EE2             .include "lib/asm/stdio.asm"
0001+  1EE2             ;-----------------------------------------------------------------------------
0002+  1EE2             ; stdio.s
0003+  1EE2             ;-----------------------------------------------------------------------------
0004+  1EE2             .include "lib/asm/string.asm"
0001++ 1EE2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1EE2             ; string.s
0003++ 1EE2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1EE2             
0005++ 1EE2             
0006++ 1EE2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1EE2             ; _strrev
0008++ 1EE2             ; reverse a string
0009++ 1EE2             ; D = string address
0010++ 1EE2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1EE2             ; 01234
0012++ 1EE2             _strrev:
0013++ 1EE2 4B          	pusha
0014++ 1EE3 07 29 1F    	call _strlen	; length in C
0015++ 1EE6 12          	mov a, c
0016++ 1EE7 AF 01 00    	cmp a, 1
0017++ 1EEA D0 04 1F    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1EED 7D          	dec a
0019++ 1EEE FD 4E       	mov si, d	; beginning of string
0020++ 1EF0 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1EF2 59          	add d, a	; end of string
0022++ 1EF3 12          	mov a, c
0023++ 1EF4 FD 9B       	shr a		; divide by 2
0024++ 1EF6 39          	mov c, a	; C now counts the steps
0025++ 1EF7             _strrev_L0:
0026++ 1EF7 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1EF8 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1EF9 3E          	mov [d], al	; store left char into right side
0029++ 1EFA 1B          	mov al, bl
0030++ 1EFB F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1EFC 7E          	dec c
0032++ 1EFD 7F          	dec d
0033++ 1EFE C2 00 00    	cmp c, 0
0034++ 1F01 C7 F7 1E    	jne _strrev_L0
0035++ 1F04             _strrev_end:
0036++ 1F04 4C          	popa
0037++ 1F05 09          	ret
0038++ 1F06             	
0039++ 1F06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1F06             ; _strchr
0041++ 1F06             ; search string in D for char in AL
0042++ 1F06             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1F06             _strchr:
0044++ 1F06             _strchr_L0:
0045++ 1F06 32          	mov bl, [d]
0046++ 1F07 C1 00       	cmp bl, 0
0047++ 1F09 C6 14 1F    	je _strchr_end
0048++ 1F0C BA          	cmp al, bl
0049++ 1F0D C6 14 1F    	je _strchr_end
0050++ 1F10 79          	inc d
0051++ 1F11 0A 06 1F    	jmp _strchr_L0
0052++ 1F14             _strchr_end:
0053++ 1F14 1B          	mov al, bl
0054++ 1F15 09          	ret
0055++ 1F16             
0056++ 1F16             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1F16             ; _strstr
0058++ 1F16             ; find sub-string
0059++ 1F16             ; str1 in SI
0060++ 1F16             ; str2 in DI
0061++ 1F16             ; SI points to end of source string
0062++ 1F16             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1F16             _strstr:
0064++ 1F16 DB          	push al
0065++ 1F17 DA          	push d
0066++ 1F18 E3          	push di
0067++ 1F19             _strstr_loop:
0068++ 1F19 F3          	cmpsb					; compare a byte of the strings
0069++ 1F1A C7 25 1F    	jne _strstr_ret
0070++ 1F1D FC 00 00    	lea d, [di + 0]
0071++ 1F20 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1F22 C7 19 1F    	jne _strstr_loop				; equal chars but not at end
0073++ 1F25             _strstr_ret:
0074++ 1F25 F0          	pop di
0075++ 1F26 E7          	pop d
0076++ 1F27 E8          	pop al
0077++ 1F28 09          	ret
0078++ 1F29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1F29             ; length of null terminated string
0080++ 1F29             ; result in C
0081++ 1F29             ; pointer in D
0082++ 1F29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1F29             _strlen:
0084++ 1F29 DA          	push d
0085++ 1F2A 38 00 00    	mov c, 0
0086++ 1F2D             _strlen_L1:
0087++ 1F2D BD 00       	cmp byte [d], 0
0088++ 1F2F C6 37 1F    	je _strlen_ret
0089++ 1F32 79          	inc d
0090++ 1F33 78          	inc c
0091++ 1F34 0A 2D 1F    	jmp _strlen_L1
0092++ 1F37             _strlen_ret:
0093++ 1F37 E7          	pop d
0094++ 1F38 09          	ret
0095++ 1F39             
0096++ 1F39             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1F39             ; STRCMP
0098++ 1F39             ; compare two strings
0099++ 1F39             ; str1 in SI
0100++ 1F39             ; str2 in DI
0101++ 1F39             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1F39             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1F39             _strcmp:
0104++ 1F39 DB          	push al
0105++ 1F3A DA          	push d
0106++ 1F3B E3          	push di
0107++ 1F3C E2          	push si
0108++ 1F3D             _strcmp_loop:
0109++ 1F3D F3          	cmpsb					; compare a byte of the strings
0110++ 1F3E C7 49 1F    	jne _strcmp_ret
0111++ 1F41 FB FF FF    	lea d, [si +- 1]
0112++ 1F44 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1F46 C7 3D 1F    	jne _strcmp_loop				; equal chars but not at end
0114++ 1F49             _strcmp_ret:
0115++ 1F49 EF          	pop si
0116++ 1F4A F0          	pop di
0117++ 1F4B E7          	pop d
0118++ 1F4C E8          	pop al
0119++ 1F4D 09          	ret
0120++ 1F4E             
0121++ 1F4E             
0122++ 1F4E             ; STRCPY
0123++ 1F4E             ; copy null terminated string from SI to DI
0124++ 1F4E             ; source in SI
0125++ 1F4E             ; destination in DI
0126++ 1F4E             _strcpy:
0127++ 1F4E E2          	push si
0128++ 1F4F E3          	push di
0129++ 1F50 DB          	push al
0130++ 1F51             _strcpy_L1:
0131++ 1F51 F6          	lodsb
0132++ 1F52 F7          	stosb
0133++ 1F53 B9 00       	cmp al, 0
0134++ 1F55 C7 51 1F    	jne _strcpy_L1
0135++ 1F58             _strcpy_end:
0136++ 1F58 E8          	pop al
0137++ 1F59 F0          	pop di
0138++ 1F5A EF          	pop si
0139++ 1F5B 09          	ret
0140++ 1F5C             
0141++ 1F5C             ; STRCAT
0142++ 1F5C             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1F5C             ; source in SI
0144++ 1F5C             ; destination in DI
0145++ 1F5C             _strcat:
0146++ 1F5C E2          	push si
0147++ 1F5D E3          	push di
0148++ 1F5E D7          	push a
0149++ 1F5F DA          	push d
0150++ 1F60 50          	mov a, di
0151++ 1F61 3C          	mov d, a
0152++ 1F62             _strcat_goto_end_L1:
0153++ 1F62 BD 00       	cmp byte[d], 0
0154++ 1F64 C6 6B 1F    	je _strcat_start
0155++ 1F67 79          	inc d
0156++ 1F68 0A 62 1F    	jmp _strcat_goto_end_L1
0157++ 1F6B             _strcat_start:
0158++ 1F6B FD 50       	mov di, d
0159++ 1F6D             _strcat_L1:
0160++ 1F6D F6          	lodsb
0161++ 1F6E F7          	stosb
0162++ 1F6F B9 00       	cmp al, 0
0163++ 1F71 C7 6D 1F    	jne _strcat_L1
0164++ 1F74             _strcat_end:
0165++ 1F74 E7          	pop d
0166++ 1F75 E4          	pop a
0167++ 1F76 F0          	pop di
0168++ 1F77 EF          	pop si
0169++ 1F78 09          	ret
0170++ 1F79             
0171++ 1F79             
0005+  1F79             
0006+  1F79             ;-----------------------------------------------------------------------------
0007+  1F79             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1F79             ; ASCII in BL
0009+  1F79             ; result in AL
0010+  1F79             ; ascii for F = 0100 0110
0011+  1F79             ; ascii for 9 = 0011 1001
0012+  1F79             ;-----------------------------------------------------------------------------
0013+  1F79             hex_ascii_encode:
0014+  1F79 1B            mov al, bl
0015+  1F7A 93 40         test al, $40        ; test if letter or number
0016+  1F7C C7 82 1F      jnz hex_letter
0017+  1F7F 87 0F         and al, $0F        ; get number
0018+  1F81 09            ret
0019+  1F82             hex_letter:
0020+  1F82 87 0F         and al, $0F        ; get letter
0021+  1F84 6A 09         add al, 9
0022+  1F86 09            ret
0023+  1F87             
0024+  1F87             ;-----------------------------------------------------------------------------
0025+  1F87             ; ATOI
0026+  1F87             ; 2 letter hex string in B
0027+  1F87             ; 8bit integer returned in AL
0028+  1F87             ;-----------------------------------------------------------------------------
0029+  1F87             _atoi:
0030+  1F87 D8            push b
0031+  1F88 07 79 1F      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1F8B 30            mov bl, bh
0033+  1F8C DB            push al          ; save a
0034+  1F8D 07 79 1F      call hex_ascii_encode
0035+  1F90 EA            pop bl  
0036+  1F91 FD 9E 04      shl al, 4
0037+  1F94 8C            or al, bl
0038+  1F95 E5            pop b
0039+  1F96 09            ret  
0040+  1F97             
0041+  1F97             
0042+  1F97             ;-----------------------------------------------------------------------------
0043+  1F97             ; ITOA
0044+  1F97             ; 8bit value in BL
0045+  1F97             ; 2 byte ASCII result in A
0046+  1F97             ;-----------------------------------------------------------------------------
0047+  1F97             _itoa:
0048+  1F97 DA            push d
0049+  1F98 D8            push b
0050+  1F99 A7 00         mov bh, 0
0051+  1F9B FD A4 04      shr bl, 4  
0052+  1F9E 74            mov d, b
0053+  1F9F 1F 47 22      mov al, [d + s_hex_digits]
0054+  1FA2 23            mov ah, al
0055+  1FA3               
0056+  1FA3 E5            pop b
0057+  1FA4 D8            push b
0058+  1FA5 A7 00         mov bh, 0
0059+  1FA7 FD 87 0F      and bl, $0F
0060+  1FAA 74            mov d, b
0061+  1FAB 1F 47 22      mov al, [d + s_hex_digits]
0062+  1FAE E5            pop b
0063+  1FAF E7            pop d
0064+  1FB0 09            ret
0065+  1FB1             
0066+  1FB1             ;-----------------------------------------------------------------------------
0067+  1FB1             ; HEX STRING TO BINARY
0068+  1FB1             ; di = destination address
0069+  1FB1             ; si = source
0070+  1FB1             ;-----------------------------------------------------------------------------
0071+  1FB1             _hex_to_int:
0072+  1FB1             _hex_to_int_L1:
0073+  1FB1 F6            lodsb          ; load from [SI] to AL
0074+  1FB2 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1FB4 C6 C1 1F      jz _hex_to_int_ret
0076+  1FB7 36            mov bh, al
0077+  1FB8 F6            lodsb
0078+  1FB9 2F            mov bl, al
0079+  1FBA 07 87 1F      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1FBD F7            stosb          ; store AL to [DI]
0081+  1FBE 0A B1 1F      jmp _hex_to_int_L1
0082+  1FC1             _hex_to_int_ret:
0083+  1FC1 09            ret    
0084+  1FC2             
0085+  1FC2             ;-----------------------------------------------------------------------------
0086+  1FC2             ; GETCHAR
0087+  1FC2             ; char in ah
0088+  1FC2             ;-----------------------------------------------------------------------------
0089+  1FC2             getch:
0090+  1FC2 DB            push al
0091+  1FC3             getch_retry:
0092+  1FC3 19 01         mov al, 1
0093+  1FC5 05 03         syscall sys_io      ; receive in AH
0094+  1FC7 E8            pop al
0095+  1FC8 09            ret
0096+  1FC9             
0097+  1FC9             ;-----------------------------------------------------------------------------
0098+  1FC9             ; PUTCHAR
0099+  1FC9             ; char in ah
0100+  1FC9             ;-----------------------------------------------------------------------------
0101+  1FC9             _putchar:
0102+  1FC9 D7            push a
0103+  1FCA 19 00         mov al, 0
0104+  1FCC 05 03         syscall sys_io      ; char in AH
0105+  1FCE E4            pop a
0106+  1FCF 09            ret
0107+  1FD0             
0108+  1FD0             ;-----------------------------------------------------------------------------
0109+  1FD0             ;; INPUT A STRING
0110+  1FD0             ;; terminates with null
0111+  1FD0             ;; pointer in D
0112+  1FD0             ;-----------------------------------------------------------------------------
0113+  1FD0             _gets:
0114+  1FD0 D7            push a
0115+  1FD1 DA            push d
0116+  1FD2             _gets_loop:
0117+  1FD2 19 01         mov al, 1
0118+  1FD4 05 03         syscall sys_io      ; receive in AH
0119+  1FD6 B9 00         cmp al, 0        ; check error code (AL)
0120+  1FD8 C6 D2 1F      je _gets_loop      ; if no char received, retry
0121+  1FDB             
0122+  1FDB 76 1B         cmp ah, 27
0123+  1FDD C6 FE 1F      je _gets_ansi_esc
0124+  1FE0 76 0A         cmp ah, $0A        ; LF
0125+  1FE2 C6 69 20      je _gets_end
0126+  1FE5 76 0D         cmp ah, $0D        ; CR
0127+  1FE7 C6 69 20      je _gets_end
0128+  1FEA 76 5C         cmp ah, $5C        ; '\\'
0129+  1FEC C6 2A 20      je _gets_escape
0130+  1FEF               
0131+  1FEF 76 08         cmp ah, $08      ; check for backspace
0132+  1FF1 C6 FA 1F      je _gets_backspace
0133+  1FF4             
0134+  1FF4 1A            mov al, ah
0135+  1FF5 3E            mov [d], al
0136+  1FF6 79            inc d
0137+  1FF7 0A D2 1F      jmp _gets_loop
0138+  1FFA             _gets_backspace:
0139+  1FFA 7F            dec d
0140+  1FFB 0A D2 1F      jmp _gets_loop
0141+  1FFE             _gets_ansi_esc:
0142+  1FFE 19 01         mov al, 1
0143+  2000 05 03         syscall sys_io        ; receive in AH without echo
0144+  2002 B9 00         cmp al, 0          ; check error code (AL)
0145+  2004 C6 FE 1F      je _gets_ansi_esc    ; if no char received, retry
0146+  2007 76 5B         cmp ah, '['
0147+  2009 C7 D2 1F      jne _gets_loop
0148+  200C             _gets_ansi_esc_2:
0149+  200C 19 01         mov al, 1
0150+  200E 05 03         syscall sys_io          ; receive in AH without echo
0151+  2010 B9 00         cmp al, 0            ; check error code (AL)
0152+  2012 C6 0C 20      je _gets_ansi_esc_2  ; if no char received, retry
0153+  2015 76 44         cmp ah, 'D'
0154+  2017 C6 22 20      je _gets_left_arrow
0155+  201A 76 43         cmp ah, 'C'
0156+  201C C6 26 20      je _gets_right_arrow
0157+  201F 0A D2 1F      jmp _gets_loop
0158+  2022             _gets_left_arrow:
0159+  2022 7F            dec d
0160+  2023 0A D2 1F      jmp _gets_loop
0161+  2026             _gets_right_arrow:
0162+  2026 79            inc d
0163+  2027 0A D2 1F      jmp _gets_loop
0164+  202A             _gets_escape:
0165+  202A 19 01         mov al, 1
0166+  202C 05 03         syscall sys_io      ; receive in AH
0167+  202E B9 00         cmp al, 0        ; check error code (AL)
0168+  2030 C6 2A 20      je _gets_escape      ; if no char received, retry
0169+  2033 76 6E         cmp ah, 'n'
0170+  2035 C6 54 20      je _gets_LF
0171+  2038 76 72         cmp ah, 'r'
0172+  203A C6 5B 20      je _gets_CR
0173+  203D 76 30         cmp ah, '0'
0174+  203F C6 62 20      je _gets_NULL
0175+  2042 76 5C         cmp ah, $5C  ; '\'
0176+  2044 C6 4D 20      je _gets_slash
0177+  2047 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  2048 3E            mov [d], al
0179+  2049 79            inc d
0180+  204A 0A D2 1F      jmp _gets_loop
0181+  204D             _gets_slash:
0182+  204D 19 5C         mov al, $5C
0183+  204F 3E            mov [d], al
0184+  2050 79            inc d
0185+  2051 0A D2 1F      jmp _gets_loop
0186+  2054             _gets_LF:
0187+  2054 19 0A         mov al, $0A
0188+  2056 3E            mov [d], al
0189+  2057 79            inc d
0190+  2058 0A D2 1F      jmp _gets_loop
0191+  205B             _gets_CR:
0192+  205B 19 0D         mov al, $0D
0193+  205D 3E            mov [d], al
0194+  205E 79            inc d
0195+  205F 0A D2 1F      jmp _gets_loop
0196+  2062             _gets_NULL:
0197+  2062 19 00         mov al, $00
0198+  2064 3E            mov [d], al
0199+  2065 79            inc d
0200+  2066 0A D2 1F      jmp _gets_loop
0201+  2069             _gets_end:
0202+  2069 19 00         mov al, 0
0203+  206B 3E            mov [d], al        ; terminate string
0204+  206C E7            pop d
0205+  206D E4            pop a
0206+  206E 09            ret
0207+  206F             
0208+  206F             ;-----------------------------------------------------------------------------
0209+  206F             ;; INPUT TEXT
0210+  206F             ;; terminated with CTRL+D
0211+  206F             ;; pointer in D
0212+  206F             ;-----------------------------------------------------------------------------
0213+  206F             _gettxt:
0214+  206F D7            push a
0215+  2070 DA            push d
0216+  2071             _gettxt_loop:
0217+  2071 19 01         mov al, 1
0218+  2073 05 03         syscall sys_io      ; receive in AH
0219+  2075 B9 00         cmp al, 0        ; check error code (AL)
0220+  2077 C6 71 20      je _gettxt_loop    ; if no char received, retry
0221+  207A 76 04         cmp ah, 4      ; EOT
0222+  207C C6 BA 20      je _gettxt_end
0223+  207F 76 08         cmp ah, $08      ; check for backspace
0224+  2081 C6 B6 20      je _gettxt_backspace
0225+  2084 76 5C         cmp ah, $5C        ; '\'
0226+  2086 C6 8F 20      je _gettxt_escape
0227+  2089 1A            mov al, ah
0228+  208A 3E            mov [d], al
0229+  208B 79            inc d
0230+  208C 0A 71 20      jmp _gettxt_loop
0231+  208F             _gettxt_escape:
0232+  208F 19 01         mov al, 1
0233+  2091 05 03         syscall sys_io      ; receive in AH
0234+  2093 B9 00         cmp al, 0        ; check error code (AL)
0235+  2095 C6 8F 20      je _gettxt_escape    ; if no char received, retry
0236+  2098 76 6E         cmp ah, 'n'
0237+  209A C6 A8 20      je _gettxt_LF
0238+  209D 76 72         cmp ah, 'r'
0239+  209F C6 AF 20      je _gettxt_CR
0240+  20A2 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  20A3 3E            mov [d], al
0242+  20A4 79            inc d
0243+  20A5 0A 71 20      jmp _gettxt_loop
0244+  20A8             _gettxt_LF:
0245+  20A8 19 0A         mov al, $0A
0246+  20AA 3E            mov [d], al
0247+  20AB 79            inc d
0248+  20AC 0A 71 20      jmp _gettxt_loop
0249+  20AF             _gettxt_CR:
0250+  20AF 19 0D         mov al, $0D
0251+  20B1 3E            mov [d], al
0252+  20B2 79            inc d
0253+  20B3 0A 71 20      jmp _gettxt_loop
0254+  20B6             _gettxt_backspace:
0255+  20B6 7F            dec d
0256+  20B7 0A 71 20      jmp _gettxt_loop
0257+  20BA             _gettxt_end:
0258+  20BA 19 00         mov al, 0
0259+  20BC 3E            mov [d], al        ; terminate string
0260+  20BD E7            pop d
0261+  20BE E4            pop a
0262+  20BF 09            ret
0263+  20C0             
0264+  20C0             ;-----------------------------------------------------------------------------
0265+  20C0             ; PRINT NEW LINE
0266+  20C0             ;-----------------------------------------------------------------------------
0267+  20C0             printnl:
0268+  20C0 D7            push a
0269+  20C1 10 00 0A      mov a, $0A00
0270+  20C4 05 03         syscall sys_io
0271+  20C6 10 00 0D      mov a, $0D00
0272+  20C9 05 03         syscall sys_io
0273+  20CB E4            pop a
0274+  20CC 09            ret
0275+  20CD             
0276+  20CD             ;-----------------------------------------------------------------------------
0277+  20CD             ; _strtoint
0278+  20CD             ; 4 digit hex string number in d
0279+  20CD             ; integer returned in A
0280+  20CD             ;-----------------------------------------------------------------------------
0281+  20CD             _strtointx:
0282+  20CD D8            push b
0283+  20CE 32            mov bl, [d]
0284+  20CF 37            mov bh, bl
0285+  20D0 33 01 00      mov bl, [d + 1]
0286+  20D3 07 87 1F      call _atoi        ; convert to int in AL
0287+  20D6 23            mov ah, al        ; move to AH
0288+  20D7 33 02 00      mov bl, [d + 2]
0289+  20DA 37            mov bh, bl
0290+  20DB 33 03 00      mov bl, [d + 3]
0291+  20DE 07 87 1F      call _atoi        ; convert to int in AL
0292+  20E1 E5            pop b
0293+  20E2 09            ret
0294+  20E3             
0295+  20E3             ;-----------------------------------------------------------------------------
0296+  20E3             ; _strtoint
0297+  20E3             ; 5 digit base10 string number in d
0298+  20E3             ; integer returned in A
0299+  20E3             ;-----------------------------------------------------------------------------
0300+  20E3             _strtoint:
0301+  20E3 E2            push si
0302+  20E4 D8            push b
0303+  20E5 D9            push c
0304+  20E6 DA            push d
0305+  20E7 07 29 1F      call _strlen      ; get string length in C
0306+  20EA 7E            dec c
0307+  20EB FD 4E         mov si, d
0308+  20ED 12            mov a, c
0309+  20EE FD 99         shl a
0310+  20F0 3B 5F 22      mov d, table_power
0311+  20F3 59            add d, a
0312+  20F4 38 00 00      mov c, 0
0313+  20F7             _strtoint_L0:
0314+  20F7 F6            lodsb      ; load ASCII to al
0315+  20F8 B9 00         cmp al, 0
0316+  20FA C6 0D 21      je _strtoint_end
0317+  20FD 6F 30         sub al, $30    ; make into integer
0318+  20FF 22 00         mov ah, 0
0319+  2101 2A            mov b, [d]
0320+  2102 AC            mul a, b      ; result in B since it fits in 16bits
0321+  2103 11            mov a, b
0322+  2104 28            mov b, c
0323+  2105 54            add a, b
0324+  2106 39            mov c, a
0325+  2107 63 02 00      sub d, 2
0326+  210A 0A F7 20      jmp _strtoint_L0
0327+  210D             _strtoint_end:
0328+  210D 12            mov a, c
0329+  210E E7            pop d
0330+  210F E6            pop c
0331+  2110 E5            pop b
0332+  2111 EF            pop si
0333+  2112 09            ret
0334+  2113             
0335+  2113             ;-----------------------------------------------------------------------------
0336+  2113             ; PRINT NULL TERMINATED STRING
0337+  2113             ; pointer in D
0338+  2113             ;-----------------------------------------------------------------------------
0339+  2113             _puts:
0340+  2113 D7            push a
0341+  2114 DA            push d
0342+  2115             _puts_L1:
0343+  2115 1E            mov al, [d]
0344+  2116 B9 00         cmp al, 0
0345+  2118 C6 24 21      jz _puts_END
0346+  211B 23            mov ah, al
0347+  211C 19 00         mov al, 0
0348+  211E 05 03         syscall sys_io
0349+  2120 79            inc d
0350+  2121 0A 15 21      jmp _puts_L1
0351+  2124             _puts_END:
0352+  2124 E7            pop d
0353+  2125 E4            pop a
0354+  2126 09            ret
0355+  2127             
0356+  2127             ;-----------------------------------------------------------------------------
0357+  2127             ; PRINT N SIZE STRING
0358+  2127             ; pointer in D
0359+  2127             ; size in C
0360+  2127             ;-----------------------------------------------------------------------------
0361+  2127             _putsn:
0362+  2127 DB            push al
0363+  2128 DA            push d
0364+  2129 D9            push c
0365+  212A             _putsn_L0:
0366+  212A 1E            mov al, [d]
0367+  212B 23            mov ah, al
0368+  212C 19 00         mov al, 0
0369+  212E 05 03         syscall sys_io
0370+  2130 79            inc d
0371+  2131 7E            dec c  
0372+  2132 C2 00 00      cmp c, 0
0373+  2135 C7 2A 21      jne _putsn_L0
0374+  2138             _putsn_end:
0375+  2138 E6            pop c
0376+  2139 E7            pop d
0377+  213A E8            pop al
0378+  213B 09            ret
0379+  213C             
0380+  213C             ;-----------------------------------------------------------------------------
0381+  213C             ; print 16bit decimal number
0382+  213C             ; input number in A
0383+  213C             ;-----------------------------------------------------------------------------
0384+  213C             print_u16d:
0385+  213C D7            push a
0386+  213D D8            push b
0387+  213E 26 10 27      mov b, 10000
0388+  2141 AE            div a, b      ; get 10000's coeff.
0389+  2142 07 64 21      call print_number
0390+  2145 11            mov a, b
0391+  2146 26 E8 03      mov b, 1000
0392+  2149 AE            div a, b      ; get 1000's coeff.
0393+  214A 07 64 21      call print_number
0394+  214D 11            mov a, b
0395+  214E 26 64 00      mov b, 100
0396+  2151 AE            div a, b
0397+  2152 07 64 21      call print_number
0398+  2155 11            mov a, b
0399+  2156 26 0A 00      mov b, 10
0400+  2159 AE            div a, b
0401+  215A 07 64 21      call print_number
0402+  215D 1B            mov al, bl      ; 1's coeff in bl
0403+  215E 07 64 21      call print_number
0404+  2161 E5            pop b
0405+  2162 E4            pop a
0406+  2163 09            ret
0407+  2164             
0408+  2164             ;-----------------------------------------------------------------------------
0409+  2164             ; print AL
0410+  2164             ;-----------------------------------------------------------------------------
0411+  2164             print_number:
0412+  2164 6A 30         add al, $30
0413+  2166 23            mov ah, al
0414+  2167 07 C9 1F      call _putchar
0415+  216A 09            ret
0416+  216B             
0417+  216B             ;-----------------------------------------------------------------------------
0418+  216B             ; PRINT 16BIT HEX INTEGER
0419+  216B             ; integer value in reg B
0420+  216B             ;-----------------------------------------------------------------------------
0421+  216B             print_u16x:
0422+  216B D7            push a
0423+  216C D8            push b
0424+  216D DD            push bl
0425+  216E 30            mov bl, bh
0426+  216F 07 97 1F      call _itoa        ; convert bh to char in A
0427+  2172 2F            mov bl, al        ; save al
0428+  2173 19 00         mov al, 0
0429+  2175 05 03         syscall sys_io        ; display AH
0430+  2177 24            mov ah, bl        ; retrieve al
0431+  2178 19 00         mov al, 0
0432+  217A 05 03         syscall sys_io        ; display AL
0433+  217C             
0434+  217C EA            pop bl
0435+  217D 07 97 1F      call _itoa        ; convert bh to char in A
0436+  2180 2F            mov bl, al        ; save al
0437+  2181 19 00         mov al, 0
0438+  2183 05 03         syscall sys_io        ; display AH
0439+  2185 24            mov ah, bl        ; retrieve al
0440+  2186 19 00         mov al, 0
0441+  2188 05 03         syscall sys_io        ; display AL
0442+  218A             
0443+  218A E5            pop b
0444+  218B E4            pop a
0445+  218C 09            ret
0446+  218D             
0447+  218D             ;-----------------------------------------------------------------------------
0448+  218D             ; INPUT 16BIT HEX INTEGER
0449+  218D             ; read 16bit integer into A
0450+  218D             ;-----------------------------------------------------------------------------
0451+  218D             scan_u16x:
0452+  218D F8 10 00      enter 16
0453+  2190 D8            push b
0454+  2191 DA            push d
0455+  2192             
0456+  2192 FA F1 FF      lea d, [bp + -15]
0457+  2195 07 D0 1F      call _gets        ; get number
0458+  2198             
0459+  2198 32            mov bl, [d]
0460+  2199 37            mov bh, bl
0461+  219A 33 01 00      mov bl, [d + 1]
0462+  219D 07 87 1F      call _atoi        ; convert to int in AL
0463+  21A0 23            mov ah, al        ; move to AH
0464+  21A1             
0465+  21A1 33 02 00      mov bl, [d + 2]
0466+  21A4 37            mov bh, bl
0467+  21A5 33 03 00      mov bl, [d + 3]
0468+  21A8 07 87 1F      call _atoi        ; convert to int in AL
0469+  21AB             
0470+  21AB E7            pop d
0471+  21AC E5            pop b
0472+  21AD F9            leave
0473+  21AE 09            ret
0474+  21AF             
0475+  21AF             ;-----------------------------------------------------------------------------
0476+  21AF             ; PRINT 8bit HEX INTEGER
0477+  21AF             ; integer value in reg bl
0478+  21AF             ;-----------------------------------------------------------------------------
0479+  21AF             print_u8x:
0480+  21AF D7            push a
0481+  21B0 DD            push bl
0482+  21B1             
0483+  21B1 07 97 1F      call _itoa        ; convert bl to char in A
0484+  21B4 2F            mov bl, al        ; save al
0485+  21B5 19 00         mov al, 0
0486+  21B7 05 03         syscall sys_io        ; display AH
0487+  21B9 24            mov ah, bl        ; retrieve al
0488+  21BA 19 00         mov al, 0
0489+  21BC 05 03         syscall sys_io        ; display AL
0490+  21BE             
0491+  21BE EA            pop bl
0492+  21BF E4            pop a
0493+  21C0 09            ret
0494+  21C1             
0495+  21C1             ;-----------------------------------------------------------------------------
0496+  21C1             ; print 8bit decimal unsigned number
0497+  21C1             ; input number in AL
0498+  21C1             ;-----------------------------------------------------------------------------
0499+  21C1             print_u8d:
0500+  21C1 D7            push a
0501+  21C2 D8            push b
0502+  21C3             
0503+  21C3 22 00         mov ah, 0
0504+  21C5 26 64 00      mov b, 100
0505+  21C8 AE            div a, b
0506+  21C9 D8            push b      ; save remainder
0507+  21CA B9 00         cmp al, 0
0508+  21CC C6 D6 21      je skip100
0509+  21CF 6A 30         add al, $30
0510+  21D1 23            mov ah, al
0511+  21D2 19 00         mov al, 0
0512+  21D4 05 03         syscall sys_io  ; print coeff
0513+  21D6             skip100:
0514+  21D6 E4            pop a
0515+  21D7 22 00         mov ah, 0
0516+  21D9 26 0A 00      mov b, 10
0517+  21DC AE            div a, b
0518+  21DD D8            push b      ; save remainder
0519+  21DE B9 00         cmp al, 0
0520+  21E0 C6 EA 21      je skip10
0521+  21E3 6A 30         add al, $30
0522+  21E5 23            mov ah, al
0523+  21E6 19 00         mov al, 0
0524+  21E8 05 03         syscall sys_io  ; print coeff
0525+  21EA             skip10:
0526+  21EA E4            pop a
0527+  21EB 1B            mov al, bl
0528+  21EC 6A 30         add al, $30
0529+  21EE 23            mov ah, al
0530+  21EF 19 00         mov al, 0
0531+  21F1 05 03         syscall sys_io  ; print coeff
0532+  21F3 E5            pop b
0533+  21F4 E4            pop a
0534+  21F5 09            ret
0535+  21F6             
0536+  21F6             ;-----------------------------------------------------------------------------
0537+  21F6             ; INPUT 8BIT HEX INTEGER
0538+  21F6             ; read 8bit integer into AL
0539+  21F6             ;-----------------------------------------------------------------------------
0540+  21F6             scan_u8x:
0541+  21F6 F8 04 00      enter 4
0542+  21F9 D8            push b
0543+  21FA DA            push d
0544+  21FB             
0545+  21FB FA FD FF      lea d, [bp + -3]
0546+  21FE 07 D0 1F      call _gets        ; get number
0547+  2201             
0548+  2201 32            mov bl, [d]
0549+  2202 37            mov bh, bl
0550+  2203 33 01 00      mov bl, [d + 1]
0551+  2206 07 87 1F      call _atoi        ; convert to int in AL
0552+  2209             
0553+  2209 E7            pop d
0554+  220A E5            pop b
0555+  220B F9            leave
0556+  220C 09            ret
0557+  220D             
0558+  220D             ;-----------------------------------------------------------------------------
0559+  220D             ; input decimal number
0560+  220D             ; result in A
0561+  220D             ; 655'\0'
0562+  220D             ; low--------high
0563+  220D             ;-----------------------------------------------------------------------------
0564+  220D             scan_u16d:
0565+  220D F8 08 00      enter 8
0566+  2210 E2            push si
0567+  2211 D8            push b
0568+  2212 D9            push c
0569+  2213 DA            push d
0570+  2214 FA F9 FF      lea d, [bp +- 7]
0571+  2217 07 D0 1F      call _gets
0572+  221A 07 29 1F      call _strlen      ; get string length in C
0573+  221D 7E            dec c
0574+  221E FD 4E         mov si, d
0575+  2220 12            mov a, c
0576+  2221 FD 99         shl a
0577+  2223 3B 5F 22      mov d, table_power
0578+  2226 59            add d, a
0579+  2227 38 00 00      mov c, 0
0580+  222A             mul_loop:
0581+  222A F6            lodsb      ; load ASCII to al
0582+  222B B9 00         cmp al, 0
0583+  222D C6 40 22      je mul_exit
0584+  2230 6F 30         sub al, $30    ; make into integer
0585+  2232 22 00         mov ah, 0
0586+  2234 2A            mov b, [d]
0587+  2235 AC            mul a, b      ; result in B since it fits in 16bits
0588+  2236 11            mov a, b
0589+  2237 28            mov b, c
0590+  2238 54            add a, b
0591+  2239 39            mov c, a
0592+  223A 63 02 00      sub d, 2
0593+  223D 0A 2A 22      jmp mul_loop
0594+  2240             mul_exit:
0595+  2240 12            mov a, c
0596+  2241 E7            pop d
0597+  2242 E6            pop c
0598+  2243 E5            pop b
0599+  2244 EF            pop si
0600+  2245 F9            leave
0601+  2246 09            ret
0602+  2247             
0603+  2247 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  224B 34 35 36 37 
0603+  224F 38 39 41 42 
0603+  2253 43 44 45 46 
0604+  2257 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  225B 1B 5B 48 00 
0605+  225F             
0606+  225F             table_power:
0607+  225F 01 00         .dw 1
0608+  2261 0A 00         .dw 10
0609+  2263 64 00         .dw 100
0610+  2265 E8 03         .dw 1000
0611+  2267 10 27         .dw 100004346   2269             ; --- END INLINE ASM SEGMENT
4347   2269             
4348   2269 F9            leave
4349   226A 09            ret
4350   226B             ; --- END TEXT SEGMENT
4351   226B             
4352   226B             ; --- BEGIN DATA SEGMENT
4353   226B 00 00 00 00 _variables_data: .fill 1310, 0
4353   226F 00 00 00 00 
4353   2273 00 00 00 00 
4353   2277 00 00 00 00 
4353   227B 00 00 00 00 
4353   227F 00 00 00 00 
4353   2283 00 00 00 00 
4353   2287 00 00 00 00 
4353   228B 00 00 00 00 
4353   228F 00 00 00 00 
4353   2293 00 00 00 00 
4353   2297 00 00 00 00 
4353   229B 00 00 00 00 
4353   229F 00 00 00 00 
4353   22A3 00 00 00 00 
4353   22A7 00 00 00 00 
4353   22AB 00 00 00 00 
4353   22AF 00 00 00 00 
4353   22B3 00 00 00 00 
4353   22B7 00 00 00 00 
4353   22BB 00 00 00 00 
4353   22BF 00 00 00 00 
4353   22C3 00 00 00 00 
4353   22C7 00 00 00 00 
4353   22CB 00 00 00 00 
4353   22CF 00 00 00 00 
4353   22D3 00 00 00 00 
4353   22D7 00 00 00 00 
4353   22DB 00 00 00 00 
4353   22DF 00 00 00 00 
4353   22E3 00 00 00 00 
4353   22E7 00 00 00 00 
4353   22EB 00 00 00 00 
4353   22EF 00 00 00 00 
4353   22F3 00 00 00 00 
4353   22F7 00 00 00 00 
4353   22FB 00 00 00 00 
4353   22FF 00 00 00 00 
4353   2303 00 00 00 00 
4353   2307 00 00 00 00 
4353   230B 00 00 00 00 
4353   230F 00 00 00 00 
4353   2313 00 00 00 00 
4353   2317 00 00 00 00 
4353   231B 00 00 00 00 
4353   231F 00 00 00 00 
4353   2323 00 00 00 00 
4353   2327 00 00 00 00 
4353   232B 00 00 00 00 
4353   232F 00 00 00 00 
4353   2333 00 00 00 00 
4353   2337 00 00 00 00 
4353   233B 00 00 00 00 
4353   233F 00 00 00 00 
4353   2343 00 00 00 00 
4353   2347 00 00 00 00 
4353   234B 00 00 00 00 
4353   234F 00 00 00 00 
4353   2353 00 00 00 00 
4353   2357 00 00 00 00 
4353   235B 00 00 00 00 
4353   235F 00 00 00 00 
4353   2363 00 00 00 00 
4353   2367 00 00 00 00 
4353   236B 00 00 00 00 
4353   236F 00 00 00 00 
4353   2373 00 00 00 00 
4353   2377 00 00 00 00 
4353   237B 00 00 00 00 
4353   237F 00 00 00 00 
4353   2383 00 00 00 00 
4353   2387 00 00 00 00 
4353   238B 00 00 00 00 
4353   238F 00 00 00 00 
4353   2393 00 00 00 00 
4353   2397 00 00 00 00 
4353   239B 00 00 00 00 
4353   239F 00 00 00 00 
4353   23A3 00 00 00 00 
4353   23A7 00 00 00 00 
4353   23AB 00 00 00 00 
4353   23AF 00 00 00 00 
4353   23B3 00 00 00 00 
4353   23B7 00 00 00 00 
4353   23BB 00 00 00 00 
4353   23BF 00 00 00 00 
4353   23C3 00 00 00 00 
4353   23C7 00 00 00 00 
4353   23CB 00 00 00 00 
4353   23CF 00 00 00 00 
4353   23D3 00 00 00 00 
4353   23D7 00 00 00 00 
4353   23DB 00 00 00 00 
4353   23DF 00 00 00 00 
4353   23E3 00 00 00 00 
4353   23E7 00 00 00 00 
4353   23EB 00 00 00 00 
4353   23EF 00 00 00 00 
4353   23F3 00 00 00 00 
4353   23F7 00 00 00 00 
4353   23FB 00 00 00 00 
4353   23FF 00 00 00 00 
4353   2403 00 00 00 00 
4353   2407 00 00 00 00 
4353   240B 00 00 00 00 
4353   240F 00 00 00 00 
4353   2413 00 00 00 00 
4353   2417 00 00 00 00 
4353   241B 00 00 00 00 
4353   241F 00 00 00 00 
4353   2423 00 00 00 00 
4353   2427 00 00 00 00 
4353   242B 00 00 00 00 
4353   242F 00 00 00 00 
4353   2433 00 00 00 00 
4353   2437 00 00 00 00 
4353   243B 00 00 00 00 
4353   243F 00 00 00 00 
4353   2443 00 00 00 00 
4353   2447 00 00 00 00 
4353   244B 00 00 00 00 
4353   244F 00 00 00 00 
4353   2453 00 00 00 00 
4353   2457 00 00 00 00 
4353   245B 00 00 00 00 
4353   245F 00 00 00 00 
4353   2463 00 00 00 00 
4353   2467 00 00 00 00 
4353   246B 00 00 00 00 
4353   246F 00 00 00 00 
4353   2473 00 00 00 00 
4353   2477 00 00 00 00 
4353   247B 00 00 00 00 
4353   247F 00 00 00 00 
4353   2483 00 00 00 00 
4353   2487 00 00 00 00 
4353   248B 00 00 00 00 
4353   248F 00 00 00 00 
4353   2493 00 00 00 00 
4353   2497 00 00 00 00 
4353   249B 00 00 00 00 
4353   249F 00 00 00 00 
4353   24A3 00 00 00 00 
4353   24A7 00 00 00 00 
4353   24AB 00 00 00 00 
4353   24AF 00 00 00 00 
4353   24B3 00 00 00 00 
4353   24B7 00 00 00 00 
4353   24BB 00 00 00 00 
4353   24BF 00 00 00 00 
4353   24C3 00 00 00 00 
4353   24C7 00 00 00 00 
4353   24CB 00 00 00 00 
4353   24CF 00 00 00 00 
4353   24D3 00 00 00 00 
4353   24D7 00 00 00 00 
4353   24DB 00 00 00 00 
4353   24DF 00 00 00 00 
4353   24E3 00 00 00 00 
4353   24E7 00 00 00 00 
4353   24EB 00 00 00 00 
4353   24EF 00 00 00 00 
4353   24F3 00 00 00 00 
4353   24F7 00 00 00 00 
4353   24FB 00 00 00 00 
4353   24FF 00 00 00 00 
4353   2503 00 00 00 00 
4353   2507 00 00 00 00 
4353   250B 00 00 00 00 
4353   250F 00 00 00 00 
4353   2513 00 00 00 00 
4353   2517 00 00 00 00 
4353   251B 00 00 00 00 
4353   251F 00 00 00 00 
4353   2523 00 00 00 00 
4353   2527 00 00 00 00 
4353   252B 00 00 00 00 
4353   252F 00 00 00 00 
4353   2533 00 00 00 00 
4353   2537 00 00 00 00 
4353   253B 00 00 00 00 
4353   253F 00 00 00 00 
4353   2543 00 00 00 00 
4353   2547 00 00 00 00 
4353   254B 00 00 00 00 
4353   254F 00 00 00 00 
4353   2553 00 00 00 00 
4353   2557 00 00 00 00 
4353   255B 00 00 00 00 
4353   255F 00 00 00 00 
4353   2563 00 00 00 00 
4353   2567 00 00 00 00 
4353   256B 00 00 00 00 
4353   256F 00 00 00 00 
4353   2573 00 00 00 00 
4353   2577 00 00 00 00 
4353   257B 00 00 00 00 
4353   257F 00 00 00 00 
4353   2583 00 00 00 00 
4353   2587 00 00 00 00 
4353   258B 00 00 00 00 
4353   258F 00 00 00 00 
4353   2593 00 00 00 00 
4353   2597 00 00 00 00 
4353   259B 00 00 00 00 
4353   259F 00 00 00 00 
4353   25A3 00 00 00 00 
4353   25A7 00 00 00 00 
4353   25AB 00 00 00 00 
4353   25AF 00 00 00 00 
4353   25B3 00 00 00 00 
4353   25B7 00 00 00 00 
4353   25BB 00 00 00 00 
4353   25BF 00 00 00 00 
4353   25C3 00 00 00 00 
4353   25C7 00 00 00 00 
4353   25CB 00 00 00 00 
4353   25CF 00 00 00 00 
4353   25D3 00 00 00 00 
4353   25D7 00 00 00 00 
4353   25DB 00 00 00 00 
4353   25DF 00 00 00 00 
4353   25E3 00 00 00 00 
4353   25E7 00 00 00 00 
4353   25EB 00 00 00 00 
4353   25EF 00 00 00 00 
4353   25F3 00 00 00 00 
4353   25F7 00 00 00 00 
4353   25FB 00 00 00 00 
4353   25FF 00 00 00 00 
4353   2603 00 00 00 00 
4353   2607 00 00 00 00 
4353   260B 00 00 00 00 
4353   260F 00 00 00 00 
4353   2613 00 00 00 00 
4353   2617 00 00 00 00 
4353   261B 00 00 00 00 
4353   261F 00 00 00 00 
4353   2623 00 00 00 00 
4353   2627 00 00 00 00 
4353   262B 00 00 00 00 
4353   262F 00 00 00 00 
4353   2633 00 00 00 00 
4353   2637 00 00 00 00 
4353   263B 00 00 00 00 
4353   263F 00 00 00 00 
4353   2643 00 00 00 00 
4353   2647 00 00 00 00 
4353   264B 00 00 00 00 
4353   264F 00 00 00 00 
4353   2653 00 00 00 00 
4353   2657 00 00 00 00 
4353   265B 00 00 00 00 
4353   265F 00 00 00 00 
4353   2663 00 00 00 00 
4353   2667 00 00 00 00 
4353   266B 00 00 00 00 
4353   266F 00 00 00 00 
4353   2673 00 00 00 00 
4353   2677 00 00 00 00 
4353   267B 00 00 00 00 
4353   267F 00 00 00 00 
4353   2683 00 00 00 00 
4353   2687 00 00 00 00 
4353   268B 00 00 00 00 
4353   268F 00 00 00 00 
4353   2693 00 00 00 00 
4353   2697 00 00 00 00 
4353   269B 00 00 00 00 
4353   269F 00 00 00 00 
4353   26A3 00 00 00 00 
4353   26A7 00 00 00 00 
4353   26AB 00 00 00 00 
4353   26AF 00 00 00 00 
4353   26B3 00 00 00 00 
4353   26B7 00 00 00 00 
4353   26BB 00 00 00 00 
4353   26BF 00 00 00 00 
4353   26C3 00 00 00 00 
4353   26C7 00 00 00 00 
4353   26CB 00 00 00 00 
4353   26CF 00 00 00 00 
4353   26D3 00 00 00 00 
4353   26D7 00 00 00 00 
4353   26DB 00 00 00 00 
4353   26DF 00 00 00 00 
4353   26E3 00 00 00 00 
4353   26E7 00 00 00 00 
4353   26EB 00 00 00 00 
4353   26EF 00 00 00 00 
4353   26F3 00 00 00 00 
4353   26F7 00 00 00 00 
4353   26FB 00 00 00 00 
4353   26FF 00 00 00 00 
4353   2703 00 00 00 00 
4353   2707 00 00 00 00 
4353   270B 00 00 00 00 
4353   270F 00 00 00 00 
4353   2713 00 00 00 00 
4353   2717 00 00 00 00 
4353   271B 00 00 00 00 
4353   271F 00 00 00 00 
4353   2723 00 00 00 00 
4353   2727 00 00 00 00 
4353   272B 00 00 00 00 
4353   272F 00 00 00 00 
4353   2733 00 00 00 00 
4353   2737 00 00 00 00 
4353   273B 00 00 00 00 
4353   273F 00 00 00 00 
4353   2743 00 00 00 00 
4353   2747 00 00 00 00 
4353   274B 00 00 00 00 
4353   274F 00 00 00 00 
4353   2753 00 00 00 00 
4353   2757 00 00 00 00 
4353   275B 00 00 00 00 
4353   275F 00 00 00 00 
4353   2763 00 00 00 00 
4353   2767 00 00 00 00 
4353   276B 00 00 00 00 
4353   276F 00 00 00 00 
4353   2773 00 00 00 00 
4353   2777 00 00 00 00 
4353   277B 00 00 00 00 
4353   277F 00 00 00 00 
4353   2783 00 00 00 00 
4353   2787 00 00 
4354   2789 00 00       st_fopen_max_handle: .dw 0
4355   278B 53 6F 6C 2D _s0: .db "Sol-1.", 0
4355   278F 31 2E 00 
4356   2792 53 74 72 69 _s1: .db "String Value.", 0
4356   2796 6E 67 20 56 
4356   279A 61 6C 75 65 
4356   279E 2E 00 
4357   27A0 0A 76 61 72 _s2: .db "\nvarname: %s", 0
4357   27A4 6E 61 6D 65 
4357   27A8 3A 20 25 73 
4357   27AC 00 
4358   27AD 0A 76 61 72 _s3: .db "\nvar_type: %d\n", 0
4358   27B1 5F 74 79 70 
4358   27B5 65 3A 20 25 
4358   27B9 64 0A 00 
4359   27BC 0A 61 73 5F _s4: .db "\nas_string: %s\n", 0
4359   27C0 73 74 72 69 
4359   27C4 6E 67 3A 20 
4359   27C8 25 73 0A 00 
4360   27CC 0A 61 73 5F _s5: .db "\nas_int: %d\n", 0
4360   27D0 69 6E 74 3A 
4360   27D4 20 25 64 0A 
4360   27D8 00 
4361   27D9 55 6E 65 78 _s6: .db "Unexpected format in printf.", 0
4361   27DD 70 65 63 74 
4361   27E1 65 64 20 66 
4361   27E5 6F 72 6D 61 
4361   27E9 74 20 69 6E 
4361   27ED 20 70 72 69 
4361   27F1 6E 74 66 2E 
4361   27F5 00 
4362   27F6 45 72 72 6F _s7: .db "Error: Unknown argument type.\n", 0
4362   27FA 72 3A 20 55 
4362   27FE 6E 6B 6E 6F 
4362   2802 77 6E 20 61 
4362   2806 72 67 75 6D 
4362   280A 65 6E 74 20 
4362   280E 74 79 70 65 
4362   2812 2E 0A 00 
4363   2815 1B 5B 32 4A _s8: .db "\033[2J\033[H", 0
4363   2819 1B 5B 48 00 
4364   281D             
4365   281D 1F 28       _heap_top: .dw _heap
4366   281F 00          _heap: .db 0
4367   2820             ; --- END DATA SEGMENT
4368   2820             
4369   2820             .end
tasm: Number of errors = 0
