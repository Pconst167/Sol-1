0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; sprintf(s, "Integer: %d, Char: %c, String: %s\n\n",  2341, 'G', "Hello World!"); 
0011   0408 26 C5 1F      mov b, _s0 ; "Hello World!"
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 26 47 00      mov b, $47
0015   0411 DD            push bl
0016   0412 26 25 09      mov b, $925
0017   0415 FD AB         swp b
0018   0417 D8            push b
0019   0418 26 D2 1F      mov b, _s1 ; "Integer: %d, Char: %c, String: %s\n\n"
0020   041B FD AB         swp b
0021   041D D8            push b
0022   041E 3B C5 1E      mov d, _s_data ; $s
0023   0421 2D            mov b, d
0024   0422 FD AB         swp b
0025   0424 D8            push b
0026   0425 07 95 0C      call sprintf
0027   0428 51 09 00      add sp, 9
0028   042B             ;; printf("Final String: %s", s); 
0029   042B 3B C5 1E      mov d, _s_data ; $s
0030   042E 2D            mov b, d
0031   042F FD AB         swp b
0032   0431 D8            push b
0033   0432 26 F6 1F      mov b, _s2 ; "Final String: %s"
0034   0435 FD AB         swp b
0035   0437 D8            push b
0036   0438 07 E6 07      call printf
0037   043B 51 04 00      add sp, 4
0038   043E 05 0B         syscall sys_terminate_proc
0039   0440             
0040   0440             strcpy:
0041   0440 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0042   0443             ;; char *psrc; 
0043   0443 52 02 00      sub sp, 2 ; psrc
0044   0446             ;; char *pdest; 
0045   0446 52 02 00      sub sp, 2 ; pdest
0046   0449             ;; psrc = src; 
0047   0449 FA FF FF      lea d, [bp + -1] ; $psrc
0048   044C DA            push d
0049   044D FA 07 00      lea d, [bp + 7] ; $src
0050   0450 2A            mov b, [d]
0051   0451 E7            pop d
0052   0452 FD 43         mov [d], b
0053   0454             ;; pdest = dest; 
0054   0454 FA FD FF      lea d, [bp + -3] ; $pdest
0055   0457 DA            push d
0056   0458 FA 05 00      lea d, [bp + 5] ; $dest
0057   045B 2A            mov b, [d]
0058   045C E7            pop d
0059   045D FD 43         mov [d], b
0060   045F             ;; while(*psrc) *pdest++ = *psrc++; 
0061   045F             _while1_cond:
0062   045F FA FF FF      lea d, [bp + -1] ; $psrc
0063   0462 2A            mov b, [d]
0064   0463 74            mov d, b
0065   0464 32            mov bl, [d]
0066   0465 A7 00         mov bh, 0
0067   0467 C0 00 00      cmp b, 0
0068   046A C6 92 04      je _while1_exit
0069   046D             _while1_block:
0070   046D             ;; *pdest++ = *psrc++; 
0071   046D FA FD FF      lea d, [bp + -3] ; $pdest
0072   0470 2A            mov b, [d]
0073   0471 FD 77         inc b
0074   0473 FA FD FF      lea d, [bp + -3] ; $pdest
0075   0476 FD 43         mov [d], b
0076   0478 FD 7D         dec b
0077   047A D8            push b
0078   047B FA FF FF      lea d, [bp + -1] ; $psrc
0079   047E 2A            mov b, [d]
0080   047F FD 77         inc b
0081   0481 FA FF FF      lea d, [bp + -1] ; $psrc
0082   0484 FD 43         mov [d], b
0083   0486 FD 7D         dec b
0084   0488 74            mov d, b
0085   0489 32            mov bl, [d]
0086   048A A7 00         mov bh, 0
0087   048C E7            pop d
0088   048D FD 3E         mov [d], bl
0089   048F 0A 5F 04      jmp _while1_cond
0090   0492             _while1_exit:
0091   0492             ;; *pdest = '\0'; 
0092   0492 FA FD FF      lea d, [bp + -3] ; $pdest
0093   0495 2A            mov b, [d]
0094   0496 D8            push b
0095   0497 26 00 00      mov b, $0
0096   049A E7            pop d
0097   049B FD 3E         mov [d], bl
0098   049D F9            leave
0099   049E 09            ret
0100   049F             
0101   049F             strcmp:
0102   049F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0103   04A2             ;; while (*s1 && (*s1 == *s2)) { 
0104   04A2             _while2_cond:
0105   04A2 FA 05 00      lea d, [bp + 5] ; $s1
0106   04A5 2A            mov b, [d]
0107   04A6 74            mov d, b
0108   04A7 32            mov bl, [d]
0109   04A8 A7 00         mov bh, 0
0110   04AA             ; START LOGICAL AND
0111   04AA D7            push a
0112   04AB 11            mov a, b
0113   04AC FA 05 00      lea d, [bp + 5] ; $s1
0114   04AF 2A            mov b, [d]
0115   04B0 74            mov d, b
0116   04B1 32            mov bl, [d]
0117   04B2 A7 00         mov bh, 0
0118   04B4             ; START RELATIONAL
0119   04B4 D7            push a
0120   04B5 11            mov a, b
0121   04B6 FA 07 00      lea d, [bp + 7] ; $s2
0122   04B9 2A            mov b, [d]
0123   04BA 74            mov d, b
0124   04BB 32            mov bl, [d]
0125   04BC A7 00         mov bh, 0
0126   04BE B0            cmp a, b
0127   04BF FD 71         seq ; ==
0128   04C1 E4            pop a
0129   04C2             ; END RELATIONAL
0130   04C2 FD A7         sand a, b
0131   04C4 E4            pop a
0132   04C5             ; END LOGICAL AND
0133   04C5 C0 00 00      cmp b, 0
0134   04C8 C6 E8 04      je _while2_exit
0135   04CB             _while2_block:
0136   04CB             ;; s1++; 
0137   04CB FA 05 00      lea d, [bp + 5] ; $s1
0138   04CE 2A            mov b, [d]
0139   04CF FD 77         inc b
0140   04D1 FA 05 00      lea d, [bp + 5] ; $s1
0141   04D4 FD 43         mov [d], b
0142   04D6 FD 7D         dec b
0143   04D8             ;; s2++; 
0144   04D8 FA 07 00      lea d, [bp + 7] ; $s2
0145   04DB 2A            mov b, [d]
0146   04DC FD 77         inc b
0147   04DE FA 07 00      lea d, [bp + 7] ; $s2
0148   04E1 FD 43         mov [d], b
0149   04E3 FD 7D         dec b
0150   04E5 0A A2 04      jmp _while2_cond
0151   04E8             _while2_exit:
0152   04E8             ;; return *s1 - *s2; 
0153   04E8 FA 05 00      lea d, [bp + 5] ; $s1
0154   04EB 2A            mov b, [d]
0155   04EC 74            mov d, b
0156   04ED 32            mov bl, [d]
0157   04EE A7 00         mov bh, 0
0158   04F0             ; START TERMS
0159   04F0 D7            push a
0160   04F1 11            mov a, b
0161   04F2 FA 07 00      lea d, [bp + 7] ; $s2
0162   04F5 2A            mov b, [d]
0163   04F6 74            mov d, b
0164   04F7 32            mov bl, [d]
0165   04F8 A7 00         mov bh, 0
0166   04FA 60            sub a, b
0167   04FB 27            mov b, a
0168   04FC E4            pop a
0169   04FD             ; END TERMS
0170   04FD F9            leave
0171   04FE 09            ret
0172   04FF             
0173   04FF             strncmp:
0174   04FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0175   0502 F9            leave
0176   0503 09            ret
0177   0504             
0178   0504             strcat:
0179   0504 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0180   0507             ;; int dest_len; 
0181   0507 52 02 00      sub sp, 2 ; dest_len
0182   050A             ;; int i; 
0183   050A 52 02 00      sub sp, 2 ; i
0184   050D             ;; dest_len = strlen(dest); 
0185   050D FA FF FF      lea d, [bp + -1] ; $dest_len
0186   0510 DA            push d
0187   0511 FA 05 00      lea d, [bp + 5] ; $dest
0188   0514 2A            mov b, [d]
0189   0515 FD AB         swp b
0190   0517 D8            push b
0191   0518 07 BA 05      call strlen
0192   051B 51 02 00      add sp, 2
0193   051E E7            pop d
0194   051F FD 43         mov [d], b
0195   0521             ;; for (i = 0; src[i] != 0; i=i+1) { 
0196   0521             _for3_init:
0197   0521 FA FD FF      lea d, [bp + -3] ; $i
0198   0524 DA            push d
0199   0525 26 00 00      mov b, $0
0200   0528 E7            pop d
0201   0529 FD 43         mov [d], b
0202   052B             _for3_cond:
0203   052B FA 07 00      lea d, [bp + 7] ; $src
0204   052E FD 2A         mov d, [d]
0205   0530 D7            push a
0206   0531 DA            push d
0207   0532 FA FD FF      lea d, [bp + -3] ; $i
0208   0535 2A            mov b, [d]
0209   0536 E7            pop d
0210   0537 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0211   053B E4            pop a
0212   053C 32            mov bl, [d]
0213   053D A7 00         mov bh, 0
0214   053F             ; START RELATIONAL
0215   053F D7            push a
0216   0540 11            mov a, b
0217   0541 26 00 00      mov b, $0
0218   0544 B0            cmp a, b
0219   0545 FD 72         sneq ; !=
0220   0547 E4            pop a
0221   0548             ; END RELATIONAL
0222   0548 C0 00 00      cmp b, 0
0223   054B C6 94 05      je _for3_exit
0224   054E             _for3_block:
0225   054E             ;; dest[dest_len + i] = src[i]; 
0226   054E FA 05 00      lea d, [bp + 5] ; $dest
0227   0551 FD 2A         mov d, [d]
0228   0553 D7            push a
0229   0554 DA            push d
0230   0555 FA FF FF      lea d, [bp + -1] ; $dest_len
0231   0558 2A            mov b, [d]
0232   0559             ; START TERMS
0233   0559 D7            push a
0234   055A 11            mov a, b
0235   055B FA FD FF      lea d, [bp + -3] ; $i
0236   055E 2A            mov b, [d]
0237   055F 56            add b, a
0238   0560 E4            pop a
0239   0561             ; END TERMS
0240   0561 E7            pop d
0241   0562 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0242   0566 E4            pop a
0243   0567 DA            push d
0244   0568 FA 07 00      lea d, [bp + 7] ; $src
0245   056B FD 2A         mov d, [d]
0246   056D D7            push a
0247   056E DA            push d
0248   056F FA FD FF      lea d, [bp + -3] ; $i
0249   0572 2A            mov b, [d]
0250   0573 E7            pop d
0251   0574 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0252   0578 E4            pop a
0253   0579 32            mov bl, [d]
0254   057A A7 00         mov bh, 0
0255   057C E7            pop d
0256   057D FD 3E         mov [d], bl
0257   057F             _for3_update:
0258   057F FA FD FF      lea d, [bp + -3] ; $i
0259   0582 DA            push d
0260   0583 FA FD FF      lea d, [bp + -3] ; $i
0261   0586 2A            mov b, [d]
0262   0587             ; START TERMS
0263   0587 D7            push a
0264   0588 11            mov a, b
0265   0589 26 01 00      mov b, $1
0266   058C 56            add b, a
0267   058D E4            pop a
0268   058E             ; END TERMS
0269   058E E7            pop d
0270   058F FD 43         mov [d], b
0271   0591 0A 2B 05      jmp _for3_cond
0272   0594             _for3_exit:
0273   0594             ;; dest[dest_len + i] = 0; 
0274   0594 FA 05 00      lea d, [bp + 5] ; $dest
0275   0597 FD 2A         mov d, [d]
0276   0599 D7            push a
0277   059A DA            push d
0278   059B FA FF FF      lea d, [bp + -1] ; $dest_len
0279   059E 2A            mov b, [d]
0280   059F             ; START TERMS
0281   059F D7            push a
0282   05A0 11            mov a, b
0283   05A1 FA FD FF      lea d, [bp + -3] ; $i
0284   05A4 2A            mov b, [d]
0285   05A5 56            add b, a
0286   05A6 E4            pop a
0287   05A7             ; END TERMS
0288   05A7 E7            pop d
0289   05A8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0290   05AC E4            pop a
0291   05AD DA            push d
0292   05AE 26 00 00      mov b, $0
0293   05B1 E7            pop d
0294   05B2 FD 3E         mov [d], bl
0295   05B4             ;; return dest; 
0296   05B4 FA 05 00      lea d, [bp + 5] ; $dest
0297   05B7 2A            mov b, [d]
0298   05B8 F9            leave
0299   05B9 09            ret
0300   05BA             
0301   05BA             strlen:
0302   05BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0303   05BD             ;; int length; 
0304   05BD 52 02 00      sub sp, 2 ; length
0305   05C0             ;; length = 0; 
0306   05C0 FA FF FF      lea d, [bp + -1] ; $length
0307   05C3 DA            push d
0308   05C4 26 00 00      mov b, $0
0309   05C7 E7            pop d
0310   05C8 FD 43         mov [d], b
0311   05CA             ;; while (str[length] != 0) { 
0312   05CA             _while4_cond:
0313   05CA FA 05 00      lea d, [bp + 5] ; $str
0314   05CD FD 2A         mov d, [d]
0315   05CF D7            push a
0316   05D0 DA            push d
0317   05D1 FA FF FF      lea d, [bp + -1] ; $length
0318   05D4 2A            mov b, [d]
0319   05D5 E7            pop d
0320   05D6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0321   05DA E4            pop a
0322   05DB 32            mov bl, [d]
0323   05DC A7 00         mov bh, 0
0324   05DE             ; START RELATIONAL
0325   05DE D7            push a
0326   05DF 11            mov a, b
0327   05E0 26 00 00      mov b, $0
0328   05E3 B0            cmp a, b
0329   05E4 FD 72         sneq ; !=
0330   05E6 E4            pop a
0331   05E7             ; END RELATIONAL
0332   05E7 C0 00 00      cmp b, 0
0333   05EA C6 FD 05      je _while4_exit
0334   05ED             _while4_block:
0335   05ED             ;; length++; 
0336   05ED FA FF FF      lea d, [bp + -1] ; $length
0337   05F0 2A            mov b, [d]
0338   05F1 FD 77         inc b
0339   05F3 FA FF FF      lea d, [bp + -1] ; $length
0340   05F6 FD 43         mov [d], b
0341   05F8 FD 7D         dec b
0342   05FA 0A CA 05      jmp _while4_cond
0343   05FD             _while4_exit:
0344   05FD             ;; return length; 
0345   05FD FA FF FF      lea d, [bp + -1] ; $length
0346   0600 2A            mov b, [d]
0347   0601 F9            leave
0348   0602 09            ret
0349   0603             
0350   0603             exit:
0351   0603 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0352   0606             
0353   0606             ; --- BEGIN INLINE ASM BLOCK
0354   0606 05 0B         syscall sys_terminate_proc
0355   0608             ; --- END INLINE ASM BLOCK
0356   0608             
0357   0608 F9            leave
0358   0609 09            ret
0359   060A             
0360   060A             memset:
0361   060A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0362   060D             ;; int i; 
0363   060D 52 02 00      sub sp, 2 ; i
0364   0610             ;; for(i = 0; i < size; i++){ 
0365   0610             _for5_init:
0366   0610 FA FF FF      lea d, [bp + -1] ; $i
0367   0613 DA            push d
0368   0614 26 00 00      mov b, $0
0369   0617 E7            pop d
0370   0618 FD 43         mov [d], b
0371   061A             _for5_cond:
0372   061A FA FF FF      lea d, [bp + -1] ; $i
0373   061D 2A            mov b, [d]
0374   061E             ; START RELATIONAL
0375   061E D7            push a
0376   061F 11            mov a, b
0377   0620 FA 08 00      lea d, [bp + 8] ; $size
0378   0623 2A            mov b, [d]
0379   0624 B0            cmp a, b
0380   0625 FD 73         slt ; < (signed)
0381   0627 E4            pop a
0382   0628             ; END RELATIONAL
0383   0628 C0 00 00      cmp b, 0
0384   062B C6 54 06      je _for5_exit
0385   062E             _for5_block:
0386   062E             ;; *(s+i) = c; 
0387   062E FA 05 00      lea d, [bp + 5] ; $s
0388   0631 2A            mov b, [d]
0389   0632             ; START TERMS
0390   0632 D7            push a
0391   0633 11            mov a, b
0392   0634 FA FF FF      lea d, [bp + -1] ; $i
0393   0637 2A            mov b, [d]
0394   0638 56            add b, a
0395   0639 E4            pop a
0396   063A             ; END TERMS
0397   063A D8            push b
0398   063B FA 07 00      lea d, [bp + 7] ; $c
0399   063E 32            mov bl, [d]
0400   063F A7 00         mov bh, 0
0401   0641 E7            pop d
0402   0642 FD 3E         mov [d], bl
0403   0644             _for5_update:
0404   0644 FA FF FF      lea d, [bp + -1] ; $i
0405   0647 2A            mov b, [d]
0406   0648 FD 77         inc b
0407   064A FA FF FF      lea d, [bp + -1] ; $i
0408   064D FD 43         mov [d], b
0409   064F FD 7D         dec b
0410   0651 0A 1A 06      jmp _for5_cond
0411   0654             _for5_exit:
0412   0654             ;; return s; 
0413   0654 FA 05 00      lea d, [bp + 5] ; $s
0414   0657 2A            mov b, [d]
0415   0658 F9            leave
0416   0659 09            ret
0417   065A             
0418   065A             atoi:
0419   065A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0420   065D             ;; int result = 0;  // Initialize result 
0421   065D 52 02 00      sub sp, 2 ; result
0422   0660             ; --- START LOCAL VAR INITIALIZATION
0423   0660 FA FF FF      lea d, [bp + -1] ; $result
0424   0663 DA            push d
0425   0664 26 00 00      mov b, $0
0426   0667 E7            pop d
0427   0668 FD 43         mov [d], b
0428   066A             ; --- END LOCAL VAR INITIALIZATION
0429   066A             ;; int sign = 1;    // Initialize sign as positive 
0430   066A 52 02 00      sub sp, 2 ; sign
0431   066D             ; --- START LOCAL VAR INITIALIZATION
0432   066D FA FD FF      lea d, [bp + -3] ; $sign
0433   0670 DA            push d
0434   0671 26 01 00      mov b, $1
0435   0674 E7            pop d
0436   0675 FD 43         mov [d], b
0437   0677             ; --- END LOCAL VAR INITIALIZATION
0438   0677             ;; while (*str == ' ') str++; 
0439   0677             _while6_cond:
0440   0677 FA 05 00      lea d, [bp + 5] ; $str
0441   067A 2A            mov b, [d]
0442   067B 74            mov d, b
0443   067C 32            mov bl, [d]
0444   067D A7 00         mov bh, 0
0445   067F             ; START RELATIONAL
0446   067F D7            push a
0447   0680 11            mov a, b
0448   0681 26 20 00      mov b, $20
0449   0684 B0            cmp a, b
0450   0685 FD 71         seq ; ==
0451   0687 E4            pop a
0452   0688             ; END RELATIONAL
0453   0688 C0 00 00      cmp b, 0
0454   068B C6 9E 06      je _while6_exit
0455   068E             _while6_block:
0456   068E             ;; str++; 
0457   068E FA 05 00      lea d, [bp + 5] ; $str
0458   0691 2A            mov b, [d]
0459   0692 FD 77         inc b
0460   0694 FA 05 00      lea d, [bp + 5] ; $str
0461   0697 FD 43         mov [d], b
0462   0699 FD 7D         dec b
0463   069B 0A 77 06      jmp _while6_cond
0464   069E             _while6_exit:
0465   069E             ;; if (*str == '-' || *str == '+') { 
0466   069E             _if7_cond:
0467   069E FA 05 00      lea d, [bp + 5] ; $str
0468   06A1 2A            mov b, [d]
0469   06A2 74            mov d, b
0470   06A3 32            mov bl, [d]
0471   06A4 A7 00         mov bh, 0
0472   06A6             ; START RELATIONAL
0473   06A6 D7            push a
0474   06A7 11            mov a, b
0475   06A8 26 2D 00      mov b, $2d
0476   06AB B0            cmp a, b
0477   06AC FD 71         seq ; ==
0478   06AE E4            pop a
0479   06AF             ; END RELATIONAL
0480   06AF             ; START LOGICAL OR
0481   06AF D7            push a
0482   06B0 11            mov a, b
0483   06B1 FA 05 00      lea d, [bp + 5] ; $str
0484   06B4 2A            mov b, [d]
0485   06B5 74            mov d, b
0486   06B6 32            mov bl, [d]
0487   06B7 A7 00         mov bh, 0
0488   06B9             ; START RELATIONAL
0489   06B9 D7            push a
0490   06BA 11            mov a, b
0491   06BB 26 2B 00      mov b, $2b
0492   06BE B0            cmp a, b
0493   06BF FD 71         seq ; ==
0494   06C1 E4            pop a
0495   06C2             ; END RELATIONAL
0496   06C2 FD A8         sor a, b ; ||
0497   06C4 E4            pop a
0498   06C5             ; END LOGICAL OR
0499   06C5 C0 00 00      cmp b, 0
0500   06C8 C6 01 07      je _if7_exit
0501   06CB             _if7_true:
0502   06CB             ;; if (*str == '-') sign = -1; 
0503   06CB             _if8_cond:
0504   06CB FA 05 00      lea d, [bp + 5] ; $str
0505   06CE 2A            mov b, [d]
0506   06CF 74            mov d, b
0507   06D0 32            mov bl, [d]
0508   06D1 A7 00         mov bh, 0
0509   06D3             ; START RELATIONAL
0510   06D3 D7            push a
0511   06D4 11            mov a, b
0512   06D5 26 2D 00      mov b, $2d
0513   06D8 B0            cmp a, b
0514   06D9 FD 71         seq ; ==
0515   06DB E4            pop a
0516   06DC             ; END RELATIONAL
0517   06DC C0 00 00      cmp b, 0
0518   06DF C6 F1 06      je _if8_exit
0519   06E2             _if8_true:
0520   06E2             ;; sign = -1; 
0521   06E2 FA FD FF      lea d, [bp + -3] ; $sign
0522   06E5 DA            push d
0523   06E6 26 01 00      mov b, $1
0524   06E9 FD 97         neg b
0525   06EB E7            pop d
0526   06EC FD 43         mov [d], b
0527   06EE 0A F1 06      jmp _if8_exit
0528   06F1             _if8_exit:
0529   06F1             ;; str++; 
0530   06F1 FA 05 00      lea d, [bp + 5] ; $str
0531   06F4 2A            mov b, [d]
0532   06F5 FD 77         inc b
0533   06F7 FA 05 00      lea d, [bp + 5] ; $str
0534   06FA FD 43         mov [d], b
0535   06FC FD 7D         dec b
0536   06FE 0A 01 07      jmp _if7_exit
0537   0701             _if7_exit:
0538   0701             ;; while (*str >= '0' && *str <= '9') { 
0539   0701             _while9_cond:
0540   0701 FA 05 00      lea d, [bp + 5] ; $str
0541   0704 2A            mov b, [d]
0542   0705 74            mov d, b
0543   0706 32            mov bl, [d]
0544   0707 A7 00         mov bh, 0
0545   0709             ; START RELATIONAL
0546   0709 D7            push a
0547   070A 11            mov a, b
0548   070B 26 30 00      mov b, $30
0549   070E B0            cmp a, b
0550   070F FD 82         sgeu ; >= (unsigned)
0551   0711 E4            pop a
0552   0712             ; END RELATIONAL
0553   0712             ; START LOGICAL AND
0554   0712 D7            push a
0555   0713 11            mov a, b
0556   0714 FA 05 00      lea d, [bp + 5] ; $str
0557   0717 2A            mov b, [d]
0558   0718 74            mov d, b
0559   0719 32            mov bl, [d]
0560   071A A7 00         mov bh, 0
0561   071C             ; START RELATIONAL
0562   071C D7            push a
0563   071D 11            mov a, b
0564   071E 26 39 00      mov b, $39
0565   0721 B0            cmp a, b
0566   0722 FD 76         sleu ; <= (unsigned)
0567   0724 E4            pop a
0568   0725             ; END RELATIONAL
0569   0725 FD A7         sand a, b
0570   0727 E4            pop a
0571   0728             ; END LOGICAL AND
0572   0728 C0 00 00      cmp b, 0
0573   072B C6 66 07      je _while9_exit
0574   072E             _while9_block:
0575   072E             ;; result = result * 10 + (*str - '0'); 
0576   072E FA FF FF      lea d, [bp + -1] ; $result
0577   0731 DA            push d
0578   0732 FA FF FF      lea d, [bp + -1] ; $result
0579   0735 2A            mov b, [d]
0580   0736             ; START FACTORS
0581   0736 D7            push a
0582   0737 11            mov a, b
0583   0738 26 0A 00      mov b, $a
0584   073B AC            mul a, b ; *
0585   073C 11            mov a, b
0586   073D 27            mov b, a
0587   073E E4            pop a
0588   073F             ; END FACTORS
0589   073F             ; START TERMS
0590   073F D7            push a
0591   0740 11            mov a, b
0592   0741 FA 05 00      lea d, [bp + 5] ; $str
0593   0744 2A            mov b, [d]
0594   0745 74            mov d, b
0595   0746 32            mov bl, [d]
0596   0747 A7 00         mov bh, 0
0597   0749             ; START TERMS
0598   0749 D7            push a
0599   074A 11            mov a, b
0600   074B 26 30 00      mov b, $30
0601   074E 60            sub a, b
0602   074F 27            mov b, a
0603   0750 E4            pop a
0604   0751             ; END TERMS
0605   0751 56            add b, a
0606   0752 E4            pop a
0607   0753             ; END TERMS
0608   0753 E7            pop d
0609   0754 FD 43         mov [d], b
0610   0756             ;; str++; 
0611   0756 FA 05 00      lea d, [bp + 5] ; $str
0612   0759 2A            mov b, [d]
0613   075A FD 77         inc b
0614   075C FA 05 00      lea d, [bp + 5] ; $str
0615   075F FD 43         mov [d], b
0616   0761 FD 7D         dec b
0617   0763 0A 01 07      jmp _while9_cond
0618   0766             _while9_exit:
0619   0766             ;; return sign * result; 
0620   0766 FA FD FF      lea d, [bp + -3] ; $sign
0621   0769 2A            mov b, [d]
0622   076A             ; START FACTORS
0623   076A D7            push a
0624   076B 11            mov a, b
0625   076C FA FF FF      lea d, [bp + -1] ; $result
0626   076F 2A            mov b, [d]
0627   0770 AC            mul a, b ; *
0628   0771 11            mov a, b
0629   0772 27            mov b, a
0630   0773 E4            pop a
0631   0774             ; END FACTORS
0632   0774 F9            leave
0633   0775 09            ret
0634   0776             
0635   0776             rand:
0636   0776 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0637   0779             ;; int  sec; 
0638   0779 52 02 00      sub sp, 2 ; sec
0639   077C             
0640   077C             ; --- BEGIN INLINE ASM BLOCK
0641   077C 19 00         mov al, 0
0642   077E 05 01         syscall sys_rtc					
0643   0780 1A            mov al, ah
0644   0781 FA FF FF      lea d, [bp + -1] ; $sec
0645   0784 1E            mov al, [d]
0646   0785 22 00         mov ah, 0
0647   0787             ; --- END INLINE ASM BLOCK
0648   0787             
0649   0787             ;; return sec; 
0650   0787 FA FF FF      lea d, [bp + -1] ; $sec
0651   078A 2A            mov b, [d]
0652   078B F9            leave
0653   078C 09            ret
0654   078D             
0655   078D             alloc:
0656   078D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0657   0790             ;; heap_top = heap_top + bytes; 
0658   0790 3B 4B 20      mov d, _heap_top ; $heap_top
0659   0793 DA            push d
0660   0794 3B 4B 20      mov d, _heap_top ; $heap_top
0661   0797 2A            mov b, [d]
0662   0798             ; START TERMS
0663   0798 D7            push a
0664   0799 11            mov a, b
0665   079A FA 05 00      lea d, [bp + 5] ; $bytes
0666   079D 2A            mov b, [d]
0667   079E 56            add b, a
0668   079F E4            pop a
0669   07A0             ; END TERMS
0670   07A0 E7            pop d
0671   07A1 FD 43         mov [d], b
0672   07A3             ;; return heap_top - bytes; 
0673   07A3 3B 4B 20      mov d, _heap_top ; $heap_top
0674   07A6 2A            mov b, [d]
0675   07A7             ; START TERMS
0676   07A7 D7            push a
0677   07A8 11            mov a, b
0678   07A9 FA 05 00      lea d, [bp + 5] ; $bytes
0679   07AC 2A            mov b, [d]
0680   07AD 60            sub a, b
0681   07AE 27            mov b, a
0682   07AF E4            pop a
0683   07B0             ; END TERMS
0684   07B0 F9            leave
0685   07B1 09            ret
0686   07B2             
0687   07B2             free:
0688   07B2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0689   07B5             ;; return heap_top = heap_top - bytes; 
0690   07B5 3B 4B 20      mov d, _heap_top ; $heap_top
0691   07B8 DA            push d
0692   07B9 3B 4B 20      mov d, _heap_top ; $heap_top
0693   07BC 2A            mov b, [d]
0694   07BD             ; START TERMS
0695   07BD D7            push a
0696   07BE 11            mov a, b
0697   07BF FA 05 00      lea d, [bp + 5] ; $bytes
0698   07C2 2A            mov b, [d]
0699   07C3 60            sub a, b
0700   07C4 27            mov b, a
0701   07C5 E4            pop a
0702   07C6             ; END TERMS
0703   07C6 E7            pop d
0704   07C7 FD 43         mov [d], b
0705   07C9 F9            leave
0706   07CA 09            ret
0707   07CB             
0708   07CB             fopen:
0709   07CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0710   07CE             ;; FILE *fp; 
0711   07CE 52 02 00      sub sp, 2 ; fp
0712   07D1             ;; fp = alloc(sizeof(int)); 
0713   07D1 FA FF FF      lea d, [bp + -1] ; $fp
0714   07D4 DA            push d
0715   07D5 26 02 00      mov b, 2
0716   07D8 FD AB         swp b
0717   07DA D8            push b
0718   07DB 07 8D 07      call alloc
0719   07DE 51 02 00      add sp, 2
0720   07E1 E7            pop d
0721   07E2 FD 43         mov [d], b
0722   07E4 F9            leave
0723   07E5 09            ret
0724   07E6             
0725   07E6             printf:
0726   07E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0727   07E9             ;; char *p, *format_p; 
0728   07E9 52 02 00      sub sp, 2 ; p
0729   07EC 52 02 00      sub sp, 2 ; format_p
0730   07EF             ;; format_p = format; 
0731   07EF FA FD FF      lea d, [bp + -3] ; $format_p
0732   07F2 DA            push d
0733   07F3 FA 05 00      lea d, [bp + 5] ; $format
0734   07F6 2A            mov b, [d]
0735   07F7 E7            pop d
0736   07F8 FD 43         mov [d], b
0737   07FA             ;; p = &format + 2; 
0738   07FA FA FF FF      lea d, [bp + -1] ; $p
0739   07FD DA            push d
0740   07FE FA 05 00      lea d, [bp + 5] ; $format
0741   0801 2D            mov b, d
0742   0802             ; START TERMS
0743   0802 D7            push a
0744   0803 11            mov a, b
0745   0804 26 02 00      mov b, $2
0746   0807 56            add b, a
0747   0808 E4            pop a
0748   0809             ; END TERMS
0749   0809 E7            pop d
0750   080A FD 43         mov [d], b
0751   080C             ;; for(;;){ 
0752   080C             _for10_init:
0753   080C             _for10_cond:
0754   080C             _for10_block:
0755   080C             ;; if(!*format_p) break; 
0756   080C             _if11_cond:
0757   080C FA FD FF      lea d, [bp + -3] ; $format_p
0758   080F 2A            mov b, [d]
0759   0810 74            mov d, b
0760   0811 32            mov bl, [d]
0761   0812 A7 00         mov bh, 0
0762   0814 C0 00 00      cmp b, 0
0763   0817 FD 71         seq ; !
0764   0819 C0 00 00      cmp b, 0
0765   081C C6 25 08      je _if11_else
0766   081F             _if11_true:
0767   081F             ;; break; 
0768   081F 0A 4C 0A      jmp _for10_exit ; for break
0769   0822 0A 49 0A      jmp _if11_exit
0770   0825             _if11_else:
0771   0825             ;; if(*format_p == '%'){ 
0772   0825             _if12_cond:
0773   0825 FA FD FF      lea d, [bp + -3] ; $format_p
0774   0828 2A            mov b, [d]
0775   0829 74            mov d, b
0776   082A 32            mov bl, [d]
0777   082B A7 00         mov bh, 0
0778   082D             ; START RELATIONAL
0779   082D D7            push a
0780   082E 11            mov a, b
0781   082F 26 25 00      mov b, $25
0782   0832 B0            cmp a, b
0783   0833 FD 71         seq ; ==
0784   0835 E4            pop a
0785   0836             ; END RELATIONAL
0786   0836 C0 00 00      cmp b, 0
0787   0839 C6 2D 0A      je _if12_else
0788   083C             _if12_true:
0789   083C             ;; format_p++; 
0790   083C FA FD FF      lea d, [bp + -3] ; $format_p
0791   083F 2A            mov b, [d]
0792   0840 FD 77         inc b
0793   0842 FA FD FF      lea d, [bp + -3] ; $format_p
0794   0845 FD 43         mov [d], b
0795   0847 FD 7D         dec b
0796   0849             ;; switch(*format_p){ 
0797   0849             _switch13_expr:
0798   0849 FA FD FF      lea d, [bp + -3] ; $format_p
0799   084C 2A            mov b, [d]
0800   084D 74            mov d, b
0801   084E 32            mov bl, [d]
0802   084F A7 00         mov bh, 0
0803   0851             _switch13_comparisons:
0804   0851 C1 6C         cmp bl, $6c
0805   0853 C6 7F 08      je _switch13_case0
0806   0856 C1 4C         cmp bl, $4c
0807   0858 C6 7F 08      je _switch13_case1
0808   085B C1 64         cmp bl, $64
0809   085D C6 6D 09      je _switch13_case2
0810   0860 C1 69         cmp bl, $69
0811   0862 C6 6D 09      je _switch13_case3
0812   0865 C1 75         cmp bl, $75
0813   0867 C6 91 09      je _switch13_case4
0814   086A C1 78         cmp bl, $78
0815   086C C6 B5 09      je _switch13_case5
0816   086F C1 63         cmp bl, $63
0817   0871 C6 D3 09      je _switch13_case6
0818   0874 C1 73         cmp bl, $73
0819   0876 C6 F2 09      je _switch13_case7
0820   0879 0A 11 0A      jmp _switch13_default
0821   087C 0A 1D 0A      jmp _switch13_exit
0822   087F             _switch13_case0:
0823   087F             _switch13_case1:
0824   087F             ;; format_p++; 
0825   087F FA FD FF      lea d, [bp + -3] ; $format_p
0826   0882 2A            mov b, [d]
0827   0883 FD 77         inc b
0828   0885 FA FD FF      lea d, [bp + -3] ; $format_p
0829   0888 FD 43         mov [d], b
0830   088A FD 7D         dec b
0831   088C             ;; if(*format_p == 'd' || *format_p == 'i') 
0832   088C             _if14_cond:
0833   088C FA FD FF      lea d, [bp + -3] ; $format_p
0834   088F 2A            mov b, [d]
0835   0890 74            mov d, b
0836   0891 32            mov bl, [d]
0837   0892 A7 00         mov bh, 0
0838   0894             ; START RELATIONAL
0839   0894 D7            push a
0840   0895 11            mov a, b
0841   0896 26 64 00      mov b, $64
0842   0899 B0            cmp a, b
0843   089A FD 71         seq ; ==
0844   089C E4            pop a
0845   089D             ; END RELATIONAL
0846   089D             ; START LOGICAL OR
0847   089D D7            push a
0848   089E 11            mov a, b
0849   089F FA FD FF      lea d, [bp + -3] ; $format_p
0850   08A2 2A            mov b, [d]
0851   08A3 74            mov d, b
0852   08A4 32            mov bl, [d]
0853   08A5 A7 00         mov bh, 0
0854   08A7             ; START RELATIONAL
0855   08A7 D7            push a
0856   08A8 11            mov a, b
0857   08A9 26 69 00      mov b, $69
0858   08AC B0            cmp a, b
0859   08AD FD 71         seq ; ==
0860   08AF E4            pop a
0861   08B0             ; END RELATIONAL
0862   08B0 FD A8         sor a, b ; ||
0863   08B2 E4            pop a
0864   08B3             ; END LOGICAL OR
0865   08B3 C0 00 00      cmp b, 0
0866   08B6 C6 DB 08      je _if14_else
0867   08B9             _if14_true:
0868   08B9             ;; print_signed_long(*(long *)p); 
0869   08B9 FA FF FF      lea d, [bp + -1] ; $p
0870   08BC 2A            mov b, [d]
0871   08BD AB            snex b
0872   08BE FD 39         mov c, b
0873   08C0 74            mov d, b
0874   08C1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0875   08C4 FD 39         mov c, b ; And place it into C
0876   08C6 2A            mov b, [d] ; Lower Word in B
0877   08C7 FD 79         mov g, b
0878   08C9 28            mov b, c
0879   08CA FD AB         swp b
0880   08CC D8            push b
0881   08CD FD 27         mov b, g
0882   08CF FD AB         swp b
0883   08D1 D8            push b
0884   08D2 07 21 12      call print_signed_long
0885   08D5 51 04 00      add sp, 4
0886   08D8 0A 58 09      jmp _if14_exit
0887   08DB             _if14_else:
0888   08DB             ;; if(*format_p == 'u') 
0889   08DB             _if15_cond:
0890   08DB FA FD FF      lea d, [bp + -3] ; $format_p
0891   08DE 2A            mov b, [d]
0892   08DF 74            mov d, b
0893   08E0 32            mov bl, [d]
0894   08E1 A7 00         mov bh, 0
0895   08E3             ; START RELATIONAL
0896   08E3 D7            push a
0897   08E4 11            mov a, b
0898   08E5 26 75 00      mov b, $75
0899   08E8 B0            cmp a, b
0900   08E9 FD 71         seq ; ==
0901   08EB E4            pop a
0902   08EC             ; END RELATIONAL
0903   08EC C0 00 00      cmp b, 0
0904   08EF C6 16 09      je _if15_else
0905   08F2             _if15_true:
0906   08F2             ;; print_unsigned_long(*(unsigned long *)p); 
0907   08F2 FA FF FF      lea d, [bp + -1] ; $p
0908   08F5 2A            mov b, [d]
0909   08F6 A7 00         mov bh, 0
0910   08F8 38 00 00      mov c, 0
0911   08FB 74            mov d, b
0912   08FC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0913   08FF FD 39         mov c, b ; And place it into C
0914   0901 2A            mov b, [d] ; Lower Word in B
0915   0902 FD 79         mov g, b
0916   0904 28            mov b, c
0917   0905 FD AB         swp b
0918   0907 D8            push b
0919   0908 FD 27         mov b, g
0920   090A FD AB         swp b
0921   090C D8            push b
0922   090D 07 61 15      call print_unsigned_long
0923   0910 51 04 00      add sp, 4
0924   0913 0A 58 09      jmp _if15_exit
0925   0916             _if15_else:
0926   0916             ;; if(*format_p == 'x') 
0927   0916             _if16_cond:
0928   0916 FA FD FF      lea d, [bp + -3] ; $format_p
0929   0919 2A            mov b, [d]
0930   091A 74            mov d, b
0931   091B 32            mov bl, [d]
0932   091C A7 00         mov bh, 0
0933   091E             ; START RELATIONAL
0934   091E D7            push a
0935   091F 11            mov a, b
0936   0920 26 78 00      mov b, $78
0937   0923 B0            cmp a, b
0938   0924 FD 71         seq ; ==
0939   0926 E4            pop a
0940   0927             ; END RELATIONAL
0941   0927 C0 00 00      cmp b, 0
0942   092A C6 4C 09      je _if16_else
0943   092D             _if16_true:
0944   092D             ;; printx32(*(long int *)p); 
0945   092D FA FF FF      lea d, [bp + -1] ; $p
0946   0930 2A            mov b, [d]
0947   0931 74            mov d, b
0948   0932 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0949   0935 FD 39         mov c, b ; And place it into C
0950   0937 2A            mov b, [d] ; Lower Word in B
0951   0938 FD 79         mov g, b
0952   093A 28            mov b, c
0953   093B FD AB         swp b
0954   093D D8            push b
0955   093E FD 27         mov b, g
0956   0940 FD AB         swp b
0957   0942 D8            push b
0958   0943 07 96 0F      call printx32
0959   0946 51 04 00      add sp, 4
0960   0949 0A 58 09      jmp _if16_exit
0961   094C             _if16_else:
0962   094C             ;; err("Unexpected format in printf."); 
0963   094C 26 07 20      mov b, _s3 ; "Unexpected format in printf."
0964   094F FD AB         swp b
0965   0951 D8            push b
0966   0952 07 84 0F      call err
0967   0955 51 02 00      add sp, 2
0968   0958             _if16_exit:
0969   0958             _if15_exit:
0970   0958             _if14_exit:
0971   0958             ;; p = p + 4; 
0972   0958 FA FF FF      lea d, [bp + -1] ; $p
0973   095B DA            push d
0974   095C FA FF FF      lea d, [bp + -1] ; $p
0975   095F 2A            mov b, [d]
0976   0960             ; START TERMS
0977   0960 D7            push a
0978   0961 11            mov a, b
0979   0962 26 04 00      mov b, $4
0980   0965 56            add b, a
0981   0966 E4            pop a
0982   0967             ; END TERMS
0983   0967 E7            pop d
0984   0968 FD 43         mov [d], b
0985   096A             ;; break; 
0986   096A 0A 1D 0A      jmp _switch13_exit ; case break
0987   096D             _switch13_case2:
0988   096D             _switch13_case3:
0989   096D             ;; print_signed(*(int*)p); 
0990   096D FA FF FF      lea d, [bp + -1] ; $p
0991   0970 2A            mov b, [d]
0992   0971 74            mov d, b
0993   0972 2A            mov b, [d]
0994   0973 FD AB         swp b
0995   0975 D8            push b
0996   0976 07 2A 11      call print_signed
0997   0979 51 02 00      add sp, 2
0998   097C             ;; p = p + 2; 
0999   097C FA FF FF      lea d, [bp + -1] ; $p
1000   097F DA            push d
1001   0980 FA FF FF      lea d, [bp + -1] ; $p
1002   0983 2A            mov b, [d]
1003   0984             ; START TERMS
1004   0984 D7            push a
1005   0985 11            mov a, b
1006   0986 26 02 00      mov b, $2
1007   0989 56            add b, a
1008   098A E4            pop a
1009   098B             ; END TERMS
1010   098B E7            pop d
1011   098C FD 43         mov [d], b
1012   098E             ;; break; 
1013   098E 0A 1D 0A      jmp _switch13_exit ; case break
1014   0991             _switch13_case4:
1015   0991             ;; print_unsigned(*(unsigned int*)p); 
1016   0991 FA FF FF      lea d, [bp + -1] ; $p
1017   0994 2A            mov b, [d]
1018   0995 74            mov d, b
1019   0996 2A            mov b, [d]
1020   0997 FD AB         swp b
1021   0999 D8            push b
1022   099A 07 66 18      call print_unsigned
1023   099D 51 02 00      add sp, 2
1024   09A0             ;; p = p + 2; 
1025   09A0 FA FF FF      lea d, [bp + -1] ; $p
1026   09A3 DA            push d
1027   09A4 FA FF FF      lea d, [bp + -1] ; $p
1028   09A7 2A            mov b, [d]
1029   09A8             ; START TERMS
1030   09A8 D7            push a
1031   09A9 11            mov a, b
1032   09AA 26 02 00      mov b, $2
1033   09AD 56            add b, a
1034   09AE E4            pop a
1035   09AF             ; END TERMS
1036   09AF E7            pop d
1037   09B0 FD 43         mov [d], b
1038   09B2             ;; break; 
1039   09B2 0A 1D 0A      jmp _switch13_exit ; case break
1040   09B5             _switch13_case5:
1041   09B5             
1042   09B5             ; --- BEGIN INLINE ASM BLOCK
1043   09B5 FA FF FF      lea d, [bp + -1] ; $p
1044   09B8 FD 2A         mov d, [d]
1045   09BA 2A            mov b, [d]
1046   09BB 07 C5 1D      call print_u16x
1047   09BE             ; --- END INLINE ASM BLOCK
1048   09BE             
1049   09BE             ;; p = p + 2; 
1050   09BE FA FF FF      lea d, [bp + -1] ; $p
1051   09C1 DA            push d
1052   09C2 FA FF FF      lea d, [bp + -1] ; $p
1053   09C5 2A            mov b, [d]
1054   09C6             ; START TERMS
1055   09C6 D7            push a
1056   09C7 11            mov a, b
1057   09C8 26 02 00      mov b, $2
1058   09CB 56            add b, a
1059   09CC E4            pop a
1060   09CD             ; END TERMS
1061   09CD E7            pop d
1062   09CE FD 43         mov [d], b
1063   09D0             ;; break; 
1064   09D0 0A 1D 0A      jmp _switch13_exit ; case break
1065   09D3             _switch13_case6:
1066   09D3             
1067   09D3             ; --- BEGIN INLINE ASM BLOCK
1068   09D3 FA FF FF      lea d, [bp + -1] ; $p
1069   09D6 FD 2A         mov d, [d]
1070   09D8 1E            mov al, [d]
1071   09D9 23            mov ah, al
1072   09DA 07 23 1C      call _putchar
1073   09DD             ; --- END INLINE ASM BLOCK
1074   09DD             
1075   09DD             ;; p = p + 2; 
1076   09DD FA FF FF      lea d, [bp + -1] ; $p
1077   09E0 DA            push d
1078   09E1 FA FF FF      lea d, [bp + -1] ; $p
1079   09E4 2A            mov b, [d]
1080   09E5             ; START TERMS
1081   09E5 D7            push a
1082   09E6 11            mov a, b
1083   09E7 26 02 00      mov b, $2
1084   09EA 56            add b, a
1085   09EB E4            pop a
1086   09EC             ; END TERMS
1087   09EC E7            pop d
1088   09ED FD 43         mov [d], b
1089   09EF             ;; break; 
1090   09EF 0A 1D 0A      jmp _switch13_exit ; case break
1091   09F2             _switch13_case7:
1092   09F2             
1093   09F2             ; --- BEGIN INLINE ASM BLOCK
1094   09F2 FA FF FF      lea d, [bp + -1] ; $p
1095   09F5 FD 2A         mov d, [d]
1096   09F7 FD 2A         mov d, [d]
1097   09F9 07 6D 1D      call _puts
1098   09FC             ; --- END INLINE ASM BLOCK
1099   09FC             
1100   09FC             ;; p = p + 2; 
1101   09FC FA FF FF      lea d, [bp + -1] ; $p
1102   09FF DA            push d
1103   0A00 FA FF FF      lea d, [bp + -1] ; $p
1104   0A03 2A            mov b, [d]
1105   0A04             ; START TERMS
1106   0A04 D7            push a
1107   0A05 11            mov a, b
1108   0A06 26 02 00      mov b, $2
1109   0A09 56            add b, a
1110   0A0A E4            pop a
1111   0A0B             ; END TERMS
1112   0A0B E7            pop d
1113   0A0C FD 43         mov [d], b
1114   0A0E             ;; break; 
1115   0A0E 0A 1D 0A      jmp _switch13_exit ; case break
1116   0A11             _switch13_default:
1117   0A11             ;; print("Error: Unknown argument type.\n"); 
1118   0A11 26 24 20      mov b, _s4 ; "Error: Unknown argument type.\n"
1119   0A14 FD AB         swp b
1120   0A16 D8            push b
1121   0A17 07 DA 1A      call print
1122   0A1A 51 02 00      add sp, 2
1123   0A1D             _switch13_exit:
1124   0A1D             ;; format_p++; 
1125   0A1D FA FD FF      lea d, [bp + -3] ; $format_p
1126   0A20 2A            mov b, [d]
1127   0A21 FD 77         inc b
1128   0A23 FA FD FF      lea d, [bp + -3] ; $format_p
1129   0A26 FD 43         mov [d], b
1130   0A28 FD 7D         dec b
1131   0A2A 0A 49 0A      jmp _if12_exit
1132   0A2D             _if12_else:
1133   0A2D             ;; putchar(*format_p); 
1134   0A2D FA FD FF      lea d, [bp + -3] ; $format_p
1135   0A30 2A            mov b, [d]
1136   0A31 74            mov d, b
1137   0A32 32            mov bl, [d]
1138   0A33 A7 00         mov bh, 0
1139   0A35 DD            push bl
1140   0A36 07 92 1A      call putchar
1141   0A39 51 01 00      add sp, 1
1142   0A3C             ;; format_p++; 
1143   0A3C FA FD FF      lea d, [bp + -3] ; $format_p
1144   0A3F 2A            mov b, [d]
1145   0A40 FD 77         inc b
1146   0A42 FA FD FF      lea d, [bp + -3] ; $format_p
1147   0A45 FD 43         mov [d], b
1148   0A47 FD 7D         dec b
1149   0A49             _if12_exit:
1150   0A49             _if11_exit:
1151   0A49             _for10_update:
1152   0A49 0A 0C 08      jmp _for10_cond
1153   0A4C             _for10_exit:
1154   0A4C F9            leave
1155   0A4D 09            ret
1156   0A4E             
1157   0A4E             scanf:
1158   0A4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1159   0A51             ;; char *p, *format_p; 
1160   0A51 52 02 00      sub sp, 2 ; p
1161   0A54 52 02 00      sub sp, 2 ; format_p
1162   0A57             ;; char c; 
1163   0A57 52 01 00      sub sp, 1 ; c
1164   0A5A             ;; int i; 
1165   0A5A 52 02 00      sub sp, 2 ; i
1166   0A5D             ;; char input_string[  512                    ]; 
1167   0A5D 52 00 02      sub sp, 512 ; input_string
1168   0A60             ;; format_p = format; 
1169   0A60 FA FD FF      lea d, [bp + -3] ; $format_p
1170   0A63 DA            push d
1171   0A64 FA 05 00      lea d, [bp + 5] ; $format
1172   0A67 2A            mov b, [d]
1173   0A68 E7            pop d
1174   0A69 FD 43         mov [d], b
1175   0A6B             ;; p = &format + 2; 
1176   0A6B FA FF FF      lea d, [bp + -1] ; $p
1177   0A6E DA            push d
1178   0A6F FA 05 00      lea d, [bp + 5] ; $format
1179   0A72 2D            mov b, d
1180   0A73             ; START TERMS
1181   0A73 D7            push a
1182   0A74 11            mov a, b
1183   0A75 26 02 00      mov b, $2
1184   0A78 56            add b, a
1185   0A79 E4            pop a
1186   0A7A             ; END TERMS
1187   0A7A E7            pop d
1188   0A7B FD 43         mov [d], b
1189   0A7D             ;; for(;;){ 
1190   0A7D             _for17_init:
1191   0A7D             _for17_cond:
1192   0A7D             _for17_block:
1193   0A7D             ;; if(!*format_p) break; 
1194   0A7D             _if18_cond:
1195   0A7D FA FD FF      lea d, [bp + -3] ; $format_p
1196   0A80 2A            mov b, [d]
1197   0A81 74            mov d, b
1198   0A82 32            mov bl, [d]
1199   0A83 A7 00         mov bh, 0
1200   0A85 C0 00 00      cmp b, 0
1201   0A88 FD 71         seq ; !
1202   0A8A C0 00 00      cmp b, 0
1203   0A8D C6 96 0A      je _if18_else
1204   0A90             _if18_true:
1205   0A90             ;; break; 
1206   0A90 0A 93 0C      jmp _for17_exit ; for break
1207   0A93 0A 90 0C      jmp _if18_exit
1208   0A96             _if18_else:
1209   0A96             ;; if(*format_p == '%'){ 
1210   0A96             _if19_cond:
1211   0A96 FA FD FF      lea d, [bp + -3] ; $format_p
1212   0A99 2A            mov b, [d]
1213   0A9A 74            mov d, b
1214   0A9B 32            mov bl, [d]
1215   0A9C A7 00         mov bh, 0
1216   0A9E             ; START RELATIONAL
1217   0A9E D7            push a
1218   0A9F 11            mov a, b
1219   0AA0 26 25 00      mov b, $25
1220   0AA3 B0            cmp a, b
1221   0AA4 FD 71         seq ; ==
1222   0AA6 E4            pop a
1223   0AA7             ; END RELATIONAL
1224   0AA7 C0 00 00      cmp b, 0
1225   0AAA C6 74 0C      je _if19_else
1226   0AAD             _if19_true:
1227   0AAD             ;; format_p++; 
1228   0AAD FA FD FF      lea d, [bp + -3] ; $format_p
1229   0AB0 2A            mov b, [d]
1230   0AB1 FD 77         inc b
1231   0AB3 FA FD FF      lea d, [bp + -3] ; $format_p
1232   0AB6 FD 43         mov [d], b
1233   0AB8 FD 7D         dec b
1234   0ABA             ;; switch(*format_p){ 
1235   0ABA             _switch20_expr:
1236   0ABA FA FD FF      lea d, [bp + -3] ; $format_p
1237   0ABD 2A            mov b, [d]
1238   0ABE 74            mov d, b
1239   0ABF 32            mov bl, [d]
1240   0AC0 A7 00         mov bh, 0
1241   0AC2             _switch20_comparisons:
1242   0AC2 C1 6C         cmp bl, $6c
1243   0AC4 C6 F0 0A      je _switch20_case0
1244   0AC7 C1 4C         cmp bl, $4c
1245   0AC9 C6 F0 0A      je _switch20_case1
1246   0ACC C1 64         cmp bl, $64
1247   0ACE C6 82 0B      je _switch20_case2
1248   0AD1 C1 69         cmp bl, $69
1249   0AD3 C6 82 0B      je _switch20_case3
1250   0AD6 C1 75         cmp bl, $75
1251   0AD8 C6 AF 0B      je _switch20_case4
1252   0ADB C1 78         cmp bl, $78
1253   0ADD C6 DC 0B      je _switch20_case5
1254   0AE0 C1 63         cmp bl, $63
1255   0AE2 C6 F1 0B      je _switch20_case6
1256   0AE5 C1 73         cmp bl, $73
1257   0AE7 C6 20 0C      je _switch20_case7
1258   0AEA 0A 58 0C      jmp _switch20_default
1259   0AED 0A 64 0C      jmp _switch20_exit
1260   0AF0             _switch20_case0:
1261   0AF0             _switch20_case1:
1262   0AF0             ;; format_p++; 
1263   0AF0 FA FD FF      lea d, [bp + -3] ; $format_p
1264   0AF3 2A            mov b, [d]
1265   0AF4 FD 77         inc b
1266   0AF6 FA FD FF      lea d, [bp + -3] ; $format_p
1267   0AF9 FD 43         mov [d], b
1268   0AFB FD 7D         dec b
1269   0AFD             ;; if(*format_p == 'd' || *format_p == 'i'); 
1270   0AFD             _if21_cond:
1271   0AFD FA FD FF      lea d, [bp + -3] ; $format_p
1272   0B00 2A            mov b, [d]
1273   0B01 74            mov d, b
1274   0B02 32            mov bl, [d]
1275   0B03 A7 00         mov bh, 0
1276   0B05             ; START RELATIONAL
1277   0B05 D7            push a
1278   0B06 11            mov a, b
1279   0B07 26 64 00      mov b, $64
1280   0B0A B0            cmp a, b
1281   0B0B FD 71         seq ; ==
1282   0B0D E4            pop a
1283   0B0E             ; END RELATIONAL
1284   0B0E             ; START LOGICAL OR
1285   0B0E D7            push a
1286   0B0F 11            mov a, b
1287   0B10 FA FD FF      lea d, [bp + -3] ; $format_p
1288   0B13 2A            mov b, [d]
1289   0B14 74            mov d, b
1290   0B15 32            mov bl, [d]
1291   0B16 A7 00         mov bh, 0
1292   0B18             ; START RELATIONAL
1293   0B18 D7            push a
1294   0B19 11            mov a, b
1295   0B1A 26 69 00      mov b, $69
1296   0B1D B0            cmp a, b
1297   0B1E FD 71         seq ; ==
1298   0B20 E4            pop a
1299   0B21             ; END RELATIONAL
1300   0B21 FD A8         sor a, b ; ||
1301   0B23 E4            pop a
1302   0B24             ; END LOGICAL OR
1303   0B24 C0 00 00      cmp b, 0
1304   0B27 C6 2D 0B      je _if21_else
1305   0B2A             _if21_true:
1306   0B2A             ;; ; 
1307   0B2A 0A 6D 0B      jmp _if21_exit
1308   0B2D             _if21_else:
1309   0B2D             ;; if(*format_p == 'u'); 
1310   0B2D             _if22_cond:
1311   0B2D FA FD FF      lea d, [bp + -3] ; $format_p
1312   0B30 2A            mov b, [d]
1313   0B31 74            mov d, b
1314   0B32 32            mov bl, [d]
1315   0B33 A7 00         mov bh, 0
1316   0B35             ; START RELATIONAL
1317   0B35 D7            push a
1318   0B36 11            mov a, b
1319   0B37 26 75 00      mov b, $75
1320   0B3A B0            cmp a, b
1321   0B3B FD 71         seq ; ==
1322   0B3D E4            pop a
1323   0B3E             ; END RELATIONAL
1324   0B3E C0 00 00      cmp b, 0
1325   0B41 C6 47 0B      je _if22_else
1326   0B44             _if22_true:
1327   0B44             ;; ; 
1328   0B44 0A 6D 0B      jmp _if22_exit
1329   0B47             _if22_else:
1330   0B47             ;; if(*format_p == 'x'); 
1331   0B47             _if23_cond:
1332   0B47 FA FD FF      lea d, [bp + -3] ; $format_p
1333   0B4A 2A            mov b, [d]
1334   0B4B 74            mov d, b
1335   0B4C 32            mov bl, [d]
1336   0B4D A7 00         mov bh, 0
1337   0B4F             ; START RELATIONAL
1338   0B4F D7            push a
1339   0B50 11            mov a, b
1340   0B51 26 78 00      mov b, $78
1341   0B54 B0            cmp a, b
1342   0B55 FD 71         seq ; ==
1343   0B57 E4            pop a
1344   0B58             ; END RELATIONAL
1345   0B58 C0 00 00      cmp b, 0
1346   0B5B C6 61 0B      je _if23_else
1347   0B5E             _if23_true:
1348   0B5E             ;; ; 
1349   0B5E 0A 6D 0B      jmp _if23_exit
1350   0B61             _if23_else:
1351   0B61             ;; err("Unexpected format in printf."); 
1352   0B61 26 07 20      mov b, _s3 ; "Unexpected format in printf."
1353   0B64 FD AB         swp b
1354   0B66 D8            push b
1355   0B67 07 84 0F      call err
1356   0B6A 51 02 00      add sp, 2
1357   0B6D             _if23_exit:
1358   0B6D             _if22_exit:
1359   0B6D             _if21_exit:
1360   0B6D             ;; p = p + 4; 
1361   0B6D FA FF FF      lea d, [bp + -1] ; $p
1362   0B70 DA            push d
1363   0B71 FA FF FF      lea d, [bp + -1] ; $p
1364   0B74 2A            mov b, [d]
1365   0B75             ; START TERMS
1366   0B75 D7            push a
1367   0B76 11            mov a, b
1368   0B77 26 04 00      mov b, $4
1369   0B7A 56            add b, a
1370   0B7B E4            pop a
1371   0B7C             ; END TERMS
1372   0B7C E7            pop d
1373   0B7D FD 43         mov [d], b
1374   0B7F             ;; break; 
1375   0B7F 0A 64 0C      jmp _switch20_exit ; case break
1376   0B82             _switch20_case2:
1377   0B82             _switch20_case3:
1378   0B82             ;; i = scann(); 
1379   0B82 FA FA FF      lea d, [bp + -6] ; $i
1380   0B85 DA            push d
1381   0B86 07 B5 1A      call scann
1382   0B89 E7            pop d
1383   0B8A FD 43         mov [d], b
1384   0B8C             ;; **(int **)p = i; 
1385   0B8C FA FF FF      lea d, [bp + -1] ; $p
1386   0B8F 2A            mov b, [d]
1387   0B90 74            mov d, b
1388   0B91 2A            mov b, [d]
1389   0B92 D8            push b
1390   0B93 FA FA FF      lea d, [bp + -6] ; $i
1391   0B96 2A            mov b, [d]
1392   0B97 E7            pop d
1393   0B98 FD 43         mov [d], b
1394   0B9A             ;; p = p + 2; 
1395   0B9A FA FF FF      lea d, [bp + -1] ; $p
1396   0B9D DA            push d
1397   0B9E FA FF FF      lea d, [bp + -1] ; $p
1398   0BA1 2A            mov b, [d]
1399   0BA2             ; START TERMS
1400   0BA2 D7            push a
1401   0BA3 11            mov a, b
1402   0BA4 26 02 00      mov b, $2
1403   0BA7 56            add b, a
1404   0BA8 E4            pop a
1405   0BA9             ; END TERMS
1406   0BA9 E7            pop d
1407   0BAA FD 43         mov [d], b
1408   0BAC             ;; break; 
1409   0BAC 0A 64 0C      jmp _switch20_exit ; case break
1410   0BAF             _switch20_case4:
1411   0BAF             ;; i = scann(); 
1412   0BAF FA FA FF      lea d, [bp + -6] ; $i
1413   0BB2 DA            push d
1414   0BB3 07 B5 1A      call scann
1415   0BB6 E7            pop d
1416   0BB7 FD 43         mov [d], b
1417   0BB9             ;; **(int **)p = i; 
1418   0BB9 FA FF FF      lea d, [bp + -1] ; $p
1419   0BBC 2A            mov b, [d]
1420   0BBD 74            mov d, b
1421   0BBE 2A            mov b, [d]
1422   0BBF D8            push b
1423   0BC0 FA FA FF      lea d, [bp + -6] ; $i
1424   0BC3 2A            mov b, [d]
1425   0BC4 E7            pop d
1426   0BC5 FD 43         mov [d], b
1427   0BC7             ;; p = p + 2; 
1428   0BC7 FA FF FF      lea d, [bp + -1] ; $p
1429   0BCA DA            push d
1430   0BCB FA FF FF      lea d, [bp + -1] ; $p
1431   0BCE 2A            mov b, [d]
1432   0BCF             ; START TERMS
1433   0BCF D7            push a
1434   0BD0 11            mov a, b
1435   0BD1 26 02 00      mov b, $2
1436   0BD4 56            add b, a
1437   0BD5 E4            pop a
1438   0BD6             ; END TERMS
1439   0BD6 E7            pop d
1440   0BD7 FD 43         mov [d], b
1441   0BD9             ;; break; 
1442   0BD9 0A 64 0C      jmp _switch20_exit ; case break
1443   0BDC             _switch20_case5:
1444   0BDC             ;; p = p + 2; 
1445   0BDC FA FF FF      lea d, [bp + -1] ; $p
1446   0BDF DA            push d
1447   0BE0 FA FF FF      lea d, [bp + -1] ; $p
1448   0BE3 2A            mov b, [d]
1449   0BE4             ; START TERMS
1450   0BE4 D7            push a
1451   0BE5 11            mov a, b
1452   0BE6 26 02 00      mov b, $2
1453   0BE9 56            add b, a
1454   0BEA E4            pop a
1455   0BEB             ; END TERMS
1456   0BEB E7            pop d
1457   0BEC FD 43         mov [d], b
1458   0BEE             ;; break; 
1459   0BEE 0A 64 0C      jmp _switch20_exit ; case break
1460   0BF1             _switch20_case6:
1461   0BF1             ;; c = getchar(); 
1462   0BF1 FA FC FF      lea d, [bp + -4] ; $c
1463   0BF4 DA            push d
1464   0BF5 07 9F 1A      call getchar
1465   0BF8 E7            pop d
1466   0BF9 FD 3E         mov [d], bl
1467   0BFB             ;; **(char **)p = c; 
1468   0BFB FA FF FF      lea d, [bp + -1] ; $p
1469   0BFE 2A            mov b, [d]
1470   0BFF 74            mov d, b
1471   0C00 2A            mov b, [d]
1472   0C01 D8            push b
1473   0C02 FA FC FF      lea d, [bp + -4] ; $c
1474   0C05 32            mov bl, [d]
1475   0C06 A7 00         mov bh, 0
1476   0C08 E7            pop d
1477   0C09 FD 43         mov [d], b
1478   0C0B             ;; p = p + 2; 
1479   0C0B FA FF FF      lea d, [bp + -1] ; $p
1480   0C0E DA            push d
1481   0C0F FA FF FF      lea d, [bp + -1] ; $p
1482   0C12 2A            mov b, [d]
1483   0C13             ; START TERMS
1484   0C13 D7            push a
1485   0C14 11            mov a, b
1486   0C15 26 02 00      mov b, $2
1487   0C18 56            add b, a
1488   0C19 E4            pop a
1489   0C1A             ; END TERMS
1490   0C1A E7            pop d
1491   0C1B FD 43         mov [d], b
1492   0C1D             ;; break; 
1493   0C1D 0A 64 0C      jmp _switch20_exit ; case break
1494   0C20             _switch20_case7:
1495   0C20             ;; gets(input_string); 
1496   0C20 FA FA FD      lea d, [bp + -518] ; $input_string
1497   0C23 2D            mov b, d
1498   0C24 FD AB         swp b
1499   0C26 D8            push b
1500   0C27 07 10 11      call gets
1501   0C2A 51 02 00      add sp, 2
1502   0C2D             ;; strcpy(*(char **)p, input_string); 
1503   0C2D FA FA FD      lea d, [bp + -518] ; $input_string
1504   0C30 2D            mov b, d
1505   0C31 FD AB         swp b
1506   0C33 D8            push b
1507   0C34 FA FF FF      lea d, [bp + -1] ; $p
1508   0C37 2A            mov b, [d]
1509   0C38 74            mov d, b
1510   0C39 2A            mov b, [d]
1511   0C3A FD AB         swp b
1512   0C3C D8            push b
1513   0C3D 07 40 04      call strcpy
1514   0C40 51 04 00      add sp, 4
1515   0C43             ;; p = p + 2; 
1516   0C43 FA FF FF      lea d, [bp + -1] ; $p
1517   0C46 DA            push d
1518   0C47 FA FF FF      lea d, [bp + -1] ; $p
1519   0C4A 2A            mov b, [d]
1520   0C4B             ; START TERMS
1521   0C4B D7            push a
1522   0C4C 11            mov a, b
1523   0C4D 26 02 00      mov b, $2
1524   0C50 56            add b, a
1525   0C51 E4            pop a
1526   0C52             ; END TERMS
1527   0C52 E7            pop d
1528   0C53 FD 43         mov [d], b
1529   0C55             ;; break; 
1530   0C55 0A 64 0C      jmp _switch20_exit ; case break
1531   0C58             _switch20_default:
1532   0C58             ;; print("Error: Unknown argument type.\n"); 
1533   0C58 26 24 20      mov b, _s4 ; "Error: Unknown argument type.\n"
1534   0C5B FD AB         swp b
1535   0C5D D8            push b
1536   0C5E 07 DA 1A      call print
1537   0C61 51 02 00      add sp, 2
1538   0C64             _switch20_exit:
1539   0C64             ;; format_p++; 
1540   0C64 FA FD FF      lea d, [bp + -3] ; $format_p
1541   0C67 2A            mov b, [d]
1542   0C68 FD 77         inc b
1543   0C6A FA FD FF      lea d, [bp + -3] ; $format_p
1544   0C6D FD 43         mov [d], b
1545   0C6F FD 7D         dec b
1546   0C71 0A 90 0C      jmp _if19_exit
1547   0C74             _if19_else:
1548   0C74             ;; putchar(*format_p); 
1549   0C74 FA FD FF      lea d, [bp + -3] ; $format_p
1550   0C77 2A            mov b, [d]
1551   0C78 74            mov d, b
1552   0C79 32            mov bl, [d]
1553   0C7A A7 00         mov bh, 0
1554   0C7C DD            push bl
1555   0C7D 07 92 1A      call putchar
1556   0C80 51 01 00      add sp, 1
1557   0C83             ;; format_p++; 
1558   0C83 FA FD FF      lea d, [bp + -3] ; $format_p
1559   0C86 2A            mov b, [d]
1560   0C87 FD 77         inc b
1561   0C89 FA FD FF      lea d, [bp + -3] ; $format_p
1562   0C8C FD 43         mov [d], b
1563   0C8E FD 7D         dec b
1564   0C90             _if19_exit:
1565   0C90             _if18_exit:
1566   0C90             _for17_update:
1567   0C90 0A 7D 0A      jmp _for17_cond
1568   0C93             _for17_exit:
1569   0C93 F9            leave
1570   0C94 09            ret
1571   0C95             
1572   0C95             sprintf:
1573   0C95 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1574   0C98             ;; char *p, *format_p; 
1575   0C98 52 02 00      sub sp, 2 ; p
1576   0C9B 52 02 00      sub sp, 2 ; format_p
1577   0C9E             ;; char *sp; 
1578   0C9E 52 02 00      sub sp, 2 ; sp
1579   0CA1             ;; sp = dest; 
1580   0CA1 FA FB FF      lea d, [bp + -5] ; $sp
1581   0CA4 DA            push d
1582   0CA5 FA 05 00      lea d, [bp + 5] ; $dest
1583   0CA8 2A            mov b, [d]
1584   0CA9 E7            pop d
1585   0CAA FD 43         mov [d], b
1586   0CAC             ;; format_p = format; 
1587   0CAC FA FD FF      lea d, [bp + -3] ; $format_p
1588   0CAF DA            push d
1589   0CB0 FA 07 00      lea d, [bp + 7] ; $format
1590   0CB3 2A            mov b, [d]
1591   0CB4 E7            pop d
1592   0CB5 FD 43         mov [d], b
1593   0CB7             ;; p = &format + 2; 
1594   0CB7 FA FF FF      lea d, [bp + -1] ; $p
1595   0CBA DA            push d
1596   0CBB FA 07 00      lea d, [bp + 7] ; $format
1597   0CBE 2D            mov b, d
1598   0CBF             ; START TERMS
1599   0CBF D7            push a
1600   0CC0 11            mov a, b
1601   0CC1 26 02 00      mov b, $2
1602   0CC4 56            add b, a
1603   0CC5 E4            pop a
1604   0CC6             ; END TERMS
1605   0CC6 E7            pop d
1606   0CC7 FD 43         mov [d], b
1607   0CC9             ;; for(;;){ 
1608   0CC9             _for24_init:
1609   0CC9             _for24_cond:
1610   0CC9             _for24_block:
1611   0CC9             ;; if(!*format_p) break; 
1612   0CC9             _if25_cond:
1613   0CC9 FA FD FF      lea d, [bp + -3] ; $format_p
1614   0CCC 2A            mov b, [d]
1615   0CCD 74            mov d, b
1616   0CCE 32            mov bl, [d]
1617   0CCF A7 00         mov bh, 0
1618   0CD1 C0 00 00      cmp b, 0
1619   0CD4 FD 71         seq ; !
1620   0CD6 C0 00 00      cmp b, 0
1621   0CD9 C6 E2 0C      je _if25_else
1622   0CDC             _if25_true:
1623   0CDC             ;; break; 
1624   0CDC 0A 82 0F      jmp _for24_exit ; for break
1625   0CDF 0A 7F 0F      jmp _if25_exit
1626   0CE2             _if25_else:
1627   0CE2             ;; if(*format_p == '%'){ 
1628   0CE2             _if26_cond:
1629   0CE2 FA FD FF      lea d, [bp + -3] ; $format_p
1630   0CE5 2A            mov b, [d]
1631   0CE6 74            mov d, b
1632   0CE7 32            mov bl, [d]
1633   0CE8 A7 00         mov bh, 0
1634   0CEA             ; START RELATIONAL
1635   0CEA D7            push a
1636   0CEB 11            mov a, b
1637   0CEC 26 25 00      mov b, $25
1638   0CEF B0            cmp a, b
1639   0CF0 FD 71         seq ; ==
1640   0CF2 E4            pop a
1641   0CF3             ; END RELATIONAL
1642   0CF3 C0 00 00      cmp b, 0
1643   0CF6 C6 5D 0F      je _if26_else
1644   0CF9             _if26_true:
1645   0CF9             ;; format_p++; 
1646   0CF9 FA FD FF      lea d, [bp + -3] ; $format_p
1647   0CFC 2A            mov b, [d]
1648   0CFD FD 77         inc b
1649   0CFF FA FD FF      lea d, [bp + -3] ; $format_p
1650   0D02 FD 43         mov [d], b
1651   0D04 FD 7D         dec b
1652   0D06             ;; switch(*format_p){ 
1653   0D06             _switch27_expr:
1654   0D06 FA FD FF      lea d, [bp + -3] ; $format_p
1655   0D09 2A            mov b, [d]
1656   0D0A 74            mov d, b
1657   0D0B 32            mov bl, [d]
1658   0D0C A7 00         mov bh, 0
1659   0D0E             _switch27_comparisons:
1660   0D0E C1 6C         cmp bl, $6c
1661   0D10 C6 3C 0D      je _switch27_case0
1662   0D13 C1 4C         cmp bl, $4c
1663   0D15 C6 3C 0D      je _switch27_case1
1664   0D18 C1 64         cmp bl, $64
1665   0D1A C6 2A 0E      je _switch27_case2
1666   0D1D C1 69         cmp bl, $69
1667   0D1F C6 2A 0E      je _switch27_case3
1668   0D22 C1 75         cmp bl, $75
1669   0D24 C6 64 0E      je _switch27_case4
1670   0D27 C1 78         cmp bl, $78
1671   0D29 C6 9E 0E      je _switch27_case5
1672   0D2C C1 63         cmp bl, $63
1673   0D2E C6 BC 0E      je _switch27_case6
1674   0D31 C1 73         cmp bl, $73
1675   0D33 C6 EA 0E      je _switch27_case7
1676   0D36 0A 41 0F      jmp _switch27_default
1677   0D39 0A 4D 0F      jmp _switch27_exit
1678   0D3C             _switch27_case0:
1679   0D3C             _switch27_case1:
1680   0D3C             ;; format_p++; 
1681   0D3C FA FD FF      lea d, [bp + -3] ; $format_p
1682   0D3F 2A            mov b, [d]
1683   0D40 FD 77         inc b
1684   0D42 FA FD FF      lea d, [bp + -3] ; $format_p
1685   0D45 FD 43         mov [d], b
1686   0D47 FD 7D         dec b
1687   0D49             ;; if(*format_p == 'd' || *format_p == 'i') 
1688   0D49             _if28_cond:
1689   0D49 FA FD FF      lea d, [bp + -3] ; $format_p
1690   0D4C 2A            mov b, [d]
1691   0D4D 74            mov d, b
1692   0D4E 32            mov bl, [d]
1693   0D4F A7 00         mov bh, 0
1694   0D51             ; START RELATIONAL
1695   0D51 D7            push a
1696   0D52 11            mov a, b
1697   0D53 26 64 00      mov b, $64
1698   0D56 B0            cmp a, b
1699   0D57 FD 71         seq ; ==
1700   0D59 E4            pop a
1701   0D5A             ; END RELATIONAL
1702   0D5A             ; START LOGICAL OR
1703   0D5A D7            push a
1704   0D5B 11            mov a, b
1705   0D5C FA FD FF      lea d, [bp + -3] ; $format_p
1706   0D5F 2A            mov b, [d]
1707   0D60 74            mov d, b
1708   0D61 32            mov bl, [d]
1709   0D62 A7 00         mov bh, 0
1710   0D64             ; START RELATIONAL
1711   0D64 D7            push a
1712   0D65 11            mov a, b
1713   0D66 26 69 00      mov b, $69
1714   0D69 B0            cmp a, b
1715   0D6A FD 71         seq ; ==
1716   0D6C E4            pop a
1717   0D6D             ; END RELATIONAL
1718   0D6D FD A8         sor a, b ; ||
1719   0D6F E4            pop a
1720   0D70             ; END LOGICAL OR
1721   0D70 C0 00 00      cmp b, 0
1722   0D73 C6 98 0D      je _if28_else
1723   0D76             _if28_true:
1724   0D76             ;; print_signed_long(*(long *)p); 
1725   0D76 FA FF FF      lea d, [bp + -1] ; $p
1726   0D79 2A            mov b, [d]
1727   0D7A AB            snex b
1728   0D7B FD 39         mov c, b
1729   0D7D 74            mov d, b
1730   0D7E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1731   0D81 FD 39         mov c, b ; And place it into C
1732   0D83 2A            mov b, [d] ; Lower Word in B
1733   0D84 FD 79         mov g, b
1734   0D86 28            mov b, c
1735   0D87 FD AB         swp b
1736   0D89 D8            push b
1737   0D8A FD 27         mov b, g
1738   0D8C FD AB         swp b
1739   0D8E D8            push b
1740   0D8F 07 21 12      call print_signed_long
1741   0D92 51 04 00      add sp, 4
1742   0D95 0A 15 0E      jmp _if28_exit
1743   0D98             _if28_else:
1744   0D98             ;; if(*format_p == 'u') 
1745   0D98             _if29_cond:
1746   0D98 FA FD FF      lea d, [bp + -3] ; $format_p
1747   0D9B 2A            mov b, [d]
1748   0D9C 74            mov d, b
1749   0D9D 32            mov bl, [d]
1750   0D9E A7 00         mov bh, 0
1751   0DA0             ; START RELATIONAL
1752   0DA0 D7            push a
1753   0DA1 11            mov a, b
1754   0DA2 26 75 00      mov b, $75
1755   0DA5 B0            cmp a, b
1756   0DA6 FD 71         seq ; ==
1757   0DA8 E4            pop a
1758   0DA9             ; END RELATIONAL
1759   0DA9 C0 00 00      cmp b, 0
1760   0DAC C6 D3 0D      je _if29_else
1761   0DAF             _if29_true:
1762   0DAF             ;; print_unsigned_long(*(unsigned long *)p); 
1763   0DAF FA FF FF      lea d, [bp + -1] ; $p
1764   0DB2 2A            mov b, [d]
1765   0DB3 A7 00         mov bh, 0
1766   0DB5 38 00 00      mov c, 0
1767   0DB8 74            mov d, b
1768   0DB9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1769   0DBC FD 39         mov c, b ; And place it into C
1770   0DBE 2A            mov b, [d] ; Lower Word in B
1771   0DBF FD 79         mov g, b
1772   0DC1 28            mov b, c
1773   0DC2 FD AB         swp b
1774   0DC4 D8            push b
1775   0DC5 FD 27         mov b, g
1776   0DC7 FD AB         swp b
1777   0DC9 D8            push b
1778   0DCA 07 61 15      call print_unsigned_long
1779   0DCD 51 04 00      add sp, 4
1780   0DD0 0A 15 0E      jmp _if29_exit
1781   0DD3             _if29_else:
1782   0DD3             ;; if(*format_p == 'x') 
1783   0DD3             _if30_cond:
1784   0DD3 FA FD FF      lea d, [bp + -3] ; $format_p
1785   0DD6 2A            mov b, [d]
1786   0DD7 74            mov d, b
1787   0DD8 32            mov bl, [d]
1788   0DD9 A7 00         mov bh, 0
1789   0DDB             ; START RELATIONAL
1790   0DDB D7            push a
1791   0DDC 11            mov a, b
1792   0DDD 26 78 00      mov b, $78
1793   0DE0 B0            cmp a, b
1794   0DE1 FD 71         seq ; ==
1795   0DE3 E4            pop a
1796   0DE4             ; END RELATIONAL
1797   0DE4 C0 00 00      cmp b, 0
1798   0DE7 C6 09 0E      je _if30_else
1799   0DEA             _if30_true:
1800   0DEA             ;; printx32(*(long int *)p); 
1801   0DEA FA FF FF      lea d, [bp + -1] ; $p
1802   0DED 2A            mov b, [d]
1803   0DEE 74            mov d, b
1804   0DEF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1805   0DF2 FD 39         mov c, b ; And place it into C
1806   0DF4 2A            mov b, [d] ; Lower Word in B
1807   0DF5 FD 79         mov g, b
1808   0DF7 28            mov b, c
1809   0DF8 FD AB         swp b
1810   0DFA D8            push b
1811   0DFB FD 27         mov b, g
1812   0DFD FD AB         swp b
1813   0DFF D8            push b
1814   0E00 07 96 0F      call printx32
1815   0E03 51 04 00      add sp, 4
1816   0E06 0A 15 0E      jmp _if30_exit
1817   0E09             _if30_else:
1818   0E09             ;; err("Unexpected format in printf."); 
1819   0E09 26 07 20      mov b, _s3 ; "Unexpected format in printf."
1820   0E0C FD AB         swp b
1821   0E0E D8            push b
1822   0E0F 07 84 0F      call err
1823   0E12 51 02 00      add sp, 2
1824   0E15             _if30_exit:
1825   0E15             _if29_exit:
1826   0E15             _if28_exit:
1827   0E15             ;; p = p + 4; 
1828   0E15 FA FF FF      lea d, [bp + -1] ; $p
1829   0E18 DA            push d
1830   0E19 FA FF FF      lea d, [bp + -1] ; $p
1831   0E1C 2A            mov b, [d]
1832   0E1D             ; START TERMS
1833   0E1D D7            push a
1834   0E1E 11            mov a, b
1835   0E1F 26 04 00      mov b, $4
1836   0E22 56            add b, a
1837   0E23 E4            pop a
1838   0E24             ; END TERMS
1839   0E24 E7            pop d
1840   0E25 FD 43         mov [d], b
1841   0E27             ;; break; 
1842   0E27 0A 4D 0F      jmp _switch27_exit ; case break
1843   0E2A             _switch27_case2:
1844   0E2A             _switch27_case3:
1845   0E2A             ;; sp = sp + sprint_signed(sp, *(int*)p); 
1846   0E2A FA FB FF      lea d, [bp + -5] ; $sp
1847   0E2D DA            push d
1848   0E2E FA FB FF      lea d, [bp + -5] ; $sp
1849   0E31 2A            mov b, [d]
1850   0E32             ; START TERMS
1851   0E32 D7            push a
1852   0E33 11            mov a, b
1853   0E34 FA FF FF      lea d, [bp + -1] ; $p
1854   0E37 2A            mov b, [d]
1855   0E38 74            mov d, b
1856   0E39 2A            mov b, [d]
1857   0E3A FD AB         swp b
1858   0E3C D8            push b
1859   0E3D FA FB FF      lea d, [bp + -5] ; $sp
1860   0E40 2A            mov b, [d]
1861   0E41 FD AB         swp b
1862   0E43 D8            push b
1863   0E44 07 30 19      call sprint_signed
1864   0E47 51 04 00      add sp, 4
1865   0E4A 56            add b, a
1866   0E4B E4            pop a
1867   0E4C             ; END TERMS
1868   0E4C E7            pop d
1869   0E4D FD 43         mov [d], b
1870   0E4F             ;; p = p + 2; 
1871   0E4F FA FF FF      lea d, [bp + -1] ; $p
1872   0E52 DA            push d
1873   0E53 FA FF FF      lea d, [bp + -1] ; $p
1874   0E56 2A            mov b, [d]
1875   0E57             ; START TERMS
1876   0E57 D7            push a
1877   0E58 11            mov a, b
1878   0E59 26 02 00      mov b, $2
1879   0E5C 56            add b, a
1880   0E5D E4            pop a
1881   0E5E             ; END TERMS
1882   0E5E E7            pop d
1883   0E5F FD 43         mov [d], b
1884   0E61             ;; break; 
1885   0E61 0A 4D 0F      jmp _switch27_exit ; case break
1886   0E64             _switch27_case4:
1887   0E64             ;; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
1888   0E64 FA FB FF      lea d, [bp + -5] ; $sp
1889   0E67 DA            push d
1890   0E68 FA FB FF      lea d, [bp + -5] ; $sp
1891   0E6B 2A            mov b, [d]
1892   0E6C             ; START TERMS
1893   0E6C D7            push a
1894   0E6D 11            mov a, b
1895   0E6E FA FF FF      lea d, [bp + -1] ; $p
1896   0E71 2A            mov b, [d]
1897   0E72 74            mov d, b
1898   0E73 2A            mov b, [d]
1899   0E74 FD AB         swp b
1900   0E76 D8            push b
1901   0E77 FA FB FF      lea d, [bp + -5] ; $sp
1902   0E7A 2A            mov b, [d]
1903   0E7B FD AB         swp b
1904   0E7D D8            push b
1905   0E7E 07 5C 17      call sprint_unsigned
1906   0E81 51 04 00      add sp, 4
1907   0E84 56            add b, a
1908   0E85 E4            pop a
1909   0E86             ; END TERMS
1910   0E86 E7            pop d
1911   0E87 FD 43         mov [d], b
1912   0E89             ;; p = p + 2; 
1913   0E89 FA FF FF      lea d, [bp + -1] ; $p
1914   0E8C DA            push d
1915   0E8D FA FF FF      lea d, [bp + -1] ; $p
1916   0E90 2A            mov b, [d]
1917   0E91             ; START TERMS
1918   0E91 D7            push a
1919   0E92 11            mov a, b
1920   0E93 26 02 00      mov b, $2
1921   0E96 56            add b, a
1922   0E97 E4            pop a
1923   0E98             ; END TERMS
1924   0E98 E7            pop d
1925   0E99 FD 43         mov [d], b
1926   0E9B             ;; break; 
1927   0E9B 0A 4D 0F      jmp _switch27_exit ; case break
1928   0E9E             _switch27_case5:
1929   0E9E             
1930   0E9E             ; --- BEGIN INLINE ASM BLOCK
1931   0E9E FA FF FF      lea d, [bp + -1] ; $p
1932   0EA1 FD 2A         mov d, [d]
1933   0EA3 2A            mov b, [d]
1934   0EA4 07 C5 1D      call print_u16x
1935   0EA7             ; --- END INLINE ASM BLOCK
1936   0EA7             
1937   0EA7             ;; p = p + 2; 
1938   0EA7 FA FF FF      lea d, [bp + -1] ; $p
1939   0EAA DA            push d
1940   0EAB FA FF FF      lea d, [bp + -1] ; $p
1941   0EAE 2A            mov b, [d]
1942   0EAF             ; START TERMS
1943   0EAF D7            push a
1944   0EB0 11            mov a, b
1945   0EB1 26 02 00      mov b, $2
1946   0EB4 56            add b, a
1947   0EB5 E4            pop a
1948   0EB6             ; END TERMS
1949   0EB6 E7            pop d
1950   0EB7 FD 43         mov [d], b
1951   0EB9             ;; break; 
1952   0EB9 0A 4D 0F      jmp _switch27_exit ; case break
1953   0EBC             _switch27_case6:
1954   0EBC             ;; *sp++ = *p; 
1955   0EBC FA FB FF      lea d, [bp + -5] ; $sp
1956   0EBF 2A            mov b, [d]
1957   0EC0 FD 77         inc b
1958   0EC2 FA FB FF      lea d, [bp + -5] ; $sp
1959   0EC5 FD 43         mov [d], b
1960   0EC7 FD 7D         dec b
1961   0EC9 D8            push b
1962   0ECA FA FF FF      lea d, [bp + -1] ; $p
1963   0ECD 2A            mov b, [d]
1964   0ECE 74            mov d, b
1965   0ECF 32            mov bl, [d]
1966   0ED0 A7 00         mov bh, 0
1967   0ED2 E7            pop d
1968   0ED3 FD 3E         mov [d], bl
1969   0ED5             ;; p = p + 2; 
1970   0ED5 FA FF FF      lea d, [bp + -1] ; $p
1971   0ED8 DA            push d
1972   0ED9 FA FF FF      lea d, [bp + -1] ; $p
1973   0EDC 2A            mov b, [d]
1974   0EDD             ; START TERMS
1975   0EDD D7            push a
1976   0EDE 11            mov a, b
1977   0EDF 26 02 00      mov b, $2
1978   0EE2 56            add b, a
1979   0EE3 E4            pop a
1980   0EE4             ; END TERMS
1981   0EE4 E7            pop d
1982   0EE5 FD 43         mov [d], b
1983   0EE7             ;; break; 
1984   0EE7 0A 4D 0F      jmp _switch27_exit ; case break
1985   0EEA             _switch27_case7:
1986   0EEA             ;; int len = strlen(*(char **)p); 
1987   0EEA 52 02 00      sub sp, 2 ; len
1988   0EED             ; --- START LOCAL VAR INITIALIZATION
1989   0EED FA F9 FF      lea d, [bp + -7] ; $len
1990   0EF0 DA            push d
1991   0EF1 FA FF FF      lea d, [bp + -1] ; $p
1992   0EF4 2A            mov b, [d]
1993   0EF5 74            mov d, b
1994   0EF6 2A            mov b, [d]
1995   0EF7 FD AB         swp b
1996   0EF9 D8            push b
1997   0EFA 07 BA 05      call strlen
1998   0EFD 51 02 00      add sp, 2
1999   0F00 E7            pop d
2000   0F01 FD 43         mov [d], b
2001   0F03             ; --- END LOCAL VAR INITIALIZATION
2002   0F03             ;; strcpy(sp, *(char **)p); 
2003   0F03 FA FF FF      lea d, [bp + -1] ; $p
2004   0F06 2A            mov b, [d]
2005   0F07 74            mov d, b
2006   0F08 2A            mov b, [d]
2007   0F09 FD AB         swp b
2008   0F0B D8            push b
2009   0F0C FA FB FF      lea d, [bp + -5] ; $sp
2010   0F0F 2A            mov b, [d]
2011   0F10 FD AB         swp b
2012   0F12 D8            push b
2013   0F13 07 40 04      call strcpy
2014   0F16 51 04 00      add sp, 4
2015   0F19             ;; sp = sp + len; 
2016   0F19 FA FB FF      lea d, [bp + -5] ; $sp
2017   0F1C DA            push d
2018   0F1D FA FB FF      lea d, [bp + -5] ; $sp
2019   0F20 2A            mov b, [d]
2020   0F21             ; START TERMS
2021   0F21 D7            push a
2022   0F22 11            mov a, b
2023   0F23 FA F9 FF      lea d, [bp + -7] ; $len
2024   0F26 2A            mov b, [d]
2025   0F27 56            add b, a
2026   0F28 E4            pop a
2027   0F29             ; END TERMS
2028   0F29 E7            pop d
2029   0F2A FD 43         mov [d], b
2030   0F2C             ;; p = p + 2; 
2031   0F2C FA FF FF      lea d, [bp + -1] ; $p
2032   0F2F DA            push d
2033   0F30 FA FF FF      lea d, [bp + -1] ; $p
2034   0F33 2A            mov b, [d]
2035   0F34             ; START TERMS
2036   0F34 D7            push a
2037   0F35 11            mov a, b
2038   0F36 26 02 00      mov b, $2
2039   0F39 56            add b, a
2040   0F3A E4            pop a
2041   0F3B             ; END TERMS
2042   0F3B E7            pop d
2043   0F3C FD 43         mov [d], b
2044   0F3E             ;; break; 
2045   0F3E 0A 4D 0F      jmp _switch27_exit ; case break
2046   0F41             _switch27_default:
2047   0F41             ;; print("Error: Unknown argument type.\n"); 
2048   0F41 26 24 20      mov b, _s4 ; "Error: Unknown argument type.\n"
2049   0F44 FD AB         swp b
2050   0F46 D8            push b
2051   0F47 07 DA 1A      call print
2052   0F4A 51 02 00      add sp, 2
2053   0F4D             _switch27_exit:
2054   0F4D             ;; format_p++; 
2055   0F4D FA FD FF      lea d, [bp + -3] ; $format_p
2056   0F50 2A            mov b, [d]
2057   0F51 FD 77         inc b
2058   0F53 FA FD FF      lea d, [bp + -3] ; $format_p
2059   0F56 FD 43         mov [d], b
2060   0F58 FD 7D         dec b
2061   0F5A 0A 7F 0F      jmp _if26_exit
2062   0F5D             _if26_else:
2063   0F5D             ;; *sp++ = *format_p++; 
2064   0F5D FA FB FF      lea d, [bp + -5] ; $sp
2065   0F60 2A            mov b, [d]
2066   0F61 FD 77         inc b
2067   0F63 FA FB FF      lea d, [bp + -5] ; $sp
2068   0F66 FD 43         mov [d], b
2069   0F68 FD 7D         dec b
2070   0F6A D8            push b
2071   0F6B FA FD FF      lea d, [bp + -3] ; $format_p
2072   0F6E 2A            mov b, [d]
2073   0F6F FD 77         inc b
2074   0F71 FA FD FF      lea d, [bp + -3] ; $format_p
2075   0F74 FD 43         mov [d], b
2076   0F76 FD 7D         dec b
2077   0F78 74            mov d, b
2078   0F79 32            mov bl, [d]
2079   0F7A A7 00         mov bh, 0
2080   0F7C E7            pop d
2081   0F7D FD 3E         mov [d], bl
2082   0F7F             _if26_exit:
2083   0F7F             _if25_exit:
2084   0F7F             _for24_update:
2085   0F7F 0A C9 0C      jmp _for24_cond
2086   0F82             _for24_exit:
2087   0F82 F9            leave
2088   0F83 09            ret
2089   0F84             
2090   0F84             err:
2091   0F84 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2092   0F87             ;; print(e); 
2093   0F87 FA 05 00      lea d, [bp + 5] ; $e
2094   0F8A 2A            mov b, [d]
2095   0F8B FD AB         swp b
2096   0F8D D8            push b
2097   0F8E 07 DA 1A      call print
2098   0F91 51 02 00      add sp, 2
2099   0F94 F9            leave
2100   0F95 09            ret
2101   0F96             
2102   0F96             printx32:
2103   0F96 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2104   0F99             
2105   0F99             ; --- BEGIN INLINE ASM BLOCK
2106   0F99 FA 05 00      lea d, [bp + 5] ; $hex
2107   0F9C 2B 02 00      mov b, [d+2]
2108   0F9F 07 C5 1D      call print_u16x
2109   0FA2 2A            mov b, [d]
2110   0FA3 07 C5 1D      call print_u16x
2111   0FA6             ; --- END INLINE ASM BLOCK
2112   0FA6             
2113   0FA6 F9            leave
2114   0FA7 09            ret
2115   0FA8             
2116   0FA8             printx16:
2117   0FA8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2118   0FAB             
2119   0FAB             ; --- BEGIN INLINE ASM BLOCK
2120   0FAB FA 05 00      lea d, [bp + 5] ; $hex
2121   0FAE 2A            mov b, [d]
2122   0FAF 07 C5 1D      call print_u16x
2123   0FB2             ; --- END INLINE ASM BLOCK
2124   0FB2             
2125   0FB2 F9            leave
2126   0FB3 09            ret
2127   0FB4             
2128   0FB4             printx8:
2129   0FB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2130   0FB7             
2131   0FB7             ; --- BEGIN INLINE ASM BLOCK
2132   0FB7 FA 05 00      lea d, [bp + 5] ; $hex
2133   0FBA 32            mov bl, [d]
2134   0FBB 07 09 1E      call print_u8x
2135   0FBE             ; --- END INLINE ASM BLOCK
2136   0FBE             
2137   0FBE F9            leave
2138   0FBF 09            ret
2139   0FC0             
2140   0FC0             hex_str_to_int:
2141   0FC0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2142   0FC3             ;; int value = 0; 
2143   0FC3 52 02 00      sub sp, 2 ; value
2144   0FC6             ; --- START LOCAL VAR INITIALIZATION
2145   0FC6 FA FF FF      lea d, [bp + -1] ; $value
2146   0FC9 DA            push d
2147   0FCA 26 00 00      mov b, $0
2148   0FCD E7            pop d
2149   0FCE FD 43         mov [d], b
2150   0FD0             ; --- END LOCAL VAR INITIALIZATION
2151   0FD0             ;; int i; 
2152   0FD0 52 02 00      sub sp, 2 ; i
2153   0FD3             ;; char hex_char; 
2154   0FD3 52 01 00      sub sp, 1 ; hex_char
2155   0FD6             ;; int len; 
2156   0FD6 52 02 00      sub sp, 2 ; len
2157   0FD9             ;; len = strlen(hex_string); 
2158   0FD9 FA FA FF      lea d, [bp + -6] ; $len
2159   0FDC DA            push d
2160   0FDD FA 05 00      lea d, [bp + 5] ; $hex_string
2161   0FE0 2A            mov b, [d]
2162   0FE1 FD AB         swp b
2163   0FE3 D8            push b
2164   0FE4 07 BA 05      call strlen
2165   0FE7 51 02 00      add sp, 2
2166   0FEA E7            pop d
2167   0FEB FD 43         mov [d], b
2168   0FED             ;; for (i = 0; i < len; i++) { 
2169   0FED             _for31_init:
2170   0FED FA FD FF      lea d, [bp + -3] ; $i
2171   0FF0 DA            push d
2172   0FF1 26 00 00      mov b, $0
2173   0FF4 E7            pop d
2174   0FF5 FD 43         mov [d], b
2175   0FF7             _for31_cond:
2176   0FF7 FA FD FF      lea d, [bp + -3] ; $i
2177   0FFA 2A            mov b, [d]
2178   0FFB             ; START RELATIONAL
2179   0FFB D7            push a
2180   0FFC 11            mov a, b
2181   0FFD FA FA FF      lea d, [bp + -6] ; $len
2182   1000 2A            mov b, [d]
2183   1001 B0            cmp a, b
2184   1002 FD 73         slt ; < (signed)
2185   1004 E4            pop a
2186   1005             ; END RELATIONAL
2187   1005 C0 00 00      cmp b, 0
2188   1008 C6 0A 11      je _for31_exit
2189   100B             _for31_block:
2190   100B             ;; hex_char = hex_string[i]; 
2191   100B FA FC FF      lea d, [bp + -4] ; $hex_char
2192   100E DA            push d
2193   100F FA 05 00      lea d, [bp + 5] ; $hex_string
2194   1012 FD 2A         mov d, [d]
2195   1014 D7            push a
2196   1015 DA            push d
2197   1016 FA FD FF      lea d, [bp + -3] ; $i
2198   1019 2A            mov b, [d]
2199   101A E7            pop d
2200   101B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2201   101F E4            pop a
2202   1020 32            mov bl, [d]
2203   1021 A7 00         mov bh, 0
2204   1023 E7            pop d
2205   1024 FD 3E         mov [d], bl
2206   1026             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2207   1026             _if32_cond:
2208   1026 FA FC FF      lea d, [bp + -4] ; $hex_char
2209   1029 32            mov bl, [d]
2210   102A A7 00         mov bh, 0
2211   102C             ; START RELATIONAL
2212   102C D7            push a
2213   102D 11            mov a, b
2214   102E 26 61 00      mov b, $61
2215   1031 B0            cmp a, b
2216   1032 FD 80         sge ; >=
2217   1034 E4            pop a
2218   1035             ; END RELATIONAL
2219   1035             ; START LOGICAL AND
2220   1035 D7            push a
2221   1036 11            mov a, b
2222   1037 FA FC FF      lea d, [bp + -4] ; $hex_char
2223   103A 32            mov bl, [d]
2224   103B A7 00         mov bh, 0
2225   103D             ; START RELATIONAL
2226   103D D7            push a
2227   103E 11            mov a, b
2228   103F 26 66 00      mov b, $66
2229   1042 B0            cmp a, b
2230   1043 FD 74         sle ; <= (signed)
2231   1045 E4            pop a
2232   1046             ; END RELATIONAL
2233   1046 FD A7         sand a, b
2234   1048 E4            pop a
2235   1049             ; END LOGICAL AND
2236   1049 C0 00 00      cmp b, 0
2237   104C C6 7D 10      je _if32_else
2238   104F             _if32_true:
2239   104F             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2240   104F FA FF FF      lea d, [bp + -1] ; $value
2241   1052 DA            push d
2242   1053 FA FF FF      lea d, [bp + -1] ; $value
2243   1056 2A            mov b, [d]
2244   1057             ; START FACTORS
2245   1057 D7            push a
2246   1058 11            mov a, b
2247   1059 26 10 00      mov b, $10
2248   105C AC            mul a, b ; *
2249   105D 11            mov a, b
2250   105E 27            mov b, a
2251   105F E4            pop a
2252   1060             ; END FACTORS
2253   1060             ; START TERMS
2254   1060 D7            push a
2255   1061 11            mov a, b
2256   1062 FA FC FF      lea d, [bp + -4] ; $hex_char
2257   1065 32            mov bl, [d]
2258   1066 A7 00         mov bh, 0
2259   1068             ; START TERMS
2260   1068 D7            push a
2261   1069 11            mov a, b
2262   106A 26 61 00      mov b, $61
2263   106D 60            sub a, b
2264   106E 27            mov b, a
2265   106F 11            mov a, b
2266   1070 26 0A 00      mov b, $a
2267   1073 56            add b, a
2268   1074 E4            pop a
2269   1075             ; END TERMS
2270   1075 56            add b, a
2271   1076 E4            pop a
2272   1077             ; END TERMS
2273   1077 E7            pop d
2274   1078 FD 43         mov [d], b
2275   107A 0A FA 10      jmp _if32_exit
2276   107D             _if32_else:
2277   107D             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2278   107D             _if33_cond:
2279   107D FA FC FF      lea d, [bp + -4] ; $hex_char
2280   1080 32            mov bl, [d]
2281   1081 A7 00         mov bh, 0
2282   1083             ; START RELATIONAL
2283   1083 D7            push a
2284   1084 11            mov a, b
2285   1085 26 41 00      mov b, $41
2286   1088 B0            cmp a, b
2287   1089 FD 80         sge ; >=
2288   108B E4            pop a
2289   108C             ; END RELATIONAL
2290   108C             ; START LOGICAL AND
2291   108C D7            push a
2292   108D 11            mov a, b
2293   108E FA FC FF      lea d, [bp + -4] ; $hex_char
2294   1091 32            mov bl, [d]
2295   1092 A7 00         mov bh, 0
2296   1094             ; START RELATIONAL
2297   1094 D7            push a
2298   1095 11            mov a, b
2299   1096 26 46 00      mov b, $46
2300   1099 B0            cmp a, b
2301   109A FD 74         sle ; <= (signed)
2302   109C E4            pop a
2303   109D             ; END RELATIONAL
2304   109D FD A7         sand a, b
2305   109F E4            pop a
2306   10A0             ; END LOGICAL AND
2307   10A0 C0 00 00      cmp b, 0
2308   10A3 C6 D4 10      je _if33_else
2309   10A6             _if33_true:
2310   10A6             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2311   10A6 FA FF FF      lea d, [bp + -1] ; $value
2312   10A9 DA            push d
2313   10AA FA FF FF      lea d, [bp + -1] ; $value
2314   10AD 2A            mov b, [d]
2315   10AE             ; START FACTORS
2316   10AE D7            push a
2317   10AF 11            mov a, b
2318   10B0 26 10 00      mov b, $10
2319   10B3 AC            mul a, b ; *
2320   10B4 11            mov a, b
2321   10B5 27            mov b, a
2322   10B6 E4            pop a
2323   10B7             ; END FACTORS
2324   10B7             ; START TERMS
2325   10B7 D7            push a
2326   10B8 11            mov a, b
2327   10B9 FA FC FF      lea d, [bp + -4] ; $hex_char
2328   10BC 32            mov bl, [d]
2329   10BD A7 00         mov bh, 0
2330   10BF             ; START TERMS
2331   10BF D7            push a
2332   10C0 11            mov a, b
2333   10C1 26 41 00      mov b, $41
2334   10C4 60            sub a, b
2335   10C5 27            mov b, a
2336   10C6 11            mov a, b
2337   10C7 26 0A 00      mov b, $a
2338   10CA 56            add b, a
2339   10CB E4            pop a
2340   10CC             ; END TERMS
2341   10CC 56            add b, a
2342   10CD E4            pop a
2343   10CE             ; END TERMS
2344   10CE E7            pop d
2345   10CF FD 43         mov [d], b
2346   10D1 0A FA 10      jmp _if33_exit
2347   10D4             _if33_else:
2348   10D4             ;; value = (value * 16) + (hex_char - '0'); 
2349   10D4 FA FF FF      lea d, [bp + -1] ; $value
2350   10D7 DA            push d
2351   10D8 FA FF FF      lea d, [bp + -1] ; $value
2352   10DB 2A            mov b, [d]
2353   10DC             ; START FACTORS
2354   10DC D7            push a
2355   10DD 11            mov a, b
2356   10DE 26 10 00      mov b, $10
2357   10E1 AC            mul a, b ; *
2358   10E2 11            mov a, b
2359   10E3 27            mov b, a
2360   10E4 E4            pop a
2361   10E5             ; END FACTORS
2362   10E5             ; START TERMS
2363   10E5 D7            push a
2364   10E6 11            mov a, b
2365   10E7 FA FC FF      lea d, [bp + -4] ; $hex_char
2366   10EA 32            mov bl, [d]
2367   10EB A7 00         mov bh, 0
2368   10ED             ; START TERMS
2369   10ED D7            push a
2370   10EE 11            mov a, b
2371   10EF 26 30 00      mov b, $30
2372   10F2 60            sub a, b
2373   10F3 27            mov b, a
2374   10F4 E4            pop a
2375   10F5             ; END TERMS
2376   10F5 56            add b, a
2377   10F6 E4            pop a
2378   10F7             ; END TERMS
2379   10F7 E7            pop d
2380   10F8 FD 43         mov [d], b
2381   10FA             _if33_exit:
2382   10FA             _if32_exit:
2383   10FA             _for31_update:
2384   10FA FA FD FF      lea d, [bp + -3] ; $i
2385   10FD 2A            mov b, [d]
2386   10FE FD 77         inc b
2387   1100 FA FD FF      lea d, [bp + -3] ; $i
2388   1103 FD 43         mov [d], b
2389   1105 FD 7D         dec b
2390   1107 0A F7 0F      jmp _for31_cond
2391   110A             _for31_exit:
2392   110A             ;; return value; 
2393   110A FA FF FF      lea d, [bp + -1] ; $value
2394   110D 2A            mov b, [d]
2395   110E F9            leave
2396   110F 09            ret
2397   1110             
2398   1110             gets:
2399   1110 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2400   1113             
2401   1113             ; --- BEGIN INLINE ASM BLOCK
2402   1113 FA 05 00      lea d, [bp + 5] ; $s
2403   1116 15            mov a, [d]
2404   1117 3C            mov d, a
2405   1118 07 2A 1C      call _gets
2406   111B             ; --- END INLINE ASM BLOCK
2407   111B             
2408   111B             ;; return strlen(s); 
2409   111B FA 05 00      lea d, [bp + 5] ; $s
2410   111E 2A            mov b, [d]
2411   111F FD AB         swp b
2412   1121 D8            push b
2413   1122 07 BA 05      call strlen
2414   1125 51 02 00      add sp, 2
2415   1128 F9            leave
2416   1129 09            ret
2417   112A             
2418   112A             print_signed:
2419   112A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2420   112D             ;; char digits[5]; 
2421   112D 52 05 00      sub sp, 5 ; digits
2422   1130             ;; int i = 0; 
2423   1130 52 02 00      sub sp, 2 ; i
2424   1133             ; --- START LOCAL VAR INITIALIZATION
2425   1133 FA FA FF      lea d, [bp + -6] ; $i
2426   1136 DA            push d
2427   1137 26 00 00      mov b, $0
2428   113A E7            pop d
2429   113B FD 43         mov [d], b
2430   113D             ; --- END LOCAL VAR INITIALIZATION
2431   113D             ;; if (num < 0) { 
2432   113D             _if34_cond:
2433   113D FA 05 00      lea d, [bp + 5] ; $num
2434   1140 2A            mov b, [d]
2435   1141             ; START RELATIONAL
2436   1141 D7            push a
2437   1142 11            mov a, b
2438   1143 26 00 00      mov b, $0
2439   1146 B0            cmp a, b
2440   1147 FD 73         slt ; < (signed)
2441   1149 E4            pop a
2442   114A             ; END RELATIONAL
2443   114A C0 00 00      cmp b, 0
2444   114D C6 6A 11      je _if34_else
2445   1150             _if34_true:
2446   1150             ;; putchar('-'); 
2447   1150 26 2D 00      mov b, $2d
2448   1153 DD            push bl
2449   1154 07 92 1A      call putchar
2450   1157 51 01 00      add sp, 1
2451   115A             ;; num = -num; 
2452   115A FA 05 00      lea d, [bp + 5] ; $num
2453   115D DA            push d
2454   115E FA 05 00      lea d, [bp + 5] ; $num
2455   1161 2A            mov b, [d]
2456   1162 FD 97         neg b
2457   1164 E7            pop d
2458   1165 FD 43         mov [d], b
2459   1167 0A 8C 11      jmp _if34_exit
2460   116A             _if34_else:
2461   116A             ;; if (num == 0) { 
2462   116A             _if35_cond:
2463   116A FA 05 00      lea d, [bp + 5] ; $num
2464   116D 2A            mov b, [d]
2465   116E             ; START RELATIONAL
2466   116E D7            push a
2467   116F 11            mov a, b
2468   1170 26 00 00      mov b, $0
2469   1173 B0            cmp a, b
2470   1174 FD 71         seq ; ==
2471   1176 E4            pop a
2472   1177             ; END RELATIONAL
2473   1177 C0 00 00      cmp b, 0
2474   117A C6 8C 11      je _if35_exit
2475   117D             _if35_true:
2476   117D             ;; putchar('0'); 
2477   117D 26 30 00      mov b, $30
2478   1180 DD            push bl
2479   1181 07 92 1A      call putchar
2480   1184 51 01 00      add sp, 1
2481   1187             ;; return; 
2482   1187 F9            leave
2483   1188 09            ret
2484   1189 0A 8C 11      jmp _if35_exit
2485   118C             _if35_exit:
2486   118C             _if34_exit:
2487   118C             ;; while (num > 0) { 
2488   118C             _while36_cond:
2489   118C FA 05 00      lea d, [bp + 5] ; $num
2490   118F 2A            mov b, [d]
2491   1190             ; START RELATIONAL
2492   1190 D7            push a
2493   1191 11            mov a, b
2494   1192 26 00 00      mov b, $0
2495   1195 B0            cmp a, b
2496   1196 FD 7F         sgt ; >
2497   1198 E4            pop a
2498   1199             ; END RELATIONAL
2499   1199 C0 00 00      cmp b, 0
2500   119C C6 E6 11      je _while36_exit
2501   119F             _while36_block:
2502   119F             ;; digits[i] = '0' + (num % 10); 
2503   119F FA FC FF      lea d, [bp + -4] ; $digits
2504   11A2 D7            push a
2505   11A3 DA            push d
2506   11A4 FA FA FF      lea d, [bp + -6] ; $i
2507   11A7 2A            mov b, [d]
2508   11A8 E7            pop d
2509   11A9 5A            add d, b
2510   11AA E4            pop a
2511   11AB DA            push d
2512   11AC 26 30 00      mov b, $30
2513   11AF             ; START TERMS
2514   11AF D7            push a
2515   11B0 11            mov a, b
2516   11B1 FA 05 00      lea d, [bp + 5] ; $num
2517   11B4 2A            mov b, [d]
2518   11B5             ; START FACTORS
2519   11B5 D7            push a
2520   11B6 11            mov a, b
2521   11B7 26 0A 00      mov b, $a
2522   11BA AE            div a, b ; 
2523   11BB 11            mov a, b
2524   11BC 27            mov b, a
2525   11BD E4            pop a
2526   11BE             ; END FACTORS
2527   11BE 56            add b, a
2528   11BF E4            pop a
2529   11C0             ; END TERMS
2530   11C0 E7            pop d
2531   11C1 FD 3E         mov [d], bl
2532   11C3             ;; num = num / 10; 
2533   11C3 FA 05 00      lea d, [bp + 5] ; $num
2534   11C6 DA            push d
2535   11C7 FA 05 00      lea d, [bp + 5] ; $num
2536   11CA 2A            mov b, [d]
2537   11CB             ; START FACTORS
2538   11CB D7            push a
2539   11CC 11            mov a, b
2540   11CD 26 0A 00      mov b, $a
2541   11D0 AE            div a, b
2542   11D1 27            mov b, a
2543   11D2 E4            pop a
2544   11D3             ; END FACTORS
2545   11D3 E7            pop d
2546   11D4 FD 43         mov [d], b
2547   11D6             ;; i++; 
2548   11D6 FA FA FF      lea d, [bp + -6] ; $i
2549   11D9 2A            mov b, [d]
2550   11DA FD 77         inc b
2551   11DC FA FA FF      lea d, [bp + -6] ; $i
2552   11DF FD 43         mov [d], b
2553   11E1 FD 7D         dec b
2554   11E3 0A 8C 11      jmp _while36_cond
2555   11E6             _while36_exit:
2556   11E6             ;; while (i > 0) { 
2557   11E6             _while37_cond:
2558   11E6 FA FA FF      lea d, [bp + -6] ; $i
2559   11E9 2A            mov b, [d]
2560   11EA             ; START RELATIONAL
2561   11EA D7            push a
2562   11EB 11            mov a, b
2563   11EC 26 00 00      mov b, $0
2564   11EF B0            cmp a, b
2565   11F0 FD 7F         sgt ; >
2566   11F2 E4            pop a
2567   11F3             ; END RELATIONAL
2568   11F3 C0 00 00      cmp b, 0
2569   11F6 C6 1F 12      je _while37_exit
2570   11F9             _while37_block:
2571   11F9             ;; i--; 
2572   11F9 FA FA FF      lea d, [bp + -6] ; $i
2573   11FC 2A            mov b, [d]
2574   11FD FD 7D         dec b
2575   11FF FA FA FF      lea d, [bp + -6] ; $i
2576   1202 FD 43         mov [d], b
2577   1204 FD 77         inc b
2578   1206             ;; putchar(digits[i]); 
2579   1206 FA FC FF      lea d, [bp + -4] ; $digits
2580   1209 D7            push a
2581   120A DA            push d
2582   120B FA FA FF      lea d, [bp + -6] ; $i
2583   120E 2A            mov b, [d]
2584   120F E7            pop d
2585   1210 5A            add d, b
2586   1211 E4            pop a
2587   1212 32            mov bl, [d]
2588   1213 A7 00         mov bh, 0
2589   1215 DD            push bl
2590   1216 07 92 1A      call putchar
2591   1219 51 01 00      add sp, 1
2592   121C 0A E6 11      jmp _while37_cond
2593   121F             _while37_exit:
2594   121F F9            leave
2595   1220 09            ret
2596   1221             
2597   1221             print_signed_long:
2598   1221 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2599   1224             ;; char digits[10]; 
2600   1224 52 0A 00      sub sp, 10 ; digits
2601   1227             ;; int i = 0; 
2602   1227 52 02 00      sub sp, 2 ; i
2603   122A             ; --- START LOCAL VAR INITIALIZATION
2604   122A FA F5 FF      lea d, [bp + -11] ; $i
2605   122D DA            push d
2606   122E 26 00 00      mov b, $0
2607   1231 E7            pop d
2608   1232 FD 43         mov [d], b
2609   1234             ; --- END LOCAL VAR INITIALIZATION
2610   1234             ;; if (num < 0) { 
2611   1234             _if38_cond:
2612   1234 FA 05 00      lea d, [bp + 5] ; $num
2613   1237 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2614   123A FD 39         mov c, b ; And place it into C
2615   123C 2A            mov b, [d] ; Lower Word in B
2616   123D             ; START RELATIONAL
2617   123D D7            push a
2618   123E FD D8         push g
2619   1240 11            mov a, b
2620   1241 FD 7A         mov g, c
2621   1243 26 00 00      mov b, $0
2622   1246 38 00 00      mov c, 0
2623   1249 FD AF 00 00   cmp32 ga, cb
2623   124D 00 00 00 00 
2623   1251 00 00 00 00 
2623   1255 00 00 00 00 
2623   1259 00 00 00 00 
2623   125D 00 00 00 00 
2623   1261 00 00 00 00 
2623   1265 00 00 00 00 
2623   1269 00 00 00 00 
2623   126D 00 00 00 00 
2623   1271 00 00 00 00 
2623   1275 00 00 00 00 
2623   1279 00 00 00 00 
2623   127D 00 00 00 00 
2623   1281 00 00 00 00 
2623   1285 00 00 00 00 
2623   1289 00 00 00 00 
2623   128D 00 00 00 00 
2623   1291 00 00 00 00 
2623   1295 00 00 00 00 
2623   1299 00 00 00 00 
2623   129D 00 00 00 00 
2623   12A1 00 00 00 00 
2623   12A5 00 00 00 00 
2623   12A9 00 00 00 00 
2623   12AD 00 00 00 00 
2623   12B1 00 00 00 00 
2623   12B5 00 00 00 00 
2623   12B9 00 00 00 00 
2623   12BD 00 00 00 00 
2623   12C1 00 00 00 00 
2623   12C5 00 00 00 00 
2623   12C9 00 00 00 00 
2623   12CD 00 00 00 00 
2623   12D1 00 00 00 00 
2623   12D5 00 00 00 00 
2623   12D9 00 00 00 00 
2623   12DD 00 00 00 00 
2623   12E1 00 00 00 00 
2623   12E5 00 00 00 00 
2623   12E9 00 00 00 00 
2623   12ED 00 00 00 00 
2623   12F1 00 00 00 00 
2623   12F5 00 00 00 00 
2623   12F9 00 00 00 00 
2623   12FD 00 00 00 00 
2623   1301 00 00 00 00 
2623   1305 00 00 00 00 
2623   1309 00 00 00 00 
2623   130D 00 00 00 00 
2623   1311 00 00 00 00 
2623   1315 00 00 00 00 
2623   1319 00 00 00 00 
2623   131D 00 00 00 00 
2623   1321 00 00 00 00 
2623   1325 00 00 00 00 
2623   1329 00 00 00 00 
2623   132D 00 00 00 00 
2623   1331 00 00 00 00 
2623   1335 00 00 00 00 
2623   1339 00 00 00 00 
2623   133D 00 00 00 00 
2623   1341 00 00 00 00 
2623   1345 00 00 00 00 
2623   1349 00 
2624   134A FD 73         slt ; <
2625   134C FD F1         pop g
2626   134E E4            pop a
2627   134F             ; END RELATIONAL
2628   134F C0 00 00      cmp b, 0
2629   1352 C6 79 13      je _if38_else
2630   1355             _if38_true:
2631   1355             ;; putchar('-'); 
2632   1355 26 2D 00      mov b, $2d
2633   1358 DD            push bl
2634   1359 07 92 1A      call putchar
2635   135C 51 01 00      add sp, 1
2636   135F             ;; num = -num; 
2637   135F FA 05 00      lea d, [bp + 5] ; $num
2638   1362 DA            push d
2639   1363 FA 05 00      lea d, [bp + 5] ; $num
2640   1366 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2641   1369 FD 39         mov c, b ; And place it into C
2642   136B 2A            mov b, [d] ; Lower Word in B
2643   136C FD 97         neg b
2644   136E E7            pop d
2645   136F FD 43         mov [d], b
2646   1371 28            mov b, c
2647   1372 FD 44 02 00   mov [d + 2], b
2648   1376 0A A9 14      jmp _if38_exit
2649   1379             _if38_else:
2650   1379             ;; if (num == 0) { 
2651   1379             _if39_cond:
2652   1379 FA 05 00      lea d, [bp + 5] ; $num
2653   137C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2654   137F FD 39         mov c, b ; And place it into C
2655   1381 2A            mov b, [d] ; Lower Word in B
2656   1382             ; START RELATIONAL
2657   1382 D7            push a
2658   1383 FD D8         push g
2659   1385 11            mov a, b
2660   1386 FD 7A         mov g, c
2661   1388 26 00 00      mov b, $0
2662   138B 38 00 00      mov c, 0
2663   138E FD AF 00 00   cmp32 ga, cb
2663   1392 00 00 00 00 
2663   1396 00 00 00 00 
2663   139A 00 00 00 00 
2663   139E 00 00 00 00 
2663   13A2 00 00 00 00 
2663   13A6 00 00 00 00 
2663   13AA 00 00 00 00 
2663   13AE 00 00 00 00 
2663   13B2 00 00 00 00 
2663   13B6 00 00 00 00 
2663   13BA 00 00 00 00 
2663   13BE 00 00 00 00 
2663   13C2 00 00 00 00 
2663   13C6 00 00 00 00 
2663   13CA 00 00 00 00 
2663   13CE 00 00 00 00 
2663   13D2 00 00 00 00 
2663   13D6 00 00 00 00 
2663   13DA 00 00 00 00 
2663   13DE 00 00 00 00 
2663   13E2 00 00 00 00 
2663   13E6 00 00 00 00 
2663   13EA 00 00 00 00 
2663   13EE 00 00 00 00 
2663   13F2 00 00 00 00 
2663   13F6 00 00 00 00 
2663   13FA 00 00 00 00 
2663   13FE 00 00 00 00 
2663   1402 00 00 00 00 
2663   1406 00 00 00 00 
2663   140A 00 00 00 00 
2663   140E 00 00 00 00 
2663   1412 00 00 00 00 
2663   1416 00 00 00 00 
2663   141A 00 00 00 00 
2663   141E 00 00 00 00 
2663   1422 00 00 00 00 
2663   1426 00 00 00 00 
2663   142A 00 00 00 00 
2663   142E 00 00 00 00 
2663   1432 00 00 00 00 
2663   1436 00 00 00 00 
2663   143A 00 00 00 00 
2663   143E 00 00 00 00 
2663   1442 00 00 00 00 
2663   1446 00 00 00 00 
2663   144A 00 00 00 00 
2663   144E 00 00 00 00 
2663   1452 00 00 00 00 
2663   1456 00 00 00 00 
2663   145A 00 00 00 00 
2663   145E 00 00 00 00 
2663   1462 00 00 00 00 
2663   1466 00 00 00 00 
2663   146A 00 00 00 00 
2663   146E 00 00 00 00 
2663   1472 00 00 00 00 
2663   1476 00 00 00 00 
2663   147A 00 00 00 00 
2663   147E 00 00 00 00 
2663   1482 00 00 00 00 
2663   1486 00 00 00 00 
2663   148A 00 00 00 00 
2663   148E 00 
2664   148F FD 71         seq ; ==
2665   1491 FD F1         pop g
2666   1493 E4            pop a
2667   1494             ; END RELATIONAL
2668   1494 C0 00 00      cmp b, 0
2669   1497 C6 A9 14      je _if39_exit
2670   149A             _if39_true:
2671   149A             ;; putchar('0'); 
2672   149A 26 30 00      mov b, $30
2673   149D DD            push bl
2674   149E 07 92 1A      call putchar
2675   14A1 51 01 00      add sp, 1
2676   14A4             ;; return; 
2677   14A4 F9            leave
2678   14A5 09            ret
2679   14A6 0A A9 14      jmp _if39_exit
2680   14A9             _if39_exit:
2681   14A9             _if38_exit:
2682   14A9             ;; while (num > 0) { 
2683   14A9             _while40_cond:
2684   14A9 FA 05 00      lea d, [bp + 5] ; $num
2685   14AC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2686   14AF FD 39         mov c, b ; And place it into C
2687   14B1 2A            mov b, [d] ; Lower Word in B
2688   14B2             ; START RELATIONAL
2689   14B2 D7            push a
2690   14B3 FD D8         push g
2691   14B5 11            mov a, b
2692   14B6 FD 7A         mov g, c
2693   14B8 26 00 00      mov b, $0
2694   14BB 38 00 00      mov c, 0
2695   14BE FD 7F         sgt
2696   14C0 FD F1         pop g
2697   14C2 E4            pop a
2698   14C3             ; END RELATIONAL
2699   14C3 C0 00 00      cmp b, 0
2700   14C6 C6 26 15      je _while40_exit
2701   14C9             _while40_block:
2702   14C9             ;; digits[i] = '0' + (num % 10); 
2703   14C9 FA F7 FF      lea d, [bp + -9] ; $digits
2704   14CC D7            push a
2705   14CD DA            push d
2706   14CE FA F5 FF      lea d, [bp + -11] ; $i
2707   14D1 2A            mov b, [d]
2708   14D2 E7            pop d
2709   14D3 5A            add d, b
2710   14D4 E4            pop a
2711   14D5 DA            push d
2712   14D6 26 30 00      mov b, $30
2713   14D9             ; START TERMS
2714   14D9 D7            push a
2715   14DA 11            mov a, b
2716   14DB FA 05 00      lea d, [bp + 5] ; $num
2717   14DE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2718   14E1 FD 39         mov c, b ; And place it into C
2719   14E3 2A            mov b, [d] ; Lower Word in B
2720   14E4             ; START FACTORS
2721   14E4 D7            push a
2722   14E5 11            mov a, b
2723   14E6 26 0A 00      mov b, $a
2724   14E9 AE            div a, b ; 
2725   14EA 11            mov a, b
2726   14EB 27            mov b, a
2727   14EC E4            pop a
2728   14ED             ; END FACTORS
2729   14ED 54            add a, b
2730   14EE D7            push a
2731   14EF FD 12         mov a, g
2732   14F1 28            mov b, c
2733   14F2 5C            adc a, b
2734   14F3 39            mov c, a
2735   14F4 E5            pop b
2736   14F5 E4            pop a
2737   14F6             ; END TERMS
2738   14F6 E7            pop d
2739   14F7 FD 3E         mov [d], bl
2740   14F9             ;; num = num / 10; 
2741   14F9 FA 05 00      lea d, [bp + 5] ; $num
2742   14FC DA            push d
2743   14FD FA 05 00      lea d, [bp + 5] ; $num
2744   1500 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2745   1503 FD 39         mov c, b ; And place it into C
2746   1505 2A            mov b, [d] ; Lower Word in B
2747   1506             ; START FACTORS
2748   1506 D7            push a
2749   1507 11            mov a, b
2750   1508 26 0A 00      mov b, $a
2751   150B AE            div a, b
2752   150C 27            mov b, a
2753   150D E4            pop a
2754   150E             ; END FACTORS
2755   150E E7            pop d
2756   150F FD 43         mov [d], b
2757   1511 28            mov b, c
2758   1512 FD 44 02 00   mov [d + 2], b
2759   1516             ;; i++; 
2760   1516 FA F5 FF      lea d, [bp + -11] ; $i
2761   1519 2A            mov b, [d]
2762   151A FD 77         inc b
2763   151C FA F5 FF      lea d, [bp + -11] ; $i
2764   151F FD 43         mov [d], b
2765   1521 FD 7D         dec b
2766   1523 0A A9 14      jmp _while40_cond
2767   1526             _while40_exit:
2768   1526             ;; while (i > 0) { 
2769   1526             _while41_cond:
2770   1526 FA F5 FF      lea d, [bp + -11] ; $i
2771   1529 2A            mov b, [d]
2772   152A             ; START RELATIONAL
2773   152A D7            push a
2774   152B 11            mov a, b
2775   152C 26 00 00      mov b, $0
2776   152F B0            cmp a, b
2777   1530 FD 7F         sgt ; >
2778   1532 E4            pop a
2779   1533             ; END RELATIONAL
2780   1533 C0 00 00      cmp b, 0
2781   1536 C6 5F 15      je _while41_exit
2782   1539             _while41_block:
2783   1539             ;; i--; 
2784   1539 FA F5 FF      lea d, [bp + -11] ; $i
2785   153C 2A            mov b, [d]
2786   153D FD 7D         dec b
2787   153F FA F5 FF      lea d, [bp + -11] ; $i
2788   1542 FD 43         mov [d], b
2789   1544 FD 77         inc b
2790   1546             ;; putchar(digits[i]); 
2791   1546 FA F7 FF      lea d, [bp + -9] ; $digits
2792   1549 D7            push a
2793   154A DA            push d
2794   154B FA F5 FF      lea d, [bp + -11] ; $i
2795   154E 2A            mov b, [d]
2796   154F E7            pop d
2797   1550 5A            add d, b
2798   1551 E4            pop a
2799   1552 32            mov bl, [d]
2800   1553 A7 00         mov bh, 0
2801   1555 DD            push bl
2802   1556 07 92 1A      call putchar
2803   1559 51 01 00      add sp, 1
2804   155C 0A 26 15      jmp _while41_cond
2805   155F             _while41_exit:
2806   155F F9            leave
2807   1560 09            ret
2808   1561             
2809   1561             print_unsigned_long:
2810   1561 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2811   1564             ;; char digits[10]; 
2812   1564 52 0A 00      sub sp, 10 ; digits
2813   1567             ;; int i; 
2814   1567 52 02 00      sub sp, 2 ; i
2815   156A             ;; i = 0; 
2816   156A FA F5 FF      lea d, [bp + -11] ; $i
2817   156D DA            push d
2818   156E 26 00 00      mov b, $0
2819   1571 E7            pop d
2820   1572 FD 43         mov [d], b
2821   1574             ;; if(num == 0){ 
2822   1574             _if42_cond:
2823   1574 FA 05 00      lea d, [bp + 5] ; $num
2824   1577 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2825   157A FD 39         mov c, b ; And place it into C
2826   157C 2A            mov b, [d] ; Lower Word in B
2827   157D             ; START RELATIONAL
2828   157D D7            push a
2829   157E FD D8         push g
2830   1580 11            mov a, b
2831   1581 FD 7A         mov g, c
2832   1583 26 00 00      mov b, $0
2833   1586 38 00 00      mov c, 0
2834   1589 FD AF 00 00   cmp32 ga, cb
2834   158D 00 00 00 00 
2834   1591 00 00 00 00 
2834   1595 00 00 00 00 
2834   1599 00 00 00 00 
2834   159D 00 00 00 00 
2834   15A1 00 00 00 00 
2834   15A5 00 00 00 00 
2834   15A9 00 00 00 00 
2834   15AD 00 00 00 00 
2834   15B1 00 00 00 00 
2834   15B5 00 00 00 00 
2834   15B9 00 00 00 00 
2834   15BD 00 00 00 00 
2834   15C1 00 00 00 00 
2834   15C5 00 00 00 00 
2834   15C9 00 00 00 00 
2834   15CD 00 00 00 00 
2834   15D1 00 00 00 00 
2834   15D5 00 00 00 00 
2834   15D9 00 00 00 00 
2834   15DD 00 00 00 00 
2834   15E1 00 00 00 00 
2834   15E5 00 00 00 00 
2834   15E9 00 00 00 00 
2834   15ED 00 00 00 00 
2834   15F1 00 00 00 00 
2834   15F5 00 00 00 00 
2834   15F9 00 00 00 00 
2834   15FD 00 00 00 00 
2834   1601 00 00 00 00 
2834   1605 00 00 00 00 
2834   1609 00 00 00 00 
2834   160D 00 00 00 00 
2834   1611 00 00 00 00 
2834   1615 00 00 00 00 
2834   1619 00 00 00 00 
2834   161D 00 00 00 00 
2834   1621 00 00 00 00 
2834   1625 00 00 00 00 
2834   1629 00 00 00 00 
2834   162D 00 00 00 00 
2834   1631 00 00 00 00 
2834   1635 00 00 00 00 
2834   1639 00 00 00 00 
2834   163D 00 00 00 00 
2834   1641 00 00 00 00 
2834   1645 00 00 00 00 
2834   1649 00 00 00 00 
2834   164D 00 00 00 00 
2834   1651 00 00 00 00 
2834   1655 00 00 00 00 
2834   1659 00 00 00 00 
2834   165D 00 00 00 00 
2834   1661 00 00 00 00 
2834   1665 00 00 00 00 
2834   1669 00 00 00 00 
2834   166D 00 00 00 00 
2834   1671 00 00 00 00 
2834   1675 00 00 00 00 
2834   1679 00 00 00 00 
2834   167D 00 00 00 00 
2834   1681 00 00 00 00 
2834   1685 00 00 00 00 
2834   1689 00 
2835   168A FD 71         seq ; ==
2836   168C FD F1         pop g
2837   168E E4            pop a
2838   168F             ; END RELATIONAL
2839   168F C0 00 00      cmp b, 0
2840   1692 C6 A4 16      je _if42_exit
2841   1695             _if42_true:
2842   1695             ;; putchar('0'); 
2843   1695 26 30 00      mov b, $30
2844   1698 DD            push bl
2845   1699 07 92 1A      call putchar
2846   169C 51 01 00      add sp, 1
2847   169F             ;; return; 
2848   169F F9            leave
2849   16A0 09            ret
2850   16A1 0A A4 16      jmp _if42_exit
2851   16A4             _if42_exit:
2852   16A4             ;; while (num > 0) { 
2853   16A4             _while43_cond:
2854   16A4 FA 05 00      lea d, [bp + 5] ; $num
2855   16A7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2856   16AA FD 39         mov c, b ; And place it into C
2857   16AC 2A            mov b, [d] ; Lower Word in B
2858   16AD             ; START RELATIONAL
2859   16AD D7            push a
2860   16AE FD D8         push g
2861   16B0 11            mov a, b
2862   16B1 FD 7A         mov g, c
2863   16B3 26 00 00      mov b, $0
2864   16B6 38 00 00      mov c, 0
2865   16B9 FD 81         sgu
2866   16BB FD F1         pop g
2867   16BD E4            pop a
2868   16BE             ; END RELATIONAL
2869   16BE C0 00 00      cmp b, 0
2870   16C1 C6 21 17      je _while43_exit
2871   16C4             _while43_block:
2872   16C4             ;; digits[i] = '0' + (num % 10); 
2873   16C4 FA F7 FF      lea d, [bp + -9] ; $digits
2874   16C7 D7            push a
2875   16C8 DA            push d
2876   16C9 FA F5 FF      lea d, [bp + -11] ; $i
2877   16CC 2A            mov b, [d]
2878   16CD E7            pop d
2879   16CE 5A            add d, b
2880   16CF E4            pop a
2881   16D0 DA            push d
2882   16D1 26 30 00      mov b, $30
2883   16D4             ; START TERMS
2884   16D4 D7            push a
2885   16D5 11            mov a, b
2886   16D6 FA 05 00      lea d, [bp + 5] ; $num
2887   16D9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2888   16DC FD 39         mov c, b ; And place it into C
2889   16DE 2A            mov b, [d] ; Lower Word in B
2890   16DF             ; START FACTORS
2891   16DF D7            push a
2892   16E0 11            mov a, b
2893   16E1 26 0A 00      mov b, $a
2894   16E4 AE            div a, b ; 
2895   16E5 11            mov a, b
2896   16E6 27            mov b, a
2897   16E7 E4            pop a
2898   16E8             ; END FACTORS
2899   16E8 54            add a, b
2900   16E9 D7            push a
2901   16EA FD 12         mov a, g
2902   16EC 28            mov b, c
2903   16ED 5C            adc a, b
2904   16EE 39            mov c, a
2905   16EF E5            pop b
2906   16F0 E4            pop a
2907   16F1             ; END TERMS
2908   16F1 E7            pop d
2909   16F2 FD 3E         mov [d], bl
2910   16F4             ;; num = num / 10; 
2911   16F4 FA 05 00      lea d, [bp + 5] ; $num
2912   16F7 DA            push d
2913   16F8 FA 05 00      lea d, [bp + 5] ; $num
2914   16FB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2915   16FE FD 39         mov c, b ; And place it into C
2916   1700 2A            mov b, [d] ; Lower Word in B
2917   1701             ; START FACTORS
2918   1701 D7            push a
2919   1702 11            mov a, b
2920   1703 26 0A 00      mov b, $a
2921   1706 AE            div a, b
2922   1707 27            mov b, a
2923   1708 E4            pop a
2924   1709             ; END FACTORS
2925   1709 E7            pop d
2926   170A FD 43         mov [d], b
2927   170C 28            mov b, c
2928   170D FD 44 02 00   mov [d + 2], b
2929   1711             ;; i++; 
2930   1711 FA F5 FF      lea d, [bp + -11] ; $i
2931   1714 2A            mov b, [d]
2932   1715 FD 77         inc b
2933   1717 FA F5 FF      lea d, [bp + -11] ; $i
2934   171A FD 43         mov [d], b
2935   171C FD 7D         dec b
2936   171E 0A A4 16      jmp _while43_cond
2937   1721             _while43_exit:
2938   1721             ;; while (i > 0) { 
2939   1721             _while44_cond:
2940   1721 FA F5 FF      lea d, [bp + -11] ; $i
2941   1724 2A            mov b, [d]
2942   1725             ; START RELATIONAL
2943   1725 D7            push a
2944   1726 11            mov a, b
2945   1727 26 00 00      mov b, $0
2946   172A B0            cmp a, b
2947   172B FD 7F         sgt ; >
2948   172D E4            pop a
2949   172E             ; END RELATIONAL
2950   172E C0 00 00      cmp b, 0
2951   1731 C6 5A 17      je _while44_exit
2952   1734             _while44_block:
2953   1734             ;; i--; 
2954   1734 FA F5 FF      lea d, [bp + -11] ; $i
2955   1737 2A            mov b, [d]
2956   1738 FD 7D         dec b
2957   173A FA F5 FF      lea d, [bp + -11] ; $i
2958   173D FD 43         mov [d], b
2959   173F FD 77         inc b
2960   1741             ;; putchar(digits[i]); 
2961   1741 FA F7 FF      lea d, [bp + -9] ; $digits
2962   1744 D7            push a
2963   1745 DA            push d
2964   1746 FA F5 FF      lea d, [bp + -11] ; $i
2965   1749 2A            mov b, [d]
2966   174A E7            pop d
2967   174B 5A            add d, b
2968   174C E4            pop a
2969   174D 32            mov bl, [d]
2970   174E A7 00         mov bh, 0
2971   1750 DD            push bl
2972   1751 07 92 1A      call putchar
2973   1754 51 01 00      add sp, 1
2974   1757 0A 21 17      jmp _while44_cond
2975   175A             _while44_exit:
2976   175A F9            leave
2977   175B 09            ret
2978   175C             
2979   175C             sprint_unsigned:
2980   175C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2981   175F             ;; char digits[5]; 
2982   175F 52 05 00      sub sp, 5 ; digits
2983   1762             ;; int i; 
2984   1762 52 02 00      sub sp, 2 ; i
2985   1765             ;; int len = 0; 
2986   1765 52 02 00      sub sp, 2 ; len
2987   1768             ; --- START LOCAL VAR INITIALIZATION
2988   1768 FA F8 FF      lea d, [bp + -8] ; $len
2989   176B DA            push d
2990   176C 26 00 00      mov b, $0
2991   176F E7            pop d
2992   1770 FD 43         mov [d], b
2993   1772             ; --- END LOCAL VAR INITIALIZATION
2994   1772             ;; i = 0; 
2995   1772 FA FA FF      lea d, [bp + -6] ; $i
2996   1775 DA            push d
2997   1776 26 00 00      mov b, $0
2998   1779 E7            pop d
2999   177A FD 43         mov [d], b
3000   177C             ;; if(num == 0){ 
3001   177C             _if45_cond:
3002   177C FA 07 00      lea d, [bp + 7] ; $num
3003   177F 2A            mov b, [d]
3004   1780             ; START RELATIONAL
3005   1780 D7            push a
3006   1781 11            mov a, b
3007   1782 26 00 00      mov b, $0
3008   1785 B0            cmp a, b
3009   1786 FD 71         seq ; ==
3010   1788 E4            pop a
3011   1789             ; END RELATIONAL
3012   1789 C0 00 00      cmp b, 0
3013   178C C6 AB 17      je _if45_exit
3014   178F             _if45_true:
3015   178F             ;; *dest++ = '0'; 
3016   178F FA 05 00      lea d, [bp + 5] ; $dest
3017   1792 2A            mov b, [d]
3018   1793 FD 77         inc b
3019   1795 FA 05 00      lea d, [bp + 5] ; $dest
3020   1798 FD 43         mov [d], b
3021   179A FD 7D         dec b
3022   179C D8            push b
3023   179D 26 30 00      mov b, $30
3024   17A0 E7            pop d
3025   17A1 FD 3E         mov [d], bl
3026   17A3             ;; return 1; 
3027   17A3 26 01 00      mov b, $1
3028   17A6 F9            leave
3029   17A7 09            ret
3030   17A8 0A AB 17      jmp _if45_exit
3031   17AB             _if45_exit:
3032   17AB             ;; while (num > 0) { 
3033   17AB             _while46_cond:
3034   17AB FA 07 00      lea d, [bp + 7] ; $num
3035   17AE 2A            mov b, [d]
3036   17AF             ; START RELATIONAL
3037   17AF D7            push a
3038   17B0 11            mov a, b
3039   17B1 26 00 00      mov b, $0
3040   17B4 B0            cmp a, b
3041   17B5 FD 81         sgu ; > (unsigned)
3042   17B7 E4            pop a
3043   17B8             ; END RELATIONAL
3044   17B8 C0 00 00      cmp b, 0
3045   17BB C6 05 18      je _while46_exit
3046   17BE             _while46_block:
3047   17BE             ;; digits[i] = '0' + (num % 10); 
3048   17BE FA FC FF      lea d, [bp + -4] ; $digits
3049   17C1 D7            push a
3050   17C2 DA            push d
3051   17C3 FA FA FF      lea d, [bp + -6] ; $i
3052   17C6 2A            mov b, [d]
3053   17C7 E7            pop d
3054   17C8 5A            add d, b
3055   17C9 E4            pop a
3056   17CA DA            push d
3057   17CB 26 30 00      mov b, $30
3058   17CE             ; START TERMS
3059   17CE D7            push a
3060   17CF 11            mov a, b
3061   17D0 FA 07 00      lea d, [bp + 7] ; $num
3062   17D3 2A            mov b, [d]
3063   17D4             ; START FACTORS
3064   17D4 D7            push a
3065   17D5 11            mov a, b
3066   17D6 26 0A 00      mov b, $a
3067   17D9 AE            div a, b ; 
3068   17DA 11            mov a, b
3069   17DB 27            mov b, a
3070   17DC E4            pop a
3071   17DD             ; END FACTORS
3072   17DD 56            add b, a
3073   17DE E4            pop a
3074   17DF             ; END TERMS
3075   17DF E7            pop d
3076   17E0 FD 3E         mov [d], bl
3077   17E2             ;; num = num / 10; 
3078   17E2 FA 07 00      lea d, [bp + 7] ; $num
3079   17E5 DA            push d
3080   17E6 FA 07 00      lea d, [bp + 7] ; $num
3081   17E9 2A            mov b, [d]
3082   17EA             ; START FACTORS
3083   17EA D7            push a
3084   17EB 11            mov a, b
3085   17EC 26 0A 00      mov b, $a
3086   17EF AE            div a, b
3087   17F0 27            mov b, a
3088   17F1 E4            pop a
3089   17F2             ; END FACTORS
3090   17F2 E7            pop d
3091   17F3 FD 43         mov [d], b
3092   17F5             ;; i++; 
3093   17F5 FA FA FF      lea d, [bp + -6] ; $i
3094   17F8 2A            mov b, [d]
3095   17F9 FD 77         inc b
3096   17FB FA FA FF      lea d, [bp + -6] ; $i
3097   17FE FD 43         mov [d], b
3098   1800 FD 7D         dec b
3099   1802 0A AB 17      jmp _while46_cond
3100   1805             _while46_exit:
3101   1805             ;; while (i > 0) { 
3102   1805             _while47_cond:
3103   1805 FA FA FF      lea d, [bp + -6] ; $i
3104   1808 2A            mov b, [d]
3105   1809             ; START RELATIONAL
3106   1809 D7            push a
3107   180A 11            mov a, b
3108   180B 26 00 00      mov b, $0
3109   180E B0            cmp a, b
3110   180F FD 7F         sgt ; >
3111   1811 E4            pop a
3112   1812             ; END RELATIONAL
3113   1812 C0 00 00      cmp b, 0
3114   1815 C6 55 18      je _while47_exit
3115   1818             _while47_block:
3116   1818             ;; i--; 
3117   1818 FA FA FF      lea d, [bp + -6] ; $i
3118   181B 2A            mov b, [d]
3119   181C FD 7D         dec b
3120   181E FA FA FF      lea d, [bp + -6] ; $i
3121   1821 FD 43         mov [d], b
3122   1823 FD 77         inc b
3123   1825             ;; *dest++ = digits[i]; 
3124   1825 FA 05 00      lea d, [bp + 5] ; $dest
3125   1828 2A            mov b, [d]
3126   1829 FD 77         inc b
3127   182B FA 05 00      lea d, [bp + 5] ; $dest
3128   182E FD 43         mov [d], b
3129   1830 FD 7D         dec b
3130   1832 D8            push b
3131   1833 FA FC FF      lea d, [bp + -4] ; $digits
3132   1836 D7            push a
3133   1837 DA            push d
3134   1838 FA FA FF      lea d, [bp + -6] ; $i
3135   183B 2A            mov b, [d]
3136   183C E7            pop d
3137   183D 5A            add d, b
3138   183E E4            pop a
3139   183F 32            mov bl, [d]
3140   1840 A7 00         mov bh, 0
3141   1842 E7            pop d
3142   1843 FD 3E         mov [d], bl
3143   1845             ;; len++; 
3144   1845 FA F8 FF      lea d, [bp + -8] ; $len
3145   1848 2A            mov b, [d]
3146   1849 FD 77         inc b
3147   184B FA F8 FF      lea d, [bp + -8] ; $len
3148   184E FD 43         mov [d], b
3149   1850 FD 7D         dec b
3150   1852 0A 05 18      jmp _while47_cond
3151   1855             _while47_exit:
3152   1855             ;; *dest = '\0'; 
3153   1855 FA 05 00      lea d, [bp + 5] ; $dest
3154   1858 2A            mov b, [d]
3155   1859 D8            push b
3156   185A 26 00 00      mov b, $0
3157   185D E7            pop d
3158   185E FD 3E         mov [d], bl
3159   1860             ;; return len; 
3160   1860 FA F8 FF      lea d, [bp + -8] ; $len
3161   1863 2A            mov b, [d]
3162   1864 F9            leave
3163   1865 09            ret
3164   1866             
3165   1866             print_unsigned:
3166   1866 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3167   1869             ;; char digits[5]; 
3168   1869 52 05 00      sub sp, 5 ; digits
3169   186C             ;; int i; 
3170   186C 52 02 00      sub sp, 2 ; i
3171   186F             ;; i = 0; 
3172   186F FA FA FF      lea d, [bp + -6] ; $i
3173   1872 DA            push d
3174   1873 26 00 00      mov b, $0
3175   1876 E7            pop d
3176   1877 FD 43         mov [d], b
3177   1879             ;; if(num == 0){ 
3178   1879             _if48_cond:
3179   1879 FA 05 00      lea d, [bp + 5] ; $num
3180   187C 2A            mov b, [d]
3181   187D             ; START RELATIONAL
3182   187D D7            push a
3183   187E 11            mov a, b
3184   187F 26 00 00      mov b, $0
3185   1882 B0            cmp a, b
3186   1883 FD 71         seq ; ==
3187   1885 E4            pop a
3188   1886             ; END RELATIONAL
3189   1886 C0 00 00      cmp b, 0
3190   1889 C6 9B 18      je _if48_exit
3191   188C             _if48_true:
3192   188C             ;; putchar('0'); 
3193   188C 26 30 00      mov b, $30
3194   188F DD            push bl
3195   1890 07 92 1A      call putchar
3196   1893 51 01 00      add sp, 1
3197   1896             ;; return; 
3198   1896 F9            leave
3199   1897 09            ret
3200   1898 0A 9B 18      jmp _if48_exit
3201   189B             _if48_exit:
3202   189B             ;; while (num > 0) { 
3203   189B             _while49_cond:
3204   189B FA 05 00      lea d, [bp + 5] ; $num
3205   189E 2A            mov b, [d]
3206   189F             ; START RELATIONAL
3207   189F D7            push a
3208   18A0 11            mov a, b
3209   18A1 26 00 00      mov b, $0
3210   18A4 B0            cmp a, b
3211   18A5 FD 81         sgu ; > (unsigned)
3212   18A7 E4            pop a
3213   18A8             ; END RELATIONAL
3214   18A8 C0 00 00      cmp b, 0
3215   18AB C6 F5 18      je _while49_exit
3216   18AE             _while49_block:
3217   18AE             ;; digits[i] = '0' + (num % 10); 
3218   18AE FA FC FF      lea d, [bp + -4] ; $digits
3219   18B1 D7            push a
3220   18B2 DA            push d
3221   18B3 FA FA FF      lea d, [bp + -6] ; $i
3222   18B6 2A            mov b, [d]
3223   18B7 E7            pop d
3224   18B8 5A            add d, b
3225   18B9 E4            pop a
3226   18BA DA            push d
3227   18BB 26 30 00      mov b, $30
3228   18BE             ; START TERMS
3229   18BE D7            push a
3230   18BF 11            mov a, b
3231   18C0 FA 05 00      lea d, [bp + 5] ; $num
3232   18C3 2A            mov b, [d]
3233   18C4             ; START FACTORS
3234   18C4 D7            push a
3235   18C5 11            mov a, b
3236   18C6 26 0A 00      mov b, $a
3237   18C9 AE            div a, b ; 
3238   18CA 11            mov a, b
3239   18CB 27            mov b, a
3240   18CC E4            pop a
3241   18CD             ; END FACTORS
3242   18CD 56            add b, a
3243   18CE E4            pop a
3244   18CF             ; END TERMS
3245   18CF E7            pop d
3246   18D0 FD 3E         mov [d], bl
3247   18D2             ;; num = num / 10; 
3248   18D2 FA 05 00      lea d, [bp + 5] ; $num
3249   18D5 DA            push d
3250   18D6 FA 05 00      lea d, [bp + 5] ; $num
3251   18D9 2A            mov b, [d]
3252   18DA             ; START FACTORS
3253   18DA D7            push a
3254   18DB 11            mov a, b
3255   18DC 26 0A 00      mov b, $a
3256   18DF AE            div a, b
3257   18E0 27            mov b, a
3258   18E1 E4            pop a
3259   18E2             ; END FACTORS
3260   18E2 E7            pop d
3261   18E3 FD 43         mov [d], b
3262   18E5             ;; i++; 
3263   18E5 FA FA FF      lea d, [bp + -6] ; $i
3264   18E8 2A            mov b, [d]
3265   18E9 FD 77         inc b
3266   18EB FA FA FF      lea d, [bp + -6] ; $i
3267   18EE FD 43         mov [d], b
3268   18F0 FD 7D         dec b
3269   18F2 0A 9B 18      jmp _while49_cond
3270   18F5             _while49_exit:
3271   18F5             ;; while (i > 0) { 
3272   18F5             _while50_cond:
3273   18F5 FA FA FF      lea d, [bp + -6] ; $i
3274   18F8 2A            mov b, [d]
3275   18F9             ; START RELATIONAL
3276   18F9 D7            push a
3277   18FA 11            mov a, b
3278   18FB 26 00 00      mov b, $0
3279   18FE B0            cmp a, b
3280   18FF FD 7F         sgt ; >
3281   1901 E4            pop a
3282   1902             ; END RELATIONAL
3283   1902 C0 00 00      cmp b, 0
3284   1905 C6 2E 19      je _while50_exit
3285   1908             _while50_block:
3286   1908             ;; i--; 
3287   1908 FA FA FF      lea d, [bp + -6] ; $i
3288   190B 2A            mov b, [d]
3289   190C FD 7D         dec b
3290   190E FA FA FF      lea d, [bp + -6] ; $i
3291   1911 FD 43         mov [d], b
3292   1913 FD 77         inc b
3293   1915             ;; putchar(digits[i]); 
3294   1915 FA FC FF      lea d, [bp + -4] ; $digits
3295   1918 D7            push a
3296   1919 DA            push d
3297   191A FA FA FF      lea d, [bp + -6] ; $i
3298   191D 2A            mov b, [d]
3299   191E E7            pop d
3300   191F 5A            add d, b
3301   1920 E4            pop a
3302   1921 32            mov bl, [d]
3303   1922 A7 00         mov bh, 0
3304   1924 DD            push bl
3305   1925 07 92 1A      call putchar
3306   1928 51 01 00      add sp, 1
3307   192B 0A F5 18      jmp _while50_cond
3308   192E             _while50_exit:
3309   192E F9            leave
3310   192F 09            ret
3311   1930             
3312   1930             sprint_signed:
3313   1930 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3314   1933             ;; char digits[5]; 
3315   1933 52 05 00      sub sp, 5 ; digits
3316   1936             ;; int i = 0; 
3317   1936 52 02 00      sub sp, 2 ; i
3318   1939             ; --- START LOCAL VAR INITIALIZATION
3319   1939 FA FA FF      lea d, [bp + -6] ; $i
3320   193C DA            push d
3321   193D 26 00 00      mov b, $0
3322   1940 E7            pop d
3323   1941 FD 43         mov [d], b
3324   1943             ; --- END LOCAL VAR INITIALIZATION
3325   1943             ;; int len = 0; 
3326   1943 52 02 00      sub sp, 2 ; len
3327   1946             ; --- START LOCAL VAR INITIALIZATION
3328   1946 FA F8 FF      lea d, [bp + -8] ; $len
3329   1949 DA            push d
3330   194A 26 00 00      mov b, $0
3331   194D E7            pop d
3332   194E FD 43         mov [d], b
3333   1950             ; --- END LOCAL VAR INITIALIZATION
3334   1950             ;; if (num < 0) { 
3335   1950             _if51_cond:
3336   1950 FA 07 00      lea d, [bp + 7] ; $num
3337   1953 2A            mov b, [d]
3338   1954             ; START RELATIONAL
3339   1954 D7            push a
3340   1955 11            mov a, b
3341   1956 26 00 00      mov b, $0
3342   1959 B0            cmp a, b
3343   195A FD 73         slt ; < (signed)
3344   195C E4            pop a
3345   195D             ; END RELATIONAL
3346   195D C0 00 00      cmp b, 0
3347   1960 C6 94 19      je _if51_else
3348   1963             _if51_true:
3349   1963             ;; *dest++ = '-'; 
3350   1963 FA 05 00      lea d, [bp + 5] ; $dest
3351   1966 2A            mov b, [d]
3352   1967 FD 77         inc b
3353   1969 FA 05 00      lea d, [bp + 5] ; $dest
3354   196C FD 43         mov [d], b
3355   196E FD 7D         dec b
3356   1970 D8            push b
3357   1971 26 2D 00      mov b, $2d
3358   1974 E7            pop d
3359   1975 FD 3E         mov [d], bl
3360   1977             ;; num = -num; 
3361   1977 FA 07 00      lea d, [bp + 7] ; $num
3362   197A DA            push d
3363   197B FA 07 00      lea d, [bp + 7] ; $num
3364   197E 2A            mov b, [d]
3365   197F FD 97         neg b
3366   1981 E7            pop d
3367   1982 FD 43         mov [d], b
3368   1984             ;; len++; 
3369   1984 FA F8 FF      lea d, [bp + -8] ; $len
3370   1987 2A            mov b, [d]
3371   1988 FD 77         inc b
3372   198A FA F8 FF      lea d, [bp + -8] ; $len
3373   198D FD 43         mov [d], b
3374   198F FD 7D         dec b
3375   1991 0A CE 19      jmp _if51_exit
3376   1994             _if51_else:
3377   1994             ;; if (num == 0) { 
3378   1994             _if52_cond:
3379   1994 FA 07 00      lea d, [bp + 7] ; $num
3380   1997 2A            mov b, [d]
3381   1998             ; START RELATIONAL
3382   1998 D7            push a
3383   1999 11            mov a, b
3384   199A 26 00 00      mov b, $0
3385   199D B0            cmp a, b
3386   199E FD 71         seq ; ==
3387   19A0 E4            pop a
3388   19A1             ; END RELATIONAL
3389   19A1 C0 00 00      cmp b, 0
3390   19A4 C6 CE 19      je _if52_exit
3391   19A7             _if52_true:
3392   19A7             ;; *dest++ = '0'; 
3393   19A7 FA 05 00      lea d, [bp + 5] ; $dest
3394   19AA 2A            mov b, [d]
3395   19AB FD 77         inc b
3396   19AD FA 05 00      lea d, [bp + 5] ; $dest
3397   19B0 FD 43         mov [d], b
3398   19B2 FD 7D         dec b
3399   19B4 D8            push b
3400   19B5 26 30 00      mov b, $30
3401   19B8 E7            pop d
3402   19B9 FD 3E         mov [d], bl
3403   19BB             ;; *dest = '\0'; 
3404   19BB FA 05 00      lea d, [bp + 5] ; $dest
3405   19BE 2A            mov b, [d]
3406   19BF D8            push b
3407   19C0 26 00 00      mov b, $0
3408   19C3 E7            pop d
3409   19C4 FD 3E         mov [d], bl
3410   19C6             ;; return 1; 
3411   19C6 26 01 00      mov b, $1
3412   19C9 F9            leave
3413   19CA 09            ret
3414   19CB 0A CE 19      jmp _if52_exit
3415   19CE             _if52_exit:
3416   19CE             _if51_exit:
3417   19CE             ;; while (num > 0) { 
3418   19CE             _while53_cond:
3419   19CE FA 07 00      lea d, [bp + 7] ; $num
3420   19D1 2A            mov b, [d]
3421   19D2             ; START RELATIONAL
3422   19D2 D7            push a
3423   19D3 11            mov a, b
3424   19D4 26 00 00      mov b, $0
3425   19D7 B0            cmp a, b
3426   19D8 FD 7F         sgt ; >
3427   19DA E4            pop a
3428   19DB             ; END RELATIONAL
3429   19DB C0 00 00      cmp b, 0
3430   19DE C6 28 1A      je _while53_exit
3431   19E1             _while53_block:
3432   19E1             ;; digits[i] = '0' + (num % 10); 
3433   19E1 FA FC FF      lea d, [bp + -4] ; $digits
3434   19E4 D7            push a
3435   19E5 DA            push d
3436   19E6 FA FA FF      lea d, [bp + -6] ; $i
3437   19E9 2A            mov b, [d]
3438   19EA E7            pop d
3439   19EB 5A            add d, b
3440   19EC E4            pop a
3441   19ED DA            push d
3442   19EE 26 30 00      mov b, $30
3443   19F1             ; START TERMS
3444   19F1 D7            push a
3445   19F2 11            mov a, b
3446   19F3 FA 07 00      lea d, [bp + 7] ; $num
3447   19F6 2A            mov b, [d]
3448   19F7             ; START FACTORS
3449   19F7 D7            push a
3450   19F8 11            mov a, b
3451   19F9 26 0A 00      mov b, $a
3452   19FC AE            div a, b ; 
3453   19FD 11            mov a, b
3454   19FE 27            mov b, a
3455   19FF E4            pop a
3456   1A00             ; END FACTORS
3457   1A00 56            add b, a
3458   1A01 E4            pop a
3459   1A02             ; END TERMS
3460   1A02 E7            pop d
3461   1A03 FD 3E         mov [d], bl
3462   1A05             ;; num = num / 10; 
3463   1A05 FA 07 00      lea d, [bp + 7] ; $num
3464   1A08 DA            push d
3465   1A09 FA 07 00      lea d, [bp + 7] ; $num
3466   1A0C 2A            mov b, [d]
3467   1A0D             ; START FACTORS
3468   1A0D D7            push a
3469   1A0E 11            mov a, b
3470   1A0F 26 0A 00      mov b, $a
3471   1A12 AE            div a, b
3472   1A13 27            mov b, a
3473   1A14 E4            pop a
3474   1A15             ; END FACTORS
3475   1A15 E7            pop d
3476   1A16 FD 43         mov [d], b
3477   1A18             ;; i++; 
3478   1A18 FA FA FF      lea d, [bp + -6] ; $i
3479   1A1B 2A            mov b, [d]
3480   1A1C FD 77         inc b
3481   1A1E FA FA FF      lea d, [bp + -6] ; $i
3482   1A21 FD 43         mov [d], b
3483   1A23 FD 7D         dec b
3484   1A25 0A CE 19      jmp _while53_cond
3485   1A28             _while53_exit:
3486   1A28             ;; while (i > 0) { 
3487   1A28             _while54_cond:
3488   1A28 FA FA FF      lea d, [bp + -6] ; $i
3489   1A2B 2A            mov b, [d]
3490   1A2C             ; START RELATIONAL
3491   1A2C D7            push a
3492   1A2D 11            mov a, b
3493   1A2E 26 00 00      mov b, $0
3494   1A31 B0            cmp a, b
3495   1A32 FD 7F         sgt ; >
3496   1A34 E4            pop a
3497   1A35             ; END RELATIONAL
3498   1A35 C0 00 00      cmp b, 0
3499   1A38 C6 78 1A      je _while54_exit
3500   1A3B             _while54_block:
3501   1A3B             ;; i--; 
3502   1A3B FA FA FF      lea d, [bp + -6] ; $i
3503   1A3E 2A            mov b, [d]
3504   1A3F FD 7D         dec b
3505   1A41 FA FA FF      lea d, [bp + -6] ; $i
3506   1A44 FD 43         mov [d], b
3507   1A46 FD 77         inc b
3508   1A48             ;; *dest++ = digits[i]; 
3509   1A48 FA 05 00      lea d, [bp + 5] ; $dest
3510   1A4B 2A            mov b, [d]
3511   1A4C FD 77         inc b
3512   1A4E FA 05 00      lea d, [bp + 5] ; $dest
3513   1A51 FD 43         mov [d], b
3514   1A53 FD 7D         dec b
3515   1A55 D8            push b
3516   1A56 FA FC FF      lea d, [bp + -4] ; $digits
3517   1A59 D7            push a
3518   1A5A DA            push d
3519   1A5B FA FA FF      lea d, [bp + -6] ; $i
3520   1A5E 2A            mov b, [d]
3521   1A5F E7            pop d
3522   1A60 5A            add d, b
3523   1A61 E4            pop a
3524   1A62 32            mov bl, [d]
3525   1A63 A7 00         mov bh, 0
3526   1A65 E7            pop d
3527   1A66 FD 3E         mov [d], bl
3528   1A68             ;; len++; 
3529   1A68 FA F8 FF      lea d, [bp + -8] ; $len
3530   1A6B 2A            mov b, [d]
3531   1A6C FD 77         inc b
3532   1A6E FA F8 FF      lea d, [bp + -8] ; $len
3533   1A71 FD 43         mov [d], b
3534   1A73 FD 7D         dec b
3535   1A75 0A 28 1A      jmp _while54_cond
3536   1A78             _while54_exit:
3537   1A78             ;; *dest = '\0'; 
3538   1A78 FA 05 00      lea d, [bp + 5] ; $dest
3539   1A7B 2A            mov b, [d]
3540   1A7C D8            push b
3541   1A7D 26 00 00      mov b, $0
3542   1A80 E7            pop d
3543   1A81 FD 3E         mov [d], bl
3544   1A83             ;; return len; 
3545   1A83 FA F8 FF      lea d, [bp + -8] ; $len
3546   1A86 2A            mov b, [d]
3547   1A87 F9            leave
3548   1A88 09            ret
3549   1A89             
3550   1A89             date:
3551   1A89 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3552   1A8C             
3553   1A8C             ; --- BEGIN INLINE ASM BLOCK
3554   1A8C 19 00         mov al, 0 
3555   1A8E 05 07         syscall sys_datetime
3556   1A90             ; --- END INLINE ASM BLOCK
3557   1A90             
3558   1A90 F9            leave
3559   1A91 09            ret
3560   1A92             
3561   1A92             putchar:
3562   1A92 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3563   1A95             
3564   1A95             ; --- BEGIN INLINE ASM BLOCK
3565   1A95 FA 05 00      lea d, [bp + 5] ; $c
3566   1A98 1E            mov al, [d]
3567   1A99 23            mov ah, al
3568   1A9A 07 23 1C      call _putchar
3569   1A9D             ; --- END INLINE ASM BLOCK
3570   1A9D             
3571   1A9D F9            leave
3572   1A9E 09            ret
3573   1A9F             
3574   1A9F             getchar:
3575   1A9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3576   1AA2             ;; char c; 
3577   1AA2 52 01 00      sub sp, 1 ; c
3578   1AA5             
3579   1AA5             ; --- BEGIN INLINE ASM BLOCK
3580   1AA5 07 1C 1C      call getch
3581   1AA8 1A            mov al, ah
3582   1AA9 FA 00 00      lea d, [bp + 0] ; $c
3583   1AAC 3E            mov [d], al
3584   1AAD             ; --- END INLINE ASM BLOCK
3585   1AAD             
3586   1AAD             ;; return c; 
3587   1AAD FA 00 00      lea d, [bp + 0] ; $c
3588   1AB0 32            mov bl, [d]
3589   1AB1 A7 00         mov bh, 0
3590   1AB3 F9            leave
3591   1AB4 09            ret
3592   1AB5             
3593   1AB5             scann:
3594   1AB5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3595   1AB8             ;; int m; 
3596   1AB8 52 02 00      sub sp, 2 ; m
3597   1ABB             
3598   1ABB             ; --- BEGIN INLINE ASM BLOCK
3599   1ABB 07 67 1E      call scan_u16d
3600   1ABE FA FF FF      lea d, [bp + -1] ; $m
3601   1AC1 43            mov [d], a
3602   1AC2             ; --- END INLINE ASM BLOCK
3603   1AC2             
3604   1AC2             ;; return m; 
3605   1AC2 FA FF FF      lea d, [bp + -1] ; $m
3606   1AC5 2A            mov b, [d]
3607   1AC6 F9            leave
3608   1AC7 09            ret
3609   1AC8             
3610   1AC8             puts:
3611   1AC8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3612   1ACB             
3613   1ACB             ; --- BEGIN INLINE ASM BLOCK
3614   1ACB FA 05 00      lea d, [bp + 5] ; $s
3615   1ACE 15            mov a, [d]
3616   1ACF 3C            mov d, a
3617   1AD0 07 6D 1D      call _puts
3618   1AD3 10 00 0A      mov a, $0A00
3619   1AD6 05 03         syscall sys_io
3620   1AD8             ; --- END INLINE ASM BLOCK
3621   1AD8             
3622   1AD8 F9            leave
3623   1AD9 09            ret
3624   1ADA             
3625   1ADA             print:
3626   1ADA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3627   1ADD             
3628   1ADD             ; --- BEGIN INLINE ASM BLOCK
3629   1ADD FA 05 00      lea d, [bp + 5] ; $s
3630   1AE0 FD 2A         mov d, [d]
3631   1AE2 07 6D 1D      call _puts
3632   1AE5             ; --- END INLINE ASM BLOCK
3633   1AE5             
3634   1AE5 F9            leave
3635   1AE6 09            ret
3636   1AE7             
3637   1AE7             getparam:
3638   1AE7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3639   1AEA             ;; char data; 
3640   1AEA 52 01 00      sub sp, 1 ; data
3641   1AED             
3642   1AED             ; --- BEGIN INLINE ASM BLOCK
3643   1AED 19 04         mov al, 4
3644   1AEF FA 05 00      lea d, [bp + 5] ; $address
3645   1AF2 FD 2A         mov d, [d]
3646   1AF4 05 0C         syscall sys_system
3647   1AF6 FA 00 00      lea d, [bp + 0] ; $data
3648   1AF9 FD 3E         mov [d], bl
3649   1AFB             ; --- END INLINE ASM BLOCK
3650   1AFB             
3651   1AFB             ;; return data; 
3652   1AFB FA 00 00      lea d, [bp + 0] ; $data
3653   1AFE 32            mov bl, [d]
3654   1AFF A7 00         mov bh, 0
3655   1B01 F9            leave
3656   1B02 09            ret
3657   1B03             
3658   1B03             clear:
3659   1B03 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3660   1B06             ;; print("\033[2J\033[H"); 
3661   1B06 26 43 20      mov b, _s5 ; "\033[2J\033[H"
3662   1B09 FD AB         swp b
3663   1B0B D8            push b
3664   1B0C 07 DA 1A      call print
3665   1B0F 51 02 00      add sp, 2
3666   1B12 F9            leave
3667   1B13 09            ret
3668   1B14             
3669   1B14             abs:
3670   1B14 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3671   1B17             ;; return i < 0 ? -i : i; 
3672   1B17             _ternary55_cond:
3673   1B17 FA 05 00      lea d, [bp + 5] ; $i
3674   1B1A 2A            mov b, [d]
3675   1B1B             ; START RELATIONAL
3676   1B1B D7            push a
3677   1B1C 11            mov a, b
3678   1B1D 26 00 00      mov b, $0
3679   1B20 B0            cmp a, b
3680   1B21 FD 73         slt ; < (signed)
3681   1B23 E4            pop a
3682   1B24             ; END RELATIONAL
3683   1B24 C0 00 00      cmp b, 0
3684   1B27 C6 33 1B      je _ternary55_false
3685   1B2A             _ternary55_true:
3686   1B2A FA 05 00      lea d, [bp + 5] ; $i
3687   1B2D 2A            mov b, [d]
3688   1B2E FD 97         neg b
3689   1B30 0A 37 1B      jmp _ternary55_exit
3690   1B33             _ternary55_false:
3691   1B33 FA 05 00      lea d, [bp + 5] ; $i
3692   1B36 2A            mov b, [d]
3693   1B37             _ternary55_exit:
3694   1B37 F9            leave
3695   1B38 09            ret
3696   1B39             
3697   1B39             include_stdio_asm:
3698   1B39 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3699   1B3C             
3700   1B3C             ; --- BEGIN INLINE ASM BLOCK
3701   1B3C             .include "lib/asm/stdio.asm"
0001+  1B3C             ;-----------------------------------------------------------------------------
0002+  1B3C             ; stdio.s
0003+  1B3C             ;-----------------------------------------------------------------------------
0004+  1B3C             .include "lib/asm/string.asm"
0001++ 1B3C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1B3C             ; string.s
0003++ 1B3C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1B3C             
0005++ 1B3C             
0006++ 1B3C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1B3C             ; _strrev
0008++ 1B3C             ; reverse a string
0009++ 1B3C             ; D = string address
0010++ 1B3C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1B3C             ; 01234
0012++ 1B3C             _strrev:
0013++ 1B3C 4B          	pusha
0014++ 1B3D 07 83 1B    	call _strlen	; length in C
0015++ 1B40 12          	mov a, c
0016++ 1B41 AF 01 00    	cmp a, 1
0017++ 1B44 D0 5E 1B    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1B47 7D          	dec a
0019++ 1B48 FD 4E       	mov si, d	; beginning of string
0020++ 1B4A FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1B4C 59          	add d, a	; end of string
0022++ 1B4D 12          	mov a, c
0023++ 1B4E FD 9B       	shr a		; divide by 2
0024++ 1B50 39          	mov c, a	; C now counts the steps
0025++ 1B51             _strrev_L0:
0026++ 1B51 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1B52 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1B53 3E          	mov [d], al	; store left char into right side
0029++ 1B54 1B          	mov al, bl
0030++ 1B55 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1B56 7E          	dec c
0032++ 1B57 7F          	dec d
0033++ 1B58 C2 00 00    	cmp c, 0
0034++ 1B5B C7 51 1B    	jne _strrev_L0
0035++ 1B5E             _strrev_end:
0036++ 1B5E 4C          	popa
0037++ 1B5F 09          	ret
0038++ 1B60             	
0039++ 1B60             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1B60             ; _strchr
0041++ 1B60             ; search string in D for char in AL
0042++ 1B60             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1B60             _strchr:
0044++ 1B60             _strchr_L0:
0045++ 1B60 32          	mov bl, [d]
0046++ 1B61 C1 00       	cmp bl, 0
0047++ 1B63 C6 6E 1B    	je _strchr_end
0048++ 1B66 BA          	cmp al, bl
0049++ 1B67 C6 6E 1B    	je _strchr_end
0050++ 1B6A 79          	inc d
0051++ 1B6B 0A 60 1B    	jmp _strchr_L0
0052++ 1B6E             _strchr_end:
0053++ 1B6E 1B          	mov al, bl
0054++ 1B6F 09          	ret
0055++ 1B70             
0056++ 1B70             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1B70             ; _strstr
0058++ 1B70             ; find sub-string
0059++ 1B70             ; str1 in SI
0060++ 1B70             ; str2 in DI
0061++ 1B70             ; SI points to end of source string
0062++ 1B70             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1B70             _strstr:
0064++ 1B70 DB          	push al
0065++ 1B71 DA          	push d
0066++ 1B72 E3          	push di
0067++ 1B73             _strstr_loop:
0068++ 1B73 F3          	cmpsb					; compare a byte of the strings
0069++ 1B74 C7 7F 1B    	jne _strstr_ret
0070++ 1B77 FC 00 00    	lea d, [di + 0]
0071++ 1B7A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1B7C C7 73 1B    	jne _strstr_loop				; equal chars but not at end
0073++ 1B7F             _strstr_ret:
0074++ 1B7F F0          	pop di
0075++ 1B80 E7          	pop d
0076++ 1B81 E8          	pop al
0077++ 1B82 09          	ret
0078++ 1B83             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1B83             ; length of null terminated string
0080++ 1B83             ; result in C
0081++ 1B83             ; pointer in D
0082++ 1B83             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1B83             _strlen:
0084++ 1B83 DA          	push d
0085++ 1B84 38 00 00    	mov c, 0
0086++ 1B87             _strlen_L1:
0087++ 1B87 BD 00       	cmp byte [d], 0
0088++ 1B89 C6 91 1B    	je _strlen_ret
0089++ 1B8C 79          	inc d
0090++ 1B8D 78          	inc c
0091++ 1B8E 0A 87 1B    	jmp _strlen_L1
0092++ 1B91             _strlen_ret:
0093++ 1B91 E7          	pop d
0094++ 1B92 09          	ret
0095++ 1B93             
0096++ 1B93             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1B93             ; STRCMP
0098++ 1B93             ; compare two strings
0099++ 1B93             ; str1 in SI
0100++ 1B93             ; str2 in DI
0101++ 1B93             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1B93             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1B93             _strcmp:
0104++ 1B93 DB          	push al
0105++ 1B94 DA          	push d
0106++ 1B95 E3          	push di
0107++ 1B96 E2          	push si
0108++ 1B97             _strcmp_loop:
0109++ 1B97 F3          	cmpsb					; compare a byte of the strings
0110++ 1B98 C7 A3 1B    	jne _strcmp_ret
0111++ 1B9B FB FF FF    	lea d, [si +- 1]
0112++ 1B9E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1BA0 C7 97 1B    	jne _strcmp_loop				; equal chars but not at end
0114++ 1BA3             _strcmp_ret:
0115++ 1BA3 EF          	pop si
0116++ 1BA4 F0          	pop di
0117++ 1BA5 E7          	pop d
0118++ 1BA6 E8          	pop al
0119++ 1BA7 09          	ret
0120++ 1BA8             
0121++ 1BA8             
0122++ 1BA8             ; STRCPY
0123++ 1BA8             ; copy null terminated string from SI to DI
0124++ 1BA8             ; source in SI
0125++ 1BA8             ; destination in DI
0126++ 1BA8             _strcpy:
0127++ 1BA8 E2          	push si
0128++ 1BA9 E3          	push di
0129++ 1BAA DB          	push al
0130++ 1BAB             _strcpy_L1:
0131++ 1BAB F6          	lodsb
0132++ 1BAC F7          	stosb
0133++ 1BAD B9 00       	cmp al, 0
0134++ 1BAF C7 AB 1B    	jne _strcpy_L1
0135++ 1BB2             _strcpy_end:
0136++ 1BB2 E8          	pop al
0137++ 1BB3 F0          	pop di
0138++ 1BB4 EF          	pop si
0139++ 1BB5 09          	ret
0140++ 1BB6             
0141++ 1BB6             ; STRCAT
0142++ 1BB6             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1BB6             ; source in SI
0144++ 1BB6             ; destination in DI
0145++ 1BB6             _strcat:
0146++ 1BB6 E2          	push si
0147++ 1BB7 E3          	push di
0148++ 1BB8 D7          	push a
0149++ 1BB9 DA          	push d
0150++ 1BBA 50          	mov a, di
0151++ 1BBB 3C          	mov d, a
0152++ 1BBC             _strcat_goto_end_L1:
0153++ 1BBC BD 00       	cmp byte[d], 0
0154++ 1BBE C6 C5 1B    	je _strcat_start
0155++ 1BC1 79          	inc d
0156++ 1BC2 0A BC 1B    	jmp _strcat_goto_end_L1
0157++ 1BC5             _strcat_start:
0158++ 1BC5 FD 50       	mov di, d
0159++ 1BC7             _strcat_L1:
0160++ 1BC7 F6          	lodsb
0161++ 1BC8 F7          	stosb
0162++ 1BC9 B9 00       	cmp al, 0
0163++ 1BCB C7 C7 1B    	jne _strcat_L1
0164++ 1BCE             _strcat_end:
0165++ 1BCE E7          	pop d
0166++ 1BCF E4          	pop a
0167++ 1BD0 F0          	pop di
0168++ 1BD1 EF          	pop si
0169++ 1BD2 09          	ret
0170++ 1BD3             
0171++ 1BD3             
0005+  1BD3             
0006+  1BD3             ;-----------------------------------------------------------------------------
0007+  1BD3             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1BD3             ; ASCII in BL
0009+  1BD3             ; result in AL
0010+  1BD3             ; ascii for F = 0100 0110
0011+  1BD3             ; ascii for 9 = 0011 1001
0012+  1BD3             ;-----------------------------------------------------------------------------
0013+  1BD3             hex_ascii_encode:
0014+  1BD3 1B            mov al, bl
0015+  1BD4 93 40         test al, $40        ; test if letter or number
0016+  1BD6 C7 DC 1B      jnz hex_letter
0017+  1BD9 87 0F         and al, $0F        ; get number
0018+  1BDB 09            ret
0019+  1BDC             hex_letter:
0020+  1BDC 87 0F         and al, $0F        ; get letter
0021+  1BDE 6A 09         add al, 9
0022+  1BE0 09            ret
0023+  1BE1             
0024+  1BE1             ;-----------------------------------------------------------------------------
0025+  1BE1             ; ATOI
0026+  1BE1             ; 2 letter hex string in B
0027+  1BE1             ; 8bit integer returned in AL
0028+  1BE1             ;-----------------------------------------------------------------------------
0029+  1BE1             _atoi:
0030+  1BE1 D8            push b
0031+  1BE2 07 D3 1B      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1BE5 30            mov bl, bh
0033+  1BE6 DB            push al          ; save a
0034+  1BE7 07 D3 1B      call hex_ascii_encode
0035+  1BEA EA            pop bl  
0036+  1BEB FD 9E 04      shl al, 4
0037+  1BEE 8C            or al, bl
0038+  1BEF E5            pop b
0039+  1BF0 09            ret  
0040+  1BF1             
0041+  1BF1             
0042+  1BF1             ;-----------------------------------------------------------------------------
0043+  1BF1             ; ITOA
0044+  1BF1             ; 8bit value in BL
0045+  1BF1             ; 2 byte ASCII result in A
0046+  1BF1             ;-----------------------------------------------------------------------------
0047+  1BF1             _itoa:
0048+  1BF1 DA            push d
0049+  1BF2 D8            push b
0050+  1BF3 A7 00         mov bh, 0
0051+  1BF5 FD A4 04      shr bl, 4  
0052+  1BF8 74            mov d, b
0053+  1BF9 1F A1 1E      mov al, [d + s_hex_digits]
0054+  1BFC 23            mov ah, al
0055+  1BFD               
0056+  1BFD E5            pop b
0057+  1BFE D8            push b
0058+  1BFF A7 00         mov bh, 0
0059+  1C01 FD 87 0F      and bl, $0F
0060+  1C04 74            mov d, b
0061+  1C05 1F A1 1E      mov al, [d + s_hex_digits]
0062+  1C08 E5            pop b
0063+  1C09 E7            pop d
0064+  1C0A 09            ret
0065+  1C0B             
0066+  1C0B             ;-----------------------------------------------------------------------------
0067+  1C0B             ; HEX STRING TO BINARY
0068+  1C0B             ; di = destination address
0069+  1C0B             ; si = source
0070+  1C0B             ;-----------------------------------------------------------------------------
0071+  1C0B             _hex_to_int:
0072+  1C0B             _hex_to_int_L1:
0073+  1C0B F6            lodsb          ; load from [SI] to AL
0074+  1C0C B9 00         cmp al, 0        ; check if ASCII 0
0075+  1C0E C6 1B 1C      jz _hex_to_int_ret
0076+  1C11 36            mov bh, al
0077+  1C12 F6            lodsb
0078+  1C13 2F            mov bl, al
0079+  1C14 07 E1 1B      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1C17 F7            stosb          ; store AL to [DI]
0081+  1C18 0A 0B 1C      jmp _hex_to_int_L1
0082+  1C1B             _hex_to_int_ret:
0083+  1C1B 09            ret    
0084+  1C1C             
0085+  1C1C             ;-----------------------------------------------------------------------------
0086+  1C1C             ; GETCHAR
0087+  1C1C             ; char in ah
0088+  1C1C             ;-----------------------------------------------------------------------------
0089+  1C1C             getch:
0090+  1C1C DB            push al
0091+  1C1D             getch_retry:
0092+  1C1D 19 01         mov al, 1
0093+  1C1F 05 03         syscall sys_io      ; receive in AH
0094+  1C21 E8            pop al
0095+  1C22 09            ret
0096+  1C23             
0097+  1C23             ;-----------------------------------------------------------------------------
0098+  1C23             ; PUTCHAR
0099+  1C23             ; char in ah
0100+  1C23             ;-----------------------------------------------------------------------------
0101+  1C23             _putchar:
0102+  1C23 D7            push a
0103+  1C24 19 00         mov al, 0
0104+  1C26 05 03         syscall sys_io      ; char in AH
0105+  1C28 E4            pop a
0106+  1C29 09            ret
0107+  1C2A             
0108+  1C2A             ;-----------------------------------------------------------------------------
0109+  1C2A             ;; INPUT A STRING
0110+  1C2A             ;; terminates with null
0111+  1C2A             ;; pointer in D
0112+  1C2A             ;-----------------------------------------------------------------------------
0113+  1C2A             _gets:
0114+  1C2A D7            push a
0115+  1C2B DA            push d
0116+  1C2C             _gets_loop:
0117+  1C2C 19 01         mov al, 1
0118+  1C2E 05 03         syscall sys_io      ; receive in AH
0119+  1C30 B9 00         cmp al, 0        ; check error code (AL)
0120+  1C32 C6 2C 1C      je _gets_loop      ; if no char received, retry
0121+  1C35             
0122+  1C35 76 1B         cmp ah, 27
0123+  1C37 C6 58 1C      je _gets_ansi_esc
0124+  1C3A 76 0A         cmp ah, $0A        ; LF
0125+  1C3C C6 C3 1C      je _gets_end
0126+  1C3F 76 0D         cmp ah, $0D        ; CR
0127+  1C41 C6 C3 1C      je _gets_end
0128+  1C44 76 5C         cmp ah, $5C        ; '\\'
0129+  1C46 C6 84 1C      je _gets_escape
0130+  1C49               
0131+  1C49 76 08         cmp ah, $08      ; check for backspace
0132+  1C4B C6 54 1C      je _gets_backspace
0133+  1C4E             
0134+  1C4E 1A            mov al, ah
0135+  1C4F 3E            mov [d], al
0136+  1C50 79            inc d
0137+  1C51 0A 2C 1C      jmp _gets_loop
0138+  1C54             _gets_backspace:
0139+  1C54 7F            dec d
0140+  1C55 0A 2C 1C      jmp _gets_loop
0141+  1C58             _gets_ansi_esc:
0142+  1C58 19 01         mov al, 1
0143+  1C5A 05 03         syscall sys_io        ; receive in AH without echo
0144+  1C5C B9 00         cmp al, 0          ; check error code (AL)
0145+  1C5E C6 58 1C      je _gets_ansi_esc    ; if no char received, retry
0146+  1C61 76 5B         cmp ah, '['
0147+  1C63 C7 2C 1C      jne _gets_loop
0148+  1C66             _gets_ansi_esc_2:
0149+  1C66 19 01         mov al, 1
0150+  1C68 05 03         syscall sys_io          ; receive in AH without echo
0151+  1C6A B9 00         cmp al, 0            ; check error code (AL)
0152+  1C6C C6 66 1C      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1C6F 76 44         cmp ah, 'D'
0154+  1C71 C6 7C 1C      je _gets_left_arrow
0155+  1C74 76 43         cmp ah, 'C'
0156+  1C76 C6 80 1C      je _gets_right_arrow
0157+  1C79 0A 2C 1C      jmp _gets_loop
0158+  1C7C             _gets_left_arrow:
0159+  1C7C 7F            dec d
0160+  1C7D 0A 2C 1C      jmp _gets_loop
0161+  1C80             _gets_right_arrow:
0162+  1C80 79            inc d
0163+  1C81 0A 2C 1C      jmp _gets_loop
0164+  1C84             _gets_escape:
0165+  1C84 19 01         mov al, 1
0166+  1C86 05 03         syscall sys_io      ; receive in AH
0167+  1C88 B9 00         cmp al, 0        ; check error code (AL)
0168+  1C8A C6 84 1C      je _gets_escape      ; if no char received, retry
0169+  1C8D 76 6E         cmp ah, 'n'
0170+  1C8F C6 AE 1C      je _gets_LF
0171+  1C92 76 72         cmp ah, 'r'
0172+  1C94 C6 B5 1C      je _gets_CR
0173+  1C97 76 30         cmp ah, '0'
0174+  1C99 C6 BC 1C      je _gets_NULL
0175+  1C9C 76 5C         cmp ah, $5C  ; '\'
0176+  1C9E C6 A7 1C      je _gets_slash
0177+  1CA1 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1CA2 3E            mov [d], al
0179+  1CA3 79            inc d
0180+  1CA4 0A 2C 1C      jmp _gets_loop
0181+  1CA7             _gets_slash:
0182+  1CA7 19 5C         mov al, $5C
0183+  1CA9 3E            mov [d], al
0184+  1CAA 79            inc d
0185+  1CAB 0A 2C 1C      jmp _gets_loop
0186+  1CAE             _gets_LF:
0187+  1CAE 19 0A         mov al, $0A
0188+  1CB0 3E            mov [d], al
0189+  1CB1 79            inc d
0190+  1CB2 0A 2C 1C      jmp _gets_loop
0191+  1CB5             _gets_CR:
0192+  1CB5 19 0D         mov al, $0D
0193+  1CB7 3E            mov [d], al
0194+  1CB8 79            inc d
0195+  1CB9 0A 2C 1C      jmp _gets_loop
0196+  1CBC             _gets_NULL:
0197+  1CBC 19 00         mov al, $00
0198+  1CBE 3E            mov [d], al
0199+  1CBF 79            inc d
0200+  1CC0 0A 2C 1C      jmp _gets_loop
0201+  1CC3             _gets_end:
0202+  1CC3 19 00         mov al, 0
0203+  1CC5 3E            mov [d], al        ; terminate string
0204+  1CC6 E7            pop d
0205+  1CC7 E4            pop a
0206+  1CC8 09            ret
0207+  1CC9             
0208+  1CC9             ;-----------------------------------------------------------------------------
0209+  1CC9             ;; INPUT TEXT
0210+  1CC9             ;; terminated with CTRL+D
0211+  1CC9             ;; pointer in D
0212+  1CC9             ;-----------------------------------------------------------------------------
0213+  1CC9             _gettxt:
0214+  1CC9 D7            push a
0215+  1CCA DA            push d
0216+  1CCB             _gettxt_loop:
0217+  1CCB 19 01         mov al, 1
0218+  1CCD 05 03         syscall sys_io      ; receive in AH
0219+  1CCF B9 00         cmp al, 0        ; check error code (AL)
0220+  1CD1 C6 CB 1C      je _gettxt_loop    ; if no char received, retry
0221+  1CD4 76 04         cmp ah, 4      ; EOT
0222+  1CD6 C6 14 1D      je _gettxt_end
0223+  1CD9 76 08         cmp ah, $08      ; check for backspace
0224+  1CDB C6 10 1D      je _gettxt_backspace
0225+  1CDE 76 5C         cmp ah, $5C        ; '\'
0226+  1CE0 C6 E9 1C      je _gettxt_escape
0227+  1CE3 1A            mov al, ah
0228+  1CE4 3E            mov [d], al
0229+  1CE5 79            inc d
0230+  1CE6 0A CB 1C      jmp _gettxt_loop
0231+  1CE9             _gettxt_escape:
0232+  1CE9 19 01         mov al, 1
0233+  1CEB 05 03         syscall sys_io      ; receive in AH
0234+  1CED B9 00         cmp al, 0        ; check error code (AL)
0235+  1CEF C6 E9 1C      je _gettxt_escape    ; if no char received, retry
0236+  1CF2 76 6E         cmp ah, 'n'
0237+  1CF4 C6 02 1D      je _gettxt_LF
0238+  1CF7 76 72         cmp ah, 'r'
0239+  1CF9 C6 09 1D      je _gettxt_CR
0240+  1CFC 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1CFD 3E            mov [d], al
0242+  1CFE 79            inc d
0243+  1CFF 0A CB 1C      jmp _gettxt_loop
0244+  1D02             _gettxt_LF:
0245+  1D02 19 0A         mov al, $0A
0246+  1D04 3E            mov [d], al
0247+  1D05 79            inc d
0248+  1D06 0A CB 1C      jmp _gettxt_loop
0249+  1D09             _gettxt_CR:
0250+  1D09 19 0D         mov al, $0D
0251+  1D0B 3E            mov [d], al
0252+  1D0C 79            inc d
0253+  1D0D 0A CB 1C      jmp _gettxt_loop
0254+  1D10             _gettxt_backspace:
0255+  1D10 7F            dec d
0256+  1D11 0A CB 1C      jmp _gettxt_loop
0257+  1D14             _gettxt_end:
0258+  1D14 19 00         mov al, 0
0259+  1D16 3E            mov [d], al        ; terminate string
0260+  1D17 E7            pop d
0261+  1D18 E4            pop a
0262+  1D19 09            ret
0263+  1D1A             
0264+  1D1A             ;-----------------------------------------------------------------------------
0265+  1D1A             ; PRINT NEW LINE
0266+  1D1A             ;-----------------------------------------------------------------------------
0267+  1D1A             printnl:
0268+  1D1A D7            push a
0269+  1D1B 10 00 0A      mov a, $0A00
0270+  1D1E 05 03         syscall sys_io
0271+  1D20 10 00 0D      mov a, $0D00
0272+  1D23 05 03         syscall sys_io
0273+  1D25 E4            pop a
0274+  1D26 09            ret
0275+  1D27             
0276+  1D27             ;-----------------------------------------------------------------------------
0277+  1D27             ; _strtoint
0278+  1D27             ; 4 digit hex string number in d
0279+  1D27             ; integer returned in A
0280+  1D27             ;-----------------------------------------------------------------------------
0281+  1D27             _strtointx:
0282+  1D27 D8            push b
0283+  1D28 32            mov bl, [d]
0284+  1D29 37            mov bh, bl
0285+  1D2A 33 01 00      mov bl, [d + 1]
0286+  1D2D 07 E1 1B      call _atoi        ; convert to int in AL
0287+  1D30 23            mov ah, al        ; move to AH
0288+  1D31 33 02 00      mov bl, [d + 2]
0289+  1D34 37            mov bh, bl
0290+  1D35 33 03 00      mov bl, [d + 3]
0291+  1D38 07 E1 1B      call _atoi        ; convert to int in AL
0292+  1D3B E5            pop b
0293+  1D3C 09            ret
0294+  1D3D             
0295+  1D3D             ;-----------------------------------------------------------------------------
0296+  1D3D             ; _strtoint
0297+  1D3D             ; 5 digit base10 string number in d
0298+  1D3D             ; integer returned in A
0299+  1D3D             ;-----------------------------------------------------------------------------
0300+  1D3D             _strtoint:
0301+  1D3D E2            push si
0302+  1D3E D8            push b
0303+  1D3F D9            push c
0304+  1D40 DA            push d
0305+  1D41 07 83 1B      call _strlen      ; get string length in C
0306+  1D44 7E            dec c
0307+  1D45 FD 4E         mov si, d
0308+  1D47 12            mov a, c
0309+  1D48 FD 99         shl a
0310+  1D4A 3B B9 1E      mov d, table_power
0311+  1D4D 59            add d, a
0312+  1D4E 38 00 00      mov c, 0
0313+  1D51             _strtoint_L0:
0314+  1D51 F6            lodsb      ; load ASCII to al
0315+  1D52 B9 00         cmp al, 0
0316+  1D54 C6 67 1D      je _strtoint_end
0317+  1D57 6F 30         sub al, $30    ; make into integer
0318+  1D59 22 00         mov ah, 0
0319+  1D5B 2A            mov b, [d]
0320+  1D5C AC            mul a, b      ; result in B since it fits in 16bits
0321+  1D5D 11            mov a, b
0322+  1D5E 28            mov b, c
0323+  1D5F 54            add a, b
0324+  1D60 39            mov c, a
0325+  1D61 63 02 00      sub d, 2
0326+  1D64 0A 51 1D      jmp _strtoint_L0
0327+  1D67             _strtoint_end:
0328+  1D67 12            mov a, c
0329+  1D68 E7            pop d
0330+  1D69 E6            pop c
0331+  1D6A E5            pop b
0332+  1D6B EF            pop si
0333+  1D6C 09            ret
0334+  1D6D             
0335+  1D6D             ;-----------------------------------------------------------------------------
0336+  1D6D             ; PRINT NULL TERMINATED STRING
0337+  1D6D             ; pointer in D
0338+  1D6D             ;-----------------------------------------------------------------------------
0339+  1D6D             _puts:
0340+  1D6D D7            push a
0341+  1D6E DA            push d
0342+  1D6F             _puts_L1:
0343+  1D6F 1E            mov al, [d]
0344+  1D70 B9 00         cmp al, 0
0345+  1D72 C6 7E 1D      jz _puts_END
0346+  1D75 23            mov ah, al
0347+  1D76 19 00         mov al, 0
0348+  1D78 05 03         syscall sys_io
0349+  1D7A 79            inc d
0350+  1D7B 0A 6F 1D      jmp _puts_L1
0351+  1D7E             _puts_END:
0352+  1D7E E7            pop d
0353+  1D7F E4            pop a
0354+  1D80 09            ret
0355+  1D81             
0356+  1D81             ;-----------------------------------------------------------------------------
0357+  1D81             ; PRINT N SIZE STRING
0358+  1D81             ; pointer in D
0359+  1D81             ; size in C
0360+  1D81             ;-----------------------------------------------------------------------------
0361+  1D81             _putsn:
0362+  1D81 DB            push al
0363+  1D82 DA            push d
0364+  1D83 D9            push c
0365+  1D84             _putsn_L0:
0366+  1D84 1E            mov al, [d]
0367+  1D85 23            mov ah, al
0368+  1D86 19 00         mov al, 0
0369+  1D88 05 03         syscall sys_io
0370+  1D8A 79            inc d
0371+  1D8B 7E            dec c  
0372+  1D8C C2 00 00      cmp c, 0
0373+  1D8F C7 84 1D      jne _putsn_L0
0374+  1D92             _putsn_end:
0375+  1D92 E6            pop c
0376+  1D93 E7            pop d
0377+  1D94 E8            pop al
0378+  1D95 09            ret
0379+  1D96             
0380+  1D96             ;-----------------------------------------------------------------------------
0381+  1D96             ; print 16bit decimal number
0382+  1D96             ; input number in A
0383+  1D96             ;-----------------------------------------------------------------------------
0384+  1D96             print_u16d:
0385+  1D96 D7            push a
0386+  1D97 D8            push b
0387+  1D98 26 10 27      mov b, 10000
0388+  1D9B AE            div a, b      ; get 10000's coeff.
0389+  1D9C 07 BE 1D      call print_number
0390+  1D9F 11            mov a, b
0391+  1DA0 26 E8 03      mov b, 1000
0392+  1DA3 AE            div a, b      ; get 1000's coeff.
0393+  1DA4 07 BE 1D      call print_number
0394+  1DA7 11            mov a, b
0395+  1DA8 26 64 00      mov b, 100
0396+  1DAB AE            div a, b
0397+  1DAC 07 BE 1D      call print_number
0398+  1DAF 11            mov a, b
0399+  1DB0 26 0A 00      mov b, 10
0400+  1DB3 AE            div a, b
0401+  1DB4 07 BE 1D      call print_number
0402+  1DB7 1B            mov al, bl      ; 1's coeff in bl
0403+  1DB8 07 BE 1D      call print_number
0404+  1DBB E5            pop b
0405+  1DBC E4            pop a
0406+  1DBD 09            ret
0407+  1DBE             
0408+  1DBE             ;-----------------------------------------------------------------------------
0409+  1DBE             ; print AL
0410+  1DBE             ;-----------------------------------------------------------------------------
0411+  1DBE             print_number:
0412+  1DBE 6A 30         add al, $30
0413+  1DC0 23            mov ah, al
0414+  1DC1 07 23 1C      call _putchar
0415+  1DC4 09            ret
0416+  1DC5             
0417+  1DC5             ;-----------------------------------------------------------------------------
0418+  1DC5             ; PRINT 16BIT HEX INTEGER
0419+  1DC5             ; integer value in reg B
0420+  1DC5             ;-----------------------------------------------------------------------------
0421+  1DC5             print_u16x:
0422+  1DC5 D7            push a
0423+  1DC6 D8            push b
0424+  1DC7 DD            push bl
0425+  1DC8 30            mov bl, bh
0426+  1DC9 07 F1 1B      call _itoa        ; convert bh to char in A
0427+  1DCC 2F            mov bl, al        ; save al
0428+  1DCD 19 00         mov al, 0
0429+  1DCF 05 03         syscall sys_io        ; display AH
0430+  1DD1 24            mov ah, bl        ; retrieve al
0431+  1DD2 19 00         mov al, 0
0432+  1DD4 05 03         syscall sys_io        ; display AL
0433+  1DD6             
0434+  1DD6 EA            pop bl
0435+  1DD7 07 F1 1B      call _itoa        ; convert bh to char in A
0436+  1DDA 2F            mov bl, al        ; save al
0437+  1DDB 19 00         mov al, 0
0438+  1DDD 05 03         syscall sys_io        ; display AH
0439+  1DDF 24            mov ah, bl        ; retrieve al
0440+  1DE0 19 00         mov al, 0
0441+  1DE2 05 03         syscall sys_io        ; display AL
0442+  1DE4             
0443+  1DE4 E5            pop b
0444+  1DE5 E4            pop a
0445+  1DE6 09            ret
0446+  1DE7             
0447+  1DE7             ;-----------------------------------------------------------------------------
0448+  1DE7             ; INPUT 16BIT HEX INTEGER
0449+  1DE7             ; read 16bit integer into A
0450+  1DE7             ;-----------------------------------------------------------------------------
0451+  1DE7             scan_u16x:
0452+  1DE7 F8 10 00      enter 16
0453+  1DEA D8            push b
0454+  1DEB DA            push d
0455+  1DEC             
0456+  1DEC FA F1 FF      lea d, [bp + -15]
0457+  1DEF 07 2A 1C      call _gets        ; get number
0458+  1DF2             
0459+  1DF2 32            mov bl, [d]
0460+  1DF3 37            mov bh, bl
0461+  1DF4 33 01 00      mov bl, [d + 1]
0462+  1DF7 07 E1 1B      call _atoi        ; convert to int in AL
0463+  1DFA 23            mov ah, al        ; move to AH
0464+  1DFB             
0465+  1DFB 33 02 00      mov bl, [d + 2]
0466+  1DFE 37            mov bh, bl
0467+  1DFF 33 03 00      mov bl, [d + 3]
0468+  1E02 07 E1 1B      call _atoi        ; convert to int in AL
0469+  1E05             
0470+  1E05 E7            pop d
0471+  1E06 E5            pop b
0472+  1E07 F9            leave
0473+  1E08 09            ret
0474+  1E09             
0475+  1E09             ;-----------------------------------------------------------------------------
0476+  1E09             ; PRINT 8bit HEX INTEGER
0477+  1E09             ; integer value in reg bl
0478+  1E09             ;-----------------------------------------------------------------------------
0479+  1E09             print_u8x:
0480+  1E09 D7            push a
0481+  1E0A DD            push bl
0482+  1E0B             
0483+  1E0B 07 F1 1B      call _itoa        ; convert bl to char in A
0484+  1E0E 2F            mov bl, al        ; save al
0485+  1E0F 19 00         mov al, 0
0486+  1E11 05 03         syscall sys_io        ; display AH
0487+  1E13 24            mov ah, bl        ; retrieve al
0488+  1E14 19 00         mov al, 0
0489+  1E16 05 03         syscall sys_io        ; display AL
0490+  1E18             
0491+  1E18 EA            pop bl
0492+  1E19 E4            pop a
0493+  1E1A 09            ret
0494+  1E1B             
0495+  1E1B             ;-----------------------------------------------------------------------------
0496+  1E1B             ; print 8bit decimal unsigned number
0497+  1E1B             ; input number in AL
0498+  1E1B             ;-----------------------------------------------------------------------------
0499+  1E1B             print_u8d:
0500+  1E1B D7            push a
0501+  1E1C D8            push b
0502+  1E1D             
0503+  1E1D 22 00         mov ah, 0
0504+  1E1F 26 64 00      mov b, 100
0505+  1E22 AE            div a, b
0506+  1E23 D8            push b      ; save remainder
0507+  1E24 B9 00         cmp al, 0
0508+  1E26 C6 30 1E      je skip100
0509+  1E29 6A 30         add al, $30
0510+  1E2B 23            mov ah, al
0511+  1E2C 19 00         mov al, 0
0512+  1E2E 05 03         syscall sys_io  ; print coeff
0513+  1E30             skip100:
0514+  1E30 E4            pop a
0515+  1E31 22 00         mov ah, 0
0516+  1E33 26 0A 00      mov b, 10
0517+  1E36 AE            div a, b
0518+  1E37 D8            push b      ; save remainder
0519+  1E38 B9 00         cmp al, 0
0520+  1E3A C6 44 1E      je skip10
0521+  1E3D 6A 30         add al, $30
0522+  1E3F 23            mov ah, al
0523+  1E40 19 00         mov al, 0
0524+  1E42 05 03         syscall sys_io  ; print coeff
0525+  1E44             skip10:
0526+  1E44 E4            pop a
0527+  1E45 1B            mov al, bl
0528+  1E46 6A 30         add al, $30
0529+  1E48 23            mov ah, al
0530+  1E49 19 00         mov al, 0
0531+  1E4B 05 03         syscall sys_io  ; print coeff
0532+  1E4D E5            pop b
0533+  1E4E E4            pop a
0534+  1E4F 09            ret
0535+  1E50             
0536+  1E50             ;-----------------------------------------------------------------------------
0537+  1E50             ; INPUT 8BIT HEX INTEGER
0538+  1E50             ; read 8bit integer into AL
0539+  1E50             ;-----------------------------------------------------------------------------
0540+  1E50             scan_u8x:
0541+  1E50 F8 04 00      enter 4
0542+  1E53 D8            push b
0543+  1E54 DA            push d
0544+  1E55             
0545+  1E55 FA FD FF      lea d, [bp + -3]
0546+  1E58 07 2A 1C      call _gets        ; get number
0547+  1E5B             
0548+  1E5B 32            mov bl, [d]
0549+  1E5C 37            mov bh, bl
0550+  1E5D 33 01 00      mov bl, [d + 1]
0551+  1E60 07 E1 1B      call _atoi        ; convert to int in AL
0552+  1E63             
0553+  1E63 E7            pop d
0554+  1E64 E5            pop b
0555+  1E65 F9            leave
0556+  1E66 09            ret
0557+  1E67             
0558+  1E67             ;-----------------------------------------------------------------------------
0559+  1E67             ; input decimal number
0560+  1E67             ; result in A
0561+  1E67             ; 655'\0'
0562+  1E67             ; low--------high
0563+  1E67             ;-----------------------------------------------------------------------------
0564+  1E67             scan_u16d:
0565+  1E67 F8 08 00      enter 8
0566+  1E6A E2            push si
0567+  1E6B D8            push b
0568+  1E6C D9            push c
0569+  1E6D DA            push d
0570+  1E6E FA F9 FF      lea d, [bp +- 7]
0571+  1E71 07 2A 1C      call _gets
0572+  1E74 07 83 1B      call _strlen      ; get string length in C
0573+  1E77 7E            dec c
0574+  1E78 FD 4E         mov si, d
0575+  1E7A 12            mov a, c
0576+  1E7B FD 99         shl a
0577+  1E7D 3B B9 1E      mov d, table_power
0578+  1E80 59            add d, a
0579+  1E81 38 00 00      mov c, 0
0580+  1E84             mul_loop:
0581+  1E84 F6            lodsb      ; load ASCII to al
0582+  1E85 B9 00         cmp al, 0
0583+  1E87 C6 9A 1E      je mul_exit
0584+  1E8A 6F 30         sub al, $30    ; make into integer
0585+  1E8C 22 00         mov ah, 0
0586+  1E8E 2A            mov b, [d]
0587+  1E8F AC            mul a, b      ; result in B since it fits in 16bits
0588+  1E90 11            mov a, b
0589+  1E91 28            mov b, c
0590+  1E92 54            add a, b
0591+  1E93 39            mov c, a
0592+  1E94 63 02 00      sub d, 2
0593+  1E97 0A 84 1E      jmp mul_loop
0594+  1E9A             mul_exit:
0595+  1E9A 12            mov a, c
0596+  1E9B E7            pop d
0597+  1E9C E6            pop c
0598+  1E9D E5            pop b
0599+  1E9E EF            pop si
0600+  1E9F F9            leave
0601+  1EA0 09            ret
0602+  1EA1             
0603+  1EA1 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1EA5 34 35 36 37 
0603+  1EA9 38 39 41 42 
0603+  1EAD 43 44 45 46 
0604+  1EB1 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1EB5 1B 5B 48 00 
0605+  1EB9             
0606+  1EB9             table_power:
0607+  1EB9 01 00         .dw 1
0608+  1EBB 0A 00         .dw 10
0609+  1EBD 64 00         .dw 100
0610+  1EBF E8 03         .dw 1000
0611+  1EC1 10 27         .dw 100003702   1EC3             ; --- END INLINE ASM BLOCK
3703   1EC3             
3704   1EC3 F9            leave
3705   1EC4 09            ret
3706   1EC5             ; --- END TEXT BLOCK
3707   1EC5             
3708   1EC5             ; --- BEGIN DATA BLOCK
3709   1EC5 00 00 00 00 _s_data: .fill 256, 0
3709   1EC9 00 00 00 00 
3709   1ECD 00 00 00 00 
3709   1ED1 00 00 00 00 
3709   1ED5 00 00 00 00 
3709   1ED9 00 00 00 00 
3709   1EDD 00 00 00 00 
3709   1EE1 00 00 00 00 
3709   1EE5 00 00 00 00 
3709   1EE9 00 00 00 00 
3709   1EED 00 00 00 00 
3709   1EF1 00 00 00 00 
3709   1EF5 00 00 00 00 
3709   1EF9 00 00 00 00 
3709   1EFD 00 00 00 00 
3709   1F01 00 00 00 00 
3709   1F05 00 00 00 00 
3709   1F09 00 00 00 00 
3709   1F0D 00 00 00 00 
3709   1F11 00 00 00 00 
3709   1F15 00 00 00 00 
3709   1F19 00 00 00 00 
3709   1F1D 00 00 00 00 
3709   1F21 00 00 00 00 
3709   1F25 00 00 00 00 
3709   1F29 00 00 00 00 
3709   1F2D 00 00 00 00 
3709   1F31 00 00 00 00 
3709   1F35 00 00 00 00 
3709   1F39 00 00 00 00 
3709   1F3D 00 00 00 00 
3709   1F41 00 00 00 00 
3709   1F45 00 00 00 00 
3709   1F49 00 00 00 00 
3709   1F4D 00 00 00 00 
3709   1F51 00 00 00 00 
3709   1F55 00 00 00 00 
3709   1F59 00 00 00 00 
3709   1F5D 00 00 00 00 
3709   1F61 00 00 00 00 
3709   1F65 00 00 00 00 
3709   1F69 00 00 00 00 
3709   1F6D 00 00 00 00 
3709   1F71 00 00 00 00 
3709   1F75 00 00 00 00 
3709   1F79 00 00 00 00 
3709   1F7D 00 00 00 00 
3709   1F81 00 00 00 00 
3709   1F85 00 00 00 00 
3709   1F89 00 00 00 00 
3709   1F8D 00 00 00 00 
3709   1F91 00 00 00 00 
3709   1F95 00 00 00 00 
3709   1F99 00 00 00 00 
3709   1F9D 00 00 00 00 
3709   1FA1 00 00 00 00 
3709   1FA5 00 00 00 00 
3709   1FA9 00 00 00 00 
3709   1FAD 00 00 00 00 
3709   1FB1 00 00 00 00 
3709   1FB5 00 00 00 00 
3709   1FB9 00 00 00 00 
3709   1FBD 00 00 00 00 
3709   1FC1 00 00 00 00 
3710   1FC5 48 65 6C 6C _s0: .db "Hello World!", 0
3710   1FC9 6F 20 57 6F 
3710   1FCD 72 6C 64 21 
3710   1FD1 00 
3711   1FD2 49 6E 74 65 _s1: .db "Integer: %d, Char: %c, String: %s\n\n", 0
3711   1FD6 67 65 72 3A 
3711   1FDA 20 25 64 2C 
3711   1FDE 20 43 68 61 
3711   1FE2 72 3A 20 25 
3711   1FE6 63 2C 20 53 
3711   1FEA 74 72 69 6E 
3711   1FEE 67 3A 20 25 
3711   1FF2 73 0A 0A 00 
3712   1FF6 46 69 6E 61 _s2: .db "Final String: %s", 0
3712   1FFA 6C 20 53 74 
3712   1FFE 72 69 6E 67 
3712   2002 3A 20 25 73 
3712   2006 00 
3713   2007 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
3713   200B 70 65 63 74 
3713   200F 65 64 20 66 
3713   2013 6F 72 6D 61 
3713   2017 74 20 69 6E 
3713   201B 20 70 72 69 
3713   201F 6E 74 66 2E 
3713   2023 00 
3714   2024 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
3714   2028 72 3A 20 55 
3714   202C 6E 6B 6E 6F 
3714   2030 77 6E 20 61 
3714   2034 72 67 75 6D 
3714   2038 65 6E 74 20 
3714   203C 74 79 70 65 
3714   2040 2E 0A 00 
3715   2043 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
3715   2047 1B 5B 48 00 
3716   204B             
3717   204B 4D 20       _heap_top: .dw _heap
3718   204D 00          _heap: .db 0
3719   204E             ; --- END DATA BLOCK
3720   204E             
3721   204E             .end
tasm: Number of errors = 0
