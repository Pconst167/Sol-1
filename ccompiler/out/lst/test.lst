0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; 120 + myfunc(1); 
0011   0408 FD 2E 78 00   mov32 cb, $00000078
0011   040C 00 00 
0012   040E             ; --- START TERMS
0013   040E D7            push a
0014   040F 11            mov a, b
0015   0410             ; --- START FUNCTION CALL
0016   0410 FD 2E 01 00   mov32 cb, $00000001
0016   0414 00 00 
0017   0416 FD AB         swp b
0018   0418 D8            push b
0019   0419 07 18 20      call myfunc
0020   041C 51 02 00      add sp, 2
0021   041F             ; --- END FUNCTION CALL
0022   041F 56            add b, a
0023   0420 E4            pop a
0024   0421             ; --- END TERMS
0025   0421             ; printf("Hello"); 
0026   0421             ; --- START FUNCTION CALL
0027   0421 26 1F 20      mov b, _s0 ; "Hello"
0028   0424 FD AB         swp b
0029   0426 D8            push b
0030   0427 07 A2 09      call printf
0031   042A 51 02 00      add sp, 2
0032   042D             ; --- END FUNCTION CALL
0033   042D             ; print_signed(123); 
0034   042D             ; --- START FUNCTION CALL
0035   042D FD 2E 7B 00   mov32 cb, $0000007b
0035   0431 00 00 
0036   0433 FD AB         swp b
0037   0435 D8            push b
0038   0436 07 98 16      call print_signed
0039   0439 51 02 00      add sp, 2
0040   043C             ; --- END FUNCTION CALL
0041   043C             ; strcpy("Hello", "World"); 
0042   043C             ; --- START FUNCTION CALL
0043   043C 26 25 20      mov b, _s1 ; "World"
0044   043F FD AB         swp b
0045   0441 D8            push b
0046   0442 26 1F 20      mov b, _s0 ; "Hello"
0047   0445 FD AB         swp b
0048   0447 D8            push b
0049   0448 07 71 04      call strcpy
0050   044B 51 04 00      add sp, 4
0051   044E             ; --- END FUNCTION CALL
0052   044E             ; strcat("Hi", "Hello"); 
0053   044E             ; --- START FUNCTION CALL
0054   044E 26 1F 20      mov b, _s0 ; "Hello"
0055   0451 FD AB         swp b
0056   0453 D8            push b
0057   0454 26 2B 20      mov b, _s2 ; "Hi"
0058   0457 FD AB         swp b
0059   0459 D8            push b
0060   045A 07 74 05      call strcat
0061   045D 51 04 00      add sp, 4
0062   0460             ; --- END FUNCTION CALL
0063   0460             ; print_signed(555); 
0064   0460             ; --- START FUNCTION CALL
0065   0460 FD 2E 2B 02   mov32 cb, $0000022b
0065   0464 00 00 
0066   0466 FD AB         swp b
0067   0468 D8            push b
0068   0469 07 98 16      call print_signed
0069   046C 51 02 00      add sp, 2
0070   046F             ; --- END FUNCTION CALL
0071   046F 05 0B         syscall sys_terminate_proc
0072   0471             
0073   0471             strcpy:
0074   0471 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0075   0474             ; char *psrc; 
0076   0474 52 02 00      sub sp, 2
0077   0477             ; char *pdest; 
0078   0477 52 02 00      sub sp, 2
0079   047A             ; psrc = src; 
0080   047A FA FF FF      lea d, [bp + -1] ; $psrc
0081   047D DA            push d
0082   047E FA 07 00      lea d, [bp + 7] ; $src
0083   0481 2A            mov b, [d]
0084   0482 38 00 00      mov c, 0
0085   0485 E7            pop d
0086   0486 FD 43         mov [d], b
0087   0488             ; pdest = dest; 
0088   0488 FA FD FF      lea d, [bp + -3] ; $pdest
0089   048B DA            push d
0090   048C FA 05 00      lea d, [bp + 5] ; $dest
0091   048F 2A            mov b, [d]
0092   0490 38 00 00      mov c, 0
0093   0493 E7            pop d
0094   0494 FD 43         mov [d], b
0095   0496             ; while(*psrc) *pdest++ = *psrc++; 
0096   0496             _while1_cond:
0097   0496 FA FF FF      lea d, [bp + -1] ; $psrc
0098   0499 2A            mov b, [d]
0099   049A 38 00 00      mov c, 0
0100   049D 74            mov d, b
0101   049E 32            mov bl, [d]
0102   049F A7 00         mov bh, 0
0103   04A1 38 00 00      mov c, 0
0104   04A4 C0 00 00      cmp b, 0
0105   04A7 C6 D8 04      je _while1_exit
0106   04AA             _while1_block:
0107   04AA             ; *pdest++ = *psrc++; 
0108   04AA FA FD FF      lea d, [bp + -3] ; $pdest
0109   04AD 2A            mov b, [d]
0110   04AE 38 00 00      mov c, 0
0111   04B1 FD 77         inc b
0112   04B3 FA FD FF      lea d, [bp + -3] ; $pdest
0113   04B6 FD 43         mov [d], b
0114   04B8 FD 7D         dec b
0115   04BA D8            push b
0116   04BB FA FF FF      lea d, [bp + -1] ; $psrc
0117   04BE 2A            mov b, [d]
0118   04BF 38 00 00      mov c, 0
0119   04C2 FD 77         inc b
0120   04C4 FA FF FF      lea d, [bp + -1] ; $psrc
0121   04C7 FD 43         mov [d], b
0122   04C9 FD 7D         dec b
0123   04CB 74            mov d, b
0124   04CC 32            mov bl, [d]
0125   04CD A7 00         mov bh, 0
0126   04CF 38 00 00      mov c, 0
0127   04D2 E7            pop d
0128   04D3 FD 3E         mov [d], bl
0129   04D5 0A 96 04      jmp _while1_cond
0130   04D8             _while1_exit:
0131   04D8             ; *pdest = '\0'; 
0132   04D8 FA FD FF      lea d, [bp + -3] ; $pdest
0133   04DB 2A            mov b, [d]
0134   04DC 38 00 00      mov c, 0
0135   04DF D8            push b
0136   04E0 FD 2E 00 00   mov32 cb, $00000000
0136   04E4 00 00 
0137   04E6 E7            pop d
0138   04E7 FD 3E         mov [d], bl
0139   04E9 F9            leave
0140   04EA 09            ret
0141   04EB             
0142   04EB             strcmp:
0143   04EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0144   04EE             ; while (*s1 && (*s1 == *s2)) { 
0145   04EE             _while2_cond:
0146   04EE FA 05 00      lea d, [bp + 5] ; $s1
0147   04F1 2A            mov b, [d]
0148   04F2 38 00 00      mov c, 0
0149   04F5 74            mov d, b
0150   04F6 32            mov bl, [d]
0151   04F7 A7 00         mov bh, 0
0152   04F9 38 00 00      mov c, 0
0153   04FC             ; --- START LOGICAL AND
0154   04FC D7            push a
0155   04FD 11            mov a, b
0156   04FE FA 05 00      lea d, [bp + 5] ; $s1
0157   0501 2A            mov b, [d]
0158   0502 38 00 00      mov c, 0
0159   0505 74            mov d, b
0160   0506 32            mov bl, [d]
0161   0507 A7 00         mov bh, 0
0162   0509 38 00 00      mov c, 0
0163   050C             ; --- START RELATIONAL
0164   050C D7            push a
0165   050D 11            mov a, b
0166   050E FA 07 00      lea d, [bp + 7] ; $s2
0167   0511 2A            mov b, [d]
0168   0512 38 00 00      mov c, 0
0169   0515 74            mov d, b
0170   0516 32            mov bl, [d]
0171   0517 A7 00         mov bh, 0
0172   0519 38 00 00      mov c, 0
0173   051C B0            cmp a, b
0174   051D FD 71         seq ; ==
0175   051F E4            pop a
0176   0520             ; --- END RELATIONAL
0177   0520 FD A7         sand a, b
0178   0522 E4            pop a
0179   0523             ; --- END LOGICAL AND
0180   0523 C0 00 00      cmp b, 0
0181   0526 C6 4C 05      je _while2_exit
0182   0529             _while2_block:
0183   0529             ; s1++; 
0184   0529 FA 05 00      lea d, [bp + 5] ; $s1
0185   052C 2A            mov b, [d]
0186   052D 38 00 00      mov c, 0
0187   0530 FD 77         inc b
0188   0532 FA 05 00      lea d, [bp + 5] ; $s1
0189   0535 FD 43         mov [d], b
0190   0537 FD 7D         dec b
0191   0539             ; s2++; 
0192   0539 FA 07 00      lea d, [bp + 7] ; $s2
0193   053C 2A            mov b, [d]
0194   053D 38 00 00      mov c, 0
0195   0540 FD 77         inc b
0196   0542 FA 07 00      lea d, [bp + 7] ; $s2
0197   0545 FD 43         mov [d], b
0198   0547 FD 7D         dec b
0199   0549 0A EE 04      jmp _while2_cond
0200   054C             _while2_exit:
0201   054C             ; return *s1 - *s2; 
0202   054C FA 05 00      lea d, [bp + 5] ; $s1
0203   054F 2A            mov b, [d]
0204   0550 38 00 00      mov c, 0
0205   0553 74            mov d, b
0206   0554 32            mov bl, [d]
0207   0555 A7 00         mov bh, 0
0208   0557 38 00 00      mov c, 0
0209   055A             ; --- START TERMS
0210   055A D7            push a
0211   055B 11            mov a, b
0212   055C FA 07 00      lea d, [bp + 7] ; $s2
0213   055F 2A            mov b, [d]
0214   0560 38 00 00      mov c, 0
0215   0563 74            mov d, b
0216   0564 32            mov bl, [d]
0217   0565 A7 00         mov bh, 0
0218   0567 38 00 00      mov c, 0
0219   056A 60            sub a, b
0220   056B 27            mov b, a
0221   056C E4            pop a
0222   056D             ; --- END TERMS
0223   056D F9            leave
0224   056E 09            ret
0225   056F             
0226   056F             strncmp:
0227   056F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0228   0572 F9            leave
0229   0573 09            ret
0230   0574             
0231   0574             strcat:
0232   0574 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0233   0577             ; int dest_len; 
0234   0577 52 02 00      sub sp, 2
0235   057A             ; int i; 
0236   057A 52 02 00      sub sp, 2
0237   057D             ; dest_len = strlen(dest); 
0238   057D FA FF FF      lea d, [bp + -1] ; $dest_len
0239   0580 DA            push d
0240   0581             ; --- START FUNCTION CALL
0241   0581 FA 05 00      lea d, [bp + 5] ; $dest
0242   0584 2A            mov b, [d]
0243   0585 38 00 00      mov c, 0
0244   0588 FD AB         swp b
0245   058A D8            push b
0246   058B 07 57 06      call strlen
0247   058E 51 02 00      add sp, 2
0248   0591             ; --- END FUNCTION CALL
0249   0591 E7            pop d
0250   0592 FD 43         mov [d], b
0251   0594             ; for (i = 0; src[i] != 0; i=i+1) { 
0252   0594             _for3_init:
0253   0594 FA FD FF      lea d, [bp + -3] ; $i
0254   0597 DA            push d
0255   0598 FD 2E 00 00   mov32 cb, $00000000
0255   059C 00 00 
0256   059E E7            pop d
0257   059F FD 43         mov [d], b
0258   05A1             _for3_cond:
0259   05A1 FA 07 00      lea d, [bp + 7] ; $src
0260   05A4 FD 2A         mov d, [d]
0261   05A6 D7            push a
0262   05A7 DA            push d
0263   05A8 FA FD FF      lea d, [bp + -3] ; $i
0264   05AB 2A            mov b, [d]
0265   05AC 38 00 00      mov c, 0
0266   05AF E7            pop d
0267   05B0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0268   05B4 E4            pop a
0269   05B5 32            mov bl, [d]
0270   05B6 A7 00         mov bh, 0
0271   05B8 38 00 00      mov c, 0
0272   05BB             ; --- START RELATIONAL
0273   05BB D7            push a
0274   05BC 11            mov a, b
0275   05BD FD 2E 00 00   mov32 cb, $00000000
0275   05C1 00 00 
0276   05C3 B0            cmp a, b
0277   05C4 FD 72         sneq ; !=
0278   05C6 E4            pop a
0279   05C7             ; --- END RELATIONAL
0280   05C7 C0 00 00      cmp b, 0
0281   05CA C6 25 06      je _for3_exit
0282   05CD             _for3_block:
0283   05CD             ; dest[dest_len + i] = src[i]; 
0284   05CD FA 05 00      lea d, [bp + 5] ; $dest
0285   05D0 FD 2A         mov d, [d]
0286   05D2 D7            push a
0287   05D3 DA            push d
0288   05D4 FA FF FF      lea d, [bp + -1] ; $dest_len
0289   05D7 2A            mov b, [d]
0290   05D8 38 00 00      mov c, 0
0291   05DB             ; --- START TERMS
0292   05DB D7            push a
0293   05DC 11            mov a, b
0294   05DD FA FD FF      lea d, [bp + -3] ; $i
0295   05E0 2A            mov b, [d]
0296   05E1 38 00 00      mov c, 0
0297   05E4 56            add b, a
0298   05E5 E4            pop a
0299   05E6             ; --- END TERMS
0300   05E6 E7            pop d
0301   05E7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0302   05EB E4            pop a
0303   05EC DA            push d
0304   05ED FA 07 00      lea d, [bp + 7] ; $src
0305   05F0 FD 2A         mov d, [d]
0306   05F2 D7            push a
0307   05F3 DA            push d
0308   05F4 FA FD FF      lea d, [bp + -3] ; $i
0309   05F7 2A            mov b, [d]
0310   05F8 38 00 00      mov c, 0
0311   05FB E7            pop d
0312   05FC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0313   0600 E4            pop a
0314   0601 32            mov bl, [d]
0315   0602 A7 00         mov bh, 0
0316   0604 38 00 00      mov c, 0
0317   0607 E7            pop d
0318   0608 FD 3E         mov [d], bl
0319   060A             _for3_update:
0320   060A FA FD FF      lea d, [bp + -3] ; $i
0321   060D DA            push d
0322   060E FA FD FF      lea d, [bp + -3] ; $i
0323   0611 2A            mov b, [d]
0324   0612 38 00 00      mov c, 0
0325   0615             ; --- START TERMS
0326   0615 D7            push a
0327   0616 11            mov a, b
0328   0617 FD 2E 01 00   mov32 cb, $00000001
0328   061B 00 00 
0329   061D 56            add b, a
0330   061E E4            pop a
0331   061F             ; --- END TERMS
0332   061F E7            pop d
0333   0620 FD 43         mov [d], b
0334   0622 0A A1 05      jmp _for3_cond
0335   0625             _for3_exit:
0336   0625             ; dest[dest_len + i] = 0; 
0337   0625 FA 05 00      lea d, [bp + 5] ; $dest
0338   0628 FD 2A         mov d, [d]
0339   062A D7            push a
0340   062B DA            push d
0341   062C FA FF FF      lea d, [bp + -1] ; $dest_len
0342   062F 2A            mov b, [d]
0343   0630 38 00 00      mov c, 0
0344   0633             ; --- START TERMS
0345   0633 D7            push a
0346   0634 11            mov a, b
0347   0635 FA FD FF      lea d, [bp + -3] ; $i
0348   0638 2A            mov b, [d]
0349   0639 38 00 00      mov c, 0
0350   063C 56            add b, a
0351   063D E4            pop a
0352   063E             ; --- END TERMS
0353   063E E7            pop d
0354   063F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0355   0643 E4            pop a
0356   0644 DA            push d
0357   0645 FD 2E 00 00   mov32 cb, $00000000
0357   0649 00 00 
0358   064B E7            pop d
0359   064C FD 3E         mov [d], bl
0360   064E             ; return dest; 
0361   064E FA 05 00      lea d, [bp + 5] ; $dest
0362   0651 2A            mov b, [d]
0363   0652 38 00 00      mov c, 0
0364   0655 F9            leave
0365   0656 09            ret
0366   0657             
0367   0657             strlen:
0368   0657 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0369   065A             ; int length; 
0370   065A 52 02 00      sub sp, 2
0371   065D             ; length = 0; 
0372   065D FA FF FF      lea d, [bp + -1] ; $length
0373   0660 DA            push d
0374   0661 FD 2E 00 00   mov32 cb, $00000000
0374   0665 00 00 
0375   0667 E7            pop d
0376   0668 FD 43         mov [d], b
0377   066A             ; while (str[length] != 0) { 
0378   066A             _while4_cond:
0379   066A FA 05 00      lea d, [bp + 5] ; $str
0380   066D FD 2A         mov d, [d]
0381   066F D7            push a
0382   0670 DA            push d
0383   0671 FA FF FF      lea d, [bp + -1] ; $length
0384   0674 2A            mov b, [d]
0385   0675 38 00 00      mov c, 0
0386   0678 E7            pop d
0387   0679 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0388   067D E4            pop a
0389   067E 32            mov bl, [d]
0390   067F A7 00         mov bh, 0
0391   0681 38 00 00      mov c, 0
0392   0684             ; --- START RELATIONAL
0393   0684 D7            push a
0394   0685 11            mov a, b
0395   0686 FD 2E 00 00   mov32 cb, $00000000
0395   068A 00 00 
0396   068C B0            cmp a, b
0397   068D FD 72         sneq ; !=
0398   068F E4            pop a
0399   0690             ; --- END RELATIONAL
0400   0690 C0 00 00      cmp b, 0
0401   0693 C6 A9 06      je _while4_exit
0402   0696             _while4_block:
0403   0696             ; length++; 
0404   0696 FA FF FF      lea d, [bp + -1] ; $length
0405   0699 2A            mov b, [d]
0406   069A 38 00 00      mov c, 0
0407   069D 11            mov a, b
0408   069E FD 77         inc b
0409   06A0 FA FF FF      lea d, [bp + -1] ; $length
0410   06A3 FD 43         mov [d], b
0411   06A5 27            mov b, a
0412   06A6 0A 6A 06      jmp _while4_cond
0413   06A9             _while4_exit:
0414   06A9             ; return length; 
0415   06A9 FA FF FF      lea d, [bp + -1] ; $length
0416   06AC 2A            mov b, [d]
0417   06AD 38 00 00      mov c, 0
0418   06B0 F9            leave
0419   06B1 09            ret
0420   06B2             
0421   06B2             exit:
0422   06B2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0423   06B5             ; --- BEGIN INLINE ASM SEGMENT
0424   06B5 05 0B         syscall sys_terminate_proc
0425   06B7             ; --- END INLINE ASM SEGMENT
0426   06B7 F9            leave
0427   06B8 09            ret
0428   06B9             
0429   06B9             memset:
0430   06B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0431   06BC             ; int i; 
0432   06BC 52 02 00      sub sp, 2
0433   06BF             ; for(i = 0; i < size; i++){ 
0434   06BF             _for5_init:
0435   06BF FA FF FF      lea d, [bp + -1] ; $i
0436   06C2 DA            push d
0437   06C3 FD 2E 00 00   mov32 cb, $00000000
0437   06C7 00 00 
0438   06C9 E7            pop d
0439   06CA FD 43         mov [d], b
0440   06CC             _for5_cond:
0441   06CC FA FF FF      lea d, [bp + -1] ; $i
0442   06CF 2A            mov b, [d]
0443   06D0 38 00 00      mov c, 0
0444   06D3             ; --- START RELATIONAL
0445   06D3 D7            push a
0446   06D4 11            mov a, b
0447   06D5 FA 08 00      lea d, [bp + 8] ; $size
0448   06D8 2A            mov b, [d]
0449   06D9 38 00 00      mov c, 0
0450   06DC B0            cmp a, b
0451   06DD FD 73         slt ; < (signed)
0452   06DF E4            pop a
0453   06E0             ; --- END RELATIONAL
0454   06E0 C0 00 00      cmp b, 0
0455   06E3 C6 18 07      je _for5_exit
0456   06E6             _for5_block:
0457   06E6             ; *(s+i) = c; 
0458   06E6 FA 05 00      lea d, [bp + 5] ; $s
0459   06E9 2A            mov b, [d]
0460   06EA 38 00 00      mov c, 0
0461   06ED             ; --- START TERMS
0462   06ED D7            push a
0463   06EE 11            mov a, b
0464   06EF FA FF FF      lea d, [bp + -1] ; $i
0465   06F2 2A            mov b, [d]
0466   06F3 38 00 00      mov c, 0
0467   06F6 56            add b, a
0468   06F7 E4            pop a
0469   06F8             ; --- END TERMS
0470   06F8 D8            push b
0471   06F9 FA 07 00      lea d, [bp + 7] ; $c
0472   06FC 32            mov bl, [d]
0473   06FD A7 00         mov bh, 0
0474   06FF 38 00 00      mov c, 0
0475   0702 E7            pop d
0476   0703 FD 3E         mov [d], bl
0477   0705             _for5_update:
0478   0705 FA FF FF      lea d, [bp + -1] ; $i
0479   0708 2A            mov b, [d]
0480   0709 38 00 00      mov c, 0
0481   070C 11            mov a, b
0482   070D FD 77         inc b
0483   070F FA FF FF      lea d, [bp + -1] ; $i
0484   0712 FD 43         mov [d], b
0485   0714 27            mov b, a
0486   0715 0A CC 06      jmp _for5_cond
0487   0718             _for5_exit:
0488   0718             ; return s; 
0489   0718 FA 05 00      lea d, [bp + 5] ; $s
0490   071B 2A            mov b, [d]
0491   071C 38 00 00      mov c, 0
0492   071F F9            leave
0493   0720 09            ret
0494   0721             
0495   0721             atoi:
0496   0721 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0497   0724             ; int result = 0;  // Initialize result 
0498   0724 52 02 00      sub sp, 2
0499   0727             ; --- START LOCAL VAR INITIALIZATION
0500   0727 FA FF FF      lea d, [bp + -1] ; $result
0501   072A DA            push d
0502   072B FD 2E 00 00   mov32 cb, $00000000
0502   072F 00 00 
0503   0731 E7            pop d
0504   0732 FD 43         mov [d], b
0505   0734             ; --- END LOCAL VAR INITIALIZATION
0506   0734             ; int sign = 1;    // Initialize sign as positive 
0507   0734 52 02 00      sub sp, 2
0508   0737             ; --- START LOCAL VAR INITIALIZATION
0509   0737 FA FD FF      lea d, [bp + -3] ; $sign
0510   073A DA            push d
0511   073B FD 2E 01 00   mov32 cb, $00000001
0511   073F 00 00 
0512   0741 E7            pop d
0513   0742 FD 43         mov [d], b
0514   0744             ; --- END LOCAL VAR INITIALIZATION
0515   0744             ; while (*str == ' ') str++; 
0516   0744             _while6_cond:
0517   0744 FA 05 00      lea d, [bp + 5] ; $str
0518   0747 2A            mov b, [d]
0519   0748 38 00 00      mov c, 0
0520   074B 74            mov d, b
0521   074C 32            mov bl, [d]
0522   074D A7 00         mov bh, 0
0523   074F 38 00 00      mov c, 0
0524   0752             ; --- START RELATIONAL
0525   0752 D7            push a
0526   0753 11            mov a, b
0527   0754 FD 2E 20 00   mov32 cb, $00000020
0527   0758 00 00 
0528   075A B0            cmp a, b
0529   075B FD 71         seq ; ==
0530   075D E4            pop a
0531   075E             ; --- END RELATIONAL
0532   075E C0 00 00      cmp b, 0
0533   0761 C6 77 07      je _while6_exit
0534   0764             _while6_block:
0535   0764             ; str++; 
0536   0764 FA 05 00      lea d, [bp + 5] ; $str
0537   0767 2A            mov b, [d]
0538   0768 38 00 00      mov c, 0
0539   076B FD 77         inc b
0540   076D FA 05 00      lea d, [bp + 5] ; $str
0541   0770 FD 43         mov [d], b
0542   0772 FD 7D         dec b
0543   0774 0A 44 07      jmp _while6_cond
0544   0777             _while6_exit:
0545   0777             ; if (*str == '-' || *str == '+') { 
0546   0777             _if7_cond:
0547   0777 FA 05 00      lea d, [bp + 5] ; $str
0548   077A 2A            mov b, [d]
0549   077B 38 00 00      mov c, 0
0550   077E 74            mov d, b
0551   077F 32            mov bl, [d]
0552   0780 A7 00         mov bh, 0
0553   0782 38 00 00      mov c, 0
0554   0785             ; --- START RELATIONAL
0555   0785 D7            push a
0556   0786 11            mov a, b
0557   0787 FD 2E 2D 00   mov32 cb, $0000002d
0557   078B 00 00 
0558   078D B0            cmp a, b
0559   078E FD 71         seq ; ==
0560   0790 E4            pop a
0561   0791             ; --- END RELATIONAL
0562   0791             ; --- START LOGICAL OR
0563   0791 D7            push a
0564   0792 11            mov a, b
0565   0793 FA 05 00      lea d, [bp + 5] ; $str
0566   0796 2A            mov b, [d]
0567   0797 38 00 00      mov c, 0
0568   079A 74            mov d, b
0569   079B 32            mov bl, [d]
0570   079C A7 00         mov bh, 0
0571   079E 38 00 00      mov c, 0
0572   07A1             ; --- START RELATIONAL
0573   07A1 D7            push a
0574   07A2 11            mov a, b
0575   07A3 FD 2E 2B 00   mov32 cb, $0000002b
0575   07A7 00 00 
0576   07A9 B0            cmp a, b
0577   07AA FD 71         seq ; ==
0578   07AC E4            pop a
0579   07AD             ; --- END RELATIONAL
0580   07AD FD A8         sor a, b ; ||
0581   07AF E4            pop a
0582   07B0             ; --- END LOGICAL OR
0583   07B0 C0 00 00      cmp b, 0
0584   07B3 C6 FB 07      je _if7_exit
0585   07B6             _if7_TRUE:
0586   07B6             ; if (*str == '-') sign = -1; 
0587   07B6             _if8_cond:
0588   07B6 FA 05 00      lea d, [bp + 5] ; $str
0589   07B9 2A            mov b, [d]
0590   07BA 38 00 00      mov c, 0
0591   07BD 74            mov d, b
0592   07BE 32            mov bl, [d]
0593   07BF A7 00         mov bh, 0
0594   07C1 38 00 00      mov c, 0
0595   07C4             ; --- START RELATIONAL
0596   07C4 D7            push a
0597   07C5 11            mov a, b
0598   07C6 FD 2E 2D 00   mov32 cb, $0000002d
0598   07CA 00 00 
0599   07CC B0            cmp a, b
0600   07CD FD 71         seq ; ==
0601   07CF E4            pop a
0602   07D0             ; --- END RELATIONAL
0603   07D0 C0 00 00      cmp b, 0
0604   07D3 C6 E8 07      je _if8_exit
0605   07D6             _if8_TRUE:
0606   07D6             ; sign = -1; 
0607   07D6 FA FD FF      lea d, [bp + -3] ; $sign
0608   07D9 DA            push d
0609   07DA FD 2E 01 00   mov32 cb, $00000001
0609   07DE 00 00 
0610   07E0 FD 97         neg b
0611   07E2 E7            pop d
0612   07E3 FD 43         mov [d], b
0613   07E5 0A E8 07      jmp _if8_exit
0614   07E8             _if8_exit:
0615   07E8             ; str++; 
0616   07E8 FA 05 00      lea d, [bp + 5] ; $str
0617   07EB 2A            mov b, [d]
0618   07EC 38 00 00      mov c, 0
0619   07EF FD 77         inc b
0620   07F1 FA 05 00      lea d, [bp + 5] ; $str
0621   07F4 FD 43         mov [d], b
0622   07F6 FD 7D         dec b
0623   07F8 0A FB 07      jmp _if7_exit
0624   07FB             _if7_exit:
0625   07FB             ; while (*str >= '0' && *str <= '9') { 
0626   07FB             _while9_cond:
0627   07FB FA 05 00      lea d, [bp + 5] ; $str
0628   07FE 2A            mov b, [d]
0629   07FF 38 00 00      mov c, 0
0630   0802 74            mov d, b
0631   0803 32            mov bl, [d]
0632   0804 A7 00         mov bh, 0
0633   0806 38 00 00      mov c, 0
0634   0809             ; --- START RELATIONAL
0635   0809 D7            push a
0636   080A 11            mov a, b
0637   080B FD 2E 30 00   mov32 cb, $00000030
0637   080F 00 00 
0638   0811 B0            cmp a, b
0639   0812 FD 82         sgeu ; >= (unsigned)
0640   0814 E4            pop a
0641   0815             ; --- END RELATIONAL
0642   0815             ; --- START LOGICAL AND
0643   0815 D7            push a
0644   0816 11            mov a, b
0645   0817 FA 05 00      lea d, [bp + 5] ; $str
0646   081A 2A            mov b, [d]
0647   081B 38 00 00      mov c, 0
0648   081E 74            mov d, b
0649   081F 32            mov bl, [d]
0650   0820 A7 00         mov bh, 0
0651   0822 38 00 00      mov c, 0
0652   0825             ; --- START RELATIONAL
0653   0825 D7            push a
0654   0826 11            mov a, b
0655   0827 FD 2E 39 00   mov32 cb, $00000039
0655   082B 00 00 
0656   082D B0            cmp a, b
0657   082E FD 76         sleu ; <= (unsigned)
0658   0830 E4            pop a
0659   0831             ; --- END RELATIONAL
0660   0831 FD A7         sand a, b
0661   0833 E4            pop a
0662   0834             ; --- END LOGICAL AND
0663   0834 C0 00 00      cmp b, 0
0664   0837 C6 84 08      je _while9_exit
0665   083A             _while9_block:
0666   083A             ; result = result * 10 + (*str - '0'); 
0667   083A FA FF FF      lea d, [bp + -1] ; $result
0668   083D DA            push d
0669   083E FA FF FF      lea d, [bp + -1] ; $result
0670   0841 2A            mov b, [d]
0671   0842 38 00 00      mov c, 0
0672   0845             ; --- START FACTORS
0673   0845 D7            push a
0674   0846 11            mov a, b
0675   0847 FD 2E 0A 00   mov32 cb, $0000000a
0675   084B 00 00 
0676   084D AC            mul a, b ; *
0677   084E 11            mov a, b
0678   084F 27            mov b, a
0679   0850 E4            pop a
0680   0851             ; --- END FACTORS
0681   0851             ; --- START TERMS
0682   0851 D7            push a
0683   0852 11            mov a, b
0684   0853 FA 05 00      lea d, [bp + 5] ; $str
0685   0856 2A            mov b, [d]
0686   0857 38 00 00      mov c, 0
0687   085A 74            mov d, b
0688   085B 32            mov bl, [d]
0689   085C A7 00         mov bh, 0
0690   085E 38 00 00      mov c, 0
0691   0861             ; --- START TERMS
0692   0861 D7            push a
0693   0862 11            mov a, b
0694   0863 FD 2E 30 00   mov32 cb, $00000030
0694   0867 00 00 
0695   0869 60            sub a, b
0696   086A 27            mov b, a
0697   086B E4            pop a
0698   086C             ; --- END TERMS
0699   086C 56            add b, a
0700   086D E4            pop a
0701   086E             ; --- END TERMS
0702   086E E7            pop d
0703   086F FD 43         mov [d], b
0704   0871             ; str++; 
0705   0871 FA 05 00      lea d, [bp + 5] ; $str
0706   0874 2A            mov b, [d]
0707   0875 38 00 00      mov c, 0
0708   0878 FD 77         inc b
0709   087A FA 05 00      lea d, [bp + 5] ; $str
0710   087D FD 43         mov [d], b
0711   087F FD 7D         dec b
0712   0881 0A FB 07      jmp _while9_cond
0713   0884             _while9_exit:
0714   0884             ; return sign * result; 
0715   0884 FA FD FF      lea d, [bp + -3] ; $sign
0716   0887 2A            mov b, [d]
0717   0888 38 00 00      mov c, 0
0718   088B             ; --- START FACTORS
0719   088B D7            push a
0720   088C 11            mov a, b
0721   088D FA FF FF      lea d, [bp + -1] ; $result
0722   0890 2A            mov b, [d]
0723   0891 38 00 00      mov c, 0
0724   0894 AC            mul a, b ; *
0725   0895 11            mov a, b
0726   0896 27            mov b, a
0727   0897 E4            pop a
0728   0898             ; --- END FACTORS
0729   0898 F9            leave
0730   0899 09            ret
0731   089A             
0732   089A             rand:
0733   089A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0734   089D             ; int  sec; 
0735   089D 52 02 00      sub sp, 2
0736   08A0             ; --- BEGIN INLINE ASM SEGMENT
0737   08A0 19 00         mov al, 0
0738   08A2 05 01         syscall sys_rtc					
0739   08A4 1A            mov al, ah
0740   08A5 FA FF FF      lea d, [bp + -1] ; $sec
0741   08A8 1E            mov al, [d]
0742   08A9 22 00         mov ah, 0
0743   08AB             ; --- END INLINE ASM SEGMENT
0744   08AB             ; return sec; 
0745   08AB FA FF FF      lea d, [bp + -1] ; $sec
0746   08AE 2A            mov b, [d]
0747   08AF 38 00 00      mov c, 0
0748   08B2 F9            leave
0749   08B3 09            ret
0750   08B4             
0751   08B4             alloc:
0752   08B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0753   08B7             ; heap_top = heap_top + bytes; 
0754   08B7 3B 72 20      mov d, _heap_top ; $heap_top
0755   08BA DA            push d
0756   08BB 3B 72 20      mov d, _heap_top ; $heap_top
0757   08BE 2A            mov b, [d]
0758   08BF 38 00 00      mov c, 0
0759   08C2             ; --- START TERMS
0760   08C2 D7            push a
0761   08C3 11            mov a, b
0762   08C4 FA 05 00      lea d, [bp + 5] ; $bytes
0763   08C7 2A            mov b, [d]
0764   08C8 38 00 00      mov c, 0
0765   08CB 56            add b, a
0766   08CC E4            pop a
0767   08CD             ; --- END TERMS
0768   08CD E7            pop d
0769   08CE FD 43         mov [d], b
0770   08D0             ; return heap_top - bytes; 
0771   08D0 3B 72 20      mov d, _heap_top ; $heap_top
0772   08D3 2A            mov b, [d]
0773   08D4 38 00 00      mov c, 0
0774   08D7             ; --- START TERMS
0775   08D7 D7            push a
0776   08D8 11            mov a, b
0777   08D9 FA 05 00      lea d, [bp + 5] ; $bytes
0778   08DC 2A            mov b, [d]
0779   08DD 38 00 00      mov c, 0
0780   08E0 60            sub a, b
0781   08E1 27            mov b, a
0782   08E2 E4            pop a
0783   08E3             ; --- END TERMS
0784   08E3 F9            leave
0785   08E4 09            ret
0786   08E5             
0787   08E5             free:
0788   08E5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0789   08E8             ; return heap_top = heap_top - bytes; 
0790   08E8 3B 72 20      mov d, _heap_top ; $heap_top
0791   08EB DA            push d
0792   08EC 3B 72 20      mov d, _heap_top ; $heap_top
0793   08EF 2A            mov b, [d]
0794   08F0 38 00 00      mov c, 0
0795   08F3             ; --- START TERMS
0796   08F3 D7            push a
0797   08F4 11            mov a, b
0798   08F5 FA 05 00      lea d, [bp + 5] ; $bytes
0799   08F8 2A            mov b, [d]
0800   08F9 38 00 00      mov c, 0
0801   08FC 60            sub a, b
0802   08FD 27            mov b, a
0803   08FE E4            pop a
0804   08FF             ; --- END TERMS
0805   08FF E7            pop d
0806   0900 FD 43         mov [d], b
0807   0902 F9            leave
0808   0903 09            ret
0809   0904             
0810   0904             fopen:
0811   0904 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0812   0907             ; FILE *fp; 
0813   0907 52 02 00      sub sp, 2
0814   090A             ; static int max_handle = 0; 
0815   090A 52 02 00      sub sp, 2
0816   090D             ; fp = alloc(sizeof(FILE)); 
0817   090D FA FF FF      lea d, [bp + -1] ; $fp
0818   0910 DA            push d
0819   0911             ; --- START FUNCTION CALL
0820   0911 FD 2E 04 01   mov32 cb, 260
0820   0915 00 00 
0821   0917 FD AB         swp b
0822   0919 D8            push b
0823   091A 07 B4 08      call alloc
0824   091D 51 02 00      add sp, 2
0825   0920             ; --- END FUNCTION CALL
0826   0920 E7            pop d
0827   0921 FD 43         mov [d], b
0828   0923             ; strcpy(fp->filename, filename); 
0829   0923             ; --- START FUNCTION CALL
0830   0923 FA 05 00      lea d, [bp + 5] ; $filename
0831   0926 2A            mov b, [d]
0832   0927 38 00 00      mov c, 0
0833   092A FD AB         swp b
0834   092C D8            push b
0835   092D FA FF FF      lea d, [bp + -1] ; $fp
0836   0930 FD 2A         mov d, [d]
0837   0932 58 02 00      add d, 2
0838   0935 2D            mov b, d
0839   0936 38 00 00      mov c, 0
0840   0939 FD AB         swp b
0841   093B D8            push b
0842   093C 07 71 04      call strcpy
0843   093F 51 04 00      add sp, 4
0844   0942             ; --- END FUNCTION CALL
0845   0942             ; fp->handle = max_handle; 
0846   0942 FA FF FF      lea d, [bp + -1] ; $fp
0847   0945 FD 2A         mov d, [d]
0848   0947 58 00 00      add d, 0
0849   094A DA            push d
0850   094B 3B 1D 20      mov d, st_fopen_max_handle ; static max_handle
0851   094E 2A            mov b, [d]
0852   094F 38 00 00      mov c, 0
0853   0952 E7            pop d
0854   0953 FD 43         mov [d], b
0855   0955             ; fp->mode = mode; 
0856   0955 FA FF FF      lea d, [bp + -1] ; $fp
0857   0958 FD 2A         mov d, [d]
0858   095A 58 02 01      add d, 258
0859   095D DA            push d
0860   095E FA 07 00      lea d, [bp + 7] ; $mode
0861   0961 32            mov bl, [d]
0862   0962 A7 00         mov bh, 0
0863   0964 38 00 00      mov c, 0
0864   0967 E7            pop d
0865   0968 FD 3E         mov [d], bl
0866   096A             ; fp->loc = 0; 
0867   096A FA FF FF      lea d, [bp + -1] ; $fp
0868   096D FD 2A         mov d, [d]
0869   096F 58 03 01      add d, 259
0870   0972 DA            push d
0871   0973 FD 2E 00 00   mov32 cb, $00000000
0871   0977 00 00 
0872   0979 E7            pop d
0873   097A FD 3E         mov [d], bl
0874   097C             ; max_handle++; 
0875   097C 3B 1D 20      mov d, st_fopen_max_handle ; static max_handle
0876   097F 2A            mov b, [d]
0877   0980 38 00 00      mov c, 0
0878   0983 11            mov a, b
0879   0984 FD 77         inc b
0880   0986 3B 1D 20      mov d, st_fopen_max_handle ; static max_handle
0881   0989 FD 43         mov [d], b
0882   098B 27            mov b, a
0883   098C F9            leave
0884   098D 09            ret
0885   098E             
0886   098E             fclose:
0887   098E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0888   0991             ; free(sizeof(FILE)); 
0889   0991             ; --- START FUNCTION CALL
0890   0991 FD 2E 04 01   mov32 cb, 260
0890   0995 00 00 
0891   0997 FD AB         swp b
0892   0999 D8            push b
0893   099A 07 E5 08      call free
0894   099D 51 02 00      add sp, 2
0895   09A0             ; --- END FUNCTION CALL
0896   09A0 F9            leave
0897   09A1 09            ret
0898   09A2             
0899   09A2             printf:
0900   09A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0901   09A5             ; char *p, *format_p; 
0902   09A5 52 02 00      sub sp, 2
0903   09A8 52 02 00      sub sp, 2
0904   09AB             ; format_p = format; 
0905   09AB FA FD FF      lea d, [bp + -3] ; $format_p
0906   09AE DA            push d
0907   09AF FA 05 00      lea d, [bp + 5] ; $format
0908   09B2 2A            mov b, [d]
0909   09B3 38 00 00      mov c, 0
0910   09B6 E7            pop d
0911   09B7 FD 43         mov [d], b
0912   09B9             ; p = &format + 2; 
0913   09B9 FA FF FF      lea d, [bp + -1] ; $p
0914   09BC DA            push d
0915   09BD FA 05 00      lea d, [bp + 5] ; $format
0916   09C0 2D            mov b, d
0917   09C1             ; --- START TERMS
0918   09C1 D7            push a
0919   09C2 11            mov a, b
0920   09C3 FD 2E 02 00   mov32 cb, $00000002
0920   09C7 00 00 
0921   09C9 56            add b, a
0922   09CA E4            pop a
0923   09CB             ; --- END TERMS
0924   09CB E7            pop d
0925   09CC FD 43         mov [d], b
0926   09CE             ; for(;;){ 
0927   09CE             _for10_init:
0928   09CE             _for10_cond:
0929   09CE             _for10_block:
0930   09CE             ; if(!*format_p) break; 
0931   09CE             _if11_cond:
0932   09CE FA FD FF      lea d, [bp + -3] ; $format_p
0933   09D1 2A            mov b, [d]
0934   09D2 38 00 00      mov c, 0
0935   09D5 74            mov d, b
0936   09D6 32            mov bl, [d]
0937   09D7 A7 00         mov bh, 0
0938   09D9 38 00 00      mov c, 0
0939   09DC C0 00 00      cmp b, 0
0940   09DF FD 71         seq ; !
0941   09E1 C0 00 00      cmp b, 0
0942   09E4 C6 ED 09      je _if11_else
0943   09E7             _if11_TRUE:
0944   09E7             ; break; 
0945   09E7 0A 9D 0C      jmp _for10_exit ; for break
0946   09EA 0A 9A 0C      jmp _if11_exit
0947   09ED             _if11_else:
0948   09ED             ; if(*format_p == '%'){ 
0949   09ED             _if12_cond:
0950   09ED FA FD FF      lea d, [bp + -3] ; $format_p
0951   09F0 2A            mov b, [d]
0952   09F1 38 00 00      mov c, 0
0953   09F4 74            mov d, b
0954   09F5 32            mov bl, [d]
0955   09F6 A7 00         mov bh, 0
0956   09F8 38 00 00      mov c, 0
0957   09FB             ; --- START RELATIONAL
0958   09FB D7            push a
0959   09FC 11            mov a, b
0960   09FD FD 2E 25 00   mov32 cb, $00000025
0960   0A01 00 00 
0961   0A03 B0            cmp a, b
0962   0A04 FD 71         seq ; ==
0963   0A06 E4            pop a
0964   0A07             ; --- END RELATIONAL
0965   0A07 C0 00 00      cmp b, 0
0966   0A0A C6 75 0C      je _if12_else
0967   0A0D             _if12_TRUE:
0968   0A0D             ; format_p++; 
0969   0A0D FA FD FF      lea d, [bp + -3] ; $format_p
0970   0A10 2A            mov b, [d]
0971   0A11 38 00 00      mov c, 0
0972   0A14 FD 77         inc b
0973   0A16 FA FD FF      lea d, [bp + -3] ; $format_p
0974   0A19 FD 43         mov [d], b
0975   0A1B FD 7D         dec b
0976   0A1D             ; switch(*format_p){ 
0977   0A1D             _switch13_expr:
0978   0A1D FA FD FF      lea d, [bp + -3] ; $format_p
0979   0A20 2A            mov b, [d]
0980   0A21 38 00 00      mov c, 0
0981   0A24 74            mov d, b
0982   0A25 32            mov bl, [d]
0983   0A26 A7 00         mov bh, 0
0984   0A28 38 00 00      mov c, 0
0985   0A2B             _switch13_comparisons:
0986   0A2B C1 6C         cmp bl, $6c
0987   0A2D C6 59 0A      je _switch13_case0
0988   0A30 C1 4C         cmp bl, $4c
0989   0A32 C6 59 0A      je _switch13_case1
0990   0A35 C1 64         cmp bl, $64
0991   0A37 C6 69 0B      je _switch13_case2
0992   0A3A C1 69         cmp bl, $69
0993   0A3C C6 69 0B      je _switch13_case3
0994   0A3F C1 75         cmp bl, $75
0995   0A41 C6 99 0B      je _switch13_case4
0996   0A44 C1 78         cmp bl, $78
0997   0A46 C6 C9 0B      je _switch13_case5
0998   0A49 C1 63         cmp bl, $63
0999   0A4B C6 F9 0B      je _switch13_case6
1000   0A4E C1 73         cmp bl, $73
1001   0A50 C6 29 0C      je _switch13_case7
1002   0A53 0A 56 0C      jmp _switch13_default
1003   0A56 0A 62 0C      jmp _switch13_exit
1004   0A59             _switch13_case0:
1005   0A59             _switch13_case1:
1006   0A59             ; format_p++; 
1007   0A59 FA FD FF      lea d, [bp + -3] ; $format_p
1008   0A5C 2A            mov b, [d]
1009   0A5D 38 00 00      mov c, 0
1010   0A60 FD 77         inc b
1011   0A62 FA FD FF      lea d, [bp + -3] ; $format_p
1012   0A65 FD 43         mov [d], b
1013   0A67 FD 7D         dec b
1014   0A69             ; if(*format_p == 'd' || *format_p == 'i') 
1015   0A69             _if14_cond:
1016   0A69 FA FD FF      lea d, [bp + -3] ; $format_p
1017   0A6C 2A            mov b, [d]
1018   0A6D 38 00 00      mov c, 0
1019   0A70 74            mov d, b
1020   0A71 32            mov bl, [d]
1021   0A72 A7 00         mov bh, 0
1022   0A74 38 00 00      mov c, 0
1023   0A77             ; --- START RELATIONAL
1024   0A77 D7            push a
1025   0A78 11            mov a, b
1026   0A79 FD 2E 64 00   mov32 cb, $00000064
1026   0A7D 00 00 
1027   0A7F B0            cmp a, b
1028   0A80 FD 71         seq ; ==
1029   0A82 E4            pop a
1030   0A83             ; --- END RELATIONAL
1031   0A83             ; --- START LOGICAL OR
1032   0A83 D7            push a
1033   0A84 11            mov a, b
1034   0A85 FA FD FF      lea d, [bp + -3] ; $format_p
1035   0A88 2A            mov b, [d]
1036   0A89 38 00 00      mov c, 0
1037   0A8C 74            mov d, b
1038   0A8D 32            mov bl, [d]
1039   0A8E A7 00         mov bh, 0
1040   0A90 38 00 00      mov c, 0
1041   0A93             ; --- START RELATIONAL
1042   0A93 D7            push a
1043   0A94 11            mov a, b
1044   0A95 FD 2E 69 00   mov32 cb, $00000069
1044   0A99 00 00 
1045   0A9B B0            cmp a, b
1046   0A9C FD 71         seq ; ==
1047   0A9E E4            pop a
1048   0A9F             ; --- END RELATIONAL
1049   0A9F FD A8         sor a, b ; ||
1050   0AA1 E4            pop a
1051   0AA2             ; --- END LOGICAL OR
1052   0AA2 C0 00 00      cmp b, 0
1053   0AA5 C6 C6 0A      je _if14_else
1054   0AA8             _if14_TRUE:
1055   0AA8             ; print_signed_long(*(long *)p); 
1056   0AA8             ; --- START FUNCTION CALL
1057   0AA8 FA FF FF      lea d, [bp + -1] ; $p
1058   0AAB 2A            mov b, [d]
1059   0AAC 38 00 00      mov c, 0
1060   0AAF 74            mov d, b
1061   0AB0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1062   0AB3 FD 39         mov c, b ; And place it into C
1063   0AB5 2A            mov b, [d] ; Lower Word in B
1064   0AB6 12            mov a, c
1065   0AB7 FD AA         swp a
1066   0AB9 D7            push a
1067   0ABA FD AB         swp b
1068   0ABC D8            push b
1069   0ABD 07 D1 17      call print_signed_long
1070   0AC0 51 04 00      add sp, 4
1071   0AC3             ; --- END FUNCTION CALL
1072   0AC3 0A 4E 0B      jmp _if14_exit
1073   0AC6             _if14_else:
1074   0AC6             ; if(*format_p == 'u') 
1075   0AC6             _if15_cond:
1076   0AC6 FA FD FF      lea d, [bp + -3] ; $format_p
1077   0AC9 2A            mov b, [d]
1078   0ACA 38 00 00      mov c, 0
1079   0ACD 74            mov d, b
1080   0ACE 32            mov bl, [d]
1081   0ACF A7 00         mov bh, 0
1082   0AD1 38 00 00      mov c, 0
1083   0AD4             ; --- START RELATIONAL
1084   0AD4 D7            push a
1085   0AD5 11            mov a, b
1086   0AD6 FD 2E 75 00   mov32 cb, $00000075
1086   0ADA 00 00 
1087   0ADC B0            cmp a, b
1088   0ADD FD 71         seq ; ==
1089   0ADF E4            pop a
1090   0AE0             ; --- END RELATIONAL
1091   0AE0 C0 00 00      cmp b, 0
1092   0AE3 C6 04 0B      je _if15_else
1093   0AE6             _if15_TRUE:
1094   0AE6             ; print_unsigned_long(*(unsigned long *)p); 
1095   0AE6             ; --- START FUNCTION CALL
1096   0AE6 FA FF FF      lea d, [bp + -1] ; $p
1097   0AE9 2A            mov b, [d]
1098   0AEA 38 00 00      mov c, 0
1099   0AED 74            mov d, b
1100   0AEE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1101   0AF1 FD 39         mov c, b ; And place it into C
1102   0AF3 2A            mov b, [d] ; Lower Word in B
1103   0AF4 12            mov a, c
1104   0AF5 FD AA         swp a
1105   0AF7 D7            push a
1106   0AF8 FD AB         swp b
1107   0AFA D8            push b
1108   0AFB 07 40 19      call print_unsigned_long
1109   0AFE 51 04 00      add sp, 4
1110   0B01             ; --- END FUNCTION CALL
1111   0B01 0A 4E 0B      jmp _if15_exit
1112   0B04             _if15_else:
1113   0B04             ; if(*format_p == 'x') 
1114   0B04             _if16_cond:
1115   0B04 FA FD FF      lea d, [bp + -3] ; $format_p
1116   0B07 2A            mov b, [d]
1117   0B08 38 00 00      mov c, 0
1118   0B0B 74            mov d, b
1119   0B0C 32            mov bl, [d]
1120   0B0D A7 00         mov bh, 0
1121   0B0F 38 00 00      mov c, 0
1122   0B12             ; --- START RELATIONAL
1123   0B12 D7            push a
1124   0B13 11            mov a, b
1125   0B14 FD 2E 78 00   mov32 cb, $00000078
1125   0B18 00 00 
1126   0B1A B0            cmp a, b
1127   0B1B FD 71         seq ; ==
1128   0B1D E4            pop a
1129   0B1E             ; --- END RELATIONAL
1130   0B1E C0 00 00      cmp b, 0
1131   0B21 C6 42 0B      je _if16_else
1132   0B24             _if16_TRUE:
1133   0B24             ; printx32(*(long int *)p); 
1134   0B24             ; --- START FUNCTION CALL
1135   0B24 FA FF FF      lea d, [bp + -1] ; $p
1136   0B27 2A            mov b, [d]
1137   0B28 38 00 00      mov c, 0
1138   0B2B 74            mov d, b
1139   0B2C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1140   0B2F FD 39         mov c, b ; And place it into C
1141   0B31 2A            mov b, [d] ; Lower Word in B
1142   0B32 12            mov a, c
1143   0B33 FD AA         swp a
1144   0B35 D7            push a
1145   0B36 FD AB         swp b
1146   0B38 D8            push b
1147   0B39 07 39 13      call printx32
1148   0B3C 51 04 00      add sp, 4
1149   0B3F             ; --- END FUNCTION CALL
1150   0B3F 0A 4E 0B      jmp _if16_exit
1151   0B42             _if16_else:
1152   0B42             ; err("Unexpected format in printf."); 
1153   0B42             ; --- START FUNCTION CALL
1154   0B42 26 2E 20      mov b, _s3 ; "Unexpected format in printf."
1155   0B45 FD AB         swp b
1156   0B47 D8            push b
1157   0B48 07 24 13      call err
1158   0B4B 51 02 00      add sp, 2
1159   0B4E             ; --- END FUNCTION CALL
1160   0B4E             _if16_exit:
1161   0B4E             _if15_exit:
1162   0B4E             _if14_exit:
1163   0B4E             ; p = p + 4; 
1164   0B4E FA FF FF      lea d, [bp + -1] ; $p
1165   0B51 DA            push d
1166   0B52 FA FF FF      lea d, [bp + -1] ; $p
1167   0B55 2A            mov b, [d]
1168   0B56 38 00 00      mov c, 0
1169   0B59             ; --- START TERMS
1170   0B59 D7            push a
1171   0B5A 11            mov a, b
1172   0B5B FD 2E 04 00   mov32 cb, $00000004
1172   0B5F 00 00 
1173   0B61 56            add b, a
1174   0B62 E4            pop a
1175   0B63             ; --- END TERMS
1176   0B63 E7            pop d
1177   0B64 FD 43         mov [d], b
1178   0B66             ; break; 
1179   0B66 0A 62 0C      jmp _switch13_exit ; case break
1180   0B69             _switch13_case2:
1181   0B69             _switch13_case3:
1182   0B69             ; print_signed(*(int*)p); 
1183   0B69             ; --- START FUNCTION CALL
1184   0B69 FA FF FF      lea d, [bp + -1] ; $p
1185   0B6C 2A            mov b, [d]
1186   0B6D 38 00 00      mov c, 0
1187   0B70 74            mov d, b
1188   0B71 2A            mov b, [d]
1189   0B72 38 00 00      mov c, 0
1190   0B75 FD AB         swp b
1191   0B77 D8            push b
1192   0B78 07 98 16      call print_signed
1193   0B7B 51 02 00      add sp, 2
1194   0B7E             ; --- END FUNCTION CALL
1195   0B7E             ; p = p + 2; 
1196   0B7E FA FF FF      lea d, [bp + -1] ; $p
1197   0B81 DA            push d
1198   0B82 FA FF FF      lea d, [bp + -1] ; $p
1199   0B85 2A            mov b, [d]
1200   0B86 38 00 00      mov c, 0
1201   0B89             ; --- START TERMS
1202   0B89 D7            push a
1203   0B8A 11            mov a, b
1204   0B8B FD 2E 02 00   mov32 cb, $00000002
1204   0B8F 00 00 
1205   0B91 56            add b, a
1206   0B92 E4            pop a
1207   0B93             ; --- END TERMS
1208   0B93 E7            pop d
1209   0B94 FD 43         mov [d], b
1210   0B96             ; break; 
1211   0B96 0A 62 0C      jmp _switch13_exit ; case break
1212   0B99             _switch13_case4:
1213   0B99             ; print_unsigned(*(unsigned int*)p); 
1214   0B99             ; --- START FUNCTION CALL
1215   0B99 FA FF FF      lea d, [bp + -1] ; $p
1216   0B9C 2A            mov b, [d]
1217   0B9D 38 00 00      mov c, 0
1218   0BA0 74            mov d, b
1219   0BA1 2A            mov b, [d]
1220   0BA2 38 00 00      mov c, 0
1221   0BA5 FD AB         swp b
1222   0BA7 D8            push b
1223   0BA8 07 B4 1B      call print_unsigned
1224   0BAB 51 02 00      add sp, 2
1225   0BAE             ; --- END FUNCTION CALL
1226   0BAE             ; p = p + 2; 
1227   0BAE FA FF FF      lea d, [bp + -1] ; $p
1228   0BB1 DA            push d
1229   0BB2 FA FF FF      lea d, [bp + -1] ; $p
1230   0BB5 2A            mov b, [d]
1231   0BB6 38 00 00      mov c, 0
1232   0BB9             ; --- START TERMS
1233   0BB9 D7            push a
1234   0BBA 11            mov a, b
1235   0BBB FD 2E 02 00   mov32 cb, $00000002
1235   0BBF 00 00 
1236   0BC1 56            add b, a
1237   0BC2 E4            pop a
1238   0BC3             ; --- END TERMS
1239   0BC3 E7            pop d
1240   0BC4 FD 43         mov [d], b
1241   0BC6             ; break; 
1242   0BC6 0A 62 0C      jmp _switch13_exit ; case break
1243   0BC9             _switch13_case5:
1244   0BC9             ; printx16(*(int*)p); 
1245   0BC9             ; --- START FUNCTION CALL
1246   0BC9 FA FF FF      lea d, [bp + -1] ; $p
1247   0BCC 2A            mov b, [d]
1248   0BCD 38 00 00      mov c, 0
1249   0BD0 74            mov d, b
1250   0BD1 2A            mov b, [d]
1251   0BD2 38 00 00      mov c, 0
1252   0BD5 FD AB         swp b
1253   0BD7 D8            push b
1254   0BD8 07 99 13      call printx16
1255   0BDB 51 02 00      add sp, 2
1256   0BDE             ; --- END FUNCTION CALL
1257   0BDE             ; p = p + 2; 
1258   0BDE FA FF FF      lea d, [bp + -1] ; $p
1259   0BE1 DA            push d
1260   0BE2 FA FF FF      lea d, [bp + -1] ; $p
1261   0BE5 2A            mov b, [d]
1262   0BE6 38 00 00      mov c, 0
1263   0BE9             ; --- START TERMS
1264   0BE9 D7            push a
1265   0BEA 11            mov a, b
1266   0BEB FD 2E 02 00   mov32 cb, $00000002
1266   0BEF 00 00 
1267   0BF1 56            add b, a
1268   0BF2 E4            pop a
1269   0BF3             ; --- END TERMS
1270   0BF3 E7            pop d
1271   0BF4 FD 43         mov [d], b
1272   0BF6             ; break; 
1273   0BF6 0A 62 0C      jmp _switch13_exit ; case break
1274   0BF9             _switch13_case6:
1275   0BF9             ; putchar(*(char*)p); 
1276   0BF9             ; --- START FUNCTION CALL
1277   0BF9 FA FF FF      lea d, [bp + -1] ; $p
1278   0BFC 2A            mov b, [d]
1279   0BFD 38 00 00      mov c, 0
1280   0C00 74            mov d, b
1281   0C01 32            mov bl, [d]
1282   0C02 A7 00         mov bh, 0
1283   0C04 38 00 00      mov c, 0
1284   0C07 DD            push bl
1285   0C08 07 7C 1E      call putchar
1286   0C0B 51 01 00      add sp, 1
1287   0C0E             ; --- END FUNCTION CALL
1288   0C0E             ; p = p + 1; 
1289   0C0E FA FF FF      lea d, [bp + -1] ; $p
1290   0C11 DA            push d
1291   0C12 FA FF FF      lea d, [bp + -1] ; $p
1292   0C15 2A            mov b, [d]
1293   0C16 38 00 00      mov c, 0
1294   0C19             ; --- START TERMS
1295   0C19 D7            push a
1296   0C1A 11            mov a, b
1297   0C1B FD 2E 01 00   mov32 cb, $00000001
1297   0C1F 00 00 
1298   0C21 56            add b, a
1299   0C22 E4            pop a
1300   0C23             ; --- END TERMS
1301   0C23 E7            pop d
1302   0C24 FD 43         mov [d], b
1303   0C26             ; break; 
1304   0C26 0A 62 0C      jmp _switch13_exit ; case break
1305   0C29             _switch13_case7:
1306   0C29             ; print(*(char**)p); 
1307   0C29             ; --- START FUNCTION CALL
1308   0C29 FA FF FF      lea d, [bp + -1] ; $p
1309   0C2C 2A            mov b, [d]
1310   0C2D 38 00 00      mov c, 0
1311   0C30 74            mov d, b
1312   0C31 2A            mov b, [d]
1313   0C32 FD AB         swp b
1314   0C34 D8            push b
1315   0C35 07 BD 1F      call print
1316   0C38 51 02 00      add sp, 2
1317   0C3B             ; --- END FUNCTION CALL
1318   0C3B             ; p = p + 2; 
1319   0C3B FA FF FF      lea d, [bp + -1] ; $p
1320   0C3E DA            push d
1321   0C3F FA FF FF      lea d, [bp + -1] ; $p
1322   0C42 2A            mov b, [d]
1323   0C43 38 00 00      mov c, 0
1324   0C46             ; --- START TERMS
1325   0C46 D7            push a
1326   0C47 11            mov a, b
1327   0C48 FD 2E 02 00   mov32 cb, $00000002
1327   0C4C 00 00 
1328   0C4E 56            add b, a
1329   0C4F E4            pop a
1330   0C50             ; --- END TERMS
1331   0C50 E7            pop d
1332   0C51 FD 43         mov [d], b
1333   0C53             ; break; 
1334   0C53 0A 62 0C      jmp _switch13_exit ; case break
1335   0C56             _switch13_default:
1336   0C56             ; print("Error: Unknown argument type.\n"); 
1337   0C56             ; --- START FUNCTION CALL
1338   0C56 26 4B 20      mov b, _s4 ; "Error: Unknown argument type.\n"
1339   0C59 FD AB         swp b
1340   0C5B D8            push b
1341   0C5C 07 BD 1F      call print
1342   0C5F 51 02 00      add sp, 2
1343   0C62             ; --- END FUNCTION CALL
1344   0C62             _switch13_exit:
1345   0C62             ; format_p++; 
1346   0C62 FA FD FF      lea d, [bp + -3] ; $format_p
1347   0C65 2A            mov b, [d]
1348   0C66 38 00 00      mov c, 0
1349   0C69 FD 77         inc b
1350   0C6B FA FD FF      lea d, [bp + -3] ; $format_p
1351   0C6E FD 43         mov [d], b
1352   0C70 FD 7D         dec b
1353   0C72 0A 9A 0C      jmp _if12_exit
1354   0C75             _if12_else:
1355   0C75             ; putchar(*format_p); 
1356   0C75             ; --- START FUNCTION CALL
1357   0C75 FA FD FF      lea d, [bp + -3] ; $format_p
1358   0C78 2A            mov b, [d]
1359   0C79 38 00 00      mov c, 0
1360   0C7C 74            mov d, b
1361   0C7D 32            mov bl, [d]
1362   0C7E A7 00         mov bh, 0
1363   0C80 38 00 00      mov c, 0
1364   0C83 DD            push bl
1365   0C84 07 7C 1E      call putchar
1366   0C87 51 01 00      add sp, 1
1367   0C8A             ; --- END FUNCTION CALL
1368   0C8A             ; format_p++; 
1369   0C8A FA FD FF      lea d, [bp + -3] ; $format_p
1370   0C8D 2A            mov b, [d]
1371   0C8E 38 00 00      mov c, 0
1372   0C91 FD 77         inc b
1373   0C93 FA FD FF      lea d, [bp + -3] ; $format_p
1374   0C96 FD 43         mov [d], b
1375   0C98 FD 7D         dec b
1376   0C9A             _if12_exit:
1377   0C9A             _if11_exit:
1378   0C9A             _for10_update:
1379   0C9A 0A CE 09      jmp _for10_cond
1380   0C9D             _for10_exit:
1381   0C9D F9            leave
1382   0C9E 09            ret
1383   0C9F             
1384   0C9F             scanf:
1385   0C9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1386   0CA2             ; char *p, *format_p; 
1387   0CA2 52 02 00      sub sp, 2
1388   0CA5 52 02 00      sub sp, 2
1389   0CA8             ; char c; 
1390   0CA8 52 01 00      sub sp, 1
1391   0CAB             ; int i; 
1392   0CAB 52 02 00      sub sp, 2
1393   0CAE             ; char input_string[  512                    ]; 
1394   0CAE 52 00 02      sub sp, 512
1395   0CB1             ; format_p = format; 
1396   0CB1 FA FD FF      lea d, [bp + -3] ; $format_p
1397   0CB4 DA            push d
1398   0CB5 FA 05 00      lea d, [bp + 5] ; $format
1399   0CB8 2A            mov b, [d]
1400   0CB9 38 00 00      mov c, 0
1401   0CBC E7            pop d
1402   0CBD FD 43         mov [d], b
1403   0CBF             ; p = &format + 2; 
1404   0CBF FA FF FF      lea d, [bp + -1] ; $p
1405   0CC2 DA            push d
1406   0CC3 FA 05 00      lea d, [bp + 5] ; $format
1407   0CC6 2D            mov b, d
1408   0CC7             ; --- START TERMS
1409   0CC7 D7            push a
1410   0CC8 11            mov a, b
1411   0CC9 FD 2E 02 00   mov32 cb, $00000002
1411   0CCD 00 00 
1412   0CCF 56            add b, a
1413   0CD0 E4            pop a
1414   0CD1             ; --- END TERMS
1415   0CD1 E7            pop d
1416   0CD2 FD 43         mov [d], b
1417   0CD4             ; for(;;){ 
1418   0CD4             _for17_init:
1419   0CD4             _for17_cond:
1420   0CD4             _for17_block:
1421   0CD4             ; if(!*format_p) break; 
1422   0CD4             _if18_cond:
1423   0CD4 FA FD FF      lea d, [bp + -3] ; $format_p
1424   0CD7 2A            mov b, [d]
1425   0CD8 38 00 00      mov c, 0
1426   0CDB 74            mov d, b
1427   0CDC 32            mov bl, [d]
1428   0CDD A7 00         mov bh, 0
1429   0CDF 38 00 00      mov c, 0
1430   0CE2 C0 00 00      cmp b, 0
1431   0CE5 FD 71         seq ; !
1432   0CE7 C0 00 00      cmp b, 0
1433   0CEA C6 F3 0C      je _if18_else
1434   0CED             _if18_TRUE:
1435   0CED             ; break; 
1436   0CED 0A 7B 0F      jmp _for17_exit ; for break
1437   0CF0 0A 78 0F      jmp _if18_exit
1438   0CF3             _if18_else:
1439   0CF3             ; if(*format_p == '%'){ 
1440   0CF3             _if19_cond:
1441   0CF3 FA FD FF      lea d, [bp + -3] ; $format_p
1442   0CF6 2A            mov b, [d]
1443   0CF7 38 00 00      mov c, 0
1444   0CFA 74            mov d, b
1445   0CFB 32            mov bl, [d]
1446   0CFC A7 00         mov bh, 0
1447   0CFE 38 00 00      mov c, 0
1448   0D01             ; --- START RELATIONAL
1449   0D01 D7            push a
1450   0D02 11            mov a, b
1451   0D03 FD 2E 25 00   mov32 cb, $00000025
1451   0D07 00 00 
1452   0D09 B0            cmp a, b
1453   0D0A FD 71         seq ; ==
1454   0D0C E4            pop a
1455   0D0D             ; --- END RELATIONAL
1456   0D0D C0 00 00      cmp b, 0
1457   0D10 C6 53 0F      je _if19_else
1458   0D13             _if19_TRUE:
1459   0D13             ; format_p++; 
1460   0D13 FA FD FF      lea d, [bp + -3] ; $format_p
1461   0D16 2A            mov b, [d]
1462   0D17 38 00 00      mov c, 0
1463   0D1A FD 77         inc b
1464   0D1C FA FD FF      lea d, [bp + -3] ; $format_p
1465   0D1F FD 43         mov [d], b
1466   0D21 FD 7D         dec b
1467   0D23             ; switch(*format_p){ 
1468   0D23             _switch20_expr:
1469   0D23 FA FD FF      lea d, [bp + -3] ; $format_p
1470   0D26 2A            mov b, [d]
1471   0D27 38 00 00      mov c, 0
1472   0D2A 74            mov d, b
1473   0D2B 32            mov bl, [d]
1474   0D2C A7 00         mov bh, 0
1475   0D2E 38 00 00      mov c, 0
1476   0D31             _switch20_comparisons:
1477   0D31 C1 6C         cmp bl, $6c
1478   0D33 C6 5F 0D      je _switch20_case0
1479   0D36 C1 4C         cmp bl, $4c
1480   0D38 C6 5F 0D      je _switch20_case1
1481   0D3B C1 64         cmp bl, $64
1482   0D3D C6 1E 0E      je _switch20_case2
1483   0D40 C1 69         cmp bl, $69
1484   0D42 C6 1E 0E      je _switch20_case3
1485   0D45 C1 75         cmp bl, $75
1486   0D47 C6 57 0E      je _switch20_case4
1487   0D4A C1 78         cmp bl, $78
1488   0D4C C6 90 0E      je _switch20_case5
1489   0D4F C1 63         cmp bl, $63
1490   0D51 C6 AB 0E      je _switch20_case6
1491   0D54 C1 73         cmp bl, $73
1492   0D56 C6 ED 0E      je _switch20_case7
1493   0D59 0A 34 0F      jmp _switch20_default
1494   0D5C 0A 40 0F      jmp _switch20_exit
1495   0D5F             _switch20_case0:
1496   0D5F             _switch20_case1:
1497   0D5F             ; format_p++; 
1498   0D5F FA FD FF      lea d, [bp + -3] ; $format_p
1499   0D62 2A            mov b, [d]
1500   0D63 38 00 00      mov c, 0
1501   0D66 FD 77         inc b
1502   0D68 FA FD FF      lea d, [bp + -3] ; $format_p
1503   0D6B FD 43         mov [d], b
1504   0D6D FD 7D         dec b
1505   0D6F             ; if(*format_p == 'd' || *format_p == 'i'); 
1506   0D6F             _if21_cond:
1507   0D6F FA FD FF      lea d, [bp + -3] ; $format_p
1508   0D72 2A            mov b, [d]
1509   0D73 38 00 00      mov c, 0
1510   0D76 74            mov d, b
1511   0D77 32            mov bl, [d]
1512   0D78 A7 00         mov bh, 0
1513   0D7A 38 00 00      mov c, 0
1514   0D7D             ; --- START RELATIONAL
1515   0D7D D7            push a
1516   0D7E 11            mov a, b
1517   0D7F FD 2E 64 00   mov32 cb, $00000064
1517   0D83 00 00 
1518   0D85 B0            cmp a, b
1519   0D86 FD 71         seq ; ==
1520   0D88 E4            pop a
1521   0D89             ; --- END RELATIONAL
1522   0D89             ; --- START LOGICAL OR
1523   0D89 D7            push a
1524   0D8A 11            mov a, b
1525   0D8B FA FD FF      lea d, [bp + -3] ; $format_p
1526   0D8E 2A            mov b, [d]
1527   0D8F 38 00 00      mov c, 0
1528   0D92 74            mov d, b
1529   0D93 32            mov bl, [d]
1530   0D94 A7 00         mov bh, 0
1531   0D96 38 00 00      mov c, 0
1532   0D99             ; --- START RELATIONAL
1533   0D99 D7            push a
1534   0D9A 11            mov a, b
1535   0D9B FD 2E 69 00   mov32 cb, $00000069
1535   0D9F 00 00 
1536   0DA1 B0            cmp a, b
1537   0DA2 FD 71         seq ; ==
1538   0DA4 E4            pop a
1539   0DA5             ; --- END RELATIONAL
1540   0DA5 FD A8         sor a, b ; ||
1541   0DA7 E4            pop a
1542   0DA8             ; --- END LOGICAL OR
1543   0DA8 C0 00 00      cmp b, 0
1544   0DAB C6 B1 0D      je _if21_else
1545   0DAE             _if21_TRUE:
1546   0DAE             ; ; 
1547   0DAE 0A 03 0E      jmp _if21_exit
1548   0DB1             _if21_else:
1549   0DB1             ; if(*format_p == 'u'); 
1550   0DB1             _if22_cond:
1551   0DB1 FA FD FF      lea d, [bp + -3] ; $format_p
1552   0DB4 2A            mov b, [d]
1553   0DB5 38 00 00      mov c, 0
1554   0DB8 74            mov d, b
1555   0DB9 32            mov bl, [d]
1556   0DBA A7 00         mov bh, 0
1557   0DBC 38 00 00      mov c, 0
1558   0DBF             ; --- START RELATIONAL
1559   0DBF D7            push a
1560   0DC0 11            mov a, b
1561   0DC1 FD 2E 75 00   mov32 cb, $00000075
1561   0DC5 00 00 
1562   0DC7 B0            cmp a, b
1563   0DC8 FD 71         seq ; ==
1564   0DCA E4            pop a
1565   0DCB             ; --- END RELATIONAL
1566   0DCB C0 00 00      cmp b, 0
1567   0DCE C6 D4 0D      je _if22_else
1568   0DD1             _if22_TRUE:
1569   0DD1             ; ; 
1570   0DD1 0A 03 0E      jmp _if22_exit
1571   0DD4             _if22_else:
1572   0DD4             ; if(*format_p == 'x'); 
1573   0DD4             _if23_cond:
1574   0DD4 FA FD FF      lea d, [bp + -3] ; $format_p
1575   0DD7 2A            mov b, [d]
1576   0DD8 38 00 00      mov c, 0
1577   0DDB 74            mov d, b
1578   0DDC 32            mov bl, [d]
1579   0DDD A7 00         mov bh, 0
1580   0DDF 38 00 00      mov c, 0
1581   0DE2             ; --- START RELATIONAL
1582   0DE2 D7            push a
1583   0DE3 11            mov a, b
1584   0DE4 FD 2E 78 00   mov32 cb, $00000078
1584   0DE8 00 00 
1585   0DEA B0            cmp a, b
1586   0DEB FD 71         seq ; ==
1587   0DED E4            pop a
1588   0DEE             ; --- END RELATIONAL
1589   0DEE C0 00 00      cmp b, 0
1590   0DF1 C6 F7 0D      je _if23_else
1591   0DF4             _if23_TRUE:
1592   0DF4             ; ; 
1593   0DF4 0A 03 0E      jmp _if23_exit
1594   0DF7             _if23_else:
1595   0DF7             ; err("Unexpected format in printf."); 
1596   0DF7             ; --- START FUNCTION CALL
1597   0DF7 26 2E 20      mov b, _s3 ; "Unexpected format in printf."
1598   0DFA FD AB         swp b
1599   0DFC D8            push b
1600   0DFD 07 24 13      call err
1601   0E00 51 02 00      add sp, 2
1602   0E03             ; --- END FUNCTION CALL
1603   0E03             _if23_exit:
1604   0E03             _if22_exit:
1605   0E03             _if21_exit:
1606   0E03             ; p = p + 4; 
1607   0E03 FA FF FF      lea d, [bp + -1] ; $p
1608   0E06 DA            push d
1609   0E07 FA FF FF      lea d, [bp + -1] ; $p
1610   0E0A 2A            mov b, [d]
1611   0E0B 38 00 00      mov c, 0
1612   0E0E             ; --- START TERMS
1613   0E0E D7            push a
1614   0E0F 11            mov a, b
1615   0E10 FD 2E 04 00   mov32 cb, $00000004
1615   0E14 00 00 
1616   0E16 56            add b, a
1617   0E17 E4            pop a
1618   0E18             ; --- END TERMS
1619   0E18 E7            pop d
1620   0E19 FD 43         mov [d], b
1621   0E1B             ; break; 
1622   0E1B 0A 40 0F      jmp _switch20_exit ; case break
1623   0E1E             _switch20_case2:
1624   0E1E             _switch20_case3:
1625   0E1E             ; i = scann(); 
1626   0E1E FA FA FF      lea d, [bp + -6] ; $i
1627   0E21 DA            push d
1628   0E22             ; --- START FUNCTION CALL
1629   0E22 07 A4 1E      call scann
1630   0E25 E7            pop d
1631   0E26 FD 43         mov [d], b
1632   0E28             ; **(int **)p = i; 
1633   0E28 FA FF FF      lea d, [bp + -1] ; $p
1634   0E2B 2A            mov b, [d]
1635   0E2C 38 00 00      mov c, 0
1636   0E2F 74            mov d, b
1637   0E30 2A            mov b, [d]
1638   0E31 D8            push b
1639   0E32 FA FA FF      lea d, [bp + -6] ; $i
1640   0E35 2A            mov b, [d]
1641   0E36 38 00 00      mov c, 0
1642   0E39 E7            pop d
1643   0E3A FD 43         mov [d], b
1644   0E3C             ; p = p + 2; 
1645   0E3C FA FF FF      lea d, [bp + -1] ; $p
1646   0E3F DA            push d
1647   0E40 FA FF FF      lea d, [bp + -1] ; $p
1648   0E43 2A            mov b, [d]
1649   0E44 38 00 00      mov c, 0
1650   0E47             ; --- START TERMS
1651   0E47 D7            push a
1652   0E48 11            mov a, b
1653   0E49 FD 2E 02 00   mov32 cb, $00000002
1653   0E4D 00 00 
1654   0E4F 56            add b, a
1655   0E50 E4            pop a
1656   0E51             ; --- END TERMS
1657   0E51 E7            pop d
1658   0E52 FD 43         mov [d], b
1659   0E54             ; break; 
1660   0E54 0A 40 0F      jmp _switch20_exit ; case break
1661   0E57             _switch20_case4:
1662   0E57             ; i = scann(); 
1663   0E57 FA FA FF      lea d, [bp + -6] ; $i
1664   0E5A DA            push d
1665   0E5B             ; --- START FUNCTION CALL
1666   0E5B 07 A4 1E      call scann
1667   0E5E E7            pop d
1668   0E5F FD 43         mov [d], b
1669   0E61             ; **(int **)p = i; 
1670   0E61 FA FF FF      lea d, [bp + -1] ; $p
1671   0E64 2A            mov b, [d]
1672   0E65 38 00 00      mov c, 0
1673   0E68 74            mov d, b
1674   0E69 2A            mov b, [d]
1675   0E6A D8            push b
1676   0E6B FA FA FF      lea d, [bp + -6] ; $i
1677   0E6E 2A            mov b, [d]
1678   0E6F 38 00 00      mov c, 0
1679   0E72 E7            pop d
1680   0E73 FD 43         mov [d], b
1681   0E75             ; p = p + 2; 
1682   0E75 FA FF FF      lea d, [bp + -1] ; $p
1683   0E78 DA            push d
1684   0E79 FA FF FF      lea d, [bp + -1] ; $p
1685   0E7C 2A            mov b, [d]
1686   0E7D 38 00 00      mov c, 0
1687   0E80             ; --- START TERMS
1688   0E80 D7            push a
1689   0E81 11            mov a, b
1690   0E82 FD 2E 02 00   mov32 cb, $00000002
1690   0E86 00 00 
1691   0E88 56            add b, a
1692   0E89 E4            pop a
1693   0E8A             ; --- END TERMS
1694   0E8A E7            pop d
1695   0E8B FD 43         mov [d], b
1696   0E8D             ; break; 
1697   0E8D 0A 40 0F      jmp _switch20_exit ; case break
1698   0E90             _switch20_case5:
1699   0E90             ; p = p + 2; 
1700   0E90 FA FF FF      lea d, [bp + -1] ; $p
1701   0E93 DA            push d
1702   0E94 FA FF FF      lea d, [bp + -1] ; $p
1703   0E97 2A            mov b, [d]
1704   0E98 38 00 00      mov c, 0
1705   0E9B             ; --- START TERMS
1706   0E9B D7            push a
1707   0E9C 11            mov a, b
1708   0E9D FD 2E 02 00   mov32 cb, $00000002
1708   0EA1 00 00 
1709   0EA3 56            add b, a
1710   0EA4 E4            pop a
1711   0EA5             ; --- END TERMS
1712   0EA5 E7            pop d
1713   0EA6 FD 43         mov [d], b
1714   0EA8             ; break; 
1715   0EA8 0A 40 0F      jmp _switch20_exit ; case break
1716   0EAB             _switch20_case6:
1717   0EAB             ; c = getchar(); 
1718   0EAB FA FC FF      lea d, [bp + -4] ; $c
1719   0EAE DA            push d
1720   0EAF             ; --- START FUNCTION CALL
1721   0EAF 07 8A 1E      call getchar
1722   0EB2 E7            pop d
1723   0EB3 FD 3E         mov [d], bl
1724   0EB5             ; **(char **)p = *(char *)c; 
1725   0EB5 FA FF FF      lea d, [bp + -1] ; $p
1726   0EB8 2A            mov b, [d]
1727   0EB9 38 00 00      mov c, 0
1728   0EBC 74            mov d, b
1729   0EBD 2A            mov b, [d]
1730   0EBE D8            push b
1731   0EBF FA FC FF      lea d, [bp + -4] ; $c
1732   0EC2 32            mov bl, [d]
1733   0EC3 A7 00         mov bh, 0
1734   0EC5 38 00 00      mov c, 0
1735   0EC8 74            mov d, b
1736   0EC9 32            mov bl, [d]
1737   0ECA A7 00         mov bh, 0
1738   0ECC 38 00 00      mov c, 0
1739   0ECF E7            pop d
1740   0ED0 FD 43         mov [d], b
1741   0ED2             ; p = p + 1; 
1742   0ED2 FA FF FF      lea d, [bp + -1] ; $p
1743   0ED5 DA            push d
1744   0ED6 FA FF FF      lea d, [bp + -1] ; $p
1745   0ED9 2A            mov b, [d]
1746   0EDA 38 00 00      mov c, 0
1747   0EDD             ; --- START TERMS
1748   0EDD D7            push a
1749   0EDE 11            mov a, b
1750   0EDF FD 2E 01 00   mov32 cb, $00000001
1750   0EE3 00 00 
1751   0EE5 56            add b, a
1752   0EE6 E4            pop a
1753   0EE7             ; --- END TERMS
1754   0EE7 E7            pop d
1755   0EE8 FD 43         mov [d], b
1756   0EEA             ; break; 
1757   0EEA 0A 40 0F      jmp _switch20_exit ; case break
1758   0EED             _switch20_case7:
1759   0EED             ; gets(input_string); 
1760   0EED             ; --- START FUNCTION CALL
1761   0EED FA FA FD      lea d, [bp + -518] ; $input_string
1762   0EF0 2D            mov b, d
1763   0EF1 38 00 00      mov c, 0
1764   0EF4 FD AB         swp b
1765   0EF6 D8            push b
1766   0EF7 07 DA 15      call gets
1767   0EFA 51 02 00      add sp, 2
1768   0EFD             ; --- END FUNCTION CALL
1769   0EFD             ; strcpy(*(char **)p, input_string); 
1770   0EFD             ; --- START FUNCTION CALL
1771   0EFD FA FA FD      lea d, [bp + -518] ; $input_string
1772   0F00 2D            mov b, d
1773   0F01 38 00 00      mov c, 0
1774   0F04 FD AB         swp b
1775   0F06 D8            push b
1776   0F07 FA FF FF      lea d, [bp + -1] ; $p
1777   0F0A 2A            mov b, [d]
1778   0F0B 38 00 00      mov c, 0
1779   0F0E 74            mov d, b
1780   0F0F 2A            mov b, [d]
1781   0F10 FD AB         swp b
1782   0F12 D8            push b
1783   0F13 07 71 04      call strcpy
1784   0F16 51 04 00      add sp, 4
1785   0F19             ; --- END FUNCTION CALL
1786   0F19             ; p = p + 2; 
1787   0F19 FA FF FF      lea d, [bp + -1] ; $p
1788   0F1C DA            push d
1789   0F1D FA FF FF      lea d, [bp + -1] ; $p
1790   0F20 2A            mov b, [d]
1791   0F21 38 00 00      mov c, 0
1792   0F24             ; --- START TERMS
1793   0F24 D7            push a
1794   0F25 11            mov a, b
1795   0F26 FD 2E 02 00   mov32 cb, $00000002
1795   0F2A 00 00 
1796   0F2C 56            add b, a
1797   0F2D E4            pop a
1798   0F2E             ; --- END TERMS
1799   0F2E E7            pop d
1800   0F2F FD 43         mov [d], b
1801   0F31             ; break; 
1802   0F31 0A 40 0F      jmp _switch20_exit ; case break
1803   0F34             _switch20_default:
1804   0F34             ; print("Error: Unknown argument type.\n"); 
1805   0F34             ; --- START FUNCTION CALL
1806   0F34 26 4B 20      mov b, _s4 ; "Error: Unknown argument type.\n"
1807   0F37 FD AB         swp b
1808   0F39 D8            push b
1809   0F3A 07 BD 1F      call print
1810   0F3D 51 02 00      add sp, 2
1811   0F40             ; --- END FUNCTION CALL
1812   0F40             _switch20_exit:
1813   0F40             ; format_p++; 
1814   0F40 FA FD FF      lea d, [bp + -3] ; $format_p
1815   0F43 2A            mov b, [d]
1816   0F44 38 00 00      mov c, 0
1817   0F47 FD 77         inc b
1818   0F49 FA FD FF      lea d, [bp + -3] ; $format_p
1819   0F4C FD 43         mov [d], b
1820   0F4E FD 7D         dec b
1821   0F50 0A 78 0F      jmp _if19_exit
1822   0F53             _if19_else:
1823   0F53             ; putchar(*format_p); 
1824   0F53             ; --- START FUNCTION CALL
1825   0F53 FA FD FF      lea d, [bp + -3] ; $format_p
1826   0F56 2A            mov b, [d]
1827   0F57 38 00 00      mov c, 0
1828   0F5A 74            mov d, b
1829   0F5B 32            mov bl, [d]
1830   0F5C A7 00         mov bh, 0
1831   0F5E 38 00 00      mov c, 0
1832   0F61 DD            push bl
1833   0F62 07 7C 1E      call putchar
1834   0F65 51 01 00      add sp, 1
1835   0F68             ; --- END FUNCTION CALL
1836   0F68             ; format_p++; 
1837   0F68 FA FD FF      lea d, [bp + -3] ; $format_p
1838   0F6B 2A            mov b, [d]
1839   0F6C 38 00 00      mov c, 0
1840   0F6F FD 77         inc b
1841   0F71 FA FD FF      lea d, [bp + -3] ; $format_p
1842   0F74 FD 43         mov [d], b
1843   0F76 FD 7D         dec b
1844   0F78             _if19_exit:
1845   0F78             _if18_exit:
1846   0F78             _for17_update:
1847   0F78 0A D4 0C      jmp _for17_cond
1848   0F7B             _for17_exit:
1849   0F7B F9            leave
1850   0F7C 09            ret
1851   0F7D             
1852   0F7D             sprintf:
1853   0F7D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1854   0F80             ; char *p, *format_p; 
1855   0F80 52 02 00      sub sp, 2
1856   0F83 52 02 00      sub sp, 2
1857   0F86             ; char *sp; 
1858   0F86 52 02 00      sub sp, 2
1859   0F89             ; sp = dest; 
1860   0F89 FA FB FF      lea d, [bp + -5] ; $sp
1861   0F8C DA            push d
1862   0F8D FA 05 00      lea d, [bp + 5] ; $dest
1863   0F90 2A            mov b, [d]
1864   0F91 38 00 00      mov c, 0
1865   0F94 E7            pop d
1866   0F95 FD 43         mov [d], b
1867   0F97             ; format_p = format; 
1868   0F97 FA FD FF      lea d, [bp + -3] ; $format_p
1869   0F9A DA            push d
1870   0F9B FA 07 00      lea d, [bp + 7] ; $format
1871   0F9E 2A            mov b, [d]
1872   0F9F 38 00 00      mov c, 0
1873   0FA2 E7            pop d
1874   0FA3 FD 43         mov [d], b
1875   0FA5             ; p = &format + 2; 
1876   0FA5 FA FF FF      lea d, [bp + -1] ; $p
1877   0FA8 DA            push d
1878   0FA9 FA 07 00      lea d, [bp + 7] ; $format
1879   0FAC 2D            mov b, d
1880   0FAD             ; --- START TERMS
1881   0FAD D7            push a
1882   0FAE 11            mov a, b
1883   0FAF FD 2E 02 00   mov32 cb, $00000002
1883   0FB3 00 00 
1884   0FB5 56            add b, a
1885   0FB6 E4            pop a
1886   0FB7             ; --- END TERMS
1887   0FB7 E7            pop d
1888   0FB8 FD 43         mov [d], b
1889   0FBA             ; for(;;){ 
1890   0FBA             _for24_init:
1891   0FBA             _for24_cond:
1892   0FBA             _for24_block:
1893   0FBA             ; if(!*format_p) break; 
1894   0FBA             _if25_cond:
1895   0FBA FA FD FF      lea d, [bp + -3] ; $format_p
1896   0FBD 2A            mov b, [d]
1897   0FBE 38 00 00      mov c, 0
1898   0FC1 74            mov d, b
1899   0FC2 32            mov bl, [d]
1900   0FC3 A7 00         mov bh, 0
1901   0FC5 38 00 00      mov c, 0
1902   0FC8 C0 00 00      cmp b, 0
1903   0FCB FD 71         seq ; !
1904   0FCD C0 00 00      cmp b, 0
1905   0FD0 C6 D9 0F      je _if25_else
1906   0FD3             _if25_TRUE:
1907   0FD3             ; break; 
1908   0FD3 0A FE 12      jmp _for24_exit ; for break
1909   0FD6 0A FB 12      jmp _if25_exit
1910   0FD9             _if25_else:
1911   0FD9             ; if(*format_p == '%'){ 
1912   0FD9             _if26_cond:
1913   0FD9 FA FD FF      lea d, [bp + -3] ; $format_p
1914   0FDC 2A            mov b, [d]
1915   0FDD 38 00 00      mov c, 0
1916   0FE0 74            mov d, b
1917   0FE1 32            mov bl, [d]
1918   0FE2 A7 00         mov bh, 0
1919   0FE4 38 00 00      mov c, 0
1920   0FE7             ; --- START RELATIONAL
1921   0FE7 D7            push a
1922   0FE8 11            mov a, b
1923   0FE9 FD 2E 25 00   mov32 cb, $00000025
1923   0FED 00 00 
1924   0FEF B0            cmp a, b
1925   0FF0 FD 71         seq ; ==
1926   0FF2 E4            pop a
1927   0FF3             ; --- END RELATIONAL
1928   0FF3 C0 00 00      cmp b, 0
1929   0FF6 C6 D0 12      je _if26_else
1930   0FF9             _if26_TRUE:
1931   0FF9             ; format_p++; 
1932   0FF9 FA FD FF      lea d, [bp + -3] ; $format_p
1933   0FFC 2A            mov b, [d]
1934   0FFD 38 00 00      mov c, 0
1935   1000 FD 77         inc b
1936   1002 FA FD FF      lea d, [bp + -3] ; $format_p
1937   1005 FD 43         mov [d], b
1938   1007 FD 7D         dec b
1939   1009             ; switch(*format_p){ 
1940   1009             _switch27_expr:
1941   1009 FA FD FF      lea d, [bp + -3] ; $format_p
1942   100C 2A            mov b, [d]
1943   100D 38 00 00      mov c, 0
1944   1010 74            mov d, b
1945   1011 32            mov bl, [d]
1946   1012 A7 00         mov bh, 0
1947   1014 38 00 00      mov c, 0
1948   1017             _switch27_comparisons:
1949   1017 C1 6C         cmp bl, $6c
1950   1019 C6 45 10      je _switch27_case0
1951   101C C1 4C         cmp bl, $4c
1952   101E C6 45 10      je _switch27_case1
1953   1021 C1 64         cmp bl, $64
1954   1023 C6 55 11      je _switch27_case2
1955   1026 C1 69         cmp bl, $69
1956   1028 C6 55 11      je _switch27_case3
1957   102B C1 75         cmp bl, $75
1958   102D C6 A1 11      je _switch27_case4
1959   1030 C1 78         cmp bl, $78
1960   1032 C6 ED 11      je _switch27_case5
1961   1035 C1 63         cmp bl, $63
1962   1037 C6 08 12      je _switch27_case6
1963   103A C1 73         cmp bl, $73
1964   103C C6 45 12      je _switch27_case7
1965   103F 0A B1 12      jmp _switch27_default
1966   1042 0A BD 12      jmp _switch27_exit
1967   1045             _switch27_case0:
1968   1045             _switch27_case1:
1969   1045             ; format_p++; 
1970   1045 FA FD FF      lea d, [bp + -3] ; $format_p
1971   1048 2A            mov b, [d]
1972   1049 38 00 00      mov c, 0
1973   104C FD 77         inc b
1974   104E FA FD FF      lea d, [bp + -3] ; $format_p
1975   1051 FD 43         mov [d], b
1976   1053 FD 7D         dec b
1977   1055             ; if(*format_p == 'd' || *format_p == 'i') 
1978   1055             _if28_cond:
1979   1055 FA FD FF      lea d, [bp + -3] ; $format_p
1980   1058 2A            mov b, [d]
1981   1059 38 00 00      mov c, 0
1982   105C 74            mov d, b
1983   105D 32            mov bl, [d]
1984   105E A7 00         mov bh, 0
1985   1060 38 00 00      mov c, 0
1986   1063             ; --- START RELATIONAL
1987   1063 D7            push a
1988   1064 11            mov a, b
1989   1065 FD 2E 64 00   mov32 cb, $00000064
1989   1069 00 00 
1990   106B B0            cmp a, b
1991   106C FD 71         seq ; ==
1992   106E E4            pop a
1993   106F             ; --- END RELATIONAL
1994   106F             ; --- START LOGICAL OR
1995   106F D7            push a
1996   1070 11            mov a, b
1997   1071 FA FD FF      lea d, [bp + -3] ; $format_p
1998   1074 2A            mov b, [d]
1999   1075 38 00 00      mov c, 0
2000   1078 74            mov d, b
2001   1079 32            mov bl, [d]
2002   107A A7 00         mov bh, 0
2003   107C 38 00 00      mov c, 0
2004   107F             ; --- START RELATIONAL
2005   107F D7            push a
2006   1080 11            mov a, b
2007   1081 FD 2E 69 00   mov32 cb, $00000069
2007   1085 00 00 
2008   1087 B0            cmp a, b
2009   1088 FD 71         seq ; ==
2010   108A E4            pop a
2011   108B             ; --- END RELATIONAL
2012   108B FD A8         sor a, b ; ||
2013   108D E4            pop a
2014   108E             ; --- END LOGICAL OR
2015   108E C0 00 00      cmp b, 0
2016   1091 C6 B2 10      je _if28_else
2017   1094             _if28_TRUE:
2018   1094             ; print_signed_long(*(long *)p); 
2019   1094             ; --- START FUNCTION CALL
2020   1094 FA FF FF      lea d, [bp + -1] ; $p
2021   1097 2A            mov b, [d]
2022   1098 38 00 00      mov c, 0
2023   109B 74            mov d, b
2024   109C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2025   109F FD 39         mov c, b ; And place it into C
2026   10A1 2A            mov b, [d] ; Lower Word in B
2027   10A2 12            mov a, c
2028   10A3 FD AA         swp a
2029   10A5 D7            push a
2030   10A6 FD AB         swp b
2031   10A8 D8            push b
2032   10A9 07 D1 17      call print_signed_long
2033   10AC 51 04 00      add sp, 4
2034   10AF             ; --- END FUNCTION CALL
2035   10AF 0A 3A 11      jmp _if28_exit
2036   10B2             _if28_else:
2037   10B2             ; if(*format_p == 'u') 
2038   10B2             _if29_cond:
2039   10B2 FA FD FF      lea d, [bp + -3] ; $format_p
2040   10B5 2A            mov b, [d]
2041   10B6 38 00 00      mov c, 0
2042   10B9 74            mov d, b
2043   10BA 32            mov bl, [d]
2044   10BB A7 00         mov bh, 0
2045   10BD 38 00 00      mov c, 0
2046   10C0             ; --- START RELATIONAL
2047   10C0 D7            push a
2048   10C1 11            mov a, b
2049   10C2 FD 2E 75 00   mov32 cb, $00000075
2049   10C6 00 00 
2050   10C8 B0            cmp a, b
2051   10C9 FD 71         seq ; ==
2052   10CB E4            pop a
2053   10CC             ; --- END RELATIONAL
2054   10CC C0 00 00      cmp b, 0
2055   10CF C6 F0 10      je _if29_else
2056   10D2             _if29_TRUE:
2057   10D2             ; print_unsigned_long(*(unsigned long *)p); 
2058   10D2             ; --- START FUNCTION CALL
2059   10D2 FA FF FF      lea d, [bp + -1] ; $p
2060   10D5 2A            mov b, [d]
2061   10D6 38 00 00      mov c, 0
2062   10D9 74            mov d, b
2063   10DA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2064   10DD FD 39         mov c, b ; And place it into C
2065   10DF 2A            mov b, [d] ; Lower Word in B
2066   10E0 12            mov a, c
2067   10E1 FD AA         swp a
2068   10E3 D7            push a
2069   10E4 FD AB         swp b
2070   10E6 D8            push b
2071   10E7 07 40 19      call print_unsigned_long
2072   10EA 51 04 00      add sp, 4
2073   10ED             ; --- END FUNCTION CALL
2074   10ED 0A 3A 11      jmp _if29_exit
2075   10F0             _if29_else:
2076   10F0             ; if(*format_p == 'x') 
2077   10F0             _if30_cond:
2078   10F0 FA FD FF      lea d, [bp + -3] ; $format_p
2079   10F3 2A            mov b, [d]
2080   10F4 38 00 00      mov c, 0
2081   10F7 74            mov d, b
2082   10F8 32            mov bl, [d]
2083   10F9 A7 00         mov bh, 0
2084   10FB 38 00 00      mov c, 0
2085   10FE             ; --- START RELATIONAL
2086   10FE D7            push a
2087   10FF 11            mov a, b
2088   1100 FD 2E 78 00   mov32 cb, $00000078
2088   1104 00 00 
2089   1106 B0            cmp a, b
2090   1107 FD 71         seq ; ==
2091   1109 E4            pop a
2092   110A             ; --- END RELATIONAL
2093   110A C0 00 00      cmp b, 0
2094   110D C6 2E 11      je _if30_else
2095   1110             _if30_TRUE:
2096   1110             ; printx32(*(long int *)p); 
2097   1110             ; --- START FUNCTION CALL
2098   1110 FA FF FF      lea d, [bp + -1] ; $p
2099   1113 2A            mov b, [d]
2100   1114 38 00 00      mov c, 0
2101   1117 74            mov d, b
2102   1118 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2103   111B FD 39         mov c, b ; And place it into C
2104   111D 2A            mov b, [d] ; Lower Word in B
2105   111E 12            mov a, c
2106   111F FD AA         swp a
2107   1121 D7            push a
2108   1122 FD AB         swp b
2109   1124 D8            push b
2110   1125 07 39 13      call printx32
2111   1128 51 04 00      add sp, 4
2112   112B             ; --- END FUNCTION CALL
2113   112B 0A 3A 11      jmp _if30_exit
2114   112E             _if30_else:
2115   112E             ; err("Unexpected format in printf."); 
2116   112E             ; --- START FUNCTION CALL
2117   112E 26 2E 20      mov b, _s3 ; "Unexpected format in printf."
2118   1131 FD AB         swp b
2119   1133 D8            push b
2120   1134 07 24 13      call err
2121   1137 51 02 00      add sp, 2
2122   113A             ; --- END FUNCTION CALL
2123   113A             _if30_exit:
2124   113A             _if29_exit:
2125   113A             _if28_exit:
2126   113A             ; p = p + 4; 
2127   113A FA FF FF      lea d, [bp + -1] ; $p
2128   113D DA            push d
2129   113E FA FF FF      lea d, [bp + -1] ; $p
2130   1141 2A            mov b, [d]
2131   1142 38 00 00      mov c, 0
2132   1145             ; --- START TERMS
2133   1145 D7            push a
2134   1146 11            mov a, b
2135   1147 FD 2E 04 00   mov32 cb, $00000004
2135   114B 00 00 
2136   114D 56            add b, a
2137   114E E4            pop a
2138   114F             ; --- END TERMS
2139   114F E7            pop d
2140   1150 FD 43         mov [d], b
2141   1152             ; break; 
2142   1152 0A BD 12      jmp _switch27_exit ; case break
2143   1155             _switch27_case2:
2144   1155             _switch27_case3:
2145   1155             ; sp = sp + sprint_signed(sp, *(int*)p); 
2146   1155 FA FB FF      lea d, [bp + -5] ; $sp
2147   1158 DA            push d
2148   1159 FA FB FF      lea d, [bp + -5] ; $sp
2149   115C 2A            mov b, [d]
2150   115D 38 00 00      mov c, 0
2151   1160             ; --- START TERMS
2152   1160 D7            push a
2153   1161 11            mov a, b
2154   1162             ; --- START FUNCTION CALL
2155   1162 FA FF FF      lea d, [bp + -1] ; $p
2156   1165 2A            mov b, [d]
2157   1166 38 00 00      mov c, 0
2158   1169 74            mov d, b
2159   116A 2A            mov b, [d]
2160   116B 38 00 00      mov c, 0
2161   116E FD AB         swp b
2162   1170 D8            push b
2163   1171 FA FB FF      lea d, [bp + -5] ; $sp
2164   1174 2A            mov b, [d]
2165   1175 38 00 00      mov c, 0
2166   1178 FD AB         swp b
2167   117A D8            push b
2168   117B 07 B4 1C      call sprint_signed
2169   117E 51 04 00      add sp, 4
2170   1181             ; --- END FUNCTION CALL
2171   1181 56            add b, a
2172   1182 E4            pop a
2173   1183             ; --- END TERMS
2174   1183 E7            pop d
2175   1184 FD 43         mov [d], b
2176   1186             ; p = p + 2; 
2177   1186 FA FF FF      lea d, [bp + -1] ; $p
2178   1189 DA            push d
2179   118A FA FF FF      lea d, [bp + -1] ; $p
2180   118D 2A            mov b, [d]
2181   118E 38 00 00      mov c, 0
2182   1191             ; --- START TERMS
2183   1191 D7            push a
2184   1192 11            mov a, b
2185   1193 FD 2E 02 00   mov32 cb, $00000002
2185   1197 00 00 
2186   1199 56            add b, a
2187   119A E4            pop a
2188   119B             ; --- END TERMS
2189   119B E7            pop d
2190   119C FD 43         mov [d], b
2191   119E             ; break; 
2192   119E 0A BD 12      jmp _switch27_exit ; case break
2193   11A1             _switch27_case4:
2194   11A1             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2195   11A1 FA FB FF      lea d, [bp + -5] ; $sp
2196   11A4 DA            push d
2197   11A5 FA FB FF      lea d, [bp + -5] ; $sp
2198   11A8 2A            mov b, [d]
2199   11A9 38 00 00      mov c, 0
2200   11AC             ; --- START TERMS
2201   11AC D7            push a
2202   11AD 11            mov a, b
2203   11AE             ; --- START FUNCTION CALL
2204   11AE FA FF FF      lea d, [bp + -1] ; $p
2205   11B1 2A            mov b, [d]
2206   11B2 38 00 00      mov c, 0
2207   11B5 74            mov d, b
2208   11B6 2A            mov b, [d]
2209   11B7 38 00 00      mov c, 0
2210   11BA FD AB         swp b
2211   11BC D8            push b
2212   11BD FA FB FF      lea d, [bp + -5] ; $sp
2213   11C0 2A            mov b, [d]
2214   11C1 38 00 00      mov c, 0
2215   11C4 FD AB         swp b
2216   11C6 D8            push b
2217   11C7 07 5C 1A      call sprint_unsigned
2218   11CA 51 04 00      add sp, 4
2219   11CD             ; --- END FUNCTION CALL
2220   11CD 56            add b, a
2221   11CE E4            pop a
2222   11CF             ; --- END TERMS
2223   11CF E7            pop d
2224   11D0 FD 43         mov [d], b
2225   11D2             ; p = p + 2; 
2226   11D2 FA FF FF      lea d, [bp + -1] ; $p
2227   11D5 DA            push d
2228   11D6 FA FF FF      lea d, [bp + -1] ; $p
2229   11D9 2A            mov b, [d]
2230   11DA 38 00 00      mov c, 0
2231   11DD             ; --- START TERMS
2232   11DD D7            push a
2233   11DE 11            mov a, b
2234   11DF FD 2E 02 00   mov32 cb, $00000002
2234   11E3 00 00 
2235   11E5 56            add b, a
2236   11E6 E4            pop a
2237   11E7             ; --- END TERMS
2238   11E7 E7            pop d
2239   11E8 FD 43         mov [d], b
2240   11EA             ; break; 
2241   11EA 0A BD 12      jmp _switch27_exit ; case break
2242   11ED             _switch27_case5:
2243   11ED             ; p = p + 2; 
2244   11ED FA FF FF      lea d, [bp + -1] ; $p
2245   11F0 DA            push d
2246   11F1 FA FF FF      lea d, [bp + -1] ; $p
2247   11F4 2A            mov b, [d]
2248   11F5 38 00 00      mov c, 0
2249   11F8             ; --- START TERMS
2250   11F8 D7            push a
2251   11F9 11            mov a, b
2252   11FA FD 2E 02 00   mov32 cb, $00000002
2252   11FE 00 00 
2253   1200 56            add b, a
2254   1201 E4            pop a
2255   1202             ; --- END TERMS
2256   1202 E7            pop d
2257   1203 FD 43         mov [d], b
2258   1205             ; break; 
2259   1205 0A BD 12      jmp _switch27_exit ; case break
2260   1208             _switch27_case6:
2261   1208             ; *sp++ = *(char *)p; 
2262   1208 FA FB FF      lea d, [bp + -5] ; $sp
2263   120B 2A            mov b, [d]
2264   120C 38 00 00      mov c, 0
2265   120F FD 77         inc b
2266   1211 FA FB FF      lea d, [bp + -5] ; $sp
2267   1214 FD 43         mov [d], b
2268   1216 FD 7D         dec b
2269   1218 D8            push b
2270   1219 FA FF FF      lea d, [bp + -1] ; $p
2271   121C 2A            mov b, [d]
2272   121D 38 00 00      mov c, 0
2273   1220 74            mov d, b
2274   1221 32            mov bl, [d]
2275   1222 A7 00         mov bh, 0
2276   1224 38 00 00      mov c, 0
2277   1227 E7            pop d
2278   1228 FD 3E         mov [d], bl
2279   122A             ; p = p + 1; 
2280   122A FA FF FF      lea d, [bp + -1] ; $p
2281   122D DA            push d
2282   122E FA FF FF      lea d, [bp + -1] ; $p
2283   1231 2A            mov b, [d]
2284   1232 38 00 00      mov c, 0
2285   1235             ; --- START TERMS
2286   1235 D7            push a
2287   1236 11            mov a, b
2288   1237 FD 2E 01 00   mov32 cb, $00000001
2288   123B 00 00 
2289   123D 56            add b, a
2290   123E E4            pop a
2291   123F             ; --- END TERMS
2292   123F E7            pop d
2293   1240 FD 43         mov [d], b
2294   1242             ; break; 
2295   1242 0A BD 12      jmp _switch27_exit ; case break
2296   1245             _switch27_case7:
2297   1245             ; int len = strlen(*(char **)p); 
2298   1245 52 02 00      sub sp, 2
2299   1248             ; --- START LOCAL VAR INITIALIZATION
2300   1248 FA F9 FF      lea d, [bp + -7] ; $len
2301   124B DA            push d
2302   124C             ; --- START FUNCTION CALL
2303   124C FA FF FF      lea d, [bp + -1] ; $p
2304   124F 2A            mov b, [d]
2305   1250 38 00 00      mov c, 0
2306   1253 74            mov d, b
2307   1254 2A            mov b, [d]
2308   1255 FD AB         swp b
2309   1257 D8            push b
2310   1258 07 57 06      call strlen
2311   125B 51 02 00      add sp, 2
2312   125E             ; --- END FUNCTION CALL
2313   125E E7            pop d
2314   125F FD 43         mov [d], b
2315   1261             ; --- END LOCAL VAR INITIALIZATION
2316   1261             ; strcpy(sp, *(char **)p); 
2317   1261             ; --- START FUNCTION CALL
2318   1261 FA FF FF      lea d, [bp + -1] ; $p
2319   1264 2A            mov b, [d]
2320   1265 38 00 00      mov c, 0
2321   1268 74            mov d, b
2322   1269 2A            mov b, [d]
2323   126A FD AB         swp b
2324   126C D8            push b
2325   126D FA FB FF      lea d, [bp + -5] ; $sp
2326   1270 2A            mov b, [d]
2327   1271 38 00 00      mov c, 0
2328   1274 FD AB         swp b
2329   1276 D8            push b
2330   1277 07 71 04      call strcpy
2331   127A 51 04 00      add sp, 4
2332   127D             ; --- END FUNCTION CALL
2333   127D             ; sp = sp + len; 
2334   127D FA FB FF      lea d, [bp + -5] ; $sp
2335   1280 DA            push d
2336   1281 FA FB FF      lea d, [bp + -5] ; $sp
2337   1284 2A            mov b, [d]
2338   1285 38 00 00      mov c, 0
2339   1288             ; --- START TERMS
2340   1288 D7            push a
2341   1289 11            mov a, b
2342   128A FA F9 FF      lea d, [bp + -7] ; $len
2343   128D 2A            mov b, [d]
2344   128E 38 00 00      mov c, 0
2345   1291 56            add b, a
2346   1292 E4            pop a
2347   1293             ; --- END TERMS
2348   1293 E7            pop d
2349   1294 FD 43         mov [d], b
2350   1296             ; p = p + 2; 
2351   1296 FA FF FF      lea d, [bp + -1] ; $p
2352   1299 DA            push d
2353   129A FA FF FF      lea d, [bp + -1] ; $p
2354   129D 2A            mov b, [d]
2355   129E 38 00 00      mov c, 0
2356   12A1             ; --- START TERMS
2357   12A1 D7            push a
2358   12A2 11            mov a, b
2359   12A3 FD 2E 02 00   mov32 cb, $00000002
2359   12A7 00 00 
2360   12A9 56            add b, a
2361   12AA E4            pop a
2362   12AB             ; --- END TERMS
2363   12AB E7            pop d
2364   12AC FD 43         mov [d], b
2365   12AE             ; break; 
2366   12AE 0A BD 12      jmp _switch27_exit ; case break
2367   12B1             _switch27_default:
2368   12B1             ; print("Error: Unknown argument type.\n"); 
2369   12B1             ; --- START FUNCTION CALL
2370   12B1 26 4B 20      mov b, _s4 ; "Error: Unknown argument type.\n"
2371   12B4 FD AB         swp b
2372   12B6 D8            push b
2373   12B7 07 BD 1F      call print
2374   12BA 51 02 00      add sp, 2
2375   12BD             ; --- END FUNCTION CALL
2376   12BD             _switch27_exit:
2377   12BD             ; format_p++; 
2378   12BD FA FD FF      lea d, [bp + -3] ; $format_p
2379   12C0 2A            mov b, [d]
2380   12C1 38 00 00      mov c, 0
2381   12C4 FD 77         inc b
2382   12C6 FA FD FF      lea d, [bp + -3] ; $format_p
2383   12C9 FD 43         mov [d], b
2384   12CB FD 7D         dec b
2385   12CD 0A FB 12      jmp _if26_exit
2386   12D0             _if26_else:
2387   12D0             ; *sp++ = *format_p++; 
2388   12D0 FA FB FF      lea d, [bp + -5] ; $sp
2389   12D3 2A            mov b, [d]
2390   12D4 38 00 00      mov c, 0
2391   12D7 FD 77         inc b
2392   12D9 FA FB FF      lea d, [bp + -5] ; $sp
2393   12DC FD 43         mov [d], b
2394   12DE FD 7D         dec b
2395   12E0 D8            push b
2396   12E1 FA FD FF      lea d, [bp + -3] ; $format_p
2397   12E4 2A            mov b, [d]
2398   12E5 38 00 00      mov c, 0
2399   12E8 FD 77         inc b
2400   12EA FA FD FF      lea d, [bp + -3] ; $format_p
2401   12ED FD 43         mov [d], b
2402   12EF FD 7D         dec b
2403   12F1 74            mov d, b
2404   12F2 32            mov bl, [d]
2405   12F3 A7 00         mov bh, 0
2406   12F5 38 00 00      mov c, 0
2407   12F8 E7            pop d
2408   12F9 FD 3E         mov [d], bl
2409   12FB             _if26_exit:
2410   12FB             _if25_exit:
2411   12FB             _for24_update:
2412   12FB 0A BA 0F      jmp _for24_cond
2413   12FE             _for24_exit:
2414   12FE             ; *sp = '\0'; 
2415   12FE FA FB FF      lea d, [bp + -5] ; $sp
2416   1301 2A            mov b, [d]
2417   1302 38 00 00      mov c, 0
2418   1305 D8            push b
2419   1306 FD 2E 00 00   mov32 cb, $00000000
2419   130A 00 00 
2420   130C E7            pop d
2421   130D FD 3E         mov [d], bl
2422   130F             ; return sp - dest; // return total number of chars written 
2423   130F FA FB FF      lea d, [bp + -5] ; $sp
2424   1312 2A            mov b, [d]
2425   1313 38 00 00      mov c, 0
2426   1316             ; --- START TERMS
2427   1316 D7            push a
2428   1317 11            mov a, b
2429   1318 FA 05 00      lea d, [bp + 5] ; $dest
2430   131B 2A            mov b, [d]
2431   131C 38 00 00      mov c, 0
2432   131F 60            sub a, b
2433   1320 27            mov b, a
2434   1321 E4            pop a
2435   1322             ; --- END TERMS
2436   1322 F9            leave
2437   1323 09            ret
2438   1324             
2439   1324             err:
2440   1324 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2441   1327             ; print(e); 
2442   1327             ; --- START FUNCTION CALL
2443   1327 FA 05 00      lea d, [bp + 5] ; $e
2444   132A 2A            mov b, [d]
2445   132B 38 00 00      mov c, 0
2446   132E FD AB         swp b
2447   1330 D8            push b
2448   1331 07 BD 1F      call print
2449   1334 51 02 00      add sp, 2
2450   1337             ; --- END FUNCTION CALL
2451   1337 F9            leave
2452   1338 09            ret
2453   1339             
2454   1339             printx32:
2455   1339 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2456   133C             ; --- BEGIN INLINE ASM SEGMENT
2457   133C FA 05 00      lea d, [bp + 5] ; $hex
2458   133F 2B 02 00      mov b, [d+2]
2459   1342 07 4B 13      call print_u16x_printx32
2460   1345 2A            mov b, [d]
2461   1346 07 4B 13      call print_u16x_printx32
2462   1349             ; --- END INLINE ASM SEGMENT
2463   1349             ; return; 
2464   1349 F9            leave
2465   134A 09            ret
2466   134B             ; --- BEGIN INLINE ASM SEGMENT
2467   134B             print_u16x_printx32:
2468   134B D7            push a
2469   134C D8            push b
2470   134D DD            push bl
2471   134E 30            mov bl, bh
2472   134F 07 6D 13      call _itoa_printx32        
2473   1352 2F            mov bl, al        
2474   1353 19 00         mov al, 0
2475   1355 05 03         syscall sys_io        
2476   1357 24            mov ah, bl        
2477   1358 19 00         mov al, 0
2478   135A 05 03         syscall sys_io        
2479   135C EA            pop bl
2480   135D 07 6D 13      call _itoa_printx32        
2481   1360 2F            mov bl, al        
2482   1361 19 00         mov al, 0
2483   1363 05 03         syscall sys_io        
2484   1365 24            mov ah, bl        
2485   1366 19 00         mov al, 0
2486   1368 05 03         syscall sys_io        
2487   136A E5            pop b
2488   136B E4            pop a
2489   136C 09            ret
2490   136D             _itoa_printx32:
2491   136D DA            push d
2492   136E D8            push b
2493   136F A7 00         mov bh, 0
2494   1371 FD A4 04      shr bl, 4  
2495   1374 74            mov d, b
2496   1375 1F 87 13      mov al, [d + s_hex_digits_printx32]
2497   1378 23            mov ah, al
2498   1379 E5            pop b
2499   137A D8            push b
2500   137B A7 00         mov bh, 0
2501   137D FD 87 0F      and bl, $0F
2502   1380 74            mov d, b
2503   1381 1F 87 13      mov al, [d + s_hex_digits_printx32]
2504   1384 E5            pop b
2505   1385 E7            pop d
2506   1386 09            ret
2507   1387 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2507   138B 34 35 36 37 
2507   138F 38 39 41 42 
2507   1393 43 44 45 46 
2508   1397             ; --- END INLINE ASM SEGMENT
2509   1397 F9            leave
2510   1398 09            ret
2511   1399             
2512   1399             printx16:
2513   1399 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2514   139C             ; --- BEGIN INLINE ASM SEGMENT
2515   139C FA 05 00      lea d, [bp + 5] ; $hex
2516   139F 2A            mov b, [d]
2517   13A0             print_u16x_printx16:
2518   13A0 DD            push bl
2519   13A1 30            mov bl, bh
2520   13A2 07 BF 13      call _itoa_printx16        
2521   13A5 2F            mov bl, al        
2522   13A6 19 00         mov al, 0
2523   13A8 05 03         syscall sys_io        
2524   13AA 24            mov ah, bl        
2525   13AB 19 00         mov al, 0
2526   13AD 05 03         syscall sys_io        
2527   13AF EA            pop bl
2528   13B0 07 BF 13      call _itoa_printx16        
2529   13B3 2F            mov bl, al        
2530   13B4 19 00         mov al, 0
2531   13B6 05 03         syscall sys_io        
2532   13B8 24            mov ah, bl        
2533   13B9 19 00         mov al, 0
2534   13BB 05 03         syscall sys_io        
2535   13BD             ; --- END INLINE ASM SEGMENT
2536   13BD             ; return; 
2537   13BD F9            leave
2538   13BE 09            ret
2539   13BF             ; --- BEGIN INLINE ASM SEGMENT
2540   13BF             _itoa_printx16:
2541   13BF DA            push d
2542   13C0 D8            push b
2543   13C1 A7 00         mov bh, 0
2544   13C3 FD A4 04      shr bl, 4  
2545   13C6 74            mov d, b
2546   13C7 1F D9 13      mov al, [d + s_hex_digits_printx16]
2547   13CA 23            mov ah, al
2548   13CB E5            pop b
2549   13CC D8            push b
2550   13CD A7 00         mov bh, 0
2551   13CF FD 87 0F      and bl, $0F
2552   13D2 74            mov d, b
2553   13D3 1F D9 13      mov al, [d + s_hex_digits_printx16]
2554   13D6 E5            pop b
2555   13D7 E7            pop d
2556   13D8 09            ret
2557   13D9 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2557   13DD 34 35 36 37 
2557   13E1 38 39 41 42 
2557   13E5 43 44 45 46 
2558   13E9             ; --- END INLINE ASM SEGMENT
2559   13E9 F9            leave
2560   13EA 09            ret
2561   13EB             
2562   13EB             printx8:
2563   13EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2564   13EE             ; --- BEGIN INLINE ASM SEGMENT
2565   13EE FA 05 00      lea d, [bp + 5] ; $hex
2566   13F1 32            mov bl, [d]
2567   13F2 07 01 14      call _itoa_printx8        
2568   13F5 2F            mov bl, al        
2569   13F6 19 00         mov al, 0
2570   13F8 05 03         syscall sys_io        
2571   13FA 24            mov ah, bl        
2572   13FB 19 00         mov al, 0
2573   13FD 05 03         syscall sys_io        
2574   13FF             ; --- END INLINE ASM SEGMENT
2575   13FF             ; return; 
2576   13FF F9            leave
2577   1400 09            ret
2578   1401             ; --- BEGIN INLINE ASM SEGMENT
2579   1401             _itoa_printx8:
2580   1401 DA            push d
2581   1402 D8            push b
2582   1403 A7 00         mov bh, 0
2583   1405 FD A4 04      shr bl, 4  
2584   1408 74            mov d, b
2585   1409 1F 1B 14      mov al, [d + s_hex_digits_printx8]
2586   140C 23            mov ah, al
2587   140D E5            pop b
2588   140E D8            push b
2589   140F A7 00         mov bh, 0
2590   1411 FD 87 0F      and bl, $0F
2591   1414 74            mov d, b
2592   1415 1F 1B 14      mov al, [d + s_hex_digits_printx8]
2593   1418 E5            pop b
2594   1419 E7            pop d
2595   141A 09            ret
2596   141B 30 31 32 33 s_hex_digits_printx8:    .db "0123456789ABCDEF"  
2596   141F 34 35 36 37 
2596   1423 38 39 41 42 
2596   1427 43 44 45 46 
2597   142B             ; --- END INLINE ASM SEGMENT
2598   142B F9            leave
2599   142C 09            ret
2600   142D             
2601   142D             hex_str_to_int:
2602   142D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2603   1430             ; int value = 0; 
2604   1430 52 02 00      sub sp, 2
2605   1433             ; --- START LOCAL VAR INITIALIZATION
2606   1433 FA FF FF      lea d, [bp + -1] ; $value
2607   1436 DA            push d
2608   1437 FD 2E 00 00   mov32 cb, $00000000
2608   143B 00 00 
2609   143D E7            pop d
2610   143E FD 43         mov [d], b
2611   1440             ; --- END LOCAL VAR INITIALIZATION
2612   1440             ; int i; 
2613   1440 52 02 00      sub sp, 2
2614   1443             ; char hex_char; 
2615   1443 52 01 00      sub sp, 1
2616   1446             ; int len; 
2617   1446 52 02 00      sub sp, 2
2618   1449             ; len = strlen(hex_string); 
2619   1449 FA FA FF      lea d, [bp + -6] ; $len
2620   144C DA            push d
2621   144D             ; --- START FUNCTION CALL
2622   144D FA 05 00      lea d, [bp + 5] ; $hex_string
2623   1450 2A            mov b, [d]
2624   1451 38 00 00      mov c, 0
2625   1454 FD AB         swp b
2626   1456 D8            push b
2627   1457 07 57 06      call strlen
2628   145A 51 02 00      add sp, 2
2629   145D             ; --- END FUNCTION CALL
2630   145D E7            pop d
2631   145E FD 43         mov [d], b
2632   1460             ; for (i = 0; i < len; i++) { 
2633   1460             _for31_init:
2634   1460 FA FD FF      lea d, [bp + -3] ; $i
2635   1463 DA            push d
2636   1464 FD 2E 00 00   mov32 cb, $00000000
2636   1468 00 00 
2637   146A E7            pop d
2638   146B FD 43         mov [d], b
2639   146D             _for31_cond:
2640   146D FA FD FF      lea d, [bp + -3] ; $i
2641   1470 2A            mov b, [d]
2642   1471 38 00 00      mov c, 0
2643   1474             ; --- START RELATIONAL
2644   1474 D7            push a
2645   1475 11            mov a, b
2646   1476 FA FA FF      lea d, [bp + -6] ; $len
2647   1479 2A            mov b, [d]
2648   147A 38 00 00      mov c, 0
2649   147D B0            cmp a, b
2650   147E FD 73         slt ; < (signed)
2651   1480 E4            pop a
2652   1481             ; --- END RELATIONAL
2653   1481 C0 00 00      cmp b, 0
2654   1484 C6 D1 15      je _for31_exit
2655   1487             _for31_block:
2656   1487             ; hex_char = hex_string[i]; 
2657   1487 FA FC FF      lea d, [bp + -4] ; $hex_char
2658   148A DA            push d
2659   148B FA 05 00      lea d, [bp + 5] ; $hex_string
2660   148E FD 2A         mov d, [d]
2661   1490 D7            push a
2662   1491 DA            push d
2663   1492 FA FD FF      lea d, [bp + -3] ; $i
2664   1495 2A            mov b, [d]
2665   1496 38 00 00      mov c, 0
2666   1499 E7            pop d
2667   149A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2668   149E E4            pop a
2669   149F 32            mov bl, [d]
2670   14A0 A7 00         mov bh, 0
2671   14A2 38 00 00      mov c, 0
2672   14A5 E7            pop d
2673   14A6 FD 3E         mov [d], bl
2674   14A8             ; if (hex_char >= 'a' && hex_char <= 'f')  
2675   14A8             _if32_cond:
2676   14A8 FA FC FF      lea d, [bp + -4] ; $hex_char
2677   14AB 32            mov bl, [d]
2678   14AC A7 00         mov bh, 0
2679   14AE 38 00 00      mov c, 0
2680   14B1             ; --- START RELATIONAL
2681   14B1 D7            push a
2682   14B2 11            mov a, b
2683   14B3 FD 2E 61 00   mov32 cb, $00000061
2683   14B7 00 00 
2684   14B9 B0            cmp a, b
2685   14BA FD 80         sge ; >=
2686   14BC E4            pop a
2687   14BD             ; --- END RELATIONAL
2688   14BD             ; --- START LOGICAL AND
2689   14BD D7            push a
2690   14BE 11            mov a, b
2691   14BF FA FC FF      lea d, [bp + -4] ; $hex_char
2692   14C2 32            mov bl, [d]
2693   14C3 A7 00         mov bh, 0
2694   14C5 38 00 00      mov c, 0
2695   14C8             ; --- START RELATIONAL
2696   14C8 D7            push a
2697   14C9 11            mov a, b
2698   14CA FD 2E 66 00   mov32 cb, $00000066
2698   14CE 00 00 
2699   14D0 B0            cmp a, b
2700   14D1 FD 74         sle ; <= (signed)
2701   14D3 E4            pop a
2702   14D4             ; --- END RELATIONAL
2703   14D4 FD A7         sand a, b
2704   14D6 E4            pop a
2705   14D7             ; --- END LOGICAL AND
2706   14D7 C0 00 00      cmp b, 0
2707   14DA C6 1A 15      je _if32_else
2708   14DD             _if32_TRUE:
2709   14DD             ; value = (value * 16) + (hex_char - 'a' + 10); 
2710   14DD FA FF FF      lea d, [bp + -1] ; $value
2711   14E0 DA            push d
2712   14E1 FA FF FF      lea d, [bp + -1] ; $value
2713   14E4 2A            mov b, [d]
2714   14E5 38 00 00      mov c, 0
2715   14E8             ; --- START FACTORS
2716   14E8 D7            push a
2717   14E9 11            mov a, b
2718   14EA FD 2E 10 00   mov32 cb, $00000010
2718   14EE 00 00 
2719   14F0 AC            mul a, b ; *
2720   14F1 11            mov a, b
2721   14F2 27            mov b, a
2722   14F3 E4            pop a
2723   14F4             ; --- END FACTORS
2724   14F4             ; --- START TERMS
2725   14F4 D7            push a
2726   14F5 11            mov a, b
2727   14F6 FA FC FF      lea d, [bp + -4] ; $hex_char
2728   14F9 32            mov bl, [d]
2729   14FA A7 00         mov bh, 0
2730   14FC 38 00 00      mov c, 0
2731   14FF             ; --- START TERMS
2732   14FF D7            push a
2733   1500 11            mov a, b
2734   1501 FD 2E 61 00   mov32 cb, $00000061
2734   1505 00 00 
2735   1507 60            sub a, b
2736   1508 27            mov b, a
2737   1509 11            mov a, b
2738   150A FD 2E 0A 00   mov32 cb, $0000000a
2738   150E 00 00 
2739   1510 56            add b, a
2740   1511 E4            pop a
2741   1512             ; --- END TERMS
2742   1512 56            add b, a
2743   1513 E4            pop a
2744   1514             ; --- END TERMS
2745   1514 E7            pop d
2746   1515 FD 43         mov [d], b
2747   1517 0A BE 15      jmp _if32_exit
2748   151A             _if32_else:
2749   151A             ; if (hex_char >= 'A' && hex_char <= 'F')  
2750   151A             _if33_cond:
2751   151A FA FC FF      lea d, [bp + -4] ; $hex_char
2752   151D 32            mov bl, [d]
2753   151E A7 00         mov bh, 0
2754   1520 38 00 00      mov c, 0
2755   1523             ; --- START RELATIONAL
2756   1523 D7            push a
2757   1524 11            mov a, b
2758   1525 FD 2E 41 00   mov32 cb, $00000041
2758   1529 00 00 
2759   152B B0            cmp a, b
2760   152C FD 80         sge ; >=
2761   152E E4            pop a
2762   152F             ; --- END RELATIONAL
2763   152F             ; --- START LOGICAL AND
2764   152F D7            push a
2765   1530 11            mov a, b
2766   1531 FA FC FF      lea d, [bp + -4] ; $hex_char
2767   1534 32            mov bl, [d]
2768   1535 A7 00         mov bh, 0
2769   1537 38 00 00      mov c, 0
2770   153A             ; --- START RELATIONAL
2771   153A D7            push a
2772   153B 11            mov a, b
2773   153C FD 2E 46 00   mov32 cb, $00000046
2773   1540 00 00 
2774   1542 B0            cmp a, b
2775   1543 FD 74         sle ; <= (signed)
2776   1545 E4            pop a
2777   1546             ; --- END RELATIONAL
2778   1546 FD A7         sand a, b
2779   1548 E4            pop a
2780   1549             ; --- END LOGICAL AND
2781   1549 C0 00 00      cmp b, 0
2782   154C C6 8C 15      je _if33_else
2783   154F             _if33_TRUE:
2784   154F             ; value = (value * 16) + (hex_char - 'A' + 10); 
2785   154F FA FF FF      lea d, [bp + -1] ; $value
2786   1552 DA            push d
2787   1553 FA FF FF      lea d, [bp + -1] ; $value
2788   1556 2A            mov b, [d]
2789   1557 38 00 00      mov c, 0
2790   155A             ; --- START FACTORS
2791   155A D7            push a
2792   155B 11            mov a, b
2793   155C FD 2E 10 00   mov32 cb, $00000010
2793   1560 00 00 
2794   1562 AC            mul a, b ; *
2795   1563 11            mov a, b
2796   1564 27            mov b, a
2797   1565 E4            pop a
2798   1566             ; --- END FACTORS
2799   1566             ; --- START TERMS
2800   1566 D7            push a
2801   1567 11            mov a, b
2802   1568 FA FC FF      lea d, [bp + -4] ; $hex_char
2803   156B 32            mov bl, [d]
2804   156C A7 00         mov bh, 0
2805   156E 38 00 00      mov c, 0
2806   1571             ; --- START TERMS
2807   1571 D7            push a
2808   1572 11            mov a, b
2809   1573 FD 2E 41 00   mov32 cb, $00000041
2809   1577 00 00 
2810   1579 60            sub a, b
2811   157A 27            mov b, a
2812   157B 11            mov a, b
2813   157C FD 2E 0A 00   mov32 cb, $0000000a
2813   1580 00 00 
2814   1582 56            add b, a
2815   1583 E4            pop a
2816   1584             ; --- END TERMS
2817   1584 56            add b, a
2818   1585 E4            pop a
2819   1586             ; --- END TERMS
2820   1586 E7            pop d
2821   1587 FD 43         mov [d], b
2822   1589 0A BE 15      jmp _if33_exit
2823   158C             _if33_else:
2824   158C             ; value = (value * 16) + (hex_char - '0'); 
2825   158C FA FF FF      lea d, [bp + -1] ; $value
2826   158F DA            push d
2827   1590 FA FF FF      lea d, [bp + -1] ; $value
2828   1593 2A            mov b, [d]
2829   1594 38 00 00      mov c, 0
2830   1597             ; --- START FACTORS
2831   1597 D7            push a
2832   1598 11            mov a, b
2833   1599 FD 2E 10 00   mov32 cb, $00000010
2833   159D 00 00 
2834   159F AC            mul a, b ; *
2835   15A0 11            mov a, b
2836   15A1 27            mov b, a
2837   15A2 E4            pop a
2838   15A3             ; --- END FACTORS
2839   15A3             ; --- START TERMS
2840   15A3 D7            push a
2841   15A4 11            mov a, b
2842   15A5 FA FC FF      lea d, [bp + -4] ; $hex_char
2843   15A8 32            mov bl, [d]
2844   15A9 A7 00         mov bh, 0
2845   15AB 38 00 00      mov c, 0
2846   15AE             ; --- START TERMS
2847   15AE D7            push a
2848   15AF 11            mov a, b
2849   15B0 FD 2E 30 00   mov32 cb, $00000030
2849   15B4 00 00 
2850   15B6 60            sub a, b
2851   15B7 27            mov b, a
2852   15B8 E4            pop a
2853   15B9             ; --- END TERMS
2854   15B9 56            add b, a
2855   15BA E4            pop a
2856   15BB             ; --- END TERMS
2857   15BB E7            pop d
2858   15BC FD 43         mov [d], b
2859   15BE             _if33_exit:
2860   15BE             _if32_exit:
2861   15BE             _for31_update:
2862   15BE FA FD FF      lea d, [bp + -3] ; $i
2863   15C1 2A            mov b, [d]
2864   15C2 38 00 00      mov c, 0
2865   15C5 11            mov a, b
2866   15C6 FD 77         inc b
2867   15C8 FA FD FF      lea d, [bp + -3] ; $i
2868   15CB FD 43         mov [d], b
2869   15CD 27            mov b, a
2870   15CE 0A 6D 14      jmp _for31_cond
2871   15D1             _for31_exit:
2872   15D1             ; return value; 
2873   15D1 FA FF FF      lea d, [bp + -1] ; $value
2874   15D4 2A            mov b, [d]
2875   15D5 38 00 00      mov c, 0
2876   15D8 F9            leave
2877   15D9 09            ret
2878   15DA             
2879   15DA             gets:
2880   15DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2881   15DD             ; --- BEGIN INLINE ASM SEGMENT
2882   15DD FA 05 00      lea d, [bp + 5] ; $s
2883   15E0 15            mov a, [d]
2884   15E1 3C            mov d, a
2885   15E2 07 F7 15      call _gets_gets
2886   15E5             ; --- END INLINE ASM SEGMENT
2887   15E5             ; return strlen(s); 
2888   15E5             ; --- START FUNCTION CALL
2889   15E5 FA 05 00      lea d, [bp + 5] ; $s
2890   15E8 2A            mov b, [d]
2891   15E9 38 00 00      mov c, 0
2892   15EC FD AB         swp b
2893   15EE D8            push b
2894   15EF 07 57 06      call strlen
2895   15F2 51 02 00      add sp, 2
2896   15F5             ; --- END FUNCTION CALL
2897   15F5 F9            leave
2898   15F6 09            ret
2899   15F7             ; --- BEGIN INLINE ASM SEGMENT
2900   15F7             _gets_gets:
2901   15F7 D7            push a
2902   15F8 DA            push d
2903   15F9             _gets_loop_gets:
2904   15F9 19 01         mov al, 1
2905   15FB 05 03         syscall sys_io      
2906   15FD B9 00         cmp al, 0        
2907   15FF C6 F9 15      je _gets_loop_gets      
2908   1602 76 1B         cmp ah, 27
2909   1604 C6 25 16      je _gets_ansi_esc_gets
2910   1607 76 0A         cmp ah, $0A        
2911   1609 C6 90 16      je _gets_end_gets
2912   160C 76 0D         cmp ah, $0D        
2913   160E C6 90 16      je _gets_end_gets
2914   1611 76 5C         cmp ah, $5C        
2915   1613 C6 51 16      je _gets_escape_gets
2916   1616 76 08         cmp ah, $08      
2917   1618 C6 21 16      je _gets_backspace_gets
2918   161B 1A            mov al, ah
2919   161C 3E            mov [d], al
2920   161D 79            inc d
2921   161E 0A F9 15      jmp _gets_loop_gets
2922   1621             _gets_backspace_gets:
2923   1621 7F            dec d
2924   1622 0A F9 15      jmp _gets_loop_gets
2925   1625             _gets_ansi_esc_gets:
2926   1625 19 01         mov al, 1
2927   1627 05 03         syscall sys_io        
2928   1629 B9 00         cmp al, 0          
2929   162B C6 25 16      je _gets_ansi_esc_gets    
2930   162E 76 5B         cmp ah, '['
2931   1630 C7 F9 15      jne _gets_loop_gets
2932   1633             _gets_ansi_esc_2_gets:
2933   1633 19 01         mov al, 1
2934   1635 05 03         syscall sys_io          
2935   1637 B9 00         cmp al, 0            
2936   1639 C6 33 16      je _gets_ansi_esc_2_gets  
2937   163C 76 44         cmp ah, 'D'
2938   163E C6 49 16      je _gets_left_arrow_gets
2939   1641 76 43         cmp ah, 'C'
2940   1643 C6 4D 16      je _gets_right_arrow_gets
2941   1646 0A F9 15      jmp _gets_loop_gets
2942   1649             _gets_left_arrow_gets:
2943   1649 7F            dec d
2944   164A 0A F9 15      jmp _gets_loop_gets
2945   164D             _gets_right_arrow_gets:
2946   164D 79            inc d
2947   164E 0A F9 15      jmp _gets_loop_gets
2948   1651             _gets_escape_gets:
2949   1651 19 01         mov al, 1
2950   1653 05 03         syscall sys_io      
2951   1655 B9 00         cmp al, 0        
2952   1657 C6 51 16      je _gets_escape_gets      
2953   165A 76 6E         cmp ah, 'n'
2954   165C C6 7B 16      je _gets_LF_gets
2955   165F 76 72         cmp ah, 'r'
2956   1661 C6 82 16      je _gets_CR_gets
2957   1664 76 30         cmp ah, '0'
2958   1666 C6 89 16      je _gets_NULL_gets
2959   1669 76 5C         cmp ah, $5C  
2960   166B C6 74 16      je _gets_slash_gets
2961   166E 1A            mov al, ah        
2962   166F 3E            mov [d], al
2963   1670 79            inc d
2964   1671 0A F9 15      jmp _gets_loop_gets
2965   1674             _gets_slash_gets:
2966   1674 19 5C         mov al, $5C
2967   1676 3E            mov [d], al
2968   1677 79            inc d
2969   1678 0A F9 15      jmp _gets_loop_gets
2970   167B             _gets_LF_gets:
2971   167B 19 0A         mov al, $0A
2972   167D 3E            mov [d], al
2973   167E 79            inc d
2974   167F 0A F9 15      jmp _gets_loop_gets
2975   1682             _gets_CR_gets:
2976   1682 19 0D         mov al, $0D
2977   1684 3E            mov [d], al
2978   1685 79            inc d
2979   1686 0A F9 15      jmp _gets_loop_gets
2980   1689             _gets_NULL_gets:
2981   1689 19 00         mov al, $00
2982   168B 3E            mov [d], al
2983   168C 79            inc d
2984   168D 0A F9 15      jmp _gets_loop_gets
2985   1690             _gets_end_gets:
2986   1690 19 00         mov al, 0
2987   1692 3E            mov [d], al        
2988   1693 E7            pop d
2989   1694 E4            pop a
2990   1695 09            ret
2991   1696             ; --- END INLINE ASM SEGMENT
2992   1696 F9            leave
2993   1697 09            ret
2994   1698             
2995   1698             print_signed:
2996   1698 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2997   169B             ; char digits[5]; 
2998   169B 52 05 00      sub sp, 5
2999   169E             ; int i = 0; 
3000   169E 52 02 00      sub sp, 2
3001   16A1             ; --- START LOCAL VAR INITIALIZATION
3002   16A1 FA FA FF      lea d, [bp + -6] ; $i
3003   16A4 DA            push d
3004   16A5 FD 2E 00 00   mov32 cb, $00000000
3004   16A9 00 00 
3005   16AB E7            pop d
3006   16AC FD 43         mov [d], b
3007   16AE             ; --- END LOCAL VAR INITIALIZATION
3008   16AE             ; if (num < 0) { 
3009   16AE             _if34_cond:
3010   16AE FA 05 00      lea d, [bp + 5] ; $num
3011   16B1 2A            mov b, [d]
3012   16B2 38 00 00      mov c, 0
3013   16B5             ; --- START RELATIONAL
3014   16B5 D7            push a
3015   16B6 11            mov a, b
3016   16B7 FD 2E 00 00   mov32 cb, $00000000
3016   16BB 00 00 
3017   16BD B0            cmp a, b
3018   16BE FD 73         slt ; < (signed)
3019   16C0 E4            pop a
3020   16C1             ; --- END RELATIONAL
3021   16C1 C0 00 00      cmp b, 0
3022   16C4 C6 E7 16      je _if34_else
3023   16C7             _if34_TRUE:
3024   16C7             ; putchar('-'); 
3025   16C7             ; --- START FUNCTION CALL
3026   16C7 FD 2E 2D 00   mov32 cb, $0000002d
3026   16CB 00 00 
3027   16CD DD            push bl
3028   16CE 07 7C 1E      call putchar
3029   16D1 51 01 00      add sp, 1
3030   16D4             ; --- END FUNCTION CALL
3031   16D4             ; num = -num; 
3032   16D4 FA 05 00      lea d, [bp + 5] ; $num
3033   16D7 DA            push d
3034   16D8 FA 05 00      lea d, [bp + 5] ; $num
3035   16DB 2A            mov b, [d]
3036   16DC 38 00 00      mov c, 0
3037   16DF FD 97         neg b
3038   16E1 E7            pop d
3039   16E2 FD 43         mov [d], b
3040   16E4 0A 12 17      jmp _if34_exit
3041   16E7             _if34_else:
3042   16E7             ; if (num == 0) { 
3043   16E7             _if35_cond:
3044   16E7 FA 05 00      lea d, [bp + 5] ; $num
3045   16EA 2A            mov b, [d]
3046   16EB 38 00 00      mov c, 0
3047   16EE             ; --- START RELATIONAL
3048   16EE D7            push a
3049   16EF 11            mov a, b
3050   16F0 FD 2E 00 00   mov32 cb, $00000000
3050   16F4 00 00 
3051   16F6 B0            cmp a, b
3052   16F7 FD 71         seq ; ==
3053   16F9 E4            pop a
3054   16FA             ; --- END RELATIONAL
3055   16FA C0 00 00      cmp b, 0
3056   16FD C6 12 17      je _if35_exit
3057   1700             _if35_TRUE:
3058   1700             ; putchar('0'); 
3059   1700             ; --- START FUNCTION CALL
3060   1700 FD 2E 30 00   mov32 cb, $00000030
3060   1704 00 00 
3061   1706 DD            push bl
3062   1707 07 7C 1E      call putchar
3063   170A 51 01 00      add sp, 1
3064   170D             ; --- END FUNCTION CALL
3065   170D             ; return; 
3066   170D F9            leave
3067   170E 09            ret
3068   170F 0A 12 17      jmp _if35_exit
3069   1712             _if35_exit:
3070   1712             _if34_exit:
3071   1712             ; while (num > 0) { 
3072   1712             _while36_cond:
3073   1712 FA 05 00      lea d, [bp + 5] ; $num
3074   1715 2A            mov b, [d]
3075   1716 38 00 00      mov c, 0
3076   1719             ; --- START RELATIONAL
3077   1719 D7            push a
3078   171A 11            mov a, b
3079   171B FD 2E 00 00   mov32 cb, $00000000
3079   171F 00 00 
3080   1721 B0            cmp a, b
3081   1722 FD 7F         sgt ; >
3082   1724 E4            pop a
3083   1725             ; --- END RELATIONAL
3084   1725 C0 00 00      cmp b, 0
3085   1728 C6 87 17      je _while36_exit
3086   172B             _while36_block:
3087   172B             ; digits[i] = '0' + (num % 10); 
3088   172B FA FC FF      lea d, [bp + -4] ; $digits
3089   172E D7            push a
3090   172F DA            push d
3091   1730 FA FA FF      lea d, [bp + -6] ; $i
3092   1733 2A            mov b, [d]
3093   1734 38 00 00      mov c, 0
3094   1737 E7            pop d
3095   1738 5A            add d, b
3096   1739 E4            pop a
3097   173A DA            push d
3098   173B FD 2E 30 00   mov32 cb, $00000030
3098   173F 00 00 
3099   1741             ; --- START TERMS
3100   1741 D7            push a
3101   1742 11            mov a, b
3102   1743 FA 05 00      lea d, [bp + 5] ; $num
3103   1746 2A            mov b, [d]
3104   1747 38 00 00      mov c, 0
3105   174A             ; --- START FACTORS
3106   174A D7            push a
3107   174B 11            mov a, b
3108   174C FD 2E 0A 00   mov32 cb, $0000000a
3108   1750 00 00 
3109   1752 AE            div a, b ; 
3110   1753 11            mov a, b
3111   1754 27            mov b, a
3112   1755 E4            pop a
3113   1756             ; --- END FACTORS
3114   1756 56            add b, a
3115   1757 E4            pop a
3116   1758             ; --- END TERMS
3117   1758 E7            pop d
3118   1759 FD 3E         mov [d], bl
3119   175B             ; num = num / 10; 
3120   175B FA 05 00      lea d, [bp + 5] ; $num
3121   175E DA            push d
3122   175F FA 05 00      lea d, [bp + 5] ; $num
3123   1762 2A            mov b, [d]
3124   1763 38 00 00      mov c, 0
3125   1766             ; --- START FACTORS
3126   1766 D7            push a
3127   1767 11            mov a, b
3128   1768 FD 2E 0A 00   mov32 cb, $0000000a
3128   176C 00 00 
3129   176E AE            div a, b
3130   176F 27            mov b, a
3131   1770 E4            pop a
3132   1771             ; --- END FACTORS
3133   1771 E7            pop d
3134   1772 FD 43         mov [d], b
3135   1774             ; i++; 
3136   1774 FA FA FF      lea d, [bp + -6] ; $i
3137   1777 2A            mov b, [d]
3138   1778 38 00 00      mov c, 0
3139   177B 11            mov a, b
3140   177C FD 77         inc b
3141   177E FA FA FF      lea d, [bp + -6] ; $i
3142   1781 FD 43         mov [d], b
3143   1783 27            mov b, a
3144   1784 0A 12 17      jmp _while36_cond
3145   1787             _while36_exit:
3146   1787             ; while (i > 0) { 
3147   1787             _while37_cond:
3148   1787 FA FA FF      lea d, [bp + -6] ; $i
3149   178A 2A            mov b, [d]
3150   178B 38 00 00      mov c, 0
3151   178E             ; --- START RELATIONAL
3152   178E D7            push a
3153   178F 11            mov a, b
3154   1790 FD 2E 00 00   mov32 cb, $00000000
3154   1794 00 00 
3155   1796 B0            cmp a, b
3156   1797 FD 7F         sgt ; >
3157   1799 E4            pop a
3158   179A             ; --- END RELATIONAL
3159   179A C0 00 00      cmp b, 0
3160   179D C6 CF 17      je _while37_exit
3161   17A0             _while37_block:
3162   17A0             ; i--; 
3163   17A0 FA FA FF      lea d, [bp + -6] ; $i
3164   17A3 2A            mov b, [d]
3165   17A4 38 00 00      mov c, 0
3166   17A7 11            mov a, b
3167   17A8 FD 7D         dec b
3168   17AA FA FA FF      lea d, [bp + -6] ; $i
3169   17AD FD 43         mov [d], b
3170   17AF 27            mov b, a
3171   17B0             ; putchar(digits[i]); 
3172   17B0             ; --- START FUNCTION CALL
3173   17B0 FA FC FF      lea d, [bp + -4] ; $digits
3174   17B3 D7            push a
3175   17B4 DA            push d
3176   17B5 FA FA FF      lea d, [bp + -6] ; $i
3177   17B8 2A            mov b, [d]
3178   17B9 38 00 00      mov c, 0
3179   17BC E7            pop d
3180   17BD 5A            add d, b
3181   17BE E4            pop a
3182   17BF 32            mov bl, [d]
3183   17C0 A7 00         mov bh, 0
3184   17C2 38 00 00      mov c, 0
3185   17C5 DD            push bl
3186   17C6 07 7C 1E      call putchar
3187   17C9 51 01 00      add sp, 1
3188   17CC             ; --- END FUNCTION CALL
3189   17CC 0A 87 17      jmp _while37_cond
3190   17CF             _while37_exit:
3191   17CF F9            leave
3192   17D0 09            ret
3193   17D1             
3194   17D1             print_signed_long:
3195   17D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3196   17D4             ; char digits[10]; 
3197   17D4 52 0A 00      sub sp, 10
3198   17D7             ; int i = 0; 
3199   17D7 52 02 00      sub sp, 2
3200   17DA             ; --- START LOCAL VAR INITIALIZATION
3201   17DA FA F5 FF      lea d, [bp + -11] ; $i
3202   17DD DA            push d
3203   17DE FD 2E 00 00   mov32 cb, $00000000
3203   17E2 00 00 
3204   17E4 E7            pop d
3205   17E5 FD 43         mov [d], b
3206   17E7             ; --- END LOCAL VAR INITIALIZATION
3207   17E7             ; if (num < 0) { 
3208   17E7             _if38_cond:
3209   17E7 FA 05 00      lea d, [bp + 5] ; $num
3210   17EA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3211   17ED FD 39         mov c, b ; And place it into C
3212   17EF 2A            mov b, [d] ; Lower Word in B
3213   17F0             ; --- START RELATIONAL
3214   17F0 D7            push a
3215   17F1 FD D8         push g
3216   17F3 11            mov a, b
3217   17F4 FD 7A         mov g, c
3218   17F6 FD 2E 00 00   mov32 cb, $00000000
3218   17FA 00 00 
3219   17FC FD AF         cmp32 ga, cb
3220   17FE FD 73         slt ; <
3221   1800 FD F1         pop g
3222   1802 E4            pop a
3223   1803             ; --- END RELATIONAL
3224   1803 C0 00 00      cmp b, 0
3225   1806 C6 3A 18      je _if38_else
3226   1809             _if38_TRUE:
3227   1809             ; putchar('-'); 
3228   1809             ; --- START FUNCTION CALL
3229   1809 FD 2E 2D 00   mov32 cb, $0000002d
3229   180D 00 00 
3230   180F DD            push bl
3231   1810 07 7C 1E      call putchar
3232   1813 51 01 00      add sp, 1
3233   1816             ; --- END FUNCTION CALL
3234   1816             ; num = -num; 
3235   1816 FA 05 00      lea d, [bp + 5] ; $num
3236   1819 DA            push d
3237   181A FA 05 00      lea d, [bp + 5] ; $num
3238   181D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3239   1820 FD 39         mov c, b ; And place it into C
3240   1822 2A            mov b, [d] ; Lower Word in B
3241   1823 12            mov a, c
3242   1824 95            not a
3243   1825 97            not b
3244   1826 55 01 00      add b, 1
3245   1829 5B 00 00      adc a, 0
3246   182C 39            mov c, a
3247   182D E7            pop d
3248   182E FD 43         mov [d], b
3249   1830 26 00 00      mov b, 0
3250   1833 FD 44 02 00   mov [d + 2], b
3251   1837 0A 6E 18      jmp _if38_exit
3252   183A             _if38_else:
3253   183A             ; if (num == 0) { 
3254   183A             _if39_cond:
3255   183A FA 05 00      lea d, [bp + 5] ; $num
3256   183D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3257   1840 FD 39         mov c, b ; And place it into C
3258   1842 2A            mov b, [d] ; Lower Word in B
3259   1843             ; --- START RELATIONAL
3260   1843 D7            push a
3261   1844 FD D8         push g
3262   1846 11            mov a, b
3263   1847 FD 7A         mov g, c
3264   1849 FD 2E 00 00   mov32 cb, $00000000
3264   184D 00 00 
3265   184F FD AF         cmp32 ga, cb
3266   1851 FD 71         seq ; ==
3267   1853 FD F1         pop g
3268   1855 E4            pop a
3269   1856             ; --- END RELATIONAL
3270   1856 C0 00 00      cmp b, 0
3271   1859 C6 6E 18      je _if39_exit
3272   185C             _if39_TRUE:
3273   185C             ; putchar('0'); 
3274   185C             ; --- START FUNCTION CALL
3275   185C FD 2E 30 00   mov32 cb, $00000030
3275   1860 00 00 
3276   1862 DD            push bl
3277   1863 07 7C 1E      call putchar
3278   1866 51 01 00      add sp, 1
3279   1869             ; --- END FUNCTION CALL
3280   1869             ; return; 
3281   1869 F9            leave
3282   186A 09            ret
3283   186B 0A 6E 18      jmp _if39_exit
3284   186E             _if39_exit:
3285   186E             _if38_exit:
3286   186E             ; while (num > 0) { 
3287   186E             _while40_cond:
3288   186E FA 05 00      lea d, [bp + 5] ; $num
3289   1871 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3290   1874 FD 39         mov c, b ; And place it into C
3291   1876 2A            mov b, [d] ; Lower Word in B
3292   1877             ; --- START RELATIONAL
3293   1877 D7            push a
3294   1878 FD D8         push g
3295   187A 11            mov a, b
3296   187B FD 7A         mov g, c
3297   187D FD 2E 00 00   mov32 cb, $00000000
3297   1881 00 00 
3298   1883 FD AF         cmp32 ga, cb
3299   1885 FD 7F         sgt
3300   1887 FD F1         pop g
3301   1889 E4            pop a
3302   188A             ; --- END RELATIONAL
3303   188A C0 00 00      cmp b, 0
3304   188D C6 F6 18      je _while40_exit
3305   1890             _while40_block:
3306   1890             ; digits[i] = '0' + (num % 10); 
3307   1890 FA F7 FF      lea d, [bp + -9] ; $digits
3308   1893 D7            push a
3309   1894 DA            push d
3310   1895 FA F5 FF      lea d, [bp + -11] ; $i
3311   1898 2A            mov b, [d]
3312   1899 38 00 00      mov c, 0
3313   189C E7            pop d
3314   189D 5A            add d, b
3315   189E E4            pop a
3316   189F DA            push d
3317   18A0 FD 2E 30 00   mov32 cb, $00000030
3317   18A4 00 00 
3318   18A6             ; --- START TERMS
3319   18A6 D7            push a
3320   18A7 11            mov a, b
3321   18A8 FA 05 00      lea d, [bp + 5] ; $num
3322   18AB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3323   18AE FD 39         mov c, b ; And place it into C
3324   18B0 2A            mov b, [d] ; Lower Word in B
3325   18B1             ; --- START FACTORS
3326   18B1 D7            push a
3327   18B2 11            mov a, b
3328   18B3 FD 2E 0A 00   mov32 cb, $0000000a
3328   18B7 00 00 
3329   18B9 AE            div a, b ; 
3330   18BA 11            mov a, b
3331   18BB 27            mov b, a
3332   18BC E4            pop a
3333   18BD             ; --- END FACTORS
3334   18BD FD 15         add32 cb, ga
3335   18BF E4            pop a
3336   18C0             ; --- END TERMS
3337   18C0 E7            pop d
3338   18C1 FD 3E         mov [d], bl
3339   18C3             ; num = num / 10; 
3340   18C3 FA 05 00      lea d, [bp + 5] ; $num
3341   18C6 DA            push d
3342   18C7 FA 05 00      lea d, [bp + 5] ; $num
3343   18CA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3344   18CD FD 39         mov c, b ; And place it into C
3345   18CF 2A            mov b, [d] ; Lower Word in B
3346   18D0             ; --- START FACTORS
3347   18D0 D7            push a
3348   18D1 11            mov a, b
3349   18D2 FD 2E 0A 00   mov32 cb, $0000000a
3349   18D6 00 00 
3350   18D8 AE            div a, b
3351   18D9 27            mov b, a
3352   18DA E4            pop a
3353   18DB             ; --- END FACTORS
3354   18DB E7            pop d
3355   18DC FD 43         mov [d], b
3356   18DE 28            mov b, c
3357   18DF FD 44 02 00   mov [d + 2], b
3358   18E3             ; i++; 
3359   18E3 FA F5 FF      lea d, [bp + -11] ; $i
3360   18E6 2A            mov b, [d]
3361   18E7 38 00 00      mov c, 0
3362   18EA 11            mov a, b
3363   18EB FD 77         inc b
3364   18ED FA F5 FF      lea d, [bp + -11] ; $i
3365   18F0 FD 43         mov [d], b
3366   18F2 27            mov b, a
3367   18F3 0A 6E 18      jmp _while40_cond
3368   18F6             _while40_exit:
3369   18F6             ; while (i > 0) { 
3370   18F6             _while41_cond:
3371   18F6 FA F5 FF      lea d, [bp + -11] ; $i
3372   18F9 2A            mov b, [d]
3373   18FA 38 00 00      mov c, 0
3374   18FD             ; --- START RELATIONAL
3375   18FD D7            push a
3376   18FE 11            mov a, b
3377   18FF FD 2E 00 00   mov32 cb, $00000000
3377   1903 00 00 
3378   1905 B0            cmp a, b
3379   1906 FD 7F         sgt ; >
3380   1908 E4            pop a
3381   1909             ; --- END RELATIONAL
3382   1909 C0 00 00      cmp b, 0
3383   190C C6 3E 19      je _while41_exit
3384   190F             _while41_block:
3385   190F             ; i--; 
3386   190F FA F5 FF      lea d, [bp + -11] ; $i
3387   1912 2A            mov b, [d]
3388   1913 38 00 00      mov c, 0
3389   1916 11            mov a, b
3390   1917 FD 7D         dec b
3391   1919 FA F5 FF      lea d, [bp + -11] ; $i
3392   191C FD 43         mov [d], b
3393   191E 27            mov b, a
3394   191F             ; putchar(digits[i]); 
3395   191F             ; --- START FUNCTION CALL
3396   191F FA F7 FF      lea d, [bp + -9] ; $digits
3397   1922 D7            push a
3398   1923 DA            push d
3399   1924 FA F5 FF      lea d, [bp + -11] ; $i
3400   1927 2A            mov b, [d]
3401   1928 38 00 00      mov c, 0
3402   192B E7            pop d
3403   192C 5A            add d, b
3404   192D E4            pop a
3405   192E 32            mov bl, [d]
3406   192F A7 00         mov bh, 0
3407   1931 38 00 00      mov c, 0
3408   1934 DD            push bl
3409   1935 07 7C 1E      call putchar
3410   1938 51 01 00      add sp, 1
3411   193B             ; --- END FUNCTION CALL
3412   193B 0A F6 18      jmp _while41_cond
3413   193E             _while41_exit:
3414   193E F9            leave
3415   193F 09            ret
3416   1940             
3417   1940             print_unsigned_long:
3418   1940 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3419   1943             ; char digits[10]; 
3420   1943 52 0A 00      sub sp, 10
3421   1946             ; int i; 
3422   1946 52 02 00      sub sp, 2
3423   1949             ; i = 0; 
3424   1949 FA F5 FF      lea d, [bp + -11] ; $i
3425   194C DA            push d
3426   194D FD 2E 00 00   mov32 cb, $00000000
3426   1951 00 00 
3427   1953 E7            pop d
3428   1954 FD 43         mov [d], b
3429   1956             ; if(num == 0){ 
3430   1956             _if42_cond:
3431   1956 FA 05 00      lea d, [bp + 5] ; $num
3432   1959 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3433   195C FD 39         mov c, b ; And place it into C
3434   195E 2A            mov b, [d] ; Lower Word in B
3435   195F             ; --- START RELATIONAL
3436   195F D7            push a
3437   1960 FD D8         push g
3438   1962 11            mov a, b
3439   1963 FD 7A         mov g, c
3440   1965 FD 2E 00 00   mov32 cb, $00000000
3440   1969 00 00 
3441   196B FD AF         cmp32 ga, cb
3442   196D FD 71         seq ; ==
3443   196F FD F1         pop g
3444   1971 E4            pop a
3445   1972             ; --- END RELATIONAL
3446   1972 C0 00 00      cmp b, 0
3447   1975 C6 8A 19      je _if42_exit
3448   1978             _if42_TRUE:
3449   1978             ; putchar('0'); 
3450   1978             ; --- START FUNCTION CALL
3451   1978 FD 2E 30 00   mov32 cb, $00000030
3451   197C 00 00 
3452   197E DD            push bl
3453   197F 07 7C 1E      call putchar
3454   1982 51 01 00      add sp, 1
3455   1985             ; --- END FUNCTION CALL
3456   1985             ; return; 
3457   1985 F9            leave
3458   1986 09            ret
3459   1987 0A 8A 19      jmp _if42_exit
3460   198A             _if42_exit:
3461   198A             ; while (num > 0) { 
3462   198A             _while43_cond:
3463   198A FA 05 00      lea d, [bp + 5] ; $num
3464   198D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3465   1990 FD 39         mov c, b ; And place it into C
3466   1992 2A            mov b, [d] ; Lower Word in B
3467   1993             ; --- START RELATIONAL
3468   1993 D7            push a
3469   1994 FD D8         push g
3470   1996 11            mov a, b
3471   1997 FD 7A         mov g, c
3472   1999 FD 2E 00 00   mov32 cb, $00000000
3472   199D 00 00 
3473   199F FD AF         cmp32 ga, cb
3474   19A1 FD 81         sgu
3475   19A3 FD F1         pop g
3476   19A5 E4            pop a
3477   19A6             ; --- END RELATIONAL
3478   19A6 C0 00 00      cmp b, 0
3479   19A9 C6 12 1A      je _while43_exit
3480   19AC             _while43_block:
3481   19AC             ; digits[i] = '0' + (num % 10); 
3482   19AC FA F7 FF      lea d, [bp + -9] ; $digits
3483   19AF D7            push a
3484   19B0 DA            push d
3485   19B1 FA F5 FF      lea d, [bp + -11] ; $i
3486   19B4 2A            mov b, [d]
3487   19B5 38 00 00      mov c, 0
3488   19B8 E7            pop d
3489   19B9 5A            add d, b
3490   19BA E4            pop a
3491   19BB DA            push d
3492   19BC FD 2E 30 00   mov32 cb, $00000030
3492   19C0 00 00 
3493   19C2             ; --- START TERMS
3494   19C2 D7            push a
3495   19C3 11            mov a, b
3496   19C4 FA 05 00      lea d, [bp + 5] ; $num
3497   19C7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3498   19CA FD 39         mov c, b ; And place it into C
3499   19CC 2A            mov b, [d] ; Lower Word in B
3500   19CD             ; --- START FACTORS
3501   19CD D7            push a
3502   19CE 11            mov a, b
3503   19CF FD 2E 0A 00   mov32 cb, $0000000a
3503   19D3 00 00 
3504   19D5 AE            div a, b ; 
3505   19D6 11            mov a, b
3506   19D7 27            mov b, a
3507   19D8 E4            pop a
3508   19D9             ; --- END FACTORS
3509   19D9 FD 15         add32 cb, ga
3510   19DB E4            pop a
3511   19DC             ; --- END TERMS
3512   19DC E7            pop d
3513   19DD FD 3E         mov [d], bl
3514   19DF             ; num = num / 10; 
3515   19DF FA 05 00      lea d, [bp + 5] ; $num
3516   19E2 DA            push d
3517   19E3 FA 05 00      lea d, [bp + 5] ; $num
3518   19E6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3519   19E9 FD 39         mov c, b ; And place it into C
3520   19EB 2A            mov b, [d] ; Lower Word in B
3521   19EC             ; --- START FACTORS
3522   19EC D7            push a
3523   19ED 11            mov a, b
3524   19EE FD 2E 0A 00   mov32 cb, $0000000a
3524   19F2 00 00 
3525   19F4 AE            div a, b
3526   19F5 27            mov b, a
3527   19F6 E4            pop a
3528   19F7             ; --- END FACTORS
3529   19F7 E7            pop d
3530   19F8 FD 43         mov [d], b
3531   19FA 28            mov b, c
3532   19FB FD 44 02 00   mov [d + 2], b
3533   19FF             ; i++; 
3534   19FF FA F5 FF      lea d, [bp + -11] ; $i
3535   1A02 2A            mov b, [d]
3536   1A03 38 00 00      mov c, 0
3537   1A06 11            mov a, b
3538   1A07 FD 77         inc b
3539   1A09 FA F5 FF      lea d, [bp + -11] ; $i
3540   1A0C FD 43         mov [d], b
3541   1A0E 27            mov b, a
3542   1A0F 0A 8A 19      jmp _while43_cond
3543   1A12             _while43_exit:
3544   1A12             ; while (i > 0) { 
3545   1A12             _while44_cond:
3546   1A12 FA F5 FF      lea d, [bp + -11] ; $i
3547   1A15 2A            mov b, [d]
3548   1A16 38 00 00      mov c, 0
3549   1A19             ; --- START RELATIONAL
3550   1A19 D7            push a
3551   1A1A 11            mov a, b
3552   1A1B FD 2E 00 00   mov32 cb, $00000000
3552   1A1F 00 00 
3553   1A21 B0            cmp a, b
3554   1A22 FD 7F         sgt ; >
3555   1A24 E4            pop a
3556   1A25             ; --- END RELATIONAL
3557   1A25 C0 00 00      cmp b, 0
3558   1A28 C6 5A 1A      je _while44_exit
3559   1A2B             _while44_block:
3560   1A2B             ; i--; 
3561   1A2B FA F5 FF      lea d, [bp + -11] ; $i
3562   1A2E 2A            mov b, [d]
3563   1A2F 38 00 00      mov c, 0
3564   1A32 11            mov a, b
3565   1A33 FD 7D         dec b
3566   1A35 FA F5 FF      lea d, [bp + -11] ; $i
3567   1A38 FD 43         mov [d], b
3568   1A3A 27            mov b, a
3569   1A3B             ; putchar(digits[i]); 
3570   1A3B             ; --- START FUNCTION CALL
3571   1A3B FA F7 FF      lea d, [bp + -9] ; $digits
3572   1A3E D7            push a
3573   1A3F DA            push d
3574   1A40 FA F5 FF      lea d, [bp + -11] ; $i
3575   1A43 2A            mov b, [d]
3576   1A44 38 00 00      mov c, 0
3577   1A47 E7            pop d
3578   1A48 5A            add d, b
3579   1A49 E4            pop a
3580   1A4A 32            mov bl, [d]
3581   1A4B A7 00         mov bh, 0
3582   1A4D 38 00 00      mov c, 0
3583   1A50 DD            push bl
3584   1A51 07 7C 1E      call putchar
3585   1A54 51 01 00      add sp, 1
3586   1A57             ; --- END FUNCTION CALL
3587   1A57 0A 12 1A      jmp _while44_cond
3588   1A5A             _while44_exit:
3589   1A5A F9            leave
3590   1A5B 09            ret
3591   1A5C             
3592   1A5C             sprint_unsigned:
3593   1A5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3594   1A5F             ; char digits[5]; 
3595   1A5F 52 05 00      sub sp, 5
3596   1A62             ; int i; 
3597   1A62 52 02 00      sub sp, 2
3598   1A65             ; int len = 0; 
3599   1A65 52 02 00      sub sp, 2
3600   1A68             ; --- START LOCAL VAR INITIALIZATION
3601   1A68 FA F8 FF      lea d, [bp + -8] ; $len
3602   1A6B DA            push d
3603   1A6C FD 2E 00 00   mov32 cb, $00000000
3603   1A70 00 00 
3604   1A72 E7            pop d
3605   1A73 FD 43         mov [d], b
3606   1A75             ; --- END LOCAL VAR INITIALIZATION
3607   1A75             ; i = 0; 
3608   1A75 FA FA FF      lea d, [bp + -6] ; $i
3609   1A78 DA            push d
3610   1A79 FD 2E 00 00   mov32 cb, $00000000
3610   1A7D 00 00 
3611   1A7F E7            pop d
3612   1A80 FD 43         mov [d], b
3613   1A82             ; if(num == 0){ 
3614   1A82             _if45_cond:
3615   1A82 FA 07 00      lea d, [bp + 7] ; $num
3616   1A85 2A            mov b, [d]
3617   1A86 38 00 00      mov c, 0
3618   1A89             ; --- START RELATIONAL
3619   1A89 D7            push a
3620   1A8A 11            mov a, b
3621   1A8B FD 2E 00 00   mov32 cb, $00000000
3621   1A8F 00 00 
3622   1A91 B0            cmp a, b
3623   1A92 FD 71         seq ; ==
3624   1A94 E4            pop a
3625   1A95             ; --- END RELATIONAL
3626   1A95 C0 00 00      cmp b, 0
3627   1A98 C6 C0 1A      je _if45_exit
3628   1A9B             _if45_TRUE:
3629   1A9B             ; *dest++ = '0'; 
3630   1A9B FA 05 00      lea d, [bp + 5] ; $dest
3631   1A9E 2A            mov b, [d]
3632   1A9F 38 00 00      mov c, 0
3633   1AA2 FD 77         inc b
3634   1AA4 FA 05 00      lea d, [bp + 5] ; $dest
3635   1AA7 FD 43         mov [d], b
3636   1AA9 FD 7D         dec b
3637   1AAB D8            push b
3638   1AAC FD 2E 30 00   mov32 cb, $00000030
3638   1AB0 00 00 
3639   1AB2 E7            pop d
3640   1AB3 FD 3E         mov [d], bl
3641   1AB5             ; return 1; 
3642   1AB5 FD 2E 01 00   mov32 cb, $00000001
3642   1AB9 00 00 
3643   1ABB F9            leave
3644   1ABC 09            ret
3645   1ABD 0A C0 1A      jmp _if45_exit
3646   1AC0             _if45_exit:
3647   1AC0             ; while (num > 0) { 
3648   1AC0             _while46_cond:
3649   1AC0 FA 07 00      lea d, [bp + 7] ; $num
3650   1AC3 2A            mov b, [d]
3651   1AC4 38 00 00      mov c, 0
3652   1AC7             ; --- START RELATIONAL
3653   1AC7 D7            push a
3654   1AC8 11            mov a, b
3655   1AC9 FD 2E 00 00   mov32 cb, $00000000
3655   1ACD 00 00 
3656   1ACF B0            cmp a, b
3657   1AD0 FD 81         sgu ; > (unsigned)
3658   1AD2 E4            pop a
3659   1AD3             ; --- END RELATIONAL
3660   1AD3 C0 00 00      cmp b, 0
3661   1AD6 C6 35 1B      je _while46_exit
3662   1AD9             _while46_block:
3663   1AD9             ; digits[i] = '0' + (num % 10); 
3664   1AD9 FA FC FF      lea d, [bp + -4] ; $digits
3665   1ADC D7            push a
3666   1ADD DA            push d
3667   1ADE FA FA FF      lea d, [bp + -6] ; $i
3668   1AE1 2A            mov b, [d]
3669   1AE2 38 00 00      mov c, 0
3670   1AE5 E7            pop d
3671   1AE6 5A            add d, b
3672   1AE7 E4            pop a
3673   1AE8 DA            push d
3674   1AE9 FD 2E 30 00   mov32 cb, $00000030
3674   1AED 00 00 
3675   1AEF             ; --- START TERMS
3676   1AEF D7            push a
3677   1AF0 11            mov a, b
3678   1AF1 FA 07 00      lea d, [bp + 7] ; $num
3679   1AF4 2A            mov b, [d]
3680   1AF5 38 00 00      mov c, 0
3681   1AF8             ; --- START FACTORS
3682   1AF8 D7            push a
3683   1AF9 11            mov a, b
3684   1AFA FD 2E 0A 00   mov32 cb, $0000000a
3684   1AFE 00 00 
3685   1B00 AE            div a, b ; 
3686   1B01 11            mov a, b
3687   1B02 27            mov b, a
3688   1B03 E4            pop a
3689   1B04             ; --- END FACTORS
3690   1B04 56            add b, a
3691   1B05 E4            pop a
3692   1B06             ; --- END TERMS
3693   1B06 E7            pop d
3694   1B07 FD 3E         mov [d], bl
3695   1B09             ; num = num / 10; 
3696   1B09 FA 07 00      lea d, [bp + 7] ; $num
3697   1B0C DA            push d
3698   1B0D FA 07 00      lea d, [bp + 7] ; $num
3699   1B10 2A            mov b, [d]
3700   1B11 38 00 00      mov c, 0
3701   1B14             ; --- START FACTORS
3702   1B14 D7            push a
3703   1B15 11            mov a, b
3704   1B16 FD 2E 0A 00   mov32 cb, $0000000a
3704   1B1A 00 00 
3705   1B1C AE            div a, b
3706   1B1D 27            mov b, a
3707   1B1E E4            pop a
3708   1B1F             ; --- END FACTORS
3709   1B1F E7            pop d
3710   1B20 FD 43         mov [d], b
3711   1B22             ; i++; 
3712   1B22 FA FA FF      lea d, [bp + -6] ; $i
3713   1B25 2A            mov b, [d]
3714   1B26 38 00 00      mov c, 0
3715   1B29 11            mov a, b
3716   1B2A FD 77         inc b
3717   1B2C FA FA FF      lea d, [bp + -6] ; $i
3718   1B2F FD 43         mov [d], b
3719   1B31 27            mov b, a
3720   1B32 0A C0 1A      jmp _while46_cond
3721   1B35             _while46_exit:
3722   1B35             ; while (i > 0) { 
3723   1B35             _while47_cond:
3724   1B35 FA FA FF      lea d, [bp + -6] ; $i
3725   1B38 2A            mov b, [d]
3726   1B39 38 00 00      mov c, 0
3727   1B3C             ; --- START RELATIONAL
3728   1B3C D7            push a
3729   1B3D 11            mov a, b
3730   1B3E FD 2E 00 00   mov32 cb, $00000000
3730   1B42 00 00 
3731   1B44 B0            cmp a, b
3732   1B45 FD 7F         sgt ; >
3733   1B47 E4            pop a
3734   1B48             ; --- END RELATIONAL
3735   1B48 C0 00 00      cmp b, 0
3736   1B4B C6 9A 1B      je _while47_exit
3737   1B4E             _while47_block:
3738   1B4E             ; i--; 
3739   1B4E FA FA FF      lea d, [bp + -6] ; $i
3740   1B51 2A            mov b, [d]
3741   1B52 38 00 00      mov c, 0
3742   1B55 11            mov a, b
3743   1B56 FD 7D         dec b
3744   1B58 FA FA FF      lea d, [bp + -6] ; $i
3745   1B5B FD 43         mov [d], b
3746   1B5D 27            mov b, a
3747   1B5E             ; *dest++ = digits[i]; 
3748   1B5E FA 05 00      lea d, [bp + 5] ; $dest
3749   1B61 2A            mov b, [d]
3750   1B62 38 00 00      mov c, 0
3751   1B65 FD 77         inc b
3752   1B67 FA 05 00      lea d, [bp + 5] ; $dest
3753   1B6A FD 43         mov [d], b
3754   1B6C FD 7D         dec b
3755   1B6E D8            push b
3756   1B6F FA FC FF      lea d, [bp + -4] ; $digits
3757   1B72 D7            push a
3758   1B73 DA            push d
3759   1B74 FA FA FF      lea d, [bp + -6] ; $i
3760   1B77 2A            mov b, [d]
3761   1B78 38 00 00      mov c, 0
3762   1B7B E7            pop d
3763   1B7C 5A            add d, b
3764   1B7D E4            pop a
3765   1B7E 32            mov bl, [d]
3766   1B7F A7 00         mov bh, 0
3767   1B81 38 00 00      mov c, 0
3768   1B84 E7            pop d
3769   1B85 FD 3E         mov [d], bl
3770   1B87             ; len++; 
3771   1B87 FA F8 FF      lea d, [bp + -8] ; $len
3772   1B8A 2A            mov b, [d]
3773   1B8B 38 00 00      mov c, 0
3774   1B8E 11            mov a, b
3775   1B8F FD 77         inc b
3776   1B91 FA F8 FF      lea d, [bp + -8] ; $len
3777   1B94 FD 43         mov [d], b
3778   1B96 27            mov b, a
3779   1B97 0A 35 1B      jmp _while47_cond
3780   1B9A             _while47_exit:
3781   1B9A             ; *dest = '\0'; 
3782   1B9A FA 05 00      lea d, [bp + 5] ; $dest
3783   1B9D 2A            mov b, [d]
3784   1B9E 38 00 00      mov c, 0
3785   1BA1 D8            push b
3786   1BA2 FD 2E 00 00   mov32 cb, $00000000
3786   1BA6 00 00 
3787   1BA8 E7            pop d
3788   1BA9 FD 3E         mov [d], bl
3789   1BAB             ; return len; 
3790   1BAB FA F8 FF      lea d, [bp + -8] ; $len
3791   1BAE 2A            mov b, [d]
3792   1BAF 38 00 00      mov c, 0
3793   1BB2 F9            leave
3794   1BB3 09            ret
3795   1BB4             
3796   1BB4             print_unsigned:
3797   1BB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3798   1BB7             ; char digits[5]; 
3799   1BB7 52 05 00      sub sp, 5
3800   1BBA             ; int i; 
3801   1BBA 52 02 00      sub sp, 2
3802   1BBD             ; i = 0; 
3803   1BBD FA FA FF      lea d, [bp + -6] ; $i
3804   1BC0 DA            push d
3805   1BC1 FD 2E 00 00   mov32 cb, $00000000
3805   1BC5 00 00 
3806   1BC7 E7            pop d
3807   1BC8 FD 43         mov [d], b
3808   1BCA             ; if(num == 0){ 
3809   1BCA             _if48_cond:
3810   1BCA FA 05 00      lea d, [bp + 5] ; $num
3811   1BCD 2A            mov b, [d]
3812   1BCE 38 00 00      mov c, 0
3813   1BD1             ; --- START RELATIONAL
3814   1BD1 D7            push a
3815   1BD2 11            mov a, b
3816   1BD3 FD 2E 00 00   mov32 cb, $00000000
3816   1BD7 00 00 
3817   1BD9 B0            cmp a, b
3818   1BDA FD 71         seq ; ==
3819   1BDC E4            pop a
3820   1BDD             ; --- END RELATIONAL
3821   1BDD C0 00 00      cmp b, 0
3822   1BE0 C6 F5 1B      je _if48_exit
3823   1BE3             _if48_TRUE:
3824   1BE3             ; putchar('0'); 
3825   1BE3             ; --- START FUNCTION CALL
3826   1BE3 FD 2E 30 00   mov32 cb, $00000030
3826   1BE7 00 00 
3827   1BE9 DD            push bl
3828   1BEA 07 7C 1E      call putchar
3829   1BED 51 01 00      add sp, 1
3830   1BF0             ; --- END FUNCTION CALL
3831   1BF0             ; return; 
3832   1BF0 F9            leave
3833   1BF1 09            ret
3834   1BF2 0A F5 1B      jmp _if48_exit
3835   1BF5             _if48_exit:
3836   1BF5             ; while (num > 0) { 
3837   1BF5             _while49_cond:
3838   1BF5 FA 05 00      lea d, [bp + 5] ; $num
3839   1BF8 2A            mov b, [d]
3840   1BF9 38 00 00      mov c, 0
3841   1BFC             ; --- START RELATIONAL
3842   1BFC D7            push a
3843   1BFD 11            mov a, b
3844   1BFE FD 2E 00 00   mov32 cb, $00000000
3844   1C02 00 00 
3845   1C04 B0            cmp a, b
3846   1C05 FD 81         sgu ; > (unsigned)
3847   1C07 E4            pop a
3848   1C08             ; --- END RELATIONAL
3849   1C08 C0 00 00      cmp b, 0
3850   1C0B C6 6A 1C      je _while49_exit
3851   1C0E             _while49_block:
3852   1C0E             ; digits[i] = '0' + (num % 10); 
3853   1C0E FA FC FF      lea d, [bp + -4] ; $digits
3854   1C11 D7            push a
3855   1C12 DA            push d
3856   1C13 FA FA FF      lea d, [bp + -6] ; $i
3857   1C16 2A            mov b, [d]
3858   1C17 38 00 00      mov c, 0
3859   1C1A E7            pop d
3860   1C1B 5A            add d, b
3861   1C1C E4            pop a
3862   1C1D DA            push d
3863   1C1E FD 2E 30 00   mov32 cb, $00000030
3863   1C22 00 00 
3864   1C24             ; --- START TERMS
3865   1C24 D7            push a
3866   1C25 11            mov a, b
3867   1C26 FA 05 00      lea d, [bp + 5] ; $num
3868   1C29 2A            mov b, [d]
3869   1C2A 38 00 00      mov c, 0
3870   1C2D             ; --- START FACTORS
3871   1C2D D7            push a
3872   1C2E 11            mov a, b
3873   1C2F FD 2E 0A 00   mov32 cb, $0000000a
3873   1C33 00 00 
3874   1C35 AE            div a, b ; 
3875   1C36 11            mov a, b
3876   1C37 27            mov b, a
3877   1C38 E4            pop a
3878   1C39             ; --- END FACTORS
3879   1C39 56            add b, a
3880   1C3A E4            pop a
3881   1C3B             ; --- END TERMS
3882   1C3B E7            pop d
3883   1C3C FD 3E         mov [d], bl
3884   1C3E             ; num = num / 10; 
3885   1C3E FA 05 00      lea d, [bp + 5] ; $num
3886   1C41 DA            push d
3887   1C42 FA 05 00      lea d, [bp + 5] ; $num
3888   1C45 2A            mov b, [d]
3889   1C46 38 00 00      mov c, 0
3890   1C49             ; --- START FACTORS
3891   1C49 D7            push a
3892   1C4A 11            mov a, b
3893   1C4B FD 2E 0A 00   mov32 cb, $0000000a
3893   1C4F 00 00 
3894   1C51 AE            div a, b
3895   1C52 27            mov b, a
3896   1C53 E4            pop a
3897   1C54             ; --- END FACTORS
3898   1C54 E7            pop d
3899   1C55 FD 43         mov [d], b
3900   1C57             ; i++; 
3901   1C57 FA FA FF      lea d, [bp + -6] ; $i
3902   1C5A 2A            mov b, [d]
3903   1C5B 38 00 00      mov c, 0
3904   1C5E 11            mov a, b
3905   1C5F FD 77         inc b
3906   1C61 FA FA FF      lea d, [bp + -6] ; $i
3907   1C64 FD 43         mov [d], b
3908   1C66 27            mov b, a
3909   1C67 0A F5 1B      jmp _while49_cond
3910   1C6A             _while49_exit:
3911   1C6A             ; while (i > 0) { 
3912   1C6A             _while50_cond:
3913   1C6A FA FA FF      lea d, [bp + -6] ; $i
3914   1C6D 2A            mov b, [d]
3915   1C6E 38 00 00      mov c, 0
3916   1C71             ; --- START RELATIONAL
3917   1C71 D7            push a
3918   1C72 11            mov a, b
3919   1C73 FD 2E 00 00   mov32 cb, $00000000
3919   1C77 00 00 
3920   1C79 B0            cmp a, b
3921   1C7A FD 7F         sgt ; >
3922   1C7C E4            pop a
3923   1C7D             ; --- END RELATIONAL
3924   1C7D C0 00 00      cmp b, 0
3925   1C80 C6 B2 1C      je _while50_exit
3926   1C83             _while50_block:
3927   1C83             ; i--; 
3928   1C83 FA FA FF      lea d, [bp + -6] ; $i
3929   1C86 2A            mov b, [d]
3930   1C87 38 00 00      mov c, 0
3931   1C8A 11            mov a, b
3932   1C8B FD 7D         dec b
3933   1C8D FA FA FF      lea d, [bp + -6] ; $i
3934   1C90 FD 43         mov [d], b
3935   1C92 27            mov b, a
3936   1C93             ; putchar(digits[i]); 
3937   1C93             ; --- START FUNCTION CALL
3938   1C93 FA FC FF      lea d, [bp + -4] ; $digits
3939   1C96 D7            push a
3940   1C97 DA            push d
3941   1C98 FA FA FF      lea d, [bp + -6] ; $i
3942   1C9B 2A            mov b, [d]
3943   1C9C 38 00 00      mov c, 0
3944   1C9F E7            pop d
3945   1CA0 5A            add d, b
3946   1CA1 E4            pop a
3947   1CA2 32            mov bl, [d]
3948   1CA3 A7 00         mov bh, 0
3949   1CA5 38 00 00      mov c, 0
3950   1CA8 DD            push bl
3951   1CA9 07 7C 1E      call putchar
3952   1CAC 51 01 00      add sp, 1
3953   1CAF             ; --- END FUNCTION CALL
3954   1CAF 0A 6A 1C      jmp _while50_cond
3955   1CB2             _while50_exit:
3956   1CB2 F9            leave
3957   1CB3 09            ret
3958   1CB4             
3959   1CB4             sprint_signed:
3960   1CB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3961   1CB7             ; char digits[5]; 
3962   1CB7 52 05 00      sub sp, 5
3963   1CBA             ; int i = 0; 
3964   1CBA 52 02 00      sub sp, 2
3965   1CBD             ; --- START LOCAL VAR INITIALIZATION
3966   1CBD FA FA FF      lea d, [bp + -6] ; $i
3967   1CC0 DA            push d
3968   1CC1 FD 2E 00 00   mov32 cb, $00000000
3968   1CC5 00 00 
3969   1CC7 E7            pop d
3970   1CC8 FD 43         mov [d], b
3971   1CCA             ; --- END LOCAL VAR INITIALIZATION
3972   1CCA             ; int len = 0; 
3973   1CCA 52 02 00      sub sp, 2
3974   1CCD             ; --- START LOCAL VAR INITIALIZATION
3975   1CCD FA F8 FF      lea d, [bp + -8] ; $len
3976   1CD0 DA            push d
3977   1CD1 FD 2E 00 00   mov32 cb, $00000000
3977   1CD5 00 00 
3978   1CD7 E7            pop d
3979   1CD8 FD 43         mov [d], b
3980   1CDA             ; --- END LOCAL VAR INITIALIZATION
3981   1CDA             ; if (num < 0) { 
3982   1CDA             _if51_cond:
3983   1CDA FA 07 00      lea d, [bp + 7] ; $num
3984   1CDD 2A            mov b, [d]
3985   1CDE 38 00 00      mov c, 0
3986   1CE1             ; --- START RELATIONAL
3987   1CE1 D7            push a
3988   1CE2 11            mov a, b
3989   1CE3 FD 2E 00 00   mov32 cb, $00000000
3989   1CE7 00 00 
3990   1CE9 B0            cmp a, b
3991   1CEA FD 73         slt ; < (signed)
3992   1CEC E4            pop a
3993   1CED             ; --- END RELATIONAL
3994   1CED C0 00 00      cmp b, 0
3995   1CF0 C6 30 1D      je _if51_else
3996   1CF3             _if51_TRUE:
3997   1CF3             ; *dest++ = '-'; 
3998   1CF3 FA 05 00      lea d, [bp + 5] ; $dest
3999   1CF6 2A            mov b, [d]
4000   1CF7 38 00 00      mov c, 0
4001   1CFA FD 77         inc b
4002   1CFC FA 05 00      lea d, [bp + 5] ; $dest
4003   1CFF FD 43         mov [d], b
4004   1D01 FD 7D         dec b
4005   1D03 D8            push b
4006   1D04 FD 2E 2D 00   mov32 cb, $0000002d
4006   1D08 00 00 
4007   1D0A E7            pop d
4008   1D0B FD 3E         mov [d], bl
4009   1D0D             ; num = -num; 
4010   1D0D FA 07 00      lea d, [bp + 7] ; $num
4011   1D10 DA            push d
4012   1D11 FA 07 00      lea d, [bp + 7] ; $num
4013   1D14 2A            mov b, [d]
4014   1D15 38 00 00      mov c, 0
4015   1D18 FD 97         neg b
4016   1D1A E7            pop d
4017   1D1B FD 43         mov [d], b
4018   1D1D             ; len++; 
4019   1D1D FA F8 FF      lea d, [bp + -8] ; $len
4020   1D20 2A            mov b, [d]
4021   1D21 38 00 00      mov c, 0
4022   1D24 11            mov a, b
4023   1D25 FD 77         inc b
4024   1D27 FA F8 FF      lea d, [bp + -8] ; $len
4025   1D2A FD 43         mov [d], b
4026   1D2C 27            mov b, a
4027   1D2D 0A 7F 1D      jmp _if51_exit
4028   1D30             _if51_else:
4029   1D30             ; if (num == 0) { 
4030   1D30             _if52_cond:
4031   1D30 FA 07 00      lea d, [bp + 7] ; $num
4032   1D33 2A            mov b, [d]
4033   1D34 38 00 00      mov c, 0
4034   1D37             ; --- START RELATIONAL
4035   1D37 D7            push a
4036   1D38 11            mov a, b
4037   1D39 FD 2E 00 00   mov32 cb, $00000000
4037   1D3D 00 00 
4038   1D3F B0            cmp a, b
4039   1D40 FD 71         seq ; ==
4040   1D42 E4            pop a
4041   1D43             ; --- END RELATIONAL
4042   1D43 C0 00 00      cmp b, 0
4043   1D46 C6 7F 1D      je _if52_exit
4044   1D49             _if52_TRUE:
4045   1D49             ; *dest++ = '0'; 
4046   1D49 FA 05 00      lea d, [bp + 5] ; $dest
4047   1D4C 2A            mov b, [d]
4048   1D4D 38 00 00      mov c, 0
4049   1D50 FD 77         inc b
4050   1D52 FA 05 00      lea d, [bp + 5] ; $dest
4051   1D55 FD 43         mov [d], b
4052   1D57 FD 7D         dec b
4053   1D59 D8            push b
4054   1D5A FD 2E 30 00   mov32 cb, $00000030
4054   1D5E 00 00 
4055   1D60 E7            pop d
4056   1D61 FD 3E         mov [d], bl
4057   1D63             ; *dest = '\0'; 
4058   1D63 FA 05 00      lea d, [bp + 5] ; $dest
4059   1D66 2A            mov b, [d]
4060   1D67 38 00 00      mov c, 0
4061   1D6A D8            push b
4062   1D6B FD 2E 00 00   mov32 cb, $00000000
4062   1D6F 00 00 
4063   1D71 E7            pop d
4064   1D72 FD 3E         mov [d], bl
4065   1D74             ; return 1; 
4066   1D74 FD 2E 01 00   mov32 cb, $00000001
4066   1D78 00 00 
4067   1D7A F9            leave
4068   1D7B 09            ret
4069   1D7C 0A 7F 1D      jmp _if52_exit
4070   1D7F             _if52_exit:
4071   1D7F             _if51_exit:
4072   1D7F             ; while (num > 0) { 
4073   1D7F             _while53_cond:
4074   1D7F FA 07 00      lea d, [bp + 7] ; $num
4075   1D82 2A            mov b, [d]
4076   1D83 38 00 00      mov c, 0
4077   1D86             ; --- START RELATIONAL
4078   1D86 D7            push a
4079   1D87 11            mov a, b
4080   1D88 FD 2E 00 00   mov32 cb, $00000000
4080   1D8C 00 00 
4081   1D8E B0            cmp a, b
4082   1D8F FD 7F         sgt ; >
4083   1D91 E4            pop a
4084   1D92             ; --- END RELATIONAL
4085   1D92 C0 00 00      cmp b, 0
4086   1D95 C6 F4 1D      je _while53_exit
4087   1D98             _while53_block:
4088   1D98             ; digits[i] = '0' + (num % 10); 
4089   1D98 FA FC FF      lea d, [bp + -4] ; $digits
4090   1D9B D7            push a
4091   1D9C DA            push d
4092   1D9D FA FA FF      lea d, [bp + -6] ; $i
4093   1DA0 2A            mov b, [d]
4094   1DA1 38 00 00      mov c, 0
4095   1DA4 E7            pop d
4096   1DA5 5A            add d, b
4097   1DA6 E4            pop a
4098   1DA7 DA            push d
4099   1DA8 FD 2E 30 00   mov32 cb, $00000030
4099   1DAC 00 00 
4100   1DAE             ; --- START TERMS
4101   1DAE D7            push a
4102   1DAF 11            mov a, b
4103   1DB0 FA 07 00      lea d, [bp + 7] ; $num
4104   1DB3 2A            mov b, [d]
4105   1DB4 38 00 00      mov c, 0
4106   1DB7             ; --- START FACTORS
4107   1DB7 D7            push a
4108   1DB8 11            mov a, b
4109   1DB9 FD 2E 0A 00   mov32 cb, $0000000a
4109   1DBD 00 00 
4110   1DBF AE            div a, b ; 
4111   1DC0 11            mov a, b
4112   1DC1 27            mov b, a
4113   1DC2 E4            pop a
4114   1DC3             ; --- END FACTORS
4115   1DC3 56            add b, a
4116   1DC4 E4            pop a
4117   1DC5             ; --- END TERMS
4118   1DC5 E7            pop d
4119   1DC6 FD 3E         mov [d], bl
4120   1DC8             ; num = num / 10; 
4121   1DC8 FA 07 00      lea d, [bp + 7] ; $num
4122   1DCB DA            push d
4123   1DCC FA 07 00      lea d, [bp + 7] ; $num
4124   1DCF 2A            mov b, [d]
4125   1DD0 38 00 00      mov c, 0
4126   1DD3             ; --- START FACTORS
4127   1DD3 D7            push a
4128   1DD4 11            mov a, b
4129   1DD5 FD 2E 0A 00   mov32 cb, $0000000a
4129   1DD9 00 00 
4130   1DDB AE            div a, b
4131   1DDC 27            mov b, a
4132   1DDD E4            pop a
4133   1DDE             ; --- END FACTORS
4134   1DDE E7            pop d
4135   1DDF FD 43         mov [d], b
4136   1DE1             ; i++; 
4137   1DE1 FA FA FF      lea d, [bp + -6] ; $i
4138   1DE4 2A            mov b, [d]
4139   1DE5 38 00 00      mov c, 0
4140   1DE8 11            mov a, b
4141   1DE9 FD 77         inc b
4142   1DEB FA FA FF      lea d, [bp + -6] ; $i
4143   1DEE FD 43         mov [d], b
4144   1DF0 27            mov b, a
4145   1DF1 0A 7F 1D      jmp _while53_cond
4146   1DF4             _while53_exit:
4147   1DF4             ; while (i > 0) { 
4148   1DF4             _while54_cond:
4149   1DF4 FA FA FF      lea d, [bp + -6] ; $i
4150   1DF7 2A            mov b, [d]
4151   1DF8 38 00 00      mov c, 0
4152   1DFB             ; --- START RELATIONAL
4153   1DFB D7            push a
4154   1DFC 11            mov a, b
4155   1DFD FD 2E 00 00   mov32 cb, $00000000
4155   1E01 00 00 
4156   1E03 B0            cmp a, b
4157   1E04 FD 7F         sgt ; >
4158   1E06 E4            pop a
4159   1E07             ; --- END RELATIONAL
4160   1E07 C0 00 00      cmp b, 0
4161   1E0A C6 59 1E      je _while54_exit
4162   1E0D             _while54_block:
4163   1E0D             ; i--; 
4164   1E0D FA FA FF      lea d, [bp + -6] ; $i
4165   1E10 2A            mov b, [d]
4166   1E11 38 00 00      mov c, 0
4167   1E14 11            mov a, b
4168   1E15 FD 7D         dec b
4169   1E17 FA FA FF      lea d, [bp + -6] ; $i
4170   1E1A FD 43         mov [d], b
4171   1E1C 27            mov b, a
4172   1E1D             ; *dest++ = digits[i]; 
4173   1E1D FA 05 00      lea d, [bp + 5] ; $dest
4174   1E20 2A            mov b, [d]
4175   1E21 38 00 00      mov c, 0
4176   1E24 FD 77         inc b
4177   1E26 FA 05 00      lea d, [bp + 5] ; $dest
4178   1E29 FD 43         mov [d], b
4179   1E2B FD 7D         dec b
4180   1E2D D8            push b
4181   1E2E FA FC FF      lea d, [bp + -4] ; $digits
4182   1E31 D7            push a
4183   1E32 DA            push d
4184   1E33 FA FA FF      lea d, [bp + -6] ; $i
4185   1E36 2A            mov b, [d]
4186   1E37 38 00 00      mov c, 0
4187   1E3A E7            pop d
4188   1E3B 5A            add d, b
4189   1E3C E4            pop a
4190   1E3D 32            mov bl, [d]
4191   1E3E A7 00         mov bh, 0
4192   1E40 38 00 00      mov c, 0
4193   1E43 E7            pop d
4194   1E44 FD 3E         mov [d], bl
4195   1E46             ; len++; 
4196   1E46 FA F8 FF      lea d, [bp + -8] ; $len
4197   1E49 2A            mov b, [d]
4198   1E4A 38 00 00      mov c, 0
4199   1E4D 11            mov a, b
4200   1E4E FD 77         inc b
4201   1E50 FA F8 FF      lea d, [bp + -8] ; $len
4202   1E53 FD 43         mov [d], b
4203   1E55 27            mov b, a
4204   1E56 0A F4 1D      jmp _while54_cond
4205   1E59             _while54_exit:
4206   1E59             ; *dest = '\0'; 
4207   1E59 FA 05 00      lea d, [bp + 5] ; $dest
4208   1E5C 2A            mov b, [d]
4209   1E5D 38 00 00      mov c, 0
4210   1E60 D8            push b
4211   1E61 FD 2E 00 00   mov32 cb, $00000000
4211   1E65 00 00 
4212   1E67 E7            pop d
4213   1E68 FD 3E         mov [d], bl
4214   1E6A             ; return len; 
4215   1E6A FA F8 FF      lea d, [bp + -8] ; $len
4216   1E6D 2A            mov b, [d]
4217   1E6E 38 00 00      mov c, 0
4218   1E71 F9            leave
4219   1E72 09            ret
4220   1E73             
4221   1E73             date:
4222   1E73 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4223   1E76             ; --- BEGIN INLINE ASM SEGMENT
4224   1E76 19 00         mov al, 0 
4225   1E78 05 07         syscall sys_datetime
4226   1E7A             ; --- END INLINE ASM SEGMENT
4227   1E7A F9            leave
4228   1E7B 09            ret
4229   1E7C             
4230   1E7C             putchar:
4231   1E7C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4232   1E7F             ; --- BEGIN INLINE ASM SEGMENT
4233   1E7F FA 05 00      lea d, [bp + 5] ; $c
4234   1E82 1E            mov al, [d]
4235   1E83 23            mov ah, al
4236   1E84 19 00         mov al, 0
4237   1E86 05 03         syscall sys_io      
4238   1E88             ; --- END INLINE ASM SEGMENT
4239   1E88 F9            leave
4240   1E89 09            ret
4241   1E8A             
4242   1E8A             getchar:
4243   1E8A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4244   1E8D             ; char c; 
4245   1E8D 52 01 00      sub sp, 1
4246   1E90             ; --- BEGIN INLINE ASM SEGMENT
4247   1E90 19 01         mov al, 1
4248   1E92 05 03         syscall sys_io      
4249   1E94 1A            mov al, ah
4250   1E95 FA 00 00      lea d, [bp + 0] ; $c
4251   1E98 3E            mov [d], al
4252   1E99             ; --- END INLINE ASM SEGMENT
4253   1E99             ; return c; 
4254   1E99 FA 00 00      lea d, [bp + 0] ; $c
4255   1E9C 32            mov bl, [d]
4256   1E9D A7 00         mov bh, 0
4257   1E9F 38 00 00      mov c, 0
4258   1EA2 F9            leave
4259   1EA3 09            ret
4260   1EA4             
4261   1EA4             scann:
4262   1EA4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4263   1EA7             ; int m; 
4264   1EA7 52 02 00      sub sp, 2
4265   1EAA             ; --- BEGIN INLINE ASM SEGMENT
4266   1EAA F8 08 00      enter 8
4267   1EAD E2            push si
4268   1EAE D8            push b
4269   1EAF D9            push c
4270   1EB0 DA            push d
4271   1EB1 FA F9 FF      lea d, [bp +- 7]
4272   1EB4 07 0A 1F      call _gets_scann
4273   1EB7 07 F0 1E      call _strlen_scann      
4274   1EBA 7E            dec c
4275   1EBB FD 4E         mov si, d
4276   1EBD 12            mov a, c
4277   1EBE FD 99         shl a
out/test.asm line 4278: Label not found: (table_power_scann)
out/test.asm line 4278: Unused data in MS byte of argument. (2)
4278   1EC0 3B 00 00      mov d, table_power_scann
4279   1EC3 59            add d, a
4280   1EC4 38 00 00      mov c, 0
4281   1EC7             mul_loop_scann:
4282   1EC7 F6            lodsb      
4283   1EC8 B9 00         cmp al, 0
4284   1ECA C6 DD 1E      je mul_exit_scann
4285   1ECD 6F 30         sub al, $30    
4286   1ECF 22 00         mov ah, 0
4287   1ED1 2A            mov b, [d]
4288   1ED2 AC            mul a, b      
4289   1ED3 11            mov a, b
4290   1ED4 28            mov b, c
4291   1ED5 54            add a, b
4292   1ED6 39            mov c, a
4293   1ED7 63 02 00      sub d, 2
4294   1EDA 0A C7 1E      jmp mul_loop_scann
4295   1EDD             mul_exit_scann:
4296   1EDD 12            mov a, c
4297   1EDE E7            pop d
4298   1EDF E6            pop c
4299   1EE0 E5            pop b
4300   1EE1 EF            pop si
4301   1EE2 F9            leave
4302   1EE3 FA FF FF      lea d, [bp + -1] ; $m
4303   1EE6 43            mov [d], a
4304   1EE7             ; --- END INLINE ASM SEGMENT
4305   1EE7             ; return m; 
4306   1EE7 FA FF FF      lea d, [bp + -1] ; $m
4307   1EEA 2A            mov b, [d]
4308   1EEB 38 00 00      mov c, 0
4309   1EEE F9            leave
4310   1EEF 09            ret
4311   1EF0             ; --- BEGIN INLINE ASM SEGMENT
4312   1EF0             _strlen_scann:
4313   1EF0 DA            push d
4314   1EF1 38 00 00      mov c, 0
4315   1EF4             _strlen_L1_scann:
4316   1EF4 BD 00         cmp byte [d], 0
4317   1EF6 C6 FE 1E      je _strlen_ret_scann
4318   1EF9 79            inc d
4319   1EFA 78            inc c
4320   1EFB 0A F4 1E      jmp _strlen_L1_scann
4321   1EFE             _strlen_ret_scann:
4322   1EFE E7            pop d
4323   1EFF 09            ret
4324   1F00             table_power:
4325   1F00 01 00       .dw 1
4326   1F02 0A 00       .dw 10
4327   1F04 64 00       .dw 100
4328   1F06 E8 03       .dw 1000
4329   1F08 10 27       .dw 10000
4330   1F0A             _gets_scann:
4331   1F0A D7            push a
4332   1F0B DA            push d
4333   1F0C             _gets_loop_scann:
4334   1F0C 19 01         mov al, 1
4335   1F0E 05 03         syscall sys_io      
4336   1F10 B9 00         cmp al, 0        
4337   1F12 C6 0C 1F      je _gets_loop_scann      
4338   1F15 76 1B         cmp ah, 27
4339   1F17 C6 38 1F      je _gets_ansi_esc_scann
4340   1F1A 76 0A         cmp ah, $0A        
4341   1F1C C6 A3 1F      je _gets_end_scann
4342   1F1F 76 0D         cmp ah, $0D        
4343   1F21 C6 A3 1F      je _gets_end_scann
4344   1F24 76 5C         cmp ah, $5C        
4345   1F26 C6 64 1F      je _gets_escape_scann
4346   1F29 76 08         cmp ah, $08      
4347   1F2B C6 34 1F      je _gets_backspace_scann
4348   1F2E 1A            mov al, ah
4349   1F2F 3E            mov [d], al
4350   1F30 79            inc d
4351   1F31 0A 0C 1F      jmp _gets_loop_scann
4352   1F34             _gets_backspace_scann:
4353   1F34 7F            dec d
4354   1F35 0A 0C 1F      jmp _gets_loop_scann
4355   1F38             _gets_ansi_esc_scann:
4356   1F38 19 01         mov al, 1
4357   1F3A 05 03         syscall sys_io        
4358   1F3C B9 00         cmp al, 0          
4359   1F3E C6 38 1F      je _gets_ansi_esc_scann    
4360   1F41 76 5B         cmp ah, '['
4361   1F43 C7 0C 1F      jne _gets_loop_scann
4362   1F46             _gets_ansi_esc_2_scann:
4363   1F46 19 01         mov al, 1
4364   1F48 05 03         syscall sys_io          
4365   1F4A B9 00         cmp al, 0            
4366   1F4C C6 46 1F      je _gets_ansi_esc_2_scann  
4367   1F4F 76 44         cmp ah, 'D'
4368   1F51 C6 5C 1F      je _gets_left_arrow_scann
4369   1F54 76 43         cmp ah, 'C'
4370   1F56 C6 60 1F      je _gets_right_arrow_scann
4371   1F59 0A 0C 1F      jmp _gets_loop_scann
4372   1F5C             _gets_left_arrow_scann:
4373   1F5C 7F            dec d
4374   1F5D 0A 0C 1F      jmp _gets_loop_scann
4375   1F60             _gets_right_arrow_scann:
4376   1F60 79            inc d
4377   1F61 0A 0C 1F      jmp _gets_loop_scann
4378   1F64             _gets_escape_scann:
4379   1F64 19 01         mov al, 1
4380   1F66 05 03         syscall sys_io      
4381   1F68 B9 00         cmp al, 0        
4382   1F6A C6 64 1F      je _gets_escape_scann      
4383   1F6D 76 6E         cmp ah, 'n'
4384   1F6F C6 8E 1F      je _gets_LF_scann
4385   1F72 76 72         cmp ah, 'r'
4386   1F74 C6 95 1F      je _gets_CR_scann
4387   1F77 76 30         cmp ah, '0'
4388   1F79 C6 9C 1F      je _gets_NULL_scann
4389   1F7C 76 5C         cmp ah, $5C  
4390   1F7E C6 87 1F      je _gets_slash_scann
4391   1F81 1A            mov al, ah        
4392   1F82 3E            mov [d], al
4393   1F83 79            inc d
4394   1F84 0A 0C 1F      jmp _gets_loop_scann
4395   1F87             _gets_slash_scann:
4396   1F87 19 5C         mov al, $5C
4397   1F89 3E            mov [d], al
4398   1F8A 79            inc d
4399   1F8B 0A 0C 1F      jmp _gets_loop_scann
4400   1F8E             _gets_LF_scann:
4401   1F8E 19 0A         mov al, $0A
4402   1F90 3E            mov [d], al
4403   1F91 79            inc d
4404   1F92 0A 0C 1F      jmp _gets_loop_scann
4405   1F95             _gets_CR_scann:
4406   1F95 19 0D         mov al, $0D
4407   1F97 3E            mov [d], al
4408   1F98 79            inc d
4409   1F99 0A 0C 1F      jmp _gets_loop_scann
4410   1F9C             _gets_NULL_scann:
4411   1F9C 19 00         mov al, $00
4412   1F9E 3E            mov [d], al
4413   1F9F 79            inc d
4414   1FA0 0A 0C 1F      jmp _gets_loop_scann
4415   1FA3             _gets_end_scann:
4416   1FA3 19 00         mov al, 0
4417   1FA5 3E            mov [d], al        
4418   1FA6 E7            pop d
4419   1FA7 E4            pop a
4420   1FA8 09            ret
4421   1FA9             ; --- END INLINE ASM SEGMENT
4422   1FA9 F9            leave
4423   1FAA 09            ret
4424   1FAB             
4425   1FAB             puts:
4426   1FAB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4427   1FAE             ; --- BEGIN INLINE ASM SEGMENT
4428   1FAE FA 05 00      lea d, [bp + 5] ; $s
4429   1FB1 15            mov a, [d]
4430   1FB2 3C            mov d, a
out/test.asm line 4431: Label not found: (_puts)
out/test.asm line 4431: Unused data in MS byte of argument. (2)
4431   1FB3 07 00 00      call _puts
4432   1FB6 10 00 0A      mov a, $0A00
4433   1FB9 05 03         syscall sys_io
4434   1FBB             ; --- END INLINE ASM SEGMENT
4435   1FBB F9            leave
4436   1FBC 09            ret
4437   1FBD             
4438   1FBD             print:
4439   1FBD F8 00 00      enter 0 ; (push bp; mov bp, sp)
4440   1FC0             ; --- BEGIN INLINE ASM SEGMENT
4441   1FC0 FA 05 00      lea d, [bp + 5] ; $s
4442   1FC3 FD 2A         mov d, [d]
4443   1FC5             _puts_L1_print:
4444   1FC5 1E            mov al, [d]
4445   1FC6 B9 00         cmp al, 0
4446   1FC8 C6 D4 1F      jz _puts_END_print
4447   1FCB 23            mov ah, al
4448   1FCC 19 00         mov al, 0
4449   1FCE 05 03         syscall sys_io
4450   1FD0 79            inc d
4451   1FD1 0A C5 1F      jmp _puts_L1_print
4452   1FD4             _puts_END_print:
4453   1FD4             ; --- END INLINE ASM SEGMENT
4454   1FD4 F9            leave
4455   1FD5 09            ret
4456   1FD6             
4457   1FD6             clear:
4458   1FD6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4459   1FD9             ; print("\033[2J\033[H"); 
4460   1FD9             ; --- START FUNCTION CALL
4461   1FD9 26 6A 20      mov b, _s5 ; "\033[2J\033[H"
4462   1FDC FD AB         swp b
4463   1FDE D8            push b
4464   1FDF 07 BD 1F      call print
4465   1FE2 51 02 00      add sp, 2
4466   1FE5             ; --- END FUNCTION CALL
4467   1FE5 F9            leave
4468   1FE6 09            ret
4469   1FE7             
4470   1FE7             abs:
4471   1FE7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4472   1FEA             ; return i < 0 ? -i : i; 
4473   1FEA             _ternary55_cond:
4474   1FEA FA 05 00      lea d, [bp + 5] ; $i
4475   1FED 2A            mov b, [d]
4476   1FEE 38 00 00      mov c, 0
4477   1FF1             ; --- START RELATIONAL
4478   1FF1 D7            push a
4479   1FF2 11            mov a, b
4480   1FF3 FD 2E 00 00   mov32 cb, $00000000
4480   1FF7 00 00 
4481   1FF9 B0            cmp a, b
4482   1FFA FD 73         slt ; < (signed)
4483   1FFC E4            pop a
4484   1FFD             ; --- END RELATIONAL
4485   1FFD C0 00 00      cmp b, 0
4486   2000 C6 0F 20      je _ternary55_FALSE
4487   2003             _ternary55_TRUE:
4488   2003 FA 05 00      lea d, [bp + 5] ; $i
4489   2006 2A            mov b, [d]
4490   2007 38 00 00      mov c, 0
4491   200A FD 97         neg b
4492   200C 0A 16 20      jmp _ternary55_exit
4493   200F             _ternary55_FALSE:
4494   200F FA 05 00      lea d, [bp + 5] ; $i
4495   2012 2A            mov b, [d]
4496   2013 38 00 00      mov c, 0
4497   2016             _ternary55_exit:
4498   2016 F9            leave
4499   2017 09            ret
4500   2018             
4501   2018             myfunc:
4502   2018 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4503   201B F9            leave
4504   201C 09            ret
4505   201D             ; --- END TEXT SEGMENT
4506   201D             
4507   201D             ; --- BEGIN DATA SEGMENT
4508   201D 00 00       st_fopen_max_handle: .dw 0
4509   201F 48 65 6C 6C _s0: .db "Hello", 0
4509   2023 6F 00 
4510   2025 57 6F 72 6C _s1: .db "World", 0
4510   2029 64 00 
4511   202B 48 69 00    _s2: .db "Hi", 0
4512   202E 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
4512   2032 70 65 63 74 
4512   2036 65 64 20 66 
4512   203A 6F 72 6D 61 
4512   203E 74 20 69 6E 
4512   2042 20 70 72 69 
4512   2046 6E 74 66 2E 
4512   204A 00 
4513   204B 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
4513   204F 72 3A 20 55 
4513   2053 6E 6B 6E 6F 
4513   2057 77 6E 20 61 
4513   205B 72 67 75 6D 
4513   205F 65 6E 74 20 
4513   2063 74 79 70 65 
4513   2067 2E 0A 00 
4514   206A 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
4514   206E 1B 5B 48 00 
4515   2072             
4516   2072 74 20       _heap_top: .dw _heap
4517   2074 00          _heap: .db 0
4518   2075             ; --- END DATA SEGMENT
4519   2075             
4520   2075             .end
tasm: Number of errors = 4
