0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $s 
0011   0408             ; $i 
0012   0408 52 02 02      sub sp, 514
0013   040B             ;; scanf("Enter number: %d Enter String: %s", &i, s); 
0014   040B FA 01 FE      lea d, [bp + -511] ; $s
0015   040E 2D            mov b, d
0016   040F FD AB         swp b
0017   0411 D8            push b
0018   0412 FA FF FD      lea d, [bp + -513] ; $i
0019   0415 2D            mov b, d
0020   0416 FD AB         swp b
0021   0418 D8            push b
0022   0419 26 E1 1F      mov b, __s0 ; "Enter number: %d Enter String: %s"
0023   041C FD AB         swp b
0024   041E D8            push b
0025   041F 07 EF 10      call scanf
0026   0422 51 06 00      add sp, 6
0027   0425             ;; printf("Ok"); 
0028   0425 26 03 20      mov b, __s1 ; "Ok"
0029   0428 FD AB         swp b
0030   042A D8            push b
0031   042B 07 2A 13      call printf
0032   042E 51 02 00      add sp, 2
0033   0431             ;; printf("The number is: %d\nThe string is: %s", i, s); 
0034   0431 FA 01 FE      lea d, [bp + -511] ; $s
0035   0434 2D            mov b, d
0036   0435 FD AB         swp b
0037   0437 D8            push b
0038   0438 FA FF FD      lea d, [bp + -513] ; $i
0039   043B 2A            mov b, [d]
0040   043C FD AB         swp b
0041   043E D8            push b
0042   043F 26 06 20      mov b, __s2 ; "The number is: %d\nThe string is: %s"
0043   0442 FD AB         swp b
0044   0444 D8            push b
0045   0445 07 2A 13      call printf
0046   0448 51 06 00      add sp, 6
0047   044B 05 0B         syscall sys_terminate_proc
0048   044D             
0049   044D             strcpy:
0050   044D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0051   0450             ; $psrc 
0052   0450             ; $pdest 
0053   0450 52 04 00      sub sp, 4
0054   0453             ;; psrc = src; 
0055   0453 FA FF FF      lea d, [bp + -1] ; $psrc
0056   0456 DA            push d
0057   0457 FA 07 00      lea d, [bp + 7] ; $src
0058   045A 2A            mov b, [d]
0059   045B E7            pop d
0060   045C FD 43         mov [d], b
0061   045E             ;; pdest = dest; 
0062   045E FA FD FF      lea d, [bp + -3] ; $pdest
0063   0461 DA            push d
0064   0462 FA 05 00      lea d, [bp + 5] ; $dest
0065   0465 2A            mov b, [d]
0066   0466 E7            pop d
0067   0467 FD 43         mov [d], b
0068   0469             ;; while(*psrc) *pdest++ = *psrc++; 
0069   0469             _while1_cond:
0070   0469 FA FF FF      lea d, [bp + -1] ; $psrc
0071   046C 2A            mov b, [d]
0072   046D 74            mov d, b
0073   046E 32            mov bl, [d]
0074   046F A7 00         mov bh, 0
0075   0471 C0 00 00      cmp b, 0
0076   0474 C6 9C 04      je _while1_exit
0077   0477             _while1_block:
0078   0477             ;; *pdest++ = *psrc++; 
0079   0477 FA FD FF      lea d, [bp + -3] ; $pdest
0080   047A 2A            mov b, [d]
0081   047B D8            push b
0082   047C FD 77         inc b
0083   047E FA FD FF      lea d, [bp + -3] ; $pdest
0084   0481 FD 43         mov [d], b
0085   0483 E5            pop b
0086   0484 D8            push b
0087   0485 FA FF FF      lea d, [bp + -1] ; $psrc
0088   0488 2A            mov b, [d]
0089   0489 D8            push b
0090   048A FD 77         inc b
0091   048C FA FF FF      lea d, [bp + -1] ; $psrc
0092   048F FD 43         mov [d], b
0093   0491 E5            pop b
0094   0492 74            mov d, b
0095   0493 32            mov bl, [d]
0096   0494 A7 00         mov bh, 0
0097   0496 E7            pop d
0098   0497 FD 3E         mov [d], bl
0099   0499 0A 69 04      jmp _while1_cond
0100   049C             _while1_exit:
0101   049C             ;; *pdest = '\0'; 
0102   049C FA FD FF      lea d, [bp + -3] ; $pdest
0103   049F 2A            mov b, [d]
0104   04A0 D8            push b
0105   04A1 26 00 00      mov b, $0
0106   04A4 E7            pop d
0107   04A5 FD 3E         mov [d], bl
0108   04A7 F9            leave
0109   04A8 09            ret
0110   04A9             
0111   04A9             strcmp:
0112   04A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0113   04AC             ;; while (*s1 && (*s1 == *s2)) { 
0114   04AC             _while2_cond:
0115   04AC FA 05 00      lea d, [bp + 5] ; $s1
0116   04AF 2A            mov b, [d]
0117   04B0 74            mov d, b
0118   04B1 32            mov bl, [d]
0119   04B2 A7 00         mov bh, 0
0120   04B4 D7            push a
0121   04B5 11            mov a, b
0122   04B6 FA 05 00      lea d, [bp + 5] ; $s1
0123   04B9 2A            mov b, [d]
0124   04BA 74            mov d, b
0125   04BB 32            mov bl, [d]
0126   04BC A7 00         mov bh, 0
0127   04BE             ; START RELATIONAL
0128   04BE D7            push a
0129   04BF 11            mov a, b
0130   04C0 FA 07 00      lea d, [bp + 7] ; $s2
0131   04C3 2A            mov b, [d]
0132   04C4 74            mov d, b
0133   04C5 32            mov bl, [d]
0134   04C6 A7 00         mov bh, 0
0135   04C8 B0            cmp a, b
0136   04C9 FD 71         seq ; ==
0137   04CB E4            pop a
0138   04CC             ; END RELATIONAL
0139   04CC FD A7         sand a, b ; &&
0140   04CE E4            pop a
0141   04CF C0 00 00      cmp b, 0
0142   04D2 C6 F2 04      je _while2_exit
0143   04D5             _while2_block:
0144   04D5             ;; s1++; 
0145   04D5 FA 05 00      lea d, [bp + 5] ; $s1
0146   04D8 2A            mov b, [d]
0147   04D9 D8            push b
0148   04DA FD 77         inc b
0149   04DC FA 05 00      lea d, [bp + 5] ; $s1
0150   04DF FD 43         mov [d], b
0151   04E1 E5            pop b
0152   04E2             ;; s2++; 
0153   04E2 FA 07 00      lea d, [bp + 7] ; $s2
0154   04E5 2A            mov b, [d]
0155   04E6 D8            push b
0156   04E7 FD 77         inc b
0157   04E9 FA 07 00      lea d, [bp + 7] ; $s2
0158   04EC FD 43         mov [d], b
0159   04EE E5            pop b
0160   04EF 0A AC 04      jmp _while2_cond
0161   04F2             _while2_exit:
0162   04F2             ;; return *s1 - *s2; 
0163   04F2 FA 05 00      lea d, [bp + 5] ; $s1
0164   04F5 2A            mov b, [d]
0165   04F6 74            mov d, b
0166   04F7 32            mov bl, [d]
0167   04F8 A7 00         mov bh, 0
0168   04FA             ; START TERMS
0169   04FA D7            push a
0170   04FB 11            mov a, b
0171   04FC FA 07 00      lea d, [bp + 7] ; $s2
0172   04FF 2A            mov b, [d]
0173   0500 74            mov d, b
0174   0501 32            mov bl, [d]
0175   0502 A7 00         mov bh, 0
0176   0504 60            sub a, b
0177   0505 27            mov b, a
0178   0506 E4            pop a
0179   0507             ; END TERMS
0180   0507 F9            leave
0181   0508 09            ret
0182   0509             
0183   0509             strcat:
0184   0509 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0185   050C             ; $dest_len 
0186   050C             ; $i 
0187   050C 52 04 00      sub sp, 4
0188   050F             ;; dest_len = strlen(dest); 
0189   050F FA FF FF      lea d, [bp + -1] ; $dest_len
0190   0512 DA            push d
0191   0513 FA 05 00      lea d, [bp + 5] ; $dest
0192   0516 2A            mov b, [d]
0193   0517 FD AB         swp b
0194   0519 D8            push b
0195   051A 07 BC 05      call strlen
0196   051D 51 02 00      add sp, 2
0197   0520 E7            pop d
0198   0521 FD 43         mov [d], b
0199   0523             ;; for (i = 0; src[i] != 0; i=i+1) { 
0200   0523             _for3_init:
0201   0523 FA FD FF      lea d, [bp + -3] ; $i
0202   0526 DA            push d
0203   0527 26 00 00      mov b, $0
0204   052A E7            pop d
0205   052B FD 43         mov [d], b
0206   052D             _for3_cond:
0207   052D FA 07 00      lea d, [bp + 7] ; $src
0208   0530 FD 2A         mov d, [d]
0209   0532 D7            push a
0210   0533 DA            push d
0211   0534 FA FD FF      lea d, [bp + -3] ; $i
0212   0537 2A            mov b, [d]
0213   0538 E7            pop d
0214   0539 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0215   053D E4            pop a
0216   053E 32            mov bl, [d]
0217   053F A7 00         mov bh, 0
0218   0541             ; START RELATIONAL
0219   0541 D7            push a
0220   0542 11            mov a, b
0221   0543 26 00 00      mov b, $0
0222   0546 B0            cmp a, b
0223   0547 FD 72         sneq ; !=
0224   0549 E4            pop a
0225   054A             ; END RELATIONAL
0226   054A C0 00 00      cmp b, 0
0227   054D C6 96 05      je _for3_exit
0228   0550             _for3_block:
0229   0550             ;; dest[dest_len + i] = src[i]; 
0230   0550 FA 05 00      lea d, [bp + 5] ; $dest
0231   0553 FD 2A         mov d, [d]
0232   0555 D7            push a
0233   0556 DA            push d
0234   0557 FA FF FF      lea d, [bp + -1] ; $dest_len
0235   055A 2A            mov b, [d]
0236   055B             ; START TERMS
0237   055B D7            push a
0238   055C 11            mov a, b
0239   055D FA FD FF      lea d, [bp + -3] ; $i
0240   0560 2A            mov b, [d]
0241   0561 56            add b, a
0242   0562 E4            pop a
0243   0563             ; END TERMS
0244   0563 E7            pop d
0245   0564 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0246   0568 E4            pop a
0247   0569 DA            push d
0248   056A FA 07 00      lea d, [bp + 7] ; $src
0249   056D FD 2A         mov d, [d]
0250   056F D7            push a
0251   0570 DA            push d
0252   0571 FA FD FF      lea d, [bp + -3] ; $i
0253   0574 2A            mov b, [d]
0254   0575 E7            pop d
0255   0576 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0256   057A E4            pop a
0257   057B 32            mov bl, [d]
0258   057C A7 00         mov bh, 0
0259   057E E7            pop d
0260   057F FD 3E         mov [d], bl
0261   0581             _for3_update:
0262   0581 FA FD FF      lea d, [bp + -3] ; $i
0263   0584 DA            push d
0264   0585 FA FD FF      lea d, [bp + -3] ; $i
0265   0588 2A            mov b, [d]
0266   0589             ; START TERMS
0267   0589 D7            push a
0268   058A 11            mov a, b
0269   058B 26 01 00      mov b, $1
0270   058E 56            add b, a
0271   058F E4            pop a
0272   0590             ; END TERMS
0273   0590 E7            pop d
0274   0591 FD 43         mov [d], b
0275   0593 0A 2D 05      jmp _for3_cond
0276   0596             _for3_exit:
0277   0596             ;; dest[dest_len + i] = 0; 
0278   0596 FA 05 00      lea d, [bp + 5] ; $dest
0279   0599 FD 2A         mov d, [d]
0280   059B D7            push a
0281   059C DA            push d
0282   059D FA FF FF      lea d, [bp + -1] ; $dest_len
0283   05A0 2A            mov b, [d]
0284   05A1             ; START TERMS
0285   05A1 D7            push a
0286   05A2 11            mov a, b
0287   05A3 FA FD FF      lea d, [bp + -3] ; $i
0288   05A6 2A            mov b, [d]
0289   05A7 56            add b, a
0290   05A8 E4            pop a
0291   05A9             ; END TERMS
0292   05A9 E7            pop d
0293   05AA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0294   05AE E4            pop a
0295   05AF DA            push d
0296   05B0 26 00 00      mov b, $0
0297   05B3 E7            pop d
0298   05B4 FD 3E         mov [d], bl
0299   05B6             ;; return dest; 
0300   05B6 FA 05 00      lea d, [bp + 5] ; $dest
0301   05B9 2A            mov b, [d]
0302   05BA F9            leave
0303   05BB 09            ret
0304   05BC             
0305   05BC             strlen:
0306   05BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0307   05BF             ; $length 
0308   05BF 52 02 00      sub sp, 2
0309   05C2             ;; length = 0; 
0310   05C2 FA FF FF      lea d, [bp + -1] ; $length
0311   05C5 DA            push d
0312   05C6 26 00 00      mov b, $0
0313   05C9 E7            pop d
0314   05CA FD 43         mov [d], b
0315   05CC             ;; while (str[length] != 0) { 
0316   05CC             _while4_cond:
0317   05CC FA 05 00      lea d, [bp + 5] ; $str
0318   05CF FD 2A         mov d, [d]
0319   05D1 D7            push a
0320   05D2 DA            push d
0321   05D3 FA FF FF      lea d, [bp + -1] ; $length
0322   05D6 2A            mov b, [d]
0323   05D7 E7            pop d
0324   05D8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0325   05DC E4            pop a
0326   05DD 32            mov bl, [d]
0327   05DE A7 00         mov bh, 0
0328   05E0             ; START RELATIONAL
0329   05E0 D7            push a
0330   05E1 11            mov a, b
0331   05E2 26 00 00      mov b, $0
0332   05E5 B0            cmp a, b
0333   05E6 FD 72         sneq ; !=
0334   05E8 E4            pop a
0335   05E9             ; END RELATIONAL
0336   05E9 C0 00 00      cmp b, 0
0337   05EC C6 FF 05      je _while4_exit
0338   05EF             _while4_block:
0339   05EF             ;; length++; 
0340   05EF FA FF FF      lea d, [bp + -1] ; $length
0341   05F2 2A            mov b, [d]
0342   05F3 D8            push b
0343   05F4 FD 77         inc b
0344   05F6 FA FF FF      lea d, [bp + -1] ; $length
0345   05F9 FD 43         mov [d], b
0346   05FB E5            pop b
0347   05FC 0A CC 05      jmp _while4_cond
0348   05FF             _while4_exit:
0349   05FF             ;; return length; 
0350   05FF FA FF FF      lea d, [bp + -1] ; $length
0351   0602 2A            mov b, [d]
0352   0603 F9            leave
0353   0604 09            ret
0354   0605             
0355   0605             exit:
0356   0605 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0357   0608             
0358   0608             ; --- BEGIN INLINE ASM BLOCK
0359   0608 05 0B         syscall sys_terminate_proc
0360   060A             ; --- END INLINE ASM BLOCK
0361   060A             
0362   060A F9            leave
0363   060B 09            ret
0364   060C             
0365   060C             atoi:
0366   060C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0367   060F             ; $result 
0368   060F 10 00 00      mov a, $0
0369   0612 45 FF FF      mov [bp + -1], a
0370   0615             ; $sign 
0371   0615 10 01 00      mov a, $1
0372   0618 45 FD FF      mov [bp + -3], a
0373   061B 52 04 00      sub sp, 4
0374   061E             ;; while (*str == ' ') str++; 
0375   061E             _while5_cond:
0376   061E FA 05 00      lea d, [bp + 5] ; $str
0377   0621 2A            mov b, [d]
0378   0622 74            mov d, b
0379   0623 32            mov bl, [d]
0380   0624 A7 00         mov bh, 0
0381   0626             ; START RELATIONAL
0382   0626 D7            push a
0383   0627 11            mov a, b
0384   0628 26 20 00      mov b, $20
0385   062B B0            cmp a, b
0386   062C FD 71         seq ; ==
0387   062E E4            pop a
0388   062F             ; END RELATIONAL
0389   062F C0 00 00      cmp b, 0
0390   0632 C6 45 06      je _while5_exit
0391   0635             _while5_block:
0392   0635             ;; str++; 
0393   0635 FA 05 00      lea d, [bp + 5] ; $str
0394   0638 2A            mov b, [d]
0395   0639 D8            push b
0396   063A FD 77         inc b
0397   063C FA 05 00      lea d, [bp + 5] ; $str
0398   063F FD 43         mov [d], b
0399   0641 E5            pop b
0400   0642 0A 1E 06      jmp _while5_cond
0401   0645             _while5_exit:
0402   0645             ;; if (*str == '-' || *str == '+') { 
0403   0645             _if6_cond:
0404   0645 FA 05 00      lea d, [bp + 5] ; $str
0405   0648 2A            mov b, [d]
0406   0649 74            mov d, b
0407   064A 32            mov bl, [d]
0408   064B A7 00         mov bh, 0
0409   064D             ; START RELATIONAL
0410   064D D7            push a
0411   064E 11            mov a, b
0412   064F 26 2D 00      mov b, $2d
0413   0652 B0            cmp a, b
0414   0653 FD 71         seq ; ==
0415   0655 E4            pop a
0416   0656             ; END RELATIONAL
0417   0656 D7            push a
0418   0657 11            mov a, b
0419   0658 FA 05 00      lea d, [bp + 5] ; $str
0420   065B 2A            mov b, [d]
0421   065C 74            mov d, b
0422   065D 32            mov bl, [d]
0423   065E A7 00         mov bh, 0
0424   0660             ; START RELATIONAL
0425   0660 D7            push a
0426   0661 11            mov a, b
0427   0662 26 2B 00      mov b, $2b
0428   0665 B0            cmp a, b
0429   0666 FD 71         seq ; ==
0430   0668 E4            pop a
0431   0669             ; END RELATIONAL
0432   0669 FD A8         sor a, b ; ||
0433   066B E4            pop a
0434   066C C0 00 00      cmp b, 0
0435   066F C6 A6 06      je _if6_exit
0436   0672             _if6_true:
0437   0672             ;; if (*str == '-') sign = -1; 
0438   0672             _if7_cond:
0439   0672 FA 05 00      lea d, [bp + 5] ; $str
0440   0675 2A            mov b, [d]
0441   0676 74            mov d, b
0442   0677 32            mov bl, [d]
0443   0678 A7 00         mov bh, 0
0444   067A             ; START RELATIONAL
0445   067A D7            push a
0446   067B 11            mov a, b
0447   067C 26 2D 00      mov b, $2d
0448   067F B0            cmp a, b
0449   0680 FD 71         seq ; ==
0450   0682 E4            pop a
0451   0683             ; END RELATIONAL
0452   0683 C0 00 00      cmp b, 0
0453   0686 C6 96 06      je _if7_exit
0454   0689             _if7_true:
0455   0689             ;; sign = -1; 
0456   0689 FA FD FF      lea d, [bp + -3] ; $sign
0457   068C DA            push d
0458   068D 26 FF FF      mov b, $ffff
0459   0690 E7            pop d
0460   0691 FD 43         mov [d], b
0461   0693 0A 96 06      jmp _if7_exit
0462   0696             _if7_exit:
0463   0696             ;; str++; 
0464   0696 FA 05 00      lea d, [bp + 5] ; $str
0465   0699 2A            mov b, [d]
0466   069A D8            push b
0467   069B FD 77         inc b
0468   069D FA 05 00      lea d, [bp + 5] ; $str
0469   06A0 FD 43         mov [d], b
0470   06A2 E5            pop b
0471   06A3 0A A6 06      jmp _if6_exit
0472   06A6             _if6_exit:
0473   06A6             ;; while (*str >= '0' && *str <= '9') { 
0474   06A6             _while8_cond:
0475   06A6 FA 05 00      lea d, [bp + 5] ; $str
0476   06A9 2A            mov b, [d]
0477   06AA 74            mov d, b
0478   06AB 32            mov bl, [d]
0479   06AC A7 00         mov bh, 0
0480   06AE             ; START RELATIONAL
0481   06AE D7            push a
0482   06AF 11            mov a, b
0483   06B0 26 30 00      mov b, $30
0484   06B3 B0            cmp a, b
0485   06B4 FD 82         sgeu ; >= (unsigned)
0486   06B6 E4            pop a
0487   06B7             ; END RELATIONAL
0488   06B7 D7            push a
0489   06B8 11            mov a, b
0490   06B9 FA 05 00      lea d, [bp + 5] ; $str
0491   06BC 2A            mov b, [d]
0492   06BD 74            mov d, b
0493   06BE 32            mov bl, [d]
0494   06BF A7 00         mov bh, 0
0495   06C1             ; START RELATIONAL
0496   06C1 D7            push a
0497   06C2 11            mov a, b
0498   06C3 26 39 00      mov b, $39
0499   06C6 B0            cmp a, b
0500   06C7 FD 76         sleu ; <= (unsigned)
0501   06C9 E4            pop a
0502   06CA             ; END RELATIONAL
0503   06CA FD A7         sand a, b ; &&
0504   06CC E4            pop a
0505   06CD C0 00 00      cmp b, 0
0506   06D0 C6 0B 07      je _while8_exit
0507   06D3             _while8_block:
0508   06D3             ;; result = result * 10 + (*str - '0'); 
0509   06D3 FA FF FF      lea d, [bp + -1] ; $result
0510   06D6 DA            push d
0511   06D7 FA FF FF      lea d, [bp + -1] ; $result
0512   06DA 2A            mov b, [d]
0513   06DB             ; START FACTORS
0514   06DB D7            push a
0515   06DC 11            mov a, b
0516   06DD 26 0A 00      mov b, $a
0517   06E0 AC            mul a, b ; *
0518   06E1 11            mov a, b
0519   06E2 27            mov b, a
0520   06E3 E4            pop a
0521   06E4             ; END FACTORS
0522   06E4             ; START TERMS
0523   06E4 D7            push a
0524   06E5 11            mov a, b
0525   06E6 FA 05 00      lea d, [bp + 5] ; $str
0526   06E9 2A            mov b, [d]
0527   06EA 74            mov d, b
0528   06EB 32            mov bl, [d]
0529   06EC A7 00         mov bh, 0
0530   06EE             ; START TERMS
0531   06EE D7            push a
0532   06EF 11            mov a, b
0533   06F0 26 30 00      mov b, $30
0534   06F3 60            sub a, b
0535   06F4 27            mov b, a
0536   06F5 E4            pop a
0537   06F6             ; END TERMS
0538   06F6 56            add b, a
0539   06F7 E4            pop a
0540   06F8             ; END TERMS
0541   06F8 E7            pop d
0542   06F9 FD 43         mov [d], b
0543   06FB             ;; str++; 
0544   06FB FA 05 00      lea d, [bp + 5] ; $str
0545   06FE 2A            mov b, [d]
0546   06FF D8            push b
0547   0700 FD 77         inc b
0548   0702 FA 05 00      lea d, [bp + 5] ; $str
0549   0705 FD 43         mov [d], b
0550   0707 E5            pop b
0551   0708 0A A6 06      jmp _while8_cond
0552   070B             _while8_exit:
0553   070B             ;; return sign * result; 
0554   070B FA FD FF      lea d, [bp + -3] ; $sign
0555   070E 2A            mov b, [d]
0556   070F             ; START FACTORS
0557   070F D7            push a
0558   0710 11            mov a, b
0559   0711 FA FF FF      lea d, [bp + -1] ; $result
0560   0714 2A            mov b, [d]
0561   0715 AC            mul a, b ; *
0562   0716 11            mov a, b
0563   0717 27            mov b, a
0564   0718 E4            pop a
0565   0719             ; END FACTORS
0566   0719 F9            leave
0567   071A 09            ret
0568   071B             
0569   071B             rand:
0570   071B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0571   071E             ; $sec 
0572   071E 52 02 00      sub sp, 2
0573   0721             
0574   0721             ; --- BEGIN INLINE ASM BLOCK
0575   0721 19 00         mov al, 0
0576   0723 05 01         syscall sys_rtc					
0577   0725 1A            mov al, ah
0578   0726 FA FF FF      lea d, [bp + -1] ; $sec
0579   0729 1E            mov al, [d]
0580   072A 22 00         mov ah, 0
0581   072C             ; --- END INLINE ASM BLOCK
0582   072C             
0583   072C             ;; return sec; 
0584   072C FA FF FF      lea d, [bp + -1] ; $sec
0585   072F 2A            mov b, [d]
0586   0730 F9            leave
0587   0731 09            ret
0588   0732             
0589   0732             srand:
0590   0732 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0591   0735 F9            leave
0592   0736 09            ret
0593   0737             
0594   0737             malloc:
0595   0737 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0596   073A F9            leave
0597   073B 09            ret
0598   073C             
0599   073C             calloc:
0600   073C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0601   073F F9            leave
0602   0740 09            ret
0603   0741             
0604   0741             realloc:
0605   0741 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0606   0744 F9            leave
0607   0745 09            ret
0608   0746             
0609   0746             alloc:
0610   0746 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0611   0749             ;; heap_top = heap_top + bytes; 
0612   0749 3B 6E 20      mov d, _heap_top ; $heap_top
0613   074C DA            push d
0614   074D 3B 6E 20      mov d, _heap_top ; $heap_top
0615   0750 2A            mov b, [d]
0616   0751             ; START TERMS
0617   0751 D7            push a
0618   0752 11            mov a, b
0619   0753 FA 05 00      lea d, [bp + 5] ; $bytes
0620   0756 2A            mov b, [d]
0621   0757 56            add b, a
0622   0758 E4            pop a
0623   0759             ; END TERMS
0624   0759 E7            pop d
0625   075A FD 43         mov [d], b
0626   075C             ;; return heap_top - bytes; 
0627   075C 3B 6E 20      mov d, _heap_top ; $heap_top
0628   075F 2A            mov b, [d]
0629   0760             ; START TERMS
0630   0760 D7            push a
0631   0761 11            mov a, b
0632   0762 FA 05 00      lea d, [bp + 5] ; $bytes
0633   0765 2A            mov b, [d]
0634   0766 60            sub a, b
0635   0767 27            mov b, a
0636   0768 E4            pop a
0637   0769             ; END TERMS
0638   0769 F9            leave
0639   076A 09            ret
0640   076B             
0641   076B             free:
0642   076B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0643   076E             ;; return heap_top = heap_top - bytes; 
0644   076E 3B 6E 20      mov d, _heap_top ; $heap_top
0645   0771 DA            push d
0646   0772 3B 6E 20      mov d, _heap_top ; $heap_top
0647   0775 2A            mov b, [d]
0648   0776             ; START TERMS
0649   0776 D7            push a
0650   0777 11            mov a, b
0651   0778 FA 05 00      lea d, [bp + 5] ; $bytes
0652   077B 2A            mov b, [d]
0653   077C 60            sub a, b
0654   077D 27            mov b, a
0655   077E E4            pop a
0656   077F             ; END TERMS
0657   077F E7            pop d
0658   0780 FD 43         mov [d], b
0659   0782 F9            leave
0660   0783 09            ret
0661   0784             
0662   0784             base64_encode:
0663   0784 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0664   0787             ; $i 
0665   0787 10 00 00      mov a, $0
0666   078A 45 FF FF      mov [bp + -1], a
0667   078D             ; $j 
0668   078D 10 00 00      mov a, $0
0669   0790 45 FD FF      mov [bp + -3], a
0670   0793             ; $k 
0671   0793             ; $input_len 
0672   0793             ; $input_buffer 
0673   0793             ; $output_buffer 
0674   0793 52 0F 00      sub sp, 15
0675   0796             ;; input_len = strlen(input); 
0676   0796 FA F9 FF      lea d, [bp + -7] ; $input_len
0677   0799 DA            push d
0678   079A FA 05 00      lea d, [bp + 5] ; $input
0679   079D 2A            mov b, [d]
0680   079E FD AB         swp b
0681   07A0 D8            push b
0682   07A1 07 BC 05      call strlen
0683   07A4 51 02 00      add sp, 2
0684   07A7 E7            pop d
0685   07A8 FD 43         mov [d], b
0686   07AA             ;; while (input_len--) { 
0687   07AA             _while9_cond:
0688   07AA FA F9 FF      lea d, [bp + -7] ; $input_len
0689   07AD 2A            mov b, [d]
0690   07AE D8            push b
0691   07AF FD 7D         dec b
0692   07B1 FA F9 FF      lea d, [bp + -7] ; $input_len
0693   07B4 FD 43         mov [d], b
0694   07B6 E5            pop b
0695   07B7 C0 00 00      cmp b, 0
0696   07BA C6 6E 09      je _while9_exit
0697   07BD             _while9_block:
0698   07BD             ;; input_buffer[i++] = *(input++); 
0699   07BD FA F6 FF      lea d, [bp + -10] ; $input_buffer
0700   07C0 D7            push a
0701   07C1 DA            push d
0702   07C2 FA FF FF      lea d, [bp + -1] ; $i
0703   07C5 2A            mov b, [d]
0704   07C6 D8            push b
0705   07C7 FD 77         inc b
0706   07C9 FA FF FF      lea d, [bp + -1] ; $i
0707   07CC FD 43         mov [d], b
0708   07CE E5            pop b
0709   07CF E7            pop d
0710   07D0 5A            add d, b
0711   07D1 E4            pop a
0712   07D2 DA            push d
0713   07D3 FA 05 00      lea d, [bp + 5] ; $input
0714   07D6 2A            mov b, [d]
0715   07D7 D8            push b
0716   07D8 FD 77         inc b
0717   07DA FA 05 00      lea d, [bp + 5] ; $input
0718   07DD FD 43         mov [d], b
0719   07DF E5            pop b
0720   07E0 74            mov d, b
0721   07E1 32            mov bl, [d]
0722   07E2 A7 00         mov bh, 0
0723   07E4 E7            pop d
0724   07E5 FD 3E         mov [d], bl
0725   07E7             ;; if (i == 3) { 
0726   07E7             _if10_cond:
0727   07E7 FA FF FF      lea d, [bp + -1] ; $i
0728   07EA 2A            mov b, [d]
0729   07EB             ; START RELATIONAL
0730   07EB D7            push a
0731   07EC 11            mov a, b
0732   07ED 26 03 00      mov b, $3
0733   07F0 B0            cmp a, b
0734   07F1 FD 71         seq ; ==
0735   07F3 E4            pop a
0736   07F4             ; END RELATIONAL
0737   07F4 C0 00 00      cmp b, 0
0738   07F7 C6 6B 09      je _if10_exit
0739   07FA             _if10_true:
0740   07FA             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0741   07FA FA F2 FF      lea d, [bp + -14] ; $output_buffer
0742   07FD D7            push a
0743   07FE DA            push d
0744   07FF 26 00 00      mov b, $0
0745   0802 E7            pop d
0746   0803 5A            add d, b
0747   0804 E4            pop a
0748   0805 DA            push d
0749   0806 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0750   0809 D7            push a
0751   080A DA            push d
0752   080B 26 00 00      mov b, $0
0753   080E E7            pop d
0754   080F 5A            add d, b
0755   0810 E4            pop a
0756   0811 32            mov bl, [d]
0757   0812 A7 00         mov bh, 0
0758   0814 D7            push a
0759   0815 11            mov a, b
0760   0816 26 FC 00      mov b, $fc
0761   0819 86            and a, b ; &
0762   081A 27            mov b, a
0763   081B E4            pop a
0764   081C             ; START SHIFT
0765   081C D7            push a
0766   081D 11            mov a, b
0767   081E 26 02 00      mov b, $2
0768   0821 FD 39         mov c, b
0769   0823 A5            ashr a, cl
0770   0824 27            mov b, a
0771   0825 E4            pop a
0772   0826             ; END SHIFT
0773   0826 E7            pop d
0774   0827 FD 3E         mov [d], bl
0775   0829             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0776   0829 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0777   082C D7            push a
0778   082D DA            push d
0779   082E 26 01 00      mov b, $1
0780   0831 E7            pop d
0781   0832 5A            add d, b
0782   0833 E4            pop a
0783   0834 DA            push d
0784   0835 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0785   0838 D7            push a
0786   0839 DA            push d
0787   083A 26 00 00      mov b, $0
0788   083D E7            pop d
0789   083E 5A            add d, b
0790   083F E4            pop a
0791   0840 32            mov bl, [d]
0792   0841 A7 00         mov bh, 0
0793   0843 D7            push a
0794   0844 11            mov a, b
0795   0845 26 03 00      mov b, $3
0796   0848 86            and a, b ; &
0797   0849 27            mov b, a
0798   084A E4            pop a
0799   084B             ; START SHIFT
0800   084B D7            push a
0801   084C 11            mov a, b
0802   084D 26 04 00      mov b, $4
0803   0850 FD 39         mov c, b
0804   0852 9D            shl a, cl
0805   0853 27            mov b, a
0806   0854 E4            pop a
0807   0855             ; END SHIFT
0808   0855             ; START TERMS
0809   0855 D7            push a
0810   0856 11            mov a, b
0811   0857 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0812   085A D7            push a
0813   085B DA            push d
0814   085C 26 01 00      mov b, $1
0815   085F E7            pop d
0816   0860 5A            add d, b
0817   0861 E4            pop a
0818   0862 32            mov bl, [d]
0819   0863 A7 00         mov bh, 0
0820   0865 D7            push a
0821   0866 11            mov a, b
0822   0867 26 F0 00      mov b, $f0
0823   086A 86            and a, b ; &
0824   086B 27            mov b, a
0825   086C E4            pop a
0826   086D             ; START SHIFT
0827   086D D7            push a
0828   086E 11            mov a, b
0829   086F 26 04 00      mov b, $4
0830   0872 FD 39         mov c, b
0831   0874 A5            ashr a, cl
0832   0875 27            mov b, a
0833   0876 E4            pop a
0834   0877             ; END SHIFT
0835   0877 56            add b, a
0836   0878 E4            pop a
0837   0879             ; END TERMS
0838   0879 E7            pop d
0839   087A FD 3E         mov [d], bl
0840   087C             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0841   087C FA F2 FF      lea d, [bp + -14] ; $output_buffer
0842   087F D7            push a
0843   0880 DA            push d
0844   0881 26 02 00      mov b, $2
0845   0884 E7            pop d
0846   0885 5A            add d, b
0847   0886 E4            pop a
0848   0887 DA            push d
0849   0888 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0850   088B D7            push a
0851   088C DA            push d
0852   088D 26 01 00      mov b, $1
0853   0890 E7            pop d
0854   0891 5A            add d, b
0855   0892 E4            pop a
0856   0893 32            mov bl, [d]
0857   0894 A7 00         mov bh, 0
0858   0896 D7            push a
0859   0897 11            mov a, b
0860   0898 26 0F 00      mov b, $f
0861   089B 86            and a, b ; &
0862   089C 27            mov b, a
0863   089D E4            pop a
0864   089E             ; START SHIFT
0865   089E D7            push a
0866   089F 11            mov a, b
0867   08A0 26 02 00      mov b, $2
0868   08A3 FD 39         mov c, b
0869   08A5 9D            shl a, cl
0870   08A6 27            mov b, a
0871   08A7 E4            pop a
0872   08A8             ; END SHIFT
0873   08A8             ; START TERMS
0874   08A8 D7            push a
0875   08A9 11            mov a, b
0876   08AA FA F6 FF      lea d, [bp + -10] ; $input_buffer
0877   08AD D7            push a
0878   08AE DA            push d
0879   08AF 26 02 00      mov b, $2
0880   08B2 E7            pop d
0881   08B3 5A            add d, b
0882   08B4 E4            pop a
0883   08B5 32            mov bl, [d]
0884   08B6 A7 00         mov bh, 0
0885   08B8 D7            push a
0886   08B9 11            mov a, b
0887   08BA 26 C0 00      mov b, $c0
0888   08BD 86            and a, b ; &
0889   08BE 27            mov b, a
0890   08BF E4            pop a
0891   08C0             ; START SHIFT
0892   08C0 D7            push a
0893   08C1 11            mov a, b
0894   08C2 26 06 00      mov b, $6
0895   08C5 FD 39         mov c, b
0896   08C7 A5            ashr a, cl
0897   08C8 27            mov b, a
0898   08C9 E4            pop a
0899   08CA             ; END SHIFT
0900   08CA 56            add b, a
0901   08CB E4            pop a
0902   08CC             ; END TERMS
0903   08CC E7            pop d
0904   08CD FD 3E         mov [d], bl
0905   08CF             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
0906   08CF FA F2 FF      lea d, [bp + -14] ; $output_buffer
0907   08D2 D7            push a
0908   08D3 DA            push d
0909   08D4 26 03 00      mov b, $3
0910   08D7 E7            pop d
0911   08D8 5A            add d, b
0912   08D9 E4            pop a
0913   08DA DA            push d
0914   08DB FA F6 FF      lea d, [bp + -10] ; $input_buffer
0915   08DE D7            push a
0916   08DF DA            push d
0917   08E0 26 02 00      mov b, $2
0918   08E3 E7            pop d
0919   08E4 5A            add d, b
0920   08E5 E4            pop a
0921   08E6 32            mov bl, [d]
0922   08E7 A7 00         mov bh, 0
0923   08E9 D7            push a
0924   08EA 11            mov a, b
0925   08EB 26 3F 00      mov b, $3f
0926   08EE 86            and a, b ; &
0927   08EF 27            mov b, a
0928   08F0 E4            pop a
0929   08F1 E7            pop d
0930   08F2 FD 3E         mov [d], bl
0931   08F4             ;; for (i = 0; i < 4; i++) { 
0932   08F4             _for11_init:
0933   08F4 FA FF FF      lea d, [bp + -1] ; $i
0934   08F7 DA            push d
0935   08F8 26 00 00      mov b, $0
0936   08FB E7            pop d
0937   08FC FD 43         mov [d], b
0938   08FE             _for11_cond:
0939   08FE FA FF FF      lea d, [bp + -1] ; $i
0940   0901 2A            mov b, [d]
0941   0902             ; START RELATIONAL
0942   0902 D7            push a
0943   0903 11            mov a, b
0944   0904 26 04 00      mov b, $4
0945   0907 B0            cmp a, b
0946   0908 FD 73         slt ; <= (signed)
0947   090A E4            pop a
0948   090B             ; END RELATIONAL
0949   090B C0 00 00      cmp b, 0
0950   090E C6 5E 09      je _for11_exit
0951   0911             _for11_block:
0952   0911             ;; output[j++] = base64_table[output_buffer[i]]; 
0953   0911 FA 07 00      lea d, [bp + 7] ; $output
0954   0914 FD 2A         mov d, [d]
0955   0916 D7            push a
0956   0917 DA            push d
0957   0918 FA FD FF      lea d, [bp + -3] ; $j
0958   091B 2A            mov b, [d]
0959   091C D8            push b
0960   091D FD 77         inc b
0961   091F FA FD FF      lea d, [bp + -3] ; $j
0962   0922 FD 43         mov [d], b
0963   0924 E5            pop b
0964   0925 E7            pop d
0965   0926 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0966   092A E4            pop a
0967   092B DA            push d
0968   092C 3B DF 1F      mov d, _base64_table ; $base64_table
0969   092F FD 2A         mov d, [d]
0970   0931 D7            push a
0971   0932 DA            push d
0972   0933 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0973   0936 D7            push a
0974   0937 DA            push d
0975   0938 FA FF FF      lea d, [bp + -1] ; $i
0976   093B 2A            mov b, [d]
0977   093C E7            pop d
0978   093D 5A            add d, b
0979   093E E4            pop a
0980   093F 32            mov bl, [d]
0981   0940 A7 00         mov bh, 0
0982   0942 E7            pop d
0983   0943 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0984   0947 E4            pop a
0985   0948 32            mov bl, [d]
0986   0949 A7 00         mov bh, 0
0987   094B E7            pop d
0988   094C FD 3E         mov [d], bl
0989   094E             _for11_update:
0990   094E FA FF FF      lea d, [bp + -1] ; $i
0991   0951 2A            mov b, [d]
0992   0952 D8            push b
0993   0953 FD 77         inc b
0994   0955 FA FF FF      lea d, [bp + -1] ; $i
0995   0958 FD 43         mov [d], b
0996   095A E5            pop b
0997   095B 0A FE 08      jmp _for11_cond
0998   095E             _for11_exit:
0999   095E             ;; i = 0; 
1000   095E FA FF FF      lea d, [bp + -1] ; $i
1001   0961 DA            push d
1002   0962 26 00 00      mov b, $0
1003   0965 E7            pop d
1004   0966 FD 43         mov [d], b
1005   0968 0A 6B 09      jmp _if10_exit
1006   096B             _if10_exit:
1007   096B 0A AA 07      jmp _while9_cond
1008   096E             _while9_exit:
1009   096E             ;; if (i) { 
1010   096E             _if12_cond:
1011   096E FA FF FF      lea d, [bp + -1] ; $i
1012   0971 2A            mov b, [d]
1013   0972 C0 00 00      cmp b, 0
1014   0975 C6 43 0B      je _if12_exit
1015   0978             _if12_true:
1016   0978             ;; for (k = i; k < 3; k++) { 
1017   0978             _for13_init:
1018   0978 FA FB FF      lea d, [bp + -5] ; $k
1019   097B DA            push d
1020   097C FA FF FF      lea d, [bp + -1] ; $i
1021   097F 2A            mov b, [d]
1022   0980 E7            pop d
1023   0981 FD 43         mov [d], b
1024   0983             _for13_cond:
1025   0983 FA FB FF      lea d, [bp + -5] ; $k
1026   0986 2A            mov b, [d]
1027   0987             ; START RELATIONAL
1028   0987 D7            push a
1029   0988 11            mov a, b
1030   0989 26 03 00      mov b, $3
1031   098C B0            cmp a, b
1032   098D FD 73         slt ; <= (signed)
1033   098F E4            pop a
1034   0990             ; END RELATIONAL
1035   0990 C0 00 00      cmp b, 0
1036   0993 C6 B9 09      je _for13_exit
1037   0996             _for13_block:
1038   0996             ;; input_buffer[k] = '\0'; 
1039   0996 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1040   0999 D7            push a
1041   099A DA            push d
1042   099B FA FB FF      lea d, [bp + -5] ; $k
1043   099E 2A            mov b, [d]
1044   099F E7            pop d
1045   09A0 5A            add d, b
1046   09A1 E4            pop a
1047   09A2 DA            push d
1048   09A3 26 00 00      mov b, $0
1049   09A6 E7            pop d
1050   09A7 FD 3E         mov [d], bl
1051   09A9             _for13_update:
1052   09A9 FA FB FF      lea d, [bp + -5] ; $k
1053   09AC 2A            mov b, [d]
1054   09AD D8            push b
1055   09AE FD 77         inc b
1056   09B0 FA FB FF      lea d, [bp + -5] ; $k
1057   09B3 FD 43         mov [d], b
1058   09B5 E5            pop b
1059   09B6 0A 83 09      jmp _for13_cond
1060   09B9             _for13_exit:
1061   09B9             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1062   09B9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1063   09BC D7            push a
1064   09BD DA            push d
1065   09BE 26 00 00      mov b, $0
1066   09C1 E7            pop d
1067   09C2 5A            add d, b
1068   09C3 E4            pop a
1069   09C4 DA            push d
1070   09C5 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1071   09C8 D7            push a
1072   09C9 DA            push d
1073   09CA 26 00 00      mov b, $0
1074   09CD E7            pop d
1075   09CE 5A            add d, b
1076   09CF E4            pop a
1077   09D0 32            mov bl, [d]
1078   09D1 A7 00         mov bh, 0
1079   09D3 D7            push a
1080   09D4 11            mov a, b
1081   09D5 26 FC 00      mov b, $fc
1082   09D8 86            and a, b ; &
1083   09D9 27            mov b, a
1084   09DA E4            pop a
1085   09DB             ; START SHIFT
1086   09DB D7            push a
1087   09DC 11            mov a, b
1088   09DD 26 02 00      mov b, $2
1089   09E0 FD 39         mov c, b
1090   09E2 A5            ashr a, cl
1091   09E3 27            mov b, a
1092   09E4 E4            pop a
1093   09E5             ; END SHIFT
1094   09E5 E7            pop d
1095   09E6 FD 3E         mov [d], bl
1096   09E8             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1097   09E8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1098   09EB D7            push a
1099   09EC DA            push d
1100   09ED 26 01 00      mov b, $1
1101   09F0 E7            pop d
1102   09F1 5A            add d, b
1103   09F2 E4            pop a
1104   09F3 DA            push d
1105   09F4 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1106   09F7 D7            push a
1107   09F8 DA            push d
1108   09F9 26 00 00      mov b, $0
1109   09FC E7            pop d
1110   09FD 5A            add d, b
1111   09FE E4            pop a
1112   09FF 32            mov bl, [d]
1113   0A00 A7 00         mov bh, 0
1114   0A02 D7            push a
1115   0A03 11            mov a, b
1116   0A04 26 03 00      mov b, $3
1117   0A07 86            and a, b ; &
1118   0A08 27            mov b, a
1119   0A09 E4            pop a
1120   0A0A             ; START SHIFT
1121   0A0A D7            push a
1122   0A0B 11            mov a, b
1123   0A0C 26 04 00      mov b, $4
1124   0A0F FD 39         mov c, b
1125   0A11 9D            shl a, cl
1126   0A12 27            mov b, a
1127   0A13 E4            pop a
1128   0A14             ; END SHIFT
1129   0A14             ; START TERMS
1130   0A14 D7            push a
1131   0A15 11            mov a, b
1132   0A16 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1133   0A19 D7            push a
1134   0A1A DA            push d
1135   0A1B 26 01 00      mov b, $1
1136   0A1E E7            pop d
1137   0A1F 5A            add d, b
1138   0A20 E4            pop a
1139   0A21 32            mov bl, [d]
1140   0A22 A7 00         mov bh, 0
1141   0A24 D7            push a
1142   0A25 11            mov a, b
1143   0A26 26 F0 00      mov b, $f0
1144   0A29 86            and a, b ; &
1145   0A2A 27            mov b, a
1146   0A2B E4            pop a
1147   0A2C             ; START SHIFT
1148   0A2C D7            push a
1149   0A2D 11            mov a, b
1150   0A2E 26 04 00      mov b, $4
1151   0A31 FD 39         mov c, b
1152   0A33 A5            ashr a, cl
1153   0A34 27            mov b, a
1154   0A35 E4            pop a
1155   0A36             ; END SHIFT
1156   0A36 56            add b, a
1157   0A37 E4            pop a
1158   0A38             ; END TERMS
1159   0A38 E7            pop d
1160   0A39 FD 3E         mov [d], bl
1161   0A3B             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1162   0A3B FA F2 FF      lea d, [bp + -14] ; $output_buffer
1163   0A3E D7            push a
1164   0A3F DA            push d
1165   0A40 26 02 00      mov b, $2
1166   0A43 E7            pop d
1167   0A44 5A            add d, b
1168   0A45 E4            pop a
1169   0A46 DA            push d
1170   0A47 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1171   0A4A D7            push a
1172   0A4B DA            push d
1173   0A4C 26 01 00      mov b, $1
1174   0A4F E7            pop d
1175   0A50 5A            add d, b
1176   0A51 E4            pop a
1177   0A52 32            mov bl, [d]
1178   0A53 A7 00         mov bh, 0
1179   0A55 D7            push a
1180   0A56 11            mov a, b
1181   0A57 26 0F 00      mov b, $f
1182   0A5A 86            and a, b ; &
1183   0A5B 27            mov b, a
1184   0A5C E4            pop a
1185   0A5D             ; START SHIFT
1186   0A5D D7            push a
1187   0A5E 11            mov a, b
1188   0A5F 26 02 00      mov b, $2
1189   0A62 FD 39         mov c, b
1190   0A64 9D            shl a, cl
1191   0A65 27            mov b, a
1192   0A66 E4            pop a
1193   0A67             ; END SHIFT
1194   0A67             ; START TERMS
1195   0A67 D7            push a
1196   0A68 11            mov a, b
1197   0A69 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1198   0A6C D7            push a
1199   0A6D DA            push d
1200   0A6E 26 02 00      mov b, $2
1201   0A71 E7            pop d
1202   0A72 5A            add d, b
1203   0A73 E4            pop a
1204   0A74 32            mov bl, [d]
1205   0A75 A7 00         mov bh, 0
1206   0A77 D7            push a
1207   0A78 11            mov a, b
1208   0A79 26 C0 00      mov b, $c0
1209   0A7C 86            and a, b ; &
1210   0A7D 27            mov b, a
1211   0A7E E4            pop a
1212   0A7F             ; START SHIFT
1213   0A7F D7            push a
1214   0A80 11            mov a, b
1215   0A81 26 06 00      mov b, $6
1216   0A84 FD 39         mov c, b
1217   0A86 A5            ashr a, cl
1218   0A87 27            mov b, a
1219   0A88 E4            pop a
1220   0A89             ; END SHIFT
1221   0A89 56            add b, a
1222   0A8A E4            pop a
1223   0A8B             ; END TERMS
1224   0A8B E7            pop d
1225   0A8C FD 3E         mov [d], bl
1226   0A8E             ;; for (k = 0; k < i + 1; k++) { 
1227   0A8E             _for14_init:
1228   0A8E FA FB FF      lea d, [bp + -5] ; $k
1229   0A91 DA            push d
1230   0A92 26 00 00      mov b, $0
1231   0A95 E7            pop d
1232   0A96 FD 43         mov [d], b
1233   0A98             _for14_cond:
1234   0A98 FA FB FF      lea d, [bp + -5] ; $k
1235   0A9B 2A            mov b, [d]
1236   0A9C             ; START RELATIONAL
1237   0A9C D7            push a
1238   0A9D 11            mov a, b
1239   0A9E FA FF FF      lea d, [bp + -1] ; $i
1240   0AA1 2A            mov b, [d]
1241   0AA2             ; START TERMS
1242   0AA2 D7            push a
1243   0AA3 11            mov a, b
1244   0AA4 26 01 00      mov b, $1
1245   0AA7 56            add b, a
1246   0AA8 E4            pop a
1247   0AA9             ; END TERMS
1248   0AA9 B0            cmp a, b
1249   0AAA FD 73         slt ; <= (signed)
1250   0AAC E4            pop a
1251   0AAD             ; END RELATIONAL
1252   0AAD C0 00 00      cmp b, 0
1253   0AB0 C6 00 0B      je _for14_exit
1254   0AB3             _for14_block:
1255   0AB3             ;; output[j++] = base64_table[output_buffer[k]]; 
1256   0AB3 FA 07 00      lea d, [bp + 7] ; $output
1257   0AB6 FD 2A         mov d, [d]
1258   0AB8 D7            push a
1259   0AB9 DA            push d
1260   0ABA FA FD FF      lea d, [bp + -3] ; $j
1261   0ABD 2A            mov b, [d]
1262   0ABE D8            push b
1263   0ABF FD 77         inc b
1264   0AC1 FA FD FF      lea d, [bp + -3] ; $j
1265   0AC4 FD 43         mov [d], b
1266   0AC6 E5            pop b
1267   0AC7 E7            pop d
1268   0AC8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1269   0ACC E4            pop a
1270   0ACD DA            push d
1271   0ACE 3B DF 1F      mov d, _base64_table ; $base64_table
1272   0AD1 FD 2A         mov d, [d]
1273   0AD3 D7            push a
1274   0AD4 DA            push d
1275   0AD5 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1276   0AD8 D7            push a
1277   0AD9 DA            push d
1278   0ADA FA FB FF      lea d, [bp + -5] ; $k
1279   0ADD 2A            mov b, [d]
1280   0ADE E7            pop d
1281   0ADF 5A            add d, b
1282   0AE0 E4            pop a
1283   0AE1 32            mov bl, [d]
1284   0AE2 A7 00         mov bh, 0
1285   0AE4 E7            pop d
1286   0AE5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1287   0AE9 E4            pop a
1288   0AEA 32            mov bl, [d]
1289   0AEB A7 00         mov bh, 0
1290   0AED E7            pop d
1291   0AEE FD 3E         mov [d], bl
1292   0AF0             _for14_update:
1293   0AF0 FA FB FF      lea d, [bp + -5] ; $k
1294   0AF3 2A            mov b, [d]
1295   0AF4 D8            push b
1296   0AF5 FD 77         inc b
1297   0AF7 FA FB FF      lea d, [bp + -5] ; $k
1298   0AFA FD 43         mov [d], b
1299   0AFC E5            pop b
1300   0AFD 0A 98 0A      jmp _for14_cond
1301   0B00             _for14_exit:
1302   0B00             ;; while (i++ < 3) { 
1303   0B00             _while15_cond:
1304   0B00 FA FF FF      lea d, [bp + -1] ; $i
1305   0B03 2A            mov b, [d]
1306   0B04 D8            push b
1307   0B05 FD 77         inc b
1308   0B07 FA FF FF      lea d, [bp + -1] ; $i
1309   0B0A FD 43         mov [d], b
1310   0B0C E5            pop b
1311   0B0D             ; START RELATIONAL
1312   0B0D D7            push a
1313   0B0E 11            mov a, b
1314   0B0F 26 03 00      mov b, $3
1315   0B12 B0            cmp a, b
1316   0B13 FD 73         slt ; <= (signed)
1317   0B15 E4            pop a
1318   0B16             ; END RELATIONAL
1319   0B16 C0 00 00      cmp b, 0
1320   0B19 C6 40 0B      je _while15_exit
1321   0B1C             _while15_block:
1322   0B1C             ;; output[j++] = '='; 
1323   0B1C FA 07 00      lea d, [bp + 7] ; $output
1324   0B1F FD 2A         mov d, [d]
1325   0B21 D7            push a
1326   0B22 DA            push d
1327   0B23 FA FD FF      lea d, [bp + -3] ; $j
1328   0B26 2A            mov b, [d]
1329   0B27 D8            push b
1330   0B28 FD 77         inc b
1331   0B2A FA FD FF      lea d, [bp + -3] ; $j
1332   0B2D FD 43         mov [d], b
1333   0B2F E5            pop b
1334   0B30 E7            pop d
1335   0B31 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1336   0B35 E4            pop a
1337   0B36 DA            push d
1338   0B37 26 3D 00      mov b, $3d
1339   0B3A E7            pop d
1340   0B3B FD 3E         mov [d], bl
1341   0B3D 0A 00 0B      jmp _while15_cond
1342   0B40             _while15_exit:
1343   0B40 0A 43 0B      jmp _if12_exit
1344   0B43             _if12_exit:
1345   0B43             ;; output[j] = '\0'; 
1346   0B43 FA 07 00      lea d, [bp + 7] ; $output
1347   0B46 FD 2A         mov d, [d]
1348   0B48 D7            push a
1349   0B49 DA            push d
1350   0B4A FA FD FF      lea d, [bp + -3] ; $j
1351   0B4D 2A            mov b, [d]
1352   0B4E E7            pop d
1353   0B4F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1354   0B53 E4            pop a
1355   0B54 DA            push d
1356   0B55 26 00 00      mov b, $0
1357   0B58 E7            pop d
1358   0B59 FD 3E         mov [d], bl
1359   0B5B F9            leave
1360   0B5C 09            ret
1361   0B5D             
1362   0B5D             base64_char_value:
1363   0B5D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1364   0B60             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1365   0B60             _if16_cond:
1366   0B60 FA 05 00      lea d, [bp + 5] ; $c
1367   0B63 32            mov bl, [d]
1368   0B64 A7 00         mov bh, 0
1369   0B66             ; START RELATIONAL
1370   0B66 D7            push a
1371   0B67 11            mov a, b
1372   0B68 26 41 00      mov b, $41
1373   0B6B B0            cmp a, b
1374   0B6C FD 80         sge ; >=
1375   0B6E E4            pop a
1376   0B6F             ; END RELATIONAL
1377   0B6F D7            push a
1378   0B70 11            mov a, b
1379   0B71 FA 05 00      lea d, [bp + 5] ; $c
1380   0B74 32            mov bl, [d]
1381   0B75 A7 00         mov bh, 0
1382   0B77             ; START RELATIONAL
1383   0B77 D7            push a
1384   0B78 11            mov a, b
1385   0B79 26 5A 00      mov b, $5a
1386   0B7C B0            cmp a, b
1387   0B7D FD 74         sle ; <=
1388   0B7F E4            pop a
1389   0B80             ; END RELATIONAL
1390   0B80 FD A7         sand a, b ; &&
1391   0B82 E4            pop a
1392   0B83 C0 00 00      cmp b, 0
1393   0B86 C6 9C 0B      je _if16_exit
1394   0B89             _if16_true:
1395   0B89             ;; return c - 'A'; 
1396   0B89 FA 05 00      lea d, [bp + 5] ; $c
1397   0B8C 32            mov bl, [d]
1398   0B8D A7 00         mov bh, 0
1399   0B8F             ; START TERMS
1400   0B8F D7            push a
1401   0B90 11            mov a, b
1402   0B91 26 41 00      mov b, $41
1403   0B94 60            sub a, b
1404   0B95 27            mov b, a
1405   0B96 E4            pop a
1406   0B97             ; END TERMS
1407   0B97 F9            leave
1408   0B98 09            ret
1409   0B99 0A 9C 0B      jmp _if16_exit
1410   0B9C             _if16_exit:
1411   0B9C             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1412   0B9C             _if17_cond:
1413   0B9C FA 05 00      lea d, [bp + 5] ; $c
1414   0B9F 32            mov bl, [d]
1415   0BA0 A7 00         mov bh, 0
1416   0BA2             ; START RELATIONAL
1417   0BA2 D7            push a
1418   0BA3 11            mov a, b
1419   0BA4 26 61 00      mov b, $61
1420   0BA7 B0            cmp a, b
1421   0BA8 FD 80         sge ; >=
1422   0BAA E4            pop a
1423   0BAB             ; END RELATIONAL
1424   0BAB D7            push a
1425   0BAC 11            mov a, b
1426   0BAD FA 05 00      lea d, [bp + 5] ; $c
1427   0BB0 32            mov bl, [d]
1428   0BB1 A7 00         mov bh, 0
1429   0BB3             ; START RELATIONAL
1430   0BB3 D7            push a
1431   0BB4 11            mov a, b
1432   0BB5 26 7A 00      mov b, $7a
1433   0BB8 B0            cmp a, b
1434   0BB9 FD 74         sle ; <=
1435   0BBB E4            pop a
1436   0BBC             ; END RELATIONAL
1437   0BBC FD A7         sand a, b ; &&
1438   0BBE E4            pop a
1439   0BBF C0 00 00      cmp b, 0
1440   0BC2 C6 DD 0B      je _if17_exit
1441   0BC5             _if17_true:
1442   0BC5             ;; return c - 'a' + 26; 
1443   0BC5 FA 05 00      lea d, [bp + 5] ; $c
1444   0BC8 32            mov bl, [d]
1445   0BC9 A7 00         mov bh, 0
1446   0BCB             ; START TERMS
1447   0BCB D7            push a
1448   0BCC 11            mov a, b
1449   0BCD 26 61 00      mov b, $61
1450   0BD0 60            sub a, b
1451   0BD1 27            mov b, a
1452   0BD2 11            mov a, b
1453   0BD3 26 1A 00      mov b, $1a
1454   0BD6 56            add b, a
1455   0BD7 E4            pop a
1456   0BD8             ; END TERMS
1457   0BD8 F9            leave
1458   0BD9 09            ret
1459   0BDA 0A DD 0B      jmp _if17_exit
1460   0BDD             _if17_exit:
1461   0BDD             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1462   0BDD             _if18_cond:
1463   0BDD FA 05 00      lea d, [bp + 5] ; $c
1464   0BE0 32            mov bl, [d]
1465   0BE1 A7 00         mov bh, 0
1466   0BE3             ; START RELATIONAL
1467   0BE3 D7            push a
1468   0BE4 11            mov a, b
1469   0BE5 26 30 00      mov b, $30
1470   0BE8 B0            cmp a, b
1471   0BE9 FD 80         sge ; >=
1472   0BEB E4            pop a
1473   0BEC             ; END RELATIONAL
1474   0BEC D7            push a
1475   0BED 11            mov a, b
1476   0BEE FA 05 00      lea d, [bp + 5] ; $c
1477   0BF1 32            mov bl, [d]
1478   0BF2 A7 00         mov bh, 0
1479   0BF4             ; START RELATIONAL
1480   0BF4 D7            push a
1481   0BF5 11            mov a, b
1482   0BF6 26 39 00      mov b, $39
1483   0BF9 B0            cmp a, b
1484   0BFA FD 74         sle ; <=
1485   0BFC E4            pop a
1486   0BFD             ; END RELATIONAL
1487   0BFD FD A7         sand a, b ; &&
1488   0BFF E4            pop a
1489   0C00 C0 00 00      cmp b, 0
1490   0C03 C6 1E 0C      je _if18_exit
1491   0C06             _if18_true:
1492   0C06             ;; return c - '0' + 52; 
1493   0C06 FA 05 00      lea d, [bp + 5] ; $c
1494   0C09 32            mov bl, [d]
1495   0C0A A7 00         mov bh, 0
1496   0C0C             ; START TERMS
1497   0C0C D7            push a
1498   0C0D 11            mov a, b
1499   0C0E 26 30 00      mov b, $30
1500   0C11 60            sub a, b
1501   0C12 27            mov b, a
1502   0C13 11            mov a, b
1503   0C14 26 34 00      mov b, $34
1504   0C17 56            add b, a
1505   0C18 E4            pop a
1506   0C19             ; END TERMS
1507   0C19 F9            leave
1508   0C1A 09            ret
1509   0C1B 0A 1E 0C      jmp _if18_exit
1510   0C1E             _if18_exit:
1511   0C1E             ;; if (c == '+') return 62; 
1512   0C1E             _if19_cond:
1513   0C1E FA 05 00      lea d, [bp + 5] ; $c
1514   0C21 32            mov bl, [d]
1515   0C22 A7 00         mov bh, 0
1516   0C24             ; START RELATIONAL
1517   0C24 D7            push a
1518   0C25 11            mov a, b
1519   0C26 26 2B 00      mov b, $2b
1520   0C29 B0            cmp a, b
1521   0C2A FD 71         seq ; ==
1522   0C2C E4            pop a
1523   0C2D             ; END RELATIONAL
1524   0C2D C0 00 00      cmp b, 0
1525   0C30 C6 3B 0C      je _if19_exit
1526   0C33             _if19_true:
1527   0C33             ;; return 62; 
1528   0C33 26 3E 00      mov b, $3e
1529   0C36 F9            leave
1530   0C37 09            ret
1531   0C38 0A 3B 0C      jmp _if19_exit
1532   0C3B             _if19_exit:
1533   0C3B             ;; if (c == '/') return 63; 
1534   0C3B             _if20_cond:
1535   0C3B FA 05 00      lea d, [bp + 5] ; $c
1536   0C3E 32            mov bl, [d]
1537   0C3F A7 00         mov bh, 0
1538   0C41             ; START RELATIONAL
1539   0C41 D7            push a
1540   0C42 11            mov a, b
1541   0C43 26 2F 00      mov b, $2f
1542   0C46 B0            cmp a, b
1543   0C47 FD 71         seq ; ==
1544   0C49 E4            pop a
1545   0C4A             ; END RELATIONAL
1546   0C4A C0 00 00      cmp b, 0
1547   0C4D C6 58 0C      je _if20_exit
1548   0C50             _if20_true:
1549   0C50             ;; return 63; 
1550   0C50 26 3F 00      mov b, $3f
1551   0C53 F9            leave
1552   0C54 09            ret
1553   0C55 0A 58 0C      jmp _if20_exit
1554   0C58             _if20_exit:
1555   0C58             ;; return -1; 
1556   0C58 26 FF FF      mov b, $ffff
1557   0C5B F9            leave
1558   0C5C 09            ret
1559   0C5D             
1560   0C5D             base64_decode:
1561   0C5D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1562   0C60             ; $i 
1563   0C60 10 00 00      mov a, $0
1564   0C63 45 FF FF      mov [bp + -1], a
1565   0C66             ; $j 
1566   0C66 10 00 00      mov a, $0
1567   0C69 45 FD FF      mov [bp + -3], a
1568   0C6C             ; $k 
1569   0C6C 10 00 00      mov a, $0
1570   0C6F 45 FB FF      mov [bp + -5], a
1571   0C72             ; $input_len 
1572   0C72             ; $input_buffer 
1573   0C72             ; $output_buffer 
1574   0C72 52 0F 00      sub sp, 15
1575   0C75             ;; input_len = strlen(input); 
1576   0C75 FA F9 FF      lea d, [bp + -7] ; $input_len
1577   0C78 DA            push d
1578   0C79 FA 05 00      lea d, [bp + 5] ; $input
1579   0C7C 2A            mov b, [d]
1580   0C7D FD AB         swp b
1581   0C7F D8            push b
1582   0C80 07 BC 05      call strlen
1583   0C83 51 02 00      add sp, 2
1584   0C86 E7            pop d
1585   0C87 FD 43         mov [d], b
1586   0C89             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1587   0C89             _while21_cond:
1588   0C89 FA F9 FF      lea d, [bp + -7] ; $input_len
1589   0C8C 2A            mov b, [d]
1590   0C8D D8            push b
1591   0C8E FD 7D         dec b
1592   0C90 FA F9 FF      lea d, [bp + -7] ; $input_len
1593   0C93 FD 43         mov [d], b
1594   0C95 E5            pop b
1595   0C96 D7            push a
1596   0C97 11            mov a, b
1597   0C98 FA 05 00      lea d, [bp + 5] ; $input
1598   0C9B FD 2A         mov d, [d]
1599   0C9D D7            push a
1600   0C9E DA            push d
1601   0C9F FA FB FF      lea d, [bp + -5] ; $k
1602   0CA2 2A            mov b, [d]
1603   0CA3 E7            pop d
1604   0CA4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1605   0CA8 E4            pop a
1606   0CA9 32            mov bl, [d]
1607   0CAA A7 00         mov bh, 0
1608   0CAC             ; START RELATIONAL
1609   0CAC D7            push a
1610   0CAD 11            mov a, b
1611   0CAE 26 3D 00      mov b, $3d
1612   0CB1 B0            cmp a, b
1613   0CB2 FD 72         sneq ; !=
1614   0CB4 E4            pop a
1615   0CB5             ; END RELATIONAL
1616   0CB5 FD A7         sand a, b ; &&
1617   0CB7 11            mov a, b
1618   0CB8 FA 05 00      lea d, [bp + 5] ; $input
1619   0CBB FD 2A         mov d, [d]
1620   0CBD D7            push a
1621   0CBE DA            push d
1622   0CBF FA FB FF      lea d, [bp + -5] ; $k
1623   0CC2 2A            mov b, [d]
1624   0CC3 E7            pop d
1625   0CC4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1626   0CC8 E4            pop a
1627   0CC9 32            mov bl, [d]
1628   0CCA A7 00         mov bh, 0
1629   0CCC DD            push bl
1630   0CCD 07 5D 0B      call base64_char_value
1631   0CD0 51 01 00      add sp, 1
1632   0CD3             ; START RELATIONAL
1633   0CD3 D7            push a
1634   0CD4 11            mov a, b
1635   0CD5 26 FF FF      mov b, $ffff
1636   0CD8 B0            cmp a, b
1637   0CD9 FD 72         sneq ; !=
1638   0CDB E4            pop a
1639   0CDC             ; END RELATIONAL
1640   0CDC FD A7         sand a, b ; &&
1641   0CDE E4            pop a
1642   0CDF C0 00 00      cmp b, 0
1643   0CE2 C6 CA 0E      je _while21_exit
1644   0CE5             _while21_block:
1645   0CE5             ;; input_buffer[i++] = input[k++]; 
1646   0CE5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1647   0CE8 D7            push a
1648   0CE9 DA            push d
1649   0CEA FA FF FF      lea d, [bp + -1] ; $i
1650   0CED 2A            mov b, [d]
1651   0CEE D8            push b
1652   0CEF FD 77         inc b
1653   0CF1 FA FF FF      lea d, [bp + -1] ; $i
1654   0CF4 FD 43         mov [d], b
1655   0CF6 E5            pop b
1656   0CF7 E7            pop d
1657   0CF8 5A            add d, b
1658   0CF9 E4            pop a
1659   0CFA DA            push d
1660   0CFB FA 05 00      lea d, [bp + 5] ; $input
1661   0CFE FD 2A         mov d, [d]
1662   0D00 D7            push a
1663   0D01 DA            push d
1664   0D02 FA FB FF      lea d, [bp + -5] ; $k
1665   0D05 2A            mov b, [d]
1666   0D06 D8            push b
1667   0D07 FD 77         inc b
1668   0D09 FA FB FF      lea d, [bp + -5] ; $k
1669   0D0C FD 43         mov [d], b
1670   0D0E E5            pop b
1671   0D0F E7            pop d
1672   0D10 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1673   0D14 E4            pop a
1674   0D15 32            mov bl, [d]
1675   0D16 A7 00         mov bh, 0
1676   0D18 E7            pop d
1677   0D19 FD 3E         mov [d], bl
1678   0D1B             ;; if (i == 4) { 
1679   0D1B             _if22_cond:
1680   0D1B FA FF FF      lea d, [bp + -1] ; $i
1681   0D1E 2A            mov b, [d]
1682   0D1F             ; START RELATIONAL
1683   0D1F D7            push a
1684   0D20 11            mov a, b
1685   0D21 26 04 00      mov b, $4
1686   0D24 B0            cmp a, b
1687   0D25 FD 71         seq ; ==
1688   0D27 E4            pop a
1689   0D28             ; END RELATIONAL
1690   0D28 C0 00 00      cmp b, 0
1691   0D2B C6 C7 0E      je _if22_exit
1692   0D2E             _if22_true:
1693   0D2E             ;; for (i = 0; i < 4; i++) { 
1694   0D2E             _for23_init:
1695   0D2E FA FF FF      lea d, [bp + -1] ; $i
1696   0D31 DA            push d
1697   0D32 26 00 00      mov b, $0
1698   0D35 E7            pop d
1699   0D36 FD 43         mov [d], b
1700   0D38             _for23_cond:
1701   0D38 FA FF FF      lea d, [bp + -1] ; $i
1702   0D3B 2A            mov b, [d]
1703   0D3C             ; START RELATIONAL
1704   0D3C D7            push a
1705   0D3D 11            mov a, b
1706   0D3E 26 04 00      mov b, $4
1707   0D41 B0            cmp a, b
1708   0D42 FD 73         slt ; <= (signed)
1709   0D44 E4            pop a
1710   0D45             ; END RELATIONAL
1711   0D45 C0 00 00      cmp b, 0
1712   0D48 C6 81 0D      je _for23_exit
1713   0D4B             _for23_block:
1714   0D4B             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
1715   0D4B FA F5 FF      lea d, [bp + -11] ; $input_buffer
1716   0D4E D7            push a
1717   0D4F DA            push d
1718   0D50 FA FF FF      lea d, [bp + -1] ; $i
1719   0D53 2A            mov b, [d]
1720   0D54 E7            pop d
1721   0D55 5A            add d, b
1722   0D56 E4            pop a
1723   0D57 DA            push d
1724   0D58 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1725   0D5B D7            push a
1726   0D5C DA            push d
1727   0D5D FA FF FF      lea d, [bp + -1] ; $i
1728   0D60 2A            mov b, [d]
1729   0D61 E7            pop d
1730   0D62 5A            add d, b
1731   0D63 E4            pop a
1732   0D64 32            mov bl, [d]
1733   0D65 A7 00         mov bh, 0
1734   0D67 DD            push bl
1735   0D68 07 5D 0B      call base64_char_value
1736   0D6B 51 01 00      add sp, 1
1737   0D6E E7            pop d
1738   0D6F FD 3E         mov [d], bl
1739   0D71             _for23_update:
1740   0D71 FA FF FF      lea d, [bp + -1] ; $i
1741   0D74 2A            mov b, [d]
1742   0D75 D8            push b
1743   0D76 FD 77         inc b
1744   0D78 FA FF FF      lea d, [bp + -1] ; $i
1745   0D7B FD 43         mov [d], b
1746   0D7D E5            pop b
1747   0D7E 0A 38 0D      jmp _for23_cond
1748   0D81             _for23_exit:
1749   0D81             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1750   0D81 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1751   0D84 D7            push a
1752   0D85 DA            push d
1753   0D86 26 00 00      mov b, $0
1754   0D89 E7            pop d
1755   0D8A 5A            add d, b
1756   0D8B E4            pop a
1757   0D8C DA            push d
1758   0D8D FA F5 FF      lea d, [bp + -11] ; $input_buffer
1759   0D90 D7            push a
1760   0D91 DA            push d
1761   0D92 26 00 00      mov b, $0
1762   0D95 E7            pop d
1763   0D96 5A            add d, b
1764   0D97 E4            pop a
1765   0D98 32            mov bl, [d]
1766   0D99 A7 00         mov bh, 0
1767   0D9B             ; START SHIFT
1768   0D9B D7            push a
1769   0D9C 11            mov a, b
1770   0D9D 26 02 00      mov b, $2
1771   0DA0 FD 39         mov c, b
1772   0DA2 9D            shl a, cl
1773   0DA3 27            mov b, a
1774   0DA4 E4            pop a
1775   0DA5             ; END SHIFT
1776   0DA5             ; START TERMS
1777   0DA5 D7            push a
1778   0DA6 11            mov a, b
1779   0DA7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1780   0DAA D7            push a
1781   0DAB DA            push d
1782   0DAC 26 01 00      mov b, $1
1783   0DAF E7            pop d
1784   0DB0 5A            add d, b
1785   0DB1 E4            pop a
1786   0DB2 32            mov bl, [d]
1787   0DB3 A7 00         mov bh, 0
1788   0DB5 D7            push a
1789   0DB6 11            mov a, b
1790   0DB7 26 30 00      mov b, $30
1791   0DBA 86            and a, b ; &
1792   0DBB 27            mov b, a
1793   0DBC E4            pop a
1794   0DBD             ; START SHIFT
1795   0DBD D7            push a
1796   0DBE 11            mov a, b
1797   0DBF 26 04 00      mov b, $4
1798   0DC2 FD 39         mov c, b
1799   0DC4 A5            ashr a, cl
1800   0DC5 27            mov b, a
1801   0DC6 E4            pop a
1802   0DC7             ; END SHIFT
1803   0DC7 56            add b, a
1804   0DC8 E4            pop a
1805   0DC9             ; END TERMS
1806   0DC9 E7            pop d
1807   0DCA FD 3E         mov [d], bl
1808   0DCC             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1809   0DCC FA F2 FF      lea d, [bp + -14] ; $output_buffer
1810   0DCF D7            push a
1811   0DD0 DA            push d
1812   0DD1 26 01 00      mov b, $1
1813   0DD4 E7            pop d
1814   0DD5 5A            add d, b
1815   0DD6 E4            pop a
1816   0DD7 DA            push d
1817   0DD8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1818   0DDB D7            push a
1819   0DDC DA            push d
1820   0DDD 26 01 00      mov b, $1
1821   0DE0 E7            pop d
1822   0DE1 5A            add d, b
1823   0DE2 E4            pop a
1824   0DE3 32            mov bl, [d]
1825   0DE4 A7 00         mov bh, 0
1826   0DE6 D7            push a
1827   0DE7 11            mov a, b
1828   0DE8 26 0F 00      mov b, $f
1829   0DEB 86            and a, b ; &
1830   0DEC 27            mov b, a
1831   0DED E4            pop a
1832   0DEE             ; START SHIFT
1833   0DEE D7            push a
1834   0DEF 11            mov a, b
1835   0DF0 26 04 00      mov b, $4
1836   0DF3 FD 39         mov c, b
1837   0DF5 9D            shl a, cl
1838   0DF6 27            mov b, a
1839   0DF7 E4            pop a
1840   0DF8             ; END SHIFT
1841   0DF8             ; START TERMS
1842   0DF8 D7            push a
1843   0DF9 11            mov a, b
1844   0DFA FA F5 FF      lea d, [bp + -11] ; $input_buffer
1845   0DFD D7            push a
1846   0DFE DA            push d
1847   0DFF 26 02 00      mov b, $2
1848   0E02 E7            pop d
1849   0E03 5A            add d, b
1850   0E04 E4            pop a
1851   0E05 32            mov bl, [d]
1852   0E06 A7 00         mov bh, 0
1853   0E08 D7            push a
1854   0E09 11            mov a, b
1855   0E0A 26 3C 00      mov b, $3c
1856   0E0D 86            and a, b ; &
1857   0E0E 27            mov b, a
1858   0E0F E4            pop a
1859   0E10             ; START SHIFT
1860   0E10 D7            push a
1861   0E11 11            mov a, b
1862   0E12 26 02 00      mov b, $2
1863   0E15 FD 39         mov c, b
1864   0E17 A5            ashr a, cl
1865   0E18 27            mov b, a
1866   0E19 E4            pop a
1867   0E1A             ; END SHIFT
1868   0E1A 56            add b, a
1869   0E1B E4            pop a
1870   0E1C             ; END TERMS
1871   0E1C E7            pop d
1872   0E1D FD 3E         mov [d], bl
1873   0E1F             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1874   0E1F FA F2 FF      lea d, [bp + -14] ; $output_buffer
1875   0E22 D7            push a
1876   0E23 DA            push d
1877   0E24 26 02 00      mov b, $2
1878   0E27 E7            pop d
1879   0E28 5A            add d, b
1880   0E29 E4            pop a
1881   0E2A DA            push d
1882   0E2B FA F5 FF      lea d, [bp + -11] ; $input_buffer
1883   0E2E D7            push a
1884   0E2F DA            push d
1885   0E30 26 02 00      mov b, $2
1886   0E33 E7            pop d
1887   0E34 5A            add d, b
1888   0E35 E4            pop a
1889   0E36 32            mov bl, [d]
1890   0E37 A7 00         mov bh, 0
1891   0E39 D7            push a
1892   0E3A 11            mov a, b
1893   0E3B 26 03 00      mov b, $3
1894   0E3E 86            and a, b ; &
1895   0E3F 27            mov b, a
1896   0E40 E4            pop a
1897   0E41             ; START SHIFT
1898   0E41 D7            push a
1899   0E42 11            mov a, b
1900   0E43 26 06 00      mov b, $6
1901   0E46 FD 39         mov c, b
1902   0E48 9D            shl a, cl
1903   0E49 27            mov b, a
1904   0E4A E4            pop a
1905   0E4B             ; END SHIFT
1906   0E4B             ; START TERMS
1907   0E4B D7            push a
1908   0E4C 11            mov a, b
1909   0E4D FA F5 FF      lea d, [bp + -11] ; $input_buffer
1910   0E50 D7            push a
1911   0E51 DA            push d
1912   0E52 26 03 00      mov b, $3
1913   0E55 E7            pop d
1914   0E56 5A            add d, b
1915   0E57 E4            pop a
1916   0E58 32            mov bl, [d]
1917   0E59 A7 00         mov bh, 0
1918   0E5B 56            add b, a
1919   0E5C E4            pop a
1920   0E5D             ; END TERMS
1921   0E5D E7            pop d
1922   0E5E FD 3E         mov [d], bl
1923   0E60             ;; for (i = 0; i < 3; i++) { 
1924   0E60             _for24_init:
1925   0E60 FA FF FF      lea d, [bp + -1] ; $i
1926   0E63 DA            push d
1927   0E64 26 00 00      mov b, $0
1928   0E67 E7            pop d
1929   0E68 FD 43         mov [d], b
1930   0E6A             _for24_cond:
1931   0E6A FA FF FF      lea d, [bp + -1] ; $i
1932   0E6D 2A            mov b, [d]
1933   0E6E             ; START RELATIONAL
1934   0E6E D7            push a
1935   0E6F 11            mov a, b
1936   0E70 26 03 00      mov b, $3
1937   0E73 B0            cmp a, b
1938   0E74 FD 73         slt ; <= (signed)
1939   0E76 E4            pop a
1940   0E77             ; END RELATIONAL
1941   0E77 C0 00 00      cmp b, 0
1942   0E7A C6 BA 0E      je _for24_exit
1943   0E7D             _for24_block:
1944   0E7D             ;; output[j++] = output_buffer[i]; 
1945   0E7D FA 07 00      lea d, [bp + 7] ; $output
1946   0E80 FD 2A         mov d, [d]
1947   0E82 D7            push a
1948   0E83 DA            push d
1949   0E84 FA FD FF      lea d, [bp + -3] ; $j
1950   0E87 2A            mov b, [d]
1951   0E88 D8            push b
1952   0E89 FD 77         inc b
1953   0E8B FA FD FF      lea d, [bp + -3] ; $j
1954   0E8E FD 43         mov [d], b
1955   0E90 E5            pop b
1956   0E91 E7            pop d
1957   0E92 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1958   0E96 E4            pop a
1959   0E97 DA            push d
1960   0E98 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1961   0E9B D7            push a
1962   0E9C DA            push d
1963   0E9D FA FF FF      lea d, [bp + -1] ; $i
1964   0EA0 2A            mov b, [d]
1965   0EA1 E7            pop d
1966   0EA2 5A            add d, b
1967   0EA3 E4            pop a
1968   0EA4 32            mov bl, [d]
1969   0EA5 A7 00         mov bh, 0
1970   0EA7 E7            pop d
1971   0EA8 FD 3E         mov [d], bl
1972   0EAA             _for24_update:
1973   0EAA FA FF FF      lea d, [bp + -1] ; $i
1974   0EAD 2A            mov b, [d]
1975   0EAE D8            push b
1976   0EAF FD 77         inc b
1977   0EB1 FA FF FF      lea d, [bp + -1] ; $i
1978   0EB4 FD 43         mov [d], b
1979   0EB6 E5            pop b
1980   0EB7 0A 6A 0E      jmp _for24_cond
1981   0EBA             _for24_exit:
1982   0EBA             ;; i = 0; 
1983   0EBA FA FF FF      lea d, [bp + -1] ; $i
1984   0EBD DA            push d
1985   0EBE 26 00 00      mov b, $0
1986   0EC1 E7            pop d
1987   0EC2 FD 43         mov [d], b
1988   0EC4 0A C7 0E      jmp _if22_exit
1989   0EC7             _if22_exit:
1990   0EC7 0A 89 0C      jmp _while21_cond
1991   0ECA             _while21_exit:
1992   0ECA             ;; if (i) { 
1993   0ECA             _if25_cond:
1994   0ECA FA FF FF      lea d, [bp + -1] ; $i
1995   0ECD 2A            mov b, [d]
1996   0ECE C0 00 00      cmp b, 0
1997   0ED1 C6 6C 10      je _if25_exit
1998   0ED4             _if25_true:
1999   0ED4             ;; for (k = i; k < 4; k++) { 
2000   0ED4             _for26_init:
2001   0ED4 FA FB FF      lea d, [bp + -5] ; $k
2002   0ED7 DA            push d
2003   0ED8 FA FF FF      lea d, [bp + -1] ; $i
2004   0EDB 2A            mov b, [d]
2005   0EDC E7            pop d
2006   0EDD FD 43         mov [d], b
2007   0EDF             _for26_cond:
2008   0EDF FA FB FF      lea d, [bp + -5] ; $k
2009   0EE2 2A            mov b, [d]
2010   0EE3             ; START RELATIONAL
2011   0EE3 D7            push a
2012   0EE4 11            mov a, b
2013   0EE5 26 04 00      mov b, $4
2014   0EE8 B0            cmp a, b
2015   0EE9 FD 73         slt ; <= (signed)
2016   0EEB E4            pop a
2017   0EEC             ; END RELATIONAL
2018   0EEC C0 00 00      cmp b, 0
2019   0EEF C6 15 0F      je _for26_exit
2020   0EF2             _for26_block:
2021   0EF2             ;; input_buffer[k] = 0; 
2022   0EF2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2023   0EF5 D7            push a
2024   0EF6 DA            push d
2025   0EF7 FA FB FF      lea d, [bp + -5] ; $k
2026   0EFA 2A            mov b, [d]
2027   0EFB E7            pop d
2028   0EFC 5A            add d, b
2029   0EFD E4            pop a
2030   0EFE DA            push d
2031   0EFF 26 00 00      mov b, $0
2032   0F02 E7            pop d
2033   0F03 FD 3E         mov [d], bl
2034   0F05             _for26_update:
2035   0F05 FA FB FF      lea d, [bp + -5] ; $k
2036   0F08 2A            mov b, [d]
2037   0F09 D8            push b
2038   0F0A FD 77         inc b
2039   0F0C FA FB FF      lea d, [bp + -5] ; $k
2040   0F0F FD 43         mov [d], b
2041   0F11 E5            pop b
2042   0F12 0A DF 0E      jmp _for26_cond
2043   0F15             _for26_exit:
2044   0F15             ;; for (k = 0; k < 4; k++) { 
2045   0F15             _for27_init:
2046   0F15 FA FB FF      lea d, [bp + -5] ; $k
2047   0F18 DA            push d
2048   0F19 26 00 00      mov b, $0
2049   0F1C E7            pop d
2050   0F1D FD 43         mov [d], b
2051   0F1F             _for27_cond:
2052   0F1F FA FB FF      lea d, [bp + -5] ; $k
2053   0F22 2A            mov b, [d]
2054   0F23             ; START RELATIONAL
2055   0F23 D7            push a
2056   0F24 11            mov a, b
2057   0F25 26 04 00      mov b, $4
2058   0F28 B0            cmp a, b
2059   0F29 FD 73         slt ; <= (signed)
2060   0F2B E4            pop a
2061   0F2C             ; END RELATIONAL
2062   0F2C C0 00 00      cmp b, 0
2063   0F2F C6 68 0F      je _for27_exit
2064   0F32             _for27_block:
2065   0F32             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2066   0F32 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2067   0F35 D7            push a
2068   0F36 DA            push d
2069   0F37 FA FB FF      lea d, [bp + -5] ; $k
2070   0F3A 2A            mov b, [d]
2071   0F3B E7            pop d
2072   0F3C 5A            add d, b
2073   0F3D E4            pop a
2074   0F3E DA            push d
2075   0F3F FA F5 FF      lea d, [bp + -11] ; $input_buffer
2076   0F42 D7            push a
2077   0F43 DA            push d
2078   0F44 FA FB FF      lea d, [bp + -5] ; $k
2079   0F47 2A            mov b, [d]
2080   0F48 E7            pop d
2081   0F49 5A            add d, b
2082   0F4A E4            pop a
2083   0F4B 32            mov bl, [d]
2084   0F4C A7 00         mov bh, 0
2085   0F4E DD            push bl
2086   0F4F 07 5D 0B      call base64_char_value
2087   0F52 51 01 00      add sp, 1
2088   0F55 E7            pop d
2089   0F56 FD 3E         mov [d], bl
2090   0F58             _for27_update:
2091   0F58 FA FB FF      lea d, [bp + -5] ; $k
2092   0F5B 2A            mov b, [d]
2093   0F5C D8            push b
2094   0F5D FD 77         inc b
2095   0F5F FA FB FF      lea d, [bp + -5] ; $k
2096   0F62 FD 43         mov [d], b
2097   0F64 E5            pop b
2098   0F65 0A 1F 0F      jmp _for27_cond
2099   0F68             _for27_exit:
2100   0F68             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2101   0F68 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2102   0F6B D7            push a
2103   0F6C DA            push d
2104   0F6D 26 00 00      mov b, $0
2105   0F70 E7            pop d
2106   0F71 5A            add d, b
2107   0F72 E4            pop a
2108   0F73 DA            push d
2109   0F74 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2110   0F77 D7            push a
2111   0F78 DA            push d
2112   0F79 26 00 00      mov b, $0
2113   0F7C E7            pop d
2114   0F7D 5A            add d, b
2115   0F7E E4            pop a
2116   0F7F 32            mov bl, [d]
2117   0F80 A7 00         mov bh, 0
2118   0F82             ; START SHIFT
2119   0F82 D7            push a
2120   0F83 11            mov a, b
2121   0F84 26 02 00      mov b, $2
2122   0F87 FD 39         mov c, b
2123   0F89 9D            shl a, cl
2124   0F8A 27            mov b, a
2125   0F8B E4            pop a
2126   0F8C             ; END SHIFT
2127   0F8C             ; START TERMS
2128   0F8C D7            push a
2129   0F8D 11            mov a, b
2130   0F8E FA F5 FF      lea d, [bp + -11] ; $input_buffer
2131   0F91 D7            push a
2132   0F92 DA            push d
2133   0F93 26 01 00      mov b, $1
2134   0F96 E7            pop d
2135   0F97 5A            add d, b
2136   0F98 E4            pop a
2137   0F99 32            mov bl, [d]
2138   0F9A A7 00         mov bh, 0
2139   0F9C D7            push a
2140   0F9D 11            mov a, b
2141   0F9E 26 30 00      mov b, $30
2142   0FA1 86            and a, b ; &
2143   0FA2 27            mov b, a
2144   0FA3 E4            pop a
2145   0FA4             ; START SHIFT
2146   0FA4 D7            push a
2147   0FA5 11            mov a, b
2148   0FA6 26 04 00      mov b, $4
2149   0FA9 FD 39         mov c, b
2150   0FAB A5            ashr a, cl
2151   0FAC 27            mov b, a
2152   0FAD E4            pop a
2153   0FAE             ; END SHIFT
2154   0FAE 56            add b, a
2155   0FAF E4            pop a
2156   0FB0             ; END TERMS
2157   0FB0 E7            pop d
2158   0FB1 FD 3E         mov [d], bl
2159   0FB3             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2160   0FB3 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2161   0FB6 D7            push a
2162   0FB7 DA            push d
2163   0FB8 26 01 00      mov b, $1
2164   0FBB E7            pop d
2165   0FBC 5A            add d, b
2166   0FBD E4            pop a
2167   0FBE DA            push d
2168   0FBF FA F5 FF      lea d, [bp + -11] ; $input_buffer
2169   0FC2 D7            push a
2170   0FC3 DA            push d
2171   0FC4 26 01 00      mov b, $1
2172   0FC7 E7            pop d
2173   0FC8 5A            add d, b
2174   0FC9 E4            pop a
2175   0FCA 32            mov bl, [d]
2176   0FCB A7 00         mov bh, 0
2177   0FCD D7            push a
2178   0FCE 11            mov a, b
2179   0FCF 26 0F 00      mov b, $f
2180   0FD2 86            and a, b ; &
2181   0FD3 27            mov b, a
2182   0FD4 E4            pop a
2183   0FD5             ; START SHIFT
2184   0FD5 D7            push a
2185   0FD6 11            mov a, b
2186   0FD7 26 04 00      mov b, $4
2187   0FDA FD 39         mov c, b
2188   0FDC 9D            shl a, cl
2189   0FDD 27            mov b, a
2190   0FDE E4            pop a
2191   0FDF             ; END SHIFT
2192   0FDF             ; START TERMS
2193   0FDF D7            push a
2194   0FE0 11            mov a, b
2195   0FE1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2196   0FE4 D7            push a
2197   0FE5 DA            push d
2198   0FE6 26 02 00      mov b, $2
2199   0FE9 E7            pop d
2200   0FEA 5A            add d, b
2201   0FEB E4            pop a
2202   0FEC 32            mov bl, [d]
2203   0FED A7 00         mov bh, 0
2204   0FEF D7            push a
2205   0FF0 11            mov a, b
2206   0FF1 26 3C 00      mov b, $3c
2207   0FF4 86            and a, b ; &
2208   0FF5 27            mov b, a
2209   0FF6 E4            pop a
2210   0FF7             ; START SHIFT
2211   0FF7 D7            push a
2212   0FF8 11            mov a, b
2213   0FF9 26 02 00      mov b, $2
2214   0FFC FD 39         mov c, b
2215   0FFE A5            ashr a, cl
2216   0FFF 27            mov b, a
2217   1000 E4            pop a
2218   1001             ; END SHIFT
2219   1001 56            add b, a
2220   1002 E4            pop a
2221   1003             ; END TERMS
2222   1003 E7            pop d
2223   1004 FD 3E         mov [d], bl
2224   1006             ;; for (k = 0; k < i - 1; k++) { 
2225   1006             _for28_init:
2226   1006 FA FB FF      lea d, [bp + -5] ; $k
2227   1009 DA            push d
2228   100A 26 00 00      mov b, $0
2229   100D E7            pop d
2230   100E FD 43         mov [d], b
2231   1010             _for28_cond:
2232   1010 FA FB FF      lea d, [bp + -5] ; $k
2233   1013 2A            mov b, [d]
2234   1014             ; START RELATIONAL
2235   1014 D7            push a
2236   1015 11            mov a, b
2237   1016 FA FF FF      lea d, [bp + -1] ; $i
2238   1019 2A            mov b, [d]
2239   101A             ; START TERMS
2240   101A D7            push a
2241   101B 11            mov a, b
2242   101C 26 01 00      mov b, $1
2243   101F 60            sub a, b
2244   1020 27            mov b, a
2245   1021 E4            pop a
2246   1022             ; END TERMS
2247   1022 B0            cmp a, b
2248   1023 FD 73         slt ; <= (signed)
2249   1025 E4            pop a
2250   1026             ; END RELATIONAL
2251   1026 C0 00 00      cmp b, 0
2252   1029 C6 69 10      je _for28_exit
2253   102C             _for28_block:
2254   102C             ;; output[j++] = output_buffer[k]; 
2255   102C FA 07 00      lea d, [bp + 7] ; $output
2256   102F FD 2A         mov d, [d]
2257   1031 D7            push a
2258   1032 DA            push d
2259   1033 FA FD FF      lea d, [bp + -3] ; $j
2260   1036 2A            mov b, [d]
2261   1037 D8            push b
2262   1038 FD 77         inc b
2263   103A FA FD FF      lea d, [bp + -3] ; $j
2264   103D FD 43         mov [d], b
2265   103F E5            pop b
2266   1040 E7            pop d
2267   1041 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2268   1045 E4            pop a
2269   1046 DA            push d
2270   1047 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2271   104A D7            push a
2272   104B DA            push d
2273   104C FA FB FF      lea d, [bp + -5] ; $k
2274   104F 2A            mov b, [d]
2275   1050 E7            pop d
2276   1051 5A            add d, b
2277   1052 E4            pop a
2278   1053 32            mov bl, [d]
2279   1054 A7 00         mov bh, 0
2280   1056 E7            pop d
2281   1057 FD 3E         mov [d], bl
2282   1059             _for28_update:
2283   1059 FA FB FF      lea d, [bp + -5] ; $k
2284   105C 2A            mov b, [d]
2285   105D D8            push b
2286   105E FD 77         inc b
2287   1060 FA FB FF      lea d, [bp + -5] ; $k
2288   1063 FD 43         mov [d], b
2289   1065 E5            pop b
2290   1066 0A 10 10      jmp _for28_cond
2291   1069             _for28_exit:
2292   1069 0A 6C 10      jmp _if25_exit
2293   106C             _if25_exit:
2294   106C             ;; output[j] = '\0'; 
2295   106C FA 07 00      lea d, [bp + 7] ; $output
2296   106F FD 2A         mov d, [d]
2297   1071 D7            push a
2298   1072 DA            push d
2299   1073 FA FD FF      lea d, [bp + -3] ; $j
2300   1076 2A            mov b, [d]
2301   1077 E7            pop d
2302   1078 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2303   107C E4            pop a
2304   107D DA            push d
2305   107E 26 00 00      mov b, $0
2306   1081 E7            pop d
2307   1082 FD 3E         mov [d], bl
2308   1084 F9            leave
2309   1085 09            ret
2310   1086             
2311   1086             va_start:
2312   1086 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2313   1089             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2314   1089 FA 05 00      lea d, [bp + 5] ; $argp
2315   108C FD 2A         mov d, [d]
2316   108E 58 00 00      add d, 0
2317   1091 DA            push d
2318   1092 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2319   1095 2A            mov b, [d]
2320   1096             ; START TERMS
2321   1096 D7            push a
2322   1097 11            mov a, b
2323   1098 26 02 00      mov b, 2
2324   109B 56            add b, a
2325   109C E4            pop a
2326   109D             ; END TERMS
2327   109D E7            pop d
2328   109E FD 43         mov [d], b
2329   10A0 F9            leave
2330   10A1 09            ret
2331   10A2             
2332   10A2             va_arg:
2333   10A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2334   10A5             ; $p 
2335   10A5 52 02 00      sub sp, 2
2336   10A8             ;; p = argp->current_arg; 
2337   10A8 FA FF FF      lea d, [bp + -1] ; $p
2338   10AB DA            push d
2339   10AC FA 05 00      lea d, [bp + 5] ; $argp
2340   10AF FD 2A         mov d, [d]
2341   10B1 58 00 00      add d, 0
2342   10B4 2A            mov b, [d]
2343   10B5 E7            pop d
2344   10B6 FD 43         mov [d], b
2345   10B8             ;; argp->current_arg = argp->current_arg + size; 
2346   10B8 FA 05 00      lea d, [bp + 5] ; $argp
2347   10BB FD 2A         mov d, [d]
2348   10BD 58 00 00      add d, 0
2349   10C0 DA            push d
2350   10C1 FA 05 00      lea d, [bp + 5] ; $argp
2351   10C4 FD 2A         mov d, [d]
2352   10C6 58 00 00      add d, 0
2353   10C9 2A            mov b, [d]
2354   10CA             ; START TERMS
2355   10CA D7            push a
2356   10CB 11            mov a, b
2357   10CC FA 07 00      lea d, [bp + 7] ; $size
2358   10CF 2A            mov b, [d]
2359   10D0 56            add b, a
2360   10D1 E4            pop a
2361   10D2             ; END TERMS
2362   10D2 E7            pop d
2363   10D3 FD 43         mov [d], b
2364   10D5             ;; return p; 
2365   10D5 FA FF FF      lea d, [bp + -1] ; $p
2366   10D8 2A            mov b, [d]
2367   10D9 F9            leave
2368   10DA 09            ret
2369   10DB             
2370   10DB             va_end:
2371   10DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2372   10DE             ;; argp->current_arg =   0   ; 
2373   10DE FA 05 00      lea d, [bp + 5] ; $argp
2374   10E1 FD 2A         mov d, [d]
2375   10E3 58 00 00      add d, 0
2376   10E6 DA            push d
2377   10E7 26 00 00      mov b, $0
2378   10EA E7            pop d
2379   10EB FD 43         mov [d], b
2380   10ED F9            leave
2381   10EE 09            ret
2382   10EF             
2383   10EF             scanf:
2384   10EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2385   10F2             ; $p 
2386   10F2             ; $format_p 
2387   10F2             ; $c 
2388   10F2             ; $i 
2389   10F2             ; $input_string 
2390   10F2 52 07 02      sub sp, 519
2391   10F5             ;; format_p = format; 
2392   10F5 FA FD FF      lea d, [bp + -3] ; $format_p
2393   10F8 DA            push d
2394   10F9 FA 05 00      lea d, [bp + 5] ; $format
2395   10FC 2A            mov b, [d]
2396   10FD E7            pop d
2397   10FE FD 43         mov [d], b
2398   1100             ;; p = &format + 2; 
2399   1100 FA FF FF      lea d, [bp + -1] ; $p
2400   1103 DA            push d
2401   1104 FA 05 00      lea d, [bp + 5] ; $format
2402   1107 2D            mov b, d
2403   1108             ; START TERMS
2404   1108 D7            push a
2405   1109 11            mov a, b
2406   110A 26 02 00      mov b, $2
2407   110D 56            add b, a
2408   110E E4            pop a
2409   110F             ; END TERMS
2410   110F E7            pop d
2411   1110 FD 43         mov [d], b
2412   1112             ;; for(;;){ 
2413   1112             _for29_init:
2414   1112             _for29_cond:
2415   1112             _for29_block:
2416   1112             ;; if(!*format_p) break; 
2417   1112             _if30_cond:
2418   1112 FA FD FF      lea d, [bp + -3] ; $format_p
2419   1115 2A            mov b, [d]
2420   1116 74            mov d, b
2421   1117 32            mov bl, [d]
2422   1118 A7 00         mov bh, 0
2423   111A C0 00 00      cmp b, 0
2424   111D FD 71         seq ; !
2425   111F C0 00 00      cmp b, 0
2426   1122 C6 2B 11      je _if30_else
2427   1125             _if30_true:
2428   1125             ;; break; 
2429   1125 0A 28 13      jmp _for29_exit ; for break
2430   1128 0A 25 13      jmp _if30_exit
2431   112B             _if30_else:
2432   112B             ;; if(*format_p == '%'){ 
2433   112B             _if31_cond:
2434   112B FA FD FF      lea d, [bp + -3] ; $format_p
2435   112E 2A            mov b, [d]
2436   112F 74            mov d, b
2437   1130 32            mov bl, [d]
2438   1131 A7 00         mov bh, 0
2439   1133             ; START RELATIONAL
2440   1133 D7            push a
2441   1134 11            mov a, b
2442   1135 26 25 00      mov b, $25
2443   1138 B0            cmp a, b
2444   1139 FD 71         seq ; ==
2445   113B E4            pop a
2446   113C             ; END RELATIONAL
2447   113C C0 00 00      cmp b, 0
2448   113F C6 09 13      je _if31_else
2449   1142             _if31_true:
2450   1142             ;; format_p++; 
2451   1142 FA FD FF      lea d, [bp + -3] ; $format_p
2452   1145 2A            mov b, [d]
2453   1146 D8            push b
2454   1147 FD 77         inc b
2455   1149 FA FD FF      lea d, [bp + -3] ; $format_p
2456   114C FD 43         mov [d], b
2457   114E E5            pop b
2458   114F             ;; switch(*format_p){ 
2459   114F             _switch32_expr:
2460   114F FA FD FF      lea d, [bp + -3] ; $format_p
2461   1152 2A            mov b, [d]
2462   1153 74            mov d, b
2463   1154 32            mov bl, [d]
2464   1155 A7 00         mov bh, 0
2465   1157             _switch32_comparisons:
2466   1157 C1 6C         cmp bl, $6c
2467   1159 C6 85 11      je _switch32_case0
2468   115C C1 4C         cmp bl, $4c
2469   115E C6 85 11      je _switch32_case1
2470   1161 C1 64         cmp bl, $64
2471   1163 C6 17 12      je _switch32_case2
2472   1166 C1 69         cmp bl, $69
2473   1168 C6 17 12      je _switch32_case3
2474   116B C1 75         cmp bl, $75
2475   116D C6 44 12      je _switch32_case4
2476   1170 C1 78         cmp bl, $78
2477   1172 C6 71 12      je _switch32_case5
2478   1175 C1 63         cmp bl, $63
2479   1177 C6 86 12      je _switch32_case6
2480   117A C1 73         cmp bl, $73
2481   117C C6 B5 12      je _switch32_case7
2482   117F 0A ED 12      jmp _switch32_default
2483   1182 0A F9 12      jmp _switch32_exit
2484   1185             _switch32_case0:
2485   1185             _switch32_case1:
2486   1185             ;; format_p++; 
2487   1185 FA FD FF      lea d, [bp + -3] ; $format_p
2488   1188 2A            mov b, [d]
2489   1189 D8            push b
2490   118A FD 77         inc b
2491   118C FA FD FF      lea d, [bp + -3] ; $format_p
2492   118F FD 43         mov [d], b
2493   1191 E5            pop b
2494   1192             ;; if(*format_p == 'd' || *format_p == 'i'); 
2495   1192             _if33_cond:
2496   1192 FA FD FF      lea d, [bp + -3] ; $format_p
2497   1195 2A            mov b, [d]
2498   1196 74            mov d, b
2499   1197 32            mov bl, [d]
2500   1198 A7 00         mov bh, 0
2501   119A             ; START RELATIONAL
2502   119A D7            push a
2503   119B 11            mov a, b
2504   119C 26 64 00      mov b, $64
2505   119F B0            cmp a, b
2506   11A0 FD 71         seq ; ==
2507   11A2 E4            pop a
2508   11A3             ; END RELATIONAL
2509   11A3 D7            push a
2510   11A4 11            mov a, b
2511   11A5 FA FD FF      lea d, [bp + -3] ; $format_p
2512   11A8 2A            mov b, [d]
2513   11A9 74            mov d, b
2514   11AA 32            mov bl, [d]
2515   11AB A7 00         mov bh, 0
2516   11AD             ; START RELATIONAL
2517   11AD D7            push a
2518   11AE 11            mov a, b
2519   11AF 26 69 00      mov b, $69
2520   11B2 B0            cmp a, b
2521   11B3 FD 71         seq ; ==
2522   11B5 E4            pop a
2523   11B6             ; END RELATIONAL
2524   11B6 FD A8         sor a, b ; ||
2525   11B8 E4            pop a
2526   11B9 C0 00 00      cmp b, 0
2527   11BC C6 C2 11      je _if33_else
2528   11BF             _if33_true:
2529   11BF             ;; ; 
2530   11BF 0A 02 12      jmp _if33_exit
2531   11C2             _if33_else:
2532   11C2             ;; if(*format_p == 'u'); 
2533   11C2             _if34_cond:
2534   11C2 FA FD FF      lea d, [bp + -3] ; $format_p
2535   11C5 2A            mov b, [d]
2536   11C6 74            mov d, b
2537   11C7 32            mov bl, [d]
2538   11C8 A7 00         mov bh, 0
2539   11CA             ; START RELATIONAL
2540   11CA D7            push a
2541   11CB 11            mov a, b
2542   11CC 26 75 00      mov b, $75
2543   11CF B0            cmp a, b
2544   11D0 FD 71         seq ; ==
2545   11D2 E4            pop a
2546   11D3             ; END RELATIONAL
2547   11D3 C0 00 00      cmp b, 0
2548   11D6 C6 DC 11      je _if34_else
2549   11D9             _if34_true:
2550   11D9             ;; ; 
2551   11D9 0A 02 12      jmp _if34_exit
2552   11DC             _if34_else:
2553   11DC             ;; if(*format_p == 'x'); 
2554   11DC             _if35_cond:
2555   11DC FA FD FF      lea d, [bp + -3] ; $format_p
2556   11DF 2A            mov b, [d]
2557   11E0 74            mov d, b
2558   11E1 32            mov bl, [d]
2559   11E2 A7 00         mov bh, 0
2560   11E4             ; START RELATIONAL
2561   11E4 D7            push a
2562   11E5 11            mov a, b
2563   11E6 26 78 00      mov b, $78
2564   11E9 B0            cmp a, b
2565   11EA FD 71         seq ; ==
2566   11EC E4            pop a
2567   11ED             ; END RELATIONAL
2568   11ED C0 00 00      cmp b, 0
2569   11F0 C6 F6 11      je _if35_else
2570   11F3             _if35_true:
2571   11F3             ;; ; 
2572   11F3 0A 02 12      jmp _if35_exit
2573   11F6             _if35_else:
2574   11F6             ;; err("Unexpected format in printf."); 
2575   11F6 26 2A 20      mov b, __s3 ; "Unexpected format in printf."
2576   11F9 FD AB         swp b
2577   11FB D8            push b
2578   11FC 07 71 15      call err
2579   11FF 51 02 00      add sp, 2
2580   1202             _if35_exit:
2581   1202             _if34_exit:
2582   1202             _if33_exit:
2583   1202             ;; p = p + 4; 
2584   1202 FA FF FF      lea d, [bp + -1] ; $p
2585   1205 DA            push d
2586   1206 FA FF FF      lea d, [bp + -1] ; $p
2587   1209 2A            mov b, [d]
2588   120A             ; START TERMS
2589   120A D7            push a
2590   120B 11            mov a, b
2591   120C 26 04 00      mov b, $4
2592   120F 56            add b, a
2593   1210 E4            pop a
2594   1211             ; END TERMS
2595   1211 E7            pop d
2596   1212 FD 43         mov [d], b
2597   1214             ;; break; 
2598   1214 0A F9 12      jmp _switch32_exit ; case break
2599   1217             _switch32_case2:
2600   1217             _switch32_case3:
2601   1217             ;; i = scann(); 
2602   1217 FA FA FF      lea d, [bp + -6] ; $i
2603   121A DA            push d
2604   121B 07 3F 1B      call scann
2605   121E E7            pop d
2606   121F FD 43         mov [d], b
2607   1221             ;; **(int **)p = i; 
2608   1221 FA FF FF      lea d, [bp + -1] ; $p
2609   1224 2A            mov b, [d]
2610   1225 74            mov d, b
2611   1226 2A            mov b, [d]
2612   1227 D8            push b
2613   1228 FA FA FF      lea d, [bp + -6] ; $i
2614   122B 2A            mov b, [d]
2615   122C E7            pop d
2616   122D FD 43         mov [d], b
2617   122F             ;; p = p + 2; 
2618   122F FA FF FF      lea d, [bp + -1] ; $p
2619   1232 DA            push d
2620   1233 FA FF FF      lea d, [bp + -1] ; $p
2621   1236 2A            mov b, [d]
2622   1237             ; START TERMS
2623   1237 D7            push a
2624   1238 11            mov a, b
2625   1239 26 02 00      mov b, $2
2626   123C 56            add b, a
2627   123D E4            pop a
2628   123E             ; END TERMS
2629   123E E7            pop d
2630   123F FD 43         mov [d], b
2631   1241             ;; break; 
2632   1241 0A F9 12      jmp _switch32_exit ; case break
2633   1244             _switch32_case4:
2634   1244             ;; i = scann(); 
2635   1244 FA FA FF      lea d, [bp + -6] ; $i
2636   1247 DA            push d
2637   1248 07 3F 1B      call scann
2638   124B E7            pop d
2639   124C FD 43         mov [d], b
2640   124E             ;; **(int **)p = i; 
2641   124E FA FF FF      lea d, [bp + -1] ; $p
2642   1251 2A            mov b, [d]
2643   1252 74            mov d, b
2644   1253 2A            mov b, [d]
2645   1254 D8            push b
2646   1255 FA FA FF      lea d, [bp + -6] ; $i
2647   1258 2A            mov b, [d]
2648   1259 E7            pop d
2649   125A FD 43         mov [d], b
2650   125C             ;; p = p + 2; 
2651   125C FA FF FF      lea d, [bp + -1] ; $p
2652   125F DA            push d
2653   1260 FA FF FF      lea d, [bp + -1] ; $p
2654   1263 2A            mov b, [d]
2655   1264             ; START TERMS
2656   1264 D7            push a
2657   1265 11            mov a, b
2658   1266 26 02 00      mov b, $2
2659   1269 56            add b, a
2660   126A E4            pop a
2661   126B             ; END TERMS
2662   126B E7            pop d
2663   126C FD 43         mov [d], b
2664   126E             ;; break; 
2665   126E 0A F9 12      jmp _switch32_exit ; case break
2666   1271             _switch32_case5:
2667   1271             ;; p = p + 2; 
2668   1271 FA FF FF      lea d, [bp + -1] ; $p
2669   1274 DA            push d
2670   1275 FA FF FF      lea d, [bp + -1] ; $p
2671   1278 2A            mov b, [d]
2672   1279             ; START TERMS
2673   1279 D7            push a
2674   127A 11            mov a, b
2675   127B 26 02 00      mov b, $2
2676   127E 56            add b, a
2677   127F E4            pop a
2678   1280             ; END TERMS
2679   1280 E7            pop d
2680   1281 FD 43         mov [d], b
2681   1283             ;; break; 
2682   1283 0A F9 12      jmp _switch32_exit ; case break
2683   1286             _switch32_case6:
2684   1286             ;; c = getchar(); 
2685   1286 FA FC FF      lea d, [bp + -4] ; $c
2686   1289 DA            push d
2687   128A 07 29 1B      call getchar
2688   128D E7            pop d
2689   128E FD 3E         mov [d], bl
2690   1290             ;; **(char **)p = c; 
2691   1290 FA FF FF      lea d, [bp + -1] ; $p
2692   1293 2A            mov b, [d]
2693   1294 74            mov d, b
2694   1295 2A            mov b, [d]
2695   1296 D8            push b
2696   1297 FA FC FF      lea d, [bp + -4] ; $c
2697   129A 32            mov bl, [d]
2698   129B A7 00         mov bh, 0
2699   129D E7            pop d
2700   129E FD 43         mov [d], b
2701   12A0             ;; p = p + 2; 
2702   12A0 FA FF FF      lea d, [bp + -1] ; $p
2703   12A3 DA            push d
2704   12A4 FA FF FF      lea d, [bp + -1] ; $p
2705   12A7 2A            mov b, [d]
2706   12A8             ; START TERMS
2707   12A8 D7            push a
2708   12A9 11            mov a, b
2709   12AA 26 02 00      mov b, $2
2710   12AD 56            add b, a
2711   12AE E4            pop a
2712   12AF             ; END TERMS
2713   12AF E7            pop d
2714   12B0 FD 43         mov [d], b
2715   12B2             ;; break; 
2716   12B2 0A F9 12      jmp _switch32_exit ; case break
2717   12B5             _switch32_case7:
2718   12B5             ;; gets(input_string); 
2719   12B5 FA FA FD      lea d, [bp + -518] ; $input_string
2720   12B8 2D            mov b, d
2721   12B9 FD AB         swp b
2722   12BB D8            push b
2723   12BC 07 F3 16      call gets
2724   12BF 51 02 00      add sp, 2
2725   12C2             ;; strcpy(*(char **)p, input_string); 
2726   12C2 FA FA FD      lea d, [bp + -518] ; $input_string
2727   12C5 2D            mov b, d
2728   12C6 FD AB         swp b
2729   12C8 D8            push b
2730   12C9 FA FF FF      lea d, [bp + -1] ; $p
2731   12CC 2A            mov b, [d]
2732   12CD 74            mov d, b
2733   12CE 2A            mov b, [d]
2734   12CF FD AB         swp b
2735   12D1 D8            push b
2736   12D2 07 4D 04      call strcpy
2737   12D5 51 04 00      add sp, 4
2738   12D8             ;; p = p + 2; 
2739   12D8 FA FF FF      lea d, [bp + -1] ; $p
2740   12DB DA            push d
2741   12DC FA FF FF      lea d, [bp + -1] ; $p
2742   12DF 2A            mov b, [d]
2743   12E0             ; START TERMS
2744   12E0 D7            push a
2745   12E1 11            mov a, b
2746   12E2 26 02 00      mov b, $2
2747   12E5 56            add b, a
2748   12E6 E4            pop a
2749   12E7             ; END TERMS
2750   12E7 E7            pop d
2751   12E8 FD 43         mov [d], b
2752   12EA             ;; break; 
2753   12EA 0A F9 12      jmp _switch32_exit ; case break
2754   12ED             _switch32_default:
2755   12ED             ;; print("Error: Unknown argument type.\n"); 
2756   12ED 26 47 20      mov b, __s4 ; "Error: Unknown argument type.\n"
2757   12F0 FD AB         swp b
2758   12F2 D8            push b
2759   12F3 07 64 1B      call print
2760   12F6 51 02 00      add sp, 2
2761   12F9             _switch32_exit:
2762   12F9             ;; format_p++; 
2763   12F9 FA FD FF      lea d, [bp + -3] ; $format_p
2764   12FC 2A            mov b, [d]
2765   12FD D8            push b
2766   12FE FD 77         inc b
2767   1300 FA FD FF      lea d, [bp + -3] ; $format_p
2768   1303 FD 43         mov [d], b
2769   1305 E5            pop b
2770   1306 0A 25 13      jmp _if31_exit
2771   1309             _if31_else:
2772   1309             ;; putchar(*format_p); 
2773   1309 FA FD FF      lea d, [bp + -3] ; $format_p
2774   130C 2A            mov b, [d]
2775   130D 74            mov d, b
2776   130E 32            mov bl, [d]
2777   130F A7 00         mov bh, 0
2778   1311 DD            push bl
2779   1312 07 1C 1B      call putchar
2780   1315 51 01 00      add sp, 1
2781   1318             ;; format_p++; 
2782   1318 FA FD FF      lea d, [bp + -3] ; $format_p
2783   131B 2A            mov b, [d]
2784   131C D8            push b
2785   131D FD 77         inc b
2786   131F FA FD FF      lea d, [bp + -3] ; $format_p
2787   1322 FD 43         mov [d], b
2788   1324 E5            pop b
2789   1325             _if31_exit:
2790   1325             _if30_exit:
2791   1325             _for29_update:
2792   1325 0A 12 11      jmp _for29_cond
2793   1328             _for29_exit:
2794   1328 F9            leave
2795   1329 09            ret
2796   132A             
2797   132A             printf:
2798   132A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2799   132D             ; $p 
2800   132D             ; $format_p 
2801   132D 52 04 00      sub sp, 4
2802   1330             ;; format_p = format; 
2803   1330 FA FD FF      lea d, [bp + -3] ; $format_p
2804   1333 DA            push d
2805   1334 FA 05 00      lea d, [bp + 5] ; $format
2806   1337 2A            mov b, [d]
2807   1338 E7            pop d
2808   1339 FD 43         mov [d], b
2809   133B             ;; p = &format + 2; 
2810   133B FA FF FF      lea d, [bp + -1] ; $p
2811   133E DA            push d
2812   133F FA 05 00      lea d, [bp + 5] ; $format
2813   1342 2D            mov b, d
2814   1343             ; START TERMS
2815   1343 D7            push a
2816   1344 11            mov a, b
2817   1345 26 02 00      mov b, $2
2818   1348 56            add b, a
2819   1349 E4            pop a
2820   134A             ; END TERMS
2821   134A E7            pop d
2822   134B FD 43         mov [d], b
2823   134D             ;; for(;;){ 
2824   134D             _for36_init:
2825   134D             _for36_cond:
2826   134D             _for36_block:
2827   134D             ;; if(!*format_p) break; 
2828   134D             _if37_cond:
2829   134D FA FD FF      lea d, [bp + -3] ; $format_p
2830   1350 2A            mov b, [d]
2831   1351 74            mov d, b
2832   1352 32            mov bl, [d]
2833   1353 A7 00         mov bh, 0
2834   1355 C0 00 00      cmp b, 0
2835   1358 FD 71         seq ; !
2836   135A C0 00 00      cmp b, 0
2837   135D C6 66 13      je _if37_else
2838   1360             _if37_true:
2839   1360             ;; break; 
2840   1360 0A 6F 15      jmp _for36_exit ; for break
2841   1363 0A 6C 15      jmp _if37_exit
2842   1366             _if37_else:
2843   1366             ;; if(*format_p == '%'){ 
2844   1366             _if38_cond:
2845   1366 FA FD FF      lea d, [bp + -3] ; $format_p
2846   1369 2A            mov b, [d]
2847   136A 74            mov d, b
2848   136B 32            mov bl, [d]
2849   136C A7 00         mov bh, 0
2850   136E             ; START RELATIONAL
2851   136E D7            push a
2852   136F 11            mov a, b
2853   1370 26 25 00      mov b, $25
2854   1373 B0            cmp a, b
2855   1374 FD 71         seq ; ==
2856   1376 E4            pop a
2857   1377             ; END RELATIONAL
2858   1377 C0 00 00      cmp b, 0
2859   137A C6 50 15      je _if38_else
2860   137D             _if38_true:
2861   137D             ;; format_p++; 
2862   137D FA FD FF      lea d, [bp + -3] ; $format_p
2863   1380 2A            mov b, [d]
2864   1381 D8            push b
2865   1382 FD 77         inc b
2866   1384 FA FD FF      lea d, [bp + -3] ; $format_p
2867   1387 FD 43         mov [d], b
2868   1389 E5            pop b
2869   138A             ;; switch(*format_p){ 
2870   138A             _switch39_expr:
2871   138A FA FD FF      lea d, [bp + -3] ; $format_p
2872   138D 2A            mov b, [d]
2873   138E 74            mov d, b
2874   138F 32            mov bl, [d]
2875   1390 A7 00         mov bh, 0
2876   1392             _switch39_comparisons:
2877   1392 C1 6C         cmp bl, $6c
2878   1394 C6 C0 13      je _switch39_case0
2879   1397 C1 4C         cmp bl, $4c
2880   1399 C6 C0 13      je _switch39_case1
2881   139C C1 64         cmp bl, $64
2882   139E C6 90 14      je _switch39_case2
2883   13A1 C1 69         cmp bl, $69
2884   13A3 C6 90 14      je _switch39_case3
2885   13A6 C1 75         cmp bl, $75
2886   13A8 C6 B4 14      je _switch39_case4
2887   13AB C1 78         cmp bl, $78
2888   13AD C6 D8 14      je _switch39_case5
2889   13B0 C1 63         cmp bl, $63
2890   13B2 C6 F6 14      je _switch39_case6
2891   13B5 C1 73         cmp bl, $73
2892   13B7 C6 15 15      je _switch39_case7
2893   13BA 0A 34 15      jmp _switch39_default
2894   13BD 0A 40 15      jmp _switch39_exit
2895   13C0             _switch39_case0:
2896   13C0             _switch39_case1:
2897   13C0             ;; format_p++; 
2898   13C0 FA FD FF      lea d, [bp + -3] ; $format_p
2899   13C3 2A            mov b, [d]
2900   13C4 D8            push b
2901   13C5 FD 77         inc b
2902   13C7 FA FD FF      lea d, [bp + -3] ; $format_p
2903   13CA FD 43         mov [d], b
2904   13CC E5            pop b
2905   13CD             ;; if(*format_p == 'd' || *format_p == 'i') 
2906   13CD             _if40_cond:
2907   13CD FA FD FF      lea d, [bp + -3] ; $format_p
2908   13D0 2A            mov b, [d]
2909   13D1 74            mov d, b
2910   13D2 32            mov bl, [d]
2911   13D3 A7 00         mov bh, 0
2912   13D5             ; START RELATIONAL
2913   13D5 D7            push a
2914   13D6 11            mov a, b
2915   13D7 26 64 00      mov b, $64
2916   13DA B0            cmp a, b
2917   13DB FD 71         seq ; ==
2918   13DD E4            pop a
2919   13DE             ; END RELATIONAL
2920   13DE D7            push a
2921   13DF 11            mov a, b
2922   13E0 FA FD FF      lea d, [bp + -3] ; $format_p
2923   13E3 2A            mov b, [d]
2924   13E4 74            mov d, b
2925   13E5 32            mov bl, [d]
2926   13E6 A7 00         mov bh, 0
2927   13E8             ; START RELATIONAL
2928   13E8 D7            push a
2929   13E9 11            mov a, b
2930   13EA 26 69 00      mov b, $69
2931   13ED B0            cmp a, b
2932   13EE FD 71         seq ; ==
2933   13F0 E4            pop a
2934   13F1             ; END RELATIONAL
2935   13F1 FD A8         sor a, b ; ||
2936   13F3 E4            pop a
2937   13F4 C0 00 00      cmp b, 0
2938   13F7 C6 0E 14      je _if40_else
2939   13FA             _if40_true:
2940   13FA             ;; print_signed_long(*(long *)p); 
2941   13FA FD 79         mov g, b
2942   13FC 28            mov b, c
2943   13FD FD AB         swp b
2944   13FF D8            push b
2945   1400 FD 27         mov b, g
2946   1402 FD AB         swp b
2947   1404 D8            push b
2948   1405 07 FD 17      call print_signed_long
2949   1408 51 04 00      add sp, 4
2950   140B 0A 7B 14      jmp _if40_exit
2951   140E             _if40_else:
2952   140E             ;; if(*format_p == 'u') 
2953   140E             _if41_cond:
2954   140E FA FD FF      lea d, [bp + -3] ; $format_p
2955   1411 2A            mov b, [d]
2956   1412 74            mov d, b
2957   1413 32            mov bl, [d]
2958   1414 A7 00         mov bh, 0
2959   1416             ; START RELATIONAL
2960   1416 D7            push a
2961   1417 11            mov a, b
2962   1418 26 75 00      mov b, $75
2963   141B B0            cmp a, b
2964   141C FD 71         seq ; ==
2965   141E E4            pop a
2966   141F             ; END RELATIONAL
2967   141F C0 00 00      cmp b, 0
2968   1422 C6 39 14      je _if41_else
2969   1425             _if41_true:
2970   1425             ;; print_unsigned_long(*(unsigned long *)p); 
2971   1425 FD 79         mov g, b
2972   1427 28            mov b, c
2973   1428 FD AB         swp b
2974   142A D8            push b
2975   142B FD 27         mov b, g
2976   142D FD AB         swp b
2977   142F D8            push b
2978   1430 07 4F 19      call print_unsigned_long
2979   1433 51 04 00      add sp, 4
2980   1436 0A 7B 14      jmp _if41_exit
2981   1439             _if41_else:
2982   1439             ;; if(*format_p == 'x') 
2983   1439             _if42_cond:
2984   1439 FA FD FF      lea d, [bp + -3] ; $format_p
2985   143C 2A            mov b, [d]
2986   143D 74            mov d, b
2987   143E 32            mov bl, [d]
2988   143F A7 00         mov bh, 0
2989   1441             ; START RELATIONAL
2990   1441 D7            push a
2991   1442 11            mov a, b
2992   1443 26 78 00      mov b, $78
2993   1446 B0            cmp a, b
2994   1447 FD 71         seq ; ==
2995   1449 E4            pop a
2996   144A             ; END RELATIONAL
2997   144A C0 00 00      cmp b, 0
2998   144D C6 6F 14      je _if42_else
2999   1450             _if42_true:
3000   1450             ;; printx32(*(long int *)p); 
3001   1450 FA FF FF      lea d, [bp + -1] ; $p
3002   1453 2A            mov b, [d]
3003   1454 74            mov d, b
3004   1455 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3005   1458 FD 39         mov c, b ; And place it into C
3006   145A 2A            mov b, [d] ; Lower Word in B
3007   145B FD 79         mov g, b
3008   145D 28            mov b, c
3009   145E FD AB         swp b
3010   1460 D8            push b
3011   1461 FD 27         mov b, g
3012   1463 FD AB         swp b
3013   1465 D8            push b
3014   1466 07 86 15      call printx32
3015   1469 51 04 00      add sp, 4
3016   146C 0A 7B 14      jmp _if42_exit
3017   146F             _if42_else:
3018   146F             ;; err("Unexpected format in printf."); 
3019   146F 26 2A 20      mov b, __s3 ; "Unexpected format in printf."
3020   1472 FD AB         swp b
3021   1474 D8            push b
3022   1475 07 71 15      call err
3023   1478 51 02 00      add sp, 2
3024   147B             _if42_exit:
3025   147B             _if41_exit:
3026   147B             _if40_exit:
3027   147B             ;; p = p + 4; 
3028   147B FA FF FF      lea d, [bp + -1] ; $p
3029   147E DA            push d
3030   147F FA FF FF      lea d, [bp + -1] ; $p
3031   1482 2A            mov b, [d]
3032   1483             ; START TERMS
3033   1483 D7            push a
3034   1484 11            mov a, b
3035   1485 26 04 00      mov b, $4
3036   1488 56            add b, a
3037   1489 E4            pop a
3038   148A             ; END TERMS
3039   148A E7            pop d
3040   148B FD 43         mov [d], b
3041   148D             ;; break; 
3042   148D 0A 40 15      jmp _switch39_exit ; case break
3043   1490             _switch39_case2:
3044   1490             _switch39_case3:
3045   1490             ;; print_signed(*(int*)p); 
3046   1490 FA FF FF      lea d, [bp + -1] ; $p
3047   1493 2A            mov b, [d]
3048   1494 74            mov d, b
3049   1495 2A            mov b, [d]
3050   1496 FD AB         swp b
3051   1498 D8            push b
3052   1499 07 0D 17      call print_signed
3053   149C 51 02 00      add sp, 2
3054   149F             ;; p = p + 2; 
3055   149F FA FF FF      lea d, [bp + -1] ; $p
3056   14A2 DA            push d
3057   14A3 FA FF FF      lea d, [bp + -1] ; $p
3058   14A6 2A            mov b, [d]
3059   14A7             ; START TERMS
3060   14A7 D7            push a
3061   14A8 11            mov a, b
3062   14A9 26 02 00      mov b, $2
3063   14AC 56            add b, a
3064   14AD E4            pop a
3065   14AE             ; END TERMS
3066   14AE E7            pop d
3067   14AF FD 43         mov [d], b
3068   14B1             ;; break; 
3069   14B1 0A 40 15      jmp _switch39_exit ; case break
3070   14B4             _switch39_case4:
3071   14B4             ;; print_unsigned(*(unsigned int*)p); 
3072   14B4 FA FF FF      lea d, [bp + -1] ; $p
3073   14B7 2A            mov b, [d]
3074   14B8 74            mov d, b
3075   14B9 2A            mov b, [d]
3076   14BA FD AB         swp b
3077   14BC D8            push b
3078   14BD 07 4C 1A      call print_unsigned
3079   14C0 51 02 00      add sp, 2
3080   14C3             ;; p = p + 2; 
3081   14C3 FA FF FF      lea d, [bp + -1] ; $p
3082   14C6 DA            push d
3083   14C7 FA FF FF      lea d, [bp + -1] ; $p
3084   14CA 2A            mov b, [d]
3085   14CB             ; START TERMS
3086   14CB D7            push a
3087   14CC 11            mov a, b
3088   14CD 26 02 00      mov b, $2
3089   14D0 56            add b, a
3090   14D1 E4            pop a
3091   14D2             ; END TERMS
3092   14D2 E7            pop d
3093   14D3 FD 43         mov [d], b
3094   14D5             ;; break; 
3095   14D5 0A 40 15      jmp _switch39_exit ; case break
3096   14D8             _switch39_case5:
3097   14D8             
3098   14D8             ; --- BEGIN INLINE ASM BLOCK
3099   14D8 FA FF FF      lea d, [bp + -1] ; $p
3100   14DB FD 2A         mov d, [d]
3101   14DD 2A            mov b, [d]
3102   14DE 07 9E 1E      call print_u16x
3103   14E1             ; --- END INLINE ASM BLOCK
3104   14E1             
3105   14E1             ;; p = p + 2; 
3106   14E1 FA FF FF      lea d, [bp + -1] ; $p
3107   14E4 DA            push d
3108   14E5 FA FF FF      lea d, [bp + -1] ; $p
3109   14E8 2A            mov b, [d]
3110   14E9             ; START TERMS
3111   14E9 D7            push a
3112   14EA 11            mov a, b
3113   14EB 26 02 00      mov b, $2
3114   14EE 56            add b, a
3115   14EF E4            pop a
3116   14F0             ; END TERMS
3117   14F0 E7            pop d
3118   14F1 FD 43         mov [d], b
3119   14F3             ;; break; 
3120   14F3 0A 40 15      jmp _switch39_exit ; case break
3121   14F6             _switch39_case6:
3122   14F6             
3123   14F6             ; --- BEGIN INLINE ASM BLOCK
3124   14F6 FA FF FF      lea d, [bp + -1] ; $p
3125   14F9 FD 2A         mov d, [d]
3126   14FB 1E            mov al, [d]
3127   14FC 23            mov ah, al
3128   14FD 07 FC 1C      call _putchar
3129   1500             ; --- END INLINE ASM BLOCK
3130   1500             
3131   1500             ;; p = p + 2; 
3132   1500 FA FF FF      lea d, [bp + -1] ; $p
3133   1503 DA            push d
3134   1504 FA FF FF      lea d, [bp + -1] ; $p
3135   1507 2A            mov b, [d]
3136   1508             ; START TERMS
3137   1508 D7            push a
3138   1509 11            mov a, b
3139   150A 26 02 00      mov b, $2
3140   150D 56            add b, a
3141   150E E4            pop a
3142   150F             ; END TERMS
3143   150F E7            pop d
3144   1510 FD 43         mov [d], b
3145   1512             ;; break; 
3146   1512 0A 40 15      jmp _switch39_exit ; case break
3147   1515             _switch39_case7:
3148   1515             
3149   1515             ; --- BEGIN INLINE ASM BLOCK
3150   1515 FA FF FF      lea d, [bp + -1] ; $p
3151   1518 FD 2A         mov d, [d]
3152   151A FD 2A         mov d, [d]
3153   151C 07 46 1E      call _puts
3154   151F             ; --- END INLINE ASM BLOCK
3155   151F             
3156   151F             ;; p = p + 2; 
3157   151F FA FF FF      lea d, [bp + -1] ; $p
3158   1522 DA            push d
3159   1523 FA FF FF      lea d, [bp + -1] ; $p
3160   1526 2A            mov b, [d]
3161   1527             ; START TERMS
3162   1527 D7            push a
3163   1528 11            mov a, b
3164   1529 26 02 00      mov b, $2
3165   152C 56            add b, a
3166   152D E4            pop a
3167   152E             ; END TERMS
3168   152E E7            pop d
3169   152F FD 43         mov [d], b
3170   1531             ;; break; 
3171   1531 0A 40 15      jmp _switch39_exit ; case break
3172   1534             _switch39_default:
3173   1534             ;; print("Error: Unknown argument type.\n"); 
3174   1534 26 47 20      mov b, __s4 ; "Error: Unknown argument type.\n"
3175   1537 FD AB         swp b
3176   1539 D8            push b
3177   153A 07 64 1B      call print
3178   153D 51 02 00      add sp, 2
3179   1540             _switch39_exit:
3180   1540             ;; format_p++; 
3181   1540 FA FD FF      lea d, [bp + -3] ; $format_p
3182   1543 2A            mov b, [d]
3183   1544 D8            push b
3184   1545 FD 77         inc b
3185   1547 FA FD FF      lea d, [bp + -3] ; $format_p
3186   154A FD 43         mov [d], b
3187   154C E5            pop b
3188   154D 0A 6C 15      jmp _if38_exit
3189   1550             _if38_else:
3190   1550             ;; putchar(*format_p); 
3191   1550 FA FD FF      lea d, [bp + -3] ; $format_p
3192   1553 2A            mov b, [d]
3193   1554 74            mov d, b
3194   1555 32            mov bl, [d]
3195   1556 A7 00         mov bh, 0
3196   1558 DD            push bl
3197   1559 07 1C 1B      call putchar
3198   155C 51 01 00      add sp, 1
3199   155F             ;; format_p++; 
3200   155F FA FD FF      lea d, [bp + -3] ; $format_p
3201   1562 2A            mov b, [d]
3202   1563 D8            push b
3203   1564 FD 77         inc b
3204   1566 FA FD FF      lea d, [bp + -3] ; $format_p
3205   1569 FD 43         mov [d], b
3206   156B E5            pop b
3207   156C             _if38_exit:
3208   156C             _if37_exit:
3209   156C             _for36_update:
3210   156C 0A 4D 13      jmp _for36_cond
3211   156F             _for36_exit:
3212   156F F9            leave
3213   1570 09            ret
3214   1571             
3215   1571             err:
3216   1571 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3217   1574             ;; print(e); 
3218   1574 FA 05 00      lea d, [bp + 5] ; $e
3219   1577 2A            mov b, [d]
3220   1578 FD AB         swp b
3221   157A D8            push b
3222   157B 07 64 1B      call print
3223   157E 51 02 00      add sp, 2
3224   1581             ;; exit(); 
3225   1581 07 05 06      call exit
3226   1584 F9            leave
3227   1585 09            ret
3228   1586             
3229   1586             printx32:
3230   1586 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3231   1589             
3232   1589             ; --- BEGIN INLINE ASM BLOCK
3233   1589 FA 05 00      lea d, [bp + 5] ; $hex
3234   158C 2B 02 00      mov b, [d+2]
3235   158F 07 9E 1E      call print_u16x
3236   1592 2A            mov b, [d]
3237   1593 07 9E 1E      call print_u16x
3238   1596             ; --- END INLINE ASM BLOCK
3239   1596             
3240   1596 F9            leave
3241   1597 09            ret
3242   1598             
3243   1598             printx16:
3244   1598 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3245   159B             
3246   159B             ; --- BEGIN INLINE ASM BLOCK
3247   159B FA 05 00      lea d, [bp + 5] ; $hex
3248   159E 2A            mov b, [d]
3249   159F 07 9E 1E      call print_u16x
3250   15A2             ; --- END INLINE ASM BLOCK
3251   15A2             
3252   15A2 F9            leave
3253   15A3 09            ret
3254   15A4             
3255   15A4             printx8:
3256   15A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3257   15A7             
3258   15A7             ; --- BEGIN INLINE ASM BLOCK
3259   15A7 FA 05 00      lea d, [bp + 5] ; $hex
3260   15AA 32            mov bl, [d]
3261   15AB 07 E2 1E      call print_u8x
3262   15AE             ; --- END INLINE ASM BLOCK
3263   15AE             
3264   15AE F9            leave
3265   15AF 09            ret
3266   15B0             
3267   15B0             hex_to_int:
3268   15B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3269   15B3             ; $value 
3270   15B3 10 00 00      mov a, $0
3271   15B6 45 FF FF      mov [bp + -1], a
3272   15B9             ; $i 
3273   15B9             ; $hex_char 
3274   15B9             ; $len 
3275   15B9 52 07 00      sub sp, 7
3276   15BC             ;; len = strlen(hex_string); 
3277   15BC FA FA FF      lea d, [bp + -6] ; $len
3278   15BF DA            push d
3279   15C0 FA 05 00      lea d, [bp + 5] ; $hex_string
3280   15C3 2A            mov b, [d]
3281   15C4 FD AB         swp b
3282   15C6 D8            push b
3283   15C7 07 BC 05      call strlen
3284   15CA 51 02 00      add sp, 2
3285   15CD E7            pop d
3286   15CE FD 43         mov [d], b
3287   15D0             ;; for (i = 0; i < len; i++) { 
3288   15D0             _for43_init:
3289   15D0 FA FD FF      lea d, [bp + -3] ; $i
3290   15D3 DA            push d
3291   15D4 26 00 00      mov b, $0
3292   15D7 E7            pop d
3293   15D8 FD 43         mov [d], b
3294   15DA             _for43_cond:
3295   15DA FA FD FF      lea d, [bp + -3] ; $i
3296   15DD 2A            mov b, [d]
3297   15DE             ; START RELATIONAL
3298   15DE D7            push a
3299   15DF 11            mov a, b
3300   15E0 FA FA FF      lea d, [bp + -6] ; $len
3301   15E3 2A            mov b, [d]
3302   15E4 B0            cmp a, b
3303   15E5 FD 73         slt ; <= (signed)
3304   15E7 E4            pop a
3305   15E8             ; END RELATIONAL
3306   15E8 C0 00 00      cmp b, 0
3307   15EB C6 ED 16      je _for43_exit
3308   15EE             _for43_block:
3309   15EE             ;; hex_char = hex_string[i]; 
3310   15EE FA FC FF      lea d, [bp + -4] ; $hex_char
3311   15F1 DA            push d
3312   15F2 FA 05 00      lea d, [bp + 5] ; $hex_string
3313   15F5 FD 2A         mov d, [d]
3314   15F7 D7            push a
3315   15F8 DA            push d
3316   15F9 FA FD FF      lea d, [bp + -3] ; $i
3317   15FC 2A            mov b, [d]
3318   15FD E7            pop d
3319   15FE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3320   1602 E4            pop a
3321   1603 32            mov bl, [d]
3322   1604 A7 00         mov bh, 0
3323   1606 E7            pop d
3324   1607 FD 3E         mov [d], bl
3325   1609             ;; if (hex_char >= 'a' && hex_char <= 'f')  
3326   1609             _if44_cond:
3327   1609 FA FC FF      lea d, [bp + -4] ; $hex_char
3328   160C 32            mov bl, [d]
3329   160D A7 00         mov bh, 0
3330   160F             ; START RELATIONAL
3331   160F D7            push a
3332   1610 11            mov a, b
3333   1611 26 61 00      mov b, $61
3334   1614 B0            cmp a, b
3335   1615 FD 80         sge ; >=
3336   1617 E4            pop a
3337   1618             ; END RELATIONAL
3338   1618 D7            push a
3339   1619 11            mov a, b
3340   161A FA FC FF      lea d, [bp + -4] ; $hex_char
3341   161D 32            mov bl, [d]
3342   161E A7 00         mov bh, 0
3343   1620             ; START RELATIONAL
3344   1620 D7            push a
3345   1621 11            mov a, b
3346   1622 26 66 00      mov b, $66
3347   1625 B0            cmp a, b
3348   1626 FD 74         sle ; <=
3349   1628 E4            pop a
3350   1629             ; END RELATIONAL
3351   1629 FD A7         sand a, b ; &&
3352   162B E4            pop a
3353   162C C0 00 00      cmp b, 0
3354   162F C6 60 16      je _if44_else
3355   1632             _if44_true:
3356   1632             ;; value = (value * 16) + (hex_char - 'a' + 10); 
3357   1632 FA FF FF      lea d, [bp + -1] ; $value
3358   1635 DA            push d
3359   1636 FA FF FF      lea d, [bp + -1] ; $value
3360   1639 2A            mov b, [d]
3361   163A             ; START FACTORS
3362   163A D7            push a
3363   163B 11            mov a, b
3364   163C 26 10 00      mov b, $10
3365   163F AC            mul a, b ; *
3366   1640 11            mov a, b
3367   1641 27            mov b, a
3368   1642 E4            pop a
3369   1643             ; END FACTORS
3370   1643             ; START TERMS
3371   1643 D7            push a
3372   1644 11            mov a, b
3373   1645 FA FC FF      lea d, [bp + -4] ; $hex_char
3374   1648 32            mov bl, [d]
3375   1649 A7 00         mov bh, 0
3376   164B             ; START TERMS
3377   164B D7            push a
3378   164C 11            mov a, b
3379   164D 26 61 00      mov b, $61
3380   1650 60            sub a, b
3381   1651 27            mov b, a
3382   1652 11            mov a, b
3383   1653 26 0A 00      mov b, $a
3384   1656 56            add b, a
3385   1657 E4            pop a
3386   1658             ; END TERMS
3387   1658 56            add b, a
3388   1659 E4            pop a
3389   165A             ; END TERMS
3390   165A E7            pop d
3391   165B FD 43         mov [d], b
3392   165D 0A DD 16      jmp _if44_exit
3393   1660             _if44_else:
3394   1660             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3395   1660             _if45_cond:
3396   1660 FA FC FF      lea d, [bp + -4] ; $hex_char
3397   1663 32            mov bl, [d]
3398   1664 A7 00         mov bh, 0
3399   1666             ; START RELATIONAL
3400   1666 D7            push a
3401   1667 11            mov a, b
3402   1668 26 41 00      mov b, $41
3403   166B B0            cmp a, b
3404   166C FD 80         sge ; >=
3405   166E E4            pop a
3406   166F             ; END RELATIONAL
3407   166F D7            push a
3408   1670 11            mov a, b
3409   1671 FA FC FF      lea d, [bp + -4] ; $hex_char
3410   1674 32            mov bl, [d]
3411   1675 A7 00         mov bh, 0
3412   1677             ; START RELATIONAL
3413   1677 D7            push a
3414   1678 11            mov a, b
3415   1679 26 46 00      mov b, $46
3416   167C B0            cmp a, b
3417   167D FD 74         sle ; <=
3418   167F E4            pop a
3419   1680             ; END RELATIONAL
3420   1680 FD A7         sand a, b ; &&
3421   1682 E4            pop a
3422   1683 C0 00 00      cmp b, 0
3423   1686 C6 B7 16      je _if45_else
3424   1689             _if45_true:
3425   1689             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3426   1689 FA FF FF      lea d, [bp + -1] ; $value
3427   168C DA            push d
3428   168D FA FF FF      lea d, [bp + -1] ; $value
3429   1690 2A            mov b, [d]
3430   1691             ; START FACTORS
3431   1691 D7            push a
3432   1692 11            mov a, b
3433   1693 26 10 00      mov b, $10
3434   1696 AC            mul a, b ; *
3435   1697 11            mov a, b
3436   1698 27            mov b, a
3437   1699 E4            pop a
3438   169A             ; END FACTORS
3439   169A             ; START TERMS
3440   169A D7            push a
3441   169B 11            mov a, b
3442   169C FA FC FF      lea d, [bp + -4] ; $hex_char
3443   169F 32            mov bl, [d]
3444   16A0 A7 00         mov bh, 0
3445   16A2             ; START TERMS
3446   16A2 D7            push a
3447   16A3 11            mov a, b
3448   16A4 26 41 00      mov b, $41
3449   16A7 60            sub a, b
3450   16A8 27            mov b, a
3451   16A9 11            mov a, b
3452   16AA 26 0A 00      mov b, $a
3453   16AD 56            add b, a
3454   16AE E4            pop a
3455   16AF             ; END TERMS
3456   16AF 56            add b, a
3457   16B0 E4            pop a
3458   16B1             ; END TERMS
3459   16B1 E7            pop d
3460   16B2 FD 43         mov [d], b
3461   16B4 0A DD 16      jmp _if45_exit
3462   16B7             _if45_else:
3463   16B7             ;; value = (value * 16) + (hex_char - '0'); 
3464   16B7 FA FF FF      lea d, [bp + -1] ; $value
3465   16BA DA            push d
3466   16BB FA FF FF      lea d, [bp + -1] ; $value
3467   16BE 2A            mov b, [d]
3468   16BF             ; START FACTORS
3469   16BF D7            push a
3470   16C0 11            mov a, b
3471   16C1 26 10 00      mov b, $10
3472   16C4 AC            mul a, b ; *
3473   16C5 11            mov a, b
3474   16C6 27            mov b, a
3475   16C7 E4            pop a
3476   16C8             ; END FACTORS
3477   16C8             ; START TERMS
3478   16C8 D7            push a
3479   16C9 11            mov a, b
3480   16CA FA FC FF      lea d, [bp + -4] ; $hex_char
3481   16CD 32            mov bl, [d]
3482   16CE A7 00         mov bh, 0
3483   16D0             ; START TERMS
3484   16D0 D7            push a
3485   16D1 11            mov a, b
3486   16D2 26 30 00      mov b, $30
3487   16D5 60            sub a, b
3488   16D6 27            mov b, a
3489   16D7 E4            pop a
3490   16D8             ; END TERMS
3491   16D8 56            add b, a
3492   16D9 E4            pop a
3493   16DA             ; END TERMS
3494   16DA E7            pop d
3495   16DB FD 43         mov [d], b
3496   16DD             _if45_exit:
3497   16DD             _if44_exit:
3498   16DD             _for43_update:
3499   16DD FA FD FF      lea d, [bp + -3] ; $i
3500   16E0 2A            mov b, [d]
3501   16E1 D8            push b
3502   16E2 FD 77         inc b
3503   16E4 FA FD FF      lea d, [bp + -3] ; $i
3504   16E7 FD 43         mov [d], b
3505   16E9 E5            pop b
3506   16EA 0A DA 15      jmp _for43_cond
3507   16ED             _for43_exit:
3508   16ED             ;; return value; 
3509   16ED FA FF FF      lea d, [bp + -1] ; $value
3510   16F0 2A            mov b, [d]
3511   16F1 F9            leave
3512   16F2 09            ret
3513   16F3             
3514   16F3             gets:
3515   16F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3516   16F6             
3517   16F6             ; --- BEGIN INLINE ASM BLOCK
3518   16F6 FA 05 00      lea d, [bp + 5] ; $s
3519   16F9 15            mov a, [d]
3520   16FA 3C            mov d, a
3521   16FB 07 03 1D      call _gets
3522   16FE             ; --- END INLINE ASM BLOCK
3523   16FE             
3524   16FE             ;; return strlen(s); 
3525   16FE FA 05 00      lea d, [bp + 5] ; $s
3526   1701 2A            mov b, [d]
3527   1702 FD AB         swp b
3528   1704 D8            push b
3529   1705 07 BC 05      call strlen
3530   1708 51 02 00      add sp, 2
3531   170B F9            leave
3532   170C 09            ret
3533   170D             
3534   170D             print_signed:
3535   170D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3536   1710             ; $digits 
3537   1710             ; $i 
3538   1710 10 00 00      mov a, $0
3539   1713 45 FA FF      mov [bp + -6], a
3540   1716 52 07 00      sub sp, 7
3541   1719             ;; if (num < 0) { 
3542   1719             _if46_cond:
3543   1719 FA 05 00      lea d, [bp + 5] ; $num
3544   171C 2A            mov b, [d]
3545   171D             ; START RELATIONAL
3546   171D D7            push a
3547   171E 11            mov a, b
3548   171F 26 00 00      mov b, $0
3549   1722 B0            cmp a, b
3550   1723 FD 73         slt ; <= (signed)
3551   1725 E4            pop a
3552   1726             ; END RELATIONAL
3553   1726 C0 00 00      cmp b, 0
3554   1729 C6 46 17      je _if46_else
3555   172C             _if46_true:
3556   172C             ;; putchar('-'); 
3557   172C 26 2D 00      mov b, $2d
3558   172F DD            push bl
3559   1730 07 1C 1B      call putchar
3560   1733 51 01 00      add sp, 1
3561   1736             ;; num = -num; 
3562   1736 FA 05 00      lea d, [bp + 5] ; $num
3563   1739 DA            push d
3564   173A FA 05 00      lea d, [bp + 5] ; $num
3565   173D 2A            mov b, [d]
3566   173E FD 97         neg b
3567   1740 E7            pop d
3568   1741 FD 43         mov [d], b
3569   1743 0A 68 17      jmp _if46_exit
3570   1746             _if46_else:
3571   1746             ;; if (num == 0) { 
3572   1746             _if47_cond:
3573   1746 FA 05 00      lea d, [bp + 5] ; $num
3574   1749 2A            mov b, [d]
3575   174A             ; START RELATIONAL
3576   174A D7            push a
3577   174B 11            mov a, b
3578   174C 26 00 00      mov b, $0
3579   174F B0            cmp a, b
3580   1750 FD 71         seq ; ==
3581   1752 E4            pop a
3582   1753             ; END RELATIONAL
3583   1753 C0 00 00      cmp b, 0
3584   1756 C6 68 17      je _if47_exit
3585   1759             _if47_true:
3586   1759             ;; putchar('0'); 
3587   1759 26 30 00      mov b, $30
3588   175C DD            push bl
3589   175D 07 1C 1B      call putchar
3590   1760 51 01 00      add sp, 1
3591   1763             ;; return; 
3592   1763 F9            leave
3593   1764 09            ret
3594   1765 0A 68 17      jmp _if47_exit
3595   1768             _if47_exit:
3596   1768             _if46_exit:
3597   1768             ;; while (num > 0) { 
3598   1768             _while48_cond:
3599   1768 FA 05 00      lea d, [bp + 5] ; $num
3600   176B 2A            mov b, [d]
3601   176C             ; START RELATIONAL
3602   176C D7            push a
3603   176D 11            mov a, b
3604   176E 26 00 00      mov b, $0
3605   1771 B0            cmp a, b
3606   1772 FD 7F         sgt ; >
3607   1774 E4            pop a
3608   1775             ; END RELATIONAL
3609   1775 C0 00 00      cmp b, 0
3610   1778 C6 C2 17      je _while48_exit
3611   177B             _while48_block:
3612   177B             ;; digits[i] = '0' + (num % 10); 
3613   177B FA FC FF      lea d, [bp + -4] ; $digits
3614   177E D7            push a
3615   177F DA            push d
3616   1780 FA FA FF      lea d, [bp + -6] ; $i
3617   1783 2A            mov b, [d]
3618   1784 E7            pop d
3619   1785 5A            add d, b
3620   1786 E4            pop a
3621   1787 DA            push d
3622   1788 26 30 00      mov b, $30
3623   178B             ; START TERMS
3624   178B D7            push a
3625   178C 11            mov a, b
3626   178D FA 05 00      lea d, [bp + 5] ; $num
3627   1790 2A            mov b, [d]
3628   1791             ; START FACTORS
3629   1791 D7            push a
3630   1792 11            mov a, b
3631   1793 26 0A 00      mov b, $a
3632   1796 AE            div a, b ; 
3633   1797 11            mov a, b
3634   1798 27            mov b, a
3635   1799 E4            pop a
3636   179A             ; END FACTORS
3637   179A 56            add b, a
3638   179B E4            pop a
3639   179C             ; END TERMS
3640   179C E7            pop d
3641   179D FD 3E         mov [d], bl
3642   179F             ;; num = num / 10; 
3643   179F FA 05 00      lea d, [bp + 5] ; $num
3644   17A2 DA            push d
3645   17A3 FA 05 00      lea d, [bp + 5] ; $num
3646   17A6 2A            mov b, [d]
3647   17A7             ; START FACTORS
3648   17A7 D7            push a
3649   17A8 11            mov a, b
3650   17A9 26 0A 00      mov b, $a
3651   17AC AE            div a, b
3652   17AD 27            mov b, a
3653   17AE E4            pop a
3654   17AF             ; END FACTORS
3655   17AF E7            pop d
3656   17B0 FD 43         mov [d], b
3657   17B2             ;; i++; 
3658   17B2 FA FA FF      lea d, [bp + -6] ; $i
3659   17B5 2A            mov b, [d]
3660   17B6 D8            push b
3661   17B7 FD 77         inc b
3662   17B9 FA FA FF      lea d, [bp + -6] ; $i
3663   17BC FD 43         mov [d], b
3664   17BE E5            pop b
3665   17BF 0A 68 17      jmp _while48_cond
3666   17C2             _while48_exit:
3667   17C2             ;; while (i > 0) { 
3668   17C2             _while49_cond:
3669   17C2 FA FA FF      lea d, [bp + -6] ; $i
3670   17C5 2A            mov b, [d]
3671   17C6             ; START RELATIONAL
3672   17C6 D7            push a
3673   17C7 11            mov a, b
3674   17C8 26 00 00      mov b, $0
3675   17CB B0            cmp a, b
3676   17CC FD 7F         sgt ; >
3677   17CE E4            pop a
3678   17CF             ; END RELATIONAL
3679   17CF C0 00 00      cmp b, 0
3680   17D2 C6 FB 17      je _while49_exit
3681   17D5             _while49_block:
3682   17D5             ;; i--; 
3683   17D5 FA FA FF      lea d, [bp + -6] ; $i
3684   17D8 2A            mov b, [d]
3685   17D9 D8            push b
3686   17DA FD 7D         dec b
3687   17DC FA FA FF      lea d, [bp + -6] ; $i
3688   17DF FD 43         mov [d], b
3689   17E1 E5            pop b
3690   17E2             ;; putchar(digits[i]); 
3691   17E2 FA FC FF      lea d, [bp + -4] ; $digits
3692   17E5 D7            push a
3693   17E6 DA            push d
3694   17E7 FA FA FF      lea d, [bp + -6] ; $i
3695   17EA 2A            mov b, [d]
3696   17EB E7            pop d
3697   17EC 5A            add d, b
3698   17ED E4            pop a
3699   17EE 32            mov bl, [d]
3700   17EF A7 00         mov bh, 0
3701   17F1 DD            push bl
3702   17F2 07 1C 1B      call putchar
3703   17F5 51 01 00      add sp, 1
3704   17F8 0A C2 17      jmp _while49_cond
3705   17FB             _while49_exit:
3706   17FB F9            leave
3707   17FC 09            ret
3708   17FD             
3709   17FD             print_signed_long:
3710   17FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3711   1800             ; $digits 
3712   1800             ; $i 
3713   1800 10 00 00      mov a, $0
3714   1803 45 F5 FF      mov [bp + -11], a
3715   1806 52 0C 00      sub sp, 12
3716   1809             ;; if (num < 0) { 
3717   1809             _if50_cond:
3718   1809 FA 05 00      lea d, [bp + 5] ; $num
3719   180C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3720   180F FD 39         mov c, b ; And place it into C
3721   1811 2A            mov b, [d] ; Lower Word in B
3722   1812             ; START RELATIONAL
3723   1812 D7            push a
3724   1813 FD D8         push g
3725   1815 11            mov a, b
3726   1816 FD 7A         mov g, c
3727   1818 26 00 00      mov b, $0
3728   181B 4D            mov si, a
3729   181C 11            mov a, b
3730   181D 4F            mov di, a
3731   181E FD 12         mov a, g
3732   1820 28            mov b, c
3733   1821 B0            cmp a, b
3734   1822 FD 75         slu ; <
3735   1824 D8            push b
3736   1825 28            mov b, c
3737   1826 FD 71         seq ; ==
3738   1828 D8            push b
3739   1829 50            mov a, di
3740   182A 27            mov b, a
3741   182B 4E            mov a, si
3742   182C B0            cmp a, b
3743   182D FD 75         slu ; <
3744   182F E4            pop a
3745   1830 FD 92         and b, a
3746   1832 E4            pop a
3747   1833 FD 70         or b, a
3748   1835               
3749   1835 FD F1         pop g
3750   1837 E4            pop a
3751   1838             ; END RELATIONAL
3752   1838 C0 00 00      cmp b, 0
3753   183B C6 62 18      je _if50_else
3754   183E             _if50_true:
3755   183E             ;; putchar('-'); 
3756   183E 26 2D 00      mov b, $2d
3757   1841 DD            push bl
3758   1842 07 1C 1B      call putchar
3759   1845 51 01 00      add sp, 1
3760   1848             ;; num = -num; 
3761   1848 FA 05 00      lea d, [bp + 5] ; $num
3762   184B DA            push d
3763   184C FA 05 00      lea d, [bp + 5] ; $num
3764   184F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3765   1852 FD 39         mov c, b ; And place it into C
3766   1854 2A            mov b, [d] ; Lower Word in B
3767   1855 FD 97         neg b
3768   1857 E7            pop d
3769   1858 FD 43         mov [d], b
3770   185A 28            mov b, c
3771   185B FD 44 02 00   mov [d + 2], b
3772   185F 0A 99 18      jmp _if50_exit
3773   1862             _if50_else:
3774   1862             ;; if (num == 0) { 
3775   1862             _if51_cond:
3776   1862 FA 05 00      lea d, [bp + 5] ; $num
3777   1865 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3778   1868 FD 39         mov c, b ; And place it into C
3779   186A 2A            mov b, [d] ; Lower Word in B
3780   186B             ; START RELATIONAL
3781   186B D7            push a
3782   186C FD D8         push g
3783   186E 11            mov a, b
3784   186F FD 7A         mov g, c
3785   1871 26 00 00      mov b, $0
3786   1874 B0            cmp a, b
3787   1875 FD 71         seq ; ==
3788   1877 D8            push b
3789   1878 12            mov a, c
3790   1879 FD 27         mov b, g
3791   187B B0            cmp a, b
3792   187C FD 71         seq ; ==
3793   187E E4            pop a
3794   187F FD A7         sand a, b
3795   1881 FD F1         pop g
3796   1883 E4            pop a
3797   1884             ; END RELATIONAL
3798   1884 C0 00 00      cmp b, 0
3799   1887 C6 99 18      je _if51_exit
3800   188A             _if51_true:
3801   188A             ;; putchar('0'); 
3802   188A 26 30 00      mov b, $30
3803   188D DD            push bl
3804   188E 07 1C 1B      call putchar
3805   1891 51 01 00      add sp, 1
3806   1894             ;; return; 
3807   1894 F9            leave
3808   1895 09            ret
3809   1896 0A 99 18      jmp _if51_exit
3810   1899             _if51_exit:
3811   1899             _if50_exit:
3812   1899             ;; while (num > 0) { 
3813   1899             _while52_cond:
3814   1899 FA 05 00      lea d, [bp + 5] ; $num
3815   189C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3816   189F FD 39         mov c, b ; And place it into C
3817   18A1 2A            mov b, [d] ; Lower Word in B
3818   18A2             ; START RELATIONAL
3819   18A2 D7            push a
3820   18A3 FD D8         push g
3821   18A5 11            mov a, b
3822   18A6 FD 7A         mov g, c
3823   18A8 26 00 00      mov b, $0
3824   18AB B0            cmp a, b
3825   18AC FD 7F         sgt ; >
3826   18AE FD F1         pop g
3827   18B0 E4            pop a
3828   18B1             ; END RELATIONAL
3829   18B1 C0 00 00      cmp b, 0
3830   18B4 C6 14 19      je _while52_exit
3831   18B7             _while52_block:
3832   18B7             ;; digits[i] = '0' + (num % 10); 
3833   18B7 FA F7 FF      lea d, [bp + -9] ; $digits
3834   18BA D7            push a
3835   18BB DA            push d
3836   18BC FA F5 FF      lea d, [bp + -11] ; $i
3837   18BF 2A            mov b, [d]
3838   18C0 E7            pop d
3839   18C1 5A            add d, b
3840   18C2 E4            pop a
3841   18C3 DA            push d
3842   18C4 26 30 00      mov b, $30
3843   18C7             ; START TERMS
3844   18C7 D7            push a
3845   18C8 11            mov a, b
3846   18C9 FA 05 00      lea d, [bp + 5] ; $num
3847   18CC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3848   18CF FD 39         mov c, b ; And place it into C
3849   18D1 2A            mov b, [d] ; Lower Word in B
3850   18D2             ; START FACTORS
3851   18D2 D7            push a
3852   18D3 11            mov a, b
3853   18D4 26 0A 00      mov b, $a
3854   18D7 AE            div a, b ; 
3855   18D8 11            mov a, b
3856   18D9 27            mov b, a
3857   18DA E4            pop a
3858   18DB             ; END FACTORS
3859   18DB 54            add a, b
3860   18DC D7            push a
3861   18DD FD 12         mov a, g
3862   18DF 28            mov b, c
3863   18E0 5C            adc a, b
3864   18E1 39            mov c, a
3865   18E2 E5            pop b
3866   18E3 E4            pop a
3867   18E4             ; END TERMS
3868   18E4 E7            pop d
3869   18E5 FD 3E         mov [d], bl
3870   18E7             ;; num = num / 10; 
3871   18E7 FA 05 00      lea d, [bp + 5] ; $num
3872   18EA DA            push d
3873   18EB FA 05 00      lea d, [bp + 5] ; $num
3874   18EE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3875   18F1 FD 39         mov c, b ; And place it into C
3876   18F3 2A            mov b, [d] ; Lower Word in B
3877   18F4             ; START FACTORS
3878   18F4 D7            push a
3879   18F5 11            mov a, b
3880   18F6 26 0A 00      mov b, $a
3881   18F9 AE            div a, b
3882   18FA 27            mov b, a
3883   18FB E4            pop a
3884   18FC             ; END FACTORS
3885   18FC E7            pop d
3886   18FD FD 43         mov [d], b
3887   18FF 28            mov b, c
3888   1900 FD 44 02 00   mov [d + 2], b
3889   1904             ;; i++; 
3890   1904 FA F5 FF      lea d, [bp + -11] ; $i
3891   1907 2A            mov b, [d]
3892   1908 D8            push b
3893   1909 FD 77         inc b
3894   190B FA F5 FF      lea d, [bp + -11] ; $i
3895   190E FD 43         mov [d], b
3896   1910 E5            pop b
3897   1911 0A 99 18      jmp _while52_cond
3898   1914             _while52_exit:
3899   1914             ;; while (i > 0) { 
3900   1914             _while53_cond:
3901   1914 FA F5 FF      lea d, [bp + -11] ; $i
3902   1917 2A            mov b, [d]
3903   1918             ; START RELATIONAL
3904   1918 D7            push a
3905   1919 11            mov a, b
3906   191A 26 00 00      mov b, $0
3907   191D B0            cmp a, b
3908   191E FD 7F         sgt ; >
3909   1920 E4            pop a
3910   1921             ; END RELATIONAL
3911   1921 C0 00 00      cmp b, 0
3912   1924 C6 4D 19      je _while53_exit
3913   1927             _while53_block:
3914   1927             ;; i--; 
3915   1927 FA F5 FF      lea d, [bp + -11] ; $i
3916   192A 2A            mov b, [d]
3917   192B D8            push b
3918   192C FD 7D         dec b
3919   192E FA F5 FF      lea d, [bp + -11] ; $i
3920   1931 FD 43         mov [d], b
3921   1933 E5            pop b
3922   1934             ;; putchar(digits[i]); 
3923   1934 FA F7 FF      lea d, [bp + -9] ; $digits
3924   1937 D7            push a
3925   1938 DA            push d
3926   1939 FA F5 FF      lea d, [bp + -11] ; $i
3927   193C 2A            mov b, [d]
3928   193D E7            pop d
3929   193E 5A            add d, b
3930   193F E4            pop a
3931   1940 32            mov bl, [d]
3932   1941 A7 00         mov bh, 0
3933   1943 DD            push bl
3934   1944 07 1C 1B      call putchar
3935   1947 51 01 00      add sp, 1
3936   194A 0A 14 19      jmp _while53_cond
3937   194D             _while53_exit:
3938   194D F9            leave
3939   194E 09            ret
3940   194F             
3941   194F             print_unsigned_long:
3942   194F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3943   1952             ; $digits 
3944   1952             ; $i 
3945   1952 52 0C 00      sub sp, 12
3946   1955             ;; i = 0; 
3947   1955 FA F5 FF      lea d, [bp + -11] ; $i
3948   1958 DA            push d
3949   1959 26 00 00      mov b, $0
3950   195C E7            pop d
3951   195D FD 43         mov [d], b
3952   195F             ;; if(num == 0){ 
3953   195F             _if54_cond:
3954   195F FA 05 00      lea d, [bp + 5] ; $num
3955   1962 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3956   1965 FD 39         mov c, b ; And place it into C
3957   1967 2A            mov b, [d] ; Lower Word in B
3958   1968             ; START RELATIONAL
3959   1968 D7            push a
3960   1969 FD D8         push g
3961   196B 11            mov a, b
3962   196C FD 7A         mov g, c
3963   196E 26 00 00      mov b, $0
3964   1971 B0            cmp a, b
3965   1972 FD 71         seq ; ==
3966   1974 D8            push b
3967   1975 12            mov a, c
3968   1976 FD 27         mov b, g
3969   1978 B0            cmp a, b
3970   1979 FD 71         seq ; ==
3971   197B E4            pop a
3972   197C FD A7         sand a, b
3973   197E FD F1         pop g
3974   1980 E4            pop a
3975   1981             ; END RELATIONAL
3976   1981 C0 00 00      cmp b, 0
3977   1984 C6 96 19      je _if54_exit
3978   1987             _if54_true:
3979   1987             ;; putchar('0'); 
3980   1987 26 30 00      mov b, $30
3981   198A DD            push bl
3982   198B 07 1C 1B      call putchar
3983   198E 51 01 00      add sp, 1
3984   1991             ;; return; 
3985   1991 F9            leave
3986   1992 09            ret
3987   1993 0A 96 19      jmp _if54_exit
3988   1996             _if54_exit:
3989   1996             ;; while (num > 0) { 
3990   1996             _while55_cond:
3991   1996 FA 05 00      lea d, [bp + 5] ; $num
3992   1999 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3993   199C FD 39         mov c, b ; And place it into C
3994   199E 2A            mov b, [d] ; Lower Word in B
3995   199F             ; START RELATIONAL
3996   199F D7            push a
3997   19A0 FD D8         push g
3998   19A2 11            mov a, b
3999   19A3 FD 7A         mov g, c
4000   19A5 26 00 00      mov b, $0
4001   19A8 B0            cmp a, b
4002   19A9 FD 81         sgu ; > (unsigned)
4003   19AB FD F1         pop g
4004   19AD E4            pop a
4005   19AE             ; END RELATIONAL
4006   19AE C0 00 00      cmp b, 0
4007   19B1 C6 11 1A      je _while55_exit
4008   19B4             _while55_block:
4009   19B4             ;; digits[i] = '0' + (num % 10); 
4010   19B4 FA F7 FF      lea d, [bp + -9] ; $digits
4011   19B7 D7            push a
4012   19B8 DA            push d
4013   19B9 FA F5 FF      lea d, [bp + -11] ; $i
4014   19BC 2A            mov b, [d]
4015   19BD E7            pop d
4016   19BE 5A            add d, b
4017   19BF E4            pop a
4018   19C0 DA            push d
4019   19C1 26 30 00      mov b, $30
4020   19C4             ; START TERMS
4021   19C4 D7            push a
4022   19C5 11            mov a, b
4023   19C6 FA 05 00      lea d, [bp + 5] ; $num
4024   19C9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4025   19CC FD 39         mov c, b ; And place it into C
4026   19CE 2A            mov b, [d] ; Lower Word in B
4027   19CF             ; START FACTORS
4028   19CF D7            push a
4029   19D0 11            mov a, b
4030   19D1 26 0A 00      mov b, $a
4031   19D4 AE            div a, b ; 
4032   19D5 11            mov a, b
4033   19D6 27            mov b, a
4034   19D7 E4            pop a
4035   19D8             ; END FACTORS
4036   19D8 54            add a, b
4037   19D9 D7            push a
4038   19DA FD 12         mov a, g
4039   19DC 28            mov b, c
4040   19DD 5C            adc a, b
4041   19DE 39            mov c, a
4042   19DF E5            pop b
4043   19E0 E4            pop a
4044   19E1             ; END TERMS
4045   19E1 E7            pop d
4046   19E2 FD 3E         mov [d], bl
4047   19E4             ;; num = num / 10; 
4048   19E4 FA 05 00      lea d, [bp + 5] ; $num
4049   19E7 DA            push d
4050   19E8 FA 05 00      lea d, [bp + 5] ; $num
4051   19EB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4052   19EE FD 39         mov c, b ; And place it into C
4053   19F0 2A            mov b, [d] ; Lower Word in B
4054   19F1             ; START FACTORS
4055   19F1 D7            push a
4056   19F2 11            mov a, b
4057   19F3 26 0A 00      mov b, $a
4058   19F6 AE            div a, b
4059   19F7 27            mov b, a
4060   19F8 E4            pop a
4061   19F9             ; END FACTORS
4062   19F9 E7            pop d
4063   19FA FD 43         mov [d], b
4064   19FC 28            mov b, c
4065   19FD FD 44 02 00   mov [d + 2], b
4066   1A01             ;; i++; 
4067   1A01 FA F5 FF      lea d, [bp + -11] ; $i
4068   1A04 2A            mov b, [d]
4069   1A05 D8            push b
4070   1A06 FD 77         inc b
4071   1A08 FA F5 FF      lea d, [bp + -11] ; $i
4072   1A0B FD 43         mov [d], b
4073   1A0D E5            pop b
4074   1A0E 0A 96 19      jmp _while55_cond
4075   1A11             _while55_exit:
4076   1A11             ;; while (i > 0) { 
4077   1A11             _while56_cond:
4078   1A11 FA F5 FF      lea d, [bp + -11] ; $i
4079   1A14 2A            mov b, [d]
4080   1A15             ; START RELATIONAL
4081   1A15 D7            push a
4082   1A16 11            mov a, b
4083   1A17 26 00 00      mov b, $0
4084   1A1A B0            cmp a, b
4085   1A1B FD 7F         sgt ; >
4086   1A1D E4            pop a
4087   1A1E             ; END RELATIONAL
4088   1A1E C0 00 00      cmp b, 0
4089   1A21 C6 4A 1A      je _while56_exit
4090   1A24             _while56_block:
4091   1A24             ;; i--; 
4092   1A24 FA F5 FF      lea d, [bp + -11] ; $i
4093   1A27 2A            mov b, [d]
4094   1A28 D8            push b
4095   1A29 FD 7D         dec b
4096   1A2B FA F5 FF      lea d, [bp + -11] ; $i
4097   1A2E FD 43         mov [d], b
4098   1A30 E5            pop b
4099   1A31             ;; putchar(digits[i]); 
4100   1A31 FA F7 FF      lea d, [bp + -9] ; $digits
4101   1A34 D7            push a
4102   1A35 DA            push d
4103   1A36 FA F5 FF      lea d, [bp + -11] ; $i
4104   1A39 2A            mov b, [d]
4105   1A3A E7            pop d
4106   1A3B 5A            add d, b
4107   1A3C E4            pop a
4108   1A3D 32            mov bl, [d]
4109   1A3E A7 00         mov bh, 0
4110   1A40 DD            push bl
4111   1A41 07 1C 1B      call putchar
4112   1A44 51 01 00      add sp, 1
4113   1A47 0A 11 1A      jmp _while56_cond
4114   1A4A             _while56_exit:
4115   1A4A F9            leave
4116   1A4B 09            ret
4117   1A4C             
4118   1A4C             print_unsigned:
4119   1A4C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4120   1A4F             ; $digits 
4121   1A4F             ; $i 
4122   1A4F 52 07 00      sub sp, 7
4123   1A52             ;; i = 0; 
4124   1A52 FA FA FF      lea d, [bp + -6] ; $i
4125   1A55 DA            push d
4126   1A56 26 00 00      mov b, $0
4127   1A59 E7            pop d
4128   1A5A FD 43         mov [d], b
4129   1A5C             ;; if(num == 0){ 
4130   1A5C             _if57_cond:
4131   1A5C FA 05 00      lea d, [bp + 5] ; $num
4132   1A5F 2A            mov b, [d]
4133   1A60             ; START RELATIONAL
4134   1A60 D7            push a
4135   1A61 11            mov a, b
4136   1A62 26 00 00      mov b, $0
4137   1A65 B0            cmp a, b
4138   1A66 FD 71         seq ; ==
4139   1A68 E4            pop a
4140   1A69             ; END RELATIONAL
4141   1A69 C0 00 00      cmp b, 0
4142   1A6C C6 7E 1A      je _if57_exit
4143   1A6F             _if57_true:
4144   1A6F             ;; putchar('0'); 
4145   1A6F 26 30 00      mov b, $30
4146   1A72 DD            push bl
4147   1A73 07 1C 1B      call putchar
4148   1A76 51 01 00      add sp, 1
4149   1A79             ;; return; 
4150   1A79 F9            leave
4151   1A7A 09            ret
4152   1A7B 0A 7E 1A      jmp _if57_exit
4153   1A7E             _if57_exit:
4154   1A7E             ;; while (num > 0) { 
4155   1A7E             _while58_cond:
4156   1A7E FA 05 00      lea d, [bp + 5] ; $num
4157   1A81 2A            mov b, [d]
4158   1A82             ; START RELATIONAL
4159   1A82 D7            push a
4160   1A83 11            mov a, b
4161   1A84 26 00 00      mov b, $0
4162   1A87 B0            cmp a, b
4163   1A88 FD 81         sgu ; > (unsigned)
4164   1A8A E4            pop a
4165   1A8B             ; END RELATIONAL
4166   1A8B C0 00 00      cmp b, 0
4167   1A8E C6 D8 1A      je _while58_exit
4168   1A91             _while58_block:
4169   1A91             ;; digits[i] = '0' + (num % 10); 
4170   1A91 FA FC FF      lea d, [bp + -4] ; $digits
4171   1A94 D7            push a
4172   1A95 DA            push d
4173   1A96 FA FA FF      lea d, [bp + -6] ; $i
4174   1A99 2A            mov b, [d]
4175   1A9A E7            pop d
4176   1A9B 5A            add d, b
4177   1A9C E4            pop a
4178   1A9D DA            push d
4179   1A9E 26 30 00      mov b, $30
4180   1AA1             ; START TERMS
4181   1AA1 D7            push a
4182   1AA2 11            mov a, b
4183   1AA3 FA 05 00      lea d, [bp + 5] ; $num
4184   1AA6 2A            mov b, [d]
4185   1AA7             ; START FACTORS
4186   1AA7 D7            push a
4187   1AA8 11            mov a, b
4188   1AA9 26 0A 00      mov b, $a
4189   1AAC AE            div a, b ; 
4190   1AAD 11            mov a, b
4191   1AAE 27            mov b, a
4192   1AAF E4            pop a
4193   1AB0             ; END FACTORS
4194   1AB0 56            add b, a
4195   1AB1 E4            pop a
4196   1AB2             ; END TERMS
4197   1AB2 E7            pop d
4198   1AB3 FD 3E         mov [d], bl
4199   1AB5             ;; num = num / 10; 
4200   1AB5 FA 05 00      lea d, [bp + 5] ; $num
4201   1AB8 DA            push d
4202   1AB9 FA 05 00      lea d, [bp + 5] ; $num
4203   1ABC 2A            mov b, [d]
4204   1ABD             ; START FACTORS
4205   1ABD D7            push a
4206   1ABE 11            mov a, b
4207   1ABF 26 0A 00      mov b, $a
4208   1AC2 AE            div a, b
4209   1AC3 27            mov b, a
4210   1AC4 E4            pop a
4211   1AC5             ; END FACTORS
4212   1AC5 E7            pop d
4213   1AC6 FD 43         mov [d], b
4214   1AC8             ;; i++; 
4215   1AC8 FA FA FF      lea d, [bp + -6] ; $i
4216   1ACB 2A            mov b, [d]
4217   1ACC D8            push b
4218   1ACD FD 77         inc b
4219   1ACF FA FA FF      lea d, [bp + -6] ; $i
4220   1AD2 FD 43         mov [d], b
4221   1AD4 E5            pop b
4222   1AD5 0A 7E 1A      jmp _while58_cond
4223   1AD8             _while58_exit:
4224   1AD8             ;; while (i > 0) { 
4225   1AD8             _while59_cond:
4226   1AD8 FA FA FF      lea d, [bp + -6] ; $i
4227   1ADB 2A            mov b, [d]
4228   1ADC             ; START RELATIONAL
4229   1ADC D7            push a
4230   1ADD 11            mov a, b
4231   1ADE 26 00 00      mov b, $0
4232   1AE1 B0            cmp a, b
4233   1AE2 FD 7F         sgt ; >
4234   1AE4 E4            pop a
4235   1AE5             ; END RELATIONAL
4236   1AE5 C0 00 00      cmp b, 0
4237   1AE8 C6 11 1B      je _while59_exit
4238   1AEB             _while59_block:
4239   1AEB             ;; i--; 
4240   1AEB FA FA FF      lea d, [bp + -6] ; $i
4241   1AEE 2A            mov b, [d]
4242   1AEF D8            push b
4243   1AF0 FD 7D         dec b
4244   1AF2 FA FA FF      lea d, [bp + -6] ; $i
4245   1AF5 FD 43         mov [d], b
4246   1AF7 E5            pop b
4247   1AF8             ;; putchar(digits[i]); 
4248   1AF8 FA FC FF      lea d, [bp + -4] ; $digits
4249   1AFB D7            push a
4250   1AFC DA            push d
4251   1AFD FA FA FF      lea d, [bp + -6] ; $i
4252   1B00 2A            mov b, [d]
4253   1B01 E7            pop d
4254   1B02 5A            add d, b
4255   1B03 E4            pop a
4256   1B04 32            mov bl, [d]
4257   1B05 A7 00         mov bh, 0
4258   1B07 DD            push bl
4259   1B08 07 1C 1B      call putchar
4260   1B0B 51 01 00      add sp, 1
4261   1B0E 0A D8 1A      jmp _while59_cond
4262   1B11             _while59_exit:
4263   1B11 F9            leave
4264   1B12 09            ret
4265   1B13             
4266   1B13             date:
4267   1B13 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4268   1B16             
4269   1B16             ; --- BEGIN INLINE ASM BLOCK
4270   1B16 19 00         mov al, 0 
4271   1B18 05 07         syscall sys_datetime
4272   1B1A             ; --- END INLINE ASM BLOCK
4273   1B1A             
4274   1B1A F9            leave
4275   1B1B 09            ret
4276   1B1C             
4277   1B1C             putchar:
4278   1B1C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4279   1B1F             
4280   1B1F             ; --- BEGIN INLINE ASM BLOCK
4281   1B1F FA 05 00      lea d, [bp + 5] ; $c
4282   1B22 1E            mov al, [d]
4283   1B23 23            mov ah, al
4284   1B24 07 FC 1C      call _putchar
4285   1B27             ; --- END INLINE ASM BLOCK
4286   1B27             
4287   1B27 F9            leave
4288   1B28 09            ret
4289   1B29             
4290   1B29             getchar:
4291   1B29 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4292   1B2C             ; $c 
4293   1B2C 52 01 00      sub sp, 1
4294   1B2F             
4295   1B2F             ; --- BEGIN INLINE ASM BLOCK
4296   1B2F 07 F5 1C      call getch
4297   1B32 1A            mov al, ah
4298   1B33 FA 00 00      lea d, [bp + 0] ; $c
4299   1B36 3E            mov [d], al
4300   1B37             ; --- END INLINE ASM BLOCK
4301   1B37             
4302   1B37             ;; return c; 
4303   1B37 FA 00 00      lea d, [bp + 0] ; $c
4304   1B3A 32            mov bl, [d]
4305   1B3B A7 00         mov bh, 0
4306   1B3D F9            leave
4307   1B3E 09            ret
4308   1B3F             
4309   1B3F             scann:
4310   1B3F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4311   1B42             ; $m 
4312   1B42 52 02 00      sub sp, 2
4313   1B45             
4314   1B45             ; --- BEGIN INLINE ASM BLOCK
4315   1B45 07 40 1F      call scan_u16d
4316   1B48 FA FF FF      lea d, [bp + -1] ; $m
4317   1B4B 43            mov [d], a
4318   1B4C             ; --- END INLINE ASM BLOCK
4319   1B4C             
4320   1B4C             ;; return m; 
4321   1B4C FA FF FF      lea d, [bp + -1] ; $m
4322   1B4F 2A            mov b, [d]
4323   1B50 F9            leave
4324   1B51 09            ret
4325   1B52             
4326   1B52             puts:
4327   1B52 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4328   1B55             
4329   1B55             ; --- BEGIN INLINE ASM BLOCK
4330   1B55 FA 05 00      lea d, [bp + 5] ; $s
4331   1B58 15            mov a, [d]
4332   1B59 3C            mov d, a
4333   1B5A 07 46 1E      call _puts
4334   1B5D 10 00 0A      mov a, $0A00
4335   1B60 05 03         syscall sys_io
4336   1B62             ; --- END INLINE ASM BLOCK
4337   1B62             
4338   1B62 F9            leave
4339   1B63 09            ret
4340   1B64             
4341   1B64             print:
4342   1B64 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4343   1B67             
4344   1B67             ; --- BEGIN INLINE ASM BLOCK
4345   1B67 FA 05 00      lea d, [bp + 5] ; $s
4346   1B6A FD 2A         mov d, [d]
4347   1B6C 07 46 1E      call _puts
4348   1B6F             ; --- END INLINE ASM BLOCK
4349   1B6F             
4350   1B6F F9            leave
4351   1B70 09            ret
4352   1B71             
4353   1B71             loadfile:
4354   1B71 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4355   1B74             
4356   1B74             ; --- BEGIN INLINE ASM BLOCK
4357   1B74 FA 07 00      lea d, [bp + 7] ; $destination
4358   1B77 15            mov a, [d]
4359   1B78 4F            mov di, a
4360   1B79 FA 05 00      lea d, [bp + 5] ; $filename
4361   1B7C FD 2A         mov d, [d]
4362   1B7E 19 14         mov al, 20
4363   1B80 05 04         syscall sys_filesystem
4364   1B82             ; --- END INLINE ASM BLOCK
4365   1B82             
4366   1B82 F9            leave
4367   1B83 09            ret
4368   1B84             
4369   1B84             create_file:
4370   1B84 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4371   1B87 F9            leave
4372   1B88 09            ret
4373   1B89             
4374   1B89             delete_file:
4375   1B89 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4376   1B8C             
4377   1B8C             ; --- BEGIN INLINE ASM BLOCK
4378   1B8C FA 05 00      lea d, [bp + 5] ; $filename
4379   1B8F 19 0A         mov al, 10
4380   1B91 05 04         syscall sys_filesystem
4381   1B93             ; --- END INLINE ASM BLOCK
4382   1B93             
4383   1B93 F9            leave
4384   1B94 09            ret
4385   1B95             
4386   1B95             fopen:
4387   1B95 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4388   1B98 F9            leave
4389   1B99 09            ret
4390   1B9A             
4391   1B9A             fclose:
4392   1B9A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4393   1B9D F9            leave
4394   1B9E 09            ret
4395   1B9F             
4396   1B9F             load_hex:
4397   1B9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4398   1BA2             ; $temp 
4399   1BA2 52 02 00      sub sp, 2
4400   1BA5             ;; temp = alloc(32768); 
4401   1BA5 FA FF FF      lea d, [bp + -1] ; $temp
4402   1BA8 DA            push d
4403   1BA9 26 00 80      mov b, $8000
4404   1BAC FD AB         swp b
4405   1BAE D8            push b
4406   1BAF 07 46 07      call alloc
4407   1BB2 51 02 00      add sp, 2
4408   1BB5 E7            pop d
4409   1BB6 FD 43         mov [d], b
4410   1BB8             
4411   1BB8             ; --- BEGIN INLINE ASM BLOCK
4412   1BB8               
4413   1BB8               
4414   1BB8               
4415   1BB8               
4416   1BB8               
4417   1BB8             _load_hex:
4418   1BB8 D7            push a
4419   1BB9 D8            push b
4420   1BBA DA            push d
4421   1BBB E2            push si
4422   1BBC E3            push di
4423   1BBD 52 00 80      sub sp, $8000      
4424   1BC0 38 00 00      mov c, 0
4425   1BC3 48            mov a, sp
4426   1BC4 77            inc a
4427   1BC5 3C            mov d, a          
4428   1BC6 07 03 1D      call _gets        
4429   1BC9 4D            mov si, a
4430   1BCA             __load_hex_loop:
4431   1BCA F6            lodsb             
4432   1BCB B9 00         cmp al, 0         
4433   1BCD C6 DB 1B      jz __load_hex_ret
4434   1BD0 36            mov bh, al
4435   1BD1 F6            lodsb
4436   1BD2 2F            mov bl, al
4437   1BD3 07 BA 1C      call _atoi        
4438   1BD6 F7            stosb             
4439   1BD7 78            inc c
4440   1BD8 0A CA 1B      jmp __load_hex_loop
4441   1BDB             __load_hex_ret:
4442   1BDB 51 00 80      add sp, $8000
4443   1BDE F0            pop di
4444   1BDF EF            pop si
4445   1BE0 E7            pop d
4446   1BE1 E5            pop b
4447   1BE2 E4            pop a
4448   1BE3             ; --- END INLINE ASM BLOCK
4449   1BE3             
4450   1BE3 F9            leave
4451   1BE4 09            ret
4452   1BE5             
4453   1BE5             getparam:
4454   1BE5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4455   1BE8             ; $data 
4456   1BE8 52 01 00      sub sp, 1
4457   1BEB             
4458   1BEB             ; --- BEGIN INLINE ASM BLOCK
4459   1BEB 19 04         mov al, 4
4460   1BED FA 05 00      lea d, [bp + 5] ; $address
4461   1BF0 FD 2A         mov d, [d]
4462   1BF2 05 0C         syscall sys_system
4463   1BF4 FA 00 00      lea d, [bp + 0] ; $data
4464   1BF7 FD 3E         mov [d], bl
4465   1BF9             ; --- END INLINE ASM BLOCK
4466   1BF9             
4467   1BF9             ;; return data; 
4468   1BF9 FA 00 00      lea d, [bp + 0] ; $data
4469   1BFC 32            mov bl, [d]
4470   1BFD A7 00         mov bh, 0
4471   1BFF F9            leave
4472   1C00 09            ret
4473   1C01             
4474   1C01             clear:
4475   1C01 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4476   1C04             ;; print("\033[2J\033[H"); 
4477   1C04 26 66 20      mov b, __s5 ; "\033[2J\033[H"
4478   1C07 FD AB         swp b
4479   1C09 D8            push b
4480   1C0A 07 64 1B      call print
4481   1C0D 51 02 00      add sp, 2
4482   1C10 F9            leave
4483   1C11 09            ret
4484   1C12             
4485   1C12             include_stdio_asm:
4486   1C12 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4487   1C15             
4488   1C15             ; --- BEGIN INLINE ASM BLOCK
4489   1C15             .include "lib/asm/stdio.asm"
0001+  1C15             ;-----------------------------------------------------------------------------
0002+  1C15             ; stdio.s
0003+  1C15             ;-----------------------------------------------------------------------------
0004+  1C15             .include "lib/asm/string.asm"
0001++ 1C15             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1C15             ; string.s
0003++ 1C15             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1C15             
0005++ 1C15             
0006++ 1C15             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1C15             ; _strrev
0008++ 1C15             ; reverse a string
0009++ 1C15             ; D = string address
0010++ 1C15             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1C15             ; 01234
0012++ 1C15             _strrev:
0013++ 1C15 4B          	pusha
0014++ 1C16 07 5C 1C    	call _strlen	; length in C
0015++ 1C19 12          	mov a, c
0016++ 1C1A AF 01 00    	cmp a, 1
0017++ 1C1D D0 37 1C    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1C20 7D          	dec a
0019++ 1C21 FD 4E       	mov si, d	; beginning of string
0020++ 1C23 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1C25 59          	add d, a	; end of string
0022++ 1C26 12          	mov a, c
0023++ 1C27 FD 9B       	shr a		; divide by 2
0024++ 1C29 39          	mov c, a	; C now counts the steps
0025++ 1C2A             _strrev_L0:
0026++ 1C2A 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1C2B F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1C2C 3E          	mov [d], al	; store left char into right side
0029++ 1C2D 1B          	mov al, bl
0030++ 1C2E F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1C2F 7E          	dec c
0032++ 1C30 7F          	dec d
0033++ 1C31 C2 00 00    	cmp c, 0
0034++ 1C34 C7 2A 1C    	jne _strrev_L0
0035++ 1C37             _strrev_end:
0036++ 1C37 4C          	popa
0037++ 1C38 09          	ret
0038++ 1C39             	
0039++ 1C39             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1C39             ; _strchr
0041++ 1C39             ; search string in D for char in AL
0042++ 1C39             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1C39             _strchr:
0044++ 1C39             _strchr_L0:
0045++ 1C39 32          	mov bl, [d]
0046++ 1C3A C1 00       	cmp bl, 0
0047++ 1C3C C6 47 1C    	je _strchr_end
0048++ 1C3F BA          	cmp al, bl
0049++ 1C40 C6 47 1C    	je _strchr_end
0050++ 1C43 79          	inc d
0051++ 1C44 0A 39 1C    	jmp _strchr_L0
0052++ 1C47             _strchr_end:
0053++ 1C47 1B          	mov al, bl
0054++ 1C48 09          	ret
0055++ 1C49             
0056++ 1C49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1C49             ; _strstr
0058++ 1C49             ; find sub-string
0059++ 1C49             ; str1 in SI
0060++ 1C49             ; str2 in DI
0061++ 1C49             ; SI points to end of source string
0062++ 1C49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1C49             _strstr:
0064++ 1C49 DB          	push al
0065++ 1C4A DA          	push d
0066++ 1C4B E3          	push di
0067++ 1C4C             _strstr_loop:
0068++ 1C4C F3          	cmpsb					; compare a byte of the strings
0069++ 1C4D C7 58 1C    	jne _strstr_ret
0070++ 1C50 FC 00 00    	lea d, [di + 0]
0071++ 1C53 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1C55 C7 4C 1C    	jne _strstr_loop				; equal chars but not at end
0073++ 1C58             _strstr_ret:
0074++ 1C58 F0          	pop di
0075++ 1C59 E7          	pop d
0076++ 1C5A E8          	pop al
0077++ 1C5B 09          	ret
0078++ 1C5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1C5C             ; length of null terminated string
0080++ 1C5C             ; result in C
0081++ 1C5C             ; pointer in D
0082++ 1C5C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1C5C             _strlen:
0084++ 1C5C DA          	push d
0085++ 1C5D 38 00 00    	mov c, 0
0086++ 1C60             _strlen_L1:
0087++ 1C60 BD 00       	cmp byte [d], 0
0088++ 1C62 C6 6A 1C    	je _strlen_ret
0089++ 1C65 79          	inc d
0090++ 1C66 78          	inc c
0091++ 1C67 0A 60 1C    	jmp _strlen_L1
0092++ 1C6A             _strlen_ret:
0093++ 1C6A E7          	pop d
0094++ 1C6B 09          	ret
0095++ 1C6C             
0096++ 1C6C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1C6C             ; STRCMP
0098++ 1C6C             ; compare two strings
0099++ 1C6C             ; str1 in SI
0100++ 1C6C             ; str2 in DI
0101++ 1C6C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1C6C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1C6C             _strcmp:
0104++ 1C6C DB          	push al
0105++ 1C6D DA          	push d
0106++ 1C6E E3          	push di
0107++ 1C6F E2          	push si
0108++ 1C70             _strcmp_loop:
0109++ 1C70 F3          	cmpsb					; compare a byte of the strings
0110++ 1C71 C7 7C 1C    	jne _strcmp_ret
0111++ 1C74 FB FF FF    	lea d, [si +- 1]
0112++ 1C77 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1C79 C7 70 1C    	jne _strcmp_loop				; equal chars but not at end
0114++ 1C7C             _strcmp_ret:
0115++ 1C7C EF          	pop si
0116++ 1C7D F0          	pop di
0117++ 1C7E E7          	pop d
0118++ 1C7F E8          	pop al
0119++ 1C80 09          	ret
0120++ 1C81             
0121++ 1C81             
0122++ 1C81             ; STRCPY
0123++ 1C81             ; copy null terminated string from SI to DI
0124++ 1C81             ; source in SI
0125++ 1C81             ; destination in DI
0126++ 1C81             _strcpy:
0127++ 1C81 E2          	push si
0128++ 1C82 E3          	push di
0129++ 1C83 DB          	push al
0130++ 1C84             _strcpy_L1:
0131++ 1C84 F6          	lodsb
0132++ 1C85 F7          	stosb
0133++ 1C86 B9 00       	cmp al, 0
0134++ 1C88 C7 84 1C    	jne _strcpy_L1
0135++ 1C8B             _strcpy_end:
0136++ 1C8B E8          	pop al
0137++ 1C8C F0          	pop di
0138++ 1C8D EF          	pop si
0139++ 1C8E 09          	ret
0140++ 1C8F             
0141++ 1C8F             ; STRCAT
0142++ 1C8F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1C8F             ; source in SI
0144++ 1C8F             ; destination in DI
0145++ 1C8F             _strcat:
0146++ 1C8F E2          	push si
0147++ 1C90 E3          	push di
0148++ 1C91 D7          	push a
0149++ 1C92 DA          	push d
0150++ 1C93 50          	mov a, di
0151++ 1C94 3C          	mov d, a
0152++ 1C95             _strcat_goto_end_L1:
0153++ 1C95 BD 00       	cmp byte[d], 0
0154++ 1C97 C6 9E 1C    	je _strcat_start
0155++ 1C9A 79          	inc d
0156++ 1C9B 0A 95 1C    	jmp _strcat_goto_end_L1
0157++ 1C9E             _strcat_start:
0158++ 1C9E FD 50       	mov di, d
0159++ 1CA0             _strcat_L1:
0160++ 1CA0 F6          	lodsb
0161++ 1CA1 F7          	stosb
0162++ 1CA2 B9 00       	cmp al, 0
0163++ 1CA4 C7 A0 1C    	jne _strcat_L1
0164++ 1CA7             _strcat_end:
0165++ 1CA7 E7          	pop d
0166++ 1CA8 E4          	pop a
0167++ 1CA9 F0          	pop di
0168++ 1CAA EF          	pop si
0169++ 1CAB 09          	ret
0170++ 1CAC             
0171++ 1CAC             
0005+  1CAC             
0006+  1CAC             ;-----------------------------------------------------------------------------
0007+  1CAC             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1CAC             ; ASCII in BL
0009+  1CAC             ; result in AL
0010+  1CAC             ; ascii for F = 0100 0110
0011+  1CAC             ; ascii for 9 = 0011 1001
0012+  1CAC             ;-----------------------------------------------------------------------------
0013+  1CAC             hex_ascii_encode:
0014+  1CAC 1B            mov al, bl
0015+  1CAD 93 40         test al, $40        ; test if letter or number
0016+  1CAF C7 B5 1C      jnz hex_letter
0017+  1CB2 87 0F         and al, $0F        ; get number
0018+  1CB4 09            ret
0019+  1CB5             hex_letter:
0020+  1CB5 87 0F         and al, $0F        ; get letter
0021+  1CB7 6A 09         add al, 9
0022+  1CB9 09            ret
0023+  1CBA             
0024+  1CBA             ;-----------------------------------------------------------------------------
0025+  1CBA             ; ATOI
0026+  1CBA             ; 2 letter hex string in B
0027+  1CBA             ; 8bit integer returned in AL
0028+  1CBA             ;-----------------------------------------------------------------------------
0029+  1CBA             _atoi:
0030+  1CBA D8            push b
0031+  1CBB 07 AC 1C      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1CBE 30            mov bl, bh
0033+  1CBF DB            push al          ; save a
0034+  1CC0 07 AC 1C      call hex_ascii_encode
0035+  1CC3 EA            pop bl  
0036+  1CC4 FD 9E 04      shl al, 4
0037+  1CC7 8C            or al, bl
0038+  1CC8 E5            pop b
0039+  1CC9 09            ret  
0040+  1CCA             
0041+  1CCA             
0042+  1CCA             ;-----------------------------------------------------------------------------
0043+  1CCA             ; ITOA
0044+  1CCA             ; 8bit value in BL
0045+  1CCA             ; 2 byte ASCII result in A
0046+  1CCA             ;-----------------------------------------------------------------------------
0047+  1CCA             _itoa:
0048+  1CCA DA            push d
0049+  1CCB D8            push b
0050+  1CCC A7 00         mov bh, 0
0051+  1CCE FD A4 04      shr bl, 4  
0052+  1CD1 74            mov d, b
0053+  1CD2 1F 7A 1F      mov al, [d + s_hex_digits]
0054+  1CD5 23            mov ah, al
0055+  1CD6               
0056+  1CD6 E5            pop b
0057+  1CD7 D8            push b
0058+  1CD8 A7 00         mov bh, 0
0059+  1CDA FD 87 0F      and bl, $0F
0060+  1CDD 74            mov d, b
0061+  1CDE 1F 7A 1F      mov al, [d + s_hex_digits]
0062+  1CE1 E5            pop b
0063+  1CE2 E7            pop d
0064+  1CE3 09            ret
0065+  1CE4             
0066+  1CE4             ;-----------------------------------------------------------------------------
0067+  1CE4             ; HEX STRING TO BINARY
0068+  1CE4             ; di = destination address
0069+  1CE4             ; si = source
0070+  1CE4             ;-----------------------------------------------------------------------------
0071+  1CE4             _hex_to_int:
0072+  1CE4             _hex_to_int_L1:
0073+  1CE4 F6            lodsb          ; load from [SI] to AL
0074+  1CE5 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1CE7 C6 F4 1C      jz _hex_to_int_ret
0076+  1CEA 36            mov bh, al
0077+  1CEB F6            lodsb
0078+  1CEC 2F            mov bl, al
0079+  1CED 07 BA 1C      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1CF0 F7            stosb          ; store AL to [DI]
0081+  1CF1 0A E4 1C      jmp _hex_to_int_L1
0082+  1CF4             _hex_to_int_ret:
0083+  1CF4 09            ret    
0084+  1CF5             
0085+  1CF5             ;-----------------------------------------------------------------------------
0086+  1CF5             ; GETCHAR
0087+  1CF5             ; char in ah
0088+  1CF5             ;-----------------------------------------------------------------------------
0089+  1CF5             getch:
0090+  1CF5 DB            push al
0091+  1CF6             getch_retry:
0092+  1CF6 19 01         mov al, 1
0093+  1CF8 05 03         syscall sys_io      ; receive in AH
0094+  1CFA E8            pop al
0095+  1CFB 09            ret
0096+  1CFC             
0097+  1CFC             ;-----------------------------------------------------------------------------
0098+  1CFC             ; PUTCHAR
0099+  1CFC             ; char in ah
0100+  1CFC             ;-----------------------------------------------------------------------------
0101+  1CFC             _putchar:
0102+  1CFC D7            push a
0103+  1CFD 19 00         mov al, 0
0104+  1CFF 05 03         syscall sys_io      ; char in AH
0105+  1D01 E4            pop a
0106+  1D02 09            ret
0107+  1D03             
0108+  1D03             ;-----------------------------------------------------------------------------
0109+  1D03             ;; INPUT A STRING
0110+  1D03             ;; terminates with null
0111+  1D03             ;; pointer in D
0112+  1D03             ;-----------------------------------------------------------------------------
0113+  1D03             _gets:
0114+  1D03 D7            push a
0115+  1D04 DA            push d
0116+  1D05             _gets_loop:
0117+  1D05 19 01         mov al, 1
0118+  1D07 05 03         syscall sys_io      ; receive in AH
0119+  1D09 B9 00         cmp al, 0        ; check error code (AL)
0120+  1D0B C6 05 1D      je _gets_loop      ; if no char received, retry
0121+  1D0E             
0122+  1D0E 76 1B         cmp ah, 27
0123+  1D10 C6 31 1D      je _gets_ansi_esc
0124+  1D13 76 0A         cmp ah, $0A        ; LF
0125+  1D15 C6 9C 1D      je _gets_end
0126+  1D18 76 0D         cmp ah, $0D        ; CR
0127+  1D1A C6 9C 1D      je _gets_end
0128+  1D1D 76 5C         cmp ah, $5C        ; '\\'
0129+  1D1F C6 5D 1D      je _gets_escape
0130+  1D22               
0131+  1D22 76 08         cmp ah, $08      ; check for backspace
0132+  1D24 C6 2D 1D      je _gets_backspace
0133+  1D27             
0134+  1D27 1A            mov al, ah
0135+  1D28 3E            mov [d], al
0136+  1D29 79            inc d
0137+  1D2A 0A 05 1D      jmp _gets_loop
0138+  1D2D             _gets_backspace:
0139+  1D2D 7F            dec d
0140+  1D2E 0A 05 1D      jmp _gets_loop
0141+  1D31             _gets_ansi_esc:
0142+  1D31 19 01         mov al, 1
0143+  1D33 05 03         syscall sys_io        ; receive in AH without echo
0144+  1D35 B9 00         cmp al, 0          ; check error code (AL)
0145+  1D37 C6 31 1D      je _gets_ansi_esc    ; if no char received, retry
0146+  1D3A 76 5B         cmp ah, '['
0147+  1D3C C7 05 1D      jne _gets_loop
0148+  1D3F             _gets_ansi_esc_2:
0149+  1D3F 19 01         mov al, 1
0150+  1D41 05 03         syscall sys_io          ; receive in AH without echo
0151+  1D43 B9 00         cmp al, 0            ; check error code (AL)
0152+  1D45 C6 3F 1D      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1D48 76 44         cmp ah, 'D'
0154+  1D4A C6 55 1D      je _gets_left_arrow
0155+  1D4D 76 43         cmp ah, 'C'
0156+  1D4F C6 59 1D      je _gets_right_arrow
0157+  1D52 0A 05 1D      jmp _gets_loop
0158+  1D55             _gets_left_arrow:
0159+  1D55 7F            dec d
0160+  1D56 0A 05 1D      jmp _gets_loop
0161+  1D59             _gets_right_arrow:
0162+  1D59 79            inc d
0163+  1D5A 0A 05 1D      jmp _gets_loop
0164+  1D5D             _gets_escape:
0165+  1D5D 19 01         mov al, 1
0166+  1D5F 05 03         syscall sys_io      ; receive in AH
0167+  1D61 B9 00         cmp al, 0        ; check error code (AL)
0168+  1D63 C6 5D 1D      je _gets_escape      ; if no char received, retry
0169+  1D66 76 6E         cmp ah, 'n'
0170+  1D68 C6 87 1D      je _gets_LF
0171+  1D6B 76 72         cmp ah, 'r'
0172+  1D6D C6 8E 1D      je _gets_CR
0173+  1D70 76 30         cmp ah, '0'
0174+  1D72 C6 95 1D      je _gets_NULL
0175+  1D75 76 5C         cmp ah, $5C  ; '\'
0176+  1D77 C6 80 1D      je _gets_slash
0177+  1D7A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1D7B 3E            mov [d], al
0179+  1D7C 79            inc d
0180+  1D7D 0A 05 1D      jmp _gets_loop
0181+  1D80             _gets_slash:
0182+  1D80 19 5C         mov al, $5C
0183+  1D82 3E            mov [d], al
0184+  1D83 79            inc d
0185+  1D84 0A 05 1D      jmp _gets_loop
0186+  1D87             _gets_LF:
0187+  1D87 19 0A         mov al, $0A
0188+  1D89 3E            mov [d], al
0189+  1D8A 79            inc d
0190+  1D8B 0A 05 1D      jmp _gets_loop
0191+  1D8E             _gets_CR:
0192+  1D8E 19 0D         mov al, $0D
0193+  1D90 3E            mov [d], al
0194+  1D91 79            inc d
0195+  1D92 0A 05 1D      jmp _gets_loop
0196+  1D95             _gets_NULL:
0197+  1D95 19 00         mov al, $00
0198+  1D97 3E            mov [d], al
0199+  1D98 79            inc d
0200+  1D99 0A 05 1D      jmp _gets_loop
0201+  1D9C             _gets_end:
0202+  1D9C 19 00         mov al, 0
0203+  1D9E 3E            mov [d], al        ; terminate string
0204+  1D9F E7            pop d
0205+  1DA0 E4            pop a
0206+  1DA1 09            ret
0207+  1DA2             
0208+  1DA2             ;-----------------------------------------------------------------------------
0209+  1DA2             ;; INPUT TEXT
0210+  1DA2             ;; terminated with CTRL+D
0211+  1DA2             ;; pointer in D
0212+  1DA2             ;-----------------------------------------------------------------------------
0213+  1DA2             _gettxt:
0214+  1DA2 D7            push a
0215+  1DA3 DA            push d
0216+  1DA4             _gettxt_loop:
0217+  1DA4 19 01         mov al, 1
0218+  1DA6 05 03         syscall sys_io      ; receive in AH
0219+  1DA8 B9 00         cmp al, 0        ; check error code (AL)
0220+  1DAA C6 A4 1D      je _gettxt_loop    ; if no char received, retry
0221+  1DAD 76 04         cmp ah, 4      ; EOT
0222+  1DAF C6 ED 1D      je _gettxt_end
0223+  1DB2 76 08         cmp ah, $08      ; check for backspace
0224+  1DB4 C6 E9 1D      je _gettxt_backspace
0225+  1DB7 76 5C         cmp ah, $5C        ; '\'
0226+  1DB9 C6 C2 1D      je _gettxt_escape
0227+  1DBC 1A            mov al, ah
0228+  1DBD 3E            mov [d], al
0229+  1DBE 79            inc d
0230+  1DBF 0A A4 1D      jmp _gettxt_loop
0231+  1DC2             _gettxt_escape:
0232+  1DC2 19 01         mov al, 1
0233+  1DC4 05 03         syscall sys_io      ; receive in AH
0234+  1DC6 B9 00         cmp al, 0        ; check error code (AL)
0235+  1DC8 C6 C2 1D      je _gettxt_escape    ; if no char received, retry
0236+  1DCB 76 6E         cmp ah, 'n'
0237+  1DCD C6 DB 1D      je _gettxt_LF
0238+  1DD0 76 72         cmp ah, 'r'
0239+  1DD2 C6 E2 1D      je _gettxt_CR
0240+  1DD5 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1DD6 3E            mov [d], al
0242+  1DD7 79            inc d
0243+  1DD8 0A A4 1D      jmp _gettxt_loop
0244+  1DDB             _gettxt_LF:
0245+  1DDB 19 0A         mov al, $0A
0246+  1DDD 3E            mov [d], al
0247+  1DDE 79            inc d
0248+  1DDF 0A A4 1D      jmp _gettxt_loop
0249+  1DE2             _gettxt_CR:
0250+  1DE2 19 0D         mov al, $0D
0251+  1DE4 3E            mov [d], al
0252+  1DE5 79            inc d
0253+  1DE6 0A A4 1D      jmp _gettxt_loop
0254+  1DE9             _gettxt_backspace:
0255+  1DE9 7F            dec d
0256+  1DEA 0A A4 1D      jmp _gettxt_loop
0257+  1DED             _gettxt_end:
0258+  1DED 19 00         mov al, 0
0259+  1DEF 3E            mov [d], al        ; terminate string
0260+  1DF0 E7            pop d
0261+  1DF1 E4            pop a
0262+  1DF2 09            ret
0263+  1DF3             
0264+  1DF3             ;-----------------------------------------------------------------------------
0265+  1DF3             ; PRINT NEW LINE
0266+  1DF3             ;-----------------------------------------------------------------------------
0267+  1DF3             printnl:
0268+  1DF3 D7            push a
0269+  1DF4 10 00 0A      mov a, $0A00
0270+  1DF7 05 03         syscall sys_io
0271+  1DF9 10 00 0D      mov a, $0D00
0272+  1DFC 05 03         syscall sys_io
0273+  1DFE E4            pop a
0274+  1DFF 09            ret
0275+  1E00             
0276+  1E00             ;-----------------------------------------------------------------------------
0277+  1E00             ; _strtoint
0278+  1E00             ; 4 digit hex string number in d
0279+  1E00             ; integer returned in A
0280+  1E00             ;-----------------------------------------------------------------------------
0281+  1E00             _strtointx:
0282+  1E00 D8            push b
0283+  1E01 32            mov bl, [d]
0284+  1E02 37            mov bh, bl
0285+  1E03 33 01 00      mov bl, [d + 1]
0286+  1E06 07 BA 1C      call _atoi        ; convert to int in AL
0287+  1E09 23            mov ah, al        ; move to AH
0288+  1E0A 33 02 00      mov bl, [d + 2]
0289+  1E0D 37            mov bh, bl
0290+  1E0E 33 03 00      mov bl, [d + 3]
0291+  1E11 07 BA 1C      call _atoi        ; convert to int in AL
0292+  1E14 E5            pop b
0293+  1E15 09            ret
0294+  1E16             
0295+  1E16             ;-----------------------------------------------------------------------------
0296+  1E16             ; _strtoint
0297+  1E16             ; 5 digit base10 string number in d
0298+  1E16             ; integer returned in A
0299+  1E16             ;-----------------------------------------------------------------------------
0300+  1E16             _strtoint:
0301+  1E16 E2            push si
0302+  1E17 D8            push b
0303+  1E18 D9            push c
0304+  1E19 DA            push d
0305+  1E1A 07 5C 1C      call _strlen      ; get string length in C
0306+  1E1D 7E            dec c
0307+  1E1E FD 4E         mov si, d
0308+  1E20 12            mov a, c
0309+  1E21 FD 99         shl a
0310+  1E23 3B 92 1F      mov d, table_power
0311+  1E26 59            add d, a
0312+  1E27 38 00 00      mov c, 0
0313+  1E2A             _strtoint_L0:
0314+  1E2A F6            lodsb      ; load ASCII to al
0315+  1E2B B9 00         cmp al, 0
0316+  1E2D C6 40 1E      je _strtoint_end
0317+  1E30 6F 30         sub al, $30    ; make into integer
0318+  1E32 22 00         mov ah, 0
0319+  1E34 2A            mov b, [d]
0320+  1E35 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1E36 11            mov a, b
0322+  1E37 28            mov b, c
0323+  1E38 54            add a, b
0324+  1E39 39            mov c, a
0325+  1E3A 63 02 00      sub d, 2
0326+  1E3D 0A 2A 1E      jmp _strtoint_L0
0327+  1E40             _strtoint_end:
0328+  1E40 12            mov a, c
0329+  1E41 E7            pop d
0330+  1E42 E6            pop c
0331+  1E43 E5            pop b
0332+  1E44 EF            pop si
0333+  1E45 09            ret
0334+  1E46             
0335+  1E46             ;-----------------------------------------------------------------------------
0336+  1E46             ; PRINT NULL TERMINATED STRING
0337+  1E46             ; pointer in D
0338+  1E46             ;-----------------------------------------------------------------------------
0339+  1E46             _puts:
0340+  1E46 D7            push a
0341+  1E47 DA            push d
0342+  1E48             _puts_L1:
0343+  1E48 1E            mov al, [d]
0344+  1E49 B9 00         cmp al, 0
0345+  1E4B C6 57 1E      jz _puts_END
0346+  1E4E 23            mov ah, al
0347+  1E4F 19 00         mov al, 0
0348+  1E51 05 03         syscall sys_io
0349+  1E53 79            inc d
0350+  1E54 0A 48 1E      jmp _puts_L1
0351+  1E57             _puts_END:
0352+  1E57 E7            pop d
0353+  1E58 E4            pop a
0354+  1E59 09            ret
0355+  1E5A             
0356+  1E5A             ;-----------------------------------------------------------------------------
0357+  1E5A             ; PRINT N SIZE STRING
0358+  1E5A             ; pointer in D
0359+  1E5A             ; size in C
0360+  1E5A             ;-----------------------------------------------------------------------------
0361+  1E5A             _putsn:
0362+  1E5A DB            push al
0363+  1E5B DA            push d
0364+  1E5C D9            push c
0365+  1E5D             _putsn_L0:
0366+  1E5D 1E            mov al, [d]
0367+  1E5E 23            mov ah, al
0368+  1E5F 19 00         mov al, 0
0369+  1E61 05 03         syscall sys_io
0370+  1E63 79            inc d
0371+  1E64 7E            dec c  
0372+  1E65 C2 00 00      cmp c, 0
0373+  1E68 C7 5D 1E      jne _putsn_L0
0374+  1E6B             _putsn_end:
0375+  1E6B E6            pop c
0376+  1E6C E7            pop d
0377+  1E6D E8            pop al
0378+  1E6E 09            ret
0379+  1E6F             
0380+  1E6F             ;-----------------------------------------------------------------------------
0381+  1E6F             ; print 16bit decimal number
0382+  1E6F             ; input number in A
0383+  1E6F             ;-----------------------------------------------------------------------------
0384+  1E6F             print_u16d:
0385+  1E6F D7            push a
0386+  1E70 D8            push b
0387+  1E71 26 10 27      mov b, 10000
0388+  1E74 AE            div a, b      ; get 10000's coeff.
0389+  1E75 07 97 1E      call print_number
0390+  1E78 11            mov a, b
0391+  1E79 26 E8 03      mov b, 1000
0392+  1E7C AE            div a, b      ; get 1000's coeff.
0393+  1E7D 07 97 1E      call print_number
0394+  1E80 11            mov a, b
0395+  1E81 26 64 00      mov b, 100
0396+  1E84 AE            div a, b
0397+  1E85 07 97 1E      call print_number
0398+  1E88 11            mov a, b
0399+  1E89 26 0A 00      mov b, 10
0400+  1E8C AE            div a, b
0401+  1E8D 07 97 1E      call print_number
0402+  1E90 1B            mov al, bl      ; 1's coeff in bl
0403+  1E91 07 97 1E      call print_number
0404+  1E94 E5            pop b
0405+  1E95 E4            pop a
0406+  1E96 09            ret
0407+  1E97             
0408+  1E97             ;-----------------------------------------------------------------------------
0409+  1E97             ; print AL
0410+  1E97             ;-----------------------------------------------------------------------------
0411+  1E97             print_number:
0412+  1E97 6A 30         add al, $30
0413+  1E99 23            mov ah, al
0414+  1E9A 07 FC 1C      call _putchar
0415+  1E9D 09            ret
0416+  1E9E             
0417+  1E9E             ;-----------------------------------------------------------------------------
0418+  1E9E             ; PRINT 16BIT HEX INTEGER
0419+  1E9E             ; integer value in reg B
0420+  1E9E             ;-----------------------------------------------------------------------------
0421+  1E9E             print_u16x:
0422+  1E9E D7            push a
0423+  1E9F D8            push b
0424+  1EA0 DD            push bl
0425+  1EA1 30            mov bl, bh
0426+  1EA2 07 CA 1C      call _itoa        ; convert bh to char in A
0427+  1EA5 2F            mov bl, al        ; save al
0428+  1EA6 19 00         mov al, 0
0429+  1EA8 05 03         syscall sys_io        ; display AH
0430+  1EAA 24            mov ah, bl        ; retrieve al
0431+  1EAB 19 00         mov al, 0
0432+  1EAD 05 03         syscall sys_io        ; display AL
0433+  1EAF             
0434+  1EAF EA            pop bl
0435+  1EB0 07 CA 1C      call _itoa        ; convert bh to char in A
0436+  1EB3 2F            mov bl, al        ; save al
0437+  1EB4 19 00         mov al, 0
0438+  1EB6 05 03         syscall sys_io        ; display AH
0439+  1EB8 24            mov ah, bl        ; retrieve al
0440+  1EB9 19 00         mov al, 0
0441+  1EBB 05 03         syscall sys_io        ; display AL
0442+  1EBD             
0443+  1EBD E5            pop b
0444+  1EBE E4            pop a
0445+  1EBF 09            ret
0446+  1EC0             
0447+  1EC0             ;-----------------------------------------------------------------------------
0448+  1EC0             ; INPUT 16BIT HEX INTEGER
0449+  1EC0             ; read 16bit integer into A
0450+  1EC0             ;-----------------------------------------------------------------------------
0451+  1EC0             scan_u16x:
0452+  1EC0 F8 10 00      enter 16
0453+  1EC3 D8            push b
0454+  1EC4 DA            push d
0455+  1EC5             
0456+  1EC5 FA F1 FF      lea d, [bp + -15]
0457+  1EC8 07 03 1D      call _gets        ; get number
0458+  1ECB             
0459+  1ECB 32            mov bl, [d]
0460+  1ECC 37            mov bh, bl
0461+  1ECD 33 01 00      mov bl, [d + 1]
0462+  1ED0 07 BA 1C      call _atoi        ; convert to int in AL
0463+  1ED3 23            mov ah, al        ; move to AH
0464+  1ED4             
0465+  1ED4 33 02 00      mov bl, [d + 2]
0466+  1ED7 37            mov bh, bl
0467+  1ED8 33 03 00      mov bl, [d + 3]
0468+  1EDB 07 BA 1C      call _atoi        ; convert to int in AL
0469+  1EDE             
0470+  1EDE E7            pop d
0471+  1EDF E5            pop b
0472+  1EE0 F9            leave
0473+  1EE1 09            ret
0474+  1EE2             
0475+  1EE2             ;-----------------------------------------------------------------------------
0476+  1EE2             ; PRINT 8bit HEX INTEGER
0477+  1EE2             ; integer value in reg bl
0478+  1EE2             ;-----------------------------------------------------------------------------
0479+  1EE2             print_u8x:
0480+  1EE2 D7            push a
0481+  1EE3 DD            push bl
0482+  1EE4             
0483+  1EE4 07 CA 1C      call _itoa        ; convert bl to char in A
0484+  1EE7 2F            mov bl, al        ; save al
0485+  1EE8 19 00         mov al, 0
0486+  1EEA 05 03         syscall sys_io        ; display AH
0487+  1EEC 24            mov ah, bl        ; retrieve al
0488+  1EED 19 00         mov al, 0
0489+  1EEF 05 03         syscall sys_io        ; display AL
0490+  1EF1             
0491+  1EF1 EA            pop bl
0492+  1EF2 E4            pop a
0493+  1EF3 09            ret
0494+  1EF4             
0495+  1EF4             ;-----------------------------------------------------------------------------
0496+  1EF4             ; print 8bit decimal unsigned number
0497+  1EF4             ; input number in AL
0498+  1EF4             ;-----------------------------------------------------------------------------
0499+  1EF4             print_u8d:
0500+  1EF4 D7            push a
0501+  1EF5 D8            push b
0502+  1EF6             
0503+  1EF6 22 00         mov ah, 0
0504+  1EF8 26 64 00      mov b, 100
0505+  1EFB AE            div a, b
0506+  1EFC D8            push b      ; save remainder
0507+  1EFD B9 00         cmp al, 0
0508+  1EFF C6 09 1F      je skip100
0509+  1F02 6A 30         add al, $30
0510+  1F04 23            mov ah, al
0511+  1F05 19 00         mov al, 0
0512+  1F07 05 03         syscall sys_io  ; print coeff
0513+  1F09             skip100:
0514+  1F09 E4            pop a
0515+  1F0A 22 00         mov ah, 0
0516+  1F0C 26 0A 00      mov b, 10
0517+  1F0F AE            div a, b
0518+  1F10 D8            push b      ; save remainder
0519+  1F11 B9 00         cmp al, 0
0520+  1F13 C6 1D 1F      je skip10
0521+  1F16 6A 30         add al, $30
0522+  1F18 23            mov ah, al
0523+  1F19 19 00         mov al, 0
0524+  1F1B 05 03         syscall sys_io  ; print coeff
0525+  1F1D             skip10:
0526+  1F1D E4            pop a
0527+  1F1E 1B            mov al, bl
0528+  1F1F 6A 30         add al, $30
0529+  1F21 23            mov ah, al
0530+  1F22 19 00         mov al, 0
0531+  1F24 05 03         syscall sys_io  ; print coeff
0532+  1F26 E5            pop b
0533+  1F27 E4            pop a
0534+  1F28 09            ret
0535+  1F29             
0536+  1F29             ;-----------------------------------------------------------------------------
0537+  1F29             ; INPUT 8BIT HEX INTEGER
0538+  1F29             ; read 8bit integer into AL
0539+  1F29             ;-----------------------------------------------------------------------------
0540+  1F29             scan_u8x:
0541+  1F29 F8 04 00      enter 4
0542+  1F2C D8            push b
0543+  1F2D DA            push d
0544+  1F2E             
0545+  1F2E FA FD FF      lea d, [bp + -3]
0546+  1F31 07 03 1D      call _gets        ; get number
0547+  1F34             
0548+  1F34 32            mov bl, [d]
0549+  1F35 37            mov bh, bl
0550+  1F36 33 01 00      mov bl, [d + 1]
0551+  1F39 07 BA 1C      call _atoi        ; convert to int in AL
0552+  1F3C             
0553+  1F3C E7            pop d
0554+  1F3D E5            pop b
0555+  1F3E F9            leave
0556+  1F3F 09            ret
0557+  1F40             
0558+  1F40             ;-----------------------------------------------------------------------------
0559+  1F40             ; input decimal number
0560+  1F40             ; result in A
0561+  1F40             ; 655'\0'
0562+  1F40             ; low--------high
0563+  1F40             ;-----------------------------------------------------------------------------
0564+  1F40             scan_u16d:
0565+  1F40 F8 08 00      enter 8
0566+  1F43 E2            push si
0567+  1F44 D8            push b
0568+  1F45 D9            push c
0569+  1F46 DA            push d
0570+  1F47 FA F9 FF      lea d, [bp +- 7]
0571+  1F4A 07 03 1D      call _gets
0572+  1F4D 07 5C 1C      call _strlen      ; get string length in C
0573+  1F50 7E            dec c
0574+  1F51 FD 4E         mov si, d
0575+  1F53 12            mov a, c
0576+  1F54 FD 99         shl a
0577+  1F56 3B 92 1F      mov d, table_power
0578+  1F59 59            add d, a
0579+  1F5A 38 00 00      mov c, 0
0580+  1F5D             mul_loop:
0581+  1F5D F6            lodsb      ; load ASCII to al
0582+  1F5E B9 00         cmp al, 0
0583+  1F60 C6 73 1F      je mul_exit
0584+  1F63 6F 30         sub al, $30    ; make into integer
0585+  1F65 22 00         mov ah, 0
0586+  1F67 2A            mov b, [d]
0587+  1F68 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1F69 11            mov a, b
0589+  1F6A 28            mov b, c
0590+  1F6B 54            add a, b
0591+  1F6C 39            mov c, a
0592+  1F6D 63 02 00      sub d, 2
0593+  1F70 0A 5D 1F      jmp mul_loop
0594+  1F73             mul_exit:
0595+  1F73 12            mov a, c
0596+  1F74 E7            pop d
0597+  1F75 E6            pop c
0598+  1F76 E5            pop b
0599+  1F77 EF            pop si
0600+  1F78 F9            leave
0601+  1F79 09            ret
0602+  1F7A             
0603+  1F7A 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1F7E 34 35 36 37 
0603+  1F82 38 39 41 42 
0603+  1F86 43 44 45 46 
0604+  1F8A 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1F8E 1B 5B 48 00 
0605+  1F92             
0606+  1F92             table_power:
0607+  1F92 01 00         .dw 1
0608+  1F94 0A 00         .dw 10
0609+  1F96 64 00         .dw 100
0610+  1F98 E8 03         .dw 1000
0611+  1F9A 10 27         .dw 100004490   1F9C             ; --- END INLINE ASM BLOCK
4491   1F9C             
4492   1F9C F9            leave
4493   1F9D 09            ret
4494   1F9E             ; --- END TEXT BLOCK
4495   1F9E             
4496   1F9E             ; --- BEGIN DATA BLOCK
4497   1F9E 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4497   1FA2 45 46 47 48 
4497   1FA6 49 4A 4B 4C 
4497   1FAA 4D 4E 4F 50 
4497   1FAE 51 52 53 54 
4497   1FB2 55 56 57 58 
4497   1FB6 59 5A 61 62 
4497   1FBA 63 64 65 66 
4497   1FBE 67 68 69 6A 
4497   1FC2 6B 6C 6D 6E 
4497   1FC6 6F 70 71 72 
4497   1FCA 73 74 75 76 
4497   1FCE 77 78 79 7A 
4497   1FD2 30 31 32 33 
4497   1FD6 34 35 36 37 
4497   1FDA 38 39 2B 2F 
4497   1FDE 00 
4498   1FDF 9E 1F       _base64_table: .dw _base64_table_data
4499   1FE1 45 6E 74 65 __s0: .db "Enter number: %d Enter String: %s", 0
4499   1FE5 72 20 6E 75 
4499   1FE9 6D 62 65 72 
4499   1FED 3A 20 25 64 
4499   1FF1 20 45 6E 74 
4499   1FF5 65 72 20 53 
4499   1FF9 74 72 69 6E 
4499   1FFD 67 3A 20 25 
4499   2001 73 00 
4500   2003 4F 6B 00    __s1: .db "Ok", 0
4501   2006 54 68 65 20 __s2: .db "The number is: %d\nThe string is: %s", 0
4501   200A 6E 75 6D 62 
4501   200E 65 72 20 69 
4501   2012 73 3A 20 25 
4501   2016 64 0A 54 68 
4501   201A 65 20 73 74 
4501   201E 72 69 6E 67 
4501   2022 20 69 73 3A 
4501   2026 20 25 73 00 
4502   202A 55 6E 65 78 __s3: .db "Unexpected format in printf.", 0
4502   202E 70 65 63 74 
4502   2032 65 64 20 66 
4502   2036 6F 72 6D 61 
4502   203A 74 20 69 6E 
4502   203E 20 70 72 69 
4502   2042 6E 74 66 2E 
4502   2046 00 
4503   2047 45 72 72 6F __s4: .db "Error: Unknown argument type.\n", 0
4503   204B 72 3A 20 55 
4503   204F 6E 6B 6E 6F 
4503   2053 77 6E 20 61 
4503   2057 72 67 75 6D 
4503   205B 65 6E 74 20 
4503   205F 74 79 70 65 
4503   2063 2E 0A 00 
4504   2066 1B 5B 32 4A __s5: .db "\033[2J\033[H", 0
4504   206A 1B 5B 48 00 
4505   206E             
4506   206E 70 20       _heap_top: .dw _heap
4507   2070 00          _heap: .db 0
4508   2071             ; --- END DATA BLOCK
4509   2071             
4510   2071             .end
tasm: Number of errors = 0
