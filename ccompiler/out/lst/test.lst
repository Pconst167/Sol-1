0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; print_signed_long(4294967257L); 
0011   0408 26 D9 FF      mov b, $ffd9
0012   040B 38 FF FF      mov c, $ffff
0013   040E FD 79         mov g, b
0014   0410 28            mov b, c
0015   0411 FD AB         swp b
0016   0413 D8            push b
0017   0414 FD 27         mov b, g
0018   0416 D8            push b
0019   0417 07 B9 07      call print_signed_long
0020   041A 51 04 00      add sp, 4
0021   041D 05 0B         syscall sys_terminate_proc
0022   041F             
0023   041F             putchar:
0024   041F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0025   0422             
0026   0422             ; --- BEGIN INLINE ASM BLOCK
0027   0422 FA 05 00      lea d, [bp + 5] ; $c
0028   0425 1E            mov al, [d]
0029   0426 23            mov ah, al
0030   0427 07 17 05      call _putchar
0031   042A             ; --- END INLINE ASM BLOCK
0032   042A             
0033   042A F9            leave
0034   042B 09            ret
0035   042C             
0036   042C             include_stdio_asm:
0037   042C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0038   042F             
0039   042F             ; --- BEGIN INLINE ASM BLOCK
0040   042F             .include "lib/asm/stdio.asm"
0001+  042F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  042F             ; stdio.s
0003+  042F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  042F             .include "lib/asm/string.asm"
0001++ 042F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 042F             ; string.s
0003++ 042F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 042F             
0005++ 042F             
0006++ 042F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 042F             ; _strrev
0008++ 042F             ; reverse a string
0009++ 042F             ; D = string address
0010++ 042F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 042F             ; 01234
0012++ 042F             _strrev:
0013++ 042F 4B          	pusha
0014++ 0430 07 76 04    	call _strlen	; length in C
0015++ 0433 12          	mov a, c
0016++ 0434 AF 01 00    	cmp a, 1
0017++ 0437 D0 51 04    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 043A 7D          	dec a
0019++ 043B FD 4E       	mov si, d	; beginning of string
0020++ 043D FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 043F 59          	add d, a	; end of string
0022++ 0440 12          	mov a, c
0023++ 0441 FD 9B       	shr a		; divide by 2
0024++ 0443 39          	mov c, a	; C now counts the steps
0025++ 0444             _strrev_L0:
0026++ 0444 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0445 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0446 3E          	mov [d], al	; store left char into right side
0029++ 0447 1B          	mov al, bl
0030++ 0448 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0449 7E          	dec c
0032++ 044A 7F          	dec d
0033++ 044B C2 00 00    	cmp c, 0
0034++ 044E C7 44 04    	jne _strrev_L0
0035++ 0451             _strrev_end:
0036++ 0451 4C          	popa
0037++ 0452 09          	ret
0038++ 0453             	
0039++ 0453             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0453             ; _strchr
0041++ 0453             ; search string in D for char in AL
0042++ 0453             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0453             _strchr:
0044++ 0453             _strchr_L0:
0045++ 0453 32          	mov bl, [d]
0046++ 0454 C1 00       	cmp bl, 0
0047++ 0456 C6 61 04    	je _strchr_end
0048++ 0459 BA          	cmp al, bl
0049++ 045A C6 61 04    	je _strchr_end
0050++ 045D 79          	inc d
0051++ 045E 0A 53 04    	jmp _strchr_L0
0052++ 0461             _strchr_end:
0053++ 0461 1B          	mov al, bl
0054++ 0462 09          	ret
0055++ 0463             
0056++ 0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0463             ; _strstr
0058++ 0463             ; find sub-string
0059++ 0463             ; str1 in SI
0060++ 0463             ; str2 in DI
0061++ 0463             ; SI points to end of source string
0062++ 0463             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0463             _strstr:
0064++ 0463 DB          	push al
0065++ 0464 DA          	push d
0066++ 0465 E3          	push di
0067++ 0466             _strstr_loop:
0068++ 0466 F3          	cmpsb					; compare a byte of the strings
0069++ 0467 C7 72 04    	jne _strstr_ret
0070++ 046A FC 00 00    	lea d, [di + 0]
0071++ 046D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 046F C7 66 04    	jne _strstr_loop				; equal chars but not at end
0073++ 0472             _strstr_ret:
0074++ 0472 F0          	pop di
0075++ 0473 E7          	pop d
0076++ 0474 E8          	pop al
0077++ 0475 09          	ret
0078++ 0476             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0476             ; length of null terminated string
0080++ 0476             ; result in C
0081++ 0476             ; pointer in D
0082++ 0476             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0476             _strlen:
0084++ 0476 DA          	push d
0085++ 0477 38 00 00    	mov c, 0
0086++ 047A             _strlen_L1:
0087++ 047A BD 00       	cmp byte [d], 0
0088++ 047C C6 84 04    	je _strlen_ret
0089++ 047F 79          	inc d
0090++ 0480 78          	inc c
0091++ 0481 0A 7A 04    	jmp _strlen_L1
0092++ 0484             _strlen_ret:
0093++ 0484 E7          	pop d
0094++ 0485 09          	ret
0095++ 0486             
0096++ 0486             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0486             ; STRCMP
0098++ 0486             ; compare two strings
0099++ 0486             ; str1 in SI
0100++ 0486             ; str2 in DI
0101++ 0486             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0486             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0486             _strcmp:
0104++ 0486 DB          	push al
0105++ 0487 DA          	push d
0106++ 0488 E3          	push di
0107++ 0489 E2          	push si
0108++ 048A             _strcmp_loop:
0109++ 048A F3          	cmpsb					; compare a byte of the strings
0110++ 048B C7 96 04    	jne _strcmp_ret
0111++ 048E FB FF FF    	lea d, [si +- 1]
0112++ 0491 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0493 C7 8A 04    	jne _strcmp_loop				; equal chars but not at end
0114++ 0496             _strcmp_ret:
0115++ 0496 EF          	pop si
0116++ 0497 F0          	pop di
0117++ 0498 E7          	pop d
0118++ 0499 E8          	pop al
0119++ 049A 09          	ret
0120++ 049B             
0121++ 049B             
0122++ 049B             ; STRCPY
0123++ 049B             ; copy null terminated string from SI to DI
0124++ 049B             ; source in SI
0125++ 049B             ; destination in DI
0126++ 049B             _strcpy:
0127++ 049B E2          	push si
0128++ 049C E3          	push di
0129++ 049D DB          	push al
0130++ 049E             _strcpy_L1:
0131++ 049E F6          	lodsb
0132++ 049F F7          	stosb
0133++ 04A0 B9 00       	cmp al, 0
0134++ 04A2 C7 9E 04    	jne _strcpy_L1
0135++ 04A5             _strcpy_end:
0136++ 04A5 E8          	pop al
0137++ 04A6 F0          	pop di
0138++ 04A7 EF          	pop si
0139++ 04A8 09          	ret
0140++ 04A9             
0141++ 04A9             ; STRCAT
0142++ 04A9             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 04A9             ; source in SI
0144++ 04A9             ; destination in DI
0145++ 04A9             _strcat:
0146++ 04A9 E2          	push si
0147++ 04AA E3          	push di
0148++ 04AB D7          	push a
0149++ 04AC DA          	push d
0150++ 04AD 50          	mov a, di
0151++ 04AE 3C          	mov d, a
0152++ 04AF             _strcat_goto_end_L1:
0153++ 04AF BD 00       	cmp byte[d], 0
0154++ 04B1 C6 B8 04    	je _strcat_start
0155++ 04B4 79          	inc d
0156++ 04B5 0A AF 04    	jmp _strcat_goto_end_L1
0157++ 04B8             _strcat_start:
0158++ 04B8 FD 50       	mov di, d
0159++ 04BA             _strcat_L1:
0160++ 04BA F6          	lodsb
0161++ 04BB F7          	stosb
0162++ 04BC B9 00       	cmp al, 0
0163++ 04BE C7 BA 04    	jne _strcat_L1
0164++ 04C1             _strcat_end:
0165++ 04C1 E7          	pop d
0166++ 04C2 E4          	pop a
0167++ 04C3 F0          	pop di
0168++ 04C4 EF          	pop si
0169++ 04C5 09          	ret
0170++ 04C6             
0171++ 04C6             
0005+  04C6             
0006+  04C6             
0007+  04C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  04C6             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  04C6             ; ASCII in BL
0010+  04C6             ; result in AL
0011+  04C6             ; ascii for F = 0100 0110
0012+  04C6             ; ascii for 9 = 0011 1001
0013+  04C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  04C6             hex_ascii_encode:
0015+  04C6 1B            mov al, bl
0016+  04C7 93 40         test al, $40        ; test if letter or number
0017+  04C9 C7 CF 04      jnz hex_letter
0018+  04CC 87 0F         and al, $0F        ; get number
0019+  04CE 09            ret
0020+  04CF             hex_letter:
0021+  04CF 87 0F         and al, $0F        ; get letter
0022+  04D1 6A 09         add al, 9
0023+  04D3 09            ret
0024+  04D4             
0025+  04D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  04D4             ; ATOI
0027+  04D4             ; 2 letter hex string in B
0028+  04D4             ; 8bit integer returned in AL
0029+  04D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  04D4             _atoi:
0031+  04D4 D8            push b
0032+  04D5 07 C6 04      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  04D8 30            mov bl, bh
0034+  04D9 DB            push al          ; save a
0035+  04DA 07 C6 04      call hex_ascii_encode
0036+  04DD EA            pop bl  
0037+  04DE FD 9E 04      shl al, 4
0038+  04E1 8C            or al, bl
0039+  04E2 E5            pop b
0040+  04E3 09            ret  
0041+  04E4             
0042+  04E4             
0043+  04E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  04E4             ; scanf
0045+  04E4             ; no need for explanations!
0046+  04E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  04E4             scanf:
0048+  04E4 09            ret
0049+  04E5             
0050+  04E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  04E5             ; ITOA
0052+  04E5             ; 8bit value in BL
0053+  04E5             ; 2 byte ASCII result in A
0054+  04E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  04E5             _itoa:
0056+  04E5 DA            push d
0057+  04E6 D8            push b
0058+  04E7 A7 00         mov bh, 0
0059+  04E9 FD A4 04      shr bl, 4  
0060+  04EC 74            mov d, b
0061+  04ED 1F 95 07      mov al, [d + s_hex_digits]
0062+  04F0 23            mov ah, al
0063+  04F1               
0064+  04F1 E5            pop b
0065+  04F2 D8            push b
0066+  04F3 A7 00         mov bh, 0
0067+  04F5 FD 87 0F      and bl, $0F
0068+  04F8 74            mov d, b
0069+  04F9 1F 95 07      mov al, [d + s_hex_digits]
0070+  04FC E5            pop b
0071+  04FD E7            pop d
0072+  04FE 09            ret
0073+  04FF             
0074+  04FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  04FF             ; HEX STRING TO BINARY
0076+  04FF             ; di = destination address
0077+  04FF             ; si = source
0078+  04FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  04FF             _hex_to_int:
0080+  04FF             _hex_to_int_L1:
0081+  04FF F6            lodsb          ; load from [SI] to AL
0082+  0500 B9 00         cmp al, 0        ; check if ASCII 0
0083+  0502 C6 0F 05      jz _hex_to_int_ret
0084+  0505 36            mov bh, al
0085+  0506 F6            lodsb
0086+  0507 2F            mov bl, al
0087+  0508 07 D4 04      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  050B F7            stosb          ; store AL to [DI]
0089+  050C 0A FF 04      jmp _hex_to_int_L1
0090+  050F             _hex_to_int_ret:
0091+  050F 09            ret    
0092+  0510             
0093+  0510             
0094+  0510             
0095+  0510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0510             ; GETCHAR
0097+  0510             ; char in ah
0098+  0510             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0510             getch:
0100+  0510 DB            push al
0101+  0511             getch_retry:
0102+  0511 19 01         mov al, 1
0103+  0513 05 03         syscall sys_io      ; receive in AH
0104+  0515 E8            pop al
0105+  0516 09            ret
0106+  0517             
0107+  0517             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0517             ; PUTCHAR
0109+  0517             ; char in ah
0110+  0517             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0517             _putchar:
0112+  0517 D7            push a
0113+  0518 19 00         mov al, 0
0114+  051A 05 03         syscall sys_io      ; char in AH
0115+  051C E4            pop a
0116+  051D 09            ret
0117+  051E             
0118+  051E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  051E             ;; INPUT A STRING
0120+  051E             ;; terminates with null
0121+  051E             ;; pointer in D
0122+  051E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  051E             _gets:
0124+  051E D7            push a
0125+  051F DA            push d
0126+  0520             _gets_loop:
0127+  0520 19 01         mov al, 1
0128+  0522 05 03         syscall sys_io      ; receive in AH
0129+  0524 B9 00         cmp al, 0        ; check error code (AL)
0130+  0526 C6 20 05      je _gets_loop      ; if no char received, retry
0131+  0529             
0132+  0529 76 1B         cmp ah, 27
0133+  052B C6 4C 05      je _gets_ansi_esc
0134+  052E 76 0A         cmp ah, $0A        ; LF
0135+  0530 C6 B7 05      je _gets_end
0136+  0533 76 0D         cmp ah, $0D        ; CR
0137+  0535 C6 B7 05      je _gets_end
0138+  0538 76 5C         cmp ah, $5C        ; '\\'
0139+  053A C6 78 05      je _gets_escape
0140+  053D               
0141+  053D 76 08         cmp ah, $08      ; check for backspace
0142+  053F C6 48 05      je _gets_backspace
0143+  0542             
0144+  0542 1A            mov al, ah
0145+  0543 3E            mov [d], al
0146+  0544 79            inc d
0147+  0545 0A 20 05      jmp _gets_loop
0148+  0548             _gets_backspace:
0149+  0548 7F            dec d
0150+  0549 0A 20 05      jmp _gets_loop
0151+  054C             _gets_ansi_esc:
0152+  054C 19 01         mov al, 1
0153+  054E 05 03         syscall sys_io        ; receive in AH without echo
0154+  0550 B9 00         cmp al, 0          ; check error code (AL)
0155+  0552 C6 4C 05      je _gets_ansi_esc    ; if no char received, retry
0156+  0555 76 5B         cmp ah, '['
0157+  0557 C7 20 05      jne _gets_loop
0158+  055A             _gets_ansi_esc_2:
0159+  055A 19 01         mov al, 1
0160+  055C 05 03         syscall sys_io          ; receive in AH without echo
0161+  055E B9 00         cmp al, 0            ; check error code (AL)
0162+  0560 C6 5A 05      je _gets_ansi_esc_2  ; if no char received, retry
0163+  0563 76 44         cmp ah, 'D'
0164+  0565 C6 70 05      je _gets_left_arrow
0165+  0568 76 43         cmp ah, 'C'
0166+  056A C6 74 05      je _gets_right_arrow
0167+  056D 0A 20 05      jmp _gets_loop
0168+  0570             _gets_left_arrow:
0169+  0570 7F            dec d
0170+  0571 0A 20 05      jmp _gets_loop
0171+  0574             _gets_right_arrow:
0172+  0574 79            inc d
0173+  0575 0A 20 05      jmp _gets_loop
0174+  0578             _gets_escape:
0175+  0578 19 01         mov al, 1
0176+  057A 05 03         syscall sys_io      ; receive in AH
0177+  057C B9 00         cmp al, 0        ; check error code (AL)
0178+  057E C6 78 05      je _gets_escape      ; if no char received, retry
0179+  0581 76 6E         cmp ah, 'n'
0180+  0583 C6 A2 05      je _gets_LF
0181+  0586 76 72         cmp ah, 'r'
0182+  0588 C6 A9 05      je _gets_CR
0183+  058B 76 30         cmp ah, '0'
0184+  058D C6 B0 05      je _gets_NULL
0185+  0590 76 5C         cmp ah, $5C  ; '\'
0186+  0592 C6 9B 05      je _gets_slash
0187+  0595 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  0596 3E            mov [d], al
0189+  0597 79            inc d
0190+  0598 0A 20 05      jmp _gets_loop
0191+  059B             _gets_slash:
0192+  059B 19 5C         mov al, $5C
0193+  059D 3E            mov [d], al
0194+  059E 79            inc d
0195+  059F 0A 20 05      jmp _gets_loop
0196+  05A2             _gets_LF:
0197+  05A2 19 0A         mov al, $0A
0198+  05A4 3E            mov [d], al
0199+  05A5 79            inc d
0200+  05A6 0A 20 05      jmp _gets_loop
0201+  05A9             _gets_CR:
0202+  05A9 19 0D         mov al, $0D
0203+  05AB 3E            mov [d], al
0204+  05AC 79            inc d
0205+  05AD 0A 20 05      jmp _gets_loop
0206+  05B0             _gets_NULL:
0207+  05B0 19 00         mov al, $00
0208+  05B2 3E            mov [d], al
0209+  05B3 79            inc d
0210+  05B4 0A 20 05      jmp _gets_loop
0211+  05B7             _gets_end:
0212+  05B7 19 00         mov al, 0
0213+  05B9 3E            mov [d], al        ; terminate string
0214+  05BA E7            pop d
0215+  05BB E4            pop a
0216+  05BC 09            ret
0217+  05BD             
0218+  05BD             
0219+  05BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  05BD             ;; INPUT TEXT
0221+  05BD             ;; terminated with CTRL+D
0222+  05BD             ;; pointer in D
0223+  05BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  05BD             _gettxt:
0225+  05BD D7            push a
0226+  05BE DA            push d
0227+  05BF             _gettxt_loop:
0228+  05BF 19 01         mov al, 1
0229+  05C1 05 03         syscall sys_io      ; receive in AH
0230+  05C3 B9 00         cmp al, 0        ; check error code (AL)
0231+  05C5 C6 BF 05      je _gettxt_loop    ; if no char received, retry
0232+  05C8 76 04         cmp ah, 4      ; EOT
0233+  05CA C6 08 06      je _gettxt_end
0234+  05CD 76 08         cmp ah, $08      ; check for backspace
0235+  05CF C6 04 06      je _gettxt_backspace
0236+  05D2 76 5C         cmp ah, $5C        ; '\'
0237+  05D4 C6 DD 05      je _gettxt_escape
0238+  05D7 1A            mov al, ah
0239+  05D8 3E            mov [d], al
0240+  05D9 79            inc d
0241+  05DA 0A BF 05      jmp _gettxt_loop
0242+  05DD             _gettxt_escape:
0243+  05DD 19 01         mov al, 1
0244+  05DF 05 03         syscall sys_io      ; receive in AH
0245+  05E1 B9 00         cmp al, 0        ; check error code (AL)
0246+  05E3 C6 DD 05      je _gettxt_escape    ; if no char received, retry
0247+  05E6 76 6E         cmp ah, 'n'
0248+  05E8 C6 F6 05      je _gettxt_LF
0249+  05EB 76 72         cmp ah, 'r'
0250+  05ED C6 FD 05      je _gettxt_CR
0251+  05F0 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  05F1 3E            mov [d], al
0253+  05F2 79            inc d
0254+  05F3 0A BF 05      jmp _gettxt_loop
0255+  05F6             _gettxt_LF:
0256+  05F6 19 0A         mov al, $0A
0257+  05F8 3E            mov [d], al
0258+  05F9 79            inc d
0259+  05FA 0A BF 05      jmp _gettxt_loop
0260+  05FD             _gettxt_CR:
0261+  05FD 19 0D         mov al, $0D
0262+  05FF 3E            mov [d], al
0263+  0600 79            inc d
0264+  0601 0A BF 05      jmp _gettxt_loop
0265+  0604             _gettxt_backspace:
0266+  0604 7F            dec d
0267+  0605 0A BF 05      jmp _gettxt_loop
0268+  0608             _gettxt_end:
0269+  0608 19 00         mov al, 0
0270+  060A 3E            mov [d], al        ; terminate string
0271+  060B E7            pop d
0272+  060C E4            pop a
0273+  060D 09            ret
0274+  060E             
0275+  060E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  060E             ; PRINT NEW LINE
0277+  060E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  060E             printnl:
0279+  060E D7            push a
0280+  060F 10 00 0A      mov a, $0A00
0281+  0612 05 03         syscall sys_io
0282+  0614 10 00 0D      mov a, $0D00
0283+  0617 05 03         syscall sys_io
0284+  0619 E4            pop a
0285+  061A 09            ret
0286+  061B             
0287+  061B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  061B             ; _strtoint
0289+  061B             ; 4 digit hex string number in d
0290+  061B             ; integer returned in A
0291+  061B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  061B             _strtointx:
0293+  061B D8            push b
0294+  061C 32            mov bl, [d]
0295+  061D 37            mov bh, bl
0296+  061E 33 01 00      mov bl, [d + 1]
0297+  0621 07 D4 04      call _atoi        ; convert to int in AL
0298+  0624 23            mov ah, al        ; move to AH
0299+  0625 33 02 00      mov bl, [d + 2]
0300+  0628 37            mov bh, bl
0301+  0629 33 03 00      mov bl, [d + 3]
0302+  062C 07 D4 04      call _atoi        ; convert to int in AL
0303+  062F E5            pop b
0304+  0630 09            ret
0305+  0631             
0306+  0631             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  0631             ; _strtoint
0308+  0631             ; 5 digit base10 string number in d
0309+  0631             ; integer returned in A
0310+  0631             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  0631             _strtoint:
0312+  0631 E2            push si
0313+  0632 D8            push b
0314+  0633 D9            push c
0315+  0634 DA            push d
0316+  0635 07 76 04      call _strlen      ; get string length in C
0317+  0638 7E            dec c
0318+  0639 FD 4E         mov si, d
0319+  063B 12            mov a, c
0320+  063C FD 99         shl a
0321+  063E 3B AD 07      mov d, table_power
0322+  0641 59            add d, a
0323+  0642 38 00 00      mov c, 0
0324+  0645             _strtoint_L0:
0325+  0645 F6            lodsb      ; load ASCII to al
0326+  0646 B9 00         cmp al, 0
0327+  0648 C6 5B 06      je _strtoint_end
0328+  064B 6F 30         sub al, $30    ; make into integer
0329+  064D 22 00         mov ah, 0
0330+  064F 2A            mov b, [d]
0331+  0650 AC            mul a, b      ; result in B since it fits in 16bits
0332+  0651 11            mov a, b
0333+  0652 28            mov b, c
0334+  0653 54            add a, b
0335+  0654 39            mov c, a
0336+  0655 63 02 00      sub d, 2
0337+  0658 0A 45 06      jmp _strtoint_L0
0338+  065B             _strtoint_end:
0339+  065B 12            mov a, c
0340+  065C E7            pop d
0341+  065D E6            pop c
0342+  065E E5            pop b
0343+  065F EF            pop si
0344+  0660 09            ret
0345+  0661             
0346+  0661             
0347+  0661             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  0661             ; PRINT NULL TERMINATED STRING
0349+  0661             ; pointer in D
0350+  0661             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  0661             _puts:
0352+  0661 D7            push a
0353+  0662 DA            push d
0354+  0663             _puts_L1:
0355+  0663 1E            mov al, [d]
0356+  0664 B9 00         cmp al, 0
0357+  0666 C6 72 06      jz _puts_END
0358+  0669 23            mov ah, al
0359+  066A 19 00         mov al, 0
0360+  066C 05 03         syscall sys_io
0361+  066E 79            inc d
0362+  066F 0A 63 06      jmp _puts_L1
0363+  0672             _puts_END:
0364+  0672 E7            pop d
0365+  0673 E4            pop a
0366+  0674 09            ret
0367+  0675             
0368+  0675             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  0675             ; PRINT N SIZE STRING
0370+  0675             ; pointer in D
0371+  0675             ; size in C
0372+  0675             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  0675             _putsn:
0374+  0675 DB            push al
0375+  0676 DA            push d
0376+  0677 D9            push c
0377+  0678             _putsn_L0:
0378+  0678 1E            mov al, [d]
0379+  0679 23            mov ah, al
0380+  067A 19 00         mov al, 0
0381+  067C 05 03         syscall sys_io
0382+  067E 79            inc d
0383+  067F 7E            dec c  
0384+  0680 C2 00 00      cmp c, 0
0385+  0683 C7 78 06      jne _putsn_L0
0386+  0686             _putsn_end:
0387+  0686 E6            pop c
0388+  0687 E7            pop d
0389+  0688 E8            pop al
0390+  0689 09            ret
0391+  068A             
0392+  068A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  068A             ; print 16bit decimal number
0394+  068A             ; input number in A
0395+  068A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  068A             print_u16d:
0397+  068A D7            push a
0398+  068B D8            push b
0399+  068C 26 10 27      mov b, 10000
0400+  068F AE            div a, b      ; get 10000's coeff.
0401+  0690 07 B2 06      call print_number
0402+  0693 11            mov a, b
0403+  0694 26 E8 03      mov b, 1000
0404+  0697 AE            div a, b      ; get 1000's coeff.
0405+  0698 07 B2 06      call print_number
0406+  069B 11            mov a, b
0407+  069C 26 64 00      mov b, 100
0408+  069F AE            div a, b
0409+  06A0 07 B2 06      call print_number
0410+  06A3 11            mov a, b
0411+  06A4 26 0A 00      mov b, 10
0412+  06A7 AE            div a, b
0413+  06A8 07 B2 06      call print_number
0414+  06AB 1B            mov al, bl      ; 1's coeff in bl
0415+  06AC 07 B2 06      call print_number
0416+  06AF E5            pop b
0417+  06B0 E4            pop a
0418+  06B1 09            ret
0419+  06B2             
0420+  06B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  06B2             ; print AL
0422+  06B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  06B2             print_number:
0424+  06B2 6A 30         add al, $30
0425+  06B4 23            mov ah, al
0426+  06B5 07 17 05      call _putchar
0427+  06B8 09            ret
0428+  06B9             
0429+  06B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  06B9             ; PRINT 16BIT HEX INTEGER
0431+  06B9             ; integer value in reg B
0432+  06B9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  06B9             print_u16x:
0434+  06B9 D7            push a
0435+  06BA D8            push b
0436+  06BB DD            push bl
0437+  06BC 30            mov bl, bh
0438+  06BD 07 E5 04      call _itoa        ; convert bh to char in A
0439+  06C0 2F            mov bl, al        ; save al
0440+  06C1 19 00         mov al, 0
0441+  06C3 05 03         syscall sys_io        ; display AH
0442+  06C5 24            mov ah, bl        ; retrieve al
0443+  06C6 19 00         mov al, 0
0444+  06C8 05 03         syscall sys_io        ; display AL
0445+  06CA             
0446+  06CA EA            pop bl
0447+  06CB 07 E5 04      call _itoa        ; convert bh to char in A
0448+  06CE 2F            mov bl, al        ; save al
0449+  06CF 19 00         mov al, 0
0450+  06D1 05 03         syscall sys_io        ; display AH
0451+  06D3 24            mov ah, bl        ; retrieve al
0452+  06D4 19 00         mov al, 0
0453+  06D6 05 03         syscall sys_io        ; display AL
0454+  06D8             
0455+  06D8 E5            pop b
0456+  06D9 E4            pop a
0457+  06DA 09            ret
0458+  06DB             
0459+  06DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  06DB             ; INPUT 16BIT HEX INTEGER
0461+  06DB             ; read 16bit integer into A
0462+  06DB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  06DB             scan_u16x:
0464+  06DB F8 10 00      enter 16
0465+  06DE D8            push b
0466+  06DF DA            push d
0467+  06E0             
0468+  06E0 FA F1 FF      lea d, [bp + -15]
0469+  06E3 07 1E 05      call _gets        ; get number
0470+  06E6             
0471+  06E6 32            mov bl, [d]
0472+  06E7 37            mov bh, bl
0473+  06E8 33 01 00      mov bl, [d + 1]
0474+  06EB 07 D4 04      call _atoi        ; convert to int in AL
0475+  06EE 23            mov ah, al        ; move to AH
0476+  06EF             
0477+  06EF 33 02 00      mov bl, [d + 2]
0478+  06F2 37            mov bh, bl
0479+  06F3 33 03 00      mov bl, [d + 3]
0480+  06F6 07 D4 04      call _atoi        ; convert to int in AL
0481+  06F9             
0482+  06F9 E7            pop d
0483+  06FA E5            pop b
0484+  06FB F9            leave
0485+  06FC 09            ret
0486+  06FD             
0487+  06FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  06FD             ; PRINT 8bit HEX INTEGER
0489+  06FD             ; integer value in reg bl
0490+  06FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  06FD             print_u8x:
0492+  06FD D7            push a
0493+  06FE DD            push bl
0494+  06FF             
0495+  06FF 07 E5 04      call _itoa        ; convert bl to char in A
0496+  0702 2F            mov bl, al        ; save al
0497+  0703 19 00         mov al, 0
0498+  0705 05 03         syscall sys_io        ; display AH
0499+  0707 24            mov ah, bl        ; retrieve al
0500+  0708 19 00         mov al, 0
0501+  070A 05 03         syscall sys_io        ; display AL
0502+  070C             
0503+  070C EA            pop bl
0504+  070D E4            pop a
0505+  070E 09            ret
0506+  070F             
0507+  070F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  070F             ; print 8bit decimal unsigned number
0509+  070F             ; input number in AL
0510+  070F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  070F             print_u8d:
0512+  070F D7            push a
0513+  0710 D8            push b
0514+  0711             
0515+  0711 22 00         mov ah, 0
0516+  0713 26 64 00      mov b, 100
0517+  0716 AE            div a, b
0518+  0717 D8            push b      ; save remainder
0519+  0718 B9 00         cmp al, 0
0520+  071A C6 24 07      je skip100
0521+  071D 6A 30         add al, $30
0522+  071F 23            mov ah, al
0523+  0720 19 00         mov al, 0
0524+  0722 05 03         syscall sys_io  ; print coeff
0525+  0724             skip100:
0526+  0724 E4            pop a
0527+  0725 22 00         mov ah, 0
0528+  0727 26 0A 00      mov b, 10
0529+  072A AE            div a, b
0530+  072B D8            push b      ; save remainder
0531+  072C B9 00         cmp al, 0
0532+  072E C6 38 07      je skip10
0533+  0731 6A 30         add al, $30
0534+  0733 23            mov ah, al
0535+  0734 19 00         mov al, 0
0536+  0736 05 03         syscall sys_io  ; print coeff
0537+  0738             skip10:
0538+  0738 E4            pop a
0539+  0739 1B            mov al, bl
0540+  073A 6A 30         add al, $30
0541+  073C 23            mov ah, al
0542+  073D 19 00         mov al, 0
0543+  073F 05 03         syscall sys_io  ; print coeff
0544+  0741 E5            pop b
0545+  0742 E4            pop a
0546+  0743 09            ret
0547+  0744             
0548+  0744             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  0744             ; INPUT 8BIT HEX INTEGER
0550+  0744             ; read 8bit integer into AL
0551+  0744             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  0744             scan_u8x:
0553+  0744 F8 04 00      enter 4
0554+  0747 D8            push b
0555+  0748 DA            push d
0556+  0749             
0557+  0749 FA FD FF      lea d, [bp + -3]
0558+  074C 07 1E 05      call _gets        ; get number
0559+  074F             
0560+  074F 32            mov bl, [d]
0561+  0750 37            mov bh, bl
0562+  0751 33 01 00      mov bl, [d + 1]
0563+  0754 07 D4 04      call _atoi        ; convert to int in AL
0564+  0757             
0565+  0757 E7            pop d
0566+  0758 E5            pop b
0567+  0759 F9            leave
0568+  075A 09            ret
0569+  075B             
0570+  075B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  075B             ; input decimal number
0572+  075B             ; result in A
0573+  075B             ; 655'\0'
0574+  075B             ; low--------high
0575+  075B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  075B             scan_u16d:
0577+  075B F8 08 00      enter 8
0578+  075E E2            push si
0579+  075F D8            push b
0580+  0760 D9            push c
0581+  0761 DA            push d
0582+  0762 FA F9 FF      lea d, [bp +- 7]
0583+  0765 07 1E 05      call _gets
0584+  0768 07 76 04      call _strlen      ; get string length in C
0585+  076B 7E            dec c
0586+  076C FD 4E         mov si, d
0587+  076E 12            mov a, c
0588+  076F FD 99         shl a
0589+  0771 3B AD 07      mov d, table_power
0590+  0774 59            add d, a
0591+  0775 38 00 00      mov c, 0
0592+  0778             mul_loop:
0593+  0778 F6            lodsb      ; load ASCII to al
0594+  0779 B9 00         cmp al, 0
0595+  077B C6 8E 07      je mul_exit
0596+  077E 6F 30         sub al, $30    ; make into integer
0597+  0780 22 00         mov ah, 0
0598+  0782 2A            mov b, [d]
0599+  0783 AC            mul a, b      ; result in B since it fits in 16bits
0600+  0784 11            mov a, b
0601+  0785 28            mov b, c
0602+  0786 54            add a, b
0603+  0787 39            mov c, a
0604+  0788 63 02 00      sub d, 2
0605+  078B 0A 78 07      jmp mul_loop
0606+  078E             mul_exit:
0607+  078E 12            mov a, c
0608+  078F E7            pop d
0609+  0790 E6            pop c
0610+  0791 E5            pop b
0611+  0792 EF            pop si
0612+  0793 F9            leave
0613+  0794 09            ret
0614+  0795             
0615+  0795             
0616+  0795 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  0799 34 35 36 37 
0616+  079D 38 39 41 42 
0616+  07A1 43 44 45 46 
0617+  07A5 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  07A9 1B 5B 48 00 
0618+  07AD             
0619+  07AD             table_power:
0620+  07AD 01 00         .dw 1
0621+  07AF 0A 00         .dw 10
0622+  07B1 64 00         .dw 100
0623+  07B3 E8 03         .dw 1000
0624+  07B5 10 27         .dw 100000041   07B7             ; --- END INLINE ASM BLOCK
0042   07B7             
0043   07B7 F9            leave
0044   07B8 09            ret
0045   07B9             
0046   07B9             print_signed_long:
0047   07B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0048   07BC             ; $digits 
0049   07BC             ; $i 
0050   07BC 10 00 00      mov a, $0
0051   07BF 45 F5 FF      mov [bp + -11], a
0052   07C2 52 0C 00      sub sp, 12
0053   07C5             ;; if (num < 0) { 
0054   07C5             _if1_cond:
0055   07C5 FA 05 00      lea d, [bp + 5] ; $num
0056   07C8 26 00 00      mov b, $0
0057   07CB 38 00 00      mov c, $0
0058   07CE             ; START RELATIONAL
0059   07CE D7            push a
0060   07CF 11            mov a, b
0061   07D0 26 00 00      mov b, $0
0062   07D3 B0            cmp a, b
0063   07D4 FD 73         slt ; < 
0064   07D6 E4            pop a
0065   07D7             ; END RELATIONAL
0066   07D7 C0 00 00      cmp b, 0
0067   07DA C6 01 08      je _if1_else
0068   07DD             _if1_true:
0069   07DD             ;; putchar('-'); 
0070   07DD 26 2D 00      mov b, $2d
0071   07E0 DD            push bl
0072   07E1 07 1F 04      call putchar
0073   07E4 51 01 00      add sp, 1
0074   07E7             ;; num = -num; 
0075   07E7 FA 05 00      lea d, [bp + 5] ; $num
0076   07EA DA            push d
0077   07EB FA 05 00      lea d, [bp + 5] ; $num
0078   07EE 26 00 00      mov b, $0
0079   07F1 38 00 00      mov c, $0
0080   07F4 FD 97         neg b
0081   07F6 E7            pop d
0082   07F7 FD 43         mov [d], b
0083   07F9 28            mov b, c
0084   07FA FD 44 02 00   mov [d + 2], b
0085   07FE 0A 28 08      jmp _if1_exit
0086   0801             _if1_else:
0087   0801             ;; if (num == 0) { 
0088   0801             _if2_cond:
0089   0801 FA 05 00      lea d, [bp + 5] ; $num
0090   0804 26 00 00      mov b, $0
0091   0807 38 00 00      mov c, $0
0092   080A             ; START RELATIONAL
0093   080A D7            push a
0094   080B 11            mov a, b
0095   080C 26 00 00      mov b, $0
0096   080F B0            cmp a, b
0097   0810 FD 71         seq ; ==
0098   0812 E4            pop a
0099   0813             ; END RELATIONAL
0100   0813 C0 00 00      cmp b, 0
0101   0816 C6 28 08      je _if2_exit
0102   0819             _if2_true:
0103   0819             ;; putchar('0'); 
0104   0819 26 30 00      mov b, $30
0105   081C DD            push bl
0106   081D 07 1F 04      call putchar
0107   0820 51 01 00      add sp, 1
0108   0823             ;; return; 
0109   0823 F9            leave
0110   0824 09            ret
0111   0825 0A 28 08      jmp _if2_exit
0112   0828             _if2_exit:
0113   0828             _if1_exit:
0114   0828             ;; while (num > 0) { 
0115   0828             _while3_cond:
0116   0828 FA 05 00      lea d, [bp + 5] ; $num
0117   082B 26 00 00      mov b, $0
0118   082E 38 00 00      mov c, $0
0119   0831             ; START RELATIONAL
0120   0831 D7            push a
0121   0832 11            mov a, b
0122   0833 26 00 00      mov b, $0
0123   0836 B0            cmp a, b
0124   0837 FD 7F         sgt ; >
0125   0839 E4            pop a
0126   083A             ; END RELATIONAL
0127   083A C0 00 00      cmp b, 0
0128   083D C6 97 08      je _while3_exit
0129   0840             _while3_block:
0130   0840             ;; digits[i] = '0' + (num % 10); 
0131   0840 FA F7 FF      lea d, [bp + -9] ; $digits
0132   0843 D7            push a
0133   0844 DA            push d
0134   0845 FA F5 FF      lea d, [bp + -11] ; $i
0135   0848 2A            mov b, [d]
0136   0849 E7            pop d
0137   084A 5A            add d, b
0138   084B E4            pop a
0139   084C DA            push d
0140   084D 26 30 00      mov b, $30
0141   0850             ; START TERMS
0142   0850 D7            push a
0143   0851 11            mov a, b
0144   0852 FA 05 00      lea d, [bp + 5] ; $num
0145   0855 26 0A 00      mov b, $a
0146   0858 38 00 00      mov c, $0
0147   085B             ; START FACTORS
0148   085B D7            push a
0149   085C 11            mov a, b
0150   085D 26 0A 00      mov b, $a
0151   0860 AE            div a, b ; 
0152   0861 11            mov a, b
0153   0862 27            mov b, a
0154   0863 E4            pop a
0155   0864             ; END FACTORS
0156   0864 54            add a, b
0157   0865 27            mov b, a
0158   0866 E4            pop a
0159   0867             ; END TERMS
0160   0867 E7            pop d
0161   0868 FD 3E         mov [d], bl
0162   086A             ;; num = num / 10; 
0163   086A FA 05 00      lea d, [bp + 5] ; $num
0164   086D DA            push d
0165   086E FA 05 00      lea d, [bp + 5] ; $num
0166   0871 26 0A 00      mov b, $a
0167   0874 38 00 00      mov c, $0
0168   0877             ; START FACTORS
0169   0877 D7            push a
0170   0878 11            mov a, b
0171   0879 26 0A 00      mov b, $a
0172   087C AE            div a, b
0173   087D 27            mov b, a
0174   087E E4            pop a
0175   087F             ; END FACTORS
0176   087F E7            pop d
0177   0880 FD 43         mov [d], b
0178   0882 28            mov b, c
0179   0883 FD 44 02 00   mov [d + 2], b
0180   0887             ;; i++; 
0181   0887 FA F5 FF      lea d, [bp + -11] ; $i
0182   088A 2A            mov b, [d]
0183   088B D8            push b
0184   088C FD 77         inc b
0185   088E FA F5 FF      lea d, [bp + -11] ; $i
0186   0891 FD 43         mov [d], b
0187   0893 E5            pop b
0188   0894 0A 28 08      jmp _while3_cond
0189   0897             _while3_exit:
0190   0897             ;; while (i > 0) { 
0191   0897             _while4_cond:
0192   0897 FA F5 FF      lea d, [bp + -11] ; $i
0193   089A 2A            mov b, [d]
0194   089B             ; START RELATIONAL
0195   089B D7            push a
0196   089C 11            mov a, b
0197   089D 26 00 00      mov b, $0
0198   08A0 B0            cmp a, b
0199   08A1 FD 7F         sgt ; >
0200   08A3 E4            pop a
0201   08A4             ; END RELATIONAL
0202   08A4 C0 00 00      cmp b, 0
0203   08A7 C6 D0 08      je _while4_exit
0204   08AA             _while4_block:
0205   08AA             ;; i--; 
0206   08AA FA F5 FF      lea d, [bp + -11] ; $i
0207   08AD 2A            mov b, [d]
0208   08AE D8            push b
0209   08AF FD 7D         dec b
0210   08B1 FA F5 FF      lea d, [bp + -11] ; $i
0211   08B4 FD 43         mov [d], b
0212   08B6 E5            pop b
0213   08B7             ;; putchar(digits[i]); 
0214   08B7 FA F7 FF      lea d, [bp + -9] ; $digits
0215   08BA D7            push a
0216   08BB DA            push d
0217   08BC FA F5 FF      lea d, [bp + -11] ; $i
0218   08BF 2A            mov b, [d]
0219   08C0 E7            pop d
0220   08C1 5A            add d, b
0221   08C2 E4            pop a
0222   08C3 32            mov bl, [d]
0223   08C4 A7 00         mov bh, 0
0224   08C6 DD            push bl
0225   08C7 07 1F 04      call putchar
0226   08CA 51 01 00      add sp, 1
0227   08CD 0A 97 08      jmp _while4_cond
0228   08D0             _while4_exit:
0229   08D0 F9            leave
0230   08D1 09            ret
0231   08D2             
0232   08D2             print_unsigned_long:
0233   08D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0234   08D5             ; $digits 
0235   08D5             ; $i 
0236   08D5 52 0C 00      sub sp, 12
0237   08D8             ;; i = 0; 
0238   08D8 FA F5 FF      lea d, [bp + -11] ; $i
0239   08DB DA            push d
0240   08DC 26 00 00      mov b, $0
0241   08DF E7            pop d
0242   08E0 FD 43         mov [d], b
0243   08E2             ;; if(num == 0){ 
0244   08E2             _if5_cond:
0245   08E2 FA 05 00      lea d, [bp + 5] ; $num
0246   08E5 26 00 00      mov b, $0
0247   08E8 38 00 00      mov c, $0
0248   08EB             ; START RELATIONAL
0249   08EB D7            push a
0250   08EC 11            mov a, b
0251   08ED 26 00 00      mov b, $0
0252   08F0 B0            cmp a, b
0253   08F1 FD 71         seq ; ==
0254   08F3 E4            pop a
0255   08F4             ; END RELATIONAL
0256   08F4 C0 00 00      cmp b, 0
0257   08F7 C6 09 09      je _if5_exit
0258   08FA             _if5_true:
0259   08FA             ;; putchar('0'); 
0260   08FA 26 30 00      mov b, $30
0261   08FD DD            push bl
0262   08FE 07 1F 04      call putchar
0263   0901 51 01 00      add sp, 1
0264   0904             ;; return; 
0265   0904 F9            leave
0266   0905 09            ret
0267   0906 0A 09 09      jmp _if5_exit
0268   0909             _if5_exit:
0269   0909             ;; while (num > 0) { 
0270   0909             _while6_cond:
0271   0909 FA 05 00      lea d, [bp + 5] ; $num
0272   090C 26 00 00      mov b, $0
0273   090F 38 00 00      mov c, $0
0274   0912             ; START RELATIONAL
0275   0912 D7            push a
0276   0913 11            mov a, b
0277   0914 26 00 00      mov b, $0
0278   0917 B0            cmp a, b
0279   0918 FD 81         sgu ; > (unsigned)
0280   091A E4            pop a
0281   091B             ; END RELATIONAL
0282   091B C0 00 00      cmp b, 0
0283   091E C6 78 09      je _while6_exit
0284   0921             _while6_block:
0285   0921             ;; digits[i] = '0' + (num % 10); 
0286   0921 FA F7 FF      lea d, [bp + -9] ; $digits
0287   0924 D7            push a
0288   0925 DA            push d
0289   0926 FA F5 FF      lea d, [bp + -11] ; $i
0290   0929 2A            mov b, [d]
0291   092A E7            pop d
0292   092B 5A            add d, b
0293   092C E4            pop a
0294   092D DA            push d
0295   092E 26 30 00      mov b, $30
0296   0931             ; START TERMS
0297   0931 D7            push a
0298   0932 11            mov a, b
0299   0933 FA 05 00      lea d, [bp + 5] ; $num
0300   0936 26 0A 00      mov b, $a
0301   0939 38 00 00      mov c, $0
0302   093C             ; START FACTORS
0303   093C D7            push a
0304   093D 11            mov a, b
0305   093E 26 0A 00      mov b, $a
0306   0941 AE            div a, b ; 
0307   0942 11            mov a, b
0308   0943 27            mov b, a
0309   0944 E4            pop a
0310   0945             ; END FACTORS
0311   0945 54            add a, b
0312   0946 27            mov b, a
0313   0947 E4            pop a
0314   0948             ; END TERMS
0315   0948 E7            pop d
0316   0949 FD 3E         mov [d], bl
0317   094B             ;; num = num / 10; 
0318   094B FA 05 00      lea d, [bp + 5] ; $num
0319   094E DA            push d
0320   094F FA 05 00      lea d, [bp + 5] ; $num
0321   0952 26 0A 00      mov b, $a
0322   0955 38 00 00      mov c, $0
0323   0958             ; START FACTORS
0324   0958 D7            push a
0325   0959 11            mov a, b
0326   095A 26 0A 00      mov b, $a
0327   095D AE            div a, b
0328   095E 27            mov b, a
0329   095F E4            pop a
0330   0960             ; END FACTORS
0331   0960 E7            pop d
0332   0961 FD 43         mov [d], b
0333   0963 28            mov b, c
0334   0964 FD 44 02 00   mov [d + 2], b
0335   0968             ;; i++; 
0336   0968 FA F5 FF      lea d, [bp + -11] ; $i
0337   096B 2A            mov b, [d]
0338   096C D8            push b
0339   096D FD 77         inc b
0340   096F FA F5 FF      lea d, [bp + -11] ; $i
0341   0972 FD 43         mov [d], b
0342   0974 E5            pop b
0343   0975 0A 09 09      jmp _while6_cond
0344   0978             _while6_exit:
0345   0978             ;; while (i > 0) { 
0346   0978             _while7_cond:
0347   0978 FA F5 FF      lea d, [bp + -11] ; $i
0348   097B 2A            mov b, [d]
0349   097C             ; START RELATIONAL
0350   097C D7            push a
0351   097D 11            mov a, b
0352   097E 26 00 00      mov b, $0
0353   0981 B0            cmp a, b
0354   0982 FD 7F         sgt ; >
0355   0984 E4            pop a
0356   0985             ; END RELATIONAL
0357   0985 C0 00 00      cmp b, 0
0358   0988 C6 B1 09      je _while7_exit
0359   098B             _while7_block:
0360   098B             ;; i--; 
0361   098B FA F5 FF      lea d, [bp + -11] ; $i
0362   098E 2A            mov b, [d]
0363   098F D8            push b
0364   0990 FD 7D         dec b
0365   0992 FA F5 FF      lea d, [bp + -11] ; $i
0366   0995 FD 43         mov [d], b
0367   0997 E5            pop b
0368   0998             ;; putchar(digits[i]); 
0369   0998 FA F7 FF      lea d, [bp + -9] ; $digits
0370   099B D7            push a
0371   099C DA            push d
0372   099D FA F5 FF      lea d, [bp + -11] ; $i
0373   09A0 2A            mov b, [d]
0374   09A1 E7            pop d
0375   09A2 5A            add d, b
0376   09A3 E4            pop a
0377   09A4 32            mov bl, [d]
0378   09A5 A7 00         mov bh, 0
0379   09A7 DD            push bl
0380   09A8 07 1F 04      call putchar
0381   09AB 51 01 00      add sp, 1
0382   09AE 0A 78 09      jmp _while7_cond
0383   09B1             _while7_exit:
0384   09B1 F9            leave
0385   09B2 09            ret
0386   09B3             ; --- END TEXT BLOCK
0387   09B3             
0388   09B3             ; --- BEGIN DATA BLOCK
0389   09B3             
0390   09B3 B5 09       _heap_top: .dw _heap
0391   09B5 00          _heap: .db 0
0392   09B6             ; --- END DATA BLOCK
0393   09B6             
0394   09B6             .end
tasm: Number of errors = 0
