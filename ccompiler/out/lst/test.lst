0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; myfunc(2); 
0011   0408             ; --- START FUNCTION CALL
0012   0408 FD 2E 02 00   mov32 cb, $00000002
0012   040C 00 00 
0013   040E FD AB         swp b
0014   0410 D8            push b
0015   0411 07 34 04      call myfunc
0016   0414 51 02 00      add sp, 2
0017   0417             ; --- END FUNCTION CALL
0018   0417             ; printf(	"hello world"    ); 
0019   0417             ; --- START FUNCTION CALL
0020   0417 26 2C 0F      mov b, _s0 ; "hello world"
0021   041A FD AB         swp b
0022   041C D8            push b
0023   041D 07 BC 04      call printf
0024   0420 51 02 00      add sp, 2
0025   0423             ; --- END FUNCTION CALL
0026   0423             ; atoi(2); 
0027   0423             ; --- START FUNCTION CALL
0028   0423 FD 2E 02 00   mov32 cb, $00000002
0028   0427 00 00 
0029   0429 FD AB         swp b
0030   042B D8            push b
0031   042C 07 A9 0D      call atoi
0032   042F 51 02 00      add sp, 2
0033   0432             ; --- END FUNCTION CALL
0034   0432 05 0B         syscall sys_terminate_proc
0035   0434             
0036   0434             myfunc:
0037   0434 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0038   0437             ; func(); 
0039   0437             ; --- START FUNCTION CALL
0040   0437 07 3C 04      call func
0041   043A F9            leave
0042   043B 09            ret
0043   043C             
0044   043C             func:
0045   043C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0046   043F             ; haha(); 
0047   043F             ; --- START FUNCTION CALL
0048   043F 07 44 04      call haha
0049   0442 F9            leave
0050   0443 09            ret
0051   0444             
0052   0444             haha:
0053   0444 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0054   0447             ; tolower('a'); 
0055   0447             ; --- START FUNCTION CALL
0056   0447 FD 2E 61 00   mov32 cb, $00000061
0056   044B 00 00 
0057   044D DD            push bl
0058   044E 07 56 04      call tolower
0059   0451 51 01 00      add sp, 1
0060   0454             ; --- END FUNCTION CALL
0061   0454 F9            leave
0062   0455 09            ret
0063   0456             
0064   0456             tolower:
0065   0456 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0066   0459             ; if (ch >= 'A' && ch <= 'Z')  
0067   0459             _if1_cond:
0068   0459 FA 05 00      lea d, [bp + 5] ; $ch
0069   045C 32            mov bl, [d]
0070   045D A7 00         mov bh, 0
0071   045F 38 00 00      mov c, 0
0072   0462             ; --- START RELATIONAL
0073   0462 D7            push a
0074   0463 11            mov a, b
0075   0464 FD 2E 41 00   mov32 cb, $00000041
0075   0468 00 00 
0076   046A B0            cmp a, b
0077   046B FD 80         sge ; >=
0078   046D E4            pop a
0079   046E             ; --- END RELATIONAL
0080   046E             ; --- START LOGICAL AND
0081   046E D7            push a
0082   046F 11            mov a, b
0083   0470 FA 05 00      lea d, [bp + 5] ; $ch
0084   0473 32            mov bl, [d]
0085   0474 A7 00         mov bh, 0
0086   0476 38 00 00      mov c, 0
0087   0479             ; --- START RELATIONAL
0088   0479 D7            push a
0089   047A 11            mov a, b
0090   047B FD 2E 5A 00   mov32 cb, $0000005a
0090   047F 00 00 
0091   0481 B0            cmp a, b
0092   0482 FD 74         sle ; <= (signed)
0093   0484 E4            pop a
0094   0485             ; --- END RELATIONAL
0095   0485 FD A7         sand a, b
0096   0487 E4            pop a
0097   0488             ; --- END LOGICAL AND
0098   0488 C0 00 00      cmp b, 0
0099   048B C6 AF 04      je _if1_else
0100   048E             _if1_TRUE:
0101   048E             ; return ch - 'A' + 'a'; 
0102   048E FA 05 00      lea d, [bp + 5] ; $ch
0103   0491 32            mov bl, [d]
0104   0492 A7 00         mov bh, 0
0105   0494 38 00 00      mov c, 0
0106   0497             ; --- START TERMS
0107   0497 D7            push a
0108   0498 11            mov a, b
0109   0499 FD 2E 41 00   mov32 cb, $00000041
0109   049D 00 00 
0110   049F 60            sub a, b
0111   04A0 27            mov b, a
0112   04A1 11            mov a, b
0113   04A2 FD 2E 61 00   mov32 cb, $00000061
0113   04A6 00 00 
0114   04A8 56            add b, a
0115   04A9 E4            pop a
0116   04AA             ; --- END TERMS
0117   04AA F9            leave
0118   04AB 09            ret
0119   04AC 0A BA 04      jmp _if1_exit
0120   04AF             _if1_else:
0121   04AF             ; return ch; 
0122   04AF FA 05 00      lea d, [bp + 5] ; $ch
0123   04B2 32            mov bl, [d]
0124   04B3 A7 00         mov bh, 0
0125   04B5 38 00 00      mov c, 0
0126   04B8 F9            leave
0127   04B9 09            ret
0128   04BA             _if1_exit:
0129   04BA F9            leave
0130   04BB 09            ret
0131   04BC             
0132   04BC             printf:
0133   04BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0134   04BF             ; char *p, *format_p; 
0135   04BF 52 02 00      sub sp, 2
0136   04C2 52 02 00      sub sp, 2
0137   04C5             ; format_p = format; 
0138   04C5 FA FD FF      lea d, [bp + -3] ; $format_p
0139   04C8 DA            push d
0140   04C9 FA 05 00      lea d, [bp + 5] ; $format
0141   04CC 2A            mov b, [d]
0142   04CD 38 00 00      mov c, 0
0143   04D0 E7            pop d
0144   04D1 FD 43         mov [d], b
0145   04D3             ; p = &format + 2; 
0146   04D3 FA FF FF      lea d, [bp + -1] ; $p
0147   04D6 DA            push d
0148   04D7 FA 05 00      lea d, [bp + 5] ; $format
0149   04DA 2D            mov b, d
0150   04DB             ; --- START TERMS
0151   04DB D7            push a
0152   04DC 11            mov a, b
0153   04DD FD 2E 02 00   mov32 cb, $00000002
0153   04E1 00 00 
0154   04E3 56            add b, a
0155   04E4 E4            pop a
0156   04E5             ; --- END TERMS
0157   04E5 E7            pop d
0158   04E6 FD 43         mov [d], b
0159   04E8             ; for(;;){ 
0160   04E8             _for2_init:
0161   04E8             _for2_cond:
0162   04E8             _for2_block:
0163   04E8             ; if(!*format_p) break; 
0164   04E8             _if3_cond:
0165   04E8 FA FD FF      lea d, [bp + -3] ; $format_p
0166   04EB 2A            mov b, [d]
0167   04EC 38 00 00      mov c, 0
0168   04EF 74            mov d, b
0169   04F0 32            mov bl, [d]
0170   04F1 A7 00         mov bh, 0
0171   04F3 38 00 00      mov c, 0
0172   04F6 C0 00 00      cmp b, 0
0173   04F9 FD 71         seq ; !
0174   04FB C0 00 00      cmp b, 0
0175   04FE C6 07 05      je _if3_else
0176   0501             _if3_TRUE:
0177   0501             ; break; 
0178   0501 0A B7 07      jmp _for2_exit ; for break
0179   0504 0A B4 07      jmp _if3_exit
0180   0507             _if3_else:
0181   0507             ; if(*format_p == '%'){ 
0182   0507             _if4_cond:
0183   0507 FA FD FF      lea d, [bp + -3] ; $format_p
0184   050A 2A            mov b, [d]
0185   050B 38 00 00      mov c, 0
0186   050E 74            mov d, b
0187   050F 32            mov bl, [d]
0188   0510 A7 00         mov bh, 0
0189   0512 38 00 00      mov c, 0
0190   0515             ; --- START RELATIONAL
0191   0515 D7            push a
0192   0516 11            mov a, b
0193   0517 FD 2E 25 00   mov32 cb, $00000025
0193   051B 00 00 
0194   051D B0            cmp a, b
0195   051E FD 71         seq ; ==
0196   0520 E4            pop a
0197   0521             ; --- END RELATIONAL
0198   0521 C0 00 00      cmp b, 0
0199   0524 C6 8F 07      je _if4_else
0200   0527             _if4_TRUE:
0201   0527             ; format_p++; 
0202   0527 FA FD FF      lea d, [bp + -3] ; $format_p
0203   052A 2A            mov b, [d]
0204   052B 38 00 00      mov c, 0
0205   052E FD 77         inc b
0206   0530 FA FD FF      lea d, [bp + -3] ; $format_p
0207   0533 FD 43         mov [d], b
0208   0535 FD 7D         dec b
0209   0537             ; switch(*format_p){ 
0210   0537             _switch5_expr:
0211   0537 FA FD FF      lea d, [bp + -3] ; $format_p
0212   053A 2A            mov b, [d]
0213   053B 38 00 00      mov c, 0
0214   053E 74            mov d, b
0215   053F 32            mov bl, [d]
0216   0540 A7 00         mov bh, 0
0217   0542 38 00 00      mov c, 0
0218   0545             _switch5_comparisons:
0219   0545 C1 6C         cmp bl, $6c
0220   0547 C6 73 05      je _switch5_case0
0221   054A C1 4C         cmp bl, $4c
0222   054C C6 73 05      je _switch5_case1
0223   054F C1 64         cmp bl, $64
0224   0551 C6 83 06      je _switch5_case2
0225   0554 C1 69         cmp bl, $69
0226   0556 C6 83 06      je _switch5_case3
0227   0559 C1 75         cmp bl, $75
0228   055B C6 B3 06      je _switch5_case4
0229   055E C1 78         cmp bl, $78
0230   0560 C6 E3 06      je _switch5_case5
0231   0563 C1 63         cmp bl, $63
0232   0565 C6 13 07      je _switch5_case6
0233   0568 C1 73         cmp bl, $73
0234   056A C6 43 07      je _switch5_case7
0235   056D 0A 70 07      jmp _switch5_default
0236   0570 0A 7C 07      jmp _switch5_exit
0237   0573             _switch5_case0:
0238   0573             _switch5_case1:
0239   0573             ; format_p++; 
0240   0573 FA FD FF      lea d, [bp + -3] ; $format_p
0241   0576 2A            mov b, [d]
0242   0577 38 00 00      mov c, 0
0243   057A FD 77         inc b
0244   057C FA FD FF      lea d, [bp + -3] ; $format_p
0245   057F FD 43         mov [d], b
0246   0581 FD 7D         dec b
0247   0583             ; if(*format_p == 'd' || *format_p == 'i') 
0248   0583             _if6_cond:
0249   0583 FA FD FF      lea d, [bp + -3] ; $format_p
0250   0586 2A            mov b, [d]
0251   0587 38 00 00      mov c, 0
0252   058A 74            mov d, b
0253   058B 32            mov bl, [d]
0254   058C A7 00         mov bh, 0
0255   058E 38 00 00      mov c, 0
0256   0591             ; --- START RELATIONAL
0257   0591 D7            push a
0258   0592 11            mov a, b
0259   0593 FD 2E 64 00   mov32 cb, $00000064
0259   0597 00 00 
0260   0599 B0            cmp a, b
0261   059A FD 71         seq ; ==
0262   059C E4            pop a
0263   059D             ; --- END RELATIONAL
0264   059D             ; --- START LOGICAL OR
0265   059D D7            push a
0266   059E 11            mov a, b
0267   059F FA FD FF      lea d, [bp + -3] ; $format_p
0268   05A2 2A            mov b, [d]
0269   05A3 38 00 00      mov c, 0
0270   05A6 74            mov d, b
0271   05A7 32            mov bl, [d]
0272   05A8 A7 00         mov bh, 0
0273   05AA 38 00 00      mov c, 0
0274   05AD             ; --- START RELATIONAL
0275   05AD D7            push a
0276   05AE 11            mov a, b
0277   05AF FD 2E 69 00   mov32 cb, $00000069
0277   05B3 00 00 
0278   05B5 B0            cmp a, b
0279   05B6 FD 71         seq ; ==
0280   05B8 E4            pop a
0281   05B9             ; --- END RELATIONAL
0282   05B9 FD A8         sor a, b ; ||
0283   05BB E4            pop a
0284   05BC             ; --- END LOGICAL OR
0285   05BC C0 00 00      cmp b, 0
0286   05BF C6 E0 05      je _if6_else
0287   05C2             _if6_TRUE:
0288   05C2             ; print_signed_long(*(long *)p); 
0289   05C2             ; --- START FUNCTION CALL
0290   05C2 FA FF FF      lea d, [bp + -1] ; $p
0291   05C5 2A            mov b, [d]
0292   05C6 38 00 00      mov c, 0
0293   05C9 74            mov d, b
0294   05CA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0295   05CD FD 39         mov c, b ; And place it into C
0296   05CF 2A            mov b, [d] ; Lower Word in B
0297   05D0 12            mov a, c
0298   05D1 FD AA         swp a
0299   05D3 D7            push a
0300   05D4 FD AB         swp b
0301   05D6 D8            push b
0302   05D7 07 B9 07      call print_signed_long
0303   05DA 51 04 00      add sp, 4
0304   05DD             ; --- END FUNCTION CALL
0305   05DD 0A 68 06      jmp _if6_exit
0306   05E0             _if6_else:
0307   05E0             ; if(*format_p == 'u') 
0308   05E0             _if7_cond:
0309   05E0 FA FD FF      lea d, [bp + -3] ; $format_p
0310   05E3 2A            mov b, [d]
0311   05E4 38 00 00      mov c, 0
0312   05E7 74            mov d, b
0313   05E8 32            mov bl, [d]
0314   05E9 A7 00         mov bh, 0
0315   05EB 38 00 00      mov c, 0
0316   05EE             ; --- START RELATIONAL
0317   05EE D7            push a
0318   05EF 11            mov a, b
0319   05F0 FD 2E 75 00   mov32 cb, $00000075
0319   05F4 00 00 
0320   05F6 B0            cmp a, b
0321   05F7 FD 71         seq ; ==
0322   05F9 E4            pop a
0323   05FA             ; --- END RELATIONAL
0324   05FA C0 00 00      cmp b, 0
0325   05FD C6 1E 06      je _if7_else
0326   0600             _if7_TRUE:
0327   0600             ; print_unsigned_long(*(unsigned long *)p); 
0328   0600             ; --- START FUNCTION CALL
0329   0600 FA FF FF      lea d, [bp + -1] ; $p
0330   0603 2A            mov b, [d]
0331   0604 38 00 00      mov c, 0
0332   0607 74            mov d, b
0333   0608 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0334   060B FD 39         mov c, b ; And place it into C
0335   060D 2A            mov b, [d] ; Lower Word in B
0336   060E 12            mov a, c
0337   060F FD AA         swp a
0338   0611 D7            push a
0339   0612 FD AB         swp b
0340   0614 D8            push b
0341   0615 07 44 09      call print_unsigned_long
0342   0618 51 04 00      add sp, 4
0343   061B             ; --- END FUNCTION CALL
0344   061B 0A 68 06      jmp _if7_exit
0345   061E             _if7_else:
0346   061E             ; if(*format_p == 'x') 
0347   061E             _if8_cond:
0348   061E FA FD FF      lea d, [bp + -3] ; $format_p
0349   0621 2A            mov b, [d]
0350   0622 38 00 00      mov c, 0
0351   0625 74            mov d, b
0352   0626 32            mov bl, [d]
0353   0627 A7 00         mov bh, 0
0354   0629 38 00 00      mov c, 0
0355   062C             ; --- START RELATIONAL
0356   062C D7            push a
0357   062D 11            mov a, b
0358   062E FD 2E 78 00   mov32 cb, $00000078
0358   0632 00 00 
0359   0634 B0            cmp a, b
0360   0635 FD 71         seq ; ==
0361   0637 E4            pop a
0362   0638             ; --- END RELATIONAL
0363   0638 C0 00 00      cmp b, 0
0364   063B C6 5C 06      je _if8_else
0365   063E             _if8_TRUE:
0366   063E             ; printx32(*(long int *)p); 
0367   063E             ; --- START FUNCTION CALL
0368   063E FA FF FF      lea d, [bp + -1] ; $p
0369   0641 2A            mov b, [d]
0370   0642 38 00 00      mov c, 0
0371   0645 74            mov d, b
0372   0646 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0373   0649 FD 39         mov c, b ; And place it into C
0374   064B 2A            mov b, [d] ; Lower Word in B
0375   064C 12            mov a, c
0376   064D FD AA         swp a
0377   064F D7            push a
0378   0650 FD AB         swp b
0379   0652 D8            push b
0380   0653 07 70 0A      call printx32
0381   0656 51 04 00      add sp, 4
0382   0659             ; --- END FUNCTION CALL
0383   0659 0A 68 06      jmp _if8_exit
0384   065C             _if8_else:
0385   065C             ; err("Unexpected format in printf."); 
0386   065C             ; --- START FUNCTION CALL
0387   065C 26 38 0F      mov b, _s1 ; "Unexpected format in printf."
0388   065F FD AB         swp b
0389   0661 D8            push b
0390   0662 07 D0 0A      call err
0391   0665 51 02 00      add sp, 2
0392   0668             ; --- END FUNCTION CALL
0393   0668             _if8_exit:
0394   0668             _if7_exit:
0395   0668             _if6_exit:
0396   0668             ; p = p + 4; 
0397   0668 FA FF FF      lea d, [bp + -1] ; $p
0398   066B DA            push d
0399   066C FA FF FF      lea d, [bp + -1] ; $p
0400   066F 2A            mov b, [d]
0401   0670 38 00 00      mov c, 0
0402   0673             ; --- START TERMS
0403   0673 D7            push a
0404   0674 11            mov a, b
0405   0675 FD 2E 04 00   mov32 cb, $00000004
0405   0679 00 00 
0406   067B 56            add b, a
0407   067C E4            pop a
0408   067D             ; --- END TERMS
0409   067D E7            pop d
0410   067E FD 43         mov [d], b
0411   0680             ; break; 
0412   0680 0A 7C 07      jmp _switch5_exit ; case break
0413   0683             _switch5_case2:
0414   0683             _switch5_case3:
0415   0683             ; print_signed(*(int*)p); 
0416   0683             ; --- START FUNCTION CALL
0417   0683 FA FF FF      lea d, [bp + -1] ; $p
0418   0686 2A            mov b, [d]
0419   0687 38 00 00      mov c, 0
0420   068A 74            mov d, b
0421   068B 2A            mov b, [d]
0422   068C 38 00 00      mov c, 0
0423   068F FD AB         swp b
0424   0691 D8            push b
0425   0692 07 FE 0A      call print_signed
0426   0695 51 02 00      add sp, 2
0427   0698             ; --- END FUNCTION CALL
0428   0698             ; p = p + 2; 
0429   0698 FA FF FF      lea d, [bp + -1] ; $p
0430   069B DA            push d
0431   069C FA FF FF      lea d, [bp + -1] ; $p
0432   069F 2A            mov b, [d]
0433   06A0 38 00 00      mov c, 0
0434   06A3             ; --- START TERMS
0435   06A3 D7            push a
0436   06A4 11            mov a, b
0437   06A5 FD 2E 02 00   mov32 cb, $00000002
0437   06A9 00 00 
0438   06AB 56            add b, a
0439   06AC E4            pop a
0440   06AD             ; --- END TERMS
0441   06AD E7            pop d
0442   06AE FD 43         mov [d], b
0443   06B0             ; break; 
0444   06B0 0A 7C 07      jmp _switch5_exit ; case break
0445   06B3             _switch5_case4:
0446   06B3             ; print_unsigned(*(unsigned int*)p); 
0447   06B3             ; --- START FUNCTION CALL
0448   06B3 FA FF FF      lea d, [bp + -1] ; $p
0449   06B6 2A            mov b, [d]
0450   06B7 38 00 00      mov c, 0
0451   06BA 74            mov d, b
0452   06BB 2A            mov b, [d]
0453   06BC 38 00 00      mov c, 0
0454   06BF FD AB         swp b
0455   06C1 D8            push b
0456   06C2 07 47 0C      call print_unsigned
0457   06C5 51 02 00      add sp, 2
0458   06C8             ; --- END FUNCTION CALL
0459   06C8             ; p = p + 2; 
0460   06C8 FA FF FF      lea d, [bp + -1] ; $p
0461   06CB DA            push d
0462   06CC FA FF FF      lea d, [bp + -1] ; $p
0463   06CF 2A            mov b, [d]
0464   06D0 38 00 00      mov c, 0
0465   06D3             ; --- START TERMS
0466   06D3 D7            push a
0467   06D4 11            mov a, b
0468   06D5 FD 2E 02 00   mov32 cb, $00000002
0468   06D9 00 00 
0469   06DB 56            add b, a
0470   06DC E4            pop a
0471   06DD             ; --- END TERMS
0472   06DD E7            pop d
0473   06DE FD 43         mov [d], b
0474   06E0             ; break; 
0475   06E0 0A 7C 07      jmp _switch5_exit ; case break
0476   06E3             _switch5_case5:
0477   06E3             ; printx16(*(int*)p); 
0478   06E3             ; --- START FUNCTION CALL
0479   06E3 FA FF FF      lea d, [bp + -1] ; $p
0480   06E6 2A            mov b, [d]
0481   06E7 38 00 00      mov c, 0
0482   06EA 74            mov d, b
0483   06EB 2A            mov b, [d]
0484   06EC 38 00 00      mov c, 0
0485   06EF FD AB         swp b
0486   06F1 D8            push b
0487   06F2 07 57 0D      call printx16
0488   06F5 51 02 00      add sp, 2
0489   06F8             ; --- END FUNCTION CALL
0490   06F8             ; p = p + 2; 
0491   06F8 FA FF FF      lea d, [bp + -1] ; $p
0492   06FB DA            push d
0493   06FC FA FF FF      lea d, [bp + -1] ; $p
0494   06FF 2A            mov b, [d]
0495   0700 38 00 00      mov c, 0
0496   0703             ; --- START TERMS
0497   0703 D7            push a
0498   0704 11            mov a, b
0499   0705 FD 2E 02 00   mov32 cb, $00000002
0499   0709 00 00 
0500   070B 56            add b, a
0501   070C E4            pop a
0502   070D             ; --- END TERMS
0503   070D E7            pop d
0504   070E FD 43         mov [d], b
0505   0710             ; break; 
0506   0710 0A 7C 07      jmp _switch5_exit ; case break
0507   0713             _switch5_case6:
0508   0713             ; putchar(*(char*)p); 
0509   0713             ; --- START FUNCTION CALL
0510   0713 FA FF FF      lea d, [bp + -1] ; $p
0511   0716 2A            mov b, [d]
0512   0717 38 00 00      mov c, 0
0513   071A 74            mov d, b
0514   071B 32            mov bl, [d]
0515   071C A7 00         mov bh, 0
0516   071E 38 00 00      mov c, 0
0517   0721 DD            push bl
0518   0722 07 36 09      call putchar
0519   0725 51 01 00      add sp, 1
0520   0728             ; --- END FUNCTION CALL
0521   0728             ; p = p + 1; 
0522   0728 FA FF FF      lea d, [bp + -1] ; $p
0523   072B DA            push d
0524   072C FA FF FF      lea d, [bp + -1] ; $p
0525   072F 2A            mov b, [d]
0526   0730 38 00 00      mov c, 0
0527   0733             ; --- START TERMS
0528   0733 D7            push a
0529   0734 11            mov a, b
0530   0735 FD 2E 01 00   mov32 cb, $00000001
0530   0739 00 00 
0531   073B 56            add b, a
0532   073C E4            pop a
0533   073D             ; --- END TERMS
0534   073D E7            pop d
0535   073E FD 43         mov [d], b
0536   0740             ; break; 
0537   0740 0A 7C 07      jmp _switch5_exit ; case break
0538   0743             _switch5_case7:
0539   0743             ; print(*(char**)p); 
0540   0743             ; --- START FUNCTION CALL
0541   0743 FA FF FF      lea d, [bp + -1] ; $p
0542   0746 2A            mov b, [d]
0543   0747 38 00 00      mov c, 0
0544   074A 74            mov d, b
0545   074B 2A            mov b, [d]
0546   074C FD AB         swp b
0547   074E D8            push b
0548   074F 07 E5 0A      call print
0549   0752 51 02 00      add sp, 2
0550   0755             ; --- END FUNCTION CALL
0551   0755             ; p = p + 2; 
0552   0755 FA FF FF      lea d, [bp + -1] ; $p
0553   0758 DA            push d
0554   0759 FA FF FF      lea d, [bp + -1] ; $p
0555   075C 2A            mov b, [d]
0556   075D 38 00 00      mov c, 0
0557   0760             ; --- START TERMS
0558   0760 D7            push a
0559   0761 11            mov a, b
0560   0762 FD 2E 02 00   mov32 cb, $00000002
0560   0766 00 00 
0561   0768 56            add b, a
0562   0769 E4            pop a
0563   076A             ; --- END TERMS
0564   076A E7            pop d
0565   076B FD 43         mov [d], b
0566   076D             ; break; 
0567   076D 0A 7C 07      jmp _switch5_exit ; case break
0568   0770             _switch5_default:
0569   0770             ; print("Error: Unknown argument type.\n"); 
0570   0770             ; --- START FUNCTION CALL
0571   0770 26 55 0F      mov b, _s2 ; "Error: Unknown argument type.\n"
0572   0773 FD AB         swp b
0573   0775 D8            push b
0574   0776 07 E5 0A      call print
0575   0779 51 02 00      add sp, 2
0576   077C             ; --- END FUNCTION CALL
0577   077C             _switch5_exit:
0578   077C             ; format_p++; 
0579   077C FA FD FF      lea d, [bp + -3] ; $format_p
0580   077F 2A            mov b, [d]
0581   0780 38 00 00      mov c, 0
0582   0783 FD 77         inc b
0583   0785 FA FD FF      lea d, [bp + -3] ; $format_p
0584   0788 FD 43         mov [d], b
0585   078A FD 7D         dec b
0586   078C 0A B4 07      jmp _if4_exit
0587   078F             _if4_else:
0588   078F             ; putchar(*format_p); 
0589   078F             ; --- START FUNCTION CALL
0590   078F FA FD FF      lea d, [bp + -3] ; $format_p
0591   0792 2A            mov b, [d]
0592   0793 38 00 00      mov c, 0
0593   0796 74            mov d, b
0594   0797 32            mov bl, [d]
0595   0798 A7 00         mov bh, 0
0596   079A 38 00 00      mov c, 0
0597   079D DD            push bl
0598   079E 07 36 09      call putchar
0599   07A1 51 01 00      add sp, 1
0600   07A4             ; --- END FUNCTION CALL
0601   07A4             ; format_p++; 
0602   07A4 FA FD FF      lea d, [bp + -3] ; $format_p
0603   07A7 2A            mov b, [d]
0604   07A8 38 00 00      mov c, 0
0605   07AB FD 77         inc b
0606   07AD FA FD FF      lea d, [bp + -3] ; $format_p
0607   07B0 FD 43         mov [d], b
0608   07B2 FD 7D         dec b
0609   07B4             _if4_exit:
0610   07B4             _if3_exit:
0611   07B4             _for2_update:
0612   07B4 0A E8 04      jmp _for2_cond
0613   07B7             _for2_exit:
0614   07B7 F9            leave
0615   07B8 09            ret
0616   07B9             
0617   07B9             print_signed_long:
0618   07B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0619   07BC             ; char digits[10]; 
0620   07BC 52 0A 00      sub sp, 10
0621   07BF             ; int i = 0; 
0622   07BF 52 02 00      sub sp, 2
0623   07C2             ; --- START LOCAL VAR INITIALIZATION
0624   07C2 FA F5 FF      lea d, [bp + -11] ; $i
0625   07C5 DA            push d
0626   07C6 FD 2E 00 00   mov32 cb, $00000000
0626   07CA 00 00 
0627   07CC E7            pop d
0628   07CD FD 43         mov [d], b
0629   07CF             ; --- END LOCAL VAR INITIALIZATION
0630   07CF             ; if (num < 0) { 
0631   07CF             _if9_cond:
0632   07CF FA 05 00      lea d, [bp + 5] ; $num
0633   07D2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0634   07D5 FD 39         mov c, b ; And place it into C
0635   07D7 2A            mov b, [d] ; Lower Word in B
0636   07D8             ; --- START RELATIONAL
0637   07D8 D7            push a
0638   07D9 FD D8         push g
0639   07DB 11            mov a, b
0640   07DC FD 7A         mov g, c
0641   07DE FD 2E 00 00   mov32 cb, $00000000
0641   07E2 00 00 
0642   07E4 FD AF         cmp32 ga, cb
0643   07E6 FD 73         slt ; <
0644   07E8 FD F1         pop g
0645   07EA E4            pop a
0646   07EB             ; --- END RELATIONAL
0647   07EB C0 00 00      cmp b, 0
0648   07EE C6 20 08      je _if9_else
0649   07F1             _if9_TRUE:
0650   07F1             ; putchar('-'); 
0651   07F1             ; --- START FUNCTION CALL
0652   07F1 FD 2E 2D 00   mov32 cb, $0000002d
0652   07F5 00 00 
0653   07F7 DD            push bl
0654   07F8 07 36 09      call putchar
0655   07FB 51 01 00      add sp, 1
0656   07FE             ; --- END FUNCTION CALL
0657   07FE             ; num = -num; 
0658   07FE FA 05 00      lea d, [bp + 5] ; $num
0659   0801 DA            push d
0660   0802 FA 05 00      lea d, [bp + 5] ; $num
0661   0805 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0662   0808 FD 39         mov c, b ; And place it into C
0663   080A 2A            mov b, [d] ; Lower Word in B
0664   080B 12            mov a, c
0665   080C 95            not a
0666   080D 97            not b
0667   080E 55 01 00      add b, 1
0668   0811 5B 00 00      adc a, 0
0669   0814 39            mov c, a
0670   0815 E7            pop d
0671   0816 FD 43         mov [d], b
0672   0818 28            mov b, c
0673   0819 FD 44 02 00   mov [d + 2], b
0674   081D 0A 54 08      jmp _if9_exit
0675   0820             _if9_else:
0676   0820             ; if (num == 0) { 
0677   0820             _if10_cond:
0678   0820 FA 05 00      lea d, [bp + 5] ; $num
0679   0823 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0680   0826 FD 39         mov c, b ; And place it into C
0681   0828 2A            mov b, [d] ; Lower Word in B
0682   0829             ; --- START RELATIONAL
0683   0829 D7            push a
0684   082A FD D8         push g
0685   082C 11            mov a, b
0686   082D FD 7A         mov g, c
0687   082F FD 2E 00 00   mov32 cb, $00000000
0687   0833 00 00 
0688   0835 FD AF         cmp32 ga, cb
0689   0837 FD 71         seq ; ==
0690   0839 FD F1         pop g
0691   083B E4            pop a
0692   083C             ; --- END RELATIONAL
0693   083C C0 00 00      cmp b, 0
0694   083F C6 54 08      je _if10_exit
0695   0842             _if10_TRUE:
0696   0842             ; putchar('0'); 
0697   0842             ; --- START FUNCTION CALL
0698   0842 FD 2E 30 00   mov32 cb, $00000030
0698   0846 00 00 
0699   0848 DD            push bl
0700   0849 07 36 09      call putchar
0701   084C 51 01 00      add sp, 1
0702   084F             ; --- END FUNCTION CALL
0703   084F             ; return; 
0704   084F F9            leave
0705   0850 09            ret
0706   0851 0A 54 08      jmp _if10_exit
0707   0854             _if10_exit:
0708   0854             _if9_exit:
0709   0854             ; while (num > 0) { 
0710   0854             _while11_cond:
0711   0854 FA 05 00      lea d, [bp + 5] ; $num
0712   0857 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0713   085A FD 39         mov c, b ; And place it into C
0714   085C 2A            mov b, [d] ; Lower Word in B
0715   085D             ; --- START RELATIONAL
0716   085D D7            push a
0717   085E FD D8         push g
0718   0860 11            mov a, b
0719   0861 FD 7A         mov g, c
0720   0863 FD 2E 00 00   mov32 cb, $00000000
0720   0867 00 00 
0721   0869 FD AF         cmp32 ga, cb
0722   086B FD 7F         sgt
0723   086D FD F1         pop g
0724   086F E4            pop a
0725   0870             ; --- END RELATIONAL
0726   0870 C0 00 00      cmp b, 0
0727   0873 C6 EC 08      je _while11_exit
0728   0876             _while11_block:
0729   0876             ; digits[i] = '0' + (num % 10); 
0730   0876 FA F7 FF      lea d, [bp + -9] ; $digits
0731   0879 D7            push a
0732   087A DA            push d
0733   087B FA F5 FF      lea d, [bp + -11] ; $i
0734   087E 2A            mov b, [d]
0735   087F 38 00 00      mov c, 0
0736   0882 E7            pop d
0737   0883 5A            add d, b
0738   0884 E4            pop a
0739   0885 DA            push d
0740   0886 FD 2E 30 00   mov32 cb, $00000030
0740   088A 00 00 
0741   088C             ; --- START TERMS
0742   088C D7            push a
0743   088D 11            mov a, b
0744   088E FA 05 00      lea d, [bp + 5] ; $num
0745   0891 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0746   0894 FD 39         mov c, b ; And place it into C
0747   0896 2A            mov b, [d] ; Lower Word in B
0748   0897             ; --- START FACTORS
0749   0897 D7            push a
0750   0898 FD D8         push g
0751   089A 11            mov a, b
0752   089B FD 7A         mov g, c
0753   089D FD 2E 0A 00   mov32 cb, $0000000a
0753   08A1 00 00 
0754   08A3 AE            div a, b ; 
0755   08A4 11            mov a, b
0756   08A5 FD 38         mov c, g
0757   08A7 27            mov b, a
0758   08A8 FD F1         pop g
0759   08AA E4            pop a
0760   08AB             ; --- END FACTORS
0761   08AB FD 15         add32 cb, ga
0762   08AD E4            pop a
0763   08AE             ; --- END TERMS
0764   08AE E7            pop d
0765   08AF FD 3E         mov [d], bl
0766   08B1             ; num = num / 10; 
0767   08B1 FA 05 00      lea d, [bp + 5] ; $num
0768   08B4 DA            push d
0769   08B5 FA 05 00      lea d, [bp + 5] ; $num
0770   08B8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0771   08BB FD 39         mov c, b ; And place it into C
0772   08BD 2A            mov b, [d] ; Lower Word in B
0773   08BE             ; --- START FACTORS
0774   08BE D7            push a
0775   08BF FD D8         push g
0776   08C1 11            mov a, b
0777   08C2 FD 7A         mov g, c
0778   08C4 FD 2E 0A 00   mov32 cb, $0000000a
0778   08C8 00 00 
0779   08CA AE            div a, b
0780   08CB FD 38         mov c, g
0781   08CD 27            mov b, a
0782   08CE FD F1         pop g
0783   08D0 E4            pop a
0784   08D1             ; --- END FACTORS
0785   08D1 E7            pop d
0786   08D2 FD 43         mov [d], b
0787   08D4 28            mov b, c
0788   08D5 FD 44 02 00   mov [d + 2], b
0789   08D9             ; i++; 
0790   08D9 FA F5 FF      lea d, [bp + -11] ; $i
0791   08DC 2A            mov b, [d]
0792   08DD 38 00 00      mov c, 0
0793   08E0 11            mov a, b
0794   08E1 FD 77         inc b
0795   08E3 FA F5 FF      lea d, [bp + -11] ; $i
0796   08E6 FD 43         mov [d], b
0797   08E8 27            mov b, a
0798   08E9 0A 54 08      jmp _while11_cond
0799   08EC             _while11_exit:
0800   08EC             ; while (i > 0) { 
0801   08EC             _while18_cond:
0802   08EC FA F5 FF      lea d, [bp + -11] ; $i
0803   08EF 2A            mov b, [d]
0804   08F0 38 00 00      mov c, 0
0805   08F3             ; --- START RELATIONAL
0806   08F3 D7            push a
0807   08F4 11            mov a, b
0808   08F5 FD 2E 00 00   mov32 cb, $00000000
0808   08F9 00 00 
0809   08FB B0            cmp a, b
0810   08FC FD 7F         sgt ; >
0811   08FE E4            pop a
0812   08FF             ; --- END RELATIONAL
0813   08FF C0 00 00      cmp b, 0
0814   0902 C6 34 09      je _while18_exit
0815   0905             _while18_block:
0816   0905             ; i--; 
0817   0905 FA F5 FF      lea d, [bp + -11] ; $i
0818   0908 2A            mov b, [d]
0819   0909 38 00 00      mov c, 0
0820   090C 11            mov a, b
0821   090D FD 7D         dec b
0822   090F FA F5 FF      lea d, [bp + -11] ; $i
0823   0912 FD 43         mov [d], b
0824   0914 27            mov b, a
0825   0915             ; putchar(digits[i]); 
0826   0915             ; --- START FUNCTION CALL
0827   0915 FA F7 FF      lea d, [bp + -9] ; $digits
0828   0918 D7            push a
0829   0919 DA            push d
0830   091A FA F5 FF      lea d, [bp + -11] ; $i
0831   091D 2A            mov b, [d]
0832   091E 38 00 00      mov c, 0
0833   0921 E7            pop d
0834   0922 5A            add d, b
0835   0923 E4            pop a
0836   0924 32            mov bl, [d]
0837   0925 A7 00         mov bh, 0
0838   0927 38 00 00      mov c, 0
0839   092A DD            push bl
0840   092B 07 36 09      call putchar
0841   092E 51 01 00      add sp, 1
0842   0931             ; --- END FUNCTION CALL
0843   0931 0A EC 08      jmp _while18_cond
0844   0934             _while18_exit:
0845   0934 F9            leave
0846   0935 09            ret
0847   0936             
0848   0936             putchar:
0849   0936 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0850   0939             ; --- BEGIN INLINE ASM SEGMENT
0851   0939 FA 05 00      lea d, [bp + 5] ; $c
0852   093C 1E            mov al, [d]
0853   093D 23            mov ah, al
0854   093E 19 00         mov al, 0
0855   0940 05 03         syscall sys_io      
0856   0942             ; --- END INLINE ASM SEGMENT
0857   0942 F9            leave
0858   0943 09            ret
0859   0944             
0860   0944             print_unsigned_long:
0861   0944 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0862   0947             ; char digits[10]; 
0863   0947 52 0A 00      sub sp, 10
0864   094A             ; int i; 
0865   094A 52 02 00      sub sp, 2
0866   094D             ; i = 0; 
0867   094D FA F5 FF      lea d, [bp + -11] ; $i
0868   0950 DA            push d
0869   0951 FD 2E 00 00   mov32 cb, $00000000
0869   0955 00 00 
0870   0957 E7            pop d
0871   0958 FD 43         mov [d], b
0872   095A             ; if(num == 0){ 
0873   095A             _if19_cond:
0874   095A FA 05 00      lea d, [bp + 5] ; $num
0875   095D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0876   0960 FD 39         mov c, b ; And place it into C
0877   0962 2A            mov b, [d] ; Lower Word in B
0878   0963             ; --- START RELATIONAL
0879   0963 D7            push a
0880   0964 FD D8         push g
0881   0966 11            mov a, b
0882   0967 FD 7A         mov g, c
0883   0969 FD 2E 00 00   mov32 cb, $00000000
0883   096D 00 00 
0884   096F FD AF         cmp32 ga, cb
0885   0971 FD 71         seq ; ==
0886   0973 FD F1         pop g
0887   0975 E4            pop a
0888   0976             ; --- END RELATIONAL
0889   0976 C0 00 00      cmp b, 0
0890   0979 C6 8E 09      je _if19_exit
0891   097C             _if19_TRUE:
0892   097C             ; putchar('0'); 
0893   097C             ; --- START FUNCTION CALL
0894   097C FD 2E 30 00   mov32 cb, $00000030
0894   0980 00 00 
0895   0982 DD            push bl
0896   0983 07 36 09      call putchar
0897   0986 51 01 00      add sp, 1
0898   0989             ; --- END FUNCTION CALL
0899   0989             ; return; 
0900   0989 F9            leave
0901   098A 09            ret
0902   098B 0A 8E 09      jmp _if19_exit
0903   098E             _if19_exit:
0904   098E             ; while (num > 0) { 
0905   098E             _while20_cond:
0906   098E FA 05 00      lea d, [bp + 5] ; $num
0907   0991 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0908   0994 FD 39         mov c, b ; And place it into C
0909   0996 2A            mov b, [d] ; Lower Word in B
0910   0997             ; --- START RELATIONAL
0911   0997 D7            push a
0912   0998 FD D8         push g
0913   099A 11            mov a, b
0914   099B FD 7A         mov g, c
0915   099D FD 2E 00 00   mov32 cb, $00000000
0915   09A1 00 00 
0916   09A3 FD AF         cmp32 ga, cb
0917   09A5 FD 81         sgu
0918   09A7 FD F1         pop g
0919   09A9 E4            pop a
0920   09AA             ; --- END RELATIONAL
0921   09AA C0 00 00      cmp b, 0
0922   09AD C6 26 0A      je _while20_exit
0923   09B0             _while20_block:
0924   09B0             ; digits[i] = '0' + (num % 10); 
0925   09B0 FA F7 FF      lea d, [bp + -9] ; $digits
0926   09B3 D7            push a
0927   09B4 DA            push d
0928   09B5 FA F5 FF      lea d, [bp + -11] ; $i
0929   09B8 2A            mov b, [d]
0930   09B9 38 00 00      mov c, 0
0931   09BC E7            pop d
0932   09BD 5A            add d, b
0933   09BE E4            pop a
0934   09BF DA            push d
0935   09C0 FD 2E 30 00   mov32 cb, $00000030
0935   09C4 00 00 
0936   09C6             ; --- START TERMS
0937   09C6 D7            push a
0938   09C7 11            mov a, b
0939   09C8 FA 05 00      lea d, [bp + 5] ; $num
0940   09CB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0941   09CE FD 39         mov c, b ; And place it into C
0942   09D0 2A            mov b, [d] ; Lower Word in B
0943   09D1             ; --- START FACTORS
0944   09D1 D7            push a
0945   09D2 FD D8         push g
0946   09D4 11            mov a, b
0947   09D5 FD 7A         mov g, c
0948   09D7 FD 2E 0A 00   mov32 cb, $0000000a
0948   09DB 00 00 
0949   09DD AE            div a, b ; 
0950   09DE 11            mov a, b
0951   09DF FD 38         mov c, g
0952   09E1 27            mov b, a
0953   09E2 FD F1         pop g
0954   09E4 E4            pop a
0955   09E5             ; --- END FACTORS
0956   09E5 FD 15         add32 cb, ga
0957   09E7 E4            pop a
0958   09E8             ; --- END TERMS
0959   09E8 E7            pop d
0960   09E9 FD 3E         mov [d], bl
0961   09EB             ; num = num / 10; 
0962   09EB FA 05 00      lea d, [bp + 5] ; $num
0963   09EE DA            push d
0964   09EF FA 05 00      lea d, [bp + 5] ; $num
0965   09F2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0966   09F5 FD 39         mov c, b ; And place it into C
0967   09F7 2A            mov b, [d] ; Lower Word in B
0968   09F8             ; --- START FACTORS
0969   09F8 D7            push a
0970   09F9 FD D8         push g
0971   09FB 11            mov a, b
0972   09FC FD 7A         mov g, c
0973   09FE FD 2E 0A 00   mov32 cb, $0000000a
0973   0A02 00 00 
0974   0A04 AE            div a, b
0975   0A05 FD 38         mov c, g
0976   0A07 27            mov b, a
0977   0A08 FD F1         pop g
0978   0A0A E4            pop a
0979   0A0B             ; --- END FACTORS
0980   0A0B E7            pop d
0981   0A0C FD 43         mov [d], b
0982   0A0E 28            mov b, c
0983   0A0F FD 44 02 00   mov [d + 2], b
0984   0A13             ; i++; 
0985   0A13 FA F5 FF      lea d, [bp + -11] ; $i
0986   0A16 2A            mov b, [d]
0987   0A17 38 00 00      mov c, 0
0988   0A1A 11            mov a, b
0989   0A1B FD 77         inc b
0990   0A1D FA F5 FF      lea d, [bp + -11] ; $i
0991   0A20 FD 43         mov [d], b
0992   0A22 27            mov b, a
0993   0A23 0A 8E 09      jmp _while20_cond
0994   0A26             _while20_exit:
0995   0A26             ; while (i > 0) { 
0996   0A26             _while27_cond:
0997   0A26 FA F5 FF      lea d, [bp + -11] ; $i
0998   0A29 2A            mov b, [d]
0999   0A2A 38 00 00      mov c, 0
1000   0A2D             ; --- START RELATIONAL
1001   0A2D D7            push a
1002   0A2E 11            mov a, b
1003   0A2F FD 2E 00 00   mov32 cb, $00000000
1003   0A33 00 00 
1004   0A35 B0            cmp a, b
1005   0A36 FD 7F         sgt ; >
1006   0A38 E4            pop a
1007   0A39             ; --- END RELATIONAL
1008   0A39 C0 00 00      cmp b, 0
1009   0A3C C6 6E 0A      je _while27_exit
1010   0A3F             _while27_block:
1011   0A3F             ; i--; 
1012   0A3F FA F5 FF      lea d, [bp + -11] ; $i
1013   0A42 2A            mov b, [d]
1014   0A43 38 00 00      mov c, 0
1015   0A46 11            mov a, b
1016   0A47 FD 7D         dec b
1017   0A49 FA F5 FF      lea d, [bp + -11] ; $i
1018   0A4C FD 43         mov [d], b
1019   0A4E 27            mov b, a
1020   0A4F             ; putchar(digits[i]); 
1021   0A4F             ; --- START FUNCTION CALL
1022   0A4F FA F7 FF      lea d, [bp + -9] ; $digits
1023   0A52 D7            push a
1024   0A53 DA            push d
1025   0A54 FA F5 FF      lea d, [bp + -11] ; $i
1026   0A57 2A            mov b, [d]
1027   0A58 38 00 00      mov c, 0
1028   0A5B E7            pop d
1029   0A5C 5A            add d, b
1030   0A5D E4            pop a
1031   0A5E 32            mov bl, [d]
1032   0A5F A7 00         mov bh, 0
1033   0A61 38 00 00      mov c, 0
1034   0A64 DD            push bl
1035   0A65 07 36 09      call putchar
1036   0A68 51 01 00      add sp, 1
1037   0A6B             ; --- END FUNCTION CALL
1038   0A6B 0A 26 0A      jmp _while27_cond
1039   0A6E             _while27_exit:
1040   0A6E F9            leave
1041   0A6F 09            ret
1042   0A70             
1043   0A70             printx32:
1044   0A70 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1045   0A73             ; --- BEGIN INLINE ASM SEGMENT
1046   0A73 FA 05 00      lea d, [bp + 5] ; $hex
1047   0A76 2B 02 00      mov b, [d+2]
1048   0A79 07 82 0A      call print_u16x_printx32
1049   0A7C 2A            mov b, [d]
1050   0A7D 07 82 0A      call print_u16x_printx32
1051   0A80             ; --- END INLINE ASM SEGMENT
1052   0A80             ; return; 
1053   0A80 F9            leave
1054   0A81 09            ret
1055   0A82             ; --- BEGIN INLINE ASM SEGMENT
1056   0A82             print_u16x_printx32:
1057   0A82 D7            push a
1058   0A83 D8            push b
1059   0A84 DD            push bl
1060   0A85 30            mov bl, bh
1061   0A86 07 A4 0A      call _itoa_printx32        
1062   0A89 2F            mov bl, al        
1063   0A8A 19 00         mov al, 0
1064   0A8C 05 03         syscall sys_io        
1065   0A8E 24            mov ah, bl        
1066   0A8F 19 00         mov al, 0
1067   0A91 05 03         syscall sys_io        
1068   0A93 EA            pop bl
1069   0A94 07 A4 0A      call _itoa_printx32        
1070   0A97 2F            mov bl, al        
1071   0A98 19 00         mov al, 0
1072   0A9A 05 03         syscall sys_io        
1073   0A9C 24            mov ah, bl        
1074   0A9D 19 00         mov al, 0
1075   0A9F 05 03         syscall sys_io        
1076   0AA1 E5            pop b
1077   0AA2 E4            pop a
1078   0AA3 09            ret
1079   0AA4             _itoa_printx32:
1080   0AA4 DA            push d
1081   0AA5 D8            push b
1082   0AA6 A7 00         mov bh, 0
1083   0AA8 FD A4 04      shr bl, 4  
1084   0AAB 74            mov d, b
1085   0AAC 1F BE 0A      mov al, [d + s_hex_digits_printx32]
1086   0AAF 23            mov ah, al
1087   0AB0 E5            pop b
1088   0AB1 D8            push b
1089   0AB2 A7 00         mov bh, 0
1090   0AB4 FD 87 0F      and bl, $0F
1091   0AB7 74            mov d, b
1092   0AB8 1F BE 0A      mov al, [d + s_hex_digits_printx32]
1093   0ABB E5            pop b
1094   0ABC E7            pop d
1095   0ABD 09            ret
1096   0ABE 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
1096   0AC2 34 35 36 37 
1096   0AC6 38 39 41 42 
1096   0ACA 43 44 45 46 
1097   0ACE             ; --- END INLINE ASM SEGMENT
1098   0ACE F9            leave
1099   0ACF 09            ret
1100   0AD0             
1101   0AD0             err:
1102   0AD0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1103   0AD3             ; print(e); 
1104   0AD3             ; --- START FUNCTION CALL
1105   0AD3 FA 05 00      lea d, [bp + 5] ; $e
1106   0AD6 2A            mov b, [d]
1107   0AD7 38 00 00      mov c, 0
1108   0ADA FD AB         swp b
1109   0ADC D8            push b
1110   0ADD 07 E5 0A      call print
1111   0AE0 51 02 00      add sp, 2
1112   0AE3             ; --- END FUNCTION CALL
1113   0AE3 F9            leave
1114   0AE4 09            ret
1115   0AE5             
1116   0AE5             print:
1117   0AE5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1118   0AE8             ; --- BEGIN INLINE ASM SEGMENT
1119   0AE8 FA 05 00      lea d, [bp + 5] ; $s
1120   0AEB FD 2A         mov d, [d]
1121   0AED             _puts_L1_print:
1122   0AED 1E            mov al, [d]
1123   0AEE B9 00         cmp al, 0
1124   0AF0 C6 FC 0A      jz _puts_END_print
1125   0AF3 23            mov ah, al
1126   0AF4 19 00         mov al, 0
1127   0AF6 05 03         syscall sys_io
1128   0AF8 79            inc d
1129   0AF9 0A ED 0A      jmp _puts_L1_print
1130   0AFC             _puts_END_print:
1131   0AFC             ; --- END INLINE ASM SEGMENT
1132   0AFC F9            leave
1133   0AFD 09            ret
1134   0AFE             
1135   0AFE             print_signed:
1136   0AFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1137   0B01             ; char digits[5]; 
1138   0B01 52 05 00      sub sp, 5
1139   0B04             ; int i = 0; 
1140   0B04 52 02 00      sub sp, 2
1141   0B07             ; --- START LOCAL VAR INITIALIZATION
1142   0B07 FA FA FF      lea d, [bp + -6] ; $i
1143   0B0A DA            push d
1144   0B0B FD 2E 00 00   mov32 cb, $00000000
1144   0B0F 00 00 
1145   0B11 E7            pop d
1146   0B12 FD 43         mov [d], b
1147   0B14             ; --- END LOCAL VAR INITIALIZATION
1148   0B14             ; if (num < 0) { 
1149   0B14             _if28_cond:
1150   0B14 FA 05 00      lea d, [bp + 5] ; $num
1151   0B17 2A            mov b, [d]
1152   0B18 38 00 00      mov c, 0
1153   0B1B             ; --- START RELATIONAL
1154   0B1B D7            push a
1155   0B1C 11            mov a, b
1156   0B1D FD 2E 00 00   mov32 cb, $00000000
1156   0B21 00 00 
1157   0B23 B0            cmp a, b
1158   0B24 FD 73         slt ; < (signed)
1159   0B26 E4            pop a
1160   0B27             ; --- END RELATIONAL
1161   0B27 C0 00 00      cmp b, 0
1162   0B2A C6 4D 0B      je _if28_else
1163   0B2D             _if28_TRUE:
1164   0B2D             ; putchar('-'); 
1165   0B2D             ; --- START FUNCTION CALL
1166   0B2D FD 2E 2D 00   mov32 cb, $0000002d
1166   0B31 00 00 
1167   0B33 DD            push bl
1168   0B34 07 36 09      call putchar
1169   0B37 51 01 00      add sp, 1
1170   0B3A             ; --- END FUNCTION CALL
1171   0B3A             ; num = -num; 
1172   0B3A FA 05 00      lea d, [bp + 5] ; $num
1173   0B3D DA            push d
1174   0B3E FA 05 00      lea d, [bp + 5] ; $num
1175   0B41 2A            mov b, [d]
1176   0B42 38 00 00      mov c, 0
1177   0B45 FD 97         neg b
1178   0B47 E7            pop d
1179   0B48 FD 43         mov [d], b
1180   0B4A 0A 78 0B      jmp _if28_exit
1181   0B4D             _if28_else:
1182   0B4D             ; if (num == 0) { 
1183   0B4D             _if29_cond:
1184   0B4D FA 05 00      lea d, [bp + 5] ; $num
1185   0B50 2A            mov b, [d]
1186   0B51 38 00 00      mov c, 0
1187   0B54             ; --- START RELATIONAL
1188   0B54 D7            push a
1189   0B55 11            mov a, b
1190   0B56 FD 2E 00 00   mov32 cb, $00000000
1190   0B5A 00 00 
1191   0B5C B0            cmp a, b
1192   0B5D FD 71         seq ; ==
1193   0B5F E4            pop a
1194   0B60             ; --- END RELATIONAL
1195   0B60 C0 00 00      cmp b, 0
1196   0B63 C6 78 0B      je _if29_exit
1197   0B66             _if29_TRUE:
1198   0B66             ; putchar('0'); 
1199   0B66             ; --- START FUNCTION CALL
1200   0B66 FD 2E 30 00   mov32 cb, $00000030
1200   0B6A 00 00 
1201   0B6C DD            push bl
1202   0B6D 07 36 09      call putchar
1203   0B70 51 01 00      add sp, 1
1204   0B73             ; --- END FUNCTION CALL
1205   0B73             ; return; 
1206   0B73 F9            leave
1207   0B74 09            ret
1208   0B75 0A 78 0B      jmp _if29_exit
1209   0B78             _if29_exit:
1210   0B78             _if28_exit:
1211   0B78             ; while (num > 0) { 
1212   0B78             _while30_cond:
1213   0B78 FA 05 00      lea d, [bp + 5] ; $num
1214   0B7B 2A            mov b, [d]
1215   0B7C 38 00 00      mov c, 0
1216   0B7F             ; --- START RELATIONAL
1217   0B7F D7            push a
1218   0B80 11            mov a, b
1219   0B81 FD 2E 00 00   mov32 cb, $00000000
1219   0B85 00 00 
1220   0B87 B0            cmp a, b
1221   0B88 FD 7F         sgt ; >
1222   0B8A E4            pop a
1223   0B8B             ; --- END RELATIONAL
1224   0B8B C0 00 00      cmp b, 0
1225   0B8E C6 FD 0B      je _while30_exit
1226   0B91             _while30_block:
1227   0B91             ; digits[i] = '0' + (num % 10); 
1228   0B91 FA FC FF      lea d, [bp + -4] ; $digits
1229   0B94 D7            push a
1230   0B95 DA            push d
1231   0B96 FA FA FF      lea d, [bp + -6] ; $i
1232   0B99 2A            mov b, [d]
1233   0B9A 38 00 00      mov c, 0
1234   0B9D E7            pop d
1235   0B9E 5A            add d, b
1236   0B9F E4            pop a
1237   0BA0 DA            push d
1238   0BA1 FD 2E 30 00   mov32 cb, $00000030
1238   0BA5 00 00 
1239   0BA7             ; --- START TERMS
1240   0BA7 D7            push a
1241   0BA8 11            mov a, b
1242   0BA9 FA 05 00      lea d, [bp + 5] ; $num
1243   0BAC 2A            mov b, [d]
1244   0BAD 38 00 00      mov c, 0
1245   0BB0             ; --- START FACTORS
1246   0BB0 D7            push a
1247   0BB1 FD D8         push g
1248   0BB3 11            mov a, b
1249   0BB4 FD 7A         mov g, c
1250   0BB6 FD 2E 0A 00   mov32 cb, $0000000a
1250   0BBA 00 00 
1251   0BBC AE            div a, b ; 
1252   0BBD 11            mov a, b
1253   0BBE FD 38         mov c, g
1254   0BC0 27            mov b, a
1255   0BC1 FD F1         pop g
1256   0BC3 E4            pop a
1257   0BC4             ; --- END FACTORS
1258   0BC4 56            add b, a
1259   0BC5 E4            pop a
1260   0BC6             ; --- END TERMS
1261   0BC6 E7            pop d
1262   0BC7 FD 3E         mov [d], bl
1263   0BC9             ; num = num / 10; 
1264   0BC9 FA 05 00      lea d, [bp + 5] ; $num
1265   0BCC DA            push d
1266   0BCD FA 05 00      lea d, [bp + 5] ; $num
1267   0BD0 2A            mov b, [d]
1268   0BD1 38 00 00      mov c, 0
1269   0BD4             ; --- START FACTORS
1270   0BD4 D7            push a
1271   0BD5 FD D8         push g
1272   0BD7 11            mov a, b
1273   0BD8 FD 7A         mov g, c
1274   0BDA FD 2E 0A 00   mov32 cb, $0000000a
1274   0BDE 00 00 
1275   0BE0 AE            div a, b
1276   0BE1 FD 38         mov c, g
1277   0BE3 27            mov b, a
1278   0BE4 FD F1         pop g
1279   0BE6 E4            pop a
1280   0BE7             ; --- END FACTORS
1281   0BE7 E7            pop d
1282   0BE8 FD 43         mov [d], b
1283   0BEA             ; i++; 
1284   0BEA FA FA FF      lea d, [bp + -6] ; $i
1285   0BED 2A            mov b, [d]
1286   0BEE 38 00 00      mov c, 0
1287   0BF1 11            mov a, b
1288   0BF2 FD 77         inc b
1289   0BF4 FA FA FF      lea d, [bp + -6] ; $i
1290   0BF7 FD 43         mov [d], b
1291   0BF9 27            mov b, a
1292   0BFA 0A 78 0B      jmp _while30_cond
1293   0BFD             _while30_exit:
1294   0BFD             ; while (i > 0) { 
1295   0BFD             _while37_cond:
1296   0BFD FA FA FF      lea d, [bp + -6] ; $i
1297   0C00 2A            mov b, [d]
1298   0C01 38 00 00      mov c, 0
1299   0C04             ; --- START RELATIONAL
1300   0C04 D7            push a
1301   0C05 11            mov a, b
1302   0C06 FD 2E 00 00   mov32 cb, $00000000
1302   0C0A 00 00 
1303   0C0C B0            cmp a, b
1304   0C0D FD 7F         sgt ; >
1305   0C0F E4            pop a
1306   0C10             ; --- END RELATIONAL
1307   0C10 C0 00 00      cmp b, 0
1308   0C13 C6 45 0C      je _while37_exit
1309   0C16             _while37_block:
1310   0C16             ; i--; 
1311   0C16 FA FA FF      lea d, [bp + -6] ; $i
1312   0C19 2A            mov b, [d]
1313   0C1A 38 00 00      mov c, 0
1314   0C1D 11            mov a, b
1315   0C1E FD 7D         dec b
1316   0C20 FA FA FF      lea d, [bp + -6] ; $i
1317   0C23 FD 43         mov [d], b
1318   0C25 27            mov b, a
1319   0C26             ; putchar(digits[i]); 
1320   0C26             ; --- START FUNCTION CALL
1321   0C26 FA FC FF      lea d, [bp + -4] ; $digits
1322   0C29 D7            push a
1323   0C2A DA            push d
1324   0C2B FA FA FF      lea d, [bp + -6] ; $i
1325   0C2E 2A            mov b, [d]
1326   0C2F 38 00 00      mov c, 0
1327   0C32 E7            pop d
1328   0C33 5A            add d, b
1329   0C34 E4            pop a
1330   0C35 32            mov bl, [d]
1331   0C36 A7 00         mov bh, 0
1332   0C38 38 00 00      mov c, 0
1333   0C3B DD            push bl
1334   0C3C 07 36 09      call putchar
1335   0C3F 51 01 00      add sp, 1
1336   0C42             ; --- END FUNCTION CALL
1337   0C42 0A FD 0B      jmp _while37_cond
1338   0C45             _while37_exit:
1339   0C45 F9            leave
1340   0C46 09            ret
1341   0C47             
1342   0C47             print_unsigned:
1343   0C47 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1344   0C4A             ; char digits[5]; 
1345   0C4A 52 05 00      sub sp, 5
1346   0C4D             ; int i; 
1347   0C4D 52 02 00      sub sp, 2
1348   0C50             ; i = 0; 
1349   0C50 FA FA FF      lea d, [bp + -6] ; $i
1350   0C53 DA            push d
1351   0C54 FD 2E 00 00   mov32 cb, $00000000
1351   0C58 00 00 
1352   0C5A E7            pop d
1353   0C5B FD 43         mov [d], b
1354   0C5D             ; if(num == 0){ 
1355   0C5D             _if38_cond:
1356   0C5D FA 05 00      lea d, [bp + 5] ; $num
1357   0C60 2A            mov b, [d]
1358   0C61 38 00 00      mov c, 0
1359   0C64             ; --- START RELATIONAL
1360   0C64 D7            push a
1361   0C65 11            mov a, b
1362   0C66 FD 2E 00 00   mov32 cb, $00000000
1362   0C6A 00 00 
1363   0C6C B0            cmp a, b
1364   0C6D FD 71         seq ; ==
1365   0C6F E4            pop a
1366   0C70             ; --- END RELATIONAL
1367   0C70 C0 00 00      cmp b, 0
1368   0C73 C6 88 0C      je _if38_exit
1369   0C76             _if38_TRUE:
1370   0C76             ; putchar('0'); 
1371   0C76             ; --- START FUNCTION CALL
1372   0C76 FD 2E 30 00   mov32 cb, $00000030
1372   0C7A 00 00 
1373   0C7C DD            push bl
1374   0C7D 07 36 09      call putchar
1375   0C80 51 01 00      add sp, 1
1376   0C83             ; --- END FUNCTION CALL
1377   0C83             ; return; 
1378   0C83 F9            leave
1379   0C84 09            ret
1380   0C85 0A 88 0C      jmp _if38_exit
1381   0C88             _if38_exit:
1382   0C88             ; while (num > 0) { 
1383   0C88             _while39_cond:
1384   0C88 FA 05 00      lea d, [bp + 5] ; $num
1385   0C8B 2A            mov b, [d]
1386   0C8C 38 00 00      mov c, 0
1387   0C8F             ; --- START RELATIONAL
1388   0C8F D7            push a
1389   0C90 11            mov a, b
1390   0C91 FD 2E 00 00   mov32 cb, $00000000
1390   0C95 00 00 
1391   0C97 B0            cmp a, b
1392   0C98 FD 81         sgu ; > (unsigned)
1393   0C9A E4            pop a
1394   0C9B             ; --- END RELATIONAL
1395   0C9B C0 00 00      cmp b, 0
1396   0C9E C6 0D 0D      je _while39_exit
1397   0CA1             _while39_block:
1398   0CA1             ; digits[i] = '0' + (num % 10); 
1399   0CA1 FA FC FF      lea d, [bp + -4] ; $digits
1400   0CA4 D7            push a
1401   0CA5 DA            push d
1402   0CA6 FA FA FF      lea d, [bp + -6] ; $i
1403   0CA9 2A            mov b, [d]
1404   0CAA 38 00 00      mov c, 0
1405   0CAD E7            pop d
1406   0CAE 5A            add d, b
1407   0CAF E4            pop a
1408   0CB0 DA            push d
1409   0CB1 FD 2E 30 00   mov32 cb, $00000030
1409   0CB5 00 00 
1410   0CB7             ; --- START TERMS
1411   0CB7 D7            push a
1412   0CB8 11            mov a, b
1413   0CB9 FA 05 00      lea d, [bp + 5] ; $num
1414   0CBC 2A            mov b, [d]
1415   0CBD 38 00 00      mov c, 0
1416   0CC0             ; --- START FACTORS
1417   0CC0 D7            push a
1418   0CC1 FD D8         push g
1419   0CC3 11            mov a, b
1420   0CC4 FD 7A         mov g, c
1421   0CC6 FD 2E 0A 00   mov32 cb, $0000000a
1421   0CCA 00 00 
1422   0CCC AE            div a, b ; 
1423   0CCD 11            mov a, b
1424   0CCE FD 38         mov c, g
1425   0CD0 27            mov b, a
1426   0CD1 FD F1         pop g
1427   0CD3 E4            pop a
1428   0CD4             ; --- END FACTORS
1429   0CD4 56            add b, a
1430   0CD5 E4            pop a
1431   0CD6             ; --- END TERMS
1432   0CD6 E7            pop d
1433   0CD7 FD 3E         mov [d], bl
1434   0CD9             ; num = num / 10; 
1435   0CD9 FA 05 00      lea d, [bp + 5] ; $num
1436   0CDC DA            push d
1437   0CDD FA 05 00      lea d, [bp + 5] ; $num
1438   0CE0 2A            mov b, [d]
1439   0CE1 38 00 00      mov c, 0
1440   0CE4             ; --- START FACTORS
1441   0CE4 D7            push a
1442   0CE5 FD D8         push g
1443   0CE7 11            mov a, b
1444   0CE8 FD 7A         mov g, c
1445   0CEA FD 2E 0A 00   mov32 cb, $0000000a
1445   0CEE 00 00 
1446   0CF0 AE            div a, b
1447   0CF1 FD 38         mov c, g
1448   0CF3 27            mov b, a
1449   0CF4 FD F1         pop g
1450   0CF6 E4            pop a
1451   0CF7             ; --- END FACTORS
1452   0CF7 E7            pop d
1453   0CF8 FD 43         mov [d], b
1454   0CFA             ; i++; 
1455   0CFA FA FA FF      lea d, [bp + -6] ; $i
1456   0CFD 2A            mov b, [d]
1457   0CFE 38 00 00      mov c, 0
1458   0D01 11            mov a, b
1459   0D02 FD 77         inc b
1460   0D04 FA FA FF      lea d, [bp + -6] ; $i
1461   0D07 FD 43         mov [d], b
1462   0D09 27            mov b, a
1463   0D0A 0A 88 0C      jmp _while39_cond
1464   0D0D             _while39_exit:
1465   0D0D             ; while (i > 0) { 
1466   0D0D             _while46_cond:
1467   0D0D FA FA FF      lea d, [bp + -6] ; $i
1468   0D10 2A            mov b, [d]
1469   0D11 38 00 00      mov c, 0
1470   0D14             ; --- START RELATIONAL
1471   0D14 D7            push a
1472   0D15 11            mov a, b
1473   0D16 FD 2E 00 00   mov32 cb, $00000000
1473   0D1A 00 00 
1474   0D1C B0            cmp a, b
1475   0D1D FD 7F         sgt ; >
1476   0D1F E4            pop a
1477   0D20             ; --- END RELATIONAL
1478   0D20 C0 00 00      cmp b, 0
1479   0D23 C6 55 0D      je _while46_exit
1480   0D26             _while46_block:
1481   0D26             ; i--; 
1482   0D26 FA FA FF      lea d, [bp + -6] ; $i
1483   0D29 2A            mov b, [d]
1484   0D2A 38 00 00      mov c, 0
1485   0D2D 11            mov a, b
1486   0D2E FD 7D         dec b
1487   0D30 FA FA FF      lea d, [bp + -6] ; $i
1488   0D33 FD 43         mov [d], b
1489   0D35 27            mov b, a
1490   0D36             ; putchar(digits[i]); 
1491   0D36             ; --- START FUNCTION CALL
1492   0D36 FA FC FF      lea d, [bp + -4] ; $digits
1493   0D39 D7            push a
1494   0D3A DA            push d
1495   0D3B FA FA FF      lea d, [bp + -6] ; $i
1496   0D3E 2A            mov b, [d]
1497   0D3F 38 00 00      mov c, 0
1498   0D42 E7            pop d
1499   0D43 5A            add d, b
1500   0D44 E4            pop a
1501   0D45 32            mov bl, [d]
1502   0D46 A7 00         mov bh, 0
1503   0D48 38 00 00      mov c, 0
1504   0D4B DD            push bl
1505   0D4C 07 36 09      call putchar
1506   0D4F 51 01 00      add sp, 1
1507   0D52             ; --- END FUNCTION CALL
1508   0D52 0A 0D 0D      jmp _while46_cond
1509   0D55             _while46_exit:
1510   0D55 F9            leave
1511   0D56 09            ret
1512   0D57             
1513   0D57             printx16:
1514   0D57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1515   0D5A             ; --- BEGIN INLINE ASM SEGMENT
1516   0D5A FA 05 00      lea d, [bp + 5] ; $hex
1517   0D5D 2A            mov b, [d]
1518   0D5E             print_u16x_printx16:
1519   0D5E DD            push bl
1520   0D5F 30            mov bl, bh
1521   0D60 07 7D 0D      call _itoa_printx16        
1522   0D63 2F            mov bl, al        
1523   0D64 19 00         mov al, 0
1524   0D66 05 03         syscall sys_io        
1525   0D68 24            mov ah, bl        
1526   0D69 19 00         mov al, 0
1527   0D6B 05 03         syscall sys_io        
1528   0D6D EA            pop bl
1529   0D6E 07 7D 0D      call _itoa_printx16        
1530   0D71 2F            mov bl, al        
1531   0D72 19 00         mov al, 0
1532   0D74 05 03         syscall sys_io        
1533   0D76 24            mov ah, bl        
1534   0D77 19 00         mov al, 0
1535   0D79 05 03         syscall sys_io        
1536   0D7B             ; --- END INLINE ASM SEGMENT
1537   0D7B             ; return; 
1538   0D7B F9            leave
1539   0D7C 09            ret
1540   0D7D             ; --- BEGIN INLINE ASM SEGMENT
1541   0D7D             _itoa_printx16:
1542   0D7D DA            push d
1543   0D7E D8            push b
1544   0D7F A7 00         mov bh, 0
1545   0D81 FD A4 04      shr bl, 4  
1546   0D84 74            mov d, b
1547   0D85 1F 97 0D      mov al, [d + s_hex_digits_printx16]
1548   0D88 23            mov ah, al
1549   0D89 E5            pop b
1550   0D8A D8            push b
1551   0D8B A7 00         mov bh, 0
1552   0D8D FD 87 0F      and bl, $0F
1553   0D90 74            mov d, b
1554   0D91 1F 97 0D      mov al, [d + s_hex_digits_printx16]
1555   0D94 E5            pop b
1556   0D95 E7            pop d
1557   0D96 09            ret
1558   0D97 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
1558   0D9B 34 35 36 37 
1558   0D9F 38 39 41 42 
1558   0DA3 43 44 45 46 
1559   0DA7             ; --- END INLINE ASM SEGMENT
1560   0DA7 F9            leave
1561   0DA8 09            ret
1562   0DA9             
1563   0DA9             atoi:
1564   0DA9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1565   0DAC             ; int result = 0;  // Initialize result 
1566   0DAC 52 02 00      sub sp, 2
1567   0DAF             ; --- START LOCAL VAR INITIALIZATION
1568   0DAF FA FF FF      lea d, [bp + -1] ; $result
1569   0DB2 DA            push d
1570   0DB3 FD 2E 00 00   mov32 cb, $00000000
1570   0DB7 00 00 
1571   0DB9 E7            pop d
1572   0DBA FD 43         mov [d], b
1573   0DBC             ; --- END LOCAL VAR INITIALIZATION
1574   0DBC             ; int sign = 1;    // Initialize sign as positive 
1575   0DBC 52 02 00      sub sp, 2
1576   0DBF             ; --- START LOCAL VAR INITIALIZATION
1577   0DBF FA FD FF      lea d, [bp + -3] ; $sign
1578   0DC2 DA            push d
1579   0DC3 FD 2E 01 00   mov32 cb, $00000001
1579   0DC7 00 00 
1580   0DC9 E7            pop d
1581   0DCA FD 43         mov [d], b
1582   0DCC             ; --- END LOCAL VAR INITIALIZATION
1583   0DCC             ; while (*str == ' ') str++; 
1584   0DCC             _while47_cond:
1585   0DCC FA 05 00      lea d, [bp + 5] ; $str
1586   0DCF 2A            mov b, [d]
1587   0DD0 38 00 00      mov c, 0
1588   0DD3 74            mov d, b
1589   0DD4 32            mov bl, [d]
1590   0DD5 A7 00         mov bh, 0
1591   0DD7 38 00 00      mov c, 0
1592   0DDA             ; --- START RELATIONAL
1593   0DDA D7            push a
1594   0DDB 11            mov a, b
1595   0DDC FD 2E 20 00   mov32 cb, $00000020
1595   0DE0 00 00 
1596   0DE2 B0            cmp a, b
1597   0DE3 FD 71         seq ; ==
1598   0DE5 E4            pop a
1599   0DE6             ; --- END RELATIONAL
1600   0DE6 C0 00 00      cmp b, 0
1601   0DE9 C6 FF 0D      je _while47_exit
1602   0DEC             _while47_block:
1603   0DEC             ; str++; 
1604   0DEC FA 05 00      lea d, [bp + 5] ; $str
1605   0DEF 2A            mov b, [d]
1606   0DF0 38 00 00      mov c, 0
1607   0DF3 FD 77         inc b
1608   0DF5 FA 05 00      lea d, [bp + 5] ; $str
1609   0DF8 FD 43         mov [d], b
1610   0DFA FD 7D         dec b
1611   0DFC 0A CC 0D      jmp _while47_cond
1612   0DFF             _while47_exit:
1613   0DFF             ; if (*str == '-' || *str == '+') { 
1614   0DFF             _if48_cond:
1615   0DFF FA 05 00      lea d, [bp + 5] ; $str
1616   0E02 2A            mov b, [d]
1617   0E03 38 00 00      mov c, 0
1618   0E06 74            mov d, b
1619   0E07 32            mov bl, [d]
1620   0E08 A7 00         mov bh, 0
1621   0E0A 38 00 00      mov c, 0
1622   0E0D             ; --- START RELATIONAL
1623   0E0D D7            push a
1624   0E0E 11            mov a, b
1625   0E0F FD 2E 2D 00   mov32 cb, $0000002d
1625   0E13 00 00 
1626   0E15 B0            cmp a, b
1627   0E16 FD 71         seq ; ==
1628   0E18 E4            pop a
1629   0E19             ; --- END RELATIONAL
1630   0E19             ; --- START LOGICAL OR
1631   0E19 D7            push a
1632   0E1A 11            mov a, b
1633   0E1B FA 05 00      lea d, [bp + 5] ; $str
1634   0E1E 2A            mov b, [d]
1635   0E1F 38 00 00      mov c, 0
1636   0E22 74            mov d, b
1637   0E23 32            mov bl, [d]
1638   0E24 A7 00         mov bh, 0
1639   0E26 38 00 00      mov c, 0
1640   0E29             ; --- START RELATIONAL
1641   0E29 D7            push a
1642   0E2A 11            mov a, b
1643   0E2B FD 2E 2B 00   mov32 cb, $0000002b
1643   0E2F 00 00 
1644   0E31 B0            cmp a, b
1645   0E32 FD 71         seq ; ==
1646   0E34 E4            pop a
1647   0E35             ; --- END RELATIONAL
1648   0E35 FD A8         sor a, b ; ||
1649   0E37 E4            pop a
1650   0E38             ; --- END LOGICAL OR
1651   0E38 C0 00 00      cmp b, 0
1652   0E3B C6 81 0E      je _if48_exit
1653   0E3E             _if48_TRUE:
1654   0E3E             ; if (*str == '-') sign = -1; 
1655   0E3E             _if49_cond:
1656   0E3E FA 05 00      lea d, [bp + 5] ; $str
1657   0E41 2A            mov b, [d]
1658   0E42 38 00 00      mov c, 0
1659   0E45 74            mov d, b
1660   0E46 32            mov bl, [d]
1661   0E47 A7 00         mov bh, 0
1662   0E49 38 00 00      mov c, 0
1663   0E4C             ; --- START RELATIONAL
1664   0E4C D7            push a
1665   0E4D 11            mov a, b
1666   0E4E FD 2E 2D 00   mov32 cb, $0000002d
1666   0E52 00 00 
1667   0E54 B0            cmp a, b
1668   0E55 FD 71         seq ; ==
1669   0E57 E4            pop a
1670   0E58             ; --- END RELATIONAL
1671   0E58 C0 00 00      cmp b, 0
1672   0E5B C6 6E 0E      je _if49_exit
1673   0E5E             _if49_TRUE:
1674   0E5E             ; sign = -1; 
1675   0E5E FA FD FF      lea d, [bp + -3] ; $sign
1676   0E61 DA            push d
1677   0E62 FD 2E FF FF   mov32 cb, $ffffffff
1677   0E66 FF FF 
1678   0E68 E7            pop d
1679   0E69 FD 43         mov [d], b
1680   0E6B 0A 6E 0E      jmp _if49_exit
1681   0E6E             _if49_exit:
1682   0E6E             ; str++; 
1683   0E6E FA 05 00      lea d, [bp + 5] ; $str
1684   0E71 2A            mov b, [d]
1685   0E72 38 00 00      mov c, 0
1686   0E75 FD 77         inc b
1687   0E77 FA 05 00      lea d, [bp + 5] ; $str
1688   0E7A FD 43         mov [d], b
1689   0E7C FD 7D         dec b
1690   0E7E 0A 81 0E      jmp _if48_exit
1691   0E81             _if48_exit:
1692   0E81             ; while (*str >= '0' && *str <= '9') { 
1693   0E81             _while50_cond:
1694   0E81 FA 05 00      lea d, [bp + 5] ; $str
1695   0E84 2A            mov b, [d]
1696   0E85 38 00 00      mov c, 0
1697   0E88 74            mov d, b
1698   0E89 32            mov bl, [d]
1699   0E8A A7 00         mov bh, 0
1700   0E8C 38 00 00      mov c, 0
1701   0E8F             ; --- START RELATIONAL
1702   0E8F D7            push a
1703   0E90 11            mov a, b
1704   0E91 FD 2E 30 00   mov32 cb, $00000030
1704   0E95 00 00 
1705   0E97 B0            cmp a, b
1706   0E98 FD 82         sgeu ; >= (unsigned)
1707   0E9A E4            pop a
1708   0E9B             ; --- END RELATIONAL
1709   0E9B             ; --- START LOGICAL AND
1710   0E9B D7            push a
1711   0E9C 11            mov a, b
1712   0E9D FA 05 00      lea d, [bp + 5] ; $str
1713   0EA0 2A            mov b, [d]
1714   0EA1 38 00 00      mov c, 0
1715   0EA4 74            mov d, b
1716   0EA5 32            mov bl, [d]
1717   0EA6 A7 00         mov bh, 0
1718   0EA8 38 00 00      mov c, 0
1719   0EAB             ; --- START RELATIONAL
1720   0EAB D7            push a
1721   0EAC 11            mov a, b
1722   0EAD FD 2E 39 00   mov32 cb, $00000039
1722   0EB1 00 00 
1723   0EB3 B0            cmp a, b
1724   0EB4 FD 76         sleu ; <= (unsigned)
1725   0EB6 E4            pop a
1726   0EB7             ; --- END RELATIONAL
1727   0EB7 FD A7         sand a, b
1728   0EB9 E4            pop a
1729   0EBA             ; --- END LOGICAL AND
1730   0EBA C0 00 00      cmp b, 0
1731   0EBD C6 10 0F      je _while50_exit
1732   0EC0             _while50_block:
1733   0EC0             ; result = result * 10 + (*str - '0'); 
1734   0EC0 FA FF FF      lea d, [bp + -1] ; $result
1735   0EC3 DA            push d
1736   0EC4 FA FF FF      lea d, [bp + -1] ; $result
1737   0EC7 2A            mov b, [d]
1738   0EC8 38 00 00      mov c, 0
1739   0ECB             ; --- START FACTORS
1740   0ECB D7            push a
1741   0ECC FD D8         push g
1742   0ECE 11            mov a, b
1743   0ECF FD 7A         mov g, c
1744   0ED1 FD 2E 0A 00   mov32 cb, $0000000a
1744   0ED5 00 00 
1745   0ED7 FD 38         mov c, g
1746   0ED9 27            mov b, a
1747   0EDA FD F1         pop g
1748   0EDC E4            pop a
1749   0EDD             ; --- END FACTORS
1750   0EDD             ; --- START TERMS
1751   0EDD D7            push a
1752   0EDE 11            mov a, b
1753   0EDF FA 05 00      lea d, [bp + 5] ; $str
1754   0EE2 2A            mov b, [d]
1755   0EE3 38 00 00      mov c, 0
1756   0EE6 74            mov d, b
1757   0EE7 32            mov bl, [d]
1758   0EE8 A7 00         mov bh, 0
1759   0EEA 38 00 00      mov c, 0
1760   0EED             ; --- START TERMS
1761   0EED D7            push a
1762   0EEE 11            mov a, b
1763   0EEF FD 2E 30 00   mov32 cb, $00000030
1763   0EF3 00 00 
1764   0EF5 60            sub a, b
1765   0EF6 27            mov b, a
1766   0EF7 E4            pop a
1767   0EF8             ; --- END TERMS
1768   0EF8 56            add b, a
1769   0EF9 E4            pop a
1770   0EFA             ; --- END TERMS
1771   0EFA E7            pop d
1772   0EFB FD 43         mov [d], b
1773   0EFD             ; str++; 
1774   0EFD FA 05 00      lea d, [bp + 5] ; $str
1775   0F00 2A            mov b, [d]
1776   0F01 38 00 00      mov c, 0
1777   0F04 FD 77         inc b
1778   0F06 FA 05 00      lea d, [bp + 5] ; $str
1779   0F09 FD 43         mov [d], b
1780   0F0B FD 7D         dec b
1781   0F0D 0A 81 0E      jmp _while50_cond
1782   0F10             _while50_exit:
1783   0F10             ; return sign * result; 
1784   0F10 FA FD FF      lea d, [bp + -3] ; $sign
1785   0F13 2A            mov b, [d]
1786   0F14 38 00 00      mov c, 0
1787   0F17             ; --- START FACTORS
1788   0F17 D7            push a
1789   0F18 FD D8         push g
1790   0F1A 11            mov a, b
1791   0F1B FD 7A         mov g, c
1792   0F1D FA FF FF      lea d, [bp + -1] ; $result
1793   0F20 2A            mov b, [d]
1794   0F21 38 00 00      mov c, 0
1795   0F24 FD 38         mov c, g
1796   0F26 27            mov b, a
1797   0F27 FD F1         pop g
1798   0F29 E4            pop a
1799   0F2A             ; --- END FACTORS
1800   0F2A F9            leave
1801   0F2B 09            ret
1802   0F2C             ; --- END TEXT SEGMENT
1803   0F2C             
1804   0F2C             ; --- BEGIN DATA SEGMENT
1805   0F2C 68 65 6C 6C _s0: .db "hello world", 0
1805   0F30 6F 20 77 6F 
1805   0F34 72 6C 64 00 
1806   0F38 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
1806   0F3C 70 65 63 74 
1806   0F40 65 64 20 66 
1806   0F44 6F 72 6D 61 
1806   0F48 74 20 69 6E 
1806   0F4C 20 70 72 69 
1806   0F50 6E 74 66 2E 
1806   0F54 00 
1807   0F55 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
1807   0F59 72 3A 20 55 
1807   0F5D 6E 6B 6E 6F 
1807   0F61 77 6E 20 61 
1807   0F65 72 67 75 6D 
1807   0F69 65 6E 74 20 
1807   0F6D 74 79 70 65 
1807   0F71 2E 0A 00 
1808   0F74             
1809   0F74 76 0F       _heap_top: .dw _heap
1810   0F76 00          _heap: .db 0
1811   0F77             ; --- END DATA SEGMENT
1812   0F77             
1813   0F77             .end
tasm: Number of errors = 0
