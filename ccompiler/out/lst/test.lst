0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; sprintf(s, "Integer: %d, Char: %c, String: %s\n\n",  2341, 'G', "Hello World!"); 
0011   0408 26 D4 1F      mov b, _s0 ; "Hello World!"
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 26 47 00      mov b, $47
0015   0411 DD            push bl
0016   0412 26 25 09      mov b, $925
0017   0415 FD AB         swp b
0018   0417 D8            push b
0019   0418 26 E1 1F      mov b, _s1 ; "Integer: %d, Char: %c, String: %s\n\n"
0020   041B FD AB         swp b
0021   041D D8            push b
0022   041E 3B D4 1E      mov d, _s_data ; $s
0023   0421 2D            mov b, d
0024   0422 FD AB         swp b
0025   0424 D8            push b
0026   0425 07 99 0C      call sprintf
0027   0428 51 09 00      add sp, 9
0028   042B             ;; printf("Final String: %s", s); 
0029   042B 3B D4 1E      mov d, _s_data ; $s
0030   042E 2D            mov b, d
0031   042F FD AB         swp b
0032   0431 D8            push b
0033   0432 26 05 20      mov b, _s2 ; "Final String: %s"
0034   0435 FD AB         swp b
0035   0437 D8            push b
0036   0438 07 E6 07      call printf
0037   043B 51 04 00      add sp, 4
0038   043E 05 0B         syscall sys_terminate_proc
0039   0440             
0040   0440             strcpy:
0041   0440 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0042   0443             ;; char *psrc; 
0043   0443 52 02 00      sub sp, 2 ; psrc
0044   0446             ;; char *pdest; 
0045   0446 52 02 00      sub sp, 2 ; pdest
0046   0449             ;; psrc = src; 
0047   0449 FA FF FF      lea d, [bp + -1] ; $psrc
0048   044C DA            push d
0049   044D FA 07 00      lea d, [bp + 7] ; $src
0050   0450 2A            mov b, [d]
0051   0451 E7            pop d
0052   0452 FD 43         mov [d], b
0053   0454             ;; pdest = dest; 
0054   0454 FA FD FF      lea d, [bp + -3] ; $pdest
0055   0457 DA            push d
0056   0458 FA 05 00      lea d, [bp + 5] ; $dest
0057   045B 2A            mov b, [d]
0058   045C E7            pop d
0059   045D FD 43         mov [d], b
0060   045F             ;; while(*psrc) *pdest++ = *psrc++; 
0061   045F             _while1_cond:
0062   045F FA FF FF      lea d, [bp + -1] ; $psrc
0063   0462 2A            mov b, [d]
0064   0463 74            mov d, b
0065   0464 32            mov bl, [d]
0066   0465 A7 00         mov bh, 0
0067   0467 C0 00 00      cmp b, 0
0068   046A C6 92 04      je _while1_exit
0069   046D             _while1_block:
0070   046D             ;; *pdest++ = *psrc++; 
0071   046D FA FD FF      lea d, [bp + -3] ; $pdest
0072   0470 2A            mov b, [d]
0073   0471 FD 77         inc b
0074   0473 FA FD FF      lea d, [bp + -3] ; $pdest
0075   0476 FD 43         mov [d], b
0076   0478 FD 7D         dec b
0077   047A D8            push b
0078   047B FA FF FF      lea d, [bp + -1] ; $psrc
0079   047E 2A            mov b, [d]
0080   047F FD 77         inc b
0081   0481 FA FF FF      lea d, [bp + -1] ; $psrc
0082   0484 FD 43         mov [d], b
0083   0486 FD 7D         dec b
0084   0488 74            mov d, b
0085   0489 32            mov bl, [d]
0086   048A A7 00         mov bh, 0
0087   048C E7            pop d
0088   048D FD 3E         mov [d], bl
0089   048F 0A 5F 04      jmp _while1_cond
0090   0492             _while1_exit:
0091   0492             ;; *pdest = '\0'; 
0092   0492 FA FD FF      lea d, [bp + -3] ; $pdest
0093   0495 2A            mov b, [d]
0094   0496 D8            push b
0095   0497 26 00 00      mov b, $0
0096   049A E7            pop d
0097   049B FD 3E         mov [d], bl
0098   049D F9            leave
0099   049E 09            ret
0100   049F             
0101   049F             strcmp:
0102   049F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0103   04A2             ;; while (*s1 && (*s1 == *s2)) { 
0104   04A2             _while2_cond:
0105   04A2 FA 05 00      lea d, [bp + 5] ; $s1
0106   04A5 2A            mov b, [d]
0107   04A6 74            mov d, b
0108   04A7 32            mov bl, [d]
0109   04A8 A7 00         mov bh, 0
0110   04AA             ; START LOGICAL AND
0111   04AA D7            push a
0112   04AB 11            mov a, b
0113   04AC FA 05 00      lea d, [bp + 5] ; $s1
0114   04AF 2A            mov b, [d]
0115   04B0 74            mov d, b
0116   04B1 32            mov bl, [d]
0117   04B2 A7 00         mov bh, 0
0118   04B4             ; START RELATIONAL
0119   04B4 D7            push a
0120   04B5 11            mov a, b
0121   04B6 FA 07 00      lea d, [bp + 7] ; $s2
0122   04B9 2A            mov b, [d]
0123   04BA 74            mov d, b
0124   04BB 32            mov bl, [d]
0125   04BC A7 00         mov bh, 0
0126   04BE B0            cmp a, b
0127   04BF FD 71         seq ; ==
0128   04C1 E4            pop a
0129   04C2             ; END RELATIONAL
0130   04C2 FD A7         sand a, b
0131   04C4 E4            pop a
0132   04C5             ; END LOGICAL AND
0133   04C5 C0 00 00      cmp b, 0
0134   04C8 C6 E8 04      je _while2_exit
0135   04CB             _while2_block:
0136   04CB             ;; s1++; 
0137   04CB FA 05 00      lea d, [bp + 5] ; $s1
0138   04CE 2A            mov b, [d]
0139   04CF FD 77         inc b
0140   04D1 FA 05 00      lea d, [bp + 5] ; $s1
0141   04D4 FD 43         mov [d], b
0142   04D6 FD 7D         dec b
0143   04D8             ;; s2++; 
0144   04D8 FA 07 00      lea d, [bp + 7] ; $s2
0145   04DB 2A            mov b, [d]
0146   04DC FD 77         inc b
0147   04DE FA 07 00      lea d, [bp + 7] ; $s2
0148   04E1 FD 43         mov [d], b
0149   04E3 FD 7D         dec b
0150   04E5 0A A2 04      jmp _while2_cond
0151   04E8             _while2_exit:
0152   04E8             ;; return *s1 - *s2; 
0153   04E8 FA 05 00      lea d, [bp + 5] ; $s1
0154   04EB 2A            mov b, [d]
0155   04EC 74            mov d, b
0156   04ED 32            mov bl, [d]
0157   04EE A7 00         mov bh, 0
0158   04F0             ; START TERMS
0159   04F0 D7            push a
0160   04F1 11            mov a, b
0161   04F2 FA 07 00      lea d, [bp + 7] ; $s2
0162   04F5 2A            mov b, [d]
0163   04F6 74            mov d, b
0164   04F7 32            mov bl, [d]
0165   04F8 A7 00         mov bh, 0
0166   04FA 60            sub a, b
0167   04FB 27            mov b, a
0168   04FC E4            pop a
0169   04FD             ; END TERMS
0170   04FD F9            leave
0171   04FE 09            ret
0172   04FF             
0173   04FF             strncmp:
0174   04FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0175   0502 F9            leave
0176   0503 09            ret
0177   0504             
0178   0504             strcat:
0179   0504 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0180   0507             ;; int dest_len; 
0181   0507 52 02 00      sub sp, 2 ; dest_len
0182   050A             ;; int i; 
0183   050A 52 02 00      sub sp, 2 ; i
0184   050D             ;; dest_len = strlen(dest); 
0185   050D FA FF FF      lea d, [bp + -1] ; $dest_len
0186   0510 DA            push d
0187   0511 FA 05 00      lea d, [bp + 5] ; $dest
0188   0514 2A            mov b, [d]
0189   0515 FD AB         swp b
0190   0517 D8            push b
0191   0518 07 BA 05      call strlen
0192   051B 51 02 00      add sp, 2
0193   051E E7            pop d
0194   051F FD 43         mov [d], b
0195   0521             ;; for (i = 0; src[i] != 0; i=i+1) { 
0196   0521             _for3_init:
0197   0521 FA FD FF      lea d, [bp + -3] ; $i
0198   0524 DA            push d
0199   0525 26 00 00      mov b, $0
0200   0528 E7            pop d
0201   0529 FD 43         mov [d], b
0202   052B             _for3_cond:
0203   052B FA 07 00      lea d, [bp + 7] ; $src
0204   052E FD 2A         mov d, [d]
0205   0530 D7            push a
0206   0531 DA            push d
0207   0532 FA FD FF      lea d, [bp + -3] ; $i
0208   0535 2A            mov b, [d]
0209   0536 E7            pop d
0210   0537 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0211   053B E4            pop a
0212   053C 32            mov bl, [d]
0213   053D A7 00         mov bh, 0
0214   053F             ; START RELATIONAL
0215   053F D7            push a
0216   0540 11            mov a, b
0217   0541 26 00 00      mov b, $0
0218   0544 B0            cmp a, b
0219   0545 FD 72         sneq ; !=
0220   0547 E4            pop a
0221   0548             ; END RELATIONAL
0222   0548 C0 00 00      cmp b, 0
0223   054B C6 94 05      je _for3_exit
0224   054E             _for3_block:
0225   054E             ;; dest[dest_len + i] = src[i]; 
0226   054E FA 05 00      lea d, [bp + 5] ; $dest
0227   0551 FD 2A         mov d, [d]
0228   0553 D7            push a
0229   0554 DA            push d
0230   0555 FA FF FF      lea d, [bp + -1] ; $dest_len
0231   0558 2A            mov b, [d]
0232   0559             ; START TERMS
0233   0559 D7            push a
0234   055A 11            mov a, b
0235   055B FA FD FF      lea d, [bp + -3] ; $i
0236   055E 2A            mov b, [d]
0237   055F 56            add b, a
0238   0560 E4            pop a
0239   0561             ; END TERMS
0240   0561 E7            pop d
0241   0562 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0242   0566 E4            pop a
0243   0567 DA            push d
0244   0568 FA 07 00      lea d, [bp + 7] ; $src
0245   056B FD 2A         mov d, [d]
0246   056D D7            push a
0247   056E DA            push d
0248   056F FA FD FF      lea d, [bp + -3] ; $i
0249   0572 2A            mov b, [d]
0250   0573 E7            pop d
0251   0574 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0252   0578 E4            pop a
0253   0579 32            mov bl, [d]
0254   057A A7 00         mov bh, 0
0255   057C E7            pop d
0256   057D FD 3E         mov [d], bl
0257   057F             _for3_update:
0258   057F FA FD FF      lea d, [bp + -3] ; $i
0259   0582 DA            push d
0260   0583 FA FD FF      lea d, [bp + -3] ; $i
0261   0586 2A            mov b, [d]
0262   0587             ; START TERMS
0263   0587 D7            push a
0264   0588 11            mov a, b
0265   0589 26 01 00      mov b, $1
0266   058C 56            add b, a
0267   058D E4            pop a
0268   058E             ; END TERMS
0269   058E E7            pop d
0270   058F FD 43         mov [d], b
0271   0591 0A 2B 05      jmp _for3_cond
0272   0594             _for3_exit:
0273   0594             ;; dest[dest_len + i] = 0; 
0274   0594 FA 05 00      lea d, [bp + 5] ; $dest
0275   0597 FD 2A         mov d, [d]
0276   0599 D7            push a
0277   059A DA            push d
0278   059B FA FF FF      lea d, [bp + -1] ; $dest_len
0279   059E 2A            mov b, [d]
0280   059F             ; START TERMS
0281   059F D7            push a
0282   05A0 11            mov a, b
0283   05A1 FA FD FF      lea d, [bp + -3] ; $i
0284   05A4 2A            mov b, [d]
0285   05A5 56            add b, a
0286   05A6 E4            pop a
0287   05A7             ; END TERMS
0288   05A7 E7            pop d
0289   05A8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0290   05AC E4            pop a
0291   05AD DA            push d
0292   05AE 26 00 00      mov b, $0
0293   05B1 E7            pop d
0294   05B2 FD 3E         mov [d], bl
0295   05B4             ;; return dest; 
0296   05B4 FA 05 00      lea d, [bp + 5] ; $dest
0297   05B7 2A            mov b, [d]
0298   05B8 F9            leave
0299   05B9 09            ret
0300   05BA             
0301   05BA             strlen:
0302   05BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0303   05BD             ;; int length; 
0304   05BD 52 02 00      sub sp, 2 ; length
0305   05C0             ;; length = 0; 
0306   05C0 FA FF FF      lea d, [bp + -1] ; $length
0307   05C3 DA            push d
0308   05C4 26 00 00      mov b, $0
0309   05C7 E7            pop d
0310   05C8 FD 43         mov [d], b
0311   05CA             ;; while (str[length] != 0) { 
0312   05CA             _while4_cond:
0313   05CA FA 05 00      lea d, [bp + 5] ; $str
0314   05CD FD 2A         mov d, [d]
0315   05CF D7            push a
0316   05D0 DA            push d
0317   05D1 FA FF FF      lea d, [bp + -1] ; $length
0318   05D4 2A            mov b, [d]
0319   05D5 E7            pop d
0320   05D6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0321   05DA E4            pop a
0322   05DB 32            mov bl, [d]
0323   05DC A7 00         mov bh, 0
0324   05DE             ; START RELATIONAL
0325   05DE D7            push a
0326   05DF 11            mov a, b
0327   05E0 26 00 00      mov b, $0
0328   05E3 B0            cmp a, b
0329   05E4 FD 72         sneq ; !=
0330   05E6 E4            pop a
0331   05E7             ; END RELATIONAL
0332   05E7 C0 00 00      cmp b, 0
0333   05EA C6 FD 05      je _while4_exit
0334   05ED             _while4_block:
0335   05ED             ;; length++; 
0336   05ED FA FF FF      lea d, [bp + -1] ; $length
0337   05F0 2A            mov b, [d]
0338   05F1 FD 77         inc b
0339   05F3 FA FF FF      lea d, [bp + -1] ; $length
0340   05F6 FD 43         mov [d], b
0341   05F8 FD 7D         dec b
0342   05FA 0A CA 05      jmp _while4_cond
0343   05FD             _while4_exit:
0344   05FD             ;; return length; 
0345   05FD FA FF FF      lea d, [bp + -1] ; $length
0346   0600 2A            mov b, [d]
0347   0601 F9            leave
0348   0602 09            ret
0349   0603             
0350   0603             exit:
0351   0603 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0352   0606             
0353   0606             ; --- BEGIN INLINE ASM BLOCK
0354   0606 05 0B         syscall sys_terminate_proc
0355   0608             ; --- END INLINE ASM BLOCK
0356   0608             
0357   0608 F9            leave
0358   0609 09            ret
0359   060A             
0360   060A             memset:
0361   060A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0362   060D             ;; int i; 
0363   060D 52 02 00      sub sp, 2 ; i
0364   0610             ;; for(i = 0; i < size; i++){ 
0365   0610             _for5_init:
0366   0610 FA FF FF      lea d, [bp + -1] ; $i
0367   0613 DA            push d
0368   0614 26 00 00      mov b, $0
0369   0617 E7            pop d
0370   0618 FD 43         mov [d], b
0371   061A             _for5_cond:
0372   061A FA FF FF      lea d, [bp + -1] ; $i
0373   061D 2A            mov b, [d]
0374   061E             ; START RELATIONAL
0375   061E D7            push a
0376   061F 11            mov a, b
0377   0620 FA 08 00      lea d, [bp + 8] ; $size
0378   0623 2A            mov b, [d]
0379   0624 B0            cmp a, b
0380   0625 FD 73         slt ; < (signed)
0381   0627 E4            pop a
0382   0628             ; END RELATIONAL
0383   0628 C0 00 00      cmp b, 0
0384   062B C6 54 06      je _for5_exit
0385   062E             _for5_block:
0386   062E             ;; *(s+i) = c; 
0387   062E FA 05 00      lea d, [bp + 5] ; $s
0388   0631 2A            mov b, [d]
0389   0632             ; START TERMS
0390   0632 D7            push a
0391   0633 11            mov a, b
0392   0634 FA FF FF      lea d, [bp + -1] ; $i
0393   0637 2A            mov b, [d]
0394   0638 56            add b, a
0395   0639 E4            pop a
0396   063A             ; END TERMS
0397   063A D8            push b
0398   063B FA 07 00      lea d, [bp + 7] ; $c
0399   063E 32            mov bl, [d]
0400   063F A7 00         mov bh, 0
0401   0641 E7            pop d
0402   0642 FD 3E         mov [d], bl
0403   0644             _for5_update:
0404   0644 FA FF FF      lea d, [bp + -1] ; $i
0405   0647 2A            mov b, [d]
0406   0648 FD 77         inc b
0407   064A FA FF FF      lea d, [bp + -1] ; $i
0408   064D FD 43         mov [d], b
0409   064F FD 7D         dec b
0410   0651 0A 1A 06      jmp _for5_cond
0411   0654             _for5_exit:
0412   0654             ;; return s; 
0413   0654 FA 05 00      lea d, [bp + 5] ; $s
0414   0657 2A            mov b, [d]
0415   0658 F9            leave
0416   0659 09            ret
0417   065A             
0418   065A             atoi:
0419   065A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0420   065D             ;; int result = 0;  // Initialize result 
0421   065D 52 02 00      sub sp, 2 ; result
0422   0660             ; --- START LOCAL VAR INITIALIZATION
0423   0660 FA FF FF      lea d, [bp + -1] ; $result
0424   0663 DA            push d
0425   0664 26 00 00      mov b, $0
0426   0667 E7            pop d
0427   0668 FD 43         mov [d], b
0428   066A             ; --- END LOCAL VAR INITIALIZATION
0429   066A             ;; int sign = 1;    // Initialize sign as positive 
0430   066A 52 02 00      sub sp, 2 ; sign
0431   066D             ; --- START LOCAL VAR INITIALIZATION
0432   066D FA FD FF      lea d, [bp + -3] ; $sign
0433   0670 DA            push d
0434   0671 26 01 00      mov b, $1
0435   0674 E7            pop d
0436   0675 FD 43         mov [d], b
0437   0677             ; --- END LOCAL VAR INITIALIZATION
0438   0677             ;; while (*str == ' ') str++; 
0439   0677             _while6_cond:
0440   0677 FA 05 00      lea d, [bp + 5] ; $str
0441   067A 2A            mov b, [d]
0442   067B 74            mov d, b
0443   067C 32            mov bl, [d]
0444   067D A7 00         mov bh, 0
0445   067F             ; START RELATIONAL
0446   067F D7            push a
0447   0680 11            mov a, b
0448   0681 26 20 00      mov b, $20
0449   0684 B0            cmp a, b
0450   0685 FD 71         seq ; ==
0451   0687 E4            pop a
0452   0688             ; END RELATIONAL
0453   0688 C0 00 00      cmp b, 0
0454   068B C6 9E 06      je _while6_exit
0455   068E             _while6_block:
0456   068E             ;; str++; 
0457   068E FA 05 00      lea d, [bp + 5] ; $str
0458   0691 2A            mov b, [d]
0459   0692 FD 77         inc b
0460   0694 FA 05 00      lea d, [bp + 5] ; $str
0461   0697 FD 43         mov [d], b
0462   0699 FD 7D         dec b
0463   069B 0A 77 06      jmp _while6_cond
0464   069E             _while6_exit:
0465   069E             ;; if (*str == '-' || *str == '+') { 
0466   069E             _if7_cond:
0467   069E FA 05 00      lea d, [bp + 5] ; $str
0468   06A1 2A            mov b, [d]
0469   06A2 74            mov d, b
0470   06A3 32            mov bl, [d]
0471   06A4 A7 00         mov bh, 0
0472   06A6             ; START RELATIONAL
0473   06A6 D7            push a
0474   06A7 11            mov a, b
0475   06A8 26 2D 00      mov b, $2d
0476   06AB B0            cmp a, b
0477   06AC FD 71         seq ; ==
0478   06AE E4            pop a
0479   06AF             ; END RELATIONAL
0480   06AF             ; START LOGICAL OR
0481   06AF D7            push a
0482   06B0 11            mov a, b
0483   06B1 FA 05 00      lea d, [bp + 5] ; $str
0484   06B4 2A            mov b, [d]
0485   06B5 74            mov d, b
0486   06B6 32            mov bl, [d]
0487   06B7 A7 00         mov bh, 0
0488   06B9             ; START RELATIONAL
0489   06B9 D7            push a
0490   06BA 11            mov a, b
0491   06BB 26 2B 00      mov b, $2b
0492   06BE B0            cmp a, b
0493   06BF FD 71         seq ; ==
0494   06C1 E4            pop a
0495   06C2             ; END RELATIONAL
0496   06C2 FD A8         sor a, b ; ||
0497   06C4 E4            pop a
0498   06C5             ; END LOGICAL OR
0499   06C5 C0 00 00      cmp b, 0
0500   06C8 C6 01 07      je _if7_exit
0501   06CB             _if7_true:
0502   06CB             ;; if (*str == '-') sign = -1; 
0503   06CB             _if8_cond:
0504   06CB FA 05 00      lea d, [bp + 5] ; $str
0505   06CE 2A            mov b, [d]
0506   06CF 74            mov d, b
0507   06D0 32            mov bl, [d]
0508   06D1 A7 00         mov bh, 0
0509   06D3             ; START RELATIONAL
0510   06D3 D7            push a
0511   06D4 11            mov a, b
0512   06D5 26 2D 00      mov b, $2d
0513   06D8 B0            cmp a, b
0514   06D9 FD 71         seq ; ==
0515   06DB E4            pop a
0516   06DC             ; END RELATIONAL
0517   06DC C0 00 00      cmp b, 0
0518   06DF C6 F1 06      je _if8_exit
0519   06E2             _if8_true:
0520   06E2             ;; sign = -1; 
0521   06E2 FA FD FF      lea d, [bp + -3] ; $sign
0522   06E5 DA            push d
0523   06E6 26 01 00      mov b, $1
0524   06E9 FD 97         neg b
0525   06EB E7            pop d
0526   06EC FD 43         mov [d], b
0527   06EE 0A F1 06      jmp _if8_exit
0528   06F1             _if8_exit:
0529   06F1             ;; str++; 
0530   06F1 FA 05 00      lea d, [bp + 5] ; $str
0531   06F4 2A            mov b, [d]
0532   06F5 FD 77         inc b
0533   06F7 FA 05 00      lea d, [bp + 5] ; $str
0534   06FA FD 43         mov [d], b
0535   06FC FD 7D         dec b
0536   06FE 0A 01 07      jmp _if7_exit
0537   0701             _if7_exit:
0538   0701             ;; while (*str >= '0' && *str <= '9') { 
0539   0701             _while9_cond:
0540   0701 FA 05 00      lea d, [bp + 5] ; $str
0541   0704 2A            mov b, [d]
0542   0705 74            mov d, b
0543   0706 32            mov bl, [d]
0544   0707 A7 00         mov bh, 0
0545   0709             ; START RELATIONAL
0546   0709 D7            push a
0547   070A 11            mov a, b
0548   070B 26 30 00      mov b, $30
0549   070E B0            cmp a, b
0550   070F FD 82         sgeu ; >= (unsigned)
0551   0711 E4            pop a
0552   0712             ; END RELATIONAL
0553   0712             ; START LOGICAL AND
0554   0712 D7            push a
0555   0713 11            mov a, b
0556   0714 FA 05 00      lea d, [bp + 5] ; $str
0557   0717 2A            mov b, [d]
0558   0718 74            mov d, b
0559   0719 32            mov bl, [d]
0560   071A A7 00         mov bh, 0
0561   071C             ; START RELATIONAL
0562   071C D7            push a
0563   071D 11            mov a, b
0564   071E 26 39 00      mov b, $39
0565   0721 B0            cmp a, b
0566   0722 FD 76         sleu ; <= (unsigned)
0567   0724 E4            pop a
0568   0725             ; END RELATIONAL
0569   0725 FD A7         sand a, b
0570   0727 E4            pop a
0571   0728             ; END LOGICAL AND
0572   0728 C0 00 00      cmp b, 0
0573   072B C6 66 07      je _while9_exit
0574   072E             _while9_block:
0575   072E             ;; result = result * 10 + (*str - '0'); 
0576   072E FA FF FF      lea d, [bp + -1] ; $result
0577   0731 DA            push d
0578   0732 FA FF FF      lea d, [bp + -1] ; $result
0579   0735 2A            mov b, [d]
0580   0736             ; START FACTORS
0581   0736 D7            push a
0582   0737 11            mov a, b
0583   0738 26 0A 00      mov b, $a
0584   073B AC            mul a, b ; *
0585   073C 11            mov a, b
0586   073D 27            mov b, a
0587   073E E4            pop a
0588   073F             ; END FACTORS
0589   073F             ; START TERMS
0590   073F D7            push a
0591   0740 11            mov a, b
0592   0741 FA 05 00      lea d, [bp + 5] ; $str
0593   0744 2A            mov b, [d]
0594   0745 74            mov d, b
0595   0746 32            mov bl, [d]
0596   0747 A7 00         mov bh, 0
0597   0749             ; START TERMS
0598   0749 D7            push a
0599   074A 11            mov a, b
0600   074B 26 30 00      mov b, $30
0601   074E 60            sub a, b
0602   074F 27            mov b, a
0603   0750 E4            pop a
0604   0751             ; END TERMS
0605   0751 56            add b, a
0606   0752 E4            pop a
0607   0753             ; END TERMS
0608   0753 E7            pop d
0609   0754 FD 43         mov [d], b
0610   0756             ;; str++; 
0611   0756 FA 05 00      lea d, [bp + 5] ; $str
0612   0759 2A            mov b, [d]
0613   075A FD 77         inc b
0614   075C FA 05 00      lea d, [bp + 5] ; $str
0615   075F FD 43         mov [d], b
0616   0761 FD 7D         dec b
0617   0763 0A 01 07      jmp _while9_cond
0618   0766             _while9_exit:
0619   0766             ;; return sign * result; 
0620   0766 FA FD FF      lea d, [bp + -3] ; $sign
0621   0769 2A            mov b, [d]
0622   076A             ; START FACTORS
0623   076A D7            push a
0624   076B 11            mov a, b
0625   076C FA FF FF      lea d, [bp + -1] ; $result
0626   076F 2A            mov b, [d]
0627   0770 AC            mul a, b ; *
0628   0771 11            mov a, b
0629   0772 27            mov b, a
0630   0773 E4            pop a
0631   0774             ; END FACTORS
0632   0774 F9            leave
0633   0775 09            ret
0634   0776             
0635   0776             rand:
0636   0776 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0637   0779             ;; int  sec; 
0638   0779 52 02 00      sub sp, 2 ; sec
0639   077C             
0640   077C             ; --- BEGIN INLINE ASM BLOCK
0641   077C 19 00         mov al, 0
0642   077E 05 01         syscall sys_rtc					
0643   0780 1A            mov al, ah
0644   0781 FA FF FF      lea d, [bp + -1] ; $sec
0645   0784 1E            mov al, [d]
0646   0785 22 00         mov ah, 0
0647   0787             ; --- END INLINE ASM BLOCK
0648   0787             
0649   0787             ;; return sec; 
0650   0787 FA FF FF      lea d, [bp + -1] ; $sec
0651   078A 2A            mov b, [d]
0652   078B F9            leave
0653   078C 09            ret
0654   078D             
0655   078D             alloc:
0656   078D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0657   0790             ;; heap_top = heap_top + bytes; 
0658   0790 3B 5A 20      mov d, _heap_top ; $heap_top
0659   0793 DA            push d
0660   0794 3B 5A 20      mov d, _heap_top ; $heap_top
0661   0797 2A            mov b, [d]
0662   0798             ; START TERMS
0663   0798 D7            push a
0664   0799 11            mov a, b
0665   079A FA 05 00      lea d, [bp + 5] ; $bytes
0666   079D 2A            mov b, [d]
0667   079E 56            add b, a
0668   079F E4            pop a
0669   07A0             ; END TERMS
0670   07A0 E7            pop d
0671   07A1 FD 43         mov [d], b
0672   07A3             ;; return heap_top - bytes; 
0673   07A3 3B 5A 20      mov d, _heap_top ; $heap_top
0674   07A6 2A            mov b, [d]
0675   07A7             ; START TERMS
0676   07A7 D7            push a
0677   07A8 11            mov a, b
0678   07A9 FA 05 00      lea d, [bp + 5] ; $bytes
0679   07AC 2A            mov b, [d]
0680   07AD 60            sub a, b
0681   07AE 27            mov b, a
0682   07AF E4            pop a
0683   07B0             ; END TERMS
0684   07B0 F9            leave
0685   07B1 09            ret
0686   07B2             
0687   07B2             free:
0688   07B2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0689   07B5             ;; return heap_top = heap_top - bytes; 
0690   07B5 3B 5A 20      mov d, _heap_top ; $heap_top
0691   07B8 DA            push d
0692   07B9 3B 5A 20      mov d, _heap_top ; $heap_top
0693   07BC 2A            mov b, [d]
0694   07BD             ; START TERMS
0695   07BD D7            push a
0696   07BE 11            mov a, b
0697   07BF FA 05 00      lea d, [bp + 5] ; $bytes
0698   07C2 2A            mov b, [d]
0699   07C3 60            sub a, b
0700   07C4 27            mov b, a
0701   07C5 E4            pop a
0702   07C6             ; END TERMS
0703   07C6 E7            pop d
0704   07C7 FD 43         mov [d], b
0705   07C9 F9            leave
0706   07CA 09            ret
0707   07CB             
0708   07CB             fopen:
0709   07CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0710   07CE             ;; FILE *fp; 
0711   07CE 52 02 00      sub sp, 2 ; fp
0712   07D1             ;; fp = alloc(sizeof(int)); 
0713   07D1 FA FF FF      lea d, [bp + -1] ; $fp
0714   07D4 DA            push d
0715   07D5 26 02 00      mov b, 2
0716   07D8 FD AB         swp b
0717   07DA D8            push b
0718   07DB 07 8D 07      call alloc
0719   07DE 51 02 00      add sp, 2
0720   07E1 E7            pop d
0721   07E2 FD 43         mov [d], b
0722   07E4 F9            leave
0723   07E5 09            ret
0724   07E6             
0725   07E6             printf:
0726   07E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0727   07E9             ;; char *p, *format_p; 
0728   07E9 52 02 00      sub sp, 2 ; p
0729   07EC 52 02 00      sub sp, 2 ; format_p
0730   07EF             ;; format_p = format; 
0731   07EF FA FD FF      lea d, [bp + -3] ; $format_p
0732   07F2 DA            push d
0733   07F3 FA 05 00      lea d, [bp + 5] ; $format
0734   07F6 2A            mov b, [d]
0735   07F7 E7            pop d
0736   07F8 FD 43         mov [d], b
0737   07FA             ;; p = &format + 2; 
0738   07FA FA FF FF      lea d, [bp + -1] ; $p
0739   07FD DA            push d
0740   07FE FA 05 00      lea d, [bp + 5] ; $format
0741   0801 2D            mov b, d
0742   0802             ; START TERMS
0743   0802 D7            push a
0744   0803 11            mov a, b
0745   0804 26 02 00      mov b, $2
0746   0807 56            add b, a
0747   0808 E4            pop a
0748   0809             ; END TERMS
0749   0809 E7            pop d
0750   080A FD 43         mov [d], b
0751   080C             ;; for(;;){ 
0752   080C             _for10_init:
0753   080C             _for10_cond:
0754   080C             _for10_block:
0755   080C             ;; if(!*format_p) break; 
0756   080C             _if11_cond:
0757   080C FA FD FF      lea d, [bp + -3] ; $format_p
0758   080F 2A            mov b, [d]
0759   0810 74            mov d, b
0760   0811 32            mov bl, [d]
0761   0812 A7 00         mov bh, 0
0762   0814 C0 00 00      cmp b, 0
0763   0817 FD 71         seq ; !
0764   0819 C0 00 00      cmp b, 0
0765   081C C6 25 08      je _if11_else
0766   081F             _if11_true:
0767   081F             ;; break; 
0768   081F 0A 4C 0A      jmp _for10_exit ; for break
0769   0822 0A 49 0A      jmp _if11_exit
0770   0825             _if11_else:
0771   0825             ;; if(*format_p == '%'){ 
0772   0825             _if12_cond:
0773   0825 FA FD FF      lea d, [bp + -3] ; $format_p
0774   0828 2A            mov b, [d]
0775   0829 74            mov d, b
0776   082A 32            mov bl, [d]
0777   082B A7 00         mov bh, 0
0778   082D             ; START RELATIONAL
0779   082D D7            push a
0780   082E 11            mov a, b
0781   082F 26 25 00      mov b, $25
0782   0832 B0            cmp a, b
0783   0833 FD 71         seq ; ==
0784   0835 E4            pop a
0785   0836             ; END RELATIONAL
0786   0836 C0 00 00      cmp b, 0
0787   0839 C6 2D 0A      je _if12_else
0788   083C             _if12_true:
0789   083C             ;; format_p++; 
0790   083C FA FD FF      lea d, [bp + -3] ; $format_p
0791   083F 2A            mov b, [d]
0792   0840 FD 77         inc b
0793   0842 FA FD FF      lea d, [bp + -3] ; $format_p
0794   0845 FD 43         mov [d], b
0795   0847 FD 7D         dec b
0796   0849             ;; switch(*format_p){ 
0797   0849             _switch13_expr:
0798   0849 FA FD FF      lea d, [bp + -3] ; $format_p
0799   084C 2A            mov b, [d]
0800   084D 74            mov d, b
0801   084E 32            mov bl, [d]
0802   084F A7 00         mov bh, 0
0803   0851             _switch13_comparisons:
0804   0851 C1 6C         cmp bl, $6c
0805   0853 C6 7F 08      je _switch13_case0
0806   0856 C1 4C         cmp bl, $4c
0807   0858 C6 7F 08      je _switch13_case1
0808   085B C1 64         cmp bl, $64
0809   085D C6 6D 09      je _switch13_case2
0810   0860 C1 69         cmp bl, $69
0811   0862 C6 6D 09      je _switch13_case3
0812   0865 C1 75         cmp bl, $75
0813   0867 C6 91 09      je _switch13_case4
0814   086A C1 78         cmp bl, $78
0815   086C C6 B5 09      je _switch13_case5
0816   086F C1 63         cmp bl, $63
0817   0871 C6 D3 09      je _switch13_case6
0818   0874 C1 73         cmp bl, $73
0819   0876 C6 F2 09      je _switch13_case7
0820   0879 0A 11 0A      jmp _switch13_default
0821   087C 0A 1D 0A      jmp _switch13_exit
0822   087F             _switch13_case0:
0823   087F             _switch13_case1:
0824   087F             ;; format_p++; 
0825   087F FA FD FF      lea d, [bp + -3] ; $format_p
0826   0882 2A            mov b, [d]
0827   0883 FD 77         inc b
0828   0885 FA FD FF      lea d, [bp + -3] ; $format_p
0829   0888 FD 43         mov [d], b
0830   088A FD 7D         dec b
0831   088C             ;; if(*format_p == 'd' || *format_p == 'i') 
0832   088C             _if14_cond:
0833   088C FA FD FF      lea d, [bp + -3] ; $format_p
0834   088F 2A            mov b, [d]
0835   0890 74            mov d, b
0836   0891 32            mov bl, [d]
0837   0892 A7 00         mov bh, 0
0838   0894             ; START RELATIONAL
0839   0894 D7            push a
0840   0895 11            mov a, b
0841   0896 26 64 00      mov b, $64
0842   0899 B0            cmp a, b
0843   089A FD 71         seq ; ==
0844   089C E4            pop a
0845   089D             ; END RELATIONAL
0846   089D             ; START LOGICAL OR
0847   089D D7            push a
0848   089E 11            mov a, b
0849   089F FA FD FF      lea d, [bp + -3] ; $format_p
0850   08A2 2A            mov b, [d]
0851   08A3 74            mov d, b
0852   08A4 32            mov bl, [d]
0853   08A5 A7 00         mov bh, 0
0854   08A7             ; START RELATIONAL
0855   08A7 D7            push a
0856   08A8 11            mov a, b
0857   08A9 26 69 00      mov b, $69
0858   08AC B0            cmp a, b
0859   08AD FD 71         seq ; ==
0860   08AF E4            pop a
0861   08B0             ; END RELATIONAL
0862   08B0 FD A8         sor a, b ; ||
0863   08B2 E4            pop a
0864   08B3             ; END LOGICAL OR
0865   08B3 C0 00 00      cmp b, 0
0866   08B6 C6 DB 08      je _if14_else
0867   08B9             _if14_true:
0868   08B9             ;; print_signed_long(*(long *)p); 
0869   08B9 FA FF FF      lea d, [bp + -1] ; $p
0870   08BC 2A            mov b, [d]
0871   08BD AB            snex b
0872   08BE FD 39         mov c, b
0873   08C0 74            mov d, b
0874   08C1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0875   08C4 FD 39         mov c, b ; And place it into C
0876   08C6 2A            mov b, [d] ; Lower Word in B
0877   08C7 FD 79         mov g, b
0878   08C9 28            mov b, c
0879   08CA FD AB         swp b
0880   08CC D8            push b
0881   08CD FD 27         mov b, g
0882   08CF FD AB         swp b
0883   08D1 D8            push b
0884   08D2 07 30 12      call print_signed_long
0885   08D5 51 04 00      add sp, 4
0886   08D8 0A 58 09      jmp _if14_exit
0887   08DB             _if14_else:
0888   08DB             ;; if(*format_p == 'u') 
0889   08DB             _if15_cond:
0890   08DB FA FD FF      lea d, [bp + -3] ; $format_p
0891   08DE 2A            mov b, [d]
0892   08DF 74            mov d, b
0893   08E0 32            mov bl, [d]
0894   08E1 A7 00         mov bh, 0
0895   08E3             ; START RELATIONAL
0896   08E3 D7            push a
0897   08E4 11            mov a, b
0898   08E5 26 75 00      mov b, $75
0899   08E8 B0            cmp a, b
0900   08E9 FD 71         seq ; ==
0901   08EB E4            pop a
0902   08EC             ; END RELATIONAL
0903   08EC C0 00 00      cmp b, 0
0904   08EF C6 16 09      je _if15_else
0905   08F2             _if15_true:
0906   08F2             ;; print_unsigned_long(*(unsigned long *)p); 
0907   08F2 FA FF FF      lea d, [bp + -1] ; $p
0908   08F5 2A            mov b, [d]
0909   08F6 A7 00         mov bh, 0
0910   08F8 38 00 00      mov c, 0
0911   08FB 74            mov d, b
0912   08FC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0913   08FF FD 39         mov c, b ; And place it into C
0914   0901 2A            mov b, [d] ; Lower Word in B
0915   0902 FD 79         mov g, b
0916   0904 28            mov b, c
0917   0905 FD AB         swp b
0918   0907 D8            push b
0919   0908 FD 27         mov b, g
0920   090A FD AB         swp b
0921   090C D8            push b
0922   090D 07 70 15      call print_unsigned_long
0923   0910 51 04 00      add sp, 4
0924   0913 0A 58 09      jmp _if15_exit
0925   0916             _if15_else:
0926   0916             ;; if(*format_p == 'x') 
0927   0916             _if16_cond:
0928   0916 FA FD FF      lea d, [bp + -3] ; $format_p
0929   0919 2A            mov b, [d]
0930   091A 74            mov d, b
0931   091B 32            mov bl, [d]
0932   091C A7 00         mov bh, 0
0933   091E             ; START RELATIONAL
0934   091E D7            push a
0935   091F 11            mov a, b
0936   0920 26 78 00      mov b, $78
0937   0923 B0            cmp a, b
0938   0924 FD 71         seq ; ==
0939   0926 E4            pop a
0940   0927             ; END RELATIONAL
0941   0927 C0 00 00      cmp b, 0
0942   092A C6 4C 09      je _if16_else
0943   092D             _if16_true:
0944   092D             ;; printx32(*(long int *)p); 
0945   092D FA FF FF      lea d, [bp + -1] ; $p
0946   0930 2A            mov b, [d]
0947   0931 74            mov d, b
0948   0932 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0949   0935 FD 39         mov c, b ; And place it into C
0950   0937 2A            mov b, [d] ; Lower Word in B
0951   0938 FD 79         mov g, b
0952   093A 28            mov b, c
0953   093B FD AB         swp b
0954   093D D8            push b
0955   093E FD 27         mov b, g
0956   0940 FD AB         swp b
0957   0942 D8            push b
0958   0943 07 A5 0F      call printx32
0959   0946 51 04 00      add sp, 4
0960   0949 0A 58 09      jmp _if16_exit
0961   094C             _if16_else:
0962   094C             ;; err("Unexpected format in printf."); 
0963   094C 26 16 20      mov b, _s3 ; "Unexpected format in printf."
0964   094F FD AB         swp b
0965   0951 D8            push b
0966   0952 07 93 0F      call err
0967   0955 51 02 00      add sp, 2
0968   0958             _if16_exit:
0969   0958             _if15_exit:
0970   0958             _if14_exit:
0971   0958             ;; p = p + 4; 
0972   0958 FA FF FF      lea d, [bp + -1] ; $p
0973   095B DA            push d
0974   095C FA FF FF      lea d, [bp + -1] ; $p
0975   095F 2A            mov b, [d]
0976   0960             ; START TERMS
0977   0960 D7            push a
0978   0961 11            mov a, b
0979   0962 26 04 00      mov b, $4
0980   0965 56            add b, a
0981   0966 E4            pop a
0982   0967             ; END TERMS
0983   0967 E7            pop d
0984   0968 FD 43         mov [d], b
0985   096A             ;; break; 
0986   096A 0A 1D 0A      jmp _switch13_exit ; case break
0987   096D             _switch13_case2:
0988   096D             _switch13_case3:
0989   096D             ;; print_signed(*(int*)p); 
0990   096D FA FF FF      lea d, [bp + -1] ; $p
0991   0970 2A            mov b, [d]
0992   0971 74            mov d, b
0993   0972 2A            mov b, [d]
0994   0973 FD AB         swp b
0995   0975 D8            push b
0996   0976 07 39 11      call print_signed
0997   0979 51 02 00      add sp, 2
0998   097C             ;; p = p + 2; 
0999   097C FA FF FF      lea d, [bp + -1] ; $p
1000   097F DA            push d
1001   0980 FA FF FF      lea d, [bp + -1] ; $p
1002   0983 2A            mov b, [d]
1003   0984             ; START TERMS
1004   0984 D7            push a
1005   0985 11            mov a, b
1006   0986 26 02 00      mov b, $2
1007   0989 56            add b, a
1008   098A E4            pop a
1009   098B             ; END TERMS
1010   098B E7            pop d
1011   098C FD 43         mov [d], b
1012   098E             ;; break; 
1013   098E 0A 1D 0A      jmp _switch13_exit ; case break
1014   0991             _switch13_case4:
1015   0991             ;; print_unsigned(*(unsigned int*)p); 
1016   0991 FA FF FF      lea d, [bp + -1] ; $p
1017   0994 2A            mov b, [d]
1018   0995 74            mov d, b
1019   0996 2A            mov b, [d]
1020   0997 FD AB         swp b
1021   0999 D8            push b
1022   099A 07 75 18      call print_unsigned
1023   099D 51 02 00      add sp, 2
1024   09A0             ;; p = p + 2; 
1025   09A0 FA FF FF      lea d, [bp + -1] ; $p
1026   09A3 DA            push d
1027   09A4 FA FF FF      lea d, [bp + -1] ; $p
1028   09A7 2A            mov b, [d]
1029   09A8             ; START TERMS
1030   09A8 D7            push a
1031   09A9 11            mov a, b
1032   09AA 26 02 00      mov b, $2
1033   09AD 56            add b, a
1034   09AE E4            pop a
1035   09AF             ; END TERMS
1036   09AF E7            pop d
1037   09B0 FD 43         mov [d], b
1038   09B2             ;; break; 
1039   09B2 0A 1D 0A      jmp _switch13_exit ; case break
1040   09B5             _switch13_case5:
1041   09B5             
1042   09B5             ; --- BEGIN INLINE ASM BLOCK
1043   09B5 FA FF FF      lea d, [bp + -1] ; $p
1044   09B8 FD 2A         mov d, [d]
1045   09BA 2A            mov b, [d]
1046   09BB 07 D4 1D      call print_u16x
1047   09BE             ; --- END INLINE ASM BLOCK
1048   09BE             
1049   09BE             ;; p = p + 2; 
1050   09BE FA FF FF      lea d, [bp + -1] ; $p
1051   09C1 DA            push d
1052   09C2 FA FF FF      lea d, [bp + -1] ; $p
1053   09C5 2A            mov b, [d]
1054   09C6             ; START TERMS
1055   09C6 D7            push a
1056   09C7 11            mov a, b
1057   09C8 26 02 00      mov b, $2
1058   09CB 56            add b, a
1059   09CC E4            pop a
1060   09CD             ; END TERMS
1061   09CD E7            pop d
1062   09CE FD 43         mov [d], b
1063   09D0             ;; break; 
1064   09D0 0A 1D 0A      jmp _switch13_exit ; case break
1065   09D3             _switch13_case6:
1066   09D3             
1067   09D3             ; --- BEGIN INLINE ASM BLOCK
1068   09D3 FA FF FF      lea d, [bp + -1] ; $p
1069   09D6 FD 2A         mov d, [d]
1070   09D8 1E            mov al, [d]
1071   09D9 23            mov ah, al
1072   09DA 07 32 1C      call _putchar
1073   09DD             ; --- END INLINE ASM BLOCK
1074   09DD             
1075   09DD             ;; p = p + 1; 
1076   09DD FA FF FF      lea d, [bp + -1] ; $p
1077   09E0 DA            push d
1078   09E1 FA FF FF      lea d, [bp + -1] ; $p
1079   09E4 2A            mov b, [d]
1080   09E5             ; START TERMS
1081   09E5 D7            push a
1082   09E6 11            mov a, b
1083   09E7 26 01 00      mov b, $1
1084   09EA 56            add b, a
1085   09EB E4            pop a
1086   09EC             ; END TERMS
1087   09EC E7            pop d
1088   09ED FD 43         mov [d], b
1089   09EF             ;; break; 
1090   09EF 0A 1D 0A      jmp _switch13_exit ; case break
1091   09F2             _switch13_case7:
1092   09F2             
1093   09F2             ; --- BEGIN INLINE ASM BLOCK
1094   09F2 FA FF FF      lea d, [bp + -1] ; $p
1095   09F5 FD 2A         mov d, [d]
1096   09F7 FD 2A         mov d, [d]
1097   09F9 07 7C 1D      call _puts
1098   09FC             ; --- END INLINE ASM BLOCK
1099   09FC             
1100   09FC             ;; p = p + 2; 
1101   09FC FA FF FF      lea d, [bp + -1] ; $p
1102   09FF DA            push d
1103   0A00 FA FF FF      lea d, [bp + -1] ; $p
1104   0A03 2A            mov b, [d]
1105   0A04             ; START TERMS
1106   0A04 D7            push a
1107   0A05 11            mov a, b
1108   0A06 26 02 00      mov b, $2
1109   0A09 56            add b, a
1110   0A0A E4            pop a
1111   0A0B             ; END TERMS
1112   0A0B E7            pop d
1113   0A0C FD 43         mov [d], b
1114   0A0E             ;; break; 
1115   0A0E 0A 1D 0A      jmp _switch13_exit ; case break
1116   0A11             _switch13_default:
1117   0A11             ;; print("Error: Unknown argument type.\n"); 
1118   0A11 26 33 20      mov b, _s4 ; "Error: Unknown argument type.\n"
1119   0A14 FD AB         swp b
1120   0A16 D8            push b
1121   0A17 07 E9 1A      call print
1122   0A1A 51 02 00      add sp, 2
1123   0A1D             _switch13_exit:
1124   0A1D             ;; format_p++; 
1125   0A1D FA FD FF      lea d, [bp + -3] ; $format_p
1126   0A20 2A            mov b, [d]
1127   0A21 FD 77         inc b
1128   0A23 FA FD FF      lea d, [bp + -3] ; $format_p
1129   0A26 FD 43         mov [d], b
1130   0A28 FD 7D         dec b
1131   0A2A 0A 49 0A      jmp _if12_exit
1132   0A2D             _if12_else:
1133   0A2D             ;; putchar(*format_p); 
1134   0A2D FA FD FF      lea d, [bp + -3] ; $format_p
1135   0A30 2A            mov b, [d]
1136   0A31 74            mov d, b
1137   0A32 32            mov bl, [d]
1138   0A33 A7 00         mov bh, 0
1139   0A35 DD            push bl
1140   0A36 07 A1 1A      call putchar
1141   0A39 51 01 00      add sp, 1
1142   0A3C             ;; format_p++; 
1143   0A3C FA FD FF      lea d, [bp + -3] ; $format_p
1144   0A3F 2A            mov b, [d]
1145   0A40 FD 77         inc b
1146   0A42 FA FD FF      lea d, [bp + -3] ; $format_p
1147   0A45 FD 43         mov [d], b
1148   0A47 FD 7D         dec b
1149   0A49             _if12_exit:
1150   0A49             _if11_exit:
1151   0A49             _for10_update:
1152   0A49 0A 0C 08      jmp _for10_cond
1153   0A4C             _for10_exit:
1154   0A4C F9            leave
1155   0A4D 09            ret
1156   0A4E             
1157   0A4E             scanf:
1158   0A4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1159   0A51             ;; char *p, *format_p; 
1160   0A51 52 02 00      sub sp, 2 ; p
1161   0A54 52 02 00      sub sp, 2 ; format_p
1162   0A57             ;; char c; 
1163   0A57 52 01 00      sub sp, 1 ; c
1164   0A5A             ;; int i; 
1165   0A5A 52 02 00      sub sp, 2 ; i
1166   0A5D             ;; char input_string[  512                    ]; 
1167   0A5D 52 00 02      sub sp, 512 ; input_string
1168   0A60             ;; format_p = format; 
1169   0A60 FA FD FF      lea d, [bp + -3] ; $format_p
1170   0A63 DA            push d
1171   0A64 FA 05 00      lea d, [bp + 5] ; $format
1172   0A67 2A            mov b, [d]
1173   0A68 E7            pop d
1174   0A69 FD 43         mov [d], b
1175   0A6B             ;; p = &format + 2; 
1176   0A6B FA FF FF      lea d, [bp + -1] ; $p
1177   0A6E DA            push d
1178   0A6F FA 05 00      lea d, [bp + 5] ; $format
1179   0A72 2D            mov b, d
1180   0A73             ; START TERMS
1181   0A73 D7            push a
1182   0A74 11            mov a, b
1183   0A75 26 02 00      mov b, $2
1184   0A78 56            add b, a
1185   0A79 E4            pop a
1186   0A7A             ; END TERMS
1187   0A7A E7            pop d
1188   0A7B FD 43         mov [d], b
1189   0A7D             ;; for(;;){ 
1190   0A7D             _for17_init:
1191   0A7D             _for17_cond:
1192   0A7D             _for17_block:
1193   0A7D             ;; if(!*format_p) break; 
1194   0A7D             _if18_cond:
1195   0A7D FA FD FF      lea d, [bp + -3] ; $format_p
1196   0A80 2A            mov b, [d]
1197   0A81 74            mov d, b
1198   0A82 32            mov bl, [d]
1199   0A83 A7 00         mov bh, 0
1200   0A85 C0 00 00      cmp b, 0
1201   0A88 FD 71         seq ; !
1202   0A8A C0 00 00      cmp b, 0
1203   0A8D C6 96 0A      je _if18_else
1204   0A90             _if18_true:
1205   0A90             ;; break; 
1206   0A90 0A 97 0C      jmp _for17_exit ; for break
1207   0A93 0A 94 0C      jmp _if18_exit
1208   0A96             _if18_else:
1209   0A96             ;; if(*format_p == '%'){ 
1210   0A96             _if19_cond:
1211   0A96 FA FD FF      lea d, [bp + -3] ; $format_p
1212   0A99 2A            mov b, [d]
1213   0A9A 74            mov d, b
1214   0A9B 32            mov bl, [d]
1215   0A9C A7 00         mov bh, 0
1216   0A9E             ; START RELATIONAL
1217   0A9E D7            push a
1218   0A9F 11            mov a, b
1219   0AA0 26 25 00      mov b, $25
1220   0AA3 B0            cmp a, b
1221   0AA4 FD 71         seq ; ==
1222   0AA6 E4            pop a
1223   0AA7             ; END RELATIONAL
1224   0AA7 C0 00 00      cmp b, 0
1225   0AAA C6 78 0C      je _if19_else
1226   0AAD             _if19_true:
1227   0AAD             ;; format_p++; 
1228   0AAD FA FD FF      lea d, [bp + -3] ; $format_p
1229   0AB0 2A            mov b, [d]
1230   0AB1 FD 77         inc b
1231   0AB3 FA FD FF      lea d, [bp + -3] ; $format_p
1232   0AB6 FD 43         mov [d], b
1233   0AB8 FD 7D         dec b
1234   0ABA             ;; switch(*format_p){ 
1235   0ABA             _switch20_expr:
1236   0ABA FA FD FF      lea d, [bp + -3] ; $format_p
1237   0ABD 2A            mov b, [d]
1238   0ABE 74            mov d, b
1239   0ABF 32            mov bl, [d]
1240   0AC0 A7 00         mov bh, 0
1241   0AC2             _switch20_comparisons:
1242   0AC2 C1 6C         cmp bl, $6c
1243   0AC4 C6 F0 0A      je _switch20_case0
1244   0AC7 C1 4C         cmp bl, $4c
1245   0AC9 C6 F0 0A      je _switch20_case1
1246   0ACC C1 64         cmp bl, $64
1247   0ACE C6 82 0B      je _switch20_case2
1248   0AD1 C1 69         cmp bl, $69
1249   0AD3 C6 82 0B      je _switch20_case3
1250   0AD6 C1 75         cmp bl, $75
1251   0AD8 C6 AF 0B      je _switch20_case4
1252   0ADB C1 78         cmp bl, $78
1253   0ADD C6 DC 0B      je _switch20_case5
1254   0AE0 C1 63         cmp bl, $63
1255   0AE2 C6 F1 0B      je _switch20_case6
1256   0AE5 C1 73         cmp bl, $73
1257   0AE7 C6 24 0C      je _switch20_case7
1258   0AEA 0A 5C 0C      jmp _switch20_default
1259   0AED 0A 68 0C      jmp _switch20_exit
1260   0AF0             _switch20_case0:
1261   0AF0             _switch20_case1:
1262   0AF0             ;; format_p++; 
1263   0AF0 FA FD FF      lea d, [bp + -3] ; $format_p
1264   0AF3 2A            mov b, [d]
1265   0AF4 FD 77         inc b
1266   0AF6 FA FD FF      lea d, [bp + -3] ; $format_p
1267   0AF9 FD 43         mov [d], b
1268   0AFB FD 7D         dec b
1269   0AFD             ;; if(*format_p == 'd' || *format_p == 'i'); 
1270   0AFD             _if21_cond:
1271   0AFD FA FD FF      lea d, [bp + -3] ; $format_p
1272   0B00 2A            mov b, [d]
1273   0B01 74            mov d, b
1274   0B02 32            mov bl, [d]
1275   0B03 A7 00         mov bh, 0
1276   0B05             ; START RELATIONAL
1277   0B05 D7            push a
1278   0B06 11            mov a, b
1279   0B07 26 64 00      mov b, $64
1280   0B0A B0            cmp a, b
1281   0B0B FD 71         seq ; ==
1282   0B0D E4            pop a
1283   0B0E             ; END RELATIONAL
1284   0B0E             ; START LOGICAL OR
1285   0B0E D7            push a
1286   0B0F 11            mov a, b
1287   0B10 FA FD FF      lea d, [bp + -3] ; $format_p
1288   0B13 2A            mov b, [d]
1289   0B14 74            mov d, b
1290   0B15 32            mov bl, [d]
1291   0B16 A7 00         mov bh, 0
1292   0B18             ; START RELATIONAL
1293   0B18 D7            push a
1294   0B19 11            mov a, b
1295   0B1A 26 69 00      mov b, $69
1296   0B1D B0            cmp a, b
1297   0B1E FD 71         seq ; ==
1298   0B20 E4            pop a
1299   0B21             ; END RELATIONAL
1300   0B21 FD A8         sor a, b ; ||
1301   0B23 E4            pop a
1302   0B24             ; END LOGICAL OR
1303   0B24 C0 00 00      cmp b, 0
1304   0B27 C6 2D 0B      je _if21_else
1305   0B2A             _if21_true:
1306   0B2A             ;; ; 
1307   0B2A 0A 6D 0B      jmp _if21_exit
1308   0B2D             _if21_else:
1309   0B2D             ;; if(*format_p == 'u'); 
1310   0B2D             _if22_cond:
1311   0B2D FA FD FF      lea d, [bp + -3] ; $format_p
1312   0B30 2A            mov b, [d]
1313   0B31 74            mov d, b
1314   0B32 32            mov bl, [d]
1315   0B33 A7 00         mov bh, 0
1316   0B35             ; START RELATIONAL
1317   0B35 D7            push a
1318   0B36 11            mov a, b
1319   0B37 26 75 00      mov b, $75
1320   0B3A B0            cmp a, b
1321   0B3B FD 71         seq ; ==
1322   0B3D E4            pop a
1323   0B3E             ; END RELATIONAL
1324   0B3E C0 00 00      cmp b, 0
1325   0B41 C6 47 0B      je _if22_else
1326   0B44             _if22_true:
1327   0B44             ;; ; 
1328   0B44 0A 6D 0B      jmp _if22_exit
1329   0B47             _if22_else:
1330   0B47             ;; if(*format_p == 'x'); 
1331   0B47             _if23_cond:
1332   0B47 FA FD FF      lea d, [bp + -3] ; $format_p
1333   0B4A 2A            mov b, [d]
1334   0B4B 74            mov d, b
1335   0B4C 32            mov bl, [d]
1336   0B4D A7 00         mov bh, 0
1337   0B4F             ; START RELATIONAL
1338   0B4F D7            push a
1339   0B50 11            mov a, b
1340   0B51 26 78 00      mov b, $78
1341   0B54 B0            cmp a, b
1342   0B55 FD 71         seq ; ==
1343   0B57 E4            pop a
1344   0B58             ; END RELATIONAL
1345   0B58 C0 00 00      cmp b, 0
1346   0B5B C6 61 0B      je _if23_else
1347   0B5E             _if23_true:
1348   0B5E             ;; ; 
1349   0B5E 0A 6D 0B      jmp _if23_exit
1350   0B61             _if23_else:
1351   0B61             ;; err("Unexpected format in printf."); 
1352   0B61 26 16 20      mov b, _s3 ; "Unexpected format in printf."
1353   0B64 FD AB         swp b
1354   0B66 D8            push b
1355   0B67 07 93 0F      call err
1356   0B6A 51 02 00      add sp, 2
1357   0B6D             _if23_exit:
1358   0B6D             _if22_exit:
1359   0B6D             _if21_exit:
1360   0B6D             ;; p = p + 4; 
1361   0B6D FA FF FF      lea d, [bp + -1] ; $p
1362   0B70 DA            push d
1363   0B71 FA FF FF      lea d, [bp + -1] ; $p
1364   0B74 2A            mov b, [d]
1365   0B75             ; START TERMS
1366   0B75 D7            push a
1367   0B76 11            mov a, b
1368   0B77 26 04 00      mov b, $4
1369   0B7A 56            add b, a
1370   0B7B E4            pop a
1371   0B7C             ; END TERMS
1372   0B7C E7            pop d
1373   0B7D FD 43         mov [d], b
1374   0B7F             ;; break; 
1375   0B7F 0A 68 0C      jmp _switch20_exit ; case break
1376   0B82             _switch20_case2:
1377   0B82             _switch20_case3:
1378   0B82             ;; i = scann(); 
1379   0B82 FA FA FF      lea d, [bp + -6] ; $i
1380   0B85 DA            push d
1381   0B86 07 C4 1A      call scann
1382   0B89 E7            pop d
1383   0B8A FD 43         mov [d], b
1384   0B8C             ;; **(int **)p = i; 
1385   0B8C FA FF FF      lea d, [bp + -1] ; $p
1386   0B8F 2A            mov b, [d]
1387   0B90 74            mov d, b
1388   0B91 2A            mov b, [d]
1389   0B92 D8            push b
1390   0B93 FA FA FF      lea d, [bp + -6] ; $i
1391   0B96 2A            mov b, [d]
1392   0B97 E7            pop d
1393   0B98 FD 43         mov [d], b
1394   0B9A             ;; p = p + 2; 
1395   0B9A FA FF FF      lea d, [bp + -1] ; $p
1396   0B9D DA            push d
1397   0B9E FA FF FF      lea d, [bp + -1] ; $p
1398   0BA1 2A            mov b, [d]
1399   0BA2             ; START TERMS
1400   0BA2 D7            push a
1401   0BA3 11            mov a, b
1402   0BA4 26 02 00      mov b, $2
1403   0BA7 56            add b, a
1404   0BA8 E4            pop a
1405   0BA9             ; END TERMS
1406   0BA9 E7            pop d
1407   0BAA FD 43         mov [d], b
1408   0BAC             ;; break; 
1409   0BAC 0A 68 0C      jmp _switch20_exit ; case break
1410   0BAF             _switch20_case4:
1411   0BAF             ;; i = scann(); 
1412   0BAF FA FA FF      lea d, [bp + -6] ; $i
1413   0BB2 DA            push d
1414   0BB3 07 C4 1A      call scann
1415   0BB6 E7            pop d
1416   0BB7 FD 43         mov [d], b
1417   0BB9             ;; **(int **)p = i; 
1418   0BB9 FA FF FF      lea d, [bp + -1] ; $p
1419   0BBC 2A            mov b, [d]
1420   0BBD 74            mov d, b
1421   0BBE 2A            mov b, [d]
1422   0BBF D8            push b
1423   0BC0 FA FA FF      lea d, [bp + -6] ; $i
1424   0BC3 2A            mov b, [d]
1425   0BC4 E7            pop d
1426   0BC5 FD 43         mov [d], b
1427   0BC7             ;; p = p + 2; 
1428   0BC7 FA FF FF      lea d, [bp + -1] ; $p
1429   0BCA DA            push d
1430   0BCB FA FF FF      lea d, [bp + -1] ; $p
1431   0BCE 2A            mov b, [d]
1432   0BCF             ; START TERMS
1433   0BCF D7            push a
1434   0BD0 11            mov a, b
1435   0BD1 26 02 00      mov b, $2
1436   0BD4 56            add b, a
1437   0BD5 E4            pop a
1438   0BD6             ; END TERMS
1439   0BD6 E7            pop d
1440   0BD7 FD 43         mov [d], b
1441   0BD9             ;; break; 
1442   0BD9 0A 68 0C      jmp _switch20_exit ; case break
1443   0BDC             _switch20_case5:
1444   0BDC             ;; p = p + 2; 
1445   0BDC FA FF FF      lea d, [bp + -1] ; $p
1446   0BDF DA            push d
1447   0BE0 FA FF FF      lea d, [bp + -1] ; $p
1448   0BE3 2A            mov b, [d]
1449   0BE4             ; START TERMS
1450   0BE4 D7            push a
1451   0BE5 11            mov a, b
1452   0BE6 26 02 00      mov b, $2
1453   0BE9 56            add b, a
1454   0BEA E4            pop a
1455   0BEB             ; END TERMS
1456   0BEB E7            pop d
1457   0BEC FD 43         mov [d], b
1458   0BEE             ;; break; 
1459   0BEE 0A 68 0C      jmp _switch20_exit ; case break
1460   0BF1             _switch20_case6:
1461   0BF1             ;; c = getchar(); 
1462   0BF1 FA FC FF      lea d, [bp + -4] ; $c
1463   0BF4 DA            push d
1464   0BF5 07 AE 1A      call getchar
1465   0BF8 E7            pop d
1466   0BF9 FD 3E         mov [d], bl
1467   0BFB             ;; **(char **)p = *(char *)c; 
1468   0BFB FA FF FF      lea d, [bp + -1] ; $p
1469   0BFE 2A            mov b, [d]
1470   0BFF 74            mov d, b
1471   0C00 2A            mov b, [d]
1472   0C01 D8            push b
1473   0C02 FA FC FF      lea d, [bp + -4] ; $c
1474   0C05 32            mov bl, [d]
1475   0C06 A7 00         mov bh, 0
1476   0C08 74            mov d, b
1477   0C09 32            mov bl, [d]
1478   0C0A A7 00         mov bh, 0
1479   0C0C E7            pop d
1480   0C0D FD 43         mov [d], b
1481   0C0F             ;; p = p + 1; 
1482   0C0F FA FF FF      lea d, [bp + -1] ; $p
1483   0C12 DA            push d
1484   0C13 FA FF FF      lea d, [bp + -1] ; $p
1485   0C16 2A            mov b, [d]
1486   0C17             ; START TERMS
1487   0C17 D7            push a
1488   0C18 11            mov a, b
1489   0C19 26 01 00      mov b, $1
1490   0C1C 56            add b, a
1491   0C1D E4            pop a
1492   0C1E             ; END TERMS
1493   0C1E E7            pop d
1494   0C1F FD 43         mov [d], b
1495   0C21             ;; break; 
1496   0C21 0A 68 0C      jmp _switch20_exit ; case break
1497   0C24             _switch20_case7:
1498   0C24             ;; gets(input_string); 
1499   0C24 FA FA FD      lea d, [bp + -518] ; $input_string
1500   0C27 2D            mov b, d
1501   0C28 FD AB         swp b
1502   0C2A D8            push b
1503   0C2B 07 1F 11      call gets
1504   0C2E 51 02 00      add sp, 2
1505   0C31             ;; strcpy(*(char **)p, input_string); 
1506   0C31 FA FA FD      lea d, [bp + -518] ; $input_string
1507   0C34 2D            mov b, d
1508   0C35 FD AB         swp b
1509   0C37 D8            push b
1510   0C38 FA FF FF      lea d, [bp + -1] ; $p
1511   0C3B 2A            mov b, [d]
1512   0C3C 74            mov d, b
1513   0C3D 2A            mov b, [d]
1514   0C3E FD AB         swp b
1515   0C40 D8            push b
1516   0C41 07 40 04      call strcpy
1517   0C44 51 04 00      add sp, 4
1518   0C47             ;; p = p + 2; 
1519   0C47 FA FF FF      lea d, [bp + -1] ; $p
1520   0C4A DA            push d
1521   0C4B FA FF FF      lea d, [bp + -1] ; $p
1522   0C4E 2A            mov b, [d]
1523   0C4F             ; START TERMS
1524   0C4F D7            push a
1525   0C50 11            mov a, b
1526   0C51 26 02 00      mov b, $2
1527   0C54 56            add b, a
1528   0C55 E4            pop a
1529   0C56             ; END TERMS
1530   0C56 E7            pop d
1531   0C57 FD 43         mov [d], b
1532   0C59             ;; break; 
1533   0C59 0A 68 0C      jmp _switch20_exit ; case break
1534   0C5C             _switch20_default:
1535   0C5C             ;; print("Error: Unknown argument type.\n"); 
1536   0C5C 26 33 20      mov b, _s4 ; "Error: Unknown argument type.\n"
1537   0C5F FD AB         swp b
1538   0C61 D8            push b
1539   0C62 07 E9 1A      call print
1540   0C65 51 02 00      add sp, 2
1541   0C68             _switch20_exit:
1542   0C68             ;; format_p++; 
1543   0C68 FA FD FF      lea d, [bp + -3] ; $format_p
1544   0C6B 2A            mov b, [d]
1545   0C6C FD 77         inc b
1546   0C6E FA FD FF      lea d, [bp + -3] ; $format_p
1547   0C71 FD 43         mov [d], b
1548   0C73 FD 7D         dec b
1549   0C75 0A 94 0C      jmp _if19_exit
1550   0C78             _if19_else:
1551   0C78             ;; putchar(*format_p); 
1552   0C78 FA FD FF      lea d, [bp + -3] ; $format_p
1553   0C7B 2A            mov b, [d]
1554   0C7C 74            mov d, b
1555   0C7D 32            mov bl, [d]
1556   0C7E A7 00         mov bh, 0
1557   0C80 DD            push bl
1558   0C81 07 A1 1A      call putchar
1559   0C84 51 01 00      add sp, 1
1560   0C87             ;; format_p++; 
1561   0C87 FA FD FF      lea d, [bp + -3] ; $format_p
1562   0C8A 2A            mov b, [d]
1563   0C8B FD 77         inc b
1564   0C8D FA FD FF      lea d, [bp + -3] ; $format_p
1565   0C90 FD 43         mov [d], b
1566   0C92 FD 7D         dec b
1567   0C94             _if19_exit:
1568   0C94             _if18_exit:
1569   0C94             _for17_update:
1570   0C94 0A 7D 0A      jmp _for17_cond
1571   0C97             _for17_exit:
1572   0C97 F9            leave
1573   0C98 09            ret
1574   0C99             
1575   0C99             sprintf:
1576   0C99 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1577   0C9C             ;; char *p, *format_p; 
1578   0C9C 52 02 00      sub sp, 2 ; p
1579   0C9F 52 02 00      sub sp, 2 ; format_p
1580   0CA2             ;; char *sp; 
1581   0CA2 52 02 00      sub sp, 2 ; sp
1582   0CA5             ;; sp = dest; 
1583   0CA5 FA FB FF      lea d, [bp + -5] ; $sp
1584   0CA8 DA            push d
1585   0CA9 FA 05 00      lea d, [bp + 5] ; $dest
1586   0CAC 2A            mov b, [d]
1587   0CAD E7            pop d
1588   0CAE FD 43         mov [d], b
1589   0CB0             ;; format_p = format; 
1590   0CB0 FA FD FF      lea d, [bp + -3] ; $format_p
1591   0CB3 DA            push d
1592   0CB4 FA 07 00      lea d, [bp + 7] ; $format
1593   0CB7 2A            mov b, [d]
1594   0CB8 E7            pop d
1595   0CB9 FD 43         mov [d], b
1596   0CBB             ;; p = &format + 2; 
1597   0CBB FA FF FF      lea d, [bp + -1] ; $p
1598   0CBE DA            push d
1599   0CBF FA 07 00      lea d, [bp + 7] ; $format
1600   0CC2 2D            mov b, d
1601   0CC3             ; START TERMS
1602   0CC3 D7            push a
1603   0CC4 11            mov a, b
1604   0CC5 26 02 00      mov b, $2
1605   0CC8 56            add b, a
1606   0CC9 E4            pop a
1607   0CCA             ; END TERMS
1608   0CCA E7            pop d
1609   0CCB FD 43         mov [d], b
1610   0CCD             ;; for(;;){ 
1611   0CCD             _for24_init:
1612   0CCD             _for24_cond:
1613   0CCD             _for24_block:
1614   0CCD             ;; if(!*format_p) break; 
1615   0CCD             _if25_cond:
1616   0CCD FA FD FF      lea d, [bp + -3] ; $format_p
1617   0CD0 2A            mov b, [d]
1618   0CD1 74            mov d, b
1619   0CD2 32            mov bl, [d]
1620   0CD3 A7 00         mov bh, 0
1621   0CD5 C0 00 00      cmp b, 0
1622   0CD8 FD 71         seq ; !
1623   0CDA C0 00 00      cmp b, 0
1624   0CDD C6 E6 0C      je _if25_else
1625   0CE0             _if25_true:
1626   0CE0             ;; break; 
1627   0CE0 0A 86 0F      jmp _for24_exit ; for break
1628   0CE3 0A 83 0F      jmp _if25_exit
1629   0CE6             _if25_else:
1630   0CE6             ;; if(*format_p == '%'){ 
1631   0CE6             _if26_cond:
1632   0CE6 FA FD FF      lea d, [bp + -3] ; $format_p
1633   0CE9 2A            mov b, [d]
1634   0CEA 74            mov d, b
1635   0CEB 32            mov bl, [d]
1636   0CEC A7 00         mov bh, 0
1637   0CEE             ; START RELATIONAL
1638   0CEE D7            push a
1639   0CEF 11            mov a, b
1640   0CF0 26 25 00      mov b, $25
1641   0CF3 B0            cmp a, b
1642   0CF4 FD 71         seq ; ==
1643   0CF6 E4            pop a
1644   0CF7             ; END RELATIONAL
1645   0CF7 C0 00 00      cmp b, 0
1646   0CFA C6 61 0F      je _if26_else
1647   0CFD             _if26_true:
1648   0CFD             ;; format_p++; 
1649   0CFD FA FD FF      lea d, [bp + -3] ; $format_p
1650   0D00 2A            mov b, [d]
1651   0D01 FD 77         inc b
1652   0D03 FA FD FF      lea d, [bp + -3] ; $format_p
1653   0D06 FD 43         mov [d], b
1654   0D08 FD 7D         dec b
1655   0D0A             ;; switch(*format_p){ 
1656   0D0A             _switch27_expr:
1657   0D0A FA FD FF      lea d, [bp + -3] ; $format_p
1658   0D0D 2A            mov b, [d]
1659   0D0E 74            mov d, b
1660   0D0F 32            mov bl, [d]
1661   0D10 A7 00         mov bh, 0
1662   0D12             _switch27_comparisons:
1663   0D12 C1 6C         cmp bl, $6c
1664   0D14 C6 40 0D      je _switch27_case0
1665   0D17 C1 4C         cmp bl, $4c
1666   0D19 C6 40 0D      je _switch27_case1
1667   0D1C C1 64         cmp bl, $64
1668   0D1E C6 2E 0E      je _switch27_case2
1669   0D21 C1 69         cmp bl, $69
1670   0D23 C6 2E 0E      je _switch27_case3
1671   0D26 C1 75         cmp bl, $75
1672   0D28 C6 68 0E      je _switch27_case4
1673   0D2B C1 78         cmp bl, $78
1674   0D2D C6 A2 0E      je _switch27_case5
1675   0D30 C1 63         cmp bl, $63
1676   0D32 C6 C0 0E      je _switch27_case6
1677   0D35 C1 73         cmp bl, $73
1678   0D37 C6 EE 0E      je _switch27_case7
1679   0D3A 0A 45 0F      jmp _switch27_default
1680   0D3D 0A 51 0F      jmp _switch27_exit
1681   0D40             _switch27_case0:
1682   0D40             _switch27_case1:
1683   0D40             ;; format_p++; 
1684   0D40 FA FD FF      lea d, [bp + -3] ; $format_p
1685   0D43 2A            mov b, [d]
1686   0D44 FD 77         inc b
1687   0D46 FA FD FF      lea d, [bp + -3] ; $format_p
1688   0D49 FD 43         mov [d], b
1689   0D4B FD 7D         dec b
1690   0D4D             ;; if(*format_p == 'd' || *format_p == 'i') 
1691   0D4D             _if28_cond:
1692   0D4D FA FD FF      lea d, [bp + -3] ; $format_p
1693   0D50 2A            mov b, [d]
1694   0D51 74            mov d, b
1695   0D52 32            mov bl, [d]
1696   0D53 A7 00         mov bh, 0
1697   0D55             ; START RELATIONAL
1698   0D55 D7            push a
1699   0D56 11            mov a, b
1700   0D57 26 64 00      mov b, $64
1701   0D5A B0            cmp a, b
1702   0D5B FD 71         seq ; ==
1703   0D5D E4            pop a
1704   0D5E             ; END RELATIONAL
1705   0D5E             ; START LOGICAL OR
1706   0D5E D7            push a
1707   0D5F 11            mov a, b
1708   0D60 FA FD FF      lea d, [bp + -3] ; $format_p
1709   0D63 2A            mov b, [d]
1710   0D64 74            mov d, b
1711   0D65 32            mov bl, [d]
1712   0D66 A7 00         mov bh, 0
1713   0D68             ; START RELATIONAL
1714   0D68 D7            push a
1715   0D69 11            mov a, b
1716   0D6A 26 69 00      mov b, $69
1717   0D6D B0            cmp a, b
1718   0D6E FD 71         seq ; ==
1719   0D70 E4            pop a
1720   0D71             ; END RELATIONAL
1721   0D71 FD A8         sor a, b ; ||
1722   0D73 E4            pop a
1723   0D74             ; END LOGICAL OR
1724   0D74 C0 00 00      cmp b, 0
1725   0D77 C6 9C 0D      je _if28_else
1726   0D7A             _if28_true:
1727   0D7A             ;; print_signed_long(*(long *)p); 
1728   0D7A FA FF FF      lea d, [bp + -1] ; $p
1729   0D7D 2A            mov b, [d]
1730   0D7E AB            snex b
1731   0D7F FD 39         mov c, b
1732   0D81 74            mov d, b
1733   0D82 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1734   0D85 FD 39         mov c, b ; And place it into C
1735   0D87 2A            mov b, [d] ; Lower Word in B
1736   0D88 FD 79         mov g, b
1737   0D8A 28            mov b, c
1738   0D8B FD AB         swp b
1739   0D8D D8            push b
1740   0D8E FD 27         mov b, g
1741   0D90 FD AB         swp b
1742   0D92 D8            push b
1743   0D93 07 30 12      call print_signed_long
1744   0D96 51 04 00      add sp, 4
1745   0D99 0A 19 0E      jmp _if28_exit
1746   0D9C             _if28_else:
1747   0D9C             ;; if(*format_p == 'u') 
1748   0D9C             _if29_cond:
1749   0D9C FA FD FF      lea d, [bp + -3] ; $format_p
1750   0D9F 2A            mov b, [d]
1751   0DA0 74            mov d, b
1752   0DA1 32            mov bl, [d]
1753   0DA2 A7 00         mov bh, 0
1754   0DA4             ; START RELATIONAL
1755   0DA4 D7            push a
1756   0DA5 11            mov a, b
1757   0DA6 26 75 00      mov b, $75
1758   0DA9 B0            cmp a, b
1759   0DAA FD 71         seq ; ==
1760   0DAC E4            pop a
1761   0DAD             ; END RELATIONAL
1762   0DAD C0 00 00      cmp b, 0
1763   0DB0 C6 D7 0D      je _if29_else
1764   0DB3             _if29_true:
1765   0DB3             ;; print_unsigned_long(*(unsigned long *)p); 
1766   0DB3 FA FF FF      lea d, [bp + -1] ; $p
1767   0DB6 2A            mov b, [d]
1768   0DB7 A7 00         mov bh, 0
1769   0DB9 38 00 00      mov c, 0
1770   0DBC 74            mov d, b
1771   0DBD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1772   0DC0 FD 39         mov c, b ; And place it into C
1773   0DC2 2A            mov b, [d] ; Lower Word in B
1774   0DC3 FD 79         mov g, b
1775   0DC5 28            mov b, c
1776   0DC6 FD AB         swp b
1777   0DC8 D8            push b
1778   0DC9 FD 27         mov b, g
1779   0DCB FD AB         swp b
1780   0DCD D8            push b
1781   0DCE 07 70 15      call print_unsigned_long
1782   0DD1 51 04 00      add sp, 4
1783   0DD4 0A 19 0E      jmp _if29_exit
1784   0DD7             _if29_else:
1785   0DD7             ;; if(*format_p == 'x') 
1786   0DD7             _if30_cond:
1787   0DD7 FA FD FF      lea d, [bp + -3] ; $format_p
1788   0DDA 2A            mov b, [d]
1789   0DDB 74            mov d, b
1790   0DDC 32            mov bl, [d]
1791   0DDD A7 00         mov bh, 0
1792   0DDF             ; START RELATIONAL
1793   0DDF D7            push a
1794   0DE0 11            mov a, b
1795   0DE1 26 78 00      mov b, $78
1796   0DE4 B0            cmp a, b
1797   0DE5 FD 71         seq ; ==
1798   0DE7 E4            pop a
1799   0DE8             ; END RELATIONAL
1800   0DE8 C0 00 00      cmp b, 0
1801   0DEB C6 0D 0E      je _if30_else
1802   0DEE             _if30_true:
1803   0DEE             ;; printx32(*(long int *)p); 
1804   0DEE FA FF FF      lea d, [bp + -1] ; $p
1805   0DF1 2A            mov b, [d]
1806   0DF2 74            mov d, b
1807   0DF3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1808   0DF6 FD 39         mov c, b ; And place it into C
1809   0DF8 2A            mov b, [d] ; Lower Word in B
1810   0DF9 FD 79         mov g, b
1811   0DFB 28            mov b, c
1812   0DFC FD AB         swp b
1813   0DFE D8            push b
1814   0DFF FD 27         mov b, g
1815   0E01 FD AB         swp b
1816   0E03 D8            push b
1817   0E04 07 A5 0F      call printx32
1818   0E07 51 04 00      add sp, 4
1819   0E0A 0A 19 0E      jmp _if30_exit
1820   0E0D             _if30_else:
1821   0E0D             ;; err("Unexpected format in printf."); 
1822   0E0D 26 16 20      mov b, _s3 ; "Unexpected format in printf."
1823   0E10 FD AB         swp b
1824   0E12 D8            push b
1825   0E13 07 93 0F      call err
1826   0E16 51 02 00      add sp, 2
1827   0E19             _if30_exit:
1828   0E19             _if29_exit:
1829   0E19             _if28_exit:
1830   0E19             ;; p = p + 4; 
1831   0E19 FA FF FF      lea d, [bp + -1] ; $p
1832   0E1C DA            push d
1833   0E1D FA FF FF      lea d, [bp + -1] ; $p
1834   0E20 2A            mov b, [d]
1835   0E21             ; START TERMS
1836   0E21 D7            push a
1837   0E22 11            mov a, b
1838   0E23 26 04 00      mov b, $4
1839   0E26 56            add b, a
1840   0E27 E4            pop a
1841   0E28             ; END TERMS
1842   0E28 E7            pop d
1843   0E29 FD 43         mov [d], b
1844   0E2B             ;; break; 
1845   0E2B 0A 51 0F      jmp _switch27_exit ; case break
1846   0E2E             _switch27_case2:
1847   0E2E             _switch27_case3:
1848   0E2E             ;; sp = sp + sprint_signed(sp, *(int*)p); 
1849   0E2E FA FB FF      lea d, [bp + -5] ; $sp
1850   0E31 DA            push d
1851   0E32 FA FB FF      lea d, [bp + -5] ; $sp
1852   0E35 2A            mov b, [d]
1853   0E36             ; START TERMS
1854   0E36 D7            push a
1855   0E37 11            mov a, b
1856   0E38 FA FF FF      lea d, [bp + -1] ; $p
1857   0E3B 2A            mov b, [d]
1858   0E3C 74            mov d, b
1859   0E3D 2A            mov b, [d]
1860   0E3E FD AB         swp b
1861   0E40 D8            push b
1862   0E41 FA FB FF      lea d, [bp + -5] ; $sp
1863   0E44 2A            mov b, [d]
1864   0E45 FD AB         swp b
1865   0E47 D8            push b
1866   0E48 07 3F 19      call sprint_signed
1867   0E4B 51 04 00      add sp, 4
1868   0E4E 56            add b, a
1869   0E4F E4            pop a
1870   0E50             ; END TERMS
1871   0E50 E7            pop d
1872   0E51 FD 43         mov [d], b
1873   0E53             ;; p = p + 2; 
1874   0E53 FA FF FF      lea d, [bp + -1] ; $p
1875   0E56 DA            push d
1876   0E57 FA FF FF      lea d, [bp + -1] ; $p
1877   0E5A 2A            mov b, [d]
1878   0E5B             ; START TERMS
1879   0E5B D7            push a
1880   0E5C 11            mov a, b
1881   0E5D 26 02 00      mov b, $2
1882   0E60 56            add b, a
1883   0E61 E4            pop a
1884   0E62             ; END TERMS
1885   0E62 E7            pop d
1886   0E63 FD 43         mov [d], b
1887   0E65             ;; break; 
1888   0E65 0A 51 0F      jmp _switch27_exit ; case break
1889   0E68             _switch27_case4:
1890   0E68             ;; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
1891   0E68 FA FB FF      lea d, [bp + -5] ; $sp
1892   0E6B DA            push d
1893   0E6C FA FB FF      lea d, [bp + -5] ; $sp
1894   0E6F 2A            mov b, [d]
1895   0E70             ; START TERMS
1896   0E70 D7            push a
1897   0E71 11            mov a, b
1898   0E72 FA FF FF      lea d, [bp + -1] ; $p
1899   0E75 2A            mov b, [d]
1900   0E76 74            mov d, b
1901   0E77 2A            mov b, [d]
1902   0E78 FD AB         swp b
1903   0E7A D8            push b
1904   0E7B FA FB FF      lea d, [bp + -5] ; $sp
1905   0E7E 2A            mov b, [d]
1906   0E7F FD AB         swp b
1907   0E81 D8            push b
1908   0E82 07 6B 17      call sprint_unsigned
1909   0E85 51 04 00      add sp, 4
1910   0E88 56            add b, a
1911   0E89 E4            pop a
1912   0E8A             ; END TERMS
1913   0E8A E7            pop d
1914   0E8B FD 43         mov [d], b
1915   0E8D             ;; p = p + 2; 
1916   0E8D FA FF FF      lea d, [bp + -1] ; $p
1917   0E90 DA            push d
1918   0E91 FA FF FF      lea d, [bp + -1] ; $p
1919   0E94 2A            mov b, [d]
1920   0E95             ; START TERMS
1921   0E95 D7            push a
1922   0E96 11            mov a, b
1923   0E97 26 02 00      mov b, $2
1924   0E9A 56            add b, a
1925   0E9B E4            pop a
1926   0E9C             ; END TERMS
1927   0E9C E7            pop d
1928   0E9D FD 43         mov [d], b
1929   0E9F             ;; break; 
1930   0E9F 0A 51 0F      jmp _switch27_exit ; case break
1931   0EA2             _switch27_case5:
1932   0EA2             
1933   0EA2             ; --- BEGIN INLINE ASM BLOCK
1934   0EA2 FA FF FF      lea d, [bp + -1] ; $p
1935   0EA5 FD 2A         mov d, [d]
1936   0EA7 2A            mov b, [d]
1937   0EA8 07 D4 1D      call print_u16x
1938   0EAB             ; --- END INLINE ASM BLOCK
1939   0EAB             
1940   0EAB             ;; p = p + 2; 
1941   0EAB FA FF FF      lea d, [bp + -1] ; $p
1942   0EAE DA            push d
1943   0EAF FA FF FF      lea d, [bp + -1] ; $p
1944   0EB2 2A            mov b, [d]
1945   0EB3             ; START TERMS
1946   0EB3 D7            push a
1947   0EB4 11            mov a, b
1948   0EB5 26 02 00      mov b, $2
1949   0EB8 56            add b, a
1950   0EB9 E4            pop a
1951   0EBA             ; END TERMS
1952   0EBA E7            pop d
1953   0EBB FD 43         mov [d], b
1954   0EBD             ;; break; 
1955   0EBD 0A 51 0F      jmp _switch27_exit ; case break
1956   0EC0             _switch27_case6:
1957   0EC0             ;; *sp++ = *(char *)p; 
1958   0EC0 FA FB FF      lea d, [bp + -5] ; $sp
1959   0EC3 2A            mov b, [d]
1960   0EC4 FD 77         inc b
1961   0EC6 FA FB FF      lea d, [bp + -5] ; $sp
1962   0EC9 FD 43         mov [d], b
1963   0ECB FD 7D         dec b
1964   0ECD D8            push b
1965   0ECE FA FF FF      lea d, [bp + -1] ; $p
1966   0ED1 2A            mov b, [d]
1967   0ED2 74            mov d, b
1968   0ED3 32            mov bl, [d]
1969   0ED4 A7 00         mov bh, 0
1970   0ED6 E7            pop d
1971   0ED7 FD 3E         mov [d], bl
1972   0ED9             ;; p = p + 1; 
1973   0ED9 FA FF FF      lea d, [bp + -1] ; $p
1974   0EDC DA            push d
1975   0EDD FA FF FF      lea d, [bp + -1] ; $p
1976   0EE0 2A            mov b, [d]
1977   0EE1             ; START TERMS
1978   0EE1 D7            push a
1979   0EE2 11            mov a, b
1980   0EE3 26 01 00      mov b, $1
1981   0EE6 56            add b, a
1982   0EE7 E4            pop a
1983   0EE8             ; END TERMS
1984   0EE8 E7            pop d
1985   0EE9 FD 43         mov [d], b
1986   0EEB             ;; break; 
1987   0EEB 0A 51 0F      jmp _switch27_exit ; case break
1988   0EEE             _switch27_case7:
1989   0EEE             ;; int len = strlen(*(char **)p); 
1990   0EEE 52 02 00      sub sp, 2 ; len
1991   0EF1             ; --- START LOCAL VAR INITIALIZATION
1992   0EF1 FA F9 FF      lea d, [bp + -7] ; $len
1993   0EF4 DA            push d
1994   0EF5 FA FF FF      lea d, [bp + -1] ; $p
1995   0EF8 2A            mov b, [d]
1996   0EF9 74            mov d, b
1997   0EFA 2A            mov b, [d]
1998   0EFB FD AB         swp b
1999   0EFD D8            push b
2000   0EFE 07 BA 05      call strlen
2001   0F01 51 02 00      add sp, 2
2002   0F04 E7            pop d
2003   0F05 FD 43         mov [d], b
2004   0F07             ; --- END LOCAL VAR INITIALIZATION
2005   0F07             ;; strcpy(sp, *(char **)p); 
2006   0F07 FA FF FF      lea d, [bp + -1] ; $p
2007   0F0A 2A            mov b, [d]
2008   0F0B 74            mov d, b
2009   0F0C 2A            mov b, [d]
2010   0F0D FD AB         swp b
2011   0F0F D8            push b
2012   0F10 FA FB FF      lea d, [bp + -5] ; $sp
2013   0F13 2A            mov b, [d]
2014   0F14 FD AB         swp b
2015   0F16 D8            push b
2016   0F17 07 40 04      call strcpy
2017   0F1A 51 04 00      add sp, 4
2018   0F1D             ;; sp = sp + len; 
2019   0F1D FA FB FF      lea d, [bp + -5] ; $sp
2020   0F20 DA            push d
2021   0F21 FA FB FF      lea d, [bp + -5] ; $sp
2022   0F24 2A            mov b, [d]
2023   0F25             ; START TERMS
2024   0F25 D7            push a
2025   0F26 11            mov a, b
2026   0F27 FA F9 FF      lea d, [bp + -7] ; $len
2027   0F2A 2A            mov b, [d]
2028   0F2B 56            add b, a
2029   0F2C E4            pop a
2030   0F2D             ; END TERMS
2031   0F2D E7            pop d
2032   0F2E FD 43         mov [d], b
2033   0F30             ;; p = p + 2; 
2034   0F30 FA FF FF      lea d, [bp + -1] ; $p
2035   0F33 DA            push d
2036   0F34 FA FF FF      lea d, [bp + -1] ; $p
2037   0F37 2A            mov b, [d]
2038   0F38             ; START TERMS
2039   0F38 D7            push a
2040   0F39 11            mov a, b
2041   0F3A 26 02 00      mov b, $2
2042   0F3D 56            add b, a
2043   0F3E E4            pop a
2044   0F3F             ; END TERMS
2045   0F3F E7            pop d
2046   0F40 FD 43         mov [d], b
2047   0F42             ;; break; 
2048   0F42 0A 51 0F      jmp _switch27_exit ; case break
2049   0F45             _switch27_default:
2050   0F45             ;; print("Error: Unknown argument type.\n"); 
2051   0F45 26 33 20      mov b, _s4 ; "Error: Unknown argument type.\n"
2052   0F48 FD AB         swp b
2053   0F4A D8            push b
2054   0F4B 07 E9 1A      call print
2055   0F4E 51 02 00      add sp, 2
2056   0F51             _switch27_exit:
2057   0F51             ;; format_p++; 
2058   0F51 FA FD FF      lea d, [bp + -3] ; $format_p
2059   0F54 2A            mov b, [d]
2060   0F55 FD 77         inc b
2061   0F57 FA FD FF      lea d, [bp + -3] ; $format_p
2062   0F5A FD 43         mov [d], b
2063   0F5C FD 7D         dec b
2064   0F5E 0A 83 0F      jmp _if26_exit
2065   0F61             _if26_else:
2066   0F61             ;; *sp++ = *format_p++; 
2067   0F61 FA FB FF      lea d, [bp + -5] ; $sp
2068   0F64 2A            mov b, [d]
2069   0F65 FD 77         inc b
2070   0F67 FA FB FF      lea d, [bp + -5] ; $sp
2071   0F6A FD 43         mov [d], b
2072   0F6C FD 7D         dec b
2073   0F6E D8            push b
2074   0F6F FA FD FF      lea d, [bp + -3] ; $format_p
2075   0F72 2A            mov b, [d]
2076   0F73 FD 77         inc b
2077   0F75 FA FD FF      lea d, [bp + -3] ; $format_p
2078   0F78 FD 43         mov [d], b
2079   0F7A FD 7D         dec b
2080   0F7C 74            mov d, b
2081   0F7D 32            mov bl, [d]
2082   0F7E A7 00         mov bh, 0
2083   0F80 E7            pop d
2084   0F81 FD 3E         mov [d], bl
2085   0F83             _if26_exit:
2086   0F83             _if25_exit:
2087   0F83             _for24_update:
2088   0F83 0A CD 0C      jmp _for24_cond
2089   0F86             _for24_exit:
2090   0F86             ;; *sp = '\0'; 
2091   0F86 FA FB FF      lea d, [bp + -5] ; $sp
2092   0F89 2A            mov b, [d]
2093   0F8A D8            push b
2094   0F8B 26 00 00      mov b, $0
2095   0F8E E7            pop d
2096   0F8F FD 3E         mov [d], bl
2097   0F91 F9            leave
2098   0F92 09            ret
2099   0F93             
2100   0F93             err:
2101   0F93 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2102   0F96             ;; print(e); 
2103   0F96 FA 05 00      lea d, [bp + 5] ; $e
2104   0F99 2A            mov b, [d]
2105   0F9A FD AB         swp b
2106   0F9C D8            push b
2107   0F9D 07 E9 1A      call print
2108   0FA0 51 02 00      add sp, 2
2109   0FA3 F9            leave
2110   0FA4 09            ret
2111   0FA5             
2112   0FA5             printx32:
2113   0FA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2114   0FA8             
2115   0FA8             ; --- BEGIN INLINE ASM BLOCK
2116   0FA8 FA 05 00      lea d, [bp + 5] ; $hex
2117   0FAB 2B 02 00      mov b, [d+2]
2118   0FAE 07 D4 1D      call print_u16x
2119   0FB1 2A            mov b, [d]
2120   0FB2 07 D4 1D      call print_u16x
2121   0FB5             ; --- END INLINE ASM BLOCK
2122   0FB5             
2123   0FB5 F9            leave
2124   0FB6 09            ret
2125   0FB7             
2126   0FB7             printx16:
2127   0FB7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2128   0FBA             
2129   0FBA             ; --- BEGIN INLINE ASM BLOCK
2130   0FBA FA 05 00      lea d, [bp + 5] ; $hex
2131   0FBD 2A            mov b, [d]
2132   0FBE 07 D4 1D      call print_u16x
2133   0FC1             ; --- END INLINE ASM BLOCK
2134   0FC1             
2135   0FC1 F9            leave
2136   0FC2 09            ret
2137   0FC3             
2138   0FC3             printx8:
2139   0FC3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2140   0FC6             
2141   0FC6             ; --- BEGIN INLINE ASM BLOCK
2142   0FC6 FA 05 00      lea d, [bp + 5] ; $hex
2143   0FC9 32            mov bl, [d]
2144   0FCA 07 18 1E      call print_u8x
2145   0FCD             ; --- END INLINE ASM BLOCK
2146   0FCD             
2147   0FCD F9            leave
2148   0FCE 09            ret
2149   0FCF             
2150   0FCF             hex_str_to_int:
2151   0FCF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2152   0FD2             ;; int value = 0; 
2153   0FD2 52 02 00      sub sp, 2 ; value
2154   0FD5             ; --- START LOCAL VAR INITIALIZATION
2155   0FD5 FA FF FF      lea d, [bp + -1] ; $value
2156   0FD8 DA            push d
2157   0FD9 26 00 00      mov b, $0
2158   0FDC E7            pop d
2159   0FDD FD 43         mov [d], b
2160   0FDF             ; --- END LOCAL VAR INITIALIZATION
2161   0FDF             ;; int i; 
2162   0FDF 52 02 00      sub sp, 2 ; i
2163   0FE2             ;; char hex_char; 
2164   0FE2 52 01 00      sub sp, 1 ; hex_char
2165   0FE5             ;; int len; 
2166   0FE5 52 02 00      sub sp, 2 ; len
2167   0FE8             ;; len = strlen(hex_string); 
2168   0FE8 FA FA FF      lea d, [bp + -6] ; $len
2169   0FEB DA            push d
2170   0FEC FA 05 00      lea d, [bp + 5] ; $hex_string
2171   0FEF 2A            mov b, [d]
2172   0FF0 FD AB         swp b
2173   0FF2 D8            push b
2174   0FF3 07 BA 05      call strlen
2175   0FF6 51 02 00      add sp, 2
2176   0FF9 E7            pop d
2177   0FFA FD 43         mov [d], b
2178   0FFC             ;; for (i = 0; i < len; i++) { 
2179   0FFC             _for31_init:
2180   0FFC FA FD FF      lea d, [bp + -3] ; $i
2181   0FFF DA            push d
2182   1000 26 00 00      mov b, $0
2183   1003 E7            pop d
2184   1004 FD 43         mov [d], b
2185   1006             _for31_cond:
2186   1006 FA FD FF      lea d, [bp + -3] ; $i
2187   1009 2A            mov b, [d]
2188   100A             ; START RELATIONAL
2189   100A D7            push a
2190   100B 11            mov a, b
2191   100C FA FA FF      lea d, [bp + -6] ; $len
2192   100F 2A            mov b, [d]
2193   1010 B0            cmp a, b
2194   1011 FD 73         slt ; < (signed)
2195   1013 E4            pop a
2196   1014             ; END RELATIONAL
2197   1014 C0 00 00      cmp b, 0
2198   1017 C6 19 11      je _for31_exit
2199   101A             _for31_block:
2200   101A             ;; hex_char = hex_string[i]; 
2201   101A FA FC FF      lea d, [bp + -4] ; $hex_char
2202   101D DA            push d
2203   101E FA 05 00      lea d, [bp + 5] ; $hex_string
2204   1021 FD 2A         mov d, [d]
2205   1023 D7            push a
2206   1024 DA            push d
2207   1025 FA FD FF      lea d, [bp + -3] ; $i
2208   1028 2A            mov b, [d]
2209   1029 E7            pop d
2210   102A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2211   102E E4            pop a
2212   102F 32            mov bl, [d]
2213   1030 A7 00         mov bh, 0
2214   1032 E7            pop d
2215   1033 FD 3E         mov [d], bl
2216   1035             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2217   1035             _if32_cond:
2218   1035 FA FC FF      lea d, [bp + -4] ; $hex_char
2219   1038 32            mov bl, [d]
2220   1039 A7 00         mov bh, 0
2221   103B             ; START RELATIONAL
2222   103B D7            push a
2223   103C 11            mov a, b
2224   103D 26 61 00      mov b, $61
2225   1040 B0            cmp a, b
2226   1041 FD 80         sge ; >=
2227   1043 E4            pop a
2228   1044             ; END RELATIONAL
2229   1044             ; START LOGICAL AND
2230   1044 D7            push a
2231   1045 11            mov a, b
2232   1046 FA FC FF      lea d, [bp + -4] ; $hex_char
2233   1049 32            mov bl, [d]
2234   104A A7 00         mov bh, 0
2235   104C             ; START RELATIONAL
2236   104C D7            push a
2237   104D 11            mov a, b
2238   104E 26 66 00      mov b, $66
2239   1051 B0            cmp a, b
2240   1052 FD 74         sle ; <= (signed)
2241   1054 E4            pop a
2242   1055             ; END RELATIONAL
2243   1055 FD A7         sand a, b
2244   1057 E4            pop a
2245   1058             ; END LOGICAL AND
2246   1058 C0 00 00      cmp b, 0
2247   105B C6 8C 10      je _if32_else
2248   105E             _if32_true:
2249   105E             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2250   105E FA FF FF      lea d, [bp + -1] ; $value
2251   1061 DA            push d
2252   1062 FA FF FF      lea d, [bp + -1] ; $value
2253   1065 2A            mov b, [d]
2254   1066             ; START FACTORS
2255   1066 D7            push a
2256   1067 11            mov a, b
2257   1068 26 10 00      mov b, $10
2258   106B AC            mul a, b ; *
2259   106C 11            mov a, b
2260   106D 27            mov b, a
2261   106E E4            pop a
2262   106F             ; END FACTORS
2263   106F             ; START TERMS
2264   106F D7            push a
2265   1070 11            mov a, b
2266   1071 FA FC FF      lea d, [bp + -4] ; $hex_char
2267   1074 32            mov bl, [d]
2268   1075 A7 00         mov bh, 0
2269   1077             ; START TERMS
2270   1077 D7            push a
2271   1078 11            mov a, b
2272   1079 26 61 00      mov b, $61
2273   107C 60            sub a, b
2274   107D 27            mov b, a
2275   107E 11            mov a, b
2276   107F 26 0A 00      mov b, $a
2277   1082 56            add b, a
2278   1083 E4            pop a
2279   1084             ; END TERMS
2280   1084 56            add b, a
2281   1085 E4            pop a
2282   1086             ; END TERMS
2283   1086 E7            pop d
2284   1087 FD 43         mov [d], b
2285   1089 0A 09 11      jmp _if32_exit
2286   108C             _if32_else:
2287   108C             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2288   108C             _if33_cond:
2289   108C FA FC FF      lea d, [bp + -4] ; $hex_char
2290   108F 32            mov bl, [d]
2291   1090 A7 00         mov bh, 0
2292   1092             ; START RELATIONAL
2293   1092 D7            push a
2294   1093 11            mov a, b
2295   1094 26 41 00      mov b, $41
2296   1097 B0            cmp a, b
2297   1098 FD 80         sge ; >=
2298   109A E4            pop a
2299   109B             ; END RELATIONAL
2300   109B             ; START LOGICAL AND
2301   109B D7            push a
2302   109C 11            mov a, b
2303   109D FA FC FF      lea d, [bp + -4] ; $hex_char
2304   10A0 32            mov bl, [d]
2305   10A1 A7 00         mov bh, 0
2306   10A3             ; START RELATIONAL
2307   10A3 D7            push a
2308   10A4 11            mov a, b
2309   10A5 26 46 00      mov b, $46
2310   10A8 B0            cmp a, b
2311   10A9 FD 74         sle ; <= (signed)
2312   10AB E4            pop a
2313   10AC             ; END RELATIONAL
2314   10AC FD A7         sand a, b
2315   10AE E4            pop a
2316   10AF             ; END LOGICAL AND
2317   10AF C0 00 00      cmp b, 0
2318   10B2 C6 E3 10      je _if33_else
2319   10B5             _if33_true:
2320   10B5             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2321   10B5 FA FF FF      lea d, [bp + -1] ; $value
2322   10B8 DA            push d
2323   10B9 FA FF FF      lea d, [bp + -1] ; $value
2324   10BC 2A            mov b, [d]
2325   10BD             ; START FACTORS
2326   10BD D7            push a
2327   10BE 11            mov a, b
2328   10BF 26 10 00      mov b, $10
2329   10C2 AC            mul a, b ; *
2330   10C3 11            mov a, b
2331   10C4 27            mov b, a
2332   10C5 E4            pop a
2333   10C6             ; END FACTORS
2334   10C6             ; START TERMS
2335   10C6 D7            push a
2336   10C7 11            mov a, b
2337   10C8 FA FC FF      lea d, [bp + -4] ; $hex_char
2338   10CB 32            mov bl, [d]
2339   10CC A7 00         mov bh, 0
2340   10CE             ; START TERMS
2341   10CE D7            push a
2342   10CF 11            mov a, b
2343   10D0 26 41 00      mov b, $41
2344   10D3 60            sub a, b
2345   10D4 27            mov b, a
2346   10D5 11            mov a, b
2347   10D6 26 0A 00      mov b, $a
2348   10D9 56            add b, a
2349   10DA E4            pop a
2350   10DB             ; END TERMS
2351   10DB 56            add b, a
2352   10DC E4            pop a
2353   10DD             ; END TERMS
2354   10DD E7            pop d
2355   10DE FD 43         mov [d], b
2356   10E0 0A 09 11      jmp _if33_exit
2357   10E3             _if33_else:
2358   10E3             ;; value = (value * 16) + (hex_char - '0'); 
2359   10E3 FA FF FF      lea d, [bp + -1] ; $value
2360   10E6 DA            push d
2361   10E7 FA FF FF      lea d, [bp + -1] ; $value
2362   10EA 2A            mov b, [d]
2363   10EB             ; START FACTORS
2364   10EB D7            push a
2365   10EC 11            mov a, b
2366   10ED 26 10 00      mov b, $10
2367   10F0 AC            mul a, b ; *
2368   10F1 11            mov a, b
2369   10F2 27            mov b, a
2370   10F3 E4            pop a
2371   10F4             ; END FACTORS
2372   10F4             ; START TERMS
2373   10F4 D7            push a
2374   10F5 11            mov a, b
2375   10F6 FA FC FF      lea d, [bp + -4] ; $hex_char
2376   10F9 32            mov bl, [d]
2377   10FA A7 00         mov bh, 0
2378   10FC             ; START TERMS
2379   10FC D7            push a
2380   10FD 11            mov a, b
2381   10FE 26 30 00      mov b, $30
2382   1101 60            sub a, b
2383   1102 27            mov b, a
2384   1103 E4            pop a
2385   1104             ; END TERMS
2386   1104 56            add b, a
2387   1105 E4            pop a
2388   1106             ; END TERMS
2389   1106 E7            pop d
2390   1107 FD 43         mov [d], b
2391   1109             _if33_exit:
2392   1109             _if32_exit:
2393   1109             _for31_update:
2394   1109 FA FD FF      lea d, [bp + -3] ; $i
2395   110C 2A            mov b, [d]
2396   110D FD 77         inc b
2397   110F FA FD FF      lea d, [bp + -3] ; $i
2398   1112 FD 43         mov [d], b
2399   1114 FD 7D         dec b
2400   1116 0A 06 10      jmp _for31_cond
2401   1119             _for31_exit:
2402   1119             ;; return value; 
2403   1119 FA FF FF      lea d, [bp + -1] ; $value
2404   111C 2A            mov b, [d]
2405   111D F9            leave
2406   111E 09            ret
2407   111F             
2408   111F             gets:
2409   111F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2410   1122             
2411   1122             ; --- BEGIN INLINE ASM BLOCK
2412   1122 FA 05 00      lea d, [bp + 5] ; $s
2413   1125 15            mov a, [d]
2414   1126 3C            mov d, a
2415   1127 07 39 1C      call _gets
2416   112A             ; --- END INLINE ASM BLOCK
2417   112A             
2418   112A             ;; return strlen(s); 
2419   112A FA 05 00      lea d, [bp + 5] ; $s
2420   112D 2A            mov b, [d]
2421   112E FD AB         swp b
2422   1130 D8            push b
2423   1131 07 BA 05      call strlen
2424   1134 51 02 00      add sp, 2
2425   1137 F9            leave
2426   1138 09            ret
2427   1139             
2428   1139             print_signed:
2429   1139 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2430   113C             ;; char digits[5]; 
2431   113C 52 05 00      sub sp, 5 ; digits
2432   113F             ;; int i = 0; 
2433   113F 52 02 00      sub sp, 2 ; i
2434   1142             ; --- START LOCAL VAR INITIALIZATION
2435   1142 FA FA FF      lea d, [bp + -6] ; $i
2436   1145 DA            push d
2437   1146 26 00 00      mov b, $0
2438   1149 E7            pop d
2439   114A FD 43         mov [d], b
2440   114C             ; --- END LOCAL VAR INITIALIZATION
2441   114C             ;; if (num < 0) { 
2442   114C             _if34_cond:
2443   114C FA 05 00      lea d, [bp + 5] ; $num
2444   114F 2A            mov b, [d]
2445   1150             ; START RELATIONAL
2446   1150 D7            push a
2447   1151 11            mov a, b
2448   1152 26 00 00      mov b, $0
2449   1155 B0            cmp a, b
2450   1156 FD 73         slt ; < (signed)
2451   1158 E4            pop a
2452   1159             ; END RELATIONAL
2453   1159 C0 00 00      cmp b, 0
2454   115C C6 79 11      je _if34_else
2455   115F             _if34_true:
2456   115F             ;; putchar('-'); 
2457   115F 26 2D 00      mov b, $2d
2458   1162 DD            push bl
2459   1163 07 A1 1A      call putchar
2460   1166 51 01 00      add sp, 1
2461   1169             ;; num = -num; 
2462   1169 FA 05 00      lea d, [bp + 5] ; $num
2463   116C DA            push d
2464   116D FA 05 00      lea d, [bp + 5] ; $num
2465   1170 2A            mov b, [d]
2466   1171 FD 97         neg b
2467   1173 E7            pop d
2468   1174 FD 43         mov [d], b
2469   1176 0A 9B 11      jmp _if34_exit
2470   1179             _if34_else:
2471   1179             ;; if (num == 0) { 
2472   1179             _if35_cond:
2473   1179 FA 05 00      lea d, [bp + 5] ; $num
2474   117C 2A            mov b, [d]
2475   117D             ; START RELATIONAL
2476   117D D7            push a
2477   117E 11            mov a, b
2478   117F 26 00 00      mov b, $0
2479   1182 B0            cmp a, b
2480   1183 FD 71         seq ; ==
2481   1185 E4            pop a
2482   1186             ; END RELATIONAL
2483   1186 C0 00 00      cmp b, 0
2484   1189 C6 9B 11      je _if35_exit
2485   118C             _if35_true:
2486   118C             ;; putchar('0'); 
2487   118C 26 30 00      mov b, $30
2488   118F DD            push bl
2489   1190 07 A1 1A      call putchar
2490   1193 51 01 00      add sp, 1
2491   1196             ;; return; 
2492   1196 F9            leave
2493   1197 09            ret
2494   1198 0A 9B 11      jmp _if35_exit
2495   119B             _if35_exit:
2496   119B             _if34_exit:
2497   119B             ;; while (num > 0) { 
2498   119B             _while36_cond:
2499   119B FA 05 00      lea d, [bp + 5] ; $num
2500   119E 2A            mov b, [d]
2501   119F             ; START RELATIONAL
2502   119F D7            push a
2503   11A0 11            mov a, b
2504   11A1 26 00 00      mov b, $0
2505   11A4 B0            cmp a, b
2506   11A5 FD 7F         sgt ; >
2507   11A7 E4            pop a
2508   11A8             ; END RELATIONAL
2509   11A8 C0 00 00      cmp b, 0
2510   11AB C6 F5 11      je _while36_exit
2511   11AE             _while36_block:
2512   11AE             ;; digits[i] = '0' + (num % 10); 
2513   11AE FA FC FF      lea d, [bp + -4] ; $digits
2514   11B1 D7            push a
2515   11B2 DA            push d
2516   11B3 FA FA FF      lea d, [bp + -6] ; $i
2517   11B6 2A            mov b, [d]
2518   11B7 E7            pop d
2519   11B8 5A            add d, b
2520   11B9 E4            pop a
2521   11BA DA            push d
2522   11BB 26 30 00      mov b, $30
2523   11BE             ; START TERMS
2524   11BE D7            push a
2525   11BF 11            mov a, b
2526   11C0 FA 05 00      lea d, [bp + 5] ; $num
2527   11C3 2A            mov b, [d]
2528   11C4             ; START FACTORS
2529   11C4 D7            push a
2530   11C5 11            mov a, b
2531   11C6 26 0A 00      mov b, $a
2532   11C9 AE            div a, b ; 
2533   11CA 11            mov a, b
2534   11CB 27            mov b, a
2535   11CC E4            pop a
2536   11CD             ; END FACTORS
2537   11CD 56            add b, a
2538   11CE E4            pop a
2539   11CF             ; END TERMS
2540   11CF E7            pop d
2541   11D0 FD 3E         mov [d], bl
2542   11D2             ;; num = num / 10; 
2543   11D2 FA 05 00      lea d, [bp + 5] ; $num
2544   11D5 DA            push d
2545   11D6 FA 05 00      lea d, [bp + 5] ; $num
2546   11D9 2A            mov b, [d]
2547   11DA             ; START FACTORS
2548   11DA D7            push a
2549   11DB 11            mov a, b
2550   11DC 26 0A 00      mov b, $a
2551   11DF AE            div a, b
2552   11E0 27            mov b, a
2553   11E1 E4            pop a
2554   11E2             ; END FACTORS
2555   11E2 E7            pop d
2556   11E3 FD 43         mov [d], b
2557   11E5             ;; i++; 
2558   11E5 FA FA FF      lea d, [bp + -6] ; $i
2559   11E8 2A            mov b, [d]
2560   11E9 FD 77         inc b
2561   11EB FA FA FF      lea d, [bp + -6] ; $i
2562   11EE FD 43         mov [d], b
2563   11F0 FD 7D         dec b
2564   11F2 0A 9B 11      jmp _while36_cond
2565   11F5             _while36_exit:
2566   11F5             ;; while (i > 0) { 
2567   11F5             _while37_cond:
2568   11F5 FA FA FF      lea d, [bp + -6] ; $i
2569   11F8 2A            mov b, [d]
2570   11F9             ; START RELATIONAL
2571   11F9 D7            push a
2572   11FA 11            mov a, b
2573   11FB 26 00 00      mov b, $0
2574   11FE B0            cmp a, b
2575   11FF FD 7F         sgt ; >
2576   1201 E4            pop a
2577   1202             ; END RELATIONAL
2578   1202 C0 00 00      cmp b, 0
2579   1205 C6 2E 12      je _while37_exit
2580   1208             _while37_block:
2581   1208             ;; i--; 
2582   1208 FA FA FF      lea d, [bp + -6] ; $i
2583   120B 2A            mov b, [d]
2584   120C FD 7D         dec b
2585   120E FA FA FF      lea d, [bp + -6] ; $i
2586   1211 FD 43         mov [d], b
2587   1213 FD 77         inc b
2588   1215             ;; putchar(digits[i]); 
2589   1215 FA FC FF      lea d, [bp + -4] ; $digits
2590   1218 D7            push a
2591   1219 DA            push d
2592   121A FA FA FF      lea d, [bp + -6] ; $i
2593   121D 2A            mov b, [d]
2594   121E E7            pop d
2595   121F 5A            add d, b
2596   1220 E4            pop a
2597   1221 32            mov bl, [d]
2598   1222 A7 00         mov bh, 0
2599   1224 DD            push bl
2600   1225 07 A1 1A      call putchar
2601   1228 51 01 00      add sp, 1
2602   122B 0A F5 11      jmp _while37_cond
2603   122E             _while37_exit:
2604   122E F9            leave
2605   122F 09            ret
2606   1230             
2607   1230             print_signed_long:
2608   1230 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2609   1233             ;; char digits[10]; 
2610   1233 52 0A 00      sub sp, 10 ; digits
2611   1236             ;; int i = 0; 
2612   1236 52 02 00      sub sp, 2 ; i
2613   1239             ; --- START LOCAL VAR INITIALIZATION
2614   1239 FA F5 FF      lea d, [bp + -11] ; $i
2615   123C DA            push d
2616   123D 26 00 00      mov b, $0
2617   1240 E7            pop d
2618   1241 FD 43         mov [d], b
2619   1243             ; --- END LOCAL VAR INITIALIZATION
2620   1243             ;; if (num < 0) { 
2621   1243             _if38_cond:
2622   1243 FA 05 00      lea d, [bp + 5] ; $num
2623   1246 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2624   1249 FD 39         mov c, b ; And place it into C
2625   124B 2A            mov b, [d] ; Lower Word in B
2626   124C             ; START RELATIONAL
2627   124C D7            push a
2628   124D FD D8         push g
2629   124F 11            mov a, b
2630   1250 FD 7A         mov g, c
2631   1252 26 00 00      mov b, $0
2632   1255 38 00 00      mov c, 0
2633   1258 FD AF 00 00   cmp32 ga, cb
2633   125C 00 00 00 00 
2633   1260 00 00 00 00 
2633   1264 00 00 00 00 
2633   1268 00 00 00 00 
2633   126C 00 00 00 00 
2633   1270 00 00 00 00 
2633   1274 00 00 00 00 
2633   1278 00 00 00 00 
2633   127C 00 00 00 00 
2633   1280 00 00 00 00 
2633   1284 00 00 00 00 
2633   1288 00 00 00 00 
2633   128C 00 00 00 00 
2633   1290 00 00 00 00 
2633   1294 00 00 00 00 
2633   1298 00 00 00 00 
2633   129C 00 00 00 00 
2633   12A0 00 00 00 00 
2633   12A4 00 00 00 00 
2633   12A8 00 00 00 00 
2633   12AC 00 00 00 00 
2633   12B0 00 00 00 00 
2633   12B4 00 00 00 00 
2633   12B8 00 00 00 00 
2633   12BC 00 00 00 00 
2633   12C0 00 00 00 00 
2633   12C4 00 00 00 00 
2633   12C8 00 00 00 00 
2633   12CC 00 00 00 00 
2633   12D0 00 00 00 00 
2633   12D4 00 00 00 00 
2633   12D8 00 00 00 00 
2633   12DC 00 00 00 00 
2633   12E0 00 00 00 00 
2633   12E4 00 00 00 00 
2633   12E8 00 00 00 00 
2633   12EC 00 00 00 00 
2633   12F0 00 00 00 00 
2633   12F4 00 00 00 00 
2633   12F8 00 00 00 00 
2633   12FC 00 00 00 00 
2633   1300 00 00 00 00 
2633   1304 00 00 00 00 
2633   1308 00 00 00 00 
2633   130C 00 00 00 00 
2633   1310 00 00 00 00 
2633   1314 00 00 00 00 
2633   1318 00 00 00 00 
2633   131C 00 00 00 00 
2633   1320 00 00 00 00 
2633   1324 00 00 00 00 
2633   1328 00 00 00 00 
2633   132C 00 00 00 00 
2633   1330 00 00 00 00 
2633   1334 00 00 00 00 
2633   1338 00 00 00 00 
2633   133C 00 00 00 00 
2633   1340 00 00 00 00 
2633   1344 00 00 00 00 
2633   1348 00 00 00 00 
2633   134C 00 00 00 00 
2633   1350 00 00 00 00 
2633   1354 00 00 00 00 
2633   1358 00 
2634   1359 FD 73         slt ; <
2635   135B FD F1         pop g
2636   135D E4            pop a
2637   135E             ; END RELATIONAL
2638   135E C0 00 00      cmp b, 0
2639   1361 C6 88 13      je _if38_else
2640   1364             _if38_true:
2641   1364             ;; putchar('-'); 
2642   1364 26 2D 00      mov b, $2d
2643   1367 DD            push bl
2644   1368 07 A1 1A      call putchar
2645   136B 51 01 00      add sp, 1
2646   136E             ;; num = -num; 
2647   136E FA 05 00      lea d, [bp + 5] ; $num
2648   1371 DA            push d
2649   1372 FA 05 00      lea d, [bp + 5] ; $num
2650   1375 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2651   1378 FD 39         mov c, b ; And place it into C
2652   137A 2A            mov b, [d] ; Lower Word in B
2653   137B FD 97         neg b
2654   137D E7            pop d
2655   137E FD 43         mov [d], b
2656   1380 28            mov b, c
2657   1381 FD 44 02 00   mov [d + 2], b
2658   1385 0A B8 14      jmp _if38_exit
2659   1388             _if38_else:
2660   1388             ;; if (num == 0) { 
2661   1388             _if39_cond:
2662   1388 FA 05 00      lea d, [bp + 5] ; $num
2663   138B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2664   138E FD 39         mov c, b ; And place it into C
2665   1390 2A            mov b, [d] ; Lower Word in B
2666   1391             ; START RELATIONAL
2667   1391 D7            push a
2668   1392 FD D8         push g
2669   1394 11            mov a, b
2670   1395 FD 7A         mov g, c
2671   1397 26 00 00      mov b, $0
2672   139A 38 00 00      mov c, 0
2673   139D FD AF 00 00   cmp32 ga, cb
2673   13A1 00 00 00 00 
2673   13A5 00 00 00 00 
2673   13A9 00 00 00 00 
2673   13AD 00 00 00 00 
2673   13B1 00 00 00 00 
2673   13B5 00 00 00 00 
2673   13B9 00 00 00 00 
2673   13BD 00 00 00 00 
2673   13C1 00 00 00 00 
2673   13C5 00 00 00 00 
2673   13C9 00 00 00 00 
2673   13CD 00 00 00 00 
2673   13D1 00 00 00 00 
2673   13D5 00 00 00 00 
2673   13D9 00 00 00 00 
2673   13DD 00 00 00 00 
2673   13E1 00 00 00 00 
2673   13E5 00 00 00 00 
2673   13E9 00 00 00 00 
2673   13ED 00 00 00 00 
2673   13F1 00 00 00 00 
2673   13F5 00 00 00 00 
2673   13F9 00 00 00 00 
2673   13FD 00 00 00 00 
2673   1401 00 00 00 00 
2673   1405 00 00 00 00 
2673   1409 00 00 00 00 
2673   140D 00 00 00 00 
2673   1411 00 00 00 00 
2673   1415 00 00 00 00 
2673   1419 00 00 00 00 
2673   141D 00 00 00 00 
2673   1421 00 00 00 00 
2673   1425 00 00 00 00 
2673   1429 00 00 00 00 
2673   142D 00 00 00 00 
2673   1431 00 00 00 00 
2673   1435 00 00 00 00 
2673   1439 00 00 00 00 
2673   143D 00 00 00 00 
2673   1441 00 00 00 00 
2673   1445 00 00 00 00 
2673   1449 00 00 00 00 
2673   144D 00 00 00 00 
2673   1451 00 00 00 00 
2673   1455 00 00 00 00 
2673   1459 00 00 00 00 
2673   145D 00 00 00 00 
2673   1461 00 00 00 00 
2673   1465 00 00 00 00 
2673   1469 00 00 00 00 
2673   146D 00 00 00 00 
2673   1471 00 00 00 00 
2673   1475 00 00 00 00 
2673   1479 00 00 00 00 
2673   147D 00 00 00 00 
2673   1481 00 00 00 00 
2673   1485 00 00 00 00 
2673   1489 00 00 00 00 
2673   148D 00 00 00 00 
2673   1491 00 00 00 00 
2673   1495 00 00 00 00 
2673   1499 00 00 00 00 
2673   149D 00 
2674   149E FD 71         seq ; ==
2675   14A0 FD F1         pop g
2676   14A2 E4            pop a
2677   14A3             ; END RELATIONAL
2678   14A3 C0 00 00      cmp b, 0
2679   14A6 C6 B8 14      je _if39_exit
2680   14A9             _if39_true:
2681   14A9             ;; putchar('0'); 
2682   14A9 26 30 00      mov b, $30
2683   14AC DD            push bl
2684   14AD 07 A1 1A      call putchar
2685   14B0 51 01 00      add sp, 1
2686   14B3             ;; return; 
2687   14B3 F9            leave
2688   14B4 09            ret
2689   14B5 0A B8 14      jmp _if39_exit
2690   14B8             _if39_exit:
2691   14B8             _if38_exit:
2692   14B8             ;; while (num > 0) { 
2693   14B8             _while40_cond:
2694   14B8 FA 05 00      lea d, [bp + 5] ; $num
2695   14BB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2696   14BE FD 39         mov c, b ; And place it into C
2697   14C0 2A            mov b, [d] ; Lower Word in B
2698   14C1             ; START RELATIONAL
2699   14C1 D7            push a
2700   14C2 FD D8         push g
2701   14C4 11            mov a, b
2702   14C5 FD 7A         mov g, c
2703   14C7 26 00 00      mov b, $0
2704   14CA 38 00 00      mov c, 0
2705   14CD FD 7F         sgt
2706   14CF FD F1         pop g
2707   14D1 E4            pop a
2708   14D2             ; END RELATIONAL
2709   14D2 C0 00 00      cmp b, 0
2710   14D5 C6 35 15      je _while40_exit
2711   14D8             _while40_block:
2712   14D8             ;; digits[i] = '0' + (num % 10); 
2713   14D8 FA F7 FF      lea d, [bp + -9] ; $digits
2714   14DB D7            push a
2715   14DC DA            push d
2716   14DD FA F5 FF      lea d, [bp + -11] ; $i
2717   14E0 2A            mov b, [d]
2718   14E1 E7            pop d
2719   14E2 5A            add d, b
2720   14E3 E4            pop a
2721   14E4 DA            push d
2722   14E5 26 30 00      mov b, $30
2723   14E8             ; START TERMS
2724   14E8 D7            push a
2725   14E9 11            mov a, b
2726   14EA FA 05 00      lea d, [bp + 5] ; $num
2727   14ED 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2728   14F0 FD 39         mov c, b ; And place it into C
2729   14F2 2A            mov b, [d] ; Lower Word in B
2730   14F3             ; START FACTORS
2731   14F3 D7            push a
2732   14F4 11            mov a, b
2733   14F5 26 0A 00      mov b, $a
2734   14F8 AE            div a, b ; 
2735   14F9 11            mov a, b
2736   14FA 27            mov b, a
2737   14FB E4            pop a
2738   14FC             ; END FACTORS
2739   14FC 54            add a, b
2740   14FD D7            push a
2741   14FE FD 12         mov a, g
2742   1500 28            mov b, c
2743   1501 5C            adc a, b
2744   1502 39            mov c, a
2745   1503 E5            pop b
2746   1504 E4            pop a
2747   1505             ; END TERMS
2748   1505 E7            pop d
2749   1506 FD 3E         mov [d], bl
2750   1508             ;; num = num / 10; 
2751   1508 FA 05 00      lea d, [bp + 5] ; $num
2752   150B DA            push d
2753   150C FA 05 00      lea d, [bp + 5] ; $num
2754   150F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2755   1512 FD 39         mov c, b ; And place it into C
2756   1514 2A            mov b, [d] ; Lower Word in B
2757   1515             ; START FACTORS
2758   1515 D7            push a
2759   1516 11            mov a, b
2760   1517 26 0A 00      mov b, $a
2761   151A AE            div a, b
2762   151B 27            mov b, a
2763   151C E4            pop a
2764   151D             ; END FACTORS
2765   151D E7            pop d
2766   151E FD 43         mov [d], b
2767   1520 28            mov b, c
2768   1521 FD 44 02 00   mov [d + 2], b
2769   1525             ;; i++; 
2770   1525 FA F5 FF      lea d, [bp + -11] ; $i
2771   1528 2A            mov b, [d]
2772   1529 FD 77         inc b
2773   152B FA F5 FF      lea d, [bp + -11] ; $i
2774   152E FD 43         mov [d], b
2775   1530 FD 7D         dec b
2776   1532 0A B8 14      jmp _while40_cond
2777   1535             _while40_exit:
2778   1535             ;; while (i > 0) { 
2779   1535             _while41_cond:
2780   1535 FA F5 FF      lea d, [bp + -11] ; $i
2781   1538 2A            mov b, [d]
2782   1539             ; START RELATIONAL
2783   1539 D7            push a
2784   153A 11            mov a, b
2785   153B 26 00 00      mov b, $0
2786   153E B0            cmp a, b
2787   153F FD 7F         sgt ; >
2788   1541 E4            pop a
2789   1542             ; END RELATIONAL
2790   1542 C0 00 00      cmp b, 0
2791   1545 C6 6E 15      je _while41_exit
2792   1548             _while41_block:
2793   1548             ;; i--; 
2794   1548 FA F5 FF      lea d, [bp + -11] ; $i
2795   154B 2A            mov b, [d]
2796   154C FD 7D         dec b
2797   154E FA F5 FF      lea d, [bp + -11] ; $i
2798   1551 FD 43         mov [d], b
2799   1553 FD 77         inc b
2800   1555             ;; putchar(digits[i]); 
2801   1555 FA F7 FF      lea d, [bp + -9] ; $digits
2802   1558 D7            push a
2803   1559 DA            push d
2804   155A FA F5 FF      lea d, [bp + -11] ; $i
2805   155D 2A            mov b, [d]
2806   155E E7            pop d
2807   155F 5A            add d, b
2808   1560 E4            pop a
2809   1561 32            mov bl, [d]
2810   1562 A7 00         mov bh, 0
2811   1564 DD            push bl
2812   1565 07 A1 1A      call putchar
2813   1568 51 01 00      add sp, 1
2814   156B 0A 35 15      jmp _while41_cond
2815   156E             _while41_exit:
2816   156E F9            leave
2817   156F 09            ret
2818   1570             
2819   1570             print_unsigned_long:
2820   1570 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2821   1573             ;; char digits[10]; 
2822   1573 52 0A 00      sub sp, 10 ; digits
2823   1576             ;; int i; 
2824   1576 52 02 00      sub sp, 2 ; i
2825   1579             ;; i = 0; 
2826   1579 FA F5 FF      lea d, [bp + -11] ; $i
2827   157C DA            push d
2828   157D 26 00 00      mov b, $0
2829   1580 E7            pop d
2830   1581 FD 43         mov [d], b
2831   1583             ;; if(num == 0){ 
2832   1583             _if42_cond:
2833   1583 FA 05 00      lea d, [bp + 5] ; $num
2834   1586 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2835   1589 FD 39         mov c, b ; And place it into C
2836   158B 2A            mov b, [d] ; Lower Word in B
2837   158C             ; START RELATIONAL
2838   158C D7            push a
2839   158D FD D8         push g
2840   158F 11            mov a, b
2841   1590 FD 7A         mov g, c
2842   1592 26 00 00      mov b, $0
2843   1595 38 00 00      mov c, 0
2844   1598 FD AF 00 00   cmp32 ga, cb
2844   159C 00 00 00 00 
2844   15A0 00 00 00 00 
2844   15A4 00 00 00 00 
2844   15A8 00 00 00 00 
2844   15AC 00 00 00 00 
2844   15B0 00 00 00 00 
2844   15B4 00 00 00 00 
2844   15B8 00 00 00 00 
2844   15BC 00 00 00 00 
2844   15C0 00 00 00 00 
2844   15C4 00 00 00 00 
2844   15C8 00 00 00 00 
2844   15CC 00 00 00 00 
2844   15D0 00 00 00 00 
2844   15D4 00 00 00 00 
2844   15D8 00 00 00 00 
2844   15DC 00 00 00 00 
2844   15E0 00 00 00 00 
2844   15E4 00 00 00 00 
2844   15E8 00 00 00 00 
2844   15EC 00 00 00 00 
2844   15F0 00 00 00 00 
2844   15F4 00 00 00 00 
2844   15F8 00 00 00 00 
2844   15FC 00 00 00 00 
2844   1600 00 00 00 00 
2844   1604 00 00 00 00 
2844   1608 00 00 00 00 
2844   160C 00 00 00 00 
2844   1610 00 00 00 00 
2844   1614 00 00 00 00 
2844   1618 00 00 00 00 
2844   161C 00 00 00 00 
2844   1620 00 00 00 00 
2844   1624 00 00 00 00 
2844   1628 00 00 00 00 
2844   162C 00 00 00 00 
2844   1630 00 00 00 00 
2844   1634 00 00 00 00 
2844   1638 00 00 00 00 
2844   163C 00 00 00 00 
2844   1640 00 00 00 00 
2844   1644 00 00 00 00 
2844   1648 00 00 00 00 
2844   164C 00 00 00 00 
2844   1650 00 00 00 00 
2844   1654 00 00 00 00 
2844   1658 00 00 00 00 
2844   165C 00 00 00 00 
2844   1660 00 00 00 00 
2844   1664 00 00 00 00 
2844   1668 00 00 00 00 
2844   166C 00 00 00 00 
2844   1670 00 00 00 00 
2844   1674 00 00 00 00 
2844   1678 00 00 00 00 
2844   167C 00 00 00 00 
2844   1680 00 00 00 00 
2844   1684 00 00 00 00 
2844   1688 00 00 00 00 
2844   168C 00 00 00 00 
2844   1690 00 00 00 00 
2844   1694 00 00 00 00 
2844   1698 00 
2845   1699 FD 71         seq ; ==
2846   169B FD F1         pop g
2847   169D E4            pop a
2848   169E             ; END RELATIONAL
2849   169E C0 00 00      cmp b, 0
2850   16A1 C6 B3 16      je _if42_exit
2851   16A4             _if42_true:
2852   16A4             ;; putchar('0'); 
2853   16A4 26 30 00      mov b, $30
2854   16A7 DD            push bl
2855   16A8 07 A1 1A      call putchar
2856   16AB 51 01 00      add sp, 1
2857   16AE             ;; return; 
2858   16AE F9            leave
2859   16AF 09            ret
2860   16B0 0A B3 16      jmp _if42_exit
2861   16B3             _if42_exit:
2862   16B3             ;; while (num > 0) { 
2863   16B3             _while43_cond:
2864   16B3 FA 05 00      lea d, [bp + 5] ; $num
2865   16B6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2866   16B9 FD 39         mov c, b ; And place it into C
2867   16BB 2A            mov b, [d] ; Lower Word in B
2868   16BC             ; START RELATIONAL
2869   16BC D7            push a
2870   16BD FD D8         push g
2871   16BF 11            mov a, b
2872   16C0 FD 7A         mov g, c
2873   16C2 26 00 00      mov b, $0
2874   16C5 38 00 00      mov c, 0
2875   16C8 FD 81         sgu
2876   16CA FD F1         pop g
2877   16CC E4            pop a
2878   16CD             ; END RELATIONAL
2879   16CD C0 00 00      cmp b, 0
2880   16D0 C6 30 17      je _while43_exit
2881   16D3             _while43_block:
2882   16D3             ;; digits[i] = '0' + (num % 10); 
2883   16D3 FA F7 FF      lea d, [bp + -9] ; $digits
2884   16D6 D7            push a
2885   16D7 DA            push d
2886   16D8 FA F5 FF      lea d, [bp + -11] ; $i
2887   16DB 2A            mov b, [d]
2888   16DC E7            pop d
2889   16DD 5A            add d, b
2890   16DE E4            pop a
2891   16DF DA            push d
2892   16E0 26 30 00      mov b, $30
2893   16E3             ; START TERMS
2894   16E3 D7            push a
2895   16E4 11            mov a, b
2896   16E5 FA 05 00      lea d, [bp + 5] ; $num
2897   16E8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2898   16EB FD 39         mov c, b ; And place it into C
2899   16ED 2A            mov b, [d] ; Lower Word in B
2900   16EE             ; START FACTORS
2901   16EE D7            push a
2902   16EF 11            mov a, b
2903   16F0 26 0A 00      mov b, $a
2904   16F3 AE            div a, b ; 
2905   16F4 11            mov a, b
2906   16F5 27            mov b, a
2907   16F6 E4            pop a
2908   16F7             ; END FACTORS
2909   16F7 54            add a, b
2910   16F8 D7            push a
2911   16F9 FD 12         mov a, g
2912   16FB 28            mov b, c
2913   16FC 5C            adc a, b
2914   16FD 39            mov c, a
2915   16FE E5            pop b
2916   16FF E4            pop a
2917   1700             ; END TERMS
2918   1700 E7            pop d
2919   1701 FD 3E         mov [d], bl
2920   1703             ;; num = num / 10; 
2921   1703 FA 05 00      lea d, [bp + 5] ; $num
2922   1706 DA            push d
2923   1707 FA 05 00      lea d, [bp + 5] ; $num
2924   170A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2925   170D FD 39         mov c, b ; And place it into C
2926   170F 2A            mov b, [d] ; Lower Word in B
2927   1710             ; START FACTORS
2928   1710 D7            push a
2929   1711 11            mov a, b
2930   1712 26 0A 00      mov b, $a
2931   1715 AE            div a, b
2932   1716 27            mov b, a
2933   1717 E4            pop a
2934   1718             ; END FACTORS
2935   1718 E7            pop d
2936   1719 FD 43         mov [d], b
2937   171B 28            mov b, c
2938   171C FD 44 02 00   mov [d + 2], b
2939   1720             ;; i++; 
2940   1720 FA F5 FF      lea d, [bp + -11] ; $i
2941   1723 2A            mov b, [d]
2942   1724 FD 77         inc b
2943   1726 FA F5 FF      lea d, [bp + -11] ; $i
2944   1729 FD 43         mov [d], b
2945   172B FD 7D         dec b
2946   172D 0A B3 16      jmp _while43_cond
2947   1730             _while43_exit:
2948   1730             ;; while (i > 0) { 
2949   1730             _while44_cond:
2950   1730 FA F5 FF      lea d, [bp + -11] ; $i
2951   1733 2A            mov b, [d]
2952   1734             ; START RELATIONAL
2953   1734 D7            push a
2954   1735 11            mov a, b
2955   1736 26 00 00      mov b, $0
2956   1739 B0            cmp a, b
2957   173A FD 7F         sgt ; >
2958   173C E4            pop a
2959   173D             ; END RELATIONAL
2960   173D C0 00 00      cmp b, 0
2961   1740 C6 69 17      je _while44_exit
2962   1743             _while44_block:
2963   1743             ;; i--; 
2964   1743 FA F5 FF      lea d, [bp + -11] ; $i
2965   1746 2A            mov b, [d]
2966   1747 FD 7D         dec b
2967   1749 FA F5 FF      lea d, [bp + -11] ; $i
2968   174C FD 43         mov [d], b
2969   174E FD 77         inc b
2970   1750             ;; putchar(digits[i]); 
2971   1750 FA F7 FF      lea d, [bp + -9] ; $digits
2972   1753 D7            push a
2973   1754 DA            push d
2974   1755 FA F5 FF      lea d, [bp + -11] ; $i
2975   1758 2A            mov b, [d]
2976   1759 E7            pop d
2977   175A 5A            add d, b
2978   175B E4            pop a
2979   175C 32            mov bl, [d]
2980   175D A7 00         mov bh, 0
2981   175F DD            push bl
2982   1760 07 A1 1A      call putchar
2983   1763 51 01 00      add sp, 1
2984   1766 0A 30 17      jmp _while44_cond
2985   1769             _while44_exit:
2986   1769 F9            leave
2987   176A 09            ret
2988   176B             
2989   176B             sprint_unsigned:
2990   176B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2991   176E             ;; char digits[5]; 
2992   176E 52 05 00      sub sp, 5 ; digits
2993   1771             ;; int i; 
2994   1771 52 02 00      sub sp, 2 ; i
2995   1774             ;; int len = 0; 
2996   1774 52 02 00      sub sp, 2 ; len
2997   1777             ; --- START LOCAL VAR INITIALIZATION
2998   1777 FA F8 FF      lea d, [bp + -8] ; $len
2999   177A DA            push d
3000   177B 26 00 00      mov b, $0
3001   177E E7            pop d
3002   177F FD 43         mov [d], b
3003   1781             ; --- END LOCAL VAR INITIALIZATION
3004   1781             ;; i = 0; 
3005   1781 FA FA FF      lea d, [bp + -6] ; $i
3006   1784 DA            push d
3007   1785 26 00 00      mov b, $0
3008   1788 E7            pop d
3009   1789 FD 43         mov [d], b
3010   178B             ;; if(num == 0){ 
3011   178B             _if45_cond:
3012   178B FA 07 00      lea d, [bp + 7] ; $num
3013   178E 2A            mov b, [d]
3014   178F             ; START RELATIONAL
3015   178F D7            push a
3016   1790 11            mov a, b
3017   1791 26 00 00      mov b, $0
3018   1794 B0            cmp a, b
3019   1795 FD 71         seq ; ==
3020   1797 E4            pop a
3021   1798             ; END RELATIONAL
3022   1798 C0 00 00      cmp b, 0
3023   179B C6 BA 17      je _if45_exit
3024   179E             _if45_true:
3025   179E             ;; *dest++ = '0'; 
3026   179E FA 05 00      lea d, [bp + 5] ; $dest
3027   17A1 2A            mov b, [d]
3028   17A2 FD 77         inc b
3029   17A4 FA 05 00      lea d, [bp + 5] ; $dest
3030   17A7 FD 43         mov [d], b
3031   17A9 FD 7D         dec b
3032   17AB D8            push b
3033   17AC 26 30 00      mov b, $30
3034   17AF E7            pop d
3035   17B0 FD 3E         mov [d], bl
3036   17B2             ;; return 1; 
3037   17B2 26 01 00      mov b, $1
3038   17B5 F9            leave
3039   17B6 09            ret
3040   17B7 0A BA 17      jmp _if45_exit
3041   17BA             _if45_exit:
3042   17BA             ;; while (num > 0) { 
3043   17BA             _while46_cond:
3044   17BA FA 07 00      lea d, [bp + 7] ; $num
3045   17BD 2A            mov b, [d]
3046   17BE             ; START RELATIONAL
3047   17BE D7            push a
3048   17BF 11            mov a, b
3049   17C0 26 00 00      mov b, $0
3050   17C3 B0            cmp a, b
3051   17C4 FD 81         sgu ; > (unsigned)
3052   17C6 E4            pop a
3053   17C7             ; END RELATIONAL
3054   17C7 C0 00 00      cmp b, 0
3055   17CA C6 14 18      je _while46_exit
3056   17CD             _while46_block:
3057   17CD             ;; digits[i] = '0' + (num % 10); 
3058   17CD FA FC FF      lea d, [bp + -4] ; $digits
3059   17D0 D7            push a
3060   17D1 DA            push d
3061   17D2 FA FA FF      lea d, [bp + -6] ; $i
3062   17D5 2A            mov b, [d]
3063   17D6 E7            pop d
3064   17D7 5A            add d, b
3065   17D8 E4            pop a
3066   17D9 DA            push d
3067   17DA 26 30 00      mov b, $30
3068   17DD             ; START TERMS
3069   17DD D7            push a
3070   17DE 11            mov a, b
3071   17DF FA 07 00      lea d, [bp + 7] ; $num
3072   17E2 2A            mov b, [d]
3073   17E3             ; START FACTORS
3074   17E3 D7            push a
3075   17E4 11            mov a, b
3076   17E5 26 0A 00      mov b, $a
3077   17E8 AE            div a, b ; 
3078   17E9 11            mov a, b
3079   17EA 27            mov b, a
3080   17EB E4            pop a
3081   17EC             ; END FACTORS
3082   17EC 56            add b, a
3083   17ED E4            pop a
3084   17EE             ; END TERMS
3085   17EE E7            pop d
3086   17EF FD 3E         mov [d], bl
3087   17F1             ;; num = num / 10; 
3088   17F1 FA 07 00      lea d, [bp + 7] ; $num
3089   17F4 DA            push d
3090   17F5 FA 07 00      lea d, [bp + 7] ; $num
3091   17F8 2A            mov b, [d]
3092   17F9             ; START FACTORS
3093   17F9 D7            push a
3094   17FA 11            mov a, b
3095   17FB 26 0A 00      mov b, $a
3096   17FE AE            div a, b
3097   17FF 27            mov b, a
3098   1800 E4            pop a
3099   1801             ; END FACTORS
3100   1801 E7            pop d
3101   1802 FD 43         mov [d], b
3102   1804             ;; i++; 
3103   1804 FA FA FF      lea d, [bp + -6] ; $i
3104   1807 2A            mov b, [d]
3105   1808 FD 77         inc b
3106   180A FA FA FF      lea d, [bp + -6] ; $i
3107   180D FD 43         mov [d], b
3108   180F FD 7D         dec b
3109   1811 0A BA 17      jmp _while46_cond
3110   1814             _while46_exit:
3111   1814             ;; while (i > 0) { 
3112   1814             _while47_cond:
3113   1814 FA FA FF      lea d, [bp + -6] ; $i
3114   1817 2A            mov b, [d]
3115   1818             ; START RELATIONAL
3116   1818 D7            push a
3117   1819 11            mov a, b
3118   181A 26 00 00      mov b, $0
3119   181D B0            cmp a, b
3120   181E FD 7F         sgt ; >
3121   1820 E4            pop a
3122   1821             ; END RELATIONAL
3123   1821 C0 00 00      cmp b, 0
3124   1824 C6 64 18      je _while47_exit
3125   1827             _while47_block:
3126   1827             ;; i--; 
3127   1827 FA FA FF      lea d, [bp + -6] ; $i
3128   182A 2A            mov b, [d]
3129   182B FD 7D         dec b
3130   182D FA FA FF      lea d, [bp + -6] ; $i
3131   1830 FD 43         mov [d], b
3132   1832 FD 77         inc b
3133   1834             ;; *dest++ = digits[i]; 
3134   1834 FA 05 00      lea d, [bp + 5] ; $dest
3135   1837 2A            mov b, [d]
3136   1838 FD 77         inc b
3137   183A FA 05 00      lea d, [bp + 5] ; $dest
3138   183D FD 43         mov [d], b
3139   183F FD 7D         dec b
3140   1841 D8            push b
3141   1842 FA FC FF      lea d, [bp + -4] ; $digits
3142   1845 D7            push a
3143   1846 DA            push d
3144   1847 FA FA FF      lea d, [bp + -6] ; $i
3145   184A 2A            mov b, [d]
3146   184B E7            pop d
3147   184C 5A            add d, b
3148   184D E4            pop a
3149   184E 32            mov bl, [d]
3150   184F A7 00         mov bh, 0
3151   1851 E7            pop d
3152   1852 FD 3E         mov [d], bl
3153   1854             ;; len++; 
3154   1854 FA F8 FF      lea d, [bp + -8] ; $len
3155   1857 2A            mov b, [d]
3156   1858 FD 77         inc b
3157   185A FA F8 FF      lea d, [bp + -8] ; $len
3158   185D FD 43         mov [d], b
3159   185F FD 7D         dec b
3160   1861 0A 14 18      jmp _while47_cond
3161   1864             _while47_exit:
3162   1864             ;; *dest = '\0'; 
3163   1864 FA 05 00      lea d, [bp + 5] ; $dest
3164   1867 2A            mov b, [d]
3165   1868 D8            push b
3166   1869 26 00 00      mov b, $0
3167   186C E7            pop d
3168   186D FD 3E         mov [d], bl
3169   186F             ;; return len; 
3170   186F FA F8 FF      lea d, [bp + -8] ; $len
3171   1872 2A            mov b, [d]
3172   1873 F9            leave
3173   1874 09            ret
3174   1875             
3175   1875             print_unsigned:
3176   1875 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3177   1878             ;; char digits[5]; 
3178   1878 52 05 00      sub sp, 5 ; digits
3179   187B             ;; int i; 
3180   187B 52 02 00      sub sp, 2 ; i
3181   187E             ;; i = 0; 
3182   187E FA FA FF      lea d, [bp + -6] ; $i
3183   1881 DA            push d
3184   1882 26 00 00      mov b, $0
3185   1885 E7            pop d
3186   1886 FD 43         mov [d], b
3187   1888             ;; if(num == 0){ 
3188   1888             _if48_cond:
3189   1888 FA 05 00      lea d, [bp + 5] ; $num
3190   188B 2A            mov b, [d]
3191   188C             ; START RELATIONAL
3192   188C D7            push a
3193   188D 11            mov a, b
3194   188E 26 00 00      mov b, $0
3195   1891 B0            cmp a, b
3196   1892 FD 71         seq ; ==
3197   1894 E4            pop a
3198   1895             ; END RELATIONAL
3199   1895 C0 00 00      cmp b, 0
3200   1898 C6 AA 18      je _if48_exit
3201   189B             _if48_true:
3202   189B             ;; putchar('0'); 
3203   189B 26 30 00      mov b, $30
3204   189E DD            push bl
3205   189F 07 A1 1A      call putchar
3206   18A2 51 01 00      add sp, 1
3207   18A5             ;; return; 
3208   18A5 F9            leave
3209   18A6 09            ret
3210   18A7 0A AA 18      jmp _if48_exit
3211   18AA             _if48_exit:
3212   18AA             ;; while (num > 0) { 
3213   18AA             _while49_cond:
3214   18AA FA 05 00      lea d, [bp + 5] ; $num
3215   18AD 2A            mov b, [d]
3216   18AE             ; START RELATIONAL
3217   18AE D7            push a
3218   18AF 11            mov a, b
3219   18B0 26 00 00      mov b, $0
3220   18B3 B0            cmp a, b
3221   18B4 FD 81         sgu ; > (unsigned)
3222   18B6 E4            pop a
3223   18B7             ; END RELATIONAL
3224   18B7 C0 00 00      cmp b, 0
3225   18BA C6 04 19      je _while49_exit
3226   18BD             _while49_block:
3227   18BD             ;; digits[i] = '0' + (num % 10); 
3228   18BD FA FC FF      lea d, [bp + -4] ; $digits
3229   18C0 D7            push a
3230   18C1 DA            push d
3231   18C2 FA FA FF      lea d, [bp + -6] ; $i
3232   18C5 2A            mov b, [d]
3233   18C6 E7            pop d
3234   18C7 5A            add d, b
3235   18C8 E4            pop a
3236   18C9 DA            push d
3237   18CA 26 30 00      mov b, $30
3238   18CD             ; START TERMS
3239   18CD D7            push a
3240   18CE 11            mov a, b
3241   18CF FA 05 00      lea d, [bp + 5] ; $num
3242   18D2 2A            mov b, [d]
3243   18D3             ; START FACTORS
3244   18D3 D7            push a
3245   18D4 11            mov a, b
3246   18D5 26 0A 00      mov b, $a
3247   18D8 AE            div a, b ; 
3248   18D9 11            mov a, b
3249   18DA 27            mov b, a
3250   18DB E4            pop a
3251   18DC             ; END FACTORS
3252   18DC 56            add b, a
3253   18DD E4            pop a
3254   18DE             ; END TERMS
3255   18DE E7            pop d
3256   18DF FD 3E         mov [d], bl
3257   18E1             ;; num = num / 10; 
3258   18E1 FA 05 00      lea d, [bp + 5] ; $num
3259   18E4 DA            push d
3260   18E5 FA 05 00      lea d, [bp + 5] ; $num
3261   18E8 2A            mov b, [d]
3262   18E9             ; START FACTORS
3263   18E9 D7            push a
3264   18EA 11            mov a, b
3265   18EB 26 0A 00      mov b, $a
3266   18EE AE            div a, b
3267   18EF 27            mov b, a
3268   18F0 E4            pop a
3269   18F1             ; END FACTORS
3270   18F1 E7            pop d
3271   18F2 FD 43         mov [d], b
3272   18F4             ;; i++; 
3273   18F4 FA FA FF      lea d, [bp + -6] ; $i
3274   18F7 2A            mov b, [d]
3275   18F8 FD 77         inc b
3276   18FA FA FA FF      lea d, [bp + -6] ; $i
3277   18FD FD 43         mov [d], b
3278   18FF FD 7D         dec b
3279   1901 0A AA 18      jmp _while49_cond
3280   1904             _while49_exit:
3281   1904             ;; while (i > 0) { 
3282   1904             _while50_cond:
3283   1904 FA FA FF      lea d, [bp + -6] ; $i
3284   1907 2A            mov b, [d]
3285   1908             ; START RELATIONAL
3286   1908 D7            push a
3287   1909 11            mov a, b
3288   190A 26 00 00      mov b, $0
3289   190D B0            cmp a, b
3290   190E FD 7F         sgt ; >
3291   1910 E4            pop a
3292   1911             ; END RELATIONAL
3293   1911 C0 00 00      cmp b, 0
3294   1914 C6 3D 19      je _while50_exit
3295   1917             _while50_block:
3296   1917             ;; i--; 
3297   1917 FA FA FF      lea d, [bp + -6] ; $i
3298   191A 2A            mov b, [d]
3299   191B FD 7D         dec b
3300   191D FA FA FF      lea d, [bp + -6] ; $i
3301   1920 FD 43         mov [d], b
3302   1922 FD 77         inc b
3303   1924             ;; putchar(digits[i]); 
3304   1924 FA FC FF      lea d, [bp + -4] ; $digits
3305   1927 D7            push a
3306   1928 DA            push d
3307   1929 FA FA FF      lea d, [bp + -6] ; $i
3308   192C 2A            mov b, [d]
3309   192D E7            pop d
3310   192E 5A            add d, b
3311   192F E4            pop a
3312   1930 32            mov bl, [d]
3313   1931 A7 00         mov bh, 0
3314   1933 DD            push bl
3315   1934 07 A1 1A      call putchar
3316   1937 51 01 00      add sp, 1
3317   193A 0A 04 19      jmp _while50_cond
3318   193D             _while50_exit:
3319   193D F9            leave
3320   193E 09            ret
3321   193F             
3322   193F             sprint_signed:
3323   193F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3324   1942             ;; char digits[5]; 
3325   1942 52 05 00      sub sp, 5 ; digits
3326   1945             ;; int i = 0; 
3327   1945 52 02 00      sub sp, 2 ; i
3328   1948             ; --- START LOCAL VAR INITIALIZATION
3329   1948 FA FA FF      lea d, [bp + -6] ; $i
3330   194B DA            push d
3331   194C 26 00 00      mov b, $0
3332   194F E7            pop d
3333   1950 FD 43         mov [d], b
3334   1952             ; --- END LOCAL VAR INITIALIZATION
3335   1952             ;; int len = 0; 
3336   1952 52 02 00      sub sp, 2 ; len
3337   1955             ; --- START LOCAL VAR INITIALIZATION
3338   1955 FA F8 FF      lea d, [bp + -8] ; $len
3339   1958 DA            push d
3340   1959 26 00 00      mov b, $0
3341   195C E7            pop d
3342   195D FD 43         mov [d], b
3343   195F             ; --- END LOCAL VAR INITIALIZATION
3344   195F             ;; if (num < 0) { 
3345   195F             _if51_cond:
3346   195F FA 07 00      lea d, [bp + 7] ; $num
3347   1962 2A            mov b, [d]
3348   1963             ; START RELATIONAL
3349   1963 D7            push a
3350   1964 11            mov a, b
3351   1965 26 00 00      mov b, $0
3352   1968 B0            cmp a, b
3353   1969 FD 73         slt ; < (signed)
3354   196B E4            pop a
3355   196C             ; END RELATIONAL
3356   196C C0 00 00      cmp b, 0
3357   196F C6 A3 19      je _if51_else
3358   1972             _if51_true:
3359   1972             ;; *dest++ = '-'; 
3360   1972 FA 05 00      lea d, [bp + 5] ; $dest
3361   1975 2A            mov b, [d]
3362   1976 FD 77         inc b
3363   1978 FA 05 00      lea d, [bp + 5] ; $dest
3364   197B FD 43         mov [d], b
3365   197D FD 7D         dec b
3366   197F D8            push b
3367   1980 26 2D 00      mov b, $2d
3368   1983 E7            pop d
3369   1984 FD 3E         mov [d], bl
3370   1986             ;; num = -num; 
3371   1986 FA 07 00      lea d, [bp + 7] ; $num
3372   1989 DA            push d
3373   198A FA 07 00      lea d, [bp + 7] ; $num
3374   198D 2A            mov b, [d]
3375   198E FD 97         neg b
3376   1990 E7            pop d
3377   1991 FD 43         mov [d], b
3378   1993             ;; len++; 
3379   1993 FA F8 FF      lea d, [bp + -8] ; $len
3380   1996 2A            mov b, [d]
3381   1997 FD 77         inc b
3382   1999 FA F8 FF      lea d, [bp + -8] ; $len
3383   199C FD 43         mov [d], b
3384   199E FD 7D         dec b
3385   19A0 0A DD 19      jmp _if51_exit
3386   19A3             _if51_else:
3387   19A3             ;; if (num == 0) { 
3388   19A3             _if52_cond:
3389   19A3 FA 07 00      lea d, [bp + 7] ; $num
3390   19A6 2A            mov b, [d]
3391   19A7             ; START RELATIONAL
3392   19A7 D7            push a
3393   19A8 11            mov a, b
3394   19A9 26 00 00      mov b, $0
3395   19AC B0            cmp a, b
3396   19AD FD 71         seq ; ==
3397   19AF E4            pop a
3398   19B0             ; END RELATIONAL
3399   19B0 C0 00 00      cmp b, 0
3400   19B3 C6 DD 19      je _if52_exit
3401   19B6             _if52_true:
3402   19B6             ;; *dest++ = '0'; 
3403   19B6 FA 05 00      lea d, [bp + 5] ; $dest
3404   19B9 2A            mov b, [d]
3405   19BA FD 77         inc b
3406   19BC FA 05 00      lea d, [bp + 5] ; $dest
3407   19BF FD 43         mov [d], b
3408   19C1 FD 7D         dec b
3409   19C3 D8            push b
3410   19C4 26 30 00      mov b, $30
3411   19C7 E7            pop d
3412   19C8 FD 3E         mov [d], bl
3413   19CA             ;; *dest = '\0'; 
3414   19CA FA 05 00      lea d, [bp + 5] ; $dest
3415   19CD 2A            mov b, [d]
3416   19CE D8            push b
3417   19CF 26 00 00      mov b, $0
3418   19D2 E7            pop d
3419   19D3 FD 3E         mov [d], bl
3420   19D5             ;; return 1; 
3421   19D5 26 01 00      mov b, $1
3422   19D8 F9            leave
3423   19D9 09            ret
3424   19DA 0A DD 19      jmp _if52_exit
3425   19DD             _if52_exit:
3426   19DD             _if51_exit:
3427   19DD             ;; while (num > 0) { 
3428   19DD             _while53_cond:
3429   19DD FA 07 00      lea d, [bp + 7] ; $num
3430   19E0 2A            mov b, [d]
3431   19E1             ; START RELATIONAL
3432   19E1 D7            push a
3433   19E2 11            mov a, b
3434   19E3 26 00 00      mov b, $0
3435   19E6 B0            cmp a, b
3436   19E7 FD 7F         sgt ; >
3437   19E9 E4            pop a
3438   19EA             ; END RELATIONAL
3439   19EA C0 00 00      cmp b, 0
3440   19ED C6 37 1A      je _while53_exit
3441   19F0             _while53_block:
3442   19F0             ;; digits[i] = '0' + (num % 10); 
3443   19F0 FA FC FF      lea d, [bp + -4] ; $digits
3444   19F3 D7            push a
3445   19F4 DA            push d
3446   19F5 FA FA FF      lea d, [bp + -6] ; $i
3447   19F8 2A            mov b, [d]
3448   19F9 E7            pop d
3449   19FA 5A            add d, b
3450   19FB E4            pop a
3451   19FC DA            push d
3452   19FD 26 30 00      mov b, $30
3453   1A00             ; START TERMS
3454   1A00 D7            push a
3455   1A01 11            mov a, b
3456   1A02 FA 07 00      lea d, [bp + 7] ; $num
3457   1A05 2A            mov b, [d]
3458   1A06             ; START FACTORS
3459   1A06 D7            push a
3460   1A07 11            mov a, b
3461   1A08 26 0A 00      mov b, $a
3462   1A0B AE            div a, b ; 
3463   1A0C 11            mov a, b
3464   1A0D 27            mov b, a
3465   1A0E E4            pop a
3466   1A0F             ; END FACTORS
3467   1A0F 56            add b, a
3468   1A10 E4            pop a
3469   1A11             ; END TERMS
3470   1A11 E7            pop d
3471   1A12 FD 3E         mov [d], bl
3472   1A14             ;; num = num / 10; 
3473   1A14 FA 07 00      lea d, [bp + 7] ; $num
3474   1A17 DA            push d
3475   1A18 FA 07 00      lea d, [bp + 7] ; $num
3476   1A1B 2A            mov b, [d]
3477   1A1C             ; START FACTORS
3478   1A1C D7            push a
3479   1A1D 11            mov a, b
3480   1A1E 26 0A 00      mov b, $a
3481   1A21 AE            div a, b
3482   1A22 27            mov b, a
3483   1A23 E4            pop a
3484   1A24             ; END FACTORS
3485   1A24 E7            pop d
3486   1A25 FD 43         mov [d], b
3487   1A27             ;; i++; 
3488   1A27 FA FA FF      lea d, [bp + -6] ; $i
3489   1A2A 2A            mov b, [d]
3490   1A2B FD 77         inc b
3491   1A2D FA FA FF      lea d, [bp + -6] ; $i
3492   1A30 FD 43         mov [d], b
3493   1A32 FD 7D         dec b
3494   1A34 0A DD 19      jmp _while53_cond
3495   1A37             _while53_exit:
3496   1A37             ;; while (i > 0) { 
3497   1A37             _while54_cond:
3498   1A37 FA FA FF      lea d, [bp + -6] ; $i
3499   1A3A 2A            mov b, [d]
3500   1A3B             ; START RELATIONAL
3501   1A3B D7            push a
3502   1A3C 11            mov a, b
3503   1A3D 26 00 00      mov b, $0
3504   1A40 B0            cmp a, b
3505   1A41 FD 7F         sgt ; >
3506   1A43 E4            pop a
3507   1A44             ; END RELATIONAL
3508   1A44 C0 00 00      cmp b, 0
3509   1A47 C6 87 1A      je _while54_exit
3510   1A4A             _while54_block:
3511   1A4A             ;; i--; 
3512   1A4A FA FA FF      lea d, [bp + -6] ; $i
3513   1A4D 2A            mov b, [d]
3514   1A4E FD 7D         dec b
3515   1A50 FA FA FF      lea d, [bp + -6] ; $i
3516   1A53 FD 43         mov [d], b
3517   1A55 FD 77         inc b
3518   1A57             ;; *dest++ = digits[i]; 
3519   1A57 FA 05 00      lea d, [bp + 5] ; $dest
3520   1A5A 2A            mov b, [d]
3521   1A5B FD 77         inc b
3522   1A5D FA 05 00      lea d, [bp + 5] ; $dest
3523   1A60 FD 43         mov [d], b
3524   1A62 FD 7D         dec b
3525   1A64 D8            push b
3526   1A65 FA FC FF      lea d, [bp + -4] ; $digits
3527   1A68 D7            push a
3528   1A69 DA            push d
3529   1A6A FA FA FF      lea d, [bp + -6] ; $i
3530   1A6D 2A            mov b, [d]
3531   1A6E E7            pop d
3532   1A6F 5A            add d, b
3533   1A70 E4            pop a
3534   1A71 32            mov bl, [d]
3535   1A72 A7 00         mov bh, 0
3536   1A74 E7            pop d
3537   1A75 FD 3E         mov [d], bl
3538   1A77             ;; len++; 
3539   1A77 FA F8 FF      lea d, [bp + -8] ; $len
3540   1A7A 2A            mov b, [d]
3541   1A7B FD 77         inc b
3542   1A7D FA F8 FF      lea d, [bp + -8] ; $len
3543   1A80 FD 43         mov [d], b
3544   1A82 FD 7D         dec b
3545   1A84 0A 37 1A      jmp _while54_cond
3546   1A87             _while54_exit:
3547   1A87             ;; *dest = '\0'; 
3548   1A87 FA 05 00      lea d, [bp + 5] ; $dest
3549   1A8A 2A            mov b, [d]
3550   1A8B D8            push b
3551   1A8C 26 00 00      mov b, $0
3552   1A8F E7            pop d
3553   1A90 FD 3E         mov [d], bl
3554   1A92             ;; return len; 
3555   1A92 FA F8 FF      lea d, [bp + -8] ; $len
3556   1A95 2A            mov b, [d]
3557   1A96 F9            leave
3558   1A97 09            ret
3559   1A98             
3560   1A98             date:
3561   1A98 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3562   1A9B             
3563   1A9B             ; --- BEGIN INLINE ASM BLOCK
3564   1A9B 19 00         mov al, 0 
3565   1A9D 05 07         syscall sys_datetime
3566   1A9F             ; --- END INLINE ASM BLOCK
3567   1A9F             
3568   1A9F F9            leave
3569   1AA0 09            ret
3570   1AA1             
3571   1AA1             putchar:
3572   1AA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3573   1AA4             
3574   1AA4             ; --- BEGIN INLINE ASM BLOCK
3575   1AA4 FA 05 00      lea d, [bp + 5] ; $c
3576   1AA7 1E            mov al, [d]
3577   1AA8 23            mov ah, al
3578   1AA9 07 32 1C      call _putchar
3579   1AAC             ; --- END INLINE ASM BLOCK
3580   1AAC             
3581   1AAC F9            leave
3582   1AAD 09            ret
3583   1AAE             
3584   1AAE             getchar:
3585   1AAE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3586   1AB1             ;; char c; 
3587   1AB1 52 01 00      sub sp, 1 ; c
3588   1AB4             
3589   1AB4             ; --- BEGIN INLINE ASM BLOCK
3590   1AB4 07 2B 1C      call getch
3591   1AB7 1A            mov al, ah
3592   1AB8 FA 00 00      lea d, [bp + 0] ; $c
3593   1ABB 3E            mov [d], al
3594   1ABC             ; --- END INLINE ASM BLOCK
3595   1ABC             
3596   1ABC             ;; return c; 
3597   1ABC FA 00 00      lea d, [bp + 0] ; $c
3598   1ABF 32            mov bl, [d]
3599   1AC0 A7 00         mov bh, 0
3600   1AC2 F9            leave
3601   1AC3 09            ret
3602   1AC4             
3603   1AC4             scann:
3604   1AC4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3605   1AC7             ;; int m; 
3606   1AC7 52 02 00      sub sp, 2 ; m
3607   1ACA             
3608   1ACA             ; --- BEGIN INLINE ASM BLOCK
3609   1ACA 07 76 1E      call scan_u16d
3610   1ACD FA FF FF      lea d, [bp + -1] ; $m
3611   1AD0 43            mov [d], a
3612   1AD1             ; --- END INLINE ASM BLOCK
3613   1AD1             
3614   1AD1             ;; return m; 
3615   1AD1 FA FF FF      lea d, [bp + -1] ; $m
3616   1AD4 2A            mov b, [d]
3617   1AD5 F9            leave
3618   1AD6 09            ret
3619   1AD7             
3620   1AD7             puts:
3621   1AD7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3622   1ADA             
3623   1ADA             ; --- BEGIN INLINE ASM BLOCK
3624   1ADA FA 05 00      lea d, [bp + 5] ; $s
3625   1ADD 15            mov a, [d]
3626   1ADE 3C            mov d, a
3627   1ADF 07 7C 1D      call _puts
3628   1AE2 10 00 0A      mov a, $0A00
3629   1AE5 05 03         syscall sys_io
3630   1AE7             ; --- END INLINE ASM BLOCK
3631   1AE7             
3632   1AE7 F9            leave
3633   1AE8 09            ret
3634   1AE9             
3635   1AE9             print:
3636   1AE9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3637   1AEC             
3638   1AEC             ; --- BEGIN INLINE ASM BLOCK
3639   1AEC FA 05 00      lea d, [bp + 5] ; $s
3640   1AEF FD 2A         mov d, [d]
3641   1AF1 07 7C 1D      call _puts
3642   1AF4             ; --- END INLINE ASM BLOCK
3643   1AF4             
3644   1AF4 F9            leave
3645   1AF5 09            ret
3646   1AF6             
3647   1AF6             getparam:
3648   1AF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3649   1AF9             ;; char data; 
3650   1AF9 52 01 00      sub sp, 1 ; data
3651   1AFC             
3652   1AFC             ; --- BEGIN INLINE ASM BLOCK
3653   1AFC 19 04         mov al, 4
3654   1AFE FA 05 00      lea d, [bp + 5] ; $address
3655   1B01 FD 2A         mov d, [d]
3656   1B03 05 0C         syscall sys_system
3657   1B05 FA 00 00      lea d, [bp + 0] ; $data
3658   1B08 FD 3E         mov [d], bl
3659   1B0A             ; --- END INLINE ASM BLOCK
3660   1B0A             
3661   1B0A             ;; return data; 
3662   1B0A FA 00 00      lea d, [bp + 0] ; $data
3663   1B0D 32            mov bl, [d]
3664   1B0E A7 00         mov bh, 0
3665   1B10 F9            leave
3666   1B11 09            ret
3667   1B12             
3668   1B12             clear:
3669   1B12 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3670   1B15             ;; print("\033[2J\033[H"); 
3671   1B15 26 52 20      mov b, _s5 ; "\033[2J\033[H"
3672   1B18 FD AB         swp b
3673   1B1A D8            push b
3674   1B1B 07 E9 1A      call print
3675   1B1E 51 02 00      add sp, 2
3676   1B21 F9            leave
3677   1B22 09            ret
3678   1B23             
3679   1B23             abs:
3680   1B23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3681   1B26             ;; return i < 0 ? -i : i; 
3682   1B26             _ternary55_cond:
3683   1B26 FA 05 00      lea d, [bp + 5] ; $i
3684   1B29 2A            mov b, [d]
3685   1B2A             ; START RELATIONAL
3686   1B2A D7            push a
3687   1B2B 11            mov a, b
3688   1B2C 26 00 00      mov b, $0
3689   1B2F B0            cmp a, b
3690   1B30 FD 73         slt ; < (signed)
3691   1B32 E4            pop a
3692   1B33             ; END RELATIONAL
3693   1B33 C0 00 00      cmp b, 0
3694   1B36 C6 42 1B      je _ternary55_false
3695   1B39             _ternary55_true:
3696   1B39 FA 05 00      lea d, [bp + 5] ; $i
3697   1B3C 2A            mov b, [d]
3698   1B3D FD 97         neg b
3699   1B3F 0A 46 1B      jmp _ternary55_exit
3700   1B42             _ternary55_false:
3701   1B42 FA 05 00      lea d, [bp + 5] ; $i
3702   1B45 2A            mov b, [d]
3703   1B46             _ternary55_exit:
3704   1B46 F9            leave
3705   1B47 09            ret
3706   1B48             
3707   1B48             include_stdio_asm:
3708   1B48 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3709   1B4B             
3710   1B4B             ; --- BEGIN INLINE ASM BLOCK
3711   1B4B             .include "lib/asm/stdio.asm"
0001+  1B4B             ;-----------------------------------------------------------------------------
0002+  1B4B             ; stdio.s
0003+  1B4B             ;-----------------------------------------------------------------------------
0004+  1B4B             .include "lib/asm/string.asm"
0001++ 1B4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1B4B             ; string.s
0003++ 1B4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1B4B             
0005++ 1B4B             
0006++ 1B4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1B4B             ; _strrev
0008++ 1B4B             ; reverse a string
0009++ 1B4B             ; D = string address
0010++ 1B4B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1B4B             ; 01234
0012++ 1B4B             _strrev:
0013++ 1B4B 4B          	pusha
0014++ 1B4C 07 92 1B    	call _strlen	; length in C
0015++ 1B4F 12          	mov a, c
0016++ 1B50 AF 01 00    	cmp a, 1
0017++ 1B53 D0 6D 1B    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1B56 7D          	dec a
0019++ 1B57 FD 4E       	mov si, d	; beginning of string
0020++ 1B59 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1B5B 59          	add d, a	; end of string
0022++ 1B5C 12          	mov a, c
0023++ 1B5D FD 9B       	shr a		; divide by 2
0024++ 1B5F 39          	mov c, a	; C now counts the steps
0025++ 1B60             _strrev_L0:
0026++ 1B60 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1B61 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1B62 3E          	mov [d], al	; store left char into right side
0029++ 1B63 1B          	mov al, bl
0030++ 1B64 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1B65 7E          	dec c
0032++ 1B66 7F          	dec d
0033++ 1B67 C2 00 00    	cmp c, 0
0034++ 1B6A C7 60 1B    	jne _strrev_L0
0035++ 1B6D             _strrev_end:
0036++ 1B6D 4C          	popa
0037++ 1B6E 09          	ret
0038++ 1B6F             	
0039++ 1B6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1B6F             ; _strchr
0041++ 1B6F             ; search string in D for char in AL
0042++ 1B6F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1B6F             _strchr:
0044++ 1B6F             _strchr_L0:
0045++ 1B6F 32          	mov bl, [d]
0046++ 1B70 C1 00       	cmp bl, 0
0047++ 1B72 C6 7D 1B    	je _strchr_end
0048++ 1B75 BA          	cmp al, bl
0049++ 1B76 C6 7D 1B    	je _strchr_end
0050++ 1B79 79          	inc d
0051++ 1B7A 0A 6F 1B    	jmp _strchr_L0
0052++ 1B7D             _strchr_end:
0053++ 1B7D 1B          	mov al, bl
0054++ 1B7E 09          	ret
0055++ 1B7F             
0056++ 1B7F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1B7F             ; _strstr
0058++ 1B7F             ; find sub-string
0059++ 1B7F             ; str1 in SI
0060++ 1B7F             ; str2 in DI
0061++ 1B7F             ; SI points to end of source string
0062++ 1B7F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1B7F             _strstr:
0064++ 1B7F DB          	push al
0065++ 1B80 DA          	push d
0066++ 1B81 E3          	push di
0067++ 1B82             _strstr_loop:
0068++ 1B82 F3          	cmpsb					; compare a byte of the strings
0069++ 1B83 C7 8E 1B    	jne _strstr_ret
0070++ 1B86 FC 00 00    	lea d, [di + 0]
0071++ 1B89 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1B8B C7 82 1B    	jne _strstr_loop				; equal chars but not at end
0073++ 1B8E             _strstr_ret:
0074++ 1B8E F0          	pop di
0075++ 1B8F E7          	pop d
0076++ 1B90 E8          	pop al
0077++ 1B91 09          	ret
0078++ 1B92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1B92             ; length of null terminated string
0080++ 1B92             ; result in C
0081++ 1B92             ; pointer in D
0082++ 1B92             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1B92             _strlen:
0084++ 1B92 DA          	push d
0085++ 1B93 38 00 00    	mov c, 0
0086++ 1B96             _strlen_L1:
0087++ 1B96 BD 00       	cmp byte [d], 0
0088++ 1B98 C6 A0 1B    	je _strlen_ret
0089++ 1B9B 79          	inc d
0090++ 1B9C 78          	inc c
0091++ 1B9D 0A 96 1B    	jmp _strlen_L1
0092++ 1BA0             _strlen_ret:
0093++ 1BA0 E7          	pop d
0094++ 1BA1 09          	ret
0095++ 1BA2             
0096++ 1BA2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1BA2             ; STRCMP
0098++ 1BA2             ; compare two strings
0099++ 1BA2             ; str1 in SI
0100++ 1BA2             ; str2 in DI
0101++ 1BA2             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1BA2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1BA2             _strcmp:
0104++ 1BA2 DB          	push al
0105++ 1BA3 DA          	push d
0106++ 1BA4 E3          	push di
0107++ 1BA5 E2          	push si
0108++ 1BA6             _strcmp_loop:
0109++ 1BA6 F3          	cmpsb					; compare a byte of the strings
0110++ 1BA7 C7 B2 1B    	jne _strcmp_ret
0111++ 1BAA FB FF FF    	lea d, [si +- 1]
0112++ 1BAD BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1BAF C7 A6 1B    	jne _strcmp_loop				; equal chars but not at end
0114++ 1BB2             _strcmp_ret:
0115++ 1BB2 EF          	pop si
0116++ 1BB3 F0          	pop di
0117++ 1BB4 E7          	pop d
0118++ 1BB5 E8          	pop al
0119++ 1BB6 09          	ret
0120++ 1BB7             
0121++ 1BB7             
0122++ 1BB7             ; STRCPY
0123++ 1BB7             ; copy null terminated string from SI to DI
0124++ 1BB7             ; source in SI
0125++ 1BB7             ; destination in DI
0126++ 1BB7             _strcpy:
0127++ 1BB7 E2          	push si
0128++ 1BB8 E3          	push di
0129++ 1BB9 DB          	push al
0130++ 1BBA             _strcpy_L1:
0131++ 1BBA F6          	lodsb
0132++ 1BBB F7          	stosb
0133++ 1BBC B9 00       	cmp al, 0
0134++ 1BBE C7 BA 1B    	jne _strcpy_L1
0135++ 1BC1             _strcpy_end:
0136++ 1BC1 E8          	pop al
0137++ 1BC2 F0          	pop di
0138++ 1BC3 EF          	pop si
0139++ 1BC4 09          	ret
0140++ 1BC5             
0141++ 1BC5             ; STRCAT
0142++ 1BC5             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1BC5             ; source in SI
0144++ 1BC5             ; destination in DI
0145++ 1BC5             _strcat:
0146++ 1BC5 E2          	push si
0147++ 1BC6 E3          	push di
0148++ 1BC7 D7          	push a
0149++ 1BC8 DA          	push d
0150++ 1BC9 50          	mov a, di
0151++ 1BCA 3C          	mov d, a
0152++ 1BCB             _strcat_goto_end_L1:
0153++ 1BCB BD 00       	cmp byte[d], 0
0154++ 1BCD C6 D4 1B    	je _strcat_start
0155++ 1BD0 79          	inc d
0156++ 1BD1 0A CB 1B    	jmp _strcat_goto_end_L1
0157++ 1BD4             _strcat_start:
0158++ 1BD4 FD 50       	mov di, d
0159++ 1BD6             _strcat_L1:
0160++ 1BD6 F6          	lodsb
0161++ 1BD7 F7          	stosb
0162++ 1BD8 B9 00       	cmp al, 0
0163++ 1BDA C7 D6 1B    	jne _strcat_L1
0164++ 1BDD             _strcat_end:
0165++ 1BDD E7          	pop d
0166++ 1BDE E4          	pop a
0167++ 1BDF F0          	pop di
0168++ 1BE0 EF          	pop si
0169++ 1BE1 09          	ret
0170++ 1BE2             
0171++ 1BE2             
0005+  1BE2             
0006+  1BE2             ;-----------------------------------------------------------------------------
0007+  1BE2             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1BE2             ; ASCII in BL
0009+  1BE2             ; result in AL
0010+  1BE2             ; ascii for F = 0100 0110
0011+  1BE2             ; ascii for 9 = 0011 1001
0012+  1BE2             ;-----------------------------------------------------------------------------
0013+  1BE2             hex_ascii_encode:
0014+  1BE2 1B            mov al, bl
0015+  1BE3 93 40         test al, $40        ; test if letter or number
0016+  1BE5 C7 EB 1B      jnz hex_letter
0017+  1BE8 87 0F         and al, $0F        ; get number
0018+  1BEA 09            ret
0019+  1BEB             hex_letter:
0020+  1BEB 87 0F         and al, $0F        ; get letter
0021+  1BED 6A 09         add al, 9
0022+  1BEF 09            ret
0023+  1BF0             
0024+  1BF0             ;-----------------------------------------------------------------------------
0025+  1BF0             ; ATOI
0026+  1BF0             ; 2 letter hex string in B
0027+  1BF0             ; 8bit integer returned in AL
0028+  1BF0             ;-----------------------------------------------------------------------------
0029+  1BF0             _atoi:
0030+  1BF0 D8            push b
0031+  1BF1 07 E2 1B      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1BF4 30            mov bl, bh
0033+  1BF5 DB            push al          ; save a
0034+  1BF6 07 E2 1B      call hex_ascii_encode
0035+  1BF9 EA            pop bl  
0036+  1BFA FD 9E 04      shl al, 4
0037+  1BFD 8C            or al, bl
0038+  1BFE E5            pop b
0039+  1BFF 09            ret  
0040+  1C00             
0041+  1C00             
0042+  1C00             ;-----------------------------------------------------------------------------
0043+  1C00             ; ITOA
0044+  1C00             ; 8bit value in BL
0045+  1C00             ; 2 byte ASCII result in A
0046+  1C00             ;-----------------------------------------------------------------------------
0047+  1C00             _itoa:
0048+  1C00 DA            push d
0049+  1C01 D8            push b
0050+  1C02 A7 00         mov bh, 0
0051+  1C04 FD A4 04      shr bl, 4  
0052+  1C07 74            mov d, b
0053+  1C08 1F B0 1E      mov al, [d + s_hex_digits]
0054+  1C0B 23            mov ah, al
0055+  1C0C               
0056+  1C0C E5            pop b
0057+  1C0D D8            push b
0058+  1C0E A7 00         mov bh, 0
0059+  1C10 FD 87 0F      and bl, $0F
0060+  1C13 74            mov d, b
0061+  1C14 1F B0 1E      mov al, [d + s_hex_digits]
0062+  1C17 E5            pop b
0063+  1C18 E7            pop d
0064+  1C19 09            ret
0065+  1C1A             
0066+  1C1A             ;-----------------------------------------------------------------------------
0067+  1C1A             ; HEX STRING TO BINARY
0068+  1C1A             ; di = destination address
0069+  1C1A             ; si = source
0070+  1C1A             ;-----------------------------------------------------------------------------
0071+  1C1A             _hex_to_int:
0072+  1C1A             _hex_to_int_L1:
0073+  1C1A F6            lodsb          ; load from [SI] to AL
0074+  1C1B B9 00         cmp al, 0        ; check if ASCII 0
0075+  1C1D C6 2A 1C      jz _hex_to_int_ret
0076+  1C20 36            mov bh, al
0077+  1C21 F6            lodsb
0078+  1C22 2F            mov bl, al
0079+  1C23 07 F0 1B      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1C26 F7            stosb          ; store AL to [DI]
0081+  1C27 0A 1A 1C      jmp _hex_to_int_L1
0082+  1C2A             _hex_to_int_ret:
0083+  1C2A 09            ret    
0084+  1C2B             
0085+  1C2B             ;-----------------------------------------------------------------------------
0086+  1C2B             ; GETCHAR
0087+  1C2B             ; char in ah
0088+  1C2B             ;-----------------------------------------------------------------------------
0089+  1C2B             getch:
0090+  1C2B DB            push al
0091+  1C2C             getch_retry:
0092+  1C2C 19 01         mov al, 1
0093+  1C2E 05 03         syscall sys_io      ; receive in AH
0094+  1C30 E8            pop al
0095+  1C31 09            ret
0096+  1C32             
0097+  1C32             ;-----------------------------------------------------------------------------
0098+  1C32             ; PUTCHAR
0099+  1C32             ; char in ah
0100+  1C32             ;-----------------------------------------------------------------------------
0101+  1C32             _putchar:
0102+  1C32 D7            push a
0103+  1C33 19 00         mov al, 0
0104+  1C35 05 03         syscall sys_io      ; char in AH
0105+  1C37 E4            pop a
0106+  1C38 09            ret
0107+  1C39             
0108+  1C39             ;-----------------------------------------------------------------------------
0109+  1C39             ;; INPUT A STRING
0110+  1C39             ;; terminates with null
0111+  1C39             ;; pointer in D
0112+  1C39             ;-----------------------------------------------------------------------------
0113+  1C39             _gets:
0114+  1C39 D7            push a
0115+  1C3A DA            push d
0116+  1C3B             _gets_loop:
0117+  1C3B 19 01         mov al, 1
0118+  1C3D 05 03         syscall sys_io      ; receive in AH
0119+  1C3F B9 00         cmp al, 0        ; check error code (AL)
0120+  1C41 C6 3B 1C      je _gets_loop      ; if no char received, retry
0121+  1C44             
0122+  1C44 76 1B         cmp ah, 27
0123+  1C46 C6 67 1C      je _gets_ansi_esc
0124+  1C49 76 0A         cmp ah, $0A        ; LF
0125+  1C4B C6 D2 1C      je _gets_end
0126+  1C4E 76 0D         cmp ah, $0D        ; CR
0127+  1C50 C6 D2 1C      je _gets_end
0128+  1C53 76 5C         cmp ah, $5C        ; '\\'
0129+  1C55 C6 93 1C      je _gets_escape
0130+  1C58               
0131+  1C58 76 08         cmp ah, $08      ; check for backspace
0132+  1C5A C6 63 1C      je _gets_backspace
0133+  1C5D             
0134+  1C5D 1A            mov al, ah
0135+  1C5E 3E            mov [d], al
0136+  1C5F 79            inc d
0137+  1C60 0A 3B 1C      jmp _gets_loop
0138+  1C63             _gets_backspace:
0139+  1C63 7F            dec d
0140+  1C64 0A 3B 1C      jmp _gets_loop
0141+  1C67             _gets_ansi_esc:
0142+  1C67 19 01         mov al, 1
0143+  1C69 05 03         syscall sys_io        ; receive in AH without echo
0144+  1C6B B9 00         cmp al, 0          ; check error code (AL)
0145+  1C6D C6 67 1C      je _gets_ansi_esc    ; if no char received, retry
0146+  1C70 76 5B         cmp ah, '['
0147+  1C72 C7 3B 1C      jne _gets_loop
0148+  1C75             _gets_ansi_esc_2:
0149+  1C75 19 01         mov al, 1
0150+  1C77 05 03         syscall sys_io          ; receive in AH without echo
0151+  1C79 B9 00         cmp al, 0            ; check error code (AL)
0152+  1C7B C6 75 1C      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1C7E 76 44         cmp ah, 'D'
0154+  1C80 C6 8B 1C      je _gets_left_arrow
0155+  1C83 76 43         cmp ah, 'C'
0156+  1C85 C6 8F 1C      je _gets_right_arrow
0157+  1C88 0A 3B 1C      jmp _gets_loop
0158+  1C8B             _gets_left_arrow:
0159+  1C8B 7F            dec d
0160+  1C8C 0A 3B 1C      jmp _gets_loop
0161+  1C8F             _gets_right_arrow:
0162+  1C8F 79            inc d
0163+  1C90 0A 3B 1C      jmp _gets_loop
0164+  1C93             _gets_escape:
0165+  1C93 19 01         mov al, 1
0166+  1C95 05 03         syscall sys_io      ; receive in AH
0167+  1C97 B9 00         cmp al, 0        ; check error code (AL)
0168+  1C99 C6 93 1C      je _gets_escape      ; if no char received, retry
0169+  1C9C 76 6E         cmp ah, 'n'
0170+  1C9E C6 BD 1C      je _gets_LF
0171+  1CA1 76 72         cmp ah, 'r'
0172+  1CA3 C6 C4 1C      je _gets_CR
0173+  1CA6 76 30         cmp ah, '0'
0174+  1CA8 C6 CB 1C      je _gets_NULL
0175+  1CAB 76 5C         cmp ah, $5C  ; '\'
0176+  1CAD C6 B6 1C      je _gets_slash
0177+  1CB0 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1CB1 3E            mov [d], al
0179+  1CB2 79            inc d
0180+  1CB3 0A 3B 1C      jmp _gets_loop
0181+  1CB6             _gets_slash:
0182+  1CB6 19 5C         mov al, $5C
0183+  1CB8 3E            mov [d], al
0184+  1CB9 79            inc d
0185+  1CBA 0A 3B 1C      jmp _gets_loop
0186+  1CBD             _gets_LF:
0187+  1CBD 19 0A         mov al, $0A
0188+  1CBF 3E            mov [d], al
0189+  1CC0 79            inc d
0190+  1CC1 0A 3B 1C      jmp _gets_loop
0191+  1CC4             _gets_CR:
0192+  1CC4 19 0D         mov al, $0D
0193+  1CC6 3E            mov [d], al
0194+  1CC7 79            inc d
0195+  1CC8 0A 3B 1C      jmp _gets_loop
0196+  1CCB             _gets_NULL:
0197+  1CCB 19 00         mov al, $00
0198+  1CCD 3E            mov [d], al
0199+  1CCE 79            inc d
0200+  1CCF 0A 3B 1C      jmp _gets_loop
0201+  1CD2             _gets_end:
0202+  1CD2 19 00         mov al, 0
0203+  1CD4 3E            mov [d], al        ; terminate string
0204+  1CD5 E7            pop d
0205+  1CD6 E4            pop a
0206+  1CD7 09            ret
0207+  1CD8             
0208+  1CD8             ;-----------------------------------------------------------------------------
0209+  1CD8             ;; INPUT TEXT
0210+  1CD8             ;; terminated with CTRL+D
0211+  1CD8             ;; pointer in D
0212+  1CD8             ;-----------------------------------------------------------------------------
0213+  1CD8             _gettxt:
0214+  1CD8 D7            push a
0215+  1CD9 DA            push d
0216+  1CDA             _gettxt_loop:
0217+  1CDA 19 01         mov al, 1
0218+  1CDC 05 03         syscall sys_io      ; receive in AH
0219+  1CDE B9 00         cmp al, 0        ; check error code (AL)
0220+  1CE0 C6 DA 1C      je _gettxt_loop    ; if no char received, retry
0221+  1CE3 76 04         cmp ah, 4      ; EOT
0222+  1CE5 C6 23 1D      je _gettxt_end
0223+  1CE8 76 08         cmp ah, $08      ; check for backspace
0224+  1CEA C6 1F 1D      je _gettxt_backspace
0225+  1CED 76 5C         cmp ah, $5C        ; '\'
0226+  1CEF C6 F8 1C      je _gettxt_escape
0227+  1CF2 1A            mov al, ah
0228+  1CF3 3E            mov [d], al
0229+  1CF4 79            inc d
0230+  1CF5 0A DA 1C      jmp _gettxt_loop
0231+  1CF8             _gettxt_escape:
0232+  1CF8 19 01         mov al, 1
0233+  1CFA 05 03         syscall sys_io      ; receive in AH
0234+  1CFC B9 00         cmp al, 0        ; check error code (AL)
0235+  1CFE C6 F8 1C      je _gettxt_escape    ; if no char received, retry
0236+  1D01 76 6E         cmp ah, 'n'
0237+  1D03 C6 11 1D      je _gettxt_LF
0238+  1D06 76 72         cmp ah, 'r'
0239+  1D08 C6 18 1D      je _gettxt_CR
0240+  1D0B 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1D0C 3E            mov [d], al
0242+  1D0D 79            inc d
0243+  1D0E 0A DA 1C      jmp _gettxt_loop
0244+  1D11             _gettxt_LF:
0245+  1D11 19 0A         mov al, $0A
0246+  1D13 3E            mov [d], al
0247+  1D14 79            inc d
0248+  1D15 0A DA 1C      jmp _gettxt_loop
0249+  1D18             _gettxt_CR:
0250+  1D18 19 0D         mov al, $0D
0251+  1D1A 3E            mov [d], al
0252+  1D1B 79            inc d
0253+  1D1C 0A DA 1C      jmp _gettxt_loop
0254+  1D1F             _gettxt_backspace:
0255+  1D1F 7F            dec d
0256+  1D20 0A DA 1C      jmp _gettxt_loop
0257+  1D23             _gettxt_end:
0258+  1D23 19 00         mov al, 0
0259+  1D25 3E            mov [d], al        ; terminate string
0260+  1D26 E7            pop d
0261+  1D27 E4            pop a
0262+  1D28 09            ret
0263+  1D29             
0264+  1D29             ;-----------------------------------------------------------------------------
0265+  1D29             ; PRINT NEW LINE
0266+  1D29             ;-----------------------------------------------------------------------------
0267+  1D29             printnl:
0268+  1D29 D7            push a
0269+  1D2A 10 00 0A      mov a, $0A00
0270+  1D2D 05 03         syscall sys_io
0271+  1D2F 10 00 0D      mov a, $0D00
0272+  1D32 05 03         syscall sys_io
0273+  1D34 E4            pop a
0274+  1D35 09            ret
0275+  1D36             
0276+  1D36             ;-----------------------------------------------------------------------------
0277+  1D36             ; _strtoint
0278+  1D36             ; 4 digit hex string number in d
0279+  1D36             ; integer returned in A
0280+  1D36             ;-----------------------------------------------------------------------------
0281+  1D36             _strtointx:
0282+  1D36 D8            push b
0283+  1D37 32            mov bl, [d]
0284+  1D38 37            mov bh, bl
0285+  1D39 33 01 00      mov bl, [d + 1]
0286+  1D3C 07 F0 1B      call _atoi        ; convert to int in AL
0287+  1D3F 23            mov ah, al        ; move to AH
0288+  1D40 33 02 00      mov bl, [d + 2]
0289+  1D43 37            mov bh, bl
0290+  1D44 33 03 00      mov bl, [d + 3]
0291+  1D47 07 F0 1B      call _atoi        ; convert to int in AL
0292+  1D4A E5            pop b
0293+  1D4B 09            ret
0294+  1D4C             
0295+  1D4C             ;-----------------------------------------------------------------------------
0296+  1D4C             ; _strtoint
0297+  1D4C             ; 5 digit base10 string number in d
0298+  1D4C             ; integer returned in A
0299+  1D4C             ;-----------------------------------------------------------------------------
0300+  1D4C             _strtoint:
0301+  1D4C E2            push si
0302+  1D4D D8            push b
0303+  1D4E D9            push c
0304+  1D4F DA            push d
0305+  1D50 07 92 1B      call _strlen      ; get string length in C
0306+  1D53 7E            dec c
0307+  1D54 FD 4E         mov si, d
0308+  1D56 12            mov a, c
0309+  1D57 FD 99         shl a
0310+  1D59 3B C8 1E      mov d, table_power
0311+  1D5C 59            add d, a
0312+  1D5D 38 00 00      mov c, 0
0313+  1D60             _strtoint_L0:
0314+  1D60 F6            lodsb      ; load ASCII to al
0315+  1D61 B9 00         cmp al, 0
0316+  1D63 C6 76 1D      je _strtoint_end
0317+  1D66 6F 30         sub al, $30    ; make into integer
0318+  1D68 22 00         mov ah, 0
0319+  1D6A 2A            mov b, [d]
0320+  1D6B AC            mul a, b      ; result in B since it fits in 16bits
0321+  1D6C 11            mov a, b
0322+  1D6D 28            mov b, c
0323+  1D6E 54            add a, b
0324+  1D6F 39            mov c, a
0325+  1D70 63 02 00      sub d, 2
0326+  1D73 0A 60 1D      jmp _strtoint_L0
0327+  1D76             _strtoint_end:
0328+  1D76 12            mov a, c
0329+  1D77 E7            pop d
0330+  1D78 E6            pop c
0331+  1D79 E5            pop b
0332+  1D7A EF            pop si
0333+  1D7B 09            ret
0334+  1D7C             
0335+  1D7C             ;-----------------------------------------------------------------------------
0336+  1D7C             ; PRINT NULL TERMINATED STRING
0337+  1D7C             ; pointer in D
0338+  1D7C             ;-----------------------------------------------------------------------------
0339+  1D7C             _puts:
0340+  1D7C D7            push a
0341+  1D7D DA            push d
0342+  1D7E             _puts_L1:
0343+  1D7E 1E            mov al, [d]
0344+  1D7F B9 00         cmp al, 0
0345+  1D81 C6 8D 1D      jz _puts_END
0346+  1D84 23            mov ah, al
0347+  1D85 19 00         mov al, 0
0348+  1D87 05 03         syscall sys_io
0349+  1D89 79            inc d
0350+  1D8A 0A 7E 1D      jmp _puts_L1
0351+  1D8D             _puts_END:
0352+  1D8D E7            pop d
0353+  1D8E E4            pop a
0354+  1D8F 09            ret
0355+  1D90             
0356+  1D90             ;-----------------------------------------------------------------------------
0357+  1D90             ; PRINT N SIZE STRING
0358+  1D90             ; pointer in D
0359+  1D90             ; size in C
0360+  1D90             ;-----------------------------------------------------------------------------
0361+  1D90             _putsn:
0362+  1D90 DB            push al
0363+  1D91 DA            push d
0364+  1D92 D9            push c
0365+  1D93             _putsn_L0:
0366+  1D93 1E            mov al, [d]
0367+  1D94 23            mov ah, al
0368+  1D95 19 00         mov al, 0
0369+  1D97 05 03         syscall sys_io
0370+  1D99 79            inc d
0371+  1D9A 7E            dec c  
0372+  1D9B C2 00 00      cmp c, 0
0373+  1D9E C7 93 1D      jne _putsn_L0
0374+  1DA1             _putsn_end:
0375+  1DA1 E6            pop c
0376+  1DA2 E7            pop d
0377+  1DA3 E8            pop al
0378+  1DA4 09            ret
0379+  1DA5             
0380+  1DA5             ;-----------------------------------------------------------------------------
0381+  1DA5             ; print 16bit decimal number
0382+  1DA5             ; input number in A
0383+  1DA5             ;-----------------------------------------------------------------------------
0384+  1DA5             print_u16d:
0385+  1DA5 D7            push a
0386+  1DA6 D8            push b
0387+  1DA7 26 10 27      mov b, 10000
0388+  1DAA AE            div a, b      ; get 10000's coeff.
0389+  1DAB 07 CD 1D      call print_number
0390+  1DAE 11            mov a, b
0391+  1DAF 26 E8 03      mov b, 1000
0392+  1DB2 AE            div a, b      ; get 1000's coeff.
0393+  1DB3 07 CD 1D      call print_number
0394+  1DB6 11            mov a, b
0395+  1DB7 26 64 00      mov b, 100
0396+  1DBA AE            div a, b
0397+  1DBB 07 CD 1D      call print_number
0398+  1DBE 11            mov a, b
0399+  1DBF 26 0A 00      mov b, 10
0400+  1DC2 AE            div a, b
0401+  1DC3 07 CD 1D      call print_number
0402+  1DC6 1B            mov al, bl      ; 1's coeff in bl
0403+  1DC7 07 CD 1D      call print_number
0404+  1DCA E5            pop b
0405+  1DCB E4            pop a
0406+  1DCC 09            ret
0407+  1DCD             
0408+  1DCD             ;-----------------------------------------------------------------------------
0409+  1DCD             ; print AL
0410+  1DCD             ;-----------------------------------------------------------------------------
0411+  1DCD             print_number:
0412+  1DCD 6A 30         add al, $30
0413+  1DCF 23            mov ah, al
0414+  1DD0 07 32 1C      call _putchar
0415+  1DD3 09            ret
0416+  1DD4             
0417+  1DD4             ;-----------------------------------------------------------------------------
0418+  1DD4             ; PRINT 16BIT HEX INTEGER
0419+  1DD4             ; integer value in reg B
0420+  1DD4             ;-----------------------------------------------------------------------------
0421+  1DD4             print_u16x:
0422+  1DD4 D7            push a
0423+  1DD5 D8            push b
0424+  1DD6 DD            push bl
0425+  1DD7 30            mov bl, bh
0426+  1DD8 07 00 1C      call _itoa        ; convert bh to char in A
0427+  1DDB 2F            mov bl, al        ; save al
0428+  1DDC 19 00         mov al, 0
0429+  1DDE 05 03         syscall sys_io        ; display AH
0430+  1DE0 24            mov ah, bl        ; retrieve al
0431+  1DE1 19 00         mov al, 0
0432+  1DE3 05 03         syscall sys_io        ; display AL
0433+  1DE5             
0434+  1DE5 EA            pop bl
0435+  1DE6 07 00 1C      call _itoa        ; convert bh to char in A
0436+  1DE9 2F            mov bl, al        ; save al
0437+  1DEA 19 00         mov al, 0
0438+  1DEC 05 03         syscall sys_io        ; display AH
0439+  1DEE 24            mov ah, bl        ; retrieve al
0440+  1DEF 19 00         mov al, 0
0441+  1DF1 05 03         syscall sys_io        ; display AL
0442+  1DF3             
0443+  1DF3 E5            pop b
0444+  1DF4 E4            pop a
0445+  1DF5 09            ret
0446+  1DF6             
0447+  1DF6             ;-----------------------------------------------------------------------------
0448+  1DF6             ; INPUT 16BIT HEX INTEGER
0449+  1DF6             ; read 16bit integer into A
0450+  1DF6             ;-----------------------------------------------------------------------------
0451+  1DF6             scan_u16x:
0452+  1DF6 F8 10 00      enter 16
0453+  1DF9 D8            push b
0454+  1DFA DA            push d
0455+  1DFB             
0456+  1DFB FA F1 FF      lea d, [bp + -15]
0457+  1DFE 07 39 1C      call _gets        ; get number
0458+  1E01             
0459+  1E01 32            mov bl, [d]
0460+  1E02 37            mov bh, bl
0461+  1E03 33 01 00      mov bl, [d + 1]
0462+  1E06 07 F0 1B      call _atoi        ; convert to int in AL
0463+  1E09 23            mov ah, al        ; move to AH
0464+  1E0A             
0465+  1E0A 33 02 00      mov bl, [d + 2]
0466+  1E0D 37            mov bh, bl
0467+  1E0E 33 03 00      mov bl, [d + 3]
0468+  1E11 07 F0 1B      call _atoi        ; convert to int in AL
0469+  1E14             
0470+  1E14 E7            pop d
0471+  1E15 E5            pop b
0472+  1E16 F9            leave
0473+  1E17 09            ret
0474+  1E18             
0475+  1E18             ;-----------------------------------------------------------------------------
0476+  1E18             ; PRINT 8bit HEX INTEGER
0477+  1E18             ; integer value in reg bl
0478+  1E18             ;-----------------------------------------------------------------------------
0479+  1E18             print_u8x:
0480+  1E18 D7            push a
0481+  1E19 DD            push bl
0482+  1E1A             
0483+  1E1A 07 00 1C      call _itoa        ; convert bl to char in A
0484+  1E1D 2F            mov bl, al        ; save al
0485+  1E1E 19 00         mov al, 0
0486+  1E20 05 03         syscall sys_io        ; display AH
0487+  1E22 24            mov ah, bl        ; retrieve al
0488+  1E23 19 00         mov al, 0
0489+  1E25 05 03         syscall sys_io        ; display AL
0490+  1E27             
0491+  1E27 EA            pop bl
0492+  1E28 E4            pop a
0493+  1E29 09            ret
0494+  1E2A             
0495+  1E2A             ;-----------------------------------------------------------------------------
0496+  1E2A             ; print 8bit decimal unsigned number
0497+  1E2A             ; input number in AL
0498+  1E2A             ;-----------------------------------------------------------------------------
0499+  1E2A             print_u8d:
0500+  1E2A D7            push a
0501+  1E2B D8            push b
0502+  1E2C             
0503+  1E2C 22 00         mov ah, 0
0504+  1E2E 26 64 00      mov b, 100
0505+  1E31 AE            div a, b
0506+  1E32 D8            push b      ; save remainder
0507+  1E33 B9 00         cmp al, 0
0508+  1E35 C6 3F 1E      je skip100
0509+  1E38 6A 30         add al, $30
0510+  1E3A 23            mov ah, al
0511+  1E3B 19 00         mov al, 0
0512+  1E3D 05 03         syscall sys_io  ; print coeff
0513+  1E3F             skip100:
0514+  1E3F E4            pop a
0515+  1E40 22 00         mov ah, 0
0516+  1E42 26 0A 00      mov b, 10
0517+  1E45 AE            div a, b
0518+  1E46 D8            push b      ; save remainder
0519+  1E47 B9 00         cmp al, 0
0520+  1E49 C6 53 1E      je skip10
0521+  1E4C 6A 30         add al, $30
0522+  1E4E 23            mov ah, al
0523+  1E4F 19 00         mov al, 0
0524+  1E51 05 03         syscall sys_io  ; print coeff
0525+  1E53             skip10:
0526+  1E53 E4            pop a
0527+  1E54 1B            mov al, bl
0528+  1E55 6A 30         add al, $30
0529+  1E57 23            mov ah, al
0530+  1E58 19 00         mov al, 0
0531+  1E5A 05 03         syscall sys_io  ; print coeff
0532+  1E5C E5            pop b
0533+  1E5D E4            pop a
0534+  1E5E 09            ret
0535+  1E5F             
0536+  1E5F             ;-----------------------------------------------------------------------------
0537+  1E5F             ; INPUT 8BIT HEX INTEGER
0538+  1E5F             ; read 8bit integer into AL
0539+  1E5F             ;-----------------------------------------------------------------------------
0540+  1E5F             scan_u8x:
0541+  1E5F F8 04 00      enter 4
0542+  1E62 D8            push b
0543+  1E63 DA            push d
0544+  1E64             
0545+  1E64 FA FD FF      lea d, [bp + -3]
0546+  1E67 07 39 1C      call _gets        ; get number
0547+  1E6A             
0548+  1E6A 32            mov bl, [d]
0549+  1E6B 37            mov bh, bl
0550+  1E6C 33 01 00      mov bl, [d + 1]
0551+  1E6F 07 F0 1B      call _atoi        ; convert to int in AL
0552+  1E72             
0553+  1E72 E7            pop d
0554+  1E73 E5            pop b
0555+  1E74 F9            leave
0556+  1E75 09            ret
0557+  1E76             
0558+  1E76             ;-----------------------------------------------------------------------------
0559+  1E76             ; input decimal number
0560+  1E76             ; result in A
0561+  1E76             ; 655'\0'
0562+  1E76             ; low--------high
0563+  1E76             ;-----------------------------------------------------------------------------
0564+  1E76             scan_u16d:
0565+  1E76 F8 08 00      enter 8
0566+  1E79 E2            push si
0567+  1E7A D8            push b
0568+  1E7B D9            push c
0569+  1E7C DA            push d
0570+  1E7D FA F9 FF      lea d, [bp +- 7]
0571+  1E80 07 39 1C      call _gets
0572+  1E83 07 92 1B      call _strlen      ; get string length in C
0573+  1E86 7E            dec c
0574+  1E87 FD 4E         mov si, d
0575+  1E89 12            mov a, c
0576+  1E8A FD 99         shl a
0577+  1E8C 3B C8 1E      mov d, table_power
0578+  1E8F 59            add d, a
0579+  1E90 38 00 00      mov c, 0
0580+  1E93             mul_loop:
0581+  1E93 F6            lodsb      ; load ASCII to al
0582+  1E94 B9 00         cmp al, 0
0583+  1E96 C6 A9 1E      je mul_exit
0584+  1E99 6F 30         sub al, $30    ; make into integer
0585+  1E9B 22 00         mov ah, 0
0586+  1E9D 2A            mov b, [d]
0587+  1E9E AC            mul a, b      ; result in B since it fits in 16bits
0588+  1E9F 11            mov a, b
0589+  1EA0 28            mov b, c
0590+  1EA1 54            add a, b
0591+  1EA2 39            mov c, a
0592+  1EA3 63 02 00      sub d, 2
0593+  1EA6 0A 93 1E      jmp mul_loop
0594+  1EA9             mul_exit:
0595+  1EA9 12            mov a, c
0596+  1EAA E7            pop d
0597+  1EAB E6            pop c
0598+  1EAC E5            pop b
0599+  1EAD EF            pop si
0600+  1EAE F9            leave
0601+  1EAF 09            ret
0602+  1EB0             
0603+  1EB0 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1EB4 34 35 36 37 
0603+  1EB8 38 39 41 42 
0603+  1EBC 43 44 45 46 
0604+  1EC0 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1EC4 1B 5B 48 00 
0605+  1EC8             
0606+  1EC8             table_power:
0607+  1EC8 01 00         .dw 1
0608+  1ECA 0A 00         .dw 10
0609+  1ECC 64 00         .dw 100
0610+  1ECE E8 03         .dw 1000
0611+  1ED0 10 27         .dw 100003712   1ED2             ; --- END INLINE ASM BLOCK
3713   1ED2             
3714   1ED2 F9            leave
3715   1ED3 09            ret
3716   1ED4             ; --- END TEXT BLOCK
3717   1ED4             
3718   1ED4             ; --- BEGIN DATA BLOCK
3719   1ED4 00 00 00 00 _s_data: .fill 256, 0
3719   1ED8 00 00 00 00 
3719   1EDC 00 00 00 00 
3719   1EE0 00 00 00 00 
3719   1EE4 00 00 00 00 
3719   1EE8 00 00 00 00 
3719   1EEC 00 00 00 00 
3719   1EF0 00 00 00 00 
3719   1EF4 00 00 00 00 
3719   1EF8 00 00 00 00 
3719   1EFC 00 00 00 00 
3719   1F00 00 00 00 00 
3719   1F04 00 00 00 00 
3719   1F08 00 00 00 00 
3719   1F0C 00 00 00 00 
3719   1F10 00 00 00 00 
3719   1F14 00 00 00 00 
3719   1F18 00 00 00 00 
3719   1F1C 00 00 00 00 
3719   1F20 00 00 00 00 
3719   1F24 00 00 00 00 
3719   1F28 00 00 00 00 
3719   1F2C 00 00 00 00 
3719   1F30 00 00 00 00 
3719   1F34 00 00 00 00 
3719   1F38 00 00 00 00 
3719   1F3C 00 00 00 00 
3719   1F40 00 00 00 00 
3719   1F44 00 00 00 00 
3719   1F48 00 00 00 00 
3719   1F4C 00 00 00 00 
3719   1F50 00 00 00 00 
3719   1F54 00 00 00 00 
3719   1F58 00 00 00 00 
3719   1F5C 00 00 00 00 
3719   1F60 00 00 00 00 
3719   1F64 00 00 00 00 
3719   1F68 00 00 00 00 
3719   1F6C 00 00 00 00 
3719   1F70 00 00 00 00 
3719   1F74 00 00 00 00 
3719   1F78 00 00 00 00 
3719   1F7C 00 00 00 00 
3719   1F80 00 00 00 00 
3719   1F84 00 00 00 00 
3719   1F88 00 00 00 00 
3719   1F8C 00 00 00 00 
3719   1F90 00 00 00 00 
3719   1F94 00 00 00 00 
3719   1F98 00 00 00 00 
3719   1F9C 00 00 00 00 
3719   1FA0 00 00 00 00 
3719   1FA4 00 00 00 00 
3719   1FA8 00 00 00 00 
3719   1FAC 00 00 00 00 
3719   1FB0 00 00 00 00 
3719   1FB4 00 00 00 00 
3719   1FB8 00 00 00 00 
3719   1FBC 00 00 00 00 
3719   1FC0 00 00 00 00 
3719   1FC4 00 00 00 00 
3719   1FC8 00 00 00 00 
3719   1FCC 00 00 00 00 
3719   1FD0 00 00 00 00 
3720   1FD4 48 65 6C 6C _s0: .db "Hello World!", 0
3720   1FD8 6F 20 57 6F 
3720   1FDC 72 6C 64 21 
3720   1FE0 00 
3721   1FE1 49 6E 74 65 _s1: .db "Integer: %d, Char: %c, String: %s\n\n", 0
3721   1FE5 67 65 72 3A 
3721   1FE9 20 25 64 2C 
3721   1FED 20 43 68 61 
3721   1FF1 72 3A 20 25 
3721   1FF5 63 2C 20 53 
3721   1FF9 74 72 69 6E 
3721   1FFD 67 3A 20 25 
3721   2001 73 0A 0A 00 
3722   2005 46 69 6E 61 _s2: .db "Final String: %s", 0
3722   2009 6C 20 53 74 
3722   200D 72 69 6E 67 
3722   2011 3A 20 25 73 
3722   2015 00 
3723   2016 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
3723   201A 70 65 63 74 
3723   201E 65 64 20 66 
3723   2022 6F 72 6D 61 
3723   2026 74 20 69 6E 
3723   202A 20 70 72 69 
3723   202E 6E 74 66 2E 
3723   2032 00 
3724   2033 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
3724   2037 72 3A 20 55 
3724   203B 6E 6B 6E 6F 
3724   203F 77 6E 20 61 
3724   2043 72 67 75 6D 
3724   2047 65 6E 74 20 
3724   204B 74 79 70 65 
3724   204F 2E 0A 00 
3725   2052 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
3725   2056 1B 5B 48 00 
3726   205A             
3727   205A 5C 20       _heap_top: .dw _heap
3728   205C 00          _heap: .db 0
3729   205D             ; --- END DATA BLOCK
3730   205D             
3731   205D             .end
tasm: Number of errors = 0
