0001   0000             ; --- FILENAME: test
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; test_globalvars(); 
0011   0408 07 5E 1F      call test_globalvars
0012   040B 05 0B         syscall sys_terminate_proc
0013   040D             
0014   040D             strcpy:
0015   040D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0016   0410             ; $psrc 
0017   0410             ; $pdest 
0018   0410 52 04 00      sub sp, 4
0019   0413             ;; psrc = src; 
0020   0413 FA FF FF      lea d, [bp + -1] ; $psrc
0021   0416 DA            push d
0022   0417 FA 07 00      lea d, [bp + 7] ; $src
0023   041A 2A            mov b, [d]
0024   041B E7            pop d
0025   041C FD 43         mov [d], b
0026   041E             ;; pdest = dest; 
0027   041E FA FD FF      lea d, [bp + -3] ; $pdest
0028   0421 DA            push d
0029   0422 FA 05 00      lea d, [bp + 5] ; $dest
0030   0425 2A            mov b, [d]
0031   0426 E7            pop d
0032   0427 FD 43         mov [d], b
0033   0429             ;; while(*psrc) *pdest++ = *psrc++; 
0034   0429             _while1_cond:
0035   0429 FA FF FF      lea d, [bp + -1] ; $psrc
0036   042C 2A            mov b, [d]
0037   042D 74            mov d, b
0038   042E 32            mov bl, [d]
0039   042F A7 00         mov bh, 0
0040   0431 C0 00 00      cmp b, 0
0041   0434 C6 5C 04      je _while1_exit
0042   0437             _while1_block:
0043   0437             ;; *pdest++ = *psrc++; 
0044   0437 FA FD FF      lea d, [bp + -3] ; $pdest
0045   043A 2A            mov b, [d]
0046   043B D8            push b
0047   043C FD 77         inc b
0048   043E FA FD FF      lea d, [bp + -3] ; $pdest
0049   0441 FD 43         mov [d], b
0050   0443 E5            pop b
0051   0444 D8            push b
0052   0445 FA FF FF      lea d, [bp + -1] ; $psrc
0053   0448 2A            mov b, [d]
0054   0449 D8            push b
0055   044A FD 77         inc b
0056   044C FA FF FF      lea d, [bp + -1] ; $psrc
0057   044F FD 43         mov [d], b
0058   0451 E5            pop b
0059   0452 74            mov d, b
0060   0453 32            mov bl, [d]
0061   0454 A7 00         mov bh, 0
0062   0456 E7            pop d
0063   0457 FD 3E         mov [d], bl
0064   0459 0A 29 04      jmp _while1_cond
0065   045C             _while1_exit:
0066   045C             ;; *pdest = '\0'; 
0067   045C FA FD FF      lea d, [bp + -3] ; $pdest
0068   045F 2A            mov b, [d]
0069   0460 D8            push b
0070   0461 26 00 00      mov b, $0
0071   0464 E7            pop d
0072   0465 FD 3E         mov [d], bl
0073   0467 F9            leave
0074   0468 09            ret
0075   0469             
0076   0469             strcmp:
0077   0469 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0078   046C             ;; while (*s1 && (*s1 == *s2)) { 
0079   046C             _while2_cond:
0080   046C FA 05 00      lea d, [bp + 5] ; $s1
0081   046F 2A            mov b, [d]
0082   0470 74            mov d, b
0083   0471 32            mov bl, [d]
0084   0472 A7 00         mov bh, 0
0085   0474 D7            push a
0086   0475 11            mov a, b
0087   0476 FA 05 00      lea d, [bp + 5] ; $s1
0088   0479 2A            mov b, [d]
0089   047A 74            mov d, b
0090   047B 32            mov bl, [d]
0091   047C A7 00         mov bh, 0
0092   047E             ; START RELATIONAL
0093   047E D7            push a
0094   047F 11            mov a, b
0095   0480 FA 07 00      lea d, [bp + 7] ; $s2
0096   0483 2A            mov b, [d]
0097   0484 74            mov d, b
0098   0485 32            mov bl, [d]
0099   0486 A7 00         mov bh, 0
0100   0488 B0            cmp a, b
0101   0489 FD 71         seq ; ==
0102   048B E4            pop a
0103   048C             ; END RELATIONAL
0104   048C FD A7         sand a, b ; &&
0105   048E E4            pop a
0106   048F C0 00 00      cmp b, 0
0107   0492 C6 B2 04      je _while2_exit
0108   0495             _while2_block:
0109   0495             ;; s1++; 
0110   0495 FA 05 00      lea d, [bp + 5] ; $s1
0111   0498 2A            mov b, [d]
0112   0499 D8            push b
0113   049A FD 77         inc b
0114   049C FA 05 00      lea d, [bp + 5] ; $s1
0115   049F FD 43         mov [d], b
0116   04A1 E5            pop b
0117   04A2             ;; s2++; 
0118   04A2 FA 07 00      lea d, [bp + 7] ; $s2
0119   04A5 2A            mov b, [d]
0120   04A6 D8            push b
0121   04A7 FD 77         inc b
0122   04A9 FA 07 00      lea d, [bp + 7] ; $s2
0123   04AC FD 43         mov [d], b
0124   04AE E5            pop b
0125   04AF 0A 6C 04      jmp _while2_cond
0126   04B2             _while2_exit:
0127   04B2             ;; return *s1 - *s2; 
0128   04B2 FA 05 00      lea d, [bp + 5] ; $s1
0129   04B5 2A            mov b, [d]
0130   04B6 74            mov d, b
0131   04B7 32            mov bl, [d]
0132   04B8 A7 00         mov bh, 0
0133   04BA             ; START TERMS
0134   04BA D7            push a
0135   04BB 11            mov a, b
0136   04BC FA 07 00      lea d, [bp + 7] ; $s2
0137   04BF 2A            mov b, [d]
0138   04C0 74            mov d, b
0139   04C1 32            mov bl, [d]
0140   04C2 A7 00         mov bh, 0
0141   04C4 60            sub a, b
0142   04C5 27            mov b, a
0143   04C6 E4            pop a
0144   04C7             ; END TERMS
0145   04C7 F9            leave
0146   04C8 09            ret
0147   04C9             
0148   04C9             strcat:
0149   04C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0150   04CC             ; $dest_len 
0151   04CC             ; $i 
0152   04CC 52 04 00      sub sp, 4
0153   04CF             ;; dest_len = strlen(dest); 
0154   04CF FA FF FF      lea d, [bp + -1] ; $dest_len
0155   04D2 DA            push d
0156   04D3 FA 05 00      lea d, [bp + 5] ; $dest
0157   04D6 2A            mov b, [d]
0158   04D7 FD AB         swp b
0159   04D9 D8            push b
0160   04DA 07 7C 05      call strlen
0161   04DD 51 02 00      add sp, 2
0162   04E0 E7            pop d
0163   04E1 FD 43         mov [d], b
0164   04E3             ;; for (i = 0; src[i] != 0; i=i+1) { 
0165   04E3             _for3_init:
0166   04E3 FA FD FF      lea d, [bp + -3] ; $i
0167   04E6 DA            push d
0168   04E7 26 00 00      mov b, $0
0169   04EA E7            pop d
0170   04EB FD 43         mov [d], b
0171   04ED             _for3_cond:
0172   04ED FA 07 00      lea d, [bp + 7] ; $src
0173   04F0 FD 2A         mov d, [d]
0174   04F2 D7            push a
0175   04F3 DA            push d
0176   04F4 FA FD FF      lea d, [bp + -3] ; $i
0177   04F7 2A            mov b, [d]
0178   04F8 E7            pop d
0179   04F9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0180   04FD E4            pop a
0181   04FE 32            mov bl, [d]
0182   04FF A7 00         mov bh, 0
0183   0501             ; START RELATIONAL
0184   0501 D7            push a
0185   0502 11            mov a, b
0186   0503 26 00 00      mov b, $0
0187   0506 B0            cmp a, b
0188   0507 FD 72         sneq ; !=
0189   0509 E4            pop a
0190   050A             ; END RELATIONAL
0191   050A C0 00 00      cmp b, 0
0192   050D C6 56 05      je _for3_exit
0193   0510             _for3_block:
0194   0510             ;; dest[dest_len + i] = src[i]; 
0195   0510 FA 05 00      lea d, [bp + 5] ; $dest
0196   0513 FD 2A         mov d, [d]
0197   0515 D7            push a
0198   0516 DA            push d
0199   0517 FA FF FF      lea d, [bp + -1] ; $dest_len
0200   051A 2A            mov b, [d]
0201   051B             ; START TERMS
0202   051B D7            push a
0203   051C 11            mov a, b
0204   051D FA FD FF      lea d, [bp + -3] ; $i
0205   0520 2A            mov b, [d]
0206   0521 56            add b, a
0207   0522 E4            pop a
0208   0523             ; END TERMS
0209   0523 E7            pop d
0210   0524 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0211   0528 E4            pop a
0212   0529 DA            push d
0213   052A FA 07 00      lea d, [bp + 7] ; $src
0214   052D FD 2A         mov d, [d]
0215   052F D7            push a
0216   0530 DA            push d
0217   0531 FA FD FF      lea d, [bp + -3] ; $i
0218   0534 2A            mov b, [d]
0219   0535 E7            pop d
0220   0536 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0221   053A E4            pop a
0222   053B 32            mov bl, [d]
0223   053C A7 00         mov bh, 0
0224   053E E7            pop d
0225   053F FD 3E         mov [d], bl
0226   0541             _for3_update:
0227   0541 FA FD FF      lea d, [bp + -3] ; $i
0228   0544 DA            push d
0229   0545 FA FD FF      lea d, [bp + -3] ; $i
0230   0548 2A            mov b, [d]
0231   0549             ; START TERMS
0232   0549 D7            push a
0233   054A 11            mov a, b
0234   054B 26 01 00      mov b, $1
0235   054E 56            add b, a
0236   054F E4            pop a
0237   0550             ; END TERMS
0238   0550 E7            pop d
0239   0551 FD 43         mov [d], b
0240   0553 0A ED 04      jmp _for3_cond
0241   0556             _for3_exit:
0242   0556             ;; dest[dest_len + i] = 0; 
0243   0556 FA 05 00      lea d, [bp + 5] ; $dest
0244   0559 FD 2A         mov d, [d]
0245   055B D7            push a
0246   055C DA            push d
0247   055D FA FF FF      lea d, [bp + -1] ; $dest_len
0248   0560 2A            mov b, [d]
0249   0561             ; START TERMS
0250   0561 D7            push a
0251   0562 11            mov a, b
0252   0563 FA FD FF      lea d, [bp + -3] ; $i
0253   0566 2A            mov b, [d]
0254   0567 56            add b, a
0255   0568 E4            pop a
0256   0569             ; END TERMS
0257   0569 E7            pop d
0258   056A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0259   056E E4            pop a
0260   056F DA            push d
0261   0570 26 00 00      mov b, $0
0262   0573 E7            pop d
0263   0574 FD 3E         mov [d], bl
0264   0576             ;; return dest; 
0265   0576 FA 05 00      lea d, [bp + 5] ; $dest
0266   0579 2A            mov b, [d]
0267   057A F9            leave
0268   057B 09            ret
0269   057C             
0270   057C             strlen:
0271   057C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0272   057F             ; $length 
0273   057F 52 02 00      sub sp, 2
0274   0582             ;; length = 0; 
0275   0582 FA FF FF      lea d, [bp + -1] ; $length
0276   0585 DA            push d
0277   0586 26 00 00      mov b, $0
0278   0589 E7            pop d
0279   058A FD 43         mov [d], b
0280   058C             ;; while (str[length] != 0) { 
0281   058C             _while4_cond:
0282   058C FA 05 00      lea d, [bp + 5] ; $str
0283   058F FD 2A         mov d, [d]
0284   0591 D7            push a
0285   0592 DA            push d
0286   0593 FA FF FF      lea d, [bp + -1] ; $length
0287   0596 2A            mov b, [d]
0288   0597 E7            pop d
0289   0598 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0290   059C E4            pop a
0291   059D 32            mov bl, [d]
0292   059E A7 00         mov bh, 0
0293   05A0             ; START RELATIONAL
0294   05A0 D7            push a
0295   05A1 11            mov a, b
0296   05A2 26 00 00      mov b, $0
0297   05A5 B0            cmp a, b
0298   05A6 FD 72         sneq ; !=
0299   05A8 E4            pop a
0300   05A9             ; END RELATIONAL
0301   05A9 C0 00 00      cmp b, 0
0302   05AC C6 BF 05      je _while4_exit
0303   05AF             _while4_block:
0304   05AF             ;; length++; 
0305   05AF FA FF FF      lea d, [bp + -1] ; $length
0306   05B2 2A            mov b, [d]
0307   05B3 D8            push b
0308   05B4 FD 77         inc b
0309   05B6 FA FF FF      lea d, [bp + -1] ; $length
0310   05B9 FD 43         mov [d], b
0311   05BB E5            pop b
0312   05BC 0A 8C 05      jmp _while4_cond
0313   05BF             _while4_exit:
0314   05BF             ;; return length; 
0315   05BF FA FF FF      lea d, [bp + -1] ; $length
0316   05C2 2A            mov b, [d]
0317   05C3 F9            leave
0318   05C4 09            ret
0319   05C5             
0320   05C5             exit:
0321   05C5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0322   05C8             
0323   05C8             ; --- BEGIN INLINE ASM BLOCK
0324   05C8 05 0B         syscall sys_terminate_proc
0325   05CA             ; --- END INLINE ASM BLOCK
0326   05CA             
0327   05CA F9            leave
0328   05CB 09            ret
0329   05CC             
0330   05CC             atoi:
0331   05CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0332   05CF             ; $result 
0333   05CF 10 00 00      mov a, $0
0334   05D2 45 FF FF      mov [bp + -1], a
0335   05D5             ; $sign 
0336   05D5 10 01 00      mov a, $1
0337   05D8 45 FD FF      mov [bp + -3], a
0338   05DB 52 04 00      sub sp, 4
0339   05DE             ;; while (*str == ' ') str++; 
0340   05DE             _while5_cond:
0341   05DE FA 05 00      lea d, [bp + 5] ; $str
0342   05E1 2A            mov b, [d]
0343   05E2 74            mov d, b
0344   05E3 32            mov bl, [d]
0345   05E4 A7 00         mov bh, 0
0346   05E6             ; START RELATIONAL
0347   05E6 D7            push a
0348   05E7 11            mov a, b
0349   05E8 26 20 00      mov b, $20
0350   05EB B0            cmp a, b
0351   05EC FD 71         seq ; ==
0352   05EE E4            pop a
0353   05EF             ; END RELATIONAL
0354   05EF C0 00 00      cmp b, 0
0355   05F2 C6 05 06      je _while5_exit
0356   05F5             _while5_block:
0357   05F5             ;; str++; 
0358   05F5 FA 05 00      lea d, [bp + 5] ; $str
0359   05F8 2A            mov b, [d]
0360   05F9 D8            push b
0361   05FA FD 77         inc b
0362   05FC FA 05 00      lea d, [bp + 5] ; $str
0363   05FF FD 43         mov [d], b
0364   0601 E5            pop b
0365   0602 0A DE 05      jmp _while5_cond
0366   0605             _while5_exit:
0367   0605             ;; if (*str == '-' || *str == '+') { 
0368   0605             _if6_cond:
0369   0605 FA 05 00      lea d, [bp + 5] ; $str
0370   0608 2A            mov b, [d]
0371   0609 74            mov d, b
0372   060A 32            mov bl, [d]
0373   060B A7 00         mov bh, 0
0374   060D             ; START RELATIONAL
0375   060D D7            push a
0376   060E 11            mov a, b
0377   060F 26 2D 00      mov b, $2d
0378   0612 B0            cmp a, b
0379   0613 FD 71         seq ; ==
0380   0615 E4            pop a
0381   0616             ; END RELATIONAL
0382   0616 D7            push a
0383   0617 11            mov a, b
0384   0618 FA 05 00      lea d, [bp + 5] ; $str
0385   061B 2A            mov b, [d]
0386   061C 74            mov d, b
0387   061D 32            mov bl, [d]
0388   061E A7 00         mov bh, 0
0389   0620             ; START RELATIONAL
0390   0620 D7            push a
0391   0621 11            mov a, b
0392   0622 26 2B 00      mov b, $2b
0393   0625 B0            cmp a, b
0394   0626 FD 71         seq ; ==
0395   0628 E4            pop a
0396   0629             ; END RELATIONAL
0397   0629 FD A8         sor a, b ; ||
0398   062B E4            pop a
0399   062C C0 00 00      cmp b, 0
0400   062F C6 66 06      je _if6_exit
0401   0632             _if6_true:
0402   0632             ;; if (*str == '-') sign = -1; 
0403   0632             _if7_cond:
0404   0632 FA 05 00      lea d, [bp + 5] ; $str
0405   0635 2A            mov b, [d]
0406   0636 74            mov d, b
0407   0637 32            mov bl, [d]
0408   0638 A7 00         mov bh, 0
0409   063A             ; START RELATIONAL
0410   063A D7            push a
0411   063B 11            mov a, b
0412   063C 26 2D 00      mov b, $2d
0413   063F B0            cmp a, b
0414   0640 FD 71         seq ; ==
0415   0642 E4            pop a
0416   0643             ; END RELATIONAL
0417   0643 C0 00 00      cmp b, 0
0418   0646 C6 56 06      je _if7_exit
0419   0649             _if7_true:
0420   0649             ;; sign = -1; 
0421   0649 FA FD FF      lea d, [bp + -3] ; $sign
0422   064C DA            push d
0423   064D 26 FF FF      mov b, $ffff
0424   0650 E7            pop d
0425   0651 FD 43         mov [d], b
0426   0653 0A 56 06      jmp _if7_exit
0427   0656             _if7_exit:
0428   0656             ;; str++; 
0429   0656 FA 05 00      lea d, [bp + 5] ; $str
0430   0659 2A            mov b, [d]
0431   065A D8            push b
0432   065B FD 77         inc b
0433   065D FA 05 00      lea d, [bp + 5] ; $str
0434   0660 FD 43         mov [d], b
0435   0662 E5            pop b
0436   0663 0A 66 06      jmp _if6_exit
0437   0666             _if6_exit:
0438   0666             ;; while (*str >= '0' && *str <= '9') { 
0439   0666             _while8_cond:
0440   0666 FA 05 00      lea d, [bp + 5] ; $str
0441   0669 2A            mov b, [d]
0442   066A 74            mov d, b
0443   066B 32            mov bl, [d]
0444   066C A7 00         mov bh, 0
0445   066E             ; START RELATIONAL
0446   066E D7            push a
0447   066F 11            mov a, b
0448   0670 26 30 00      mov b, $30
0449   0673 B0            cmp a, b
0450   0674 FD 82         sgeu ; >= (unsigned)
0451   0676 E4            pop a
0452   0677             ; END RELATIONAL
0453   0677 D7            push a
0454   0678 11            mov a, b
0455   0679 FA 05 00      lea d, [bp + 5] ; $str
0456   067C 2A            mov b, [d]
0457   067D 74            mov d, b
0458   067E 32            mov bl, [d]
0459   067F A7 00         mov bh, 0
0460   0681             ; START RELATIONAL
0461   0681 D7            push a
0462   0682 11            mov a, b
0463   0683 26 39 00      mov b, $39
0464   0686 B0            cmp a, b
0465   0687 FD 76         sleu ; <= (unsigned)
0466   0689 E4            pop a
0467   068A             ; END RELATIONAL
0468   068A FD A7         sand a, b ; &&
0469   068C E4            pop a
0470   068D C0 00 00      cmp b, 0
0471   0690 C6 CB 06      je _while8_exit
0472   0693             _while8_block:
0473   0693             ;; result = result * 10 + (*str - '0'); 
0474   0693 FA FF FF      lea d, [bp + -1] ; $result
0475   0696 DA            push d
0476   0697 FA FF FF      lea d, [bp + -1] ; $result
0477   069A 2A            mov b, [d]
0478   069B             ; START FACTORS
0479   069B D7            push a
0480   069C 11            mov a, b
0481   069D 26 0A 00      mov b, $a
0482   06A0 AC            mul a, b ; *
0483   06A1 11            mov a, b
0484   06A2 27            mov b, a
0485   06A3 E4            pop a
0486   06A4             ; END FACTORS
0487   06A4             ; START TERMS
0488   06A4 D7            push a
0489   06A5 11            mov a, b
0490   06A6 FA 05 00      lea d, [bp + 5] ; $str
0491   06A9 2A            mov b, [d]
0492   06AA 74            mov d, b
0493   06AB 32            mov bl, [d]
0494   06AC A7 00         mov bh, 0
0495   06AE             ; START TERMS
0496   06AE D7            push a
0497   06AF 11            mov a, b
0498   06B0 26 30 00      mov b, $30
0499   06B3 60            sub a, b
0500   06B4 27            mov b, a
0501   06B5 E4            pop a
0502   06B6             ; END TERMS
0503   06B6 56            add b, a
0504   06B7 E4            pop a
0505   06B8             ; END TERMS
0506   06B8 E7            pop d
0507   06B9 FD 43         mov [d], b
0508   06BB             ;; str++; 
0509   06BB FA 05 00      lea d, [bp + 5] ; $str
0510   06BE 2A            mov b, [d]
0511   06BF D8            push b
0512   06C0 FD 77         inc b
0513   06C2 FA 05 00      lea d, [bp + 5] ; $str
0514   06C5 FD 43         mov [d], b
0515   06C7 E5            pop b
0516   06C8 0A 66 06      jmp _while8_cond
0517   06CB             _while8_exit:
0518   06CB             ;; return sign * result; 
0519   06CB FA FD FF      lea d, [bp + -3] ; $sign
0520   06CE 2A            mov b, [d]
0521   06CF             ; START FACTORS
0522   06CF D7            push a
0523   06D0 11            mov a, b
0524   06D1 FA FF FF      lea d, [bp + -1] ; $result
0525   06D4 2A            mov b, [d]
0526   06D5 AC            mul a, b ; *
0527   06D6 11            mov a, b
0528   06D7 27            mov b, a
0529   06D8 E4            pop a
0530   06D9             ; END FACTORS
0531   06D9 F9            leave
0532   06DA 09            ret
0533   06DB             
0534   06DB             rand:
0535   06DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0536   06DE             ; $sec 
0537   06DE 52 02 00      sub sp, 2
0538   06E1             
0539   06E1             ; --- BEGIN INLINE ASM BLOCK
0540   06E1 19 00         mov al, 0
0541   06E3 05 01         syscall sys_rtc					
0542   06E5 1A            mov al, ah
0543   06E6 FA FF FF      lea d, [bp + -1] ; $sec
0544   06E9 1E            mov al, [d]
0545   06EA 22 00         mov ah, 0
0546   06EC             ; --- END INLINE ASM BLOCK
0547   06EC             
0548   06EC             ;; return sec; 
0549   06EC FA FF FF      lea d, [bp + -1] ; $sec
0550   06EF 2A            mov b, [d]
0551   06F0 F9            leave
0552   06F1 09            ret
0553   06F2             
0554   06F2             srand:
0555   06F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0556   06F5 F9            leave
0557   06F6 09            ret
0558   06F7             
0559   06F7             malloc:
0560   06F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0561   06FA F9            leave
0562   06FB 09            ret
0563   06FC             
0564   06FC             calloc:
0565   06FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0566   06FF F9            leave
0567   0700 09            ret
0568   0701             
0569   0701             realloc:
0570   0701 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0571   0704 F9            leave
0572   0705 09            ret
0573   0706             
0574   0706             alloc:
0575   0706 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0576   0709             ;; heap_top = heap_top + bytes; 
0577   0709 3B 49 21      mov d, _heap_top ; $heap_top
0578   070C DA            push d
0579   070D 3B 49 21      mov d, _heap_top ; $heap_top
0580   0710 2A            mov b, [d]
0581   0711             ; START TERMS
0582   0711 D7            push a
0583   0712 11            mov a, b
0584   0713 FA 05 00      lea d, [bp + 5] ; $bytes
0585   0716 2A            mov b, [d]
0586   0717 56            add b, a
0587   0718 E4            pop a
0588   0719             ; END TERMS
0589   0719 E7            pop d
0590   071A FD 43         mov [d], b
0591   071C             ;; return heap_top - bytes; 
0592   071C 3B 49 21      mov d, _heap_top ; $heap_top
0593   071F 2A            mov b, [d]
0594   0720             ; START TERMS
0595   0720 D7            push a
0596   0721 11            mov a, b
0597   0722 FA 05 00      lea d, [bp + 5] ; $bytes
0598   0725 2A            mov b, [d]
0599   0726 60            sub a, b
0600   0727 27            mov b, a
0601   0728 E4            pop a
0602   0729             ; END TERMS
0603   0729 F9            leave
0604   072A 09            ret
0605   072B             
0606   072B             free:
0607   072B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0608   072E             ;; return heap_top = heap_top - bytes; 
0609   072E 3B 49 21      mov d, _heap_top ; $heap_top
0610   0731 DA            push d
0611   0732 3B 49 21      mov d, _heap_top ; $heap_top
0612   0735 2A            mov b, [d]
0613   0736             ; START TERMS
0614   0736 D7            push a
0615   0737 11            mov a, b
0616   0738 FA 05 00      lea d, [bp + 5] ; $bytes
0617   073B 2A            mov b, [d]
0618   073C 60            sub a, b
0619   073D 27            mov b, a
0620   073E E4            pop a
0621   073F             ; END TERMS
0622   073F E7            pop d
0623   0740 FD 43         mov [d], b
0624   0742 F9            leave
0625   0743 09            ret
0626   0744             
0627   0744             base64_encode:
0628   0744 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0629   0747             ; $i 
0630   0747 10 00 00      mov a, $0
0631   074A 45 FF FF      mov [bp + -1], a
0632   074D             ; $j 
0633   074D 10 00 00      mov a, $0
0634   0750 45 FD FF      mov [bp + -3], a
0635   0753             ; $k 
0636   0753             ; $input_len 
0637   0753             ; $input_buffer 
0638   0753             ; $output_buffer 
0639   0753 52 0F 00      sub sp, 15
0640   0756             ;; input_len = strlen(input); 
0641   0756 FA F9 FF      lea d, [bp + -7] ; $input_len
0642   0759 DA            push d
0643   075A FA 05 00      lea d, [bp + 5] ; $input
0644   075D 2A            mov b, [d]
0645   075E FD AB         swp b
0646   0760 D8            push b
0647   0761 07 7C 05      call strlen
0648   0764 51 02 00      add sp, 2
0649   0767 E7            pop d
0650   0768 FD 43         mov [d], b
0651   076A             ;; while (input_len--) { 
0652   076A             _while9_cond:
0653   076A FA F9 FF      lea d, [bp + -7] ; $input_len
0654   076D 2A            mov b, [d]
0655   076E D8            push b
0656   076F FD 7D         dec b
0657   0771 FA F9 FF      lea d, [bp + -7] ; $input_len
0658   0774 FD 43         mov [d], b
0659   0776 E5            pop b
0660   0777 C0 00 00      cmp b, 0
0661   077A C6 2E 09      je _while9_exit
0662   077D             _while9_block:
0663   077D             ;; input_buffer[i++] = *(input++); 
0664   077D FA F6 FF      lea d, [bp + -10] ; $input_buffer
0665   0780 D7            push a
0666   0781 DA            push d
0667   0782 FA FF FF      lea d, [bp + -1] ; $i
0668   0785 2A            mov b, [d]
0669   0786 D8            push b
0670   0787 FD 77         inc b
0671   0789 FA FF FF      lea d, [bp + -1] ; $i
0672   078C FD 43         mov [d], b
0673   078E E5            pop b
0674   078F E7            pop d
0675   0790 5A            add d, b
0676   0791 E4            pop a
0677   0792 DA            push d
0678   0793 FA 05 00      lea d, [bp + 5] ; $input
0679   0796 2A            mov b, [d]
0680   0797 D8            push b
0681   0798 FD 77         inc b
0682   079A FA 05 00      lea d, [bp + 5] ; $input
0683   079D FD 43         mov [d], b
0684   079F E5            pop b
0685   07A0 74            mov d, b
0686   07A1 32            mov bl, [d]
0687   07A2 A7 00         mov bh, 0
0688   07A4 E7            pop d
0689   07A5 FD 3E         mov [d], bl
0690   07A7             ;; if (i == 3) { 
0691   07A7             _if10_cond:
0692   07A7 FA FF FF      lea d, [bp + -1] ; $i
0693   07AA 2A            mov b, [d]
0694   07AB             ; START RELATIONAL
0695   07AB D7            push a
0696   07AC 11            mov a, b
0697   07AD 26 03 00      mov b, $3
0698   07B0 B0            cmp a, b
0699   07B1 FD 71         seq ; ==
0700   07B3 E4            pop a
0701   07B4             ; END RELATIONAL
0702   07B4 C0 00 00      cmp b, 0
0703   07B7 C6 2B 09      je _if10_exit
0704   07BA             _if10_true:
0705   07BA             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0706   07BA FA F2 FF      lea d, [bp + -14] ; $output_buffer
0707   07BD D7            push a
0708   07BE DA            push d
0709   07BF 26 00 00      mov b, $0
0710   07C2 E7            pop d
0711   07C3 5A            add d, b
0712   07C4 E4            pop a
0713   07C5 DA            push d
0714   07C6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0715   07C9 D7            push a
0716   07CA DA            push d
0717   07CB 26 00 00      mov b, $0
0718   07CE E7            pop d
0719   07CF 5A            add d, b
0720   07D0 E4            pop a
0721   07D1 32            mov bl, [d]
0722   07D2 A7 00         mov bh, 0
0723   07D4 D7            push a
0724   07D5 11            mov a, b
0725   07D6 26 FC 00      mov b, $fc
0726   07D9 86            and a, b ; &
0727   07DA 27            mov b, a
0728   07DB E4            pop a
0729   07DC             ; START SHIFT
0730   07DC D7            push a
0731   07DD 11            mov a, b
0732   07DE 26 02 00      mov b, $2
0733   07E1 FD 39         mov c, b
0734   07E3 A5            ashr a, cl
0735   07E4 27            mov b, a
0736   07E5 E4            pop a
0737   07E6             ; END SHIFT
0738   07E6 E7            pop d
0739   07E7 FD 3E         mov [d], bl
0740   07E9             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0741   07E9 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0742   07EC D7            push a
0743   07ED DA            push d
0744   07EE 26 01 00      mov b, $1
0745   07F1 E7            pop d
0746   07F2 5A            add d, b
0747   07F3 E4            pop a
0748   07F4 DA            push d
0749   07F5 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0750   07F8 D7            push a
0751   07F9 DA            push d
0752   07FA 26 00 00      mov b, $0
0753   07FD E7            pop d
0754   07FE 5A            add d, b
0755   07FF E4            pop a
0756   0800 32            mov bl, [d]
0757   0801 A7 00         mov bh, 0
0758   0803 D7            push a
0759   0804 11            mov a, b
0760   0805 26 03 00      mov b, $3
0761   0808 86            and a, b ; &
0762   0809 27            mov b, a
0763   080A E4            pop a
0764   080B             ; START SHIFT
0765   080B D7            push a
0766   080C 11            mov a, b
0767   080D 26 04 00      mov b, $4
0768   0810 FD 39         mov c, b
0769   0812 9D            shl a, cl
0770   0813 27            mov b, a
0771   0814 E4            pop a
0772   0815             ; END SHIFT
0773   0815             ; START TERMS
0774   0815 D7            push a
0775   0816 11            mov a, b
0776   0817 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0777   081A D7            push a
0778   081B DA            push d
0779   081C 26 01 00      mov b, $1
0780   081F E7            pop d
0781   0820 5A            add d, b
0782   0821 E4            pop a
0783   0822 32            mov bl, [d]
0784   0823 A7 00         mov bh, 0
0785   0825 D7            push a
0786   0826 11            mov a, b
0787   0827 26 F0 00      mov b, $f0
0788   082A 86            and a, b ; &
0789   082B 27            mov b, a
0790   082C E4            pop a
0791   082D             ; START SHIFT
0792   082D D7            push a
0793   082E 11            mov a, b
0794   082F 26 04 00      mov b, $4
0795   0832 FD 39         mov c, b
0796   0834 A5            ashr a, cl
0797   0835 27            mov b, a
0798   0836 E4            pop a
0799   0837             ; END SHIFT
0800   0837 56            add b, a
0801   0838 E4            pop a
0802   0839             ; END TERMS
0803   0839 E7            pop d
0804   083A FD 3E         mov [d], bl
0805   083C             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0806   083C FA F2 FF      lea d, [bp + -14] ; $output_buffer
0807   083F D7            push a
0808   0840 DA            push d
0809   0841 26 02 00      mov b, $2
0810   0844 E7            pop d
0811   0845 5A            add d, b
0812   0846 E4            pop a
0813   0847 DA            push d
0814   0848 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0815   084B D7            push a
0816   084C DA            push d
0817   084D 26 01 00      mov b, $1
0818   0850 E7            pop d
0819   0851 5A            add d, b
0820   0852 E4            pop a
0821   0853 32            mov bl, [d]
0822   0854 A7 00         mov bh, 0
0823   0856 D7            push a
0824   0857 11            mov a, b
0825   0858 26 0F 00      mov b, $f
0826   085B 86            and a, b ; &
0827   085C 27            mov b, a
0828   085D E4            pop a
0829   085E             ; START SHIFT
0830   085E D7            push a
0831   085F 11            mov a, b
0832   0860 26 02 00      mov b, $2
0833   0863 FD 39         mov c, b
0834   0865 9D            shl a, cl
0835   0866 27            mov b, a
0836   0867 E4            pop a
0837   0868             ; END SHIFT
0838   0868             ; START TERMS
0839   0868 D7            push a
0840   0869 11            mov a, b
0841   086A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0842   086D D7            push a
0843   086E DA            push d
0844   086F 26 02 00      mov b, $2
0845   0872 E7            pop d
0846   0873 5A            add d, b
0847   0874 E4            pop a
0848   0875 32            mov bl, [d]
0849   0876 A7 00         mov bh, 0
0850   0878 D7            push a
0851   0879 11            mov a, b
0852   087A 26 C0 00      mov b, $c0
0853   087D 86            and a, b ; &
0854   087E 27            mov b, a
0855   087F E4            pop a
0856   0880             ; START SHIFT
0857   0880 D7            push a
0858   0881 11            mov a, b
0859   0882 26 06 00      mov b, $6
0860   0885 FD 39         mov c, b
0861   0887 A5            ashr a, cl
0862   0888 27            mov b, a
0863   0889 E4            pop a
0864   088A             ; END SHIFT
0865   088A 56            add b, a
0866   088B E4            pop a
0867   088C             ; END TERMS
0868   088C E7            pop d
0869   088D FD 3E         mov [d], bl
0870   088F             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
0871   088F FA F2 FF      lea d, [bp + -14] ; $output_buffer
0872   0892 D7            push a
0873   0893 DA            push d
0874   0894 26 03 00      mov b, $3
0875   0897 E7            pop d
0876   0898 5A            add d, b
0877   0899 E4            pop a
0878   089A DA            push d
0879   089B FA F6 FF      lea d, [bp + -10] ; $input_buffer
0880   089E D7            push a
0881   089F DA            push d
0882   08A0 26 02 00      mov b, $2
0883   08A3 E7            pop d
0884   08A4 5A            add d, b
0885   08A5 E4            pop a
0886   08A6 32            mov bl, [d]
0887   08A7 A7 00         mov bh, 0
0888   08A9 D7            push a
0889   08AA 11            mov a, b
0890   08AB 26 3F 00      mov b, $3f
0891   08AE 86            and a, b ; &
0892   08AF 27            mov b, a
0893   08B0 E4            pop a
0894   08B1 E7            pop d
0895   08B2 FD 3E         mov [d], bl
0896   08B4             ;; for (i = 0; i < 4; i++) { 
0897   08B4             _for11_init:
0898   08B4 FA FF FF      lea d, [bp + -1] ; $i
0899   08B7 DA            push d
0900   08B8 26 00 00      mov b, $0
0901   08BB E7            pop d
0902   08BC FD 43         mov [d], b
0903   08BE             _for11_cond:
0904   08BE FA FF FF      lea d, [bp + -1] ; $i
0905   08C1 2A            mov b, [d]
0906   08C2             ; START RELATIONAL
0907   08C2 D7            push a
0908   08C3 11            mov a, b
0909   08C4 26 04 00      mov b, $4
0910   08C7 B0            cmp a, b
0911   08C8 FD 73         slt ; <= (signed)
0912   08CA E4            pop a
0913   08CB             ; END RELATIONAL
0914   08CB C0 00 00      cmp b, 0
0915   08CE C6 1E 09      je _for11_exit
0916   08D1             _for11_block:
0917   08D1             ;; output[j++] = base64_table[output_buffer[i]]; 
0918   08D1 FA 07 00      lea d, [bp + 7] ; $output
0919   08D4 FD 2A         mov d, [d]
0920   08D6 D7            push a
0921   08D7 DA            push d
0922   08D8 FA FD FF      lea d, [bp + -3] ; $j
0923   08DB 2A            mov b, [d]
0924   08DC D8            push b
0925   08DD FD 77         inc b
0926   08DF FA FD FF      lea d, [bp + -3] ; $j
0927   08E2 FD 43         mov [d], b
0928   08E4 E5            pop b
0929   08E5 E7            pop d
0930   08E6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0931   08EA E4            pop a
0932   08EB DA            push d
0933   08EC 3B 2F 20      mov d, _base64_table ; $base64_table
0934   08EF FD 2A         mov d, [d]
0935   08F1 D7            push a
0936   08F2 DA            push d
0937   08F3 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0938   08F6 D7            push a
0939   08F7 DA            push d
0940   08F8 FA FF FF      lea d, [bp + -1] ; $i
0941   08FB 2A            mov b, [d]
0942   08FC E7            pop d
0943   08FD 5A            add d, b
0944   08FE E4            pop a
0945   08FF 32            mov bl, [d]
0946   0900 A7 00         mov bh, 0
0947   0902 E7            pop d
0948   0903 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0949   0907 E4            pop a
0950   0908 32            mov bl, [d]
0951   0909 A7 00         mov bh, 0
0952   090B E7            pop d
0953   090C FD 3E         mov [d], bl
0954   090E             _for11_update:
0955   090E FA FF FF      lea d, [bp + -1] ; $i
0956   0911 2A            mov b, [d]
0957   0912 D8            push b
0958   0913 FD 77         inc b
0959   0915 FA FF FF      lea d, [bp + -1] ; $i
0960   0918 FD 43         mov [d], b
0961   091A E5            pop b
0962   091B 0A BE 08      jmp _for11_cond
0963   091E             _for11_exit:
0964   091E             ;; i = 0; 
0965   091E FA FF FF      lea d, [bp + -1] ; $i
0966   0921 DA            push d
0967   0922 26 00 00      mov b, $0
0968   0925 E7            pop d
0969   0926 FD 43         mov [d], b
0970   0928 0A 2B 09      jmp _if10_exit
0971   092B             _if10_exit:
0972   092B 0A 6A 07      jmp _while9_cond
0973   092E             _while9_exit:
0974   092E             ;; if (i) { 
0975   092E             _if12_cond:
0976   092E FA FF FF      lea d, [bp + -1] ; $i
0977   0931 2A            mov b, [d]
0978   0932 C0 00 00      cmp b, 0
0979   0935 C6 03 0B      je _if12_exit
0980   0938             _if12_true:
0981   0938             ;; for (k = i; k < 3; k++) { 
0982   0938             _for13_init:
0983   0938 FA FB FF      lea d, [bp + -5] ; $k
0984   093B DA            push d
0985   093C FA FF FF      lea d, [bp + -1] ; $i
0986   093F 2A            mov b, [d]
0987   0940 E7            pop d
0988   0941 FD 43         mov [d], b
0989   0943             _for13_cond:
0990   0943 FA FB FF      lea d, [bp + -5] ; $k
0991   0946 2A            mov b, [d]
0992   0947             ; START RELATIONAL
0993   0947 D7            push a
0994   0948 11            mov a, b
0995   0949 26 03 00      mov b, $3
0996   094C B0            cmp a, b
0997   094D FD 73         slt ; <= (signed)
0998   094F E4            pop a
0999   0950             ; END RELATIONAL
1000   0950 C0 00 00      cmp b, 0
1001   0953 C6 79 09      je _for13_exit
1002   0956             _for13_block:
1003   0956             ;; input_buffer[k] = '\0'; 
1004   0956 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1005   0959 D7            push a
1006   095A DA            push d
1007   095B FA FB FF      lea d, [bp + -5] ; $k
1008   095E 2A            mov b, [d]
1009   095F E7            pop d
1010   0960 5A            add d, b
1011   0961 E4            pop a
1012   0962 DA            push d
1013   0963 26 00 00      mov b, $0
1014   0966 E7            pop d
1015   0967 FD 3E         mov [d], bl
1016   0969             _for13_update:
1017   0969 FA FB FF      lea d, [bp + -5] ; $k
1018   096C 2A            mov b, [d]
1019   096D D8            push b
1020   096E FD 77         inc b
1021   0970 FA FB FF      lea d, [bp + -5] ; $k
1022   0973 FD 43         mov [d], b
1023   0975 E5            pop b
1024   0976 0A 43 09      jmp _for13_cond
1025   0979             _for13_exit:
1026   0979             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1027   0979 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1028   097C D7            push a
1029   097D DA            push d
1030   097E 26 00 00      mov b, $0
1031   0981 E7            pop d
1032   0982 5A            add d, b
1033   0983 E4            pop a
1034   0984 DA            push d
1035   0985 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1036   0988 D7            push a
1037   0989 DA            push d
1038   098A 26 00 00      mov b, $0
1039   098D E7            pop d
1040   098E 5A            add d, b
1041   098F E4            pop a
1042   0990 32            mov bl, [d]
1043   0991 A7 00         mov bh, 0
1044   0993 D7            push a
1045   0994 11            mov a, b
1046   0995 26 FC 00      mov b, $fc
1047   0998 86            and a, b ; &
1048   0999 27            mov b, a
1049   099A E4            pop a
1050   099B             ; START SHIFT
1051   099B D7            push a
1052   099C 11            mov a, b
1053   099D 26 02 00      mov b, $2
1054   09A0 FD 39         mov c, b
1055   09A2 A5            ashr a, cl
1056   09A3 27            mov b, a
1057   09A4 E4            pop a
1058   09A5             ; END SHIFT
1059   09A5 E7            pop d
1060   09A6 FD 3E         mov [d], bl
1061   09A8             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1062   09A8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1063   09AB D7            push a
1064   09AC DA            push d
1065   09AD 26 01 00      mov b, $1
1066   09B0 E7            pop d
1067   09B1 5A            add d, b
1068   09B2 E4            pop a
1069   09B3 DA            push d
1070   09B4 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1071   09B7 D7            push a
1072   09B8 DA            push d
1073   09B9 26 00 00      mov b, $0
1074   09BC E7            pop d
1075   09BD 5A            add d, b
1076   09BE E4            pop a
1077   09BF 32            mov bl, [d]
1078   09C0 A7 00         mov bh, 0
1079   09C2 D7            push a
1080   09C3 11            mov a, b
1081   09C4 26 03 00      mov b, $3
1082   09C7 86            and a, b ; &
1083   09C8 27            mov b, a
1084   09C9 E4            pop a
1085   09CA             ; START SHIFT
1086   09CA D7            push a
1087   09CB 11            mov a, b
1088   09CC 26 04 00      mov b, $4
1089   09CF FD 39         mov c, b
1090   09D1 9D            shl a, cl
1091   09D2 27            mov b, a
1092   09D3 E4            pop a
1093   09D4             ; END SHIFT
1094   09D4             ; START TERMS
1095   09D4 D7            push a
1096   09D5 11            mov a, b
1097   09D6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1098   09D9 D7            push a
1099   09DA DA            push d
1100   09DB 26 01 00      mov b, $1
1101   09DE E7            pop d
1102   09DF 5A            add d, b
1103   09E0 E4            pop a
1104   09E1 32            mov bl, [d]
1105   09E2 A7 00         mov bh, 0
1106   09E4 D7            push a
1107   09E5 11            mov a, b
1108   09E6 26 F0 00      mov b, $f0
1109   09E9 86            and a, b ; &
1110   09EA 27            mov b, a
1111   09EB E4            pop a
1112   09EC             ; START SHIFT
1113   09EC D7            push a
1114   09ED 11            mov a, b
1115   09EE 26 04 00      mov b, $4
1116   09F1 FD 39         mov c, b
1117   09F3 A5            ashr a, cl
1118   09F4 27            mov b, a
1119   09F5 E4            pop a
1120   09F6             ; END SHIFT
1121   09F6 56            add b, a
1122   09F7 E4            pop a
1123   09F8             ; END TERMS
1124   09F8 E7            pop d
1125   09F9 FD 3E         mov [d], bl
1126   09FB             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1127   09FB FA F2 FF      lea d, [bp + -14] ; $output_buffer
1128   09FE D7            push a
1129   09FF DA            push d
1130   0A00 26 02 00      mov b, $2
1131   0A03 E7            pop d
1132   0A04 5A            add d, b
1133   0A05 E4            pop a
1134   0A06 DA            push d
1135   0A07 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1136   0A0A D7            push a
1137   0A0B DA            push d
1138   0A0C 26 01 00      mov b, $1
1139   0A0F E7            pop d
1140   0A10 5A            add d, b
1141   0A11 E4            pop a
1142   0A12 32            mov bl, [d]
1143   0A13 A7 00         mov bh, 0
1144   0A15 D7            push a
1145   0A16 11            mov a, b
1146   0A17 26 0F 00      mov b, $f
1147   0A1A 86            and a, b ; &
1148   0A1B 27            mov b, a
1149   0A1C E4            pop a
1150   0A1D             ; START SHIFT
1151   0A1D D7            push a
1152   0A1E 11            mov a, b
1153   0A1F 26 02 00      mov b, $2
1154   0A22 FD 39         mov c, b
1155   0A24 9D            shl a, cl
1156   0A25 27            mov b, a
1157   0A26 E4            pop a
1158   0A27             ; END SHIFT
1159   0A27             ; START TERMS
1160   0A27 D7            push a
1161   0A28 11            mov a, b
1162   0A29 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1163   0A2C D7            push a
1164   0A2D DA            push d
1165   0A2E 26 02 00      mov b, $2
1166   0A31 E7            pop d
1167   0A32 5A            add d, b
1168   0A33 E4            pop a
1169   0A34 32            mov bl, [d]
1170   0A35 A7 00         mov bh, 0
1171   0A37 D7            push a
1172   0A38 11            mov a, b
1173   0A39 26 C0 00      mov b, $c0
1174   0A3C 86            and a, b ; &
1175   0A3D 27            mov b, a
1176   0A3E E4            pop a
1177   0A3F             ; START SHIFT
1178   0A3F D7            push a
1179   0A40 11            mov a, b
1180   0A41 26 06 00      mov b, $6
1181   0A44 FD 39         mov c, b
1182   0A46 A5            ashr a, cl
1183   0A47 27            mov b, a
1184   0A48 E4            pop a
1185   0A49             ; END SHIFT
1186   0A49 56            add b, a
1187   0A4A E4            pop a
1188   0A4B             ; END TERMS
1189   0A4B E7            pop d
1190   0A4C FD 3E         mov [d], bl
1191   0A4E             ;; for (k = 0; k < i + 1; k++) { 
1192   0A4E             _for14_init:
1193   0A4E FA FB FF      lea d, [bp + -5] ; $k
1194   0A51 DA            push d
1195   0A52 26 00 00      mov b, $0
1196   0A55 E7            pop d
1197   0A56 FD 43         mov [d], b
1198   0A58             _for14_cond:
1199   0A58 FA FB FF      lea d, [bp + -5] ; $k
1200   0A5B 2A            mov b, [d]
1201   0A5C             ; START RELATIONAL
1202   0A5C D7            push a
1203   0A5D 11            mov a, b
1204   0A5E FA FF FF      lea d, [bp + -1] ; $i
1205   0A61 2A            mov b, [d]
1206   0A62             ; START TERMS
1207   0A62 D7            push a
1208   0A63 11            mov a, b
1209   0A64 26 01 00      mov b, $1
1210   0A67 56            add b, a
1211   0A68 E4            pop a
1212   0A69             ; END TERMS
1213   0A69 B0            cmp a, b
1214   0A6A FD 73         slt ; <= (signed)
1215   0A6C E4            pop a
1216   0A6D             ; END RELATIONAL
1217   0A6D C0 00 00      cmp b, 0
1218   0A70 C6 C0 0A      je _for14_exit
1219   0A73             _for14_block:
1220   0A73             ;; output[j++] = base64_table[output_buffer[k]]; 
1221   0A73 FA 07 00      lea d, [bp + 7] ; $output
1222   0A76 FD 2A         mov d, [d]
1223   0A78 D7            push a
1224   0A79 DA            push d
1225   0A7A FA FD FF      lea d, [bp + -3] ; $j
1226   0A7D 2A            mov b, [d]
1227   0A7E D8            push b
1228   0A7F FD 77         inc b
1229   0A81 FA FD FF      lea d, [bp + -3] ; $j
1230   0A84 FD 43         mov [d], b
1231   0A86 E5            pop b
1232   0A87 E7            pop d
1233   0A88 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1234   0A8C E4            pop a
1235   0A8D DA            push d
1236   0A8E 3B 2F 20      mov d, _base64_table ; $base64_table
1237   0A91 FD 2A         mov d, [d]
1238   0A93 D7            push a
1239   0A94 DA            push d
1240   0A95 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1241   0A98 D7            push a
1242   0A99 DA            push d
1243   0A9A FA FB FF      lea d, [bp + -5] ; $k
1244   0A9D 2A            mov b, [d]
1245   0A9E E7            pop d
1246   0A9F 5A            add d, b
1247   0AA0 E4            pop a
1248   0AA1 32            mov bl, [d]
1249   0AA2 A7 00         mov bh, 0
1250   0AA4 E7            pop d
1251   0AA5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1252   0AA9 E4            pop a
1253   0AAA 32            mov bl, [d]
1254   0AAB A7 00         mov bh, 0
1255   0AAD E7            pop d
1256   0AAE FD 3E         mov [d], bl
1257   0AB0             _for14_update:
1258   0AB0 FA FB FF      lea d, [bp + -5] ; $k
1259   0AB3 2A            mov b, [d]
1260   0AB4 D8            push b
1261   0AB5 FD 77         inc b
1262   0AB7 FA FB FF      lea d, [bp + -5] ; $k
1263   0ABA FD 43         mov [d], b
1264   0ABC E5            pop b
1265   0ABD 0A 58 0A      jmp _for14_cond
1266   0AC0             _for14_exit:
1267   0AC0             ;; while (i++ < 3) { 
1268   0AC0             _while15_cond:
1269   0AC0 FA FF FF      lea d, [bp + -1] ; $i
1270   0AC3 2A            mov b, [d]
1271   0AC4 D8            push b
1272   0AC5 FD 77         inc b
1273   0AC7 FA FF FF      lea d, [bp + -1] ; $i
1274   0ACA FD 43         mov [d], b
1275   0ACC E5            pop b
1276   0ACD             ; START RELATIONAL
1277   0ACD D7            push a
1278   0ACE 11            mov a, b
1279   0ACF 26 03 00      mov b, $3
1280   0AD2 B0            cmp a, b
1281   0AD3 FD 73         slt ; <= (signed)
1282   0AD5 E4            pop a
1283   0AD6             ; END RELATIONAL
1284   0AD6 C0 00 00      cmp b, 0
1285   0AD9 C6 00 0B      je _while15_exit
1286   0ADC             _while15_block:
1287   0ADC             ;; output[j++] = '='; 
1288   0ADC FA 07 00      lea d, [bp + 7] ; $output
1289   0ADF FD 2A         mov d, [d]
1290   0AE1 D7            push a
1291   0AE2 DA            push d
1292   0AE3 FA FD FF      lea d, [bp + -3] ; $j
1293   0AE6 2A            mov b, [d]
1294   0AE7 D8            push b
1295   0AE8 FD 77         inc b
1296   0AEA FA FD FF      lea d, [bp + -3] ; $j
1297   0AED FD 43         mov [d], b
1298   0AEF E5            pop b
1299   0AF0 E7            pop d
1300   0AF1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1301   0AF5 E4            pop a
1302   0AF6 DA            push d
1303   0AF7 26 3D 00      mov b, $3d
1304   0AFA E7            pop d
1305   0AFB FD 3E         mov [d], bl
1306   0AFD 0A C0 0A      jmp _while15_cond
1307   0B00             _while15_exit:
1308   0B00 0A 03 0B      jmp _if12_exit
1309   0B03             _if12_exit:
1310   0B03             ;; output[j] = '\0'; 
1311   0B03 FA 07 00      lea d, [bp + 7] ; $output
1312   0B06 FD 2A         mov d, [d]
1313   0B08 D7            push a
1314   0B09 DA            push d
1315   0B0A FA FD FF      lea d, [bp + -3] ; $j
1316   0B0D 2A            mov b, [d]
1317   0B0E E7            pop d
1318   0B0F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1319   0B13 E4            pop a
1320   0B14 DA            push d
1321   0B15 26 00 00      mov b, $0
1322   0B18 E7            pop d
1323   0B19 FD 3E         mov [d], bl
1324   0B1B F9            leave
1325   0B1C 09            ret
1326   0B1D             
1327   0B1D             base64_char_value:
1328   0B1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1329   0B20             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1330   0B20             _if16_cond:
1331   0B20 FA 05 00      lea d, [bp + 5] ; $c
1332   0B23 32            mov bl, [d]
1333   0B24 A7 00         mov bh, 0
1334   0B26             ; START RELATIONAL
1335   0B26 D7            push a
1336   0B27 11            mov a, b
1337   0B28 26 41 00      mov b, $41
1338   0B2B B0            cmp a, b
1339   0B2C FD 80         sge ; >=
1340   0B2E E4            pop a
1341   0B2F             ; END RELATIONAL
1342   0B2F D7            push a
1343   0B30 11            mov a, b
1344   0B31 FA 05 00      lea d, [bp + 5] ; $c
1345   0B34 32            mov bl, [d]
1346   0B35 A7 00         mov bh, 0
1347   0B37             ; START RELATIONAL
1348   0B37 D7            push a
1349   0B38 11            mov a, b
1350   0B39 26 5A 00      mov b, $5a
1351   0B3C B0            cmp a, b
1352   0B3D FD 74         sle ; <=
1353   0B3F E4            pop a
1354   0B40             ; END RELATIONAL
1355   0B40 FD A7         sand a, b ; &&
1356   0B42 E4            pop a
1357   0B43 C0 00 00      cmp b, 0
1358   0B46 C6 5C 0B      je _if16_exit
1359   0B49             _if16_true:
1360   0B49             ;; return c - 'A'; 
1361   0B49 FA 05 00      lea d, [bp + 5] ; $c
1362   0B4C 32            mov bl, [d]
1363   0B4D A7 00         mov bh, 0
1364   0B4F             ; START TERMS
1365   0B4F D7            push a
1366   0B50 11            mov a, b
1367   0B51 26 41 00      mov b, $41
1368   0B54 60            sub a, b
1369   0B55 27            mov b, a
1370   0B56 E4            pop a
1371   0B57             ; END TERMS
1372   0B57 F9            leave
1373   0B58 09            ret
1374   0B59 0A 5C 0B      jmp _if16_exit
1375   0B5C             _if16_exit:
1376   0B5C             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1377   0B5C             _if17_cond:
1378   0B5C FA 05 00      lea d, [bp + 5] ; $c
1379   0B5F 32            mov bl, [d]
1380   0B60 A7 00         mov bh, 0
1381   0B62             ; START RELATIONAL
1382   0B62 D7            push a
1383   0B63 11            mov a, b
1384   0B64 26 61 00      mov b, $61
1385   0B67 B0            cmp a, b
1386   0B68 FD 80         sge ; >=
1387   0B6A E4            pop a
1388   0B6B             ; END RELATIONAL
1389   0B6B D7            push a
1390   0B6C 11            mov a, b
1391   0B6D FA 05 00      lea d, [bp + 5] ; $c
1392   0B70 32            mov bl, [d]
1393   0B71 A7 00         mov bh, 0
1394   0B73             ; START RELATIONAL
1395   0B73 D7            push a
1396   0B74 11            mov a, b
1397   0B75 26 7A 00      mov b, $7a
1398   0B78 B0            cmp a, b
1399   0B79 FD 74         sle ; <=
1400   0B7B E4            pop a
1401   0B7C             ; END RELATIONAL
1402   0B7C FD A7         sand a, b ; &&
1403   0B7E E4            pop a
1404   0B7F C0 00 00      cmp b, 0
1405   0B82 C6 9D 0B      je _if17_exit
1406   0B85             _if17_true:
1407   0B85             ;; return c - 'a' + 26; 
1408   0B85 FA 05 00      lea d, [bp + 5] ; $c
1409   0B88 32            mov bl, [d]
1410   0B89 A7 00         mov bh, 0
1411   0B8B             ; START TERMS
1412   0B8B D7            push a
1413   0B8C 11            mov a, b
1414   0B8D 26 61 00      mov b, $61
1415   0B90 60            sub a, b
1416   0B91 27            mov b, a
1417   0B92 11            mov a, b
1418   0B93 26 1A 00      mov b, $1a
1419   0B96 56            add b, a
1420   0B97 E4            pop a
1421   0B98             ; END TERMS
1422   0B98 F9            leave
1423   0B99 09            ret
1424   0B9A 0A 9D 0B      jmp _if17_exit
1425   0B9D             _if17_exit:
1426   0B9D             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1427   0B9D             _if18_cond:
1428   0B9D FA 05 00      lea d, [bp + 5] ; $c
1429   0BA0 32            mov bl, [d]
1430   0BA1 A7 00         mov bh, 0
1431   0BA3             ; START RELATIONAL
1432   0BA3 D7            push a
1433   0BA4 11            mov a, b
1434   0BA5 26 30 00      mov b, $30
1435   0BA8 B0            cmp a, b
1436   0BA9 FD 80         sge ; >=
1437   0BAB E4            pop a
1438   0BAC             ; END RELATIONAL
1439   0BAC D7            push a
1440   0BAD 11            mov a, b
1441   0BAE FA 05 00      lea d, [bp + 5] ; $c
1442   0BB1 32            mov bl, [d]
1443   0BB2 A7 00         mov bh, 0
1444   0BB4             ; START RELATIONAL
1445   0BB4 D7            push a
1446   0BB5 11            mov a, b
1447   0BB6 26 39 00      mov b, $39
1448   0BB9 B0            cmp a, b
1449   0BBA FD 74         sle ; <=
1450   0BBC E4            pop a
1451   0BBD             ; END RELATIONAL
1452   0BBD FD A7         sand a, b ; &&
1453   0BBF E4            pop a
1454   0BC0 C0 00 00      cmp b, 0
1455   0BC3 C6 DE 0B      je _if18_exit
1456   0BC6             _if18_true:
1457   0BC6             ;; return c - '0' + 52; 
1458   0BC6 FA 05 00      lea d, [bp + 5] ; $c
1459   0BC9 32            mov bl, [d]
1460   0BCA A7 00         mov bh, 0
1461   0BCC             ; START TERMS
1462   0BCC D7            push a
1463   0BCD 11            mov a, b
1464   0BCE 26 30 00      mov b, $30
1465   0BD1 60            sub a, b
1466   0BD2 27            mov b, a
1467   0BD3 11            mov a, b
1468   0BD4 26 34 00      mov b, $34
1469   0BD7 56            add b, a
1470   0BD8 E4            pop a
1471   0BD9             ; END TERMS
1472   0BD9 F9            leave
1473   0BDA 09            ret
1474   0BDB 0A DE 0B      jmp _if18_exit
1475   0BDE             _if18_exit:
1476   0BDE             ;; if (c == '+') return 62; 
1477   0BDE             _if19_cond:
1478   0BDE FA 05 00      lea d, [bp + 5] ; $c
1479   0BE1 32            mov bl, [d]
1480   0BE2 A7 00         mov bh, 0
1481   0BE4             ; START RELATIONAL
1482   0BE4 D7            push a
1483   0BE5 11            mov a, b
1484   0BE6 26 2B 00      mov b, $2b
1485   0BE9 B0            cmp a, b
1486   0BEA FD 71         seq ; ==
1487   0BEC E4            pop a
1488   0BED             ; END RELATIONAL
1489   0BED C0 00 00      cmp b, 0
1490   0BF0 C6 FB 0B      je _if19_exit
1491   0BF3             _if19_true:
1492   0BF3             ;; return 62; 
1493   0BF3 26 3E 00      mov b, $3e
1494   0BF6 F9            leave
1495   0BF7 09            ret
1496   0BF8 0A FB 0B      jmp _if19_exit
1497   0BFB             _if19_exit:
1498   0BFB             ;; if (c == '/') return 63; 
1499   0BFB             _if20_cond:
1500   0BFB FA 05 00      lea d, [bp + 5] ; $c
1501   0BFE 32            mov bl, [d]
1502   0BFF A7 00         mov bh, 0
1503   0C01             ; START RELATIONAL
1504   0C01 D7            push a
1505   0C02 11            mov a, b
1506   0C03 26 2F 00      mov b, $2f
1507   0C06 B0            cmp a, b
1508   0C07 FD 71         seq ; ==
1509   0C09 E4            pop a
1510   0C0A             ; END RELATIONAL
1511   0C0A C0 00 00      cmp b, 0
1512   0C0D C6 18 0C      je _if20_exit
1513   0C10             _if20_true:
1514   0C10             ;; return 63; 
1515   0C10 26 3F 00      mov b, $3f
1516   0C13 F9            leave
1517   0C14 09            ret
1518   0C15 0A 18 0C      jmp _if20_exit
1519   0C18             _if20_exit:
1520   0C18             ;; return -1; 
1521   0C18 26 FF FF      mov b, $ffff
1522   0C1B F9            leave
1523   0C1C 09            ret
1524   0C1D             
1525   0C1D             base64_decode:
1526   0C1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1527   0C20             ; $i 
1528   0C20 10 00 00      mov a, $0
1529   0C23 45 FF FF      mov [bp + -1], a
1530   0C26             ; $j 
1531   0C26 10 00 00      mov a, $0
1532   0C29 45 FD FF      mov [bp + -3], a
1533   0C2C             ; $k 
1534   0C2C 10 00 00      mov a, $0
1535   0C2F 45 FB FF      mov [bp + -5], a
1536   0C32             ; $input_len 
1537   0C32             ; $input_buffer 
1538   0C32             ; $output_buffer 
1539   0C32 52 0F 00      sub sp, 15
1540   0C35             ;; input_len = strlen(input); 
1541   0C35 FA F9 FF      lea d, [bp + -7] ; $input_len
1542   0C38 DA            push d
1543   0C39 FA 05 00      lea d, [bp + 5] ; $input
1544   0C3C 2A            mov b, [d]
1545   0C3D FD AB         swp b
1546   0C3F D8            push b
1547   0C40 07 7C 05      call strlen
1548   0C43 51 02 00      add sp, 2
1549   0C46 E7            pop d
1550   0C47 FD 43         mov [d], b
1551   0C49             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1552   0C49             _while21_cond:
1553   0C49 FA F9 FF      lea d, [bp + -7] ; $input_len
1554   0C4C 2A            mov b, [d]
1555   0C4D D8            push b
1556   0C4E FD 7D         dec b
1557   0C50 FA F9 FF      lea d, [bp + -7] ; $input_len
1558   0C53 FD 43         mov [d], b
1559   0C55 E5            pop b
1560   0C56 D7            push a
1561   0C57 11            mov a, b
1562   0C58 FA 05 00      lea d, [bp + 5] ; $input
1563   0C5B FD 2A         mov d, [d]
1564   0C5D D7            push a
1565   0C5E DA            push d
1566   0C5F FA FB FF      lea d, [bp + -5] ; $k
1567   0C62 2A            mov b, [d]
1568   0C63 E7            pop d
1569   0C64 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1570   0C68 E4            pop a
1571   0C69 32            mov bl, [d]
1572   0C6A A7 00         mov bh, 0
1573   0C6C             ; START RELATIONAL
1574   0C6C D7            push a
1575   0C6D 11            mov a, b
1576   0C6E 26 3D 00      mov b, $3d
1577   0C71 B0            cmp a, b
1578   0C72 FD 72         sneq ; !=
1579   0C74 E4            pop a
1580   0C75             ; END RELATIONAL
1581   0C75 FD A7         sand a, b ; &&
1582   0C77 11            mov a, b
1583   0C78 FA 05 00      lea d, [bp + 5] ; $input
1584   0C7B FD 2A         mov d, [d]
1585   0C7D D7            push a
1586   0C7E DA            push d
1587   0C7F FA FB FF      lea d, [bp + -5] ; $k
1588   0C82 2A            mov b, [d]
1589   0C83 E7            pop d
1590   0C84 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1591   0C88 E4            pop a
1592   0C89 32            mov bl, [d]
1593   0C8A A7 00         mov bh, 0
1594   0C8C DD            push bl
1595   0C8D 07 1D 0B      call base64_char_value
1596   0C90 51 01 00      add sp, 1
1597   0C93             ; START RELATIONAL
1598   0C93 D7            push a
1599   0C94 11            mov a, b
1600   0C95 26 FF FF      mov b, $ffff
1601   0C98 B0            cmp a, b
1602   0C99 FD 72         sneq ; !=
1603   0C9B E4            pop a
1604   0C9C             ; END RELATIONAL
1605   0C9C FD A7         sand a, b ; &&
1606   0C9E E4            pop a
1607   0C9F C0 00 00      cmp b, 0
1608   0CA2 C6 8A 0E      je _while21_exit
1609   0CA5             _while21_block:
1610   0CA5             ;; input_buffer[i++] = input[k++]; 
1611   0CA5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1612   0CA8 D7            push a
1613   0CA9 DA            push d
1614   0CAA FA FF FF      lea d, [bp + -1] ; $i
1615   0CAD 2A            mov b, [d]
1616   0CAE D8            push b
1617   0CAF FD 77         inc b
1618   0CB1 FA FF FF      lea d, [bp + -1] ; $i
1619   0CB4 FD 43         mov [d], b
1620   0CB6 E5            pop b
1621   0CB7 E7            pop d
1622   0CB8 5A            add d, b
1623   0CB9 E4            pop a
1624   0CBA DA            push d
1625   0CBB FA 05 00      lea d, [bp + 5] ; $input
1626   0CBE FD 2A         mov d, [d]
1627   0CC0 D7            push a
1628   0CC1 DA            push d
1629   0CC2 FA FB FF      lea d, [bp + -5] ; $k
1630   0CC5 2A            mov b, [d]
1631   0CC6 D8            push b
1632   0CC7 FD 77         inc b
1633   0CC9 FA FB FF      lea d, [bp + -5] ; $k
1634   0CCC FD 43         mov [d], b
1635   0CCE E5            pop b
1636   0CCF E7            pop d
1637   0CD0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1638   0CD4 E4            pop a
1639   0CD5 32            mov bl, [d]
1640   0CD6 A7 00         mov bh, 0
1641   0CD8 E7            pop d
1642   0CD9 FD 3E         mov [d], bl
1643   0CDB             ;; if (i == 4) { 
1644   0CDB             _if22_cond:
1645   0CDB FA FF FF      lea d, [bp + -1] ; $i
1646   0CDE 2A            mov b, [d]
1647   0CDF             ; START RELATIONAL
1648   0CDF D7            push a
1649   0CE0 11            mov a, b
1650   0CE1 26 04 00      mov b, $4
1651   0CE4 B0            cmp a, b
1652   0CE5 FD 71         seq ; ==
1653   0CE7 E4            pop a
1654   0CE8             ; END RELATIONAL
1655   0CE8 C0 00 00      cmp b, 0
1656   0CEB C6 87 0E      je _if22_exit
1657   0CEE             _if22_true:
1658   0CEE             ;; for (i = 0; i < 4; i++) { 
1659   0CEE             _for23_init:
1660   0CEE FA FF FF      lea d, [bp + -1] ; $i
1661   0CF1 DA            push d
1662   0CF2 26 00 00      mov b, $0
1663   0CF5 E7            pop d
1664   0CF6 FD 43         mov [d], b
1665   0CF8             _for23_cond:
1666   0CF8 FA FF FF      lea d, [bp + -1] ; $i
1667   0CFB 2A            mov b, [d]
1668   0CFC             ; START RELATIONAL
1669   0CFC D7            push a
1670   0CFD 11            mov a, b
1671   0CFE 26 04 00      mov b, $4
1672   0D01 B0            cmp a, b
1673   0D02 FD 73         slt ; <= (signed)
1674   0D04 E4            pop a
1675   0D05             ; END RELATIONAL
1676   0D05 C0 00 00      cmp b, 0
1677   0D08 C6 41 0D      je _for23_exit
1678   0D0B             _for23_block:
1679   0D0B             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
1680   0D0B FA F5 FF      lea d, [bp + -11] ; $input_buffer
1681   0D0E D7            push a
1682   0D0F DA            push d
1683   0D10 FA FF FF      lea d, [bp + -1] ; $i
1684   0D13 2A            mov b, [d]
1685   0D14 E7            pop d
1686   0D15 5A            add d, b
1687   0D16 E4            pop a
1688   0D17 DA            push d
1689   0D18 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1690   0D1B D7            push a
1691   0D1C DA            push d
1692   0D1D FA FF FF      lea d, [bp + -1] ; $i
1693   0D20 2A            mov b, [d]
1694   0D21 E7            pop d
1695   0D22 5A            add d, b
1696   0D23 E4            pop a
1697   0D24 32            mov bl, [d]
1698   0D25 A7 00         mov bh, 0
1699   0D27 DD            push bl
1700   0D28 07 1D 0B      call base64_char_value
1701   0D2B 51 01 00      add sp, 1
1702   0D2E E7            pop d
1703   0D2F FD 3E         mov [d], bl
1704   0D31             _for23_update:
1705   0D31 FA FF FF      lea d, [bp + -1] ; $i
1706   0D34 2A            mov b, [d]
1707   0D35 D8            push b
1708   0D36 FD 77         inc b
1709   0D38 FA FF FF      lea d, [bp + -1] ; $i
1710   0D3B FD 43         mov [d], b
1711   0D3D E5            pop b
1712   0D3E 0A F8 0C      jmp _for23_cond
1713   0D41             _for23_exit:
1714   0D41             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1715   0D41 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1716   0D44 D7            push a
1717   0D45 DA            push d
1718   0D46 26 00 00      mov b, $0
1719   0D49 E7            pop d
1720   0D4A 5A            add d, b
1721   0D4B E4            pop a
1722   0D4C DA            push d
1723   0D4D FA F5 FF      lea d, [bp + -11] ; $input_buffer
1724   0D50 D7            push a
1725   0D51 DA            push d
1726   0D52 26 00 00      mov b, $0
1727   0D55 E7            pop d
1728   0D56 5A            add d, b
1729   0D57 E4            pop a
1730   0D58 32            mov bl, [d]
1731   0D59 A7 00         mov bh, 0
1732   0D5B             ; START SHIFT
1733   0D5B D7            push a
1734   0D5C 11            mov a, b
1735   0D5D 26 02 00      mov b, $2
1736   0D60 FD 39         mov c, b
1737   0D62 9D            shl a, cl
1738   0D63 27            mov b, a
1739   0D64 E4            pop a
1740   0D65             ; END SHIFT
1741   0D65             ; START TERMS
1742   0D65 D7            push a
1743   0D66 11            mov a, b
1744   0D67 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1745   0D6A D7            push a
1746   0D6B DA            push d
1747   0D6C 26 01 00      mov b, $1
1748   0D6F E7            pop d
1749   0D70 5A            add d, b
1750   0D71 E4            pop a
1751   0D72 32            mov bl, [d]
1752   0D73 A7 00         mov bh, 0
1753   0D75 D7            push a
1754   0D76 11            mov a, b
1755   0D77 26 30 00      mov b, $30
1756   0D7A 86            and a, b ; &
1757   0D7B 27            mov b, a
1758   0D7C E4            pop a
1759   0D7D             ; START SHIFT
1760   0D7D D7            push a
1761   0D7E 11            mov a, b
1762   0D7F 26 04 00      mov b, $4
1763   0D82 FD 39         mov c, b
1764   0D84 A5            ashr a, cl
1765   0D85 27            mov b, a
1766   0D86 E4            pop a
1767   0D87             ; END SHIFT
1768   0D87 56            add b, a
1769   0D88 E4            pop a
1770   0D89             ; END TERMS
1771   0D89 E7            pop d
1772   0D8A FD 3E         mov [d], bl
1773   0D8C             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1774   0D8C FA F2 FF      lea d, [bp + -14] ; $output_buffer
1775   0D8F D7            push a
1776   0D90 DA            push d
1777   0D91 26 01 00      mov b, $1
1778   0D94 E7            pop d
1779   0D95 5A            add d, b
1780   0D96 E4            pop a
1781   0D97 DA            push d
1782   0D98 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1783   0D9B D7            push a
1784   0D9C DA            push d
1785   0D9D 26 01 00      mov b, $1
1786   0DA0 E7            pop d
1787   0DA1 5A            add d, b
1788   0DA2 E4            pop a
1789   0DA3 32            mov bl, [d]
1790   0DA4 A7 00         mov bh, 0
1791   0DA6 D7            push a
1792   0DA7 11            mov a, b
1793   0DA8 26 0F 00      mov b, $f
1794   0DAB 86            and a, b ; &
1795   0DAC 27            mov b, a
1796   0DAD E4            pop a
1797   0DAE             ; START SHIFT
1798   0DAE D7            push a
1799   0DAF 11            mov a, b
1800   0DB0 26 04 00      mov b, $4
1801   0DB3 FD 39         mov c, b
1802   0DB5 9D            shl a, cl
1803   0DB6 27            mov b, a
1804   0DB7 E4            pop a
1805   0DB8             ; END SHIFT
1806   0DB8             ; START TERMS
1807   0DB8 D7            push a
1808   0DB9 11            mov a, b
1809   0DBA FA F5 FF      lea d, [bp + -11] ; $input_buffer
1810   0DBD D7            push a
1811   0DBE DA            push d
1812   0DBF 26 02 00      mov b, $2
1813   0DC2 E7            pop d
1814   0DC3 5A            add d, b
1815   0DC4 E4            pop a
1816   0DC5 32            mov bl, [d]
1817   0DC6 A7 00         mov bh, 0
1818   0DC8 D7            push a
1819   0DC9 11            mov a, b
1820   0DCA 26 3C 00      mov b, $3c
1821   0DCD 86            and a, b ; &
1822   0DCE 27            mov b, a
1823   0DCF E4            pop a
1824   0DD0             ; START SHIFT
1825   0DD0 D7            push a
1826   0DD1 11            mov a, b
1827   0DD2 26 02 00      mov b, $2
1828   0DD5 FD 39         mov c, b
1829   0DD7 A5            ashr a, cl
1830   0DD8 27            mov b, a
1831   0DD9 E4            pop a
1832   0DDA             ; END SHIFT
1833   0DDA 56            add b, a
1834   0DDB E4            pop a
1835   0DDC             ; END TERMS
1836   0DDC E7            pop d
1837   0DDD FD 3E         mov [d], bl
1838   0DDF             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1839   0DDF FA F2 FF      lea d, [bp + -14] ; $output_buffer
1840   0DE2 D7            push a
1841   0DE3 DA            push d
1842   0DE4 26 02 00      mov b, $2
1843   0DE7 E7            pop d
1844   0DE8 5A            add d, b
1845   0DE9 E4            pop a
1846   0DEA DA            push d
1847   0DEB FA F5 FF      lea d, [bp + -11] ; $input_buffer
1848   0DEE D7            push a
1849   0DEF DA            push d
1850   0DF0 26 02 00      mov b, $2
1851   0DF3 E7            pop d
1852   0DF4 5A            add d, b
1853   0DF5 E4            pop a
1854   0DF6 32            mov bl, [d]
1855   0DF7 A7 00         mov bh, 0
1856   0DF9 D7            push a
1857   0DFA 11            mov a, b
1858   0DFB 26 03 00      mov b, $3
1859   0DFE 86            and a, b ; &
1860   0DFF 27            mov b, a
1861   0E00 E4            pop a
1862   0E01             ; START SHIFT
1863   0E01 D7            push a
1864   0E02 11            mov a, b
1865   0E03 26 06 00      mov b, $6
1866   0E06 FD 39         mov c, b
1867   0E08 9D            shl a, cl
1868   0E09 27            mov b, a
1869   0E0A E4            pop a
1870   0E0B             ; END SHIFT
1871   0E0B             ; START TERMS
1872   0E0B D7            push a
1873   0E0C 11            mov a, b
1874   0E0D FA F5 FF      lea d, [bp + -11] ; $input_buffer
1875   0E10 D7            push a
1876   0E11 DA            push d
1877   0E12 26 03 00      mov b, $3
1878   0E15 E7            pop d
1879   0E16 5A            add d, b
1880   0E17 E4            pop a
1881   0E18 32            mov bl, [d]
1882   0E19 A7 00         mov bh, 0
1883   0E1B 56            add b, a
1884   0E1C E4            pop a
1885   0E1D             ; END TERMS
1886   0E1D E7            pop d
1887   0E1E FD 3E         mov [d], bl
1888   0E20             ;; for (i = 0; i < 3; i++) { 
1889   0E20             _for24_init:
1890   0E20 FA FF FF      lea d, [bp + -1] ; $i
1891   0E23 DA            push d
1892   0E24 26 00 00      mov b, $0
1893   0E27 E7            pop d
1894   0E28 FD 43         mov [d], b
1895   0E2A             _for24_cond:
1896   0E2A FA FF FF      lea d, [bp + -1] ; $i
1897   0E2D 2A            mov b, [d]
1898   0E2E             ; START RELATIONAL
1899   0E2E D7            push a
1900   0E2F 11            mov a, b
1901   0E30 26 03 00      mov b, $3
1902   0E33 B0            cmp a, b
1903   0E34 FD 73         slt ; <= (signed)
1904   0E36 E4            pop a
1905   0E37             ; END RELATIONAL
1906   0E37 C0 00 00      cmp b, 0
1907   0E3A C6 7A 0E      je _for24_exit
1908   0E3D             _for24_block:
1909   0E3D             ;; output[j++] = output_buffer[i]; 
1910   0E3D FA 07 00      lea d, [bp + 7] ; $output
1911   0E40 FD 2A         mov d, [d]
1912   0E42 D7            push a
1913   0E43 DA            push d
1914   0E44 FA FD FF      lea d, [bp + -3] ; $j
1915   0E47 2A            mov b, [d]
1916   0E48 D8            push b
1917   0E49 FD 77         inc b
1918   0E4B FA FD FF      lea d, [bp + -3] ; $j
1919   0E4E FD 43         mov [d], b
1920   0E50 E5            pop b
1921   0E51 E7            pop d
1922   0E52 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1923   0E56 E4            pop a
1924   0E57 DA            push d
1925   0E58 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1926   0E5B D7            push a
1927   0E5C DA            push d
1928   0E5D FA FF FF      lea d, [bp + -1] ; $i
1929   0E60 2A            mov b, [d]
1930   0E61 E7            pop d
1931   0E62 5A            add d, b
1932   0E63 E4            pop a
1933   0E64 32            mov bl, [d]
1934   0E65 A7 00         mov bh, 0
1935   0E67 E7            pop d
1936   0E68 FD 3E         mov [d], bl
1937   0E6A             _for24_update:
1938   0E6A FA FF FF      lea d, [bp + -1] ; $i
1939   0E6D 2A            mov b, [d]
1940   0E6E D8            push b
1941   0E6F FD 77         inc b
1942   0E71 FA FF FF      lea d, [bp + -1] ; $i
1943   0E74 FD 43         mov [d], b
1944   0E76 E5            pop b
1945   0E77 0A 2A 0E      jmp _for24_cond
1946   0E7A             _for24_exit:
1947   0E7A             ;; i = 0; 
1948   0E7A FA FF FF      lea d, [bp + -1] ; $i
1949   0E7D DA            push d
1950   0E7E 26 00 00      mov b, $0
1951   0E81 E7            pop d
1952   0E82 FD 43         mov [d], b
1953   0E84 0A 87 0E      jmp _if22_exit
1954   0E87             _if22_exit:
1955   0E87 0A 49 0C      jmp _while21_cond
1956   0E8A             _while21_exit:
1957   0E8A             ;; if (i) { 
1958   0E8A             _if25_cond:
1959   0E8A FA FF FF      lea d, [bp + -1] ; $i
1960   0E8D 2A            mov b, [d]
1961   0E8E C0 00 00      cmp b, 0
1962   0E91 C6 2C 10      je _if25_exit
1963   0E94             _if25_true:
1964   0E94             ;; for (k = i; k < 4; k++) { 
1965   0E94             _for26_init:
1966   0E94 FA FB FF      lea d, [bp + -5] ; $k
1967   0E97 DA            push d
1968   0E98 FA FF FF      lea d, [bp + -1] ; $i
1969   0E9B 2A            mov b, [d]
1970   0E9C E7            pop d
1971   0E9D FD 43         mov [d], b
1972   0E9F             _for26_cond:
1973   0E9F FA FB FF      lea d, [bp + -5] ; $k
1974   0EA2 2A            mov b, [d]
1975   0EA3             ; START RELATIONAL
1976   0EA3 D7            push a
1977   0EA4 11            mov a, b
1978   0EA5 26 04 00      mov b, $4
1979   0EA8 B0            cmp a, b
1980   0EA9 FD 73         slt ; <= (signed)
1981   0EAB E4            pop a
1982   0EAC             ; END RELATIONAL
1983   0EAC C0 00 00      cmp b, 0
1984   0EAF C6 D5 0E      je _for26_exit
1985   0EB2             _for26_block:
1986   0EB2             ;; input_buffer[k] = 0; 
1987   0EB2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1988   0EB5 D7            push a
1989   0EB6 DA            push d
1990   0EB7 FA FB FF      lea d, [bp + -5] ; $k
1991   0EBA 2A            mov b, [d]
1992   0EBB E7            pop d
1993   0EBC 5A            add d, b
1994   0EBD E4            pop a
1995   0EBE DA            push d
1996   0EBF 26 00 00      mov b, $0
1997   0EC2 E7            pop d
1998   0EC3 FD 3E         mov [d], bl
1999   0EC5             _for26_update:
2000   0EC5 FA FB FF      lea d, [bp + -5] ; $k
2001   0EC8 2A            mov b, [d]
2002   0EC9 D8            push b
2003   0ECA FD 77         inc b
2004   0ECC FA FB FF      lea d, [bp + -5] ; $k
2005   0ECF FD 43         mov [d], b
2006   0ED1 E5            pop b
2007   0ED2 0A 9F 0E      jmp _for26_cond
2008   0ED5             _for26_exit:
2009   0ED5             ;; for (k = 0; k < 4; k++) { 
2010   0ED5             _for27_init:
2011   0ED5 FA FB FF      lea d, [bp + -5] ; $k
2012   0ED8 DA            push d
2013   0ED9 26 00 00      mov b, $0
2014   0EDC E7            pop d
2015   0EDD FD 43         mov [d], b
2016   0EDF             _for27_cond:
2017   0EDF FA FB FF      lea d, [bp + -5] ; $k
2018   0EE2 2A            mov b, [d]
2019   0EE3             ; START RELATIONAL
2020   0EE3 D7            push a
2021   0EE4 11            mov a, b
2022   0EE5 26 04 00      mov b, $4
2023   0EE8 B0            cmp a, b
2024   0EE9 FD 73         slt ; <= (signed)
2025   0EEB E4            pop a
2026   0EEC             ; END RELATIONAL
2027   0EEC C0 00 00      cmp b, 0
2028   0EEF C6 28 0F      je _for27_exit
2029   0EF2             _for27_block:
2030   0EF2             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2031   0EF2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2032   0EF5 D7            push a
2033   0EF6 DA            push d
2034   0EF7 FA FB FF      lea d, [bp + -5] ; $k
2035   0EFA 2A            mov b, [d]
2036   0EFB E7            pop d
2037   0EFC 5A            add d, b
2038   0EFD E4            pop a
2039   0EFE DA            push d
2040   0EFF FA F5 FF      lea d, [bp + -11] ; $input_buffer
2041   0F02 D7            push a
2042   0F03 DA            push d
2043   0F04 FA FB FF      lea d, [bp + -5] ; $k
2044   0F07 2A            mov b, [d]
2045   0F08 E7            pop d
2046   0F09 5A            add d, b
2047   0F0A E4            pop a
2048   0F0B 32            mov bl, [d]
2049   0F0C A7 00         mov bh, 0
2050   0F0E DD            push bl
2051   0F0F 07 1D 0B      call base64_char_value
2052   0F12 51 01 00      add sp, 1
2053   0F15 E7            pop d
2054   0F16 FD 3E         mov [d], bl
2055   0F18             _for27_update:
2056   0F18 FA FB FF      lea d, [bp + -5] ; $k
2057   0F1B 2A            mov b, [d]
2058   0F1C D8            push b
2059   0F1D FD 77         inc b
2060   0F1F FA FB FF      lea d, [bp + -5] ; $k
2061   0F22 FD 43         mov [d], b
2062   0F24 E5            pop b
2063   0F25 0A DF 0E      jmp _for27_cond
2064   0F28             _for27_exit:
2065   0F28             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2066   0F28 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2067   0F2B D7            push a
2068   0F2C DA            push d
2069   0F2D 26 00 00      mov b, $0
2070   0F30 E7            pop d
2071   0F31 5A            add d, b
2072   0F32 E4            pop a
2073   0F33 DA            push d
2074   0F34 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2075   0F37 D7            push a
2076   0F38 DA            push d
2077   0F39 26 00 00      mov b, $0
2078   0F3C E7            pop d
2079   0F3D 5A            add d, b
2080   0F3E E4            pop a
2081   0F3F 32            mov bl, [d]
2082   0F40 A7 00         mov bh, 0
2083   0F42             ; START SHIFT
2084   0F42 D7            push a
2085   0F43 11            mov a, b
2086   0F44 26 02 00      mov b, $2
2087   0F47 FD 39         mov c, b
2088   0F49 9D            shl a, cl
2089   0F4A 27            mov b, a
2090   0F4B E4            pop a
2091   0F4C             ; END SHIFT
2092   0F4C             ; START TERMS
2093   0F4C D7            push a
2094   0F4D 11            mov a, b
2095   0F4E FA F5 FF      lea d, [bp + -11] ; $input_buffer
2096   0F51 D7            push a
2097   0F52 DA            push d
2098   0F53 26 01 00      mov b, $1
2099   0F56 E7            pop d
2100   0F57 5A            add d, b
2101   0F58 E4            pop a
2102   0F59 32            mov bl, [d]
2103   0F5A A7 00         mov bh, 0
2104   0F5C D7            push a
2105   0F5D 11            mov a, b
2106   0F5E 26 30 00      mov b, $30
2107   0F61 86            and a, b ; &
2108   0F62 27            mov b, a
2109   0F63 E4            pop a
2110   0F64             ; START SHIFT
2111   0F64 D7            push a
2112   0F65 11            mov a, b
2113   0F66 26 04 00      mov b, $4
2114   0F69 FD 39         mov c, b
2115   0F6B A5            ashr a, cl
2116   0F6C 27            mov b, a
2117   0F6D E4            pop a
2118   0F6E             ; END SHIFT
2119   0F6E 56            add b, a
2120   0F6F E4            pop a
2121   0F70             ; END TERMS
2122   0F70 E7            pop d
2123   0F71 FD 3E         mov [d], bl
2124   0F73             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2125   0F73 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2126   0F76 D7            push a
2127   0F77 DA            push d
2128   0F78 26 01 00      mov b, $1
2129   0F7B E7            pop d
2130   0F7C 5A            add d, b
2131   0F7D E4            pop a
2132   0F7E DA            push d
2133   0F7F FA F5 FF      lea d, [bp + -11] ; $input_buffer
2134   0F82 D7            push a
2135   0F83 DA            push d
2136   0F84 26 01 00      mov b, $1
2137   0F87 E7            pop d
2138   0F88 5A            add d, b
2139   0F89 E4            pop a
2140   0F8A 32            mov bl, [d]
2141   0F8B A7 00         mov bh, 0
2142   0F8D D7            push a
2143   0F8E 11            mov a, b
2144   0F8F 26 0F 00      mov b, $f
2145   0F92 86            and a, b ; &
2146   0F93 27            mov b, a
2147   0F94 E4            pop a
2148   0F95             ; START SHIFT
2149   0F95 D7            push a
2150   0F96 11            mov a, b
2151   0F97 26 04 00      mov b, $4
2152   0F9A FD 39         mov c, b
2153   0F9C 9D            shl a, cl
2154   0F9D 27            mov b, a
2155   0F9E E4            pop a
2156   0F9F             ; END SHIFT
2157   0F9F             ; START TERMS
2158   0F9F D7            push a
2159   0FA0 11            mov a, b
2160   0FA1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2161   0FA4 D7            push a
2162   0FA5 DA            push d
2163   0FA6 26 02 00      mov b, $2
2164   0FA9 E7            pop d
2165   0FAA 5A            add d, b
2166   0FAB E4            pop a
2167   0FAC 32            mov bl, [d]
2168   0FAD A7 00         mov bh, 0
2169   0FAF D7            push a
2170   0FB0 11            mov a, b
2171   0FB1 26 3C 00      mov b, $3c
2172   0FB4 86            and a, b ; &
2173   0FB5 27            mov b, a
2174   0FB6 E4            pop a
2175   0FB7             ; START SHIFT
2176   0FB7 D7            push a
2177   0FB8 11            mov a, b
2178   0FB9 26 02 00      mov b, $2
2179   0FBC FD 39         mov c, b
2180   0FBE A5            ashr a, cl
2181   0FBF 27            mov b, a
2182   0FC0 E4            pop a
2183   0FC1             ; END SHIFT
2184   0FC1 56            add b, a
2185   0FC2 E4            pop a
2186   0FC3             ; END TERMS
2187   0FC3 E7            pop d
2188   0FC4 FD 3E         mov [d], bl
2189   0FC6             ;; for (k = 0; k < i - 1; k++) { 
2190   0FC6             _for28_init:
2191   0FC6 FA FB FF      lea d, [bp + -5] ; $k
2192   0FC9 DA            push d
2193   0FCA 26 00 00      mov b, $0
2194   0FCD E7            pop d
2195   0FCE FD 43         mov [d], b
2196   0FD0             _for28_cond:
2197   0FD0 FA FB FF      lea d, [bp + -5] ; $k
2198   0FD3 2A            mov b, [d]
2199   0FD4             ; START RELATIONAL
2200   0FD4 D7            push a
2201   0FD5 11            mov a, b
2202   0FD6 FA FF FF      lea d, [bp + -1] ; $i
2203   0FD9 2A            mov b, [d]
2204   0FDA             ; START TERMS
2205   0FDA D7            push a
2206   0FDB 11            mov a, b
2207   0FDC 26 01 00      mov b, $1
2208   0FDF 60            sub a, b
2209   0FE0 27            mov b, a
2210   0FE1 E4            pop a
2211   0FE2             ; END TERMS
2212   0FE2 B0            cmp a, b
2213   0FE3 FD 73         slt ; <= (signed)
2214   0FE5 E4            pop a
2215   0FE6             ; END RELATIONAL
2216   0FE6 C0 00 00      cmp b, 0
2217   0FE9 C6 29 10      je _for28_exit
2218   0FEC             _for28_block:
2219   0FEC             ;; output[j++] = output_buffer[k]; 
2220   0FEC FA 07 00      lea d, [bp + 7] ; $output
2221   0FEF FD 2A         mov d, [d]
2222   0FF1 D7            push a
2223   0FF2 DA            push d
2224   0FF3 FA FD FF      lea d, [bp + -3] ; $j
2225   0FF6 2A            mov b, [d]
2226   0FF7 D8            push b
2227   0FF8 FD 77         inc b
2228   0FFA FA FD FF      lea d, [bp + -3] ; $j
2229   0FFD FD 43         mov [d], b
2230   0FFF E5            pop b
2231   1000 E7            pop d
2232   1001 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2233   1005 E4            pop a
2234   1006 DA            push d
2235   1007 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2236   100A D7            push a
2237   100B DA            push d
2238   100C FA FB FF      lea d, [bp + -5] ; $k
2239   100F 2A            mov b, [d]
2240   1010 E7            pop d
2241   1011 5A            add d, b
2242   1012 E4            pop a
2243   1013 32            mov bl, [d]
2244   1014 A7 00         mov bh, 0
2245   1016 E7            pop d
2246   1017 FD 3E         mov [d], bl
2247   1019             _for28_update:
2248   1019 FA FB FF      lea d, [bp + -5] ; $k
2249   101C 2A            mov b, [d]
2250   101D D8            push b
2251   101E FD 77         inc b
2252   1020 FA FB FF      lea d, [bp + -5] ; $k
2253   1023 FD 43         mov [d], b
2254   1025 E5            pop b
2255   1026 0A D0 0F      jmp _for28_cond
2256   1029             _for28_exit:
2257   1029 0A 2C 10      jmp _if25_exit
2258   102C             _if25_exit:
2259   102C             ;; output[j] = '\0'; 
2260   102C FA 07 00      lea d, [bp + 7] ; $output
2261   102F FD 2A         mov d, [d]
2262   1031 D7            push a
2263   1032 DA            push d
2264   1033 FA FD FF      lea d, [bp + -3] ; $j
2265   1036 2A            mov b, [d]
2266   1037 E7            pop d
2267   1038 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2268   103C E4            pop a
2269   103D DA            push d
2270   103E 26 00 00      mov b, $0
2271   1041 E7            pop d
2272   1042 FD 3E         mov [d], bl
2273   1044 F9            leave
2274   1045 09            ret
2275   1046             
2276   1046             va_start:
2277   1046 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2278   1049             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2279   1049 FA 05 00      lea d, [bp + 5] ; $argp
2280   104C FD 2A         mov d, [d]
2281   104E 58 00 00      add d, 0
2282   1051 DA            push d
2283   1052 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2284   1055 2A            mov b, [d]
2285   1056             ; START TERMS
2286   1056 D7            push a
2287   1057 11            mov a, b
2288   1058 26 02 00      mov b, 2
2289   105B 56            add b, a
2290   105C E4            pop a
2291   105D             ; END TERMS
2292   105D E7            pop d
2293   105E FD 43         mov [d], b
2294   1060 F9            leave
2295   1061 09            ret
2296   1062             
2297   1062             va_arg:
2298   1062 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2299   1065             ; $p 
2300   1065 52 02 00      sub sp, 2
2301   1068             ;; p = argp->current_arg; 
2302   1068 FA FF FF      lea d, [bp + -1] ; $p
2303   106B DA            push d
2304   106C FA 05 00      lea d, [bp + 5] ; $argp
2305   106F FD 2A         mov d, [d]
2306   1071 58 00 00      add d, 0
2307   1074 2A            mov b, [d]
2308   1075 E7            pop d
2309   1076 FD 43         mov [d], b
2310   1078             ;; argp->current_arg = argp->current_arg + size; 
2311   1078 FA 05 00      lea d, [bp + 5] ; $argp
2312   107B FD 2A         mov d, [d]
2313   107D 58 00 00      add d, 0
2314   1080 DA            push d
2315   1081 FA 05 00      lea d, [bp + 5] ; $argp
2316   1084 FD 2A         mov d, [d]
2317   1086 58 00 00      add d, 0
2318   1089 2A            mov b, [d]
2319   108A             ; START TERMS
2320   108A D7            push a
2321   108B 11            mov a, b
2322   108C FA 07 00      lea d, [bp + 7] ; $size
2323   108F 2A            mov b, [d]
2324   1090 56            add b, a
2325   1091 E4            pop a
2326   1092             ; END TERMS
2327   1092 E7            pop d
2328   1093 FD 43         mov [d], b
2329   1095             ;; return p; 
2330   1095 FA FF FF      lea d, [bp + -1] ; $p
2331   1098 2A            mov b, [d]
2332   1099 F9            leave
2333   109A 09            ret
2334   109B             
2335   109B             va_end:
2336   109B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2337   109E             ;; argp->current_arg =   0   ; 
2338   109E FA 05 00      lea d, [bp + 5] ; $argp
2339   10A1 FD 2A         mov d, [d]
2340   10A3 58 00 00      add d, 0
2341   10A6 DA            push d
2342   10A7 26 00 00      mov b, $0
2343   10AA E7            pop d
2344   10AB FD 43         mov [d], b
2345   10AD F9            leave
2346   10AE 09            ret
2347   10AF             
2348   10AF             scanf:
2349   10AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2350   10B2             ; $p 
2351   10B2             ; $format_p 
2352   10B2             ; $c 
2353   10B2             ; $i 
2354   10B2             ; $input_string 
2355   10B2 52 07 02      sub sp, 519
2356   10B5             ;; format_p = format; 
2357   10B5 FA FD FF      lea d, [bp + -3] ; $format_p
2358   10B8 DA            push d
2359   10B9 FA 05 00      lea d, [bp + 5] ; $format
2360   10BC 2A            mov b, [d]
2361   10BD E7            pop d
2362   10BE FD 43         mov [d], b
2363   10C0             ;; p = &format + 2; 
2364   10C0 FA FF FF      lea d, [bp + -1] ; $p
2365   10C3 DA            push d
2366   10C4 FA 05 00      lea d, [bp + 5] ; $format
2367   10C7 2D            mov b, d
2368   10C8             ; START TERMS
2369   10C8 D7            push a
2370   10C9 11            mov a, b
2371   10CA 26 02 00      mov b, $2
2372   10CD 56            add b, a
2373   10CE E4            pop a
2374   10CF             ; END TERMS
2375   10CF E7            pop d
2376   10D0 FD 43         mov [d], b
2377   10D2             ;; for(;;){ 
2378   10D2             _for29_init:
2379   10D2             _for29_cond:
2380   10D2             _for29_block:
2381   10D2             ;; if(!*format_p) break; 
2382   10D2             _if30_cond:
2383   10D2 FA FD FF      lea d, [bp + -3] ; $format_p
2384   10D5 2A            mov b, [d]
2385   10D6 74            mov d, b
2386   10D7 32            mov bl, [d]
2387   10D8 A7 00         mov bh, 0
2388   10DA C0 00 00      cmp b, 0
2389   10DD FD 71         seq ; !
2390   10DF C0 00 00      cmp b, 0
2391   10E2 C6 EB 10      je _if30_else
2392   10E5             _if30_true:
2393   10E5             ;; break; 
2394   10E5 0A E8 12      jmp _for29_exit ; for break
2395   10E8 0A E5 12      jmp _if30_exit
2396   10EB             _if30_else:
2397   10EB             ;; if(*format_p == '%'){ 
2398   10EB             _if31_cond:
2399   10EB FA FD FF      lea d, [bp + -3] ; $format_p
2400   10EE 2A            mov b, [d]
2401   10EF 74            mov d, b
2402   10F0 32            mov bl, [d]
2403   10F1 A7 00         mov bh, 0
2404   10F3             ; START RELATIONAL
2405   10F3 D7            push a
2406   10F4 11            mov a, b
2407   10F5 26 25 00      mov b, $25
2408   10F8 B0            cmp a, b
2409   10F9 FD 71         seq ; ==
2410   10FB E4            pop a
2411   10FC             ; END RELATIONAL
2412   10FC C0 00 00      cmp b, 0
2413   10FF C6 C9 12      je _if31_else
2414   1102             _if31_true:
2415   1102             ;; format_p++; 
2416   1102 FA FD FF      lea d, [bp + -3] ; $format_p
2417   1105 2A            mov b, [d]
2418   1106 D8            push b
2419   1107 FD 77         inc b
2420   1109 FA FD FF      lea d, [bp + -3] ; $format_p
2421   110C FD 43         mov [d], b
2422   110E E5            pop b
2423   110F             ;; switch(*format_p){ 
2424   110F             _switch32_expr:
2425   110F FA FD FF      lea d, [bp + -3] ; $format_p
2426   1112 2A            mov b, [d]
2427   1113 74            mov d, b
2428   1114 32            mov bl, [d]
2429   1115 A7 00         mov bh, 0
2430   1117             _switch32_comparisons:
2431   1117 C1 6C         cmp bl, $6c
2432   1119 C6 45 11      je _switch32_case0
2433   111C C1 4C         cmp bl, $4c
2434   111E C6 45 11      je _switch32_case1
2435   1121 C1 64         cmp bl, $64
2436   1123 C6 D7 11      je _switch32_case2
2437   1126 C1 69         cmp bl, $69
2438   1128 C6 D7 11      je _switch32_case3
2439   112B C1 75         cmp bl, $75
2440   112D C6 04 12      je _switch32_case4
2441   1130 C1 78         cmp bl, $78
2442   1132 C6 31 12      je _switch32_case5
2443   1135 C1 63         cmp bl, $63
2444   1137 C6 46 12      je _switch32_case6
2445   113A C1 73         cmp bl, $73
2446   113C C6 75 12      je _switch32_case7
2447   113F 0A AD 12      jmp _switch32_default
2448   1142 0A B9 12      jmp _switch32_exit
2449   1145             _switch32_case0:
2450   1145             _switch32_case1:
2451   1145             ;; format_p++; 
2452   1145 FA FD FF      lea d, [bp + -3] ; $format_p
2453   1148 2A            mov b, [d]
2454   1149 D8            push b
2455   114A FD 77         inc b
2456   114C FA FD FF      lea d, [bp + -3] ; $format_p
2457   114F FD 43         mov [d], b
2458   1151 E5            pop b
2459   1152             ;; if(*format_p == 'd' || *format_p == 'i'); 
2460   1152             _if33_cond:
2461   1152 FA FD FF      lea d, [bp + -3] ; $format_p
2462   1155 2A            mov b, [d]
2463   1156 74            mov d, b
2464   1157 32            mov bl, [d]
2465   1158 A7 00         mov bh, 0
2466   115A             ; START RELATIONAL
2467   115A D7            push a
2468   115B 11            mov a, b
2469   115C 26 64 00      mov b, $64
2470   115F B0            cmp a, b
2471   1160 FD 71         seq ; ==
2472   1162 E4            pop a
2473   1163             ; END RELATIONAL
2474   1163 D7            push a
2475   1164 11            mov a, b
2476   1165 FA FD FF      lea d, [bp + -3] ; $format_p
2477   1168 2A            mov b, [d]
2478   1169 74            mov d, b
2479   116A 32            mov bl, [d]
2480   116B A7 00         mov bh, 0
2481   116D             ; START RELATIONAL
2482   116D D7            push a
2483   116E 11            mov a, b
2484   116F 26 69 00      mov b, $69
2485   1172 B0            cmp a, b
2486   1173 FD 71         seq ; ==
2487   1175 E4            pop a
2488   1176             ; END RELATIONAL
2489   1176 FD A8         sor a, b ; ||
2490   1178 E4            pop a
2491   1179 C0 00 00      cmp b, 0
2492   117C C6 82 11      je _if33_else
2493   117F             _if33_true:
2494   117F             ;; ; 
2495   117F 0A C2 11      jmp _if33_exit
2496   1182             _if33_else:
2497   1182             ;; if(*format_p == 'u'); 
2498   1182             _if34_cond:
2499   1182 FA FD FF      lea d, [bp + -3] ; $format_p
2500   1185 2A            mov b, [d]
2501   1186 74            mov d, b
2502   1187 32            mov bl, [d]
2503   1188 A7 00         mov bh, 0
2504   118A             ; START RELATIONAL
2505   118A D7            push a
2506   118B 11            mov a, b
2507   118C 26 75 00      mov b, $75
2508   118F B0            cmp a, b
2509   1190 FD 71         seq ; ==
2510   1192 E4            pop a
2511   1193             ; END RELATIONAL
2512   1193 C0 00 00      cmp b, 0
2513   1196 C6 9C 11      je _if34_else
2514   1199             _if34_true:
2515   1199             ;; ; 
2516   1199 0A C2 11      jmp _if34_exit
2517   119C             _if34_else:
2518   119C             ;; if(*format_p == 'x'); 
2519   119C             _if35_cond:
2520   119C FA FD FF      lea d, [bp + -3] ; $format_p
2521   119F 2A            mov b, [d]
2522   11A0 74            mov d, b
2523   11A1 32            mov bl, [d]
2524   11A2 A7 00         mov bh, 0
2525   11A4             ; START RELATIONAL
2526   11A4 D7            push a
2527   11A5 11            mov a, b
2528   11A6 26 78 00      mov b, $78
2529   11A9 B0            cmp a, b
2530   11AA FD 71         seq ; ==
2531   11AC E4            pop a
2532   11AD             ; END RELATIONAL
2533   11AD C0 00 00      cmp b, 0
2534   11B0 C6 B6 11      je _if35_else
2535   11B3             _if35_true:
2536   11B3             ;; ; 
2537   11B3 0A C2 11      jmp _if35_exit
2538   11B6             _if35_else:
2539   11B6             ;; err("Unexpected format in printf."); 
2540   11B6 26 BB 20      mov b, __s0 ; "Unexpected format in printf."
2541   11B9 FD AB         swp b
2542   11BB D8            push b
2543   11BC 07 31 15      call err
2544   11BF 51 02 00      add sp, 2
2545   11C2             _if35_exit:
2546   11C2             _if34_exit:
2547   11C2             _if33_exit:
2548   11C2             ;; p = p + 4; 
2549   11C2 FA FF FF      lea d, [bp + -1] ; $p
2550   11C5 DA            push d
2551   11C6 FA FF FF      lea d, [bp + -1] ; $p
2552   11C9 2A            mov b, [d]
2553   11CA             ; START TERMS
2554   11CA D7            push a
2555   11CB 11            mov a, b
2556   11CC 26 04 00      mov b, $4
2557   11CF 56            add b, a
2558   11D0 E4            pop a
2559   11D1             ; END TERMS
2560   11D1 E7            pop d
2561   11D2 FD 43         mov [d], b
2562   11D4             ;; break; 
2563   11D4 0A B9 12      jmp _switch32_exit ; case break
2564   11D7             _switch32_case2:
2565   11D7             _switch32_case3:
2566   11D7             ;; i = scann(); 
2567   11D7 FA FA FF      lea d, [bp + -6] ; $i
2568   11DA DA            push d
2569   11DB 07 FF 1A      call scann
2570   11DE E7            pop d
2571   11DF FD 43         mov [d], b
2572   11E1             ;; **(int **)p = i; 
2573   11E1 FA FF FF      lea d, [bp + -1] ; $p
2574   11E4 2A            mov b, [d]
2575   11E5 74            mov d, b
2576   11E6 2A            mov b, [d]
2577   11E7 D8            push b
2578   11E8 FA FA FF      lea d, [bp + -6] ; $i
2579   11EB 2A            mov b, [d]
2580   11EC E7            pop d
2581   11ED FD 43         mov [d], b
2582   11EF             ;; p = p + 2; 
2583   11EF FA FF FF      lea d, [bp + -1] ; $p
2584   11F2 DA            push d
2585   11F3 FA FF FF      lea d, [bp + -1] ; $p
2586   11F6 2A            mov b, [d]
2587   11F7             ; START TERMS
2588   11F7 D7            push a
2589   11F8 11            mov a, b
2590   11F9 26 02 00      mov b, $2
2591   11FC 56            add b, a
2592   11FD E4            pop a
2593   11FE             ; END TERMS
2594   11FE E7            pop d
2595   11FF FD 43         mov [d], b
2596   1201             ;; break; 
2597   1201 0A B9 12      jmp _switch32_exit ; case break
2598   1204             _switch32_case4:
2599   1204             ;; i = scann(); 
2600   1204 FA FA FF      lea d, [bp + -6] ; $i
2601   1207 DA            push d
2602   1208 07 FF 1A      call scann
2603   120B E7            pop d
2604   120C FD 43         mov [d], b
2605   120E             ;; **(int **)p = i; 
2606   120E FA FF FF      lea d, [bp + -1] ; $p
2607   1211 2A            mov b, [d]
2608   1212 74            mov d, b
2609   1213 2A            mov b, [d]
2610   1214 D8            push b
2611   1215 FA FA FF      lea d, [bp + -6] ; $i
2612   1218 2A            mov b, [d]
2613   1219 E7            pop d
2614   121A FD 43         mov [d], b
2615   121C             ;; p = p + 2; 
2616   121C FA FF FF      lea d, [bp + -1] ; $p
2617   121F DA            push d
2618   1220 FA FF FF      lea d, [bp + -1] ; $p
2619   1223 2A            mov b, [d]
2620   1224             ; START TERMS
2621   1224 D7            push a
2622   1225 11            mov a, b
2623   1226 26 02 00      mov b, $2
2624   1229 56            add b, a
2625   122A E4            pop a
2626   122B             ; END TERMS
2627   122B E7            pop d
2628   122C FD 43         mov [d], b
2629   122E             ;; break; 
2630   122E 0A B9 12      jmp _switch32_exit ; case break
2631   1231             _switch32_case5:
2632   1231             ;; p = p + 2; 
2633   1231 FA FF FF      lea d, [bp + -1] ; $p
2634   1234 DA            push d
2635   1235 FA FF FF      lea d, [bp + -1] ; $p
2636   1238 2A            mov b, [d]
2637   1239             ; START TERMS
2638   1239 D7            push a
2639   123A 11            mov a, b
2640   123B 26 02 00      mov b, $2
2641   123E 56            add b, a
2642   123F E4            pop a
2643   1240             ; END TERMS
2644   1240 E7            pop d
2645   1241 FD 43         mov [d], b
2646   1243             ;; break; 
2647   1243 0A B9 12      jmp _switch32_exit ; case break
2648   1246             _switch32_case6:
2649   1246             ;; c = getchar(); 
2650   1246 FA FC FF      lea d, [bp + -4] ; $c
2651   1249 DA            push d
2652   124A 07 E9 1A      call getchar
2653   124D E7            pop d
2654   124E FD 3E         mov [d], bl
2655   1250             ;; **(char **)p = c; 
2656   1250 FA FF FF      lea d, [bp + -1] ; $p
2657   1253 2A            mov b, [d]
2658   1254 74            mov d, b
2659   1255 2A            mov b, [d]
2660   1256 D8            push b
2661   1257 FA FC FF      lea d, [bp + -4] ; $c
2662   125A 32            mov bl, [d]
2663   125B A7 00         mov bh, 0
2664   125D E7            pop d
2665   125E FD 43         mov [d], b
2666   1260             ;; p = p + 2; 
2667   1260 FA FF FF      lea d, [bp + -1] ; $p
2668   1263 DA            push d
2669   1264 FA FF FF      lea d, [bp + -1] ; $p
2670   1267 2A            mov b, [d]
2671   1268             ; START TERMS
2672   1268 D7            push a
2673   1269 11            mov a, b
2674   126A 26 02 00      mov b, $2
2675   126D 56            add b, a
2676   126E E4            pop a
2677   126F             ; END TERMS
2678   126F E7            pop d
2679   1270 FD 43         mov [d], b
2680   1272             ;; break; 
2681   1272 0A B9 12      jmp _switch32_exit ; case break
2682   1275             _switch32_case7:
2683   1275             ;; gets(input_string); 
2684   1275 FA FA FD      lea d, [bp + -518] ; $input_string
2685   1278 2D            mov b, d
2686   1279 FD AB         swp b
2687   127B D8            push b
2688   127C 07 B3 16      call gets
2689   127F 51 02 00      add sp, 2
2690   1282             ;; strcpy(*(char **)p, input_string); 
2691   1282 FA FA FD      lea d, [bp + -518] ; $input_string
2692   1285 2D            mov b, d
2693   1286 FD AB         swp b
2694   1288 D8            push b
2695   1289 FA FF FF      lea d, [bp + -1] ; $p
2696   128C 2A            mov b, [d]
2697   128D 74            mov d, b
2698   128E 2A            mov b, [d]
2699   128F FD AB         swp b
2700   1291 D8            push b
2701   1292 07 0D 04      call strcpy
2702   1295 51 04 00      add sp, 4
2703   1298             ;; p = p + 2; 
2704   1298 FA FF FF      lea d, [bp + -1] ; $p
2705   129B DA            push d
2706   129C FA FF FF      lea d, [bp + -1] ; $p
2707   129F 2A            mov b, [d]
2708   12A0             ; START TERMS
2709   12A0 D7            push a
2710   12A1 11            mov a, b
2711   12A2 26 02 00      mov b, $2
2712   12A5 56            add b, a
2713   12A6 E4            pop a
2714   12A7             ; END TERMS
2715   12A7 E7            pop d
2716   12A8 FD 43         mov [d], b
2717   12AA             ;; break; 
2718   12AA 0A B9 12      jmp _switch32_exit ; case break
2719   12AD             _switch32_default:
2720   12AD             ;; print("Error: Unknown argument type.\n"); 
2721   12AD 26 D8 20      mov b, __s1 ; "Error: Unknown argument type.\n"
2722   12B0 FD AB         swp b
2723   12B2 D8            push b
2724   12B3 07 24 1B      call print
2725   12B6 51 02 00      add sp, 2
2726   12B9             _switch32_exit:
2727   12B9             ;; format_p++; 
2728   12B9 FA FD FF      lea d, [bp + -3] ; $format_p
2729   12BC 2A            mov b, [d]
2730   12BD D8            push b
2731   12BE FD 77         inc b
2732   12C0 FA FD FF      lea d, [bp + -3] ; $format_p
2733   12C3 FD 43         mov [d], b
2734   12C5 E5            pop b
2735   12C6 0A E5 12      jmp _if31_exit
2736   12C9             _if31_else:
2737   12C9             ;; putchar(*format_p); 
2738   12C9 FA FD FF      lea d, [bp + -3] ; $format_p
2739   12CC 2A            mov b, [d]
2740   12CD 74            mov d, b
2741   12CE 32            mov bl, [d]
2742   12CF A7 00         mov bh, 0
2743   12D1 DD            push bl
2744   12D2 07 DC 1A      call putchar
2745   12D5 51 01 00      add sp, 1
2746   12D8             ;; format_p++; 
2747   12D8 FA FD FF      lea d, [bp + -3] ; $format_p
2748   12DB 2A            mov b, [d]
2749   12DC D8            push b
2750   12DD FD 77         inc b
2751   12DF FA FD FF      lea d, [bp + -3] ; $format_p
2752   12E2 FD 43         mov [d], b
2753   12E4 E5            pop b
2754   12E5             _if31_exit:
2755   12E5             _if30_exit:
2756   12E5             _for29_update:
2757   12E5 0A D2 10      jmp _for29_cond
2758   12E8             _for29_exit:
2759   12E8 F9            leave
2760   12E9 09            ret
2761   12EA             
2762   12EA             printf:
2763   12EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2764   12ED             ; $p 
2765   12ED             ; $format_p 
2766   12ED 52 04 00      sub sp, 4
2767   12F0             ;; format_p = format; 
2768   12F0 FA FD FF      lea d, [bp + -3] ; $format_p
2769   12F3 DA            push d
2770   12F4 FA 05 00      lea d, [bp + 5] ; $format
2771   12F7 2A            mov b, [d]
2772   12F8 E7            pop d
2773   12F9 FD 43         mov [d], b
2774   12FB             ;; p = &format + 2; 
2775   12FB FA FF FF      lea d, [bp + -1] ; $p
2776   12FE DA            push d
2777   12FF FA 05 00      lea d, [bp + 5] ; $format
2778   1302 2D            mov b, d
2779   1303             ; START TERMS
2780   1303 D7            push a
2781   1304 11            mov a, b
2782   1305 26 02 00      mov b, $2
2783   1308 56            add b, a
2784   1309 E4            pop a
2785   130A             ; END TERMS
2786   130A E7            pop d
2787   130B FD 43         mov [d], b
2788   130D             ;; for(;;){ 
2789   130D             _for36_init:
2790   130D             _for36_cond:
2791   130D             _for36_block:
2792   130D             ;; if(!*format_p) break; 
2793   130D             _if37_cond:
2794   130D FA FD FF      lea d, [bp + -3] ; $format_p
2795   1310 2A            mov b, [d]
2796   1311 74            mov d, b
2797   1312 32            mov bl, [d]
2798   1313 A7 00         mov bh, 0
2799   1315 C0 00 00      cmp b, 0
2800   1318 FD 71         seq ; !
2801   131A C0 00 00      cmp b, 0
2802   131D C6 26 13      je _if37_else
2803   1320             _if37_true:
2804   1320             ;; break; 
2805   1320 0A 2F 15      jmp _for36_exit ; for break
2806   1323 0A 2C 15      jmp _if37_exit
2807   1326             _if37_else:
2808   1326             ;; if(*format_p == '%'){ 
2809   1326             _if38_cond:
2810   1326 FA FD FF      lea d, [bp + -3] ; $format_p
2811   1329 2A            mov b, [d]
2812   132A 74            mov d, b
2813   132B 32            mov bl, [d]
2814   132C A7 00         mov bh, 0
2815   132E             ; START RELATIONAL
2816   132E D7            push a
2817   132F 11            mov a, b
2818   1330 26 25 00      mov b, $25
2819   1333 B0            cmp a, b
2820   1334 FD 71         seq ; ==
2821   1336 E4            pop a
2822   1337             ; END RELATIONAL
2823   1337 C0 00 00      cmp b, 0
2824   133A C6 10 15      je _if38_else
2825   133D             _if38_true:
2826   133D             ;; format_p++; 
2827   133D FA FD FF      lea d, [bp + -3] ; $format_p
2828   1340 2A            mov b, [d]
2829   1341 D8            push b
2830   1342 FD 77         inc b
2831   1344 FA FD FF      lea d, [bp + -3] ; $format_p
2832   1347 FD 43         mov [d], b
2833   1349 E5            pop b
2834   134A             ;; switch(*format_p){ 
2835   134A             _switch39_expr:
2836   134A FA FD FF      lea d, [bp + -3] ; $format_p
2837   134D 2A            mov b, [d]
2838   134E 74            mov d, b
2839   134F 32            mov bl, [d]
2840   1350 A7 00         mov bh, 0
2841   1352             _switch39_comparisons:
2842   1352 C1 6C         cmp bl, $6c
2843   1354 C6 80 13      je _switch39_case0
2844   1357 C1 4C         cmp bl, $4c
2845   1359 C6 80 13      je _switch39_case1
2846   135C C1 64         cmp bl, $64
2847   135E C6 50 14      je _switch39_case2
2848   1361 C1 69         cmp bl, $69
2849   1363 C6 50 14      je _switch39_case3
2850   1366 C1 75         cmp bl, $75
2851   1368 C6 74 14      je _switch39_case4
2852   136B C1 78         cmp bl, $78
2853   136D C6 98 14      je _switch39_case5
2854   1370 C1 63         cmp bl, $63
2855   1372 C6 B6 14      je _switch39_case6
2856   1375 C1 73         cmp bl, $73
2857   1377 C6 D5 14      je _switch39_case7
2858   137A 0A F4 14      jmp _switch39_default
2859   137D 0A 00 15      jmp _switch39_exit
2860   1380             _switch39_case0:
2861   1380             _switch39_case1:
2862   1380             ;; format_p++; 
2863   1380 FA FD FF      lea d, [bp + -3] ; $format_p
2864   1383 2A            mov b, [d]
2865   1384 D8            push b
2866   1385 FD 77         inc b
2867   1387 FA FD FF      lea d, [bp + -3] ; $format_p
2868   138A FD 43         mov [d], b
2869   138C E5            pop b
2870   138D             ;; if(*format_p == 'd' || *format_p == 'i') 
2871   138D             _if40_cond:
2872   138D FA FD FF      lea d, [bp + -3] ; $format_p
2873   1390 2A            mov b, [d]
2874   1391 74            mov d, b
2875   1392 32            mov bl, [d]
2876   1393 A7 00         mov bh, 0
2877   1395             ; START RELATIONAL
2878   1395 D7            push a
2879   1396 11            mov a, b
2880   1397 26 64 00      mov b, $64
2881   139A B0            cmp a, b
2882   139B FD 71         seq ; ==
2883   139D E4            pop a
2884   139E             ; END RELATIONAL
2885   139E D7            push a
2886   139F 11            mov a, b
2887   13A0 FA FD FF      lea d, [bp + -3] ; $format_p
2888   13A3 2A            mov b, [d]
2889   13A4 74            mov d, b
2890   13A5 32            mov bl, [d]
2891   13A6 A7 00         mov bh, 0
2892   13A8             ; START RELATIONAL
2893   13A8 D7            push a
2894   13A9 11            mov a, b
2895   13AA 26 69 00      mov b, $69
2896   13AD B0            cmp a, b
2897   13AE FD 71         seq ; ==
2898   13B0 E4            pop a
2899   13B1             ; END RELATIONAL
2900   13B1 FD A8         sor a, b ; ||
2901   13B3 E4            pop a
2902   13B4 C0 00 00      cmp b, 0
2903   13B7 C6 CE 13      je _if40_else
2904   13BA             _if40_true:
2905   13BA             ;; print_signed_long(*(long *)p); 
2906   13BA FD 79         mov g, b
2907   13BC 28            mov b, c
2908   13BD FD AB         swp b
2909   13BF D8            push b
2910   13C0 FD 27         mov b, g
2911   13C2 FD AB         swp b
2912   13C4 D8            push b
2913   13C5 07 BD 17      call print_signed_long
2914   13C8 51 04 00      add sp, 4
2915   13CB 0A 3B 14      jmp _if40_exit
2916   13CE             _if40_else:
2917   13CE             ;; if(*format_p == 'u') 
2918   13CE             _if41_cond:
2919   13CE FA FD FF      lea d, [bp + -3] ; $format_p
2920   13D1 2A            mov b, [d]
2921   13D2 74            mov d, b
2922   13D3 32            mov bl, [d]
2923   13D4 A7 00         mov bh, 0
2924   13D6             ; START RELATIONAL
2925   13D6 D7            push a
2926   13D7 11            mov a, b
2927   13D8 26 75 00      mov b, $75
2928   13DB B0            cmp a, b
2929   13DC FD 71         seq ; ==
2930   13DE E4            pop a
2931   13DF             ; END RELATIONAL
2932   13DF C0 00 00      cmp b, 0
2933   13E2 C6 F9 13      je _if41_else
2934   13E5             _if41_true:
2935   13E5             ;; print_unsigned_long(*(unsigned long *)p); 
2936   13E5 FD 79         mov g, b
2937   13E7 28            mov b, c
2938   13E8 FD AB         swp b
2939   13EA D8            push b
2940   13EB FD 27         mov b, g
2941   13ED FD AB         swp b
2942   13EF D8            push b
2943   13F0 07 0F 19      call print_unsigned_long
2944   13F3 51 04 00      add sp, 4
2945   13F6 0A 3B 14      jmp _if41_exit
2946   13F9             _if41_else:
2947   13F9             ;; if(*format_p == 'x') 
2948   13F9             _if42_cond:
2949   13F9 FA FD FF      lea d, [bp + -3] ; $format_p
2950   13FC 2A            mov b, [d]
2951   13FD 74            mov d, b
2952   13FE 32            mov bl, [d]
2953   13FF A7 00         mov bh, 0
2954   1401             ; START RELATIONAL
2955   1401 D7            push a
2956   1402 11            mov a, b
2957   1403 26 78 00      mov b, $78
2958   1406 B0            cmp a, b
2959   1407 FD 71         seq ; ==
2960   1409 E4            pop a
2961   140A             ; END RELATIONAL
2962   140A C0 00 00      cmp b, 0
2963   140D C6 2F 14      je _if42_else
2964   1410             _if42_true:
2965   1410             ;; printx32(*(long int *)p); 
2966   1410 FA FF FF      lea d, [bp + -1] ; $p
2967   1413 2A            mov b, [d]
2968   1414 74            mov d, b
2969   1415 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2970   1418 FD 39         mov c, b ; And place it into C
2971   141A 2A            mov b, [d] ; Lower Word in B
2972   141B FD 79         mov g, b
2973   141D 28            mov b, c
2974   141E FD AB         swp b
2975   1420 D8            push b
2976   1421 FD 27         mov b, g
2977   1423 FD AB         swp b
2978   1425 D8            push b
2979   1426 07 46 15      call printx32
2980   1429 51 04 00      add sp, 4
2981   142C 0A 3B 14      jmp _if42_exit
2982   142F             _if42_else:
2983   142F             ;; err("Unexpected format in printf."); 
2984   142F 26 BB 20      mov b, __s0 ; "Unexpected format in printf."
2985   1432 FD AB         swp b
2986   1434 D8            push b
2987   1435 07 31 15      call err
2988   1438 51 02 00      add sp, 2
2989   143B             _if42_exit:
2990   143B             _if41_exit:
2991   143B             _if40_exit:
2992   143B             ;; p = p + 4; 
2993   143B FA FF FF      lea d, [bp + -1] ; $p
2994   143E DA            push d
2995   143F FA FF FF      lea d, [bp + -1] ; $p
2996   1442 2A            mov b, [d]
2997   1443             ; START TERMS
2998   1443 D7            push a
2999   1444 11            mov a, b
3000   1445 26 04 00      mov b, $4
3001   1448 56            add b, a
3002   1449 E4            pop a
3003   144A             ; END TERMS
3004   144A E7            pop d
3005   144B FD 43         mov [d], b
3006   144D             ;; break; 
3007   144D 0A 00 15      jmp _switch39_exit ; case break
3008   1450             _switch39_case2:
3009   1450             _switch39_case3:
3010   1450             ;; print_signed(*(int*)p); 
3011   1450 FA FF FF      lea d, [bp + -1] ; $p
3012   1453 2A            mov b, [d]
3013   1454 74            mov d, b
3014   1455 2A            mov b, [d]
3015   1456 FD AB         swp b
3016   1458 D8            push b
3017   1459 07 CD 16      call print_signed
3018   145C 51 02 00      add sp, 2
3019   145F             ;; p = p + 2; 
3020   145F FA FF FF      lea d, [bp + -1] ; $p
3021   1462 DA            push d
3022   1463 FA FF FF      lea d, [bp + -1] ; $p
3023   1466 2A            mov b, [d]
3024   1467             ; START TERMS
3025   1467 D7            push a
3026   1468 11            mov a, b
3027   1469 26 02 00      mov b, $2
3028   146C 56            add b, a
3029   146D E4            pop a
3030   146E             ; END TERMS
3031   146E E7            pop d
3032   146F FD 43         mov [d], b
3033   1471             ;; break; 
3034   1471 0A 00 15      jmp _switch39_exit ; case break
3035   1474             _switch39_case4:
3036   1474             ;; print_unsigned(*(unsigned int*)p); 
3037   1474 FA FF FF      lea d, [bp + -1] ; $p
3038   1477 2A            mov b, [d]
3039   1478 74            mov d, b
3040   1479 2A            mov b, [d]
3041   147A FD AB         swp b
3042   147C D8            push b
3043   147D 07 0C 1A      call print_unsigned
3044   1480 51 02 00      add sp, 2
3045   1483             ;; p = p + 2; 
3046   1483 FA FF FF      lea d, [bp + -1] ; $p
3047   1486 DA            push d
3048   1487 FA FF FF      lea d, [bp + -1] ; $p
3049   148A 2A            mov b, [d]
3050   148B             ; START TERMS
3051   148B D7            push a
3052   148C 11            mov a, b
3053   148D 26 02 00      mov b, $2
3054   1490 56            add b, a
3055   1491 E4            pop a
3056   1492             ; END TERMS
3057   1492 E7            pop d
3058   1493 FD 43         mov [d], b
3059   1495             ;; break; 
3060   1495 0A 00 15      jmp _switch39_exit ; case break
3061   1498             _switch39_case5:
3062   1498             
3063   1498             ; --- BEGIN INLINE ASM BLOCK
3064   1498 FA FF FF      lea d, [bp + -1] ; $p
3065   149B FD 2A         mov d, [d]
3066   149D 2A            mov b, [d]
3067   149E 07 5E 1E      call print_u16x
3068   14A1             ; --- END INLINE ASM BLOCK
3069   14A1             
3070   14A1             ;; p = p + 2; 
3071   14A1 FA FF FF      lea d, [bp + -1] ; $p
3072   14A4 DA            push d
3073   14A5 FA FF FF      lea d, [bp + -1] ; $p
3074   14A8 2A            mov b, [d]
3075   14A9             ; START TERMS
3076   14A9 D7            push a
3077   14AA 11            mov a, b
3078   14AB 26 02 00      mov b, $2
3079   14AE 56            add b, a
3080   14AF E4            pop a
3081   14B0             ; END TERMS
3082   14B0 E7            pop d
3083   14B1 FD 43         mov [d], b
3084   14B3             ;; break; 
3085   14B3 0A 00 15      jmp _switch39_exit ; case break
3086   14B6             _switch39_case6:
3087   14B6             
3088   14B6             ; --- BEGIN INLINE ASM BLOCK
3089   14B6 FA FF FF      lea d, [bp + -1] ; $p
3090   14B9 FD 2A         mov d, [d]
3091   14BB 1E            mov al, [d]
3092   14BC 23            mov ah, al
3093   14BD 07 BC 1C      call _putchar
3094   14C0             ; --- END INLINE ASM BLOCK
3095   14C0             
3096   14C0             ;; p = p + 2; 
3097   14C0 FA FF FF      lea d, [bp + -1] ; $p
3098   14C3 DA            push d
3099   14C4 FA FF FF      lea d, [bp + -1] ; $p
3100   14C7 2A            mov b, [d]
3101   14C8             ; START TERMS
3102   14C8 D7            push a
3103   14C9 11            mov a, b
3104   14CA 26 02 00      mov b, $2
3105   14CD 56            add b, a
3106   14CE E4            pop a
3107   14CF             ; END TERMS
3108   14CF E7            pop d
3109   14D0 FD 43         mov [d], b
3110   14D2             ;; break; 
3111   14D2 0A 00 15      jmp _switch39_exit ; case break
3112   14D5             _switch39_case7:
3113   14D5             
3114   14D5             ; --- BEGIN INLINE ASM BLOCK
3115   14D5 FA FF FF      lea d, [bp + -1] ; $p
3116   14D8 FD 2A         mov d, [d]
3117   14DA FD 2A         mov d, [d]
3118   14DC 07 06 1E      call _puts
3119   14DF             ; --- END INLINE ASM BLOCK
3120   14DF             
3121   14DF             ;; p = p + 2; 
3122   14DF FA FF FF      lea d, [bp + -1] ; $p
3123   14E2 DA            push d
3124   14E3 FA FF FF      lea d, [bp + -1] ; $p
3125   14E6 2A            mov b, [d]
3126   14E7             ; START TERMS
3127   14E7 D7            push a
3128   14E8 11            mov a, b
3129   14E9 26 02 00      mov b, $2
3130   14EC 56            add b, a
3131   14ED E4            pop a
3132   14EE             ; END TERMS
3133   14EE E7            pop d
3134   14EF FD 43         mov [d], b
3135   14F1             ;; break; 
3136   14F1 0A 00 15      jmp _switch39_exit ; case break
3137   14F4             _switch39_default:
3138   14F4             ;; print("Error: Unknown argument type.\n"); 
3139   14F4 26 D8 20      mov b, __s1 ; "Error: Unknown argument type.\n"
3140   14F7 FD AB         swp b
3141   14F9 D8            push b
3142   14FA 07 24 1B      call print
3143   14FD 51 02 00      add sp, 2
3144   1500             _switch39_exit:
3145   1500             ;; format_p++; 
3146   1500 FA FD FF      lea d, [bp + -3] ; $format_p
3147   1503 2A            mov b, [d]
3148   1504 D8            push b
3149   1505 FD 77         inc b
3150   1507 FA FD FF      lea d, [bp + -3] ; $format_p
3151   150A FD 43         mov [d], b
3152   150C E5            pop b
3153   150D 0A 2C 15      jmp _if38_exit
3154   1510             _if38_else:
3155   1510             ;; putchar(*format_p); 
3156   1510 FA FD FF      lea d, [bp + -3] ; $format_p
3157   1513 2A            mov b, [d]
3158   1514 74            mov d, b
3159   1515 32            mov bl, [d]
3160   1516 A7 00         mov bh, 0
3161   1518 DD            push bl
3162   1519 07 DC 1A      call putchar
3163   151C 51 01 00      add sp, 1
3164   151F             ;; format_p++; 
3165   151F FA FD FF      lea d, [bp + -3] ; $format_p
3166   1522 2A            mov b, [d]
3167   1523 D8            push b
3168   1524 FD 77         inc b
3169   1526 FA FD FF      lea d, [bp + -3] ; $format_p
3170   1529 FD 43         mov [d], b
3171   152B E5            pop b
3172   152C             _if38_exit:
3173   152C             _if37_exit:
3174   152C             _for36_update:
3175   152C 0A 0D 13      jmp _for36_cond
3176   152F             _for36_exit:
3177   152F F9            leave
3178   1530 09            ret
3179   1531             
3180   1531             err:
3181   1531 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3182   1534             ;; print(e); 
3183   1534 FA 05 00      lea d, [bp + 5] ; $e
3184   1537 2A            mov b, [d]
3185   1538 FD AB         swp b
3186   153A D8            push b
3187   153B 07 24 1B      call print
3188   153E 51 02 00      add sp, 2
3189   1541             ;; exit(); 
3190   1541 07 C5 05      call exit
3191   1544 F9            leave
3192   1545 09            ret
3193   1546             
3194   1546             printx32:
3195   1546 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3196   1549             
3197   1549             ; --- BEGIN INLINE ASM BLOCK
3198   1549 FA 05 00      lea d, [bp + 5] ; $hex
3199   154C 2B 02 00      mov b, [d+2]
3200   154F 07 5E 1E      call print_u16x
3201   1552 2A            mov b, [d]
3202   1553 07 5E 1E      call print_u16x
3203   1556             ; --- END INLINE ASM BLOCK
3204   1556             
3205   1556 F9            leave
3206   1557 09            ret
3207   1558             
3208   1558             printx16:
3209   1558 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3210   155B             
3211   155B             ; --- BEGIN INLINE ASM BLOCK
3212   155B FA 05 00      lea d, [bp + 5] ; $hex
3213   155E 2A            mov b, [d]
3214   155F 07 5E 1E      call print_u16x
3215   1562             ; --- END INLINE ASM BLOCK
3216   1562             
3217   1562 F9            leave
3218   1563 09            ret
3219   1564             
3220   1564             printx8:
3221   1564 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3222   1567             
3223   1567             ; --- BEGIN INLINE ASM BLOCK
3224   1567 FA 05 00      lea d, [bp + 5] ; $hex
3225   156A 32            mov bl, [d]
3226   156B 07 A2 1E      call print_u8x
3227   156E             ; --- END INLINE ASM BLOCK
3228   156E             
3229   156E F9            leave
3230   156F 09            ret
3231   1570             
3232   1570             hex_to_int:
3233   1570 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3234   1573             ; $value 
3235   1573 10 00 00      mov a, $0
3236   1576 45 FF FF      mov [bp + -1], a
3237   1579             ; $i 
3238   1579             ; $hex_char 
3239   1579             ; $len 
3240   1579 52 07 00      sub sp, 7
3241   157C             ;; len = strlen(hex_string); 
3242   157C FA FA FF      lea d, [bp + -6] ; $len
3243   157F DA            push d
3244   1580 FA 05 00      lea d, [bp + 5] ; $hex_string
3245   1583 2A            mov b, [d]
3246   1584 FD AB         swp b
3247   1586 D8            push b
3248   1587 07 7C 05      call strlen
3249   158A 51 02 00      add sp, 2
3250   158D E7            pop d
3251   158E FD 43         mov [d], b
3252   1590             ;; for (i = 0; i < len; i++) { 
3253   1590             _for43_init:
3254   1590 FA FD FF      lea d, [bp + -3] ; $i
3255   1593 DA            push d
3256   1594 26 00 00      mov b, $0
3257   1597 E7            pop d
3258   1598 FD 43         mov [d], b
3259   159A             _for43_cond:
3260   159A FA FD FF      lea d, [bp + -3] ; $i
3261   159D 2A            mov b, [d]
3262   159E             ; START RELATIONAL
3263   159E D7            push a
3264   159F 11            mov a, b
3265   15A0 FA FA FF      lea d, [bp + -6] ; $len
3266   15A3 2A            mov b, [d]
3267   15A4 B0            cmp a, b
3268   15A5 FD 73         slt ; <= (signed)
3269   15A7 E4            pop a
3270   15A8             ; END RELATIONAL
3271   15A8 C0 00 00      cmp b, 0
3272   15AB C6 AD 16      je _for43_exit
3273   15AE             _for43_block:
3274   15AE             ;; hex_char = hex_string[i]; 
3275   15AE FA FC FF      lea d, [bp + -4] ; $hex_char
3276   15B1 DA            push d
3277   15B2 FA 05 00      lea d, [bp + 5] ; $hex_string
3278   15B5 FD 2A         mov d, [d]
3279   15B7 D7            push a
3280   15B8 DA            push d
3281   15B9 FA FD FF      lea d, [bp + -3] ; $i
3282   15BC 2A            mov b, [d]
3283   15BD E7            pop d
3284   15BE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3285   15C2 E4            pop a
3286   15C3 32            mov bl, [d]
3287   15C4 A7 00         mov bh, 0
3288   15C6 E7            pop d
3289   15C7 FD 3E         mov [d], bl
3290   15C9             ;; if (hex_char >= 'a' && hex_char <= 'f')  
3291   15C9             _if44_cond:
3292   15C9 FA FC FF      lea d, [bp + -4] ; $hex_char
3293   15CC 32            mov bl, [d]
3294   15CD A7 00         mov bh, 0
3295   15CF             ; START RELATIONAL
3296   15CF D7            push a
3297   15D0 11            mov a, b
3298   15D1 26 61 00      mov b, $61
3299   15D4 B0            cmp a, b
3300   15D5 FD 80         sge ; >=
3301   15D7 E4            pop a
3302   15D8             ; END RELATIONAL
3303   15D8 D7            push a
3304   15D9 11            mov a, b
3305   15DA FA FC FF      lea d, [bp + -4] ; $hex_char
3306   15DD 32            mov bl, [d]
3307   15DE A7 00         mov bh, 0
3308   15E0             ; START RELATIONAL
3309   15E0 D7            push a
3310   15E1 11            mov a, b
3311   15E2 26 66 00      mov b, $66
3312   15E5 B0            cmp a, b
3313   15E6 FD 74         sle ; <=
3314   15E8 E4            pop a
3315   15E9             ; END RELATIONAL
3316   15E9 FD A7         sand a, b ; &&
3317   15EB E4            pop a
3318   15EC C0 00 00      cmp b, 0
3319   15EF C6 20 16      je _if44_else
3320   15F2             _if44_true:
3321   15F2             ;; value = (value * 16) + (hex_char - 'a' + 10); 
3322   15F2 FA FF FF      lea d, [bp + -1] ; $value
3323   15F5 DA            push d
3324   15F6 FA FF FF      lea d, [bp + -1] ; $value
3325   15F9 2A            mov b, [d]
3326   15FA             ; START FACTORS
3327   15FA D7            push a
3328   15FB 11            mov a, b
3329   15FC 26 10 00      mov b, $10
3330   15FF AC            mul a, b ; *
3331   1600 11            mov a, b
3332   1601 27            mov b, a
3333   1602 E4            pop a
3334   1603             ; END FACTORS
3335   1603             ; START TERMS
3336   1603 D7            push a
3337   1604 11            mov a, b
3338   1605 FA FC FF      lea d, [bp + -4] ; $hex_char
3339   1608 32            mov bl, [d]
3340   1609 A7 00         mov bh, 0
3341   160B             ; START TERMS
3342   160B D7            push a
3343   160C 11            mov a, b
3344   160D 26 61 00      mov b, $61
3345   1610 60            sub a, b
3346   1611 27            mov b, a
3347   1612 11            mov a, b
3348   1613 26 0A 00      mov b, $a
3349   1616 56            add b, a
3350   1617 E4            pop a
3351   1618             ; END TERMS
3352   1618 56            add b, a
3353   1619 E4            pop a
3354   161A             ; END TERMS
3355   161A E7            pop d
3356   161B FD 43         mov [d], b
3357   161D 0A 9D 16      jmp _if44_exit
3358   1620             _if44_else:
3359   1620             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3360   1620             _if45_cond:
3361   1620 FA FC FF      lea d, [bp + -4] ; $hex_char
3362   1623 32            mov bl, [d]
3363   1624 A7 00         mov bh, 0
3364   1626             ; START RELATIONAL
3365   1626 D7            push a
3366   1627 11            mov a, b
3367   1628 26 41 00      mov b, $41
3368   162B B0            cmp a, b
3369   162C FD 80         sge ; >=
3370   162E E4            pop a
3371   162F             ; END RELATIONAL
3372   162F D7            push a
3373   1630 11            mov a, b
3374   1631 FA FC FF      lea d, [bp + -4] ; $hex_char
3375   1634 32            mov bl, [d]
3376   1635 A7 00         mov bh, 0
3377   1637             ; START RELATIONAL
3378   1637 D7            push a
3379   1638 11            mov a, b
3380   1639 26 46 00      mov b, $46
3381   163C B0            cmp a, b
3382   163D FD 74         sle ; <=
3383   163F E4            pop a
3384   1640             ; END RELATIONAL
3385   1640 FD A7         sand a, b ; &&
3386   1642 E4            pop a
3387   1643 C0 00 00      cmp b, 0
3388   1646 C6 77 16      je _if45_else
3389   1649             _if45_true:
3390   1649             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3391   1649 FA FF FF      lea d, [bp + -1] ; $value
3392   164C DA            push d
3393   164D FA FF FF      lea d, [bp + -1] ; $value
3394   1650 2A            mov b, [d]
3395   1651             ; START FACTORS
3396   1651 D7            push a
3397   1652 11            mov a, b
3398   1653 26 10 00      mov b, $10
3399   1656 AC            mul a, b ; *
3400   1657 11            mov a, b
3401   1658 27            mov b, a
3402   1659 E4            pop a
3403   165A             ; END FACTORS
3404   165A             ; START TERMS
3405   165A D7            push a
3406   165B 11            mov a, b
3407   165C FA FC FF      lea d, [bp + -4] ; $hex_char
3408   165F 32            mov bl, [d]
3409   1660 A7 00         mov bh, 0
3410   1662             ; START TERMS
3411   1662 D7            push a
3412   1663 11            mov a, b
3413   1664 26 41 00      mov b, $41
3414   1667 60            sub a, b
3415   1668 27            mov b, a
3416   1669 11            mov a, b
3417   166A 26 0A 00      mov b, $a
3418   166D 56            add b, a
3419   166E E4            pop a
3420   166F             ; END TERMS
3421   166F 56            add b, a
3422   1670 E4            pop a
3423   1671             ; END TERMS
3424   1671 E7            pop d
3425   1672 FD 43         mov [d], b
3426   1674 0A 9D 16      jmp _if45_exit
3427   1677             _if45_else:
3428   1677             ;; value = (value * 16) + (hex_char - '0'); 
3429   1677 FA FF FF      lea d, [bp + -1] ; $value
3430   167A DA            push d
3431   167B FA FF FF      lea d, [bp + -1] ; $value
3432   167E 2A            mov b, [d]
3433   167F             ; START FACTORS
3434   167F D7            push a
3435   1680 11            mov a, b
3436   1681 26 10 00      mov b, $10
3437   1684 AC            mul a, b ; *
3438   1685 11            mov a, b
3439   1686 27            mov b, a
3440   1687 E4            pop a
3441   1688             ; END FACTORS
3442   1688             ; START TERMS
3443   1688 D7            push a
3444   1689 11            mov a, b
3445   168A FA FC FF      lea d, [bp + -4] ; $hex_char
3446   168D 32            mov bl, [d]
3447   168E A7 00         mov bh, 0
3448   1690             ; START TERMS
3449   1690 D7            push a
3450   1691 11            mov a, b
3451   1692 26 30 00      mov b, $30
3452   1695 60            sub a, b
3453   1696 27            mov b, a
3454   1697 E4            pop a
3455   1698             ; END TERMS
3456   1698 56            add b, a
3457   1699 E4            pop a
3458   169A             ; END TERMS
3459   169A E7            pop d
3460   169B FD 43         mov [d], b
3461   169D             _if45_exit:
3462   169D             _if44_exit:
3463   169D             _for43_update:
3464   169D FA FD FF      lea d, [bp + -3] ; $i
3465   16A0 2A            mov b, [d]
3466   16A1 D8            push b
3467   16A2 FD 77         inc b
3468   16A4 FA FD FF      lea d, [bp + -3] ; $i
3469   16A7 FD 43         mov [d], b
3470   16A9 E5            pop b
3471   16AA 0A 9A 15      jmp _for43_cond
3472   16AD             _for43_exit:
3473   16AD             ;; return value; 
3474   16AD FA FF FF      lea d, [bp + -1] ; $value
3475   16B0 2A            mov b, [d]
3476   16B1 F9            leave
3477   16B2 09            ret
3478   16B3             
3479   16B3             gets:
3480   16B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3481   16B6             
3482   16B6             ; --- BEGIN INLINE ASM BLOCK
3483   16B6 FA 05 00      lea d, [bp + 5] ; $s
3484   16B9 15            mov a, [d]
3485   16BA 3C            mov d, a
3486   16BB 07 C3 1C      call _gets
3487   16BE             ; --- END INLINE ASM BLOCK
3488   16BE             
3489   16BE             ;; return strlen(s); 
3490   16BE FA 05 00      lea d, [bp + 5] ; $s
3491   16C1 2A            mov b, [d]
3492   16C2 FD AB         swp b
3493   16C4 D8            push b
3494   16C5 07 7C 05      call strlen
3495   16C8 51 02 00      add sp, 2
3496   16CB F9            leave
3497   16CC 09            ret
3498   16CD             
3499   16CD             print_signed:
3500   16CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3501   16D0             ; $digits 
3502   16D0             ; $i 
3503   16D0 10 00 00      mov a, $0
3504   16D3 45 FA FF      mov [bp + -6], a
3505   16D6 52 07 00      sub sp, 7
3506   16D9             ;; if (num < 0) { 
3507   16D9             _if46_cond:
3508   16D9 FA 05 00      lea d, [bp + 5] ; $num
3509   16DC 2A            mov b, [d]
3510   16DD             ; START RELATIONAL
3511   16DD D7            push a
3512   16DE 11            mov a, b
3513   16DF 26 00 00      mov b, $0
3514   16E2 B0            cmp a, b
3515   16E3 FD 73         slt ; <= (signed)
3516   16E5 E4            pop a
3517   16E6             ; END RELATIONAL
3518   16E6 C0 00 00      cmp b, 0
3519   16E9 C6 06 17      je _if46_else
3520   16EC             _if46_true:
3521   16EC             ;; putchar('-'); 
3522   16EC 26 2D 00      mov b, $2d
3523   16EF DD            push bl
3524   16F0 07 DC 1A      call putchar
3525   16F3 51 01 00      add sp, 1
3526   16F6             ;; num = -num; 
3527   16F6 FA 05 00      lea d, [bp + 5] ; $num
3528   16F9 DA            push d
3529   16FA FA 05 00      lea d, [bp + 5] ; $num
3530   16FD 2A            mov b, [d]
3531   16FE FD 97         neg b
3532   1700 E7            pop d
3533   1701 FD 43         mov [d], b
3534   1703 0A 28 17      jmp _if46_exit
3535   1706             _if46_else:
3536   1706             ;; if (num == 0) { 
3537   1706             _if47_cond:
3538   1706 FA 05 00      lea d, [bp + 5] ; $num
3539   1709 2A            mov b, [d]
3540   170A             ; START RELATIONAL
3541   170A D7            push a
3542   170B 11            mov a, b
3543   170C 26 00 00      mov b, $0
3544   170F B0            cmp a, b
3545   1710 FD 71         seq ; ==
3546   1712 E4            pop a
3547   1713             ; END RELATIONAL
3548   1713 C0 00 00      cmp b, 0
3549   1716 C6 28 17      je _if47_exit
3550   1719             _if47_true:
3551   1719             ;; putchar('0'); 
3552   1719 26 30 00      mov b, $30
3553   171C DD            push bl
3554   171D 07 DC 1A      call putchar
3555   1720 51 01 00      add sp, 1
3556   1723             ;; return; 
3557   1723 F9            leave
3558   1724 09            ret
3559   1725 0A 28 17      jmp _if47_exit
3560   1728             _if47_exit:
3561   1728             _if46_exit:
3562   1728             ;; while (num > 0) { 
3563   1728             _while48_cond:
3564   1728 FA 05 00      lea d, [bp + 5] ; $num
3565   172B 2A            mov b, [d]
3566   172C             ; START RELATIONAL
3567   172C D7            push a
3568   172D 11            mov a, b
3569   172E 26 00 00      mov b, $0
3570   1731 B0            cmp a, b
3571   1732 FD 7F         sgt ; >
3572   1734 E4            pop a
3573   1735             ; END RELATIONAL
3574   1735 C0 00 00      cmp b, 0
3575   1738 C6 82 17      je _while48_exit
3576   173B             _while48_block:
3577   173B             ;; digits[i] = '0' + (num % 10); 
3578   173B FA FC FF      lea d, [bp + -4] ; $digits
3579   173E D7            push a
3580   173F DA            push d
3581   1740 FA FA FF      lea d, [bp + -6] ; $i
3582   1743 2A            mov b, [d]
3583   1744 E7            pop d
3584   1745 5A            add d, b
3585   1746 E4            pop a
3586   1747 DA            push d
3587   1748 26 30 00      mov b, $30
3588   174B             ; START TERMS
3589   174B D7            push a
3590   174C 11            mov a, b
3591   174D FA 05 00      lea d, [bp + 5] ; $num
3592   1750 2A            mov b, [d]
3593   1751             ; START FACTORS
3594   1751 D7            push a
3595   1752 11            mov a, b
3596   1753 26 0A 00      mov b, $a
3597   1756 AE            div a, b ; 
3598   1757 11            mov a, b
3599   1758 27            mov b, a
3600   1759 E4            pop a
3601   175A             ; END FACTORS
3602   175A 56            add b, a
3603   175B E4            pop a
3604   175C             ; END TERMS
3605   175C E7            pop d
3606   175D FD 3E         mov [d], bl
3607   175F             ;; num = num / 10; 
3608   175F FA 05 00      lea d, [bp + 5] ; $num
3609   1762 DA            push d
3610   1763 FA 05 00      lea d, [bp + 5] ; $num
3611   1766 2A            mov b, [d]
3612   1767             ; START FACTORS
3613   1767 D7            push a
3614   1768 11            mov a, b
3615   1769 26 0A 00      mov b, $a
3616   176C AE            div a, b
3617   176D 27            mov b, a
3618   176E E4            pop a
3619   176F             ; END FACTORS
3620   176F E7            pop d
3621   1770 FD 43         mov [d], b
3622   1772             ;; i++; 
3623   1772 FA FA FF      lea d, [bp + -6] ; $i
3624   1775 2A            mov b, [d]
3625   1776 D8            push b
3626   1777 FD 77         inc b
3627   1779 FA FA FF      lea d, [bp + -6] ; $i
3628   177C FD 43         mov [d], b
3629   177E E5            pop b
3630   177F 0A 28 17      jmp _while48_cond
3631   1782             _while48_exit:
3632   1782             ;; while (i > 0) { 
3633   1782             _while49_cond:
3634   1782 FA FA FF      lea d, [bp + -6] ; $i
3635   1785 2A            mov b, [d]
3636   1786             ; START RELATIONAL
3637   1786 D7            push a
3638   1787 11            mov a, b
3639   1788 26 00 00      mov b, $0
3640   178B B0            cmp a, b
3641   178C FD 7F         sgt ; >
3642   178E E4            pop a
3643   178F             ; END RELATIONAL
3644   178F C0 00 00      cmp b, 0
3645   1792 C6 BB 17      je _while49_exit
3646   1795             _while49_block:
3647   1795             ;; i--; 
3648   1795 FA FA FF      lea d, [bp + -6] ; $i
3649   1798 2A            mov b, [d]
3650   1799 D8            push b
3651   179A FD 7D         dec b
3652   179C FA FA FF      lea d, [bp + -6] ; $i
3653   179F FD 43         mov [d], b
3654   17A1 E5            pop b
3655   17A2             ;; putchar(digits[i]); 
3656   17A2 FA FC FF      lea d, [bp + -4] ; $digits
3657   17A5 D7            push a
3658   17A6 DA            push d
3659   17A7 FA FA FF      lea d, [bp + -6] ; $i
3660   17AA 2A            mov b, [d]
3661   17AB E7            pop d
3662   17AC 5A            add d, b
3663   17AD E4            pop a
3664   17AE 32            mov bl, [d]
3665   17AF A7 00         mov bh, 0
3666   17B1 DD            push bl
3667   17B2 07 DC 1A      call putchar
3668   17B5 51 01 00      add sp, 1
3669   17B8 0A 82 17      jmp _while49_cond
3670   17BB             _while49_exit:
3671   17BB F9            leave
3672   17BC 09            ret
3673   17BD             
3674   17BD             print_signed_long:
3675   17BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3676   17C0             ; $digits 
3677   17C0             ; $i 
3678   17C0 10 00 00      mov a, $0
3679   17C3 45 F5 FF      mov [bp + -11], a
3680   17C6 52 0C 00      sub sp, 12
3681   17C9             ;; if (num < 0) { 
3682   17C9             _if50_cond:
3683   17C9 FA 05 00      lea d, [bp + 5] ; $num
3684   17CC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3685   17CF FD 39         mov c, b ; And place it into C
3686   17D1 2A            mov b, [d] ; Lower Word in B
3687   17D2             ; START RELATIONAL
3688   17D2 D7            push a
3689   17D3 FD D8         push g
3690   17D5 11            mov a, b
3691   17D6 FD 7A         mov g, c
3692   17D8 26 00 00      mov b, $0
3693   17DB 4D            mov si, a
3694   17DC 11            mov a, b
3695   17DD 4F            mov di, a
3696   17DE FD 12         mov a, g
3697   17E0 28            mov b, c
3698   17E1 B0            cmp a, b
3699   17E2 FD 75         slu ; <
3700   17E4 D8            push b
3701   17E5 28            mov b, c
3702   17E6 FD 71         seq ; ==
3703   17E8 D8            push b
3704   17E9 50            mov a, di
3705   17EA 27            mov b, a
3706   17EB 4E            mov a, si
3707   17EC B0            cmp a, b
3708   17ED FD 75         slu ; <
3709   17EF E4            pop a
3710   17F0 FD 92         and b, a
3711   17F2 E4            pop a
3712   17F3 FD 70         or b, a
3713   17F5               
3714   17F5 FD F1         pop g
3715   17F7 E4            pop a
3716   17F8             ; END RELATIONAL
3717   17F8 C0 00 00      cmp b, 0
3718   17FB C6 22 18      je _if50_else
3719   17FE             _if50_true:
3720   17FE             ;; putchar('-'); 
3721   17FE 26 2D 00      mov b, $2d
3722   1801 DD            push bl
3723   1802 07 DC 1A      call putchar
3724   1805 51 01 00      add sp, 1
3725   1808             ;; num = -num; 
3726   1808 FA 05 00      lea d, [bp + 5] ; $num
3727   180B DA            push d
3728   180C FA 05 00      lea d, [bp + 5] ; $num
3729   180F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3730   1812 FD 39         mov c, b ; And place it into C
3731   1814 2A            mov b, [d] ; Lower Word in B
3732   1815 FD 97         neg b
3733   1817 E7            pop d
3734   1818 FD 43         mov [d], b
3735   181A 28            mov b, c
3736   181B FD 44 02 00   mov [d + 2], b
3737   181F 0A 59 18      jmp _if50_exit
3738   1822             _if50_else:
3739   1822             ;; if (num == 0) { 
3740   1822             _if51_cond:
3741   1822 FA 05 00      lea d, [bp + 5] ; $num
3742   1825 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3743   1828 FD 39         mov c, b ; And place it into C
3744   182A 2A            mov b, [d] ; Lower Word in B
3745   182B             ; START RELATIONAL
3746   182B D7            push a
3747   182C FD D8         push g
3748   182E 11            mov a, b
3749   182F FD 7A         mov g, c
3750   1831 26 00 00      mov b, $0
3751   1834 B0            cmp a, b
3752   1835 FD 71         seq ; ==
3753   1837 D8            push b
3754   1838 12            mov a, c
3755   1839 FD 27         mov b, g
3756   183B B0            cmp a, b
3757   183C FD 71         seq ; ==
3758   183E E4            pop a
3759   183F FD A7         sand a, b
3760   1841 FD F1         pop g
3761   1843 E4            pop a
3762   1844             ; END RELATIONAL
3763   1844 C0 00 00      cmp b, 0
3764   1847 C6 59 18      je _if51_exit
3765   184A             _if51_true:
3766   184A             ;; putchar('0'); 
3767   184A 26 30 00      mov b, $30
3768   184D DD            push bl
3769   184E 07 DC 1A      call putchar
3770   1851 51 01 00      add sp, 1
3771   1854             ;; return; 
3772   1854 F9            leave
3773   1855 09            ret
3774   1856 0A 59 18      jmp _if51_exit
3775   1859             _if51_exit:
3776   1859             _if50_exit:
3777   1859             ;; while (num > 0) { 
3778   1859             _while52_cond:
3779   1859 FA 05 00      lea d, [bp + 5] ; $num
3780   185C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3781   185F FD 39         mov c, b ; And place it into C
3782   1861 2A            mov b, [d] ; Lower Word in B
3783   1862             ; START RELATIONAL
3784   1862 D7            push a
3785   1863 FD D8         push g
3786   1865 11            mov a, b
3787   1866 FD 7A         mov g, c
3788   1868 26 00 00      mov b, $0
3789   186B B0            cmp a, b
3790   186C FD 7F         sgt ; >
3791   186E FD F1         pop g
3792   1870 E4            pop a
3793   1871             ; END RELATIONAL
3794   1871 C0 00 00      cmp b, 0
3795   1874 C6 D4 18      je _while52_exit
3796   1877             _while52_block:
3797   1877             ;; digits[i] = '0' + (num % 10); 
3798   1877 FA F7 FF      lea d, [bp + -9] ; $digits
3799   187A D7            push a
3800   187B DA            push d
3801   187C FA F5 FF      lea d, [bp + -11] ; $i
3802   187F 2A            mov b, [d]
3803   1880 E7            pop d
3804   1881 5A            add d, b
3805   1882 E4            pop a
3806   1883 DA            push d
3807   1884 26 30 00      mov b, $30
3808   1887             ; START TERMS
3809   1887 D7            push a
3810   1888 11            mov a, b
3811   1889 FA 05 00      lea d, [bp + 5] ; $num
3812   188C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3813   188F FD 39         mov c, b ; And place it into C
3814   1891 2A            mov b, [d] ; Lower Word in B
3815   1892             ; START FACTORS
3816   1892 D7            push a
3817   1893 11            mov a, b
3818   1894 26 0A 00      mov b, $a
3819   1897 AE            div a, b ; 
3820   1898 11            mov a, b
3821   1899 27            mov b, a
3822   189A E4            pop a
3823   189B             ; END FACTORS
3824   189B 54            add a, b
3825   189C D7            push a
3826   189D FD 12         mov a, g
3827   189F 28            mov b, c
3828   18A0 5C            adc a, b
3829   18A1 39            mov c, a
3830   18A2 E5            pop b
3831   18A3 E4            pop a
3832   18A4             ; END TERMS
3833   18A4 E7            pop d
3834   18A5 FD 3E         mov [d], bl
3835   18A7             ;; num = num / 10; 
3836   18A7 FA 05 00      lea d, [bp + 5] ; $num
3837   18AA DA            push d
3838   18AB FA 05 00      lea d, [bp + 5] ; $num
3839   18AE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3840   18B1 FD 39         mov c, b ; And place it into C
3841   18B3 2A            mov b, [d] ; Lower Word in B
3842   18B4             ; START FACTORS
3843   18B4 D7            push a
3844   18B5 11            mov a, b
3845   18B6 26 0A 00      mov b, $a
3846   18B9 AE            div a, b
3847   18BA 27            mov b, a
3848   18BB E4            pop a
3849   18BC             ; END FACTORS
3850   18BC E7            pop d
3851   18BD FD 43         mov [d], b
3852   18BF 28            mov b, c
3853   18C0 FD 44 02 00   mov [d + 2], b
3854   18C4             ;; i++; 
3855   18C4 FA F5 FF      lea d, [bp + -11] ; $i
3856   18C7 2A            mov b, [d]
3857   18C8 D8            push b
3858   18C9 FD 77         inc b
3859   18CB FA F5 FF      lea d, [bp + -11] ; $i
3860   18CE FD 43         mov [d], b
3861   18D0 E5            pop b
3862   18D1 0A 59 18      jmp _while52_cond
3863   18D4             _while52_exit:
3864   18D4             ;; while (i > 0) { 
3865   18D4             _while53_cond:
3866   18D4 FA F5 FF      lea d, [bp + -11] ; $i
3867   18D7 2A            mov b, [d]
3868   18D8             ; START RELATIONAL
3869   18D8 D7            push a
3870   18D9 11            mov a, b
3871   18DA 26 00 00      mov b, $0
3872   18DD B0            cmp a, b
3873   18DE FD 7F         sgt ; >
3874   18E0 E4            pop a
3875   18E1             ; END RELATIONAL
3876   18E1 C0 00 00      cmp b, 0
3877   18E4 C6 0D 19      je _while53_exit
3878   18E7             _while53_block:
3879   18E7             ;; i--; 
3880   18E7 FA F5 FF      lea d, [bp + -11] ; $i
3881   18EA 2A            mov b, [d]
3882   18EB D8            push b
3883   18EC FD 7D         dec b
3884   18EE FA F5 FF      lea d, [bp + -11] ; $i
3885   18F1 FD 43         mov [d], b
3886   18F3 E5            pop b
3887   18F4             ;; putchar(digits[i]); 
3888   18F4 FA F7 FF      lea d, [bp + -9] ; $digits
3889   18F7 D7            push a
3890   18F8 DA            push d
3891   18F9 FA F5 FF      lea d, [bp + -11] ; $i
3892   18FC 2A            mov b, [d]
3893   18FD E7            pop d
3894   18FE 5A            add d, b
3895   18FF E4            pop a
3896   1900 32            mov bl, [d]
3897   1901 A7 00         mov bh, 0
3898   1903 DD            push bl
3899   1904 07 DC 1A      call putchar
3900   1907 51 01 00      add sp, 1
3901   190A 0A D4 18      jmp _while53_cond
3902   190D             _while53_exit:
3903   190D F9            leave
3904   190E 09            ret
3905   190F             
3906   190F             print_unsigned_long:
3907   190F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3908   1912             ; $digits 
3909   1912             ; $i 
3910   1912 52 0C 00      sub sp, 12
3911   1915             ;; i = 0; 
3912   1915 FA F5 FF      lea d, [bp + -11] ; $i
3913   1918 DA            push d
3914   1919 26 00 00      mov b, $0
3915   191C E7            pop d
3916   191D FD 43         mov [d], b
3917   191F             ;; if(num == 0){ 
3918   191F             _if54_cond:
3919   191F FA 05 00      lea d, [bp + 5] ; $num
3920   1922 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3921   1925 FD 39         mov c, b ; And place it into C
3922   1927 2A            mov b, [d] ; Lower Word in B
3923   1928             ; START RELATIONAL
3924   1928 D7            push a
3925   1929 FD D8         push g
3926   192B 11            mov a, b
3927   192C FD 7A         mov g, c
3928   192E 26 00 00      mov b, $0
3929   1931 B0            cmp a, b
3930   1932 FD 71         seq ; ==
3931   1934 D8            push b
3932   1935 12            mov a, c
3933   1936 FD 27         mov b, g
3934   1938 B0            cmp a, b
3935   1939 FD 71         seq ; ==
3936   193B E4            pop a
3937   193C FD A7         sand a, b
3938   193E FD F1         pop g
3939   1940 E4            pop a
3940   1941             ; END RELATIONAL
3941   1941 C0 00 00      cmp b, 0
3942   1944 C6 56 19      je _if54_exit
3943   1947             _if54_true:
3944   1947             ;; putchar('0'); 
3945   1947 26 30 00      mov b, $30
3946   194A DD            push bl
3947   194B 07 DC 1A      call putchar
3948   194E 51 01 00      add sp, 1
3949   1951             ;; return; 
3950   1951 F9            leave
3951   1952 09            ret
3952   1953 0A 56 19      jmp _if54_exit
3953   1956             _if54_exit:
3954   1956             ;; while (num > 0) { 
3955   1956             _while55_cond:
3956   1956 FA 05 00      lea d, [bp + 5] ; $num
3957   1959 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3958   195C FD 39         mov c, b ; And place it into C
3959   195E 2A            mov b, [d] ; Lower Word in B
3960   195F             ; START RELATIONAL
3961   195F D7            push a
3962   1960 FD D8         push g
3963   1962 11            mov a, b
3964   1963 FD 7A         mov g, c
3965   1965 26 00 00      mov b, $0
3966   1968 B0            cmp a, b
3967   1969 FD 81         sgu ; > (unsigned)
3968   196B FD F1         pop g
3969   196D E4            pop a
3970   196E             ; END RELATIONAL
3971   196E C0 00 00      cmp b, 0
3972   1971 C6 D1 19      je _while55_exit
3973   1974             _while55_block:
3974   1974             ;; digits[i] = '0' + (num % 10); 
3975   1974 FA F7 FF      lea d, [bp + -9] ; $digits
3976   1977 D7            push a
3977   1978 DA            push d
3978   1979 FA F5 FF      lea d, [bp + -11] ; $i
3979   197C 2A            mov b, [d]
3980   197D E7            pop d
3981   197E 5A            add d, b
3982   197F E4            pop a
3983   1980 DA            push d
3984   1981 26 30 00      mov b, $30
3985   1984             ; START TERMS
3986   1984 D7            push a
3987   1985 11            mov a, b
3988   1986 FA 05 00      lea d, [bp + 5] ; $num
3989   1989 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3990   198C FD 39         mov c, b ; And place it into C
3991   198E 2A            mov b, [d] ; Lower Word in B
3992   198F             ; START FACTORS
3993   198F D7            push a
3994   1990 11            mov a, b
3995   1991 26 0A 00      mov b, $a
3996   1994 AE            div a, b ; 
3997   1995 11            mov a, b
3998   1996 27            mov b, a
3999   1997 E4            pop a
4000   1998             ; END FACTORS
4001   1998 54            add a, b
4002   1999 D7            push a
4003   199A FD 12         mov a, g
4004   199C 28            mov b, c
4005   199D 5C            adc a, b
4006   199E 39            mov c, a
4007   199F E5            pop b
4008   19A0 E4            pop a
4009   19A1             ; END TERMS
4010   19A1 E7            pop d
4011   19A2 FD 3E         mov [d], bl
4012   19A4             ;; num = num / 10; 
4013   19A4 FA 05 00      lea d, [bp + 5] ; $num
4014   19A7 DA            push d
4015   19A8 FA 05 00      lea d, [bp + 5] ; $num
4016   19AB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4017   19AE FD 39         mov c, b ; And place it into C
4018   19B0 2A            mov b, [d] ; Lower Word in B
4019   19B1             ; START FACTORS
4020   19B1 D7            push a
4021   19B2 11            mov a, b
4022   19B3 26 0A 00      mov b, $a
4023   19B6 AE            div a, b
4024   19B7 27            mov b, a
4025   19B8 E4            pop a
4026   19B9             ; END FACTORS
4027   19B9 E7            pop d
4028   19BA FD 43         mov [d], b
4029   19BC 28            mov b, c
4030   19BD FD 44 02 00   mov [d + 2], b
4031   19C1             ;; i++; 
4032   19C1 FA F5 FF      lea d, [bp + -11] ; $i
4033   19C4 2A            mov b, [d]
4034   19C5 D8            push b
4035   19C6 FD 77         inc b
4036   19C8 FA F5 FF      lea d, [bp + -11] ; $i
4037   19CB FD 43         mov [d], b
4038   19CD E5            pop b
4039   19CE 0A 56 19      jmp _while55_cond
4040   19D1             _while55_exit:
4041   19D1             ;; while (i > 0) { 
4042   19D1             _while56_cond:
4043   19D1 FA F5 FF      lea d, [bp + -11] ; $i
4044   19D4 2A            mov b, [d]
4045   19D5             ; START RELATIONAL
4046   19D5 D7            push a
4047   19D6 11            mov a, b
4048   19D7 26 00 00      mov b, $0
4049   19DA B0            cmp a, b
4050   19DB FD 7F         sgt ; >
4051   19DD E4            pop a
4052   19DE             ; END RELATIONAL
4053   19DE C0 00 00      cmp b, 0
4054   19E1 C6 0A 1A      je _while56_exit
4055   19E4             _while56_block:
4056   19E4             ;; i--; 
4057   19E4 FA F5 FF      lea d, [bp + -11] ; $i
4058   19E7 2A            mov b, [d]
4059   19E8 D8            push b
4060   19E9 FD 7D         dec b
4061   19EB FA F5 FF      lea d, [bp + -11] ; $i
4062   19EE FD 43         mov [d], b
4063   19F0 E5            pop b
4064   19F1             ;; putchar(digits[i]); 
4065   19F1 FA F7 FF      lea d, [bp + -9] ; $digits
4066   19F4 D7            push a
4067   19F5 DA            push d
4068   19F6 FA F5 FF      lea d, [bp + -11] ; $i
4069   19F9 2A            mov b, [d]
4070   19FA E7            pop d
4071   19FB 5A            add d, b
4072   19FC E4            pop a
4073   19FD 32            mov bl, [d]
4074   19FE A7 00         mov bh, 0
4075   1A00 DD            push bl
4076   1A01 07 DC 1A      call putchar
4077   1A04 51 01 00      add sp, 1
4078   1A07 0A D1 19      jmp _while56_cond
4079   1A0A             _while56_exit:
4080   1A0A F9            leave
4081   1A0B 09            ret
4082   1A0C             
4083   1A0C             print_unsigned:
4084   1A0C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4085   1A0F             ; $digits 
4086   1A0F             ; $i 
4087   1A0F 52 07 00      sub sp, 7
4088   1A12             ;; i = 0; 
4089   1A12 FA FA FF      lea d, [bp + -6] ; $i
4090   1A15 DA            push d
4091   1A16 26 00 00      mov b, $0
4092   1A19 E7            pop d
4093   1A1A FD 43         mov [d], b
4094   1A1C             ;; if(num == 0){ 
4095   1A1C             _if57_cond:
4096   1A1C FA 05 00      lea d, [bp + 5] ; $num
4097   1A1F 2A            mov b, [d]
4098   1A20             ; START RELATIONAL
4099   1A20 D7            push a
4100   1A21 11            mov a, b
4101   1A22 26 00 00      mov b, $0
4102   1A25 B0            cmp a, b
4103   1A26 FD 71         seq ; ==
4104   1A28 E4            pop a
4105   1A29             ; END RELATIONAL
4106   1A29 C0 00 00      cmp b, 0
4107   1A2C C6 3E 1A      je _if57_exit
4108   1A2F             _if57_true:
4109   1A2F             ;; putchar('0'); 
4110   1A2F 26 30 00      mov b, $30
4111   1A32 DD            push bl
4112   1A33 07 DC 1A      call putchar
4113   1A36 51 01 00      add sp, 1
4114   1A39             ;; return; 
4115   1A39 F9            leave
4116   1A3A 09            ret
4117   1A3B 0A 3E 1A      jmp _if57_exit
4118   1A3E             _if57_exit:
4119   1A3E             ;; while (num > 0) { 
4120   1A3E             _while58_cond:
4121   1A3E FA 05 00      lea d, [bp + 5] ; $num
4122   1A41 2A            mov b, [d]
4123   1A42             ; START RELATIONAL
4124   1A42 D7            push a
4125   1A43 11            mov a, b
4126   1A44 26 00 00      mov b, $0
4127   1A47 B0            cmp a, b
4128   1A48 FD 81         sgu ; > (unsigned)
4129   1A4A E4            pop a
4130   1A4B             ; END RELATIONAL
4131   1A4B C0 00 00      cmp b, 0
4132   1A4E C6 98 1A      je _while58_exit
4133   1A51             _while58_block:
4134   1A51             ;; digits[i] = '0' + (num % 10); 
4135   1A51 FA FC FF      lea d, [bp + -4] ; $digits
4136   1A54 D7            push a
4137   1A55 DA            push d
4138   1A56 FA FA FF      lea d, [bp + -6] ; $i
4139   1A59 2A            mov b, [d]
4140   1A5A E7            pop d
4141   1A5B 5A            add d, b
4142   1A5C E4            pop a
4143   1A5D DA            push d
4144   1A5E 26 30 00      mov b, $30
4145   1A61             ; START TERMS
4146   1A61 D7            push a
4147   1A62 11            mov a, b
4148   1A63 FA 05 00      lea d, [bp + 5] ; $num
4149   1A66 2A            mov b, [d]
4150   1A67             ; START FACTORS
4151   1A67 D7            push a
4152   1A68 11            mov a, b
4153   1A69 26 0A 00      mov b, $a
4154   1A6C AE            div a, b ; 
4155   1A6D 11            mov a, b
4156   1A6E 27            mov b, a
4157   1A6F E4            pop a
4158   1A70             ; END FACTORS
4159   1A70 56            add b, a
4160   1A71 E4            pop a
4161   1A72             ; END TERMS
4162   1A72 E7            pop d
4163   1A73 FD 3E         mov [d], bl
4164   1A75             ;; num = num / 10; 
4165   1A75 FA 05 00      lea d, [bp + 5] ; $num
4166   1A78 DA            push d
4167   1A79 FA 05 00      lea d, [bp + 5] ; $num
4168   1A7C 2A            mov b, [d]
4169   1A7D             ; START FACTORS
4170   1A7D D7            push a
4171   1A7E 11            mov a, b
4172   1A7F 26 0A 00      mov b, $a
4173   1A82 AE            div a, b
4174   1A83 27            mov b, a
4175   1A84 E4            pop a
4176   1A85             ; END FACTORS
4177   1A85 E7            pop d
4178   1A86 FD 43         mov [d], b
4179   1A88             ;; i++; 
4180   1A88 FA FA FF      lea d, [bp + -6] ; $i
4181   1A8B 2A            mov b, [d]
4182   1A8C D8            push b
4183   1A8D FD 77         inc b
4184   1A8F FA FA FF      lea d, [bp + -6] ; $i
4185   1A92 FD 43         mov [d], b
4186   1A94 E5            pop b
4187   1A95 0A 3E 1A      jmp _while58_cond
4188   1A98             _while58_exit:
4189   1A98             ;; while (i > 0) { 
4190   1A98             _while59_cond:
4191   1A98 FA FA FF      lea d, [bp + -6] ; $i
4192   1A9B 2A            mov b, [d]
4193   1A9C             ; START RELATIONAL
4194   1A9C D7            push a
4195   1A9D 11            mov a, b
4196   1A9E 26 00 00      mov b, $0
4197   1AA1 B0            cmp a, b
4198   1AA2 FD 7F         sgt ; >
4199   1AA4 E4            pop a
4200   1AA5             ; END RELATIONAL
4201   1AA5 C0 00 00      cmp b, 0
4202   1AA8 C6 D1 1A      je _while59_exit
4203   1AAB             _while59_block:
4204   1AAB             ;; i--; 
4205   1AAB FA FA FF      lea d, [bp + -6] ; $i
4206   1AAE 2A            mov b, [d]
4207   1AAF D8            push b
4208   1AB0 FD 7D         dec b
4209   1AB2 FA FA FF      lea d, [bp + -6] ; $i
4210   1AB5 FD 43         mov [d], b
4211   1AB7 E5            pop b
4212   1AB8             ;; putchar(digits[i]); 
4213   1AB8 FA FC FF      lea d, [bp + -4] ; $digits
4214   1ABB D7            push a
4215   1ABC DA            push d
4216   1ABD FA FA FF      lea d, [bp + -6] ; $i
4217   1AC0 2A            mov b, [d]
4218   1AC1 E7            pop d
4219   1AC2 5A            add d, b
4220   1AC3 E4            pop a
4221   1AC4 32            mov bl, [d]
4222   1AC5 A7 00         mov bh, 0
4223   1AC7 DD            push bl
4224   1AC8 07 DC 1A      call putchar
4225   1ACB 51 01 00      add sp, 1
4226   1ACE 0A 98 1A      jmp _while59_cond
4227   1AD1             _while59_exit:
4228   1AD1 F9            leave
4229   1AD2 09            ret
4230   1AD3             
4231   1AD3             date:
4232   1AD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4233   1AD6             
4234   1AD6             ; --- BEGIN INLINE ASM BLOCK
4235   1AD6 19 00         mov al, 0 
4236   1AD8 05 07         syscall sys_datetime
4237   1ADA             ; --- END INLINE ASM BLOCK
4238   1ADA             
4239   1ADA F9            leave
4240   1ADB 09            ret
4241   1ADC             
4242   1ADC             putchar:
4243   1ADC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4244   1ADF             
4245   1ADF             ; --- BEGIN INLINE ASM BLOCK
4246   1ADF FA 05 00      lea d, [bp + 5] ; $c
4247   1AE2 1E            mov al, [d]
4248   1AE3 23            mov ah, al
4249   1AE4 07 BC 1C      call _putchar
4250   1AE7             ; --- END INLINE ASM BLOCK
4251   1AE7             
4252   1AE7 F9            leave
4253   1AE8 09            ret
4254   1AE9             
4255   1AE9             getchar:
4256   1AE9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4257   1AEC             ; $c 
4258   1AEC 52 01 00      sub sp, 1
4259   1AEF             
4260   1AEF             ; --- BEGIN INLINE ASM BLOCK
4261   1AEF 07 B5 1C      call getch
4262   1AF2 1A            mov al, ah
4263   1AF3 FA 00 00      lea d, [bp + 0] ; $c
4264   1AF6 3E            mov [d], al
4265   1AF7             ; --- END INLINE ASM BLOCK
4266   1AF7             
4267   1AF7             ;; return c; 
4268   1AF7 FA 00 00      lea d, [bp + 0] ; $c
4269   1AFA 32            mov bl, [d]
4270   1AFB A7 00         mov bh, 0
4271   1AFD F9            leave
4272   1AFE 09            ret
4273   1AFF             
4274   1AFF             scann:
4275   1AFF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4276   1B02             ; $m 
4277   1B02 52 02 00      sub sp, 2
4278   1B05             
4279   1B05             ; --- BEGIN INLINE ASM BLOCK
4280   1B05 07 00 1F      call scan_u16d
4281   1B08 FA FF FF      lea d, [bp + -1] ; $m
4282   1B0B 43            mov [d], a
4283   1B0C             ; --- END INLINE ASM BLOCK
4284   1B0C             
4285   1B0C             ;; return m; 
4286   1B0C FA FF FF      lea d, [bp + -1] ; $m
4287   1B0F 2A            mov b, [d]
4288   1B10 F9            leave
4289   1B11 09            ret
4290   1B12             
4291   1B12             puts:
4292   1B12 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4293   1B15             
4294   1B15             ; --- BEGIN INLINE ASM BLOCK
4295   1B15 FA 05 00      lea d, [bp + 5] ; $s
4296   1B18 15            mov a, [d]
4297   1B19 3C            mov d, a
4298   1B1A 07 06 1E      call _puts
4299   1B1D 10 00 0A      mov a, $0A00
4300   1B20 05 03         syscall sys_io
4301   1B22             ; --- END INLINE ASM BLOCK
4302   1B22             
4303   1B22 F9            leave
4304   1B23 09            ret
4305   1B24             
4306   1B24             print:
4307   1B24 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4308   1B27             
4309   1B27             ; --- BEGIN INLINE ASM BLOCK
4310   1B27 FA 05 00      lea d, [bp + 5] ; $s
4311   1B2A FD 2A         mov d, [d]
4312   1B2C 07 06 1E      call _puts
4313   1B2F             ; --- END INLINE ASM BLOCK
4314   1B2F             
4315   1B2F F9            leave
4316   1B30 09            ret
4317   1B31             
4318   1B31             loadfile:
4319   1B31 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4320   1B34             
4321   1B34             ; --- BEGIN INLINE ASM BLOCK
4322   1B34 FA 07 00      lea d, [bp + 7] ; $destination
4323   1B37 15            mov a, [d]
4324   1B38 4F            mov di, a
4325   1B39 FA 05 00      lea d, [bp + 5] ; $filename
4326   1B3C FD 2A         mov d, [d]
4327   1B3E 19 14         mov al, 20
4328   1B40 05 04         syscall sys_filesystem
4329   1B42             ; --- END INLINE ASM BLOCK
4330   1B42             
4331   1B42 F9            leave
4332   1B43 09            ret
4333   1B44             
4334   1B44             create_file:
4335   1B44 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4336   1B47 F9            leave
4337   1B48 09            ret
4338   1B49             
4339   1B49             delete_file:
4340   1B49 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4341   1B4C             
4342   1B4C             ; --- BEGIN INLINE ASM BLOCK
4343   1B4C FA 05 00      lea d, [bp + 5] ; $filename
4344   1B4F 19 0A         mov al, 10
4345   1B51 05 04         syscall sys_filesystem
4346   1B53             ; --- END INLINE ASM BLOCK
4347   1B53             
4348   1B53 F9            leave
4349   1B54 09            ret
4350   1B55             
4351   1B55             fopen:
4352   1B55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4353   1B58 F9            leave
4354   1B59 09            ret
4355   1B5A             
4356   1B5A             fclose:
4357   1B5A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4358   1B5D F9            leave
4359   1B5E 09            ret
4360   1B5F             
4361   1B5F             load_hex:
4362   1B5F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4363   1B62             ; $temp 
4364   1B62 52 02 00      sub sp, 2
4365   1B65             ;; temp = alloc(32768); 
4366   1B65 FA FF FF      lea d, [bp + -1] ; $temp
4367   1B68 DA            push d
4368   1B69 26 00 80      mov b, $8000
4369   1B6C FD AB         swp b
4370   1B6E D8            push b
4371   1B6F 07 06 07      call alloc
4372   1B72 51 02 00      add sp, 2
4373   1B75 E7            pop d
4374   1B76 FD 43         mov [d], b
4375   1B78             
4376   1B78             ; --- BEGIN INLINE ASM BLOCK
4377   1B78               
4378   1B78               
4379   1B78               
4380   1B78               
4381   1B78               
4382   1B78             _load_hex:
4383   1B78 D7            push a
4384   1B79 D8            push b
4385   1B7A DA            push d
4386   1B7B E2            push si
4387   1B7C E3            push di
4388   1B7D 52 00 80      sub sp, $8000      
4389   1B80 38 00 00      mov c, 0
4390   1B83 48            mov a, sp
4391   1B84 77            inc a
4392   1B85 3C            mov d, a          
4393   1B86 07 C3 1C      call _gets        
4394   1B89 4D            mov si, a
4395   1B8A             __load_hex_loop:
4396   1B8A F6            lodsb             
4397   1B8B B9 00         cmp al, 0         
4398   1B8D C6 9B 1B      jz __load_hex_ret
4399   1B90 36            mov bh, al
4400   1B91 F6            lodsb
4401   1B92 2F            mov bl, al
4402   1B93 07 7A 1C      call _atoi        
4403   1B96 F7            stosb             
4404   1B97 78            inc c
4405   1B98 0A 8A 1B      jmp __load_hex_loop
4406   1B9B             __load_hex_ret:
4407   1B9B 51 00 80      add sp, $8000
4408   1B9E F0            pop di
4409   1B9F EF            pop si
4410   1BA0 E7            pop d
4411   1BA1 E5            pop b
4412   1BA2 E4            pop a
4413   1BA3             ; --- END INLINE ASM BLOCK
4414   1BA3             
4415   1BA3 F9            leave
4416   1BA4 09            ret
4417   1BA5             
4418   1BA5             getparam:
4419   1BA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4420   1BA8             ; $data 
4421   1BA8 52 01 00      sub sp, 1
4422   1BAB             
4423   1BAB             ; --- BEGIN INLINE ASM BLOCK
4424   1BAB 19 04         mov al, 4
4425   1BAD FA 05 00      lea d, [bp + 5] ; $address
4426   1BB0 FD 2A         mov d, [d]
4427   1BB2 05 0C         syscall sys_system
4428   1BB4 FA 00 00      lea d, [bp + 0] ; $data
4429   1BB7 FD 3E         mov [d], bl
4430   1BB9             ; --- END INLINE ASM BLOCK
4431   1BB9             
4432   1BB9             ;; return data; 
4433   1BB9 FA 00 00      lea d, [bp + 0] ; $data
4434   1BBC 32            mov bl, [d]
4435   1BBD A7 00         mov bh, 0
4436   1BBF F9            leave
4437   1BC0 09            ret
4438   1BC1             
4439   1BC1             clear:
4440   1BC1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4441   1BC4             ;; print("\033[2J\033[H"); 
4442   1BC4 26 F7 20      mov b, __s2 ; "\033[2J\033[H"
4443   1BC7 FD AB         swp b
4444   1BC9 D8            push b
4445   1BCA 07 24 1B      call print
4446   1BCD 51 02 00      add sp, 2
4447   1BD0 F9            leave
4448   1BD1 09            ret
4449   1BD2             
4450   1BD2             include_stdio_asm:
4451   1BD2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4452   1BD5             
4453   1BD5             ; --- BEGIN INLINE ASM BLOCK
4454   1BD5             .include "lib/asm/stdio.asm"
0001+  1BD5             ;-----------------------------------------------------------------------------
0002+  1BD5             ; stdio.s
0003+  1BD5             ;-----------------------------------------------------------------------------
0004+  1BD5             .include "lib/asm/string.asm"
0001++ 1BD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1BD5             ; string.s
0003++ 1BD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1BD5             
0005++ 1BD5             
0006++ 1BD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1BD5             ; _strrev
0008++ 1BD5             ; reverse a string
0009++ 1BD5             ; D = string address
0010++ 1BD5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1BD5             ; 01234
0012++ 1BD5             _strrev:
0013++ 1BD5 4B          	pusha
0014++ 1BD6 07 1C 1C    	call _strlen	; length in C
0015++ 1BD9 12          	mov a, c
0016++ 1BDA AF 01 00    	cmp a, 1
0017++ 1BDD D0 F7 1B    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1BE0 7D          	dec a
0019++ 1BE1 FD 4E       	mov si, d	; beginning of string
0020++ 1BE3 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1BE5 59          	add d, a	; end of string
0022++ 1BE6 12          	mov a, c
0023++ 1BE7 FD 9B       	shr a		; divide by 2
0024++ 1BE9 39          	mov c, a	; C now counts the steps
0025++ 1BEA             _strrev_L0:
0026++ 1BEA 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1BEB F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1BEC 3E          	mov [d], al	; store left char into right side
0029++ 1BED 1B          	mov al, bl
0030++ 1BEE F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1BEF 7E          	dec c
0032++ 1BF0 7F          	dec d
0033++ 1BF1 C2 00 00    	cmp c, 0
0034++ 1BF4 C7 EA 1B    	jne _strrev_L0
0035++ 1BF7             _strrev_end:
0036++ 1BF7 4C          	popa
0037++ 1BF8 09          	ret
0038++ 1BF9             	
0039++ 1BF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1BF9             ; _strchr
0041++ 1BF9             ; search string in D for char in AL
0042++ 1BF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1BF9             _strchr:
0044++ 1BF9             _strchr_L0:
0045++ 1BF9 32          	mov bl, [d]
0046++ 1BFA C1 00       	cmp bl, 0
0047++ 1BFC C6 07 1C    	je _strchr_end
0048++ 1BFF BA          	cmp al, bl
0049++ 1C00 C6 07 1C    	je _strchr_end
0050++ 1C03 79          	inc d
0051++ 1C04 0A F9 1B    	jmp _strchr_L0
0052++ 1C07             _strchr_end:
0053++ 1C07 1B          	mov al, bl
0054++ 1C08 09          	ret
0055++ 1C09             
0056++ 1C09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1C09             ; _strstr
0058++ 1C09             ; find sub-string
0059++ 1C09             ; str1 in SI
0060++ 1C09             ; str2 in DI
0061++ 1C09             ; SI points to end of source string
0062++ 1C09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1C09             _strstr:
0064++ 1C09 DB          	push al
0065++ 1C0A DA          	push d
0066++ 1C0B E3          	push di
0067++ 1C0C             _strstr_loop:
0068++ 1C0C F3          	cmpsb					; compare a byte of the strings
0069++ 1C0D C7 18 1C    	jne _strstr_ret
0070++ 1C10 FC 00 00    	lea d, [di + 0]
0071++ 1C13 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1C15 C7 0C 1C    	jne _strstr_loop				; equal chars but not at end
0073++ 1C18             _strstr_ret:
0074++ 1C18 F0          	pop di
0075++ 1C19 E7          	pop d
0076++ 1C1A E8          	pop al
0077++ 1C1B 09          	ret
0078++ 1C1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1C1C             ; length of null terminated string
0080++ 1C1C             ; result in C
0081++ 1C1C             ; pointer in D
0082++ 1C1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1C1C             _strlen:
0084++ 1C1C DA          	push d
0085++ 1C1D 38 00 00    	mov c, 0
0086++ 1C20             _strlen_L1:
0087++ 1C20 BD 00       	cmp byte [d], 0
0088++ 1C22 C6 2A 1C    	je _strlen_ret
0089++ 1C25 79          	inc d
0090++ 1C26 78          	inc c
0091++ 1C27 0A 20 1C    	jmp _strlen_L1
0092++ 1C2A             _strlen_ret:
0093++ 1C2A E7          	pop d
0094++ 1C2B 09          	ret
0095++ 1C2C             
0096++ 1C2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1C2C             ; STRCMP
0098++ 1C2C             ; compare two strings
0099++ 1C2C             ; str1 in SI
0100++ 1C2C             ; str2 in DI
0101++ 1C2C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1C2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1C2C             _strcmp:
0104++ 1C2C DB          	push al
0105++ 1C2D DA          	push d
0106++ 1C2E E3          	push di
0107++ 1C2F E2          	push si
0108++ 1C30             _strcmp_loop:
0109++ 1C30 F3          	cmpsb					; compare a byte of the strings
0110++ 1C31 C7 3C 1C    	jne _strcmp_ret
0111++ 1C34 FB FF FF    	lea d, [si +- 1]
0112++ 1C37 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1C39 C7 30 1C    	jne _strcmp_loop				; equal chars but not at end
0114++ 1C3C             _strcmp_ret:
0115++ 1C3C EF          	pop si
0116++ 1C3D F0          	pop di
0117++ 1C3E E7          	pop d
0118++ 1C3F E8          	pop al
0119++ 1C40 09          	ret
0120++ 1C41             
0121++ 1C41             
0122++ 1C41             ; STRCPY
0123++ 1C41             ; copy null terminated string from SI to DI
0124++ 1C41             ; source in SI
0125++ 1C41             ; destination in DI
0126++ 1C41             _strcpy:
0127++ 1C41 E2          	push si
0128++ 1C42 E3          	push di
0129++ 1C43 DB          	push al
0130++ 1C44             _strcpy_L1:
0131++ 1C44 F6          	lodsb
0132++ 1C45 F7          	stosb
0133++ 1C46 B9 00       	cmp al, 0
0134++ 1C48 C7 44 1C    	jne _strcpy_L1
0135++ 1C4B             _strcpy_end:
0136++ 1C4B E8          	pop al
0137++ 1C4C F0          	pop di
0138++ 1C4D EF          	pop si
0139++ 1C4E 09          	ret
0140++ 1C4F             
0141++ 1C4F             ; STRCAT
0142++ 1C4F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1C4F             ; source in SI
0144++ 1C4F             ; destination in DI
0145++ 1C4F             _strcat:
0146++ 1C4F E2          	push si
0147++ 1C50 E3          	push di
0148++ 1C51 D7          	push a
0149++ 1C52 DA          	push d
0150++ 1C53 50          	mov a, di
0151++ 1C54 3C          	mov d, a
0152++ 1C55             _strcat_goto_end_L1:
0153++ 1C55 BD 00       	cmp byte[d], 0
0154++ 1C57 C6 5E 1C    	je _strcat_start
0155++ 1C5A 79          	inc d
0156++ 1C5B 0A 55 1C    	jmp _strcat_goto_end_L1
0157++ 1C5E             _strcat_start:
0158++ 1C5E FD 50       	mov di, d
0159++ 1C60             _strcat_L1:
0160++ 1C60 F6          	lodsb
0161++ 1C61 F7          	stosb
0162++ 1C62 B9 00       	cmp al, 0
0163++ 1C64 C7 60 1C    	jne _strcat_L1
0164++ 1C67             _strcat_end:
0165++ 1C67 E7          	pop d
0166++ 1C68 E4          	pop a
0167++ 1C69 F0          	pop di
0168++ 1C6A EF          	pop si
0169++ 1C6B 09          	ret
0170++ 1C6C             
0171++ 1C6C             
0005+  1C6C             
0006+  1C6C             ;-----------------------------------------------------------------------------
0007+  1C6C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1C6C             ; ASCII in BL
0009+  1C6C             ; result in AL
0010+  1C6C             ; ascii for F = 0100 0110
0011+  1C6C             ; ascii for 9 = 0011 1001
0012+  1C6C             ;-----------------------------------------------------------------------------
0013+  1C6C             hex_ascii_encode:
0014+  1C6C 1B            mov al, bl
0015+  1C6D 93 40         test al, $40        ; test if letter or number
0016+  1C6F C7 75 1C      jnz hex_letter
0017+  1C72 87 0F         and al, $0F        ; get number
0018+  1C74 09            ret
0019+  1C75             hex_letter:
0020+  1C75 87 0F         and al, $0F        ; get letter
0021+  1C77 6A 09         add al, 9
0022+  1C79 09            ret
0023+  1C7A             
0024+  1C7A             ;-----------------------------------------------------------------------------
0025+  1C7A             ; ATOI
0026+  1C7A             ; 2 letter hex string in B
0027+  1C7A             ; 8bit integer returned in AL
0028+  1C7A             ;-----------------------------------------------------------------------------
0029+  1C7A             _atoi:
0030+  1C7A D8            push b
0031+  1C7B 07 6C 1C      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1C7E 30            mov bl, bh
0033+  1C7F DB            push al          ; save a
0034+  1C80 07 6C 1C      call hex_ascii_encode
0035+  1C83 EA            pop bl  
0036+  1C84 FD 9E 04      shl al, 4
0037+  1C87 8C            or al, bl
0038+  1C88 E5            pop b
0039+  1C89 09            ret  
0040+  1C8A             
0041+  1C8A             
0042+  1C8A             ;-----------------------------------------------------------------------------
0043+  1C8A             ; ITOA
0044+  1C8A             ; 8bit value in BL
0045+  1C8A             ; 2 byte ASCII result in A
0046+  1C8A             ;-----------------------------------------------------------------------------
0047+  1C8A             _itoa:
0048+  1C8A DA            push d
0049+  1C8B D8            push b
0050+  1C8C A7 00         mov bh, 0
0051+  1C8E FD A4 04      shr bl, 4  
0052+  1C91 74            mov d, b
0053+  1C92 1F 3A 1F      mov al, [d + s_hex_digits]
0054+  1C95 23            mov ah, al
0055+  1C96               
0056+  1C96 E5            pop b
0057+  1C97 D8            push b
0058+  1C98 A7 00         mov bh, 0
0059+  1C9A FD 87 0F      and bl, $0F
0060+  1C9D 74            mov d, b
0061+  1C9E 1F 3A 1F      mov al, [d + s_hex_digits]
0062+  1CA1 E5            pop b
0063+  1CA2 E7            pop d
0064+  1CA3 09            ret
0065+  1CA4             
0066+  1CA4             ;-----------------------------------------------------------------------------
0067+  1CA4             ; HEX STRING TO BINARY
0068+  1CA4             ; di = destination address
0069+  1CA4             ; si = source
0070+  1CA4             ;-----------------------------------------------------------------------------
0071+  1CA4             _hex_to_int:
0072+  1CA4             _hex_to_int_L1:
0073+  1CA4 F6            lodsb          ; load from [SI] to AL
0074+  1CA5 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1CA7 C6 B4 1C      jz _hex_to_int_ret
0076+  1CAA 36            mov bh, al
0077+  1CAB F6            lodsb
0078+  1CAC 2F            mov bl, al
0079+  1CAD 07 7A 1C      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1CB0 F7            stosb          ; store AL to [DI]
0081+  1CB1 0A A4 1C      jmp _hex_to_int_L1
0082+  1CB4             _hex_to_int_ret:
0083+  1CB4 09            ret    
0084+  1CB5             
0085+  1CB5             ;-----------------------------------------------------------------------------
0086+  1CB5             ; GETCHAR
0087+  1CB5             ; char in ah
0088+  1CB5             ;-----------------------------------------------------------------------------
0089+  1CB5             getch:
0090+  1CB5 DB            push al
0091+  1CB6             getch_retry:
0092+  1CB6 19 01         mov al, 1
0093+  1CB8 05 03         syscall sys_io      ; receive in AH
0094+  1CBA E8            pop al
0095+  1CBB 09            ret
0096+  1CBC             
0097+  1CBC             ;-----------------------------------------------------------------------------
0098+  1CBC             ; PUTCHAR
0099+  1CBC             ; char in ah
0100+  1CBC             ;-----------------------------------------------------------------------------
0101+  1CBC             _putchar:
0102+  1CBC D7            push a
0103+  1CBD 19 00         mov al, 0
0104+  1CBF 05 03         syscall sys_io      ; char in AH
0105+  1CC1 E4            pop a
0106+  1CC2 09            ret
0107+  1CC3             
0108+  1CC3             ;-----------------------------------------------------------------------------
0109+  1CC3             ;; INPUT A STRING
0110+  1CC3             ;; terminates with null
0111+  1CC3             ;; pointer in D
0112+  1CC3             ;-----------------------------------------------------------------------------
0113+  1CC3             _gets:
0114+  1CC3 D7            push a
0115+  1CC4 DA            push d
0116+  1CC5             _gets_loop:
0117+  1CC5 19 01         mov al, 1
0118+  1CC7 05 03         syscall sys_io      ; receive in AH
0119+  1CC9 B9 00         cmp al, 0        ; check error code (AL)
0120+  1CCB C6 C5 1C      je _gets_loop      ; if no char received, retry
0121+  1CCE             
0122+  1CCE 76 1B         cmp ah, 27
0123+  1CD0 C6 F1 1C      je _gets_ansi_esc
0124+  1CD3 76 0A         cmp ah, $0A        ; LF
0125+  1CD5 C6 5C 1D      je _gets_end
0126+  1CD8 76 0D         cmp ah, $0D        ; CR
0127+  1CDA C6 5C 1D      je _gets_end
0128+  1CDD 76 5C         cmp ah, $5C        ; '\\'
0129+  1CDF C6 1D 1D      je _gets_escape
0130+  1CE2               
0131+  1CE2 76 08         cmp ah, $08      ; check for backspace
0132+  1CE4 C6 ED 1C      je _gets_backspace
0133+  1CE7             
0134+  1CE7 1A            mov al, ah
0135+  1CE8 3E            mov [d], al
0136+  1CE9 79            inc d
0137+  1CEA 0A C5 1C      jmp _gets_loop
0138+  1CED             _gets_backspace:
0139+  1CED 7F            dec d
0140+  1CEE 0A C5 1C      jmp _gets_loop
0141+  1CF1             _gets_ansi_esc:
0142+  1CF1 19 01         mov al, 1
0143+  1CF3 05 03         syscall sys_io        ; receive in AH without echo
0144+  1CF5 B9 00         cmp al, 0          ; check error code (AL)
0145+  1CF7 C6 F1 1C      je _gets_ansi_esc    ; if no char received, retry
0146+  1CFA 76 5B         cmp ah, '['
0147+  1CFC C7 C5 1C      jne _gets_loop
0148+  1CFF             _gets_ansi_esc_2:
0149+  1CFF 19 01         mov al, 1
0150+  1D01 05 03         syscall sys_io          ; receive in AH without echo
0151+  1D03 B9 00         cmp al, 0            ; check error code (AL)
0152+  1D05 C6 FF 1C      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1D08 76 44         cmp ah, 'D'
0154+  1D0A C6 15 1D      je _gets_left_arrow
0155+  1D0D 76 43         cmp ah, 'C'
0156+  1D0F C6 19 1D      je _gets_right_arrow
0157+  1D12 0A C5 1C      jmp _gets_loop
0158+  1D15             _gets_left_arrow:
0159+  1D15 7F            dec d
0160+  1D16 0A C5 1C      jmp _gets_loop
0161+  1D19             _gets_right_arrow:
0162+  1D19 79            inc d
0163+  1D1A 0A C5 1C      jmp _gets_loop
0164+  1D1D             _gets_escape:
0165+  1D1D 19 01         mov al, 1
0166+  1D1F 05 03         syscall sys_io      ; receive in AH
0167+  1D21 B9 00         cmp al, 0        ; check error code (AL)
0168+  1D23 C6 1D 1D      je _gets_escape      ; if no char received, retry
0169+  1D26 76 6E         cmp ah, 'n'
0170+  1D28 C6 47 1D      je _gets_LF
0171+  1D2B 76 72         cmp ah, 'r'
0172+  1D2D C6 4E 1D      je _gets_CR
0173+  1D30 76 30         cmp ah, '0'
0174+  1D32 C6 55 1D      je _gets_NULL
0175+  1D35 76 5C         cmp ah, $5C  ; '\'
0176+  1D37 C6 40 1D      je _gets_slash
0177+  1D3A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1D3B 3E            mov [d], al
0179+  1D3C 79            inc d
0180+  1D3D 0A C5 1C      jmp _gets_loop
0181+  1D40             _gets_slash:
0182+  1D40 19 5C         mov al, $5C
0183+  1D42 3E            mov [d], al
0184+  1D43 79            inc d
0185+  1D44 0A C5 1C      jmp _gets_loop
0186+  1D47             _gets_LF:
0187+  1D47 19 0A         mov al, $0A
0188+  1D49 3E            mov [d], al
0189+  1D4A 79            inc d
0190+  1D4B 0A C5 1C      jmp _gets_loop
0191+  1D4E             _gets_CR:
0192+  1D4E 19 0D         mov al, $0D
0193+  1D50 3E            mov [d], al
0194+  1D51 79            inc d
0195+  1D52 0A C5 1C      jmp _gets_loop
0196+  1D55             _gets_NULL:
0197+  1D55 19 00         mov al, $00
0198+  1D57 3E            mov [d], al
0199+  1D58 79            inc d
0200+  1D59 0A C5 1C      jmp _gets_loop
0201+  1D5C             _gets_end:
0202+  1D5C 19 00         mov al, 0
0203+  1D5E 3E            mov [d], al        ; terminate string
0204+  1D5F E7            pop d
0205+  1D60 E4            pop a
0206+  1D61 09            ret
0207+  1D62             
0208+  1D62             ;-----------------------------------------------------------------------------
0209+  1D62             ;; INPUT TEXT
0210+  1D62             ;; terminated with CTRL+D
0211+  1D62             ;; pointer in D
0212+  1D62             ;-----------------------------------------------------------------------------
0213+  1D62             _gettxt:
0214+  1D62 D7            push a
0215+  1D63 DA            push d
0216+  1D64             _gettxt_loop:
0217+  1D64 19 01         mov al, 1
0218+  1D66 05 03         syscall sys_io      ; receive in AH
0219+  1D68 B9 00         cmp al, 0        ; check error code (AL)
0220+  1D6A C6 64 1D      je _gettxt_loop    ; if no char received, retry
0221+  1D6D 76 04         cmp ah, 4      ; EOT
0222+  1D6F C6 AD 1D      je _gettxt_end
0223+  1D72 76 08         cmp ah, $08      ; check for backspace
0224+  1D74 C6 A9 1D      je _gettxt_backspace
0225+  1D77 76 5C         cmp ah, $5C        ; '\'
0226+  1D79 C6 82 1D      je _gettxt_escape
0227+  1D7C 1A            mov al, ah
0228+  1D7D 3E            mov [d], al
0229+  1D7E 79            inc d
0230+  1D7F 0A 64 1D      jmp _gettxt_loop
0231+  1D82             _gettxt_escape:
0232+  1D82 19 01         mov al, 1
0233+  1D84 05 03         syscall sys_io      ; receive in AH
0234+  1D86 B9 00         cmp al, 0        ; check error code (AL)
0235+  1D88 C6 82 1D      je _gettxt_escape    ; if no char received, retry
0236+  1D8B 76 6E         cmp ah, 'n'
0237+  1D8D C6 9B 1D      je _gettxt_LF
0238+  1D90 76 72         cmp ah, 'r'
0239+  1D92 C6 A2 1D      je _gettxt_CR
0240+  1D95 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1D96 3E            mov [d], al
0242+  1D97 79            inc d
0243+  1D98 0A 64 1D      jmp _gettxt_loop
0244+  1D9B             _gettxt_LF:
0245+  1D9B 19 0A         mov al, $0A
0246+  1D9D 3E            mov [d], al
0247+  1D9E 79            inc d
0248+  1D9F 0A 64 1D      jmp _gettxt_loop
0249+  1DA2             _gettxt_CR:
0250+  1DA2 19 0D         mov al, $0D
0251+  1DA4 3E            mov [d], al
0252+  1DA5 79            inc d
0253+  1DA6 0A 64 1D      jmp _gettxt_loop
0254+  1DA9             _gettxt_backspace:
0255+  1DA9 7F            dec d
0256+  1DAA 0A 64 1D      jmp _gettxt_loop
0257+  1DAD             _gettxt_end:
0258+  1DAD 19 00         mov al, 0
0259+  1DAF 3E            mov [d], al        ; terminate string
0260+  1DB0 E7            pop d
0261+  1DB1 E4            pop a
0262+  1DB2 09            ret
0263+  1DB3             
0264+  1DB3             ;-----------------------------------------------------------------------------
0265+  1DB3             ; PRINT NEW LINE
0266+  1DB3             ;-----------------------------------------------------------------------------
0267+  1DB3             printnl:
0268+  1DB3 D7            push a
0269+  1DB4 10 00 0A      mov a, $0A00
0270+  1DB7 05 03         syscall sys_io
0271+  1DB9 10 00 0D      mov a, $0D00
0272+  1DBC 05 03         syscall sys_io
0273+  1DBE E4            pop a
0274+  1DBF 09            ret
0275+  1DC0             
0276+  1DC0             ;-----------------------------------------------------------------------------
0277+  1DC0             ; _strtoint
0278+  1DC0             ; 4 digit hex string number in d
0279+  1DC0             ; integer returned in A
0280+  1DC0             ;-----------------------------------------------------------------------------
0281+  1DC0             _strtointx:
0282+  1DC0 D8            push b
0283+  1DC1 32            mov bl, [d]
0284+  1DC2 37            mov bh, bl
0285+  1DC3 33 01 00      mov bl, [d + 1]
0286+  1DC6 07 7A 1C      call _atoi        ; convert to int in AL
0287+  1DC9 23            mov ah, al        ; move to AH
0288+  1DCA 33 02 00      mov bl, [d + 2]
0289+  1DCD 37            mov bh, bl
0290+  1DCE 33 03 00      mov bl, [d + 3]
0291+  1DD1 07 7A 1C      call _atoi        ; convert to int in AL
0292+  1DD4 E5            pop b
0293+  1DD5 09            ret
0294+  1DD6             
0295+  1DD6             ;-----------------------------------------------------------------------------
0296+  1DD6             ; _strtoint
0297+  1DD6             ; 5 digit base10 string number in d
0298+  1DD6             ; integer returned in A
0299+  1DD6             ;-----------------------------------------------------------------------------
0300+  1DD6             _strtoint:
0301+  1DD6 E2            push si
0302+  1DD7 D8            push b
0303+  1DD8 D9            push c
0304+  1DD9 DA            push d
0305+  1DDA 07 1C 1C      call _strlen      ; get string length in C
0306+  1DDD 7E            dec c
0307+  1DDE FD 4E         mov si, d
0308+  1DE0 12            mov a, c
0309+  1DE1 FD 99         shl a
0310+  1DE3 3B 52 1F      mov d, table_power
0311+  1DE6 59            add d, a
0312+  1DE7 38 00 00      mov c, 0
0313+  1DEA             _strtoint_L0:
0314+  1DEA F6            lodsb      ; load ASCII to al
0315+  1DEB B9 00         cmp al, 0
0316+  1DED C6 00 1E      je _strtoint_end
0317+  1DF0 6F 30         sub al, $30    ; make into integer
0318+  1DF2 22 00         mov ah, 0
0319+  1DF4 2A            mov b, [d]
0320+  1DF5 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1DF6 11            mov a, b
0322+  1DF7 28            mov b, c
0323+  1DF8 54            add a, b
0324+  1DF9 39            mov c, a
0325+  1DFA 63 02 00      sub d, 2
0326+  1DFD 0A EA 1D      jmp _strtoint_L0
0327+  1E00             _strtoint_end:
0328+  1E00 12            mov a, c
0329+  1E01 E7            pop d
0330+  1E02 E6            pop c
0331+  1E03 E5            pop b
0332+  1E04 EF            pop si
0333+  1E05 09            ret
0334+  1E06             
0335+  1E06             ;-----------------------------------------------------------------------------
0336+  1E06             ; PRINT NULL TERMINATED STRING
0337+  1E06             ; pointer in D
0338+  1E06             ;-----------------------------------------------------------------------------
0339+  1E06             _puts:
0340+  1E06 D7            push a
0341+  1E07 DA            push d
0342+  1E08             _puts_L1:
0343+  1E08 1E            mov al, [d]
0344+  1E09 B9 00         cmp al, 0
0345+  1E0B C6 17 1E      jz _puts_END
0346+  1E0E 23            mov ah, al
0347+  1E0F 19 00         mov al, 0
0348+  1E11 05 03         syscall sys_io
0349+  1E13 79            inc d
0350+  1E14 0A 08 1E      jmp _puts_L1
0351+  1E17             _puts_END:
0352+  1E17 E7            pop d
0353+  1E18 E4            pop a
0354+  1E19 09            ret
0355+  1E1A             
0356+  1E1A             ;-----------------------------------------------------------------------------
0357+  1E1A             ; PRINT N SIZE STRING
0358+  1E1A             ; pointer in D
0359+  1E1A             ; size in C
0360+  1E1A             ;-----------------------------------------------------------------------------
0361+  1E1A             _putsn:
0362+  1E1A DB            push al
0363+  1E1B DA            push d
0364+  1E1C D9            push c
0365+  1E1D             _putsn_L0:
0366+  1E1D 1E            mov al, [d]
0367+  1E1E 23            mov ah, al
0368+  1E1F 19 00         mov al, 0
0369+  1E21 05 03         syscall sys_io
0370+  1E23 79            inc d
0371+  1E24 7E            dec c  
0372+  1E25 C2 00 00      cmp c, 0
0373+  1E28 C7 1D 1E      jne _putsn_L0
0374+  1E2B             _putsn_end:
0375+  1E2B E6            pop c
0376+  1E2C E7            pop d
0377+  1E2D E8            pop al
0378+  1E2E 09            ret
0379+  1E2F             
0380+  1E2F             ;-----------------------------------------------------------------------------
0381+  1E2F             ; print 16bit decimal number
0382+  1E2F             ; input number in A
0383+  1E2F             ;-----------------------------------------------------------------------------
0384+  1E2F             print_u16d:
0385+  1E2F D7            push a
0386+  1E30 D8            push b
0387+  1E31 26 10 27      mov b, 10000
0388+  1E34 AE            div a, b      ; get 10000's coeff.
0389+  1E35 07 57 1E      call print_number
0390+  1E38 11            mov a, b
0391+  1E39 26 E8 03      mov b, 1000
0392+  1E3C AE            div a, b      ; get 1000's coeff.
0393+  1E3D 07 57 1E      call print_number
0394+  1E40 11            mov a, b
0395+  1E41 26 64 00      mov b, 100
0396+  1E44 AE            div a, b
0397+  1E45 07 57 1E      call print_number
0398+  1E48 11            mov a, b
0399+  1E49 26 0A 00      mov b, 10
0400+  1E4C AE            div a, b
0401+  1E4D 07 57 1E      call print_number
0402+  1E50 1B            mov al, bl      ; 1's coeff in bl
0403+  1E51 07 57 1E      call print_number
0404+  1E54 E5            pop b
0405+  1E55 E4            pop a
0406+  1E56 09            ret
0407+  1E57             
0408+  1E57             ;-----------------------------------------------------------------------------
0409+  1E57             ; print AL
0410+  1E57             ;-----------------------------------------------------------------------------
0411+  1E57             print_number:
0412+  1E57 6A 30         add al, $30
0413+  1E59 23            mov ah, al
0414+  1E5A 07 BC 1C      call _putchar
0415+  1E5D 09            ret
0416+  1E5E             
0417+  1E5E             ;-----------------------------------------------------------------------------
0418+  1E5E             ; PRINT 16BIT HEX INTEGER
0419+  1E5E             ; integer value in reg B
0420+  1E5E             ;-----------------------------------------------------------------------------
0421+  1E5E             print_u16x:
0422+  1E5E D7            push a
0423+  1E5F D8            push b
0424+  1E60 DD            push bl
0425+  1E61 30            mov bl, bh
0426+  1E62 07 8A 1C      call _itoa        ; convert bh to char in A
0427+  1E65 2F            mov bl, al        ; save al
0428+  1E66 19 00         mov al, 0
0429+  1E68 05 03         syscall sys_io        ; display AH
0430+  1E6A 24            mov ah, bl        ; retrieve al
0431+  1E6B 19 00         mov al, 0
0432+  1E6D 05 03         syscall sys_io        ; display AL
0433+  1E6F             
0434+  1E6F EA            pop bl
0435+  1E70 07 8A 1C      call _itoa        ; convert bh to char in A
0436+  1E73 2F            mov bl, al        ; save al
0437+  1E74 19 00         mov al, 0
0438+  1E76 05 03         syscall sys_io        ; display AH
0439+  1E78 24            mov ah, bl        ; retrieve al
0440+  1E79 19 00         mov al, 0
0441+  1E7B 05 03         syscall sys_io        ; display AL
0442+  1E7D             
0443+  1E7D E5            pop b
0444+  1E7E E4            pop a
0445+  1E7F 09            ret
0446+  1E80             
0447+  1E80             ;-----------------------------------------------------------------------------
0448+  1E80             ; INPUT 16BIT HEX INTEGER
0449+  1E80             ; read 16bit integer into A
0450+  1E80             ;-----------------------------------------------------------------------------
0451+  1E80             scan_u16x:
0452+  1E80 F8 10 00      enter 16
0453+  1E83 D8            push b
0454+  1E84 DA            push d
0455+  1E85             
0456+  1E85 FA F1 FF      lea d, [bp + -15]
0457+  1E88 07 C3 1C      call _gets        ; get number
0458+  1E8B             
0459+  1E8B 32            mov bl, [d]
0460+  1E8C 37            mov bh, bl
0461+  1E8D 33 01 00      mov bl, [d + 1]
0462+  1E90 07 7A 1C      call _atoi        ; convert to int in AL
0463+  1E93 23            mov ah, al        ; move to AH
0464+  1E94             
0465+  1E94 33 02 00      mov bl, [d + 2]
0466+  1E97 37            mov bh, bl
0467+  1E98 33 03 00      mov bl, [d + 3]
0468+  1E9B 07 7A 1C      call _atoi        ; convert to int in AL
0469+  1E9E             
0470+  1E9E E7            pop d
0471+  1E9F E5            pop b
0472+  1EA0 F9            leave
0473+  1EA1 09            ret
0474+  1EA2             
0475+  1EA2             ;-----------------------------------------------------------------------------
0476+  1EA2             ; PRINT 8bit HEX INTEGER
0477+  1EA2             ; integer value in reg bl
0478+  1EA2             ;-----------------------------------------------------------------------------
0479+  1EA2             print_u8x:
0480+  1EA2 D7            push a
0481+  1EA3 DD            push bl
0482+  1EA4             
0483+  1EA4 07 8A 1C      call _itoa        ; convert bl to char in A
0484+  1EA7 2F            mov bl, al        ; save al
0485+  1EA8 19 00         mov al, 0
0486+  1EAA 05 03         syscall sys_io        ; display AH
0487+  1EAC 24            mov ah, bl        ; retrieve al
0488+  1EAD 19 00         mov al, 0
0489+  1EAF 05 03         syscall sys_io        ; display AL
0490+  1EB1             
0491+  1EB1 EA            pop bl
0492+  1EB2 E4            pop a
0493+  1EB3 09            ret
0494+  1EB4             
0495+  1EB4             ;-----------------------------------------------------------------------------
0496+  1EB4             ; print 8bit decimal unsigned number
0497+  1EB4             ; input number in AL
0498+  1EB4             ;-----------------------------------------------------------------------------
0499+  1EB4             print_u8d:
0500+  1EB4 D7            push a
0501+  1EB5 D8            push b
0502+  1EB6             
0503+  1EB6 22 00         mov ah, 0
0504+  1EB8 26 64 00      mov b, 100
0505+  1EBB AE            div a, b
0506+  1EBC D8            push b      ; save remainder
0507+  1EBD B9 00         cmp al, 0
0508+  1EBF C6 C9 1E      je skip100
0509+  1EC2 6A 30         add al, $30
0510+  1EC4 23            mov ah, al
0511+  1EC5 19 00         mov al, 0
0512+  1EC7 05 03         syscall sys_io  ; print coeff
0513+  1EC9             skip100:
0514+  1EC9 E4            pop a
0515+  1ECA 22 00         mov ah, 0
0516+  1ECC 26 0A 00      mov b, 10
0517+  1ECF AE            div a, b
0518+  1ED0 D8            push b      ; save remainder
0519+  1ED1 B9 00         cmp al, 0
0520+  1ED3 C6 DD 1E      je skip10
0521+  1ED6 6A 30         add al, $30
0522+  1ED8 23            mov ah, al
0523+  1ED9 19 00         mov al, 0
0524+  1EDB 05 03         syscall sys_io  ; print coeff
0525+  1EDD             skip10:
0526+  1EDD E4            pop a
0527+  1EDE 1B            mov al, bl
0528+  1EDF 6A 30         add al, $30
0529+  1EE1 23            mov ah, al
0530+  1EE2 19 00         mov al, 0
0531+  1EE4 05 03         syscall sys_io  ; print coeff
0532+  1EE6 E5            pop b
0533+  1EE7 E4            pop a
0534+  1EE8 09            ret
0535+  1EE9             
0536+  1EE9             ;-----------------------------------------------------------------------------
0537+  1EE9             ; INPUT 8BIT HEX INTEGER
0538+  1EE9             ; read 8bit integer into AL
0539+  1EE9             ;-----------------------------------------------------------------------------
0540+  1EE9             scan_u8x:
0541+  1EE9 F8 04 00      enter 4
0542+  1EEC D8            push b
0543+  1EED DA            push d
0544+  1EEE             
0545+  1EEE FA FD FF      lea d, [bp + -3]
0546+  1EF1 07 C3 1C      call _gets        ; get number
0547+  1EF4             
0548+  1EF4 32            mov bl, [d]
0549+  1EF5 37            mov bh, bl
0550+  1EF6 33 01 00      mov bl, [d + 1]
0551+  1EF9 07 7A 1C      call _atoi        ; convert to int in AL
0552+  1EFC             
0553+  1EFC E7            pop d
0554+  1EFD E5            pop b
0555+  1EFE F9            leave
0556+  1EFF 09            ret
0557+  1F00             
0558+  1F00             ;-----------------------------------------------------------------------------
0559+  1F00             ; input decimal number
0560+  1F00             ; result in A
0561+  1F00             ; 655'\0'
0562+  1F00             ; low--------high
0563+  1F00             ;-----------------------------------------------------------------------------
0564+  1F00             scan_u16d:
0565+  1F00 F8 08 00      enter 8
0566+  1F03 E2            push si
0567+  1F04 D8            push b
0568+  1F05 D9            push c
0569+  1F06 DA            push d
0570+  1F07 FA F9 FF      lea d, [bp +- 7]
0571+  1F0A 07 C3 1C      call _gets
0572+  1F0D 07 1C 1C      call _strlen      ; get string length in C
0573+  1F10 7E            dec c
0574+  1F11 FD 4E         mov si, d
0575+  1F13 12            mov a, c
0576+  1F14 FD 99         shl a
0577+  1F16 3B 52 1F      mov d, table_power
0578+  1F19 59            add d, a
0579+  1F1A 38 00 00      mov c, 0
0580+  1F1D             mul_loop:
0581+  1F1D F6            lodsb      ; load ASCII to al
0582+  1F1E B9 00         cmp al, 0
0583+  1F20 C6 33 1F      je mul_exit
0584+  1F23 6F 30         sub al, $30    ; make into integer
0585+  1F25 22 00         mov ah, 0
0586+  1F27 2A            mov b, [d]
0587+  1F28 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1F29 11            mov a, b
0589+  1F2A 28            mov b, c
0590+  1F2B 54            add a, b
0591+  1F2C 39            mov c, a
0592+  1F2D 63 02 00      sub d, 2
0593+  1F30 0A 1D 1F      jmp mul_loop
0594+  1F33             mul_exit:
0595+  1F33 12            mov a, c
0596+  1F34 E7            pop d
0597+  1F35 E6            pop c
0598+  1F36 E5            pop b
0599+  1F37 EF            pop si
0600+  1F38 F9            leave
0601+  1F39 09            ret
0602+  1F3A             
0603+  1F3A 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1F3E 34 35 36 37 
0603+  1F42 38 39 41 42 
0603+  1F46 43 44 45 46 
0604+  1F4A 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1F4E 1B 5B 48 00 
0605+  1F52             
0606+  1F52             table_power:
0607+  1F52 01 00         .dw 1
0608+  1F54 0A 00         .dw 10
0609+  1F56 64 00         .dw 100
0610+  1F58 E8 03         .dw 1000
0611+  1F5A 10 27         .dw 100004455   1F5C             ; --- END INLINE ASM BLOCK
4456   1F5C             
4457   1F5C F9            leave
4458   1F5D 09            ret
4459   1F5E             
4460   1F5E             test_globalvars:
4461   1F5E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4462   1F61             ; $pass 
4463   1F61 19 01         mov al, $1
4464   1F63 40 00 00      mov [bp + 0], al
4465   1F66 52 01 00      sub sp, 1
4466   1F69             ;; printf("testing global variables\n"); 
4467   1F69 26 FF 20      mov b, __s3 ; "testing global variables\n"
4468   1F6C FD AB         swp b
4469   1F6E D8            push b
4470   1F6F 07 EA 12      call printf
4471   1F72 51 02 00      add sp, 2
4472   1F75             ;; printf("Set 'c0' to 'A'\n"); 
4473   1F75 26 19 21      mov b, __s4 ; "Set 'c0' to 'A'\n"
4474   1F78 FD AB         swp b
4475   1F7A D8            push b
4476   1F7B 07 EA 12      call printf
4477   1F7E 51 02 00      add sp, 2
4478   1F81             ;; c0 = 'A'; 
4479   1F81 3B 31 20      mov d, _c0 ; $c0
4480   1F84 DA            push d
4481   1F85 26 41 00      mov b, $41
4482   1F88 E7            pop d
4483   1F89 FD 3E         mov [d], bl
4484   1F8B             ;; printf("c0 value: %c", c0); 
4485   1F8B 3B 31 20      mov d, _c0 ; $c0
4486   1F8E 32            mov bl, [d]
4487   1F8F A7 00         mov bh, 0
4488   1F91 DD            push bl
4489   1F92 26 2A 21      mov b, __s5 ; "c0 value: %c"
4490   1F95 FD AB         swp b
4491   1F97 D8            push b
4492   1F98 07 EA 12      call printf
4493   1F9B 51 03 00      add sp, 3
4494   1F9E             ;; printf(" (%s)", c0 == 'A' ? "pass\n" : "fail\n"); 
4495   1F9E             _ternary61_cond:
4496   1F9E 3B 31 20      mov d, _c0 ; $c0
4497   1FA1 32            mov bl, [d]
4498   1FA2 A7 00         mov bh, 0
4499   1FA4             ; START RELATIONAL
4500   1FA4 D7            push a
4501   1FA5 11            mov a, b
4502   1FA6 26 41 00      mov b, $41
4503   1FA9 B0            cmp a, b
4504   1FAA FD 71         seq ; ==
4505   1FAC E4            pop a
4506   1FAD             ; END RELATIONAL
4507   1FAD C0 00 00      cmp b, 0
4508   1FB0 C6 B9 1F      je _ternary61_false
4509   1FB3             _ternary61_true:
4510   1FB3 26 37 21      mov b, __s6 ; "pass\n"
4511   1FB6 0A BC 1F      jmp _ternary61_exit
4512   1FB9             _ternary61_false:
4513   1FB9 26 3D 21      mov b, __s7 ; "fail\n"
4514   1FBC             _ternary61_exit:
4515   1FBC FD AB         swp b
4516   1FBE D8            push b
4517   1FBF 26 43 21      mov b, __s8 ; " (%s)"
4518   1FC2 FD AB         swp b
4519   1FC4 D8            push b
4520   1FC5 07 EA 12      call printf
4521   1FC8 51 04 00      add sp, 4
4522   1FCB             ;; pass = pass && c0 == 'A'; 
4523   1FCB FA 00 00      lea d, [bp + 0] ; $pass
4524   1FCE DA            push d
4525   1FCF FA 00 00      lea d, [bp + 0] ; $pass
4526   1FD2 32            mov bl, [d]
4527   1FD3 A7 00         mov bh, 0
4528   1FD5 D7            push a
4529   1FD6 11            mov a, b
4530   1FD7 3B 31 20      mov d, _c0 ; $c0
4531   1FDA 32            mov bl, [d]
4532   1FDB A7 00         mov bh, 0
4533   1FDD             ; START RELATIONAL
4534   1FDD D7            push a
4535   1FDE 11            mov a, b
4536   1FDF 26 41 00      mov b, $41
4537   1FE2 B0            cmp a, b
4538   1FE3 FD 71         seq ; ==
4539   1FE5 E4            pop a
4540   1FE6             ; END RELATIONAL
4541   1FE6 FD A7         sand a, b ; &&
4542   1FE8 E4            pop a
4543   1FE9 E7            pop d
4544   1FEA FD 3E         mov [d], bl
4545   1FEC F9            leave
4546   1FED 09            ret
4547   1FEE             ; --- END TEXT BLOCK
4548   1FEE             
4549   1FEE             ; --- BEGIN DATA BLOCK
4550   1FEE 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4550   1FF2 45 46 47 48 
4550   1FF6 49 4A 4B 4C 
4550   1FFA 4D 4E 4F 50 
4550   1FFE 51 52 53 54 
4550   2002 55 56 57 58 
4550   2006 59 5A 61 62 
4550   200A 63 64 65 66 
4550   200E 67 68 69 6A 
4550   2012 6B 6C 6D 6E 
4550   2016 6F 70 71 72 
4550   201A 73 74 75 76 
4550   201E 77 78 79 7A 
4550   2022 30 31 32 33 
4550   2026 34 35 36 37 
4550   202A 38 39 2B 2F 
4550   202E 00 
4551   202F EE 1F       _base64_table: .dw _base64_table_data
4552   2031 00          _c0: .fill 1, 0
4553   2032 00 00       _i0: .fill 2, 0
4554   2034 00 00       _c_array0_data: .fill 2, 0
4555   2036 00 00 00 00 _i_array0_data: .fill 4, 0
4556   203A 00 00 00 00 _cp_array0_data: .fill 4, 0
4557   203E 00 00 00 00 _ip_array0_data: .fill 4, 0
4558   2042 00 00 00 00 _cpp_array0_data: .fill 4, 0
4559   2046 00 00 00 00 _ipp_array0_data: .fill 4, 0
4560   204A 00 00 00 00 _cc_array0_data: .fill 4, 0
4561   204E 00 00 00 00 _ii_array0_data: .fill 8, 0
4561   2052 00 00 00 00 
4562   2056 00 00 00 00 _ccp_array0_data: .fill 8, 0
4562   205A 00 00 00 00 
4563   205E 00 00 00 00 _iip_array0_data: .fill 8, 0
4563   2062 00 00 00 00 
4564   2066 00 00 00 00 _ccpp_array0_data: .fill 8, 0
4564   206A 00 00 00 00 
4565   206E 00 00 00 00 _iipp_array0_data: .fill 8, 0
4565   2072 00 00 00 00 
4566   2076 00 00 00 00 _st0_data: .fill 69, 0
4566   207A 00 00 00 00 
4566   207E 00 00 00 00 
4566   2082 00 00 00 00 
4566   2086 00 00 00 00 
4566   208A 00 00 00 00 
4566   208E 00 00 00 00 
4566   2092 00 00 00 00 
4566   2096 00 00 00 00 
4566   209A 00 00 00 00 
4566   209E 00 00 00 00 
4566   20A2 00 00 00 00 
4566   20A6 00 00 00 00 
4566   20AA 00 00 00 00 
4566   20AE 00 00 00 00 
4566   20B2 00 00 00 00 
4566   20B6 00 00 00 00 
4566   20BA 00 
4567   20BB 55 6E 65 78 __s0: .db "Unexpected format in printf.", 0
4567   20BF 70 65 63 74 
4567   20C3 65 64 20 66 
4567   20C7 6F 72 6D 61 
4567   20CB 74 20 69 6E 
4567   20CF 20 70 72 69 
4567   20D3 6E 74 66 2E 
4567   20D7 00 
4568   20D8 45 72 72 6F __s1: .db "Error: Unknown argument type.\n", 0
4568   20DC 72 3A 20 55 
4568   20E0 6E 6B 6E 6F 
4568   20E4 77 6E 20 61 
4568   20E8 72 67 75 6D 
4568   20EC 65 6E 74 20 
4568   20F0 74 79 70 65 
4568   20F4 2E 0A 00 
4569   20F7 1B 5B 32 4A __s2: .db "\033[2J\033[H", 0
4569   20FB 1B 5B 48 00 
4570   20FF 74 65 73 74 __s3: .db "testing global variables\n", 0
4570   2103 69 6E 67 20 
4570   2107 67 6C 6F 62 
4570   210B 61 6C 20 76 
4570   210F 61 72 69 61 
4570   2113 62 6C 65 73 
4570   2117 0A 00 
4571   2119 53 65 74 20 __s4: .db "Set 'c0' to 'A'\n", 0
4571   211D 27 63 30 27 
4571   2121 20 74 6F 20 
4571   2125 27 41 27 0A 
4571   2129 00 
4572   212A 63 30 20 76 __s5: .db "c0 value: %c", 0
4572   212E 61 6C 75 65 
4572   2132 3A 20 25 63 
4572   2136 00 
4573   2137 70 61 73 73 __s6: .db "pass\n", 0
4573   213B 0A 00 
4574   213D 66 61 69 6C __s7: .db "fail\n", 0
4574   2141 0A 00 
4575   2143 20 28 25 73 __s8: .db " (%s)", 0
4575   2147 29 00 
4576   2149             
4577   2149 4B 21       _heap_top: .dw _heap
4578   214B 00          _heap: .db 0
4579   214C             ; --- END DATA BLOCK
4580   214C             
4581   214C             .end
tasm: Number of errors = 0
