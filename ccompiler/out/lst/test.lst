0001   0000             ; --- FILENAME: test.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; printf(	"hello world"    ); 
0011   0408             ; --- START FUNCTION CALL
0012   0408 26 9A 0E      mov b, _s0 ; "hello world"
0013   040B FD AB         swp b
0014   040D D8            push b
0015   040E 07 2A 04      call printf
0016   0411 51 02 00      add sp, 2
0017   0414             ; --- END FUNCTION CALL
0018   0414             ; atoi(2); 
0019   0414             ; --- START FUNCTION CALL
0020   0414 FD 2E 02 00   mov32 cb, $00000002
0020   0418 00 00 
0021   041A FD AB         swp b
0022   041C D8            push b
0023   041D 07 17 0D      call atoi
0024   0420 51 02 00      add sp, 2
0025   0423             ; --- END FUNCTION CALL
0026   0423 05 0B         syscall sys_terminate_proc
0027   0425             
0028   0425             myfunc:
0029   0425 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0030   0428 F9            leave
0031   0429 09            ret
0032   042A             
0033   042A             printf:
0034   042A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0035   042D             ; char *p, *format_p; 
0036   042D 52 02 00      sub sp, 2
0037   0430 52 02 00      sub sp, 2
0038   0433             ; format_p = format; 
0039   0433 FA FD FF      lea d, [bp + -3] ; $format_p
0040   0436 DA            push d
0041   0437 FA 05 00      lea d, [bp + 5] ; $format
0042   043A 2A            mov b, [d]
0043   043B 38 00 00      mov c, 0
0044   043E E7            pop d
0045   043F FD 43         mov [d], b
0046   0441             ; p = &format + 2; 
0047   0441 FA FF FF      lea d, [bp + -1] ; $p
0048   0444 DA            push d
0049   0445 FA 05 00      lea d, [bp + 5] ; $format
0050   0448 2D            mov b, d
0051   0449             ; --- START TERMS
0052   0449 D7            push a
0053   044A 11            mov a, b
0054   044B FD 2E 02 00   mov32 cb, $00000002
0054   044F 00 00 
0055   0451 56            add b, a
0056   0452 E4            pop a
0057   0453             ; --- END TERMS
0058   0453 E7            pop d
0059   0454 FD 43         mov [d], b
0060   0456             ; for(;;){ 
0061   0456             _for1_init:
0062   0456             _for1_cond:
0063   0456             _for1_block:
0064   0456             ; if(!*format_p) break; 
0065   0456             _if2_cond:
0066   0456 FA FD FF      lea d, [bp + -3] ; $format_p
0067   0459 2A            mov b, [d]
0068   045A 38 00 00      mov c, 0
0069   045D 74            mov d, b
0070   045E 32            mov bl, [d]
0071   045F A7 00         mov bh, 0
0072   0461 38 00 00      mov c, 0
0073   0464 C0 00 00      cmp b, 0
0074   0467 FD 71         seq ; !
0075   0469 C0 00 00      cmp b, 0
0076   046C C6 75 04      je _if2_else
0077   046F             _if2_TRUE:
0078   046F             ; break; 
0079   046F 0A 25 07      jmp _for1_exit ; for break
0080   0472 0A 22 07      jmp _if2_exit
0081   0475             _if2_else:
0082   0475             ; if(*format_p == '%'){ 
0083   0475             _if3_cond:
0084   0475 FA FD FF      lea d, [bp + -3] ; $format_p
0085   0478 2A            mov b, [d]
0086   0479 38 00 00      mov c, 0
0087   047C 74            mov d, b
0088   047D 32            mov bl, [d]
0089   047E A7 00         mov bh, 0
0090   0480 38 00 00      mov c, 0
0091   0483             ; --- START RELATIONAL
0092   0483 D7            push a
0093   0484 11            mov a, b
0094   0485 FD 2E 25 00   mov32 cb, $00000025
0094   0489 00 00 
0095   048B B0            cmp a, b
0096   048C FD 71         seq ; ==
0097   048E E4            pop a
0098   048F             ; --- END RELATIONAL
0099   048F C0 00 00      cmp b, 0
0100   0492 C6 FD 06      je _if3_else
0101   0495             _if3_TRUE:
0102   0495             ; format_p++; 
0103   0495 FA FD FF      lea d, [bp + -3] ; $format_p
0104   0498 2A            mov b, [d]
0105   0499 38 00 00      mov c, 0
0106   049C FD 77         inc b
0107   049E FA FD FF      lea d, [bp + -3] ; $format_p
0108   04A1 FD 43         mov [d], b
0109   04A3 FD 7D         dec b
0110   04A5             ; switch(*format_p){ 
0111   04A5             _switch4_expr:
0112   04A5 FA FD FF      lea d, [bp + -3] ; $format_p
0113   04A8 2A            mov b, [d]
0114   04A9 38 00 00      mov c, 0
0115   04AC 74            mov d, b
0116   04AD 32            mov bl, [d]
0117   04AE A7 00         mov bh, 0
0118   04B0 38 00 00      mov c, 0
0119   04B3             _switch4_comparisons:
0120   04B3 C1 6C         cmp bl, $6c
0121   04B5 C6 E1 04      je _switch4_case0
0122   04B8 C1 4C         cmp bl, $4c
0123   04BA C6 E1 04      je _switch4_case1
0124   04BD C1 64         cmp bl, $64
0125   04BF C6 F1 05      je _switch4_case2
0126   04C2 C1 69         cmp bl, $69
0127   04C4 C6 F1 05      je _switch4_case3
0128   04C7 C1 75         cmp bl, $75
0129   04C9 C6 21 06      je _switch4_case4
0130   04CC C1 78         cmp bl, $78
0131   04CE C6 51 06      je _switch4_case5
0132   04D1 C1 63         cmp bl, $63
0133   04D3 C6 81 06      je _switch4_case6
0134   04D6 C1 73         cmp bl, $73
0135   04D8 C6 B1 06      je _switch4_case7
0136   04DB 0A DE 06      jmp _switch4_default
0137   04DE 0A EA 06      jmp _switch4_exit
0138   04E1             _switch4_case0:
0139   04E1             _switch4_case1:
0140   04E1             ; format_p++; 
0141   04E1 FA FD FF      lea d, [bp + -3] ; $format_p
0142   04E4 2A            mov b, [d]
0143   04E5 38 00 00      mov c, 0
0144   04E8 FD 77         inc b
0145   04EA FA FD FF      lea d, [bp + -3] ; $format_p
0146   04ED FD 43         mov [d], b
0147   04EF FD 7D         dec b
0148   04F1             ; if(*format_p == 'd' || *format_p == 'i') 
0149   04F1             _if5_cond:
0150   04F1 FA FD FF      lea d, [bp + -3] ; $format_p
0151   04F4 2A            mov b, [d]
0152   04F5 38 00 00      mov c, 0
0153   04F8 74            mov d, b
0154   04F9 32            mov bl, [d]
0155   04FA A7 00         mov bh, 0
0156   04FC 38 00 00      mov c, 0
0157   04FF             ; --- START RELATIONAL
0158   04FF D7            push a
0159   0500 11            mov a, b
0160   0501 FD 2E 64 00   mov32 cb, $00000064
0160   0505 00 00 
0161   0507 B0            cmp a, b
0162   0508 FD 71         seq ; ==
0163   050A E4            pop a
0164   050B             ; --- END RELATIONAL
0165   050B             ; --- START LOGICAL OR
0166   050B D7            push a
0167   050C 11            mov a, b
0168   050D FA FD FF      lea d, [bp + -3] ; $format_p
0169   0510 2A            mov b, [d]
0170   0511 38 00 00      mov c, 0
0171   0514 74            mov d, b
0172   0515 32            mov bl, [d]
0173   0516 A7 00         mov bh, 0
0174   0518 38 00 00      mov c, 0
0175   051B             ; --- START RELATIONAL
0176   051B D7            push a
0177   051C 11            mov a, b
0178   051D FD 2E 69 00   mov32 cb, $00000069
0178   0521 00 00 
0179   0523 B0            cmp a, b
0180   0524 FD 71         seq ; ==
0181   0526 E4            pop a
0182   0527             ; --- END RELATIONAL
0183   0527 FD A8         sor a, b ; ||
0184   0529 E4            pop a
0185   052A             ; --- END LOGICAL OR
0186   052A C0 00 00      cmp b, 0
0187   052D C6 4E 05      je _if5_else
0188   0530             _if5_TRUE:
0189   0530             ; print_signed_long(*(long *)p); 
0190   0530             ; --- START FUNCTION CALL
0191   0530 FA FF FF      lea d, [bp + -1] ; $p
0192   0533 2A            mov b, [d]
0193   0534 38 00 00      mov c, 0
0194   0537 74            mov d, b
0195   0538 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0196   053B FD 39         mov c, b ; And place it into C
0197   053D 2A            mov b, [d] ; Lower Word in B
0198   053E 12            mov a, c
0199   053F FD AA         swp a
0200   0541 D7            push a
0201   0542 FD AB         swp b
0202   0544 D8            push b
0203   0545 07 27 07      call print_signed_long
0204   0548 51 04 00      add sp, 4
0205   054B             ; --- END FUNCTION CALL
0206   054B 0A D6 05      jmp _if5_exit
0207   054E             _if5_else:
0208   054E             ; if(*format_p == 'u') 
0209   054E             _if6_cond:
0210   054E FA FD FF      lea d, [bp + -3] ; $format_p
0211   0551 2A            mov b, [d]
0212   0552 38 00 00      mov c, 0
0213   0555 74            mov d, b
0214   0556 32            mov bl, [d]
0215   0557 A7 00         mov bh, 0
0216   0559 38 00 00      mov c, 0
0217   055C             ; --- START RELATIONAL
0218   055C D7            push a
0219   055D 11            mov a, b
0220   055E FD 2E 75 00   mov32 cb, $00000075
0220   0562 00 00 
0221   0564 B0            cmp a, b
0222   0565 FD 71         seq ; ==
0223   0567 E4            pop a
0224   0568             ; --- END RELATIONAL
0225   0568 C0 00 00      cmp b, 0
0226   056B C6 8C 05      je _if6_else
0227   056E             _if6_TRUE:
0228   056E             ; print_unsigned_long(*(unsigned long *)p); 
0229   056E             ; --- START FUNCTION CALL
0230   056E FA FF FF      lea d, [bp + -1] ; $p
0231   0571 2A            mov b, [d]
0232   0572 38 00 00      mov c, 0
0233   0575 74            mov d, b
0234   0576 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0235   0579 FD 39         mov c, b ; And place it into C
0236   057B 2A            mov b, [d] ; Lower Word in B
0237   057C 12            mov a, c
0238   057D FD AA         swp a
0239   057F D7            push a
0240   0580 FD AB         swp b
0241   0582 D8            push b
0242   0583 07 B2 08      call print_unsigned_long
0243   0586 51 04 00      add sp, 4
0244   0589             ; --- END FUNCTION CALL
0245   0589 0A D6 05      jmp _if6_exit
0246   058C             _if6_else:
0247   058C             ; if(*format_p == 'x') 
0248   058C             _if7_cond:
0249   058C FA FD FF      lea d, [bp + -3] ; $format_p
0250   058F 2A            mov b, [d]
0251   0590 38 00 00      mov c, 0
0252   0593 74            mov d, b
0253   0594 32            mov bl, [d]
0254   0595 A7 00         mov bh, 0
0255   0597 38 00 00      mov c, 0
0256   059A             ; --- START RELATIONAL
0257   059A D7            push a
0258   059B 11            mov a, b
0259   059C FD 2E 78 00   mov32 cb, $00000078
0259   05A0 00 00 
0260   05A2 B0            cmp a, b
0261   05A3 FD 71         seq ; ==
0262   05A5 E4            pop a
0263   05A6             ; --- END RELATIONAL
0264   05A6 C0 00 00      cmp b, 0
0265   05A9 C6 CA 05      je _if7_else
0266   05AC             _if7_TRUE:
0267   05AC             ; printx32(*(long int *)p); 
0268   05AC             ; --- START FUNCTION CALL
0269   05AC FA FF FF      lea d, [bp + -1] ; $p
0270   05AF 2A            mov b, [d]
0271   05B0 38 00 00      mov c, 0
0272   05B3 74            mov d, b
0273   05B4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0274   05B7 FD 39         mov c, b ; And place it into C
0275   05B9 2A            mov b, [d] ; Lower Word in B
0276   05BA 12            mov a, c
0277   05BB FD AA         swp a
0278   05BD D7            push a
0279   05BE FD AB         swp b
0280   05C0 D8            push b
0281   05C1 07 DE 09      call printx32
0282   05C4 51 04 00      add sp, 4
0283   05C7             ; --- END FUNCTION CALL
0284   05C7 0A D6 05      jmp _if7_exit
0285   05CA             _if7_else:
0286   05CA             ; err("Unexpected format in printf."); 
0287   05CA             ; --- START FUNCTION CALL
0288   05CA 26 A6 0E      mov b, _s1 ; "Unexpected format in printf."
0289   05CD FD AB         swp b
0290   05CF D8            push b
0291   05D0 07 3E 0A      call err
0292   05D3 51 02 00      add sp, 2
0293   05D6             ; --- END FUNCTION CALL
0294   05D6             _if7_exit:
0295   05D6             _if6_exit:
0296   05D6             _if5_exit:
0297   05D6             ; p = p + 4; 
0298   05D6 FA FF FF      lea d, [bp + -1] ; $p
0299   05D9 DA            push d
0300   05DA FA FF FF      lea d, [bp + -1] ; $p
0301   05DD 2A            mov b, [d]
0302   05DE 38 00 00      mov c, 0
0303   05E1             ; --- START TERMS
0304   05E1 D7            push a
0305   05E2 11            mov a, b
0306   05E3 FD 2E 04 00   mov32 cb, $00000004
0306   05E7 00 00 
0307   05E9 56            add b, a
0308   05EA E4            pop a
0309   05EB             ; --- END TERMS
0310   05EB E7            pop d
0311   05EC FD 43         mov [d], b
0312   05EE             ; break; 
0313   05EE 0A EA 06      jmp _switch4_exit ; case break
0314   05F1             _switch4_case2:
0315   05F1             _switch4_case3:
0316   05F1             ; print_signed(*(int*)p); 
0317   05F1             ; --- START FUNCTION CALL
0318   05F1 FA FF FF      lea d, [bp + -1] ; $p
0319   05F4 2A            mov b, [d]
0320   05F5 38 00 00      mov c, 0
0321   05F8 74            mov d, b
0322   05F9 2A            mov b, [d]
0323   05FA 38 00 00      mov c, 0
0324   05FD FD AB         swp b
0325   05FF D8            push b
0326   0600 07 6C 0A      call print_signed
0327   0603 51 02 00      add sp, 2
0328   0606             ; --- END FUNCTION CALL
0329   0606             ; p = p + 2; 
0330   0606 FA FF FF      lea d, [bp + -1] ; $p
0331   0609 DA            push d
0332   060A FA FF FF      lea d, [bp + -1] ; $p
0333   060D 2A            mov b, [d]
0334   060E 38 00 00      mov c, 0
0335   0611             ; --- START TERMS
0336   0611 D7            push a
0337   0612 11            mov a, b
0338   0613 FD 2E 02 00   mov32 cb, $00000002
0338   0617 00 00 
0339   0619 56            add b, a
0340   061A E4            pop a
0341   061B             ; --- END TERMS
0342   061B E7            pop d
0343   061C FD 43         mov [d], b
0344   061E             ; break; 
0345   061E 0A EA 06      jmp _switch4_exit ; case break
0346   0621             _switch4_case4:
0347   0621             ; print_unsigned(*(unsigned int*)p); 
0348   0621             ; --- START FUNCTION CALL
0349   0621 FA FF FF      lea d, [bp + -1] ; $p
0350   0624 2A            mov b, [d]
0351   0625 38 00 00      mov c, 0
0352   0628 74            mov d, b
0353   0629 2A            mov b, [d]
0354   062A 38 00 00      mov c, 0
0355   062D FD AB         swp b
0356   062F D8            push b
0357   0630 07 B5 0B      call print_unsigned
0358   0633 51 02 00      add sp, 2
0359   0636             ; --- END FUNCTION CALL
0360   0636             ; p = p + 2; 
0361   0636 FA FF FF      lea d, [bp + -1] ; $p
0362   0639 DA            push d
0363   063A FA FF FF      lea d, [bp + -1] ; $p
0364   063D 2A            mov b, [d]
0365   063E 38 00 00      mov c, 0
0366   0641             ; --- START TERMS
0367   0641 D7            push a
0368   0642 11            mov a, b
0369   0643 FD 2E 02 00   mov32 cb, $00000002
0369   0647 00 00 
0370   0649 56            add b, a
0371   064A E4            pop a
0372   064B             ; --- END TERMS
0373   064B E7            pop d
0374   064C FD 43         mov [d], b
0375   064E             ; break; 
0376   064E 0A EA 06      jmp _switch4_exit ; case break
0377   0651             _switch4_case5:
0378   0651             ; printx16(*(int*)p); 
0379   0651             ; --- START FUNCTION CALL
0380   0651 FA FF FF      lea d, [bp + -1] ; $p
0381   0654 2A            mov b, [d]
0382   0655 38 00 00      mov c, 0
0383   0658 74            mov d, b
0384   0659 2A            mov b, [d]
0385   065A 38 00 00      mov c, 0
0386   065D FD AB         swp b
0387   065F D8            push b
0388   0660 07 C5 0C      call printx16
0389   0663 51 02 00      add sp, 2
0390   0666             ; --- END FUNCTION CALL
0391   0666             ; p = p + 2; 
0392   0666 FA FF FF      lea d, [bp + -1] ; $p
0393   0669 DA            push d
0394   066A FA FF FF      lea d, [bp + -1] ; $p
0395   066D 2A            mov b, [d]
0396   066E 38 00 00      mov c, 0
0397   0671             ; --- START TERMS
0398   0671 D7            push a
0399   0672 11            mov a, b
0400   0673 FD 2E 02 00   mov32 cb, $00000002
0400   0677 00 00 
0401   0679 56            add b, a
0402   067A E4            pop a
0403   067B             ; --- END TERMS
0404   067B E7            pop d
0405   067C FD 43         mov [d], b
0406   067E             ; break; 
0407   067E 0A EA 06      jmp _switch4_exit ; case break
0408   0681             _switch4_case6:
0409   0681             ; putchar(*(char*)p); 
0410   0681             ; --- START FUNCTION CALL
0411   0681 FA FF FF      lea d, [bp + -1] ; $p
0412   0684 2A            mov b, [d]
0413   0685 38 00 00      mov c, 0
0414   0688 74            mov d, b
0415   0689 32            mov bl, [d]
0416   068A A7 00         mov bh, 0
0417   068C 38 00 00      mov c, 0
0418   068F DD            push bl
0419   0690 07 A4 08      call putchar
0420   0693 51 01 00      add sp, 1
0421   0696             ; --- END FUNCTION CALL
0422   0696             ; p = p + 1; 
0423   0696 FA FF FF      lea d, [bp + -1] ; $p
0424   0699 DA            push d
0425   069A FA FF FF      lea d, [bp + -1] ; $p
0426   069D 2A            mov b, [d]
0427   069E 38 00 00      mov c, 0
0428   06A1             ; --- START TERMS
0429   06A1 D7            push a
0430   06A2 11            mov a, b
0431   06A3 FD 2E 01 00   mov32 cb, $00000001
0431   06A7 00 00 
0432   06A9 56            add b, a
0433   06AA E4            pop a
0434   06AB             ; --- END TERMS
0435   06AB E7            pop d
0436   06AC FD 43         mov [d], b
0437   06AE             ; break; 
0438   06AE 0A EA 06      jmp _switch4_exit ; case break
0439   06B1             _switch4_case7:
0440   06B1             ; print(*(char**)p); 
0441   06B1             ; --- START FUNCTION CALL
0442   06B1 FA FF FF      lea d, [bp + -1] ; $p
0443   06B4 2A            mov b, [d]
0444   06B5 38 00 00      mov c, 0
0445   06B8 74            mov d, b
0446   06B9 2A            mov b, [d]
0447   06BA FD AB         swp b
0448   06BC D8            push b
0449   06BD 07 53 0A      call print
0450   06C0 51 02 00      add sp, 2
0451   06C3             ; --- END FUNCTION CALL
0452   06C3             ; p = p + 2; 
0453   06C3 FA FF FF      lea d, [bp + -1] ; $p
0454   06C6 DA            push d
0455   06C7 FA FF FF      lea d, [bp + -1] ; $p
0456   06CA 2A            mov b, [d]
0457   06CB 38 00 00      mov c, 0
0458   06CE             ; --- START TERMS
0459   06CE D7            push a
0460   06CF 11            mov a, b
0461   06D0 FD 2E 02 00   mov32 cb, $00000002
0461   06D4 00 00 
0462   06D6 56            add b, a
0463   06D7 E4            pop a
0464   06D8             ; --- END TERMS
0465   06D8 E7            pop d
0466   06D9 FD 43         mov [d], b
0467   06DB             ; break; 
0468   06DB 0A EA 06      jmp _switch4_exit ; case break
0469   06DE             _switch4_default:
0470   06DE             ; print("Error: Unknown argument type.\n"); 
0471   06DE             ; --- START FUNCTION CALL
0472   06DE 26 C3 0E      mov b, _s2 ; "Error: Unknown argument type.\n"
0473   06E1 FD AB         swp b
0474   06E3 D8            push b
0475   06E4 07 53 0A      call print
0476   06E7 51 02 00      add sp, 2
0477   06EA             ; --- END FUNCTION CALL
0478   06EA             _switch4_exit:
0479   06EA             ; format_p++; 
0480   06EA FA FD FF      lea d, [bp + -3] ; $format_p
0481   06ED 2A            mov b, [d]
0482   06EE 38 00 00      mov c, 0
0483   06F1 FD 77         inc b
0484   06F3 FA FD FF      lea d, [bp + -3] ; $format_p
0485   06F6 FD 43         mov [d], b
0486   06F8 FD 7D         dec b
0487   06FA 0A 22 07      jmp _if3_exit
0488   06FD             _if3_else:
0489   06FD             ; putchar(*format_p); 
0490   06FD             ; --- START FUNCTION CALL
0491   06FD FA FD FF      lea d, [bp + -3] ; $format_p
0492   0700 2A            mov b, [d]
0493   0701 38 00 00      mov c, 0
0494   0704 74            mov d, b
0495   0705 32            mov bl, [d]
0496   0706 A7 00         mov bh, 0
0497   0708 38 00 00      mov c, 0
0498   070B DD            push bl
0499   070C 07 A4 08      call putchar
0500   070F 51 01 00      add sp, 1
0501   0712             ; --- END FUNCTION CALL
0502   0712             ; format_p++; 
0503   0712 FA FD FF      lea d, [bp + -3] ; $format_p
0504   0715 2A            mov b, [d]
0505   0716 38 00 00      mov c, 0
0506   0719 FD 77         inc b
0507   071B FA FD FF      lea d, [bp + -3] ; $format_p
0508   071E FD 43         mov [d], b
0509   0720 FD 7D         dec b
0510   0722             _if3_exit:
0511   0722             _if2_exit:
0512   0722             _for1_update:
0513   0722 0A 56 04      jmp _for1_cond
0514   0725             _for1_exit:
0515   0725 F9            leave
0516   0726 09            ret
0517   0727             
0518   0727             print_signed_long:
0519   0727 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0520   072A             ; char digits[10]; 
0521   072A 52 0A 00      sub sp, 10
0522   072D             ; int i = 0; 
0523   072D 52 02 00      sub sp, 2
0524   0730             ; --- START LOCAL VAR INITIALIZATION
0525   0730 FA F5 FF      lea d, [bp + -11] ; $i
0526   0733 DA            push d
0527   0734 FD 2E 00 00   mov32 cb, $00000000
0527   0738 00 00 
0528   073A E7            pop d
0529   073B FD 43         mov [d], b
0530   073D             ; --- END LOCAL VAR INITIALIZATION
0531   073D             ; if (num < 0) { 
0532   073D             _if8_cond:
0533   073D FA 05 00      lea d, [bp + 5] ; $num
0534   0740 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0535   0743 FD 39         mov c, b ; And place it into C
0536   0745 2A            mov b, [d] ; Lower Word in B
0537   0746             ; --- START RELATIONAL
0538   0746 D7            push a
0539   0747 FD D8         push g
0540   0749 11            mov a, b
0541   074A FD 7A         mov g, c
0542   074C FD 2E 00 00   mov32 cb, $00000000
0542   0750 00 00 
0543   0752 FD AF         cmp32 ga, cb
0544   0754 FD 73         slt ; <
0545   0756 FD F1         pop g
0546   0758 E4            pop a
0547   0759             ; --- END RELATIONAL
0548   0759 C0 00 00      cmp b, 0
0549   075C C6 8E 07      je _if8_else
0550   075F             _if8_TRUE:
0551   075F             ; putchar('-'); 
0552   075F             ; --- START FUNCTION CALL
0553   075F FD 2E 2D 00   mov32 cb, $0000002d
0553   0763 00 00 
0554   0765 DD            push bl
0555   0766 07 A4 08      call putchar
0556   0769 51 01 00      add sp, 1
0557   076C             ; --- END FUNCTION CALL
0558   076C             ; num = -num; 
0559   076C FA 05 00      lea d, [bp + 5] ; $num
0560   076F DA            push d
0561   0770 FA 05 00      lea d, [bp + 5] ; $num
0562   0773 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0563   0776 FD 39         mov c, b ; And place it into C
0564   0778 2A            mov b, [d] ; Lower Word in B
0565   0779 12            mov a, c
0566   077A 95            not a
0567   077B 97            not b
0568   077C 55 01 00      add b, 1
0569   077F 5B 00 00      adc a, 0
0570   0782 39            mov c, a
0571   0783 E7            pop d
0572   0784 FD 43         mov [d], b
0573   0786 28            mov b, c
0574   0787 FD 44 02 00   mov [d + 2], b
0575   078B 0A C2 07      jmp _if8_exit
0576   078E             _if8_else:
0577   078E             ; if (num == 0) { 
0578   078E             _if9_cond:
0579   078E FA 05 00      lea d, [bp + 5] ; $num
0580   0791 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0581   0794 FD 39         mov c, b ; And place it into C
0582   0796 2A            mov b, [d] ; Lower Word in B
0583   0797             ; --- START RELATIONAL
0584   0797 D7            push a
0585   0798 FD D8         push g
0586   079A 11            mov a, b
0587   079B FD 7A         mov g, c
0588   079D FD 2E 00 00   mov32 cb, $00000000
0588   07A1 00 00 
0589   07A3 FD AF         cmp32 ga, cb
0590   07A5 FD 71         seq ; ==
0591   07A7 FD F1         pop g
0592   07A9 E4            pop a
0593   07AA             ; --- END RELATIONAL
0594   07AA C0 00 00      cmp b, 0
0595   07AD C6 C2 07      je _if9_exit
0596   07B0             _if9_TRUE:
0597   07B0             ; putchar('0'); 
0598   07B0             ; --- START FUNCTION CALL
0599   07B0 FD 2E 30 00   mov32 cb, $00000030
0599   07B4 00 00 
0600   07B6 DD            push bl
0601   07B7 07 A4 08      call putchar
0602   07BA 51 01 00      add sp, 1
0603   07BD             ; --- END FUNCTION CALL
0604   07BD             ; return; 
0605   07BD F9            leave
0606   07BE 09            ret
0607   07BF 0A C2 07      jmp _if9_exit
0608   07C2             _if9_exit:
0609   07C2             _if8_exit:
0610   07C2             ; while (num > 0) { 
0611   07C2             _while10_cond:
0612   07C2 FA 05 00      lea d, [bp + 5] ; $num
0613   07C5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0614   07C8 FD 39         mov c, b ; And place it into C
0615   07CA 2A            mov b, [d] ; Lower Word in B
0616   07CB             ; --- START RELATIONAL
0617   07CB D7            push a
0618   07CC FD D8         push g
0619   07CE 11            mov a, b
0620   07CF FD 7A         mov g, c
0621   07D1 FD 2E 00 00   mov32 cb, $00000000
0621   07D5 00 00 
0622   07D7 FD AF         cmp32 ga, cb
0623   07D9 FD 7F         sgt
0624   07DB FD F1         pop g
0625   07DD E4            pop a
0626   07DE             ; --- END RELATIONAL
0627   07DE C0 00 00      cmp b, 0
0628   07E1 C6 5A 08      je _while10_exit
0629   07E4             _while10_block:
0630   07E4             ; digits[i] = '0' + (num % 10); 
0631   07E4 FA F7 FF      lea d, [bp + -9] ; $digits
0632   07E7 D7            push a
0633   07E8 DA            push d
0634   07E9 FA F5 FF      lea d, [bp + -11] ; $i
0635   07EC 2A            mov b, [d]
0636   07ED 38 00 00      mov c, 0
0637   07F0 E7            pop d
0638   07F1 5A            add d, b
0639   07F2 E4            pop a
0640   07F3 DA            push d
0641   07F4 FD 2E 30 00   mov32 cb, $00000030
0641   07F8 00 00 
0642   07FA             ; --- START TERMS
0643   07FA D7            push a
0644   07FB 11            mov a, b
0645   07FC FA 05 00      lea d, [bp + 5] ; $num
0646   07FF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0647   0802 FD 39         mov c, b ; And place it into C
0648   0804 2A            mov b, [d] ; Lower Word in B
0649   0805             ; --- START FACTORS
0650   0805 D7            push a
0651   0806 FD D8         push g
0652   0808 11            mov a, b
0653   0809 FD 7A         mov g, c
0654   080B FD 2E 0A 00   mov32 cb, $0000000a
0654   080F 00 00 
0655   0811 AE            div a, b ; 
0656   0812 11            mov a, b
0657   0813 FD 38         mov c, g
0658   0815 27            mov b, a
0659   0816 FD F1         pop g
0660   0818 E4            pop a
0661   0819             ; --- END FACTORS
0662   0819 FD 15         add32 cb, ga
0663   081B E4            pop a
0664   081C             ; --- END TERMS
0665   081C E7            pop d
0666   081D FD 3E         mov [d], bl
0667   081F             ; num = num / 10; 
0668   081F FA 05 00      lea d, [bp + 5] ; $num
0669   0822 DA            push d
0670   0823 FA 05 00      lea d, [bp + 5] ; $num
0671   0826 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0672   0829 FD 39         mov c, b ; And place it into C
0673   082B 2A            mov b, [d] ; Lower Word in B
0674   082C             ; --- START FACTORS
0675   082C D7            push a
0676   082D FD D8         push g
0677   082F 11            mov a, b
0678   0830 FD 7A         mov g, c
0679   0832 FD 2E 0A 00   mov32 cb, $0000000a
0679   0836 00 00 
0680   0838 AE            div a, b
0681   0839 FD 38         mov c, g
0682   083B 27            mov b, a
0683   083C FD F1         pop g
0684   083E E4            pop a
0685   083F             ; --- END FACTORS
0686   083F E7            pop d
0687   0840 FD 43         mov [d], b
0688   0842 28            mov b, c
0689   0843 FD 44 02 00   mov [d + 2], b
0690   0847             ; i++; 
0691   0847 FA F5 FF      lea d, [bp + -11] ; $i
0692   084A 2A            mov b, [d]
0693   084B 38 00 00      mov c, 0
0694   084E 11            mov a, b
0695   084F FD 77         inc b
0696   0851 FA F5 FF      lea d, [bp + -11] ; $i
0697   0854 FD 43         mov [d], b
0698   0856 27            mov b, a
0699   0857 0A C2 07      jmp _while10_cond
0700   085A             _while10_exit:
0701   085A             ; while (i > 0) { 
0702   085A             _while17_cond:
0703   085A FA F5 FF      lea d, [bp + -11] ; $i
0704   085D 2A            mov b, [d]
0705   085E 38 00 00      mov c, 0
0706   0861             ; --- START RELATIONAL
0707   0861 D7            push a
0708   0862 11            mov a, b
0709   0863 FD 2E 00 00   mov32 cb, $00000000
0709   0867 00 00 
0710   0869 B0            cmp a, b
0711   086A FD 7F         sgt ; >
0712   086C E4            pop a
0713   086D             ; --- END RELATIONAL
0714   086D C0 00 00      cmp b, 0
0715   0870 C6 A2 08      je _while17_exit
0716   0873             _while17_block:
0717   0873             ; i--; 
0718   0873 FA F5 FF      lea d, [bp + -11] ; $i
0719   0876 2A            mov b, [d]
0720   0877 38 00 00      mov c, 0
0721   087A 11            mov a, b
0722   087B FD 7D         dec b
0723   087D FA F5 FF      lea d, [bp + -11] ; $i
0724   0880 FD 43         mov [d], b
0725   0882 27            mov b, a
0726   0883             ; putchar(digits[i]); 
0727   0883             ; --- START FUNCTION CALL
0728   0883 FA F7 FF      lea d, [bp + -9] ; $digits
0729   0886 D7            push a
0730   0887 DA            push d
0731   0888 FA F5 FF      lea d, [bp + -11] ; $i
0732   088B 2A            mov b, [d]
0733   088C 38 00 00      mov c, 0
0734   088F E7            pop d
0735   0890 5A            add d, b
0736   0891 E4            pop a
0737   0892 32            mov bl, [d]
0738   0893 A7 00         mov bh, 0
0739   0895 38 00 00      mov c, 0
0740   0898 DD            push bl
0741   0899 07 A4 08      call putchar
0742   089C 51 01 00      add sp, 1
0743   089F             ; --- END FUNCTION CALL
0744   089F 0A 5A 08      jmp _while17_cond
0745   08A2             _while17_exit:
0746   08A2 F9            leave
0747   08A3 09            ret
0748   08A4             
0749   08A4             putchar:
0750   08A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0751   08A7             ; --- BEGIN INLINE ASM SEGMENT
0752   08A7 FA 05 00      lea d, [bp + 5] ; $c
0753   08AA 1E            mov al, [d]
0754   08AB 23            mov ah, al
0755   08AC 19 00         mov al, 0
0756   08AE 05 03         syscall sys_io      
0757   08B0             ; --- END INLINE ASM SEGMENT
0758   08B0 F9            leave
0759   08B1 09            ret
0760   08B2             
0761   08B2             print_unsigned_long:
0762   08B2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0763   08B5             ; char digits[10]; 
0764   08B5 52 0A 00      sub sp, 10
0765   08B8             ; int i; 
0766   08B8 52 02 00      sub sp, 2
0767   08BB             ; i = 0; 
0768   08BB FA F5 FF      lea d, [bp + -11] ; $i
0769   08BE DA            push d
0770   08BF FD 2E 00 00   mov32 cb, $00000000
0770   08C3 00 00 
0771   08C5 E7            pop d
0772   08C6 FD 43         mov [d], b
0773   08C8             ; if(num == 0){ 
0774   08C8             _if18_cond:
0775   08C8 FA 05 00      lea d, [bp + 5] ; $num
0776   08CB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0777   08CE FD 39         mov c, b ; And place it into C
0778   08D0 2A            mov b, [d] ; Lower Word in B
0779   08D1             ; --- START RELATIONAL
0780   08D1 D7            push a
0781   08D2 FD D8         push g
0782   08D4 11            mov a, b
0783   08D5 FD 7A         mov g, c
0784   08D7 FD 2E 00 00   mov32 cb, $00000000
0784   08DB 00 00 
0785   08DD FD AF         cmp32 ga, cb
0786   08DF FD 71         seq ; ==
0787   08E1 FD F1         pop g
0788   08E3 E4            pop a
0789   08E4             ; --- END RELATIONAL
0790   08E4 C0 00 00      cmp b, 0
0791   08E7 C6 FC 08      je _if18_exit
0792   08EA             _if18_TRUE:
0793   08EA             ; putchar('0'); 
0794   08EA             ; --- START FUNCTION CALL
0795   08EA FD 2E 30 00   mov32 cb, $00000030
0795   08EE 00 00 
0796   08F0 DD            push bl
0797   08F1 07 A4 08      call putchar
0798   08F4 51 01 00      add sp, 1
0799   08F7             ; --- END FUNCTION CALL
0800   08F7             ; return; 
0801   08F7 F9            leave
0802   08F8 09            ret
0803   08F9 0A FC 08      jmp _if18_exit
0804   08FC             _if18_exit:
0805   08FC             ; while (num > 0) { 
0806   08FC             _while19_cond:
0807   08FC FA 05 00      lea d, [bp + 5] ; $num
0808   08FF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0809   0902 FD 39         mov c, b ; And place it into C
0810   0904 2A            mov b, [d] ; Lower Word in B
0811   0905             ; --- START RELATIONAL
0812   0905 D7            push a
0813   0906 FD D8         push g
0814   0908 11            mov a, b
0815   0909 FD 7A         mov g, c
0816   090B FD 2E 00 00   mov32 cb, $00000000
0816   090F 00 00 
0817   0911 FD AF         cmp32 ga, cb
0818   0913 FD 81         sgu
0819   0915 FD F1         pop g
0820   0917 E4            pop a
0821   0918             ; --- END RELATIONAL
0822   0918 C0 00 00      cmp b, 0
0823   091B C6 94 09      je _while19_exit
0824   091E             _while19_block:
0825   091E             ; digits[i] = '0' + (num % 10); 
0826   091E FA F7 FF      lea d, [bp + -9] ; $digits
0827   0921 D7            push a
0828   0922 DA            push d
0829   0923 FA F5 FF      lea d, [bp + -11] ; $i
0830   0926 2A            mov b, [d]
0831   0927 38 00 00      mov c, 0
0832   092A E7            pop d
0833   092B 5A            add d, b
0834   092C E4            pop a
0835   092D DA            push d
0836   092E FD 2E 30 00   mov32 cb, $00000030
0836   0932 00 00 
0837   0934             ; --- START TERMS
0838   0934 D7            push a
0839   0935 11            mov a, b
0840   0936 FA 05 00      lea d, [bp + 5] ; $num
0841   0939 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0842   093C FD 39         mov c, b ; And place it into C
0843   093E 2A            mov b, [d] ; Lower Word in B
0844   093F             ; --- START FACTORS
0845   093F D7            push a
0846   0940 FD D8         push g
0847   0942 11            mov a, b
0848   0943 FD 7A         mov g, c
0849   0945 FD 2E 0A 00   mov32 cb, $0000000a
0849   0949 00 00 
0850   094B AE            div a, b ; 
0851   094C 11            mov a, b
0852   094D FD 38         mov c, g
0853   094F 27            mov b, a
0854   0950 FD F1         pop g
0855   0952 E4            pop a
0856   0953             ; --- END FACTORS
0857   0953 FD 15         add32 cb, ga
0858   0955 E4            pop a
0859   0956             ; --- END TERMS
0860   0956 E7            pop d
0861   0957 FD 3E         mov [d], bl
0862   0959             ; num = num / 10; 
0863   0959 FA 05 00      lea d, [bp + 5] ; $num
0864   095C DA            push d
0865   095D FA 05 00      lea d, [bp + 5] ; $num
0866   0960 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0867   0963 FD 39         mov c, b ; And place it into C
0868   0965 2A            mov b, [d] ; Lower Word in B
0869   0966             ; --- START FACTORS
0870   0966 D7            push a
0871   0967 FD D8         push g
0872   0969 11            mov a, b
0873   096A FD 7A         mov g, c
0874   096C FD 2E 0A 00   mov32 cb, $0000000a
0874   0970 00 00 
0875   0972 AE            div a, b
0876   0973 FD 38         mov c, g
0877   0975 27            mov b, a
0878   0976 FD F1         pop g
0879   0978 E4            pop a
0880   0979             ; --- END FACTORS
0881   0979 E7            pop d
0882   097A FD 43         mov [d], b
0883   097C 28            mov b, c
0884   097D FD 44 02 00   mov [d + 2], b
0885   0981             ; i++; 
0886   0981 FA F5 FF      lea d, [bp + -11] ; $i
0887   0984 2A            mov b, [d]
0888   0985 38 00 00      mov c, 0
0889   0988 11            mov a, b
0890   0989 FD 77         inc b
0891   098B FA F5 FF      lea d, [bp + -11] ; $i
0892   098E FD 43         mov [d], b
0893   0990 27            mov b, a
0894   0991 0A FC 08      jmp _while19_cond
0895   0994             _while19_exit:
0896   0994             ; while (i > 0) { 
0897   0994             _while26_cond:
0898   0994 FA F5 FF      lea d, [bp + -11] ; $i
0899   0997 2A            mov b, [d]
0900   0998 38 00 00      mov c, 0
0901   099B             ; --- START RELATIONAL
0902   099B D7            push a
0903   099C 11            mov a, b
0904   099D FD 2E 00 00   mov32 cb, $00000000
0904   09A1 00 00 
0905   09A3 B0            cmp a, b
0906   09A4 FD 7F         sgt ; >
0907   09A6 E4            pop a
0908   09A7             ; --- END RELATIONAL
0909   09A7 C0 00 00      cmp b, 0
0910   09AA C6 DC 09      je _while26_exit
0911   09AD             _while26_block:
0912   09AD             ; i--; 
0913   09AD FA F5 FF      lea d, [bp + -11] ; $i
0914   09B0 2A            mov b, [d]
0915   09B1 38 00 00      mov c, 0
0916   09B4 11            mov a, b
0917   09B5 FD 7D         dec b
0918   09B7 FA F5 FF      lea d, [bp + -11] ; $i
0919   09BA FD 43         mov [d], b
0920   09BC 27            mov b, a
0921   09BD             ; putchar(digits[i]); 
0922   09BD             ; --- START FUNCTION CALL
0923   09BD FA F7 FF      lea d, [bp + -9] ; $digits
0924   09C0 D7            push a
0925   09C1 DA            push d
0926   09C2 FA F5 FF      lea d, [bp + -11] ; $i
0927   09C5 2A            mov b, [d]
0928   09C6 38 00 00      mov c, 0
0929   09C9 E7            pop d
0930   09CA 5A            add d, b
0931   09CB E4            pop a
0932   09CC 32            mov bl, [d]
0933   09CD A7 00         mov bh, 0
0934   09CF 38 00 00      mov c, 0
0935   09D2 DD            push bl
0936   09D3 07 A4 08      call putchar
0937   09D6 51 01 00      add sp, 1
0938   09D9             ; --- END FUNCTION CALL
0939   09D9 0A 94 09      jmp _while26_cond
0940   09DC             _while26_exit:
0941   09DC F9            leave
0942   09DD 09            ret
0943   09DE             
0944   09DE             printx32:
0945   09DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0946   09E1             ; --- BEGIN INLINE ASM SEGMENT
0947   09E1 FA 05 00      lea d, [bp + 5] ; $hex
0948   09E4 2B 02 00      mov b, [d+2]
0949   09E7 07 F0 09      call print_u16x_printx32
0950   09EA 2A            mov b, [d]
0951   09EB 07 F0 09      call print_u16x_printx32
0952   09EE             ; --- END INLINE ASM SEGMENT
0953   09EE             ; return; 
0954   09EE F9            leave
0955   09EF 09            ret
0956   09F0             ; --- BEGIN INLINE ASM SEGMENT
0957   09F0             print_u16x_printx32:
0958   09F0 D7            push a
0959   09F1 D8            push b
0960   09F2 DD            push bl
0961   09F3 30            mov bl, bh
0962   09F4 07 12 0A      call _itoa_printx32        
0963   09F7 2F            mov bl, al        
0964   09F8 19 00         mov al, 0
0965   09FA 05 03         syscall sys_io        
0966   09FC 24            mov ah, bl        
0967   09FD 19 00         mov al, 0
0968   09FF 05 03         syscall sys_io        
0969   0A01 EA            pop bl
0970   0A02 07 12 0A      call _itoa_printx32        
0971   0A05 2F            mov bl, al        
0972   0A06 19 00         mov al, 0
0973   0A08 05 03         syscall sys_io        
0974   0A0A 24            mov ah, bl        
0975   0A0B 19 00         mov al, 0
0976   0A0D 05 03         syscall sys_io        
0977   0A0F E5            pop b
0978   0A10 E4            pop a
0979   0A11 09            ret
0980   0A12             _itoa_printx32:
0981   0A12 DA            push d
0982   0A13 D8            push b
0983   0A14 A7 00         mov bh, 0
0984   0A16 FD A4 04      shr bl, 4  
0985   0A19 74            mov d, b
0986   0A1A 1F 2C 0A      mov al, [d + s_hex_digits_printx32]
0987   0A1D 23            mov ah, al
0988   0A1E E5            pop b
0989   0A1F D8            push b
0990   0A20 A7 00         mov bh, 0
0991   0A22 FD 87 0F      and bl, $0F
0992   0A25 74            mov d, b
0993   0A26 1F 2C 0A      mov al, [d + s_hex_digits_printx32]
0994   0A29 E5            pop b
0995   0A2A E7            pop d
0996   0A2B 09            ret
0997   0A2C 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
0997   0A30 34 35 36 37 
0997   0A34 38 39 41 42 
0997   0A38 43 44 45 46 
0998   0A3C             ; --- END INLINE ASM SEGMENT
0999   0A3C F9            leave
1000   0A3D 09            ret
1001   0A3E             
1002   0A3E             err:
1003   0A3E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1004   0A41             ; print(e); 
1005   0A41             ; --- START FUNCTION CALL
1006   0A41 FA 05 00      lea d, [bp + 5] ; $e
1007   0A44 2A            mov b, [d]
1008   0A45 38 00 00      mov c, 0
1009   0A48 FD AB         swp b
1010   0A4A D8            push b
1011   0A4B 07 53 0A      call print
1012   0A4E 51 02 00      add sp, 2
1013   0A51             ; --- END FUNCTION CALL
1014   0A51 F9            leave
1015   0A52 09            ret
1016   0A53             
1017   0A53             print:
1018   0A53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1019   0A56             ; --- BEGIN INLINE ASM SEGMENT
1020   0A56 FA 05 00      lea d, [bp + 5] ; $s
1021   0A59 FD 2A         mov d, [d]
1022   0A5B             _puts_L1_print:
1023   0A5B 1E            mov al, [d]
1024   0A5C B9 00         cmp al, 0
1025   0A5E C6 6A 0A      jz _puts_END_print
1026   0A61 23            mov ah, al
1027   0A62 19 00         mov al, 0
1028   0A64 05 03         syscall sys_io
1029   0A66 79            inc d
1030   0A67 0A 5B 0A      jmp _puts_L1_print
1031   0A6A             _puts_END_print:
1032   0A6A             ; --- END INLINE ASM SEGMENT
1033   0A6A F9            leave
1034   0A6B 09            ret
1035   0A6C             
1036   0A6C             print_signed:
1037   0A6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1038   0A6F             ; char digits[5]; 
1039   0A6F 52 05 00      sub sp, 5
1040   0A72             ; int i = 0; 
1041   0A72 52 02 00      sub sp, 2
1042   0A75             ; --- START LOCAL VAR INITIALIZATION
1043   0A75 FA FA FF      lea d, [bp + -6] ; $i
1044   0A78 DA            push d
1045   0A79 FD 2E 00 00   mov32 cb, $00000000
1045   0A7D 00 00 
1046   0A7F E7            pop d
1047   0A80 FD 43         mov [d], b
1048   0A82             ; --- END LOCAL VAR INITIALIZATION
1049   0A82             ; if (num < 0) { 
1050   0A82             _if27_cond:
1051   0A82 FA 05 00      lea d, [bp + 5] ; $num
1052   0A85 2A            mov b, [d]
1053   0A86 38 00 00      mov c, 0
1054   0A89             ; --- START RELATIONAL
1055   0A89 D7            push a
1056   0A8A 11            mov a, b
1057   0A8B FD 2E 00 00   mov32 cb, $00000000
1057   0A8F 00 00 
1058   0A91 B0            cmp a, b
1059   0A92 FD 73         slt ; < (signed)
1060   0A94 E4            pop a
1061   0A95             ; --- END RELATIONAL
1062   0A95 C0 00 00      cmp b, 0
1063   0A98 C6 BB 0A      je _if27_else
1064   0A9B             _if27_TRUE:
1065   0A9B             ; putchar('-'); 
1066   0A9B             ; --- START FUNCTION CALL
1067   0A9B FD 2E 2D 00   mov32 cb, $0000002d
1067   0A9F 00 00 
1068   0AA1 DD            push bl
1069   0AA2 07 A4 08      call putchar
1070   0AA5 51 01 00      add sp, 1
1071   0AA8             ; --- END FUNCTION CALL
1072   0AA8             ; num = -num; 
1073   0AA8 FA 05 00      lea d, [bp + 5] ; $num
1074   0AAB DA            push d
1075   0AAC FA 05 00      lea d, [bp + 5] ; $num
1076   0AAF 2A            mov b, [d]
1077   0AB0 38 00 00      mov c, 0
1078   0AB3 FD 97         neg b
1079   0AB5 E7            pop d
1080   0AB6 FD 43         mov [d], b
1081   0AB8 0A E6 0A      jmp _if27_exit
1082   0ABB             _if27_else:
1083   0ABB             ; if (num == 0) { 
1084   0ABB             _if28_cond:
1085   0ABB FA 05 00      lea d, [bp + 5] ; $num
1086   0ABE 2A            mov b, [d]
1087   0ABF 38 00 00      mov c, 0
1088   0AC2             ; --- START RELATIONAL
1089   0AC2 D7            push a
1090   0AC3 11            mov a, b
1091   0AC4 FD 2E 00 00   mov32 cb, $00000000
1091   0AC8 00 00 
1092   0ACA B0            cmp a, b
1093   0ACB FD 71         seq ; ==
1094   0ACD E4            pop a
1095   0ACE             ; --- END RELATIONAL
1096   0ACE C0 00 00      cmp b, 0
1097   0AD1 C6 E6 0A      je _if28_exit
1098   0AD4             _if28_TRUE:
1099   0AD4             ; putchar('0'); 
1100   0AD4             ; --- START FUNCTION CALL
1101   0AD4 FD 2E 30 00   mov32 cb, $00000030
1101   0AD8 00 00 
1102   0ADA DD            push bl
1103   0ADB 07 A4 08      call putchar
1104   0ADE 51 01 00      add sp, 1
1105   0AE1             ; --- END FUNCTION CALL
1106   0AE1             ; return; 
1107   0AE1 F9            leave
1108   0AE2 09            ret
1109   0AE3 0A E6 0A      jmp _if28_exit
1110   0AE6             _if28_exit:
1111   0AE6             _if27_exit:
1112   0AE6             ; while (num > 0) { 
1113   0AE6             _while29_cond:
1114   0AE6 FA 05 00      lea d, [bp + 5] ; $num
1115   0AE9 2A            mov b, [d]
1116   0AEA 38 00 00      mov c, 0
1117   0AED             ; --- START RELATIONAL
1118   0AED D7            push a
1119   0AEE 11            mov a, b
1120   0AEF FD 2E 00 00   mov32 cb, $00000000
1120   0AF3 00 00 
1121   0AF5 B0            cmp a, b
1122   0AF6 FD 7F         sgt ; >
1123   0AF8 E4            pop a
1124   0AF9             ; --- END RELATIONAL
1125   0AF9 C0 00 00      cmp b, 0
1126   0AFC C6 6B 0B      je _while29_exit
1127   0AFF             _while29_block:
1128   0AFF             ; digits[i] = '0' + (num % 10); 
1129   0AFF FA FC FF      lea d, [bp + -4] ; $digits
1130   0B02 D7            push a
1131   0B03 DA            push d
1132   0B04 FA FA FF      lea d, [bp + -6] ; $i
1133   0B07 2A            mov b, [d]
1134   0B08 38 00 00      mov c, 0
1135   0B0B E7            pop d
1136   0B0C 5A            add d, b
1137   0B0D E4            pop a
1138   0B0E DA            push d
1139   0B0F FD 2E 30 00   mov32 cb, $00000030
1139   0B13 00 00 
1140   0B15             ; --- START TERMS
1141   0B15 D7            push a
1142   0B16 11            mov a, b
1143   0B17 FA 05 00      lea d, [bp + 5] ; $num
1144   0B1A 2A            mov b, [d]
1145   0B1B 38 00 00      mov c, 0
1146   0B1E             ; --- START FACTORS
1147   0B1E D7            push a
1148   0B1F FD D8         push g
1149   0B21 11            mov a, b
1150   0B22 FD 7A         mov g, c
1151   0B24 FD 2E 0A 00   mov32 cb, $0000000a
1151   0B28 00 00 
1152   0B2A AE            div a, b ; 
1153   0B2B 11            mov a, b
1154   0B2C FD 38         mov c, g
1155   0B2E 27            mov b, a
1156   0B2F FD F1         pop g
1157   0B31 E4            pop a
1158   0B32             ; --- END FACTORS
1159   0B32 56            add b, a
1160   0B33 E4            pop a
1161   0B34             ; --- END TERMS
1162   0B34 E7            pop d
1163   0B35 FD 3E         mov [d], bl
1164   0B37             ; num = num / 10; 
1165   0B37 FA 05 00      lea d, [bp + 5] ; $num
1166   0B3A DA            push d
1167   0B3B FA 05 00      lea d, [bp + 5] ; $num
1168   0B3E 2A            mov b, [d]
1169   0B3F 38 00 00      mov c, 0
1170   0B42             ; --- START FACTORS
1171   0B42 D7            push a
1172   0B43 FD D8         push g
1173   0B45 11            mov a, b
1174   0B46 FD 7A         mov g, c
1175   0B48 FD 2E 0A 00   mov32 cb, $0000000a
1175   0B4C 00 00 
1176   0B4E AE            div a, b
1177   0B4F FD 38         mov c, g
1178   0B51 27            mov b, a
1179   0B52 FD F1         pop g
1180   0B54 E4            pop a
1181   0B55             ; --- END FACTORS
1182   0B55 E7            pop d
1183   0B56 FD 43         mov [d], b
1184   0B58             ; i++; 
1185   0B58 FA FA FF      lea d, [bp + -6] ; $i
1186   0B5B 2A            mov b, [d]
1187   0B5C 38 00 00      mov c, 0
1188   0B5F 11            mov a, b
1189   0B60 FD 77         inc b
1190   0B62 FA FA FF      lea d, [bp + -6] ; $i
1191   0B65 FD 43         mov [d], b
1192   0B67 27            mov b, a
1193   0B68 0A E6 0A      jmp _while29_cond
1194   0B6B             _while29_exit:
1195   0B6B             ; while (i > 0) { 
1196   0B6B             _while36_cond:
1197   0B6B FA FA FF      lea d, [bp + -6] ; $i
1198   0B6E 2A            mov b, [d]
1199   0B6F 38 00 00      mov c, 0
1200   0B72             ; --- START RELATIONAL
1201   0B72 D7            push a
1202   0B73 11            mov a, b
1203   0B74 FD 2E 00 00   mov32 cb, $00000000
1203   0B78 00 00 
1204   0B7A B0            cmp a, b
1205   0B7B FD 7F         sgt ; >
1206   0B7D E4            pop a
1207   0B7E             ; --- END RELATIONAL
1208   0B7E C0 00 00      cmp b, 0
1209   0B81 C6 B3 0B      je _while36_exit
1210   0B84             _while36_block:
1211   0B84             ; i--; 
1212   0B84 FA FA FF      lea d, [bp + -6] ; $i
1213   0B87 2A            mov b, [d]
1214   0B88 38 00 00      mov c, 0
1215   0B8B 11            mov a, b
1216   0B8C FD 7D         dec b
1217   0B8E FA FA FF      lea d, [bp + -6] ; $i
1218   0B91 FD 43         mov [d], b
1219   0B93 27            mov b, a
1220   0B94             ; putchar(digits[i]); 
1221   0B94             ; --- START FUNCTION CALL
1222   0B94 FA FC FF      lea d, [bp + -4] ; $digits
1223   0B97 D7            push a
1224   0B98 DA            push d
1225   0B99 FA FA FF      lea d, [bp + -6] ; $i
1226   0B9C 2A            mov b, [d]
1227   0B9D 38 00 00      mov c, 0
1228   0BA0 E7            pop d
1229   0BA1 5A            add d, b
1230   0BA2 E4            pop a
1231   0BA3 32            mov bl, [d]
1232   0BA4 A7 00         mov bh, 0
1233   0BA6 38 00 00      mov c, 0
1234   0BA9 DD            push bl
1235   0BAA 07 A4 08      call putchar
1236   0BAD 51 01 00      add sp, 1
1237   0BB0             ; --- END FUNCTION CALL
1238   0BB0 0A 6B 0B      jmp _while36_cond
1239   0BB3             _while36_exit:
1240   0BB3 F9            leave
1241   0BB4 09            ret
1242   0BB5             
1243   0BB5             print_unsigned:
1244   0BB5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1245   0BB8             ; char digits[5]; 
1246   0BB8 52 05 00      sub sp, 5
1247   0BBB             ; int i; 
1248   0BBB 52 02 00      sub sp, 2
1249   0BBE             ; i = 0; 
1250   0BBE FA FA FF      lea d, [bp + -6] ; $i
1251   0BC1 DA            push d
1252   0BC2 FD 2E 00 00   mov32 cb, $00000000
1252   0BC6 00 00 
1253   0BC8 E7            pop d
1254   0BC9 FD 43         mov [d], b
1255   0BCB             ; if(num == 0){ 
1256   0BCB             _if37_cond:
1257   0BCB FA 05 00      lea d, [bp + 5] ; $num
1258   0BCE 2A            mov b, [d]
1259   0BCF 38 00 00      mov c, 0
1260   0BD2             ; --- START RELATIONAL
1261   0BD2 D7            push a
1262   0BD3 11            mov a, b
1263   0BD4 FD 2E 00 00   mov32 cb, $00000000
1263   0BD8 00 00 
1264   0BDA B0            cmp a, b
1265   0BDB FD 71         seq ; ==
1266   0BDD E4            pop a
1267   0BDE             ; --- END RELATIONAL
1268   0BDE C0 00 00      cmp b, 0
1269   0BE1 C6 F6 0B      je _if37_exit
1270   0BE4             _if37_TRUE:
1271   0BE4             ; putchar('0'); 
1272   0BE4             ; --- START FUNCTION CALL
1273   0BE4 FD 2E 30 00   mov32 cb, $00000030
1273   0BE8 00 00 
1274   0BEA DD            push bl
1275   0BEB 07 A4 08      call putchar
1276   0BEE 51 01 00      add sp, 1
1277   0BF1             ; --- END FUNCTION CALL
1278   0BF1             ; return; 
1279   0BF1 F9            leave
1280   0BF2 09            ret
1281   0BF3 0A F6 0B      jmp _if37_exit
1282   0BF6             _if37_exit:
1283   0BF6             ; while (num > 0) { 
1284   0BF6             _while38_cond:
1285   0BF6 FA 05 00      lea d, [bp + 5] ; $num
1286   0BF9 2A            mov b, [d]
1287   0BFA 38 00 00      mov c, 0
1288   0BFD             ; --- START RELATIONAL
1289   0BFD D7            push a
1290   0BFE 11            mov a, b
1291   0BFF FD 2E 00 00   mov32 cb, $00000000
1291   0C03 00 00 
1292   0C05 B0            cmp a, b
1293   0C06 FD 81         sgu ; > (unsigned)
1294   0C08 E4            pop a
1295   0C09             ; --- END RELATIONAL
1296   0C09 C0 00 00      cmp b, 0
1297   0C0C C6 7B 0C      je _while38_exit
1298   0C0F             _while38_block:
1299   0C0F             ; digits[i] = '0' + (num % 10); 
1300   0C0F FA FC FF      lea d, [bp + -4] ; $digits
1301   0C12 D7            push a
1302   0C13 DA            push d
1303   0C14 FA FA FF      lea d, [bp + -6] ; $i
1304   0C17 2A            mov b, [d]
1305   0C18 38 00 00      mov c, 0
1306   0C1B E7            pop d
1307   0C1C 5A            add d, b
1308   0C1D E4            pop a
1309   0C1E DA            push d
1310   0C1F FD 2E 30 00   mov32 cb, $00000030
1310   0C23 00 00 
1311   0C25             ; --- START TERMS
1312   0C25 D7            push a
1313   0C26 11            mov a, b
1314   0C27 FA 05 00      lea d, [bp + 5] ; $num
1315   0C2A 2A            mov b, [d]
1316   0C2B 38 00 00      mov c, 0
1317   0C2E             ; --- START FACTORS
1318   0C2E D7            push a
1319   0C2F FD D8         push g
1320   0C31 11            mov a, b
1321   0C32 FD 7A         mov g, c
1322   0C34 FD 2E 0A 00   mov32 cb, $0000000a
1322   0C38 00 00 
1323   0C3A AE            div a, b ; 
1324   0C3B 11            mov a, b
1325   0C3C FD 38         mov c, g
1326   0C3E 27            mov b, a
1327   0C3F FD F1         pop g
1328   0C41 E4            pop a
1329   0C42             ; --- END FACTORS
1330   0C42 56            add b, a
1331   0C43 E4            pop a
1332   0C44             ; --- END TERMS
1333   0C44 E7            pop d
1334   0C45 FD 3E         mov [d], bl
1335   0C47             ; num = num / 10; 
1336   0C47 FA 05 00      lea d, [bp + 5] ; $num
1337   0C4A DA            push d
1338   0C4B FA 05 00      lea d, [bp + 5] ; $num
1339   0C4E 2A            mov b, [d]
1340   0C4F 38 00 00      mov c, 0
1341   0C52             ; --- START FACTORS
1342   0C52 D7            push a
1343   0C53 FD D8         push g
1344   0C55 11            mov a, b
1345   0C56 FD 7A         mov g, c
1346   0C58 FD 2E 0A 00   mov32 cb, $0000000a
1346   0C5C 00 00 
1347   0C5E AE            div a, b
1348   0C5F FD 38         mov c, g
1349   0C61 27            mov b, a
1350   0C62 FD F1         pop g
1351   0C64 E4            pop a
1352   0C65             ; --- END FACTORS
1353   0C65 E7            pop d
1354   0C66 FD 43         mov [d], b
1355   0C68             ; i++; 
1356   0C68 FA FA FF      lea d, [bp + -6] ; $i
1357   0C6B 2A            mov b, [d]
1358   0C6C 38 00 00      mov c, 0
1359   0C6F 11            mov a, b
1360   0C70 FD 77         inc b
1361   0C72 FA FA FF      lea d, [bp + -6] ; $i
1362   0C75 FD 43         mov [d], b
1363   0C77 27            mov b, a
1364   0C78 0A F6 0B      jmp _while38_cond
1365   0C7B             _while38_exit:
1366   0C7B             ; while (i > 0) { 
1367   0C7B             _while45_cond:
1368   0C7B FA FA FF      lea d, [bp + -6] ; $i
1369   0C7E 2A            mov b, [d]
1370   0C7F 38 00 00      mov c, 0
1371   0C82             ; --- START RELATIONAL
1372   0C82 D7            push a
1373   0C83 11            mov a, b
1374   0C84 FD 2E 00 00   mov32 cb, $00000000
1374   0C88 00 00 
1375   0C8A B0            cmp a, b
1376   0C8B FD 7F         sgt ; >
1377   0C8D E4            pop a
1378   0C8E             ; --- END RELATIONAL
1379   0C8E C0 00 00      cmp b, 0
1380   0C91 C6 C3 0C      je _while45_exit
1381   0C94             _while45_block:
1382   0C94             ; i--; 
1383   0C94 FA FA FF      lea d, [bp + -6] ; $i
1384   0C97 2A            mov b, [d]
1385   0C98 38 00 00      mov c, 0
1386   0C9B 11            mov a, b
1387   0C9C FD 7D         dec b
1388   0C9E FA FA FF      lea d, [bp + -6] ; $i
1389   0CA1 FD 43         mov [d], b
1390   0CA3 27            mov b, a
1391   0CA4             ; putchar(digits[i]); 
1392   0CA4             ; --- START FUNCTION CALL
1393   0CA4 FA FC FF      lea d, [bp + -4] ; $digits
1394   0CA7 D7            push a
1395   0CA8 DA            push d
1396   0CA9 FA FA FF      lea d, [bp + -6] ; $i
1397   0CAC 2A            mov b, [d]
1398   0CAD 38 00 00      mov c, 0
1399   0CB0 E7            pop d
1400   0CB1 5A            add d, b
1401   0CB2 E4            pop a
1402   0CB3 32            mov bl, [d]
1403   0CB4 A7 00         mov bh, 0
1404   0CB6 38 00 00      mov c, 0
1405   0CB9 DD            push bl
1406   0CBA 07 A4 08      call putchar
1407   0CBD 51 01 00      add sp, 1
1408   0CC0             ; --- END FUNCTION CALL
1409   0CC0 0A 7B 0C      jmp _while45_cond
1410   0CC3             _while45_exit:
1411   0CC3 F9            leave
1412   0CC4 09            ret
1413   0CC5             
1414   0CC5             printx16:
1415   0CC5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1416   0CC8             ; --- BEGIN INLINE ASM SEGMENT
1417   0CC8 FA 05 00      lea d, [bp + 5] ; $hex
1418   0CCB 2A            mov b, [d]
1419   0CCC             print_u16x_printx16:
1420   0CCC DD            push bl
1421   0CCD 30            mov bl, bh
1422   0CCE 07 EB 0C      call _itoa_printx16        
1423   0CD1 2F            mov bl, al        
1424   0CD2 19 00         mov al, 0
1425   0CD4 05 03         syscall sys_io        
1426   0CD6 24            mov ah, bl        
1427   0CD7 19 00         mov al, 0
1428   0CD9 05 03         syscall sys_io        
1429   0CDB EA            pop bl
1430   0CDC 07 EB 0C      call _itoa_printx16        
1431   0CDF 2F            mov bl, al        
1432   0CE0 19 00         mov al, 0
1433   0CE2 05 03         syscall sys_io        
1434   0CE4 24            mov ah, bl        
1435   0CE5 19 00         mov al, 0
1436   0CE7 05 03         syscall sys_io        
1437   0CE9             ; --- END INLINE ASM SEGMENT
1438   0CE9             ; return; 
1439   0CE9 F9            leave
1440   0CEA 09            ret
1441   0CEB             ; --- BEGIN INLINE ASM SEGMENT
1442   0CEB             _itoa_printx16:
1443   0CEB DA            push d
1444   0CEC D8            push b
1445   0CED A7 00         mov bh, 0
1446   0CEF FD A4 04      shr bl, 4  
1447   0CF2 74            mov d, b
1448   0CF3 1F 05 0D      mov al, [d + s_hex_digits_printx16]
1449   0CF6 23            mov ah, al
1450   0CF7 E5            pop b
1451   0CF8 D8            push b
1452   0CF9 A7 00         mov bh, 0
1453   0CFB FD 87 0F      and bl, $0F
1454   0CFE 74            mov d, b
1455   0CFF 1F 05 0D      mov al, [d + s_hex_digits_printx16]
1456   0D02 E5            pop b
1457   0D03 E7            pop d
1458   0D04 09            ret
1459   0D05 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
1459   0D09 34 35 36 37 
1459   0D0D 38 39 41 42 
1459   0D11 43 44 45 46 
1460   0D15             ; --- END INLINE ASM SEGMENT
1461   0D15 F9            leave
1462   0D16 09            ret
1463   0D17             
1464   0D17             atoi:
1465   0D17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1466   0D1A             ; int result = 0;  // Initialize result 
1467   0D1A 52 02 00      sub sp, 2
1468   0D1D             ; --- START LOCAL VAR INITIALIZATION
1469   0D1D FA FF FF      lea d, [bp + -1] ; $result
1470   0D20 DA            push d
1471   0D21 FD 2E 00 00   mov32 cb, $00000000
1471   0D25 00 00 
1472   0D27 E7            pop d
1473   0D28 FD 43         mov [d], b
1474   0D2A             ; --- END LOCAL VAR INITIALIZATION
1475   0D2A             ; int sign = 1;    // Initialize sign as positive 
1476   0D2A 52 02 00      sub sp, 2
1477   0D2D             ; --- START LOCAL VAR INITIALIZATION
1478   0D2D FA FD FF      lea d, [bp + -3] ; $sign
1479   0D30 DA            push d
1480   0D31 FD 2E 01 00   mov32 cb, $00000001
1480   0D35 00 00 
1481   0D37 E7            pop d
1482   0D38 FD 43         mov [d], b
1483   0D3A             ; --- END LOCAL VAR INITIALIZATION
1484   0D3A             ; while (*str == ' ') str++; 
1485   0D3A             _while46_cond:
1486   0D3A FA 05 00      lea d, [bp + 5] ; $str
1487   0D3D 2A            mov b, [d]
1488   0D3E 38 00 00      mov c, 0
1489   0D41 74            mov d, b
1490   0D42 32            mov bl, [d]
1491   0D43 A7 00         mov bh, 0
1492   0D45 38 00 00      mov c, 0
1493   0D48             ; --- START RELATIONAL
1494   0D48 D7            push a
1495   0D49 11            mov a, b
1496   0D4A FD 2E 20 00   mov32 cb, $00000020
1496   0D4E 00 00 
1497   0D50 B0            cmp a, b
1498   0D51 FD 71         seq ; ==
1499   0D53 E4            pop a
1500   0D54             ; --- END RELATIONAL
1501   0D54 C0 00 00      cmp b, 0
1502   0D57 C6 6D 0D      je _while46_exit
1503   0D5A             _while46_block:
1504   0D5A             ; str++; 
1505   0D5A FA 05 00      lea d, [bp + 5] ; $str
1506   0D5D 2A            mov b, [d]
1507   0D5E 38 00 00      mov c, 0
1508   0D61 FD 77         inc b
1509   0D63 FA 05 00      lea d, [bp + 5] ; $str
1510   0D66 FD 43         mov [d], b
1511   0D68 FD 7D         dec b
1512   0D6A 0A 3A 0D      jmp _while46_cond
1513   0D6D             _while46_exit:
1514   0D6D             ; if (*str == '-' || *str == '+') { 
1515   0D6D             _if47_cond:
1516   0D6D FA 05 00      lea d, [bp + 5] ; $str
1517   0D70 2A            mov b, [d]
1518   0D71 38 00 00      mov c, 0
1519   0D74 74            mov d, b
1520   0D75 32            mov bl, [d]
1521   0D76 A7 00         mov bh, 0
1522   0D78 38 00 00      mov c, 0
1523   0D7B             ; --- START RELATIONAL
1524   0D7B D7            push a
1525   0D7C 11            mov a, b
1526   0D7D FD 2E 2D 00   mov32 cb, $0000002d
1526   0D81 00 00 
1527   0D83 B0            cmp a, b
1528   0D84 FD 71         seq ; ==
1529   0D86 E4            pop a
1530   0D87             ; --- END RELATIONAL
1531   0D87             ; --- START LOGICAL OR
1532   0D87 D7            push a
1533   0D88 11            mov a, b
1534   0D89 FA 05 00      lea d, [bp + 5] ; $str
1535   0D8C 2A            mov b, [d]
1536   0D8D 38 00 00      mov c, 0
1537   0D90 74            mov d, b
1538   0D91 32            mov bl, [d]
1539   0D92 A7 00         mov bh, 0
1540   0D94 38 00 00      mov c, 0
1541   0D97             ; --- START RELATIONAL
1542   0D97 D7            push a
1543   0D98 11            mov a, b
1544   0D99 FD 2E 2B 00   mov32 cb, $0000002b
1544   0D9D 00 00 
1545   0D9F B0            cmp a, b
1546   0DA0 FD 71         seq ; ==
1547   0DA2 E4            pop a
1548   0DA3             ; --- END RELATIONAL
1549   0DA3 FD A8         sor a, b ; ||
1550   0DA5 E4            pop a
1551   0DA6             ; --- END LOGICAL OR
1552   0DA6 C0 00 00      cmp b, 0
1553   0DA9 C6 EF 0D      je _if47_exit
1554   0DAC             _if47_TRUE:
1555   0DAC             ; if (*str == '-') sign = -1; 
1556   0DAC             _if48_cond:
1557   0DAC FA 05 00      lea d, [bp + 5] ; $str
1558   0DAF 2A            mov b, [d]
1559   0DB0 38 00 00      mov c, 0
1560   0DB3 74            mov d, b
1561   0DB4 32            mov bl, [d]
1562   0DB5 A7 00         mov bh, 0
1563   0DB7 38 00 00      mov c, 0
1564   0DBA             ; --- START RELATIONAL
1565   0DBA D7            push a
1566   0DBB 11            mov a, b
1567   0DBC FD 2E 2D 00   mov32 cb, $0000002d
1567   0DC0 00 00 
1568   0DC2 B0            cmp a, b
1569   0DC3 FD 71         seq ; ==
1570   0DC5 E4            pop a
1571   0DC6             ; --- END RELATIONAL
1572   0DC6 C0 00 00      cmp b, 0
1573   0DC9 C6 DC 0D      je _if48_exit
1574   0DCC             _if48_TRUE:
1575   0DCC             ; sign = -1; 
1576   0DCC FA FD FF      lea d, [bp + -3] ; $sign
1577   0DCF DA            push d
1578   0DD0 FD 2E FF FF   mov32 cb, $ffffffff
1578   0DD4 FF FF 
1579   0DD6 E7            pop d
1580   0DD7 FD 43         mov [d], b
1581   0DD9 0A DC 0D      jmp _if48_exit
1582   0DDC             _if48_exit:
1583   0DDC             ; str++; 
1584   0DDC FA 05 00      lea d, [bp + 5] ; $str
1585   0DDF 2A            mov b, [d]
1586   0DE0 38 00 00      mov c, 0
1587   0DE3 FD 77         inc b
1588   0DE5 FA 05 00      lea d, [bp + 5] ; $str
1589   0DE8 FD 43         mov [d], b
1590   0DEA FD 7D         dec b
1591   0DEC 0A EF 0D      jmp _if47_exit
1592   0DEF             _if47_exit:
1593   0DEF             ; while (*str >= '0' && *str <= '9') { 
1594   0DEF             _while49_cond:
1595   0DEF FA 05 00      lea d, [bp + 5] ; $str
1596   0DF2 2A            mov b, [d]
1597   0DF3 38 00 00      mov c, 0
1598   0DF6 74            mov d, b
1599   0DF7 32            mov bl, [d]
1600   0DF8 A7 00         mov bh, 0
1601   0DFA 38 00 00      mov c, 0
1602   0DFD             ; --- START RELATIONAL
1603   0DFD D7            push a
1604   0DFE 11            mov a, b
1605   0DFF FD 2E 30 00   mov32 cb, $00000030
1605   0E03 00 00 
1606   0E05 B0            cmp a, b
1607   0E06 FD 82         sgeu ; >= (unsigned)
1608   0E08 E4            pop a
1609   0E09             ; --- END RELATIONAL
1610   0E09             ; --- START LOGICAL AND
1611   0E09 D7            push a
1612   0E0A 11            mov a, b
1613   0E0B FA 05 00      lea d, [bp + 5] ; $str
1614   0E0E 2A            mov b, [d]
1615   0E0F 38 00 00      mov c, 0
1616   0E12 74            mov d, b
1617   0E13 32            mov bl, [d]
1618   0E14 A7 00         mov bh, 0
1619   0E16 38 00 00      mov c, 0
1620   0E19             ; --- START RELATIONAL
1621   0E19 D7            push a
1622   0E1A 11            mov a, b
1623   0E1B FD 2E 39 00   mov32 cb, $00000039
1623   0E1F 00 00 
1624   0E21 B0            cmp a, b
1625   0E22 FD 76         sleu ; <= (unsigned)
1626   0E24 E4            pop a
1627   0E25             ; --- END RELATIONAL
1628   0E25 FD A7         sand a, b
1629   0E27 E4            pop a
1630   0E28             ; --- END LOGICAL AND
1631   0E28 C0 00 00      cmp b, 0
1632   0E2B C6 7E 0E      je _while49_exit
1633   0E2E             _while49_block:
1634   0E2E             ; result = result * 10 + (*str - '0'); 
1635   0E2E FA FF FF      lea d, [bp + -1] ; $result
1636   0E31 DA            push d
1637   0E32 FA FF FF      lea d, [bp + -1] ; $result
1638   0E35 2A            mov b, [d]
1639   0E36 38 00 00      mov c, 0
1640   0E39             ; --- START FACTORS
1641   0E39 D7            push a
1642   0E3A FD D8         push g
1643   0E3C 11            mov a, b
1644   0E3D FD 7A         mov g, c
1645   0E3F FD 2E 0A 00   mov32 cb, $0000000a
1645   0E43 00 00 
1646   0E45 FD 38         mov c, g
1647   0E47 27            mov b, a
1648   0E48 FD F1         pop g
1649   0E4A E4            pop a
1650   0E4B             ; --- END FACTORS
1651   0E4B             ; --- START TERMS
1652   0E4B D7            push a
1653   0E4C 11            mov a, b
1654   0E4D FA 05 00      lea d, [bp + 5] ; $str
1655   0E50 2A            mov b, [d]
1656   0E51 38 00 00      mov c, 0
1657   0E54 74            mov d, b
1658   0E55 32            mov bl, [d]
1659   0E56 A7 00         mov bh, 0
1660   0E58 38 00 00      mov c, 0
1661   0E5B             ; --- START TERMS
1662   0E5B D7            push a
1663   0E5C 11            mov a, b
1664   0E5D FD 2E 30 00   mov32 cb, $00000030
1664   0E61 00 00 
1665   0E63 60            sub a, b
1666   0E64 27            mov b, a
1667   0E65 E4            pop a
1668   0E66             ; --- END TERMS
1669   0E66 56            add b, a
1670   0E67 E4            pop a
1671   0E68             ; --- END TERMS
1672   0E68 E7            pop d
1673   0E69 FD 43         mov [d], b
1674   0E6B             ; str++; 
1675   0E6B FA 05 00      lea d, [bp + 5] ; $str
1676   0E6E 2A            mov b, [d]
1677   0E6F 38 00 00      mov c, 0
1678   0E72 FD 77         inc b
1679   0E74 FA 05 00      lea d, [bp + 5] ; $str
1680   0E77 FD 43         mov [d], b
1681   0E79 FD 7D         dec b
1682   0E7B 0A EF 0D      jmp _while49_cond
1683   0E7E             _while49_exit:
1684   0E7E             ; return sign * result; 
1685   0E7E FA FD FF      lea d, [bp + -3] ; $sign
1686   0E81 2A            mov b, [d]
1687   0E82 38 00 00      mov c, 0
1688   0E85             ; --- START FACTORS
1689   0E85 D7            push a
1690   0E86 FD D8         push g
1691   0E88 11            mov a, b
1692   0E89 FD 7A         mov g, c
1693   0E8B FA FF FF      lea d, [bp + -1] ; $result
1694   0E8E 2A            mov b, [d]
1695   0E8F 38 00 00      mov c, 0
1696   0E92 FD 38         mov c, g
1697   0E94 27            mov b, a
1698   0E95 FD F1         pop g
1699   0E97 E4            pop a
1700   0E98             ; --- END FACTORS
1701   0E98 F9            leave
1702   0E99 09            ret
1703   0E9A             ; --- END TEXT SEGMENT
1704   0E9A             
1705   0E9A             ; --- BEGIN DATA SEGMENT
1706   0E9A 68 65 6C 6C _s0: .db "hello world", 0
1706   0E9E 6F 20 77 6F 
1706   0EA2 72 6C 64 00 
1707   0EA6 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
1707   0EAA 70 65 63 74 
1707   0EAE 65 64 20 66 
1707   0EB2 6F 72 6D 61 
1707   0EB6 74 20 69 6E 
1707   0EBA 20 70 72 69 
1707   0EBE 6E 74 66 2E 
1707   0EC2 00 
1708   0EC3 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
1708   0EC7 72 3A 20 55 
1708   0ECB 6E 6B 6E 6F 
1708   0ECF 77 6E 20 61 
1708   0ED3 72 67 75 6D 
1708   0ED7 65 6E 74 20 
1708   0EDB 74 79 70 65 
1708   0EDF 2E 0A 00 
1709   0EE2             
1710   0EE2 E4 0E       _heap_top: .dw _heap
1711   0EE4 00          _heap: .db 0
1712   0EE5             ; --- END DATA SEGMENT
1713   0EE5             
1714   0EE5             .end
tasm: Number of errors = 0
