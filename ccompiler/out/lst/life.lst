0001   0000             ; --- FILENAME: programs/life.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int i, j; 
0011   0408 52 02 00      sub sp, 2
0012   040B 52 02 00      sub sp, 2
0013   040E             ; int n; 
0014   040E 52 02 00      sub sp, 2
0015   0411             ; for(i = 0; i <   30     ; i++){ 
0016   0411             _for1_init:
0017   0411 FA FF FF      lea d, [bp + -1] ; $i
0018   0414 DA            push d
0019   0415 FD 2E 00 00   mov32 cb, $00000000
0019   0419 00 00 
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             _for1_cond:
0023   041E FA FF FF      lea d, [bp + -1] ; $i
0024   0421 2A            mov b, [d]
0025   0422 38 00 00      mov c, 0
0026   0425             ; --- START RELATIONAL
0027   0425 D7            push a
0028   0426 11            mov a, b
0029   0427 FD 2E 1E 00   mov32 cb, $0000001e
0029   042B 00 00 
0030   042D B0            cmp a, b
0031   042E FD 73         slt ; < (signed)
0032   0430 E4            pop a
0033   0431             ; --- END RELATIONAL
0034   0431 C0 00 00      cmp b, 0
0035   0434 C6 C5 04      je _for1_exit
0036   0437             _for1_block:
0037   0437             ; for(j = 0; j <    40    ; j++){ 
0038   0437             _for2_init:
0039   0437 FA FD FF      lea d, [bp + -3] ; $j
0040   043A DA            push d
0041   043B FD 2E 00 00   mov32 cb, $00000000
0041   043F 00 00 
0042   0441 E7            pop d
0043   0442 FD 43         mov [d], b
0044   0444             _for2_cond:
0045   0444 FA FD FF      lea d, [bp + -3] ; $j
0046   0447 2A            mov b, [d]
0047   0448 38 00 00      mov c, 0
0048   044B             ; --- START RELATIONAL
0049   044B D7            push a
0050   044C 11            mov a, b
0051   044D FD 2E 28 00   mov32 cb, $00000028
0051   0451 00 00 
0052   0453 B0            cmp a, b
0053   0454 FD 73         slt ; < (signed)
0054   0456 E4            pop a
0055   0457             ; --- END RELATIONAL
0056   0457 C0 00 00      cmp b, 0
0057   045A C6 B2 04      je _for2_exit
0058   045D             _for2_block:
0059   045D             ; nextState[i][j] = currState[i][j]; 
0060   045D 3B 2C 28      mov d, _nextState_data ; $nextState
0061   0460 D7            push a
0062   0461 DA            push d
0063   0462 FA FF FF      lea d, [bp + -1] ; $i
0064   0465 2A            mov b, [d]
0065   0466 38 00 00      mov c, 0
0066   0469 E7            pop d
0067   046A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0068   046E DA            push d
0069   046F FA FD FF      lea d, [bp + -3] ; $j
0070   0472 2A            mov b, [d]
0071   0473 38 00 00      mov c, 0
0072   0476 E7            pop d
0073   0477 5A            add d, b
0074   0478 E4            pop a
0075   0479 DA            push d
0076   047A 3B DC 2C      mov d, _currState_data ; $currState
0077   047D D7            push a
0078   047E DA            push d
0079   047F FA FF FF      lea d, [bp + -1] ; $i
0080   0482 2A            mov b, [d]
0081   0483 38 00 00      mov c, 0
0082   0486 E7            pop d
0083   0487 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0084   048B DA            push d
0085   048C FA FD FF      lea d, [bp + -3] ; $j
0086   048F 2A            mov b, [d]
0087   0490 38 00 00      mov c, 0
0088   0493 E7            pop d
0089   0494 5A            add d, b
0090   0495 E4            pop a
0091   0496 32            mov bl, [d]
0092   0497 A7 00         mov bh, 0
0093   0499 38 00 00      mov c, 0
0094   049C E7            pop d
0095   049D FD 3E         mov [d], bl
0096   049F             _for2_update:
0097   049F FA FD FF      lea d, [bp + -3] ; $j
0098   04A2 2A            mov b, [d]
0099   04A3 38 00 00      mov c, 0
0100   04A6 11            mov a, b
0101   04A7 FD 77         inc b
0102   04A9 FA FD FF      lea d, [bp + -3] ; $j
0103   04AC FD 43         mov [d], b
0104   04AE 27            mov b, a
0105   04AF 0A 44 04      jmp _for2_cond
0106   04B2             _for2_exit:
0107   04B2             _for1_update:
0108   04B2 FA FF FF      lea d, [bp + -1] ; $i
0109   04B5 2A            mov b, [d]
0110   04B6 38 00 00      mov c, 0
0111   04B9 11            mov a, b
0112   04BA FD 77         inc b
0113   04BC FA FF FF      lea d, [bp + -1] ; $i
0114   04BF FD 43         mov [d], b
0115   04C1 27            mov b, a
0116   04C2 0A 1E 04      jmp _for1_cond
0117   04C5             _for1_exit:
0118   04C5             ; for(;;){ 
0119   04C5             _for3_init:
0120   04C5             _for3_cond:
0121   04C5             _for3_block:
0122   04C5             ; for(i = 1; i <   30     +-1; i++){ 
0123   04C5             _for4_init:
0124   04C5 FA FF FF      lea d, [bp + -1] ; $i
0125   04C8 DA            push d
0126   04C9 FD 2E 01 00   mov32 cb, $00000001
0126   04CD 00 00 
0127   04CF E7            pop d
0128   04D0 FD 43         mov [d], b
0129   04D2             _for4_cond:
0130   04D2 FA FF FF      lea d, [bp + -1] ; $i
0131   04D5 2A            mov b, [d]
0132   04D6 38 00 00      mov c, 0
0133   04D9             ; --- START RELATIONAL
0134   04D9 D7            push a
0135   04DA 11            mov a, b
0136   04DB FD 2E 1E 00   mov32 cb, $0000001e
0136   04DF 00 00 
0137   04E1             ; --- START TERMS
0138   04E1 D7            push a
0139   04E2 11            mov a, b
0140   04E3 FD 2E FF FF   mov32 cb, $ffffffff
0140   04E7 FF FF 
0141   04E9 56            add b, a
0142   04EA E4            pop a
0143   04EB             ; --- END TERMS
0144   04EB B0            cmp a, b
0145   04EC FD 73         slt ; < (signed)
0146   04EE E4            pop a
0147   04EF             ; --- END RELATIONAL
0148   04EF C0 00 00      cmp b, 0
0149   04F2 C6 08 06      je _for4_exit
0150   04F5             _for4_block:
0151   04F5             ; for(j = 1; j <    40    +-1; j++){ 
0152   04F5             _for5_init:
0153   04F5 FA FD FF      lea d, [bp + -3] ; $j
0154   04F8 DA            push d
0155   04F9 FD 2E 01 00   mov32 cb, $00000001
0155   04FD 00 00 
0156   04FF E7            pop d
0157   0500 FD 43         mov [d], b
0158   0502             _for5_cond:
0159   0502 FA FD FF      lea d, [bp + -3] ; $j
0160   0505 2A            mov b, [d]
0161   0506 38 00 00      mov c, 0
0162   0509             ; --- START RELATIONAL
0163   0509 D7            push a
0164   050A 11            mov a, b
0165   050B FD 2E 28 00   mov32 cb, $00000028
0165   050F 00 00 
0166   0511             ; --- START TERMS
0167   0511 D7            push a
0168   0512 11            mov a, b
0169   0513 FD 2E FF FF   mov32 cb, $ffffffff
0169   0517 FF FF 
0170   0519 56            add b, a
0171   051A E4            pop a
0172   051B             ; --- END TERMS
0173   051B B0            cmp a, b
0174   051C FD 73         slt ; < (signed)
0175   051E E4            pop a
0176   051F             ; --- END RELATIONAL
0177   051F C0 00 00      cmp b, 0
0178   0522 C6 F5 05      je _for5_exit
0179   0525             _for5_block:
0180   0525             ; n = neighbours(i, j); 
0181   0525 FA FB FF      lea d, [bp + -5] ; $n
0182   0528 DA            push d
0183   0529             ; --- START FUNCTION CALL
0184   0529 FA FD FF      lea d, [bp + -3] ; $j
0185   052C 2A            mov b, [d]
0186   052D 38 00 00      mov c, 0
0187   0530 FD AB         swp b
0188   0532 D8            push b
0189   0533 FA FF FF      lea d, [bp + -1] ; $i
0190   0536 2A            mov b, [d]
0191   0537 38 00 00      mov c, 0
0192   053A FD AB         swp b
0193   053C D8            push b
0194   053D 07 54 25      call neighbours
0195   0540 51 04 00      add sp, 4
0196   0543             ; --- END FUNCTION CALL
0197   0543 E7            pop d
0198   0544 FD 43         mov [d], b
0199   0546             ; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0200   0546             _if6_cond:
0201   0546 FA FB FF      lea d, [bp + -5] ; $n
0202   0549 2A            mov b, [d]
0203   054A 38 00 00      mov c, 0
0204   054D             ; --- START RELATIONAL
0205   054D D7            push a
0206   054E 11            mov a, b
0207   054F FD 2E 02 00   mov32 cb, $00000002
0207   0553 00 00 
0208   0555 B0            cmp a, b
0209   0556 FD 73         slt ; < (signed)
0210   0558 E4            pop a
0211   0559             ; --- END RELATIONAL
0212   0559             ; --- START LOGICAL OR
0213   0559 D7            push a
0214   055A 11            mov a, b
0215   055B FA FB FF      lea d, [bp + -5] ; $n
0216   055E 2A            mov b, [d]
0217   055F 38 00 00      mov c, 0
0218   0562             ; --- START RELATIONAL
0219   0562 D7            push a
0220   0563 11            mov a, b
0221   0564 FD 2E 03 00   mov32 cb, $00000003
0221   0568 00 00 
0222   056A B0            cmp a, b
0223   056B FD 7F         sgt ; >
0224   056D E4            pop a
0225   056E             ; --- END RELATIONAL
0226   056E FD A8         sor a, b ; ||
0227   0570 E4            pop a
0228   0571             ; --- END LOGICAL OR
0229   0571 C0 00 00      cmp b, 0
0230   0574 C6 A0 05      je _if6_else
0231   0577             _if6_TRUE:
0232   0577             ; nextState[i][j] = ' '; 
0233   0577 3B 2C 28      mov d, _nextState_data ; $nextState
0234   057A D7            push a
0235   057B DA            push d
0236   057C FA FF FF      lea d, [bp + -1] ; $i
0237   057F 2A            mov b, [d]
0238   0580 38 00 00      mov c, 0
0239   0583 E7            pop d
0240   0584 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0241   0588 DA            push d
0242   0589 FA FD FF      lea d, [bp + -3] ; $j
0243   058C 2A            mov b, [d]
0244   058D 38 00 00      mov c, 0
0245   0590 E7            pop d
0246   0591 5A            add d, b
0247   0592 E4            pop a
0248   0593 DA            push d
0249   0594 FD 2E 20 00   mov32 cb, $00000020
0249   0598 00 00 
0250   059A E7            pop d
0251   059B FD 3E         mov [d], bl
0252   059D 0A E2 05      jmp _if6_exit
0253   05A0             _if6_else:
0254   05A0             ; if(n == 3) nextState[i][j] = '@'; 
0255   05A0             _if7_cond:
0256   05A0 FA FB FF      lea d, [bp + -5] ; $n
0257   05A3 2A            mov b, [d]
0258   05A4 38 00 00      mov c, 0
0259   05A7             ; --- START RELATIONAL
0260   05A7 D7            push a
0261   05A8 11            mov a, b
0262   05A9 FD 2E 03 00   mov32 cb, $00000003
0262   05AD 00 00 
0263   05AF B0            cmp a, b
0264   05B0 FD 71         seq ; ==
0265   05B2 E4            pop a
0266   05B3             ; --- END RELATIONAL
0267   05B3 C0 00 00      cmp b, 0
0268   05B6 C6 E2 05      je _if7_exit
0269   05B9             _if7_TRUE:
0270   05B9             ; nextState[i][j] = '@'; 
0271   05B9 3B 2C 28      mov d, _nextState_data ; $nextState
0272   05BC D7            push a
0273   05BD DA            push d
0274   05BE FA FF FF      lea d, [bp + -1] ; $i
0275   05C1 2A            mov b, [d]
0276   05C2 38 00 00      mov c, 0
0277   05C5 E7            pop d
0278   05C6 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0279   05CA DA            push d
0280   05CB FA FD FF      lea d, [bp + -3] ; $j
0281   05CE 2A            mov b, [d]
0282   05CF 38 00 00      mov c, 0
0283   05D2 E7            pop d
0284   05D3 5A            add d, b
0285   05D4 E4            pop a
0286   05D5 DA            push d
0287   05D6 FD 2E 40 00   mov32 cb, $00000040
0287   05DA 00 00 
0288   05DC E7            pop d
0289   05DD FD 3E         mov [d], bl
0290   05DF 0A E2 05      jmp _if7_exit
0291   05E2             _if7_exit:
0292   05E2             _if6_exit:
0293   05E2             _for5_update:
0294   05E2 FA FD FF      lea d, [bp + -3] ; $j
0295   05E5 2A            mov b, [d]
0296   05E6 38 00 00      mov c, 0
0297   05E9 11            mov a, b
0298   05EA FD 77         inc b
0299   05EC FA FD FF      lea d, [bp + -3] ; $j
0300   05EF FD 43         mov [d], b
0301   05F1 27            mov b, a
0302   05F2 0A 02 05      jmp _for5_cond
0303   05F5             _for5_exit:
0304   05F5             _for4_update:
0305   05F5 FA FF FF      lea d, [bp + -1] ; $i
0306   05F8 2A            mov b, [d]
0307   05F9 38 00 00      mov c, 0
0308   05FC 11            mov a, b
0309   05FD FD 77         inc b
0310   05FF FA FF FF      lea d, [bp + -1] ; $i
0311   0602 FD 43         mov [d], b
0312   0604 27            mov b, a
0313   0605 0A D2 04      jmp _for4_cond
0314   0608             _for4_exit:
0315   0608             ; for(i = 1; i <   30     +-1; i++){ 
0316   0608             _for8_init:
0317   0608 FA FF FF      lea d, [bp + -1] ; $i
0318   060B DA            push d
0319   060C FD 2E 01 00   mov32 cb, $00000001
0319   0610 00 00 
0320   0612 E7            pop d
0321   0613 FD 43         mov [d], b
0322   0615             _for8_cond:
0323   0615 FA FF FF      lea d, [bp + -1] ; $i
0324   0618 2A            mov b, [d]
0325   0619 38 00 00      mov c, 0
0326   061C             ; --- START RELATIONAL
0327   061C D7            push a
0328   061D 11            mov a, b
0329   061E FD 2E 1E 00   mov32 cb, $0000001e
0329   0622 00 00 
0330   0624             ; --- START TERMS
0331   0624 D7            push a
0332   0625 11            mov a, b
0333   0626 FD 2E FF FF   mov32 cb, $ffffffff
0333   062A FF FF 
0334   062C 56            add b, a
0335   062D E4            pop a
0336   062E             ; --- END TERMS
0337   062E B0            cmp a, b
0338   062F FD 73         slt ; < (signed)
0339   0631 E4            pop a
0340   0632             ; --- END RELATIONAL
0341   0632 C0 00 00      cmp b, 0
0342   0635 C6 D0 06      je _for8_exit
0343   0638             _for8_block:
0344   0638             ; for(j = 1; j <    40    +-1; j++){ 
0345   0638             _for9_init:
0346   0638 FA FD FF      lea d, [bp + -3] ; $j
0347   063B DA            push d
0348   063C FD 2E 01 00   mov32 cb, $00000001
0348   0640 00 00 
0349   0642 E7            pop d
0350   0643 FD 43         mov [d], b
0351   0645             _for9_cond:
0352   0645 FA FD FF      lea d, [bp + -3] ; $j
0353   0648 2A            mov b, [d]
0354   0649 38 00 00      mov c, 0
0355   064C             ; --- START RELATIONAL
0356   064C D7            push a
0357   064D 11            mov a, b
0358   064E FD 2E 28 00   mov32 cb, $00000028
0358   0652 00 00 
0359   0654             ; --- START TERMS
0360   0654 D7            push a
0361   0655 11            mov a, b
0362   0656 FD 2E FF FF   mov32 cb, $ffffffff
0362   065A FF FF 
0363   065C 56            add b, a
0364   065D E4            pop a
0365   065E             ; --- END TERMS
0366   065E B0            cmp a, b
0367   065F FD 73         slt ; < (signed)
0368   0661 E4            pop a
0369   0662             ; --- END RELATIONAL
0370   0662 C0 00 00      cmp b, 0
0371   0665 C6 BD 06      je _for9_exit
0372   0668             _for9_block:
0373   0668             ; currState[i][j] = nextState[i][j]; 
0374   0668 3B DC 2C      mov d, _currState_data ; $currState
0375   066B D7            push a
0376   066C DA            push d
0377   066D FA FF FF      lea d, [bp + -1] ; $i
0378   0670 2A            mov b, [d]
0379   0671 38 00 00      mov c, 0
0380   0674 E7            pop d
0381   0675 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0382   0679 DA            push d
0383   067A FA FD FF      lea d, [bp + -3] ; $j
0384   067D 2A            mov b, [d]
0385   067E 38 00 00      mov c, 0
0386   0681 E7            pop d
0387   0682 5A            add d, b
0388   0683 E4            pop a
0389   0684 DA            push d
0390   0685 3B 2C 28      mov d, _nextState_data ; $nextState
0391   0688 D7            push a
0392   0689 DA            push d
0393   068A FA FF FF      lea d, [bp + -1] ; $i
0394   068D 2A            mov b, [d]
0395   068E 38 00 00      mov c, 0
0396   0691 E7            pop d
0397   0692 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0398   0696 DA            push d
0399   0697 FA FD FF      lea d, [bp + -3] ; $j
0400   069A 2A            mov b, [d]
0401   069B 38 00 00      mov c, 0
0402   069E E7            pop d
0403   069F 5A            add d, b
0404   06A0 E4            pop a
0405   06A1 32            mov bl, [d]
0406   06A2 A7 00         mov bh, 0
0407   06A4 38 00 00      mov c, 0
0408   06A7 E7            pop d
0409   06A8 FD 3E         mov [d], bl
0410   06AA             _for9_update:
0411   06AA FA FD FF      lea d, [bp + -3] ; $j
0412   06AD 2A            mov b, [d]
0413   06AE 38 00 00      mov c, 0
0414   06B1 11            mov a, b
0415   06B2 FD 77         inc b
0416   06B4 FA FD FF      lea d, [bp + -3] ; $j
0417   06B7 FD 43         mov [d], b
0418   06B9 27            mov b, a
0419   06BA 0A 45 06      jmp _for9_cond
0420   06BD             _for9_exit:
0421   06BD             _for8_update:
0422   06BD FA FF FF      lea d, [bp + -1] ; $i
0423   06C0 2A            mov b, [d]
0424   06C1 38 00 00      mov c, 0
0425   06C4 11            mov a, b
0426   06C5 FD 77         inc b
0427   06C7 FA FF FF      lea d, [bp + -1] ; $i
0428   06CA FD 43         mov [d], b
0429   06CC 27            mov b, a
0430   06CD 0A 15 06      jmp _for8_cond
0431   06D0             _for8_exit:
0432   06D0             ; printf(clear); 
0433   06D0             ; --- START FUNCTION CALL
0434   06D0 3B 20 28      mov d, _clear_data ; $clear
0435   06D3 2D            mov b, d
0436   06D4 38 00 00      mov c, 0
0437   06D7 FD AB         swp b
0438   06D9 D8            push b
0439   06DA 07 25 0C      call printf
0440   06DD 51 02 00      add sp, 2
0441   06E0             ; --- END FUNCTION CALL
0442   06E0             ; show(); 
0443   06E0             ; --- START FUNCTION CALL
0444   06E0 07 2F 24      call show
0445   06E3             ; puts("\n\rPress CTRL+C to quit.\n\r"); 
0446   06E3             ; --- START FUNCTION CALL
0447   06E3 26 8F 31      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0448   06E6 FD AB         swp b
0449   06E8 D8            push b
0450   06E9 07 BA 1F      call puts
0451   06EC 51 02 00      add sp, 2
0452   06EF             ; --- END FUNCTION CALL
0453   06EF             _for3_update:
0454   06EF 0A C5 04      jmp _for3_cond
0455   06F2             _for3_exit:
0456   06F2 05 0B         syscall sys_terminate_proc
0457   06F4             
0458   06F4             strcpy:
0459   06F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0460   06F7             ; char *psrc; 
0461   06F7 52 02 00      sub sp, 2
0462   06FA             ; char *pdest; 
0463   06FA 52 02 00      sub sp, 2
0464   06FD             ; psrc = src; 
0465   06FD FA FF FF      lea d, [bp + -1] ; $psrc
0466   0700 DA            push d
0467   0701 FA 07 00      lea d, [bp + 7] ; $src
0468   0704 2A            mov b, [d]
0469   0705 38 00 00      mov c, 0
0470   0708 E7            pop d
0471   0709 FD 43         mov [d], b
0472   070B             ; pdest = dest; 
0473   070B FA FD FF      lea d, [bp + -3] ; $pdest
0474   070E DA            push d
0475   070F FA 05 00      lea d, [bp + 5] ; $dest
0476   0712 2A            mov b, [d]
0477   0713 38 00 00      mov c, 0
0478   0716 E7            pop d
0479   0717 FD 43         mov [d], b
0480   0719             ; while(*psrc) *pdest++ = *psrc++; 
0481   0719             _while10_cond:
0482   0719 FA FF FF      lea d, [bp + -1] ; $psrc
0483   071C 2A            mov b, [d]
0484   071D 38 00 00      mov c, 0
0485   0720 74            mov d, b
0486   0721 32            mov bl, [d]
0487   0722 A7 00         mov bh, 0
0488   0724 38 00 00      mov c, 0
0489   0727 C0 00 00      cmp b, 0
0490   072A C6 5B 07      je _while10_exit
0491   072D             _while10_block:
0492   072D             ; *pdest++ = *psrc++; 
0493   072D FA FD FF      lea d, [bp + -3] ; $pdest
0494   0730 2A            mov b, [d]
0495   0731 38 00 00      mov c, 0
0496   0734 FD 77         inc b
0497   0736 FA FD FF      lea d, [bp + -3] ; $pdest
0498   0739 FD 43         mov [d], b
0499   073B FD 7D         dec b
0500   073D D8            push b
0501   073E FA FF FF      lea d, [bp + -1] ; $psrc
0502   0741 2A            mov b, [d]
0503   0742 38 00 00      mov c, 0
0504   0745 FD 77         inc b
0505   0747 FA FF FF      lea d, [bp + -1] ; $psrc
0506   074A FD 43         mov [d], b
0507   074C FD 7D         dec b
0508   074E 74            mov d, b
0509   074F 32            mov bl, [d]
0510   0750 A7 00         mov bh, 0
0511   0752 38 00 00      mov c, 0
0512   0755 E7            pop d
0513   0756 FD 3E         mov [d], bl
0514   0758 0A 19 07      jmp _while10_cond
0515   075B             _while10_exit:
0516   075B             ; *pdest = '\0'; 
0517   075B FA FD FF      lea d, [bp + -3] ; $pdest
0518   075E 2A            mov b, [d]
0519   075F 38 00 00      mov c, 0
0520   0762 D8            push b
0521   0763 FD 2E 00 00   mov32 cb, $00000000
0521   0767 00 00 
0522   0769 E7            pop d
0523   076A FD 3E         mov [d], bl
0524   076C F9            leave
0525   076D 09            ret
0526   076E             
0527   076E             strcmp:
0528   076E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0529   0771             ; while (*s1 && (*s1 == *s2)) { 
0530   0771             _while11_cond:
0531   0771 FA 05 00      lea d, [bp + 5] ; $s1
0532   0774 2A            mov b, [d]
0533   0775 38 00 00      mov c, 0
0534   0778 74            mov d, b
0535   0779 32            mov bl, [d]
0536   077A A7 00         mov bh, 0
0537   077C 38 00 00      mov c, 0
0538   077F             ; --- START LOGICAL AND
0539   077F D7            push a
0540   0780 11            mov a, b
0541   0781 FA 05 00      lea d, [bp + 5] ; $s1
0542   0784 2A            mov b, [d]
0543   0785 38 00 00      mov c, 0
0544   0788 74            mov d, b
0545   0789 32            mov bl, [d]
0546   078A A7 00         mov bh, 0
0547   078C 38 00 00      mov c, 0
0548   078F             ; --- START RELATIONAL
0549   078F D7            push a
0550   0790 11            mov a, b
0551   0791 FA 07 00      lea d, [bp + 7] ; $s2
0552   0794 2A            mov b, [d]
0553   0795 38 00 00      mov c, 0
0554   0798 74            mov d, b
0555   0799 32            mov bl, [d]
0556   079A A7 00         mov bh, 0
0557   079C 38 00 00      mov c, 0
0558   079F B0            cmp a, b
0559   07A0 FD 71         seq ; ==
0560   07A2 E4            pop a
0561   07A3             ; --- END RELATIONAL
0562   07A3 FD A7         sand a, b
0563   07A5 E4            pop a
0564   07A6             ; --- END LOGICAL AND
0565   07A6 C0 00 00      cmp b, 0
0566   07A9 C6 CF 07      je _while11_exit
0567   07AC             _while11_block:
0568   07AC             ; s1++; 
0569   07AC FA 05 00      lea d, [bp + 5] ; $s1
0570   07AF 2A            mov b, [d]
0571   07B0 38 00 00      mov c, 0
0572   07B3 FD 77         inc b
0573   07B5 FA 05 00      lea d, [bp + 5] ; $s1
0574   07B8 FD 43         mov [d], b
0575   07BA FD 7D         dec b
0576   07BC             ; s2++; 
0577   07BC FA 07 00      lea d, [bp + 7] ; $s2
0578   07BF 2A            mov b, [d]
0579   07C0 38 00 00      mov c, 0
0580   07C3 FD 77         inc b
0581   07C5 FA 07 00      lea d, [bp + 7] ; $s2
0582   07C8 FD 43         mov [d], b
0583   07CA FD 7D         dec b
0584   07CC 0A 71 07      jmp _while11_cond
0585   07CF             _while11_exit:
0586   07CF             ; return *s1 - *s2; 
0587   07CF FA 05 00      lea d, [bp + 5] ; $s1
0588   07D2 2A            mov b, [d]
0589   07D3 38 00 00      mov c, 0
0590   07D6 74            mov d, b
0591   07D7 32            mov bl, [d]
0592   07D8 A7 00         mov bh, 0
0593   07DA 38 00 00      mov c, 0
0594   07DD             ; --- START TERMS
0595   07DD D7            push a
0596   07DE 11            mov a, b
0597   07DF FA 07 00      lea d, [bp + 7] ; $s2
0598   07E2 2A            mov b, [d]
0599   07E3 38 00 00      mov c, 0
0600   07E6 74            mov d, b
0601   07E7 32            mov bl, [d]
0602   07E8 A7 00         mov bh, 0
0603   07EA 38 00 00      mov c, 0
0604   07ED 60            sub a, b
0605   07EE 27            mov b, a
0606   07EF E4            pop a
0607   07F0             ; --- END TERMS
0608   07F0 F9            leave
0609   07F1 09            ret
0610   07F2             
0611   07F2             strncmp:
0612   07F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0613   07F5 F9            leave
0614   07F6 09            ret
0615   07F7             
0616   07F7             strcat:
0617   07F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0618   07FA             ; int dest_len; 
0619   07FA 52 02 00      sub sp, 2
0620   07FD             ; int i; 
0621   07FD 52 02 00      sub sp, 2
0622   0800             ; dest_len = strlen(dest); 
0623   0800 FA FF FF      lea d, [bp + -1] ; $dest_len
0624   0803 DA            push d
0625   0804             ; --- START FUNCTION CALL
0626   0804 FA 05 00      lea d, [bp + 5] ; $dest
0627   0807 2A            mov b, [d]
0628   0808 38 00 00      mov c, 0
0629   080B FD AB         swp b
0630   080D D8            push b
0631   080E 07 DA 08      call strlen
0632   0811 51 02 00      add sp, 2
0633   0814             ; --- END FUNCTION CALL
0634   0814 E7            pop d
0635   0815 FD 43         mov [d], b
0636   0817             ; for (i = 0; src[i] != 0; i=i+1) { 
0637   0817             _for12_init:
0638   0817 FA FD FF      lea d, [bp + -3] ; $i
0639   081A DA            push d
0640   081B FD 2E 00 00   mov32 cb, $00000000
0640   081F 00 00 
0641   0821 E7            pop d
0642   0822 FD 43         mov [d], b
0643   0824             _for12_cond:
0644   0824 FA 07 00      lea d, [bp + 7] ; $src
0645   0827 FD 2A         mov d, [d]
0646   0829 D7            push a
0647   082A DA            push d
0648   082B FA FD FF      lea d, [bp + -3] ; $i
0649   082E 2A            mov b, [d]
0650   082F 38 00 00      mov c, 0
0651   0832 E7            pop d
0652   0833 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0653   0837 E4            pop a
0654   0838 32            mov bl, [d]
0655   0839 A7 00         mov bh, 0
0656   083B 38 00 00      mov c, 0
0657   083E             ; --- START RELATIONAL
0658   083E D7            push a
0659   083F 11            mov a, b
0660   0840 FD 2E 00 00   mov32 cb, $00000000
0660   0844 00 00 
0661   0846 B0            cmp a, b
0662   0847 FD 72         sneq ; !=
0663   0849 E4            pop a
0664   084A             ; --- END RELATIONAL
0665   084A C0 00 00      cmp b, 0
0666   084D C6 A8 08      je _for12_exit
0667   0850             _for12_block:
0668   0850             ; dest[dest_len + i] = src[i]; 
0669   0850 FA 05 00      lea d, [bp + 5] ; $dest
0670   0853 FD 2A         mov d, [d]
0671   0855 D7            push a
0672   0856 DA            push d
0673   0857 FA FF FF      lea d, [bp + -1] ; $dest_len
0674   085A 2A            mov b, [d]
0675   085B 38 00 00      mov c, 0
0676   085E             ; --- START TERMS
0677   085E D7            push a
0678   085F 11            mov a, b
0679   0860 FA FD FF      lea d, [bp + -3] ; $i
0680   0863 2A            mov b, [d]
0681   0864 38 00 00      mov c, 0
0682   0867 56            add b, a
0683   0868 E4            pop a
0684   0869             ; --- END TERMS
0685   0869 E7            pop d
0686   086A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0687   086E E4            pop a
0688   086F DA            push d
0689   0870 FA 07 00      lea d, [bp + 7] ; $src
0690   0873 FD 2A         mov d, [d]
0691   0875 D7            push a
0692   0876 DA            push d
0693   0877 FA FD FF      lea d, [bp + -3] ; $i
0694   087A 2A            mov b, [d]
0695   087B 38 00 00      mov c, 0
0696   087E E7            pop d
0697   087F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0698   0883 E4            pop a
0699   0884 32            mov bl, [d]
0700   0885 A7 00         mov bh, 0
0701   0887 38 00 00      mov c, 0
0702   088A E7            pop d
0703   088B FD 3E         mov [d], bl
0704   088D             _for12_update:
0705   088D FA FD FF      lea d, [bp + -3] ; $i
0706   0890 DA            push d
0707   0891 FA FD FF      lea d, [bp + -3] ; $i
0708   0894 2A            mov b, [d]
0709   0895 38 00 00      mov c, 0
0710   0898             ; --- START TERMS
0711   0898 D7            push a
0712   0899 11            mov a, b
0713   089A FD 2E 01 00   mov32 cb, $00000001
0713   089E 00 00 
0714   08A0 56            add b, a
0715   08A1 E4            pop a
0716   08A2             ; --- END TERMS
0717   08A2 E7            pop d
0718   08A3 FD 43         mov [d], b
0719   08A5 0A 24 08      jmp _for12_cond
0720   08A8             _for12_exit:
0721   08A8             ; dest[dest_len + i] = 0; 
0722   08A8 FA 05 00      lea d, [bp + 5] ; $dest
0723   08AB FD 2A         mov d, [d]
0724   08AD D7            push a
0725   08AE DA            push d
0726   08AF FA FF FF      lea d, [bp + -1] ; $dest_len
0727   08B2 2A            mov b, [d]
0728   08B3 38 00 00      mov c, 0
0729   08B6             ; --- START TERMS
0730   08B6 D7            push a
0731   08B7 11            mov a, b
0732   08B8 FA FD FF      lea d, [bp + -3] ; $i
0733   08BB 2A            mov b, [d]
0734   08BC 38 00 00      mov c, 0
0735   08BF 56            add b, a
0736   08C0 E4            pop a
0737   08C1             ; --- END TERMS
0738   08C1 E7            pop d
0739   08C2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0740   08C6 E4            pop a
0741   08C7 DA            push d
0742   08C8 FD 2E 00 00   mov32 cb, $00000000
0742   08CC 00 00 
0743   08CE E7            pop d
0744   08CF FD 3E         mov [d], bl
0745   08D1             ; return dest; 
0746   08D1 FA 05 00      lea d, [bp + 5] ; $dest
0747   08D4 2A            mov b, [d]
0748   08D5 38 00 00      mov c, 0
0749   08D8 F9            leave
0750   08D9 09            ret
0751   08DA             
0752   08DA             strlen:
0753   08DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0754   08DD             ; int length; 
0755   08DD 52 02 00      sub sp, 2
0756   08E0             ; length = 0; 
0757   08E0 FA FF FF      lea d, [bp + -1] ; $length
0758   08E3 DA            push d
0759   08E4 FD 2E 00 00   mov32 cb, $00000000
0759   08E8 00 00 
0760   08EA E7            pop d
0761   08EB FD 43         mov [d], b
0762   08ED             ; while (str[length] != 0) { 
0763   08ED             _while13_cond:
0764   08ED FA 05 00      lea d, [bp + 5] ; $str
0765   08F0 FD 2A         mov d, [d]
0766   08F2 D7            push a
0767   08F3 DA            push d
0768   08F4 FA FF FF      lea d, [bp + -1] ; $length
0769   08F7 2A            mov b, [d]
0770   08F8 38 00 00      mov c, 0
0771   08FB E7            pop d
0772   08FC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0773   0900 E4            pop a
0774   0901 32            mov bl, [d]
0775   0902 A7 00         mov bh, 0
0776   0904 38 00 00      mov c, 0
0777   0907             ; --- START RELATIONAL
0778   0907 D7            push a
0779   0908 11            mov a, b
0780   0909 FD 2E 00 00   mov32 cb, $00000000
0780   090D 00 00 
0781   090F B0            cmp a, b
0782   0910 FD 72         sneq ; !=
0783   0912 E4            pop a
0784   0913             ; --- END RELATIONAL
0785   0913 C0 00 00      cmp b, 0
0786   0916 C6 2C 09      je _while13_exit
0787   0919             _while13_block:
0788   0919             ; length++; 
0789   0919 FA FF FF      lea d, [bp + -1] ; $length
0790   091C 2A            mov b, [d]
0791   091D 38 00 00      mov c, 0
0792   0920 11            mov a, b
0793   0921 FD 77         inc b
0794   0923 FA FF FF      lea d, [bp + -1] ; $length
0795   0926 FD 43         mov [d], b
0796   0928 27            mov b, a
0797   0929 0A ED 08      jmp _while13_cond
0798   092C             _while13_exit:
0799   092C             ; return length; 
0800   092C FA FF FF      lea d, [bp + -1] ; $length
0801   092F 2A            mov b, [d]
0802   0930 38 00 00      mov c, 0
0803   0933 F9            leave
0804   0934 09            ret
0805   0935             
0806   0935             exit:
0807   0935 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0808   0938             
0809   0938             ; --- BEGIN INLINE ASM SEGMENT
0810   0938 05 0B         syscall sys_terminate_proc
0811   093A             ; --- END INLINE ASM SEGMENT
0812   093A             
0813   093A F9            leave
0814   093B 09            ret
0815   093C             
0816   093C             memset:
0817   093C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0818   093F             ; int i; 
0819   093F 52 02 00      sub sp, 2
0820   0942             ; for(i = 0; i < size; i++){ 
0821   0942             _for14_init:
0822   0942 FA FF FF      lea d, [bp + -1] ; $i
0823   0945 DA            push d
0824   0946 FD 2E 00 00   mov32 cb, $00000000
0824   094A 00 00 
0825   094C E7            pop d
0826   094D FD 43         mov [d], b
0827   094F             _for14_cond:
0828   094F FA FF FF      lea d, [bp + -1] ; $i
0829   0952 2A            mov b, [d]
0830   0953 38 00 00      mov c, 0
0831   0956             ; --- START RELATIONAL
0832   0956 D7            push a
0833   0957 11            mov a, b
0834   0958 FA 08 00      lea d, [bp + 8] ; $size
0835   095B 2A            mov b, [d]
0836   095C 38 00 00      mov c, 0
0837   095F B0            cmp a, b
0838   0960 FD 73         slt ; < (signed)
0839   0962 E4            pop a
0840   0963             ; --- END RELATIONAL
0841   0963 C0 00 00      cmp b, 0
0842   0966 C6 9B 09      je _for14_exit
0843   0969             _for14_block:
0844   0969             ; *(s+i) = c; 
0845   0969 FA 05 00      lea d, [bp + 5] ; $s
0846   096C 2A            mov b, [d]
0847   096D 38 00 00      mov c, 0
0848   0970             ; --- START TERMS
0849   0970 D7            push a
0850   0971 11            mov a, b
0851   0972 FA FF FF      lea d, [bp + -1] ; $i
0852   0975 2A            mov b, [d]
0853   0976 38 00 00      mov c, 0
0854   0979 56            add b, a
0855   097A E4            pop a
0856   097B             ; --- END TERMS
0857   097B D8            push b
0858   097C FA 07 00      lea d, [bp + 7] ; $c
0859   097F 32            mov bl, [d]
0860   0980 A7 00         mov bh, 0
0861   0982 38 00 00      mov c, 0
0862   0985 E7            pop d
0863   0986 FD 3E         mov [d], bl
0864   0988             _for14_update:
0865   0988 FA FF FF      lea d, [bp + -1] ; $i
0866   098B 2A            mov b, [d]
0867   098C 38 00 00      mov c, 0
0868   098F 11            mov a, b
0869   0990 FD 77         inc b
0870   0992 FA FF FF      lea d, [bp + -1] ; $i
0871   0995 FD 43         mov [d], b
0872   0997 27            mov b, a
0873   0998 0A 4F 09      jmp _for14_cond
0874   099B             _for14_exit:
0875   099B             ; return s; 
0876   099B FA 05 00      lea d, [bp + 5] ; $s
0877   099E 2A            mov b, [d]
0878   099F 38 00 00      mov c, 0
0879   09A2 F9            leave
0880   09A3 09            ret
0881   09A4             
0882   09A4             atoi:
0883   09A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0884   09A7             ; int result = 0;  // Initialize result 
0885   09A7 52 02 00      sub sp, 2
0886   09AA             ; --- START LOCAL VAR INITIALIZATION
0887   09AA FA FF FF      lea d, [bp + -1] ; $result
0888   09AD DA            push d
0889   09AE FD 2E 00 00   mov32 cb, $00000000
0889   09B2 00 00 
0890   09B4 E7            pop d
0891   09B5 FD 43         mov [d], b
0892   09B7             ; --- END LOCAL VAR INITIALIZATION
0893   09B7             ; int sign = 1;    // Initialize sign as positive 
0894   09B7 52 02 00      sub sp, 2
0895   09BA             ; --- START LOCAL VAR INITIALIZATION
0896   09BA FA FD FF      lea d, [bp + -3] ; $sign
0897   09BD DA            push d
0898   09BE FD 2E 01 00   mov32 cb, $00000001
0898   09C2 00 00 
0899   09C4 E7            pop d
0900   09C5 FD 43         mov [d], b
0901   09C7             ; --- END LOCAL VAR INITIALIZATION
0902   09C7             ; while (*str == ' ') str++; 
0903   09C7             _while15_cond:
0904   09C7 FA 05 00      lea d, [bp + 5] ; $str
0905   09CA 2A            mov b, [d]
0906   09CB 38 00 00      mov c, 0
0907   09CE 74            mov d, b
0908   09CF 32            mov bl, [d]
0909   09D0 A7 00         mov bh, 0
0910   09D2 38 00 00      mov c, 0
0911   09D5             ; --- START RELATIONAL
0912   09D5 D7            push a
0913   09D6 11            mov a, b
0914   09D7 FD 2E 20 00   mov32 cb, $00000020
0914   09DB 00 00 
0915   09DD B0            cmp a, b
0916   09DE FD 71         seq ; ==
0917   09E0 E4            pop a
0918   09E1             ; --- END RELATIONAL
0919   09E1 C0 00 00      cmp b, 0
0920   09E4 C6 FA 09      je _while15_exit
0921   09E7             _while15_block:
0922   09E7             ; str++; 
0923   09E7 FA 05 00      lea d, [bp + 5] ; $str
0924   09EA 2A            mov b, [d]
0925   09EB 38 00 00      mov c, 0
0926   09EE FD 77         inc b
0927   09F0 FA 05 00      lea d, [bp + 5] ; $str
0928   09F3 FD 43         mov [d], b
0929   09F5 FD 7D         dec b
0930   09F7 0A C7 09      jmp _while15_cond
0931   09FA             _while15_exit:
0932   09FA             ; if (*str == '-' || *str == '+') { 
0933   09FA             _if16_cond:
0934   09FA FA 05 00      lea d, [bp + 5] ; $str
0935   09FD 2A            mov b, [d]
0936   09FE 38 00 00      mov c, 0
0937   0A01 74            mov d, b
0938   0A02 32            mov bl, [d]
0939   0A03 A7 00         mov bh, 0
0940   0A05 38 00 00      mov c, 0
0941   0A08             ; --- START RELATIONAL
0942   0A08 D7            push a
0943   0A09 11            mov a, b
0944   0A0A FD 2E 2D 00   mov32 cb, $0000002d
0944   0A0E 00 00 
0945   0A10 B0            cmp a, b
0946   0A11 FD 71         seq ; ==
0947   0A13 E4            pop a
0948   0A14             ; --- END RELATIONAL
0949   0A14             ; --- START LOGICAL OR
0950   0A14 D7            push a
0951   0A15 11            mov a, b
0952   0A16 FA 05 00      lea d, [bp + 5] ; $str
0953   0A19 2A            mov b, [d]
0954   0A1A 38 00 00      mov c, 0
0955   0A1D 74            mov d, b
0956   0A1E 32            mov bl, [d]
0957   0A1F A7 00         mov bh, 0
0958   0A21 38 00 00      mov c, 0
0959   0A24             ; --- START RELATIONAL
0960   0A24 D7            push a
0961   0A25 11            mov a, b
0962   0A26 FD 2E 2B 00   mov32 cb, $0000002b
0962   0A2A 00 00 
0963   0A2C B0            cmp a, b
0964   0A2D FD 71         seq ; ==
0965   0A2F E4            pop a
0966   0A30             ; --- END RELATIONAL
0967   0A30 FD A8         sor a, b ; ||
0968   0A32 E4            pop a
0969   0A33             ; --- END LOGICAL OR
0970   0A33 C0 00 00      cmp b, 0
0971   0A36 C6 7E 0A      je _if16_exit
0972   0A39             _if16_TRUE:
0973   0A39             ; if (*str == '-') sign = -1; 
0974   0A39             _if17_cond:
0975   0A39 FA 05 00      lea d, [bp + 5] ; $str
0976   0A3C 2A            mov b, [d]
0977   0A3D 38 00 00      mov c, 0
0978   0A40 74            mov d, b
0979   0A41 32            mov bl, [d]
0980   0A42 A7 00         mov bh, 0
0981   0A44 38 00 00      mov c, 0
0982   0A47             ; --- START RELATIONAL
0983   0A47 D7            push a
0984   0A48 11            mov a, b
0985   0A49 FD 2E 2D 00   mov32 cb, $0000002d
0985   0A4D 00 00 
0986   0A4F B0            cmp a, b
0987   0A50 FD 71         seq ; ==
0988   0A52 E4            pop a
0989   0A53             ; --- END RELATIONAL
0990   0A53 C0 00 00      cmp b, 0
0991   0A56 C6 6B 0A      je _if17_exit
0992   0A59             _if17_TRUE:
0993   0A59             ; sign = -1; 
0994   0A59 FA FD FF      lea d, [bp + -3] ; $sign
0995   0A5C DA            push d
0996   0A5D FD 2E 01 00   mov32 cb, $00000001
0996   0A61 00 00 
0997   0A63 FD 97         neg b
0998   0A65 E7            pop d
0999   0A66 FD 43         mov [d], b
1000   0A68 0A 6B 0A      jmp _if17_exit
1001   0A6B             _if17_exit:
1002   0A6B             ; str++; 
1003   0A6B FA 05 00      lea d, [bp + 5] ; $str
1004   0A6E 2A            mov b, [d]
1005   0A6F 38 00 00      mov c, 0
1006   0A72 FD 77         inc b
1007   0A74 FA 05 00      lea d, [bp + 5] ; $str
1008   0A77 FD 43         mov [d], b
1009   0A79 FD 7D         dec b
1010   0A7B 0A 7E 0A      jmp _if16_exit
1011   0A7E             _if16_exit:
1012   0A7E             ; while (*str >= '0' && *str <= '9') { 
1013   0A7E             _while18_cond:
1014   0A7E FA 05 00      lea d, [bp + 5] ; $str
1015   0A81 2A            mov b, [d]
1016   0A82 38 00 00      mov c, 0
1017   0A85 74            mov d, b
1018   0A86 32            mov bl, [d]
1019   0A87 A7 00         mov bh, 0
1020   0A89 38 00 00      mov c, 0
1021   0A8C             ; --- START RELATIONAL
1022   0A8C D7            push a
1023   0A8D 11            mov a, b
1024   0A8E FD 2E 30 00   mov32 cb, $00000030
1024   0A92 00 00 
1025   0A94 B0            cmp a, b
1026   0A95 FD 82         sgeu ; >= (unsigned)
1027   0A97 E4            pop a
1028   0A98             ; --- END RELATIONAL
1029   0A98             ; --- START LOGICAL AND
1030   0A98 D7            push a
1031   0A99 11            mov a, b
1032   0A9A FA 05 00      lea d, [bp + 5] ; $str
1033   0A9D 2A            mov b, [d]
1034   0A9E 38 00 00      mov c, 0
1035   0AA1 74            mov d, b
1036   0AA2 32            mov bl, [d]
1037   0AA3 A7 00         mov bh, 0
1038   0AA5 38 00 00      mov c, 0
1039   0AA8             ; --- START RELATIONAL
1040   0AA8 D7            push a
1041   0AA9 11            mov a, b
1042   0AAA FD 2E 39 00   mov32 cb, $00000039
1042   0AAE 00 00 
1043   0AB0 B0            cmp a, b
1044   0AB1 FD 76         sleu ; <= (unsigned)
1045   0AB3 E4            pop a
1046   0AB4             ; --- END RELATIONAL
1047   0AB4 FD A7         sand a, b
1048   0AB6 E4            pop a
1049   0AB7             ; --- END LOGICAL AND
1050   0AB7 C0 00 00      cmp b, 0
1051   0ABA C6 07 0B      je _while18_exit
1052   0ABD             _while18_block:
1053   0ABD             ; result = result * 10 + (*str - '0'); 
1054   0ABD FA FF FF      lea d, [bp + -1] ; $result
1055   0AC0 DA            push d
1056   0AC1 FA FF FF      lea d, [bp + -1] ; $result
1057   0AC4 2A            mov b, [d]
1058   0AC5 38 00 00      mov c, 0
1059   0AC8             ; --- START FACTORS
1060   0AC8 D7            push a
1061   0AC9 11            mov a, b
1062   0ACA FD 2E 0A 00   mov32 cb, $0000000a
1062   0ACE 00 00 
1063   0AD0 AC            mul a, b ; *
1064   0AD1 11            mov a, b
1065   0AD2 27            mov b, a
1066   0AD3 E4            pop a
1067   0AD4             ; --- END FACTORS
1068   0AD4             ; --- START TERMS
1069   0AD4 D7            push a
1070   0AD5 11            mov a, b
1071   0AD6 FA 05 00      lea d, [bp + 5] ; $str
1072   0AD9 2A            mov b, [d]
1073   0ADA 38 00 00      mov c, 0
1074   0ADD 74            mov d, b
1075   0ADE 32            mov bl, [d]
1076   0ADF A7 00         mov bh, 0
1077   0AE1 38 00 00      mov c, 0
1078   0AE4             ; --- START TERMS
1079   0AE4 D7            push a
1080   0AE5 11            mov a, b
1081   0AE6 FD 2E 30 00   mov32 cb, $00000030
1081   0AEA 00 00 
1082   0AEC 60            sub a, b
1083   0AED 27            mov b, a
1084   0AEE E4            pop a
1085   0AEF             ; --- END TERMS
1086   0AEF 56            add b, a
1087   0AF0 E4            pop a
1088   0AF1             ; --- END TERMS
1089   0AF1 E7            pop d
1090   0AF2 FD 43         mov [d], b
1091   0AF4             ; str++; 
1092   0AF4 FA 05 00      lea d, [bp + 5] ; $str
1093   0AF7 2A            mov b, [d]
1094   0AF8 38 00 00      mov c, 0
1095   0AFB FD 77         inc b
1096   0AFD FA 05 00      lea d, [bp + 5] ; $str
1097   0B00 FD 43         mov [d], b
1098   0B02 FD 7D         dec b
1099   0B04 0A 7E 0A      jmp _while18_cond
1100   0B07             _while18_exit:
1101   0B07             ; return sign * result; 
1102   0B07 FA FD FF      lea d, [bp + -3] ; $sign
1103   0B0A 2A            mov b, [d]
1104   0B0B 38 00 00      mov c, 0
1105   0B0E             ; --- START FACTORS
1106   0B0E D7            push a
1107   0B0F 11            mov a, b
1108   0B10 FA FF FF      lea d, [bp + -1] ; $result
1109   0B13 2A            mov b, [d]
1110   0B14 38 00 00      mov c, 0
1111   0B17 AC            mul a, b ; *
1112   0B18 11            mov a, b
1113   0B19 27            mov b, a
1114   0B1A E4            pop a
1115   0B1B             ; --- END FACTORS
1116   0B1B F9            leave
1117   0B1C 09            ret
1118   0B1D             
1119   0B1D             rand:
1120   0B1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1121   0B20             ; int  sec; 
1122   0B20 52 02 00      sub sp, 2
1123   0B23             
1124   0B23             ; --- BEGIN INLINE ASM SEGMENT
1125   0B23 19 00         mov al, 0
1126   0B25 05 01         syscall sys_rtc					
1127   0B27 1A            mov al, ah
1128   0B28 FA FF FF      lea d, [bp + -1] ; $sec
1129   0B2B 1E            mov al, [d]
1130   0B2C 22 00         mov ah, 0
1131   0B2E             ; --- END INLINE ASM SEGMENT
1132   0B2E             
1133   0B2E             ; return sec; 
1134   0B2E FA FF FF      lea d, [bp + -1] ; $sec
1135   0B31 2A            mov b, [d]
1136   0B32 38 00 00      mov c, 0
1137   0B35 F9            leave
1138   0B36 09            ret
1139   0B37             
1140   0B37             alloc:
1141   0B37 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1142   0B3A             ; heap_top = heap_top + bytes; 
1143   0B3A 3B F3 31      mov d, _heap_top ; $heap_top
1144   0B3D DA            push d
1145   0B3E 3B F3 31      mov d, _heap_top ; $heap_top
1146   0B41 2A            mov b, [d]
1147   0B42 38 00 00      mov c, 0
1148   0B45             ; --- START TERMS
1149   0B45 D7            push a
1150   0B46 11            mov a, b
1151   0B47 FA 05 00      lea d, [bp + 5] ; $bytes
1152   0B4A 2A            mov b, [d]
1153   0B4B 38 00 00      mov c, 0
1154   0B4E 56            add b, a
1155   0B4F E4            pop a
1156   0B50             ; --- END TERMS
1157   0B50 E7            pop d
1158   0B51 FD 43         mov [d], b
1159   0B53             ; return heap_top - bytes; 
1160   0B53 3B F3 31      mov d, _heap_top ; $heap_top
1161   0B56 2A            mov b, [d]
1162   0B57 38 00 00      mov c, 0
1163   0B5A             ; --- START TERMS
1164   0B5A D7            push a
1165   0B5B 11            mov a, b
1166   0B5C FA 05 00      lea d, [bp + 5] ; $bytes
1167   0B5F 2A            mov b, [d]
1168   0B60 38 00 00      mov c, 0
1169   0B63 60            sub a, b
1170   0B64 27            mov b, a
1171   0B65 E4            pop a
1172   0B66             ; --- END TERMS
1173   0B66 F9            leave
1174   0B67 09            ret
1175   0B68             
1176   0B68             free:
1177   0B68 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1178   0B6B             ; return heap_top = heap_top - bytes; 
1179   0B6B 3B F3 31      mov d, _heap_top ; $heap_top
1180   0B6E DA            push d
1181   0B6F 3B F3 31      mov d, _heap_top ; $heap_top
1182   0B72 2A            mov b, [d]
1183   0B73 38 00 00      mov c, 0
1184   0B76             ; --- START TERMS
1185   0B76 D7            push a
1186   0B77 11            mov a, b
1187   0B78 FA 05 00      lea d, [bp + 5] ; $bytes
1188   0B7B 2A            mov b, [d]
1189   0B7C 38 00 00      mov c, 0
1190   0B7F 60            sub a, b
1191   0B80 27            mov b, a
1192   0B81 E4            pop a
1193   0B82             ; --- END TERMS
1194   0B82 E7            pop d
1195   0B83 FD 43         mov [d], b
1196   0B85 F9            leave
1197   0B86 09            ret
1198   0B87             
1199   0B87             fopen:
1200   0B87 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1201   0B8A             ; FILE *fp; 
1202   0B8A 52 02 00      sub sp, 2
1203   0B8D             ; static int max_handle = 0; 
1204   0B8D 52 02 00      sub sp, 2
1205   0B90             ; fp = alloc(sizeof(FILE)); 
1206   0B90 FA FF FF      lea d, [bp + -1] ; $fp
1207   0B93 DA            push d
1208   0B94             ; --- START FUNCTION CALL
1209   0B94 FD 2E 04 01   mov32 cb, 260
1209   0B98 00 00 
1210   0B9A FD AB         swp b
1211   0B9C D8            push b
1212   0B9D 07 37 0B      call alloc
1213   0BA0 51 02 00      add sp, 2
1214   0BA3             ; --- END FUNCTION CALL
1215   0BA3 E7            pop d
1216   0BA4 FD 43         mov [d], b
1217   0BA6             ; strcpy(fp->filename, filename); 
1218   0BA6             ; --- START FUNCTION CALL
1219   0BA6 FA 05 00      lea d, [bp + 5] ; $filename
1220   0BA9 2A            mov b, [d]
1221   0BAA 38 00 00      mov c, 0
1222   0BAD FD AB         swp b
1223   0BAF D8            push b
1224   0BB0 FA FF FF      lea d, [bp + -1] ; $fp
1225   0BB3 FD 2A         mov d, [d]
1226   0BB5 58 02 00      add d, 2
1227   0BB8 2D            mov b, d
1228   0BB9 38 00 00      mov c, 0
1229   0BBC FD AB         swp b
1230   0BBE D8            push b
1231   0BBF 07 F4 06      call strcpy
1232   0BC2 51 04 00      add sp, 4
1233   0BC5             ; --- END FUNCTION CALL
1234   0BC5             ; fp->handle = max_handle; 
1235   0BC5 FA FF FF      lea d, [bp + -1] ; $fp
1236   0BC8 FD 2A         mov d, [d]
1237   0BCA 58 00 00      add d, 0
1238   0BCD DA            push d
1239   0BCE 3B 8D 31      mov d, st_fopen_max_handle ; static max_handle
1240   0BD1 2A            mov b, [d]
1241   0BD2 38 00 00      mov c, 0
1242   0BD5 E7            pop d
1243   0BD6 FD 43         mov [d], b
1244   0BD8             ; fp->mode = mode; 
1245   0BD8 FA FF FF      lea d, [bp + -1] ; $fp
1246   0BDB FD 2A         mov d, [d]
1247   0BDD 58 02 01      add d, 258
1248   0BE0 DA            push d
1249   0BE1 FA 07 00      lea d, [bp + 7] ; $mode
1250   0BE4 32            mov bl, [d]
1251   0BE5 A7 00         mov bh, 0
1252   0BE7 38 00 00      mov c, 0
1253   0BEA E7            pop d
1254   0BEB FD 3E         mov [d], bl
1255   0BED             ; fp->loc = 0; 
1256   0BED FA FF FF      lea d, [bp + -1] ; $fp
1257   0BF0 FD 2A         mov d, [d]
1258   0BF2 58 03 01      add d, 259
1259   0BF5 DA            push d
1260   0BF6 FD 2E 00 00   mov32 cb, $00000000
1260   0BFA 00 00 
1261   0BFC E7            pop d
1262   0BFD FD 3E         mov [d], bl
1263   0BFF             ; max_handle++; 
1264   0BFF 3B 8D 31      mov d, st_fopen_max_handle ; static max_handle
1265   0C02 2A            mov b, [d]
1266   0C03 38 00 00      mov c, 0
1267   0C06 11            mov a, b
1268   0C07 FD 77         inc b
1269   0C09 3B 8D 31      mov d, st_fopen_max_handle ; static max_handle
1270   0C0C FD 43         mov [d], b
1271   0C0E 27            mov b, a
1272   0C0F F9            leave
1273   0C10 09            ret
1274   0C11             
1275   0C11             fclose:
1276   0C11 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1277   0C14             ; free(sizeof(FILE)); 
1278   0C14             ; --- START FUNCTION CALL
1279   0C14 FD 2E 04 01   mov32 cb, 260
1279   0C18 00 00 
1280   0C1A FD AB         swp b
1281   0C1C D8            push b
1282   0C1D 07 68 0B      call free
1283   0C20 51 02 00      add sp, 2
1284   0C23             ; --- END FUNCTION CALL
1285   0C23 F9            leave
1286   0C24 09            ret
1287   0C25             
1288   0C25             printf:
1289   0C25 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1290   0C28             ; char *p, *format_p; 
1291   0C28 52 02 00      sub sp, 2
1292   0C2B 52 02 00      sub sp, 2
1293   0C2E             ; format_p = format; 
1294   0C2E FA FD FF      lea d, [bp + -3] ; $format_p
1295   0C31 DA            push d
1296   0C32 FA 05 00      lea d, [bp + 5] ; $format
1297   0C35 2A            mov b, [d]
1298   0C36 38 00 00      mov c, 0
1299   0C39 E7            pop d
1300   0C3A FD 43         mov [d], b
1301   0C3C             ; p = &format + 2; 
1302   0C3C FA FF FF      lea d, [bp + -1] ; $p
1303   0C3F DA            push d
1304   0C40 FA 05 00      lea d, [bp + 5] ; $format
1305   0C43 2D            mov b, d
1306   0C44             ; --- START TERMS
1307   0C44 D7            push a
1308   0C45 11            mov a, b
1309   0C46 FD 2E 02 00   mov32 cb, $00000002
1309   0C4A 00 00 
1310   0C4C 56            add b, a
1311   0C4D E4            pop a
1312   0C4E             ; --- END TERMS
1313   0C4E E7            pop d
1314   0C4F FD 43         mov [d], b
1315   0C51             ; for(;;){ 
1316   0C51             _for19_init:
1317   0C51             _for19_cond:
1318   0C51             _for19_block:
1319   0C51             ; if(!*format_p) break; 
1320   0C51             _if20_cond:
1321   0C51 FA FD FF      lea d, [bp + -3] ; $format_p
1322   0C54 2A            mov b, [d]
1323   0C55 38 00 00      mov c, 0
1324   0C58 74            mov d, b
1325   0C59 32            mov bl, [d]
1326   0C5A A7 00         mov bh, 0
1327   0C5C 38 00 00      mov c, 0
1328   0C5F C0 00 00      cmp b, 0
1329   0C62 FD 71         seq ; !
1330   0C64 C0 00 00      cmp b, 0
1331   0C67 C6 70 0C      je _if20_else
1332   0C6A             _if20_TRUE:
1333   0C6A             ; break; 
1334   0C6A 0A 01 0F      jmp _for19_exit ; for break
1335   0C6D 0A FE 0E      jmp _if20_exit
1336   0C70             _if20_else:
1337   0C70             ; if(*format_p == '%'){ 
1338   0C70             _if21_cond:
1339   0C70 FA FD FF      lea d, [bp + -3] ; $format_p
1340   0C73 2A            mov b, [d]
1341   0C74 38 00 00      mov c, 0
1342   0C77 74            mov d, b
1343   0C78 32            mov bl, [d]
1344   0C79 A7 00         mov bh, 0
1345   0C7B 38 00 00      mov c, 0
1346   0C7E             ; --- START RELATIONAL
1347   0C7E D7            push a
1348   0C7F 11            mov a, b
1349   0C80 FD 2E 25 00   mov32 cb, $00000025
1349   0C84 00 00 
1350   0C86 B0            cmp a, b
1351   0C87 FD 71         seq ; ==
1352   0C89 E4            pop a
1353   0C8A             ; --- END RELATIONAL
1354   0C8A C0 00 00      cmp b, 0
1355   0C8D C6 D9 0E      je _if21_else
1356   0C90             _if21_TRUE:
1357   0C90             ; format_p++; 
1358   0C90 FA FD FF      lea d, [bp + -3] ; $format_p
1359   0C93 2A            mov b, [d]
1360   0C94 38 00 00      mov c, 0
1361   0C97 FD 77         inc b
1362   0C99 FA FD FF      lea d, [bp + -3] ; $format_p
1363   0C9C FD 43         mov [d], b
1364   0C9E FD 7D         dec b
1365   0CA0             ; switch(*format_p){ 
1366   0CA0             _switch22_expr:
1367   0CA0 FA FD FF      lea d, [bp + -3] ; $format_p
1368   0CA3 2A            mov b, [d]
1369   0CA4 38 00 00      mov c, 0
1370   0CA7 74            mov d, b
1371   0CA8 32            mov bl, [d]
1372   0CA9 A7 00         mov bh, 0
1373   0CAB 38 00 00      mov c, 0
1374   0CAE             _switch22_comparisons:
1375   0CAE C1 6C         cmp bl, $6c
1376   0CB0 C6 DC 0C      je _switch22_case0
1377   0CB3 C1 4C         cmp bl, $4c
1378   0CB5 C6 DC 0C      je _switch22_case1
1379   0CB8 C1 64         cmp bl, $64
1380   0CBA C6 EC 0D      je _switch22_case2
1381   0CBD C1 69         cmp bl, $69
1382   0CBF C6 EC 0D      je _switch22_case3
1383   0CC2 C1 75         cmp bl, $75
1384   0CC4 C6 1C 0E      je _switch22_case4
1385   0CC7 C1 78         cmp bl, $78
1386   0CC9 C6 4C 0E      je _switch22_case5
1387   0CCC C1 63         cmp bl, $63
1388   0CCE C6 70 0E      je _switch22_case6
1389   0CD1 C1 73         cmp bl, $73
1390   0CD3 C6 95 0E      je _switch22_case7
1391   0CD6 0A BA 0E      jmp _switch22_default
1392   0CD9 0A C6 0E      jmp _switch22_exit
1393   0CDC             _switch22_case0:
1394   0CDC             _switch22_case1:
1395   0CDC             ; format_p++; 
1396   0CDC FA FD FF      lea d, [bp + -3] ; $format_p
1397   0CDF 2A            mov b, [d]
1398   0CE0 38 00 00      mov c, 0
1399   0CE3 FD 77         inc b
1400   0CE5 FA FD FF      lea d, [bp + -3] ; $format_p
1401   0CE8 FD 43         mov [d], b
1402   0CEA FD 7D         dec b
1403   0CEC             ; if(*format_p == 'd' || *format_p == 'i') 
1404   0CEC             _if23_cond:
1405   0CEC FA FD FF      lea d, [bp + -3] ; $format_p
1406   0CEF 2A            mov b, [d]
1407   0CF0 38 00 00      mov c, 0
1408   0CF3 74            mov d, b
1409   0CF4 32            mov bl, [d]
1410   0CF5 A7 00         mov bh, 0
1411   0CF7 38 00 00      mov c, 0
1412   0CFA             ; --- START RELATIONAL
1413   0CFA D7            push a
1414   0CFB 11            mov a, b
1415   0CFC FD 2E 64 00   mov32 cb, $00000064
1415   0D00 00 00 
1416   0D02 B0            cmp a, b
1417   0D03 FD 71         seq ; ==
1418   0D05 E4            pop a
1419   0D06             ; --- END RELATIONAL
1420   0D06             ; --- START LOGICAL OR
1421   0D06 D7            push a
1422   0D07 11            mov a, b
1423   0D08 FA FD FF      lea d, [bp + -3] ; $format_p
1424   0D0B 2A            mov b, [d]
1425   0D0C 38 00 00      mov c, 0
1426   0D0F 74            mov d, b
1427   0D10 32            mov bl, [d]
1428   0D11 A7 00         mov bh, 0
1429   0D13 38 00 00      mov c, 0
1430   0D16             ; --- START RELATIONAL
1431   0D16 D7            push a
1432   0D17 11            mov a, b
1433   0D18 FD 2E 69 00   mov32 cb, $00000069
1433   0D1C 00 00 
1434   0D1E B0            cmp a, b
1435   0D1F FD 71         seq ; ==
1436   0D21 E4            pop a
1437   0D22             ; --- END RELATIONAL
1438   0D22 FD A8         sor a, b ; ||
1439   0D24 E4            pop a
1440   0D25             ; --- END LOGICAL OR
1441   0D25 C0 00 00      cmp b, 0
1442   0D28 C6 49 0D      je _if23_else
1443   0D2B             _if23_TRUE:
1444   0D2B             ; print_signed_long(*(long *)p); 
1445   0D2B             ; --- START FUNCTION CALL
1446   0D2B FA FF FF      lea d, [bp + -1] ; $p
1447   0D2E 2A            mov b, [d]
1448   0D2F 38 00 00      mov c, 0
1449   0D32 74            mov d, b
1450   0D33 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1451   0D36 FD 39         mov c, b ; And place it into C
1452   0D38 2A            mov b, [d] ; Lower Word in B
1453   0D39 12            mov a, c
1454   0D3A FD AA         swp a
1455   0D3C D7            push a
1456   0D3D FD AB         swp b
1457   0D3F D8            push b
1458   0D40 07 D3 18      call print_signed_long
1459   0D43 51 04 00      add sp, 4
1460   0D46             ; --- END FUNCTION CALL
1461   0D46 0A D1 0D      jmp _if23_exit
1462   0D49             _if23_else:
1463   0D49             ; if(*format_p == 'u') 
1464   0D49             _if24_cond:
1465   0D49 FA FD FF      lea d, [bp + -3] ; $format_p
1466   0D4C 2A            mov b, [d]
1467   0D4D 38 00 00      mov c, 0
1468   0D50 74            mov d, b
1469   0D51 32            mov bl, [d]
1470   0D52 A7 00         mov bh, 0
1471   0D54 38 00 00      mov c, 0
1472   0D57             ; --- START RELATIONAL
1473   0D57 D7            push a
1474   0D58 11            mov a, b
1475   0D59 FD 2E 75 00   mov32 cb, $00000075
1475   0D5D 00 00 
1476   0D5F B0            cmp a, b
1477   0D60 FD 71         seq ; ==
1478   0D62 E4            pop a
1479   0D63             ; --- END RELATIONAL
1480   0D63 C0 00 00      cmp b, 0
1481   0D66 C6 87 0D      je _if24_else
1482   0D69             _if24_TRUE:
1483   0D69             ; print_unsigned_long(*(unsigned long *)p); 
1484   0D69             ; --- START FUNCTION CALL
1485   0D69 FA FF FF      lea d, [bp + -1] ; $p
1486   0D6C 2A            mov b, [d]
1487   0D6D 38 00 00      mov c, 0
1488   0D70 74            mov d, b
1489   0D71 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1490   0D74 FD 39         mov c, b ; And place it into C
1491   0D76 2A            mov b, [d] ; Lower Word in B
1492   0D77 12            mov a, c
1493   0D78 FD AA         swp a
1494   0D7A D7            push a
1495   0D7B FD AB         swp b
1496   0D7D D8            push b
1497   0D7E 07 42 1A      call print_unsigned_long
1498   0D81 51 04 00      add sp, 4
1499   0D84             ; --- END FUNCTION CALL
1500   0D84 0A D1 0D      jmp _if24_exit
1501   0D87             _if24_else:
1502   0D87             ; if(*format_p == 'x') 
1503   0D87             _if25_cond:
1504   0D87 FA FD FF      lea d, [bp + -3] ; $format_p
1505   0D8A 2A            mov b, [d]
1506   0D8B 38 00 00      mov c, 0
1507   0D8E 74            mov d, b
1508   0D8F 32            mov bl, [d]
1509   0D90 A7 00         mov bh, 0
1510   0D92 38 00 00      mov c, 0
1511   0D95             ; --- START RELATIONAL
1512   0D95 D7            push a
1513   0D96 11            mov a, b
1514   0D97 FD 2E 78 00   mov32 cb, $00000078
1514   0D9B 00 00 
1515   0D9D B0            cmp a, b
1516   0D9E FD 71         seq ; ==
1517   0DA0 E4            pop a
1518   0DA1             ; --- END RELATIONAL
1519   0DA1 C0 00 00      cmp b, 0
1520   0DA4 C6 C5 0D      je _if25_else
1521   0DA7             _if25_TRUE:
1522   0DA7             ; printx32(*(long int *)p); 
1523   0DA7             ; --- START FUNCTION CALL
1524   0DA7 FA FF FF      lea d, [bp + -1] ; $p
1525   0DAA 2A            mov b, [d]
1526   0DAB 38 00 00      mov c, 0
1527   0DAE 74            mov d, b
1528   0DAF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1529   0DB2 FD 39         mov c, b ; And place it into C
1530   0DB4 2A            mov b, [d] ; Lower Word in B
1531   0DB5 12            mov a, c
1532   0DB6 FD AA         swp a
1533   0DB8 D7            push a
1534   0DB9 FD AB         swp b
1535   0DBB D8            push b
1536   0DBC 07 A6 15      call printx32
1537   0DBF 51 04 00      add sp, 4
1538   0DC2             ; --- END FUNCTION CALL
1539   0DC2 0A D1 0D      jmp _if25_exit
1540   0DC5             _if25_else:
1541   0DC5             ; err("Unexpected format in printf."); 
1542   0DC5             ; --- START FUNCTION CALL
1543   0DC5 26 A9 31      mov b, _s1 ; "Unexpected format in printf."
1544   0DC8 FD AB         swp b
1545   0DCA D8            push b
1546   0DCB 07 91 15      call err
1547   0DCE 51 02 00      add sp, 2
1548   0DD1             ; --- END FUNCTION CALL
1549   0DD1             _if25_exit:
1550   0DD1             _if24_exit:
1551   0DD1             _if23_exit:
1552   0DD1             ; p = p + 4; 
1553   0DD1 FA FF FF      lea d, [bp + -1] ; $p
1554   0DD4 DA            push d
1555   0DD5 FA FF FF      lea d, [bp + -1] ; $p
1556   0DD8 2A            mov b, [d]
1557   0DD9 38 00 00      mov c, 0
1558   0DDC             ; --- START TERMS
1559   0DDC D7            push a
1560   0DDD 11            mov a, b
1561   0DDE FD 2E 04 00   mov32 cb, $00000004
1561   0DE2 00 00 
1562   0DE4 56            add b, a
1563   0DE5 E4            pop a
1564   0DE6             ; --- END TERMS
1565   0DE6 E7            pop d
1566   0DE7 FD 43         mov [d], b
1567   0DE9             ; break; 
1568   0DE9 0A C6 0E      jmp _switch22_exit ; case break
1569   0DEC             _switch22_case2:
1570   0DEC             _switch22_case3:
1571   0DEC             ; print_signed(*(int*)p); 
1572   0DEC             ; --- START FUNCTION CALL
1573   0DEC FA FF FF      lea d, [bp + -1] ; $p
1574   0DEF 2A            mov b, [d]
1575   0DF0 38 00 00      mov c, 0
1576   0DF3 74            mov d, b
1577   0DF4 2A            mov b, [d]
1578   0DF5 38 00 00      mov c, 0
1579   0DF8 FD AB         swp b
1580   0DFA D8            push b
1581   0DFB 07 9A 17      call print_signed
1582   0DFE 51 02 00      add sp, 2
1583   0E01             ; --- END FUNCTION CALL
1584   0E01             ; p = p + 2; 
1585   0E01 FA FF FF      lea d, [bp + -1] ; $p
1586   0E04 DA            push d
1587   0E05 FA FF FF      lea d, [bp + -1] ; $p
1588   0E08 2A            mov b, [d]
1589   0E09 38 00 00      mov c, 0
1590   0E0C             ; --- START TERMS
1591   0E0C D7            push a
1592   0E0D 11            mov a, b
1593   0E0E FD 2E 02 00   mov32 cb, $00000002
1593   0E12 00 00 
1594   0E14 56            add b, a
1595   0E15 E4            pop a
1596   0E16             ; --- END TERMS
1597   0E16 E7            pop d
1598   0E17 FD 43         mov [d], b
1599   0E19             ; break; 
1600   0E19 0A C6 0E      jmp _switch22_exit ; case break
1601   0E1C             _switch22_case4:
1602   0E1C             ; print_unsigned(*(unsigned int*)p); 
1603   0E1C             ; --- START FUNCTION CALL
1604   0E1C FA FF FF      lea d, [bp + -1] ; $p
1605   0E1F 2A            mov b, [d]
1606   0E20 38 00 00      mov c, 0
1607   0E23 74            mov d, b
1608   0E24 2A            mov b, [d]
1609   0E25 38 00 00      mov c, 0
1610   0E28 FD AB         swp b
1611   0E2A D8            push b
1612   0E2B 07 B6 1C      call print_unsigned
1613   0E2E 51 02 00      add sp, 2
1614   0E31             ; --- END FUNCTION CALL
1615   0E31             ; p = p + 2; 
1616   0E31 FA FF FF      lea d, [bp + -1] ; $p
1617   0E34 DA            push d
1618   0E35 FA FF FF      lea d, [bp + -1] ; $p
1619   0E38 2A            mov b, [d]
1620   0E39 38 00 00      mov c, 0
1621   0E3C             ; --- START TERMS
1622   0E3C D7            push a
1623   0E3D 11            mov a, b
1624   0E3E FD 2E 02 00   mov32 cb, $00000002
1624   0E42 00 00 
1625   0E44 56            add b, a
1626   0E45 E4            pop a
1627   0E46             ; --- END TERMS
1628   0E46 E7            pop d
1629   0E47 FD 43         mov [d], b
1630   0E49             ; break; 
1631   0E49 0A C6 0E      jmp _switch22_exit ; case break
1632   0E4C             _switch22_case5:
1633   0E4C             
1634   0E4C             ; --- BEGIN INLINE ASM SEGMENT
1635   0E4C FA FF FF      lea d, [bp + -1] ; $p
1636   0E4F FD 2A         mov d, [d]
1637   0E51 2A            mov b, [d]
1638   0E52 07 2F 23      call print_u16x
1639   0E55             ; --- END INLINE ASM SEGMENT
1640   0E55             
1641   0E55             ; p = p + 2; 
1642   0E55 FA FF FF      lea d, [bp + -1] ; $p
1643   0E58 DA            push d
1644   0E59 FA FF FF      lea d, [bp + -1] ; $p
1645   0E5C 2A            mov b, [d]
1646   0E5D 38 00 00      mov c, 0
1647   0E60             ; --- START TERMS
1648   0E60 D7            push a
1649   0E61 11            mov a, b
1650   0E62 FD 2E 02 00   mov32 cb, $00000002
1650   0E66 00 00 
1651   0E68 56            add b, a
1652   0E69 E4            pop a
1653   0E6A             ; --- END TERMS
1654   0E6A E7            pop d
1655   0E6B FD 43         mov [d], b
1656   0E6D             ; break; 
1657   0E6D 0A C6 0E      jmp _switch22_exit ; case break
1658   0E70             _switch22_case6:
1659   0E70             
1660   0E70             ; --- BEGIN INLINE ASM SEGMENT
1661   0E70 FA FF FF      lea d, [bp + -1] ; $p
1662   0E73 FD 2A         mov d, [d]
1663   0E75 1E            mov al, [d]
1664   0E76 23            mov ah, al
1665   0E77 07 8D 21      call _putchar
1666   0E7A             ; --- END INLINE ASM SEGMENT
1667   0E7A             
1668   0E7A             ; p = p + 1; 
1669   0E7A FA FF FF      lea d, [bp + -1] ; $p
1670   0E7D DA            push d
1671   0E7E FA FF FF      lea d, [bp + -1] ; $p
1672   0E81 2A            mov b, [d]
1673   0E82 38 00 00      mov c, 0
1674   0E85             ; --- START TERMS
1675   0E85 D7            push a
1676   0E86 11            mov a, b
1677   0E87 FD 2E 01 00   mov32 cb, $00000001
1677   0E8B 00 00 
1678   0E8D 56            add b, a
1679   0E8E E4            pop a
1680   0E8F             ; --- END TERMS
1681   0E8F E7            pop d
1682   0E90 FD 43         mov [d], b
1683   0E92             ; break; 
1684   0E92 0A C6 0E      jmp _switch22_exit ; case break
1685   0E95             _switch22_case7:
1686   0E95             
1687   0E95             ; --- BEGIN INLINE ASM SEGMENT
1688   0E95 FA FF FF      lea d, [bp + -1] ; $p
1689   0E98 FD 2A         mov d, [d]
1690   0E9A FD 2A         mov d, [d]
1691   0E9C 07 D7 22      call _puts
1692   0E9F             ; --- END INLINE ASM SEGMENT
1693   0E9F             
1694   0E9F             ; p = p + 2; 
1695   0E9F FA FF FF      lea d, [bp + -1] ; $p
1696   0EA2 DA            push d
1697   0EA3 FA FF FF      lea d, [bp + -1] ; $p
1698   0EA6 2A            mov b, [d]
1699   0EA7 38 00 00      mov c, 0
1700   0EAA             ; --- START TERMS
1701   0EAA D7            push a
1702   0EAB 11            mov a, b
1703   0EAC FD 2E 02 00   mov32 cb, $00000002
1703   0EB0 00 00 
1704   0EB2 56            add b, a
1705   0EB3 E4            pop a
1706   0EB4             ; --- END TERMS
1707   0EB4 E7            pop d
1708   0EB5 FD 43         mov [d], b
1709   0EB7             ; break; 
1710   0EB7 0A C6 0E      jmp _switch22_exit ; case break
1711   0EBA             _switch22_default:
1712   0EBA             ; print("Error: Unknown argument type.\n"); 
1713   0EBA             ; --- START FUNCTION CALL
1714   0EBA 26 C6 31      mov b, _s2 ; "Error: Unknown argument type.\n"
1715   0EBD FD AB         swp b
1716   0EBF D8            push b
1717   0EC0 07 CC 1F      call print
1718   0EC3 51 02 00      add sp, 2
1719   0EC6             ; --- END FUNCTION CALL
1720   0EC6             _switch22_exit:
1721   0EC6             ; format_p++; 
1722   0EC6 FA FD FF      lea d, [bp + -3] ; $format_p
1723   0EC9 2A            mov b, [d]
1724   0ECA 38 00 00      mov c, 0
1725   0ECD FD 77         inc b
1726   0ECF FA FD FF      lea d, [bp + -3] ; $format_p
1727   0ED2 FD 43         mov [d], b
1728   0ED4 FD 7D         dec b
1729   0ED6 0A FE 0E      jmp _if21_exit
1730   0ED9             _if21_else:
1731   0ED9             ; putchar(*format_p); 
1732   0ED9             ; --- START FUNCTION CALL
1733   0ED9 FA FD FF      lea d, [bp + -3] ; $format_p
1734   0EDC 2A            mov b, [d]
1735   0EDD 38 00 00      mov c, 0
1736   0EE0 74            mov d, b
1737   0EE1 32            mov bl, [d]
1738   0EE2 A7 00         mov bh, 0
1739   0EE4 38 00 00      mov c, 0
1740   0EE7 DD            push bl
1741   0EE8 07 7E 1F      call putchar
1742   0EEB 51 01 00      add sp, 1
1743   0EEE             ; --- END FUNCTION CALL
1744   0EEE             ; format_p++; 
1745   0EEE FA FD FF      lea d, [bp + -3] ; $format_p
1746   0EF1 2A            mov b, [d]
1747   0EF2 38 00 00      mov c, 0
1748   0EF5 FD 77         inc b
1749   0EF7 FA FD FF      lea d, [bp + -3] ; $format_p
1750   0EFA FD 43         mov [d], b
1751   0EFC FD 7D         dec b
1752   0EFE             _if21_exit:
1753   0EFE             _if20_exit:
1754   0EFE             _for19_update:
1755   0EFE 0A 51 0C      jmp _for19_cond
1756   0F01             _for19_exit:
1757   0F01 F9            leave
1758   0F02 09            ret
1759   0F03             
1760   0F03             scanf:
1761   0F03 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1762   0F06             ; char *p, *format_p; 
1763   0F06 52 02 00      sub sp, 2
1764   0F09 52 02 00      sub sp, 2
1765   0F0C             ; char c; 
1766   0F0C 52 01 00      sub sp, 1
1767   0F0F             ; int i; 
1768   0F0F 52 02 00      sub sp, 2
1769   0F12             ; char input_string[  512                    ]; 
1770   0F12 52 00 02      sub sp, 512
1771   0F15             ; format_p = format; 
1772   0F15 FA FD FF      lea d, [bp + -3] ; $format_p
1773   0F18 DA            push d
1774   0F19 FA 05 00      lea d, [bp + 5] ; $format
1775   0F1C 2A            mov b, [d]
1776   0F1D 38 00 00      mov c, 0
1777   0F20 E7            pop d
1778   0F21 FD 43         mov [d], b
1779   0F23             ; p = &format + 2; 
1780   0F23 FA FF FF      lea d, [bp + -1] ; $p
1781   0F26 DA            push d
1782   0F27 FA 05 00      lea d, [bp + 5] ; $format
1783   0F2A 2D            mov b, d
1784   0F2B             ; --- START TERMS
1785   0F2B D7            push a
1786   0F2C 11            mov a, b
1787   0F2D FD 2E 02 00   mov32 cb, $00000002
1787   0F31 00 00 
1788   0F33 56            add b, a
1789   0F34 E4            pop a
1790   0F35             ; --- END TERMS
1791   0F35 E7            pop d
1792   0F36 FD 43         mov [d], b
1793   0F38             ; for(;;){ 
1794   0F38             _for26_init:
1795   0F38             _for26_cond:
1796   0F38             _for26_block:
1797   0F38             ; if(!*format_p) break; 
1798   0F38             _if27_cond:
1799   0F38 FA FD FF      lea d, [bp + -3] ; $format_p
1800   0F3B 2A            mov b, [d]
1801   0F3C 38 00 00      mov c, 0
1802   0F3F 74            mov d, b
1803   0F40 32            mov bl, [d]
1804   0F41 A7 00         mov bh, 0
1805   0F43 38 00 00      mov c, 0
1806   0F46 C0 00 00      cmp b, 0
1807   0F49 FD 71         seq ; !
1808   0F4B C0 00 00      cmp b, 0
1809   0F4E C6 57 0F      je _if27_else
1810   0F51             _if27_TRUE:
1811   0F51             ; break; 
1812   0F51 0A DF 11      jmp _for26_exit ; for break
1813   0F54 0A DC 11      jmp _if27_exit
1814   0F57             _if27_else:
1815   0F57             ; if(*format_p == '%'){ 
1816   0F57             _if28_cond:
1817   0F57 FA FD FF      lea d, [bp + -3] ; $format_p
1818   0F5A 2A            mov b, [d]
1819   0F5B 38 00 00      mov c, 0
1820   0F5E 74            mov d, b
1821   0F5F 32            mov bl, [d]
1822   0F60 A7 00         mov bh, 0
1823   0F62 38 00 00      mov c, 0
1824   0F65             ; --- START RELATIONAL
1825   0F65 D7            push a
1826   0F66 11            mov a, b
1827   0F67 FD 2E 25 00   mov32 cb, $00000025
1827   0F6B 00 00 
1828   0F6D B0            cmp a, b
1829   0F6E FD 71         seq ; ==
1830   0F70 E4            pop a
1831   0F71             ; --- END RELATIONAL
1832   0F71 C0 00 00      cmp b, 0
1833   0F74 C6 B7 11      je _if28_else
1834   0F77             _if28_TRUE:
1835   0F77             ; format_p++; 
1836   0F77 FA FD FF      lea d, [bp + -3] ; $format_p
1837   0F7A 2A            mov b, [d]
1838   0F7B 38 00 00      mov c, 0
1839   0F7E FD 77         inc b
1840   0F80 FA FD FF      lea d, [bp + -3] ; $format_p
1841   0F83 FD 43         mov [d], b
1842   0F85 FD 7D         dec b
1843   0F87             ; switch(*format_p){ 
1844   0F87             _switch29_expr:
1845   0F87 FA FD FF      lea d, [bp + -3] ; $format_p
1846   0F8A 2A            mov b, [d]
1847   0F8B 38 00 00      mov c, 0
1848   0F8E 74            mov d, b
1849   0F8F 32            mov bl, [d]
1850   0F90 A7 00         mov bh, 0
1851   0F92 38 00 00      mov c, 0
1852   0F95             _switch29_comparisons:
1853   0F95 C1 6C         cmp bl, $6c
1854   0F97 C6 C3 0F      je _switch29_case0
1855   0F9A C1 4C         cmp bl, $4c
1856   0F9C C6 C3 0F      je _switch29_case1
1857   0F9F C1 64         cmp bl, $64
1858   0FA1 C6 82 10      je _switch29_case2
1859   0FA4 C1 69         cmp bl, $69
1860   0FA6 C6 82 10      je _switch29_case3
1861   0FA9 C1 75         cmp bl, $75
1862   0FAB C6 BB 10      je _switch29_case4
1863   0FAE C1 78         cmp bl, $78
1864   0FB0 C6 F4 10      je _switch29_case5
1865   0FB3 C1 63         cmp bl, $63
1866   0FB5 C6 0F 11      je _switch29_case6
1867   0FB8 C1 73         cmp bl, $73
1868   0FBA C6 51 11      je _switch29_case7
1869   0FBD 0A 98 11      jmp _switch29_default
1870   0FC0 0A A4 11      jmp _switch29_exit
1871   0FC3             _switch29_case0:
1872   0FC3             _switch29_case1:
1873   0FC3             ; format_p++; 
1874   0FC3 FA FD FF      lea d, [bp + -3] ; $format_p
1875   0FC6 2A            mov b, [d]
1876   0FC7 38 00 00      mov c, 0
1877   0FCA FD 77         inc b
1878   0FCC FA FD FF      lea d, [bp + -3] ; $format_p
1879   0FCF FD 43         mov [d], b
1880   0FD1 FD 7D         dec b
1881   0FD3             ; if(*format_p == 'd' || *format_p == 'i'); 
1882   0FD3             _if30_cond:
1883   0FD3 FA FD FF      lea d, [bp + -3] ; $format_p
1884   0FD6 2A            mov b, [d]
1885   0FD7 38 00 00      mov c, 0
1886   0FDA 74            mov d, b
1887   0FDB 32            mov bl, [d]
1888   0FDC A7 00         mov bh, 0
1889   0FDE 38 00 00      mov c, 0
1890   0FE1             ; --- START RELATIONAL
1891   0FE1 D7            push a
1892   0FE2 11            mov a, b
1893   0FE3 FD 2E 64 00   mov32 cb, $00000064
1893   0FE7 00 00 
1894   0FE9 B0            cmp a, b
1895   0FEA FD 71         seq ; ==
1896   0FEC E4            pop a
1897   0FED             ; --- END RELATIONAL
1898   0FED             ; --- START LOGICAL OR
1899   0FED D7            push a
1900   0FEE 11            mov a, b
1901   0FEF FA FD FF      lea d, [bp + -3] ; $format_p
1902   0FF2 2A            mov b, [d]
1903   0FF3 38 00 00      mov c, 0
1904   0FF6 74            mov d, b
1905   0FF7 32            mov bl, [d]
1906   0FF8 A7 00         mov bh, 0
1907   0FFA 38 00 00      mov c, 0
1908   0FFD             ; --- START RELATIONAL
1909   0FFD D7            push a
1910   0FFE 11            mov a, b
1911   0FFF FD 2E 69 00   mov32 cb, $00000069
1911   1003 00 00 
1912   1005 B0            cmp a, b
1913   1006 FD 71         seq ; ==
1914   1008 E4            pop a
1915   1009             ; --- END RELATIONAL
1916   1009 FD A8         sor a, b ; ||
1917   100B E4            pop a
1918   100C             ; --- END LOGICAL OR
1919   100C C0 00 00      cmp b, 0
1920   100F C6 15 10      je _if30_else
1921   1012             _if30_TRUE:
1922   1012             ; ; 
1923   1012 0A 67 10      jmp _if30_exit
1924   1015             _if30_else:
1925   1015             ; if(*format_p == 'u'); 
1926   1015             _if31_cond:
1927   1015 FA FD FF      lea d, [bp + -3] ; $format_p
1928   1018 2A            mov b, [d]
1929   1019 38 00 00      mov c, 0
1930   101C 74            mov d, b
1931   101D 32            mov bl, [d]
1932   101E A7 00         mov bh, 0
1933   1020 38 00 00      mov c, 0
1934   1023             ; --- START RELATIONAL
1935   1023 D7            push a
1936   1024 11            mov a, b
1937   1025 FD 2E 75 00   mov32 cb, $00000075
1937   1029 00 00 
1938   102B B0            cmp a, b
1939   102C FD 71         seq ; ==
1940   102E E4            pop a
1941   102F             ; --- END RELATIONAL
1942   102F C0 00 00      cmp b, 0
1943   1032 C6 38 10      je _if31_else
1944   1035             _if31_TRUE:
1945   1035             ; ; 
1946   1035 0A 67 10      jmp _if31_exit
1947   1038             _if31_else:
1948   1038             ; if(*format_p == 'x'); 
1949   1038             _if32_cond:
1950   1038 FA FD FF      lea d, [bp + -3] ; $format_p
1951   103B 2A            mov b, [d]
1952   103C 38 00 00      mov c, 0
1953   103F 74            mov d, b
1954   1040 32            mov bl, [d]
1955   1041 A7 00         mov bh, 0
1956   1043 38 00 00      mov c, 0
1957   1046             ; --- START RELATIONAL
1958   1046 D7            push a
1959   1047 11            mov a, b
1960   1048 FD 2E 78 00   mov32 cb, $00000078
1960   104C 00 00 
1961   104E B0            cmp a, b
1962   104F FD 71         seq ; ==
1963   1051 E4            pop a
1964   1052             ; --- END RELATIONAL
1965   1052 C0 00 00      cmp b, 0
1966   1055 C6 5B 10      je _if32_else
1967   1058             _if32_TRUE:
1968   1058             ; ; 
1969   1058 0A 67 10      jmp _if32_exit
1970   105B             _if32_else:
1971   105B             ; err("Unexpected format in printf."); 
1972   105B             ; --- START FUNCTION CALL
1973   105B 26 A9 31      mov b, _s1 ; "Unexpected format in printf."
1974   105E FD AB         swp b
1975   1060 D8            push b
1976   1061 07 91 15      call err
1977   1064 51 02 00      add sp, 2
1978   1067             ; --- END FUNCTION CALL
1979   1067             _if32_exit:
1980   1067             _if31_exit:
1981   1067             _if30_exit:
1982   1067             ; p = p + 4; 
1983   1067 FA FF FF      lea d, [bp + -1] ; $p
1984   106A DA            push d
1985   106B FA FF FF      lea d, [bp + -1] ; $p
1986   106E 2A            mov b, [d]
1987   106F 38 00 00      mov c, 0
1988   1072             ; --- START TERMS
1989   1072 D7            push a
1990   1073 11            mov a, b
1991   1074 FD 2E 04 00   mov32 cb, $00000004
1991   1078 00 00 
1992   107A 56            add b, a
1993   107B E4            pop a
1994   107C             ; --- END TERMS
1995   107C E7            pop d
1996   107D FD 43         mov [d], b
1997   107F             ; break; 
1998   107F 0A A4 11      jmp _switch29_exit ; case break
1999   1082             _switch29_case2:
2000   1082             _switch29_case3:
2001   1082             ; i = scann(); 
2002   1082 FA FA FF      lea d, [bp + -6] ; $i
2003   1085 DA            push d
2004   1086             ; --- START FUNCTION CALL
2005   1086 07 A4 1F      call scann
2006   1089 E7            pop d
2007   108A FD 43         mov [d], b
2008   108C             ; **(int **)p = i; 
2009   108C FA FF FF      lea d, [bp + -1] ; $p
2010   108F 2A            mov b, [d]
2011   1090 38 00 00      mov c, 0
2012   1093 74            mov d, b
2013   1094 2A            mov b, [d]
2014   1095 D8            push b
2015   1096 FA FA FF      lea d, [bp + -6] ; $i
2016   1099 2A            mov b, [d]
2017   109A 38 00 00      mov c, 0
2018   109D E7            pop d
2019   109E FD 43         mov [d], b
2020   10A0             ; p = p + 2; 
2021   10A0 FA FF FF      lea d, [bp + -1] ; $p
2022   10A3 DA            push d
2023   10A4 FA FF FF      lea d, [bp + -1] ; $p
2024   10A7 2A            mov b, [d]
2025   10A8 38 00 00      mov c, 0
2026   10AB             ; --- START TERMS
2027   10AB D7            push a
2028   10AC 11            mov a, b
2029   10AD FD 2E 02 00   mov32 cb, $00000002
2029   10B1 00 00 
2030   10B3 56            add b, a
2031   10B4 E4            pop a
2032   10B5             ; --- END TERMS
2033   10B5 E7            pop d
2034   10B6 FD 43         mov [d], b
2035   10B8             ; break; 
2036   10B8 0A A4 11      jmp _switch29_exit ; case break
2037   10BB             _switch29_case4:
2038   10BB             ; i = scann(); 
2039   10BB FA FA FF      lea d, [bp + -6] ; $i
2040   10BE DA            push d
2041   10BF             ; --- START FUNCTION CALL
2042   10BF 07 A4 1F      call scann
2043   10C2 E7            pop d
2044   10C3 FD 43         mov [d], b
2045   10C5             ; **(int **)p = i; 
2046   10C5 FA FF FF      lea d, [bp + -1] ; $p
2047   10C8 2A            mov b, [d]
2048   10C9 38 00 00      mov c, 0
2049   10CC 74            mov d, b
2050   10CD 2A            mov b, [d]
2051   10CE D8            push b
2052   10CF FA FA FF      lea d, [bp + -6] ; $i
2053   10D2 2A            mov b, [d]
2054   10D3 38 00 00      mov c, 0
2055   10D6 E7            pop d
2056   10D7 FD 43         mov [d], b
2057   10D9             ; p = p + 2; 
2058   10D9 FA FF FF      lea d, [bp + -1] ; $p
2059   10DC DA            push d
2060   10DD FA FF FF      lea d, [bp + -1] ; $p
2061   10E0 2A            mov b, [d]
2062   10E1 38 00 00      mov c, 0
2063   10E4             ; --- START TERMS
2064   10E4 D7            push a
2065   10E5 11            mov a, b
2066   10E6 FD 2E 02 00   mov32 cb, $00000002
2066   10EA 00 00 
2067   10EC 56            add b, a
2068   10ED E4            pop a
2069   10EE             ; --- END TERMS
2070   10EE E7            pop d
2071   10EF FD 43         mov [d], b
2072   10F1             ; break; 
2073   10F1 0A A4 11      jmp _switch29_exit ; case break
2074   10F4             _switch29_case5:
2075   10F4             ; p = p + 2; 
2076   10F4 FA FF FF      lea d, [bp + -1] ; $p
2077   10F7 DA            push d
2078   10F8 FA FF FF      lea d, [bp + -1] ; $p
2079   10FB 2A            mov b, [d]
2080   10FC 38 00 00      mov c, 0
2081   10FF             ; --- START TERMS
2082   10FF D7            push a
2083   1100 11            mov a, b
2084   1101 FD 2E 02 00   mov32 cb, $00000002
2084   1105 00 00 
2085   1107 56            add b, a
2086   1108 E4            pop a
2087   1109             ; --- END TERMS
2088   1109 E7            pop d
2089   110A FD 43         mov [d], b
2090   110C             ; break; 
2091   110C 0A A4 11      jmp _switch29_exit ; case break
2092   110F             _switch29_case6:
2093   110F             ; c = getchar(); 
2094   110F FA FC FF      lea d, [bp + -4] ; $c
2095   1112 DA            push d
2096   1113             ; --- START FUNCTION CALL
2097   1113 07 8B 1F      call getchar
2098   1116 E7            pop d
2099   1117 FD 3E         mov [d], bl
2100   1119             ; **(char **)p = *(char *)c; 
2101   1119 FA FF FF      lea d, [bp + -1] ; $p
2102   111C 2A            mov b, [d]
2103   111D 38 00 00      mov c, 0
2104   1120 74            mov d, b
2105   1121 2A            mov b, [d]
2106   1122 D8            push b
2107   1123 FA FC FF      lea d, [bp + -4] ; $c
2108   1126 32            mov bl, [d]
2109   1127 A7 00         mov bh, 0
2110   1129 38 00 00      mov c, 0
2111   112C 74            mov d, b
2112   112D 32            mov bl, [d]
2113   112E A7 00         mov bh, 0
2114   1130 38 00 00      mov c, 0
2115   1133 E7            pop d
2116   1134 FD 43         mov [d], b
2117   1136             ; p = p + 1; 
2118   1136 FA FF FF      lea d, [bp + -1] ; $p
2119   1139 DA            push d
2120   113A FA FF FF      lea d, [bp + -1] ; $p
2121   113D 2A            mov b, [d]
2122   113E 38 00 00      mov c, 0
2123   1141             ; --- START TERMS
2124   1141 D7            push a
2125   1142 11            mov a, b
2126   1143 FD 2E 01 00   mov32 cb, $00000001
2126   1147 00 00 
2127   1149 56            add b, a
2128   114A E4            pop a
2129   114B             ; --- END TERMS
2130   114B E7            pop d
2131   114C FD 43         mov [d], b
2132   114E             ; break; 
2133   114E 0A A4 11      jmp _switch29_exit ; case break
2134   1151             _switch29_case7:
2135   1151             ; gets(input_string); 
2136   1151             ; --- START FUNCTION CALL
2137   1151 FA FA FD      lea d, [bp + -518] ; $input_string
2138   1154 2D            mov b, d
2139   1155 38 00 00      mov c, 0
2140   1158 FD AB         swp b
2141   115A D8            push b
2142   115B 07 7D 17      call gets
2143   115E 51 02 00      add sp, 2
2144   1161             ; --- END FUNCTION CALL
2145   1161             ; strcpy(*(char **)p, input_string); 
2146   1161             ; --- START FUNCTION CALL
2147   1161 FA FA FD      lea d, [bp + -518] ; $input_string
2148   1164 2D            mov b, d
2149   1165 38 00 00      mov c, 0
2150   1168 FD AB         swp b
2151   116A D8            push b
2152   116B FA FF FF      lea d, [bp + -1] ; $p
2153   116E 2A            mov b, [d]
2154   116F 38 00 00      mov c, 0
2155   1172 74            mov d, b
2156   1173 2A            mov b, [d]
2157   1174 FD AB         swp b
2158   1176 D8            push b
2159   1177 07 F4 06      call strcpy
2160   117A 51 04 00      add sp, 4
2161   117D             ; --- END FUNCTION CALL
2162   117D             ; p = p + 2; 
2163   117D FA FF FF      lea d, [bp + -1] ; $p
2164   1180 DA            push d
2165   1181 FA FF FF      lea d, [bp + -1] ; $p
2166   1184 2A            mov b, [d]
2167   1185 38 00 00      mov c, 0
2168   1188             ; --- START TERMS
2169   1188 D7            push a
2170   1189 11            mov a, b
2171   118A FD 2E 02 00   mov32 cb, $00000002
2171   118E 00 00 
2172   1190 56            add b, a
2173   1191 E4            pop a
2174   1192             ; --- END TERMS
2175   1192 E7            pop d
2176   1193 FD 43         mov [d], b
2177   1195             ; break; 
2178   1195 0A A4 11      jmp _switch29_exit ; case break
2179   1198             _switch29_default:
2180   1198             ; print("Error: Unknown argument type.\n"); 
2181   1198             ; --- START FUNCTION CALL
2182   1198 26 C6 31      mov b, _s2 ; "Error: Unknown argument type.\n"
2183   119B FD AB         swp b
2184   119D D8            push b
2185   119E 07 CC 1F      call print
2186   11A1 51 02 00      add sp, 2
2187   11A4             ; --- END FUNCTION CALL
2188   11A4             _switch29_exit:
2189   11A4             ; format_p++; 
2190   11A4 FA FD FF      lea d, [bp + -3] ; $format_p
2191   11A7 2A            mov b, [d]
2192   11A8 38 00 00      mov c, 0
2193   11AB FD 77         inc b
2194   11AD FA FD FF      lea d, [bp + -3] ; $format_p
2195   11B0 FD 43         mov [d], b
2196   11B2 FD 7D         dec b
2197   11B4 0A DC 11      jmp _if28_exit
2198   11B7             _if28_else:
2199   11B7             ; putchar(*format_p); 
2200   11B7             ; --- START FUNCTION CALL
2201   11B7 FA FD FF      lea d, [bp + -3] ; $format_p
2202   11BA 2A            mov b, [d]
2203   11BB 38 00 00      mov c, 0
2204   11BE 74            mov d, b
2205   11BF 32            mov bl, [d]
2206   11C0 A7 00         mov bh, 0
2207   11C2 38 00 00      mov c, 0
2208   11C5 DD            push bl
2209   11C6 07 7E 1F      call putchar
2210   11C9 51 01 00      add sp, 1
2211   11CC             ; --- END FUNCTION CALL
2212   11CC             ; format_p++; 
2213   11CC FA FD FF      lea d, [bp + -3] ; $format_p
2214   11CF 2A            mov b, [d]
2215   11D0 38 00 00      mov c, 0
2216   11D3 FD 77         inc b
2217   11D5 FA FD FF      lea d, [bp + -3] ; $format_p
2218   11D8 FD 43         mov [d], b
2219   11DA FD 7D         dec b
2220   11DC             _if28_exit:
2221   11DC             _if27_exit:
2222   11DC             _for26_update:
2223   11DC 0A 38 0F      jmp _for26_cond
2224   11DF             _for26_exit:
2225   11DF F9            leave
2226   11E0 09            ret
2227   11E1             
2228   11E1             sprintf:
2229   11E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2230   11E4             ; char *p, *format_p; 
2231   11E4 52 02 00      sub sp, 2
2232   11E7 52 02 00      sub sp, 2
2233   11EA             ; char *sp; 
2234   11EA 52 02 00      sub sp, 2
2235   11ED             ; sp = dest; 
2236   11ED FA FB FF      lea d, [bp + -5] ; $sp
2237   11F0 DA            push d
2238   11F1 FA 05 00      lea d, [bp + 5] ; $dest
2239   11F4 2A            mov b, [d]
2240   11F5 38 00 00      mov c, 0
2241   11F8 E7            pop d
2242   11F9 FD 43         mov [d], b
2243   11FB             ; format_p = format; 
2244   11FB FA FD FF      lea d, [bp + -3] ; $format_p
2245   11FE DA            push d
2246   11FF FA 07 00      lea d, [bp + 7] ; $format
2247   1202 2A            mov b, [d]
2248   1203 38 00 00      mov c, 0
2249   1206 E7            pop d
2250   1207 FD 43         mov [d], b
2251   1209             ; p = &format + 2; 
2252   1209 FA FF FF      lea d, [bp + -1] ; $p
2253   120C DA            push d
2254   120D FA 07 00      lea d, [bp + 7] ; $format
2255   1210 2D            mov b, d
2256   1211             ; --- START TERMS
2257   1211 D7            push a
2258   1212 11            mov a, b
2259   1213 FD 2E 02 00   mov32 cb, $00000002
2259   1217 00 00 
2260   1219 56            add b, a
2261   121A E4            pop a
2262   121B             ; --- END TERMS
2263   121B E7            pop d
2264   121C FD 43         mov [d], b
2265   121E             ; for(;;){ 
2266   121E             _for33_init:
2267   121E             _for33_cond:
2268   121E             _for33_block:
2269   121E             ; if(!*format_p) break; 
2270   121E             _if34_cond:
2271   121E FA FD FF      lea d, [bp + -3] ; $format_p
2272   1221 2A            mov b, [d]
2273   1222 38 00 00      mov c, 0
2274   1225 74            mov d, b
2275   1226 32            mov bl, [d]
2276   1227 A7 00         mov bh, 0
2277   1229 38 00 00      mov c, 0
2278   122C C0 00 00      cmp b, 0
2279   122F FD 71         seq ; !
2280   1231 C0 00 00      cmp b, 0
2281   1234 C6 3D 12      je _if34_else
2282   1237             _if34_TRUE:
2283   1237             ; break; 
2284   1237 0A 6B 15      jmp _for33_exit ; for break
2285   123A 0A 68 15      jmp _if34_exit
2286   123D             _if34_else:
2287   123D             ; if(*format_p == '%'){ 
2288   123D             _if35_cond:
2289   123D FA FD FF      lea d, [bp + -3] ; $format_p
2290   1240 2A            mov b, [d]
2291   1241 38 00 00      mov c, 0
2292   1244 74            mov d, b
2293   1245 32            mov bl, [d]
2294   1246 A7 00         mov bh, 0
2295   1248 38 00 00      mov c, 0
2296   124B             ; --- START RELATIONAL
2297   124B D7            push a
2298   124C 11            mov a, b
2299   124D FD 2E 25 00   mov32 cb, $00000025
2299   1251 00 00 
2300   1253 B0            cmp a, b
2301   1254 FD 71         seq ; ==
2302   1256 E4            pop a
2303   1257             ; --- END RELATIONAL
2304   1257 C0 00 00      cmp b, 0
2305   125A C6 3D 15      je _if35_else
2306   125D             _if35_TRUE:
2307   125D             ; format_p++; 
2308   125D FA FD FF      lea d, [bp + -3] ; $format_p
2309   1260 2A            mov b, [d]
2310   1261 38 00 00      mov c, 0
2311   1264 FD 77         inc b
2312   1266 FA FD FF      lea d, [bp + -3] ; $format_p
2313   1269 FD 43         mov [d], b
2314   126B FD 7D         dec b
2315   126D             ; switch(*format_p){ 
2316   126D             _switch36_expr:
2317   126D FA FD FF      lea d, [bp + -3] ; $format_p
2318   1270 2A            mov b, [d]
2319   1271 38 00 00      mov c, 0
2320   1274 74            mov d, b
2321   1275 32            mov bl, [d]
2322   1276 A7 00         mov bh, 0
2323   1278 38 00 00      mov c, 0
2324   127B             _switch36_comparisons:
2325   127B C1 6C         cmp bl, $6c
2326   127D C6 A9 12      je _switch36_case0
2327   1280 C1 4C         cmp bl, $4c
2328   1282 C6 A9 12      je _switch36_case1
2329   1285 C1 64         cmp bl, $64
2330   1287 C6 B9 13      je _switch36_case2
2331   128A C1 69         cmp bl, $69
2332   128C C6 B9 13      je _switch36_case3
2333   128F C1 75         cmp bl, $75
2334   1291 C6 05 14      je _switch36_case4
2335   1294 C1 78         cmp bl, $78
2336   1296 C6 51 14      je _switch36_case5
2337   1299 C1 63         cmp bl, $63
2338   129B C6 75 14      je _switch36_case6
2339   129E C1 73         cmp bl, $73
2340   12A0 C6 B2 14      je _switch36_case7
2341   12A3 0A 1E 15      jmp _switch36_default
2342   12A6 0A 2A 15      jmp _switch36_exit
2343   12A9             _switch36_case0:
2344   12A9             _switch36_case1:
2345   12A9             ; format_p++; 
2346   12A9 FA FD FF      lea d, [bp + -3] ; $format_p
2347   12AC 2A            mov b, [d]
2348   12AD 38 00 00      mov c, 0
2349   12B0 FD 77         inc b
2350   12B2 FA FD FF      lea d, [bp + -3] ; $format_p
2351   12B5 FD 43         mov [d], b
2352   12B7 FD 7D         dec b
2353   12B9             ; if(*format_p == 'd' || *format_p == 'i') 
2354   12B9             _if37_cond:
2355   12B9 FA FD FF      lea d, [bp + -3] ; $format_p
2356   12BC 2A            mov b, [d]
2357   12BD 38 00 00      mov c, 0
2358   12C0 74            mov d, b
2359   12C1 32            mov bl, [d]
2360   12C2 A7 00         mov bh, 0
2361   12C4 38 00 00      mov c, 0
2362   12C7             ; --- START RELATIONAL
2363   12C7 D7            push a
2364   12C8 11            mov a, b
2365   12C9 FD 2E 64 00   mov32 cb, $00000064
2365   12CD 00 00 
2366   12CF B0            cmp a, b
2367   12D0 FD 71         seq ; ==
2368   12D2 E4            pop a
2369   12D3             ; --- END RELATIONAL
2370   12D3             ; --- START LOGICAL OR
2371   12D3 D7            push a
2372   12D4 11            mov a, b
2373   12D5 FA FD FF      lea d, [bp + -3] ; $format_p
2374   12D8 2A            mov b, [d]
2375   12D9 38 00 00      mov c, 0
2376   12DC 74            mov d, b
2377   12DD 32            mov bl, [d]
2378   12DE A7 00         mov bh, 0
2379   12E0 38 00 00      mov c, 0
2380   12E3             ; --- START RELATIONAL
2381   12E3 D7            push a
2382   12E4 11            mov a, b
2383   12E5 FD 2E 69 00   mov32 cb, $00000069
2383   12E9 00 00 
2384   12EB B0            cmp a, b
2385   12EC FD 71         seq ; ==
2386   12EE E4            pop a
2387   12EF             ; --- END RELATIONAL
2388   12EF FD A8         sor a, b ; ||
2389   12F1 E4            pop a
2390   12F2             ; --- END LOGICAL OR
2391   12F2 C0 00 00      cmp b, 0
2392   12F5 C6 16 13      je _if37_else
2393   12F8             _if37_TRUE:
2394   12F8             ; print_signed_long(*(long *)p); 
2395   12F8             ; --- START FUNCTION CALL
2396   12F8 FA FF FF      lea d, [bp + -1] ; $p
2397   12FB 2A            mov b, [d]
2398   12FC 38 00 00      mov c, 0
2399   12FF 74            mov d, b
2400   1300 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2401   1303 FD 39         mov c, b ; And place it into C
2402   1305 2A            mov b, [d] ; Lower Word in B
2403   1306 12            mov a, c
2404   1307 FD AA         swp a
2405   1309 D7            push a
2406   130A FD AB         swp b
2407   130C D8            push b
2408   130D 07 D3 18      call print_signed_long
2409   1310 51 04 00      add sp, 4
2410   1313             ; --- END FUNCTION CALL
2411   1313 0A 9E 13      jmp _if37_exit
2412   1316             _if37_else:
2413   1316             ; if(*format_p == 'u') 
2414   1316             _if38_cond:
2415   1316 FA FD FF      lea d, [bp + -3] ; $format_p
2416   1319 2A            mov b, [d]
2417   131A 38 00 00      mov c, 0
2418   131D 74            mov d, b
2419   131E 32            mov bl, [d]
2420   131F A7 00         mov bh, 0
2421   1321 38 00 00      mov c, 0
2422   1324             ; --- START RELATIONAL
2423   1324 D7            push a
2424   1325 11            mov a, b
2425   1326 FD 2E 75 00   mov32 cb, $00000075
2425   132A 00 00 
2426   132C B0            cmp a, b
2427   132D FD 71         seq ; ==
2428   132F E4            pop a
2429   1330             ; --- END RELATIONAL
2430   1330 C0 00 00      cmp b, 0
2431   1333 C6 54 13      je _if38_else
2432   1336             _if38_TRUE:
2433   1336             ; print_unsigned_long(*(unsigned long *)p); 
2434   1336             ; --- START FUNCTION CALL
2435   1336 FA FF FF      lea d, [bp + -1] ; $p
2436   1339 2A            mov b, [d]
2437   133A 38 00 00      mov c, 0
2438   133D 74            mov d, b
2439   133E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2440   1341 FD 39         mov c, b ; And place it into C
2441   1343 2A            mov b, [d] ; Lower Word in B
2442   1344 12            mov a, c
2443   1345 FD AA         swp a
2444   1347 D7            push a
2445   1348 FD AB         swp b
2446   134A D8            push b
2447   134B 07 42 1A      call print_unsigned_long
2448   134E 51 04 00      add sp, 4
2449   1351             ; --- END FUNCTION CALL
2450   1351 0A 9E 13      jmp _if38_exit
2451   1354             _if38_else:
2452   1354             ; if(*format_p == 'x') 
2453   1354             _if39_cond:
2454   1354 FA FD FF      lea d, [bp + -3] ; $format_p
2455   1357 2A            mov b, [d]
2456   1358 38 00 00      mov c, 0
2457   135B 74            mov d, b
2458   135C 32            mov bl, [d]
2459   135D A7 00         mov bh, 0
2460   135F 38 00 00      mov c, 0
2461   1362             ; --- START RELATIONAL
2462   1362 D7            push a
2463   1363 11            mov a, b
2464   1364 FD 2E 78 00   mov32 cb, $00000078
2464   1368 00 00 
2465   136A B0            cmp a, b
2466   136B FD 71         seq ; ==
2467   136D E4            pop a
2468   136E             ; --- END RELATIONAL
2469   136E C0 00 00      cmp b, 0
2470   1371 C6 92 13      je _if39_else
2471   1374             _if39_TRUE:
2472   1374             ; printx32(*(long int *)p); 
2473   1374             ; --- START FUNCTION CALL
2474   1374 FA FF FF      lea d, [bp + -1] ; $p
2475   1377 2A            mov b, [d]
2476   1378 38 00 00      mov c, 0
2477   137B 74            mov d, b
2478   137C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2479   137F FD 39         mov c, b ; And place it into C
2480   1381 2A            mov b, [d] ; Lower Word in B
2481   1382 12            mov a, c
2482   1383 FD AA         swp a
2483   1385 D7            push a
2484   1386 FD AB         swp b
2485   1388 D8            push b
2486   1389 07 A6 15      call printx32
2487   138C 51 04 00      add sp, 4
2488   138F             ; --- END FUNCTION CALL
2489   138F 0A 9E 13      jmp _if39_exit
2490   1392             _if39_else:
2491   1392             ; err("Unexpected format in printf."); 
2492   1392             ; --- START FUNCTION CALL
2493   1392 26 A9 31      mov b, _s1 ; "Unexpected format in printf."
2494   1395 FD AB         swp b
2495   1397 D8            push b
2496   1398 07 91 15      call err
2497   139B 51 02 00      add sp, 2
2498   139E             ; --- END FUNCTION CALL
2499   139E             _if39_exit:
2500   139E             _if38_exit:
2501   139E             _if37_exit:
2502   139E             ; p = p + 4; 
2503   139E FA FF FF      lea d, [bp + -1] ; $p
2504   13A1 DA            push d
2505   13A2 FA FF FF      lea d, [bp + -1] ; $p
2506   13A5 2A            mov b, [d]
2507   13A6 38 00 00      mov c, 0
2508   13A9             ; --- START TERMS
2509   13A9 D7            push a
2510   13AA 11            mov a, b
2511   13AB FD 2E 04 00   mov32 cb, $00000004
2511   13AF 00 00 
2512   13B1 56            add b, a
2513   13B2 E4            pop a
2514   13B3             ; --- END TERMS
2515   13B3 E7            pop d
2516   13B4 FD 43         mov [d], b
2517   13B6             ; break; 
2518   13B6 0A 2A 15      jmp _switch36_exit ; case break
2519   13B9             _switch36_case2:
2520   13B9             _switch36_case3:
2521   13B9             ; sp = sp + sprint_signed(sp, *(int*)p); 
2522   13B9 FA FB FF      lea d, [bp + -5] ; $sp
2523   13BC DA            push d
2524   13BD FA FB FF      lea d, [bp + -5] ; $sp
2525   13C0 2A            mov b, [d]
2526   13C1 38 00 00      mov c, 0
2527   13C4             ; --- START TERMS
2528   13C4 D7            push a
2529   13C5 11            mov a, b
2530   13C6             ; --- START FUNCTION CALL
2531   13C6 FA FF FF      lea d, [bp + -1] ; $p
2532   13C9 2A            mov b, [d]
2533   13CA 38 00 00      mov c, 0
2534   13CD 74            mov d, b
2535   13CE 2A            mov b, [d]
2536   13CF 38 00 00      mov c, 0
2537   13D2 FD AB         swp b
2538   13D4 D8            push b
2539   13D5 FA FB FF      lea d, [bp + -5] ; $sp
2540   13D8 2A            mov b, [d]
2541   13D9 38 00 00      mov c, 0
2542   13DC FD AB         swp b
2543   13DE D8            push b
2544   13DF 07 B6 1D      call sprint_signed
2545   13E2 51 04 00      add sp, 4
2546   13E5             ; --- END FUNCTION CALL
2547   13E5 56            add b, a
2548   13E6 E4            pop a
2549   13E7             ; --- END TERMS
2550   13E7 E7            pop d
2551   13E8 FD 43         mov [d], b
2552   13EA             ; p = p + 2; 
2553   13EA FA FF FF      lea d, [bp + -1] ; $p
2554   13ED DA            push d
2555   13EE FA FF FF      lea d, [bp + -1] ; $p
2556   13F1 2A            mov b, [d]
2557   13F2 38 00 00      mov c, 0
2558   13F5             ; --- START TERMS
2559   13F5 D7            push a
2560   13F6 11            mov a, b
2561   13F7 FD 2E 02 00   mov32 cb, $00000002
2561   13FB 00 00 
2562   13FD 56            add b, a
2563   13FE E4            pop a
2564   13FF             ; --- END TERMS
2565   13FF E7            pop d
2566   1400 FD 43         mov [d], b
2567   1402             ; break; 
2568   1402 0A 2A 15      jmp _switch36_exit ; case break
2569   1405             _switch36_case4:
2570   1405             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2571   1405 FA FB FF      lea d, [bp + -5] ; $sp
2572   1408 DA            push d
2573   1409 FA FB FF      lea d, [bp + -5] ; $sp
2574   140C 2A            mov b, [d]
2575   140D 38 00 00      mov c, 0
2576   1410             ; --- START TERMS
2577   1410 D7            push a
2578   1411 11            mov a, b
2579   1412             ; --- START FUNCTION CALL
2580   1412 FA FF FF      lea d, [bp + -1] ; $p
2581   1415 2A            mov b, [d]
2582   1416 38 00 00      mov c, 0
2583   1419 74            mov d, b
2584   141A 2A            mov b, [d]
2585   141B 38 00 00      mov c, 0
2586   141E FD AB         swp b
2587   1420 D8            push b
2588   1421 FA FB FF      lea d, [bp + -5] ; $sp
2589   1424 2A            mov b, [d]
2590   1425 38 00 00      mov c, 0
2591   1428 FD AB         swp b
2592   142A D8            push b
2593   142B 07 5E 1B      call sprint_unsigned
2594   142E 51 04 00      add sp, 4
2595   1431             ; --- END FUNCTION CALL
2596   1431 56            add b, a
2597   1432 E4            pop a
2598   1433             ; --- END TERMS
2599   1433 E7            pop d
2600   1434 FD 43         mov [d], b
2601   1436             ; p = p + 2; 
2602   1436 FA FF FF      lea d, [bp + -1] ; $p
2603   1439 DA            push d
2604   143A FA FF FF      lea d, [bp + -1] ; $p
2605   143D 2A            mov b, [d]
2606   143E 38 00 00      mov c, 0
2607   1441             ; --- START TERMS
2608   1441 D7            push a
2609   1442 11            mov a, b
2610   1443 FD 2E 02 00   mov32 cb, $00000002
2610   1447 00 00 
2611   1449 56            add b, a
2612   144A E4            pop a
2613   144B             ; --- END TERMS
2614   144B E7            pop d
2615   144C FD 43         mov [d], b
2616   144E             ; break; 
2617   144E 0A 2A 15      jmp _switch36_exit ; case break
2618   1451             _switch36_case5:
2619   1451             
2620   1451             ; --- BEGIN INLINE ASM SEGMENT
2621   1451 FA FF FF      lea d, [bp + -1] ; $p
2622   1454 FD 2A         mov d, [d]
2623   1456 2A            mov b, [d]
2624   1457 07 2F 23      call print_u16x
2625   145A             ; --- END INLINE ASM SEGMENT
2626   145A             
2627   145A             ; p = p + 2; 
2628   145A FA FF FF      lea d, [bp + -1] ; $p
2629   145D DA            push d
2630   145E FA FF FF      lea d, [bp + -1] ; $p
2631   1461 2A            mov b, [d]
2632   1462 38 00 00      mov c, 0
2633   1465             ; --- START TERMS
2634   1465 D7            push a
2635   1466 11            mov a, b
2636   1467 FD 2E 02 00   mov32 cb, $00000002
2636   146B 00 00 
2637   146D 56            add b, a
2638   146E E4            pop a
2639   146F             ; --- END TERMS
2640   146F E7            pop d
2641   1470 FD 43         mov [d], b
2642   1472             ; break; 
2643   1472 0A 2A 15      jmp _switch36_exit ; case break
2644   1475             _switch36_case6:
2645   1475             ; *sp++ = *(char *)p; 
2646   1475 FA FB FF      lea d, [bp + -5] ; $sp
2647   1478 2A            mov b, [d]
2648   1479 38 00 00      mov c, 0
2649   147C FD 77         inc b
2650   147E FA FB FF      lea d, [bp + -5] ; $sp
2651   1481 FD 43         mov [d], b
2652   1483 FD 7D         dec b
2653   1485 D8            push b
2654   1486 FA FF FF      lea d, [bp + -1] ; $p
2655   1489 2A            mov b, [d]
2656   148A 38 00 00      mov c, 0
2657   148D 74            mov d, b
2658   148E 32            mov bl, [d]
2659   148F A7 00         mov bh, 0
2660   1491 38 00 00      mov c, 0
2661   1494 E7            pop d
2662   1495 FD 3E         mov [d], bl
2663   1497             ; p = p + 1; 
2664   1497 FA FF FF      lea d, [bp + -1] ; $p
2665   149A DA            push d
2666   149B FA FF FF      lea d, [bp + -1] ; $p
2667   149E 2A            mov b, [d]
2668   149F 38 00 00      mov c, 0
2669   14A2             ; --- START TERMS
2670   14A2 D7            push a
2671   14A3 11            mov a, b
2672   14A4 FD 2E 01 00   mov32 cb, $00000001
2672   14A8 00 00 
2673   14AA 56            add b, a
2674   14AB E4            pop a
2675   14AC             ; --- END TERMS
2676   14AC E7            pop d
2677   14AD FD 43         mov [d], b
2678   14AF             ; break; 
2679   14AF 0A 2A 15      jmp _switch36_exit ; case break
2680   14B2             _switch36_case7:
2681   14B2             ; int len = strlen(*(char **)p); 
2682   14B2 52 02 00      sub sp, 2
2683   14B5             ; --- START LOCAL VAR INITIALIZATION
2684   14B5 FA F9 FF      lea d, [bp + -7] ; $len
2685   14B8 DA            push d
2686   14B9             ; --- START FUNCTION CALL
2687   14B9 FA FF FF      lea d, [bp + -1] ; $p
2688   14BC 2A            mov b, [d]
2689   14BD 38 00 00      mov c, 0
2690   14C0 74            mov d, b
2691   14C1 2A            mov b, [d]
2692   14C2 FD AB         swp b
2693   14C4 D8            push b
2694   14C5 07 DA 08      call strlen
2695   14C8 51 02 00      add sp, 2
2696   14CB             ; --- END FUNCTION CALL
2697   14CB E7            pop d
2698   14CC FD 43         mov [d], b
2699   14CE             ; --- END LOCAL VAR INITIALIZATION
2700   14CE             ; strcpy(sp, *(char **)p); 
2701   14CE             ; --- START FUNCTION CALL
2702   14CE FA FF FF      lea d, [bp + -1] ; $p
2703   14D1 2A            mov b, [d]
2704   14D2 38 00 00      mov c, 0
2705   14D5 74            mov d, b
2706   14D6 2A            mov b, [d]
2707   14D7 FD AB         swp b
2708   14D9 D8            push b
2709   14DA FA FB FF      lea d, [bp + -5] ; $sp
2710   14DD 2A            mov b, [d]
2711   14DE 38 00 00      mov c, 0
2712   14E1 FD AB         swp b
2713   14E3 D8            push b
2714   14E4 07 F4 06      call strcpy
2715   14E7 51 04 00      add sp, 4
2716   14EA             ; --- END FUNCTION CALL
2717   14EA             ; sp = sp + len; 
2718   14EA FA FB FF      lea d, [bp + -5] ; $sp
2719   14ED DA            push d
2720   14EE FA FB FF      lea d, [bp + -5] ; $sp
2721   14F1 2A            mov b, [d]
2722   14F2 38 00 00      mov c, 0
2723   14F5             ; --- START TERMS
2724   14F5 D7            push a
2725   14F6 11            mov a, b
2726   14F7 FA F9 FF      lea d, [bp + -7] ; $len
2727   14FA 2A            mov b, [d]
2728   14FB 38 00 00      mov c, 0
2729   14FE 56            add b, a
2730   14FF E4            pop a
2731   1500             ; --- END TERMS
2732   1500 E7            pop d
2733   1501 FD 43         mov [d], b
2734   1503             ; p = p + 2; 
2735   1503 FA FF FF      lea d, [bp + -1] ; $p
2736   1506 DA            push d
2737   1507 FA FF FF      lea d, [bp + -1] ; $p
2738   150A 2A            mov b, [d]
2739   150B 38 00 00      mov c, 0
2740   150E             ; --- START TERMS
2741   150E D7            push a
2742   150F 11            mov a, b
2743   1510 FD 2E 02 00   mov32 cb, $00000002
2743   1514 00 00 
2744   1516 56            add b, a
2745   1517 E4            pop a
2746   1518             ; --- END TERMS
2747   1518 E7            pop d
2748   1519 FD 43         mov [d], b
2749   151B             ; break; 
2750   151B 0A 2A 15      jmp _switch36_exit ; case break
2751   151E             _switch36_default:
2752   151E             ; print("Error: Unknown argument type.\n"); 
2753   151E             ; --- START FUNCTION CALL
2754   151E 26 C6 31      mov b, _s2 ; "Error: Unknown argument type.\n"
2755   1521 FD AB         swp b
2756   1523 D8            push b
2757   1524 07 CC 1F      call print
2758   1527 51 02 00      add sp, 2
2759   152A             ; --- END FUNCTION CALL
2760   152A             _switch36_exit:
2761   152A             ; format_p++; 
2762   152A FA FD FF      lea d, [bp + -3] ; $format_p
2763   152D 2A            mov b, [d]
2764   152E 38 00 00      mov c, 0
2765   1531 FD 77         inc b
2766   1533 FA FD FF      lea d, [bp + -3] ; $format_p
2767   1536 FD 43         mov [d], b
2768   1538 FD 7D         dec b
2769   153A 0A 68 15      jmp _if35_exit
2770   153D             _if35_else:
2771   153D             ; *sp++ = *format_p++; 
2772   153D FA FB FF      lea d, [bp + -5] ; $sp
2773   1540 2A            mov b, [d]
2774   1541 38 00 00      mov c, 0
2775   1544 FD 77         inc b
2776   1546 FA FB FF      lea d, [bp + -5] ; $sp
2777   1549 FD 43         mov [d], b
2778   154B FD 7D         dec b
2779   154D D8            push b
2780   154E FA FD FF      lea d, [bp + -3] ; $format_p
2781   1551 2A            mov b, [d]
2782   1552 38 00 00      mov c, 0
2783   1555 FD 77         inc b
2784   1557 FA FD FF      lea d, [bp + -3] ; $format_p
2785   155A FD 43         mov [d], b
2786   155C FD 7D         dec b
2787   155E 74            mov d, b
2788   155F 32            mov bl, [d]
2789   1560 A7 00         mov bh, 0
2790   1562 38 00 00      mov c, 0
2791   1565 E7            pop d
2792   1566 FD 3E         mov [d], bl
2793   1568             _if35_exit:
2794   1568             _if34_exit:
2795   1568             _for33_update:
2796   1568 0A 1E 12      jmp _for33_cond
2797   156B             _for33_exit:
2798   156B             ; *sp = '\0'; 
2799   156B FA FB FF      lea d, [bp + -5] ; $sp
2800   156E 2A            mov b, [d]
2801   156F 38 00 00      mov c, 0
2802   1572 D8            push b
2803   1573 FD 2E 00 00   mov32 cb, $00000000
2803   1577 00 00 
2804   1579 E7            pop d
2805   157A FD 3E         mov [d], bl
2806   157C             ; return sp - dest; // return total number of chars written 
2807   157C FA FB FF      lea d, [bp + -5] ; $sp
2808   157F 2A            mov b, [d]
2809   1580 38 00 00      mov c, 0
2810   1583             ; --- START TERMS
2811   1583 D7            push a
2812   1584 11            mov a, b
2813   1585 FA 05 00      lea d, [bp + 5] ; $dest
2814   1588 2A            mov b, [d]
2815   1589 38 00 00      mov c, 0
2816   158C 60            sub a, b
2817   158D 27            mov b, a
2818   158E E4            pop a
2819   158F             ; --- END TERMS
2820   158F F9            leave
2821   1590 09            ret
2822   1591             
2823   1591             err:
2824   1591 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2825   1594             ; print(e); 
2826   1594             ; --- START FUNCTION CALL
2827   1594 FA 05 00      lea d, [bp + 5] ; $e
2828   1597 2A            mov b, [d]
2829   1598 38 00 00      mov c, 0
2830   159B FD AB         swp b
2831   159D D8            push b
2832   159E 07 CC 1F      call print
2833   15A1 51 02 00      add sp, 2
2834   15A4             ; --- END FUNCTION CALL
2835   15A4 F9            leave
2836   15A5 09            ret
2837   15A6             
2838   15A6             printx32:
2839   15A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2840   15A9             
2841   15A9             ; --- BEGIN INLINE ASM SEGMENT
2842   15A9 FA 05 00      lea d, [bp + 5] ; $hex
2843   15AC 2B 02 00      mov b, [d+2]
2844   15AF 07 2F 23      call print_u16x
2845   15B2 2A            mov b, [d]
2846   15B3 07 2F 23      call print_u16x
2847   15B6             ; --- END INLINE ASM SEGMENT
2848   15B6             
2849   15B6 F9            leave
2850   15B7 09            ret
2851   15B8             
2852   15B8             printx16:
2853   15B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2854   15BB             
2855   15BB             ; --- BEGIN INLINE ASM SEGMENT
2856   15BB FA 05 00      lea d, [bp + 5] ; $hex
2857   15BE 2A            mov b, [d]
2858   15BF 07 2F 23      call print_u16x
2859   15C2             ; --- END INLINE ASM SEGMENT
2860   15C2             
2861   15C2 F9            leave
2862   15C3 09            ret
2863   15C4             
2864   15C4             printx8:
2865   15C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2866   15C7             
2867   15C7             ; --- BEGIN INLINE ASM SEGMENT
2868   15C7 FA 05 00      lea d, [bp + 5] ; $hex
2869   15CA 32            mov bl, [d]
2870   15CB 07 73 23      call print_u8x
2871   15CE             ; --- END INLINE ASM SEGMENT
2872   15CE             
2873   15CE F9            leave
2874   15CF 09            ret
2875   15D0             
2876   15D0             hex_str_to_int:
2877   15D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2878   15D3             ; int value = 0; 
2879   15D3 52 02 00      sub sp, 2
2880   15D6             ; --- START LOCAL VAR INITIALIZATION
2881   15D6 FA FF FF      lea d, [bp + -1] ; $value
2882   15D9 DA            push d
2883   15DA FD 2E 00 00   mov32 cb, $00000000
2883   15DE 00 00 
2884   15E0 E7            pop d
2885   15E1 FD 43         mov [d], b
2886   15E3             ; --- END LOCAL VAR INITIALIZATION
2887   15E3             ; int i; 
2888   15E3 52 02 00      sub sp, 2
2889   15E6             ; char hex_char; 
2890   15E6 52 01 00      sub sp, 1
2891   15E9             ; int len; 
2892   15E9 52 02 00      sub sp, 2
2893   15EC             ; len = strlen(hex_string); 
2894   15EC FA FA FF      lea d, [bp + -6] ; $len
2895   15EF DA            push d
2896   15F0             ; --- START FUNCTION CALL
2897   15F0 FA 05 00      lea d, [bp + 5] ; $hex_string
2898   15F3 2A            mov b, [d]
2899   15F4 38 00 00      mov c, 0
2900   15F7 FD AB         swp b
2901   15F9 D8            push b
2902   15FA 07 DA 08      call strlen
2903   15FD 51 02 00      add sp, 2
2904   1600             ; --- END FUNCTION CALL
2905   1600 E7            pop d
2906   1601 FD 43         mov [d], b
2907   1603             ; for (i = 0; i < len; i++) { 
2908   1603             _for40_init:
2909   1603 FA FD FF      lea d, [bp + -3] ; $i
2910   1606 DA            push d
2911   1607 FD 2E 00 00   mov32 cb, $00000000
2911   160B 00 00 
2912   160D E7            pop d
2913   160E FD 43         mov [d], b
2914   1610             _for40_cond:
2915   1610 FA FD FF      lea d, [bp + -3] ; $i
2916   1613 2A            mov b, [d]
2917   1614 38 00 00      mov c, 0
2918   1617             ; --- START RELATIONAL
2919   1617 D7            push a
2920   1618 11            mov a, b
2921   1619 FA FA FF      lea d, [bp + -6] ; $len
2922   161C 2A            mov b, [d]
2923   161D 38 00 00      mov c, 0
2924   1620 B0            cmp a, b
2925   1621 FD 73         slt ; < (signed)
2926   1623 E4            pop a
2927   1624             ; --- END RELATIONAL
2928   1624 C0 00 00      cmp b, 0
2929   1627 C6 74 17      je _for40_exit
2930   162A             _for40_block:
2931   162A             ; hex_char = hex_string[i]; 
2932   162A FA FC FF      lea d, [bp + -4] ; $hex_char
2933   162D DA            push d
2934   162E FA 05 00      lea d, [bp + 5] ; $hex_string
2935   1631 FD 2A         mov d, [d]
2936   1633 D7            push a
2937   1634 DA            push d
2938   1635 FA FD FF      lea d, [bp + -3] ; $i
2939   1638 2A            mov b, [d]
2940   1639 38 00 00      mov c, 0
2941   163C E7            pop d
2942   163D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2943   1641 E4            pop a
2944   1642 32            mov bl, [d]
2945   1643 A7 00         mov bh, 0
2946   1645 38 00 00      mov c, 0
2947   1648 E7            pop d
2948   1649 FD 3E         mov [d], bl
2949   164B             ; if (hex_char >= 'a' && hex_char <= 'f')  
2950   164B             _if41_cond:
2951   164B FA FC FF      lea d, [bp + -4] ; $hex_char
2952   164E 32            mov bl, [d]
2953   164F A7 00         mov bh, 0
2954   1651 38 00 00      mov c, 0
2955   1654             ; --- START RELATIONAL
2956   1654 D7            push a
2957   1655 11            mov a, b
2958   1656 FD 2E 61 00   mov32 cb, $00000061
2958   165A 00 00 
2959   165C B0            cmp a, b
2960   165D FD 80         sge ; >=
2961   165F E4            pop a
2962   1660             ; --- END RELATIONAL
2963   1660             ; --- START LOGICAL AND
2964   1660 D7            push a
2965   1661 11            mov a, b
2966   1662 FA FC FF      lea d, [bp + -4] ; $hex_char
2967   1665 32            mov bl, [d]
2968   1666 A7 00         mov bh, 0
2969   1668 38 00 00      mov c, 0
2970   166B             ; --- START RELATIONAL
2971   166B D7            push a
2972   166C 11            mov a, b
2973   166D FD 2E 66 00   mov32 cb, $00000066
2973   1671 00 00 
2974   1673 B0            cmp a, b
2975   1674 FD 74         sle ; <= (signed)
2976   1676 E4            pop a
2977   1677             ; --- END RELATIONAL
2978   1677 FD A7         sand a, b
2979   1679 E4            pop a
2980   167A             ; --- END LOGICAL AND
2981   167A C0 00 00      cmp b, 0
2982   167D C6 BD 16      je _if41_else
2983   1680             _if41_TRUE:
2984   1680             ; value = (value * 16) + (hex_char - 'a' + 10); 
2985   1680 FA FF FF      lea d, [bp + -1] ; $value
2986   1683 DA            push d
2987   1684 FA FF FF      lea d, [bp + -1] ; $value
2988   1687 2A            mov b, [d]
2989   1688 38 00 00      mov c, 0
2990   168B             ; --- START FACTORS
2991   168B D7            push a
2992   168C 11            mov a, b
2993   168D FD 2E 10 00   mov32 cb, $00000010
2993   1691 00 00 
2994   1693 AC            mul a, b ; *
2995   1694 11            mov a, b
2996   1695 27            mov b, a
2997   1696 E4            pop a
2998   1697             ; --- END FACTORS
2999   1697             ; --- START TERMS
3000   1697 D7            push a
3001   1698 11            mov a, b
3002   1699 FA FC FF      lea d, [bp + -4] ; $hex_char
3003   169C 32            mov bl, [d]
3004   169D A7 00         mov bh, 0
3005   169F 38 00 00      mov c, 0
3006   16A2             ; --- START TERMS
3007   16A2 D7            push a
3008   16A3 11            mov a, b
3009   16A4 FD 2E 61 00   mov32 cb, $00000061
3009   16A8 00 00 
3010   16AA 60            sub a, b
3011   16AB 27            mov b, a
3012   16AC 11            mov a, b
3013   16AD FD 2E 0A 00   mov32 cb, $0000000a
3013   16B1 00 00 
3014   16B3 56            add b, a
3015   16B4 E4            pop a
3016   16B5             ; --- END TERMS
3017   16B5 56            add b, a
3018   16B6 E4            pop a
3019   16B7             ; --- END TERMS
3020   16B7 E7            pop d
3021   16B8 FD 43         mov [d], b
3022   16BA 0A 61 17      jmp _if41_exit
3023   16BD             _if41_else:
3024   16BD             ; if (hex_char >= 'A' && hex_char <= 'F')  
3025   16BD             _if42_cond:
3026   16BD FA FC FF      lea d, [bp + -4] ; $hex_char
3027   16C0 32            mov bl, [d]
3028   16C1 A7 00         mov bh, 0
3029   16C3 38 00 00      mov c, 0
3030   16C6             ; --- START RELATIONAL
3031   16C6 D7            push a
3032   16C7 11            mov a, b
3033   16C8 FD 2E 41 00   mov32 cb, $00000041
3033   16CC 00 00 
3034   16CE B0            cmp a, b
3035   16CF FD 80         sge ; >=
3036   16D1 E4            pop a
3037   16D2             ; --- END RELATIONAL
3038   16D2             ; --- START LOGICAL AND
3039   16D2 D7            push a
3040   16D3 11            mov a, b
3041   16D4 FA FC FF      lea d, [bp + -4] ; $hex_char
3042   16D7 32            mov bl, [d]
3043   16D8 A7 00         mov bh, 0
3044   16DA 38 00 00      mov c, 0
3045   16DD             ; --- START RELATIONAL
3046   16DD D7            push a
3047   16DE 11            mov a, b
3048   16DF FD 2E 46 00   mov32 cb, $00000046
3048   16E3 00 00 
3049   16E5 B0            cmp a, b
3050   16E6 FD 74         sle ; <= (signed)
3051   16E8 E4            pop a
3052   16E9             ; --- END RELATIONAL
3053   16E9 FD A7         sand a, b
3054   16EB E4            pop a
3055   16EC             ; --- END LOGICAL AND
3056   16EC C0 00 00      cmp b, 0
3057   16EF C6 2F 17      je _if42_else
3058   16F2             _if42_TRUE:
3059   16F2             ; value = (value * 16) + (hex_char - 'A' + 10); 
3060   16F2 FA FF FF      lea d, [bp + -1] ; $value
3061   16F5 DA            push d
3062   16F6 FA FF FF      lea d, [bp + -1] ; $value
3063   16F9 2A            mov b, [d]
3064   16FA 38 00 00      mov c, 0
3065   16FD             ; --- START FACTORS
3066   16FD D7            push a
3067   16FE 11            mov a, b
3068   16FF FD 2E 10 00   mov32 cb, $00000010
3068   1703 00 00 
3069   1705 AC            mul a, b ; *
3070   1706 11            mov a, b
3071   1707 27            mov b, a
3072   1708 E4            pop a
3073   1709             ; --- END FACTORS
3074   1709             ; --- START TERMS
3075   1709 D7            push a
3076   170A 11            mov a, b
3077   170B FA FC FF      lea d, [bp + -4] ; $hex_char
3078   170E 32            mov bl, [d]
3079   170F A7 00         mov bh, 0
3080   1711 38 00 00      mov c, 0
3081   1714             ; --- START TERMS
3082   1714 D7            push a
3083   1715 11            mov a, b
3084   1716 FD 2E 41 00   mov32 cb, $00000041
3084   171A 00 00 
3085   171C 60            sub a, b
3086   171D 27            mov b, a
3087   171E 11            mov a, b
3088   171F FD 2E 0A 00   mov32 cb, $0000000a
3088   1723 00 00 
3089   1725 56            add b, a
3090   1726 E4            pop a
3091   1727             ; --- END TERMS
3092   1727 56            add b, a
3093   1728 E4            pop a
3094   1729             ; --- END TERMS
3095   1729 E7            pop d
3096   172A FD 43         mov [d], b
3097   172C 0A 61 17      jmp _if42_exit
3098   172F             _if42_else:
3099   172F             ; value = (value * 16) + (hex_char - '0'); 
3100   172F FA FF FF      lea d, [bp + -1] ; $value
3101   1732 DA            push d
3102   1733 FA FF FF      lea d, [bp + -1] ; $value
3103   1736 2A            mov b, [d]
3104   1737 38 00 00      mov c, 0
3105   173A             ; --- START FACTORS
3106   173A D7            push a
3107   173B 11            mov a, b
3108   173C FD 2E 10 00   mov32 cb, $00000010
3108   1740 00 00 
3109   1742 AC            mul a, b ; *
3110   1743 11            mov a, b
3111   1744 27            mov b, a
3112   1745 E4            pop a
3113   1746             ; --- END FACTORS
3114   1746             ; --- START TERMS
3115   1746 D7            push a
3116   1747 11            mov a, b
3117   1748 FA FC FF      lea d, [bp + -4] ; $hex_char
3118   174B 32            mov bl, [d]
3119   174C A7 00         mov bh, 0
3120   174E 38 00 00      mov c, 0
3121   1751             ; --- START TERMS
3122   1751 D7            push a
3123   1752 11            mov a, b
3124   1753 FD 2E 30 00   mov32 cb, $00000030
3124   1757 00 00 
3125   1759 60            sub a, b
3126   175A 27            mov b, a
3127   175B E4            pop a
3128   175C             ; --- END TERMS
3129   175C 56            add b, a
3130   175D E4            pop a
3131   175E             ; --- END TERMS
3132   175E E7            pop d
3133   175F FD 43         mov [d], b
3134   1761             _if42_exit:
3135   1761             _if41_exit:
3136   1761             _for40_update:
3137   1761 FA FD FF      lea d, [bp + -3] ; $i
3138   1764 2A            mov b, [d]
3139   1765 38 00 00      mov c, 0
3140   1768 11            mov a, b
3141   1769 FD 77         inc b
3142   176B FA FD FF      lea d, [bp + -3] ; $i
3143   176E FD 43         mov [d], b
3144   1770 27            mov b, a
3145   1771 0A 10 16      jmp _for40_cond
3146   1774             _for40_exit:
3147   1774             ; return value; 
3148   1774 FA FF FF      lea d, [bp + -1] ; $value
3149   1777 2A            mov b, [d]
3150   1778 38 00 00      mov c, 0
3151   177B F9            leave
3152   177C 09            ret
3153   177D             
3154   177D             gets:
3155   177D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3156   1780             
3157   1780             ; --- BEGIN INLINE ASM SEGMENT
3158   1780 FA 05 00      lea d, [bp + 5] ; $s
3159   1783 15            mov a, [d]
3160   1784 3C            mov d, a
3161   1785 07 94 21      call _gets
3162   1788             ; --- END INLINE ASM SEGMENT
3163   1788             
3164   1788             ; return strlen(s); 
3165   1788             ; --- START FUNCTION CALL
3166   1788 FA 05 00      lea d, [bp + 5] ; $s
3167   178B 2A            mov b, [d]
3168   178C 38 00 00      mov c, 0
3169   178F FD AB         swp b
3170   1791 D8            push b
3171   1792 07 DA 08      call strlen
3172   1795 51 02 00      add sp, 2
3173   1798             ; --- END FUNCTION CALL
3174   1798 F9            leave
3175   1799 09            ret
3176   179A             
3177   179A             print_signed:
3178   179A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3179   179D             ; char digits[5]; 
3180   179D 52 05 00      sub sp, 5
3181   17A0             ; int i = 0; 
3182   17A0 52 02 00      sub sp, 2
3183   17A3             ; --- START LOCAL VAR INITIALIZATION
3184   17A3 FA FA FF      lea d, [bp + -6] ; $i
3185   17A6 DA            push d
3186   17A7 FD 2E 00 00   mov32 cb, $00000000
3186   17AB 00 00 
3187   17AD E7            pop d
3188   17AE FD 43         mov [d], b
3189   17B0             ; --- END LOCAL VAR INITIALIZATION
3190   17B0             ; if (num < 0) { 
3191   17B0             _if43_cond:
3192   17B0 FA 05 00      lea d, [bp + 5] ; $num
3193   17B3 2A            mov b, [d]
3194   17B4 38 00 00      mov c, 0
3195   17B7             ; --- START RELATIONAL
3196   17B7 D7            push a
3197   17B8 11            mov a, b
3198   17B9 FD 2E 00 00   mov32 cb, $00000000
3198   17BD 00 00 
3199   17BF B0            cmp a, b
3200   17C0 FD 73         slt ; < (signed)
3201   17C2 E4            pop a
3202   17C3             ; --- END RELATIONAL
3203   17C3 C0 00 00      cmp b, 0
3204   17C6 C6 E9 17      je _if43_else
3205   17C9             _if43_TRUE:
3206   17C9             ; putchar('-'); 
3207   17C9             ; --- START FUNCTION CALL
3208   17C9 FD 2E 2D 00   mov32 cb, $0000002d
3208   17CD 00 00 
3209   17CF DD            push bl
3210   17D0 07 7E 1F      call putchar
3211   17D3 51 01 00      add sp, 1
3212   17D6             ; --- END FUNCTION CALL
3213   17D6             ; num = -num; 
3214   17D6 FA 05 00      lea d, [bp + 5] ; $num
3215   17D9 DA            push d
3216   17DA FA 05 00      lea d, [bp + 5] ; $num
3217   17DD 2A            mov b, [d]
3218   17DE 38 00 00      mov c, 0
3219   17E1 FD 97         neg b
3220   17E3 E7            pop d
3221   17E4 FD 43         mov [d], b
3222   17E6 0A 14 18      jmp _if43_exit
3223   17E9             _if43_else:
3224   17E9             ; if (num == 0) { 
3225   17E9             _if44_cond:
3226   17E9 FA 05 00      lea d, [bp + 5] ; $num
3227   17EC 2A            mov b, [d]
3228   17ED 38 00 00      mov c, 0
3229   17F0             ; --- START RELATIONAL
3230   17F0 D7            push a
3231   17F1 11            mov a, b
3232   17F2 FD 2E 00 00   mov32 cb, $00000000
3232   17F6 00 00 
3233   17F8 B0            cmp a, b
3234   17F9 FD 71         seq ; ==
3235   17FB E4            pop a
3236   17FC             ; --- END RELATIONAL
3237   17FC C0 00 00      cmp b, 0
3238   17FF C6 14 18      je _if44_exit
3239   1802             _if44_TRUE:
3240   1802             ; putchar('0'); 
3241   1802             ; --- START FUNCTION CALL
3242   1802 FD 2E 30 00   mov32 cb, $00000030
3242   1806 00 00 
3243   1808 DD            push bl
3244   1809 07 7E 1F      call putchar
3245   180C 51 01 00      add sp, 1
3246   180F             ; --- END FUNCTION CALL
3247   180F             ; return; 
3248   180F F9            leave
3249   1810 09            ret
3250   1811 0A 14 18      jmp _if44_exit
3251   1814             _if44_exit:
3252   1814             _if43_exit:
3253   1814             ; while (num > 0) { 
3254   1814             _while45_cond:
3255   1814 FA 05 00      lea d, [bp + 5] ; $num
3256   1817 2A            mov b, [d]
3257   1818 38 00 00      mov c, 0
3258   181B             ; --- START RELATIONAL
3259   181B D7            push a
3260   181C 11            mov a, b
3261   181D FD 2E 00 00   mov32 cb, $00000000
3261   1821 00 00 
3262   1823 B0            cmp a, b
3263   1824 FD 7F         sgt ; >
3264   1826 E4            pop a
3265   1827             ; --- END RELATIONAL
3266   1827 C0 00 00      cmp b, 0
3267   182A C6 89 18      je _while45_exit
3268   182D             _while45_block:
3269   182D             ; digits[i] = '0' + (num % 10); 
3270   182D FA FC FF      lea d, [bp + -4] ; $digits
3271   1830 D7            push a
3272   1831 DA            push d
3273   1832 FA FA FF      lea d, [bp + -6] ; $i
3274   1835 2A            mov b, [d]
3275   1836 38 00 00      mov c, 0
3276   1839 E7            pop d
3277   183A 5A            add d, b
3278   183B E4            pop a
3279   183C DA            push d
3280   183D FD 2E 30 00   mov32 cb, $00000030
3280   1841 00 00 
3281   1843             ; --- START TERMS
3282   1843 D7            push a
3283   1844 11            mov a, b
3284   1845 FA 05 00      lea d, [bp + 5] ; $num
3285   1848 2A            mov b, [d]
3286   1849 38 00 00      mov c, 0
3287   184C             ; --- START FACTORS
3288   184C D7            push a
3289   184D 11            mov a, b
3290   184E FD 2E 0A 00   mov32 cb, $0000000a
3290   1852 00 00 
3291   1854 AE            div a, b ; 
3292   1855 11            mov a, b
3293   1856 27            mov b, a
3294   1857 E4            pop a
3295   1858             ; --- END FACTORS
3296   1858 56            add b, a
3297   1859 E4            pop a
3298   185A             ; --- END TERMS
3299   185A E7            pop d
3300   185B FD 3E         mov [d], bl
3301   185D             ; num = num / 10; 
3302   185D FA 05 00      lea d, [bp + 5] ; $num
3303   1860 DA            push d
3304   1861 FA 05 00      lea d, [bp + 5] ; $num
3305   1864 2A            mov b, [d]
3306   1865 38 00 00      mov c, 0
3307   1868             ; --- START FACTORS
3308   1868 D7            push a
3309   1869 11            mov a, b
3310   186A FD 2E 0A 00   mov32 cb, $0000000a
3310   186E 00 00 
3311   1870 AE            div a, b
3312   1871 27            mov b, a
3313   1872 E4            pop a
3314   1873             ; --- END FACTORS
3315   1873 E7            pop d
3316   1874 FD 43         mov [d], b
3317   1876             ; i++; 
3318   1876 FA FA FF      lea d, [bp + -6] ; $i
3319   1879 2A            mov b, [d]
3320   187A 38 00 00      mov c, 0
3321   187D 11            mov a, b
3322   187E FD 77         inc b
3323   1880 FA FA FF      lea d, [bp + -6] ; $i
3324   1883 FD 43         mov [d], b
3325   1885 27            mov b, a
3326   1886 0A 14 18      jmp _while45_cond
3327   1889             _while45_exit:
3328   1889             ; while (i > 0) { 
3329   1889             _while46_cond:
3330   1889 FA FA FF      lea d, [bp + -6] ; $i
3331   188C 2A            mov b, [d]
3332   188D 38 00 00      mov c, 0
3333   1890             ; --- START RELATIONAL
3334   1890 D7            push a
3335   1891 11            mov a, b
3336   1892 FD 2E 00 00   mov32 cb, $00000000
3336   1896 00 00 
3337   1898 B0            cmp a, b
3338   1899 FD 7F         sgt ; >
3339   189B E4            pop a
3340   189C             ; --- END RELATIONAL
3341   189C C0 00 00      cmp b, 0
3342   189F C6 D1 18      je _while46_exit
3343   18A2             _while46_block:
3344   18A2             ; i--; 
3345   18A2 FA FA FF      lea d, [bp + -6] ; $i
3346   18A5 2A            mov b, [d]
3347   18A6 38 00 00      mov c, 0
3348   18A9 11            mov a, b
3349   18AA FD 7D         dec b
3350   18AC FA FA FF      lea d, [bp + -6] ; $i
3351   18AF FD 43         mov [d], b
3352   18B1 27            mov b, a
3353   18B2             ; putchar(digits[i]); 
3354   18B2             ; --- START FUNCTION CALL
3355   18B2 FA FC FF      lea d, [bp + -4] ; $digits
3356   18B5 D7            push a
3357   18B6 DA            push d
3358   18B7 FA FA FF      lea d, [bp + -6] ; $i
3359   18BA 2A            mov b, [d]
3360   18BB 38 00 00      mov c, 0
3361   18BE E7            pop d
3362   18BF 5A            add d, b
3363   18C0 E4            pop a
3364   18C1 32            mov bl, [d]
3365   18C2 A7 00         mov bh, 0
3366   18C4 38 00 00      mov c, 0
3367   18C7 DD            push bl
3368   18C8 07 7E 1F      call putchar
3369   18CB 51 01 00      add sp, 1
3370   18CE             ; --- END FUNCTION CALL
3371   18CE 0A 89 18      jmp _while46_cond
3372   18D1             _while46_exit:
3373   18D1 F9            leave
3374   18D2 09            ret
3375   18D3             
3376   18D3             print_signed_long:
3377   18D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3378   18D6             ; char digits[10]; 
3379   18D6 52 0A 00      sub sp, 10
3380   18D9             ; int i = 0; 
3381   18D9 52 02 00      sub sp, 2
3382   18DC             ; --- START LOCAL VAR INITIALIZATION
3383   18DC FA F5 FF      lea d, [bp + -11] ; $i
3384   18DF DA            push d
3385   18E0 FD 2E 00 00   mov32 cb, $00000000
3385   18E4 00 00 
3386   18E6 E7            pop d
3387   18E7 FD 43         mov [d], b
3388   18E9             ; --- END LOCAL VAR INITIALIZATION
3389   18E9             ; if (num < 0) { 
3390   18E9             _if47_cond:
3391   18E9 FA 05 00      lea d, [bp + 5] ; $num
3392   18EC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3393   18EF FD 39         mov c, b ; And place it into C
3394   18F1 2A            mov b, [d] ; Lower Word in B
3395   18F2             ; --- START RELATIONAL
3396   18F2 D7            push a
3397   18F3 FD D8         push g
3398   18F5 11            mov a, b
3399   18F6 FD 7A         mov g, c
3400   18F8 FD 2E 00 00   mov32 cb, $00000000
3400   18FC 00 00 
3401   18FE FD AF         cmp32 ga, cb
3402   1900 FD 73         slt ; <
3403   1902 FD F1         pop g
3404   1904 E4            pop a
3405   1905             ; --- END RELATIONAL
3406   1905 C0 00 00      cmp b, 0
3407   1908 C6 3C 19      je _if47_else
3408   190B             _if47_TRUE:
3409   190B             ; putchar('-'); 
3410   190B             ; --- START FUNCTION CALL
3411   190B FD 2E 2D 00   mov32 cb, $0000002d
3411   190F 00 00 
3412   1911 DD            push bl
3413   1912 07 7E 1F      call putchar
3414   1915 51 01 00      add sp, 1
3415   1918             ; --- END FUNCTION CALL
3416   1918             ; num = -num; 
3417   1918 FA 05 00      lea d, [bp + 5] ; $num
3418   191B DA            push d
3419   191C FA 05 00      lea d, [bp + 5] ; $num
3420   191F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3421   1922 FD 39         mov c, b ; And place it into C
3422   1924 2A            mov b, [d] ; Lower Word in B
3423   1925 12            mov a, c
3424   1926 95            not a
3425   1927 97            not b
3426   1928 55 01 00      add b, 1
3427   192B 5B 00 00      adc a, 0
3428   192E 39            mov c, a
3429   192F E7            pop d
3430   1930 FD 43         mov [d], b
3431   1932 26 00 00      mov b, 0
3432   1935 FD 44 02 00   mov [d + 2], b
3433   1939 0A 70 19      jmp _if47_exit
3434   193C             _if47_else:
3435   193C             ; if (num == 0) { 
3436   193C             _if48_cond:
3437   193C FA 05 00      lea d, [bp + 5] ; $num
3438   193F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3439   1942 FD 39         mov c, b ; And place it into C
3440   1944 2A            mov b, [d] ; Lower Word in B
3441   1945             ; --- START RELATIONAL
3442   1945 D7            push a
3443   1946 FD D8         push g
3444   1948 11            mov a, b
3445   1949 FD 7A         mov g, c
3446   194B FD 2E 00 00   mov32 cb, $00000000
3446   194F 00 00 
3447   1951 FD AF         cmp32 ga, cb
3448   1953 FD 71         seq ; ==
3449   1955 FD F1         pop g
3450   1957 E4            pop a
3451   1958             ; --- END RELATIONAL
3452   1958 C0 00 00      cmp b, 0
3453   195B C6 70 19      je _if48_exit
3454   195E             _if48_TRUE:
3455   195E             ; putchar('0'); 
3456   195E             ; --- START FUNCTION CALL
3457   195E FD 2E 30 00   mov32 cb, $00000030
3457   1962 00 00 
3458   1964 DD            push bl
3459   1965 07 7E 1F      call putchar
3460   1968 51 01 00      add sp, 1
3461   196B             ; --- END FUNCTION CALL
3462   196B             ; return; 
3463   196B F9            leave
3464   196C 09            ret
3465   196D 0A 70 19      jmp _if48_exit
3466   1970             _if48_exit:
3467   1970             _if47_exit:
3468   1970             ; while (num > 0) { 
3469   1970             _while49_cond:
3470   1970 FA 05 00      lea d, [bp + 5] ; $num
3471   1973 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3472   1976 FD 39         mov c, b ; And place it into C
3473   1978 2A            mov b, [d] ; Lower Word in B
3474   1979             ; --- START RELATIONAL
3475   1979 D7            push a
3476   197A FD D8         push g
3477   197C 11            mov a, b
3478   197D FD 7A         mov g, c
3479   197F FD 2E 00 00   mov32 cb, $00000000
3479   1983 00 00 
3480   1985 FD AF         cmp32 ga, cb
3481   1987 FD 7F         sgt
3482   1989 FD F1         pop g
3483   198B E4            pop a
3484   198C             ; --- END RELATIONAL
3485   198C C0 00 00      cmp b, 0
3486   198F C6 F8 19      je _while49_exit
3487   1992             _while49_block:
3488   1992             ; digits[i] = '0' + (num % 10); 
3489   1992 FA F7 FF      lea d, [bp + -9] ; $digits
3490   1995 D7            push a
3491   1996 DA            push d
3492   1997 FA F5 FF      lea d, [bp + -11] ; $i
3493   199A 2A            mov b, [d]
3494   199B 38 00 00      mov c, 0
3495   199E E7            pop d
3496   199F 5A            add d, b
3497   19A0 E4            pop a
3498   19A1 DA            push d
3499   19A2 FD 2E 30 00   mov32 cb, $00000030
3499   19A6 00 00 
3500   19A8             ; --- START TERMS
3501   19A8 D7            push a
3502   19A9 11            mov a, b
3503   19AA FA 05 00      lea d, [bp + 5] ; $num
3504   19AD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3505   19B0 FD 39         mov c, b ; And place it into C
3506   19B2 2A            mov b, [d] ; Lower Word in B
3507   19B3             ; --- START FACTORS
3508   19B3 D7            push a
3509   19B4 11            mov a, b
3510   19B5 FD 2E 0A 00   mov32 cb, $0000000a
3510   19B9 00 00 
3511   19BB AE            div a, b ; 
3512   19BC 11            mov a, b
3513   19BD 27            mov b, a
3514   19BE E4            pop a
3515   19BF             ; --- END FACTORS
3516   19BF FD 15         add32 cb, ga
3517   19C1 E4            pop a
3518   19C2             ; --- END TERMS
3519   19C2 E7            pop d
3520   19C3 FD 3E         mov [d], bl
3521   19C5             ; num = num / 10; 
3522   19C5 FA 05 00      lea d, [bp + 5] ; $num
3523   19C8 DA            push d
3524   19C9 FA 05 00      lea d, [bp + 5] ; $num
3525   19CC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3526   19CF FD 39         mov c, b ; And place it into C
3527   19D1 2A            mov b, [d] ; Lower Word in B
3528   19D2             ; --- START FACTORS
3529   19D2 D7            push a
3530   19D3 11            mov a, b
3531   19D4 FD 2E 0A 00   mov32 cb, $0000000a
3531   19D8 00 00 
3532   19DA AE            div a, b
3533   19DB 27            mov b, a
3534   19DC E4            pop a
3535   19DD             ; --- END FACTORS
3536   19DD E7            pop d
3537   19DE FD 43         mov [d], b
3538   19E0 28            mov b, c
3539   19E1 FD 44 02 00   mov [d + 2], b
3540   19E5             ; i++; 
3541   19E5 FA F5 FF      lea d, [bp + -11] ; $i
3542   19E8 2A            mov b, [d]
3543   19E9 38 00 00      mov c, 0
3544   19EC 11            mov a, b
3545   19ED FD 77         inc b
3546   19EF FA F5 FF      lea d, [bp + -11] ; $i
3547   19F2 FD 43         mov [d], b
3548   19F4 27            mov b, a
3549   19F5 0A 70 19      jmp _while49_cond
3550   19F8             _while49_exit:
3551   19F8             ; while (i > 0) { 
3552   19F8             _while50_cond:
3553   19F8 FA F5 FF      lea d, [bp + -11] ; $i
3554   19FB 2A            mov b, [d]
3555   19FC 38 00 00      mov c, 0
3556   19FF             ; --- START RELATIONAL
3557   19FF D7            push a
3558   1A00 11            mov a, b
3559   1A01 FD 2E 00 00   mov32 cb, $00000000
3559   1A05 00 00 
3560   1A07 B0            cmp a, b
3561   1A08 FD 7F         sgt ; >
3562   1A0A E4            pop a
3563   1A0B             ; --- END RELATIONAL
3564   1A0B C0 00 00      cmp b, 0
3565   1A0E C6 40 1A      je _while50_exit
3566   1A11             _while50_block:
3567   1A11             ; i--; 
3568   1A11 FA F5 FF      lea d, [bp + -11] ; $i
3569   1A14 2A            mov b, [d]
3570   1A15 38 00 00      mov c, 0
3571   1A18 11            mov a, b
3572   1A19 FD 7D         dec b
3573   1A1B FA F5 FF      lea d, [bp + -11] ; $i
3574   1A1E FD 43         mov [d], b
3575   1A20 27            mov b, a
3576   1A21             ; putchar(digits[i]); 
3577   1A21             ; --- START FUNCTION CALL
3578   1A21 FA F7 FF      lea d, [bp + -9] ; $digits
3579   1A24 D7            push a
3580   1A25 DA            push d
3581   1A26 FA F5 FF      lea d, [bp + -11] ; $i
3582   1A29 2A            mov b, [d]
3583   1A2A 38 00 00      mov c, 0
3584   1A2D E7            pop d
3585   1A2E 5A            add d, b
3586   1A2F E4            pop a
3587   1A30 32            mov bl, [d]
3588   1A31 A7 00         mov bh, 0
3589   1A33 38 00 00      mov c, 0
3590   1A36 DD            push bl
3591   1A37 07 7E 1F      call putchar
3592   1A3A 51 01 00      add sp, 1
3593   1A3D             ; --- END FUNCTION CALL
3594   1A3D 0A F8 19      jmp _while50_cond
3595   1A40             _while50_exit:
3596   1A40 F9            leave
3597   1A41 09            ret
3598   1A42             
3599   1A42             print_unsigned_long:
3600   1A42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3601   1A45             ; char digits[10]; 
3602   1A45 52 0A 00      sub sp, 10
3603   1A48             ; int i; 
3604   1A48 52 02 00      sub sp, 2
3605   1A4B             ; i = 0; 
3606   1A4B FA F5 FF      lea d, [bp + -11] ; $i
3607   1A4E DA            push d
3608   1A4F FD 2E 00 00   mov32 cb, $00000000
3608   1A53 00 00 
3609   1A55 E7            pop d
3610   1A56 FD 43         mov [d], b
3611   1A58             ; if(num == 0){ 
3612   1A58             _if51_cond:
3613   1A58 FA 05 00      lea d, [bp + 5] ; $num
3614   1A5B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3615   1A5E FD 39         mov c, b ; And place it into C
3616   1A60 2A            mov b, [d] ; Lower Word in B
3617   1A61             ; --- START RELATIONAL
3618   1A61 D7            push a
3619   1A62 FD D8         push g
3620   1A64 11            mov a, b
3621   1A65 FD 7A         mov g, c
3622   1A67 FD 2E 00 00   mov32 cb, $00000000
3622   1A6B 00 00 
3623   1A6D FD AF         cmp32 ga, cb
3624   1A6F FD 71         seq ; ==
3625   1A71 FD F1         pop g
3626   1A73 E4            pop a
3627   1A74             ; --- END RELATIONAL
3628   1A74 C0 00 00      cmp b, 0
3629   1A77 C6 8C 1A      je _if51_exit
3630   1A7A             _if51_TRUE:
3631   1A7A             ; putchar('0'); 
3632   1A7A             ; --- START FUNCTION CALL
3633   1A7A FD 2E 30 00   mov32 cb, $00000030
3633   1A7E 00 00 
3634   1A80 DD            push bl
3635   1A81 07 7E 1F      call putchar
3636   1A84 51 01 00      add sp, 1
3637   1A87             ; --- END FUNCTION CALL
3638   1A87             ; return; 
3639   1A87 F9            leave
3640   1A88 09            ret
3641   1A89 0A 8C 1A      jmp _if51_exit
3642   1A8C             _if51_exit:
3643   1A8C             ; while (num > 0) { 
3644   1A8C             _while52_cond:
3645   1A8C FA 05 00      lea d, [bp + 5] ; $num
3646   1A8F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3647   1A92 FD 39         mov c, b ; And place it into C
3648   1A94 2A            mov b, [d] ; Lower Word in B
3649   1A95             ; --- START RELATIONAL
3650   1A95 D7            push a
3651   1A96 FD D8         push g
3652   1A98 11            mov a, b
3653   1A99 FD 7A         mov g, c
3654   1A9B FD 2E 00 00   mov32 cb, $00000000
3654   1A9F 00 00 
3655   1AA1 FD AF         cmp32 ga, cb
3656   1AA3 FD 81         sgu
3657   1AA5 FD F1         pop g
3658   1AA7 E4            pop a
3659   1AA8             ; --- END RELATIONAL
3660   1AA8 C0 00 00      cmp b, 0
3661   1AAB C6 14 1B      je _while52_exit
3662   1AAE             _while52_block:
3663   1AAE             ; digits[i] = '0' + (num % 10); 
3664   1AAE FA F7 FF      lea d, [bp + -9] ; $digits
3665   1AB1 D7            push a
3666   1AB2 DA            push d
3667   1AB3 FA F5 FF      lea d, [bp + -11] ; $i
3668   1AB6 2A            mov b, [d]
3669   1AB7 38 00 00      mov c, 0
3670   1ABA E7            pop d
3671   1ABB 5A            add d, b
3672   1ABC E4            pop a
3673   1ABD DA            push d
3674   1ABE FD 2E 30 00   mov32 cb, $00000030
3674   1AC2 00 00 
3675   1AC4             ; --- START TERMS
3676   1AC4 D7            push a
3677   1AC5 11            mov a, b
3678   1AC6 FA 05 00      lea d, [bp + 5] ; $num
3679   1AC9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3680   1ACC FD 39         mov c, b ; And place it into C
3681   1ACE 2A            mov b, [d] ; Lower Word in B
3682   1ACF             ; --- START FACTORS
3683   1ACF D7            push a
3684   1AD0 11            mov a, b
3685   1AD1 FD 2E 0A 00   mov32 cb, $0000000a
3685   1AD5 00 00 
3686   1AD7 AE            div a, b ; 
3687   1AD8 11            mov a, b
3688   1AD9 27            mov b, a
3689   1ADA E4            pop a
3690   1ADB             ; --- END FACTORS
3691   1ADB FD 15         add32 cb, ga
3692   1ADD E4            pop a
3693   1ADE             ; --- END TERMS
3694   1ADE E7            pop d
3695   1ADF FD 3E         mov [d], bl
3696   1AE1             ; num = num / 10; 
3697   1AE1 FA 05 00      lea d, [bp + 5] ; $num
3698   1AE4 DA            push d
3699   1AE5 FA 05 00      lea d, [bp + 5] ; $num
3700   1AE8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3701   1AEB FD 39         mov c, b ; And place it into C
3702   1AED 2A            mov b, [d] ; Lower Word in B
3703   1AEE             ; --- START FACTORS
3704   1AEE D7            push a
3705   1AEF 11            mov a, b
3706   1AF0 FD 2E 0A 00   mov32 cb, $0000000a
3706   1AF4 00 00 
3707   1AF6 AE            div a, b
3708   1AF7 27            mov b, a
3709   1AF8 E4            pop a
3710   1AF9             ; --- END FACTORS
3711   1AF9 E7            pop d
3712   1AFA FD 43         mov [d], b
3713   1AFC 28            mov b, c
3714   1AFD FD 44 02 00   mov [d + 2], b
3715   1B01             ; i++; 
3716   1B01 FA F5 FF      lea d, [bp + -11] ; $i
3717   1B04 2A            mov b, [d]
3718   1B05 38 00 00      mov c, 0
3719   1B08 11            mov a, b
3720   1B09 FD 77         inc b
3721   1B0B FA F5 FF      lea d, [bp + -11] ; $i
3722   1B0E FD 43         mov [d], b
3723   1B10 27            mov b, a
3724   1B11 0A 8C 1A      jmp _while52_cond
3725   1B14             _while52_exit:
3726   1B14             ; while (i > 0) { 
3727   1B14             _while53_cond:
3728   1B14 FA F5 FF      lea d, [bp + -11] ; $i
3729   1B17 2A            mov b, [d]
3730   1B18 38 00 00      mov c, 0
3731   1B1B             ; --- START RELATIONAL
3732   1B1B D7            push a
3733   1B1C 11            mov a, b
3734   1B1D FD 2E 00 00   mov32 cb, $00000000
3734   1B21 00 00 
3735   1B23 B0            cmp a, b
3736   1B24 FD 7F         sgt ; >
3737   1B26 E4            pop a
3738   1B27             ; --- END RELATIONAL
3739   1B27 C0 00 00      cmp b, 0
3740   1B2A C6 5C 1B      je _while53_exit
3741   1B2D             _while53_block:
3742   1B2D             ; i--; 
3743   1B2D FA F5 FF      lea d, [bp + -11] ; $i
3744   1B30 2A            mov b, [d]
3745   1B31 38 00 00      mov c, 0
3746   1B34 11            mov a, b
3747   1B35 FD 7D         dec b
3748   1B37 FA F5 FF      lea d, [bp + -11] ; $i
3749   1B3A FD 43         mov [d], b
3750   1B3C 27            mov b, a
3751   1B3D             ; putchar(digits[i]); 
3752   1B3D             ; --- START FUNCTION CALL
3753   1B3D FA F7 FF      lea d, [bp + -9] ; $digits
3754   1B40 D7            push a
3755   1B41 DA            push d
3756   1B42 FA F5 FF      lea d, [bp + -11] ; $i
3757   1B45 2A            mov b, [d]
3758   1B46 38 00 00      mov c, 0
3759   1B49 E7            pop d
3760   1B4A 5A            add d, b
3761   1B4B E4            pop a
3762   1B4C 32            mov bl, [d]
3763   1B4D A7 00         mov bh, 0
3764   1B4F 38 00 00      mov c, 0
3765   1B52 DD            push bl
3766   1B53 07 7E 1F      call putchar
3767   1B56 51 01 00      add sp, 1
3768   1B59             ; --- END FUNCTION CALL
3769   1B59 0A 14 1B      jmp _while53_cond
3770   1B5C             _while53_exit:
3771   1B5C F9            leave
3772   1B5D 09            ret
3773   1B5E             
3774   1B5E             sprint_unsigned:
3775   1B5E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3776   1B61             ; char digits[5]; 
3777   1B61 52 05 00      sub sp, 5
3778   1B64             ; int i; 
3779   1B64 52 02 00      sub sp, 2
3780   1B67             ; int len = 0; 
3781   1B67 52 02 00      sub sp, 2
3782   1B6A             ; --- START LOCAL VAR INITIALIZATION
3783   1B6A FA F8 FF      lea d, [bp + -8] ; $len
3784   1B6D DA            push d
3785   1B6E FD 2E 00 00   mov32 cb, $00000000
3785   1B72 00 00 
3786   1B74 E7            pop d
3787   1B75 FD 43         mov [d], b
3788   1B77             ; --- END LOCAL VAR INITIALIZATION
3789   1B77             ; i = 0; 
3790   1B77 FA FA FF      lea d, [bp + -6] ; $i
3791   1B7A DA            push d
3792   1B7B FD 2E 00 00   mov32 cb, $00000000
3792   1B7F 00 00 
3793   1B81 E7            pop d
3794   1B82 FD 43         mov [d], b
3795   1B84             ; if(num == 0){ 
3796   1B84             _if54_cond:
3797   1B84 FA 07 00      lea d, [bp + 7] ; $num
3798   1B87 2A            mov b, [d]
3799   1B88 38 00 00      mov c, 0
3800   1B8B             ; --- START RELATIONAL
3801   1B8B D7            push a
3802   1B8C 11            mov a, b
3803   1B8D FD 2E 00 00   mov32 cb, $00000000
3803   1B91 00 00 
3804   1B93 B0            cmp a, b
3805   1B94 FD 71         seq ; ==
3806   1B96 E4            pop a
3807   1B97             ; --- END RELATIONAL
3808   1B97 C0 00 00      cmp b, 0
3809   1B9A C6 C2 1B      je _if54_exit
3810   1B9D             _if54_TRUE:
3811   1B9D             ; *dest++ = '0'; 
3812   1B9D FA 05 00      lea d, [bp + 5] ; $dest
3813   1BA0 2A            mov b, [d]
3814   1BA1 38 00 00      mov c, 0
3815   1BA4 FD 77         inc b
3816   1BA6 FA 05 00      lea d, [bp + 5] ; $dest
3817   1BA9 FD 43         mov [d], b
3818   1BAB FD 7D         dec b
3819   1BAD D8            push b
3820   1BAE FD 2E 30 00   mov32 cb, $00000030
3820   1BB2 00 00 
3821   1BB4 E7            pop d
3822   1BB5 FD 3E         mov [d], bl
3823   1BB7             ; return 1; 
3824   1BB7 FD 2E 01 00   mov32 cb, $00000001
3824   1BBB 00 00 
3825   1BBD F9            leave
3826   1BBE 09            ret
3827   1BBF 0A C2 1B      jmp _if54_exit
3828   1BC2             _if54_exit:
3829   1BC2             ; while (num > 0) { 
3830   1BC2             _while55_cond:
3831   1BC2 FA 07 00      lea d, [bp + 7] ; $num
3832   1BC5 2A            mov b, [d]
3833   1BC6 38 00 00      mov c, 0
3834   1BC9             ; --- START RELATIONAL
3835   1BC9 D7            push a
3836   1BCA 11            mov a, b
3837   1BCB FD 2E 00 00   mov32 cb, $00000000
3837   1BCF 00 00 
3838   1BD1 B0            cmp a, b
3839   1BD2 FD 81         sgu ; > (unsigned)
3840   1BD4 E4            pop a
3841   1BD5             ; --- END RELATIONAL
3842   1BD5 C0 00 00      cmp b, 0
3843   1BD8 C6 37 1C      je _while55_exit
3844   1BDB             _while55_block:
3845   1BDB             ; digits[i] = '0' + (num % 10); 
3846   1BDB FA FC FF      lea d, [bp + -4] ; $digits
3847   1BDE D7            push a
3848   1BDF DA            push d
3849   1BE0 FA FA FF      lea d, [bp + -6] ; $i
3850   1BE3 2A            mov b, [d]
3851   1BE4 38 00 00      mov c, 0
3852   1BE7 E7            pop d
3853   1BE8 5A            add d, b
3854   1BE9 E4            pop a
3855   1BEA DA            push d
3856   1BEB FD 2E 30 00   mov32 cb, $00000030
3856   1BEF 00 00 
3857   1BF1             ; --- START TERMS
3858   1BF1 D7            push a
3859   1BF2 11            mov a, b
3860   1BF3 FA 07 00      lea d, [bp + 7] ; $num
3861   1BF6 2A            mov b, [d]
3862   1BF7 38 00 00      mov c, 0
3863   1BFA             ; --- START FACTORS
3864   1BFA D7            push a
3865   1BFB 11            mov a, b
3866   1BFC FD 2E 0A 00   mov32 cb, $0000000a
3866   1C00 00 00 
3867   1C02 AE            div a, b ; 
3868   1C03 11            mov a, b
3869   1C04 27            mov b, a
3870   1C05 E4            pop a
3871   1C06             ; --- END FACTORS
3872   1C06 56            add b, a
3873   1C07 E4            pop a
3874   1C08             ; --- END TERMS
3875   1C08 E7            pop d
3876   1C09 FD 3E         mov [d], bl
3877   1C0B             ; num = num / 10; 
3878   1C0B FA 07 00      lea d, [bp + 7] ; $num
3879   1C0E DA            push d
3880   1C0F FA 07 00      lea d, [bp + 7] ; $num
3881   1C12 2A            mov b, [d]
3882   1C13 38 00 00      mov c, 0
3883   1C16             ; --- START FACTORS
3884   1C16 D7            push a
3885   1C17 11            mov a, b
3886   1C18 FD 2E 0A 00   mov32 cb, $0000000a
3886   1C1C 00 00 
3887   1C1E AE            div a, b
3888   1C1F 27            mov b, a
3889   1C20 E4            pop a
3890   1C21             ; --- END FACTORS
3891   1C21 E7            pop d
3892   1C22 FD 43         mov [d], b
3893   1C24             ; i++; 
3894   1C24 FA FA FF      lea d, [bp + -6] ; $i
3895   1C27 2A            mov b, [d]
3896   1C28 38 00 00      mov c, 0
3897   1C2B 11            mov a, b
3898   1C2C FD 77         inc b
3899   1C2E FA FA FF      lea d, [bp + -6] ; $i
3900   1C31 FD 43         mov [d], b
3901   1C33 27            mov b, a
3902   1C34 0A C2 1B      jmp _while55_cond
3903   1C37             _while55_exit:
3904   1C37             ; while (i > 0) { 
3905   1C37             _while56_cond:
3906   1C37 FA FA FF      lea d, [bp + -6] ; $i
3907   1C3A 2A            mov b, [d]
3908   1C3B 38 00 00      mov c, 0
3909   1C3E             ; --- START RELATIONAL
3910   1C3E D7            push a
3911   1C3F 11            mov a, b
3912   1C40 FD 2E 00 00   mov32 cb, $00000000
3912   1C44 00 00 
3913   1C46 B0            cmp a, b
3914   1C47 FD 7F         sgt ; >
3915   1C49 E4            pop a
3916   1C4A             ; --- END RELATIONAL
3917   1C4A C0 00 00      cmp b, 0
3918   1C4D C6 9C 1C      je _while56_exit
3919   1C50             _while56_block:
3920   1C50             ; i--; 
3921   1C50 FA FA FF      lea d, [bp + -6] ; $i
3922   1C53 2A            mov b, [d]
3923   1C54 38 00 00      mov c, 0
3924   1C57 11            mov a, b
3925   1C58 FD 7D         dec b
3926   1C5A FA FA FF      lea d, [bp + -6] ; $i
3927   1C5D FD 43         mov [d], b
3928   1C5F 27            mov b, a
3929   1C60             ; *dest++ = digits[i]; 
3930   1C60 FA 05 00      lea d, [bp + 5] ; $dest
3931   1C63 2A            mov b, [d]
3932   1C64 38 00 00      mov c, 0
3933   1C67 FD 77         inc b
3934   1C69 FA 05 00      lea d, [bp + 5] ; $dest
3935   1C6C FD 43         mov [d], b
3936   1C6E FD 7D         dec b
3937   1C70 D8            push b
3938   1C71 FA FC FF      lea d, [bp + -4] ; $digits
3939   1C74 D7            push a
3940   1C75 DA            push d
3941   1C76 FA FA FF      lea d, [bp + -6] ; $i
3942   1C79 2A            mov b, [d]
3943   1C7A 38 00 00      mov c, 0
3944   1C7D E7            pop d
3945   1C7E 5A            add d, b
3946   1C7F E4            pop a
3947   1C80 32            mov bl, [d]
3948   1C81 A7 00         mov bh, 0
3949   1C83 38 00 00      mov c, 0
3950   1C86 E7            pop d
3951   1C87 FD 3E         mov [d], bl
3952   1C89             ; len++; 
3953   1C89 FA F8 FF      lea d, [bp + -8] ; $len
3954   1C8C 2A            mov b, [d]
3955   1C8D 38 00 00      mov c, 0
3956   1C90 11            mov a, b
3957   1C91 FD 77         inc b
3958   1C93 FA F8 FF      lea d, [bp + -8] ; $len
3959   1C96 FD 43         mov [d], b
3960   1C98 27            mov b, a
3961   1C99 0A 37 1C      jmp _while56_cond
3962   1C9C             _while56_exit:
3963   1C9C             ; *dest = '\0'; 
3964   1C9C FA 05 00      lea d, [bp + 5] ; $dest
3965   1C9F 2A            mov b, [d]
3966   1CA0 38 00 00      mov c, 0
3967   1CA3 D8            push b
3968   1CA4 FD 2E 00 00   mov32 cb, $00000000
3968   1CA8 00 00 
3969   1CAA E7            pop d
3970   1CAB FD 3E         mov [d], bl
3971   1CAD             ; return len; 
3972   1CAD FA F8 FF      lea d, [bp + -8] ; $len
3973   1CB0 2A            mov b, [d]
3974   1CB1 38 00 00      mov c, 0
3975   1CB4 F9            leave
3976   1CB5 09            ret
3977   1CB6             
3978   1CB6             print_unsigned:
3979   1CB6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3980   1CB9             ; char digits[5]; 
3981   1CB9 52 05 00      sub sp, 5
3982   1CBC             ; int i; 
3983   1CBC 52 02 00      sub sp, 2
3984   1CBF             ; i = 0; 
3985   1CBF FA FA FF      lea d, [bp + -6] ; $i
3986   1CC2 DA            push d
3987   1CC3 FD 2E 00 00   mov32 cb, $00000000
3987   1CC7 00 00 
3988   1CC9 E7            pop d
3989   1CCA FD 43         mov [d], b
3990   1CCC             ; if(num == 0){ 
3991   1CCC             _if57_cond:
3992   1CCC FA 05 00      lea d, [bp + 5] ; $num
3993   1CCF 2A            mov b, [d]
3994   1CD0 38 00 00      mov c, 0
3995   1CD3             ; --- START RELATIONAL
3996   1CD3 D7            push a
3997   1CD4 11            mov a, b
3998   1CD5 FD 2E 00 00   mov32 cb, $00000000
3998   1CD9 00 00 
3999   1CDB B0            cmp a, b
4000   1CDC FD 71         seq ; ==
4001   1CDE E4            pop a
4002   1CDF             ; --- END RELATIONAL
4003   1CDF C0 00 00      cmp b, 0
4004   1CE2 C6 F7 1C      je _if57_exit
4005   1CE5             _if57_TRUE:
4006   1CE5             ; putchar('0'); 
4007   1CE5             ; --- START FUNCTION CALL
4008   1CE5 FD 2E 30 00   mov32 cb, $00000030
4008   1CE9 00 00 
4009   1CEB DD            push bl
4010   1CEC 07 7E 1F      call putchar
4011   1CEF 51 01 00      add sp, 1
4012   1CF2             ; --- END FUNCTION CALL
4013   1CF2             ; return; 
4014   1CF2 F9            leave
4015   1CF3 09            ret
4016   1CF4 0A F7 1C      jmp _if57_exit
4017   1CF7             _if57_exit:
4018   1CF7             ; while (num > 0) { 
4019   1CF7             _while58_cond:
4020   1CF7 FA 05 00      lea d, [bp + 5] ; $num
4021   1CFA 2A            mov b, [d]
4022   1CFB 38 00 00      mov c, 0
4023   1CFE             ; --- START RELATIONAL
4024   1CFE D7            push a
4025   1CFF 11            mov a, b
4026   1D00 FD 2E 00 00   mov32 cb, $00000000
4026   1D04 00 00 
4027   1D06 B0            cmp a, b
4028   1D07 FD 81         sgu ; > (unsigned)
4029   1D09 E4            pop a
4030   1D0A             ; --- END RELATIONAL
4031   1D0A C0 00 00      cmp b, 0
4032   1D0D C6 6C 1D      je _while58_exit
4033   1D10             _while58_block:
4034   1D10             ; digits[i] = '0' + (num % 10); 
4035   1D10 FA FC FF      lea d, [bp + -4] ; $digits
4036   1D13 D7            push a
4037   1D14 DA            push d
4038   1D15 FA FA FF      lea d, [bp + -6] ; $i
4039   1D18 2A            mov b, [d]
4040   1D19 38 00 00      mov c, 0
4041   1D1C E7            pop d
4042   1D1D 5A            add d, b
4043   1D1E E4            pop a
4044   1D1F DA            push d
4045   1D20 FD 2E 30 00   mov32 cb, $00000030
4045   1D24 00 00 
4046   1D26             ; --- START TERMS
4047   1D26 D7            push a
4048   1D27 11            mov a, b
4049   1D28 FA 05 00      lea d, [bp + 5] ; $num
4050   1D2B 2A            mov b, [d]
4051   1D2C 38 00 00      mov c, 0
4052   1D2F             ; --- START FACTORS
4053   1D2F D7            push a
4054   1D30 11            mov a, b
4055   1D31 FD 2E 0A 00   mov32 cb, $0000000a
4055   1D35 00 00 
4056   1D37 AE            div a, b ; 
4057   1D38 11            mov a, b
4058   1D39 27            mov b, a
4059   1D3A E4            pop a
4060   1D3B             ; --- END FACTORS
4061   1D3B 56            add b, a
4062   1D3C E4            pop a
4063   1D3D             ; --- END TERMS
4064   1D3D E7            pop d
4065   1D3E FD 3E         mov [d], bl
4066   1D40             ; num = num / 10; 
4067   1D40 FA 05 00      lea d, [bp + 5] ; $num
4068   1D43 DA            push d
4069   1D44 FA 05 00      lea d, [bp + 5] ; $num
4070   1D47 2A            mov b, [d]
4071   1D48 38 00 00      mov c, 0
4072   1D4B             ; --- START FACTORS
4073   1D4B D7            push a
4074   1D4C 11            mov a, b
4075   1D4D FD 2E 0A 00   mov32 cb, $0000000a
4075   1D51 00 00 
4076   1D53 AE            div a, b
4077   1D54 27            mov b, a
4078   1D55 E4            pop a
4079   1D56             ; --- END FACTORS
4080   1D56 E7            pop d
4081   1D57 FD 43         mov [d], b
4082   1D59             ; i++; 
4083   1D59 FA FA FF      lea d, [bp + -6] ; $i
4084   1D5C 2A            mov b, [d]
4085   1D5D 38 00 00      mov c, 0
4086   1D60 11            mov a, b
4087   1D61 FD 77         inc b
4088   1D63 FA FA FF      lea d, [bp + -6] ; $i
4089   1D66 FD 43         mov [d], b
4090   1D68 27            mov b, a
4091   1D69 0A F7 1C      jmp _while58_cond
4092   1D6C             _while58_exit:
4093   1D6C             ; while (i > 0) { 
4094   1D6C             _while59_cond:
4095   1D6C FA FA FF      lea d, [bp + -6] ; $i
4096   1D6F 2A            mov b, [d]
4097   1D70 38 00 00      mov c, 0
4098   1D73             ; --- START RELATIONAL
4099   1D73 D7            push a
4100   1D74 11            mov a, b
4101   1D75 FD 2E 00 00   mov32 cb, $00000000
4101   1D79 00 00 
4102   1D7B B0            cmp a, b
4103   1D7C FD 7F         sgt ; >
4104   1D7E E4            pop a
4105   1D7F             ; --- END RELATIONAL
4106   1D7F C0 00 00      cmp b, 0
4107   1D82 C6 B4 1D      je _while59_exit
4108   1D85             _while59_block:
4109   1D85             ; i--; 
4110   1D85 FA FA FF      lea d, [bp + -6] ; $i
4111   1D88 2A            mov b, [d]
4112   1D89 38 00 00      mov c, 0
4113   1D8C 11            mov a, b
4114   1D8D FD 7D         dec b
4115   1D8F FA FA FF      lea d, [bp + -6] ; $i
4116   1D92 FD 43         mov [d], b
4117   1D94 27            mov b, a
4118   1D95             ; putchar(digits[i]); 
4119   1D95             ; --- START FUNCTION CALL
4120   1D95 FA FC FF      lea d, [bp + -4] ; $digits
4121   1D98 D7            push a
4122   1D99 DA            push d
4123   1D9A FA FA FF      lea d, [bp + -6] ; $i
4124   1D9D 2A            mov b, [d]
4125   1D9E 38 00 00      mov c, 0
4126   1DA1 E7            pop d
4127   1DA2 5A            add d, b
4128   1DA3 E4            pop a
4129   1DA4 32            mov bl, [d]
4130   1DA5 A7 00         mov bh, 0
4131   1DA7 38 00 00      mov c, 0
4132   1DAA DD            push bl
4133   1DAB 07 7E 1F      call putchar
4134   1DAE 51 01 00      add sp, 1
4135   1DB1             ; --- END FUNCTION CALL
4136   1DB1 0A 6C 1D      jmp _while59_cond
4137   1DB4             _while59_exit:
4138   1DB4 F9            leave
4139   1DB5 09            ret
4140   1DB6             
4141   1DB6             sprint_signed:
4142   1DB6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4143   1DB9             ; char digits[5]; 
4144   1DB9 52 05 00      sub sp, 5
4145   1DBC             ; int i = 0; 
4146   1DBC 52 02 00      sub sp, 2
4147   1DBF             ; --- START LOCAL VAR INITIALIZATION
4148   1DBF FA FA FF      lea d, [bp + -6] ; $i
4149   1DC2 DA            push d
4150   1DC3 FD 2E 00 00   mov32 cb, $00000000
4150   1DC7 00 00 
4151   1DC9 E7            pop d
4152   1DCA FD 43         mov [d], b
4153   1DCC             ; --- END LOCAL VAR INITIALIZATION
4154   1DCC             ; int len = 0; 
4155   1DCC 52 02 00      sub sp, 2
4156   1DCF             ; --- START LOCAL VAR INITIALIZATION
4157   1DCF FA F8 FF      lea d, [bp + -8] ; $len
4158   1DD2 DA            push d
4159   1DD3 FD 2E 00 00   mov32 cb, $00000000
4159   1DD7 00 00 
4160   1DD9 E7            pop d
4161   1DDA FD 43         mov [d], b
4162   1DDC             ; --- END LOCAL VAR INITIALIZATION
4163   1DDC             ; if (num < 0) { 
4164   1DDC             _if60_cond:
4165   1DDC FA 07 00      lea d, [bp + 7] ; $num
4166   1DDF 2A            mov b, [d]
4167   1DE0 38 00 00      mov c, 0
4168   1DE3             ; --- START RELATIONAL
4169   1DE3 D7            push a
4170   1DE4 11            mov a, b
4171   1DE5 FD 2E 00 00   mov32 cb, $00000000
4171   1DE9 00 00 
4172   1DEB B0            cmp a, b
4173   1DEC FD 73         slt ; < (signed)
4174   1DEE E4            pop a
4175   1DEF             ; --- END RELATIONAL
4176   1DEF C0 00 00      cmp b, 0
4177   1DF2 C6 32 1E      je _if60_else
4178   1DF5             _if60_TRUE:
4179   1DF5             ; *dest++ = '-'; 
4180   1DF5 FA 05 00      lea d, [bp + 5] ; $dest
4181   1DF8 2A            mov b, [d]
4182   1DF9 38 00 00      mov c, 0
4183   1DFC FD 77         inc b
4184   1DFE FA 05 00      lea d, [bp + 5] ; $dest
4185   1E01 FD 43         mov [d], b
4186   1E03 FD 7D         dec b
4187   1E05 D8            push b
4188   1E06 FD 2E 2D 00   mov32 cb, $0000002d
4188   1E0A 00 00 
4189   1E0C E7            pop d
4190   1E0D FD 3E         mov [d], bl
4191   1E0F             ; num = -num; 
4192   1E0F FA 07 00      lea d, [bp + 7] ; $num
4193   1E12 DA            push d
4194   1E13 FA 07 00      lea d, [bp + 7] ; $num
4195   1E16 2A            mov b, [d]
4196   1E17 38 00 00      mov c, 0
4197   1E1A FD 97         neg b
4198   1E1C E7            pop d
4199   1E1D FD 43         mov [d], b
4200   1E1F             ; len++; 
4201   1E1F FA F8 FF      lea d, [bp + -8] ; $len
4202   1E22 2A            mov b, [d]
4203   1E23 38 00 00      mov c, 0
4204   1E26 11            mov a, b
4205   1E27 FD 77         inc b
4206   1E29 FA F8 FF      lea d, [bp + -8] ; $len
4207   1E2C FD 43         mov [d], b
4208   1E2E 27            mov b, a
4209   1E2F 0A 81 1E      jmp _if60_exit
4210   1E32             _if60_else:
4211   1E32             ; if (num == 0) { 
4212   1E32             _if61_cond:
4213   1E32 FA 07 00      lea d, [bp + 7] ; $num
4214   1E35 2A            mov b, [d]
4215   1E36 38 00 00      mov c, 0
4216   1E39             ; --- START RELATIONAL
4217   1E39 D7            push a
4218   1E3A 11            mov a, b
4219   1E3B FD 2E 00 00   mov32 cb, $00000000
4219   1E3F 00 00 
4220   1E41 B0            cmp a, b
4221   1E42 FD 71         seq ; ==
4222   1E44 E4            pop a
4223   1E45             ; --- END RELATIONAL
4224   1E45 C0 00 00      cmp b, 0
4225   1E48 C6 81 1E      je _if61_exit
4226   1E4B             _if61_TRUE:
4227   1E4B             ; *dest++ = '0'; 
4228   1E4B FA 05 00      lea d, [bp + 5] ; $dest
4229   1E4E 2A            mov b, [d]
4230   1E4F 38 00 00      mov c, 0
4231   1E52 FD 77         inc b
4232   1E54 FA 05 00      lea d, [bp + 5] ; $dest
4233   1E57 FD 43         mov [d], b
4234   1E59 FD 7D         dec b
4235   1E5B D8            push b
4236   1E5C FD 2E 30 00   mov32 cb, $00000030
4236   1E60 00 00 
4237   1E62 E7            pop d
4238   1E63 FD 3E         mov [d], bl
4239   1E65             ; *dest = '\0'; 
4240   1E65 FA 05 00      lea d, [bp + 5] ; $dest
4241   1E68 2A            mov b, [d]
4242   1E69 38 00 00      mov c, 0
4243   1E6C D8            push b
4244   1E6D FD 2E 00 00   mov32 cb, $00000000
4244   1E71 00 00 
4245   1E73 E7            pop d
4246   1E74 FD 3E         mov [d], bl
4247   1E76             ; return 1; 
4248   1E76 FD 2E 01 00   mov32 cb, $00000001
4248   1E7A 00 00 
4249   1E7C F9            leave
4250   1E7D 09            ret
4251   1E7E 0A 81 1E      jmp _if61_exit
4252   1E81             _if61_exit:
4253   1E81             _if60_exit:
4254   1E81             ; while (num > 0) { 
4255   1E81             _while62_cond:
4256   1E81 FA 07 00      lea d, [bp + 7] ; $num
4257   1E84 2A            mov b, [d]
4258   1E85 38 00 00      mov c, 0
4259   1E88             ; --- START RELATIONAL
4260   1E88 D7            push a
4261   1E89 11            mov a, b
4262   1E8A FD 2E 00 00   mov32 cb, $00000000
4262   1E8E 00 00 
4263   1E90 B0            cmp a, b
4264   1E91 FD 7F         sgt ; >
4265   1E93 E4            pop a
4266   1E94             ; --- END RELATIONAL
4267   1E94 C0 00 00      cmp b, 0
4268   1E97 C6 F6 1E      je _while62_exit
4269   1E9A             _while62_block:
4270   1E9A             ; digits[i] = '0' + (num % 10); 
4271   1E9A FA FC FF      lea d, [bp + -4] ; $digits
4272   1E9D D7            push a
4273   1E9E DA            push d
4274   1E9F FA FA FF      lea d, [bp + -6] ; $i
4275   1EA2 2A            mov b, [d]
4276   1EA3 38 00 00      mov c, 0
4277   1EA6 E7            pop d
4278   1EA7 5A            add d, b
4279   1EA8 E4            pop a
4280   1EA9 DA            push d
4281   1EAA FD 2E 30 00   mov32 cb, $00000030
4281   1EAE 00 00 
4282   1EB0             ; --- START TERMS
4283   1EB0 D7            push a
4284   1EB1 11            mov a, b
4285   1EB2 FA 07 00      lea d, [bp + 7] ; $num
4286   1EB5 2A            mov b, [d]
4287   1EB6 38 00 00      mov c, 0
4288   1EB9             ; --- START FACTORS
4289   1EB9 D7            push a
4290   1EBA 11            mov a, b
4291   1EBB FD 2E 0A 00   mov32 cb, $0000000a
4291   1EBF 00 00 
4292   1EC1 AE            div a, b ; 
4293   1EC2 11            mov a, b
4294   1EC3 27            mov b, a
4295   1EC4 E4            pop a
4296   1EC5             ; --- END FACTORS
4297   1EC5 56            add b, a
4298   1EC6 E4            pop a
4299   1EC7             ; --- END TERMS
4300   1EC7 E7            pop d
4301   1EC8 FD 3E         mov [d], bl
4302   1ECA             ; num = num / 10; 
4303   1ECA FA 07 00      lea d, [bp + 7] ; $num
4304   1ECD DA            push d
4305   1ECE FA 07 00      lea d, [bp + 7] ; $num
4306   1ED1 2A            mov b, [d]
4307   1ED2 38 00 00      mov c, 0
4308   1ED5             ; --- START FACTORS
4309   1ED5 D7            push a
4310   1ED6 11            mov a, b
4311   1ED7 FD 2E 0A 00   mov32 cb, $0000000a
4311   1EDB 00 00 
4312   1EDD AE            div a, b
4313   1EDE 27            mov b, a
4314   1EDF E4            pop a
4315   1EE0             ; --- END FACTORS
4316   1EE0 E7            pop d
4317   1EE1 FD 43         mov [d], b
4318   1EE3             ; i++; 
4319   1EE3 FA FA FF      lea d, [bp + -6] ; $i
4320   1EE6 2A            mov b, [d]
4321   1EE7 38 00 00      mov c, 0
4322   1EEA 11            mov a, b
4323   1EEB FD 77         inc b
4324   1EED FA FA FF      lea d, [bp + -6] ; $i
4325   1EF0 FD 43         mov [d], b
4326   1EF2 27            mov b, a
4327   1EF3 0A 81 1E      jmp _while62_cond
4328   1EF6             _while62_exit:
4329   1EF6             ; while (i > 0) { 
4330   1EF6             _while63_cond:
4331   1EF6 FA FA FF      lea d, [bp + -6] ; $i
4332   1EF9 2A            mov b, [d]
4333   1EFA 38 00 00      mov c, 0
4334   1EFD             ; --- START RELATIONAL
4335   1EFD D7            push a
4336   1EFE 11            mov a, b
4337   1EFF FD 2E 00 00   mov32 cb, $00000000
4337   1F03 00 00 
4338   1F05 B0            cmp a, b
4339   1F06 FD 7F         sgt ; >
4340   1F08 E4            pop a
4341   1F09             ; --- END RELATIONAL
4342   1F09 C0 00 00      cmp b, 0
4343   1F0C C6 5B 1F      je _while63_exit
4344   1F0F             _while63_block:
4345   1F0F             ; i--; 
4346   1F0F FA FA FF      lea d, [bp + -6] ; $i
4347   1F12 2A            mov b, [d]
4348   1F13 38 00 00      mov c, 0
4349   1F16 11            mov a, b
4350   1F17 FD 7D         dec b
4351   1F19 FA FA FF      lea d, [bp + -6] ; $i
4352   1F1C FD 43         mov [d], b
4353   1F1E 27            mov b, a
4354   1F1F             ; *dest++ = digits[i]; 
4355   1F1F FA 05 00      lea d, [bp + 5] ; $dest
4356   1F22 2A            mov b, [d]
4357   1F23 38 00 00      mov c, 0
4358   1F26 FD 77         inc b
4359   1F28 FA 05 00      lea d, [bp + 5] ; $dest
4360   1F2B FD 43         mov [d], b
4361   1F2D FD 7D         dec b
4362   1F2F D8            push b
4363   1F30 FA FC FF      lea d, [bp + -4] ; $digits
4364   1F33 D7            push a
4365   1F34 DA            push d
4366   1F35 FA FA FF      lea d, [bp + -6] ; $i
4367   1F38 2A            mov b, [d]
4368   1F39 38 00 00      mov c, 0
4369   1F3C E7            pop d
4370   1F3D 5A            add d, b
4371   1F3E E4            pop a
4372   1F3F 32            mov bl, [d]
4373   1F40 A7 00         mov bh, 0
4374   1F42 38 00 00      mov c, 0
4375   1F45 E7            pop d
4376   1F46 FD 3E         mov [d], bl
4377   1F48             ; len++; 
4378   1F48 FA F8 FF      lea d, [bp + -8] ; $len
4379   1F4B 2A            mov b, [d]
4380   1F4C 38 00 00      mov c, 0
4381   1F4F 11            mov a, b
4382   1F50 FD 77         inc b
4383   1F52 FA F8 FF      lea d, [bp + -8] ; $len
4384   1F55 FD 43         mov [d], b
4385   1F57 27            mov b, a
4386   1F58 0A F6 1E      jmp _while63_cond
4387   1F5B             _while63_exit:
4388   1F5B             ; *dest = '\0'; 
4389   1F5B FA 05 00      lea d, [bp + 5] ; $dest
4390   1F5E 2A            mov b, [d]
4391   1F5F 38 00 00      mov c, 0
4392   1F62 D8            push b
4393   1F63 FD 2E 00 00   mov32 cb, $00000000
4393   1F67 00 00 
4394   1F69 E7            pop d
4395   1F6A FD 3E         mov [d], bl
4396   1F6C             ; return len; 
4397   1F6C FA F8 FF      lea d, [bp + -8] ; $len
4398   1F6F 2A            mov b, [d]
4399   1F70 38 00 00      mov c, 0
4400   1F73 F9            leave
4401   1F74 09            ret
4402   1F75             
4403   1F75             date:
4404   1F75 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4405   1F78             
4406   1F78             ; --- BEGIN INLINE ASM SEGMENT
4407   1F78 19 00         mov al, 0 
4408   1F7A 05 07         syscall sys_datetime
4409   1F7C             ; --- END INLINE ASM SEGMENT
4410   1F7C             
4411   1F7C F9            leave
4412   1F7D 09            ret
4413   1F7E             
4414   1F7E             putchar:
4415   1F7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4416   1F81             
4417   1F81             ; --- BEGIN INLINE ASM SEGMENT
4418   1F81 FA 05 00      lea d, [bp + 5] ; $c
4419   1F84 1E            mov al, [d]
4420   1F85 23            mov ah, al
4421   1F86 07 8D 21      call _putchar
4422   1F89             ; --- END INLINE ASM SEGMENT
4423   1F89             
4424   1F89 F9            leave
4425   1F8A 09            ret
4426   1F8B             
4427   1F8B             getchar:
4428   1F8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4429   1F8E             ; char c; 
4430   1F8E 52 01 00      sub sp, 1
4431   1F91             
4432   1F91             ; --- BEGIN INLINE ASM SEGMENT
4433   1F91 07 86 21      call getch
4434   1F94 1A            mov al, ah
4435   1F95 FA 00 00      lea d, [bp + 0] ; $c
4436   1F98 3E            mov [d], al
4437   1F99             ; --- END INLINE ASM SEGMENT
4438   1F99             
4439   1F99             ; return c; 
4440   1F99 FA 00 00      lea d, [bp + 0] ; $c
4441   1F9C 32            mov bl, [d]
4442   1F9D A7 00         mov bh, 0
4443   1F9F 38 00 00      mov c, 0
4444   1FA2 F9            leave
4445   1FA3 09            ret
4446   1FA4             
4447   1FA4             scann:
4448   1FA4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4449   1FA7             ; int m; 
4450   1FA7 52 02 00      sub sp, 2
4451   1FAA             
4452   1FAA             ; --- BEGIN INLINE ASM SEGMENT
4453   1FAA 07 D1 23      call scan_u16d
4454   1FAD FA FF FF      lea d, [bp + -1] ; $m
4455   1FB0 43            mov [d], a
4456   1FB1             ; --- END INLINE ASM SEGMENT
4457   1FB1             
4458   1FB1             ; return m; 
4459   1FB1 FA FF FF      lea d, [bp + -1] ; $m
4460   1FB4 2A            mov b, [d]
4461   1FB5 38 00 00      mov c, 0
4462   1FB8 F9            leave
4463   1FB9 09            ret
4464   1FBA             
4465   1FBA             puts:
4466   1FBA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4467   1FBD             
4468   1FBD             ; --- BEGIN INLINE ASM SEGMENT
4469   1FBD FA 05 00      lea d, [bp + 5] ; $s
4470   1FC0 15            mov a, [d]
4471   1FC1 3C            mov d, a
4472   1FC2 07 D7 22      call _puts
4473   1FC5 10 00 0A      mov a, $0A00
4474   1FC8 05 03         syscall sys_io
4475   1FCA             ; --- END INLINE ASM SEGMENT
4476   1FCA             
4477   1FCA F9            leave
4478   1FCB 09            ret
4479   1FCC             
4480   1FCC             print:
4481   1FCC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4482   1FCF             
4483   1FCF             ; --- BEGIN INLINE ASM SEGMENT
4484   1FCF FA 05 00      lea d, [bp + 5] ; $s
4485   1FD2 FD 2A         mov d, [d]
4486   1FD4 07 D7 22      call _puts
4487   1FD7             ; --- END INLINE ASM SEGMENT
4488   1FD7             
4489   1FD7 F9            leave
4490   1FD8 09            ret
4491   1FD9             
4492   1FD9             getparam:
4493   1FD9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4494   1FDC             ; char data; 
4495   1FDC 52 01 00      sub sp, 1
4496   1FDF             
4497   1FDF             ; --- BEGIN INLINE ASM SEGMENT
4498   1FDF 19 04         mov al, 4
4499   1FE1 FA 05 00      lea d, [bp + 5] ; $address
4500   1FE4 FD 2A         mov d, [d]
4501   1FE6 05 0C         syscall sys_system
4502   1FE8 FA 00 00      lea d, [bp + 0] ; $data
4503   1FEB FD 3E         mov [d], bl
4504   1FED             ; --- END INLINE ASM SEGMENT
4505   1FED             
4506   1FED             ; return data; 
4507   1FED FA 00 00      lea d, [bp + 0] ; $data
4508   1FF0 32            mov bl, [d]
4509   1FF1 A7 00         mov bh, 0
4510   1FF3 38 00 00      mov c, 0
4511   1FF6 F9            leave
4512   1FF7 09            ret
4513   1FF8             
4514   1FF8             clear:
4515   1FF8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4516   1FFB             ; print("\033[2J\033[H"); 
4517   1FFB             ; --- START FUNCTION CALL
4518   1FFB 26 E5 31      mov b, _s3 ; "\033[2J\033[H"
4519   1FFE FD AB         swp b
4520   2000 D8            push b
4521   2001 07 CC 1F      call print
4522   2004 51 02 00      add sp, 2
4523   2007             ; --- END FUNCTION CALL
4524   2007 F9            leave
4525   2008 09            ret
4526   2009             
4527   2009             abs:
4528   2009 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4529   200C             ; return i < 0 ? -i : i; 
4530   200C             _ternary64_cond:
4531   200C FA 05 00      lea d, [bp + 5] ; $i
4532   200F 2A            mov b, [d]
4533   2010 38 00 00      mov c, 0
4534   2013             ; --- START RELATIONAL
4535   2013 D7            push a
4536   2014 11            mov a, b
4537   2015 FD 2E 00 00   mov32 cb, $00000000
4537   2019 00 00 
4538   201B B0            cmp a, b
4539   201C FD 73         slt ; < (signed)
4540   201E E4            pop a
4541   201F             ; --- END RELATIONAL
4542   201F C0 00 00      cmp b, 0
4543   2022 C6 31 20      je _ternary64_FALSE
4544   2025             _ternary64_TRUE:
4545   2025 FA 05 00      lea d, [bp + 5] ; $i
4546   2028 2A            mov b, [d]
4547   2029 38 00 00      mov c, 0
4548   202C FD 97         neg b
4549   202E 0A 38 20      jmp _ternary64_exit
4550   2031             _ternary64_FALSE:
4551   2031 FA 05 00      lea d, [bp + 5] ; $i
4552   2034 2A            mov b, [d]
4553   2035 38 00 00      mov c, 0
4554   2038             _ternary64_exit:
4555   2038 F9            leave
4556   2039 09            ret
4557   203A             
4558   203A             loadfile:
4559   203A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4560   203D             
4561   203D             ; --- BEGIN INLINE ASM SEGMENT
4562   203D FA 07 00      lea d, [bp + 7] ; $destination
4563   2040 15            mov a, [d]
4564   2041 4F            mov di, a
4565   2042 FA 05 00      lea d, [bp + 5] ; $filename
4566   2045 FD 2A         mov d, [d]
4567   2047 19 14         mov al, 20
4568   2049 05 04         syscall sys_filesystem
4569   204B             ; --- END INLINE ASM SEGMENT
4570   204B             
4571   204B F9            leave
4572   204C 09            ret
4573   204D             
4574   204D             create_file:
4575   204D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4576   2050 F9            leave
4577   2051 09            ret
4578   2052             
4579   2052             delete_file:
4580   2052 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4581   2055             
4582   2055             ; --- BEGIN INLINE ASM SEGMENT
4583   2055 FA 05 00      lea d, [bp + 5] ; $filename
4584   2058 19 0A         mov al, 10
4585   205A 05 04         syscall sys_filesystem
4586   205C             ; --- END INLINE ASM SEGMENT
4587   205C             
4588   205C F9            leave
4589   205D 09            ret
4590   205E             
4591   205E             load_hex:
4592   205E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4593   2061             ; char *temp; 
4594   2061 52 02 00      sub sp, 2
4595   2064             ; temp = alloc(32768); 
4596   2064 FA FF FF      lea d, [bp + -1] ; $temp
4597   2067 DA            push d
4598   2068             ; --- START FUNCTION CALL
4599   2068 FD 2E 00 80   mov32 cb, $00008000
4599   206C 00 00 
4600   206E FD AB         swp b
4601   2070 D8            push b
4602   2071 07 37 0B      call alloc
4603   2074 51 02 00      add sp, 2
4604   2077             ; --- END FUNCTION CALL
4605   2077 E7            pop d
4606   2078 FD 43         mov [d], b
4607   207A             
4608   207A             ; --- BEGIN INLINE ASM SEGMENT
4609   207A               
4610   207A               
4611   207A               
4612   207A             _load_hex:
4613   207A FA 05 00      lea d, [bp + 5] ; $destination
4614   207D FD 2A         mov d, [d]
4615   207F FD 50         mov di, d
4616   2081 FA FF FF      lea d, [bp + -1] ; $temp
4617   2084 FD 2A         mov d, [d]
4618   2086 38 00 00      mov c, 0
4619   2089 48            mov a, sp
4620   208A 77            inc a
4621   208B 3C            mov d, a          
4622   208C 07 94 21      call _gets        
4623   208F 4D            mov si, a
4624   2090             __load_hex_loop:
4625   2090 F6            lodsb             
4626   2091 B9 00         cmp al, 0         
4627   2093 C6 A1 20      jz __load_hex_ret
4628   2096 36            mov bh, al
4629   2097 F6            lodsb
4630   2098 2F            mov bl, al
4631   2099 07 4B 21      call _atoi        
4632   209C F7            stosb             
4633   209D 78            inc c
4634   209E 0A 90 20      jmp __load_hex_loop
4635   20A1             __load_hex_ret:
4636   20A1             ; --- END INLINE ASM SEGMENT
4637   20A1             
4638   20A1 F9            leave
4639   20A2 09            ret
4640   20A3             
4641   20A3             include_stdio_asm:
4642   20A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4643   20A6             
4644   20A6             ; --- BEGIN INLINE ASM SEGMENT
4645   20A6             .include "lib/asm/stdio.asm"
0001+  20A6             ;-----------------------------------------------------------------------------
0002+  20A6             ; stdio.s
0003+  20A6             ;-----------------------------------------------------------------------------
0004+  20A6             .include "lib/asm/string.asm"
0001++ 20A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 20A6             ; string.s
0003++ 20A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 20A6             
0005++ 20A6             
0006++ 20A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 20A6             ; _strrev
0008++ 20A6             ; reverse a string
0009++ 20A6             ; D = string address
0010++ 20A6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 20A6             ; 01234
0012++ 20A6             _strrev:
0013++ 20A6 4B          	pusha
0014++ 20A7 07 ED 20    	call _strlen	; length in C
0015++ 20AA 12          	mov a, c
0016++ 20AB AF 01 00    	cmp a, 1
0017++ 20AE D0 C8 20    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 20B1 7D          	dec a
0019++ 20B2 FD 4E       	mov si, d	; beginning of string
0020++ 20B4 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 20B6 59          	add d, a	; end of string
0022++ 20B7 12          	mov a, c
0023++ 20B8 FD 9B       	shr a		; divide by 2
0024++ 20BA 39          	mov c, a	; C now counts the steps
0025++ 20BB             _strrev_L0:
0026++ 20BB 32          	mov bl, [d]	; save load right-side char into BL
0027++ 20BC F6          	lodsb		; load left-side char into AL; increase SI
0028++ 20BD 3E          	mov [d], al	; store left char into right side
0029++ 20BE 1B          	mov al, bl
0030++ 20BF F7          	stosb		; store right-side char into left-side; increase DI
0031++ 20C0 7E          	dec c
0032++ 20C1 7F          	dec d
0033++ 20C2 C2 00 00    	cmp c, 0
0034++ 20C5 C7 BB 20    	jne _strrev_L0
0035++ 20C8             _strrev_end:
0036++ 20C8 4C          	popa
0037++ 20C9 09          	ret
0038++ 20CA             	
0039++ 20CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 20CA             ; _strchr
0041++ 20CA             ; search string in D for char in AL
0042++ 20CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 20CA             _strchr:
0044++ 20CA             _strchr_L0:
0045++ 20CA 32          	mov bl, [d]
0046++ 20CB C1 00       	cmp bl, 0
0047++ 20CD C6 D8 20    	je _strchr_end
0048++ 20D0 BA          	cmp al, bl
0049++ 20D1 C6 D8 20    	je _strchr_end
0050++ 20D4 79          	inc d
0051++ 20D5 0A CA 20    	jmp _strchr_L0
0052++ 20D8             _strchr_end:
0053++ 20D8 1B          	mov al, bl
0054++ 20D9 09          	ret
0055++ 20DA             
0056++ 20DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 20DA             ; _strstr
0058++ 20DA             ; find sub-string
0059++ 20DA             ; str1 in SI
0060++ 20DA             ; str2 in DI
0061++ 20DA             ; SI points to end of source string
0062++ 20DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 20DA             _strstr:
0064++ 20DA DB          	push al
0065++ 20DB DA          	push d
0066++ 20DC E3          	push di
0067++ 20DD             _strstr_loop:
0068++ 20DD F3          	cmpsb					; compare a byte of the strings
0069++ 20DE C7 E9 20    	jne _strstr_ret
0070++ 20E1 FC 00 00    	lea d, [di + 0]
0071++ 20E4 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 20E6 C7 DD 20    	jne _strstr_loop				; equal chars but not at end
0073++ 20E9             _strstr_ret:
0074++ 20E9 F0          	pop di
0075++ 20EA E7          	pop d
0076++ 20EB E8          	pop al
0077++ 20EC 09          	ret
0078++ 20ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 20ED             ; length of null terminated string
0080++ 20ED             ; result in C
0081++ 20ED             ; pointer in D
0082++ 20ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 20ED             _strlen:
0084++ 20ED DA          	push d
0085++ 20EE 38 00 00    	mov c, 0
0086++ 20F1             _strlen_L1:
0087++ 20F1 BD 00       	cmp byte [d], 0
0088++ 20F3 C6 FB 20    	je _strlen_ret
0089++ 20F6 79          	inc d
0090++ 20F7 78          	inc c
0091++ 20F8 0A F1 20    	jmp _strlen_L1
0092++ 20FB             _strlen_ret:
0093++ 20FB E7          	pop d
0094++ 20FC 09          	ret
0095++ 20FD             
0096++ 20FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 20FD             ; STRCMP
0098++ 20FD             ; compare two strings
0099++ 20FD             ; str1 in SI
0100++ 20FD             ; str2 in DI
0101++ 20FD             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 20FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 20FD             _strcmp:
0104++ 20FD DB          	push al
0105++ 20FE DA          	push d
0106++ 20FF E3          	push di
0107++ 2100 E2          	push si
0108++ 2101             _strcmp_loop:
0109++ 2101 F3          	cmpsb					; compare a byte of the strings
0110++ 2102 C7 0D 21    	jne _strcmp_ret
0111++ 2105 FB FF FF    	lea d, [si +- 1]
0112++ 2108 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 210A C7 01 21    	jne _strcmp_loop				; equal chars but not at end
0114++ 210D             _strcmp_ret:
0115++ 210D EF          	pop si
0116++ 210E F0          	pop di
0117++ 210F E7          	pop d
0118++ 2110 E8          	pop al
0119++ 2111 09          	ret
0120++ 2112             
0121++ 2112             
0122++ 2112             ; STRCPY
0123++ 2112             ; copy null terminated string from SI to DI
0124++ 2112             ; source in SI
0125++ 2112             ; destination in DI
0126++ 2112             _strcpy:
0127++ 2112 E2          	push si
0128++ 2113 E3          	push di
0129++ 2114 DB          	push al
0130++ 2115             _strcpy_L1:
0131++ 2115 F6          	lodsb
0132++ 2116 F7          	stosb
0133++ 2117 B9 00       	cmp al, 0
0134++ 2119 C7 15 21    	jne _strcpy_L1
0135++ 211C             _strcpy_end:
0136++ 211C E8          	pop al
0137++ 211D F0          	pop di
0138++ 211E EF          	pop si
0139++ 211F 09          	ret
0140++ 2120             
0141++ 2120             ; STRCAT
0142++ 2120             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 2120             ; source in SI
0144++ 2120             ; destination in DI
0145++ 2120             _strcat:
0146++ 2120 E2          	push si
0147++ 2121 E3          	push di
0148++ 2122 D7          	push a
0149++ 2123 DA          	push d
0150++ 2124 50          	mov a, di
0151++ 2125 3C          	mov d, a
0152++ 2126             _strcat_goto_end_L1:
0153++ 2126 BD 00       	cmp byte[d], 0
0154++ 2128 C6 2F 21    	je _strcat_start
0155++ 212B 79          	inc d
0156++ 212C 0A 26 21    	jmp _strcat_goto_end_L1
0157++ 212F             _strcat_start:
0158++ 212F FD 50       	mov di, d
0159++ 2131             _strcat_L1:
0160++ 2131 F6          	lodsb
0161++ 2132 F7          	stosb
0162++ 2133 B9 00       	cmp al, 0
0163++ 2135 C7 31 21    	jne _strcat_L1
0164++ 2138             _strcat_end:
0165++ 2138 E7          	pop d
0166++ 2139 E4          	pop a
0167++ 213A F0          	pop di
0168++ 213B EF          	pop si
0169++ 213C 09          	ret
0170++ 213D             
0171++ 213D             
0005+  213D             
0006+  213D             ;-----------------------------------------------------------------------------
0007+  213D             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  213D             ; ASCII in BL
0009+  213D             ; result in AL
0010+  213D             ; ascii for F = 0100 0110
0011+  213D             ; ascii for 9 = 0011 1001
0012+  213D             ;-----------------------------------------------------------------------------
0013+  213D             hex_ascii_encode:
0014+  213D 1B            mov al, bl
0015+  213E 93 40         test al, $40        ; test if letter or number
0016+  2140 C7 46 21      jnz hex_letter
0017+  2143 87 0F         and al, $0F        ; get number
0018+  2145 09            ret
0019+  2146             hex_letter:
0020+  2146 87 0F         and al, $0F        ; get letter
0021+  2148 6A 09         add al, 9
0022+  214A 09            ret
0023+  214B             
0024+  214B             ;-----------------------------------------------------------------------------
0025+  214B             ; ATOI
0026+  214B             ; 2 letter hex string in B
0027+  214B             ; 8bit integer returned in AL
0028+  214B             ;-----------------------------------------------------------------------------
0029+  214B             _atoi:
0030+  214B D8            push b
0031+  214C 07 3D 21      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  214F 30            mov bl, bh
0033+  2150 DB            push al          ; save a
0034+  2151 07 3D 21      call hex_ascii_encode
0035+  2154 EA            pop bl  
0036+  2155 FD 9E 04      shl al, 4
0037+  2158 8C            or al, bl
0038+  2159 E5            pop b
0039+  215A 09            ret  
0040+  215B             
0041+  215B             
0042+  215B             ;-----------------------------------------------------------------------------
0043+  215B             ; ITOA
0044+  215B             ; 8bit value in BL
0045+  215B             ; 2 byte ASCII result in A
0046+  215B             ;-----------------------------------------------------------------------------
0047+  215B             _itoa:
0048+  215B DA            push d
0049+  215C D8            push b
0050+  215D A7 00         mov bh, 0
0051+  215F FD A4 04      shr bl, 4  
0052+  2162 74            mov d, b
0053+  2163 1F 0B 24      mov al, [d + s_hex_digits]
0054+  2166 23            mov ah, al
0055+  2167               
0056+  2167 E5            pop b
0057+  2168 D8            push b
0058+  2169 A7 00         mov bh, 0
0059+  216B FD 87 0F      and bl, $0F
0060+  216E 74            mov d, b
0061+  216F 1F 0B 24      mov al, [d + s_hex_digits]
0062+  2172 E5            pop b
0063+  2173 E7            pop d
0064+  2174 09            ret
0065+  2175             
0066+  2175             ;-----------------------------------------------------------------------------
0067+  2175             ; HEX STRING TO BINARY
0068+  2175             ; di = destination address
0069+  2175             ; si = source
0070+  2175             ;-----------------------------------------------------------------------------
0071+  2175             _hex_to_int:
0072+  2175             _hex_to_int_L1:
0073+  2175 F6            lodsb          ; load from [SI] to AL
0074+  2176 B9 00         cmp al, 0        ; check if ASCII 0
0075+  2178 C6 85 21      jz _hex_to_int_ret
0076+  217B 36            mov bh, al
0077+  217C F6            lodsb
0078+  217D 2F            mov bl, al
0079+  217E 07 4B 21      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  2181 F7            stosb          ; store AL to [DI]
0081+  2182 0A 75 21      jmp _hex_to_int_L1
0082+  2185             _hex_to_int_ret:
0083+  2185 09            ret    
0084+  2186             
0085+  2186             ;-----------------------------------------------------------------------------
0086+  2186             ; GETCHAR
0087+  2186             ; char in ah
0088+  2186             ;-----------------------------------------------------------------------------
0089+  2186             getch:
0090+  2186 DB            push al
0091+  2187             getch_retry:
0092+  2187 19 01         mov al, 1
0093+  2189 05 03         syscall sys_io      ; receive in AH
0094+  218B E8            pop al
0095+  218C 09            ret
0096+  218D             
0097+  218D             ;-----------------------------------------------------------------------------
0098+  218D             ; PUTCHAR
0099+  218D             ; char in ah
0100+  218D             ;-----------------------------------------------------------------------------
0101+  218D             _putchar:
0102+  218D D7            push a
0103+  218E 19 00         mov al, 0
0104+  2190 05 03         syscall sys_io      ; char in AH
0105+  2192 E4            pop a
0106+  2193 09            ret
0107+  2194             
0108+  2194             ;-----------------------------------------------------------------------------
0109+  2194             ;; INPUT A STRING
0110+  2194             ;; terminates with null
0111+  2194             ;; pointer in D
0112+  2194             ;-----------------------------------------------------------------------------
0113+  2194             _gets:
0114+  2194 D7            push a
0115+  2195 DA            push d
0116+  2196             _gets_loop:
0117+  2196 19 01         mov al, 1
0118+  2198 05 03         syscall sys_io      ; receive in AH
0119+  219A B9 00         cmp al, 0        ; check error code (AL)
0120+  219C C6 96 21      je _gets_loop      ; if no char received, retry
0121+  219F             
0122+  219F 76 1B         cmp ah, 27
0123+  21A1 C6 C2 21      je _gets_ansi_esc
0124+  21A4 76 0A         cmp ah, $0A        ; LF
0125+  21A6 C6 2D 22      je _gets_end
0126+  21A9 76 0D         cmp ah, $0D        ; CR
0127+  21AB C6 2D 22      je _gets_end
0128+  21AE 76 5C         cmp ah, $5C        ; '\\'
0129+  21B0 C6 EE 21      je _gets_escape
0130+  21B3               
0131+  21B3 76 08         cmp ah, $08      ; check for backspace
0132+  21B5 C6 BE 21      je _gets_backspace
0133+  21B8             
0134+  21B8 1A            mov al, ah
0135+  21B9 3E            mov [d], al
0136+  21BA 79            inc d
0137+  21BB 0A 96 21      jmp _gets_loop
0138+  21BE             _gets_backspace:
0139+  21BE 7F            dec d
0140+  21BF 0A 96 21      jmp _gets_loop
0141+  21C2             _gets_ansi_esc:
0142+  21C2 19 01         mov al, 1
0143+  21C4 05 03         syscall sys_io        ; receive in AH without echo
0144+  21C6 B9 00         cmp al, 0          ; check error code (AL)
0145+  21C8 C6 C2 21      je _gets_ansi_esc    ; if no char received, retry
0146+  21CB 76 5B         cmp ah, '['
0147+  21CD C7 96 21      jne _gets_loop
0148+  21D0             _gets_ansi_esc_2:
0149+  21D0 19 01         mov al, 1
0150+  21D2 05 03         syscall sys_io          ; receive in AH without echo
0151+  21D4 B9 00         cmp al, 0            ; check error code (AL)
0152+  21D6 C6 D0 21      je _gets_ansi_esc_2  ; if no char received, retry
0153+  21D9 76 44         cmp ah, 'D'
0154+  21DB C6 E6 21      je _gets_left_arrow
0155+  21DE 76 43         cmp ah, 'C'
0156+  21E0 C6 EA 21      je _gets_right_arrow
0157+  21E3 0A 96 21      jmp _gets_loop
0158+  21E6             _gets_left_arrow:
0159+  21E6 7F            dec d
0160+  21E7 0A 96 21      jmp _gets_loop
0161+  21EA             _gets_right_arrow:
0162+  21EA 79            inc d
0163+  21EB 0A 96 21      jmp _gets_loop
0164+  21EE             _gets_escape:
0165+  21EE 19 01         mov al, 1
0166+  21F0 05 03         syscall sys_io      ; receive in AH
0167+  21F2 B9 00         cmp al, 0        ; check error code (AL)
0168+  21F4 C6 EE 21      je _gets_escape      ; if no char received, retry
0169+  21F7 76 6E         cmp ah, 'n'
0170+  21F9 C6 18 22      je _gets_LF
0171+  21FC 76 72         cmp ah, 'r'
0172+  21FE C6 1F 22      je _gets_CR
0173+  2201 76 30         cmp ah, '0'
0174+  2203 C6 26 22      je _gets_NULL
0175+  2206 76 5C         cmp ah, $5C  ; '\'
0176+  2208 C6 11 22      je _gets_slash
0177+  220B 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  220C 3E            mov [d], al
0179+  220D 79            inc d
0180+  220E 0A 96 21      jmp _gets_loop
0181+  2211             _gets_slash:
0182+  2211 19 5C         mov al, $5C
0183+  2213 3E            mov [d], al
0184+  2214 79            inc d
0185+  2215 0A 96 21      jmp _gets_loop
0186+  2218             _gets_LF:
0187+  2218 19 0A         mov al, $0A
0188+  221A 3E            mov [d], al
0189+  221B 79            inc d
0190+  221C 0A 96 21      jmp _gets_loop
0191+  221F             _gets_CR:
0192+  221F 19 0D         mov al, $0D
0193+  2221 3E            mov [d], al
0194+  2222 79            inc d
0195+  2223 0A 96 21      jmp _gets_loop
0196+  2226             _gets_NULL:
0197+  2226 19 00         mov al, $00
0198+  2228 3E            mov [d], al
0199+  2229 79            inc d
0200+  222A 0A 96 21      jmp _gets_loop
0201+  222D             _gets_end:
0202+  222D 19 00         mov al, 0
0203+  222F 3E            mov [d], al        ; terminate string
0204+  2230 E7            pop d
0205+  2231 E4            pop a
0206+  2232 09            ret
0207+  2233             
0208+  2233             ;-----------------------------------------------------------------------------
0209+  2233             ;; INPUT TEXT
0210+  2233             ;; terminated with CTRL+D
0211+  2233             ;; pointer in D
0212+  2233             ;-----------------------------------------------------------------------------
0213+  2233             _gettxt:
0214+  2233 D7            push a
0215+  2234 DA            push d
0216+  2235             _gettxt_loop:
0217+  2235 19 01         mov al, 1
0218+  2237 05 03         syscall sys_io      ; receive in AH
0219+  2239 B9 00         cmp al, 0        ; check error code (AL)
0220+  223B C6 35 22      je _gettxt_loop    ; if no char received, retry
0221+  223E 76 04         cmp ah, 4      ; EOT
0222+  2240 C6 7E 22      je _gettxt_end
0223+  2243 76 08         cmp ah, $08      ; check for backspace
0224+  2245 C6 7A 22      je _gettxt_backspace
0225+  2248 76 5C         cmp ah, $5C        ; '\'
0226+  224A C6 53 22      je _gettxt_escape
0227+  224D 1A            mov al, ah
0228+  224E 3E            mov [d], al
0229+  224F 79            inc d
0230+  2250 0A 35 22      jmp _gettxt_loop
0231+  2253             _gettxt_escape:
0232+  2253 19 01         mov al, 1
0233+  2255 05 03         syscall sys_io      ; receive in AH
0234+  2257 B9 00         cmp al, 0        ; check error code (AL)
0235+  2259 C6 53 22      je _gettxt_escape    ; if no char received, retry
0236+  225C 76 6E         cmp ah, 'n'
0237+  225E C6 6C 22      je _gettxt_LF
0238+  2261 76 72         cmp ah, 'r'
0239+  2263 C6 73 22      je _gettxt_CR
0240+  2266 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  2267 3E            mov [d], al
0242+  2268 79            inc d
0243+  2269 0A 35 22      jmp _gettxt_loop
0244+  226C             _gettxt_LF:
0245+  226C 19 0A         mov al, $0A
0246+  226E 3E            mov [d], al
0247+  226F 79            inc d
0248+  2270 0A 35 22      jmp _gettxt_loop
0249+  2273             _gettxt_CR:
0250+  2273 19 0D         mov al, $0D
0251+  2275 3E            mov [d], al
0252+  2276 79            inc d
0253+  2277 0A 35 22      jmp _gettxt_loop
0254+  227A             _gettxt_backspace:
0255+  227A 7F            dec d
0256+  227B 0A 35 22      jmp _gettxt_loop
0257+  227E             _gettxt_end:
0258+  227E 19 00         mov al, 0
0259+  2280 3E            mov [d], al        ; terminate string
0260+  2281 E7            pop d
0261+  2282 E4            pop a
0262+  2283 09            ret
0263+  2284             
0264+  2284             ;-----------------------------------------------------------------------------
0265+  2284             ; PRINT NEW LINE
0266+  2284             ;-----------------------------------------------------------------------------
0267+  2284             printnl:
0268+  2284 D7            push a
0269+  2285 10 00 0A      mov a, $0A00
0270+  2288 05 03         syscall sys_io
0271+  228A 10 00 0D      mov a, $0D00
0272+  228D 05 03         syscall sys_io
0273+  228F E4            pop a
0274+  2290 09            ret
0275+  2291             
0276+  2291             ;-----------------------------------------------------------------------------
0277+  2291             ; _strtoint
0278+  2291             ; 4 digit hex string number in d
0279+  2291             ; integer returned in A
0280+  2291             ;-----------------------------------------------------------------------------
0281+  2291             _strtointx:
0282+  2291 D8            push b
0283+  2292 32            mov bl, [d]
0284+  2293 37            mov bh, bl
0285+  2294 33 01 00      mov bl, [d + 1]
0286+  2297 07 4B 21      call _atoi        ; convert to int in AL
0287+  229A 23            mov ah, al        ; move to AH
0288+  229B 33 02 00      mov bl, [d + 2]
0289+  229E 37            mov bh, bl
0290+  229F 33 03 00      mov bl, [d + 3]
0291+  22A2 07 4B 21      call _atoi        ; convert to int in AL
0292+  22A5 E5            pop b
0293+  22A6 09            ret
0294+  22A7             
0295+  22A7             ;-----------------------------------------------------------------------------
0296+  22A7             ; _strtoint
0297+  22A7             ; 5 digit base10 string number in d
0298+  22A7             ; integer returned in A
0299+  22A7             ;-----------------------------------------------------------------------------
0300+  22A7             _strtoint:
0301+  22A7 E2            push si
0302+  22A8 D8            push b
0303+  22A9 D9            push c
0304+  22AA DA            push d
0305+  22AB 07 ED 20      call _strlen      ; get string length in C
0306+  22AE 7E            dec c
0307+  22AF FD 4E         mov si, d
0308+  22B1 12            mov a, c
0309+  22B2 FD 99         shl a
0310+  22B4 3B 23 24      mov d, table_power
0311+  22B7 59            add d, a
0312+  22B8 38 00 00      mov c, 0
0313+  22BB             _strtoint_L0:
0314+  22BB F6            lodsb      ; load ASCII to al
0315+  22BC B9 00         cmp al, 0
0316+  22BE C6 D1 22      je _strtoint_end
0317+  22C1 6F 30         sub al, $30    ; make into integer
0318+  22C3 22 00         mov ah, 0
0319+  22C5 2A            mov b, [d]
0320+  22C6 AC            mul a, b      ; result in B since it fits in 16bits
0321+  22C7 11            mov a, b
0322+  22C8 28            mov b, c
0323+  22C9 54            add a, b
0324+  22CA 39            mov c, a
0325+  22CB 63 02 00      sub d, 2
0326+  22CE 0A BB 22      jmp _strtoint_L0
0327+  22D1             _strtoint_end:
0328+  22D1 12            mov a, c
0329+  22D2 E7            pop d
0330+  22D3 E6            pop c
0331+  22D4 E5            pop b
0332+  22D5 EF            pop si
0333+  22D6 09            ret
0334+  22D7             
0335+  22D7             ;-----------------------------------------------------------------------------
0336+  22D7             ; PRINT NULL TERMINATED STRING
0337+  22D7             ; pointer in D
0338+  22D7             ;-----------------------------------------------------------------------------
0339+  22D7             _puts:
0340+  22D7 D7            push a
0341+  22D8 DA            push d
0342+  22D9             _puts_L1:
0343+  22D9 1E            mov al, [d]
0344+  22DA B9 00         cmp al, 0
0345+  22DC C6 E8 22      jz _puts_END
0346+  22DF 23            mov ah, al
0347+  22E0 19 00         mov al, 0
0348+  22E2 05 03         syscall sys_io
0349+  22E4 79            inc d
0350+  22E5 0A D9 22      jmp _puts_L1
0351+  22E8             _puts_END:
0352+  22E8 E7            pop d
0353+  22E9 E4            pop a
0354+  22EA 09            ret
0355+  22EB             
0356+  22EB             ;-----------------------------------------------------------------------------
0357+  22EB             ; PRINT N SIZE STRING
0358+  22EB             ; pointer in D
0359+  22EB             ; size in C
0360+  22EB             ;-----------------------------------------------------------------------------
0361+  22EB             _putsn:
0362+  22EB DB            push al
0363+  22EC DA            push d
0364+  22ED D9            push c
0365+  22EE             _putsn_L0:
0366+  22EE 1E            mov al, [d]
0367+  22EF 23            mov ah, al
0368+  22F0 19 00         mov al, 0
0369+  22F2 05 03         syscall sys_io
0370+  22F4 79            inc d
0371+  22F5 7E            dec c  
0372+  22F6 C2 00 00      cmp c, 0
0373+  22F9 C7 EE 22      jne _putsn_L0
0374+  22FC             _putsn_end:
0375+  22FC E6            pop c
0376+  22FD E7            pop d
0377+  22FE E8            pop al
0378+  22FF 09            ret
0379+  2300             
0380+  2300             ;-----------------------------------------------------------------------------
0381+  2300             ; print 16bit decimal number
0382+  2300             ; input number in A
0383+  2300             ;-----------------------------------------------------------------------------
0384+  2300             print_u16d:
0385+  2300 D7            push a
0386+  2301 D8            push b
0387+  2302 26 10 27      mov b, 10000
0388+  2305 AE            div a, b      ; get 10000's coeff.
0389+  2306 07 28 23      call print_number
0390+  2309 11            mov a, b
0391+  230A 26 E8 03      mov b, 1000
0392+  230D AE            div a, b      ; get 1000's coeff.
0393+  230E 07 28 23      call print_number
0394+  2311 11            mov a, b
0395+  2312 26 64 00      mov b, 100
0396+  2315 AE            div a, b
0397+  2316 07 28 23      call print_number
0398+  2319 11            mov a, b
0399+  231A 26 0A 00      mov b, 10
0400+  231D AE            div a, b
0401+  231E 07 28 23      call print_number
0402+  2321 1B            mov al, bl      ; 1's coeff in bl
0403+  2322 07 28 23      call print_number
0404+  2325 E5            pop b
0405+  2326 E4            pop a
0406+  2327 09            ret
0407+  2328             
0408+  2328             ;-----------------------------------------------------------------------------
0409+  2328             ; print AL
0410+  2328             ;-----------------------------------------------------------------------------
0411+  2328             print_number:
0412+  2328 6A 30         add al, $30
0413+  232A 23            mov ah, al
0414+  232B 07 8D 21      call _putchar
0415+  232E 09            ret
0416+  232F             
0417+  232F             ;-----------------------------------------------------------------------------
0418+  232F             ; PRINT 16BIT HEX INTEGER
0419+  232F             ; integer value in reg B
0420+  232F             ;-----------------------------------------------------------------------------
0421+  232F             print_u16x:
0422+  232F D7            push a
0423+  2330 D8            push b
0424+  2331 DD            push bl
0425+  2332 30            mov bl, bh
0426+  2333 07 5B 21      call _itoa        ; convert bh to char in A
0427+  2336 2F            mov bl, al        ; save al
0428+  2337 19 00         mov al, 0
0429+  2339 05 03         syscall sys_io        ; display AH
0430+  233B 24            mov ah, bl        ; retrieve al
0431+  233C 19 00         mov al, 0
0432+  233E 05 03         syscall sys_io        ; display AL
0433+  2340             
0434+  2340 EA            pop bl
0435+  2341 07 5B 21      call _itoa        ; convert bh to char in A
0436+  2344 2F            mov bl, al        ; save al
0437+  2345 19 00         mov al, 0
0438+  2347 05 03         syscall sys_io        ; display AH
0439+  2349 24            mov ah, bl        ; retrieve al
0440+  234A 19 00         mov al, 0
0441+  234C 05 03         syscall sys_io        ; display AL
0442+  234E             
0443+  234E E5            pop b
0444+  234F E4            pop a
0445+  2350 09            ret
0446+  2351             
0447+  2351             ;-----------------------------------------------------------------------------
0448+  2351             ; INPUT 16BIT HEX INTEGER
0449+  2351             ; read 16bit integer into A
0450+  2351             ;-----------------------------------------------------------------------------
0451+  2351             scan_u16x:
0452+  2351 F8 10 00      enter 16
0453+  2354 D8            push b
0454+  2355 DA            push d
0455+  2356             
0456+  2356 FA F1 FF      lea d, [bp + -15]
0457+  2359 07 94 21      call _gets        ; get number
0458+  235C             
0459+  235C 32            mov bl, [d]
0460+  235D 37            mov bh, bl
0461+  235E 33 01 00      mov bl, [d + 1]
0462+  2361 07 4B 21      call _atoi        ; convert to int in AL
0463+  2364 23            mov ah, al        ; move to AH
0464+  2365             
0465+  2365 33 02 00      mov bl, [d + 2]
0466+  2368 37            mov bh, bl
0467+  2369 33 03 00      mov bl, [d + 3]
0468+  236C 07 4B 21      call _atoi        ; convert to int in AL
0469+  236F             
0470+  236F E7            pop d
0471+  2370 E5            pop b
0472+  2371 F9            leave
0473+  2372 09            ret
0474+  2373             
0475+  2373             ;-----------------------------------------------------------------------------
0476+  2373             ; PRINT 8bit HEX INTEGER
0477+  2373             ; integer value in reg bl
0478+  2373             ;-----------------------------------------------------------------------------
0479+  2373             print_u8x:
0480+  2373 D7            push a
0481+  2374 DD            push bl
0482+  2375             
0483+  2375 07 5B 21      call _itoa        ; convert bl to char in A
0484+  2378 2F            mov bl, al        ; save al
0485+  2379 19 00         mov al, 0
0486+  237B 05 03         syscall sys_io        ; display AH
0487+  237D 24            mov ah, bl        ; retrieve al
0488+  237E 19 00         mov al, 0
0489+  2380 05 03         syscall sys_io        ; display AL
0490+  2382             
0491+  2382 EA            pop bl
0492+  2383 E4            pop a
0493+  2384 09            ret
0494+  2385             
0495+  2385             ;-----------------------------------------------------------------------------
0496+  2385             ; print 8bit decimal unsigned number
0497+  2385             ; input number in AL
0498+  2385             ;-----------------------------------------------------------------------------
0499+  2385             print_u8d:
0500+  2385 D7            push a
0501+  2386 D8            push b
0502+  2387             
0503+  2387 22 00         mov ah, 0
0504+  2389 26 64 00      mov b, 100
0505+  238C AE            div a, b
0506+  238D D8            push b      ; save remainder
0507+  238E B9 00         cmp al, 0
0508+  2390 C6 9A 23      je skip100
0509+  2393 6A 30         add al, $30
0510+  2395 23            mov ah, al
0511+  2396 19 00         mov al, 0
0512+  2398 05 03         syscall sys_io  ; print coeff
0513+  239A             skip100:
0514+  239A E4            pop a
0515+  239B 22 00         mov ah, 0
0516+  239D 26 0A 00      mov b, 10
0517+  23A0 AE            div a, b
0518+  23A1 D8            push b      ; save remainder
0519+  23A2 B9 00         cmp al, 0
0520+  23A4 C6 AE 23      je skip10
0521+  23A7 6A 30         add al, $30
0522+  23A9 23            mov ah, al
0523+  23AA 19 00         mov al, 0
0524+  23AC 05 03         syscall sys_io  ; print coeff
0525+  23AE             skip10:
0526+  23AE E4            pop a
0527+  23AF 1B            mov al, bl
0528+  23B0 6A 30         add al, $30
0529+  23B2 23            mov ah, al
0530+  23B3 19 00         mov al, 0
0531+  23B5 05 03         syscall sys_io  ; print coeff
0532+  23B7 E5            pop b
0533+  23B8 E4            pop a
0534+  23B9 09            ret
0535+  23BA             
0536+  23BA             ;-----------------------------------------------------------------------------
0537+  23BA             ; INPUT 8BIT HEX INTEGER
0538+  23BA             ; read 8bit integer into AL
0539+  23BA             ;-----------------------------------------------------------------------------
0540+  23BA             scan_u8x:
0541+  23BA F8 04 00      enter 4
0542+  23BD D8            push b
0543+  23BE DA            push d
0544+  23BF             
0545+  23BF FA FD FF      lea d, [bp + -3]
0546+  23C2 07 94 21      call _gets        ; get number
0547+  23C5             
0548+  23C5 32            mov bl, [d]
0549+  23C6 37            mov bh, bl
0550+  23C7 33 01 00      mov bl, [d + 1]
0551+  23CA 07 4B 21      call _atoi        ; convert to int in AL
0552+  23CD             
0553+  23CD E7            pop d
0554+  23CE E5            pop b
0555+  23CF F9            leave
0556+  23D0 09            ret
0557+  23D1             
0558+  23D1             ;-----------------------------------------------------------------------------
0559+  23D1             ; input decimal number
0560+  23D1             ; result in A
0561+  23D1             ; 655'\0'
0562+  23D1             ; low--------high
0563+  23D1             ;-----------------------------------------------------------------------------
0564+  23D1             scan_u16d:
0565+  23D1 F8 08 00      enter 8
0566+  23D4 E2            push si
0567+  23D5 D8            push b
0568+  23D6 D9            push c
0569+  23D7 DA            push d
0570+  23D8 FA F9 FF      lea d, [bp +- 7]
0571+  23DB 07 94 21      call _gets
0572+  23DE 07 ED 20      call _strlen      ; get string length in C
0573+  23E1 7E            dec c
0574+  23E2 FD 4E         mov si, d
0575+  23E4 12            mov a, c
0576+  23E5 FD 99         shl a
0577+  23E7 3B 23 24      mov d, table_power
0578+  23EA 59            add d, a
0579+  23EB 38 00 00      mov c, 0
0580+  23EE             mul_loop:
0581+  23EE F6            lodsb      ; load ASCII to al
0582+  23EF B9 00         cmp al, 0
0583+  23F1 C6 04 24      je mul_exit
0584+  23F4 6F 30         sub al, $30    ; make into integer
0585+  23F6 22 00         mov ah, 0
0586+  23F8 2A            mov b, [d]
0587+  23F9 AC            mul a, b      ; result in B since it fits in 16bits
0588+  23FA 11            mov a, b
0589+  23FB 28            mov b, c
0590+  23FC 54            add a, b
0591+  23FD 39            mov c, a
0592+  23FE 63 02 00      sub d, 2
0593+  2401 0A EE 23      jmp mul_loop
0594+  2404             mul_exit:
0595+  2404 12            mov a, c
0596+  2405 E7            pop d
0597+  2406 E6            pop c
0598+  2407 E5            pop b
0599+  2408 EF            pop si
0600+  2409 F9            leave
0601+  240A 09            ret
0602+  240B             
0603+  240B 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  240F 34 35 36 37 
0603+  2413 38 39 41 42 
0603+  2417 43 44 45 46 
0604+  241B 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  241F 1B 5B 48 00 
0605+  2423             
0606+  2423             table_power:
0607+  2423 01 00         .dw 1
0608+  2425 0A 00         .dw 10
0609+  2427 64 00         .dw 100
0610+  2429 E8 03         .dw 1000
0611+  242B 10 27         .dw 100004646   242D             ; --- END INLINE ASM SEGMENT
4647   242D             
4648   242D F9            leave
4649   242E 09            ret
4650   242F             
4651   242F             show:
4652   242F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4653   2432             ; int i, j; 
4654   2432 52 02 00      sub sp, 2
4655   2435 52 02 00      sub sp, 2
4656   2438             ; for(i = 0; i <   30     ; i++){ 
4657   2438             _for65_init:
4658   2438 FA FF FF      lea d, [bp + -1] ; $i
4659   243B DA            push d
4660   243C FD 2E 00 00   mov32 cb, $00000000
4660   2440 00 00 
4661   2442 E7            pop d
4662   2443 FD 43         mov [d], b
4663   2445             _for65_cond:
4664   2445 FA FF FF      lea d, [bp + -1] ; $i
4665   2448 2A            mov b, [d]
4666   2449 38 00 00      mov c, 0
4667   244C             ; --- START RELATIONAL
4668   244C D7            push a
4669   244D 11            mov a, b
4670   244E FD 2E 1E 00   mov32 cb, $0000001e
4670   2452 00 00 
4671   2454 B0            cmp a, b
4672   2455 FD 73         slt ; < (signed)
4673   2457 E4            pop a
4674   2458             ; --- END RELATIONAL
4675   2458 C0 00 00      cmp b, 0
4676   245B C6 06 25      je _for65_exit
4677   245E             _for65_block:
4678   245E             ; for(j = 0; j <    40    ; j++){ 
4679   245E             _for66_init:
4680   245E FA FD FF      lea d, [bp + -3] ; $j
4681   2461 DA            push d
4682   2462 FD 2E 00 00   mov32 cb, $00000000
4682   2466 00 00 
4683   2468 E7            pop d
4684   2469 FD 43         mov [d], b
4685   246B             _for66_cond:
4686   246B FA FD FF      lea d, [bp + -3] ; $j
4687   246E 2A            mov b, [d]
4688   246F 38 00 00      mov c, 0
4689   2472             ; --- START RELATIONAL
4690   2472 D7            push a
4691   2473 11            mov a, b
4692   2474 FD 2E 28 00   mov32 cb, $00000028
4692   2478 00 00 
4693   247A B0            cmp a, b
4694   247B FD 73         slt ; < (signed)
4695   247D E4            pop a
4696   247E             ; --- END RELATIONAL
4697   247E C0 00 00      cmp b, 0
4698   2481 C6 E6 24      je _for66_exit
4699   2484             _for66_block:
4700   2484             ; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
4701   2484             _ternary67_cond:
4702   2484 3B DC 2C      mov d, _currState_data ; $currState
4703   2487 D7            push a
4704   2488 DA            push d
4705   2489 FA FF FF      lea d, [bp + -1] ; $i
4706   248C 2A            mov b, [d]
4707   248D 38 00 00      mov c, 0
4708   2490 E7            pop d
4709   2491 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4710   2495 DA            push d
4711   2496 FA FD FF      lea d, [bp + -3] ; $j
4712   2499 2A            mov b, [d]
4713   249A 38 00 00      mov c, 0
4714   249D E7            pop d
4715   249E 5A            add d, b
4716   249F E4            pop a
4717   24A0 32            mov bl, [d]
4718   24A1 A7 00         mov bh, 0
4719   24A3 38 00 00      mov c, 0
4720   24A6             ; --- START RELATIONAL
4721   24A6 D7            push a
4722   24A7 11            mov a, b
4723   24A8 FD 2E 40 00   mov32 cb, $00000040
4723   24AC 00 00 
4724   24AE B0            cmp a, b
4725   24AF FD 71         seq ; ==
4726   24B1 E4            pop a
4727   24B2             ; --- END RELATIONAL
4728   24B2 C0 00 00      cmp b, 0
4729   24B5 C6 C7 24      je _ternary67_FALSE
4730   24B8             _ternary67_TRUE:
4731   24B8             ; --- START FUNCTION CALL
4732   24B8 26 ED 31      mov b, _s4 ; "@ "
4733   24BB FD AB         swp b
4734   24BD D8            push b
4735   24BE 07 25 0C      call printf
4736   24C1 51 02 00      add sp, 2
4737   24C4             ; --- END FUNCTION CALL
4738   24C4 0A D3 24      jmp _ternary67_exit
4739   24C7             _ternary67_FALSE:
4740   24C7             ; --- START FUNCTION CALL
4741   24C7 26 F0 31      mov b, _s5 ; ". "
4742   24CA FD AB         swp b
4743   24CC D8            push b
4744   24CD 07 25 0C      call printf
4745   24D0 51 02 00      add sp, 2
4746   24D3             ; --- END FUNCTION CALL
4747   24D3             _ternary67_exit:
4748   24D3             _for66_update:
4749   24D3 FA FD FF      lea d, [bp + -3] ; $j
4750   24D6 2A            mov b, [d]
4751   24D7 38 00 00      mov c, 0
4752   24DA 11            mov a, b
4753   24DB FD 77         inc b
4754   24DD FA FD FF      lea d, [bp + -3] ; $j
4755   24E0 FD 43         mov [d], b
4756   24E2 27            mov b, a
4757   24E3 0A 6B 24      jmp _for66_cond
4758   24E6             _for66_exit:
4759   24E6             ; putchar(10); 
4760   24E6             ; --- START FUNCTION CALL
4761   24E6 FD 2E 0A 00   mov32 cb, $0000000a
4761   24EA 00 00 
4762   24EC DD            push bl
4763   24ED 07 7E 1F      call putchar
4764   24F0 51 01 00      add sp, 1
4765   24F3             ; --- END FUNCTION CALL
4766   24F3             _for65_update:
4767   24F3 FA FF FF      lea d, [bp + -1] ; $i
4768   24F6 2A            mov b, [d]
4769   24F7 38 00 00      mov c, 0
4770   24FA 11            mov a, b
4771   24FB FD 77         inc b
4772   24FD FA FF FF      lea d, [bp + -1] ; $i
4773   2500 FD 43         mov [d], b
4774   2502 27            mov b, a
4775   2503 0A 45 24      jmp _for65_cond
4776   2506             _for65_exit:
4777   2506 F9            leave
4778   2507 09            ret
4779   2508             
4780   2508             alive:
4781   2508 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4782   250B             ; if(currState[i][j] == '@') return 1; 
4783   250B             _if68_cond:
4784   250B 3B DC 2C      mov d, _currState_data ; $currState
4785   250E D7            push a
4786   250F DA            push d
4787   2510 FA 05 00      lea d, [bp + 5] ; $i
4788   2513 2A            mov b, [d]
4789   2514 38 00 00      mov c, 0
4790   2517 E7            pop d
4791   2518 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4792   251C DA            push d
4793   251D FA 07 00      lea d, [bp + 7] ; $j
4794   2520 2A            mov b, [d]
4795   2521 38 00 00      mov c, 0
4796   2524 E7            pop d
4797   2525 5A            add d, b
4798   2526 E4            pop a
4799   2527 32            mov bl, [d]
4800   2528 A7 00         mov bh, 0
4801   252A 38 00 00      mov c, 0
4802   252D             ; --- START RELATIONAL
4803   252D D7            push a
4804   252E 11            mov a, b
4805   252F FD 2E 40 00   mov32 cb, $00000040
4805   2533 00 00 
4806   2535 B0            cmp a, b
4807   2536 FD 71         seq ; ==
4808   2538 E4            pop a
4809   2539             ; --- END RELATIONAL
4810   2539 C0 00 00      cmp b, 0
4811   253C C6 4A 25      je _if68_else
4812   253F             _if68_TRUE:
4813   253F             ; return 1; 
4814   253F FD 2E 01 00   mov32 cb, $00000001
4814   2543 00 00 
4815   2545 F9            leave
4816   2546 09            ret
4817   2547 0A 52 25      jmp _if68_exit
4818   254A             _if68_else:
4819   254A             ; return 0; 
4820   254A FD 2E 00 00   mov32 cb, $00000000
4820   254E 00 00 
4821   2550 F9            leave
4822   2551 09            ret
4823   2552             _if68_exit:
4824   2552 F9            leave
4825   2553 09            ret
4826   2554             
4827   2554             neighbours:
4828   2554 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4829   2557             ; int count; 
4830   2557 52 02 00      sub sp, 2
4831   255A             ; count = 0; 
4832   255A FA FF FF      lea d, [bp + -1] ; $count
4833   255D DA            push d
4834   255E FD 2E 00 00   mov32 cb, $00000000
4834   2562 00 00 
4835   2564 E7            pop d
4836   2565 FD 43         mov [d], b
4837   2567             ; if(currState[i+-1][j] == '@')			count++; 
4838   2567             _if69_cond:
4839   2567 3B DC 2C      mov d, _currState_data ; $currState
4840   256A D7            push a
4841   256B DA            push d
4842   256C FA 05 00      lea d, [bp + 5] ; $i
4843   256F 2A            mov b, [d]
4844   2570 38 00 00      mov c, 0
4845   2573             ; --- START TERMS
4846   2573 D7            push a
4847   2574 11            mov a, b
4848   2575 FD 2E FF FF   mov32 cb, $ffffffff
4848   2579 FF FF 
4849   257B 56            add b, a
4850   257C E4            pop a
4851   257D             ; --- END TERMS
4852   257D E7            pop d
4853   257E FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4854   2582 DA            push d
4855   2583 FA 07 00      lea d, [bp + 7] ; $j
4856   2586 2A            mov b, [d]
4857   2587 38 00 00      mov c, 0
4858   258A E7            pop d
4859   258B 5A            add d, b
4860   258C E4            pop a
4861   258D 32            mov bl, [d]
4862   258E A7 00         mov bh, 0
4863   2590 38 00 00      mov c, 0
4864   2593             ; --- START RELATIONAL
4865   2593 D7            push a
4866   2594 11            mov a, b
4867   2595 FD 2E 40 00   mov32 cb, $00000040
4867   2599 00 00 
4868   259B B0            cmp a, b
4869   259C FD 71         seq ; ==
4870   259E E4            pop a
4871   259F             ; --- END RELATIONAL
4872   259F C0 00 00      cmp b, 0
4873   25A2 C6 B8 25      je _if69_exit
4874   25A5             _if69_TRUE:
4875   25A5             ; count++; 
4876   25A5 FA FF FF      lea d, [bp + -1] ; $count
4877   25A8 2A            mov b, [d]
4878   25A9 38 00 00      mov c, 0
4879   25AC 11            mov a, b
4880   25AD FD 77         inc b
4881   25AF FA FF FF      lea d, [bp + -1] ; $count
4882   25B2 FD 43         mov [d], b
4883   25B4 27            mov b, a
4884   25B5 0A B8 25      jmp _if69_exit
4885   25B8             _if69_exit:
4886   25B8             ; if(currState[i+-1][j+-1] == '@') 	count++; 
4887   25B8             _if70_cond:
4888   25B8 3B DC 2C      mov d, _currState_data ; $currState
4889   25BB D7            push a
4890   25BC DA            push d
4891   25BD FA 05 00      lea d, [bp + 5] ; $i
4892   25C0 2A            mov b, [d]
4893   25C1 38 00 00      mov c, 0
4894   25C4             ; --- START TERMS
4895   25C4 D7            push a
4896   25C5 11            mov a, b
4897   25C6 FD 2E FF FF   mov32 cb, $ffffffff
4897   25CA FF FF 
4898   25CC 56            add b, a
4899   25CD E4            pop a
4900   25CE             ; --- END TERMS
4901   25CE E7            pop d
4902   25CF FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4903   25D3 DA            push d
4904   25D4 FA 07 00      lea d, [bp + 7] ; $j
4905   25D7 2A            mov b, [d]
4906   25D8 38 00 00      mov c, 0
4907   25DB             ; --- START TERMS
4908   25DB D7            push a
4909   25DC 11            mov a, b
4910   25DD FD 2E FF FF   mov32 cb, $ffffffff
4910   25E1 FF FF 
4911   25E3 56            add b, a
4912   25E4 E4            pop a
4913   25E5             ; --- END TERMS
4914   25E5 E7            pop d
4915   25E6 5A            add d, b
4916   25E7 E4            pop a
4917   25E8 32            mov bl, [d]
4918   25E9 A7 00         mov bh, 0
4919   25EB 38 00 00      mov c, 0
4920   25EE             ; --- START RELATIONAL
4921   25EE D7            push a
4922   25EF 11            mov a, b
4923   25F0 FD 2E 40 00   mov32 cb, $00000040
4923   25F4 00 00 
4924   25F6 B0            cmp a, b
4925   25F7 FD 71         seq ; ==
4926   25F9 E4            pop a
4927   25FA             ; --- END RELATIONAL
4928   25FA C0 00 00      cmp b, 0
4929   25FD C6 13 26      je _if70_exit
4930   2600             _if70_TRUE:
4931   2600             ; count++; 
4932   2600 FA FF FF      lea d, [bp + -1] ; $count
4933   2603 2A            mov b, [d]
4934   2604 38 00 00      mov c, 0
4935   2607 11            mov a, b
4936   2608 FD 77         inc b
4937   260A FA FF FF      lea d, [bp + -1] ; $count
4938   260D FD 43         mov [d], b
4939   260F 27            mov b, a
4940   2610 0A 13 26      jmp _if70_exit
4941   2613             _if70_exit:
4942   2613             ; if(currState[i+-1][j+1] == '@') 	count++; 
4943   2613             _if71_cond:
4944   2613 3B DC 2C      mov d, _currState_data ; $currState
4945   2616 D7            push a
4946   2617 DA            push d
4947   2618 FA 05 00      lea d, [bp + 5] ; $i
4948   261B 2A            mov b, [d]
4949   261C 38 00 00      mov c, 0
4950   261F             ; --- START TERMS
4951   261F D7            push a
4952   2620 11            mov a, b
4953   2621 FD 2E FF FF   mov32 cb, $ffffffff
4953   2625 FF FF 
4954   2627 56            add b, a
4955   2628 E4            pop a
4956   2629             ; --- END TERMS
4957   2629 E7            pop d
4958   262A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4959   262E DA            push d
4960   262F FA 07 00      lea d, [bp + 7] ; $j
4961   2632 2A            mov b, [d]
4962   2633 38 00 00      mov c, 0
4963   2636             ; --- START TERMS
4964   2636 D7            push a
4965   2637 11            mov a, b
4966   2638 FD 2E 01 00   mov32 cb, $00000001
4966   263C 00 00 
4967   263E 56            add b, a
4968   263F E4            pop a
4969   2640             ; --- END TERMS
4970   2640 E7            pop d
4971   2641 5A            add d, b
4972   2642 E4            pop a
4973   2643 32            mov bl, [d]
4974   2644 A7 00         mov bh, 0
4975   2646 38 00 00      mov c, 0
4976   2649             ; --- START RELATIONAL
4977   2649 D7            push a
4978   264A 11            mov a, b
4979   264B FD 2E 40 00   mov32 cb, $00000040
4979   264F 00 00 
4980   2651 B0            cmp a, b
4981   2652 FD 71         seq ; ==
4982   2654 E4            pop a
4983   2655             ; --- END RELATIONAL
4984   2655 C0 00 00      cmp b, 0
4985   2658 C6 6E 26      je _if71_exit
4986   265B             _if71_TRUE:
4987   265B             ; count++; 
4988   265B FA FF FF      lea d, [bp + -1] ; $count
4989   265E 2A            mov b, [d]
4990   265F 38 00 00      mov c, 0
4991   2662 11            mov a, b
4992   2663 FD 77         inc b
4993   2665 FA FF FF      lea d, [bp + -1] ; $count
4994   2668 FD 43         mov [d], b
4995   266A 27            mov b, a
4996   266B 0A 6E 26      jmp _if71_exit
4997   266E             _if71_exit:
4998   266E             ; if(currState[i][j+-1] == '@') 		count++; 
4999   266E             _if72_cond:
5000   266E 3B DC 2C      mov d, _currState_data ; $currState
5001   2671 D7            push a
5002   2672 DA            push d
5003   2673 FA 05 00      lea d, [bp + 5] ; $i
5004   2676 2A            mov b, [d]
5005   2677 38 00 00      mov c, 0
5006   267A E7            pop d
5007   267B FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
5008   267F DA            push d
5009   2680 FA 07 00      lea d, [bp + 7] ; $j
5010   2683 2A            mov b, [d]
5011   2684 38 00 00      mov c, 0
5012   2687             ; --- START TERMS
5013   2687 D7            push a
5014   2688 11            mov a, b
5015   2689 FD 2E FF FF   mov32 cb, $ffffffff
5015   268D FF FF 
5016   268F 56            add b, a
5017   2690 E4            pop a
5018   2691             ; --- END TERMS
5019   2691 E7            pop d
5020   2692 5A            add d, b
5021   2693 E4            pop a
5022   2694 32            mov bl, [d]
5023   2695 A7 00         mov bh, 0
5024   2697 38 00 00      mov c, 0
5025   269A             ; --- START RELATIONAL
5026   269A D7            push a
5027   269B 11            mov a, b
5028   269C FD 2E 40 00   mov32 cb, $00000040
5028   26A0 00 00 
5029   26A2 B0            cmp a, b
5030   26A3 FD 71         seq ; ==
5031   26A5 E4            pop a
5032   26A6             ; --- END RELATIONAL
5033   26A6 C0 00 00      cmp b, 0
5034   26A9 C6 BF 26      je _if72_exit
5035   26AC             _if72_TRUE:
5036   26AC             ; count++; 
5037   26AC FA FF FF      lea d, [bp + -1] ; $count
5038   26AF 2A            mov b, [d]
5039   26B0 38 00 00      mov c, 0
5040   26B3 11            mov a, b
5041   26B4 FD 77         inc b
5042   26B6 FA FF FF      lea d, [bp + -1] ; $count
5043   26B9 FD 43         mov [d], b
5044   26BB 27            mov b, a
5045   26BC 0A BF 26      jmp _if72_exit
5046   26BF             _if72_exit:
5047   26BF             ; if(currState[i][j+1] == '@') 			count++; 
5048   26BF             _if73_cond:
5049   26BF 3B DC 2C      mov d, _currState_data ; $currState
5050   26C2 D7            push a
5051   26C3 DA            push d
5052   26C4 FA 05 00      lea d, [bp + 5] ; $i
5053   26C7 2A            mov b, [d]
5054   26C8 38 00 00      mov c, 0
5055   26CB E7            pop d
5056   26CC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
5057   26D0 DA            push d
5058   26D1 FA 07 00      lea d, [bp + 7] ; $j
5059   26D4 2A            mov b, [d]
5060   26D5 38 00 00      mov c, 0
5061   26D8             ; --- START TERMS
5062   26D8 D7            push a
5063   26D9 11            mov a, b
5064   26DA FD 2E 01 00   mov32 cb, $00000001
5064   26DE 00 00 
5065   26E0 56            add b, a
5066   26E1 E4            pop a
5067   26E2             ; --- END TERMS
5068   26E2 E7            pop d
5069   26E3 5A            add d, b
5070   26E4 E4            pop a
5071   26E5 32            mov bl, [d]
5072   26E6 A7 00         mov bh, 0
5073   26E8 38 00 00      mov c, 0
5074   26EB             ; --- START RELATIONAL
5075   26EB D7            push a
5076   26EC 11            mov a, b
5077   26ED FD 2E 40 00   mov32 cb, $00000040
5077   26F1 00 00 
5078   26F3 B0            cmp a, b
5079   26F4 FD 71         seq ; ==
5080   26F6 E4            pop a
5081   26F7             ; --- END RELATIONAL
5082   26F7 C0 00 00      cmp b, 0
5083   26FA C6 10 27      je _if73_exit
5084   26FD             _if73_TRUE:
5085   26FD             ; count++; 
5086   26FD FA FF FF      lea d, [bp + -1] ; $count
5087   2700 2A            mov b, [d]
5088   2701 38 00 00      mov c, 0
5089   2704 11            mov a, b
5090   2705 FD 77         inc b
5091   2707 FA FF FF      lea d, [bp + -1] ; $count
5092   270A FD 43         mov [d], b
5093   270C 27            mov b, a
5094   270D 0A 10 27      jmp _if73_exit
5095   2710             _if73_exit:
5096   2710             ; if(currState[i+1][j+-1] == '@') 	count++; 
5097   2710             _if74_cond:
5098   2710 3B DC 2C      mov d, _currState_data ; $currState
5099   2713 D7            push a
5100   2714 DA            push d
5101   2715 FA 05 00      lea d, [bp + 5] ; $i
5102   2718 2A            mov b, [d]
5103   2719 38 00 00      mov c, 0
5104   271C             ; --- START TERMS
5105   271C D7            push a
5106   271D 11            mov a, b
5107   271E FD 2E 01 00   mov32 cb, $00000001
5107   2722 00 00 
5108   2724 56            add b, a
5109   2725 E4            pop a
5110   2726             ; --- END TERMS
5111   2726 E7            pop d
5112   2727 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
5113   272B DA            push d
5114   272C FA 07 00      lea d, [bp + 7] ; $j
5115   272F 2A            mov b, [d]
5116   2730 38 00 00      mov c, 0
5117   2733             ; --- START TERMS
5118   2733 D7            push a
5119   2734 11            mov a, b
5120   2735 FD 2E FF FF   mov32 cb, $ffffffff
5120   2739 FF FF 
5121   273B 56            add b, a
5122   273C E4            pop a
5123   273D             ; --- END TERMS
5124   273D E7            pop d
5125   273E 5A            add d, b
5126   273F E4            pop a
5127   2740 32            mov bl, [d]
5128   2741 A7 00         mov bh, 0
5129   2743 38 00 00      mov c, 0
5130   2746             ; --- START RELATIONAL
5131   2746 D7            push a
5132   2747 11            mov a, b
5133   2748 FD 2E 40 00   mov32 cb, $00000040
5133   274C 00 00 
5134   274E B0            cmp a, b
5135   274F FD 71         seq ; ==
5136   2751 E4            pop a
5137   2752             ; --- END RELATIONAL
5138   2752 C0 00 00      cmp b, 0
5139   2755 C6 6B 27      je _if74_exit
5140   2758             _if74_TRUE:
5141   2758             ; count++; 
5142   2758 FA FF FF      lea d, [bp + -1] ; $count
5143   275B 2A            mov b, [d]
5144   275C 38 00 00      mov c, 0
5145   275F 11            mov a, b
5146   2760 FD 77         inc b
5147   2762 FA FF FF      lea d, [bp + -1] ; $count
5148   2765 FD 43         mov [d], b
5149   2767 27            mov b, a
5150   2768 0A 6B 27      jmp _if74_exit
5151   276B             _if74_exit:
5152   276B             ; if(currState[i+1][j] == '@') 			count++; 
5153   276B             _if75_cond:
5154   276B 3B DC 2C      mov d, _currState_data ; $currState
5155   276E D7            push a
5156   276F DA            push d
5157   2770 FA 05 00      lea d, [bp + 5] ; $i
5158   2773 2A            mov b, [d]
5159   2774 38 00 00      mov c, 0
5160   2777             ; --- START TERMS
5161   2777 D7            push a
5162   2778 11            mov a, b
5163   2779 FD 2E 01 00   mov32 cb, $00000001
5163   277D 00 00 
5164   277F 56            add b, a
5165   2780 E4            pop a
5166   2781             ; --- END TERMS
5167   2781 E7            pop d
5168   2782 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
5169   2786 DA            push d
5170   2787 FA 07 00      lea d, [bp + 7] ; $j
5171   278A 2A            mov b, [d]
5172   278B 38 00 00      mov c, 0
5173   278E E7            pop d
5174   278F 5A            add d, b
5175   2790 E4            pop a
5176   2791 32            mov bl, [d]
5177   2792 A7 00         mov bh, 0
5178   2794 38 00 00      mov c, 0
5179   2797             ; --- START RELATIONAL
5180   2797 D7            push a
5181   2798 11            mov a, b
5182   2799 FD 2E 40 00   mov32 cb, $00000040
5182   279D 00 00 
5183   279F B0            cmp a, b
5184   27A0 FD 71         seq ; ==
5185   27A2 E4            pop a
5186   27A3             ; --- END RELATIONAL
5187   27A3 C0 00 00      cmp b, 0
5188   27A6 C6 BC 27      je _if75_exit
5189   27A9             _if75_TRUE:
5190   27A9             ; count++; 
5191   27A9 FA FF FF      lea d, [bp + -1] ; $count
5192   27AC 2A            mov b, [d]
5193   27AD 38 00 00      mov c, 0
5194   27B0 11            mov a, b
5195   27B1 FD 77         inc b
5196   27B3 FA FF FF      lea d, [bp + -1] ; $count
5197   27B6 FD 43         mov [d], b
5198   27B8 27            mov b, a
5199   27B9 0A BC 27      jmp _if75_exit
5200   27BC             _if75_exit:
5201   27BC             ; if(currState[i+1][j+1] == '@') 		count++; 
5202   27BC             _if76_cond:
5203   27BC 3B DC 2C      mov d, _currState_data ; $currState
5204   27BF D7            push a
5205   27C0 DA            push d
5206   27C1 FA 05 00      lea d, [bp + 5] ; $i
5207   27C4 2A            mov b, [d]
5208   27C5 38 00 00      mov c, 0
5209   27C8             ; --- START TERMS
5210   27C8 D7            push a
5211   27C9 11            mov a, b
5212   27CA FD 2E 01 00   mov32 cb, $00000001
5212   27CE 00 00 
5213   27D0 56            add b, a
5214   27D1 E4            pop a
5215   27D2             ; --- END TERMS
5216   27D2 E7            pop d
5217   27D3 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
5218   27D7 DA            push d
5219   27D8 FA 07 00      lea d, [bp + 7] ; $j
5220   27DB 2A            mov b, [d]
5221   27DC 38 00 00      mov c, 0
5222   27DF             ; --- START TERMS
5223   27DF D7            push a
5224   27E0 11            mov a, b
5225   27E1 FD 2E 01 00   mov32 cb, $00000001
5225   27E5 00 00 
5226   27E7 56            add b, a
5227   27E8 E4            pop a
5228   27E9             ; --- END TERMS
5229   27E9 E7            pop d
5230   27EA 5A            add d, b
5231   27EB E4            pop a
5232   27EC 32            mov bl, [d]
5233   27ED A7 00         mov bh, 0
5234   27EF 38 00 00      mov c, 0
5235   27F2             ; --- START RELATIONAL
5236   27F2 D7            push a
5237   27F3 11            mov a, b
5238   27F4 FD 2E 40 00   mov32 cb, $00000040
5238   27F8 00 00 
5239   27FA B0            cmp a, b
5240   27FB FD 71         seq ; ==
5241   27FD E4            pop a
5242   27FE             ; --- END RELATIONAL
5243   27FE C0 00 00      cmp b, 0
5244   2801 C6 17 28      je _if76_exit
5245   2804             _if76_TRUE:
5246   2804             ; count++; 
5247   2804 FA FF FF      lea d, [bp + -1] ; $count
5248   2807 2A            mov b, [d]
5249   2808 38 00 00      mov c, 0
5250   280B 11            mov a, b
5251   280C FD 77         inc b
5252   280E FA FF FF      lea d, [bp + -1] ; $count
5253   2811 FD 43         mov [d], b
5254   2813 27            mov b, a
5255   2814 0A 17 28      jmp _if76_exit
5256   2817             _if76_exit:
5257   2817             ; return count; 
5258   2817 FA FF FF      lea d, [bp + -1] ; $count
5259   281A 2A            mov b, [d]
5260   281B 38 00 00      mov c, 0
5261   281E F9            leave
5262   281F 09            ret
5263   2820             ; --- END TEXT SEGMENT
5264   2820             
5265   2820             ; --- BEGIN DATA SEGMENT
5266   2820             _clear_data: 
5267   2820 00          .db 
5268   2821 1B 5B 32 4A .db $1b,$5b,$32,$4a,$1b,$5b,$48,$0,
5268   2825 1B 5B 48 00 
5269   2829 00 00 00    .fill 3, 0
5270   282C 00 00 00 00 _nextState_data: .fill 1200, 0
5270   2830 00 00 00 00 
5270   2834 00 00 00 00 
5270   2838 00 00 00 00 
5270   283C 00 00 00 00 
5270   2840 00 00 00 00 
5270   2844 00 00 00 00 
5270   2848 00 00 00 00 
5270   284C 00 00 00 00 
5270   2850 00 00 00 00 
5270   2854 00 00 00 00 
5270   2858 00 00 00 00 
5270   285C 00 00 00 00 
5270   2860 00 00 00 00 
5270   2864 00 00 00 00 
5270   2868 00 00 00 00 
5270   286C 00 00 00 00 
5270   2870 00 00 00 00 
5270   2874 00 00 00 00 
5270   2878 00 00 00 00 
5270   287C 00 00 00 00 
5270   2880 00 00 00 00 
5270   2884 00 00 00 00 
5270   2888 00 00 00 00 
5270   288C 00 00 00 00 
5270   2890 00 00 00 00 
5270   2894 00 00 00 00 
5270   2898 00 00 00 00 
5270   289C 00 00 00 00 
5270   28A0 00 00 00 00 
5270   28A4 00 00 00 00 
5270   28A8 00 00 00 00 
5270   28AC 00 00 00 00 
5270   28B0 00 00 00 00 
5270   28B4 00 00 00 00 
5270   28B8 00 00 00 00 
5270   28BC 00 00 00 00 
5270   28C0 00 00 00 00 
5270   28C4 00 00 00 00 
5270   28C8 00 00 00 00 
5270   28CC 00 00 00 00 
5270   28D0 00 00 00 00 
5270   28D4 00 00 00 00 
5270   28D8 00 00 00 00 
5270   28DC 00 00 00 00 
5270   28E0 00 00 00 00 
5270   28E4 00 00 00 00 
5270   28E8 00 00 00 00 
5270   28EC 00 00 00 00 
5270   28F0 00 00 00 00 
5270   28F4 00 00 00 00 
5270   28F8 00 00 00 00 
5270   28FC 00 00 00 00 
5270   2900 00 00 00 00 
5270   2904 00 00 00 00 
5270   2908 00 00 00 00 
5270   290C 00 00 00 00 
5270   2910 00 00 00 00 
5270   2914 00 00 00 00 
5270   2918 00 00 00 00 
5270   291C 00 00 00 00 
5270   2920 00 00 00 00 
5270   2924 00 00 00 00 
5270   2928 00 00 00 00 
5270   292C 00 00 00 00 
5270   2930 00 00 00 00 
5270   2934 00 00 00 00 
5270   2938 00 00 00 00 
5270   293C 00 00 00 00 
5270   2940 00 00 00 00 
5270   2944 00 00 00 00 
5270   2948 00 00 00 00 
5270   294C 00 00 00 00 
5270   2950 00 00 00 00 
5270   2954 00 00 00 00 
5270   2958 00 00 00 00 
5270   295C 00 00 00 00 
5270   2960 00 00 00 00 
5270   2964 00 00 00 00 
5270   2968 00 00 00 00 
5270   296C 00 00 00 00 
5270   2970 00 00 00 00 
5270   2974 00 00 00 00 
5270   2978 00 00 00 00 
5270   297C 00 00 00 00 
5270   2980 00 00 00 00 
5270   2984 00 00 00 00 
5270   2988 00 00 00 00 
5270   298C 00 00 00 00 
5270   2990 00 00 00 00 
5270   2994 00 00 00 00 
5270   2998 00 00 00 00 
5270   299C 00 00 00 00 
5270   29A0 00 00 00 00 
5270   29A4 00 00 00 00 
5270   29A8 00 00 00 00 
5270   29AC 00 00 00 00 
5270   29B0 00 00 00 00 
5270   29B4 00 00 00 00 
5270   29B8 00 00 00 00 
5270   29BC 00 00 00 00 
5270   29C0 00 00 00 00 
5270   29C4 00 00 00 00 
5270   29C8 00 00 00 00 
5270   29CC 00 00 00 00 
5270   29D0 00 00 00 00 
5270   29D4 00 00 00 00 
5270   29D8 00 00 00 00 
5270   29DC 00 00 00 00 
5270   29E0 00 00 00 00 
5270   29E4 00 00 00 00 
5270   29E8 00 00 00 00 
5270   29EC 00 00 00 00 
5270   29F0 00 00 00 00 
5270   29F4 00 00 00 00 
5270   29F8 00 00 00 00 
5270   29FC 00 00 00 00 
5270   2A00 00 00 00 00 
5270   2A04 00 00 00 00 
5270   2A08 00 00 00 00 
5270   2A0C 00 00 00 00 
5270   2A10 00 00 00 00 
5270   2A14 00 00 00 00 
5270   2A18 00 00 00 00 
5270   2A1C 00 00 00 00 
5270   2A20 00 00 00 00 
5270   2A24 00 00 00 00 
5270   2A28 00 00 00 00 
5270   2A2C 00 00 00 00 
5270   2A30 00 00 00 00 
5270   2A34 00 00 00 00 
5270   2A38 00 00 00 00 
5270   2A3C 00 00 00 00 
5270   2A40 00 00 00 00 
5270   2A44 00 00 00 00 
5270   2A48 00 00 00 00 
5270   2A4C 00 00 00 00 
5270   2A50 00 00 00 00 
5270   2A54 00 00 00 00 
5270   2A58 00 00 00 00 
5270   2A5C 00 00 00 00 
5270   2A60 00 00 00 00 
5270   2A64 00 00 00 00 
5270   2A68 00 00 00 00 
5270   2A6C 00 00 00 00 
5270   2A70 00 00 00 00 
5270   2A74 00 00 00 00 
5270   2A78 00 00 00 00 
5270   2A7C 00 00 00 00 
5270   2A80 00 00 00 00 
5270   2A84 00 00 00 00 
5270   2A88 00 00 00 00 
5270   2A8C 00 00 00 00 
5270   2A90 00 00 00 00 
5270   2A94 00 00 00 00 
5270   2A98 00 00 00 00 
5270   2A9C 00 00 00 00 
5270   2AA0 00 00 00 00 
5270   2AA4 00 00 00 00 
5270   2AA8 00 00 00 00 
5270   2AAC 00 00 00 00 
5270   2AB0 00 00 00 00 
5270   2AB4 00 00 00 00 
5270   2AB8 00 00 00 00 
5270   2ABC 00 00 00 00 
5270   2AC0 00 00 00 00 
5270   2AC4 00 00 00 00 
5270   2AC8 00 00 00 00 
5270   2ACC 00 00 00 00 
5270   2AD0 00 00 00 00 
5270   2AD4 00 00 00 00 
5270   2AD8 00 00 00 00 
5270   2ADC 00 00 00 00 
5270   2AE0 00 00 00 00 
5270   2AE4 00 00 00 00 
5270   2AE8 00 00 00 00 
5270   2AEC 00 00 00 00 
5270   2AF0 00 00 00 00 
5270   2AF4 00 00 00 00 
5270   2AF8 00 00 00 00 
5270   2AFC 00 00 00 00 
5270   2B00 00 00 00 00 
5270   2B04 00 00 00 00 
5270   2B08 00 00 00 00 
5270   2B0C 00 00 00 00 
5270   2B10 00 00 00 00 
5270   2B14 00 00 00 00 
5270   2B18 00 00 00 00 
5270   2B1C 00 00 00 00 
5270   2B20 00 00 00 00 
5270   2B24 00 00 00 00 
5270   2B28 00 00 00 00 
5270   2B2C 00 00 00 00 
5270   2B30 00 00 00 00 
5270   2B34 00 00 00 00 
5270   2B38 00 00 00 00 
5270   2B3C 00 00 00 00 
5270   2B40 00 00 00 00 
5270   2B44 00 00 00 00 
5270   2B48 00 00 00 00 
5270   2B4C 00 00 00 00 
5270   2B50 00 00 00 00 
5270   2B54 00 00 00 00 
5270   2B58 00 00 00 00 
5270   2B5C 00 00 00 00 
5270   2B60 00 00 00 00 
5270   2B64 00 00 00 00 
5270   2B68 00 00 00 00 
5270   2B6C 00 00 00 00 
5270   2B70 00 00 00 00 
5270   2B74 00 00 00 00 
5270   2B78 00 00 00 00 
5270   2B7C 00 00 00 00 
5270   2B80 00 00 00 00 
5270   2B84 00 00 00 00 
5270   2B88 00 00 00 00 
5270   2B8C 00 00 00 00 
5270   2B90 00 00 00 00 
5270   2B94 00 00 00 00 
5270   2B98 00 00 00 00 
5270   2B9C 00 00 00 00 
5270   2BA0 00 00 00 00 
5270   2BA4 00 00 00 00 
5270   2BA8 00 00 00 00 
5270   2BAC 00 00 00 00 
5270   2BB0 00 00 00 00 
5270   2BB4 00 00 00 00 
5270   2BB8 00 00 00 00 
5270   2BBC 00 00 00 00 
5270   2BC0 00 00 00 00 
5270   2BC4 00 00 00 00 
5270   2BC8 00 00 00 00 
5270   2BCC 00 00 00 00 
5270   2BD0 00 00 00 00 
5270   2BD4 00 00 00 00 
5270   2BD8 00 00 00 00 
5270   2BDC 00 00 00 00 
5270   2BE0 00 00 00 00 
5270   2BE4 00 00 00 00 
5270   2BE8 00 00 00 00 
5270   2BEC 00 00 00 00 
5270   2BF0 00 00 00 00 
5270   2BF4 00 00 00 00 
5270   2BF8 00 00 00 00 
5270   2BFC 00 00 00 00 
5270   2C00 00 00 00 00 
5270   2C04 00 00 00 00 
5270   2C08 00 00 00 00 
5270   2C0C 00 00 00 00 
5270   2C10 00 00 00 00 
5270   2C14 00 00 00 00 
5270   2C18 00 00 00 00 
5270   2C1C 00 00 00 00 
5270   2C20 00 00 00 00 
5270   2C24 00 00 00 00 
5270   2C28 00 00 00 00 
5270   2C2C 00 00 00 00 
5270   2C30 00 00 00 00 
5270   2C34 00 00 00 00 
5270   2C38 00 00 00 00 
5270   2C3C 00 00 00 00 
5270   2C40 00 00 00 00 
5270   2C44 00 00 00 00 
5270   2C48 00 00 00 00 
5270   2C4C 00 00 00 00 
5270   2C50 00 00 00 00 
5270   2C54 00 00 00 00 
5270   2C58 00 00 00 00 
5270   2C5C 00 00 00 00 
5270   2C60 00 00 00 00 
5270   2C64 00 00 00 00 
5270   2C68 00 00 00 00 
5270   2C6C 00 00 00 00 
5270   2C70 00 00 00 00 
5270   2C74 00 00 00 00 
5270   2C78 00 00 00 00 
5270   2C7C 00 00 00 00 
5270   2C80 00 00 00 00 
5270   2C84 00 00 00 00 
5270   2C88 00 00 00 00 
5270   2C8C 00 00 00 00 
5270   2C90 00 00 00 00 
5270   2C94 00 00 00 00 
5270   2C98 00 00 00 00 
5270   2C9C 00 00 00 00 
5270   2CA0 00 00 00 00 
5270   2CA4 00 00 00 00 
5270   2CA8 00 00 00 00 
5270   2CAC 00 00 00 00 
5270   2CB0 00 00 00 00 
5270   2CB4 00 00 00 00 
5270   2CB8 00 00 00 00 
5270   2CBC 00 00 00 00 
5270   2CC0 00 00 00 00 
5270   2CC4 00 00 00 00 
5270   2CC8 00 00 00 00 
5270   2CCC 00 00 00 00 
5270   2CD0 00 00 00 00 
5270   2CD4 00 00 00 00 
5270   2CD8 00 00 00 00 
5271   2CDC             _currState_data: 
5272   2CDC 00          .db 
5273   2CDD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5273   2CE1 20 20 20 20 
5273   2CE5 20 20 20 20 
5273   2CE9 20 20 20 20 
5273   2CED 20 20 20 20 
5273   2CF1 20 20 20 20 
5273   2CF5 20 20 20 20 
5273   2CF9 20 20 
5274   2CFB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5274   2CFF 20 20 20 20 
5274   2D03 20 20 20 20 
5274   2D07 20 20 20 20 
5274   2D0B 20 20 20 20 
5274   2D0F 20 20 20 20 
5274   2D13 20 20 20 20 
5274   2D17 20 20 
5275   2D19 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5275   2D1D 20 20 20 20 
5275   2D21 20 20 20 20 
5275   2D25 20 20 20 20 
5275   2D29 20 20 20 20 
5275   2D2D 20 20 20 20 
5275   2D31 20 20 20 20 
5275   2D35 20 20 
5276   2D37 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5276   2D3B 20 20 20 20 
5276   2D3F 20 20 20 20 
5276   2D43 20 20 20 20 
5276   2D47 20 20 20 20 
5276   2D4B 20 20 20 20 
5276   2D4F 20 20 20 20 
5276   2D53 20 20 
5277   2D55 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
5277   2D59 20 20 20 20 
5277   2D5D 20 20 20 20 
5277   2D61 20 20 20 20 
5277   2D65 20 20 20 20 
5277   2D69 20 20 20 20 
5277   2D6D 20 20 20 40 
5277   2D71 20 20 
5278   2D73 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5278   2D77 20 20 20 20 
5278   2D7B 20 20 20 20 
5278   2D7F 20 20 20 20 
5278   2D83 20 20 20 20 
5278   2D87 20 20 20 20 
5278   2D8B 20 20 20 20 
5278   2D8F 20 20 
5279   2D91 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5279   2D95 20 40 20 40 
5279   2D99 20 20 20 20 
5279   2D9D 20 20 20 20 
5279   2DA1 20 20 20 20 
5279   2DA5 20 20 20 20 
5279   2DA9 20 20 20 20 
5279   2DAD 20 20 
5280   2DAF 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
5280   2DB3 20 40 40 20 
5280   2DB7 20 20 20 20 
5280   2DBB 20 40 40 20 
5280   2DBF 20 20 20 20 
5280   2DC3 20 20 20 20 
5280   2DC7 20 20 20 40 
5280   2DCB 40 20 
5281   2DCD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
5281   2DD1 20 20 20 20 
5281   2DD5 20 20 20 20 
5281   2DD9 20 20 40 20 
5281   2DDD 20 20 40 20 
5281   2DE1 20 20 20 40 
5281   2DE5 40 20 20 20 
5281   2DE9 20 20 
5282   2DEB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
5282   2DEF 20 20 20 40 
5282   2DF3 40 20 20 20 
5282   2DF7 20 40 40 20 
5282   2DFB 20 20 20 20 
5282   2DFF 20 20 20 40 
5282   2E03 20 20 20 20 
5282   2E07 20 40 
5283   2E09 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
5283   2E0D 40 20 20 20 
5283   2E11 20 20 20 20 
5283   2E15 20 20 20 20 
5283   2E19 20 20 20 20 
5283   2E1D 20 20 20 40 
5283   2E21 40 20 20 20 
5283   2E25 20 20 
5284   2E27 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5284   2E2B 20 20 20 40 
5284   2E2F 20 40 40 20 
5284   2E33 20 20 20 40 
5284   2E37 20 40 20 20 
5284   2E3B 20 20 20 20 
5284   2E3F 20 20 20 20 
5284   2E43 20 20 
5285   2E45 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
5285   2E49 20 20 20 20 
5285   2E4D 20 20 20 20 
5285   2E51 20 40 20 20 
5285   2E55 20 20 20 40 
5285   2E59 20 20 20 20 
5285   2E5D 20 20 20 40 
5285   2E61 20 20 
5286   2E63 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
5286   2E67 20 20 20 20 
5286   2E6B 20 20 20 20 
5286   2E6F 20 20 20 20 
5286   2E73 20 20 20 20 
5286   2E77 20 20 20 20 
5286   2E7B 40 20 20 20 
5286   2E7F 40 20 
5287   2E81 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5287   2E85 20 20 20 20 
5287   2E89 20 20 20 20 
5287   2E8D 20 20 20 20 
5287   2E91 20 20 20 20 
5287   2E95 20 20 20 20 
5287   2E99 20 20 20 20 
5287   2E9D 20 20 
5288   2E9F 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5288   2EA3 20 40 40 20 
5288   2EA7 20 20 20 20 
5288   2EAB 20 20 20 20 
5288   2EAF 20 20 20 20 
5288   2EB3 20 20 20 20 
5288   2EB7 20 20 20 20 
5288   2EBB 20 20 
5289   2EBD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5289   2EC1 20 20 20 20 
5289   2EC5 20 20 20 20 
5289   2EC9 20 20 20 20 
5289   2ECD 20 20 20 20 
5289   2ED1 20 20 20 20 
5289   2ED5 20 20 20 20 
5289   2ED9 20 20 
5290   2EDB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5290   2EDF 20 20 20 20 
5290   2EE3 20 20 20 20 
5290   2EE7 20 20 20 20 
5290   2EEB 20 20 20 20 
5290   2EEF 20 20 20 20 
5290   2EF3 20 20 20 20 
5290   2EF7 20 20 
5291   2EF9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5291   2EFD 20 20 20 20 
5291   2F01 20 20 20 20 
5291   2F05 20 20 20 20 
5291   2F09 20 20 20 20 
5291   2F0D 20 20 20 20 
5291   2F11 20 20 20 20 
5291   2F15 20 20 
5292   2F17 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5292   2F1B 20 20 20 20 
5292   2F1F 20 20 20 20 
5292   2F23 20 20 20 20 
5292   2F27 20 20 20 20 
5292   2F2B 20 20 20 20 
5292   2F2F 20 20 20 20 
5292   2F33 20 20 
5293   2F35 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5293   2F39 20 20 20 20 
5293   2F3D 20 20 20 20 
5293   2F41 20 20 20 20 
5293   2F45 20 20 20 20 
5293   2F49 20 20 20 20 
5293   2F4D 20 20 20 20 
5293   2F51 20 20 
5294   2F53 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5294   2F57 20 20 20 20 
5294   2F5B 20 20 20 20 
5294   2F5F 20 20 20 20 
5294   2F63 20 20 20 20 
5294   2F67 20 20 20 20 
5294   2F6B 20 20 20 20 
5294   2F6F 20 20 
5295   2F71 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5295   2F75 20 20 20 20 
5295   2F79 20 20 20 20 
5295   2F7D 20 20 20 20 
5295   2F81 20 20 20 20 
5295   2F85 20 20 20 20 
5295   2F89 20 20 20 20 
5295   2F8D 20 20 
5296   2F8F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5296   2F93 20 20 20 20 
5296   2F97 20 20 20 20 
5296   2F9B 20 20 20 20 
5296   2F9F 20 20 20 20 
5296   2FA3 20 20 20 20 
5296   2FA7 20 20 20 20 
5296   2FAB 20 20 
5297   2FAD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5297   2FB1 20 20 20 20 
5297   2FB5 20 20 20 20 
5297   2FB9 20 20 20 20 
5297   2FBD 20 20 20 20 
5297   2FC1 20 20 20 20 
5297   2FC5 20 20 20 20 
5297   2FC9 20 20 
5298   2FCB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5298   2FCF 20 20 20 20 
5298   2FD3 20 20 20 20 
5298   2FD7 20 20 20 20 
5298   2FDB 20 20 20 20 
5298   2FDF 20 20 20 20 
5298   2FE3 20 20 20 20 
5298   2FE7 20 20 
5299   2FE9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5299   2FED 20 20 20 20 
5299   2FF1 20 20 20 20 
5299   2FF5 20 20 20 20 
5299   2FF9 20 20 20 20 
5300   2FFD 00 00 00 00 .fill 400, 0
5300   3001 00 00 00 00 
5300   3005 00 00 00 00 
5300   3009 00 00 00 00 
5300   300D 00 00 00 00 
5300   3011 00 00 00 00 
5300   3015 00 00 00 00 
5300   3019 00 00 00 00 
5300   301D 00 00 00 00 
5300   3021 00 00 00 00 
5300   3025 00 00 00 00 
5300   3029 00 00 00 00 
5300   302D 00 00 00 00 
5300   3031 00 00 00 00 
5300   3035 00 00 00 00 
5300   3039 00 00 00 00 
5300   303D 00 00 00 00 
5300   3041 00 00 00 00 
5300   3045 00 00 00 00 
5300   3049 00 00 00 00 
5300   304D 00 00 00 00 
5300   3051 00 00 00 00 
5300   3055 00 00 00 00 
5300   3059 00 00 00 00 
5300   305D 00 00 00 00 
5300   3061 00 00 00 00 
5300   3065 00 00 00 00 
5300   3069 00 00 00 00 
5300   306D 00 00 00 00 
5300   3071 00 00 00 00 
5300   3075 00 00 00 00 
5300   3079 00 00 00 00 
5300   307D 00 00 00 00 
5300   3081 00 00 00 00 
5300   3085 00 00 00 00 
5300   3089 00 00 00 00 
5300   308D 00 00 00 00 
5300   3091 00 00 00 00 
5300   3095 00 00 00 00 
5300   3099 00 00 00 00 
5300   309D 00 00 00 00 
5300   30A1 00 00 00 00 
5300   30A5 00 00 00 00 
5300   30A9 00 00 00 00 
5300   30AD 00 00 00 00 
5300   30B1 00 00 00 00 
5300   30B5 00 00 00 00 
5300   30B9 00 00 00 00 
5300   30BD 00 00 00 00 
5300   30C1 00 00 00 00 
5300   30C5 00 00 00 00 
5300   30C9 00 00 00 00 
5300   30CD 00 00 00 00 
5300   30D1 00 00 00 00 
5300   30D5 00 00 00 00 
5300   30D9 00 00 00 00 
5300   30DD 00 00 00 00 
5300   30E1 00 00 00 00 
5300   30E5 00 00 00 00 
5300   30E9 00 00 00 00 
5300   30ED 00 00 00 00 
5300   30F1 00 00 00 00 
5300   30F5 00 00 00 00 
5300   30F9 00 00 00 00 
5300   30FD 00 00 00 00 
5300   3101 00 00 00 00 
5300   3105 00 00 00 00 
5300   3109 00 00 00 00 
5300   310D 00 00 00 00 
5300   3111 00 00 00 00 
5300   3115 00 00 00 00 
5300   3119 00 00 00 00 
5300   311D 00 00 00 00 
5300   3121 00 00 00 00 
5300   3125 00 00 00 00 
5300   3129 00 00 00 00 
5300   312D 00 00 00 00 
5300   3131 00 00 00 00 
5300   3135 00 00 00 00 
5300   3139 00 00 00 00 
5300   313D 00 00 00 00 
5300   3141 00 00 00 00 
5300   3145 00 00 00 00 
5300   3149 00 00 00 00 
5300   314D 00 00 00 00 
5300   3151 00 00 00 00 
5300   3155 00 00 00 00 
5300   3159 00 00 00 00 
5300   315D 00 00 00 00 
5300   3161 00 00 00 00 
5300   3165 00 00 00 00 
5300   3169 00 00 00 00 
5300   316D 00 00 00 00 
5300   3171 00 00 00 00 
5300   3175 00 00 00 00 
5300   3179 00 00 00 00 
5300   317D 00 00 00 00 
5300   3181 00 00 00 00 
5300   3185 00 00 00 00 
5300   3189 00 00 00 00 
5301   318D 00 00       st_fopen_max_handle: .dw 0
5302   318F 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
5302   3193 65 73 73 20 
5302   3197 43 54 52 4C 
5302   319B 2B 43 20 74 
5302   319F 6F 20 71 75 
5302   31A3 69 74 2E 0A 
5302   31A7 0D 00 
5303   31A9 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
5303   31AD 70 65 63 74 
5303   31B1 65 64 20 66 
5303   31B5 6F 72 6D 61 
5303   31B9 74 20 69 6E 
5303   31BD 20 70 72 69 
5303   31C1 6E 74 66 2E 
5303   31C5 00 
5304   31C6 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
5304   31CA 72 3A 20 55 
5304   31CE 6E 6B 6E 6F 
5304   31D2 77 6E 20 61 
5304   31D6 72 67 75 6D 
5304   31DA 65 6E 74 20 
5304   31DE 74 79 70 65 
5304   31E2 2E 0A 00 
5305   31E5 1B 5B 32 4A _s3: .db "\033[2J\033[H", 0
5305   31E9 1B 5B 48 00 
5306   31ED 40 20 00    _s4: .db "@ ", 0
5307   31F0 2E 20 00    _s5: .db ". ", 0
5308   31F3             
5309   31F3 F5 31       _heap_top: .dw _heap
5310   31F5 00          _heap: .db 0
5311   31F6             ; --- END DATA SEGMENT
5312   31F6             
5313   31F6             .end
tasm: Number of errors = 0
