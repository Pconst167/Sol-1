0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <  30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 1E 00      mov b, $1e
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; < 
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 9C 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j = 0; j <  40    ; j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 28 00      mov b, $28
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; < 
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 8A 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; nextState[i][j] = currState[i][j]; 
0057   0445 3B 17 17      mov d, _nextState_data ; $nextState
0058   0448 D7            push a
0059   0449 DA            push d
0060   044A FA FF FF      lea d, [bp + -1] ; $i
0061   044D 2A            mov b, [d]
0062   044E E7            pop d
0063   044F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0064   0453 DA            push d
0065   0454 FA FD FF      lea d, [bp + -3] ; $j
0066   0457 2A            mov b, [d]
0067   0458 E7            pop d
0068   0459 5A            add d, b
0069   045A E4            pop a
0070   045B DA            push d
0071   045C 3B C7 1B      mov d, _currState_data ; $currState
0072   045F D7            push a
0073   0460 DA            push d
0074   0461 FA FF FF      lea d, [bp + -1] ; $i
0075   0464 2A            mov b, [d]
0076   0465 E7            pop d
0077   0466 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0078   046A DA            push d
0079   046B FA FD FF      lea d, [bp + -3] ; $j
0080   046E 2A            mov b, [d]
0081   046F E7            pop d
0082   0470 5A            add d, b
0083   0471 E4            pop a
0084   0472 32            mov bl, [d]
0085   0473 A7 00         mov bh, 0
0086   0475 E7            pop d
0087   0476 FD 3E         mov [d], bl
0088   0478             _for2_update:
0089   0478 FA FD FF      lea d, [bp + -3] ; $j
0090   047B 2A            mov b, [d]
0091   047C FD 79         mov g, b
0092   047E FD 77         inc b
0093   0480 FA FD FF      lea d, [bp + -3] ; $j
0094   0483 FD 43         mov [d], b
0095   0485 FD 27         mov b, g
0096   0487 0A 32 04      jmp _for2_cond
0097   048A             _for2_exit:
0098   048A             _for1_update:
0099   048A FA FF FF      lea d, [bp + -1] ; $i
0100   048D 2A            mov b, [d]
0101   048E FD 79         mov g, b
0102   0490 FD 77         inc b
0103   0492 FA FF FF      lea d, [bp + -1] ; $i
0104   0495 FD 43         mov [d], b
0105   0497 FD 27         mov b, g
0106   0499 0A 15 04      jmp _for1_cond
0107   049C             _for1_exit:
0108   049C             ;; for(;;){ 
0109   049C             _for3_init:
0110   049C             _for3_cond:
0111   049C             _for3_block:
0112   049C             ;; for(i = 1; i <  30     +-1; i++){ 
0113   049C             _for4_init:
0114   049C FA FF FF      lea d, [bp + -1] ; $i
0115   049F DA            push d
0116   04A0 26 01 00      mov b, $1
0117   04A3 E7            pop d
0118   04A4 FD 43         mov [d], b
0119   04A6             _for4_cond:
0120   04A6 FA FF FF      lea d, [bp + -1] ; $i
0121   04A9 2A            mov b, [d]
0122   04AA             ; START RELATIONAL
0123   04AA D7            push a
0124   04AB 11            mov a, b
0125   04AC 26 1E 00      mov b, $1e
0126   04AF             ; START TERMS
0127   04AF D7            push a
0128   04B0 11            mov a, b
0129   04B1 26 01 00      mov b, $1
0130   04B4 FD 97         neg b
0131   04B6 54            add a, b
0132   04B7 27            mov b, a
0133   04B8 E4            pop a
0134   04B9             ; END TERMS
0135   04B9 B0            cmp a, b
0136   04BA FD 73         slt ; < 
0137   04BC E4            pop a
0138   04BD             ; END RELATIONAL
0139   04BD C0 00 00      cmp b, 0
0140   04C0 C6 A1 05      je _for4_exit
0141   04C3             _for4_block:
0142   04C3             ;; for(j = 1; j <  40    +-1; j++){ 
0143   04C3             _for5_init:
0144   04C3 FA FD FF      lea d, [bp + -3] ; $j
0145   04C6 DA            push d
0146   04C7 26 01 00      mov b, $1
0147   04CA E7            pop d
0148   04CB FD 43         mov [d], b
0149   04CD             _for5_cond:
0150   04CD FA FD FF      lea d, [bp + -3] ; $j
0151   04D0 2A            mov b, [d]
0152   04D1             ; START RELATIONAL
0153   04D1 D7            push a
0154   04D2 11            mov a, b
0155   04D3 26 28 00      mov b, $28
0156   04D6             ; START TERMS
0157   04D6 D7            push a
0158   04D7 11            mov a, b
0159   04D8 26 01 00      mov b, $1
0160   04DB FD 97         neg b
0161   04DD 54            add a, b
0162   04DE 27            mov b, a
0163   04DF E4            pop a
0164   04E0             ; END TERMS
0165   04E0 B0            cmp a, b
0166   04E1 FD 73         slt ; < 
0167   04E3 E4            pop a
0168   04E4             ; END RELATIONAL
0169   04E4 C0 00 00      cmp b, 0
0170   04E7 C6 8F 05      je _for5_exit
0171   04EA             _for5_block:
0172   04EA             ;; n = neighbours(i, j); 
0173   04EA FA FB FF      lea d, [bp + -5] ; $n
0174   04ED DA            push d
0175   04EE FA FF FF      lea d, [bp + -1] ; $i
0176   04F1 2A            mov b, [d]
0177   04F2 FD AB         swp b
0178   04F4 D8            push b
0179   04F5 FA FD FF      lea d, [bp + -3] ; $j
0180   04F8 2A            mov b, [d]
0181   04F9 FD AB         swp b
0182   04FB D8            push b
0183   04FC 07 BA 14      call neighbours
0184   04FF 51 04 00      add sp, 4
0185   0502 E7            pop d
0186   0503 FD 43         mov [d], b
0187   0505             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0188   0505             _if6_cond:
0189   0505 FA FB FF      lea d, [bp + -5] ; $n
0190   0508 2A            mov b, [d]
0191   0509             ; START RELATIONAL
0192   0509 D7            push a
0193   050A 11            mov a, b
0194   050B 26 02 00      mov b, $2
0195   050E B0            cmp a, b
0196   050F FD 73         slt ; < 
0197   0511 E4            pop a
0198   0512             ; END RELATIONAL
0199   0512 D7            push a
0200   0513 11            mov a, b
0201   0514 FA FB FF      lea d, [bp + -5] ; $n
0202   0517 2A            mov b, [d]
0203   0518             ; START RELATIONAL
0204   0518 D7            push a
0205   0519 11            mov a, b
0206   051A 26 03 00      mov b, $3
0207   051D B0            cmp a, b
0208   051E FD 7F         sgt ; >
0209   0520 E4            pop a
0210   0521             ; END RELATIONAL
0211   0521 FD A8         sor a, b ; ||
0212   0523 E4            pop a
0213   0524 C0 00 00      cmp b, 0
0214   0527 C6 4A 05      je _if6_else
0215   052A             _if6_true:
0216   052A             ;; nextState[i][j] = ' '; 
0217   052A 3B 17 17      mov d, _nextState_data ; $nextState
0218   052D D7            push a
0219   052E DA            push d
0220   052F FA FF FF      lea d, [bp + -1] ; $i
0221   0532 2A            mov b, [d]
0222   0533 E7            pop d
0223   0534 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0224   0538 DA            push d
0225   0539 FA FD FF      lea d, [bp + -3] ; $j
0226   053C 2A            mov b, [d]
0227   053D E7            pop d
0228   053E 5A            add d, b
0229   053F E4            pop a
0230   0540 DA            push d
0231   0541 26 20 00      mov b, $20
0232   0544 E7            pop d
0233   0545 FD 3E         mov [d], bl
0234   0547 0A 7D 05      jmp _if6_exit
0235   054A             _if6_else:
0236   054A             ;; if(n == 3) nextState[i][j] = '@'; 
0237   054A             _if7_cond:
0238   054A FA FB FF      lea d, [bp + -5] ; $n
0239   054D 2A            mov b, [d]
0240   054E             ; START RELATIONAL
0241   054E D7            push a
0242   054F 11            mov a, b
0243   0550 26 03 00      mov b, $3
0244   0553 B0            cmp a, b
0245   0554 FD 71         seq ; ==
0246   0556 E4            pop a
0247   0557             ; END RELATIONAL
0248   0557 C0 00 00      cmp b, 0
0249   055A C6 7D 05      je _if7_exit
0250   055D             _if7_true:
0251   055D             ;; nextState[i][j] = '@'; 
0252   055D 3B 17 17      mov d, _nextState_data ; $nextState
0253   0560 D7            push a
0254   0561 DA            push d
0255   0562 FA FF FF      lea d, [bp + -1] ; $i
0256   0565 2A            mov b, [d]
0257   0566 E7            pop d
0258   0567 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0259   056B DA            push d
0260   056C FA FD FF      lea d, [bp + -3] ; $j
0261   056F 2A            mov b, [d]
0262   0570 E7            pop d
0263   0571 5A            add d, b
0264   0572 E4            pop a
0265   0573 DA            push d
0266   0574 26 40 00      mov b, $40
0267   0577 E7            pop d
0268   0578 FD 3E         mov [d], bl
0269   057A 0A 7D 05      jmp _if7_exit
0270   057D             _if7_exit:
0271   057D             _if6_exit:
0272   057D             _for5_update:
0273   057D FA FD FF      lea d, [bp + -3] ; $j
0274   0580 2A            mov b, [d]
0275   0581 FD 79         mov g, b
0276   0583 FD 77         inc b
0277   0585 FA FD FF      lea d, [bp + -3] ; $j
0278   0588 FD 43         mov [d], b
0279   058A FD 27         mov b, g
0280   058C 0A CD 04      jmp _for5_cond
0281   058F             _for5_exit:
0282   058F             _for4_update:
0283   058F FA FF FF      lea d, [bp + -1] ; $i
0284   0592 2A            mov b, [d]
0285   0593 FD 79         mov g, b
0286   0595 FD 77         inc b
0287   0597 FA FF FF      lea d, [bp + -1] ; $i
0288   059A FD 43         mov [d], b
0289   059C FD 27         mov b, g
0290   059E 0A A6 04      jmp _for4_cond
0291   05A1             _for4_exit:
0292   05A1             ;; for(i = 1; i <  30     +-1; i++){ 
0293   05A1             _for8_init:
0294   05A1 FA FF FF      lea d, [bp + -1] ; $i
0295   05A4 DA            push d
0296   05A5 26 01 00      mov b, $1
0297   05A8 E7            pop d
0298   05A9 FD 43         mov [d], b
0299   05AB             _for8_cond:
0300   05AB FA FF FF      lea d, [bp + -1] ; $i
0301   05AE 2A            mov b, [d]
0302   05AF             ; START RELATIONAL
0303   05AF D7            push a
0304   05B0 11            mov a, b
0305   05B1 26 1E 00      mov b, $1e
0306   05B4             ; START TERMS
0307   05B4 D7            push a
0308   05B5 11            mov a, b
0309   05B6 26 01 00      mov b, $1
0310   05B9 FD 97         neg b
0311   05BB 54            add a, b
0312   05BC 27            mov b, a
0313   05BD E4            pop a
0314   05BE             ; END TERMS
0315   05BE B0            cmp a, b
0316   05BF FD 73         slt ; < 
0317   05C1 E4            pop a
0318   05C2             ; END RELATIONAL
0319   05C2 C0 00 00      cmp b, 0
0320   05C5 C6 46 06      je _for8_exit
0321   05C8             _for8_block:
0322   05C8             ;; for(j = 1; j <  40    +-1; j++){ 
0323   05C8             _for9_init:
0324   05C8 FA FD FF      lea d, [bp + -3] ; $j
0325   05CB DA            push d
0326   05CC 26 01 00      mov b, $1
0327   05CF E7            pop d
0328   05D0 FD 43         mov [d], b
0329   05D2             _for9_cond:
0330   05D2 FA FD FF      lea d, [bp + -3] ; $j
0331   05D5 2A            mov b, [d]
0332   05D6             ; START RELATIONAL
0333   05D6 D7            push a
0334   05D7 11            mov a, b
0335   05D8 26 28 00      mov b, $28
0336   05DB             ; START TERMS
0337   05DB D7            push a
0338   05DC 11            mov a, b
0339   05DD 26 01 00      mov b, $1
0340   05E0 FD 97         neg b
0341   05E2 54            add a, b
0342   05E3 27            mov b, a
0343   05E4 E4            pop a
0344   05E5             ; END TERMS
0345   05E5 B0            cmp a, b
0346   05E6 FD 73         slt ; < 
0347   05E8 E4            pop a
0348   05E9             ; END RELATIONAL
0349   05E9 C0 00 00      cmp b, 0
0350   05EC C6 34 06      je _for9_exit
0351   05EF             _for9_block:
0352   05EF             ;; currState[i][j] = nextState[i][j]; 
0353   05EF 3B C7 1B      mov d, _currState_data ; $currState
0354   05F2 D7            push a
0355   05F3 DA            push d
0356   05F4 FA FF FF      lea d, [bp + -1] ; $i
0357   05F7 2A            mov b, [d]
0358   05F8 E7            pop d
0359   05F9 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0360   05FD DA            push d
0361   05FE FA FD FF      lea d, [bp + -3] ; $j
0362   0601 2A            mov b, [d]
0363   0602 E7            pop d
0364   0603 5A            add d, b
0365   0604 E4            pop a
0366   0605 DA            push d
0367   0606 3B 17 17      mov d, _nextState_data ; $nextState
0368   0609 D7            push a
0369   060A DA            push d
0370   060B FA FF FF      lea d, [bp + -1] ; $i
0371   060E 2A            mov b, [d]
0372   060F E7            pop d
0373   0610 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0374   0614 DA            push d
0375   0615 FA FD FF      lea d, [bp + -3] ; $j
0376   0618 2A            mov b, [d]
0377   0619 E7            pop d
0378   061A 5A            add d, b
0379   061B E4            pop a
0380   061C 32            mov bl, [d]
0381   061D A7 00         mov bh, 0
0382   061F E7            pop d
0383   0620 FD 3E         mov [d], bl
0384   0622             _for9_update:
0385   0622 FA FD FF      lea d, [bp + -3] ; $j
0386   0625 2A            mov b, [d]
0387   0626 FD 79         mov g, b
0388   0628 FD 77         inc b
0389   062A FA FD FF      lea d, [bp + -3] ; $j
0390   062D FD 43         mov [d], b
0391   062F FD 27         mov b, g
0392   0631 0A D2 05      jmp _for9_cond
0393   0634             _for9_exit:
0394   0634             _for8_update:
0395   0634 FA FF FF      lea d, [bp + -1] ; $i
0396   0637 2A            mov b, [d]
0397   0638 FD 79         mov g, b
0398   063A FD 77         inc b
0399   063C FA FF FF      lea d, [bp + -1] ; $i
0400   063F FD 43         mov [d], b
0401   0641 FD 27         mov b, g
0402   0643 0A AB 05      jmp _for8_cond
0403   0646             _for8_exit:
0404   0646             ;; printf(clear); 
0405   0646 3B 0C 17      mov d, _clear_data ; $clear
0406   0649 2D            mov b, d
0407   064A FD AB         swp b
0408   064C D8            push b
0409   064D 07 BC 08      call printf
0410   0650 51 02 00      add sp, 2
0411   0653             ;; show(); 
0412   0653 07 CD 13      call show
0413   0656             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0414   0656 26 77 20      mov b, __s0 ; "\n\rPress CTRL+C to quit.\n\r"
0415   0659 FD AB         swp b
0416   065B D8            push b
0417   065C 07 E4 0E      call puts
0418   065F 51 02 00      add sp, 2
0419   0662             _for3_update:
0420   0662 0A 9C 04      jmp _for3_cond
0421   0665             _for3_exit:
0422   0665 05 0B         syscall sys_terminate_proc
0423   0667             
0424   0667             strcpy:
0425   0667 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0426   066A             ; $psrc 
0427   066A             ; $pdest 
0428   066A 52 04 00      sub sp, 4
0429   066D             ;; psrc = src; 
0430   066D FA FF FF      lea d, [bp + -1] ; $psrc
0431   0670 DA            push d
0432   0671 FA 05 00      lea d, [bp + 5] ; $src
0433   0674 2A            mov b, [d]
0434   0675 E7            pop d
0435   0676 FD 43         mov [d], b
0436   0678             ;; pdest = dest; 
0437   0678 FA FD FF      lea d, [bp + -3] ; $pdest
0438   067B DA            push d
0439   067C FA 07 00      lea d, [bp + 7] ; $dest
0440   067F 2A            mov b, [d]
0441   0680 E7            pop d
0442   0681 FD 43         mov [d], b
0443   0683             ;; while(*psrc) *pdest++ = *psrc++; 
0444   0683             _while10_cond:
0445   0683 FA FF FF      lea d, [bp + -1] ; $psrc
0446   0686 2A            mov b, [d]
0447   0687 74            mov d, b
0448   0688 32            mov bl, [d]
0449   0689 A7 00         mov bh, 0
0450   068B C0 00 00      cmp b, 0
0451   068E C6 BA 06      je _while10_exit
0452   0691             _while10_block:
0453   0691             ;; *pdest++ = *psrc++; 
0454   0691 FA FD FF      lea d, [bp + -3] ; $pdest
0455   0694 2A            mov b, [d]
0456   0695 FD 79         mov g, b
0457   0697 FD 77         inc b
0458   0699 FA FD FF      lea d, [bp + -3] ; $pdest
0459   069C FD 43         mov [d], b
0460   069E FD 27         mov b, g
0461   06A0 D8            push b
0462   06A1 FA FF FF      lea d, [bp + -1] ; $psrc
0463   06A4 2A            mov b, [d]
0464   06A5 FD 79         mov g, b
0465   06A7 FD 77         inc b
0466   06A9 FA FF FF      lea d, [bp + -1] ; $psrc
0467   06AC FD 43         mov [d], b
0468   06AE FD 27         mov b, g
0469   06B0 74            mov d, b
0470   06B1 32            mov bl, [d]
0471   06B2 A7 00         mov bh, 0
0472   06B4 E7            pop d
0473   06B5 FD 3E         mov [d], bl
0474   06B7 0A 83 06      jmp _while10_cond
0475   06BA             _while10_exit:
0476   06BA             ;; *pdest = '\0'; 
0477   06BA FA FD FF      lea d, [bp + -3] ; $pdest
0478   06BD 2A            mov b, [d]
0479   06BE D8            push b
0480   06BF 26 00 00      mov b, $0
0481   06C2 E7            pop d
0482   06C3 FD 3E         mov [d], bl
0483   06C5 F9            leave
0484   06C6 09            ret
0485   06C7             
0486   06C7             strcmp:
0487   06C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0488   06CA             ;; while (*s1 && (*s1 == *s2)) { 
0489   06CA             _while11_cond:
0490   06CA FA 07 00      lea d, [bp + 7] ; $s1
0491   06CD 2A            mov b, [d]
0492   06CE 74            mov d, b
0493   06CF 32            mov bl, [d]
0494   06D0 A7 00         mov bh, 0
0495   06D2 D7            push a
0496   06D3 11            mov a, b
0497   06D4 FA 07 00      lea d, [bp + 7] ; $s1
0498   06D7 2A            mov b, [d]
0499   06D8 74            mov d, b
0500   06D9 32            mov bl, [d]
0501   06DA A7 00         mov bh, 0
0502   06DC             ; START RELATIONAL
0503   06DC D7            push a
0504   06DD 11            mov a, b
0505   06DE FA 05 00      lea d, [bp + 5] ; $s2
0506   06E1 2A            mov b, [d]
0507   06E2 74            mov d, b
0508   06E3 32            mov bl, [d]
0509   06E4 A7 00         mov bh, 0
0510   06E6 B0            cmp a, b
0511   06E7 FD 71         seq ; ==
0512   06E9 E4            pop a
0513   06EA             ; END RELATIONAL
0514   06EA FD A7         sand a, b ; &&
0515   06EC E4            pop a
0516   06ED C0 00 00      cmp b, 0
0517   06F0 C6 14 07      je _while11_exit
0518   06F3             _while11_block:
0519   06F3             ;; s1++; 
0520   06F3 FA 07 00      lea d, [bp + 7] ; $s1
0521   06F6 2A            mov b, [d]
0522   06F7 FD 79         mov g, b
0523   06F9 FD 77         inc b
0524   06FB FA 07 00      lea d, [bp + 7] ; $s1
0525   06FE FD 43         mov [d], b
0526   0700 FD 27         mov b, g
0527   0702             ;; s2++; 
0528   0702 FA 05 00      lea d, [bp + 5] ; $s2
0529   0705 2A            mov b, [d]
0530   0706 FD 79         mov g, b
0531   0708 FD 77         inc b
0532   070A FA 05 00      lea d, [bp + 5] ; $s2
0533   070D FD 43         mov [d], b
0534   070F FD 27         mov b, g
0535   0711 0A CA 06      jmp _while11_cond
0536   0714             _while11_exit:
0537   0714             ;; return *s1 - *s2; 
0538   0714 FA 07 00      lea d, [bp + 7] ; $s1
0539   0717 2A            mov b, [d]
0540   0718 74            mov d, b
0541   0719 32            mov bl, [d]
0542   071A A7 00         mov bh, 0
0543   071C             ; START TERMS
0544   071C D7            push a
0545   071D 11            mov a, b
0546   071E FA 05 00      lea d, [bp + 5] ; $s2
0547   0721 2A            mov b, [d]
0548   0722 74            mov d, b
0549   0723 32            mov bl, [d]
0550   0724 A7 00         mov bh, 0
0551   0726 60            sub a, b
0552   0727 27            mov b, a
0553   0728 E4            pop a
0554   0729             ; END TERMS
0555   0729 F9            leave
0556   072A 09            ret
0557   072B             
0558   072B             strcat:
0559   072B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0560   072E             ; $dest_len 
0561   072E             ; $i 
0562   072E 52 04 00      sub sp, 4
0563   0731             ;; dest_len = strlen(dest); 
0564   0731 FA FF FF      lea d, [bp + -1] ; $dest_len
0565   0734 DA            push d
0566   0735 FA 07 00      lea d, [bp + 7] ; $dest
0567   0738 2A            mov b, [d]
0568   0739 FD AB         swp b
0569   073B D8            push b
0570   073C 07 E1 07      call strlen
0571   073F 51 02 00      add sp, 2
0572   0742 E7            pop d
0573   0743 FD 43         mov [d], b
0574   0745             ;; for (i = 0; src[i] != 0; i=i+1) { 
0575   0745             _for12_init:
0576   0745 FA FD FF      lea d, [bp + -3] ; $i
0577   0748 DA            push d
0578   0749 26 00 00      mov b, $0
0579   074C E7            pop d
0580   074D FD 43         mov [d], b
0581   074F             _for12_cond:
0582   074F FA 05 00      lea d, [bp + 5] ; $src
0583   0752 FD 2A         mov d, [d]
0584   0754 D7            push a
0585   0755 DA            push d
0586   0756 FA FD FF      lea d, [bp + -3] ; $i
0587   0759 2A            mov b, [d]
0588   075A E7            pop d
0589   075B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0590   075F E4            pop a
0591   0760 32            mov bl, [d]
0592   0761 A7 00         mov bh, 0
0593   0763             ; START RELATIONAL
0594   0763 D7            push a
0595   0764 11            mov a, b
0596   0765 26 00 00      mov b, $0
0597   0768 B0            cmp a, b
0598   0769 FD 72         sneq ; !=
0599   076B E4            pop a
0600   076C             ; END RELATIONAL
0601   076C C0 00 00      cmp b, 0
0602   076F C6 BA 07      je _for12_exit
0603   0772             _for12_block:
0604   0772             ;; dest[dest_len + i] = src[i]; 
0605   0772 FA 07 00      lea d, [bp + 7] ; $dest
0606   0775 FD 2A         mov d, [d]
0607   0777 D7            push a
0608   0778 DA            push d
0609   0779 FA FF FF      lea d, [bp + -1] ; $dest_len
0610   077C 2A            mov b, [d]
0611   077D             ; START TERMS
0612   077D D7            push a
0613   077E 11            mov a, b
0614   077F FA FD FF      lea d, [bp + -3] ; $i
0615   0782 2A            mov b, [d]
0616   0783 54            add a, b
0617   0784 27            mov b, a
0618   0785 E4            pop a
0619   0786             ; END TERMS
0620   0786 E7            pop d
0621   0787 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0622   078B E4            pop a
0623   078C DA            push d
0624   078D FA 05 00      lea d, [bp + 5] ; $src
0625   0790 FD 2A         mov d, [d]
0626   0792 D7            push a
0627   0793 DA            push d
0628   0794 FA FD FF      lea d, [bp + -3] ; $i
0629   0797 2A            mov b, [d]
0630   0798 E7            pop d
0631   0799 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0632   079D E4            pop a
0633   079E 32            mov bl, [d]
0634   079F A7 00         mov bh, 0
0635   07A1 E7            pop d
0636   07A2 FD 3E         mov [d], bl
0637   07A4             _for12_update:
0638   07A4 FA FD FF      lea d, [bp + -3] ; $i
0639   07A7 DA            push d
0640   07A8 FA FD FF      lea d, [bp + -3] ; $i
0641   07AB 2A            mov b, [d]
0642   07AC             ; START TERMS
0643   07AC D7            push a
0644   07AD 11            mov a, b
0645   07AE 26 01 00      mov b, $1
0646   07B1 54            add a, b
0647   07B2 27            mov b, a
0648   07B3 E4            pop a
0649   07B4             ; END TERMS
0650   07B4 E7            pop d
0651   07B5 FD 43         mov [d], b
0652   07B7 0A 4F 07      jmp _for12_cond
0653   07BA             _for12_exit:
0654   07BA             ;; dest[dest_len + i] = 0; 
0655   07BA FA 07 00      lea d, [bp + 7] ; $dest
0656   07BD FD 2A         mov d, [d]
0657   07BF D7            push a
0658   07C0 DA            push d
0659   07C1 FA FF FF      lea d, [bp + -1] ; $dest_len
0660   07C4 2A            mov b, [d]
0661   07C5             ; START TERMS
0662   07C5 D7            push a
0663   07C6 11            mov a, b
0664   07C7 FA FD FF      lea d, [bp + -3] ; $i
0665   07CA 2A            mov b, [d]
0666   07CB 54            add a, b
0667   07CC 27            mov b, a
0668   07CD E4            pop a
0669   07CE             ; END TERMS
0670   07CE E7            pop d
0671   07CF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0672   07D3 E4            pop a
0673   07D4 DA            push d
0674   07D5 26 00 00      mov b, $0
0675   07D8 E7            pop d
0676   07D9 FD 3E         mov [d], bl
0677   07DB             ;; return dest; 
0678   07DB FA 07 00      lea d, [bp + 7] ; $dest
0679   07DE 2A            mov b, [d]
0680   07DF F9            leave
0681   07E0 09            ret
0682   07E1             
0683   07E1             strlen:
0684   07E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0685   07E4             ; $length 
0686   07E4 52 02 00      sub sp, 2
0687   07E7             ;; length = 0; 
0688   07E7 FA FF FF      lea d, [bp + -1] ; $length
0689   07EA DA            push d
0690   07EB 26 00 00      mov b, $0
0691   07EE E7            pop d
0692   07EF FD 43         mov [d], b
0693   07F1             ;; while (str[length] != 0) { 
0694   07F1             _while13_cond:
0695   07F1 FA 05 00      lea d, [bp + 5] ; $str
0696   07F4 FD 2A         mov d, [d]
0697   07F6 D7            push a
0698   07F7 DA            push d
0699   07F8 FA FF FF      lea d, [bp + -1] ; $length
0700   07FB 2A            mov b, [d]
0701   07FC E7            pop d
0702   07FD FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0703   0801 E4            pop a
0704   0802 32            mov bl, [d]
0705   0803 A7 00         mov bh, 0
0706   0805             ; START RELATIONAL
0707   0805 D7            push a
0708   0806 11            mov a, b
0709   0807 26 00 00      mov b, $0
0710   080A B0            cmp a, b
0711   080B FD 72         sneq ; !=
0712   080D E4            pop a
0713   080E             ; END RELATIONAL
0714   080E C0 00 00      cmp b, 0
0715   0811 C6 26 08      je _while13_exit
0716   0814             _while13_block:
0717   0814             ;; length++; 
0718   0814 FA FF FF      lea d, [bp + -1] ; $length
0719   0817 2A            mov b, [d]
0720   0818 FD 79         mov g, b
0721   081A FD 77         inc b
0722   081C FA FF FF      lea d, [bp + -1] ; $length
0723   081F FD 43         mov [d], b
0724   0821 FD 27         mov b, g
0725   0823 0A F1 07      jmp _while13_cond
0726   0826             _while13_exit:
0727   0826             ;; return length; 
0728   0826 FA FF FF      lea d, [bp + -1] ; $length
0729   0829 2A            mov b, [d]
0730   082A F9            leave
0731   082B 09            ret
0732   082C             
0733   082C             va_arg:
0734   082C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0735   082F             ; $val 
0736   082F 52 02 00      sub sp, 2
0737   0832             ;; if(size == 1){ 
0738   0832             _if14_cond:
0739   0832 FA 05 00      lea d, [bp + 5] ; $size
0740   0835 2A            mov b, [d]
0741   0836             ; START RELATIONAL
0742   0836 D7            push a
0743   0837 11            mov a, b
0744   0838 26 01 00      mov b, $1
0745   083B B0            cmp a, b
0746   083C FD 71         seq ; ==
0747   083E E4            pop a
0748   083F             ; END RELATIONAL
0749   083F C0 00 00      cmp b, 0
0750   0842 C6 5E 08      je _if14_else
0751   0845             _if14_true:
0752   0845             ;; val = *(char*)arg->p; 
0753   0845 FA FF FF      lea d, [bp + -1] ; $val
0754   0848 DA            push d
0755   0849 FA 07 00      lea d, [bp + 7] ; $arg
0756   084C FD 2A         mov d, [d]
0757   084E 58 00 00      add d, 0
0758   0851 FD 14         clb
0759   0853 2A            mov b, [d]
0760   0854 74            mov d, b
0761   0855 32            mov bl, [d]
0762   0856 A7 00         mov bh, 0
0763   0858 E7            pop d
0764   0859 FD 43         mov [d], b
0765   085B 0A 94 08      jmp _if14_exit
0766   085E             _if14_else:
0767   085E             ;; if(size == 2){ 
0768   085E             _if15_cond:
0769   085E FA 05 00      lea d, [bp + 5] ; $size
0770   0861 2A            mov b, [d]
0771   0862             ; START RELATIONAL
0772   0862 D7            push a
0773   0863 11            mov a, b
0774   0864 26 02 00      mov b, $2
0775   0867 B0            cmp a, b
0776   0868 FD 71         seq ; ==
0777   086A E4            pop a
0778   086B             ; END RELATIONAL
0779   086B C0 00 00      cmp b, 0
0780   086E C6 88 08      je _if15_else
0781   0871             _if15_true:
0782   0871             ;; val = *(int*)arg->p; 
0783   0871 FA FF FF      lea d, [bp + -1] ; $val
0784   0874 DA            push d
0785   0875 FA 07 00      lea d, [bp + 7] ; $arg
0786   0878 FD 2A         mov d, [d]
0787   087A 58 00 00      add d, 0
0788   087D FD 14         clb
0789   087F 2A            mov b, [d]
0790   0880 74            mov d, b
0791   0881 2A            mov b, [d]
0792   0882 E7            pop d
0793   0883 FD 43         mov [d], b
0794   0885 0A 94 08      jmp _if15_exit
0795   0888             _if15_else:
0796   0888             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0797   0888 26 91 20      mov b, __s1 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0798   088B FD AB         swp b
0799   088D D8            push b
0800   088E 07 F6 0E      call print
0801   0891 51 02 00      add sp, 2
0802   0894             _if15_exit:
0803   0894             _if14_exit:
0804   0894             ;; arg->p = arg->p + size; 
0805   0894 FA 07 00      lea d, [bp + 7] ; $arg
0806   0897 FD 2A         mov d, [d]
0807   0899 58 00 00      add d, 0
0808   089C FD 14         clb
0809   089E DA            push d
0810   089F FA 07 00      lea d, [bp + 7] ; $arg
0811   08A2 FD 2A         mov d, [d]
0812   08A4 58 00 00      add d, 0
0813   08A7 FD 14         clb
0814   08A9 2A            mov b, [d]
0815   08AA             ; START TERMS
0816   08AA D7            push a
0817   08AB 11            mov a, b
0818   08AC FA 05 00      lea d, [bp + 5] ; $size
0819   08AF 2A            mov b, [d]
0820   08B0 54            add a, b
0821   08B1 27            mov b, a
0822   08B2 E4            pop a
0823   08B3             ; END TERMS
0824   08B3 E7            pop d
0825   08B4 FD 43         mov [d], b
0826   08B6             ;; return val; 
0827   08B6 FA FF FF      lea d, [bp + -1] ; $val
0828   08B9 2A            mov b, [d]
0829   08BA F9            leave
0830   08BB 09            ret
0831   08BC             
0832   08BC             printf:
0833   08BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0834   08BF             ; $p 
0835   08BF             ; $fp 
0836   08BF             ; $i 
0837   08BF 52 06 00      sub sp, 6
0838   08C2             ;; fp = format; 
0839   08C2 FA FD FF      lea d, [bp + -3] ; $fp
0840   08C5 DA            push d
0841   08C6 FA 05 00      lea d, [bp + 5] ; $format
0842   08C9 2A            mov b, [d]
0843   08CA E7            pop d
0844   08CB FD 43         mov [d], b
0845   08CD             ;; p = &format; 
0846   08CD FA FF FF      lea d, [bp + -1] ; $p
0847   08D0 DA            push d
0848   08D1 FA 05 00      lea d, [bp + 5] ; $format
0849   08D4 2D            mov b, d
0850   08D5 E7            pop d
0851   08D6 FD 43         mov [d], b
0852   08D8             ;; for(;;){ 
0853   08D8             _for16_init:
0854   08D8             _for16_cond:
0855   08D8             _for16_block:
0856   08D8             ;; if(!*fp) break; 
0857   08D8             _if17_cond:
0858   08D8 FA FD FF      lea d, [bp + -3] ; $fp
0859   08DB 2A            mov b, [d]
0860   08DC 74            mov d, b
0861   08DD 32            mov bl, [d]
0862   08DE A7 00         mov bh, 0
0863   08E0 C0 00 00      cmp b, 0
0864   08E3 FD 71         seq ; !
0865   08E5 C0 00 00      cmp b, 0
0866   08E8 C6 F1 08      je _if17_exit
0867   08EB             _if17_true:
0868   08EB             ;; break; 
0869   08EB 0A 3B 0A      jmp _for16_exit ; for break
0870   08EE 0A F1 08      jmp _if17_exit
0871   08F1             _if17_exit:
0872   08F1             ;; if(*fp == '%'){ 
0873   08F1             _if18_cond:
0874   08F1 FA FD FF      lea d, [bp + -3] ; $fp
0875   08F4 2A            mov b, [d]
0876   08F5 74            mov d, b
0877   08F6 32            mov bl, [d]
0878   08F7 A7 00         mov bh, 0
0879   08F9             ; START RELATIONAL
0880   08F9 D7            push a
0881   08FA 11            mov a, b
0882   08FB 26 25 00      mov b, $25
0883   08FE B0            cmp a, b
0884   08FF FD 71         seq ; ==
0885   0901 E4            pop a
0886   0902             ; END RELATIONAL
0887   0902 C0 00 00      cmp b, 0
0888   0905 C6 1A 0A      je _if18_else
0889   0908             _if18_true:
0890   0908             ;; fp++; 
0891   0908 FA FD FF      lea d, [bp + -3] ; $fp
0892   090B 2A            mov b, [d]
0893   090C FD 79         mov g, b
0894   090E FD 77         inc b
0895   0910 FA FD FF      lea d, [bp + -3] ; $fp
0896   0913 FD 43         mov [d], b
0897   0915 FD 27         mov b, g
0898   0917             ;; switch(*fp){ 
0899   0917             _switch19_expr:
0900   0917 FA FD FF      lea d, [bp + -3] ; $fp
0901   091A 2A            mov b, [d]
0902   091B 74            mov d, b
0903   091C 32            mov bl, [d]
0904   091D A7 00         mov bh, 0
0905   091F             _switch19_comparisons:
0906   091F C1 64         cmp bl, $64
0907   0921 C6 43 09      je _switch19_case0
0908   0924 C1 69         cmp bl, $69
0909   0926 C6 43 09      je _switch19_case1
0910   0929 C1 75         cmp bl, $75
0911   092B C6 68 09      je _switch19_case2
0912   092E C1 78         cmp bl, $78
0913   0930 C6 8D 09      je _switch19_case3
0914   0933 C1 63         cmp bl, $63
0915   0935 C6 B2 09      je _switch19_case4
0916   0938 C1 73         cmp bl, $73
0917   093A C6 D7 09      je _switch19_case5
0918   093D 0A FC 09      jmp _switch19_default
0919   0940 0A 08 0A      jmp _switch19_exit
0920   0943             _switch19_case0:
0921   0943             _switch19_case1:
0922   0943             ;; p = p - 2; 
0923   0943 FA FF FF      lea d, [bp + -1] ; $p
0924   0946 DA            push d
0925   0947 FA FF FF      lea d, [bp + -1] ; $p
0926   094A 2A            mov b, [d]
0927   094B             ; START TERMS
0928   094B D7            push a
0929   094C 11            mov a, b
0930   094D 26 02 00      mov b, $2
0931   0950 60            sub a, b
0932   0951 27            mov b, a
0933   0952 E4            pop a
0934   0953             ; END TERMS
0935   0953 E7            pop d
0936   0954 FD 43         mov [d], b
0937   0956             ;; prints(*(int*)p); 
0938   0956 FA FF FF      lea d, [bp + -1] ; $p
0939   0959 2A            mov b, [d]
0940   095A 74            mov d, b
0941   095B 2A            mov b, [d]
0942   095C FD AB         swp b
0943   095E D8            push b
0944   095F 07 CD 0C      call prints
0945   0962 51 02 00      add sp, 2
0946   0965             ;; break; 
0947   0965 0A 08 0A      jmp _switch19_exit ; case break
0948   0968             _switch19_case2:
0949   0968             ;; p = p - 2; 
0950   0968 FA FF FF      lea d, [bp + -1] ; $p
0951   096B DA            push d
0952   096C FA FF FF      lea d, [bp + -1] ; $p
0953   096F 2A            mov b, [d]
0954   0970             ; START TERMS
0955   0970 D7            push a
0956   0971 11            mov a, b
0957   0972 26 02 00      mov b, $2
0958   0975 60            sub a, b
0959   0976 27            mov b, a
0960   0977 E4            pop a
0961   0978             ; END TERMS
0962   0978 E7            pop d
0963   0979 FD 43         mov [d], b
0964   097B             ;; printu(*(unsigned int*)p); 
0965   097B FA FF FF      lea d, [bp + -1] ; $p
0966   097E 2A            mov b, [d]
0967   097F 74            mov d, b
0968   0980 2A            mov b, [d]
0969   0981 FD AB         swp b
0970   0983 D8            push b
0971   0984 07 C2 0D      call printu
0972   0987 51 02 00      add sp, 2
0973   098A             ;; break; 
0974   098A 0A 08 0A      jmp _switch19_exit ; case break
0975   098D             _switch19_case3:
0976   098D             ;; p = p - 2; 
0977   098D FA FF FF      lea d, [bp + -1] ; $p
0978   0990 DA            push d
0979   0991 FA FF FF      lea d, [bp + -1] ; $p
0980   0994 2A            mov b, [d]
0981   0995             ; START TERMS
0982   0995 D7            push a
0983   0996 11            mov a, b
0984   0997 26 02 00      mov b, $2
0985   099A 60            sub a, b
0986   099B 27            mov b, a
0987   099C E4            pop a
0988   099D             ; END TERMS
0989   099D E7            pop d
0990   099E FD 43         mov [d], b
0991   09A0             ;; printx16(*(unsigned int*)p); 
0992   09A0 FA FF FF      lea d, [bp + -1] ; $p
0993   09A3 2A            mov b, [d]
0994   09A4 74            mov d, b
0995   09A5 2A            mov b, [d]
0996   09A6 FD AB         swp b
0997   09A8 D8            push b
0998   09A9 07 3D 0A      call printx16
0999   09AC 51 02 00      add sp, 2
1000   09AF             ;; break; 
1001   09AF 0A 08 0A      jmp _switch19_exit ; case break
1002   09B2             _switch19_case4:
1003   09B2             ;; p = p - 2; 
1004   09B2 FA FF FF      lea d, [bp + -1] ; $p
1005   09B5 DA            push d
1006   09B6 FA FF FF      lea d, [bp + -1] ; $p
1007   09B9 2A            mov b, [d]
1008   09BA             ; START TERMS
1009   09BA D7            push a
1010   09BB 11            mov a, b
1011   09BC 26 02 00      mov b, $2
1012   09BF 60            sub a, b
1013   09C0 27            mov b, a
1014   09C1 E4            pop a
1015   09C2             ; END TERMS
1016   09C2 E7            pop d
1017   09C3 FD 43         mov [d], b
1018   09C5             ;; putchar(*(char*)p); 
1019   09C5 FA FF FF      lea d, [bp + -1] ; $p
1020   09C8 2A            mov b, [d]
1021   09C9 74            mov d, b
1022   09CA 32            mov bl, [d]
1023   09CB A7 00         mov bh, 0
1024   09CD DD            push bl
1025   09CE 07 AE 0E      call putchar
1026   09D1 51 01 00      add sp, 1
1027   09D4             ;; break; 
1028   09D4 0A 08 0A      jmp _switch19_exit ; case break
1029   09D7             _switch19_case5:
1030   09D7             ;; p = p - 2; 
1031   09D7 FA FF FF      lea d, [bp + -1] ; $p
1032   09DA DA            push d
1033   09DB FA FF FF      lea d, [bp + -1] ; $p
1034   09DE 2A            mov b, [d]
1035   09DF             ; START TERMS
1036   09DF D7            push a
1037   09E0 11            mov a, b
1038   09E1 26 02 00      mov b, $2
1039   09E4 60            sub a, b
1040   09E5 27            mov b, a
1041   09E6 E4            pop a
1042   09E7             ; END TERMS
1043   09E7 E7            pop d
1044   09E8 FD 43         mov [d], b
1045   09EA             ;; print(*(char**)p); 
1046   09EA FA FF FF      lea d, [bp + -1] ; $p
1047   09ED 2A            mov b, [d]
1048   09EE 74            mov d, b
1049   09EF 2A            mov b, [d]
1050   09F0 FD AB         swp b
1051   09F2 D8            push b
1052   09F3 07 F6 0E      call print
1053   09F6 51 02 00      add sp, 2
1054   09F9             ;; break; 
1055   09F9 0A 08 0A      jmp _switch19_exit ; case break
1056   09FC             _switch19_default:
1057   09FC             ;; print("Error: Unknown argument type.\n"); 
1058   09FC 26 D5 20      mov b, __s2 ; "Error: Unknown argument type.\n"
1059   09FF FD AB         swp b
1060   0A01 D8            push b
1061   0A02 07 F6 0E      call print
1062   0A05 51 02 00      add sp, 2
1063   0A08             _switch19_exit:
1064   0A08             ;; fp++; 
1065   0A08 FA FD FF      lea d, [bp + -3] ; $fp
1066   0A0B 2A            mov b, [d]
1067   0A0C FD 79         mov g, b
1068   0A0E FD 77         inc b
1069   0A10 FA FD FF      lea d, [bp + -3] ; $fp
1070   0A13 FD 43         mov [d], b
1071   0A15 FD 27         mov b, g
1072   0A17 0A 38 0A      jmp _if18_exit
1073   0A1A             _if18_else:
1074   0A1A             ;; putchar(*fp); 
1075   0A1A FA FD FF      lea d, [bp + -3] ; $fp
1076   0A1D 2A            mov b, [d]
1077   0A1E 74            mov d, b
1078   0A1F 32            mov bl, [d]
1079   0A20 A7 00         mov bh, 0
1080   0A22 DD            push bl
1081   0A23 07 AE 0E      call putchar
1082   0A26 51 01 00      add sp, 1
1083   0A29             ;; fp++; 
1084   0A29 FA FD FF      lea d, [bp + -3] ; $fp
1085   0A2C 2A            mov b, [d]
1086   0A2D FD 79         mov g, b
1087   0A2F FD 77         inc b
1088   0A31 FA FD FF      lea d, [bp + -3] ; $fp
1089   0A34 FD 43         mov [d], b
1090   0A36 FD 27         mov b, g
1091   0A38             _if18_exit:
1092   0A38             _for16_update:
1093   0A38 0A D8 08      jmp _for16_cond
1094   0A3B             _for16_exit:
1095   0A3B F9            leave
1096   0A3C 09            ret
1097   0A3D             
1098   0A3D             printx16:
1099   0A3D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1100   0A40             
1101   0A40             ; --- BEGIN INLINE ASM BLOCK
1102   0A40 FA 05 00      lea d, [bp + 5] ; $hex
1103   0A43 2A            mov b, [d]
1104   0A44 07 CD 12      call print_u16x
1105   0A47             ; --- END INLINE ASM BLOCK
1106   0A47             
1107   0A47 F9            leave
1108   0A48 09            ret
1109   0A49             
1110   0A49             printx8:
1111   0A49 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1112   0A4C             
1113   0A4C             ; --- BEGIN INLINE ASM BLOCK
1114   0A4C FA 05 00      lea d, [bp + 5] ; $hex
1115   0A4F 32            mov bl, [d]
1116   0A50 07 11 13      call print_u8x
1117   0A53             ; --- END INLINE ASM BLOCK
1118   0A53             
1119   0A53 F9            leave
1120   0A54 09            ret
1121   0A55             
1122   0A55             hex_to_int:
1123   0A55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1124   0A58             ; $value 
1125   0A58 10 00 00      mov a, $0
1126   0A5B 45 FF FF      mov [bp + -1], a
1127   0A5E             ; $i 
1128   0A5E             ; $hex_char 
1129   0A5E             ; $len 
1130   0A5E 52 07 00      sub sp, 7
1131   0A61             ;; len = strlen(hex_string); 
1132   0A61 FA FA FF      lea d, [bp + -6] ; $len
1133   0A64 DA            push d
1134   0A65 FA 05 00      lea d, [bp + 5] ; $hex_string
1135   0A68 2A            mov b, [d]
1136   0A69 FD AB         swp b
1137   0A6B D8            push b
1138   0A6C 07 E1 07      call strlen
1139   0A6F 51 02 00      add sp, 2
1140   0A72 E7            pop d
1141   0A73 FD 43         mov [d], b
1142   0A75             ;; for (i = 0; i < len; i++) { 
1143   0A75             _for20_init:
1144   0A75 FA FD FF      lea d, [bp + -3] ; $i
1145   0A78 DA            push d
1146   0A79 26 00 00      mov b, $0
1147   0A7C E7            pop d
1148   0A7D FD 43         mov [d], b
1149   0A7F             _for20_cond:
1150   0A7F FA FD FF      lea d, [bp + -3] ; $i
1151   0A82 2A            mov b, [d]
1152   0A83             ; START RELATIONAL
1153   0A83 D7            push a
1154   0A84 11            mov a, b
1155   0A85 FA FA FF      lea d, [bp + -6] ; $len
1156   0A88 2A            mov b, [d]
1157   0A89 B0            cmp a, b
1158   0A8A FD 73         slt ; < 
1159   0A8C E4            pop a
1160   0A8D             ; END RELATIONAL
1161   0A8D C0 00 00      cmp b, 0
1162   0A90 C6 95 0B      je _for20_exit
1163   0A93             _for20_block:
1164   0A93             ;; hex_char = hex_string[i]; 
1165   0A93 FA FC FF      lea d, [bp + -4] ; $hex_char
1166   0A96 DA            push d
1167   0A97 FA 05 00      lea d, [bp + 5] ; $hex_string
1168   0A9A FD 2A         mov d, [d]
1169   0A9C D7            push a
1170   0A9D DA            push d
1171   0A9E FA FD FF      lea d, [bp + -3] ; $i
1172   0AA1 2A            mov b, [d]
1173   0AA2 E7            pop d
1174   0AA3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1175   0AA7 E4            pop a
1176   0AA8 32            mov bl, [d]
1177   0AA9 A7 00         mov bh, 0
1178   0AAB E7            pop d
1179   0AAC FD 3E         mov [d], bl
1180   0AAE             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1181   0AAE             _if21_cond:
1182   0AAE FA FC FF      lea d, [bp + -4] ; $hex_char
1183   0AB1 32            mov bl, [d]
1184   0AB2 A7 00         mov bh, 0
1185   0AB4             ; START RELATIONAL
1186   0AB4 D7            push a
1187   0AB5 11            mov a, b
1188   0AB6 26 61 00      mov b, $61
1189   0AB9 B0            cmp a, b
1190   0ABA FD 80         sge ; >=
1191   0ABC E4            pop a
1192   0ABD             ; END RELATIONAL
1193   0ABD D7            push a
1194   0ABE 11            mov a, b
1195   0ABF FA FC FF      lea d, [bp + -4] ; $hex_char
1196   0AC2 32            mov bl, [d]
1197   0AC3 A7 00         mov bh, 0
1198   0AC5             ; START RELATIONAL
1199   0AC5 D7            push a
1200   0AC6 11            mov a, b
1201   0AC7 26 66 00      mov b, $66
1202   0ACA B0            cmp a, b
1203   0ACB FD 74         sle ; <=
1204   0ACD E4            pop a
1205   0ACE             ; END RELATIONAL
1206   0ACE FD A7         sand a, b ; &&
1207   0AD0 E4            pop a
1208   0AD1 C0 00 00      cmp b, 0
1209   0AD4 C6 05 0B      je _if21_else
1210   0AD7             _if21_true:
1211   0AD7             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1212   0AD7 FA FF FF      lea d, [bp + -1] ; $value
1213   0ADA DA            push d
1214   0ADB FA FF FF      lea d, [bp + -1] ; $value
1215   0ADE 2A            mov b, [d]
1216   0ADF             ; START FACTORS
1217   0ADF D7            push a
1218   0AE0 11            mov a, b
1219   0AE1 26 10 00      mov b, $10
1220   0AE4 AC            mul a, b ; *
1221   0AE5 11            mov a, b
1222   0AE6 27            mov b, a
1223   0AE7 E4            pop a
1224   0AE8             ; END FACTORS
1225   0AE8             ; START TERMS
1226   0AE8 D7            push a
1227   0AE9 11            mov a, b
1228   0AEA FA FC FF      lea d, [bp + -4] ; $hex_char
1229   0AED 32            mov bl, [d]
1230   0AEE A7 00         mov bh, 0
1231   0AF0             ; START TERMS
1232   0AF0 D7            push a
1233   0AF1 11            mov a, b
1234   0AF2 26 61 00      mov b, $61
1235   0AF5 60            sub a, b
1236   0AF6 26 0A 00      mov b, $a
1237   0AF9 54            add a, b
1238   0AFA 27            mov b, a
1239   0AFB E4            pop a
1240   0AFC             ; END TERMS
1241   0AFC 54            add a, b
1242   0AFD 27            mov b, a
1243   0AFE E4            pop a
1244   0AFF             ; END TERMS
1245   0AFF E7            pop d
1246   0B00 FD 43         mov [d], b
1247   0B02 0A 83 0B      jmp _if21_exit
1248   0B05             _if21_else:
1249   0B05             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1250   0B05             _if22_cond:
1251   0B05 FA FC FF      lea d, [bp + -4] ; $hex_char
1252   0B08 32            mov bl, [d]
1253   0B09 A7 00         mov bh, 0
1254   0B0B             ; START RELATIONAL
1255   0B0B D7            push a
1256   0B0C 11            mov a, b
1257   0B0D 26 41 00      mov b, $41
1258   0B10 B0            cmp a, b
1259   0B11 FD 80         sge ; >=
1260   0B13 E4            pop a
1261   0B14             ; END RELATIONAL
1262   0B14 D7            push a
1263   0B15 11            mov a, b
1264   0B16 FA FC FF      lea d, [bp + -4] ; $hex_char
1265   0B19 32            mov bl, [d]
1266   0B1A A7 00         mov bh, 0
1267   0B1C             ; START RELATIONAL
1268   0B1C D7            push a
1269   0B1D 11            mov a, b
1270   0B1E 26 46 00      mov b, $46
1271   0B21 B0            cmp a, b
1272   0B22 FD 74         sle ; <=
1273   0B24 E4            pop a
1274   0B25             ; END RELATIONAL
1275   0B25 FD A7         sand a, b ; &&
1276   0B27 E4            pop a
1277   0B28 C0 00 00      cmp b, 0
1278   0B2B C6 5C 0B      je _if22_else
1279   0B2E             _if22_true:
1280   0B2E             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1281   0B2E FA FF FF      lea d, [bp + -1] ; $value
1282   0B31 DA            push d
1283   0B32 FA FF FF      lea d, [bp + -1] ; $value
1284   0B35 2A            mov b, [d]
1285   0B36             ; START FACTORS
1286   0B36 D7            push a
1287   0B37 11            mov a, b
1288   0B38 26 10 00      mov b, $10
1289   0B3B AC            mul a, b ; *
1290   0B3C 11            mov a, b
1291   0B3D 27            mov b, a
1292   0B3E E4            pop a
1293   0B3F             ; END FACTORS
1294   0B3F             ; START TERMS
1295   0B3F D7            push a
1296   0B40 11            mov a, b
1297   0B41 FA FC FF      lea d, [bp + -4] ; $hex_char
1298   0B44 32            mov bl, [d]
1299   0B45 A7 00         mov bh, 0
1300   0B47             ; START TERMS
1301   0B47 D7            push a
1302   0B48 11            mov a, b
1303   0B49 26 41 00      mov b, $41
1304   0B4C 60            sub a, b
1305   0B4D 26 0A 00      mov b, $a
1306   0B50 54            add a, b
1307   0B51 27            mov b, a
1308   0B52 E4            pop a
1309   0B53             ; END TERMS
1310   0B53 54            add a, b
1311   0B54 27            mov b, a
1312   0B55 E4            pop a
1313   0B56             ; END TERMS
1314   0B56 E7            pop d
1315   0B57 FD 43         mov [d], b
1316   0B59 0A 83 0B      jmp _if22_exit
1317   0B5C             _if22_else:
1318   0B5C             ;; value = (value * 16) + (hex_char - '0'); 
1319   0B5C FA FF FF      lea d, [bp + -1] ; $value
1320   0B5F DA            push d
1321   0B60 FA FF FF      lea d, [bp + -1] ; $value
1322   0B63 2A            mov b, [d]
1323   0B64             ; START FACTORS
1324   0B64 D7            push a
1325   0B65 11            mov a, b
1326   0B66 26 10 00      mov b, $10
1327   0B69 AC            mul a, b ; *
1328   0B6A 11            mov a, b
1329   0B6B 27            mov b, a
1330   0B6C E4            pop a
1331   0B6D             ; END FACTORS
1332   0B6D             ; START TERMS
1333   0B6D D7            push a
1334   0B6E 11            mov a, b
1335   0B6F FA FC FF      lea d, [bp + -4] ; $hex_char
1336   0B72 32            mov bl, [d]
1337   0B73 A7 00         mov bh, 0
1338   0B75             ; START TERMS
1339   0B75 D7            push a
1340   0B76 11            mov a, b
1341   0B77 26 30 00      mov b, $30
1342   0B7A 60            sub a, b
1343   0B7B 27            mov b, a
1344   0B7C E4            pop a
1345   0B7D             ; END TERMS
1346   0B7D 54            add a, b
1347   0B7E 27            mov b, a
1348   0B7F E4            pop a
1349   0B80             ; END TERMS
1350   0B80 E7            pop d
1351   0B81 FD 43         mov [d], b
1352   0B83             _if22_exit:
1353   0B83             _if21_exit:
1354   0B83             _for20_update:
1355   0B83 FA FD FF      lea d, [bp + -3] ; $i
1356   0B86 2A            mov b, [d]
1357   0B87 FD 79         mov g, b
1358   0B89 FD 77         inc b
1359   0B8B FA FD FF      lea d, [bp + -3] ; $i
1360   0B8E FD 43         mov [d], b
1361   0B90 FD 27         mov b, g
1362   0B92 0A 7F 0A      jmp _for20_cond
1363   0B95             _for20_exit:
1364   0B95             ;; return value; 
1365   0B95 FA FF FF      lea d, [bp + -1] ; $value
1366   0B98 2A            mov b, [d]
1367   0B99 F9            leave
1368   0B9A 09            ret
1369   0B9B             
1370   0B9B             atoi:
1371   0B9B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1372   0B9E             ; $result 
1373   0B9E 10 00 00      mov a, $0
1374   0BA1 45 FF FF      mov [bp + -1], a
1375   0BA4             ; $sign 
1376   0BA4 10 01 00      mov a, $1
1377   0BA7 45 FD FF      mov [bp + -3], a
1378   0BAA 52 04 00      sub sp, 4
1379   0BAD             ;; while (*str == ' ') str++; 
1380   0BAD             _while23_cond:
1381   0BAD FA 05 00      lea d, [bp + 5] ; $str
1382   0BB0 2A            mov b, [d]
1383   0BB1 74            mov d, b
1384   0BB2 32            mov bl, [d]
1385   0BB3 A7 00         mov bh, 0
1386   0BB5             ; START RELATIONAL
1387   0BB5 D7            push a
1388   0BB6 11            mov a, b
1389   0BB7 26 20 00      mov b, $20
1390   0BBA B0            cmp a, b
1391   0BBB FD 71         seq ; ==
1392   0BBD E4            pop a
1393   0BBE             ; END RELATIONAL
1394   0BBE C0 00 00      cmp b, 0
1395   0BC1 C6 D6 0B      je _while23_exit
1396   0BC4             _while23_block:
1397   0BC4             ;; str++; 
1398   0BC4 FA 05 00      lea d, [bp + 5] ; $str
1399   0BC7 2A            mov b, [d]
1400   0BC8 FD 79         mov g, b
1401   0BCA FD 77         inc b
1402   0BCC FA 05 00      lea d, [bp + 5] ; $str
1403   0BCF FD 43         mov [d], b
1404   0BD1 FD 27         mov b, g
1405   0BD3 0A AD 0B      jmp _while23_cond
1406   0BD6             _while23_exit:
1407   0BD6             ;; if (*str == '-' || *str == '+') { 
1408   0BD6             _if24_cond:
1409   0BD6 FA 05 00      lea d, [bp + 5] ; $str
1410   0BD9 2A            mov b, [d]
1411   0BDA 74            mov d, b
1412   0BDB 32            mov bl, [d]
1413   0BDC A7 00         mov bh, 0
1414   0BDE             ; START RELATIONAL
1415   0BDE D7            push a
1416   0BDF 11            mov a, b
1417   0BE0 26 2D 00      mov b, $2d
1418   0BE3 B0            cmp a, b
1419   0BE4 FD 71         seq ; ==
1420   0BE6 E4            pop a
1421   0BE7             ; END RELATIONAL
1422   0BE7 D7            push a
1423   0BE8 11            mov a, b
1424   0BE9 FA 05 00      lea d, [bp + 5] ; $str
1425   0BEC 2A            mov b, [d]
1426   0BED 74            mov d, b
1427   0BEE 32            mov bl, [d]
1428   0BEF A7 00         mov bh, 0
1429   0BF1             ; START RELATIONAL
1430   0BF1 D7            push a
1431   0BF2 11            mov a, b
1432   0BF3 26 2B 00      mov b, $2b
1433   0BF6 B0            cmp a, b
1434   0BF7 FD 71         seq ; ==
1435   0BF9 E4            pop a
1436   0BFA             ; END RELATIONAL
1437   0BFA FD A8         sor a, b ; ||
1438   0BFC E4            pop a
1439   0BFD C0 00 00      cmp b, 0
1440   0C00 C6 3B 0C      je _if24_exit
1441   0C03             _if24_true:
1442   0C03             ;; if (*str == '-') sign = -1; 
1443   0C03             _if25_cond:
1444   0C03 FA 05 00      lea d, [bp + 5] ; $str
1445   0C06 2A            mov b, [d]
1446   0C07 74            mov d, b
1447   0C08 32            mov bl, [d]
1448   0C09 A7 00         mov bh, 0
1449   0C0B             ; START RELATIONAL
1450   0C0B D7            push a
1451   0C0C 11            mov a, b
1452   0C0D 26 2D 00      mov b, $2d
1453   0C10 B0            cmp a, b
1454   0C11 FD 71         seq ; ==
1455   0C13 E4            pop a
1456   0C14             ; END RELATIONAL
1457   0C14 C0 00 00      cmp b, 0
1458   0C17 C6 29 0C      je _if25_exit
1459   0C1A             _if25_true:
1460   0C1A             ;; sign = -1; 
1461   0C1A FA FD FF      lea d, [bp + -3] ; $sign
1462   0C1D DA            push d
1463   0C1E 26 01 00      mov b, $1
1464   0C21 FD 97         neg b
1465   0C23 E7            pop d
1466   0C24 FD 43         mov [d], b
1467   0C26 0A 29 0C      jmp _if25_exit
1468   0C29             _if25_exit:
1469   0C29             ;; str++; 
1470   0C29 FA 05 00      lea d, [bp + 5] ; $str
1471   0C2C 2A            mov b, [d]
1472   0C2D FD 79         mov g, b
1473   0C2F FD 77         inc b
1474   0C31 FA 05 00      lea d, [bp + 5] ; $str
1475   0C34 FD 43         mov [d], b
1476   0C36 FD 27         mov b, g
1477   0C38 0A 3B 0C      jmp _if24_exit
1478   0C3B             _if24_exit:
1479   0C3B             ;; while (*str >= '0' && *str <= '9') { 
1480   0C3B             _while26_cond:
1481   0C3B FA 05 00      lea d, [bp + 5] ; $str
1482   0C3E 2A            mov b, [d]
1483   0C3F 74            mov d, b
1484   0C40 32            mov bl, [d]
1485   0C41 A7 00         mov bh, 0
1486   0C43             ; START RELATIONAL
1487   0C43 D7            push a
1488   0C44 11            mov a, b
1489   0C45 26 30 00      mov b, $30
1490   0C48 B0            cmp a, b
1491   0C49 FD 80         sge ; >=
1492   0C4B E4            pop a
1493   0C4C             ; END RELATIONAL
1494   0C4C D7            push a
1495   0C4D 11            mov a, b
1496   0C4E FA 05 00      lea d, [bp + 5] ; $str
1497   0C51 2A            mov b, [d]
1498   0C52 74            mov d, b
1499   0C53 32            mov bl, [d]
1500   0C54 A7 00         mov bh, 0
1501   0C56             ; START RELATIONAL
1502   0C56 D7            push a
1503   0C57 11            mov a, b
1504   0C58 26 39 00      mov b, $39
1505   0C5B B0            cmp a, b
1506   0C5C FD 74         sle ; <=
1507   0C5E E4            pop a
1508   0C5F             ; END RELATIONAL
1509   0C5F FD A7         sand a, b ; &&
1510   0C61 E4            pop a
1511   0C62 C0 00 00      cmp b, 0
1512   0C65 C6 A3 0C      je _while26_exit
1513   0C68             _while26_block:
1514   0C68             ;; result = result * 10 + (*str - '0'); 
1515   0C68 FA FF FF      lea d, [bp + -1] ; $result
1516   0C6B DA            push d
1517   0C6C FA FF FF      lea d, [bp + -1] ; $result
1518   0C6F 2A            mov b, [d]
1519   0C70             ; START FACTORS
1520   0C70 D7            push a
1521   0C71 11            mov a, b
1522   0C72 26 0A 00      mov b, $a
1523   0C75 AC            mul a, b ; *
1524   0C76 11            mov a, b
1525   0C77 27            mov b, a
1526   0C78 E4            pop a
1527   0C79             ; END FACTORS
1528   0C79             ; START TERMS
1529   0C79 D7            push a
1530   0C7A 11            mov a, b
1531   0C7B FA 05 00      lea d, [bp + 5] ; $str
1532   0C7E 2A            mov b, [d]
1533   0C7F 74            mov d, b
1534   0C80 32            mov bl, [d]
1535   0C81 A7 00         mov bh, 0
1536   0C83             ; START TERMS
1537   0C83 D7            push a
1538   0C84 11            mov a, b
1539   0C85 26 30 00      mov b, $30
1540   0C88 60            sub a, b
1541   0C89 27            mov b, a
1542   0C8A E4            pop a
1543   0C8B             ; END TERMS
1544   0C8B 54            add a, b
1545   0C8C 27            mov b, a
1546   0C8D E4            pop a
1547   0C8E             ; END TERMS
1548   0C8E E7            pop d
1549   0C8F FD 43         mov [d], b
1550   0C91             ;; str++; 
1551   0C91 FA 05 00      lea d, [bp + 5] ; $str
1552   0C94 2A            mov b, [d]
1553   0C95 FD 79         mov g, b
1554   0C97 FD 77         inc b
1555   0C99 FA 05 00      lea d, [bp + 5] ; $str
1556   0C9C FD 43         mov [d], b
1557   0C9E FD 27         mov b, g
1558   0CA0 0A 3B 0C      jmp _while26_cond
1559   0CA3             _while26_exit:
1560   0CA3             ;; return sign * result; 
1561   0CA3 FA FD FF      lea d, [bp + -3] ; $sign
1562   0CA6 2A            mov b, [d]
1563   0CA7             ; START FACTORS
1564   0CA7 D7            push a
1565   0CA8 11            mov a, b
1566   0CA9 FA FF FF      lea d, [bp + -1] ; $result
1567   0CAC 2A            mov b, [d]
1568   0CAD AC            mul a, b ; *
1569   0CAE 11            mov a, b
1570   0CAF 27            mov b, a
1571   0CB0 E4            pop a
1572   0CB1             ; END FACTORS
1573   0CB1 F9            leave
1574   0CB2 09            ret
1575   0CB3             
1576   0CB3             gets:
1577   0CB3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1578   0CB6             
1579   0CB6             ; --- BEGIN INLINE ASM BLOCK
1580   0CB6 FA 05 00      lea d, [bp + 5] ; $s
1581   0CB9 15            mov a, [d]
1582   0CBA 3C            mov d, a
1583   0CBB 07 32 11      call _gets
1584   0CBE             ; --- END INLINE ASM BLOCK
1585   0CBE             
1586   0CBE             ;; return strlen(s); 
1587   0CBE FA 05 00      lea d, [bp + 5] ; $s
1588   0CC1 2A            mov b, [d]
1589   0CC2 FD AB         swp b
1590   0CC4 D8            push b
1591   0CC5 07 E1 07      call strlen
1592   0CC8 51 02 00      add sp, 2
1593   0CCB F9            leave
1594   0CCC 09            ret
1595   0CCD             
1596   0CCD             prints:
1597   0CCD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1598   0CD0             ; $digits 
1599   0CD0             ; $i 
1600   0CD0 10 00 00      mov a, $0
1601   0CD3 45 FA FF      mov [bp + -6], a
1602   0CD6 52 07 00      sub sp, 7
1603   0CD9             ;; if (num < 0) { 
1604   0CD9             _if27_cond:
1605   0CD9 FA 05 00      lea d, [bp + 5] ; $num
1606   0CDC 2A            mov b, [d]
1607   0CDD             ; START RELATIONAL
1608   0CDD D7            push a
1609   0CDE 11            mov a, b
1610   0CDF 26 00 00      mov b, $0
1611   0CE2 B0            cmp a, b
1612   0CE3 FD 73         slt ; < 
1613   0CE5 E4            pop a
1614   0CE6             ; END RELATIONAL
1615   0CE6 C0 00 00      cmp b, 0
1616   0CE9 C6 06 0D      je _if27_else
1617   0CEC             _if27_true:
1618   0CEC             ;; putchar('-'); 
1619   0CEC 26 2D 00      mov b, $2d
1620   0CEF DD            push bl
1621   0CF0 07 AE 0E      call putchar
1622   0CF3 51 01 00      add sp, 1
1623   0CF6             ;; num = -num; 
1624   0CF6 FA 05 00      lea d, [bp + 5] ; $num
1625   0CF9 DA            push d
1626   0CFA FA 05 00      lea d, [bp + 5] ; $num
1627   0CFD 2A            mov b, [d]
1628   0CFE FD 97         neg b
1629   0D00 E7            pop d
1630   0D01 FD 43         mov [d], b
1631   0D03 0A 28 0D      jmp _if27_exit
1632   0D06             _if27_else:
1633   0D06             ;; if (num == 0) { 
1634   0D06             _if28_cond:
1635   0D06 FA 05 00      lea d, [bp + 5] ; $num
1636   0D09 2A            mov b, [d]
1637   0D0A             ; START RELATIONAL
1638   0D0A D7            push a
1639   0D0B 11            mov a, b
1640   0D0C 26 00 00      mov b, $0
1641   0D0F B0            cmp a, b
1642   0D10 FD 71         seq ; ==
1643   0D12 E4            pop a
1644   0D13             ; END RELATIONAL
1645   0D13 C0 00 00      cmp b, 0
1646   0D16 C6 28 0D      je _if28_exit
1647   0D19             _if28_true:
1648   0D19             ;; putchar('0'); 
1649   0D19 26 30 00      mov b, $30
1650   0D1C DD            push bl
1651   0D1D 07 AE 0E      call putchar
1652   0D20 51 01 00      add sp, 1
1653   0D23             ;; return; 
1654   0D23 F9            leave
1655   0D24 09            ret
1656   0D25 0A 28 0D      jmp _if28_exit
1657   0D28             _if28_exit:
1658   0D28             _if27_exit:
1659   0D28             ;; while (num > 0) { 
1660   0D28             _while29_cond:
1661   0D28 FA 05 00      lea d, [bp + 5] ; $num
1662   0D2B 2A            mov b, [d]
1663   0D2C             ; START RELATIONAL
1664   0D2C D7            push a
1665   0D2D 11            mov a, b
1666   0D2E 26 00 00      mov b, $0
1667   0D31 B0            cmp a, b
1668   0D32 FD 7F         sgt ; >
1669   0D34 E4            pop a
1670   0D35             ; END RELATIONAL
1671   0D35 C0 00 00      cmp b, 0
1672   0D38 C6 85 0D      je _while29_exit
1673   0D3B             _while29_block:
1674   0D3B             ;; digits[i] = '0' + (num % 10); 
1675   0D3B FA FC FF      lea d, [bp + -4] ; $digits
1676   0D3E D7            push a
1677   0D3F DA            push d
1678   0D40 FA FA FF      lea d, [bp + -6] ; $i
1679   0D43 2A            mov b, [d]
1680   0D44 E7            pop d
1681   0D45 5A            add d, b
1682   0D46 E4            pop a
1683   0D47 DA            push d
1684   0D48 26 30 00      mov b, $30
1685   0D4B             ; START TERMS
1686   0D4B D7            push a
1687   0D4C 11            mov a, b
1688   0D4D FA 05 00      lea d, [bp + 5] ; $num
1689   0D50 2A            mov b, [d]
1690   0D51             ; START FACTORS
1691   0D51 D7            push a
1692   0D52 11            mov a, b
1693   0D53 26 0A 00      mov b, $a
1694   0D56 AE            div a, b ; 
1695   0D57 11            mov a, b
1696   0D58 27            mov b, a
1697   0D59 E4            pop a
1698   0D5A             ; END FACTORS
1699   0D5A 54            add a, b
1700   0D5B 27            mov b, a
1701   0D5C E4            pop a
1702   0D5D             ; END TERMS
1703   0D5D E7            pop d
1704   0D5E FD 3E         mov [d], bl
1705   0D60             ;; num = num / 10; 
1706   0D60 FA 05 00      lea d, [bp + 5] ; $num
1707   0D63 DA            push d
1708   0D64 FA 05 00      lea d, [bp + 5] ; $num
1709   0D67 2A            mov b, [d]
1710   0D68             ; START FACTORS
1711   0D68 D7            push a
1712   0D69 11            mov a, b
1713   0D6A 26 0A 00      mov b, $a
1714   0D6D AE            div a, b
1715   0D6E 27            mov b, a
1716   0D6F E4            pop a
1717   0D70             ; END FACTORS
1718   0D70 E7            pop d
1719   0D71 FD 43         mov [d], b
1720   0D73             ;; i++; 
1721   0D73 FA FA FF      lea d, [bp + -6] ; $i
1722   0D76 2A            mov b, [d]
1723   0D77 FD 79         mov g, b
1724   0D79 FD 77         inc b
1725   0D7B FA FA FF      lea d, [bp + -6] ; $i
1726   0D7E FD 43         mov [d], b
1727   0D80 FD 27         mov b, g
1728   0D82 0A 28 0D      jmp _while29_cond
1729   0D85             _while29_exit:
1730   0D85             ;; while (i > 0) { 
1731   0D85             _while30_cond:
1732   0D85 FA FA FF      lea d, [bp + -6] ; $i
1733   0D88 2A            mov b, [d]
1734   0D89             ; START RELATIONAL
1735   0D89 D7            push a
1736   0D8A 11            mov a, b
1737   0D8B 26 00 00      mov b, $0
1738   0D8E B0            cmp a, b
1739   0D8F FD 7F         sgt ; >
1740   0D91 E4            pop a
1741   0D92             ; END RELATIONAL
1742   0D92 C0 00 00      cmp b, 0
1743   0D95 C6 C0 0D      je _while30_exit
1744   0D98             _while30_block:
1745   0D98             ;; i--; 
1746   0D98 FA FA FF      lea d, [bp + -6] ; $i
1747   0D9B 2A            mov b, [d]
1748   0D9C FD 79         mov g, b
1749   0D9E FD 7D         dec b
1750   0DA0 FA FA FF      lea d, [bp + -6] ; $i
1751   0DA3 FD 43         mov [d], b
1752   0DA5 FD 27         mov b, g
1753   0DA7             ;; putchar(digits[i]); 
1754   0DA7 FA FC FF      lea d, [bp + -4] ; $digits
1755   0DAA D7            push a
1756   0DAB DA            push d
1757   0DAC FA FA FF      lea d, [bp + -6] ; $i
1758   0DAF 2A            mov b, [d]
1759   0DB0 E7            pop d
1760   0DB1 5A            add d, b
1761   0DB2 E4            pop a
1762   0DB3 32            mov bl, [d]
1763   0DB4 A7 00         mov bh, 0
1764   0DB6 DD            push bl
1765   0DB7 07 AE 0E      call putchar
1766   0DBA 51 01 00      add sp, 1
1767   0DBD 0A 85 0D      jmp _while30_cond
1768   0DC0             _while30_exit:
1769   0DC0 F9            leave
1770   0DC1 09            ret
1771   0DC2             
1772   0DC2             printu:
1773   0DC2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1774   0DC5             ; $digits 
1775   0DC5             ; $i 
1776   0DC5 52 07 00      sub sp, 7
1777   0DC8             ;; i = 0; 
1778   0DC8 FA FA FF      lea d, [bp + -6] ; $i
1779   0DCB DA            push d
1780   0DCC 26 00 00      mov b, $0
1781   0DCF E7            pop d
1782   0DD0 FD 43         mov [d], b
1783   0DD2             ;; if(num == 0){ 
1784   0DD2             _if31_cond:
1785   0DD2 FA 05 00      lea d, [bp + 5] ; $num
1786   0DD5 2A            mov b, [d]
1787   0DD6             ; START RELATIONAL
1788   0DD6 D7            push a
1789   0DD7 11            mov a, b
1790   0DD8 26 00 00      mov b, $0
1791   0DDB B0            cmp a, b
1792   0DDC FD 71         seq ; ==
1793   0DDE E4            pop a
1794   0DDF             ; END RELATIONAL
1795   0DDF C0 00 00      cmp b, 0
1796   0DE2 C6 F4 0D      je _if31_exit
1797   0DE5             _if31_true:
1798   0DE5             ;; putchar('0'); 
1799   0DE5 26 30 00      mov b, $30
1800   0DE8 DD            push bl
1801   0DE9 07 AE 0E      call putchar
1802   0DEC 51 01 00      add sp, 1
1803   0DEF             ;; return; 
1804   0DEF F9            leave
1805   0DF0 09            ret
1806   0DF1 0A F4 0D      jmp _if31_exit
1807   0DF4             _if31_exit:
1808   0DF4             ;; while (num > 0) { 
1809   0DF4             _while32_cond:
1810   0DF4 FA 05 00      lea d, [bp + 5] ; $num
1811   0DF7 2A            mov b, [d]
1812   0DF8             ; START RELATIONAL
1813   0DF8 D7            push a
1814   0DF9 11            mov a, b
1815   0DFA 26 00 00      mov b, $0
1816   0DFD B0            cmp a, b
1817   0DFE FD 81         sgu ; > (unsigned)
1818   0E00 E4            pop a
1819   0E01             ; END RELATIONAL
1820   0E01 C0 00 00      cmp b, 0
1821   0E04 C6 51 0E      je _while32_exit
1822   0E07             _while32_block:
1823   0E07             ;; digits[i] = '0' + (num % 10); 
1824   0E07 FA FC FF      lea d, [bp + -4] ; $digits
1825   0E0A D7            push a
1826   0E0B DA            push d
1827   0E0C FA FA FF      lea d, [bp + -6] ; $i
1828   0E0F 2A            mov b, [d]
1829   0E10 E7            pop d
1830   0E11 5A            add d, b
1831   0E12 E4            pop a
1832   0E13 DA            push d
1833   0E14 26 30 00      mov b, $30
1834   0E17             ; START TERMS
1835   0E17 D7            push a
1836   0E18 11            mov a, b
1837   0E19 FA 05 00      lea d, [bp + 5] ; $num
1838   0E1C 2A            mov b, [d]
1839   0E1D             ; START FACTORS
1840   0E1D D7            push a
1841   0E1E 11            mov a, b
1842   0E1F 26 0A 00      mov b, $a
1843   0E22 AE            div a, b ; 
1844   0E23 11            mov a, b
1845   0E24 27            mov b, a
1846   0E25 E4            pop a
1847   0E26             ; END FACTORS
1848   0E26 54            add a, b
1849   0E27 27            mov b, a
1850   0E28 E4            pop a
1851   0E29             ; END TERMS
1852   0E29 E7            pop d
1853   0E2A FD 3E         mov [d], bl
1854   0E2C             ;; num = num / 10; 
1855   0E2C FA 05 00      lea d, [bp + 5] ; $num
1856   0E2F DA            push d
1857   0E30 FA 05 00      lea d, [bp + 5] ; $num
1858   0E33 2A            mov b, [d]
1859   0E34             ; START FACTORS
1860   0E34 D7            push a
1861   0E35 11            mov a, b
1862   0E36 26 0A 00      mov b, $a
1863   0E39 AE            div a, b
1864   0E3A 27            mov b, a
1865   0E3B E4            pop a
1866   0E3C             ; END FACTORS
1867   0E3C E7            pop d
1868   0E3D FD 43         mov [d], b
1869   0E3F             ;; i++; 
1870   0E3F FA FA FF      lea d, [bp + -6] ; $i
1871   0E42 2A            mov b, [d]
1872   0E43 FD 79         mov g, b
1873   0E45 FD 77         inc b
1874   0E47 FA FA FF      lea d, [bp + -6] ; $i
1875   0E4A FD 43         mov [d], b
1876   0E4C FD 27         mov b, g
1877   0E4E 0A F4 0D      jmp _while32_cond
1878   0E51             _while32_exit:
1879   0E51             ;; while (i > 0) { 
1880   0E51             _while33_cond:
1881   0E51 FA FA FF      lea d, [bp + -6] ; $i
1882   0E54 2A            mov b, [d]
1883   0E55             ; START RELATIONAL
1884   0E55 D7            push a
1885   0E56 11            mov a, b
1886   0E57 26 00 00      mov b, $0
1887   0E5A B0            cmp a, b
1888   0E5B FD 7F         sgt ; >
1889   0E5D E4            pop a
1890   0E5E             ; END RELATIONAL
1891   0E5E C0 00 00      cmp b, 0
1892   0E61 C6 8C 0E      je _while33_exit
1893   0E64             _while33_block:
1894   0E64             ;; i--; 
1895   0E64 FA FA FF      lea d, [bp + -6] ; $i
1896   0E67 2A            mov b, [d]
1897   0E68 FD 79         mov g, b
1898   0E6A FD 7D         dec b
1899   0E6C FA FA FF      lea d, [bp + -6] ; $i
1900   0E6F FD 43         mov [d], b
1901   0E71 FD 27         mov b, g
1902   0E73             ;; putchar(digits[i]); 
1903   0E73 FA FC FF      lea d, [bp + -4] ; $digits
1904   0E76 D7            push a
1905   0E77 DA            push d
1906   0E78 FA FA FF      lea d, [bp + -6] ; $i
1907   0E7B 2A            mov b, [d]
1908   0E7C E7            pop d
1909   0E7D 5A            add d, b
1910   0E7E E4            pop a
1911   0E7F 32            mov bl, [d]
1912   0E80 A7 00         mov bh, 0
1913   0E82 DD            push bl
1914   0E83 07 AE 0E      call putchar
1915   0E86 51 01 00      add sp, 1
1916   0E89 0A 51 0E      jmp _while33_cond
1917   0E8C             _while33_exit:
1918   0E8C F9            leave
1919   0E8D 09            ret
1920   0E8E             
1921   0E8E             rand:
1922   0E8E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1923   0E91             ; $sec 
1924   0E91 52 01 00      sub sp, 1
1925   0E94             
1926   0E94             ; --- BEGIN INLINE ASM BLOCK
1927   0E94 19 00         mov al, 0
1928   0E96 05 01         syscall sys_rtc					
1929   0E98 1A            mov al, ah
1930   0E99 FA 00 00      lea d, [bp + 0] ; $sec
1931   0E9C 1E            mov al, [d]
1932   0E9D             ; --- END INLINE ASM BLOCK
1933   0E9D             
1934   0E9D             ;; return sec; 
1935   0E9D FA 00 00      lea d, [bp + 0] ; $sec
1936   0EA0 32            mov bl, [d]
1937   0EA1 A7 00         mov bh, 0
1938   0EA3 F9            leave
1939   0EA4 09            ret
1940   0EA5             
1941   0EA5             date:
1942   0EA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1943   0EA8             
1944   0EA8             ; --- BEGIN INLINE ASM BLOCK
1945   0EA8 19 00         mov al, 0 
1946   0EAA 05 07         syscall sys_datetime
1947   0EAC             ; --- END INLINE ASM BLOCK
1948   0EAC             
1949   0EAC F9            leave
1950   0EAD 09            ret
1951   0EAE             
1952   0EAE             putchar:
1953   0EAE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1954   0EB1             
1955   0EB1             ; --- BEGIN INLINE ASM BLOCK
1956   0EB1 FA 05 00      lea d, [bp + 5] ; $c
1957   0EB4 1E            mov al, [d]
1958   0EB5 23            mov ah, al
1959   0EB6 07 2B 11      call _putchar
1960   0EB9             ; --- END INLINE ASM BLOCK
1961   0EB9             
1962   0EB9 F9            leave
1963   0EBA 09            ret
1964   0EBB             
1965   0EBB             getchar:
1966   0EBB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1967   0EBE             ; $c 
1968   0EBE 52 01 00      sub sp, 1
1969   0EC1             
1970   0EC1             ; --- BEGIN INLINE ASM BLOCK
1971   0EC1 07 24 11      call getch
1972   0EC4 1A            mov al, ah
1973   0EC5 FA 00 00      lea d, [bp + 0] ; $c
1974   0EC8 3E            mov [d], al
1975   0EC9             ; --- END INLINE ASM BLOCK
1976   0EC9             
1977   0EC9             ;; return c; 
1978   0EC9 FA 00 00      lea d, [bp + 0] ; $c
1979   0ECC 32            mov bl, [d]
1980   0ECD A7 00         mov bh, 0
1981   0ECF F9            leave
1982   0ED0 09            ret
1983   0ED1             
1984   0ED1             scann:
1985   0ED1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1986   0ED4             ; $m 
1987   0ED4 52 02 00      sub sp, 2
1988   0ED7             
1989   0ED7             ; --- BEGIN INLINE ASM BLOCK
1990   0ED7 07 6F 13      call scan_u16d
1991   0EDA FA FF FF      lea d, [bp + -1] ; $m
1992   0EDD 43            mov [d], a
1993   0EDE             ; --- END INLINE ASM BLOCK
1994   0EDE             
1995   0EDE             ;; return m; 
1996   0EDE FA FF FF      lea d, [bp + -1] ; $m
1997   0EE1 2A            mov b, [d]
1998   0EE2 F9            leave
1999   0EE3 09            ret
2000   0EE4             
2001   0EE4             puts:
2002   0EE4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2003   0EE7             
2004   0EE7             ; --- BEGIN INLINE ASM BLOCK
2005   0EE7 FA 05 00      lea d, [bp + 5] ; $s
2006   0EEA 15            mov a, [d]
2007   0EEB 3C            mov d, a
2008   0EEC 07 75 12      call _puts
2009   0EEF 10 00 0A      mov a, $0A00
2010   0EF2 05 03         syscall sys_io
2011   0EF4             ; --- END INLINE ASM BLOCK
2012   0EF4             
2013   0EF4 F9            leave
2014   0EF5 09            ret
2015   0EF6             
2016   0EF6             print:
2017   0EF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2018   0EF9             
2019   0EF9             ; --- BEGIN INLINE ASM BLOCK
2020   0EF9 FA 05 00      lea d, [bp + 5] ; $s
2021   0EFC FD 2A         mov d, [d]
2022   0EFE 07 75 12      call _puts
2023   0F01             ; --- END INLINE ASM BLOCK
2024   0F01             
2025   0F01 F9            leave
2026   0F02 09            ret
2027   0F03             
2028   0F03             loadfile:
2029   0F03 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2030   0F06             
2031   0F06             ; --- BEGIN INLINE ASM BLOCK
2032   0F06 FA 05 00      lea d, [bp + 5] ; $destination
2033   0F09 15            mov a, [d]
2034   0F0A 4F            mov di, a
2035   0F0B FA 07 00      lea d, [bp + 7] ; $filename
2036   0F0E FD 2A         mov d, [d]
2037   0F10 19 14         mov al, 20
2038   0F12 05 04         syscall sys_filesystem
2039   0F14             ; --- END INLINE ASM BLOCK
2040   0F14             
2041   0F14 F9            leave
2042   0F15 09            ret
2043   0F16             
2044   0F16             create_file:
2045   0F16 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2046   0F19 F9            leave
2047   0F1A 09            ret
2048   0F1B             
2049   0F1B             delete_file:
2050   0F1B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2051   0F1E             
2052   0F1E             ; --- BEGIN INLINE ASM BLOCK
2053   0F1E FA 05 00      lea d, [bp + 5] ; $filename
2054   0F21 19 0A         mov al, 10
2055   0F23 05 04         syscall sys_filesystem
2056   0F25             ; --- END INLINE ASM BLOCK
2057   0F25             
2058   0F25 F9            leave
2059   0F26 09            ret
2060   0F27             
2061   0F27             fopen:
2062   0F27 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2063   0F2A F9            leave
2064   0F2B 09            ret
2065   0F2C             
2066   0F2C             fclose:
2067   0F2C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2068   0F2F F9            leave
2069   0F30 09            ret
2070   0F31             
2071   0F31             alloc:
2072   0F31 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2073   0F34             ;; heap_top = heap_top + bytes; 
2074   0F34 3B 04 21      mov d, _heap_top ; $heap_top
2075   0F37 DA            push d
2076   0F38 3B 04 21      mov d, _heap_top ; $heap_top
2077   0F3B 2A            mov b, [d]
2078   0F3C             ; START TERMS
2079   0F3C D7            push a
2080   0F3D 11            mov a, b
2081   0F3E FA 05 00      lea d, [bp + 5] ; $bytes
2082   0F41 2A            mov b, [d]
2083   0F42 54            add a, b
2084   0F43 27            mov b, a
2085   0F44 E4            pop a
2086   0F45             ; END TERMS
2087   0F45 E7            pop d
2088   0F46 FD 43         mov [d], b
2089   0F48             ;; return heap_top - bytes; 
2090   0F48 3B 04 21      mov d, _heap_top ; $heap_top
2091   0F4B 2A            mov b, [d]
2092   0F4C             ; START TERMS
2093   0F4C D7            push a
2094   0F4D 11            mov a, b
2095   0F4E FA 05 00      lea d, [bp + 5] ; $bytes
2096   0F51 2A            mov b, [d]
2097   0F52 60            sub a, b
2098   0F53 27            mov b, a
2099   0F54 E4            pop a
2100   0F55             ; END TERMS
2101   0F55 F9            leave
2102   0F56 09            ret
2103   0F57             
2104   0F57             free:
2105   0F57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2106   0F5A             ;; return heap_top = heap_top - bytes; 
2107   0F5A 3B 04 21      mov d, _heap_top ; $heap_top
2108   0F5D DA            push d
2109   0F5E 3B 04 21      mov d, _heap_top ; $heap_top
2110   0F61 2A            mov b, [d]
2111   0F62             ; START TERMS
2112   0F62 D7            push a
2113   0F63 11            mov a, b
2114   0F64 FA 05 00      lea d, [bp + 5] ; $bytes
2115   0F67 2A            mov b, [d]
2116   0F68 60            sub a, b
2117   0F69 27            mov b, a
2118   0F6A E4            pop a
2119   0F6B             ; END TERMS
2120   0F6B E7            pop d
2121   0F6C FD 43         mov [d], b
2122   0F6E F9            leave
2123   0F6F 09            ret
2124   0F70             
2125   0F70             exit:
2126   0F70 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2127   0F73             
2128   0F73             ; --- BEGIN INLINE ASM BLOCK
2129   0F73 05 0B         syscall sys_terminate_proc
2130   0F75             ; --- END INLINE ASM BLOCK
2131   0F75             
2132   0F75 F9            leave
2133   0F76 09            ret
2134   0F77             
2135   0F77             load_hex:
2136   0F77 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2137   0F7A             ; $temp 
2138   0F7A 52 02 00      sub sp, 2
2139   0F7D             ;; temp = alloc(32768); 
2140   0F7D FA FF FF      lea d, [bp + -1] ; $temp
2141   0F80 DA            push d
2142   0F81 26 00 80      mov b, $8000
2143   0F84 FD AB         swp b
2144   0F86 D8            push b
2145   0F87 07 31 0F      call alloc
2146   0F8A 51 02 00      add sp, 2
2147   0F8D E7            pop d
2148   0F8E FD 43         mov [d], b
2149   0F90             
2150   0F90             ; --- BEGIN INLINE ASM BLOCK
2151   0F90               
2152   0F90               
2153   0F90               
2154   0F90               
2155   0F90               
2156   0F90             _load_hex:
2157   0F90 D7            push a
2158   0F91 D8            push b
2159   0F92 DA            push d
2160   0F93 E2            push si
2161   0F94 E3            push di
2162   0F95 52 00 80      sub sp, $8000      
2163   0F98 38 00 00      mov c, 0
2164   0F9B 48            mov a, sp
2165   0F9C 77            inc a
2166   0F9D 3C            mov d, a          
2167   0F9E 07 32 11      call _gets        
2168   0FA1 4D            mov si, a
2169   0FA2             __load_hex_loop:
2170   0FA2 F6            lodsb             
2171   0FA3 B9 00         cmp al, 0         
2172   0FA5 C6 B3 0F      jz __load_hex_ret
2173   0FA8 36            mov bh, al
2174   0FA9 F6            lodsb
2175   0FAA 2F            mov bl, al
2176   0FAB 07 E8 10      call _atoi        
2177   0FAE F7            stosb             
2178   0FAF 78            inc c
2179   0FB0 0A A2 0F      jmp __load_hex_loop
2180   0FB3             __load_hex_ret:
2181   0FB3 51 00 80      add sp, $8000
2182   0FB6 F0            pop di
2183   0FB7 EF            pop si
2184   0FB8 E7            pop d
2185   0FB9 E5            pop b
2186   0FBA E4            pop a
2187   0FBB             ; --- END INLINE ASM BLOCK
2188   0FBB             
2189   0FBB F9            leave
2190   0FBC 09            ret
2191   0FBD             
2192   0FBD             getparam:
2193   0FBD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2194   0FC0             ; $data 
2195   0FC0 52 01 00      sub sp, 1
2196   0FC3             
2197   0FC3             ; --- BEGIN INLINE ASM BLOCK
2198   0FC3 19 04         mov al, 4
2199   0FC5 FA 05 00      lea d, [bp + 5] ; $address
2200   0FC8 FD 2A         mov d, [d]
2201   0FCA 05 0C         syscall sys_system
2202   0FCC FA 00 00      lea d, [bp + 0] ; $data
2203   0FCF FD 3E         mov [d], bl
2204   0FD1             ; --- END INLINE ASM BLOCK
2205   0FD1             
2206   0FD1             ;; return data; 
2207   0FD1 FA 00 00      lea d, [bp + 0] ; $data
2208   0FD4 32            mov bl, [d]
2209   0FD5 A7 00         mov bh, 0
2210   0FD7 F9            leave
2211   0FD8 09            ret
2212   0FD9             
2213   0FD9             clear:
2214   0FD9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2215   0FDC             ;; print("\033[2J\033[H"); 
2216   0FDC 26 F4 20      mov b, __s3 ; "\033[2J\033[H"
2217   0FDF FD AB         swp b
2218   0FE1 D8            push b
2219   0FE2 07 F6 0E      call print
2220   0FE5 51 02 00      add sp, 2
2221   0FE8 F9            leave
2222   0FE9 09            ret
2223   0FEA             
2224   0FEA             printun:
2225   0FEA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2226   0FED             ;; print(prompt); 
2227   0FED FA 07 00      lea d, [bp + 7] ; $prompt
2228   0FF0 2A            mov b, [d]
2229   0FF1 FD AB         swp b
2230   0FF3 D8            push b
2231   0FF4 07 F6 0E      call print
2232   0FF7 51 02 00      add sp, 2
2233   0FFA             ;; printu(n); 
2234   0FFA FA 05 00      lea d, [bp + 5] ; $n
2235   0FFD 2A            mov b, [d]
2236   0FFE FD AB         swp b
2237   1000 D8            push b
2238   1001 07 C2 0D      call printu
2239   1004 51 02 00      add sp, 2
2240   1007             ;; print("\n"); 
2241   1007 26 FC 20      mov b, __s4 ; "\n"
2242   100A FD AB         swp b
2243   100C D8            push b
2244   100D 07 F6 0E      call print
2245   1010 51 02 00      add sp, 2
2246   1013 F9            leave
2247   1014 09            ret
2248   1015             
2249   1015             printsn:
2250   1015 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2251   1018             ;; print(prompt); 
2252   1018 FA 07 00      lea d, [bp + 7] ; $prompt
2253   101B 2A            mov b, [d]
2254   101C FD AB         swp b
2255   101E D8            push b
2256   101F 07 F6 0E      call print
2257   1022 51 02 00      add sp, 2
2258   1025             ;; prints(n); 
2259   1025 FA 05 00      lea d, [bp + 5] ; $n
2260   1028 2A            mov b, [d]
2261   1029 FD AB         swp b
2262   102B D8            push b
2263   102C 07 CD 0C      call prints
2264   102F 51 02 00      add sp, 2
2265   1032             ;; print("\n"); 
2266   1032 26 FC 20      mov b, __s4 ; "\n"
2267   1035 FD AB         swp b
2268   1037 D8            push b
2269   1038 07 F6 0E      call print
2270   103B 51 02 00      add sp, 2
2271   103E F9            leave
2272   103F 09            ret
2273   1040             
2274   1040             include_stdio_asm:
2275   1040 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2276   1043             
2277   1043             ; --- BEGIN INLINE ASM BLOCK
2278   1043             .include "lib/stdio.asm"
0001+  1043             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1043             ; stdio.s
0003+  1043             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1043             .include "lib/string.asm"
0001++ 1043             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1043             ; string.s
0003++ 1043             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1043             
0005++ 1043             
0006++ 1043             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1043             ; _strrev
0008++ 1043             ; reverse a string
0009++ 1043             ; D = string address
0010++ 1043             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1043             ; 01234
0012++ 1043             _strrev:
0013++ 1043 4B          	pusha
0014++ 1044 07 8A 10    	call _strlen	; length in C
0015++ 1047 12          	mov a, c
0016++ 1048 AF 01 00    	cmp a, 1
0017++ 104B D0 65 10    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 104E 7D          	dec a
0019++ 104F FD 4E       	mov si, d	; beginning of string
0020++ 1051 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1053 59          	add d, a	; end of string
0022++ 1054 12          	mov a, c
0023++ 1055 FD 9B       	shr a		; divide by 2
0024++ 1057 39          	mov c, a	; C now counts the steps
0025++ 1058             _strrev_L0:
0026++ 1058 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1059 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 105A 3E          	mov [d], al	; store left char into right side
0029++ 105B 1B          	mov al, bl
0030++ 105C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 105D 7E          	dec c
0032++ 105E 7F          	dec d
0033++ 105F C2 00 00    	cmp c, 0
0034++ 1062 C7 58 10    	jne _strrev_L0
0035++ 1065             _strrev_end:
0036++ 1065 4C          	popa
0037++ 1066 09          	ret
0038++ 1067             	
0039++ 1067             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1067             ; _strchr
0041++ 1067             ; search string in D for char in AL
0042++ 1067             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1067             _strchr:
0044++ 1067             _strchr_L0:
0045++ 1067 32          	mov bl, [d]
0046++ 1068 C1 00       	cmp bl, 0
0047++ 106A C6 75 10    	je _strchr_end
0048++ 106D BA          	cmp al, bl
0049++ 106E C6 75 10    	je _strchr_end
0050++ 1071 79          	inc d
0051++ 1072 0A 67 10    	jmp _strchr_L0
0052++ 1075             _strchr_end:
0053++ 1075 1B          	mov al, bl
0054++ 1076 09          	ret
0055++ 1077             
0056++ 1077             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1077             ; _strstr
0058++ 1077             ; find sub-string
0059++ 1077             ; str1 in SI
0060++ 1077             ; str2 in DI
0061++ 1077             ; SI points to end of source string
0062++ 1077             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1077             _strstr:
0064++ 1077 DB          	push al
0065++ 1078 DA          	push d
0066++ 1079 E3          	push di
0067++ 107A             _strstr_loop:
0068++ 107A F3          	cmpsb					; compare a byte of the strings
0069++ 107B C7 86 10    	jne _strstr_ret
0070++ 107E FC 00 00    	lea d, [di + 0]
0071++ 1081 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1083 C7 7A 10    	jne _strstr_loop				; equal chars but not at end
0073++ 1086             _strstr_ret:
0074++ 1086 F0          	pop di
0075++ 1087 E7          	pop d
0076++ 1088 E8          	pop al
0077++ 1089 09          	ret
0078++ 108A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 108A             ; length of null terminated string
0080++ 108A             ; result in C
0081++ 108A             ; pointer in D
0082++ 108A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 108A             _strlen:
0084++ 108A DA          	push d
0085++ 108B 38 00 00    	mov c, 0
0086++ 108E             _strlen_L1:
0087++ 108E BD 00       	cmp byte [d], 0
0088++ 1090 C6 98 10    	je _strlen_ret
0089++ 1093 79          	inc d
0090++ 1094 78          	inc c
0091++ 1095 0A 8E 10    	jmp _strlen_L1
0092++ 1098             _strlen_ret:
0093++ 1098 E7          	pop d
0094++ 1099 09          	ret
0095++ 109A             
0096++ 109A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 109A             ; STRCMP
0098++ 109A             ; compare two strings
0099++ 109A             ; str1 in SI
0100++ 109A             ; str2 in DI
0101++ 109A             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 109A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 109A             _strcmp:
0104++ 109A DB          	push al
0105++ 109B DA          	push d
0106++ 109C E3          	push di
0107++ 109D E2          	push si
0108++ 109E             _strcmp_loop:
0109++ 109E F3          	cmpsb					; compare a byte of the strings
0110++ 109F C7 AA 10    	jne _strcmp_ret
0111++ 10A2 FB FF FF    	lea d, [si +- 1]
0112++ 10A5 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 10A7 C7 9E 10    	jne _strcmp_loop				; equal chars but not at end
0114++ 10AA             _strcmp_ret:
0115++ 10AA EF          	pop si
0116++ 10AB F0          	pop di
0117++ 10AC E7          	pop d
0118++ 10AD E8          	pop al
0119++ 10AE 09          	ret
0120++ 10AF             
0121++ 10AF             
0122++ 10AF             ; STRCPY
0123++ 10AF             ; copy null terminated string from SI to DI
0124++ 10AF             ; source in SI
0125++ 10AF             ; destination in DI
0126++ 10AF             _strcpy:
0127++ 10AF E2          	push si
0128++ 10B0 E3          	push di
0129++ 10B1 DB          	push al
0130++ 10B2             _strcpy_L1:
0131++ 10B2 F6          	lodsb
0132++ 10B3 F7          	stosb
0133++ 10B4 B9 00       	cmp al, 0
0134++ 10B6 C7 B2 10    	jne _strcpy_L1
0135++ 10B9             _strcpy_end:
0136++ 10B9 E8          	pop al
0137++ 10BA F0          	pop di
0138++ 10BB EF          	pop si
0139++ 10BC 09          	ret
0140++ 10BD             
0141++ 10BD             ; STRCAT
0142++ 10BD             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 10BD             ; source in SI
0144++ 10BD             ; destination in DI
0145++ 10BD             _strcat:
0146++ 10BD E2          	push si
0147++ 10BE E3          	push di
0148++ 10BF D7          	push a
0149++ 10C0 DA          	push d
0150++ 10C1 50          	mov a, di
0151++ 10C2 3C          	mov d, a
0152++ 10C3             _strcat_goto_end_L1:
0153++ 10C3 BD 00       	cmp byte[d], 0
0154++ 10C5 C6 CC 10    	je _strcat_start
0155++ 10C8 79          	inc d
0156++ 10C9 0A C3 10    	jmp _strcat_goto_end_L1
0157++ 10CC             _strcat_start:
0158++ 10CC FD 50       	mov di, d
0159++ 10CE             _strcat_L1:
0160++ 10CE F6          	lodsb
0161++ 10CF F7          	stosb
0162++ 10D0 B9 00       	cmp al, 0
0163++ 10D2 C7 CE 10    	jne _strcat_L1
0164++ 10D5             _strcat_end:
0165++ 10D5 E7          	pop d
0166++ 10D6 E4          	pop a
0167++ 10D7 F0          	pop di
0168++ 10D8 EF          	pop si
0169++ 10D9 09          	ret
0170++ 10DA             
0171++ 10DA             
0005+  10DA             
0006+  10DA             
0007+  10DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  10DA             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  10DA             ; ASCII in BL
0010+  10DA             ; result in AL
0011+  10DA             ; ascii for F = 0100 0110
0012+  10DA             ; ascii for 9 = 0011 1001
0013+  10DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  10DA             hex_ascii_encode:
0015+  10DA 1B            mov al, bl
0016+  10DB 93 40         test al, $40        ; test if letter or number
0017+  10DD C7 E3 10      jnz hex_letter
0018+  10E0 87 0F         and al, $0F        ; get number
0019+  10E2 09            ret
0020+  10E3             hex_letter:
0021+  10E3 87 0F         and al, $0F        ; get letter
0022+  10E5 6A 09         add al, 9
0023+  10E7 09            ret
0024+  10E8             
0025+  10E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  10E8             ; ATOI
0027+  10E8             ; 2 letter hex string in B
0028+  10E8             ; 8bit integer returned in AL
0029+  10E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  10E8             _atoi:
0031+  10E8 D8            push b
0032+  10E9 07 DA 10      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  10EC 30            mov bl, bh
0034+  10ED DB            push al          ; save a
0035+  10EE 07 DA 10      call hex_ascii_encode
0036+  10F1 EA            pop bl  
0037+  10F2 FD 9E 04      shl al, 4
0038+  10F5 8C            or al, bl
0039+  10F6 E5            pop b
0040+  10F7 09            ret  
0041+  10F8             
0042+  10F8             
0043+  10F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  10F8             ; scanf
0045+  10F8             ; no need for explanations!
0046+  10F8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  10F8             scanf:
0048+  10F8 09            ret
0049+  10F9             
0050+  10F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  10F9             ; ITOA
0052+  10F9             ; 8bit value in BL
0053+  10F9             ; 2 byte ASCII result in A
0054+  10F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  10F9             _itoa:
0056+  10F9 DA            push d
0057+  10FA D8            push b
0058+  10FB A7 00         mov bh, 0
0059+  10FD FD A4 04      shr bl, 4  
0060+  1100 74            mov d, b
0061+  1101 1F A9 13      mov al, [d + s_hex_digits]
0062+  1104 23            mov ah, al
0063+  1105               
0064+  1105 E5            pop b
0065+  1106 D8            push b
0066+  1107 A7 00         mov bh, 0
0067+  1109 FD 87 0F      and bl, $0F
0068+  110C 74            mov d, b
0069+  110D 1F A9 13      mov al, [d + s_hex_digits]
0070+  1110 E5            pop b
0071+  1111 E7            pop d
0072+  1112 09            ret
0073+  1113             
0074+  1113             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  1113             ; HEX STRING TO BINARY
0076+  1113             ; di = destination address
0077+  1113             ; si = source
0078+  1113             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  1113             _hex_to_int:
0080+  1113             _hex_to_int_L1:
0081+  1113 F6            lodsb          ; load from [SI] to AL
0082+  1114 B9 00         cmp al, 0        ; check if ASCII 0
0083+  1116 C6 23 11      jz _hex_to_int_ret
0084+  1119 36            mov bh, al
0085+  111A F6            lodsb
0086+  111B 2F            mov bl, al
0087+  111C 07 E8 10      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  111F F7            stosb          ; store AL to [DI]
0089+  1120 0A 13 11      jmp _hex_to_int_L1
0090+  1123             _hex_to_int_ret:
0091+  1123 09            ret    
0092+  1124             
0093+  1124             
0094+  1124             
0095+  1124             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  1124             ; GETCHAR
0097+  1124             ; char in ah
0098+  1124             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  1124             getch:
0100+  1124 DB            push al
0101+  1125             getch_retry:
0102+  1125 19 01         mov al, 1
0103+  1127 05 03         syscall sys_io      ; receive in AH
0104+  1129 E8            pop al
0105+  112A 09            ret
0106+  112B             
0107+  112B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  112B             ; PUTCHAR
0109+  112B             ; char in ah
0110+  112B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  112B             _putchar:
0112+  112B D7            push a
0113+  112C 19 00         mov al, 0
0114+  112E 05 03         syscall sys_io      ; char in AH
0115+  1130 E4            pop a
0116+  1131 09            ret
0117+  1132             
0118+  1132             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  1132             ;; INPUT A STRING
0120+  1132             ;; terminates with null
0121+  1132             ;; pointer in D
0122+  1132             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  1132             _gets:
0124+  1132 D7            push a
0125+  1133 DA            push d
0126+  1134             _gets_loop:
0127+  1134 19 01         mov al, 1
0128+  1136 05 03         syscall sys_io      ; receive in AH
0129+  1138 B9 00         cmp al, 0        ; check error code (AL)
0130+  113A C6 34 11      je _gets_loop      ; if no char received, retry
0131+  113D             
0132+  113D 76 1B         cmp ah, 27
0133+  113F C6 60 11      je _gets_ansi_esc
0134+  1142 76 0A         cmp ah, $0A        ; LF
0135+  1144 C6 CB 11      je _gets_end
0136+  1147 76 0D         cmp ah, $0D        ; CR
0137+  1149 C6 CB 11      je _gets_end
0138+  114C 76 5C         cmp ah, $5C        ; '\\'
0139+  114E C6 8C 11      je _gets_escape
0140+  1151               
0141+  1151 76 08         cmp ah, $08      ; check for backspace
0142+  1153 C6 5C 11      je _gets_backspace
0143+  1156             
0144+  1156 1A            mov al, ah
0145+  1157 3E            mov [d], al
0146+  1158 79            inc d
0147+  1159 0A 34 11      jmp _gets_loop
0148+  115C             _gets_backspace:
0149+  115C 7F            dec d
0150+  115D 0A 34 11      jmp _gets_loop
0151+  1160             _gets_ansi_esc:
0152+  1160 19 01         mov al, 1
0153+  1162 05 03         syscall sys_io        ; receive in AH without echo
0154+  1164 B9 00         cmp al, 0          ; check error code (AL)
0155+  1166 C6 60 11      je _gets_ansi_esc    ; if no char received, retry
0156+  1169 76 5B         cmp ah, '['
0157+  116B C7 34 11      jne _gets_loop
0158+  116E             _gets_ansi_esc_2:
0159+  116E 19 01         mov al, 1
0160+  1170 05 03         syscall sys_io          ; receive in AH without echo
0161+  1172 B9 00         cmp al, 0            ; check error code (AL)
0162+  1174 C6 6E 11      je _gets_ansi_esc_2  ; if no char received, retry
0163+  1177 76 44         cmp ah, 'D'
0164+  1179 C6 84 11      je _gets_left_arrow
0165+  117C 76 43         cmp ah, 'C'
0166+  117E C6 88 11      je _gets_right_arrow
0167+  1181 0A 34 11      jmp _gets_loop
0168+  1184             _gets_left_arrow:
0169+  1184 7F            dec d
0170+  1185 0A 34 11      jmp _gets_loop
0171+  1188             _gets_right_arrow:
0172+  1188 79            inc d
0173+  1189 0A 34 11      jmp _gets_loop
0174+  118C             _gets_escape:
0175+  118C 19 01         mov al, 1
0176+  118E 05 03         syscall sys_io      ; receive in AH
0177+  1190 B9 00         cmp al, 0        ; check error code (AL)
0178+  1192 C6 8C 11      je _gets_escape      ; if no char received, retry
0179+  1195 76 6E         cmp ah, 'n'
0180+  1197 C6 B6 11      je _gets_LF
0181+  119A 76 72         cmp ah, 'r'
0182+  119C C6 BD 11      je _gets_CR
0183+  119F 76 30         cmp ah, '0'
0184+  11A1 C6 C4 11      je _gets_NULL
0185+  11A4 76 5C         cmp ah, $5C  ; '\'
0186+  11A6 C6 AF 11      je _gets_slash
0187+  11A9 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  11AA 3E            mov [d], al
0189+  11AB 79            inc d
0190+  11AC 0A 34 11      jmp _gets_loop
0191+  11AF             _gets_slash:
0192+  11AF 19 5C         mov al, $5C
0193+  11B1 3E            mov [d], al
0194+  11B2 79            inc d
0195+  11B3 0A 34 11      jmp _gets_loop
0196+  11B6             _gets_LF:
0197+  11B6 19 0A         mov al, $0A
0198+  11B8 3E            mov [d], al
0199+  11B9 79            inc d
0200+  11BA 0A 34 11      jmp _gets_loop
0201+  11BD             _gets_CR:
0202+  11BD 19 0D         mov al, $0D
0203+  11BF 3E            mov [d], al
0204+  11C0 79            inc d
0205+  11C1 0A 34 11      jmp _gets_loop
0206+  11C4             _gets_NULL:
0207+  11C4 19 00         mov al, $00
0208+  11C6 3E            mov [d], al
0209+  11C7 79            inc d
0210+  11C8 0A 34 11      jmp _gets_loop
0211+  11CB             _gets_end:
0212+  11CB 19 00         mov al, 0
0213+  11CD 3E            mov [d], al        ; terminate string
0214+  11CE E7            pop d
0215+  11CF E4            pop a
0216+  11D0 09            ret
0217+  11D1             
0218+  11D1             
0219+  11D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  11D1             ;; INPUT TEXT
0221+  11D1             ;; terminated with CTRL+D
0222+  11D1             ;; pointer in D
0223+  11D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  11D1             _gettxt:
0225+  11D1 D7            push a
0226+  11D2 DA            push d
0227+  11D3             _gettxt_loop:
0228+  11D3 19 01         mov al, 1
0229+  11D5 05 03         syscall sys_io      ; receive in AH
0230+  11D7 B9 00         cmp al, 0        ; check error code (AL)
0231+  11D9 C6 D3 11      je _gettxt_loop    ; if no char received, retry
0232+  11DC 76 04         cmp ah, 4      ; EOT
0233+  11DE C6 1C 12      je _gettxt_end
0234+  11E1 76 08         cmp ah, $08      ; check for backspace
0235+  11E3 C6 18 12      je _gettxt_backspace
0236+  11E6 76 5C         cmp ah, $5C        ; '\'
0237+  11E8 C6 F1 11      je _gettxt_escape
0238+  11EB 1A            mov al, ah
0239+  11EC 3E            mov [d], al
0240+  11ED 79            inc d
0241+  11EE 0A D3 11      jmp _gettxt_loop
0242+  11F1             _gettxt_escape:
0243+  11F1 19 01         mov al, 1
0244+  11F3 05 03         syscall sys_io      ; receive in AH
0245+  11F5 B9 00         cmp al, 0        ; check error code (AL)
0246+  11F7 C6 F1 11      je _gettxt_escape    ; if no char received, retry
0247+  11FA 76 6E         cmp ah, 'n'
0248+  11FC C6 0A 12      je _gettxt_LF
0249+  11FF 76 72         cmp ah, 'r'
0250+  1201 C6 11 12      je _gettxt_CR
0251+  1204 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1205 3E            mov [d], al
0253+  1206 79            inc d
0254+  1207 0A D3 11      jmp _gettxt_loop
0255+  120A             _gettxt_LF:
0256+  120A 19 0A         mov al, $0A
0257+  120C 3E            mov [d], al
0258+  120D 79            inc d
0259+  120E 0A D3 11      jmp _gettxt_loop
0260+  1211             _gettxt_CR:
0261+  1211 19 0D         mov al, $0D
0262+  1213 3E            mov [d], al
0263+  1214 79            inc d
0264+  1215 0A D3 11      jmp _gettxt_loop
0265+  1218             _gettxt_backspace:
0266+  1218 7F            dec d
0267+  1219 0A D3 11      jmp _gettxt_loop
0268+  121C             _gettxt_end:
0269+  121C 19 00         mov al, 0
0270+  121E 3E            mov [d], al        ; terminate string
0271+  121F E7            pop d
0272+  1220 E4            pop a
0273+  1221 09            ret
0274+  1222             
0275+  1222             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  1222             ; PRINT NEW LINE
0277+  1222             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  1222             printnl:
0279+  1222 D7            push a
0280+  1223 10 00 0A      mov a, $0A00
0281+  1226 05 03         syscall sys_io
0282+  1228 10 00 0D      mov a, $0D00
0283+  122B 05 03         syscall sys_io
0284+  122D E4            pop a
0285+  122E 09            ret
0286+  122F             
0287+  122F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  122F             ; _strtoint
0289+  122F             ; 4 digit hex string number in d
0290+  122F             ; integer returned in A
0291+  122F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  122F             _strtointx:
0293+  122F D8            push b
0294+  1230 32            mov bl, [d]
0295+  1231 37            mov bh, bl
0296+  1232 33 01 00      mov bl, [d + 1]
0297+  1235 07 E8 10      call _atoi        ; convert to int in AL
0298+  1238 23            mov ah, al        ; move to AH
0299+  1239 33 02 00      mov bl, [d + 2]
0300+  123C 37            mov bh, bl
0301+  123D 33 03 00      mov bl, [d + 3]
0302+  1240 07 E8 10      call _atoi        ; convert to int in AL
0303+  1243 E5            pop b
0304+  1244 09            ret
0305+  1245             
0306+  1245             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  1245             ; _strtoint
0308+  1245             ; 5 digit base10 string number in d
0309+  1245             ; integer returned in A
0310+  1245             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  1245             _strtoint:
0312+  1245 E2            push si
0313+  1246 D8            push b
0314+  1247 D9            push c
0315+  1248 DA            push d
0316+  1249 07 8A 10      call _strlen      ; get string length in C
0317+  124C 7E            dec c
0318+  124D FD 4E         mov si, d
0319+  124F 12            mov a, c
0320+  1250 FD 99         shl a
0321+  1252 3B C1 13      mov d, table_power
0322+  1255 59            add d, a
0323+  1256 38 00 00      mov c, 0
0324+  1259             _strtoint_L0:
0325+  1259 F6            lodsb      ; load ASCII to al
0326+  125A B9 00         cmp al, 0
0327+  125C C6 6F 12      je _strtoint_end
0328+  125F 6F 30         sub al, $30    ; make into integer
0329+  1261 22 00         mov ah, 0
0330+  1263 2A            mov b, [d]
0331+  1264 AC            mul a, b      ; result in B since it fits in 16bits
0332+  1265 11            mov a, b
0333+  1266 28            mov b, c
0334+  1267 54            add a, b
0335+  1268 39            mov c, a
0336+  1269 63 02 00      sub d, 2
0337+  126C 0A 59 12      jmp _strtoint_L0
0338+  126F             _strtoint_end:
0339+  126F 12            mov a, c
0340+  1270 E7            pop d
0341+  1271 E6            pop c
0342+  1272 E5            pop b
0343+  1273 EF            pop si
0344+  1274 09            ret
0345+  1275             
0346+  1275             
0347+  1275             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  1275             ; PRINT NULL TERMINATED STRING
0349+  1275             ; pointer in D
0350+  1275             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  1275             _puts:
0352+  1275 D7            push a
0353+  1276 DA            push d
0354+  1277             _puts_L1:
0355+  1277 1E            mov al, [d]
0356+  1278 B9 00         cmp al, 0
0357+  127A C6 86 12      jz _puts_END
0358+  127D 23            mov ah, al
0359+  127E 19 00         mov al, 0
0360+  1280 05 03         syscall sys_io
0361+  1282 79            inc d
0362+  1283 0A 77 12      jmp _puts_L1
0363+  1286             _puts_END:
0364+  1286 E7            pop d
0365+  1287 E4            pop a
0366+  1288 09            ret
0367+  1289             
0368+  1289             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1289             ; PRINT N SIZE STRING
0370+  1289             ; pointer in D
0371+  1289             ; size in C
0372+  1289             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1289             _putsn:
0374+  1289 DB            push al
0375+  128A DA            push d
0376+  128B D9            push c
0377+  128C             _putsn_L0:
0378+  128C 1E            mov al, [d]
0379+  128D 23            mov ah, al
0380+  128E 19 00         mov al, 0
0381+  1290 05 03         syscall sys_io
0382+  1292 79            inc d
0383+  1293 7E            dec c  
0384+  1294 C2 00 00      cmp c, 0
0385+  1297 C7 8C 12      jne _putsn_L0
0386+  129A             _putsn_end:
0387+  129A E6            pop c
0388+  129B E7            pop d
0389+  129C E8            pop al
0390+  129D 09            ret
0391+  129E             
0392+  129E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  129E             ; print 16bit decimal number
0394+  129E             ; input number in A
0395+  129E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  129E             print_u16d:
0397+  129E D7            push a
0398+  129F D8            push b
0399+  12A0 26 10 27      mov b, 10000
0400+  12A3 AE            div a, b      ; get 10000's coeff.
0401+  12A4 07 C6 12      call print_number
0402+  12A7 11            mov a, b
0403+  12A8 26 E8 03      mov b, 1000
0404+  12AB AE            div a, b      ; get 1000's coeff.
0405+  12AC 07 C6 12      call print_number
0406+  12AF 11            mov a, b
0407+  12B0 26 64 00      mov b, 100
0408+  12B3 AE            div a, b
0409+  12B4 07 C6 12      call print_number
0410+  12B7 11            mov a, b
0411+  12B8 26 0A 00      mov b, 10
0412+  12BB AE            div a, b
0413+  12BC 07 C6 12      call print_number
0414+  12BF 1B            mov al, bl      ; 1's coeff in bl
0415+  12C0 07 C6 12      call print_number
0416+  12C3 E5            pop b
0417+  12C4 E4            pop a
0418+  12C5 09            ret
0419+  12C6             
0420+  12C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  12C6             ; print AL
0422+  12C6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  12C6             print_number:
0424+  12C6 6A 30         add al, $30
0425+  12C8 23            mov ah, al
0426+  12C9 07 2B 11      call _putchar
0427+  12CC 09            ret
0428+  12CD             
0429+  12CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  12CD             ; PRINT 16BIT HEX INTEGER
0431+  12CD             ; integer value in reg B
0432+  12CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  12CD             print_u16x:
0434+  12CD D7            push a
0435+  12CE D8            push b
0436+  12CF DD            push bl
0437+  12D0 30            mov bl, bh
0438+  12D1 07 F9 10      call _itoa        ; convert bh to char in A
0439+  12D4 2F            mov bl, al        ; save al
0440+  12D5 19 00         mov al, 0
0441+  12D7 05 03         syscall sys_io        ; display AH
0442+  12D9 24            mov ah, bl        ; retrieve al
0443+  12DA 19 00         mov al, 0
0444+  12DC 05 03         syscall sys_io        ; display AL
0445+  12DE             
0446+  12DE EA            pop bl
0447+  12DF 07 F9 10      call _itoa        ; convert bh to char in A
0448+  12E2 2F            mov bl, al        ; save al
0449+  12E3 19 00         mov al, 0
0450+  12E5 05 03         syscall sys_io        ; display AH
0451+  12E7 24            mov ah, bl        ; retrieve al
0452+  12E8 19 00         mov al, 0
0453+  12EA 05 03         syscall sys_io        ; display AL
0454+  12EC             
0455+  12EC E5            pop b
0456+  12ED E4            pop a
0457+  12EE 09            ret
0458+  12EF             
0459+  12EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  12EF             ; INPUT 16BIT HEX INTEGER
0461+  12EF             ; read 16bit integer into A
0462+  12EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  12EF             scan_u16x:
0464+  12EF F8 10 00      enter 16
0465+  12F2 D8            push b
0466+  12F3 DA            push d
0467+  12F4             
0468+  12F4 FA F1 FF      lea d, [bp + -15]
0469+  12F7 07 32 11      call _gets        ; get number
0470+  12FA             
0471+  12FA 32            mov bl, [d]
0472+  12FB 37            mov bh, bl
0473+  12FC 33 01 00      mov bl, [d + 1]
0474+  12FF 07 E8 10      call _atoi        ; convert to int in AL
0475+  1302 23            mov ah, al        ; move to AH
0476+  1303             
0477+  1303 33 02 00      mov bl, [d + 2]
0478+  1306 37            mov bh, bl
0479+  1307 33 03 00      mov bl, [d + 3]
0480+  130A 07 E8 10      call _atoi        ; convert to int in AL
0481+  130D             
0482+  130D E7            pop d
0483+  130E E5            pop b
0484+  130F F9            leave
0485+  1310 09            ret
0486+  1311             
0487+  1311             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  1311             ; PRINT 8bit HEX INTEGER
0489+  1311             ; integer value in reg bl
0490+  1311             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  1311             print_u8x:
0492+  1311 D7            push a
0493+  1312 DD            push bl
0494+  1313             
0495+  1313 07 F9 10      call _itoa        ; convert bl to char in A
0496+  1316 2F            mov bl, al        ; save al
0497+  1317 19 00         mov al, 0
0498+  1319 05 03         syscall sys_io        ; display AH
0499+  131B 24            mov ah, bl        ; retrieve al
0500+  131C 19 00         mov al, 0
0501+  131E 05 03         syscall sys_io        ; display AL
0502+  1320             
0503+  1320 EA            pop bl
0504+  1321 E4            pop a
0505+  1322 09            ret
0506+  1323             
0507+  1323             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  1323             ; print 8bit decimal unsigned number
0509+  1323             ; input number in AL
0510+  1323             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  1323             print_u8d:
0512+  1323 D7            push a
0513+  1324 D8            push b
0514+  1325             
0515+  1325 22 00         mov ah, 0
0516+  1327 26 64 00      mov b, 100
0517+  132A AE            div a, b
0518+  132B D8            push b      ; save remainder
0519+  132C B9 00         cmp al, 0
0520+  132E C6 38 13      je skip100
0521+  1331 6A 30         add al, $30
0522+  1333 23            mov ah, al
0523+  1334 19 00         mov al, 0
0524+  1336 05 03         syscall sys_io  ; print coeff
0525+  1338             skip100:
0526+  1338 E4            pop a
0527+  1339 22 00         mov ah, 0
0528+  133B 26 0A 00      mov b, 10
0529+  133E AE            div a, b
0530+  133F D8            push b      ; save remainder
0531+  1340 B9 00         cmp al, 0
0532+  1342 C6 4C 13      je skip10
0533+  1345 6A 30         add al, $30
0534+  1347 23            mov ah, al
0535+  1348 19 00         mov al, 0
0536+  134A 05 03         syscall sys_io  ; print coeff
0537+  134C             skip10:
0538+  134C E4            pop a
0539+  134D 1B            mov al, bl
0540+  134E 6A 30         add al, $30
0541+  1350 23            mov ah, al
0542+  1351 19 00         mov al, 0
0543+  1353 05 03         syscall sys_io  ; print coeff
0544+  1355 E5            pop b
0545+  1356 E4            pop a
0546+  1357 09            ret
0547+  1358             
0548+  1358             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  1358             ; INPUT 8BIT HEX INTEGER
0550+  1358             ; read 8bit integer into AL
0551+  1358             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  1358             scan_u8x:
0553+  1358 F8 04 00      enter 4
0554+  135B D8            push b
0555+  135C DA            push d
0556+  135D             
0557+  135D FA FD FF      lea d, [bp + -3]
0558+  1360 07 32 11      call _gets        ; get number
0559+  1363             
0560+  1363 32            mov bl, [d]
0561+  1364 37            mov bh, bl
0562+  1365 33 01 00      mov bl, [d + 1]
0563+  1368 07 E8 10      call _atoi        ; convert to int in AL
0564+  136B             
0565+  136B E7            pop d
0566+  136C E5            pop b
0567+  136D F9            leave
0568+  136E 09            ret
0569+  136F             
0570+  136F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  136F             ; input decimal number
0572+  136F             ; result in A
0573+  136F             ; 655'\0'
0574+  136F             ; low--------high
0575+  136F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  136F             scan_u16d:
0577+  136F F8 08 00      enter 8
0578+  1372 E2            push si
0579+  1373 D8            push b
0580+  1374 D9            push c
0581+  1375 DA            push d
0582+  1376 FA F9 FF      lea d, [bp +- 7]
0583+  1379 07 32 11      call _gets
0584+  137C 07 8A 10      call _strlen      ; get string length in C
0585+  137F 7E            dec c
0586+  1380 FD 4E         mov si, d
0587+  1382 12            mov a, c
0588+  1383 FD 99         shl a
0589+  1385 3B C1 13      mov d, table_power
0590+  1388 59            add d, a
0591+  1389 38 00 00      mov c, 0
0592+  138C             mul_loop:
0593+  138C F6            lodsb      ; load ASCII to al
0594+  138D B9 00         cmp al, 0
0595+  138F C6 A2 13      je mul_exit
0596+  1392 6F 30         sub al, $30    ; make into integer
0597+  1394 22 00         mov ah, 0
0598+  1396 2A            mov b, [d]
0599+  1397 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1398 11            mov a, b
0601+  1399 28            mov b, c
0602+  139A 54            add a, b
0603+  139B 39            mov c, a
0604+  139C 63 02 00      sub d, 2
0605+  139F 0A 8C 13      jmp mul_loop
0606+  13A2             mul_exit:
0607+  13A2 12            mov a, c
0608+  13A3 E7            pop d
0609+  13A4 E6            pop c
0610+  13A5 E5            pop b
0611+  13A6 EF            pop si
0612+  13A7 F9            leave
0613+  13A8 09            ret
0614+  13A9             
0615+  13A9             
0616+  13A9 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  13AD 34 35 36 37 
0616+  13B1 38 39 41 42 
0616+  13B5 43 44 45 46 
0617+  13B9 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  13BD 1B 5B 48 00 
0618+  13C1             
0619+  13C1             table_power:
0620+  13C1 01 00         .dw 1
0621+  13C3 0A 00         .dw 10
0622+  13C5 64 00         .dw 100
0623+  13C7 E8 03         .dw 1000
0624+  13C9 10 27         .dw 100002279   13CB             ; --- END INLINE ASM BLOCK
2280   13CB             
2281   13CB F9            leave
2282   13CC 09            ret
2283   13CD             
2284   13CD             show:
2285   13CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2286   13D0             ; $i 
2287   13D0             ; $j 
2288   13D0 52 04 00      sub sp, 4
2289   13D3             ;; for(i = 0; i <  30     ; i++){ 
2290   13D3             _for34_init:
2291   13D3 FA FF FF      lea d, [bp + -1] ; $i
2292   13D6 DA            push d
2293   13D7 26 00 00      mov b, $0
2294   13DA E7            pop d
2295   13DB FD 43         mov [d], b
2296   13DD             _for34_cond:
2297   13DD FA FF FF      lea d, [bp + -1] ; $i
2298   13E0 2A            mov b, [d]
2299   13E1             ; START RELATIONAL
2300   13E1 D7            push a
2301   13E2 11            mov a, b
2302   13E3 26 1E 00      mov b, $1e
2303   13E6 B0            cmp a, b
2304   13E7 FD 73         slt ; < 
2305   13E9 E4            pop a
2306   13EA             ; END RELATIONAL
2307   13EA C0 00 00      cmp b, 0
2308   13ED C6 7E 14      je _for34_exit
2309   13F0             _for34_block:
2310   13F0             ;; for(j = 0; j <  40    ; j++){ 
2311   13F0             _for35_init:
2312   13F0 FA FD FF      lea d, [bp + -3] ; $j
2313   13F3 DA            push d
2314   13F4 26 00 00      mov b, $0
2315   13F7 E7            pop d
2316   13F8 FD 43         mov [d], b
2317   13FA             _for35_cond:
2318   13FA FA FD FF      lea d, [bp + -3] ; $j
2319   13FD 2A            mov b, [d]
2320   13FE             ; START RELATIONAL
2321   13FE D7            push a
2322   13FF 11            mov a, b
2323   1400 26 28 00      mov b, $28
2324   1403 B0            cmp a, b
2325   1404 FD 73         slt ; < 
2326   1406 E4            pop a
2327   1407             ; END RELATIONAL
2328   1407 C0 00 00      cmp b, 0
2329   140A C6 62 14      je _for35_exit
2330   140D             _for35_block:
2331   140D             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
2332   140D             _ternary36_cond:
2333   140D 3B C7 1B      mov d, _currState_data ; $currState
2334   1410 D7            push a
2335   1411 DA            push d
2336   1412 FA FF FF      lea d, [bp + -1] ; $i
2337   1415 2A            mov b, [d]
2338   1416 E7            pop d
2339   1417 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2340   141B DA            push d
2341   141C FA FD FF      lea d, [bp + -3] ; $j
2342   141F 2A            mov b, [d]
2343   1420 E7            pop d
2344   1421 5A            add d, b
2345   1422 E4            pop a
2346   1423 32            mov bl, [d]
2347   1424 A7 00         mov bh, 0
2348   1426             ; START RELATIONAL
2349   1426 D7            push a
2350   1427 11            mov a, b
2351   1428 26 40 00      mov b, $40
2352   142B B0            cmp a, b
2353   142C FD 71         seq ; ==
2354   142E E4            pop a
2355   142F             ; END RELATIONAL
2356   142F C0 00 00      cmp b, 0
2357   1432 C6 44 14      je _ternary36_false
2358   1435             _ternary36_true:
2359   1435 26 FE 20      mov b, __s5 ; "@ "
2360   1438 FD AB         swp b
2361   143A D8            push b
2362   143B 07 BC 08      call printf
2363   143E 51 02 00      add sp, 2
2364   1441 0A 50 14      jmp _ternary36_exit
2365   1444             _ternary36_false:
2366   1444 26 01 21      mov b, __s6 ; ". "
2367   1447 FD AB         swp b
2368   1449 D8            push b
2369   144A 07 BC 08      call printf
2370   144D 51 02 00      add sp, 2
2371   1450             _ternary36_exit:
2372   1450             _for35_update:
2373   1450 FA FD FF      lea d, [bp + -3] ; $j
2374   1453 2A            mov b, [d]
2375   1454 FD 79         mov g, b
2376   1456 FD 77         inc b
2377   1458 FA FD FF      lea d, [bp + -3] ; $j
2378   145B FD 43         mov [d], b
2379   145D FD 27         mov b, g
2380   145F 0A FA 13      jmp _for35_cond
2381   1462             _for35_exit:
2382   1462             ;; putchar(10); 
2383   1462 26 0A 00      mov b, $a
2384   1465 DD            push bl
2385   1466 07 AE 0E      call putchar
2386   1469 51 01 00      add sp, 1
2387   146C             _for34_update:
2388   146C FA FF FF      lea d, [bp + -1] ; $i
2389   146F 2A            mov b, [d]
2390   1470 FD 79         mov g, b
2391   1472 FD 77         inc b
2392   1474 FA FF FF      lea d, [bp + -1] ; $i
2393   1477 FD 43         mov [d], b
2394   1479 FD 27         mov b, g
2395   147B 0A DD 13      jmp _for34_cond
2396   147E             _for34_exit:
2397   147E F9            leave
2398   147F 09            ret
2399   1480             
2400   1480             alive:
2401   1480 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2402   1483             ;; if(currState[i][j] == '@') return 1; 
2403   1483             _if37_cond:
2404   1483 3B C7 1B      mov d, _currState_data ; $currState
2405   1486 D7            push a
2406   1487 DA            push d
2407   1488 FA 07 00      lea d, [bp + 7] ; $i
2408   148B 2A            mov b, [d]
2409   148C E7            pop d
2410   148D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2411   1491 DA            push d
2412   1492 FA 05 00      lea d, [bp + 5] ; $j
2413   1495 2A            mov b, [d]
2414   1496 E7            pop d
2415   1497 5A            add d, b
2416   1498 E4            pop a
2417   1499 32            mov bl, [d]
2418   149A A7 00         mov bh, 0
2419   149C             ; START RELATIONAL
2420   149C D7            push a
2421   149D 11            mov a, b
2422   149E 26 40 00      mov b, $40
2423   14A1 B0            cmp a, b
2424   14A2 FD 71         seq ; ==
2425   14A4 E4            pop a
2426   14A5             ; END RELATIONAL
2427   14A5 C0 00 00      cmp b, 0
2428   14A8 C6 B3 14      je _if37_else
2429   14AB             _if37_true:
2430   14AB             ;; return 1; 
2431   14AB 26 01 00      mov b, $1
2432   14AE F9            leave
2433   14AF 09            ret
2434   14B0 0A B8 14      jmp _if37_exit
2435   14B3             _if37_else:
2436   14B3             ;; return 0; 
2437   14B3 26 00 00      mov b, $0
2438   14B6 F9            leave
2439   14B7 09            ret
2440   14B8             _if37_exit:
2441   14B8 F9            leave
2442   14B9 09            ret
2443   14BA             
2444   14BA             neighbours:
2445   14BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2446   14BD             ; $count 
2447   14BD 52 02 00      sub sp, 2
2448   14C0             ;; count = 0; 
2449   14C0 FA FF FF      lea d, [bp + -1] ; $count
2450   14C3 DA            push d
2451   14C4 26 00 00      mov b, $0
2452   14C7 E7            pop d
2453   14C8 FD 43         mov [d], b
2454   14CA             ;; if(currState[i+-1][j] == '@')			count++; 
2455   14CA             _if38_cond:
2456   14CA 3B C7 1B      mov d, _currState_data ; $currState
2457   14CD D7            push a
2458   14CE DA            push d
2459   14CF FA 07 00      lea d, [bp + 7] ; $i
2460   14D2 2A            mov b, [d]
2461   14D3             ; START TERMS
2462   14D3 D7            push a
2463   14D4 11            mov a, b
2464   14D5 26 01 00      mov b, $1
2465   14D8 FD 97         neg b
2466   14DA 54            add a, b
2467   14DB 27            mov b, a
2468   14DC E4            pop a
2469   14DD             ; END TERMS
2470   14DD E7            pop d
2471   14DE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2472   14E2 DA            push d
2473   14E3 FA 05 00      lea d, [bp + 5] ; $j
2474   14E6 2A            mov b, [d]
2475   14E7 E7            pop d
2476   14E8 5A            add d, b
2477   14E9 E4            pop a
2478   14EA 32            mov bl, [d]
2479   14EB A7 00         mov bh, 0
2480   14ED             ; START RELATIONAL
2481   14ED D7            push a
2482   14EE 11            mov a, b
2483   14EF 26 40 00      mov b, $40
2484   14F2 B0            cmp a, b
2485   14F3 FD 71         seq ; ==
2486   14F5 E4            pop a
2487   14F6             ; END RELATIONAL
2488   14F6 C0 00 00      cmp b, 0
2489   14F9 C6 0E 15      je _if38_exit
2490   14FC             _if38_true:
2491   14FC             ;; count++; 
2492   14FC FA FF FF      lea d, [bp + -1] ; $count
2493   14FF 2A            mov b, [d]
2494   1500 FD 79         mov g, b
2495   1502 FD 77         inc b
2496   1504 FA FF FF      lea d, [bp + -1] ; $count
2497   1507 FD 43         mov [d], b
2498   1509 FD 27         mov b, g
2499   150B 0A 0E 15      jmp _if38_exit
2500   150E             _if38_exit:
2501   150E             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
2502   150E             _if39_cond:
2503   150E 3B C7 1B      mov d, _currState_data ; $currState
2504   1511 D7            push a
2505   1512 DA            push d
2506   1513 FA 07 00      lea d, [bp + 7] ; $i
2507   1516 2A            mov b, [d]
2508   1517             ; START TERMS
2509   1517 D7            push a
2510   1518 11            mov a, b
2511   1519 26 01 00      mov b, $1
2512   151C FD 97         neg b
2513   151E 54            add a, b
2514   151F 27            mov b, a
2515   1520 E4            pop a
2516   1521             ; END TERMS
2517   1521 E7            pop d
2518   1522 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2519   1526 DA            push d
2520   1527 FA 05 00      lea d, [bp + 5] ; $j
2521   152A 2A            mov b, [d]
2522   152B             ; START TERMS
2523   152B D7            push a
2524   152C 11            mov a, b
2525   152D 26 01 00      mov b, $1
2526   1530 FD 97         neg b
2527   1532 54            add a, b
2528   1533 27            mov b, a
2529   1534 E4            pop a
2530   1535             ; END TERMS
2531   1535 E7            pop d
2532   1536 5A            add d, b
2533   1537 E4            pop a
2534   1538 32            mov bl, [d]
2535   1539 A7 00         mov bh, 0
2536   153B             ; START RELATIONAL
2537   153B D7            push a
2538   153C 11            mov a, b
2539   153D 26 40 00      mov b, $40
2540   1540 B0            cmp a, b
2541   1541 FD 71         seq ; ==
2542   1543 E4            pop a
2543   1544             ; END RELATIONAL
2544   1544 C0 00 00      cmp b, 0
2545   1547 C6 5C 15      je _if39_exit
2546   154A             _if39_true:
2547   154A             ;; count++; 
2548   154A FA FF FF      lea d, [bp + -1] ; $count
2549   154D 2A            mov b, [d]
2550   154E FD 79         mov g, b
2551   1550 FD 77         inc b
2552   1552 FA FF FF      lea d, [bp + -1] ; $count
2553   1555 FD 43         mov [d], b
2554   1557 FD 27         mov b, g
2555   1559 0A 5C 15      jmp _if39_exit
2556   155C             _if39_exit:
2557   155C             ;; if(currState[i+-1][j+1] == '@') 	count++; 
2558   155C             _if40_cond:
2559   155C 3B C7 1B      mov d, _currState_data ; $currState
2560   155F D7            push a
2561   1560 DA            push d
2562   1561 FA 07 00      lea d, [bp + 7] ; $i
2563   1564 2A            mov b, [d]
2564   1565             ; START TERMS
2565   1565 D7            push a
2566   1566 11            mov a, b
2567   1567 26 01 00      mov b, $1
2568   156A FD 97         neg b
2569   156C 54            add a, b
2570   156D 27            mov b, a
2571   156E E4            pop a
2572   156F             ; END TERMS
2573   156F E7            pop d
2574   1570 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2575   1574 DA            push d
2576   1575 FA 05 00      lea d, [bp + 5] ; $j
2577   1578 2A            mov b, [d]
2578   1579             ; START TERMS
2579   1579 D7            push a
2580   157A 11            mov a, b
2581   157B 26 01 00      mov b, $1
2582   157E 54            add a, b
2583   157F 27            mov b, a
2584   1580 E4            pop a
2585   1581             ; END TERMS
2586   1581 E7            pop d
2587   1582 5A            add d, b
2588   1583 E4            pop a
2589   1584 32            mov bl, [d]
2590   1585 A7 00         mov bh, 0
2591   1587             ; START RELATIONAL
2592   1587 D7            push a
2593   1588 11            mov a, b
2594   1589 26 40 00      mov b, $40
2595   158C B0            cmp a, b
2596   158D FD 71         seq ; ==
2597   158F E4            pop a
2598   1590             ; END RELATIONAL
2599   1590 C0 00 00      cmp b, 0
2600   1593 C6 A8 15      je _if40_exit
2601   1596             _if40_true:
2602   1596             ;; count++; 
2603   1596 FA FF FF      lea d, [bp + -1] ; $count
2604   1599 2A            mov b, [d]
2605   159A FD 79         mov g, b
2606   159C FD 77         inc b
2607   159E FA FF FF      lea d, [bp + -1] ; $count
2608   15A1 FD 43         mov [d], b
2609   15A3 FD 27         mov b, g
2610   15A5 0A A8 15      jmp _if40_exit
2611   15A8             _if40_exit:
2612   15A8             ;; if(currState[i][j+-1] == '@') 		count++; 
2613   15A8             _if41_cond:
2614   15A8 3B C7 1B      mov d, _currState_data ; $currState
2615   15AB D7            push a
2616   15AC DA            push d
2617   15AD FA 07 00      lea d, [bp + 7] ; $i
2618   15B0 2A            mov b, [d]
2619   15B1 E7            pop d
2620   15B2 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2621   15B6 DA            push d
2622   15B7 FA 05 00      lea d, [bp + 5] ; $j
2623   15BA 2A            mov b, [d]
2624   15BB             ; START TERMS
2625   15BB D7            push a
2626   15BC 11            mov a, b
2627   15BD 26 01 00      mov b, $1
2628   15C0 FD 97         neg b
2629   15C2 54            add a, b
2630   15C3 27            mov b, a
2631   15C4 E4            pop a
2632   15C5             ; END TERMS
2633   15C5 E7            pop d
2634   15C6 5A            add d, b
2635   15C7 E4            pop a
2636   15C8 32            mov bl, [d]
2637   15C9 A7 00         mov bh, 0
2638   15CB             ; START RELATIONAL
2639   15CB D7            push a
2640   15CC 11            mov a, b
2641   15CD 26 40 00      mov b, $40
2642   15D0 B0            cmp a, b
2643   15D1 FD 71         seq ; ==
2644   15D3 E4            pop a
2645   15D4             ; END RELATIONAL
2646   15D4 C0 00 00      cmp b, 0
2647   15D7 C6 EC 15      je _if41_exit
2648   15DA             _if41_true:
2649   15DA             ;; count++; 
2650   15DA FA FF FF      lea d, [bp + -1] ; $count
2651   15DD 2A            mov b, [d]
2652   15DE FD 79         mov g, b
2653   15E0 FD 77         inc b
2654   15E2 FA FF FF      lea d, [bp + -1] ; $count
2655   15E5 FD 43         mov [d], b
2656   15E7 FD 27         mov b, g
2657   15E9 0A EC 15      jmp _if41_exit
2658   15EC             _if41_exit:
2659   15EC             ;; if(currState[i][j+1] == '@') 			count++; 
2660   15EC             _if42_cond:
2661   15EC 3B C7 1B      mov d, _currState_data ; $currState
2662   15EF D7            push a
2663   15F0 DA            push d
2664   15F1 FA 07 00      lea d, [bp + 7] ; $i
2665   15F4 2A            mov b, [d]
2666   15F5 E7            pop d
2667   15F6 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2668   15FA DA            push d
2669   15FB FA 05 00      lea d, [bp + 5] ; $j
2670   15FE 2A            mov b, [d]
2671   15FF             ; START TERMS
2672   15FF D7            push a
2673   1600 11            mov a, b
2674   1601 26 01 00      mov b, $1
2675   1604 54            add a, b
2676   1605 27            mov b, a
2677   1606 E4            pop a
2678   1607             ; END TERMS
2679   1607 E7            pop d
2680   1608 5A            add d, b
2681   1609 E4            pop a
2682   160A 32            mov bl, [d]
2683   160B A7 00         mov bh, 0
2684   160D             ; START RELATIONAL
2685   160D D7            push a
2686   160E 11            mov a, b
2687   160F 26 40 00      mov b, $40
2688   1612 B0            cmp a, b
2689   1613 FD 71         seq ; ==
2690   1615 E4            pop a
2691   1616             ; END RELATIONAL
2692   1616 C0 00 00      cmp b, 0
2693   1619 C6 2E 16      je _if42_exit
2694   161C             _if42_true:
2695   161C             ;; count++; 
2696   161C FA FF FF      lea d, [bp + -1] ; $count
2697   161F 2A            mov b, [d]
2698   1620 FD 79         mov g, b
2699   1622 FD 77         inc b
2700   1624 FA FF FF      lea d, [bp + -1] ; $count
2701   1627 FD 43         mov [d], b
2702   1629 FD 27         mov b, g
2703   162B 0A 2E 16      jmp _if42_exit
2704   162E             _if42_exit:
2705   162E             ;; if(currState[i+1][j+-1] == '@') 	count++; 
2706   162E             _if43_cond:
2707   162E 3B C7 1B      mov d, _currState_data ; $currState
2708   1631 D7            push a
2709   1632 DA            push d
2710   1633 FA 07 00      lea d, [bp + 7] ; $i
2711   1636 2A            mov b, [d]
2712   1637             ; START TERMS
2713   1637 D7            push a
2714   1638 11            mov a, b
2715   1639 26 01 00      mov b, $1
2716   163C 54            add a, b
2717   163D 27            mov b, a
2718   163E E4            pop a
2719   163F             ; END TERMS
2720   163F E7            pop d
2721   1640 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2722   1644 DA            push d
2723   1645 FA 05 00      lea d, [bp + 5] ; $j
2724   1648 2A            mov b, [d]
2725   1649             ; START TERMS
2726   1649 D7            push a
2727   164A 11            mov a, b
2728   164B 26 01 00      mov b, $1
2729   164E FD 97         neg b
2730   1650 54            add a, b
2731   1651 27            mov b, a
2732   1652 E4            pop a
2733   1653             ; END TERMS
2734   1653 E7            pop d
2735   1654 5A            add d, b
2736   1655 E4            pop a
2737   1656 32            mov bl, [d]
2738   1657 A7 00         mov bh, 0
2739   1659             ; START RELATIONAL
2740   1659 D7            push a
2741   165A 11            mov a, b
2742   165B 26 40 00      mov b, $40
2743   165E B0            cmp a, b
2744   165F FD 71         seq ; ==
2745   1661 E4            pop a
2746   1662             ; END RELATIONAL
2747   1662 C0 00 00      cmp b, 0
2748   1665 C6 7A 16      je _if43_exit
2749   1668             _if43_true:
2750   1668             ;; count++; 
2751   1668 FA FF FF      lea d, [bp + -1] ; $count
2752   166B 2A            mov b, [d]
2753   166C FD 79         mov g, b
2754   166E FD 77         inc b
2755   1670 FA FF FF      lea d, [bp + -1] ; $count
2756   1673 FD 43         mov [d], b
2757   1675 FD 27         mov b, g
2758   1677 0A 7A 16      jmp _if43_exit
2759   167A             _if43_exit:
2760   167A             ;; if(currState[i+1][j] == '@') 			count++; 
2761   167A             _if44_cond:
2762   167A 3B C7 1B      mov d, _currState_data ; $currState
2763   167D D7            push a
2764   167E DA            push d
2765   167F FA 07 00      lea d, [bp + 7] ; $i
2766   1682 2A            mov b, [d]
2767   1683             ; START TERMS
2768   1683 D7            push a
2769   1684 11            mov a, b
2770   1685 26 01 00      mov b, $1
2771   1688 54            add a, b
2772   1689 27            mov b, a
2773   168A E4            pop a
2774   168B             ; END TERMS
2775   168B E7            pop d
2776   168C FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2777   1690 DA            push d
2778   1691 FA 05 00      lea d, [bp + 5] ; $j
2779   1694 2A            mov b, [d]
2780   1695 E7            pop d
2781   1696 5A            add d, b
2782   1697 E4            pop a
2783   1698 32            mov bl, [d]
2784   1699 A7 00         mov bh, 0
2785   169B             ; START RELATIONAL
2786   169B D7            push a
2787   169C 11            mov a, b
2788   169D 26 40 00      mov b, $40
2789   16A0 B0            cmp a, b
2790   16A1 FD 71         seq ; ==
2791   16A3 E4            pop a
2792   16A4             ; END RELATIONAL
2793   16A4 C0 00 00      cmp b, 0
2794   16A7 C6 BC 16      je _if44_exit
2795   16AA             _if44_true:
2796   16AA             ;; count++; 
2797   16AA FA FF FF      lea d, [bp + -1] ; $count
2798   16AD 2A            mov b, [d]
2799   16AE FD 79         mov g, b
2800   16B0 FD 77         inc b
2801   16B2 FA FF FF      lea d, [bp + -1] ; $count
2802   16B5 FD 43         mov [d], b
2803   16B7 FD 27         mov b, g
2804   16B9 0A BC 16      jmp _if44_exit
2805   16BC             _if44_exit:
2806   16BC             ;; if(currState[i+1][j+1] == '@') 		count++; 
2807   16BC             _if45_cond:
2808   16BC 3B C7 1B      mov d, _currState_data ; $currState
2809   16BF D7            push a
2810   16C0 DA            push d
2811   16C1 FA 07 00      lea d, [bp + 7] ; $i
2812   16C4 2A            mov b, [d]
2813   16C5             ; START TERMS
2814   16C5 D7            push a
2815   16C6 11            mov a, b
2816   16C7 26 01 00      mov b, $1
2817   16CA 54            add a, b
2818   16CB 27            mov b, a
2819   16CC E4            pop a
2820   16CD             ; END TERMS
2821   16CD E7            pop d
2822   16CE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2823   16D2 DA            push d
2824   16D3 FA 05 00      lea d, [bp + 5] ; $j
2825   16D6 2A            mov b, [d]
2826   16D7             ; START TERMS
2827   16D7 D7            push a
2828   16D8 11            mov a, b
2829   16D9 26 01 00      mov b, $1
2830   16DC 54            add a, b
2831   16DD 27            mov b, a
2832   16DE E4            pop a
2833   16DF             ; END TERMS
2834   16DF E7            pop d
2835   16E0 5A            add d, b
2836   16E1 E4            pop a
2837   16E2 32            mov bl, [d]
2838   16E3 A7 00         mov bh, 0
2839   16E5             ; START RELATIONAL
2840   16E5 D7            push a
2841   16E6 11            mov a, b
2842   16E7 26 40 00      mov b, $40
2843   16EA B0            cmp a, b
2844   16EB FD 71         seq ; ==
2845   16ED E4            pop a
2846   16EE             ; END RELATIONAL
2847   16EE C0 00 00      cmp b, 0
2848   16F1 C6 06 17      je _if45_exit
2849   16F4             _if45_true:
2850   16F4             ;; count++; 
2851   16F4 FA FF FF      lea d, [bp + -1] ; $count
2852   16F7 2A            mov b, [d]
2853   16F8 FD 79         mov g, b
2854   16FA FD 77         inc b
2855   16FC FA FF FF      lea d, [bp + -1] ; $count
2856   16FF FD 43         mov [d], b
2857   1701 FD 27         mov b, g
2858   1703 0A 06 17      jmp _if45_exit
2859   1706             _if45_exit:
2860   1706             ;; return count; 
2861   1706 FA FF FF      lea d, [bp + -1] ; $count
2862   1709 2A            mov b, [d]
2863   170A F9            leave
2864   170B 09            ret
2865   170C             ; --- END TEXT BLOCK
2866   170C             
2867   170C             ; --- BEGIN DATA BLOCK
2868   170C             _clear_data: 
2869   170C 1B 5B 32 4A .db 27,$5b,$32,$4a,27,$5b,$48,0,
2869   1710 1B 5B 48 00 
2870   1714 00 00 00    .fill 3, 0
2871   1717 00 00 00 00 _nextState_data: .fill 1200, 0
2871   171B 00 00 00 00 
2871   171F 00 00 00 00 
2871   1723 00 00 00 00 
2871   1727 00 00 00 00 
2871   172B 00 00 00 00 
2871   172F 00 00 00 00 
2871   1733 00 00 00 00 
2871   1737 00 00 00 00 
2871   173B 00 00 00 00 
2871   173F 00 00 00 00 
2871   1743 00 00 00 00 
2871   1747 00 00 00 00 
2871   174B 00 00 00 00 
2871   174F 00 00 00 00 
2871   1753 00 00 00 00 
2871   1757 00 00 00 00 
2871   175B 00 00 00 00 
2871   175F 00 00 00 00 
2871   1763 00 00 00 00 
2871   1767 00 00 00 00 
2871   176B 00 00 00 00 
2871   176F 00 00 00 00 
2871   1773 00 00 00 00 
2871   1777 00 00 00 00 
2871   177B 00 00 00 00 
2871   177F 00 00 00 00 
2871   1783 00 00 00 00 
2871   1787 00 00 00 00 
2871   178B 00 00 00 00 
2871   178F 00 00 00 00 
2871   1793 00 00 00 00 
2871   1797 00 00 00 00 
2871   179B 00 00 00 00 
2871   179F 00 00 00 00 
2871   17A3 00 00 00 00 
2871   17A7 00 00 00 00 
2871   17AB 00 00 00 00 
2871   17AF 00 00 00 00 
2871   17B3 00 00 00 00 
2871   17B7 00 00 00 00 
2871   17BB 00 00 00 00 
2871   17BF 00 00 00 00 
2871   17C3 00 00 00 00 
2871   17C7 00 00 00 00 
2871   17CB 00 00 00 00 
2871   17CF 00 00 00 00 
2871   17D3 00 00 00 00 
2871   17D7 00 00 00 00 
2871   17DB 00 00 00 00 
2871   17DF 00 00 00 00 
2871   17E3 00 00 00 00 
2871   17E7 00 00 00 00 
2871   17EB 00 00 00 00 
2871   17EF 00 00 00 00 
2871   17F3 00 00 00 00 
2871   17F7 00 00 00 00 
2871   17FB 00 00 00 00 
2871   17FF 00 00 00 00 
2871   1803 00 00 00 00 
2871   1807 00 00 00 00 
2871   180B 00 00 00 00 
2871   180F 00 00 00 00 
2871   1813 00 00 00 00 
2871   1817 00 00 00 00 
2871   181B 00 00 00 00 
2871   181F 00 00 00 00 
2871   1823 00 00 00 00 
2871   1827 00 00 00 00 
2871   182B 00 00 00 00 
2871   182F 00 00 00 00 
2871   1833 00 00 00 00 
2871   1837 00 00 00 00 
2871   183B 00 00 00 00 
2871   183F 00 00 00 00 
2871   1843 00 00 00 00 
2871   1847 00 00 00 00 
2871   184B 00 00 00 00 
2871   184F 00 00 00 00 
2871   1853 00 00 00 00 
2871   1857 00 00 00 00 
2871   185B 00 00 00 00 
2871   185F 00 00 00 00 
2871   1863 00 00 00 00 
2871   1867 00 00 00 00 
2871   186B 00 00 00 00 
2871   186F 00 00 00 00 
2871   1873 00 00 00 00 
2871   1877 00 00 00 00 
2871   187B 00 00 00 00 
2871   187F 00 00 00 00 
2871   1883 00 00 00 00 
2871   1887 00 00 00 00 
2871   188B 00 00 00 00 
2871   188F 00 00 00 00 
2871   1893 00 00 00 00 
2871   1897 00 00 00 00 
2871   189B 00 00 00 00 
2871   189F 00 00 00 00 
2871   18A3 00 00 00 00 
2871   18A7 00 00 00 00 
2871   18AB 00 00 00 00 
2871   18AF 00 00 00 00 
2871   18B3 00 00 00 00 
2871   18B7 00 00 00 00 
2871   18BB 00 00 00 00 
2871   18BF 00 00 00 00 
2871   18C3 00 00 00 00 
2871   18C7 00 00 00 00 
2871   18CB 00 00 00 00 
2871   18CF 00 00 00 00 
2871   18D3 00 00 00 00 
2871   18D7 00 00 00 00 
2871   18DB 00 00 00 00 
2871   18DF 00 00 00 00 
2871   18E3 00 00 00 00 
2871   18E7 00 00 00 00 
2871   18EB 00 00 00 00 
2871   18EF 00 00 00 00 
2871   18F3 00 00 00 00 
2871   18F7 00 00 00 00 
2871   18FB 00 00 00 00 
2871   18FF 00 00 00 00 
2871   1903 00 00 00 00 
2871   1907 00 00 00 00 
2871   190B 00 00 00 00 
2871   190F 00 00 00 00 
2871   1913 00 00 00 00 
2871   1917 00 00 00 00 
2871   191B 00 00 00 00 
2871   191F 00 00 00 00 
2871   1923 00 00 00 00 
2871   1927 00 00 00 00 
2871   192B 00 00 00 00 
2871   192F 00 00 00 00 
2871   1933 00 00 00 00 
2871   1937 00 00 00 00 
2871   193B 00 00 00 00 
2871   193F 00 00 00 00 
2871   1943 00 00 00 00 
2871   1947 00 00 00 00 
2871   194B 00 00 00 00 
2871   194F 00 00 00 00 
2871   1953 00 00 00 00 
2871   1957 00 00 00 00 
2871   195B 00 00 00 00 
2871   195F 00 00 00 00 
2871   1963 00 00 00 00 
2871   1967 00 00 00 00 
2871   196B 00 00 00 00 
2871   196F 00 00 00 00 
2871   1973 00 00 00 00 
2871   1977 00 00 00 00 
2871   197B 00 00 00 00 
2871   197F 00 00 00 00 
2871   1983 00 00 00 00 
2871   1987 00 00 00 00 
2871   198B 00 00 00 00 
2871   198F 00 00 00 00 
2871   1993 00 00 00 00 
2871   1997 00 00 00 00 
2871   199B 00 00 00 00 
2871   199F 00 00 00 00 
2871   19A3 00 00 00 00 
2871   19A7 00 00 00 00 
2871   19AB 00 00 00 00 
2871   19AF 00 00 00 00 
2871   19B3 00 00 00 00 
2871   19B7 00 00 00 00 
2871   19BB 00 00 00 00 
2871   19BF 00 00 00 00 
2871   19C3 00 00 00 00 
2871   19C7 00 00 00 00 
2871   19CB 00 00 00 00 
2871   19CF 00 00 00 00 
2871   19D3 00 00 00 00 
2871   19D7 00 00 00 00 
2871   19DB 00 00 00 00 
2871   19DF 00 00 00 00 
2871   19E3 00 00 00 00 
2871   19E7 00 00 00 00 
2871   19EB 00 00 00 00 
2871   19EF 00 00 00 00 
2871   19F3 00 00 00 00 
2871   19F7 00 00 00 00 
2871   19FB 00 00 00 00 
2871   19FF 00 00 00 00 
2871   1A03 00 00 00 00 
2871   1A07 00 00 00 00 
2871   1A0B 00 00 00 00 
2871   1A0F 00 00 00 00 
2871   1A13 00 00 00 00 
2871   1A17 00 00 00 00 
2871   1A1B 00 00 00 00 
2871   1A1F 00 00 00 00 
2871   1A23 00 00 00 00 
2871   1A27 00 00 00 00 
2871   1A2B 00 00 00 00 
2871   1A2F 00 00 00 00 
2871   1A33 00 00 00 00 
2871   1A37 00 00 00 00 
2871   1A3B 00 00 00 00 
2871   1A3F 00 00 00 00 
2871   1A43 00 00 00 00 
2871   1A47 00 00 00 00 
2871   1A4B 00 00 00 00 
2871   1A4F 00 00 00 00 
2871   1A53 00 00 00 00 
2871   1A57 00 00 00 00 
2871   1A5B 00 00 00 00 
2871   1A5F 00 00 00 00 
2871   1A63 00 00 00 00 
2871   1A67 00 00 00 00 
2871   1A6B 00 00 00 00 
2871   1A6F 00 00 00 00 
2871   1A73 00 00 00 00 
2871   1A77 00 00 00 00 
2871   1A7B 00 00 00 00 
2871   1A7F 00 00 00 00 
2871   1A83 00 00 00 00 
2871   1A87 00 00 00 00 
2871   1A8B 00 00 00 00 
2871   1A8F 00 00 00 00 
2871   1A93 00 00 00 00 
2871   1A97 00 00 00 00 
2871   1A9B 00 00 00 00 
2871   1A9F 00 00 00 00 
2871   1AA3 00 00 00 00 
2871   1AA7 00 00 00 00 
2871   1AAB 00 00 00 00 
2871   1AAF 00 00 00 00 
2871   1AB3 00 00 00 00 
2871   1AB7 00 00 00 00 
2871   1ABB 00 00 00 00 
2871   1ABF 00 00 00 00 
2871   1AC3 00 00 00 00 
2871   1AC7 00 00 00 00 
2871   1ACB 00 00 00 00 
2871   1ACF 00 00 00 00 
2871   1AD3 00 00 00 00 
2871   1AD7 00 00 00 00 
2871   1ADB 00 00 00 00 
2871   1ADF 00 00 00 00 
2871   1AE3 00 00 00 00 
2871   1AE7 00 00 00 00 
2871   1AEB 00 00 00 00 
2871   1AEF 00 00 00 00 
2871   1AF3 00 00 00 00 
2871   1AF7 00 00 00 00 
2871   1AFB 00 00 00 00 
2871   1AFF 00 00 00 00 
2871   1B03 00 00 00 00 
2871   1B07 00 00 00 00 
2871   1B0B 00 00 00 00 
2871   1B0F 00 00 00 00 
2871   1B13 00 00 00 00 
2871   1B17 00 00 00 00 
2871   1B1B 00 00 00 00 
2871   1B1F 00 00 00 00 
2871   1B23 00 00 00 00 
2871   1B27 00 00 00 00 
2871   1B2B 00 00 00 00 
2871   1B2F 00 00 00 00 
2871   1B33 00 00 00 00 
2871   1B37 00 00 00 00 
2871   1B3B 00 00 00 00 
2871   1B3F 00 00 00 00 
2871   1B43 00 00 00 00 
2871   1B47 00 00 00 00 
2871   1B4B 00 00 00 00 
2871   1B4F 00 00 00 00 
2871   1B53 00 00 00 00 
2871   1B57 00 00 00 00 
2871   1B5B 00 00 00 00 
2871   1B5F 00 00 00 00 
2871   1B63 00 00 00 00 
2871   1B67 00 00 00 00 
2871   1B6B 00 00 00 00 
2871   1B6F 00 00 00 00 
2871   1B73 00 00 00 00 
2871   1B77 00 00 00 00 
2871   1B7B 00 00 00 00 
2871   1B7F 00 00 00 00 
2871   1B83 00 00 00 00 
2871   1B87 00 00 00 00 
2871   1B8B 00 00 00 00 
2871   1B8F 00 00 00 00 
2871   1B93 00 00 00 00 
2871   1B97 00 00 00 00 
2871   1B9B 00 00 00 00 
2871   1B9F 00 00 00 00 
2871   1BA3 00 00 00 00 
2871   1BA7 00 00 00 00 
2871   1BAB 00 00 00 00 
2871   1BAF 00 00 00 00 
2871   1BB3 00 00 00 00 
2871   1BB7 00 00 00 00 
2871   1BBB 00 00 00 00 
2871   1BBF 00 00 00 00 
2871   1BC3 00 00 00 00 
2872   1BC7             _currState_data: 
2873   1BC7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2873   1BCB 20 20 20 20 
2873   1BCF 20 20 20 20 
2873   1BD3 20 20 20 20 
2873   1BD7 20 20 20 20 
2873   1BDB 20 20 20 20 
2873   1BDF 20 20 20 20 
2873   1BE3 20 20 
2874   1BE5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2874   1BE9 20 20 20 20 
2874   1BED 20 20 20 20 
2874   1BF1 20 20 20 20 
2874   1BF5 20 20 20 20 
2874   1BF9 20 20 20 20 
2874   1BFD 20 20 20 20 
2874   1C01 20 20 
2875   1C03 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2875   1C07 20 20 20 20 
2875   1C0B 20 20 20 20 
2875   1C0F 20 20 20 20 
2875   1C13 20 20 20 20 
2875   1C17 20 20 20 20 
2875   1C1B 20 20 20 20 
2875   1C1F 20 20 
2876   1C21 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2876   1C25 20 20 20 20 
2876   1C29 20 20 20 20 
2876   1C2D 20 20 20 20 
2876   1C31 20 20 20 20 
2876   1C35 20 20 20 20 
2876   1C39 20 20 20 20 
2876   1C3D 20 20 
2877   1C3F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2877   1C43 20 20 20 20 
2877   1C47 20 20 20 20 
2877   1C4B 20 20 20 20 
2877   1C4F 20 20 20 20 
2877   1C53 20 20 20 20 
2877   1C57 20 20 20 40 
2877   1C5B 20 20 
2878   1C5D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2878   1C61 20 20 20 20 
2878   1C65 20 20 20 20 
2878   1C69 20 20 20 20 
2878   1C6D 20 20 20 20 
2878   1C71 20 20 20 20 
2878   1C75 20 20 20 20 
2878   1C79 20 20 
2879   1C7B 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2879   1C7F 20 40 20 40 
2879   1C83 20 20 20 20 
2879   1C87 20 20 20 20 
2879   1C8B 20 20 20 20 
2879   1C8F 20 20 20 20 
2879   1C93 20 20 20 20 
2879   1C97 20 20 
2880   1C99 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
2880   1C9D 20 40 40 20 
2880   1CA1 20 20 20 20 
2880   1CA5 20 40 40 20 
2880   1CA9 20 20 20 20 
2880   1CAD 20 20 20 20 
2880   1CB1 20 20 20 40 
2880   1CB5 40 20 
2881   1CB7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2881   1CBB 20 20 20 20 
2881   1CBF 20 20 20 20 
2881   1CC3 20 20 40 20 
2881   1CC7 20 20 40 20 
2881   1CCB 20 20 20 40 
2881   1CCF 40 20 20 20 
2881   1CD3 20 20 
2882   1CD5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
2882   1CD9 20 20 20 40 
2882   1CDD 40 20 20 20 
2882   1CE1 20 40 40 20 
2882   1CE5 20 20 20 20 
2882   1CE9 20 20 20 40 
2882   1CED 20 20 20 20 
2882   1CF1 20 40 
2883   1CF3 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2883   1CF7 40 20 20 20 
2883   1CFB 20 20 20 20 
2883   1CFF 20 20 20 20 
2883   1D03 20 20 20 20 
2883   1D07 20 20 20 40 
2883   1D0B 40 20 20 20 
2883   1D0F 20 20 
2884   1D11 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2884   1D15 20 20 20 40 
2884   1D19 20 40 40 20 
2884   1D1D 20 20 20 40 
2884   1D21 20 40 20 20 
2884   1D25 20 20 20 20 
2884   1D29 20 20 20 20 
2884   1D2D 20 20 
2885   1D2F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2885   1D33 20 20 20 20 
2885   1D37 20 20 20 20 
2885   1D3B 20 40 20 20 
2885   1D3F 20 20 20 40 
2885   1D43 20 20 20 20 
2885   1D47 20 20 20 40 
2885   1D4B 20 20 
2886   1D4D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
2886   1D51 20 20 20 20 
2886   1D55 20 20 20 20 
2886   1D59 20 20 20 20 
2886   1D5D 20 20 20 20 
2886   1D61 20 20 20 20 
2886   1D65 40 20 20 20 
2886   1D69 40 20 
2887   1D6B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2887   1D6F 20 20 20 20 
2887   1D73 20 20 20 20 
2887   1D77 20 20 20 20 
2887   1D7B 20 20 20 20 
2887   1D7F 20 20 20 20 
2887   1D83 20 20 20 20 
2887   1D87 20 20 
2888   1D89 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2888   1D8D 20 40 40 20 
2888   1D91 20 20 20 20 
2888   1D95 20 20 20 20 
2888   1D99 20 20 20 20 
2888   1D9D 20 20 20 20 
2888   1DA1 20 20 20 20 
2888   1DA5 20 20 
2889   1DA7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2889   1DAB 20 20 20 20 
2889   1DAF 20 20 20 20 
2889   1DB3 20 20 20 20 
2889   1DB7 20 20 20 20 
2889   1DBB 20 20 20 20 
2889   1DBF 20 20 20 20 
2889   1DC3 20 20 
2890   1DC5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2890   1DC9 20 20 20 20 
2890   1DCD 20 20 20 20 
2890   1DD1 20 20 20 20 
2890   1DD5 20 20 20 20 
2890   1DD9 20 20 20 20 
2890   1DDD 20 20 20 20 
2890   1DE1 20 20 
2891   1DE3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2891   1DE7 20 20 20 20 
2891   1DEB 20 20 20 20 
2891   1DEF 20 20 20 20 
2891   1DF3 20 20 20 20 
2891   1DF7 20 20 20 20 
2891   1DFB 20 20 20 20 
2891   1DFF 20 20 
2892   1E01 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2892   1E05 20 20 20 20 
2892   1E09 20 20 20 20 
2892   1E0D 20 20 20 20 
2892   1E11 20 20 20 20 
2892   1E15 20 20 20 20 
2892   1E19 20 20 20 20 
2892   1E1D 20 20 
2893   1E1F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2893   1E23 20 20 20 20 
2893   1E27 20 20 20 20 
2893   1E2B 20 20 20 20 
2893   1E2F 20 20 20 20 
2893   1E33 20 20 20 20 
2893   1E37 20 20 20 20 
2893   1E3B 20 20 
2894   1E3D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2894   1E41 20 20 20 20 
2894   1E45 20 20 20 20 
2894   1E49 20 20 20 20 
2894   1E4D 20 20 20 20 
2894   1E51 20 20 20 20 
2894   1E55 20 20 20 20 
2894   1E59 20 20 
2895   1E5B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2895   1E5F 20 20 20 20 
2895   1E63 20 20 20 20 
2895   1E67 20 20 20 20 
2895   1E6B 20 20 20 20 
2895   1E6F 20 20 20 20 
2895   1E73 20 20 20 20 
2895   1E77 20 20 
2896   1E79 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2896   1E7D 20 20 20 20 
2896   1E81 20 20 20 20 
2896   1E85 20 20 20 20 
2896   1E89 20 20 20 20 
2896   1E8D 20 20 20 20 
2896   1E91 20 20 20 20 
2896   1E95 20 20 
2897   1E97 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2897   1E9B 20 20 20 20 
2897   1E9F 20 20 20 20 
2897   1EA3 20 20 20 20 
2897   1EA7 20 20 20 20 
2897   1EAB 20 20 20 20 
2897   1EAF 20 20 20 20 
2897   1EB3 20 20 
2898   1EB5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2898   1EB9 20 20 20 20 
2898   1EBD 20 20 20 20 
2898   1EC1 20 20 20 20 
2898   1EC5 20 20 20 20 
2898   1EC9 20 20 20 20 
2898   1ECD 20 20 20 20 
2898   1ED1 20 20 
2899   1ED3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2899   1ED7 20 20 20 20 
2899   1EDB 20 20 20 20 
2899   1EDF 20 20 20 20 
2899   1EE3 20 20 20 20 
2900   1EE7 00 00 00 00 .fill 400, 0
2900   1EEB 00 00 00 00 
2900   1EEF 00 00 00 00 
2900   1EF3 00 00 00 00 
2900   1EF7 00 00 00 00 
2900   1EFB 00 00 00 00 
2900   1EFF 00 00 00 00 
2900   1F03 00 00 00 00 
2900   1F07 00 00 00 00 
2900   1F0B 00 00 00 00 
2900   1F0F 00 00 00 00 
2900   1F13 00 00 00 00 
2900   1F17 00 00 00 00 
2900   1F1B 00 00 00 00 
2900   1F1F 00 00 00 00 
2900   1F23 00 00 00 00 
2900   1F27 00 00 00 00 
2900   1F2B 00 00 00 00 
2900   1F2F 00 00 00 00 
2900   1F33 00 00 00 00 
2900   1F37 00 00 00 00 
2900   1F3B 00 00 00 00 
2900   1F3F 00 00 00 00 
2900   1F43 00 00 00 00 
2900   1F47 00 00 00 00 
2900   1F4B 00 00 00 00 
2900   1F4F 00 00 00 00 
2900   1F53 00 00 00 00 
2900   1F57 00 00 00 00 
2900   1F5B 00 00 00 00 
2900   1F5F 00 00 00 00 
2900   1F63 00 00 00 00 
2900   1F67 00 00 00 00 
2900   1F6B 00 00 00 00 
2900   1F6F 00 00 00 00 
2900   1F73 00 00 00 00 
2900   1F77 00 00 00 00 
2900   1F7B 00 00 00 00 
2900   1F7F 00 00 00 00 
2900   1F83 00 00 00 00 
2900   1F87 00 00 00 00 
2900   1F8B 00 00 00 00 
2900   1F8F 00 00 00 00 
2900   1F93 00 00 00 00 
2900   1F97 00 00 00 00 
2900   1F9B 00 00 00 00 
2900   1F9F 00 00 00 00 
2900   1FA3 00 00 00 00 
2900   1FA7 00 00 00 00 
2900   1FAB 00 00 00 00 
2900   1FAF 00 00 00 00 
2900   1FB3 00 00 00 00 
2900   1FB7 00 00 00 00 
2900   1FBB 00 00 00 00 
2900   1FBF 00 00 00 00 
2900   1FC3 00 00 00 00 
2900   1FC7 00 00 00 00 
2900   1FCB 00 00 00 00 
2900   1FCF 00 00 00 00 
2900   1FD3 00 00 00 00 
2900   1FD7 00 00 00 00 
2900   1FDB 00 00 00 00 
2900   1FDF 00 00 00 00 
2900   1FE3 00 00 00 00 
2900   1FE7 00 00 00 00 
2900   1FEB 00 00 00 00 
2900   1FEF 00 00 00 00 
2900   1FF3 00 00 00 00 
2900   1FF7 00 00 00 00 
2900   1FFB 00 00 00 00 
2900   1FFF 00 00 00 00 
2900   2003 00 00 00 00 
2900   2007 00 00 00 00 
2900   200B 00 00 00 00 
2900   200F 00 00 00 00 
2900   2013 00 00 00 00 
2900   2017 00 00 00 00 
2900   201B 00 00 00 00 
2900   201F 00 00 00 00 
2900   2023 00 00 00 00 
2900   2027 00 00 00 00 
2900   202B 00 00 00 00 
2900   202F 00 00 00 00 
2900   2033 00 00 00 00 
2900   2037 00 00 00 00 
2900   203B 00 00 00 00 
2900   203F 00 00 00 00 
2900   2043 00 00 00 00 
2900   2047 00 00 00 00 
2900   204B 00 00 00 00 
2900   204F 00 00 00 00 
2900   2053 00 00 00 00 
2900   2057 00 00 00 00 
2900   205B 00 00 00 00 
2900   205F 00 00 00 00 
2900   2063 00 00 00 00 
2900   2067 00 00 00 00 
2900   206B 00 00 00 00 
2900   206F 00 00 00 00 
2900   2073 00 00 00 00 
2901   2077 0A 0D 50 72 __s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
2901   207B 65 73 73 20 
2901   207F 43 54 52 4C 
2901   2083 2B 43 20 74 
2901   2087 6F 20 71 75 
2901   208B 69 74 2E 0A 
2901   208F 0D 00 
2902   2091 55 6E 6B 6E __s1: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
2902   2095 6F 77 6E 20 
2902   2099 74 79 70 65 
2902   209D 20 73 69 7A 
2902   20A1 65 20 69 6E 
2902   20A5 20 76 61 5F 
2902   20A9 61 72 67 28 
2902   20AD 29 20 63 61 
2902   20B1 6C 6C 2E 20 
2902   20B5 53 69 7A 65 
2902   20B9 20 6E 65 65 
2902   20BD 64 73 20 74 
2902   20C1 6F 20 62 65 
2902   20C5 20 65 69 74 
2902   20C9 68 65 72 20 
2902   20CD 31 20 6F 72 
2902   20D1 20 32 2E 00 
2903   20D5 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
2903   20D9 72 3A 20 55 
2903   20DD 6E 6B 6E 6F 
2903   20E1 77 6E 20 61 
2903   20E5 72 67 75 6D 
2903   20E9 65 6E 74 20 
2903   20ED 74 79 70 65 
2903   20F1 2E 0A 00 
2904   20F4 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
2904   20F8 1B 5B 48 00 
2905   20FC 0A 00       __s4: .db "\n", 0
2906   20FE 40 20 00    __s5: .db "@ ", 0
2907   2101 2E 20 00    __s6: .db ". ", 0
2908   2104             
2909   2104 06 21       _heap_top: .dw _heap
2910   2106 00          _heap: .db 0
2911   2107             ; --- END DATA BLOCK
2912   2107             
2913   2107             .end
tasm: Number of errors = 0
