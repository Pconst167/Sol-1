0001   0000             ; --- FILENAME: programs/life.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int i, j; 
0011   0408 52 02 00      sub sp, 2
0012   040B 52 02 00      sub sp, 2
0013   040E             ; int n; 
0014   040E 52 02 00      sub sp, 2
0015   0411             ; for(i = 0; i <  30      ; i++){ 
0016   0411             _for1_init:
0017   0411 FA FF FF      lea d, [bp + -1] ; $i
0018   0414 DA            push d
0019   0415                            
0020   0415 FD 2E 00 00   mov32 cb, $00000000
0020   0419 00 00 
0021   041B E7            pop d
0022   041C FD 43         mov [d], b
0023   041E             _for1_cond:
0024   041E                            
0025   041E FA FF FF      lea d, [bp + -1] ; $i
0026   0421 2A            mov b, [d]
0027   0422 38 00 00      mov c, 0
0028   0425             ; --- START RELATIONAL
0029   0425 D7            push a
0030   0426 11            mov a, b
0031   0427 FD 2E 1E 00   mov32 cb, $0000001e
0031   042B 00 00 
0032   042D B0            cmp a, b
0033   042E FD 73         slt ; < (signed)
0034   0430 E4            pop a
0035   0431             ; --- END RELATIONAL
0036   0431 C0 00 00      cmp b, 0
0037   0434 C6 C5 04      je _for1_exit
0038   0437             _for1_block:
0039   0437             ; for(j = 0; j <   40     ; j++){ 
0040   0437             _for2_init:
0041   0437 FA FD FF      lea d, [bp + -3] ; $j
0042   043A DA            push d
0043   043B                            
0044   043B FD 2E 00 00   mov32 cb, $00000000
0044   043F 00 00 
0045   0441 E7            pop d
0046   0442 FD 43         mov [d], b
0047   0444             _for2_cond:
0048   0444                            
0049   0444 FA FD FF      lea d, [bp + -3] ; $j
0050   0447 2A            mov b, [d]
0051   0448 38 00 00      mov c, 0
0052   044B             ; --- START RELATIONAL
0053   044B D7            push a
0054   044C 11            mov a, b
0055   044D FD 2E 28 00   mov32 cb, $00000028
0055   0451 00 00 
0056   0453 B0            cmp a, b
0057   0454 FD 73         slt ; < (signed)
0058   0456 E4            pop a
0059   0457             ; --- END RELATIONAL
0060   0457 C0 00 00      cmp b, 0
0061   045A C6 B2 04      je _for2_exit
0062   045D             _for2_block:
0063   045D             ; nextState[i][j] = currState[i][j]; 
0064   045D 3B 1C 14      mov d, _nextState_data ; $nextState
0065   0460 D7            push a
0066   0461 DA            push d
0067   0462                            
0068   0462 FA FF FF      lea d, [bp + -1] ; $i
0069   0465 2A            mov b, [d]
0070   0466 38 00 00      mov c, 0
0071   0469 E7            pop d
0072   046A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0073   046E DA            push d
0074   046F                            
0075   046F FA FD FF      lea d, [bp + -3] ; $j
0076   0472 2A            mov b, [d]
0077   0473 38 00 00      mov c, 0
0078   0476 E7            pop d
0079   0477 5A            add d, b
0080   0478 E4            pop a
0081   0479 DA            push d
0082   047A                            
0083   047A 3B CC 18      mov d, _currState_data ; $currState
0084   047D D7            push a
0085   047E DA            push d
0086   047F                            
0087   047F FA FF FF      lea d, [bp + -1] ; $i
0088   0482 2A            mov b, [d]
0089   0483 38 00 00      mov c, 0
0090   0486 E7            pop d
0091   0487 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0092   048B DA            push d
0093   048C                            
0094   048C FA FD FF      lea d, [bp + -3] ; $j
0095   048F 2A            mov b, [d]
0096   0490 38 00 00      mov c, 0
0097   0493 E7            pop d
0098   0494 5A            add d, b
0099   0495 E4            pop a
0100   0496 32            mov bl, [d]
0101   0497 A7 00         mov bh, 0
0102   0499 38 00 00      mov c, 0
0103   049C E7            pop d
0104   049D FD 3E         mov [d], bl
0105   049F             _for2_update:
0106   049F                            
0107   049F FA FD FF      lea d, [bp + -3] ; $j
0108   04A2 2A            mov b, [d]
0109   04A3 38 00 00      mov c, 0
0110   04A6 11            mov a, b
0111   04A7 FD 77         inc b
0112   04A9 FA FD FF      lea d, [bp + -3] ; $j
0113   04AC FD 43         mov [d], b
0114   04AE 27            mov b, a
0115   04AF 0A 44 04      jmp _for2_cond
0116   04B2             _for2_exit:
0117   04B2             _for1_update:
0118   04B2                            
0119   04B2 FA FF FF      lea d, [bp + -1] ; $i
0120   04B5 2A            mov b, [d]
0121   04B6 38 00 00      mov c, 0
0122   04B9 11            mov a, b
0123   04BA FD 77         inc b
0124   04BC FA FF FF      lea d, [bp + -1] ; $i
0125   04BF FD 43         mov [d], b
0126   04C1 27            mov b, a
0127   04C2 0A 1E 04      jmp _for1_cond
0128   04C5             _for1_exit:
0129   04C5             ; for(;;){ 
0130   04C5             _for3_init:
0131   04C5             _for3_cond:
0132   04C5             _for3_block:
0133   04C5             ; for(i = 1; i <  30      +-1; i++){ 
0134   04C5             _for4_init:
0135   04C5 FA FF FF      lea d, [bp + -1] ; $i
0136   04C8 DA            push d
0137   04C9                            
0138   04C9 FD 2E 01 00   mov32 cb, $00000001
0138   04CD 00 00 
0139   04CF E7            pop d
0140   04D0 FD 43         mov [d], b
0141   04D2             _for4_cond:
0142   04D2                            
0143   04D2 FA FF FF      lea d, [bp + -1] ; $i
0144   04D5 2A            mov b, [d]
0145   04D6 38 00 00      mov c, 0
0146   04D9             ; --- START RELATIONAL
0147   04D9 D7            push a
0148   04DA 11            mov a, b
0149   04DB FD 2E 1E 00   mov32 cb, $0000001e
0149   04DF 00 00 
0150   04E1             ; --- START TERMS
0151   04E1 D7            push a
0152   04E2 11            mov a, b
0153   04E3 FD 2E FF FF   mov32 cb, $ffffffff
0153   04E7 FF FF 
0154   04E9 56            add b, a
0155   04EA E4            pop a
0156   04EB             ; --- END TERMS
0157   04EB B0            cmp a, b
0158   04EC FD 73         slt ; < (signed)
0159   04EE E4            pop a
0160   04EF             ; --- END RELATIONAL
0161   04EF C0 00 00      cmp b, 0
0162   04F2 C6 08 06      je _for4_exit
0163   04F5             _for4_block:
0164   04F5             ; for(j = 1; j <   40     +-1; j++){ 
0165   04F5             _for5_init:
0166   04F5 FA FD FF      lea d, [bp + -3] ; $j
0167   04F8 DA            push d
0168   04F9                            
0169   04F9 FD 2E 01 00   mov32 cb, $00000001
0169   04FD 00 00 
0170   04FF E7            pop d
0171   0500 FD 43         mov [d], b
0172   0502             _for5_cond:
0173   0502                            
0174   0502 FA FD FF      lea d, [bp + -3] ; $j
0175   0505 2A            mov b, [d]
0176   0506 38 00 00      mov c, 0
0177   0509             ; --- START RELATIONAL
0178   0509 D7            push a
0179   050A 11            mov a, b
0180   050B FD 2E 28 00   mov32 cb, $00000028
0180   050F 00 00 
0181   0511             ; --- START TERMS
0182   0511 D7            push a
0183   0512 11            mov a, b
0184   0513 FD 2E FF FF   mov32 cb, $ffffffff
0184   0517 FF FF 
0185   0519 56            add b, a
0186   051A E4            pop a
0187   051B             ; --- END TERMS
0188   051B B0            cmp a, b
0189   051C FD 73         slt ; < (signed)
0190   051E E4            pop a
0191   051F             ; --- END RELATIONAL
0192   051F C0 00 00      cmp b, 0
0193   0522 C6 F5 05      je _for5_exit
0194   0525             _for5_block:
0195   0525             ; n = neighbours(i, j); 
0196   0525 FA FB FF      lea d, [bp + -5] ; $n
0197   0528 DA            push d
0198   0529                            
0199   0529             ; --- START FUNCTION CALL
0200   0529                            
0201   0529 FA FD FF      lea d, [bp + -3] ; $j
0202   052C 2A            mov b, [d]
0203   052D 38 00 00      mov c, 0
0204   0530 FD AB         swp b
0205   0532 D8            push b
0206   0533                            
0207   0533 FA FF FF      lea d, [bp + -1] ; $i
0208   0536 2A            mov b, [d]
0209   0537 38 00 00      mov c, 0
0210   053A FD AB         swp b
0211   053C D8            push b
0212   053D 07 19 08      call neighbours
0213   0540 51 04 00      add sp, 4
0214   0543             ; --- END FUNCTION CALL
0215   0543 E7            pop d
0216   0544 FD 43         mov [d], b
0217   0546             ; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0218   0546             _if6_cond:
0219   0546                            
0220   0546 FA FB FF      lea d, [bp + -5] ; $n
0221   0549 2A            mov b, [d]
0222   054A 38 00 00      mov c, 0
0223   054D             ; --- START RELATIONAL
0224   054D D7            push a
0225   054E 11            mov a, b
0226   054F FD 2E 02 00   mov32 cb, $00000002
0226   0553 00 00 
0227   0555 B0            cmp a, b
0228   0556 FD 73         slt ; < (signed)
0229   0558 E4            pop a
0230   0559             ; --- END RELATIONAL
0231   0559             ; --- START LOGICAL OR
0232   0559 D7            push a
0233   055A 11            mov a, b
0234   055B FA FB FF      lea d, [bp + -5] ; $n
0235   055E 2A            mov b, [d]
0236   055F 38 00 00      mov c, 0
0237   0562             ; --- START RELATIONAL
0238   0562 D7            push a
0239   0563 11            mov a, b
0240   0564 FD 2E 03 00   mov32 cb, $00000003
0240   0568 00 00 
0241   056A B0            cmp a, b
0242   056B FD 7F         sgt ; >
0243   056D E4            pop a
0244   056E             ; --- END RELATIONAL
0245   056E FD A8         sor a, b ; ||
0246   0570 E4            pop a
0247   0571             ; --- END LOGICAL OR
0248   0571 C0 00 00      cmp b, 0
0249   0574 C6 A0 05      je _if6_else
0250   0577             _if6_TRUE:
0251   0577             ; nextState[i][j] = ' '; 
0252   0577 3B 1C 14      mov d, _nextState_data ; $nextState
0253   057A D7            push a
0254   057B DA            push d
0255   057C                            
0256   057C FA FF FF      lea d, [bp + -1] ; $i
0257   057F 2A            mov b, [d]
0258   0580 38 00 00      mov c, 0
0259   0583 E7            pop d
0260   0584 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0261   0588 DA            push d
0262   0589                            
0263   0589 FA FD FF      lea d, [bp + -3] ; $j
0264   058C 2A            mov b, [d]
0265   058D 38 00 00      mov c, 0
0266   0590 E7            pop d
0267   0591 5A            add d, b
0268   0592 E4            pop a
0269   0593 DA            push d
0270   0594                            
0271   0594 FD 2E 20 00   mov32 cb, $00000020
0271   0598 00 00 
0272   059A E7            pop d
0273   059B FD 3E         mov [d], bl
0274   059D 0A E2 05      jmp _if6_exit
0275   05A0             _if6_else:
0276   05A0             ; if(n == 3) nextState[i][j] = '@'; 
0277   05A0             _if7_cond:
0278   05A0                            
0279   05A0 FA FB FF      lea d, [bp + -5] ; $n
0280   05A3 2A            mov b, [d]
0281   05A4 38 00 00      mov c, 0
0282   05A7             ; --- START RELATIONAL
0283   05A7 D7            push a
0284   05A8 11            mov a, b
0285   05A9 FD 2E 03 00   mov32 cb, $00000003
0285   05AD 00 00 
0286   05AF B0            cmp a, b
0287   05B0 FD 71         seq ; ==
0288   05B2 E4            pop a
0289   05B3             ; --- END RELATIONAL
0290   05B3 C0 00 00      cmp b, 0
0291   05B6 C6 E2 05      je _if7_exit
0292   05B9             _if7_TRUE:
0293   05B9             ; nextState[i][j] = '@'; 
0294   05B9 3B 1C 14      mov d, _nextState_data ; $nextState
0295   05BC D7            push a
0296   05BD DA            push d
0297   05BE                            
0298   05BE FA FF FF      lea d, [bp + -1] ; $i
0299   05C1 2A            mov b, [d]
0300   05C2 38 00 00      mov c, 0
0301   05C5 E7            pop d
0302   05C6 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0303   05CA DA            push d
0304   05CB                            
0305   05CB FA FD FF      lea d, [bp + -3] ; $j
0306   05CE 2A            mov b, [d]
0307   05CF 38 00 00      mov c, 0
0308   05D2 E7            pop d
0309   05D3 5A            add d, b
0310   05D4 E4            pop a
0311   05D5 DA            push d
0312   05D6                            
0313   05D6 FD 2E 40 00   mov32 cb, $00000040
0313   05DA 00 00 
0314   05DC E7            pop d
0315   05DD FD 3E         mov [d], bl
0316   05DF 0A E2 05      jmp _if7_exit
0317   05E2             _if7_exit:
0318   05E2             _if6_exit:
0319   05E2             _for5_update:
0320   05E2                            
0321   05E2 FA FD FF      lea d, [bp + -3] ; $j
0322   05E5 2A            mov b, [d]
0323   05E6 38 00 00      mov c, 0
0324   05E9 11            mov a, b
0325   05EA FD 77         inc b
0326   05EC FA FD FF      lea d, [bp + -3] ; $j
0327   05EF FD 43         mov [d], b
0328   05F1 27            mov b, a
0329   05F2 0A 02 05      jmp _for5_cond
0330   05F5             _for5_exit:
0331   05F5             _for4_update:
0332   05F5                            
0333   05F5 FA FF FF      lea d, [bp + -1] ; $i
0334   05F8 2A            mov b, [d]
0335   05F9 38 00 00      mov c, 0
0336   05FC 11            mov a, b
0337   05FD FD 77         inc b
0338   05FF FA FF FF      lea d, [bp + -1] ; $i
0339   0602 FD 43         mov [d], b
0340   0604 27            mov b, a
0341   0605 0A D2 04      jmp _for4_cond
0342   0608             _for4_exit:
0343   0608             ; for(i = 1; i <  30      +-1; i++){ 
0344   0608             _for8_init:
0345   0608 FA FF FF      lea d, [bp + -1] ; $i
0346   060B DA            push d
0347   060C                            
0348   060C FD 2E 01 00   mov32 cb, $00000001
0348   0610 00 00 
0349   0612 E7            pop d
0350   0613 FD 43         mov [d], b
0351   0615             _for8_cond:
0352   0615                            
0353   0615 FA FF FF      lea d, [bp + -1] ; $i
0354   0618 2A            mov b, [d]
0355   0619 38 00 00      mov c, 0
0356   061C             ; --- START RELATIONAL
0357   061C D7            push a
0358   061D 11            mov a, b
0359   061E FD 2E 1E 00   mov32 cb, $0000001e
0359   0622 00 00 
0360   0624             ; --- START TERMS
0361   0624 D7            push a
0362   0625 11            mov a, b
0363   0626 FD 2E FF FF   mov32 cb, $ffffffff
0363   062A FF FF 
0364   062C 56            add b, a
0365   062D E4            pop a
0366   062E             ; --- END TERMS
0367   062E B0            cmp a, b
0368   062F FD 73         slt ; < (signed)
0369   0631 E4            pop a
0370   0632             ; --- END RELATIONAL
0371   0632 C0 00 00      cmp b, 0
0372   0635 C6 D0 06      je _for8_exit
0373   0638             _for8_block:
0374   0638             ; for(j = 1; j <   40     +-1; j++){ 
0375   0638             _for9_init:
0376   0638 FA FD FF      lea d, [bp + -3] ; $j
0377   063B DA            push d
0378   063C                             
0379   063C FD 2E 01 00   mov32 cb, $00000001
0379   0640 00 00 
0380   0642 E7            pop d
0381   0643 FD 43         mov [d], b
0382   0645             _for9_cond:
0383   0645                             
0384   0645 FA FD FF      lea d, [bp + -3] ; $j
0385   0648 2A            mov b, [d]
0386   0649 38 00 00      mov c, 0
0387   064C             ; --- START RELATIONAL
0388   064C D7            push a
0389   064D 11            mov a, b
0390   064E FD 2E 28 00   mov32 cb, $00000028
0390   0652 00 00 
0391   0654             ; --- START TERMS
0392   0654 D7            push a
0393   0655 11            mov a, b
0394   0656 FD 2E FF FF   mov32 cb, $ffffffff
0394   065A FF FF 
0395   065C 56            add b, a
0396   065D E4            pop a
0397   065E             ; --- END TERMS
0398   065E B0            cmp a, b
0399   065F FD 73         slt ; < (signed)
0400   0661 E4            pop a
0401   0662             ; --- END RELATIONAL
0402   0662 C0 00 00      cmp b, 0
0403   0665 C6 BD 06      je _for9_exit
0404   0668             _for9_block:
0405   0668             ; currState[i][j] = nextState[i][j]; 
0406   0668 3B CC 18      mov d, _currState_data ; $currState
0407   066B D7            push a
0408   066C DA            push d
0409   066D                             
0410   066D FA FF FF      lea d, [bp + -1] ; $i
0411   0670 2A            mov b, [d]
0412   0671 38 00 00      mov c, 0
0413   0674 E7            pop d
0414   0675 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0415   0679 DA            push d
0416   067A                             
0417   067A FA FD FF      lea d, [bp + -3] ; $j
0418   067D 2A            mov b, [d]
0419   067E 38 00 00      mov c, 0
0420   0681 E7            pop d
0421   0682 5A            add d, b
0422   0683 E4            pop a
0423   0684 DA            push d
0424   0685                             
0425   0685 3B 1C 14      mov d, _nextState_data ; $nextState
0426   0688 D7            push a
0427   0689 DA            push d
0428   068A                             
0429   068A FA FF FF      lea d, [bp + -1] ; $i
0430   068D 2A            mov b, [d]
0431   068E 38 00 00      mov c, 0
0432   0691 E7            pop d
0433   0692 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0434   0696 DA            push d
0435   0697                             
0436   0697 FA FD FF      lea d, [bp + -3] ; $j
0437   069A 2A            mov b, [d]
0438   069B 38 00 00      mov c, 0
0439   069E E7            pop d
0440   069F 5A            add d, b
0441   06A0 E4            pop a
0442   06A1 32            mov bl, [d]
0443   06A2 A7 00         mov bh, 0
0444   06A4 38 00 00      mov c, 0
0445   06A7 E7            pop d
0446   06A8 FD 3E         mov [d], bl
0447   06AA             _for9_update:
0448   06AA                             
0449   06AA FA FD FF      lea d, [bp + -3] ; $j
0450   06AD 2A            mov b, [d]
0451   06AE 38 00 00      mov c, 0
0452   06B1 11            mov a, b
0453   06B2 FD 77         inc b
0454   06B4 FA FD FF      lea d, [bp + -3] ; $j
0455   06B7 FD 43         mov [d], b
0456   06B9 27            mov b, a
0457   06BA 0A 45 06      jmp _for9_cond
0458   06BD             _for9_exit:
0459   06BD             _for8_update:
0460   06BD                             
0461   06BD FA FF FF      lea d, [bp + -1] ; $i
0462   06C0 2A            mov b, [d]
0463   06C1 38 00 00      mov c, 0
0464   06C4 11            mov a, b
0465   06C5 FD 77         inc b
0466   06C7 FA FF FF      lea d, [bp + -1] ; $i
0467   06CA FD 43         mov [d], b
0468   06CC 27            mov b, a
0469   06CD 0A 15 06      jmp _for8_cond
0470   06D0             _for8_exit:
0471   06D0             ; printf(clear); 
0472   06D0                             
0473   06D0             ; --- START FUNCTION CALL
0474   06D0                             
0475   06D0 3B 10 14      mov d, _clear_data ; $clear
0476   06D3 2D            mov b, d
0477   06D4 38 00 00      mov c, 0
0478   06D7 FD AB         swp b
0479   06D9 D8            push b
0480   06DA 07 E5 0A      call printf
0481   06DD 51 02 00      add sp, 2
0482   06E0             ; --- END FUNCTION CALL
0483   06E0             ; show(); 
0484   06E0                             
0485   06E0             ; --- START FUNCTION CALL
0486   06E0 07 F4 06      call show
0487   06E3             ; puts("\n\rPress CTRL+C to quit.\n\r"); 
0488   06E3                             
0489   06E3             ; --- START FUNCTION CALL
0490   06E3                             
0491   06E3 26 7D 1D      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0492   06E6 FD AB         swp b
0493   06E8 D8            push b
0494   06E9 07 F2 13      call puts
0495   06EC 51 02 00      add sp, 2
0496   06EF             ; --- END FUNCTION CALL
0497   06EF             _for3_update:
0498   06EF 0A C5 04      jmp _for3_cond
0499   06F2             _for3_exit:
0500   06F2 05 0B         syscall sys_terminate_proc
0501   06F4             
0502   06F4             show:
0503   06F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0504   06F7             ; int i, j; 
0505   06F7 52 02 00      sub sp, 2
0506   06FA 52 02 00      sub sp, 2
0507   06FD             ; for(i = 0; i <  30      ; i++){ 
0508   06FD             _for10_init:
0509   06FD FA FF FF      lea d, [bp + -1] ; $i
0510   0700 DA            push d
0511   0701                             
0512   0701 FD 2E 00 00   mov32 cb, $00000000
0512   0705 00 00 
0513   0707 E7            pop d
0514   0708 FD 43         mov [d], b
0515   070A             _for10_cond:
0516   070A                             
0517   070A FA FF FF      lea d, [bp + -1] ; $i
0518   070D 2A            mov b, [d]
0519   070E 38 00 00      mov c, 0
0520   0711             ; --- START RELATIONAL
0521   0711 D7            push a
0522   0712 11            mov a, b
0523   0713 FD 2E 1E 00   mov32 cb, $0000001e
0523   0717 00 00 
0524   0719 B0            cmp a, b
0525   071A FD 73         slt ; < (signed)
0526   071C E4            pop a
0527   071D             ; --- END RELATIONAL
0528   071D C0 00 00      cmp b, 0
0529   0720 C6 CB 07      je _for10_exit
0530   0723             _for10_block:
0531   0723             ; for(j = 0; j <   40     ; j++){ 
0532   0723             _for11_init:
0533   0723 FA FD FF      lea d, [bp + -3] ; $j
0534   0726 DA            push d
0535   0727                             
0536   0727 FD 2E 00 00   mov32 cb, $00000000
0536   072B 00 00 
0537   072D E7            pop d
0538   072E FD 43         mov [d], b
0539   0730             _for11_cond:
0540   0730                             
0541   0730 FA FD FF      lea d, [bp + -3] ; $j
0542   0733 2A            mov b, [d]
0543   0734 38 00 00      mov c, 0
0544   0737             ; --- START RELATIONAL
0545   0737 D7            push a
0546   0738 11            mov a, b
0547   0739 FD 2E 28 00   mov32 cb, $00000028
0547   073D 00 00 
0548   073F B0            cmp a, b
0549   0740 FD 73         slt ; < (signed)
0550   0742 E4            pop a
0551   0743             ; --- END RELATIONAL
0552   0743 C0 00 00      cmp b, 0
0553   0746 C6 AB 07      je _for11_exit
0554   0749             _for11_block:
0555   0749             ; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
0556   0749             _ternary12_cond:
0557   0749 3B CC 18      mov d, _currState_data ; $currState
0558   074C D7            push a
0559   074D DA            push d
0560   074E                             
0561   074E FA FF FF      lea d, [bp + -1] ; $i
0562   0751 2A            mov b, [d]
0563   0752 38 00 00      mov c, 0
0564   0755 E7            pop d
0565   0756 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0566   075A DA            push d
0567   075B                             
0568   075B FA FD FF      lea d, [bp + -3] ; $j
0569   075E 2A            mov b, [d]
0570   075F 38 00 00      mov c, 0
0571   0762 E7            pop d
0572   0763 5A            add d, b
0573   0764 E4            pop a
0574   0765 32            mov bl, [d]
0575   0766 A7 00         mov bh, 0
0576   0768 38 00 00      mov c, 0
0577   076B             ; --- START RELATIONAL
0578   076B D7            push a
0579   076C 11            mov a, b
0580   076D FD 2E 40 00   mov32 cb, $00000040
0580   0771 00 00 
0581   0773 B0            cmp a, b
0582   0774 FD 71         seq ; ==
0583   0776 E4            pop a
0584   0777             ; --- END RELATIONAL
0585   0777 C0 00 00      cmp b, 0
0586   077A C6 8C 07      je _ternary12_FALSE
0587   077D             _ternary12_TRUE:
0588   077D                             
0589   077D             ; --- START FUNCTION CALL
0590   077D                             
0591   077D 26 97 1D      mov b, _s1 ; "@ "
0592   0780 FD AB         swp b
0593   0782 D8            push b
0594   0783 07 E5 0A      call printf
0595   0786 51 02 00      add sp, 2
0596   0789             ; --- END FUNCTION CALL
0597   0789 0A 98 07      jmp _ternary12_exit
0598   078C             _ternary12_FALSE:
0599   078C                             
0600   078C             ; --- START FUNCTION CALL
0601   078C                             
0602   078C 26 9A 1D      mov b, _s2 ; ". "
0603   078F FD AB         swp b
0604   0791 D8            push b
0605   0792 07 E5 0A      call printf
0606   0795 51 02 00      add sp, 2
0607   0798             ; --- END FUNCTION CALL
0608   0798             _ternary12_exit:
0609   0798             _for11_update:
0610   0798                             
0611   0798 FA FD FF      lea d, [bp + -3] ; $j
0612   079B 2A            mov b, [d]
0613   079C 38 00 00      mov c, 0
0614   079F 11            mov a, b
0615   07A0 FD 77         inc b
0616   07A2 FA FD FF      lea d, [bp + -3] ; $j
0617   07A5 FD 43         mov [d], b
0618   07A7 27            mov b, a
0619   07A8 0A 30 07      jmp _for11_cond
0620   07AB             _for11_exit:
0621   07AB             ; putchar(10); 
0622   07AB                             
0623   07AB             ; --- START FUNCTION CALL
0624   07AB                             
0625   07AB FD 2E 0A 00   mov32 cb, $0000000a
0625   07AF 00 00 
0626   07B1 DD            push bl
0627   07B2 07 67 0F      call putchar
0628   07B5 51 01 00      add sp, 1
0629   07B8             ; --- END FUNCTION CALL
0630   07B8             _for10_update:
0631   07B8                             
0632   07B8 FA FF FF      lea d, [bp + -1] ; $i
0633   07BB 2A            mov b, [d]
0634   07BC 38 00 00      mov c, 0
0635   07BF 11            mov a, b
0636   07C0 FD 77         inc b
0637   07C2 FA FF FF      lea d, [bp + -1] ; $i
0638   07C5 FD 43         mov [d], b
0639   07C7 27            mov b, a
0640   07C8 0A 0A 07      jmp _for10_cond
0641   07CB             _for10_exit:
0642   07CB F9            leave
0643   07CC 09            ret
0644   07CD             
0645   07CD             alive:
0646   07CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0647   07D0             ; if(currState[i][j] == '@') return 1; 
0648   07D0             _if13_cond:
0649   07D0                             
0650   07D0 3B CC 18      mov d, _currState_data ; $currState
0651   07D3 D7            push a
0652   07D4 DA            push d
0653   07D5                             
0654   07D5 FA 05 00      lea d, [bp + 5] ; $i
0655   07D8 2A            mov b, [d]
0656   07D9 38 00 00      mov c, 0
0657   07DC E7            pop d
0658   07DD FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0659   07E1 DA            push d
0660   07E2                             
0661   07E2 FA 07 00      lea d, [bp + 7] ; $j
0662   07E5 2A            mov b, [d]
0663   07E6 38 00 00      mov c, 0
0664   07E9 E7            pop d
0665   07EA 5A            add d, b
0666   07EB E4            pop a
0667   07EC 32            mov bl, [d]
0668   07ED A7 00         mov bh, 0
0669   07EF 38 00 00      mov c, 0
0670   07F2             ; --- START RELATIONAL
0671   07F2 D7            push a
0672   07F3 11            mov a, b
0673   07F4 FD 2E 40 00   mov32 cb, $00000040
0673   07F8 00 00 
0674   07FA B0            cmp a, b
0675   07FB FD 71         seq ; ==
0676   07FD E4            pop a
0677   07FE             ; --- END RELATIONAL
0678   07FE C0 00 00      cmp b, 0
0679   0801 C6 0F 08      je _if13_else
0680   0804             _if13_TRUE:
0681   0804             ; return 1; 
0682   0804                             
0683   0804 FD 2E 01 00   mov32 cb, $00000001
0683   0808 00 00 
0684   080A F9            leave
0685   080B 09            ret
0686   080C 0A 17 08      jmp _if13_exit
0687   080F             _if13_else:
0688   080F             ; return 0; 
0689   080F                             
0690   080F FD 2E 00 00   mov32 cb, $00000000
0690   0813 00 00 
0691   0815 F9            leave
0692   0816 09            ret
0693   0817             _if13_exit:
0694   0817 F9            leave
0695   0818 09            ret
0696   0819             
0697   0819             neighbours:
0698   0819 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0699   081C             ; int count; 
0700   081C 52 02 00      sub sp, 2
0701   081F             ; count = 0; 
0702   081F FA FF FF      lea d, [bp + -1] ; $count
0703   0822 DA            push d
0704   0823                             
0705   0823 FD 2E 00 00   mov32 cb, $00000000
0705   0827 00 00 
0706   0829 E7            pop d
0707   082A FD 43         mov [d], b
0708   082C             ; if(currState[i+-1][j] == '@')			count++; 
0709   082C             _if14_cond:
0710   082C                             
0711   082C 3B CC 18      mov d, _currState_data ; $currState
0712   082F D7            push a
0713   0830 DA            push d
0714   0831                             
0715   0831 FA 05 00      lea d, [bp + 5] ; $i
0716   0834 2A            mov b, [d]
0717   0835 38 00 00      mov c, 0
0718   0838             ; --- START TERMS
0719   0838 D7            push a
0720   0839 11            mov a, b
0721   083A FD 2E FF FF   mov32 cb, $ffffffff
0721   083E FF FF 
0722   0840 56            add b, a
0723   0841 E4            pop a
0724   0842             ; --- END TERMS
0725   0842 E7            pop d
0726   0843 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0727   0847 DA            push d
0728   0848                             
0729   0848 FA 07 00      lea d, [bp + 7] ; $j
0730   084B 2A            mov b, [d]
0731   084C 38 00 00      mov c, 0
0732   084F E7            pop d
0733   0850 5A            add d, b
0734   0851 E4            pop a
0735   0852 32            mov bl, [d]
0736   0853 A7 00         mov bh, 0
0737   0855 38 00 00      mov c, 0
0738   0858             ; --- START RELATIONAL
0739   0858 D7            push a
0740   0859 11            mov a, b
0741   085A FD 2E 40 00   mov32 cb, $00000040
0741   085E 00 00 
0742   0860 B0            cmp a, b
0743   0861 FD 71         seq ; ==
0744   0863 E4            pop a
0745   0864             ; --- END RELATIONAL
0746   0864 C0 00 00      cmp b, 0
0747   0867 C6 7D 08      je _if14_exit
0748   086A             _if14_TRUE:
0749   086A             ; count++; 
0750   086A                             
0751   086A FA FF FF      lea d, [bp + -1] ; $count
0752   086D 2A            mov b, [d]
0753   086E 38 00 00      mov c, 0
0754   0871 11            mov a, b
0755   0872 FD 77         inc b
0756   0874 FA FF FF      lea d, [bp + -1] ; $count
0757   0877 FD 43         mov [d], b
0758   0879 27            mov b, a
0759   087A 0A 7D 08      jmp _if14_exit
0760   087D             _if14_exit:
0761   087D             ; if(currState[i+-1][j+-1] == '@') 	count++; 
0762   087D             _if15_cond:
0763   087D                             
0764   087D 3B CC 18      mov d, _currState_data ; $currState
0765   0880 D7            push a
0766   0881 DA            push d
0767   0882                             
0768   0882 FA 05 00      lea d, [bp + 5] ; $i
0769   0885 2A            mov b, [d]
0770   0886 38 00 00      mov c, 0
0771   0889             ; --- START TERMS
0772   0889 D7            push a
0773   088A 11            mov a, b
0774   088B FD 2E FF FF   mov32 cb, $ffffffff
0774   088F FF FF 
0775   0891 56            add b, a
0776   0892 E4            pop a
0777   0893             ; --- END TERMS
0778   0893 E7            pop d
0779   0894 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0780   0898 DA            push d
0781   0899                             
0782   0899 FA 07 00      lea d, [bp + 7] ; $j
0783   089C 2A            mov b, [d]
0784   089D 38 00 00      mov c, 0
0785   08A0             ; --- START TERMS
0786   08A0 D7            push a
0787   08A1 11            mov a, b
0788   08A2 FD 2E FF FF   mov32 cb, $ffffffff
0788   08A6 FF FF 
0789   08A8 56            add b, a
0790   08A9 E4            pop a
0791   08AA             ; --- END TERMS
0792   08AA E7            pop d
0793   08AB 5A            add d, b
0794   08AC E4            pop a
0795   08AD 32            mov bl, [d]
0796   08AE A7 00         mov bh, 0
0797   08B0 38 00 00      mov c, 0
0798   08B3             ; --- START RELATIONAL
0799   08B3 D7            push a
0800   08B4 11            mov a, b
0801   08B5 FD 2E 40 00   mov32 cb, $00000040
0801   08B9 00 00 
0802   08BB B0            cmp a, b
0803   08BC FD 71         seq ; ==
0804   08BE E4            pop a
0805   08BF             ; --- END RELATIONAL
0806   08BF C0 00 00      cmp b, 0
0807   08C2 C6 D8 08      je _if15_exit
0808   08C5             _if15_TRUE:
0809   08C5             ; count++; 
0810   08C5                             
0811   08C5 FA FF FF      lea d, [bp + -1] ; $count
0812   08C8 2A            mov b, [d]
0813   08C9 38 00 00      mov c, 0
0814   08CC 11            mov a, b
0815   08CD FD 77         inc b
0816   08CF FA FF FF      lea d, [bp + -1] ; $count
0817   08D2 FD 43         mov [d], b
0818   08D4 27            mov b, a
0819   08D5 0A D8 08      jmp _if15_exit
0820   08D8             _if15_exit:
0821   08D8             ; if(currState[i+-1][j+1] == '@') 	count++; 
0822   08D8             _if16_cond:
0823   08D8                             
0824   08D8 3B CC 18      mov d, _currState_data ; $currState
0825   08DB D7            push a
0826   08DC DA            push d
0827   08DD                             
0828   08DD FA 05 00      lea d, [bp + 5] ; $i
0829   08E0 2A            mov b, [d]
0830   08E1 38 00 00      mov c, 0
0831   08E4             ; --- START TERMS
0832   08E4 D7            push a
0833   08E5 11            mov a, b
0834   08E6 FD 2E FF FF   mov32 cb, $ffffffff
0834   08EA FF FF 
0835   08EC 56            add b, a
0836   08ED E4            pop a
0837   08EE             ; --- END TERMS
0838   08EE E7            pop d
0839   08EF FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0840   08F3 DA            push d
0841   08F4                             
0842   08F4 FA 07 00      lea d, [bp + 7] ; $j
0843   08F7 2A            mov b, [d]
0844   08F8 38 00 00      mov c, 0
0845   08FB             ; --- START TERMS
0846   08FB D7            push a
0847   08FC 11            mov a, b
0848   08FD FD 2E 01 00   mov32 cb, $00000001
0848   0901 00 00 
0849   0903 56            add b, a
0850   0904 E4            pop a
0851   0905             ; --- END TERMS
0852   0905 E7            pop d
0853   0906 5A            add d, b
0854   0907 E4            pop a
0855   0908 32            mov bl, [d]
0856   0909 A7 00         mov bh, 0
0857   090B 38 00 00      mov c, 0
0858   090E             ; --- START RELATIONAL
0859   090E D7            push a
0860   090F 11            mov a, b
0861   0910 FD 2E 40 00   mov32 cb, $00000040
0861   0914 00 00 
0862   0916 B0            cmp a, b
0863   0917 FD 71         seq ; ==
0864   0919 E4            pop a
0865   091A             ; --- END RELATIONAL
0866   091A C0 00 00      cmp b, 0
0867   091D C6 33 09      je _if16_exit
0868   0920             _if16_TRUE:
0869   0920             ; count++; 
0870   0920                             
0871   0920 FA FF FF      lea d, [bp + -1] ; $count
0872   0923 2A            mov b, [d]
0873   0924 38 00 00      mov c, 0
0874   0927 11            mov a, b
0875   0928 FD 77         inc b
0876   092A FA FF FF      lea d, [bp + -1] ; $count
0877   092D FD 43         mov [d], b
0878   092F 27            mov b, a
0879   0930 0A 33 09      jmp _if16_exit
0880   0933             _if16_exit:
0881   0933             ; if(currState[i][j+-1] == '@') 		count++; 
0882   0933             _if17_cond:
0883   0933                             
0884   0933 3B CC 18      mov d, _currState_data ; $currState
0885   0936 D7            push a
0886   0937 DA            push d
0887   0938                             
0888   0938 FA 05 00      lea d, [bp + 5] ; $i
0889   093B 2A            mov b, [d]
0890   093C 38 00 00      mov c, 0
0891   093F E7            pop d
0892   0940 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0893   0944 DA            push d
0894   0945                             
0895   0945 FA 07 00      lea d, [bp + 7] ; $j
0896   0948 2A            mov b, [d]
0897   0949 38 00 00      mov c, 0
0898   094C             ; --- START TERMS
0899   094C D7            push a
0900   094D 11            mov a, b
0901   094E FD 2E FF FF   mov32 cb, $ffffffff
0901   0952 FF FF 
0902   0954 56            add b, a
0903   0955 E4            pop a
0904   0956             ; --- END TERMS
0905   0956 E7            pop d
0906   0957 5A            add d, b
0907   0958 E4            pop a
0908   0959 32            mov bl, [d]
0909   095A A7 00         mov bh, 0
0910   095C 38 00 00      mov c, 0
0911   095F             ; --- START RELATIONAL
0912   095F D7            push a
0913   0960 11            mov a, b
0914   0961 FD 2E 40 00   mov32 cb, $00000040
0914   0965 00 00 
0915   0967 B0            cmp a, b
0916   0968 FD 71         seq ; ==
0917   096A E4            pop a
0918   096B             ; --- END RELATIONAL
0919   096B C0 00 00      cmp b, 0
0920   096E C6 84 09      je _if17_exit
0921   0971             _if17_TRUE:
0922   0971             ; count++; 
0923   0971                             
0924   0971 FA FF FF      lea d, [bp + -1] ; $count
0925   0974 2A            mov b, [d]
0926   0975 38 00 00      mov c, 0
0927   0978 11            mov a, b
0928   0979 FD 77         inc b
0929   097B FA FF FF      lea d, [bp + -1] ; $count
0930   097E FD 43         mov [d], b
0931   0980 27            mov b, a
0932   0981 0A 84 09      jmp _if17_exit
0933   0984             _if17_exit:
0934   0984             ; if(currState[i][j+1] == '@') 			count++; 
0935   0984             _if18_cond:
0936   0984                             
0937   0984 3B CC 18      mov d, _currState_data ; $currState
0938   0987 D7            push a
0939   0988 DA            push d
0940   0989                             
0941   0989 FA 05 00      lea d, [bp + 5] ; $i
0942   098C 2A            mov b, [d]
0943   098D 38 00 00      mov c, 0
0944   0990 E7            pop d
0945   0991 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0946   0995 DA            push d
0947   0996                             
0948   0996 FA 07 00      lea d, [bp + 7] ; $j
0949   0999 2A            mov b, [d]
0950   099A 38 00 00      mov c, 0
0951   099D             ; --- START TERMS
0952   099D D7            push a
0953   099E 11            mov a, b
0954   099F FD 2E 01 00   mov32 cb, $00000001
0954   09A3 00 00 
0955   09A5 56            add b, a
0956   09A6 E4            pop a
0957   09A7             ; --- END TERMS
0958   09A7 E7            pop d
0959   09A8 5A            add d, b
0960   09A9 E4            pop a
0961   09AA 32            mov bl, [d]
0962   09AB A7 00         mov bh, 0
0963   09AD 38 00 00      mov c, 0
0964   09B0             ; --- START RELATIONAL
0965   09B0 D7            push a
0966   09B1 11            mov a, b
0967   09B2 FD 2E 40 00   mov32 cb, $00000040
0967   09B6 00 00 
0968   09B8 B0            cmp a, b
0969   09B9 FD 71         seq ; ==
0970   09BB E4            pop a
0971   09BC             ; --- END RELATIONAL
0972   09BC C0 00 00      cmp b, 0
0973   09BF C6 D5 09      je _if18_exit
0974   09C2             _if18_TRUE:
0975   09C2             ; count++; 
0976   09C2                             
0977   09C2 FA FF FF      lea d, [bp + -1] ; $count
0978   09C5 2A            mov b, [d]
0979   09C6 38 00 00      mov c, 0
0980   09C9 11            mov a, b
0981   09CA FD 77         inc b
0982   09CC FA FF FF      lea d, [bp + -1] ; $count
0983   09CF FD 43         mov [d], b
0984   09D1 27            mov b, a
0985   09D2 0A D5 09      jmp _if18_exit
0986   09D5             _if18_exit:
0987   09D5             ; if(currState[i+1][j+-1] == '@') 	count++; 
0988   09D5             _if19_cond:
0989   09D5                             
0990   09D5 3B CC 18      mov d, _currState_data ; $currState
0991   09D8 D7            push a
0992   09D9 DA            push d
0993   09DA                             
0994   09DA FA 05 00      lea d, [bp + 5] ; $i
0995   09DD 2A            mov b, [d]
0996   09DE 38 00 00      mov c, 0
0997   09E1             ; --- START TERMS
0998   09E1 D7            push a
0999   09E2 11            mov a, b
1000   09E3 FD 2E 01 00   mov32 cb, $00000001
1000   09E7 00 00 
1001   09E9 56            add b, a
1002   09EA E4            pop a
1003   09EB             ; --- END TERMS
1004   09EB E7            pop d
1005   09EC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
1006   09F0 DA            push d
1007   09F1                             
1008   09F1 FA 07 00      lea d, [bp + 7] ; $j
1009   09F4 2A            mov b, [d]
1010   09F5 38 00 00      mov c, 0
1011   09F8             ; --- START TERMS
1012   09F8 D7            push a
1013   09F9 11            mov a, b
1014   09FA FD 2E FF FF   mov32 cb, $ffffffff
1014   09FE FF FF 
1015   0A00 56            add b, a
1016   0A01 E4            pop a
1017   0A02             ; --- END TERMS
1018   0A02 E7            pop d
1019   0A03 5A            add d, b
1020   0A04 E4            pop a
1021   0A05 32            mov bl, [d]
1022   0A06 A7 00         mov bh, 0
1023   0A08 38 00 00      mov c, 0
1024   0A0B             ; --- START RELATIONAL
1025   0A0B D7            push a
1026   0A0C 11            mov a, b
1027   0A0D FD 2E 40 00   mov32 cb, $00000040
1027   0A11 00 00 
1028   0A13 B0            cmp a, b
1029   0A14 FD 71         seq ; ==
1030   0A16 E4            pop a
1031   0A17             ; --- END RELATIONAL
1032   0A17 C0 00 00      cmp b, 0
1033   0A1A C6 30 0A      je _if19_exit
1034   0A1D             _if19_TRUE:
1035   0A1D             ; count++; 
1036   0A1D                             
1037   0A1D FA FF FF      lea d, [bp + -1] ; $count
1038   0A20 2A            mov b, [d]
1039   0A21 38 00 00      mov c, 0
1040   0A24 11            mov a, b
1041   0A25 FD 77         inc b
1042   0A27 FA FF FF      lea d, [bp + -1] ; $count
1043   0A2A FD 43         mov [d], b
1044   0A2C 27            mov b, a
1045   0A2D 0A 30 0A      jmp _if19_exit
1046   0A30             _if19_exit:
1047   0A30             ; if(currState[i+1][j] == '@') 			count++; 
1048   0A30             _if20_cond:
1049   0A30                             
1050   0A30 3B CC 18      mov d, _currState_data ; $currState
1051   0A33 D7            push a
1052   0A34 DA            push d
1053   0A35                             
1054   0A35 FA 05 00      lea d, [bp + 5] ; $i
1055   0A38 2A            mov b, [d]
1056   0A39 38 00 00      mov c, 0
1057   0A3C             ; --- START TERMS
1058   0A3C D7            push a
1059   0A3D 11            mov a, b
1060   0A3E FD 2E 01 00   mov32 cb, $00000001
1060   0A42 00 00 
1061   0A44 56            add b, a
1062   0A45 E4            pop a
1063   0A46             ; --- END TERMS
1064   0A46 E7            pop d
1065   0A47 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
1066   0A4B DA            push d
1067   0A4C                             
1068   0A4C FA 07 00      lea d, [bp + 7] ; $j
1069   0A4F 2A            mov b, [d]
1070   0A50 38 00 00      mov c, 0
1071   0A53 E7            pop d
1072   0A54 5A            add d, b
1073   0A55 E4            pop a
1074   0A56 32            mov bl, [d]
1075   0A57 A7 00         mov bh, 0
1076   0A59 38 00 00      mov c, 0
1077   0A5C             ; --- START RELATIONAL
1078   0A5C D7            push a
1079   0A5D 11            mov a, b
1080   0A5E FD 2E 40 00   mov32 cb, $00000040
1080   0A62 00 00 
1081   0A64 B0            cmp a, b
1082   0A65 FD 71         seq ; ==
1083   0A67 E4            pop a
1084   0A68             ; --- END RELATIONAL
1085   0A68 C0 00 00      cmp b, 0
1086   0A6B C6 81 0A      je _if20_exit
1087   0A6E             _if20_TRUE:
1088   0A6E             ; count++; 
1089   0A6E                             
1090   0A6E FA FF FF      lea d, [bp + -1] ; $count
1091   0A71 2A            mov b, [d]
1092   0A72 38 00 00      mov c, 0
1093   0A75 11            mov a, b
1094   0A76 FD 77         inc b
1095   0A78 FA FF FF      lea d, [bp + -1] ; $count
1096   0A7B FD 43         mov [d], b
1097   0A7D 27            mov b, a
1098   0A7E 0A 81 0A      jmp _if20_exit
1099   0A81             _if20_exit:
1100   0A81             ; if(currState[i+1][j+1] == '@') 		count++; 
1101   0A81             _if21_cond:
1102   0A81                             
1103   0A81 3B CC 18      mov d, _currState_data ; $currState
1104   0A84 D7            push a
1105   0A85 DA            push d
1106   0A86                             
1107   0A86 FA 05 00      lea d, [bp + 5] ; $i
1108   0A89 2A            mov b, [d]
1109   0A8A 38 00 00      mov c, 0
1110   0A8D             ; --- START TERMS
1111   0A8D D7            push a
1112   0A8E 11            mov a, b
1113   0A8F FD 2E 01 00   mov32 cb, $00000001
1113   0A93 00 00 
1114   0A95 56            add b, a
1115   0A96 E4            pop a
1116   0A97             ; --- END TERMS
1117   0A97 E7            pop d
1118   0A98 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
1119   0A9C DA            push d
1120   0A9D                             
1121   0A9D FA 07 00      lea d, [bp + 7] ; $j
1122   0AA0 2A            mov b, [d]
1123   0AA1 38 00 00      mov c, 0
1124   0AA4             ; --- START TERMS
1125   0AA4 D7            push a
1126   0AA5 11            mov a, b
1127   0AA6 FD 2E 01 00   mov32 cb, $00000001
1127   0AAA 00 00 
1128   0AAC 56            add b, a
1129   0AAD E4            pop a
1130   0AAE             ; --- END TERMS
1131   0AAE E7            pop d
1132   0AAF 5A            add d, b
1133   0AB0 E4            pop a
1134   0AB1 32            mov bl, [d]
1135   0AB2 A7 00         mov bh, 0
1136   0AB4 38 00 00      mov c, 0
1137   0AB7             ; --- START RELATIONAL
1138   0AB7 D7            push a
1139   0AB8 11            mov a, b
1140   0AB9 FD 2E 40 00   mov32 cb, $00000040
1140   0ABD 00 00 
1141   0ABF B0            cmp a, b
1142   0AC0 FD 71         seq ; ==
1143   0AC2 E4            pop a
1144   0AC3             ; --- END RELATIONAL
1145   0AC3 C0 00 00      cmp b, 0
1146   0AC6 C6 DC 0A      je _if21_exit
1147   0AC9             _if21_TRUE:
1148   0AC9             ; count++; 
1149   0AC9                             
1150   0AC9 FA FF FF      lea d, [bp + -1] ; $count
1151   0ACC 2A            mov b, [d]
1152   0ACD 38 00 00      mov c, 0
1153   0AD0 11            mov a, b
1154   0AD1 FD 77         inc b
1155   0AD3 FA FF FF      lea d, [bp + -1] ; $count
1156   0AD6 FD 43         mov [d], b
1157   0AD8 27            mov b, a
1158   0AD9 0A DC 0A      jmp _if21_exit
1159   0ADC             _if21_exit:
1160   0ADC             ; return count; 
1161   0ADC                             
1162   0ADC FA FF FF      lea d, [bp + -1] ; $count
1163   0ADF 2A            mov b, [d]
1164   0AE0 38 00 00      mov c, 0
1165   0AE3 F9            leave
1166   0AE4 09            ret
1167   0AE5             
1168   0AE5             printf:
1169   0AE5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1170   0AE8             ; char *p, *format_p; 
1171   0AE8 52 02 00      sub sp, 2
1172   0AEB 52 02 00      sub sp, 2
1173   0AEE             ; format_p = format; 
1174   0AEE FA FD FF      lea d, [bp + -3] ; $format_p
1175   0AF1 DA            push d
1176   0AF2                             
1177   0AF2 FA 05 00      lea d, [bp + 5] ; $format
1178   0AF5 2A            mov b, [d]
1179   0AF6 38 00 00      mov c, 0
1180   0AF9 E7            pop d
1181   0AFA FD 43         mov [d], b
1182   0AFC             ; p = &format + 2; 
1183   0AFC FA FF FF      lea d, [bp + -1] ; $p
1184   0AFF DA            push d
1185   0B00                             
1186   0B00 FA 05 00      lea d, [bp + 5] ; $format
1187   0B03 2D            mov b, d
1188   0B04             ; --- START TERMS
1189   0B04 D7            push a
1190   0B05 11            mov a, b
1191   0B06 FD 2E 02 00   mov32 cb, $00000002
1191   0B0A 00 00 
1192   0B0C 56            add b, a
1193   0B0D E4            pop a
1194   0B0E             ; --- END TERMS
1195   0B0E E7            pop d
1196   0B0F FD 43         mov [d], b
1197   0B11             ; for(;;){ 
1198   0B11             _for22_init:
1199   0B11             _for22_cond:
1200   0B11             _for22_block:
1201   0B11             ; if(!*format_p) break; 
1202   0B11             _if23_cond:
1203   0B11                             
1204   0B11 FA FD FF      lea d, [bp + -3] ; $format_p
1205   0B14 2A            mov b, [d]
1206   0B15 38 00 00      mov c, 0
1207   0B18 74            mov d, b
1208   0B19 32            mov bl, [d]
1209   0B1A A7 00         mov bh, 0
1210   0B1C 38 00 00      mov c, 0
1211   0B1F C0 00 00      cmp b, 0
1212   0B22 FD 71         seq ; !
1213   0B24 C0 00 00      cmp b, 0
1214   0B27 C6 30 0B      je _if23_else
1215   0B2A             _if23_TRUE:
1216   0B2A             ; break; 
1217   0B2A 0A E0 0D      jmp _for22_exit ; for break
1218   0B2D 0A DD 0D      jmp _if23_exit
1219   0B30             _if23_else:
1220   0B30             ; if(*format_p == '%'){ 
1221   0B30             _if24_cond:
1222   0B30                             
1223   0B30 FA FD FF      lea d, [bp + -3] ; $format_p
1224   0B33 2A            mov b, [d]
1225   0B34 38 00 00      mov c, 0
1226   0B37 74            mov d, b
1227   0B38 32            mov bl, [d]
1228   0B39 A7 00         mov bh, 0
1229   0B3B 38 00 00      mov c, 0
1230   0B3E             ; --- START RELATIONAL
1231   0B3E D7            push a
1232   0B3F 11            mov a, b
1233   0B40 FD 2E 25 00   mov32 cb, $00000025
1233   0B44 00 00 
1234   0B46 B0            cmp a, b
1235   0B47 FD 71         seq ; ==
1236   0B49 E4            pop a
1237   0B4A             ; --- END RELATIONAL
1238   0B4A C0 00 00      cmp b, 0
1239   0B4D C6 B8 0D      je _if24_else
1240   0B50             _if24_TRUE:
1241   0B50             ; format_p++; 
1242   0B50                             
1243   0B50 FA FD FF      lea d, [bp + -3] ; $format_p
1244   0B53 2A            mov b, [d]
1245   0B54 38 00 00      mov c, 0
1246   0B57 FD 77         inc b
1247   0B59 FA FD FF      lea d, [bp + -3] ; $format_p
1248   0B5C FD 43         mov [d], b
1249   0B5E FD 7D         dec b
1250   0B60             ; switch(*format_p){ 
1251   0B60             _switch25_expr:
1252   0B60                             
1253   0B60 FA FD FF      lea d, [bp + -3] ; $format_p
1254   0B63 2A            mov b, [d]
1255   0B64 38 00 00      mov c, 0
1256   0B67 74            mov d, b
1257   0B68 32            mov bl, [d]
1258   0B69 A7 00         mov bh, 0
1259   0B6B 38 00 00      mov c, 0
1260   0B6E             _switch25_comparisons:
1261   0B6E C1 6C         cmp bl, $6c
1262   0B70 C6 9C 0B      je _switch25_case0
1263   0B73 C1 4C         cmp bl, $4c
1264   0B75 C6 9C 0B      je _switch25_case1
1265   0B78 C1 64         cmp bl, $64
1266   0B7A C6 AC 0C      je _switch25_case2
1267   0B7D C1 69         cmp bl, $69
1268   0B7F C6 AC 0C      je _switch25_case3
1269   0B82 C1 75         cmp bl, $75
1270   0B84 C6 DC 0C      je _switch25_case4
1271   0B87 C1 78         cmp bl, $78
1272   0B89 C6 0C 0D      je _switch25_case5
1273   0B8C C1 63         cmp bl, $63
1274   0B8E C6 3C 0D      je _switch25_case6
1275   0B91 C1 73         cmp bl, $73
1276   0B93 C6 6C 0D      je _switch25_case7
1277   0B96 0A 99 0D      jmp _switch25_default
1278   0B99 0A A5 0D      jmp _switch25_exit
1279   0B9C             _switch25_case0:
1280   0B9C             _switch25_case1:
1281   0B9C             ; format_p++; 
1282   0B9C                             
1283   0B9C FA FD FF      lea d, [bp + -3] ; $format_p
1284   0B9F 2A            mov b, [d]
1285   0BA0 38 00 00      mov c, 0
1286   0BA3 FD 77         inc b
1287   0BA5 FA FD FF      lea d, [bp + -3] ; $format_p
1288   0BA8 FD 43         mov [d], b
1289   0BAA FD 7D         dec b
1290   0BAC             ; if(*format_p == 'd' || *format_p == 'i') 
1291   0BAC             _if26_cond:
1292   0BAC                             
1293   0BAC FA FD FF      lea d, [bp + -3] ; $format_p
1294   0BAF 2A            mov b, [d]
1295   0BB0 38 00 00      mov c, 0
1296   0BB3 74            mov d, b
1297   0BB4 32            mov bl, [d]
1298   0BB5 A7 00         mov bh, 0
1299   0BB7 38 00 00      mov c, 0
1300   0BBA             ; --- START RELATIONAL
1301   0BBA D7            push a
1302   0BBB 11            mov a, b
1303   0BBC FD 2E 64 00   mov32 cb, $00000064
1303   0BC0 00 00 
1304   0BC2 B0            cmp a, b
1305   0BC3 FD 71         seq ; ==
1306   0BC5 E4            pop a
1307   0BC6             ; --- END RELATIONAL
1308   0BC6             ; --- START LOGICAL OR
1309   0BC6 D7            push a
1310   0BC7 11            mov a, b
1311   0BC8 FA FD FF      lea d, [bp + -3] ; $format_p
1312   0BCB 2A            mov b, [d]
1313   0BCC 38 00 00      mov c, 0
1314   0BCF 74            mov d, b
1315   0BD0 32            mov bl, [d]
1316   0BD1 A7 00         mov bh, 0
1317   0BD3 38 00 00      mov c, 0
1318   0BD6             ; --- START RELATIONAL
1319   0BD6 D7            push a
1320   0BD7 11            mov a, b
1321   0BD8 FD 2E 69 00   mov32 cb, $00000069
1321   0BDC 00 00 
1322   0BDE B0            cmp a, b
1323   0BDF FD 71         seq ; ==
1324   0BE1 E4            pop a
1325   0BE2             ; --- END RELATIONAL
1326   0BE2 FD A8         sor a, b ; ||
1327   0BE4 E4            pop a
1328   0BE5             ; --- END LOGICAL OR
1329   0BE5 C0 00 00      cmp b, 0
1330   0BE8 C6 09 0C      je _if26_else
1331   0BEB             _if26_TRUE:
1332   0BEB             ; print_signed_long(*(long *)p); 
1333   0BEB                             
1334   0BEB             ; --- START FUNCTION CALL
1335   0BEB                             
1336   0BEB FA FF FF      lea d, [bp + -1] ; $p
1337   0BEE 2A            mov b, [d]
1338   0BEF 38 00 00      mov c, 0
1339   0BF2 74            mov d, b
1340   0BF3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1341   0BF6 FD 39         mov c, b ; And place it into C
1342   0BF8 2A            mov b, [d] ; Lower Word in B
1343   0BF9 12            mov a, c
1344   0BFA FD AA         swp a
1345   0BFC D7            push a
1346   0BFD FD AB         swp b
1347   0BFF D8            push b
1348   0C00 07 E2 0D      call print_signed_long
1349   0C03 51 04 00      add sp, 4
1350   0C06             ; --- END FUNCTION CALL
1351   0C06 0A 91 0C      jmp _if26_exit
1352   0C09             _if26_else:
1353   0C09             ; if(*format_p == 'u') 
1354   0C09             _if27_cond:
1355   0C09                             
1356   0C09 FA FD FF      lea d, [bp + -3] ; $format_p
1357   0C0C 2A            mov b, [d]
1358   0C0D 38 00 00      mov c, 0
1359   0C10 74            mov d, b
1360   0C11 32            mov bl, [d]
1361   0C12 A7 00         mov bh, 0
1362   0C14 38 00 00      mov c, 0
1363   0C17             ; --- START RELATIONAL
1364   0C17 D7            push a
1365   0C18 11            mov a, b
1366   0C19 FD 2E 75 00   mov32 cb, $00000075
1366   0C1D 00 00 
1367   0C1F B0            cmp a, b
1368   0C20 FD 71         seq ; ==
1369   0C22 E4            pop a
1370   0C23             ; --- END RELATIONAL
1371   0C23 C0 00 00      cmp b, 0
1372   0C26 C6 47 0C      je _if27_else
1373   0C29             _if27_TRUE:
1374   0C29             ; print_unsigned_long(*(unsigned long *)p); 
1375   0C29                             
1376   0C29             ; --- START FUNCTION CALL
1377   0C29                             
1378   0C29 FA FF FF      lea d, [bp + -1] ; $p
1379   0C2C 2A            mov b, [d]
1380   0C2D 38 00 00      mov c, 0
1381   0C30 74            mov d, b
1382   0C31 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1383   0C34 FD 39         mov c, b ; And place it into C
1384   0C36 2A            mov b, [d] ; Lower Word in B
1385   0C37 12            mov a, c
1386   0C38 FD AA         swp a
1387   0C3A D7            push a
1388   0C3B FD AB         swp b
1389   0C3D D8            push b
1390   0C3E 07 75 0F      call print_unsigned_long
1391   0C41 51 04 00      add sp, 4
1392   0C44             ; --- END FUNCTION CALL
1393   0C44 0A 91 0C      jmp _if27_exit
1394   0C47             _if27_else:
1395   0C47             ; if(*format_p == 'x') 
1396   0C47             _if28_cond:
1397   0C47                             
1398   0C47 FA FD FF      lea d, [bp + -3] ; $format_p
1399   0C4A 2A            mov b, [d]
1400   0C4B 38 00 00      mov c, 0
1401   0C4E 74            mov d, b
1402   0C4F 32            mov bl, [d]
1403   0C50 A7 00         mov bh, 0
1404   0C52 38 00 00      mov c, 0
1405   0C55             ; --- START RELATIONAL
1406   0C55 D7            push a
1407   0C56 11            mov a, b
1408   0C57 FD 2E 78 00   mov32 cb, $00000078
1408   0C5B 00 00 
1409   0C5D B0            cmp a, b
1410   0C5E FD 71         seq ; ==
1411   0C60 E4            pop a
1412   0C61             ; --- END RELATIONAL
1413   0C61 C0 00 00      cmp b, 0
1414   0C64 C6 85 0C      je _if28_else
1415   0C67             _if28_TRUE:
1416   0C67             ; printx32(*(long int *)p); 
1417   0C67                             
1418   0C67             ; --- START FUNCTION CALL
1419   0C67                             
1420   0C67 FA FF FF      lea d, [bp + -1] ; $p
1421   0C6A 2A            mov b, [d]
1422   0C6B 38 00 00      mov c, 0
1423   0C6E 74            mov d, b
1424   0C6F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1425   0C72 FD 39         mov c, b ; And place it into C
1426   0C74 2A            mov b, [d] ; Lower Word in B
1427   0C75 12            mov a, c
1428   0C76 FD AA         swp a
1429   0C78 D7            push a
1430   0C79 FD AB         swp b
1431   0C7B D8            push b
1432   0C7C 07 A9 10      call printx32
1433   0C7F 51 04 00      add sp, 4
1434   0C82             ; --- END FUNCTION CALL
1435   0C82 0A 91 0C      jmp _if28_exit
1436   0C85             _if28_else:
1437   0C85             ; err("Unexpected format in printf."); 
1438   0C85                             
1439   0C85             ; --- START FUNCTION CALL
1440   0C85                             
1441   0C85 26 9D 1D      mov b, _s3 ; "Unexpected format in printf."
1442   0C88 FD AB         swp b
1443   0C8A D8            push b
1444   0C8B 07 09 11      call err
1445   0C8E 51 02 00      add sp, 2
1446   0C91             ; --- END FUNCTION CALL
1447   0C91             _if28_exit:
1448   0C91             _if27_exit:
1449   0C91             _if26_exit:
1450   0C91             ; p = p + 4; 
1451   0C91 FA FF FF      lea d, [bp + -1] ; $p
1452   0C94 DA            push d
1453   0C95                             
1454   0C95 FA FF FF      lea d, [bp + -1] ; $p
1455   0C98 2A            mov b, [d]
1456   0C99 38 00 00      mov c, 0
1457   0C9C             ; --- START TERMS
1458   0C9C D7            push a
1459   0C9D 11            mov a, b
1460   0C9E FD 2E 04 00   mov32 cb, $00000004
1460   0CA2 00 00 
1461   0CA4 56            add b, a
1462   0CA5 E4            pop a
1463   0CA6             ; --- END TERMS
1464   0CA6 E7            pop d
1465   0CA7 FD 43         mov [d], b
1466   0CA9             ; break; 
1467   0CA9 0A A5 0D      jmp _switch25_exit ; case break
1468   0CAC             _switch25_case2:
1469   0CAC             _switch25_case3:
1470   0CAC             ; print_signed(*(int*)p); 
1471   0CAC                             
1472   0CAC             ; --- START FUNCTION CALL
1473   0CAC                             
1474   0CAC FA FF FF      lea d, [bp + -1] ; $p
1475   0CAF 2A            mov b, [d]
1476   0CB0 38 00 00      mov c, 0
1477   0CB3 74            mov d, b
1478   0CB4 2A            mov b, [d]
1479   0CB5 38 00 00      mov c, 0
1480   0CB8 FD AB         swp b
1481   0CBA D8            push b
1482   0CBB 07 37 11      call print_signed
1483   0CBE 51 02 00      add sp, 2
1484   0CC1             ; --- END FUNCTION CALL
1485   0CC1             ; p = p + 2; 
1486   0CC1 FA FF FF      lea d, [bp + -1] ; $p
1487   0CC4 DA            push d
1488   0CC5                             
1489   0CC5 FA FF FF      lea d, [bp + -1] ; $p
1490   0CC8 2A            mov b, [d]
1491   0CC9 38 00 00      mov c, 0
1492   0CCC             ; --- START TERMS
1493   0CCC D7            push a
1494   0CCD 11            mov a, b
1495   0CCE FD 2E 02 00   mov32 cb, $00000002
1495   0CD2 00 00 
1496   0CD4 56            add b, a
1497   0CD5 E4            pop a
1498   0CD6             ; --- END TERMS
1499   0CD6 E7            pop d
1500   0CD7 FD 43         mov [d], b
1501   0CD9             ; break; 
1502   0CD9 0A A5 0D      jmp _switch25_exit ; case break
1503   0CDC             _switch25_case4:
1504   0CDC             ; print_unsigned(*(unsigned int*)p); 
1505   0CDC                             
1506   0CDC             ; --- START FUNCTION CALL
1507   0CDC                             
1508   0CDC FA FF FF      lea d, [bp + -1] ; $p
1509   0CDF 2A            mov b, [d]
1510   0CE0 38 00 00      mov c, 0
1511   0CE3 74            mov d, b
1512   0CE4 2A            mov b, [d]
1513   0CE5 38 00 00      mov c, 0
1514   0CE8 FD AB         swp b
1515   0CEA D8            push b
1516   0CEB 07 88 12      call print_unsigned
1517   0CEE 51 02 00      add sp, 2
1518   0CF1             ; --- END FUNCTION CALL
1519   0CF1             ; p = p + 2; 
1520   0CF1 FA FF FF      lea d, [bp + -1] ; $p
1521   0CF4 DA            push d
1522   0CF5                             
1523   0CF5 FA FF FF      lea d, [bp + -1] ; $p
1524   0CF8 2A            mov b, [d]
1525   0CF9 38 00 00      mov c, 0
1526   0CFC             ; --- START TERMS
1527   0CFC D7            push a
1528   0CFD 11            mov a, b
1529   0CFE FD 2E 02 00   mov32 cb, $00000002
1529   0D02 00 00 
1530   0D04 56            add b, a
1531   0D05 E4            pop a
1532   0D06             ; --- END TERMS
1533   0D06 E7            pop d
1534   0D07 FD 43         mov [d], b
1535   0D09             ; break; 
1536   0D09 0A A5 0D      jmp _switch25_exit ; case break
1537   0D0C             _switch25_case5:
1538   0D0C             ; printx16(*(int*)p); 
1539   0D0C                             
1540   0D0C             ; --- START FUNCTION CALL
1541   0D0C                             
1542   0D0C FA FF FF      lea d, [bp + -1] ; $p
1543   0D0F 2A            mov b, [d]
1544   0D10 38 00 00      mov c, 0
1545   0D13 74            mov d, b
1546   0D14 2A            mov b, [d]
1547   0D15 38 00 00      mov c, 0
1548   0D18 FD AB         swp b
1549   0D1A D8            push b
1550   0D1B 07 A0 13      call printx16
1551   0D1E 51 02 00      add sp, 2
1552   0D21             ; --- END FUNCTION CALL
1553   0D21             ; p = p + 2; 
1554   0D21 FA FF FF      lea d, [bp + -1] ; $p
1555   0D24 DA            push d
1556   0D25                             
1557   0D25 FA FF FF      lea d, [bp + -1] ; $p
1558   0D28 2A            mov b, [d]
1559   0D29 38 00 00      mov c, 0
1560   0D2C             ; --- START TERMS
1561   0D2C D7            push a
1562   0D2D 11            mov a, b
1563   0D2E FD 2E 02 00   mov32 cb, $00000002
1563   0D32 00 00 
1564   0D34 56            add b, a
1565   0D35 E4            pop a
1566   0D36             ; --- END TERMS
1567   0D36 E7            pop d
1568   0D37 FD 43         mov [d], b
1569   0D39             ; break; 
1570   0D39 0A A5 0D      jmp _switch25_exit ; case break
1571   0D3C             _switch25_case6:
1572   0D3C             ; putchar(*(char*)p); 
1573   0D3C                             
1574   0D3C             ; --- START FUNCTION CALL
1575   0D3C                             
1576   0D3C FA FF FF      lea d, [bp + -1] ; $p
1577   0D3F 2A            mov b, [d]
1578   0D40 38 00 00      mov c, 0
1579   0D43 74            mov d, b
1580   0D44 32            mov bl, [d]
1581   0D45 A7 00         mov bh, 0
1582   0D47 38 00 00      mov c, 0
1583   0D4A DD            push bl
1584   0D4B 07 67 0F      call putchar
1585   0D4E 51 01 00      add sp, 1
1586   0D51             ; --- END FUNCTION CALL
1587   0D51             ; p = p + 1; 
1588   0D51 FA FF FF      lea d, [bp + -1] ; $p
1589   0D54 DA            push d
1590   0D55                             
1591   0D55 FA FF FF      lea d, [bp + -1] ; $p
1592   0D58 2A            mov b, [d]
1593   0D59 38 00 00      mov c, 0
1594   0D5C             ; --- START TERMS
1595   0D5C D7            push a
1596   0D5D 11            mov a, b
1597   0D5E FD 2E 01 00   mov32 cb, $00000001
1597   0D62 00 00 
1598   0D64 56            add b, a
1599   0D65 E4            pop a
1600   0D66             ; --- END TERMS
1601   0D66 E7            pop d
1602   0D67 FD 43         mov [d], b
1603   0D69             ; break; 
1604   0D69 0A A5 0D      jmp _switch25_exit ; case break
1605   0D6C             _switch25_case7:
1606   0D6C             ; print(*(char**)p); 
1607   0D6C                             
1608   0D6C             ; --- START FUNCTION CALL
1609   0D6C                             
1610   0D6C FA FF FF      lea d, [bp + -1] ; $p
1611   0D6F 2A            mov b, [d]
1612   0D70 38 00 00      mov c, 0
1613   0D73 74            mov d, b
1614   0D74 2A            mov b, [d]
1615   0D75 FD AB         swp b
1616   0D77 D8            push b
1617   0D78 07 1E 11      call print
1618   0D7B 51 02 00      add sp, 2
1619   0D7E             ; --- END FUNCTION CALL
1620   0D7E             ; p = p + 2; 
1621   0D7E FA FF FF      lea d, [bp + -1] ; $p
1622   0D81 DA            push d
1623   0D82                             
1624   0D82 FA FF FF      lea d, [bp + -1] ; $p
1625   0D85 2A            mov b, [d]
1626   0D86 38 00 00      mov c, 0
1627   0D89             ; --- START TERMS
1628   0D89 D7            push a
1629   0D8A 11            mov a, b
1630   0D8B FD 2E 02 00   mov32 cb, $00000002
1630   0D8F 00 00 
1631   0D91 56            add b, a
1632   0D92 E4            pop a
1633   0D93             ; --- END TERMS
1634   0D93 E7            pop d
1635   0D94 FD 43         mov [d], b
1636   0D96             ; break; 
1637   0D96 0A A5 0D      jmp _switch25_exit ; case break
1638   0D99             _switch25_default:
1639   0D99             ; print("Error: Unknown argument type.\n"); 
1640   0D99                             
1641   0D99             ; --- START FUNCTION CALL
1642   0D99                             
1643   0D99 26 BA 1D      mov b, _s4 ; "Error: Unknown argument type.\n"
1644   0D9C FD AB         swp b
1645   0D9E D8            push b
1646   0D9F 07 1E 11      call print
1647   0DA2 51 02 00      add sp, 2
1648   0DA5             ; --- END FUNCTION CALL
1649   0DA5             _switch25_exit:
1650   0DA5             ; format_p++; 
1651   0DA5                             
1652   0DA5 FA FD FF      lea d, [bp + -3] ; $format_p
1653   0DA8 2A            mov b, [d]
1654   0DA9 38 00 00      mov c, 0
1655   0DAC FD 77         inc b
1656   0DAE FA FD FF      lea d, [bp + -3] ; $format_p
1657   0DB1 FD 43         mov [d], b
1658   0DB3 FD 7D         dec b
1659   0DB5 0A DD 0D      jmp _if24_exit
1660   0DB8             _if24_else:
1661   0DB8             ; putchar(*format_p); 
1662   0DB8                             
1663   0DB8             ; --- START FUNCTION CALL
1664   0DB8                             
1665   0DB8 FA FD FF      lea d, [bp + -3] ; $format_p
1666   0DBB 2A            mov b, [d]
1667   0DBC 38 00 00      mov c, 0
1668   0DBF 74            mov d, b
1669   0DC0 32            mov bl, [d]
1670   0DC1 A7 00         mov bh, 0
1671   0DC3 38 00 00      mov c, 0
1672   0DC6 DD            push bl
1673   0DC7 07 67 0F      call putchar
1674   0DCA 51 01 00      add sp, 1
1675   0DCD             ; --- END FUNCTION CALL
1676   0DCD             ; format_p++; 
1677   0DCD                             
1678   0DCD FA FD FF      lea d, [bp + -3] ; $format_p
1679   0DD0 2A            mov b, [d]
1680   0DD1 38 00 00      mov c, 0
1681   0DD4 FD 77         inc b
1682   0DD6 FA FD FF      lea d, [bp + -3] ; $format_p
1683   0DD9 FD 43         mov [d], b
1684   0DDB FD 7D         dec b
1685   0DDD             _if24_exit:
1686   0DDD             _if23_exit:
1687   0DDD             _for22_update:
1688   0DDD 0A 11 0B      jmp _for22_cond
1689   0DE0             _for22_exit:
1690   0DE0 F9            leave
1691   0DE1 09            ret
1692   0DE2             
1693   0DE2             print_signed_long:
1694   0DE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1695   0DE5             ; char digits[10]; 
1696   0DE5 52 0A 00      sub sp, 10
1697   0DE8             ; int i = 0; 
1698   0DE8 52 02 00      sub sp, 2
1699   0DEB             ; --- START LOCAL VAR INITIALIZATION
1700   0DEB FA F5 FF      lea d, [bp + -11] ; $i
1701   0DEE DA            push d
1702   0DEF                             
1703   0DEF FD 2E 00 00   mov32 cb, $00000000
1703   0DF3 00 00 
1704   0DF5 E7            pop d
1705   0DF6 FD 43         mov [d], b
1706   0DF8             ; --- END LOCAL VAR INITIALIZATION
1707   0DF8             ; if (num < 0) { 
1708   0DF8             _if29_cond:
1709   0DF8                             
1710   0DF8 FA 05 00      lea d, [bp + 5] ; $num
1711   0DFB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1712   0DFE FD 39         mov c, b ; And place it into C
1713   0E00 2A            mov b, [d] ; Lower Word in B
1714   0E01             ; --- START RELATIONAL
1715   0E01 D7            push a
1716   0E02 FD D8         push g
1717   0E04 11            mov a, b
1718   0E05 FD 7A         mov g, c
1719   0E07 FD 2E 00 00   mov32 cb, $00000000
1719   0E0B 00 00 
1720   0E0D FD AF         cmp32 ga, cb
1721   0E0F FD 73         slt ; <
1722   0E11 FD F1         pop g
1723   0E13 E4            pop a
1724   0E14             ; --- END RELATIONAL
1725   0E14 C0 00 00      cmp b, 0
1726   0E17 C6 49 0E      je _if29_else
1727   0E1A             _if29_TRUE:
1728   0E1A             ; putchar('-'); 
1729   0E1A                             
1730   0E1A             ; --- START FUNCTION CALL
1731   0E1A                             
1732   0E1A FD 2E 2D 00   mov32 cb, $0000002d
1732   0E1E 00 00 
1733   0E20 DD            push bl
1734   0E21 07 67 0F      call putchar
1735   0E24 51 01 00      add sp, 1
1736   0E27             ; --- END FUNCTION CALL
1737   0E27             ; num = -num; 
1738   0E27 FA 05 00      lea d, [bp + 5] ; $num
1739   0E2A DA            push d
1740   0E2B                             
1741   0E2B FA 05 00      lea d, [bp + 5] ; $num
1742   0E2E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1743   0E31 FD 39         mov c, b ; And place it into C
1744   0E33 2A            mov b, [d] ; Lower Word in B
1745   0E34 12            mov a, c
1746   0E35 95            not a
1747   0E36 97            not b
1748   0E37 55 01 00      add b, 1
1749   0E3A 5B 00 00      adc a, 0
1750   0E3D 39            mov c, a
1751   0E3E E7            pop d
1752   0E3F FD 43         mov [d], b
1753   0E41 28            mov b, c
1754   0E42 FD 44 02 00   mov [d + 2], b
1755   0E46 0A 7D 0E      jmp _if29_exit
1756   0E49             _if29_else:
1757   0E49             ; if (num == 0) { 
1758   0E49             _if30_cond:
1759   0E49                             
1760   0E49 FA 05 00      lea d, [bp + 5] ; $num
1761   0E4C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1762   0E4F FD 39         mov c, b ; And place it into C
1763   0E51 2A            mov b, [d] ; Lower Word in B
1764   0E52             ; --- START RELATIONAL
1765   0E52 D7            push a
1766   0E53 FD D8         push g
1767   0E55 11            mov a, b
1768   0E56 FD 7A         mov g, c
1769   0E58 FD 2E 00 00   mov32 cb, $00000000
1769   0E5C 00 00 
1770   0E5E FD AF         cmp32 ga, cb
1771   0E60 FD 71         seq ; ==
1772   0E62 FD F1         pop g
1773   0E64 E4            pop a
1774   0E65             ; --- END RELATIONAL
1775   0E65 C0 00 00      cmp b, 0
1776   0E68 C6 7D 0E      je _if30_exit
1777   0E6B             _if30_TRUE:
1778   0E6B             ; putchar('0'); 
1779   0E6B                             
1780   0E6B             ; --- START FUNCTION CALL
1781   0E6B                             
1782   0E6B FD 2E 30 00   mov32 cb, $00000030
1782   0E6F 00 00 
1783   0E71 DD            push bl
1784   0E72 07 67 0F      call putchar
1785   0E75 51 01 00      add sp, 1
1786   0E78             ; --- END FUNCTION CALL
1787   0E78             ; return; 
1788   0E78 F9            leave
1789   0E79 09            ret
1790   0E7A 0A 7D 0E      jmp _if30_exit
1791   0E7D             _if30_exit:
1792   0E7D             _if29_exit:
1793   0E7D             ; while (num > 0) { 
1794   0E7D             _while31_cond:
1795   0E7D                             
1796   0E7D FA 05 00      lea d, [bp + 5] ; $num
1797   0E80 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1798   0E83 FD 39         mov c, b ; And place it into C
1799   0E85 2A            mov b, [d] ; Lower Word in B
1800   0E86             ; --- START RELATIONAL
1801   0E86 D7            push a
1802   0E87 FD D8         push g
1803   0E89 11            mov a, b
1804   0E8A FD 7A         mov g, c
1805   0E8C FD 2E 00 00   mov32 cb, $00000000
1805   0E90 00 00 
1806   0E92 FD AF         cmp32 ga, cb
1807   0E94 FD 7F         sgt
1808   0E96 FD F1         pop g
1809   0E98 E4            pop a
1810   0E99             ; --- END RELATIONAL
1811   0E99 C0 00 00      cmp b, 0
1812   0E9C C6 1D 0F      je _while31_exit
1813   0E9F             _while31_block:
1814   0E9F             ; digits[i] = '0' + (num % 10); 
1815   0E9F FA F7 FF      lea d, [bp + -9] ; $digits
1816   0EA2 D7            push a
1817   0EA3 DA            push d
1818   0EA4                             
1819   0EA4 FA F5 FF      lea d, [bp + -11] ; $i
1820   0EA7 2A            mov b, [d]
1821   0EA8 38 00 00      mov c, 0
1822   0EAB E7            pop d
1823   0EAC 5A            add d, b
1824   0EAD E4            pop a
1825   0EAE DA            push d
1826   0EAF                             
1827   0EAF FD 2E 30 00   mov32 cb, $00000030
1827   0EB3 00 00 
1828   0EB5             ; --- START TERMS
1829   0EB5 D7            push a
1830   0EB6 11            mov a, b
1831   0EB7                             
1832   0EB7 FA 05 00      lea d, [bp + 5] ; $num
1833   0EBA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1834   0EBD FD 39         mov c, b ; And place it into C
1835   0EBF 2A            mov b, [d] ; Lower Word in B
1836   0EC0             ; --- START FACTORS
1837   0EC0 D7            push a
1838   0EC1 FD D8         push g
1839   0EC3 11            mov a, b
1840   0EC4 FD 7A         mov g, c
1841   0EC6 FD 2E 0A 00   mov32 cb, $0000000a
1841   0ECA 00 00 
1842   0ECC FD D8         push g ; save 'g' as the div instruction uses it
1843   0ECE AE            div a, b ; %, a: quotient, b: remainder
1844   0ECF 11            mov a, b
1845   0ED0 FD F1         pop g
1846   0ED2 FD 38         mov c, g
1847   0ED4 27            mov b, a
1848   0ED5 FD F1         pop g
1849   0ED7 E4            pop a
1850   0ED8             ; --- END FACTORS
1851   0ED8 FD 15         add32 cb, ga
1852   0EDA E4            pop a
1853   0EDB             ; --- END TERMS
1854   0EDB E7            pop d
1855   0EDC FD 3E         mov [d], bl
1856   0EDE             ; num = num / 10; 
1857   0EDE FA 05 00      lea d, [bp + 5] ; $num
1858   0EE1 DA            push d
1859   0EE2                             
1860   0EE2 FA 05 00      lea d, [bp + 5] ; $num
1861   0EE5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1862   0EE8 FD 39         mov c, b ; And place it into C
1863   0EEA 2A            mov b, [d] ; Lower Word in B
1864   0EEB             ; --- START FACTORS
1865   0EEB D7            push a
1866   0EEC FD D8         push g
1867   0EEE 11            mov a, b
1868   0EEF FD 7A         mov g, c
1869   0EF1 FD 2E 0A 00   mov32 cb, $0000000a
1869   0EF5 00 00 
1870   0EF7 FD D8         push g ; save 'g' as the div instruction uses it
1871   0EF9 AE            div a, b ; /, a: quotient, b: remainder
1872   0EFA FD F1         pop g
1873   0EFC FD 38         mov c, g
1874   0EFE 27            mov b, a
1875   0EFF FD F1         pop g
1876   0F01 E4            pop a
1877   0F02             ; --- END FACTORS
1878   0F02 E7            pop d
1879   0F03 FD 43         mov [d], b
1880   0F05 28            mov b, c
1881   0F06 FD 44 02 00   mov [d + 2], b
1882   0F0A             ; i++; 
1883   0F0A                             
1884   0F0A FA F5 FF      lea d, [bp + -11] ; $i
1885   0F0D 2A            mov b, [d]
1886   0F0E 38 00 00      mov c, 0
1887   0F11 11            mov a, b
1888   0F12 FD 77         inc b
1889   0F14 FA F5 FF      lea d, [bp + -11] ; $i
1890   0F17 FD 43         mov [d], b
1891   0F19 27            mov b, a
1892   0F1A 0A 7D 0E      jmp _while31_cond
1893   0F1D             _while31_exit:
1894   0F1D             ; while (i > 0) { 
1895   0F1D             _while34_cond:
1896   0F1D                             
1897   0F1D FA F5 FF      lea d, [bp + -11] ; $i
1898   0F20 2A            mov b, [d]
1899   0F21 38 00 00      mov c, 0
1900   0F24             ; --- START RELATIONAL
1901   0F24 D7            push a
1902   0F25 11            mov a, b
1903   0F26 FD 2E 00 00   mov32 cb, $00000000
1903   0F2A 00 00 
1904   0F2C B0            cmp a, b
1905   0F2D FD 7F         sgt ; >
1906   0F2F E4            pop a
1907   0F30             ; --- END RELATIONAL
1908   0F30 C0 00 00      cmp b, 0
1909   0F33 C6 65 0F      je _while34_exit
1910   0F36             _while34_block:
1911   0F36             ; i--; 
1912   0F36                             
1913   0F36 FA F5 FF      lea d, [bp + -11] ; $i
1914   0F39 2A            mov b, [d]
1915   0F3A 38 00 00      mov c, 0
1916   0F3D 11            mov a, b
1917   0F3E FD 7D         dec b
1918   0F40 FA F5 FF      lea d, [bp + -11] ; $i
1919   0F43 FD 43         mov [d], b
1920   0F45 27            mov b, a
1921   0F46             ; putchar(digits[i]); 
1922   0F46                             
1923   0F46             ; --- START FUNCTION CALL
1924   0F46                             
1925   0F46 FA F7 FF      lea d, [bp + -9] ; $digits
1926   0F49 D7            push a
1927   0F4A DA            push d
1928   0F4B                             
1929   0F4B FA F5 FF      lea d, [bp + -11] ; $i
1930   0F4E 2A            mov b, [d]
1931   0F4F 38 00 00      mov c, 0
1932   0F52 E7            pop d
1933   0F53 5A            add d, b
1934   0F54 E4            pop a
1935   0F55 32            mov bl, [d]
1936   0F56 A7 00         mov bh, 0
1937   0F58 38 00 00      mov c, 0
1938   0F5B DD            push bl
1939   0F5C 07 67 0F      call putchar
1940   0F5F 51 01 00      add sp, 1
1941   0F62             ; --- END FUNCTION CALL
1942   0F62 0A 1D 0F      jmp _while34_cond
1943   0F65             _while34_exit:
1944   0F65 F9            leave
1945   0F66 09            ret
1946   0F67             
1947   0F67             putchar:
1948   0F67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1949   0F6A             ; --- BEGIN INLINE ASM SEGMENT
1950   0F6A FA 05 00      lea d, [bp + 5] ; $c
1951   0F6D 1E            mov al, [d]
1952   0F6E 23            mov ah, al
1953   0F6F 19 00         mov al, 0
1954   0F71 05 03         syscall sys_io      ; char in AH
1955   0F73             ; --- END INLINE ASM SEGMENT
1956   0F73 F9            leave
1957   0F74 09            ret
1958   0F75             
1959   0F75             print_unsigned_long:
1960   0F75 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1961   0F78             ; char digits[10]; 
1962   0F78 52 0A 00      sub sp, 10
1963   0F7B             ; int i; 
1964   0F7B 52 02 00      sub sp, 2
1965   0F7E             ; i = 0; 
1966   0F7E FA F5 FF      lea d, [bp + -11] ; $i
1967   0F81 DA            push d
1968   0F82                             
1969   0F82 FD 2E 00 00   mov32 cb, $00000000
1969   0F86 00 00 
1970   0F88 E7            pop d
1971   0F89 FD 43         mov [d], b
1972   0F8B             ; if(num == 0){ 
1973   0F8B             _if35_cond:
1974   0F8B                             
1975   0F8B FA 05 00      lea d, [bp + 5] ; $num
1976   0F8E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1977   0F91 FD 39         mov c, b ; And place it into C
1978   0F93 2A            mov b, [d] ; Lower Word in B
1979   0F94             ; --- START RELATIONAL
1980   0F94 D7            push a
1981   0F95 FD D8         push g
1982   0F97 11            mov a, b
1983   0F98 FD 7A         mov g, c
1984   0F9A FD 2E 00 00   mov32 cb, $00000000
1984   0F9E 00 00 
1985   0FA0 FD AF         cmp32 ga, cb
1986   0FA2 FD 71         seq ; ==
1987   0FA4 FD F1         pop g
1988   0FA6 E4            pop a
1989   0FA7             ; --- END RELATIONAL
1990   0FA7 C0 00 00      cmp b, 0
1991   0FAA C6 BF 0F      je _if35_exit
1992   0FAD             _if35_TRUE:
1993   0FAD             ; putchar('0'); 
1994   0FAD                             
1995   0FAD             ; --- START FUNCTION CALL
1996   0FAD                             
1997   0FAD FD 2E 30 00   mov32 cb, $00000030
1997   0FB1 00 00 
1998   0FB3 DD            push bl
1999   0FB4 07 67 0F      call putchar
2000   0FB7 51 01 00      add sp, 1
2001   0FBA             ; --- END FUNCTION CALL
2002   0FBA             ; return; 
2003   0FBA F9            leave
2004   0FBB 09            ret
2005   0FBC 0A BF 0F      jmp _if35_exit
2006   0FBF             _if35_exit:
2007   0FBF             ; while (num > 0) { 
2008   0FBF             _while36_cond:
2009   0FBF                             
2010   0FBF FA 05 00      lea d, [bp + 5] ; $num
2011   0FC2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2012   0FC5 FD 39         mov c, b ; And place it into C
2013   0FC7 2A            mov b, [d] ; Lower Word in B
2014   0FC8             ; --- START RELATIONAL
2015   0FC8 D7            push a
2016   0FC9 FD D8         push g
2017   0FCB 11            mov a, b
2018   0FCC FD 7A         mov g, c
2019   0FCE FD 2E 00 00   mov32 cb, $00000000
2019   0FD2 00 00 
2020   0FD4 FD AF         cmp32 ga, cb
2021   0FD6 FD 81         sgu
2022   0FD8 FD F1         pop g
2023   0FDA E4            pop a
2024   0FDB             ; --- END RELATIONAL
2025   0FDB C0 00 00      cmp b, 0
2026   0FDE C6 5F 10      je _while36_exit
2027   0FE1             _while36_block:
2028   0FE1             ; digits[i] = '0' + (num % 10); 
2029   0FE1 FA F7 FF      lea d, [bp + -9] ; $digits
2030   0FE4 D7            push a
2031   0FE5 DA            push d
2032   0FE6                             
2033   0FE6 FA F5 FF      lea d, [bp + -11] ; $i
2034   0FE9 2A            mov b, [d]
2035   0FEA 38 00 00      mov c, 0
2036   0FED E7            pop d
2037   0FEE 5A            add d, b
2038   0FEF E4            pop a
2039   0FF0 DA            push d
2040   0FF1                             
2041   0FF1 FD 2E 30 00   mov32 cb, $00000030
2041   0FF5 00 00 
2042   0FF7             ; --- START TERMS
2043   0FF7 D7            push a
2044   0FF8 11            mov a, b
2045   0FF9                             
2046   0FF9 FA 05 00      lea d, [bp + 5] ; $num
2047   0FFC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2048   0FFF FD 39         mov c, b ; And place it into C
2049   1001 2A            mov b, [d] ; Lower Word in B
2050   1002             ; --- START FACTORS
2051   1002 D7            push a
2052   1003 FD D8         push g
2053   1005 11            mov a, b
2054   1006 FD 7A         mov g, c
2055   1008 FD 2E 0A 00   mov32 cb, $0000000a
2055   100C 00 00 
2056   100E FD D8         push g ; save 'g' as the div instruction uses it
2057   1010 AE            div a, b ; %, a: quotient, b: remainder
2058   1011 11            mov a, b
2059   1012 FD F1         pop g
2060   1014 FD 38         mov c, g
2061   1016 27            mov b, a
2062   1017 FD F1         pop g
2063   1019 E4            pop a
2064   101A             ; --- END FACTORS
2065   101A FD 15         add32 cb, ga
2066   101C E4            pop a
2067   101D             ; --- END TERMS
2068   101D E7            pop d
2069   101E FD 3E         mov [d], bl
2070   1020             ; num = num / 10; 
2071   1020 FA 05 00      lea d, [bp + 5] ; $num
2072   1023 DA            push d
2073   1024                             
2074   1024 FA 05 00      lea d, [bp + 5] ; $num
2075   1027 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2076   102A FD 39         mov c, b ; And place it into C
2077   102C 2A            mov b, [d] ; Lower Word in B
2078   102D             ; --- START FACTORS
2079   102D D7            push a
2080   102E FD D8         push g
2081   1030 11            mov a, b
2082   1031 FD 7A         mov g, c
2083   1033 FD 2E 0A 00   mov32 cb, $0000000a
2083   1037 00 00 
2084   1039 FD D8         push g ; save 'g' as the div instruction uses it
2085   103B AE            div a, b ; /, a: quotient, b: remainder
2086   103C FD F1         pop g
2087   103E FD 38         mov c, g
2088   1040 27            mov b, a
2089   1041 FD F1         pop g
2090   1043 E4            pop a
2091   1044             ; --- END FACTORS
2092   1044 E7            pop d
2093   1045 FD 43         mov [d], b
2094   1047 28            mov b, c
2095   1048 FD 44 02 00   mov [d + 2], b
2096   104C             ; i++; 
2097   104C                             
2098   104C FA F5 FF      lea d, [bp + -11] ; $i
2099   104F 2A            mov b, [d]
2100   1050 38 00 00      mov c, 0
2101   1053 11            mov a, b
2102   1054 FD 77         inc b
2103   1056 FA F5 FF      lea d, [bp + -11] ; $i
2104   1059 FD 43         mov [d], b
2105   105B 27            mov b, a
2106   105C 0A BF 0F      jmp _while36_cond
2107   105F             _while36_exit:
2108   105F             ; while (i > 0) { 
2109   105F             _while39_cond:
2110   105F                             
2111   105F FA F5 FF      lea d, [bp + -11] ; $i
2112   1062 2A            mov b, [d]
2113   1063 38 00 00      mov c, 0
2114   1066             ; --- START RELATIONAL
2115   1066 D7            push a
2116   1067 11            mov a, b
2117   1068 FD 2E 00 00   mov32 cb, $00000000
2117   106C 00 00 
2118   106E B0            cmp a, b
2119   106F FD 7F         sgt ; >
2120   1071 E4            pop a
2121   1072             ; --- END RELATIONAL
2122   1072 C0 00 00      cmp b, 0
2123   1075 C6 A7 10      je _while39_exit
2124   1078             _while39_block:
2125   1078             ; i--; 
2126   1078                             
2127   1078 FA F5 FF      lea d, [bp + -11] ; $i
2128   107B 2A            mov b, [d]
2129   107C 38 00 00      mov c, 0
2130   107F 11            mov a, b
2131   1080 FD 7D         dec b
2132   1082 FA F5 FF      lea d, [bp + -11] ; $i
2133   1085 FD 43         mov [d], b
2134   1087 27            mov b, a
2135   1088             ; putchar(digits[i]); 
2136   1088                             
2137   1088             ; --- START FUNCTION CALL
2138   1088                             
2139   1088 FA F7 FF      lea d, [bp + -9] ; $digits
2140   108B D7            push a
2141   108C DA            push d
2142   108D                             
2143   108D FA F5 FF      lea d, [bp + -11] ; $i
2144   1090 2A            mov b, [d]
2145   1091 38 00 00      mov c, 0
2146   1094 E7            pop d
2147   1095 5A            add d, b
2148   1096 E4            pop a
2149   1097 32            mov bl, [d]
2150   1098 A7 00         mov bh, 0
2151   109A 38 00 00      mov c, 0
2152   109D DD            push bl
2153   109E 07 67 0F      call putchar
2154   10A1 51 01 00      add sp, 1
2155   10A4             ; --- END FUNCTION CALL
2156   10A4 0A 5F 10      jmp _while39_cond
2157   10A7             _while39_exit:
2158   10A7 F9            leave
2159   10A8 09            ret
2160   10A9             
2161   10A9             printx32:
2162   10A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2163   10AC             ; --- BEGIN INLINE ASM SEGMENT
2164   10AC FA 05 00      lea d, [bp + 5] ; $hex
2165   10AF 2B 02 00      mov b, [d+2]
2166   10B2 07 BB 10      call print_u16x_printx32
2167   10B5 2A            mov b, [d]
2168   10B6 07 BB 10      call print_u16x_printx32
2169   10B9             ; --- END INLINE ASM SEGMENT
2170   10B9             ; return; 
2171   10B9 F9            leave
2172   10BA 09            ret
2173   10BB             ; --- BEGIN INLINE ASM SEGMENT
2174   10BB             print_u16x_printx32:
2175   10BB D7            push a
2176   10BC D8            push b
2177   10BD DD            push bl
2178   10BE 30            mov bl, bh
2179   10BF 07 DD 10      call _itoa_printx32        ; convert bh to char in A
2180   10C2 2F            mov bl, al        ; save al
2181   10C3 19 00         mov al, 0
2182   10C5 05 03         syscall sys_io        ; display AH
2183   10C7 24            mov ah, bl        ; retrieve al
2184   10C8 19 00         mov al, 0
2185   10CA 05 03         syscall sys_io        ; display AL
2186   10CC EA            pop bl
2187   10CD 07 DD 10      call _itoa_printx32        ; convert bh to char in A
2188   10D0 2F            mov bl, al        ; save al
2189   10D1 19 00         mov al, 0
2190   10D3 05 03         syscall sys_io        ; display AH
2191   10D5 24            mov ah, bl        ; retrieve al
2192   10D6 19 00         mov al, 0
2193   10D8 05 03         syscall sys_io        ; display AL
2194   10DA E5            pop b
2195   10DB E4            pop a
2196   10DC 09            ret
2197   10DD             _itoa_printx32:
2198   10DD DA            push d
2199   10DE D8            push b
2200   10DF A7 00         mov bh, 0
2201   10E1 FD A4 04      shr bl, 4  
2202   10E4 74            mov d, b
2203   10E5 1F F7 10      mov al, [d + s_hex_digits_printx32]
2204   10E8 23            mov ah, al
2205   10E9 E5            pop b
2206   10EA D8            push b
2207   10EB A7 00         mov bh, 0
2208   10ED FD 87 0F      and bl, $0F
2209   10F0 74            mov d, b
2210   10F1 1F F7 10      mov al, [d + s_hex_digits_printx32]
2211   10F4 E5            pop b
2212   10F5 E7            pop d
2213   10F6 09            ret
2214   10F7 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2214   10FB 34 35 36 37 
2214   10FF 38 39 41 42 
2214   1103 43 44 45 46 
2215   1107             ; --- END INLINE ASM SEGMENT
2216   1107 F9            leave
2217   1108 09            ret
2218   1109             
2219   1109             err:
2220   1109 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2221   110C             ; print(e); 
2222   110C                             
2223   110C             ; --- START FUNCTION CALL
2224   110C                             
2225   110C FA 05 00      lea d, [bp + 5] ; $e
2226   110F 2A            mov b, [d]
2227   1110 38 00 00      mov c, 0
2228   1113 FD AB         swp b
2229   1115 D8            push b
2230   1116 07 1E 11      call print
2231   1119 51 02 00      add sp, 2
2232   111C             ; --- END FUNCTION CALL
2233   111C F9            leave
2234   111D 09            ret
2235   111E             
2236   111E             print:
2237   111E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2238   1121             ; --- BEGIN INLINE ASM SEGMENT
2239   1121 FA 05 00      lea d, [bp + 5] ; $s
2240   1124 FD 2A         mov d, [d]
2241   1126             _puts_L1_print:
2242   1126 1E            mov al, [d]
2243   1127 B9 00         cmp al, 0
2244   1129 C6 35 11      jz _puts_END_print
2245   112C 23            mov ah, al
2246   112D 19 00         mov al, 0
2247   112F 05 03         syscall sys_io
2248   1131 79            inc d
2249   1132 0A 26 11      jmp _puts_L1_print
2250   1135             _puts_END_print:
2251   1135             ; --- END INLINE ASM SEGMENT
2252   1135 F9            leave
2253   1136 09            ret
2254   1137             
2255   1137             print_signed:
2256   1137 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2257   113A             ; char digits[5]; 
2258   113A 52 05 00      sub sp, 5
2259   113D             ; int i = 0; 
2260   113D 52 02 00      sub sp, 2
2261   1140             ; --- START LOCAL VAR INITIALIZATION
2262   1140 FA FA FF      lea d, [bp + -6] ; $i
2263   1143 DA            push d
2264   1144                             
2265   1144 FD 2E 00 00   mov32 cb, $00000000
2265   1148 00 00 
2266   114A E7            pop d
2267   114B FD 43         mov [d], b
2268   114D             ; --- END LOCAL VAR INITIALIZATION
2269   114D             ; if (num < 0) { 
2270   114D             _if40_cond:
2271   114D                             
2272   114D FA 05 00      lea d, [bp + 5] ; $num
2273   1150 2A            mov b, [d]
2274   1151 38 00 00      mov c, 0
2275   1154             ; --- START RELATIONAL
2276   1154 D7            push a
2277   1155 11            mov a, b
2278   1156 FD 2E 00 00   mov32 cb, $00000000
2278   115A 00 00 
2279   115C B0            cmp a, b
2280   115D FD 73         slt ; < (signed)
2281   115F E4            pop a
2282   1160             ; --- END RELATIONAL
2283   1160 C0 00 00      cmp b, 0
2284   1163 C6 86 11      je _if40_else
2285   1166             _if40_TRUE:
2286   1166             ; putchar('-'); 
2287   1166                             
2288   1166             ; --- START FUNCTION CALL
2289   1166                             
2290   1166 FD 2E 2D 00   mov32 cb, $0000002d
2290   116A 00 00 
2291   116C DD            push bl
2292   116D 07 67 0F      call putchar
2293   1170 51 01 00      add sp, 1
2294   1173             ; --- END FUNCTION CALL
2295   1173             ; num = -num; 
2296   1173 FA 05 00      lea d, [bp + 5] ; $num
2297   1176 DA            push d
2298   1177                             
2299   1177 FA 05 00      lea d, [bp + 5] ; $num
2300   117A 2A            mov b, [d]
2301   117B 38 00 00      mov c, 0
2302   117E FD 97         neg b
2303   1180 E7            pop d
2304   1181 FD 43         mov [d], b
2305   1183 0A B1 11      jmp _if40_exit
2306   1186             _if40_else:
2307   1186             ; if (num == 0) { 
2308   1186             _if41_cond:
2309   1186                             
2310   1186 FA 05 00      lea d, [bp + 5] ; $num
2311   1189 2A            mov b, [d]
2312   118A 38 00 00      mov c, 0
2313   118D             ; --- START RELATIONAL
2314   118D D7            push a
2315   118E 11            mov a, b
2316   118F FD 2E 00 00   mov32 cb, $00000000
2316   1193 00 00 
2317   1195 B0            cmp a, b
2318   1196 FD 71         seq ; ==
2319   1198 E4            pop a
2320   1199             ; --- END RELATIONAL
2321   1199 C0 00 00      cmp b, 0
2322   119C C6 B1 11      je _if41_exit
2323   119F             _if41_TRUE:
2324   119F             ; putchar('0'); 
2325   119F                             
2326   119F             ; --- START FUNCTION CALL
2327   119F                             
2328   119F FD 2E 30 00   mov32 cb, $00000030
2328   11A3 00 00 
2329   11A5 DD            push bl
2330   11A6 07 67 0F      call putchar
2331   11A9 51 01 00      add sp, 1
2332   11AC             ; --- END FUNCTION CALL
2333   11AC             ; return; 
2334   11AC F9            leave
2335   11AD 09            ret
2336   11AE 0A B1 11      jmp _if41_exit
2337   11B1             _if41_exit:
2338   11B1             _if40_exit:
2339   11B1             ; while (num > 0) { 
2340   11B1             _while42_cond:
2341   11B1                             
2342   11B1 FA 05 00      lea d, [bp + 5] ; $num
2343   11B4 2A            mov b, [d]
2344   11B5 38 00 00      mov c, 0
2345   11B8             ; --- START RELATIONAL
2346   11B8 D7            push a
2347   11B9 11            mov a, b
2348   11BA FD 2E 00 00   mov32 cb, $00000000
2348   11BE 00 00 
2349   11C0 B0            cmp a, b
2350   11C1 FD 7F         sgt ; >
2351   11C3 E4            pop a
2352   11C4             ; --- END RELATIONAL
2353   11C4 C0 00 00      cmp b, 0
2354   11C7 C6 3E 12      je _while42_exit
2355   11CA             _while42_block:
2356   11CA             ; digits[i] = '0' + (num % 10); 
2357   11CA FA FC FF      lea d, [bp + -4] ; $digits
2358   11CD D7            push a
2359   11CE DA            push d
2360   11CF                             
2361   11CF FA FA FF      lea d, [bp + -6] ; $i
2362   11D2 2A            mov b, [d]
2363   11D3 38 00 00      mov c, 0
2364   11D6 E7            pop d
2365   11D7 5A            add d, b
2366   11D8 E4            pop a
2367   11D9 DA            push d
2368   11DA                             
2369   11DA FD 2E 30 00   mov32 cb, $00000030
2369   11DE 00 00 
2370   11E0             ; --- START TERMS
2371   11E0 D7            push a
2372   11E1 11            mov a, b
2373   11E2                             
2374   11E2 FA 05 00      lea d, [bp + 5] ; $num
2375   11E5 2A            mov b, [d]
2376   11E6 38 00 00      mov c, 0
2377   11E9             ; --- START FACTORS
2378   11E9 D7            push a
2379   11EA FD D8         push g
2380   11EC 11            mov a, b
2381   11ED FD 7A         mov g, c
2382   11EF FD 2E 0A 00   mov32 cb, $0000000a
2382   11F3 00 00 
2383   11F5 FD D8         push g ; save 'g' as the div instruction uses it
2384   11F7 AE            div a, b ; %, a: quotient, b: remainder
2385   11F8 11            mov a, b
2386   11F9 FD F1         pop g
2387   11FB FD 38         mov c, g
2388   11FD 27            mov b, a
2389   11FE FD F1         pop g
2390   1200 E4            pop a
2391   1201             ; --- END FACTORS
2392   1201 56            add b, a
2393   1202 E4            pop a
2394   1203             ; --- END TERMS
2395   1203 E7            pop d
2396   1204 FD 3E         mov [d], bl
2397   1206             ; num = num / 10; 
2398   1206 FA 05 00      lea d, [bp + 5] ; $num
2399   1209 DA            push d
2400   120A                             
2401   120A FA 05 00      lea d, [bp + 5] ; $num
2402   120D 2A            mov b, [d]
2403   120E 38 00 00      mov c, 0
2404   1211             ; --- START FACTORS
2405   1211 D7            push a
2406   1212 FD D8         push g
2407   1214 11            mov a, b
2408   1215 FD 7A         mov g, c
2409   1217 FD 2E 0A 00   mov32 cb, $0000000a
2409   121B 00 00 
2410   121D FD D8         push g ; save 'g' as the div instruction uses it
2411   121F AE            div a, b ; /, a: quotient, b: remainder
2412   1220 FD F1         pop g
2413   1222 FD 38         mov c, g
2414   1224 27            mov b, a
2415   1225 FD F1         pop g
2416   1227 E4            pop a
2417   1228             ; --- END FACTORS
2418   1228 E7            pop d
2419   1229 FD 43         mov [d], b
2420   122B             ; i++; 
2421   122B                             
2422   122B FA FA FF      lea d, [bp + -6] ; $i
2423   122E 2A            mov b, [d]
2424   122F 38 00 00      mov c, 0
2425   1232 11            mov a, b
2426   1233 FD 77         inc b
2427   1235 FA FA FF      lea d, [bp + -6] ; $i
2428   1238 FD 43         mov [d], b
2429   123A 27            mov b, a
2430   123B 0A B1 11      jmp _while42_cond
2431   123E             _while42_exit:
2432   123E             ; while (i > 0) { 
2433   123E             _while45_cond:
2434   123E                             
2435   123E FA FA FF      lea d, [bp + -6] ; $i
2436   1241 2A            mov b, [d]
2437   1242 38 00 00      mov c, 0
2438   1245             ; --- START RELATIONAL
2439   1245 D7            push a
2440   1246 11            mov a, b
2441   1247 FD 2E 00 00   mov32 cb, $00000000
2441   124B 00 00 
2442   124D B0            cmp a, b
2443   124E FD 7F         sgt ; >
2444   1250 E4            pop a
2445   1251             ; --- END RELATIONAL
2446   1251 C0 00 00      cmp b, 0
2447   1254 C6 86 12      je _while45_exit
2448   1257             _while45_block:
2449   1257             ; i--; 
2450   1257                             
2451   1257 FA FA FF      lea d, [bp + -6] ; $i
2452   125A 2A            mov b, [d]
2453   125B 38 00 00      mov c, 0
2454   125E 11            mov a, b
2455   125F FD 7D         dec b
2456   1261 FA FA FF      lea d, [bp + -6] ; $i
2457   1264 FD 43         mov [d], b
2458   1266 27            mov b, a
2459   1267             ; putchar(digits[i]); 
2460   1267                             
2461   1267             ; --- START FUNCTION CALL
2462   1267                             
2463   1267 FA FC FF      lea d, [bp + -4] ; $digits
2464   126A D7            push a
2465   126B DA            push d
2466   126C                             
2467   126C FA FA FF      lea d, [bp + -6] ; $i
2468   126F 2A            mov b, [d]
2469   1270 38 00 00      mov c, 0
2470   1273 E7            pop d
2471   1274 5A            add d, b
2472   1275 E4            pop a
2473   1276 32            mov bl, [d]
2474   1277 A7 00         mov bh, 0
2475   1279 38 00 00      mov c, 0
2476   127C DD            push bl
2477   127D 07 67 0F      call putchar
2478   1280 51 01 00      add sp, 1
2479   1283             ; --- END FUNCTION CALL
2480   1283 0A 3E 12      jmp _while45_cond
2481   1286             _while45_exit:
2482   1286 F9            leave
2483   1287 09            ret
2484   1288             
2485   1288             print_unsigned:
2486   1288 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2487   128B             ; char digits[5]; 
2488   128B 52 05 00      sub sp, 5
2489   128E             ; int i; 
2490   128E 52 02 00      sub sp, 2
2491   1291             ; i = 0; 
2492   1291 FA FA FF      lea d, [bp + -6] ; $i
2493   1294 DA            push d
2494   1295                             
2495   1295 FD 2E 00 00   mov32 cb, $00000000
2495   1299 00 00 
2496   129B E7            pop d
2497   129C FD 43         mov [d], b
2498   129E             ; if(num == 0){ 
2499   129E             _if46_cond:
2500   129E                             
2501   129E FA 05 00      lea d, [bp + 5] ; $num
2502   12A1 2A            mov b, [d]
2503   12A2 38 00 00      mov c, 0
2504   12A5             ; --- START RELATIONAL
2505   12A5 D7            push a
2506   12A6 11            mov a, b
2507   12A7 FD 2E 00 00   mov32 cb, $00000000
2507   12AB 00 00 
2508   12AD B0            cmp a, b
2509   12AE FD 71         seq ; ==
2510   12B0 E4            pop a
2511   12B1             ; --- END RELATIONAL
2512   12B1 C0 00 00      cmp b, 0
2513   12B4 C6 C9 12      je _if46_exit
2514   12B7             _if46_TRUE:
2515   12B7             ; putchar('0'); 
2516   12B7                             
2517   12B7             ; --- START FUNCTION CALL
2518   12B7                             
2519   12B7 FD 2E 30 00   mov32 cb, $00000030
2519   12BB 00 00 
2520   12BD DD            push bl
2521   12BE 07 67 0F      call putchar
2522   12C1 51 01 00      add sp, 1
2523   12C4             ; --- END FUNCTION CALL
2524   12C4             ; return; 
2525   12C4 F9            leave
2526   12C5 09            ret
2527   12C6 0A C9 12      jmp _if46_exit
2528   12C9             _if46_exit:
2529   12C9             ; while (num > 0) { 
2530   12C9             _while47_cond:
2531   12C9                             
2532   12C9 FA 05 00      lea d, [bp + 5] ; $num
2533   12CC 2A            mov b, [d]
2534   12CD 38 00 00      mov c, 0
2535   12D0             ; --- START RELATIONAL
2536   12D0 D7            push a
2537   12D1 11            mov a, b
2538   12D2 FD 2E 00 00   mov32 cb, $00000000
2538   12D6 00 00 
2539   12D8 B0            cmp a, b
2540   12D9 FD 81         sgu ; > (unsigned)
2541   12DB E4            pop a
2542   12DC             ; --- END RELATIONAL
2543   12DC C0 00 00      cmp b, 0
2544   12DF C6 56 13      je _while47_exit
2545   12E2             _while47_block:
2546   12E2             ; digits[i] = '0' + (num % 10); 
2547   12E2 FA FC FF      lea d, [bp + -4] ; $digits
2548   12E5 D7            push a
2549   12E6 DA            push d
2550   12E7                             
2551   12E7 FA FA FF      lea d, [bp + -6] ; $i
2552   12EA 2A            mov b, [d]
2553   12EB 38 00 00      mov c, 0
2554   12EE E7            pop d
2555   12EF 5A            add d, b
2556   12F0 E4            pop a
2557   12F1 DA            push d
2558   12F2                             
2559   12F2 FD 2E 30 00   mov32 cb, $00000030
2559   12F6 00 00 
2560   12F8             ; --- START TERMS
2561   12F8 D7            push a
2562   12F9 11            mov a, b
2563   12FA                             
2564   12FA FA 05 00      lea d, [bp + 5] ; $num
2565   12FD 2A            mov b, [d]
2566   12FE 38 00 00      mov c, 0
2567   1301             ; --- START FACTORS
2568   1301 D7            push a
2569   1302 FD D8         push g
2570   1304 11            mov a, b
2571   1305 FD 7A         mov g, c
2572   1307 FD 2E 0A 00   mov32 cb, $0000000a
2572   130B 00 00 
2573   130D FD D8         push g ; save 'g' as the div instruction uses it
2574   130F AE            div a, b ; %, a: quotient, b: remainder
2575   1310 11            mov a, b
2576   1311 FD F1         pop g
2577   1313 FD 38         mov c, g
2578   1315 27            mov b, a
2579   1316 FD F1         pop g
2580   1318 E4            pop a
2581   1319             ; --- END FACTORS
2582   1319 56            add b, a
2583   131A E4            pop a
2584   131B             ; --- END TERMS
2585   131B E7            pop d
2586   131C FD 3E         mov [d], bl
2587   131E             ; num = num / 10; 
2588   131E FA 05 00      lea d, [bp + 5] ; $num
2589   1321 DA            push d
2590   1322                             
2591   1322 FA 05 00      lea d, [bp + 5] ; $num
2592   1325 2A            mov b, [d]
2593   1326 38 00 00      mov c, 0
2594   1329             ; --- START FACTORS
2595   1329 D7            push a
2596   132A FD D8         push g
2597   132C 11            mov a, b
2598   132D FD 7A         mov g, c
2599   132F FD 2E 0A 00   mov32 cb, $0000000a
2599   1333 00 00 
2600   1335 FD D8         push g ; save 'g' as the div instruction uses it
2601   1337 AE            div a, b ; /, a: quotient, b: remainder
2602   1338 FD F1         pop g
2603   133A FD 38         mov c, g
2604   133C 27            mov b, a
2605   133D FD F1         pop g
2606   133F E4            pop a
2607   1340             ; --- END FACTORS
2608   1340 E7            pop d
2609   1341 FD 43         mov [d], b
2610   1343             ; i++; 
2611   1343                             
2612   1343 FA FA FF      lea d, [bp + -6] ; $i
2613   1346 2A            mov b, [d]
2614   1347 38 00 00      mov c, 0
2615   134A 11            mov a, b
2616   134B FD 77         inc b
2617   134D FA FA FF      lea d, [bp + -6] ; $i
2618   1350 FD 43         mov [d], b
2619   1352 27            mov b, a
2620   1353 0A C9 12      jmp _while47_cond
2621   1356             _while47_exit:
2622   1356             ; while (i > 0) { 
2623   1356             _while50_cond:
2624   1356                             
2625   1356 FA FA FF      lea d, [bp + -6] ; $i
2626   1359 2A            mov b, [d]
2627   135A 38 00 00      mov c, 0
2628   135D             ; --- START RELATIONAL
2629   135D D7            push a
2630   135E 11            mov a, b
2631   135F FD 2E 00 00   mov32 cb, $00000000
2631   1363 00 00 
2632   1365 B0            cmp a, b
2633   1366 FD 7F         sgt ; >
2634   1368 E4            pop a
2635   1369             ; --- END RELATIONAL
2636   1369 C0 00 00      cmp b, 0
2637   136C C6 9E 13      je _while50_exit
2638   136F             _while50_block:
2639   136F             ; i--; 
2640   136F                             
2641   136F FA FA FF      lea d, [bp + -6] ; $i
2642   1372 2A            mov b, [d]
2643   1373 38 00 00      mov c, 0
2644   1376 11            mov a, b
2645   1377 FD 7D         dec b
2646   1379 FA FA FF      lea d, [bp + -6] ; $i
2647   137C FD 43         mov [d], b
2648   137E 27            mov b, a
2649   137F             ; putchar(digits[i]); 
2650   137F                             
2651   137F             ; --- START FUNCTION CALL
2652   137F                             
2653   137F FA FC FF      lea d, [bp + -4] ; $digits
2654   1382 D7            push a
2655   1383 DA            push d
2656   1384                             
2657   1384 FA FA FF      lea d, [bp + -6] ; $i
2658   1387 2A            mov b, [d]
2659   1388 38 00 00      mov c, 0
2660   138B E7            pop d
2661   138C 5A            add d, b
2662   138D E4            pop a
2663   138E 32            mov bl, [d]
2664   138F A7 00         mov bh, 0
2665   1391 38 00 00      mov c, 0
2666   1394 DD            push bl
2667   1395 07 67 0F      call putchar
2668   1398 51 01 00      add sp, 1
2669   139B             ; --- END FUNCTION CALL
2670   139B 0A 56 13      jmp _while50_cond
2671   139E             _while50_exit:
2672   139E F9            leave
2673   139F 09            ret
2674   13A0             
2675   13A0             printx16:
2676   13A0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2677   13A3             ; --- BEGIN INLINE ASM SEGMENT
2678   13A3 FA 05 00      lea d, [bp + 5] ; $hex
2679   13A6 2A            mov b, [d]
2680   13A7             print_u16x_printx16:
2681   13A7 DD            push bl
2682   13A8 30            mov bl, bh
2683   13A9 07 C6 13      call _itoa_printx16        ; convert bh to char in A
2684   13AC 2F            mov bl, al        ; save al
2685   13AD 19 00         mov al, 0
2686   13AF 05 03         syscall sys_io        ; display AH
2687   13B1 24            mov ah, bl        ; retrieve al
2688   13B2 19 00         mov al, 0
2689   13B4 05 03         syscall sys_io        ; display AL
2690   13B6 EA            pop bl
2691   13B7 07 C6 13      call _itoa_printx16        ; convert bh to char in A
2692   13BA 2F            mov bl, al        ; save al
2693   13BB 19 00         mov al, 0
2694   13BD 05 03         syscall sys_io        ; display AH
2695   13BF 24            mov ah, bl        ; retrieve al
2696   13C0 19 00         mov al, 0
2697   13C2 05 03         syscall sys_io        ; display AL
2698   13C4             ; --- END INLINE ASM SEGMENT
2699   13C4             ; return; 
2700   13C4 F9            leave
2701   13C5 09            ret
2702   13C6             ; --- BEGIN INLINE ASM SEGMENT
2703   13C6             _itoa_printx16:
2704   13C6 DA            push d
2705   13C7 D8            push b
2706   13C8 A7 00         mov bh, 0
2707   13CA FD A4 04      shr bl, 4  
2708   13CD 74            mov d, b
2709   13CE 1F E0 13      mov al, [d + s_hex_digits_printx16]
2710   13D1 23            mov ah, al
2711   13D2 E5            pop b
2712   13D3 D8            push b
2713   13D4 A7 00         mov bh, 0
2714   13D6 FD 87 0F      and bl, $0F
2715   13D9 74            mov d, b
2716   13DA 1F E0 13      mov al, [d + s_hex_digits_printx16]
2717   13DD E5            pop b
2718   13DE E7            pop d
2719   13DF 09            ret
2720   13E0 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2720   13E4 34 35 36 37 
2720   13E8 38 39 41 42 
2720   13EC 43 44 45 46 
2721   13F0             ; --- END INLINE ASM SEGMENT
2722   13F0 F9            leave
2723   13F1 09            ret
2724   13F2             
2725   13F2             puts:
2726   13F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2727   13F5             ; --- BEGIN INLINE ASM SEGMENT
2728   13F5 FA 05 00      lea d, [bp + 5] ; $s
2729   13F8 FD 2A         mov d, [d]
2730   13FA             _puts_L1_puts:
2731   13FA 1E            mov al, [d]
2732   13FB B9 00         cmp al, 0
2733   13FD C6 09 14      jz _puts_END_puts
2734   1400 23            mov ah, al
2735   1401 19 00         mov al, 0
2736   1403 05 03         syscall sys_io
2737   1405 79            inc d
2738   1406 0A FA 13      jmp _puts_L1_puts
2739   1409             _puts_END_puts:
2740   1409 10 00 0A      mov a, $0A00
2741   140C 05 03         syscall sys_io
2742   140E             ; --- END INLINE ASM SEGMENT
2743   140E F9            leave
2744   140F 09            ret
2745   1410             ; --- END TEXT SEGMENT
2746   1410             
2747   1410             ; --- BEGIN DATA SEGMENT
2748   1410             _clear_data: 
2749   1410 00          .db 
2750   1411 1B 5B 32 4A .db $1b,$5b,$32,$4a,$1b,$5b,$48,$00,
2750   1415 1B 5B 48 00 
2751   1419 00 00 00    .fill 3, 0
2752   141C 00 00 00 00 _nextState_data: .fill 1200, 0
2752   1420 00 00 00 00 
2752   1424 00 00 00 00 
2752   1428 00 00 00 00 
2752   142C 00 00 00 00 
2752   1430 00 00 00 00 
2752   1434 00 00 00 00 
2752   1438 00 00 00 00 
2752   143C 00 00 00 00 
2752   1440 00 00 00 00 
2752   1444 00 00 00 00 
2752   1448 00 00 00 00 
2752   144C 00 00 00 00 
2752   1450 00 00 00 00 
2752   1454 00 00 00 00 
2752   1458 00 00 00 00 
2752   145C 00 00 00 00 
2752   1460 00 00 00 00 
2752   1464 00 00 00 00 
2752   1468 00 00 00 00 
2752   146C 00 00 00 00 
2752   1470 00 00 00 00 
2752   1474 00 00 00 00 
2752   1478 00 00 00 00 
2752   147C 00 00 00 00 
2752   1480 00 00 00 00 
2752   1484 00 00 00 00 
2752   1488 00 00 00 00 
2752   148C 00 00 00 00 
2752   1490 00 00 00 00 
2752   1494 00 00 00 00 
2752   1498 00 00 00 00 
2752   149C 00 00 00 00 
2752   14A0 00 00 00 00 
2752   14A4 00 00 00 00 
2752   14A8 00 00 00 00 
2752   14AC 00 00 00 00 
2752   14B0 00 00 00 00 
2752   14B4 00 00 00 00 
2752   14B8 00 00 00 00 
2752   14BC 00 00 00 00 
2752   14C0 00 00 00 00 
2752   14C4 00 00 00 00 
2752   14C8 00 00 00 00 
2752   14CC 00 00 00 00 
2752   14D0 00 00 00 00 
2752   14D4 00 00 00 00 
2752   14D8 00 00 00 00 
2752   14DC 00 00 00 00 
2752   14E0 00 00 00 00 
2752   14E4 00 00 00 00 
2752   14E8 00 00 00 00 
2752   14EC 00 00 00 00 
2752   14F0 00 00 00 00 
2752   14F4 00 00 00 00 
2752   14F8 00 00 00 00 
2752   14FC 00 00 00 00 
2752   1500 00 00 00 00 
2752   1504 00 00 00 00 
2752   1508 00 00 00 00 
2752   150C 00 00 00 00 
2752   1510 00 00 00 00 
2752   1514 00 00 00 00 
2752   1518 00 00 00 00 
2752   151C 00 00 00 00 
2752   1520 00 00 00 00 
2752   1524 00 00 00 00 
2752   1528 00 00 00 00 
2752   152C 00 00 00 00 
2752   1530 00 00 00 00 
2752   1534 00 00 00 00 
2752   1538 00 00 00 00 
2752   153C 00 00 00 00 
2752   1540 00 00 00 00 
2752   1544 00 00 00 00 
2752   1548 00 00 00 00 
2752   154C 00 00 00 00 
2752   1550 00 00 00 00 
2752   1554 00 00 00 00 
2752   1558 00 00 00 00 
2752   155C 00 00 00 00 
2752   1560 00 00 00 00 
2752   1564 00 00 00 00 
2752   1568 00 00 00 00 
2752   156C 00 00 00 00 
2752   1570 00 00 00 00 
2752   1574 00 00 00 00 
2752   1578 00 00 00 00 
2752   157C 00 00 00 00 
2752   1580 00 00 00 00 
2752   1584 00 00 00 00 
2752   1588 00 00 00 00 
2752   158C 00 00 00 00 
2752   1590 00 00 00 00 
2752   1594 00 00 00 00 
2752   1598 00 00 00 00 
2752   159C 00 00 00 00 
2752   15A0 00 00 00 00 
2752   15A4 00 00 00 00 
2752   15A8 00 00 00 00 
2752   15AC 00 00 00 00 
2752   15B0 00 00 00 00 
2752   15B4 00 00 00 00 
2752   15B8 00 00 00 00 
2752   15BC 00 00 00 00 
2752   15C0 00 00 00 00 
2752   15C4 00 00 00 00 
2752   15C8 00 00 00 00 
2752   15CC 00 00 00 00 
2752   15D0 00 00 00 00 
2752   15D4 00 00 00 00 
2752   15D8 00 00 00 00 
2752   15DC 00 00 00 00 
2752   15E0 00 00 00 00 
2752   15E4 00 00 00 00 
2752   15E8 00 00 00 00 
2752   15EC 00 00 00 00 
2752   15F0 00 00 00 00 
2752   15F4 00 00 00 00 
2752   15F8 00 00 00 00 
2752   15FC 00 00 00 00 
2752   1600 00 00 00 00 
2752   1604 00 00 00 00 
2752   1608 00 00 00 00 
2752   160C 00 00 00 00 
2752   1610 00 00 00 00 
2752   1614 00 00 00 00 
2752   1618 00 00 00 00 
2752   161C 00 00 00 00 
2752   1620 00 00 00 00 
2752   1624 00 00 00 00 
2752   1628 00 00 00 00 
2752   162C 00 00 00 00 
2752   1630 00 00 00 00 
2752   1634 00 00 00 00 
2752   1638 00 00 00 00 
2752   163C 00 00 00 00 
2752   1640 00 00 00 00 
2752   1644 00 00 00 00 
2752   1648 00 00 00 00 
2752   164C 00 00 00 00 
2752   1650 00 00 00 00 
2752   1654 00 00 00 00 
2752   1658 00 00 00 00 
2752   165C 00 00 00 00 
2752   1660 00 00 00 00 
2752   1664 00 00 00 00 
2752   1668 00 00 00 00 
2752   166C 00 00 00 00 
2752   1670 00 00 00 00 
2752   1674 00 00 00 00 
2752   1678 00 00 00 00 
2752   167C 00 00 00 00 
2752   1680 00 00 00 00 
2752   1684 00 00 00 00 
2752   1688 00 00 00 00 
2752   168C 00 00 00 00 
2752   1690 00 00 00 00 
2752   1694 00 00 00 00 
2752   1698 00 00 00 00 
2752   169C 00 00 00 00 
2752   16A0 00 00 00 00 
2752   16A4 00 00 00 00 
2752   16A8 00 00 00 00 
2752   16AC 00 00 00 00 
2752   16B0 00 00 00 00 
2752   16B4 00 00 00 00 
2752   16B8 00 00 00 00 
2752   16BC 00 00 00 00 
2752   16C0 00 00 00 00 
2752   16C4 00 00 00 00 
2752   16C8 00 00 00 00 
2752   16CC 00 00 00 00 
2752   16D0 00 00 00 00 
2752   16D4 00 00 00 00 
2752   16D8 00 00 00 00 
2752   16DC 00 00 00 00 
2752   16E0 00 00 00 00 
2752   16E4 00 00 00 00 
2752   16E8 00 00 00 00 
2752   16EC 00 00 00 00 
2752   16F0 00 00 00 00 
2752   16F4 00 00 00 00 
2752   16F8 00 00 00 00 
2752   16FC 00 00 00 00 
2752   1700 00 00 00 00 
2752   1704 00 00 00 00 
2752   1708 00 00 00 00 
2752   170C 00 00 00 00 
2752   1710 00 00 00 00 
2752   1714 00 00 00 00 
2752   1718 00 00 00 00 
2752   171C 00 00 00 00 
2752   1720 00 00 00 00 
2752   1724 00 00 00 00 
2752   1728 00 00 00 00 
2752   172C 00 00 00 00 
2752   1730 00 00 00 00 
2752   1734 00 00 00 00 
2752   1738 00 00 00 00 
2752   173C 00 00 00 00 
2752   1740 00 00 00 00 
2752   1744 00 00 00 00 
2752   1748 00 00 00 00 
2752   174C 00 00 00 00 
2752   1750 00 00 00 00 
2752   1754 00 00 00 00 
2752   1758 00 00 00 00 
2752   175C 00 00 00 00 
2752   1760 00 00 00 00 
2752   1764 00 00 00 00 
2752   1768 00 00 00 00 
2752   176C 00 00 00 00 
2752   1770 00 00 00 00 
2752   1774 00 00 00 00 
2752   1778 00 00 00 00 
2752   177C 00 00 00 00 
2752   1780 00 00 00 00 
2752   1784 00 00 00 00 
2752   1788 00 00 00 00 
2752   178C 00 00 00 00 
2752   1790 00 00 00 00 
2752   1794 00 00 00 00 
2752   1798 00 00 00 00 
2752   179C 00 00 00 00 
2752   17A0 00 00 00 00 
2752   17A4 00 00 00 00 
2752   17A8 00 00 00 00 
2752   17AC 00 00 00 00 
2752   17B0 00 00 00 00 
2752   17B4 00 00 00 00 
2752   17B8 00 00 00 00 
2752   17BC 00 00 00 00 
2752   17C0 00 00 00 00 
2752   17C4 00 00 00 00 
2752   17C8 00 00 00 00 
2752   17CC 00 00 00 00 
2752   17D0 00 00 00 00 
2752   17D4 00 00 00 00 
2752   17D8 00 00 00 00 
2752   17DC 00 00 00 00 
2752   17E0 00 00 00 00 
2752   17E4 00 00 00 00 
2752   17E8 00 00 00 00 
2752   17EC 00 00 00 00 
2752   17F0 00 00 00 00 
2752   17F4 00 00 00 00 
2752   17F8 00 00 00 00 
2752   17FC 00 00 00 00 
2752   1800 00 00 00 00 
2752   1804 00 00 00 00 
2752   1808 00 00 00 00 
2752   180C 00 00 00 00 
2752   1810 00 00 00 00 
2752   1814 00 00 00 00 
2752   1818 00 00 00 00 
2752   181C 00 00 00 00 
2752   1820 00 00 00 00 
2752   1824 00 00 00 00 
2752   1828 00 00 00 00 
2752   182C 00 00 00 00 
2752   1830 00 00 00 00 
2752   1834 00 00 00 00 
2752   1838 00 00 00 00 
2752   183C 00 00 00 00 
2752   1840 00 00 00 00 
2752   1844 00 00 00 00 
2752   1848 00 00 00 00 
2752   184C 00 00 00 00 
2752   1850 00 00 00 00 
2752   1854 00 00 00 00 
2752   1858 00 00 00 00 
2752   185C 00 00 00 00 
2752   1860 00 00 00 00 
2752   1864 00 00 00 00 
2752   1868 00 00 00 00 
2752   186C 00 00 00 00 
2752   1870 00 00 00 00 
2752   1874 00 00 00 00 
2752   1878 00 00 00 00 
2752   187C 00 00 00 00 
2752   1880 00 00 00 00 
2752   1884 00 00 00 00 
2752   1888 00 00 00 00 
2752   188C 00 00 00 00 
2752   1890 00 00 00 00 
2752   1894 00 00 00 00 
2752   1898 00 00 00 00 
2752   189C 00 00 00 00 
2752   18A0 00 00 00 00 
2752   18A4 00 00 00 00 
2752   18A8 00 00 00 00 
2752   18AC 00 00 00 00 
2752   18B0 00 00 00 00 
2752   18B4 00 00 00 00 
2752   18B8 00 00 00 00 
2752   18BC 00 00 00 00 
2752   18C0 00 00 00 00 
2752   18C4 00 00 00 00 
2752   18C8 00 00 00 00 
2753   18CC             _currState_data: 
2754   18CC 00          .db 
2755   18CD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2755   18D1 20 20 20 20 
2755   18D5 20 20 20 20 
2755   18D9 20 20 20 20 
2755   18DD 20 20 20 20 
2755   18E1 20 20 20 20 
2755   18E5 20 20 20 20 
2755   18E9 20 20 
2756   18EB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2756   18EF 20 20 20 20 
2756   18F3 20 20 20 20 
2756   18F7 20 20 20 20 
2756   18FB 20 20 20 20 
2756   18FF 20 20 20 20 
2756   1903 20 20 20 20 
2756   1907 20 20 
2757   1909 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2757   190D 20 20 20 20 
2757   1911 20 20 20 20 
2757   1915 20 20 20 20 
2757   1919 20 20 20 20 
2757   191D 20 20 20 20 
2757   1921 20 20 20 20 
2757   1925 20 20 
2758   1927 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2758   192B 20 20 20 20 
2758   192F 20 20 20 20 
2758   1933 20 20 20 20 
2758   1937 20 20 20 20 
2758   193B 20 20 20 20 
2758   193F 20 20 20 20 
2758   1943 20 20 
2759   1945 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2759   1949 20 20 20 20 
2759   194D 20 20 20 20 
2759   1951 20 20 20 20 
2759   1955 20 20 20 20 
2759   1959 20 20 20 20 
2759   195D 20 20 20 40 
2759   1961 20 20 
2760   1963 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2760   1967 20 20 20 20 
2760   196B 20 20 20 20 
2760   196F 20 20 20 20 
2760   1973 20 20 20 20 
2760   1977 20 20 20 20 
2760   197B 20 20 20 20 
2760   197F 20 20 
2761   1981 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2761   1985 20 40 20 40 
2761   1989 20 20 20 20 
2761   198D 20 20 20 20 
2761   1991 20 20 20 20 
2761   1995 20 20 20 20 
2761   1999 20 20 20 20 
2761   199D 20 20 
2762   199F 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
2762   19A3 20 40 40 20 
2762   19A7 20 20 20 20 
2762   19AB 20 40 40 20 
2762   19AF 20 20 20 20 
2762   19B3 20 20 20 20 
2762   19B7 20 20 20 40 
2762   19BB 40 20 
2763   19BD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2763   19C1 20 20 20 20 
2763   19C5 20 20 20 20 
2763   19C9 20 20 40 20 
2763   19CD 20 20 40 20 
2763   19D1 20 20 20 40 
2763   19D5 40 20 20 20 
2763   19D9 20 20 
2764   19DB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
2764   19DF 20 20 20 40 
2764   19E3 40 20 20 20 
2764   19E7 20 40 40 20 
2764   19EB 20 20 20 20 
2764   19EF 20 20 20 40 
2764   19F3 20 20 20 20 
2764   19F7 20 40 
2765   19F9 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2765   19FD 40 20 20 20 
2765   1A01 20 20 20 20 
2765   1A05 20 20 20 20 
2765   1A09 20 20 20 20 
2765   1A0D 20 20 20 40 
2765   1A11 40 20 20 20 
2765   1A15 20 20 
2766   1A17 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2766   1A1B 20 20 20 40 
2766   1A1F 20 40 40 20 
2766   1A23 20 20 20 40 
2766   1A27 20 40 20 20 
2766   1A2B 20 20 20 20 
2766   1A2F 20 20 20 20 
2766   1A33 20 20 
2767   1A35 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2767   1A39 20 20 20 20 
2767   1A3D 20 20 20 20 
2767   1A41 20 40 20 20 
2767   1A45 20 20 20 40 
2767   1A49 20 20 20 20 
2767   1A4D 20 20 20 40 
2767   1A51 20 20 
2768   1A53 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
2768   1A57 20 20 20 20 
2768   1A5B 20 20 20 20 
2768   1A5F 20 20 20 20 
2768   1A63 20 20 20 20 
2768   1A67 20 20 20 20 
2768   1A6B 40 20 20 20 
2768   1A6F 40 20 
2769   1A71 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2769   1A75 20 20 20 20 
2769   1A79 20 20 20 20 
2769   1A7D 20 20 20 20 
2769   1A81 20 20 20 20 
2769   1A85 20 20 20 20 
2769   1A89 20 20 20 20 
2769   1A8D 20 20 
2770   1A8F 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2770   1A93 20 40 40 20 
2770   1A97 20 20 20 20 
2770   1A9B 20 20 20 20 
2770   1A9F 20 20 20 20 
2770   1AA3 20 20 20 20 
2770   1AA7 20 20 20 20 
2770   1AAB 20 20 
2771   1AAD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2771   1AB1 20 20 20 20 
2771   1AB5 20 20 20 20 
2771   1AB9 20 20 20 20 
2771   1ABD 20 20 20 20 
2771   1AC1 20 20 20 20 
2771   1AC5 20 20 20 20 
2771   1AC9 20 20 
2772   1ACB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2772   1ACF 20 20 20 20 
2772   1AD3 20 20 20 20 
2772   1AD7 20 20 20 20 
2772   1ADB 20 20 20 20 
2772   1ADF 20 20 20 20 
2772   1AE3 20 20 20 20 
2772   1AE7 20 20 
2773   1AE9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2773   1AED 20 20 20 20 
2773   1AF1 20 20 20 20 
2773   1AF5 20 20 20 20 
2773   1AF9 20 20 20 20 
2773   1AFD 20 20 20 20 
2773   1B01 20 20 20 20 
2773   1B05 20 20 
2774   1B07 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2774   1B0B 20 20 20 20 
2774   1B0F 20 20 20 20 
2774   1B13 20 20 20 20 
2774   1B17 20 20 20 20 
2774   1B1B 20 20 20 20 
2774   1B1F 20 20 20 20 
2774   1B23 20 20 
2775   1B25 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2775   1B29 20 20 20 20 
2775   1B2D 20 20 20 20 
2775   1B31 20 20 20 20 
2775   1B35 20 20 20 20 
2775   1B39 20 20 20 20 
2775   1B3D 20 20 20 20 
2775   1B41 20 20 
2776   1B43 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2776   1B47 20 20 20 20 
2776   1B4B 20 20 20 20 
2776   1B4F 20 20 20 20 
2776   1B53 20 20 20 20 
2776   1B57 20 20 20 20 
2776   1B5B 20 20 20 20 
2776   1B5F 20 20 
2777   1B61 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2777   1B65 20 20 20 20 
2777   1B69 20 20 20 20 
2777   1B6D 20 20 20 20 
2777   1B71 20 20 20 20 
2777   1B75 20 20 20 20 
2777   1B79 20 20 20 20 
2777   1B7D 20 20 
2778   1B7F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2778   1B83 20 20 20 20 
2778   1B87 20 20 20 20 
2778   1B8B 20 20 20 20 
2778   1B8F 20 20 20 20 
2778   1B93 20 20 20 20 
2778   1B97 20 20 20 20 
2778   1B9B 20 20 
2779   1B9D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2779   1BA1 20 20 20 20 
2779   1BA5 20 20 20 20 
2779   1BA9 20 20 20 20 
2779   1BAD 20 20 20 20 
2779   1BB1 20 20 20 20 
2779   1BB5 20 20 20 20 
2779   1BB9 20 20 
2780   1BBB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2780   1BBF 20 20 20 20 
2780   1BC3 20 20 20 20 
2780   1BC7 20 20 20 20 
2780   1BCB 20 20 20 20 
2780   1BCF 20 20 20 20 
2780   1BD3 20 20 20 20 
2780   1BD7 20 20 
2781   1BD9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2781   1BDD 20 20 20 20 
2781   1BE1 20 20 20 20 
2781   1BE5 20 20 20 20 
2781   1BE9 20 20 20 20 
2782   1BED 00 00 00 00 .fill 400, 0
2782   1BF1 00 00 00 00 
2782   1BF5 00 00 00 00 
2782   1BF9 00 00 00 00 
2782   1BFD 00 00 00 00 
2782   1C01 00 00 00 00 
2782   1C05 00 00 00 00 
2782   1C09 00 00 00 00 
2782   1C0D 00 00 00 00 
2782   1C11 00 00 00 00 
2782   1C15 00 00 00 00 
2782   1C19 00 00 00 00 
2782   1C1D 00 00 00 00 
2782   1C21 00 00 00 00 
2782   1C25 00 00 00 00 
2782   1C29 00 00 00 00 
2782   1C2D 00 00 00 00 
2782   1C31 00 00 00 00 
2782   1C35 00 00 00 00 
2782   1C39 00 00 00 00 
2782   1C3D 00 00 00 00 
2782   1C41 00 00 00 00 
2782   1C45 00 00 00 00 
2782   1C49 00 00 00 00 
2782   1C4D 00 00 00 00 
2782   1C51 00 00 00 00 
2782   1C55 00 00 00 00 
2782   1C59 00 00 00 00 
2782   1C5D 00 00 00 00 
2782   1C61 00 00 00 00 
2782   1C65 00 00 00 00 
2782   1C69 00 00 00 00 
2782   1C6D 00 00 00 00 
2782   1C71 00 00 00 00 
2782   1C75 00 00 00 00 
2782   1C79 00 00 00 00 
2782   1C7D 00 00 00 00 
2782   1C81 00 00 00 00 
2782   1C85 00 00 00 00 
2782   1C89 00 00 00 00 
2782   1C8D 00 00 00 00 
2782   1C91 00 00 00 00 
2782   1C95 00 00 00 00 
2782   1C99 00 00 00 00 
2782   1C9D 00 00 00 00 
2782   1CA1 00 00 00 00 
2782   1CA5 00 00 00 00 
2782   1CA9 00 00 00 00 
2782   1CAD 00 00 00 00 
2782   1CB1 00 00 00 00 
2782   1CB5 00 00 00 00 
2782   1CB9 00 00 00 00 
2782   1CBD 00 00 00 00 
2782   1CC1 00 00 00 00 
2782   1CC5 00 00 00 00 
2782   1CC9 00 00 00 00 
2782   1CCD 00 00 00 00 
2782   1CD1 00 00 00 00 
2782   1CD5 00 00 00 00 
2782   1CD9 00 00 00 00 
2782   1CDD 00 00 00 00 
2782   1CE1 00 00 00 00 
2782   1CE5 00 00 00 00 
2782   1CE9 00 00 00 00 
2782   1CED 00 00 00 00 
2782   1CF1 00 00 00 00 
2782   1CF5 00 00 00 00 
2782   1CF9 00 00 00 00 
2782   1CFD 00 00 00 00 
2782   1D01 00 00 00 00 
2782   1D05 00 00 00 00 
2782   1D09 00 00 00 00 
2782   1D0D 00 00 00 00 
2782   1D11 00 00 00 00 
2782   1D15 00 00 00 00 
2782   1D19 00 00 00 00 
2782   1D1D 00 00 00 00 
2782   1D21 00 00 00 00 
2782   1D25 00 00 00 00 
2782   1D29 00 00 00 00 
2782   1D2D 00 00 00 00 
2782   1D31 00 00 00 00 
2782   1D35 00 00 00 00 
2782   1D39 00 00 00 00 
2782   1D3D 00 00 00 00 
2782   1D41 00 00 00 00 
2782   1D45 00 00 00 00 
2782   1D49 00 00 00 00 
2782   1D4D 00 00 00 00 
2782   1D51 00 00 00 00 
2782   1D55 00 00 00 00 
2782   1D59 00 00 00 00 
2782   1D5D 00 00 00 00 
2782   1D61 00 00 00 00 
2782   1D65 00 00 00 00 
2782   1D69 00 00 00 00 
2782   1D6D 00 00 00 00 
2782   1D71 00 00 00 00 
2782   1D75 00 00 00 00 
2782   1D79 00 00 00 00 
2783   1D7D 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
2783   1D81 65 73 73 20 
2783   1D85 43 54 52 4C 
2783   1D89 2B 43 20 74 
2783   1D8D 6F 20 71 75 
2783   1D91 69 74 2E 0A 
2783   1D95 0D 00 
2784   1D97 40 20 00    _s1: .db "@ ", 0
2785   1D9A 2E 20 00    _s2: .db ". ", 0
2786   1D9D 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
2786   1DA1 70 65 63 74 
2786   1DA5 65 64 20 66 
2786   1DA9 6F 72 6D 61 
2786   1DAD 74 20 69 6E 
2786   1DB1 20 70 72 69 
2786   1DB5 6E 74 66 2E 
2786   1DB9 00 
2787   1DBA 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
2787   1DBE 72 3A 20 55 
2787   1DC2 6E 6B 6E 6F 
2787   1DC6 77 6E 20 61 
2787   1DCA 72 67 75 6D 
2787   1DCE 65 6E 74 20 
2787   1DD2 74 79 70 65 
2787   1DD6 2E 0A 00 
2788   1DD9             
2789   1DD9 DB 1D       _heap_top: .dw _heap
2790   1DDB 00          _heap: .db 0
2791   1DDC             ; --- END DATA SEGMENT
2792   1DDC             
2793   1DDC             .end
tasm: Number of errors = 0
