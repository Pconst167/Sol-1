0001   0000             ; --- FILENAME: programs/life.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int i, j; 
0011   0408 52 02 00      sub sp, 2
0012   040B 52 02 00      sub sp, 2
0013   040E             ; int n; 
0014   040E 52 02 00      sub sp, 2
0015   0411             ; for(i = 0; i <  30      ; i++){ 
0016   0411             _for1_init:
0017   0411 FA FF FF      lea d, [bp + -1] ; $i
0018   0414 DA            push d
0019   0415 FD 2E 00 00   mov32 cb, $00000000
0019   0419 00 00 
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             _for1_cond:
0023   041E FA FF FF      lea d, [bp + -1] ; $i
0024   0421 2A            mov b, [d]
0025   0422 38 00 00      mov c, 0
0026   0425             ; --- START RELATIONAL
0027   0425 D7            push a
0028   0426 11            mov a, b
0029   0427 FD 2E 1E 00   mov32 cb, $0000001e
0029   042B 00 00 
0030   042D B0            cmp a, b
0031   042E FD 73         slt ; < (signed)
0032   0430 E4            pop a
0033   0431             ; --- END RELATIONAL
0034   0431 C0 00 00      cmp b, 0
0035   0434 C6 C5 04      je _for1_exit
0036   0437             _for1_block:
0037   0437             ; for(j = 0; j <   40     ; j++){ 
0038   0437             _for2_init:
0039   0437 FA FD FF      lea d, [bp + -3] ; $j
0040   043A DA            push d
0041   043B FD 2E 00 00   mov32 cb, $00000000
0041   043F 00 00 
0042   0441 E7            pop d
0043   0442 FD 43         mov [d], b
0044   0444             _for2_cond:
0045   0444 FA FD FF      lea d, [bp + -3] ; $j
0046   0447 2A            mov b, [d]
0047   0448 38 00 00      mov c, 0
0048   044B             ; --- START RELATIONAL
0049   044B D7            push a
0050   044C 11            mov a, b
0051   044D FD 2E 28 00   mov32 cb, $00000028
0051   0451 00 00 
0052   0453 B0            cmp a, b
0053   0454 FD 73         slt ; < (signed)
0054   0456 E4            pop a
0055   0457             ; --- END RELATIONAL
0056   0457 C0 00 00      cmp b, 0
0057   045A C6 B2 04      je _for2_exit
0058   045D             _for2_block:
0059   045D             ; nextState[i][j] = currState[i][j]; 
0060   045D 3B FC 13      mov d, _nextState_data ; $nextState
0061   0460 D7            push a
0062   0461 DA            push d
0063   0462 FA FF FF      lea d, [bp + -1] ; $i
0064   0465 2A            mov b, [d]
0065   0466 38 00 00      mov c, 0
0066   0469 E7            pop d
0067   046A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0068   046E DA            push d
0069   046F FA FD FF      lea d, [bp + -3] ; $j
0070   0472 2A            mov b, [d]
0071   0473 38 00 00      mov c, 0
0072   0476 E7            pop d
0073   0477 5A            add d, b
0074   0478 E4            pop a
0075   0479 DA            push d
0076   047A 3B AC 18      mov d, _currState_data ; $currState
0077   047D D7            push a
0078   047E DA            push d
0079   047F FA FF FF      lea d, [bp + -1] ; $i
0080   0482 2A            mov b, [d]
0081   0483 38 00 00      mov c, 0
0082   0486 E7            pop d
0083   0487 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0084   048B DA            push d
0085   048C FA FD FF      lea d, [bp + -3] ; $j
0086   048F 2A            mov b, [d]
0087   0490 38 00 00      mov c, 0
0088   0493 E7            pop d
0089   0494 5A            add d, b
0090   0495 E4            pop a
0091   0496 32            mov bl, [d]
0092   0497 A7 00         mov bh, 0
0093   0499 38 00 00      mov c, 0
0094   049C E7            pop d
0095   049D FD 3E         mov [d], bl
0096   049F             _for2_update:
0097   049F FA FD FF      lea d, [bp + -3] ; $j
0098   04A2 2A            mov b, [d]
0099   04A3 38 00 00      mov c, 0
0100   04A6 11            mov a, b
0101   04A7 FD 77         inc b
0102   04A9 FA FD FF      lea d, [bp + -3] ; $j
0103   04AC FD 43         mov [d], b
0104   04AE 27            mov b, a
0105   04AF 0A 44 04      jmp _for2_cond
0106   04B2             _for2_exit:
0107   04B2             _for1_update:
0108   04B2 FA FF FF      lea d, [bp + -1] ; $i
0109   04B5 2A            mov b, [d]
0110   04B6 38 00 00      mov c, 0
0111   04B9 11            mov a, b
0112   04BA FD 77         inc b
0113   04BC FA FF FF      lea d, [bp + -1] ; $i
0114   04BF FD 43         mov [d], b
0115   04C1 27            mov b, a
0116   04C2 0A 1E 04      jmp _for1_cond
0117   04C5             _for1_exit:
0118   04C5             ; for(;;){ 
0119   04C5             _for3_init:
0120   04C5             _for3_cond:
0121   04C5             _for3_block:
0122   04C5             ; for(i = 1; i <  30      +-1; i++){ 
0123   04C5             _for4_init:
0124   04C5 FA FF FF      lea d, [bp + -1] ; $i
0125   04C8 DA            push d
0126   04C9 FD 2E 01 00   mov32 cb, $00000001
0126   04CD 00 00 
0127   04CF E7            pop d
0128   04D0 FD 43         mov [d], b
0129   04D2             _for4_cond:
0130   04D2 FA FF FF      lea d, [bp + -1] ; $i
0131   04D5 2A            mov b, [d]
0132   04D6 38 00 00      mov c, 0
0133   04D9             ; --- START RELATIONAL
0134   04D9 D7            push a
0135   04DA 11            mov a, b
0136   04DB FD 2E 1E 00   mov32 cb, $0000001e
0136   04DF 00 00 
0137   04E1             ; --- START TERMS
0138   04E1 D7            push a
0139   04E2 11            mov a, b
0140   04E3 FD 2E FF FF   mov32 cb, $ffffffff
0140   04E7 FF FF 
0141   04E9 56            add b, a
0142   04EA E4            pop a
0143   04EB             ; --- END TERMS
0144   04EB B0            cmp a, b
0145   04EC FD 73         slt ; < (signed)
0146   04EE E4            pop a
0147   04EF             ; --- END RELATIONAL
0148   04EF C0 00 00      cmp b, 0
0149   04F2 C6 08 06      je _for4_exit
0150   04F5             _for4_block:
0151   04F5             ; for(j = 1; j <   40     +-1; j++){ 
0152   04F5             _for5_init:
0153   04F5 FA FD FF      lea d, [bp + -3] ; $j
0154   04F8 DA            push d
0155   04F9 FD 2E 01 00   mov32 cb, $00000001
0155   04FD 00 00 
0156   04FF E7            pop d
0157   0500 FD 43         mov [d], b
0158   0502             _for5_cond:
0159   0502 FA FD FF      lea d, [bp + -3] ; $j
0160   0505 2A            mov b, [d]
0161   0506 38 00 00      mov c, 0
0162   0509             ; --- START RELATIONAL
0163   0509 D7            push a
0164   050A 11            mov a, b
0165   050B FD 2E 28 00   mov32 cb, $00000028
0165   050F 00 00 
0166   0511             ; --- START TERMS
0167   0511 D7            push a
0168   0512 11            mov a, b
0169   0513 FD 2E FF FF   mov32 cb, $ffffffff
0169   0517 FF FF 
0170   0519 56            add b, a
0171   051A E4            pop a
0172   051B             ; --- END TERMS
0173   051B B0            cmp a, b
0174   051C FD 73         slt ; < (signed)
0175   051E E4            pop a
0176   051F             ; --- END RELATIONAL
0177   051F C0 00 00      cmp b, 0
0178   0522 C6 F5 05      je _for5_exit
0179   0525             _for5_block:
0180   0525             ; n = neighbours(i, j); 
0181   0525 FA FB FF      lea d, [bp + -5] ; $n
0182   0528 DA            push d
0183   0529             ; --- START FUNCTION CALL
0184   0529 FA FD FF      lea d, [bp + -3] ; $j
0185   052C 2A            mov b, [d]
0186   052D 38 00 00      mov c, 0
0187   0530 FD AB         swp b
0188   0532 D8            push b
0189   0533 FA FF FF      lea d, [bp + -1] ; $i
0190   0536 2A            mov b, [d]
0191   0537 38 00 00      mov c, 0
0192   053A FD AB         swp b
0193   053C D8            push b
0194   053D 07 19 08      call neighbours
0195   0540 51 04 00      add sp, 4
0196   0543             ; --- END FUNCTION CALL
0197   0543 E7            pop d
0198   0544 FD 43         mov [d], b
0199   0546             ; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0200   0546             _if6_cond:
0201   0546 FA FB FF      lea d, [bp + -5] ; $n
0202   0549 2A            mov b, [d]
0203   054A 38 00 00      mov c, 0
0204   054D             ; --- START RELATIONAL
0205   054D D7            push a
0206   054E 11            mov a, b
0207   054F FD 2E 02 00   mov32 cb, $00000002
0207   0553 00 00 
0208   0555 B0            cmp a, b
0209   0556 FD 73         slt ; < (signed)
0210   0558 E4            pop a
0211   0559             ; --- END RELATIONAL
0212   0559             ; --- START LOGICAL OR
0213   0559 D7            push a
0214   055A 11            mov a, b
0215   055B FA FB FF      lea d, [bp + -5] ; $n
0216   055E 2A            mov b, [d]
0217   055F 38 00 00      mov c, 0
0218   0562             ; --- START RELATIONAL
0219   0562 D7            push a
0220   0563 11            mov a, b
0221   0564 FD 2E 03 00   mov32 cb, $00000003
0221   0568 00 00 
0222   056A B0            cmp a, b
0223   056B FD 7F         sgt ; >
0224   056D E4            pop a
0225   056E             ; --- END RELATIONAL
0226   056E FD A8         sor a, b ; ||
0227   0570 E4            pop a
0228   0571             ; --- END LOGICAL OR
0229   0571 C0 00 00      cmp b, 0
0230   0574 C6 A0 05      je _if6_else
0231   0577             _if6_TRUE:
0232   0577             ; nextState[i][j] = ' '; 
0233   0577 3B FC 13      mov d, _nextState_data ; $nextState
0234   057A D7            push a
0235   057B DA            push d
0236   057C FA FF FF      lea d, [bp + -1] ; $i
0237   057F 2A            mov b, [d]
0238   0580 38 00 00      mov c, 0
0239   0583 E7            pop d
0240   0584 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0241   0588 DA            push d
0242   0589 FA FD FF      lea d, [bp + -3] ; $j
0243   058C 2A            mov b, [d]
0244   058D 38 00 00      mov c, 0
0245   0590 E7            pop d
0246   0591 5A            add d, b
0247   0592 E4            pop a
0248   0593 DA            push d
0249   0594 FD 2E 20 00   mov32 cb, $00000020
0249   0598 00 00 
0250   059A E7            pop d
0251   059B FD 3E         mov [d], bl
0252   059D 0A E2 05      jmp _if6_exit
0253   05A0             _if6_else:
0254   05A0             ; if(n == 3) nextState[i][j] = '@'; 
0255   05A0             _if7_cond:
0256   05A0 FA FB FF      lea d, [bp + -5] ; $n
0257   05A3 2A            mov b, [d]
0258   05A4 38 00 00      mov c, 0
0259   05A7             ; --- START RELATIONAL
0260   05A7 D7            push a
0261   05A8 11            mov a, b
0262   05A9 FD 2E 03 00   mov32 cb, $00000003
0262   05AD 00 00 
0263   05AF B0            cmp a, b
0264   05B0 FD 71         seq ; ==
0265   05B2 E4            pop a
0266   05B3             ; --- END RELATIONAL
0267   05B3 C0 00 00      cmp b, 0
0268   05B6 C6 E2 05      je _if7_exit
0269   05B9             _if7_TRUE:
0270   05B9             ; nextState[i][j] = '@'; 
0271   05B9 3B FC 13      mov d, _nextState_data ; $nextState
0272   05BC D7            push a
0273   05BD DA            push d
0274   05BE FA FF FF      lea d, [bp + -1] ; $i
0275   05C1 2A            mov b, [d]
0276   05C2 38 00 00      mov c, 0
0277   05C5 E7            pop d
0278   05C6 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0279   05CA DA            push d
0280   05CB FA FD FF      lea d, [bp + -3] ; $j
0281   05CE 2A            mov b, [d]
0282   05CF 38 00 00      mov c, 0
0283   05D2 E7            pop d
0284   05D3 5A            add d, b
0285   05D4 E4            pop a
0286   05D5 DA            push d
0287   05D6 FD 2E 40 00   mov32 cb, $00000040
0287   05DA 00 00 
0288   05DC E7            pop d
0289   05DD FD 3E         mov [d], bl
0290   05DF 0A E2 05      jmp _if7_exit
0291   05E2             _if7_exit:
0292   05E2             _if6_exit:
0293   05E2             _for5_update:
0294   05E2 FA FD FF      lea d, [bp + -3] ; $j
0295   05E5 2A            mov b, [d]
0296   05E6 38 00 00      mov c, 0
0297   05E9 11            mov a, b
0298   05EA FD 77         inc b
0299   05EC FA FD FF      lea d, [bp + -3] ; $j
0300   05EF FD 43         mov [d], b
0301   05F1 27            mov b, a
0302   05F2 0A 02 05      jmp _for5_cond
0303   05F5             _for5_exit:
0304   05F5             _for4_update:
0305   05F5 FA FF FF      lea d, [bp + -1] ; $i
0306   05F8 2A            mov b, [d]
0307   05F9 38 00 00      mov c, 0
0308   05FC 11            mov a, b
0309   05FD FD 77         inc b
0310   05FF FA FF FF      lea d, [bp + -1] ; $i
0311   0602 FD 43         mov [d], b
0312   0604 27            mov b, a
0313   0605 0A D2 04      jmp _for4_cond
0314   0608             _for4_exit:
0315   0608             ; for(i = 1; i <  30      +-1; i++){ 
0316   0608             _for8_init:
0317   0608 FA FF FF      lea d, [bp + -1] ; $i
0318   060B DA            push d
0319   060C FD 2E 01 00   mov32 cb, $00000001
0319   0610 00 00 
0320   0612 E7            pop d
0321   0613 FD 43         mov [d], b
0322   0615             _for8_cond:
0323   0615 FA FF FF      lea d, [bp + -1] ; $i
0324   0618 2A            mov b, [d]
0325   0619 38 00 00      mov c, 0
0326   061C             ; --- START RELATIONAL
0327   061C D7            push a
0328   061D 11            mov a, b
0329   061E FD 2E 1E 00   mov32 cb, $0000001e
0329   0622 00 00 
0330   0624             ; --- START TERMS
0331   0624 D7            push a
0332   0625 11            mov a, b
0333   0626 FD 2E FF FF   mov32 cb, $ffffffff
0333   062A FF FF 
0334   062C 56            add b, a
0335   062D E4            pop a
0336   062E             ; --- END TERMS
0337   062E B0            cmp a, b
0338   062F FD 73         slt ; < (signed)
0339   0631 E4            pop a
0340   0632             ; --- END RELATIONAL
0341   0632 C0 00 00      cmp b, 0
0342   0635 C6 D0 06      je _for8_exit
0343   0638             _for8_block:
0344   0638             ; for(j = 1; j <   40     +-1; j++){ 
0345   0638             _for9_init:
0346   0638 FA FD FF      lea d, [bp + -3] ; $j
0347   063B DA            push d
0348   063C FD 2E 01 00   mov32 cb, $00000001
0348   0640 00 00 
0349   0642 E7            pop d
0350   0643 FD 43         mov [d], b
0351   0645             _for9_cond:
0352   0645 FA FD FF      lea d, [bp + -3] ; $j
0353   0648 2A            mov b, [d]
0354   0649 38 00 00      mov c, 0
0355   064C             ; --- START RELATIONAL
0356   064C D7            push a
0357   064D 11            mov a, b
0358   064E FD 2E 28 00   mov32 cb, $00000028
0358   0652 00 00 
0359   0654             ; --- START TERMS
0360   0654 D7            push a
0361   0655 11            mov a, b
0362   0656 FD 2E FF FF   mov32 cb, $ffffffff
0362   065A FF FF 
0363   065C 56            add b, a
0364   065D E4            pop a
0365   065E             ; --- END TERMS
0366   065E B0            cmp a, b
0367   065F FD 73         slt ; < (signed)
0368   0661 E4            pop a
0369   0662             ; --- END RELATIONAL
0370   0662 C0 00 00      cmp b, 0
0371   0665 C6 BD 06      je _for9_exit
0372   0668             _for9_block:
0373   0668             ; currState[i][j] = nextState[i][j]; 
0374   0668 3B AC 18      mov d, _currState_data ; $currState
0375   066B D7            push a
0376   066C DA            push d
0377   066D FA FF FF      lea d, [bp + -1] ; $i
0378   0670 2A            mov b, [d]
0379   0671 38 00 00      mov c, 0
0380   0674 E7            pop d
0381   0675 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0382   0679 DA            push d
0383   067A FA FD FF      lea d, [bp + -3] ; $j
0384   067D 2A            mov b, [d]
0385   067E 38 00 00      mov c, 0
0386   0681 E7            pop d
0387   0682 5A            add d, b
0388   0683 E4            pop a
0389   0684 DA            push d
0390   0685 3B FC 13      mov d, _nextState_data ; $nextState
0391   0688 D7            push a
0392   0689 DA            push d
0393   068A FA FF FF      lea d, [bp + -1] ; $i
0394   068D 2A            mov b, [d]
0395   068E 38 00 00      mov c, 0
0396   0691 E7            pop d
0397   0692 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0398   0696 DA            push d
0399   0697 FA FD FF      lea d, [bp + -3] ; $j
0400   069A 2A            mov b, [d]
0401   069B 38 00 00      mov c, 0
0402   069E E7            pop d
0403   069F 5A            add d, b
0404   06A0 E4            pop a
0405   06A1 32            mov bl, [d]
0406   06A2 A7 00         mov bh, 0
0407   06A4 38 00 00      mov c, 0
0408   06A7 E7            pop d
0409   06A8 FD 3E         mov [d], bl
0410   06AA             _for9_update:
0411   06AA FA FD FF      lea d, [bp + -3] ; $j
0412   06AD 2A            mov b, [d]
0413   06AE 38 00 00      mov c, 0
0414   06B1 11            mov a, b
0415   06B2 FD 77         inc b
0416   06B4 FA FD FF      lea d, [bp + -3] ; $j
0417   06B7 FD 43         mov [d], b
0418   06B9 27            mov b, a
0419   06BA 0A 45 06      jmp _for9_cond
0420   06BD             _for9_exit:
0421   06BD             _for8_update:
0422   06BD FA FF FF      lea d, [bp + -1] ; $i
0423   06C0 2A            mov b, [d]
0424   06C1 38 00 00      mov c, 0
0425   06C4 11            mov a, b
0426   06C5 FD 77         inc b
0427   06C7 FA FF FF      lea d, [bp + -1] ; $i
0428   06CA FD 43         mov [d], b
0429   06CC 27            mov b, a
0430   06CD 0A 15 06      jmp _for8_cond
0431   06D0             _for8_exit:
0432   06D0             ; printf(clear); 
0433   06D0             ; --- START FUNCTION CALL
0434   06D0 3B F0 13      mov d, _clear_data ; $clear
0435   06D3 2D            mov b, d
0436   06D4 38 00 00      mov c, 0
0437   06D7 FD AB         swp b
0438   06D9 D8            push b
0439   06DA 07 E5 0A      call printf
0440   06DD 51 02 00      add sp, 2
0441   06E0             ; --- END FUNCTION CALL
0442   06E0             ; show(); 
0443   06E0             ; --- START FUNCTION CALL
0444   06E0 07 F4 06      call show
0445   06E3             ; puts("\n\rPress CTRL+C to quit.\n\r"); 
0446   06E3             ; --- START FUNCTION CALL
0447   06E3 26 5D 1D      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0448   06E6 FD AB         swp b
0449   06E8 D8            push b
0450   06E9 07 D2 13      call puts
0451   06EC 51 02 00      add sp, 2
0452   06EF             ; --- END FUNCTION CALL
0453   06EF             _for3_update:
0454   06EF 0A C5 04      jmp _for3_cond
0455   06F2             _for3_exit:
0456   06F2 05 0B         syscall sys_terminate_proc
0457   06F4             
0458   06F4             show:
0459   06F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0460   06F7             ; int i, j; 
0461   06F7 52 02 00      sub sp, 2
0462   06FA 52 02 00      sub sp, 2
0463   06FD             ; for(i = 0; i <  30      ; i++){ 
0464   06FD             _for10_init:
0465   06FD FA FF FF      lea d, [bp + -1] ; $i
0466   0700 DA            push d
0467   0701 FD 2E 00 00   mov32 cb, $00000000
0467   0705 00 00 
0468   0707 E7            pop d
0469   0708 FD 43         mov [d], b
0470   070A             _for10_cond:
0471   070A FA FF FF      lea d, [bp + -1] ; $i
0472   070D 2A            mov b, [d]
0473   070E 38 00 00      mov c, 0
0474   0711             ; --- START RELATIONAL
0475   0711 D7            push a
0476   0712 11            mov a, b
0477   0713 FD 2E 1E 00   mov32 cb, $0000001e
0477   0717 00 00 
0478   0719 B0            cmp a, b
0479   071A FD 73         slt ; < (signed)
0480   071C E4            pop a
0481   071D             ; --- END RELATIONAL
0482   071D C0 00 00      cmp b, 0
0483   0720 C6 CB 07      je _for10_exit
0484   0723             _for10_block:
0485   0723             ; for(j = 0; j <   40     ; j++){ 
0486   0723             _for11_init:
0487   0723 FA FD FF      lea d, [bp + -3] ; $j
0488   0726 DA            push d
0489   0727 FD 2E 00 00   mov32 cb, $00000000
0489   072B 00 00 
0490   072D E7            pop d
0491   072E FD 43         mov [d], b
0492   0730             _for11_cond:
0493   0730 FA FD FF      lea d, [bp + -3] ; $j
0494   0733 2A            mov b, [d]
0495   0734 38 00 00      mov c, 0
0496   0737             ; --- START RELATIONAL
0497   0737 D7            push a
0498   0738 11            mov a, b
0499   0739 FD 2E 28 00   mov32 cb, $00000028
0499   073D 00 00 
0500   073F B0            cmp a, b
0501   0740 FD 73         slt ; < (signed)
0502   0742 E4            pop a
0503   0743             ; --- END RELATIONAL
0504   0743 C0 00 00      cmp b, 0
0505   0746 C6 AB 07      je _for11_exit
0506   0749             _for11_block:
0507   0749             ; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
0508   0749             _ternary12_cond:
0509   0749 3B AC 18      mov d, _currState_data ; $currState
0510   074C D7            push a
0511   074D DA            push d
0512   074E FA FF FF      lea d, [bp + -1] ; $i
0513   0751 2A            mov b, [d]
0514   0752 38 00 00      mov c, 0
0515   0755 E7            pop d
0516   0756 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0517   075A DA            push d
0518   075B FA FD FF      lea d, [bp + -3] ; $j
0519   075E 2A            mov b, [d]
0520   075F 38 00 00      mov c, 0
0521   0762 E7            pop d
0522   0763 5A            add d, b
0523   0764 E4            pop a
0524   0765 32            mov bl, [d]
0525   0766 A7 00         mov bh, 0
0526   0768 38 00 00      mov c, 0
0527   076B             ; --- START RELATIONAL
0528   076B D7            push a
0529   076C 11            mov a, b
0530   076D FD 2E 40 00   mov32 cb, $00000040
0530   0771 00 00 
0531   0773 B0            cmp a, b
0532   0774 FD 71         seq ; ==
0533   0776 E4            pop a
0534   0777             ; --- END RELATIONAL
0535   0777 C0 00 00      cmp b, 0
0536   077A C6 8C 07      je _ternary12_FALSE
0537   077D             _ternary12_TRUE:
0538   077D             ; --- START FUNCTION CALL
0539   077D 26 77 1D      mov b, _s1 ; "@ "
0540   0780 FD AB         swp b
0541   0782 D8            push b
0542   0783 07 E5 0A      call printf
0543   0786 51 02 00      add sp, 2
0544   0789             ; --- END FUNCTION CALL
0545   0789 0A 98 07      jmp _ternary12_exit
0546   078C             _ternary12_FALSE:
0547   078C             ; --- START FUNCTION CALL
0548   078C 26 7A 1D      mov b, _s2 ; ". "
0549   078F FD AB         swp b
0550   0791 D8            push b
0551   0792 07 E5 0A      call printf
0552   0795 51 02 00      add sp, 2
0553   0798             ; --- END FUNCTION CALL
0554   0798             _ternary12_exit:
0555   0798             _for11_update:
0556   0798 FA FD FF      lea d, [bp + -3] ; $j
0557   079B 2A            mov b, [d]
0558   079C 38 00 00      mov c, 0
0559   079F 11            mov a, b
0560   07A0 FD 77         inc b
0561   07A2 FA FD FF      lea d, [bp + -3] ; $j
0562   07A5 FD 43         mov [d], b
0563   07A7 27            mov b, a
0564   07A8 0A 30 07      jmp _for11_cond
0565   07AB             _for11_exit:
0566   07AB             ; putchar(10); 
0567   07AB             ; --- START FUNCTION CALL
0568   07AB FD 2E 0A 00   mov32 cb, $0000000a
0568   07AF 00 00 
0569   07B1 DD            push bl
0570   07B2 07 5F 0F      call putchar
0571   07B5 51 01 00      add sp, 1
0572   07B8             ; --- END FUNCTION CALL
0573   07B8             _for10_update:
0574   07B8 FA FF FF      lea d, [bp + -1] ; $i
0575   07BB 2A            mov b, [d]
0576   07BC 38 00 00      mov c, 0
0577   07BF 11            mov a, b
0578   07C0 FD 77         inc b
0579   07C2 FA FF FF      lea d, [bp + -1] ; $i
0580   07C5 FD 43         mov [d], b
0581   07C7 27            mov b, a
0582   07C8 0A 0A 07      jmp _for10_cond
0583   07CB             _for10_exit:
0584   07CB F9            leave
0585   07CC 09            ret
0586   07CD             
0587   07CD             alive:
0588   07CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0589   07D0             ; if(currState[i][j] == '@') return 1; 
0590   07D0             _if13_cond:
0591   07D0 3B AC 18      mov d, _currState_data ; $currState
0592   07D3 D7            push a
0593   07D4 DA            push d
0594   07D5 FA 05 00      lea d, [bp + 5] ; $i
0595   07D8 2A            mov b, [d]
0596   07D9 38 00 00      mov c, 0
0597   07DC E7            pop d
0598   07DD FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0599   07E1 DA            push d
0600   07E2 FA 07 00      lea d, [bp + 7] ; $j
0601   07E5 2A            mov b, [d]
0602   07E6 38 00 00      mov c, 0
0603   07E9 E7            pop d
0604   07EA 5A            add d, b
0605   07EB E4            pop a
0606   07EC 32            mov bl, [d]
0607   07ED A7 00         mov bh, 0
0608   07EF 38 00 00      mov c, 0
0609   07F2             ; --- START RELATIONAL
0610   07F2 D7            push a
0611   07F3 11            mov a, b
0612   07F4 FD 2E 40 00   mov32 cb, $00000040
0612   07F8 00 00 
0613   07FA B0            cmp a, b
0614   07FB FD 71         seq ; ==
0615   07FD E4            pop a
0616   07FE             ; --- END RELATIONAL
0617   07FE C0 00 00      cmp b, 0
0618   0801 C6 0F 08      je _if13_else
0619   0804             _if13_TRUE:
0620   0804             ; return 1; 
0621   0804 FD 2E 01 00   mov32 cb, $00000001
0621   0808 00 00 
0622   080A F9            leave
0623   080B 09            ret
0624   080C 0A 17 08      jmp _if13_exit
0625   080F             _if13_else:
0626   080F             ; return 0; 
0627   080F FD 2E 00 00   mov32 cb, $00000000
0627   0813 00 00 
0628   0815 F9            leave
0629   0816 09            ret
0630   0817             _if13_exit:
0631   0817 F9            leave
0632   0818 09            ret
0633   0819             
0634   0819             neighbours:
0635   0819 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0636   081C             ; int count; 
0637   081C 52 02 00      sub sp, 2
0638   081F             ; count = 0; 
0639   081F FA FF FF      lea d, [bp + -1] ; $count
0640   0822 DA            push d
0641   0823 FD 2E 00 00   mov32 cb, $00000000
0641   0827 00 00 
0642   0829 E7            pop d
0643   082A FD 43         mov [d], b
0644   082C             ; if(currState[i+-1][j] == '@')			count++; 
0645   082C             _if14_cond:
0646   082C 3B AC 18      mov d, _currState_data ; $currState
0647   082F D7            push a
0648   0830 DA            push d
0649   0831 FA 05 00      lea d, [bp + 5] ; $i
0650   0834 2A            mov b, [d]
0651   0835 38 00 00      mov c, 0
0652   0838             ; --- START TERMS
0653   0838 D7            push a
0654   0839 11            mov a, b
0655   083A FD 2E FF FF   mov32 cb, $ffffffff
0655   083E FF FF 
0656   0840 56            add b, a
0657   0841 E4            pop a
0658   0842             ; --- END TERMS
0659   0842 E7            pop d
0660   0843 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0661   0847 DA            push d
0662   0848 FA 07 00      lea d, [bp + 7] ; $j
0663   084B 2A            mov b, [d]
0664   084C 38 00 00      mov c, 0
0665   084F E7            pop d
0666   0850 5A            add d, b
0667   0851 E4            pop a
0668   0852 32            mov bl, [d]
0669   0853 A7 00         mov bh, 0
0670   0855 38 00 00      mov c, 0
0671   0858             ; --- START RELATIONAL
0672   0858 D7            push a
0673   0859 11            mov a, b
0674   085A FD 2E 40 00   mov32 cb, $00000040
0674   085E 00 00 
0675   0860 B0            cmp a, b
0676   0861 FD 71         seq ; ==
0677   0863 E4            pop a
0678   0864             ; --- END RELATIONAL
0679   0864 C0 00 00      cmp b, 0
0680   0867 C6 7D 08      je _if14_exit
0681   086A             _if14_TRUE:
0682   086A             ; count++; 
0683   086A FA FF FF      lea d, [bp + -1] ; $count
0684   086D 2A            mov b, [d]
0685   086E 38 00 00      mov c, 0
0686   0871 11            mov a, b
0687   0872 FD 77         inc b
0688   0874 FA FF FF      lea d, [bp + -1] ; $count
0689   0877 FD 43         mov [d], b
0690   0879 27            mov b, a
0691   087A 0A 7D 08      jmp _if14_exit
0692   087D             _if14_exit:
0693   087D             ; if(currState[i+-1][j+-1] == '@') 	count++; 
0694   087D             _if15_cond:
0695   087D 3B AC 18      mov d, _currState_data ; $currState
0696   0880 D7            push a
0697   0881 DA            push d
0698   0882 FA 05 00      lea d, [bp + 5] ; $i
0699   0885 2A            mov b, [d]
0700   0886 38 00 00      mov c, 0
0701   0889             ; --- START TERMS
0702   0889 D7            push a
0703   088A 11            mov a, b
0704   088B FD 2E FF FF   mov32 cb, $ffffffff
0704   088F FF FF 
0705   0891 56            add b, a
0706   0892 E4            pop a
0707   0893             ; --- END TERMS
0708   0893 E7            pop d
0709   0894 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0710   0898 DA            push d
0711   0899 FA 07 00      lea d, [bp + 7] ; $j
0712   089C 2A            mov b, [d]
0713   089D 38 00 00      mov c, 0
0714   08A0             ; --- START TERMS
0715   08A0 D7            push a
0716   08A1 11            mov a, b
0717   08A2 FD 2E FF FF   mov32 cb, $ffffffff
0717   08A6 FF FF 
0718   08A8 56            add b, a
0719   08A9 E4            pop a
0720   08AA             ; --- END TERMS
0721   08AA E7            pop d
0722   08AB 5A            add d, b
0723   08AC E4            pop a
0724   08AD 32            mov bl, [d]
0725   08AE A7 00         mov bh, 0
0726   08B0 38 00 00      mov c, 0
0727   08B3             ; --- START RELATIONAL
0728   08B3 D7            push a
0729   08B4 11            mov a, b
0730   08B5 FD 2E 40 00   mov32 cb, $00000040
0730   08B9 00 00 
0731   08BB B0            cmp a, b
0732   08BC FD 71         seq ; ==
0733   08BE E4            pop a
0734   08BF             ; --- END RELATIONAL
0735   08BF C0 00 00      cmp b, 0
0736   08C2 C6 D8 08      je _if15_exit
0737   08C5             _if15_TRUE:
0738   08C5             ; count++; 
0739   08C5 FA FF FF      lea d, [bp + -1] ; $count
0740   08C8 2A            mov b, [d]
0741   08C9 38 00 00      mov c, 0
0742   08CC 11            mov a, b
0743   08CD FD 77         inc b
0744   08CF FA FF FF      lea d, [bp + -1] ; $count
0745   08D2 FD 43         mov [d], b
0746   08D4 27            mov b, a
0747   08D5 0A D8 08      jmp _if15_exit
0748   08D8             _if15_exit:
0749   08D8             ; if(currState[i+-1][j+1] == '@') 	count++; 
0750   08D8             _if16_cond:
0751   08D8 3B AC 18      mov d, _currState_data ; $currState
0752   08DB D7            push a
0753   08DC DA            push d
0754   08DD FA 05 00      lea d, [bp + 5] ; $i
0755   08E0 2A            mov b, [d]
0756   08E1 38 00 00      mov c, 0
0757   08E4             ; --- START TERMS
0758   08E4 D7            push a
0759   08E5 11            mov a, b
0760   08E6 FD 2E FF FF   mov32 cb, $ffffffff
0760   08EA FF FF 
0761   08EC 56            add b, a
0762   08ED E4            pop a
0763   08EE             ; --- END TERMS
0764   08EE E7            pop d
0765   08EF FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0766   08F3 DA            push d
0767   08F4 FA 07 00      lea d, [bp + 7] ; $j
0768   08F7 2A            mov b, [d]
0769   08F8 38 00 00      mov c, 0
0770   08FB             ; --- START TERMS
0771   08FB D7            push a
0772   08FC 11            mov a, b
0773   08FD FD 2E 01 00   mov32 cb, $00000001
0773   0901 00 00 
0774   0903 56            add b, a
0775   0904 E4            pop a
0776   0905             ; --- END TERMS
0777   0905 E7            pop d
0778   0906 5A            add d, b
0779   0907 E4            pop a
0780   0908 32            mov bl, [d]
0781   0909 A7 00         mov bh, 0
0782   090B 38 00 00      mov c, 0
0783   090E             ; --- START RELATIONAL
0784   090E D7            push a
0785   090F 11            mov a, b
0786   0910 FD 2E 40 00   mov32 cb, $00000040
0786   0914 00 00 
0787   0916 B0            cmp a, b
0788   0917 FD 71         seq ; ==
0789   0919 E4            pop a
0790   091A             ; --- END RELATIONAL
0791   091A C0 00 00      cmp b, 0
0792   091D C6 33 09      je _if16_exit
0793   0920             _if16_TRUE:
0794   0920             ; count++; 
0795   0920 FA FF FF      lea d, [bp + -1] ; $count
0796   0923 2A            mov b, [d]
0797   0924 38 00 00      mov c, 0
0798   0927 11            mov a, b
0799   0928 FD 77         inc b
0800   092A FA FF FF      lea d, [bp + -1] ; $count
0801   092D FD 43         mov [d], b
0802   092F 27            mov b, a
0803   0930 0A 33 09      jmp _if16_exit
0804   0933             _if16_exit:
0805   0933             ; if(currState[i][j+-1] == '@') 		count++; 
0806   0933             _if17_cond:
0807   0933 3B AC 18      mov d, _currState_data ; $currState
0808   0936 D7            push a
0809   0937 DA            push d
0810   0938 FA 05 00      lea d, [bp + 5] ; $i
0811   093B 2A            mov b, [d]
0812   093C 38 00 00      mov c, 0
0813   093F E7            pop d
0814   0940 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0815   0944 DA            push d
0816   0945 FA 07 00      lea d, [bp + 7] ; $j
0817   0948 2A            mov b, [d]
0818   0949 38 00 00      mov c, 0
0819   094C             ; --- START TERMS
0820   094C D7            push a
0821   094D 11            mov a, b
0822   094E FD 2E FF FF   mov32 cb, $ffffffff
0822   0952 FF FF 
0823   0954 56            add b, a
0824   0955 E4            pop a
0825   0956             ; --- END TERMS
0826   0956 E7            pop d
0827   0957 5A            add d, b
0828   0958 E4            pop a
0829   0959 32            mov bl, [d]
0830   095A A7 00         mov bh, 0
0831   095C 38 00 00      mov c, 0
0832   095F             ; --- START RELATIONAL
0833   095F D7            push a
0834   0960 11            mov a, b
0835   0961 FD 2E 40 00   mov32 cb, $00000040
0835   0965 00 00 
0836   0967 B0            cmp a, b
0837   0968 FD 71         seq ; ==
0838   096A E4            pop a
0839   096B             ; --- END RELATIONAL
0840   096B C0 00 00      cmp b, 0
0841   096E C6 84 09      je _if17_exit
0842   0971             _if17_TRUE:
0843   0971             ; count++; 
0844   0971 FA FF FF      lea d, [bp + -1] ; $count
0845   0974 2A            mov b, [d]
0846   0975 38 00 00      mov c, 0
0847   0978 11            mov a, b
0848   0979 FD 77         inc b
0849   097B FA FF FF      lea d, [bp + -1] ; $count
0850   097E FD 43         mov [d], b
0851   0980 27            mov b, a
0852   0981 0A 84 09      jmp _if17_exit
0853   0984             _if17_exit:
0854   0984             ; if(currState[i][j+1] == '@') 			count++; 
0855   0984             _if18_cond:
0856   0984 3B AC 18      mov d, _currState_data ; $currState
0857   0987 D7            push a
0858   0988 DA            push d
0859   0989 FA 05 00      lea d, [bp + 5] ; $i
0860   098C 2A            mov b, [d]
0861   098D 38 00 00      mov c, 0
0862   0990 E7            pop d
0863   0991 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0864   0995 DA            push d
0865   0996 FA 07 00      lea d, [bp + 7] ; $j
0866   0999 2A            mov b, [d]
0867   099A 38 00 00      mov c, 0
0868   099D             ; --- START TERMS
0869   099D D7            push a
0870   099E 11            mov a, b
0871   099F FD 2E 01 00   mov32 cb, $00000001
0871   09A3 00 00 
0872   09A5 56            add b, a
0873   09A6 E4            pop a
0874   09A7             ; --- END TERMS
0875   09A7 E7            pop d
0876   09A8 5A            add d, b
0877   09A9 E4            pop a
0878   09AA 32            mov bl, [d]
0879   09AB A7 00         mov bh, 0
0880   09AD 38 00 00      mov c, 0
0881   09B0             ; --- START RELATIONAL
0882   09B0 D7            push a
0883   09B1 11            mov a, b
0884   09B2 FD 2E 40 00   mov32 cb, $00000040
0884   09B6 00 00 
0885   09B8 B0            cmp a, b
0886   09B9 FD 71         seq ; ==
0887   09BB E4            pop a
0888   09BC             ; --- END RELATIONAL
0889   09BC C0 00 00      cmp b, 0
0890   09BF C6 D5 09      je _if18_exit
0891   09C2             _if18_TRUE:
0892   09C2             ; count++; 
0893   09C2 FA FF FF      lea d, [bp + -1] ; $count
0894   09C5 2A            mov b, [d]
0895   09C6 38 00 00      mov c, 0
0896   09C9 11            mov a, b
0897   09CA FD 77         inc b
0898   09CC FA FF FF      lea d, [bp + -1] ; $count
0899   09CF FD 43         mov [d], b
0900   09D1 27            mov b, a
0901   09D2 0A D5 09      jmp _if18_exit
0902   09D5             _if18_exit:
0903   09D5             ; if(currState[i+1][j+-1] == '@') 	count++; 
0904   09D5             _if19_cond:
0905   09D5 3B AC 18      mov d, _currState_data ; $currState
0906   09D8 D7            push a
0907   09D9 DA            push d
0908   09DA FA 05 00      lea d, [bp + 5] ; $i
0909   09DD 2A            mov b, [d]
0910   09DE 38 00 00      mov c, 0
0911   09E1             ; --- START TERMS
0912   09E1 D7            push a
0913   09E2 11            mov a, b
0914   09E3 FD 2E 01 00   mov32 cb, $00000001
0914   09E7 00 00 
0915   09E9 56            add b, a
0916   09EA E4            pop a
0917   09EB             ; --- END TERMS
0918   09EB E7            pop d
0919   09EC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0920   09F0 DA            push d
0921   09F1 FA 07 00      lea d, [bp + 7] ; $j
0922   09F4 2A            mov b, [d]
0923   09F5 38 00 00      mov c, 0
0924   09F8             ; --- START TERMS
0925   09F8 D7            push a
0926   09F9 11            mov a, b
0927   09FA FD 2E FF FF   mov32 cb, $ffffffff
0927   09FE FF FF 
0928   0A00 56            add b, a
0929   0A01 E4            pop a
0930   0A02             ; --- END TERMS
0931   0A02 E7            pop d
0932   0A03 5A            add d, b
0933   0A04 E4            pop a
0934   0A05 32            mov bl, [d]
0935   0A06 A7 00         mov bh, 0
0936   0A08 38 00 00      mov c, 0
0937   0A0B             ; --- START RELATIONAL
0938   0A0B D7            push a
0939   0A0C 11            mov a, b
0940   0A0D FD 2E 40 00   mov32 cb, $00000040
0940   0A11 00 00 
0941   0A13 B0            cmp a, b
0942   0A14 FD 71         seq ; ==
0943   0A16 E4            pop a
0944   0A17             ; --- END RELATIONAL
0945   0A17 C0 00 00      cmp b, 0
0946   0A1A C6 30 0A      je _if19_exit
0947   0A1D             _if19_TRUE:
0948   0A1D             ; count++; 
0949   0A1D FA FF FF      lea d, [bp + -1] ; $count
0950   0A20 2A            mov b, [d]
0951   0A21 38 00 00      mov c, 0
0952   0A24 11            mov a, b
0953   0A25 FD 77         inc b
0954   0A27 FA FF FF      lea d, [bp + -1] ; $count
0955   0A2A FD 43         mov [d], b
0956   0A2C 27            mov b, a
0957   0A2D 0A 30 0A      jmp _if19_exit
0958   0A30             _if19_exit:
0959   0A30             ; if(currState[i+1][j] == '@') 			count++; 
0960   0A30             _if20_cond:
0961   0A30 3B AC 18      mov d, _currState_data ; $currState
0962   0A33 D7            push a
0963   0A34 DA            push d
0964   0A35 FA 05 00      lea d, [bp + 5] ; $i
0965   0A38 2A            mov b, [d]
0966   0A39 38 00 00      mov c, 0
0967   0A3C             ; --- START TERMS
0968   0A3C D7            push a
0969   0A3D 11            mov a, b
0970   0A3E FD 2E 01 00   mov32 cb, $00000001
0970   0A42 00 00 
0971   0A44 56            add b, a
0972   0A45 E4            pop a
0973   0A46             ; --- END TERMS
0974   0A46 E7            pop d
0975   0A47 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0976   0A4B DA            push d
0977   0A4C FA 07 00      lea d, [bp + 7] ; $j
0978   0A4F 2A            mov b, [d]
0979   0A50 38 00 00      mov c, 0
0980   0A53 E7            pop d
0981   0A54 5A            add d, b
0982   0A55 E4            pop a
0983   0A56 32            mov bl, [d]
0984   0A57 A7 00         mov bh, 0
0985   0A59 38 00 00      mov c, 0
0986   0A5C             ; --- START RELATIONAL
0987   0A5C D7            push a
0988   0A5D 11            mov a, b
0989   0A5E FD 2E 40 00   mov32 cb, $00000040
0989   0A62 00 00 
0990   0A64 B0            cmp a, b
0991   0A65 FD 71         seq ; ==
0992   0A67 E4            pop a
0993   0A68             ; --- END RELATIONAL
0994   0A68 C0 00 00      cmp b, 0
0995   0A6B C6 81 0A      je _if20_exit
0996   0A6E             _if20_TRUE:
0997   0A6E             ; count++; 
0998   0A6E FA FF FF      lea d, [bp + -1] ; $count
0999   0A71 2A            mov b, [d]
1000   0A72 38 00 00      mov c, 0
1001   0A75 11            mov a, b
1002   0A76 FD 77         inc b
1003   0A78 FA FF FF      lea d, [bp + -1] ; $count
1004   0A7B FD 43         mov [d], b
1005   0A7D 27            mov b, a
1006   0A7E 0A 81 0A      jmp _if20_exit
1007   0A81             _if20_exit:
1008   0A81             ; if(currState[i+1][j+1] == '@') 		count++; 
1009   0A81             _if21_cond:
1010   0A81 3B AC 18      mov d, _currState_data ; $currState
1011   0A84 D7            push a
1012   0A85 DA            push d
1013   0A86 FA 05 00      lea d, [bp + 5] ; $i
1014   0A89 2A            mov b, [d]
1015   0A8A 38 00 00      mov c, 0
1016   0A8D             ; --- START TERMS
1017   0A8D D7            push a
1018   0A8E 11            mov a, b
1019   0A8F FD 2E 01 00   mov32 cb, $00000001
1019   0A93 00 00 
1020   0A95 56            add b, a
1021   0A96 E4            pop a
1022   0A97             ; --- END TERMS
1023   0A97 E7            pop d
1024   0A98 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
1025   0A9C DA            push d
1026   0A9D FA 07 00      lea d, [bp + 7] ; $j
1027   0AA0 2A            mov b, [d]
1028   0AA1 38 00 00      mov c, 0
1029   0AA4             ; --- START TERMS
1030   0AA4 D7            push a
1031   0AA5 11            mov a, b
1032   0AA6 FD 2E 01 00   mov32 cb, $00000001
1032   0AAA 00 00 
1033   0AAC 56            add b, a
1034   0AAD E4            pop a
1035   0AAE             ; --- END TERMS
1036   0AAE E7            pop d
1037   0AAF 5A            add d, b
1038   0AB0 E4            pop a
1039   0AB1 32            mov bl, [d]
1040   0AB2 A7 00         mov bh, 0
1041   0AB4 38 00 00      mov c, 0
1042   0AB7             ; --- START RELATIONAL
1043   0AB7 D7            push a
1044   0AB8 11            mov a, b
1045   0AB9 FD 2E 40 00   mov32 cb, $00000040
1045   0ABD 00 00 
1046   0ABF B0            cmp a, b
1047   0AC0 FD 71         seq ; ==
1048   0AC2 E4            pop a
1049   0AC3             ; --- END RELATIONAL
1050   0AC3 C0 00 00      cmp b, 0
1051   0AC6 C6 DC 0A      je _if21_exit
1052   0AC9             _if21_TRUE:
1053   0AC9             ; count++; 
1054   0AC9 FA FF FF      lea d, [bp + -1] ; $count
1055   0ACC 2A            mov b, [d]
1056   0ACD 38 00 00      mov c, 0
1057   0AD0 11            mov a, b
1058   0AD1 FD 77         inc b
1059   0AD3 FA FF FF      lea d, [bp + -1] ; $count
1060   0AD6 FD 43         mov [d], b
1061   0AD8 27            mov b, a
1062   0AD9 0A DC 0A      jmp _if21_exit
1063   0ADC             _if21_exit:
1064   0ADC             ; return count; 
1065   0ADC FA FF FF      lea d, [bp + -1] ; $count
1066   0ADF 2A            mov b, [d]
1067   0AE0 38 00 00      mov c, 0
1068   0AE3 F9            leave
1069   0AE4 09            ret
1070   0AE5             
1071   0AE5             printf:
1072   0AE5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1073   0AE8             ; char *p, *format_p; 
1074   0AE8 52 02 00      sub sp, 2
1075   0AEB 52 02 00      sub sp, 2
1076   0AEE             ; format_p = format; 
1077   0AEE FA FD FF      lea d, [bp + -3] ; $format_p
1078   0AF1 DA            push d
1079   0AF2 FA 05 00      lea d, [bp + 5] ; $format
1080   0AF5 2A            mov b, [d]
1081   0AF6 38 00 00      mov c, 0
1082   0AF9 E7            pop d
1083   0AFA FD 43         mov [d], b
1084   0AFC             ; p = &format + 2; 
1085   0AFC FA FF FF      lea d, [bp + -1] ; $p
1086   0AFF DA            push d
1087   0B00 FA 05 00      lea d, [bp + 5] ; $format
1088   0B03 2D            mov b, d
1089   0B04             ; --- START TERMS
1090   0B04 D7            push a
1091   0B05 11            mov a, b
1092   0B06 FD 2E 02 00   mov32 cb, $00000002
1092   0B0A 00 00 
1093   0B0C 56            add b, a
1094   0B0D E4            pop a
1095   0B0E             ; --- END TERMS
1096   0B0E E7            pop d
1097   0B0F FD 43         mov [d], b
1098   0B11             ; for(;;){ 
1099   0B11             _for22_init:
1100   0B11             _for22_cond:
1101   0B11             _for22_block:
1102   0B11             ; if(!*format_p) break; 
1103   0B11             _if23_cond:
1104   0B11 FA FD FF      lea d, [bp + -3] ; $format_p
1105   0B14 2A            mov b, [d]
1106   0B15 38 00 00      mov c, 0
1107   0B18 74            mov d, b
1108   0B19 32            mov bl, [d]
1109   0B1A A7 00         mov bh, 0
1110   0B1C 38 00 00      mov c, 0
1111   0B1F C0 00 00      cmp b, 0
1112   0B22 FD 71         seq ; !
1113   0B24 C0 00 00      cmp b, 0
1114   0B27 C6 30 0B      je _if23_else
1115   0B2A             _if23_TRUE:
1116   0B2A             ; break; 
1117   0B2A 0A E0 0D      jmp _for22_exit ; for break
1118   0B2D 0A DD 0D      jmp _if23_exit
1119   0B30             _if23_else:
1120   0B30             ; if(*format_p == '%'){ 
1121   0B30             _if24_cond:
1122   0B30 FA FD FF      lea d, [bp + -3] ; $format_p
1123   0B33 2A            mov b, [d]
1124   0B34 38 00 00      mov c, 0
1125   0B37 74            mov d, b
1126   0B38 32            mov bl, [d]
1127   0B39 A7 00         mov bh, 0
1128   0B3B 38 00 00      mov c, 0
1129   0B3E             ; --- START RELATIONAL
1130   0B3E D7            push a
1131   0B3F 11            mov a, b
1132   0B40 FD 2E 25 00   mov32 cb, $00000025
1132   0B44 00 00 
1133   0B46 B0            cmp a, b
1134   0B47 FD 71         seq ; ==
1135   0B49 E4            pop a
1136   0B4A             ; --- END RELATIONAL
1137   0B4A C0 00 00      cmp b, 0
1138   0B4D C6 B8 0D      je _if24_else
1139   0B50             _if24_TRUE:
1140   0B50             ; format_p++; 
1141   0B50 FA FD FF      lea d, [bp + -3] ; $format_p
1142   0B53 2A            mov b, [d]
1143   0B54 38 00 00      mov c, 0
1144   0B57 FD 77         inc b
1145   0B59 FA FD FF      lea d, [bp + -3] ; $format_p
1146   0B5C FD 43         mov [d], b
1147   0B5E FD 7D         dec b
1148   0B60             ; switch(*format_p){ 
1149   0B60             _switch25_expr:
1150   0B60 FA FD FF      lea d, [bp + -3] ; $format_p
1151   0B63 2A            mov b, [d]
1152   0B64 38 00 00      mov c, 0
1153   0B67 74            mov d, b
1154   0B68 32            mov bl, [d]
1155   0B69 A7 00         mov bh, 0
1156   0B6B 38 00 00      mov c, 0
1157   0B6E             _switch25_comparisons:
1158   0B6E C1 6C         cmp bl, $6c
1159   0B70 C6 9C 0B      je _switch25_case0
1160   0B73 C1 4C         cmp bl, $4c
1161   0B75 C6 9C 0B      je _switch25_case1
1162   0B78 C1 64         cmp bl, $64
1163   0B7A C6 AC 0C      je _switch25_case2
1164   0B7D C1 69         cmp bl, $69
1165   0B7F C6 AC 0C      je _switch25_case3
1166   0B82 C1 75         cmp bl, $75
1167   0B84 C6 DC 0C      je _switch25_case4
1168   0B87 C1 78         cmp bl, $78
1169   0B89 C6 0C 0D      je _switch25_case5
1170   0B8C C1 63         cmp bl, $63
1171   0B8E C6 3C 0D      je _switch25_case6
1172   0B91 C1 73         cmp bl, $73
1173   0B93 C6 6C 0D      je _switch25_case7
1174   0B96 0A 99 0D      jmp _switch25_default
1175   0B99 0A A5 0D      jmp _switch25_exit
1176   0B9C             _switch25_case0:
1177   0B9C             _switch25_case1:
1178   0B9C             ; format_p++; 
1179   0B9C FA FD FF      lea d, [bp + -3] ; $format_p
1180   0B9F 2A            mov b, [d]
1181   0BA0 38 00 00      mov c, 0
1182   0BA3 FD 77         inc b
1183   0BA5 FA FD FF      lea d, [bp + -3] ; $format_p
1184   0BA8 FD 43         mov [d], b
1185   0BAA FD 7D         dec b
1186   0BAC             ; if(*format_p == 'd' || *format_p == 'i') 
1187   0BAC             _if26_cond:
1188   0BAC FA FD FF      lea d, [bp + -3] ; $format_p
1189   0BAF 2A            mov b, [d]
1190   0BB0 38 00 00      mov c, 0
1191   0BB3 74            mov d, b
1192   0BB4 32            mov bl, [d]
1193   0BB5 A7 00         mov bh, 0
1194   0BB7 38 00 00      mov c, 0
1195   0BBA             ; --- START RELATIONAL
1196   0BBA D7            push a
1197   0BBB 11            mov a, b
1198   0BBC FD 2E 64 00   mov32 cb, $00000064
1198   0BC0 00 00 
1199   0BC2 B0            cmp a, b
1200   0BC3 FD 71         seq ; ==
1201   0BC5 E4            pop a
1202   0BC6             ; --- END RELATIONAL
1203   0BC6             ; --- START LOGICAL OR
1204   0BC6 D7            push a
1205   0BC7 11            mov a, b
1206   0BC8 FA FD FF      lea d, [bp + -3] ; $format_p
1207   0BCB 2A            mov b, [d]
1208   0BCC 38 00 00      mov c, 0
1209   0BCF 74            mov d, b
1210   0BD0 32            mov bl, [d]
1211   0BD1 A7 00         mov bh, 0
1212   0BD3 38 00 00      mov c, 0
1213   0BD6             ; --- START RELATIONAL
1214   0BD6 D7            push a
1215   0BD7 11            mov a, b
1216   0BD8 FD 2E 69 00   mov32 cb, $00000069
1216   0BDC 00 00 
1217   0BDE B0            cmp a, b
1218   0BDF FD 71         seq ; ==
1219   0BE1 E4            pop a
1220   0BE2             ; --- END RELATIONAL
1221   0BE2 FD A8         sor a, b ; ||
1222   0BE4 E4            pop a
1223   0BE5             ; --- END LOGICAL OR
1224   0BE5 C0 00 00      cmp b, 0
1225   0BE8 C6 09 0C      je _if26_else
1226   0BEB             _if26_TRUE:
1227   0BEB             ; print_signed_long(*(long *)p); 
1228   0BEB             ; --- START FUNCTION CALL
1229   0BEB FA FF FF      lea d, [bp + -1] ; $p
1230   0BEE 2A            mov b, [d]
1231   0BEF 38 00 00      mov c, 0
1232   0BF2 74            mov d, b
1233   0BF3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1234   0BF6 FD 39         mov c, b ; And place it into C
1235   0BF8 2A            mov b, [d] ; Lower Word in B
1236   0BF9 12            mov a, c
1237   0BFA FD AA         swp a
1238   0BFC D7            push a
1239   0BFD FD AB         swp b
1240   0BFF D8            push b
1241   0C00 07 E2 0D      call print_signed_long
1242   0C03 51 04 00      add sp, 4
1243   0C06             ; --- END FUNCTION CALL
1244   0C06 0A 91 0C      jmp _if26_exit
1245   0C09             _if26_else:
1246   0C09             ; if(*format_p == 'u') 
1247   0C09             _if27_cond:
1248   0C09 FA FD FF      lea d, [bp + -3] ; $format_p
1249   0C0C 2A            mov b, [d]
1250   0C0D 38 00 00      mov c, 0
1251   0C10 74            mov d, b
1252   0C11 32            mov bl, [d]
1253   0C12 A7 00         mov bh, 0
1254   0C14 38 00 00      mov c, 0
1255   0C17             ; --- START RELATIONAL
1256   0C17 D7            push a
1257   0C18 11            mov a, b
1258   0C19 FD 2E 75 00   mov32 cb, $00000075
1258   0C1D 00 00 
1259   0C1F B0            cmp a, b
1260   0C20 FD 71         seq ; ==
1261   0C22 E4            pop a
1262   0C23             ; --- END RELATIONAL
1263   0C23 C0 00 00      cmp b, 0
1264   0C26 C6 47 0C      je _if27_else
1265   0C29             _if27_TRUE:
1266   0C29             ; print_unsigned_long(*(unsigned long *)p); 
1267   0C29             ; --- START FUNCTION CALL
1268   0C29 FA FF FF      lea d, [bp + -1] ; $p
1269   0C2C 2A            mov b, [d]
1270   0C2D 38 00 00      mov c, 0
1271   0C30 74            mov d, b
1272   0C31 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1273   0C34 FD 39         mov c, b ; And place it into C
1274   0C36 2A            mov b, [d] ; Lower Word in B
1275   0C37 12            mov a, c
1276   0C38 FD AA         swp a
1277   0C3A D7            push a
1278   0C3B FD AB         swp b
1279   0C3D D8            push b
1280   0C3E 07 6D 0F      call print_unsigned_long
1281   0C41 51 04 00      add sp, 4
1282   0C44             ; --- END FUNCTION CALL
1283   0C44 0A 91 0C      jmp _if27_exit
1284   0C47             _if27_else:
1285   0C47             ; if(*format_p == 'x') 
1286   0C47             _if28_cond:
1287   0C47 FA FD FF      lea d, [bp + -3] ; $format_p
1288   0C4A 2A            mov b, [d]
1289   0C4B 38 00 00      mov c, 0
1290   0C4E 74            mov d, b
1291   0C4F 32            mov bl, [d]
1292   0C50 A7 00         mov bh, 0
1293   0C52 38 00 00      mov c, 0
1294   0C55             ; --- START RELATIONAL
1295   0C55 D7            push a
1296   0C56 11            mov a, b
1297   0C57 FD 2E 78 00   mov32 cb, $00000078
1297   0C5B 00 00 
1298   0C5D B0            cmp a, b
1299   0C5E FD 71         seq ; ==
1300   0C60 E4            pop a
1301   0C61             ; --- END RELATIONAL
1302   0C61 C0 00 00      cmp b, 0
1303   0C64 C6 85 0C      je _if28_else
1304   0C67             _if28_TRUE:
1305   0C67             ; printx32(*(long int *)p); 
1306   0C67             ; --- START FUNCTION CALL
1307   0C67 FA FF FF      lea d, [bp + -1] ; $p
1308   0C6A 2A            mov b, [d]
1309   0C6B 38 00 00      mov c, 0
1310   0C6E 74            mov d, b
1311   0C6F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1312   0C72 FD 39         mov c, b ; And place it into C
1313   0C74 2A            mov b, [d] ; Lower Word in B
1314   0C75 12            mov a, c
1315   0C76 FD AA         swp a
1316   0C78 D7            push a
1317   0C79 FD AB         swp b
1318   0C7B D8            push b
1319   0C7C 07 99 10      call printx32
1320   0C7F 51 04 00      add sp, 4
1321   0C82             ; --- END FUNCTION CALL
1322   0C82 0A 91 0C      jmp _if28_exit
1323   0C85             _if28_else:
1324   0C85             ; err("Unexpected format in printf."); 
1325   0C85             ; --- START FUNCTION CALL
1326   0C85 26 7D 1D      mov b, _s3 ; "Unexpected format in printf."
1327   0C88 FD AB         swp b
1328   0C8A D8            push b
1329   0C8B 07 F9 10      call err
1330   0C8E 51 02 00      add sp, 2
1331   0C91             ; --- END FUNCTION CALL
1332   0C91             _if28_exit:
1333   0C91             _if27_exit:
1334   0C91             _if26_exit:
1335   0C91             ; p = p + 4; 
1336   0C91 FA FF FF      lea d, [bp + -1] ; $p
1337   0C94 DA            push d
1338   0C95 FA FF FF      lea d, [bp + -1] ; $p
1339   0C98 2A            mov b, [d]
1340   0C99 38 00 00      mov c, 0
1341   0C9C             ; --- START TERMS
1342   0C9C D7            push a
1343   0C9D 11            mov a, b
1344   0C9E FD 2E 04 00   mov32 cb, $00000004
1344   0CA2 00 00 
1345   0CA4 56            add b, a
1346   0CA5 E4            pop a
1347   0CA6             ; --- END TERMS
1348   0CA6 E7            pop d
1349   0CA7 FD 43         mov [d], b
1350   0CA9             ; break; 
1351   0CA9 0A A5 0D      jmp _switch25_exit ; case break
1352   0CAC             _switch25_case2:
1353   0CAC             _switch25_case3:
1354   0CAC             ; print_signed(*(int*)p); 
1355   0CAC             ; --- START FUNCTION CALL
1356   0CAC FA FF FF      lea d, [bp + -1] ; $p
1357   0CAF 2A            mov b, [d]
1358   0CB0 38 00 00      mov c, 0
1359   0CB3 74            mov d, b
1360   0CB4 2A            mov b, [d]
1361   0CB5 38 00 00      mov c, 0
1362   0CB8 FD AB         swp b
1363   0CBA D8            push b
1364   0CBB 07 27 11      call print_signed
1365   0CBE 51 02 00      add sp, 2
1366   0CC1             ; --- END FUNCTION CALL
1367   0CC1             ; p = p + 2; 
1368   0CC1 FA FF FF      lea d, [bp + -1] ; $p
1369   0CC4 DA            push d
1370   0CC5 FA FF FF      lea d, [bp + -1] ; $p
1371   0CC8 2A            mov b, [d]
1372   0CC9 38 00 00      mov c, 0
1373   0CCC             ; --- START TERMS
1374   0CCC D7            push a
1375   0CCD 11            mov a, b
1376   0CCE FD 2E 02 00   mov32 cb, $00000002
1376   0CD2 00 00 
1377   0CD4 56            add b, a
1378   0CD5 E4            pop a
1379   0CD6             ; --- END TERMS
1380   0CD6 E7            pop d
1381   0CD7 FD 43         mov [d], b
1382   0CD9             ; break; 
1383   0CD9 0A A5 0D      jmp _switch25_exit ; case break
1384   0CDC             _switch25_case4:
1385   0CDC             ; print_unsigned(*(unsigned int*)p); 
1386   0CDC             ; --- START FUNCTION CALL
1387   0CDC FA FF FF      lea d, [bp + -1] ; $p
1388   0CDF 2A            mov b, [d]
1389   0CE0 38 00 00      mov c, 0
1390   0CE3 74            mov d, b
1391   0CE4 2A            mov b, [d]
1392   0CE5 38 00 00      mov c, 0
1393   0CE8 FD AB         swp b
1394   0CEA D8            push b
1395   0CEB 07 70 12      call print_unsigned
1396   0CEE 51 02 00      add sp, 2
1397   0CF1             ; --- END FUNCTION CALL
1398   0CF1             ; p = p + 2; 
1399   0CF1 FA FF FF      lea d, [bp + -1] ; $p
1400   0CF4 DA            push d
1401   0CF5 FA FF FF      lea d, [bp + -1] ; $p
1402   0CF8 2A            mov b, [d]
1403   0CF9 38 00 00      mov c, 0
1404   0CFC             ; --- START TERMS
1405   0CFC D7            push a
1406   0CFD 11            mov a, b
1407   0CFE FD 2E 02 00   mov32 cb, $00000002
1407   0D02 00 00 
1408   0D04 56            add b, a
1409   0D05 E4            pop a
1410   0D06             ; --- END TERMS
1411   0D06 E7            pop d
1412   0D07 FD 43         mov [d], b
1413   0D09             ; break; 
1414   0D09 0A A5 0D      jmp _switch25_exit ; case break
1415   0D0C             _switch25_case5:
1416   0D0C             ; printx16(*(int*)p); 
1417   0D0C             ; --- START FUNCTION CALL
1418   0D0C FA FF FF      lea d, [bp + -1] ; $p
1419   0D0F 2A            mov b, [d]
1420   0D10 38 00 00      mov c, 0
1421   0D13 74            mov d, b
1422   0D14 2A            mov b, [d]
1423   0D15 38 00 00      mov c, 0
1424   0D18 FD AB         swp b
1425   0D1A D8            push b
1426   0D1B 07 80 13      call printx16
1427   0D1E 51 02 00      add sp, 2
1428   0D21             ; --- END FUNCTION CALL
1429   0D21             ; p = p + 2; 
1430   0D21 FA FF FF      lea d, [bp + -1] ; $p
1431   0D24 DA            push d
1432   0D25 FA FF FF      lea d, [bp + -1] ; $p
1433   0D28 2A            mov b, [d]
1434   0D29 38 00 00      mov c, 0
1435   0D2C             ; --- START TERMS
1436   0D2C D7            push a
1437   0D2D 11            mov a, b
1438   0D2E FD 2E 02 00   mov32 cb, $00000002
1438   0D32 00 00 
1439   0D34 56            add b, a
1440   0D35 E4            pop a
1441   0D36             ; --- END TERMS
1442   0D36 E7            pop d
1443   0D37 FD 43         mov [d], b
1444   0D39             ; break; 
1445   0D39 0A A5 0D      jmp _switch25_exit ; case break
1446   0D3C             _switch25_case6:
1447   0D3C             ; putchar(*(char*)p); 
1448   0D3C             ; --- START FUNCTION CALL
1449   0D3C FA FF FF      lea d, [bp + -1] ; $p
1450   0D3F 2A            mov b, [d]
1451   0D40 38 00 00      mov c, 0
1452   0D43 74            mov d, b
1453   0D44 32            mov bl, [d]
1454   0D45 A7 00         mov bh, 0
1455   0D47 38 00 00      mov c, 0
1456   0D4A DD            push bl
1457   0D4B 07 5F 0F      call putchar
1458   0D4E 51 01 00      add sp, 1
1459   0D51             ; --- END FUNCTION CALL
1460   0D51             ; p = p + 1; 
1461   0D51 FA FF FF      lea d, [bp + -1] ; $p
1462   0D54 DA            push d
1463   0D55 FA FF FF      lea d, [bp + -1] ; $p
1464   0D58 2A            mov b, [d]
1465   0D59 38 00 00      mov c, 0
1466   0D5C             ; --- START TERMS
1467   0D5C D7            push a
1468   0D5D 11            mov a, b
1469   0D5E FD 2E 01 00   mov32 cb, $00000001
1469   0D62 00 00 
1470   0D64 56            add b, a
1471   0D65 E4            pop a
1472   0D66             ; --- END TERMS
1473   0D66 E7            pop d
1474   0D67 FD 43         mov [d], b
1475   0D69             ; break; 
1476   0D69 0A A5 0D      jmp _switch25_exit ; case break
1477   0D6C             _switch25_case7:
1478   0D6C             ; print(*(char**)p); 
1479   0D6C             ; --- START FUNCTION CALL
1480   0D6C FA FF FF      lea d, [bp + -1] ; $p
1481   0D6F 2A            mov b, [d]
1482   0D70 38 00 00      mov c, 0
1483   0D73 74            mov d, b
1484   0D74 2A            mov b, [d]
1485   0D75 FD AB         swp b
1486   0D77 D8            push b
1487   0D78 07 0E 11      call print
1488   0D7B 51 02 00      add sp, 2
1489   0D7E             ; --- END FUNCTION CALL
1490   0D7E             ; p = p + 2; 
1491   0D7E FA FF FF      lea d, [bp + -1] ; $p
1492   0D81 DA            push d
1493   0D82 FA FF FF      lea d, [bp + -1] ; $p
1494   0D85 2A            mov b, [d]
1495   0D86 38 00 00      mov c, 0
1496   0D89             ; --- START TERMS
1497   0D89 D7            push a
1498   0D8A 11            mov a, b
1499   0D8B FD 2E 02 00   mov32 cb, $00000002
1499   0D8F 00 00 
1500   0D91 56            add b, a
1501   0D92 E4            pop a
1502   0D93             ; --- END TERMS
1503   0D93 E7            pop d
1504   0D94 FD 43         mov [d], b
1505   0D96             ; break; 
1506   0D96 0A A5 0D      jmp _switch25_exit ; case break
1507   0D99             _switch25_default:
1508   0D99             ; print("Error: Unknown argument type.\n"); 
1509   0D99             ; --- START FUNCTION CALL
1510   0D99 26 9A 1D      mov b, _s4 ; "Error: Unknown argument type.\n"
1511   0D9C FD AB         swp b
1512   0D9E D8            push b
1513   0D9F 07 0E 11      call print
1514   0DA2 51 02 00      add sp, 2
1515   0DA5             ; --- END FUNCTION CALL
1516   0DA5             _switch25_exit:
1517   0DA5             ; format_p++; 
1518   0DA5 FA FD FF      lea d, [bp + -3] ; $format_p
1519   0DA8 2A            mov b, [d]
1520   0DA9 38 00 00      mov c, 0
1521   0DAC FD 77         inc b
1522   0DAE FA FD FF      lea d, [bp + -3] ; $format_p
1523   0DB1 FD 43         mov [d], b
1524   0DB3 FD 7D         dec b
1525   0DB5 0A DD 0D      jmp _if24_exit
1526   0DB8             _if24_else:
1527   0DB8             ; putchar(*format_p); 
1528   0DB8             ; --- START FUNCTION CALL
1529   0DB8 FA FD FF      lea d, [bp + -3] ; $format_p
1530   0DBB 2A            mov b, [d]
1531   0DBC 38 00 00      mov c, 0
1532   0DBF 74            mov d, b
1533   0DC0 32            mov bl, [d]
1534   0DC1 A7 00         mov bh, 0
1535   0DC3 38 00 00      mov c, 0
1536   0DC6 DD            push bl
1537   0DC7 07 5F 0F      call putchar
1538   0DCA 51 01 00      add sp, 1
1539   0DCD             ; --- END FUNCTION CALL
1540   0DCD             ; format_p++; 
1541   0DCD FA FD FF      lea d, [bp + -3] ; $format_p
1542   0DD0 2A            mov b, [d]
1543   0DD1 38 00 00      mov c, 0
1544   0DD4 FD 77         inc b
1545   0DD6 FA FD FF      lea d, [bp + -3] ; $format_p
1546   0DD9 FD 43         mov [d], b
1547   0DDB FD 7D         dec b
1548   0DDD             _if24_exit:
1549   0DDD             _if23_exit:
1550   0DDD             _for22_update:
1551   0DDD 0A 11 0B      jmp _for22_cond
1552   0DE0             _for22_exit:
1553   0DE0 F9            leave
1554   0DE1 09            ret
1555   0DE2             
1556   0DE2             print_signed_long:
1557   0DE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1558   0DE5             ; char digits[10]; 
1559   0DE5 52 0A 00      sub sp, 10
1560   0DE8             ; int i = 0; 
1561   0DE8 52 02 00      sub sp, 2
1562   0DEB             ; --- START LOCAL VAR INITIALIZATION
1563   0DEB FA F5 FF      lea d, [bp + -11] ; $i
1564   0DEE DA            push d
1565   0DEF FD 2E 00 00   mov32 cb, $00000000
1565   0DF3 00 00 
1566   0DF5 E7            pop d
1567   0DF6 FD 43         mov [d], b
1568   0DF8             ; --- END LOCAL VAR INITIALIZATION
1569   0DF8             ; if (num < 0) { 
1570   0DF8             _if29_cond:
1571   0DF8 FA 05 00      lea d, [bp + 5] ; $num
1572   0DFB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1573   0DFE FD 39         mov c, b ; And place it into C
1574   0E00 2A            mov b, [d] ; Lower Word in B
1575   0E01             ; --- START RELATIONAL
1576   0E01 D7            push a
1577   0E02 FD D8         push g
1578   0E04 11            mov a, b
1579   0E05 FD 7A         mov g, c
1580   0E07 FD 2E 00 00   mov32 cb, $00000000
1580   0E0B 00 00 
1581   0E0D FD AF         cmp32 ga, cb
1582   0E0F FD 73         slt ; <
1583   0E11 FD F1         pop g
1584   0E13 E4            pop a
1585   0E14             ; --- END RELATIONAL
1586   0E14 C0 00 00      cmp b, 0
1587   0E17 C6 49 0E      je _if29_else
1588   0E1A             _if29_TRUE:
1589   0E1A             ; putchar('-'); 
1590   0E1A             ; --- START FUNCTION CALL
1591   0E1A FD 2E 2D 00   mov32 cb, $0000002d
1591   0E1E 00 00 
1592   0E20 DD            push bl
1593   0E21 07 5F 0F      call putchar
1594   0E24 51 01 00      add sp, 1
1595   0E27             ; --- END FUNCTION CALL
1596   0E27             ; num = -num; 
1597   0E27 FA 05 00      lea d, [bp + 5] ; $num
1598   0E2A DA            push d
1599   0E2B FA 05 00      lea d, [bp + 5] ; $num
1600   0E2E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1601   0E31 FD 39         mov c, b ; And place it into C
1602   0E33 2A            mov b, [d] ; Lower Word in B
1603   0E34 12            mov a, c
1604   0E35 95            not a
1605   0E36 97            not b
1606   0E37 55 01 00      add b, 1
1607   0E3A 5B 00 00      adc a, 0
1608   0E3D 39            mov c, a
1609   0E3E E7            pop d
1610   0E3F FD 43         mov [d], b
1611   0E41 28            mov b, c
1612   0E42 FD 44 02 00   mov [d + 2], b
1613   0E46 0A 7D 0E      jmp _if29_exit
1614   0E49             _if29_else:
1615   0E49             ; if (num == 0) { 
1616   0E49             _if30_cond:
1617   0E49 FA 05 00      lea d, [bp + 5] ; $num
1618   0E4C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1619   0E4F FD 39         mov c, b ; And place it into C
1620   0E51 2A            mov b, [d] ; Lower Word in B
1621   0E52             ; --- START RELATIONAL
1622   0E52 D7            push a
1623   0E53 FD D8         push g
1624   0E55 11            mov a, b
1625   0E56 FD 7A         mov g, c
1626   0E58 FD 2E 00 00   mov32 cb, $00000000
1626   0E5C 00 00 
1627   0E5E FD AF         cmp32 ga, cb
1628   0E60 FD 71         seq ; ==
1629   0E62 FD F1         pop g
1630   0E64 E4            pop a
1631   0E65             ; --- END RELATIONAL
1632   0E65 C0 00 00      cmp b, 0
1633   0E68 C6 7D 0E      je _if30_exit
1634   0E6B             _if30_TRUE:
1635   0E6B             ; putchar('0'); 
1636   0E6B             ; --- START FUNCTION CALL
1637   0E6B FD 2E 30 00   mov32 cb, $00000030
1637   0E6F 00 00 
1638   0E71 DD            push bl
1639   0E72 07 5F 0F      call putchar
1640   0E75 51 01 00      add sp, 1
1641   0E78             ; --- END FUNCTION CALL
1642   0E78             ; return; 
1643   0E78 F9            leave
1644   0E79 09            ret
1645   0E7A 0A 7D 0E      jmp _if30_exit
1646   0E7D             _if30_exit:
1647   0E7D             _if29_exit:
1648   0E7D             ; while (num > 0) { 
1649   0E7D             _while31_cond:
1650   0E7D FA 05 00      lea d, [bp + 5] ; $num
1651   0E80 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1652   0E83 FD 39         mov c, b ; And place it into C
1653   0E85 2A            mov b, [d] ; Lower Word in B
1654   0E86             ; --- START RELATIONAL
1655   0E86 D7            push a
1656   0E87 FD D8         push g
1657   0E89 11            mov a, b
1658   0E8A FD 7A         mov g, c
1659   0E8C FD 2E 00 00   mov32 cb, $00000000
1659   0E90 00 00 
1660   0E92 FD AF         cmp32 ga, cb
1661   0E94 FD 7F         sgt
1662   0E96 FD F1         pop g
1663   0E98 E4            pop a
1664   0E99             ; --- END RELATIONAL
1665   0E99 C0 00 00      cmp b, 0
1666   0E9C C6 15 0F      je _while31_exit
1667   0E9F             _while31_block:
1668   0E9F             ; digits[i] = '0' + (num % 10); 
1669   0E9F FA F7 FF      lea d, [bp + -9] ; $digits
1670   0EA2 D7            push a
1671   0EA3 DA            push d
1672   0EA4 FA F5 FF      lea d, [bp + -11] ; $i
1673   0EA7 2A            mov b, [d]
1674   0EA8 38 00 00      mov c, 0
1675   0EAB E7            pop d
1676   0EAC 5A            add d, b
1677   0EAD E4            pop a
1678   0EAE DA            push d
1679   0EAF FD 2E 30 00   mov32 cb, $00000030
1679   0EB3 00 00 
1680   0EB5             ; --- START TERMS
1681   0EB5 D7            push a
1682   0EB6 11            mov a, b
1683   0EB7 FA 05 00      lea d, [bp + 5] ; $num
1684   0EBA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1685   0EBD FD 39         mov c, b ; And place it into C
1686   0EBF 2A            mov b, [d] ; Lower Word in B
1687   0EC0             ; --- START FACTORS
1688   0EC0 D7            push a
1689   0EC1 FD D8         push g
1690   0EC3 11            mov a, b
1691   0EC4 FD 7A         mov g, c
1692   0EC6 FD 2E 0A 00   mov32 cb, $0000000a
1692   0ECA 00 00 
1693   0ECC AE            div a, b ; 
1694   0ECD 11            mov a, b
1695   0ECE FD 38         mov c, g
1696   0ED0 27            mov b, a
1697   0ED1 FD F1         pop g
1698   0ED3 E4            pop a
1699   0ED4             ; --- END FACTORS
1700   0ED4 FD 15         add32 cb, ga
1701   0ED6 E4            pop a
1702   0ED7             ; --- END TERMS
1703   0ED7 E7            pop d
1704   0ED8 FD 3E         mov [d], bl
1705   0EDA             ; num = num / 10; 
1706   0EDA FA 05 00      lea d, [bp + 5] ; $num
1707   0EDD DA            push d
1708   0EDE FA 05 00      lea d, [bp + 5] ; $num
1709   0EE1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1710   0EE4 FD 39         mov c, b ; And place it into C
1711   0EE6 2A            mov b, [d] ; Lower Word in B
1712   0EE7             ; --- START FACTORS
1713   0EE7 D7            push a
1714   0EE8 FD D8         push g
1715   0EEA 11            mov a, b
1716   0EEB FD 7A         mov g, c
1717   0EED FD 2E 0A 00   mov32 cb, $0000000a
1717   0EF1 00 00 
1718   0EF3 AE            div a, b
1719   0EF4 FD 38         mov c, g
1720   0EF6 27            mov b, a
1721   0EF7 FD F1         pop g
1722   0EF9 E4            pop a
1723   0EFA             ; --- END FACTORS
1724   0EFA E7            pop d
1725   0EFB FD 43         mov [d], b
1726   0EFD 28            mov b, c
1727   0EFE FD 44 02 00   mov [d + 2], b
1728   0F02             ; i++; 
1729   0F02 FA F5 FF      lea d, [bp + -11] ; $i
1730   0F05 2A            mov b, [d]
1731   0F06 38 00 00      mov c, 0
1732   0F09 11            mov a, b
1733   0F0A FD 77         inc b
1734   0F0C FA F5 FF      lea d, [bp + -11] ; $i
1735   0F0F FD 43         mov [d], b
1736   0F11 27            mov b, a
1737   0F12 0A 7D 0E      jmp _while31_cond
1738   0F15             _while31_exit:
1739   0F15             ; while (i > 0) { 
1740   0F15             _while38_cond:
1741   0F15 FA F5 FF      lea d, [bp + -11] ; $i
1742   0F18 2A            mov b, [d]
1743   0F19 38 00 00      mov c, 0
1744   0F1C             ; --- START RELATIONAL
1745   0F1C D7            push a
1746   0F1D 11            mov a, b
1747   0F1E FD 2E 00 00   mov32 cb, $00000000
1747   0F22 00 00 
1748   0F24 B0            cmp a, b
1749   0F25 FD 7F         sgt ; >
1750   0F27 E4            pop a
1751   0F28             ; --- END RELATIONAL
1752   0F28 C0 00 00      cmp b, 0
1753   0F2B C6 5D 0F      je _while38_exit
1754   0F2E             _while38_block:
1755   0F2E             ; i--; 
1756   0F2E FA F5 FF      lea d, [bp + -11] ; $i
1757   0F31 2A            mov b, [d]
1758   0F32 38 00 00      mov c, 0
1759   0F35 11            mov a, b
1760   0F36 FD 7D         dec b
1761   0F38 FA F5 FF      lea d, [bp + -11] ; $i
1762   0F3B FD 43         mov [d], b
1763   0F3D 27            mov b, a
1764   0F3E             ; putchar(digits[i]); 
1765   0F3E             ; --- START FUNCTION CALL
1766   0F3E FA F7 FF      lea d, [bp + -9] ; $digits
1767   0F41 D7            push a
1768   0F42 DA            push d
1769   0F43 FA F5 FF      lea d, [bp + -11] ; $i
1770   0F46 2A            mov b, [d]
1771   0F47 38 00 00      mov c, 0
1772   0F4A E7            pop d
1773   0F4B 5A            add d, b
1774   0F4C E4            pop a
1775   0F4D 32            mov bl, [d]
1776   0F4E A7 00         mov bh, 0
1777   0F50 38 00 00      mov c, 0
1778   0F53 DD            push bl
1779   0F54 07 5F 0F      call putchar
1780   0F57 51 01 00      add sp, 1
1781   0F5A             ; --- END FUNCTION CALL
1782   0F5A 0A 15 0F      jmp _while38_cond
1783   0F5D             _while38_exit:
1784   0F5D F9            leave
1785   0F5E 09            ret
1786   0F5F             
1787   0F5F             putchar:
1788   0F5F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1789   0F62             ; --- BEGIN INLINE ASM SEGMENT
1790   0F62 FA 05 00      lea d, [bp + 5] ; $c
1791   0F65 1E            mov al, [d]
1792   0F66 23            mov ah, al
1793   0F67 19 00         mov al, 0
1794   0F69 05 03         syscall sys_io      ; char in AH
1795   0F6B             ; --- END INLINE ASM SEGMENT
1796   0F6B F9            leave
1797   0F6C 09            ret
1798   0F6D             
1799   0F6D             print_unsigned_long:
1800   0F6D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1801   0F70             ; char digits[10]; 
1802   0F70 52 0A 00      sub sp, 10
1803   0F73             ; int i; 
1804   0F73 52 02 00      sub sp, 2
1805   0F76             ; i = 0; 
1806   0F76 FA F5 FF      lea d, [bp + -11] ; $i
1807   0F79 DA            push d
1808   0F7A FD 2E 00 00   mov32 cb, $00000000
1808   0F7E 00 00 
1809   0F80 E7            pop d
1810   0F81 FD 43         mov [d], b
1811   0F83             ; if(num == 0){ 
1812   0F83             _if39_cond:
1813   0F83 FA 05 00      lea d, [bp + 5] ; $num
1814   0F86 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1815   0F89 FD 39         mov c, b ; And place it into C
1816   0F8B 2A            mov b, [d] ; Lower Word in B
1817   0F8C             ; --- START RELATIONAL
1818   0F8C D7            push a
1819   0F8D FD D8         push g
1820   0F8F 11            mov a, b
1821   0F90 FD 7A         mov g, c
1822   0F92 FD 2E 00 00   mov32 cb, $00000000
1822   0F96 00 00 
1823   0F98 FD AF         cmp32 ga, cb
1824   0F9A FD 71         seq ; ==
1825   0F9C FD F1         pop g
1826   0F9E E4            pop a
1827   0F9F             ; --- END RELATIONAL
1828   0F9F C0 00 00      cmp b, 0
1829   0FA2 C6 B7 0F      je _if39_exit
1830   0FA5             _if39_TRUE:
1831   0FA5             ; putchar('0'); 
1832   0FA5             ; --- START FUNCTION CALL
1833   0FA5 FD 2E 30 00   mov32 cb, $00000030
1833   0FA9 00 00 
1834   0FAB DD            push bl
1835   0FAC 07 5F 0F      call putchar
1836   0FAF 51 01 00      add sp, 1
1837   0FB2             ; --- END FUNCTION CALL
1838   0FB2             ; return; 
1839   0FB2 F9            leave
1840   0FB3 09            ret
1841   0FB4 0A B7 0F      jmp _if39_exit
1842   0FB7             _if39_exit:
1843   0FB7             ; while (num > 0) { 
1844   0FB7             _while40_cond:
1845   0FB7 FA 05 00      lea d, [bp + 5] ; $num
1846   0FBA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1847   0FBD FD 39         mov c, b ; And place it into C
1848   0FBF 2A            mov b, [d] ; Lower Word in B
1849   0FC0             ; --- START RELATIONAL
1850   0FC0 D7            push a
1851   0FC1 FD D8         push g
1852   0FC3 11            mov a, b
1853   0FC4 FD 7A         mov g, c
1854   0FC6 FD 2E 00 00   mov32 cb, $00000000
1854   0FCA 00 00 
1855   0FCC FD AF         cmp32 ga, cb
1856   0FCE FD 81         sgu
1857   0FD0 FD F1         pop g
1858   0FD2 E4            pop a
1859   0FD3             ; --- END RELATIONAL
1860   0FD3 C0 00 00      cmp b, 0
1861   0FD6 C6 4F 10      je _while40_exit
1862   0FD9             _while40_block:
1863   0FD9             ; digits[i] = '0' + (num % 10); 
1864   0FD9 FA F7 FF      lea d, [bp + -9] ; $digits
1865   0FDC D7            push a
1866   0FDD DA            push d
1867   0FDE FA F5 FF      lea d, [bp + -11] ; $i
1868   0FE1 2A            mov b, [d]
1869   0FE2 38 00 00      mov c, 0
1870   0FE5 E7            pop d
1871   0FE6 5A            add d, b
1872   0FE7 E4            pop a
1873   0FE8 DA            push d
1874   0FE9 FD 2E 30 00   mov32 cb, $00000030
1874   0FED 00 00 
1875   0FEF             ; --- START TERMS
1876   0FEF D7            push a
1877   0FF0 11            mov a, b
1878   0FF1 FA 05 00      lea d, [bp + 5] ; $num
1879   0FF4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1880   0FF7 FD 39         mov c, b ; And place it into C
1881   0FF9 2A            mov b, [d] ; Lower Word in B
1882   0FFA             ; --- START FACTORS
1883   0FFA D7            push a
1884   0FFB FD D8         push g
1885   0FFD 11            mov a, b
1886   0FFE FD 7A         mov g, c
1887   1000 FD 2E 0A 00   mov32 cb, $0000000a
1887   1004 00 00 
1888   1006 AE            div a, b ; 
1889   1007 11            mov a, b
1890   1008 FD 38         mov c, g
1891   100A 27            mov b, a
1892   100B FD F1         pop g
1893   100D E4            pop a
1894   100E             ; --- END FACTORS
1895   100E FD 15         add32 cb, ga
1896   1010 E4            pop a
1897   1011             ; --- END TERMS
1898   1011 E7            pop d
1899   1012 FD 3E         mov [d], bl
1900   1014             ; num = num / 10; 
1901   1014 FA 05 00      lea d, [bp + 5] ; $num
1902   1017 DA            push d
1903   1018 FA 05 00      lea d, [bp + 5] ; $num
1904   101B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1905   101E FD 39         mov c, b ; And place it into C
1906   1020 2A            mov b, [d] ; Lower Word in B
1907   1021             ; --- START FACTORS
1908   1021 D7            push a
1909   1022 FD D8         push g
1910   1024 11            mov a, b
1911   1025 FD 7A         mov g, c
1912   1027 FD 2E 0A 00   mov32 cb, $0000000a
1912   102B 00 00 
1913   102D AE            div a, b
1914   102E FD 38         mov c, g
1915   1030 27            mov b, a
1916   1031 FD F1         pop g
1917   1033 E4            pop a
1918   1034             ; --- END FACTORS
1919   1034 E7            pop d
1920   1035 FD 43         mov [d], b
1921   1037 28            mov b, c
1922   1038 FD 44 02 00   mov [d + 2], b
1923   103C             ; i++; 
1924   103C FA F5 FF      lea d, [bp + -11] ; $i
1925   103F 2A            mov b, [d]
1926   1040 38 00 00      mov c, 0
1927   1043 11            mov a, b
1928   1044 FD 77         inc b
1929   1046 FA F5 FF      lea d, [bp + -11] ; $i
1930   1049 FD 43         mov [d], b
1931   104B 27            mov b, a
1932   104C 0A B7 0F      jmp _while40_cond
1933   104F             _while40_exit:
1934   104F             ; while (i > 0) { 
1935   104F             _while47_cond:
1936   104F FA F5 FF      lea d, [bp + -11] ; $i
1937   1052 2A            mov b, [d]
1938   1053 38 00 00      mov c, 0
1939   1056             ; --- START RELATIONAL
1940   1056 D7            push a
1941   1057 11            mov a, b
1942   1058 FD 2E 00 00   mov32 cb, $00000000
1942   105C 00 00 
1943   105E B0            cmp a, b
1944   105F FD 7F         sgt ; >
1945   1061 E4            pop a
1946   1062             ; --- END RELATIONAL
1947   1062 C0 00 00      cmp b, 0
1948   1065 C6 97 10      je _while47_exit
1949   1068             _while47_block:
1950   1068             ; i--; 
1951   1068 FA F5 FF      lea d, [bp + -11] ; $i
1952   106B 2A            mov b, [d]
1953   106C 38 00 00      mov c, 0
1954   106F 11            mov a, b
1955   1070 FD 7D         dec b
1956   1072 FA F5 FF      lea d, [bp + -11] ; $i
1957   1075 FD 43         mov [d], b
1958   1077 27            mov b, a
1959   1078             ; putchar(digits[i]); 
1960   1078             ; --- START FUNCTION CALL
1961   1078 FA F7 FF      lea d, [bp + -9] ; $digits
1962   107B D7            push a
1963   107C DA            push d
1964   107D FA F5 FF      lea d, [bp + -11] ; $i
1965   1080 2A            mov b, [d]
1966   1081 38 00 00      mov c, 0
1967   1084 E7            pop d
1968   1085 5A            add d, b
1969   1086 E4            pop a
1970   1087 32            mov bl, [d]
1971   1088 A7 00         mov bh, 0
1972   108A 38 00 00      mov c, 0
1973   108D DD            push bl
1974   108E 07 5F 0F      call putchar
1975   1091 51 01 00      add sp, 1
1976   1094             ; --- END FUNCTION CALL
1977   1094 0A 4F 10      jmp _while47_cond
1978   1097             _while47_exit:
1979   1097 F9            leave
1980   1098 09            ret
1981   1099             
1982   1099             printx32:
1983   1099 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1984   109C             ; --- BEGIN INLINE ASM SEGMENT
1985   109C FA 05 00      lea d, [bp + 5] ; $hex
1986   109F 2B 02 00      mov b, [d+2]
1987   10A2 07 AB 10      call print_u16x_printx32
1988   10A5 2A            mov b, [d]
1989   10A6 07 AB 10      call print_u16x_printx32
1990   10A9             ; --- END INLINE ASM SEGMENT
1991   10A9             ; return; 
1992   10A9 F9            leave
1993   10AA 09            ret
1994   10AB             ; --- BEGIN INLINE ASM SEGMENT
1995   10AB             print_u16x_printx32:
1996   10AB D7            push a
1997   10AC D8            push b
1998   10AD DD            push bl
1999   10AE 30            mov bl, bh
2000   10AF 07 CD 10      call _itoa_printx32        ; convert bh to char in A
2001   10B2 2F            mov bl, al        ; save al
2002   10B3 19 00         mov al, 0
2003   10B5 05 03         syscall sys_io        ; display AH
2004   10B7 24            mov ah, bl        ; retrieve al
2005   10B8 19 00         mov al, 0
2006   10BA 05 03         syscall sys_io        ; display AL
2007   10BC EA            pop bl
2008   10BD 07 CD 10      call _itoa_printx32        ; convert bh to char in A
2009   10C0 2F            mov bl, al        ; save al
2010   10C1 19 00         mov al, 0
2011   10C3 05 03         syscall sys_io        ; display AH
2012   10C5 24            mov ah, bl        ; retrieve al
2013   10C6 19 00         mov al, 0
2014   10C8 05 03         syscall sys_io        ; display AL
2015   10CA E5            pop b
2016   10CB E4            pop a
2017   10CC 09            ret
2018   10CD             _itoa_printx32:
2019   10CD DA            push d
2020   10CE D8            push b
2021   10CF A7 00         mov bh, 0
2022   10D1 FD A4 04      shr bl, 4  
2023   10D4 74            mov d, b
2024   10D5 1F E7 10      mov al, [d + s_hex_digits_printx32]
2025   10D8 23            mov ah, al
2026   10D9 E5            pop b
2027   10DA D8            push b
2028   10DB A7 00         mov bh, 0
2029   10DD FD 87 0F      and bl, $0F
2030   10E0 74            mov d, b
2031   10E1 1F E7 10      mov al, [d + s_hex_digits_printx32]
2032   10E4 E5            pop b
2033   10E5 E7            pop d
2034   10E6 09            ret
2035   10E7 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2035   10EB 34 35 36 37 
2035   10EF 38 39 41 42 
2035   10F3 43 44 45 46 
2036   10F7             ; --- END INLINE ASM SEGMENT
2037   10F7 F9            leave
2038   10F8 09            ret
2039   10F9             
2040   10F9             err:
2041   10F9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2042   10FC             ; print(e); 
2043   10FC             ; --- START FUNCTION CALL
2044   10FC FA 05 00      lea d, [bp + 5] ; $e
2045   10FF 2A            mov b, [d]
2046   1100 38 00 00      mov c, 0
2047   1103 FD AB         swp b
2048   1105 D8            push b
2049   1106 07 0E 11      call print
2050   1109 51 02 00      add sp, 2
2051   110C             ; --- END FUNCTION CALL
2052   110C F9            leave
2053   110D 09            ret
2054   110E             
2055   110E             print:
2056   110E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2057   1111             ; --- BEGIN INLINE ASM SEGMENT
2058   1111 FA 05 00      lea d, [bp + 5] ; $s
2059   1114 FD 2A         mov d, [d]
2060   1116             _puts_L1_print:
2061   1116 1E            mov al, [d]
2062   1117 B9 00         cmp al, 0
2063   1119 C6 25 11      jz _puts_END_print
2064   111C 23            mov ah, al
2065   111D 19 00         mov al, 0
2066   111F 05 03         syscall sys_io
2067   1121 79            inc d
2068   1122 0A 16 11      jmp _puts_L1_print
2069   1125             _puts_END_print:
2070   1125             ; --- END INLINE ASM SEGMENT
2071   1125 F9            leave
2072   1126 09            ret
2073   1127             
2074   1127             print_signed:
2075   1127 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2076   112A             ; char digits[5]; 
2077   112A 52 05 00      sub sp, 5
2078   112D             ; int i = 0; 
2079   112D 52 02 00      sub sp, 2
2080   1130             ; --- START LOCAL VAR INITIALIZATION
2081   1130 FA FA FF      lea d, [bp + -6] ; $i
2082   1133 DA            push d
2083   1134 FD 2E 00 00   mov32 cb, $00000000
2083   1138 00 00 
2084   113A E7            pop d
2085   113B FD 43         mov [d], b
2086   113D             ; --- END LOCAL VAR INITIALIZATION
2087   113D             ; if (num < 0) { 
2088   113D             _if48_cond:
2089   113D FA 05 00      lea d, [bp + 5] ; $num
2090   1140 2A            mov b, [d]
2091   1141 38 00 00      mov c, 0
2092   1144             ; --- START RELATIONAL
2093   1144 D7            push a
2094   1145 11            mov a, b
2095   1146 FD 2E 00 00   mov32 cb, $00000000
2095   114A 00 00 
2096   114C B0            cmp a, b
2097   114D FD 73         slt ; < (signed)
2098   114F E4            pop a
2099   1150             ; --- END RELATIONAL
2100   1150 C0 00 00      cmp b, 0
2101   1153 C6 76 11      je _if48_else
2102   1156             _if48_TRUE:
2103   1156             ; putchar('-'); 
2104   1156             ; --- START FUNCTION CALL
2105   1156 FD 2E 2D 00   mov32 cb, $0000002d
2105   115A 00 00 
2106   115C DD            push bl
2107   115D 07 5F 0F      call putchar
2108   1160 51 01 00      add sp, 1
2109   1163             ; --- END FUNCTION CALL
2110   1163             ; num = -num; 
2111   1163 FA 05 00      lea d, [bp + 5] ; $num
2112   1166 DA            push d
2113   1167 FA 05 00      lea d, [bp + 5] ; $num
2114   116A 2A            mov b, [d]
2115   116B 38 00 00      mov c, 0
2116   116E FD 97         neg b
2117   1170 E7            pop d
2118   1171 FD 43         mov [d], b
2119   1173 0A A1 11      jmp _if48_exit
2120   1176             _if48_else:
2121   1176             ; if (num == 0) { 
2122   1176             _if49_cond:
2123   1176 FA 05 00      lea d, [bp + 5] ; $num
2124   1179 2A            mov b, [d]
2125   117A 38 00 00      mov c, 0
2126   117D             ; --- START RELATIONAL
2127   117D D7            push a
2128   117E 11            mov a, b
2129   117F FD 2E 00 00   mov32 cb, $00000000
2129   1183 00 00 
2130   1185 B0            cmp a, b
2131   1186 FD 71         seq ; ==
2132   1188 E4            pop a
2133   1189             ; --- END RELATIONAL
2134   1189 C0 00 00      cmp b, 0
2135   118C C6 A1 11      je _if49_exit
2136   118F             _if49_TRUE:
2137   118F             ; putchar('0'); 
2138   118F             ; --- START FUNCTION CALL
2139   118F FD 2E 30 00   mov32 cb, $00000030
2139   1193 00 00 
2140   1195 DD            push bl
2141   1196 07 5F 0F      call putchar
2142   1199 51 01 00      add sp, 1
2143   119C             ; --- END FUNCTION CALL
2144   119C             ; return; 
2145   119C F9            leave
2146   119D 09            ret
2147   119E 0A A1 11      jmp _if49_exit
2148   11A1             _if49_exit:
2149   11A1             _if48_exit:
2150   11A1             ; while (num > 0) { 
2151   11A1             _while50_cond:
2152   11A1 FA 05 00      lea d, [bp + 5] ; $num
2153   11A4 2A            mov b, [d]
2154   11A5 38 00 00      mov c, 0
2155   11A8             ; --- START RELATIONAL
2156   11A8 D7            push a
2157   11A9 11            mov a, b
2158   11AA FD 2E 00 00   mov32 cb, $00000000
2158   11AE 00 00 
2159   11B0 B0            cmp a, b
2160   11B1 FD 7F         sgt ; >
2161   11B3 E4            pop a
2162   11B4             ; --- END RELATIONAL
2163   11B4 C0 00 00      cmp b, 0
2164   11B7 C6 26 12      je _while50_exit
2165   11BA             _while50_block:
2166   11BA             ; digits[i] = '0' + (num % 10); 
2167   11BA FA FC FF      lea d, [bp + -4] ; $digits
2168   11BD D7            push a
2169   11BE DA            push d
2170   11BF FA FA FF      lea d, [bp + -6] ; $i
2171   11C2 2A            mov b, [d]
2172   11C3 38 00 00      mov c, 0
2173   11C6 E7            pop d
2174   11C7 5A            add d, b
2175   11C8 E4            pop a
2176   11C9 DA            push d
2177   11CA FD 2E 30 00   mov32 cb, $00000030
2177   11CE 00 00 
2178   11D0             ; --- START TERMS
2179   11D0 D7            push a
2180   11D1 11            mov a, b
2181   11D2 FA 05 00      lea d, [bp + 5] ; $num
2182   11D5 2A            mov b, [d]
2183   11D6 38 00 00      mov c, 0
2184   11D9             ; --- START FACTORS
2185   11D9 D7            push a
2186   11DA FD D8         push g
2187   11DC 11            mov a, b
2188   11DD FD 7A         mov g, c
2189   11DF FD 2E 0A 00   mov32 cb, $0000000a
2189   11E3 00 00 
2190   11E5 AE            div a, b ; 
2191   11E6 11            mov a, b
2192   11E7 FD 38         mov c, g
2193   11E9 27            mov b, a
2194   11EA FD F1         pop g
2195   11EC E4            pop a
2196   11ED             ; --- END FACTORS
2197   11ED 56            add b, a
2198   11EE E4            pop a
2199   11EF             ; --- END TERMS
2200   11EF E7            pop d
2201   11F0 FD 3E         mov [d], bl
2202   11F2             ; num = num / 10; 
2203   11F2 FA 05 00      lea d, [bp + 5] ; $num
2204   11F5 DA            push d
2205   11F6 FA 05 00      lea d, [bp + 5] ; $num
2206   11F9 2A            mov b, [d]
2207   11FA 38 00 00      mov c, 0
2208   11FD             ; --- START FACTORS
2209   11FD D7            push a
2210   11FE FD D8         push g
2211   1200 11            mov a, b
2212   1201 FD 7A         mov g, c
2213   1203 FD 2E 0A 00   mov32 cb, $0000000a
2213   1207 00 00 
2214   1209 AE            div a, b
2215   120A FD 38         mov c, g
2216   120C 27            mov b, a
2217   120D FD F1         pop g
2218   120F E4            pop a
2219   1210             ; --- END FACTORS
2220   1210 E7            pop d
2221   1211 FD 43         mov [d], b
2222   1213             ; i++; 
2223   1213 FA FA FF      lea d, [bp + -6] ; $i
2224   1216 2A            mov b, [d]
2225   1217 38 00 00      mov c, 0
2226   121A 11            mov a, b
2227   121B FD 77         inc b
2228   121D FA FA FF      lea d, [bp + -6] ; $i
2229   1220 FD 43         mov [d], b
2230   1222 27            mov b, a
2231   1223 0A A1 11      jmp _while50_cond
2232   1226             _while50_exit:
2233   1226             ; while (i > 0) { 
2234   1226             _while57_cond:
2235   1226 FA FA FF      lea d, [bp + -6] ; $i
2236   1229 2A            mov b, [d]
2237   122A 38 00 00      mov c, 0
2238   122D             ; --- START RELATIONAL
2239   122D D7            push a
2240   122E 11            mov a, b
2241   122F FD 2E 00 00   mov32 cb, $00000000
2241   1233 00 00 
2242   1235 B0            cmp a, b
2243   1236 FD 7F         sgt ; >
2244   1238 E4            pop a
2245   1239             ; --- END RELATIONAL
2246   1239 C0 00 00      cmp b, 0
2247   123C C6 6E 12      je _while57_exit
2248   123F             _while57_block:
2249   123F             ; i--; 
2250   123F FA FA FF      lea d, [bp + -6] ; $i
2251   1242 2A            mov b, [d]
2252   1243 38 00 00      mov c, 0
2253   1246 11            mov a, b
2254   1247 FD 7D         dec b
2255   1249 FA FA FF      lea d, [bp + -6] ; $i
2256   124C FD 43         mov [d], b
2257   124E 27            mov b, a
2258   124F             ; putchar(digits[i]); 
2259   124F             ; --- START FUNCTION CALL
2260   124F FA FC FF      lea d, [bp + -4] ; $digits
2261   1252 D7            push a
2262   1253 DA            push d
2263   1254 FA FA FF      lea d, [bp + -6] ; $i
2264   1257 2A            mov b, [d]
2265   1258 38 00 00      mov c, 0
2266   125B E7            pop d
2267   125C 5A            add d, b
2268   125D E4            pop a
2269   125E 32            mov bl, [d]
2270   125F A7 00         mov bh, 0
2271   1261 38 00 00      mov c, 0
2272   1264 DD            push bl
2273   1265 07 5F 0F      call putchar
2274   1268 51 01 00      add sp, 1
2275   126B             ; --- END FUNCTION CALL
2276   126B 0A 26 12      jmp _while57_cond
2277   126E             _while57_exit:
2278   126E F9            leave
2279   126F 09            ret
2280   1270             
2281   1270             print_unsigned:
2282   1270 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2283   1273             ; char digits[5]; 
2284   1273 52 05 00      sub sp, 5
2285   1276             ; int i; 
2286   1276 52 02 00      sub sp, 2
2287   1279             ; i = 0; 
2288   1279 FA FA FF      lea d, [bp + -6] ; $i
2289   127C DA            push d
2290   127D FD 2E 00 00   mov32 cb, $00000000
2290   1281 00 00 
2291   1283 E7            pop d
2292   1284 FD 43         mov [d], b
2293   1286             ; if(num == 0){ 
2294   1286             _if58_cond:
2295   1286 FA 05 00      lea d, [bp + 5] ; $num
2296   1289 2A            mov b, [d]
2297   128A 38 00 00      mov c, 0
2298   128D             ; --- START RELATIONAL
2299   128D D7            push a
2300   128E 11            mov a, b
2301   128F FD 2E 00 00   mov32 cb, $00000000
2301   1293 00 00 
2302   1295 B0            cmp a, b
2303   1296 FD 71         seq ; ==
2304   1298 E4            pop a
2305   1299             ; --- END RELATIONAL
2306   1299 C0 00 00      cmp b, 0
2307   129C C6 B1 12      je _if58_exit
2308   129F             _if58_TRUE:
2309   129F             ; putchar('0'); 
2310   129F             ; --- START FUNCTION CALL
2311   129F FD 2E 30 00   mov32 cb, $00000030
2311   12A3 00 00 
2312   12A5 DD            push bl
2313   12A6 07 5F 0F      call putchar
2314   12A9 51 01 00      add sp, 1
2315   12AC             ; --- END FUNCTION CALL
2316   12AC             ; return; 
2317   12AC F9            leave
2318   12AD 09            ret
2319   12AE 0A B1 12      jmp _if58_exit
2320   12B1             _if58_exit:
2321   12B1             ; while (num > 0) { 
2322   12B1             _while59_cond:
2323   12B1 FA 05 00      lea d, [bp + 5] ; $num
2324   12B4 2A            mov b, [d]
2325   12B5 38 00 00      mov c, 0
2326   12B8             ; --- START RELATIONAL
2327   12B8 D7            push a
2328   12B9 11            mov a, b
2329   12BA FD 2E 00 00   mov32 cb, $00000000
2329   12BE 00 00 
2330   12C0 B0            cmp a, b
2331   12C1 FD 81         sgu ; > (unsigned)
2332   12C3 E4            pop a
2333   12C4             ; --- END RELATIONAL
2334   12C4 C0 00 00      cmp b, 0
2335   12C7 C6 36 13      je _while59_exit
2336   12CA             _while59_block:
2337   12CA             ; digits[i] = '0' + (num % 10); 
2338   12CA FA FC FF      lea d, [bp + -4] ; $digits
2339   12CD D7            push a
2340   12CE DA            push d
2341   12CF FA FA FF      lea d, [bp + -6] ; $i
2342   12D2 2A            mov b, [d]
2343   12D3 38 00 00      mov c, 0
2344   12D6 E7            pop d
2345   12D7 5A            add d, b
2346   12D8 E4            pop a
2347   12D9 DA            push d
2348   12DA FD 2E 30 00   mov32 cb, $00000030
2348   12DE 00 00 
2349   12E0             ; --- START TERMS
2350   12E0 D7            push a
2351   12E1 11            mov a, b
2352   12E2 FA 05 00      lea d, [bp + 5] ; $num
2353   12E5 2A            mov b, [d]
2354   12E6 38 00 00      mov c, 0
2355   12E9             ; --- START FACTORS
2356   12E9 D7            push a
2357   12EA FD D8         push g
2358   12EC 11            mov a, b
2359   12ED FD 7A         mov g, c
2360   12EF FD 2E 0A 00   mov32 cb, $0000000a
2360   12F3 00 00 
2361   12F5 AE            div a, b ; 
2362   12F6 11            mov a, b
2363   12F7 FD 38         mov c, g
2364   12F9 27            mov b, a
2365   12FA FD F1         pop g
2366   12FC E4            pop a
2367   12FD             ; --- END FACTORS
2368   12FD 56            add b, a
2369   12FE E4            pop a
2370   12FF             ; --- END TERMS
2371   12FF E7            pop d
2372   1300 FD 3E         mov [d], bl
2373   1302             ; num = num / 10; 
2374   1302 FA 05 00      lea d, [bp + 5] ; $num
2375   1305 DA            push d
2376   1306 FA 05 00      lea d, [bp + 5] ; $num
2377   1309 2A            mov b, [d]
2378   130A 38 00 00      mov c, 0
2379   130D             ; --- START FACTORS
2380   130D D7            push a
2381   130E FD D8         push g
2382   1310 11            mov a, b
2383   1311 FD 7A         mov g, c
2384   1313 FD 2E 0A 00   mov32 cb, $0000000a
2384   1317 00 00 
2385   1319 AE            div a, b
2386   131A FD 38         mov c, g
2387   131C 27            mov b, a
2388   131D FD F1         pop g
2389   131F E4            pop a
2390   1320             ; --- END FACTORS
2391   1320 E7            pop d
2392   1321 FD 43         mov [d], b
2393   1323             ; i++; 
2394   1323 FA FA FF      lea d, [bp + -6] ; $i
2395   1326 2A            mov b, [d]
2396   1327 38 00 00      mov c, 0
2397   132A 11            mov a, b
2398   132B FD 77         inc b
2399   132D FA FA FF      lea d, [bp + -6] ; $i
2400   1330 FD 43         mov [d], b
2401   1332 27            mov b, a
2402   1333 0A B1 12      jmp _while59_cond
2403   1336             _while59_exit:
2404   1336             ; while (i > 0) { 
2405   1336             _while66_cond:
2406   1336 FA FA FF      lea d, [bp + -6] ; $i
2407   1339 2A            mov b, [d]
2408   133A 38 00 00      mov c, 0
2409   133D             ; --- START RELATIONAL
2410   133D D7            push a
2411   133E 11            mov a, b
2412   133F FD 2E 00 00   mov32 cb, $00000000
2412   1343 00 00 
2413   1345 B0            cmp a, b
2414   1346 FD 7F         sgt ; >
2415   1348 E4            pop a
2416   1349             ; --- END RELATIONAL
2417   1349 C0 00 00      cmp b, 0
2418   134C C6 7E 13      je _while66_exit
2419   134F             _while66_block:
2420   134F             ; i--; 
2421   134F FA FA FF      lea d, [bp + -6] ; $i
2422   1352 2A            mov b, [d]
2423   1353 38 00 00      mov c, 0
2424   1356 11            mov a, b
2425   1357 FD 7D         dec b
2426   1359 FA FA FF      lea d, [bp + -6] ; $i
2427   135C FD 43         mov [d], b
2428   135E 27            mov b, a
2429   135F             ; putchar(digits[i]); 
2430   135F             ; --- START FUNCTION CALL
2431   135F FA FC FF      lea d, [bp + -4] ; $digits
2432   1362 D7            push a
2433   1363 DA            push d
2434   1364 FA FA FF      lea d, [bp + -6] ; $i
2435   1367 2A            mov b, [d]
2436   1368 38 00 00      mov c, 0
2437   136B E7            pop d
2438   136C 5A            add d, b
2439   136D E4            pop a
2440   136E 32            mov bl, [d]
2441   136F A7 00         mov bh, 0
2442   1371 38 00 00      mov c, 0
2443   1374 DD            push bl
2444   1375 07 5F 0F      call putchar
2445   1378 51 01 00      add sp, 1
2446   137B             ; --- END FUNCTION CALL
2447   137B 0A 36 13      jmp _while66_cond
2448   137E             _while66_exit:
2449   137E F9            leave
2450   137F 09            ret
2451   1380             
2452   1380             printx16:
2453   1380 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2454   1383             ; --- BEGIN INLINE ASM SEGMENT
2455   1383 FA 05 00      lea d, [bp + 5] ; $hex
2456   1386 2A            mov b, [d]
2457   1387             print_u16x_printx16:
2458   1387 DD            push bl
2459   1388 30            mov bl, bh
2460   1389 07 A6 13      call _itoa_printx16        ; convert bh to char in A
2461   138C 2F            mov bl, al        ; save al
2462   138D 19 00         mov al, 0
2463   138F 05 03         syscall sys_io        ; display AH
2464   1391 24            mov ah, bl        ; retrieve al
2465   1392 19 00         mov al, 0
2466   1394 05 03         syscall sys_io        ; display AL
2467   1396 EA            pop bl
2468   1397 07 A6 13      call _itoa_printx16        ; convert bh to char in A
2469   139A 2F            mov bl, al        ; save al
2470   139B 19 00         mov al, 0
2471   139D 05 03         syscall sys_io        ; display AH
2472   139F 24            mov ah, bl        ; retrieve al
2473   13A0 19 00         mov al, 0
2474   13A2 05 03         syscall sys_io        ; display AL
2475   13A4             ; --- END INLINE ASM SEGMENT
2476   13A4             ; return; 
2477   13A4 F9            leave
2478   13A5 09            ret
2479   13A6             ; --- BEGIN INLINE ASM SEGMENT
2480   13A6             _itoa_printx16:
2481   13A6 DA            push d
2482   13A7 D8            push b
2483   13A8 A7 00         mov bh, 0
2484   13AA FD A4 04      shr bl, 4  
2485   13AD 74            mov d, b
2486   13AE 1F C0 13      mov al, [d + s_hex_digits_printx16]
2487   13B1 23            mov ah, al
2488   13B2 E5            pop b
2489   13B3 D8            push b
2490   13B4 A7 00         mov bh, 0
2491   13B6 FD 87 0F      and bl, $0F
2492   13B9 74            mov d, b
2493   13BA 1F C0 13      mov al, [d + s_hex_digits_printx16]
2494   13BD E5            pop b
2495   13BE E7            pop d
2496   13BF 09            ret
2497   13C0 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2497   13C4 34 35 36 37 
2497   13C8 38 39 41 42 
2497   13CC 43 44 45 46 
2498   13D0             ; --- END INLINE ASM SEGMENT
2499   13D0 F9            leave
2500   13D1 09            ret
2501   13D2             
2502   13D2             puts:
2503   13D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2504   13D5             ; --- BEGIN INLINE ASM SEGMENT
2505   13D5 FA 05 00      lea d, [bp + 5] ; $s
2506   13D8 FD 2A         mov d, [d]
2507   13DA             _puts_L1_puts:
2508   13DA 1E            mov al, [d]
2509   13DB B9 00         cmp al, 0
2510   13DD C6 E9 13      jz _puts_END_puts
2511   13E0 23            mov ah, al
2512   13E1 19 00         mov al, 0
2513   13E3 05 03         syscall sys_io
2514   13E5 79            inc d
2515   13E6 0A DA 13      jmp _puts_L1_puts
2516   13E9             _puts_END_puts:
2517   13E9 10 00 0A      mov a, $0A00
2518   13EC 05 03         syscall sys_io
2519   13EE             ; --- END INLINE ASM SEGMENT
2520   13EE F9            leave
2521   13EF 09            ret
2522   13F0             ; --- END TEXT SEGMENT
2523   13F0             
2524   13F0             ; --- BEGIN DATA SEGMENT
2525   13F0             _clear_data: 
2526   13F0 00          .db 
2527   13F1 1B 5B 32 4A .db $1b,$5b,$32,$4a,$1b,$5b,$48,$00,
2527   13F5 1B 5B 48 00 
2528   13F9 00 00 00    .fill 3, 0
2529   13FC 00 00 00 00 _nextState_data: .fill 1200, 0
2529   1400 00 00 00 00 
2529   1404 00 00 00 00 
2529   1408 00 00 00 00 
2529   140C 00 00 00 00 
2529   1410 00 00 00 00 
2529   1414 00 00 00 00 
2529   1418 00 00 00 00 
2529   141C 00 00 00 00 
2529   1420 00 00 00 00 
2529   1424 00 00 00 00 
2529   1428 00 00 00 00 
2529   142C 00 00 00 00 
2529   1430 00 00 00 00 
2529   1434 00 00 00 00 
2529   1438 00 00 00 00 
2529   143C 00 00 00 00 
2529   1440 00 00 00 00 
2529   1444 00 00 00 00 
2529   1448 00 00 00 00 
2529   144C 00 00 00 00 
2529   1450 00 00 00 00 
2529   1454 00 00 00 00 
2529   1458 00 00 00 00 
2529   145C 00 00 00 00 
2529   1460 00 00 00 00 
2529   1464 00 00 00 00 
2529   1468 00 00 00 00 
2529   146C 00 00 00 00 
2529   1470 00 00 00 00 
2529   1474 00 00 00 00 
2529   1478 00 00 00 00 
2529   147C 00 00 00 00 
2529   1480 00 00 00 00 
2529   1484 00 00 00 00 
2529   1488 00 00 00 00 
2529   148C 00 00 00 00 
2529   1490 00 00 00 00 
2529   1494 00 00 00 00 
2529   1498 00 00 00 00 
2529   149C 00 00 00 00 
2529   14A0 00 00 00 00 
2529   14A4 00 00 00 00 
2529   14A8 00 00 00 00 
2529   14AC 00 00 00 00 
2529   14B0 00 00 00 00 
2529   14B4 00 00 00 00 
2529   14B8 00 00 00 00 
2529   14BC 00 00 00 00 
2529   14C0 00 00 00 00 
2529   14C4 00 00 00 00 
2529   14C8 00 00 00 00 
2529   14CC 00 00 00 00 
2529   14D0 00 00 00 00 
2529   14D4 00 00 00 00 
2529   14D8 00 00 00 00 
2529   14DC 00 00 00 00 
2529   14E0 00 00 00 00 
2529   14E4 00 00 00 00 
2529   14E8 00 00 00 00 
2529   14EC 00 00 00 00 
2529   14F0 00 00 00 00 
2529   14F4 00 00 00 00 
2529   14F8 00 00 00 00 
2529   14FC 00 00 00 00 
2529   1500 00 00 00 00 
2529   1504 00 00 00 00 
2529   1508 00 00 00 00 
2529   150C 00 00 00 00 
2529   1510 00 00 00 00 
2529   1514 00 00 00 00 
2529   1518 00 00 00 00 
2529   151C 00 00 00 00 
2529   1520 00 00 00 00 
2529   1524 00 00 00 00 
2529   1528 00 00 00 00 
2529   152C 00 00 00 00 
2529   1530 00 00 00 00 
2529   1534 00 00 00 00 
2529   1538 00 00 00 00 
2529   153C 00 00 00 00 
2529   1540 00 00 00 00 
2529   1544 00 00 00 00 
2529   1548 00 00 00 00 
2529   154C 00 00 00 00 
2529   1550 00 00 00 00 
2529   1554 00 00 00 00 
2529   1558 00 00 00 00 
2529   155C 00 00 00 00 
2529   1560 00 00 00 00 
2529   1564 00 00 00 00 
2529   1568 00 00 00 00 
2529   156C 00 00 00 00 
2529   1570 00 00 00 00 
2529   1574 00 00 00 00 
2529   1578 00 00 00 00 
2529   157C 00 00 00 00 
2529   1580 00 00 00 00 
2529   1584 00 00 00 00 
2529   1588 00 00 00 00 
2529   158C 00 00 00 00 
2529   1590 00 00 00 00 
2529   1594 00 00 00 00 
2529   1598 00 00 00 00 
2529   159C 00 00 00 00 
2529   15A0 00 00 00 00 
2529   15A4 00 00 00 00 
2529   15A8 00 00 00 00 
2529   15AC 00 00 00 00 
2529   15B0 00 00 00 00 
2529   15B4 00 00 00 00 
2529   15B8 00 00 00 00 
2529   15BC 00 00 00 00 
2529   15C0 00 00 00 00 
2529   15C4 00 00 00 00 
2529   15C8 00 00 00 00 
2529   15CC 00 00 00 00 
2529   15D0 00 00 00 00 
2529   15D4 00 00 00 00 
2529   15D8 00 00 00 00 
2529   15DC 00 00 00 00 
2529   15E0 00 00 00 00 
2529   15E4 00 00 00 00 
2529   15E8 00 00 00 00 
2529   15EC 00 00 00 00 
2529   15F0 00 00 00 00 
2529   15F4 00 00 00 00 
2529   15F8 00 00 00 00 
2529   15FC 00 00 00 00 
2529   1600 00 00 00 00 
2529   1604 00 00 00 00 
2529   1608 00 00 00 00 
2529   160C 00 00 00 00 
2529   1610 00 00 00 00 
2529   1614 00 00 00 00 
2529   1618 00 00 00 00 
2529   161C 00 00 00 00 
2529   1620 00 00 00 00 
2529   1624 00 00 00 00 
2529   1628 00 00 00 00 
2529   162C 00 00 00 00 
2529   1630 00 00 00 00 
2529   1634 00 00 00 00 
2529   1638 00 00 00 00 
2529   163C 00 00 00 00 
2529   1640 00 00 00 00 
2529   1644 00 00 00 00 
2529   1648 00 00 00 00 
2529   164C 00 00 00 00 
2529   1650 00 00 00 00 
2529   1654 00 00 00 00 
2529   1658 00 00 00 00 
2529   165C 00 00 00 00 
2529   1660 00 00 00 00 
2529   1664 00 00 00 00 
2529   1668 00 00 00 00 
2529   166C 00 00 00 00 
2529   1670 00 00 00 00 
2529   1674 00 00 00 00 
2529   1678 00 00 00 00 
2529   167C 00 00 00 00 
2529   1680 00 00 00 00 
2529   1684 00 00 00 00 
2529   1688 00 00 00 00 
2529   168C 00 00 00 00 
2529   1690 00 00 00 00 
2529   1694 00 00 00 00 
2529   1698 00 00 00 00 
2529   169C 00 00 00 00 
2529   16A0 00 00 00 00 
2529   16A4 00 00 00 00 
2529   16A8 00 00 00 00 
2529   16AC 00 00 00 00 
2529   16B0 00 00 00 00 
2529   16B4 00 00 00 00 
2529   16B8 00 00 00 00 
2529   16BC 00 00 00 00 
2529   16C0 00 00 00 00 
2529   16C4 00 00 00 00 
2529   16C8 00 00 00 00 
2529   16CC 00 00 00 00 
2529   16D0 00 00 00 00 
2529   16D4 00 00 00 00 
2529   16D8 00 00 00 00 
2529   16DC 00 00 00 00 
2529   16E0 00 00 00 00 
2529   16E4 00 00 00 00 
2529   16E8 00 00 00 00 
2529   16EC 00 00 00 00 
2529   16F0 00 00 00 00 
2529   16F4 00 00 00 00 
2529   16F8 00 00 00 00 
2529   16FC 00 00 00 00 
2529   1700 00 00 00 00 
2529   1704 00 00 00 00 
2529   1708 00 00 00 00 
2529   170C 00 00 00 00 
2529   1710 00 00 00 00 
2529   1714 00 00 00 00 
2529   1718 00 00 00 00 
2529   171C 00 00 00 00 
2529   1720 00 00 00 00 
2529   1724 00 00 00 00 
2529   1728 00 00 00 00 
2529   172C 00 00 00 00 
2529   1730 00 00 00 00 
2529   1734 00 00 00 00 
2529   1738 00 00 00 00 
2529   173C 00 00 00 00 
2529   1740 00 00 00 00 
2529   1744 00 00 00 00 
2529   1748 00 00 00 00 
2529   174C 00 00 00 00 
2529   1750 00 00 00 00 
2529   1754 00 00 00 00 
2529   1758 00 00 00 00 
2529   175C 00 00 00 00 
2529   1760 00 00 00 00 
2529   1764 00 00 00 00 
2529   1768 00 00 00 00 
2529   176C 00 00 00 00 
2529   1770 00 00 00 00 
2529   1774 00 00 00 00 
2529   1778 00 00 00 00 
2529   177C 00 00 00 00 
2529   1780 00 00 00 00 
2529   1784 00 00 00 00 
2529   1788 00 00 00 00 
2529   178C 00 00 00 00 
2529   1790 00 00 00 00 
2529   1794 00 00 00 00 
2529   1798 00 00 00 00 
2529   179C 00 00 00 00 
2529   17A0 00 00 00 00 
2529   17A4 00 00 00 00 
2529   17A8 00 00 00 00 
2529   17AC 00 00 00 00 
2529   17B0 00 00 00 00 
2529   17B4 00 00 00 00 
2529   17B8 00 00 00 00 
2529   17BC 00 00 00 00 
2529   17C0 00 00 00 00 
2529   17C4 00 00 00 00 
2529   17C8 00 00 00 00 
2529   17CC 00 00 00 00 
2529   17D0 00 00 00 00 
2529   17D4 00 00 00 00 
2529   17D8 00 00 00 00 
2529   17DC 00 00 00 00 
2529   17E0 00 00 00 00 
2529   17E4 00 00 00 00 
2529   17E8 00 00 00 00 
2529   17EC 00 00 00 00 
2529   17F0 00 00 00 00 
2529   17F4 00 00 00 00 
2529   17F8 00 00 00 00 
2529   17FC 00 00 00 00 
2529   1800 00 00 00 00 
2529   1804 00 00 00 00 
2529   1808 00 00 00 00 
2529   180C 00 00 00 00 
2529   1810 00 00 00 00 
2529   1814 00 00 00 00 
2529   1818 00 00 00 00 
2529   181C 00 00 00 00 
2529   1820 00 00 00 00 
2529   1824 00 00 00 00 
2529   1828 00 00 00 00 
2529   182C 00 00 00 00 
2529   1830 00 00 00 00 
2529   1834 00 00 00 00 
2529   1838 00 00 00 00 
2529   183C 00 00 00 00 
2529   1840 00 00 00 00 
2529   1844 00 00 00 00 
2529   1848 00 00 00 00 
2529   184C 00 00 00 00 
2529   1850 00 00 00 00 
2529   1854 00 00 00 00 
2529   1858 00 00 00 00 
2529   185C 00 00 00 00 
2529   1860 00 00 00 00 
2529   1864 00 00 00 00 
2529   1868 00 00 00 00 
2529   186C 00 00 00 00 
2529   1870 00 00 00 00 
2529   1874 00 00 00 00 
2529   1878 00 00 00 00 
2529   187C 00 00 00 00 
2529   1880 00 00 00 00 
2529   1884 00 00 00 00 
2529   1888 00 00 00 00 
2529   188C 00 00 00 00 
2529   1890 00 00 00 00 
2529   1894 00 00 00 00 
2529   1898 00 00 00 00 
2529   189C 00 00 00 00 
2529   18A0 00 00 00 00 
2529   18A4 00 00 00 00 
2529   18A8 00 00 00 00 
2530   18AC             _currState_data: 
2531   18AC 00          .db 
2532   18AD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2532   18B1 20 20 20 20 
2532   18B5 20 20 20 20 
2532   18B9 20 20 20 20 
2532   18BD 20 20 20 20 
2532   18C1 20 20 20 20 
2532   18C5 20 20 20 20 
2532   18C9 20 20 
2533   18CB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2533   18CF 20 20 20 20 
2533   18D3 20 20 20 20 
2533   18D7 20 20 20 20 
2533   18DB 20 20 20 20 
2533   18DF 20 20 20 20 
2533   18E3 20 20 20 20 
2533   18E7 20 20 
2534   18E9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2534   18ED 20 20 20 20 
2534   18F1 20 20 20 20 
2534   18F5 20 20 20 20 
2534   18F9 20 20 20 20 
2534   18FD 20 20 20 20 
2534   1901 20 20 20 20 
2534   1905 20 20 
2535   1907 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2535   190B 20 20 20 20 
2535   190F 20 20 20 20 
2535   1913 20 20 20 20 
2535   1917 20 20 20 20 
2535   191B 20 20 20 20 
2535   191F 20 20 20 20 
2535   1923 20 20 
2536   1925 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2536   1929 20 20 20 20 
2536   192D 20 20 20 20 
2536   1931 20 20 20 20 
2536   1935 20 20 20 20 
2536   1939 20 20 20 20 
2536   193D 20 20 20 40 
2536   1941 20 20 
2537   1943 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2537   1947 20 20 20 20 
2537   194B 20 20 20 20 
2537   194F 20 20 20 20 
2537   1953 20 20 20 20 
2537   1957 20 20 20 20 
2537   195B 20 20 20 20 
2537   195F 20 20 
2538   1961 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2538   1965 20 40 20 40 
2538   1969 20 20 20 20 
2538   196D 20 20 20 20 
2538   1971 20 20 20 20 
2538   1975 20 20 20 20 
2538   1979 20 20 20 20 
2538   197D 20 20 
2539   197F 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
2539   1983 20 40 40 20 
2539   1987 20 20 20 20 
2539   198B 20 40 40 20 
2539   198F 20 20 20 20 
2539   1993 20 20 20 20 
2539   1997 20 20 20 40 
2539   199B 40 20 
2540   199D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2540   19A1 20 20 20 20 
2540   19A5 20 20 20 20 
2540   19A9 20 20 40 20 
2540   19AD 20 20 40 20 
2540   19B1 20 20 20 40 
2540   19B5 40 20 20 20 
2540   19B9 20 20 
2541   19BB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
2541   19BF 20 20 20 40 
2541   19C3 40 20 20 20 
2541   19C7 20 40 40 20 
2541   19CB 20 20 20 20 
2541   19CF 20 20 20 40 
2541   19D3 20 20 20 20 
2541   19D7 20 40 
2542   19D9 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2542   19DD 40 20 20 20 
2542   19E1 20 20 20 20 
2542   19E5 20 20 20 20 
2542   19E9 20 20 20 20 
2542   19ED 20 20 20 40 
2542   19F1 40 20 20 20 
2542   19F5 20 20 
2543   19F7 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2543   19FB 20 20 20 40 
2543   19FF 20 40 40 20 
2543   1A03 20 20 20 40 
2543   1A07 20 40 20 20 
2543   1A0B 20 20 20 20 
2543   1A0F 20 20 20 20 
2543   1A13 20 20 
2544   1A15 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2544   1A19 20 20 20 20 
2544   1A1D 20 20 20 20 
2544   1A21 20 40 20 20 
2544   1A25 20 20 20 40 
2544   1A29 20 20 20 20 
2544   1A2D 20 20 20 40 
2544   1A31 20 20 
2545   1A33 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
2545   1A37 20 20 20 20 
2545   1A3B 20 20 20 20 
2545   1A3F 20 20 20 20 
2545   1A43 20 20 20 20 
2545   1A47 20 20 20 20 
2545   1A4B 40 20 20 20 
2545   1A4F 40 20 
2546   1A51 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2546   1A55 20 20 20 20 
2546   1A59 20 20 20 20 
2546   1A5D 20 20 20 20 
2546   1A61 20 20 20 20 
2546   1A65 20 20 20 20 
2546   1A69 20 20 20 20 
2546   1A6D 20 20 
2547   1A6F 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2547   1A73 20 40 40 20 
2547   1A77 20 20 20 20 
2547   1A7B 20 20 20 20 
2547   1A7F 20 20 20 20 
2547   1A83 20 20 20 20 
2547   1A87 20 20 20 20 
2547   1A8B 20 20 
2548   1A8D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2548   1A91 20 20 20 20 
2548   1A95 20 20 20 20 
2548   1A99 20 20 20 20 
2548   1A9D 20 20 20 20 
2548   1AA1 20 20 20 20 
2548   1AA5 20 20 20 20 
2548   1AA9 20 20 
2549   1AAB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2549   1AAF 20 20 20 20 
2549   1AB3 20 20 20 20 
2549   1AB7 20 20 20 20 
2549   1ABB 20 20 20 20 
2549   1ABF 20 20 20 20 
2549   1AC3 20 20 20 20 
2549   1AC7 20 20 
2550   1AC9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2550   1ACD 20 20 20 20 
2550   1AD1 20 20 20 20 
2550   1AD5 20 20 20 20 
2550   1AD9 20 20 20 20 
2550   1ADD 20 20 20 20 
2550   1AE1 20 20 20 20 
2550   1AE5 20 20 
2551   1AE7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2551   1AEB 20 20 20 20 
2551   1AEF 20 20 20 20 
2551   1AF3 20 20 20 20 
2551   1AF7 20 20 20 20 
2551   1AFB 20 20 20 20 
2551   1AFF 20 20 20 20 
2551   1B03 20 20 
2552   1B05 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2552   1B09 20 20 20 20 
2552   1B0D 20 20 20 20 
2552   1B11 20 20 20 20 
2552   1B15 20 20 20 20 
2552   1B19 20 20 20 20 
2552   1B1D 20 20 20 20 
2552   1B21 20 20 
2553   1B23 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2553   1B27 20 20 20 20 
2553   1B2B 20 20 20 20 
2553   1B2F 20 20 20 20 
2553   1B33 20 20 20 20 
2553   1B37 20 20 20 20 
2553   1B3B 20 20 20 20 
2553   1B3F 20 20 
2554   1B41 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2554   1B45 20 20 20 20 
2554   1B49 20 20 20 20 
2554   1B4D 20 20 20 20 
2554   1B51 20 20 20 20 
2554   1B55 20 20 20 20 
2554   1B59 20 20 20 20 
2554   1B5D 20 20 
2555   1B5F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2555   1B63 20 20 20 20 
2555   1B67 20 20 20 20 
2555   1B6B 20 20 20 20 
2555   1B6F 20 20 20 20 
2555   1B73 20 20 20 20 
2555   1B77 20 20 20 20 
2555   1B7B 20 20 
2556   1B7D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2556   1B81 20 20 20 20 
2556   1B85 20 20 20 20 
2556   1B89 20 20 20 20 
2556   1B8D 20 20 20 20 
2556   1B91 20 20 20 20 
2556   1B95 20 20 20 20 
2556   1B99 20 20 
2557   1B9B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2557   1B9F 20 20 20 20 
2557   1BA3 20 20 20 20 
2557   1BA7 20 20 20 20 
2557   1BAB 20 20 20 20 
2557   1BAF 20 20 20 20 
2557   1BB3 20 20 20 20 
2557   1BB7 20 20 
2558   1BB9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2558   1BBD 20 20 20 20 
2558   1BC1 20 20 20 20 
2558   1BC5 20 20 20 20 
2558   1BC9 20 20 20 20 
2559   1BCD 00 00 00 00 .fill 400, 0
2559   1BD1 00 00 00 00 
2559   1BD5 00 00 00 00 
2559   1BD9 00 00 00 00 
2559   1BDD 00 00 00 00 
2559   1BE1 00 00 00 00 
2559   1BE5 00 00 00 00 
2559   1BE9 00 00 00 00 
2559   1BED 00 00 00 00 
2559   1BF1 00 00 00 00 
2559   1BF5 00 00 00 00 
2559   1BF9 00 00 00 00 
2559   1BFD 00 00 00 00 
2559   1C01 00 00 00 00 
2559   1C05 00 00 00 00 
2559   1C09 00 00 00 00 
2559   1C0D 00 00 00 00 
2559   1C11 00 00 00 00 
2559   1C15 00 00 00 00 
2559   1C19 00 00 00 00 
2559   1C1D 00 00 00 00 
2559   1C21 00 00 00 00 
2559   1C25 00 00 00 00 
2559   1C29 00 00 00 00 
2559   1C2D 00 00 00 00 
2559   1C31 00 00 00 00 
2559   1C35 00 00 00 00 
2559   1C39 00 00 00 00 
2559   1C3D 00 00 00 00 
2559   1C41 00 00 00 00 
2559   1C45 00 00 00 00 
2559   1C49 00 00 00 00 
2559   1C4D 00 00 00 00 
2559   1C51 00 00 00 00 
2559   1C55 00 00 00 00 
2559   1C59 00 00 00 00 
2559   1C5D 00 00 00 00 
2559   1C61 00 00 00 00 
2559   1C65 00 00 00 00 
2559   1C69 00 00 00 00 
2559   1C6D 00 00 00 00 
2559   1C71 00 00 00 00 
2559   1C75 00 00 00 00 
2559   1C79 00 00 00 00 
2559   1C7D 00 00 00 00 
2559   1C81 00 00 00 00 
2559   1C85 00 00 00 00 
2559   1C89 00 00 00 00 
2559   1C8D 00 00 00 00 
2559   1C91 00 00 00 00 
2559   1C95 00 00 00 00 
2559   1C99 00 00 00 00 
2559   1C9D 00 00 00 00 
2559   1CA1 00 00 00 00 
2559   1CA5 00 00 00 00 
2559   1CA9 00 00 00 00 
2559   1CAD 00 00 00 00 
2559   1CB1 00 00 00 00 
2559   1CB5 00 00 00 00 
2559   1CB9 00 00 00 00 
2559   1CBD 00 00 00 00 
2559   1CC1 00 00 00 00 
2559   1CC5 00 00 00 00 
2559   1CC9 00 00 00 00 
2559   1CCD 00 00 00 00 
2559   1CD1 00 00 00 00 
2559   1CD5 00 00 00 00 
2559   1CD9 00 00 00 00 
2559   1CDD 00 00 00 00 
2559   1CE1 00 00 00 00 
2559   1CE5 00 00 00 00 
2559   1CE9 00 00 00 00 
2559   1CED 00 00 00 00 
2559   1CF1 00 00 00 00 
2559   1CF5 00 00 00 00 
2559   1CF9 00 00 00 00 
2559   1CFD 00 00 00 00 
2559   1D01 00 00 00 00 
2559   1D05 00 00 00 00 
2559   1D09 00 00 00 00 
2559   1D0D 00 00 00 00 
2559   1D11 00 00 00 00 
2559   1D15 00 00 00 00 
2559   1D19 00 00 00 00 
2559   1D1D 00 00 00 00 
2559   1D21 00 00 00 00 
2559   1D25 00 00 00 00 
2559   1D29 00 00 00 00 
2559   1D2D 00 00 00 00 
2559   1D31 00 00 00 00 
2559   1D35 00 00 00 00 
2559   1D39 00 00 00 00 
2559   1D3D 00 00 00 00 
2559   1D41 00 00 00 00 
2559   1D45 00 00 00 00 
2559   1D49 00 00 00 00 
2559   1D4D 00 00 00 00 
2559   1D51 00 00 00 00 
2559   1D55 00 00 00 00 
2559   1D59 00 00 00 00 
2560   1D5D 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
2560   1D61 65 73 73 20 
2560   1D65 43 54 52 4C 
2560   1D69 2B 43 20 74 
2560   1D6D 6F 20 71 75 
2560   1D71 69 74 2E 0A 
2560   1D75 0D 00 
2561   1D77 40 20 00    _s1: .db "@ ", 0
2562   1D7A 2E 20 00    _s2: .db ". ", 0
2563   1D7D 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
2563   1D81 70 65 63 74 
2563   1D85 65 64 20 66 
2563   1D89 6F 72 6D 61 
2563   1D8D 74 20 69 6E 
2563   1D91 20 70 72 69 
2563   1D95 6E 74 66 2E 
2563   1D99 00 
2564   1D9A 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
2564   1D9E 72 3A 20 55 
2564   1DA2 6E 6B 6E 6F 
2564   1DA6 77 6E 20 61 
2564   1DAA 72 67 75 6D 
2564   1DAE 65 6E 74 20 
2564   1DB2 74 79 70 65 
2564   1DB6 2E 0A 00 
2565   1DB9             
2566   1DB9 BB 1D       _heap_top: .dw _heap
2567   1DBB 00          _heap: .db 0
2568   1DBC             ; --- END DATA SEGMENT
2569   1DBC             
2570   1DBC             .end
tasm: Number of errors = 0
