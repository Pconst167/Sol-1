0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <  30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i         
0017   040E 26 00 00      mov b, $0        
0018   0411 FD 43         mov [d], b
0019   0413             _for1_cond:
0020   0413 2C FF FF      mov b, [bp + -1] ; $i             
0021   0416             ; START RELATIONAL
0022   0416 D7            push a
0023   0417 11            mov a, b
0024   0418 26 1E 00      mov b, $1e
0025   041B B0            cmp a, b
0026   041C FD 73         slt ; < 
0027   041E E4            pop a
0028   041F             ; END RELATIONAL
0029   041F C0 00 00      cmp b, 0
0030   0422 C6 88 04      je _for1_exit
0031   0425             _for1_block:
0032   0425             ;; for(j = 0; j <  40    ; j++){ 
0033   0425             _for2_init:
0034   0425 FA FD FF      lea d, [bp + -3] ; $j         
0035   0428 26 00 00      mov b, $0        
0036   042B FD 43         mov [d], b
0037   042D             _for2_cond:
0038   042D 2C FD FF      mov b, [bp + -3] ; $j             
0039   0430             ; START RELATIONAL
0040   0430 D7            push a
0041   0431 11            mov a, b
0042   0432 26 28 00      mov b, $28
0043   0435 B0            cmp a, b
0044   0436 FD 73         slt ; < 
0045   0438 E4            pop a
0046   0439             ; END RELATIONAL
0047   0439 C0 00 00      cmp b, 0
0048   043C C6 77 04      je _for2_exit
0049   043F             _for2_block:
0050   043F             ;; nextState[i][j] = currState[i][j]; 
0051   043F 3B 58 15      mov d, _nextState_data ; $nextState
0052   0442 D7            push a         
0053   0443 2C FF FF      mov b, [bp + -1] ; $i                     
0054   0446 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
0055   044A 2C FD FF      mov b, [bp + -3] ; $j                     
0056   044D 5A            add d, b
0057   044E E4            pop a
0058   044F DA            push d
0059   0450 3B 08 1A      mov d, _currState_data ; $currState
0060   0453 D7            push a         
0061   0454 2C FF FF      mov b, [bp + -1] ; $i                     
0062   0457 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
0063   045B 2C FD FF      mov b, [bp + -3] ; $j                     
0064   045E 5A            add d, b
0065   045F E4            pop a
0066   0460 32            mov bl, [d]
0067   0461 A7 00         mov bh, 0
0068   0463 E7            pop d
0069   0464 FD 3E         mov [d], bl
0070   0466             _for2_update:
0071   0466 2C FD FF      mov b, [bp + -3] ; $j             
0072   0469 FD 79         mov g, b
0073   046B FD 77         inc b
0074   046D FA FD FF      lea d, [bp + -3] ; $j
0075   0470 FD 43         mov [d], b
0076   0472 FD 27         mov b, g
0077   0474 0A 2D 04      jmp _for2_cond
0078   0477             _for2_exit:
0079   0477             _for1_update:
0080   0477 2C FF FF      mov b, [bp + -1] ; $i             
0081   047A FD 79         mov g, b
0082   047C FD 77         inc b
0083   047E FA FF FF      lea d, [bp + -1] ; $i
0084   0481 FD 43         mov [d], b
0085   0483 FD 27         mov b, g
0086   0485 0A 13 04      jmp _for1_cond
0087   0488             _for1_exit:
0088   0488             ;; for(;;){ 
0089   0488             _for3_init:
0090   0488             _for3_cond:
0091   0488             _for3_block:
0092   0488             ;; for(i = 1; i <  30     +-1; i++){ 
0093   0488             _for4_init:
0094   0488 FA FF FF      lea d, [bp + -1] ; $i         
0095   048B 26 01 00      mov b, $1        
0096   048E FD 43         mov [d], b
0097   0490             _for4_cond:
0098   0490 2C FF FF      mov b, [bp + -1] ; $i             
0099   0493             ; START RELATIONAL
0100   0493 D7            push a
0101   0494 11            mov a, b
0102   0495 26 1E 00      mov b, $1e
0103   0498             ; START TERMS
0104   0498 D7            push a
0105   0499 11            mov a, b
0106   049A 26 01 00      mov b, $1
0107   049D FD 97         neg b
0108   049F 54            add a, b
0109   04A0 27            mov b, a
0110   04A1 E4            pop a
0111   04A2             ; END TERMS
0112   04A2 B0            cmp a, b
0113   04A3 FD 73         slt ; < 
0114   04A5 E4            pop a
0115   04A6             ; END RELATIONAL
0116   04A6 C0 00 00      cmp b, 0
0117   04A9 C6 70 05      je _for4_exit
0118   04AC             _for4_block:
0119   04AC             ;; for(j = 1; j <  40    +-1; j++){ 
0120   04AC             _for5_init:
0121   04AC FA FD FF      lea d, [bp + -3] ; $j         
0122   04AF 26 01 00      mov b, $1        
0123   04B2 FD 43         mov [d], b
0124   04B4             _for5_cond:
0125   04B4 2C FD FF      mov b, [bp + -3] ; $j             
0126   04B7             ; START RELATIONAL
0127   04B7 D7            push a
0128   04B8 11            mov a, b
0129   04B9 26 28 00      mov b, $28
0130   04BC             ; START TERMS
0131   04BC D7            push a
0132   04BD 11            mov a, b
0133   04BE 26 01 00      mov b, $1
0134   04C1 FD 97         neg b
0135   04C3 54            add a, b
0136   04C4 27            mov b, a
0137   04C5 E4            pop a
0138   04C6             ; END TERMS
0139   04C6 B0            cmp a, b
0140   04C7 FD 73         slt ; < 
0141   04C9 E4            pop a
0142   04CA             ; END RELATIONAL
0143   04CA C0 00 00      cmp b, 0
0144   04CD C6 5F 05      je _for5_exit
0145   04D0             _for5_block:
0146   04D0             ;; n = neighbours(i, j); 
0147   04D0 FA FB FF      lea d, [bp + -5] ; $n
0148   04D3 DA            push d
0149   04D4 2C FF FF      mov b, [bp + -1] ; $i             
0150   04D7 FD AB         swp b
0151   04D9 D8            push b
0152   04DA 2C FD FF      mov b, [bp + -3] ; $j             
0153   04DD FD AB         swp b
0154   04DF D8            push b
0155   04E0 07 36 13      call neighbours
0156   04E3 51 04 00      add sp, 4
0157   04E6 E7            pop d
0158   04E7 FD 43         mov [d], b
0159   04E9             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0160   04E9             _if6_cond:
0161   04E9 2C FB FF      mov b, [bp + -5] ; $n             
0162   04EC             ; START RELATIONAL
0163   04EC D7            push a
0164   04ED 11            mov a, b
0165   04EE 26 02 00      mov b, $2
0166   04F1 B0            cmp a, b
0167   04F2 FD 73         slt ; < 
0168   04F4 E4            pop a
0169   04F5             ; END RELATIONAL
0170   04F5 D7            push a
0171   04F6 11            mov a, b
0172   04F7 2C FB FF      mov b, [bp + -5] ; $n             
0173   04FA             ; START RELATIONAL
0174   04FA D7            push a
0175   04FB 11            mov a, b
0176   04FC 26 03 00      mov b, $3
0177   04FF B0            cmp a, b
0178   0500 FD 7F         sgt ; >
0179   0502 E4            pop a
0180   0503             ; END RELATIONAL
0181   0503 FD A8         sor a, b ; ||
0182   0505 E4            pop a
0183   0506 C0 00 00      cmp b, 0
0184   0509 C6 24 05      je _if6_else
0185   050C             _if6_true:
0186   050C             ;; nextState[i][j] = ' '; 
0187   050C 3B 58 15      mov d, _nextState_data ; $nextState
0188   050F D7            push a         
0189   0510 2C FF FF      mov b, [bp + -1] ; $i                     
0190   0513 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
0191   0517 2C FD FF      mov b, [bp + -3] ; $j                     
0192   051A 5A            add d, b
0193   051B E4            pop a         
0194   051C 26 20 00      mov b, $20        
0195   051F FD 3E         mov [d], bl
0196   0521 0A 4E 05      jmp _if6_exit
0197   0524             _if6_else:
0198   0524             ;; if(n == 3) nextState[i][j] = '@'; 
0199   0524             _if7_cond:
0200   0524 2C FB FF      mov b, [bp + -5] ; $n             
0201   0527             ; START RELATIONAL
0202   0527 D7            push a
0203   0528 11            mov a, b
0204   0529 26 03 00      mov b, $3
0205   052C B0            cmp a, b
0206   052D FD 71         seq ; ==
0207   052F E4            pop a
0208   0530             ; END RELATIONAL
0209   0530 C0 00 00      cmp b, 0
0210   0533 C6 4E 05      je _if7_exit
0211   0536             _if7_true:
0212   0536             ;; nextState[i][j] = '@'; 
0213   0536 3B 58 15      mov d, _nextState_data ; $nextState
0214   0539 D7            push a         
0215   053A 2C FF FF      mov b, [bp + -1] ; $i                     
0216   053D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
0217   0541 2C FD FF      mov b, [bp + -3] ; $j                     
0218   0544 5A            add d, b
0219   0545 E4            pop a         
0220   0546 26 40 00      mov b, $40        
0221   0549 FD 3E         mov [d], bl
0222   054B 0A 4E 05      jmp _if7_exit
0223   054E             _if7_exit:
0224   054E             _if6_exit:
0225   054E             _for5_update:
0226   054E 2C FD FF      mov b, [bp + -3] ; $j             
0227   0551 FD 79         mov g, b
0228   0553 FD 77         inc b
0229   0555 FA FD FF      lea d, [bp + -3] ; $j
0230   0558 FD 43         mov [d], b
0231   055A FD 27         mov b, g
0232   055C 0A B4 04      jmp _for5_cond
0233   055F             _for5_exit:
0234   055F             _for4_update:
0235   055F 2C FF FF      mov b, [bp + -1] ; $i             
0236   0562 FD 79         mov g, b
0237   0564 FD 77         inc b
0238   0566 FA FF FF      lea d, [bp + -1] ; $i
0239   0569 FD 43         mov [d], b
0240   056B FD 27         mov b, g
0241   056D 0A 90 04      jmp _for4_cond
0242   0570             _for4_exit:
0243   0570             ;; for(i = 1; i <  30     +-1; i++){ 
0244   0570             _for8_init:
0245   0570 FA FF FF      lea d, [bp + -1] ; $i         
0246   0573 26 01 00      mov b, $1        
0247   0576 FD 43         mov [d], b
0248   0578             _for8_cond:
0249   0578 2C FF FF      mov b, [bp + -1] ; $i             
0250   057B             ; START RELATIONAL
0251   057B D7            push a
0252   057C 11            mov a, b
0253   057D 26 1E 00      mov b, $1e
0254   0580             ; START TERMS
0255   0580 D7            push a
0256   0581 11            mov a, b
0257   0582 26 01 00      mov b, $1
0258   0585 FD 97         neg b
0259   0587 54            add a, b
0260   0588 27            mov b, a
0261   0589 E4            pop a
0262   058A             ; END TERMS
0263   058A B0            cmp a, b
0264   058B FD 73         slt ; < 
0265   058D E4            pop a
0266   058E             ; END RELATIONAL
0267   058E C0 00 00      cmp b, 0
0268   0591 C6 01 06      je _for8_exit
0269   0594             _for8_block:
0270   0594             ;; for(j = 1; j <  40    +-1; j++){ 
0271   0594             _for9_init:
0272   0594 FA FD FF      lea d, [bp + -3] ; $j         
0273   0597 26 01 00      mov b, $1        
0274   059A FD 43         mov [d], b
0275   059C             _for9_cond:
0276   059C 2C FD FF      mov b, [bp + -3] ; $j             
0277   059F             ; START RELATIONAL
0278   059F D7            push a
0279   05A0 11            mov a, b
0280   05A1 26 28 00      mov b, $28
0281   05A4             ; START TERMS
0282   05A4 D7            push a
0283   05A5 11            mov a, b
0284   05A6 26 01 00      mov b, $1
0285   05A9 FD 97         neg b
0286   05AB 54            add a, b
0287   05AC 27            mov b, a
0288   05AD E4            pop a
0289   05AE             ; END TERMS
0290   05AE B0            cmp a, b
0291   05AF FD 73         slt ; < 
0292   05B1 E4            pop a
0293   05B2             ; END RELATIONAL
0294   05B2 C0 00 00      cmp b, 0
0295   05B5 C6 F0 05      je _for9_exit
0296   05B8             _for9_block:
0297   05B8             ;; currState[i][j] = nextState[i][j]; 
0298   05B8 3B 08 1A      mov d, _currState_data ; $currState
0299   05BB D7            push a         
0300   05BC 2C FF FF      mov b, [bp + -1] ; $i                     
0301   05BF FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
0302   05C3 2C FD FF      mov b, [bp + -3] ; $j                     
0303   05C6 5A            add d, b
0304   05C7 E4            pop a
0305   05C8 DA            push d
0306   05C9 3B 58 15      mov d, _nextState_data ; $nextState
0307   05CC D7            push a         
0308   05CD 2C FF FF      mov b, [bp + -1] ; $i                     
0309   05D0 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
0310   05D4 2C FD FF      mov b, [bp + -3] ; $j                     
0311   05D7 5A            add d, b
0312   05D8 E4            pop a
0313   05D9 32            mov bl, [d]
0314   05DA A7 00         mov bh, 0
0315   05DC E7            pop d
0316   05DD FD 3E         mov [d], bl
0317   05DF             _for9_update:
0318   05DF 2C FD FF      mov b, [bp + -3] ; $j             
0319   05E2 FD 79         mov g, b
0320   05E4 FD 77         inc b
0321   05E6 FA FD FF      lea d, [bp + -3] ; $j
0322   05E9 FD 43         mov [d], b
0323   05EB FD 27         mov b, g
0324   05ED 0A 9C 05      jmp _for9_cond
0325   05F0             _for9_exit:
0326   05F0             _for8_update:
0327   05F0 2C FF FF      mov b, [bp + -1] ; $i             
0328   05F3 FD 79         mov g, b
0329   05F5 FD 77         inc b
0330   05F7 FA FF FF      lea d, [bp + -1] ; $i
0331   05FA FD 43         mov [d], b
0332   05FC FD 27         mov b, g
0333   05FE 0A 78 05      jmp _for8_cond
0334   0601             _for8_exit:
0335   0601             ;; printf(clear); 
0336   0601 26 4D 15      mov b, _clear_data ; $clear           
0337   0604 FD AB         swp b
0338   0606 D8            push b
0339   0607 07 37 08      call printf
0340   060A 51 02 00      add sp, 2
0341   060D             ;; show(); 
0342   060D 07 5D 12      call show
0343   0610             _for3_update:
0344   0610 0A 88 04      jmp _for3_cond
0345   0613             _for3_exit:
0346   0613 05 0B         syscall sys_terminate_proc
0347   0615             
0348   0615             strcpy:
0349   0615 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0350   0618             ; $psrc 
0351   0618             ; $pdest 
0352   0618 52 04 00      sub sp, 4
0353   061B             ;; psrc = src; 
0354   061B FA FF FF      lea d, [bp + -1] ; $psrc         
0355   061E 2C 05 00      mov b, [bp + 5] ; $src                     
0356   0621 FD 43         mov [d], b
0357   0623             ;; pdest = dest; 
0358   0623 FA FD FF      lea d, [bp + -3] ; $pdest         
0359   0626 2C 07 00      mov b, [bp + 7] ; $dest                     
0360   0629 FD 43         mov [d], b
0361   062B             ;; while(*psrc) *pdest++ = *psrc++; 
0362   062B             _while10_cond:
0363   062B 2C FF FF      mov b, [bp + -1] ; $psrc             
0364   062E 74            mov d, b
0365   062F 32            mov bl, [d]
0366   0630 A7 00         mov bh, 0
0367   0632 C0 00 00      cmp b, 0
0368   0635 C6 5F 06      je _while10_exit
0369   0638             _while10_block:
0370   0638             ;; *pdest++ = *psrc++; 
0371   0638 2C FD FF      mov b, [bp + -3] ; $pdest             
0372   063B FD 79         mov g, b
0373   063D FD 77         inc b
0374   063F FA FD FF      lea d, [bp + -3] ; $pdest
0375   0642 FD 43         mov [d], b
0376   0644 FD 27         mov b, g
0377   0646 D8            push b
0378   0647 2C FF FF      mov b, [bp + -1] ; $psrc             
0379   064A FD 79         mov g, b
0380   064C FD 77         inc b
0381   064E FA FF FF      lea d, [bp + -1] ; $psrc
0382   0651 FD 43         mov [d], b
0383   0653 FD 27         mov b, g
0384   0655 74            mov d, b
0385   0656 32            mov bl, [d]
0386   0657 A7 00         mov bh, 0
0387   0659 E7            pop d
0388   065A FD 3E         mov [d], bl
0389   065C 0A 2B 06      jmp _while10_cond
0390   065F             _while10_exit:
0391   065F             ;; *pdest = '\0'; 
0392   065F 2C FD FF      mov b, [bp + -3] ; $pdest             
0393   0662 D8            push b
0394   0663 26 00 00      mov b, $0
0395   0666 E7            pop d
0396   0667 FD 3E         mov [d], bl
0397   0669 F9            leave
0398   066A 09            ret
0399   066B             
0400   066B             strcmp:
0401   066B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0402   066E             ;; while (*s1 && (*s1 == *s2)) { 
0403   066E             _while11_cond:
0404   066E 2C 07 00      mov b, [bp + 7] ; $s1             
0405   0671 74            mov d, b
0406   0672 32            mov bl, [d]
0407   0673 A7 00         mov bh, 0
0408   0675 D7            push a
0409   0676 11            mov a, b
0410   0677 2C 07 00      mov b, [bp + 7] ; $s1             
0411   067A 74            mov d, b
0412   067B 32            mov bl, [d]
0413   067C A7 00         mov bh, 0
0414   067E             ; START RELATIONAL
0415   067E D7            push a
0416   067F 11            mov a, b
0417   0680 2C 05 00      mov b, [bp + 5] ; $s2             
0418   0683 74            mov d, b
0419   0684 32            mov bl, [d]
0420   0685 A7 00         mov bh, 0
0421   0687 B0            cmp a, b
0422   0688 FD 71         seq ; ==
0423   068A E4            pop a
0424   068B             ; END RELATIONAL
0425   068B FD A7         sand a, b ; &&
0426   068D E4            pop a
0427   068E C0 00 00      cmp b, 0
0428   0691 C6 B3 06      je _while11_exit
0429   0694             _while11_block:
0430   0694             ;; s1++; 
0431   0694 2C 07 00      mov b, [bp + 7] ; $s1             
0432   0697 FD 79         mov g, b
0433   0699 FD 77         inc b
0434   069B FA 07 00      lea d, [bp + 7] ; $s1
0435   069E FD 43         mov [d], b
0436   06A0 FD 27         mov b, g
0437   06A2             ;; s2++; 
0438   06A2 2C 05 00      mov b, [bp + 5] ; $s2             
0439   06A5 FD 79         mov g, b
0440   06A7 FD 77         inc b
0441   06A9 FA 05 00      lea d, [bp + 5] ; $s2
0442   06AC FD 43         mov [d], b
0443   06AE FD 27         mov b, g
0444   06B0 0A 6E 06      jmp _while11_cond
0445   06B3             _while11_exit:
0446   06B3             ;; return *s1 - *s2; 
0447   06B3 2C 07 00      mov b, [bp + 7] ; $s1             
0448   06B6 74            mov d, b
0449   06B7 32            mov bl, [d]
0450   06B8 A7 00         mov bh, 0
0451   06BA             ; START TERMS
0452   06BA D7            push a
0453   06BB 11            mov a, b
0454   06BC 2C 05 00      mov b, [bp + 5] ; $s2             
0455   06BF 74            mov d, b
0456   06C0 32            mov bl, [d]
0457   06C1 A7 00         mov bh, 0
0458   06C3 60            sub a, b
0459   06C4 27            mov b, a
0460   06C5 E4            pop a
0461   06C6             ; END TERMS
0462   06C6 F9            leave
0463   06C7 09            ret
0464   06C8             
0465   06C8             strcat:
0466   06C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0467   06CB             ; $dest_len 
0468   06CB             ; $i 
0469   06CB 52 04 00      sub sp, 4
0470   06CE             ;; dest_len = strlen(dest); 
0471   06CE FA FF FF      lea d, [bp + -1] ; $dest_len
0472   06D1 DA            push d
0473   06D2 2C 07 00      mov b, [bp + 7] ; $dest             
0474   06D5 FD AB         swp b
0475   06D7 D8            push b
0476   06D8 07 67 07      call strlen
0477   06DB 51 02 00      add sp, 2
0478   06DE E7            pop d
0479   06DF FD 43         mov [d], b
0480   06E1             ;; for (i = 0; src[i] != 0; i=i+1) { 
0481   06E1             _for12_init:
0482   06E1 FA FD FF      lea d, [bp + -3] ; $i         
0483   06E4 26 00 00      mov b, $0        
0484   06E7 FD 43         mov [d], b
0485   06E9             _for12_cond:
0486   06E9 FA 05 00      lea d, [bp + 5] ; $src
0487   06EC FD 2A         mov d, [d]
0488   06EE D7            push a         
0489   06EF 2C FD FF      mov b, [bp + -3] ; $i                     
0490   06F2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0491   06F6 E4            pop a
0492   06F7 32            mov bl, [d]
0493   06F8 A7 00         mov bh, 0
0494   06FA             ; START RELATIONAL
0495   06FA D7            push a
0496   06FB 11            mov a, b
0497   06FC 26 00 00      mov b, $0
0498   06FF B0            cmp a, b
0499   0700 FD 72         sneq ; !=
0500   0702 E4            pop a
0501   0703             ; END RELATIONAL
0502   0703 C0 00 00      cmp b, 0
0503   0706 C6 47 07      je _for12_exit
0504   0709             _for12_block:
0505   0709             ;; dest[dest_len + i] = src[i]; 
0506   0709 FA 07 00      lea d, [bp + 7] ; $dest
0507   070C FD 2A         mov d, [d]
0508   070E D7            push a         
0509   070F 2C FF FF      mov b, [bp + -1] ; $dest_len             
0510   0712             ; START TERMS
0511   0712 D7            push a
0512   0713 11            mov a, b
0513   0714 2C FD FF      mov b, [bp + -3] ; $i             
0514   0717 54            add a, b
0515   0718 27            mov b, a
0516   0719 E4            pop a
0517   071A             ; END TERMS        
0518   071A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0519   071E E4            pop a
0520   071F DA            push d
0521   0720 FA 05 00      lea d, [bp + 5] ; $src
0522   0723 FD 2A         mov d, [d]
0523   0725 D7            push a         
0524   0726 2C FD FF      mov b, [bp + -3] ; $i                     
0525   0729 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0526   072D E4            pop a
0527   072E 32            mov bl, [d]
0528   072F A7 00         mov bh, 0
0529   0731 E7            pop d
0530   0732 FD 3E         mov [d], bl
0531   0734             _for12_update:
0532   0734 FA FD FF      lea d, [bp + -3] ; $i         
0533   0737 2C FD FF      mov b, [bp + -3] ; $i             
0534   073A             ; START TERMS
0535   073A D7            push a
0536   073B 11            mov a, b
0537   073C 26 01 00      mov b, $1
0538   073F 54            add a, b
0539   0740 27            mov b, a
0540   0741 E4            pop a
0541   0742             ; END TERMS        
0542   0742 FD 43         mov [d], b
0543   0744 0A E9 06      jmp _for12_cond
0544   0747             _for12_exit:
0545   0747             ;; dest[dest_len + i] = 0; 
0546   0747 FA 07 00      lea d, [bp + 7] ; $dest
0547   074A FD 2A         mov d, [d]
0548   074C D7            push a         
0549   074D 2C FF FF      mov b, [bp + -1] ; $dest_len             
0550   0750             ; START TERMS
0551   0750 D7            push a
0552   0751 11            mov a, b
0553   0752 2C FD FF      mov b, [bp + -3] ; $i             
0554   0755 54            add a, b
0555   0756 27            mov b, a
0556   0757 E4            pop a
0557   0758             ; END TERMS        
0558   0758 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0559   075C E4            pop a         
0560   075D 26 00 00      mov b, $0        
0561   0760 FD 3E         mov [d], bl
0562   0762             ;; return dest; 
0563   0762 2C 07 00      mov b, [bp + 7] ; $dest             
0564   0765 F9            leave
0565   0766 09            ret
0566   0767             
0567   0767             strlen:
0568   0767 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0569   076A             ; $length 
0570   076A 52 02 00      sub sp, 2
0571   076D             ;; length = 0; 
0572   076D FA FF FF      lea d, [bp + -1] ; $length         
0573   0770 26 00 00      mov b, $0        
0574   0773 FD 43         mov [d], b
0575   0775             ;; while (str[length] != 0) { 
0576   0775             _while13_cond:
0577   0775 FA 05 00      lea d, [bp + 5] ; $str
0578   0778 FD 2A         mov d, [d]
0579   077A D7            push a         
0580   077B 2C FF FF      mov b, [bp + -1] ; $length                     
0581   077E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0582   0782 E4            pop a
0583   0783 32            mov bl, [d]
0584   0784 A7 00         mov bh, 0
0585   0786             ; START RELATIONAL
0586   0786 D7            push a
0587   0787 11            mov a, b
0588   0788 26 00 00      mov b, $0
0589   078B B0            cmp a, b
0590   078C FD 72         sneq ; !=
0591   078E E4            pop a
0592   078F             ; END RELATIONAL
0593   078F C0 00 00      cmp b, 0
0594   0792 C6 A6 07      je _while13_exit
0595   0795             _while13_block:
0596   0795             ;; length++; 
0597   0795 2C FF FF      mov b, [bp + -1] ; $length             
0598   0798 FD 79         mov g, b
0599   079A FD 77         inc b
0600   079C FA FF FF      lea d, [bp + -1] ; $length
0601   079F FD 43         mov [d], b
0602   07A1 FD 27         mov b, g
0603   07A3 0A 75 07      jmp _while13_cond
0604   07A6             _while13_exit:
0605   07A6             ;; return length; 
0606   07A6 2C FF FF      mov b, [bp + -1] ; $length             
0607   07A9 F9            leave
0608   07AA 09            ret
0609   07AB             
0610   07AB             va_arg:
0611   07AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0612   07AE             ; $val 
0613   07AE 52 02 00      sub sp, 2
0614   07B1             ;; if(size == 1){ 
0615   07B1             _if14_cond:
0616   07B1 2C 05 00      mov b, [bp + 5] ; $size             
0617   07B4             ; START RELATIONAL
0618   07B4 D7            push a
0619   07B5 11            mov a, b
0620   07B6 26 01 00      mov b, $1
0621   07B9 B0            cmp a, b
0622   07BA FD 71         seq ; ==
0623   07BC E4            pop a
0624   07BD             ; END RELATIONAL
0625   07BD C0 00 00      cmp b, 0
0626   07C0 C6 DC 07      je _if14_else
0627   07C3             _if14_true:
0628   07C3             ;; val = *(char*)arg->p; 
0629   07C3 FA FF FF      lea d, [bp + -1] ; $val
0630   07C6 DA            push d
0631   07C7 FA 07 00      lea d, [bp + 7] ; $arg
0632   07CA FD 2A         mov d, [d]
0633   07CC 58 00 00      add d, 0
0634   07CF FD 14         clb
0635   07D1 2A            mov b, [d]
0636   07D2 74            mov d, b
0637   07D3 32            mov bl, [d]
0638   07D4 A7 00         mov bh, 0
0639   07D6 E7            pop d
0640   07D7 FD 43         mov [d], b
0641   07D9 0A 11 08      jmp _if14_exit
0642   07DC             _if14_else:
0643   07DC             ;; if(size == 2){ 
0644   07DC             _if15_cond:
0645   07DC 2C 05 00      mov b, [bp + 5] ; $size             
0646   07DF             ; START RELATIONAL
0647   07DF D7            push a
0648   07E0 11            mov a, b
0649   07E1 26 02 00      mov b, $2
0650   07E4 B0            cmp a, b
0651   07E5 FD 71         seq ; ==
0652   07E7 E4            pop a
0653   07E8             ; END RELATIONAL
0654   07E8 C0 00 00      cmp b, 0
0655   07EB C6 05 08      je _if15_else
0656   07EE             _if15_true:
0657   07EE             ;; val = *(int*)arg->p; 
0658   07EE FA FF FF      lea d, [bp + -1] ; $val
0659   07F1 DA            push d
0660   07F2 FA 07 00      lea d, [bp + 7] ; $arg
0661   07F5 FD 2A         mov d, [d]
0662   07F7 58 00 00      add d, 0
0663   07FA FD 14         clb
0664   07FC 2A            mov b, [d]
0665   07FD 74            mov d, b
0666   07FE 2A            mov b, [d]
0667   07FF E7            pop d
0668   0800 FD 43         mov [d], b
0669   0802 0A 11 08      jmp _if15_exit
0670   0805             _if15_else:
0671   0805             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0672   0805 26 B8 1E      mov b, __s0 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0673   0808 FD AB         swp b
0674   080A D8            push b
0675   080B 07 FA 0D      call print
0676   080E 51 02 00      add sp, 2
0677   0811             _if15_exit:
0678   0811             _if14_exit:
0679   0811             ;; arg->p = arg->p + size; 
0680   0811 FA 07 00      lea d, [bp + 7] ; $arg
0681   0814 FD 2A         mov d, [d]
0682   0816 58 00 00      add d, 0
0683   0819 FD 14         clb
0684   081B DA            push d
0685   081C FA 07 00      lea d, [bp + 7] ; $arg
0686   081F FD 2A         mov d, [d]
0687   0821 58 00 00      add d, 0
0688   0824 FD 14         clb
0689   0826 2A            mov b, [d]
0690   0827             ; START TERMS
0691   0827 D7            push a
0692   0828 11            mov a, b
0693   0829 2C 05 00      mov b, [bp + 5] ; $size             
0694   082C 54            add a, b
0695   082D 27            mov b, a
0696   082E E4            pop a
0697   082F             ; END TERMS
0698   082F E7            pop d
0699   0830 FD 43         mov [d], b
0700   0832             ;; return val; 
0701   0832 2C FF FF      mov b, [bp + -1] ; $val             
0702   0835 F9            leave
0703   0836 09            ret
0704   0837             
0705   0837             printf:
0706   0837 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0707   083A             ; $p 
0708   083A             ; $fp 
0709   083A             ; $i 
0710   083A 52 06 00      sub sp, 6
0711   083D             ;; fp = format; 
0712   083D FA FD FF      lea d, [bp + -3] ; $fp         
0713   0840 2C 05 00      mov b, [bp + 5] ; $format                     
0714   0843 FD 43         mov [d], b
0715   0845             ;; p = &format; 
0716   0845 FA FF FF      lea d, [bp + -1] ; $p
0717   0848 DA            push d
0718   0849 FA 05 00      lea d, [bp + 5] ; $format
0719   084C 2D            mov b, d
0720   084D E7            pop d
0721   084E FD 43         mov [d], b
0722   0850             ;; for(;;){ 
0723   0850             _for16_init:
0724   0850             _for16_cond:
0725   0850             _for16_block:
0726   0850             ;; if(!*fp) break; 
0727   0850             _if17_cond:
0728   0850 2C FD FF      mov b, [bp + -3] ; $fp             
0729   0853 74            mov d, b
0730   0854 32            mov bl, [d]
0731   0855 A7 00         mov bh, 0
0732   0857 C0 00 00      cmp b, 0
0733   085A FD 71         seq ; !
0734   085C C0 00 00      cmp b, 0
0735   085F C6 68 08      je _if17_exit
0736   0862             _if17_true:
0737   0862             ;; break; 
0738   0862 0A 98 09      jmp _for16_exit ; for break
0739   0865 0A 68 08      jmp _if17_exit
0740   0868             _if17_exit:
0741   0868             ;; if(*fp == '%'){ 
0742   0868             _if18_cond:
0743   0868 2C FD FF      mov b, [bp + -3] ; $fp             
0744   086B 74            mov d, b
0745   086C 32            mov bl, [d]
0746   086D A7 00         mov bh, 0
0747   086F             ; START RELATIONAL
0748   086F D7            push a
0749   0870 11            mov a, b
0750   0871 26 25 00      mov b, $25
0751   0874 B0            cmp a, b
0752   0875 FD 71         seq ; ==
0753   0877 E4            pop a
0754   0878             ; END RELATIONAL
0755   0878 C0 00 00      cmp b, 0
0756   087B C6 79 09      je _if18_else
0757   087E             _if18_true:
0758   087E             ;; fp++; 
0759   087E 2C FD FF      mov b, [bp + -3] ; $fp             
0760   0881 FD 79         mov g, b
0761   0883 FD 77         inc b
0762   0885 FA FD FF      lea d, [bp + -3] ; $fp
0763   0888 FD 43         mov [d], b
0764   088A FD 27         mov b, g
0765   088C             ;; switch(*fp){ 
0766   088C             _switch19_expr:
0767   088C 2C FD FF      mov b, [bp + -3] ; $fp             
0768   088F 74            mov d, b
0769   0890 32            mov bl, [d]
0770   0891 A7 00         mov bh, 0
0771   0893             _switch19_comparisons:
0772   0893 C1 64         cmp bl, $64
0773   0895 C6 B7 08      je _switch19_case0
0774   0898 C1 69         cmp bl, $69
0775   089A C6 B7 08      je _switch19_case1
0776   089D C1 75         cmp bl, $75
0777   089F C6 D8 08      je _switch19_case2
0778   08A2 C1 78         cmp bl, $78
0779   08A4 C6 F9 08      je _switch19_case3
0780   08A7 C1 63         cmp bl, $63
0781   08A9 C6 1A 09      je _switch19_case4
0782   08AC C1 73         cmp bl, $73
0783   08AE C6 3B 09      je _switch19_case5
0784   08B1 0A 5C 09      jmp _switch19_default
0785   08B4 0A 68 09      jmp _switch19_exit
0786   08B7             _switch19_case0:
0787   08B7             _switch19_case1:
0788   08B7             ;; p = p - 2; 
0789   08B7 FA FF FF      lea d, [bp + -1] ; $p         
0790   08BA 2C FF FF      mov b, [bp + -1] ; $p             
0791   08BD             ; START TERMS
0792   08BD D7            push a
0793   08BE 11            mov a, b
0794   08BF 26 02 00      mov b, $2
0795   08C2 60            sub a, b
0796   08C3 27            mov b, a
0797   08C4 E4            pop a
0798   08C5             ; END TERMS        
0799   08C5 FD 43         mov [d], b
0800   08C7             ;; prints(*(int*)p); 
0801   08C7 2C FF FF      mov b, [bp + -1] ; $p             
0802   08CA 74            mov d, b
0803   08CB 2A            mov b, [d]
0804   08CC FD AB         swp b
0805   08CE D8            push b
0806   08CF 07 FE 0B      call prints
0807   08D2 51 02 00      add sp, 2
0808   08D5             ;; break; 
0809   08D5 0A 68 09      jmp _switch19_exit ; case break
0810   08D8             _switch19_case2:
0811   08D8             ;; p = p - 2; 
0812   08D8 FA FF FF      lea d, [bp + -1] ; $p         
0813   08DB 2C FF FF      mov b, [bp + -1] ; $p             
0814   08DE             ; START TERMS
0815   08DE D7            push a
0816   08DF 11            mov a, b
0817   08E0 26 02 00      mov b, $2
0818   08E3 60            sub a, b
0819   08E4 27            mov b, a
0820   08E5 E4            pop a
0821   08E6             ; END TERMS        
0822   08E6 FD 43         mov [d], b
0823   08E8             ;; printu(*(unsigned int*)p); 
0824   08E8 2C FF FF      mov b, [bp + -1] ; $p             
0825   08EB 74            mov d, b
0826   08EC 2A            mov b, [d]
0827   08ED FD AB         swp b
0828   08EF D8            push b
0829   08F0 07 DE 0C      call printu
0830   08F3 51 02 00      add sp, 2
0831   08F6             ;; break; 
0832   08F6 0A 68 09      jmp _switch19_exit ; case break
0833   08F9             _switch19_case3:
0834   08F9             ;; p = p - 2; 
0835   08F9 FA FF FF      lea d, [bp + -1] ; $p         
0836   08FC 2C FF FF      mov b, [bp + -1] ; $p             
0837   08FF             ; START TERMS
0838   08FF D7            push a
0839   0900 11            mov a, b
0840   0901 26 02 00      mov b, $2
0841   0904 60            sub a, b
0842   0905 27            mov b, a
0843   0906 E4            pop a
0844   0907             ; END TERMS        
0845   0907 FD 43         mov [d], b
0846   0909             ;; printx16(*(unsigned int*)p); 
0847   0909 2C FF FF      mov b, [bp + -1] ; $p             
0848   090C 74            mov d, b
0849   090D 2A            mov b, [d]
0850   090E FD AB         swp b
0851   0910 D8            push b
0852   0911 07 9A 09      call printx16
0853   0914 51 02 00      add sp, 2
0854   0917             ;; break; 
0855   0917 0A 68 09      jmp _switch19_exit ; case break
0856   091A             _switch19_case4:
0857   091A             ;; p = p - 2; 
0858   091A FA FF FF      lea d, [bp + -1] ; $p         
0859   091D 2C FF FF      mov b, [bp + -1] ; $p             
0860   0920             ; START TERMS
0861   0920 D7            push a
0862   0921 11            mov a, b
0863   0922 26 02 00      mov b, $2
0864   0925 60            sub a, b
0865   0926 27            mov b, a
0866   0927 E4            pop a
0867   0928             ; END TERMS        
0868   0928 FD 43         mov [d], b
0869   092A             ;; putchar(*(char*)p); 
0870   092A 2C FF FF      mov b, [bp + -1] ; $p             
0871   092D 74            mov d, b
0872   092E 32            mov bl, [d]
0873   092F A7 00         mov bh, 0
0874   0931 DD            push bl
0875   0932 07 B5 0D      call putchar
0876   0935 51 01 00      add sp, 1
0877   0938             ;; break; 
0878   0938 0A 68 09      jmp _switch19_exit ; case break
0879   093B             _switch19_case5:
0880   093B             ;; p = p - 2; 
0881   093B FA FF FF      lea d, [bp + -1] ; $p         
0882   093E 2C FF FF      mov b, [bp + -1] ; $p             
0883   0941             ; START TERMS
0884   0941 D7            push a
0885   0942 11            mov a, b
0886   0943 26 02 00      mov b, $2
0887   0946 60            sub a, b
0888   0947 27            mov b, a
0889   0948 E4            pop a
0890   0949             ; END TERMS        
0891   0949 FD 43         mov [d], b
0892   094B             ;; print(*(char**)p); 
0893   094B 2C FF FF      mov b, [bp + -1] ; $p             
0894   094E 74            mov d, b
0895   094F 2A            mov b, [d]
0896   0950 FD AB         swp b
0897   0952 D8            push b
0898   0953 07 FA 0D      call print
0899   0956 51 02 00      add sp, 2
0900   0959             ;; break; 
0901   0959 0A 68 09      jmp _switch19_exit ; case break
0902   095C             _switch19_default:
0903   095C             ;; print("Error: Unknown argument type.\n"); 
0904   095C 26 FC 1E      mov b, __s1 ; "Error: Unknown argument type.\n"
0905   095F FD AB         swp b
0906   0961 D8            push b
0907   0962 07 FA 0D      call print
0908   0965 51 02 00      add sp, 2
0909   0968             _switch19_exit:
0910   0968             ;; fp++; 
0911   0968 2C FD FF      mov b, [bp + -3] ; $fp             
0912   096B FD 79         mov g, b
0913   096D FD 77         inc b
0914   096F FA FD FF      lea d, [bp + -3] ; $fp
0915   0972 FD 43         mov [d], b
0916   0974 FD 27         mov b, g
0917   0976 0A 95 09      jmp _if18_exit
0918   0979             _if18_else:
0919   0979             ;; putchar(*fp); 
0920   0979 2C FD FF      mov b, [bp + -3] ; $fp             
0921   097C 74            mov d, b
0922   097D 32            mov bl, [d]
0923   097E A7 00         mov bh, 0
0924   0980 DD            push bl
0925   0981 07 B5 0D      call putchar
0926   0984 51 01 00      add sp, 1
0927   0987             ;; fp++; 
0928   0987 2C FD FF      mov b, [bp + -3] ; $fp             
0929   098A FD 79         mov g, b
0930   098C FD 77         inc b
0931   098E FA FD FF      lea d, [bp + -3] ; $fp
0932   0991 FD 43         mov [d], b
0933   0993 FD 27         mov b, g
0934   0995             _if18_exit:
0935   0995             _for16_update:
0936   0995 0A 50 08      jmp _for16_cond
0937   0998             _for16_exit:
0938   0998 F9            leave
0939   0999 09            ret
0940   099A             
0941   099A             printx16:
0942   099A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0943   099D             
0944   099D             ; --- BEGIN INLINE ASM BLOCK
0945   099D 2C 05 00      mov b, [bp + 5] ; $hex             
0946   09A0 07 5D 11      call print_u16x
0947   09A3             ; --- END INLINE ASM BLOCK
0948   09A3             
0949   09A3 F9            leave
0950   09A4 09            ret
0951   09A5             
0952   09A5             printx8:
0953   09A5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0954   09A8             
0955   09A8             ; --- BEGIN INLINE ASM BLOCK
0956   09A8 FA 05 00      lea d, [bp + 5] ; $hex
0957   09AB 32            mov bl, [d]
0958   09AC 07 A1 11      call print_u8x
0959   09AF             ; --- END INLINE ASM BLOCK
0960   09AF             
0961   09AF F9            leave
0962   09B0 09            ret
0963   09B1             
0964   09B1             hex_to_int:
0965   09B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0966   09B4             ; $value 
0967   09B4 10 00 00      mov a, $0
0968   09B7 45 FF FF      mov [bp + -1], a
0969   09BA             ; $i 
0970   09BA             ; $hex_char 
0971   09BA             ; $len 
0972   09BA 52 07 00      sub sp, 7
0973   09BD             ;; len = strlen(hex_string); 
0974   09BD FA FA FF      lea d, [bp + -6] ; $len
0975   09C0 DA            push d
0976   09C1 2C 05 00      mov b, [bp + 5] ; $hex_string             
0977   09C4 FD AB         swp b
0978   09C6 D8            push b
0979   09C7 07 67 07      call strlen
0980   09CA 51 02 00      add sp, 2
0981   09CD E7            pop d
0982   09CE FD 43         mov [d], b
0983   09D0             ;; for (i = 0; i < len; i++) { 
0984   09D0             _for20_init:
0985   09D0 FA FD FF      lea d, [bp + -3] ; $i         
0986   09D3 26 00 00      mov b, $0        
0987   09D6 FD 43         mov [d], b
0988   09D8             _for20_cond:
0989   09D8 2C FD FF      mov b, [bp + -3] ; $i             
0990   09DB             ; START RELATIONAL
0991   09DB D7            push a
0992   09DC 11            mov a, b
0993   09DD 2C FA FF      mov b, [bp + -6] ; $len             
0994   09E0 B0            cmp a, b
0995   09E1 FD 73         slt ; < 
0996   09E3 E4            pop a
0997   09E4             ; END RELATIONAL
0998   09E4 C0 00 00      cmp b, 0
0999   09E7 C6 D8 0A      je _for20_exit
1000   09EA             _for20_block:
1001   09EA             ;; hex_char = hex_string[i]; 
1002   09EA FA FC FF      lea d, [bp + -4] ; $hex_char
1003   09ED DA            push d
1004   09EE FA 05 00      lea d, [bp + 5] ; $hex_string
1005   09F1 FD 2A         mov d, [d]
1006   09F3 D7            push a         
1007   09F4 2C FD FF      mov b, [bp + -3] ; $i                     
1008   09F7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1009   09FB E4            pop a
1010   09FC 32            mov bl, [d]
1011   09FD A7 00         mov bh, 0
1012   09FF E7            pop d
1013   0A00 FD 3E         mov [d], bl
1014   0A02             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1015   0A02             _if21_cond:
1016   0A02 34 FC FF      mov bl, [bp + -4] ; $hex_char
1017   0A05 A7 00         mov bh, 0             
1018   0A07             ; START RELATIONAL
1019   0A07 D7            push a
1020   0A08 11            mov a, b
1021   0A09 26 61 00      mov b, $61
1022   0A0C B0            cmp a, b
1023   0A0D FD 80         sge ; >=
1024   0A0F E4            pop a
1025   0A10             ; END RELATIONAL
1026   0A10 D7            push a
1027   0A11 11            mov a, b
1028   0A12 34 FC FF      mov bl, [bp + -4] ; $hex_char
1029   0A15 A7 00         mov bh, 0             
1030   0A17             ; START RELATIONAL
1031   0A17 D7            push a
1032   0A18 11            mov a, b
1033   0A19 26 66 00      mov b, $66
1034   0A1C B0            cmp a, b
1035   0A1D FD 74         sle ; <=
1036   0A1F E4            pop a
1037   0A20             ; END RELATIONAL
1038   0A20 FD A7         sand a, b ; &&
1039   0A22 E4            pop a
1040   0A23 C0 00 00      cmp b, 0
1041   0A26 C6 53 0A      je _if21_else
1042   0A29             _if21_true:
1043   0A29             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1044   0A29 FA FF FF      lea d, [bp + -1] ; $value         
1045   0A2C 2C FF FF      mov b, [bp + -1] ; $value             
1046   0A2F             ; START FACTORS
1047   0A2F D7            push a
1048   0A30 11            mov a, b
1049   0A31 26 10 00      mov b, $10
1050   0A34 AC            mul a, b ; *
1051   0A35 11            mov a, b
1052   0A36 27            mov b, a
1053   0A37 E4            pop a
1054   0A38             ; END FACTORS
1055   0A38             ; START TERMS
1056   0A38 D7            push a
1057   0A39 11            mov a, b
1058   0A3A 34 FC FF      mov bl, [bp + -4] ; $hex_char
1059   0A3D A7 00         mov bh, 0             
1060   0A3F             ; START TERMS
1061   0A3F D7            push a
1062   0A40 11            mov a, b
1063   0A41 26 61 00      mov b, $61
1064   0A44 60            sub a, b
1065   0A45 26 0A 00      mov b, $a
1066   0A48 54            add a, b
1067   0A49 27            mov b, a
1068   0A4A E4            pop a
1069   0A4B             ; END TERMS
1070   0A4B 54            add a, b
1071   0A4C 27            mov b, a
1072   0A4D E4            pop a
1073   0A4E             ; END TERMS        
1074   0A4E FD 43         mov [d], b
1075   0A50 0A C7 0A      jmp _if21_exit
1076   0A53             _if21_else:
1077   0A53             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1078   0A53             _if22_cond:
1079   0A53 34 FC FF      mov bl, [bp + -4] ; $hex_char
1080   0A56 A7 00         mov bh, 0             
1081   0A58             ; START RELATIONAL
1082   0A58 D7            push a
1083   0A59 11            mov a, b
1084   0A5A 26 41 00      mov b, $41
1085   0A5D B0            cmp a, b
1086   0A5E FD 80         sge ; >=
1087   0A60 E4            pop a
1088   0A61             ; END RELATIONAL
1089   0A61 D7            push a
1090   0A62 11            mov a, b
1091   0A63 34 FC FF      mov bl, [bp + -4] ; $hex_char
1092   0A66 A7 00         mov bh, 0             
1093   0A68             ; START RELATIONAL
1094   0A68 D7            push a
1095   0A69 11            mov a, b
1096   0A6A 26 46 00      mov b, $46
1097   0A6D B0            cmp a, b
1098   0A6E FD 74         sle ; <=
1099   0A70 E4            pop a
1100   0A71             ; END RELATIONAL
1101   0A71 FD A7         sand a, b ; &&
1102   0A73 E4            pop a
1103   0A74 C0 00 00      cmp b, 0
1104   0A77 C6 A4 0A      je _if22_else
1105   0A7A             _if22_true:
1106   0A7A             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1107   0A7A FA FF FF      lea d, [bp + -1] ; $value         
1108   0A7D 2C FF FF      mov b, [bp + -1] ; $value             
1109   0A80             ; START FACTORS
1110   0A80 D7            push a
1111   0A81 11            mov a, b
1112   0A82 26 10 00      mov b, $10
1113   0A85 AC            mul a, b ; *
1114   0A86 11            mov a, b
1115   0A87 27            mov b, a
1116   0A88 E4            pop a
1117   0A89             ; END FACTORS
1118   0A89             ; START TERMS
1119   0A89 D7            push a
1120   0A8A 11            mov a, b
1121   0A8B 34 FC FF      mov bl, [bp + -4] ; $hex_char
1122   0A8E A7 00         mov bh, 0             
1123   0A90             ; START TERMS
1124   0A90 D7            push a
1125   0A91 11            mov a, b
1126   0A92 26 41 00      mov b, $41
1127   0A95 60            sub a, b
1128   0A96 26 0A 00      mov b, $a
1129   0A99 54            add a, b
1130   0A9A 27            mov b, a
1131   0A9B E4            pop a
1132   0A9C             ; END TERMS
1133   0A9C 54            add a, b
1134   0A9D 27            mov b, a
1135   0A9E E4            pop a
1136   0A9F             ; END TERMS        
1137   0A9F FD 43         mov [d], b
1138   0AA1 0A C7 0A      jmp _if22_exit
1139   0AA4             _if22_else:
1140   0AA4             ;; value = (value * 16) + (hex_char - '0'); 
1141   0AA4 FA FF FF      lea d, [bp + -1] ; $value         
1142   0AA7 2C FF FF      mov b, [bp + -1] ; $value             
1143   0AAA             ; START FACTORS
1144   0AAA D7            push a
1145   0AAB 11            mov a, b
1146   0AAC 26 10 00      mov b, $10
1147   0AAF AC            mul a, b ; *
1148   0AB0 11            mov a, b
1149   0AB1 27            mov b, a
1150   0AB2 E4            pop a
1151   0AB3             ; END FACTORS
1152   0AB3             ; START TERMS
1153   0AB3 D7            push a
1154   0AB4 11            mov a, b
1155   0AB5 34 FC FF      mov bl, [bp + -4] ; $hex_char
1156   0AB8 A7 00         mov bh, 0             
1157   0ABA             ; START TERMS
1158   0ABA D7            push a
1159   0ABB 11            mov a, b
1160   0ABC 26 30 00      mov b, $30
1161   0ABF 60            sub a, b
1162   0AC0 27            mov b, a
1163   0AC1 E4            pop a
1164   0AC2             ; END TERMS
1165   0AC2 54            add a, b
1166   0AC3 27            mov b, a
1167   0AC4 E4            pop a
1168   0AC5             ; END TERMS        
1169   0AC5 FD 43         mov [d], b
1170   0AC7             _if22_exit:
1171   0AC7             _if21_exit:
1172   0AC7             _for20_update:
1173   0AC7 2C FD FF      mov b, [bp + -3] ; $i             
1174   0ACA FD 79         mov g, b
1175   0ACC FD 77         inc b
1176   0ACE FA FD FF      lea d, [bp + -3] ; $i
1177   0AD1 FD 43         mov [d], b
1178   0AD3 FD 27         mov b, g
1179   0AD5 0A D8 09      jmp _for20_cond
1180   0AD8             _for20_exit:
1181   0AD8             ;; return value; 
1182   0AD8 2C FF FF      mov b, [bp + -1] ; $value             
1183   0ADB F9            leave
1184   0ADC 09            ret
1185   0ADD             
1186   0ADD             atoi:
1187   0ADD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1188   0AE0             ; $result 
1189   0AE0 10 00 00      mov a, $0
1190   0AE3 45 FF FF      mov [bp + -1], a
1191   0AE6             ; $sign 
1192   0AE6 10 01 00      mov a, $1
1193   0AE9 45 FD FF      mov [bp + -3], a
1194   0AEC 52 04 00      sub sp, 4
1195   0AEF             ;; while (*str == ' ') str++; 
1196   0AEF             _while23_cond:
1197   0AEF 2C 05 00      mov b, [bp + 5] ; $str             
1198   0AF2 74            mov d, b
1199   0AF3 32            mov bl, [d]
1200   0AF4 A7 00         mov bh, 0
1201   0AF6             ; START RELATIONAL
1202   0AF6 D7            push a
1203   0AF7 11            mov a, b
1204   0AF8 26 20 00      mov b, $20
1205   0AFB B0            cmp a, b
1206   0AFC FD 71         seq ; ==
1207   0AFE E4            pop a
1208   0AFF             ; END RELATIONAL
1209   0AFF C0 00 00      cmp b, 0
1210   0B02 C6 16 0B      je _while23_exit
1211   0B05             _while23_block:
1212   0B05             ;; str++; 
1213   0B05 2C 05 00      mov b, [bp + 5] ; $str             
1214   0B08 FD 79         mov g, b
1215   0B0A FD 77         inc b
1216   0B0C FA 05 00      lea d, [bp + 5] ; $str
1217   0B0F FD 43         mov [d], b
1218   0B11 FD 27         mov b, g
1219   0B13 0A EF 0A      jmp _while23_cond
1220   0B16             _while23_exit:
1221   0B16             ;; if (*str == '-' || *str == '+') { 
1222   0B16             _if24_cond:
1223   0B16 2C 05 00      mov b, [bp + 5] ; $str             
1224   0B19 74            mov d, b
1225   0B1A 32            mov bl, [d]
1226   0B1B A7 00         mov bh, 0
1227   0B1D             ; START RELATIONAL
1228   0B1D D7            push a
1229   0B1E 11            mov a, b
1230   0B1F 26 2D 00      mov b, $2d
1231   0B22 B0            cmp a, b
1232   0B23 FD 71         seq ; ==
1233   0B25 E4            pop a
1234   0B26             ; END RELATIONAL
1235   0B26 D7            push a
1236   0B27 11            mov a, b
1237   0B28 2C 05 00      mov b, [bp + 5] ; $str             
1238   0B2B 74            mov d, b
1239   0B2C 32            mov bl, [d]
1240   0B2D A7 00         mov bh, 0
1241   0B2F             ; START RELATIONAL
1242   0B2F D7            push a
1243   0B30 11            mov a, b
1244   0B31 26 2B 00      mov b, $2b
1245   0B34 B0            cmp a, b
1246   0B35 FD 71         seq ; ==
1247   0B37 E4            pop a
1248   0B38             ; END RELATIONAL
1249   0B38 FD A8         sor a, b ; ||
1250   0B3A E4            pop a
1251   0B3B C0 00 00      cmp b, 0
1252   0B3E C6 75 0B      je _if24_exit
1253   0B41             _if24_true:
1254   0B41             ;; if (*str == '-') sign = -1; 
1255   0B41             _if25_cond:
1256   0B41 2C 05 00      mov b, [bp + 5] ; $str             
1257   0B44 74            mov d, b
1258   0B45 32            mov bl, [d]
1259   0B46 A7 00         mov bh, 0
1260   0B48             ; START RELATIONAL
1261   0B48 D7            push a
1262   0B49 11            mov a, b
1263   0B4A 26 2D 00      mov b, $2d
1264   0B4D B0            cmp a, b
1265   0B4E FD 71         seq ; ==
1266   0B50 E4            pop a
1267   0B51             ; END RELATIONAL
1268   0B51 C0 00 00      cmp b, 0
1269   0B54 C6 64 0B      je _if25_exit
1270   0B57             _if25_true:
1271   0B57             ;; sign = -1; 
1272   0B57 FA FD FF      lea d, [bp + -3] ; $sign         
1273   0B5A 26 01 00      mov b, $1
1274   0B5D FD 97         neg b        
1275   0B5F FD 43         mov [d], b
1276   0B61 0A 64 0B      jmp _if25_exit
1277   0B64             _if25_exit:
1278   0B64             ;; str++; 
1279   0B64 2C 05 00      mov b, [bp + 5] ; $str             
1280   0B67 FD 79         mov g, b
1281   0B69 FD 77         inc b
1282   0B6B FA 05 00      lea d, [bp + 5] ; $str
1283   0B6E FD 43         mov [d], b
1284   0B70 FD 27         mov b, g
1285   0B72 0A 75 0B      jmp _if24_exit
1286   0B75             _if24_exit:
1287   0B75             ;; while (*str >= '0' && *str <= '9') { 
1288   0B75             _while26_cond:
1289   0B75 2C 05 00      mov b, [bp + 5] ; $str             
1290   0B78 74            mov d, b
1291   0B79 32            mov bl, [d]
1292   0B7A A7 00         mov bh, 0
1293   0B7C             ; START RELATIONAL
1294   0B7C D7            push a
1295   0B7D 11            mov a, b
1296   0B7E 26 30 00      mov b, $30
1297   0B81 B0            cmp a, b
1298   0B82 FD 80         sge ; >=
1299   0B84 E4            pop a
1300   0B85             ; END RELATIONAL
1301   0B85 D7            push a
1302   0B86 11            mov a, b
1303   0B87 2C 05 00      mov b, [bp + 5] ; $str             
1304   0B8A 74            mov d, b
1305   0B8B 32            mov bl, [d]
1306   0B8C A7 00         mov bh, 0
1307   0B8E             ; START RELATIONAL
1308   0B8E D7            push a
1309   0B8F 11            mov a, b
1310   0B90 26 39 00      mov b, $39
1311   0B93 B0            cmp a, b
1312   0B94 FD 74         sle ; <=
1313   0B96 E4            pop a
1314   0B97             ; END RELATIONAL
1315   0B97 FD A7         sand a, b ; &&
1316   0B99 E4            pop a
1317   0B9A C0 00 00      cmp b, 0
1318   0B9D C6 D8 0B      je _while26_exit
1319   0BA0             _while26_block:
1320   0BA0             ;; result = result * 10 + (*str - '0'); 
1321   0BA0 FA FF FF      lea d, [bp + -1] ; $result
1322   0BA3 DA            push d
1323   0BA4 2C FF FF      mov b, [bp + -1] ; $result             
1324   0BA7             ; START FACTORS
1325   0BA7 D7            push a
1326   0BA8 11            mov a, b
1327   0BA9 26 0A 00      mov b, $a
1328   0BAC AC            mul a, b ; *
1329   0BAD 11            mov a, b
1330   0BAE 27            mov b, a
1331   0BAF E4            pop a
1332   0BB0             ; END FACTORS
1333   0BB0             ; START TERMS
1334   0BB0 D7            push a
1335   0BB1 11            mov a, b
1336   0BB2 2C 05 00      mov b, [bp + 5] ; $str             
1337   0BB5 74            mov d, b
1338   0BB6 32            mov bl, [d]
1339   0BB7 A7 00         mov bh, 0
1340   0BB9             ; START TERMS
1341   0BB9 D7            push a
1342   0BBA 11            mov a, b
1343   0BBB 26 30 00      mov b, $30
1344   0BBE 60            sub a, b
1345   0BBF 27            mov b, a
1346   0BC0 E4            pop a
1347   0BC1             ; END TERMS
1348   0BC1 54            add a, b
1349   0BC2 27            mov b, a
1350   0BC3 E4            pop a
1351   0BC4             ; END TERMS
1352   0BC4 E7            pop d
1353   0BC5 FD 43         mov [d], b
1354   0BC7             ;; str++; 
1355   0BC7 2C 05 00      mov b, [bp + 5] ; $str             
1356   0BCA FD 79         mov g, b
1357   0BCC FD 77         inc b
1358   0BCE FA 05 00      lea d, [bp + 5] ; $str
1359   0BD1 FD 43         mov [d], b
1360   0BD3 FD 27         mov b, g
1361   0BD5 0A 75 0B      jmp _while26_cond
1362   0BD8             _while26_exit:
1363   0BD8             ;; return sign * result; 
1364   0BD8 2C FD FF      mov b, [bp + -3] ; $sign             
1365   0BDB             ; START FACTORS
1366   0BDB D7            push a
1367   0BDC 11            mov a, b
1368   0BDD 2C FF FF      mov b, [bp + -1] ; $result             
1369   0BE0 AC            mul a, b ; *
1370   0BE1 11            mov a, b
1371   0BE2 27            mov b, a
1372   0BE3 E4            pop a
1373   0BE4             ; END FACTORS
1374   0BE4 F9            leave
1375   0BE5 09            ret
1376   0BE6             
1377   0BE6             gets:
1378   0BE6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1379   0BE9             
1380   0BE9             ; --- BEGIN INLINE ASM BLOCK
1381   0BE9 17 05 00      mov a, [bp + 5] ; $s             
1382   0BEC 3C            mov d, a
1383   0BED 07 C2 0F      call _gets
1384   0BF0             ; --- END INLINE ASM BLOCK
1385   0BF0             
1386   0BF0             ;; return strlen(s); 
1387   0BF0 2C 05 00      mov b, [bp + 5] ; $s             
1388   0BF3 FD AB         swp b
1389   0BF5 D8            push b
1390   0BF6 07 67 07      call strlen
1391   0BF9 51 02 00      add sp, 2
1392   0BFC F9            leave
1393   0BFD 09            ret
1394   0BFE             
1395   0BFE             prints:
1396   0BFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1397   0C01             ; $digits 
1398   0C01             ; $i 
1399   0C01 10 00 00      mov a, $0
1400   0C04 45 FA FF      mov [bp + -6], a
1401   0C07 52 07 00      sub sp, 7
1402   0C0A             ;; if (num < 0) { 
1403   0C0A             _if27_cond:
1404   0C0A 2C 05 00      mov b, [bp + 5] ; $num             
1405   0C0D             ; START RELATIONAL
1406   0C0D D7            push a
1407   0C0E 11            mov a, b
1408   0C0F 26 00 00      mov b, $0
1409   0C12 B0            cmp a, b
1410   0C13 FD 73         slt ; < 
1411   0C15 E4            pop a
1412   0C16             ; END RELATIONAL
1413   0C16 C0 00 00      cmp b, 0
1414   0C19 C6 33 0C      je _if27_else
1415   0C1C             _if27_true:
1416   0C1C             ;; putchar('-'); 
1417   0C1C 26 2D 00      mov b, $2d
1418   0C1F DD            push bl
1419   0C20 07 B5 0D      call putchar
1420   0C23 51 01 00      add sp, 1
1421   0C26             ;; num = -num; 
1422   0C26 FA 05 00      lea d, [bp + 5] ; $num         
1423   0C29 2C 05 00      mov b, [bp + 5] ; $num             
1424   0C2C FD 97         neg b        
1425   0C2E FD 43         mov [d], b
1426   0C30 0A 54 0C      jmp _if27_exit
1427   0C33             _if27_else:
1428   0C33             ;; if (num == 0) { 
1429   0C33             _if28_cond:
1430   0C33 2C 05 00      mov b, [bp + 5] ; $num             
1431   0C36             ; START RELATIONAL
1432   0C36 D7            push a
1433   0C37 11            mov a, b
1434   0C38 26 00 00      mov b, $0
1435   0C3B B0            cmp a, b
1436   0C3C FD 71         seq ; ==
1437   0C3E E4            pop a
1438   0C3F             ; END RELATIONAL
1439   0C3F C0 00 00      cmp b, 0
1440   0C42 C6 54 0C      je _if28_exit
1441   0C45             _if28_true:
1442   0C45             ;; putchar('0'); 
1443   0C45 26 30 00      mov b, $30
1444   0C48 DD            push bl
1445   0C49 07 B5 0D      call putchar
1446   0C4C 51 01 00      add sp, 1
1447   0C4F             ;; return; 
1448   0C4F F9            leave
1449   0C50 09            ret
1450   0C51 0A 54 0C      jmp _if28_exit
1451   0C54             _if28_exit:
1452   0C54             _if27_exit:
1453   0C54             ;; while (num > 0) { 
1454   0C54             _while29_cond:
1455   0C54 2C 05 00      mov b, [bp + 5] ; $num             
1456   0C57             ; START RELATIONAL
1457   0C57 D7            push a
1458   0C58 11            mov a, b
1459   0C59 26 00 00      mov b, $0
1460   0C5C B0            cmp a, b
1461   0C5D FD 7F         sgt ; >
1462   0C5F E4            pop a
1463   0C60             ; END RELATIONAL
1464   0C60 C0 00 00      cmp b, 0
1465   0C63 C6 A6 0C      je _while29_exit
1466   0C66             _while29_block:
1467   0C66             ;; digits[i] = '0' + (num % 10); 
1468   0C66 FA FC FF      lea d, [bp + -4] ; $digits
1469   0C69 D7            push a         
1470   0C6A 2C FA FF      mov b, [bp + -6] ; $i                     
1471   0C6D 5A            add d, b
1472   0C6E E4            pop a         
1473   0C6F 26 30 00      mov b, $30
1474   0C72             ; START TERMS
1475   0C72 D7            push a
1476   0C73 11            mov a, b
1477   0C74 2C 05 00      mov b, [bp + 5] ; $num             
1478   0C77             ; START FACTORS
1479   0C77 D7            push a
1480   0C78 11            mov a, b
1481   0C79 26 0A 00      mov b, $a
1482   0C7C AE            div a, b ; 
1483   0C7D 11            mov a, b
1484   0C7E 27            mov b, a
1485   0C7F E4            pop a
1486   0C80             ; END FACTORS
1487   0C80 54            add a, b
1488   0C81 27            mov b, a
1489   0C82 E4            pop a
1490   0C83             ; END TERMS        
1491   0C83 FD 3E         mov [d], bl
1492   0C85             ;; num = num / 10; 
1493   0C85 FA 05 00      lea d, [bp + 5] ; $num         
1494   0C88 2C 05 00      mov b, [bp + 5] ; $num             
1495   0C8B             ; START FACTORS
1496   0C8B D7            push a
1497   0C8C 11            mov a, b
1498   0C8D 26 0A 00      mov b, $a
1499   0C90 AE            div a, b
1500   0C91 27            mov b, a
1501   0C92 E4            pop a
1502   0C93             ; END FACTORS        
1503   0C93 FD 43         mov [d], b
1504   0C95             ;; i++; 
1505   0C95 2C FA FF      mov b, [bp + -6] ; $i             
1506   0C98 FD 79         mov g, b
1507   0C9A FD 77         inc b
1508   0C9C FA FA FF      lea d, [bp + -6] ; $i
1509   0C9F FD 43         mov [d], b
1510   0CA1 FD 27         mov b, g
1511   0CA3 0A 54 0C      jmp _while29_cond
1512   0CA6             _while29_exit:
1513   0CA6             ;; while (i > 0) { 
1514   0CA6             _while30_cond:
1515   0CA6 2C FA FF      mov b, [bp + -6] ; $i             
1516   0CA9             ; START RELATIONAL
1517   0CA9 D7            push a
1518   0CAA 11            mov a, b
1519   0CAB 26 00 00      mov b, $0
1520   0CAE B0            cmp a, b
1521   0CAF FD 7F         sgt ; >
1522   0CB1 E4            pop a
1523   0CB2             ; END RELATIONAL
1524   0CB2 C0 00 00      cmp b, 0
1525   0CB5 C6 DC 0C      je _while30_exit
1526   0CB8             _while30_block:
1527   0CB8             ;; i--; 
1528   0CB8 2C FA FF      mov b, [bp + -6] ; $i             
1529   0CBB FD 79         mov g, b
1530   0CBD FD 7D         dec b
1531   0CBF FA FA FF      lea d, [bp + -6] ; $i
1532   0CC2 FD 43         mov [d], b
1533   0CC4 FD 27         mov b, g
1534   0CC6             ;; putchar(digits[i]); 
1535   0CC6 FA FC FF      lea d, [bp + -4] ; $digits
1536   0CC9 D7            push a         
1537   0CCA 2C FA FF      mov b, [bp + -6] ; $i                     
1538   0CCD 5A            add d, b
1539   0CCE E4            pop a
1540   0CCF 32            mov bl, [d]
1541   0CD0 A7 00         mov bh, 0
1542   0CD2 DD            push bl
1543   0CD3 07 B5 0D      call putchar
1544   0CD6 51 01 00      add sp, 1
1545   0CD9 0A A6 0C      jmp _while30_cond
1546   0CDC             _while30_exit:
1547   0CDC F9            leave
1548   0CDD 09            ret
1549   0CDE             
1550   0CDE             printu:
1551   0CDE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1552   0CE1             ; $digits 
1553   0CE1             ; $i 
1554   0CE1 52 07 00      sub sp, 7
1555   0CE4             ;; i = 0; 
1556   0CE4 FA FA FF      lea d, [bp + -6] ; $i         
1557   0CE7 26 00 00      mov b, $0        
1558   0CEA FD 43         mov [d], b
1559   0CEC             ;; if(num == 0){ 
1560   0CEC             _if31_cond:
1561   0CEC 2C 05 00      mov b, [bp + 5] ; $num             
1562   0CEF             ; START RELATIONAL
1563   0CEF D7            push a
1564   0CF0 11            mov a, b
1565   0CF1 26 00 00      mov b, $0
1566   0CF4 B0            cmp a, b
1567   0CF5 FD 71         seq ; ==
1568   0CF7 E4            pop a
1569   0CF8             ; END RELATIONAL
1570   0CF8 C0 00 00      cmp b, 0
1571   0CFB C6 0D 0D      je _if31_exit
1572   0CFE             _if31_true:
1573   0CFE             ;; putchar('0'); 
1574   0CFE 26 30 00      mov b, $30
1575   0D01 DD            push bl
1576   0D02 07 B5 0D      call putchar
1577   0D05 51 01 00      add sp, 1
1578   0D08             ;; return; 
1579   0D08 F9            leave
1580   0D09 09            ret
1581   0D0A 0A 0D 0D      jmp _if31_exit
1582   0D0D             _if31_exit:
1583   0D0D             ;; while (num > 0) { 
1584   0D0D             _while32_cond:
1585   0D0D 2C 05 00      mov b, [bp + 5] ; $num             
1586   0D10             ; START RELATIONAL
1587   0D10 D7            push a
1588   0D11 11            mov a, b
1589   0D12 26 00 00      mov b, $0
1590   0D15 B0            cmp a, b
1591   0D16 FD 81         sgu ; > (unsigned)
1592   0D18 E4            pop a
1593   0D19             ; END RELATIONAL
1594   0D19 C0 00 00      cmp b, 0
1595   0D1C C6 5F 0D      je _while32_exit
1596   0D1F             _while32_block:
1597   0D1F             ;; digits[i] = '0' + (num % 10); 
1598   0D1F FA FC FF      lea d, [bp + -4] ; $digits
1599   0D22 D7            push a         
1600   0D23 2C FA FF      mov b, [bp + -6] ; $i                     
1601   0D26 5A            add d, b
1602   0D27 E4            pop a         
1603   0D28 26 30 00      mov b, $30
1604   0D2B             ; START TERMS
1605   0D2B D7            push a
1606   0D2C 11            mov a, b
1607   0D2D 2C 05 00      mov b, [bp + 5] ; $num             
1608   0D30             ; START FACTORS
1609   0D30 D7            push a
1610   0D31 11            mov a, b
1611   0D32 26 0A 00      mov b, $a
1612   0D35 AE            div a, b ; 
1613   0D36 11            mov a, b
1614   0D37 27            mov b, a
1615   0D38 E4            pop a
1616   0D39             ; END FACTORS
1617   0D39 54            add a, b
1618   0D3A 27            mov b, a
1619   0D3B E4            pop a
1620   0D3C             ; END TERMS        
1621   0D3C FD 3E         mov [d], bl
1622   0D3E             ;; num = num / 10; 
1623   0D3E FA 05 00      lea d, [bp + 5] ; $num         
1624   0D41 2C 05 00      mov b, [bp + 5] ; $num             
1625   0D44             ; START FACTORS
1626   0D44 D7            push a
1627   0D45 11            mov a, b
1628   0D46 26 0A 00      mov b, $a
1629   0D49 AE            div a, b
1630   0D4A 27            mov b, a
1631   0D4B E4            pop a
1632   0D4C             ; END FACTORS        
1633   0D4C FD 43         mov [d], b
1634   0D4E             ;; i++; 
1635   0D4E 2C FA FF      mov b, [bp + -6] ; $i             
1636   0D51 FD 79         mov g, b
1637   0D53 FD 77         inc b
1638   0D55 FA FA FF      lea d, [bp + -6] ; $i
1639   0D58 FD 43         mov [d], b
1640   0D5A FD 27         mov b, g
1641   0D5C 0A 0D 0D      jmp _while32_cond
1642   0D5F             _while32_exit:
1643   0D5F             ;; while (i > 0) { 
1644   0D5F             _while33_cond:
1645   0D5F 2C FA FF      mov b, [bp + -6] ; $i             
1646   0D62             ; START RELATIONAL
1647   0D62 D7            push a
1648   0D63 11            mov a, b
1649   0D64 26 00 00      mov b, $0
1650   0D67 B0            cmp a, b
1651   0D68 FD 7F         sgt ; >
1652   0D6A E4            pop a
1653   0D6B             ; END RELATIONAL
1654   0D6B C0 00 00      cmp b, 0
1655   0D6E C6 95 0D      je _while33_exit
1656   0D71             _while33_block:
1657   0D71             ;; i--; 
1658   0D71 2C FA FF      mov b, [bp + -6] ; $i             
1659   0D74 FD 79         mov g, b
1660   0D76 FD 7D         dec b
1661   0D78 FA FA FF      lea d, [bp + -6] ; $i
1662   0D7B FD 43         mov [d], b
1663   0D7D FD 27         mov b, g
1664   0D7F             ;; putchar(digits[i]); 
1665   0D7F FA FC FF      lea d, [bp + -4] ; $digits
1666   0D82 D7            push a         
1667   0D83 2C FA FF      mov b, [bp + -6] ; $i                     
1668   0D86 5A            add d, b
1669   0D87 E4            pop a
1670   0D88 32            mov bl, [d]
1671   0D89 A7 00         mov bh, 0
1672   0D8B DD            push bl
1673   0D8C 07 B5 0D      call putchar
1674   0D8F 51 01 00      add sp, 1
1675   0D92 0A 5F 0D      jmp _while33_cond
1676   0D95             _while33_exit:
1677   0D95 F9            leave
1678   0D96 09            ret
1679   0D97             
1680   0D97             rand:
1681   0D97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1682   0D9A             ; $sec 
1683   0D9A 52 01 00      sub sp, 1
1684   0D9D             
1685   0D9D             ; --- BEGIN INLINE ASM BLOCK
1686   0D9D 19 00         mov al, 0
1687   0D9F 05 01         syscall sys_rtc					
1688   0DA1 1A            mov al, ah
1689   0DA2 20 00 00      mov al, [bp + 0] ; $sec
1690   0DA5                         
1691   0DA5             ; --- END INLINE ASM BLOCK
1692   0DA5             
1693   0DA5             ;; return sec; 
1694   0DA5 34 00 00      mov bl, [bp + 0] ; $sec
1695   0DA8 A7 00         mov bh, 0             
1696   0DAA F9            leave
1697   0DAB 09            ret
1698   0DAC             
1699   0DAC             date:
1700   0DAC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1701   0DAF             
1702   0DAF             ; --- BEGIN INLINE ASM BLOCK
1703   0DAF 19 00         mov al, 0 
1704   0DB1 05 07         syscall sys_datetime
1705   0DB3             ; --- END INLINE ASM BLOCK
1706   0DB3             
1707   0DB3 F9            leave
1708   0DB4 09            ret
1709   0DB5             
1710   0DB5             putchar:
1711   0DB5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1712   0DB8             
1713   0DB8             ; --- BEGIN INLINE ASM BLOCK
1714   0DB8 20 05 00      mov al, [bp + 5] ; $c
1715   0DBB                         
1716   0DBB 23            mov ah, al
1717   0DBC 07 BB 0F      call _putchar
1718   0DBF             ; --- END INLINE ASM BLOCK
1719   0DBF             
1720   0DBF F9            leave
1721   0DC0 09            ret
1722   0DC1             
1723   0DC1             getchar:
1724   0DC1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1725   0DC4             ; $c 
1726   0DC4 52 01 00      sub sp, 1
1727   0DC7             
1728   0DC7             ; --- BEGIN INLINE ASM BLOCK
1729   0DC7 07 B4 0F      call getch
1730   0DCA 1A            mov al, ah
1731   0DCB FA 00 00      lea d, [bp + 0] ; $c
1732   0DCE 3E            mov [d], al
1733   0DCF             ; --- END INLINE ASM BLOCK
1734   0DCF             
1735   0DCF             ;; return c; 
1736   0DCF 34 00 00      mov bl, [bp + 0] ; $c
1737   0DD2 A7 00         mov bh, 0             
1738   0DD4 F9            leave
1739   0DD5 09            ret
1740   0DD6             
1741   0DD6             scann:
1742   0DD6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1743   0DD9             ; $m 
1744   0DD9 52 02 00      sub sp, 2
1745   0DDC             
1746   0DDC             ; --- BEGIN INLINE ASM BLOCK
1747   0DDC 07 FF 11      call scan_u16d
1748   0DDF FA FF FF      lea d, [bp + -1] ; $m
1749   0DE2 43            mov [d], a
1750   0DE3             ; --- END INLINE ASM BLOCK
1751   0DE3             
1752   0DE3             ;; return m; 
1753   0DE3 2C FF FF      mov b, [bp + -1] ; $m             
1754   0DE6 F9            leave
1755   0DE7 09            ret
1756   0DE8             
1757   0DE8             puts:
1758   0DE8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1759   0DEB             
1760   0DEB             ; --- BEGIN INLINE ASM BLOCK
1761   0DEB 17 05 00      mov a, [bp + 5] ; $s             
1762   0DEE 3C            mov d, a
1763   0DEF 07 05 11      call _puts
1764   0DF2 22 0A         mov ah, $0A
1765   0DF4 19 00         mov al, 0
1766   0DF6 05 03         syscall sys_io
1767   0DF8             ; --- END INLINE ASM BLOCK
1768   0DF8             
1769   0DF8 F9            leave
1770   0DF9 09            ret
1771   0DFA             
1772   0DFA             print:
1773   0DFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1774   0DFD             
1775   0DFD             ; --- BEGIN INLINE ASM BLOCK
1776   0DFD 17 05 00      mov a, [bp + 5] ; $s             
1777   0E00 3C            mov d, a
1778   0E01 07 05 11      call _puts
1779   0E04             ; --- END INLINE ASM BLOCK
1780   0E04             
1781   0E04 F9            leave
1782   0E05 09            ret
1783   0E06             
1784   0E06             loadfile:
1785   0E06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1786   0E09             
1787   0E09             ; --- BEGIN INLINE ASM BLOCK
1788   0E09 17 05 00      mov a, [bp + 5] ; $destination             
1789   0E0C 4F            mov di, a
1790   0E0D FA 07 00      lea d, [bp + 7] ; $filename
1791   0E10 FD 2A         mov d, [d]
1792   0E12 19 14         mov al, 20
1793   0E14 05 04         syscall sys_filesystem
1794   0E16             ; --- END INLINE ASM BLOCK
1795   0E16             
1796   0E16 F9            leave
1797   0E17 09            ret
1798   0E18             
1799   0E18             create_file:
1800   0E18 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1801   0E1B F9            leave
1802   0E1C 09            ret
1803   0E1D             
1804   0E1D             delete_file:
1805   0E1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1806   0E20             
1807   0E20             ; --- BEGIN INLINE ASM BLOCK
1808   0E20 FA 05 00      lea d, [bp + 5] ; $filename
1809   0E23 19 0A         mov al, 10
1810   0E25 05 04         syscall sys_filesystem
1811   0E27             ; --- END INLINE ASM BLOCK
1812   0E27             
1813   0E27 F9            leave
1814   0E28 09            ret
1815   0E29             
1816   0E29             fopen:
1817   0E29 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1818   0E2C F9            leave
1819   0E2D 09            ret
1820   0E2E             
1821   0E2E             fclose:
1822   0E2E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1823   0E31 F9            leave
1824   0E32 09            ret
1825   0E33             
1826   0E33             alloc:
1827   0E33 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1828   0E36             ;; heap_top = heap_top + bytes; 
1829   0E36 3B 21 1F      mov d, _heap_top ; $heap_top         
1830   0E39 29 21 1F      mov b, [_heap_top] ; $heap_top           
1831   0E3C             ; START TERMS
1832   0E3C D7            push a
1833   0E3D 11            mov a, b
1834   0E3E 2C 05 00      mov b, [bp + 5] ; $bytes             
1835   0E41 54            add a, b
1836   0E42 27            mov b, a
1837   0E43 E4            pop a
1838   0E44             ; END TERMS        
1839   0E44 FD 43         mov [d], b
1840   0E46             ;; return heap_top - bytes; 
1841   0E46 29 21 1F      mov b, [_heap_top] ; $heap_top           
1842   0E49             ; START TERMS
1843   0E49 D7            push a
1844   0E4A 11            mov a, b
1845   0E4B 2C 05 00      mov b, [bp + 5] ; $bytes             
1846   0E4E 60            sub a, b
1847   0E4F 27            mov b, a
1848   0E50 E4            pop a
1849   0E51             ; END TERMS
1850   0E51 F9            leave
1851   0E52 09            ret
1852   0E53             
1853   0E53             free:
1854   0E53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1855   0E56             ;; return heap_top = heap_top - bytes; 
1856   0E56 3B 21 1F      mov d, _heap_top ; $heap_top         
1857   0E59 29 21 1F      mov b, [_heap_top] ; $heap_top           
1858   0E5C             ; START TERMS
1859   0E5C D7            push a
1860   0E5D 11            mov a, b
1861   0E5E 2C 05 00      mov b, [bp + 5] ; $bytes             
1862   0E61 60            sub a, b
1863   0E62 27            mov b, a
1864   0E63 E4            pop a
1865   0E64             ; END TERMS        
1866   0E64 FD 43         mov [d], b
1867   0E66 F9            leave
1868   0E67 09            ret
1869   0E68             
1870   0E68             exit:
1871   0E68 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1872   0E6B             
1873   0E6B             ; --- BEGIN INLINE ASM BLOCK
1874   0E6B 05 0B         syscall sys_terminate_proc
1875   0E6D             ; --- END INLINE ASM BLOCK
1876   0E6D             
1877   0E6D F9            leave
1878   0E6E 09            ret
1879   0E6F             
1880   0E6F             load_hex:
1881   0E6F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1882   0E72             ; $temp 
1883   0E72 52 02 00      sub sp, 2
1884   0E75             ;; temp = alloc(32768); 
1885   0E75 FA FF FF      lea d, [bp + -1] ; $temp
1886   0E78 DA            push d
1887   0E79 26 00 80      mov b, $8000
1888   0E7C FD AB         swp b
1889   0E7E D8            push b
1890   0E7F 07 33 0E      call alloc
1891   0E82 51 02 00      add sp, 2
1892   0E85 E7            pop d
1893   0E86 FD 43         mov [d], b
1894   0E88             
1895   0E88             ; --- BEGIN INLINE ASM BLOCK
1896   0E88               
1897   0E88               
1898   0E88               
1899   0E88               
1900   0E88               
1901   0E88             _load_hex:
1902   0E88 D7            push a
1903   0E89 D8            push b
1904   0E8A DA            push d
1905   0E8B E2            push si
1906   0E8C E3            push di
1907   0E8D 52 00 80      sub sp, $8000      
1908   0E90 38 00 00      mov c, 0
1909   0E93 48            mov a, sp
1910   0E94 77            inc a
1911   0E95 3C            mov d, a          
1912   0E96 07 C2 0F      call _gets        
1913   0E99 4D            mov si, a
1914   0E9A             __load_hex_loop:
1915   0E9A F6            lodsb             
1916   0E9B B9 00         cmp al, 0         
1917   0E9D C6 AB 0E      jz __load_hex_ret
1918   0EA0 36            mov bh, al
1919   0EA1 F6            lodsb
1920   0EA2 2F            mov bl, al
1921   0EA3 07 78 0F      call _atoi        
1922   0EA6 F7            stosb             
1923   0EA7 78            inc c
1924   0EA8 0A 9A 0E      jmp __load_hex_loop
1925   0EAB             __load_hex_ret:
1926   0EAB 51 00 80      add sp, $8000
1927   0EAE F0            pop di
1928   0EAF EF            pop si
1929   0EB0 E7            pop d
1930   0EB1 E5            pop b
1931   0EB2 E4            pop a
1932   0EB3             ; --- END INLINE ASM BLOCK
1933   0EB3             
1934   0EB3 F9            leave
1935   0EB4 09            ret
1936   0EB5             
1937   0EB5             getparam:
1938   0EB5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1939   0EB8             ; $data 
1940   0EB8 52 01 00      sub sp, 1
1941   0EBB             
1942   0EBB             ; --- BEGIN INLINE ASM BLOCK
1943   0EBB 19 04         mov al, 4
1944   0EBD FA 05 00      lea d, [bp + 5] ; $address
1945   0EC0 FD 2A         mov d, [d]
1946   0EC2 05 0C         syscall sys_system
1947   0EC4 FA 00 00      lea d, [bp + 0] ; $data
1948   0EC7 FD 3E         mov [d], bl
1949   0EC9             ; --- END INLINE ASM BLOCK
1950   0EC9             
1951   0EC9             ;; return data; 
1952   0EC9 34 00 00      mov bl, [bp + 0] ; $data
1953   0ECC A7 00         mov bh, 0             
1954   0ECE F9            leave
1955   0ECF 09            ret
1956   0ED0             
1957   0ED0             include_stdio_asm:
1958   0ED0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1959   0ED3             
1960   0ED3             ; --- BEGIN INLINE ASM BLOCK
1961   0ED3             .include "lib/stdio.asm"
0001+  0ED3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0ED3             ; stdio.s
0003+  0ED3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0ED3             .include "lib/string.asm"
0001++ 0ED3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0ED3             ; string.s
0003++ 0ED3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0ED3             
0005++ 0ED3             
0006++ 0ED3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0ED3             ; _strrev
0008++ 0ED3             ; reverse a string
0009++ 0ED3             ; D = string address
0010++ 0ED3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0ED3             ; 01234
0012++ 0ED3             _strrev:
0013++ 0ED3 4B          	pusha
0014++ 0ED4 07 1A 0F    	call _strlen	; length in C
0015++ 0ED7 12          	mov a, c
0016++ 0ED8 AF 01 00    	cmp a, 1
0017++ 0EDB D0 F5 0E    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0EDE 7D          	dec a
0019++ 0EDF FD 4E       	mov si, d	; beginning of string
0020++ 0EE1 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0EE3 59          	add d, a	; end of string
0022++ 0EE4 12          	mov a, c
0023++ 0EE5 FD 9B       	shr a		; divide by 2
0024++ 0EE7 39          	mov c, a	; C now counts the steps
0025++ 0EE8             _strrev_L0:
0026++ 0EE8 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0EE9 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0EEA 3E          	mov [d], al	; store left char into right side
0029++ 0EEB 1B          	mov al, bl
0030++ 0EEC F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0EED 7E          	dec c
0032++ 0EEE 7F          	dec d
0033++ 0EEF C2 00 00    	cmp c, 0
0034++ 0EF2 C7 E8 0E    	jne _strrev_L0
0035++ 0EF5             _strrev_end:
0036++ 0EF5 4C          	popa
0037++ 0EF6 09          	ret
0038++ 0EF7             	
0039++ 0EF7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0EF7             ; _strchr
0041++ 0EF7             ; search string in D for char in AL
0042++ 0EF7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0EF7             _strchr:
0044++ 0EF7             _strchr_L0:
0045++ 0EF7 32          	mov bl, [d]
0046++ 0EF8 C1 00       	cmp bl, 0
0047++ 0EFA C6 05 0F    	je _strchr_end
0048++ 0EFD BA          	cmp al, bl
0049++ 0EFE C6 05 0F    	je _strchr_end
0050++ 0F01 79          	inc d
0051++ 0F02 0A F7 0E    	jmp _strchr_L0
0052++ 0F05             _strchr_end:
0053++ 0F05 1B          	mov al, bl
0054++ 0F06 09          	ret
0055++ 0F07             
0056++ 0F07             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0F07             ; _strstr
0058++ 0F07             ; find sub-string
0059++ 0F07             ; str1 in SI
0060++ 0F07             ; str2 in DI
0061++ 0F07             ; SI points to end of source string
0062++ 0F07             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0F07             _strstr:
0064++ 0F07 DB          	push al
0065++ 0F08 DA          	push d
0066++ 0F09 E3          	push di
0067++ 0F0A             _strstr_loop:
0068++ 0F0A F3          	cmpsb					; compare a byte of the strings
0069++ 0F0B C7 16 0F    	jne _strstr_ret
0070++ 0F0E FC 00 00    	lea d, [di + 0]
0071++ 0F11 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0F13 C7 0A 0F    	jne _strstr_loop				; equal chars but not at end
0073++ 0F16             _strstr_ret:
0074++ 0F16 F0          	pop di
0075++ 0F17 E7          	pop d
0076++ 0F18 E8          	pop al
0077++ 0F19 09          	ret
0078++ 0F1A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0F1A             ; length of null terminated string
0080++ 0F1A             ; result in C
0081++ 0F1A             ; pointer in D
0082++ 0F1A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0F1A             _strlen:
0084++ 0F1A DA          	push d
0085++ 0F1B 38 00 00    	mov c, 0
0086++ 0F1E             _strlen_L1:
0087++ 0F1E BD 00       	cmp byte [d], 0
0088++ 0F20 C6 28 0F    	je _strlen_ret
0089++ 0F23 79          	inc d
0090++ 0F24 78          	inc c
0091++ 0F25 0A 1E 0F    	jmp _strlen_L1
0092++ 0F28             _strlen_ret:
0093++ 0F28 E7          	pop d
0094++ 0F29 09          	ret
0095++ 0F2A             
0096++ 0F2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0F2A             ; STRCMP
0098++ 0F2A             ; compare two strings
0099++ 0F2A             ; str1 in SI
0100++ 0F2A             ; str2 in DI
0101++ 0F2A             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0F2A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0F2A             _strcmp:
0104++ 0F2A DB          	push al
0105++ 0F2B DA          	push d
0106++ 0F2C E3          	push di
0107++ 0F2D E2          	push si
0108++ 0F2E             _strcmp_loop:
0109++ 0F2E F3          	cmpsb					; compare a byte of the strings
0110++ 0F2F C7 3A 0F    	jne _strcmp_ret
0111++ 0F32 FB FF FF    	lea d, [si +- 1]
0112++ 0F35 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0F37 C7 2E 0F    	jne _strcmp_loop				; equal chars but not at end
0114++ 0F3A             _strcmp_ret:
0115++ 0F3A EF          	pop si
0116++ 0F3B F0          	pop di
0117++ 0F3C E7          	pop d
0118++ 0F3D E8          	pop al
0119++ 0F3E 09          	ret
0120++ 0F3F             
0121++ 0F3F             
0122++ 0F3F             ; STRCPY
0123++ 0F3F             ; copy null terminated string from SI to DI
0124++ 0F3F             ; source in SI
0125++ 0F3F             ; destination in DI
0126++ 0F3F             _strcpy:
0127++ 0F3F E2          	push si
0128++ 0F40 E3          	push di
0129++ 0F41 DB          	push al
0130++ 0F42             _strcpy_L1:
0131++ 0F42 F6          	lodsb
0132++ 0F43 F7          	stosb
0133++ 0F44 B9 00       	cmp al, 0
0134++ 0F46 C7 42 0F    	jne _strcpy_L1
0135++ 0F49             _strcpy_end:
0136++ 0F49 E8          	pop al
0137++ 0F4A F0          	pop di
0138++ 0F4B EF          	pop si
0139++ 0F4C 09          	ret
0140++ 0F4D             
0141++ 0F4D             ; STRCAT
0142++ 0F4D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0F4D             ; source in SI
0144++ 0F4D             ; destination in DI
0145++ 0F4D             _strcat:
0146++ 0F4D E2          	push si
0147++ 0F4E E3          	push di
0148++ 0F4F D7          	push a
0149++ 0F50 DA          	push d
0150++ 0F51 50          	mov a, di
0151++ 0F52 3C          	mov d, a
0152++ 0F53             _strcat_goto_end_L1:
0153++ 0F53 BD 00       	cmp byte[d], 0
0154++ 0F55 C6 5C 0F    	je _strcat_start
0155++ 0F58 79          	inc d
0156++ 0F59 0A 53 0F    	jmp _strcat_goto_end_L1
0157++ 0F5C             _strcat_start:
0158++ 0F5C FD 50       	mov di, d
0159++ 0F5E             _strcat_L1:
0160++ 0F5E F6          	lodsb
0161++ 0F5F F7          	stosb
0162++ 0F60 B9 00       	cmp al, 0
0163++ 0F62 C7 5E 0F    	jne _strcat_L1
0164++ 0F65             _strcat_end:
0165++ 0F65 E7          	pop d
0166++ 0F66 E4          	pop a
0167++ 0F67 F0          	pop di
0168++ 0F68 EF          	pop si
0169++ 0F69 09          	ret
0170++ 0F6A             
0171++ 0F6A             
0005+  0F6A             
0006+  0F6A             
0007+  0F6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  0F6A             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  0F6A             ; ASCII in BL
0010+  0F6A             ; result in AL
0011+  0F6A             ; ascii for F = 0100 0110
0012+  0F6A             ; ascii for 9 = 0011 1001
0013+  0F6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  0F6A             hex_ascii_encode:
0015+  0F6A 1B            mov al, bl
0016+  0F6B 93 40         test al, $40        ; test if letter or number
0017+  0F6D C7 73 0F      jnz hex_letter
0018+  0F70 87 0F         and al, $0F        ; get number
0019+  0F72 09            ret
0020+  0F73             hex_letter:
0021+  0F73 87 0F         and al, $0F        ; get letter
0022+  0F75 6A 09         add al, 9
0023+  0F77 09            ret
0024+  0F78             
0025+  0F78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0F78             ; ATOI
0027+  0F78             ; 2 letter hex string in B
0028+  0F78             ; 8bit integer returned in AL
0029+  0F78             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  0F78             _atoi:
0031+  0F78 D8            push b
0032+  0F79 07 6A 0F      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  0F7C 30            mov bl, bh
0034+  0F7D DB            push al          ; save a
0035+  0F7E 07 6A 0F      call hex_ascii_encode
0036+  0F81 EA            pop bl  
0037+  0F82 FD 9E 04      shl al, 4
0038+  0F85 8C            or al, bl
0039+  0F86 E5            pop b
0040+  0F87 09            ret  
0041+  0F88             
0042+  0F88             
0043+  0F88             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0F88             ; scanf
0045+  0F88             ; no need for explanations!
0046+  0F88             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0F88             scanf:
0048+  0F88 09            ret
0049+  0F89             
0050+  0F89             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0F89             ; ITOA
0052+  0F89             ; 8bit value in BL
0053+  0F89             ; 2 byte ASCII result in A
0054+  0F89             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0F89             _itoa:
0056+  0F89 DA            push d
0057+  0F8A D8            push b
0058+  0F8B A7 00         mov bh, 0
0059+  0F8D FD A4 04      shr bl, 4  
0060+  0F90 74            mov d, b
0061+  0F91 1F 39 12      mov al, [d + s_hex_digits]
0062+  0F94 23            mov ah, al
0063+  0F95               
0064+  0F95 E5            pop b
0065+  0F96 D8            push b
0066+  0F97 A7 00         mov bh, 0
0067+  0F99 FD 87 0F      and bl, $0F
0068+  0F9C 74            mov d, b
0069+  0F9D 1F 39 12      mov al, [d + s_hex_digits]
0070+  0FA0 E5            pop b
0071+  0FA1 E7            pop d
0072+  0FA2 09            ret
0073+  0FA3             
0074+  0FA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0FA3             ; HEX STRING TO BINARY
0076+  0FA3             ; di = destination address
0077+  0FA3             ; si = source
0078+  0FA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0FA3             _hex_to_int:
0080+  0FA3             _hex_to_int_L1:
0081+  0FA3 F6            lodsb          ; load from [SI] to AL
0082+  0FA4 B9 00         cmp al, 0        ; check if ASCII 0
0083+  0FA6 C6 B3 0F      jz _hex_to_int_ret
0084+  0FA9 36            mov bh, al
0085+  0FAA F6            lodsb
0086+  0FAB 2F            mov bl, al
0087+  0FAC 07 78 0F      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  0FAF F7            stosb          ; store AL to [DI]
0089+  0FB0 0A A3 0F      jmp _hex_to_int_L1
0090+  0FB3             _hex_to_int_ret:
0091+  0FB3 09            ret    
0092+  0FB4             
0093+  0FB4             
0094+  0FB4             
0095+  0FB4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0FB4             ; GETCHAR
0097+  0FB4             ; char in ah
0098+  0FB4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0FB4             getch:
0100+  0FB4 DB            push al
0101+  0FB5             getch_retry:
0102+  0FB5 19 01         mov al, 1
0103+  0FB7 05 03         syscall sys_io      ; receive in AH
0104+  0FB9 E8            pop al
0105+  0FBA 09            ret
0106+  0FBB             
0107+  0FBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0FBB             ; PUTCHAR
0109+  0FBB             ; char in ah
0110+  0FBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0FBB             _putchar:
0112+  0FBB D7            push a
0113+  0FBC 19 00         mov al, 0
0114+  0FBE 05 03         syscall sys_io      ; char in AH
0115+  0FC0 E4            pop a
0116+  0FC1 09            ret
0117+  0FC2             
0118+  0FC2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0FC2             ;; INPUT A STRING
0120+  0FC2             ;; terminates with null
0121+  0FC2             ;; pointer in D
0122+  0FC2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0FC2             _gets:
0124+  0FC2 D7            push a
0125+  0FC3 DA            push d
0126+  0FC4             _gets_loop:
0127+  0FC4 19 01         mov al, 1
0128+  0FC6 05 03         syscall sys_io      ; receive in AH
0129+  0FC8 B9 00         cmp al, 0        ; check error code (AL)
0130+  0FCA C6 C4 0F      je _gets_loop      ; if no char received, retry
0131+  0FCD             
0132+  0FCD 76 1B         cmp ah, 27
0133+  0FCF C6 F0 0F      je _gets_ansi_esc
0134+  0FD2 76 0A         cmp ah, $0A        ; LF
0135+  0FD4 C6 5B 10      je _gets_end
0136+  0FD7 76 0D         cmp ah, $0D        ; CR
0137+  0FD9 C6 5B 10      je _gets_end
0138+  0FDC 76 5C         cmp ah, $5C        ; '\\'
0139+  0FDE C6 1C 10      je _gets_escape
0140+  0FE1               
0141+  0FE1 76 08         cmp ah, $08      ; check for backspace
0142+  0FE3 C6 EC 0F      je _gets_backspace
0143+  0FE6             
0144+  0FE6 1A            mov al, ah
0145+  0FE7 3E            mov [d], al
0146+  0FE8 79            inc d
0147+  0FE9 0A C4 0F      jmp _gets_loop
0148+  0FEC             _gets_backspace:
0149+  0FEC 7F            dec d
0150+  0FED 0A C4 0F      jmp _gets_loop
0151+  0FF0             _gets_ansi_esc:
0152+  0FF0 19 01         mov al, 1
0153+  0FF2 05 03         syscall sys_io        ; receive in AH without echo
0154+  0FF4 B9 00         cmp al, 0          ; check error code (AL)
0155+  0FF6 C6 F0 0F      je _gets_ansi_esc    ; if no char received, retry
0156+  0FF9 76 5B         cmp ah, '['
0157+  0FFB C7 C4 0F      jne _gets_loop
0158+  0FFE             _gets_ansi_esc_2:
0159+  0FFE 19 01         mov al, 1
0160+  1000 05 03         syscall sys_io          ; receive in AH without echo
0161+  1002 B9 00         cmp al, 0            ; check error code (AL)
0162+  1004 C6 FE 0F      je _gets_ansi_esc_2  ; if no char received, retry
0163+  1007 76 44         cmp ah, 'D'
0164+  1009 C6 14 10      je _gets_left_arrow
0165+  100C 76 43         cmp ah, 'C'
0166+  100E C6 18 10      je _gets_right_arrow
0167+  1011 0A C4 0F      jmp _gets_loop
0168+  1014             _gets_left_arrow:
0169+  1014 7F            dec d
0170+  1015 0A C4 0F      jmp _gets_loop
0171+  1018             _gets_right_arrow:
0172+  1018 79            inc d
0173+  1019 0A C4 0F      jmp _gets_loop
0174+  101C             _gets_escape:
0175+  101C 19 01         mov al, 1
0176+  101E 05 03         syscall sys_io      ; receive in AH
0177+  1020 B9 00         cmp al, 0        ; check error code (AL)
0178+  1022 C6 1C 10      je _gets_escape      ; if no char received, retry
0179+  1025 76 6E         cmp ah, 'n'
0180+  1027 C6 46 10      je _gets_LF
0181+  102A 76 72         cmp ah, 'r'
0182+  102C C6 4D 10      je _gets_CR
0183+  102F 76 30         cmp ah, '0'
0184+  1031 C6 54 10      je _gets_NULL
0185+  1034 76 5C         cmp ah, $5C  ; '\'
0186+  1036 C6 3F 10      je _gets_slash
0187+  1039 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  103A 3E            mov [d], al
0189+  103B 79            inc d
0190+  103C 0A C4 0F      jmp _gets_loop
0191+  103F             _gets_slash:
0192+  103F 19 5C         mov al, $5C
0193+  1041 3E            mov [d], al
0194+  1042 79            inc d
0195+  1043 0A C4 0F      jmp _gets_loop
0196+  1046             _gets_LF:
0197+  1046 19 0A         mov al, $0A
0198+  1048 3E            mov [d], al
0199+  1049 79            inc d
0200+  104A 0A C4 0F      jmp _gets_loop
0201+  104D             _gets_CR:
0202+  104D 19 0D         mov al, $0D
0203+  104F 3E            mov [d], al
0204+  1050 79            inc d
0205+  1051 0A C4 0F      jmp _gets_loop
0206+  1054             _gets_NULL:
0207+  1054 19 00         mov al, $00
0208+  1056 3E            mov [d], al
0209+  1057 79            inc d
0210+  1058 0A C4 0F      jmp _gets_loop
0211+  105B             _gets_end:
0212+  105B 19 00         mov al, 0
0213+  105D 3E            mov [d], al        ; terminate string
0214+  105E E7            pop d
0215+  105F E4            pop a
0216+  1060 09            ret
0217+  1061             
0218+  1061             
0219+  1061             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  1061             ;; INPUT TEXT
0221+  1061             ;; terminated with CTRL+D
0222+  1061             ;; pointer in D
0223+  1061             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  1061             _gettxt:
0225+  1061 D7            push a
0226+  1062 DA            push d
0227+  1063             _gettxt_loop:
0228+  1063 19 01         mov al, 1
0229+  1065 05 03         syscall sys_io      ; receive in AH
0230+  1067 B9 00         cmp al, 0        ; check error code (AL)
0231+  1069 C6 63 10      je _gettxt_loop    ; if no char received, retry
0232+  106C 76 04         cmp ah, 4      ; EOT
0233+  106E C6 AC 10      je _gettxt_end
0234+  1071 76 08         cmp ah, $08      ; check for backspace
0235+  1073 C6 A8 10      je _gettxt_backspace
0236+  1076 76 5C         cmp ah, $5C        ; '\'
0237+  1078 C6 81 10      je _gettxt_escape
0238+  107B 1A            mov al, ah
0239+  107C 3E            mov [d], al
0240+  107D 79            inc d
0241+  107E 0A 63 10      jmp _gettxt_loop
0242+  1081             _gettxt_escape:
0243+  1081 19 01         mov al, 1
0244+  1083 05 03         syscall sys_io      ; receive in AH
0245+  1085 B9 00         cmp al, 0        ; check error code (AL)
0246+  1087 C6 81 10      je _gettxt_escape    ; if no char received, retry
0247+  108A 76 6E         cmp ah, 'n'
0248+  108C C6 9A 10      je _gettxt_LF
0249+  108F 76 72         cmp ah, 'r'
0250+  1091 C6 A1 10      je _gettxt_CR
0251+  1094 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1095 3E            mov [d], al
0253+  1096 79            inc d
0254+  1097 0A 63 10      jmp _gettxt_loop
0255+  109A             _gettxt_LF:
0256+  109A 19 0A         mov al, $0A
0257+  109C 3E            mov [d], al
0258+  109D 79            inc d
0259+  109E 0A 63 10      jmp _gettxt_loop
0260+  10A1             _gettxt_CR:
0261+  10A1 19 0D         mov al, $0D
0262+  10A3 3E            mov [d], al
0263+  10A4 79            inc d
0264+  10A5 0A 63 10      jmp _gettxt_loop
0265+  10A8             _gettxt_backspace:
0266+  10A8 7F            dec d
0267+  10A9 0A 63 10      jmp _gettxt_loop
0268+  10AC             _gettxt_end:
0269+  10AC 19 00         mov al, 0
0270+  10AE 3E            mov [d], al        ; terminate string
0271+  10AF E7            pop d
0272+  10B0 E4            pop a
0273+  10B1 09            ret
0274+  10B2             
0275+  10B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  10B2             ; PRINT NEW LINE
0277+  10B2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  10B2             printnl:
0279+  10B2 D7            push a
0280+  10B3 10 00 0A      mov a, $0A00
0281+  10B6 05 03         syscall sys_io
0282+  10B8 10 00 0D      mov a, $0D00
0283+  10BB 05 03         syscall sys_io
0284+  10BD E4            pop a
0285+  10BE 09            ret
0286+  10BF             
0287+  10BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  10BF             ; _strtoint
0289+  10BF             ; 4 digit hex string number in d
0290+  10BF             ; integer returned in A
0291+  10BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  10BF             _strtointx:
0293+  10BF D8            push b
0294+  10C0 32            mov bl, [d]
0295+  10C1 37            mov bh, bl
0296+  10C2 33 01 00      mov bl, [d + 1]
0297+  10C5 07 78 0F      call _atoi        ; convert to int in AL
0298+  10C8 23            mov ah, al        ; move to AH
0299+  10C9 33 02 00      mov bl, [d + 2]
0300+  10CC 37            mov bh, bl
0301+  10CD 33 03 00      mov bl, [d + 3]
0302+  10D0 07 78 0F      call _atoi        ; convert to int in AL
0303+  10D3 E5            pop b
0304+  10D4 09            ret
0305+  10D5             
0306+  10D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  10D5             ; _strtoint
0308+  10D5             ; 5 digit base10 string number in d
0309+  10D5             ; integer returned in A
0310+  10D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  10D5             _strtoint:
0312+  10D5 E2            push si
0313+  10D6 D8            push b
0314+  10D7 D9            push c
0315+  10D8 DA            push d
0316+  10D9 07 1A 0F      call _strlen      ; get string length in C
0317+  10DC 7E            dec c
0318+  10DD FD 4E         mov si, d
0319+  10DF 12            mov a, c
0320+  10E0 FD 99         shl a
0321+  10E2 3B 51 12      mov d, table_power
0322+  10E5 59            add d, a
0323+  10E6 38 00 00      mov c, 0
0324+  10E9             _strtoint_L0:
0325+  10E9 F6            lodsb      ; load ASCII to al
0326+  10EA B9 00         cmp al, 0
0327+  10EC C6 FF 10      je _strtoint_end
0328+  10EF 6F 30         sub al, $30    ; make into integer
0329+  10F1 22 00         mov ah, 0
0330+  10F3 2A            mov b, [d]
0331+  10F4 AC            mul a, b      ; result in B since it fits in 16bits
0332+  10F5 11            mov a, b
0333+  10F6 28            mov b, c
0334+  10F7 54            add a, b
0335+  10F8 39            mov c, a
0336+  10F9 63 02 00      sub d, 2
0337+  10FC 0A E9 10      jmp _strtoint_L0
0338+  10FF             _strtoint_end:
0339+  10FF 12            mov a, c
0340+  1100 E7            pop d
0341+  1101 E6            pop c
0342+  1102 E5            pop b
0343+  1103 EF            pop si
0344+  1104 09            ret
0345+  1105             
0346+  1105             
0347+  1105             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  1105             ; PRINT NULL TERMINATED STRING
0349+  1105             ; pointer in D
0350+  1105             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  1105             _puts:
0352+  1105 D7            push a
0353+  1106 DA            push d
0354+  1107             _puts_L1:
0355+  1107 1E            mov al, [d]
0356+  1108 B9 00         cmp al, 0
0357+  110A C6 16 11      jz _puts_END
0358+  110D 23            mov ah, al
0359+  110E 19 00         mov al, 0
0360+  1110 05 03         syscall sys_io
0361+  1112 79            inc d
0362+  1113 0A 07 11      jmp _puts_L1
0363+  1116             _puts_END:
0364+  1116 E7            pop d
0365+  1117 E4            pop a
0366+  1118 09            ret
0367+  1119             
0368+  1119             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1119             ; PRINT N SIZE STRING
0370+  1119             ; pointer in D
0371+  1119             ; size in C
0372+  1119             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1119             _putsn:
0374+  1119 DB            push al
0375+  111A DA            push d
0376+  111B D9            push c
0377+  111C             _putsn_L0:
0378+  111C 1E            mov al, [d]
0379+  111D 23            mov ah, al
0380+  111E 19 00         mov al, 0
0381+  1120 05 03         syscall sys_io
0382+  1122 79            inc d
0383+  1123 7E            dec c  
0384+  1124 C2 00 00      cmp c, 0
0385+  1127 C7 1C 11      jne _putsn_L0
0386+  112A             _putsn_end:
0387+  112A E6            pop c
0388+  112B E7            pop d
0389+  112C E8            pop al
0390+  112D 09            ret
0391+  112E             
0392+  112E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  112E             ; print 16bit decimal number
0394+  112E             ; input number in A
0395+  112E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  112E             print_u16d:
0397+  112E D7            push a
0398+  112F D8            push b
0399+  1130 26 10 27      mov b, 10000
0400+  1133 AE            div a, b      ; get 10000's coeff.
0401+  1134 07 56 11      call print_number
0402+  1137 11            mov a, b
0403+  1138 26 E8 03      mov b, 1000
0404+  113B AE            div a, b      ; get 1000's coeff.
0405+  113C 07 56 11      call print_number
0406+  113F 11            mov a, b
0407+  1140 26 64 00      mov b, 100
0408+  1143 AE            div a, b
0409+  1144 07 56 11      call print_number
0410+  1147 11            mov a, b
0411+  1148 26 0A 00      mov b, 10
0412+  114B AE            div a, b
0413+  114C 07 56 11      call print_number
0414+  114F 1B            mov al, bl      ; 1's coeff in bl
0415+  1150 07 56 11      call print_number
0416+  1153 E5            pop b
0417+  1154 E4            pop a
0418+  1155 09            ret
0419+  1156             
0420+  1156             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1156             ; print AL
0422+  1156             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1156             print_number:
0424+  1156 6A 30         add al, $30
0425+  1158 23            mov ah, al
0426+  1159 07 BB 0F      call _putchar
0427+  115C 09            ret
0428+  115D             
0429+  115D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  115D             ; PRINT 16BIT HEX INTEGER
0431+  115D             ; integer value in reg B
0432+  115D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  115D             print_u16x:
0434+  115D D7            push a
0435+  115E D8            push b
0436+  115F DD            push bl
0437+  1160 30            mov bl, bh
0438+  1161 07 89 0F      call _itoa        ; convert bh to char in A
0439+  1164 2F            mov bl, al        ; save al
0440+  1165 19 00         mov al, 0
0441+  1167 05 03         syscall sys_io        ; display AH
0442+  1169 24            mov ah, bl        ; retrieve al
0443+  116A 19 00         mov al, 0
0444+  116C 05 03         syscall sys_io        ; display AL
0445+  116E             
0446+  116E EA            pop bl
0447+  116F 07 89 0F      call _itoa        ; convert bh to char in A
0448+  1172 2F            mov bl, al        ; save al
0449+  1173 19 00         mov al, 0
0450+  1175 05 03         syscall sys_io        ; display AH
0451+  1177 24            mov ah, bl        ; retrieve al
0452+  1178 19 00         mov al, 0
0453+  117A 05 03         syscall sys_io        ; display AL
0454+  117C             
0455+  117C E5            pop b
0456+  117D E4            pop a
0457+  117E 09            ret
0458+  117F             
0459+  117F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  117F             ; INPUT 16BIT HEX INTEGER
0461+  117F             ; read 16bit integer into A
0462+  117F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  117F             scan_u16x:
0464+  117F F8 10 00      enter 16
0465+  1182 D8            push b
0466+  1183 DA            push d
0467+  1184             
0468+  1184 FA F1 FF      lea d, [bp + -15]
0469+  1187 07 C2 0F      call _gets        ; get number
0470+  118A             
0471+  118A 32            mov bl, [d]
0472+  118B 37            mov bh, bl
0473+  118C 33 01 00      mov bl, [d + 1]
0474+  118F 07 78 0F      call _atoi        ; convert to int in AL
0475+  1192 23            mov ah, al        ; move to AH
0476+  1193             
0477+  1193 33 02 00      mov bl, [d + 2]
0478+  1196 37            mov bh, bl
0479+  1197 33 03 00      mov bl, [d + 3]
0480+  119A 07 78 0F      call _atoi        ; convert to int in AL
0481+  119D             
0482+  119D E7            pop d
0483+  119E E5            pop b
0484+  119F F9            leave
0485+  11A0 09            ret
0486+  11A1             
0487+  11A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  11A1             ; PRINT 8bit HEX INTEGER
0489+  11A1             ; integer value in reg bl
0490+  11A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  11A1             print_u8x:
0492+  11A1 D7            push a
0493+  11A2 DD            push bl
0494+  11A3             
0495+  11A3 07 89 0F      call _itoa        ; convert bl to char in A
0496+  11A6 2F            mov bl, al        ; save al
0497+  11A7 19 00         mov al, 0
0498+  11A9 05 03         syscall sys_io        ; display AH
0499+  11AB 24            mov ah, bl        ; retrieve al
0500+  11AC 19 00         mov al, 0
0501+  11AE 05 03         syscall sys_io        ; display AL
0502+  11B0             
0503+  11B0 EA            pop bl
0504+  11B1 E4            pop a
0505+  11B2 09            ret
0506+  11B3             
0507+  11B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  11B3             ; print 8bit decimal unsigned number
0509+  11B3             ; input number in AL
0510+  11B3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  11B3             print_u8d:
0512+  11B3 D7            push a
0513+  11B4 D8            push b
0514+  11B5             
0515+  11B5 22 00         mov ah, 0
0516+  11B7 26 64 00      mov b, 100
0517+  11BA AE            div a, b
0518+  11BB D8            push b      ; save remainder
0519+  11BC B9 00         cmp al, 0
0520+  11BE C6 C8 11      je skip100
0521+  11C1 6A 30         add al, $30
0522+  11C3 23            mov ah, al
0523+  11C4 19 00         mov al, 0
0524+  11C6 05 03         syscall sys_io  ; print coeff
0525+  11C8             skip100:
0526+  11C8 E4            pop a
0527+  11C9 22 00         mov ah, 0
0528+  11CB 26 0A 00      mov b, 10
0529+  11CE AE            div a, b
0530+  11CF D8            push b      ; save remainder
0531+  11D0 B9 00         cmp al, 0
0532+  11D2 C6 DC 11      je skip10
0533+  11D5 6A 30         add al, $30
0534+  11D7 23            mov ah, al
0535+  11D8 19 00         mov al, 0
0536+  11DA 05 03         syscall sys_io  ; print coeff
0537+  11DC             skip10:
0538+  11DC E4            pop a
0539+  11DD 1B            mov al, bl
0540+  11DE 6A 30         add al, $30
0541+  11E0 23            mov ah, al
0542+  11E1 19 00         mov al, 0
0543+  11E3 05 03         syscall sys_io  ; print coeff
0544+  11E5 E5            pop b
0545+  11E6 E4            pop a
0546+  11E7 09            ret
0547+  11E8             
0548+  11E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  11E8             ; INPUT 8BIT HEX INTEGER
0550+  11E8             ; read 8bit integer into AL
0551+  11E8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  11E8             scan_u8x:
0553+  11E8 F8 04 00      enter 4
0554+  11EB D8            push b
0555+  11EC DA            push d
0556+  11ED             
0557+  11ED FA FD FF      lea d, [bp + -3]
0558+  11F0 07 C2 0F      call _gets        ; get number
0559+  11F3             
0560+  11F3 32            mov bl, [d]
0561+  11F4 37            mov bh, bl
0562+  11F5 33 01 00      mov bl, [d + 1]
0563+  11F8 07 78 0F      call _atoi        ; convert to int in AL
0564+  11FB             
0565+  11FB E7            pop d
0566+  11FC E5            pop b
0567+  11FD F9            leave
0568+  11FE 09            ret
0569+  11FF             
0570+  11FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  11FF             ; input decimal number
0572+  11FF             ; result in A
0573+  11FF             ; 655'\0'
0574+  11FF             ; low--------high
0575+  11FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  11FF             scan_u16d:
0577+  11FF F8 08 00      enter 8
0578+  1202 E2            push si
0579+  1203 D8            push b
0580+  1204 D9            push c
0581+  1205 DA            push d
0582+  1206 FA F9 FF      lea d, [bp +- 7]
0583+  1209 07 C2 0F      call _gets
0584+  120C 07 1A 0F      call _strlen      ; get string length in C
0585+  120F 7E            dec c
0586+  1210 FD 4E         mov si, d
0587+  1212 12            mov a, c
0588+  1213 FD 99         shl a
0589+  1215 3B 51 12      mov d, table_power
0590+  1218 59            add d, a
0591+  1219 38 00 00      mov c, 0
0592+  121C             mul_loop:
0593+  121C F6            lodsb      ; load ASCII to al
0594+  121D B9 00         cmp al, 0
0595+  121F C6 32 12      je mul_exit
0596+  1222 6F 30         sub al, $30    ; make into integer
0597+  1224 22 00         mov ah, 0
0598+  1226 2A            mov b, [d]
0599+  1227 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1228 11            mov a, b
0601+  1229 28            mov b, c
0602+  122A 54            add a, b
0603+  122B 39            mov c, a
0604+  122C 63 02 00      sub d, 2
0605+  122F 0A 1C 12      jmp mul_loop
0606+  1232             mul_exit:
0607+  1232 12            mov a, c
0608+  1233 E7            pop d
0609+  1234 E6            pop c
0610+  1235 E5            pop b
0611+  1236 EF            pop si
0612+  1237 F9            leave
0613+  1238 09            ret
0614+  1239             
0615+  1239             
0616+  1239 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  123D 34 35 36 37 
0616+  1241 38 39 41 42 
0616+  1245 43 44 45 46 
0617+  1249 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  124D 1B 5B 48 00 
0618+  1251             
0619+  1251             table_power:
0620+  1251 01 00         .dw 1
0621+  1253 0A 00         .dw 10
0622+  1255 64 00         .dw 100
0623+  1257 E8 03         .dw 1000
0624+  1259 10 27         .dw 100001962   125B             ; --- END INLINE ASM BLOCK
1963   125B             
1964   125B F9            leave
1965   125C 09            ret
1966   125D             
1967   125D             show:
1968   125D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1969   1260             ; $i 
1970   1260             ; $j 
1971   1260 52 04 00      sub sp, 4
1972   1263             ;; for(i = 0; i <  30     ; i++){ 
1973   1263             _for34_init:
1974   1263 FA FF FF      lea d, [bp + -1] ; $i         
1975   1266 26 00 00      mov b, $0        
1976   1269 FD 43         mov [d], b
1977   126B             _for34_cond:
1978   126B 2C FF FF      mov b, [bp + -1] ; $i             
1979   126E             ; START RELATIONAL
1980   126E D7            push a
1981   126F 11            mov a, b
1982   1270 26 1E 00      mov b, $1e
1983   1273 B0            cmp a, b
1984   1274 FD 73         slt ; < 
1985   1276 E4            pop a
1986   1277             ; END RELATIONAL
1987   1277 C0 00 00      cmp b, 0
1988   127A C6 00 13      je _for34_exit
1989   127D             _for34_block:
1990   127D             ;; for(j = 0; j <  40    ; j++){ 
1991   127D             _for35_init:
1992   127D FA FD FF      lea d, [bp + -3] ; $j         
1993   1280 26 00 00      mov b, $0        
1994   1283 FD 43         mov [d], b
1995   1285             _for35_cond:
1996   1285 2C FD FF      mov b, [bp + -3] ; $j             
1997   1288             ; START RELATIONAL
1998   1288 D7            push a
1999   1289 11            mov a, b
2000   128A 26 28 00      mov b, $28
2001   128D B0            cmp a, b
2002   128E FD 73         slt ; < 
2003   1290 E4            pop a
2004   1291             ; END RELATIONAL
2005   1291 C0 00 00      cmp b, 0
2006   1294 C6 E5 12      je _for35_exit
2007   1297             _for35_block:
2008   1297             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
2009   1297             _ternary36_cond:
2010   1297 3B 08 1A      mov d, _currState_data ; $currState
2011   129A D7            push a         
2012   129B 2C FF FF      mov b, [bp + -1] ; $i                     
2013   129E FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
2014   12A2 2C FD FF      mov b, [bp + -3] ; $j                     
2015   12A5 5A            add d, b
2016   12A6 E4            pop a
2017   12A7 32            mov bl, [d]
2018   12A8 A7 00         mov bh, 0
2019   12AA             ; START RELATIONAL
2020   12AA D7            push a
2021   12AB 11            mov a, b
2022   12AC 26 40 00      mov b, $40
2023   12AF B0            cmp a, b
2024   12B0 FD 71         seq ; ==
2025   12B2 E4            pop a
2026   12B3             ; END RELATIONAL
2027   12B3 C0 00 00      cmp b, 0
2028   12B6 C6 C8 12      je _ternary36_false
2029   12B9             _ternary36_true:
2030   12B9 26 1B 1F      mov b, __s2 ; "@ "
2031   12BC FD AB         swp b
2032   12BE D8            push b
2033   12BF 07 37 08      call printf
2034   12C2 51 02 00      add sp, 2
2035   12C5 0A D4 12      jmp _ternary36_exit
2036   12C8             _ternary36_false:
2037   12C8 26 1E 1F      mov b, __s3 ; ". "
2038   12CB FD AB         swp b
2039   12CD D8            push b
2040   12CE 07 37 08      call printf
2041   12D1 51 02 00      add sp, 2
2042   12D4             _ternary36_exit:
2043   12D4             _for35_update:
2044   12D4 2C FD FF      mov b, [bp + -3] ; $j             
2045   12D7 FD 79         mov g, b
2046   12D9 FD 77         inc b
2047   12DB FA FD FF      lea d, [bp + -3] ; $j
2048   12DE FD 43         mov [d], b
2049   12E0 FD 27         mov b, g
2050   12E2 0A 85 12      jmp _for35_cond
2051   12E5             _for35_exit:
2052   12E5             ;; putchar(10); 
2053   12E5 26 0A 00      mov b, $a
2054   12E8 DD            push bl
2055   12E9 07 B5 0D      call putchar
2056   12EC 51 01 00      add sp, 1
2057   12EF             _for34_update:
2058   12EF 2C FF FF      mov b, [bp + -1] ; $i             
2059   12F2 FD 79         mov g, b
2060   12F4 FD 77         inc b
2061   12F6 FA FF FF      lea d, [bp + -1] ; $i
2062   12F9 FD 43         mov [d], b
2063   12FB FD 27         mov b, g
2064   12FD 0A 6B 12      jmp _for34_cond
2065   1300             _for34_exit:
2066   1300 F9            leave
2067   1301 09            ret
2068   1302             
2069   1302             alive:
2070   1302 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2071   1305             ;; if(currState[i][j] == '@') return 1; 
2072   1305             _if37_cond:
2073   1305 3B 08 1A      mov d, _currState_data ; $currState
2074   1308 D7            push a         
2075   1309 2C 07 00      mov b, [bp + 7] ; $i                     
2076   130C FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
2077   1310 2C 05 00      mov b, [bp + 5] ; $j                     
2078   1313 5A            add d, b
2079   1314 E4            pop a
2080   1315 32            mov bl, [d]
2081   1316 A7 00         mov bh, 0
2082   1318             ; START RELATIONAL
2083   1318 D7            push a
2084   1319 11            mov a, b
2085   131A 26 40 00      mov b, $40
2086   131D B0            cmp a, b
2087   131E FD 71         seq ; ==
2088   1320 E4            pop a
2089   1321             ; END RELATIONAL
2090   1321 C0 00 00      cmp b, 0
2091   1324 C6 2F 13      je _if37_else
2092   1327             _if37_true:
2093   1327             ;; return 1; 
2094   1327 26 01 00      mov b, $1
2095   132A F9            leave
2096   132B 09            ret
2097   132C 0A 34 13      jmp _if37_exit
2098   132F             _if37_else:
2099   132F             ;; return 0; 
2100   132F 26 00 00      mov b, $0
2101   1332 F9            leave
2102   1333 09            ret
2103   1334             _if37_exit:
2104   1334 F9            leave
2105   1335 09            ret
2106   1336             
2107   1336             neighbours:
2108   1336 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2109   1339             ; $count 
2110   1339 52 02 00      sub sp, 2
2111   133C             ;; count = 0; 
2112   133C FA FF FF      lea d, [bp + -1] ; $count         
2113   133F 26 00 00      mov b, $0        
2114   1342 FD 43         mov [d], b
2115   1344             ;; if(currState[i+-1][j] == '@')			count++; 
2116   1344             _if38_cond:
2117   1344 3B 08 1A      mov d, _currState_data ; $currState
2118   1347 D7            push a         
2119   1348 2C 07 00      mov b, [bp + 7] ; $i             
2120   134B             ; START TERMS
2121   134B D7            push a
2122   134C 11            mov a, b
2123   134D 26 01 00      mov b, $1
2124   1350 FD 97         neg b
2125   1352 54            add a, b
2126   1353 27            mov b, a
2127   1354 E4            pop a
2128   1355             ; END TERMS        
2129   1355 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
2130   1359 2C 05 00      mov b, [bp + 5] ; $j                     
2131   135C 5A            add d, b
2132   135D E4            pop a
2133   135E 32            mov bl, [d]
2134   135F A7 00         mov bh, 0
2135   1361             ; START RELATIONAL
2136   1361 D7            push a
2137   1362 11            mov a, b
2138   1363 26 40 00      mov b, $40
2139   1366 B0            cmp a, b
2140   1367 FD 71         seq ; ==
2141   1369 E4            pop a
2142   136A             ; END RELATIONAL
2143   136A C0 00 00      cmp b, 0
2144   136D C6 81 13      je _if38_exit
2145   1370             _if38_true:
2146   1370             ;; count++; 
2147   1370 2C FF FF      mov b, [bp + -1] ; $count             
2148   1373 FD 79         mov g, b
2149   1375 FD 77         inc b
2150   1377 FA FF FF      lea d, [bp + -1] ; $count
2151   137A FD 43         mov [d], b
2152   137C FD 27         mov b, g
2153   137E 0A 81 13      jmp _if38_exit
2154   1381             _if38_exit:
2155   1381             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
2156   1381             _if39_cond:
2157   1381 3B 08 1A      mov d, _currState_data ; $currState
2158   1384 D7            push a         
2159   1385 2C 07 00      mov b, [bp + 7] ; $i             
2160   1388             ; START TERMS
2161   1388 D7            push a
2162   1389 11            mov a, b
2163   138A 26 01 00      mov b, $1
2164   138D FD 97         neg b
2165   138F 54            add a, b
2166   1390 27            mov b, a
2167   1391 E4            pop a
2168   1392             ; END TERMS        
2169   1392 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
2170   1396 2C 05 00      mov b, [bp + 5] ; $j             
2171   1399             ; START TERMS
2172   1399 D7            push a
2173   139A 11            mov a, b
2174   139B 26 01 00      mov b, $1
2175   139E FD 97         neg b
2176   13A0 54            add a, b
2177   13A1 27            mov b, a
2178   13A2 E4            pop a
2179   13A3             ; END TERMS        
2180   13A3 5A            add d, b
2181   13A4 E4            pop a
2182   13A5 32            mov bl, [d]
2183   13A6 A7 00         mov bh, 0
2184   13A8             ; START RELATIONAL
2185   13A8 D7            push a
2186   13A9 11            mov a, b
2187   13AA 26 40 00      mov b, $40
2188   13AD B0            cmp a, b
2189   13AE FD 71         seq ; ==
2190   13B0 E4            pop a
2191   13B1             ; END RELATIONAL
2192   13B1 C0 00 00      cmp b, 0
2193   13B4 C6 C8 13      je _if39_exit
2194   13B7             _if39_true:
2195   13B7             ;; count++; 
2196   13B7 2C FF FF      mov b, [bp + -1] ; $count             
2197   13BA FD 79         mov g, b
2198   13BC FD 77         inc b
2199   13BE FA FF FF      lea d, [bp + -1] ; $count
2200   13C1 FD 43         mov [d], b
2201   13C3 FD 27         mov b, g
2202   13C5 0A C8 13      jmp _if39_exit
2203   13C8             _if39_exit:
2204   13C8             ;; if(currState[i+-1][j+1] == '@') 	count++; 
2205   13C8             _if40_cond:
2206   13C8 3B 08 1A      mov d, _currState_data ; $currState
2207   13CB D7            push a         
2208   13CC 2C 07 00      mov b, [bp + 7] ; $i             
2209   13CF             ; START TERMS
2210   13CF D7            push a
2211   13D0 11            mov a, b
2212   13D1 26 01 00      mov b, $1
2213   13D4 FD 97         neg b
2214   13D6 54            add a, b
2215   13D7 27            mov b, a
2216   13D8 E4            pop a
2217   13D9             ; END TERMS        
2218   13D9 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
2219   13DD 2C 05 00      mov b, [bp + 5] ; $j             
2220   13E0             ; START TERMS
2221   13E0 D7            push a
2222   13E1 11            mov a, b
2223   13E2 26 01 00      mov b, $1
2224   13E5 54            add a, b
2225   13E6 27            mov b, a
2226   13E7 E4            pop a
2227   13E8             ; END TERMS        
2228   13E8 5A            add d, b
2229   13E9 E4            pop a
2230   13EA 32            mov bl, [d]
2231   13EB A7 00         mov bh, 0
2232   13ED             ; START RELATIONAL
2233   13ED D7            push a
2234   13EE 11            mov a, b
2235   13EF 26 40 00      mov b, $40
2236   13F2 B0            cmp a, b
2237   13F3 FD 71         seq ; ==
2238   13F5 E4            pop a
2239   13F6             ; END RELATIONAL
2240   13F6 C0 00 00      cmp b, 0
2241   13F9 C6 0D 14      je _if40_exit
2242   13FC             _if40_true:
2243   13FC             ;; count++; 
2244   13FC 2C FF FF      mov b, [bp + -1] ; $count             
2245   13FF FD 79         mov g, b
2246   1401 FD 77         inc b
2247   1403 FA FF FF      lea d, [bp + -1] ; $count
2248   1406 FD 43         mov [d], b
2249   1408 FD 27         mov b, g
2250   140A 0A 0D 14      jmp _if40_exit
2251   140D             _if40_exit:
2252   140D             ;; if(currState[i][j+-1] == '@') 		count++; 
2253   140D             _if41_cond:
2254   140D 3B 08 1A      mov d, _currState_data ; $currState
2255   1410 D7            push a         
2256   1411 2C 07 00      mov b, [bp + 7] ; $i                     
2257   1414 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
2258   1418 2C 05 00      mov b, [bp + 5] ; $j             
2259   141B             ; START TERMS
2260   141B D7            push a
2261   141C 11            mov a, b
2262   141D 26 01 00      mov b, $1
2263   1420 FD 97         neg b
2264   1422 54            add a, b
2265   1423 27            mov b, a
2266   1424 E4            pop a
2267   1425             ; END TERMS        
2268   1425 5A            add d, b
2269   1426 E4            pop a
2270   1427 32            mov bl, [d]
2271   1428 A7 00         mov bh, 0
2272   142A             ; START RELATIONAL
2273   142A D7            push a
2274   142B 11            mov a, b
2275   142C 26 40 00      mov b, $40
2276   142F B0            cmp a, b
2277   1430 FD 71         seq ; ==
2278   1432 E4            pop a
2279   1433             ; END RELATIONAL
2280   1433 C0 00 00      cmp b, 0
2281   1436 C6 4A 14      je _if41_exit
2282   1439             _if41_true:
2283   1439             ;; count++; 
2284   1439 2C FF FF      mov b, [bp + -1] ; $count             
2285   143C FD 79         mov g, b
2286   143E FD 77         inc b
2287   1440 FA FF FF      lea d, [bp + -1] ; $count
2288   1443 FD 43         mov [d], b
2289   1445 FD 27         mov b, g
2290   1447 0A 4A 14      jmp _if41_exit
2291   144A             _if41_exit:
2292   144A             ;; if(currState[i][j+1] == '@') 			count++; 
2293   144A             _if42_cond:
2294   144A 3B 08 1A      mov d, _currState_data ; $currState
2295   144D D7            push a         
2296   144E 2C 07 00      mov b, [bp + 7] ; $i                     
2297   1451 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
2298   1455 2C 05 00      mov b, [bp + 5] ; $j             
2299   1458             ; START TERMS
2300   1458 D7            push a
2301   1459 11            mov a, b
2302   145A 26 01 00      mov b, $1
2303   145D 54            add a, b
2304   145E 27            mov b, a
2305   145F E4            pop a
2306   1460             ; END TERMS        
2307   1460 5A            add d, b
2308   1461 E4            pop a
2309   1462 32            mov bl, [d]
2310   1463 A7 00         mov bh, 0
2311   1465             ; START RELATIONAL
2312   1465 D7            push a
2313   1466 11            mov a, b
2314   1467 26 40 00      mov b, $40
2315   146A B0            cmp a, b
2316   146B FD 71         seq ; ==
2317   146D E4            pop a
2318   146E             ; END RELATIONAL
2319   146E C0 00 00      cmp b, 0
2320   1471 C6 85 14      je _if42_exit
2321   1474             _if42_true:
2322   1474             ;; count++; 
2323   1474 2C FF FF      mov b, [bp + -1] ; $count             
2324   1477 FD 79         mov g, b
2325   1479 FD 77         inc b
2326   147B FA FF FF      lea d, [bp + -1] ; $count
2327   147E FD 43         mov [d], b
2328   1480 FD 27         mov b, g
2329   1482 0A 85 14      jmp _if42_exit
2330   1485             _if42_exit:
2331   1485             ;; if(currState[i+1][j+-1] == '@') 	count++; 
2332   1485             _if43_cond:
2333   1485 3B 08 1A      mov d, _currState_data ; $currState
2334   1488 D7            push a         
2335   1489 2C 07 00      mov b, [bp + 7] ; $i             
2336   148C             ; START TERMS
2337   148C D7            push a
2338   148D 11            mov a, b
2339   148E 26 01 00      mov b, $1
2340   1491 54            add a, b
2341   1492 27            mov b, a
2342   1493 E4            pop a
2343   1494             ; END TERMS        
2344   1494 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
2345   1498 2C 05 00      mov b, [bp + 5] ; $j             
2346   149B             ; START TERMS
2347   149B D7            push a
2348   149C 11            mov a, b
2349   149D 26 01 00      mov b, $1
2350   14A0 FD 97         neg b
2351   14A2 54            add a, b
2352   14A3 27            mov b, a
2353   14A4 E4            pop a
2354   14A5             ; END TERMS        
2355   14A5 5A            add d, b
2356   14A6 E4            pop a
2357   14A7 32            mov bl, [d]
2358   14A8 A7 00         mov bh, 0
2359   14AA             ; START RELATIONAL
2360   14AA D7            push a
2361   14AB 11            mov a, b
2362   14AC 26 40 00      mov b, $40
2363   14AF B0            cmp a, b
2364   14B0 FD 71         seq ; ==
2365   14B2 E4            pop a
2366   14B3             ; END RELATIONAL
2367   14B3 C0 00 00      cmp b, 0
2368   14B6 C6 CA 14      je _if43_exit
2369   14B9             _if43_true:
2370   14B9             ;; count++; 
2371   14B9 2C FF FF      mov b, [bp + -1] ; $count             
2372   14BC FD 79         mov g, b
2373   14BE FD 77         inc b
2374   14C0 FA FF FF      lea d, [bp + -1] ; $count
2375   14C3 FD 43         mov [d], b
2376   14C5 FD 27         mov b, g
2377   14C7 0A CA 14      jmp _if43_exit
2378   14CA             _if43_exit:
2379   14CA             ;; if(currState[i+1][j] == '@') 			count++; 
2380   14CA             _if44_cond:
2381   14CA 3B 08 1A      mov d, _currState_data ; $currState
2382   14CD D7            push a         
2383   14CE 2C 07 00      mov b, [bp + 7] ; $i             
2384   14D1             ; START TERMS
2385   14D1 D7            push a
2386   14D2 11            mov a, b
2387   14D3 26 01 00      mov b, $1
2388   14D6 54            add a, b
2389   14D7 27            mov b, a
2390   14D8 E4            pop a
2391   14D9             ; END TERMS        
2392   14D9 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
2393   14DD 2C 05 00      mov b, [bp + 5] ; $j                     
2394   14E0 5A            add d, b
2395   14E1 E4            pop a
2396   14E2 32            mov bl, [d]
2397   14E3 A7 00         mov bh, 0
2398   14E5             ; START RELATIONAL
2399   14E5 D7            push a
2400   14E6 11            mov a, b
2401   14E7 26 40 00      mov b, $40
2402   14EA B0            cmp a, b
2403   14EB FD 71         seq ; ==
2404   14ED E4            pop a
2405   14EE             ; END RELATIONAL
2406   14EE C0 00 00      cmp b, 0
2407   14F1 C6 05 15      je _if44_exit
2408   14F4             _if44_true:
2409   14F4             ;; count++; 
2410   14F4 2C FF FF      mov b, [bp + -1] ; $count             
2411   14F7 FD 79         mov g, b
2412   14F9 FD 77         inc b
2413   14FB FA FF FF      lea d, [bp + -1] ; $count
2414   14FE FD 43         mov [d], b
2415   1500 FD 27         mov b, g
2416   1502 0A 05 15      jmp _if44_exit
2417   1505             _if44_exit:
2418   1505             ;; if(currState[i+1][j+1] == '@') 		count++; 
2419   1505             _if45_cond:
2420   1505 3B 08 1A      mov d, _currState_data ; $currState
2421   1508 D7            push a         
2422   1509 2C 07 00      mov b, [bp + 7] ; $i             
2423   150C             ; START TERMS
2424   150C D7            push a
2425   150D 11            mov a, b
2426   150E 26 01 00      mov b, $1
2427   1511 54            add a, b
2428   1512 27            mov b, a
2429   1513 E4            pop a
2430   1514             ; END TERMS        
2431   1514 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b         
2432   1518 2C 05 00      mov b, [bp + 5] ; $j             
2433   151B             ; START TERMS
2434   151B D7            push a
2435   151C 11            mov a, b
2436   151D 26 01 00      mov b, $1
2437   1520 54            add a, b
2438   1521 27            mov b, a
2439   1522 E4            pop a
2440   1523             ; END TERMS        
2441   1523 5A            add d, b
2442   1524 E4            pop a
2443   1525 32            mov bl, [d]
2444   1526 A7 00         mov bh, 0
2445   1528             ; START RELATIONAL
2446   1528 D7            push a
2447   1529 11            mov a, b
2448   152A 26 40 00      mov b, $40
2449   152D B0            cmp a, b
2450   152E FD 71         seq ; ==
2451   1530 E4            pop a
2452   1531             ; END RELATIONAL
2453   1531 C0 00 00      cmp b, 0
2454   1534 C6 48 15      je _if45_exit
2455   1537             _if45_true:
2456   1537             ;; count++; 
2457   1537 2C FF FF      mov b, [bp + -1] ; $count             
2458   153A FD 79         mov g, b
2459   153C FD 77         inc b
2460   153E FA FF FF      lea d, [bp + -1] ; $count
2461   1541 FD 43         mov [d], b
2462   1543 FD 27         mov b, g
2463   1545 0A 48 15      jmp _if45_exit
2464   1548             _if45_exit:
2465   1548             ;; return count; 
2466   1548 2C FF FF      mov b, [bp + -1] ; $count             
2467   154B F9            leave
2468   154C 09            ret
2469   154D             ; --- END TEXT BLOCK
2470   154D             
2471   154D             ; --- BEGIN DATA BLOCK
2472   154D             _clear_data: 
2473   154D 1B 5B 32 4A .db 27,$5b,$32,$4a,27,$5b,$48,0,
2473   1551 1B 5B 48 00 
2474   1555 00 00 00    .fill 3, 0
2475   1558 00 00 00 00 _nextState_data: .fill 1200, 0
2475   155C 00 00 00 00 
2475   1560 00 00 00 00 
2475   1564 00 00 00 00 
2475   1568 00 00 00 00 
2475   156C 00 00 00 00 
2475   1570 00 00 00 00 
2475   1574 00 00 00 00 
2475   1578 00 00 00 00 
2475   157C 00 00 00 00 
2475   1580 00 00 00 00 
2475   1584 00 00 00 00 
2475   1588 00 00 00 00 
2475   158C 00 00 00 00 
2475   1590 00 00 00 00 
2475   1594 00 00 00 00 
2475   1598 00 00 00 00 
2475   159C 00 00 00 00 
2475   15A0 00 00 00 00 
2475   15A4 00 00 00 00 
2475   15A8 00 00 00 00 
2475   15AC 00 00 00 00 
2475   15B0 00 00 00 00 
2475   15B4 00 00 00 00 
2475   15B8 00 00 00 00 
2475   15BC 00 00 00 00 
2475   15C0 00 00 00 00 
2475   15C4 00 00 00 00 
2475   15C8 00 00 00 00 
2475   15CC 00 00 00 00 
2475   15D0 00 00 00 00 
2475   15D4 00 00 00 00 
2475   15D8 00 00 00 00 
2475   15DC 00 00 00 00 
2475   15E0 00 00 00 00 
2475   15E4 00 00 00 00 
2475   15E8 00 00 00 00 
2475   15EC 00 00 00 00 
2475   15F0 00 00 00 00 
2475   15F4 00 00 00 00 
2475   15F8 00 00 00 00 
2475   15FC 00 00 00 00 
2475   1600 00 00 00 00 
2475   1604 00 00 00 00 
2475   1608 00 00 00 00 
2475   160C 00 00 00 00 
2475   1610 00 00 00 00 
2475   1614 00 00 00 00 
2475   1618 00 00 00 00 
2475   161C 00 00 00 00 
2475   1620 00 00 00 00 
2475   1624 00 00 00 00 
2475   1628 00 00 00 00 
2475   162C 00 00 00 00 
2475   1630 00 00 00 00 
2475   1634 00 00 00 00 
2475   1638 00 00 00 00 
2475   163C 00 00 00 00 
2475   1640 00 00 00 00 
2475   1644 00 00 00 00 
2475   1648 00 00 00 00 
2475   164C 00 00 00 00 
2475   1650 00 00 00 00 
2475   1654 00 00 00 00 
2475   1658 00 00 00 00 
2475   165C 00 00 00 00 
2475   1660 00 00 00 00 
2475   1664 00 00 00 00 
2475   1668 00 00 00 00 
2475   166C 00 00 00 00 
2475   1670 00 00 00 00 
2475   1674 00 00 00 00 
2475   1678 00 00 00 00 
2475   167C 00 00 00 00 
2475   1680 00 00 00 00 
2475   1684 00 00 00 00 
2475   1688 00 00 00 00 
2475   168C 00 00 00 00 
2475   1690 00 00 00 00 
2475   1694 00 00 00 00 
2475   1698 00 00 00 00 
2475   169C 00 00 00 00 
2475   16A0 00 00 00 00 
2475   16A4 00 00 00 00 
2475   16A8 00 00 00 00 
2475   16AC 00 00 00 00 
2475   16B0 00 00 00 00 
2475   16B4 00 00 00 00 
2475   16B8 00 00 00 00 
2475   16BC 00 00 00 00 
2475   16C0 00 00 00 00 
2475   16C4 00 00 00 00 
2475   16C8 00 00 00 00 
2475   16CC 00 00 00 00 
2475   16D0 00 00 00 00 
2475   16D4 00 00 00 00 
2475   16D8 00 00 00 00 
2475   16DC 00 00 00 00 
2475   16E0 00 00 00 00 
2475   16E4 00 00 00 00 
2475   16E8 00 00 00 00 
2475   16EC 00 00 00 00 
2475   16F0 00 00 00 00 
2475   16F4 00 00 00 00 
2475   16F8 00 00 00 00 
2475   16FC 00 00 00 00 
2475   1700 00 00 00 00 
2475   1704 00 00 00 00 
2475   1708 00 00 00 00 
2475   170C 00 00 00 00 
2475   1710 00 00 00 00 
2475   1714 00 00 00 00 
2475   1718 00 00 00 00 
2475   171C 00 00 00 00 
2475   1720 00 00 00 00 
2475   1724 00 00 00 00 
2475   1728 00 00 00 00 
2475   172C 00 00 00 00 
2475   1730 00 00 00 00 
2475   1734 00 00 00 00 
2475   1738 00 00 00 00 
2475   173C 00 00 00 00 
2475   1740 00 00 00 00 
2475   1744 00 00 00 00 
2475   1748 00 00 00 00 
2475   174C 00 00 00 00 
2475   1750 00 00 00 00 
2475   1754 00 00 00 00 
2475   1758 00 00 00 00 
2475   175C 00 00 00 00 
2475   1760 00 00 00 00 
2475   1764 00 00 00 00 
2475   1768 00 00 00 00 
2475   176C 00 00 00 00 
2475   1770 00 00 00 00 
2475   1774 00 00 00 00 
2475   1778 00 00 00 00 
2475   177C 00 00 00 00 
2475   1780 00 00 00 00 
2475   1784 00 00 00 00 
2475   1788 00 00 00 00 
2475   178C 00 00 00 00 
2475   1790 00 00 00 00 
2475   1794 00 00 00 00 
2475   1798 00 00 00 00 
2475   179C 00 00 00 00 
2475   17A0 00 00 00 00 
2475   17A4 00 00 00 00 
2475   17A8 00 00 00 00 
2475   17AC 00 00 00 00 
2475   17B0 00 00 00 00 
2475   17B4 00 00 00 00 
2475   17B8 00 00 00 00 
2475   17BC 00 00 00 00 
2475   17C0 00 00 00 00 
2475   17C4 00 00 00 00 
2475   17C8 00 00 00 00 
2475   17CC 00 00 00 00 
2475   17D0 00 00 00 00 
2475   17D4 00 00 00 00 
2475   17D8 00 00 00 00 
2475   17DC 00 00 00 00 
2475   17E0 00 00 00 00 
2475   17E4 00 00 00 00 
2475   17E8 00 00 00 00 
2475   17EC 00 00 00 00 
2475   17F0 00 00 00 00 
2475   17F4 00 00 00 00 
2475   17F8 00 00 00 00 
2475   17FC 00 00 00 00 
2475   1800 00 00 00 00 
2475   1804 00 00 00 00 
2475   1808 00 00 00 00 
2475   180C 00 00 00 00 
2475   1810 00 00 00 00 
2475   1814 00 00 00 00 
2475   1818 00 00 00 00 
2475   181C 00 00 00 00 
2475   1820 00 00 00 00 
2475   1824 00 00 00 00 
2475   1828 00 00 00 00 
2475   182C 00 00 00 00 
2475   1830 00 00 00 00 
2475   1834 00 00 00 00 
2475   1838 00 00 00 00 
2475   183C 00 00 00 00 
2475   1840 00 00 00 00 
2475   1844 00 00 00 00 
2475   1848 00 00 00 00 
2475   184C 00 00 00 00 
2475   1850 00 00 00 00 
2475   1854 00 00 00 00 
2475   1858 00 00 00 00 
2475   185C 00 00 00 00 
2475   1860 00 00 00 00 
2475   1864 00 00 00 00 
2475   1868 00 00 00 00 
2475   186C 00 00 00 00 
2475   1870 00 00 00 00 
2475   1874 00 00 00 00 
2475   1878 00 00 00 00 
2475   187C 00 00 00 00 
2475   1880 00 00 00 00 
2475   1884 00 00 00 00 
2475   1888 00 00 00 00 
2475   188C 00 00 00 00 
2475   1890 00 00 00 00 
2475   1894 00 00 00 00 
2475   1898 00 00 00 00 
2475   189C 00 00 00 00 
2475   18A0 00 00 00 00 
2475   18A4 00 00 00 00 
2475   18A8 00 00 00 00 
2475   18AC 00 00 00 00 
2475   18B0 00 00 00 00 
2475   18B4 00 00 00 00 
2475   18B8 00 00 00 00 
2475   18BC 00 00 00 00 
2475   18C0 00 00 00 00 
2475   18C4 00 00 00 00 
2475   18C8 00 00 00 00 
2475   18CC 00 00 00 00 
2475   18D0 00 00 00 00 
2475   18D4 00 00 00 00 
2475   18D8 00 00 00 00 
2475   18DC 00 00 00 00 
2475   18E0 00 00 00 00 
2475   18E4 00 00 00 00 
2475   18E8 00 00 00 00 
2475   18EC 00 00 00 00 
2475   18F0 00 00 00 00 
2475   18F4 00 00 00 00 
2475   18F8 00 00 00 00 
2475   18FC 00 00 00 00 
2475   1900 00 00 00 00 
2475   1904 00 00 00 00 
2475   1908 00 00 00 00 
2475   190C 00 00 00 00 
2475   1910 00 00 00 00 
2475   1914 00 00 00 00 
2475   1918 00 00 00 00 
2475   191C 00 00 00 00 
2475   1920 00 00 00 00 
2475   1924 00 00 00 00 
2475   1928 00 00 00 00 
2475   192C 00 00 00 00 
2475   1930 00 00 00 00 
2475   1934 00 00 00 00 
2475   1938 00 00 00 00 
2475   193C 00 00 00 00 
2475   1940 00 00 00 00 
2475   1944 00 00 00 00 
2475   1948 00 00 00 00 
2475   194C 00 00 00 00 
2475   1950 00 00 00 00 
2475   1954 00 00 00 00 
2475   1958 00 00 00 00 
2475   195C 00 00 00 00 
2475   1960 00 00 00 00 
2475   1964 00 00 00 00 
2475   1968 00 00 00 00 
2475   196C 00 00 00 00 
2475   1970 00 00 00 00 
2475   1974 00 00 00 00 
2475   1978 00 00 00 00 
2475   197C 00 00 00 00 
2475   1980 00 00 00 00 
2475   1984 00 00 00 00 
2475   1988 00 00 00 00 
2475   198C 00 00 00 00 
2475   1990 00 00 00 00 
2475   1994 00 00 00 00 
2475   1998 00 00 00 00 
2475   199C 00 00 00 00 
2475   19A0 00 00 00 00 
2475   19A4 00 00 00 00 
2475   19A8 00 00 00 00 
2475   19AC 00 00 00 00 
2475   19B0 00 00 00 00 
2475   19B4 00 00 00 00 
2475   19B8 00 00 00 00 
2475   19BC 00 00 00 00 
2475   19C0 00 00 00 00 
2475   19C4 00 00 00 00 
2475   19C8 00 00 00 00 
2475   19CC 00 00 00 00 
2475   19D0 00 00 00 00 
2475   19D4 00 00 00 00 
2475   19D8 00 00 00 00 
2475   19DC 00 00 00 00 
2475   19E0 00 00 00 00 
2475   19E4 00 00 00 00 
2475   19E8 00 00 00 00 
2475   19EC 00 00 00 00 
2475   19F0 00 00 00 00 
2475   19F4 00 00 00 00 
2475   19F8 00 00 00 00 
2475   19FC 00 00 00 00 
2475   1A00 00 00 00 00 
2475   1A04 00 00 00 00 
2476   1A08             _currState_data: 
2477   1A08 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2477   1A0C 20 20 20 20 
2477   1A10 20 20 20 20 
2477   1A14 20 20 20 20 
2477   1A18 20 20 20 20 
2477   1A1C 20 20 20 20 
2477   1A20 20 20 20 20 
2477   1A24 20 20 
2478   1A26 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2478   1A2A 20 20 20 20 
2478   1A2E 20 20 20 20 
2478   1A32 20 20 20 20 
2478   1A36 20 20 20 20 
2478   1A3A 20 20 20 20 
2478   1A3E 20 20 20 20 
2478   1A42 20 20 
2479   1A44 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2479   1A48 20 20 20 20 
2479   1A4C 20 20 20 20 
2479   1A50 20 20 20 20 
2479   1A54 20 20 20 20 
2479   1A58 20 20 20 20 
2479   1A5C 20 20 20 20 
2479   1A60 20 20 
2480   1A62 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2480   1A66 20 20 20 20 
2480   1A6A 20 20 20 20 
2480   1A6E 20 20 20 20 
2480   1A72 20 20 20 20 
2480   1A76 20 20 20 20 
2480   1A7A 20 20 20 20 
2480   1A7E 20 20 
2481   1A80 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2481   1A84 20 20 20 20 
2481   1A88 20 20 20 20 
2481   1A8C 20 20 20 20 
2481   1A90 20 20 20 20 
2481   1A94 20 20 20 20 
2481   1A98 20 20 20 40 
2481   1A9C 20 20 
2482   1A9E 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2482   1AA2 20 20 20 20 
2482   1AA6 20 20 20 20 
2482   1AAA 20 20 20 20 
2482   1AAE 20 20 20 20 
2482   1AB2 20 20 20 20 
2482   1AB6 20 20 20 20 
2482   1ABA 20 20 
2483   1ABC 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2483   1AC0 20 40 20 40 
2483   1AC4 20 20 20 20 
2483   1AC8 20 20 20 20 
2483   1ACC 20 20 20 20 
2483   1AD0 20 20 20 20 
2483   1AD4 20 20 20 20 
2483   1AD8 20 20 
2484   1ADA 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
2484   1ADE 20 40 40 20 
2484   1AE2 20 20 20 20 
2484   1AE6 20 40 40 20 
2484   1AEA 20 20 20 20 
2484   1AEE 20 20 20 20 
2484   1AF2 20 20 20 40 
2484   1AF6 40 20 
2485   1AF8 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2485   1AFC 20 20 20 20 
2485   1B00 20 20 20 20 
2485   1B04 20 20 40 20 
2485   1B08 20 20 40 20 
2485   1B0C 20 20 20 40 
2485   1B10 40 20 20 20 
2485   1B14 20 20 
2486   1B16 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
2486   1B1A 20 20 20 40 
2486   1B1E 40 20 20 20 
2486   1B22 20 40 40 20 
2486   1B26 20 20 20 20 
2486   1B2A 20 20 20 40 
2486   1B2E 20 20 20 20 
2486   1B32 20 40 
2487   1B34 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2487   1B38 40 20 20 20 
2487   1B3C 20 20 20 20 
2487   1B40 20 20 20 20 
2487   1B44 20 20 20 20 
2487   1B48 20 20 20 40 
2487   1B4C 40 20 20 20 
2487   1B50 20 20 
2488   1B52 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2488   1B56 20 20 20 40 
2488   1B5A 20 40 40 20 
2488   1B5E 20 20 20 40 
2488   1B62 20 40 20 20 
2488   1B66 20 20 20 20 
2488   1B6A 20 20 20 20 
2488   1B6E 20 20 
2489   1B70 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2489   1B74 20 20 20 20 
2489   1B78 20 20 20 20 
2489   1B7C 20 40 20 20 
2489   1B80 20 20 20 40 
2489   1B84 20 20 20 20 
2489   1B88 20 20 20 40 
2489   1B8C 20 20 
2490   1B8E 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
2490   1B92 20 20 20 20 
2490   1B96 20 20 20 20 
2490   1B9A 20 20 20 20 
2490   1B9E 20 20 20 20 
2490   1BA2 20 20 20 20 
2490   1BA6 40 20 20 20 
2490   1BAA 40 20 
2491   1BAC 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2491   1BB0 20 20 20 20 
2491   1BB4 20 20 20 20 
2491   1BB8 20 20 20 20 
2491   1BBC 20 20 20 20 
2491   1BC0 20 20 20 20 
2491   1BC4 20 20 20 20 
2491   1BC8 20 20 
2492   1BCA 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2492   1BCE 20 40 40 20 
2492   1BD2 20 20 20 20 
2492   1BD6 20 20 20 20 
2492   1BDA 20 20 20 20 
2492   1BDE 20 20 20 20 
2492   1BE2 20 20 20 20 
2492   1BE6 20 20 
2493   1BE8 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2493   1BEC 20 20 20 20 
2493   1BF0 20 20 20 20 
2493   1BF4 20 20 20 20 
2493   1BF8 20 20 20 20 
2493   1BFC 20 20 20 20 
2493   1C00 20 20 20 20 
2493   1C04 20 20 
2494   1C06 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2494   1C0A 20 20 20 20 
2494   1C0E 20 20 20 20 
2494   1C12 20 20 20 20 
2494   1C16 20 20 20 20 
2494   1C1A 20 20 20 20 
2494   1C1E 20 20 20 20 
2494   1C22 20 20 
2495   1C24 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2495   1C28 20 20 20 20 
2495   1C2C 20 20 20 20 
2495   1C30 20 20 20 20 
2495   1C34 20 20 20 20 
2495   1C38 20 20 20 20 
2495   1C3C 20 20 20 20 
2495   1C40 20 20 
2496   1C42 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2496   1C46 20 20 20 20 
2496   1C4A 20 20 20 20 
2496   1C4E 20 20 20 20 
2496   1C52 20 20 20 20 
2496   1C56 20 20 20 20 
2496   1C5A 20 20 20 20 
2496   1C5E 20 20 
2497   1C60 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2497   1C64 20 20 20 20 
2497   1C68 20 20 20 20 
2497   1C6C 20 20 20 20 
2497   1C70 20 20 20 20 
2497   1C74 20 20 20 20 
2497   1C78 20 20 20 20 
2497   1C7C 20 20 
2498   1C7E 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2498   1C82 20 20 20 20 
2498   1C86 20 20 20 20 
2498   1C8A 20 20 20 20 
2498   1C8E 20 20 20 20 
2498   1C92 20 20 20 20 
2498   1C96 20 20 20 20 
2498   1C9A 20 20 
2499   1C9C 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2499   1CA0 20 20 20 20 
2499   1CA4 20 20 20 20 
2499   1CA8 20 20 20 20 
2499   1CAC 20 20 20 20 
2499   1CB0 20 20 20 20 
2499   1CB4 20 20 20 20 
2499   1CB8 20 20 
2500   1CBA 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2500   1CBE 20 20 20 20 
2500   1CC2 20 20 20 20 
2500   1CC6 20 20 20 20 
2500   1CCA 20 20 20 20 
2500   1CCE 20 20 20 20 
2500   1CD2 20 20 20 20 
2500   1CD6 20 20 
2501   1CD8 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2501   1CDC 20 20 20 20 
2501   1CE0 20 20 20 20 
2501   1CE4 20 20 20 20 
2501   1CE8 20 20 20 20 
2501   1CEC 20 20 20 20 
2501   1CF0 20 20 20 20 
2501   1CF4 20 20 
2502   1CF6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2502   1CFA 20 20 20 20 
2502   1CFE 20 20 20 20 
2502   1D02 20 20 20 20 
2502   1D06 20 20 20 20 
2502   1D0A 20 20 20 20 
2502   1D0E 20 20 20 20 
2502   1D12 20 20 
2503   1D14 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2503   1D18 20 20 20 20 
2503   1D1C 20 20 20 20 
2503   1D20 20 20 20 20 
2503   1D24 20 20 20 20 
2504   1D28 00 00 00 00 .fill 400, 0
2504   1D2C 00 00 00 00 
2504   1D30 00 00 00 00 
2504   1D34 00 00 00 00 
2504   1D38 00 00 00 00 
2504   1D3C 00 00 00 00 
2504   1D40 00 00 00 00 
2504   1D44 00 00 00 00 
2504   1D48 00 00 00 00 
2504   1D4C 00 00 00 00 
2504   1D50 00 00 00 00 
2504   1D54 00 00 00 00 
2504   1D58 00 00 00 00 
2504   1D5C 00 00 00 00 
2504   1D60 00 00 00 00 
2504   1D64 00 00 00 00 
2504   1D68 00 00 00 00 
2504   1D6C 00 00 00 00 
2504   1D70 00 00 00 00 
2504   1D74 00 00 00 00 
2504   1D78 00 00 00 00 
2504   1D7C 00 00 00 00 
2504   1D80 00 00 00 00 
2504   1D84 00 00 00 00 
2504   1D88 00 00 00 00 
2504   1D8C 00 00 00 00 
2504   1D90 00 00 00 00 
2504   1D94 00 00 00 00 
2504   1D98 00 00 00 00 
2504   1D9C 00 00 00 00 
2504   1DA0 00 00 00 00 
2504   1DA4 00 00 00 00 
2504   1DA8 00 00 00 00 
2504   1DAC 00 00 00 00 
2504   1DB0 00 00 00 00 
2504   1DB4 00 00 00 00 
2504   1DB8 00 00 00 00 
2504   1DBC 00 00 00 00 
2504   1DC0 00 00 00 00 
2504   1DC4 00 00 00 00 
2504   1DC8 00 00 00 00 
2504   1DCC 00 00 00 00 
2504   1DD0 00 00 00 00 
2504   1DD4 00 00 00 00 
2504   1DD8 00 00 00 00 
2504   1DDC 00 00 00 00 
2504   1DE0 00 00 00 00 
2504   1DE4 00 00 00 00 
2504   1DE8 00 00 00 00 
2504   1DEC 00 00 00 00 
2504   1DF0 00 00 00 00 
2504   1DF4 00 00 00 00 
2504   1DF8 00 00 00 00 
2504   1DFC 00 00 00 00 
2504   1E00 00 00 00 00 
2504   1E04 00 00 00 00 
2504   1E08 00 00 00 00 
2504   1E0C 00 00 00 00 
2504   1E10 00 00 00 00 
2504   1E14 00 00 00 00 
2504   1E18 00 00 00 00 
2504   1E1C 00 00 00 00 
2504   1E20 00 00 00 00 
2504   1E24 00 00 00 00 
2504   1E28 00 00 00 00 
2504   1E2C 00 00 00 00 
2504   1E30 00 00 00 00 
2504   1E34 00 00 00 00 
2504   1E38 00 00 00 00 
2504   1E3C 00 00 00 00 
2504   1E40 00 00 00 00 
2504   1E44 00 00 00 00 
2504   1E48 00 00 00 00 
2504   1E4C 00 00 00 00 
2504   1E50 00 00 00 00 
2504   1E54 00 00 00 00 
2504   1E58 00 00 00 00 
2504   1E5C 00 00 00 00 
2504   1E60 00 00 00 00 
2504   1E64 00 00 00 00 
2504   1E68 00 00 00 00 
2504   1E6C 00 00 00 00 
2504   1E70 00 00 00 00 
2504   1E74 00 00 00 00 
2504   1E78 00 00 00 00 
2504   1E7C 00 00 00 00 
2504   1E80 00 00 00 00 
2504   1E84 00 00 00 00 
2504   1E88 00 00 00 00 
2504   1E8C 00 00 00 00 
2504   1E90 00 00 00 00 
2504   1E94 00 00 00 00 
2504   1E98 00 00 00 00 
2504   1E9C 00 00 00 00 
2504   1EA0 00 00 00 00 
2504   1EA4 00 00 00 00 
2504   1EA8 00 00 00 00 
2504   1EAC 00 00 00 00 
2504   1EB0 00 00 00 00 
2504   1EB4 00 00 00 00 
2505   1EB8 55 6E 6B 6E __s0: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
2505   1EBC 6F 77 6E 20 
2505   1EC0 74 79 70 65 
2505   1EC4 20 73 69 7A 
2505   1EC8 65 20 69 6E 
2505   1ECC 20 76 61 5F 
2505   1ED0 61 72 67 28 
2505   1ED4 29 20 63 61 
2505   1ED8 6C 6C 2E 20 
2505   1EDC 53 69 7A 65 
2505   1EE0 20 6E 65 65 
2505   1EE4 64 73 20 74 
2505   1EE8 6F 20 62 65 
2505   1EEC 20 65 69 74 
2505   1EF0 68 65 72 20 
2505   1EF4 31 20 6F 72 
2505   1EF8 20 32 2E 00 
2506   1EFC 45 72 72 6F __s1: .db "Error: Unknown argument type.\n", 0
2506   1F00 72 3A 20 55 
2506   1F04 6E 6B 6E 6F 
2506   1F08 77 6E 20 61 
2506   1F0C 72 67 75 6D 
2506   1F10 65 6E 74 20 
2506   1F14 74 79 70 65 
2506   1F18 2E 0A 00 
2507   1F1B 40 20 00    __s2: .db "@ ", 0
2508   1F1E 2E 20 00    __s3: .db ". ", 0
2509   1F21             
2510   1F21 23 1F       _heap_top: .dw _heap
2511   1F23 00          _heap: .db 0
2512   1F24             ; --- END DATA BLOCK
2513   1F24             
2514   1F24             .end
tasm: Number of errors = 0
