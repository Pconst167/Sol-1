0001   0000             ; --- FILENAME: programs/life.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             sys_break        .EQU  $0000
0002+  0000             sys_rtc          .EQU  $0001
0003+  0000             sys_ide          .EQU  $0002
0004+  0000             sys_io           .EQU  $0003
0005+  0000             sys_filesystem   .EQU  $0004
0006+  0000             sys_create_proc  .EQU  $0005
0007+  0000             sys_list_proc    .EQU  $0006
0008+  0000             sys_datetime     .EQU  $0007
0009+  0000             sys_reboot       .EQU  $0008
0010+  0000             sys_pause_proc   .EQU  $0009
0011+  0000             sys_resume_proc  .EQU  $000a
0012+  0000             sys_terminate_proc .EQU  $000b
0013+  0000             sys_system       .EQU  $000c
0014+  0000             sys_fdc          .EQU  $000d
0015+  0000             text_org         .EQU  $0400
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0000             
0005   0000             ; --- BEGIN TEXT SEGMENT
0006   0400             .org text_org
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int i, j; 
0011   0408 52 02 00      sub sp, 2
0012   040B 52 02 00      sub sp, 2
0013   040E             ; int n; 
0014   040E 52 02 00      sub sp, 2
0015   0411             ; for(i = 0; i <  30      ; i++){ 
0016   0411             _for1_init:
0017   0411 FA FF FF      lea d, [bp + -1] ; $i
0018   0414 DA            push d
0019   0415 FD 2E 00 00   mov32 cb, $00000000
0019   0419 00 00 
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             _for1_cond:
0023   041E FA FF FF      lea d, [bp + -1] ; $i
0024   0421 2A            mov b, [d]
0025   0422 38 00 00      mov c, 0
0026   0425             ; --- START RELATIONAL
0027   0425 D7            push a
0028   0426 11            mov a, b
0029   0427 FD 2E 1E 00   mov32 cb, $0000001e
0029   042B 00 00 
0030   042D B0            cmp a, b
0031   042E FD 73         slt ; < (signed)
0032   0430 E4            pop a
0033   0431             ; --- END RELATIONAL
0034   0431 C0 00 00      cmp b, 0
0035   0434 C6 C5 04      je _for1_exit
0036   0437             _for1_block:
0037   0437             ; for(j = 0; j <   40     ; j++){ 
0038   0437             _for2_init:
0039   0437 FA FD FF      lea d, [bp + -3] ; $j
0040   043A DA            push d
0041   043B FD 2E 00 00   mov32 cb, $00000000
0041   043F 00 00 
0042   0441 E7            pop d
0043   0442 FD 43         mov [d], b
0044   0444             _for2_cond:
0045   0444 FA FD FF      lea d, [bp + -3] ; $j
0046   0447 2A            mov b, [d]
0047   0448 38 00 00      mov c, 0
0048   044B             ; --- START RELATIONAL
0049   044B D7            push a
0050   044C 11            mov a, b
0051   044D FD 2E 28 00   mov32 cb, $00000028
0051   0451 00 00 
0052   0453 B0            cmp a, b
0053   0454 FD 73         slt ; < (signed)
0054   0456 E4            pop a
0055   0457             ; --- END RELATIONAL
0056   0457 C0 00 00      cmp b, 0
0057   045A C6 B2 04      je _for2_exit
0058   045D             _for2_block:
0059   045D             ; nextState[i][j] = currState[i][j]; 
0060   045D 3B 21 14      mov d, _nextState_data ; $nextState
0061   0460 D7            push a
0062   0461 DA            push d
0063   0462 FA FF FF      lea d, [bp + -1] ; $i
0064   0465 2A            mov b, [d]
0065   0466 38 00 00      mov c, 0
0066   0469 E7            pop d
0067   046A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0068   046E DA            push d
0069   046F FA FD FF      lea d, [bp + -3] ; $j
0070   0472 2A            mov b, [d]
0071   0473 38 00 00      mov c, 0
0072   0476 E7            pop d
0073   0477 5A            add d, b
0074   0478 E4            pop a
0075   0479 DA            push d
0076   047A 3B D1 18      mov d, _currState_data ; $currState
0077   047D D7            push a
0078   047E DA            push d
0079   047F FA FF FF      lea d, [bp + -1] ; $i
0080   0482 2A            mov b, [d]
0081   0483 38 00 00      mov c, 0
0082   0486 E7            pop d
0083   0487 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0084   048B DA            push d
0085   048C FA FD FF      lea d, [bp + -3] ; $j
0086   048F 2A            mov b, [d]
0087   0490 38 00 00      mov c, 0
0088   0493 E7            pop d
0089   0494 5A            add d, b
0090   0495 E4            pop a
0091   0496 32            mov bl, [d]
0092   0497 A7 00         mov bh, 0
0093   0499 38 00 00      mov c, 0
0094   049C E7            pop d
0095   049D FD 3E         mov [d], bl
0096   049F             _for2_update:
0097   049F FA FD FF      lea d, [bp + -3] ; $j
0098   04A2 2A            mov b, [d]
0099   04A3 38 00 00      mov c, 0
0100   04A6 11            mov a, b
0101   04A7 FD 77         inc b
0102   04A9 FA FD FF      lea d, [bp + -3] ; $j
0103   04AC FD 43         mov [d], b
0104   04AE 27            mov b, a
0105   04AF 0A 44 04      jmp _for2_cond
0106   04B2             _for2_exit:
0107   04B2             _for1_update:
0108   04B2 FA FF FF      lea d, [bp + -1] ; $i
0109   04B5 2A            mov b, [d]
0110   04B6 38 00 00      mov c, 0
0111   04B9 11            mov a, b
0112   04BA FD 77         inc b
0113   04BC FA FF FF      lea d, [bp + -1] ; $i
0114   04BF FD 43         mov [d], b
0115   04C1 27            mov b, a
0116   04C2 0A 1E 04      jmp _for1_cond
0117   04C5             _for1_exit:
0118   04C5             ; for(;;){ 
0119   04C5             _for3_init:
0120   04C5             _for3_cond:
0121   04C5             _for3_block:
0122   04C5             ; for(i = 1; i <  30      +-1; i++){ 
0123   04C5             _for4_init:
0124   04C5 FA FF FF      lea d, [bp + -1] ; $i
0125   04C8 DA            push d
0126   04C9 FD 2E 01 00   mov32 cb, $00000001
0126   04CD 00 00 
0127   04CF E7            pop d
0128   04D0 FD 43         mov [d], b
0129   04D2             _for4_cond:
0130   04D2 FA FF FF      lea d, [bp + -1] ; $i
0131   04D5 2A            mov b, [d]
0132   04D6 38 00 00      mov c, 0
0133   04D9             ; --- START RELATIONAL
0134   04D9 D7            push a
0135   04DA 11            mov a, b
0136   04DB FD 2E 1E 00   mov32 cb, $0000001e
0136   04DF 00 00 
0137   04E1             ; --- START TERMS
0138   04E1 D7            push a
0139   04E2 11            mov a, b
0140   04E3 FD 2E FF FF   mov32 cb, $ffffffff
0140   04E7 FF FF 
0141   04E9 56            add b, a
0142   04EA E4            pop a
0143   04EB             ; --- END TERMS
0144   04EB B0            cmp a, b
0145   04EC FD 73         slt ; < (signed)
0146   04EE E4            pop a
0147   04EF             ; --- END RELATIONAL
0148   04EF C0 00 00      cmp b, 0
0149   04F2 C6 08 06      je _for4_exit
0150   04F5             _for4_block:
0151   04F5             ; for(j = 1; j <   40     +-1; j++){ 
0152   04F5             _for5_init:
0153   04F5 FA FD FF      lea d, [bp + -3] ; $j
0154   04F8 DA            push d
0155   04F9 FD 2E 01 00   mov32 cb, $00000001
0155   04FD 00 00 
0156   04FF E7            pop d
0157   0500 FD 43         mov [d], b
0158   0502             _for5_cond:
0159   0502 FA FD FF      lea d, [bp + -3] ; $j
0160   0505 2A            mov b, [d]
0161   0506 38 00 00      mov c, 0
0162   0509             ; --- START RELATIONAL
0163   0509 D7            push a
0164   050A 11            mov a, b
0165   050B FD 2E 28 00   mov32 cb, $00000028
0165   050F 00 00 
0166   0511             ; --- START TERMS
0167   0511 D7            push a
0168   0512 11            mov a, b
0169   0513 FD 2E FF FF   mov32 cb, $ffffffff
0169   0517 FF FF 
0170   0519 56            add b, a
0171   051A E4            pop a
0172   051B             ; --- END TERMS
0173   051B B0            cmp a, b
0174   051C FD 73         slt ; < (signed)
0175   051E E4            pop a
0176   051F             ; --- END RELATIONAL
0177   051F C0 00 00      cmp b, 0
0178   0522 C6 F5 05      je _for5_exit
0179   0525             _for5_block:
0180   0525             ; n = neighbours(i, j); 
0181   0525 FA FB FF      lea d, [bp + -5] ; $n
0182   0528 DA            push d
0183   0529             ; --- START FUNCTION CALL
0184   0529 FA FD FF      lea d, [bp + -3] ; $j
0185   052C 2A            mov b, [d]
0186   052D 38 00 00      mov c, 0
0187   0530 FD AB         swp b
0188   0532 D8            push b
0189   0533 FA FF FF      lea d, [bp + -1] ; $i
0190   0536 2A            mov b, [d]
0191   0537 38 00 00      mov c, 0
0192   053A FD AB         swp b
0193   053C D8            push b
0194   053D 07 18 08      call neighbours
0195   0540 51 04 00      add sp, 4
0196   0543             ; --- END FUNCTION CALL
0197   0543 E7            pop d
0198   0544 FD 43         mov [d], b
0199   0546             ; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0200   0546             _if6_cond:
0201   0546 FA FB FF      lea d, [bp + -5] ; $n
0202   0549 2A            mov b, [d]
0203   054A 38 00 00      mov c, 0
0204   054D             ; --- START RELATIONAL
0205   054D D7            push a
0206   054E 11            mov a, b
0207   054F FD 2E 02 00   mov32 cb, $00000002
0207   0553 00 00 
0208   0555 B0            cmp a, b
0209   0556 FD 73         slt ; < (signed)
0210   0558 E4            pop a
0211   0559             ; --- END RELATIONAL
0212   0559             ; --- START LOGICAL OR
0213   0559 D7            push a
0214   055A 11            mov a, b
0215   055B FA FB FF      lea d, [bp + -5] ; $n
0216   055E 2A            mov b, [d]
0217   055F 38 00 00      mov c, 0
0218   0562             ; --- START RELATIONAL
0219   0562 D7            push a
0220   0563 11            mov a, b
0221   0564 FD 2E 03 00   mov32 cb, $00000003
0221   0568 00 00 
0222   056A B0            cmp a, b
0223   056B FD 7F         sgt ; >
0224   056D E4            pop a
0225   056E             ; --- END RELATIONAL
0226   056E FD A8         sor a, b ; ||
0227   0570 E4            pop a
0228   0571             ; --- END LOGICAL OR
0229   0571 C0 00 00      cmp b, 0
0230   0574 C6 A0 05      je _if6_else
0231   0577             _if6_TRUE:
0232   0577             ; nextState[i][j] = ' '; 
0233   0577 3B 21 14      mov d, _nextState_data ; $nextState
0234   057A D7            push a
0235   057B DA            push d
0236   057C FA FF FF      lea d, [bp + -1] ; $i
0237   057F 2A            mov b, [d]
0238   0580 38 00 00      mov c, 0
0239   0583 E7            pop d
0240   0584 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0241   0588 DA            push d
0242   0589 FA FD FF      lea d, [bp + -3] ; $j
0243   058C 2A            mov b, [d]
0244   058D 38 00 00      mov c, 0
0245   0590 E7            pop d
0246   0591 5A            add d, b
0247   0592 E4            pop a
0248   0593 DA            push d
0249   0594 FD 2E 20 00   mov32 cb, $00000020
0249   0598 00 00 
0250   059A E7            pop d
0251   059B FD 3E         mov [d], bl
0252   059D 0A E2 05      jmp _if6_exit
0253   05A0             _if6_else:
0254   05A0             ; if(n == 3) nextState[i][j] = '@'; 
0255   05A0             _if7_cond:
0256   05A0 FA FB FF      lea d, [bp + -5] ; $n
0257   05A3 2A            mov b, [d]
0258   05A4 38 00 00      mov c, 0
0259   05A7             ; --- START RELATIONAL
0260   05A7 D7            push a
0261   05A8 11            mov a, b
0262   05A9 FD 2E 03 00   mov32 cb, $00000003
0262   05AD 00 00 
0263   05AF B0            cmp a, b
0264   05B0 FD 71         seq ; ==
0265   05B2 E4            pop a
0266   05B3             ; --- END RELATIONAL
0267   05B3 C0 00 00      cmp b, 0
0268   05B6 C6 E2 05      je _if7_exit
0269   05B9             _if7_TRUE:
0270   05B9             ; nextState[i][j] = '@'; 
0271   05B9 3B 21 14      mov d, _nextState_data ; $nextState
0272   05BC D7            push a
0273   05BD DA            push d
0274   05BE FA FF FF      lea d, [bp + -1] ; $i
0275   05C1 2A            mov b, [d]
0276   05C2 38 00 00      mov c, 0
0277   05C5 E7            pop d
0278   05C6 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0279   05CA DA            push d
0280   05CB FA FD FF      lea d, [bp + -3] ; $j
0281   05CE 2A            mov b, [d]
0282   05CF 38 00 00      mov c, 0
0283   05D2 E7            pop d
0284   05D3 5A            add d, b
0285   05D4 E4            pop a
0286   05D5 DA            push d
0287   05D6 FD 2E 40 00   mov32 cb, $00000040
0287   05DA 00 00 
0288   05DC E7            pop d
0289   05DD FD 3E         mov [d], bl
0290   05DF 0A E2 05      jmp _if7_exit
0291   05E2             _if7_exit:
0292   05E2             _if6_exit:
0293   05E2             _for5_update:
0294   05E2 FA FD FF      lea d, [bp + -3] ; $j
0295   05E5 2A            mov b, [d]
0296   05E6 38 00 00      mov c, 0
0297   05E9 11            mov a, b
0298   05EA FD 77         inc b
0299   05EC FA FD FF      lea d, [bp + -3] ; $j
0300   05EF FD 43         mov [d], b
0301   05F1 27            mov b, a
0302   05F2 0A 02 05      jmp _for5_cond
0303   05F5             _for5_exit:
0304   05F5             _for4_update:
0305   05F5 FA FF FF      lea d, [bp + -1] ; $i
0306   05F8 2A            mov b, [d]
0307   05F9 38 00 00      mov c, 0
0308   05FC 11            mov a, b
0309   05FD FD 77         inc b
0310   05FF FA FF FF      lea d, [bp + -1] ; $i
0311   0602 FD 43         mov [d], b
0312   0604 27            mov b, a
0313   0605 0A D2 04      jmp _for4_cond
0314   0608             _for4_exit:
0315   0608             ; for(i = 1; i <  30      +-1; i++){ 
0316   0608             _for8_init:
0317   0608 FA FF FF      lea d, [bp + -1] ; $i
0318   060B DA            push d
0319   060C FD 2E 01 00   mov32 cb, $00000001
0319   0610 00 00 
0320   0612 E7            pop d
0321   0613 FD 43         mov [d], b
0322   0615             _for8_cond:
0323   0615 FA FF FF      lea d, [bp + -1] ; $i
0324   0618 2A            mov b, [d]
0325   0619 38 00 00      mov c, 0
0326   061C             ; --- START RELATIONAL
0327   061C D7            push a
0328   061D 11            mov a, b
0329   061E FD 2E 1E 00   mov32 cb, $0000001e
0329   0622 00 00 
0330   0624             ; --- START TERMS
0331   0624 D7            push a
0332   0625 11            mov a, b
0333   0626 FD 2E FF FF   mov32 cb, $ffffffff
0333   062A FF FF 
0334   062C 56            add b, a
0335   062D E4            pop a
0336   062E             ; --- END TERMS
0337   062E B0            cmp a, b
0338   062F FD 73         slt ; < (signed)
0339   0631 E4            pop a
0340   0632             ; --- END RELATIONAL
0341   0632 C0 00 00      cmp b, 0
0342   0635 C6 D0 06      je _for8_exit
0343   0638             _for8_block:
0344   0638             ; for(j = 1; j <   40     +-1; j++){ 
0345   0638             _for9_init:
0346   0638 FA FD FF      lea d, [bp + -3] ; $j
0347   063B DA            push d
0348   063C FD 2E 01 00   mov32 cb, $00000001
0348   0640 00 00 
0349   0642 E7            pop d
0350   0643 FD 43         mov [d], b
0351   0645             _for9_cond:
0352   0645 FA FD FF      lea d, [bp + -3] ; $j
0353   0648 2A            mov b, [d]
0354   0649 38 00 00      mov c, 0
0355   064C             ; --- START RELATIONAL
0356   064C D7            push a
0357   064D 11            mov a, b
0358   064E FD 2E 28 00   mov32 cb, $00000028
0358   0652 00 00 
0359   0654             ; --- START TERMS
0360   0654 D7            push a
0361   0655 11            mov a, b
0362   0656 FD 2E FF FF   mov32 cb, $ffffffff
0362   065A FF FF 
0363   065C 56            add b, a
0364   065D E4            pop a
0365   065E             ; --- END TERMS
0366   065E B0            cmp a, b
0367   065F FD 73         slt ; < (signed)
0368   0661 E4            pop a
0369   0662             ; --- END RELATIONAL
0370   0662 C0 00 00      cmp b, 0
0371   0665 C6 BD 06      je _for9_exit
0372   0668             _for9_block:
0373   0668             ; currState[i][j] = nextState[i][j]; 
0374   0668 3B D1 18      mov d, _currState_data ; $currState
0375   066B D7            push a
0376   066C DA            push d
0377   066D FA FF FF      lea d, [bp + -1] ; $i
0378   0670 2A            mov b, [d]
0379   0671 38 00 00      mov c, 0
0380   0674 E7            pop d
0381   0675 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0382   0679 DA            push d
0383   067A FA FD FF      lea d, [bp + -3] ; $j
0384   067D 2A            mov b, [d]
0385   067E 38 00 00      mov c, 0
0386   0681 E7            pop d
0387   0682 5A            add d, b
0388   0683 E4            pop a
0389   0684 DA            push d
0390   0685 3B 21 14      mov d, _nextState_data ; $nextState
0391   0688 D7            push a
0392   0689 DA            push d
0393   068A FA FF FF      lea d, [bp + -1] ; $i
0394   068D 2A            mov b, [d]
0395   068E 38 00 00      mov c, 0
0396   0691 E7            pop d
0397   0692 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0398   0696 DA            push d
0399   0697 FA FD FF      lea d, [bp + -3] ; $j
0400   069A 2A            mov b, [d]
0401   069B 38 00 00      mov c, 0
0402   069E E7            pop d
0403   069F 5A            add d, b
0404   06A0 E4            pop a
0405   06A1 32            mov bl, [d]
0406   06A2 A7 00         mov bh, 0
0407   06A4 38 00 00      mov c, 0
0408   06A7 E7            pop d
0409   06A8 FD 3E         mov [d], bl
0410   06AA             _for9_update:
0411   06AA FA FD FF      lea d, [bp + -3] ; $j
0412   06AD 2A            mov b, [d]
0413   06AE 38 00 00      mov c, 0
0414   06B1 11            mov a, b
0415   06B2 FD 77         inc b
0416   06B4 FA FD FF      lea d, [bp + -3] ; $j
0417   06B7 FD 43         mov [d], b
0418   06B9 27            mov b, a
0419   06BA 0A 45 06      jmp _for9_cond
0420   06BD             _for9_exit:
0421   06BD             _for8_update:
0422   06BD FA FF FF      lea d, [bp + -1] ; $i
0423   06C0 2A            mov b, [d]
0424   06C1 38 00 00      mov c, 0
0425   06C4 11            mov a, b
0426   06C5 FD 77         inc b
0427   06C7 FA FF FF      lea d, [bp + -1] ; $i
0428   06CA FD 43         mov [d], b
0429   06CC 27            mov b, a
0430   06CD 0A 15 06      jmp _for8_cond
0431   06D0             _for8_exit:
0432   06D0             ; printf(clear); 
0433   06D0             ; --- START FUNCTION CALL
0434   06D0 3B 16 14      mov d, _clear_data ; $clear
0435   06D3 2D            mov b, d
0436   06D4 38 00 00      mov c, 0
0437   06D7 FD AB         swp b
0438   06D9 D8            push b
0439   06DA 07 E4 0A      call printf
0440   06DD 51 02 00      add sp, 2
0441   06E0             ; --- END FUNCTION CALL
0442   06E0             ; show(); 
0443   06E0             ; --- START FUNCTION CALL
0444   06E0 07 F4 06      call show
0445   06E3             ; puts("\n\rPress CTRL+C to quit.\n\r"); 
0446   06E3             ; --- START FUNCTION CALL
0447   06E3 26 81 1D      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0448   06E6 FD AB         swp b
0449   06E8 D8            push b
0450   06E9 07 F8 13      call puts
0451   06EC 51 02 00      add sp, 2
0452   06EF             ; --- END FUNCTION CALL
0453   06EF             _for3_update:
0454   06EF 0A C5 04      jmp _for3_cond
0455   06F2             _for3_exit:
0456   06F2 05 0B         syscall sys_terminate_proc
0457   06F4             
0458   06F4             show:
0459   06F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0460   06F7             ; int i, j; 
0461   06F7 52 02 00      sub sp, 2
0462   06FA 52 02 00      sub sp, 2
0463   06FD             ; for(i = 0; i <  30      ; i++){ 
0464   06FD             _for10_init:
0465   06FD FA FF FF      lea d, [bp + -1] ; $i
0466   0700 DA            push d
0467   0701 FD 2E 00 00   mov32 cb, $00000000
0467   0705 00 00 
0468   0707 E7            pop d
0469   0708 FD 43         mov [d], b
0470   070A             _for10_cond:
0471   070A FA FF FF      lea d, [bp + -1] ; $i
0472   070D 2A            mov b, [d]
0473   070E 38 00 00      mov c, 0
0474   0711             ; --- START RELATIONAL
0475   0711 D7            push a
0476   0712 11            mov a, b
0477   0713 FD 2E 1E 00   mov32 cb, $0000001e
0477   0717 00 00 
0478   0719 B0            cmp a, b
0479   071A FD 73         slt ; < (signed)
0480   071C E4            pop a
0481   071D             ; --- END RELATIONAL
0482   071D C0 00 00      cmp b, 0
0483   0720 C6 CA 07      je _for10_exit
0484   0723             _for10_block:
0485   0723             ; for(j = 0; j <   40     ; j++){ 
0486   0723             _for11_init:
0487   0723 FA FD FF      lea d, [bp + -3] ; $j
0488   0726 DA            push d
0489   0727 FD 2E 00 00   mov32 cb, $00000000
0489   072B 00 00 
0490   072D E7            pop d
0491   072E FD 43         mov [d], b
0492   0730             _for11_cond:
0493   0730 FA FD FF      lea d, [bp + -3] ; $j
0494   0733 2A            mov b, [d]
0495   0734 38 00 00      mov c, 0
0496   0737             ; --- START RELATIONAL
0497   0737 D7            push a
0498   0738 11            mov a, b
0499   0739 FD 2E 28 00   mov32 cb, $00000028
0499   073D 00 00 
0500   073F B0            cmp a, b
0501   0740 FD 73         slt ; < (signed)
0502   0742 E4            pop a
0503   0743             ; --- END RELATIONAL
0504   0743 C0 00 00      cmp b, 0
0505   0746 C6 AB 07      je _for11_exit
0506   0749             _for11_block:
0507   0749             ; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
0508   0749             _ternary12_cond:
0509   0749 3B D1 18      mov d, _currState_data ; $currState
0510   074C D7            push a
0511   074D DA            push d
0512   074E FA FF FF      lea d, [bp + -1] ; $i
0513   0751 2A            mov b, [d]
0514   0752 38 00 00      mov c, 0
0515   0755 E7            pop d
0516   0756 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0517   075A DA            push d
0518   075B FA FD FF      lea d, [bp + -3] ; $j
0519   075E 2A            mov b, [d]
0520   075F 38 00 00      mov c, 0
0521   0762 E7            pop d
0522   0763 5A            add d, b
0523   0764 E4            pop a
0524   0765 32            mov bl, [d]
0525   0766 A7 00         mov bh, 0
0526   0768 38 00 00      mov c, 0
0527   076B             ; --- START RELATIONAL
0528   076B D7            push a
0529   076C 11            mov a, b
0530   076D FD 2E 40 00   mov32 cb, $00000040
0530   0771 00 00 
0531   0773 B0            cmp a, b
0532   0774 FD 71         seq ; ==
0533   0776 E4            pop a
0534   0777             ; --- END RELATIONAL
0535   0777 C0 00 00      cmp b, 0
0536   077A C6 8C 07      je _ternary12_FALSE
0537   077D             _ternary12_TRUE:
0538   077D             ; --- START FUNCTION CALL
0539   077D 26 9B 1D      mov b, _s1 ; "@ "
0540   0780 FD AB         swp b
0541   0782 D8            push b
0542   0783 07 E4 0A      call printf
0543   0786 51 02 00      add sp, 2
0544   0789             ; --- END FUNCTION CALL
0545   0789 0A 98 07      jmp _ternary12_exit
0546   078C             _ternary12_FALSE:
0547   078C             ; --- START FUNCTION CALL
0548   078C 26 9E 1D      mov b, _s2 ; ". "
0549   078F FD AB         swp b
0550   0791 D8            push b
0551   0792 07 E4 0A      call printf
0552   0795 51 02 00      add sp, 2
0553   0798             ; --- END FUNCTION CALL
0554   0798             _ternary12_exit:
0555   0798             _for11_update:
0556   0798 FA FD FF      lea d, [bp + -3] ; $j
0557   079B 2A            mov b, [d]
0558   079C 38 00 00      mov c, 0
0559   079F 11            mov a, b
0560   07A0 FD 77         inc b
0561   07A2 FA FD FF      lea d, [bp + -3] ; $j
0562   07A5 FD 43         mov [d], b
0563   07A7 27            mov b, a
0564   07A8 0A 30 07      jmp _for11_cond
0565   07AB             _for11_exit:
0566   07AB             ; printf("\n\r"); 
0567   07AB             ; --- START FUNCTION CALL
0568   07AB 26 A1 1D      mov b, _s3 ; "\n\r"
0569   07AE FD AB         swp b
0570   07B0 D8            push b
0571   07B1 07 E4 0A      call printf
0572   07B4 51 02 00      add sp, 2
0573   07B7             ; --- END FUNCTION CALL
0574   07B7             _for10_update:
0575   07B7 FA FF FF      lea d, [bp + -1] ; $i
0576   07BA 2A            mov b, [d]
0577   07BB 38 00 00      mov c, 0
0578   07BE 11            mov a, b
0579   07BF FD 77         inc b
0580   07C1 FA FF FF      lea d, [bp + -1] ; $i
0581   07C4 FD 43         mov [d], b
0582   07C6 27            mov b, a
0583   07C7 0A 0A 07      jmp _for10_cond
0584   07CA             _for10_exit:
0585   07CA F9            leave
0586   07CB 09            ret
0587   07CC             
0588   07CC             alive:
0589   07CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0590   07CF             ; if(currState[i][j] == '@') return 1; 
0591   07CF             _if13_cond:
0592   07CF 3B D1 18      mov d, _currState_data ; $currState
0593   07D2 D7            push a
0594   07D3 DA            push d
0595   07D4 FA 05 00      lea d, [bp + 5] ; $i
0596   07D7 2A            mov b, [d]
0597   07D8 38 00 00      mov c, 0
0598   07DB E7            pop d
0599   07DC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0600   07E0 DA            push d
0601   07E1 FA 07 00      lea d, [bp + 7] ; $j
0602   07E4 2A            mov b, [d]
0603   07E5 38 00 00      mov c, 0
0604   07E8 E7            pop d
0605   07E9 5A            add d, b
0606   07EA E4            pop a
0607   07EB 32            mov bl, [d]
0608   07EC A7 00         mov bh, 0
0609   07EE 38 00 00      mov c, 0
0610   07F1             ; --- START RELATIONAL
0611   07F1 D7            push a
0612   07F2 11            mov a, b
0613   07F3 FD 2E 40 00   mov32 cb, $00000040
0613   07F7 00 00 
0614   07F9 B0            cmp a, b
0615   07FA FD 71         seq ; ==
0616   07FC E4            pop a
0617   07FD             ; --- END RELATIONAL
0618   07FD C0 00 00      cmp b, 0
0619   0800 C6 0E 08      je _if13_else
0620   0803             _if13_TRUE:
0621   0803             ; return 1; 
0622   0803 FD 2E 01 00   mov32 cb, $00000001
0622   0807 00 00 
0623   0809 F9            leave
0624   080A 09            ret
0625   080B 0A 16 08      jmp _if13_exit
0626   080E             _if13_else:
0627   080E             ; return 0; 
0628   080E FD 2E 00 00   mov32 cb, $00000000
0628   0812 00 00 
0629   0814 F9            leave
0630   0815 09            ret
0631   0816             _if13_exit:
0632   0816 F9            leave
0633   0817 09            ret
0634   0818             
0635   0818             neighbours:
0636   0818 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0637   081B             ; int count; 
0638   081B 52 02 00      sub sp, 2
0639   081E             ; count = 0; 
0640   081E FA FF FF      lea d, [bp + -1] ; $count
0641   0821 DA            push d
0642   0822 FD 2E 00 00   mov32 cb, $00000000
0642   0826 00 00 
0643   0828 E7            pop d
0644   0829 FD 43         mov [d], b
0645   082B             ; if(currState[i+-1][j] == '@')			count++; 
0646   082B             _if14_cond:
0647   082B 3B D1 18      mov d, _currState_data ; $currState
0648   082E D7            push a
0649   082F DA            push d
0650   0830 FA 05 00      lea d, [bp + 5] ; $i
0651   0833 2A            mov b, [d]
0652   0834 38 00 00      mov c, 0
0653   0837             ; --- START TERMS
0654   0837 D7            push a
0655   0838 11            mov a, b
0656   0839 FD 2E FF FF   mov32 cb, $ffffffff
0656   083D FF FF 
0657   083F 56            add b, a
0658   0840 E4            pop a
0659   0841             ; --- END TERMS
0660   0841 E7            pop d
0661   0842 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0662   0846 DA            push d
0663   0847 FA 07 00      lea d, [bp + 7] ; $j
0664   084A 2A            mov b, [d]
0665   084B 38 00 00      mov c, 0
0666   084E E7            pop d
0667   084F 5A            add d, b
0668   0850 E4            pop a
0669   0851 32            mov bl, [d]
0670   0852 A7 00         mov bh, 0
0671   0854 38 00 00      mov c, 0
0672   0857             ; --- START RELATIONAL
0673   0857 D7            push a
0674   0858 11            mov a, b
0675   0859 FD 2E 40 00   mov32 cb, $00000040
0675   085D 00 00 
0676   085F B0            cmp a, b
0677   0860 FD 71         seq ; ==
0678   0862 E4            pop a
0679   0863             ; --- END RELATIONAL
0680   0863 C0 00 00      cmp b, 0
0681   0866 C6 7C 08      je _if14_exit
0682   0869             _if14_TRUE:
0683   0869             ; count++; 
0684   0869 FA FF FF      lea d, [bp + -1] ; $count
0685   086C 2A            mov b, [d]
0686   086D 38 00 00      mov c, 0
0687   0870 11            mov a, b
0688   0871 FD 77         inc b
0689   0873 FA FF FF      lea d, [bp + -1] ; $count
0690   0876 FD 43         mov [d], b
0691   0878 27            mov b, a
0692   0879 0A 7C 08      jmp _if14_exit
0693   087C             _if14_exit:
0694   087C             ; if(currState[i+-1][j+-1] == '@') 	count++; 
0695   087C             _if15_cond:
0696   087C 3B D1 18      mov d, _currState_data ; $currState
0697   087F D7            push a
0698   0880 DA            push d
0699   0881 FA 05 00      lea d, [bp + 5] ; $i
0700   0884 2A            mov b, [d]
0701   0885 38 00 00      mov c, 0
0702   0888             ; --- START TERMS
0703   0888 D7            push a
0704   0889 11            mov a, b
0705   088A FD 2E FF FF   mov32 cb, $ffffffff
0705   088E FF FF 
0706   0890 56            add b, a
0707   0891 E4            pop a
0708   0892             ; --- END TERMS
0709   0892 E7            pop d
0710   0893 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0711   0897 DA            push d
0712   0898 FA 07 00      lea d, [bp + 7] ; $j
0713   089B 2A            mov b, [d]
0714   089C 38 00 00      mov c, 0
0715   089F             ; --- START TERMS
0716   089F D7            push a
0717   08A0 11            mov a, b
0718   08A1 FD 2E FF FF   mov32 cb, $ffffffff
0718   08A5 FF FF 
0719   08A7 56            add b, a
0720   08A8 E4            pop a
0721   08A9             ; --- END TERMS
0722   08A9 E7            pop d
0723   08AA 5A            add d, b
0724   08AB E4            pop a
0725   08AC 32            mov bl, [d]
0726   08AD A7 00         mov bh, 0
0727   08AF 38 00 00      mov c, 0
0728   08B2             ; --- START RELATIONAL
0729   08B2 D7            push a
0730   08B3 11            mov a, b
0731   08B4 FD 2E 40 00   mov32 cb, $00000040
0731   08B8 00 00 
0732   08BA B0            cmp a, b
0733   08BB FD 71         seq ; ==
0734   08BD E4            pop a
0735   08BE             ; --- END RELATIONAL
0736   08BE C0 00 00      cmp b, 0
0737   08C1 C6 D7 08      je _if15_exit
0738   08C4             _if15_TRUE:
0739   08C4             ; count++; 
0740   08C4 FA FF FF      lea d, [bp + -1] ; $count
0741   08C7 2A            mov b, [d]
0742   08C8 38 00 00      mov c, 0
0743   08CB 11            mov a, b
0744   08CC FD 77         inc b
0745   08CE FA FF FF      lea d, [bp + -1] ; $count
0746   08D1 FD 43         mov [d], b
0747   08D3 27            mov b, a
0748   08D4 0A D7 08      jmp _if15_exit
0749   08D7             _if15_exit:
0750   08D7             ; if(currState[i+-1][j+1] == '@') 	count++; 
0751   08D7             _if16_cond:
0752   08D7 3B D1 18      mov d, _currState_data ; $currState
0753   08DA D7            push a
0754   08DB DA            push d
0755   08DC FA 05 00      lea d, [bp + 5] ; $i
0756   08DF 2A            mov b, [d]
0757   08E0 38 00 00      mov c, 0
0758   08E3             ; --- START TERMS
0759   08E3 D7            push a
0760   08E4 11            mov a, b
0761   08E5 FD 2E FF FF   mov32 cb, $ffffffff
0761   08E9 FF FF 
0762   08EB 56            add b, a
0763   08EC E4            pop a
0764   08ED             ; --- END TERMS
0765   08ED E7            pop d
0766   08EE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0767   08F2 DA            push d
0768   08F3 FA 07 00      lea d, [bp + 7] ; $j
0769   08F6 2A            mov b, [d]
0770   08F7 38 00 00      mov c, 0
0771   08FA             ; --- START TERMS
0772   08FA D7            push a
0773   08FB 11            mov a, b
0774   08FC FD 2E 01 00   mov32 cb, $00000001
0774   0900 00 00 
0775   0902 56            add b, a
0776   0903 E4            pop a
0777   0904             ; --- END TERMS
0778   0904 E7            pop d
0779   0905 5A            add d, b
0780   0906 E4            pop a
0781   0907 32            mov bl, [d]
0782   0908 A7 00         mov bh, 0
0783   090A 38 00 00      mov c, 0
0784   090D             ; --- START RELATIONAL
0785   090D D7            push a
0786   090E 11            mov a, b
0787   090F FD 2E 40 00   mov32 cb, $00000040
0787   0913 00 00 
0788   0915 B0            cmp a, b
0789   0916 FD 71         seq ; ==
0790   0918 E4            pop a
0791   0919             ; --- END RELATIONAL
0792   0919 C0 00 00      cmp b, 0
0793   091C C6 32 09      je _if16_exit
0794   091F             _if16_TRUE:
0795   091F             ; count++; 
0796   091F FA FF FF      lea d, [bp + -1] ; $count
0797   0922 2A            mov b, [d]
0798   0923 38 00 00      mov c, 0
0799   0926 11            mov a, b
0800   0927 FD 77         inc b
0801   0929 FA FF FF      lea d, [bp + -1] ; $count
0802   092C FD 43         mov [d], b
0803   092E 27            mov b, a
0804   092F 0A 32 09      jmp _if16_exit
0805   0932             _if16_exit:
0806   0932             ; if(currState[i][j+-1] == '@') 		count++; 
0807   0932             _if17_cond:
0808   0932 3B D1 18      mov d, _currState_data ; $currState
0809   0935 D7            push a
0810   0936 DA            push d
0811   0937 FA 05 00      lea d, [bp + 5] ; $i
0812   093A 2A            mov b, [d]
0813   093B 38 00 00      mov c, 0
0814   093E E7            pop d
0815   093F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0816   0943 DA            push d
0817   0944 FA 07 00      lea d, [bp + 7] ; $j
0818   0947 2A            mov b, [d]
0819   0948 38 00 00      mov c, 0
0820   094B             ; --- START TERMS
0821   094B D7            push a
0822   094C 11            mov a, b
0823   094D FD 2E FF FF   mov32 cb, $ffffffff
0823   0951 FF FF 
0824   0953 56            add b, a
0825   0954 E4            pop a
0826   0955             ; --- END TERMS
0827   0955 E7            pop d
0828   0956 5A            add d, b
0829   0957 E4            pop a
0830   0958 32            mov bl, [d]
0831   0959 A7 00         mov bh, 0
0832   095B 38 00 00      mov c, 0
0833   095E             ; --- START RELATIONAL
0834   095E D7            push a
0835   095F 11            mov a, b
0836   0960 FD 2E 40 00   mov32 cb, $00000040
0836   0964 00 00 
0837   0966 B0            cmp a, b
0838   0967 FD 71         seq ; ==
0839   0969 E4            pop a
0840   096A             ; --- END RELATIONAL
0841   096A C0 00 00      cmp b, 0
0842   096D C6 83 09      je _if17_exit
0843   0970             _if17_TRUE:
0844   0970             ; count++; 
0845   0970 FA FF FF      lea d, [bp + -1] ; $count
0846   0973 2A            mov b, [d]
0847   0974 38 00 00      mov c, 0
0848   0977 11            mov a, b
0849   0978 FD 77         inc b
0850   097A FA FF FF      lea d, [bp + -1] ; $count
0851   097D FD 43         mov [d], b
0852   097F 27            mov b, a
0853   0980 0A 83 09      jmp _if17_exit
0854   0983             _if17_exit:
0855   0983             ; if(currState[i][j+1] == '@') 			count++; 
0856   0983             _if18_cond:
0857   0983 3B D1 18      mov d, _currState_data ; $currState
0858   0986 D7            push a
0859   0987 DA            push d
0860   0988 FA 05 00      lea d, [bp + 5] ; $i
0861   098B 2A            mov b, [d]
0862   098C 38 00 00      mov c, 0
0863   098F E7            pop d
0864   0990 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0865   0994 DA            push d
0866   0995 FA 07 00      lea d, [bp + 7] ; $j
0867   0998 2A            mov b, [d]
0868   0999 38 00 00      mov c, 0
0869   099C             ; --- START TERMS
0870   099C D7            push a
0871   099D 11            mov a, b
0872   099E FD 2E 01 00   mov32 cb, $00000001
0872   09A2 00 00 
0873   09A4 56            add b, a
0874   09A5 E4            pop a
0875   09A6             ; --- END TERMS
0876   09A6 E7            pop d
0877   09A7 5A            add d, b
0878   09A8 E4            pop a
0879   09A9 32            mov bl, [d]
0880   09AA A7 00         mov bh, 0
0881   09AC 38 00 00      mov c, 0
0882   09AF             ; --- START RELATIONAL
0883   09AF D7            push a
0884   09B0 11            mov a, b
0885   09B1 FD 2E 40 00   mov32 cb, $00000040
0885   09B5 00 00 
0886   09B7 B0            cmp a, b
0887   09B8 FD 71         seq ; ==
0888   09BA E4            pop a
0889   09BB             ; --- END RELATIONAL
0890   09BB C0 00 00      cmp b, 0
0891   09BE C6 D4 09      je _if18_exit
0892   09C1             _if18_TRUE:
0893   09C1             ; count++; 
0894   09C1 FA FF FF      lea d, [bp + -1] ; $count
0895   09C4 2A            mov b, [d]
0896   09C5 38 00 00      mov c, 0
0897   09C8 11            mov a, b
0898   09C9 FD 77         inc b
0899   09CB FA FF FF      lea d, [bp + -1] ; $count
0900   09CE FD 43         mov [d], b
0901   09D0 27            mov b, a
0902   09D1 0A D4 09      jmp _if18_exit
0903   09D4             _if18_exit:
0904   09D4             ; if(currState[i+1][j+-1] == '@') 	count++; 
0905   09D4             _if19_cond:
0906   09D4 3B D1 18      mov d, _currState_data ; $currState
0907   09D7 D7            push a
0908   09D8 DA            push d
0909   09D9 FA 05 00      lea d, [bp + 5] ; $i
0910   09DC 2A            mov b, [d]
0911   09DD 38 00 00      mov c, 0
0912   09E0             ; --- START TERMS
0913   09E0 D7            push a
0914   09E1 11            mov a, b
0915   09E2 FD 2E 01 00   mov32 cb, $00000001
0915   09E6 00 00 
0916   09E8 56            add b, a
0917   09E9 E4            pop a
0918   09EA             ; --- END TERMS
0919   09EA E7            pop d
0920   09EB FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0921   09EF DA            push d
0922   09F0 FA 07 00      lea d, [bp + 7] ; $j
0923   09F3 2A            mov b, [d]
0924   09F4 38 00 00      mov c, 0
0925   09F7             ; --- START TERMS
0926   09F7 D7            push a
0927   09F8 11            mov a, b
0928   09F9 FD 2E FF FF   mov32 cb, $ffffffff
0928   09FD FF FF 
0929   09FF 56            add b, a
0930   0A00 E4            pop a
0931   0A01             ; --- END TERMS
0932   0A01 E7            pop d
0933   0A02 5A            add d, b
0934   0A03 E4            pop a
0935   0A04 32            mov bl, [d]
0936   0A05 A7 00         mov bh, 0
0937   0A07 38 00 00      mov c, 0
0938   0A0A             ; --- START RELATIONAL
0939   0A0A D7            push a
0940   0A0B 11            mov a, b
0941   0A0C FD 2E 40 00   mov32 cb, $00000040
0941   0A10 00 00 
0942   0A12 B0            cmp a, b
0943   0A13 FD 71         seq ; ==
0944   0A15 E4            pop a
0945   0A16             ; --- END RELATIONAL
0946   0A16 C0 00 00      cmp b, 0
0947   0A19 C6 2F 0A      je _if19_exit
0948   0A1C             _if19_TRUE:
0949   0A1C             ; count++; 
0950   0A1C FA FF FF      lea d, [bp + -1] ; $count
0951   0A1F 2A            mov b, [d]
0952   0A20 38 00 00      mov c, 0
0953   0A23 11            mov a, b
0954   0A24 FD 77         inc b
0955   0A26 FA FF FF      lea d, [bp + -1] ; $count
0956   0A29 FD 43         mov [d], b
0957   0A2B 27            mov b, a
0958   0A2C 0A 2F 0A      jmp _if19_exit
0959   0A2F             _if19_exit:
0960   0A2F             ; if(currState[i+1][j] == '@') 			count++; 
0961   0A2F             _if20_cond:
0962   0A2F 3B D1 18      mov d, _currState_data ; $currState
0963   0A32 D7            push a
0964   0A33 DA            push d
0965   0A34 FA 05 00      lea d, [bp + 5] ; $i
0966   0A37 2A            mov b, [d]
0967   0A38 38 00 00      mov c, 0
0968   0A3B             ; --- START TERMS
0969   0A3B D7            push a
0970   0A3C 11            mov a, b
0971   0A3D FD 2E 01 00   mov32 cb, $00000001
0971   0A41 00 00 
0972   0A43 56            add b, a
0973   0A44 E4            pop a
0974   0A45             ; --- END TERMS
0975   0A45 E7            pop d
0976   0A46 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0977   0A4A DA            push d
0978   0A4B FA 07 00      lea d, [bp + 7] ; $j
0979   0A4E 2A            mov b, [d]
0980   0A4F 38 00 00      mov c, 0
0981   0A52 E7            pop d
0982   0A53 5A            add d, b
0983   0A54 E4            pop a
0984   0A55 32            mov bl, [d]
0985   0A56 A7 00         mov bh, 0
0986   0A58 38 00 00      mov c, 0
0987   0A5B             ; --- START RELATIONAL
0988   0A5B D7            push a
0989   0A5C 11            mov a, b
0990   0A5D FD 2E 40 00   mov32 cb, $00000040
0990   0A61 00 00 
0991   0A63 B0            cmp a, b
0992   0A64 FD 71         seq ; ==
0993   0A66 E4            pop a
0994   0A67             ; --- END RELATIONAL
0995   0A67 C0 00 00      cmp b, 0
0996   0A6A C6 80 0A      je _if20_exit
0997   0A6D             _if20_TRUE:
0998   0A6D             ; count++; 
0999   0A6D FA FF FF      lea d, [bp + -1] ; $count
1000   0A70 2A            mov b, [d]
1001   0A71 38 00 00      mov c, 0
1002   0A74 11            mov a, b
1003   0A75 FD 77         inc b
1004   0A77 FA FF FF      lea d, [bp + -1] ; $count
1005   0A7A FD 43         mov [d], b
1006   0A7C 27            mov b, a
1007   0A7D 0A 80 0A      jmp _if20_exit
1008   0A80             _if20_exit:
1009   0A80             ; if(currState[i+1][j+1] == '@') 		count++; 
1010   0A80             _if21_cond:
1011   0A80 3B D1 18      mov d, _currState_data ; $currState
1012   0A83 D7            push a
1013   0A84 DA            push d
1014   0A85 FA 05 00      lea d, [bp + 5] ; $i
1015   0A88 2A            mov b, [d]
1016   0A89 38 00 00      mov c, 0
1017   0A8C             ; --- START TERMS
1018   0A8C D7            push a
1019   0A8D 11            mov a, b
1020   0A8E FD 2E 01 00   mov32 cb, $00000001
1020   0A92 00 00 
1021   0A94 56            add b, a
1022   0A95 E4            pop a
1023   0A96             ; --- END TERMS
1024   0A96 E7            pop d
1025   0A97 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
1026   0A9B DA            push d
1027   0A9C FA 07 00      lea d, [bp + 7] ; $j
1028   0A9F 2A            mov b, [d]
1029   0AA0 38 00 00      mov c, 0
1030   0AA3             ; --- START TERMS
1031   0AA3 D7            push a
1032   0AA4 11            mov a, b
1033   0AA5 FD 2E 01 00   mov32 cb, $00000001
1033   0AA9 00 00 
1034   0AAB 56            add b, a
1035   0AAC E4            pop a
1036   0AAD             ; --- END TERMS
1037   0AAD E7            pop d
1038   0AAE 5A            add d, b
1039   0AAF E4            pop a
1040   0AB0 32            mov bl, [d]
1041   0AB1 A7 00         mov bh, 0
1042   0AB3 38 00 00      mov c, 0
1043   0AB6             ; --- START RELATIONAL
1044   0AB6 D7            push a
1045   0AB7 11            mov a, b
1046   0AB8 FD 2E 40 00   mov32 cb, $00000040
1046   0ABC 00 00 
1047   0ABE B0            cmp a, b
1048   0ABF FD 71         seq ; ==
1049   0AC1 E4            pop a
1050   0AC2             ; --- END RELATIONAL
1051   0AC2 C0 00 00      cmp b, 0
1052   0AC5 C6 DB 0A      je _if21_exit
1053   0AC8             _if21_TRUE:
1054   0AC8             ; count++; 
1055   0AC8 FA FF FF      lea d, [bp + -1] ; $count
1056   0ACB 2A            mov b, [d]
1057   0ACC 38 00 00      mov c, 0
1058   0ACF 11            mov a, b
1059   0AD0 FD 77         inc b
1060   0AD2 FA FF FF      lea d, [bp + -1] ; $count
1061   0AD5 FD 43         mov [d], b
1062   0AD7 27            mov b, a
1063   0AD8 0A DB 0A      jmp _if21_exit
1064   0ADB             _if21_exit:
1065   0ADB             ; return count; 
1066   0ADB FA FF FF      lea d, [bp + -1] ; $count
1067   0ADE 2A            mov b, [d]
1068   0ADF 38 00 00      mov c, 0
1069   0AE2 F9            leave
1070   0AE3 09            ret
1071   0AE4             
1072   0AE4             printf:
1073   0AE4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1074   0AE7             ; char *p, *format_p; 
1075   0AE7 52 02 00      sub sp, 2
1076   0AEA 52 02 00      sub sp, 2
1077   0AED             ; format_p = format; 
1078   0AED FA FD FF      lea d, [bp + -3] ; $format_p
1079   0AF0 DA            push d
1080   0AF1 FA 05 00      lea d, [bp + 5] ; $format
1081   0AF4 2A            mov b, [d]
1082   0AF5 38 00 00      mov c, 0
1083   0AF8 E7            pop d
1084   0AF9 FD 43         mov [d], b
1085   0AFB             ; p = &format + 2; 
1086   0AFB FA FF FF      lea d, [bp + -1] ; $p
1087   0AFE DA            push d
1088   0AFF FA 05 00      lea d, [bp + 5] ; $format
1089   0B02 2D            mov b, d
1090   0B03             ; --- START TERMS
1091   0B03 D7            push a
1092   0B04 11            mov a, b
1093   0B05 FD 2E 02 00   mov32 cb, $00000002
1093   0B09 00 00 
1094   0B0B 56            add b, a
1095   0B0C E4            pop a
1096   0B0D             ; --- END TERMS
1097   0B0D E7            pop d
1098   0B0E FD 43         mov [d], b
1099   0B10             ; for(;;){ 
1100   0B10             _for22_init:
1101   0B10             _for22_cond:
1102   0B10             _for22_block:
1103   0B10             ; if(!*format_p) break; 
1104   0B10             _if23_cond:
1105   0B10 FA FD FF      lea d, [bp + -3] ; $format_p
1106   0B13 2A            mov b, [d]
1107   0B14 38 00 00      mov c, 0
1108   0B17 74            mov d, b
1109   0B18 32            mov bl, [d]
1110   0B19 A7 00         mov bh, 0
1111   0B1B 38 00 00      mov c, 0
1112   0B1E C0 00 00      cmp b, 0
1113   0B21 FD 71         seq ; !
1114   0B23 C0 00 00      cmp b, 0
1115   0B26 C6 2F 0B      je _if23_else
1116   0B29             _if23_TRUE:
1117   0B29             ; break; 
1118   0B29 0A CF 0D      jmp _for22_exit ; for break
1119   0B2C 0A BC 0D      jmp _if23_exit
1120   0B2F             _if23_else:
1121   0B2F             ; if(*format_p == '%'){ 
1122   0B2F             _if24_cond:
1123   0B2F FA FD FF      lea d, [bp + -3] ; $format_p
1124   0B32 2A            mov b, [d]
1125   0B33 38 00 00      mov c, 0
1126   0B36 74            mov d, b
1127   0B37 32            mov bl, [d]
1128   0B38 A7 00         mov bh, 0
1129   0B3A 38 00 00      mov c, 0
1130   0B3D             ; --- START RELATIONAL
1131   0B3D D7            push a
1132   0B3E 11            mov a, b
1133   0B3F FD 2E 25 00   mov32 cb, $00000025
1133   0B43 00 00 
1134   0B45 B0            cmp a, b
1135   0B46 FD 71         seq ; ==
1136   0B48 E4            pop a
1137   0B49             ; --- END RELATIONAL
1138   0B49 C0 00 00      cmp b, 0
1139   0B4C C6 A7 0D      je _if24_else
1140   0B4F             _if24_TRUE:
1141   0B4F             ; format_p++; 
1142   0B4F FA FD FF      lea d, [bp + -3] ; $format_p
1143   0B52 2A            mov b, [d]
1144   0B53 38 00 00      mov c, 0
1145   0B56 FD 77         inc b
1146   0B58 FA FD FF      lea d, [bp + -3] ; $format_p
1147   0B5B FD 43         mov [d], b
1148   0B5D FD 7D         dec b
1149   0B5F             ; switch(*format_p){ 
1150   0B5F             _switch25_expr:
1151   0B5F FA FD FF      lea d, [bp + -3] ; $format_p
1152   0B62 2A            mov b, [d]
1153   0B63 38 00 00      mov c, 0
1154   0B66 74            mov d, b
1155   0B67 32            mov bl, [d]
1156   0B68 A7 00         mov bh, 0
1157   0B6A 38 00 00      mov c, 0
1158   0B6D             _switch25_comparisons:
1159   0B6D C1 6C         cmp bl, $6c
1160   0B6F C6 9B 0B      je _switch25_case0
1161   0B72 C1 4C         cmp bl, $4c
1162   0B74 C6 9B 0B      je _switch25_case1
1163   0B77 C1 64         cmp bl, $64
1164   0B79 C6 AB 0C      je _switch25_case2
1165   0B7C C1 69         cmp bl, $69
1166   0B7E C6 AB 0C      je _switch25_case3
1167   0B81 C1 75         cmp bl, $75
1168   0B83 C6 DB 0C      je _switch25_case4
1169   0B86 C1 78         cmp bl, $78
1170   0B88 C6 0B 0D      je _switch25_case5
1171   0B8B C1 63         cmp bl, $63
1172   0B8D C6 3B 0D      je _switch25_case6
1173   0B90 C1 73         cmp bl, $73
1174   0B92 C6 6B 0D      je _switch25_case7
1175   0B95 0A 98 0D      jmp _switch25_default
1176   0B98 0A A4 0D      jmp _switch25_exit
1177   0B9B             _switch25_case0:
1178   0B9B             _switch25_case1:
1179   0B9B             ; format_p++; 
1180   0B9B FA FD FF      lea d, [bp + -3] ; $format_p
1181   0B9E 2A            mov b, [d]
1182   0B9F 38 00 00      mov c, 0
1183   0BA2 FD 77         inc b
1184   0BA4 FA FD FF      lea d, [bp + -3] ; $format_p
1185   0BA7 FD 43         mov [d], b
1186   0BA9 FD 7D         dec b
1187   0BAB             ; if(*format_p == 'd' || *format_p == 'i') 
1188   0BAB             _if26_cond:
1189   0BAB FA FD FF      lea d, [bp + -3] ; $format_p
1190   0BAE 2A            mov b, [d]
1191   0BAF 38 00 00      mov c, 0
1192   0BB2 74            mov d, b
1193   0BB3 32            mov bl, [d]
1194   0BB4 A7 00         mov bh, 0
1195   0BB6 38 00 00      mov c, 0
1196   0BB9             ; --- START RELATIONAL
1197   0BB9 D7            push a
1198   0BBA 11            mov a, b
1199   0BBB FD 2E 64 00   mov32 cb, $00000064
1199   0BBF 00 00 
1200   0BC1 B0            cmp a, b
1201   0BC2 FD 71         seq ; ==
1202   0BC4 E4            pop a
1203   0BC5             ; --- END RELATIONAL
1204   0BC5             ; --- START LOGICAL OR
1205   0BC5 D7            push a
1206   0BC6 11            mov a, b
1207   0BC7 FA FD FF      lea d, [bp + -3] ; $format_p
1208   0BCA 2A            mov b, [d]
1209   0BCB 38 00 00      mov c, 0
1210   0BCE 74            mov d, b
1211   0BCF 32            mov bl, [d]
1212   0BD0 A7 00         mov bh, 0
1213   0BD2 38 00 00      mov c, 0
1214   0BD5             ; --- START RELATIONAL
1215   0BD5 D7            push a
1216   0BD6 11            mov a, b
1217   0BD7 FD 2E 69 00   mov32 cb, $00000069
1217   0BDB 00 00 
1218   0BDD B0            cmp a, b
1219   0BDE FD 71         seq ; ==
1220   0BE0 E4            pop a
1221   0BE1             ; --- END RELATIONAL
1222   0BE1 FD A8         sor a, b ; ||
1223   0BE3 E4            pop a
1224   0BE4             ; --- END LOGICAL OR
1225   0BE4 C0 00 00      cmp b, 0
1226   0BE7 C6 08 0C      je _if26_else
1227   0BEA             _if26_TRUE:
1228   0BEA             ; print_signed_long(*(long *)p); 
1229   0BEA             ; --- START FUNCTION CALL
1230   0BEA FA FF FF      lea d, [bp + -1] ; $p
1231   0BED 2A            mov b, [d]
1232   0BEE 38 00 00      mov c, 0
1233   0BF1 74            mov d, b
1234   0BF2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1235   0BF5 FD 39         mov c, b ; And place it into C
1236   0BF7 2A            mov b, [d] ; Lower Word in B
1237   0BF8 12            mov a, c
1238   0BF9 FD AA         swp a
1239   0BFB D7            push a
1240   0BFC FD AB         swp b
1241   0BFE D8            push b
1242   0BFF 07 D1 0D      call print_signed_long
1243   0C02 51 04 00      add sp, 4
1244   0C05             ; --- END FUNCTION CALL
1245   0C05 0A 90 0C      jmp _if26_exit
1246   0C08             _if26_else:
1247   0C08             ; if(*format_p == 'u') 
1248   0C08             _if27_cond:
1249   0C08 FA FD FF      lea d, [bp + -3] ; $format_p
1250   0C0B 2A            mov b, [d]
1251   0C0C 38 00 00      mov c, 0
1252   0C0F 74            mov d, b
1253   0C10 32            mov bl, [d]
1254   0C11 A7 00         mov bh, 0
1255   0C13 38 00 00      mov c, 0
1256   0C16             ; --- START RELATIONAL
1257   0C16 D7            push a
1258   0C17 11            mov a, b
1259   0C18 FD 2E 75 00   mov32 cb, $00000075
1259   0C1C 00 00 
1260   0C1E B0            cmp a, b
1261   0C1F FD 71         seq ; ==
1262   0C21 E4            pop a
1263   0C22             ; --- END RELATIONAL
1264   0C22 C0 00 00      cmp b, 0
1265   0C25 C6 46 0C      je _if27_else
1266   0C28             _if27_TRUE:
1267   0C28             ; print_unsigned_long(*(unsigned long *)p); 
1268   0C28             ; --- START FUNCTION CALL
1269   0C28 FA FF FF      lea d, [bp + -1] ; $p
1270   0C2B 2A            mov b, [d]
1271   0C2C 38 00 00      mov c, 0
1272   0C2F 74            mov d, b
1273   0C30 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1274   0C33 FD 39         mov c, b ; And place it into C
1275   0C35 2A            mov b, [d] ; Lower Word in B
1276   0C36 12            mov a, c
1277   0C37 FD AA         swp a
1278   0C39 D7            push a
1279   0C3A FD AB         swp b
1280   0C3C D8            push b
1281   0C3D 07 71 0F      call print_unsigned_long
1282   0C40 51 04 00      add sp, 4
1283   0C43             ; --- END FUNCTION CALL
1284   0C43 0A 90 0C      jmp _if27_exit
1285   0C46             _if27_else:
1286   0C46             ; if(*format_p == 'x') 
1287   0C46             _if28_cond:
1288   0C46 FA FD FF      lea d, [bp + -3] ; $format_p
1289   0C49 2A            mov b, [d]
1290   0C4A 38 00 00      mov c, 0
1291   0C4D 74            mov d, b
1292   0C4E 32            mov bl, [d]
1293   0C4F A7 00         mov bh, 0
1294   0C51 38 00 00      mov c, 0
1295   0C54             ; --- START RELATIONAL
1296   0C54 D7            push a
1297   0C55 11            mov a, b
1298   0C56 FD 2E 78 00   mov32 cb, $00000078
1298   0C5A 00 00 
1299   0C5C B0            cmp a, b
1300   0C5D FD 71         seq ; ==
1301   0C5F E4            pop a
1302   0C60             ; --- END RELATIONAL
1303   0C60 C0 00 00      cmp b, 0
1304   0C63 C6 84 0C      je _if28_else
1305   0C66             _if28_TRUE:
1306   0C66             ; printx32(*(long int *)p); 
1307   0C66             ; --- START FUNCTION CALL
1308   0C66 FA FF FF      lea d, [bp + -1] ; $p
1309   0C69 2A            mov b, [d]
1310   0C6A 38 00 00      mov c, 0
1311   0C6D 74            mov d, b
1312   0C6E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1313   0C71 FD 39         mov c, b ; And place it into C
1314   0C73 2A            mov b, [d] ; Lower Word in B
1315   0C74 12            mov a, c
1316   0C75 FD AA         swp a
1317   0C77 D7            push a
1318   0C78 FD AB         swp b
1319   0C7A D8            push b
1320   0C7B 07 AF 10      call printx32
1321   0C7E 51 04 00      add sp, 4
1322   0C81             ; --- END FUNCTION CALL
1323   0C81 0A 90 0C      jmp _if28_exit
1324   0C84             _if28_else:
1325   0C84             ; err("Unexpected format in printf."); 
1326   0C84             ; --- START FUNCTION CALL
1327   0C84 26 A4 1D      mov b, _s4 ; "Unexpected format in printf."
1328   0C87 FD AB         swp b
1329   0C89 D8            push b
1330   0C8A 07 0F 11      call err
1331   0C8D 51 02 00      add sp, 2
1332   0C90             ; --- END FUNCTION CALL
1333   0C90             _if28_exit:
1334   0C90             _if27_exit:
1335   0C90             _if26_exit:
1336   0C90             ; p = p + 4; 
1337   0C90 FA FF FF      lea d, [bp + -1] ; $p
1338   0C93 DA            push d
1339   0C94 FA FF FF      lea d, [bp + -1] ; $p
1340   0C97 2A            mov b, [d]
1341   0C98 38 00 00      mov c, 0
1342   0C9B             ; --- START TERMS
1343   0C9B D7            push a
1344   0C9C 11            mov a, b
1345   0C9D FD 2E 04 00   mov32 cb, $00000004
1345   0CA1 00 00 
1346   0CA3 56            add b, a
1347   0CA4 E4            pop a
1348   0CA5             ; --- END TERMS
1349   0CA5 E7            pop d
1350   0CA6 FD 43         mov [d], b
1351   0CA8             ; break; 
1352   0CA8 0A A4 0D      jmp _switch25_exit ; case break
1353   0CAB             _switch25_case2:
1354   0CAB             _switch25_case3:
1355   0CAB             ; print_signed(*(int*)p); 
1356   0CAB             ; --- START FUNCTION CALL
1357   0CAB FA FF FF      lea d, [bp + -1] ; $p
1358   0CAE 2A            mov b, [d]
1359   0CAF 38 00 00      mov c, 0
1360   0CB2 74            mov d, b
1361   0CB3 2A            mov b, [d]
1362   0CB4 38 00 00      mov c, 0
1363   0CB7 FD AB         swp b
1364   0CB9 D8            push b
1365   0CBA 07 3D 11      call print_signed
1366   0CBD 51 02 00      add sp, 2
1367   0CC0             ; --- END FUNCTION CALL
1368   0CC0             ; p = p + 2; 
1369   0CC0 FA FF FF      lea d, [bp + -1] ; $p
1370   0CC3 DA            push d
1371   0CC4 FA FF FF      lea d, [bp + -1] ; $p
1372   0CC7 2A            mov b, [d]
1373   0CC8 38 00 00      mov c, 0
1374   0CCB             ; --- START TERMS
1375   0CCB D7            push a
1376   0CCC 11            mov a, b
1377   0CCD FD 2E 02 00   mov32 cb, $00000002
1377   0CD1 00 00 
1378   0CD3 56            add b, a
1379   0CD4 E4            pop a
1380   0CD5             ; --- END TERMS
1381   0CD5 E7            pop d
1382   0CD6 FD 43         mov [d], b
1383   0CD8             ; break; 
1384   0CD8 0A A4 0D      jmp _switch25_exit ; case break
1385   0CDB             _switch25_case4:
1386   0CDB             ; print_unsigned(*(unsigned int*)p); 
1387   0CDB             ; --- START FUNCTION CALL
1388   0CDB FA FF FF      lea d, [bp + -1] ; $p
1389   0CDE 2A            mov b, [d]
1390   0CDF 38 00 00      mov c, 0
1391   0CE2 74            mov d, b
1392   0CE3 2A            mov b, [d]
1393   0CE4 38 00 00      mov c, 0
1394   0CE7 FD AB         swp b
1395   0CE9 D8            push b
1396   0CEA 07 8E 12      call print_unsigned
1397   0CED 51 02 00      add sp, 2
1398   0CF0             ; --- END FUNCTION CALL
1399   0CF0             ; p = p + 2; 
1400   0CF0 FA FF FF      lea d, [bp + -1] ; $p
1401   0CF3 DA            push d
1402   0CF4 FA FF FF      lea d, [bp + -1] ; $p
1403   0CF7 2A            mov b, [d]
1404   0CF8 38 00 00      mov c, 0
1405   0CFB             ; --- START TERMS
1406   0CFB D7            push a
1407   0CFC 11            mov a, b
1408   0CFD FD 2E 02 00   mov32 cb, $00000002
1408   0D01 00 00 
1409   0D03 56            add b, a
1410   0D04 E4            pop a
1411   0D05             ; --- END TERMS
1412   0D05 E7            pop d
1413   0D06 FD 43         mov [d], b
1414   0D08             ; break; 
1415   0D08 0A A4 0D      jmp _switch25_exit ; case break
1416   0D0B             _switch25_case5:
1417   0D0B             ; printx16(*(int*)p); 
1418   0D0B             ; --- START FUNCTION CALL
1419   0D0B FA FF FF      lea d, [bp + -1] ; $p
1420   0D0E 2A            mov b, [d]
1421   0D0F 38 00 00      mov c, 0
1422   0D12 74            mov d, b
1423   0D13 2A            mov b, [d]
1424   0D14 38 00 00      mov c, 0
1425   0D17 FD AB         swp b
1426   0D19 D8            push b
1427   0D1A 07 A6 13      call printx16
1428   0D1D 51 02 00      add sp, 2
1429   0D20             ; --- END FUNCTION CALL
1430   0D20             ; p = p + 2; 
1431   0D20 FA FF FF      lea d, [bp + -1] ; $p
1432   0D23 DA            push d
1433   0D24 FA FF FF      lea d, [bp + -1] ; $p
1434   0D27 2A            mov b, [d]
1435   0D28 38 00 00      mov c, 0
1436   0D2B             ; --- START TERMS
1437   0D2B D7            push a
1438   0D2C 11            mov a, b
1439   0D2D FD 2E 02 00   mov32 cb, $00000002
1439   0D31 00 00 
1440   0D33 56            add b, a
1441   0D34 E4            pop a
1442   0D35             ; --- END TERMS
1443   0D35 E7            pop d
1444   0D36 FD 43         mov [d], b
1445   0D38             ; break; 
1446   0D38 0A A4 0D      jmp _switch25_exit ; case break
1447   0D3B             _switch25_case6:
1448   0D3B             ; putchar(*(char*)p); 
1449   0D3B             ; --- START FUNCTION CALL
1450   0D3B FA FF FF      lea d, [bp + -1] ; $p
1451   0D3E 2A            mov b, [d]
1452   0D3F 38 00 00      mov c, 0
1453   0D42 74            mov d, b
1454   0D43 32            mov bl, [d]
1455   0D44 A7 00         mov bh, 0
1456   0D46 38 00 00      mov c, 0
1457   0D49 DD            push bl
1458   0D4A 07 63 0F      call putchar
1459   0D4D 51 01 00      add sp, 1
1460   0D50             ; --- END FUNCTION CALL
1461   0D50             ; p = p + 2; 
1462   0D50 FA FF FF      lea d, [bp + -1] ; $p
1463   0D53 DA            push d
1464   0D54 FA FF FF      lea d, [bp + -1] ; $p
1465   0D57 2A            mov b, [d]
1466   0D58 38 00 00      mov c, 0
1467   0D5B             ; --- START TERMS
1468   0D5B D7            push a
1469   0D5C 11            mov a, b
1470   0D5D FD 2E 02 00   mov32 cb, $00000002
1470   0D61 00 00 
1471   0D63 56            add b, a
1472   0D64 E4            pop a
1473   0D65             ; --- END TERMS
1474   0D65 E7            pop d
1475   0D66 FD 43         mov [d], b
1476   0D68             ; break; 
1477   0D68 0A A4 0D      jmp _switch25_exit ; case break
1478   0D6B             _switch25_case7:
1479   0D6B             ; print(*(char**)p); 
1480   0D6B             ; --- START FUNCTION CALL
1481   0D6B FA FF FF      lea d, [bp + -1] ; $p
1482   0D6E 2A            mov b, [d]
1483   0D6F 38 00 00      mov c, 0
1484   0D72 74            mov d, b
1485   0D73 2A            mov b, [d]
1486   0D74 FD AB         swp b
1487   0D76 D8            push b
1488   0D77 07 24 11      call print
1489   0D7A 51 02 00      add sp, 2
1490   0D7D             ; --- END FUNCTION CALL
1491   0D7D             ; p = p + 2; 
1492   0D7D FA FF FF      lea d, [bp + -1] ; $p
1493   0D80 DA            push d
1494   0D81 FA FF FF      lea d, [bp + -1] ; $p
1495   0D84 2A            mov b, [d]
1496   0D85 38 00 00      mov c, 0
1497   0D88             ; --- START TERMS
1498   0D88 D7            push a
1499   0D89 11            mov a, b
1500   0D8A FD 2E 02 00   mov32 cb, $00000002
1500   0D8E 00 00 
1501   0D90 56            add b, a
1502   0D91 E4            pop a
1503   0D92             ; --- END TERMS
1504   0D92 E7            pop d
1505   0D93 FD 43         mov [d], b
1506   0D95             ; break; 
1507   0D95 0A A4 0D      jmp _switch25_exit ; case break
1508   0D98             _switch25_default:
1509   0D98             ; print("Error: Unknown argument type.\n"); 
1510   0D98             ; --- START FUNCTION CALL
1511   0D98 26 C1 1D      mov b, _s5 ; "Error: Unknown argument type.\n"
1512   0D9B FD AB         swp b
1513   0D9D D8            push b
1514   0D9E 07 24 11      call print
1515   0DA1 51 02 00      add sp, 2
1516   0DA4             ; --- END FUNCTION CALL
1517   0DA4             _switch25_exit:
1518   0DA4 0A BC 0D      jmp _if24_exit
1519   0DA7             _if24_else:
1520   0DA7             ; putchar(*format_p); 
1521   0DA7             ; --- START FUNCTION CALL
1522   0DA7 FA FD FF      lea d, [bp + -3] ; $format_p
1523   0DAA 2A            mov b, [d]
1524   0DAB 38 00 00      mov c, 0
1525   0DAE 74            mov d, b
1526   0DAF 32            mov bl, [d]
1527   0DB0 A7 00         mov bh, 0
1528   0DB2 38 00 00      mov c, 0
1529   0DB5 DD            push bl
1530   0DB6 07 63 0F      call putchar
1531   0DB9 51 01 00      add sp, 1
1532   0DBC             ; --- END FUNCTION CALL
1533   0DBC             _if24_exit:
1534   0DBC             _if23_exit:
1535   0DBC             ; format_p++; 
1536   0DBC FA FD FF      lea d, [bp + -3] ; $format_p
1537   0DBF 2A            mov b, [d]
1538   0DC0 38 00 00      mov c, 0
1539   0DC3 FD 77         inc b
1540   0DC5 FA FD FF      lea d, [bp + -3] ; $format_p
1541   0DC8 FD 43         mov [d], b
1542   0DCA FD 7D         dec b
1543   0DCC             _for22_update:
1544   0DCC 0A 10 0B      jmp _for22_cond
1545   0DCF             _for22_exit:
1546   0DCF F9            leave
1547   0DD0 09            ret
1548   0DD1             
1549   0DD1             print_signed_long:
1550   0DD1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1551   0DD4             ; char digits[10]; 
1552   0DD4 52 0A 00      sub sp, 10
1553   0DD7             ; int i = 0; 
1554   0DD7 52 02 00      sub sp, 2
1555   0DDA             ; --- START LOCAL VAR INITIALIZATION
1556   0DDA FA F5 FF      lea d, [bp + -11] ; $i
1557   0DDD DA            push d
1558   0DDE FD 2E 00 00   mov32 cb, $00000000
1558   0DE2 00 00 
1559   0DE4 E7            pop d
1560   0DE5 FD 43         mov [d], b
1561   0DE7             ; --- END LOCAL VAR INITIALIZATION
1562   0DE7             ; if (num < 0) { 
1563   0DE7             _if29_cond:
1564   0DE7 FA 05 00      lea d, [bp + 5] ; $num
1565   0DEA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1566   0DED FD 39         mov c, b ; And place it into C
1567   0DEF 2A            mov b, [d] ; Lower Word in B
1568   0DF0             ; --- START RELATIONAL
1569   0DF0 D7            push a
1570   0DF1 FD D8         push g
1571   0DF3 11            mov a, b
1572   0DF4 FD 7A         mov g, c
1573   0DF6 FD 2E 00 00   mov32 cb, $00000000
1573   0DFA 00 00 
1574   0DFC 38 00 00      mov c, 0
1575   0DFF FD AF         cmp32 ga, cb
1576   0E01 FD 73         slt ; <
1577   0E03 FD F1         pop g
1578   0E05 E4            pop a
1579   0E06             ; --- END RELATIONAL
1580   0E06 C0 00 00      cmp b, 0
1581   0E09 C6 3B 0E      je _if29_else
1582   0E0C             _if29_TRUE:
1583   0E0C             ; putchar('-'); 
1584   0E0C             ; --- START FUNCTION CALL
1585   0E0C FD 2E 2D 00   mov32 cb, $0000002d
1585   0E10 00 00 
1586   0E12 DD            push bl
1587   0E13 07 63 0F      call putchar
1588   0E16 51 01 00      add sp, 1
1589   0E19             ; --- END FUNCTION CALL
1590   0E19             ; num = -num; 
1591   0E19 FA 05 00      lea d, [bp + 5] ; $num
1592   0E1C DA            push d
1593   0E1D FA 05 00      lea d, [bp + 5] ; $num
1594   0E20 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1595   0E23 FD 39         mov c, b ; And place it into C
1596   0E25 2A            mov b, [d] ; Lower Word in B
1597   0E26 12            mov a, c
1598   0E27 95            not a
1599   0E28 97            not b
1600   0E29 55 01 00      add b, 1
1601   0E2C 5B 00 00      adc a, 0
1602   0E2F 39            mov c, a
1603   0E30 E7            pop d
1604   0E31 FD 43         mov [d], b
1605   0E33 28            mov b, c
1606   0E34 FD 44 02 00   mov [d + 2], b
1607   0E38 0A 72 0E      jmp _if29_exit
1608   0E3B             _if29_else:
1609   0E3B             ; if (num == 0) { 
1610   0E3B             _if30_cond:
1611   0E3B FA 05 00      lea d, [bp + 5] ; $num
1612   0E3E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1613   0E41 FD 39         mov c, b ; And place it into C
1614   0E43 2A            mov b, [d] ; Lower Word in B
1615   0E44             ; --- START RELATIONAL
1616   0E44 D7            push a
1617   0E45 FD D8         push g
1618   0E47 11            mov a, b
1619   0E48 FD 7A         mov g, c
1620   0E4A FD 2E 00 00   mov32 cb, $00000000
1620   0E4E 00 00 
1621   0E50 38 00 00      mov c, 0
1622   0E53 FD AF         cmp32 ga, cb
1623   0E55 FD 71         seq ; ==
1624   0E57 FD F1         pop g
1625   0E59 E4            pop a
1626   0E5A             ; --- END RELATIONAL
1627   0E5A C0 00 00      cmp b, 0
1628   0E5D C6 72 0E      je _if30_exit
1629   0E60             _if30_TRUE:
1630   0E60             ; putchar('0'); 
1631   0E60             ; --- START FUNCTION CALL
1632   0E60 FD 2E 30 00   mov32 cb, $00000030
1632   0E64 00 00 
1633   0E66 DD            push bl
1634   0E67 07 63 0F      call putchar
1635   0E6A 51 01 00      add sp, 1
1636   0E6D             ; --- END FUNCTION CALL
1637   0E6D             ; return; 
1638   0E6D F9            leave
1639   0E6E 09            ret
1640   0E6F 0A 72 0E      jmp _if30_exit
1641   0E72             _if30_exit:
1642   0E72             _if29_exit:
1643   0E72             ; while (num > 0) { 
1644   0E72             _while31_cond:
1645   0E72 FA 05 00      lea d, [bp + 5] ; $num
1646   0E75 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1647   0E78 FD 39         mov c, b ; And place it into C
1648   0E7A 2A            mov b, [d] ; Lower Word in B
1649   0E7B             ; --- START RELATIONAL
1650   0E7B D7            push a
1651   0E7C FD D8         push g
1652   0E7E 11            mov a, b
1653   0E7F FD 7A         mov g, c
1654   0E81 FD 2E 00 00   mov32 cb, $00000000
1654   0E85 00 00 
1655   0E87 38 00 00      mov c, 0
1656   0E8A FD AF         cmp32 ga, cb
1657   0E8C FD 7F         sgt
1658   0E8E FD F1         pop g
1659   0E90 E4            pop a
1660   0E91             ; --- END RELATIONAL
1661   0E91 C0 00 00      cmp b, 0
1662   0E94 C6 19 0F      je _while31_exit
1663   0E97             _while31_block:
1664   0E97             ; digits[i] = '0' + (num % 10); 
1665   0E97 FA F7 FF      lea d, [bp + -9] ; $digits
1666   0E9A D7            push a
1667   0E9B DA            push d
1668   0E9C FA F5 FF      lea d, [bp + -11] ; $i
1669   0E9F 2A            mov b, [d]
1670   0EA0 38 00 00      mov c, 0
1671   0EA3 E7            pop d
1672   0EA4 5A            add d, b
1673   0EA5 E4            pop a
1674   0EA6 DA            push d
1675   0EA7 FD 2E 30 00   mov32 cb, $00000030
1675   0EAB 00 00 
1676   0EAD             ; --- START TERMS
1677   0EAD D7            push a
1678   0EAE 11            mov a, b
1679   0EAF FA 05 00      lea d, [bp + 5] ; $num
1680   0EB2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1681   0EB5 FD 39         mov c, b ; And place it into C
1682   0EB7 2A            mov b, [d] ; Lower Word in B
1683   0EB8             ; --- START FACTORS
1684   0EB8 D7            push a
1685   0EB9 FD D8         push g
1686   0EBB 11            mov a, b
1687   0EBC FD 7A         mov g, c
1688   0EBE FD 2E 0A 00   mov32 cb, $0000000a
1688   0EC2 00 00 
1689   0EC4 FD D8         push g ; save 'g' as the div instruction uses it
1690   0EC6 AE            div a, b ; %, a: quotient, b: remainder
1691   0EC7 11            mov a, b
1692   0EC8 FD F1         pop g
1693   0ECA FD 38         mov c, g
1694   0ECC 27            mov b, a
1695   0ECD FD F1         pop g
1696   0ECF E4            pop a
1697   0ED0             ; --- END FACTORS
1698   0ED0 FD 22 00 00   mov g, 0
1699   0ED4 FD 15         add32 cb, ga
1700   0ED6 E4            pop a
1701   0ED7             ; --- END TERMS
1702   0ED7 E7            pop d
1703   0ED8 FD 3E         mov [d], bl
1704   0EDA             ; num = num / 10; 
1705   0EDA FA 05 00      lea d, [bp + 5] ; $num
1706   0EDD DA            push d
1707   0EDE FA 05 00      lea d, [bp + 5] ; $num
1708   0EE1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1709   0EE4 FD 39         mov c, b ; And place it into C
1710   0EE6 2A            mov b, [d] ; Lower Word in B
1711   0EE7             ; --- START FACTORS
1712   0EE7 D7            push a
1713   0EE8 FD D8         push g
1714   0EEA 11            mov a, b
1715   0EEB FD 7A         mov g, c
1716   0EED FD 2E 0A 00   mov32 cb, $0000000a
1716   0EF1 00 00 
1717   0EF3 FD D8         push g ; save 'g' as the div instruction uses it
1718   0EF5 AE            div a, b ; /, a: quotient, b: remainder
1719   0EF6 FD F1         pop g
1720   0EF8 FD 38         mov c, g
1721   0EFA 27            mov b, a
1722   0EFB FD F1         pop g
1723   0EFD E4            pop a
1724   0EFE             ; --- END FACTORS
1725   0EFE E7            pop d
1726   0EFF FD 43         mov [d], b
1727   0F01 28            mov b, c
1728   0F02 FD 44 02 00   mov [d + 2], b
1729   0F06             ; i++; 
1730   0F06 FA F5 FF      lea d, [bp + -11] ; $i
1731   0F09 2A            mov b, [d]
1732   0F0A 38 00 00      mov c, 0
1733   0F0D 11            mov a, b
1734   0F0E FD 77         inc b
1735   0F10 FA F5 FF      lea d, [bp + -11] ; $i
1736   0F13 FD 43         mov [d], b
1737   0F15 27            mov b, a
1738   0F16 0A 72 0E      jmp _while31_cond
1739   0F19             _while31_exit:
1740   0F19             ; while (i > 0) { 
1741   0F19             _while38_cond:
1742   0F19 FA F5 FF      lea d, [bp + -11] ; $i
1743   0F1C 2A            mov b, [d]
1744   0F1D 38 00 00      mov c, 0
1745   0F20             ; --- START RELATIONAL
1746   0F20 D7            push a
1747   0F21 11            mov a, b
1748   0F22 FD 2E 00 00   mov32 cb, $00000000
1748   0F26 00 00 
1749   0F28 B0            cmp a, b
1750   0F29 FD 7F         sgt ; >
1751   0F2B E4            pop a
1752   0F2C             ; --- END RELATIONAL
1753   0F2C C0 00 00      cmp b, 0
1754   0F2F C6 61 0F      je _while38_exit
1755   0F32             _while38_block:
1756   0F32             ; i--; 
1757   0F32 FA F5 FF      lea d, [bp + -11] ; $i
1758   0F35 2A            mov b, [d]
1759   0F36 38 00 00      mov c, 0
1760   0F39 11            mov a, b
1761   0F3A FD 7D         dec b
1762   0F3C FA F5 FF      lea d, [bp + -11] ; $i
1763   0F3F FD 43         mov [d], b
1764   0F41 27            mov b, a
1765   0F42             ; putchar(digits[i]); 
1766   0F42             ; --- START FUNCTION CALL
1767   0F42 FA F7 FF      lea d, [bp + -9] ; $digits
1768   0F45 D7            push a
1769   0F46 DA            push d
1770   0F47 FA F5 FF      lea d, [bp + -11] ; $i
1771   0F4A 2A            mov b, [d]
1772   0F4B 38 00 00      mov c, 0
1773   0F4E E7            pop d
1774   0F4F 5A            add d, b
1775   0F50 E4            pop a
1776   0F51 32            mov bl, [d]
1777   0F52 A7 00         mov bh, 0
1778   0F54 38 00 00      mov c, 0
1779   0F57 DD            push bl
1780   0F58 07 63 0F      call putchar
1781   0F5B 51 01 00      add sp, 1
1782   0F5E             ; --- END FUNCTION CALL
1783   0F5E 0A 19 0F      jmp _while38_cond
1784   0F61             _while38_exit:
1785   0F61 F9            leave
1786   0F62 09            ret
1787   0F63             
1788   0F63             putchar:
1789   0F63 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1790   0F66             ; --- BEGIN INLINE ASM SEGMENT
1791   0F66 FA 05 00      lea d, [bp + 5] ; $c
1792   0F69 1E            mov al, [d]
1793   0F6A 23            mov ah, al
1794   0F6B 19 00         mov al, 0
1795   0F6D 05 03         syscall sys_io      ; char in AH
1796   0F6F             ; --- END INLINE ASM SEGMENT
1797   0F6F F9            leave
1798   0F70 09            ret
1799   0F71             
1800   0F71             print_unsigned_long:
1801   0F71 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1802   0F74             ; char digits[10]; 
1803   0F74 52 0A 00      sub sp, 10
1804   0F77             ; int i; 
1805   0F77 52 02 00      sub sp, 2
1806   0F7A             ; i = 0; 
1807   0F7A FA F5 FF      lea d, [bp + -11] ; $i
1808   0F7D DA            push d
1809   0F7E FD 2E 00 00   mov32 cb, $00000000
1809   0F82 00 00 
1810   0F84 E7            pop d
1811   0F85 FD 43         mov [d], b
1812   0F87             ; if(num == 0){ 
1813   0F87             _if39_cond:
1814   0F87 FA 05 00      lea d, [bp + 5] ; $num
1815   0F8A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1816   0F8D FD 39         mov c, b ; And place it into C
1817   0F8F 2A            mov b, [d] ; Lower Word in B
1818   0F90             ; --- START RELATIONAL
1819   0F90 D7            push a
1820   0F91 FD D8         push g
1821   0F93 11            mov a, b
1822   0F94 FD 7A         mov g, c
1823   0F96 FD 2E 00 00   mov32 cb, $00000000
1823   0F9A 00 00 
1824   0F9C 38 00 00      mov c, 0
1825   0F9F FD AF         cmp32 ga, cb
1826   0FA1 FD 71         seq ; ==
1827   0FA3 FD F1         pop g
1828   0FA5 E4            pop a
1829   0FA6             ; --- END RELATIONAL
1830   0FA6 C0 00 00      cmp b, 0
1831   0FA9 C6 BE 0F      je _if39_exit
1832   0FAC             _if39_TRUE:
1833   0FAC             ; putchar('0'); 
1834   0FAC             ; --- START FUNCTION CALL
1835   0FAC FD 2E 30 00   mov32 cb, $00000030
1835   0FB0 00 00 
1836   0FB2 DD            push bl
1837   0FB3 07 63 0F      call putchar
1838   0FB6 51 01 00      add sp, 1
1839   0FB9             ; --- END FUNCTION CALL
1840   0FB9             ; return; 
1841   0FB9 F9            leave
1842   0FBA 09            ret
1843   0FBB 0A BE 0F      jmp _if39_exit
1844   0FBE             _if39_exit:
1845   0FBE             ; while (num > 0) { 
1846   0FBE             _while40_cond:
1847   0FBE FA 05 00      lea d, [bp + 5] ; $num
1848   0FC1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1849   0FC4 FD 39         mov c, b ; And place it into C
1850   0FC6 2A            mov b, [d] ; Lower Word in B
1851   0FC7             ; --- START RELATIONAL
1852   0FC7 D7            push a
1853   0FC8 FD D8         push g
1854   0FCA 11            mov a, b
1855   0FCB FD 7A         mov g, c
1856   0FCD FD 2E 00 00   mov32 cb, $00000000
1856   0FD1 00 00 
1857   0FD3 38 00 00      mov c, 0
1858   0FD6 FD AF         cmp32 ga, cb
1859   0FD8 FD 81         sgu
1860   0FDA FD F1         pop g
1861   0FDC E4            pop a
1862   0FDD             ; --- END RELATIONAL
1863   0FDD C0 00 00      cmp b, 0
1864   0FE0 C6 65 10      je _while40_exit
1865   0FE3             _while40_block:
1866   0FE3             ; digits[i] = '0' + (num % 10); 
1867   0FE3 FA F7 FF      lea d, [bp + -9] ; $digits
1868   0FE6 D7            push a
1869   0FE7 DA            push d
1870   0FE8 FA F5 FF      lea d, [bp + -11] ; $i
1871   0FEB 2A            mov b, [d]
1872   0FEC 38 00 00      mov c, 0
1873   0FEF E7            pop d
1874   0FF0 5A            add d, b
1875   0FF1 E4            pop a
1876   0FF2 DA            push d
1877   0FF3 FD 2E 30 00   mov32 cb, $00000030
1877   0FF7 00 00 
1878   0FF9             ; --- START TERMS
1879   0FF9 D7            push a
1880   0FFA 11            mov a, b
1881   0FFB FA 05 00      lea d, [bp + 5] ; $num
1882   0FFE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1883   1001 FD 39         mov c, b ; And place it into C
1884   1003 2A            mov b, [d] ; Lower Word in B
1885   1004             ; --- START FACTORS
1886   1004 D7            push a
1887   1005 FD D8         push g
1888   1007 11            mov a, b
1889   1008 FD 7A         mov g, c
1890   100A FD 2E 0A 00   mov32 cb, $0000000a
1890   100E 00 00 
1891   1010 FD D8         push g ; save 'g' as the div instruction uses it
1892   1012 AE            div a, b ; %, a: quotient, b: remainder
1893   1013 11            mov a, b
1894   1014 FD F1         pop g
1895   1016 FD 38         mov c, g
1896   1018 27            mov b, a
1897   1019 FD F1         pop g
1898   101B E4            pop a
1899   101C             ; --- END FACTORS
1900   101C FD 22 00 00   mov g, 0
1901   1020 FD 15         add32 cb, ga
1902   1022 E4            pop a
1903   1023             ; --- END TERMS
1904   1023 E7            pop d
1905   1024 FD 3E         mov [d], bl
1906   1026             ; num = num / 10; 
1907   1026 FA 05 00      lea d, [bp + 5] ; $num
1908   1029 DA            push d
1909   102A FA 05 00      lea d, [bp + 5] ; $num
1910   102D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1911   1030 FD 39         mov c, b ; And place it into C
1912   1032 2A            mov b, [d] ; Lower Word in B
1913   1033             ; --- START FACTORS
1914   1033 D7            push a
1915   1034 FD D8         push g
1916   1036 11            mov a, b
1917   1037 FD 7A         mov g, c
1918   1039 FD 2E 0A 00   mov32 cb, $0000000a
1918   103D 00 00 
1919   103F FD D8         push g ; save 'g' as the div instruction uses it
1920   1041 AE            div a, b ; /, a: quotient, b: remainder
1921   1042 FD F1         pop g
1922   1044 FD 38         mov c, g
1923   1046 27            mov b, a
1924   1047 FD F1         pop g
1925   1049 E4            pop a
1926   104A             ; --- END FACTORS
1927   104A E7            pop d
1928   104B FD 43         mov [d], b
1929   104D 28            mov b, c
1930   104E FD 44 02 00   mov [d + 2], b
1931   1052             ; i++; 
1932   1052 FA F5 FF      lea d, [bp + -11] ; $i
1933   1055 2A            mov b, [d]
1934   1056 38 00 00      mov c, 0
1935   1059 11            mov a, b
1936   105A FD 77         inc b
1937   105C FA F5 FF      lea d, [bp + -11] ; $i
1938   105F FD 43         mov [d], b
1939   1061 27            mov b, a
1940   1062 0A BE 0F      jmp _while40_cond
1941   1065             _while40_exit:
1942   1065             ; while (i > 0) { 
1943   1065             _while47_cond:
1944   1065 FA F5 FF      lea d, [bp + -11] ; $i
1945   1068 2A            mov b, [d]
1946   1069 38 00 00      mov c, 0
1947   106C             ; --- START RELATIONAL
1948   106C D7            push a
1949   106D 11            mov a, b
1950   106E FD 2E 00 00   mov32 cb, $00000000
1950   1072 00 00 
1951   1074 B0            cmp a, b
1952   1075 FD 7F         sgt ; >
1953   1077 E4            pop a
1954   1078             ; --- END RELATIONAL
1955   1078 C0 00 00      cmp b, 0
1956   107B C6 AD 10      je _while47_exit
1957   107E             _while47_block:
1958   107E             ; i--; 
1959   107E FA F5 FF      lea d, [bp + -11] ; $i
1960   1081 2A            mov b, [d]
1961   1082 38 00 00      mov c, 0
1962   1085 11            mov a, b
1963   1086 FD 7D         dec b
1964   1088 FA F5 FF      lea d, [bp + -11] ; $i
1965   108B FD 43         mov [d], b
1966   108D 27            mov b, a
1967   108E             ; putchar(digits[i]); 
1968   108E             ; --- START FUNCTION CALL
1969   108E FA F7 FF      lea d, [bp + -9] ; $digits
1970   1091 D7            push a
1971   1092 DA            push d
1972   1093 FA F5 FF      lea d, [bp + -11] ; $i
1973   1096 2A            mov b, [d]
1974   1097 38 00 00      mov c, 0
1975   109A E7            pop d
1976   109B 5A            add d, b
1977   109C E4            pop a
1978   109D 32            mov bl, [d]
1979   109E A7 00         mov bh, 0
1980   10A0 38 00 00      mov c, 0
1981   10A3 DD            push bl
1982   10A4 07 63 0F      call putchar
1983   10A7 51 01 00      add sp, 1
1984   10AA             ; --- END FUNCTION CALL
1985   10AA 0A 65 10      jmp _while47_cond
1986   10AD             _while47_exit:
1987   10AD F9            leave
1988   10AE 09            ret
1989   10AF             
1990   10AF             printx32:
1991   10AF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1992   10B2             ; --- BEGIN INLINE ASM SEGMENT
1993   10B2 FA 05 00      lea d, [bp + 5] ; $hex
1994   10B5 2B 02 00      mov b, [d+2]
1995   10B8 07 C1 10      call print_u16x_printx32
1996   10BB 2A            mov b, [d]
1997   10BC 07 C1 10      call print_u16x_printx32
1998   10BF             ; --- END INLINE ASM SEGMENT
1999   10BF             ; return; 
2000   10BF F9            leave
2001   10C0 09            ret
2002   10C1             ; --- BEGIN INLINE ASM SEGMENT
2003   10C1             print_u16x_printx32:
2004   10C1 D7            push a
2005   10C2 D8            push b
2006   10C3 DD            push bl
2007   10C4 30            mov bl, bh
2008   10C5 07 E3 10      call _itoa_printx32        ; convert bh to char in A
2009   10C8 2F            mov bl, al        ; save al
2010   10C9 19 00         mov al, 0
2011   10CB 05 03         syscall sys_io        ; display AH
2012   10CD 24            mov ah, bl        ; retrieve al
2013   10CE 19 00         mov al, 0
2014   10D0 05 03         syscall sys_io        ; display AL
2015   10D2 EA            pop bl
2016   10D3 07 E3 10      call _itoa_printx32        ; convert bh to char in A
2017   10D6 2F            mov bl, al        ; save al
2018   10D7 19 00         mov al, 0
2019   10D9 05 03         syscall sys_io        ; display AH
2020   10DB 24            mov ah, bl        ; retrieve al
2021   10DC 19 00         mov al, 0
2022   10DE 05 03         syscall sys_io        ; display AL
2023   10E0 E5            pop b
2024   10E1 E4            pop a
2025   10E2 09            ret
2026   10E3             _itoa_printx32:
2027   10E3 DA            push d
2028   10E4 D8            push b
2029   10E5 A7 00         mov bh, 0
2030   10E7 FD A4 04      shr bl, 4  
2031   10EA 74            mov d, b
2032   10EB 1F FD 10      mov al, [d + s_hex_digits_printx32]
2033   10EE 23            mov ah, al
2034   10EF E5            pop b
2035   10F0 D8            push b
2036   10F1 A7 00         mov bh, 0
2037   10F3 FD 87 0F      and bl, $0F
2038   10F6 74            mov d, b
2039   10F7 1F FD 10      mov al, [d + s_hex_digits_printx32]
2040   10FA E5            pop b
2041   10FB E7            pop d
2042   10FC 09            ret
2043   10FD 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2043   1101 34 35 36 37 
2043   1105 38 39 41 42 
2043   1109 43 44 45 46 
2044   110D             ; --- END INLINE ASM SEGMENT
2045   110D F9            leave
2046   110E 09            ret
2047   110F             
2048   110F             err:
2049   110F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2050   1112             ; print(e); 
2051   1112             ; --- START FUNCTION CALL
2052   1112 FA 05 00      lea d, [bp + 5] ; $e
2053   1115 2A            mov b, [d]
2054   1116 38 00 00      mov c, 0
2055   1119 FD AB         swp b
2056   111B D8            push b
2057   111C 07 24 11      call print
2058   111F 51 02 00      add sp, 2
2059   1122             ; --- END FUNCTION CALL
2060   1122 F9            leave
2061   1123 09            ret
2062   1124             
2063   1124             print:
2064   1124 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2065   1127             ; --- BEGIN INLINE ASM SEGMENT
2066   1127 FA 05 00      lea d, [bp + 5] ; $s
2067   112A FD 2A         mov d, [d]
2068   112C             _puts_L1_print:
2069   112C 1E            mov al, [d]
2070   112D B9 00         cmp al, 0
2071   112F C6 3B 11      jz _puts_END_print
2072   1132 23            mov ah, al
2073   1133 19 00         mov al, 0
2074   1135 05 03         syscall sys_io
2075   1137 79            inc d
2076   1138 0A 2C 11      jmp _puts_L1_print
2077   113B             _puts_END_print:
2078   113B             ; --- END INLINE ASM SEGMENT
2079   113B F9            leave
2080   113C 09            ret
2081   113D             
2082   113D             print_signed:
2083   113D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2084   1140             ; char digits[5]; 
2085   1140 52 05 00      sub sp, 5
2086   1143             ; int i = 0; 
2087   1143 52 02 00      sub sp, 2
2088   1146             ; --- START LOCAL VAR INITIALIZATION
2089   1146 FA FA FF      lea d, [bp + -6] ; $i
2090   1149 DA            push d
2091   114A FD 2E 00 00   mov32 cb, $00000000
2091   114E 00 00 
2092   1150 E7            pop d
2093   1151 FD 43         mov [d], b
2094   1153             ; --- END LOCAL VAR INITIALIZATION
2095   1153             ; if (num < 0) { 
2096   1153             _if48_cond:
2097   1153 FA 05 00      lea d, [bp + 5] ; $num
2098   1156 2A            mov b, [d]
2099   1157 38 00 00      mov c, 0
2100   115A             ; --- START RELATIONAL
2101   115A D7            push a
2102   115B 11            mov a, b
2103   115C FD 2E 00 00   mov32 cb, $00000000
2103   1160 00 00 
2104   1162 B0            cmp a, b
2105   1163 FD 73         slt ; < (signed)
2106   1165 E4            pop a
2107   1166             ; --- END RELATIONAL
2108   1166 C0 00 00      cmp b, 0
2109   1169 C6 8C 11      je _if48_else
2110   116C             _if48_TRUE:
2111   116C             ; putchar('-'); 
2112   116C             ; --- START FUNCTION CALL
2113   116C FD 2E 2D 00   mov32 cb, $0000002d
2113   1170 00 00 
2114   1172 DD            push bl
2115   1173 07 63 0F      call putchar
2116   1176 51 01 00      add sp, 1
2117   1179             ; --- END FUNCTION CALL
2118   1179             ; num = -num; 
2119   1179 FA 05 00      lea d, [bp + 5] ; $num
2120   117C DA            push d
2121   117D FA 05 00      lea d, [bp + 5] ; $num
2122   1180 2A            mov b, [d]
2123   1181 38 00 00      mov c, 0
2124   1184 FD 97         neg b
2125   1186 E7            pop d
2126   1187 FD 43         mov [d], b
2127   1189 0A B7 11      jmp _if48_exit
2128   118C             _if48_else:
2129   118C             ; if (num == 0) { 
2130   118C             _if49_cond:
2131   118C FA 05 00      lea d, [bp + 5] ; $num
2132   118F 2A            mov b, [d]
2133   1190 38 00 00      mov c, 0
2134   1193             ; --- START RELATIONAL
2135   1193 D7            push a
2136   1194 11            mov a, b
2137   1195 FD 2E 00 00   mov32 cb, $00000000
2137   1199 00 00 
2138   119B B0            cmp a, b
2139   119C FD 71         seq ; ==
2140   119E E4            pop a
2141   119F             ; --- END RELATIONAL
2142   119F C0 00 00      cmp b, 0
2143   11A2 C6 B7 11      je _if49_exit
2144   11A5             _if49_TRUE:
2145   11A5             ; putchar('0'); 
2146   11A5             ; --- START FUNCTION CALL
2147   11A5 FD 2E 30 00   mov32 cb, $00000030
2147   11A9 00 00 
2148   11AB DD            push bl
2149   11AC 07 63 0F      call putchar
2150   11AF 51 01 00      add sp, 1
2151   11B2             ; --- END FUNCTION CALL
2152   11B2             ; return; 
2153   11B2 F9            leave
2154   11B3 09            ret
2155   11B4 0A B7 11      jmp _if49_exit
2156   11B7             _if49_exit:
2157   11B7             _if48_exit:
2158   11B7             ; while (num > 0) { 
2159   11B7             _while50_cond:
2160   11B7 FA 05 00      lea d, [bp + 5] ; $num
2161   11BA 2A            mov b, [d]
2162   11BB 38 00 00      mov c, 0
2163   11BE             ; --- START RELATIONAL
2164   11BE D7            push a
2165   11BF 11            mov a, b
2166   11C0 FD 2E 00 00   mov32 cb, $00000000
2166   11C4 00 00 
2167   11C6 B0            cmp a, b
2168   11C7 FD 7F         sgt ; >
2169   11C9 E4            pop a
2170   11CA             ; --- END RELATIONAL
2171   11CA C0 00 00      cmp b, 0
2172   11CD C6 44 12      je _while50_exit
2173   11D0             _while50_block:
2174   11D0             ; digits[i] = '0' + (num % 10); 
2175   11D0 FA FC FF      lea d, [bp + -4] ; $digits
2176   11D3 D7            push a
2177   11D4 DA            push d
2178   11D5 FA FA FF      lea d, [bp + -6] ; $i
2179   11D8 2A            mov b, [d]
2180   11D9 38 00 00      mov c, 0
2181   11DC E7            pop d
2182   11DD 5A            add d, b
2183   11DE E4            pop a
2184   11DF DA            push d
2185   11E0 FD 2E 30 00   mov32 cb, $00000030
2185   11E4 00 00 
2186   11E6             ; --- START TERMS
2187   11E6 D7            push a
2188   11E7 11            mov a, b
2189   11E8 FA 05 00      lea d, [bp + 5] ; $num
2190   11EB 2A            mov b, [d]
2191   11EC 38 00 00      mov c, 0
2192   11EF             ; --- START FACTORS
2193   11EF D7            push a
2194   11F0 FD D8         push g
2195   11F2 11            mov a, b
2196   11F3 FD 7A         mov g, c
2197   11F5 FD 2E 0A 00   mov32 cb, $0000000a
2197   11F9 00 00 
2198   11FB FD D8         push g ; save 'g' as the div instruction uses it
2199   11FD AE            div a, b ; %, a: quotient, b: remainder
2200   11FE 11            mov a, b
2201   11FF FD F1         pop g
2202   1201 FD 38         mov c, g
2203   1203 27            mov b, a
2204   1204 FD F1         pop g
2205   1206 E4            pop a
2206   1207             ; --- END FACTORS
2207   1207 56            add b, a
2208   1208 E4            pop a
2209   1209             ; --- END TERMS
2210   1209 E7            pop d
2211   120A FD 3E         mov [d], bl
2212   120C             ; num = num / 10; 
2213   120C FA 05 00      lea d, [bp + 5] ; $num
2214   120F DA            push d
2215   1210 FA 05 00      lea d, [bp + 5] ; $num
2216   1213 2A            mov b, [d]
2217   1214 38 00 00      mov c, 0
2218   1217             ; --- START FACTORS
2219   1217 D7            push a
2220   1218 FD D8         push g
2221   121A 11            mov a, b
2222   121B FD 7A         mov g, c
2223   121D FD 2E 0A 00   mov32 cb, $0000000a
2223   1221 00 00 
2224   1223 FD D8         push g ; save 'g' as the div instruction uses it
2225   1225 AE            div a, b ; /, a: quotient, b: remainder
2226   1226 FD F1         pop g
2227   1228 FD 38         mov c, g
2228   122A 27            mov b, a
2229   122B FD F1         pop g
2230   122D E4            pop a
2231   122E             ; --- END FACTORS
2232   122E E7            pop d
2233   122F FD 43         mov [d], b
2234   1231             ; i++; 
2235   1231 FA FA FF      lea d, [bp + -6] ; $i
2236   1234 2A            mov b, [d]
2237   1235 38 00 00      mov c, 0
2238   1238 11            mov a, b
2239   1239 FD 77         inc b
2240   123B FA FA FF      lea d, [bp + -6] ; $i
2241   123E FD 43         mov [d], b
2242   1240 27            mov b, a
2243   1241 0A B7 11      jmp _while50_cond
2244   1244             _while50_exit:
2245   1244             ; while (i > 0) { 
2246   1244             _while57_cond:
2247   1244 FA FA FF      lea d, [bp + -6] ; $i
2248   1247 2A            mov b, [d]
2249   1248 38 00 00      mov c, 0
2250   124B             ; --- START RELATIONAL
2251   124B D7            push a
2252   124C 11            mov a, b
2253   124D FD 2E 00 00   mov32 cb, $00000000
2253   1251 00 00 
2254   1253 B0            cmp a, b
2255   1254 FD 7F         sgt ; >
2256   1256 E4            pop a
2257   1257             ; --- END RELATIONAL
2258   1257 C0 00 00      cmp b, 0
2259   125A C6 8C 12      je _while57_exit
2260   125D             _while57_block:
2261   125D             ; i--; 
2262   125D FA FA FF      lea d, [bp + -6] ; $i
2263   1260 2A            mov b, [d]
2264   1261 38 00 00      mov c, 0
2265   1264 11            mov a, b
2266   1265 FD 7D         dec b
2267   1267 FA FA FF      lea d, [bp + -6] ; $i
2268   126A FD 43         mov [d], b
2269   126C 27            mov b, a
2270   126D             ; putchar(digits[i]); 
2271   126D             ; --- START FUNCTION CALL
2272   126D FA FC FF      lea d, [bp + -4] ; $digits
2273   1270 D7            push a
2274   1271 DA            push d
2275   1272 FA FA FF      lea d, [bp + -6] ; $i
2276   1275 2A            mov b, [d]
2277   1276 38 00 00      mov c, 0
2278   1279 E7            pop d
2279   127A 5A            add d, b
2280   127B E4            pop a
2281   127C 32            mov bl, [d]
2282   127D A7 00         mov bh, 0
2283   127F 38 00 00      mov c, 0
2284   1282 DD            push bl
2285   1283 07 63 0F      call putchar
2286   1286 51 01 00      add sp, 1
2287   1289             ; --- END FUNCTION CALL
2288   1289 0A 44 12      jmp _while57_cond
2289   128C             _while57_exit:
2290   128C F9            leave
2291   128D 09            ret
2292   128E             
2293   128E             print_unsigned:
2294   128E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2295   1291             ; char digits[5]; 
2296   1291 52 05 00      sub sp, 5
2297   1294             ; int i; 
2298   1294 52 02 00      sub sp, 2
2299   1297             ; i = 0; 
2300   1297 FA FA FF      lea d, [bp + -6] ; $i
2301   129A DA            push d
2302   129B FD 2E 00 00   mov32 cb, $00000000
2302   129F 00 00 
2303   12A1 E7            pop d
2304   12A2 FD 43         mov [d], b
2305   12A4             ; if(num == 0){ 
2306   12A4             _if58_cond:
2307   12A4 FA 05 00      lea d, [bp + 5] ; $num
2308   12A7 2A            mov b, [d]
2309   12A8 38 00 00      mov c, 0
2310   12AB             ; --- START RELATIONAL
2311   12AB D7            push a
2312   12AC 11            mov a, b
2313   12AD FD 2E 00 00   mov32 cb, $00000000
2313   12B1 00 00 
2314   12B3 B0            cmp a, b
2315   12B4 FD 71         seq ; ==
2316   12B6 E4            pop a
2317   12B7             ; --- END RELATIONAL
2318   12B7 C0 00 00      cmp b, 0
2319   12BA C6 CF 12      je _if58_exit
2320   12BD             _if58_TRUE:
2321   12BD             ; putchar('0'); 
2322   12BD             ; --- START FUNCTION CALL
2323   12BD FD 2E 30 00   mov32 cb, $00000030
2323   12C1 00 00 
2324   12C3 DD            push bl
2325   12C4 07 63 0F      call putchar
2326   12C7 51 01 00      add sp, 1
2327   12CA             ; --- END FUNCTION CALL
2328   12CA             ; return; 
2329   12CA F9            leave
2330   12CB 09            ret
2331   12CC 0A CF 12      jmp _if58_exit
2332   12CF             _if58_exit:
2333   12CF             ; while (num > 0) { 
2334   12CF             _while59_cond:
2335   12CF FA 05 00      lea d, [bp + 5] ; $num
2336   12D2 2A            mov b, [d]
2337   12D3 38 00 00      mov c, 0
2338   12D6             ; --- START RELATIONAL
2339   12D6 D7            push a
2340   12D7 11            mov a, b
2341   12D8 FD 2E 00 00   mov32 cb, $00000000
2341   12DC 00 00 
2342   12DE B0            cmp a, b
2343   12DF FD 81         sgu ; > (unsigned)
2344   12E1 E4            pop a
2345   12E2             ; --- END RELATIONAL
2346   12E2 C0 00 00      cmp b, 0
2347   12E5 C6 5C 13      je _while59_exit
2348   12E8             _while59_block:
2349   12E8             ; digits[i] = '0' + (num % 10); 
2350   12E8 FA FC FF      lea d, [bp + -4] ; $digits
2351   12EB D7            push a
2352   12EC DA            push d
2353   12ED FA FA FF      lea d, [bp + -6] ; $i
2354   12F0 2A            mov b, [d]
2355   12F1 38 00 00      mov c, 0
2356   12F4 E7            pop d
2357   12F5 5A            add d, b
2358   12F6 E4            pop a
2359   12F7 DA            push d
2360   12F8 FD 2E 30 00   mov32 cb, $00000030
2360   12FC 00 00 
2361   12FE             ; --- START TERMS
2362   12FE D7            push a
2363   12FF 11            mov a, b
2364   1300 FA 05 00      lea d, [bp + 5] ; $num
2365   1303 2A            mov b, [d]
2366   1304 38 00 00      mov c, 0
2367   1307             ; --- START FACTORS
2368   1307 D7            push a
2369   1308 FD D8         push g
2370   130A 11            mov a, b
2371   130B FD 7A         mov g, c
2372   130D FD 2E 0A 00   mov32 cb, $0000000a
2372   1311 00 00 
2373   1313 FD D8         push g ; save 'g' as the div instruction uses it
2374   1315 AE            div a, b ; %, a: quotient, b: remainder
2375   1316 11            mov a, b
2376   1317 FD F1         pop g
2377   1319 FD 38         mov c, g
2378   131B 27            mov b, a
2379   131C FD F1         pop g
2380   131E E4            pop a
2381   131F             ; --- END FACTORS
2382   131F 56            add b, a
2383   1320 E4            pop a
2384   1321             ; --- END TERMS
2385   1321 E7            pop d
2386   1322 FD 3E         mov [d], bl
2387   1324             ; num = num / 10; 
2388   1324 FA 05 00      lea d, [bp + 5] ; $num
2389   1327 DA            push d
2390   1328 FA 05 00      lea d, [bp + 5] ; $num
2391   132B 2A            mov b, [d]
2392   132C 38 00 00      mov c, 0
2393   132F             ; --- START FACTORS
2394   132F D7            push a
2395   1330 FD D8         push g
2396   1332 11            mov a, b
2397   1333 FD 7A         mov g, c
2398   1335 FD 2E 0A 00   mov32 cb, $0000000a
2398   1339 00 00 
2399   133B FD D8         push g ; save 'g' as the div instruction uses it
2400   133D AE            div a, b ; /, a: quotient, b: remainder
2401   133E FD F1         pop g
2402   1340 FD 38         mov c, g
2403   1342 27            mov b, a
2404   1343 FD F1         pop g
2405   1345 E4            pop a
2406   1346             ; --- END FACTORS
2407   1346 E7            pop d
2408   1347 FD 43         mov [d], b
2409   1349             ; i++; 
2410   1349 FA FA FF      lea d, [bp + -6] ; $i
2411   134C 2A            mov b, [d]
2412   134D 38 00 00      mov c, 0
2413   1350 11            mov a, b
2414   1351 FD 77         inc b
2415   1353 FA FA FF      lea d, [bp + -6] ; $i
2416   1356 FD 43         mov [d], b
2417   1358 27            mov b, a
2418   1359 0A CF 12      jmp _while59_cond
2419   135C             _while59_exit:
2420   135C             ; while (i > 0) { 
2421   135C             _while66_cond:
2422   135C FA FA FF      lea d, [bp + -6] ; $i
2423   135F 2A            mov b, [d]
2424   1360 38 00 00      mov c, 0
2425   1363             ; --- START RELATIONAL
2426   1363 D7            push a
2427   1364 11            mov a, b
2428   1365 FD 2E 00 00   mov32 cb, $00000000
2428   1369 00 00 
2429   136B B0            cmp a, b
2430   136C FD 7F         sgt ; >
2431   136E E4            pop a
2432   136F             ; --- END RELATIONAL
2433   136F C0 00 00      cmp b, 0
2434   1372 C6 A4 13      je _while66_exit
2435   1375             _while66_block:
2436   1375             ; i--; 
2437   1375 FA FA FF      lea d, [bp + -6] ; $i
2438   1378 2A            mov b, [d]
2439   1379 38 00 00      mov c, 0
2440   137C 11            mov a, b
2441   137D FD 7D         dec b
2442   137F FA FA FF      lea d, [bp + -6] ; $i
2443   1382 FD 43         mov [d], b
2444   1384 27            mov b, a
2445   1385             ; putchar(digits[i]); 
2446   1385             ; --- START FUNCTION CALL
2447   1385 FA FC FF      lea d, [bp + -4] ; $digits
2448   1388 D7            push a
2449   1389 DA            push d
2450   138A FA FA FF      lea d, [bp + -6] ; $i
2451   138D 2A            mov b, [d]
2452   138E 38 00 00      mov c, 0
2453   1391 E7            pop d
2454   1392 5A            add d, b
2455   1393 E4            pop a
2456   1394 32            mov bl, [d]
2457   1395 A7 00         mov bh, 0
2458   1397 38 00 00      mov c, 0
2459   139A DD            push bl
2460   139B 07 63 0F      call putchar
2461   139E 51 01 00      add sp, 1
2462   13A1             ; --- END FUNCTION CALL
2463   13A1 0A 5C 13      jmp _while66_cond
2464   13A4             _while66_exit:
2465   13A4 F9            leave
2466   13A5 09            ret
2467   13A6             
2468   13A6             printx16:
2469   13A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2470   13A9             ; --- BEGIN INLINE ASM SEGMENT
2471   13A9 FA 05 00      lea d, [bp + 5] ; $hex
2472   13AC 2A            mov b, [d]
2473   13AD             print_u16x_printx16:
2474   13AD DD            push bl
2475   13AE 30            mov bl, bh
2476   13AF 07 CC 13      call _itoa_printx16        ; convert bh to char in A
2477   13B2 2F            mov bl, al        ; save al
2478   13B3 19 00         mov al, 0
2479   13B5 05 03         syscall sys_io        ; display AH
2480   13B7 24            mov ah, bl        ; retrieve al
2481   13B8 19 00         mov al, 0
2482   13BA 05 03         syscall sys_io        ; display AL
2483   13BC EA            pop bl
2484   13BD 07 CC 13      call _itoa_printx16        ; convert bh to char in A
2485   13C0 2F            mov bl, al        ; save al
2486   13C1 19 00         mov al, 0
2487   13C3 05 03         syscall sys_io        ; display AH
2488   13C5 24            mov ah, bl        ; retrieve al
2489   13C6 19 00         mov al, 0
2490   13C8 05 03         syscall sys_io        ; display AL
2491   13CA             ; --- END INLINE ASM SEGMENT
2492   13CA             ; return; 
2493   13CA F9            leave
2494   13CB 09            ret
2495   13CC             ; --- BEGIN INLINE ASM SEGMENT
2496   13CC             _itoa_printx16:
2497   13CC DA            push d
2498   13CD D8            push b
2499   13CE A7 00         mov bh, 0
2500   13D0 FD A4 04      shr bl, 4  
2501   13D3 74            mov d, b
2502   13D4 1F E6 13      mov al, [d + s_hex_digits_printx16]
2503   13D7 23            mov ah, al
2504   13D8 E5            pop b
2505   13D9 D8            push b
2506   13DA A7 00         mov bh, 0
2507   13DC FD 87 0F      and bl, $0F
2508   13DF 74            mov d, b
2509   13E0 1F E6 13      mov al, [d + s_hex_digits_printx16]
2510   13E3 E5            pop b
2511   13E4 E7            pop d
2512   13E5 09            ret
2513   13E6 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2513   13EA 34 35 36 37 
2513   13EE 38 39 41 42 
2513   13F2 43 44 45 46 
2514   13F6             ; --- END INLINE ASM SEGMENT
2515   13F6 F9            leave
2516   13F7 09            ret
2517   13F8             
2518   13F8             puts:
2519   13F8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2520   13FB             ; --- BEGIN INLINE ASM SEGMENT
2521   13FB FA 05 00      lea d, [bp + 5] ; $s
2522   13FE FD 2A         mov d, [d]
2523   1400             _puts_L1_puts:
2524   1400 1E            mov al, [d]
2525   1401 B9 00         cmp al, 0
2526   1403 C6 0F 14      jz _puts_END_puts
2527   1406 23            mov ah, al
2528   1407 19 00         mov al, 0
2529   1409 05 03         syscall sys_io
2530   140B 79            inc d
2531   140C 0A 00 14      jmp _puts_L1_puts
2532   140F             _puts_END_puts:
2533   140F 10 00 0A      mov a, $0A00
2534   1412 05 03         syscall sys_io
2535   1414             ; --- END INLINE ASM SEGMENT
2536   1414 F9            leave
2537   1415 09            ret
2538   1416             ; --- END TEXT SEGMENT
2539   1416             
2540   1416             ; --- BEGIN DATA SEGMENT
2541   1416 1B 5B 32 4A _clear_data: .db $1b,$5b,$32,$4a,$1b,$5b,$48,$00,
2541   141A 1B 5B 48 00 
2542   141E             
2543   141E 00 00 00    .fill 3, 0
2544   1421 00 00 00 00 _nextState_data: .fill 1200, 0
2544   1425 00 00 00 00 
2544   1429 00 00 00 00 
2544   142D 00 00 00 00 
2544   1431 00 00 00 00 
2544   1435 00 00 00 00 
2544   1439 00 00 00 00 
2544   143D 00 00 00 00 
2544   1441 00 00 00 00 
2544   1445 00 00 00 00 
2544   1449 00 00 00 00 
2544   144D 00 00 00 00 
2544   1451 00 00 00 00 
2544   1455 00 00 00 00 
2544   1459 00 00 00 00 
2544   145D 00 00 00 00 
2544   1461 00 00 00 00 
2544   1465 00 00 00 00 
2544   1469 00 00 00 00 
2544   146D 00 00 00 00 
2544   1471 00 00 00 00 
2544   1475 00 00 00 00 
2544   1479 00 00 00 00 
2544   147D 00 00 00 00 
2544   1481 00 00 00 00 
2544   1485 00 00 00 00 
2544   1489 00 00 00 00 
2544   148D 00 00 00 00 
2544   1491 00 00 00 00 
2544   1495 00 00 00 00 
2544   1499 00 00 00 00 
2544   149D 00 00 00 00 
2544   14A1 00 00 00 00 
2544   14A5 00 00 00 00 
2544   14A9 00 00 00 00 
2544   14AD 00 00 00 00 
2544   14B1 00 00 00 00 
2544   14B5 00 00 00 00 
2544   14B9 00 00 00 00 
2544   14BD 00 00 00 00 
2544   14C1 00 00 00 00 
2544   14C5 00 00 00 00 
2544   14C9 00 00 00 00 
2544   14CD 00 00 00 00 
2544   14D1 00 00 00 00 
2544   14D5 00 00 00 00 
2544   14D9 00 00 00 00 
2544   14DD 00 00 00 00 
2544   14E1 00 00 00 00 
2544   14E5 00 00 00 00 
2544   14E9 00 00 00 00 
2544   14ED 00 00 00 00 
2544   14F1 00 00 00 00 
2544   14F5 00 00 00 00 
2544   14F9 00 00 00 00 
2544   14FD 00 00 00 00 
2544   1501 00 00 00 00 
2544   1505 00 00 00 00 
2544   1509 00 00 00 00 
2544   150D 00 00 00 00 
2544   1511 00 00 00 00 
2544   1515 00 00 00 00 
2544   1519 00 00 00 00 
2544   151D 00 00 00 00 
2544   1521 00 00 00 00 
2544   1525 00 00 00 00 
2544   1529 00 00 00 00 
2544   152D 00 00 00 00 
2544   1531 00 00 00 00 
2544   1535 00 00 00 00 
2544   1539 00 00 00 00 
2544   153D 00 00 00 00 
2544   1541 00 00 00 00 
2544   1545 00 00 00 00 
2544   1549 00 00 00 00 
2544   154D 00 00 00 00 
2544   1551 00 00 00 00 
2544   1555 00 00 00 00 
2544   1559 00 00 00 00 
2544   155D 00 00 00 00 
2544   1561 00 00 00 00 
2544   1565 00 00 00 00 
2544   1569 00 00 00 00 
2544   156D 00 00 00 00 
2544   1571 00 00 00 00 
2544   1575 00 00 00 00 
2544   1579 00 00 00 00 
2544   157D 00 00 00 00 
2544   1581 00 00 00 00 
2544   1585 00 00 00 00 
2544   1589 00 00 00 00 
2544   158D 00 00 00 00 
2544   1591 00 00 00 00 
2544   1595 00 00 00 00 
2544   1599 00 00 00 00 
2544   159D 00 00 00 00 
2544   15A1 00 00 00 00 
2544   15A5 00 00 00 00 
2544   15A9 00 00 00 00 
2544   15AD 00 00 00 00 
2544   15B1 00 00 00 00 
2544   15B5 00 00 00 00 
2544   15B9 00 00 00 00 
2544   15BD 00 00 00 00 
2544   15C1 00 00 00 00 
2544   15C5 00 00 00 00 
2544   15C9 00 00 00 00 
2544   15CD 00 00 00 00 
2544   15D1 00 00 00 00 
2544   15D5 00 00 00 00 
2544   15D9 00 00 00 00 
2544   15DD 00 00 00 00 
2544   15E1 00 00 00 00 
2544   15E5 00 00 00 00 
2544   15E9 00 00 00 00 
2544   15ED 00 00 00 00 
2544   15F1 00 00 00 00 
2544   15F5 00 00 00 00 
2544   15F9 00 00 00 00 
2544   15FD 00 00 00 00 
2544   1601 00 00 00 00 
2544   1605 00 00 00 00 
2544   1609 00 00 00 00 
2544   160D 00 00 00 00 
2544   1611 00 00 00 00 
2544   1615 00 00 00 00 
2544   1619 00 00 00 00 
2544   161D 00 00 00 00 
2544   1621 00 00 00 00 
2544   1625 00 00 00 00 
2544   1629 00 00 00 00 
2544   162D 00 00 00 00 
2544   1631 00 00 00 00 
2544   1635 00 00 00 00 
2544   1639 00 00 00 00 
2544   163D 00 00 00 00 
2544   1641 00 00 00 00 
2544   1645 00 00 00 00 
2544   1649 00 00 00 00 
2544   164D 00 00 00 00 
2544   1651 00 00 00 00 
2544   1655 00 00 00 00 
2544   1659 00 00 00 00 
2544   165D 00 00 00 00 
2544   1661 00 00 00 00 
2544   1665 00 00 00 00 
2544   1669 00 00 00 00 
2544   166D 00 00 00 00 
2544   1671 00 00 00 00 
2544   1675 00 00 00 00 
2544   1679 00 00 00 00 
2544   167D 00 00 00 00 
2544   1681 00 00 00 00 
2544   1685 00 00 00 00 
2544   1689 00 00 00 00 
2544   168D 00 00 00 00 
2544   1691 00 00 00 00 
2544   1695 00 00 00 00 
2544   1699 00 00 00 00 
2544   169D 00 00 00 00 
2544   16A1 00 00 00 00 
2544   16A5 00 00 00 00 
2544   16A9 00 00 00 00 
2544   16AD 00 00 00 00 
2544   16B1 00 00 00 00 
2544   16B5 00 00 00 00 
2544   16B9 00 00 00 00 
2544   16BD 00 00 00 00 
2544   16C1 00 00 00 00 
2544   16C5 00 00 00 00 
2544   16C9 00 00 00 00 
2544   16CD 00 00 00 00 
2544   16D1 00 00 00 00 
2544   16D5 00 00 00 00 
2544   16D9 00 00 00 00 
2544   16DD 00 00 00 00 
2544   16E1 00 00 00 00 
2544   16E5 00 00 00 00 
2544   16E9 00 00 00 00 
2544   16ED 00 00 00 00 
2544   16F1 00 00 00 00 
2544   16F5 00 00 00 00 
2544   16F9 00 00 00 00 
2544   16FD 00 00 00 00 
2544   1701 00 00 00 00 
2544   1705 00 00 00 00 
2544   1709 00 00 00 00 
2544   170D 00 00 00 00 
2544   1711 00 00 00 00 
2544   1715 00 00 00 00 
2544   1719 00 00 00 00 
2544   171D 00 00 00 00 
2544   1721 00 00 00 00 
2544   1725 00 00 00 00 
2544   1729 00 00 00 00 
2544   172D 00 00 00 00 
2544   1731 00 00 00 00 
2544   1735 00 00 00 00 
2544   1739 00 00 00 00 
2544   173D 00 00 00 00 
2544   1741 00 00 00 00 
2544   1745 00 00 00 00 
2544   1749 00 00 00 00 
2544   174D 00 00 00 00 
2544   1751 00 00 00 00 
2544   1755 00 00 00 00 
2544   1759 00 00 00 00 
2544   175D 00 00 00 00 
2544   1761 00 00 00 00 
2544   1765 00 00 00 00 
2544   1769 00 00 00 00 
2544   176D 00 00 00 00 
2544   1771 00 00 00 00 
2544   1775 00 00 00 00 
2544   1779 00 00 00 00 
2544   177D 00 00 00 00 
2544   1781 00 00 00 00 
2544   1785 00 00 00 00 
2544   1789 00 00 00 00 
2544   178D 00 00 00 00 
2544   1791 00 00 00 00 
2544   1795 00 00 00 00 
2544   1799 00 00 00 00 
2544   179D 00 00 00 00 
2544   17A1 00 00 00 00 
2544   17A5 00 00 00 00 
2544   17A9 00 00 00 00 
2544   17AD 00 00 00 00 
2544   17B1 00 00 00 00 
2544   17B5 00 00 00 00 
2544   17B9 00 00 00 00 
2544   17BD 00 00 00 00 
2544   17C1 00 00 00 00 
2544   17C5 00 00 00 00 
2544   17C9 00 00 00 00 
2544   17CD 00 00 00 00 
2544   17D1 00 00 00 00 
2544   17D5 00 00 00 00 
2544   17D9 00 00 00 00 
2544   17DD 00 00 00 00 
2544   17E1 00 00 00 00 
2544   17E5 00 00 00 00 
2544   17E9 00 00 00 00 
2544   17ED 00 00 00 00 
2544   17F1 00 00 00 00 
2544   17F5 00 00 00 00 
2544   17F9 00 00 00 00 
2544   17FD 00 00 00 00 
2544   1801 00 00 00 00 
2544   1805 00 00 00 00 
2544   1809 00 00 00 00 
2544   180D 00 00 00 00 
2544   1811 00 00 00 00 
2544   1815 00 00 00 00 
2544   1819 00 00 00 00 
2544   181D 00 00 00 00 
2544   1821 00 00 00 00 
2544   1825 00 00 00 00 
2544   1829 00 00 00 00 
2544   182D 00 00 00 00 
2544   1831 00 00 00 00 
2544   1835 00 00 00 00 
2544   1839 00 00 00 00 
2544   183D 00 00 00 00 
2544   1841 00 00 00 00 
2544   1845 00 00 00 00 
2544   1849 00 00 00 00 
2544   184D 00 00 00 00 
2544   1851 00 00 00 00 
2544   1855 00 00 00 00 
2544   1859 00 00 00 00 
2544   185D 00 00 00 00 
2544   1861 00 00 00 00 
2544   1865 00 00 00 00 
2544   1869 00 00 00 00 
2544   186D 00 00 00 00 
2544   1871 00 00 00 00 
2544   1875 00 00 00 00 
2544   1879 00 00 00 00 
2544   187D 00 00 00 00 
2544   1881 00 00 00 00 
2544   1885 00 00 00 00 
2544   1889 00 00 00 00 
2544   188D 00 00 00 00 
2544   1891 00 00 00 00 
2544   1895 00 00 00 00 
2544   1899 00 00 00 00 
2544   189D 00 00 00 00 
2544   18A1 00 00 00 00 
2544   18A5 00 00 00 00 
2544   18A9 00 00 00 00 
2544   18AD 00 00 00 00 
2544   18B1 00 00 00 00 
2544   18B5 00 00 00 00 
2544   18B9 00 00 00 00 
2544   18BD 00 00 00 00 
2544   18C1 00 00 00 00 
2544   18C5 00 00 00 00 
2544   18C9 00 00 00 00 
2544   18CD 00 00 00 00 
2545   18D1 20 20 20 20 _currState_data: .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2545   18D5 20 20 20 20 
2545   18D9 20 20 20 20 
2545   18DD 20 20 20 
2546   18E0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2546   18E4 20 20 20 20 
2546   18E8 20 20 20 20 
2546   18EC 20 20 20 20 
2547   18F0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2547   18F4 20 20 20 20 
2547   18F8 20 20 20 20 
2547   18FC 20 20 20 20 
2548   1900 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2548   1904 20 20 20 20 
2548   1908 20 20 20 20 
2548   190C 20 20 20 20 
2549   1910 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2549   1914 20 20 20 20 
2549   1918 20 20 20 20 
2549   191C 20 20 20 20 
2550   1920 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2550   1924 20 20 20 20 
2550   1928 20 20 20 20 
2550   192C 20 20 20 20 
2551   1930 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2551   1934 20 20 20 20 
2551   1938 20 20 20 20 
2551   193C 20 20 20 20 
2552   1940 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2552   1944 20 20 20 20 
2552   1948 20 20 20 20 
2552   194C 20 20 20 20 
2553   1950 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2553   1954 20 20 20 20 
2553   1958 20 20 20 20 
2553   195C 20 20 20 20 
2554   1960 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2554   1964 40 20 20 20 
2554   1968 20 20 20 20 
2554   196C 20 20 20 20 
2555   1970 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2555   1974 20 20 20 20 
2555   1978 20 20 20 20 
2555   197C 20 20 20 20 
2556   1980 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
2556   1984 20 20 20 20 
2556   1988 20 20 40 20 
2556   198C 40 20 20 20 
2557   1990 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2557   1994 20 20 20 20 
2557   1998 20 20 20 20 
2557   199C 20 20 20 20 
2558   19A0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2558   19A4 20 20 20 20 
2558   19A8 40 40 20 20 
2558   19AC 20 20 20 20 
2559   19B0 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,
2559   19B4 20 20 20 20 
2559   19B8 20 20 20 20 
2559   19BC 20 20 40 40 
2560   19C0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
2560   19C4 20 20 20 20 
2560   19C8 20 20 20 20 
2560   19CC 20 20 20 40 
2561   19D0 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2561   19D4 20 20 20 20 
2561   19D8 40 40 20 20 
2561   19DC 20 20 20 20 
2562   19E0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,
2562   19E4 20 20 40 40 
2562   19E8 20 20 20 20 
2562   19EC 40 40 20 20 
2563   19F0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
2563   19F4 20 20 40 20 
2563   19F8 20 20 20 20 
2563   19FC 40 20 20 20 
2564   1A00 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2564   1A04 20 20 20 20 
2564   1A08 20 20 20 20 
2564   1A0C 20 20 20 20 
2565   1A10 20 20 20 20 .db $20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,
2565   1A14 40 40 20 20 
2565   1A18 20 20 20 20 
2565   1A1C 20 20 40 20 
2566   1A20 20 20 40 20 .db $20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
2566   1A24 40 40 20 20 
2566   1A28 20 20 40 20 
2566   1A2C 40 20 20 20 
2567   1A30 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2567   1A34 20 20 20 20 
2567   1A38 20 20 20 20 
2567   1A3C 20 20 20 20 
2568   1A40 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
2568   1A44 20 20 40 20 
2568   1A48 20 20 20 20 
2568   1A4C 40 20 20 20 
2569   1A50 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2569   1A54 40 20 20 20 
2569   1A58 20 20 20 20 
2569   1A5C 20 20 20 20 
2570   1A60 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
2570   1A64 20 20 20 20 
2570   1A68 20 20 20 20 
2570   1A6C 20 20 20 40 
2571   1A70 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2571   1A74 20 20 20 20 
2571   1A78 20 20 20 20 
2571   1A7C 20 20 20 20 
2572   1A80 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2572   1A84 20 20 20 20 
2572   1A88 20 20 20 20 
2572   1A8C 20 20 20 20 
2573   1A90 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2573   1A94 20 20 20 20 
2573   1A98 40 40 20 20 
2573   1A9C 20 20 20 20 
2574   1AA0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2574   1AA4 20 20 20 20 
2574   1AA8 20 20 20 20 
2574   1AAC 20 20 20 20 
2575   1AB0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2575   1AB4 20 20 20 20 
2575   1AB8 20 20 20 20 
2575   1ABC 20 20 20 20 
2576   1AC0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2576   1AC4 20 20 20 20 
2576   1AC8 20 20 20 20 
2576   1ACC 20 20 20 20 
2577   1AD0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2577   1AD4 20 20 20 20 
2577   1AD8 20 20 20 20 
2577   1ADC 20 20 20 20 
2578   1AE0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2578   1AE4 20 20 20 20 
2578   1AE8 20 20 20 20 
2578   1AEC 20 20 20 20 
2579   1AF0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2579   1AF4 20 20 20 20 
2579   1AF8 20 20 20 20 
2579   1AFC 20 20 20 20 
2580   1B00 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2580   1B04 20 20 20 20 
2580   1B08 20 20 20 20 
2580   1B0C 20 20 20 20 
2581   1B10 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2581   1B14 20 20 20 20 
2581   1B18 20 20 20 20 
2581   1B1C 20 20 20 20 
2582   1B20 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2582   1B24 20 20 20 20 
2582   1B28 20 20 20 20 
2582   1B2C 20 20 20 20 
2583   1B30 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2583   1B34 20 20 20 20 
2583   1B38 20 20 20 20 
2583   1B3C 20 20 20 20 
2584   1B40 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2584   1B44 20 20 20 20 
2584   1B48 20 20 20 20 
2584   1B4C 20 20 20 20 
2585   1B50 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2585   1B54 20 20 20 20 
2585   1B58 20 20 20 20 
2585   1B5C 20 20 20 20 
2586   1B60 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2586   1B64 20 20 20 20 
2586   1B68 20 20 20 20 
2586   1B6C 20 20 20 20 
2587   1B70 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2587   1B74 20 20 20 20 
2587   1B78 20 20 20 20 
2587   1B7C 20 20 20 20 
2588   1B80 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2588   1B84 20 20 20 20 
2588   1B88 20 20 20 20 
2588   1B8C 20 20 20 20 
2589   1B90 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2589   1B94 20 20 20 20 
2589   1B98 20 20 20 20 
2589   1B9C 20 20 20 20 
2590   1BA0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2590   1BA4 20 20 20 20 
2590   1BA8 20 20 20 20 
2590   1BAC 20 20 20 20 
2591   1BB0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2591   1BB4 20 20 20 20 
2591   1BB8 20 20 20 20 
2591   1BBC 20 20 20 20 
2592   1BC0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2592   1BC4 20 20 20 20 
2592   1BC8 20 20 20 20 
2592   1BCC 20 20 20 20 
2593   1BD0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2593   1BD4 20 20 20 20 
2593   1BD8 20 20 20 20 
2593   1BDC 20 20 20 20 
2594   1BE0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2594   1BE4 20 20 20 20 
2594   1BE8 20 20 20 20 
2594   1BEC 20 20 20 20 
2595   1BF0 20          .db $20,
2596   1BF1             
2597   1BF1 00 00 00 00 .fill 400, 0
2597   1BF5 00 00 00 00 
2597   1BF9 00 00 00 00 
2597   1BFD 00 00 00 00 
2597   1C01 00 00 00 00 
2597   1C05 00 00 00 00 
2597   1C09 00 00 00 00 
2597   1C0D 00 00 00 00 
2597   1C11 00 00 00 00 
2597   1C15 00 00 00 00 
2597   1C19 00 00 00 00 
2597   1C1D 00 00 00 00 
2597   1C21 00 00 00 00 
2597   1C25 00 00 00 00 
2597   1C29 00 00 00 00 
2597   1C2D 00 00 00 00 
2597   1C31 00 00 00 00 
2597   1C35 00 00 00 00 
2597   1C39 00 00 00 00 
2597   1C3D 00 00 00 00 
2597   1C41 00 00 00 00 
2597   1C45 00 00 00 00 
2597   1C49 00 00 00 00 
2597   1C4D 00 00 00 00 
2597   1C51 00 00 00 00 
2597   1C55 00 00 00 00 
2597   1C59 00 00 00 00 
2597   1C5D 00 00 00 00 
2597   1C61 00 00 00 00 
2597   1C65 00 00 00 00 
2597   1C69 00 00 00 00 
2597   1C6D 00 00 00 00 
2597   1C71 00 00 00 00 
2597   1C75 00 00 00 00 
2597   1C79 00 00 00 00 
2597   1C7D 00 00 00 00 
2597   1C81 00 00 00 00 
2597   1C85 00 00 00 00 
2597   1C89 00 00 00 00 
2597   1C8D 00 00 00 00 
2597   1C91 00 00 00 00 
2597   1C95 00 00 00 00 
2597   1C99 00 00 00 00 
2597   1C9D 00 00 00 00 
2597   1CA1 00 00 00 00 
2597   1CA5 00 00 00 00 
2597   1CA9 00 00 00 00 
2597   1CAD 00 00 00 00 
2597   1CB1 00 00 00 00 
2597   1CB5 00 00 00 00 
2597   1CB9 00 00 00 00 
2597   1CBD 00 00 00 00 
2597   1CC1 00 00 00 00 
2597   1CC5 00 00 00 00 
2597   1CC9 00 00 00 00 
2597   1CCD 00 00 00 00 
2597   1CD1 00 00 00 00 
2597   1CD5 00 00 00 00 
2597   1CD9 00 00 00 00 
2597   1CDD 00 00 00 00 
2597   1CE1 00 00 00 00 
2597   1CE5 00 00 00 00 
2597   1CE9 00 00 00 00 
2597   1CED 00 00 00 00 
2597   1CF1 00 00 00 00 
2597   1CF5 00 00 00 00 
2597   1CF9 00 00 00 00 
2597   1CFD 00 00 00 00 
2597   1D01 00 00 00 00 
2597   1D05 00 00 00 00 
2597   1D09 00 00 00 00 
2597   1D0D 00 00 00 00 
2597   1D11 00 00 00 00 
2597   1D15 00 00 00 00 
2597   1D19 00 00 00 00 
2597   1D1D 00 00 00 00 
2597   1D21 00 00 00 00 
2597   1D25 00 00 00 00 
2597   1D29 00 00 00 00 
2597   1D2D 00 00 00 00 
2597   1D31 00 00 00 00 
2597   1D35 00 00 00 00 
2597   1D39 00 00 00 00 
2597   1D3D 00 00 00 00 
2597   1D41 00 00 00 00 
2597   1D45 00 00 00 00 
2597   1D49 00 00 00 00 
2597   1D4D 00 00 00 00 
2597   1D51 00 00 00 00 
2597   1D55 00 00 00 00 
2597   1D59 00 00 00 00 
2597   1D5D 00 00 00 00 
2597   1D61 00 00 00 00 
2597   1D65 00 00 00 00 
2597   1D69 00 00 00 00 
2597   1D6D 00 00 00 00 
2597   1D71 00 00 00 00 
2597   1D75 00 00 00 00 
2597   1D79 00 00 00 00 
2597   1D7D 00 00 00 00 
2598   1D81 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
2598   1D85 65 73 73 20 
2598   1D89 43 54 52 4C 
2598   1D8D 2B 43 20 74 
2598   1D91 6F 20 71 75 
2598   1D95 69 74 2E 0A 
2598   1D99 0D 00 
2599   1D9B 40 20 00    _s1: .db "@ ", 0
2600   1D9E 2E 20 00    _s2: .db ". ", 0
2601   1DA1 0A 0D 00    _s3: .db "\n\r", 0
2602   1DA4 55 6E 65 78 _s4: .db "Unexpected format in printf.", 0
2602   1DA8 70 65 63 74 
2602   1DAC 65 64 20 66 
2602   1DB0 6F 72 6D 61 
2602   1DB4 74 20 69 6E 
2602   1DB8 20 70 72 69 
2602   1DBC 6E 74 66 2E 
2602   1DC0 00 
2603   1DC1 45 72 72 6F _s5: .db "Error: Unknown argument type.\n", 0
2603   1DC5 72 3A 20 55 
2603   1DC9 6E 6B 6E 6F 
2603   1DCD 77 6E 20 61 
2603   1DD1 72 67 75 6D 
2603   1DD5 65 6E 74 20 
2603   1DD9 74 79 70 65 
2603   1DDD 2E 0A 00 
2604   1DE0             
2605   1DE0 E2 1D       _heap_top: .dw _heap
2606   1DE2 00          _heap: .db 0
2607   1DE3             ; --- END DATA SEGMENT
2608   1DE3             
2609   1DE3             .end
tasm: Number of errors = 0
