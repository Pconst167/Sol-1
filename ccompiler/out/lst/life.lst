0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <   30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 1E 00      mov b, $1e
0028   041E FD 73         slt ; <= (signed)
0029   0420 E4            pop a
0030   0421             ; END RELATIONAL
0031   0421 C0 00 00      cmp b, 0
0032   0424 C6 96 04      je _for1_exit
0033   0427             _for1_block:
0034   0427             ;; for(j = 0; j <    40    ; j++){ 
0035   0427             _for2_init:
0036   0427 FA FD FF      lea d, [bp + -3] ; $j
0037   042A DA            push d
0038   042B 26 00 00      mov b, $0
0039   042E E7            pop d
0040   042F FD 43         mov [d], b
0041   0431             _for2_cond:
0042   0431 FA FD FF      lea d, [bp + -3] ; $j
0043   0434 2A            mov b, [d]
0044   0435             ; START RELATIONAL
0045   0435 D7            push a
0046   0436 11            mov a, b
0047   0437 26 28 00      mov b, $28
0048   043A FD 73         slt ; <= (signed)
0049   043C E4            pop a
0050   043D             ; END RELATIONAL
0051   043D C0 00 00      cmp b, 0
0052   0440 C6 86 04      je _for2_exit
0053   0443             _for2_block:
0054   0443             ;; nextState[i][j] = currState[i][j]; 
0055   0443 3B 8D 19      mov d, _nextState_data ; $nextState
0056   0446 D7            push a
0057   0447 DA            push d
0058   0448 FA FF FF      lea d, [bp + -1] ; $i
0059   044B 2A            mov b, [d]
0060   044C E7            pop d
0061   044D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0062   0451 DA            push d
0063   0452 FA FD FF      lea d, [bp + -3] ; $j
0064   0455 2A            mov b, [d]
0065   0456 E7            pop d
0066   0457 5A            add d, b
0067   0458 E4            pop a
0068   0459 DA            push d
0069   045A 3B 3D 1E      mov d, _currState_data ; $currState
0070   045D D7            push a
0071   045E DA            push d
0072   045F FA FF FF      lea d, [bp + -1] ; $i
0073   0462 2A            mov b, [d]
0074   0463 E7            pop d
0075   0464 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0076   0468 DA            push d
0077   0469 FA FD FF      lea d, [bp + -3] ; $j
0078   046C 2A            mov b, [d]
0079   046D E7            pop d
0080   046E 5A            add d, b
0081   046F E4            pop a
0082   0470 32            mov bl, [d]
0083   0471 A7 00         mov bh, 0
0084   0473 E7            pop d
0085   0474 FD 3E         mov [d], bl
0086   0476             _for2_update:
0087   0476 FA FD FF      lea d, [bp + -3] ; $j
0088   0479 2A            mov b, [d]
0089   047A D8            push b
0090   047B FD 77         inc b
0091   047D FA FD FF      lea d, [bp + -3] ; $j
0092   0480 FD 43         mov [d], b
0093   0482 E5            pop b
0094   0483 0A 31 04      jmp _for2_cond
0095   0486             _for2_exit:
0096   0486             _for1_update:
0097   0486 FA FF FF      lea d, [bp + -1] ; $i
0098   0489 2A            mov b, [d]
0099   048A D8            push b
0100   048B FD 77         inc b
0101   048D FA FF FF      lea d, [bp + -1] ; $i
0102   0490 FD 43         mov [d], b
0103   0492 E5            pop b
0104   0493 0A 15 04      jmp _for1_cond
0105   0496             _for1_exit:
0106   0496             ;; for(;;){ 
0107   0496             _for3_init:
0108   0496             _for3_cond:
0109   0496             _for3_block:
0110   0496             ;; for(i = 1; i <   30     +-1; i++){ 
0111   0496             _for4_init:
0112   0496 FA FF FF      lea d, [bp + -1] ; $i
0113   0499 DA            push d
0114   049A 26 01 00      mov b, $1
0115   049D E7            pop d
0116   049E FD 43         mov [d], b
0117   04A0             _for4_cond:
0118   04A0 FA FF FF      lea d, [bp + -1] ; $i
0119   04A3 2A            mov b, [d]
0120   04A4             ; START RELATIONAL
0121   04A4 D7            push a
0122   04A5 11            mov a, b
0123   04A6 26 1E 00      mov b, $1e
0124   04A9             ; START TERMS
0125   04A9 D7            push a
0126   04AA 11            mov a, b
0127   04AB 26 FF FF      mov b, $ffffffff
0128   04AE 54            add a, b
0129   04AF 27            mov b, a
0130   04B0 E4            pop a
0131   04B1             ; END TERMS
0132   04B1 FD 73         slt ; <= (signed)
0133   04B3 E4            pop a
0134   04B4             ; END RELATIONAL
0135   04B4 C0 00 00      cmp b, 0
0136   04B7 C6 8D 05      je _for4_exit
0137   04BA             _for4_block:
0138   04BA             ;; for(j = 1; j <    40    +-1; j++){ 
0139   04BA             _for5_init:
0140   04BA FA FD FF      lea d, [bp + -3] ; $j
0141   04BD DA            push d
0142   04BE 26 01 00      mov b, $1
0143   04C1 E7            pop d
0144   04C2 FD 43         mov [d], b
0145   04C4             _for5_cond:
0146   04C4 FA FD FF      lea d, [bp + -3] ; $j
0147   04C7 2A            mov b, [d]
0148   04C8             ; START RELATIONAL
0149   04C8 D7            push a
0150   04C9 11            mov a, b
0151   04CA 26 28 00      mov b, $28
0152   04CD             ; START TERMS
0153   04CD D7            push a
0154   04CE 11            mov a, b
0155   04CF 26 FF FF      mov b, $ffffffff
0156   04D2 54            add a, b
0157   04D3 27            mov b, a
0158   04D4 E4            pop a
0159   04D5             ; END TERMS
0160   04D5 FD 73         slt ; <= (signed)
0161   04D7 E4            pop a
0162   04D8             ; END RELATIONAL
0163   04D8 C0 00 00      cmp b, 0
0164   04DB C6 7D 05      je _for5_exit
0165   04DE             _for5_block:
0166   04DE             ;; n = neighbours(i, j); 
0167   04DE FA FB FF      lea d, [bp + -5] ; $n
0168   04E1 DA            push d
0169   04E2 FA FD FF      lea d, [bp + -3] ; $j
0170   04E5 2A            mov b, [d]
0171   04E6 FD AB         swp b
0172   04E8 D8            push b
0173   04E9 FA FF FF      lea d, [bp + -1] ; $i
0174   04EC 2A            mov b, [d]
0175   04ED FD AB         swp b
0176   04EF D8            push b
0177   04F0 07 4C 17      call neighbours
0178   04F3 E7            pop d
0179   04F4 FD 43         mov [d], b
0180   04F6             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0181   04F6             _if6_cond:
0182   04F6 FA FB FF      lea d, [bp + -5] ; $n
0183   04F9 2A            mov b, [d]
0184   04FA             ; START RELATIONAL
0185   04FA D7            push a
0186   04FB 11            mov a, b
0187   04FC 26 02 00      mov b, $2
0188   04FF FD 73         slt ; <= (signed)
0189   0501 E4            pop a
0190   0502             ; END RELATIONAL
0191   0502 D7            push a
0192   0503 11            mov a, b
0193   0504 FA FB FF      lea d, [bp + -5] ; $n
0194   0507 2A            mov b, [d]
0195   0508             ; START RELATIONAL
0196   0508 D7            push a
0197   0509 11            mov a, b
0198   050A 26 03 00      mov b, $3
0199   050D B0            cmp a, b
0200   050E FD 7F         sgt ; >
0201   0510 E4            pop a
0202   0511             ; END RELATIONAL
0203   0511 FD A8         sor a, b ; ||
0204   0513 E4            pop a
0205   0514 C0 00 00      cmp b, 0
0206   0517 C6 3A 05      je _if6_else
0207   051A             _if6_true:
0208   051A             ;; nextState[i][j] = ' '; 
0209   051A 3B 8D 19      mov d, _nextState_data ; $nextState
0210   051D D7            push a
0211   051E DA            push d
0212   051F FA FF FF      lea d, [bp + -1] ; $i
0213   0522 2A            mov b, [d]
0214   0523 E7            pop d
0215   0524 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0216   0528 DA            push d
0217   0529 FA FD FF      lea d, [bp + -3] ; $j
0218   052C 2A            mov b, [d]
0219   052D E7            pop d
0220   052E 5A            add d, b
0221   052F E4            pop a
0222   0530 DA            push d
0223   0531 26 20 00      mov b, $20
0224   0534 E7            pop d
0225   0535 FD 3E         mov [d], bl
0226   0537 0A 6D 05      jmp _if6_exit
0227   053A             _if6_else:
0228   053A             ;; if(n == 3) nextState[i][j] = '@'; 
0229   053A             _if7_cond:
0230   053A FA FB FF      lea d, [bp + -5] ; $n
0231   053D 2A            mov b, [d]
0232   053E             ; START RELATIONAL
0233   053E D7            push a
0234   053F 11            mov a, b
0235   0540 26 03 00      mov b, $3
0236   0543 B0            cmp a, b
0237   0544 FD 71         seq ; ==
0238   0546 E4            pop a
0239   0547             ; END RELATIONAL
0240   0547 C0 00 00      cmp b, 0
0241   054A C6 6D 05      je _if7_exit
0242   054D             _if7_true:
0243   054D             ;; nextState[i][j] = '@'; 
0244   054D 3B 8D 19      mov d, _nextState_data ; $nextState
0245   0550 D7            push a
0246   0551 DA            push d
0247   0552 FA FF FF      lea d, [bp + -1] ; $i
0248   0555 2A            mov b, [d]
0249   0556 E7            pop d
0250   0557 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0251   055B DA            push d
0252   055C FA FD FF      lea d, [bp + -3] ; $j
0253   055F 2A            mov b, [d]
0254   0560 E7            pop d
0255   0561 5A            add d, b
0256   0562 E4            pop a
0257   0563 DA            push d
0258   0564 26 40 00      mov b, $40
0259   0567 E7            pop d
0260   0568 FD 3E         mov [d], bl
0261   056A 0A 6D 05      jmp _if7_exit
0262   056D             _if7_exit:
0263   056D             _if6_exit:
0264   056D             _for5_update:
0265   056D FA FD FF      lea d, [bp + -3] ; $j
0266   0570 2A            mov b, [d]
0267   0571 D8            push b
0268   0572 FD 77         inc b
0269   0574 FA FD FF      lea d, [bp + -3] ; $j
0270   0577 FD 43         mov [d], b
0271   0579 E5            pop b
0272   057A 0A C4 04      jmp _for5_cond
0273   057D             _for5_exit:
0274   057D             _for4_update:
0275   057D FA FF FF      lea d, [bp + -1] ; $i
0276   0580 2A            mov b, [d]
0277   0581 D8            push b
0278   0582 FD 77         inc b
0279   0584 FA FF FF      lea d, [bp + -1] ; $i
0280   0587 FD 43         mov [d], b
0281   0589 E5            pop b
0282   058A 0A A0 04      jmp _for4_cond
0283   058D             _for4_exit:
0284   058D             ;; for(i = 1; i <   30     +-1; i++){ 
0285   058D             _for8_init:
0286   058D FA FF FF      lea d, [bp + -1] ; $i
0287   0590 DA            push d
0288   0591 26 01 00      mov b, $1
0289   0594 E7            pop d
0290   0595 FD 43         mov [d], b
0291   0597             _for8_cond:
0292   0597 FA FF FF      lea d, [bp + -1] ; $i
0293   059A 2A            mov b, [d]
0294   059B             ; START RELATIONAL
0295   059B D7            push a
0296   059C 11            mov a, b
0297   059D 26 1E 00      mov b, $1e
0298   05A0             ; START TERMS
0299   05A0 D7            push a
0300   05A1 11            mov a, b
0301   05A2 26 FF FF      mov b, $ffffffff
0302   05A5 54            add a, b
0303   05A6 27            mov b, a
0304   05A7 E4            pop a
0305   05A8             ; END TERMS
0306   05A8 FD 73         slt ; <= (signed)
0307   05AA E4            pop a
0308   05AB             ; END RELATIONAL
0309   05AB C0 00 00      cmp b, 0
0310   05AE C6 28 06      je _for8_exit
0311   05B1             _for8_block:
0312   05B1             ;; for(j = 1; j <    40    +-1; j++){ 
0313   05B1             _for9_init:
0314   05B1 FA FD FF      lea d, [bp + -3] ; $j
0315   05B4 DA            push d
0316   05B5 26 01 00      mov b, $1
0317   05B8 E7            pop d
0318   05B9 FD 43         mov [d], b
0319   05BB             _for9_cond:
0320   05BB FA FD FF      lea d, [bp + -3] ; $j
0321   05BE 2A            mov b, [d]
0322   05BF             ; START RELATIONAL
0323   05BF D7            push a
0324   05C0 11            mov a, b
0325   05C1 26 28 00      mov b, $28
0326   05C4             ; START TERMS
0327   05C4 D7            push a
0328   05C5 11            mov a, b
0329   05C6 26 FF FF      mov b, $ffffffff
0330   05C9 54            add a, b
0331   05CA 27            mov b, a
0332   05CB E4            pop a
0333   05CC             ; END TERMS
0334   05CC FD 73         slt ; <= (signed)
0335   05CE E4            pop a
0336   05CF             ; END RELATIONAL
0337   05CF C0 00 00      cmp b, 0
0338   05D2 C6 18 06      je _for9_exit
0339   05D5             _for9_block:
0340   05D5             ;; currState[i][j] = nextState[i][j]; 
0341   05D5 3B 3D 1E      mov d, _currState_data ; $currState
0342   05D8 D7            push a
0343   05D9 DA            push d
0344   05DA FA FF FF      lea d, [bp + -1] ; $i
0345   05DD 2A            mov b, [d]
0346   05DE E7            pop d
0347   05DF FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0348   05E3 DA            push d
0349   05E4 FA FD FF      lea d, [bp + -3] ; $j
0350   05E7 2A            mov b, [d]
0351   05E8 E7            pop d
0352   05E9 5A            add d, b
0353   05EA E4            pop a
0354   05EB DA            push d
0355   05EC 3B 8D 19      mov d, _nextState_data ; $nextState
0356   05EF D7            push a
0357   05F0 DA            push d
0358   05F1 FA FF FF      lea d, [bp + -1] ; $i
0359   05F4 2A            mov b, [d]
0360   05F5 E7            pop d
0361   05F6 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0362   05FA DA            push d
0363   05FB FA FD FF      lea d, [bp + -3] ; $j
0364   05FE 2A            mov b, [d]
0365   05FF E7            pop d
0366   0600 5A            add d, b
0367   0601 E4            pop a
0368   0602 32            mov bl, [d]
0369   0603 A7 00         mov bh, 0
0370   0605 E7            pop d
0371   0606 FD 3E         mov [d], bl
0372   0608             _for9_update:
0373   0608 FA FD FF      lea d, [bp + -3] ; $j
0374   060B 2A            mov b, [d]
0375   060C D8            push b
0376   060D FD 77         inc b
0377   060F FA FD FF      lea d, [bp + -3] ; $j
0378   0612 FD 43         mov [d], b
0379   0614 E5            pop b
0380   0615 0A BB 05      jmp _for9_cond
0381   0618             _for9_exit:
0382   0618             _for8_update:
0383   0618 FA FF FF      lea d, [bp + -1] ; $i
0384   061B 2A            mov b, [d]
0385   061C D8            push b
0386   061D FD 77         inc b
0387   061F FA FF FF      lea d, [bp + -1] ; $i
0388   0622 FD 43         mov [d], b
0389   0624 E5            pop b
0390   0625 0A 97 05      jmp _for8_cond
0391   0628             _for8_exit:
0392   0628             ;; printf(clear); 
0393   0628 3B 82 19      mov d, _clear_data ; $clear
0394   062B 2D            mov b, d
0395   062C FD AB         swp b
0396   062E D8            push b
0397   062F 07 ED 09      call printf
0398   0632             ;; show(); 
0399   0632 07 6B 16      call show
0400   0635             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0401   0635 26 ED 22      mov b, __s0 ; "\n\rPress CTRL+C to quit.\n\r"
0402   0638 FD AB         swp b
0403   063A D8            push b
0404   063B 07 1E 12      call puts
0405   063E 51 02 00      add sp, 2
0406   0641             _for3_update:
0407   0641 0A 96 04      jmp _for3_cond
0408   0644             _for3_exit:
0409   0644 05 0B         syscall sys_terminate_proc
0410   0646             
0411   0646             strcpy:
0412   0646 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0413   0649             ; $psrc 
0414   0649             ; $pdest 
0415   0649 52 04 00      sub sp, 4
0416   064C             ;; psrc = src; 
0417   064C FA FF FF      lea d, [bp + -1] ; $psrc
0418   064F DA            push d
0419   0650 FA 07 00      lea d, [bp + 7] ; $src
0420   0653 2A            mov b, [d]
0421   0654 E7            pop d
0422   0655 FD 43         mov [d], b
0423   0657             ;; pdest = dest; 
0424   0657 FA FD FF      lea d, [bp + -3] ; $pdest
0425   065A DA            push d
0426   065B FA 05 00      lea d, [bp + 5] ; $dest
0427   065E 2A            mov b, [d]
0428   065F E7            pop d
0429   0660 FD 43         mov [d], b
0430   0662             ;; while(*psrc) *pdest++ = *psrc++; 
0431   0662             _while10_cond:
0432   0662 FA FF FF      lea d, [bp + -1] ; $psrc
0433   0665 2A            mov b, [d]
0434   0666 74            mov d, b
0435   0667 32            mov bl, [d]
0436   0668 A7 00         mov bh, 0
0437   066A C0 00 00      cmp b, 0
0438   066D C6 95 06      je _while10_exit
0439   0670             _while10_block:
0440   0670             ;; *pdest++ = *psrc++; 
0441   0670 FA FD FF      lea d, [bp + -3] ; $pdest
0442   0673 2A            mov b, [d]
0443   0674 D8            push b
0444   0675 FD 77         inc b
0445   0677 FA FD FF      lea d, [bp + -3] ; $pdest
0446   067A FD 43         mov [d], b
0447   067C E5            pop b
0448   067D D8            push b
0449   067E FA FF FF      lea d, [bp + -1] ; $psrc
0450   0681 2A            mov b, [d]
0451   0682 D8            push b
0452   0683 FD 77         inc b
0453   0685 FA FF FF      lea d, [bp + -1] ; $psrc
0454   0688 FD 43         mov [d], b
0455   068A E5            pop b
0456   068B 74            mov d, b
0457   068C 32            mov bl, [d]
0458   068D A7 00         mov bh, 0
0459   068F E7            pop d
0460   0690 FD 3E         mov [d], bl
0461   0692 0A 62 06      jmp _while10_cond
0462   0695             _while10_exit:
0463   0695             ;; *pdest = '\0'; 
0464   0695 FA FD FF      lea d, [bp + -3] ; $pdest
0465   0698 2A            mov b, [d]
0466   0699 D8            push b
0467   069A 26 00 00      mov b, $0
0468   069D E7            pop d
0469   069E FD 3E         mov [d], bl
0470   06A0 F9            leave
0471   06A1 09            ret
0472   06A2             
0473   06A2             strcmp:
0474   06A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0475   06A5             ;; while (*s1 && (*s1 == *s2)) { 
0476   06A5             _while11_cond:
0477   06A5 FA 05 00      lea d, [bp + 5] ; $s1
0478   06A8 2A            mov b, [d]
0479   06A9 74            mov d, b
0480   06AA 32            mov bl, [d]
0481   06AB A7 00         mov bh, 0
0482   06AD D7            push a
0483   06AE 11            mov a, b
0484   06AF FA 05 00      lea d, [bp + 5] ; $s1
0485   06B2 2A            mov b, [d]
0486   06B3 74            mov d, b
0487   06B4 32            mov bl, [d]
0488   06B5 A7 00         mov bh, 0
0489   06B7             ; START RELATIONAL
0490   06B7 D7            push a
0491   06B8 11            mov a, b
0492   06B9 FA 07 00      lea d, [bp + 7] ; $s2
0493   06BC 2A            mov b, [d]
0494   06BD 74            mov d, b
0495   06BE 32            mov bl, [d]
0496   06BF A7 00         mov bh, 0
0497   06C1 B0            cmp a, b
0498   06C2 FD 71         seq ; ==
0499   06C4 E4            pop a
0500   06C5             ; END RELATIONAL
0501   06C5 FD A7         sand a, b ; &&
0502   06C7 E4            pop a
0503   06C8 C0 00 00      cmp b, 0
0504   06CB C6 EB 06      je _while11_exit
0505   06CE             _while11_block:
0506   06CE             ;; s1++; 
0507   06CE FA 05 00      lea d, [bp + 5] ; $s1
0508   06D1 2A            mov b, [d]
0509   06D2 D8            push b
0510   06D3 FD 77         inc b
0511   06D5 FA 05 00      lea d, [bp + 5] ; $s1
0512   06D8 FD 43         mov [d], b
0513   06DA E5            pop b
0514   06DB             ;; s2++; 
0515   06DB FA 07 00      lea d, [bp + 7] ; $s2
0516   06DE 2A            mov b, [d]
0517   06DF D8            push b
0518   06E0 FD 77         inc b
0519   06E2 FA 07 00      lea d, [bp + 7] ; $s2
0520   06E5 FD 43         mov [d], b
0521   06E7 E5            pop b
0522   06E8 0A A5 06      jmp _while11_cond
0523   06EB             _while11_exit:
0524   06EB             ;; return *s1 - *s2; 
0525   06EB FA 05 00      lea d, [bp + 5] ; $s1
0526   06EE 2A            mov b, [d]
0527   06EF 74            mov d, b
0528   06F0 32            mov bl, [d]
0529   06F1 A7 00         mov bh, 0
0530   06F3             ; START TERMS
0531   06F3 D7            push a
0532   06F4 11            mov a, b
0533   06F5 FA 07 00      lea d, [bp + 7] ; $s2
0534   06F8 2A            mov b, [d]
0535   06F9 74            mov d, b
0536   06FA 32            mov bl, [d]
0537   06FB A7 00         mov bh, 0
0538   06FD 60            sub a, b
0539   06FE 27            mov b, a
0540   06FF E4            pop a
0541   0700             ; END TERMS
0542   0700 F9            leave
0543   0701 09            ret
0544   0702             
0545   0702             strcat:
0546   0702 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0547   0705             ; $dest_len 
0548   0705             ; $i 
0549   0705 52 04 00      sub sp, 4
0550   0708             ;; dest_len = strlen(dest); 
0551   0708 FA FF FF      lea d, [bp + -1] ; $dest_len
0552   070B DA            push d
0553   070C FA 05 00      lea d, [bp + 5] ; $dest
0554   070F 2A            mov b, [d]
0555   0710 FD AB         swp b
0556   0712 D8            push b
0557   0713 07 B8 07      call strlen
0558   0716 51 02 00      add sp, 2
0559   0719 E7            pop d
0560   071A FD 43         mov [d], b
0561   071C             ;; for (i = 0; src[i] != 0; i=i+1) { 
0562   071C             _for12_init:
0563   071C FA FD FF      lea d, [bp + -3] ; $i
0564   071F DA            push d
0565   0720 26 00 00      mov b, $0
0566   0723 E7            pop d
0567   0724 FD 43         mov [d], b
0568   0726             _for12_cond:
0569   0726 FA 07 00      lea d, [bp + 7] ; $src
0570   0729 FD 2A         mov d, [d]
0571   072B D7            push a
0572   072C DA            push d
0573   072D FA FD FF      lea d, [bp + -3] ; $i
0574   0730 2A            mov b, [d]
0575   0731 E7            pop d
0576   0732 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0577   0736 E4            pop a
0578   0737 32            mov bl, [d]
0579   0738 A7 00         mov bh, 0
0580   073A             ; START RELATIONAL
0581   073A D7            push a
0582   073B 11            mov a, b
0583   073C 26 00 00      mov b, $0
0584   073F B0            cmp a, b
0585   0740 FD 72         sneq ; !=
0586   0742 E4            pop a
0587   0743             ; END RELATIONAL
0588   0743 C0 00 00      cmp b, 0
0589   0746 C6 91 07      je _for12_exit
0590   0749             _for12_block:
0591   0749             ;; dest[dest_len + i] = src[i]; 
0592   0749 FA 05 00      lea d, [bp + 5] ; $dest
0593   074C FD 2A         mov d, [d]
0594   074E D7            push a
0595   074F DA            push d
0596   0750 FA FF FF      lea d, [bp + -1] ; $dest_len
0597   0753 2A            mov b, [d]
0598   0754             ; START TERMS
0599   0754 D7            push a
0600   0755 11            mov a, b
0601   0756 FA FD FF      lea d, [bp + -3] ; $i
0602   0759 2A            mov b, [d]
0603   075A 54            add a, b
0604   075B 27            mov b, a
0605   075C E4            pop a
0606   075D             ; END TERMS
0607   075D E7            pop d
0608   075E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0609   0762 E4            pop a
0610   0763 DA            push d
0611   0764 FA 07 00      lea d, [bp + 7] ; $src
0612   0767 FD 2A         mov d, [d]
0613   0769 D7            push a
0614   076A DA            push d
0615   076B FA FD FF      lea d, [bp + -3] ; $i
0616   076E 2A            mov b, [d]
0617   076F E7            pop d
0618   0770 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0619   0774 E4            pop a
0620   0775 32            mov bl, [d]
0621   0776 A7 00         mov bh, 0
0622   0778 E7            pop d
0623   0779 FD 3E         mov [d], bl
0624   077B             _for12_update:
0625   077B FA FD FF      lea d, [bp + -3] ; $i
0626   077E DA            push d
0627   077F FA FD FF      lea d, [bp + -3] ; $i
0628   0782 2A            mov b, [d]
0629   0783             ; START TERMS
0630   0783 D7            push a
0631   0784 11            mov a, b
0632   0785 26 01 00      mov b, $1
0633   0788 54            add a, b
0634   0789 27            mov b, a
0635   078A E4            pop a
0636   078B             ; END TERMS
0637   078B E7            pop d
0638   078C FD 43         mov [d], b
0639   078E 0A 26 07      jmp _for12_cond
0640   0791             _for12_exit:
0641   0791             ;; dest[dest_len + i] = 0; 
0642   0791 FA 05 00      lea d, [bp + 5] ; $dest
0643   0794 FD 2A         mov d, [d]
0644   0796 D7            push a
0645   0797 DA            push d
0646   0798 FA FF FF      lea d, [bp + -1] ; $dest_len
0647   079B 2A            mov b, [d]
0648   079C             ; START TERMS
0649   079C D7            push a
0650   079D 11            mov a, b
0651   079E FA FD FF      lea d, [bp + -3] ; $i
0652   07A1 2A            mov b, [d]
0653   07A2 54            add a, b
0654   07A3 27            mov b, a
0655   07A4 E4            pop a
0656   07A5             ; END TERMS
0657   07A5 E7            pop d
0658   07A6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0659   07AA E4            pop a
0660   07AB DA            push d
0661   07AC 26 00 00      mov b, $0
0662   07AF E7            pop d
0663   07B0 FD 3E         mov [d], bl
0664   07B2             ;; return dest; 
0665   07B2 FA 05 00      lea d, [bp + 5] ; $dest
0666   07B5 2A            mov b, [d]
0667   07B6 F9            leave
0668   07B7 09            ret
0669   07B8             
0670   07B8             strlen:
0671   07B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0672   07BB             ; $length 
0673   07BB 52 02 00      sub sp, 2
0674   07BE             ;; length = 0; 
0675   07BE FA FF FF      lea d, [bp + -1] ; $length
0676   07C1 DA            push d
0677   07C2 26 00 00      mov b, $0
0678   07C5 E7            pop d
0679   07C6 FD 43         mov [d], b
0680   07C8             ;; while (str[length] != 0) { 
0681   07C8             _while13_cond:
0682   07C8 FA 05 00      lea d, [bp + 5] ; $str
0683   07CB FD 2A         mov d, [d]
0684   07CD D7            push a
0685   07CE DA            push d
0686   07CF FA FF FF      lea d, [bp + -1] ; $length
0687   07D2 2A            mov b, [d]
0688   07D3 E7            pop d
0689   07D4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0690   07D8 E4            pop a
0691   07D9 32            mov bl, [d]
0692   07DA A7 00         mov bh, 0
0693   07DC             ; START RELATIONAL
0694   07DC D7            push a
0695   07DD 11            mov a, b
0696   07DE 26 00 00      mov b, $0
0697   07E1 B0            cmp a, b
0698   07E2 FD 72         sneq ; !=
0699   07E4 E4            pop a
0700   07E5             ; END RELATIONAL
0701   07E5 C0 00 00      cmp b, 0
0702   07E8 C6 FB 07      je _while13_exit
0703   07EB             _while13_block:
0704   07EB             ;; length++; 
0705   07EB FA FF FF      lea d, [bp + -1] ; $length
0706   07EE 2A            mov b, [d]
0707   07EF D8            push b
0708   07F0 FD 77         inc b
0709   07F2 FA FF FF      lea d, [bp + -1] ; $length
0710   07F5 FD 43         mov [d], b
0711   07F7 E5            pop b
0712   07F8 0A C8 07      jmp _while13_cond
0713   07FB             _while13_exit:
0714   07FB             ;; return length; 
0715   07FB FA FF FF      lea d, [bp + -1] ; $length
0716   07FE 2A            mov b, [d]
0717   07FF F9            leave
0718   0800 09            ret
0719   0801             
0720   0801             exit:
0721   0801 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0722   0804             
0723   0804             ; --- BEGIN INLINE ASM BLOCK
0724   0804 05 0B         syscall sys_terminate_proc
0725   0806             ; --- END INLINE ASM BLOCK
0726   0806             
0727   0806 F9            leave
0728   0807 09            ret
0729   0808             
0730   0808             atoi:
0731   0808 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0732   080B             ; $result 
0733   080B 10 00 00      mov a, $0
0734   080E 45 FF FF      mov [bp + -1], a
0735   0811             ; $sign 
0736   0811 10 01 00      mov a, $1
0737   0814 45 FD FF      mov [bp + -3], a
0738   0817 52 04 00      sub sp, 4
0739   081A             ;; while (*str == ' ') str++; 
0740   081A             _while14_cond:
0741   081A FA 05 00      lea d, [bp + 5] ; $str
0742   081D 2A            mov b, [d]
0743   081E 74            mov d, b
0744   081F 32            mov bl, [d]
0745   0820 A7 00         mov bh, 0
0746   0822             ; START RELATIONAL
0747   0822 D7            push a
0748   0823 11            mov a, b
0749   0824 26 20 00      mov b, $20
0750   0827 B0            cmp a, b
0751   0828 FD 71         seq ; ==
0752   082A E4            pop a
0753   082B             ; END RELATIONAL
0754   082B C0 00 00      cmp b, 0
0755   082E C6 41 08      je _while14_exit
0756   0831             _while14_block:
0757   0831             ;; str++; 
0758   0831 FA 05 00      lea d, [bp + 5] ; $str
0759   0834 2A            mov b, [d]
0760   0835 D8            push b
0761   0836 FD 77         inc b
0762   0838 FA 05 00      lea d, [bp + 5] ; $str
0763   083B FD 43         mov [d], b
0764   083D E5            pop b
0765   083E 0A 1A 08      jmp _while14_cond
0766   0841             _while14_exit:
0767   0841             ;; if (*str == '-' || *str == '+') { 
0768   0841             _if15_cond:
0769   0841 FA 05 00      lea d, [bp + 5] ; $str
0770   0844 2A            mov b, [d]
0771   0845 74            mov d, b
0772   0846 32            mov bl, [d]
0773   0847 A7 00         mov bh, 0
0774   0849             ; START RELATIONAL
0775   0849 D7            push a
0776   084A 11            mov a, b
0777   084B 26 2D 00      mov b, $2d
0778   084E B0            cmp a, b
0779   084F FD 71         seq ; ==
0780   0851 E4            pop a
0781   0852             ; END RELATIONAL
0782   0852 D7            push a
0783   0853 11            mov a, b
0784   0854 FA 05 00      lea d, [bp + 5] ; $str
0785   0857 2A            mov b, [d]
0786   0858 74            mov d, b
0787   0859 32            mov bl, [d]
0788   085A A7 00         mov bh, 0
0789   085C             ; START RELATIONAL
0790   085C D7            push a
0791   085D 11            mov a, b
0792   085E 26 2B 00      mov b, $2b
0793   0861 B0            cmp a, b
0794   0862 FD 71         seq ; ==
0795   0864 E4            pop a
0796   0865             ; END RELATIONAL
0797   0865 FD A8         sor a, b ; ||
0798   0867 E4            pop a
0799   0868 C0 00 00      cmp b, 0
0800   086B C6 A2 08      je _if15_exit
0801   086E             _if15_true:
0802   086E             ;; if (*str == '-') sign = -1; 
0803   086E             _if16_cond:
0804   086E FA 05 00      lea d, [bp + 5] ; $str
0805   0871 2A            mov b, [d]
0806   0872 74            mov d, b
0807   0873 32            mov bl, [d]
0808   0874 A7 00         mov bh, 0
0809   0876             ; START RELATIONAL
0810   0876 D7            push a
0811   0877 11            mov a, b
0812   0878 26 2D 00      mov b, $2d
0813   087B B0            cmp a, b
0814   087C FD 71         seq ; ==
0815   087E E4            pop a
0816   087F             ; END RELATIONAL
0817   087F C0 00 00      cmp b, 0
0818   0882 C6 92 08      je _if16_exit
0819   0885             _if16_true:
0820   0885             ;; sign = -1; 
0821   0885 FA FD FF      lea d, [bp + -3] ; $sign
0822   0888 DA            push d
0823   0889 26 FF FF      mov b, $ffffffff
0824   088C E7            pop d
0825   088D FD 43         mov [d], b
0826   088F 0A 92 08      jmp _if16_exit
0827   0892             _if16_exit:
0828   0892             ;; str++; 
0829   0892 FA 05 00      lea d, [bp + 5] ; $str
0830   0895 2A            mov b, [d]
0831   0896 D8            push b
0832   0897 FD 77         inc b
0833   0899 FA 05 00      lea d, [bp + 5] ; $str
0834   089C FD 43         mov [d], b
0835   089E E5            pop b
0836   089F 0A A2 08      jmp _if15_exit
0837   08A2             _if15_exit:
0838   08A2             ;; while (*str >= '0' && *str <= '9') { 
0839   08A2             _while17_cond:
0840   08A2 FA 05 00      lea d, [bp + 5] ; $str
0841   08A5 2A            mov b, [d]
0842   08A6 74            mov d, b
0843   08A7 32            mov bl, [d]
0844   08A8 A7 00         mov bh, 0
0845   08AA             ; START RELATIONAL
0846   08AA D7            push a
0847   08AB 11            mov a, b
0848   08AC 26 30 00      mov b, $30
0849   08AF B0            cmp a, b
0850   08B0 FD 82         sgeu ; >= (unsigned)
0851   08B2 E4            pop a
0852   08B3             ; END RELATIONAL
0853   08B3 D7            push a
0854   08B4 11            mov a, b
0855   08B5 FA 05 00      lea d, [bp + 5] ; $str
0856   08B8 2A            mov b, [d]
0857   08B9 74            mov d, b
0858   08BA 32            mov bl, [d]
0859   08BB A7 00         mov bh, 0
0860   08BD             ; START RELATIONAL
0861   08BD D7            push a
0862   08BE 11            mov a, b
0863   08BF 26 39 00      mov b, $39
0864   08C2 B0            cmp a, b
0865   08C3 FD 76         sleu ; <= (unsigned)
0866   08C5 E4            pop a
0867   08C6             ; END RELATIONAL
0868   08C6 FD A7         sand a, b ; &&
0869   08C8 E4            pop a
0870   08C9 C0 00 00      cmp b, 0
0871   08CC C6 08 09      je _while17_exit
0872   08CF             _while17_block:
0873   08CF             ;; result = result * 10 + (*str - '0'); 
0874   08CF FA FF FF      lea d, [bp + -1] ; $result
0875   08D2 DA            push d
0876   08D3 FA FF FF      lea d, [bp + -1] ; $result
0877   08D6 2A            mov b, [d]
0878   08D7             ; START FACTORS
0879   08D7 D7            push a
0880   08D8 11            mov a, b
0881   08D9 26 0A 00      mov b, $a
0882   08DC AC            mul a, b ; *
0883   08DD 11            mov a, b
0884   08DE 27            mov b, a
0885   08DF E4            pop a
0886   08E0             ; END FACTORS
0887   08E0             ; START TERMS
0888   08E0 D7            push a
0889   08E1 11            mov a, b
0890   08E2 FA 05 00      lea d, [bp + 5] ; $str
0891   08E5 2A            mov b, [d]
0892   08E6 74            mov d, b
0893   08E7 32            mov bl, [d]
0894   08E8 A7 00         mov bh, 0
0895   08EA             ; START TERMS
0896   08EA D7            push a
0897   08EB 11            mov a, b
0898   08EC 26 30 00      mov b, $30
0899   08EF 60            sub a, b
0900   08F0 27            mov b, a
0901   08F1 E4            pop a
0902   08F2             ; END TERMS
0903   08F2 54            add a, b
0904   08F3 27            mov b, a
0905   08F4 E4            pop a
0906   08F5             ; END TERMS
0907   08F5 E7            pop d
0908   08F6 FD 43         mov [d], b
0909   08F8             ;; str++; 
0910   08F8 FA 05 00      lea d, [bp + 5] ; $str
0911   08FB 2A            mov b, [d]
0912   08FC D8            push b
0913   08FD FD 77         inc b
0914   08FF FA 05 00      lea d, [bp + 5] ; $str
0915   0902 FD 43         mov [d], b
0916   0904 E5            pop b
0917   0905 0A A2 08      jmp _while17_cond
0918   0908             _while17_exit:
0919   0908             ;; return sign * result; 
0920   0908 FA FD FF      lea d, [bp + -3] ; $sign
0921   090B 2A            mov b, [d]
0922   090C             ; START FACTORS
0923   090C D7            push a
0924   090D 11            mov a, b
0925   090E FA FF FF      lea d, [bp + -1] ; $result
0926   0911 2A            mov b, [d]
0927   0912 AC            mul a, b ; *
0928   0913 11            mov a, b
0929   0914 27            mov b, a
0930   0915 E4            pop a
0931   0916             ; END FACTORS
0932   0916 F9            leave
0933   0917 09            ret
0934   0918             
0935   0918             rand:
0936   0918 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0937   091B             ; $sec 
0938   091B 52 02 00      sub sp, 2
0939   091E             
0940   091E             ; --- BEGIN INLINE ASM BLOCK
0941   091E 19 00         mov al, 0
0942   0920 05 01         syscall sys_rtc					
0943   0922 1A            mov al, ah
0944   0923 FA FF FF      lea d, [bp + -1] ; $sec
0945   0926 1E            mov al, [d]
0946   0927 22 00         mov ah, 0
0947   0929             ; --- END INLINE ASM BLOCK
0948   0929             
0949   0929             ;; return sec; 
0950   0929 FA FF FF      lea d, [bp + -1] ; $sec
0951   092C 2A            mov b, [d]
0952   092D F9            leave
0953   092E 09            ret
0954   092F             
0955   092F             srand:
0956   092F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0957   0932 F9            leave
0958   0933 09            ret
0959   0934             
0960   0934             malloc:
0961   0934 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0962   0937 F9            leave
0963   0938 09            ret
0964   0939             
0965   0939             calloc:
0966   0939 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0967   093C F9            leave
0968   093D 09            ret
0969   093E             
0970   093E             realloc:
0971   093E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0972   0941 F9            leave
0973   0942 09            ret
0974   0943             
0975   0943             alloc:
0976   0943 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0977   0946             ;; heap_top = heap_top + bytes; 
0978   0946 3B 51 23      mov d, _heap_top ; $heap_top
0979   0949 DA            push d
0980   094A 3B 51 23      mov d, _heap_top ; $heap_top
0981   094D 2A            mov b, [d]
0982   094E             ; START TERMS
0983   094E D7            push a
0984   094F 11            mov a, b
0985   0950 FA 05 00      lea d, [bp + 5] ; $bytes
0986   0953 2A            mov b, [d]
0987   0954 54            add a, b
0988   0955 27            mov b, a
0989   0956 E4            pop a
0990   0957             ; END TERMS
0991   0957 E7            pop d
0992   0958 FD 43         mov [d], b
0993   095A             ;; return heap_top - bytes; 
0994   095A 3B 51 23      mov d, _heap_top ; $heap_top
0995   095D 2A            mov b, [d]
0996   095E             ; START TERMS
0997   095E D7            push a
0998   095F 11            mov a, b
0999   0960 FA 05 00      lea d, [bp + 5] ; $bytes
1000   0963 2A            mov b, [d]
1001   0964 60            sub a, b
1002   0965 27            mov b, a
1003   0966 E4            pop a
1004   0967             ; END TERMS
1005   0967 F9            leave
1006   0968 09            ret
1007   0969             
1008   0969             free:
1009   0969 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1010   096C             ;; return heap_top = heap_top - bytes; 
1011   096C 3B 51 23      mov d, _heap_top ; $heap_top
1012   096F DA            push d
1013   0970 3B 51 23      mov d, _heap_top ; $heap_top
1014   0973 2A            mov b, [d]
1015   0974             ; START TERMS
1016   0974 D7            push a
1017   0975 11            mov a, b
1018   0976 FA 05 00      lea d, [bp + 5] ; $bytes
1019   0979 2A            mov b, [d]
1020   097A 60            sub a, b
1021   097B 27            mov b, a
1022   097C E4            pop a
1023   097D             ; END TERMS
1024   097D E7            pop d
1025   097E FD 43         mov [d], b
1026   0980 F9            leave
1027   0981 09            ret
1028   0982             
1029   0982             va_start:
1030   0982 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1031   0985             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
1032   0985 FA 05 00      lea d, [bp + 5] ; $argp
1033   0988 FD 2A         mov d, [d]
1034   098A 58 00 00      add d, 0
1035   098D DA            push d
1036   098E FA 07 00      lea d, [bp + 7] ; $first_fixed_param
1037   0991 2A            mov b, [d]
1038   0992             ; START TERMS
1039   0992 D7            push a
1040   0993 11            mov a, b
1041   0994 26 02 00      mov b, 2
1042   0997 54            add a, b
1043   0998 27            mov b, a
1044   0999 E4            pop a
1045   099A             ; END TERMS
1046   099A E7            pop d
1047   099B FD 43         mov [d], b
1048   099D F9            leave
1049   099E 09            ret
1050   099F             
1051   099F             va_arg:
1052   099F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1053   09A2             ; $p 
1054   09A2 52 02 00      sub sp, 2
1055   09A5             ;; p = argp->current_arg; 
1056   09A5 FA FF FF      lea d, [bp + -1] ; $p
1057   09A8 DA            push d
1058   09A9 FA 05 00      lea d, [bp + 5] ; $argp
1059   09AC FD 2A         mov d, [d]
1060   09AE 58 00 00      add d, 0
1061   09B1 2A            mov b, [d]
1062   09B2 E7            pop d
1063   09B3 FD 43         mov [d], b
1064   09B5             ;; argp->current_arg = argp->current_arg + size; 
1065   09B5 FA 05 00      lea d, [bp + 5] ; $argp
1066   09B8 FD 2A         mov d, [d]
1067   09BA 58 00 00      add d, 0
1068   09BD DA            push d
1069   09BE FA 05 00      lea d, [bp + 5] ; $argp
1070   09C1 FD 2A         mov d, [d]
1071   09C3 58 00 00      add d, 0
1072   09C6 2A            mov b, [d]
1073   09C7             ; START TERMS
1074   09C7 D7            push a
1075   09C8 11            mov a, b
1076   09C9 FA 07 00      lea d, [bp + 7] ; $size
1077   09CC 2A            mov b, [d]
1078   09CD 54            add a, b
1079   09CE 27            mov b, a
1080   09CF E4            pop a
1081   09D0             ; END TERMS
1082   09D0 E7            pop d
1083   09D1 FD 43         mov [d], b
1084   09D3             ;; return p; 
1085   09D3 FA FF FF      lea d, [bp + -1] ; $p
1086   09D6 2A            mov b, [d]
1087   09D7 F9            leave
1088   09D8 09            ret
1089   09D9             
1090   09D9             va_end:
1091   09D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1092   09DC             ;; argp->current_arg =   0   ; 
1093   09DC FA 05 00      lea d, [bp + 5] ; $argp
1094   09DF FD 2A         mov d, [d]
1095   09E1 58 00 00      add d, 0
1096   09E4 DA            push d
1097   09E5 26 00 00      mov b, $0
1098   09E8 E7            pop d
1099   09E9 FD 43         mov [d], b
1100   09EB F9            leave
1101   09EC 09            ret
1102   09ED             
1103   09ED             printf:
1104   09ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
1105   09F0             ; $p 
1106   09F0             ; $fp 
1107   09F0             ; $i 
1108   09F0 52 06 00      sub sp, 6
1109   09F3             ;; fp = format; 
1110   09F3 FA FD FF      lea d, [bp + -3] ; $fp
1111   09F6 DA            push d
1112   09F7 FA 05 00      lea d, [bp + 5] ; $format
1113   09FA 2A            mov b, [d]
1114   09FB E7            pop d
1115   09FC FD 43         mov [d], b
1116   09FE             ;; p = &format + 2; 
1117   09FE FA FF FF      lea d, [bp + -1] ; $p
1118   0A01 DA            push d
1119   0A02 FA 05 00      lea d, [bp + 5] ; $format
1120   0A05 2D            mov b, d
1121   0A06             ; START TERMS
1122   0A06 D7            push a
1123   0A07 11            mov a, b
1124   0A08 26 02 00      mov b, $2
1125   0A0B 54            add a, b
1126   0A0C 27            mov b, a
1127   0A0D E4            pop a
1128   0A0E             ; END TERMS
1129   0A0E E7            pop d
1130   0A0F FD 43         mov [d], b
1131   0A11             ;; for(;;){ 
1132   0A11             _for18_init:
1133   0A11             _for18_cond:
1134   0A11             _for18_block:
1135   0A11             ;; if(!*fp) break; 
1136   0A11             _if19_cond:
1137   0A11 FA FD FF      lea d, [bp + -3] ; $fp
1138   0A14 2A            mov b, [d]
1139   0A15 74            mov d, b
1140   0A16 32            mov bl, [d]
1141   0A17 A7 00         mov bh, 0
1142   0A19 C0 00 00      cmp b, 0
1143   0A1C FD 71         seq ; !
1144   0A1E C0 00 00      cmp b, 0
1145   0A21 C6 2A 0A      je _if19_else
1146   0A24             _if19_true:
1147   0A24             ;; break; 
1148   0A24 0A 36 0C      jmp _for18_exit ; for break
1149   0A27 0A 33 0C      jmp _if19_exit
1150   0A2A             _if19_else:
1151   0A2A             ;; if(*fp == '%'){ 
1152   0A2A             _if20_cond:
1153   0A2A FA FD FF      lea d, [bp + -3] ; $fp
1154   0A2D 2A            mov b, [d]
1155   0A2E 74            mov d, b
1156   0A2F 32            mov bl, [d]
1157   0A30 A7 00         mov bh, 0
1158   0A32             ; START RELATIONAL
1159   0A32 D7            push a
1160   0A33 11            mov a, b
1161   0A34 26 25 00      mov b, $25
1162   0A37 B0            cmp a, b
1163   0A38 FD 71         seq ; ==
1164   0A3A E4            pop a
1165   0A3B             ; END RELATIONAL
1166   0A3B C0 00 00      cmp b, 0
1167   0A3E C6 17 0C      je _if20_else
1168   0A41             _if20_true:
1169   0A41             ;; fp++; 
1170   0A41 FA FD FF      lea d, [bp + -3] ; $fp
1171   0A44 2A            mov b, [d]
1172   0A45 D8            push b
1173   0A46 FD 77         inc b
1174   0A48 FA FD FF      lea d, [bp + -3] ; $fp
1175   0A4B FD 43         mov [d], b
1176   0A4D E5            pop b
1177   0A4E             ;; switch(*fp){ 
1178   0A4E             _switch21_expr:
1179   0A4E FA FD FF      lea d, [bp + -3] ; $fp
1180   0A51 2A            mov b, [d]
1181   0A52 74            mov d, b
1182   0A53 32            mov bl, [d]
1183   0A54 A7 00         mov bh, 0
1184   0A56             _switch21_comparisons:
1185   0A56 C1 6C         cmp bl, $6c
1186   0A58 C6 84 0A      je _switch21_case0
1187   0A5B C1 4C         cmp bl, $4c
1188   0A5D C6 84 0A      je _switch21_case1
1189   0A60 C1 64         cmp bl, $64
1190   0A62 C6 52 0B      je _switch21_case2
1191   0A65 C1 69         cmp bl, $69
1192   0A67 C6 52 0B      je _switch21_case3
1193   0A6A C1 75         cmp bl, $75
1194   0A6C C6 77 0B      je _switch21_case4
1195   0A6F C1 78         cmp bl, $78
1196   0A71 C6 9C 0B      je _switch21_case5
1197   0A74 C1 63         cmp bl, $63
1198   0A76 C6 BB 0B      je _switch21_case6
1199   0A79 C1 73         cmp bl, $73
1200   0A7B C6 DB 0B      je _switch21_case7
1201   0A7E 0A FB 0B      jmp _switch21_default
1202   0A81 0A 07 0C      jmp _switch21_exit
1203   0A84             _switch21_case0:
1204   0A84             _switch21_case1:
1205   0A84             ;; fp++; 
1206   0A84 FA FD FF      lea d, [bp + -3] ; $fp
1207   0A87 2A            mov b, [d]
1208   0A88 D8            push b
1209   0A89 FD 77         inc b
1210   0A8B FA FD FF      lea d, [bp + -3] ; $fp
1211   0A8E FD 43         mov [d], b
1212   0A90 E5            pop b
1213   0A91             ;; if(*fp == 'd' || *fp == 'i') 
1214   0A91             _if22_cond:
1215   0A91 FA FD FF      lea d, [bp + -3] ; $fp
1216   0A94 2A            mov b, [d]
1217   0A95 74            mov d, b
1218   0A96 32            mov bl, [d]
1219   0A97 A7 00         mov bh, 0
1220   0A99             ; START RELATIONAL
1221   0A99 D7            push a
1222   0A9A 11            mov a, b
1223   0A9B 26 64 00      mov b, $64
1224   0A9E B0            cmp a, b
1225   0A9F FD 71         seq ; ==
1226   0AA1 E4            pop a
1227   0AA2             ; END RELATIONAL
1228   0AA2 D7            push a
1229   0AA3 11            mov a, b
1230   0AA4 FA FD FF      lea d, [bp + -3] ; $fp
1231   0AA7 2A            mov b, [d]
1232   0AA8 74            mov d, b
1233   0AA9 32            mov bl, [d]
1234   0AAA A7 00         mov bh, 0
1235   0AAC             ; START RELATIONAL
1236   0AAC D7            push a
1237   0AAD 11            mov a, b
1238   0AAE 26 69 00      mov b, $69
1239   0AB1 B0            cmp a, b
1240   0AB2 FD 71         seq ; ==
1241   0AB4 E4            pop a
1242   0AB5             ; END RELATIONAL
1243   0AB5 FD A8         sor a, b ; ||
1244   0AB7 E4            pop a
1245   0AB8 C0 00 00      cmp b, 0
1246   0ABB C6 D2 0A      je _if22_else
1247   0ABE             _if22_true:
1248   0ABE             ;; print_signed_long(*(long *)p); 
1249   0ABE FD 79         mov g, b
1250   0AC0 28            mov b, c
1251   0AC1 FD AB         swp b
1252   0AC3 D8            push b
1253   0AC4 FD 27         mov b, g
1254   0AC6 FD AB         swp b
1255   0AC8 D8            push b
1256   0AC9 07 C6 0E      call print_signed_long
1257   0ACC 51 04 00      add sp, 4
1258   0ACF 0A 3C 0B      jmp _if22_exit
1259   0AD2             _if22_else:
1260   0AD2             ;; if(*fp == 'u') 
1261   0AD2             _if23_cond:
1262   0AD2 FA FD FF      lea d, [bp + -3] ; $fp
1263   0AD5 2A            mov b, [d]
1264   0AD6 74            mov d, b
1265   0AD7 32            mov bl, [d]
1266   0AD8 A7 00         mov bh, 0
1267   0ADA             ; START RELATIONAL
1268   0ADA D7            push a
1269   0ADB 11            mov a, b
1270   0ADC 26 75 00      mov b, $75
1271   0ADF B0            cmp a, b
1272   0AE0 FD 71         seq ; ==
1273   0AE2 E4            pop a
1274   0AE3             ; END RELATIONAL
1275   0AE3 C0 00 00      cmp b, 0
1276   0AE6 C6 FD 0A      je _if23_else
1277   0AE9             _if23_true:
1278   0AE9             ;; print_unsigned_long(*(unsigned long *)p); 
1279   0AE9 FD 79         mov g, b
1280   0AEB 28            mov b, c
1281   0AEC FD AB         swp b
1282   0AEE D8            push b
1283   0AEF FD 27         mov b, g
1284   0AF1 FD AB         swp b
1285   0AF3 D8            push b
1286   0AF4 07 19 10      call print_unsigned_long
1287   0AF7 51 04 00      add sp, 4
1288   0AFA 0A 3C 0B      jmp _if23_exit
1289   0AFD             _if23_else:
1290   0AFD             ;; if(*fp == 'x') 
1291   0AFD             _if24_cond:
1292   0AFD FA FD FF      lea d, [bp + -3] ; $fp
1293   0B00 2A            mov b, [d]
1294   0B01 74            mov d, b
1295   0B02 32            mov bl, [d]
1296   0B03 A7 00         mov bh, 0
1297   0B05             ; START RELATIONAL
1298   0B05 D7            push a
1299   0B06 11            mov a, b
1300   0B07 26 78 00      mov b, $78
1301   0B0A B0            cmp a, b
1302   0B0B FD 71         seq ; ==
1303   0B0D E4            pop a
1304   0B0E             ; END RELATIONAL
1305   0B0E C0 00 00      cmp b, 0
1306   0B11 C6 33 0B      je _if24_else
1307   0B14             _if24_true:
1308   0B14             ;; printx32(*(long int *)p); 
1309   0B14 FA FF FF      lea d, [bp + -1] ; $p
1310   0B17 2A            mov b, [d]
1311   0B18 74            mov d, b
1312   0B19 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1313   0B1C FD 39         mov c, b ; And place it into C
1314   0B1E 2A            mov b, [d] ; Lower Word in B
1315   0B1F FD 79         mov g, b
1316   0B21 28            mov b, c
1317   0B22 FD AB         swp b
1318   0B24 D8            push b
1319   0B25 FD 27         mov b, g
1320   0B27 FD AB         swp b
1321   0B29 D8            push b
1322   0B2A 07 4D 0C      call printx32
1323   0B2D 51 04 00      add sp, 4
1324   0B30 0A 3C 0B      jmp _if24_exit
1325   0B33             _if24_else:
1326   0B33             ;; err("Unexpected format in printf."); 
1327   0B33 26 07 23      mov b, __s1 ; "Unexpected format in printf."
1328   0B36 FD AB         swp b
1329   0B38 D8            push b
1330   0B39 07 38 0C      call err
1331   0B3C             _if24_exit:
1332   0B3C             _if23_exit:
1333   0B3C             _if22_exit:
1334   0B3C             ;; p = p + 4; 
1335   0B3C FA FF FF      lea d, [bp + -1] ; $p
1336   0B3F DA            push d
1337   0B40 FA FF FF      lea d, [bp + -1] ; $p
1338   0B43 2A            mov b, [d]
1339   0B44             ; START TERMS
1340   0B44 D7            push a
1341   0B45 11            mov a, b
1342   0B46 26 04 00      mov b, $4
1343   0B49 54            add a, b
1344   0B4A 27            mov b, a
1345   0B4B E4            pop a
1346   0B4C             ; END TERMS
1347   0B4C E7            pop d
1348   0B4D FD 43         mov [d], b
1349   0B4F             ;; break; 
1350   0B4F 0A 07 0C      jmp _switch21_exit ; case break
1351   0B52             _switch21_case2:
1352   0B52             _switch21_case3:
1353   0B52             ;; print_signed(*(int*)p); 
1354   0B52 FA FF FF      lea d, [bp + -1] ; $p
1355   0B55 2A            mov b, [d]
1356   0B56 74            mov d, b
1357   0B57 2A            mov b, [d]
1358   0B58 FD AB         swp b
1359   0B5A D8            push b
1360   0B5B 07 D6 0D      call print_signed
1361   0B5E 51 02 00      add sp, 2
1362   0B61             ;; p = p + 2; 
1363   0B61 FA FF FF      lea d, [bp + -1] ; $p
1364   0B64 DA            push d
1365   0B65 FA FF FF      lea d, [bp + -1] ; $p
1366   0B68 2A            mov b, [d]
1367   0B69             ; START TERMS
1368   0B69 D7            push a
1369   0B6A 11            mov a, b
1370   0B6B 26 02 00      mov b, $2
1371   0B6E 54            add a, b
1372   0B6F 27            mov b, a
1373   0B70 E4            pop a
1374   0B71             ; END TERMS
1375   0B71 E7            pop d
1376   0B72 FD 43         mov [d], b
1377   0B74             ;; break; 
1378   0B74 0A 07 0C      jmp _switch21_exit ; case break
1379   0B77             _switch21_case4:
1380   0B77             ;; print_unsigned(*(unsigned int*)p); 
1381   0B77 FA FF FF      lea d, [bp + -1] ; $p
1382   0B7A 2A            mov b, [d]
1383   0B7B 74            mov d, b
1384   0B7C 2A            mov b, [d]
1385   0B7D FD AB         swp b
1386   0B7F D8            push b
1387   0B80 07 17 11      call print_unsigned
1388   0B83 51 02 00      add sp, 2
1389   0B86             ;; p = p + 2; 
1390   0B86 FA FF FF      lea d, [bp + -1] ; $p
1391   0B89 DA            push d
1392   0B8A FA FF FF      lea d, [bp + -1] ; $p
1393   0B8D 2A            mov b, [d]
1394   0B8E             ; START TERMS
1395   0B8E D7            push a
1396   0B8F 11            mov a, b
1397   0B90 26 02 00      mov b, $2
1398   0B93 54            add a, b
1399   0B94 27            mov b, a
1400   0B95 E4            pop a
1401   0B96             ; END TERMS
1402   0B96 E7            pop d
1403   0B97 FD 43         mov [d], b
1404   0B99             ;; break; 
1405   0B99 0A 07 0C      jmp _switch21_exit ; case break
1406   0B9C             _switch21_case5:
1407   0B9C             
1408   0B9C             ; --- BEGIN INLINE ASM BLOCK
1409   0B9C FA FF FF      lea d, [bp + -1] ; $p
1410   0B9F FD 2A         mov d, [d]
1411   0BA1 2A            mov b, [d]
1412   0BA2 07 6B 15      call print_u16x
1413   0BA5             ; --- END INLINE ASM BLOCK
1414   0BA5             
1415   0BA5             ;; p = p + 2; 
1416   0BA5 FA FF FF      lea d, [bp + -1] ; $p
1417   0BA8 DA            push d
1418   0BA9 FA FF FF      lea d, [bp + -1] ; $p
1419   0BAC 2A            mov b, [d]
1420   0BAD             ; START TERMS
1421   0BAD D7            push a
1422   0BAE 11            mov a, b
1423   0BAF 26 02 00      mov b, $2
1424   0BB2 54            add a, b
1425   0BB3 27            mov b, a
1426   0BB4 E4            pop a
1427   0BB5             ; END TERMS
1428   0BB5 E7            pop d
1429   0BB6 FD 43         mov [d], b
1430   0BB8             ;; break; 
1431   0BB8 0A 07 0C      jmp _switch21_exit ; case break
1432   0BBB             _switch21_case6:
1433   0BBB             
1434   0BBB             ; --- BEGIN INLINE ASM BLOCK
1435   0BBB FA FF FF      lea d, [bp + -1] ; $p
1436   0BBE FD 2A         mov d, [d]
1437   0BC0 1E            mov al, [d]
1438   0BC1 23            mov ah, al
1439   0BC2 07 C9 13      call _putchar
1440   0BC5             ; --- END INLINE ASM BLOCK
1441   0BC5             
1442   0BC5             ;; p = p + 2; 
1443   0BC5 FA FF FF      lea d, [bp + -1] ; $p
1444   0BC8 DA            push d
1445   0BC9 FA FF FF      lea d, [bp + -1] ; $p
1446   0BCC 2A            mov b, [d]
1447   0BCD             ; START TERMS
1448   0BCD D7            push a
1449   0BCE 11            mov a, b
1450   0BCF 26 02 00      mov b, $2
1451   0BD2 54            add a, b
1452   0BD3 27            mov b, a
1453   0BD4 E4            pop a
1454   0BD5             ; END TERMS
1455   0BD5 E7            pop d
1456   0BD6 FD 43         mov [d], b
1457   0BD8             ;; break; 
1458   0BD8 0A 07 0C      jmp _switch21_exit ; case break
1459   0BDB             _switch21_case7:
1460   0BDB             
1461   0BDB             ; --- BEGIN INLINE ASM BLOCK
1462   0BDB FA FF FF      lea d, [bp + -1] ; $p
1463   0BDE FD 2A         mov d, [d]
1464   0BE0 FD 2A         mov d, [d]
1465   0BE2 07 13 15      call _puts
1466   0BE5             ; --- END INLINE ASM BLOCK
1467   0BE5             
1468   0BE5             ;; p = p + 2; 
1469   0BE5 FA FF FF      lea d, [bp + -1] ; $p
1470   0BE8 DA            push d
1471   0BE9 FA FF FF      lea d, [bp + -1] ; $p
1472   0BEC 2A            mov b, [d]
1473   0BED             ; START TERMS
1474   0BED D7            push a
1475   0BEE 11            mov a, b
1476   0BEF 26 02 00      mov b, $2
1477   0BF2 54            add a, b
1478   0BF3 27            mov b, a
1479   0BF4 E4            pop a
1480   0BF5             ; END TERMS
1481   0BF5 E7            pop d
1482   0BF6 FD 43         mov [d], b
1483   0BF8             ;; break; 
1484   0BF8 0A 07 0C      jmp _switch21_exit ; case break
1485   0BFB             _switch21_default:
1486   0BFB             ;; print("Error: Unknown argument type.\n"); 
1487   0BFB 26 24 23      mov b, __s2 ; "Error: Unknown argument type.\n"
1488   0BFE FD AB         swp b
1489   0C00 D8            push b
1490   0C01 07 30 12      call print
1491   0C04 51 02 00      add sp, 2
1492   0C07             _switch21_exit:
1493   0C07             ;; fp++; 
1494   0C07 FA FD FF      lea d, [bp + -3] ; $fp
1495   0C0A 2A            mov b, [d]
1496   0C0B D8            push b
1497   0C0C FD 77         inc b
1498   0C0E FA FD FF      lea d, [bp + -3] ; $fp
1499   0C11 FD 43         mov [d], b
1500   0C13 E5            pop b
1501   0C14 0A 33 0C      jmp _if20_exit
1502   0C17             _if20_else:
1503   0C17             ;; putchar(*fp); 
1504   0C17 FA FD FF      lea d, [bp + -3] ; $fp
1505   0C1A 2A            mov b, [d]
1506   0C1B 74            mov d, b
1507   0C1C 32            mov bl, [d]
1508   0C1D A7 00         mov bh, 0
1509   0C1F DD            push bl
1510   0C20 07 E8 11      call putchar
1511   0C23 51 01 00      add sp, 1
1512   0C26             ;; fp++; 
1513   0C26 FA FD FF      lea d, [bp + -3] ; $fp
1514   0C29 2A            mov b, [d]
1515   0C2A D8            push b
1516   0C2B FD 77         inc b
1517   0C2D FA FD FF      lea d, [bp + -3] ; $fp
1518   0C30 FD 43         mov [d], b
1519   0C32 E5            pop b
1520   0C33             _if20_exit:
1521   0C33             _if19_exit:
1522   0C33             _for18_update:
1523   0C33 0A 11 0A      jmp _for18_cond
1524   0C36             _for18_exit:
1525   0C36 F9            leave
1526   0C37 09            ret
1527   0C38             
1528   0C38             err:
1529   0C38 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1530   0C3B             ;; print(e); 
1531   0C3B FA 05 00      lea d, [bp + 5] ; $e
1532   0C3E 2A            mov b, [d]
1533   0C3F FD AB         swp b
1534   0C41 D8            push b
1535   0C42 07 30 12      call print
1536   0C45 51 02 00      add sp, 2
1537   0C48             ;; exit(); 
1538   0C48 07 01 08      call exit
1539   0C4B F9            leave
1540   0C4C 09            ret
1541   0C4D             
1542   0C4D             printx32:
1543   0C4D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1544   0C50             
1545   0C50             ; --- BEGIN INLINE ASM BLOCK
1546   0C50 FA 05 00      lea d, [bp + 5] ; $hex
1547   0C53 2B 02 00      mov b, [d+2]
1548   0C56 07 6B 15      call print_u16x
1549   0C59 2A            mov b, [d]
1550   0C5A 07 6B 15      call print_u16x
1551   0C5D             ; --- END INLINE ASM BLOCK
1552   0C5D             
1553   0C5D F9            leave
1554   0C5E 09            ret
1555   0C5F             
1556   0C5F             printx16:
1557   0C5F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1558   0C62             
1559   0C62             ; --- BEGIN INLINE ASM BLOCK
1560   0C62 FA 05 00      lea d, [bp + 5] ; $hex
1561   0C65 2A            mov b, [d]
1562   0C66 07 6B 15      call print_u16x
1563   0C69             ; --- END INLINE ASM BLOCK
1564   0C69             
1565   0C69 F9            leave
1566   0C6A 09            ret
1567   0C6B             
1568   0C6B             printx8:
1569   0C6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1570   0C6E             
1571   0C6E             ; --- BEGIN INLINE ASM BLOCK
1572   0C6E FA 05 00      lea d, [bp + 5] ; $hex
1573   0C71 32            mov bl, [d]
1574   0C72 07 AF 15      call print_u8x
1575   0C75             ; --- END INLINE ASM BLOCK
1576   0C75             
1577   0C75 F9            leave
1578   0C76 09            ret
1579   0C77             
1580   0C77             hex_to_int:
1581   0C77 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1582   0C7A             ; $value 
1583   0C7A 10 00 00      mov a, $0
1584   0C7D 45 FF FF      mov [bp + -1], a
1585   0C80             ; $i 
1586   0C80             ; $hex_char 
1587   0C80             ; $len 
1588   0C80 52 07 00      sub sp, 7
1589   0C83             ;; len = strlen(hex_string); 
1590   0C83 FA FA FF      lea d, [bp + -6] ; $len
1591   0C86 DA            push d
1592   0C87 FA 05 00      lea d, [bp + 5] ; $hex_string
1593   0C8A 2A            mov b, [d]
1594   0C8B FD AB         swp b
1595   0C8D D8            push b
1596   0C8E 07 B8 07      call strlen
1597   0C91 51 02 00      add sp, 2
1598   0C94 E7            pop d
1599   0C95 FD 43         mov [d], b
1600   0C97             ;; for (i = 0; i < len; i++) { 
1601   0C97             _for25_init:
1602   0C97 FA FD FF      lea d, [bp + -3] ; $i
1603   0C9A DA            push d
1604   0C9B 26 00 00      mov b, $0
1605   0C9E E7            pop d
1606   0C9F FD 43         mov [d], b
1607   0CA1             _for25_cond:
1608   0CA1 FA FD FF      lea d, [bp + -3] ; $i
1609   0CA4 2A            mov b, [d]
1610   0CA5             ; START RELATIONAL
1611   0CA5 D7            push a
1612   0CA6 11            mov a, b
1613   0CA7 FA FA FF      lea d, [bp + -6] ; $len
1614   0CAA 2A            mov b, [d]
1615   0CAB FD 73         slt ; <= (signed)
1616   0CAD E4            pop a
1617   0CAE             ; END RELATIONAL
1618   0CAE C0 00 00      cmp b, 0
1619   0CB1 C6 B6 0D      je _for25_exit
1620   0CB4             _for25_block:
1621   0CB4             ;; hex_char = hex_string[i]; 
1622   0CB4 FA FC FF      lea d, [bp + -4] ; $hex_char
1623   0CB7 DA            push d
1624   0CB8 FA 05 00      lea d, [bp + 5] ; $hex_string
1625   0CBB FD 2A         mov d, [d]
1626   0CBD D7            push a
1627   0CBE DA            push d
1628   0CBF FA FD FF      lea d, [bp + -3] ; $i
1629   0CC2 2A            mov b, [d]
1630   0CC3 E7            pop d
1631   0CC4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1632   0CC8 E4            pop a
1633   0CC9 32            mov bl, [d]
1634   0CCA A7 00         mov bh, 0
1635   0CCC E7            pop d
1636   0CCD FD 3E         mov [d], bl
1637   0CCF             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1638   0CCF             _if26_cond:
1639   0CCF FA FC FF      lea d, [bp + -4] ; $hex_char
1640   0CD2 32            mov bl, [d]
1641   0CD3 A7 00         mov bh, 0
1642   0CD5             ; START RELATIONAL
1643   0CD5 D7            push a
1644   0CD6 11            mov a, b
1645   0CD7 26 61 00      mov b, $61
1646   0CDA B0            cmp a, b
1647   0CDB FD 80         sge ; >=
1648   0CDD E4            pop a
1649   0CDE             ; END RELATIONAL
1650   0CDE D7            push a
1651   0CDF 11            mov a, b
1652   0CE0 FA FC FF      lea d, [bp + -4] ; $hex_char
1653   0CE3 32            mov bl, [d]
1654   0CE4 A7 00         mov bh, 0
1655   0CE6             ; START RELATIONAL
1656   0CE6 D7            push a
1657   0CE7 11            mov a, b
1658   0CE8 26 66 00      mov b, $66
1659   0CEB B0            cmp a, b
1660   0CEC FD 74         sle ; <=
1661   0CEE E4            pop a
1662   0CEF             ; END RELATIONAL
1663   0CEF FD A7         sand a, b ; &&
1664   0CF1 E4            pop a
1665   0CF2 C0 00 00      cmp b, 0
1666   0CF5 C6 27 0D      je _if26_else
1667   0CF8             _if26_true:
1668   0CF8             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1669   0CF8 FA FF FF      lea d, [bp + -1] ; $value
1670   0CFB DA            push d
1671   0CFC FA FF FF      lea d, [bp + -1] ; $value
1672   0CFF 2A            mov b, [d]
1673   0D00             ; START FACTORS
1674   0D00 D7            push a
1675   0D01 11            mov a, b
1676   0D02 26 10 00      mov b, $10
1677   0D05 AC            mul a, b ; *
1678   0D06 11            mov a, b
1679   0D07 27            mov b, a
1680   0D08 E4            pop a
1681   0D09             ; END FACTORS
1682   0D09             ; START TERMS
1683   0D09 D7            push a
1684   0D0A 11            mov a, b
1685   0D0B FA FC FF      lea d, [bp + -4] ; $hex_char
1686   0D0E 32            mov bl, [d]
1687   0D0F A7 00         mov bh, 0
1688   0D11             ; START TERMS
1689   0D11 D7            push a
1690   0D12 11            mov a, b
1691   0D13 26 61 00      mov b, $61
1692   0D16 60            sub a, b
1693   0D17 11            mov a, b
1694   0D18 26 0A 00      mov b, $a
1695   0D1B 54            add a, b
1696   0D1C 27            mov b, a
1697   0D1D E4            pop a
1698   0D1E             ; END TERMS
1699   0D1E 54            add a, b
1700   0D1F 27            mov b, a
1701   0D20 E4            pop a
1702   0D21             ; END TERMS
1703   0D21 E7            pop d
1704   0D22 FD 43         mov [d], b
1705   0D24 0A A6 0D      jmp _if26_exit
1706   0D27             _if26_else:
1707   0D27             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1708   0D27             _if27_cond:
1709   0D27 FA FC FF      lea d, [bp + -4] ; $hex_char
1710   0D2A 32            mov bl, [d]
1711   0D2B A7 00         mov bh, 0
1712   0D2D             ; START RELATIONAL
1713   0D2D D7            push a
1714   0D2E 11            mov a, b
1715   0D2F 26 41 00      mov b, $41
1716   0D32 B0            cmp a, b
1717   0D33 FD 80         sge ; >=
1718   0D35 E4            pop a
1719   0D36             ; END RELATIONAL
1720   0D36 D7            push a
1721   0D37 11            mov a, b
1722   0D38 FA FC FF      lea d, [bp + -4] ; $hex_char
1723   0D3B 32            mov bl, [d]
1724   0D3C A7 00         mov bh, 0
1725   0D3E             ; START RELATIONAL
1726   0D3E D7            push a
1727   0D3F 11            mov a, b
1728   0D40 26 46 00      mov b, $46
1729   0D43 B0            cmp a, b
1730   0D44 FD 74         sle ; <=
1731   0D46 E4            pop a
1732   0D47             ; END RELATIONAL
1733   0D47 FD A7         sand a, b ; &&
1734   0D49 E4            pop a
1735   0D4A C0 00 00      cmp b, 0
1736   0D4D C6 7F 0D      je _if27_else
1737   0D50             _if27_true:
1738   0D50             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1739   0D50 FA FF FF      lea d, [bp + -1] ; $value
1740   0D53 DA            push d
1741   0D54 FA FF FF      lea d, [bp + -1] ; $value
1742   0D57 2A            mov b, [d]
1743   0D58             ; START FACTORS
1744   0D58 D7            push a
1745   0D59 11            mov a, b
1746   0D5A 26 10 00      mov b, $10
1747   0D5D AC            mul a, b ; *
1748   0D5E 11            mov a, b
1749   0D5F 27            mov b, a
1750   0D60 E4            pop a
1751   0D61             ; END FACTORS
1752   0D61             ; START TERMS
1753   0D61 D7            push a
1754   0D62 11            mov a, b
1755   0D63 FA FC FF      lea d, [bp + -4] ; $hex_char
1756   0D66 32            mov bl, [d]
1757   0D67 A7 00         mov bh, 0
1758   0D69             ; START TERMS
1759   0D69 D7            push a
1760   0D6A 11            mov a, b
1761   0D6B 26 41 00      mov b, $41
1762   0D6E 60            sub a, b
1763   0D6F 11            mov a, b
1764   0D70 26 0A 00      mov b, $a
1765   0D73 54            add a, b
1766   0D74 27            mov b, a
1767   0D75 E4            pop a
1768   0D76             ; END TERMS
1769   0D76 54            add a, b
1770   0D77 27            mov b, a
1771   0D78 E4            pop a
1772   0D79             ; END TERMS
1773   0D79 E7            pop d
1774   0D7A FD 43         mov [d], b
1775   0D7C 0A A6 0D      jmp _if27_exit
1776   0D7F             _if27_else:
1777   0D7F             ;; value = (value * 16) + (hex_char - '0'); 
1778   0D7F FA FF FF      lea d, [bp + -1] ; $value
1779   0D82 DA            push d
1780   0D83 FA FF FF      lea d, [bp + -1] ; $value
1781   0D86 2A            mov b, [d]
1782   0D87             ; START FACTORS
1783   0D87 D7            push a
1784   0D88 11            mov a, b
1785   0D89 26 10 00      mov b, $10
1786   0D8C AC            mul a, b ; *
1787   0D8D 11            mov a, b
1788   0D8E 27            mov b, a
1789   0D8F E4            pop a
1790   0D90             ; END FACTORS
1791   0D90             ; START TERMS
1792   0D90 D7            push a
1793   0D91 11            mov a, b
1794   0D92 FA FC FF      lea d, [bp + -4] ; $hex_char
1795   0D95 32            mov bl, [d]
1796   0D96 A7 00         mov bh, 0
1797   0D98             ; START TERMS
1798   0D98 D7            push a
1799   0D99 11            mov a, b
1800   0D9A 26 30 00      mov b, $30
1801   0D9D 60            sub a, b
1802   0D9E 27            mov b, a
1803   0D9F E4            pop a
1804   0DA0             ; END TERMS
1805   0DA0 54            add a, b
1806   0DA1 27            mov b, a
1807   0DA2 E4            pop a
1808   0DA3             ; END TERMS
1809   0DA3 E7            pop d
1810   0DA4 FD 43         mov [d], b
1811   0DA6             _if27_exit:
1812   0DA6             _if26_exit:
1813   0DA6             _for25_update:
1814   0DA6 FA FD FF      lea d, [bp + -3] ; $i
1815   0DA9 2A            mov b, [d]
1816   0DAA D8            push b
1817   0DAB FD 77         inc b
1818   0DAD FA FD FF      lea d, [bp + -3] ; $i
1819   0DB0 FD 43         mov [d], b
1820   0DB2 E5            pop b
1821   0DB3 0A A1 0C      jmp _for25_cond
1822   0DB6             _for25_exit:
1823   0DB6             ;; return value; 
1824   0DB6 FA FF FF      lea d, [bp + -1] ; $value
1825   0DB9 2A            mov b, [d]
1826   0DBA F9            leave
1827   0DBB 09            ret
1828   0DBC             
1829   0DBC             gets:
1830   0DBC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1831   0DBF             
1832   0DBF             ; --- BEGIN INLINE ASM BLOCK
1833   0DBF FA 05 00      lea d, [bp + 5] ; $s
1834   0DC2 15            mov a, [d]
1835   0DC3 3C            mov d, a
1836   0DC4 07 D0 13      call _gets
1837   0DC7             ; --- END INLINE ASM BLOCK
1838   0DC7             
1839   0DC7             ;; return strlen(s); 
1840   0DC7 FA 05 00      lea d, [bp + 5] ; $s
1841   0DCA 2A            mov b, [d]
1842   0DCB FD AB         swp b
1843   0DCD D8            push b
1844   0DCE 07 B8 07      call strlen
1845   0DD1 51 02 00      add sp, 2
1846   0DD4 F9            leave
1847   0DD5 09            ret
1848   0DD6             
1849   0DD6             print_signed:
1850   0DD6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1851   0DD9             ; $digits 
1852   0DD9             ; $i 
1853   0DD9 10 00 00      mov a, $0
1854   0DDC 45 FA FF      mov [bp + -6], a
1855   0DDF 52 07 00      sub sp, 7
1856   0DE2             ;; if (num < 0) { 
1857   0DE2             _if28_cond:
1858   0DE2 FA 05 00      lea d, [bp + 5] ; $num
1859   0DE5 2A            mov b, [d]
1860   0DE6             ; START RELATIONAL
1861   0DE6 D7            push a
1862   0DE7 11            mov a, b
1863   0DE8 26 00 00      mov b, $0
1864   0DEB FD 73         slt ; <= (signed)
1865   0DED E4            pop a
1866   0DEE             ; END RELATIONAL
1867   0DEE C0 00 00      cmp b, 0
1868   0DF1 C6 0E 0E      je _if28_else
1869   0DF4             _if28_true:
1870   0DF4             ;; putchar('-'); 
1871   0DF4 26 2D 00      mov b, $2d
1872   0DF7 DD            push bl
1873   0DF8 07 E8 11      call putchar
1874   0DFB 51 01 00      add sp, 1
1875   0DFE             ;; num = -num; 
1876   0DFE FA 05 00      lea d, [bp + 5] ; $num
1877   0E01 DA            push d
1878   0E02 FA 05 00      lea d, [bp + 5] ; $num
1879   0E05 2A            mov b, [d]
1880   0E06 FD 97         neg b
1881   0E08 E7            pop d
1882   0E09 FD 43         mov [d], b
1883   0E0B 0A 30 0E      jmp _if28_exit
1884   0E0E             _if28_else:
1885   0E0E             ;; if (num == 0) { 
1886   0E0E             _if29_cond:
1887   0E0E FA 05 00      lea d, [bp + 5] ; $num
1888   0E11 2A            mov b, [d]
1889   0E12             ; START RELATIONAL
1890   0E12 D7            push a
1891   0E13 11            mov a, b
1892   0E14 26 00 00      mov b, $0
1893   0E17 B0            cmp a, b
1894   0E18 FD 71         seq ; ==
1895   0E1A E4            pop a
1896   0E1B             ; END RELATIONAL
1897   0E1B C0 00 00      cmp b, 0
1898   0E1E C6 30 0E      je _if29_exit
1899   0E21             _if29_true:
1900   0E21             ;; putchar('0'); 
1901   0E21 26 30 00      mov b, $30
1902   0E24 DD            push bl
1903   0E25 07 E8 11      call putchar
1904   0E28 51 01 00      add sp, 1
1905   0E2B             ;; return; 
1906   0E2B F9            leave
1907   0E2C 09            ret
1908   0E2D 0A 30 0E      jmp _if29_exit
1909   0E30             _if29_exit:
1910   0E30             _if28_exit:
1911   0E30             ;; while (num > 0) { 
1912   0E30             _while30_cond:
1913   0E30 FA 05 00      lea d, [bp + 5] ; $num
1914   0E33 2A            mov b, [d]
1915   0E34             ; START RELATIONAL
1916   0E34 D7            push a
1917   0E35 11            mov a, b
1918   0E36 26 00 00      mov b, $0
1919   0E39 B0            cmp a, b
1920   0E3A FD 7F         sgt ; >
1921   0E3C E4            pop a
1922   0E3D             ; END RELATIONAL
1923   0E3D C0 00 00      cmp b, 0
1924   0E40 C6 8B 0E      je _while30_exit
1925   0E43             _while30_block:
1926   0E43             ;; digits[i] = '0' + (num % 10); 
1927   0E43 FA FC FF      lea d, [bp + -4] ; $digits
1928   0E46 D7            push a
1929   0E47 DA            push d
1930   0E48 FA FA FF      lea d, [bp + -6] ; $i
1931   0E4B 2A            mov b, [d]
1932   0E4C E7            pop d
1933   0E4D 5A            add d, b
1934   0E4E E4            pop a
1935   0E4F DA            push d
1936   0E50 26 30 00      mov b, $30
1937   0E53             ; START TERMS
1938   0E53 D7            push a
1939   0E54 11            mov a, b
1940   0E55 FA 05 00      lea d, [bp + 5] ; $num
1941   0E58 2A            mov b, [d]
1942   0E59             ; START FACTORS
1943   0E59 D7            push a
1944   0E5A 11            mov a, b
1945   0E5B 26 0A 00      mov b, $a
1946   0E5E AE            div a, b ; 
1947   0E5F 11            mov a, b
1948   0E60 27            mov b, a
1949   0E61 E4            pop a
1950   0E62             ; END FACTORS
1951   0E62 54            add a, b
1952   0E63 27            mov b, a
1953   0E64 E4            pop a
1954   0E65             ; END TERMS
1955   0E65 E7            pop d
1956   0E66 FD 3E         mov [d], bl
1957   0E68             ;; num = num / 10; 
1958   0E68 FA 05 00      lea d, [bp + 5] ; $num
1959   0E6B DA            push d
1960   0E6C FA 05 00      lea d, [bp + 5] ; $num
1961   0E6F 2A            mov b, [d]
1962   0E70             ; START FACTORS
1963   0E70 D7            push a
1964   0E71 11            mov a, b
1965   0E72 26 0A 00      mov b, $a
1966   0E75 AE            div a, b
1967   0E76 27            mov b, a
1968   0E77 E4            pop a
1969   0E78             ; END FACTORS
1970   0E78 E7            pop d
1971   0E79 FD 43         mov [d], b
1972   0E7B             ;; i++; 
1973   0E7B FA FA FF      lea d, [bp + -6] ; $i
1974   0E7E 2A            mov b, [d]
1975   0E7F D8            push b
1976   0E80 FD 77         inc b
1977   0E82 FA FA FF      lea d, [bp + -6] ; $i
1978   0E85 FD 43         mov [d], b
1979   0E87 E5            pop b
1980   0E88 0A 30 0E      jmp _while30_cond
1981   0E8B             _while30_exit:
1982   0E8B             ;; while (i > 0) { 
1983   0E8B             _while31_cond:
1984   0E8B FA FA FF      lea d, [bp + -6] ; $i
1985   0E8E 2A            mov b, [d]
1986   0E8F             ; START RELATIONAL
1987   0E8F D7            push a
1988   0E90 11            mov a, b
1989   0E91 26 00 00      mov b, $0
1990   0E94 B0            cmp a, b
1991   0E95 FD 7F         sgt ; >
1992   0E97 E4            pop a
1993   0E98             ; END RELATIONAL
1994   0E98 C0 00 00      cmp b, 0
1995   0E9B C6 C4 0E      je _while31_exit
1996   0E9E             _while31_block:
1997   0E9E             ;; i--; 
1998   0E9E FA FA FF      lea d, [bp + -6] ; $i
1999   0EA1 2A            mov b, [d]
2000   0EA2 D8            push b
2001   0EA3 FD 7D         dec b
2002   0EA5 FA FA FF      lea d, [bp + -6] ; $i
2003   0EA8 FD 43         mov [d], b
2004   0EAA E5            pop b
2005   0EAB             ;; putchar(digits[i]); 
2006   0EAB FA FC FF      lea d, [bp + -4] ; $digits
2007   0EAE D7            push a
2008   0EAF DA            push d
2009   0EB0 FA FA FF      lea d, [bp + -6] ; $i
2010   0EB3 2A            mov b, [d]
2011   0EB4 E7            pop d
2012   0EB5 5A            add d, b
2013   0EB6 E4            pop a
2014   0EB7 32            mov bl, [d]
2015   0EB8 A7 00         mov bh, 0
2016   0EBA DD            push bl
2017   0EBB 07 E8 11      call putchar
2018   0EBE 51 01 00      add sp, 1
2019   0EC1 0A 8B 0E      jmp _while31_cond
2020   0EC4             _while31_exit:
2021   0EC4 F9            leave
2022   0EC5 09            ret
2023   0EC6             
2024   0EC6             print_signed_long:
2025   0EC6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2026   0EC9             ; $digits 
2027   0EC9             ; $i 
2028   0EC9 10 00 00      mov a, $0
2029   0ECC 45 F5 FF      mov [bp + -11], a
2030   0ECF 52 0C 00      sub sp, 12
2031   0ED2             ;; if (num < 0) { 
2032   0ED2             _if32_cond:
2033   0ED2 FA 05 00      lea d, [bp + 5] ; $num
2034   0ED5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2035   0ED8 FD 39         mov c, b ; And place it into C
2036   0EDA 2A            mov b, [d] ; Lower Word in B
2037   0EDB             ; START RELATIONAL
2038   0EDB D7            push a
2039   0EDC FD D8         push g
2040   0EDE 11            mov a, b
2041   0EDF FD 7A         mov g, c
2042   0EE1 26 00 00      mov b, $0
2043   0EE4 4D            mov si, a
2044   0EE5 11            mov a, b
2045   0EE6 4F            mov di, a
2046   0EE7 FD 12         mov a, g
2047   0EE9 28            mov b, c
2048   0EEA B0            cmp a, b
2049   0EEB FD 75         slu ; <
2050   0EED D8            push b
2051   0EEE 28            mov b, c
2052   0EEF FD 71         seq ; ==
2053   0EF1 D8            push b
2054   0EF2 50            mov a, di
2055   0EF3 27            mov b, a
2056   0EF4 4E            mov a, si
2057   0EF5 B0            cmp a, b
2058   0EF6 FD 75         slu ; <
2059   0EF8 E4            pop a
2060   0EF9 FD 92         and b, a
2061   0EFB E4            pop a
2062   0EFC FD 70         or b, a
2063   0EFE               
2064   0EFE FD F1         pop g
2065   0F00 E4            pop a
2066   0F01             ; END RELATIONAL
2067   0F01 C0 00 00      cmp b, 0
2068   0F04 C6 2B 0F      je _if32_else
2069   0F07             _if32_true:
2070   0F07             ;; putchar('-'); 
2071   0F07 26 2D 00      mov b, $2d
2072   0F0A DD            push bl
2073   0F0B 07 E8 11      call putchar
2074   0F0E 51 01 00      add sp, 1
2075   0F11             ;; num = -num; 
2076   0F11 FA 05 00      lea d, [bp + 5] ; $num
2077   0F14 DA            push d
2078   0F15 FA 05 00      lea d, [bp + 5] ; $num
2079   0F18 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2080   0F1B FD 39         mov c, b ; And place it into C
2081   0F1D 2A            mov b, [d] ; Lower Word in B
2082   0F1E FD 97         neg b
2083   0F20 E7            pop d
2084   0F21 FD 43         mov [d], b
2085   0F23 28            mov b, c
2086   0F24 FD 44 02 00   mov [d + 2], b
2087   0F28 0A 62 0F      jmp _if32_exit
2088   0F2B             _if32_else:
2089   0F2B             ;; if (num == 0) { 
2090   0F2B             _if33_cond:
2091   0F2B FA 05 00      lea d, [bp + 5] ; $num
2092   0F2E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2093   0F31 FD 39         mov c, b ; And place it into C
2094   0F33 2A            mov b, [d] ; Lower Word in B
2095   0F34             ; START RELATIONAL
2096   0F34 D7            push a
2097   0F35 FD D8         push g
2098   0F37 11            mov a, b
2099   0F38 FD 7A         mov g, c
2100   0F3A 26 00 00      mov b, $0
2101   0F3D B0            cmp a, b
2102   0F3E FD 71         seq ; ==
2103   0F40 D8            push b
2104   0F41 12            mov a, c
2105   0F42 FD 27         mov b, g
2106   0F44 B0            cmp a, b
2107   0F45 FD 71         seq ; ==
2108   0F47 E4            pop a
2109   0F48 FD A7         sand a, b
2110   0F4A FD F1         pop g
2111   0F4C E4            pop a
2112   0F4D             ; END RELATIONAL
2113   0F4D C0 00 00      cmp b, 0
2114   0F50 C6 62 0F      je _if33_exit
2115   0F53             _if33_true:
2116   0F53             ;; putchar('0'); 
2117   0F53 26 30 00      mov b, $30
2118   0F56 DD            push bl
2119   0F57 07 E8 11      call putchar
2120   0F5A 51 01 00      add sp, 1
2121   0F5D             ;; return; 
2122   0F5D F9            leave
2123   0F5E 09            ret
2124   0F5F 0A 62 0F      jmp _if33_exit
2125   0F62             _if33_exit:
2126   0F62             _if32_exit:
2127   0F62             ;; while (num > 0) { 
2128   0F62             _while34_cond:
2129   0F62 FA 05 00      lea d, [bp + 5] ; $num
2130   0F65 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2131   0F68 FD 39         mov c, b ; And place it into C
2132   0F6A 2A            mov b, [d] ; Lower Word in B
2133   0F6B             ; START RELATIONAL
2134   0F6B D7            push a
2135   0F6C FD D8         push g
2136   0F6E 11            mov a, b
2137   0F6F FD 7A         mov g, c
2138   0F71 26 00 00      mov b, $0
2139   0F74 B0            cmp a, b
2140   0F75 FD 7F         sgt ; >
2141   0F77 FD F1         pop g
2142   0F79 E4            pop a
2143   0F7A             ; END RELATIONAL
2144   0F7A C0 00 00      cmp b, 0
2145   0F7D C6 DE 0F      je _while34_exit
2146   0F80             _while34_block:
2147   0F80             ;; digits[i] = '0' + (num % 10); 
2148   0F80 FA F7 FF      lea d, [bp + -9] ; $digits
2149   0F83 D7            push a
2150   0F84 DA            push d
2151   0F85 FA F5 FF      lea d, [bp + -11] ; $i
2152   0F88 2A            mov b, [d]
2153   0F89 E7            pop d
2154   0F8A 5A            add d, b
2155   0F8B E4            pop a
2156   0F8C DA            push d
2157   0F8D 26 30 00      mov b, $30
2158   0F90             ; START TERMS
2159   0F90 D7            push a
2160   0F91 11            mov a, b
2161   0F92 FA 05 00      lea d, [bp + 5] ; $num
2162   0F95 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2163   0F98 FD 39         mov c, b ; And place it into C
2164   0F9A 2A            mov b, [d] ; Lower Word in B
2165   0F9B             ; START FACTORS
2166   0F9B D7            push a
2167   0F9C 11            mov a, b
2168   0F9D 26 0A 00      mov b, $a
2169   0FA0 AE            div a, b ; 
2170   0FA1 11            mov a, b
2171   0FA2 27            mov b, a
2172   0FA3 E4            pop a
2173   0FA4             ; END FACTORS
2174   0FA4 54            add a, b
2175   0FA5 D7            push a
2176   0FA6 FD 12         mov a, g
2177   0FA8 28            mov b, c
2178   0FA9 5C            adc a, b
2179   0FAA 39            mov c, a
2180   0FAB E5            pop b
2181   0FAC 27            mov b, a
2182   0FAD E4            pop a
2183   0FAE             ; END TERMS
2184   0FAE E7            pop d
2185   0FAF FD 3E         mov [d], bl
2186   0FB1             ;; num = num / 10; 
2187   0FB1 FA 05 00      lea d, [bp + 5] ; $num
2188   0FB4 DA            push d
2189   0FB5 FA 05 00      lea d, [bp + 5] ; $num
2190   0FB8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2191   0FBB FD 39         mov c, b ; And place it into C
2192   0FBD 2A            mov b, [d] ; Lower Word in B
2193   0FBE             ; START FACTORS
2194   0FBE D7            push a
2195   0FBF 11            mov a, b
2196   0FC0 26 0A 00      mov b, $a
2197   0FC3 AE            div a, b
2198   0FC4 27            mov b, a
2199   0FC5 E4            pop a
2200   0FC6             ; END FACTORS
2201   0FC6 E7            pop d
2202   0FC7 FD 43         mov [d], b
2203   0FC9 28            mov b, c
2204   0FCA FD 44 02 00   mov [d + 2], b
2205   0FCE             ;; i++; 
2206   0FCE FA F5 FF      lea d, [bp + -11] ; $i
2207   0FD1 2A            mov b, [d]
2208   0FD2 D8            push b
2209   0FD3 FD 77         inc b
2210   0FD5 FA F5 FF      lea d, [bp + -11] ; $i
2211   0FD8 FD 43         mov [d], b
2212   0FDA E5            pop b
2213   0FDB 0A 62 0F      jmp _while34_cond
2214   0FDE             _while34_exit:
2215   0FDE             ;; while (i > 0) { 
2216   0FDE             _while35_cond:
2217   0FDE FA F5 FF      lea d, [bp + -11] ; $i
2218   0FE1 2A            mov b, [d]
2219   0FE2             ; START RELATIONAL
2220   0FE2 D7            push a
2221   0FE3 11            mov a, b
2222   0FE4 26 00 00      mov b, $0
2223   0FE7 B0            cmp a, b
2224   0FE8 FD 7F         sgt ; >
2225   0FEA E4            pop a
2226   0FEB             ; END RELATIONAL
2227   0FEB C0 00 00      cmp b, 0
2228   0FEE C6 17 10      je _while35_exit
2229   0FF1             _while35_block:
2230   0FF1             ;; i--; 
2231   0FF1 FA F5 FF      lea d, [bp + -11] ; $i
2232   0FF4 2A            mov b, [d]
2233   0FF5 D8            push b
2234   0FF6 FD 7D         dec b
2235   0FF8 FA F5 FF      lea d, [bp + -11] ; $i
2236   0FFB FD 43         mov [d], b
2237   0FFD E5            pop b
2238   0FFE             ;; putchar(digits[i]); 
2239   0FFE FA F7 FF      lea d, [bp + -9] ; $digits
2240   1001 D7            push a
2241   1002 DA            push d
2242   1003 FA F5 FF      lea d, [bp + -11] ; $i
2243   1006 2A            mov b, [d]
2244   1007 E7            pop d
2245   1008 5A            add d, b
2246   1009 E4            pop a
2247   100A 32            mov bl, [d]
2248   100B A7 00         mov bh, 0
2249   100D DD            push bl
2250   100E 07 E8 11      call putchar
2251   1011 51 01 00      add sp, 1
2252   1014 0A DE 0F      jmp _while35_cond
2253   1017             _while35_exit:
2254   1017 F9            leave
2255   1018 09            ret
2256   1019             
2257   1019             print_unsigned_long:
2258   1019 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2259   101C             ; $digits 
2260   101C             ; $i 
2261   101C 52 0C 00      sub sp, 12
2262   101F             ;; i = 0; 
2263   101F FA F5 FF      lea d, [bp + -11] ; $i
2264   1022 DA            push d
2265   1023 26 00 00      mov b, $0
2266   1026 E7            pop d
2267   1027 FD 43         mov [d], b
2268   1029             ;; if(num == 0){ 
2269   1029             _if36_cond:
2270   1029 FA 05 00      lea d, [bp + 5] ; $num
2271   102C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2272   102F FD 39         mov c, b ; And place it into C
2273   1031 2A            mov b, [d] ; Lower Word in B
2274   1032             ; START RELATIONAL
2275   1032 D7            push a
2276   1033 FD D8         push g
2277   1035 11            mov a, b
2278   1036 FD 7A         mov g, c
2279   1038 26 00 00      mov b, $0
2280   103B B0            cmp a, b
2281   103C FD 71         seq ; ==
2282   103E D8            push b
2283   103F 12            mov a, c
2284   1040 FD 27         mov b, g
2285   1042 B0            cmp a, b
2286   1043 FD 71         seq ; ==
2287   1045 E4            pop a
2288   1046 FD A7         sand a, b
2289   1048 FD F1         pop g
2290   104A E4            pop a
2291   104B             ; END RELATIONAL
2292   104B C0 00 00      cmp b, 0
2293   104E C6 60 10      je _if36_exit
2294   1051             _if36_true:
2295   1051             ;; putchar('0'); 
2296   1051 26 30 00      mov b, $30
2297   1054 DD            push bl
2298   1055 07 E8 11      call putchar
2299   1058 51 01 00      add sp, 1
2300   105B             ;; return; 
2301   105B F9            leave
2302   105C 09            ret
2303   105D 0A 60 10      jmp _if36_exit
2304   1060             _if36_exit:
2305   1060             ;; while (num > 0) { 
2306   1060             _while37_cond:
2307   1060 FA 05 00      lea d, [bp + 5] ; $num
2308   1063 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2309   1066 FD 39         mov c, b ; And place it into C
2310   1068 2A            mov b, [d] ; Lower Word in B
2311   1069             ; START RELATIONAL
2312   1069 D7            push a
2313   106A FD D8         push g
2314   106C 11            mov a, b
2315   106D FD 7A         mov g, c
2316   106F 26 00 00      mov b, $0
2317   1072 B0            cmp a, b
2318   1073 FD 81         sgu ; > (unsigned)
2319   1075 FD F1         pop g
2320   1077 E4            pop a
2321   1078             ; END RELATIONAL
2322   1078 C0 00 00      cmp b, 0
2323   107B C6 DC 10      je _while37_exit
2324   107E             _while37_block:
2325   107E             ;; digits[i] = '0' + (num % 10); 
2326   107E FA F7 FF      lea d, [bp + -9] ; $digits
2327   1081 D7            push a
2328   1082 DA            push d
2329   1083 FA F5 FF      lea d, [bp + -11] ; $i
2330   1086 2A            mov b, [d]
2331   1087 E7            pop d
2332   1088 5A            add d, b
2333   1089 E4            pop a
2334   108A DA            push d
2335   108B 26 30 00      mov b, $30
2336   108E             ; START TERMS
2337   108E D7            push a
2338   108F 11            mov a, b
2339   1090 FA 05 00      lea d, [bp + 5] ; $num
2340   1093 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2341   1096 FD 39         mov c, b ; And place it into C
2342   1098 2A            mov b, [d] ; Lower Word in B
2343   1099             ; START FACTORS
2344   1099 D7            push a
2345   109A 11            mov a, b
2346   109B 26 0A 00      mov b, $a
2347   109E AE            div a, b ; 
2348   109F 11            mov a, b
2349   10A0 27            mov b, a
2350   10A1 E4            pop a
2351   10A2             ; END FACTORS
2352   10A2 54            add a, b
2353   10A3 D7            push a
2354   10A4 FD 12         mov a, g
2355   10A6 28            mov b, c
2356   10A7 5C            adc a, b
2357   10A8 39            mov c, a
2358   10A9 E5            pop b
2359   10AA 27            mov b, a
2360   10AB E4            pop a
2361   10AC             ; END TERMS
2362   10AC E7            pop d
2363   10AD FD 3E         mov [d], bl
2364   10AF             ;; num = num / 10; 
2365   10AF FA 05 00      lea d, [bp + 5] ; $num
2366   10B2 DA            push d
2367   10B3 FA 05 00      lea d, [bp + 5] ; $num
2368   10B6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2369   10B9 FD 39         mov c, b ; And place it into C
2370   10BB 2A            mov b, [d] ; Lower Word in B
2371   10BC             ; START FACTORS
2372   10BC D7            push a
2373   10BD 11            mov a, b
2374   10BE 26 0A 00      mov b, $a
2375   10C1 AE            div a, b
2376   10C2 27            mov b, a
2377   10C3 E4            pop a
2378   10C4             ; END FACTORS
2379   10C4 E7            pop d
2380   10C5 FD 43         mov [d], b
2381   10C7 28            mov b, c
2382   10C8 FD 44 02 00   mov [d + 2], b
2383   10CC             ;; i++; 
2384   10CC FA F5 FF      lea d, [bp + -11] ; $i
2385   10CF 2A            mov b, [d]
2386   10D0 D8            push b
2387   10D1 FD 77         inc b
2388   10D3 FA F5 FF      lea d, [bp + -11] ; $i
2389   10D6 FD 43         mov [d], b
2390   10D8 E5            pop b
2391   10D9 0A 60 10      jmp _while37_cond
2392   10DC             _while37_exit:
2393   10DC             ;; while (i > 0) { 
2394   10DC             _while38_cond:
2395   10DC FA F5 FF      lea d, [bp + -11] ; $i
2396   10DF 2A            mov b, [d]
2397   10E0             ; START RELATIONAL
2398   10E0 D7            push a
2399   10E1 11            mov a, b
2400   10E2 26 00 00      mov b, $0
2401   10E5 B0            cmp a, b
2402   10E6 FD 7F         sgt ; >
2403   10E8 E4            pop a
2404   10E9             ; END RELATIONAL
2405   10E9 C0 00 00      cmp b, 0
2406   10EC C6 15 11      je _while38_exit
2407   10EF             _while38_block:
2408   10EF             ;; i--; 
2409   10EF FA F5 FF      lea d, [bp + -11] ; $i
2410   10F2 2A            mov b, [d]
2411   10F3 D8            push b
2412   10F4 FD 7D         dec b
2413   10F6 FA F5 FF      lea d, [bp + -11] ; $i
2414   10F9 FD 43         mov [d], b
2415   10FB E5            pop b
2416   10FC             ;; putchar(digits[i]); 
2417   10FC FA F7 FF      lea d, [bp + -9] ; $digits
2418   10FF D7            push a
2419   1100 DA            push d
2420   1101 FA F5 FF      lea d, [bp + -11] ; $i
2421   1104 2A            mov b, [d]
2422   1105 E7            pop d
2423   1106 5A            add d, b
2424   1107 E4            pop a
2425   1108 32            mov bl, [d]
2426   1109 A7 00         mov bh, 0
2427   110B DD            push bl
2428   110C 07 E8 11      call putchar
2429   110F 51 01 00      add sp, 1
2430   1112 0A DC 10      jmp _while38_cond
2431   1115             _while38_exit:
2432   1115 F9            leave
2433   1116 09            ret
2434   1117             
2435   1117             print_unsigned:
2436   1117 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2437   111A             ; $digits 
2438   111A             ; $i 
2439   111A 52 07 00      sub sp, 7
2440   111D             ;; i = 0; 
2441   111D FA FA FF      lea d, [bp + -6] ; $i
2442   1120 DA            push d
2443   1121 26 00 00      mov b, $0
2444   1124 E7            pop d
2445   1125 FD 43         mov [d], b
2446   1127             ;; if(num == 0){ 
2447   1127             _if39_cond:
2448   1127 FA 05 00      lea d, [bp + 5] ; $num
2449   112A 2A            mov b, [d]
2450   112B             ; START RELATIONAL
2451   112B D7            push a
2452   112C 11            mov a, b
2453   112D 26 00 00      mov b, $0
2454   1130 B0            cmp a, b
2455   1131 FD 71         seq ; ==
2456   1133 E4            pop a
2457   1134             ; END RELATIONAL
2458   1134 C0 00 00      cmp b, 0
2459   1137 C6 49 11      je _if39_exit
2460   113A             _if39_true:
2461   113A             ;; putchar('0'); 
2462   113A 26 30 00      mov b, $30
2463   113D DD            push bl
2464   113E 07 E8 11      call putchar
2465   1141 51 01 00      add sp, 1
2466   1144             ;; return; 
2467   1144 F9            leave
2468   1145 09            ret
2469   1146 0A 49 11      jmp _if39_exit
2470   1149             _if39_exit:
2471   1149             ;; while (num > 0) { 
2472   1149             _while40_cond:
2473   1149 FA 05 00      lea d, [bp + 5] ; $num
2474   114C 2A            mov b, [d]
2475   114D             ; START RELATIONAL
2476   114D D7            push a
2477   114E 11            mov a, b
2478   114F 26 00 00      mov b, $0
2479   1152 B0            cmp a, b
2480   1153 FD 81         sgu ; > (unsigned)
2481   1155 E4            pop a
2482   1156             ; END RELATIONAL
2483   1156 C0 00 00      cmp b, 0
2484   1159 C6 A4 11      je _while40_exit
2485   115C             _while40_block:
2486   115C             ;; digits[i] = '0' + (num % 10); 
2487   115C FA FC FF      lea d, [bp + -4] ; $digits
2488   115F D7            push a
2489   1160 DA            push d
2490   1161 FA FA FF      lea d, [bp + -6] ; $i
2491   1164 2A            mov b, [d]
2492   1165 E7            pop d
2493   1166 5A            add d, b
2494   1167 E4            pop a
2495   1168 DA            push d
2496   1169 26 30 00      mov b, $30
2497   116C             ; START TERMS
2498   116C D7            push a
2499   116D 11            mov a, b
2500   116E FA 05 00      lea d, [bp + 5] ; $num
2501   1171 2A            mov b, [d]
2502   1172             ; START FACTORS
2503   1172 D7            push a
2504   1173 11            mov a, b
2505   1174 26 0A 00      mov b, $a
2506   1177 AE            div a, b ; 
2507   1178 11            mov a, b
2508   1179 27            mov b, a
2509   117A E4            pop a
2510   117B             ; END FACTORS
2511   117B 54            add a, b
2512   117C 27            mov b, a
2513   117D E4            pop a
2514   117E             ; END TERMS
2515   117E E7            pop d
2516   117F FD 3E         mov [d], bl
2517   1181             ;; num = num / 10; 
2518   1181 FA 05 00      lea d, [bp + 5] ; $num
2519   1184 DA            push d
2520   1185 FA 05 00      lea d, [bp + 5] ; $num
2521   1188 2A            mov b, [d]
2522   1189             ; START FACTORS
2523   1189 D7            push a
2524   118A 11            mov a, b
2525   118B 26 0A 00      mov b, $a
2526   118E AE            div a, b
2527   118F 27            mov b, a
2528   1190 E4            pop a
2529   1191             ; END FACTORS
2530   1191 E7            pop d
2531   1192 FD 43         mov [d], b
2532   1194             ;; i++; 
2533   1194 FA FA FF      lea d, [bp + -6] ; $i
2534   1197 2A            mov b, [d]
2535   1198 D8            push b
2536   1199 FD 77         inc b
2537   119B FA FA FF      lea d, [bp + -6] ; $i
2538   119E FD 43         mov [d], b
2539   11A0 E5            pop b
2540   11A1 0A 49 11      jmp _while40_cond
2541   11A4             _while40_exit:
2542   11A4             ;; while (i > 0) { 
2543   11A4             _while41_cond:
2544   11A4 FA FA FF      lea d, [bp + -6] ; $i
2545   11A7 2A            mov b, [d]
2546   11A8             ; START RELATIONAL
2547   11A8 D7            push a
2548   11A9 11            mov a, b
2549   11AA 26 00 00      mov b, $0
2550   11AD B0            cmp a, b
2551   11AE FD 7F         sgt ; >
2552   11B0 E4            pop a
2553   11B1             ; END RELATIONAL
2554   11B1 C0 00 00      cmp b, 0
2555   11B4 C6 DD 11      je _while41_exit
2556   11B7             _while41_block:
2557   11B7             ;; i--; 
2558   11B7 FA FA FF      lea d, [bp + -6] ; $i
2559   11BA 2A            mov b, [d]
2560   11BB D8            push b
2561   11BC FD 7D         dec b
2562   11BE FA FA FF      lea d, [bp + -6] ; $i
2563   11C1 FD 43         mov [d], b
2564   11C3 E5            pop b
2565   11C4             ;; putchar(digits[i]); 
2566   11C4 FA FC FF      lea d, [bp + -4] ; $digits
2567   11C7 D7            push a
2568   11C8 DA            push d
2569   11C9 FA FA FF      lea d, [bp + -6] ; $i
2570   11CC 2A            mov b, [d]
2571   11CD E7            pop d
2572   11CE 5A            add d, b
2573   11CF E4            pop a
2574   11D0 32            mov bl, [d]
2575   11D1 A7 00         mov bh, 0
2576   11D3 DD            push bl
2577   11D4 07 E8 11      call putchar
2578   11D7 51 01 00      add sp, 1
2579   11DA 0A A4 11      jmp _while41_cond
2580   11DD             _while41_exit:
2581   11DD F9            leave
2582   11DE 09            ret
2583   11DF             
2584   11DF             date:
2585   11DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2586   11E2             
2587   11E2             ; --- BEGIN INLINE ASM BLOCK
2588   11E2 19 00         mov al, 0 
2589   11E4 05 07         syscall sys_datetime
2590   11E6             ; --- END INLINE ASM BLOCK
2591   11E6             
2592   11E6 F9            leave
2593   11E7 09            ret
2594   11E8             
2595   11E8             putchar:
2596   11E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2597   11EB             
2598   11EB             ; --- BEGIN INLINE ASM BLOCK
2599   11EB FA 05 00      lea d, [bp + 5] ; $c
2600   11EE 1E            mov al, [d]
2601   11EF 23            mov ah, al
2602   11F0 07 C9 13      call _putchar
2603   11F3             ; --- END INLINE ASM BLOCK
2604   11F3             
2605   11F3 F9            leave
2606   11F4 09            ret
2607   11F5             
2608   11F5             getchar:
2609   11F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2610   11F8             ; $c 
2611   11F8 52 01 00      sub sp, 1
2612   11FB             
2613   11FB             ; --- BEGIN INLINE ASM BLOCK
2614   11FB 07 C2 13      call getch
2615   11FE 1A            mov al, ah
2616   11FF FA 00 00      lea d, [bp + 0] ; $c
2617   1202 3E            mov [d], al
2618   1203             ; --- END INLINE ASM BLOCK
2619   1203             
2620   1203             ;; return c; 
2621   1203 FA 00 00      lea d, [bp + 0] ; $c
2622   1206 32            mov bl, [d]
2623   1207 A7 00         mov bh, 0
2624   1209 F9            leave
2625   120A 09            ret
2626   120B             
2627   120B             scann:
2628   120B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2629   120E             ; $m 
2630   120E 52 02 00      sub sp, 2
2631   1211             
2632   1211             ; --- BEGIN INLINE ASM BLOCK
2633   1211 07 0D 16      call scan_u16d
2634   1214 FA FF FF      lea d, [bp + -1] ; $m
2635   1217 43            mov [d], a
2636   1218             ; --- END INLINE ASM BLOCK
2637   1218             
2638   1218             ;; return m; 
2639   1218 FA FF FF      lea d, [bp + -1] ; $m
2640   121B 2A            mov b, [d]
2641   121C F9            leave
2642   121D 09            ret
2643   121E             
2644   121E             puts:
2645   121E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2646   1221             
2647   1221             ; --- BEGIN INLINE ASM BLOCK
2648   1221 FA 05 00      lea d, [bp + 5] ; $s
2649   1224 15            mov a, [d]
2650   1225 3C            mov d, a
2651   1226 07 13 15      call _puts
2652   1229 10 00 0A      mov a, $0A00
2653   122C 05 03         syscall sys_io
2654   122E             ; --- END INLINE ASM BLOCK
2655   122E             
2656   122E F9            leave
2657   122F 09            ret
2658   1230             
2659   1230             print:
2660   1230 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2661   1233             
2662   1233             ; --- BEGIN INLINE ASM BLOCK
2663   1233 FA 05 00      lea d, [bp + 5] ; $s
2664   1236 FD 2A         mov d, [d]
2665   1238 07 13 15      call _puts
2666   123B             ; --- END INLINE ASM BLOCK
2667   123B             
2668   123B F9            leave
2669   123C 09            ret
2670   123D             
2671   123D             loadfile:
2672   123D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2673   1240             
2674   1240             ; --- BEGIN INLINE ASM BLOCK
2675   1240 FA 07 00      lea d, [bp + 7] ; $destination
2676   1243 15            mov a, [d]
2677   1244 4F            mov di, a
2678   1245 FA 05 00      lea d, [bp + 5] ; $filename
2679   1248 FD 2A         mov d, [d]
2680   124A 19 14         mov al, 20
2681   124C 05 04         syscall sys_filesystem
2682   124E             ; --- END INLINE ASM BLOCK
2683   124E             
2684   124E F9            leave
2685   124F 09            ret
2686   1250             
2687   1250             create_file:
2688   1250 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2689   1253 F9            leave
2690   1254 09            ret
2691   1255             
2692   1255             delete_file:
2693   1255 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2694   1258             
2695   1258             ; --- BEGIN INLINE ASM BLOCK
2696   1258 FA 05 00      lea d, [bp + 5] ; $filename
2697   125B 19 0A         mov al, 10
2698   125D 05 04         syscall sys_filesystem
2699   125F             ; --- END INLINE ASM BLOCK
2700   125F             
2701   125F F9            leave
2702   1260 09            ret
2703   1261             
2704   1261             fopen:
2705   1261 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2706   1264 F9            leave
2707   1265 09            ret
2708   1266             
2709   1266             fclose:
2710   1266 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2711   1269 F9            leave
2712   126A 09            ret
2713   126B             
2714   126B             load_hex:
2715   126B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2716   126E             ; $temp 
2717   126E 52 02 00      sub sp, 2
2718   1271             ;; temp = alloc(32768); 
2719   1271 FA FF FF      lea d, [bp + -1] ; $temp
2720   1274 DA            push d
2721   1275 26 00 80      mov b, $8000
2722   1278 FD AB         swp b
2723   127A D8            push b
2724   127B 07 43 09      call alloc
2725   127E 51 02 00      add sp, 2
2726   1281 E7            pop d
2727   1282 FD 43         mov [d], b
2728   1284             
2729   1284             ; --- BEGIN INLINE ASM BLOCK
2730   1284               
2731   1284               
2732   1284               
2733   1284               
2734   1284               
2735   1284             _load_hex:
2736   1284 D7            push a
2737   1285 D8            push b
2738   1286 DA            push d
2739   1287 E2            push si
2740   1288 E3            push di
2741   1289 52 00 80      sub sp, $8000      
2742   128C 38 00 00      mov c, 0
2743   128F 48            mov a, sp
2744   1290 77            inc a
2745   1291 3C            mov d, a          
2746   1292 07 D0 13      call _gets        
2747   1295 4D            mov si, a
2748   1296             __load_hex_loop:
2749   1296 F6            lodsb             
2750   1297 B9 00         cmp al, 0         
2751   1299 C6 A7 12      jz __load_hex_ret
2752   129C 36            mov bh, al
2753   129D F6            lodsb
2754   129E 2F            mov bl, al
2755   129F 07 86 13      call _atoi        
2756   12A2 F7            stosb             
2757   12A3 78            inc c
2758   12A4 0A 96 12      jmp __load_hex_loop
2759   12A7             __load_hex_ret:
2760   12A7 51 00 80      add sp, $8000
2761   12AA F0            pop di
2762   12AB EF            pop si
2763   12AC E7            pop d
2764   12AD E5            pop b
2765   12AE E4            pop a
2766   12AF             ; --- END INLINE ASM BLOCK
2767   12AF             
2768   12AF F9            leave
2769   12B0 09            ret
2770   12B1             
2771   12B1             getparam:
2772   12B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2773   12B4             ; $data 
2774   12B4 52 01 00      sub sp, 1
2775   12B7             
2776   12B7             ; --- BEGIN INLINE ASM BLOCK
2777   12B7 19 04         mov al, 4
2778   12B9 FA 05 00      lea d, [bp + 5] ; $address
2779   12BC FD 2A         mov d, [d]
2780   12BE 05 0C         syscall sys_system
2781   12C0 FA 00 00      lea d, [bp + 0] ; $data
2782   12C3 FD 3E         mov [d], bl
2783   12C5             ; --- END INLINE ASM BLOCK
2784   12C5             
2785   12C5             ;; return data; 
2786   12C5 FA 00 00      lea d, [bp + 0] ; $data
2787   12C8 32            mov bl, [d]
2788   12C9 A7 00         mov bh, 0
2789   12CB F9            leave
2790   12CC 09            ret
2791   12CD             
2792   12CD             clear:
2793   12CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2794   12D0             ;; print("\033[2J\033[H"); 
2795   12D0 26 43 23      mov b, __s3 ; "\033[2J\033[H"
2796   12D3 FD AB         swp b
2797   12D5 D8            push b
2798   12D6 07 30 12      call print
2799   12D9 51 02 00      add sp, 2
2800   12DC F9            leave
2801   12DD 09            ret
2802   12DE             
2803   12DE             include_stdio_asm:
2804   12DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2805   12E1             
2806   12E1             ; --- BEGIN INLINE ASM BLOCK
2807   12E1             .include "lib/asm/stdio.asm"
0001+  12E1             ;-----------------------------------------------------------------------------
0002+  12E1             ; stdio.s
0003+  12E1             ;-----------------------------------------------------------------------------
0004+  12E1             .include "lib/asm/string.asm"
0001++ 12E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 12E1             ; string.s
0003++ 12E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 12E1             
0005++ 12E1             
0006++ 12E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 12E1             ; _strrev
0008++ 12E1             ; reverse a string
0009++ 12E1             ; D = string address
0010++ 12E1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 12E1             ; 01234
0012++ 12E1             _strrev:
0013++ 12E1 4B          	pusha
0014++ 12E2 07 28 13    	call _strlen	; length in C
0015++ 12E5 12          	mov a, c
0016++ 12E6 AF 01 00    	cmp a, 1
0017++ 12E9 D0 03 13    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 12EC 7D          	dec a
0019++ 12ED FD 4E       	mov si, d	; beginning of string
0020++ 12EF FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 12F1 59          	add d, a	; end of string
0022++ 12F2 12          	mov a, c
0023++ 12F3 FD 9B       	shr a		; divide by 2
0024++ 12F5 39          	mov c, a	; C now counts the steps
0025++ 12F6             _strrev_L0:
0026++ 12F6 32          	mov bl, [d]	; save load right-side char into BL
0027++ 12F7 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 12F8 3E          	mov [d], al	; store left char into right side
0029++ 12F9 1B          	mov al, bl
0030++ 12FA F7          	stosb		; store right-side char into left-side; increase DI
0031++ 12FB 7E          	dec c
0032++ 12FC 7F          	dec d
0033++ 12FD C2 00 00    	cmp c, 0
0034++ 1300 C7 F6 12    	jne _strrev_L0
0035++ 1303             _strrev_end:
0036++ 1303 4C          	popa
0037++ 1304 09          	ret
0038++ 1305             	
0039++ 1305             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1305             ; _strchr
0041++ 1305             ; search string in D for char in AL
0042++ 1305             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1305             _strchr:
0044++ 1305             _strchr_L0:
0045++ 1305 32          	mov bl, [d]
0046++ 1306 C1 00       	cmp bl, 0
0047++ 1308 C6 13 13    	je _strchr_end
0048++ 130B BA          	cmp al, bl
0049++ 130C C6 13 13    	je _strchr_end
0050++ 130F 79          	inc d
0051++ 1310 0A 05 13    	jmp _strchr_L0
0052++ 1313             _strchr_end:
0053++ 1313 1B          	mov al, bl
0054++ 1314 09          	ret
0055++ 1315             
0056++ 1315             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1315             ; _strstr
0058++ 1315             ; find sub-string
0059++ 1315             ; str1 in SI
0060++ 1315             ; str2 in DI
0061++ 1315             ; SI points to end of source string
0062++ 1315             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1315             _strstr:
0064++ 1315 DB          	push al
0065++ 1316 DA          	push d
0066++ 1317 E3          	push di
0067++ 1318             _strstr_loop:
0068++ 1318 F3          	cmpsb					; compare a byte of the strings
0069++ 1319 C7 24 13    	jne _strstr_ret
0070++ 131C FC 00 00    	lea d, [di + 0]
0071++ 131F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1321 C7 18 13    	jne _strstr_loop				; equal chars but not at end
0073++ 1324             _strstr_ret:
0074++ 1324 F0          	pop di
0075++ 1325 E7          	pop d
0076++ 1326 E8          	pop al
0077++ 1327 09          	ret
0078++ 1328             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1328             ; length of null terminated string
0080++ 1328             ; result in C
0081++ 1328             ; pointer in D
0082++ 1328             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1328             _strlen:
0084++ 1328 DA          	push d
0085++ 1329 38 00 00    	mov c, 0
0086++ 132C             _strlen_L1:
0087++ 132C BD 00       	cmp byte [d], 0
0088++ 132E C6 36 13    	je _strlen_ret
0089++ 1331 79          	inc d
0090++ 1332 78          	inc c
0091++ 1333 0A 2C 13    	jmp _strlen_L1
0092++ 1336             _strlen_ret:
0093++ 1336 E7          	pop d
0094++ 1337 09          	ret
0095++ 1338             
0096++ 1338             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1338             ; STRCMP
0098++ 1338             ; compare two strings
0099++ 1338             ; str1 in SI
0100++ 1338             ; str2 in DI
0101++ 1338             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1338             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1338             _strcmp:
0104++ 1338 DB          	push al
0105++ 1339 DA          	push d
0106++ 133A E3          	push di
0107++ 133B E2          	push si
0108++ 133C             _strcmp_loop:
0109++ 133C F3          	cmpsb					; compare a byte of the strings
0110++ 133D C7 48 13    	jne _strcmp_ret
0111++ 1340 FB FF FF    	lea d, [si +- 1]
0112++ 1343 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1345 C7 3C 13    	jne _strcmp_loop				; equal chars but not at end
0114++ 1348             _strcmp_ret:
0115++ 1348 EF          	pop si
0116++ 1349 F0          	pop di
0117++ 134A E7          	pop d
0118++ 134B E8          	pop al
0119++ 134C 09          	ret
0120++ 134D             
0121++ 134D             
0122++ 134D             ; STRCPY
0123++ 134D             ; copy null terminated string from SI to DI
0124++ 134D             ; source in SI
0125++ 134D             ; destination in DI
0126++ 134D             _strcpy:
0127++ 134D E2          	push si
0128++ 134E E3          	push di
0129++ 134F DB          	push al
0130++ 1350             _strcpy_L1:
0131++ 1350 F6          	lodsb
0132++ 1351 F7          	stosb
0133++ 1352 B9 00       	cmp al, 0
0134++ 1354 C7 50 13    	jne _strcpy_L1
0135++ 1357             _strcpy_end:
0136++ 1357 E8          	pop al
0137++ 1358 F0          	pop di
0138++ 1359 EF          	pop si
0139++ 135A 09          	ret
0140++ 135B             
0141++ 135B             ; STRCAT
0142++ 135B             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 135B             ; source in SI
0144++ 135B             ; destination in DI
0145++ 135B             _strcat:
0146++ 135B E2          	push si
0147++ 135C E3          	push di
0148++ 135D D7          	push a
0149++ 135E DA          	push d
0150++ 135F 50          	mov a, di
0151++ 1360 3C          	mov d, a
0152++ 1361             _strcat_goto_end_L1:
0153++ 1361 BD 00       	cmp byte[d], 0
0154++ 1363 C6 6A 13    	je _strcat_start
0155++ 1366 79          	inc d
0156++ 1367 0A 61 13    	jmp _strcat_goto_end_L1
0157++ 136A             _strcat_start:
0158++ 136A FD 50       	mov di, d
0159++ 136C             _strcat_L1:
0160++ 136C F6          	lodsb
0161++ 136D F7          	stosb
0162++ 136E B9 00       	cmp al, 0
0163++ 1370 C7 6C 13    	jne _strcat_L1
0164++ 1373             _strcat_end:
0165++ 1373 E7          	pop d
0166++ 1374 E4          	pop a
0167++ 1375 F0          	pop di
0168++ 1376 EF          	pop si
0169++ 1377 09          	ret
0170++ 1378             
0171++ 1378             
0005+  1378             
0006+  1378             ;-----------------------------------------------------------------------------
0007+  1378             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1378             ; ASCII in BL
0009+  1378             ; result in AL
0010+  1378             ; ascii for F = 0100 0110
0011+  1378             ; ascii for 9 = 0011 1001
0012+  1378             ;-----------------------------------------------------------------------------
0013+  1378             hex_ascii_encode:
0014+  1378 1B            mov al, bl
0015+  1379 93 40         test al, $40        ; test if letter or number
0016+  137B C7 81 13      jnz hex_letter
0017+  137E 87 0F         and al, $0F        ; get number
0018+  1380 09            ret
0019+  1381             hex_letter:
0020+  1381 87 0F         and al, $0F        ; get letter
0021+  1383 6A 09         add al, 9
0022+  1385 09            ret
0023+  1386             
0024+  1386             ;-----------------------------------------------------------------------------
0025+  1386             ; ATOI
0026+  1386             ; 2 letter hex string in B
0027+  1386             ; 8bit integer returned in AL
0028+  1386             ;-----------------------------------------------------------------------------
0029+  1386             _atoi:
0030+  1386 D8            push b
0031+  1387 07 78 13      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  138A 30            mov bl, bh
0033+  138B DB            push al          ; save a
0034+  138C 07 78 13      call hex_ascii_encode
0035+  138F EA            pop bl  
0036+  1390 FD 9E 04      shl al, 4
0037+  1393 8C            or al, bl
0038+  1394 E5            pop b
0039+  1395 09            ret  
0040+  1396             
0041+  1396             ;-----------------------------------------------------------------------------
0042+  1396             ; scanf
0043+  1396             ; no need for explanations!
0044+  1396             ;-----------------------------------------------------------------------------
0045+  1396             scanf:
0046+  1396 09            ret
0047+  1397             
0048+  1397             ;-----------------------------------------------------------------------------
0049+  1397             ; ITOA
0050+  1397             ; 8bit value in BL
0051+  1397             ; 2 byte ASCII result in A
0052+  1397             ;-----------------------------------------------------------------------------
0053+  1397             _itoa:
0054+  1397 DA            push d
0055+  1398 D8            push b
0056+  1399 A7 00         mov bh, 0
0057+  139B FD A4 04      shr bl, 4  
0058+  139E 74            mov d, b
0059+  139F 1F 47 16      mov al, [d + s_hex_digits]
0060+  13A2 23            mov ah, al
0061+  13A3               
0062+  13A3 E5            pop b
0063+  13A4 D8            push b
0064+  13A5 A7 00         mov bh, 0
0065+  13A7 FD 87 0F      and bl, $0F
0066+  13AA 74            mov d, b
0067+  13AB 1F 47 16      mov al, [d + s_hex_digits]
0068+  13AE E5            pop b
0069+  13AF E7            pop d
0070+  13B0 09            ret
0071+  13B1             
0072+  13B1             ;-----------------------------------------------------------------------------
0073+  13B1             ; HEX STRING TO BINARY
0074+  13B1             ; di = destination address
0075+  13B1             ; si = source
0076+  13B1             ;-----------------------------------------------------------------------------
0077+  13B1             _hex_to_int:
0078+  13B1             _hex_to_int_L1:
0079+  13B1 F6            lodsb          ; load from [SI] to AL
0080+  13B2 B9 00         cmp al, 0        ; check if ASCII 0
0081+  13B4 C6 C1 13      jz _hex_to_int_ret
0082+  13B7 36            mov bh, al
0083+  13B8 F6            lodsb
0084+  13B9 2F            mov bl, al
0085+  13BA 07 86 13      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  13BD F7            stosb          ; store AL to [DI]
0087+  13BE 0A B1 13      jmp _hex_to_int_L1
0088+  13C1             _hex_to_int_ret:
0089+  13C1 09            ret    
0090+  13C2             
0091+  13C2             ;-----------------------------------------------------------------------------
0092+  13C2             ; GETCHAR
0093+  13C2             ; char in ah
0094+  13C2             ;-----------------------------------------------------------------------------
0095+  13C2             getch:
0096+  13C2 DB            push al
0097+  13C3             getch_retry:
0098+  13C3 19 01         mov al, 1
0099+  13C5 05 03         syscall sys_io      ; receive in AH
0100+  13C7 E8            pop al
0101+  13C8 09            ret
0102+  13C9             
0103+  13C9             ;-----------------------------------------------------------------------------
0104+  13C9             ; PUTCHAR
0105+  13C9             ; char in ah
0106+  13C9             ;-----------------------------------------------------------------------------
0107+  13C9             _putchar:
0108+  13C9 D7            push a
0109+  13CA 19 00         mov al, 0
0110+  13CC 05 03         syscall sys_io      ; char in AH
0111+  13CE E4            pop a
0112+  13CF 09            ret
0113+  13D0             
0114+  13D0             ;-----------------------------------------------------------------------------
0115+  13D0             ;; INPUT A STRING
0116+  13D0             ;; terminates with null
0117+  13D0             ;; pointer in D
0118+  13D0             ;-----------------------------------------------------------------------------
0119+  13D0             _gets:
0120+  13D0 D7            push a
0121+  13D1 DA            push d
0122+  13D2             _gets_loop:
0123+  13D2 19 01         mov al, 1
0124+  13D4 05 03         syscall sys_io      ; receive in AH
0125+  13D6 B9 00         cmp al, 0        ; check error code (AL)
0126+  13D8 C6 D2 13      je _gets_loop      ; if no char received, retry
0127+  13DB             
0128+  13DB 76 1B         cmp ah, 27
0129+  13DD C6 FE 13      je _gets_ansi_esc
0130+  13E0 76 0A         cmp ah, $0A        ; LF
0131+  13E2 C6 69 14      je _gets_end
0132+  13E5 76 0D         cmp ah, $0D        ; CR
0133+  13E7 C6 69 14      je _gets_end
0134+  13EA 76 5C         cmp ah, $5C        ; '\\'
0135+  13EC C6 2A 14      je _gets_escape
0136+  13EF               
0137+  13EF 76 08         cmp ah, $08      ; check for backspace
0138+  13F1 C6 FA 13      je _gets_backspace
0139+  13F4             
0140+  13F4 1A            mov al, ah
0141+  13F5 3E            mov [d], al
0142+  13F6 79            inc d
0143+  13F7 0A D2 13      jmp _gets_loop
0144+  13FA             _gets_backspace:
0145+  13FA 7F            dec d
0146+  13FB 0A D2 13      jmp _gets_loop
0147+  13FE             _gets_ansi_esc:
0148+  13FE 19 01         mov al, 1
0149+  1400 05 03         syscall sys_io        ; receive in AH without echo
0150+  1402 B9 00         cmp al, 0          ; check error code (AL)
0151+  1404 C6 FE 13      je _gets_ansi_esc    ; if no char received, retry
0152+  1407 76 5B         cmp ah, '['
0153+  1409 C7 D2 13      jne _gets_loop
0154+  140C             _gets_ansi_esc_2:
0155+  140C 19 01         mov al, 1
0156+  140E 05 03         syscall sys_io          ; receive in AH without echo
0157+  1410 B9 00         cmp al, 0            ; check error code (AL)
0158+  1412 C6 0C 14      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1415 76 44         cmp ah, 'D'
0160+  1417 C6 22 14      je _gets_left_arrow
0161+  141A 76 43         cmp ah, 'C'
0162+  141C C6 26 14      je _gets_right_arrow
0163+  141F 0A D2 13      jmp _gets_loop
0164+  1422             _gets_left_arrow:
0165+  1422 7F            dec d
0166+  1423 0A D2 13      jmp _gets_loop
0167+  1426             _gets_right_arrow:
0168+  1426 79            inc d
0169+  1427 0A D2 13      jmp _gets_loop
0170+  142A             _gets_escape:
0171+  142A 19 01         mov al, 1
0172+  142C 05 03         syscall sys_io      ; receive in AH
0173+  142E B9 00         cmp al, 0        ; check error code (AL)
0174+  1430 C6 2A 14      je _gets_escape      ; if no char received, retry
0175+  1433 76 6E         cmp ah, 'n'
0176+  1435 C6 54 14      je _gets_LF
0177+  1438 76 72         cmp ah, 'r'
0178+  143A C6 5B 14      je _gets_CR
0179+  143D 76 30         cmp ah, '0'
0180+  143F C6 62 14      je _gets_NULL
0181+  1442 76 5C         cmp ah, $5C  ; '\'
0182+  1444 C6 4D 14      je _gets_slash
0183+  1447 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1448 3E            mov [d], al
0185+  1449 79            inc d
0186+  144A 0A D2 13      jmp _gets_loop
0187+  144D             _gets_slash:
0188+  144D 19 5C         mov al, $5C
0189+  144F 3E            mov [d], al
0190+  1450 79            inc d
0191+  1451 0A D2 13      jmp _gets_loop
0192+  1454             _gets_LF:
0193+  1454 19 0A         mov al, $0A
0194+  1456 3E            mov [d], al
0195+  1457 79            inc d
0196+  1458 0A D2 13      jmp _gets_loop
0197+  145B             _gets_CR:
0198+  145B 19 0D         mov al, $0D
0199+  145D 3E            mov [d], al
0200+  145E 79            inc d
0201+  145F 0A D2 13      jmp _gets_loop
0202+  1462             _gets_NULL:
0203+  1462 19 00         mov al, $00
0204+  1464 3E            mov [d], al
0205+  1465 79            inc d
0206+  1466 0A D2 13      jmp _gets_loop
0207+  1469             _gets_end:
0208+  1469 19 00         mov al, 0
0209+  146B 3E            mov [d], al        ; terminate string
0210+  146C E7            pop d
0211+  146D E4            pop a
0212+  146E 09            ret
0213+  146F             
0214+  146F             ;-----------------------------------------------------------------------------
0215+  146F             ;; INPUT TEXT
0216+  146F             ;; terminated with CTRL+D
0217+  146F             ;; pointer in D
0218+  146F             ;-----------------------------------------------------------------------------
0219+  146F             _gettxt:
0220+  146F D7            push a
0221+  1470 DA            push d
0222+  1471             _gettxt_loop:
0223+  1471 19 01         mov al, 1
0224+  1473 05 03         syscall sys_io      ; receive in AH
0225+  1475 B9 00         cmp al, 0        ; check error code (AL)
0226+  1477 C6 71 14      je _gettxt_loop    ; if no char received, retry
0227+  147A 76 04         cmp ah, 4      ; EOT
0228+  147C C6 BA 14      je _gettxt_end
0229+  147F 76 08         cmp ah, $08      ; check for backspace
0230+  1481 C6 B6 14      je _gettxt_backspace
0231+  1484 76 5C         cmp ah, $5C        ; '\'
0232+  1486 C6 8F 14      je _gettxt_escape
0233+  1489 1A            mov al, ah
0234+  148A 3E            mov [d], al
0235+  148B 79            inc d
0236+  148C 0A 71 14      jmp _gettxt_loop
0237+  148F             _gettxt_escape:
0238+  148F 19 01         mov al, 1
0239+  1491 05 03         syscall sys_io      ; receive in AH
0240+  1493 B9 00         cmp al, 0        ; check error code (AL)
0241+  1495 C6 8F 14      je _gettxt_escape    ; if no char received, retry
0242+  1498 76 6E         cmp ah, 'n'
0243+  149A C6 A8 14      je _gettxt_LF
0244+  149D 76 72         cmp ah, 'r'
0245+  149F C6 AF 14      je _gettxt_CR
0246+  14A2 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  14A3 3E            mov [d], al
0248+  14A4 79            inc d
0249+  14A5 0A 71 14      jmp _gettxt_loop
0250+  14A8             _gettxt_LF:
0251+  14A8 19 0A         mov al, $0A
0252+  14AA 3E            mov [d], al
0253+  14AB 79            inc d
0254+  14AC 0A 71 14      jmp _gettxt_loop
0255+  14AF             _gettxt_CR:
0256+  14AF 19 0D         mov al, $0D
0257+  14B1 3E            mov [d], al
0258+  14B2 79            inc d
0259+  14B3 0A 71 14      jmp _gettxt_loop
0260+  14B6             _gettxt_backspace:
0261+  14B6 7F            dec d
0262+  14B7 0A 71 14      jmp _gettxt_loop
0263+  14BA             _gettxt_end:
0264+  14BA 19 00         mov al, 0
0265+  14BC 3E            mov [d], al        ; terminate string
0266+  14BD E7            pop d
0267+  14BE E4            pop a
0268+  14BF 09            ret
0269+  14C0             
0270+  14C0             ;-----------------------------------------------------------------------------
0271+  14C0             ; PRINT NEW LINE
0272+  14C0             ;-----------------------------------------------------------------------------
0273+  14C0             printnl:
0274+  14C0 D7            push a
0275+  14C1 10 00 0A      mov a, $0A00
0276+  14C4 05 03         syscall sys_io
0277+  14C6 10 00 0D      mov a, $0D00
0278+  14C9 05 03         syscall sys_io
0279+  14CB E4            pop a
0280+  14CC 09            ret
0281+  14CD             
0282+  14CD             ;-----------------------------------------------------------------------------
0283+  14CD             ; _strtoint
0284+  14CD             ; 4 digit hex string number in d
0285+  14CD             ; integer returned in A
0286+  14CD             ;-----------------------------------------------------------------------------
0287+  14CD             _strtointx:
0288+  14CD D8            push b
0289+  14CE 32            mov bl, [d]
0290+  14CF 37            mov bh, bl
0291+  14D0 33 01 00      mov bl, [d + 1]
0292+  14D3 07 86 13      call _atoi        ; convert to int in AL
0293+  14D6 23            mov ah, al        ; move to AH
0294+  14D7 33 02 00      mov bl, [d + 2]
0295+  14DA 37            mov bh, bl
0296+  14DB 33 03 00      mov bl, [d + 3]
0297+  14DE 07 86 13      call _atoi        ; convert to int in AL
0298+  14E1 E5            pop b
0299+  14E2 09            ret
0300+  14E3             
0301+  14E3             ;-----------------------------------------------------------------------------
0302+  14E3             ; _strtoint
0303+  14E3             ; 5 digit base10 string number in d
0304+  14E3             ; integer returned in A
0305+  14E3             ;-----------------------------------------------------------------------------
0306+  14E3             _strtoint:
0307+  14E3 E2            push si
0308+  14E4 D8            push b
0309+  14E5 D9            push c
0310+  14E6 DA            push d
0311+  14E7 07 28 13      call _strlen      ; get string length in C
0312+  14EA 7E            dec c
0313+  14EB FD 4E         mov si, d
0314+  14ED 12            mov a, c
0315+  14EE FD 99         shl a
0316+  14F0 3B 5F 16      mov d, table_power
0317+  14F3 59            add d, a
0318+  14F4 38 00 00      mov c, 0
0319+  14F7             _strtoint_L0:
0320+  14F7 F6            lodsb      ; load ASCII to al
0321+  14F8 B9 00         cmp al, 0
0322+  14FA C6 0D 15      je _strtoint_end
0323+  14FD 6F 30         sub al, $30    ; make into integer
0324+  14FF 22 00         mov ah, 0
0325+  1501 2A            mov b, [d]
0326+  1502 AC            mul a, b      ; result in B since it fits in 16bits
0327+  1503 11            mov a, b
0328+  1504 28            mov b, c
0329+  1505 54            add a, b
0330+  1506 39            mov c, a
0331+  1507 63 02 00      sub d, 2
0332+  150A 0A F7 14      jmp _strtoint_L0
0333+  150D             _strtoint_end:
0334+  150D 12            mov a, c
0335+  150E E7            pop d
0336+  150F E6            pop c
0337+  1510 E5            pop b
0338+  1511 EF            pop si
0339+  1512 09            ret
0340+  1513             
0341+  1513             ;-----------------------------------------------------------------------------
0342+  1513             ; PRINT NULL TERMINATED STRING
0343+  1513             ; pointer in D
0344+  1513             ;-----------------------------------------------------------------------------
0345+  1513             _puts:
0346+  1513 D7            push a
0347+  1514 DA            push d
0348+  1515             _puts_L1:
0349+  1515 1E            mov al, [d]
0350+  1516 B9 00         cmp al, 0
0351+  1518 C6 24 15      jz _puts_END
0352+  151B 23            mov ah, al
0353+  151C 19 00         mov al, 0
0354+  151E 05 03         syscall sys_io
0355+  1520 79            inc d
0356+  1521 0A 15 15      jmp _puts_L1
0357+  1524             _puts_END:
0358+  1524 E7            pop d
0359+  1525 E4            pop a
0360+  1526 09            ret
0361+  1527             
0362+  1527             ;-----------------------------------------------------------------------------
0363+  1527             ; PRINT N SIZE STRING
0364+  1527             ; pointer in D
0365+  1527             ; size in C
0366+  1527             ;-----------------------------------------------------------------------------
0367+  1527             _putsn:
0368+  1527 DB            push al
0369+  1528 DA            push d
0370+  1529 D9            push c
0371+  152A             _putsn_L0:
0372+  152A 1E            mov al, [d]
0373+  152B 23            mov ah, al
0374+  152C 19 00         mov al, 0
0375+  152E 05 03         syscall sys_io
0376+  1530 79            inc d
0377+  1531 7E            dec c  
0378+  1532 C2 00 00      cmp c, 0
0379+  1535 C7 2A 15      jne _putsn_L0
0380+  1538             _putsn_end:
0381+  1538 E6            pop c
0382+  1539 E7            pop d
0383+  153A E8            pop al
0384+  153B 09            ret
0385+  153C             
0386+  153C             ;-----------------------------------------------------------------------------
0387+  153C             ; print 16bit decimal number
0388+  153C             ; input number in A
0389+  153C             ;-----------------------------------------------------------------------------
0390+  153C             print_u16d:
0391+  153C D7            push a
0392+  153D D8            push b
0393+  153E 26 10 27      mov b, 10000
0394+  1541 AE            div a, b      ; get 10000's coeff.
0395+  1542 07 64 15      call print_number
0396+  1545 11            mov a, b
0397+  1546 26 E8 03      mov b, 1000
0398+  1549 AE            div a, b      ; get 1000's coeff.
0399+  154A 07 64 15      call print_number
0400+  154D 11            mov a, b
0401+  154E 26 64 00      mov b, 100
0402+  1551 AE            div a, b
0403+  1552 07 64 15      call print_number
0404+  1555 11            mov a, b
0405+  1556 26 0A 00      mov b, 10
0406+  1559 AE            div a, b
0407+  155A 07 64 15      call print_number
0408+  155D 1B            mov al, bl      ; 1's coeff in bl
0409+  155E 07 64 15      call print_number
0410+  1561 E5            pop b
0411+  1562 E4            pop a
0412+  1563 09            ret
0413+  1564             
0414+  1564             ;-----------------------------------------------------------------------------
0415+  1564             ; print AL
0416+  1564             ;-----------------------------------------------------------------------------
0417+  1564             print_number:
0418+  1564 6A 30         add al, $30
0419+  1566 23            mov ah, al
0420+  1567 07 C9 13      call _putchar
0421+  156A 09            ret
0422+  156B             
0423+  156B             ;-----------------------------------------------------------------------------
0424+  156B             ; PRINT 16BIT HEX INTEGER
0425+  156B             ; integer value in reg B
0426+  156B             ;-----------------------------------------------------------------------------
0427+  156B             print_u16x:
0428+  156B D7            push a
0429+  156C D8            push b
0430+  156D DD            push bl
0431+  156E 30            mov bl, bh
0432+  156F 07 97 13      call _itoa        ; convert bh to char in A
0433+  1572 2F            mov bl, al        ; save al
0434+  1573 19 00         mov al, 0
0435+  1575 05 03         syscall sys_io        ; display AH
0436+  1577 24            mov ah, bl        ; retrieve al
0437+  1578 19 00         mov al, 0
0438+  157A 05 03         syscall sys_io        ; display AL
0439+  157C             
0440+  157C EA            pop bl
0441+  157D 07 97 13      call _itoa        ; convert bh to char in A
0442+  1580 2F            mov bl, al        ; save al
0443+  1581 19 00         mov al, 0
0444+  1583 05 03         syscall sys_io        ; display AH
0445+  1585 24            mov ah, bl        ; retrieve al
0446+  1586 19 00         mov al, 0
0447+  1588 05 03         syscall sys_io        ; display AL
0448+  158A             
0449+  158A E5            pop b
0450+  158B E4            pop a
0451+  158C 09            ret
0452+  158D             
0453+  158D             ;-----------------------------------------------------------------------------
0454+  158D             ; INPUT 16BIT HEX INTEGER
0455+  158D             ; read 16bit integer into A
0456+  158D             ;-----------------------------------------------------------------------------
0457+  158D             scan_u16x:
0458+  158D F8 10 00      enter 16
0459+  1590 D8            push b
0460+  1591 DA            push d
0461+  1592             
0462+  1592 FA F1 FF      lea d, [bp + -15]
0463+  1595 07 D0 13      call _gets        ; get number
0464+  1598             
0465+  1598 32            mov bl, [d]
0466+  1599 37            mov bh, bl
0467+  159A 33 01 00      mov bl, [d + 1]
0468+  159D 07 86 13      call _atoi        ; convert to int in AL
0469+  15A0 23            mov ah, al        ; move to AH
0470+  15A1             
0471+  15A1 33 02 00      mov bl, [d + 2]
0472+  15A4 37            mov bh, bl
0473+  15A5 33 03 00      mov bl, [d + 3]
0474+  15A8 07 86 13      call _atoi        ; convert to int in AL
0475+  15AB             
0476+  15AB E7            pop d
0477+  15AC E5            pop b
0478+  15AD F9            leave
0479+  15AE 09            ret
0480+  15AF             
0481+  15AF             ;-----------------------------------------------------------------------------
0482+  15AF             ; PRINT 8bit HEX INTEGER
0483+  15AF             ; integer value in reg bl
0484+  15AF             ;-----------------------------------------------------------------------------
0485+  15AF             print_u8x:
0486+  15AF D7            push a
0487+  15B0 DD            push bl
0488+  15B1             
0489+  15B1 07 97 13      call _itoa        ; convert bl to char in A
0490+  15B4 2F            mov bl, al        ; save al
0491+  15B5 19 00         mov al, 0
0492+  15B7 05 03         syscall sys_io        ; display AH
0493+  15B9 24            mov ah, bl        ; retrieve al
0494+  15BA 19 00         mov al, 0
0495+  15BC 05 03         syscall sys_io        ; display AL
0496+  15BE             
0497+  15BE EA            pop bl
0498+  15BF E4            pop a
0499+  15C0 09            ret
0500+  15C1             
0501+  15C1             ;-----------------------------------------------------------------------------
0502+  15C1             ; print 8bit decimal unsigned number
0503+  15C1             ; input number in AL
0504+  15C1             ;-----------------------------------------------------------------------------
0505+  15C1             print_u8d:
0506+  15C1 D7            push a
0507+  15C2 D8            push b
0508+  15C3             
0509+  15C3 22 00         mov ah, 0
0510+  15C5 26 64 00      mov b, 100
0511+  15C8 AE            div a, b
0512+  15C9 D8            push b      ; save remainder
0513+  15CA B9 00         cmp al, 0
0514+  15CC C6 D6 15      je skip100
0515+  15CF 6A 30         add al, $30
0516+  15D1 23            mov ah, al
0517+  15D2 19 00         mov al, 0
0518+  15D4 05 03         syscall sys_io  ; print coeff
0519+  15D6             skip100:
0520+  15D6 E4            pop a
0521+  15D7 22 00         mov ah, 0
0522+  15D9 26 0A 00      mov b, 10
0523+  15DC AE            div a, b
0524+  15DD D8            push b      ; save remainder
0525+  15DE B9 00         cmp al, 0
0526+  15E0 C6 EA 15      je skip10
0527+  15E3 6A 30         add al, $30
0528+  15E5 23            mov ah, al
0529+  15E6 19 00         mov al, 0
0530+  15E8 05 03         syscall sys_io  ; print coeff
0531+  15EA             skip10:
0532+  15EA E4            pop a
0533+  15EB 1B            mov al, bl
0534+  15EC 6A 30         add al, $30
0535+  15EE 23            mov ah, al
0536+  15EF 19 00         mov al, 0
0537+  15F1 05 03         syscall sys_io  ; print coeff
0538+  15F3 E5            pop b
0539+  15F4 E4            pop a
0540+  15F5 09            ret
0541+  15F6             
0542+  15F6             ;-----------------------------------------------------------------------------
0543+  15F6             ; INPUT 8BIT HEX INTEGER
0544+  15F6             ; read 8bit integer into AL
0545+  15F6             ;-----------------------------------------------------------------------------
0546+  15F6             scan_u8x:
0547+  15F6 F8 04 00      enter 4
0548+  15F9 D8            push b
0549+  15FA DA            push d
0550+  15FB             
0551+  15FB FA FD FF      lea d, [bp + -3]
0552+  15FE 07 D0 13      call _gets        ; get number
0553+  1601             
0554+  1601 32            mov bl, [d]
0555+  1602 37            mov bh, bl
0556+  1603 33 01 00      mov bl, [d + 1]
0557+  1606 07 86 13      call _atoi        ; convert to int in AL
0558+  1609             
0559+  1609 E7            pop d
0560+  160A E5            pop b
0561+  160B F9            leave
0562+  160C 09            ret
0563+  160D             
0564+  160D             ;-----------------------------------------------------------------------------
0565+  160D             ; input decimal number
0566+  160D             ; result in A
0567+  160D             ; 655'\0'
0568+  160D             ; low--------high
0569+  160D             ;-----------------------------------------------------------------------------
0570+  160D             scan_u16d:
0571+  160D F8 08 00      enter 8
0572+  1610 E2            push si
0573+  1611 D8            push b
0574+  1612 D9            push c
0575+  1613 DA            push d
0576+  1614 FA F9 FF      lea d, [bp +- 7]
0577+  1617 07 D0 13      call _gets
0578+  161A 07 28 13      call _strlen      ; get string length in C
0579+  161D 7E            dec c
0580+  161E FD 4E         mov si, d
0581+  1620 12            mov a, c
0582+  1621 FD 99         shl a
0583+  1623 3B 5F 16      mov d, table_power
0584+  1626 59            add d, a
0585+  1627 38 00 00      mov c, 0
0586+  162A             mul_loop:
0587+  162A F6            lodsb      ; load ASCII to al
0588+  162B B9 00         cmp al, 0
0589+  162D C6 40 16      je mul_exit
0590+  1630 6F 30         sub al, $30    ; make into integer
0591+  1632 22 00         mov ah, 0
0592+  1634 2A            mov b, [d]
0593+  1635 AC            mul a, b      ; result in B since it fits in 16bits
0594+  1636 11            mov a, b
0595+  1637 28            mov b, c
0596+  1638 54            add a, b
0597+  1639 39            mov c, a
0598+  163A 63 02 00      sub d, 2
0599+  163D 0A 2A 16      jmp mul_loop
0600+  1640             mul_exit:
0601+  1640 12            mov a, c
0602+  1641 E7            pop d
0603+  1642 E6            pop c
0604+  1643 E5            pop b
0605+  1644 EF            pop si
0606+  1645 F9            leave
0607+  1646 09            ret
0608+  1647             
0609+  1647 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  164B 34 35 36 37 
0609+  164F 38 39 41 42 
0609+  1653 43 44 45 46 
0610+  1657 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  165B 1B 5B 48 00 
0611+  165F             
0612+  165F             table_power:
0613+  165F 01 00         .dw 1
0614+  1661 0A 00         .dw 10
0615+  1663 64 00         .dw 100
0616+  1665 E8 03         .dw 1000
0617+  1667 10 27         .dw 100002808   1669             ; --- END INLINE ASM BLOCK
2809   1669             
2810   1669 F9            leave
2811   166A 09            ret
2812   166B             
2813   166B             show:
2814   166B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2815   166E             ; $i 
2816   166E             ; $j 
2817   166E 52 04 00      sub sp, 4
2818   1671             ;; for(i = 0; i <   30     ; i++){ 
2819   1671             _for42_init:
2820   1671 FA FF FF      lea d, [bp + -1] ; $i
2821   1674 DA            push d
2822   1675 26 00 00      mov b, $0
2823   1678 E7            pop d
2824   1679 FD 43         mov [d], b
2825   167B             _for42_cond:
2826   167B FA FF FF      lea d, [bp + -1] ; $i
2827   167E 2A            mov b, [d]
2828   167F             ; START RELATIONAL
2829   167F D7            push a
2830   1680 11            mov a, b
2831   1681 26 1E 00      mov b, $1e
2832   1684 FD 73         slt ; <= (signed)
2833   1686 E4            pop a
2834   1687             ; END RELATIONAL
2835   1687 C0 00 00      cmp b, 0
2836   168A C6 10 17      je _for42_exit
2837   168D             _for42_block:
2838   168D             ;; for(j = 0; j <    40    ; j++){ 
2839   168D             _for43_init:
2840   168D FA FD FF      lea d, [bp + -3] ; $j
2841   1690 DA            push d
2842   1691 26 00 00      mov b, $0
2843   1694 E7            pop d
2844   1695 FD 43         mov [d], b
2845   1697             _for43_cond:
2846   1697 FA FD FF      lea d, [bp + -3] ; $j
2847   169A 2A            mov b, [d]
2848   169B             ; START RELATIONAL
2849   169B D7            push a
2850   169C 11            mov a, b
2851   169D 26 28 00      mov b, $28
2852   16A0 FD 73         slt ; <= (signed)
2853   16A2 E4            pop a
2854   16A3             ; END RELATIONAL
2855   16A3 C0 00 00      cmp b, 0
2856   16A6 C6 F6 16      je _for43_exit
2857   16A9             _for43_block:
2858   16A9             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
2859   16A9             _ternary44_cond:
2860   16A9 3B 3D 1E      mov d, _currState_data ; $currState
2861   16AC D7            push a
2862   16AD DA            push d
2863   16AE FA FF FF      lea d, [bp + -1] ; $i
2864   16B1 2A            mov b, [d]
2865   16B2 E7            pop d
2866   16B3 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2867   16B7 DA            push d
2868   16B8 FA FD FF      lea d, [bp + -3] ; $j
2869   16BB 2A            mov b, [d]
2870   16BC E7            pop d
2871   16BD 5A            add d, b
2872   16BE E4            pop a
2873   16BF 32            mov bl, [d]
2874   16C0 A7 00         mov bh, 0
2875   16C2             ; START RELATIONAL
2876   16C2 D7            push a
2877   16C3 11            mov a, b
2878   16C4 26 40 00      mov b, $40
2879   16C7 B0            cmp a, b
2880   16C8 FD 71         seq ; ==
2881   16CA E4            pop a
2882   16CB             ; END RELATIONAL
2883   16CB C0 00 00      cmp b, 0
2884   16CE C6 DD 16      je _ternary44_false
2885   16D1             _ternary44_true:
2886   16D1 26 4B 23      mov b, __s4 ; "@ "
2887   16D4 FD AB         swp b
2888   16D6 D8            push b
2889   16D7 07 ED 09      call printf
2890   16DA 0A E6 16      jmp _ternary44_exit
2891   16DD             _ternary44_false:
2892   16DD 26 4E 23      mov b, __s5 ; ". "
2893   16E0 FD AB         swp b
2894   16E2 D8            push b
2895   16E3 07 ED 09      call printf
2896   16E6             _ternary44_exit:
2897   16E6             _for43_update:
2898   16E6 FA FD FF      lea d, [bp + -3] ; $j
2899   16E9 2A            mov b, [d]
2900   16EA D8            push b
2901   16EB FD 77         inc b
2902   16ED FA FD FF      lea d, [bp + -3] ; $j
2903   16F0 FD 43         mov [d], b
2904   16F2 E5            pop b
2905   16F3 0A 97 16      jmp _for43_cond
2906   16F6             _for43_exit:
2907   16F6             ;; putchar(10); 
2908   16F6 26 0A 00      mov b, $a
2909   16F9 DD            push bl
2910   16FA 07 E8 11      call putchar
2911   16FD 51 01 00      add sp, 1
2912   1700             _for42_update:
2913   1700 FA FF FF      lea d, [bp + -1] ; $i
2914   1703 2A            mov b, [d]
2915   1704 D8            push b
2916   1705 FD 77         inc b
2917   1707 FA FF FF      lea d, [bp + -1] ; $i
2918   170A FD 43         mov [d], b
2919   170C E5            pop b
2920   170D 0A 7B 16      jmp _for42_cond
2921   1710             _for42_exit:
2922   1710 F9            leave
2923   1711 09            ret
2924   1712             
2925   1712             alive:
2926   1712 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2927   1715             ;; if(currState[i][j] == '@') return 1; 
2928   1715             _if45_cond:
2929   1715 3B 3D 1E      mov d, _currState_data ; $currState
2930   1718 D7            push a
2931   1719 DA            push d
2932   171A FA 05 00      lea d, [bp + 5] ; $i
2933   171D 2A            mov b, [d]
2934   171E E7            pop d
2935   171F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2936   1723 DA            push d
2937   1724 FA 07 00      lea d, [bp + 7] ; $j
2938   1727 2A            mov b, [d]
2939   1728 E7            pop d
2940   1729 5A            add d, b
2941   172A E4            pop a
2942   172B 32            mov bl, [d]
2943   172C A7 00         mov bh, 0
2944   172E             ; START RELATIONAL
2945   172E D7            push a
2946   172F 11            mov a, b
2947   1730 26 40 00      mov b, $40
2948   1733 B0            cmp a, b
2949   1734 FD 71         seq ; ==
2950   1736 E4            pop a
2951   1737             ; END RELATIONAL
2952   1737 C0 00 00      cmp b, 0
2953   173A C6 45 17      je _if45_else
2954   173D             _if45_true:
2955   173D             ;; return 1; 
2956   173D 26 01 00      mov b, $1
2957   1740 F9            leave
2958   1741 09            ret
2959   1742 0A 4A 17      jmp _if45_exit
2960   1745             _if45_else:
2961   1745             ;; return 0; 
2962   1745 26 00 00      mov b, $0
2963   1748 F9            leave
2964   1749 09            ret
2965   174A             _if45_exit:
2966   174A F9            leave
2967   174B 09            ret
2968   174C             
2969   174C             neighbours:
2970   174C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2971   174F             ; $count 
2972   174F 52 02 00      sub sp, 2
2973   1752             ;; count = 0; 
2974   1752 FA FF FF      lea d, [bp + -1] ; $count
2975   1755 DA            push d
2976   1756 26 00 00      mov b, $0
2977   1759 E7            pop d
2978   175A FD 43         mov [d], b
2979   175C             ;; if(currState[i+-1][j] == '@')			count++; 
2980   175C             _if46_cond:
2981   175C 3B 3D 1E      mov d, _currState_data ; $currState
2982   175F D7            push a
2983   1760 DA            push d
2984   1761 FA 05 00      lea d, [bp + 5] ; $i
2985   1764 2A            mov b, [d]
2986   1765             ; START TERMS
2987   1765 D7            push a
2988   1766 11            mov a, b
2989   1767 26 FF FF      mov b, $ffffffff
2990   176A 54            add a, b
2991   176B 27            mov b, a
2992   176C E4            pop a
2993   176D             ; END TERMS
2994   176D E7            pop d
2995   176E FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2996   1772 DA            push d
2997   1773 FA 07 00      lea d, [bp + 7] ; $j
2998   1776 2A            mov b, [d]
2999   1777 E7            pop d
3000   1778 5A            add d, b
3001   1779 E4            pop a
3002   177A 32            mov bl, [d]
3003   177B A7 00         mov bh, 0
3004   177D             ; START RELATIONAL
3005   177D D7            push a
3006   177E 11            mov a, b
3007   177F 26 40 00      mov b, $40
3008   1782 B0            cmp a, b
3009   1783 FD 71         seq ; ==
3010   1785 E4            pop a
3011   1786             ; END RELATIONAL
3012   1786 C0 00 00      cmp b, 0
3013   1789 C6 9C 17      je _if46_exit
3014   178C             _if46_true:
3015   178C             ;; count++; 
3016   178C FA FF FF      lea d, [bp + -1] ; $count
3017   178F 2A            mov b, [d]
3018   1790 D8            push b
3019   1791 FD 77         inc b
3020   1793 FA FF FF      lea d, [bp + -1] ; $count
3021   1796 FD 43         mov [d], b
3022   1798 E5            pop b
3023   1799 0A 9C 17      jmp _if46_exit
3024   179C             _if46_exit:
3025   179C             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
3026   179C             _if47_cond:
3027   179C 3B 3D 1E      mov d, _currState_data ; $currState
3028   179F D7            push a
3029   17A0 DA            push d
3030   17A1 FA 05 00      lea d, [bp + 5] ; $i
3031   17A4 2A            mov b, [d]
3032   17A5             ; START TERMS
3033   17A5 D7            push a
3034   17A6 11            mov a, b
3035   17A7 26 FF FF      mov b, $ffffffff
3036   17AA 54            add a, b
3037   17AB 27            mov b, a
3038   17AC E4            pop a
3039   17AD             ; END TERMS
3040   17AD E7            pop d
3041   17AE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3042   17B2 DA            push d
3043   17B3 FA 07 00      lea d, [bp + 7] ; $j
3044   17B6 2A            mov b, [d]
3045   17B7             ; START TERMS
3046   17B7 D7            push a
3047   17B8 11            mov a, b
3048   17B9 26 FF FF      mov b, $ffffffff
3049   17BC 54            add a, b
3050   17BD 27            mov b, a
3051   17BE E4            pop a
3052   17BF             ; END TERMS
3053   17BF E7            pop d
3054   17C0 5A            add d, b
3055   17C1 E4            pop a
3056   17C2 32            mov bl, [d]
3057   17C3 A7 00         mov bh, 0
3058   17C5             ; START RELATIONAL
3059   17C5 D7            push a
3060   17C6 11            mov a, b
3061   17C7 26 40 00      mov b, $40
3062   17CA B0            cmp a, b
3063   17CB FD 71         seq ; ==
3064   17CD E4            pop a
3065   17CE             ; END RELATIONAL
3066   17CE C0 00 00      cmp b, 0
3067   17D1 C6 E4 17      je _if47_exit
3068   17D4             _if47_true:
3069   17D4             ;; count++; 
3070   17D4 FA FF FF      lea d, [bp + -1] ; $count
3071   17D7 2A            mov b, [d]
3072   17D8 D8            push b
3073   17D9 FD 77         inc b
3074   17DB FA FF FF      lea d, [bp + -1] ; $count
3075   17DE FD 43         mov [d], b
3076   17E0 E5            pop b
3077   17E1 0A E4 17      jmp _if47_exit
3078   17E4             _if47_exit:
3079   17E4             ;; if(currState[i+-1][j+1] == '@') 	count++; 
3080   17E4             _if48_cond:
3081   17E4 3B 3D 1E      mov d, _currState_data ; $currState
3082   17E7 D7            push a
3083   17E8 DA            push d
3084   17E9 FA 05 00      lea d, [bp + 5] ; $i
3085   17EC 2A            mov b, [d]
3086   17ED             ; START TERMS
3087   17ED D7            push a
3088   17EE 11            mov a, b
3089   17EF 26 FF FF      mov b, $ffffffff
3090   17F2 54            add a, b
3091   17F3 27            mov b, a
3092   17F4 E4            pop a
3093   17F5             ; END TERMS
3094   17F5 E7            pop d
3095   17F6 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3096   17FA DA            push d
3097   17FB FA 07 00      lea d, [bp + 7] ; $j
3098   17FE 2A            mov b, [d]
3099   17FF             ; START TERMS
3100   17FF D7            push a
3101   1800 11            mov a, b
3102   1801 26 01 00      mov b, $1
3103   1804 54            add a, b
3104   1805 27            mov b, a
3105   1806 E4            pop a
3106   1807             ; END TERMS
3107   1807 E7            pop d
3108   1808 5A            add d, b
3109   1809 E4            pop a
3110   180A 32            mov bl, [d]
3111   180B A7 00         mov bh, 0
3112   180D             ; START RELATIONAL
3113   180D D7            push a
3114   180E 11            mov a, b
3115   180F 26 40 00      mov b, $40
3116   1812 B0            cmp a, b
3117   1813 FD 71         seq ; ==
3118   1815 E4            pop a
3119   1816             ; END RELATIONAL
3120   1816 C0 00 00      cmp b, 0
3121   1819 C6 2C 18      je _if48_exit
3122   181C             _if48_true:
3123   181C             ;; count++; 
3124   181C FA FF FF      lea d, [bp + -1] ; $count
3125   181F 2A            mov b, [d]
3126   1820 D8            push b
3127   1821 FD 77         inc b
3128   1823 FA FF FF      lea d, [bp + -1] ; $count
3129   1826 FD 43         mov [d], b
3130   1828 E5            pop b
3131   1829 0A 2C 18      jmp _if48_exit
3132   182C             _if48_exit:
3133   182C             ;; if(currState[i][j+-1] == '@') 		count++; 
3134   182C             _if49_cond:
3135   182C 3B 3D 1E      mov d, _currState_data ; $currState
3136   182F D7            push a
3137   1830 DA            push d
3138   1831 FA 05 00      lea d, [bp + 5] ; $i
3139   1834 2A            mov b, [d]
3140   1835 E7            pop d
3141   1836 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3142   183A DA            push d
3143   183B FA 07 00      lea d, [bp + 7] ; $j
3144   183E 2A            mov b, [d]
3145   183F             ; START TERMS
3146   183F D7            push a
3147   1840 11            mov a, b
3148   1841 26 FF FF      mov b, $ffffffff
3149   1844 54            add a, b
3150   1845 27            mov b, a
3151   1846 E4            pop a
3152   1847             ; END TERMS
3153   1847 E7            pop d
3154   1848 5A            add d, b
3155   1849 E4            pop a
3156   184A 32            mov bl, [d]
3157   184B A7 00         mov bh, 0
3158   184D             ; START RELATIONAL
3159   184D D7            push a
3160   184E 11            mov a, b
3161   184F 26 40 00      mov b, $40
3162   1852 B0            cmp a, b
3163   1853 FD 71         seq ; ==
3164   1855 E4            pop a
3165   1856             ; END RELATIONAL
3166   1856 C0 00 00      cmp b, 0
3167   1859 C6 6C 18      je _if49_exit
3168   185C             _if49_true:
3169   185C             ;; count++; 
3170   185C FA FF FF      lea d, [bp + -1] ; $count
3171   185F 2A            mov b, [d]
3172   1860 D8            push b
3173   1861 FD 77         inc b
3174   1863 FA FF FF      lea d, [bp + -1] ; $count
3175   1866 FD 43         mov [d], b
3176   1868 E5            pop b
3177   1869 0A 6C 18      jmp _if49_exit
3178   186C             _if49_exit:
3179   186C             ;; if(currState[i][j+1] == '@') 			count++; 
3180   186C             _if50_cond:
3181   186C 3B 3D 1E      mov d, _currState_data ; $currState
3182   186F D7            push a
3183   1870 DA            push d
3184   1871 FA 05 00      lea d, [bp + 5] ; $i
3185   1874 2A            mov b, [d]
3186   1875 E7            pop d
3187   1876 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3188   187A DA            push d
3189   187B FA 07 00      lea d, [bp + 7] ; $j
3190   187E 2A            mov b, [d]
3191   187F             ; START TERMS
3192   187F D7            push a
3193   1880 11            mov a, b
3194   1881 26 01 00      mov b, $1
3195   1884 54            add a, b
3196   1885 27            mov b, a
3197   1886 E4            pop a
3198   1887             ; END TERMS
3199   1887 E7            pop d
3200   1888 5A            add d, b
3201   1889 E4            pop a
3202   188A 32            mov bl, [d]
3203   188B A7 00         mov bh, 0
3204   188D             ; START RELATIONAL
3205   188D D7            push a
3206   188E 11            mov a, b
3207   188F 26 40 00      mov b, $40
3208   1892 B0            cmp a, b
3209   1893 FD 71         seq ; ==
3210   1895 E4            pop a
3211   1896             ; END RELATIONAL
3212   1896 C0 00 00      cmp b, 0
3213   1899 C6 AC 18      je _if50_exit
3214   189C             _if50_true:
3215   189C             ;; count++; 
3216   189C FA FF FF      lea d, [bp + -1] ; $count
3217   189F 2A            mov b, [d]
3218   18A0 D8            push b
3219   18A1 FD 77         inc b
3220   18A3 FA FF FF      lea d, [bp + -1] ; $count
3221   18A6 FD 43         mov [d], b
3222   18A8 E5            pop b
3223   18A9 0A AC 18      jmp _if50_exit
3224   18AC             _if50_exit:
3225   18AC             ;; if(currState[i+1][j+-1] == '@') 	count++; 
3226   18AC             _if51_cond:
3227   18AC 3B 3D 1E      mov d, _currState_data ; $currState
3228   18AF D7            push a
3229   18B0 DA            push d
3230   18B1 FA 05 00      lea d, [bp + 5] ; $i
3231   18B4 2A            mov b, [d]
3232   18B5             ; START TERMS
3233   18B5 D7            push a
3234   18B6 11            mov a, b
3235   18B7 26 01 00      mov b, $1
3236   18BA 54            add a, b
3237   18BB 27            mov b, a
3238   18BC E4            pop a
3239   18BD             ; END TERMS
3240   18BD E7            pop d
3241   18BE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3242   18C2 DA            push d
3243   18C3 FA 07 00      lea d, [bp + 7] ; $j
3244   18C6 2A            mov b, [d]
3245   18C7             ; START TERMS
3246   18C7 D7            push a
3247   18C8 11            mov a, b
3248   18C9 26 FF FF      mov b, $ffffffff
3249   18CC 54            add a, b
3250   18CD 27            mov b, a
3251   18CE E4            pop a
3252   18CF             ; END TERMS
3253   18CF E7            pop d
3254   18D0 5A            add d, b
3255   18D1 E4            pop a
3256   18D2 32            mov bl, [d]
3257   18D3 A7 00         mov bh, 0
3258   18D5             ; START RELATIONAL
3259   18D5 D7            push a
3260   18D6 11            mov a, b
3261   18D7 26 40 00      mov b, $40
3262   18DA B0            cmp a, b
3263   18DB FD 71         seq ; ==
3264   18DD E4            pop a
3265   18DE             ; END RELATIONAL
3266   18DE C0 00 00      cmp b, 0
3267   18E1 C6 F4 18      je _if51_exit
3268   18E4             _if51_true:
3269   18E4             ;; count++; 
3270   18E4 FA FF FF      lea d, [bp + -1] ; $count
3271   18E7 2A            mov b, [d]
3272   18E8 D8            push b
3273   18E9 FD 77         inc b
3274   18EB FA FF FF      lea d, [bp + -1] ; $count
3275   18EE FD 43         mov [d], b
3276   18F0 E5            pop b
3277   18F1 0A F4 18      jmp _if51_exit
3278   18F4             _if51_exit:
3279   18F4             ;; if(currState[i+1][j] == '@') 			count++; 
3280   18F4             _if52_cond:
3281   18F4 3B 3D 1E      mov d, _currState_data ; $currState
3282   18F7 D7            push a
3283   18F8 DA            push d
3284   18F9 FA 05 00      lea d, [bp + 5] ; $i
3285   18FC 2A            mov b, [d]
3286   18FD             ; START TERMS
3287   18FD D7            push a
3288   18FE 11            mov a, b
3289   18FF 26 01 00      mov b, $1
3290   1902 54            add a, b
3291   1903 27            mov b, a
3292   1904 E4            pop a
3293   1905             ; END TERMS
3294   1905 E7            pop d
3295   1906 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3296   190A DA            push d
3297   190B FA 07 00      lea d, [bp + 7] ; $j
3298   190E 2A            mov b, [d]
3299   190F E7            pop d
3300   1910 5A            add d, b
3301   1911 E4            pop a
3302   1912 32            mov bl, [d]
3303   1913 A7 00         mov bh, 0
3304   1915             ; START RELATIONAL
3305   1915 D7            push a
3306   1916 11            mov a, b
3307   1917 26 40 00      mov b, $40
3308   191A B0            cmp a, b
3309   191B FD 71         seq ; ==
3310   191D E4            pop a
3311   191E             ; END RELATIONAL
3312   191E C0 00 00      cmp b, 0
3313   1921 C6 34 19      je _if52_exit
3314   1924             _if52_true:
3315   1924             ;; count++; 
3316   1924 FA FF FF      lea d, [bp + -1] ; $count
3317   1927 2A            mov b, [d]
3318   1928 D8            push b
3319   1929 FD 77         inc b
3320   192B FA FF FF      lea d, [bp + -1] ; $count
3321   192E FD 43         mov [d], b
3322   1930 E5            pop b
3323   1931 0A 34 19      jmp _if52_exit
3324   1934             _if52_exit:
3325   1934             ;; if(currState[i+1][j+1] == '@') 		count++; 
3326   1934             _if53_cond:
3327   1934 3B 3D 1E      mov d, _currState_data ; $currState
3328   1937 D7            push a
3329   1938 DA            push d
3330   1939 FA 05 00      lea d, [bp + 5] ; $i
3331   193C 2A            mov b, [d]
3332   193D             ; START TERMS
3333   193D D7            push a
3334   193E 11            mov a, b
3335   193F 26 01 00      mov b, $1
3336   1942 54            add a, b
3337   1943 27            mov b, a
3338   1944 E4            pop a
3339   1945             ; END TERMS
3340   1945 E7            pop d
3341   1946 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3342   194A DA            push d
3343   194B FA 07 00      lea d, [bp + 7] ; $j
3344   194E 2A            mov b, [d]
3345   194F             ; START TERMS
3346   194F D7            push a
3347   1950 11            mov a, b
3348   1951 26 01 00      mov b, $1
3349   1954 54            add a, b
3350   1955 27            mov b, a
3351   1956 E4            pop a
3352   1957             ; END TERMS
3353   1957 E7            pop d
3354   1958 5A            add d, b
3355   1959 E4            pop a
3356   195A 32            mov bl, [d]
3357   195B A7 00         mov bh, 0
3358   195D             ; START RELATIONAL
3359   195D D7            push a
3360   195E 11            mov a, b
3361   195F 26 40 00      mov b, $40
3362   1962 B0            cmp a, b
3363   1963 FD 71         seq ; ==
3364   1965 E4            pop a
3365   1966             ; END RELATIONAL
3366   1966 C0 00 00      cmp b, 0
3367   1969 C6 7C 19      je _if53_exit
3368   196C             _if53_true:
3369   196C             ;; count++; 
3370   196C FA FF FF      lea d, [bp + -1] ; $count
3371   196F 2A            mov b, [d]
3372   1970 D8            push b
3373   1971 FD 77         inc b
3374   1973 FA FF FF      lea d, [bp + -1] ; $count
3375   1976 FD 43         mov [d], b
3376   1978 E5            pop b
3377   1979 0A 7C 19      jmp _if53_exit
3378   197C             _if53_exit:
3379   197C             ;; return count; 
3380   197C FA FF FF      lea d, [bp + -1] ; $count
3381   197F 2A            mov b, [d]
3382   1980 F9            leave
3383   1981 09            ret
3384   1982             ; --- END TEXT BLOCK
3385   1982             
3386   1982             ; --- BEGIN DATA BLOCK
3387   1982             _clear_data: 
3388   1982 1B 5B 32 4A .db 27,$5b,$32,$4a,27,$5b,$48,0,
3388   1986 1B 5B 48 00 
3389   198A 00 00 00    .fill 3, 0
3390   198D 00 00 00 00 _nextState_data: .fill 1200, 0
3390   1991 00 00 00 00 
3390   1995 00 00 00 00 
3390   1999 00 00 00 00 
3390   199D 00 00 00 00 
3390   19A1 00 00 00 00 
3390   19A5 00 00 00 00 
3390   19A9 00 00 00 00 
3390   19AD 00 00 00 00 
3390   19B1 00 00 00 00 
3390   19B5 00 00 00 00 
3390   19B9 00 00 00 00 
3390   19BD 00 00 00 00 
3390   19C1 00 00 00 00 
3390   19C5 00 00 00 00 
3390   19C9 00 00 00 00 
3390   19CD 00 00 00 00 
3390   19D1 00 00 00 00 
3390   19D5 00 00 00 00 
3390   19D9 00 00 00 00 
3390   19DD 00 00 00 00 
3390   19E1 00 00 00 00 
3390   19E5 00 00 00 00 
3390   19E9 00 00 00 00 
3390   19ED 00 00 00 00 
3390   19F1 00 00 00 00 
3390   19F5 00 00 00 00 
3390   19F9 00 00 00 00 
3390   19FD 00 00 00 00 
3390   1A01 00 00 00 00 
3390   1A05 00 00 00 00 
3390   1A09 00 00 00 00 
3390   1A0D 00 00 00 00 
3390   1A11 00 00 00 00 
3390   1A15 00 00 00 00 
3390   1A19 00 00 00 00 
3390   1A1D 00 00 00 00 
3390   1A21 00 00 00 00 
3390   1A25 00 00 00 00 
3390   1A29 00 00 00 00 
3390   1A2D 00 00 00 00 
3390   1A31 00 00 00 00 
3390   1A35 00 00 00 00 
3390   1A39 00 00 00 00 
3390   1A3D 00 00 00 00 
3390   1A41 00 00 00 00 
3390   1A45 00 00 00 00 
3390   1A49 00 00 00 00 
3390   1A4D 00 00 00 00 
3390   1A51 00 00 00 00 
3390   1A55 00 00 00 00 
3390   1A59 00 00 00 00 
3390   1A5D 00 00 00 00 
3390   1A61 00 00 00 00 
3390   1A65 00 00 00 00 
3390   1A69 00 00 00 00 
3390   1A6D 00 00 00 00 
3390   1A71 00 00 00 00 
3390   1A75 00 00 00 00 
3390   1A79 00 00 00 00 
3390   1A7D 00 00 00 00 
3390   1A81 00 00 00 00 
3390   1A85 00 00 00 00 
3390   1A89 00 00 00 00 
3390   1A8D 00 00 00 00 
3390   1A91 00 00 00 00 
3390   1A95 00 00 00 00 
3390   1A99 00 00 00 00 
3390   1A9D 00 00 00 00 
3390   1AA1 00 00 00 00 
3390   1AA5 00 00 00 00 
3390   1AA9 00 00 00 00 
3390   1AAD 00 00 00 00 
3390   1AB1 00 00 00 00 
3390   1AB5 00 00 00 00 
3390   1AB9 00 00 00 00 
3390   1ABD 00 00 00 00 
3390   1AC1 00 00 00 00 
3390   1AC5 00 00 00 00 
3390   1AC9 00 00 00 00 
3390   1ACD 00 00 00 00 
3390   1AD1 00 00 00 00 
3390   1AD5 00 00 00 00 
3390   1AD9 00 00 00 00 
3390   1ADD 00 00 00 00 
3390   1AE1 00 00 00 00 
3390   1AE5 00 00 00 00 
3390   1AE9 00 00 00 00 
3390   1AED 00 00 00 00 
3390   1AF1 00 00 00 00 
3390   1AF5 00 00 00 00 
3390   1AF9 00 00 00 00 
3390   1AFD 00 00 00 00 
3390   1B01 00 00 00 00 
3390   1B05 00 00 00 00 
3390   1B09 00 00 00 00 
3390   1B0D 00 00 00 00 
3390   1B11 00 00 00 00 
3390   1B15 00 00 00 00 
3390   1B19 00 00 00 00 
3390   1B1D 00 00 00 00 
3390   1B21 00 00 00 00 
3390   1B25 00 00 00 00 
3390   1B29 00 00 00 00 
3390   1B2D 00 00 00 00 
3390   1B31 00 00 00 00 
3390   1B35 00 00 00 00 
3390   1B39 00 00 00 00 
3390   1B3D 00 00 00 00 
3390   1B41 00 00 00 00 
3390   1B45 00 00 00 00 
3390   1B49 00 00 00 00 
3390   1B4D 00 00 00 00 
3390   1B51 00 00 00 00 
3390   1B55 00 00 00 00 
3390   1B59 00 00 00 00 
3390   1B5D 00 00 00 00 
3390   1B61 00 00 00 00 
3390   1B65 00 00 00 00 
3390   1B69 00 00 00 00 
3390   1B6D 00 00 00 00 
3390   1B71 00 00 00 00 
3390   1B75 00 00 00 00 
3390   1B79 00 00 00 00 
3390   1B7D 00 00 00 00 
3390   1B81 00 00 00 00 
3390   1B85 00 00 00 00 
3390   1B89 00 00 00 00 
3390   1B8D 00 00 00 00 
3390   1B91 00 00 00 00 
3390   1B95 00 00 00 00 
3390   1B99 00 00 00 00 
3390   1B9D 00 00 00 00 
3390   1BA1 00 00 00 00 
3390   1BA5 00 00 00 00 
3390   1BA9 00 00 00 00 
3390   1BAD 00 00 00 00 
3390   1BB1 00 00 00 00 
3390   1BB5 00 00 00 00 
3390   1BB9 00 00 00 00 
3390   1BBD 00 00 00 00 
3390   1BC1 00 00 00 00 
3390   1BC5 00 00 00 00 
3390   1BC9 00 00 00 00 
3390   1BCD 00 00 00 00 
3390   1BD1 00 00 00 00 
3390   1BD5 00 00 00 00 
3390   1BD9 00 00 00 00 
3390   1BDD 00 00 00 00 
3390   1BE1 00 00 00 00 
3390   1BE5 00 00 00 00 
3390   1BE9 00 00 00 00 
3390   1BED 00 00 00 00 
3390   1BF1 00 00 00 00 
3390   1BF5 00 00 00 00 
3390   1BF9 00 00 00 00 
3390   1BFD 00 00 00 00 
3390   1C01 00 00 00 00 
3390   1C05 00 00 00 00 
3390   1C09 00 00 00 00 
3390   1C0D 00 00 00 00 
3390   1C11 00 00 00 00 
3390   1C15 00 00 00 00 
3390   1C19 00 00 00 00 
3390   1C1D 00 00 00 00 
3390   1C21 00 00 00 00 
3390   1C25 00 00 00 00 
3390   1C29 00 00 00 00 
3390   1C2D 00 00 00 00 
3390   1C31 00 00 00 00 
3390   1C35 00 00 00 00 
3390   1C39 00 00 00 00 
3390   1C3D 00 00 00 00 
3390   1C41 00 00 00 00 
3390   1C45 00 00 00 00 
3390   1C49 00 00 00 00 
3390   1C4D 00 00 00 00 
3390   1C51 00 00 00 00 
3390   1C55 00 00 00 00 
3390   1C59 00 00 00 00 
3390   1C5D 00 00 00 00 
3390   1C61 00 00 00 00 
3390   1C65 00 00 00 00 
3390   1C69 00 00 00 00 
3390   1C6D 00 00 00 00 
3390   1C71 00 00 00 00 
3390   1C75 00 00 00 00 
3390   1C79 00 00 00 00 
3390   1C7D 00 00 00 00 
3390   1C81 00 00 00 00 
3390   1C85 00 00 00 00 
3390   1C89 00 00 00 00 
3390   1C8D 00 00 00 00 
3390   1C91 00 00 00 00 
3390   1C95 00 00 00 00 
3390   1C99 00 00 00 00 
3390   1C9D 00 00 00 00 
3390   1CA1 00 00 00 00 
3390   1CA5 00 00 00 00 
3390   1CA9 00 00 00 00 
3390   1CAD 00 00 00 00 
3390   1CB1 00 00 00 00 
3390   1CB5 00 00 00 00 
3390   1CB9 00 00 00 00 
3390   1CBD 00 00 00 00 
3390   1CC1 00 00 00 00 
3390   1CC5 00 00 00 00 
3390   1CC9 00 00 00 00 
3390   1CCD 00 00 00 00 
3390   1CD1 00 00 00 00 
3390   1CD5 00 00 00 00 
3390   1CD9 00 00 00 00 
3390   1CDD 00 00 00 00 
3390   1CE1 00 00 00 00 
3390   1CE5 00 00 00 00 
3390   1CE9 00 00 00 00 
3390   1CED 00 00 00 00 
3390   1CF1 00 00 00 00 
3390   1CF5 00 00 00 00 
3390   1CF9 00 00 00 00 
3390   1CFD 00 00 00 00 
3390   1D01 00 00 00 00 
3390   1D05 00 00 00 00 
3390   1D09 00 00 00 00 
3390   1D0D 00 00 00 00 
3390   1D11 00 00 00 00 
3390   1D15 00 00 00 00 
3390   1D19 00 00 00 00 
3390   1D1D 00 00 00 00 
3390   1D21 00 00 00 00 
3390   1D25 00 00 00 00 
3390   1D29 00 00 00 00 
3390   1D2D 00 00 00 00 
3390   1D31 00 00 00 00 
3390   1D35 00 00 00 00 
3390   1D39 00 00 00 00 
3390   1D3D 00 00 00 00 
3390   1D41 00 00 00 00 
3390   1D45 00 00 00 00 
3390   1D49 00 00 00 00 
3390   1D4D 00 00 00 00 
3390   1D51 00 00 00 00 
3390   1D55 00 00 00 00 
3390   1D59 00 00 00 00 
3390   1D5D 00 00 00 00 
3390   1D61 00 00 00 00 
3390   1D65 00 00 00 00 
3390   1D69 00 00 00 00 
3390   1D6D 00 00 00 00 
3390   1D71 00 00 00 00 
3390   1D75 00 00 00 00 
3390   1D79 00 00 00 00 
3390   1D7D 00 00 00 00 
3390   1D81 00 00 00 00 
3390   1D85 00 00 00 00 
3390   1D89 00 00 00 00 
3390   1D8D 00 00 00 00 
3390   1D91 00 00 00 00 
3390   1D95 00 00 00 00 
3390   1D99 00 00 00 00 
3390   1D9D 00 00 00 00 
3390   1DA1 00 00 00 00 
3390   1DA5 00 00 00 00 
3390   1DA9 00 00 00 00 
3390   1DAD 00 00 00 00 
3390   1DB1 00 00 00 00 
3390   1DB5 00 00 00 00 
3390   1DB9 00 00 00 00 
3390   1DBD 00 00 00 00 
3390   1DC1 00 00 00 00 
3390   1DC5 00 00 00 00 
3390   1DC9 00 00 00 00 
3390   1DCD 00 00 00 00 
3390   1DD1 00 00 00 00 
3390   1DD5 00 00 00 00 
3390   1DD9 00 00 00 00 
3390   1DDD 00 00 00 00 
3390   1DE1 00 00 00 00 
3390   1DE5 00 00 00 00 
3390   1DE9 00 00 00 00 
3390   1DED 00 00 00 00 
3390   1DF1 00 00 00 00 
3390   1DF5 00 00 00 00 
3390   1DF9 00 00 00 00 
3390   1DFD 00 00 00 00 
3390   1E01 00 00 00 00 
3390   1E05 00 00 00 00 
3390   1E09 00 00 00 00 
3390   1E0D 00 00 00 00 
3390   1E11 00 00 00 00 
3390   1E15 00 00 00 00 
3390   1E19 00 00 00 00 
3390   1E1D 00 00 00 00 
3390   1E21 00 00 00 00 
3390   1E25 00 00 00 00 
3390   1E29 00 00 00 00 
3390   1E2D 00 00 00 00 
3390   1E31 00 00 00 00 
3390   1E35 00 00 00 00 
3390   1E39 00 00 00 00 
3391   1E3D             _currState_data: 
3392   1E3D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3392   1E41 20 20 20 20 
3392   1E45 20 20 20 20 
3392   1E49 20 20 20 20 
3392   1E4D 20 20 20 20 
3392   1E51 20 20 20 20 
3392   1E55 20 20 20 20 
3392   1E59 20 20 
3393   1E5B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3393   1E5F 20 20 20 20 
3393   1E63 20 20 20 20 
3393   1E67 20 20 20 20 
3393   1E6B 20 20 20 20 
3393   1E6F 20 20 20 20 
3393   1E73 20 20 20 20 
3393   1E77 20 20 
3394   1E79 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3394   1E7D 20 20 20 20 
3394   1E81 20 20 20 20 
3394   1E85 20 20 20 20 
3394   1E89 20 20 20 20 
3394   1E8D 20 20 20 20 
3394   1E91 20 20 20 20 
3394   1E95 20 20 
3395   1E97 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3395   1E9B 20 20 20 20 
3395   1E9F 20 20 20 20 
3395   1EA3 20 20 20 20 
3395   1EA7 20 20 20 20 
3395   1EAB 20 20 20 20 
3395   1EAF 20 20 20 20 
3395   1EB3 20 20 
3396   1EB5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3396   1EB9 20 20 20 20 
3396   1EBD 20 20 20 20 
3396   1EC1 20 20 20 20 
3396   1EC5 20 20 20 20 
3396   1EC9 20 20 20 20 
3396   1ECD 20 20 20 40 
3396   1ED1 20 20 
3397   1ED3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3397   1ED7 20 20 20 20 
3397   1EDB 20 20 20 20 
3397   1EDF 20 20 20 20 
3397   1EE3 20 20 20 20 
3397   1EE7 20 20 20 20 
3397   1EEB 20 20 20 20 
3397   1EEF 20 20 
3398   1EF1 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3398   1EF5 20 40 20 40 
3398   1EF9 20 20 20 20 
3398   1EFD 20 20 20 20 
3398   1F01 20 20 20 20 
3398   1F05 20 20 20 20 
3398   1F09 20 20 20 20 
3398   1F0D 20 20 
3399   1F0F 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
3399   1F13 20 40 40 20 
3399   1F17 20 20 20 20 
3399   1F1B 20 40 40 20 
3399   1F1F 20 20 20 20 
3399   1F23 20 20 20 20 
3399   1F27 20 20 20 40 
3399   1F2B 40 20 
3400   1F2D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3400   1F31 20 20 20 20 
3400   1F35 20 20 20 20 
3400   1F39 20 20 40 20 
3400   1F3D 20 20 40 20 
3400   1F41 20 20 20 40 
3400   1F45 40 20 20 20 
3400   1F49 20 20 
3401   1F4B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
3401   1F4F 20 20 20 40 
3401   1F53 40 20 20 20 
3401   1F57 20 40 40 20 
3401   1F5B 20 20 20 20 
3401   1F5F 20 20 20 40 
3401   1F63 20 20 20 20 
3401   1F67 20 40 
3402   1F69 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3402   1F6D 40 20 20 20 
3402   1F71 20 20 20 20 
3402   1F75 20 20 20 20 
3402   1F79 20 20 20 20 
3402   1F7D 20 20 20 40 
3402   1F81 40 20 20 20 
3402   1F85 20 20 
3403   1F87 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3403   1F8B 20 20 20 40 
3403   1F8F 20 40 40 20 
3403   1F93 20 20 20 40 
3403   1F97 20 40 20 20 
3403   1F9B 20 20 20 20 
3403   1F9F 20 20 20 20 
3403   1FA3 20 20 
3404   1FA5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3404   1FA9 20 20 20 20 
3404   1FAD 20 20 20 20 
3404   1FB1 20 40 20 20 
3404   1FB5 20 20 20 40 
3404   1FB9 20 20 20 20 
3404   1FBD 20 20 20 40 
3404   1FC1 20 20 
3405   1FC3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
3405   1FC7 20 20 20 20 
3405   1FCB 20 20 20 20 
3405   1FCF 20 20 20 20 
3405   1FD3 20 20 20 20 
3405   1FD7 20 20 20 20 
3405   1FDB 40 20 20 20 
3405   1FDF 40 20 
3406   1FE1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3406   1FE5 20 20 20 20 
3406   1FE9 20 20 20 20 
3406   1FED 20 20 20 20 
3406   1FF1 20 20 20 20 
3406   1FF5 20 20 20 20 
3406   1FF9 20 20 20 20 
3406   1FFD 20 20 
3407   1FFF 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3407   2003 20 40 40 20 
3407   2007 20 20 20 20 
3407   200B 20 20 20 20 
3407   200F 20 20 20 20 
3407   2013 20 20 20 20 
3407   2017 20 20 20 20 
3407   201B 20 20 
3408   201D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3408   2021 20 20 20 20 
3408   2025 20 20 20 20 
3408   2029 20 20 20 20 
3408   202D 20 20 20 20 
3408   2031 20 20 20 20 
3408   2035 20 20 20 20 
3408   2039 20 20 
3409   203B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3409   203F 20 20 20 20 
3409   2043 20 20 20 20 
3409   2047 20 20 20 20 
3409   204B 20 20 20 20 
3409   204F 20 20 20 20 
3409   2053 20 20 20 20 
3409   2057 20 20 
3410   2059 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3410   205D 20 20 20 20 
3410   2061 20 20 20 20 
3410   2065 20 20 20 20 
3410   2069 20 20 20 20 
3410   206D 20 20 20 20 
3410   2071 20 20 20 20 
3410   2075 20 20 
3411   2077 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3411   207B 20 20 20 20 
3411   207F 20 20 20 20 
3411   2083 20 20 20 20 
3411   2087 20 20 20 20 
3411   208B 20 20 20 20 
3411   208F 20 20 20 20 
3411   2093 20 20 
3412   2095 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3412   2099 20 20 20 20 
3412   209D 20 20 20 20 
3412   20A1 20 20 20 20 
3412   20A5 20 20 20 20 
3412   20A9 20 20 20 20 
3412   20AD 20 20 20 20 
3412   20B1 20 20 
3413   20B3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3413   20B7 20 20 20 20 
3413   20BB 20 20 20 20 
3413   20BF 20 20 20 20 
3413   20C3 20 20 20 20 
3413   20C7 20 20 20 20 
3413   20CB 20 20 20 20 
3413   20CF 20 20 
3414   20D1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3414   20D5 20 20 20 20 
3414   20D9 20 20 20 20 
3414   20DD 20 20 20 20 
3414   20E1 20 20 20 20 
3414   20E5 20 20 20 20 
3414   20E9 20 20 20 20 
3414   20ED 20 20 
3415   20EF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3415   20F3 20 20 20 20 
3415   20F7 20 20 20 20 
3415   20FB 20 20 20 20 
3415   20FF 20 20 20 20 
3415   2103 20 20 20 20 
3415   2107 20 20 20 20 
3415   210B 20 20 
3416   210D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3416   2111 20 20 20 20 
3416   2115 20 20 20 20 
3416   2119 20 20 20 20 
3416   211D 20 20 20 20 
3416   2121 20 20 20 20 
3416   2125 20 20 20 20 
3416   2129 20 20 
3417   212B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3417   212F 20 20 20 20 
3417   2133 20 20 20 20 
3417   2137 20 20 20 20 
3417   213B 20 20 20 20 
3417   213F 20 20 20 20 
3417   2143 20 20 20 20 
3417   2147 20 20 
3418   2149 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3418   214D 20 20 20 20 
3418   2151 20 20 20 20 
3418   2155 20 20 20 20 
3418   2159 20 20 20 20 
3419   215D 00 00 00 00 .fill 400, 0
3419   2161 00 00 00 00 
3419   2165 00 00 00 00 
3419   2169 00 00 00 00 
3419   216D 00 00 00 00 
3419   2171 00 00 00 00 
3419   2175 00 00 00 00 
3419   2179 00 00 00 00 
3419   217D 00 00 00 00 
3419   2181 00 00 00 00 
3419   2185 00 00 00 00 
3419   2189 00 00 00 00 
3419   218D 00 00 00 00 
3419   2191 00 00 00 00 
3419   2195 00 00 00 00 
3419   2199 00 00 00 00 
3419   219D 00 00 00 00 
3419   21A1 00 00 00 00 
3419   21A5 00 00 00 00 
3419   21A9 00 00 00 00 
3419   21AD 00 00 00 00 
3419   21B1 00 00 00 00 
3419   21B5 00 00 00 00 
3419   21B9 00 00 00 00 
3419   21BD 00 00 00 00 
3419   21C1 00 00 00 00 
3419   21C5 00 00 00 00 
3419   21C9 00 00 00 00 
3419   21CD 00 00 00 00 
3419   21D1 00 00 00 00 
3419   21D5 00 00 00 00 
3419   21D9 00 00 00 00 
3419   21DD 00 00 00 00 
3419   21E1 00 00 00 00 
3419   21E5 00 00 00 00 
3419   21E9 00 00 00 00 
3419   21ED 00 00 00 00 
3419   21F1 00 00 00 00 
3419   21F5 00 00 00 00 
3419   21F9 00 00 00 00 
3419   21FD 00 00 00 00 
3419   2201 00 00 00 00 
3419   2205 00 00 00 00 
3419   2209 00 00 00 00 
3419   220D 00 00 00 00 
3419   2211 00 00 00 00 
3419   2215 00 00 00 00 
3419   2219 00 00 00 00 
3419   221D 00 00 00 00 
3419   2221 00 00 00 00 
3419   2225 00 00 00 00 
3419   2229 00 00 00 00 
3419   222D 00 00 00 00 
3419   2231 00 00 00 00 
3419   2235 00 00 00 00 
3419   2239 00 00 00 00 
3419   223D 00 00 00 00 
3419   2241 00 00 00 00 
3419   2245 00 00 00 00 
3419   2249 00 00 00 00 
3419   224D 00 00 00 00 
3419   2251 00 00 00 00 
3419   2255 00 00 00 00 
3419   2259 00 00 00 00 
3419   225D 00 00 00 00 
3419   2261 00 00 00 00 
3419   2265 00 00 00 00 
3419   2269 00 00 00 00 
3419   226D 00 00 00 00 
3419   2271 00 00 00 00 
3419   2275 00 00 00 00 
3419   2279 00 00 00 00 
3419   227D 00 00 00 00 
3419   2281 00 00 00 00 
3419   2285 00 00 00 00 
3419   2289 00 00 00 00 
3419   228D 00 00 00 00 
3419   2291 00 00 00 00 
3419   2295 00 00 00 00 
3419   2299 00 00 00 00 
3419   229D 00 00 00 00 
3419   22A1 00 00 00 00 
3419   22A5 00 00 00 00 
3419   22A9 00 00 00 00 
3419   22AD 00 00 00 00 
3419   22B1 00 00 00 00 
3419   22B5 00 00 00 00 
3419   22B9 00 00 00 00 
3419   22BD 00 00 00 00 
3419   22C1 00 00 00 00 
3419   22C5 00 00 00 00 
3419   22C9 00 00 00 00 
3419   22CD 00 00 00 00 
3419   22D1 00 00 00 00 
3419   22D5 00 00 00 00 
3419   22D9 00 00 00 00 
3419   22DD 00 00 00 00 
3419   22E1 00 00 00 00 
3419   22E5 00 00 00 00 
3419   22E9 00 00 00 00 
3420   22ED 0A 0D 50 72 __s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
3420   22F1 65 73 73 20 
3420   22F5 43 54 52 4C 
3420   22F9 2B 43 20 74 
3420   22FD 6F 20 71 75 
3420   2301 69 74 2E 0A 
3420   2305 0D 00 
3421   2307 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
3421   230B 70 65 63 74 
3421   230F 65 64 20 66 
3421   2313 6F 72 6D 61 
3421   2317 74 20 69 6E 
3421   231B 20 70 72 69 
3421   231F 6E 74 66 2E 
3421   2323 00 
3422   2324 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
3422   2328 72 3A 20 55 
3422   232C 6E 6B 6E 6F 
3422   2330 77 6E 20 61 
3422   2334 72 67 75 6D 
3422   2338 65 6E 74 20 
3422   233C 74 79 70 65 
3422   2340 2E 0A 00 
3423   2343 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
3423   2347 1B 5B 48 00 
3424   234B 40 20 00    __s4: .db "@ ", 0
3425   234E 2E 20 00    __s5: .db ". ", 0
3426   2351             
3427   2351 53 23       _heap_top: .dw _heap
3428   2353 00          _heap: .db 0
3429   2354             ; --- END DATA BLOCK
3430   2354             
3431   2354             .end
tasm: Number of errors = 0
