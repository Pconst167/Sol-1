0001   0000             ; --- FILENAME: programs/life.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int i, j; 
0011   0408 52 02 00      sub sp, 2
0012   040B 52 02 00      sub sp, 2
0013   040E             ; int n; 
0014   040E 52 02 00      sub sp, 2
0015   0411             ; for(i = 0; i < 30      ; i++){ 
0016   0411             _for1_init:
0017   0411 FA FF FF      lea d, [bp + -1] ; $i
0018   0414 DA            push d
0019   0415 FD 2E 00 00   mov32 cb, $00000000
0019   0419 00 00 
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             _for1_cond:
0023   041E FA FF FF      lea d, [bp + -1] ; $i
0024   0421 2A            mov b, [d]
0025   0422 38 00 00      mov c, 0
0026   0425             ; --- START RELATIONAL
0027   0425 D7            push a
0028   0426 11            mov a, b
0029   0427 FD 2E 1E 00   mov32 cb, $0000001e
0029   042B 00 00 
0030   042D B0            cmp a, b
0031   042E FD 73         slt ; < (signed)
0032   0430 E4            pop a
0033   0431             ; --- END RELATIONAL
0034   0431 C0 00 00      cmp b, 0
0035   0434 C6 C5 04      je _for1_exit
0036   0437             _for1_block:
0037   0437             ; for(j = 0; j < 40     ; j++){ 
0038   0437             _for2_init:
0039   0437 FA FD FF      lea d, [bp + -3] ; $j
0040   043A DA            push d
0041   043B FD 2E 00 00   mov32 cb, $00000000
0041   043F 00 00 
0042   0441 E7            pop d
0043   0442 FD 43         mov [d], b
0044   0444             _for2_cond:
0045   0444 FA FD FF      lea d, [bp + -3] ; $j
0046   0447 2A            mov b, [d]
0047   0448 38 00 00      mov c, 0
0048   044B             ; --- START RELATIONAL
0049   044B D7            push a
0050   044C 11            mov a, b
0051   044D FD 2E 28 00   mov32 cb, $00000028
0051   0451 00 00 
0052   0453 B0            cmp a, b
0053   0454 FD 73         slt ; < (signed)
0054   0456 E4            pop a
0055   0457             ; --- END RELATIONAL
0056   0457 C0 00 00      cmp b, 0
0057   045A C6 B2 04      je _for2_exit
0058   045D             _for2_block:
0059   045D             ; nextState[i][j] = currState[i][j]; 
0060   045D 3B 10 14      mov d, _nextState_data ; $nextState
0061   0460 D7            push a
0062   0461 DA            push d
0063   0462 FA FF FF      lea d, [bp + -1] ; $i
0064   0465 2A            mov b, [d]
0065   0466 38 00 00      mov c, 0
0066   0469 E7            pop d
0067   046A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0068   046E DA            push d
0069   046F FA FD FF      lea d, [bp + -3] ; $j
0070   0472 2A            mov b, [d]
0071   0473 38 00 00      mov c, 0
0072   0476 E7            pop d
0073   0477 5A            add d, b
0074   0478 E4            pop a
0075   0479 DA            push d
0076   047A 3B C0 18      mov d, _currState_data ; $currState
0077   047D D7            push a
0078   047E DA            push d
0079   047F FA FF FF      lea d, [bp + -1] ; $i
0080   0482 2A            mov b, [d]
0081   0483 38 00 00      mov c, 0
0082   0486 E7            pop d
0083   0487 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0084   048B DA            push d
0085   048C FA FD FF      lea d, [bp + -3] ; $j
0086   048F 2A            mov b, [d]
0087   0490 38 00 00      mov c, 0
0088   0493 E7            pop d
0089   0494 5A            add d, b
0090   0495 E4            pop a
0091   0496 32            mov bl, [d]
0092   0497 A7 00         mov bh, 0
0093   0499 38 00 00      mov c, 0
0094   049C E7            pop d
0095   049D FD 3E         mov [d], bl
0096   049F             _for2_update:
0097   049F FA FD FF      lea d, [bp + -3] ; $j
0098   04A2 2A            mov b, [d]
0099   04A3 38 00 00      mov c, 0
0100   04A6 11            mov a, b
0101   04A7 FD 77         inc b
0102   04A9 FA FD FF      lea d, [bp + -3] ; $j
0103   04AC FD 43         mov [d], b
0104   04AE 27            mov b, a
0105   04AF 0A 44 04      jmp _for2_cond
0106   04B2             _for2_exit:
0107   04B2             _for1_update:
0108   04B2 FA FF FF      lea d, [bp + -1] ; $i
0109   04B5 2A            mov b, [d]
0110   04B6 38 00 00      mov c, 0
0111   04B9 11            mov a, b
0112   04BA FD 77         inc b
0113   04BC FA FF FF      lea d, [bp + -1] ; $i
0114   04BF FD 43         mov [d], b
0115   04C1 27            mov b, a
0116   04C2 0A 1E 04      jmp _for1_cond
0117   04C5             _for1_exit:
0118   04C5             ; for(;;){ 
0119   04C5             _for3_init:
0120   04C5             _for3_cond:
0121   04C5             _for3_block:
0122   04C5             ; for(i = 1; i < 30      +-1; i++){ 
0123   04C5             _for4_init:
0124   04C5 FA FF FF      lea d, [bp + -1] ; $i
0125   04C8 DA            push d
0126   04C9 FD 2E 01 00   mov32 cb, $00000001
0126   04CD 00 00 
0127   04CF E7            pop d
0128   04D0 FD 43         mov [d], b
0129   04D2             _for4_cond:
0130   04D2 FA FF FF      lea d, [bp + -1] ; $i
0131   04D5 2A            mov b, [d]
0132   04D6 38 00 00      mov c, 0
0133   04D9             ; --- START RELATIONAL
0134   04D9 D7            push a
0135   04DA 11            mov a, b
0136   04DB FD 2E 1E 00   mov32 cb, $0000001e
0136   04DF 00 00 
0137   04E1             ; --- START TERMS
0138   04E1 D7            push a
0139   04E2 11            mov a, b
0140   04E3 FD 2E 01 00   mov32 cb, $00000001
0140   04E7 00 00 
0141   04E9 FD 97         neg b
0142   04EB 56            add b, a
0143   04EC E4            pop a
0144   04ED             ; --- END TERMS
0145   04ED B0            cmp a, b
0146   04EE FD 73         slt ; < (signed)
0147   04F0 E4            pop a
0148   04F1             ; --- END RELATIONAL
0149   04F1 C0 00 00      cmp b, 0
0150   04F4 C6 0C 06      je _for4_exit
0151   04F7             _for4_block:
0152   04F7             ; for(j = 1; j < 40     +-1; j++){ 
0153   04F7             _for5_init:
0154   04F7 FA FD FF      lea d, [bp + -3] ; $j
0155   04FA DA            push d
0156   04FB FD 2E 01 00   mov32 cb, $00000001
0156   04FF 00 00 
0157   0501 E7            pop d
0158   0502 FD 43         mov [d], b
0159   0504             _for5_cond:
0160   0504 FA FD FF      lea d, [bp + -3] ; $j
0161   0507 2A            mov b, [d]
0162   0508 38 00 00      mov c, 0
0163   050B             ; --- START RELATIONAL
0164   050B D7            push a
0165   050C 11            mov a, b
0166   050D FD 2E 28 00   mov32 cb, $00000028
0166   0511 00 00 
0167   0513             ; --- START TERMS
0168   0513 D7            push a
0169   0514 11            mov a, b
0170   0515 FD 2E 01 00   mov32 cb, $00000001
0170   0519 00 00 
0171   051B FD 97         neg b
0172   051D 56            add b, a
0173   051E E4            pop a
0174   051F             ; --- END TERMS
0175   051F B0            cmp a, b
0176   0520 FD 73         slt ; < (signed)
0177   0522 E4            pop a
0178   0523             ; --- END RELATIONAL
0179   0523 C0 00 00      cmp b, 0
0180   0526 C6 F9 05      je _for5_exit
0181   0529             _for5_block:
0182   0529             ; n = neighbours(i, j); 
0183   0529 FA FB FF      lea d, [bp + -5] ; $n
0184   052C DA            push d
0185   052D             ; --- START FUNCTION CALL
0186   052D FA FD FF      lea d, [bp + -3] ; $j
0187   0530 2A            mov b, [d]
0188   0531 38 00 00      mov c, 0
0189   0534 FD AB         swp b
0190   0536 D8            push b
0191   0537 FA FF FF      lea d, [bp + -1] ; $i
0192   053A 2A            mov b, [d]
0193   053B 38 00 00      mov c, 0
0194   053E FD AB         swp b
0195   0540 D8            push b
0196   0541 07 21 08      call neighbours
0197   0544 51 04 00      add sp, 4
0198   0547             ; --- END FUNCTION CALL
0199   0547 E7            pop d
0200   0548 FD 43         mov [d], b
0201   054A             ; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0202   054A             _if6_cond:
0203   054A FA FB FF      lea d, [bp + -5] ; $n
0204   054D 2A            mov b, [d]
0205   054E 38 00 00      mov c, 0
0206   0551             ; --- START RELATIONAL
0207   0551 D7            push a
0208   0552 11            mov a, b
0209   0553 FD 2E 02 00   mov32 cb, $00000002
0209   0557 00 00 
0210   0559 B0            cmp a, b
0211   055A FD 73         slt ; < (signed)
0212   055C E4            pop a
0213   055D             ; --- END RELATIONAL
0214   055D             ; --- START LOGICAL OR
0215   055D D7            push a
0216   055E 11            mov a, b
0217   055F FA FB FF      lea d, [bp + -5] ; $n
0218   0562 2A            mov b, [d]
0219   0563 38 00 00      mov c, 0
0220   0566             ; --- START RELATIONAL
0221   0566 D7            push a
0222   0567 11            mov a, b
0223   0568 FD 2E 03 00   mov32 cb, $00000003
0223   056C 00 00 
0224   056E B0            cmp a, b
0225   056F FD 7F         sgt ; >
0226   0571 E4            pop a
0227   0572             ; --- END RELATIONAL
0228   0572 FD A8         sor a, b ; ||
0229   0574 E4            pop a
0230   0575             ; --- END LOGICAL OR
0231   0575 C0 00 00      cmp b, 0
0232   0578 C6 A4 05      je _if6_else
0233   057B             _if6_TRUE:
0234   057B             ; nextState[i][j] = ' '; 
0235   057B 3B 10 14      mov d, _nextState_data ; $nextState
0236   057E D7            push a
0237   057F DA            push d
0238   0580 FA FF FF      lea d, [bp + -1] ; $i
0239   0583 2A            mov b, [d]
0240   0584 38 00 00      mov c, 0
0241   0587 E7            pop d
0242   0588 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0243   058C DA            push d
0244   058D FA FD FF      lea d, [bp + -3] ; $j
0245   0590 2A            mov b, [d]
0246   0591 38 00 00      mov c, 0
0247   0594 E7            pop d
0248   0595 5A            add d, b
0249   0596 E4            pop a
0250   0597 DA            push d
0251   0598 FD 2E 20 00   mov32 cb, $00000020
0251   059C 00 00 
0252   059E E7            pop d
0253   059F FD 3E         mov [d], bl
0254   05A1 0A E6 05      jmp _if6_exit
0255   05A4             _if6_else:
0256   05A4             ; if(n == 3) nextState[i][j] = '@'; 
0257   05A4             _if7_cond:
0258   05A4 FA FB FF      lea d, [bp + -5] ; $n
0259   05A7 2A            mov b, [d]
0260   05A8 38 00 00      mov c, 0
0261   05AB             ; --- START RELATIONAL
0262   05AB D7            push a
0263   05AC 11            mov a, b
0264   05AD FD 2E 03 00   mov32 cb, $00000003
0264   05B1 00 00 
0265   05B3 B0            cmp a, b
0266   05B4 FD 71         seq ; ==
0267   05B6 E4            pop a
0268   05B7             ; --- END RELATIONAL
0269   05B7 C0 00 00      cmp b, 0
0270   05BA C6 E6 05      je _if7_exit
0271   05BD             _if7_TRUE:
0272   05BD             ; nextState[i][j] = '@'; 
0273   05BD 3B 10 14      mov d, _nextState_data ; $nextState
0274   05C0 D7            push a
0275   05C1 DA            push d
0276   05C2 FA FF FF      lea d, [bp + -1] ; $i
0277   05C5 2A            mov b, [d]
0278   05C6 38 00 00      mov c, 0
0279   05C9 E7            pop d
0280   05CA FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0281   05CE DA            push d
0282   05CF FA FD FF      lea d, [bp + -3] ; $j
0283   05D2 2A            mov b, [d]
0284   05D3 38 00 00      mov c, 0
0285   05D6 E7            pop d
0286   05D7 5A            add d, b
0287   05D8 E4            pop a
0288   05D9 DA            push d
0289   05DA FD 2E 40 00   mov32 cb, $00000040
0289   05DE 00 00 
0290   05E0 E7            pop d
0291   05E1 FD 3E         mov [d], bl
0292   05E3 0A E6 05      jmp _if7_exit
0293   05E6             _if7_exit:
0294   05E6             _if6_exit:
0295   05E6             _for5_update:
0296   05E6 FA FD FF      lea d, [bp + -3] ; $j
0297   05E9 2A            mov b, [d]
0298   05EA 38 00 00      mov c, 0
0299   05ED 11            mov a, b
0300   05EE FD 77         inc b
0301   05F0 FA FD FF      lea d, [bp + -3] ; $j
0302   05F3 FD 43         mov [d], b
0303   05F5 27            mov b, a
0304   05F6 0A 04 05      jmp _for5_cond
0305   05F9             _for5_exit:
0306   05F9             _for4_update:
0307   05F9 FA FF FF      lea d, [bp + -1] ; $i
0308   05FC 2A            mov b, [d]
0309   05FD 38 00 00      mov c, 0
0310   0600 11            mov a, b
0311   0601 FD 77         inc b
0312   0603 FA FF FF      lea d, [bp + -1] ; $i
0313   0606 FD 43         mov [d], b
0314   0608 27            mov b, a
0315   0609 0A D2 04      jmp _for4_cond
0316   060C             _for4_exit:
0317   060C             ; for(i = 1; i < 30      +-1; i++){ 
0318   060C             _for8_init:
0319   060C FA FF FF      lea d, [bp + -1] ; $i
0320   060F DA            push d
0321   0610 FD 2E 01 00   mov32 cb, $00000001
0321   0614 00 00 
0322   0616 E7            pop d
0323   0617 FD 43         mov [d], b
0324   0619             _for8_cond:
0325   0619 FA FF FF      lea d, [bp + -1] ; $i
0326   061C 2A            mov b, [d]
0327   061D 38 00 00      mov c, 0
0328   0620             ; --- START RELATIONAL
0329   0620 D7            push a
0330   0621 11            mov a, b
0331   0622 FD 2E 1E 00   mov32 cb, $0000001e
0331   0626 00 00 
0332   0628             ; --- START TERMS
0333   0628 D7            push a
0334   0629 11            mov a, b
0335   062A FD 2E 01 00   mov32 cb, $00000001
0335   062E 00 00 
0336   0630 FD 97         neg b
0337   0632 56            add b, a
0338   0633 E4            pop a
0339   0634             ; --- END TERMS
0340   0634 B0            cmp a, b
0341   0635 FD 73         slt ; < (signed)
0342   0637 E4            pop a
0343   0638             ; --- END RELATIONAL
0344   0638 C0 00 00      cmp b, 0
0345   063B C6 D8 06      je _for8_exit
0346   063E             _for8_block:
0347   063E             ; for(j = 1; j < 40     +-1; j++){ 
0348   063E             _for9_init:
0349   063E FA FD FF      lea d, [bp + -3] ; $j
0350   0641 DA            push d
0351   0642 FD 2E 01 00   mov32 cb, $00000001
0351   0646 00 00 
0352   0648 E7            pop d
0353   0649 FD 43         mov [d], b
0354   064B             _for9_cond:
0355   064B FA FD FF      lea d, [bp + -3] ; $j
0356   064E 2A            mov b, [d]
0357   064F 38 00 00      mov c, 0
0358   0652             ; --- START RELATIONAL
0359   0652 D7            push a
0360   0653 11            mov a, b
0361   0654 FD 2E 28 00   mov32 cb, $00000028
0361   0658 00 00 
0362   065A             ; --- START TERMS
0363   065A D7            push a
0364   065B 11            mov a, b
0365   065C FD 2E 01 00   mov32 cb, $00000001
0365   0660 00 00 
0366   0662 FD 97         neg b
0367   0664 56            add b, a
0368   0665 E4            pop a
0369   0666             ; --- END TERMS
0370   0666 B0            cmp a, b
0371   0667 FD 73         slt ; < (signed)
0372   0669 E4            pop a
0373   066A             ; --- END RELATIONAL
0374   066A C0 00 00      cmp b, 0
0375   066D C6 C5 06      je _for9_exit
0376   0670             _for9_block:
0377   0670             ; currState[i][j] = nextState[i][j]; 
0378   0670 3B C0 18      mov d, _currState_data ; $currState
0379   0673 D7            push a
0380   0674 DA            push d
0381   0675 FA FF FF      lea d, [bp + -1] ; $i
0382   0678 2A            mov b, [d]
0383   0679 38 00 00      mov c, 0
0384   067C E7            pop d
0385   067D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0386   0681 DA            push d
0387   0682 FA FD FF      lea d, [bp + -3] ; $j
0388   0685 2A            mov b, [d]
0389   0686 38 00 00      mov c, 0
0390   0689 E7            pop d
0391   068A 5A            add d, b
0392   068B E4            pop a
0393   068C DA            push d
0394   068D 3B 10 14      mov d, _nextState_data ; $nextState
0395   0690 D7            push a
0396   0691 DA            push d
0397   0692 FA FF FF      lea d, [bp + -1] ; $i
0398   0695 2A            mov b, [d]
0399   0696 38 00 00      mov c, 0
0400   0699 E7            pop d
0401   069A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0402   069E DA            push d
0403   069F FA FD FF      lea d, [bp + -3] ; $j
0404   06A2 2A            mov b, [d]
0405   06A3 38 00 00      mov c, 0
0406   06A6 E7            pop d
0407   06A7 5A            add d, b
0408   06A8 E4            pop a
0409   06A9 32            mov bl, [d]
0410   06AA A7 00         mov bh, 0
0411   06AC 38 00 00      mov c, 0
0412   06AF E7            pop d
0413   06B0 FD 3E         mov [d], bl
0414   06B2             _for9_update:
0415   06B2 FA FD FF      lea d, [bp + -3] ; $j
0416   06B5 2A            mov b, [d]
0417   06B6 38 00 00      mov c, 0
0418   06B9 11            mov a, b
0419   06BA FD 77         inc b
0420   06BC FA FD FF      lea d, [bp + -3] ; $j
0421   06BF FD 43         mov [d], b
0422   06C1 27            mov b, a
0423   06C2 0A 4B 06      jmp _for9_cond
0424   06C5             _for9_exit:
0425   06C5             _for8_update:
0426   06C5 FA FF FF      lea d, [bp + -1] ; $i
0427   06C8 2A            mov b, [d]
0428   06C9 38 00 00      mov c, 0
0429   06CC 11            mov a, b
0430   06CD FD 77         inc b
0431   06CF FA FF FF      lea d, [bp + -1] ; $i
0432   06D2 FD 43         mov [d], b
0433   06D4 27            mov b, a
0434   06D5 0A 19 06      jmp _for8_cond
0435   06D8             _for8_exit:
0436   06D8             ; printf(clear); 
0437   06D8             ; --- START FUNCTION CALL
0438   06D8 3B 04 14      mov d, _clear_data ; $clear
0439   06DB 2D            mov b, d
0440   06DC 38 00 00      mov c, 0
0441   06DF FD AB         swp b
0442   06E1 D8            push b
0443   06E2 07 F9 0A      call printf
0444   06E5 51 02 00      add sp, 2
0445   06E8             ; --- END FUNCTION CALL
0446   06E8             ; show(); 
0447   06E8             ; --- START FUNCTION CALL
0448   06E8 07 FC 06      call show
0449   06EB             ; puts("\n\rPress CTRL+C to quit.\n\r"); 
0450   06EB             ; --- START FUNCTION CALL
0451   06EB 26 71 1D      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0452   06EE FD AB         swp b
0453   06F0 D8            push b
0454   06F1 07 E6 13      call puts
0455   06F4 51 02 00      add sp, 2
0456   06F7             ; --- END FUNCTION CALL
0457   06F7             _for3_update:
0458   06F7 0A C5 04      jmp _for3_cond
0459   06FA             _for3_exit:
0460   06FA 05 0B         syscall sys_terminate_proc
0461   06FC             
0462   06FC             show:
0463   06FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0464   06FF             ; int i, j; 
0465   06FF 52 02 00      sub sp, 2
0466   0702 52 02 00      sub sp, 2
0467   0705             ; for(i = 0; i < 30      ; i++){ 
0468   0705             _for10_init:
0469   0705 FA FF FF      lea d, [bp + -1] ; $i
0470   0708 DA            push d
0471   0709 FD 2E 00 00   mov32 cb, $00000000
0471   070D 00 00 
0472   070F E7            pop d
0473   0710 FD 43         mov [d], b
0474   0712             _for10_cond:
0475   0712 FA FF FF      lea d, [bp + -1] ; $i
0476   0715 2A            mov b, [d]
0477   0716 38 00 00      mov c, 0
0478   0719             ; --- START RELATIONAL
0479   0719 D7            push a
0480   071A 11            mov a, b
0481   071B FD 2E 1E 00   mov32 cb, $0000001e
0481   071F 00 00 
0482   0721 B0            cmp a, b
0483   0722 FD 73         slt ; < (signed)
0484   0724 E4            pop a
0485   0725             ; --- END RELATIONAL
0486   0725 C0 00 00      cmp b, 0
0487   0728 C6 D3 07      je _for10_exit
0488   072B             _for10_block:
0489   072B             ; for(j = 0; j < 40     ; j++){ 
0490   072B             _for11_init:
0491   072B FA FD FF      lea d, [bp + -3] ; $j
0492   072E DA            push d
0493   072F FD 2E 00 00   mov32 cb, $00000000
0493   0733 00 00 
0494   0735 E7            pop d
0495   0736 FD 43         mov [d], b
0496   0738             _for11_cond:
0497   0738 FA FD FF      lea d, [bp + -3] ; $j
0498   073B 2A            mov b, [d]
0499   073C 38 00 00      mov c, 0
0500   073F             ; --- START RELATIONAL
0501   073F D7            push a
0502   0740 11            mov a, b
0503   0741 FD 2E 28 00   mov32 cb, $00000028
0503   0745 00 00 
0504   0747 B0            cmp a, b
0505   0748 FD 73         slt ; < (signed)
0506   074A E4            pop a
0507   074B             ; --- END RELATIONAL
0508   074B C0 00 00      cmp b, 0
0509   074E C6 B3 07      je _for11_exit
0510   0751             _for11_block:
0511   0751             ; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
0512   0751             _ternary12_cond:
0513   0751 3B C0 18      mov d, _currState_data ; $currState
0514   0754 D7            push a
0515   0755 DA            push d
0516   0756 FA FF FF      lea d, [bp + -1] ; $i
0517   0759 2A            mov b, [d]
0518   075A 38 00 00      mov c, 0
0519   075D E7            pop d
0520   075E FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0521   0762 DA            push d
0522   0763 FA FD FF      lea d, [bp + -3] ; $j
0523   0766 2A            mov b, [d]
0524   0767 38 00 00      mov c, 0
0525   076A E7            pop d
0526   076B 5A            add d, b
0527   076C E4            pop a
0528   076D 32            mov bl, [d]
0529   076E A7 00         mov bh, 0
0530   0770 38 00 00      mov c, 0
0531   0773             ; --- START RELATIONAL
0532   0773 D7            push a
0533   0774 11            mov a, b
0534   0775 FD 2E 40 00   mov32 cb, $00000040
0534   0779 00 00 
0535   077B B0            cmp a, b
0536   077C FD 71         seq ; ==
0537   077E E4            pop a
0538   077F             ; --- END RELATIONAL
0539   077F C0 00 00      cmp b, 0
0540   0782 C6 94 07      je _ternary12_FALSE
0541   0785             _ternary12_TRUE:
0542   0785             ; --- START FUNCTION CALL
0543   0785 26 8B 1D      mov b, _s1 ; "@ "
0544   0788 FD AB         swp b
0545   078A D8            push b
0546   078B 07 F9 0A      call printf
0547   078E 51 02 00      add sp, 2
0548   0791             ; --- END FUNCTION CALL
0549   0791 0A A0 07      jmp _ternary12_exit
0550   0794             _ternary12_FALSE:
0551   0794             ; --- START FUNCTION CALL
0552   0794 26 8E 1D      mov b, _s2 ; ". "
0553   0797 FD AB         swp b
0554   0799 D8            push b
0555   079A 07 F9 0A      call printf
0556   079D 51 02 00      add sp, 2
0557   07A0             ; --- END FUNCTION CALL
0558   07A0             _ternary12_exit:
0559   07A0             _for11_update:
0560   07A0 FA FD FF      lea d, [bp + -3] ; $j
0561   07A3 2A            mov b, [d]
0562   07A4 38 00 00      mov c, 0
0563   07A7 11            mov a, b
0564   07A8 FD 77         inc b
0565   07AA FA FD FF      lea d, [bp + -3] ; $j
0566   07AD FD 43         mov [d], b
0567   07AF 27            mov b, a
0568   07B0 0A 38 07      jmp _for11_cond
0569   07B3             _for11_exit:
0570   07B3             ; putchar(10); 
0571   07B3             ; --- START FUNCTION CALL
0572   07B3 FD 2E 0A 00   mov32 cb, $0000000a
0572   07B7 00 00 
0573   07B9 DD            push bl
0574   07BA 07 73 0F      call putchar
0575   07BD 51 01 00      add sp, 1
0576   07C0             ; --- END FUNCTION CALL
0577   07C0             _for10_update:
0578   07C0 FA FF FF      lea d, [bp + -1] ; $i
0579   07C3 2A            mov b, [d]
0580   07C4 38 00 00      mov c, 0
0581   07C7 11            mov a, b
0582   07C8 FD 77         inc b
0583   07CA FA FF FF      lea d, [bp + -1] ; $i
0584   07CD FD 43         mov [d], b
0585   07CF 27            mov b, a
0586   07D0 0A 12 07      jmp _for10_cond
0587   07D3             _for10_exit:
0588   07D3 F9            leave
0589   07D4 09            ret
0590   07D5             
0591   07D5             alive:
0592   07D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0593   07D8             ; if(currState[i][j] == '@') return 1; 
0594   07D8             _if13_cond:
0595   07D8 3B C0 18      mov d, _currState_data ; $currState
0596   07DB D7            push a
0597   07DC DA            push d
0598   07DD FA 05 00      lea d, [bp + 5] ; $i
0599   07E0 2A            mov b, [d]
0600   07E1 38 00 00      mov c, 0
0601   07E4 E7            pop d
0602   07E5 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0603   07E9 DA            push d
0604   07EA FA 07 00      lea d, [bp + 7] ; $j
0605   07ED 2A            mov b, [d]
0606   07EE 38 00 00      mov c, 0
0607   07F1 E7            pop d
0608   07F2 5A            add d, b
0609   07F3 E4            pop a
0610   07F4 32            mov bl, [d]
0611   07F5 A7 00         mov bh, 0
0612   07F7 38 00 00      mov c, 0
0613   07FA             ; --- START RELATIONAL
0614   07FA D7            push a
0615   07FB 11            mov a, b
0616   07FC FD 2E 40 00   mov32 cb, $00000040
0616   0800 00 00 
0617   0802 B0            cmp a, b
0618   0803 FD 71         seq ; ==
0619   0805 E4            pop a
0620   0806             ; --- END RELATIONAL
0621   0806 C0 00 00      cmp b, 0
0622   0809 C6 17 08      je _if13_else
0623   080C             _if13_TRUE:
0624   080C             ; return 1; 
0625   080C FD 2E 01 00   mov32 cb, $00000001
0625   0810 00 00 
0626   0812 F9            leave
0627   0813 09            ret
0628   0814 0A 1F 08      jmp _if13_exit
0629   0817             _if13_else:
0630   0817             ; return 0; 
0631   0817 FD 2E 00 00   mov32 cb, $00000000
0631   081B 00 00 
0632   081D F9            leave
0633   081E 09            ret
0634   081F             _if13_exit:
0635   081F F9            leave
0636   0820 09            ret
0637   0821             
0638   0821             neighbours:
0639   0821 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0640   0824             ; int count; 
0641   0824 52 02 00      sub sp, 2
0642   0827             ; count = 0; 
0643   0827 FA FF FF      lea d, [bp + -1] ; $count
0644   082A DA            push d
0645   082B FD 2E 00 00   mov32 cb, $00000000
0645   082F 00 00 
0646   0831 E7            pop d
0647   0832 FD 43         mov [d], b
0648   0834             ; if(currState[i+-1][j] == '@')			count++; 
0649   0834             _if14_cond:
0650   0834 3B C0 18      mov d, _currState_data ; $currState
0651   0837 D7            push a
0652   0838 DA            push d
0653   0839 FA 05 00      lea d, [bp + 5] ; $i
0654   083C 2A            mov b, [d]
0655   083D 38 00 00      mov c, 0
0656   0840             ; --- START TERMS
0657   0840 D7            push a
0658   0841 11            mov a, b
0659   0842 FD 2E 01 00   mov32 cb, $00000001
0659   0846 00 00 
0660   0848 FD 97         neg b
0661   084A 56            add b, a
0662   084B E4            pop a
0663   084C             ; --- END TERMS
0664   084C E7            pop d
0665   084D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0666   0851 DA            push d
0667   0852 FA 07 00      lea d, [bp + 7] ; $j
0668   0855 2A            mov b, [d]
0669   0856 38 00 00      mov c, 0
0670   0859 E7            pop d
0671   085A 5A            add d, b
0672   085B E4            pop a
0673   085C 32            mov bl, [d]
0674   085D A7 00         mov bh, 0
0675   085F 38 00 00      mov c, 0
0676   0862             ; --- START RELATIONAL
0677   0862 D7            push a
0678   0863 11            mov a, b
0679   0864 FD 2E 40 00   mov32 cb, $00000040
0679   0868 00 00 
0680   086A B0            cmp a, b
0681   086B FD 71         seq ; ==
0682   086D E4            pop a
0683   086E             ; --- END RELATIONAL
0684   086E C0 00 00      cmp b, 0
0685   0871 C6 87 08      je _if14_exit
0686   0874             _if14_TRUE:
0687   0874             ; count++; 
0688   0874 FA FF FF      lea d, [bp + -1] ; $count
0689   0877 2A            mov b, [d]
0690   0878 38 00 00      mov c, 0
0691   087B 11            mov a, b
0692   087C FD 77         inc b
0693   087E FA FF FF      lea d, [bp + -1] ; $count
0694   0881 FD 43         mov [d], b
0695   0883 27            mov b, a
0696   0884 0A 87 08      jmp _if14_exit
0697   0887             _if14_exit:
0698   0887             ; if(currState[i+-1][j+-1] == '@') 	count++; 
0699   0887             _if15_cond:
0700   0887 3B C0 18      mov d, _currState_data ; $currState
0701   088A D7            push a
0702   088B DA            push d
0703   088C FA 05 00      lea d, [bp + 5] ; $i
0704   088F 2A            mov b, [d]
0705   0890 38 00 00      mov c, 0
0706   0893             ; --- START TERMS
0707   0893 D7            push a
0708   0894 11            mov a, b
0709   0895 FD 2E 01 00   mov32 cb, $00000001
0709   0899 00 00 
0710   089B FD 97         neg b
0711   089D 56            add b, a
0712   089E E4            pop a
0713   089F             ; --- END TERMS
0714   089F E7            pop d
0715   08A0 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0716   08A4 DA            push d
0717   08A5 FA 07 00      lea d, [bp + 7] ; $j
0718   08A8 2A            mov b, [d]
0719   08A9 38 00 00      mov c, 0
0720   08AC             ; --- START TERMS
0721   08AC D7            push a
0722   08AD 11            mov a, b
0723   08AE FD 2E 01 00   mov32 cb, $00000001
0723   08B2 00 00 
0724   08B4 FD 97         neg b
0725   08B6 56            add b, a
0726   08B7 E4            pop a
0727   08B8             ; --- END TERMS
0728   08B8 E7            pop d
0729   08B9 5A            add d, b
0730   08BA E4            pop a
0731   08BB 32            mov bl, [d]
0732   08BC A7 00         mov bh, 0
0733   08BE 38 00 00      mov c, 0
0734   08C1             ; --- START RELATIONAL
0735   08C1 D7            push a
0736   08C2 11            mov a, b
0737   08C3 FD 2E 40 00   mov32 cb, $00000040
0737   08C7 00 00 
0738   08C9 B0            cmp a, b
0739   08CA FD 71         seq ; ==
0740   08CC E4            pop a
0741   08CD             ; --- END RELATIONAL
0742   08CD C0 00 00      cmp b, 0
0743   08D0 C6 E6 08      je _if15_exit
0744   08D3             _if15_TRUE:
0745   08D3             ; count++; 
0746   08D3 FA FF FF      lea d, [bp + -1] ; $count
0747   08D6 2A            mov b, [d]
0748   08D7 38 00 00      mov c, 0
0749   08DA 11            mov a, b
0750   08DB FD 77         inc b
0751   08DD FA FF FF      lea d, [bp + -1] ; $count
0752   08E0 FD 43         mov [d], b
0753   08E2 27            mov b, a
0754   08E3 0A E6 08      jmp _if15_exit
0755   08E6             _if15_exit:
0756   08E6             ; if(currState[i+-1][j+1] == '@') 	count++; 
0757   08E6             _if16_cond:
0758   08E6 3B C0 18      mov d, _currState_data ; $currState
0759   08E9 D7            push a
0760   08EA DA            push d
0761   08EB FA 05 00      lea d, [bp + 5] ; $i
0762   08EE 2A            mov b, [d]
0763   08EF 38 00 00      mov c, 0
0764   08F2             ; --- START TERMS
0765   08F2 D7            push a
0766   08F3 11            mov a, b
0767   08F4 FD 2E 01 00   mov32 cb, $00000001
0767   08F8 00 00 
0768   08FA FD 97         neg b
0769   08FC 56            add b, a
0770   08FD E4            pop a
0771   08FE             ; --- END TERMS
0772   08FE E7            pop d
0773   08FF FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0774   0903 DA            push d
0775   0904 FA 07 00      lea d, [bp + 7] ; $j
0776   0907 2A            mov b, [d]
0777   0908 38 00 00      mov c, 0
0778   090B             ; --- START TERMS
0779   090B D7            push a
0780   090C 11            mov a, b
0781   090D FD 2E 01 00   mov32 cb, $00000001
0781   0911 00 00 
0782   0913 56            add b, a
0783   0914 E4            pop a
0784   0915             ; --- END TERMS
0785   0915 E7            pop d
0786   0916 5A            add d, b
0787   0917 E4            pop a
0788   0918 32            mov bl, [d]
0789   0919 A7 00         mov bh, 0
0790   091B 38 00 00      mov c, 0
0791   091E             ; --- START RELATIONAL
0792   091E D7            push a
0793   091F 11            mov a, b
0794   0920 FD 2E 40 00   mov32 cb, $00000040
0794   0924 00 00 
0795   0926 B0            cmp a, b
0796   0927 FD 71         seq ; ==
0797   0929 E4            pop a
0798   092A             ; --- END RELATIONAL
0799   092A C0 00 00      cmp b, 0
0800   092D C6 43 09      je _if16_exit
0801   0930             _if16_TRUE:
0802   0930             ; count++; 
0803   0930 FA FF FF      lea d, [bp + -1] ; $count
0804   0933 2A            mov b, [d]
0805   0934 38 00 00      mov c, 0
0806   0937 11            mov a, b
0807   0938 FD 77         inc b
0808   093A FA FF FF      lea d, [bp + -1] ; $count
0809   093D FD 43         mov [d], b
0810   093F 27            mov b, a
0811   0940 0A 43 09      jmp _if16_exit
0812   0943             _if16_exit:
0813   0943             ; if(currState[i][j+-1] == '@') 		count++; 
0814   0943             _if17_cond:
0815   0943 3B C0 18      mov d, _currState_data ; $currState
0816   0946 D7            push a
0817   0947 DA            push d
0818   0948 FA 05 00      lea d, [bp + 5] ; $i
0819   094B 2A            mov b, [d]
0820   094C 38 00 00      mov c, 0
0821   094F E7            pop d
0822   0950 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0823   0954 DA            push d
0824   0955 FA 07 00      lea d, [bp + 7] ; $j
0825   0958 2A            mov b, [d]
0826   0959 38 00 00      mov c, 0
0827   095C             ; --- START TERMS
0828   095C D7            push a
0829   095D 11            mov a, b
0830   095E FD 2E 01 00   mov32 cb, $00000001
0830   0962 00 00 
0831   0964 FD 97         neg b
0832   0966 56            add b, a
0833   0967 E4            pop a
0834   0968             ; --- END TERMS
0835   0968 E7            pop d
0836   0969 5A            add d, b
0837   096A E4            pop a
0838   096B 32            mov bl, [d]
0839   096C A7 00         mov bh, 0
0840   096E 38 00 00      mov c, 0
0841   0971             ; --- START RELATIONAL
0842   0971 D7            push a
0843   0972 11            mov a, b
0844   0973 FD 2E 40 00   mov32 cb, $00000040
0844   0977 00 00 
0845   0979 B0            cmp a, b
0846   097A FD 71         seq ; ==
0847   097C E4            pop a
0848   097D             ; --- END RELATIONAL
0849   097D C0 00 00      cmp b, 0
0850   0980 C6 96 09      je _if17_exit
0851   0983             _if17_TRUE:
0852   0983             ; count++; 
0853   0983 FA FF FF      lea d, [bp + -1] ; $count
0854   0986 2A            mov b, [d]
0855   0987 38 00 00      mov c, 0
0856   098A 11            mov a, b
0857   098B FD 77         inc b
0858   098D FA FF FF      lea d, [bp + -1] ; $count
0859   0990 FD 43         mov [d], b
0860   0992 27            mov b, a
0861   0993 0A 96 09      jmp _if17_exit
0862   0996             _if17_exit:
0863   0996             ; if(currState[i][j+1] == '@') 			count++; 
0864   0996             _if18_cond:
0865   0996 3B C0 18      mov d, _currState_data ; $currState
0866   0999 D7            push a
0867   099A DA            push d
0868   099B FA 05 00      lea d, [bp + 5] ; $i
0869   099E 2A            mov b, [d]
0870   099F 38 00 00      mov c, 0
0871   09A2 E7            pop d
0872   09A3 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0873   09A7 DA            push d
0874   09A8 FA 07 00      lea d, [bp + 7] ; $j
0875   09AB 2A            mov b, [d]
0876   09AC 38 00 00      mov c, 0
0877   09AF             ; --- START TERMS
0878   09AF D7            push a
0879   09B0 11            mov a, b
0880   09B1 FD 2E 01 00   mov32 cb, $00000001
0880   09B5 00 00 
0881   09B7 56            add b, a
0882   09B8 E4            pop a
0883   09B9             ; --- END TERMS
0884   09B9 E7            pop d
0885   09BA 5A            add d, b
0886   09BB E4            pop a
0887   09BC 32            mov bl, [d]
0888   09BD A7 00         mov bh, 0
0889   09BF 38 00 00      mov c, 0
0890   09C2             ; --- START RELATIONAL
0891   09C2 D7            push a
0892   09C3 11            mov a, b
0893   09C4 FD 2E 40 00   mov32 cb, $00000040
0893   09C8 00 00 
0894   09CA B0            cmp a, b
0895   09CB FD 71         seq ; ==
0896   09CD E4            pop a
0897   09CE             ; --- END RELATIONAL
0898   09CE C0 00 00      cmp b, 0
0899   09D1 C6 E7 09      je _if18_exit
0900   09D4             _if18_TRUE:
0901   09D4             ; count++; 
0902   09D4 FA FF FF      lea d, [bp + -1] ; $count
0903   09D7 2A            mov b, [d]
0904   09D8 38 00 00      mov c, 0
0905   09DB 11            mov a, b
0906   09DC FD 77         inc b
0907   09DE FA FF FF      lea d, [bp + -1] ; $count
0908   09E1 FD 43         mov [d], b
0909   09E3 27            mov b, a
0910   09E4 0A E7 09      jmp _if18_exit
0911   09E7             _if18_exit:
0912   09E7             ; if(currState[i+1][j+-1] == '@') 	count++; 
0913   09E7             _if19_cond:
0914   09E7 3B C0 18      mov d, _currState_data ; $currState
0915   09EA D7            push a
0916   09EB DA            push d
0917   09EC FA 05 00      lea d, [bp + 5] ; $i
0918   09EF 2A            mov b, [d]
0919   09F0 38 00 00      mov c, 0
0920   09F3             ; --- START TERMS
0921   09F3 D7            push a
0922   09F4 11            mov a, b
0923   09F5 FD 2E 01 00   mov32 cb, $00000001
0923   09F9 00 00 
0924   09FB 56            add b, a
0925   09FC E4            pop a
0926   09FD             ; --- END TERMS
0927   09FD E7            pop d
0928   09FE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0929   0A02 DA            push d
0930   0A03 FA 07 00      lea d, [bp + 7] ; $j
0931   0A06 2A            mov b, [d]
0932   0A07 38 00 00      mov c, 0
0933   0A0A             ; --- START TERMS
0934   0A0A D7            push a
0935   0A0B 11            mov a, b
0936   0A0C FD 2E 01 00   mov32 cb, $00000001
0936   0A10 00 00 
0937   0A12 FD 97         neg b
0938   0A14 56            add b, a
0939   0A15 E4            pop a
0940   0A16             ; --- END TERMS
0941   0A16 E7            pop d
0942   0A17 5A            add d, b
0943   0A18 E4            pop a
0944   0A19 32            mov bl, [d]
0945   0A1A A7 00         mov bh, 0
0946   0A1C 38 00 00      mov c, 0
0947   0A1F             ; --- START RELATIONAL
0948   0A1F D7            push a
0949   0A20 11            mov a, b
0950   0A21 FD 2E 40 00   mov32 cb, $00000040
0950   0A25 00 00 
0951   0A27 B0            cmp a, b
0952   0A28 FD 71         seq ; ==
0953   0A2A E4            pop a
0954   0A2B             ; --- END RELATIONAL
0955   0A2B C0 00 00      cmp b, 0
0956   0A2E C6 44 0A      je _if19_exit
0957   0A31             _if19_TRUE:
0958   0A31             ; count++; 
0959   0A31 FA FF FF      lea d, [bp + -1] ; $count
0960   0A34 2A            mov b, [d]
0961   0A35 38 00 00      mov c, 0
0962   0A38 11            mov a, b
0963   0A39 FD 77         inc b
0964   0A3B FA FF FF      lea d, [bp + -1] ; $count
0965   0A3E FD 43         mov [d], b
0966   0A40 27            mov b, a
0967   0A41 0A 44 0A      jmp _if19_exit
0968   0A44             _if19_exit:
0969   0A44             ; if(currState[i+1][j] == '@') 			count++; 
0970   0A44             _if20_cond:
0971   0A44 3B C0 18      mov d, _currState_data ; $currState
0972   0A47 D7            push a
0973   0A48 DA            push d
0974   0A49 FA 05 00      lea d, [bp + 5] ; $i
0975   0A4C 2A            mov b, [d]
0976   0A4D 38 00 00      mov c, 0
0977   0A50             ; --- START TERMS
0978   0A50 D7            push a
0979   0A51 11            mov a, b
0980   0A52 FD 2E 01 00   mov32 cb, $00000001
0980   0A56 00 00 
0981   0A58 56            add b, a
0982   0A59 E4            pop a
0983   0A5A             ; --- END TERMS
0984   0A5A E7            pop d
0985   0A5B FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0986   0A5F DA            push d
0987   0A60 FA 07 00      lea d, [bp + 7] ; $j
0988   0A63 2A            mov b, [d]
0989   0A64 38 00 00      mov c, 0
0990   0A67 E7            pop d
0991   0A68 5A            add d, b
0992   0A69 E4            pop a
0993   0A6A 32            mov bl, [d]
0994   0A6B A7 00         mov bh, 0
0995   0A6D 38 00 00      mov c, 0
0996   0A70             ; --- START RELATIONAL
0997   0A70 D7            push a
0998   0A71 11            mov a, b
0999   0A72 FD 2E 40 00   mov32 cb, $00000040
0999   0A76 00 00 
1000   0A78 B0            cmp a, b
1001   0A79 FD 71         seq ; ==
1002   0A7B E4            pop a
1003   0A7C             ; --- END RELATIONAL
1004   0A7C C0 00 00      cmp b, 0
1005   0A7F C6 95 0A      je _if20_exit
1006   0A82             _if20_TRUE:
1007   0A82             ; count++; 
1008   0A82 FA FF FF      lea d, [bp + -1] ; $count
1009   0A85 2A            mov b, [d]
1010   0A86 38 00 00      mov c, 0
1011   0A89 11            mov a, b
1012   0A8A FD 77         inc b
1013   0A8C FA FF FF      lea d, [bp + -1] ; $count
1014   0A8F FD 43         mov [d], b
1015   0A91 27            mov b, a
1016   0A92 0A 95 0A      jmp _if20_exit
1017   0A95             _if20_exit:
1018   0A95             ; if(currState[i+1][j+1] == '@') 		count++; 
1019   0A95             _if21_cond:
1020   0A95 3B C0 18      mov d, _currState_data ; $currState
1021   0A98 D7            push a
1022   0A99 DA            push d
1023   0A9A FA 05 00      lea d, [bp + 5] ; $i
1024   0A9D 2A            mov b, [d]
1025   0A9E 38 00 00      mov c, 0
1026   0AA1             ; --- START TERMS
1027   0AA1 D7            push a
1028   0AA2 11            mov a, b
1029   0AA3 FD 2E 01 00   mov32 cb, $00000001
1029   0AA7 00 00 
1030   0AA9 56            add b, a
1031   0AAA E4            pop a
1032   0AAB             ; --- END TERMS
1033   0AAB E7            pop d
1034   0AAC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
1035   0AB0 DA            push d
1036   0AB1 FA 07 00      lea d, [bp + 7] ; $j
1037   0AB4 2A            mov b, [d]
1038   0AB5 38 00 00      mov c, 0
1039   0AB8             ; --- START TERMS
1040   0AB8 D7            push a
1041   0AB9 11            mov a, b
1042   0ABA FD 2E 01 00   mov32 cb, $00000001
1042   0ABE 00 00 
1043   0AC0 56            add b, a
1044   0AC1 E4            pop a
1045   0AC2             ; --- END TERMS
1046   0AC2 E7            pop d
1047   0AC3 5A            add d, b
1048   0AC4 E4            pop a
1049   0AC5 32            mov bl, [d]
1050   0AC6 A7 00         mov bh, 0
1051   0AC8 38 00 00      mov c, 0
1052   0ACB             ; --- START RELATIONAL
1053   0ACB D7            push a
1054   0ACC 11            mov a, b
1055   0ACD FD 2E 40 00   mov32 cb, $00000040
1055   0AD1 00 00 
1056   0AD3 B0            cmp a, b
1057   0AD4 FD 71         seq ; ==
1058   0AD6 E4            pop a
1059   0AD7             ; --- END RELATIONAL
1060   0AD7 C0 00 00      cmp b, 0
1061   0ADA C6 F0 0A      je _if21_exit
1062   0ADD             _if21_TRUE:
1063   0ADD             ; count++; 
1064   0ADD FA FF FF      lea d, [bp + -1] ; $count
1065   0AE0 2A            mov b, [d]
1066   0AE1 38 00 00      mov c, 0
1067   0AE4 11            mov a, b
1068   0AE5 FD 77         inc b
1069   0AE7 FA FF FF      lea d, [bp + -1] ; $count
1070   0AEA FD 43         mov [d], b
1071   0AEC 27            mov b, a
1072   0AED 0A F0 0A      jmp _if21_exit
1073   0AF0             _if21_exit:
1074   0AF0             ; return count; 
1075   0AF0 FA FF FF      lea d, [bp + -1] ; $count
1076   0AF3 2A            mov b, [d]
1077   0AF4 38 00 00      mov c, 0
1078   0AF7 F9            leave
1079   0AF8 09            ret
1080   0AF9             
1081   0AF9             printf:
1082   0AF9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1083   0AFC             ; char *p, *format_p; 
1084   0AFC 52 02 00      sub sp, 2
1085   0AFF 52 02 00      sub sp, 2
1086   0B02             ; format_p = format; 
1087   0B02 FA FD FF      lea d, [bp + -3] ; $format_p
1088   0B05 DA            push d
1089   0B06 FA 05 00      lea d, [bp + 5] ; $format
1090   0B09 2A            mov b, [d]
1091   0B0A 38 00 00      mov c, 0
1092   0B0D E7            pop d
1093   0B0E FD 43         mov [d], b
1094   0B10             ; p = &format + 2; 
1095   0B10 FA FF FF      lea d, [bp + -1] ; $p
1096   0B13 DA            push d
1097   0B14 FA 05 00      lea d, [bp + 5] ; $format
1098   0B17 2D            mov b, d
1099   0B18             ; --- START TERMS
1100   0B18 D7            push a
1101   0B19 11            mov a, b
1102   0B1A FD 2E 02 00   mov32 cb, $00000002
1102   0B1E 00 00 
1103   0B20 56            add b, a
1104   0B21 E4            pop a
1105   0B22             ; --- END TERMS
1106   0B22 E7            pop d
1107   0B23 FD 43         mov [d], b
1108   0B25             ; for(;;){ 
1109   0B25             _for22_init:
1110   0B25             _for22_cond:
1111   0B25             _for22_block:
1112   0B25             ; if(!*format_p) break; 
1113   0B25             _if23_cond:
1114   0B25 FA FD FF      lea d, [bp + -3] ; $format_p
1115   0B28 2A            mov b, [d]
1116   0B29 38 00 00      mov c, 0
1117   0B2C 74            mov d, b
1118   0B2D 32            mov bl, [d]
1119   0B2E A7 00         mov bh, 0
1120   0B30 38 00 00      mov c, 0
1121   0B33 C0 00 00      cmp b, 0
1122   0B36 FD 71         seq ; !
1123   0B38 C0 00 00      cmp b, 0
1124   0B3B C6 44 0B      je _if23_else
1125   0B3E             _if23_TRUE:
1126   0B3E             ; break; 
1127   0B3E 0A F4 0D      jmp _for22_exit ; for break
1128   0B41 0A F1 0D      jmp _if23_exit
1129   0B44             _if23_else:
1130   0B44             ; if(*format_p == '%'){ 
1131   0B44             _if24_cond:
1132   0B44 FA FD FF      lea d, [bp + -3] ; $format_p
1133   0B47 2A            mov b, [d]
1134   0B48 38 00 00      mov c, 0
1135   0B4B 74            mov d, b
1136   0B4C 32            mov bl, [d]
1137   0B4D A7 00         mov bh, 0
1138   0B4F 38 00 00      mov c, 0
1139   0B52             ; --- START RELATIONAL
1140   0B52 D7            push a
1141   0B53 11            mov a, b
1142   0B54 FD 2E 25 00   mov32 cb, $00000025
1142   0B58 00 00 
1143   0B5A B0            cmp a, b
1144   0B5B FD 71         seq ; ==
1145   0B5D E4            pop a
1146   0B5E             ; --- END RELATIONAL
1147   0B5E C0 00 00      cmp b, 0
1148   0B61 C6 CC 0D      je _if24_else
1149   0B64             _if24_TRUE:
1150   0B64             ; format_p++; 
1151   0B64 FA FD FF      lea d, [bp + -3] ; $format_p
1152   0B67 2A            mov b, [d]
1153   0B68 38 00 00      mov c, 0
1154   0B6B FD 77         inc b
1155   0B6D FA FD FF      lea d, [bp + -3] ; $format_p
1156   0B70 FD 43         mov [d], b
1157   0B72 FD 7D         dec b
1158   0B74             ; switch(*format_p){ 
1159   0B74             _switch25_expr:
1160   0B74 FA FD FF      lea d, [bp + -3] ; $format_p
1161   0B77 2A            mov b, [d]
1162   0B78 38 00 00      mov c, 0
1163   0B7B 74            mov d, b
1164   0B7C 32            mov bl, [d]
1165   0B7D A7 00         mov bh, 0
1166   0B7F 38 00 00      mov c, 0
1167   0B82             _switch25_comparisons:
1168   0B82 C1 6C         cmp bl, $6c
1169   0B84 C6 B0 0B      je _switch25_case0
1170   0B87 C1 4C         cmp bl, $4c
1171   0B89 C6 B0 0B      je _switch25_case1
1172   0B8C C1 64         cmp bl, $64
1173   0B8E C6 C0 0C      je _switch25_case2
1174   0B91 C1 69         cmp bl, $69
1175   0B93 C6 C0 0C      je _switch25_case3
1176   0B96 C1 75         cmp bl, $75
1177   0B98 C6 F0 0C      je _switch25_case4
1178   0B9B C1 78         cmp bl, $78
1179   0B9D C6 20 0D      je _switch25_case5
1180   0BA0 C1 63         cmp bl, $63
1181   0BA2 C6 50 0D      je _switch25_case6
1182   0BA5 C1 73         cmp bl, $73
1183   0BA7 C6 80 0D      je _switch25_case7
1184   0BAA 0A AD 0D      jmp _switch25_default
1185   0BAD 0A B9 0D      jmp _switch25_exit
1186   0BB0             _switch25_case0:
1187   0BB0             _switch25_case1:
1188   0BB0             ; format_p++; 
1189   0BB0 FA FD FF      lea d, [bp + -3] ; $format_p
1190   0BB3 2A            mov b, [d]
1191   0BB4 38 00 00      mov c, 0
1192   0BB7 FD 77         inc b
1193   0BB9 FA FD FF      lea d, [bp + -3] ; $format_p
1194   0BBC FD 43         mov [d], b
1195   0BBE FD 7D         dec b
1196   0BC0             ; if(*format_p == 'd' || *format_p == 'i') 
1197   0BC0             _if26_cond:
1198   0BC0 FA FD FF      lea d, [bp + -3] ; $format_p
1199   0BC3 2A            mov b, [d]
1200   0BC4 38 00 00      mov c, 0
1201   0BC7 74            mov d, b
1202   0BC8 32            mov bl, [d]
1203   0BC9 A7 00         mov bh, 0
1204   0BCB 38 00 00      mov c, 0
1205   0BCE             ; --- START RELATIONAL
1206   0BCE D7            push a
1207   0BCF 11            mov a, b
1208   0BD0 FD 2E 64 00   mov32 cb, $00000064
1208   0BD4 00 00 
1209   0BD6 B0            cmp a, b
1210   0BD7 FD 71         seq ; ==
1211   0BD9 E4            pop a
1212   0BDA             ; --- END RELATIONAL
1213   0BDA             ; --- START LOGICAL OR
1214   0BDA D7            push a
1215   0BDB 11            mov a, b
1216   0BDC FA FD FF      lea d, [bp + -3] ; $format_p
1217   0BDF 2A            mov b, [d]
1218   0BE0 38 00 00      mov c, 0
1219   0BE3 74            mov d, b
1220   0BE4 32            mov bl, [d]
1221   0BE5 A7 00         mov bh, 0
1222   0BE7 38 00 00      mov c, 0
1223   0BEA             ; --- START RELATIONAL
1224   0BEA D7            push a
1225   0BEB 11            mov a, b
1226   0BEC FD 2E 69 00   mov32 cb, $00000069
1226   0BF0 00 00 
1227   0BF2 B0            cmp a, b
1228   0BF3 FD 71         seq ; ==
1229   0BF5 E4            pop a
1230   0BF6             ; --- END RELATIONAL
1231   0BF6 FD A8         sor a, b ; ||
1232   0BF8 E4            pop a
1233   0BF9             ; --- END LOGICAL OR
1234   0BF9 C0 00 00      cmp b, 0
1235   0BFC C6 1D 0C      je _if26_else
1236   0BFF             _if26_TRUE:
1237   0BFF             ; print_signed_long(*(long *)p); 
1238   0BFF             ; --- START FUNCTION CALL
1239   0BFF FA FF FF      lea d, [bp + -1] ; $p
1240   0C02 2A            mov b, [d]
1241   0C03 38 00 00      mov c, 0
1242   0C06 74            mov d, b
1243   0C07 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1244   0C0A FD 39         mov c, b ; And place it into C
1245   0C0C 2A            mov b, [d] ; Lower Word in B
1246   0C0D 12            mov a, c
1247   0C0E FD AA         swp a
1248   0C10 D7            push a
1249   0C11 FD AB         swp b
1250   0C13 D8            push b
1251   0C14 07 F6 0D      call print_signed_long
1252   0C17 51 04 00      add sp, 4
1253   0C1A             ; --- END FUNCTION CALL
1254   0C1A 0A A5 0C      jmp _if26_exit
1255   0C1D             _if26_else:
1256   0C1D             ; if(*format_p == 'u') 
1257   0C1D             _if27_cond:
1258   0C1D FA FD FF      lea d, [bp + -3] ; $format_p
1259   0C20 2A            mov b, [d]
1260   0C21 38 00 00      mov c, 0
1261   0C24 74            mov d, b
1262   0C25 32            mov bl, [d]
1263   0C26 A7 00         mov bh, 0
1264   0C28 38 00 00      mov c, 0
1265   0C2B             ; --- START RELATIONAL
1266   0C2B D7            push a
1267   0C2C 11            mov a, b
1268   0C2D FD 2E 75 00   mov32 cb, $00000075
1268   0C31 00 00 
1269   0C33 B0            cmp a, b
1270   0C34 FD 71         seq ; ==
1271   0C36 E4            pop a
1272   0C37             ; --- END RELATIONAL
1273   0C37 C0 00 00      cmp b, 0
1274   0C3A C6 5B 0C      je _if27_else
1275   0C3D             _if27_TRUE:
1276   0C3D             ; print_unsigned_long(*(unsigned long *)p); 
1277   0C3D             ; --- START FUNCTION CALL
1278   0C3D FA FF FF      lea d, [bp + -1] ; $p
1279   0C40 2A            mov b, [d]
1280   0C41 38 00 00      mov c, 0
1281   0C44 74            mov d, b
1282   0C45 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1283   0C48 FD 39         mov c, b ; And place it into C
1284   0C4A 2A            mov b, [d] ; Lower Word in B
1285   0C4B 12            mov a, c
1286   0C4C FD AA         swp a
1287   0C4E D7            push a
1288   0C4F FD AB         swp b
1289   0C51 D8            push b
1290   0C52 07 81 0F      call print_unsigned_long
1291   0C55 51 04 00      add sp, 4
1292   0C58             ; --- END FUNCTION CALL
1293   0C58 0A A5 0C      jmp _if27_exit
1294   0C5B             _if27_else:
1295   0C5B             ; if(*format_p == 'x') 
1296   0C5B             _if28_cond:
1297   0C5B FA FD FF      lea d, [bp + -3] ; $format_p
1298   0C5E 2A            mov b, [d]
1299   0C5F 38 00 00      mov c, 0
1300   0C62 74            mov d, b
1301   0C63 32            mov bl, [d]
1302   0C64 A7 00         mov bh, 0
1303   0C66 38 00 00      mov c, 0
1304   0C69             ; --- START RELATIONAL
1305   0C69 D7            push a
1306   0C6A 11            mov a, b
1307   0C6B FD 2E 78 00   mov32 cb, $00000078
1307   0C6F 00 00 
1308   0C71 B0            cmp a, b
1309   0C72 FD 71         seq ; ==
1310   0C74 E4            pop a
1311   0C75             ; --- END RELATIONAL
1312   0C75 C0 00 00      cmp b, 0
1313   0C78 C6 99 0C      je _if28_else
1314   0C7B             _if28_TRUE:
1315   0C7B             ; printx32(*(long int *)p); 
1316   0C7B             ; --- START FUNCTION CALL
1317   0C7B FA FF FF      lea d, [bp + -1] ; $p
1318   0C7E 2A            mov b, [d]
1319   0C7F 38 00 00      mov c, 0
1320   0C82 74            mov d, b
1321   0C83 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1322   0C86 FD 39         mov c, b ; And place it into C
1323   0C88 2A            mov b, [d] ; Lower Word in B
1324   0C89 12            mov a, c
1325   0C8A FD AA         swp a
1326   0C8C D7            push a
1327   0C8D FD AB         swp b
1328   0C8F D8            push b
1329   0C90 07 AD 10      call printx32
1330   0C93 51 04 00      add sp, 4
1331   0C96             ; --- END FUNCTION CALL
1332   0C96 0A A5 0C      jmp _if28_exit
1333   0C99             _if28_else:
1334   0C99             ; err("Unexpected format in printf."); 
1335   0C99             ; --- START FUNCTION CALL
1336   0C99 26 91 1D      mov b, _s3 ; "Unexpected format in printf."
1337   0C9C FD AB         swp b
1338   0C9E D8            push b
1339   0C9F 07 0D 11      call err
1340   0CA2 51 02 00      add sp, 2
1341   0CA5             ; --- END FUNCTION CALL
1342   0CA5             _if28_exit:
1343   0CA5             _if27_exit:
1344   0CA5             _if26_exit:
1345   0CA5             ; p = p + 4; 
1346   0CA5 FA FF FF      lea d, [bp + -1] ; $p
1347   0CA8 DA            push d
1348   0CA9 FA FF FF      lea d, [bp + -1] ; $p
1349   0CAC 2A            mov b, [d]
1350   0CAD 38 00 00      mov c, 0
1351   0CB0             ; --- START TERMS
1352   0CB0 D7            push a
1353   0CB1 11            mov a, b
1354   0CB2 FD 2E 04 00   mov32 cb, $00000004
1354   0CB6 00 00 
1355   0CB8 56            add b, a
1356   0CB9 E4            pop a
1357   0CBA             ; --- END TERMS
1358   0CBA E7            pop d
1359   0CBB FD 43         mov [d], b
1360   0CBD             ; break; 
1361   0CBD 0A B9 0D      jmp _switch25_exit ; case break
1362   0CC0             _switch25_case2:
1363   0CC0             _switch25_case3:
1364   0CC0             ; print_signed(*(int*)p); 
1365   0CC0             ; --- START FUNCTION CALL
1366   0CC0 FA FF FF      lea d, [bp + -1] ; $p
1367   0CC3 2A            mov b, [d]
1368   0CC4 38 00 00      mov c, 0
1369   0CC7 74            mov d, b
1370   0CC8 2A            mov b, [d]
1371   0CC9 38 00 00      mov c, 0
1372   0CCC FD AB         swp b
1373   0CCE D8            push b
1374   0CCF 07 3B 11      call print_signed
1375   0CD2 51 02 00      add sp, 2
1376   0CD5             ; --- END FUNCTION CALL
1377   0CD5             ; p = p + 2; 
1378   0CD5 FA FF FF      lea d, [bp + -1] ; $p
1379   0CD8 DA            push d
1380   0CD9 FA FF FF      lea d, [bp + -1] ; $p
1381   0CDC 2A            mov b, [d]
1382   0CDD 38 00 00      mov c, 0
1383   0CE0             ; --- START TERMS
1384   0CE0 D7            push a
1385   0CE1 11            mov a, b
1386   0CE2 FD 2E 02 00   mov32 cb, $00000002
1386   0CE6 00 00 
1387   0CE8 56            add b, a
1388   0CE9 E4            pop a
1389   0CEA             ; --- END TERMS
1390   0CEA E7            pop d
1391   0CEB FD 43         mov [d], b
1392   0CED             ; break; 
1393   0CED 0A B9 0D      jmp _switch25_exit ; case break
1394   0CF0             _switch25_case4:
1395   0CF0             ; print_unsigned(*(unsigned int*)p); 
1396   0CF0             ; --- START FUNCTION CALL
1397   0CF0 FA FF FF      lea d, [bp + -1] ; $p
1398   0CF3 2A            mov b, [d]
1399   0CF4 38 00 00      mov c, 0
1400   0CF7 74            mov d, b
1401   0CF8 2A            mov b, [d]
1402   0CF9 38 00 00      mov c, 0
1403   0CFC FD AB         swp b
1404   0CFE D8            push b
1405   0CFF 07 84 12      call print_unsigned
1406   0D02 51 02 00      add sp, 2
1407   0D05             ; --- END FUNCTION CALL
1408   0D05             ; p = p + 2; 
1409   0D05 FA FF FF      lea d, [bp + -1] ; $p
1410   0D08 DA            push d
1411   0D09 FA FF FF      lea d, [bp + -1] ; $p
1412   0D0C 2A            mov b, [d]
1413   0D0D 38 00 00      mov c, 0
1414   0D10             ; --- START TERMS
1415   0D10 D7            push a
1416   0D11 11            mov a, b
1417   0D12 FD 2E 02 00   mov32 cb, $00000002
1417   0D16 00 00 
1418   0D18 56            add b, a
1419   0D19 E4            pop a
1420   0D1A             ; --- END TERMS
1421   0D1A E7            pop d
1422   0D1B FD 43         mov [d], b
1423   0D1D             ; break; 
1424   0D1D 0A B9 0D      jmp _switch25_exit ; case break
1425   0D20             _switch25_case5:
1426   0D20             ; printx16(*(int*)p); 
1427   0D20             ; --- START FUNCTION CALL
1428   0D20 FA FF FF      lea d, [bp + -1] ; $p
1429   0D23 2A            mov b, [d]
1430   0D24 38 00 00      mov c, 0
1431   0D27 74            mov d, b
1432   0D28 2A            mov b, [d]
1433   0D29 38 00 00      mov c, 0
1434   0D2C FD AB         swp b
1435   0D2E D8            push b
1436   0D2F 07 94 13      call printx16
1437   0D32 51 02 00      add sp, 2
1438   0D35             ; --- END FUNCTION CALL
1439   0D35             ; p = p + 2; 
1440   0D35 FA FF FF      lea d, [bp + -1] ; $p
1441   0D38 DA            push d
1442   0D39 FA FF FF      lea d, [bp + -1] ; $p
1443   0D3C 2A            mov b, [d]
1444   0D3D 38 00 00      mov c, 0
1445   0D40             ; --- START TERMS
1446   0D40 D7            push a
1447   0D41 11            mov a, b
1448   0D42 FD 2E 02 00   mov32 cb, $00000002
1448   0D46 00 00 
1449   0D48 56            add b, a
1450   0D49 E4            pop a
1451   0D4A             ; --- END TERMS
1452   0D4A E7            pop d
1453   0D4B FD 43         mov [d], b
1454   0D4D             ; break; 
1455   0D4D 0A B9 0D      jmp _switch25_exit ; case break
1456   0D50             _switch25_case6:
1457   0D50             ; putchar(*(char*)p); 
1458   0D50             ; --- START FUNCTION CALL
1459   0D50 FA FF FF      lea d, [bp + -1] ; $p
1460   0D53 2A            mov b, [d]
1461   0D54 38 00 00      mov c, 0
1462   0D57 74            mov d, b
1463   0D58 32            mov bl, [d]
1464   0D59 A7 00         mov bh, 0
1465   0D5B 38 00 00      mov c, 0
1466   0D5E DD            push bl
1467   0D5F 07 73 0F      call putchar
1468   0D62 51 01 00      add sp, 1
1469   0D65             ; --- END FUNCTION CALL
1470   0D65             ; p = p + 1; 
1471   0D65 FA FF FF      lea d, [bp + -1] ; $p
1472   0D68 DA            push d
1473   0D69 FA FF FF      lea d, [bp + -1] ; $p
1474   0D6C 2A            mov b, [d]
1475   0D6D 38 00 00      mov c, 0
1476   0D70             ; --- START TERMS
1477   0D70 D7            push a
1478   0D71 11            mov a, b
1479   0D72 FD 2E 01 00   mov32 cb, $00000001
1479   0D76 00 00 
1480   0D78 56            add b, a
1481   0D79 E4            pop a
1482   0D7A             ; --- END TERMS
1483   0D7A E7            pop d
1484   0D7B FD 43         mov [d], b
1485   0D7D             ; break; 
1486   0D7D 0A B9 0D      jmp _switch25_exit ; case break
1487   0D80             _switch25_case7:
1488   0D80             ; print(*(char**)p); 
1489   0D80             ; --- START FUNCTION CALL
1490   0D80 FA FF FF      lea d, [bp + -1] ; $p
1491   0D83 2A            mov b, [d]
1492   0D84 38 00 00      mov c, 0
1493   0D87 74            mov d, b
1494   0D88 2A            mov b, [d]
1495   0D89 FD AB         swp b
1496   0D8B D8            push b
1497   0D8C 07 22 11      call print
1498   0D8F 51 02 00      add sp, 2
1499   0D92             ; --- END FUNCTION CALL
1500   0D92             ; p = p + 2; 
1501   0D92 FA FF FF      lea d, [bp + -1] ; $p
1502   0D95 DA            push d
1503   0D96 FA FF FF      lea d, [bp + -1] ; $p
1504   0D99 2A            mov b, [d]
1505   0D9A 38 00 00      mov c, 0
1506   0D9D             ; --- START TERMS
1507   0D9D D7            push a
1508   0D9E 11            mov a, b
1509   0D9F FD 2E 02 00   mov32 cb, $00000002
1509   0DA3 00 00 
1510   0DA5 56            add b, a
1511   0DA6 E4            pop a
1512   0DA7             ; --- END TERMS
1513   0DA7 E7            pop d
1514   0DA8 FD 43         mov [d], b
1515   0DAA             ; break; 
1516   0DAA 0A B9 0D      jmp _switch25_exit ; case break
1517   0DAD             _switch25_default:
1518   0DAD             ; print("Error: Unknown argument type.\n"); 
1519   0DAD             ; --- START FUNCTION CALL
1520   0DAD 26 AE 1D      mov b, _s4 ; "Error: Unknown argument type.\n"
1521   0DB0 FD AB         swp b
1522   0DB2 D8            push b
1523   0DB3 07 22 11      call print
1524   0DB6 51 02 00      add sp, 2
1525   0DB9             ; --- END FUNCTION CALL
1526   0DB9             _switch25_exit:
1527   0DB9             ; format_p++; 
1528   0DB9 FA FD FF      lea d, [bp + -3] ; $format_p
1529   0DBC 2A            mov b, [d]
1530   0DBD 38 00 00      mov c, 0
1531   0DC0 FD 77         inc b
1532   0DC2 FA FD FF      lea d, [bp + -3] ; $format_p
1533   0DC5 FD 43         mov [d], b
1534   0DC7 FD 7D         dec b
1535   0DC9 0A F1 0D      jmp _if24_exit
1536   0DCC             _if24_else:
1537   0DCC             ; putchar(*format_p); 
1538   0DCC             ; --- START FUNCTION CALL
1539   0DCC FA FD FF      lea d, [bp + -3] ; $format_p
1540   0DCF 2A            mov b, [d]
1541   0DD0 38 00 00      mov c, 0
1542   0DD3 74            mov d, b
1543   0DD4 32            mov bl, [d]
1544   0DD5 A7 00         mov bh, 0
1545   0DD7 38 00 00      mov c, 0
1546   0DDA DD            push bl
1547   0DDB 07 73 0F      call putchar
1548   0DDE 51 01 00      add sp, 1
1549   0DE1             ; --- END FUNCTION CALL
1550   0DE1             ; format_p++; 
1551   0DE1 FA FD FF      lea d, [bp + -3] ; $format_p
1552   0DE4 2A            mov b, [d]
1553   0DE5 38 00 00      mov c, 0
1554   0DE8 FD 77         inc b
1555   0DEA FA FD FF      lea d, [bp + -3] ; $format_p
1556   0DED FD 43         mov [d], b
1557   0DEF FD 7D         dec b
1558   0DF1             _if24_exit:
1559   0DF1             _if23_exit:
1560   0DF1             _for22_update:
1561   0DF1 0A 25 0B      jmp _for22_cond
1562   0DF4             _for22_exit:
1563   0DF4 F9            leave
1564   0DF5 09            ret
1565   0DF6             
1566   0DF6             print_signed_long:
1567   0DF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1568   0DF9             ; char digits[10]; 
1569   0DF9 52 0A 00      sub sp, 10
1570   0DFC             ; int i = 0; 
1571   0DFC 52 02 00      sub sp, 2
1572   0DFF             ; --- START LOCAL VAR INITIALIZATION
1573   0DFF FA F5 FF      lea d, [bp + -11] ; $i
1574   0E02 DA            push d
1575   0E03 FD 2E 00 00   mov32 cb, $00000000
1575   0E07 00 00 
1576   0E09 E7            pop d
1577   0E0A FD 43         mov [d], b
1578   0E0C             ; --- END LOCAL VAR INITIALIZATION
1579   0E0C             ; if (num < 0) { 
1580   0E0C             _if29_cond:
1581   0E0C FA 05 00      lea d, [bp + 5] ; $num
1582   0E0F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1583   0E12 FD 39         mov c, b ; And place it into C
1584   0E14 2A            mov b, [d] ; Lower Word in B
1585   0E15             ; --- START RELATIONAL
1586   0E15 D7            push a
1587   0E16 FD D8         push g
1588   0E18 11            mov a, b
1589   0E19 FD 7A         mov g, c
1590   0E1B FD 2E 00 00   mov32 cb, $00000000
1590   0E1F 00 00 
1591   0E21 FD AF         cmp32 ga, cb
1592   0E23 FD 73         slt ; <
1593   0E25 FD F1         pop g
1594   0E27 E4            pop a
1595   0E28             ; --- END RELATIONAL
1596   0E28 C0 00 00      cmp b, 0
1597   0E2B C6 5D 0E      je _if29_else
1598   0E2E             _if29_TRUE:
1599   0E2E             ; putchar('-'); 
1600   0E2E             ; --- START FUNCTION CALL
1601   0E2E FD 2E 2D 00   mov32 cb, $0000002d
1601   0E32 00 00 
1602   0E34 DD            push bl
1603   0E35 07 73 0F      call putchar
1604   0E38 51 01 00      add sp, 1
1605   0E3B             ; --- END FUNCTION CALL
1606   0E3B             ; num = -num; 
1607   0E3B FA 05 00      lea d, [bp + 5] ; $num
1608   0E3E DA            push d
1609   0E3F FA 05 00      lea d, [bp + 5] ; $num
1610   0E42 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1611   0E45 FD 39         mov c, b ; And place it into C
1612   0E47 2A            mov b, [d] ; Lower Word in B
1613   0E48 12            mov a, c
1614   0E49 95            not a
1615   0E4A 97            not b
1616   0E4B 55 01 00      add b, 1
1617   0E4E 5B 00 00      adc a, 0
1618   0E51 39            mov c, a
1619   0E52 E7            pop d
1620   0E53 FD 43         mov [d], b
1621   0E55 28            mov b, c
1622   0E56 FD 44 02 00   mov [d + 2], b
1623   0E5A 0A 91 0E      jmp _if29_exit
1624   0E5D             _if29_else:
1625   0E5D             ; if (num == 0) { 
1626   0E5D             _if30_cond:
1627   0E5D FA 05 00      lea d, [bp + 5] ; $num
1628   0E60 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1629   0E63 FD 39         mov c, b ; And place it into C
1630   0E65 2A            mov b, [d] ; Lower Word in B
1631   0E66             ; --- START RELATIONAL
1632   0E66 D7            push a
1633   0E67 FD D8         push g
1634   0E69 11            mov a, b
1635   0E6A FD 7A         mov g, c
1636   0E6C FD 2E 00 00   mov32 cb, $00000000
1636   0E70 00 00 
1637   0E72 FD AF         cmp32 ga, cb
1638   0E74 FD 71         seq ; ==
1639   0E76 FD F1         pop g
1640   0E78 E4            pop a
1641   0E79             ; --- END RELATIONAL
1642   0E79 C0 00 00      cmp b, 0
1643   0E7C C6 91 0E      je _if30_exit
1644   0E7F             _if30_TRUE:
1645   0E7F             ; putchar('0'); 
1646   0E7F             ; --- START FUNCTION CALL
1647   0E7F FD 2E 30 00   mov32 cb, $00000030
1647   0E83 00 00 
1648   0E85 DD            push bl
1649   0E86 07 73 0F      call putchar
1650   0E89 51 01 00      add sp, 1
1651   0E8C             ; --- END FUNCTION CALL
1652   0E8C             ; return; 
1653   0E8C F9            leave
1654   0E8D 09            ret
1655   0E8E 0A 91 0E      jmp _if30_exit
1656   0E91             _if30_exit:
1657   0E91             _if29_exit:
1658   0E91             ; while (num > 0) { 
1659   0E91             _while31_cond:
1660   0E91 FA 05 00      lea d, [bp + 5] ; $num
1661   0E94 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1662   0E97 FD 39         mov c, b ; And place it into C
1663   0E99 2A            mov b, [d] ; Lower Word in B
1664   0E9A             ; --- START RELATIONAL
1665   0E9A D7            push a
1666   0E9B FD D8         push g
1667   0E9D 11            mov a, b
1668   0E9E FD 7A         mov g, c
1669   0EA0 FD 2E 00 00   mov32 cb, $00000000
1669   0EA4 00 00 
1670   0EA6 FD AF         cmp32 ga, cb
1671   0EA8 FD 7F         sgt
1672   0EAA FD F1         pop g
1673   0EAC E4            pop a
1674   0EAD             ; --- END RELATIONAL
1675   0EAD C0 00 00      cmp b, 0
1676   0EB0 C6 29 0F      je _while31_exit
1677   0EB3             _while31_block:
1678   0EB3             ; digits[i] = '0' + (num % 10); 
1679   0EB3 FA F7 FF      lea d, [bp + -9] ; $digits
1680   0EB6 D7            push a
1681   0EB7 DA            push d
1682   0EB8 FA F5 FF      lea d, [bp + -11] ; $i
1683   0EBB 2A            mov b, [d]
1684   0EBC 38 00 00      mov c, 0
1685   0EBF E7            pop d
1686   0EC0 5A            add d, b
1687   0EC1 E4            pop a
1688   0EC2 DA            push d
1689   0EC3 FD 2E 30 00   mov32 cb, $00000030
1689   0EC7 00 00 
1690   0EC9             ; --- START TERMS
1691   0EC9 D7            push a
1692   0ECA 11            mov a, b
1693   0ECB FA 05 00      lea d, [bp + 5] ; $num
1694   0ECE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1695   0ED1 FD 39         mov c, b ; And place it into C
1696   0ED3 2A            mov b, [d] ; Lower Word in B
1697   0ED4             ; --- START FACTORS
1698   0ED4 D7            push a
1699   0ED5 FD D8         push g
1700   0ED7 11            mov a, b
1701   0ED8 FD 7A         mov g, c
1702   0EDA FD 2E 0A 00   mov32 cb, $0000000a
1702   0EDE 00 00 
1703   0EE0 AE            div a, b ; 
1704   0EE1 11            mov a, b
1705   0EE2 FD 38         mov c, g
1706   0EE4 27            mov b, a
1707   0EE5 FD F1         pop g
1708   0EE7 E4            pop a
1709   0EE8             ; --- END FACTORS
1710   0EE8 FD 15         add32 cb, ga
1711   0EEA E4            pop a
1712   0EEB             ; --- END TERMS
1713   0EEB E7            pop d
1714   0EEC FD 3E         mov [d], bl
1715   0EEE             ; num = num / 10; 
1716   0EEE FA 05 00      lea d, [bp + 5] ; $num
1717   0EF1 DA            push d
1718   0EF2 FA 05 00      lea d, [bp + 5] ; $num
1719   0EF5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1720   0EF8 FD 39         mov c, b ; And place it into C
1721   0EFA 2A            mov b, [d] ; Lower Word in B
1722   0EFB             ; --- START FACTORS
1723   0EFB D7            push a
1724   0EFC FD D8         push g
1725   0EFE 11            mov a, b
1726   0EFF FD 7A         mov g, c
1727   0F01 FD 2E 0A 00   mov32 cb, $0000000a
1727   0F05 00 00 
1728   0F07 AE            div a, b
1729   0F08 FD 38         mov c, g
1730   0F0A 27            mov b, a
1731   0F0B FD F1         pop g
1732   0F0D E4            pop a
1733   0F0E             ; --- END FACTORS
1734   0F0E E7            pop d
1735   0F0F FD 43         mov [d], b
1736   0F11 28            mov b, c
1737   0F12 FD 44 02 00   mov [d + 2], b
1738   0F16             ; i++; 
1739   0F16 FA F5 FF      lea d, [bp + -11] ; $i
1740   0F19 2A            mov b, [d]
1741   0F1A 38 00 00      mov c, 0
1742   0F1D 11            mov a, b
1743   0F1E FD 77         inc b
1744   0F20 FA F5 FF      lea d, [bp + -11] ; $i
1745   0F23 FD 43         mov [d], b
1746   0F25 27            mov b, a
1747   0F26 0A 91 0E      jmp _while31_cond
1748   0F29             _while31_exit:
1749   0F29             ; while (i > 0) { 
1750   0F29             _while38_cond:
1751   0F29 FA F5 FF      lea d, [bp + -11] ; $i
1752   0F2C 2A            mov b, [d]
1753   0F2D 38 00 00      mov c, 0
1754   0F30             ; --- START RELATIONAL
1755   0F30 D7            push a
1756   0F31 11            mov a, b
1757   0F32 FD 2E 00 00   mov32 cb, $00000000
1757   0F36 00 00 
1758   0F38 B0            cmp a, b
1759   0F39 FD 7F         sgt ; >
1760   0F3B E4            pop a
1761   0F3C             ; --- END RELATIONAL
1762   0F3C C0 00 00      cmp b, 0
1763   0F3F C6 71 0F      je _while38_exit
1764   0F42             _while38_block:
1765   0F42             ; i--; 
1766   0F42 FA F5 FF      lea d, [bp + -11] ; $i
1767   0F45 2A            mov b, [d]
1768   0F46 38 00 00      mov c, 0
1769   0F49 11            mov a, b
1770   0F4A FD 7D         dec b
1771   0F4C FA F5 FF      lea d, [bp + -11] ; $i
1772   0F4F FD 43         mov [d], b
1773   0F51 27            mov b, a
1774   0F52             ; putchar(digits[i]); 
1775   0F52             ; --- START FUNCTION CALL
1776   0F52 FA F7 FF      lea d, [bp + -9] ; $digits
1777   0F55 D7            push a
1778   0F56 DA            push d
1779   0F57 FA F5 FF      lea d, [bp + -11] ; $i
1780   0F5A 2A            mov b, [d]
1781   0F5B 38 00 00      mov c, 0
1782   0F5E E7            pop d
1783   0F5F 5A            add d, b
1784   0F60 E4            pop a
1785   0F61 32            mov bl, [d]
1786   0F62 A7 00         mov bh, 0
1787   0F64 38 00 00      mov c, 0
1788   0F67 DD            push bl
1789   0F68 07 73 0F      call putchar
1790   0F6B 51 01 00      add sp, 1
1791   0F6E             ; --- END FUNCTION CALL
1792   0F6E 0A 29 0F      jmp _while38_cond
1793   0F71             _while38_exit:
1794   0F71 F9            leave
1795   0F72 09            ret
1796   0F73             
1797   0F73             putchar:
1798   0F73 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1799   0F76             ; --- BEGIN INLINE ASM SEGMENT
1800   0F76 FA 05 00      lea d, [bp + 5] ; $c
1801   0F79 1E            mov al, [d]
1802   0F7A 23            mov ah, al
1803   0F7B 19 00         mov al, 0
1804   0F7D 05 03         syscall sys_io      
1805   0F7F             ; --- END INLINE ASM SEGMENT
1806   0F7F F9            leave
1807   0F80 09            ret
1808   0F81             
1809   0F81             print_unsigned_long:
1810   0F81 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1811   0F84             ; char digits[10]; 
1812   0F84 52 0A 00      sub sp, 10
1813   0F87             ; int i; 
1814   0F87 52 02 00      sub sp, 2
1815   0F8A             ; i = 0; 
1816   0F8A FA F5 FF      lea d, [bp + -11] ; $i
1817   0F8D DA            push d
1818   0F8E FD 2E 00 00   mov32 cb, $00000000
1818   0F92 00 00 
1819   0F94 E7            pop d
1820   0F95 FD 43         mov [d], b
1821   0F97             ; if(num == 0){ 
1822   0F97             _if39_cond:
1823   0F97 FA 05 00      lea d, [bp + 5] ; $num
1824   0F9A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1825   0F9D FD 39         mov c, b ; And place it into C
1826   0F9F 2A            mov b, [d] ; Lower Word in B
1827   0FA0             ; --- START RELATIONAL
1828   0FA0 D7            push a
1829   0FA1 FD D8         push g
1830   0FA3 11            mov a, b
1831   0FA4 FD 7A         mov g, c
1832   0FA6 FD 2E 00 00   mov32 cb, $00000000
1832   0FAA 00 00 
1833   0FAC FD AF         cmp32 ga, cb
1834   0FAE FD 71         seq ; ==
1835   0FB0 FD F1         pop g
1836   0FB2 E4            pop a
1837   0FB3             ; --- END RELATIONAL
1838   0FB3 C0 00 00      cmp b, 0
1839   0FB6 C6 CB 0F      je _if39_exit
1840   0FB9             _if39_TRUE:
1841   0FB9             ; putchar('0'); 
1842   0FB9             ; --- START FUNCTION CALL
1843   0FB9 FD 2E 30 00   mov32 cb, $00000030
1843   0FBD 00 00 
1844   0FBF DD            push bl
1845   0FC0 07 73 0F      call putchar
1846   0FC3 51 01 00      add sp, 1
1847   0FC6             ; --- END FUNCTION CALL
1848   0FC6             ; return; 
1849   0FC6 F9            leave
1850   0FC7 09            ret
1851   0FC8 0A CB 0F      jmp _if39_exit
1852   0FCB             _if39_exit:
1853   0FCB             ; while (num > 0) { 
1854   0FCB             _while40_cond:
1855   0FCB FA 05 00      lea d, [bp + 5] ; $num
1856   0FCE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1857   0FD1 FD 39         mov c, b ; And place it into C
1858   0FD3 2A            mov b, [d] ; Lower Word in B
1859   0FD4             ; --- START RELATIONAL
1860   0FD4 D7            push a
1861   0FD5 FD D8         push g
1862   0FD7 11            mov a, b
1863   0FD8 FD 7A         mov g, c
1864   0FDA FD 2E 00 00   mov32 cb, $00000000
1864   0FDE 00 00 
1865   0FE0 FD AF         cmp32 ga, cb
1866   0FE2 FD 81         sgu
1867   0FE4 FD F1         pop g
1868   0FE6 E4            pop a
1869   0FE7             ; --- END RELATIONAL
1870   0FE7 C0 00 00      cmp b, 0
1871   0FEA C6 63 10      je _while40_exit
1872   0FED             _while40_block:
1873   0FED             ; digits[i] = '0' + (num % 10); 
1874   0FED FA F7 FF      lea d, [bp + -9] ; $digits
1875   0FF0 D7            push a
1876   0FF1 DA            push d
1877   0FF2 FA F5 FF      lea d, [bp + -11] ; $i
1878   0FF5 2A            mov b, [d]
1879   0FF6 38 00 00      mov c, 0
1880   0FF9 E7            pop d
1881   0FFA 5A            add d, b
1882   0FFB E4            pop a
1883   0FFC DA            push d
1884   0FFD FD 2E 30 00   mov32 cb, $00000030
1884   1001 00 00 
1885   1003             ; --- START TERMS
1886   1003 D7            push a
1887   1004 11            mov a, b
1888   1005 FA 05 00      lea d, [bp + 5] ; $num
1889   1008 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1890   100B FD 39         mov c, b ; And place it into C
1891   100D 2A            mov b, [d] ; Lower Word in B
1892   100E             ; --- START FACTORS
1893   100E D7            push a
1894   100F FD D8         push g
1895   1011 11            mov a, b
1896   1012 FD 7A         mov g, c
1897   1014 FD 2E 0A 00   mov32 cb, $0000000a
1897   1018 00 00 
1898   101A AE            div a, b ; 
1899   101B 11            mov a, b
1900   101C FD 38         mov c, g
1901   101E 27            mov b, a
1902   101F FD F1         pop g
1903   1021 E4            pop a
1904   1022             ; --- END FACTORS
1905   1022 FD 15         add32 cb, ga
1906   1024 E4            pop a
1907   1025             ; --- END TERMS
1908   1025 E7            pop d
1909   1026 FD 3E         mov [d], bl
1910   1028             ; num = num / 10; 
1911   1028 FA 05 00      lea d, [bp + 5] ; $num
1912   102B DA            push d
1913   102C FA 05 00      lea d, [bp + 5] ; $num
1914   102F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1915   1032 FD 39         mov c, b ; And place it into C
1916   1034 2A            mov b, [d] ; Lower Word in B
1917   1035             ; --- START FACTORS
1918   1035 D7            push a
1919   1036 FD D8         push g
1920   1038 11            mov a, b
1921   1039 FD 7A         mov g, c
1922   103B FD 2E 0A 00   mov32 cb, $0000000a
1922   103F 00 00 
1923   1041 AE            div a, b
1924   1042 FD 38         mov c, g
1925   1044 27            mov b, a
1926   1045 FD F1         pop g
1927   1047 E4            pop a
1928   1048             ; --- END FACTORS
1929   1048 E7            pop d
1930   1049 FD 43         mov [d], b
1931   104B 28            mov b, c
1932   104C FD 44 02 00   mov [d + 2], b
1933   1050             ; i++; 
1934   1050 FA F5 FF      lea d, [bp + -11] ; $i
1935   1053 2A            mov b, [d]
1936   1054 38 00 00      mov c, 0
1937   1057 11            mov a, b
1938   1058 FD 77         inc b
1939   105A FA F5 FF      lea d, [bp + -11] ; $i
1940   105D FD 43         mov [d], b
1941   105F 27            mov b, a
1942   1060 0A CB 0F      jmp _while40_cond
1943   1063             _while40_exit:
1944   1063             ; while (i > 0) { 
1945   1063             _while47_cond:
1946   1063 FA F5 FF      lea d, [bp + -11] ; $i
1947   1066 2A            mov b, [d]
1948   1067 38 00 00      mov c, 0
1949   106A             ; --- START RELATIONAL
1950   106A D7            push a
1951   106B 11            mov a, b
1952   106C FD 2E 00 00   mov32 cb, $00000000
1952   1070 00 00 
1953   1072 B0            cmp a, b
1954   1073 FD 7F         sgt ; >
1955   1075 E4            pop a
1956   1076             ; --- END RELATIONAL
1957   1076 C0 00 00      cmp b, 0
1958   1079 C6 AB 10      je _while47_exit
1959   107C             _while47_block:
1960   107C             ; i--; 
1961   107C FA F5 FF      lea d, [bp + -11] ; $i
1962   107F 2A            mov b, [d]
1963   1080 38 00 00      mov c, 0
1964   1083 11            mov a, b
1965   1084 FD 7D         dec b
1966   1086 FA F5 FF      lea d, [bp + -11] ; $i
1967   1089 FD 43         mov [d], b
1968   108B 27            mov b, a
1969   108C             ; putchar(digits[i]); 
1970   108C             ; --- START FUNCTION CALL
1971   108C FA F7 FF      lea d, [bp + -9] ; $digits
1972   108F D7            push a
1973   1090 DA            push d
1974   1091 FA F5 FF      lea d, [bp + -11] ; $i
1975   1094 2A            mov b, [d]
1976   1095 38 00 00      mov c, 0
1977   1098 E7            pop d
1978   1099 5A            add d, b
1979   109A E4            pop a
1980   109B 32            mov bl, [d]
1981   109C A7 00         mov bh, 0
1982   109E 38 00 00      mov c, 0
1983   10A1 DD            push bl
1984   10A2 07 73 0F      call putchar
1985   10A5 51 01 00      add sp, 1
1986   10A8             ; --- END FUNCTION CALL
1987   10A8 0A 63 10      jmp _while47_cond
1988   10AB             _while47_exit:
1989   10AB F9            leave
1990   10AC 09            ret
1991   10AD             
1992   10AD             printx32:
1993   10AD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1994   10B0             ; --- BEGIN INLINE ASM SEGMENT
1995   10B0 FA 05 00      lea d, [bp + 5] ; $hex
1996   10B3 2B 02 00      mov b, [d+2]
1997   10B6 07 BF 10      call print_u16x_printx32
1998   10B9 2A            mov b, [d]
1999   10BA 07 BF 10      call print_u16x_printx32
2000   10BD             ; --- END INLINE ASM SEGMENT
2001   10BD             ; return; 
2002   10BD F9            leave
2003   10BE 09            ret
2004   10BF             ; --- BEGIN INLINE ASM SEGMENT
2005   10BF             print_u16x_printx32:
2006   10BF D7            push a
2007   10C0 D8            push b
2008   10C1 DD            push bl
2009   10C2 30            mov bl, bh
2010   10C3 07 E1 10      call _itoa_printx32        
2011   10C6 2F            mov bl, al        
2012   10C7 19 00         mov al, 0
2013   10C9 05 03         syscall sys_io        
2014   10CB 24            mov ah, bl        
2015   10CC 19 00         mov al, 0
2016   10CE 05 03         syscall sys_io        
2017   10D0 EA            pop bl
2018   10D1 07 E1 10      call _itoa_printx32        
2019   10D4 2F            mov bl, al        
2020   10D5 19 00         mov al, 0
2021   10D7 05 03         syscall sys_io        
2022   10D9 24            mov ah, bl        
2023   10DA 19 00         mov al, 0
2024   10DC 05 03         syscall sys_io        
2025   10DE E5            pop b
2026   10DF E4            pop a
2027   10E0 09            ret
2028   10E1             _itoa_printx32:
2029   10E1 DA            push d
2030   10E2 D8            push b
2031   10E3 A7 00         mov bh, 0
2032   10E5 FD A4 04      shr bl, 4  
2033   10E8 74            mov d, b
2034   10E9 1F FB 10      mov al, [d + s_hex_digits_printx32]
2035   10EC 23            mov ah, al
2036   10ED E5            pop b
2037   10EE D8            push b
2038   10EF A7 00         mov bh, 0
2039   10F1 FD 87 0F      and bl, $0F
2040   10F4 74            mov d, b
2041   10F5 1F FB 10      mov al, [d + s_hex_digits_printx32]
2042   10F8 E5            pop b
2043   10F9 E7            pop d
2044   10FA 09            ret
2045   10FB 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2045   10FF 34 35 36 37 
2045   1103 38 39 41 42 
2045   1107 43 44 45 46 
2046   110B             ; --- END INLINE ASM SEGMENT
2047   110B F9            leave
2048   110C 09            ret
2049   110D             
2050   110D             err:
2051   110D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2052   1110             ; print(e); 
2053   1110             ; --- START FUNCTION CALL
2054   1110 FA 05 00      lea d, [bp + 5] ; $e
2055   1113 2A            mov b, [d]
2056   1114 38 00 00      mov c, 0
2057   1117 FD AB         swp b
2058   1119 D8            push b
2059   111A 07 22 11      call print
2060   111D 51 02 00      add sp, 2
2061   1120             ; --- END FUNCTION CALL
2062   1120 F9            leave
2063   1121 09            ret
2064   1122             
2065   1122             print:
2066   1122 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2067   1125             ; --- BEGIN INLINE ASM SEGMENT
2068   1125 FA 05 00      lea d, [bp + 5] ; $s
2069   1128 FD 2A         mov d, [d]
2070   112A             _puts_L1_print:
2071   112A 1E            mov al, [d]
2072   112B B9 00         cmp al, 0
2073   112D C6 39 11      jz _puts_END_print
2074   1130 23            mov ah, al
2075   1131 19 00         mov al, 0
2076   1133 05 03         syscall sys_io
2077   1135 79            inc d
2078   1136 0A 2A 11      jmp _puts_L1_print
2079   1139             _puts_END_print:
2080   1139             ; --- END INLINE ASM SEGMENT
2081   1139 F9            leave
2082   113A 09            ret
2083   113B             
2084   113B             print_signed:
2085   113B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2086   113E             ; char digits[5]; 
2087   113E 52 05 00      sub sp, 5
2088   1141             ; int i = 0; 
2089   1141 52 02 00      sub sp, 2
2090   1144             ; --- START LOCAL VAR INITIALIZATION
2091   1144 FA FA FF      lea d, [bp + -6] ; $i
2092   1147 DA            push d
2093   1148 FD 2E 00 00   mov32 cb, $00000000
2093   114C 00 00 
2094   114E E7            pop d
2095   114F FD 43         mov [d], b
2096   1151             ; --- END LOCAL VAR INITIALIZATION
2097   1151             ; if (num < 0) { 
2098   1151             _if48_cond:
2099   1151 FA 05 00      lea d, [bp + 5] ; $num
2100   1154 2A            mov b, [d]
2101   1155 38 00 00      mov c, 0
2102   1158             ; --- START RELATIONAL
2103   1158 D7            push a
2104   1159 11            mov a, b
2105   115A FD 2E 00 00   mov32 cb, $00000000
2105   115E 00 00 
2106   1160 B0            cmp a, b
2107   1161 FD 73         slt ; < (signed)
2108   1163 E4            pop a
2109   1164             ; --- END RELATIONAL
2110   1164 C0 00 00      cmp b, 0
2111   1167 C6 8A 11      je _if48_else
2112   116A             _if48_TRUE:
2113   116A             ; putchar('-'); 
2114   116A             ; --- START FUNCTION CALL
2115   116A FD 2E 2D 00   mov32 cb, $0000002d
2115   116E 00 00 
2116   1170 DD            push bl
2117   1171 07 73 0F      call putchar
2118   1174 51 01 00      add sp, 1
2119   1177             ; --- END FUNCTION CALL
2120   1177             ; num = -num; 
2121   1177 FA 05 00      lea d, [bp + 5] ; $num
2122   117A DA            push d
2123   117B FA 05 00      lea d, [bp + 5] ; $num
2124   117E 2A            mov b, [d]
2125   117F 38 00 00      mov c, 0
2126   1182 FD 97         neg b
2127   1184 E7            pop d
2128   1185 FD 43         mov [d], b
2129   1187 0A B5 11      jmp _if48_exit
2130   118A             _if48_else:
2131   118A             ; if (num == 0) { 
2132   118A             _if49_cond:
2133   118A FA 05 00      lea d, [bp + 5] ; $num
2134   118D 2A            mov b, [d]
2135   118E 38 00 00      mov c, 0
2136   1191             ; --- START RELATIONAL
2137   1191 D7            push a
2138   1192 11            mov a, b
2139   1193 FD 2E 00 00   mov32 cb, $00000000
2139   1197 00 00 
2140   1199 B0            cmp a, b
2141   119A FD 71         seq ; ==
2142   119C E4            pop a
2143   119D             ; --- END RELATIONAL
2144   119D C0 00 00      cmp b, 0
2145   11A0 C6 B5 11      je _if49_exit
2146   11A3             _if49_TRUE:
2147   11A3             ; putchar('0'); 
2148   11A3             ; --- START FUNCTION CALL
2149   11A3 FD 2E 30 00   mov32 cb, $00000030
2149   11A7 00 00 
2150   11A9 DD            push bl
2151   11AA 07 73 0F      call putchar
2152   11AD 51 01 00      add sp, 1
2153   11B0             ; --- END FUNCTION CALL
2154   11B0             ; return; 
2155   11B0 F9            leave
2156   11B1 09            ret
2157   11B2 0A B5 11      jmp _if49_exit
2158   11B5             _if49_exit:
2159   11B5             _if48_exit:
2160   11B5             ; while (num > 0) { 
2161   11B5             _while50_cond:
2162   11B5 FA 05 00      lea d, [bp + 5] ; $num
2163   11B8 2A            mov b, [d]
2164   11B9 38 00 00      mov c, 0
2165   11BC             ; --- START RELATIONAL
2166   11BC D7            push a
2167   11BD 11            mov a, b
2168   11BE FD 2E 00 00   mov32 cb, $00000000
2168   11C2 00 00 
2169   11C4 B0            cmp a, b
2170   11C5 FD 7F         sgt ; >
2171   11C7 E4            pop a
2172   11C8             ; --- END RELATIONAL
2173   11C8 C0 00 00      cmp b, 0
2174   11CB C6 3A 12      je _while50_exit
2175   11CE             _while50_block:
2176   11CE             ; digits[i] = '0' + (num % 10); 
2177   11CE FA FC FF      lea d, [bp + -4] ; $digits
2178   11D1 D7            push a
2179   11D2 DA            push d
2180   11D3 FA FA FF      lea d, [bp + -6] ; $i
2181   11D6 2A            mov b, [d]
2182   11D7 38 00 00      mov c, 0
2183   11DA E7            pop d
2184   11DB 5A            add d, b
2185   11DC E4            pop a
2186   11DD DA            push d
2187   11DE FD 2E 30 00   mov32 cb, $00000030
2187   11E2 00 00 
2188   11E4             ; --- START TERMS
2189   11E4 D7            push a
2190   11E5 11            mov a, b
2191   11E6 FA 05 00      lea d, [bp + 5] ; $num
2192   11E9 2A            mov b, [d]
2193   11EA 38 00 00      mov c, 0
2194   11ED             ; --- START FACTORS
2195   11ED D7            push a
2196   11EE FD D8         push g
2197   11F0 11            mov a, b
2198   11F1 FD 7A         mov g, c
2199   11F3 FD 2E 0A 00   mov32 cb, $0000000a
2199   11F7 00 00 
2200   11F9 AE            div a, b ; 
2201   11FA 11            mov a, b
2202   11FB FD 38         mov c, g
2203   11FD 27            mov b, a
2204   11FE FD F1         pop g
2205   1200 E4            pop a
2206   1201             ; --- END FACTORS
2207   1201 56            add b, a
2208   1202 E4            pop a
2209   1203             ; --- END TERMS
2210   1203 E7            pop d
2211   1204 FD 3E         mov [d], bl
2212   1206             ; num = num / 10; 
2213   1206 FA 05 00      lea d, [bp + 5] ; $num
2214   1209 DA            push d
2215   120A FA 05 00      lea d, [bp + 5] ; $num
2216   120D 2A            mov b, [d]
2217   120E 38 00 00      mov c, 0
2218   1211             ; --- START FACTORS
2219   1211 D7            push a
2220   1212 FD D8         push g
2221   1214 11            mov a, b
2222   1215 FD 7A         mov g, c
2223   1217 FD 2E 0A 00   mov32 cb, $0000000a
2223   121B 00 00 
2224   121D AE            div a, b
2225   121E FD 38         mov c, g
2226   1220 27            mov b, a
2227   1221 FD F1         pop g
2228   1223 E4            pop a
2229   1224             ; --- END FACTORS
2230   1224 E7            pop d
2231   1225 FD 43         mov [d], b
2232   1227             ; i++; 
2233   1227 FA FA FF      lea d, [bp + -6] ; $i
2234   122A 2A            mov b, [d]
2235   122B 38 00 00      mov c, 0
2236   122E 11            mov a, b
2237   122F FD 77         inc b
2238   1231 FA FA FF      lea d, [bp + -6] ; $i
2239   1234 FD 43         mov [d], b
2240   1236 27            mov b, a
2241   1237 0A B5 11      jmp _while50_cond
2242   123A             _while50_exit:
2243   123A             ; while (i > 0) { 
2244   123A             _while57_cond:
2245   123A FA FA FF      lea d, [bp + -6] ; $i
2246   123D 2A            mov b, [d]
2247   123E 38 00 00      mov c, 0
2248   1241             ; --- START RELATIONAL
2249   1241 D7            push a
2250   1242 11            mov a, b
2251   1243 FD 2E 00 00   mov32 cb, $00000000
2251   1247 00 00 
2252   1249 B0            cmp a, b
2253   124A FD 7F         sgt ; >
2254   124C E4            pop a
2255   124D             ; --- END RELATIONAL
2256   124D C0 00 00      cmp b, 0
2257   1250 C6 82 12      je _while57_exit
2258   1253             _while57_block:
2259   1253             ; i--; 
2260   1253 FA FA FF      lea d, [bp + -6] ; $i
2261   1256 2A            mov b, [d]
2262   1257 38 00 00      mov c, 0
2263   125A 11            mov a, b
2264   125B FD 7D         dec b
2265   125D FA FA FF      lea d, [bp + -6] ; $i
2266   1260 FD 43         mov [d], b
2267   1262 27            mov b, a
2268   1263             ; putchar(digits[i]); 
2269   1263             ; --- START FUNCTION CALL
2270   1263 FA FC FF      lea d, [bp + -4] ; $digits
2271   1266 D7            push a
2272   1267 DA            push d
2273   1268 FA FA FF      lea d, [bp + -6] ; $i
2274   126B 2A            mov b, [d]
2275   126C 38 00 00      mov c, 0
2276   126F E7            pop d
2277   1270 5A            add d, b
2278   1271 E4            pop a
2279   1272 32            mov bl, [d]
2280   1273 A7 00         mov bh, 0
2281   1275 38 00 00      mov c, 0
2282   1278 DD            push bl
2283   1279 07 73 0F      call putchar
2284   127C 51 01 00      add sp, 1
2285   127F             ; --- END FUNCTION CALL
2286   127F 0A 3A 12      jmp _while57_cond
2287   1282             _while57_exit:
2288   1282 F9            leave
2289   1283 09            ret
2290   1284             
2291   1284             print_unsigned:
2292   1284 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2293   1287             ; char digits[5]; 
2294   1287 52 05 00      sub sp, 5
2295   128A             ; int i; 
2296   128A 52 02 00      sub sp, 2
2297   128D             ; i = 0; 
2298   128D FA FA FF      lea d, [bp + -6] ; $i
2299   1290 DA            push d
2300   1291 FD 2E 00 00   mov32 cb, $00000000
2300   1295 00 00 
2301   1297 E7            pop d
2302   1298 FD 43         mov [d], b
2303   129A             ; if(num == 0){ 
2304   129A             _if58_cond:
2305   129A FA 05 00      lea d, [bp + 5] ; $num
2306   129D 2A            mov b, [d]
2307   129E 38 00 00      mov c, 0
2308   12A1             ; --- START RELATIONAL
2309   12A1 D7            push a
2310   12A2 11            mov a, b
2311   12A3 FD 2E 00 00   mov32 cb, $00000000
2311   12A7 00 00 
2312   12A9 B0            cmp a, b
2313   12AA FD 71         seq ; ==
2314   12AC E4            pop a
2315   12AD             ; --- END RELATIONAL
2316   12AD C0 00 00      cmp b, 0
2317   12B0 C6 C5 12      je _if58_exit
2318   12B3             _if58_TRUE:
2319   12B3             ; putchar('0'); 
2320   12B3             ; --- START FUNCTION CALL
2321   12B3 FD 2E 30 00   mov32 cb, $00000030
2321   12B7 00 00 
2322   12B9 DD            push bl
2323   12BA 07 73 0F      call putchar
2324   12BD 51 01 00      add sp, 1
2325   12C0             ; --- END FUNCTION CALL
2326   12C0             ; return; 
2327   12C0 F9            leave
2328   12C1 09            ret
2329   12C2 0A C5 12      jmp _if58_exit
2330   12C5             _if58_exit:
2331   12C5             ; while (num > 0) { 
2332   12C5             _while59_cond:
2333   12C5 FA 05 00      lea d, [bp + 5] ; $num
2334   12C8 2A            mov b, [d]
2335   12C9 38 00 00      mov c, 0
2336   12CC             ; --- START RELATIONAL
2337   12CC D7            push a
2338   12CD 11            mov a, b
2339   12CE FD 2E 00 00   mov32 cb, $00000000
2339   12D2 00 00 
2340   12D4 B0            cmp a, b
2341   12D5 FD 81         sgu ; > (unsigned)
2342   12D7 E4            pop a
2343   12D8             ; --- END RELATIONAL
2344   12D8 C0 00 00      cmp b, 0
2345   12DB C6 4A 13      je _while59_exit
2346   12DE             _while59_block:
2347   12DE             ; digits[i] = '0' + (num % 10); 
2348   12DE FA FC FF      lea d, [bp + -4] ; $digits
2349   12E1 D7            push a
2350   12E2 DA            push d
2351   12E3 FA FA FF      lea d, [bp + -6] ; $i
2352   12E6 2A            mov b, [d]
2353   12E7 38 00 00      mov c, 0
2354   12EA E7            pop d
2355   12EB 5A            add d, b
2356   12EC E4            pop a
2357   12ED DA            push d
2358   12EE FD 2E 30 00   mov32 cb, $00000030
2358   12F2 00 00 
2359   12F4             ; --- START TERMS
2360   12F4 D7            push a
2361   12F5 11            mov a, b
2362   12F6 FA 05 00      lea d, [bp + 5] ; $num
2363   12F9 2A            mov b, [d]
2364   12FA 38 00 00      mov c, 0
2365   12FD             ; --- START FACTORS
2366   12FD D7            push a
2367   12FE FD D8         push g
2368   1300 11            mov a, b
2369   1301 FD 7A         mov g, c
2370   1303 FD 2E 0A 00   mov32 cb, $0000000a
2370   1307 00 00 
2371   1309 AE            div a, b ; 
2372   130A 11            mov a, b
2373   130B FD 38         mov c, g
2374   130D 27            mov b, a
2375   130E FD F1         pop g
2376   1310 E4            pop a
2377   1311             ; --- END FACTORS
2378   1311 56            add b, a
2379   1312 E4            pop a
2380   1313             ; --- END TERMS
2381   1313 E7            pop d
2382   1314 FD 3E         mov [d], bl
2383   1316             ; num = num / 10; 
2384   1316 FA 05 00      lea d, [bp + 5] ; $num
2385   1319 DA            push d
2386   131A FA 05 00      lea d, [bp + 5] ; $num
2387   131D 2A            mov b, [d]
2388   131E 38 00 00      mov c, 0
2389   1321             ; --- START FACTORS
2390   1321 D7            push a
2391   1322 FD D8         push g
2392   1324 11            mov a, b
2393   1325 FD 7A         mov g, c
2394   1327 FD 2E 0A 00   mov32 cb, $0000000a
2394   132B 00 00 
2395   132D AE            div a, b
2396   132E FD 38         mov c, g
2397   1330 27            mov b, a
2398   1331 FD F1         pop g
2399   1333 E4            pop a
2400   1334             ; --- END FACTORS
2401   1334 E7            pop d
2402   1335 FD 43         mov [d], b
2403   1337             ; i++; 
2404   1337 FA FA FF      lea d, [bp + -6] ; $i
2405   133A 2A            mov b, [d]
2406   133B 38 00 00      mov c, 0
2407   133E 11            mov a, b
2408   133F FD 77         inc b
2409   1341 FA FA FF      lea d, [bp + -6] ; $i
2410   1344 FD 43         mov [d], b
2411   1346 27            mov b, a
2412   1347 0A C5 12      jmp _while59_cond
2413   134A             _while59_exit:
2414   134A             ; while (i > 0) { 
2415   134A             _while66_cond:
2416   134A FA FA FF      lea d, [bp + -6] ; $i
2417   134D 2A            mov b, [d]
2418   134E 38 00 00      mov c, 0
2419   1351             ; --- START RELATIONAL
2420   1351 D7            push a
2421   1352 11            mov a, b
2422   1353 FD 2E 00 00   mov32 cb, $00000000
2422   1357 00 00 
2423   1359 B0            cmp a, b
2424   135A FD 7F         sgt ; >
2425   135C E4            pop a
2426   135D             ; --- END RELATIONAL
2427   135D C0 00 00      cmp b, 0
2428   1360 C6 92 13      je _while66_exit
2429   1363             _while66_block:
2430   1363             ; i--; 
2431   1363 FA FA FF      lea d, [bp + -6] ; $i
2432   1366 2A            mov b, [d]
2433   1367 38 00 00      mov c, 0
2434   136A 11            mov a, b
2435   136B FD 7D         dec b
2436   136D FA FA FF      lea d, [bp + -6] ; $i
2437   1370 FD 43         mov [d], b
2438   1372 27            mov b, a
2439   1373             ; putchar(digits[i]); 
2440   1373             ; --- START FUNCTION CALL
2441   1373 FA FC FF      lea d, [bp + -4] ; $digits
2442   1376 D7            push a
2443   1377 DA            push d
2444   1378 FA FA FF      lea d, [bp + -6] ; $i
2445   137B 2A            mov b, [d]
2446   137C 38 00 00      mov c, 0
2447   137F E7            pop d
2448   1380 5A            add d, b
2449   1381 E4            pop a
2450   1382 32            mov bl, [d]
2451   1383 A7 00         mov bh, 0
2452   1385 38 00 00      mov c, 0
2453   1388 DD            push bl
2454   1389 07 73 0F      call putchar
2455   138C 51 01 00      add sp, 1
2456   138F             ; --- END FUNCTION CALL
2457   138F 0A 4A 13      jmp _while66_cond
2458   1392             _while66_exit:
2459   1392 F9            leave
2460   1393 09            ret
2461   1394             
2462   1394             printx16:
2463   1394 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2464   1397             ; --- BEGIN INLINE ASM SEGMENT
2465   1397 FA 05 00      lea d, [bp + 5] ; $hex
2466   139A 2A            mov b, [d]
2467   139B             print_u16x_printx16:
2468   139B DD            push bl
2469   139C 30            mov bl, bh
2470   139D 07 BA 13      call _itoa_printx16        
2471   13A0 2F            mov bl, al        
2472   13A1 19 00         mov al, 0
2473   13A3 05 03         syscall sys_io        
2474   13A5 24            mov ah, bl        
2475   13A6 19 00         mov al, 0
2476   13A8 05 03         syscall sys_io        
2477   13AA EA            pop bl
2478   13AB 07 BA 13      call _itoa_printx16        
2479   13AE 2F            mov bl, al        
2480   13AF 19 00         mov al, 0
2481   13B1 05 03         syscall sys_io        
2482   13B3 24            mov ah, bl        
2483   13B4 19 00         mov al, 0
2484   13B6 05 03         syscall sys_io        
2485   13B8             ; --- END INLINE ASM SEGMENT
2486   13B8             ; return; 
2487   13B8 F9            leave
2488   13B9 09            ret
2489   13BA             ; --- BEGIN INLINE ASM SEGMENT
2490   13BA             _itoa_printx16:
2491   13BA DA            push d
2492   13BB D8            push b
2493   13BC A7 00         mov bh, 0
2494   13BE FD A4 04      shr bl, 4  
2495   13C1 74            mov d, b
2496   13C2 1F D4 13      mov al, [d + s_hex_digits_printx16]
2497   13C5 23            mov ah, al
2498   13C6 E5            pop b
2499   13C7 D8            push b
2500   13C8 A7 00         mov bh, 0
2501   13CA FD 87 0F      and bl, $0F
2502   13CD 74            mov d, b
2503   13CE 1F D4 13      mov al, [d + s_hex_digits_printx16]
2504   13D1 E5            pop b
2505   13D2 E7            pop d
2506   13D3 09            ret
2507   13D4 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2507   13D8 34 35 36 37 
2507   13DC 38 39 41 42 
2507   13E0 43 44 45 46 
2508   13E4             ; --- END INLINE ASM SEGMENT
2509   13E4 F9            leave
2510   13E5 09            ret
2511   13E6             
2512   13E6             puts:
2513   13E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2514   13E9             ; --- BEGIN INLINE ASM SEGMENT
2515   13E9 FA 05 00      lea d, [bp + 5] ; $s
2516   13EC FD 2A         mov d, [d]
2517   13EE             _puts_L1_puts:
2518   13EE 1E            mov al, [d]
2519   13EF B9 00         cmp al, 0
2520   13F1 C6 FD 13      jz _puts_END_puts
2521   13F4 23            mov ah, al
2522   13F5 19 00         mov al, 0
2523   13F7 05 03         syscall sys_io
2524   13F9 79            inc d
2525   13FA 0A EE 13      jmp _puts_L1_puts
2526   13FD             _puts_END_puts:
2527   13FD 10 00 0A      mov a, $0A00
2528   1400 05 03         syscall sys_io
2529   1402             ; --- END INLINE ASM SEGMENT
2530   1402 F9            leave
2531   1403 09            ret
2532   1404             ; --- END TEXT SEGMENT
2533   1404             
2534   1404             ; --- BEGIN DATA SEGMENT
2535   1404             _clear_data: 
2536   1404 00          .db 
2537   1405 1B 5B 32 4A .db $1b,$5b,$32,$4a,$1b,$5b,$48,$0,
2537   1409 1B 5B 48 00 
2538   140D 00 00 00    .fill 3, 0
2539   1410 00 00 00 00 _nextState_data: .fill 1200, 0
2539   1414 00 00 00 00 
2539   1418 00 00 00 00 
2539   141C 00 00 00 00 
2539   1420 00 00 00 00 
2539   1424 00 00 00 00 
2539   1428 00 00 00 00 
2539   142C 00 00 00 00 
2539   1430 00 00 00 00 
2539   1434 00 00 00 00 
2539   1438 00 00 00 00 
2539   143C 00 00 00 00 
2539   1440 00 00 00 00 
2539   1444 00 00 00 00 
2539   1448 00 00 00 00 
2539   144C 00 00 00 00 
2539   1450 00 00 00 00 
2539   1454 00 00 00 00 
2539   1458 00 00 00 00 
2539   145C 00 00 00 00 
2539   1460 00 00 00 00 
2539   1464 00 00 00 00 
2539   1468 00 00 00 00 
2539   146C 00 00 00 00 
2539   1470 00 00 00 00 
2539   1474 00 00 00 00 
2539   1478 00 00 00 00 
2539   147C 00 00 00 00 
2539   1480 00 00 00 00 
2539   1484 00 00 00 00 
2539   1488 00 00 00 00 
2539   148C 00 00 00 00 
2539   1490 00 00 00 00 
2539   1494 00 00 00 00 
2539   1498 00 00 00 00 
2539   149C 00 00 00 00 
2539   14A0 00 00 00 00 
2539   14A4 00 00 00 00 
2539   14A8 00 00 00 00 
2539   14AC 00 00 00 00 
2539   14B0 00 00 00 00 
2539   14B4 00 00 00 00 
2539   14B8 00 00 00 00 
2539   14BC 00 00 00 00 
2539   14C0 00 00 00 00 
2539   14C4 00 00 00 00 
2539   14C8 00 00 00 00 
2539   14CC 00 00 00 00 
2539   14D0 00 00 00 00 
2539   14D4 00 00 00 00 
2539   14D8 00 00 00 00 
2539   14DC 00 00 00 00 
2539   14E0 00 00 00 00 
2539   14E4 00 00 00 00 
2539   14E8 00 00 00 00 
2539   14EC 00 00 00 00 
2539   14F0 00 00 00 00 
2539   14F4 00 00 00 00 
2539   14F8 00 00 00 00 
2539   14FC 00 00 00 00 
2539   1500 00 00 00 00 
2539   1504 00 00 00 00 
2539   1508 00 00 00 00 
2539   150C 00 00 00 00 
2539   1510 00 00 00 00 
2539   1514 00 00 00 00 
2539   1518 00 00 00 00 
2539   151C 00 00 00 00 
2539   1520 00 00 00 00 
2539   1524 00 00 00 00 
2539   1528 00 00 00 00 
2539   152C 00 00 00 00 
2539   1530 00 00 00 00 
2539   1534 00 00 00 00 
2539   1538 00 00 00 00 
2539   153C 00 00 00 00 
2539   1540 00 00 00 00 
2539   1544 00 00 00 00 
2539   1548 00 00 00 00 
2539   154C 00 00 00 00 
2539   1550 00 00 00 00 
2539   1554 00 00 00 00 
2539   1558 00 00 00 00 
2539   155C 00 00 00 00 
2539   1560 00 00 00 00 
2539   1564 00 00 00 00 
2539   1568 00 00 00 00 
2539   156C 00 00 00 00 
2539   1570 00 00 00 00 
2539   1574 00 00 00 00 
2539   1578 00 00 00 00 
2539   157C 00 00 00 00 
2539   1580 00 00 00 00 
2539   1584 00 00 00 00 
2539   1588 00 00 00 00 
2539   158C 00 00 00 00 
2539   1590 00 00 00 00 
2539   1594 00 00 00 00 
2539   1598 00 00 00 00 
2539   159C 00 00 00 00 
2539   15A0 00 00 00 00 
2539   15A4 00 00 00 00 
2539   15A8 00 00 00 00 
2539   15AC 00 00 00 00 
2539   15B0 00 00 00 00 
2539   15B4 00 00 00 00 
2539   15B8 00 00 00 00 
2539   15BC 00 00 00 00 
2539   15C0 00 00 00 00 
2539   15C4 00 00 00 00 
2539   15C8 00 00 00 00 
2539   15CC 00 00 00 00 
2539   15D0 00 00 00 00 
2539   15D4 00 00 00 00 
2539   15D8 00 00 00 00 
2539   15DC 00 00 00 00 
2539   15E0 00 00 00 00 
2539   15E4 00 00 00 00 
2539   15E8 00 00 00 00 
2539   15EC 00 00 00 00 
2539   15F0 00 00 00 00 
2539   15F4 00 00 00 00 
2539   15F8 00 00 00 00 
2539   15FC 00 00 00 00 
2539   1600 00 00 00 00 
2539   1604 00 00 00 00 
2539   1608 00 00 00 00 
2539   160C 00 00 00 00 
2539   1610 00 00 00 00 
2539   1614 00 00 00 00 
2539   1618 00 00 00 00 
2539   161C 00 00 00 00 
2539   1620 00 00 00 00 
2539   1624 00 00 00 00 
2539   1628 00 00 00 00 
2539   162C 00 00 00 00 
2539   1630 00 00 00 00 
2539   1634 00 00 00 00 
2539   1638 00 00 00 00 
2539   163C 00 00 00 00 
2539   1640 00 00 00 00 
2539   1644 00 00 00 00 
2539   1648 00 00 00 00 
2539   164C 00 00 00 00 
2539   1650 00 00 00 00 
2539   1654 00 00 00 00 
2539   1658 00 00 00 00 
2539   165C 00 00 00 00 
2539   1660 00 00 00 00 
2539   1664 00 00 00 00 
2539   1668 00 00 00 00 
2539   166C 00 00 00 00 
2539   1670 00 00 00 00 
2539   1674 00 00 00 00 
2539   1678 00 00 00 00 
2539   167C 00 00 00 00 
2539   1680 00 00 00 00 
2539   1684 00 00 00 00 
2539   1688 00 00 00 00 
2539   168C 00 00 00 00 
2539   1690 00 00 00 00 
2539   1694 00 00 00 00 
2539   1698 00 00 00 00 
2539   169C 00 00 00 00 
2539   16A0 00 00 00 00 
2539   16A4 00 00 00 00 
2539   16A8 00 00 00 00 
2539   16AC 00 00 00 00 
2539   16B0 00 00 00 00 
2539   16B4 00 00 00 00 
2539   16B8 00 00 00 00 
2539   16BC 00 00 00 00 
2539   16C0 00 00 00 00 
2539   16C4 00 00 00 00 
2539   16C8 00 00 00 00 
2539   16CC 00 00 00 00 
2539   16D0 00 00 00 00 
2539   16D4 00 00 00 00 
2539   16D8 00 00 00 00 
2539   16DC 00 00 00 00 
2539   16E0 00 00 00 00 
2539   16E4 00 00 00 00 
2539   16E8 00 00 00 00 
2539   16EC 00 00 00 00 
2539   16F0 00 00 00 00 
2539   16F4 00 00 00 00 
2539   16F8 00 00 00 00 
2539   16FC 00 00 00 00 
2539   1700 00 00 00 00 
2539   1704 00 00 00 00 
2539   1708 00 00 00 00 
2539   170C 00 00 00 00 
2539   1710 00 00 00 00 
2539   1714 00 00 00 00 
2539   1718 00 00 00 00 
2539   171C 00 00 00 00 
2539   1720 00 00 00 00 
2539   1724 00 00 00 00 
2539   1728 00 00 00 00 
2539   172C 00 00 00 00 
2539   1730 00 00 00 00 
2539   1734 00 00 00 00 
2539   1738 00 00 00 00 
2539   173C 00 00 00 00 
2539   1740 00 00 00 00 
2539   1744 00 00 00 00 
2539   1748 00 00 00 00 
2539   174C 00 00 00 00 
2539   1750 00 00 00 00 
2539   1754 00 00 00 00 
2539   1758 00 00 00 00 
2539   175C 00 00 00 00 
2539   1760 00 00 00 00 
2539   1764 00 00 00 00 
2539   1768 00 00 00 00 
2539   176C 00 00 00 00 
2539   1770 00 00 00 00 
2539   1774 00 00 00 00 
2539   1778 00 00 00 00 
2539   177C 00 00 00 00 
2539   1780 00 00 00 00 
2539   1784 00 00 00 00 
2539   1788 00 00 00 00 
2539   178C 00 00 00 00 
2539   1790 00 00 00 00 
2539   1794 00 00 00 00 
2539   1798 00 00 00 00 
2539   179C 00 00 00 00 
2539   17A0 00 00 00 00 
2539   17A4 00 00 00 00 
2539   17A8 00 00 00 00 
2539   17AC 00 00 00 00 
2539   17B0 00 00 00 00 
2539   17B4 00 00 00 00 
2539   17B8 00 00 00 00 
2539   17BC 00 00 00 00 
2539   17C0 00 00 00 00 
2539   17C4 00 00 00 00 
2539   17C8 00 00 00 00 
2539   17CC 00 00 00 00 
2539   17D0 00 00 00 00 
2539   17D4 00 00 00 00 
2539   17D8 00 00 00 00 
2539   17DC 00 00 00 00 
2539   17E0 00 00 00 00 
2539   17E4 00 00 00 00 
2539   17E8 00 00 00 00 
2539   17EC 00 00 00 00 
2539   17F0 00 00 00 00 
2539   17F4 00 00 00 00 
2539   17F8 00 00 00 00 
2539   17FC 00 00 00 00 
2539   1800 00 00 00 00 
2539   1804 00 00 00 00 
2539   1808 00 00 00 00 
2539   180C 00 00 00 00 
2539   1810 00 00 00 00 
2539   1814 00 00 00 00 
2539   1818 00 00 00 00 
2539   181C 00 00 00 00 
2539   1820 00 00 00 00 
2539   1824 00 00 00 00 
2539   1828 00 00 00 00 
2539   182C 00 00 00 00 
2539   1830 00 00 00 00 
2539   1834 00 00 00 00 
2539   1838 00 00 00 00 
2539   183C 00 00 00 00 
2539   1840 00 00 00 00 
2539   1844 00 00 00 00 
2539   1848 00 00 00 00 
2539   184C 00 00 00 00 
2539   1850 00 00 00 00 
2539   1854 00 00 00 00 
2539   1858 00 00 00 00 
2539   185C 00 00 00 00 
2539   1860 00 00 00 00 
2539   1864 00 00 00 00 
2539   1868 00 00 00 00 
2539   186C 00 00 00 00 
2539   1870 00 00 00 00 
2539   1874 00 00 00 00 
2539   1878 00 00 00 00 
2539   187C 00 00 00 00 
2539   1880 00 00 00 00 
2539   1884 00 00 00 00 
2539   1888 00 00 00 00 
2539   188C 00 00 00 00 
2539   1890 00 00 00 00 
2539   1894 00 00 00 00 
2539   1898 00 00 00 00 
2539   189C 00 00 00 00 
2539   18A0 00 00 00 00 
2539   18A4 00 00 00 00 
2539   18A8 00 00 00 00 
2539   18AC 00 00 00 00 
2539   18B0 00 00 00 00 
2539   18B4 00 00 00 00 
2539   18B8 00 00 00 00 
2539   18BC 00 00 00 00 
2540   18C0             _currState_data: 
2541   18C0 00          .db 
2542   18C1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2542   18C5 20 20 20 20 
2542   18C9 20 20 20 20 
2542   18CD 20 20 20 20 
2542   18D1 20 20 20 20 
2542   18D5 20 20 20 20 
2542   18D9 20 20 20 20 
2542   18DD 20 20 
2543   18DF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2543   18E3 20 20 20 20 
2543   18E7 20 20 20 20 
2543   18EB 20 20 20 20 
2543   18EF 20 20 20 20 
2543   18F3 20 20 20 20 
2543   18F7 20 20 20 20 
2543   18FB 20 20 
2544   18FD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2544   1901 20 20 20 20 
2544   1905 20 20 20 20 
2544   1909 20 20 20 20 
2544   190D 20 20 20 20 
2544   1911 20 20 20 20 
2544   1915 20 20 20 20 
2544   1919 20 20 
2545   191B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2545   191F 20 20 20 20 
2545   1923 20 20 20 20 
2545   1927 20 20 20 20 
2545   192B 20 20 20 20 
2545   192F 20 20 20 20 
2545   1933 20 20 20 20 
2545   1937 20 20 
2546   1939 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2546   193D 20 20 20 20 
2546   1941 20 20 20 20 
2546   1945 20 20 20 20 
2546   1949 20 20 20 20 
2546   194D 20 20 20 20 
2546   1951 20 20 20 40 
2546   1955 20 20 
2547   1957 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2547   195B 20 20 20 20 
2547   195F 20 20 20 20 
2547   1963 20 20 20 20 
2547   1967 20 20 20 20 
2547   196B 20 20 20 20 
2547   196F 20 20 20 20 
2547   1973 20 20 
2548   1975 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2548   1979 20 40 20 40 
2548   197D 20 20 20 20 
2548   1981 20 20 20 20 
2548   1985 20 20 20 20 
2548   1989 20 20 20 20 
2548   198D 20 20 20 20 
2548   1991 20 20 
2549   1993 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
2549   1997 20 40 40 20 
2549   199B 20 20 20 20 
2549   199F 20 40 40 20 
2549   19A3 20 20 20 20 
2549   19A7 20 20 20 20 
2549   19AB 20 20 20 40 
2549   19AF 40 20 
2550   19B1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2550   19B5 20 20 20 20 
2550   19B9 20 20 20 20 
2550   19BD 20 20 40 20 
2550   19C1 20 20 40 20 
2550   19C5 20 20 20 40 
2550   19C9 40 20 20 20 
2550   19CD 20 20 
2551   19CF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
2551   19D3 20 20 20 40 
2551   19D7 40 20 20 20 
2551   19DB 20 40 40 20 
2551   19DF 20 20 20 20 
2551   19E3 20 20 20 40 
2551   19E7 20 20 20 20 
2551   19EB 20 40 
2552   19ED 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2552   19F1 40 20 20 20 
2552   19F5 20 20 20 20 
2552   19F9 20 20 20 20 
2552   19FD 20 20 20 20 
2552   1A01 20 20 20 40 
2552   1A05 40 20 20 20 
2552   1A09 20 20 
2553   1A0B 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2553   1A0F 20 20 20 40 
2553   1A13 20 40 40 20 
2553   1A17 20 20 20 40 
2553   1A1B 20 40 20 20 
2553   1A1F 20 20 20 20 
2553   1A23 20 20 20 20 
2553   1A27 20 20 
2554   1A29 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2554   1A2D 20 20 20 20 
2554   1A31 20 20 20 20 
2554   1A35 20 40 20 20 
2554   1A39 20 20 20 40 
2554   1A3D 20 20 20 20 
2554   1A41 20 20 20 40 
2554   1A45 20 20 
2555   1A47 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
2555   1A4B 20 20 20 20 
2555   1A4F 20 20 20 20 
2555   1A53 20 20 20 20 
2555   1A57 20 20 20 20 
2555   1A5B 20 20 20 20 
2555   1A5F 40 20 20 20 
2555   1A63 40 20 
2556   1A65 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2556   1A69 20 20 20 20 
2556   1A6D 20 20 20 20 
2556   1A71 20 20 20 20 
2556   1A75 20 20 20 20 
2556   1A79 20 20 20 20 
2556   1A7D 20 20 20 20 
2556   1A81 20 20 
2557   1A83 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2557   1A87 20 40 40 20 
2557   1A8B 20 20 20 20 
2557   1A8F 20 20 20 20 
2557   1A93 20 20 20 20 
2557   1A97 20 20 20 20 
2557   1A9B 20 20 20 20 
2557   1A9F 20 20 
2558   1AA1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2558   1AA5 20 20 20 20 
2558   1AA9 20 20 20 20 
2558   1AAD 20 20 20 20 
2558   1AB1 20 20 20 20 
2558   1AB5 20 20 20 20 
2558   1AB9 20 20 20 20 
2558   1ABD 20 20 
2559   1ABF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2559   1AC3 20 20 20 20 
2559   1AC7 20 20 20 20 
2559   1ACB 20 20 20 20 
2559   1ACF 20 20 20 20 
2559   1AD3 20 20 20 20 
2559   1AD7 20 20 20 20 
2559   1ADB 20 20 
2560   1ADD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2560   1AE1 20 20 20 20 
2560   1AE5 20 20 20 20 
2560   1AE9 20 20 20 20 
2560   1AED 20 20 20 20 
2560   1AF1 20 20 20 20 
2560   1AF5 20 20 20 20 
2560   1AF9 20 20 
2561   1AFB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2561   1AFF 20 20 20 20 
2561   1B03 20 20 20 20 
2561   1B07 20 20 20 20 
2561   1B0B 20 20 20 20 
2561   1B0F 20 20 20 20 
2561   1B13 20 20 20 20 
2561   1B17 20 20 
2562   1B19 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2562   1B1D 20 20 20 20 
2562   1B21 20 20 20 20 
2562   1B25 20 20 20 20 
2562   1B29 20 20 20 20 
2562   1B2D 20 20 20 20 
2562   1B31 20 20 20 20 
2562   1B35 20 20 
2563   1B37 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2563   1B3B 20 20 20 20 
2563   1B3F 20 20 20 20 
2563   1B43 20 20 20 20 
2563   1B47 20 20 20 20 
2563   1B4B 20 20 20 20 
2563   1B4F 20 20 20 20 
2563   1B53 20 20 
2564   1B55 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2564   1B59 20 20 20 20 
2564   1B5D 20 20 20 20 
2564   1B61 20 20 20 20 
2564   1B65 20 20 20 20 
2564   1B69 20 20 20 20 
2564   1B6D 20 20 20 20 
2564   1B71 20 20 
2565   1B73 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2565   1B77 20 20 20 20 
2565   1B7B 20 20 20 20 
2565   1B7F 20 20 20 20 
2565   1B83 20 20 20 20 
2565   1B87 20 20 20 20 
2565   1B8B 20 20 20 20 
2565   1B8F 20 20 
2566   1B91 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2566   1B95 20 20 20 20 
2566   1B99 20 20 20 20 
2566   1B9D 20 20 20 20 
2566   1BA1 20 20 20 20 
2566   1BA5 20 20 20 20 
2566   1BA9 20 20 20 20 
2566   1BAD 20 20 
2567   1BAF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2567   1BB3 20 20 20 20 
2567   1BB7 20 20 20 20 
2567   1BBB 20 20 20 20 
2567   1BBF 20 20 20 20 
2567   1BC3 20 20 20 20 
2567   1BC7 20 20 20 20 
2567   1BCB 20 20 
2568   1BCD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2568   1BD1 20 20 20 20 
2568   1BD5 20 20 20 20 
2568   1BD9 20 20 20 20 
2568   1BDD 20 20 20 20 
2569   1BE1 00 00 00 00 .fill 400, 0
2569   1BE5 00 00 00 00 
2569   1BE9 00 00 00 00 
2569   1BED 00 00 00 00 
2569   1BF1 00 00 00 00 
2569   1BF5 00 00 00 00 
2569   1BF9 00 00 00 00 
2569   1BFD 00 00 00 00 
2569   1C01 00 00 00 00 
2569   1C05 00 00 00 00 
2569   1C09 00 00 00 00 
2569   1C0D 00 00 00 00 
2569   1C11 00 00 00 00 
2569   1C15 00 00 00 00 
2569   1C19 00 00 00 00 
2569   1C1D 00 00 00 00 
2569   1C21 00 00 00 00 
2569   1C25 00 00 00 00 
2569   1C29 00 00 00 00 
2569   1C2D 00 00 00 00 
2569   1C31 00 00 00 00 
2569   1C35 00 00 00 00 
2569   1C39 00 00 00 00 
2569   1C3D 00 00 00 00 
2569   1C41 00 00 00 00 
2569   1C45 00 00 00 00 
2569   1C49 00 00 00 00 
2569   1C4D 00 00 00 00 
2569   1C51 00 00 00 00 
2569   1C55 00 00 00 00 
2569   1C59 00 00 00 00 
2569   1C5D 00 00 00 00 
2569   1C61 00 00 00 00 
2569   1C65 00 00 00 00 
2569   1C69 00 00 00 00 
2569   1C6D 00 00 00 00 
2569   1C71 00 00 00 00 
2569   1C75 00 00 00 00 
2569   1C79 00 00 00 00 
2569   1C7D 00 00 00 00 
2569   1C81 00 00 00 00 
2569   1C85 00 00 00 00 
2569   1C89 00 00 00 00 
2569   1C8D 00 00 00 00 
2569   1C91 00 00 00 00 
2569   1C95 00 00 00 00 
2569   1C99 00 00 00 00 
2569   1C9D 00 00 00 00 
2569   1CA1 00 00 00 00 
2569   1CA5 00 00 00 00 
2569   1CA9 00 00 00 00 
2569   1CAD 00 00 00 00 
2569   1CB1 00 00 00 00 
2569   1CB5 00 00 00 00 
2569   1CB9 00 00 00 00 
2569   1CBD 00 00 00 00 
2569   1CC1 00 00 00 00 
2569   1CC5 00 00 00 00 
2569   1CC9 00 00 00 00 
2569   1CCD 00 00 00 00 
2569   1CD1 00 00 00 00 
2569   1CD5 00 00 00 00 
2569   1CD9 00 00 00 00 
2569   1CDD 00 00 00 00 
2569   1CE1 00 00 00 00 
2569   1CE5 00 00 00 00 
2569   1CE9 00 00 00 00 
2569   1CED 00 00 00 00 
2569   1CF1 00 00 00 00 
2569   1CF5 00 00 00 00 
2569   1CF9 00 00 00 00 
2569   1CFD 00 00 00 00 
2569   1D01 00 00 00 00 
2569   1D05 00 00 00 00 
2569   1D09 00 00 00 00 
2569   1D0D 00 00 00 00 
2569   1D11 00 00 00 00 
2569   1D15 00 00 00 00 
2569   1D19 00 00 00 00 
2569   1D1D 00 00 00 00 
2569   1D21 00 00 00 00 
2569   1D25 00 00 00 00 
2569   1D29 00 00 00 00 
2569   1D2D 00 00 00 00 
2569   1D31 00 00 00 00 
2569   1D35 00 00 00 00 
2569   1D39 00 00 00 00 
2569   1D3D 00 00 00 00 
2569   1D41 00 00 00 00 
2569   1D45 00 00 00 00 
2569   1D49 00 00 00 00 
2569   1D4D 00 00 00 00 
2569   1D51 00 00 00 00 
2569   1D55 00 00 00 00 
2569   1D59 00 00 00 00 
2569   1D5D 00 00 00 00 
2569   1D61 00 00 00 00 
2569   1D65 00 00 00 00 
2569   1D69 00 00 00 00 
2569   1D6D 00 00 00 00 
2570   1D71 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
2570   1D75 65 73 73 20 
2570   1D79 43 54 52 4C 
2570   1D7D 2B 43 20 74 
2570   1D81 6F 20 71 75 
2570   1D85 69 74 2E 0A 
2570   1D89 0D 00 
2571   1D8B 40 20 00    _s1: .db "@ ", 0
2572   1D8E 2E 20 00    _s2: .db ". ", 0
2573   1D91 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
2573   1D95 70 65 63 74 
2573   1D99 65 64 20 66 
2573   1D9D 6F 72 6D 61 
2573   1DA1 74 20 69 6E 
2573   1DA5 20 70 72 69 
2573   1DA9 6E 74 66 2E 
2573   1DAD 00 
2574   1DAE 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
2574   1DB2 72 3A 20 55 
2574   1DB6 6E 6B 6E 6F 
2574   1DBA 77 6E 20 61 
2574   1DBE 72 67 75 6D 
2574   1DC2 65 6E 74 20 
2574   1DC6 74 79 70 65 
2574   1DCA 2E 0A 00 
2575   1DCD             
2576   1DCD CF 1D       _heap_top: .dw _heap
2577   1DCF 00          _heap: .db 0
2578   1DD0             ; --- END DATA SEGMENT
2579   1DD0             
2580   1DD0             .end
tasm: Number of errors = 0
