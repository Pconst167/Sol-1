0001   0000             ; --- FILENAME: programs/life.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0000             
0005   0000             ; --- BEGIN TEXT SEGMENT
0006   0400             .org text_org
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int i, j; 
0011   0408 52 02 00      sub sp, 2
0012   040B 52 02 00      sub sp, 2
0013   040E             ; int n; 
0014   040E 52 02 00      sub sp, 2
0015   0411             ; for(i = 0; i <  30      ; i++){ 
0016   0411             _for1_init:
0017   0411 FA FF FF      lea d, [bp + -1] ; $i
0018   0414 DA            push d
0019   0415 FD 2E 00 00   mov32 cb, $00000000
0019   0419 00 00 
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             _for1_cond:
0023   041E FA FF FF      lea d, [bp + -1] ; $i
0024   0421 2A            mov b, [d]
0025   0422 38 00 00      mov c, 0
0026   0425             ; --- START RELATIONAL
0027   0425 D7            push a
0028   0426 11            mov a, b
0029   0427 FD 2E 1E 00   mov32 cb, $0000001e
0029   042B 00 00 
0030   042D B0            cmp a, b
0031   042E FD 73         slt ; < (signed)
0032   0430 E4            pop a
0033   0431             ; --- END RELATIONAL
0034   0431 C0 00 00      cmp b, 0
0035   0434 C6 C5 04      je _for1_exit
0036   0437             _for1_block:
0037   0437             ; for(j = 0; j <   40     ; j++){ 
0038   0437             _for2_init:
0039   0437 FA FD FF      lea d, [bp + -3] ; $j
0040   043A DA            push d
0041   043B FD 2E 00 00   mov32 cb, $00000000
0041   043F 00 00 
0042   0441 E7            pop d
0043   0442 FD 43         mov [d], b
0044   0444             _for2_cond:
0045   0444 FA FD FF      lea d, [bp + -3] ; $j
0046   0447 2A            mov b, [d]
0047   0448 38 00 00      mov c, 0
0048   044B             ; --- START RELATIONAL
0049   044B D7            push a
0050   044C 11            mov a, b
0051   044D FD 2E 28 00   mov32 cb, $00000028
0051   0451 00 00 
0052   0453 B0            cmp a, b
0053   0454 FD 73         slt ; < (signed)
0054   0456 E4            pop a
0055   0457             ; --- END RELATIONAL
0056   0457 C0 00 00      cmp b, 0
0057   045A C6 B2 04      je _for2_exit
0058   045D             _for2_block:
0059   045D             ; nextState[i][j] = currState[i][j]; 
0060   045D 3B 0A 14      mov d, _nextState_data ; $nextState
0061   0460 D7            push a
0062   0461 DA            push d
0063   0462 FA FF FF      lea d, [bp + -1] ; $i
0064   0465 2A            mov b, [d]
0065   0466 38 00 00      mov c, 0
0066   0469 E7            pop d
0067   046A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0068   046E DA            push d
0069   046F FA FD FF      lea d, [bp + -3] ; $j
0070   0472 2A            mov b, [d]
0071   0473 38 00 00      mov c, 0
0072   0476 E7            pop d
0073   0477 5A            add d, b
0074   0478 E4            pop a
0075   0479 DA            push d
0076   047A 3B BA 18      mov d, _currState_data ; $currState
0077   047D D7            push a
0078   047E DA            push d
0079   047F FA FF FF      lea d, [bp + -1] ; $i
0080   0482 2A            mov b, [d]
0081   0483 38 00 00      mov c, 0
0082   0486 E7            pop d
0083   0487 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0084   048B DA            push d
0085   048C FA FD FF      lea d, [bp + -3] ; $j
0086   048F 2A            mov b, [d]
0087   0490 38 00 00      mov c, 0
0088   0493 E7            pop d
0089   0494 5A            add d, b
0090   0495 E4            pop a
0091   0496 32            mov bl, [d]
0092   0497 A7 00         mov bh, 0
0093   0499 38 00 00      mov c, 0
0094   049C E7            pop d
0095   049D FD 3E         mov [d], bl
0096   049F             _for2_update:
0097   049F FA FD FF      lea d, [bp + -3] ; $j
0098   04A2 2A            mov b, [d]
0099   04A3 38 00 00      mov c, 0
0100   04A6 11            mov a, b
0101   04A7 FD 77         inc b
0102   04A9 FA FD FF      lea d, [bp + -3] ; $j
0103   04AC FD 43         mov [d], b
0104   04AE 27            mov b, a
0105   04AF 0A 44 04      jmp _for2_cond
0106   04B2             _for2_exit:
0107   04B2             _for1_update:
0108   04B2 FA FF FF      lea d, [bp + -1] ; $i
0109   04B5 2A            mov b, [d]
0110   04B6 38 00 00      mov c, 0
0111   04B9 11            mov a, b
0112   04BA FD 77         inc b
0113   04BC FA FF FF      lea d, [bp + -1] ; $i
0114   04BF FD 43         mov [d], b
0115   04C1 27            mov b, a
0116   04C2 0A 1E 04      jmp _for1_cond
0117   04C5             _for1_exit:
0118   04C5             ; for(;;){ 
0119   04C5             _for3_init:
0120   04C5             _for3_cond:
0121   04C5             _for3_block:
0122   04C5             ; for(i = 1; i <  30      +-1; i++){ 
0123   04C5             _for4_init:
0124   04C5 FA FF FF      lea d, [bp + -1] ; $i
0125   04C8 DA            push d
0126   04C9 FD 2E 01 00   mov32 cb, $00000001
0126   04CD 00 00 
0127   04CF E7            pop d
0128   04D0 FD 43         mov [d], b
0129   04D2             _for4_cond:
0130   04D2 FA FF FF      lea d, [bp + -1] ; $i
0131   04D5 2A            mov b, [d]
0132   04D6 38 00 00      mov c, 0
0133   04D9             ; --- START RELATIONAL
0134   04D9 D7            push a
0135   04DA 11            mov a, b
0136   04DB FD 2E 1E 00   mov32 cb, $0000001e
0136   04DF 00 00 
0137   04E1             ; --- START TERMS
0138   04E1 D7            push a
0139   04E2 11            mov a, b
0140   04E3 FD 2E FF FF   mov32 cb, $ffffffff
0140   04E7 FF FF 
0141   04E9 56            add b, a
0142   04EA E4            pop a
0143   04EB             ; --- END TERMS
0144   04EB B0            cmp a, b
0145   04EC FD 73         slt ; < (signed)
0146   04EE E4            pop a
0147   04EF             ; --- END RELATIONAL
0148   04EF C0 00 00      cmp b, 0
0149   04F2 C6 08 06      je _for4_exit
0150   04F5             _for4_block:
0151   04F5             ; for(j = 1; j <   40     +-1; j++){ 
0152   04F5             _for5_init:
0153   04F5 FA FD FF      lea d, [bp + -3] ; $j
0154   04F8 DA            push d
0155   04F9 FD 2E 01 00   mov32 cb, $00000001
0155   04FD 00 00 
0156   04FF E7            pop d
0157   0500 FD 43         mov [d], b
0158   0502             _for5_cond:
0159   0502 FA FD FF      lea d, [bp + -3] ; $j
0160   0505 2A            mov b, [d]
0161   0506 38 00 00      mov c, 0
0162   0509             ; --- START RELATIONAL
0163   0509 D7            push a
0164   050A 11            mov a, b
0165   050B FD 2E 28 00   mov32 cb, $00000028
0165   050F 00 00 
0166   0511             ; --- START TERMS
0167   0511 D7            push a
0168   0512 11            mov a, b
0169   0513 FD 2E FF FF   mov32 cb, $ffffffff
0169   0517 FF FF 
0170   0519 56            add b, a
0171   051A E4            pop a
0172   051B             ; --- END TERMS
0173   051B B0            cmp a, b
0174   051C FD 73         slt ; < (signed)
0175   051E E4            pop a
0176   051F             ; --- END RELATIONAL
0177   051F C0 00 00      cmp b, 0
0178   0522 C6 F5 05      je _for5_exit
0179   0525             _for5_block:
0180   0525             ; n = neighbours(i, j); 
0181   0525 FA FB FF      lea d, [bp + -5] ; $n
0182   0528 DA            push d
0183   0529             ; --- START FUNCTION CALL
0184   0529 FA FD FF      lea d, [bp + -3] ; $j
0185   052C 2A            mov b, [d]
0186   052D 38 00 00      mov c, 0
0187   0530 FD AB         swp b
0188   0532 D8            push b
0189   0533 FA FF FF      lea d, [bp + -1] ; $i
0190   0536 2A            mov b, [d]
0191   0537 38 00 00      mov c, 0
0192   053A FD AB         swp b
0193   053C D8            push b
0194   053D 07 18 08      call neighbours
0195   0540 51 04 00      add sp, 4
0196   0543             ; --- END FUNCTION CALL
0197   0543 E7            pop d
0198   0544 FD 43         mov [d], b
0199   0546             ; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0200   0546             _if6_cond:
0201   0546 FA FB FF      lea d, [bp + -5] ; $n
0202   0549 2A            mov b, [d]
0203   054A 38 00 00      mov c, 0
0204   054D             ; --- START RELATIONAL
0205   054D D7            push a
0206   054E 11            mov a, b
0207   054F FD 2E 02 00   mov32 cb, $00000002
0207   0553 00 00 
0208   0555 B0            cmp a, b
0209   0556 FD 73         slt ; < (signed)
0210   0558 E4            pop a
0211   0559             ; --- END RELATIONAL
0212   0559             ; --- START LOGICAL OR
0213   0559 D7            push a
0214   055A 11            mov a, b
0215   055B FA FB FF      lea d, [bp + -5] ; $n
0216   055E 2A            mov b, [d]
0217   055F 38 00 00      mov c, 0
0218   0562             ; --- START RELATIONAL
0219   0562 D7            push a
0220   0563 11            mov a, b
0221   0564 FD 2E 03 00   mov32 cb, $00000003
0221   0568 00 00 
0222   056A B0            cmp a, b
0223   056B FD 7F         sgt ; >
0224   056D E4            pop a
0225   056E             ; --- END RELATIONAL
0226   056E FD A8         sor a, b ; ||
0227   0570 E4            pop a
0228   0571             ; --- END LOGICAL OR
0229   0571 C0 00 00      cmp b, 0
0230   0574 C6 A0 05      je _if6_else
0231   0577             _if6_TRUE:
0232   0577             ; nextState[i][j] = ' '; 
0233   0577 3B 0A 14      mov d, _nextState_data ; $nextState
0234   057A D7            push a
0235   057B DA            push d
0236   057C FA FF FF      lea d, [bp + -1] ; $i
0237   057F 2A            mov b, [d]
0238   0580 38 00 00      mov c, 0
0239   0583 E7            pop d
0240   0584 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0241   0588 DA            push d
0242   0589 FA FD FF      lea d, [bp + -3] ; $j
0243   058C 2A            mov b, [d]
0244   058D 38 00 00      mov c, 0
0245   0590 E7            pop d
0246   0591 5A            add d, b
0247   0592 E4            pop a
0248   0593 DA            push d
0249   0594 FD 2E 20 00   mov32 cb, $00000020
0249   0598 00 00 
0250   059A E7            pop d
0251   059B FD 3E         mov [d], bl
0252   059D 0A E2 05      jmp _if6_exit
0253   05A0             _if6_else:
0254   05A0             ; if(n == 3) nextState[i][j] = '@'; 
0255   05A0             _if7_cond:
0256   05A0 FA FB FF      lea d, [bp + -5] ; $n
0257   05A3 2A            mov b, [d]
0258   05A4 38 00 00      mov c, 0
0259   05A7             ; --- START RELATIONAL
0260   05A7 D7            push a
0261   05A8 11            mov a, b
0262   05A9 FD 2E 03 00   mov32 cb, $00000003
0262   05AD 00 00 
0263   05AF B0            cmp a, b
0264   05B0 FD 71         seq ; ==
0265   05B2 E4            pop a
0266   05B3             ; --- END RELATIONAL
0267   05B3 C0 00 00      cmp b, 0
0268   05B6 C6 E2 05      je _if7_exit
0269   05B9             _if7_TRUE:
0270   05B9             ; nextState[i][j] = '@'; 
0271   05B9 3B 0A 14      mov d, _nextState_data ; $nextState
0272   05BC D7            push a
0273   05BD DA            push d
0274   05BE FA FF FF      lea d, [bp + -1] ; $i
0275   05C1 2A            mov b, [d]
0276   05C2 38 00 00      mov c, 0
0277   05C5 E7            pop d
0278   05C6 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0279   05CA DA            push d
0280   05CB FA FD FF      lea d, [bp + -3] ; $j
0281   05CE 2A            mov b, [d]
0282   05CF 38 00 00      mov c, 0
0283   05D2 E7            pop d
0284   05D3 5A            add d, b
0285   05D4 E4            pop a
0286   05D5 DA            push d
0287   05D6 FD 2E 40 00   mov32 cb, $00000040
0287   05DA 00 00 
0288   05DC E7            pop d
0289   05DD FD 3E         mov [d], bl
0290   05DF 0A E2 05      jmp _if7_exit
0291   05E2             _if7_exit:
0292   05E2             _if6_exit:
0293   05E2             _for5_update:
0294   05E2 FA FD FF      lea d, [bp + -3] ; $j
0295   05E5 2A            mov b, [d]
0296   05E6 38 00 00      mov c, 0
0297   05E9 11            mov a, b
0298   05EA FD 77         inc b
0299   05EC FA FD FF      lea d, [bp + -3] ; $j
0300   05EF FD 43         mov [d], b
0301   05F1 27            mov b, a
0302   05F2 0A 02 05      jmp _for5_cond
0303   05F5             _for5_exit:
0304   05F5             _for4_update:
0305   05F5 FA FF FF      lea d, [bp + -1] ; $i
0306   05F8 2A            mov b, [d]
0307   05F9 38 00 00      mov c, 0
0308   05FC 11            mov a, b
0309   05FD FD 77         inc b
0310   05FF FA FF FF      lea d, [bp + -1] ; $i
0311   0602 FD 43         mov [d], b
0312   0604 27            mov b, a
0313   0605 0A D2 04      jmp _for4_cond
0314   0608             _for4_exit:
0315   0608             ; for(i = 1; i <  30      +-1; i++){ 
0316   0608             _for8_init:
0317   0608 FA FF FF      lea d, [bp + -1] ; $i
0318   060B DA            push d
0319   060C FD 2E 01 00   mov32 cb, $00000001
0319   0610 00 00 
0320   0612 E7            pop d
0321   0613 FD 43         mov [d], b
0322   0615             _for8_cond:
0323   0615 FA FF FF      lea d, [bp + -1] ; $i
0324   0618 2A            mov b, [d]
0325   0619 38 00 00      mov c, 0
0326   061C             ; --- START RELATIONAL
0327   061C D7            push a
0328   061D 11            mov a, b
0329   061E FD 2E 1E 00   mov32 cb, $0000001e
0329   0622 00 00 
0330   0624             ; --- START TERMS
0331   0624 D7            push a
0332   0625 11            mov a, b
0333   0626 FD 2E FF FF   mov32 cb, $ffffffff
0333   062A FF FF 
0334   062C 56            add b, a
0335   062D E4            pop a
0336   062E             ; --- END TERMS
0337   062E B0            cmp a, b
0338   062F FD 73         slt ; < (signed)
0339   0631 E4            pop a
0340   0632             ; --- END RELATIONAL
0341   0632 C0 00 00      cmp b, 0
0342   0635 C6 D0 06      je _for8_exit
0343   0638             _for8_block:
0344   0638             ; for(j = 1; j <   40     +-1; j++){ 
0345   0638             _for9_init:
0346   0638 FA FD FF      lea d, [bp + -3] ; $j
0347   063B DA            push d
0348   063C FD 2E 01 00   mov32 cb, $00000001
0348   0640 00 00 
0349   0642 E7            pop d
0350   0643 FD 43         mov [d], b
0351   0645             _for9_cond:
0352   0645 FA FD FF      lea d, [bp + -3] ; $j
0353   0648 2A            mov b, [d]
0354   0649 38 00 00      mov c, 0
0355   064C             ; --- START RELATIONAL
0356   064C D7            push a
0357   064D 11            mov a, b
0358   064E FD 2E 28 00   mov32 cb, $00000028
0358   0652 00 00 
0359   0654             ; --- START TERMS
0360   0654 D7            push a
0361   0655 11            mov a, b
0362   0656 FD 2E FF FF   mov32 cb, $ffffffff
0362   065A FF FF 
0363   065C 56            add b, a
0364   065D E4            pop a
0365   065E             ; --- END TERMS
0366   065E B0            cmp a, b
0367   065F FD 73         slt ; < (signed)
0368   0661 E4            pop a
0369   0662             ; --- END RELATIONAL
0370   0662 C0 00 00      cmp b, 0
0371   0665 C6 BD 06      je _for9_exit
0372   0668             _for9_block:
0373   0668             ; currState[i][j] = nextState[i][j]; 
0374   0668 3B BA 18      mov d, _currState_data ; $currState
0375   066B D7            push a
0376   066C DA            push d
0377   066D FA FF FF      lea d, [bp + -1] ; $i
0378   0670 2A            mov b, [d]
0379   0671 38 00 00      mov c, 0
0380   0674 E7            pop d
0381   0675 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0382   0679 DA            push d
0383   067A FA FD FF      lea d, [bp + -3] ; $j
0384   067D 2A            mov b, [d]
0385   067E 38 00 00      mov c, 0
0386   0681 E7            pop d
0387   0682 5A            add d, b
0388   0683 E4            pop a
0389   0684 DA            push d
0390   0685 3B 0A 14      mov d, _nextState_data ; $nextState
0391   0688 D7            push a
0392   0689 DA            push d
0393   068A FA FF FF      lea d, [bp + -1] ; $i
0394   068D 2A            mov b, [d]
0395   068E 38 00 00      mov c, 0
0396   0691 E7            pop d
0397   0692 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0398   0696 DA            push d
0399   0697 FA FD FF      lea d, [bp + -3] ; $j
0400   069A 2A            mov b, [d]
0401   069B 38 00 00      mov c, 0
0402   069E E7            pop d
0403   069F 5A            add d, b
0404   06A0 E4            pop a
0405   06A1 32            mov bl, [d]
0406   06A2 A7 00         mov bh, 0
0407   06A4 38 00 00      mov c, 0
0408   06A7 E7            pop d
0409   06A8 FD 3E         mov [d], bl
0410   06AA             _for9_update:
0411   06AA FA FD FF      lea d, [bp + -3] ; $j
0412   06AD 2A            mov b, [d]
0413   06AE 38 00 00      mov c, 0
0414   06B1 11            mov a, b
0415   06B2 FD 77         inc b
0416   06B4 FA FD FF      lea d, [bp + -3] ; $j
0417   06B7 FD 43         mov [d], b
0418   06B9 27            mov b, a
0419   06BA 0A 45 06      jmp _for9_cond
0420   06BD             _for9_exit:
0421   06BD             _for8_update:
0422   06BD FA FF FF      lea d, [bp + -1] ; $i
0423   06C0 2A            mov b, [d]
0424   06C1 38 00 00      mov c, 0
0425   06C4 11            mov a, b
0426   06C5 FD 77         inc b
0427   06C7 FA FF FF      lea d, [bp + -1] ; $i
0428   06CA FD 43         mov [d], b
0429   06CC 27            mov b, a
0430   06CD 0A 15 06      jmp _for8_cond
0431   06D0             _for8_exit:
0432   06D0             ; printf(clear); 
0433   06D0             ; --- START FUNCTION CALL
0434   06D0 3B FF 13      mov d, _clear_data ; $clear
0435   06D3 2D            mov b, d
0436   06D4 38 00 00      mov c, 0
0437   06D7 FD AB         swp b
0438   06D9 D8            push b
0439   06DA 07 E4 0A      call printf
0440   06DD 51 02 00      add sp, 2
0441   06E0             ; --- END FUNCTION CALL
0442   06E0             ; show(); 
0443   06E0             ; --- START FUNCTION CALL
0444   06E0 07 F4 06      call show
0445   06E3             ; puts("\n\rPress CTRL+C to quit.\n\r"); 
0446   06E3             ; --- START FUNCTION CALL
0447   06E3 26 6A 1D      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0448   06E6 FD AB         swp b
0449   06E8 D8            push b
0450   06E9 07 E1 13      call puts
0451   06EC 51 02 00      add sp, 2
0452   06EF             ; --- END FUNCTION CALL
0453   06EF             _for3_update:
0454   06EF 0A C5 04      jmp _for3_cond
0455   06F2             _for3_exit:
0456   06F2 05 0B         syscall sys_terminate_proc
0457   06F4             
0458   06F4             show:
0459   06F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0460   06F7             ; int i, j; 
0461   06F7 52 02 00      sub sp, 2
0462   06FA 52 02 00      sub sp, 2
0463   06FD             ; for(i = 0; i <  30      ; i++){ 
0464   06FD             _for10_init:
0465   06FD FA FF FF      lea d, [bp + -1] ; $i
0466   0700 DA            push d
0467   0701 FD 2E 00 00   mov32 cb, $00000000
0467   0705 00 00 
0468   0707 E7            pop d
0469   0708 FD 43         mov [d], b
0470   070A             _for10_cond:
0471   070A FA FF FF      lea d, [bp + -1] ; $i
0472   070D 2A            mov b, [d]
0473   070E 38 00 00      mov c, 0
0474   0711             ; --- START RELATIONAL
0475   0711 D7            push a
0476   0712 11            mov a, b
0477   0713 FD 2E 1E 00   mov32 cb, $0000001e
0477   0717 00 00 
0478   0719 B0            cmp a, b
0479   071A FD 73         slt ; < (signed)
0480   071C E4            pop a
0481   071D             ; --- END RELATIONAL
0482   071D C0 00 00      cmp b, 0
0483   0720 C6 CA 07      je _for10_exit
0484   0723             _for10_block:
0485   0723             ; for(j = 0; j <   40     ; j++){ 
0486   0723             _for11_init:
0487   0723 FA FD FF      lea d, [bp + -3] ; $j
0488   0726 DA            push d
0489   0727 FD 2E 00 00   mov32 cb, $00000000
0489   072B 00 00 
0490   072D E7            pop d
0491   072E FD 43         mov [d], b
0492   0730             _for11_cond:
0493   0730 FA FD FF      lea d, [bp + -3] ; $j
0494   0733 2A            mov b, [d]
0495   0734 38 00 00      mov c, 0
0496   0737             ; --- START RELATIONAL
0497   0737 D7            push a
0498   0738 11            mov a, b
0499   0739 FD 2E 28 00   mov32 cb, $00000028
0499   073D 00 00 
0500   073F B0            cmp a, b
0501   0740 FD 73         slt ; < (signed)
0502   0742 E4            pop a
0503   0743             ; --- END RELATIONAL
0504   0743 C0 00 00      cmp b, 0
0505   0746 C6 AB 07      je _for11_exit
0506   0749             _for11_block:
0507   0749             ; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
0508   0749             _ternary12_cond:
0509   0749 3B BA 18      mov d, _currState_data ; $currState
0510   074C D7            push a
0511   074D DA            push d
0512   074E FA FF FF      lea d, [bp + -1] ; $i
0513   0751 2A            mov b, [d]
0514   0752 38 00 00      mov c, 0
0515   0755 E7            pop d
0516   0756 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0517   075A DA            push d
0518   075B FA FD FF      lea d, [bp + -3] ; $j
0519   075E 2A            mov b, [d]
0520   075F 38 00 00      mov c, 0
0521   0762 E7            pop d
0522   0763 5A            add d, b
0523   0764 E4            pop a
0524   0765 32            mov bl, [d]
0525   0766 A7 00         mov bh, 0
0526   0768 38 00 00      mov c, 0
0527   076B             ; --- START RELATIONAL
0528   076B D7            push a
0529   076C 11            mov a, b
0530   076D FD 2E 40 00   mov32 cb, $00000040
0530   0771 00 00 
0531   0773 B0            cmp a, b
0532   0774 FD 71         seq ; ==
0533   0776 E4            pop a
0534   0777             ; --- END RELATIONAL
0535   0777 C0 00 00      cmp b, 0
0536   077A C6 8C 07      je _ternary12_FALSE
0537   077D             _ternary12_TRUE:
0538   077D             ; --- START FUNCTION CALL
0539   077D 26 84 1D      mov b, _s1 ; "@ "
0540   0780 FD AB         swp b
0541   0782 D8            push b
0542   0783 07 E4 0A      call printf
0543   0786 51 02 00      add sp, 2
0544   0789             ; --- END FUNCTION CALL
0545   0789 0A 98 07      jmp _ternary12_exit
0546   078C             _ternary12_FALSE:
0547   078C             ; --- START FUNCTION CALL
0548   078C 26 87 1D      mov b, _s2 ; ". "
0549   078F FD AB         swp b
0550   0791 D8            push b
0551   0792 07 E4 0A      call printf
0552   0795 51 02 00      add sp, 2
0553   0798             ; --- END FUNCTION CALL
0554   0798             _ternary12_exit:
0555   0798             _for11_update:
0556   0798 FA FD FF      lea d, [bp + -3] ; $j
0557   079B 2A            mov b, [d]
0558   079C 38 00 00      mov c, 0
0559   079F 11            mov a, b
0560   07A0 FD 77         inc b
0561   07A2 FA FD FF      lea d, [bp + -3] ; $j
0562   07A5 FD 43         mov [d], b
0563   07A7 27            mov b, a
0564   07A8 0A 30 07      jmp _for11_cond
0565   07AB             _for11_exit:
0566   07AB             ; printf("\n\r"); 
0567   07AB             ; --- START FUNCTION CALL
0568   07AB 26 8A 1D      mov b, _s3 ; "\n\r"
0569   07AE FD AB         swp b
0570   07B0 D8            push b
0571   07B1 07 E4 0A      call printf
0572   07B4 51 02 00      add sp, 2
0573   07B7             ; --- END FUNCTION CALL
0574   07B7             _for10_update:
0575   07B7 FA FF FF      lea d, [bp + -1] ; $i
0576   07BA 2A            mov b, [d]
0577   07BB 38 00 00      mov c, 0
0578   07BE 11            mov a, b
0579   07BF FD 77         inc b
0580   07C1 FA FF FF      lea d, [bp + -1] ; $i
0581   07C4 FD 43         mov [d], b
0582   07C6 27            mov b, a
0583   07C7 0A 0A 07      jmp _for10_cond
0584   07CA             _for10_exit:
0585   07CA F9            leave
0586   07CB 09            ret
0587   07CC             
0588   07CC             alive:
0589   07CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0590   07CF             ; if(currState[i][j] == '@') return 1; 
0591   07CF             _if13_cond:
0592   07CF 3B BA 18      mov d, _currState_data ; $currState
0593   07D2 D7            push a
0594   07D3 DA            push d
0595   07D4 FA 05 00      lea d, [bp + 5] ; $i
0596   07D7 2A            mov b, [d]
0597   07D8 38 00 00      mov c, 0
0598   07DB E7            pop d
0599   07DC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0600   07E0 DA            push d
0601   07E1 FA 07 00      lea d, [bp + 7] ; $j
0602   07E4 2A            mov b, [d]
0603   07E5 38 00 00      mov c, 0
0604   07E8 E7            pop d
0605   07E9 5A            add d, b
0606   07EA E4            pop a
0607   07EB 32            mov bl, [d]
0608   07EC A7 00         mov bh, 0
0609   07EE 38 00 00      mov c, 0
0610   07F1             ; --- START RELATIONAL
0611   07F1 D7            push a
0612   07F2 11            mov a, b
0613   07F3 FD 2E 40 00   mov32 cb, $00000040
0613   07F7 00 00 
0614   07F9 B0            cmp a, b
0615   07FA FD 71         seq ; ==
0616   07FC E4            pop a
0617   07FD             ; --- END RELATIONAL
0618   07FD C0 00 00      cmp b, 0
0619   0800 C6 0E 08      je _if13_else
0620   0803             _if13_TRUE:
0621   0803             ; return 1; 
0622   0803 FD 2E 01 00   mov32 cb, $00000001
0622   0807 00 00 
0623   0809 F9            leave
0624   080A 09            ret
0625   080B 0A 16 08      jmp _if13_exit
0626   080E             _if13_else:
0627   080E             ; return 0; 
0628   080E FD 2E 00 00   mov32 cb, $00000000
0628   0812 00 00 
0629   0814 F9            leave
0630   0815 09            ret
0631   0816             _if13_exit:
0632   0816 F9            leave
0633   0817 09            ret
0634   0818             
0635   0818             neighbours:
0636   0818 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0637   081B             ; int count; 
0638   081B 52 02 00      sub sp, 2
0639   081E             ; count = 0; 
0640   081E FA FF FF      lea d, [bp + -1] ; $count
0641   0821 DA            push d
0642   0822 FD 2E 00 00   mov32 cb, $00000000
0642   0826 00 00 
0643   0828 E7            pop d
0644   0829 FD 43         mov [d], b
0645   082B             ; if(currState[i+-1][j] == '@')			count++; 
0646   082B             _if14_cond:
0647   082B 3B BA 18      mov d, _currState_data ; $currState
0648   082E D7            push a
0649   082F DA            push d
0650   0830 FA 05 00      lea d, [bp + 5] ; $i
0651   0833 2A            mov b, [d]
0652   0834 38 00 00      mov c, 0
0653   0837             ; --- START TERMS
0654   0837 D7            push a
0655   0838 11            mov a, b
0656   0839 FD 2E FF FF   mov32 cb, $ffffffff
0656   083D FF FF 
0657   083F 56            add b, a
0658   0840 E4            pop a
0659   0841             ; --- END TERMS
0660   0841 E7            pop d
0661   0842 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0662   0846 DA            push d
0663   0847 FA 07 00      lea d, [bp + 7] ; $j
0664   084A 2A            mov b, [d]
0665   084B 38 00 00      mov c, 0
0666   084E E7            pop d
0667   084F 5A            add d, b
0668   0850 E4            pop a
0669   0851 32            mov bl, [d]
0670   0852 A7 00         mov bh, 0
0671   0854 38 00 00      mov c, 0
0672   0857             ; --- START RELATIONAL
0673   0857 D7            push a
0674   0858 11            mov a, b
0675   0859 FD 2E 40 00   mov32 cb, $00000040
0675   085D 00 00 
0676   085F B0            cmp a, b
0677   0860 FD 71         seq ; ==
0678   0862 E4            pop a
0679   0863             ; --- END RELATIONAL
0680   0863 C0 00 00      cmp b, 0
0681   0866 C6 7C 08      je _if14_exit
0682   0869             _if14_TRUE:
0683   0869             ; count++; 
0684   0869 FA FF FF      lea d, [bp + -1] ; $count
0685   086C 2A            mov b, [d]
0686   086D 38 00 00      mov c, 0
0687   0870 11            mov a, b
0688   0871 FD 77         inc b
0689   0873 FA FF FF      lea d, [bp + -1] ; $count
0690   0876 FD 43         mov [d], b
0691   0878 27            mov b, a
0692   0879 0A 7C 08      jmp _if14_exit
0693   087C             _if14_exit:
0694   087C             ; if(currState[i+-1][j+-1] == '@') 	count++; 
0695   087C             _if15_cond:
0696   087C 3B BA 18      mov d, _currState_data ; $currState
0697   087F D7            push a
0698   0880 DA            push d
0699   0881 FA 05 00      lea d, [bp + 5] ; $i
0700   0884 2A            mov b, [d]
0701   0885 38 00 00      mov c, 0
0702   0888             ; --- START TERMS
0703   0888 D7            push a
0704   0889 11            mov a, b
0705   088A FD 2E FF FF   mov32 cb, $ffffffff
0705   088E FF FF 
0706   0890 56            add b, a
0707   0891 E4            pop a
0708   0892             ; --- END TERMS
0709   0892 E7            pop d
0710   0893 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0711   0897 DA            push d
0712   0898 FA 07 00      lea d, [bp + 7] ; $j
0713   089B 2A            mov b, [d]
0714   089C 38 00 00      mov c, 0
0715   089F             ; --- START TERMS
0716   089F D7            push a
0717   08A0 11            mov a, b
0718   08A1 FD 2E FF FF   mov32 cb, $ffffffff
0718   08A5 FF FF 
0719   08A7 56            add b, a
0720   08A8 E4            pop a
0721   08A9             ; --- END TERMS
0722   08A9 E7            pop d
0723   08AA 5A            add d, b
0724   08AB E4            pop a
0725   08AC 32            mov bl, [d]
0726   08AD A7 00         mov bh, 0
0727   08AF 38 00 00      mov c, 0
0728   08B2             ; --- START RELATIONAL
0729   08B2 D7            push a
0730   08B3 11            mov a, b
0731   08B4 FD 2E 40 00   mov32 cb, $00000040
0731   08B8 00 00 
0732   08BA B0            cmp a, b
0733   08BB FD 71         seq ; ==
0734   08BD E4            pop a
0735   08BE             ; --- END RELATIONAL
0736   08BE C0 00 00      cmp b, 0
0737   08C1 C6 D7 08      je _if15_exit
0738   08C4             _if15_TRUE:
0739   08C4             ; count++; 
0740   08C4 FA FF FF      lea d, [bp + -1] ; $count
0741   08C7 2A            mov b, [d]
0742   08C8 38 00 00      mov c, 0
0743   08CB 11            mov a, b
0744   08CC FD 77         inc b
0745   08CE FA FF FF      lea d, [bp + -1] ; $count
0746   08D1 FD 43         mov [d], b
0747   08D3 27            mov b, a
0748   08D4 0A D7 08      jmp _if15_exit
0749   08D7             _if15_exit:
0750   08D7             ; if(currState[i+-1][j+1] == '@') 	count++; 
0751   08D7             _if16_cond:
0752   08D7 3B BA 18      mov d, _currState_data ; $currState
0753   08DA D7            push a
0754   08DB DA            push d
0755   08DC FA 05 00      lea d, [bp + 5] ; $i
0756   08DF 2A            mov b, [d]
0757   08E0 38 00 00      mov c, 0
0758   08E3             ; --- START TERMS
0759   08E3 D7            push a
0760   08E4 11            mov a, b
0761   08E5 FD 2E FF FF   mov32 cb, $ffffffff
0761   08E9 FF FF 
0762   08EB 56            add b, a
0763   08EC E4            pop a
0764   08ED             ; --- END TERMS
0765   08ED E7            pop d
0766   08EE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0767   08F2 DA            push d
0768   08F3 FA 07 00      lea d, [bp + 7] ; $j
0769   08F6 2A            mov b, [d]
0770   08F7 38 00 00      mov c, 0
0771   08FA             ; --- START TERMS
0772   08FA D7            push a
0773   08FB 11            mov a, b
0774   08FC FD 2E 01 00   mov32 cb, $00000001
0774   0900 00 00 
0775   0902 56            add b, a
0776   0903 E4            pop a
0777   0904             ; --- END TERMS
0778   0904 E7            pop d
0779   0905 5A            add d, b
0780   0906 E4            pop a
0781   0907 32            mov bl, [d]
0782   0908 A7 00         mov bh, 0
0783   090A 38 00 00      mov c, 0
0784   090D             ; --- START RELATIONAL
0785   090D D7            push a
0786   090E 11            mov a, b
0787   090F FD 2E 40 00   mov32 cb, $00000040
0787   0913 00 00 
0788   0915 B0            cmp a, b
0789   0916 FD 71         seq ; ==
0790   0918 E4            pop a
0791   0919             ; --- END RELATIONAL
0792   0919 C0 00 00      cmp b, 0
0793   091C C6 32 09      je _if16_exit
0794   091F             _if16_TRUE:
0795   091F             ; count++; 
0796   091F FA FF FF      lea d, [bp + -1] ; $count
0797   0922 2A            mov b, [d]
0798   0923 38 00 00      mov c, 0
0799   0926 11            mov a, b
0800   0927 FD 77         inc b
0801   0929 FA FF FF      lea d, [bp + -1] ; $count
0802   092C FD 43         mov [d], b
0803   092E 27            mov b, a
0804   092F 0A 32 09      jmp _if16_exit
0805   0932             _if16_exit:
0806   0932             ; if(currState[i][j+-1] == '@') 		count++; 
0807   0932             _if17_cond:
0808   0932 3B BA 18      mov d, _currState_data ; $currState
0809   0935 D7            push a
0810   0936 DA            push d
0811   0937 FA 05 00      lea d, [bp + 5] ; $i
0812   093A 2A            mov b, [d]
0813   093B 38 00 00      mov c, 0
0814   093E E7            pop d
0815   093F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0816   0943 DA            push d
0817   0944 FA 07 00      lea d, [bp + 7] ; $j
0818   0947 2A            mov b, [d]
0819   0948 38 00 00      mov c, 0
0820   094B             ; --- START TERMS
0821   094B D7            push a
0822   094C 11            mov a, b
0823   094D FD 2E FF FF   mov32 cb, $ffffffff
0823   0951 FF FF 
0824   0953 56            add b, a
0825   0954 E4            pop a
0826   0955             ; --- END TERMS
0827   0955 E7            pop d
0828   0956 5A            add d, b
0829   0957 E4            pop a
0830   0958 32            mov bl, [d]
0831   0959 A7 00         mov bh, 0
0832   095B 38 00 00      mov c, 0
0833   095E             ; --- START RELATIONAL
0834   095E D7            push a
0835   095F 11            mov a, b
0836   0960 FD 2E 40 00   mov32 cb, $00000040
0836   0964 00 00 
0837   0966 B0            cmp a, b
0838   0967 FD 71         seq ; ==
0839   0969 E4            pop a
0840   096A             ; --- END RELATIONAL
0841   096A C0 00 00      cmp b, 0
0842   096D C6 83 09      je _if17_exit
0843   0970             _if17_TRUE:
0844   0970             ; count++; 
0845   0970 FA FF FF      lea d, [bp + -1] ; $count
0846   0973 2A            mov b, [d]
0847   0974 38 00 00      mov c, 0
0848   0977 11            mov a, b
0849   0978 FD 77         inc b
0850   097A FA FF FF      lea d, [bp + -1] ; $count
0851   097D FD 43         mov [d], b
0852   097F 27            mov b, a
0853   0980 0A 83 09      jmp _if17_exit
0854   0983             _if17_exit:
0855   0983             ; if(currState[i][j+1] == '@') 			count++; 
0856   0983             _if18_cond:
0857   0983 3B BA 18      mov d, _currState_data ; $currState
0858   0986 D7            push a
0859   0987 DA            push d
0860   0988 FA 05 00      lea d, [bp + 5] ; $i
0861   098B 2A            mov b, [d]
0862   098C 38 00 00      mov c, 0
0863   098F E7            pop d
0864   0990 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0865   0994 DA            push d
0866   0995 FA 07 00      lea d, [bp + 7] ; $j
0867   0998 2A            mov b, [d]
0868   0999 38 00 00      mov c, 0
0869   099C             ; --- START TERMS
0870   099C D7            push a
0871   099D 11            mov a, b
0872   099E FD 2E 01 00   mov32 cb, $00000001
0872   09A2 00 00 
0873   09A4 56            add b, a
0874   09A5 E4            pop a
0875   09A6             ; --- END TERMS
0876   09A6 E7            pop d
0877   09A7 5A            add d, b
0878   09A8 E4            pop a
0879   09A9 32            mov bl, [d]
0880   09AA A7 00         mov bh, 0
0881   09AC 38 00 00      mov c, 0
0882   09AF             ; --- START RELATIONAL
0883   09AF D7            push a
0884   09B0 11            mov a, b
0885   09B1 FD 2E 40 00   mov32 cb, $00000040
0885   09B5 00 00 
0886   09B7 B0            cmp a, b
0887   09B8 FD 71         seq ; ==
0888   09BA E4            pop a
0889   09BB             ; --- END RELATIONAL
0890   09BB C0 00 00      cmp b, 0
0891   09BE C6 D4 09      je _if18_exit
0892   09C1             _if18_TRUE:
0893   09C1             ; count++; 
0894   09C1 FA FF FF      lea d, [bp + -1] ; $count
0895   09C4 2A            mov b, [d]
0896   09C5 38 00 00      mov c, 0
0897   09C8 11            mov a, b
0898   09C9 FD 77         inc b
0899   09CB FA FF FF      lea d, [bp + -1] ; $count
0900   09CE FD 43         mov [d], b
0901   09D0 27            mov b, a
0902   09D1 0A D4 09      jmp _if18_exit
0903   09D4             _if18_exit:
0904   09D4             ; if(currState[i+1][j+-1] == '@') 	count++; 
0905   09D4             _if19_cond:
0906   09D4 3B BA 18      mov d, _currState_data ; $currState
0907   09D7 D7            push a
0908   09D8 DA            push d
0909   09D9 FA 05 00      lea d, [bp + 5] ; $i
0910   09DC 2A            mov b, [d]
0911   09DD 38 00 00      mov c, 0
0912   09E0             ; --- START TERMS
0913   09E0 D7            push a
0914   09E1 11            mov a, b
0915   09E2 FD 2E 01 00   mov32 cb, $00000001
0915   09E6 00 00 
0916   09E8 56            add b, a
0917   09E9 E4            pop a
0918   09EA             ; --- END TERMS
0919   09EA E7            pop d
0920   09EB FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0921   09EF DA            push d
0922   09F0 FA 07 00      lea d, [bp + 7] ; $j
0923   09F3 2A            mov b, [d]
0924   09F4 38 00 00      mov c, 0
0925   09F7             ; --- START TERMS
0926   09F7 D7            push a
0927   09F8 11            mov a, b
0928   09F9 FD 2E FF FF   mov32 cb, $ffffffff
0928   09FD FF FF 
0929   09FF 56            add b, a
0930   0A00 E4            pop a
0931   0A01             ; --- END TERMS
0932   0A01 E7            pop d
0933   0A02 5A            add d, b
0934   0A03 E4            pop a
0935   0A04 32            mov bl, [d]
0936   0A05 A7 00         mov bh, 0
0937   0A07 38 00 00      mov c, 0
0938   0A0A             ; --- START RELATIONAL
0939   0A0A D7            push a
0940   0A0B 11            mov a, b
0941   0A0C FD 2E 40 00   mov32 cb, $00000040
0941   0A10 00 00 
0942   0A12 B0            cmp a, b
0943   0A13 FD 71         seq ; ==
0944   0A15 E4            pop a
0945   0A16             ; --- END RELATIONAL
0946   0A16 C0 00 00      cmp b, 0
0947   0A19 C6 2F 0A      je _if19_exit
0948   0A1C             _if19_TRUE:
0949   0A1C             ; count++; 
0950   0A1C FA FF FF      lea d, [bp + -1] ; $count
0951   0A1F 2A            mov b, [d]
0952   0A20 38 00 00      mov c, 0
0953   0A23 11            mov a, b
0954   0A24 FD 77         inc b
0955   0A26 FA FF FF      lea d, [bp + -1] ; $count
0956   0A29 FD 43         mov [d], b
0957   0A2B 27            mov b, a
0958   0A2C 0A 2F 0A      jmp _if19_exit
0959   0A2F             _if19_exit:
0960   0A2F             ; if(currState[i+1][j] == '@') 			count++; 
0961   0A2F             _if20_cond:
0962   0A2F 3B BA 18      mov d, _currState_data ; $currState
0963   0A32 D7            push a
0964   0A33 DA            push d
0965   0A34 FA 05 00      lea d, [bp + 5] ; $i
0966   0A37 2A            mov b, [d]
0967   0A38 38 00 00      mov c, 0
0968   0A3B             ; --- START TERMS
0969   0A3B D7            push a
0970   0A3C 11            mov a, b
0971   0A3D FD 2E 01 00   mov32 cb, $00000001
0971   0A41 00 00 
0972   0A43 56            add b, a
0973   0A44 E4            pop a
0974   0A45             ; --- END TERMS
0975   0A45 E7            pop d
0976   0A46 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0977   0A4A DA            push d
0978   0A4B FA 07 00      lea d, [bp + 7] ; $j
0979   0A4E 2A            mov b, [d]
0980   0A4F 38 00 00      mov c, 0
0981   0A52 E7            pop d
0982   0A53 5A            add d, b
0983   0A54 E4            pop a
0984   0A55 32            mov bl, [d]
0985   0A56 A7 00         mov bh, 0
0986   0A58 38 00 00      mov c, 0
0987   0A5B             ; --- START RELATIONAL
0988   0A5B D7            push a
0989   0A5C 11            mov a, b
0990   0A5D FD 2E 40 00   mov32 cb, $00000040
0990   0A61 00 00 
0991   0A63 B0            cmp a, b
0992   0A64 FD 71         seq ; ==
0993   0A66 E4            pop a
0994   0A67             ; --- END RELATIONAL
0995   0A67 C0 00 00      cmp b, 0
0996   0A6A C6 80 0A      je _if20_exit
0997   0A6D             _if20_TRUE:
0998   0A6D             ; count++; 
0999   0A6D FA FF FF      lea d, [bp + -1] ; $count
1000   0A70 2A            mov b, [d]
1001   0A71 38 00 00      mov c, 0
1002   0A74 11            mov a, b
1003   0A75 FD 77         inc b
1004   0A77 FA FF FF      lea d, [bp + -1] ; $count
1005   0A7A FD 43         mov [d], b
1006   0A7C 27            mov b, a
1007   0A7D 0A 80 0A      jmp _if20_exit
1008   0A80             _if20_exit:
1009   0A80             ; if(currState[i+1][j+1] == '@') 		count++; 
1010   0A80             _if21_cond:
1011   0A80 3B BA 18      mov d, _currState_data ; $currState
1012   0A83 D7            push a
1013   0A84 DA            push d
1014   0A85 FA 05 00      lea d, [bp + 5] ; $i
1015   0A88 2A            mov b, [d]
1016   0A89 38 00 00      mov c, 0
1017   0A8C             ; --- START TERMS
1018   0A8C D7            push a
1019   0A8D 11            mov a, b
1020   0A8E FD 2E 01 00   mov32 cb, $00000001
1020   0A92 00 00 
1021   0A94 56            add b, a
1022   0A95 E4            pop a
1023   0A96             ; --- END TERMS
1024   0A96 E7            pop d
1025   0A97 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
1026   0A9B DA            push d
1027   0A9C FA 07 00      lea d, [bp + 7] ; $j
1028   0A9F 2A            mov b, [d]
1029   0AA0 38 00 00      mov c, 0
1030   0AA3             ; --- START TERMS
1031   0AA3 D7            push a
1032   0AA4 11            mov a, b
1033   0AA5 FD 2E 01 00   mov32 cb, $00000001
1033   0AA9 00 00 
1034   0AAB 56            add b, a
1035   0AAC E4            pop a
1036   0AAD             ; --- END TERMS
1037   0AAD E7            pop d
1038   0AAE 5A            add d, b
1039   0AAF E4            pop a
1040   0AB0 32            mov bl, [d]
1041   0AB1 A7 00         mov bh, 0
1042   0AB3 38 00 00      mov c, 0
1043   0AB6             ; --- START RELATIONAL
1044   0AB6 D7            push a
1045   0AB7 11            mov a, b
1046   0AB8 FD 2E 40 00   mov32 cb, $00000040
1046   0ABC 00 00 
1047   0ABE B0            cmp a, b
1048   0ABF FD 71         seq ; ==
1049   0AC1 E4            pop a
1050   0AC2             ; --- END RELATIONAL
1051   0AC2 C0 00 00      cmp b, 0
1052   0AC5 C6 DB 0A      je _if21_exit
1053   0AC8             _if21_TRUE:
1054   0AC8             ; count++; 
1055   0AC8 FA FF FF      lea d, [bp + -1] ; $count
1056   0ACB 2A            mov b, [d]
1057   0ACC 38 00 00      mov c, 0
1058   0ACF 11            mov a, b
1059   0AD0 FD 77         inc b
1060   0AD2 FA FF FF      lea d, [bp + -1] ; $count
1061   0AD5 FD 43         mov [d], b
1062   0AD7 27            mov b, a
1063   0AD8 0A DB 0A      jmp _if21_exit
1064   0ADB             _if21_exit:
1065   0ADB             ; return count; 
1066   0ADB FA FF FF      lea d, [bp + -1] ; $count
1067   0ADE 2A            mov b, [d]
1068   0ADF 38 00 00      mov c, 0
1069   0AE2 F9            leave
1070   0AE3 09            ret
1071   0AE4             
1072   0AE4             printf:
1073   0AE4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1074   0AE7             ; char *p, *format_p; 
1075   0AE7 52 02 00      sub sp, 2
1076   0AEA 52 02 00      sub sp, 2
1077   0AED             ; format_p = format; 
1078   0AED FA FD FF      lea d, [bp + -3] ; $format_p
1079   0AF0 DA            push d
1080   0AF1 FA 05 00      lea d, [bp + 5] ; $format
1081   0AF4 2A            mov b, [d]
1082   0AF5 38 00 00      mov c, 0
1083   0AF8 E7            pop d
1084   0AF9 FD 43         mov [d], b
1085   0AFB             ; p = &format + 2; 
1086   0AFB FA FF FF      lea d, [bp + -1] ; $p
1087   0AFE DA            push d
1088   0AFF FA 05 00      lea d, [bp + 5] ; $format
1089   0B02 2D            mov b, d
1090   0B03             ; --- START TERMS
1091   0B03 D7            push a
1092   0B04 11            mov a, b
1093   0B05 FD 2E 02 00   mov32 cb, $00000002
1093   0B09 00 00 
1094   0B0B 56            add b, a
1095   0B0C E4            pop a
1096   0B0D             ; --- END TERMS
1097   0B0D E7            pop d
1098   0B0E FD 43         mov [d], b
1099   0B10             ; for(;;){ 
1100   0B10             _for22_init:
1101   0B10             _for22_cond:
1102   0B10             _for22_block:
1103   0B10             ; if(!*format_p) break; 
1104   0B10             _if23_cond:
1105   0B10 FA FD FF      lea d, [bp + -3] ; $format_p
1106   0B13 2A            mov b, [d]
1107   0B14 38 00 00      mov c, 0
1108   0B17 74            mov d, b
1109   0B18 32            mov bl, [d]
1110   0B19 A7 00         mov bh, 0
1111   0B1B 38 00 00      mov c, 0
1112   0B1E C0 00 00      cmp b, 0
1113   0B21 FD 71         seq ; !
1114   0B23 C0 00 00      cmp b, 0
1115   0B26 C6 2F 0B      je _if23_else
1116   0B29             _if23_TRUE:
1117   0B29             ; break; 
1118   0B29 0A CF 0D      jmp _for22_exit ; for break
1119   0B2C 0A BC 0D      jmp _if23_exit
1120   0B2F             _if23_else:
1121   0B2F             ; if(*format_p == '%'){ 
1122   0B2F             _if24_cond:
1123   0B2F FA FD FF      lea d, [bp + -3] ; $format_p
1124   0B32 2A            mov b, [d]
1125   0B33 38 00 00      mov c, 0
1126   0B36 74            mov d, b
1127   0B37 32            mov bl, [d]
1128   0B38 A7 00         mov bh, 0
1129   0B3A 38 00 00      mov c, 0
1130   0B3D             ; --- START RELATIONAL
1131   0B3D D7            push a
1132   0B3E 11            mov a, b
1133   0B3F FD 2E 25 00   mov32 cb, $00000025
1133   0B43 00 00 
1134   0B45 B0            cmp a, b
1135   0B46 FD 71         seq ; ==
1136   0B48 E4            pop a
1137   0B49             ; --- END RELATIONAL
1138   0B49 C0 00 00      cmp b, 0
1139   0B4C C6 A7 0D      je _if24_else
1140   0B4F             _if24_TRUE:
1141   0B4F             ; format_p++; 
1142   0B4F FA FD FF      lea d, [bp + -3] ; $format_p
1143   0B52 2A            mov b, [d]
1144   0B53 38 00 00      mov c, 0
1145   0B56 FD 77         inc b
1146   0B58 FA FD FF      lea d, [bp + -3] ; $format_p
1147   0B5B FD 43         mov [d], b
1148   0B5D FD 7D         dec b
1149   0B5F             ; switch(*format_p){ 
1150   0B5F             _switch25_expr:
1151   0B5F FA FD FF      lea d, [bp + -3] ; $format_p
1152   0B62 2A            mov b, [d]
1153   0B63 38 00 00      mov c, 0
1154   0B66 74            mov d, b
1155   0B67 32            mov bl, [d]
1156   0B68 A7 00         mov bh, 0
1157   0B6A 38 00 00      mov c, 0
1158   0B6D             _switch25_comparisons:
1159   0B6D C1 6C         cmp bl, $6c
1160   0B6F C6 9B 0B      je _switch25_case0
1161   0B72 C1 4C         cmp bl, $4c
1162   0B74 C6 9B 0B      je _switch25_case1
1163   0B77 C1 64         cmp bl, $64
1164   0B79 C6 AB 0C      je _switch25_case2
1165   0B7C C1 69         cmp bl, $69
1166   0B7E C6 AB 0C      je _switch25_case3
1167   0B81 C1 75         cmp bl, $75
1168   0B83 C6 DB 0C      je _switch25_case4
1169   0B86 C1 78         cmp bl, $78
1170   0B88 C6 0B 0D      je _switch25_case5
1171   0B8B C1 63         cmp bl, $63
1172   0B8D C6 3B 0D      je _switch25_case6
1173   0B90 C1 73         cmp bl, $73
1174   0B92 C6 6B 0D      je _switch25_case7
1175   0B95 0A 98 0D      jmp _switch25_default
1176   0B98 0A A4 0D      jmp _switch25_exit
1177   0B9B             _switch25_case0:
1178   0B9B             _switch25_case1:
1179   0B9B             ; format_p++; 
1180   0B9B FA FD FF      lea d, [bp + -3] ; $format_p
1181   0B9E 2A            mov b, [d]
1182   0B9F 38 00 00      mov c, 0
1183   0BA2 FD 77         inc b
1184   0BA4 FA FD FF      lea d, [bp + -3] ; $format_p
1185   0BA7 FD 43         mov [d], b
1186   0BA9 FD 7D         dec b
1187   0BAB             ; if(*format_p == 'd' || *format_p == 'i') 
1188   0BAB             _if26_cond:
1189   0BAB FA FD FF      lea d, [bp + -3] ; $format_p
1190   0BAE 2A            mov b, [d]
1191   0BAF 38 00 00      mov c, 0
1192   0BB2 74            mov d, b
1193   0BB3 32            mov bl, [d]
1194   0BB4 A7 00         mov bh, 0
1195   0BB6 38 00 00      mov c, 0
1196   0BB9             ; --- START RELATIONAL
1197   0BB9 D7            push a
1198   0BBA 11            mov a, b
1199   0BBB FD 2E 64 00   mov32 cb, $00000064
1199   0BBF 00 00 
1200   0BC1 B0            cmp a, b
1201   0BC2 FD 71         seq ; ==
1202   0BC4 E4            pop a
1203   0BC5             ; --- END RELATIONAL
1204   0BC5             ; --- START LOGICAL OR
1205   0BC5 D7            push a
1206   0BC6 11            mov a, b
1207   0BC7 FA FD FF      lea d, [bp + -3] ; $format_p
1208   0BCA 2A            mov b, [d]
1209   0BCB 38 00 00      mov c, 0
1210   0BCE 74            mov d, b
1211   0BCF 32            mov bl, [d]
1212   0BD0 A7 00         mov bh, 0
1213   0BD2 38 00 00      mov c, 0
1214   0BD5             ; --- START RELATIONAL
1215   0BD5 D7            push a
1216   0BD6 11            mov a, b
1217   0BD7 FD 2E 69 00   mov32 cb, $00000069
1217   0BDB 00 00 
1218   0BDD B0            cmp a, b
1219   0BDE FD 71         seq ; ==
1220   0BE0 E4            pop a
1221   0BE1             ; --- END RELATIONAL
1222   0BE1 FD A8         sor a, b ; ||
1223   0BE3 E4            pop a
1224   0BE4             ; --- END LOGICAL OR
1225   0BE4 C0 00 00      cmp b, 0
1226   0BE7 C6 08 0C      je _if26_else
1227   0BEA             _if26_TRUE:
1228   0BEA             ; print_signed_long(*(long *)p); 
1229   0BEA             ; --- START FUNCTION CALL
1230   0BEA FA FF FF      lea d, [bp + -1] ; $p
1231   0BED 2A            mov b, [d]
1232   0BEE 38 00 00      mov c, 0
1233   0BF1 74            mov d, b
1234   0BF2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1235   0BF5 FD 39         mov c, b ; And place it into C
1236   0BF7 2A            mov b, [d] ; Lower Word in B
1237   0BF8 12            mov a, c
1238   0BF9 FD AA         swp a
1239   0BFB D7            push a
1240   0BFC FD AB         swp b
1241   0BFE D8            push b
1242   0BFF 07 D1 0D      call print_signed_long
1243   0C02 51 04 00      add sp, 4
1244   0C05             ; --- END FUNCTION CALL
1245   0C05 0A 90 0C      jmp _if26_exit
1246   0C08             _if26_else:
1247   0C08             ; if(*format_p == 'u') 
1248   0C08             _if27_cond:
1249   0C08 FA FD FF      lea d, [bp + -3] ; $format_p
1250   0C0B 2A            mov b, [d]
1251   0C0C 38 00 00      mov c, 0
1252   0C0F 74            mov d, b
1253   0C10 32            mov bl, [d]
1254   0C11 A7 00         mov bh, 0
1255   0C13 38 00 00      mov c, 0
1256   0C16             ; --- START RELATIONAL
1257   0C16 D7            push a
1258   0C17 11            mov a, b
1259   0C18 FD 2E 75 00   mov32 cb, $00000075
1259   0C1C 00 00 
1260   0C1E B0            cmp a, b
1261   0C1F FD 71         seq ; ==
1262   0C21 E4            pop a
1263   0C22             ; --- END RELATIONAL
1264   0C22 C0 00 00      cmp b, 0
1265   0C25 C6 46 0C      je _if27_else
1266   0C28             _if27_TRUE:
1267   0C28             ; print_unsigned_long(*(unsigned long *)p); 
1268   0C28             ; --- START FUNCTION CALL
1269   0C28 FA FF FF      lea d, [bp + -1] ; $p
1270   0C2B 2A            mov b, [d]
1271   0C2C 38 00 00      mov c, 0
1272   0C2F 74            mov d, b
1273   0C30 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1274   0C33 FD 39         mov c, b ; And place it into C
1275   0C35 2A            mov b, [d] ; Lower Word in B
1276   0C36 12            mov a, c
1277   0C37 FD AA         swp a
1278   0C39 D7            push a
1279   0C3A FD AB         swp b
1280   0C3C D8            push b
1281   0C3D 07 64 0F      call print_unsigned_long
1282   0C40 51 04 00      add sp, 4
1283   0C43             ; --- END FUNCTION CALL
1284   0C43 0A 90 0C      jmp _if27_exit
1285   0C46             _if27_else:
1286   0C46             ; if(*format_p == 'x') 
1287   0C46             _if28_cond:
1288   0C46 FA FD FF      lea d, [bp + -3] ; $format_p
1289   0C49 2A            mov b, [d]
1290   0C4A 38 00 00      mov c, 0
1291   0C4D 74            mov d, b
1292   0C4E 32            mov bl, [d]
1293   0C4F A7 00         mov bh, 0
1294   0C51 38 00 00      mov c, 0
1295   0C54             ; --- START RELATIONAL
1296   0C54 D7            push a
1297   0C55 11            mov a, b
1298   0C56 FD 2E 78 00   mov32 cb, $00000078
1298   0C5A 00 00 
1299   0C5C B0            cmp a, b
1300   0C5D FD 71         seq ; ==
1301   0C5F E4            pop a
1302   0C60             ; --- END RELATIONAL
1303   0C60 C0 00 00      cmp b, 0
1304   0C63 C6 84 0C      je _if28_else
1305   0C66             _if28_TRUE:
1306   0C66             ; printx32(*(long int *)p); 
1307   0C66             ; --- START FUNCTION CALL
1308   0C66 FA FF FF      lea d, [bp + -1] ; $p
1309   0C69 2A            mov b, [d]
1310   0C6A 38 00 00      mov c, 0
1311   0C6D 74            mov d, b
1312   0C6E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1313   0C71 FD 39         mov c, b ; And place it into C
1314   0C73 2A            mov b, [d] ; Lower Word in B
1315   0C74 12            mov a, c
1316   0C75 FD AA         swp a
1317   0C77 D7            push a
1318   0C78 FD AB         swp b
1319   0C7A D8            push b
1320   0C7B 07 98 10      call printx32
1321   0C7E 51 04 00      add sp, 4
1322   0C81             ; --- END FUNCTION CALL
1323   0C81 0A 90 0C      jmp _if28_exit
1324   0C84             _if28_else:
1325   0C84             ; err("Unexpected format in printf."); 
1326   0C84             ; --- START FUNCTION CALL
1327   0C84 26 8D 1D      mov b, _s4 ; "Unexpected format in printf."
1328   0C87 FD AB         swp b
1329   0C89 D8            push b
1330   0C8A 07 F8 10      call err
1331   0C8D 51 02 00      add sp, 2
1332   0C90             ; --- END FUNCTION CALL
1333   0C90             _if28_exit:
1334   0C90             _if27_exit:
1335   0C90             _if26_exit:
1336   0C90             ; p = p + 4; 
1337   0C90 FA FF FF      lea d, [bp + -1] ; $p
1338   0C93 DA            push d
1339   0C94 FA FF FF      lea d, [bp + -1] ; $p
1340   0C97 2A            mov b, [d]
1341   0C98 38 00 00      mov c, 0
1342   0C9B             ; --- START TERMS
1343   0C9B D7            push a
1344   0C9C 11            mov a, b
1345   0C9D FD 2E 04 00   mov32 cb, $00000004
1345   0CA1 00 00 
1346   0CA3 56            add b, a
1347   0CA4 E4            pop a
1348   0CA5             ; --- END TERMS
1349   0CA5 E7            pop d
1350   0CA6 FD 43         mov [d], b
1351   0CA8             ; break; 
1352   0CA8 0A A4 0D      jmp _switch25_exit ; case break
1353   0CAB             _switch25_case2:
1354   0CAB             _switch25_case3:
1355   0CAB             ; print_signed(*(int*)p); 
1356   0CAB             ; --- START FUNCTION CALL
1357   0CAB FA FF FF      lea d, [bp + -1] ; $p
1358   0CAE 2A            mov b, [d]
1359   0CAF 38 00 00      mov c, 0
1360   0CB2 74            mov d, b
1361   0CB3 2A            mov b, [d]
1362   0CB4 38 00 00      mov c, 0
1363   0CB7 FD AB         swp b
1364   0CB9 D8            push b
1365   0CBA 07 26 11      call print_signed
1366   0CBD 51 02 00      add sp, 2
1367   0CC0             ; --- END FUNCTION CALL
1368   0CC0             ; p = p + 2; 
1369   0CC0 FA FF FF      lea d, [bp + -1] ; $p
1370   0CC3 DA            push d
1371   0CC4 FA FF FF      lea d, [bp + -1] ; $p
1372   0CC7 2A            mov b, [d]
1373   0CC8 38 00 00      mov c, 0
1374   0CCB             ; --- START TERMS
1375   0CCB D7            push a
1376   0CCC 11            mov a, b
1377   0CCD FD 2E 02 00   mov32 cb, $00000002
1377   0CD1 00 00 
1378   0CD3 56            add b, a
1379   0CD4 E4            pop a
1380   0CD5             ; --- END TERMS
1381   0CD5 E7            pop d
1382   0CD6 FD 43         mov [d], b
1383   0CD8             ; break; 
1384   0CD8 0A A4 0D      jmp _switch25_exit ; case break
1385   0CDB             _switch25_case4:
1386   0CDB             ; print_unsigned(*(unsigned int*)p); 
1387   0CDB             ; --- START FUNCTION CALL
1388   0CDB FA FF FF      lea d, [bp + -1] ; $p
1389   0CDE 2A            mov b, [d]
1390   0CDF 38 00 00      mov c, 0
1391   0CE2 74            mov d, b
1392   0CE3 2A            mov b, [d]
1393   0CE4 38 00 00      mov c, 0
1394   0CE7 FD AB         swp b
1395   0CE9 D8            push b
1396   0CEA 07 77 12      call print_unsigned
1397   0CED 51 02 00      add sp, 2
1398   0CF0             ; --- END FUNCTION CALL
1399   0CF0             ; p = p + 2; 
1400   0CF0 FA FF FF      lea d, [bp + -1] ; $p
1401   0CF3 DA            push d
1402   0CF4 FA FF FF      lea d, [bp + -1] ; $p
1403   0CF7 2A            mov b, [d]
1404   0CF8 38 00 00      mov c, 0
1405   0CFB             ; --- START TERMS
1406   0CFB D7            push a
1407   0CFC 11            mov a, b
1408   0CFD FD 2E 02 00   mov32 cb, $00000002
1408   0D01 00 00 
1409   0D03 56            add b, a
1410   0D04 E4            pop a
1411   0D05             ; --- END TERMS
1412   0D05 E7            pop d
1413   0D06 FD 43         mov [d], b
1414   0D08             ; break; 
1415   0D08 0A A4 0D      jmp _switch25_exit ; case break
1416   0D0B             _switch25_case5:
1417   0D0B             ; printx16(*(int*)p); 
1418   0D0B             ; --- START FUNCTION CALL
1419   0D0B FA FF FF      lea d, [bp + -1] ; $p
1420   0D0E 2A            mov b, [d]
1421   0D0F 38 00 00      mov c, 0
1422   0D12 74            mov d, b
1423   0D13 2A            mov b, [d]
1424   0D14 38 00 00      mov c, 0
1425   0D17 FD AB         swp b
1426   0D19 D8            push b
1427   0D1A 07 8F 13      call printx16
1428   0D1D 51 02 00      add sp, 2
1429   0D20             ; --- END FUNCTION CALL
1430   0D20             ; p = p + 2; 
1431   0D20 FA FF FF      lea d, [bp + -1] ; $p
1432   0D23 DA            push d
1433   0D24 FA FF FF      lea d, [bp + -1] ; $p
1434   0D27 2A            mov b, [d]
1435   0D28 38 00 00      mov c, 0
1436   0D2B             ; --- START TERMS
1437   0D2B D7            push a
1438   0D2C 11            mov a, b
1439   0D2D FD 2E 02 00   mov32 cb, $00000002
1439   0D31 00 00 
1440   0D33 56            add b, a
1441   0D34 E4            pop a
1442   0D35             ; --- END TERMS
1443   0D35 E7            pop d
1444   0D36 FD 43         mov [d], b
1445   0D38             ; break; 
1446   0D38 0A A4 0D      jmp _switch25_exit ; case break
1447   0D3B             _switch25_case6:
1448   0D3B             ; putchar(*(char*)p); 
1449   0D3B             ; --- START FUNCTION CALL
1450   0D3B FA FF FF      lea d, [bp + -1] ; $p
1451   0D3E 2A            mov b, [d]
1452   0D3F 38 00 00      mov c, 0
1453   0D42 74            mov d, b
1454   0D43 32            mov bl, [d]
1455   0D44 A7 00         mov bh, 0
1456   0D46 38 00 00      mov c, 0
1457   0D49 DD            push bl
1458   0D4A 07 56 0F      call putchar
1459   0D4D 51 01 00      add sp, 1
1460   0D50             ; --- END FUNCTION CALL
1461   0D50             ; p = p + 2; 
1462   0D50 FA FF FF      lea d, [bp + -1] ; $p
1463   0D53 DA            push d
1464   0D54 FA FF FF      lea d, [bp + -1] ; $p
1465   0D57 2A            mov b, [d]
1466   0D58 38 00 00      mov c, 0
1467   0D5B             ; --- START TERMS
1468   0D5B D7            push a
1469   0D5C 11            mov a, b
1470   0D5D FD 2E 02 00   mov32 cb, $00000002
1470   0D61 00 00 
1471   0D63 56            add b, a
1472   0D64 E4            pop a
1473   0D65             ; --- END TERMS
1474   0D65 E7            pop d
1475   0D66 FD 43         mov [d], b
1476   0D68             ; break; 
1477   0D68 0A A4 0D      jmp _switch25_exit ; case break
1478   0D6B             _switch25_case7:
1479   0D6B             ; print(*(char**)p); 
1480   0D6B             ; --- START FUNCTION CALL
1481   0D6B FA FF FF      lea d, [bp + -1] ; $p
1482   0D6E 2A            mov b, [d]
1483   0D6F 38 00 00      mov c, 0
1484   0D72 74            mov d, b
1485   0D73 2A            mov b, [d]
1486   0D74 FD AB         swp b
1487   0D76 D8            push b
1488   0D77 07 0D 11      call print
1489   0D7A 51 02 00      add sp, 2
1490   0D7D             ; --- END FUNCTION CALL
1491   0D7D             ; p = p + 2; 
1492   0D7D FA FF FF      lea d, [bp + -1] ; $p
1493   0D80 DA            push d
1494   0D81 FA FF FF      lea d, [bp + -1] ; $p
1495   0D84 2A            mov b, [d]
1496   0D85 38 00 00      mov c, 0
1497   0D88             ; --- START TERMS
1498   0D88 D7            push a
1499   0D89 11            mov a, b
1500   0D8A FD 2E 02 00   mov32 cb, $00000002
1500   0D8E 00 00 
1501   0D90 56            add b, a
1502   0D91 E4            pop a
1503   0D92             ; --- END TERMS
1504   0D92 E7            pop d
1505   0D93 FD 43         mov [d], b
1506   0D95             ; break; 
1507   0D95 0A A4 0D      jmp _switch25_exit ; case break
1508   0D98             _switch25_default:
1509   0D98             ; print("Error: Unknown argument type.\n"); 
1510   0D98             ; --- START FUNCTION CALL
1511   0D98 26 AA 1D      mov b, _s5 ; "Error: Unknown argument type.\n"
1512   0D9B FD AB         swp b
1513   0D9D D8            push b
1514   0D9E 07 0D 11      call print
1515   0DA1 51 02 00      add sp, 2
1516   0DA4             ; --- END FUNCTION CALL
1517   0DA4             _switch25_exit:
1518   0DA4 0A BC 0D      jmp _if24_exit
1519   0DA7             _if24_else:
1520   0DA7             ; putchar(*format_p); 
1521   0DA7             ; --- START FUNCTION CALL
1522   0DA7 FA FD FF      lea d, [bp + -3] ; $format_p
1523   0DAA 2A            mov b, [d]
1524   0DAB 38 00 00      mov c, 0
1525   0DAE 74            mov d, b
1526   0DAF 32            mov bl, [d]
1527   0DB0 A7 00         mov bh, 0
1528   0DB2 38 00 00      mov c, 0
1529   0DB5 DD            push bl
1530   0DB6 07 56 0F      call putchar
1531   0DB9 51 01 00      add sp, 1
1532   0DBC             ; --- END FUNCTION CALL
1533   0DBC             _if24_exit:
1534   0DBC             _if23_exit:
1535   0DBC             ; format_p++; 
1536   0DBC FA FD FF      lea d, [bp + -3] ; $format_p
1537   0DBF 2A            mov b, [d]
1538   0DC0 38 00 00      mov c, 0
1539   0DC3 FD 77         inc b
1540   0DC5 FA FD FF      lea d, [bp + -3] ; $format_p
1541   0DC8 FD 43         mov [d], b
1542   0DCA FD 7D         dec b
1543   0DCC             _for22_update:
1544   0DCC 0A 10 0B      jmp _for22_cond
1545   0DCF             _for22_exit:
1546   0DCF F9            leave
1547   0DD0 09            ret
1548   0DD1             
1549   0DD1             print_signed_long:
1550   0DD1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1551   0DD4             ; char digits[10]; 
1552   0DD4 52 0A 00      sub sp, 10
1553   0DD7             ; int i = 0; 
1554   0DD7 52 02 00      sub sp, 2
1555   0DDA             ; --- START LOCAL VAR INITIALIZATION
1556   0DDA FA F5 FF      lea d, [bp + -11] ; $i
1557   0DDD DA            push d
1558   0DDE FD 2E 00 00   mov32 cb, $00000000
1558   0DE2 00 00 
1559   0DE4 E7            pop d
1560   0DE5 FD 43         mov [d], b
1561   0DE7             ; --- END LOCAL VAR INITIALIZATION
1562   0DE7             ; if (num < 0) { 
1563   0DE7             _if29_cond:
1564   0DE7 FA 05 00      lea d, [bp + 5] ; $num
1565   0DEA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1566   0DED FD 39         mov c, b ; And place it into C
1567   0DEF 2A            mov b, [d] ; Lower Word in B
1568   0DF0             ; --- START RELATIONAL
1569   0DF0 D7            push a
1570   0DF1 FD D8         push g
1571   0DF3 11            mov a, b
1572   0DF4 FD 7A         mov g, c
1573   0DF6 FD 2E 00 00   mov32 cb, $00000000
1573   0DFA 00 00 
1574   0DFC FD AF         cmp32 ga, cb
1575   0DFE FD 73         slt ; <
1576   0E00 FD F1         pop g
1577   0E02 E4            pop a
1578   0E03             ; --- END RELATIONAL
1579   0E03 C0 00 00      cmp b, 0
1580   0E06 C6 38 0E      je _if29_else
1581   0E09             _if29_TRUE:
1582   0E09             ; putchar('-'); 
1583   0E09             ; --- START FUNCTION CALL
1584   0E09 FD 2E 2D 00   mov32 cb, $0000002d
1584   0E0D 00 00 
1585   0E0F DD            push bl
1586   0E10 07 56 0F      call putchar
1587   0E13 51 01 00      add sp, 1
1588   0E16             ; --- END FUNCTION CALL
1589   0E16             ; num = -num; 
1590   0E16 FA 05 00      lea d, [bp + 5] ; $num
1591   0E19 DA            push d
1592   0E1A FA 05 00      lea d, [bp + 5] ; $num
1593   0E1D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1594   0E20 FD 39         mov c, b ; And place it into C
1595   0E22 2A            mov b, [d] ; Lower Word in B
1596   0E23 12            mov a, c
1597   0E24 95            not a
1598   0E25 97            not b
1599   0E26 55 01 00      add b, 1
1600   0E29 5B 00 00      adc a, 0
1601   0E2C 39            mov c, a
1602   0E2D E7            pop d
1603   0E2E FD 43         mov [d], b
1604   0E30 28            mov b, c
1605   0E31 FD 44 02 00   mov [d + 2], b
1606   0E35 0A 6C 0E      jmp _if29_exit
1607   0E38             _if29_else:
1608   0E38             ; if (num == 0) { 
1609   0E38             _if30_cond:
1610   0E38 FA 05 00      lea d, [bp + 5] ; $num
1611   0E3B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1612   0E3E FD 39         mov c, b ; And place it into C
1613   0E40 2A            mov b, [d] ; Lower Word in B
1614   0E41             ; --- START RELATIONAL
1615   0E41 D7            push a
1616   0E42 FD D8         push g
1617   0E44 11            mov a, b
1618   0E45 FD 7A         mov g, c
1619   0E47 FD 2E 00 00   mov32 cb, $00000000
1619   0E4B 00 00 
1620   0E4D FD AF         cmp32 ga, cb
1621   0E4F FD 71         seq ; ==
1622   0E51 FD F1         pop g
1623   0E53 E4            pop a
1624   0E54             ; --- END RELATIONAL
1625   0E54 C0 00 00      cmp b, 0
1626   0E57 C6 6C 0E      je _if30_exit
1627   0E5A             _if30_TRUE:
1628   0E5A             ; putchar('0'); 
1629   0E5A             ; --- START FUNCTION CALL
1630   0E5A FD 2E 30 00   mov32 cb, $00000030
1630   0E5E 00 00 
1631   0E60 DD            push bl
1632   0E61 07 56 0F      call putchar
1633   0E64 51 01 00      add sp, 1
1634   0E67             ; --- END FUNCTION CALL
1635   0E67             ; return; 
1636   0E67 F9            leave
1637   0E68 09            ret
1638   0E69 0A 6C 0E      jmp _if30_exit
1639   0E6C             _if30_exit:
1640   0E6C             _if29_exit:
1641   0E6C             ; while (num > 0) { 
1642   0E6C             _while31_cond:
1643   0E6C FA 05 00      lea d, [bp + 5] ; $num
1644   0E6F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1645   0E72 FD 39         mov c, b ; And place it into C
1646   0E74 2A            mov b, [d] ; Lower Word in B
1647   0E75             ; --- START RELATIONAL
1648   0E75 D7            push a
1649   0E76 FD D8         push g
1650   0E78 11            mov a, b
1651   0E79 FD 7A         mov g, c
1652   0E7B FD 2E 00 00   mov32 cb, $00000000
1652   0E7F 00 00 
1653   0E81 FD AF         cmp32 ga, cb
1654   0E83 FD 7F         sgt
1655   0E85 FD F1         pop g
1656   0E87 E4            pop a
1657   0E88             ; --- END RELATIONAL
1658   0E88 C0 00 00      cmp b, 0
1659   0E8B C6 0C 0F      je _while31_exit
1660   0E8E             _while31_block:
1661   0E8E             ; digits[i] = '0' + (num % 10); 
1662   0E8E FA F7 FF      lea d, [bp + -9] ; $digits
1663   0E91 D7            push a
1664   0E92 DA            push d
1665   0E93 FA F5 FF      lea d, [bp + -11] ; $i
1666   0E96 2A            mov b, [d]
1667   0E97 38 00 00      mov c, 0
1668   0E9A E7            pop d
1669   0E9B 5A            add d, b
1670   0E9C E4            pop a
1671   0E9D DA            push d
1672   0E9E FD 2E 30 00   mov32 cb, $00000030
1672   0EA2 00 00 
1673   0EA4             ; --- START TERMS
1674   0EA4 D7            push a
1675   0EA5 11            mov a, b
1676   0EA6 FA 05 00      lea d, [bp + 5] ; $num
1677   0EA9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1678   0EAC FD 39         mov c, b ; And place it into C
1679   0EAE 2A            mov b, [d] ; Lower Word in B
1680   0EAF             ; --- START FACTORS
1681   0EAF D7            push a
1682   0EB0 FD D8         push g
1683   0EB2 11            mov a, b
1684   0EB3 FD 7A         mov g, c
1685   0EB5 FD 2E 0A 00   mov32 cb, $0000000a
1685   0EB9 00 00 
1686   0EBB FD D8         push g ; save 'g' as the div instruction uses it
1687   0EBD AE            div a, b ; %, a: quotient, b: remainder
1688   0EBE 11            mov a, b
1689   0EBF FD F1         pop g
1690   0EC1 FD 38         mov c, g
1691   0EC3 27            mov b, a
1692   0EC4 FD F1         pop g
1693   0EC6 E4            pop a
1694   0EC7             ; --- END FACTORS
1695   0EC7 FD 15         add32 cb, ga
1696   0EC9 E4            pop a
1697   0ECA             ; --- END TERMS
1698   0ECA E7            pop d
1699   0ECB FD 3E         mov [d], bl
1700   0ECD             ; num = num / 10; 
1701   0ECD FA 05 00      lea d, [bp + 5] ; $num
1702   0ED0 DA            push d
1703   0ED1 FA 05 00      lea d, [bp + 5] ; $num
1704   0ED4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1705   0ED7 FD 39         mov c, b ; And place it into C
1706   0ED9 2A            mov b, [d] ; Lower Word in B
1707   0EDA             ; --- START FACTORS
1708   0EDA D7            push a
1709   0EDB FD D8         push g
1710   0EDD 11            mov a, b
1711   0EDE FD 7A         mov g, c
1712   0EE0 FD 2E 0A 00   mov32 cb, $0000000a
1712   0EE4 00 00 
1713   0EE6 FD D8         push g ; save 'g' as the div instruction uses it
1714   0EE8 AE            div a, b ; /, a: quotient, b: remainder
1715   0EE9 FD F1         pop g
1716   0EEB FD 38         mov c, g
1717   0EED 27            mov b, a
1718   0EEE FD F1         pop g
1719   0EF0 E4            pop a
1720   0EF1             ; --- END FACTORS
1721   0EF1 E7            pop d
1722   0EF2 FD 43         mov [d], b
1723   0EF4 28            mov b, c
1724   0EF5 FD 44 02 00   mov [d + 2], b
1725   0EF9             ; i++; 
1726   0EF9 FA F5 FF      lea d, [bp + -11] ; $i
1727   0EFC 2A            mov b, [d]
1728   0EFD 38 00 00      mov c, 0
1729   0F00 11            mov a, b
1730   0F01 FD 77         inc b
1731   0F03 FA F5 FF      lea d, [bp + -11] ; $i
1732   0F06 FD 43         mov [d], b
1733   0F08 27            mov b, a
1734   0F09 0A 6C 0E      jmp _while31_cond
1735   0F0C             _while31_exit:
1736   0F0C             ; while (i > 0) { 
1737   0F0C             _while38_cond:
1738   0F0C FA F5 FF      lea d, [bp + -11] ; $i
1739   0F0F 2A            mov b, [d]
1740   0F10 38 00 00      mov c, 0
1741   0F13             ; --- START RELATIONAL
1742   0F13 D7            push a
1743   0F14 11            mov a, b
1744   0F15 FD 2E 00 00   mov32 cb, $00000000
1744   0F19 00 00 
1745   0F1B B0            cmp a, b
1746   0F1C FD 7F         sgt ; >
1747   0F1E E4            pop a
1748   0F1F             ; --- END RELATIONAL
1749   0F1F C0 00 00      cmp b, 0
1750   0F22 C6 54 0F      je _while38_exit
1751   0F25             _while38_block:
1752   0F25             ; i--; 
1753   0F25 FA F5 FF      lea d, [bp + -11] ; $i
1754   0F28 2A            mov b, [d]
1755   0F29 38 00 00      mov c, 0
1756   0F2C 11            mov a, b
1757   0F2D FD 7D         dec b
1758   0F2F FA F5 FF      lea d, [bp + -11] ; $i
1759   0F32 FD 43         mov [d], b
1760   0F34 27            mov b, a
1761   0F35             ; putchar(digits[i]); 
1762   0F35             ; --- START FUNCTION CALL
1763   0F35 FA F7 FF      lea d, [bp + -9] ; $digits
1764   0F38 D7            push a
1765   0F39 DA            push d
1766   0F3A FA F5 FF      lea d, [bp + -11] ; $i
1767   0F3D 2A            mov b, [d]
1768   0F3E 38 00 00      mov c, 0
1769   0F41 E7            pop d
1770   0F42 5A            add d, b
1771   0F43 E4            pop a
1772   0F44 32            mov bl, [d]
1773   0F45 A7 00         mov bh, 0
1774   0F47 38 00 00      mov c, 0
1775   0F4A DD            push bl
1776   0F4B 07 56 0F      call putchar
1777   0F4E 51 01 00      add sp, 1
1778   0F51             ; --- END FUNCTION CALL
1779   0F51 0A 0C 0F      jmp _while38_cond
1780   0F54             _while38_exit:
1781   0F54 F9            leave
1782   0F55 09            ret
1783   0F56             
1784   0F56             putchar:
1785   0F56 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1786   0F59             ; --- BEGIN INLINE ASM SEGMENT
1787   0F59 FA 05 00      lea d, [bp + 5] ; $c
1788   0F5C 1E            mov al, [d]
1789   0F5D 23            mov ah, al
1790   0F5E 19 00         mov al, 0
1791   0F60 05 03         syscall sys_io      ; char in AH
1792   0F62             ; --- END INLINE ASM SEGMENT
1793   0F62 F9            leave
1794   0F63 09            ret
1795   0F64             
1796   0F64             print_unsigned_long:
1797   0F64 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1798   0F67             ; char digits[10]; 
1799   0F67 52 0A 00      sub sp, 10
1800   0F6A             ; int i; 
1801   0F6A 52 02 00      sub sp, 2
1802   0F6D             ; i = 0; 
1803   0F6D FA F5 FF      lea d, [bp + -11] ; $i
1804   0F70 DA            push d
1805   0F71 FD 2E 00 00   mov32 cb, $00000000
1805   0F75 00 00 
1806   0F77 E7            pop d
1807   0F78 FD 43         mov [d], b
1808   0F7A             ; if(num == 0){ 
1809   0F7A             _if39_cond:
1810   0F7A FA 05 00      lea d, [bp + 5] ; $num
1811   0F7D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1812   0F80 FD 39         mov c, b ; And place it into C
1813   0F82 2A            mov b, [d] ; Lower Word in B
1814   0F83             ; --- START RELATIONAL
1815   0F83 D7            push a
1816   0F84 FD D8         push g
1817   0F86 11            mov a, b
1818   0F87 FD 7A         mov g, c
1819   0F89 FD 2E 00 00   mov32 cb, $00000000
1819   0F8D 00 00 
1820   0F8F FD AF         cmp32 ga, cb
1821   0F91 FD 71         seq ; ==
1822   0F93 FD F1         pop g
1823   0F95 E4            pop a
1824   0F96             ; --- END RELATIONAL
1825   0F96 C0 00 00      cmp b, 0
1826   0F99 C6 AE 0F      je _if39_exit
1827   0F9C             _if39_TRUE:
1828   0F9C             ; putchar('0'); 
1829   0F9C             ; --- START FUNCTION CALL
1830   0F9C FD 2E 30 00   mov32 cb, $00000030
1830   0FA0 00 00 
1831   0FA2 DD            push bl
1832   0FA3 07 56 0F      call putchar
1833   0FA6 51 01 00      add sp, 1
1834   0FA9             ; --- END FUNCTION CALL
1835   0FA9             ; return; 
1836   0FA9 F9            leave
1837   0FAA 09            ret
1838   0FAB 0A AE 0F      jmp _if39_exit
1839   0FAE             _if39_exit:
1840   0FAE             ; while (num > 0) { 
1841   0FAE             _while40_cond:
1842   0FAE FA 05 00      lea d, [bp + 5] ; $num
1843   0FB1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1844   0FB4 FD 39         mov c, b ; And place it into C
1845   0FB6 2A            mov b, [d] ; Lower Word in B
1846   0FB7             ; --- START RELATIONAL
1847   0FB7 D7            push a
1848   0FB8 FD D8         push g
1849   0FBA 11            mov a, b
1850   0FBB FD 7A         mov g, c
1851   0FBD FD 2E 00 00   mov32 cb, $00000000
1851   0FC1 00 00 
1852   0FC3 FD AF         cmp32 ga, cb
1853   0FC5 FD 81         sgu
1854   0FC7 FD F1         pop g
1855   0FC9 E4            pop a
1856   0FCA             ; --- END RELATIONAL
1857   0FCA C0 00 00      cmp b, 0
1858   0FCD C6 4E 10      je _while40_exit
1859   0FD0             _while40_block:
1860   0FD0             ; digits[i] = '0' + (num % 10); 
1861   0FD0 FA F7 FF      lea d, [bp + -9] ; $digits
1862   0FD3 D7            push a
1863   0FD4 DA            push d
1864   0FD5 FA F5 FF      lea d, [bp + -11] ; $i
1865   0FD8 2A            mov b, [d]
1866   0FD9 38 00 00      mov c, 0
1867   0FDC E7            pop d
1868   0FDD 5A            add d, b
1869   0FDE E4            pop a
1870   0FDF DA            push d
1871   0FE0 FD 2E 30 00   mov32 cb, $00000030
1871   0FE4 00 00 
1872   0FE6             ; --- START TERMS
1873   0FE6 D7            push a
1874   0FE7 11            mov a, b
1875   0FE8 FA 05 00      lea d, [bp + 5] ; $num
1876   0FEB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1877   0FEE FD 39         mov c, b ; And place it into C
1878   0FF0 2A            mov b, [d] ; Lower Word in B
1879   0FF1             ; --- START FACTORS
1880   0FF1 D7            push a
1881   0FF2 FD D8         push g
1882   0FF4 11            mov a, b
1883   0FF5 FD 7A         mov g, c
1884   0FF7 FD 2E 0A 00   mov32 cb, $0000000a
1884   0FFB 00 00 
1885   0FFD FD D8         push g ; save 'g' as the div instruction uses it
1886   0FFF AE            div a, b ; %, a: quotient, b: remainder
1887   1000 11            mov a, b
1888   1001 FD F1         pop g
1889   1003 FD 38         mov c, g
1890   1005 27            mov b, a
1891   1006 FD F1         pop g
1892   1008 E4            pop a
1893   1009             ; --- END FACTORS
1894   1009 FD 15         add32 cb, ga
1895   100B E4            pop a
1896   100C             ; --- END TERMS
1897   100C E7            pop d
1898   100D FD 3E         mov [d], bl
1899   100F             ; num = num / 10; 
1900   100F FA 05 00      lea d, [bp + 5] ; $num
1901   1012 DA            push d
1902   1013 FA 05 00      lea d, [bp + 5] ; $num
1903   1016 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1904   1019 FD 39         mov c, b ; And place it into C
1905   101B 2A            mov b, [d] ; Lower Word in B
1906   101C             ; --- START FACTORS
1907   101C D7            push a
1908   101D FD D8         push g
1909   101F 11            mov a, b
1910   1020 FD 7A         mov g, c
1911   1022 FD 2E 0A 00   mov32 cb, $0000000a
1911   1026 00 00 
1912   1028 FD D8         push g ; save 'g' as the div instruction uses it
1913   102A AE            div a, b ; /, a: quotient, b: remainder
1914   102B FD F1         pop g
1915   102D FD 38         mov c, g
1916   102F 27            mov b, a
1917   1030 FD F1         pop g
1918   1032 E4            pop a
1919   1033             ; --- END FACTORS
1920   1033 E7            pop d
1921   1034 FD 43         mov [d], b
1922   1036 28            mov b, c
1923   1037 FD 44 02 00   mov [d + 2], b
1924   103B             ; i++; 
1925   103B FA F5 FF      lea d, [bp + -11] ; $i
1926   103E 2A            mov b, [d]
1927   103F 38 00 00      mov c, 0
1928   1042 11            mov a, b
1929   1043 FD 77         inc b
1930   1045 FA F5 FF      lea d, [bp + -11] ; $i
1931   1048 FD 43         mov [d], b
1932   104A 27            mov b, a
1933   104B 0A AE 0F      jmp _while40_cond
1934   104E             _while40_exit:
1935   104E             ; while (i > 0) { 
1936   104E             _while47_cond:
1937   104E FA F5 FF      lea d, [bp + -11] ; $i
1938   1051 2A            mov b, [d]
1939   1052 38 00 00      mov c, 0
1940   1055             ; --- START RELATIONAL
1941   1055 D7            push a
1942   1056 11            mov a, b
1943   1057 FD 2E 00 00   mov32 cb, $00000000
1943   105B 00 00 
1944   105D B0            cmp a, b
1945   105E FD 7F         sgt ; >
1946   1060 E4            pop a
1947   1061             ; --- END RELATIONAL
1948   1061 C0 00 00      cmp b, 0
1949   1064 C6 96 10      je _while47_exit
1950   1067             _while47_block:
1951   1067             ; i--; 
1952   1067 FA F5 FF      lea d, [bp + -11] ; $i
1953   106A 2A            mov b, [d]
1954   106B 38 00 00      mov c, 0
1955   106E 11            mov a, b
1956   106F FD 7D         dec b
1957   1071 FA F5 FF      lea d, [bp + -11] ; $i
1958   1074 FD 43         mov [d], b
1959   1076 27            mov b, a
1960   1077             ; putchar(digits[i]); 
1961   1077             ; --- START FUNCTION CALL
1962   1077 FA F7 FF      lea d, [bp + -9] ; $digits
1963   107A D7            push a
1964   107B DA            push d
1965   107C FA F5 FF      lea d, [bp + -11] ; $i
1966   107F 2A            mov b, [d]
1967   1080 38 00 00      mov c, 0
1968   1083 E7            pop d
1969   1084 5A            add d, b
1970   1085 E4            pop a
1971   1086 32            mov bl, [d]
1972   1087 A7 00         mov bh, 0
1973   1089 38 00 00      mov c, 0
1974   108C DD            push bl
1975   108D 07 56 0F      call putchar
1976   1090 51 01 00      add sp, 1
1977   1093             ; --- END FUNCTION CALL
1978   1093 0A 4E 10      jmp _while47_cond
1979   1096             _while47_exit:
1980   1096 F9            leave
1981   1097 09            ret
1982   1098             
1983   1098             printx32:
1984   1098 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1985   109B             ; --- BEGIN INLINE ASM SEGMENT
1986   109B FA 05 00      lea d, [bp + 5] ; $hex
1987   109E 2B 02 00      mov b, [d+2]
1988   10A1 07 AA 10      call print_u16x_printx32
1989   10A4 2A            mov b, [d]
1990   10A5 07 AA 10      call print_u16x_printx32
1991   10A8             ; --- END INLINE ASM SEGMENT
1992   10A8             ; return; 
1993   10A8 F9            leave
1994   10A9 09            ret
1995   10AA             ; --- BEGIN INLINE ASM SEGMENT
1996   10AA             print_u16x_printx32:
1997   10AA D7            push a
1998   10AB D8            push b
1999   10AC DD            push bl
2000   10AD 30            mov bl, bh
2001   10AE 07 CC 10      call _itoa_printx32        ; convert bh to char in A
2002   10B1 2F            mov bl, al        ; save al
2003   10B2 19 00         mov al, 0
2004   10B4 05 03         syscall sys_io        ; display AH
2005   10B6 24            mov ah, bl        ; retrieve al
2006   10B7 19 00         mov al, 0
2007   10B9 05 03         syscall sys_io        ; display AL
2008   10BB EA            pop bl
2009   10BC 07 CC 10      call _itoa_printx32        ; convert bh to char in A
2010   10BF 2F            mov bl, al        ; save al
2011   10C0 19 00         mov al, 0
2012   10C2 05 03         syscall sys_io        ; display AH
2013   10C4 24            mov ah, bl        ; retrieve al
2014   10C5 19 00         mov al, 0
2015   10C7 05 03         syscall sys_io        ; display AL
2016   10C9 E5            pop b
2017   10CA E4            pop a
2018   10CB 09            ret
2019   10CC             _itoa_printx32:
2020   10CC DA            push d
2021   10CD D8            push b
2022   10CE A7 00         mov bh, 0
2023   10D0 FD A4 04      shr bl, 4  
2024   10D3 74            mov d, b
2025   10D4 1F E6 10      mov al, [d + s_hex_digits_printx32]
2026   10D7 23            mov ah, al
2027   10D8 E5            pop b
2028   10D9 D8            push b
2029   10DA A7 00         mov bh, 0
2030   10DC FD 87 0F      and bl, $0F
2031   10DF 74            mov d, b
2032   10E0 1F E6 10      mov al, [d + s_hex_digits_printx32]
2033   10E3 E5            pop b
2034   10E4 E7            pop d
2035   10E5 09            ret
2036   10E6 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2036   10EA 34 35 36 37 
2036   10EE 38 39 41 42 
2036   10F2 43 44 45 46 
2037   10F6             ; --- END INLINE ASM SEGMENT
2038   10F6 F9            leave
2039   10F7 09            ret
2040   10F8             
2041   10F8             err:
2042   10F8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2043   10FB             ; print(e); 
2044   10FB             ; --- START FUNCTION CALL
2045   10FB FA 05 00      lea d, [bp + 5] ; $e
2046   10FE 2A            mov b, [d]
2047   10FF 38 00 00      mov c, 0
2048   1102 FD AB         swp b
2049   1104 D8            push b
2050   1105 07 0D 11      call print
2051   1108 51 02 00      add sp, 2
2052   110B             ; --- END FUNCTION CALL
2053   110B F9            leave
2054   110C 09            ret
2055   110D             
2056   110D             print:
2057   110D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2058   1110             ; --- BEGIN INLINE ASM SEGMENT
2059   1110 FA 05 00      lea d, [bp + 5] ; $s
2060   1113 FD 2A         mov d, [d]
2061   1115             _puts_L1_print:
2062   1115 1E            mov al, [d]
2063   1116 B9 00         cmp al, 0
2064   1118 C6 24 11      jz _puts_END_print
2065   111B 23            mov ah, al
2066   111C 19 00         mov al, 0
2067   111E 05 03         syscall sys_io
2068   1120 79            inc d
2069   1121 0A 15 11      jmp _puts_L1_print
2070   1124             _puts_END_print:
2071   1124             ; --- END INLINE ASM SEGMENT
2072   1124 F9            leave
2073   1125 09            ret
2074   1126             
2075   1126             print_signed:
2076   1126 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2077   1129             ; char digits[5]; 
2078   1129 52 05 00      sub sp, 5
2079   112C             ; int i = 0; 
2080   112C 52 02 00      sub sp, 2
2081   112F             ; --- START LOCAL VAR INITIALIZATION
2082   112F FA FA FF      lea d, [bp + -6] ; $i
2083   1132 DA            push d
2084   1133 FD 2E 00 00   mov32 cb, $00000000
2084   1137 00 00 
2085   1139 E7            pop d
2086   113A FD 43         mov [d], b
2087   113C             ; --- END LOCAL VAR INITIALIZATION
2088   113C             ; if (num < 0) { 
2089   113C             _if48_cond:
2090   113C FA 05 00      lea d, [bp + 5] ; $num
2091   113F 2A            mov b, [d]
2092   1140 38 00 00      mov c, 0
2093   1143             ; --- START RELATIONAL
2094   1143 D7            push a
2095   1144 11            mov a, b
2096   1145 FD 2E 00 00   mov32 cb, $00000000
2096   1149 00 00 
2097   114B B0            cmp a, b
2098   114C FD 73         slt ; < (signed)
2099   114E E4            pop a
2100   114F             ; --- END RELATIONAL
2101   114F C0 00 00      cmp b, 0
2102   1152 C6 75 11      je _if48_else
2103   1155             _if48_TRUE:
2104   1155             ; putchar('-'); 
2105   1155             ; --- START FUNCTION CALL
2106   1155 FD 2E 2D 00   mov32 cb, $0000002d
2106   1159 00 00 
2107   115B DD            push bl
2108   115C 07 56 0F      call putchar
2109   115F 51 01 00      add sp, 1
2110   1162             ; --- END FUNCTION CALL
2111   1162             ; num = -num; 
2112   1162 FA 05 00      lea d, [bp + 5] ; $num
2113   1165 DA            push d
2114   1166 FA 05 00      lea d, [bp + 5] ; $num
2115   1169 2A            mov b, [d]
2116   116A 38 00 00      mov c, 0
2117   116D FD 97         neg b
2118   116F E7            pop d
2119   1170 FD 43         mov [d], b
2120   1172 0A A0 11      jmp _if48_exit
2121   1175             _if48_else:
2122   1175             ; if (num == 0) { 
2123   1175             _if49_cond:
2124   1175 FA 05 00      lea d, [bp + 5] ; $num
2125   1178 2A            mov b, [d]
2126   1179 38 00 00      mov c, 0
2127   117C             ; --- START RELATIONAL
2128   117C D7            push a
2129   117D 11            mov a, b
2130   117E FD 2E 00 00   mov32 cb, $00000000
2130   1182 00 00 
2131   1184 B0            cmp a, b
2132   1185 FD 71         seq ; ==
2133   1187 E4            pop a
2134   1188             ; --- END RELATIONAL
2135   1188 C0 00 00      cmp b, 0
2136   118B C6 A0 11      je _if49_exit
2137   118E             _if49_TRUE:
2138   118E             ; putchar('0'); 
2139   118E             ; --- START FUNCTION CALL
2140   118E FD 2E 30 00   mov32 cb, $00000030
2140   1192 00 00 
2141   1194 DD            push bl
2142   1195 07 56 0F      call putchar
2143   1198 51 01 00      add sp, 1
2144   119B             ; --- END FUNCTION CALL
2145   119B             ; return; 
2146   119B F9            leave
2147   119C 09            ret
2148   119D 0A A0 11      jmp _if49_exit
2149   11A0             _if49_exit:
2150   11A0             _if48_exit:
2151   11A0             ; while (num > 0) { 
2152   11A0             _while50_cond:
2153   11A0 FA 05 00      lea d, [bp + 5] ; $num
2154   11A3 2A            mov b, [d]
2155   11A4 38 00 00      mov c, 0
2156   11A7             ; --- START RELATIONAL
2157   11A7 D7            push a
2158   11A8 11            mov a, b
2159   11A9 FD 2E 00 00   mov32 cb, $00000000
2159   11AD 00 00 
2160   11AF B0            cmp a, b
2161   11B0 FD 7F         sgt ; >
2162   11B2 E4            pop a
2163   11B3             ; --- END RELATIONAL
2164   11B3 C0 00 00      cmp b, 0
2165   11B6 C6 2D 12      je _while50_exit
2166   11B9             _while50_block:
2167   11B9             ; digits[i] = '0' + (num % 10); 
2168   11B9 FA FC FF      lea d, [bp + -4] ; $digits
2169   11BC D7            push a
2170   11BD DA            push d
2171   11BE FA FA FF      lea d, [bp + -6] ; $i
2172   11C1 2A            mov b, [d]
2173   11C2 38 00 00      mov c, 0
2174   11C5 E7            pop d
2175   11C6 5A            add d, b
2176   11C7 E4            pop a
2177   11C8 DA            push d
2178   11C9 FD 2E 30 00   mov32 cb, $00000030
2178   11CD 00 00 
2179   11CF             ; --- START TERMS
2180   11CF D7            push a
2181   11D0 11            mov a, b
2182   11D1 FA 05 00      lea d, [bp + 5] ; $num
2183   11D4 2A            mov b, [d]
2184   11D5 38 00 00      mov c, 0
2185   11D8             ; --- START FACTORS
2186   11D8 D7            push a
2187   11D9 FD D8         push g
2188   11DB 11            mov a, b
2189   11DC FD 7A         mov g, c
2190   11DE FD 2E 0A 00   mov32 cb, $0000000a
2190   11E2 00 00 
2191   11E4 FD D8         push g ; save 'g' as the div instruction uses it
2192   11E6 AE            div a, b ; %, a: quotient, b: remainder
2193   11E7 11            mov a, b
2194   11E8 FD F1         pop g
2195   11EA FD 38         mov c, g
2196   11EC 27            mov b, a
2197   11ED FD F1         pop g
2198   11EF E4            pop a
2199   11F0             ; --- END FACTORS
2200   11F0 56            add b, a
2201   11F1 E4            pop a
2202   11F2             ; --- END TERMS
2203   11F2 E7            pop d
2204   11F3 FD 3E         mov [d], bl
2205   11F5             ; num = num / 10; 
2206   11F5 FA 05 00      lea d, [bp + 5] ; $num
2207   11F8 DA            push d
2208   11F9 FA 05 00      lea d, [bp + 5] ; $num
2209   11FC 2A            mov b, [d]
2210   11FD 38 00 00      mov c, 0
2211   1200             ; --- START FACTORS
2212   1200 D7            push a
2213   1201 FD D8         push g
2214   1203 11            mov a, b
2215   1204 FD 7A         mov g, c
2216   1206 FD 2E 0A 00   mov32 cb, $0000000a
2216   120A 00 00 
2217   120C FD D8         push g ; save 'g' as the div instruction uses it
2218   120E AE            div a, b ; /, a: quotient, b: remainder
2219   120F FD F1         pop g
2220   1211 FD 38         mov c, g
2221   1213 27            mov b, a
2222   1214 FD F1         pop g
2223   1216 E4            pop a
2224   1217             ; --- END FACTORS
2225   1217 E7            pop d
2226   1218 FD 43         mov [d], b
2227   121A             ; i++; 
2228   121A FA FA FF      lea d, [bp + -6] ; $i
2229   121D 2A            mov b, [d]
2230   121E 38 00 00      mov c, 0
2231   1221 11            mov a, b
2232   1222 FD 77         inc b
2233   1224 FA FA FF      lea d, [bp + -6] ; $i
2234   1227 FD 43         mov [d], b
2235   1229 27            mov b, a
2236   122A 0A A0 11      jmp _while50_cond
2237   122D             _while50_exit:
2238   122D             ; while (i > 0) { 
2239   122D             _while57_cond:
2240   122D FA FA FF      lea d, [bp + -6] ; $i
2241   1230 2A            mov b, [d]
2242   1231 38 00 00      mov c, 0
2243   1234             ; --- START RELATIONAL
2244   1234 D7            push a
2245   1235 11            mov a, b
2246   1236 FD 2E 00 00   mov32 cb, $00000000
2246   123A 00 00 
2247   123C B0            cmp a, b
2248   123D FD 7F         sgt ; >
2249   123F E4            pop a
2250   1240             ; --- END RELATIONAL
2251   1240 C0 00 00      cmp b, 0
2252   1243 C6 75 12      je _while57_exit
2253   1246             _while57_block:
2254   1246             ; i--; 
2255   1246 FA FA FF      lea d, [bp + -6] ; $i
2256   1249 2A            mov b, [d]
2257   124A 38 00 00      mov c, 0
2258   124D 11            mov a, b
2259   124E FD 7D         dec b
2260   1250 FA FA FF      lea d, [bp + -6] ; $i
2261   1253 FD 43         mov [d], b
2262   1255 27            mov b, a
2263   1256             ; putchar(digits[i]); 
2264   1256             ; --- START FUNCTION CALL
2265   1256 FA FC FF      lea d, [bp + -4] ; $digits
2266   1259 D7            push a
2267   125A DA            push d
2268   125B FA FA FF      lea d, [bp + -6] ; $i
2269   125E 2A            mov b, [d]
2270   125F 38 00 00      mov c, 0
2271   1262 E7            pop d
2272   1263 5A            add d, b
2273   1264 E4            pop a
2274   1265 32            mov bl, [d]
2275   1266 A7 00         mov bh, 0
2276   1268 38 00 00      mov c, 0
2277   126B DD            push bl
2278   126C 07 56 0F      call putchar
2279   126F 51 01 00      add sp, 1
2280   1272             ; --- END FUNCTION CALL
2281   1272 0A 2D 12      jmp _while57_cond
2282   1275             _while57_exit:
2283   1275 F9            leave
2284   1276 09            ret
2285   1277             
2286   1277             print_unsigned:
2287   1277 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2288   127A             ; char digits[5]; 
2289   127A 52 05 00      sub sp, 5
2290   127D             ; int i; 
2291   127D 52 02 00      sub sp, 2
2292   1280             ; i = 0; 
2293   1280 FA FA FF      lea d, [bp + -6] ; $i
2294   1283 DA            push d
2295   1284 FD 2E 00 00   mov32 cb, $00000000
2295   1288 00 00 
2296   128A E7            pop d
2297   128B FD 43         mov [d], b
2298   128D             ; if(num == 0){ 
2299   128D             _if58_cond:
2300   128D FA 05 00      lea d, [bp + 5] ; $num
2301   1290 2A            mov b, [d]
2302   1291 38 00 00      mov c, 0
2303   1294             ; --- START RELATIONAL
2304   1294 D7            push a
2305   1295 11            mov a, b
2306   1296 FD 2E 00 00   mov32 cb, $00000000
2306   129A 00 00 
2307   129C B0            cmp a, b
2308   129D FD 71         seq ; ==
2309   129F E4            pop a
2310   12A0             ; --- END RELATIONAL
2311   12A0 C0 00 00      cmp b, 0
2312   12A3 C6 B8 12      je _if58_exit
2313   12A6             _if58_TRUE:
2314   12A6             ; putchar('0'); 
2315   12A6             ; --- START FUNCTION CALL
2316   12A6 FD 2E 30 00   mov32 cb, $00000030
2316   12AA 00 00 
2317   12AC DD            push bl
2318   12AD 07 56 0F      call putchar
2319   12B0 51 01 00      add sp, 1
2320   12B3             ; --- END FUNCTION CALL
2321   12B3             ; return; 
2322   12B3 F9            leave
2323   12B4 09            ret
2324   12B5 0A B8 12      jmp _if58_exit
2325   12B8             _if58_exit:
2326   12B8             ; while (num > 0) { 
2327   12B8             _while59_cond:
2328   12B8 FA 05 00      lea d, [bp + 5] ; $num
2329   12BB 2A            mov b, [d]
2330   12BC 38 00 00      mov c, 0
2331   12BF             ; --- START RELATIONAL
2332   12BF D7            push a
2333   12C0 11            mov a, b
2334   12C1 FD 2E 00 00   mov32 cb, $00000000
2334   12C5 00 00 
2335   12C7 B0            cmp a, b
2336   12C8 FD 81         sgu ; > (unsigned)
2337   12CA E4            pop a
2338   12CB             ; --- END RELATIONAL
2339   12CB C0 00 00      cmp b, 0
2340   12CE C6 45 13      je _while59_exit
2341   12D1             _while59_block:
2342   12D1             ; digits[i] = '0' + (num % 10); 
2343   12D1 FA FC FF      lea d, [bp + -4] ; $digits
2344   12D4 D7            push a
2345   12D5 DA            push d
2346   12D6 FA FA FF      lea d, [bp + -6] ; $i
2347   12D9 2A            mov b, [d]
2348   12DA 38 00 00      mov c, 0
2349   12DD E7            pop d
2350   12DE 5A            add d, b
2351   12DF E4            pop a
2352   12E0 DA            push d
2353   12E1 FD 2E 30 00   mov32 cb, $00000030
2353   12E5 00 00 
2354   12E7             ; --- START TERMS
2355   12E7 D7            push a
2356   12E8 11            mov a, b
2357   12E9 FA 05 00      lea d, [bp + 5] ; $num
2358   12EC 2A            mov b, [d]
2359   12ED 38 00 00      mov c, 0
2360   12F0             ; --- START FACTORS
2361   12F0 D7            push a
2362   12F1 FD D8         push g
2363   12F3 11            mov a, b
2364   12F4 FD 7A         mov g, c
2365   12F6 FD 2E 0A 00   mov32 cb, $0000000a
2365   12FA 00 00 
2366   12FC FD D8         push g ; save 'g' as the div instruction uses it
2367   12FE AE            div a, b ; %, a: quotient, b: remainder
2368   12FF 11            mov a, b
2369   1300 FD F1         pop g
2370   1302 FD 38         mov c, g
2371   1304 27            mov b, a
2372   1305 FD F1         pop g
2373   1307 E4            pop a
2374   1308             ; --- END FACTORS
2375   1308 56            add b, a
2376   1309 E4            pop a
2377   130A             ; --- END TERMS
2378   130A E7            pop d
2379   130B FD 3E         mov [d], bl
2380   130D             ; num = num / 10; 
2381   130D FA 05 00      lea d, [bp + 5] ; $num
2382   1310 DA            push d
2383   1311 FA 05 00      lea d, [bp + 5] ; $num
2384   1314 2A            mov b, [d]
2385   1315 38 00 00      mov c, 0
2386   1318             ; --- START FACTORS
2387   1318 D7            push a
2388   1319 FD D8         push g
2389   131B 11            mov a, b
2390   131C FD 7A         mov g, c
2391   131E FD 2E 0A 00   mov32 cb, $0000000a
2391   1322 00 00 
2392   1324 FD D8         push g ; save 'g' as the div instruction uses it
2393   1326 AE            div a, b ; /, a: quotient, b: remainder
2394   1327 FD F1         pop g
2395   1329 FD 38         mov c, g
2396   132B 27            mov b, a
2397   132C FD F1         pop g
2398   132E E4            pop a
2399   132F             ; --- END FACTORS
2400   132F E7            pop d
2401   1330 FD 43         mov [d], b
2402   1332             ; i++; 
2403   1332 FA FA FF      lea d, [bp + -6] ; $i
2404   1335 2A            mov b, [d]
2405   1336 38 00 00      mov c, 0
2406   1339 11            mov a, b
2407   133A FD 77         inc b
2408   133C FA FA FF      lea d, [bp + -6] ; $i
2409   133F FD 43         mov [d], b
2410   1341 27            mov b, a
2411   1342 0A B8 12      jmp _while59_cond
2412   1345             _while59_exit:
2413   1345             ; while (i > 0) { 
2414   1345             _while66_cond:
2415   1345 FA FA FF      lea d, [bp + -6] ; $i
2416   1348 2A            mov b, [d]
2417   1349 38 00 00      mov c, 0
2418   134C             ; --- START RELATIONAL
2419   134C D7            push a
2420   134D 11            mov a, b
2421   134E FD 2E 00 00   mov32 cb, $00000000
2421   1352 00 00 
2422   1354 B0            cmp a, b
2423   1355 FD 7F         sgt ; >
2424   1357 E4            pop a
2425   1358             ; --- END RELATIONAL
2426   1358 C0 00 00      cmp b, 0
2427   135B C6 8D 13      je _while66_exit
2428   135E             _while66_block:
2429   135E             ; i--; 
2430   135E FA FA FF      lea d, [bp + -6] ; $i
2431   1361 2A            mov b, [d]
2432   1362 38 00 00      mov c, 0
2433   1365 11            mov a, b
2434   1366 FD 7D         dec b
2435   1368 FA FA FF      lea d, [bp + -6] ; $i
2436   136B FD 43         mov [d], b
2437   136D 27            mov b, a
2438   136E             ; putchar(digits[i]); 
2439   136E             ; --- START FUNCTION CALL
2440   136E FA FC FF      lea d, [bp + -4] ; $digits
2441   1371 D7            push a
2442   1372 DA            push d
2443   1373 FA FA FF      lea d, [bp + -6] ; $i
2444   1376 2A            mov b, [d]
2445   1377 38 00 00      mov c, 0
2446   137A E7            pop d
2447   137B 5A            add d, b
2448   137C E4            pop a
2449   137D 32            mov bl, [d]
2450   137E A7 00         mov bh, 0
2451   1380 38 00 00      mov c, 0
2452   1383 DD            push bl
2453   1384 07 56 0F      call putchar
2454   1387 51 01 00      add sp, 1
2455   138A             ; --- END FUNCTION CALL
2456   138A 0A 45 13      jmp _while66_cond
2457   138D             _while66_exit:
2458   138D F9            leave
2459   138E 09            ret
2460   138F             
2461   138F             printx16:
2462   138F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2463   1392             ; --- BEGIN INLINE ASM SEGMENT
2464   1392 FA 05 00      lea d, [bp + 5] ; $hex
2465   1395 2A            mov b, [d]
2466   1396             print_u16x_printx16:
2467   1396 DD            push bl
2468   1397 30            mov bl, bh
2469   1398 07 B5 13      call _itoa_printx16        ; convert bh to char in A
2470   139B 2F            mov bl, al        ; save al
2471   139C 19 00         mov al, 0
2472   139E 05 03         syscall sys_io        ; display AH
2473   13A0 24            mov ah, bl        ; retrieve al
2474   13A1 19 00         mov al, 0
2475   13A3 05 03         syscall sys_io        ; display AL
2476   13A5 EA            pop bl
2477   13A6 07 B5 13      call _itoa_printx16        ; convert bh to char in A
2478   13A9 2F            mov bl, al        ; save al
2479   13AA 19 00         mov al, 0
2480   13AC 05 03         syscall sys_io        ; display AH
2481   13AE 24            mov ah, bl        ; retrieve al
2482   13AF 19 00         mov al, 0
2483   13B1 05 03         syscall sys_io        ; display AL
2484   13B3             ; --- END INLINE ASM SEGMENT
2485   13B3             ; return; 
2486   13B3 F9            leave
2487   13B4 09            ret
2488   13B5             ; --- BEGIN INLINE ASM SEGMENT
2489   13B5             _itoa_printx16:
2490   13B5 DA            push d
2491   13B6 D8            push b
2492   13B7 A7 00         mov bh, 0
2493   13B9 FD A4 04      shr bl, 4  
2494   13BC 74            mov d, b
2495   13BD 1F CF 13      mov al, [d + s_hex_digits_printx16]
2496   13C0 23            mov ah, al
2497   13C1 E5            pop b
2498   13C2 D8            push b
2499   13C3 A7 00         mov bh, 0
2500   13C5 FD 87 0F      and bl, $0F
2501   13C8 74            mov d, b
2502   13C9 1F CF 13      mov al, [d + s_hex_digits_printx16]
2503   13CC E5            pop b
2504   13CD E7            pop d
2505   13CE 09            ret
2506   13CF 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2506   13D3 34 35 36 37 
2506   13D7 38 39 41 42 
2506   13DB 43 44 45 46 
2507   13DF             ; --- END INLINE ASM SEGMENT
2508   13DF F9            leave
2509   13E0 09            ret
2510   13E1             
2511   13E1             puts:
2512   13E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2513   13E4             ; --- BEGIN INLINE ASM SEGMENT
2514   13E4 FA 05 00      lea d, [bp + 5] ; $s
2515   13E7 FD 2A         mov d, [d]
2516   13E9             _puts_L1_puts:
2517   13E9 1E            mov al, [d]
2518   13EA B9 00         cmp al, 0
2519   13EC C6 F8 13      jz _puts_END_puts
2520   13EF 23            mov ah, al
2521   13F0 19 00         mov al, 0
2522   13F2 05 03         syscall sys_io
2523   13F4 79            inc d
2524   13F5 0A E9 13      jmp _puts_L1_puts
2525   13F8             _puts_END_puts:
2526   13F8 10 00 0A      mov a, $0A00
2527   13FB 05 03         syscall sys_io
2528   13FD             ; --- END INLINE ASM SEGMENT
2529   13FD F9            leave
2530   13FE 09            ret
2531   13FF             ; --- END TEXT SEGMENT
2532   13FF             
2533   13FF             ; --- BEGIN DATA SEGMENT
2534   13FF 1B 5B 32 4A _clear_data: .db $1b,$5b,$32,$4a,$1b,$5b,$48,$00,
2534   1403 1B 5B 48 00 
2535   1407             
2536   1407 00 00 00    .fill 3, 0
2537   140A 00 00 00 00 _nextState_data: .fill 1200, 0
2537   140E 00 00 00 00 
2537   1412 00 00 00 00 
2537   1416 00 00 00 00 
2537   141A 00 00 00 00 
2537   141E 00 00 00 00 
2537   1422 00 00 00 00 
2537   1426 00 00 00 00 
2537   142A 00 00 00 00 
2537   142E 00 00 00 00 
2537   1432 00 00 00 00 
2537   1436 00 00 00 00 
2537   143A 00 00 00 00 
2537   143E 00 00 00 00 
2537   1442 00 00 00 00 
2537   1446 00 00 00 00 
2537   144A 00 00 00 00 
2537   144E 00 00 00 00 
2537   1452 00 00 00 00 
2537   1456 00 00 00 00 
2537   145A 00 00 00 00 
2537   145E 00 00 00 00 
2537   1462 00 00 00 00 
2537   1466 00 00 00 00 
2537   146A 00 00 00 00 
2537   146E 00 00 00 00 
2537   1472 00 00 00 00 
2537   1476 00 00 00 00 
2537   147A 00 00 00 00 
2537   147E 00 00 00 00 
2537   1482 00 00 00 00 
2537   1486 00 00 00 00 
2537   148A 00 00 00 00 
2537   148E 00 00 00 00 
2537   1492 00 00 00 00 
2537   1496 00 00 00 00 
2537   149A 00 00 00 00 
2537   149E 00 00 00 00 
2537   14A2 00 00 00 00 
2537   14A6 00 00 00 00 
2537   14AA 00 00 00 00 
2537   14AE 00 00 00 00 
2537   14B2 00 00 00 00 
2537   14B6 00 00 00 00 
2537   14BA 00 00 00 00 
2537   14BE 00 00 00 00 
2537   14C2 00 00 00 00 
2537   14C6 00 00 00 00 
2537   14CA 00 00 00 00 
2537   14CE 00 00 00 00 
2537   14D2 00 00 00 00 
2537   14D6 00 00 00 00 
2537   14DA 00 00 00 00 
2537   14DE 00 00 00 00 
2537   14E2 00 00 00 00 
2537   14E6 00 00 00 00 
2537   14EA 00 00 00 00 
2537   14EE 00 00 00 00 
2537   14F2 00 00 00 00 
2537   14F6 00 00 00 00 
2537   14FA 00 00 00 00 
2537   14FE 00 00 00 00 
2537   1502 00 00 00 00 
2537   1506 00 00 00 00 
2537   150A 00 00 00 00 
2537   150E 00 00 00 00 
2537   1512 00 00 00 00 
2537   1516 00 00 00 00 
2537   151A 00 00 00 00 
2537   151E 00 00 00 00 
2537   1522 00 00 00 00 
2537   1526 00 00 00 00 
2537   152A 00 00 00 00 
2537   152E 00 00 00 00 
2537   1532 00 00 00 00 
2537   1536 00 00 00 00 
2537   153A 00 00 00 00 
2537   153E 00 00 00 00 
2537   1542 00 00 00 00 
2537   1546 00 00 00 00 
2537   154A 00 00 00 00 
2537   154E 00 00 00 00 
2537   1552 00 00 00 00 
2537   1556 00 00 00 00 
2537   155A 00 00 00 00 
2537   155E 00 00 00 00 
2537   1562 00 00 00 00 
2537   1566 00 00 00 00 
2537   156A 00 00 00 00 
2537   156E 00 00 00 00 
2537   1572 00 00 00 00 
2537   1576 00 00 00 00 
2537   157A 00 00 00 00 
2537   157E 00 00 00 00 
2537   1582 00 00 00 00 
2537   1586 00 00 00 00 
2537   158A 00 00 00 00 
2537   158E 00 00 00 00 
2537   1592 00 00 00 00 
2537   1596 00 00 00 00 
2537   159A 00 00 00 00 
2537   159E 00 00 00 00 
2537   15A2 00 00 00 00 
2537   15A6 00 00 00 00 
2537   15AA 00 00 00 00 
2537   15AE 00 00 00 00 
2537   15B2 00 00 00 00 
2537   15B6 00 00 00 00 
2537   15BA 00 00 00 00 
2537   15BE 00 00 00 00 
2537   15C2 00 00 00 00 
2537   15C6 00 00 00 00 
2537   15CA 00 00 00 00 
2537   15CE 00 00 00 00 
2537   15D2 00 00 00 00 
2537   15D6 00 00 00 00 
2537   15DA 00 00 00 00 
2537   15DE 00 00 00 00 
2537   15E2 00 00 00 00 
2537   15E6 00 00 00 00 
2537   15EA 00 00 00 00 
2537   15EE 00 00 00 00 
2537   15F2 00 00 00 00 
2537   15F6 00 00 00 00 
2537   15FA 00 00 00 00 
2537   15FE 00 00 00 00 
2537   1602 00 00 00 00 
2537   1606 00 00 00 00 
2537   160A 00 00 00 00 
2537   160E 00 00 00 00 
2537   1612 00 00 00 00 
2537   1616 00 00 00 00 
2537   161A 00 00 00 00 
2537   161E 00 00 00 00 
2537   1622 00 00 00 00 
2537   1626 00 00 00 00 
2537   162A 00 00 00 00 
2537   162E 00 00 00 00 
2537   1632 00 00 00 00 
2537   1636 00 00 00 00 
2537   163A 00 00 00 00 
2537   163E 00 00 00 00 
2537   1642 00 00 00 00 
2537   1646 00 00 00 00 
2537   164A 00 00 00 00 
2537   164E 00 00 00 00 
2537   1652 00 00 00 00 
2537   1656 00 00 00 00 
2537   165A 00 00 00 00 
2537   165E 00 00 00 00 
2537   1662 00 00 00 00 
2537   1666 00 00 00 00 
2537   166A 00 00 00 00 
2537   166E 00 00 00 00 
2537   1672 00 00 00 00 
2537   1676 00 00 00 00 
2537   167A 00 00 00 00 
2537   167E 00 00 00 00 
2537   1682 00 00 00 00 
2537   1686 00 00 00 00 
2537   168A 00 00 00 00 
2537   168E 00 00 00 00 
2537   1692 00 00 00 00 
2537   1696 00 00 00 00 
2537   169A 00 00 00 00 
2537   169E 00 00 00 00 
2537   16A2 00 00 00 00 
2537   16A6 00 00 00 00 
2537   16AA 00 00 00 00 
2537   16AE 00 00 00 00 
2537   16B2 00 00 00 00 
2537   16B6 00 00 00 00 
2537   16BA 00 00 00 00 
2537   16BE 00 00 00 00 
2537   16C2 00 00 00 00 
2537   16C6 00 00 00 00 
2537   16CA 00 00 00 00 
2537   16CE 00 00 00 00 
2537   16D2 00 00 00 00 
2537   16D6 00 00 00 00 
2537   16DA 00 00 00 00 
2537   16DE 00 00 00 00 
2537   16E2 00 00 00 00 
2537   16E6 00 00 00 00 
2537   16EA 00 00 00 00 
2537   16EE 00 00 00 00 
2537   16F2 00 00 00 00 
2537   16F6 00 00 00 00 
2537   16FA 00 00 00 00 
2537   16FE 00 00 00 00 
2537   1702 00 00 00 00 
2537   1706 00 00 00 00 
2537   170A 00 00 00 00 
2537   170E 00 00 00 00 
2537   1712 00 00 00 00 
2537   1716 00 00 00 00 
2537   171A 00 00 00 00 
2537   171E 00 00 00 00 
2537   1722 00 00 00 00 
2537   1726 00 00 00 00 
2537   172A 00 00 00 00 
2537   172E 00 00 00 00 
2537   1732 00 00 00 00 
2537   1736 00 00 00 00 
2537   173A 00 00 00 00 
2537   173E 00 00 00 00 
2537   1742 00 00 00 00 
2537   1746 00 00 00 00 
2537   174A 00 00 00 00 
2537   174E 00 00 00 00 
2537   1752 00 00 00 00 
2537   1756 00 00 00 00 
2537   175A 00 00 00 00 
2537   175E 00 00 00 00 
2537   1762 00 00 00 00 
2537   1766 00 00 00 00 
2537   176A 00 00 00 00 
2537   176E 00 00 00 00 
2537   1772 00 00 00 00 
2537   1776 00 00 00 00 
2537   177A 00 00 00 00 
2537   177E 00 00 00 00 
2537   1782 00 00 00 00 
2537   1786 00 00 00 00 
2537   178A 00 00 00 00 
2537   178E 00 00 00 00 
2537   1792 00 00 00 00 
2537   1796 00 00 00 00 
2537   179A 00 00 00 00 
2537   179E 00 00 00 00 
2537   17A2 00 00 00 00 
2537   17A6 00 00 00 00 
2537   17AA 00 00 00 00 
2537   17AE 00 00 00 00 
2537   17B2 00 00 00 00 
2537   17B6 00 00 00 00 
2537   17BA 00 00 00 00 
2537   17BE 00 00 00 00 
2537   17C2 00 00 00 00 
2537   17C6 00 00 00 00 
2537   17CA 00 00 00 00 
2537   17CE 00 00 00 00 
2537   17D2 00 00 00 00 
2537   17D6 00 00 00 00 
2537   17DA 00 00 00 00 
2537   17DE 00 00 00 00 
2537   17E2 00 00 00 00 
2537   17E6 00 00 00 00 
2537   17EA 00 00 00 00 
2537   17EE 00 00 00 00 
2537   17F2 00 00 00 00 
2537   17F6 00 00 00 00 
2537   17FA 00 00 00 00 
2537   17FE 00 00 00 00 
2537   1802 00 00 00 00 
2537   1806 00 00 00 00 
2537   180A 00 00 00 00 
2537   180E 00 00 00 00 
2537   1812 00 00 00 00 
2537   1816 00 00 00 00 
2537   181A 00 00 00 00 
2537   181E 00 00 00 00 
2537   1822 00 00 00 00 
2537   1826 00 00 00 00 
2537   182A 00 00 00 00 
2537   182E 00 00 00 00 
2537   1832 00 00 00 00 
2537   1836 00 00 00 00 
2537   183A 00 00 00 00 
2537   183E 00 00 00 00 
2537   1842 00 00 00 00 
2537   1846 00 00 00 00 
2537   184A 00 00 00 00 
2537   184E 00 00 00 00 
2537   1852 00 00 00 00 
2537   1856 00 00 00 00 
2537   185A 00 00 00 00 
2537   185E 00 00 00 00 
2537   1862 00 00 00 00 
2537   1866 00 00 00 00 
2537   186A 00 00 00 00 
2537   186E 00 00 00 00 
2537   1872 00 00 00 00 
2537   1876 00 00 00 00 
2537   187A 00 00 00 00 
2537   187E 00 00 00 00 
2537   1882 00 00 00 00 
2537   1886 00 00 00 00 
2537   188A 00 00 00 00 
2537   188E 00 00 00 00 
2537   1892 00 00 00 00 
2537   1896 00 00 00 00 
2537   189A 00 00 00 00 
2537   189E 00 00 00 00 
2537   18A2 00 00 00 00 
2537   18A6 00 00 00 00 
2537   18AA 00 00 00 00 
2537   18AE 00 00 00 00 
2537   18B2 00 00 00 00 
2537   18B6 00 00 00 00 
2538   18BA 20 20 20 20 _currState_data: .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2538   18BE 20 20 20 20 
2538   18C2 20 20 20 20 
2538   18C6 20 20 20 
2539   18C9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2539   18CD 20 20 20 20 
2539   18D1 20 20 20 20 
2539   18D5 20 20 20 20 
2540   18D9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2540   18DD 20 20 20 20 
2540   18E1 20 20 20 20 
2540   18E5 20 20 20 20 
2541   18E9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2541   18ED 20 20 20 20 
2541   18F1 20 20 20 20 
2541   18F5 20 20 20 20 
2542   18F9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2542   18FD 20 20 20 20 
2542   1901 20 20 20 20 
2542   1905 20 20 20 20 
2543   1909 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2543   190D 20 20 20 20 
2543   1911 20 20 20 20 
2543   1915 20 20 20 20 
2544   1919 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2544   191D 20 20 20 20 
2544   1921 20 20 20 20 
2544   1925 20 20 20 20 
2545   1929 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2545   192D 20 20 20 20 
2545   1931 20 20 20 20 
2545   1935 20 20 20 20 
2546   1939 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2546   193D 20 20 20 20 
2546   1941 20 20 20 20 
2546   1945 20 20 20 20 
2547   1949 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2547   194D 40 20 20 20 
2547   1951 20 20 20 20 
2547   1955 20 20 20 20 
2548   1959 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2548   195D 20 20 20 20 
2548   1961 20 20 20 20 
2548   1965 20 20 20 20 
2549   1969 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
2549   196D 20 20 20 20 
2549   1971 20 20 40 20 
2549   1975 40 20 20 20 
2550   1979 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2550   197D 20 20 20 20 
2550   1981 20 20 20 20 
2550   1985 20 20 20 20 
2551   1989 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2551   198D 20 20 20 20 
2551   1991 40 40 20 20 
2551   1995 20 20 20 20 
2552   1999 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,
2552   199D 20 20 20 20 
2552   19A1 20 20 20 20 
2552   19A5 20 20 40 40 
2553   19A9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
2553   19AD 20 20 20 20 
2553   19B1 20 20 20 20 
2553   19B5 20 20 20 40 
2554   19B9 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2554   19BD 20 20 20 20 
2554   19C1 40 40 20 20 
2554   19C5 20 20 20 20 
2555   19C9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,
2555   19CD 20 20 40 40 
2555   19D1 20 20 20 20 
2555   19D5 40 40 20 20 
2556   19D9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
2556   19DD 20 20 40 20 
2556   19E1 20 20 20 20 
2556   19E5 40 20 20 20 
2557   19E9 40 40 20 20 .db $40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2557   19ED 20 20 20 20 
2557   19F1 20 20 20 20 
2557   19F5 20 20 20 20 
2558   19F9 20 20 20 20 .db $20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,
2558   19FD 40 40 20 20 
2558   1A01 20 20 20 20 
2558   1A05 20 20 40 20 
2559   1A09 20 20 40 20 .db $20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,
2559   1A0D 40 40 20 20 
2559   1A11 20 20 40 20 
2559   1A15 40 20 20 20 
2560   1A19 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2560   1A1D 20 20 20 20 
2560   1A21 20 20 20 20 
2560   1A25 20 20 20 20 
2561   1A29 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,
2561   1A2D 20 20 40 20 
2561   1A31 20 20 20 20 
2561   1A35 40 20 20 20 
2562   1A39 20 20 20 20 .db $20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2562   1A3D 40 20 20 20 
2562   1A41 20 20 20 20 
2562   1A45 20 20 20 20 
2563   1A49 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,
2563   1A4D 20 20 20 20 
2563   1A51 20 20 20 20 
2563   1A55 20 20 20 40 
2564   1A59 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2564   1A5D 20 20 20 20 
2564   1A61 20 20 20 20 
2564   1A65 20 20 20 20 
2565   1A69 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2565   1A6D 20 20 20 20 
2565   1A71 20 20 20 20 
2565   1A75 20 20 20 20 
2566   1A79 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,
2566   1A7D 20 20 20 20 
2566   1A81 40 40 20 20 
2566   1A85 20 20 20 20 
2567   1A89 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2567   1A8D 20 20 20 20 
2567   1A91 20 20 20 20 
2567   1A95 20 20 20 20 
2568   1A99 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2568   1A9D 20 20 20 20 
2568   1AA1 20 20 20 20 
2568   1AA5 20 20 20 20 
2569   1AA9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2569   1AAD 20 20 20 20 
2569   1AB1 20 20 20 20 
2569   1AB5 20 20 20 20 
2570   1AB9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2570   1ABD 20 20 20 20 
2570   1AC1 20 20 20 20 
2570   1AC5 20 20 20 20 
2571   1AC9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2571   1ACD 20 20 20 20 
2571   1AD1 20 20 20 20 
2571   1AD5 20 20 20 20 
2572   1AD9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2572   1ADD 20 20 20 20 
2572   1AE1 20 20 20 20 
2572   1AE5 20 20 20 20 
2573   1AE9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2573   1AED 20 20 20 20 
2573   1AF1 20 20 20 20 
2573   1AF5 20 20 20 20 
2574   1AF9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2574   1AFD 20 20 20 20 
2574   1B01 20 20 20 20 
2574   1B05 20 20 20 20 
2575   1B09 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2575   1B0D 20 20 20 20 
2575   1B11 20 20 20 20 
2575   1B15 20 20 20 20 
2576   1B19 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2576   1B1D 20 20 20 20 
2576   1B21 20 20 20 20 
2576   1B25 20 20 20 20 
2577   1B29 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2577   1B2D 20 20 20 20 
2577   1B31 20 20 20 20 
2577   1B35 20 20 20 20 
2578   1B39 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2578   1B3D 20 20 20 20 
2578   1B41 20 20 20 20 
2578   1B45 20 20 20 20 
2579   1B49 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2579   1B4D 20 20 20 20 
2579   1B51 20 20 20 20 
2579   1B55 20 20 20 20 
2580   1B59 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2580   1B5D 20 20 20 20 
2580   1B61 20 20 20 20 
2580   1B65 20 20 20 20 
2581   1B69 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2581   1B6D 20 20 20 20 
2581   1B71 20 20 20 20 
2581   1B75 20 20 20 20 
2582   1B79 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2582   1B7D 20 20 20 20 
2582   1B81 20 20 20 20 
2582   1B85 20 20 20 20 
2583   1B89 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2583   1B8D 20 20 20 20 
2583   1B91 20 20 20 20 
2583   1B95 20 20 20 20 
2584   1B99 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2584   1B9D 20 20 20 20 
2584   1BA1 20 20 20 20 
2584   1BA5 20 20 20 20 
2585   1BA9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2585   1BAD 20 20 20 20 
2585   1BB1 20 20 20 20 
2585   1BB5 20 20 20 20 
2586   1BB9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2586   1BBD 20 20 20 20 
2586   1BC1 20 20 20 20 
2586   1BC5 20 20 20 20 
2587   1BC9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2587   1BCD 20 20 20 20 
2587   1BD1 20 20 20 20 
2587   1BD5 20 20 20 20 
2588   1BD9 20          .db $20,
2589   1BDA             
2590   1BDA 00 00 00 00 .fill 400, 0
2590   1BDE 00 00 00 00 
2590   1BE2 00 00 00 00 
2590   1BE6 00 00 00 00 
2590   1BEA 00 00 00 00 
2590   1BEE 00 00 00 00 
2590   1BF2 00 00 00 00 
2590   1BF6 00 00 00 00 
2590   1BFA 00 00 00 00 
2590   1BFE 00 00 00 00 
2590   1C02 00 00 00 00 
2590   1C06 00 00 00 00 
2590   1C0A 00 00 00 00 
2590   1C0E 00 00 00 00 
2590   1C12 00 00 00 00 
2590   1C16 00 00 00 00 
2590   1C1A 00 00 00 00 
2590   1C1E 00 00 00 00 
2590   1C22 00 00 00 00 
2590   1C26 00 00 00 00 
2590   1C2A 00 00 00 00 
2590   1C2E 00 00 00 00 
2590   1C32 00 00 00 00 
2590   1C36 00 00 00 00 
2590   1C3A 00 00 00 00 
2590   1C3E 00 00 00 00 
2590   1C42 00 00 00 00 
2590   1C46 00 00 00 00 
2590   1C4A 00 00 00 00 
2590   1C4E 00 00 00 00 
2590   1C52 00 00 00 00 
2590   1C56 00 00 00 00 
2590   1C5A 00 00 00 00 
2590   1C5E 00 00 00 00 
2590   1C62 00 00 00 00 
2590   1C66 00 00 00 00 
2590   1C6A 00 00 00 00 
2590   1C6E 00 00 00 00 
2590   1C72 00 00 00 00 
2590   1C76 00 00 00 00 
2590   1C7A 00 00 00 00 
2590   1C7E 00 00 00 00 
2590   1C82 00 00 00 00 
2590   1C86 00 00 00 00 
2590   1C8A 00 00 00 00 
2590   1C8E 00 00 00 00 
2590   1C92 00 00 00 00 
2590   1C96 00 00 00 00 
2590   1C9A 00 00 00 00 
2590   1C9E 00 00 00 00 
2590   1CA2 00 00 00 00 
2590   1CA6 00 00 00 00 
2590   1CAA 00 00 00 00 
2590   1CAE 00 00 00 00 
2590   1CB2 00 00 00 00 
2590   1CB6 00 00 00 00 
2590   1CBA 00 00 00 00 
2590   1CBE 00 00 00 00 
2590   1CC2 00 00 00 00 
2590   1CC6 00 00 00 00 
2590   1CCA 00 00 00 00 
2590   1CCE 00 00 00 00 
2590   1CD2 00 00 00 00 
2590   1CD6 00 00 00 00 
2590   1CDA 00 00 00 00 
2590   1CDE 00 00 00 00 
2590   1CE2 00 00 00 00 
2590   1CE6 00 00 00 00 
2590   1CEA 00 00 00 00 
2590   1CEE 00 00 00 00 
2590   1CF2 00 00 00 00 
2590   1CF6 00 00 00 00 
2590   1CFA 00 00 00 00 
2590   1CFE 00 00 00 00 
2590   1D02 00 00 00 00 
2590   1D06 00 00 00 00 
2590   1D0A 00 00 00 00 
2590   1D0E 00 00 00 00 
2590   1D12 00 00 00 00 
2590   1D16 00 00 00 00 
2590   1D1A 00 00 00 00 
2590   1D1E 00 00 00 00 
2590   1D22 00 00 00 00 
2590   1D26 00 00 00 00 
2590   1D2A 00 00 00 00 
2590   1D2E 00 00 00 00 
2590   1D32 00 00 00 00 
2590   1D36 00 00 00 00 
2590   1D3A 00 00 00 00 
2590   1D3E 00 00 00 00 
2590   1D42 00 00 00 00 
2590   1D46 00 00 00 00 
2590   1D4A 00 00 00 00 
2590   1D4E 00 00 00 00 
2590   1D52 00 00 00 00 
2590   1D56 00 00 00 00 
2590   1D5A 00 00 00 00 
2590   1D5E 00 00 00 00 
2590   1D62 00 00 00 00 
2590   1D66 00 00 00 00 
2591   1D6A 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
2591   1D6E 65 73 73 20 
2591   1D72 43 54 52 4C 
2591   1D76 2B 43 20 74 
2591   1D7A 6F 20 71 75 
2591   1D7E 69 74 2E 0A 
2591   1D82 0D 00 
2592   1D84 40 20 00    _s1: .db "@ ", 0
2593   1D87 2E 20 00    _s2: .db ". ", 0
2594   1D8A 0A 0D 00    _s3: .db "\n\r", 0
2595   1D8D 55 6E 65 78 _s4: .db "Unexpected format in printf.", 0
2595   1D91 70 65 63 74 
2595   1D95 65 64 20 66 
2595   1D99 6F 72 6D 61 
2595   1D9D 74 20 69 6E 
2595   1DA1 20 70 72 69 
2595   1DA5 6E 74 66 2E 
2595   1DA9 00 
2596   1DAA 45 72 72 6F _s5: .db "Error: Unknown argument type.\n", 0
2596   1DAE 72 3A 20 55 
2596   1DB2 6E 6B 6E 6F 
2596   1DB6 77 6E 20 61 
2596   1DBA 72 67 75 6D 
2596   1DBE 65 6E 74 20 
2596   1DC2 74 79 70 65 
2596   1DC6 2E 0A 00 
2597   1DC9             
2598   1DC9 CB 1D       _heap_top: .dw _heap
2599   1DCB 00          _heap: .db 0
2600   1DCC             ; --- END DATA SEGMENT
2601   1DCC             
2602   1DCC             .end
tasm: Number of errors = 0
