0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <   30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 1E 00      mov b, $1e
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; <= (signed)
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 98 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j = 0; j <    40    ; j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 28 00      mov b, $28
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; <= (signed)
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 88 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; nextState[i][j] = currState[i][j]; 
0057   0445 3B F8 22      mov d, _nextState_data ; $nextState
0058   0448 D7            push a
0059   0449 DA            push d
0060   044A FA FF FF      lea d, [bp + -1] ; $i
0061   044D 2A            mov b, [d]
0062   044E E7            pop d
0063   044F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0064   0453 DA            push d
0065   0454 FA FD FF      lea d, [bp + -3] ; $j
0066   0457 2A            mov b, [d]
0067   0458 E7            pop d
0068   0459 5A            add d, b
0069   045A E4            pop a
0070   045B DA            push d
0071   045C 3B A8 27      mov d, _currState_data ; $currState
0072   045F D7            push a
0073   0460 DA            push d
0074   0461 FA FF FF      lea d, [bp + -1] ; $i
0075   0464 2A            mov b, [d]
0076   0465 E7            pop d
0077   0466 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0078   046A DA            push d
0079   046B FA FD FF      lea d, [bp + -3] ; $j
0080   046E 2A            mov b, [d]
0081   046F E7            pop d
0082   0470 5A            add d, b
0083   0471 E4            pop a
0084   0472 32            mov bl, [d]
0085   0473 A7 00         mov bh, 0
0086   0475 E7            pop d
0087   0476 FD 3E         mov [d], bl
0088   0478             _for2_update:
0089   0478 FA FD FF      lea d, [bp + -3] ; $j
0090   047B 2A            mov b, [d]
0091   047C D8            push b
0092   047D FD 77         inc b
0093   047F FA FD FF      lea d, [bp + -3] ; $j
0094   0482 FD 43         mov [d], b
0095   0484 E5            pop b
0096   0485 0A 32 04      jmp _for2_cond
0097   0488             _for2_exit:
0098   0488             _for1_update:
0099   0488 FA FF FF      lea d, [bp + -1] ; $i
0100   048B 2A            mov b, [d]
0101   048C D8            push b
0102   048D FD 77         inc b
0103   048F FA FF FF      lea d, [bp + -1] ; $i
0104   0492 FD 43         mov [d], b
0105   0494 E5            pop b
0106   0495 0A 15 04      jmp _for1_cond
0107   0498             _for1_exit:
0108   0498             ;; for(;;){ 
0109   0498             _for3_init:
0110   0498             _for3_cond:
0111   0498             _for3_block:
0112   0498             ;; puts("OK1"); 
0113   0498 26 58 2C      mov b, __s0 ; "OK1"
0114   049B FD AB         swp b
0115   049D D8            push b
0116   049E 07 50 1B      call puts
0117   04A1 51 02 00      add sp, 2
0118   04A4             ;; for(i = 1; i <   30     - 1; i++){ 
0119   04A4             _for4_init:
0120   04A4 FA FF FF      lea d, [bp + -1] ; $i
0121   04A7 DA            push d
0122   04A8 26 01 00      mov b, $1
0123   04AB E7            pop d
0124   04AC FD 43         mov [d], b
0125   04AE             _for4_cond:
0126   04AE FA FF FF      lea d, [bp + -1] ; $i
0127   04B1 2A            mov b, [d]
0128   04B2             ; START RELATIONAL
0129   04B2 D7            push a
0130   04B3 11            mov a, b
0131   04B4 26 1E 00      mov b, $1e
0132   04B7             ; START TERMS
0133   04B7 D7            push a
0134   04B8 11            mov a, b
0135   04B9 26 01 00      mov b, $1
0136   04BC 60            sub a, b
0137   04BD 27            mov b, a
0138   04BE E4            pop a
0139   04BF             ; END TERMS
0140   04BF B0            cmp a, b
0141   04C0 FD 73         slt ; <= (signed)
0142   04C2 E4            pop a
0143   04C3             ; END RELATIONAL
0144   04C3 C0 00 00      cmp b, 0
0145   04C6 C6 B6 05      je _for4_exit
0146   04C9             _for4_block:
0147   04C9             ;; puts("OK2"); 
0148   04C9 26 5C 2C      mov b, __s1 ; "OK2"
0149   04CC FD AB         swp b
0150   04CE D8            push b
0151   04CF 07 50 1B      call puts
0152   04D2 51 02 00      add sp, 2
0153   04D5             ;; for(j = 1; j <    40    - 1; j++){ 
0154   04D5             _for5_init:
0155   04D5 FA FD FF      lea d, [bp + -3] ; $j
0156   04D8 DA            push d
0157   04D9 26 01 00      mov b, $1
0158   04DC E7            pop d
0159   04DD FD 43         mov [d], b
0160   04DF             _for5_cond:
0161   04DF FA FD FF      lea d, [bp + -3] ; $j
0162   04E2 2A            mov b, [d]
0163   04E3             ; START RELATIONAL
0164   04E3 D7            push a
0165   04E4 11            mov a, b
0166   04E5 26 28 00      mov b, $28
0167   04E8             ; START TERMS
0168   04E8 D7            push a
0169   04E9 11            mov a, b
0170   04EA 26 01 00      mov b, $1
0171   04ED 60            sub a, b
0172   04EE 27            mov b, a
0173   04EF E4            pop a
0174   04F0             ; END TERMS
0175   04F0 B0            cmp a, b
0176   04F1 FD 73         slt ; <= (signed)
0177   04F3 E4            pop a
0178   04F4             ; END RELATIONAL
0179   04F4 C0 00 00      cmp b, 0
0180   04F7 C6 A6 05      je _for5_exit
0181   04FA             _for5_block:
0182   04FA             ;; puts("OK3"); 
0183   04FA 26 60 2C      mov b, __s2 ; "OK3"
0184   04FD FD AB         swp b
0185   04FF D8            push b
0186   0500 07 50 1B      call puts
0187   0503 51 02 00      add sp, 2
0188   0506             ;; n = neighbours(i, j); 
0189   0506 FA FB FF      lea d, [bp + -5] ; $n
0190   0509 DA            push d
0191   050A FA FD FF      lea d, [bp + -3] ; $j
0192   050D 2A            mov b, [d]
0193   050E FD AB         swp b
0194   0510 D8            push b
0195   0511 FA FF FF      lea d, [bp + -1] ; $i
0196   0514 2A            mov b, [d]
0197   0515 FD AB         swp b
0198   0517 D8            push b
0199   0518 07 80 20      call neighbours
0200   051B E7            pop d
0201   051C FD 43         mov [d], b
0202   051E             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0203   051E             _if6_cond:
0204   051E FA FB FF      lea d, [bp + -5] ; $n
0205   0521 2A            mov b, [d]
0206   0522             ; START RELATIONAL
0207   0522 D7            push a
0208   0523 11            mov a, b
0209   0524 26 02 00      mov b, $2
0210   0527 B0            cmp a, b
0211   0528 FD 73         slt ; <= (signed)
0212   052A E4            pop a
0213   052B             ; END RELATIONAL
0214   052B D7            push a
0215   052C 11            mov a, b
0216   052D FA FB FF      lea d, [bp + -5] ; $n
0217   0530 2A            mov b, [d]
0218   0531             ; START RELATIONAL
0219   0531 D7            push a
0220   0532 11            mov a, b
0221   0533 26 03 00      mov b, $3
0222   0536 B0            cmp a, b
0223   0537 FD 7F         sgt ; >
0224   0539 E4            pop a
0225   053A             ; END RELATIONAL
0226   053A FD A8         sor a, b ; ||
0227   053C E4            pop a
0228   053D C0 00 00      cmp b, 0
0229   0540 C6 63 05      je _if6_else
0230   0543             _if6_true:
0231   0543             ;; nextState[i][j] = ' '; 
0232   0543 3B F8 22      mov d, _nextState_data ; $nextState
0233   0546 D7            push a
0234   0547 DA            push d
0235   0548 FA FF FF      lea d, [bp + -1] ; $i
0236   054B 2A            mov b, [d]
0237   054C E7            pop d
0238   054D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0239   0551 DA            push d
0240   0552 FA FD FF      lea d, [bp + -3] ; $j
0241   0555 2A            mov b, [d]
0242   0556 E7            pop d
0243   0557 5A            add d, b
0244   0558 E4            pop a
0245   0559 DA            push d
0246   055A 26 20 00      mov b, $20
0247   055D E7            pop d
0248   055E FD 3E         mov [d], bl
0249   0560 0A 96 05      jmp _if6_exit
0250   0563             _if6_else:
0251   0563             ;; if(n == 3) nextState[i][j] = '@'; 
0252   0563             _if7_cond:
0253   0563 FA FB FF      lea d, [bp + -5] ; $n
0254   0566 2A            mov b, [d]
0255   0567             ; START RELATIONAL
0256   0567 D7            push a
0257   0568 11            mov a, b
0258   0569 26 03 00      mov b, $3
0259   056C B0            cmp a, b
0260   056D FD 71         seq ; ==
0261   056F E4            pop a
0262   0570             ; END RELATIONAL
0263   0570 C0 00 00      cmp b, 0
0264   0573 C6 96 05      je _if7_exit
0265   0576             _if7_true:
0266   0576             ;; nextState[i][j] = '@'; 
0267   0576 3B F8 22      mov d, _nextState_data ; $nextState
0268   0579 D7            push a
0269   057A DA            push d
0270   057B FA FF FF      lea d, [bp + -1] ; $i
0271   057E 2A            mov b, [d]
0272   057F E7            pop d
0273   0580 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0274   0584 DA            push d
0275   0585 FA FD FF      lea d, [bp + -3] ; $j
0276   0588 2A            mov b, [d]
0277   0589 E7            pop d
0278   058A 5A            add d, b
0279   058B E4            pop a
0280   058C DA            push d
0281   058D 26 40 00      mov b, $40
0282   0590 E7            pop d
0283   0591 FD 3E         mov [d], bl
0284   0593 0A 96 05      jmp _if7_exit
0285   0596             _if7_exit:
0286   0596             _if6_exit:
0287   0596             _for5_update:
0288   0596 FA FD FF      lea d, [bp + -3] ; $j
0289   0599 2A            mov b, [d]
0290   059A D8            push b
0291   059B FD 77         inc b
0292   059D FA FD FF      lea d, [bp + -3] ; $j
0293   05A0 FD 43         mov [d], b
0294   05A2 E5            pop b
0295   05A3 0A DF 04      jmp _for5_cond
0296   05A6             _for5_exit:
0297   05A6             _for4_update:
0298   05A6 FA FF FF      lea d, [bp + -1] ; $i
0299   05A9 2A            mov b, [d]
0300   05AA D8            push b
0301   05AB FD 77         inc b
0302   05AD FA FF FF      lea d, [bp + -1] ; $i
0303   05B0 FD 43         mov [d], b
0304   05B2 E5            pop b
0305   05B3 0A AE 04      jmp _for4_cond
0306   05B6             _for4_exit:
0307   05B6             ;; for(i = 1; i <   30     - 1; i++){ 
0308   05B6             _for8_init:
0309   05B6 FA FF FF      lea d, [bp + -1] ; $i
0310   05B9 DA            push d
0311   05BA 26 01 00      mov b, $1
0312   05BD E7            pop d
0313   05BE FD 43         mov [d], b
0314   05C0             _for8_cond:
0315   05C0 FA FF FF      lea d, [bp + -1] ; $i
0316   05C3 2A            mov b, [d]
0317   05C4             ; START RELATIONAL
0318   05C4 D7            push a
0319   05C5 11            mov a, b
0320   05C6 26 1E 00      mov b, $1e
0321   05C9             ; START TERMS
0322   05C9 D7            push a
0323   05CA 11            mov a, b
0324   05CB 26 01 00      mov b, $1
0325   05CE 60            sub a, b
0326   05CF 27            mov b, a
0327   05D0 E4            pop a
0328   05D1             ; END TERMS
0329   05D1 B0            cmp a, b
0330   05D2 FD 73         slt ; <= (signed)
0331   05D4 E4            pop a
0332   05D5             ; END RELATIONAL
0333   05D5 C0 00 00      cmp b, 0
0334   05D8 C6 6B 06      je _for8_exit
0335   05DB             _for8_block:
0336   05DB             ;; puts("OK4"); 
0337   05DB 26 64 2C      mov b, __s3 ; "OK4"
0338   05DE FD AB         swp b
0339   05E0 D8            push b
0340   05E1 07 50 1B      call puts
0341   05E4 51 02 00      add sp, 2
0342   05E7             ;; for(j = 1; j <    40    - 1; j++){ 
0343   05E7             _for9_init:
0344   05E7 FA FD FF      lea d, [bp + -3] ; $j
0345   05EA DA            push d
0346   05EB 26 01 00      mov b, $1
0347   05EE E7            pop d
0348   05EF FD 43         mov [d], b
0349   05F1             _for9_cond:
0350   05F1 FA FD FF      lea d, [bp + -3] ; $j
0351   05F4 2A            mov b, [d]
0352   05F5             ; START RELATIONAL
0353   05F5 D7            push a
0354   05F6 11            mov a, b
0355   05F7 26 28 00      mov b, $28
0356   05FA             ; START TERMS
0357   05FA D7            push a
0358   05FB 11            mov a, b
0359   05FC 26 01 00      mov b, $1
0360   05FF 60            sub a, b
0361   0600 27            mov b, a
0362   0601 E4            pop a
0363   0602             ; END TERMS
0364   0602 B0            cmp a, b
0365   0603 FD 73         slt ; <= (signed)
0366   0605 E4            pop a
0367   0606             ; END RELATIONAL
0368   0606 C0 00 00      cmp b, 0
0369   0609 C6 5B 06      je _for9_exit
0370   060C             _for9_block:
0371   060C             ;; puts("OK5"); 
0372   060C 26 68 2C      mov b, __s4 ; "OK5"
0373   060F FD AB         swp b
0374   0611 D8            push b
0375   0612 07 50 1B      call puts
0376   0615 51 02 00      add sp, 2
0377   0618             ;; currState[i][j] = nextState[i][j]; 
0378   0618 3B A8 27      mov d, _currState_data ; $currState
0379   061B D7            push a
0380   061C DA            push d
0381   061D FA FF FF      lea d, [bp + -1] ; $i
0382   0620 2A            mov b, [d]
0383   0621 E7            pop d
0384   0622 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0385   0626 DA            push d
0386   0627 FA FD FF      lea d, [bp + -3] ; $j
0387   062A 2A            mov b, [d]
0388   062B E7            pop d
0389   062C 5A            add d, b
0390   062D E4            pop a
0391   062E DA            push d
0392   062F 3B F8 22      mov d, _nextState_data ; $nextState
0393   0632 D7            push a
0394   0633 DA            push d
0395   0634 FA FF FF      lea d, [bp + -1] ; $i
0396   0637 2A            mov b, [d]
0397   0638 E7            pop d
0398   0639 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0399   063D DA            push d
0400   063E FA FD FF      lea d, [bp + -3] ; $j
0401   0641 2A            mov b, [d]
0402   0642 E7            pop d
0403   0643 5A            add d, b
0404   0644 E4            pop a
0405   0645 32            mov bl, [d]
0406   0646 A7 00         mov bh, 0
0407   0648 E7            pop d
0408   0649 FD 3E         mov [d], bl
0409   064B             _for9_update:
0410   064B FA FD FF      lea d, [bp + -3] ; $j
0411   064E 2A            mov b, [d]
0412   064F D8            push b
0413   0650 FD 77         inc b
0414   0652 FA FD FF      lea d, [bp + -3] ; $j
0415   0655 FD 43         mov [d], b
0416   0657 E5            pop b
0417   0658 0A F1 05      jmp _for9_cond
0418   065B             _for9_exit:
0419   065B             _for8_update:
0420   065B FA FF FF      lea d, [bp + -1] ; $i
0421   065E 2A            mov b, [d]
0422   065F D8            push b
0423   0660 FD 77         inc b
0424   0662 FA FF FF      lea d, [bp + -1] ; $i
0425   0665 FD 43         mov [d], b
0426   0667 E5            pop b
0427   0668 0A C0 05      jmp _for8_cond
0428   066B             _for8_exit:
0429   066B             ;; printf(clear); 
0430   066B 3B ED 22      mov d, _clear_data ; $clear
0431   066E 2D            mov b, d
0432   066F FD AB         swp b
0433   0671 D8            push b
0434   0672 07 2B 13      call printf
0435   0675             ;; show(); 
0436   0675 07 9D 1F      call show
0437   0678             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0438   0678 26 6C 2C      mov b, __s5 ; "\n\rPress CTRL+C to quit.\n\r"
0439   067B FD AB         swp b
0440   067D D8            push b
0441   067E 07 50 1B      call puts
0442   0681 51 02 00      add sp, 2
0443   0684             _for3_update:
0444   0684 0A 98 04      jmp _for3_cond
0445   0687             _for3_exit:
0446   0687 05 0B         syscall sys_terminate_proc
0447   0689             
0448   0689             strcpy:
0449   0689 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0450   068C             ; $psrc 
0451   068C             ; $pdest 
0452   068C 52 04 00      sub sp, 4
0453   068F             ;; psrc = src; 
0454   068F FA FF FF      lea d, [bp + -1] ; $psrc
0455   0692 DA            push d
0456   0693 FA 07 00      lea d, [bp + 7] ; $src
0457   0696 2A            mov b, [d]
0458   0697 E7            pop d
0459   0698 FD 43         mov [d], b
0460   069A             ;; pdest = dest; 
0461   069A FA FD FF      lea d, [bp + -3] ; $pdest
0462   069D DA            push d
0463   069E FA 05 00      lea d, [bp + 5] ; $dest
0464   06A1 2A            mov b, [d]
0465   06A2 E7            pop d
0466   06A3 FD 43         mov [d], b
0467   06A5             ;; while(*psrc) *pdest++ = *psrc++; 
0468   06A5             _while10_cond:
0469   06A5 FA FF FF      lea d, [bp + -1] ; $psrc
0470   06A8 2A            mov b, [d]
0471   06A9 74            mov d, b
0472   06AA 32            mov bl, [d]
0473   06AB A7 00         mov bh, 0
0474   06AD C0 00 00      cmp b, 0
0475   06B0 C6 D8 06      je _while10_exit
0476   06B3             _while10_block:
0477   06B3             ;; *pdest++ = *psrc++; 
0478   06B3 FA FD FF      lea d, [bp + -3] ; $pdest
0479   06B6 2A            mov b, [d]
0480   06B7 D8            push b
0481   06B8 FD 77         inc b
0482   06BA FA FD FF      lea d, [bp + -3] ; $pdest
0483   06BD FD 43         mov [d], b
0484   06BF E5            pop b
0485   06C0 D8            push b
0486   06C1 FA FF FF      lea d, [bp + -1] ; $psrc
0487   06C4 2A            mov b, [d]
0488   06C5 D8            push b
0489   06C6 FD 77         inc b
0490   06C8 FA FF FF      lea d, [bp + -1] ; $psrc
0491   06CB FD 43         mov [d], b
0492   06CD E5            pop b
0493   06CE 74            mov d, b
0494   06CF 32            mov bl, [d]
0495   06D0 A7 00         mov bh, 0
0496   06D2 E7            pop d
0497   06D3 FD 3E         mov [d], bl
0498   06D5 0A A5 06      jmp _while10_cond
0499   06D8             _while10_exit:
0500   06D8             ;; *pdest = '\0'; 
0501   06D8 FA FD FF      lea d, [bp + -3] ; $pdest
0502   06DB 2A            mov b, [d]
0503   06DC D8            push b
0504   06DD 26 00 00      mov b, $0
0505   06E0 E7            pop d
0506   06E1 FD 3E         mov [d], bl
0507   06E3 F9            leave
0508   06E4 09            ret
0509   06E5             
0510   06E5             strcmp:
0511   06E5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0512   06E8             ;; while (*s1 && (*s1 == *s2)) { 
0513   06E8             _while11_cond:
0514   06E8 FA 05 00      lea d, [bp + 5] ; $s1
0515   06EB 2A            mov b, [d]
0516   06EC 74            mov d, b
0517   06ED 32            mov bl, [d]
0518   06EE A7 00         mov bh, 0
0519   06F0 D7            push a
0520   06F1 11            mov a, b
0521   06F2 FA 05 00      lea d, [bp + 5] ; $s1
0522   06F5 2A            mov b, [d]
0523   06F6 74            mov d, b
0524   06F7 32            mov bl, [d]
0525   06F8 A7 00         mov bh, 0
0526   06FA             ; START RELATIONAL
0527   06FA D7            push a
0528   06FB 11            mov a, b
0529   06FC FA 07 00      lea d, [bp + 7] ; $s2
0530   06FF 2A            mov b, [d]
0531   0700 74            mov d, b
0532   0701 32            mov bl, [d]
0533   0702 A7 00         mov bh, 0
0534   0704 B0            cmp a, b
0535   0705 FD 71         seq ; ==
0536   0707 E4            pop a
0537   0708             ; END RELATIONAL
0538   0708 FD A7         sand a, b ; &&
0539   070A E4            pop a
0540   070B C0 00 00      cmp b, 0
0541   070E C6 2E 07      je _while11_exit
0542   0711             _while11_block:
0543   0711             ;; s1++; 
0544   0711 FA 05 00      lea d, [bp + 5] ; $s1
0545   0714 2A            mov b, [d]
0546   0715 D8            push b
0547   0716 FD 77         inc b
0548   0718 FA 05 00      lea d, [bp + 5] ; $s1
0549   071B FD 43         mov [d], b
0550   071D E5            pop b
0551   071E             ;; s2++; 
0552   071E FA 07 00      lea d, [bp + 7] ; $s2
0553   0721 2A            mov b, [d]
0554   0722 D8            push b
0555   0723 FD 77         inc b
0556   0725 FA 07 00      lea d, [bp + 7] ; $s2
0557   0728 FD 43         mov [d], b
0558   072A E5            pop b
0559   072B 0A E8 06      jmp _while11_cond
0560   072E             _while11_exit:
0561   072E             ;; return *s1 - *s2; 
0562   072E FA 05 00      lea d, [bp + 5] ; $s1
0563   0731 2A            mov b, [d]
0564   0732 74            mov d, b
0565   0733 32            mov bl, [d]
0566   0734 A7 00         mov bh, 0
0567   0736             ; START TERMS
0568   0736 D7            push a
0569   0737 11            mov a, b
0570   0738 FA 07 00      lea d, [bp + 7] ; $s2
0571   073B 2A            mov b, [d]
0572   073C 74            mov d, b
0573   073D 32            mov bl, [d]
0574   073E A7 00         mov bh, 0
0575   0740 60            sub a, b
0576   0741 27            mov b, a
0577   0742 E4            pop a
0578   0743             ; END TERMS
0579   0743 F9            leave
0580   0744 09            ret
0581   0745             
0582   0745             strcat:
0583   0745 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0584   0748             ; $dest_len 
0585   0748             ; $i 
0586   0748 52 04 00      sub sp, 4
0587   074B             ;; dest_len = strlen(dest); 
0588   074B FA FF FF      lea d, [bp + -1] ; $dest_len
0589   074E DA            push d
0590   074F FA 05 00      lea d, [bp + 5] ; $dest
0591   0752 2A            mov b, [d]
0592   0753 FD AB         swp b
0593   0755 D8            push b
0594   0756 07 F8 07      call strlen
0595   0759 51 02 00      add sp, 2
0596   075C E7            pop d
0597   075D FD 43         mov [d], b
0598   075F             ;; for (i = 0; src[i] != 0; i=i+1) { 
0599   075F             _for12_init:
0600   075F FA FD FF      lea d, [bp + -3] ; $i
0601   0762 DA            push d
0602   0763 26 00 00      mov b, $0
0603   0766 E7            pop d
0604   0767 FD 43         mov [d], b
0605   0769             _for12_cond:
0606   0769 FA 07 00      lea d, [bp + 7] ; $src
0607   076C FD 2A         mov d, [d]
0608   076E D7            push a
0609   076F DA            push d
0610   0770 FA FD FF      lea d, [bp + -3] ; $i
0611   0773 2A            mov b, [d]
0612   0774 E7            pop d
0613   0775 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0614   0779 E4            pop a
0615   077A 32            mov bl, [d]
0616   077B A7 00         mov bh, 0
0617   077D             ; START RELATIONAL
0618   077D D7            push a
0619   077E 11            mov a, b
0620   077F 26 00 00      mov b, $0
0621   0782 B0            cmp a, b
0622   0783 FD 72         sneq ; !=
0623   0785 E4            pop a
0624   0786             ; END RELATIONAL
0625   0786 C0 00 00      cmp b, 0
0626   0789 C6 D2 07      je _for12_exit
0627   078C             _for12_block:
0628   078C             ;; dest[dest_len + i] = src[i]; 
0629   078C FA 05 00      lea d, [bp + 5] ; $dest
0630   078F FD 2A         mov d, [d]
0631   0791 D7            push a
0632   0792 DA            push d
0633   0793 FA FF FF      lea d, [bp + -1] ; $dest_len
0634   0796 2A            mov b, [d]
0635   0797             ; START TERMS
0636   0797 D7            push a
0637   0798 11            mov a, b
0638   0799 FA FD FF      lea d, [bp + -3] ; $i
0639   079C 2A            mov b, [d]
0640   079D 56            add b, a
0641   079E E4            pop a
0642   079F             ; END TERMS
0643   079F E7            pop d
0644   07A0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0645   07A4 E4            pop a
0646   07A5 DA            push d
0647   07A6 FA 07 00      lea d, [bp + 7] ; $src
0648   07A9 FD 2A         mov d, [d]
0649   07AB D7            push a
0650   07AC DA            push d
0651   07AD FA FD FF      lea d, [bp + -3] ; $i
0652   07B0 2A            mov b, [d]
0653   07B1 E7            pop d
0654   07B2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0655   07B6 E4            pop a
0656   07B7 32            mov bl, [d]
0657   07B8 A7 00         mov bh, 0
0658   07BA E7            pop d
0659   07BB FD 3E         mov [d], bl
0660   07BD             _for12_update:
0661   07BD FA FD FF      lea d, [bp + -3] ; $i
0662   07C0 DA            push d
0663   07C1 FA FD FF      lea d, [bp + -3] ; $i
0664   07C4 2A            mov b, [d]
0665   07C5             ; START TERMS
0666   07C5 D7            push a
0667   07C6 11            mov a, b
0668   07C7 26 01 00      mov b, $1
0669   07CA 56            add b, a
0670   07CB E4            pop a
0671   07CC             ; END TERMS
0672   07CC E7            pop d
0673   07CD FD 43         mov [d], b
0674   07CF 0A 69 07      jmp _for12_cond
0675   07D2             _for12_exit:
0676   07D2             ;; dest[dest_len + i] = 0; 
0677   07D2 FA 05 00      lea d, [bp + 5] ; $dest
0678   07D5 FD 2A         mov d, [d]
0679   07D7 D7            push a
0680   07D8 DA            push d
0681   07D9 FA FF FF      lea d, [bp + -1] ; $dest_len
0682   07DC 2A            mov b, [d]
0683   07DD             ; START TERMS
0684   07DD D7            push a
0685   07DE 11            mov a, b
0686   07DF FA FD FF      lea d, [bp + -3] ; $i
0687   07E2 2A            mov b, [d]
0688   07E3 56            add b, a
0689   07E4 E4            pop a
0690   07E5             ; END TERMS
0691   07E5 E7            pop d
0692   07E6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0693   07EA E4            pop a
0694   07EB DA            push d
0695   07EC 26 00 00      mov b, $0
0696   07EF E7            pop d
0697   07F0 FD 3E         mov [d], bl
0698   07F2             ;; return dest; 
0699   07F2 FA 05 00      lea d, [bp + 5] ; $dest
0700   07F5 2A            mov b, [d]
0701   07F6 F9            leave
0702   07F7 09            ret
0703   07F8             
0704   07F8             strlen:
0705   07F8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0706   07FB             ; $length 
0707   07FB 52 02 00      sub sp, 2
0708   07FE             ;; length = 0; 
0709   07FE FA FF FF      lea d, [bp + -1] ; $length
0710   0801 DA            push d
0711   0802 26 00 00      mov b, $0
0712   0805 E7            pop d
0713   0806 FD 43         mov [d], b
0714   0808             ;; while (str[length] != 0) { 
0715   0808             _while13_cond:
0716   0808 FA 05 00      lea d, [bp + 5] ; $str
0717   080B FD 2A         mov d, [d]
0718   080D D7            push a
0719   080E DA            push d
0720   080F FA FF FF      lea d, [bp + -1] ; $length
0721   0812 2A            mov b, [d]
0722   0813 E7            pop d
0723   0814 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0724   0818 E4            pop a
0725   0819 32            mov bl, [d]
0726   081A A7 00         mov bh, 0
0727   081C             ; START RELATIONAL
0728   081C D7            push a
0729   081D 11            mov a, b
0730   081E 26 00 00      mov b, $0
0731   0821 B0            cmp a, b
0732   0822 FD 72         sneq ; !=
0733   0824 E4            pop a
0734   0825             ; END RELATIONAL
0735   0825 C0 00 00      cmp b, 0
0736   0828 C6 3B 08      je _while13_exit
0737   082B             _while13_block:
0738   082B             ;; length++; 
0739   082B FA FF FF      lea d, [bp + -1] ; $length
0740   082E 2A            mov b, [d]
0741   082F D8            push b
0742   0830 FD 77         inc b
0743   0832 FA FF FF      lea d, [bp + -1] ; $length
0744   0835 FD 43         mov [d], b
0745   0837 E5            pop b
0746   0838 0A 08 08      jmp _while13_cond
0747   083B             _while13_exit:
0748   083B             ;; return length; 
0749   083B FA FF FF      lea d, [bp + -1] ; $length
0750   083E 2A            mov b, [d]
0751   083F F9            leave
0752   0840 09            ret
0753   0841             
0754   0841             exit:
0755   0841 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0756   0844             
0757   0844             ; --- BEGIN INLINE ASM BLOCK
0758   0844 05 0B         syscall sys_terminate_proc
0759   0846             ; --- END INLINE ASM BLOCK
0760   0846             
0761   0846 F9            leave
0762   0847 09            ret
0763   0848             
0764   0848             atoi:
0765   0848 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0766   084B             ; $result 
0767   084B 10 00 00      mov a, $0
0768   084E 45 FF FF      mov [bp + -1], a
0769   0851             ; $sign 
0770   0851 10 01 00      mov a, $1
0771   0854 45 FD FF      mov [bp + -3], a
0772   0857 52 04 00      sub sp, 4
0773   085A             ;; while (*str == ' ') str++; 
0774   085A             _while14_cond:
0775   085A FA 05 00      lea d, [bp + 5] ; $str
0776   085D 2A            mov b, [d]
0777   085E 74            mov d, b
0778   085F 32            mov bl, [d]
0779   0860 A7 00         mov bh, 0
0780   0862             ; START RELATIONAL
0781   0862 D7            push a
0782   0863 11            mov a, b
0783   0864 26 20 00      mov b, $20
0784   0867 B0            cmp a, b
0785   0868 FD 71         seq ; ==
0786   086A E4            pop a
0787   086B             ; END RELATIONAL
0788   086B C0 00 00      cmp b, 0
0789   086E C6 81 08      je _while14_exit
0790   0871             _while14_block:
0791   0871             ;; str++; 
0792   0871 FA 05 00      lea d, [bp + 5] ; $str
0793   0874 2A            mov b, [d]
0794   0875 D8            push b
0795   0876 FD 77         inc b
0796   0878 FA 05 00      lea d, [bp + 5] ; $str
0797   087B FD 43         mov [d], b
0798   087D E5            pop b
0799   087E 0A 5A 08      jmp _while14_cond
0800   0881             _while14_exit:
0801   0881             ;; if (*str == '-' || *str == '+') { 
0802   0881             _if15_cond:
0803   0881 FA 05 00      lea d, [bp + 5] ; $str
0804   0884 2A            mov b, [d]
0805   0885 74            mov d, b
0806   0886 32            mov bl, [d]
0807   0887 A7 00         mov bh, 0
0808   0889             ; START RELATIONAL
0809   0889 D7            push a
0810   088A 11            mov a, b
0811   088B 26 2D 00      mov b, $2d
0812   088E B0            cmp a, b
0813   088F FD 71         seq ; ==
0814   0891 E4            pop a
0815   0892             ; END RELATIONAL
0816   0892 D7            push a
0817   0893 11            mov a, b
0818   0894 FA 05 00      lea d, [bp + 5] ; $str
0819   0897 2A            mov b, [d]
0820   0898 74            mov d, b
0821   0899 32            mov bl, [d]
0822   089A A7 00         mov bh, 0
0823   089C             ; START RELATIONAL
0824   089C D7            push a
0825   089D 11            mov a, b
0826   089E 26 2B 00      mov b, $2b
0827   08A1 B0            cmp a, b
0828   08A2 FD 71         seq ; ==
0829   08A4 E4            pop a
0830   08A5             ; END RELATIONAL
0831   08A5 FD A8         sor a, b ; ||
0832   08A7 E4            pop a
0833   08A8 C0 00 00      cmp b, 0
0834   08AB C6 E2 08      je _if15_exit
0835   08AE             _if15_true:
0836   08AE             ;; if (*str == '-') sign = -1; 
0837   08AE             _if16_cond:
0838   08AE FA 05 00      lea d, [bp + 5] ; $str
0839   08B1 2A            mov b, [d]
0840   08B2 74            mov d, b
0841   08B3 32            mov bl, [d]
0842   08B4 A7 00         mov bh, 0
0843   08B6             ; START RELATIONAL
0844   08B6 D7            push a
0845   08B7 11            mov a, b
0846   08B8 26 2D 00      mov b, $2d
0847   08BB B0            cmp a, b
0848   08BC FD 71         seq ; ==
0849   08BE E4            pop a
0850   08BF             ; END RELATIONAL
0851   08BF C0 00 00      cmp b, 0
0852   08C2 C6 D2 08      je _if16_exit
0853   08C5             _if16_true:
0854   08C5             ;; sign = -1; 
0855   08C5 FA FD FF      lea d, [bp + -3] ; $sign
0856   08C8 DA            push d
0857   08C9 26 FF FF      mov b, $ffff
0858   08CC E7            pop d
0859   08CD FD 43         mov [d], b
0860   08CF 0A D2 08      jmp _if16_exit
0861   08D2             _if16_exit:
0862   08D2             ;; str++; 
0863   08D2 FA 05 00      lea d, [bp + 5] ; $str
0864   08D5 2A            mov b, [d]
0865   08D6 D8            push b
0866   08D7 FD 77         inc b
0867   08D9 FA 05 00      lea d, [bp + 5] ; $str
0868   08DC FD 43         mov [d], b
0869   08DE E5            pop b
0870   08DF 0A E2 08      jmp _if15_exit
0871   08E2             _if15_exit:
0872   08E2             ;; while (*str >= '0' && *str <= '9') { 
0873   08E2             _while17_cond:
0874   08E2 FA 05 00      lea d, [bp + 5] ; $str
0875   08E5 2A            mov b, [d]
0876   08E6 74            mov d, b
0877   08E7 32            mov bl, [d]
0878   08E8 A7 00         mov bh, 0
0879   08EA             ; START RELATIONAL
0880   08EA D7            push a
0881   08EB 11            mov a, b
0882   08EC 26 30 00      mov b, $30
0883   08EF B0            cmp a, b
0884   08F0 FD 82         sgeu ; >= (unsigned)
0885   08F2 E4            pop a
0886   08F3             ; END RELATIONAL
0887   08F3 D7            push a
0888   08F4 11            mov a, b
0889   08F5 FA 05 00      lea d, [bp + 5] ; $str
0890   08F8 2A            mov b, [d]
0891   08F9 74            mov d, b
0892   08FA 32            mov bl, [d]
0893   08FB A7 00         mov bh, 0
0894   08FD             ; START RELATIONAL
0895   08FD D7            push a
0896   08FE 11            mov a, b
0897   08FF 26 39 00      mov b, $39
0898   0902 B0            cmp a, b
0899   0903 FD 76         sleu ; <= (unsigned)
0900   0905 E4            pop a
0901   0906             ; END RELATIONAL
0902   0906 FD A7         sand a, b ; &&
0903   0908 E4            pop a
0904   0909 C0 00 00      cmp b, 0
0905   090C C6 47 09      je _while17_exit
0906   090F             _while17_block:
0907   090F             ;; result = result * 10 + (*str - '0'); 
0908   090F FA FF FF      lea d, [bp + -1] ; $result
0909   0912 DA            push d
0910   0913 FA FF FF      lea d, [bp + -1] ; $result
0911   0916 2A            mov b, [d]
0912   0917             ; START FACTORS
0913   0917 D7            push a
0914   0918 11            mov a, b
0915   0919 26 0A 00      mov b, $a
0916   091C AC            mul a, b ; *
0917   091D 11            mov a, b
0918   091E 27            mov b, a
0919   091F E4            pop a
0920   0920             ; END FACTORS
0921   0920             ; START TERMS
0922   0920 D7            push a
0923   0921 11            mov a, b
0924   0922 FA 05 00      lea d, [bp + 5] ; $str
0925   0925 2A            mov b, [d]
0926   0926 74            mov d, b
0927   0927 32            mov bl, [d]
0928   0928 A7 00         mov bh, 0
0929   092A             ; START TERMS
0930   092A D7            push a
0931   092B 11            mov a, b
0932   092C 26 30 00      mov b, $30
0933   092F 60            sub a, b
0934   0930 27            mov b, a
0935   0931 E4            pop a
0936   0932             ; END TERMS
0937   0932 56            add b, a
0938   0933 E4            pop a
0939   0934             ; END TERMS
0940   0934 E7            pop d
0941   0935 FD 43         mov [d], b
0942   0937             ;; str++; 
0943   0937 FA 05 00      lea d, [bp + 5] ; $str
0944   093A 2A            mov b, [d]
0945   093B D8            push b
0946   093C FD 77         inc b
0947   093E FA 05 00      lea d, [bp + 5] ; $str
0948   0941 FD 43         mov [d], b
0949   0943 E5            pop b
0950   0944 0A E2 08      jmp _while17_cond
0951   0947             _while17_exit:
0952   0947             ;; return sign * result; 
0953   0947 FA FD FF      lea d, [bp + -3] ; $sign
0954   094A 2A            mov b, [d]
0955   094B             ; START FACTORS
0956   094B D7            push a
0957   094C 11            mov a, b
0958   094D FA FF FF      lea d, [bp + -1] ; $result
0959   0950 2A            mov b, [d]
0960   0951 AC            mul a, b ; *
0961   0952 11            mov a, b
0962   0953 27            mov b, a
0963   0954 E4            pop a
0964   0955             ; END FACTORS
0965   0955 F9            leave
0966   0956 09            ret
0967   0957             
0968   0957             rand:
0969   0957 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0970   095A             ; $sec 
0971   095A 52 02 00      sub sp, 2
0972   095D             
0973   095D             ; --- BEGIN INLINE ASM BLOCK
0974   095D 19 00         mov al, 0
0975   095F 05 01         syscall sys_rtc					
0976   0961 1A            mov al, ah
0977   0962 FA FF FF      lea d, [bp + -1] ; $sec
0978   0965 1E            mov al, [d]
0979   0966 22 00         mov ah, 0
0980   0968             ; --- END INLINE ASM BLOCK
0981   0968             
0982   0968             ;; return sec; 
0983   0968 FA FF FF      lea d, [bp + -1] ; $sec
0984   096B 2A            mov b, [d]
0985   096C F9            leave
0986   096D 09            ret
0987   096E             
0988   096E             srand:
0989   096E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0990   0971 F9            leave
0991   0972 09            ret
0992   0973             
0993   0973             malloc:
0994   0973 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0995   0976 F9            leave
0996   0977 09            ret
0997   0978             
0998   0978             calloc:
0999   0978 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1000   097B F9            leave
1001   097C 09            ret
1002   097D             
1003   097D             realloc:
1004   097D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1005   0980 F9            leave
1006   0981 09            ret
1007   0982             
1008   0982             alloc:
1009   0982 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1010   0985             ;; heap_top = heap_top + bytes; 
1011   0985 3B D0 2C      mov d, _heap_top ; $heap_top
1012   0988 DA            push d
1013   0989 3B D0 2C      mov d, _heap_top ; $heap_top
1014   098C 2A            mov b, [d]
1015   098D             ; START TERMS
1016   098D D7            push a
1017   098E 11            mov a, b
1018   098F FA 05 00      lea d, [bp + 5] ; $bytes
1019   0992 2A            mov b, [d]
1020   0993 56            add b, a
1021   0994 E4            pop a
1022   0995             ; END TERMS
1023   0995 E7            pop d
1024   0996 FD 43         mov [d], b
1025   0998             ;; return heap_top - bytes; 
1026   0998 3B D0 2C      mov d, _heap_top ; $heap_top
1027   099B 2A            mov b, [d]
1028   099C             ; START TERMS
1029   099C D7            push a
1030   099D 11            mov a, b
1031   099E FA 05 00      lea d, [bp + 5] ; $bytes
1032   09A1 2A            mov b, [d]
1033   09A2 60            sub a, b
1034   09A3 27            mov b, a
1035   09A4 E4            pop a
1036   09A5             ; END TERMS
1037   09A5 F9            leave
1038   09A6 09            ret
1039   09A7             
1040   09A7             free:
1041   09A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1042   09AA             ;; return heap_top = heap_top - bytes; 
1043   09AA 3B D0 2C      mov d, _heap_top ; $heap_top
1044   09AD DA            push d
1045   09AE 3B D0 2C      mov d, _heap_top ; $heap_top
1046   09B1 2A            mov b, [d]
1047   09B2             ; START TERMS
1048   09B2 D7            push a
1049   09B3 11            mov a, b
1050   09B4 FA 05 00      lea d, [bp + 5] ; $bytes
1051   09B7 2A            mov b, [d]
1052   09B8 60            sub a, b
1053   09B9 27            mov b, a
1054   09BA E4            pop a
1055   09BB             ; END TERMS
1056   09BB E7            pop d
1057   09BC FD 43         mov [d], b
1058   09BE F9            leave
1059   09BF 09            ret
1060   09C0             
1061   09C0             base64_encode:
1062   09C0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1063   09C3             ; $i 
1064   09C3 10 00 00      mov a, $0
1065   09C6 45 FF FF      mov [bp + -1], a
1066   09C9             ; $j 
1067   09C9 10 00 00      mov a, $0
1068   09CC 45 FD FF      mov [bp + -3], a
1069   09CF             ; $k 
1070   09CF             ; $input_len 
1071   09CF             ; $input_buffer 
1072   09CF             ; $output_buffer 
1073   09CF 52 0F 00      sub sp, 15
1074   09D2             ;; input_len = strlen(input); 
1075   09D2 FA F9 FF      lea d, [bp + -7] ; $input_len
1076   09D5 DA            push d
1077   09D6 FA 05 00      lea d, [bp + 5] ; $input
1078   09D9 2A            mov b, [d]
1079   09DA FD AB         swp b
1080   09DC D8            push b
1081   09DD 07 F8 07      call strlen
1082   09E0 51 02 00      add sp, 2
1083   09E3 E7            pop d
1084   09E4 FD 43         mov [d], b
1085   09E6             ;; while (input_len--) { 
1086   09E6             _while18_cond:
1087   09E6 FA F9 FF      lea d, [bp + -7] ; $input_len
1088   09E9 2A            mov b, [d]
1089   09EA D8            push b
1090   09EB FD 7D         dec b
1091   09ED FA F9 FF      lea d, [bp + -7] ; $input_len
1092   09F0 FD 43         mov [d], b
1093   09F2 E5            pop b
1094   09F3 C0 00 00      cmp b, 0
1095   09F6 C6 AA 0B      je _while18_exit
1096   09F9             _while18_block:
1097   09F9             ;; input_buffer[i++] = *(input++); 
1098   09F9 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1099   09FC D7            push a
1100   09FD DA            push d
1101   09FE FA FF FF      lea d, [bp + -1] ; $i
1102   0A01 2A            mov b, [d]
1103   0A02 D8            push b
1104   0A03 FD 77         inc b
1105   0A05 FA FF FF      lea d, [bp + -1] ; $i
1106   0A08 FD 43         mov [d], b
1107   0A0A E5            pop b
1108   0A0B E7            pop d
1109   0A0C 5A            add d, b
1110   0A0D E4            pop a
1111   0A0E DA            push d
1112   0A0F FA 05 00      lea d, [bp + 5] ; $input
1113   0A12 2A            mov b, [d]
1114   0A13 D8            push b
1115   0A14 FD 77         inc b
1116   0A16 FA 05 00      lea d, [bp + 5] ; $input
1117   0A19 FD 43         mov [d], b
1118   0A1B E5            pop b
1119   0A1C 74            mov d, b
1120   0A1D 32            mov bl, [d]
1121   0A1E A7 00         mov bh, 0
1122   0A20 E7            pop d
1123   0A21 FD 3E         mov [d], bl
1124   0A23             ;; if (i == 3) { 
1125   0A23             _if19_cond:
1126   0A23 FA FF FF      lea d, [bp + -1] ; $i
1127   0A26 2A            mov b, [d]
1128   0A27             ; START RELATIONAL
1129   0A27 D7            push a
1130   0A28 11            mov a, b
1131   0A29 26 03 00      mov b, $3
1132   0A2C B0            cmp a, b
1133   0A2D FD 71         seq ; ==
1134   0A2F E4            pop a
1135   0A30             ; END RELATIONAL
1136   0A30 C0 00 00      cmp b, 0
1137   0A33 C6 A7 0B      je _if19_exit
1138   0A36             _if19_true:
1139   0A36             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1140   0A36 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1141   0A39 D7            push a
1142   0A3A DA            push d
1143   0A3B 26 00 00      mov b, $0
1144   0A3E E7            pop d
1145   0A3F 5A            add d, b
1146   0A40 E4            pop a
1147   0A41 DA            push d
1148   0A42 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1149   0A45 D7            push a
1150   0A46 DA            push d
1151   0A47 26 00 00      mov b, $0
1152   0A4A E7            pop d
1153   0A4B 5A            add d, b
1154   0A4C E4            pop a
1155   0A4D 32            mov bl, [d]
1156   0A4E A7 00         mov bh, 0
1157   0A50 D7            push a
1158   0A51 11            mov a, b
1159   0A52 26 FC 00      mov b, $fc
1160   0A55 86            and a, b ; &
1161   0A56 27            mov b, a
1162   0A57 E4            pop a
1163   0A58             ; START SHIFT
1164   0A58 D7            push a
1165   0A59 11            mov a, b
1166   0A5A 26 02 00      mov b, $2
1167   0A5D FD 39         mov c, b
1168   0A5F A5            ashr a, cl
1169   0A60 27            mov b, a
1170   0A61 E4            pop a
1171   0A62             ; END SHIFT
1172   0A62 E7            pop d
1173   0A63 FD 3E         mov [d], bl
1174   0A65             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1175   0A65 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1176   0A68 D7            push a
1177   0A69 DA            push d
1178   0A6A 26 01 00      mov b, $1
1179   0A6D E7            pop d
1180   0A6E 5A            add d, b
1181   0A6F E4            pop a
1182   0A70 DA            push d
1183   0A71 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1184   0A74 D7            push a
1185   0A75 DA            push d
1186   0A76 26 00 00      mov b, $0
1187   0A79 E7            pop d
1188   0A7A 5A            add d, b
1189   0A7B E4            pop a
1190   0A7C 32            mov bl, [d]
1191   0A7D A7 00         mov bh, 0
1192   0A7F D7            push a
1193   0A80 11            mov a, b
1194   0A81 26 03 00      mov b, $3
1195   0A84 86            and a, b ; &
1196   0A85 27            mov b, a
1197   0A86 E4            pop a
1198   0A87             ; START SHIFT
1199   0A87 D7            push a
1200   0A88 11            mov a, b
1201   0A89 26 04 00      mov b, $4
1202   0A8C FD 39         mov c, b
1203   0A8E 9D            shl a, cl
1204   0A8F 27            mov b, a
1205   0A90 E4            pop a
1206   0A91             ; END SHIFT
1207   0A91             ; START TERMS
1208   0A91 D7            push a
1209   0A92 11            mov a, b
1210   0A93 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1211   0A96 D7            push a
1212   0A97 DA            push d
1213   0A98 26 01 00      mov b, $1
1214   0A9B E7            pop d
1215   0A9C 5A            add d, b
1216   0A9D E4            pop a
1217   0A9E 32            mov bl, [d]
1218   0A9F A7 00         mov bh, 0
1219   0AA1 D7            push a
1220   0AA2 11            mov a, b
1221   0AA3 26 F0 00      mov b, $f0
1222   0AA6 86            and a, b ; &
1223   0AA7 27            mov b, a
1224   0AA8 E4            pop a
1225   0AA9             ; START SHIFT
1226   0AA9 D7            push a
1227   0AAA 11            mov a, b
1228   0AAB 26 04 00      mov b, $4
1229   0AAE FD 39         mov c, b
1230   0AB0 A5            ashr a, cl
1231   0AB1 27            mov b, a
1232   0AB2 E4            pop a
1233   0AB3             ; END SHIFT
1234   0AB3 56            add b, a
1235   0AB4 E4            pop a
1236   0AB5             ; END TERMS
1237   0AB5 E7            pop d
1238   0AB6 FD 3E         mov [d], bl
1239   0AB8             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1240   0AB8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1241   0ABB D7            push a
1242   0ABC DA            push d
1243   0ABD 26 02 00      mov b, $2
1244   0AC0 E7            pop d
1245   0AC1 5A            add d, b
1246   0AC2 E4            pop a
1247   0AC3 DA            push d
1248   0AC4 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1249   0AC7 D7            push a
1250   0AC8 DA            push d
1251   0AC9 26 01 00      mov b, $1
1252   0ACC E7            pop d
1253   0ACD 5A            add d, b
1254   0ACE E4            pop a
1255   0ACF 32            mov bl, [d]
1256   0AD0 A7 00         mov bh, 0
1257   0AD2 D7            push a
1258   0AD3 11            mov a, b
1259   0AD4 26 0F 00      mov b, $f
1260   0AD7 86            and a, b ; &
1261   0AD8 27            mov b, a
1262   0AD9 E4            pop a
1263   0ADA             ; START SHIFT
1264   0ADA D7            push a
1265   0ADB 11            mov a, b
1266   0ADC 26 02 00      mov b, $2
1267   0ADF FD 39         mov c, b
1268   0AE1 9D            shl a, cl
1269   0AE2 27            mov b, a
1270   0AE3 E4            pop a
1271   0AE4             ; END SHIFT
1272   0AE4             ; START TERMS
1273   0AE4 D7            push a
1274   0AE5 11            mov a, b
1275   0AE6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1276   0AE9 D7            push a
1277   0AEA DA            push d
1278   0AEB 26 02 00      mov b, $2
1279   0AEE E7            pop d
1280   0AEF 5A            add d, b
1281   0AF0 E4            pop a
1282   0AF1 32            mov bl, [d]
1283   0AF2 A7 00         mov bh, 0
1284   0AF4 D7            push a
1285   0AF5 11            mov a, b
1286   0AF6 26 C0 00      mov b, $c0
1287   0AF9 86            and a, b ; &
1288   0AFA 27            mov b, a
1289   0AFB E4            pop a
1290   0AFC             ; START SHIFT
1291   0AFC D7            push a
1292   0AFD 11            mov a, b
1293   0AFE 26 06 00      mov b, $6
1294   0B01 FD 39         mov c, b
1295   0B03 A5            ashr a, cl
1296   0B04 27            mov b, a
1297   0B05 E4            pop a
1298   0B06             ; END SHIFT
1299   0B06 56            add b, a
1300   0B07 E4            pop a
1301   0B08             ; END TERMS
1302   0B08 E7            pop d
1303   0B09 FD 3E         mov [d], bl
1304   0B0B             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
1305   0B0B FA F2 FF      lea d, [bp + -14] ; $output_buffer
1306   0B0E D7            push a
1307   0B0F DA            push d
1308   0B10 26 03 00      mov b, $3
1309   0B13 E7            pop d
1310   0B14 5A            add d, b
1311   0B15 E4            pop a
1312   0B16 DA            push d
1313   0B17 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1314   0B1A D7            push a
1315   0B1B DA            push d
1316   0B1C 26 02 00      mov b, $2
1317   0B1F E7            pop d
1318   0B20 5A            add d, b
1319   0B21 E4            pop a
1320   0B22 32            mov bl, [d]
1321   0B23 A7 00         mov bh, 0
1322   0B25 D7            push a
1323   0B26 11            mov a, b
1324   0B27 26 3F 00      mov b, $3f
1325   0B2A 86            and a, b ; &
1326   0B2B 27            mov b, a
1327   0B2C E4            pop a
1328   0B2D E7            pop d
1329   0B2E FD 3E         mov [d], bl
1330   0B30             ;; for (i = 0; i < 4; i++) { 
1331   0B30             _for20_init:
1332   0B30 FA FF FF      lea d, [bp + -1] ; $i
1333   0B33 DA            push d
1334   0B34 26 00 00      mov b, $0
1335   0B37 E7            pop d
1336   0B38 FD 43         mov [d], b
1337   0B3A             _for20_cond:
1338   0B3A FA FF FF      lea d, [bp + -1] ; $i
1339   0B3D 2A            mov b, [d]
1340   0B3E             ; START RELATIONAL
1341   0B3E D7            push a
1342   0B3F 11            mov a, b
1343   0B40 26 04 00      mov b, $4
1344   0B43 B0            cmp a, b
1345   0B44 FD 73         slt ; <= (signed)
1346   0B46 E4            pop a
1347   0B47             ; END RELATIONAL
1348   0B47 C0 00 00      cmp b, 0
1349   0B4A C6 9A 0B      je _for20_exit
1350   0B4D             _for20_block:
1351   0B4D             ;; output[j++] = base64_table[output_buffer[i]]; 
1352   0B4D FA 07 00      lea d, [bp + 7] ; $output
1353   0B50 FD 2A         mov d, [d]
1354   0B52 D7            push a
1355   0B53 DA            push d
1356   0B54 FA FD FF      lea d, [bp + -3] ; $j
1357   0B57 2A            mov b, [d]
1358   0B58 D8            push b
1359   0B59 FD 77         inc b
1360   0B5B FA FD FF      lea d, [bp + -3] ; $j
1361   0B5E FD 43         mov [d], b
1362   0B60 E5            pop b
1363   0B61 E7            pop d
1364   0B62 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1365   0B66 E4            pop a
1366   0B67 DA            push d
1367   0B68 3B EB 22      mov d, _base64_table ; $base64_table
1368   0B6B FD 2A         mov d, [d]
1369   0B6D D7            push a
1370   0B6E DA            push d
1371   0B6F FA F2 FF      lea d, [bp + -14] ; $output_buffer
1372   0B72 D7            push a
1373   0B73 DA            push d
1374   0B74 FA FF FF      lea d, [bp + -1] ; $i
1375   0B77 2A            mov b, [d]
1376   0B78 E7            pop d
1377   0B79 5A            add d, b
1378   0B7A E4            pop a
1379   0B7B 32            mov bl, [d]
1380   0B7C A7 00         mov bh, 0
1381   0B7E E7            pop d
1382   0B7F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1383   0B83 E4            pop a
1384   0B84 32            mov bl, [d]
1385   0B85 A7 00         mov bh, 0
1386   0B87 E7            pop d
1387   0B88 FD 3E         mov [d], bl
1388   0B8A             _for20_update:
1389   0B8A FA FF FF      lea d, [bp + -1] ; $i
1390   0B8D 2A            mov b, [d]
1391   0B8E D8            push b
1392   0B8F FD 77         inc b
1393   0B91 FA FF FF      lea d, [bp + -1] ; $i
1394   0B94 FD 43         mov [d], b
1395   0B96 E5            pop b
1396   0B97 0A 3A 0B      jmp _for20_cond
1397   0B9A             _for20_exit:
1398   0B9A             ;; i = 0; 
1399   0B9A FA FF FF      lea d, [bp + -1] ; $i
1400   0B9D DA            push d
1401   0B9E 26 00 00      mov b, $0
1402   0BA1 E7            pop d
1403   0BA2 FD 43         mov [d], b
1404   0BA4 0A A7 0B      jmp _if19_exit
1405   0BA7             _if19_exit:
1406   0BA7 0A E6 09      jmp _while18_cond
1407   0BAA             _while18_exit:
1408   0BAA             ;; if (i) { 
1409   0BAA             _if21_cond:
1410   0BAA FA FF FF      lea d, [bp + -1] ; $i
1411   0BAD 2A            mov b, [d]
1412   0BAE C0 00 00      cmp b, 0
1413   0BB1 C6 7F 0D      je _if21_exit
1414   0BB4             _if21_true:
1415   0BB4             ;; for (k = i; k < 3; k++) { 
1416   0BB4             _for22_init:
1417   0BB4 FA FB FF      lea d, [bp + -5] ; $k
1418   0BB7 DA            push d
1419   0BB8 FA FF FF      lea d, [bp + -1] ; $i
1420   0BBB 2A            mov b, [d]
1421   0BBC E7            pop d
1422   0BBD FD 43         mov [d], b
1423   0BBF             _for22_cond:
1424   0BBF FA FB FF      lea d, [bp + -5] ; $k
1425   0BC2 2A            mov b, [d]
1426   0BC3             ; START RELATIONAL
1427   0BC3 D7            push a
1428   0BC4 11            mov a, b
1429   0BC5 26 03 00      mov b, $3
1430   0BC8 B0            cmp a, b
1431   0BC9 FD 73         slt ; <= (signed)
1432   0BCB E4            pop a
1433   0BCC             ; END RELATIONAL
1434   0BCC C0 00 00      cmp b, 0
1435   0BCF C6 F5 0B      je _for22_exit
1436   0BD2             _for22_block:
1437   0BD2             ;; input_buffer[k] = '\0'; 
1438   0BD2 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1439   0BD5 D7            push a
1440   0BD6 DA            push d
1441   0BD7 FA FB FF      lea d, [bp + -5] ; $k
1442   0BDA 2A            mov b, [d]
1443   0BDB E7            pop d
1444   0BDC 5A            add d, b
1445   0BDD E4            pop a
1446   0BDE DA            push d
1447   0BDF 26 00 00      mov b, $0
1448   0BE2 E7            pop d
1449   0BE3 FD 3E         mov [d], bl
1450   0BE5             _for22_update:
1451   0BE5 FA FB FF      lea d, [bp + -5] ; $k
1452   0BE8 2A            mov b, [d]
1453   0BE9 D8            push b
1454   0BEA FD 77         inc b
1455   0BEC FA FB FF      lea d, [bp + -5] ; $k
1456   0BEF FD 43         mov [d], b
1457   0BF1 E5            pop b
1458   0BF2 0A BF 0B      jmp _for22_cond
1459   0BF5             _for22_exit:
1460   0BF5             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1461   0BF5 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1462   0BF8 D7            push a
1463   0BF9 DA            push d
1464   0BFA 26 00 00      mov b, $0
1465   0BFD E7            pop d
1466   0BFE 5A            add d, b
1467   0BFF E4            pop a
1468   0C00 DA            push d
1469   0C01 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1470   0C04 D7            push a
1471   0C05 DA            push d
1472   0C06 26 00 00      mov b, $0
1473   0C09 E7            pop d
1474   0C0A 5A            add d, b
1475   0C0B E4            pop a
1476   0C0C 32            mov bl, [d]
1477   0C0D A7 00         mov bh, 0
1478   0C0F D7            push a
1479   0C10 11            mov a, b
1480   0C11 26 FC 00      mov b, $fc
1481   0C14 86            and a, b ; &
1482   0C15 27            mov b, a
1483   0C16 E4            pop a
1484   0C17             ; START SHIFT
1485   0C17 D7            push a
1486   0C18 11            mov a, b
1487   0C19 26 02 00      mov b, $2
1488   0C1C FD 39         mov c, b
1489   0C1E A5            ashr a, cl
1490   0C1F 27            mov b, a
1491   0C20 E4            pop a
1492   0C21             ; END SHIFT
1493   0C21 E7            pop d
1494   0C22 FD 3E         mov [d], bl
1495   0C24             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1496   0C24 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1497   0C27 D7            push a
1498   0C28 DA            push d
1499   0C29 26 01 00      mov b, $1
1500   0C2C E7            pop d
1501   0C2D 5A            add d, b
1502   0C2E E4            pop a
1503   0C2F DA            push d
1504   0C30 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1505   0C33 D7            push a
1506   0C34 DA            push d
1507   0C35 26 00 00      mov b, $0
1508   0C38 E7            pop d
1509   0C39 5A            add d, b
1510   0C3A E4            pop a
1511   0C3B 32            mov bl, [d]
1512   0C3C A7 00         mov bh, 0
1513   0C3E D7            push a
1514   0C3F 11            mov a, b
1515   0C40 26 03 00      mov b, $3
1516   0C43 86            and a, b ; &
1517   0C44 27            mov b, a
1518   0C45 E4            pop a
1519   0C46             ; START SHIFT
1520   0C46 D7            push a
1521   0C47 11            mov a, b
1522   0C48 26 04 00      mov b, $4
1523   0C4B FD 39         mov c, b
1524   0C4D 9D            shl a, cl
1525   0C4E 27            mov b, a
1526   0C4F E4            pop a
1527   0C50             ; END SHIFT
1528   0C50             ; START TERMS
1529   0C50 D7            push a
1530   0C51 11            mov a, b
1531   0C52 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1532   0C55 D7            push a
1533   0C56 DA            push d
1534   0C57 26 01 00      mov b, $1
1535   0C5A E7            pop d
1536   0C5B 5A            add d, b
1537   0C5C E4            pop a
1538   0C5D 32            mov bl, [d]
1539   0C5E A7 00         mov bh, 0
1540   0C60 D7            push a
1541   0C61 11            mov a, b
1542   0C62 26 F0 00      mov b, $f0
1543   0C65 86            and a, b ; &
1544   0C66 27            mov b, a
1545   0C67 E4            pop a
1546   0C68             ; START SHIFT
1547   0C68 D7            push a
1548   0C69 11            mov a, b
1549   0C6A 26 04 00      mov b, $4
1550   0C6D FD 39         mov c, b
1551   0C6F A5            ashr a, cl
1552   0C70 27            mov b, a
1553   0C71 E4            pop a
1554   0C72             ; END SHIFT
1555   0C72 56            add b, a
1556   0C73 E4            pop a
1557   0C74             ; END TERMS
1558   0C74 E7            pop d
1559   0C75 FD 3E         mov [d], bl
1560   0C77             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1561   0C77 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1562   0C7A D7            push a
1563   0C7B DA            push d
1564   0C7C 26 02 00      mov b, $2
1565   0C7F E7            pop d
1566   0C80 5A            add d, b
1567   0C81 E4            pop a
1568   0C82 DA            push d
1569   0C83 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1570   0C86 D7            push a
1571   0C87 DA            push d
1572   0C88 26 01 00      mov b, $1
1573   0C8B E7            pop d
1574   0C8C 5A            add d, b
1575   0C8D E4            pop a
1576   0C8E 32            mov bl, [d]
1577   0C8F A7 00         mov bh, 0
1578   0C91 D7            push a
1579   0C92 11            mov a, b
1580   0C93 26 0F 00      mov b, $f
1581   0C96 86            and a, b ; &
1582   0C97 27            mov b, a
1583   0C98 E4            pop a
1584   0C99             ; START SHIFT
1585   0C99 D7            push a
1586   0C9A 11            mov a, b
1587   0C9B 26 02 00      mov b, $2
1588   0C9E FD 39         mov c, b
1589   0CA0 9D            shl a, cl
1590   0CA1 27            mov b, a
1591   0CA2 E4            pop a
1592   0CA3             ; END SHIFT
1593   0CA3             ; START TERMS
1594   0CA3 D7            push a
1595   0CA4 11            mov a, b
1596   0CA5 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1597   0CA8 D7            push a
1598   0CA9 DA            push d
1599   0CAA 26 02 00      mov b, $2
1600   0CAD E7            pop d
1601   0CAE 5A            add d, b
1602   0CAF E4            pop a
1603   0CB0 32            mov bl, [d]
1604   0CB1 A7 00         mov bh, 0
1605   0CB3 D7            push a
1606   0CB4 11            mov a, b
1607   0CB5 26 C0 00      mov b, $c0
1608   0CB8 86            and a, b ; &
1609   0CB9 27            mov b, a
1610   0CBA E4            pop a
1611   0CBB             ; START SHIFT
1612   0CBB D7            push a
1613   0CBC 11            mov a, b
1614   0CBD 26 06 00      mov b, $6
1615   0CC0 FD 39         mov c, b
1616   0CC2 A5            ashr a, cl
1617   0CC3 27            mov b, a
1618   0CC4 E4            pop a
1619   0CC5             ; END SHIFT
1620   0CC5 56            add b, a
1621   0CC6 E4            pop a
1622   0CC7             ; END TERMS
1623   0CC7 E7            pop d
1624   0CC8 FD 3E         mov [d], bl
1625   0CCA             ;; for (k = 0; k < i + 1; k++) { 
1626   0CCA             _for23_init:
1627   0CCA FA FB FF      lea d, [bp + -5] ; $k
1628   0CCD DA            push d
1629   0CCE 26 00 00      mov b, $0
1630   0CD1 E7            pop d
1631   0CD2 FD 43         mov [d], b
1632   0CD4             _for23_cond:
1633   0CD4 FA FB FF      lea d, [bp + -5] ; $k
1634   0CD7 2A            mov b, [d]
1635   0CD8             ; START RELATIONAL
1636   0CD8 D7            push a
1637   0CD9 11            mov a, b
1638   0CDA FA FF FF      lea d, [bp + -1] ; $i
1639   0CDD 2A            mov b, [d]
1640   0CDE             ; START TERMS
1641   0CDE D7            push a
1642   0CDF 11            mov a, b
1643   0CE0 26 01 00      mov b, $1
1644   0CE3 56            add b, a
1645   0CE4 E4            pop a
1646   0CE5             ; END TERMS
1647   0CE5 B0            cmp a, b
1648   0CE6 FD 73         slt ; <= (signed)
1649   0CE8 E4            pop a
1650   0CE9             ; END RELATIONAL
1651   0CE9 C0 00 00      cmp b, 0
1652   0CEC C6 3C 0D      je _for23_exit
1653   0CEF             _for23_block:
1654   0CEF             ;; output[j++] = base64_table[output_buffer[k]]; 
1655   0CEF FA 07 00      lea d, [bp + 7] ; $output
1656   0CF2 FD 2A         mov d, [d]
1657   0CF4 D7            push a
1658   0CF5 DA            push d
1659   0CF6 FA FD FF      lea d, [bp + -3] ; $j
1660   0CF9 2A            mov b, [d]
1661   0CFA D8            push b
1662   0CFB FD 77         inc b
1663   0CFD FA FD FF      lea d, [bp + -3] ; $j
1664   0D00 FD 43         mov [d], b
1665   0D02 E5            pop b
1666   0D03 E7            pop d
1667   0D04 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1668   0D08 E4            pop a
1669   0D09 DA            push d
1670   0D0A 3B EB 22      mov d, _base64_table ; $base64_table
1671   0D0D FD 2A         mov d, [d]
1672   0D0F D7            push a
1673   0D10 DA            push d
1674   0D11 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1675   0D14 D7            push a
1676   0D15 DA            push d
1677   0D16 FA FB FF      lea d, [bp + -5] ; $k
1678   0D19 2A            mov b, [d]
1679   0D1A E7            pop d
1680   0D1B 5A            add d, b
1681   0D1C E4            pop a
1682   0D1D 32            mov bl, [d]
1683   0D1E A7 00         mov bh, 0
1684   0D20 E7            pop d
1685   0D21 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1686   0D25 E4            pop a
1687   0D26 32            mov bl, [d]
1688   0D27 A7 00         mov bh, 0
1689   0D29 E7            pop d
1690   0D2A FD 3E         mov [d], bl
1691   0D2C             _for23_update:
1692   0D2C FA FB FF      lea d, [bp + -5] ; $k
1693   0D2F 2A            mov b, [d]
1694   0D30 D8            push b
1695   0D31 FD 77         inc b
1696   0D33 FA FB FF      lea d, [bp + -5] ; $k
1697   0D36 FD 43         mov [d], b
1698   0D38 E5            pop b
1699   0D39 0A D4 0C      jmp _for23_cond
1700   0D3C             _for23_exit:
1701   0D3C             ;; while (i++ < 3) { 
1702   0D3C             _while24_cond:
1703   0D3C FA FF FF      lea d, [bp + -1] ; $i
1704   0D3F 2A            mov b, [d]
1705   0D40 D8            push b
1706   0D41 FD 77         inc b
1707   0D43 FA FF FF      lea d, [bp + -1] ; $i
1708   0D46 FD 43         mov [d], b
1709   0D48 E5            pop b
1710   0D49             ; START RELATIONAL
1711   0D49 D7            push a
1712   0D4A 11            mov a, b
1713   0D4B 26 03 00      mov b, $3
1714   0D4E B0            cmp a, b
1715   0D4F FD 73         slt ; <= (signed)
1716   0D51 E4            pop a
1717   0D52             ; END RELATIONAL
1718   0D52 C0 00 00      cmp b, 0
1719   0D55 C6 7C 0D      je _while24_exit
1720   0D58             _while24_block:
1721   0D58             ;; output[j++] = '='; 
1722   0D58 FA 07 00      lea d, [bp + 7] ; $output
1723   0D5B FD 2A         mov d, [d]
1724   0D5D D7            push a
1725   0D5E DA            push d
1726   0D5F FA FD FF      lea d, [bp + -3] ; $j
1727   0D62 2A            mov b, [d]
1728   0D63 D8            push b
1729   0D64 FD 77         inc b
1730   0D66 FA FD FF      lea d, [bp + -3] ; $j
1731   0D69 FD 43         mov [d], b
1732   0D6B E5            pop b
1733   0D6C E7            pop d
1734   0D6D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1735   0D71 E4            pop a
1736   0D72 DA            push d
1737   0D73 26 3D 00      mov b, $3d
1738   0D76 E7            pop d
1739   0D77 FD 3E         mov [d], bl
1740   0D79 0A 3C 0D      jmp _while24_cond
1741   0D7C             _while24_exit:
1742   0D7C 0A 7F 0D      jmp _if21_exit
1743   0D7F             _if21_exit:
1744   0D7F             ;; output[j] = '\0'; 
1745   0D7F FA 07 00      lea d, [bp + 7] ; $output
1746   0D82 FD 2A         mov d, [d]
1747   0D84 D7            push a
1748   0D85 DA            push d
1749   0D86 FA FD FF      lea d, [bp + -3] ; $j
1750   0D89 2A            mov b, [d]
1751   0D8A E7            pop d
1752   0D8B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1753   0D8F E4            pop a
1754   0D90 DA            push d
1755   0D91 26 00 00      mov b, $0
1756   0D94 E7            pop d
1757   0D95 FD 3E         mov [d], bl
1758   0D97 F9            leave
1759   0D98 09            ret
1760   0D99             
1761   0D99             base64_char_value:
1762   0D99 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1763   0D9C             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1764   0D9C             _if25_cond:
1765   0D9C FA 05 00      lea d, [bp + 5] ; $c
1766   0D9F 32            mov bl, [d]
1767   0DA0 A7 00         mov bh, 0
1768   0DA2             ; START RELATIONAL
1769   0DA2 D7            push a
1770   0DA3 11            mov a, b
1771   0DA4 26 41 00      mov b, $41
1772   0DA7 B0            cmp a, b
1773   0DA8 FD 80         sge ; >=
1774   0DAA E4            pop a
1775   0DAB             ; END RELATIONAL
1776   0DAB D7            push a
1777   0DAC 11            mov a, b
1778   0DAD FA 05 00      lea d, [bp + 5] ; $c
1779   0DB0 32            mov bl, [d]
1780   0DB1 A7 00         mov bh, 0
1781   0DB3             ; START RELATIONAL
1782   0DB3 D7            push a
1783   0DB4 11            mov a, b
1784   0DB5 26 5A 00      mov b, $5a
1785   0DB8 B0            cmp a, b
1786   0DB9 FD 74         sle ; <=
1787   0DBB E4            pop a
1788   0DBC             ; END RELATIONAL
1789   0DBC FD A7         sand a, b ; &&
1790   0DBE E4            pop a
1791   0DBF C0 00 00      cmp b, 0
1792   0DC2 C6 D8 0D      je _if25_exit
1793   0DC5             _if25_true:
1794   0DC5             ;; return c - 'A'; 
1795   0DC5 FA 05 00      lea d, [bp + 5] ; $c
1796   0DC8 32            mov bl, [d]
1797   0DC9 A7 00         mov bh, 0
1798   0DCB             ; START TERMS
1799   0DCB D7            push a
1800   0DCC 11            mov a, b
1801   0DCD 26 41 00      mov b, $41
1802   0DD0 60            sub a, b
1803   0DD1 27            mov b, a
1804   0DD2 E4            pop a
1805   0DD3             ; END TERMS
1806   0DD3 F9            leave
1807   0DD4 09            ret
1808   0DD5 0A D8 0D      jmp _if25_exit
1809   0DD8             _if25_exit:
1810   0DD8             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1811   0DD8             _if26_cond:
1812   0DD8 FA 05 00      lea d, [bp + 5] ; $c
1813   0DDB 32            mov bl, [d]
1814   0DDC A7 00         mov bh, 0
1815   0DDE             ; START RELATIONAL
1816   0DDE D7            push a
1817   0DDF 11            mov a, b
1818   0DE0 26 61 00      mov b, $61
1819   0DE3 B0            cmp a, b
1820   0DE4 FD 80         sge ; >=
1821   0DE6 E4            pop a
1822   0DE7             ; END RELATIONAL
1823   0DE7 D7            push a
1824   0DE8 11            mov a, b
1825   0DE9 FA 05 00      lea d, [bp + 5] ; $c
1826   0DEC 32            mov bl, [d]
1827   0DED A7 00         mov bh, 0
1828   0DEF             ; START RELATIONAL
1829   0DEF D7            push a
1830   0DF0 11            mov a, b
1831   0DF1 26 7A 00      mov b, $7a
1832   0DF4 B0            cmp a, b
1833   0DF5 FD 74         sle ; <=
1834   0DF7 E4            pop a
1835   0DF8             ; END RELATIONAL
1836   0DF8 FD A7         sand a, b ; &&
1837   0DFA E4            pop a
1838   0DFB C0 00 00      cmp b, 0
1839   0DFE C6 19 0E      je _if26_exit
1840   0E01             _if26_true:
1841   0E01             ;; return c - 'a' + 26; 
1842   0E01 FA 05 00      lea d, [bp + 5] ; $c
1843   0E04 32            mov bl, [d]
1844   0E05 A7 00         mov bh, 0
1845   0E07             ; START TERMS
1846   0E07 D7            push a
1847   0E08 11            mov a, b
1848   0E09 26 61 00      mov b, $61
1849   0E0C 60            sub a, b
1850   0E0D 27            mov b, a
1851   0E0E 11            mov a, b
1852   0E0F 26 1A 00      mov b, $1a
1853   0E12 56            add b, a
1854   0E13 E4            pop a
1855   0E14             ; END TERMS
1856   0E14 F9            leave
1857   0E15 09            ret
1858   0E16 0A 19 0E      jmp _if26_exit
1859   0E19             _if26_exit:
1860   0E19             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1861   0E19             _if27_cond:
1862   0E19 FA 05 00      lea d, [bp + 5] ; $c
1863   0E1C 32            mov bl, [d]
1864   0E1D A7 00         mov bh, 0
1865   0E1F             ; START RELATIONAL
1866   0E1F D7            push a
1867   0E20 11            mov a, b
1868   0E21 26 30 00      mov b, $30
1869   0E24 B0            cmp a, b
1870   0E25 FD 80         sge ; >=
1871   0E27 E4            pop a
1872   0E28             ; END RELATIONAL
1873   0E28 D7            push a
1874   0E29 11            mov a, b
1875   0E2A FA 05 00      lea d, [bp + 5] ; $c
1876   0E2D 32            mov bl, [d]
1877   0E2E A7 00         mov bh, 0
1878   0E30             ; START RELATIONAL
1879   0E30 D7            push a
1880   0E31 11            mov a, b
1881   0E32 26 39 00      mov b, $39
1882   0E35 B0            cmp a, b
1883   0E36 FD 74         sle ; <=
1884   0E38 E4            pop a
1885   0E39             ; END RELATIONAL
1886   0E39 FD A7         sand a, b ; &&
1887   0E3B E4            pop a
1888   0E3C C0 00 00      cmp b, 0
1889   0E3F C6 5A 0E      je _if27_exit
1890   0E42             _if27_true:
1891   0E42             ;; return c - '0' + 52; 
1892   0E42 FA 05 00      lea d, [bp + 5] ; $c
1893   0E45 32            mov bl, [d]
1894   0E46 A7 00         mov bh, 0
1895   0E48             ; START TERMS
1896   0E48 D7            push a
1897   0E49 11            mov a, b
1898   0E4A 26 30 00      mov b, $30
1899   0E4D 60            sub a, b
1900   0E4E 27            mov b, a
1901   0E4F 11            mov a, b
1902   0E50 26 34 00      mov b, $34
1903   0E53 56            add b, a
1904   0E54 E4            pop a
1905   0E55             ; END TERMS
1906   0E55 F9            leave
1907   0E56 09            ret
1908   0E57 0A 5A 0E      jmp _if27_exit
1909   0E5A             _if27_exit:
1910   0E5A             ;; if (c == '+') return 62; 
1911   0E5A             _if28_cond:
1912   0E5A FA 05 00      lea d, [bp + 5] ; $c
1913   0E5D 32            mov bl, [d]
1914   0E5E A7 00         mov bh, 0
1915   0E60             ; START RELATIONAL
1916   0E60 D7            push a
1917   0E61 11            mov a, b
1918   0E62 26 2B 00      mov b, $2b
1919   0E65 B0            cmp a, b
1920   0E66 FD 71         seq ; ==
1921   0E68 E4            pop a
1922   0E69             ; END RELATIONAL
1923   0E69 C0 00 00      cmp b, 0
1924   0E6C C6 77 0E      je _if28_exit
1925   0E6F             _if28_true:
1926   0E6F             ;; return 62; 
1927   0E6F 26 3E 00      mov b, $3e
1928   0E72 F9            leave
1929   0E73 09            ret
1930   0E74 0A 77 0E      jmp _if28_exit
1931   0E77             _if28_exit:
1932   0E77             ;; if (c == '/') return 63; 
1933   0E77             _if29_cond:
1934   0E77 FA 05 00      lea d, [bp + 5] ; $c
1935   0E7A 32            mov bl, [d]
1936   0E7B A7 00         mov bh, 0
1937   0E7D             ; START RELATIONAL
1938   0E7D D7            push a
1939   0E7E 11            mov a, b
1940   0E7F 26 2F 00      mov b, $2f
1941   0E82 B0            cmp a, b
1942   0E83 FD 71         seq ; ==
1943   0E85 E4            pop a
1944   0E86             ; END RELATIONAL
1945   0E86 C0 00 00      cmp b, 0
1946   0E89 C6 94 0E      je _if29_exit
1947   0E8C             _if29_true:
1948   0E8C             ;; return 63; 
1949   0E8C 26 3F 00      mov b, $3f
1950   0E8F F9            leave
1951   0E90 09            ret
1952   0E91 0A 94 0E      jmp _if29_exit
1953   0E94             _if29_exit:
1954   0E94             ;; return -1; 
1955   0E94 26 FF FF      mov b, $ffff
1956   0E97 F9            leave
1957   0E98 09            ret
1958   0E99             
1959   0E99             base64_decode:
1960   0E99 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1961   0E9C             ; $i 
1962   0E9C 10 00 00      mov a, $0
1963   0E9F 45 FF FF      mov [bp + -1], a
1964   0EA2             ; $j 
1965   0EA2 10 00 00      mov a, $0
1966   0EA5 45 FD FF      mov [bp + -3], a
1967   0EA8             ; $k 
1968   0EA8 10 00 00      mov a, $0
1969   0EAB 45 FB FF      mov [bp + -5], a
1970   0EAE             ; $input_len 
1971   0EAE             ; $input_buffer 
1972   0EAE             ; $output_buffer 
1973   0EAE 52 0F 00      sub sp, 15
1974   0EB1             ;; input_len = strlen(input); 
1975   0EB1 FA F9 FF      lea d, [bp + -7] ; $input_len
1976   0EB4 DA            push d
1977   0EB5 FA 05 00      lea d, [bp + 5] ; $input
1978   0EB8 2A            mov b, [d]
1979   0EB9 FD AB         swp b
1980   0EBB D8            push b
1981   0EBC 07 F8 07      call strlen
1982   0EBF 51 02 00      add sp, 2
1983   0EC2 E7            pop d
1984   0EC3 FD 43         mov [d], b
1985   0EC5             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1986   0EC5             _while30_cond:
1987   0EC5 FA F9 FF      lea d, [bp + -7] ; $input_len
1988   0EC8 2A            mov b, [d]
1989   0EC9 D8            push b
1990   0ECA FD 7D         dec b
1991   0ECC FA F9 FF      lea d, [bp + -7] ; $input_len
1992   0ECF FD 43         mov [d], b
1993   0ED1 E5            pop b
1994   0ED2 D7            push a
1995   0ED3 11            mov a, b
1996   0ED4 FA 05 00      lea d, [bp + 5] ; $input
1997   0ED7 FD 2A         mov d, [d]
1998   0ED9 D7            push a
1999   0EDA DA            push d
2000   0EDB FA FB FF      lea d, [bp + -5] ; $k
2001   0EDE 2A            mov b, [d]
2002   0EDF E7            pop d
2003   0EE0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2004   0EE4 E4            pop a
2005   0EE5 32            mov bl, [d]
2006   0EE6 A7 00         mov bh, 0
2007   0EE8             ; START RELATIONAL
2008   0EE8 D7            push a
2009   0EE9 11            mov a, b
2010   0EEA 26 3D 00      mov b, $3d
2011   0EED B0            cmp a, b
2012   0EEE FD 72         sneq ; !=
2013   0EF0 E4            pop a
2014   0EF1             ; END RELATIONAL
2015   0EF1 FD A7         sand a, b ; &&
2016   0EF3 11            mov a, b
2017   0EF4 FA 05 00      lea d, [bp + 5] ; $input
2018   0EF7 FD 2A         mov d, [d]
2019   0EF9 D7            push a
2020   0EFA DA            push d
2021   0EFB FA FB FF      lea d, [bp + -5] ; $k
2022   0EFE 2A            mov b, [d]
2023   0EFF E7            pop d
2024   0F00 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2025   0F04 E4            pop a
2026   0F05 32            mov bl, [d]
2027   0F06 A7 00         mov bh, 0
2028   0F08 DD            push bl
2029   0F09 07 99 0D      call base64_char_value
2030   0F0C 51 01 00      add sp, 1
2031   0F0F             ; START RELATIONAL
2032   0F0F D7            push a
2033   0F10 11            mov a, b
2034   0F11 26 FF FF      mov b, $ffff
2035   0F14 B0            cmp a, b
2036   0F15 FD 72         sneq ; !=
2037   0F17 E4            pop a
2038   0F18             ; END RELATIONAL
2039   0F18 FD A7         sand a, b ; &&
2040   0F1A E4            pop a
2041   0F1B C0 00 00      cmp b, 0
2042   0F1E C6 06 11      je _while30_exit
2043   0F21             _while30_block:
2044   0F21             ;; input_buffer[i++] = input[k++]; 
2045   0F21 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2046   0F24 D7            push a
2047   0F25 DA            push d
2048   0F26 FA FF FF      lea d, [bp + -1] ; $i
2049   0F29 2A            mov b, [d]
2050   0F2A D8            push b
2051   0F2B FD 77         inc b
2052   0F2D FA FF FF      lea d, [bp + -1] ; $i
2053   0F30 FD 43         mov [d], b
2054   0F32 E5            pop b
2055   0F33 E7            pop d
2056   0F34 5A            add d, b
2057   0F35 E4            pop a
2058   0F36 DA            push d
2059   0F37 FA 05 00      lea d, [bp + 5] ; $input
2060   0F3A FD 2A         mov d, [d]
2061   0F3C D7            push a
2062   0F3D DA            push d
2063   0F3E FA FB FF      lea d, [bp + -5] ; $k
2064   0F41 2A            mov b, [d]
2065   0F42 D8            push b
2066   0F43 FD 77         inc b
2067   0F45 FA FB FF      lea d, [bp + -5] ; $k
2068   0F48 FD 43         mov [d], b
2069   0F4A E5            pop b
2070   0F4B E7            pop d
2071   0F4C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2072   0F50 E4            pop a
2073   0F51 32            mov bl, [d]
2074   0F52 A7 00         mov bh, 0
2075   0F54 E7            pop d
2076   0F55 FD 3E         mov [d], bl
2077   0F57             ;; if (i == 4) { 
2078   0F57             _if31_cond:
2079   0F57 FA FF FF      lea d, [bp + -1] ; $i
2080   0F5A 2A            mov b, [d]
2081   0F5B             ; START RELATIONAL
2082   0F5B D7            push a
2083   0F5C 11            mov a, b
2084   0F5D 26 04 00      mov b, $4
2085   0F60 B0            cmp a, b
2086   0F61 FD 71         seq ; ==
2087   0F63 E4            pop a
2088   0F64             ; END RELATIONAL
2089   0F64 C0 00 00      cmp b, 0
2090   0F67 C6 03 11      je _if31_exit
2091   0F6A             _if31_true:
2092   0F6A             ;; for (i = 0; i < 4; i++) { 
2093   0F6A             _for32_init:
2094   0F6A FA FF FF      lea d, [bp + -1] ; $i
2095   0F6D DA            push d
2096   0F6E 26 00 00      mov b, $0
2097   0F71 E7            pop d
2098   0F72 FD 43         mov [d], b
2099   0F74             _for32_cond:
2100   0F74 FA FF FF      lea d, [bp + -1] ; $i
2101   0F77 2A            mov b, [d]
2102   0F78             ; START RELATIONAL
2103   0F78 D7            push a
2104   0F79 11            mov a, b
2105   0F7A 26 04 00      mov b, $4
2106   0F7D B0            cmp a, b
2107   0F7E FD 73         slt ; <= (signed)
2108   0F80 E4            pop a
2109   0F81             ; END RELATIONAL
2110   0F81 C0 00 00      cmp b, 0
2111   0F84 C6 BD 0F      je _for32_exit
2112   0F87             _for32_block:
2113   0F87             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
2114   0F87 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2115   0F8A D7            push a
2116   0F8B DA            push d
2117   0F8C FA FF FF      lea d, [bp + -1] ; $i
2118   0F8F 2A            mov b, [d]
2119   0F90 E7            pop d
2120   0F91 5A            add d, b
2121   0F92 E4            pop a
2122   0F93 DA            push d
2123   0F94 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2124   0F97 D7            push a
2125   0F98 DA            push d
2126   0F99 FA FF FF      lea d, [bp + -1] ; $i
2127   0F9C 2A            mov b, [d]
2128   0F9D E7            pop d
2129   0F9E 5A            add d, b
2130   0F9F E4            pop a
2131   0FA0 32            mov bl, [d]
2132   0FA1 A7 00         mov bh, 0
2133   0FA3 DD            push bl
2134   0FA4 07 99 0D      call base64_char_value
2135   0FA7 51 01 00      add sp, 1
2136   0FAA E7            pop d
2137   0FAB FD 3E         mov [d], bl
2138   0FAD             _for32_update:
2139   0FAD FA FF FF      lea d, [bp + -1] ; $i
2140   0FB0 2A            mov b, [d]
2141   0FB1 D8            push b
2142   0FB2 FD 77         inc b
2143   0FB4 FA FF FF      lea d, [bp + -1] ; $i
2144   0FB7 FD 43         mov [d], b
2145   0FB9 E5            pop b
2146   0FBA 0A 74 0F      jmp _for32_cond
2147   0FBD             _for32_exit:
2148   0FBD             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2149   0FBD FA F2 FF      lea d, [bp + -14] ; $output_buffer
2150   0FC0 D7            push a
2151   0FC1 DA            push d
2152   0FC2 26 00 00      mov b, $0
2153   0FC5 E7            pop d
2154   0FC6 5A            add d, b
2155   0FC7 E4            pop a
2156   0FC8 DA            push d
2157   0FC9 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2158   0FCC D7            push a
2159   0FCD DA            push d
2160   0FCE 26 00 00      mov b, $0
2161   0FD1 E7            pop d
2162   0FD2 5A            add d, b
2163   0FD3 E4            pop a
2164   0FD4 32            mov bl, [d]
2165   0FD5 A7 00         mov bh, 0
2166   0FD7             ; START SHIFT
2167   0FD7 D7            push a
2168   0FD8 11            mov a, b
2169   0FD9 26 02 00      mov b, $2
2170   0FDC FD 39         mov c, b
2171   0FDE 9D            shl a, cl
2172   0FDF 27            mov b, a
2173   0FE0 E4            pop a
2174   0FE1             ; END SHIFT
2175   0FE1             ; START TERMS
2176   0FE1 D7            push a
2177   0FE2 11            mov a, b
2178   0FE3 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2179   0FE6 D7            push a
2180   0FE7 DA            push d
2181   0FE8 26 01 00      mov b, $1
2182   0FEB E7            pop d
2183   0FEC 5A            add d, b
2184   0FED E4            pop a
2185   0FEE 32            mov bl, [d]
2186   0FEF A7 00         mov bh, 0
2187   0FF1 D7            push a
2188   0FF2 11            mov a, b
2189   0FF3 26 30 00      mov b, $30
2190   0FF6 86            and a, b ; &
2191   0FF7 27            mov b, a
2192   0FF8 E4            pop a
2193   0FF9             ; START SHIFT
2194   0FF9 D7            push a
2195   0FFA 11            mov a, b
2196   0FFB 26 04 00      mov b, $4
2197   0FFE FD 39         mov c, b
2198   1000 A5            ashr a, cl
2199   1001 27            mov b, a
2200   1002 E4            pop a
2201   1003             ; END SHIFT
2202   1003 56            add b, a
2203   1004 E4            pop a
2204   1005             ; END TERMS
2205   1005 E7            pop d
2206   1006 FD 3E         mov [d], bl
2207   1008             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2208   1008 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2209   100B D7            push a
2210   100C DA            push d
2211   100D 26 01 00      mov b, $1
2212   1010 E7            pop d
2213   1011 5A            add d, b
2214   1012 E4            pop a
2215   1013 DA            push d
2216   1014 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2217   1017 D7            push a
2218   1018 DA            push d
2219   1019 26 01 00      mov b, $1
2220   101C E7            pop d
2221   101D 5A            add d, b
2222   101E E4            pop a
2223   101F 32            mov bl, [d]
2224   1020 A7 00         mov bh, 0
2225   1022 D7            push a
2226   1023 11            mov a, b
2227   1024 26 0F 00      mov b, $f
2228   1027 86            and a, b ; &
2229   1028 27            mov b, a
2230   1029 E4            pop a
2231   102A             ; START SHIFT
2232   102A D7            push a
2233   102B 11            mov a, b
2234   102C 26 04 00      mov b, $4
2235   102F FD 39         mov c, b
2236   1031 9D            shl a, cl
2237   1032 27            mov b, a
2238   1033 E4            pop a
2239   1034             ; END SHIFT
2240   1034             ; START TERMS
2241   1034 D7            push a
2242   1035 11            mov a, b
2243   1036 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2244   1039 D7            push a
2245   103A DA            push d
2246   103B 26 02 00      mov b, $2
2247   103E E7            pop d
2248   103F 5A            add d, b
2249   1040 E4            pop a
2250   1041 32            mov bl, [d]
2251   1042 A7 00         mov bh, 0
2252   1044 D7            push a
2253   1045 11            mov a, b
2254   1046 26 3C 00      mov b, $3c
2255   1049 86            and a, b ; &
2256   104A 27            mov b, a
2257   104B E4            pop a
2258   104C             ; START SHIFT
2259   104C D7            push a
2260   104D 11            mov a, b
2261   104E 26 02 00      mov b, $2
2262   1051 FD 39         mov c, b
2263   1053 A5            ashr a, cl
2264   1054 27            mov b, a
2265   1055 E4            pop a
2266   1056             ; END SHIFT
2267   1056 56            add b, a
2268   1057 E4            pop a
2269   1058             ; END TERMS
2270   1058 E7            pop d
2271   1059 FD 3E         mov [d], bl
2272   105B             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
2273   105B FA F2 FF      lea d, [bp + -14] ; $output_buffer
2274   105E D7            push a
2275   105F DA            push d
2276   1060 26 02 00      mov b, $2
2277   1063 E7            pop d
2278   1064 5A            add d, b
2279   1065 E4            pop a
2280   1066 DA            push d
2281   1067 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2282   106A D7            push a
2283   106B DA            push d
2284   106C 26 02 00      mov b, $2
2285   106F E7            pop d
2286   1070 5A            add d, b
2287   1071 E4            pop a
2288   1072 32            mov bl, [d]
2289   1073 A7 00         mov bh, 0
2290   1075 D7            push a
2291   1076 11            mov a, b
2292   1077 26 03 00      mov b, $3
2293   107A 86            and a, b ; &
2294   107B 27            mov b, a
2295   107C E4            pop a
2296   107D             ; START SHIFT
2297   107D D7            push a
2298   107E 11            mov a, b
2299   107F 26 06 00      mov b, $6
2300   1082 FD 39         mov c, b
2301   1084 9D            shl a, cl
2302   1085 27            mov b, a
2303   1086 E4            pop a
2304   1087             ; END SHIFT
2305   1087             ; START TERMS
2306   1087 D7            push a
2307   1088 11            mov a, b
2308   1089 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2309   108C D7            push a
2310   108D DA            push d
2311   108E 26 03 00      mov b, $3
2312   1091 E7            pop d
2313   1092 5A            add d, b
2314   1093 E4            pop a
2315   1094 32            mov bl, [d]
2316   1095 A7 00         mov bh, 0
2317   1097 56            add b, a
2318   1098 E4            pop a
2319   1099             ; END TERMS
2320   1099 E7            pop d
2321   109A FD 3E         mov [d], bl
2322   109C             ;; for (i = 0; i < 3; i++) { 
2323   109C             _for33_init:
2324   109C FA FF FF      lea d, [bp + -1] ; $i
2325   109F DA            push d
2326   10A0 26 00 00      mov b, $0
2327   10A3 E7            pop d
2328   10A4 FD 43         mov [d], b
2329   10A6             _for33_cond:
2330   10A6 FA FF FF      lea d, [bp + -1] ; $i
2331   10A9 2A            mov b, [d]
2332   10AA             ; START RELATIONAL
2333   10AA D7            push a
2334   10AB 11            mov a, b
2335   10AC 26 03 00      mov b, $3
2336   10AF B0            cmp a, b
2337   10B0 FD 73         slt ; <= (signed)
2338   10B2 E4            pop a
2339   10B3             ; END RELATIONAL
2340   10B3 C0 00 00      cmp b, 0
2341   10B6 C6 F6 10      je _for33_exit
2342   10B9             _for33_block:
2343   10B9             ;; output[j++] = output_buffer[i]; 
2344   10B9 FA 07 00      lea d, [bp + 7] ; $output
2345   10BC FD 2A         mov d, [d]
2346   10BE D7            push a
2347   10BF DA            push d
2348   10C0 FA FD FF      lea d, [bp + -3] ; $j
2349   10C3 2A            mov b, [d]
2350   10C4 D8            push b
2351   10C5 FD 77         inc b
2352   10C7 FA FD FF      lea d, [bp + -3] ; $j
2353   10CA FD 43         mov [d], b
2354   10CC E5            pop b
2355   10CD E7            pop d
2356   10CE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2357   10D2 E4            pop a
2358   10D3 DA            push d
2359   10D4 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2360   10D7 D7            push a
2361   10D8 DA            push d
2362   10D9 FA FF FF      lea d, [bp + -1] ; $i
2363   10DC 2A            mov b, [d]
2364   10DD E7            pop d
2365   10DE 5A            add d, b
2366   10DF E4            pop a
2367   10E0 32            mov bl, [d]
2368   10E1 A7 00         mov bh, 0
2369   10E3 E7            pop d
2370   10E4 FD 3E         mov [d], bl
2371   10E6             _for33_update:
2372   10E6 FA FF FF      lea d, [bp + -1] ; $i
2373   10E9 2A            mov b, [d]
2374   10EA D8            push b
2375   10EB FD 77         inc b
2376   10ED FA FF FF      lea d, [bp + -1] ; $i
2377   10F0 FD 43         mov [d], b
2378   10F2 E5            pop b
2379   10F3 0A A6 10      jmp _for33_cond
2380   10F6             _for33_exit:
2381   10F6             ;; i = 0; 
2382   10F6 FA FF FF      lea d, [bp + -1] ; $i
2383   10F9 DA            push d
2384   10FA 26 00 00      mov b, $0
2385   10FD E7            pop d
2386   10FE FD 43         mov [d], b
2387   1100 0A 03 11      jmp _if31_exit
2388   1103             _if31_exit:
2389   1103 0A C5 0E      jmp _while30_cond
2390   1106             _while30_exit:
2391   1106             ;; if (i) { 
2392   1106             _if34_cond:
2393   1106 FA FF FF      lea d, [bp + -1] ; $i
2394   1109 2A            mov b, [d]
2395   110A C0 00 00      cmp b, 0
2396   110D C6 A8 12      je _if34_exit
2397   1110             _if34_true:
2398   1110             ;; for (k = i; k < 4; k++) { 
2399   1110             _for35_init:
2400   1110 FA FB FF      lea d, [bp + -5] ; $k
2401   1113 DA            push d
2402   1114 FA FF FF      lea d, [bp + -1] ; $i
2403   1117 2A            mov b, [d]
2404   1118 E7            pop d
2405   1119 FD 43         mov [d], b
2406   111B             _for35_cond:
2407   111B FA FB FF      lea d, [bp + -5] ; $k
2408   111E 2A            mov b, [d]
2409   111F             ; START RELATIONAL
2410   111F D7            push a
2411   1120 11            mov a, b
2412   1121 26 04 00      mov b, $4
2413   1124 B0            cmp a, b
2414   1125 FD 73         slt ; <= (signed)
2415   1127 E4            pop a
2416   1128             ; END RELATIONAL
2417   1128 C0 00 00      cmp b, 0
2418   112B C6 51 11      je _for35_exit
2419   112E             _for35_block:
2420   112E             ;; input_buffer[k] = 0; 
2421   112E FA F5 FF      lea d, [bp + -11] ; $input_buffer
2422   1131 D7            push a
2423   1132 DA            push d
2424   1133 FA FB FF      lea d, [bp + -5] ; $k
2425   1136 2A            mov b, [d]
2426   1137 E7            pop d
2427   1138 5A            add d, b
2428   1139 E4            pop a
2429   113A DA            push d
2430   113B 26 00 00      mov b, $0
2431   113E E7            pop d
2432   113F FD 3E         mov [d], bl
2433   1141             _for35_update:
2434   1141 FA FB FF      lea d, [bp + -5] ; $k
2435   1144 2A            mov b, [d]
2436   1145 D8            push b
2437   1146 FD 77         inc b
2438   1148 FA FB FF      lea d, [bp + -5] ; $k
2439   114B FD 43         mov [d], b
2440   114D E5            pop b
2441   114E 0A 1B 11      jmp _for35_cond
2442   1151             _for35_exit:
2443   1151             ;; for (k = 0; k < 4; k++) { 
2444   1151             _for36_init:
2445   1151 FA FB FF      lea d, [bp + -5] ; $k
2446   1154 DA            push d
2447   1155 26 00 00      mov b, $0
2448   1158 E7            pop d
2449   1159 FD 43         mov [d], b
2450   115B             _for36_cond:
2451   115B FA FB FF      lea d, [bp + -5] ; $k
2452   115E 2A            mov b, [d]
2453   115F             ; START RELATIONAL
2454   115F D7            push a
2455   1160 11            mov a, b
2456   1161 26 04 00      mov b, $4
2457   1164 B0            cmp a, b
2458   1165 FD 73         slt ; <= (signed)
2459   1167 E4            pop a
2460   1168             ; END RELATIONAL
2461   1168 C0 00 00      cmp b, 0
2462   116B C6 A4 11      je _for36_exit
2463   116E             _for36_block:
2464   116E             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2465   116E FA F5 FF      lea d, [bp + -11] ; $input_buffer
2466   1171 D7            push a
2467   1172 DA            push d
2468   1173 FA FB FF      lea d, [bp + -5] ; $k
2469   1176 2A            mov b, [d]
2470   1177 E7            pop d
2471   1178 5A            add d, b
2472   1179 E4            pop a
2473   117A DA            push d
2474   117B FA F5 FF      lea d, [bp + -11] ; $input_buffer
2475   117E D7            push a
2476   117F DA            push d
2477   1180 FA FB FF      lea d, [bp + -5] ; $k
2478   1183 2A            mov b, [d]
2479   1184 E7            pop d
2480   1185 5A            add d, b
2481   1186 E4            pop a
2482   1187 32            mov bl, [d]
2483   1188 A7 00         mov bh, 0
2484   118A DD            push bl
2485   118B 07 99 0D      call base64_char_value
2486   118E 51 01 00      add sp, 1
2487   1191 E7            pop d
2488   1192 FD 3E         mov [d], bl
2489   1194             _for36_update:
2490   1194 FA FB FF      lea d, [bp + -5] ; $k
2491   1197 2A            mov b, [d]
2492   1198 D8            push b
2493   1199 FD 77         inc b
2494   119B FA FB FF      lea d, [bp + -5] ; $k
2495   119E FD 43         mov [d], b
2496   11A0 E5            pop b
2497   11A1 0A 5B 11      jmp _for36_cond
2498   11A4             _for36_exit:
2499   11A4             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2500   11A4 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2501   11A7 D7            push a
2502   11A8 DA            push d
2503   11A9 26 00 00      mov b, $0
2504   11AC E7            pop d
2505   11AD 5A            add d, b
2506   11AE E4            pop a
2507   11AF DA            push d
2508   11B0 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2509   11B3 D7            push a
2510   11B4 DA            push d
2511   11B5 26 00 00      mov b, $0
2512   11B8 E7            pop d
2513   11B9 5A            add d, b
2514   11BA E4            pop a
2515   11BB 32            mov bl, [d]
2516   11BC A7 00         mov bh, 0
2517   11BE             ; START SHIFT
2518   11BE D7            push a
2519   11BF 11            mov a, b
2520   11C0 26 02 00      mov b, $2
2521   11C3 FD 39         mov c, b
2522   11C5 9D            shl a, cl
2523   11C6 27            mov b, a
2524   11C7 E4            pop a
2525   11C8             ; END SHIFT
2526   11C8             ; START TERMS
2527   11C8 D7            push a
2528   11C9 11            mov a, b
2529   11CA FA F5 FF      lea d, [bp + -11] ; $input_buffer
2530   11CD D7            push a
2531   11CE DA            push d
2532   11CF 26 01 00      mov b, $1
2533   11D2 E7            pop d
2534   11D3 5A            add d, b
2535   11D4 E4            pop a
2536   11D5 32            mov bl, [d]
2537   11D6 A7 00         mov bh, 0
2538   11D8 D7            push a
2539   11D9 11            mov a, b
2540   11DA 26 30 00      mov b, $30
2541   11DD 86            and a, b ; &
2542   11DE 27            mov b, a
2543   11DF E4            pop a
2544   11E0             ; START SHIFT
2545   11E0 D7            push a
2546   11E1 11            mov a, b
2547   11E2 26 04 00      mov b, $4
2548   11E5 FD 39         mov c, b
2549   11E7 A5            ashr a, cl
2550   11E8 27            mov b, a
2551   11E9 E4            pop a
2552   11EA             ; END SHIFT
2553   11EA 56            add b, a
2554   11EB E4            pop a
2555   11EC             ; END TERMS
2556   11EC E7            pop d
2557   11ED FD 3E         mov [d], bl
2558   11EF             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2559   11EF FA F2 FF      lea d, [bp + -14] ; $output_buffer
2560   11F2 D7            push a
2561   11F3 DA            push d
2562   11F4 26 01 00      mov b, $1
2563   11F7 E7            pop d
2564   11F8 5A            add d, b
2565   11F9 E4            pop a
2566   11FA DA            push d
2567   11FB FA F5 FF      lea d, [bp + -11] ; $input_buffer
2568   11FE D7            push a
2569   11FF DA            push d
2570   1200 26 01 00      mov b, $1
2571   1203 E7            pop d
2572   1204 5A            add d, b
2573   1205 E4            pop a
2574   1206 32            mov bl, [d]
2575   1207 A7 00         mov bh, 0
2576   1209 D7            push a
2577   120A 11            mov a, b
2578   120B 26 0F 00      mov b, $f
2579   120E 86            and a, b ; &
2580   120F 27            mov b, a
2581   1210 E4            pop a
2582   1211             ; START SHIFT
2583   1211 D7            push a
2584   1212 11            mov a, b
2585   1213 26 04 00      mov b, $4
2586   1216 FD 39         mov c, b
2587   1218 9D            shl a, cl
2588   1219 27            mov b, a
2589   121A E4            pop a
2590   121B             ; END SHIFT
2591   121B             ; START TERMS
2592   121B D7            push a
2593   121C 11            mov a, b
2594   121D FA F5 FF      lea d, [bp + -11] ; $input_buffer
2595   1220 D7            push a
2596   1221 DA            push d
2597   1222 26 02 00      mov b, $2
2598   1225 E7            pop d
2599   1226 5A            add d, b
2600   1227 E4            pop a
2601   1228 32            mov bl, [d]
2602   1229 A7 00         mov bh, 0
2603   122B D7            push a
2604   122C 11            mov a, b
2605   122D 26 3C 00      mov b, $3c
2606   1230 86            and a, b ; &
2607   1231 27            mov b, a
2608   1232 E4            pop a
2609   1233             ; START SHIFT
2610   1233 D7            push a
2611   1234 11            mov a, b
2612   1235 26 02 00      mov b, $2
2613   1238 FD 39         mov c, b
2614   123A A5            ashr a, cl
2615   123B 27            mov b, a
2616   123C E4            pop a
2617   123D             ; END SHIFT
2618   123D 56            add b, a
2619   123E E4            pop a
2620   123F             ; END TERMS
2621   123F E7            pop d
2622   1240 FD 3E         mov [d], bl
2623   1242             ;; for (k = 0; k < i - 1; k++) { 
2624   1242             _for37_init:
2625   1242 FA FB FF      lea d, [bp + -5] ; $k
2626   1245 DA            push d
2627   1246 26 00 00      mov b, $0
2628   1249 E7            pop d
2629   124A FD 43         mov [d], b
2630   124C             _for37_cond:
2631   124C FA FB FF      lea d, [bp + -5] ; $k
2632   124F 2A            mov b, [d]
2633   1250             ; START RELATIONAL
2634   1250 D7            push a
2635   1251 11            mov a, b
2636   1252 FA FF FF      lea d, [bp + -1] ; $i
2637   1255 2A            mov b, [d]
2638   1256             ; START TERMS
2639   1256 D7            push a
2640   1257 11            mov a, b
2641   1258 26 01 00      mov b, $1
2642   125B 60            sub a, b
2643   125C 27            mov b, a
2644   125D E4            pop a
2645   125E             ; END TERMS
2646   125E B0            cmp a, b
2647   125F FD 73         slt ; <= (signed)
2648   1261 E4            pop a
2649   1262             ; END RELATIONAL
2650   1262 C0 00 00      cmp b, 0
2651   1265 C6 A5 12      je _for37_exit
2652   1268             _for37_block:
2653   1268             ;; output[j++] = output_buffer[k]; 
2654   1268 FA 07 00      lea d, [bp + 7] ; $output
2655   126B FD 2A         mov d, [d]
2656   126D D7            push a
2657   126E DA            push d
2658   126F FA FD FF      lea d, [bp + -3] ; $j
2659   1272 2A            mov b, [d]
2660   1273 D8            push b
2661   1274 FD 77         inc b
2662   1276 FA FD FF      lea d, [bp + -3] ; $j
2663   1279 FD 43         mov [d], b
2664   127B E5            pop b
2665   127C E7            pop d
2666   127D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2667   1281 E4            pop a
2668   1282 DA            push d
2669   1283 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2670   1286 D7            push a
2671   1287 DA            push d
2672   1288 FA FB FF      lea d, [bp + -5] ; $k
2673   128B 2A            mov b, [d]
2674   128C E7            pop d
2675   128D 5A            add d, b
2676   128E E4            pop a
2677   128F 32            mov bl, [d]
2678   1290 A7 00         mov bh, 0
2679   1292 E7            pop d
2680   1293 FD 3E         mov [d], bl
2681   1295             _for37_update:
2682   1295 FA FB FF      lea d, [bp + -5] ; $k
2683   1298 2A            mov b, [d]
2684   1299 D8            push b
2685   129A FD 77         inc b
2686   129C FA FB FF      lea d, [bp + -5] ; $k
2687   129F FD 43         mov [d], b
2688   12A1 E5            pop b
2689   12A2 0A 4C 12      jmp _for37_cond
2690   12A5             _for37_exit:
2691   12A5 0A A8 12      jmp _if34_exit
2692   12A8             _if34_exit:
2693   12A8             ;; output[j] = '\0'; 
2694   12A8 FA 07 00      lea d, [bp + 7] ; $output
2695   12AB FD 2A         mov d, [d]
2696   12AD D7            push a
2697   12AE DA            push d
2698   12AF FA FD FF      lea d, [bp + -3] ; $j
2699   12B2 2A            mov b, [d]
2700   12B3 E7            pop d
2701   12B4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2702   12B8 E4            pop a
2703   12B9 DA            push d
2704   12BA 26 00 00      mov b, $0
2705   12BD E7            pop d
2706   12BE FD 3E         mov [d], bl
2707   12C0 F9            leave
2708   12C1 09            ret
2709   12C2             
2710   12C2             va_start:
2711   12C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2712   12C5             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2713   12C5 FA 05 00      lea d, [bp + 5] ; $argp
2714   12C8 FD 2A         mov d, [d]
2715   12CA 58 00 00      add d, 0
2716   12CD DA            push d
2717   12CE FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2718   12D1 2A            mov b, [d]
2719   12D2             ; START TERMS
2720   12D2 D7            push a
2721   12D3 11            mov a, b
2722   12D4 26 02 00      mov b, 2
2723   12D7 56            add b, a
2724   12D8 E4            pop a
2725   12D9             ; END TERMS
2726   12D9 E7            pop d
2727   12DA FD 43         mov [d], b
2728   12DC F9            leave
2729   12DD 09            ret
2730   12DE             
2731   12DE             va_arg:
2732   12DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2733   12E1             ; $p 
2734   12E1 52 02 00      sub sp, 2
2735   12E4             ;; p = argp->current_arg; 
2736   12E4 FA FF FF      lea d, [bp + -1] ; $p
2737   12E7 DA            push d
2738   12E8 FA 05 00      lea d, [bp + 5] ; $argp
2739   12EB FD 2A         mov d, [d]
2740   12ED 58 00 00      add d, 0
2741   12F0 2A            mov b, [d]
2742   12F1 E7            pop d
2743   12F2 FD 43         mov [d], b
2744   12F4             ;; argp->current_arg = argp->current_arg + size; 
2745   12F4 FA 05 00      lea d, [bp + 5] ; $argp
2746   12F7 FD 2A         mov d, [d]
2747   12F9 58 00 00      add d, 0
2748   12FC DA            push d
2749   12FD FA 05 00      lea d, [bp + 5] ; $argp
2750   1300 FD 2A         mov d, [d]
2751   1302 58 00 00      add d, 0
2752   1305 2A            mov b, [d]
2753   1306             ; START TERMS
2754   1306 D7            push a
2755   1307 11            mov a, b
2756   1308 FA 07 00      lea d, [bp + 7] ; $size
2757   130B 2A            mov b, [d]
2758   130C 56            add b, a
2759   130D E4            pop a
2760   130E             ; END TERMS
2761   130E E7            pop d
2762   130F FD 43         mov [d], b
2763   1311             ;; return p; 
2764   1311 FA FF FF      lea d, [bp + -1] ; $p
2765   1314 2A            mov b, [d]
2766   1315 F9            leave
2767   1316 09            ret
2768   1317             
2769   1317             va_end:
2770   1317 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2771   131A             ;; argp->current_arg =   0   ; 
2772   131A FA 05 00      lea d, [bp + 5] ; $argp
2773   131D FD 2A         mov d, [d]
2774   131F 58 00 00      add d, 0
2775   1322 DA            push d
2776   1323 26 00 00      mov b, $0
2777   1326 E7            pop d
2778   1327 FD 43         mov [d], b
2779   1329 F9            leave
2780   132A 09            ret
2781   132B             
2782   132B             printf:
2783   132B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2784   132E             ; $p 
2785   132E             ; $fp 
2786   132E             ; $i 
2787   132E 52 06 00      sub sp, 6
2788   1331             ;; fp = format; 
2789   1331 FA FD FF      lea d, [bp + -3] ; $fp
2790   1334 DA            push d
2791   1335 FA 05 00      lea d, [bp + 5] ; $format
2792   1338 2A            mov b, [d]
2793   1339 E7            pop d
2794   133A FD 43         mov [d], b
2795   133C             ;; p = &format + 2; 
2796   133C FA FF FF      lea d, [bp + -1] ; $p
2797   133F DA            push d
2798   1340 FA 05 00      lea d, [bp + 5] ; $format
2799   1343 2D            mov b, d
2800   1344             ; START TERMS
2801   1344 D7            push a
2802   1345 11            mov a, b
2803   1346 26 02 00      mov b, $2
2804   1349 56            add b, a
2805   134A E4            pop a
2806   134B             ; END TERMS
2807   134B E7            pop d
2808   134C FD 43         mov [d], b
2809   134E             ;; for(;;){ 
2810   134E             _for38_init:
2811   134E             _for38_cond:
2812   134E             _for38_block:
2813   134E             ;; if(!*fp) break; 
2814   134E             _if39_cond:
2815   134E FA FD FF      lea d, [bp + -3] ; $fp
2816   1351 2A            mov b, [d]
2817   1352 74            mov d, b
2818   1353 32            mov bl, [d]
2819   1354 A7 00         mov bh, 0
2820   1356 C0 00 00      cmp b, 0
2821   1359 FD 71         seq ; !
2822   135B C0 00 00      cmp b, 0
2823   135E C6 67 13      je _if39_else
2824   1361             _if39_true:
2825   1361             ;; break; 
2826   1361 0A 6D 15      jmp _for38_exit ; for break
2827   1364 0A 6A 15      jmp _if39_exit
2828   1367             _if39_else:
2829   1367             ;; if(*fp == '%'){ 
2830   1367             _if40_cond:
2831   1367 FA FD FF      lea d, [bp + -3] ; $fp
2832   136A 2A            mov b, [d]
2833   136B 74            mov d, b
2834   136C 32            mov bl, [d]
2835   136D A7 00         mov bh, 0
2836   136F             ; START RELATIONAL
2837   136F D7            push a
2838   1370 11            mov a, b
2839   1371 26 25 00      mov b, $25
2840   1374 B0            cmp a, b
2841   1375 FD 71         seq ; ==
2842   1377 E4            pop a
2843   1378             ; END RELATIONAL
2844   1378 C0 00 00      cmp b, 0
2845   137B C6 4E 15      je _if40_else
2846   137E             _if40_true:
2847   137E             ;; fp++; 
2848   137E FA FD FF      lea d, [bp + -3] ; $fp
2849   1381 2A            mov b, [d]
2850   1382 D8            push b
2851   1383 FD 77         inc b
2852   1385 FA FD FF      lea d, [bp + -3] ; $fp
2853   1388 FD 43         mov [d], b
2854   138A E5            pop b
2855   138B             ;; switch(*fp){ 
2856   138B             _switch41_expr:
2857   138B FA FD FF      lea d, [bp + -3] ; $fp
2858   138E 2A            mov b, [d]
2859   138F 74            mov d, b
2860   1390 32            mov bl, [d]
2861   1391 A7 00         mov bh, 0
2862   1393             _switch41_comparisons:
2863   1393 C1 6C         cmp bl, $6c
2864   1395 C6 C1 13      je _switch41_case0
2865   1398 C1 4C         cmp bl, $4c
2866   139A C6 C1 13      je _switch41_case1
2867   139D C1 64         cmp bl, $64
2868   139F C6 8E 14      je _switch41_case2
2869   13A2 C1 69         cmp bl, $69
2870   13A4 C6 8E 14      je _switch41_case3
2871   13A7 C1 75         cmp bl, $75
2872   13A9 C6 B2 14      je _switch41_case4
2873   13AC C1 78         cmp bl, $78
2874   13AE C6 D6 14      je _switch41_case5
2875   13B1 C1 63         cmp bl, $63
2876   13B3 C6 F4 14      je _switch41_case6
2877   13B6 C1 73         cmp bl, $73
2878   13B8 C6 13 15      je _switch41_case7
2879   13BB 0A 32 15      jmp _switch41_default
2880   13BE 0A 3E 15      jmp _switch41_exit
2881   13C1             _switch41_case0:
2882   13C1             _switch41_case1:
2883   13C1             ;; fp++; 
2884   13C1 FA FD FF      lea d, [bp + -3] ; $fp
2885   13C4 2A            mov b, [d]
2886   13C5 D8            push b
2887   13C6 FD 77         inc b
2888   13C8 FA FD FF      lea d, [bp + -3] ; $fp
2889   13CB FD 43         mov [d], b
2890   13CD E5            pop b
2891   13CE             ;; if(*fp == 'd' || *fp == 'i') 
2892   13CE             _if42_cond:
2893   13CE FA FD FF      lea d, [bp + -3] ; $fp
2894   13D1 2A            mov b, [d]
2895   13D2 74            mov d, b
2896   13D3 32            mov bl, [d]
2897   13D4 A7 00         mov bh, 0
2898   13D6             ; START RELATIONAL
2899   13D6 D7            push a
2900   13D7 11            mov a, b
2901   13D8 26 64 00      mov b, $64
2902   13DB B0            cmp a, b
2903   13DC FD 71         seq ; ==
2904   13DE E4            pop a
2905   13DF             ; END RELATIONAL
2906   13DF D7            push a
2907   13E0 11            mov a, b
2908   13E1 FA FD FF      lea d, [bp + -3] ; $fp
2909   13E4 2A            mov b, [d]
2910   13E5 74            mov d, b
2911   13E6 32            mov bl, [d]
2912   13E7 A7 00         mov bh, 0
2913   13E9             ; START RELATIONAL
2914   13E9 D7            push a
2915   13EA 11            mov a, b
2916   13EB 26 69 00      mov b, $69
2917   13EE B0            cmp a, b
2918   13EF FD 71         seq ; ==
2919   13F1 E4            pop a
2920   13F2             ; END RELATIONAL
2921   13F2 FD A8         sor a, b ; ||
2922   13F4 E4            pop a
2923   13F5 C0 00 00      cmp b, 0
2924   13F8 C6 0F 14      je _if42_else
2925   13FB             _if42_true:
2926   13FB             ;; print_signed_long(*(long *)p); 
2927   13FB FD 79         mov g, b
2928   13FD 28            mov b, c
2929   13FE FD AB         swp b
2930   1400 D8            push b
2931   1401 FD 27         mov b, g
2932   1403 FD AB         swp b
2933   1405 D8            push b
2934   1406 07 FB 17      call print_signed_long
2935   1409 51 04 00      add sp, 4
2936   140C 0A 79 14      jmp _if42_exit
2937   140F             _if42_else:
2938   140F             ;; if(*fp == 'u') 
2939   140F             _if43_cond:
2940   140F FA FD FF      lea d, [bp + -3] ; $fp
2941   1412 2A            mov b, [d]
2942   1413 74            mov d, b
2943   1414 32            mov bl, [d]
2944   1415 A7 00         mov bh, 0
2945   1417             ; START RELATIONAL
2946   1417 D7            push a
2947   1418 11            mov a, b
2948   1419 26 75 00      mov b, $75
2949   141C B0            cmp a, b
2950   141D FD 71         seq ; ==
2951   141F E4            pop a
2952   1420             ; END RELATIONAL
2953   1420 C0 00 00      cmp b, 0
2954   1423 C6 3A 14      je _if43_else
2955   1426             _if43_true:
2956   1426             ;; print_unsigned_long(*(unsigned long *)p); 
2957   1426 FD 79         mov g, b
2958   1428 28            mov b, c
2959   1429 FD AB         swp b
2960   142B D8            push b
2961   142C FD 27         mov b, g
2962   142E FD AB         swp b
2963   1430 D8            push b
2964   1431 07 4D 19      call print_unsigned_long
2965   1434 51 04 00      add sp, 4
2966   1437 0A 79 14      jmp _if43_exit
2967   143A             _if43_else:
2968   143A             ;; if(*fp == 'x') 
2969   143A             _if44_cond:
2970   143A FA FD FF      lea d, [bp + -3] ; $fp
2971   143D 2A            mov b, [d]
2972   143E 74            mov d, b
2973   143F 32            mov bl, [d]
2974   1440 A7 00         mov bh, 0
2975   1442             ; START RELATIONAL
2976   1442 D7            push a
2977   1443 11            mov a, b
2978   1444 26 78 00      mov b, $78
2979   1447 B0            cmp a, b
2980   1448 FD 71         seq ; ==
2981   144A E4            pop a
2982   144B             ; END RELATIONAL
2983   144B C0 00 00      cmp b, 0
2984   144E C6 70 14      je _if44_else
2985   1451             _if44_true:
2986   1451             ;; printx32(*(long int *)p); 
2987   1451 FA FF FF      lea d, [bp + -1] ; $p
2988   1454 2A            mov b, [d]
2989   1455 74            mov d, b
2990   1456 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2991   1459 FD 39         mov c, b ; And place it into C
2992   145B 2A            mov b, [d] ; Lower Word in B
2993   145C FD 79         mov g, b
2994   145E 28            mov b, c
2995   145F FD AB         swp b
2996   1461 D8            push b
2997   1462 FD 27         mov b, g
2998   1464 FD AB         swp b
2999   1466 D8            push b
3000   1467 07 84 15      call printx32
3001   146A 51 04 00      add sp, 4
3002   146D 0A 79 14      jmp _if44_exit
3003   1470             _if44_else:
3004   1470             ;; err("Unexpected format in printf."); 
3005   1470 26 86 2C      mov b, __s6 ; "Unexpected format in printf."
3006   1473 FD AB         swp b
3007   1475 D8            push b
3008   1476 07 6F 15      call err
3009   1479             _if44_exit:
3010   1479             _if43_exit:
3011   1479             _if42_exit:
3012   1479             ;; p = p + 4; 
3013   1479 FA FF FF      lea d, [bp + -1] ; $p
3014   147C DA            push d
3015   147D FA FF FF      lea d, [bp + -1] ; $p
3016   1480 2A            mov b, [d]
3017   1481             ; START TERMS
3018   1481 D7            push a
3019   1482 11            mov a, b
3020   1483 26 04 00      mov b, $4
3021   1486 56            add b, a
3022   1487 E4            pop a
3023   1488             ; END TERMS
3024   1488 E7            pop d
3025   1489 FD 43         mov [d], b
3026   148B             ;; break; 
3027   148B 0A 3E 15      jmp _switch41_exit ; case break
3028   148E             _switch41_case2:
3029   148E             _switch41_case3:
3030   148E             ;; print_signed(*(int*)p); 
3031   148E FA FF FF      lea d, [bp + -1] ; $p
3032   1491 2A            mov b, [d]
3033   1492 74            mov d, b
3034   1493 2A            mov b, [d]
3035   1494 FD AB         swp b
3036   1496 D8            push b
3037   1497 07 0B 17      call print_signed
3038   149A 51 02 00      add sp, 2
3039   149D             ;; p = p + 2; 
3040   149D FA FF FF      lea d, [bp + -1] ; $p
3041   14A0 DA            push d
3042   14A1 FA FF FF      lea d, [bp + -1] ; $p
3043   14A4 2A            mov b, [d]
3044   14A5             ; START TERMS
3045   14A5 D7            push a
3046   14A6 11            mov a, b
3047   14A7 26 02 00      mov b, $2
3048   14AA 56            add b, a
3049   14AB E4            pop a
3050   14AC             ; END TERMS
3051   14AC E7            pop d
3052   14AD FD 43         mov [d], b
3053   14AF             ;; break; 
3054   14AF 0A 3E 15      jmp _switch41_exit ; case break
3055   14B2             _switch41_case4:
3056   14B2             ;; print_unsigned(*(unsigned int*)p); 
3057   14B2 FA FF FF      lea d, [bp + -1] ; $p
3058   14B5 2A            mov b, [d]
3059   14B6 74            mov d, b
3060   14B7 2A            mov b, [d]
3061   14B8 FD AB         swp b
3062   14BA D8            push b
3063   14BB 07 4A 1A      call print_unsigned
3064   14BE 51 02 00      add sp, 2
3065   14C1             ;; p = p + 2; 
3066   14C1 FA FF FF      lea d, [bp + -1] ; $p
3067   14C4 DA            push d
3068   14C5 FA FF FF      lea d, [bp + -1] ; $p
3069   14C8 2A            mov b, [d]
3070   14C9             ; START TERMS
3071   14C9 D7            push a
3072   14CA 11            mov a, b
3073   14CB 26 02 00      mov b, $2
3074   14CE 56            add b, a
3075   14CF E4            pop a
3076   14D0             ; END TERMS
3077   14D0 E7            pop d
3078   14D1 FD 43         mov [d], b
3079   14D3             ;; break; 
3080   14D3 0A 3E 15      jmp _switch41_exit ; case break
3081   14D6             _switch41_case5:
3082   14D6             
3083   14D6             ; --- BEGIN INLINE ASM BLOCK
3084   14D6 FA FF FF      lea d, [bp + -1] ; $p
3085   14D9 FD 2A         mov d, [d]
3086   14DB 2A            mov b, [d]
3087   14DC 07 9D 1E      call print_u16x
3088   14DF             ; --- END INLINE ASM BLOCK
3089   14DF             
3090   14DF             ;; p = p + 2; 
3091   14DF FA FF FF      lea d, [bp + -1] ; $p
3092   14E2 DA            push d
3093   14E3 FA FF FF      lea d, [bp + -1] ; $p
3094   14E6 2A            mov b, [d]
3095   14E7             ; START TERMS
3096   14E7 D7            push a
3097   14E8 11            mov a, b
3098   14E9 26 02 00      mov b, $2
3099   14EC 56            add b, a
3100   14ED E4            pop a
3101   14EE             ; END TERMS
3102   14EE E7            pop d
3103   14EF FD 43         mov [d], b
3104   14F1             ;; break; 
3105   14F1 0A 3E 15      jmp _switch41_exit ; case break
3106   14F4             _switch41_case6:
3107   14F4             
3108   14F4             ; --- BEGIN INLINE ASM BLOCK
3109   14F4 FA FF FF      lea d, [bp + -1] ; $p
3110   14F7 FD 2A         mov d, [d]
3111   14F9 1E            mov al, [d]
3112   14FA 23            mov ah, al
3113   14FB 07 FB 1C      call _putchar
3114   14FE             ; --- END INLINE ASM BLOCK
3115   14FE             
3116   14FE             ;; p = p + 2; 
3117   14FE FA FF FF      lea d, [bp + -1] ; $p
3118   1501 DA            push d
3119   1502 FA FF FF      lea d, [bp + -1] ; $p
3120   1505 2A            mov b, [d]
3121   1506             ; START TERMS
3122   1506 D7            push a
3123   1507 11            mov a, b
3124   1508 26 02 00      mov b, $2
3125   150B 56            add b, a
3126   150C E4            pop a
3127   150D             ; END TERMS
3128   150D E7            pop d
3129   150E FD 43         mov [d], b
3130   1510             ;; break; 
3131   1510 0A 3E 15      jmp _switch41_exit ; case break
3132   1513             _switch41_case7:
3133   1513             
3134   1513             ; --- BEGIN INLINE ASM BLOCK
3135   1513 FA FF FF      lea d, [bp + -1] ; $p
3136   1516 FD 2A         mov d, [d]
3137   1518 FD 2A         mov d, [d]
3138   151A 07 45 1E      call _puts
3139   151D             ; --- END INLINE ASM BLOCK
3140   151D             
3141   151D             ;; p = p + 2; 
3142   151D FA FF FF      lea d, [bp + -1] ; $p
3143   1520 DA            push d
3144   1521 FA FF FF      lea d, [bp + -1] ; $p
3145   1524 2A            mov b, [d]
3146   1525             ; START TERMS
3147   1525 D7            push a
3148   1526 11            mov a, b
3149   1527 26 02 00      mov b, $2
3150   152A 56            add b, a
3151   152B E4            pop a
3152   152C             ; END TERMS
3153   152C E7            pop d
3154   152D FD 43         mov [d], b
3155   152F             ;; break; 
3156   152F 0A 3E 15      jmp _switch41_exit ; case break
3157   1532             _switch41_default:
3158   1532             ;; print("Error: Unknown argument type.\n"); 
3159   1532 26 A3 2C      mov b, __s7 ; "Error: Unknown argument type.\n"
3160   1535 FD AB         swp b
3161   1537 D8            push b
3162   1538 07 62 1B      call print
3163   153B 51 02 00      add sp, 2
3164   153E             _switch41_exit:
3165   153E             ;; fp++; 
3166   153E FA FD FF      lea d, [bp + -3] ; $fp
3167   1541 2A            mov b, [d]
3168   1542 D8            push b
3169   1543 FD 77         inc b
3170   1545 FA FD FF      lea d, [bp + -3] ; $fp
3171   1548 FD 43         mov [d], b
3172   154A E5            pop b
3173   154B 0A 6A 15      jmp _if40_exit
3174   154E             _if40_else:
3175   154E             ;; putchar(*fp); 
3176   154E FA FD FF      lea d, [bp + -3] ; $fp
3177   1551 2A            mov b, [d]
3178   1552 74            mov d, b
3179   1553 32            mov bl, [d]
3180   1554 A7 00         mov bh, 0
3181   1556 DD            push bl
3182   1557 07 1A 1B      call putchar
3183   155A 51 01 00      add sp, 1
3184   155D             ;; fp++; 
3185   155D FA FD FF      lea d, [bp + -3] ; $fp
3186   1560 2A            mov b, [d]
3187   1561 D8            push b
3188   1562 FD 77         inc b
3189   1564 FA FD FF      lea d, [bp + -3] ; $fp
3190   1567 FD 43         mov [d], b
3191   1569 E5            pop b
3192   156A             _if40_exit:
3193   156A             _if39_exit:
3194   156A             _for38_update:
3195   156A 0A 4E 13      jmp _for38_cond
3196   156D             _for38_exit:
3197   156D F9            leave
3198   156E 09            ret
3199   156F             
3200   156F             err:
3201   156F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3202   1572             ;; print(e); 
3203   1572 FA 05 00      lea d, [bp + 5] ; $e
3204   1575 2A            mov b, [d]
3205   1576 FD AB         swp b
3206   1578 D8            push b
3207   1579 07 62 1B      call print
3208   157C 51 02 00      add sp, 2
3209   157F             ;; exit(); 
3210   157F 07 41 08      call exit
3211   1582 F9            leave
3212   1583 09            ret
3213   1584             
3214   1584             printx32:
3215   1584 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3216   1587             
3217   1587             ; --- BEGIN INLINE ASM BLOCK
3218   1587 FA 05 00      lea d, [bp + 5] ; $hex
3219   158A 2B 02 00      mov b, [d+2]
3220   158D 07 9D 1E      call print_u16x
3221   1590 2A            mov b, [d]
3222   1591 07 9D 1E      call print_u16x
3223   1594             ; --- END INLINE ASM BLOCK
3224   1594             
3225   1594 F9            leave
3226   1595 09            ret
3227   1596             
3228   1596             printx16:
3229   1596 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3230   1599             
3231   1599             ; --- BEGIN INLINE ASM BLOCK
3232   1599 FA 05 00      lea d, [bp + 5] ; $hex
3233   159C 2A            mov b, [d]
3234   159D 07 9D 1E      call print_u16x
3235   15A0             ; --- END INLINE ASM BLOCK
3236   15A0             
3237   15A0 F9            leave
3238   15A1 09            ret
3239   15A2             
3240   15A2             printx8:
3241   15A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3242   15A5             
3243   15A5             ; --- BEGIN INLINE ASM BLOCK
3244   15A5 FA 05 00      lea d, [bp + 5] ; $hex
3245   15A8 32            mov bl, [d]
3246   15A9 07 E1 1E      call print_u8x
3247   15AC             ; --- END INLINE ASM BLOCK
3248   15AC             
3249   15AC F9            leave
3250   15AD 09            ret
3251   15AE             
3252   15AE             hex_to_int:
3253   15AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3254   15B1             ; $value 
3255   15B1 10 00 00      mov a, $0
3256   15B4 45 FF FF      mov [bp + -1], a
3257   15B7             ; $i 
3258   15B7             ; $hex_char 
3259   15B7             ; $len 
3260   15B7 52 07 00      sub sp, 7
3261   15BA             ;; len = strlen(hex_string); 
3262   15BA FA FA FF      lea d, [bp + -6] ; $len
3263   15BD DA            push d
3264   15BE FA 05 00      lea d, [bp + 5] ; $hex_string
3265   15C1 2A            mov b, [d]
3266   15C2 FD AB         swp b
3267   15C4 D8            push b
3268   15C5 07 F8 07      call strlen
3269   15C8 51 02 00      add sp, 2
3270   15CB E7            pop d
3271   15CC FD 43         mov [d], b
3272   15CE             ;; for (i = 0; i < len; i++) { 
3273   15CE             _for45_init:
3274   15CE FA FD FF      lea d, [bp + -3] ; $i
3275   15D1 DA            push d
3276   15D2 26 00 00      mov b, $0
3277   15D5 E7            pop d
3278   15D6 FD 43         mov [d], b
3279   15D8             _for45_cond:
3280   15D8 FA FD FF      lea d, [bp + -3] ; $i
3281   15DB 2A            mov b, [d]
3282   15DC             ; START RELATIONAL
3283   15DC D7            push a
3284   15DD 11            mov a, b
3285   15DE FA FA FF      lea d, [bp + -6] ; $len
3286   15E1 2A            mov b, [d]
3287   15E2 B0            cmp a, b
3288   15E3 FD 73         slt ; <= (signed)
3289   15E5 E4            pop a
3290   15E6             ; END RELATIONAL
3291   15E6 C0 00 00      cmp b, 0
3292   15E9 C6 EB 16      je _for45_exit
3293   15EC             _for45_block:
3294   15EC             ;; hex_char = hex_string[i]; 
3295   15EC FA FC FF      lea d, [bp + -4] ; $hex_char
3296   15EF DA            push d
3297   15F0 FA 05 00      lea d, [bp + 5] ; $hex_string
3298   15F3 FD 2A         mov d, [d]
3299   15F5 D7            push a
3300   15F6 DA            push d
3301   15F7 FA FD FF      lea d, [bp + -3] ; $i
3302   15FA 2A            mov b, [d]
3303   15FB E7            pop d
3304   15FC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3305   1600 E4            pop a
3306   1601 32            mov bl, [d]
3307   1602 A7 00         mov bh, 0
3308   1604 E7            pop d
3309   1605 FD 3E         mov [d], bl
3310   1607             ;; if (hex_char >= 'a' && hex_char <= 'f')  
3311   1607             _if46_cond:
3312   1607 FA FC FF      lea d, [bp + -4] ; $hex_char
3313   160A 32            mov bl, [d]
3314   160B A7 00         mov bh, 0
3315   160D             ; START RELATIONAL
3316   160D D7            push a
3317   160E 11            mov a, b
3318   160F 26 61 00      mov b, $61
3319   1612 B0            cmp a, b
3320   1613 FD 80         sge ; >=
3321   1615 E4            pop a
3322   1616             ; END RELATIONAL
3323   1616 D7            push a
3324   1617 11            mov a, b
3325   1618 FA FC FF      lea d, [bp + -4] ; $hex_char
3326   161B 32            mov bl, [d]
3327   161C A7 00         mov bh, 0
3328   161E             ; START RELATIONAL
3329   161E D7            push a
3330   161F 11            mov a, b
3331   1620 26 66 00      mov b, $66
3332   1623 B0            cmp a, b
3333   1624 FD 74         sle ; <=
3334   1626 E4            pop a
3335   1627             ; END RELATIONAL
3336   1627 FD A7         sand a, b ; &&
3337   1629 E4            pop a
3338   162A C0 00 00      cmp b, 0
3339   162D C6 5E 16      je _if46_else
3340   1630             _if46_true:
3341   1630             ;; value = (value * 16) + (hex_char - 'a' + 10); 
3342   1630 FA FF FF      lea d, [bp + -1] ; $value
3343   1633 DA            push d
3344   1634 FA FF FF      lea d, [bp + -1] ; $value
3345   1637 2A            mov b, [d]
3346   1638             ; START FACTORS
3347   1638 D7            push a
3348   1639 11            mov a, b
3349   163A 26 10 00      mov b, $10
3350   163D AC            mul a, b ; *
3351   163E 11            mov a, b
3352   163F 27            mov b, a
3353   1640 E4            pop a
3354   1641             ; END FACTORS
3355   1641             ; START TERMS
3356   1641 D7            push a
3357   1642 11            mov a, b
3358   1643 FA FC FF      lea d, [bp + -4] ; $hex_char
3359   1646 32            mov bl, [d]
3360   1647 A7 00         mov bh, 0
3361   1649             ; START TERMS
3362   1649 D7            push a
3363   164A 11            mov a, b
3364   164B 26 61 00      mov b, $61
3365   164E 60            sub a, b
3366   164F 27            mov b, a
3367   1650 11            mov a, b
3368   1651 26 0A 00      mov b, $a
3369   1654 56            add b, a
3370   1655 E4            pop a
3371   1656             ; END TERMS
3372   1656 56            add b, a
3373   1657 E4            pop a
3374   1658             ; END TERMS
3375   1658 E7            pop d
3376   1659 FD 43         mov [d], b
3377   165B 0A DB 16      jmp _if46_exit
3378   165E             _if46_else:
3379   165E             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3380   165E             _if47_cond:
3381   165E FA FC FF      lea d, [bp + -4] ; $hex_char
3382   1661 32            mov bl, [d]
3383   1662 A7 00         mov bh, 0
3384   1664             ; START RELATIONAL
3385   1664 D7            push a
3386   1665 11            mov a, b
3387   1666 26 41 00      mov b, $41
3388   1669 B0            cmp a, b
3389   166A FD 80         sge ; >=
3390   166C E4            pop a
3391   166D             ; END RELATIONAL
3392   166D D7            push a
3393   166E 11            mov a, b
3394   166F FA FC FF      lea d, [bp + -4] ; $hex_char
3395   1672 32            mov bl, [d]
3396   1673 A7 00         mov bh, 0
3397   1675             ; START RELATIONAL
3398   1675 D7            push a
3399   1676 11            mov a, b
3400   1677 26 46 00      mov b, $46
3401   167A B0            cmp a, b
3402   167B FD 74         sle ; <=
3403   167D E4            pop a
3404   167E             ; END RELATIONAL
3405   167E FD A7         sand a, b ; &&
3406   1680 E4            pop a
3407   1681 C0 00 00      cmp b, 0
3408   1684 C6 B5 16      je _if47_else
3409   1687             _if47_true:
3410   1687             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3411   1687 FA FF FF      lea d, [bp + -1] ; $value
3412   168A DA            push d
3413   168B FA FF FF      lea d, [bp + -1] ; $value
3414   168E 2A            mov b, [d]
3415   168F             ; START FACTORS
3416   168F D7            push a
3417   1690 11            mov a, b
3418   1691 26 10 00      mov b, $10
3419   1694 AC            mul a, b ; *
3420   1695 11            mov a, b
3421   1696 27            mov b, a
3422   1697 E4            pop a
3423   1698             ; END FACTORS
3424   1698             ; START TERMS
3425   1698 D7            push a
3426   1699 11            mov a, b
3427   169A FA FC FF      lea d, [bp + -4] ; $hex_char
3428   169D 32            mov bl, [d]
3429   169E A7 00         mov bh, 0
3430   16A0             ; START TERMS
3431   16A0 D7            push a
3432   16A1 11            mov a, b
3433   16A2 26 41 00      mov b, $41
3434   16A5 60            sub a, b
3435   16A6 27            mov b, a
3436   16A7 11            mov a, b
3437   16A8 26 0A 00      mov b, $a
3438   16AB 56            add b, a
3439   16AC E4            pop a
3440   16AD             ; END TERMS
3441   16AD 56            add b, a
3442   16AE E4            pop a
3443   16AF             ; END TERMS
3444   16AF E7            pop d
3445   16B0 FD 43         mov [d], b
3446   16B2 0A DB 16      jmp _if47_exit
3447   16B5             _if47_else:
3448   16B5             ;; value = (value * 16) + (hex_char - '0'); 
3449   16B5 FA FF FF      lea d, [bp + -1] ; $value
3450   16B8 DA            push d
3451   16B9 FA FF FF      lea d, [bp + -1] ; $value
3452   16BC 2A            mov b, [d]
3453   16BD             ; START FACTORS
3454   16BD D7            push a
3455   16BE 11            mov a, b
3456   16BF 26 10 00      mov b, $10
3457   16C2 AC            mul a, b ; *
3458   16C3 11            mov a, b
3459   16C4 27            mov b, a
3460   16C5 E4            pop a
3461   16C6             ; END FACTORS
3462   16C6             ; START TERMS
3463   16C6 D7            push a
3464   16C7 11            mov a, b
3465   16C8 FA FC FF      lea d, [bp + -4] ; $hex_char
3466   16CB 32            mov bl, [d]
3467   16CC A7 00         mov bh, 0
3468   16CE             ; START TERMS
3469   16CE D7            push a
3470   16CF 11            mov a, b
3471   16D0 26 30 00      mov b, $30
3472   16D3 60            sub a, b
3473   16D4 27            mov b, a
3474   16D5 E4            pop a
3475   16D6             ; END TERMS
3476   16D6 56            add b, a
3477   16D7 E4            pop a
3478   16D8             ; END TERMS
3479   16D8 E7            pop d
3480   16D9 FD 43         mov [d], b
3481   16DB             _if47_exit:
3482   16DB             _if46_exit:
3483   16DB             _for45_update:
3484   16DB FA FD FF      lea d, [bp + -3] ; $i
3485   16DE 2A            mov b, [d]
3486   16DF D8            push b
3487   16E0 FD 77         inc b
3488   16E2 FA FD FF      lea d, [bp + -3] ; $i
3489   16E5 FD 43         mov [d], b
3490   16E7 E5            pop b
3491   16E8 0A D8 15      jmp _for45_cond
3492   16EB             _for45_exit:
3493   16EB             ;; return value; 
3494   16EB FA FF FF      lea d, [bp + -1] ; $value
3495   16EE 2A            mov b, [d]
3496   16EF F9            leave
3497   16F0 09            ret
3498   16F1             
3499   16F1             gets:
3500   16F1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3501   16F4             
3502   16F4             ; --- BEGIN INLINE ASM BLOCK
3503   16F4 FA 05 00      lea d, [bp + 5] ; $s
3504   16F7 15            mov a, [d]
3505   16F8 3C            mov d, a
3506   16F9 07 02 1D      call _gets
3507   16FC             ; --- END INLINE ASM BLOCK
3508   16FC             
3509   16FC             ;; return strlen(s); 
3510   16FC FA 05 00      lea d, [bp + 5] ; $s
3511   16FF 2A            mov b, [d]
3512   1700 FD AB         swp b
3513   1702 D8            push b
3514   1703 07 F8 07      call strlen
3515   1706 51 02 00      add sp, 2
3516   1709 F9            leave
3517   170A 09            ret
3518   170B             
3519   170B             print_signed:
3520   170B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3521   170E             ; $digits 
3522   170E             ; $i 
3523   170E 10 00 00      mov a, $0
3524   1711 45 FA FF      mov [bp + -6], a
3525   1714 52 07 00      sub sp, 7
3526   1717             ;; if (num < 0) { 
3527   1717             _if48_cond:
3528   1717 FA 05 00      lea d, [bp + 5] ; $num
3529   171A 2A            mov b, [d]
3530   171B             ; START RELATIONAL
3531   171B D7            push a
3532   171C 11            mov a, b
3533   171D 26 00 00      mov b, $0
3534   1720 B0            cmp a, b
3535   1721 FD 73         slt ; <= (signed)
3536   1723 E4            pop a
3537   1724             ; END RELATIONAL
3538   1724 C0 00 00      cmp b, 0
3539   1727 C6 44 17      je _if48_else
3540   172A             _if48_true:
3541   172A             ;; putchar('-'); 
3542   172A 26 2D 00      mov b, $2d
3543   172D DD            push bl
3544   172E 07 1A 1B      call putchar
3545   1731 51 01 00      add sp, 1
3546   1734             ;; num = -num; 
3547   1734 FA 05 00      lea d, [bp + 5] ; $num
3548   1737 DA            push d
3549   1738 FA 05 00      lea d, [bp + 5] ; $num
3550   173B 2A            mov b, [d]
3551   173C FD 97         neg b
3552   173E E7            pop d
3553   173F FD 43         mov [d], b
3554   1741 0A 66 17      jmp _if48_exit
3555   1744             _if48_else:
3556   1744             ;; if (num == 0) { 
3557   1744             _if49_cond:
3558   1744 FA 05 00      lea d, [bp + 5] ; $num
3559   1747 2A            mov b, [d]
3560   1748             ; START RELATIONAL
3561   1748 D7            push a
3562   1749 11            mov a, b
3563   174A 26 00 00      mov b, $0
3564   174D B0            cmp a, b
3565   174E FD 71         seq ; ==
3566   1750 E4            pop a
3567   1751             ; END RELATIONAL
3568   1751 C0 00 00      cmp b, 0
3569   1754 C6 66 17      je _if49_exit
3570   1757             _if49_true:
3571   1757             ;; putchar('0'); 
3572   1757 26 30 00      mov b, $30
3573   175A DD            push bl
3574   175B 07 1A 1B      call putchar
3575   175E 51 01 00      add sp, 1
3576   1761             ;; return; 
3577   1761 F9            leave
3578   1762 09            ret
3579   1763 0A 66 17      jmp _if49_exit
3580   1766             _if49_exit:
3581   1766             _if48_exit:
3582   1766             ;; while (num > 0) { 
3583   1766             _while50_cond:
3584   1766 FA 05 00      lea d, [bp + 5] ; $num
3585   1769 2A            mov b, [d]
3586   176A             ; START RELATIONAL
3587   176A D7            push a
3588   176B 11            mov a, b
3589   176C 26 00 00      mov b, $0
3590   176F B0            cmp a, b
3591   1770 FD 7F         sgt ; >
3592   1772 E4            pop a
3593   1773             ; END RELATIONAL
3594   1773 C0 00 00      cmp b, 0
3595   1776 C6 C0 17      je _while50_exit
3596   1779             _while50_block:
3597   1779             ;; digits[i] = '0' + (num % 10); 
3598   1779 FA FC FF      lea d, [bp + -4] ; $digits
3599   177C D7            push a
3600   177D DA            push d
3601   177E FA FA FF      lea d, [bp + -6] ; $i
3602   1781 2A            mov b, [d]
3603   1782 E7            pop d
3604   1783 5A            add d, b
3605   1784 E4            pop a
3606   1785 DA            push d
3607   1786 26 30 00      mov b, $30
3608   1789             ; START TERMS
3609   1789 D7            push a
3610   178A 11            mov a, b
3611   178B FA 05 00      lea d, [bp + 5] ; $num
3612   178E 2A            mov b, [d]
3613   178F             ; START FACTORS
3614   178F D7            push a
3615   1790 11            mov a, b
3616   1791 26 0A 00      mov b, $a
3617   1794 AE            div a, b ; 
3618   1795 11            mov a, b
3619   1796 27            mov b, a
3620   1797 E4            pop a
3621   1798             ; END FACTORS
3622   1798 56            add b, a
3623   1799 E4            pop a
3624   179A             ; END TERMS
3625   179A E7            pop d
3626   179B FD 3E         mov [d], bl
3627   179D             ;; num = num / 10; 
3628   179D FA 05 00      lea d, [bp + 5] ; $num
3629   17A0 DA            push d
3630   17A1 FA 05 00      lea d, [bp + 5] ; $num
3631   17A4 2A            mov b, [d]
3632   17A5             ; START FACTORS
3633   17A5 D7            push a
3634   17A6 11            mov a, b
3635   17A7 26 0A 00      mov b, $a
3636   17AA AE            div a, b
3637   17AB 27            mov b, a
3638   17AC E4            pop a
3639   17AD             ; END FACTORS
3640   17AD E7            pop d
3641   17AE FD 43         mov [d], b
3642   17B0             ;; i++; 
3643   17B0 FA FA FF      lea d, [bp + -6] ; $i
3644   17B3 2A            mov b, [d]
3645   17B4 D8            push b
3646   17B5 FD 77         inc b
3647   17B7 FA FA FF      lea d, [bp + -6] ; $i
3648   17BA FD 43         mov [d], b
3649   17BC E5            pop b
3650   17BD 0A 66 17      jmp _while50_cond
3651   17C0             _while50_exit:
3652   17C0             ;; while (i > 0) { 
3653   17C0             _while51_cond:
3654   17C0 FA FA FF      lea d, [bp + -6] ; $i
3655   17C3 2A            mov b, [d]
3656   17C4             ; START RELATIONAL
3657   17C4 D7            push a
3658   17C5 11            mov a, b
3659   17C6 26 00 00      mov b, $0
3660   17C9 B0            cmp a, b
3661   17CA FD 7F         sgt ; >
3662   17CC E4            pop a
3663   17CD             ; END RELATIONAL
3664   17CD C0 00 00      cmp b, 0
3665   17D0 C6 F9 17      je _while51_exit
3666   17D3             _while51_block:
3667   17D3             ;; i--; 
3668   17D3 FA FA FF      lea d, [bp + -6] ; $i
3669   17D6 2A            mov b, [d]
3670   17D7 D8            push b
3671   17D8 FD 7D         dec b
3672   17DA FA FA FF      lea d, [bp + -6] ; $i
3673   17DD FD 43         mov [d], b
3674   17DF E5            pop b
3675   17E0             ;; putchar(digits[i]); 
3676   17E0 FA FC FF      lea d, [bp + -4] ; $digits
3677   17E3 D7            push a
3678   17E4 DA            push d
3679   17E5 FA FA FF      lea d, [bp + -6] ; $i
3680   17E8 2A            mov b, [d]
3681   17E9 E7            pop d
3682   17EA 5A            add d, b
3683   17EB E4            pop a
3684   17EC 32            mov bl, [d]
3685   17ED A7 00         mov bh, 0
3686   17EF DD            push bl
3687   17F0 07 1A 1B      call putchar
3688   17F3 51 01 00      add sp, 1
3689   17F6 0A C0 17      jmp _while51_cond
3690   17F9             _while51_exit:
3691   17F9 F9            leave
3692   17FA 09            ret
3693   17FB             
3694   17FB             print_signed_long:
3695   17FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3696   17FE             ; $digits 
3697   17FE             ; $i 
3698   17FE 10 00 00      mov a, $0
3699   1801 45 F5 FF      mov [bp + -11], a
3700   1804 52 0C 00      sub sp, 12
3701   1807             ;; if (num < 0) { 
3702   1807             _if52_cond:
3703   1807 FA 05 00      lea d, [bp + 5] ; $num
3704   180A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3705   180D FD 39         mov c, b ; And place it into C
3706   180F 2A            mov b, [d] ; Lower Word in B
3707   1810             ; START RELATIONAL
3708   1810 D7            push a
3709   1811 FD D8         push g
3710   1813 11            mov a, b
3711   1814 FD 7A         mov g, c
3712   1816 26 00 00      mov b, $0
3713   1819 4D            mov si, a
3714   181A 11            mov a, b
3715   181B 4F            mov di, a
3716   181C FD 12         mov a, g
3717   181E 28            mov b, c
3718   181F B0            cmp a, b
3719   1820 FD 75         slu ; <
3720   1822 D8            push b
3721   1823 28            mov b, c
3722   1824 FD 71         seq ; ==
3723   1826 D8            push b
3724   1827 50            mov a, di
3725   1828 27            mov b, a
3726   1829 4E            mov a, si
3727   182A B0            cmp a, b
3728   182B FD 75         slu ; <
3729   182D E4            pop a
3730   182E FD 92         and b, a
3731   1830 E4            pop a
3732   1831 FD 70         or b, a
3733   1833               
3734   1833 FD F1         pop g
3735   1835 E4            pop a
3736   1836             ; END RELATIONAL
3737   1836 C0 00 00      cmp b, 0
3738   1839 C6 60 18      je _if52_else
3739   183C             _if52_true:
3740   183C             ;; putchar('-'); 
3741   183C 26 2D 00      mov b, $2d
3742   183F DD            push bl
3743   1840 07 1A 1B      call putchar
3744   1843 51 01 00      add sp, 1
3745   1846             ;; num = -num; 
3746   1846 FA 05 00      lea d, [bp + 5] ; $num
3747   1849 DA            push d
3748   184A FA 05 00      lea d, [bp + 5] ; $num
3749   184D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3750   1850 FD 39         mov c, b ; And place it into C
3751   1852 2A            mov b, [d] ; Lower Word in B
3752   1853 FD 97         neg b
3753   1855 E7            pop d
3754   1856 FD 43         mov [d], b
3755   1858 28            mov b, c
3756   1859 FD 44 02 00   mov [d + 2], b
3757   185D 0A 97 18      jmp _if52_exit
3758   1860             _if52_else:
3759   1860             ;; if (num == 0) { 
3760   1860             _if53_cond:
3761   1860 FA 05 00      lea d, [bp + 5] ; $num
3762   1863 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3763   1866 FD 39         mov c, b ; And place it into C
3764   1868 2A            mov b, [d] ; Lower Word in B
3765   1869             ; START RELATIONAL
3766   1869 D7            push a
3767   186A FD D8         push g
3768   186C 11            mov a, b
3769   186D FD 7A         mov g, c
3770   186F 26 00 00      mov b, $0
3771   1872 B0            cmp a, b
3772   1873 FD 71         seq ; ==
3773   1875 D8            push b
3774   1876 12            mov a, c
3775   1877 FD 27         mov b, g
3776   1879 B0            cmp a, b
3777   187A FD 71         seq ; ==
3778   187C E4            pop a
3779   187D FD A7         sand a, b
3780   187F FD F1         pop g
3781   1881 E4            pop a
3782   1882             ; END RELATIONAL
3783   1882 C0 00 00      cmp b, 0
3784   1885 C6 97 18      je _if53_exit
3785   1888             _if53_true:
3786   1888             ;; putchar('0'); 
3787   1888 26 30 00      mov b, $30
3788   188B DD            push bl
3789   188C 07 1A 1B      call putchar
3790   188F 51 01 00      add sp, 1
3791   1892             ;; return; 
3792   1892 F9            leave
3793   1893 09            ret
3794   1894 0A 97 18      jmp _if53_exit
3795   1897             _if53_exit:
3796   1897             _if52_exit:
3797   1897             ;; while (num > 0) { 
3798   1897             _while54_cond:
3799   1897 FA 05 00      lea d, [bp + 5] ; $num
3800   189A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3801   189D FD 39         mov c, b ; And place it into C
3802   189F 2A            mov b, [d] ; Lower Word in B
3803   18A0             ; START RELATIONAL
3804   18A0 D7            push a
3805   18A1 FD D8         push g
3806   18A3 11            mov a, b
3807   18A4 FD 7A         mov g, c
3808   18A6 26 00 00      mov b, $0
3809   18A9 B0            cmp a, b
3810   18AA FD 7F         sgt ; >
3811   18AC FD F1         pop g
3812   18AE E4            pop a
3813   18AF             ; END RELATIONAL
3814   18AF C0 00 00      cmp b, 0
3815   18B2 C6 12 19      je _while54_exit
3816   18B5             _while54_block:
3817   18B5             ;; digits[i] = '0' + (num % 10); 
3818   18B5 FA F7 FF      lea d, [bp + -9] ; $digits
3819   18B8 D7            push a
3820   18B9 DA            push d
3821   18BA FA F5 FF      lea d, [bp + -11] ; $i
3822   18BD 2A            mov b, [d]
3823   18BE E7            pop d
3824   18BF 5A            add d, b
3825   18C0 E4            pop a
3826   18C1 DA            push d
3827   18C2 26 30 00      mov b, $30
3828   18C5             ; START TERMS
3829   18C5 D7            push a
3830   18C6 11            mov a, b
3831   18C7 FA 05 00      lea d, [bp + 5] ; $num
3832   18CA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3833   18CD FD 39         mov c, b ; And place it into C
3834   18CF 2A            mov b, [d] ; Lower Word in B
3835   18D0             ; START FACTORS
3836   18D0 D7            push a
3837   18D1 11            mov a, b
3838   18D2 26 0A 00      mov b, $a
3839   18D5 AE            div a, b ; 
3840   18D6 11            mov a, b
3841   18D7 27            mov b, a
3842   18D8 E4            pop a
3843   18D9             ; END FACTORS
3844   18D9 54            add a, b
3845   18DA D7            push a
3846   18DB FD 12         mov a, g
3847   18DD 28            mov b, c
3848   18DE 5C            adc a, b
3849   18DF 39            mov c, a
3850   18E0 E5            pop b
3851   18E1 E4            pop a
3852   18E2             ; END TERMS
3853   18E2 E7            pop d
3854   18E3 FD 3E         mov [d], bl
3855   18E5             ;; num = num / 10; 
3856   18E5 FA 05 00      lea d, [bp + 5] ; $num
3857   18E8 DA            push d
3858   18E9 FA 05 00      lea d, [bp + 5] ; $num
3859   18EC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3860   18EF FD 39         mov c, b ; And place it into C
3861   18F1 2A            mov b, [d] ; Lower Word in B
3862   18F2             ; START FACTORS
3863   18F2 D7            push a
3864   18F3 11            mov a, b
3865   18F4 26 0A 00      mov b, $a
3866   18F7 AE            div a, b
3867   18F8 27            mov b, a
3868   18F9 E4            pop a
3869   18FA             ; END FACTORS
3870   18FA E7            pop d
3871   18FB FD 43         mov [d], b
3872   18FD 28            mov b, c
3873   18FE FD 44 02 00   mov [d + 2], b
3874   1902             ;; i++; 
3875   1902 FA F5 FF      lea d, [bp + -11] ; $i
3876   1905 2A            mov b, [d]
3877   1906 D8            push b
3878   1907 FD 77         inc b
3879   1909 FA F5 FF      lea d, [bp + -11] ; $i
3880   190C FD 43         mov [d], b
3881   190E E5            pop b
3882   190F 0A 97 18      jmp _while54_cond
3883   1912             _while54_exit:
3884   1912             ;; while (i > 0) { 
3885   1912             _while55_cond:
3886   1912 FA F5 FF      lea d, [bp + -11] ; $i
3887   1915 2A            mov b, [d]
3888   1916             ; START RELATIONAL
3889   1916 D7            push a
3890   1917 11            mov a, b
3891   1918 26 00 00      mov b, $0
3892   191B B0            cmp a, b
3893   191C FD 7F         sgt ; >
3894   191E E4            pop a
3895   191F             ; END RELATIONAL
3896   191F C0 00 00      cmp b, 0
3897   1922 C6 4B 19      je _while55_exit
3898   1925             _while55_block:
3899   1925             ;; i--; 
3900   1925 FA F5 FF      lea d, [bp + -11] ; $i
3901   1928 2A            mov b, [d]
3902   1929 D8            push b
3903   192A FD 7D         dec b
3904   192C FA F5 FF      lea d, [bp + -11] ; $i
3905   192F FD 43         mov [d], b
3906   1931 E5            pop b
3907   1932             ;; putchar(digits[i]); 
3908   1932 FA F7 FF      lea d, [bp + -9] ; $digits
3909   1935 D7            push a
3910   1936 DA            push d
3911   1937 FA F5 FF      lea d, [bp + -11] ; $i
3912   193A 2A            mov b, [d]
3913   193B E7            pop d
3914   193C 5A            add d, b
3915   193D E4            pop a
3916   193E 32            mov bl, [d]
3917   193F A7 00         mov bh, 0
3918   1941 DD            push bl
3919   1942 07 1A 1B      call putchar
3920   1945 51 01 00      add sp, 1
3921   1948 0A 12 19      jmp _while55_cond
3922   194B             _while55_exit:
3923   194B F9            leave
3924   194C 09            ret
3925   194D             
3926   194D             print_unsigned_long:
3927   194D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3928   1950             ; $digits 
3929   1950             ; $i 
3930   1950 52 0C 00      sub sp, 12
3931   1953             ;; i = 0; 
3932   1953 FA F5 FF      lea d, [bp + -11] ; $i
3933   1956 DA            push d
3934   1957 26 00 00      mov b, $0
3935   195A E7            pop d
3936   195B FD 43         mov [d], b
3937   195D             ;; if(num == 0){ 
3938   195D             _if56_cond:
3939   195D FA 05 00      lea d, [bp + 5] ; $num
3940   1960 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3941   1963 FD 39         mov c, b ; And place it into C
3942   1965 2A            mov b, [d] ; Lower Word in B
3943   1966             ; START RELATIONAL
3944   1966 D7            push a
3945   1967 FD D8         push g
3946   1969 11            mov a, b
3947   196A FD 7A         mov g, c
3948   196C 26 00 00      mov b, $0
3949   196F B0            cmp a, b
3950   1970 FD 71         seq ; ==
3951   1972 D8            push b
3952   1973 12            mov a, c
3953   1974 FD 27         mov b, g
3954   1976 B0            cmp a, b
3955   1977 FD 71         seq ; ==
3956   1979 E4            pop a
3957   197A FD A7         sand a, b
3958   197C FD F1         pop g
3959   197E E4            pop a
3960   197F             ; END RELATIONAL
3961   197F C0 00 00      cmp b, 0
3962   1982 C6 94 19      je _if56_exit
3963   1985             _if56_true:
3964   1985             ;; putchar('0'); 
3965   1985 26 30 00      mov b, $30
3966   1988 DD            push bl
3967   1989 07 1A 1B      call putchar
3968   198C 51 01 00      add sp, 1
3969   198F             ;; return; 
3970   198F F9            leave
3971   1990 09            ret
3972   1991 0A 94 19      jmp _if56_exit
3973   1994             _if56_exit:
3974   1994             ;; while (num > 0) { 
3975   1994             _while57_cond:
3976   1994 FA 05 00      lea d, [bp + 5] ; $num
3977   1997 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3978   199A FD 39         mov c, b ; And place it into C
3979   199C 2A            mov b, [d] ; Lower Word in B
3980   199D             ; START RELATIONAL
3981   199D D7            push a
3982   199E FD D8         push g
3983   19A0 11            mov a, b
3984   19A1 FD 7A         mov g, c
3985   19A3 26 00 00      mov b, $0
3986   19A6 B0            cmp a, b
3987   19A7 FD 81         sgu ; > (unsigned)
3988   19A9 FD F1         pop g
3989   19AB E4            pop a
3990   19AC             ; END RELATIONAL
3991   19AC C0 00 00      cmp b, 0
3992   19AF C6 0F 1A      je _while57_exit
3993   19B2             _while57_block:
3994   19B2             ;; digits[i] = '0' + (num % 10); 
3995   19B2 FA F7 FF      lea d, [bp + -9] ; $digits
3996   19B5 D7            push a
3997   19B6 DA            push d
3998   19B7 FA F5 FF      lea d, [bp + -11] ; $i
3999   19BA 2A            mov b, [d]
4000   19BB E7            pop d
4001   19BC 5A            add d, b
4002   19BD E4            pop a
4003   19BE DA            push d
4004   19BF 26 30 00      mov b, $30
4005   19C2             ; START TERMS
4006   19C2 D7            push a
4007   19C3 11            mov a, b
4008   19C4 FA 05 00      lea d, [bp + 5] ; $num
4009   19C7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4010   19CA FD 39         mov c, b ; And place it into C
4011   19CC 2A            mov b, [d] ; Lower Word in B
4012   19CD             ; START FACTORS
4013   19CD D7            push a
4014   19CE 11            mov a, b
4015   19CF 26 0A 00      mov b, $a
4016   19D2 AE            div a, b ; 
4017   19D3 11            mov a, b
4018   19D4 27            mov b, a
4019   19D5 E4            pop a
4020   19D6             ; END FACTORS
4021   19D6 54            add a, b
4022   19D7 D7            push a
4023   19D8 FD 12         mov a, g
4024   19DA 28            mov b, c
4025   19DB 5C            adc a, b
4026   19DC 39            mov c, a
4027   19DD E5            pop b
4028   19DE E4            pop a
4029   19DF             ; END TERMS
4030   19DF E7            pop d
4031   19E0 FD 3E         mov [d], bl
4032   19E2             ;; num = num / 10; 
4033   19E2 FA 05 00      lea d, [bp + 5] ; $num
4034   19E5 DA            push d
4035   19E6 FA 05 00      lea d, [bp + 5] ; $num
4036   19E9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4037   19EC FD 39         mov c, b ; And place it into C
4038   19EE 2A            mov b, [d] ; Lower Word in B
4039   19EF             ; START FACTORS
4040   19EF D7            push a
4041   19F0 11            mov a, b
4042   19F1 26 0A 00      mov b, $a
4043   19F4 AE            div a, b
4044   19F5 27            mov b, a
4045   19F6 E4            pop a
4046   19F7             ; END FACTORS
4047   19F7 E7            pop d
4048   19F8 FD 43         mov [d], b
4049   19FA 28            mov b, c
4050   19FB FD 44 02 00   mov [d + 2], b
4051   19FF             ;; i++; 
4052   19FF FA F5 FF      lea d, [bp + -11] ; $i
4053   1A02 2A            mov b, [d]
4054   1A03 D8            push b
4055   1A04 FD 77         inc b
4056   1A06 FA F5 FF      lea d, [bp + -11] ; $i
4057   1A09 FD 43         mov [d], b
4058   1A0B E5            pop b
4059   1A0C 0A 94 19      jmp _while57_cond
4060   1A0F             _while57_exit:
4061   1A0F             ;; while (i > 0) { 
4062   1A0F             _while58_cond:
4063   1A0F FA F5 FF      lea d, [bp + -11] ; $i
4064   1A12 2A            mov b, [d]
4065   1A13             ; START RELATIONAL
4066   1A13 D7            push a
4067   1A14 11            mov a, b
4068   1A15 26 00 00      mov b, $0
4069   1A18 B0            cmp a, b
4070   1A19 FD 7F         sgt ; >
4071   1A1B E4            pop a
4072   1A1C             ; END RELATIONAL
4073   1A1C C0 00 00      cmp b, 0
4074   1A1F C6 48 1A      je _while58_exit
4075   1A22             _while58_block:
4076   1A22             ;; i--; 
4077   1A22 FA F5 FF      lea d, [bp + -11] ; $i
4078   1A25 2A            mov b, [d]
4079   1A26 D8            push b
4080   1A27 FD 7D         dec b
4081   1A29 FA F5 FF      lea d, [bp + -11] ; $i
4082   1A2C FD 43         mov [d], b
4083   1A2E E5            pop b
4084   1A2F             ;; putchar(digits[i]); 
4085   1A2F FA F7 FF      lea d, [bp + -9] ; $digits
4086   1A32 D7            push a
4087   1A33 DA            push d
4088   1A34 FA F5 FF      lea d, [bp + -11] ; $i
4089   1A37 2A            mov b, [d]
4090   1A38 E7            pop d
4091   1A39 5A            add d, b
4092   1A3A E4            pop a
4093   1A3B 32            mov bl, [d]
4094   1A3C A7 00         mov bh, 0
4095   1A3E DD            push bl
4096   1A3F 07 1A 1B      call putchar
4097   1A42 51 01 00      add sp, 1
4098   1A45 0A 0F 1A      jmp _while58_cond
4099   1A48             _while58_exit:
4100   1A48 F9            leave
4101   1A49 09            ret
4102   1A4A             
4103   1A4A             print_unsigned:
4104   1A4A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4105   1A4D             ; $digits 
4106   1A4D             ; $i 
4107   1A4D 52 07 00      sub sp, 7
4108   1A50             ;; i = 0; 
4109   1A50 FA FA FF      lea d, [bp + -6] ; $i
4110   1A53 DA            push d
4111   1A54 26 00 00      mov b, $0
4112   1A57 E7            pop d
4113   1A58 FD 43         mov [d], b
4114   1A5A             ;; if(num == 0){ 
4115   1A5A             _if59_cond:
4116   1A5A FA 05 00      lea d, [bp + 5] ; $num
4117   1A5D 2A            mov b, [d]
4118   1A5E             ; START RELATIONAL
4119   1A5E D7            push a
4120   1A5F 11            mov a, b
4121   1A60 26 00 00      mov b, $0
4122   1A63 B0            cmp a, b
4123   1A64 FD 71         seq ; ==
4124   1A66 E4            pop a
4125   1A67             ; END RELATIONAL
4126   1A67 C0 00 00      cmp b, 0
4127   1A6A C6 7C 1A      je _if59_exit
4128   1A6D             _if59_true:
4129   1A6D             ;; putchar('0'); 
4130   1A6D 26 30 00      mov b, $30
4131   1A70 DD            push bl
4132   1A71 07 1A 1B      call putchar
4133   1A74 51 01 00      add sp, 1
4134   1A77             ;; return; 
4135   1A77 F9            leave
4136   1A78 09            ret
4137   1A79 0A 7C 1A      jmp _if59_exit
4138   1A7C             _if59_exit:
4139   1A7C             ;; while (num > 0) { 
4140   1A7C             _while60_cond:
4141   1A7C FA 05 00      lea d, [bp + 5] ; $num
4142   1A7F 2A            mov b, [d]
4143   1A80             ; START RELATIONAL
4144   1A80 D7            push a
4145   1A81 11            mov a, b
4146   1A82 26 00 00      mov b, $0
4147   1A85 B0            cmp a, b
4148   1A86 FD 81         sgu ; > (unsigned)
4149   1A88 E4            pop a
4150   1A89             ; END RELATIONAL
4151   1A89 C0 00 00      cmp b, 0
4152   1A8C C6 D6 1A      je _while60_exit
4153   1A8F             _while60_block:
4154   1A8F             ;; digits[i] = '0' + (num % 10); 
4155   1A8F FA FC FF      lea d, [bp + -4] ; $digits
4156   1A92 D7            push a
4157   1A93 DA            push d
4158   1A94 FA FA FF      lea d, [bp + -6] ; $i
4159   1A97 2A            mov b, [d]
4160   1A98 E7            pop d
4161   1A99 5A            add d, b
4162   1A9A E4            pop a
4163   1A9B DA            push d
4164   1A9C 26 30 00      mov b, $30
4165   1A9F             ; START TERMS
4166   1A9F D7            push a
4167   1AA0 11            mov a, b
4168   1AA1 FA 05 00      lea d, [bp + 5] ; $num
4169   1AA4 2A            mov b, [d]
4170   1AA5             ; START FACTORS
4171   1AA5 D7            push a
4172   1AA6 11            mov a, b
4173   1AA7 26 0A 00      mov b, $a
4174   1AAA AE            div a, b ; 
4175   1AAB 11            mov a, b
4176   1AAC 27            mov b, a
4177   1AAD E4            pop a
4178   1AAE             ; END FACTORS
4179   1AAE 56            add b, a
4180   1AAF E4            pop a
4181   1AB0             ; END TERMS
4182   1AB0 E7            pop d
4183   1AB1 FD 3E         mov [d], bl
4184   1AB3             ;; num = num / 10; 
4185   1AB3 FA 05 00      lea d, [bp + 5] ; $num
4186   1AB6 DA            push d
4187   1AB7 FA 05 00      lea d, [bp + 5] ; $num
4188   1ABA 2A            mov b, [d]
4189   1ABB             ; START FACTORS
4190   1ABB D7            push a
4191   1ABC 11            mov a, b
4192   1ABD 26 0A 00      mov b, $a
4193   1AC0 AE            div a, b
4194   1AC1 27            mov b, a
4195   1AC2 E4            pop a
4196   1AC3             ; END FACTORS
4197   1AC3 E7            pop d
4198   1AC4 FD 43         mov [d], b
4199   1AC6             ;; i++; 
4200   1AC6 FA FA FF      lea d, [bp + -6] ; $i
4201   1AC9 2A            mov b, [d]
4202   1ACA D8            push b
4203   1ACB FD 77         inc b
4204   1ACD FA FA FF      lea d, [bp + -6] ; $i
4205   1AD0 FD 43         mov [d], b
4206   1AD2 E5            pop b
4207   1AD3 0A 7C 1A      jmp _while60_cond
4208   1AD6             _while60_exit:
4209   1AD6             ;; while (i > 0) { 
4210   1AD6             _while61_cond:
4211   1AD6 FA FA FF      lea d, [bp + -6] ; $i
4212   1AD9 2A            mov b, [d]
4213   1ADA             ; START RELATIONAL
4214   1ADA D7            push a
4215   1ADB 11            mov a, b
4216   1ADC 26 00 00      mov b, $0
4217   1ADF B0            cmp a, b
4218   1AE0 FD 7F         sgt ; >
4219   1AE2 E4            pop a
4220   1AE3             ; END RELATIONAL
4221   1AE3 C0 00 00      cmp b, 0
4222   1AE6 C6 0F 1B      je _while61_exit
4223   1AE9             _while61_block:
4224   1AE9             ;; i--; 
4225   1AE9 FA FA FF      lea d, [bp + -6] ; $i
4226   1AEC 2A            mov b, [d]
4227   1AED D8            push b
4228   1AEE FD 7D         dec b
4229   1AF0 FA FA FF      lea d, [bp + -6] ; $i
4230   1AF3 FD 43         mov [d], b
4231   1AF5 E5            pop b
4232   1AF6             ;; putchar(digits[i]); 
4233   1AF6 FA FC FF      lea d, [bp + -4] ; $digits
4234   1AF9 D7            push a
4235   1AFA DA            push d
4236   1AFB FA FA FF      lea d, [bp + -6] ; $i
4237   1AFE 2A            mov b, [d]
4238   1AFF E7            pop d
4239   1B00 5A            add d, b
4240   1B01 E4            pop a
4241   1B02 32            mov bl, [d]
4242   1B03 A7 00         mov bh, 0
4243   1B05 DD            push bl
4244   1B06 07 1A 1B      call putchar
4245   1B09 51 01 00      add sp, 1
4246   1B0C 0A D6 1A      jmp _while61_cond
4247   1B0F             _while61_exit:
4248   1B0F F9            leave
4249   1B10 09            ret
4250   1B11             
4251   1B11             date:
4252   1B11 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4253   1B14             
4254   1B14             ; --- BEGIN INLINE ASM BLOCK
4255   1B14 19 00         mov al, 0 
4256   1B16 05 07         syscall sys_datetime
4257   1B18             ; --- END INLINE ASM BLOCK
4258   1B18             
4259   1B18 F9            leave
4260   1B19 09            ret
4261   1B1A             
4262   1B1A             putchar:
4263   1B1A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4264   1B1D             
4265   1B1D             ; --- BEGIN INLINE ASM BLOCK
4266   1B1D FA 05 00      lea d, [bp + 5] ; $c
4267   1B20 1E            mov al, [d]
4268   1B21 23            mov ah, al
4269   1B22 07 FB 1C      call _putchar
4270   1B25             ; --- END INLINE ASM BLOCK
4271   1B25             
4272   1B25 F9            leave
4273   1B26 09            ret
4274   1B27             
4275   1B27             getchar:
4276   1B27 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4277   1B2A             ; $c 
4278   1B2A 52 01 00      sub sp, 1
4279   1B2D             
4280   1B2D             ; --- BEGIN INLINE ASM BLOCK
4281   1B2D 07 F4 1C      call getch
4282   1B30 1A            mov al, ah
4283   1B31 FA 00 00      lea d, [bp + 0] ; $c
4284   1B34 3E            mov [d], al
4285   1B35             ; --- END INLINE ASM BLOCK
4286   1B35             
4287   1B35             ;; return c; 
4288   1B35 FA 00 00      lea d, [bp + 0] ; $c
4289   1B38 32            mov bl, [d]
4290   1B39 A7 00         mov bh, 0
4291   1B3B F9            leave
4292   1B3C 09            ret
4293   1B3D             
4294   1B3D             scann:
4295   1B3D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4296   1B40             ; $m 
4297   1B40 52 02 00      sub sp, 2
4298   1B43             
4299   1B43             ; --- BEGIN INLINE ASM BLOCK
4300   1B43 07 3F 1F      call scan_u16d
4301   1B46 FA FF FF      lea d, [bp + -1] ; $m
4302   1B49 43            mov [d], a
4303   1B4A             ; --- END INLINE ASM BLOCK
4304   1B4A             
4305   1B4A             ;; return m; 
4306   1B4A FA FF FF      lea d, [bp + -1] ; $m
4307   1B4D 2A            mov b, [d]
4308   1B4E F9            leave
4309   1B4F 09            ret
4310   1B50             
4311   1B50             puts:
4312   1B50 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4313   1B53             
4314   1B53             ; --- BEGIN INLINE ASM BLOCK
4315   1B53 FA 05 00      lea d, [bp + 5] ; $s
4316   1B56 15            mov a, [d]
4317   1B57 3C            mov d, a
4318   1B58 07 45 1E      call _puts
4319   1B5B 10 00 0A      mov a, $0A00
4320   1B5E 05 03         syscall sys_io
4321   1B60             ; --- END INLINE ASM BLOCK
4322   1B60             
4323   1B60 F9            leave
4324   1B61 09            ret
4325   1B62             
4326   1B62             print:
4327   1B62 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4328   1B65             
4329   1B65             ; --- BEGIN INLINE ASM BLOCK
4330   1B65 FA 05 00      lea d, [bp + 5] ; $s
4331   1B68 FD 2A         mov d, [d]
4332   1B6A 07 45 1E      call _puts
4333   1B6D             ; --- END INLINE ASM BLOCK
4334   1B6D             
4335   1B6D F9            leave
4336   1B6E 09            ret
4337   1B6F             
4338   1B6F             loadfile:
4339   1B6F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4340   1B72             
4341   1B72             ; --- BEGIN INLINE ASM BLOCK
4342   1B72 FA 07 00      lea d, [bp + 7] ; $destination
4343   1B75 15            mov a, [d]
4344   1B76 4F            mov di, a
4345   1B77 FA 05 00      lea d, [bp + 5] ; $filename
4346   1B7A FD 2A         mov d, [d]
4347   1B7C 19 14         mov al, 20
4348   1B7E 05 04         syscall sys_filesystem
4349   1B80             ; --- END INLINE ASM BLOCK
4350   1B80             
4351   1B80 F9            leave
4352   1B81 09            ret
4353   1B82             
4354   1B82             create_file:
4355   1B82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4356   1B85 F9            leave
4357   1B86 09            ret
4358   1B87             
4359   1B87             delete_file:
4360   1B87 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4361   1B8A             
4362   1B8A             ; --- BEGIN INLINE ASM BLOCK
4363   1B8A FA 05 00      lea d, [bp + 5] ; $filename
4364   1B8D 19 0A         mov al, 10
4365   1B8F 05 04         syscall sys_filesystem
4366   1B91             ; --- END INLINE ASM BLOCK
4367   1B91             
4368   1B91 F9            leave
4369   1B92 09            ret
4370   1B93             
4371   1B93             fopen:
4372   1B93 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4373   1B96 F9            leave
4374   1B97 09            ret
4375   1B98             
4376   1B98             fclose:
4377   1B98 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4378   1B9B F9            leave
4379   1B9C 09            ret
4380   1B9D             
4381   1B9D             load_hex:
4382   1B9D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4383   1BA0             ; $temp 
4384   1BA0 52 02 00      sub sp, 2
4385   1BA3             ;; temp = alloc(32768); 
4386   1BA3 FA FF FF      lea d, [bp + -1] ; $temp
4387   1BA6 DA            push d
4388   1BA7 26 00 80      mov b, $8000
4389   1BAA FD AB         swp b
4390   1BAC D8            push b
4391   1BAD 07 82 09      call alloc
4392   1BB0 51 02 00      add sp, 2
4393   1BB3 E7            pop d
4394   1BB4 FD 43         mov [d], b
4395   1BB6             
4396   1BB6             ; --- BEGIN INLINE ASM BLOCK
4397   1BB6               
4398   1BB6               
4399   1BB6               
4400   1BB6               
4401   1BB6               
4402   1BB6             _load_hex:
4403   1BB6 D7            push a
4404   1BB7 D8            push b
4405   1BB8 DA            push d
4406   1BB9 E2            push si
4407   1BBA E3            push di
4408   1BBB 52 00 80      sub sp, $8000      
4409   1BBE 38 00 00      mov c, 0
4410   1BC1 48            mov a, sp
4411   1BC2 77            inc a
4412   1BC3 3C            mov d, a          
4413   1BC4 07 02 1D      call _gets        
4414   1BC7 4D            mov si, a
4415   1BC8             __load_hex_loop:
4416   1BC8 F6            lodsb             
4417   1BC9 B9 00         cmp al, 0         
4418   1BCB C6 D9 1B      jz __load_hex_ret
4419   1BCE 36            mov bh, al
4420   1BCF F6            lodsb
4421   1BD0 2F            mov bl, al
4422   1BD1 07 B8 1C      call _atoi        
4423   1BD4 F7            stosb             
4424   1BD5 78            inc c
4425   1BD6 0A C8 1B      jmp __load_hex_loop
4426   1BD9             __load_hex_ret:
4427   1BD9 51 00 80      add sp, $8000
4428   1BDC F0            pop di
4429   1BDD EF            pop si
4430   1BDE E7            pop d
4431   1BDF E5            pop b
4432   1BE0 E4            pop a
4433   1BE1             ; --- END INLINE ASM BLOCK
4434   1BE1             
4435   1BE1 F9            leave
4436   1BE2 09            ret
4437   1BE3             
4438   1BE3             getparam:
4439   1BE3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4440   1BE6             ; $data 
4441   1BE6 52 01 00      sub sp, 1
4442   1BE9             
4443   1BE9             ; --- BEGIN INLINE ASM BLOCK
4444   1BE9 19 04         mov al, 4
4445   1BEB FA 05 00      lea d, [bp + 5] ; $address
4446   1BEE FD 2A         mov d, [d]
4447   1BF0 05 0C         syscall sys_system
4448   1BF2 FA 00 00      lea d, [bp + 0] ; $data
4449   1BF5 FD 3E         mov [d], bl
4450   1BF7             ; --- END INLINE ASM BLOCK
4451   1BF7             
4452   1BF7             ;; return data; 
4453   1BF7 FA 00 00      lea d, [bp + 0] ; $data
4454   1BFA 32            mov bl, [d]
4455   1BFB A7 00         mov bh, 0
4456   1BFD F9            leave
4457   1BFE 09            ret
4458   1BFF             
4459   1BFF             clear:
4460   1BFF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4461   1C02             ;; print("\033[2J\033[H"); 
4462   1C02 26 C2 2C      mov b, __s8 ; "\033[2J\033[H"
4463   1C05 FD AB         swp b
4464   1C07 D8            push b
4465   1C08 07 62 1B      call print
4466   1C0B 51 02 00      add sp, 2
4467   1C0E F9            leave
4468   1C0F 09            ret
4469   1C10             
4470   1C10             include_stdio_asm:
4471   1C10 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4472   1C13             
4473   1C13             ; --- BEGIN INLINE ASM BLOCK
4474   1C13             .include "lib/asm/stdio.asm"
0001+  1C13             ;-----------------------------------------------------------------------------
0002+  1C13             ; stdio.s
0003+  1C13             ;-----------------------------------------------------------------------------
0004+  1C13             .include "lib/asm/string.asm"
0001++ 1C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1C13             ; string.s
0003++ 1C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1C13             
0005++ 1C13             
0006++ 1C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1C13             ; _strrev
0008++ 1C13             ; reverse a string
0009++ 1C13             ; D = string address
0010++ 1C13             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1C13             ; 01234
0012++ 1C13             _strrev:
0013++ 1C13 4B          	pusha
0014++ 1C14 07 5A 1C    	call _strlen	; length in C
0015++ 1C17 12          	mov a, c
0016++ 1C18 AF 01 00    	cmp a, 1
0017++ 1C1B D0 35 1C    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1C1E 7D          	dec a
0019++ 1C1F FD 4E       	mov si, d	; beginning of string
0020++ 1C21 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1C23 59          	add d, a	; end of string
0022++ 1C24 12          	mov a, c
0023++ 1C25 FD 9B       	shr a		; divide by 2
0024++ 1C27 39          	mov c, a	; C now counts the steps
0025++ 1C28             _strrev_L0:
0026++ 1C28 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1C29 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1C2A 3E          	mov [d], al	; store left char into right side
0029++ 1C2B 1B          	mov al, bl
0030++ 1C2C F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1C2D 7E          	dec c
0032++ 1C2E 7F          	dec d
0033++ 1C2F C2 00 00    	cmp c, 0
0034++ 1C32 C7 28 1C    	jne _strrev_L0
0035++ 1C35             _strrev_end:
0036++ 1C35 4C          	popa
0037++ 1C36 09          	ret
0038++ 1C37             	
0039++ 1C37             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1C37             ; _strchr
0041++ 1C37             ; search string in D for char in AL
0042++ 1C37             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1C37             _strchr:
0044++ 1C37             _strchr_L0:
0045++ 1C37 32          	mov bl, [d]
0046++ 1C38 C1 00       	cmp bl, 0
0047++ 1C3A C6 45 1C    	je _strchr_end
0048++ 1C3D BA          	cmp al, bl
0049++ 1C3E C6 45 1C    	je _strchr_end
0050++ 1C41 79          	inc d
0051++ 1C42 0A 37 1C    	jmp _strchr_L0
0052++ 1C45             _strchr_end:
0053++ 1C45 1B          	mov al, bl
0054++ 1C46 09          	ret
0055++ 1C47             
0056++ 1C47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1C47             ; _strstr
0058++ 1C47             ; find sub-string
0059++ 1C47             ; str1 in SI
0060++ 1C47             ; str2 in DI
0061++ 1C47             ; SI points to end of source string
0062++ 1C47             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1C47             _strstr:
0064++ 1C47 DB          	push al
0065++ 1C48 DA          	push d
0066++ 1C49 E3          	push di
0067++ 1C4A             _strstr_loop:
0068++ 1C4A F3          	cmpsb					; compare a byte of the strings
0069++ 1C4B C7 56 1C    	jne _strstr_ret
0070++ 1C4E FC 00 00    	lea d, [di + 0]
0071++ 1C51 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1C53 C7 4A 1C    	jne _strstr_loop				; equal chars but not at end
0073++ 1C56             _strstr_ret:
0074++ 1C56 F0          	pop di
0075++ 1C57 E7          	pop d
0076++ 1C58 E8          	pop al
0077++ 1C59 09          	ret
0078++ 1C5A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1C5A             ; length of null terminated string
0080++ 1C5A             ; result in C
0081++ 1C5A             ; pointer in D
0082++ 1C5A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1C5A             _strlen:
0084++ 1C5A DA          	push d
0085++ 1C5B 38 00 00    	mov c, 0
0086++ 1C5E             _strlen_L1:
0087++ 1C5E BD 00       	cmp byte [d], 0
0088++ 1C60 C6 68 1C    	je _strlen_ret
0089++ 1C63 79          	inc d
0090++ 1C64 78          	inc c
0091++ 1C65 0A 5E 1C    	jmp _strlen_L1
0092++ 1C68             _strlen_ret:
0093++ 1C68 E7          	pop d
0094++ 1C69 09          	ret
0095++ 1C6A             
0096++ 1C6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1C6A             ; STRCMP
0098++ 1C6A             ; compare two strings
0099++ 1C6A             ; str1 in SI
0100++ 1C6A             ; str2 in DI
0101++ 1C6A             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1C6A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1C6A             _strcmp:
0104++ 1C6A DB          	push al
0105++ 1C6B DA          	push d
0106++ 1C6C E3          	push di
0107++ 1C6D E2          	push si
0108++ 1C6E             _strcmp_loop:
0109++ 1C6E F3          	cmpsb					; compare a byte of the strings
0110++ 1C6F C7 7A 1C    	jne _strcmp_ret
0111++ 1C72 FB FF FF    	lea d, [si +- 1]
0112++ 1C75 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1C77 C7 6E 1C    	jne _strcmp_loop				; equal chars but not at end
0114++ 1C7A             _strcmp_ret:
0115++ 1C7A EF          	pop si
0116++ 1C7B F0          	pop di
0117++ 1C7C E7          	pop d
0118++ 1C7D E8          	pop al
0119++ 1C7E 09          	ret
0120++ 1C7F             
0121++ 1C7F             
0122++ 1C7F             ; STRCPY
0123++ 1C7F             ; copy null terminated string from SI to DI
0124++ 1C7F             ; source in SI
0125++ 1C7F             ; destination in DI
0126++ 1C7F             _strcpy:
0127++ 1C7F E2          	push si
0128++ 1C80 E3          	push di
0129++ 1C81 DB          	push al
0130++ 1C82             _strcpy_L1:
0131++ 1C82 F6          	lodsb
0132++ 1C83 F7          	stosb
0133++ 1C84 B9 00       	cmp al, 0
0134++ 1C86 C7 82 1C    	jne _strcpy_L1
0135++ 1C89             _strcpy_end:
0136++ 1C89 E8          	pop al
0137++ 1C8A F0          	pop di
0138++ 1C8B EF          	pop si
0139++ 1C8C 09          	ret
0140++ 1C8D             
0141++ 1C8D             ; STRCAT
0142++ 1C8D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1C8D             ; source in SI
0144++ 1C8D             ; destination in DI
0145++ 1C8D             _strcat:
0146++ 1C8D E2          	push si
0147++ 1C8E E3          	push di
0148++ 1C8F D7          	push a
0149++ 1C90 DA          	push d
0150++ 1C91 50          	mov a, di
0151++ 1C92 3C          	mov d, a
0152++ 1C93             _strcat_goto_end_L1:
0153++ 1C93 BD 00       	cmp byte[d], 0
0154++ 1C95 C6 9C 1C    	je _strcat_start
0155++ 1C98 79          	inc d
0156++ 1C99 0A 93 1C    	jmp _strcat_goto_end_L1
0157++ 1C9C             _strcat_start:
0158++ 1C9C FD 50       	mov di, d
0159++ 1C9E             _strcat_L1:
0160++ 1C9E F6          	lodsb
0161++ 1C9F F7          	stosb
0162++ 1CA0 B9 00       	cmp al, 0
0163++ 1CA2 C7 9E 1C    	jne _strcat_L1
0164++ 1CA5             _strcat_end:
0165++ 1CA5 E7          	pop d
0166++ 1CA6 E4          	pop a
0167++ 1CA7 F0          	pop di
0168++ 1CA8 EF          	pop si
0169++ 1CA9 09          	ret
0170++ 1CAA             
0171++ 1CAA             
0005+  1CAA             
0006+  1CAA             ;-----------------------------------------------------------------------------
0007+  1CAA             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1CAA             ; ASCII in BL
0009+  1CAA             ; result in AL
0010+  1CAA             ; ascii for F = 0100 0110
0011+  1CAA             ; ascii for 9 = 0011 1001
0012+  1CAA             ;-----------------------------------------------------------------------------
0013+  1CAA             hex_ascii_encode:
0014+  1CAA 1B            mov al, bl
0015+  1CAB 93 40         test al, $40        ; test if letter or number
0016+  1CAD C7 B3 1C      jnz hex_letter
0017+  1CB0 87 0F         and al, $0F        ; get number
0018+  1CB2 09            ret
0019+  1CB3             hex_letter:
0020+  1CB3 87 0F         and al, $0F        ; get letter
0021+  1CB5 6A 09         add al, 9
0022+  1CB7 09            ret
0023+  1CB8             
0024+  1CB8             ;-----------------------------------------------------------------------------
0025+  1CB8             ; ATOI
0026+  1CB8             ; 2 letter hex string in B
0027+  1CB8             ; 8bit integer returned in AL
0028+  1CB8             ;-----------------------------------------------------------------------------
0029+  1CB8             _atoi:
0030+  1CB8 D8            push b
0031+  1CB9 07 AA 1C      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1CBC 30            mov bl, bh
0033+  1CBD DB            push al          ; save a
0034+  1CBE 07 AA 1C      call hex_ascii_encode
0035+  1CC1 EA            pop bl  
0036+  1CC2 FD 9E 04      shl al, 4
0037+  1CC5 8C            or al, bl
0038+  1CC6 E5            pop b
0039+  1CC7 09            ret  
0040+  1CC8             
0041+  1CC8             ;-----------------------------------------------------------------------------
0042+  1CC8             ; scanf
0043+  1CC8             ; no need for explanations!
0044+  1CC8             ;-----------------------------------------------------------------------------
0045+  1CC8             scanf:
0046+  1CC8 09            ret
0047+  1CC9             
0048+  1CC9             ;-----------------------------------------------------------------------------
0049+  1CC9             ; ITOA
0050+  1CC9             ; 8bit value in BL
0051+  1CC9             ; 2 byte ASCII result in A
0052+  1CC9             ;-----------------------------------------------------------------------------
0053+  1CC9             _itoa:
0054+  1CC9 DA            push d
0055+  1CCA D8            push b
0056+  1CCB A7 00         mov bh, 0
0057+  1CCD FD A4 04      shr bl, 4  
0058+  1CD0 74            mov d, b
0059+  1CD1 1F 79 1F      mov al, [d + s_hex_digits]
0060+  1CD4 23            mov ah, al
0061+  1CD5               
0062+  1CD5 E5            pop b
0063+  1CD6 D8            push b
0064+  1CD7 A7 00         mov bh, 0
0065+  1CD9 FD 87 0F      and bl, $0F
0066+  1CDC 74            mov d, b
0067+  1CDD 1F 79 1F      mov al, [d + s_hex_digits]
0068+  1CE0 E5            pop b
0069+  1CE1 E7            pop d
0070+  1CE2 09            ret
0071+  1CE3             
0072+  1CE3             ;-----------------------------------------------------------------------------
0073+  1CE3             ; HEX STRING TO BINARY
0074+  1CE3             ; di = destination address
0075+  1CE3             ; si = source
0076+  1CE3             ;-----------------------------------------------------------------------------
0077+  1CE3             _hex_to_int:
0078+  1CE3             _hex_to_int_L1:
0079+  1CE3 F6            lodsb          ; load from [SI] to AL
0080+  1CE4 B9 00         cmp al, 0        ; check if ASCII 0
0081+  1CE6 C6 F3 1C      jz _hex_to_int_ret
0082+  1CE9 36            mov bh, al
0083+  1CEA F6            lodsb
0084+  1CEB 2F            mov bl, al
0085+  1CEC 07 B8 1C      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  1CEF F7            stosb          ; store AL to [DI]
0087+  1CF0 0A E3 1C      jmp _hex_to_int_L1
0088+  1CF3             _hex_to_int_ret:
0089+  1CF3 09            ret    
0090+  1CF4             
0091+  1CF4             ;-----------------------------------------------------------------------------
0092+  1CF4             ; GETCHAR
0093+  1CF4             ; char in ah
0094+  1CF4             ;-----------------------------------------------------------------------------
0095+  1CF4             getch:
0096+  1CF4 DB            push al
0097+  1CF5             getch_retry:
0098+  1CF5 19 01         mov al, 1
0099+  1CF7 05 03         syscall sys_io      ; receive in AH
0100+  1CF9 E8            pop al
0101+  1CFA 09            ret
0102+  1CFB             
0103+  1CFB             ;-----------------------------------------------------------------------------
0104+  1CFB             ; PUTCHAR
0105+  1CFB             ; char in ah
0106+  1CFB             ;-----------------------------------------------------------------------------
0107+  1CFB             _putchar:
0108+  1CFB D7            push a
0109+  1CFC 19 00         mov al, 0
0110+  1CFE 05 03         syscall sys_io      ; char in AH
0111+  1D00 E4            pop a
0112+  1D01 09            ret
0113+  1D02             
0114+  1D02             ;-----------------------------------------------------------------------------
0115+  1D02             ;; INPUT A STRING
0116+  1D02             ;; terminates with null
0117+  1D02             ;; pointer in D
0118+  1D02             ;-----------------------------------------------------------------------------
0119+  1D02             _gets:
0120+  1D02 D7            push a
0121+  1D03 DA            push d
0122+  1D04             _gets_loop:
0123+  1D04 19 01         mov al, 1
0124+  1D06 05 03         syscall sys_io      ; receive in AH
0125+  1D08 B9 00         cmp al, 0        ; check error code (AL)
0126+  1D0A C6 04 1D      je _gets_loop      ; if no char received, retry
0127+  1D0D             
0128+  1D0D 76 1B         cmp ah, 27
0129+  1D0F C6 30 1D      je _gets_ansi_esc
0130+  1D12 76 0A         cmp ah, $0A        ; LF
0131+  1D14 C6 9B 1D      je _gets_end
0132+  1D17 76 0D         cmp ah, $0D        ; CR
0133+  1D19 C6 9B 1D      je _gets_end
0134+  1D1C 76 5C         cmp ah, $5C        ; '\\'
0135+  1D1E C6 5C 1D      je _gets_escape
0136+  1D21               
0137+  1D21 76 08         cmp ah, $08      ; check for backspace
0138+  1D23 C6 2C 1D      je _gets_backspace
0139+  1D26             
0140+  1D26 1A            mov al, ah
0141+  1D27 3E            mov [d], al
0142+  1D28 79            inc d
0143+  1D29 0A 04 1D      jmp _gets_loop
0144+  1D2C             _gets_backspace:
0145+  1D2C 7F            dec d
0146+  1D2D 0A 04 1D      jmp _gets_loop
0147+  1D30             _gets_ansi_esc:
0148+  1D30 19 01         mov al, 1
0149+  1D32 05 03         syscall sys_io        ; receive in AH without echo
0150+  1D34 B9 00         cmp al, 0          ; check error code (AL)
0151+  1D36 C6 30 1D      je _gets_ansi_esc    ; if no char received, retry
0152+  1D39 76 5B         cmp ah, '['
0153+  1D3B C7 04 1D      jne _gets_loop
0154+  1D3E             _gets_ansi_esc_2:
0155+  1D3E 19 01         mov al, 1
0156+  1D40 05 03         syscall sys_io          ; receive in AH without echo
0157+  1D42 B9 00         cmp al, 0            ; check error code (AL)
0158+  1D44 C6 3E 1D      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1D47 76 44         cmp ah, 'D'
0160+  1D49 C6 54 1D      je _gets_left_arrow
0161+  1D4C 76 43         cmp ah, 'C'
0162+  1D4E C6 58 1D      je _gets_right_arrow
0163+  1D51 0A 04 1D      jmp _gets_loop
0164+  1D54             _gets_left_arrow:
0165+  1D54 7F            dec d
0166+  1D55 0A 04 1D      jmp _gets_loop
0167+  1D58             _gets_right_arrow:
0168+  1D58 79            inc d
0169+  1D59 0A 04 1D      jmp _gets_loop
0170+  1D5C             _gets_escape:
0171+  1D5C 19 01         mov al, 1
0172+  1D5E 05 03         syscall sys_io      ; receive in AH
0173+  1D60 B9 00         cmp al, 0        ; check error code (AL)
0174+  1D62 C6 5C 1D      je _gets_escape      ; if no char received, retry
0175+  1D65 76 6E         cmp ah, 'n'
0176+  1D67 C6 86 1D      je _gets_LF
0177+  1D6A 76 72         cmp ah, 'r'
0178+  1D6C C6 8D 1D      je _gets_CR
0179+  1D6F 76 30         cmp ah, '0'
0180+  1D71 C6 94 1D      je _gets_NULL
0181+  1D74 76 5C         cmp ah, $5C  ; '\'
0182+  1D76 C6 7F 1D      je _gets_slash
0183+  1D79 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1D7A 3E            mov [d], al
0185+  1D7B 79            inc d
0186+  1D7C 0A 04 1D      jmp _gets_loop
0187+  1D7F             _gets_slash:
0188+  1D7F 19 5C         mov al, $5C
0189+  1D81 3E            mov [d], al
0190+  1D82 79            inc d
0191+  1D83 0A 04 1D      jmp _gets_loop
0192+  1D86             _gets_LF:
0193+  1D86 19 0A         mov al, $0A
0194+  1D88 3E            mov [d], al
0195+  1D89 79            inc d
0196+  1D8A 0A 04 1D      jmp _gets_loop
0197+  1D8D             _gets_CR:
0198+  1D8D 19 0D         mov al, $0D
0199+  1D8F 3E            mov [d], al
0200+  1D90 79            inc d
0201+  1D91 0A 04 1D      jmp _gets_loop
0202+  1D94             _gets_NULL:
0203+  1D94 19 00         mov al, $00
0204+  1D96 3E            mov [d], al
0205+  1D97 79            inc d
0206+  1D98 0A 04 1D      jmp _gets_loop
0207+  1D9B             _gets_end:
0208+  1D9B 19 00         mov al, 0
0209+  1D9D 3E            mov [d], al        ; terminate string
0210+  1D9E E7            pop d
0211+  1D9F E4            pop a
0212+  1DA0 09            ret
0213+  1DA1             
0214+  1DA1             ;-----------------------------------------------------------------------------
0215+  1DA1             ;; INPUT TEXT
0216+  1DA1             ;; terminated with CTRL+D
0217+  1DA1             ;; pointer in D
0218+  1DA1             ;-----------------------------------------------------------------------------
0219+  1DA1             _gettxt:
0220+  1DA1 D7            push a
0221+  1DA2 DA            push d
0222+  1DA3             _gettxt_loop:
0223+  1DA3 19 01         mov al, 1
0224+  1DA5 05 03         syscall sys_io      ; receive in AH
0225+  1DA7 B9 00         cmp al, 0        ; check error code (AL)
0226+  1DA9 C6 A3 1D      je _gettxt_loop    ; if no char received, retry
0227+  1DAC 76 04         cmp ah, 4      ; EOT
0228+  1DAE C6 EC 1D      je _gettxt_end
0229+  1DB1 76 08         cmp ah, $08      ; check for backspace
0230+  1DB3 C6 E8 1D      je _gettxt_backspace
0231+  1DB6 76 5C         cmp ah, $5C        ; '\'
0232+  1DB8 C6 C1 1D      je _gettxt_escape
0233+  1DBB 1A            mov al, ah
0234+  1DBC 3E            mov [d], al
0235+  1DBD 79            inc d
0236+  1DBE 0A A3 1D      jmp _gettxt_loop
0237+  1DC1             _gettxt_escape:
0238+  1DC1 19 01         mov al, 1
0239+  1DC3 05 03         syscall sys_io      ; receive in AH
0240+  1DC5 B9 00         cmp al, 0        ; check error code (AL)
0241+  1DC7 C6 C1 1D      je _gettxt_escape    ; if no char received, retry
0242+  1DCA 76 6E         cmp ah, 'n'
0243+  1DCC C6 DA 1D      je _gettxt_LF
0244+  1DCF 76 72         cmp ah, 'r'
0245+  1DD1 C6 E1 1D      je _gettxt_CR
0246+  1DD4 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  1DD5 3E            mov [d], al
0248+  1DD6 79            inc d
0249+  1DD7 0A A3 1D      jmp _gettxt_loop
0250+  1DDA             _gettxt_LF:
0251+  1DDA 19 0A         mov al, $0A
0252+  1DDC 3E            mov [d], al
0253+  1DDD 79            inc d
0254+  1DDE 0A A3 1D      jmp _gettxt_loop
0255+  1DE1             _gettxt_CR:
0256+  1DE1 19 0D         mov al, $0D
0257+  1DE3 3E            mov [d], al
0258+  1DE4 79            inc d
0259+  1DE5 0A A3 1D      jmp _gettxt_loop
0260+  1DE8             _gettxt_backspace:
0261+  1DE8 7F            dec d
0262+  1DE9 0A A3 1D      jmp _gettxt_loop
0263+  1DEC             _gettxt_end:
0264+  1DEC 19 00         mov al, 0
0265+  1DEE 3E            mov [d], al        ; terminate string
0266+  1DEF E7            pop d
0267+  1DF0 E4            pop a
0268+  1DF1 09            ret
0269+  1DF2             
0270+  1DF2             ;-----------------------------------------------------------------------------
0271+  1DF2             ; PRINT NEW LINE
0272+  1DF2             ;-----------------------------------------------------------------------------
0273+  1DF2             printnl:
0274+  1DF2 D7            push a
0275+  1DF3 10 00 0A      mov a, $0A00
0276+  1DF6 05 03         syscall sys_io
0277+  1DF8 10 00 0D      mov a, $0D00
0278+  1DFB 05 03         syscall sys_io
0279+  1DFD E4            pop a
0280+  1DFE 09            ret
0281+  1DFF             
0282+  1DFF             ;-----------------------------------------------------------------------------
0283+  1DFF             ; _strtoint
0284+  1DFF             ; 4 digit hex string number in d
0285+  1DFF             ; integer returned in A
0286+  1DFF             ;-----------------------------------------------------------------------------
0287+  1DFF             _strtointx:
0288+  1DFF D8            push b
0289+  1E00 32            mov bl, [d]
0290+  1E01 37            mov bh, bl
0291+  1E02 33 01 00      mov bl, [d + 1]
0292+  1E05 07 B8 1C      call _atoi        ; convert to int in AL
0293+  1E08 23            mov ah, al        ; move to AH
0294+  1E09 33 02 00      mov bl, [d + 2]
0295+  1E0C 37            mov bh, bl
0296+  1E0D 33 03 00      mov bl, [d + 3]
0297+  1E10 07 B8 1C      call _atoi        ; convert to int in AL
0298+  1E13 E5            pop b
0299+  1E14 09            ret
0300+  1E15             
0301+  1E15             ;-----------------------------------------------------------------------------
0302+  1E15             ; _strtoint
0303+  1E15             ; 5 digit base10 string number in d
0304+  1E15             ; integer returned in A
0305+  1E15             ;-----------------------------------------------------------------------------
0306+  1E15             _strtoint:
0307+  1E15 E2            push si
0308+  1E16 D8            push b
0309+  1E17 D9            push c
0310+  1E18 DA            push d
0311+  1E19 07 5A 1C      call _strlen      ; get string length in C
0312+  1E1C 7E            dec c
0313+  1E1D FD 4E         mov si, d
0314+  1E1F 12            mov a, c
0315+  1E20 FD 99         shl a
0316+  1E22 3B 91 1F      mov d, table_power
0317+  1E25 59            add d, a
0318+  1E26 38 00 00      mov c, 0
0319+  1E29             _strtoint_L0:
0320+  1E29 F6            lodsb      ; load ASCII to al
0321+  1E2A B9 00         cmp al, 0
0322+  1E2C C6 3F 1E      je _strtoint_end
0323+  1E2F 6F 30         sub al, $30    ; make into integer
0324+  1E31 22 00         mov ah, 0
0325+  1E33 2A            mov b, [d]
0326+  1E34 AC            mul a, b      ; result in B since it fits in 16bits
0327+  1E35 11            mov a, b
0328+  1E36 28            mov b, c
0329+  1E37 54            add a, b
0330+  1E38 39            mov c, a
0331+  1E39 63 02 00      sub d, 2
0332+  1E3C 0A 29 1E      jmp _strtoint_L0
0333+  1E3F             _strtoint_end:
0334+  1E3F 12            mov a, c
0335+  1E40 E7            pop d
0336+  1E41 E6            pop c
0337+  1E42 E5            pop b
0338+  1E43 EF            pop si
0339+  1E44 09            ret
0340+  1E45             
0341+  1E45             ;-----------------------------------------------------------------------------
0342+  1E45             ; PRINT NULL TERMINATED STRING
0343+  1E45             ; pointer in D
0344+  1E45             ;-----------------------------------------------------------------------------
0345+  1E45             _puts:
0346+  1E45 D7            push a
0347+  1E46 DA            push d
0348+  1E47             _puts_L1:
0349+  1E47 1E            mov al, [d]
0350+  1E48 B9 00         cmp al, 0
0351+  1E4A C6 56 1E      jz _puts_END
0352+  1E4D 23            mov ah, al
0353+  1E4E 19 00         mov al, 0
0354+  1E50 05 03         syscall sys_io
0355+  1E52 79            inc d
0356+  1E53 0A 47 1E      jmp _puts_L1
0357+  1E56             _puts_END:
0358+  1E56 E7            pop d
0359+  1E57 E4            pop a
0360+  1E58 09            ret
0361+  1E59             
0362+  1E59             ;-----------------------------------------------------------------------------
0363+  1E59             ; PRINT N SIZE STRING
0364+  1E59             ; pointer in D
0365+  1E59             ; size in C
0366+  1E59             ;-----------------------------------------------------------------------------
0367+  1E59             _putsn:
0368+  1E59 DB            push al
0369+  1E5A DA            push d
0370+  1E5B D9            push c
0371+  1E5C             _putsn_L0:
0372+  1E5C 1E            mov al, [d]
0373+  1E5D 23            mov ah, al
0374+  1E5E 19 00         mov al, 0
0375+  1E60 05 03         syscall sys_io
0376+  1E62 79            inc d
0377+  1E63 7E            dec c  
0378+  1E64 C2 00 00      cmp c, 0
0379+  1E67 C7 5C 1E      jne _putsn_L0
0380+  1E6A             _putsn_end:
0381+  1E6A E6            pop c
0382+  1E6B E7            pop d
0383+  1E6C E8            pop al
0384+  1E6D 09            ret
0385+  1E6E             
0386+  1E6E             ;-----------------------------------------------------------------------------
0387+  1E6E             ; print 16bit decimal number
0388+  1E6E             ; input number in A
0389+  1E6E             ;-----------------------------------------------------------------------------
0390+  1E6E             print_u16d:
0391+  1E6E D7            push a
0392+  1E6F D8            push b
0393+  1E70 26 10 27      mov b, 10000
0394+  1E73 AE            div a, b      ; get 10000's coeff.
0395+  1E74 07 96 1E      call print_number
0396+  1E77 11            mov a, b
0397+  1E78 26 E8 03      mov b, 1000
0398+  1E7B AE            div a, b      ; get 1000's coeff.
0399+  1E7C 07 96 1E      call print_number
0400+  1E7F 11            mov a, b
0401+  1E80 26 64 00      mov b, 100
0402+  1E83 AE            div a, b
0403+  1E84 07 96 1E      call print_number
0404+  1E87 11            mov a, b
0405+  1E88 26 0A 00      mov b, 10
0406+  1E8B AE            div a, b
0407+  1E8C 07 96 1E      call print_number
0408+  1E8F 1B            mov al, bl      ; 1's coeff in bl
0409+  1E90 07 96 1E      call print_number
0410+  1E93 E5            pop b
0411+  1E94 E4            pop a
0412+  1E95 09            ret
0413+  1E96             
0414+  1E96             ;-----------------------------------------------------------------------------
0415+  1E96             ; print AL
0416+  1E96             ;-----------------------------------------------------------------------------
0417+  1E96             print_number:
0418+  1E96 6A 30         add al, $30
0419+  1E98 23            mov ah, al
0420+  1E99 07 FB 1C      call _putchar
0421+  1E9C 09            ret
0422+  1E9D             
0423+  1E9D             ;-----------------------------------------------------------------------------
0424+  1E9D             ; PRINT 16BIT HEX INTEGER
0425+  1E9D             ; integer value in reg B
0426+  1E9D             ;-----------------------------------------------------------------------------
0427+  1E9D             print_u16x:
0428+  1E9D D7            push a
0429+  1E9E D8            push b
0430+  1E9F DD            push bl
0431+  1EA0 30            mov bl, bh
0432+  1EA1 07 C9 1C      call _itoa        ; convert bh to char in A
0433+  1EA4 2F            mov bl, al        ; save al
0434+  1EA5 19 00         mov al, 0
0435+  1EA7 05 03         syscall sys_io        ; display AH
0436+  1EA9 24            mov ah, bl        ; retrieve al
0437+  1EAA 19 00         mov al, 0
0438+  1EAC 05 03         syscall sys_io        ; display AL
0439+  1EAE             
0440+  1EAE EA            pop bl
0441+  1EAF 07 C9 1C      call _itoa        ; convert bh to char in A
0442+  1EB2 2F            mov bl, al        ; save al
0443+  1EB3 19 00         mov al, 0
0444+  1EB5 05 03         syscall sys_io        ; display AH
0445+  1EB7 24            mov ah, bl        ; retrieve al
0446+  1EB8 19 00         mov al, 0
0447+  1EBA 05 03         syscall sys_io        ; display AL
0448+  1EBC             
0449+  1EBC E5            pop b
0450+  1EBD E4            pop a
0451+  1EBE 09            ret
0452+  1EBF             
0453+  1EBF             ;-----------------------------------------------------------------------------
0454+  1EBF             ; INPUT 16BIT HEX INTEGER
0455+  1EBF             ; read 16bit integer into A
0456+  1EBF             ;-----------------------------------------------------------------------------
0457+  1EBF             scan_u16x:
0458+  1EBF F8 10 00      enter 16
0459+  1EC2 D8            push b
0460+  1EC3 DA            push d
0461+  1EC4             
0462+  1EC4 FA F1 FF      lea d, [bp + -15]
0463+  1EC7 07 02 1D      call _gets        ; get number
0464+  1ECA             
0465+  1ECA 32            mov bl, [d]
0466+  1ECB 37            mov bh, bl
0467+  1ECC 33 01 00      mov bl, [d + 1]
0468+  1ECF 07 B8 1C      call _atoi        ; convert to int in AL
0469+  1ED2 23            mov ah, al        ; move to AH
0470+  1ED3             
0471+  1ED3 33 02 00      mov bl, [d + 2]
0472+  1ED6 37            mov bh, bl
0473+  1ED7 33 03 00      mov bl, [d + 3]
0474+  1EDA 07 B8 1C      call _atoi        ; convert to int in AL
0475+  1EDD             
0476+  1EDD E7            pop d
0477+  1EDE E5            pop b
0478+  1EDF F9            leave
0479+  1EE0 09            ret
0480+  1EE1             
0481+  1EE1             ;-----------------------------------------------------------------------------
0482+  1EE1             ; PRINT 8bit HEX INTEGER
0483+  1EE1             ; integer value in reg bl
0484+  1EE1             ;-----------------------------------------------------------------------------
0485+  1EE1             print_u8x:
0486+  1EE1 D7            push a
0487+  1EE2 DD            push bl
0488+  1EE3             
0489+  1EE3 07 C9 1C      call _itoa        ; convert bl to char in A
0490+  1EE6 2F            mov bl, al        ; save al
0491+  1EE7 19 00         mov al, 0
0492+  1EE9 05 03         syscall sys_io        ; display AH
0493+  1EEB 24            mov ah, bl        ; retrieve al
0494+  1EEC 19 00         mov al, 0
0495+  1EEE 05 03         syscall sys_io        ; display AL
0496+  1EF0             
0497+  1EF0 EA            pop bl
0498+  1EF1 E4            pop a
0499+  1EF2 09            ret
0500+  1EF3             
0501+  1EF3             ;-----------------------------------------------------------------------------
0502+  1EF3             ; print 8bit decimal unsigned number
0503+  1EF3             ; input number in AL
0504+  1EF3             ;-----------------------------------------------------------------------------
0505+  1EF3             print_u8d:
0506+  1EF3 D7            push a
0507+  1EF4 D8            push b
0508+  1EF5             
0509+  1EF5 22 00         mov ah, 0
0510+  1EF7 26 64 00      mov b, 100
0511+  1EFA AE            div a, b
0512+  1EFB D8            push b      ; save remainder
0513+  1EFC B9 00         cmp al, 0
0514+  1EFE C6 08 1F      je skip100
0515+  1F01 6A 30         add al, $30
0516+  1F03 23            mov ah, al
0517+  1F04 19 00         mov al, 0
0518+  1F06 05 03         syscall sys_io  ; print coeff
0519+  1F08             skip100:
0520+  1F08 E4            pop a
0521+  1F09 22 00         mov ah, 0
0522+  1F0B 26 0A 00      mov b, 10
0523+  1F0E AE            div a, b
0524+  1F0F D8            push b      ; save remainder
0525+  1F10 B9 00         cmp al, 0
0526+  1F12 C6 1C 1F      je skip10
0527+  1F15 6A 30         add al, $30
0528+  1F17 23            mov ah, al
0529+  1F18 19 00         mov al, 0
0530+  1F1A 05 03         syscall sys_io  ; print coeff
0531+  1F1C             skip10:
0532+  1F1C E4            pop a
0533+  1F1D 1B            mov al, bl
0534+  1F1E 6A 30         add al, $30
0535+  1F20 23            mov ah, al
0536+  1F21 19 00         mov al, 0
0537+  1F23 05 03         syscall sys_io  ; print coeff
0538+  1F25 E5            pop b
0539+  1F26 E4            pop a
0540+  1F27 09            ret
0541+  1F28             
0542+  1F28             ;-----------------------------------------------------------------------------
0543+  1F28             ; INPUT 8BIT HEX INTEGER
0544+  1F28             ; read 8bit integer into AL
0545+  1F28             ;-----------------------------------------------------------------------------
0546+  1F28             scan_u8x:
0547+  1F28 F8 04 00      enter 4
0548+  1F2B D8            push b
0549+  1F2C DA            push d
0550+  1F2D             
0551+  1F2D FA FD FF      lea d, [bp + -3]
0552+  1F30 07 02 1D      call _gets        ; get number
0553+  1F33             
0554+  1F33 32            mov bl, [d]
0555+  1F34 37            mov bh, bl
0556+  1F35 33 01 00      mov bl, [d + 1]
0557+  1F38 07 B8 1C      call _atoi        ; convert to int in AL
0558+  1F3B             
0559+  1F3B E7            pop d
0560+  1F3C E5            pop b
0561+  1F3D F9            leave
0562+  1F3E 09            ret
0563+  1F3F             
0564+  1F3F             ;-----------------------------------------------------------------------------
0565+  1F3F             ; input decimal number
0566+  1F3F             ; result in A
0567+  1F3F             ; 655'\0'
0568+  1F3F             ; low--------high
0569+  1F3F             ;-----------------------------------------------------------------------------
0570+  1F3F             scan_u16d:
0571+  1F3F F8 08 00      enter 8
0572+  1F42 E2            push si
0573+  1F43 D8            push b
0574+  1F44 D9            push c
0575+  1F45 DA            push d
0576+  1F46 FA F9 FF      lea d, [bp +- 7]
0577+  1F49 07 02 1D      call _gets
0578+  1F4C 07 5A 1C      call _strlen      ; get string length in C
0579+  1F4F 7E            dec c
0580+  1F50 FD 4E         mov si, d
0581+  1F52 12            mov a, c
0582+  1F53 FD 99         shl a
0583+  1F55 3B 91 1F      mov d, table_power
0584+  1F58 59            add d, a
0585+  1F59 38 00 00      mov c, 0
0586+  1F5C             mul_loop:
0587+  1F5C F6            lodsb      ; load ASCII to al
0588+  1F5D B9 00         cmp al, 0
0589+  1F5F C6 72 1F      je mul_exit
0590+  1F62 6F 30         sub al, $30    ; make into integer
0591+  1F64 22 00         mov ah, 0
0592+  1F66 2A            mov b, [d]
0593+  1F67 AC            mul a, b      ; result in B since it fits in 16bits
0594+  1F68 11            mov a, b
0595+  1F69 28            mov b, c
0596+  1F6A 54            add a, b
0597+  1F6B 39            mov c, a
0598+  1F6C 63 02 00      sub d, 2
0599+  1F6F 0A 5C 1F      jmp mul_loop
0600+  1F72             mul_exit:
0601+  1F72 12            mov a, c
0602+  1F73 E7            pop d
0603+  1F74 E6            pop c
0604+  1F75 E5            pop b
0605+  1F76 EF            pop si
0606+  1F77 F9            leave
0607+  1F78 09            ret
0608+  1F79             
0609+  1F79 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1F7D 34 35 36 37 
0609+  1F81 38 39 41 42 
0609+  1F85 43 44 45 46 
0610+  1F89 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1F8D 1B 5B 48 00 
0611+  1F91             
0612+  1F91             table_power:
0613+  1F91 01 00         .dw 1
0614+  1F93 0A 00         .dw 10
0615+  1F95 64 00         .dw 100
0616+  1F97 E8 03         .dw 1000
0617+  1F99 10 27         .dw 100004475   1F9B             ; --- END INLINE ASM BLOCK
4476   1F9B             
4477   1F9B F9            leave
4478   1F9C 09            ret
4479   1F9D             
4480   1F9D             show:
4481   1F9D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4482   1FA0             ; $i 
4483   1FA0             ; $j 
4484   1FA0 52 04 00      sub sp, 4
4485   1FA3             ;; for(i = 0; i <   30     ; i++){ 
4486   1FA3             _for62_init:
4487   1FA3 FA FF FF      lea d, [bp + -1] ; $i
4488   1FA6 DA            push d
4489   1FA7 26 00 00      mov b, $0
4490   1FAA E7            pop d
4491   1FAB FD 43         mov [d], b
4492   1FAD             _for62_cond:
4493   1FAD FA FF FF      lea d, [bp + -1] ; $i
4494   1FB0 2A            mov b, [d]
4495   1FB1             ; START RELATIONAL
4496   1FB1 D7            push a
4497   1FB2 11            mov a, b
4498   1FB3 26 1E 00      mov b, $1e
4499   1FB6 B0            cmp a, b
4500   1FB7 FD 73         slt ; <= (signed)
4501   1FB9 E4            pop a
4502   1FBA             ; END RELATIONAL
4503   1FBA C0 00 00      cmp b, 0
4504   1FBD C6 44 20      je _for62_exit
4505   1FC0             _for62_block:
4506   1FC0             ;; for(j = 0; j <    40    ; j++){ 
4507   1FC0             _for63_init:
4508   1FC0 FA FD FF      lea d, [bp + -3] ; $j
4509   1FC3 DA            push d
4510   1FC4 26 00 00      mov b, $0
4511   1FC7 E7            pop d
4512   1FC8 FD 43         mov [d], b
4513   1FCA             _for63_cond:
4514   1FCA FA FD FF      lea d, [bp + -3] ; $j
4515   1FCD 2A            mov b, [d]
4516   1FCE             ; START RELATIONAL
4517   1FCE D7            push a
4518   1FCF 11            mov a, b
4519   1FD0 26 28 00      mov b, $28
4520   1FD3 B0            cmp a, b
4521   1FD4 FD 73         slt ; <= (signed)
4522   1FD6 E4            pop a
4523   1FD7             ; END RELATIONAL
4524   1FD7 C0 00 00      cmp b, 0
4525   1FDA C6 2A 20      je _for63_exit
4526   1FDD             _for63_block:
4527   1FDD             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
4528   1FDD             _ternary64_cond:
4529   1FDD 3B A8 27      mov d, _currState_data ; $currState
4530   1FE0 D7            push a
4531   1FE1 DA            push d
4532   1FE2 FA FF FF      lea d, [bp + -1] ; $i
4533   1FE5 2A            mov b, [d]
4534   1FE6 E7            pop d
4535   1FE7 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4536   1FEB DA            push d
4537   1FEC FA FD FF      lea d, [bp + -3] ; $j
4538   1FEF 2A            mov b, [d]
4539   1FF0 E7            pop d
4540   1FF1 5A            add d, b
4541   1FF2 E4            pop a
4542   1FF3 32            mov bl, [d]
4543   1FF4 A7 00         mov bh, 0
4544   1FF6             ; START RELATIONAL
4545   1FF6 D7            push a
4546   1FF7 11            mov a, b
4547   1FF8 26 40 00      mov b, $40
4548   1FFB B0            cmp a, b
4549   1FFC FD 71         seq ; ==
4550   1FFE E4            pop a
4551   1FFF             ; END RELATIONAL
4552   1FFF C0 00 00      cmp b, 0
4553   2002 C6 11 20      je _ternary64_false
4554   2005             _ternary64_true:
4555   2005 26 CA 2C      mov b, __s9 ; "@ "
4556   2008 FD AB         swp b
4557   200A D8            push b
4558   200B 07 2B 13      call printf
4559   200E 0A 1A 20      jmp _ternary64_exit
4560   2011             _ternary64_false:
4561   2011 26 CD 2C      mov b, __s10 ; ". "
4562   2014 FD AB         swp b
4563   2016 D8            push b
4564   2017 07 2B 13      call printf
4565   201A             _ternary64_exit:
4566   201A             _for63_update:
4567   201A FA FD FF      lea d, [bp + -3] ; $j
4568   201D 2A            mov b, [d]
4569   201E D8            push b
4570   201F FD 77         inc b
4571   2021 FA FD FF      lea d, [bp + -3] ; $j
4572   2024 FD 43         mov [d], b
4573   2026 E5            pop b
4574   2027 0A CA 1F      jmp _for63_cond
4575   202A             _for63_exit:
4576   202A             ;; putchar(10); 
4577   202A 26 0A 00      mov b, $a
4578   202D DD            push bl
4579   202E 07 1A 1B      call putchar
4580   2031 51 01 00      add sp, 1
4581   2034             _for62_update:
4582   2034 FA FF FF      lea d, [bp + -1] ; $i
4583   2037 2A            mov b, [d]
4584   2038 D8            push b
4585   2039 FD 77         inc b
4586   203B FA FF FF      lea d, [bp + -1] ; $i
4587   203E FD 43         mov [d], b
4588   2040 E5            pop b
4589   2041 0A AD 1F      jmp _for62_cond
4590   2044             _for62_exit:
4591   2044 F9            leave
4592   2045 09            ret
4593   2046             
4594   2046             alive:
4595   2046 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4596   2049             ;; if(currState[i][j] == '@') return 1; 
4597   2049             _if65_cond:
4598   2049 3B A8 27      mov d, _currState_data ; $currState
4599   204C D7            push a
4600   204D DA            push d
4601   204E FA 05 00      lea d, [bp + 5] ; $i
4602   2051 2A            mov b, [d]
4603   2052 E7            pop d
4604   2053 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4605   2057 DA            push d
4606   2058 FA 07 00      lea d, [bp + 7] ; $j
4607   205B 2A            mov b, [d]
4608   205C E7            pop d
4609   205D 5A            add d, b
4610   205E E4            pop a
4611   205F 32            mov bl, [d]
4612   2060 A7 00         mov bh, 0
4613   2062             ; START RELATIONAL
4614   2062 D7            push a
4615   2063 11            mov a, b
4616   2064 26 40 00      mov b, $40
4617   2067 B0            cmp a, b
4618   2068 FD 71         seq ; ==
4619   206A E4            pop a
4620   206B             ; END RELATIONAL
4621   206B C0 00 00      cmp b, 0
4622   206E C6 79 20      je _if65_else
4623   2071             _if65_true:
4624   2071             ;; return 1; 
4625   2071 26 01 00      mov b, $1
4626   2074 F9            leave
4627   2075 09            ret
4628   2076 0A 7E 20      jmp _if65_exit
4629   2079             _if65_else:
4630   2079             ;; return 0; 
4631   2079 26 00 00      mov b, $0
4632   207C F9            leave
4633   207D 09            ret
4634   207E             _if65_exit:
4635   207E F9            leave
4636   207F 09            ret
4637   2080             
4638   2080             neighbours:
4639   2080 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4640   2083             ; $count 
4641   2083 52 02 00      sub sp, 2
4642   2086             ;; count = 0; 
4643   2086 FA FF FF      lea d, [bp + -1] ; $count
4644   2089 DA            push d
4645   208A 26 00 00      mov b, $0
4646   208D E7            pop d
4647   208E FD 43         mov [d], b
4648   2090             ;; if(currState[i+-1][j] == '@')			count++; 
4649   2090             _if66_cond:
4650   2090 3B A8 27      mov d, _currState_data ; $currState
4651   2093 D7            push a
4652   2094 DA            push d
4653   2095 FA 05 00      lea d, [bp + 5] ; $i
4654   2098 2A            mov b, [d]
4655   2099             ; START TERMS
4656   2099 D7            push a
4657   209A 11            mov a, b
4658   209B 26 FF FF      mov b, $ffff
4659   209E 56            add b, a
4660   209F E4            pop a
4661   20A0             ; END TERMS
4662   20A0 E7            pop d
4663   20A1 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4664   20A5 DA            push d
4665   20A6 FA 07 00      lea d, [bp + 7] ; $j
4666   20A9 2A            mov b, [d]
4667   20AA E7            pop d
4668   20AB 5A            add d, b
4669   20AC E4            pop a
4670   20AD 32            mov bl, [d]
4671   20AE A7 00         mov bh, 0
4672   20B0             ; START RELATIONAL
4673   20B0 D7            push a
4674   20B1 11            mov a, b
4675   20B2 26 40 00      mov b, $40
4676   20B5 B0            cmp a, b
4677   20B6 FD 71         seq ; ==
4678   20B8 E4            pop a
4679   20B9             ; END RELATIONAL
4680   20B9 C0 00 00      cmp b, 0
4681   20BC C6 CF 20      je _if66_exit
4682   20BF             _if66_true:
4683   20BF             ;; count++; 
4684   20BF FA FF FF      lea d, [bp + -1] ; $count
4685   20C2 2A            mov b, [d]
4686   20C3 D8            push b
4687   20C4 FD 77         inc b
4688   20C6 FA FF FF      lea d, [bp + -1] ; $count
4689   20C9 FD 43         mov [d], b
4690   20CB E5            pop b
4691   20CC 0A CF 20      jmp _if66_exit
4692   20CF             _if66_exit:
4693   20CF             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
4694   20CF             _if67_cond:
4695   20CF 3B A8 27      mov d, _currState_data ; $currState
4696   20D2 D7            push a
4697   20D3 DA            push d
4698   20D4 FA 05 00      lea d, [bp + 5] ; $i
4699   20D7 2A            mov b, [d]
4700   20D8             ; START TERMS
4701   20D8 D7            push a
4702   20D9 11            mov a, b
4703   20DA 26 FF FF      mov b, $ffff
4704   20DD 56            add b, a
4705   20DE E4            pop a
4706   20DF             ; END TERMS
4707   20DF E7            pop d
4708   20E0 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4709   20E4 DA            push d
4710   20E5 FA 07 00      lea d, [bp + 7] ; $j
4711   20E8 2A            mov b, [d]
4712   20E9             ; START TERMS
4713   20E9 D7            push a
4714   20EA 11            mov a, b
4715   20EB 26 FF FF      mov b, $ffff
4716   20EE 56            add b, a
4717   20EF E4            pop a
4718   20F0             ; END TERMS
4719   20F0 E7            pop d
4720   20F1 5A            add d, b
4721   20F2 E4            pop a
4722   20F3 32            mov bl, [d]
4723   20F4 A7 00         mov bh, 0
4724   20F6             ; START RELATIONAL
4725   20F6 D7            push a
4726   20F7 11            mov a, b
4727   20F8 26 40 00      mov b, $40
4728   20FB B0            cmp a, b
4729   20FC FD 71         seq ; ==
4730   20FE E4            pop a
4731   20FF             ; END RELATIONAL
4732   20FF C0 00 00      cmp b, 0
4733   2102 C6 15 21      je _if67_exit
4734   2105             _if67_true:
4735   2105             ;; count++; 
4736   2105 FA FF FF      lea d, [bp + -1] ; $count
4737   2108 2A            mov b, [d]
4738   2109 D8            push b
4739   210A FD 77         inc b
4740   210C FA FF FF      lea d, [bp + -1] ; $count
4741   210F FD 43         mov [d], b
4742   2111 E5            pop b
4743   2112 0A 15 21      jmp _if67_exit
4744   2115             _if67_exit:
4745   2115             ;; if(currState[i+-1][j+1] == '@') 	count++; 
4746   2115             _if68_cond:
4747   2115 3B A8 27      mov d, _currState_data ; $currState
4748   2118 D7            push a
4749   2119 DA            push d
4750   211A FA 05 00      lea d, [bp + 5] ; $i
4751   211D 2A            mov b, [d]
4752   211E             ; START TERMS
4753   211E D7            push a
4754   211F 11            mov a, b
4755   2120 26 FF FF      mov b, $ffff
4756   2123 56            add b, a
4757   2124 E4            pop a
4758   2125             ; END TERMS
4759   2125 E7            pop d
4760   2126 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4761   212A DA            push d
4762   212B FA 07 00      lea d, [bp + 7] ; $j
4763   212E 2A            mov b, [d]
4764   212F             ; START TERMS
4765   212F D7            push a
4766   2130 11            mov a, b
4767   2131 26 01 00      mov b, $1
4768   2134 56            add b, a
4769   2135 E4            pop a
4770   2136             ; END TERMS
4771   2136 E7            pop d
4772   2137 5A            add d, b
4773   2138 E4            pop a
4774   2139 32            mov bl, [d]
4775   213A A7 00         mov bh, 0
4776   213C             ; START RELATIONAL
4777   213C D7            push a
4778   213D 11            mov a, b
4779   213E 26 40 00      mov b, $40
4780   2141 B0            cmp a, b
4781   2142 FD 71         seq ; ==
4782   2144 E4            pop a
4783   2145             ; END RELATIONAL
4784   2145 C0 00 00      cmp b, 0
4785   2148 C6 5B 21      je _if68_exit
4786   214B             _if68_true:
4787   214B             ;; count++; 
4788   214B FA FF FF      lea d, [bp + -1] ; $count
4789   214E 2A            mov b, [d]
4790   214F D8            push b
4791   2150 FD 77         inc b
4792   2152 FA FF FF      lea d, [bp + -1] ; $count
4793   2155 FD 43         mov [d], b
4794   2157 E5            pop b
4795   2158 0A 5B 21      jmp _if68_exit
4796   215B             _if68_exit:
4797   215B             ;; if(currState[i][j+-1] == '@') 		count++; 
4798   215B             _if69_cond:
4799   215B 3B A8 27      mov d, _currState_data ; $currState
4800   215E D7            push a
4801   215F DA            push d
4802   2160 FA 05 00      lea d, [bp + 5] ; $i
4803   2163 2A            mov b, [d]
4804   2164 E7            pop d
4805   2165 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4806   2169 DA            push d
4807   216A FA 07 00      lea d, [bp + 7] ; $j
4808   216D 2A            mov b, [d]
4809   216E             ; START TERMS
4810   216E D7            push a
4811   216F 11            mov a, b
4812   2170 26 FF FF      mov b, $ffff
4813   2173 56            add b, a
4814   2174 E4            pop a
4815   2175             ; END TERMS
4816   2175 E7            pop d
4817   2176 5A            add d, b
4818   2177 E4            pop a
4819   2178 32            mov bl, [d]
4820   2179 A7 00         mov bh, 0
4821   217B             ; START RELATIONAL
4822   217B D7            push a
4823   217C 11            mov a, b
4824   217D 26 40 00      mov b, $40
4825   2180 B0            cmp a, b
4826   2181 FD 71         seq ; ==
4827   2183 E4            pop a
4828   2184             ; END RELATIONAL
4829   2184 C0 00 00      cmp b, 0
4830   2187 C6 9A 21      je _if69_exit
4831   218A             _if69_true:
4832   218A             ;; count++; 
4833   218A FA FF FF      lea d, [bp + -1] ; $count
4834   218D 2A            mov b, [d]
4835   218E D8            push b
4836   218F FD 77         inc b
4837   2191 FA FF FF      lea d, [bp + -1] ; $count
4838   2194 FD 43         mov [d], b
4839   2196 E5            pop b
4840   2197 0A 9A 21      jmp _if69_exit
4841   219A             _if69_exit:
4842   219A             ;; if(currState[i][j+1] == '@') 			count++; 
4843   219A             _if70_cond:
4844   219A 3B A8 27      mov d, _currState_data ; $currState
4845   219D D7            push a
4846   219E DA            push d
4847   219F FA 05 00      lea d, [bp + 5] ; $i
4848   21A2 2A            mov b, [d]
4849   21A3 E7            pop d
4850   21A4 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4851   21A8 DA            push d
4852   21A9 FA 07 00      lea d, [bp + 7] ; $j
4853   21AC 2A            mov b, [d]
4854   21AD             ; START TERMS
4855   21AD D7            push a
4856   21AE 11            mov a, b
4857   21AF 26 01 00      mov b, $1
4858   21B2 56            add b, a
4859   21B3 E4            pop a
4860   21B4             ; END TERMS
4861   21B4 E7            pop d
4862   21B5 5A            add d, b
4863   21B6 E4            pop a
4864   21B7 32            mov bl, [d]
4865   21B8 A7 00         mov bh, 0
4866   21BA             ; START RELATIONAL
4867   21BA D7            push a
4868   21BB 11            mov a, b
4869   21BC 26 40 00      mov b, $40
4870   21BF B0            cmp a, b
4871   21C0 FD 71         seq ; ==
4872   21C2 E4            pop a
4873   21C3             ; END RELATIONAL
4874   21C3 C0 00 00      cmp b, 0
4875   21C6 C6 D9 21      je _if70_exit
4876   21C9             _if70_true:
4877   21C9             ;; count++; 
4878   21C9 FA FF FF      lea d, [bp + -1] ; $count
4879   21CC 2A            mov b, [d]
4880   21CD D8            push b
4881   21CE FD 77         inc b
4882   21D0 FA FF FF      lea d, [bp + -1] ; $count
4883   21D3 FD 43         mov [d], b
4884   21D5 E5            pop b
4885   21D6 0A D9 21      jmp _if70_exit
4886   21D9             _if70_exit:
4887   21D9             ;; if(currState[i+1][j+-1] == '@') 	count++; 
4888   21D9             _if71_cond:
4889   21D9 3B A8 27      mov d, _currState_data ; $currState
4890   21DC D7            push a
4891   21DD DA            push d
4892   21DE FA 05 00      lea d, [bp + 5] ; $i
4893   21E1 2A            mov b, [d]
4894   21E2             ; START TERMS
4895   21E2 D7            push a
4896   21E3 11            mov a, b
4897   21E4 26 01 00      mov b, $1
4898   21E7 56            add b, a
4899   21E8 E4            pop a
4900   21E9             ; END TERMS
4901   21E9 E7            pop d
4902   21EA FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4903   21EE DA            push d
4904   21EF FA 07 00      lea d, [bp + 7] ; $j
4905   21F2 2A            mov b, [d]
4906   21F3             ; START TERMS
4907   21F3 D7            push a
4908   21F4 11            mov a, b
4909   21F5 26 FF FF      mov b, $ffff
4910   21F8 56            add b, a
4911   21F9 E4            pop a
4912   21FA             ; END TERMS
4913   21FA E7            pop d
4914   21FB 5A            add d, b
4915   21FC E4            pop a
4916   21FD 32            mov bl, [d]
4917   21FE A7 00         mov bh, 0
4918   2200             ; START RELATIONAL
4919   2200 D7            push a
4920   2201 11            mov a, b
4921   2202 26 40 00      mov b, $40
4922   2205 B0            cmp a, b
4923   2206 FD 71         seq ; ==
4924   2208 E4            pop a
4925   2209             ; END RELATIONAL
4926   2209 C0 00 00      cmp b, 0
4927   220C C6 1F 22      je _if71_exit
4928   220F             _if71_true:
4929   220F             ;; count++; 
4930   220F FA FF FF      lea d, [bp + -1] ; $count
4931   2212 2A            mov b, [d]
4932   2213 D8            push b
4933   2214 FD 77         inc b
4934   2216 FA FF FF      lea d, [bp + -1] ; $count
4935   2219 FD 43         mov [d], b
4936   221B E5            pop b
4937   221C 0A 1F 22      jmp _if71_exit
4938   221F             _if71_exit:
4939   221F             ;; if(currState[i+1][j] == '@') 			count++; 
4940   221F             _if72_cond:
4941   221F 3B A8 27      mov d, _currState_data ; $currState
4942   2222 D7            push a
4943   2223 DA            push d
4944   2224 FA 05 00      lea d, [bp + 5] ; $i
4945   2227 2A            mov b, [d]
4946   2228             ; START TERMS
4947   2228 D7            push a
4948   2229 11            mov a, b
4949   222A 26 01 00      mov b, $1
4950   222D 56            add b, a
4951   222E E4            pop a
4952   222F             ; END TERMS
4953   222F E7            pop d
4954   2230 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4955   2234 DA            push d
4956   2235 FA 07 00      lea d, [bp + 7] ; $j
4957   2238 2A            mov b, [d]
4958   2239 E7            pop d
4959   223A 5A            add d, b
4960   223B E4            pop a
4961   223C 32            mov bl, [d]
4962   223D A7 00         mov bh, 0
4963   223F             ; START RELATIONAL
4964   223F D7            push a
4965   2240 11            mov a, b
4966   2241 26 40 00      mov b, $40
4967   2244 B0            cmp a, b
4968   2245 FD 71         seq ; ==
4969   2247 E4            pop a
4970   2248             ; END RELATIONAL
4971   2248 C0 00 00      cmp b, 0
4972   224B C6 5E 22      je _if72_exit
4973   224E             _if72_true:
4974   224E             ;; count++; 
4975   224E FA FF FF      lea d, [bp + -1] ; $count
4976   2251 2A            mov b, [d]
4977   2252 D8            push b
4978   2253 FD 77         inc b
4979   2255 FA FF FF      lea d, [bp + -1] ; $count
4980   2258 FD 43         mov [d], b
4981   225A E5            pop b
4982   225B 0A 5E 22      jmp _if72_exit
4983   225E             _if72_exit:
4984   225E             ;; if(currState[i+1][j+1] == '@') 		count++; 
4985   225E             _if73_cond:
4986   225E 3B A8 27      mov d, _currState_data ; $currState
4987   2261 D7            push a
4988   2262 DA            push d
4989   2263 FA 05 00      lea d, [bp + 5] ; $i
4990   2266 2A            mov b, [d]
4991   2267             ; START TERMS
4992   2267 D7            push a
4993   2268 11            mov a, b
4994   2269 26 01 00      mov b, $1
4995   226C 56            add b, a
4996   226D E4            pop a
4997   226E             ; END TERMS
4998   226E E7            pop d
4999   226F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
5000   2273 DA            push d
5001   2274 FA 07 00      lea d, [bp + 7] ; $j
5002   2277 2A            mov b, [d]
5003   2278             ; START TERMS
5004   2278 D7            push a
5005   2279 11            mov a, b
5006   227A 26 01 00      mov b, $1
5007   227D 56            add b, a
5008   227E E4            pop a
5009   227F             ; END TERMS
5010   227F E7            pop d
5011   2280 5A            add d, b
5012   2281 E4            pop a
5013   2282 32            mov bl, [d]
5014   2283 A7 00         mov bh, 0
5015   2285             ; START RELATIONAL
5016   2285 D7            push a
5017   2286 11            mov a, b
5018   2287 26 40 00      mov b, $40
5019   228A B0            cmp a, b
5020   228B FD 71         seq ; ==
5021   228D E4            pop a
5022   228E             ; END RELATIONAL
5023   228E C0 00 00      cmp b, 0
5024   2291 C6 A4 22      je _if73_exit
5025   2294             _if73_true:
5026   2294             ;; count++; 
5027   2294 FA FF FF      lea d, [bp + -1] ; $count
5028   2297 2A            mov b, [d]
5029   2298 D8            push b
5030   2299 FD 77         inc b
5031   229B FA FF FF      lea d, [bp + -1] ; $count
5032   229E FD 43         mov [d], b
5033   22A0 E5            pop b
5034   22A1 0A A4 22      jmp _if73_exit
5035   22A4             _if73_exit:
5036   22A4             ;; return count; 
5037   22A4 FA FF FF      lea d, [bp + -1] ; $count
5038   22A7 2A            mov b, [d]
5039   22A8 F9            leave
5040   22A9 09            ret
5041   22AA             ; --- END TEXT BLOCK
5042   22AA             
5043   22AA             ; --- BEGIN DATA BLOCK
5044   22AA 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
5044   22AE 45 46 47 48 
5044   22B2 49 4A 4B 4C 
5044   22B6 4D 4E 4F 50 
5044   22BA 51 52 53 54 
5044   22BE 55 56 57 58 
5044   22C2 59 5A 61 62 
5044   22C6 63 64 65 66 
5044   22CA 67 68 69 6A 
5044   22CE 6B 6C 6D 6E 
5044   22D2 6F 70 71 72 
5044   22D6 73 74 75 76 
5044   22DA 77 78 79 7A 
5044   22DE 30 31 32 33 
5044   22E2 34 35 36 37 
5044   22E6 38 39 2B 2F 
5044   22EA 00 
5045   22EB AA 22       _base64_table: .dw _base64_table_data
5046   22ED             _clear_data: 
5047   22ED 1B 5B 32 4A .db 27,$5b,$32,$4a,27,$5b,$48,0,
5047   22F1 1B 5B 48 00 
5048   22F5 00 00 00    .fill 3, 0
5049   22F8 00 00 00 00 _nextState_data: .fill 1200, 0
5049   22FC 00 00 00 00 
5049   2300 00 00 00 00 
5049   2304 00 00 00 00 
5049   2308 00 00 00 00 
5049   230C 00 00 00 00 
5049   2310 00 00 00 00 
5049   2314 00 00 00 00 
5049   2318 00 00 00 00 
5049   231C 00 00 00 00 
5049   2320 00 00 00 00 
5049   2324 00 00 00 00 
5049   2328 00 00 00 00 
5049   232C 00 00 00 00 
5049   2330 00 00 00 00 
5049   2334 00 00 00 00 
5049   2338 00 00 00 00 
5049   233C 00 00 00 00 
5049   2340 00 00 00 00 
5049   2344 00 00 00 00 
5049   2348 00 00 00 00 
5049   234C 00 00 00 00 
5049   2350 00 00 00 00 
5049   2354 00 00 00 00 
5049   2358 00 00 00 00 
5049   235C 00 00 00 00 
5049   2360 00 00 00 00 
5049   2364 00 00 00 00 
5049   2368 00 00 00 00 
5049   236C 00 00 00 00 
5049   2370 00 00 00 00 
5049   2374 00 00 00 00 
5049   2378 00 00 00 00 
5049   237C 00 00 00 00 
5049   2380 00 00 00 00 
5049   2384 00 00 00 00 
5049   2388 00 00 00 00 
5049   238C 00 00 00 00 
5049   2390 00 00 00 00 
5049   2394 00 00 00 00 
5049   2398 00 00 00 00 
5049   239C 00 00 00 00 
5049   23A0 00 00 00 00 
5049   23A4 00 00 00 00 
5049   23A8 00 00 00 00 
5049   23AC 00 00 00 00 
5049   23B0 00 00 00 00 
5049   23B4 00 00 00 00 
5049   23B8 00 00 00 00 
5049   23BC 00 00 00 00 
5049   23C0 00 00 00 00 
5049   23C4 00 00 00 00 
5049   23C8 00 00 00 00 
5049   23CC 00 00 00 00 
5049   23D0 00 00 00 00 
5049   23D4 00 00 00 00 
5049   23D8 00 00 00 00 
5049   23DC 00 00 00 00 
5049   23E0 00 00 00 00 
5049   23E4 00 00 00 00 
5049   23E8 00 00 00 00 
5049   23EC 00 00 00 00 
5049   23F0 00 00 00 00 
5049   23F4 00 00 00 00 
5049   23F8 00 00 00 00 
5049   23FC 00 00 00 00 
5049   2400 00 00 00 00 
5049   2404 00 00 00 00 
5049   2408 00 00 00 00 
5049   240C 00 00 00 00 
5049   2410 00 00 00 00 
5049   2414 00 00 00 00 
5049   2418 00 00 00 00 
5049   241C 00 00 00 00 
5049   2420 00 00 00 00 
5049   2424 00 00 00 00 
5049   2428 00 00 00 00 
5049   242C 00 00 00 00 
5049   2430 00 00 00 00 
5049   2434 00 00 00 00 
5049   2438 00 00 00 00 
5049   243C 00 00 00 00 
5049   2440 00 00 00 00 
5049   2444 00 00 00 00 
5049   2448 00 00 00 00 
5049   244C 00 00 00 00 
5049   2450 00 00 00 00 
5049   2454 00 00 00 00 
5049   2458 00 00 00 00 
5049   245C 00 00 00 00 
5049   2460 00 00 00 00 
5049   2464 00 00 00 00 
5049   2468 00 00 00 00 
5049   246C 00 00 00 00 
5049   2470 00 00 00 00 
5049   2474 00 00 00 00 
5049   2478 00 00 00 00 
5049   247C 00 00 00 00 
5049   2480 00 00 00 00 
5049   2484 00 00 00 00 
5049   2488 00 00 00 00 
5049   248C 00 00 00 00 
5049   2490 00 00 00 00 
5049   2494 00 00 00 00 
5049   2498 00 00 00 00 
5049   249C 00 00 00 00 
5049   24A0 00 00 00 00 
5049   24A4 00 00 00 00 
5049   24A8 00 00 00 00 
5049   24AC 00 00 00 00 
5049   24B0 00 00 00 00 
5049   24B4 00 00 00 00 
5049   24B8 00 00 00 00 
5049   24BC 00 00 00 00 
5049   24C0 00 00 00 00 
5049   24C4 00 00 00 00 
5049   24C8 00 00 00 00 
5049   24CC 00 00 00 00 
5049   24D0 00 00 00 00 
5049   24D4 00 00 00 00 
5049   24D8 00 00 00 00 
5049   24DC 00 00 00 00 
5049   24E0 00 00 00 00 
5049   24E4 00 00 00 00 
5049   24E8 00 00 00 00 
5049   24EC 00 00 00 00 
5049   24F0 00 00 00 00 
5049   24F4 00 00 00 00 
5049   24F8 00 00 00 00 
5049   24FC 00 00 00 00 
5049   2500 00 00 00 00 
5049   2504 00 00 00 00 
5049   2508 00 00 00 00 
5049   250C 00 00 00 00 
5049   2510 00 00 00 00 
5049   2514 00 00 00 00 
5049   2518 00 00 00 00 
5049   251C 00 00 00 00 
5049   2520 00 00 00 00 
5049   2524 00 00 00 00 
5049   2528 00 00 00 00 
5049   252C 00 00 00 00 
5049   2530 00 00 00 00 
5049   2534 00 00 00 00 
5049   2538 00 00 00 00 
5049   253C 00 00 00 00 
5049   2540 00 00 00 00 
5049   2544 00 00 00 00 
5049   2548 00 00 00 00 
5049   254C 00 00 00 00 
5049   2550 00 00 00 00 
5049   2554 00 00 00 00 
5049   2558 00 00 00 00 
5049   255C 00 00 00 00 
5049   2560 00 00 00 00 
5049   2564 00 00 00 00 
5049   2568 00 00 00 00 
5049   256C 00 00 00 00 
5049   2570 00 00 00 00 
5049   2574 00 00 00 00 
5049   2578 00 00 00 00 
5049   257C 00 00 00 00 
5049   2580 00 00 00 00 
5049   2584 00 00 00 00 
5049   2588 00 00 00 00 
5049   258C 00 00 00 00 
5049   2590 00 00 00 00 
5049   2594 00 00 00 00 
5049   2598 00 00 00 00 
5049   259C 00 00 00 00 
5049   25A0 00 00 00 00 
5049   25A4 00 00 00 00 
5049   25A8 00 00 00 00 
5049   25AC 00 00 00 00 
5049   25B0 00 00 00 00 
5049   25B4 00 00 00 00 
5049   25B8 00 00 00 00 
5049   25BC 00 00 00 00 
5049   25C0 00 00 00 00 
5049   25C4 00 00 00 00 
5049   25C8 00 00 00 00 
5049   25CC 00 00 00 00 
5049   25D0 00 00 00 00 
5049   25D4 00 00 00 00 
5049   25D8 00 00 00 00 
5049   25DC 00 00 00 00 
5049   25E0 00 00 00 00 
5049   25E4 00 00 00 00 
5049   25E8 00 00 00 00 
5049   25EC 00 00 00 00 
5049   25F0 00 00 00 00 
5049   25F4 00 00 00 00 
5049   25F8 00 00 00 00 
5049   25FC 00 00 00 00 
5049   2600 00 00 00 00 
5049   2604 00 00 00 00 
5049   2608 00 00 00 00 
5049   260C 00 00 00 00 
5049   2610 00 00 00 00 
5049   2614 00 00 00 00 
5049   2618 00 00 00 00 
5049   261C 00 00 00 00 
5049   2620 00 00 00 00 
5049   2624 00 00 00 00 
5049   2628 00 00 00 00 
5049   262C 00 00 00 00 
5049   2630 00 00 00 00 
5049   2634 00 00 00 00 
5049   2638 00 00 00 00 
5049   263C 00 00 00 00 
5049   2640 00 00 00 00 
5049   2644 00 00 00 00 
5049   2648 00 00 00 00 
5049   264C 00 00 00 00 
5049   2650 00 00 00 00 
5049   2654 00 00 00 00 
5049   2658 00 00 00 00 
5049   265C 00 00 00 00 
5049   2660 00 00 00 00 
5049   2664 00 00 00 00 
5049   2668 00 00 00 00 
5049   266C 00 00 00 00 
5049   2670 00 00 00 00 
5049   2674 00 00 00 00 
5049   2678 00 00 00 00 
5049   267C 00 00 00 00 
5049   2680 00 00 00 00 
5049   2684 00 00 00 00 
5049   2688 00 00 00 00 
5049   268C 00 00 00 00 
5049   2690 00 00 00 00 
5049   2694 00 00 00 00 
5049   2698 00 00 00 00 
5049   269C 00 00 00 00 
5049   26A0 00 00 00 00 
5049   26A4 00 00 00 00 
5049   26A8 00 00 00 00 
5049   26AC 00 00 00 00 
5049   26B0 00 00 00 00 
5049   26B4 00 00 00 00 
5049   26B8 00 00 00 00 
5049   26BC 00 00 00 00 
5049   26C0 00 00 00 00 
5049   26C4 00 00 00 00 
5049   26C8 00 00 00 00 
5049   26CC 00 00 00 00 
5049   26D0 00 00 00 00 
5049   26D4 00 00 00 00 
5049   26D8 00 00 00 00 
5049   26DC 00 00 00 00 
5049   26E0 00 00 00 00 
5049   26E4 00 00 00 00 
5049   26E8 00 00 00 00 
5049   26EC 00 00 00 00 
5049   26F0 00 00 00 00 
5049   26F4 00 00 00 00 
5049   26F8 00 00 00 00 
5049   26FC 00 00 00 00 
5049   2700 00 00 00 00 
5049   2704 00 00 00 00 
5049   2708 00 00 00 00 
5049   270C 00 00 00 00 
5049   2710 00 00 00 00 
5049   2714 00 00 00 00 
5049   2718 00 00 00 00 
5049   271C 00 00 00 00 
5049   2720 00 00 00 00 
5049   2724 00 00 00 00 
5049   2728 00 00 00 00 
5049   272C 00 00 00 00 
5049   2730 00 00 00 00 
5049   2734 00 00 00 00 
5049   2738 00 00 00 00 
5049   273C 00 00 00 00 
5049   2740 00 00 00 00 
5049   2744 00 00 00 00 
5049   2748 00 00 00 00 
5049   274C 00 00 00 00 
5049   2750 00 00 00 00 
5049   2754 00 00 00 00 
5049   2758 00 00 00 00 
5049   275C 00 00 00 00 
5049   2760 00 00 00 00 
5049   2764 00 00 00 00 
5049   2768 00 00 00 00 
5049   276C 00 00 00 00 
5049   2770 00 00 00 00 
5049   2774 00 00 00 00 
5049   2778 00 00 00 00 
5049   277C 00 00 00 00 
5049   2780 00 00 00 00 
5049   2784 00 00 00 00 
5049   2788 00 00 00 00 
5049   278C 00 00 00 00 
5049   2790 00 00 00 00 
5049   2794 00 00 00 00 
5049   2798 00 00 00 00 
5049   279C 00 00 00 00 
5049   27A0 00 00 00 00 
5049   27A4 00 00 00 00 
5050   27A8             _currState_data: 
5051   27A8 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5051   27AC 20 20 20 20 
5051   27B0 20 20 20 20 
5051   27B4 20 20 20 20 
5051   27B8 20 20 20 20 
5051   27BC 20 20 20 20 
5051   27C0 20 20 20 20 
5051   27C4 20 20 
5052   27C6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5052   27CA 20 20 20 20 
5052   27CE 20 20 20 20 
5052   27D2 20 20 20 20 
5052   27D6 20 20 20 20 
5052   27DA 20 20 20 20 
5052   27DE 20 20 20 20 
5052   27E2 20 20 
5053   27E4 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5053   27E8 20 20 20 20 
5053   27EC 20 20 20 20 
5053   27F0 20 20 20 20 
5053   27F4 20 20 20 20 
5053   27F8 20 20 20 20 
5053   27FC 20 20 20 20 
5053   2800 20 20 
5054   2802 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5054   2806 20 20 20 20 
5054   280A 20 20 20 20 
5054   280E 20 20 20 20 
5054   2812 20 20 20 20 
5054   2816 20 20 20 20 
5054   281A 20 20 20 20 
5054   281E 20 20 
5055   2820 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
5055   2824 20 20 20 20 
5055   2828 20 20 20 20 
5055   282C 20 20 20 20 
5055   2830 20 20 20 20 
5055   2834 20 20 20 20 
5055   2838 20 20 20 40 
5055   283C 20 20 
5056   283E 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5056   2842 20 20 20 20 
5056   2846 20 20 20 20 
5056   284A 20 20 20 20 
5056   284E 20 20 20 20 
5056   2852 20 20 20 20 
5056   2856 20 20 20 20 
5056   285A 20 20 
5057   285C 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5057   2860 20 40 20 40 
5057   2864 20 20 20 20 
5057   2868 20 20 20 20 
5057   286C 20 20 20 20 
5057   2870 20 20 20 20 
5057   2874 20 20 20 20 
5057   2878 20 20 
5058   287A 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
5058   287E 20 40 40 20 
5058   2882 20 20 20 20 
5058   2886 20 40 40 20 
5058   288A 20 20 20 20 
5058   288E 20 20 20 20 
5058   2892 20 20 20 40 
5058   2896 40 20 
5059   2898 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
5059   289C 20 20 20 20 
5059   28A0 20 20 20 20 
5059   28A4 20 20 40 20 
5059   28A8 20 20 40 20 
5059   28AC 20 20 20 40 
5059   28B0 40 20 20 20 
5059   28B4 20 20 
5060   28B6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
5060   28BA 20 20 20 40 
5060   28BE 40 20 20 20 
5060   28C2 20 40 40 20 
5060   28C6 20 20 20 20 
5060   28CA 20 20 20 40 
5060   28CE 20 20 20 20 
5060   28D2 20 40 
5061   28D4 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
5061   28D8 40 20 20 20 
5061   28DC 20 20 20 20 
5061   28E0 20 20 20 20 
5061   28E4 20 20 20 20 
5061   28E8 20 20 20 40 
5061   28EC 40 20 20 20 
5061   28F0 20 20 
5062   28F2 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5062   28F6 20 20 20 40 
5062   28FA 20 40 40 20 
5062   28FE 20 20 20 40 
5062   2902 20 40 20 20 
5062   2906 20 20 20 20 
5062   290A 20 20 20 20 
5062   290E 20 20 
5063   2910 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
5063   2914 20 20 20 20 
5063   2918 20 20 20 20 
5063   291C 20 40 20 20 
5063   2920 20 20 20 40 
5063   2924 20 20 20 20 
5063   2928 20 20 20 40 
5063   292C 20 20 
5064   292E 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
5064   2932 20 20 20 20 
5064   2936 20 20 20 20 
5064   293A 20 20 20 20 
5064   293E 20 20 20 20 
5064   2942 20 20 20 20 
5064   2946 40 20 20 20 
5064   294A 40 20 
5065   294C 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5065   2950 20 20 20 20 
5065   2954 20 20 20 20 
5065   2958 20 20 20 20 
5065   295C 20 20 20 20 
5065   2960 20 20 20 20 
5065   2964 20 20 20 20 
5065   2968 20 20 
5066   296A 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5066   296E 20 40 40 20 
5066   2972 20 20 20 20 
5066   2976 20 20 20 20 
5066   297A 20 20 20 20 
5066   297E 20 20 20 20 
5066   2982 20 20 20 20 
5066   2986 20 20 
5067   2988 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5067   298C 20 20 20 20 
5067   2990 20 20 20 20 
5067   2994 20 20 20 20 
5067   2998 20 20 20 20 
5067   299C 20 20 20 20 
5067   29A0 20 20 20 20 
5067   29A4 20 20 
5068   29A6 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5068   29AA 20 20 20 20 
5068   29AE 20 20 20 20 
5068   29B2 20 20 20 20 
5068   29B6 20 20 20 20 
5068   29BA 20 20 20 20 
5068   29BE 20 20 20 20 
5068   29C2 20 20 
5069   29C4 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5069   29C8 20 20 20 20 
5069   29CC 20 20 20 20 
5069   29D0 20 20 20 20 
5069   29D4 20 20 20 20 
5069   29D8 20 20 20 20 
5069   29DC 20 20 20 20 
5069   29E0 20 20 
5070   29E2 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5070   29E6 20 20 20 20 
5070   29EA 20 20 20 20 
5070   29EE 20 20 20 20 
5070   29F2 20 20 20 20 
5070   29F6 20 20 20 20 
5070   29FA 20 20 20 20 
5070   29FE 20 20 
5071   2A00 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5071   2A04 20 20 20 20 
5071   2A08 20 20 20 20 
5071   2A0C 20 20 20 20 
5071   2A10 20 20 20 20 
5071   2A14 20 20 20 20 
5071   2A18 20 20 20 20 
5071   2A1C 20 20 
5072   2A1E 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5072   2A22 20 20 20 20 
5072   2A26 20 20 20 20 
5072   2A2A 20 20 20 20 
5072   2A2E 20 20 20 20 
5072   2A32 20 20 20 20 
5072   2A36 20 20 20 20 
5072   2A3A 20 20 
5073   2A3C 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5073   2A40 20 20 20 20 
5073   2A44 20 20 20 20 
5073   2A48 20 20 20 20 
5073   2A4C 20 20 20 20 
5073   2A50 20 20 20 20 
5073   2A54 20 20 20 20 
5073   2A58 20 20 
5074   2A5A 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5074   2A5E 20 20 20 20 
5074   2A62 20 20 20 20 
5074   2A66 20 20 20 20 
5074   2A6A 20 20 20 20 
5074   2A6E 20 20 20 20 
5074   2A72 20 20 20 20 
5074   2A76 20 20 
5075   2A78 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5075   2A7C 20 20 20 20 
5075   2A80 20 20 20 20 
5075   2A84 20 20 20 20 
5075   2A88 20 20 20 20 
5075   2A8C 20 20 20 20 
5075   2A90 20 20 20 20 
5075   2A94 20 20 
5076   2A96 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5076   2A9A 20 20 20 20 
5076   2A9E 20 20 20 20 
5076   2AA2 20 20 20 20 
5076   2AA6 20 20 20 20 
5076   2AAA 20 20 20 20 
5076   2AAE 20 20 20 20 
5076   2AB2 20 20 
5077   2AB4 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5077   2AB8 20 20 20 20 
5077   2ABC 20 20 20 20 
5077   2AC0 20 20 20 20 
5077   2AC4 20 20 20 20 
5078   2AC8 00 00 00 00 .fill 400, 0
5078   2ACC 00 00 00 00 
5078   2AD0 00 00 00 00 
5078   2AD4 00 00 00 00 
5078   2AD8 00 00 00 00 
5078   2ADC 00 00 00 00 
5078   2AE0 00 00 00 00 
5078   2AE4 00 00 00 00 
5078   2AE8 00 00 00 00 
5078   2AEC 00 00 00 00 
5078   2AF0 00 00 00 00 
5078   2AF4 00 00 00 00 
5078   2AF8 00 00 00 00 
5078   2AFC 00 00 00 00 
5078   2B00 00 00 00 00 
5078   2B04 00 00 00 00 
5078   2B08 00 00 00 00 
5078   2B0C 00 00 00 00 
5078   2B10 00 00 00 00 
5078   2B14 00 00 00 00 
5078   2B18 00 00 00 00 
5078   2B1C 00 00 00 00 
5078   2B20 00 00 00 00 
5078   2B24 00 00 00 00 
5078   2B28 00 00 00 00 
5078   2B2C 00 00 00 00 
5078   2B30 00 00 00 00 
5078   2B34 00 00 00 00 
5078   2B38 00 00 00 00 
5078   2B3C 00 00 00 00 
5078   2B40 00 00 00 00 
5078   2B44 00 00 00 00 
5078   2B48 00 00 00 00 
5078   2B4C 00 00 00 00 
5078   2B50 00 00 00 00 
5078   2B54 00 00 00 00 
5078   2B58 00 00 00 00 
5078   2B5C 00 00 00 00 
5078   2B60 00 00 00 00 
5078   2B64 00 00 00 00 
5078   2B68 00 00 00 00 
5078   2B6C 00 00 00 00 
5078   2B70 00 00 00 00 
5078   2B74 00 00 00 00 
5078   2B78 00 00 00 00 
5078   2B7C 00 00 00 00 
5078   2B80 00 00 00 00 
5078   2B84 00 00 00 00 
5078   2B88 00 00 00 00 
5078   2B8C 00 00 00 00 
5078   2B90 00 00 00 00 
5078   2B94 00 00 00 00 
5078   2B98 00 00 00 00 
5078   2B9C 00 00 00 00 
5078   2BA0 00 00 00 00 
5078   2BA4 00 00 00 00 
5078   2BA8 00 00 00 00 
5078   2BAC 00 00 00 00 
5078   2BB0 00 00 00 00 
5078   2BB4 00 00 00 00 
5078   2BB8 00 00 00 00 
5078   2BBC 00 00 00 00 
5078   2BC0 00 00 00 00 
5078   2BC4 00 00 00 00 
5078   2BC8 00 00 00 00 
5078   2BCC 00 00 00 00 
5078   2BD0 00 00 00 00 
5078   2BD4 00 00 00 00 
5078   2BD8 00 00 00 00 
5078   2BDC 00 00 00 00 
5078   2BE0 00 00 00 00 
5078   2BE4 00 00 00 00 
5078   2BE8 00 00 00 00 
5078   2BEC 00 00 00 00 
5078   2BF0 00 00 00 00 
5078   2BF4 00 00 00 00 
5078   2BF8 00 00 00 00 
5078   2BFC 00 00 00 00 
5078   2C00 00 00 00 00 
5078   2C04 00 00 00 00 
5078   2C08 00 00 00 00 
5078   2C0C 00 00 00 00 
5078   2C10 00 00 00 00 
5078   2C14 00 00 00 00 
5078   2C18 00 00 00 00 
5078   2C1C 00 00 00 00 
5078   2C20 00 00 00 00 
5078   2C24 00 00 00 00 
5078   2C28 00 00 00 00 
5078   2C2C 00 00 00 00 
5078   2C30 00 00 00 00 
5078   2C34 00 00 00 00 
5078   2C38 00 00 00 00 
5078   2C3C 00 00 00 00 
5078   2C40 00 00 00 00 
5078   2C44 00 00 00 00 
5078   2C48 00 00 00 00 
5078   2C4C 00 00 00 00 
5078   2C50 00 00 00 00 
5078   2C54 00 00 00 00 
5079   2C58 4F 4B 31 00 __s0: .db "OK1", 0
5080   2C5C 4F 4B 32 00 __s1: .db "OK2", 0
5081   2C60 4F 4B 33 00 __s2: .db "OK3", 0
5082   2C64 4F 4B 34 00 __s3: .db "OK4", 0
5083   2C68 4F 4B 35 00 __s4: .db "OK5", 0
5084   2C6C 0A 0D 50 72 __s5: .db "\n\rPress CTRL+C to quit.\n\r", 0
5084   2C70 65 73 73 20 
5084   2C74 43 54 52 4C 
5084   2C78 2B 43 20 74 
5084   2C7C 6F 20 71 75 
5084   2C80 69 74 2E 0A 
5084   2C84 0D 00 
5085   2C86 55 6E 65 78 __s6: .db "Unexpected format in printf.", 0
5085   2C8A 70 65 63 74 
5085   2C8E 65 64 20 66 
5085   2C92 6F 72 6D 61 
5085   2C96 74 20 69 6E 
5085   2C9A 20 70 72 69 
5085   2C9E 6E 74 66 2E 
5085   2CA2 00 
5086   2CA3 45 72 72 6F __s7: .db "Error: Unknown argument type.\n", 0
5086   2CA7 72 3A 20 55 
5086   2CAB 6E 6B 6E 6F 
5086   2CAF 77 6E 20 61 
5086   2CB3 72 67 75 6D 
5086   2CB7 65 6E 74 20 
5086   2CBB 74 79 70 65 
5086   2CBF 2E 0A 00 
5087   2CC2 1B 5B 32 4A __s8: .db "\033[2J\033[H", 0
5087   2CC6 1B 5B 48 00 
5088   2CCA 40 20 00    __s9: .db "@ ", 0
5089   2CCD 2E 20 00    __s10: .db ". ", 0
5090   2CD0             
5091   2CD0 D2 2C       _heap_top: .dw _heap
5092   2CD2 00          _heap: .db 0
5093   2CD3             ; --- END DATA BLOCK
5094   2CD3             
5095   2CD3             .end
tasm: Number of errors = 0
