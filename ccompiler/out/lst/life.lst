0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; int i, j; 
0011   0408 52 02 00      sub sp, 2 ; i
0012   040B 52 02 00      sub sp, 2 ; j
0013   040E             ;; int n; 
0014   040E 52 02 00      sub sp, 2 ; n
0015   0411             ;; for(i = 0; i <   30     ; i++){ 
0016   0411             _for1_init:
0017   0411 FA FF FF      lea d, [bp + -1] ; $i
0018   0414 DA            push d
0019   0415 26 00 00      mov b, $0
0020   0418 E7            pop d
0021   0419 FD 43         mov [d], b
0022   041B             _for1_cond:
0023   041B FA FF FF      lea d, [bp + -1] ; $i
0024   041E 2A            mov b, [d]
0025   041F             ; START RELATIONAL
0026   041F D7            push a
0027   0420 11            mov a, b
0028   0421 26 1E 00      mov b, $1e
0029   0424 B0            cmp a, b
0030   0425 FD 73         slt ; < (signed)
0031   0427 E4            pop a
0032   0428             ; END RELATIONAL
0033   0428 C0 00 00      cmp b, 0
0034   042B C6 9E 04      je _for1_exit
0035   042E             _for1_block:
0036   042E             ;; for(j = 0; j <    40    ; j++){ 
0037   042E             _for2_init:
0038   042E FA FD FF      lea d, [bp + -3] ; $j
0039   0431 DA            push d
0040   0432 26 00 00      mov b, $0
0041   0435 E7            pop d
0042   0436 FD 43         mov [d], b
0043   0438             _for2_cond:
0044   0438 FA FD FF      lea d, [bp + -3] ; $j
0045   043B 2A            mov b, [d]
0046   043C             ; START RELATIONAL
0047   043C D7            push a
0048   043D 11            mov a, b
0049   043E 26 28 00      mov b, $28
0050   0441 B0            cmp a, b
0051   0442 FD 73         slt ; < (signed)
0052   0444 E4            pop a
0053   0445             ; END RELATIONAL
0054   0445 C0 00 00      cmp b, 0
0055   0448 C6 8E 04      je _for2_exit
0056   044B             _for2_block:
0057   044B             ;; nextState[i][j] = currState[i][j]; 
0058   044B 3B A9 1E      mov d, _nextState_data ; $nextState
0059   044E D7            push a
0060   044F DA            push d
0061   0450 FA FF FF      lea d, [bp + -1] ; $i
0062   0453 2A            mov b, [d]
0063   0454 E7            pop d
0064   0455 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0065   0459 DA            push d
0066   045A FA FD FF      lea d, [bp + -3] ; $j
0067   045D 2A            mov b, [d]
0068   045E E7            pop d
0069   045F 5A            add d, b
0070   0460 E4            pop a
0071   0461 DA            push d
0072   0462 3B 59 23      mov d, _currState_data ; $currState
0073   0465 D7            push a
0074   0466 DA            push d
0075   0467 FA FF FF      lea d, [bp + -1] ; $i
0076   046A 2A            mov b, [d]
0077   046B E7            pop d
0078   046C FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0079   0470 DA            push d
0080   0471 FA FD FF      lea d, [bp + -3] ; $j
0081   0474 2A            mov b, [d]
0082   0475 E7            pop d
0083   0476 5A            add d, b
0084   0477 E4            pop a
0085   0478 32            mov bl, [d]
0086   0479 A7 00         mov bh, 0
0087   047B E7            pop d
0088   047C FD 3E         mov [d], bl
0089   047E             _for2_update:
0090   047E FA FD FF      lea d, [bp + -3] ; $j
0091   0481 2A            mov b, [d]
0092   0482 FD 77         inc b
0093   0484 FA FD FF      lea d, [bp + -3] ; $j
0094   0487 FD 43         mov [d], b
0095   0489 FD 7D         dec b
0096   048B 0A 38 04      jmp _for2_cond
0097   048E             _for2_exit:
0098   048E             _for1_update:
0099   048E FA FF FF      lea d, [bp + -1] ; $i
0100   0491 2A            mov b, [d]
0101   0492 FD 77         inc b
0102   0494 FA FF FF      lea d, [bp + -1] ; $i
0103   0497 FD 43         mov [d], b
0104   0499 FD 7D         dec b
0105   049B 0A 1B 04      jmp _for1_cond
0106   049E             _for1_exit:
0107   049E             ;; for(;;){ 
0108   049E             _for3_init:
0109   049E             _for3_cond:
0110   049E             _for3_block:
0111   049E             ;; for(i = 1; i <   30     +-1; i++){ 
0112   049E             _for4_init:
0113   049E FA FF FF      lea d, [bp + -1] ; $i
0114   04A1 DA            push d
0115   04A2 26 01 00      mov b, $1
0116   04A5 E7            pop d
0117   04A6 FD 43         mov [d], b
0118   04A8             _for4_cond:
0119   04A8 FA FF FF      lea d, [bp + -1] ; $i
0120   04AB 2A            mov b, [d]
0121   04AC             ; START RELATIONAL
0122   04AC D7            push a
0123   04AD 11            mov a, b
0124   04AE 26 1E 00      mov b, $1e
0125   04B1             ; START TERMS
0126   04B1 D7            push a
0127   04B2 11            mov a, b
0128   04B3 26 FF FF      mov b, $ffff
0129   04B6 56            add b, a
0130   04B7 E4            pop a
0131   04B8             ; END TERMS
0132   04B8 B0            cmp a, b
0133   04B9 FD 73         slt ; < (signed)
0134   04BB E4            pop a
0135   04BC             ; END RELATIONAL
0136   04BC C0 00 00      cmp b, 0
0137   04BF C6 99 05      je _for4_exit
0138   04C2             _for4_block:
0139   04C2             ;; for(j = 1; j <    40    +-1; j++){ 
0140   04C2             _for5_init:
0141   04C2 FA FD FF      lea d, [bp + -3] ; $j
0142   04C5 DA            push d
0143   04C6 26 01 00      mov b, $1
0144   04C9 E7            pop d
0145   04CA FD 43         mov [d], b
0146   04CC             _for5_cond:
0147   04CC FA FD FF      lea d, [bp + -3] ; $j
0148   04CF 2A            mov b, [d]
0149   04D0             ; START RELATIONAL
0150   04D0 D7            push a
0151   04D1 11            mov a, b
0152   04D2 26 28 00      mov b, $28
0153   04D5             ; START TERMS
0154   04D5 D7            push a
0155   04D6 11            mov a, b
0156   04D7 26 FF FF      mov b, $ffff
0157   04DA 56            add b, a
0158   04DB E4            pop a
0159   04DC             ; END TERMS
0160   04DC B0            cmp a, b
0161   04DD FD 73         slt ; < (signed)
0162   04DF E4            pop a
0163   04E0             ; END RELATIONAL
0164   04E0 C0 00 00      cmp b, 0
0165   04E3 C6 89 05      je _for5_exit
0166   04E6             _for5_block:
0167   04E6             ;; n = neighbours(i, j); 
0168   04E6 FA FB FF      lea d, [bp + -5] ; $n
0169   04E9 DA            push d
0170   04EA FA FD FF      lea d, [bp + -3] ; $j
0171   04ED 2A            mov b, [d]
0172   04EE FD AB         swp b
0173   04F0 D8            push b
0174   04F1 FA FF FF      lea d, [bp + -1] ; $i
0175   04F4 2A            mov b, [d]
0176   04F5 FD AB         swp b
0177   04F7 D8            push b
0178   04F8 07 74 1C      call neighbours
0179   04FB 51 04 00      add sp, 4
0180   04FE E7            pop d
0181   04FF FD 43         mov [d], b
0182   0501             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0183   0501             _if6_cond:
0184   0501 FA FB FF      lea d, [bp + -5] ; $n
0185   0504 2A            mov b, [d]
0186   0505             ; START RELATIONAL
0187   0505 D7            push a
0188   0506 11            mov a, b
0189   0507 26 02 00      mov b, $2
0190   050A B0            cmp a, b
0191   050B FD 73         slt ; < (signed)
0192   050D E4            pop a
0193   050E             ; END RELATIONAL
0194   050E             ; START LOGICAL OR
0195   050E D7            push a
0196   050F 11            mov a, b
0197   0510 FA FB FF      lea d, [bp + -5] ; $n
0198   0513 2A            mov b, [d]
0199   0514             ; START RELATIONAL
0200   0514 D7            push a
0201   0515 11            mov a, b
0202   0516 26 03 00      mov b, $3
0203   0519 B0            cmp a, b
0204   051A FD 7F         sgt ; >
0205   051C E4            pop a
0206   051D             ; END RELATIONAL
0207   051D FD A8         sor a, b ; ||
0208   051F E4            pop a
0209   0520             ; END LOGICAL OR
0210   0520 C0 00 00      cmp b, 0
0211   0523 C6 46 05      je _if6_else
0212   0526             _if6_true:
0213   0526             ;; nextState[i][j] = ' '; 
0214   0526 3B A9 1E      mov d, _nextState_data ; $nextState
0215   0529 D7            push a
0216   052A DA            push d
0217   052B FA FF FF      lea d, [bp + -1] ; $i
0218   052E 2A            mov b, [d]
0219   052F E7            pop d
0220   0530 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0221   0534 DA            push d
0222   0535 FA FD FF      lea d, [bp + -3] ; $j
0223   0538 2A            mov b, [d]
0224   0539 E7            pop d
0225   053A 5A            add d, b
0226   053B E4            pop a
0227   053C DA            push d
0228   053D 26 20 00      mov b, $20
0229   0540 E7            pop d
0230   0541 FD 3E         mov [d], bl
0231   0543 0A 79 05      jmp _if6_exit
0232   0546             _if6_else:
0233   0546             ;; if(n == 3) nextState[i][j] = '@'; 
0234   0546             _if7_cond:
0235   0546 FA FB FF      lea d, [bp + -5] ; $n
0236   0549 2A            mov b, [d]
0237   054A             ; START RELATIONAL
0238   054A D7            push a
0239   054B 11            mov a, b
0240   054C 26 03 00      mov b, $3
0241   054F B0            cmp a, b
0242   0550 FD 71         seq ; ==
0243   0552 E4            pop a
0244   0553             ; END RELATIONAL
0245   0553 C0 00 00      cmp b, 0
0246   0556 C6 79 05      je _if7_exit
0247   0559             _if7_true:
0248   0559             ;; nextState[i][j] = '@'; 
0249   0559 3B A9 1E      mov d, _nextState_data ; $nextState
0250   055C D7            push a
0251   055D DA            push d
0252   055E FA FF FF      lea d, [bp + -1] ; $i
0253   0561 2A            mov b, [d]
0254   0562 E7            pop d
0255   0563 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0256   0567 DA            push d
0257   0568 FA FD FF      lea d, [bp + -3] ; $j
0258   056B 2A            mov b, [d]
0259   056C E7            pop d
0260   056D 5A            add d, b
0261   056E E4            pop a
0262   056F DA            push d
0263   0570 26 40 00      mov b, $40
0264   0573 E7            pop d
0265   0574 FD 3E         mov [d], bl
0266   0576 0A 79 05      jmp _if7_exit
0267   0579             _if7_exit:
0268   0579             _if6_exit:
0269   0579             _for5_update:
0270   0579 FA FD FF      lea d, [bp + -3] ; $j
0271   057C 2A            mov b, [d]
0272   057D FD 77         inc b
0273   057F FA FD FF      lea d, [bp + -3] ; $j
0274   0582 FD 43         mov [d], b
0275   0584 FD 7D         dec b
0276   0586 0A CC 04      jmp _for5_cond
0277   0589             _for5_exit:
0278   0589             _for4_update:
0279   0589 FA FF FF      lea d, [bp + -1] ; $i
0280   058C 2A            mov b, [d]
0281   058D FD 77         inc b
0282   058F FA FF FF      lea d, [bp + -1] ; $i
0283   0592 FD 43         mov [d], b
0284   0594 FD 7D         dec b
0285   0596 0A A8 04      jmp _for4_cond
0286   0599             _for4_exit:
0287   0599             ;; for(i = 1; i <   30     +-1; i++){ 
0288   0599             _for8_init:
0289   0599 FA FF FF      lea d, [bp + -1] ; $i
0290   059C DA            push d
0291   059D 26 01 00      mov b, $1
0292   05A0 E7            pop d
0293   05A1 FD 43         mov [d], b
0294   05A3             _for8_cond:
0295   05A3 FA FF FF      lea d, [bp + -1] ; $i
0296   05A6 2A            mov b, [d]
0297   05A7             ; START RELATIONAL
0298   05A7 D7            push a
0299   05A8 11            mov a, b
0300   05A9 26 1E 00      mov b, $1e
0301   05AC             ; START TERMS
0302   05AC D7            push a
0303   05AD 11            mov a, b
0304   05AE 26 FF FF      mov b, $ffff
0305   05B1 56            add b, a
0306   05B2 E4            pop a
0307   05B3             ; END TERMS
0308   05B3 B0            cmp a, b
0309   05B4 FD 73         slt ; < (signed)
0310   05B6 E4            pop a
0311   05B7             ; END RELATIONAL
0312   05B7 C0 00 00      cmp b, 0
0313   05BA C6 34 06      je _for8_exit
0314   05BD             _for8_block:
0315   05BD             ;; for(j = 1; j <    40    +-1; j++){ 
0316   05BD             _for9_init:
0317   05BD FA FD FF      lea d, [bp + -3] ; $j
0318   05C0 DA            push d
0319   05C1 26 01 00      mov b, $1
0320   05C4 E7            pop d
0321   05C5 FD 43         mov [d], b
0322   05C7             _for9_cond:
0323   05C7 FA FD FF      lea d, [bp + -3] ; $j
0324   05CA 2A            mov b, [d]
0325   05CB             ; START RELATIONAL
0326   05CB D7            push a
0327   05CC 11            mov a, b
0328   05CD 26 28 00      mov b, $28
0329   05D0             ; START TERMS
0330   05D0 D7            push a
0331   05D1 11            mov a, b
0332   05D2 26 FF FF      mov b, $ffff
0333   05D5 56            add b, a
0334   05D6 E4            pop a
0335   05D7             ; END TERMS
0336   05D7 B0            cmp a, b
0337   05D8 FD 73         slt ; < (signed)
0338   05DA E4            pop a
0339   05DB             ; END RELATIONAL
0340   05DB C0 00 00      cmp b, 0
0341   05DE C6 24 06      je _for9_exit
0342   05E1             _for9_block:
0343   05E1             ;; currState[i][j] = nextState[i][j]; 
0344   05E1 3B 59 23      mov d, _currState_data ; $currState
0345   05E4 D7            push a
0346   05E5 DA            push d
0347   05E6 FA FF FF      lea d, [bp + -1] ; $i
0348   05E9 2A            mov b, [d]
0349   05EA E7            pop d
0350   05EB FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0351   05EF DA            push d
0352   05F0 FA FD FF      lea d, [bp + -3] ; $j
0353   05F3 2A            mov b, [d]
0354   05F4 E7            pop d
0355   05F5 5A            add d, b
0356   05F6 E4            pop a
0357   05F7 DA            push d
0358   05F8 3B A9 1E      mov d, _nextState_data ; $nextState
0359   05FB D7            push a
0360   05FC DA            push d
0361   05FD FA FF FF      lea d, [bp + -1] ; $i
0362   0600 2A            mov b, [d]
0363   0601 E7            pop d
0364   0602 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0365   0606 DA            push d
0366   0607 FA FD FF      lea d, [bp + -3] ; $j
0367   060A 2A            mov b, [d]
0368   060B E7            pop d
0369   060C 5A            add d, b
0370   060D E4            pop a
0371   060E 32            mov bl, [d]
0372   060F A7 00         mov bh, 0
0373   0611 E7            pop d
0374   0612 FD 3E         mov [d], bl
0375   0614             _for9_update:
0376   0614 FA FD FF      lea d, [bp + -3] ; $j
0377   0617 2A            mov b, [d]
0378   0618 FD 77         inc b
0379   061A FA FD FF      lea d, [bp + -3] ; $j
0380   061D FD 43         mov [d], b
0381   061F FD 7D         dec b
0382   0621 0A C7 05      jmp _for9_cond
0383   0624             _for9_exit:
0384   0624             _for8_update:
0385   0624 FA FF FF      lea d, [bp + -1] ; $i
0386   0627 2A            mov b, [d]
0387   0628 FD 77         inc b
0388   062A FA FF FF      lea d, [bp + -1] ; $i
0389   062D FD 43         mov [d], b
0390   062F FD 7D         dec b
0391   0631 0A A3 05      jmp _for8_cond
0392   0634             _for8_exit:
0393   0634             ;; printf(clear); 
0394   0634 3B 9E 1E      mov d, _clear_data ; $clear
0395   0637 2D            mov b, d
0396   0638 FD AB         swp b
0397   063A D8            push b
0398   063B 07 FB 09      call printf
0399   063E 51 02 00      add sp, 2
0400   0641             ;; show(); 
0401   0641 07 88 1B      call show
0402   0644             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0403   0644 26 09 28      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0404   0647 FD AB         swp b
0405   0649 D8            push b
0406   064A 07 8B 17      call puts
0407   064D 51 02 00      add sp, 2
0408   0650             _for3_update:
0409   0650 0A 9E 04      jmp _for3_cond
0410   0653             _for3_exit:
0411   0653 05 0B         syscall sys_terminate_proc
0412   0655             
0413   0655             strcpy:
0414   0655 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0415   0658             ;; char *psrc; 
0416   0658 52 02 00      sub sp, 2 ; psrc
0417   065B             ;; char *pdest; 
0418   065B 52 02 00      sub sp, 2 ; pdest
0419   065E             ;; psrc = src; 
0420   065E FA FF FF      lea d, [bp + -1] ; $psrc
0421   0661 DA            push d
0422   0662 FA 07 00      lea d, [bp + 7] ; $src
0423   0665 2A            mov b, [d]
0424   0666 E7            pop d
0425   0667 FD 43         mov [d], b
0426   0669             ;; pdest = dest; 
0427   0669 FA FD FF      lea d, [bp + -3] ; $pdest
0428   066C DA            push d
0429   066D FA 05 00      lea d, [bp + 5] ; $dest
0430   0670 2A            mov b, [d]
0431   0671 E7            pop d
0432   0672 FD 43         mov [d], b
0433   0674             ;; while(*psrc) *pdest++ = *psrc++; 
0434   0674             _while10_cond:
0435   0674 FA FF FF      lea d, [bp + -1] ; $psrc
0436   0677 2A            mov b, [d]
0437   0678 74            mov d, b
0438   0679 32            mov bl, [d]
0439   067A A7 00         mov bh, 0
0440   067C C0 00 00      cmp b, 0
0441   067F C6 A7 06      je _while10_exit
0442   0682             _while10_block:
0443   0682             ;; *pdest++ = *psrc++; 
0444   0682 FA FD FF      lea d, [bp + -3] ; $pdest
0445   0685 2A            mov b, [d]
0446   0686 FD 77         inc b
0447   0688 FA FD FF      lea d, [bp + -3] ; $pdest
0448   068B FD 43         mov [d], b
0449   068D FD 7D         dec b
0450   068F D8            push b
0451   0690 FA FF FF      lea d, [bp + -1] ; $psrc
0452   0693 2A            mov b, [d]
0453   0694 FD 77         inc b
0454   0696 FA FF FF      lea d, [bp + -1] ; $psrc
0455   0699 FD 43         mov [d], b
0456   069B FD 7D         dec b
0457   069D 74            mov d, b
0458   069E 32            mov bl, [d]
0459   069F A7 00         mov bh, 0
0460   06A1 E7            pop d
0461   06A2 FD 3E         mov [d], bl
0462   06A4 0A 74 06      jmp _while10_cond
0463   06A7             _while10_exit:
0464   06A7             ;; *pdest = '\0'; 
0465   06A7 FA FD FF      lea d, [bp + -3] ; $pdest
0466   06AA 2A            mov b, [d]
0467   06AB D8            push b
0468   06AC 26 00 00      mov b, $0
0469   06AF E7            pop d
0470   06B0 FD 3E         mov [d], bl
0471   06B2 F9            leave
0472   06B3 09            ret
0473   06B4             
0474   06B4             strcmp:
0475   06B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0476   06B7             ;; while (*s1 && (*s1 == *s2)) { 
0477   06B7             _while11_cond:
0478   06B7 FA 05 00      lea d, [bp + 5] ; $s1
0479   06BA 2A            mov b, [d]
0480   06BB 74            mov d, b
0481   06BC 32            mov bl, [d]
0482   06BD A7 00         mov bh, 0
0483   06BF             ; START LOGICAL AND
0484   06BF D7            push a
0485   06C0 11            mov a, b
0486   06C1 FA 05 00      lea d, [bp + 5] ; $s1
0487   06C4 2A            mov b, [d]
0488   06C5 74            mov d, b
0489   06C6 32            mov bl, [d]
0490   06C7 A7 00         mov bh, 0
0491   06C9             ; START RELATIONAL
0492   06C9 D7            push a
0493   06CA 11            mov a, b
0494   06CB FA 07 00      lea d, [bp + 7] ; $s2
0495   06CE 2A            mov b, [d]
0496   06CF 74            mov d, b
0497   06D0 32            mov bl, [d]
0498   06D1 A7 00         mov bh, 0
0499   06D3 B0            cmp a, b
0500   06D4 FD 71         seq ; ==
0501   06D6 E4            pop a
0502   06D7             ; END RELATIONAL
0503   06D7 FD A7         sand a, b
0504   06D9 E4            pop a
0505   06DA             ; END LOGICAL AND
0506   06DA C0 00 00      cmp b, 0
0507   06DD C6 FD 06      je _while11_exit
0508   06E0             _while11_block:
0509   06E0             ;; s1++; 
0510   06E0 FA 05 00      lea d, [bp + 5] ; $s1
0511   06E3 2A            mov b, [d]
0512   06E4 FD 77         inc b
0513   06E6 FA 05 00      lea d, [bp + 5] ; $s1
0514   06E9 FD 43         mov [d], b
0515   06EB FD 7D         dec b
0516   06ED             ;; s2++; 
0517   06ED FA 07 00      lea d, [bp + 7] ; $s2
0518   06F0 2A            mov b, [d]
0519   06F1 FD 77         inc b
0520   06F3 FA 07 00      lea d, [bp + 7] ; $s2
0521   06F6 FD 43         mov [d], b
0522   06F8 FD 7D         dec b
0523   06FA 0A B7 06      jmp _while11_cond
0524   06FD             _while11_exit:
0525   06FD             ;; return *s1 - *s2; 
0526   06FD FA 05 00      lea d, [bp + 5] ; $s1
0527   0700 2A            mov b, [d]
0528   0701 74            mov d, b
0529   0702 32            mov bl, [d]
0530   0703 A7 00         mov bh, 0
0531   0705             ; START TERMS
0532   0705 D7            push a
0533   0706 11            mov a, b
0534   0707 FA 07 00      lea d, [bp + 7] ; $s2
0535   070A 2A            mov b, [d]
0536   070B 74            mov d, b
0537   070C 32            mov bl, [d]
0538   070D A7 00         mov bh, 0
0539   070F 60            sub a, b
0540   0710 27            mov b, a
0541   0711 E4            pop a
0542   0712             ; END TERMS
0543   0712 F9            leave
0544   0713 09            ret
0545   0714             
0546   0714             strncmp:
0547   0714 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0548   0717 F9            leave
0549   0718 09            ret
0550   0719             
0551   0719             strcat:
0552   0719 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0553   071C             ;; int dest_len; 
0554   071C 52 02 00      sub sp, 2 ; dest_len
0555   071F             ;; int i; 
0556   071F 52 02 00      sub sp, 2 ; i
0557   0722             ;; dest_len = strlen(dest); 
0558   0722 FA FF FF      lea d, [bp + -1] ; $dest_len
0559   0725 DA            push d
0560   0726 FA 05 00      lea d, [bp + 5] ; $dest
0561   0729 2A            mov b, [d]
0562   072A FD AB         swp b
0563   072C D8            push b
0564   072D 07 CF 07      call strlen
0565   0730 51 02 00      add sp, 2
0566   0733 E7            pop d
0567   0734 FD 43         mov [d], b
0568   0736             ;; for (i = 0; src[i] != 0; i=i+1) { 
0569   0736             _for12_init:
0570   0736 FA FD FF      lea d, [bp + -3] ; $i
0571   0739 DA            push d
0572   073A 26 00 00      mov b, $0
0573   073D E7            pop d
0574   073E FD 43         mov [d], b
0575   0740             _for12_cond:
0576   0740 FA 07 00      lea d, [bp + 7] ; $src
0577   0743 FD 2A         mov d, [d]
0578   0745 D7            push a
0579   0746 DA            push d
0580   0747 FA FD FF      lea d, [bp + -3] ; $i
0581   074A 2A            mov b, [d]
0582   074B E7            pop d
0583   074C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0584   0750 E4            pop a
0585   0751 32            mov bl, [d]
0586   0752 A7 00         mov bh, 0
0587   0754             ; START RELATIONAL
0588   0754 D7            push a
0589   0755 11            mov a, b
0590   0756 26 00 00      mov b, $0
0591   0759 B0            cmp a, b
0592   075A FD 72         sneq ; !=
0593   075C E4            pop a
0594   075D             ; END RELATIONAL
0595   075D C0 00 00      cmp b, 0
0596   0760 C6 A9 07      je _for12_exit
0597   0763             _for12_block:
0598   0763             ;; dest[dest_len + i] = src[i]; 
0599   0763 FA 05 00      lea d, [bp + 5] ; $dest
0600   0766 FD 2A         mov d, [d]
0601   0768 D7            push a
0602   0769 DA            push d
0603   076A FA FF FF      lea d, [bp + -1] ; $dest_len
0604   076D 2A            mov b, [d]
0605   076E             ; START TERMS
0606   076E D7            push a
0607   076F 11            mov a, b
0608   0770 FA FD FF      lea d, [bp + -3] ; $i
0609   0773 2A            mov b, [d]
0610   0774 56            add b, a
0611   0775 E4            pop a
0612   0776             ; END TERMS
0613   0776 E7            pop d
0614   0777 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0615   077B E4            pop a
0616   077C DA            push d
0617   077D FA 07 00      lea d, [bp + 7] ; $src
0618   0780 FD 2A         mov d, [d]
0619   0782 D7            push a
0620   0783 DA            push d
0621   0784 FA FD FF      lea d, [bp + -3] ; $i
0622   0787 2A            mov b, [d]
0623   0788 E7            pop d
0624   0789 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0625   078D E4            pop a
0626   078E 32            mov bl, [d]
0627   078F A7 00         mov bh, 0
0628   0791 E7            pop d
0629   0792 FD 3E         mov [d], bl
0630   0794             _for12_update:
0631   0794 FA FD FF      lea d, [bp + -3] ; $i
0632   0797 DA            push d
0633   0798 FA FD FF      lea d, [bp + -3] ; $i
0634   079B 2A            mov b, [d]
0635   079C             ; START TERMS
0636   079C D7            push a
0637   079D 11            mov a, b
0638   079E 26 01 00      mov b, $1
0639   07A1 56            add b, a
0640   07A2 E4            pop a
0641   07A3             ; END TERMS
0642   07A3 E7            pop d
0643   07A4 FD 43         mov [d], b
0644   07A6 0A 40 07      jmp _for12_cond
0645   07A9             _for12_exit:
0646   07A9             ;; dest[dest_len + i] = 0; 
0647   07A9 FA 05 00      lea d, [bp + 5] ; $dest
0648   07AC FD 2A         mov d, [d]
0649   07AE D7            push a
0650   07AF DA            push d
0651   07B0 FA FF FF      lea d, [bp + -1] ; $dest_len
0652   07B3 2A            mov b, [d]
0653   07B4             ; START TERMS
0654   07B4 D7            push a
0655   07B5 11            mov a, b
0656   07B6 FA FD FF      lea d, [bp + -3] ; $i
0657   07B9 2A            mov b, [d]
0658   07BA 56            add b, a
0659   07BB E4            pop a
0660   07BC             ; END TERMS
0661   07BC E7            pop d
0662   07BD FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0663   07C1 E4            pop a
0664   07C2 DA            push d
0665   07C3 26 00 00      mov b, $0
0666   07C6 E7            pop d
0667   07C7 FD 3E         mov [d], bl
0668   07C9             ;; return dest; 
0669   07C9 FA 05 00      lea d, [bp + 5] ; $dest
0670   07CC 2A            mov b, [d]
0671   07CD F9            leave
0672   07CE 09            ret
0673   07CF             
0674   07CF             strlen:
0675   07CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0676   07D2             ;; int length; 
0677   07D2 52 02 00      sub sp, 2 ; length
0678   07D5             ;; length = 0; 
0679   07D5 FA FF FF      lea d, [bp + -1] ; $length
0680   07D8 DA            push d
0681   07D9 26 00 00      mov b, $0
0682   07DC E7            pop d
0683   07DD FD 43         mov [d], b
0684   07DF             ;; while (str[length] != 0) { 
0685   07DF             _while13_cond:
0686   07DF FA 05 00      lea d, [bp + 5] ; $str
0687   07E2 FD 2A         mov d, [d]
0688   07E4 D7            push a
0689   07E5 DA            push d
0690   07E6 FA FF FF      lea d, [bp + -1] ; $length
0691   07E9 2A            mov b, [d]
0692   07EA E7            pop d
0693   07EB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0694   07EF E4            pop a
0695   07F0 32            mov bl, [d]
0696   07F1 A7 00         mov bh, 0
0697   07F3             ; START RELATIONAL
0698   07F3 D7            push a
0699   07F4 11            mov a, b
0700   07F5 26 00 00      mov b, $0
0701   07F8 B0            cmp a, b
0702   07F9 FD 72         sneq ; !=
0703   07FB E4            pop a
0704   07FC             ; END RELATIONAL
0705   07FC C0 00 00      cmp b, 0
0706   07FF C6 12 08      je _while13_exit
0707   0802             _while13_block:
0708   0802             ;; length++; 
0709   0802 FA FF FF      lea d, [bp + -1] ; $length
0710   0805 2A            mov b, [d]
0711   0806 FD 77         inc b
0712   0808 FA FF FF      lea d, [bp + -1] ; $length
0713   080B FD 43         mov [d], b
0714   080D FD 7D         dec b
0715   080F 0A DF 07      jmp _while13_cond
0716   0812             _while13_exit:
0717   0812             ;; return length; 
0718   0812 FA FF FF      lea d, [bp + -1] ; $length
0719   0815 2A            mov b, [d]
0720   0816 F9            leave
0721   0817 09            ret
0722   0818             
0723   0818             exit:
0724   0818 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0725   081B             
0726   081B             ; --- BEGIN INLINE ASM BLOCK
0727   081B 05 0B         syscall sys_terminate_proc
0728   081D             ; --- END INLINE ASM BLOCK
0729   081D             
0730   081D F9            leave
0731   081E 09            ret
0732   081F             
0733   081F             memset:
0734   081F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0735   0822             ;; int i; 
0736   0822 52 02 00      sub sp, 2 ; i
0737   0825             ;; for(i = 0; i < size; i++){ 
0738   0825             _for14_init:
0739   0825 FA FF FF      lea d, [bp + -1] ; $i
0740   0828 DA            push d
0741   0829 26 00 00      mov b, $0
0742   082C E7            pop d
0743   082D FD 43         mov [d], b
0744   082F             _for14_cond:
0745   082F FA FF FF      lea d, [bp + -1] ; $i
0746   0832 2A            mov b, [d]
0747   0833             ; START RELATIONAL
0748   0833 D7            push a
0749   0834 11            mov a, b
0750   0835 FA 08 00      lea d, [bp + 8] ; $size
0751   0838 2A            mov b, [d]
0752   0839 B0            cmp a, b
0753   083A FD 73         slt ; < (signed)
0754   083C E4            pop a
0755   083D             ; END RELATIONAL
0756   083D C0 00 00      cmp b, 0
0757   0840 C6 69 08      je _for14_exit
0758   0843             _for14_block:
0759   0843             ;; *(s+i) = c; 
0760   0843 FA 05 00      lea d, [bp + 5] ; $s
0761   0846 2A            mov b, [d]
0762   0847             ; START TERMS
0763   0847 D7            push a
0764   0848 11            mov a, b
0765   0849 FA FF FF      lea d, [bp + -1] ; $i
0766   084C 2A            mov b, [d]
0767   084D 56            add b, a
0768   084E E4            pop a
0769   084F             ; END TERMS
0770   084F D8            push b
0771   0850 FA 07 00      lea d, [bp + 7] ; $c
0772   0853 32            mov bl, [d]
0773   0854 A7 00         mov bh, 0
0774   0856 E7            pop d
0775   0857 FD 3E         mov [d], bl
0776   0859             _for14_update:
0777   0859 FA FF FF      lea d, [bp + -1] ; $i
0778   085C 2A            mov b, [d]
0779   085D FD 77         inc b
0780   085F FA FF FF      lea d, [bp + -1] ; $i
0781   0862 FD 43         mov [d], b
0782   0864 FD 7D         dec b
0783   0866 0A 2F 08      jmp _for14_cond
0784   0869             _for14_exit:
0785   0869             ;; return s; 
0786   0869 FA 05 00      lea d, [bp + 5] ; $s
0787   086C 2A            mov b, [d]
0788   086D F9            leave
0789   086E 09            ret
0790   086F             
0791   086F             atoi:
0792   086F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0793   0872             ;; int result = 0;  // Initialize result 
0794   0872 52 02 00      sub sp, 2 ; result
0795   0875             ; --- START LOCAL VAR INITIALIZATION
0796   0875 FA FF FF      lea d, [bp + -1] ; $result
0797   0878 DA            push d
0798   0879 26 00 00      mov b, $0
0799   087C E7            pop d
0800   087D FD 43         mov [d], b
0801   087F             ; --- END LOCAL VAR INITIALIZATION
0802   087F             ;; int sign = 1;    // Initialize sign as positive 
0803   087F 52 02 00      sub sp, 2 ; sign
0804   0882             ; --- START LOCAL VAR INITIALIZATION
0805   0882 FA FD FF      lea d, [bp + -3] ; $sign
0806   0885 DA            push d
0807   0886 26 01 00      mov b, $1
0808   0889 E7            pop d
0809   088A FD 43         mov [d], b
0810   088C             ; --- END LOCAL VAR INITIALIZATION
0811   088C             ;; while (*str == ' ') str++; 
0812   088C             _while15_cond:
0813   088C FA 05 00      lea d, [bp + 5] ; $str
0814   088F 2A            mov b, [d]
0815   0890 74            mov d, b
0816   0891 32            mov bl, [d]
0817   0892 A7 00         mov bh, 0
0818   0894             ; START RELATIONAL
0819   0894 D7            push a
0820   0895 11            mov a, b
0821   0896 26 20 00      mov b, $20
0822   0899 B0            cmp a, b
0823   089A FD 71         seq ; ==
0824   089C E4            pop a
0825   089D             ; END RELATIONAL
0826   089D C0 00 00      cmp b, 0
0827   08A0 C6 B3 08      je _while15_exit
0828   08A3             _while15_block:
0829   08A3             ;; str++; 
0830   08A3 FA 05 00      lea d, [bp + 5] ; $str
0831   08A6 2A            mov b, [d]
0832   08A7 FD 77         inc b
0833   08A9 FA 05 00      lea d, [bp + 5] ; $str
0834   08AC FD 43         mov [d], b
0835   08AE FD 7D         dec b
0836   08B0 0A 8C 08      jmp _while15_cond
0837   08B3             _while15_exit:
0838   08B3             ;; if (*str == '-' || *str == '+') { 
0839   08B3             _if16_cond:
0840   08B3 FA 05 00      lea d, [bp + 5] ; $str
0841   08B6 2A            mov b, [d]
0842   08B7 74            mov d, b
0843   08B8 32            mov bl, [d]
0844   08B9 A7 00         mov bh, 0
0845   08BB             ; START RELATIONAL
0846   08BB D7            push a
0847   08BC 11            mov a, b
0848   08BD 26 2D 00      mov b, $2d
0849   08C0 B0            cmp a, b
0850   08C1 FD 71         seq ; ==
0851   08C3 E4            pop a
0852   08C4             ; END RELATIONAL
0853   08C4             ; START LOGICAL OR
0854   08C4 D7            push a
0855   08C5 11            mov a, b
0856   08C6 FA 05 00      lea d, [bp + 5] ; $str
0857   08C9 2A            mov b, [d]
0858   08CA 74            mov d, b
0859   08CB 32            mov bl, [d]
0860   08CC A7 00         mov bh, 0
0861   08CE             ; START RELATIONAL
0862   08CE D7            push a
0863   08CF 11            mov a, b
0864   08D0 26 2B 00      mov b, $2b
0865   08D3 B0            cmp a, b
0866   08D4 FD 71         seq ; ==
0867   08D6 E4            pop a
0868   08D7             ; END RELATIONAL
0869   08D7 FD A8         sor a, b ; ||
0870   08D9 E4            pop a
0871   08DA             ; END LOGICAL OR
0872   08DA C0 00 00      cmp b, 0
0873   08DD C6 16 09      je _if16_exit
0874   08E0             _if16_true:
0875   08E0             ;; if (*str == '-') sign = -1; 
0876   08E0             _if17_cond:
0877   08E0 FA 05 00      lea d, [bp + 5] ; $str
0878   08E3 2A            mov b, [d]
0879   08E4 74            mov d, b
0880   08E5 32            mov bl, [d]
0881   08E6 A7 00         mov bh, 0
0882   08E8             ; START RELATIONAL
0883   08E8 D7            push a
0884   08E9 11            mov a, b
0885   08EA 26 2D 00      mov b, $2d
0886   08ED B0            cmp a, b
0887   08EE FD 71         seq ; ==
0888   08F0 E4            pop a
0889   08F1             ; END RELATIONAL
0890   08F1 C0 00 00      cmp b, 0
0891   08F4 C6 06 09      je _if17_exit
0892   08F7             _if17_true:
0893   08F7             ;; sign = -1; 
0894   08F7 FA FD FF      lea d, [bp + -3] ; $sign
0895   08FA DA            push d
0896   08FB 26 01 00      mov b, $1
0897   08FE FD 97         neg b
0898   0900 E7            pop d
0899   0901 FD 43         mov [d], b
0900   0903 0A 06 09      jmp _if17_exit
0901   0906             _if17_exit:
0902   0906             ;; str++; 
0903   0906 FA 05 00      lea d, [bp + 5] ; $str
0904   0909 2A            mov b, [d]
0905   090A FD 77         inc b
0906   090C FA 05 00      lea d, [bp + 5] ; $str
0907   090F FD 43         mov [d], b
0908   0911 FD 7D         dec b
0909   0913 0A 16 09      jmp _if16_exit
0910   0916             _if16_exit:
0911   0916             ;; while (*str >= '0' && *str <= '9') { 
0912   0916             _while18_cond:
0913   0916 FA 05 00      lea d, [bp + 5] ; $str
0914   0919 2A            mov b, [d]
0915   091A 74            mov d, b
0916   091B 32            mov bl, [d]
0917   091C A7 00         mov bh, 0
0918   091E             ; START RELATIONAL
0919   091E D7            push a
0920   091F 11            mov a, b
0921   0920 26 30 00      mov b, $30
0922   0923 B0            cmp a, b
0923   0924 FD 82         sgeu ; >= (unsigned)
0924   0926 E4            pop a
0925   0927             ; END RELATIONAL
0926   0927             ; START LOGICAL AND
0927   0927 D7            push a
0928   0928 11            mov a, b
0929   0929 FA 05 00      lea d, [bp + 5] ; $str
0930   092C 2A            mov b, [d]
0931   092D 74            mov d, b
0932   092E 32            mov bl, [d]
0933   092F A7 00         mov bh, 0
0934   0931             ; START RELATIONAL
0935   0931 D7            push a
0936   0932 11            mov a, b
0937   0933 26 39 00      mov b, $39
0938   0936 B0            cmp a, b
0939   0937 FD 76         sleu ; <= (unsigned)
0940   0939 E4            pop a
0941   093A             ; END RELATIONAL
0942   093A FD A7         sand a, b
0943   093C E4            pop a
0944   093D             ; END LOGICAL AND
0945   093D C0 00 00      cmp b, 0
0946   0940 C6 7B 09      je _while18_exit
0947   0943             _while18_block:
0948   0943             ;; result = result * 10 + (*str - '0'); 
0949   0943 FA FF FF      lea d, [bp + -1] ; $result
0950   0946 DA            push d
0951   0947 FA FF FF      lea d, [bp + -1] ; $result
0952   094A 2A            mov b, [d]
0953   094B             ; START FACTORS
0954   094B D7            push a
0955   094C 11            mov a, b
0956   094D 26 0A 00      mov b, $a
0957   0950 AC            mul a, b ; *
0958   0951 11            mov a, b
0959   0952 27            mov b, a
0960   0953 E4            pop a
0961   0954             ; END FACTORS
0962   0954             ; START TERMS
0963   0954 D7            push a
0964   0955 11            mov a, b
0965   0956 FA 05 00      lea d, [bp + 5] ; $str
0966   0959 2A            mov b, [d]
0967   095A 74            mov d, b
0968   095B 32            mov bl, [d]
0969   095C A7 00         mov bh, 0
0970   095E             ; START TERMS
0971   095E D7            push a
0972   095F 11            mov a, b
0973   0960 26 30 00      mov b, $30
0974   0963 60            sub a, b
0975   0964 27            mov b, a
0976   0965 E4            pop a
0977   0966             ; END TERMS
0978   0966 56            add b, a
0979   0967 E4            pop a
0980   0968             ; END TERMS
0981   0968 E7            pop d
0982   0969 FD 43         mov [d], b
0983   096B             ;; str++; 
0984   096B FA 05 00      lea d, [bp + 5] ; $str
0985   096E 2A            mov b, [d]
0986   096F FD 77         inc b
0987   0971 FA 05 00      lea d, [bp + 5] ; $str
0988   0974 FD 43         mov [d], b
0989   0976 FD 7D         dec b
0990   0978 0A 16 09      jmp _while18_cond
0991   097B             _while18_exit:
0992   097B             ;; return sign * result; 
0993   097B FA FD FF      lea d, [bp + -3] ; $sign
0994   097E 2A            mov b, [d]
0995   097F             ; START FACTORS
0996   097F D7            push a
0997   0980 11            mov a, b
0998   0981 FA FF FF      lea d, [bp + -1] ; $result
0999   0984 2A            mov b, [d]
1000   0985 AC            mul a, b ; *
1001   0986 11            mov a, b
1002   0987 27            mov b, a
1003   0988 E4            pop a
1004   0989             ; END FACTORS
1005   0989 F9            leave
1006   098A 09            ret
1007   098B             
1008   098B             rand:
1009   098B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1010   098E             ;; int  sec; 
1011   098E 52 02 00      sub sp, 2 ; sec
1012   0991             
1013   0991             ; --- BEGIN INLINE ASM BLOCK
1014   0991 19 00         mov al, 0
1015   0993 05 01         syscall sys_rtc					
1016   0995 1A            mov al, ah
1017   0996 FA FF FF      lea d, [bp + -1] ; $sec
1018   0999 1E            mov al, [d]
1019   099A 22 00         mov ah, 0
1020   099C             ; --- END INLINE ASM BLOCK
1021   099C             
1022   099C             ;; return sec; 
1023   099C FA FF FF      lea d, [bp + -1] ; $sec
1024   099F 2A            mov b, [d]
1025   09A0 F9            leave
1026   09A1 09            ret
1027   09A2             
1028   09A2             alloc:
1029   09A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1030   09A5             ;; heap_top = heap_top + bytes; 
1031   09A5 3B 6D 28      mov d, _heap_top ; $heap_top
1032   09A8 DA            push d
1033   09A9 3B 6D 28      mov d, _heap_top ; $heap_top
1034   09AC 2A            mov b, [d]
1035   09AD             ; START TERMS
1036   09AD D7            push a
1037   09AE 11            mov a, b
1038   09AF FA 05 00      lea d, [bp + 5] ; $bytes
1039   09B2 2A            mov b, [d]
1040   09B3 56            add b, a
1041   09B4 E4            pop a
1042   09B5             ; END TERMS
1043   09B5 E7            pop d
1044   09B6 FD 43         mov [d], b
1045   09B8             ;; return heap_top - bytes; 
1046   09B8 3B 6D 28      mov d, _heap_top ; $heap_top
1047   09BB 2A            mov b, [d]
1048   09BC             ; START TERMS
1049   09BC D7            push a
1050   09BD 11            mov a, b
1051   09BE FA 05 00      lea d, [bp + 5] ; $bytes
1052   09C1 2A            mov b, [d]
1053   09C2 60            sub a, b
1054   09C3 27            mov b, a
1055   09C4 E4            pop a
1056   09C5             ; END TERMS
1057   09C5 F9            leave
1058   09C6 09            ret
1059   09C7             
1060   09C7             free:
1061   09C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1062   09CA             ;; return heap_top = heap_top - bytes; 
1063   09CA 3B 6D 28      mov d, _heap_top ; $heap_top
1064   09CD DA            push d
1065   09CE 3B 6D 28      mov d, _heap_top ; $heap_top
1066   09D1 2A            mov b, [d]
1067   09D2             ; START TERMS
1068   09D2 D7            push a
1069   09D3 11            mov a, b
1070   09D4 FA 05 00      lea d, [bp + 5] ; $bytes
1071   09D7 2A            mov b, [d]
1072   09D8 60            sub a, b
1073   09D9 27            mov b, a
1074   09DA E4            pop a
1075   09DB             ; END TERMS
1076   09DB E7            pop d
1077   09DC FD 43         mov [d], b
1078   09DE F9            leave
1079   09DF 09            ret
1080   09E0             
1081   09E0             fopen:
1082   09E0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1083   09E3             ;; FILE *fp; 
1084   09E3 52 02 00      sub sp, 2 ; fp
1085   09E6             ;; fp = alloc(sizeof(int)); 
1086   09E6 FA FF FF      lea d, [bp + -1] ; $fp
1087   09E9 DA            push d
1088   09EA 26 02 00      mov b, 2
1089   09ED FD AB         swp b
1090   09EF D8            push b
1091   09F0 07 A2 09      call alloc
1092   09F3 51 02 00      add sp, 2
1093   09F6 E7            pop d
1094   09F7 FD 43         mov [d], b
1095   09F9 F9            leave
1096   09FA 09            ret
1097   09FB             
1098   09FB             printf:
1099   09FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1100   09FE             ;; char *p, *format_p; 
1101   09FE 52 02 00      sub sp, 2 ; p
1102   0A01 52 02 00      sub sp, 2 ; format_p
1103   0A04             ;; format_p = format; 
1104   0A04 FA FD FF      lea d, [bp + -3] ; $format_p
1105   0A07 DA            push d
1106   0A08 FA 05 00      lea d, [bp + 5] ; $format
1107   0A0B 2A            mov b, [d]
1108   0A0C E7            pop d
1109   0A0D FD 43         mov [d], b
1110   0A0F             ;; p = &format + 2; 
1111   0A0F FA FF FF      lea d, [bp + -1] ; $p
1112   0A12 DA            push d
1113   0A13 FA 05 00      lea d, [bp + 5] ; $format
1114   0A16 2D            mov b, d
1115   0A17             ; START TERMS
1116   0A17 D7            push a
1117   0A18 11            mov a, b
1118   0A19 26 02 00      mov b, $2
1119   0A1C 56            add b, a
1120   0A1D E4            pop a
1121   0A1E             ; END TERMS
1122   0A1E E7            pop d
1123   0A1F FD 43         mov [d], b
1124   0A21             ;; for(;;){ 
1125   0A21             _for19_init:
1126   0A21             _for19_cond:
1127   0A21             _for19_block:
1128   0A21             ;; if(!*format_p) break; 
1129   0A21             _if20_cond:
1130   0A21 FA FD FF      lea d, [bp + -3] ; $format_p
1131   0A24 2A            mov b, [d]
1132   0A25 74            mov d, b
1133   0A26 32            mov bl, [d]
1134   0A27 A7 00         mov bh, 0
1135   0A29 C0 00 00      cmp b, 0
1136   0A2C FD 71         seq ; !
1137   0A2E C0 00 00      cmp b, 0
1138   0A31 C6 3A 0A      je _if20_else
1139   0A34             _if20_true:
1140   0A34             ;; break; 
1141   0A34 0A 61 0C      jmp _for19_exit ; for break
1142   0A37 0A 5E 0C      jmp _if20_exit
1143   0A3A             _if20_else:
1144   0A3A             ;; if(*format_p == '%'){ 
1145   0A3A             _if21_cond:
1146   0A3A FA FD FF      lea d, [bp + -3] ; $format_p
1147   0A3D 2A            mov b, [d]
1148   0A3E 74            mov d, b
1149   0A3F 32            mov bl, [d]
1150   0A40 A7 00         mov bh, 0
1151   0A42             ; START RELATIONAL
1152   0A42 D7            push a
1153   0A43 11            mov a, b
1154   0A44 26 25 00      mov b, $25
1155   0A47 B0            cmp a, b
1156   0A48 FD 71         seq ; ==
1157   0A4A E4            pop a
1158   0A4B             ; END RELATIONAL
1159   0A4B C0 00 00      cmp b, 0
1160   0A4E C6 42 0C      je _if21_else
1161   0A51             _if21_true:
1162   0A51             ;; format_p++; 
1163   0A51 FA FD FF      lea d, [bp + -3] ; $format_p
1164   0A54 2A            mov b, [d]
1165   0A55 FD 77         inc b
1166   0A57 FA FD FF      lea d, [bp + -3] ; $format_p
1167   0A5A FD 43         mov [d], b
1168   0A5C FD 7D         dec b
1169   0A5E             ;; switch(*format_p){ 
1170   0A5E             _switch22_expr:
1171   0A5E FA FD FF      lea d, [bp + -3] ; $format_p
1172   0A61 2A            mov b, [d]
1173   0A62 74            mov d, b
1174   0A63 32            mov bl, [d]
1175   0A64 A7 00         mov bh, 0
1176   0A66             _switch22_comparisons:
1177   0A66 C1 6C         cmp bl, $6c
1178   0A68 C6 94 0A      je _switch22_case0
1179   0A6B C1 4C         cmp bl, $4c
1180   0A6D C6 94 0A      je _switch22_case1
1181   0A70 C1 64         cmp bl, $64
1182   0A72 C6 82 0B      je _switch22_case2
1183   0A75 C1 69         cmp bl, $69
1184   0A77 C6 82 0B      je _switch22_case3
1185   0A7A C1 75         cmp bl, $75
1186   0A7C C6 A6 0B      je _switch22_case4
1187   0A7F C1 78         cmp bl, $78
1188   0A81 C6 CA 0B      je _switch22_case5
1189   0A84 C1 63         cmp bl, $63
1190   0A86 C6 E8 0B      je _switch22_case6
1191   0A89 C1 73         cmp bl, $73
1192   0A8B C6 07 0C      je _switch22_case7
1193   0A8E 0A 26 0C      jmp _switch22_default
1194   0A91 0A 32 0C      jmp _switch22_exit
1195   0A94             _switch22_case0:
1196   0A94             _switch22_case1:
1197   0A94             ;; format_p++; 
1198   0A94 FA FD FF      lea d, [bp + -3] ; $format_p
1199   0A97 2A            mov b, [d]
1200   0A98 FD 77         inc b
1201   0A9A FA FD FF      lea d, [bp + -3] ; $format_p
1202   0A9D FD 43         mov [d], b
1203   0A9F FD 7D         dec b
1204   0AA1             ;; if(*format_p == 'd' || *format_p == 'i') 
1205   0AA1             _if23_cond:
1206   0AA1 FA FD FF      lea d, [bp + -3] ; $format_p
1207   0AA4 2A            mov b, [d]
1208   0AA5 74            mov d, b
1209   0AA6 32            mov bl, [d]
1210   0AA7 A7 00         mov bh, 0
1211   0AA9             ; START RELATIONAL
1212   0AA9 D7            push a
1213   0AAA 11            mov a, b
1214   0AAB 26 64 00      mov b, $64
1215   0AAE B0            cmp a, b
1216   0AAF FD 71         seq ; ==
1217   0AB1 E4            pop a
1218   0AB2             ; END RELATIONAL
1219   0AB2             ; START LOGICAL OR
1220   0AB2 D7            push a
1221   0AB3 11            mov a, b
1222   0AB4 FA FD FF      lea d, [bp + -3] ; $format_p
1223   0AB7 2A            mov b, [d]
1224   0AB8 74            mov d, b
1225   0AB9 32            mov bl, [d]
1226   0ABA A7 00         mov bh, 0
1227   0ABC             ; START RELATIONAL
1228   0ABC D7            push a
1229   0ABD 11            mov a, b
1230   0ABE 26 69 00      mov b, $69
1231   0AC1 B0            cmp a, b
1232   0AC2 FD 71         seq ; ==
1233   0AC4 E4            pop a
1234   0AC5             ; END RELATIONAL
1235   0AC5 FD A8         sor a, b ; ||
1236   0AC7 E4            pop a
1237   0AC8             ; END LOGICAL OR
1238   0AC8 C0 00 00      cmp b, 0
1239   0ACB C6 F0 0A      je _if23_else
1240   0ACE             _if23_true:
1241   0ACE             ;; print_signed_long(*(long *)p); 
1242   0ACE FA FF FF      lea d, [bp + -1] ; $p
1243   0AD1 2A            mov b, [d]
1244   0AD2 AB            snex b
1245   0AD3 FD 39         mov c, b
1246   0AD5 74            mov d, b
1247   0AD6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1248   0AD9 FD 39         mov c, b ; And place it into C
1249   0ADB 2A            mov b, [d] ; Lower Word in B
1250   0ADC FD 79         mov g, b
1251   0ADE 28            mov b, c
1252   0ADF FD AB         swp b
1253   0AE1 D8            push b
1254   0AE2 FD 27         mov b, g
1255   0AE4 FD AB         swp b
1256   0AE6 D8            push b
1257   0AE7 07 47 11      call print_signed_long
1258   0AEA 51 04 00      add sp, 4
1259   0AED 0A 6D 0B      jmp _if23_exit
1260   0AF0             _if23_else:
1261   0AF0             ;; if(*format_p == 'u') 
1262   0AF0             _if24_cond:
1263   0AF0 FA FD FF      lea d, [bp + -3] ; $format_p
1264   0AF3 2A            mov b, [d]
1265   0AF4 74            mov d, b
1266   0AF5 32            mov bl, [d]
1267   0AF6 A7 00         mov bh, 0
1268   0AF8             ; START RELATIONAL
1269   0AF8 D7            push a
1270   0AF9 11            mov a, b
1271   0AFA 26 75 00      mov b, $75
1272   0AFD B0            cmp a, b
1273   0AFE FD 71         seq ; ==
1274   0B00 E4            pop a
1275   0B01             ; END RELATIONAL
1276   0B01 C0 00 00      cmp b, 0
1277   0B04 C6 2B 0B      je _if24_else
1278   0B07             _if24_true:
1279   0B07             ;; print_unsigned_long(*(unsigned long *)p); 
1280   0B07 FA FF FF      lea d, [bp + -1] ; $p
1281   0B0A 2A            mov b, [d]
1282   0B0B A7 00         mov bh, 0
1283   0B0D 38 00 00      mov c, 0
1284   0B10 74            mov d, b
1285   0B11 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1286   0B14 FD 39         mov c, b ; And place it into C
1287   0B16 2A            mov b, [d] ; Lower Word in B
1288   0B17 FD 79         mov g, b
1289   0B19 28            mov b, c
1290   0B1A FD AB         swp b
1291   0B1C D8            push b
1292   0B1D FD 27         mov b, g
1293   0B1F FD AB         swp b
1294   0B21 D8            push b
1295   0B22 07 87 14      call print_unsigned_long
1296   0B25 51 04 00      add sp, 4
1297   0B28 0A 6D 0B      jmp _if24_exit
1298   0B2B             _if24_else:
1299   0B2B             ;; if(*format_p == 'x') 
1300   0B2B             _if25_cond:
1301   0B2B FA FD FF      lea d, [bp + -3] ; $format_p
1302   0B2E 2A            mov b, [d]
1303   0B2F 74            mov d, b
1304   0B30 32            mov bl, [d]
1305   0B31 A7 00         mov bh, 0
1306   0B33             ; START RELATIONAL
1307   0B33 D7            push a
1308   0B34 11            mov a, b
1309   0B35 26 78 00      mov b, $78
1310   0B38 B0            cmp a, b
1311   0B39 FD 71         seq ; ==
1312   0B3B E4            pop a
1313   0B3C             ; END RELATIONAL
1314   0B3C C0 00 00      cmp b, 0
1315   0B3F C6 61 0B      je _if25_else
1316   0B42             _if25_true:
1317   0B42             ;; printx32(*(long int *)p); 
1318   0B42 FA FF FF      lea d, [bp + -1] ; $p
1319   0B45 2A            mov b, [d]
1320   0B46 74            mov d, b
1321   0B47 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1322   0B4A FD 39         mov c, b ; And place it into C
1323   0B4C 2A            mov b, [d] ; Lower Word in B
1324   0B4D FD 79         mov g, b
1325   0B4F 28            mov b, c
1326   0B50 FD AB         swp b
1327   0B52 D8            push b
1328   0B53 FD 27         mov b, g
1329   0B55 FD AB         swp b
1330   0B57 D8            push b
1331   0B58 07 BC 0E      call printx32
1332   0B5B 51 04 00      add sp, 4
1333   0B5E 0A 6D 0B      jmp _if25_exit
1334   0B61             _if25_else:
1335   0B61             ;; err("Unexpected format in printf."); 
1336   0B61 26 23 28      mov b, _s1 ; "Unexpected format in printf."
1337   0B64 FD AB         swp b
1338   0B66 D8            push b
1339   0B67 07 AA 0E      call err
1340   0B6A 51 02 00      add sp, 2
1341   0B6D             _if25_exit:
1342   0B6D             _if24_exit:
1343   0B6D             _if23_exit:
1344   0B6D             ;; p = p + 4; 
1345   0B6D FA FF FF      lea d, [bp + -1] ; $p
1346   0B70 DA            push d
1347   0B71 FA FF FF      lea d, [bp + -1] ; $p
1348   0B74 2A            mov b, [d]
1349   0B75             ; START TERMS
1350   0B75 D7            push a
1351   0B76 11            mov a, b
1352   0B77 26 04 00      mov b, $4
1353   0B7A 56            add b, a
1354   0B7B E4            pop a
1355   0B7C             ; END TERMS
1356   0B7C E7            pop d
1357   0B7D FD 43         mov [d], b
1358   0B7F             ;; break; 
1359   0B7F 0A 32 0C      jmp _switch22_exit ; case break
1360   0B82             _switch22_case2:
1361   0B82             _switch22_case3:
1362   0B82             ;; print_signed(*(int*)p); 
1363   0B82 FA FF FF      lea d, [bp + -1] ; $p
1364   0B85 2A            mov b, [d]
1365   0B86 74            mov d, b
1366   0B87 2A            mov b, [d]
1367   0B88 FD AB         swp b
1368   0B8A D8            push b
1369   0B8B 07 50 10      call print_signed
1370   0B8E 51 02 00      add sp, 2
1371   0B91             ;; p = p + 2; 
1372   0B91 FA FF FF      lea d, [bp + -1] ; $p
1373   0B94 DA            push d
1374   0B95 FA FF FF      lea d, [bp + -1] ; $p
1375   0B98 2A            mov b, [d]
1376   0B99             ; START TERMS
1377   0B99 D7            push a
1378   0B9A 11            mov a, b
1379   0B9B 26 02 00      mov b, $2
1380   0B9E 56            add b, a
1381   0B9F E4            pop a
1382   0BA0             ; END TERMS
1383   0BA0 E7            pop d
1384   0BA1 FD 43         mov [d], b
1385   0BA3             ;; break; 
1386   0BA3 0A 32 0C      jmp _switch22_exit ; case break
1387   0BA6             _switch22_case4:
1388   0BA6             ;; print_unsigned(*(unsigned int*)p); 
1389   0BA6 FA FF FF      lea d, [bp + -1] ; $p
1390   0BA9 2A            mov b, [d]
1391   0BAA 74            mov d, b
1392   0BAB 2A            mov b, [d]
1393   0BAC FD AB         swp b
1394   0BAE D8            push b
1395   0BAF 07 82 16      call print_unsigned
1396   0BB2 51 02 00      add sp, 2
1397   0BB5             ;; p = p + 2; 
1398   0BB5 FA FF FF      lea d, [bp + -1] ; $p
1399   0BB8 DA            push d
1400   0BB9 FA FF FF      lea d, [bp + -1] ; $p
1401   0BBC 2A            mov b, [d]
1402   0BBD             ; START TERMS
1403   0BBD D7            push a
1404   0BBE 11            mov a, b
1405   0BBF 26 02 00      mov b, $2
1406   0BC2 56            add b, a
1407   0BC3 E4            pop a
1408   0BC4             ; END TERMS
1409   0BC4 E7            pop d
1410   0BC5 FD 43         mov [d], b
1411   0BC7             ;; break; 
1412   0BC7 0A 32 0C      jmp _switch22_exit ; case break
1413   0BCA             _switch22_case5:
1414   0BCA             
1415   0BCA             ; --- BEGIN INLINE ASM BLOCK
1416   0BCA FA FF FF      lea d, [bp + -1] ; $p
1417   0BCD FD 2A         mov d, [d]
1418   0BCF 2A            mov b, [d]
1419   0BD0 07 88 1A      call print_u16x
1420   0BD3             ; --- END INLINE ASM BLOCK
1421   0BD3             
1422   0BD3             ;; p = p + 2; 
1423   0BD3 FA FF FF      lea d, [bp + -1] ; $p
1424   0BD6 DA            push d
1425   0BD7 FA FF FF      lea d, [bp + -1] ; $p
1426   0BDA 2A            mov b, [d]
1427   0BDB             ; START TERMS
1428   0BDB D7            push a
1429   0BDC 11            mov a, b
1430   0BDD 26 02 00      mov b, $2
1431   0BE0 56            add b, a
1432   0BE1 E4            pop a
1433   0BE2             ; END TERMS
1434   0BE2 E7            pop d
1435   0BE3 FD 43         mov [d], b
1436   0BE5             ;; break; 
1437   0BE5 0A 32 0C      jmp _switch22_exit ; case break
1438   0BE8             _switch22_case6:
1439   0BE8             
1440   0BE8             ; --- BEGIN INLINE ASM BLOCK
1441   0BE8 FA FF FF      lea d, [bp + -1] ; $p
1442   0BEB FD 2A         mov d, [d]
1443   0BED 1E            mov al, [d]
1444   0BEE 23            mov ah, al
1445   0BEF 07 E6 18      call _putchar
1446   0BF2             ; --- END INLINE ASM BLOCK
1447   0BF2             
1448   0BF2             ;; p = p + 2; 
1449   0BF2 FA FF FF      lea d, [bp + -1] ; $p
1450   0BF5 DA            push d
1451   0BF6 FA FF FF      lea d, [bp + -1] ; $p
1452   0BF9 2A            mov b, [d]
1453   0BFA             ; START TERMS
1454   0BFA D7            push a
1455   0BFB 11            mov a, b
1456   0BFC 26 02 00      mov b, $2
1457   0BFF 56            add b, a
1458   0C00 E4            pop a
1459   0C01             ; END TERMS
1460   0C01 E7            pop d
1461   0C02 FD 43         mov [d], b
1462   0C04             ;; break; 
1463   0C04 0A 32 0C      jmp _switch22_exit ; case break
1464   0C07             _switch22_case7:
1465   0C07             
1466   0C07             ; --- BEGIN INLINE ASM BLOCK
1467   0C07 FA FF FF      lea d, [bp + -1] ; $p
1468   0C0A FD 2A         mov d, [d]
1469   0C0C FD 2A         mov d, [d]
1470   0C0E 07 30 1A      call _puts
1471   0C11             ; --- END INLINE ASM BLOCK
1472   0C11             
1473   0C11             ;; p = p + 2; 
1474   0C11 FA FF FF      lea d, [bp + -1] ; $p
1475   0C14 DA            push d
1476   0C15 FA FF FF      lea d, [bp + -1] ; $p
1477   0C18 2A            mov b, [d]
1478   0C19             ; START TERMS
1479   0C19 D7            push a
1480   0C1A 11            mov a, b
1481   0C1B 26 02 00      mov b, $2
1482   0C1E 56            add b, a
1483   0C1F E4            pop a
1484   0C20             ; END TERMS
1485   0C20 E7            pop d
1486   0C21 FD 43         mov [d], b
1487   0C23             ;; break; 
1488   0C23 0A 32 0C      jmp _switch22_exit ; case break
1489   0C26             _switch22_default:
1490   0C26             ;; print("Error: Unknown argument type.\n"); 
1491   0C26 26 40 28      mov b, _s2 ; "Error: Unknown argument type.\n"
1492   0C29 FD AB         swp b
1493   0C2B D8            push b
1494   0C2C 07 9D 17      call print
1495   0C2F 51 02 00      add sp, 2
1496   0C32             _switch22_exit:
1497   0C32             ;; format_p++; 
1498   0C32 FA FD FF      lea d, [bp + -3] ; $format_p
1499   0C35 2A            mov b, [d]
1500   0C36 FD 77         inc b
1501   0C38 FA FD FF      lea d, [bp + -3] ; $format_p
1502   0C3B FD 43         mov [d], b
1503   0C3D FD 7D         dec b
1504   0C3F 0A 5E 0C      jmp _if21_exit
1505   0C42             _if21_else:
1506   0C42             ;; putchar(*format_p); 
1507   0C42 FA FD FF      lea d, [bp + -3] ; $format_p
1508   0C45 2A            mov b, [d]
1509   0C46 74            mov d, b
1510   0C47 32            mov bl, [d]
1511   0C48 A7 00         mov bh, 0
1512   0C4A DD            push bl
1513   0C4B 07 55 17      call putchar
1514   0C4E 51 01 00      add sp, 1
1515   0C51             ;; format_p++; 
1516   0C51 FA FD FF      lea d, [bp + -3] ; $format_p
1517   0C54 2A            mov b, [d]
1518   0C55 FD 77         inc b
1519   0C57 FA FD FF      lea d, [bp + -3] ; $format_p
1520   0C5A FD 43         mov [d], b
1521   0C5C FD 7D         dec b
1522   0C5E             _if21_exit:
1523   0C5E             _if20_exit:
1524   0C5E             _for19_update:
1525   0C5E 0A 21 0A      jmp _for19_cond
1526   0C61             _for19_exit:
1527   0C61 F9            leave
1528   0C62 09            ret
1529   0C63             
1530   0C63             scanf:
1531   0C63 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1532   0C66             ;; char *p, *format_p; 
1533   0C66 52 02 00      sub sp, 2 ; p
1534   0C69 52 02 00      sub sp, 2 ; format_p
1535   0C6C             ;; char c; 
1536   0C6C 52 01 00      sub sp, 1 ; c
1537   0C6F             ;; int i; 
1538   0C6F 52 02 00      sub sp, 2 ; i
1539   0C72             ;; char input_string[  512                    ]; 
1540   0C72 52 00 02      sub sp, 512 ; input_string
1541   0C75             ;; format_p = format; 
1542   0C75 FA FD FF      lea d, [bp + -3] ; $format_p
1543   0C78 DA            push d
1544   0C79 FA 05 00      lea d, [bp + 5] ; $format
1545   0C7C 2A            mov b, [d]
1546   0C7D E7            pop d
1547   0C7E FD 43         mov [d], b
1548   0C80             ;; p = &format + 2; 
1549   0C80 FA FF FF      lea d, [bp + -1] ; $p
1550   0C83 DA            push d
1551   0C84 FA 05 00      lea d, [bp + 5] ; $format
1552   0C87 2D            mov b, d
1553   0C88             ; START TERMS
1554   0C88 D7            push a
1555   0C89 11            mov a, b
1556   0C8A 26 02 00      mov b, $2
1557   0C8D 56            add b, a
1558   0C8E E4            pop a
1559   0C8F             ; END TERMS
1560   0C8F E7            pop d
1561   0C90 FD 43         mov [d], b
1562   0C92             ;; for(;;){ 
1563   0C92             _for26_init:
1564   0C92             _for26_cond:
1565   0C92             _for26_block:
1566   0C92             ;; if(!*format_p) break; 
1567   0C92             _if27_cond:
1568   0C92 FA FD FF      lea d, [bp + -3] ; $format_p
1569   0C95 2A            mov b, [d]
1570   0C96 74            mov d, b
1571   0C97 32            mov bl, [d]
1572   0C98 A7 00         mov bh, 0
1573   0C9A C0 00 00      cmp b, 0
1574   0C9D FD 71         seq ; !
1575   0C9F C0 00 00      cmp b, 0
1576   0CA2 C6 AB 0C      je _if27_else
1577   0CA5             _if27_true:
1578   0CA5             ;; break; 
1579   0CA5 0A A8 0E      jmp _for26_exit ; for break
1580   0CA8 0A A5 0E      jmp _if27_exit
1581   0CAB             _if27_else:
1582   0CAB             ;; if(*format_p == '%'){ 
1583   0CAB             _if28_cond:
1584   0CAB FA FD FF      lea d, [bp + -3] ; $format_p
1585   0CAE 2A            mov b, [d]
1586   0CAF 74            mov d, b
1587   0CB0 32            mov bl, [d]
1588   0CB1 A7 00         mov bh, 0
1589   0CB3             ; START RELATIONAL
1590   0CB3 D7            push a
1591   0CB4 11            mov a, b
1592   0CB5 26 25 00      mov b, $25
1593   0CB8 B0            cmp a, b
1594   0CB9 FD 71         seq ; ==
1595   0CBB E4            pop a
1596   0CBC             ; END RELATIONAL
1597   0CBC C0 00 00      cmp b, 0
1598   0CBF C6 89 0E      je _if28_else
1599   0CC2             _if28_true:
1600   0CC2             ;; format_p++; 
1601   0CC2 FA FD FF      lea d, [bp + -3] ; $format_p
1602   0CC5 2A            mov b, [d]
1603   0CC6 FD 77         inc b
1604   0CC8 FA FD FF      lea d, [bp + -3] ; $format_p
1605   0CCB FD 43         mov [d], b
1606   0CCD FD 7D         dec b
1607   0CCF             ;; switch(*format_p){ 
1608   0CCF             _switch29_expr:
1609   0CCF FA FD FF      lea d, [bp + -3] ; $format_p
1610   0CD2 2A            mov b, [d]
1611   0CD3 74            mov d, b
1612   0CD4 32            mov bl, [d]
1613   0CD5 A7 00         mov bh, 0
1614   0CD7             _switch29_comparisons:
1615   0CD7 C1 6C         cmp bl, $6c
1616   0CD9 C6 05 0D      je _switch29_case0
1617   0CDC C1 4C         cmp bl, $4c
1618   0CDE C6 05 0D      je _switch29_case1
1619   0CE1 C1 64         cmp bl, $64
1620   0CE3 C6 97 0D      je _switch29_case2
1621   0CE6 C1 69         cmp bl, $69
1622   0CE8 C6 97 0D      je _switch29_case3
1623   0CEB C1 75         cmp bl, $75
1624   0CED C6 C4 0D      je _switch29_case4
1625   0CF0 C1 78         cmp bl, $78
1626   0CF2 C6 F1 0D      je _switch29_case5
1627   0CF5 C1 63         cmp bl, $63
1628   0CF7 C6 06 0E      je _switch29_case6
1629   0CFA C1 73         cmp bl, $73
1630   0CFC C6 35 0E      je _switch29_case7
1631   0CFF 0A 6D 0E      jmp _switch29_default
1632   0D02 0A 79 0E      jmp _switch29_exit
1633   0D05             _switch29_case0:
1634   0D05             _switch29_case1:
1635   0D05             ;; format_p++; 
1636   0D05 FA FD FF      lea d, [bp + -3] ; $format_p
1637   0D08 2A            mov b, [d]
1638   0D09 FD 77         inc b
1639   0D0B FA FD FF      lea d, [bp + -3] ; $format_p
1640   0D0E FD 43         mov [d], b
1641   0D10 FD 7D         dec b
1642   0D12             ;; if(*format_p == 'd' || *format_p == 'i'); 
1643   0D12             _if30_cond:
1644   0D12 FA FD FF      lea d, [bp + -3] ; $format_p
1645   0D15 2A            mov b, [d]
1646   0D16 74            mov d, b
1647   0D17 32            mov bl, [d]
1648   0D18 A7 00         mov bh, 0
1649   0D1A             ; START RELATIONAL
1650   0D1A D7            push a
1651   0D1B 11            mov a, b
1652   0D1C 26 64 00      mov b, $64
1653   0D1F B0            cmp a, b
1654   0D20 FD 71         seq ; ==
1655   0D22 E4            pop a
1656   0D23             ; END RELATIONAL
1657   0D23             ; START LOGICAL OR
1658   0D23 D7            push a
1659   0D24 11            mov a, b
1660   0D25 FA FD FF      lea d, [bp + -3] ; $format_p
1661   0D28 2A            mov b, [d]
1662   0D29 74            mov d, b
1663   0D2A 32            mov bl, [d]
1664   0D2B A7 00         mov bh, 0
1665   0D2D             ; START RELATIONAL
1666   0D2D D7            push a
1667   0D2E 11            mov a, b
1668   0D2F 26 69 00      mov b, $69
1669   0D32 B0            cmp a, b
1670   0D33 FD 71         seq ; ==
1671   0D35 E4            pop a
1672   0D36             ; END RELATIONAL
1673   0D36 FD A8         sor a, b ; ||
1674   0D38 E4            pop a
1675   0D39             ; END LOGICAL OR
1676   0D39 C0 00 00      cmp b, 0
1677   0D3C C6 42 0D      je _if30_else
1678   0D3F             _if30_true:
1679   0D3F             ;; ; 
1680   0D3F 0A 82 0D      jmp _if30_exit
1681   0D42             _if30_else:
1682   0D42             ;; if(*format_p == 'u'); 
1683   0D42             _if31_cond:
1684   0D42 FA FD FF      lea d, [bp + -3] ; $format_p
1685   0D45 2A            mov b, [d]
1686   0D46 74            mov d, b
1687   0D47 32            mov bl, [d]
1688   0D48 A7 00         mov bh, 0
1689   0D4A             ; START RELATIONAL
1690   0D4A D7            push a
1691   0D4B 11            mov a, b
1692   0D4C 26 75 00      mov b, $75
1693   0D4F B0            cmp a, b
1694   0D50 FD 71         seq ; ==
1695   0D52 E4            pop a
1696   0D53             ; END RELATIONAL
1697   0D53 C0 00 00      cmp b, 0
1698   0D56 C6 5C 0D      je _if31_else
1699   0D59             _if31_true:
1700   0D59             ;; ; 
1701   0D59 0A 82 0D      jmp _if31_exit
1702   0D5C             _if31_else:
1703   0D5C             ;; if(*format_p == 'x'); 
1704   0D5C             _if32_cond:
1705   0D5C FA FD FF      lea d, [bp + -3] ; $format_p
1706   0D5F 2A            mov b, [d]
1707   0D60 74            mov d, b
1708   0D61 32            mov bl, [d]
1709   0D62 A7 00         mov bh, 0
1710   0D64             ; START RELATIONAL
1711   0D64 D7            push a
1712   0D65 11            mov a, b
1713   0D66 26 78 00      mov b, $78
1714   0D69 B0            cmp a, b
1715   0D6A FD 71         seq ; ==
1716   0D6C E4            pop a
1717   0D6D             ; END RELATIONAL
1718   0D6D C0 00 00      cmp b, 0
1719   0D70 C6 76 0D      je _if32_else
1720   0D73             _if32_true:
1721   0D73             ;; ; 
1722   0D73 0A 82 0D      jmp _if32_exit
1723   0D76             _if32_else:
1724   0D76             ;; err("Unexpected format in printf."); 
1725   0D76 26 23 28      mov b, _s1 ; "Unexpected format in printf."
1726   0D79 FD AB         swp b
1727   0D7B D8            push b
1728   0D7C 07 AA 0E      call err
1729   0D7F 51 02 00      add sp, 2
1730   0D82             _if32_exit:
1731   0D82             _if31_exit:
1732   0D82             _if30_exit:
1733   0D82             ;; p = p + 4; 
1734   0D82 FA FF FF      lea d, [bp + -1] ; $p
1735   0D85 DA            push d
1736   0D86 FA FF FF      lea d, [bp + -1] ; $p
1737   0D89 2A            mov b, [d]
1738   0D8A             ; START TERMS
1739   0D8A D7            push a
1740   0D8B 11            mov a, b
1741   0D8C 26 04 00      mov b, $4
1742   0D8F 56            add b, a
1743   0D90 E4            pop a
1744   0D91             ; END TERMS
1745   0D91 E7            pop d
1746   0D92 FD 43         mov [d], b
1747   0D94             ;; break; 
1748   0D94 0A 79 0E      jmp _switch29_exit ; case break
1749   0D97             _switch29_case2:
1750   0D97             _switch29_case3:
1751   0D97             ;; i = scann(); 
1752   0D97 FA FA FF      lea d, [bp + -6] ; $i
1753   0D9A DA            push d
1754   0D9B 07 78 17      call scann
1755   0D9E E7            pop d
1756   0D9F FD 43         mov [d], b
1757   0DA1             ;; **(int **)p = i; 
1758   0DA1 FA FF FF      lea d, [bp + -1] ; $p
1759   0DA4 2A            mov b, [d]
1760   0DA5 74            mov d, b
1761   0DA6 2A            mov b, [d]
1762   0DA7 D8            push b
1763   0DA8 FA FA FF      lea d, [bp + -6] ; $i
1764   0DAB 2A            mov b, [d]
1765   0DAC E7            pop d
1766   0DAD FD 43         mov [d], b
1767   0DAF             ;; p = p + 2; 
1768   0DAF FA FF FF      lea d, [bp + -1] ; $p
1769   0DB2 DA            push d
1770   0DB3 FA FF FF      lea d, [bp + -1] ; $p
1771   0DB6 2A            mov b, [d]
1772   0DB7             ; START TERMS
1773   0DB7 D7            push a
1774   0DB8 11            mov a, b
1775   0DB9 26 02 00      mov b, $2
1776   0DBC 56            add b, a
1777   0DBD E4            pop a
1778   0DBE             ; END TERMS
1779   0DBE E7            pop d
1780   0DBF FD 43         mov [d], b
1781   0DC1             ;; break; 
1782   0DC1 0A 79 0E      jmp _switch29_exit ; case break
1783   0DC4             _switch29_case4:
1784   0DC4             ;; i = scann(); 
1785   0DC4 FA FA FF      lea d, [bp + -6] ; $i
1786   0DC7 DA            push d
1787   0DC8 07 78 17      call scann
1788   0DCB E7            pop d
1789   0DCC FD 43         mov [d], b
1790   0DCE             ;; **(int **)p = i; 
1791   0DCE FA FF FF      lea d, [bp + -1] ; $p
1792   0DD1 2A            mov b, [d]
1793   0DD2 74            mov d, b
1794   0DD3 2A            mov b, [d]
1795   0DD4 D8            push b
1796   0DD5 FA FA FF      lea d, [bp + -6] ; $i
1797   0DD8 2A            mov b, [d]
1798   0DD9 E7            pop d
1799   0DDA FD 43         mov [d], b
1800   0DDC             ;; p = p + 2; 
1801   0DDC FA FF FF      lea d, [bp + -1] ; $p
1802   0DDF DA            push d
1803   0DE0 FA FF FF      lea d, [bp + -1] ; $p
1804   0DE3 2A            mov b, [d]
1805   0DE4             ; START TERMS
1806   0DE4 D7            push a
1807   0DE5 11            mov a, b
1808   0DE6 26 02 00      mov b, $2
1809   0DE9 56            add b, a
1810   0DEA E4            pop a
1811   0DEB             ; END TERMS
1812   0DEB E7            pop d
1813   0DEC FD 43         mov [d], b
1814   0DEE             ;; break; 
1815   0DEE 0A 79 0E      jmp _switch29_exit ; case break
1816   0DF1             _switch29_case5:
1817   0DF1             ;; p = p + 2; 
1818   0DF1 FA FF FF      lea d, [bp + -1] ; $p
1819   0DF4 DA            push d
1820   0DF5 FA FF FF      lea d, [bp + -1] ; $p
1821   0DF8 2A            mov b, [d]
1822   0DF9             ; START TERMS
1823   0DF9 D7            push a
1824   0DFA 11            mov a, b
1825   0DFB 26 02 00      mov b, $2
1826   0DFE 56            add b, a
1827   0DFF E4            pop a
1828   0E00             ; END TERMS
1829   0E00 E7            pop d
1830   0E01 FD 43         mov [d], b
1831   0E03             ;; break; 
1832   0E03 0A 79 0E      jmp _switch29_exit ; case break
1833   0E06             _switch29_case6:
1834   0E06             ;; c = getchar(); 
1835   0E06 FA FC FF      lea d, [bp + -4] ; $c
1836   0E09 DA            push d
1837   0E0A 07 62 17      call getchar
1838   0E0D E7            pop d
1839   0E0E FD 3E         mov [d], bl
1840   0E10             ;; **(char **)p = c; 
1841   0E10 FA FF FF      lea d, [bp + -1] ; $p
1842   0E13 2A            mov b, [d]
1843   0E14 74            mov d, b
1844   0E15 2A            mov b, [d]
1845   0E16 D8            push b
1846   0E17 FA FC FF      lea d, [bp + -4] ; $c
1847   0E1A 32            mov bl, [d]
1848   0E1B A7 00         mov bh, 0
1849   0E1D E7            pop d
1850   0E1E FD 43         mov [d], b
1851   0E20             ;; p = p + 2; 
1852   0E20 FA FF FF      lea d, [bp + -1] ; $p
1853   0E23 DA            push d
1854   0E24 FA FF FF      lea d, [bp + -1] ; $p
1855   0E27 2A            mov b, [d]
1856   0E28             ; START TERMS
1857   0E28 D7            push a
1858   0E29 11            mov a, b
1859   0E2A 26 02 00      mov b, $2
1860   0E2D 56            add b, a
1861   0E2E E4            pop a
1862   0E2F             ; END TERMS
1863   0E2F E7            pop d
1864   0E30 FD 43         mov [d], b
1865   0E32             ;; break; 
1866   0E32 0A 79 0E      jmp _switch29_exit ; case break
1867   0E35             _switch29_case7:
1868   0E35             ;; gets(input_string); 
1869   0E35 FA FA FD      lea d, [bp + -518] ; $input_string
1870   0E38 2D            mov b, d
1871   0E39 FD AB         swp b
1872   0E3B D8            push b
1873   0E3C 07 36 10      call gets
1874   0E3F 51 02 00      add sp, 2
1875   0E42             ;; strcpy(*(char **)p, input_string); 
1876   0E42 FA FA FD      lea d, [bp + -518] ; $input_string
1877   0E45 2D            mov b, d
1878   0E46 FD AB         swp b
1879   0E48 D8            push b
1880   0E49 FA FF FF      lea d, [bp + -1] ; $p
1881   0E4C 2A            mov b, [d]
1882   0E4D 74            mov d, b
1883   0E4E 2A            mov b, [d]
1884   0E4F FD AB         swp b
1885   0E51 D8            push b
1886   0E52 07 55 06      call strcpy
1887   0E55 51 04 00      add sp, 4
1888   0E58             ;; p = p + 2; 
1889   0E58 FA FF FF      lea d, [bp + -1] ; $p
1890   0E5B DA            push d
1891   0E5C FA FF FF      lea d, [bp + -1] ; $p
1892   0E5F 2A            mov b, [d]
1893   0E60             ; START TERMS
1894   0E60 D7            push a
1895   0E61 11            mov a, b
1896   0E62 26 02 00      mov b, $2
1897   0E65 56            add b, a
1898   0E66 E4            pop a
1899   0E67             ; END TERMS
1900   0E67 E7            pop d
1901   0E68 FD 43         mov [d], b
1902   0E6A             ;; break; 
1903   0E6A 0A 79 0E      jmp _switch29_exit ; case break
1904   0E6D             _switch29_default:
1905   0E6D             ;; print("Error: Unknown argument type.\n"); 
1906   0E6D 26 40 28      mov b, _s2 ; "Error: Unknown argument type.\n"
1907   0E70 FD AB         swp b
1908   0E72 D8            push b
1909   0E73 07 9D 17      call print
1910   0E76 51 02 00      add sp, 2
1911   0E79             _switch29_exit:
1912   0E79             ;; format_p++; 
1913   0E79 FA FD FF      lea d, [bp + -3] ; $format_p
1914   0E7C 2A            mov b, [d]
1915   0E7D FD 77         inc b
1916   0E7F FA FD FF      lea d, [bp + -3] ; $format_p
1917   0E82 FD 43         mov [d], b
1918   0E84 FD 7D         dec b
1919   0E86 0A A5 0E      jmp _if28_exit
1920   0E89             _if28_else:
1921   0E89             ;; putchar(*format_p); 
1922   0E89 FA FD FF      lea d, [bp + -3] ; $format_p
1923   0E8C 2A            mov b, [d]
1924   0E8D 74            mov d, b
1925   0E8E 32            mov bl, [d]
1926   0E8F A7 00         mov bh, 0
1927   0E91 DD            push bl
1928   0E92 07 55 17      call putchar
1929   0E95 51 01 00      add sp, 1
1930   0E98             ;; format_p++; 
1931   0E98 FA FD FF      lea d, [bp + -3] ; $format_p
1932   0E9B 2A            mov b, [d]
1933   0E9C FD 77         inc b
1934   0E9E FA FD FF      lea d, [bp + -3] ; $format_p
1935   0EA1 FD 43         mov [d], b
1936   0EA3 FD 7D         dec b
1937   0EA5             _if28_exit:
1938   0EA5             _if27_exit:
1939   0EA5             _for26_update:
1940   0EA5 0A 92 0C      jmp _for26_cond
1941   0EA8             _for26_exit:
1942   0EA8 F9            leave
1943   0EA9 09            ret
1944   0EAA             
1945   0EAA             err:
1946   0EAA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1947   0EAD             ;; print(e); 
1948   0EAD FA 05 00      lea d, [bp + 5] ; $e
1949   0EB0 2A            mov b, [d]
1950   0EB1 FD AB         swp b
1951   0EB3 D8            push b
1952   0EB4 07 9D 17      call print
1953   0EB7 51 02 00      add sp, 2
1954   0EBA F9            leave
1955   0EBB 09            ret
1956   0EBC             
1957   0EBC             printx32:
1958   0EBC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1959   0EBF             
1960   0EBF             ; --- BEGIN INLINE ASM BLOCK
1961   0EBF FA 05 00      lea d, [bp + 5] ; $hex
1962   0EC2 2B 02 00      mov b, [d+2]
1963   0EC5 07 88 1A      call print_u16x
1964   0EC8 2A            mov b, [d]
1965   0EC9 07 88 1A      call print_u16x
1966   0ECC             ; --- END INLINE ASM BLOCK
1967   0ECC             
1968   0ECC F9            leave
1969   0ECD 09            ret
1970   0ECE             
1971   0ECE             printx16:
1972   0ECE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1973   0ED1             
1974   0ED1             ; --- BEGIN INLINE ASM BLOCK
1975   0ED1 FA 05 00      lea d, [bp + 5] ; $hex
1976   0ED4 2A            mov b, [d]
1977   0ED5 07 88 1A      call print_u16x
1978   0ED8             ; --- END INLINE ASM BLOCK
1979   0ED8             
1980   0ED8 F9            leave
1981   0ED9 09            ret
1982   0EDA             
1983   0EDA             printx8:
1984   0EDA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1985   0EDD             
1986   0EDD             ; --- BEGIN INLINE ASM BLOCK
1987   0EDD FA 05 00      lea d, [bp + 5] ; $hex
1988   0EE0 32            mov bl, [d]
1989   0EE1 07 CC 1A      call print_u8x
1990   0EE4             ; --- END INLINE ASM BLOCK
1991   0EE4             
1992   0EE4 F9            leave
1993   0EE5 09            ret
1994   0EE6             
1995   0EE6             hex_str_to_int:
1996   0EE6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1997   0EE9             ;; int value = 0; 
1998   0EE9 52 02 00      sub sp, 2 ; value
1999   0EEC             ; --- START LOCAL VAR INITIALIZATION
2000   0EEC FA FF FF      lea d, [bp + -1] ; $value
2001   0EEF DA            push d
2002   0EF0 26 00 00      mov b, $0
2003   0EF3 E7            pop d
2004   0EF4 FD 43         mov [d], b
2005   0EF6             ; --- END LOCAL VAR INITIALIZATION
2006   0EF6             ;; int i; 
2007   0EF6 52 02 00      sub sp, 2 ; i
2008   0EF9             ;; char hex_char; 
2009   0EF9 52 01 00      sub sp, 1 ; hex_char
2010   0EFC             ;; int len; 
2011   0EFC 52 02 00      sub sp, 2 ; len
2012   0EFF             ;; len = strlen(hex_string); 
2013   0EFF FA FA FF      lea d, [bp + -6] ; $len
2014   0F02 DA            push d
2015   0F03 FA 05 00      lea d, [bp + 5] ; $hex_string
2016   0F06 2A            mov b, [d]
2017   0F07 FD AB         swp b
2018   0F09 D8            push b
2019   0F0A 07 CF 07      call strlen
2020   0F0D 51 02 00      add sp, 2
2021   0F10 E7            pop d
2022   0F11 FD 43         mov [d], b
2023   0F13             ;; for (i = 0; i < len; i++) { 
2024   0F13             _for33_init:
2025   0F13 FA FD FF      lea d, [bp + -3] ; $i
2026   0F16 DA            push d
2027   0F17 26 00 00      mov b, $0
2028   0F1A E7            pop d
2029   0F1B FD 43         mov [d], b
2030   0F1D             _for33_cond:
2031   0F1D FA FD FF      lea d, [bp + -3] ; $i
2032   0F20 2A            mov b, [d]
2033   0F21             ; START RELATIONAL
2034   0F21 D7            push a
2035   0F22 11            mov a, b
2036   0F23 FA FA FF      lea d, [bp + -6] ; $len
2037   0F26 2A            mov b, [d]
2038   0F27 B0            cmp a, b
2039   0F28 FD 73         slt ; < (signed)
2040   0F2A E4            pop a
2041   0F2B             ; END RELATIONAL
2042   0F2B C0 00 00      cmp b, 0
2043   0F2E C6 30 10      je _for33_exit
2044   0F31             _for33_block:
2045   0F31             ;; hex_char = hex_string[i]; 
2046   0F31 FA FC FF      lea d, [bp + -4] ; $hex_char
2047   0F34 DA            push d
2048   0F35 FA 05 00      lea d, [bp + 5] ; $hex_string
2049   0F38 FD 2A         mov d, [d]
2050   0F3A D7            push a
2051   0F3B DA            push d
2052   0F3C FA FD FF      lea d, [bp + -3] ; $i
2053   0F3F 2A            mov b, [d]
2054   0F40 E7            pop d
2055   0F41 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2056   0F45 E4            pop a
2057   0F46 32            mov bl, [d]
2058   0F47 A7 00         mov bh, 0
2059   0F49 E7            pop d
2060   0F4A FD 3E         mov [d], bl
2061   0F4C             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2062   0F4C             _if34_cond:
2063   0F4C FA FC FF      lea d, [bp + -4] ; $hex_char
2064   0F4F 32            mov bl, [d]
2065   0F50 A7 00         mov bh, 0
2066   0F52             ; START RELATIONAL
2067   0F52 D7            push a
2068   0F53 11            mov a, b
2069   0F54 26 61 00      mov b, $61
2070   0F57 B0            cmp a, b
2071   0F58 FD 80         sge ; >=
2072   0F5A E4            pop a
2073   0F5B             ; END RELATIONAL
2074   0F5B             ; START LOGICAL AND
2075   0F5B D7            push a
2076   0F5C 11            mov a, b
2077   0F5D FA FC FF      lea d, [bp + -4] ; $hex_char
2078   0F60 32            mov bl, [d]
2079   0F61 A7 00         mov bh, 0
2080   0F63             ; START RELATIONAL
2081   0F63 D7            push a
2082   0F64 11            mov a, b
2083   0F65 26 66 00      mov b, $66
2084   0F68 B0            cmp a, b
2085   0F69 FD 74         sle ; <= (signed)
2086   0F6B E4            pop a
2087   0F6C             ; END RELATIONAL
2088   0F6C FD A7         sand a, b
2089   0F6E E4            pop a
2090   0F6F             ; END LOGICAL AND
2091   0F6F C0 00 00      cmp b, 0
2092   0F72 C6 A3 0F      je _if34_else
2093   0F75             _if34_true:
2094   0F75             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2095   0F75 FA FF FF      lea d, [bp + -1] ; $value
2096   0F78 DA            push d
2097   0F79 FA FF FF      lea d, [bp + -1] ; $value
2098   0F7C 2A            mov b, [d]
2099   0F7D             ; START FACTORS
2100   0F7D D7            push a
2101   0F7E 11            mov a, b
2102   0F7F 26 10 00      mov b, $10
2103   0F82 AC            mul a, b ; *
2104   0F83 11            mov a, b
2105   0F84 27            mov b, a
2106   0F85 E4            pop a
2107   0F86             ; END FACTORS
2108   0F86             ; START TERMS
2109   0F86 D7            push a
2110   0F87 11            mov a, b
2111   0F88 FA FC FF      lea d, [bp + -4] ; $hex_char
2112   0F8B 32            mov bl, [d]
2113   0F8C A7 00         mov bh, 0
2114   0F8E             ; START TERMS
2115   0F8E D7            push a
2116   0F8F 11            mov a, b
2117   0F90 26 61 00      mov b, $61
2118   0F93 60            sub a, b
2119   0F94 27            mov b, a
2120   0F95 11            mov a, b
2121   0F96 26 0A 00      mov b, $a
2122   0F99 56            add b, a
2123   0F9A E4            pop a
2124   0F9B             ; END TERMS
2125   0F9B 56            add b, a
2126   0F9C E4            pop a
2127   0F9D             ; END TERMS
2128   0F9D E7            pop d
2129   0F9E FD 43         mov [d], b
2130   0FA0 0A 20 10      jmp _if34_exit
2131   0FA3             _if34_else:
2132   0FA3             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2133   0FA3             _if35_cond:
2134   0FA3 FA FC FF      lea d, [bp + -4] ; $hex_char
2135   0FA6 32            mov bl, [d]
2136   0FA7 A7 00         mov bh, 0
2137   0FA9             ; START RELATIONAL
2138   0FA9 D7            push a
2139   0FAA 11            mov a, b
2140   0FAB 26 41 00      mov b, $41
2141   0FAE B0            cmp a, b
2142   0FAF FD 80         sge ; >=
2143   0FB1 E4            pop a
2144   0FB2             ; END RELATIONAL
2145   0FB2             ; START LOGICAL AND
2146   0FB2 D7            push a
2147   0FB3 11            mov a, b
2148   0FB4 FA FC FF      lea d, [bp + -4] ; $hex_char
2149   0FB7 32            mov bl, [d]
2150   0FB8 A7 00         mov bh, 0
2151   0FBA             ; START RELATIONAL
2152   0FBA D7            push a
2153   0FBB 11            mov a, b
2154   0FBC 26 46 00      mov b, $46
2155   0FBF B0            cmp a, b
2156   0FC0 FD 74         sle ; <= (signed)
2157   0FC2 E4            pop a
2158   0FC3             ; END RELATIONAL
2159   0FC3 FD A7         sand a, b
2160   0FC5 E4            pop a
2161   0FC6             ; END LOGICAL AND
2162   0FC6 C0 00 00      cmp b, 0
2163   0FC9 C6 FA 0F      je _if35_else
2164   0FCC             _if35_true:
2165   0FCC             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2166   0FCC FA FF FF      lea d, [bp + -1] ; $value
2167   0FCF DA            push d
2168   0FD0 FA FF FF      lea d, [bp + -1] ; $value
2169   0FD3 2A            mov b, [d]
2170   0FD4             ; START FACTORS
2171   0FD4 D7            push a
2172   0FD5 11            mov a, b
2173   0FD6 26 10 00      mov b, $10
2174   0FD9 AC            mul a, b ; *
2175   0FDA 11            mov a, b
2176   0FDB 27            mov b, a
2177   0FDC E4            pop a
2178   0FDD             ; END FACTORS
2179   0FDD             ; START TERMS
2180   0FDD D7            push a
2181   0FDE 11            mov a, b
2182   0FDF FA FC FF      lea d, [bp + -4] ; $hex_char
2183   0FE2 32            mov bl, [d]
2184   0FE3 A7 00         mov bh, 0
2185   0FE5             ; START TERMS
2186   0FE5 D7            push a
2187   0FE6 11            mov a, b
2188   0FE7 26 41 00      mov b, $41
2189   0FEA 60            sub a, b
2190   0FEB 27            mov b, a
2191   0FEC 11            mov a, b
2192   0FED 26 0A 00      mov b, $a
2193   0FF0 56            add b, a
2194   0FF1 E4            pop a
2195   0FF2             ; END TERMS
2196   0FF2 56            add b, a
2197   0FF3 E4            pop a
2198   0FF4             ; END TERMS
2199   0FF4 E7            pop d
2200   0FF5 FD 43         mov [d], b
2201   0FF7 0A 20 10      jmp _if35_exit
2202   0FFA             _if35_else:
2203   0FFA             ;; value = (value * 16) + (hex_char - '0'); 
2204   0FFA FA FF FF      lea d, [bp + -1] ; $value
2205   0FFD DA            push d
2206   0FFE FA FF FF      lea d, [bp + -1] ; $value
2207   1001 2A            mov b, [d]
2208   1002             ; START FACTORS
2209   1002 D7            push a
2210   1003 11            mov a, b
2211   1004 26 10 00      mov b, $10
2212   1007 AC            mul a, b ; *
2213   1008 11            mov a, b
2214   1009 27            mov b, a
2215   100A E4            pop a
2216   100B             ; END FACTORS
2217   100B             ; START TERMS
2218   100B D7            push a
2219   100C 11            mov a, b
2220   100D FA FC FF      lea d, [bp + -4] ; $hex_char
2221   1010 32            mov bl, [d]
2222   1011 A7 00         mov bh, 0
2223   1013             ; START TERMS
2224   1013 D7            push a
2225   1014 11            mov a, b
2226   1015 26 30 00      mov b, $30
2227   1018 60            sub a, b
2228   1019 27            mov b, a
2229   101A E4            pop a
2230   101B             ; END TERMS
2231   101B 56            add b, a
2232   101C E4            pop a
2233   101D             ; END TERMS
2234   101D E7            pop d
2235   101E FD 43         mov [d], b
2236   1020             _if35_exit:
2237   1020             _if34_exit:
2238   1020             _for33_update:
2239   1020 FA FD FF      lea d, [bp + -3] ; $i
2240   1023 2A            mov b, [d]
2241   1024 FD 77         inc b
2242   1026 FA FD FF      lea d, [bp + -3] ; $i
2243   1029 FD 43         mov [d], b
2244   102B FD 7D         dec b
2245   102D 0A 1D 0F      jmp _for33_cond
2246   1030             _for33_exit:
2247   1030             ;; return value; 
2248   1030 FA FF FF      lea d, [bp + -1] ; $value
2249   1033 2A            mov b, [d]
2250   1034 F9            leave
2251   1035 09            ret
2252   1036             
2253   1036             gets:
2254   1036 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2255   1039             
2256   1039             ; --- BEGIN INLINE ASM BLOCK
2257   1039 FA 05 00      lea d, [bp + 5] ; $s
2258   103C 15            mov a, [d]
2259   103D 3C            mov d, a
2260   103E 07 ED 18      call _gets
2261   1041             ; --- END INLINE ASM BLOCK
2262   1041             
2263   1041             ;; return strlen(s); 
2264   1041 FA 05 00      lea d, [bp + 5] ; $s
2265   1044 2A            mov b, [d]
2266   1045 FD AB         swp b
2267   1047 D8            push b
2268   1048 07 CF 07      call strlen
2269   104B 51 02 00      add sp, 2
2270   104E F9            leave
2271   104F 09            ret
2272   1050             
2273   1050             print_signed:
2274   1050 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2275   1053             ;; char digits[5]; 
2276   1053 52 05 00      sub sp, 5 ; digits
2277   1056             ;; int i = 0; 
2278   1056 52 02 00      sub sp, 2 ; i
2279   1059             ; --- START LOCAL VAR INITIALIZATION
2280   1059 FA FA FF      lea d, [bp + -6] ; $i
2281   105C DA            push d
2282   105D 26 00 00      mov b, $0
2283   1060 E7            pop d
2284   1061 FD 43         mov [d], b
2285   1063             ; --- END LOCAL VAR INITIALIZATION
2286   1063             ;; if (num < 0) { 
2287   1063             _if36_cond:
2288   1063 FA 05 00      lea d, [bp + 5] ; $num
2289   1066 2A            mov b, [d]
2290   1067             ; START RELATIONAL
2291   1067 D7            push a
2292   1068 11            mov a, b
2293   1069 26 00 00      mov b, $0
2294   106C B0            cmp a, b
2295   106D FD 73         slt ; < (signed)
2296   106F E4            pop a
2297   1070             ; END RELATIONAL
2298   1070 C0 00 00      cmp b, 0
2299   1073 C6 90 10      je _if36_else
2300   1076             _if36_true:
2301   1076             ;; putchar('-'); 
2302   1076 26 2D 00      mov b, $2d
2303   1079 DD            push bl
2304   107A 07 55 17      call putchar
2305   107D 51 01 00      add sp, 1
2306   1080             ;; num = -num; 
2307   1080 FA 05 00      lea d, [bp + 5] ; $num
2308   1083 DA            push d
2309   1084 FA 05 00      lea d, [bp + 5] ; $num
2310   1087 2A            mov b, [d]
2311   1088 FD 97         neg b
2312   108A E7            pop d
2313   108B FD 43         mov [d], b
2314   108D 0A B2 10      jmp _if36_exit
2315   1090             _if36_else:
2316   1090             ;; if (num == 0) { 
2317   1090             _if37_cond:
2318   1090 FA 05 00      lea d, [bp + 5] ; $num
2319   1093 2A            mov b, [d]
2320   1094             ; START RELATIONAL
2321   1094 D7            push a
2322   1095 11            mov a, b
2323   1096 26 00 00      mov b, $0
2324   1099 B0            cmp a, b
2325   109A FD 71         seq ; ==
2326   109C E4            pop a
2327   109D             ; END RELATIONAL
2328   109D C0 00 00      cmp b, 0
2329   10A0 C6 B2 10      je _if37_exit
2330   10A3             _if37_true:
2331   10A3             ;; putchar('0'); 
2332   10A3 26 30 00      mov b, $30
2333   10A6 DD            push bl
2334   10A7 07 55 17      call putchar
2335   10AA 51 01 00      add sp, 1
2336   10AD             ;; return; 
2337   10AD F9            leave
2338   10AE 09            ret
2339   10AF 0A B2 10      jmp _if37_exit
2340   10B2             _if37_exit:
2341   10B2             _if36_exit:
2342   10B2             ;; while (num > 0) { 
2343   10B2             _while38_cond:
2344   10B2 FA 05 00      lea d, [bp + 5] ; $num
2345   10B5 2A            mov b, [d]
2346   10B6             ; START RELATIONAL
2347   10B6 D7            push a
2348   10B7 11            mov a, b
2349   10B8 26 00 00      mov b, $0
2350   10BB B0            cmp a, b
2351   10BC FD 7F         sgt ; >
2352   10BE E4            pop a
2353   10BF             ; END RELATIONAL
2354   10BF C0 00 00      cmp b, 0
2355   10C2 C6 0C 11      je _while38_exit
2356   10C5             _while38_block:
2357   10C5             ;; digits[i] = '0' + (num % 10); 
2358   10C5 FA FC FF      lea d, [bp + -4] ; $digits
2359   10C8 D7            push a
2360   10C9 DA            push d
2361   10CA FA FA FF      lea d, [bp + -6] ; $i
2362   10CD 2A            mov b, [d]
2363   10CE E7            pop d
2364   10CF 5A            add d, b
2365   10D0 E4            pop a
2366   10D1 DA            push d
2367   10D2 26 30 00      mov b, $30
2368   10D5             ; START TERMS
2369   10D5 D7            push a
2370   10D6 11            mov a, b
2371   10D7 FA 05 00      lea d, [bp + 5] ; $num
2372   10DA 2A            mov b, [d]
2373   10DB             ; START FACTORS
2374   10DB D7            push a
2375   10DC 11            mov a, b
2376   10DD 26 0A 00      mov b, $a
2377   10E0 AE            div a, b ; 
2378   10E1 11            mov a, b
2379   10E2 27            mov b, a
2380   10E3 E4            pop a
2381   10E4             ; END FACTORS
2382   10E4 56            add b, a
2383   10E5 E4            pop a
2384   10E6             ; END TERMS
2385   10E6 E7            pop d
2386   10E7 FD 3E         mov [d], bl
2387   10E9             ;; num = num / 10; 
2388   10E9 FA 05 00      lea d, [bp + 5] ; $num
2389   10EC DA            push d
2390   10ED FA 05 00      lea d, [bp + 5] ; $num
2391   10F0 2A            mov b, [d]
2392   10F1             ; START FACTORS
2393   10F1 D7            push a
2394   10F2 11            mov a, b
2395   10F3 26 0A 00      mov b, $a
2396   10F6 AE            div a, b
2397   10F7 27            mov b, a
2398   10F8 E4            pop a
2399   10F9             ; END FACTORS
2400   10F9 E7            pop d
2401   10FA FD 43         mov [d], b
2402   10FC             ;; i++; 
2403   10FC FA FA FF      lea d, [bp + -6] ; $i
2404   10FF 2A            mov b, [d]
2405   1100 FD 77         inc b
2406   1102 FA FA FF      lea d, [bp + -6] ; $i
2407   1105 FD 43         mov [d], b
2408   1107 FD 7D         dec b
2409   1109 0A B2 10      jmp _while38_cond
2410   110C             _while38_exit:
2411   110C             ;; while (i > 0) { 
2412   110C             _while39_cond:
2413   110C FA FA FF      lea d, [bp + -6] ; $i
2414   110F 2A            mov b, [d]
2415   1110             ; START RELATIONAL
2416   1110 D7            push a
2417   1111 11            mov a, b
2418   1112 26 00 00      mov b, $0
2419   1115 B0            cmp a, b
2420   1116 FD 7F         sgt ; >
2421   1118 E4            pop a
2422   1119             ; END RELATIONAL
2423   1119 C0 00 00      cmp b, 0
2424   111C C6 45 11      je _while39_exit
2425   111F             _while39_block:
2426   111F             ;; i--; 
2427   111F FA FA FF      lea d, [bp + -6] ; $i
2428   1122 2A            mov b, [d]
2429   1123 FD 7D         dec b
2430   1125 FA FA FF      lea d, [bp + -6] ; $i
2431   1128 FD 43         mov [d], b
2432   112A FD 77         inc b
2433   112C             ;; putchar(digits[i]); 
2434   112C FA FC FF      lea d, [bp + -4] ; $digits
2435   112F D7            push a
2436   1130 DA            push d
2437   1131 FA FA FF      lea d, [bp + -6] ; $i
2438   1134 2A            mov b, [d]
2439   1135 E7            pop d
2440   1136 5A            add d, b
2441   1137 E4            pop a
2442   1138 32            mov bl, [d]
2443   1139 A7 00         mov bh, 0
2444   113B DD            push bl
2445   113C 07 55 17      call putchar
2446   113F 51 01 00      add sp, 1
2447   1142 0A 0C 11      jmp _while39_cond
2448   1145             _while39_exit:
2449   1145 F9            leave
2450   1146 09            ret
2451   1147             
2452   1147             print_signed_long:
2453   1147 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2454   114A             ;; char digits[10]; 
2455   114A 52 0A 00      sub sp, 10 ; digits
2456   114D             ;; int i = 0; 
2457   114D 52 02 00      sub sp, 2 ; i
2458   1150             ; --- START LOCAL VAR INITIALIZATION
2459   1150 FA F5 FF      lea d, [bp + -11] ; $i
2460   1153 DA            push d
2461   1154 26 00 00      mov b, $0
2462   1157 E7            pop d
2463   1158 FD 43         mov [d], b
2464   115A             ; --- END LOCAL VAR INITIALIZATION
2465   115A             ;; if (num < 0) { 
2466   115A             _if40_cond:
2467   115A FA 05 00      lea d, [bp + 5] ; $num
2468   115D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2469   1160 FD 39         mov c, b ; And place it into C
2470   1162 2A            mov b, [d] ; Lower Word in B
2471   1163             ; START RELATIONAL
2472   1163 D7            push a
2473   1164 FD D8         push g
2474   1166 11            mov a, b
2475   1167 FD 7A         mov g, c
2476   1169 26 00 00      mov b, $0
2477   116C 38 00 00      mov c, 0
2478   116F FD AF 00 00   cmp32 ga, cb
2478   1173 00 00 00 00 
2478   1177 00 00 00 00 
2478   117B 00 00 00 00 
2478   117F 00 00 00 00 
2478   1183 00 00 00 00 
2478   1187 00 00 00 00 
2478   118B 00 00 00 00 
2478   118F 00 00 00 00 
2478   1193 00 00 00 00 
2478   1197 00 00 00 00 
2478   119B 00 00 00 00 
2478   119F 00 00 00 00 
2478   11A3 00 00 00 00 
2478   11A7 00 00 00 00 
2478   11AB 00 00 00 00 
2478   11AF 00 00 00 00 
2478   11B3 00 00 00 00 
2478   11B7 00 00 00 00 
2478   11BB 00 00 00 00 
2478   11BF 00 00 00 00 
2478   11C3 00 00 00 00 
2478   11C7 00 00 00 00 
2478   11CB 00 00 00 00 
2478   11CF 00 00 00 00 
2478   11D3 00 00 00 00 
2478   11D7 00 00 00 00 
2478   11DB 00 00 00 00 
2478   11DF 00 00 00 00 
2478   11E3 00 00 00 00 
2478   11E7 00 00 00 00 
2478   11EB 00 00 00 00 
2478   11EF 00 00 00 00 
2478   11F3 00 00 00 00 
2478   11F7 00 00 00 00 
2478   11FB 00 00 00 00 
2478   11FF 00 00 00 00 
2478   1203 00 00 00 00 
2478   1207 00 00 00 00 
2478   120B 00 00 00 00 
2478   120F 00 00 00 00 
2478   1213 00 00 00 00 
2478   1217 00 00 00 00 
2478   121B 00 00 00 00 
2478   121F 00 00 00 00 
2478   1223 00 00 00 00 
2478   1227 00 00 00 00 
2478   122B 00 00 00 00 
2478   122F 00 00 00 00 
2478   1233 00 00 00 00 
2478   1237 00 00 00 00 
2478   123B 00 00 00 00 
2478   123F 00 00 00 00 
2478   1243 00 00 00 00 
2478   1247 00 00 00 00 
2478   124B 00 00 00 00 
2478   124F 00 00 00 00 
2478   1253 00 00 00 00 
2478   1257 00 00 00 00 
2478   125B 00 00 00 00 
2478   125F 00 00 00 00 
2478   1263 00 00 00 00 
2478   1267 00 00 00 00 
2478   126B 00 00 00 00 
2478   126F 00 
2479   1270 FD 73         slt ; <
2480   1272 FD F1         pop g
2481   1274 E4            pop a
2482   1275             ; END RELATIONAL
2483   1275 C0 00 00      cmp b, 0
2484   1278 C6 9F 12      je _if40_else
2485   127B             _if40_true:
2486   127B             ;; putchar('-'); 
2487   127B 26 2D 00      mov b, $2d
2488   127E DD            push bl
2489   127F 07 55 17      call putchar
2490   1282 51 01 00      add sp, 1
2491   1285             ;; num = -num; 
2492   1285 FA 05 00      lea d, [bp + 5] ; $num
2493   1288 DA            push d
2494   1289 FA 05 00      lea d, [bp + 5] ; $num
2495   128C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2496   128F FD 39         mov c, b ; And place it into C
2497   1291 2A            mov b, [d] ; Lower Word in B
2498   1292 FD 97         neg b
2499   1294 E7            pop d
2500   1295 FD 43         mov [d], b
2501   1297 28            mov b, c
2502   1298 FD 44 02 00   mov [d + 2], b
2503   129C 0A CF 13      jmp _if40_exit
2504   129F             _if40_else:
2505   129F             ;; if (num == 0) { 
2506   129F             _if41_cond:
2507   129F FA 05 00      lea d, [bp + 5] ; $num
2508   12A2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2509   12A5 FD 39         mov c, b ; And place it into C
2510   12A7 2A            mov b, [d] ; Lower Word in B
2511   12A8             ; START RELATIONAL
2512   12A8 D7            push a
2513   12A9 FD D8         push g
2514   12AB 11            mov a, b
2515   12AC FD 7A         mov g, c
2516   12AE 26 00 00      mov b, $0
2517   12B1 38 00 00      mov c, 0
2518   12B4 FD AF 00 00   cmp32 ga, cb
2518   12B8 00 00 00 00 
2518   12BC 00 00 00 00 
2518   12C0 00 00 00 00 
2518   12C4 00 00 00 00 
2518   12C8 00 00 00 00 
2518   12CC 00 00 00 00 
2518   12D0 00 00 00 00 
2518   12D4 00 00 00 00 
2518   12D8 00 00 00 00 
2518   12DC 00 00 00 00 
2518   12E0 00 00 00 00 
2518   12E4 00 00 00 00 
2518   12E8 00 00 00 00 
2518   12EC 00 00 00 00 
2518   12F0 00 00 00 00 
2518   12F4 00 00 00 00 
2518   12F8 00 00 00 00 
2518   12FC 00 00 00 00 
2518   1300 00 00 00 00 
2518   1304 00 00 00 00 
2518   1308 00 00 00 00 
2518   130C 00 00 00 00 
2518   1310 00 00 00 00 
2518   1314 00 00 00 00 
2518   1318 00 00 00 00 
2518   131C 00 00 00 00 
2518   1320 00 00 00 00 
2518   1324 00 00 00 00 
2518   1328 00 00 00 00 
2518   132C 00 00 00 00 
2518   1330 00 00 00 00 
2518   1334 00 00 00 00 
2518   1338 00 00 00 00 
2518   133C 00 00 00 00 
2518   1340 00 00 00 00 
2518   1344 00 00 00 00 
2518   1348 00 00 00 00 
2518   134C 00 00 00 00 
2518   1350 00 00 00 00 
2518   1354 00 00 00 00 
2518   1358 00 00 00 00 
2518   135C 00 00 00 00 
2518   1360 00 00 00 00 
2518   1364 00 00 00 00 
2518   1368 00 00 00 00 
2518   136C 00 00 00 00 
2518   1370 00 00 00 00 
2518   1374 00 00 00 00 
2518   1378 00 00 00 00 
2518   137C 00 00 00 00 
2518   1380 00 00 00 00 
2518   1384 00 00 00 00 
2518   1388 00 00 00 00 
2518   138C 00 00 00 00 
2518   1390 00 00 00 00 
2518   1394 00 00 00 00 
2518   1398 00 00 00 00 
2518   139C 00 00 00 00 
2518   13A0 00 00 00 00 
2518   13A4 00 00 00 00 
2518   13A8 00 00 00 00 
2518   13AC 00 00 00 00 
2518   13B0 00 00 00 00 
2518   13B4 00 
2519   13B5 FD 71         seq ; ==
2520   13B7 FD F1         pop g
2521   13B9 E4            pop a
2522   13BA             ; END RELATIONAL
2523   13BA C0 00 00      cmp b, 0
2524   13BD C6 CF 13      je _if41_exit
2525   13C0             _if41_true:
2526   13C0             ;; putchar('0'); 
2527   13C0 26 30 00      mov b, $30
2528   13C3 DD            push bl
2529   13C4 07 55 17      call putchar
2530   13C7 51 01 00      add sp, 1
2531   13CA             ;; return; 
2532   13CA F9            leave
2533   13CB 09            ret
2534   13CC 0A CF 13      jmp _if41_exit
2535   13CF             _if41_exit:
2536   13CF             _if40_exit:
2537   13CF             ;; while (num > 0) { 
2538   13CF             _while42_cond:
2539   13CF FA 05 00      lea d, [bp + 5] ; $num
2540   13D2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2541   13D5 FD 39         mov c, b ; And place it into C
2542   13D7 2A            mov b, [d] ; Lower Word in B
2543   13D8             ; START RELATIONAL
2544   13D8 D7            push a
2545   13D9 FD D8         push g
2546   13DB 11            mov a, b
2547   13DC FD 7A         mov g, c
2548   13DE 26 00 00      mov b, $0
2549   13E1 38 00 00      mov c, 0
2550   13E4 FD 7F         sgt
2551   13E6 FD F1         pop g
2552   13E8 E4            pop a
2553   13E9             ; END RELATIONAL
2554   13E9 C0 00 00      cmp b, 0
2555   13EC C6 4C 14      je _while42_exit
2556   13EF             _while42_block:
2557   13EF             ;; digits[i] = '0' + (num % 10); 
2558   13EF FA F7 FF      lea d, [bp + -9] ; $digits
2559   13F2 D7            push a
2560   13F3 DA            push d
2561   13F4 FA F5 FF      lea d, [bp + -11] ; $i
2562   13F7 2A            mov b, [d]
2563   13F8 E7            pop d
2564   13F9 5A            add d, b
2565   13FA E4            pop a
2566   13FB DA            push d
2567   13FC 26 30 00      mov b, $30
2568   13FF             ; START TERMS
2569   13FF D7            push a
2570   1400 11            mov a, b
2571   1401 FA 05 00      lea d, [bp + 5] ; $num
2572   1404 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2573   1407 FD 39         mov c, b ; And place it into C
2574   1409 2A            mov b, [d] ; Lower Word in B
2575   140A             ; START FACTORS
2576   140A D7            push a
2577   140B 11            mov a, b
2578   140C 26 0A 00      mov b, $a
2579   140F AE            div a, b ; 
2580   1410 11            mov a, b
2581   1411 27            mov b, a
2582   1412 E4            pop a
2583   1413             ; END FACTORS
2584   1413 54            add a, b
2585   1414 D7            push a
2586   1415 FD 12         mov a, g
2587   1417 28            mov b, c
2588   1418 5C            adc a, b
2589   1419 39            mov c, a
2590   141A E5            pop b
2591   141B E4            pop a
2592   141C             ; END TERMS
2593   141C E7            pop d
2594   141D FD 3E         mov [d], bl
2595   141F             ;; num = num / 10; 
2596   141F FA 05 00      lea d, [bp + 5] ; $num
2597   1422 DA            push d
2598   1423 FA 05 00      lea d, [bp + 5] ; $num
2599   1426 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2600   1429 FD 39         mov c, b ; And place it into C
2601   142B 2A            mov b, [d] ; Lower Word in B
2602   142C             ; START FACTORS
2603   142C D7            push a
2604   142D 11            mov a, b
2605   142E 26 0A 00      mov b, $a
2606   1431 AE            div a, b
2607   1432 27            mov b, a
2608   1433 E4            pop a
2609   1434             ; END FACTORS
2610   1434 E7            pop d
2611   1435 FD 43         mov [d], b
2612   1437 28            mov b, c
2613   1438 FD 44 02 00   mov [d + 2], b
2614   143C             ;; i++; 
2615   143C FA F5 FF      lea d, [bp + -11] ; $i
2616   143F 2A            mov b, [d]
2617   1440 FD 77         inc b
2618   1442 FA F5 FF      lea d, [bp + -11] ; $i
2619   1445 FD 43         mov [d], b
2620   1447 FD 7D         dec b
2621   1449 0A CF 13      jmp _while42_cond
2622   144C             _while42_exit:
2623   144C             ;; while (i > 0) { 
2624   144C             _while43_cond:
2625   144C FA F5 FF      lea d, [bp + -11] ; $i
2626   144F 2A            mov b, [d]
2627   1450             ; START RELATIONAL
2628   1450 D7            push a
2629   1451 11            mov a, b
2630   1452 26 00 00      mov b, $0
2631   1455 B0            cmp a, b
2632   1456 FD 7F         sgt ; >
2633   1458 E4            pop a
2634   1459             ; END RELATIONAL
2635   1459 C0 00 00      cmp b, 0
2636   145C C6 85 14      je _while43_exit
2637   145F             _while43_block:
2638   145F             ;; i--; 
2639   145F FA F5 FF      lea d, [bp + -11] ; $i
2640   1462 2A            mov b, [d]
2641   1463 FD 7D         dec b
2642   1465 FA F5 FF      lea d, [bp + -11] ; $i
2643   1468 FD 43         mov [d], b
2644   146A FD 77         inc b
2645   146C             ;; putchar(digits[i]); 
2646   146C FA F7 FF      lea d, [bp + -9] ; $digits
2647   146F D7            push a
2648   1470 DA            push d
2649   1471 FA F5 FF      lea d, [bp + -11] ; $i
2650   1474 2A            mov b, [d]
2651   1475 E7            pop d
2652   1476 5A            add d, b
2653   1477 E4            pop a
2654   1478 32            mov bl, [d]
2655   1479 A7 00         mov bh, 0
2656   147B DD            push bl
2657   147C 07 55 17      call putchar
2658   147F 51 01 00      add sp, 1
2659   1482 0A 4C 14      jmp _while43_cond
2660   1485             _while43_exit:
2661   1485 F9            leave
2662   1486 09            ret
2663   1487             
2664   1487             print_unsigned_long:
2665   1487 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2666   148A             ;; char digits[10]; 
2667   148A 52 0A 00      sub sp, 10 ; digits
2668   148D             ;; int i; 
2669   148D 52 02 00      sub sp, 2 ; i
2670   1490             ;; i = 0; 
2671   1490 FA F5 FF      lea d, [bp + -11] ; $i
2672   1493 DA            push d
2673   1494 26 00 00      mov b, $0
2674   1497 E7            pop d
2675   1498 FD 43         mov [d], b
2676   149A             ;; if(num == 0){ 
2677   149A             _if44_cond:
2678   149A FA 05 00      lea d, [bp + 5] ; $num
2679   149D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2680   14A0 FD 39         mov c, b ; And place it into C
2681   14A2 2A            mov b, [d] ; Lower Word in B
2682   14A3             ; START RELATIONAL
2683   14A3 D7            push a
2684   14A4 FD D8         push g
2685   14A6 11            mov a, b
2686   14A7 FD 7A         mov g, c
2687   14A9 26 00 00      mov b, $0
2688   14AC 38 00 00      mov c, 0
2689   14AF FD AF 00 00   cmp32 ga, cb
2689   14B3 00 00 00 00 
2689   14B7 00 00 00 00 
2689   14BB 00 00 00 00 
2689   14BF 00 00 00 00 
2689   14C3 00 00 00 00 
2689   14C7 00 00 00 00 
2689   14CB 00 00 00 00 
2689   14CF 00 00 00 00 
2689   14D3 00 00 00 00 
2689   14D7 00 00 00 00 
2689   14DB 00 00 00 00 
2689   14DF 00 00 00 00 
2689   14E3 00 00 00 00 
2689   14E7 00 00 00 00 
2689   14EB 00 00 00 00 
2689   14EF 00 00 00 00 
2689   14F3 00 00 00 00 
2689   14F7 00 00 00 00 
2689   14FB 00 00 00 00 
2689   14FF 00 00 00 00 
2689   1503 00 00 00 00 
2689   1507 00 00 00 00 
2689   150B 00 00 00 00 
2689   150F 00 00 00 00 
2689   1513 00 00 00 00 
2689   1517 00 00 00 00 
2689   151B 00 00 00 00 
2689   151F 00 00 00 00 
2689   1523 00 00 00 00 
2689   1527 00 00 00 00 
2689   152B 00 00 00 00 
2689   152F 00 00 00 00 
2689   1533 00 00 00 00 
2689   1537 00 00 00 00 
2689   153B 00 00 00 00 
2689   153F 00 00 00 00 
2689   1543 00 00 00 00 
2689   1547 00 00 00 00 
2689   154B 00 00 00 00 
2689   154F 00 00 00 00 
2689   1553 00 00 00 00 
2689   1557 00 00 00 00 
2689   155B 00 00 00 00 
2689   155F 00 00 00 00 
2689   1563 00 00 00 00 
2689   1567 00 00 00 00 
2689   156B 00 00 00 00 
2689   156F 00 00 00 00 
2689   1573 00 00 00 00 
2689   1577 00 00 00 00 
2689   157B 00 00 00 00 
2689   157F 00 00 00 00 
2689   1583 00 00 00 00 
2689   1587 00 00 00 00 
2689   158B 00 00 00 00 
2689   158F 00 00 00 00 
2689   1593 00 00 00 00 
2689   1597 00 00 00 00 
2689   159B 00 00 00 00 
2689   159F 00 00 00 00 
2689   15A3 00 00 00 00 
2689   15A7 00 00 00 00 
2689   15AB 00 00 00 00 
2689   15AF 00 
2690   15B0 FD 71         seq ; ==
2691   15B2 FD F1         pop g
2692   15B4 E4            pop a
2693   15B5             ; END RELATIONAL
2694   15B5 C0 00 00      cmp b, 0
2695   15B8 C6 CA 15      je _if44_exit
2696   15BB             _if44_true:
2697   15BB             ;; putchar('0'); 
2698   15BB 26 30 00      mov b, $30
2699   15BE DD            push bl
2700   15BF 07 55 17      call putchar
2701   15C2 51 01 00      add sp, 1
2702   15C5             ;; return; 
2703   15C5 F9            leave
2704   15C6 09            ret
2705   15C7 0A CA 15      jmp _if44_exit
2706   15CA             _if44_exit:
2707   15CA             ;; while (num > 0) { 
2708   15CA             _while45_cond:
2709   15CA FA 05 00      lea d, [bp + 5] ; $num
2710   15CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2711   15D0 FD 39         mov c, b ; And place it into C
2712   15D2 2A            mov b, [d] ; Lower Word in B
2713   15D3             ; START RELATIONAL
2714   15D3 D7            push a
2715   15D4 FD D8         push g
2716   15D6 11            mov a, b
2717   15D7 FD 7A         mov g, c
2718   15D9 26 00 00      mov b, $0
2719   15DC 38 00 00      mov c, 0
2720   15DF FD 81         sgu
2721   15E1 FD F1         pop g
2722   15E3 E4            pop a
2723   15E4             ; END RELATIONAL
2724   15E4 C0 00 00      cmp b, 0
2725   15E7 C6 47 16      je _while45_exit
2726   15EA             _while45_block:
2727   15EA             ;; digits[i] = '0' + (num % 10); 
2728   15EA FA F7 FF      lea d, [bp + -9] ; $digits
2729   15ED D7            push a
2730   15EE DA            push d
2731   15EF FA F5 FF      lea d, [bp + -11] ; $i
2732   15F2 2A            mov b, [d]
2733   15F3 E7            pop d
2734   15F4 5A            add d, b
2735   15F5 E4            pop a
2736   15F6 DA            push d
2737   15F7 26 30 00      mov b, $30
2738   15FA             ; START TERMS
2739   15FA D7            push a
2740   15FB 11            mov a, b
2741   15FC FA 05 00      lea d, [bp + 5] ; $num
2742   15FF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2743   1602 FD 39         mov c, b ; And place it into C
2744   1604 2A            mov b, [d] ; Lower Word in B
2745   1605             ; START FACTORS
2746   1605 D7            push a
2747   1606 11            mov a, b
2748   1607 26 0A 00      mov b, $a
2749   160A AE            div a, b ; 
2750   160B 11            mov a, b
2751   160C 27            mov b, a
2752   160D E4            pop a
2753   160E             ; END FACTORS
2754   160E 54            add a, b
2755   160F D7            push a
2756   1610 FD 12         mov a, g
2757   1612 28            mov b, c
2758   1613 5C            adc a, b
2759   1614 39            mov c, a
2760   1615 E5            pop b
2761   1616 E4            pop a
2762   1617             ; END TERMS
2763   1617 E7            pop d
2764   1618 FD 3E         mov [d], bl
2765   161A             ;; num = num / 10; 
2766   161A FA 05 00      lea d, [bp + 5] ; $num
2767   161D DA            push d
2768   161E FA 05 00      lea d, [bp + 5] ; $num
2769   1621 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2770   1624 FD 39         mov c, b ; And place it into C
2771   1626 2A            mov b, [d] ; Lower Word in B
2772   1627             ; START FACTORS
2773   1627 D7            push a
2774   1628 11            mov a, b
2775   1629 26 0A 00      mov b, $a
2776   162C AE            div a, b
2777   162D 27            mov b, a
2778   162E E4            pop a
2779   162F             ; END FACTORS
2780   162F E7            pop d
2781   1630 FD 43         mov [d], b
2782   1632 28            mov b, c
2783   1633 FD 44 02 00   mov [d + 2], b
2784   1637             ;; i++; 
2785   1637 FA F5 FF      lea d, [bp + -11] ; $i
2786   163A 2A            mov b, [d]
2787   163B FD 77         inc b
2788   163D FA F5 FF      lea d, [bp + -11] ; $i
2789   1640 FD 43         mov [d], b
2790   1642 FD 7D         dec b
2791   1644 0A CA 15      jmp _while45_cond
2792   1647             _while45_exit:
2793   1647             ;; while (i > 0) { 
2794   1647             _while46_cond:
2795   1647 FA F5 FF      lea d, [bp + -11] ; $i
2796   164A 2A            mov b, [d]
2797   164B             ; START RELATIONAL
2798   164B D7            push a
2799   164C 11            mov a, b
2800   164D 26 00 00      mov b, $0
2801   1650 B0            cmp a, b
2802   1651 FD 7F         sgt ; >
2803   1653 E4            pop a
2804   1654             ; END RELATIONAL
2805   1654 C0 00 00      cmp b, 0
2806   1657 C6 80 16      je _while46_exit
2807   165A             _while46_block:
2808   165A             ;; i--; 
2809   165A FA F5 FF      lea d, [bp + -11] ; $i
2810   165D 2A            mov b, [d]
2811   165E FD 7D         dec b
2812   1660 FA F5 FF      lea d, [bp + -11] ; $i
2813   1663 FD 43         mov [d], b
2814   1665 FD 77         inc b
2815   1667             ;; putchar(digits[i]); 
2816   1667 FA F7 FF      lea d, [bp + -9] ; $digits
2817   166A D7            push a
2818   166B DA            push d
2819   166C FA F5 FF      lea d, [bp + -11] ; $i
2820   166F 2A            mov b, [d]
2821   1670 E7            pop d
2822   1671 5A            add d, b
2823   1672 E4            pop a
2824   1673 32            mov bl, [d]
2825   1674 A7 00         mov bh, 0
2826   1676 DD            push bl
2827   1677 07 55 17      call putchar
2828   167A 51 01 00      add sp, 1
2829   167D 0A 47 16      jmp _while46_cond
2830   1680             _while46_exit:
2831   1680 F9            leave
2832   1681 09            ret
2833   1682             
2834   1682             print_unsigned:
2835   1682 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2836   1685             ;; char digits[5]; 
2837   1685 52 05 00      sub sp, 5 ; digits
2838   1688             ;; int i; 
2839   1688 52 02 00      sub sp, 2 ; i
2840   168B             ;; i = 0; 
2841   168B FA FA FF      lea d, [bp + -6] ; $i
2842   168E DA            push d
2843   168F 26 00 00      mov b, $0
2844   1692 E7            pop d
2845   1693 FD 43         mov [d], b
2846   1695             ;; if(num == 0){ 
2847   1695             _if47_cond:
2848   1695 FA 05 00      lea d, [bp + 5] ; $num
2849   1698 2A            mov b, [d]
2850   1699             ; START RELATIONAL
2851   1699 D7            push a
2852   169A 11            mov a, b
2853   169B 26 00 00      mov b, $0
2854   169E B0            cmp a, b
2855   169F FD 71         seq ; ==
2856   16A1 E4            pop a
2857   16A2             ; END RELATIONAL
2858   16A2 C0 00 00      cmp b, 0
2859   16A5 C6 B7 16      je _if47_exit
2860   16A8             _if47_true:
2861   16A8             ;; putchar('0'); 
2862   16A8 26 30 00      mov b, $30
2863   16AB DD            push bl
2864   16AC 07 55 17      call putchar
2865   16AF 51 01 00      add sp, 1
2866   16B2             ;; return; 
2867   16B2 F9            leave
2868   16B3 09            ret
2869   16B4 0A B7 16      jmp _if47_exit
2870   16B7             _if47_exit:
2871   16B7             ;; while (num > 0) { 
2872   16B7             _while48_cond:
2873   16B7 FA 05 00      lea d, [bp + 5] ; $num
2874   16BA 2A            mov b, [d]
2875   16BB             ; START RELATIONAL
2876   16BB D7            push a
2877   16BC 11            mov a, b
2878   16BD 26 00 00      mov b, $0
2879   16C0 B0            cmp a, b
2880   16C1 FD 81         sgu ; > (unsigned)
2881   16C3 E4            pop a
2882   16C4             ; END RELATIONAL
2883   16C4 C0 00 00      cmp b, 0
2884   16C7 C6 11 17      je _while48_exit
2885   16CA             _while48_block:
2886   16CA             ;; digits[i] = '0' + (num % 10); 
2887   16CA FA FC FF      lea d, [bp + -4] ; $digits
2888   16CD D7            push a
2889   16CE DA            push d
2890   16CF FA FA FF      lea d, [bp + -6] ; $i
2891   16D2 2A            mov b, [d]
2892   16D3 E7            pop d
2893   16D4 5A            add d, b
2894   16D5 E4            pop a
2895   16D6 DA            push d
2896   16D7 26 30 00      mov b, $30
2897   16DA             ; START TERMS
2898   16DA D7            push a
2899   16DB 11            mov a, b
2900   16DC FA 05 00      lea d, [bp + 5] ; $num
2901   16DF 2A            mov b, [d]
2902   16E0             ; START FACTORS
2903   16E0 D7            push a
2904   16E1 11            mov a, b
2905   16E2 26 0A 00      mov b, $a
2906   16E5 AE            div a, b ; 
2907   16E6 11            mov a, b
2908   16E7 27            mov b, a
2909   16E8 E4            pop a
2910   16E9             ; END FACTORS
2911   16E9 56            add b, a
2912   16EA E4            pop a
2913   16EB             ; END TERMS
2914   16EB E7            pop d
2915   16EC FD 3E         mov [d], bl
2916   16EE             ;; num = num / 10; 
2917   16EE FA 05 00      lea d, [bp + 5] ; $num
2918   16F1 DA            push d
2919   16F2 FA 05 00      lea d, [bp + 5] ; $num
2920   16F5 2A            mov b, [d]
2921   16F6             ; START FACTORS
2922   16F6 D7            push a
2923   16F7 11            mov a, b
2924   16F8 26 0A 00      mov b, $a
2925   16FB AE            div a, b
2926   16FC 27            mov b, a
2927   16FD E4            pop a
2928   16FE             ; END FACTORS
2929   16FE E7            pop d
2930   16FF FD 43         mov [d], b
2931   1701             ;; i++; 
2932   1701 FA FA FF      lea d, [bp + -6] ; $i
2933   1704 2A            mov b, [d]
2934   1705 FD 77         inc b
2935   1707 FA FA FF      lea d, [bp + -6] ; $i
2936   170A FD 43         mov [d], b
2937   170C FD 7D         dec b
2938   170E 0A B7 16      jmp _while48_cond
2939   1711             _while48_exit:
2940   1711             ;; while (i > 0) { 
2941   1711             _while49_cond:
2942   1711 FA FA FF      lea d, [bp + -6] ; $i
2943   1714 2A            mov b, [d]
2944   1715             ; START RELATIONAL
2945   1715 D7            push a
2946   1716 11            mov a, b
2947   1717 26 00 00      mov b, $0
2948   171A B0            cmp a, b
2949   171B FD 7F         sgt ; >
2950   171D E4            pop a
2951   171E             ; END RELATIONAL
2952   171E C0 00 00      cmp b, 0
2953   1721 C6 4A 17      je _while49_exit
2954   1724             _while49_block:
2955   1724             ;; i--; 
2956   1724 FA FA FF      lea d, [bp + -6] ; $i
2957   1727 2A            mov b, [d]
2958   1728 FD 7D         dec b
2959   172A FA FA FF      lea d, [bp + -6] ; $i
2960   172D FD 43         mov [d], b
2961   172F FD 77         inc b
2962   1731             ;; putchar(digits[i]); 
2963   1731 FA FC FF      lea d, [bp + -4] ; $digits
2964   1734 D7            push a
2965   1735 DA            push d
2966   1736 FA FA FF      lea d, [bp + -6] ; $i
2967   1739 2A            mov b, [d]
2968   173A E7            pop d
2969   173B 5A            add d, b
2970   173C E4            pop a
2971   173D 32            mov bl, [d]
2972   173E A7 00         mov bh, 0
2973   1740 DD            push bl
2974   1741 07 55 17      call putchar
2975   1744 51 01 00      add sp, 1
2976   1747 0A 11 17      jmp _while49_cond
2977   174A             _while49_exit:
2978   174A F9            leave
2979   174B 09            ret
2980   174C             
2981   174C             date:
2982   174C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2983   174F             
2984   174F             ; --- BEGIN INLINE ASM BLOCK
2985   174F 19 00         mov al, 0 
2986   1751 05 07         syscall sys_datetime
2987   1753             ; --- END INLINE ASM BLOCK
2988   1753             
2989   1753 F9            leave
2990   1754 09            ret
2991   1755             
2992   1755             putchar:
2993   1755 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2994   1758             
2995   1758             ; --- BEGIN INLINE ASM BLOCK
2996   1758 FA 05 00      lea d, [bp + 5] ; $c
2997   175B 1E            mov al, [d]
2998   175C 23            mov ah, al
2999   175D 07 E6 18      call _putchar
3000   1760             ; --- END INLINE ASM BLOCK
3001   1760             
3002   1760 F9            leave
3003   1761 09            ret
3004   1762             
3005   1762             getchar:
3006   1762 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3007   1765             ;; char c; 
3008   1765 52 01 00      sub sp, 1 ; c
3009   1768             
3010   1768             ; --- BEGIN INLINE ASM BLOCK
3011   1768 07 DF 18      call getch
3012   176B 1A            mov al, ah
3013   176C FA 00 00      lea d, [bp + 0] ; $c
3014   176F 3E            mov [d], al
3015   1770             ; --- END INLINE ASM BLOCK
3016   1770             
3017   1770             ;; return c; 
3018   1770 FA 00 00      lea d, [bp + 0] ; $c
3019   1773 32            mov bl, [d]
3020   1774 A7 00         mov bh, 0
3021   1776 F9            leave
3022   1777 09            ret
3023   1778             
3024   1778             scann:
3025   1778 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3026   177B             ;; int m; 
3027   177B 52 02 00      sub sp, 2 ; m
3028   177E             
3029   177E             ; --- BEGIN INLINE ASM BLOCK
3030   177E 07 2A 1B      call scan_u16d
3031   1781 FA FF FF      lea d, [bp + -1] ; $m
3032   1784 43            mov [d], a
3033   1785             ; --- END INLINE ASM BLOCK
3034   1785             
3035   1785             ;; return m; 
3036   1785 FA FF FF      lea d, [bp + -1] ; $m
3037   1788 2A            mov b, [d]
3038   1789 F9            leave
3039   178A 09            ret
3040   178B             
3041   178B             puts:
3042   178B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3043   178E             
3044   178E             ; --- BEGIN INLINE ASM BLOCK
3045   178E FA 05 00      lea d, [bp + 5] ; $s
3046   1791 15            mov a, [d]
3047   1792 3C            mov d, a
3048   1793 07 30 1A      call _puts
3049   1796 10 00 0A      mov a, $0A00
3050   1799 05 03         syscall sys_io
3051   179B             ; --- END INLINE ASM BLOCK
3052   179B             
3053   179B F9            leave
3054   179C 09            ret
3055   179D             
3056   179D             print:
3057   179D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3058   17A0             
3059   17A0             ; --- BEGIN INLINE ASM BLOCK
3060   17A0 FA 05 00      lea d, [bp + 5] ; $s
3061   17A3 FD 2A         mov d, [d]
3062   17A5 07 30 1A      call _puts
3063   17A8             ; --- END INLINE ASM BLOCK
3064   17A8             
3065   17A8 F9            leave
3066   17A9 09            ret
3067   17AA             
3068   17AA             getparam:
3069   17AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3070   17AD             ;; char data; 
3071   17AD 52 01 00      sub sp, 1 ; data
3072   17B0             
3073   17B0             ; --- BEGIN INLINE ASM BLOCK
3074   17B0 19 04         mov al, 4
3075   17B2 FA 05 00      lea d, [bp + 5] ; $address
3076   17B5 FD 2A         mov d, [d]
3077   17B7 05 0C         syscall sys_system
3078   17B9 FA 00 00      lea d, [bp + 0] ; $data
3079   17BC FD 3E         mov [d], bl
3080   17BE             ; --- END INLINE ASM BLOCK
3081   17BE             
3082   17BE             ;; return data; 
3083   17BE FA 00 00      lea d, [bp + 0] ; $data
3084   17C1 32            mov bl, [d]
3085   17C2 A7 00         mov bh, 0
3086   17C4 F9            leave
3087   17C5 09            ret
3088   17C6             
3089   17C6             clear:
3090   17C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3091   17C9             ;; print("\033[2J\033[H"); 
3092   17C9 26 5F 28      mov b, _s3 ; "\033[2J\033[H"
3093   17CC FD AB         swp b
3094   17CE D8            push b
3095   17CF 07 9D 17      call print
3096   17D2 51 02 00      add sp, 2
3097   17D5 F9            leave
3098   17D6 09            ret
3099   17D7             
3100   17D7             abs:
3101   17D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3102   17DA             ;; return i < 0 ? -i : i; 
3103   17DA             _ternary50_cond:
3104   17DA FA 05 00      lea d, [bp + 5] ; $i
3105   17DD 2A            mov b, [d]
3106   17DE             ; START RELATIONAL
3107   17DE D7            push a
3108   17DF 11            mov a, b
3109   17E0 26 00 00      mov b, $0
3110   17E3 B0            cmp a, b
3111   17E4 FD 73         slt ; < (signed)
3112   17E6 E4            pop a
3113   17E7             ; END RELATIONAL
3114   17E7 C0 00 00      cmp b, 0
3115   17EA C6 F6 17      je _ternary50_false
3116   17ED             _ternary50_true:
3117   17ED FA 05 00      lea d, [bp + 5] ; $i
3118   17F0 2A            mov b, [d]
3119   17F1 FD 97         neg b
3120   17F3 0A FA 17      jmp _ternary50_exit
3121   17F6             _ternary50_false:
3122   17F6 FA 05 00      lea d, [bp + 5] ; $i
3123   17F9 2A            mov b, [d]
3124   17FA             _ternary50_exit:
3125   17FA F9            leave
3126   17FB 09            ret
3127   17FC             
3128   17FC             include_stdio_asm:
3129   17FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3130   17FF             
3131   17FF             ; --- BEGIN INLINE ASM BLOCK
3132   17FF             .include "lib/asm/stdio.asm"
0001+  17FF             ;-----------------------------------------------------------------------------
0002+  17FF             ; stdio.s
0003+  17FF             ;-----------------------------------------------------------------------------
0004+  17FF             .include "lib/asm/string.asm"
0001++ 17FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 17FF             ; string.s
0003++ 17FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 17FF             
0005++ 17FF             
0006++ 17FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 17FF             ; _strrev
0008++ 17FF             ; reverse a string
0009++ 17FF             ; D = string address
0010++ 17FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 17FF             ; 01234
0012++ 17FF             _strrev:
0013++ 17FF 4B          	pusha
0014++ 1800 07 46 18    	call _strlen	; length in C
0015++ 1803 12          	mov a, c
0016++ 1804 AF 01 00    	cmp a, 1
0017++ 1807 D0 21 18    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 180A 7D          	dec a
0019++ 180B FD 4E       	mov si, d	; beginning of string
0020++ 180D FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 180F 59          	add d, a	; end of string
0022++ 1810 12          	mov a, c
0023++ 1811 FD 9B       	shr a		; divide by 2
0024++ 1813 39          	mov c, a	; C now counts the steps
0025++ 1814             _strrev_L0:
0026++ 1814 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1815 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1816 3E          	mov [d], al	; store left char into right side
0029++ 1817 1B          	mov al, bl
0030++ 1818 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1819 7E          	dec c
0032++ 181A 7F          	dec d
0033++ 181B C2 00 00    	cmp c, 0
0034++ 181E C7 14 18    	jne _strrev_L0
0035++ 1821             _strrev_end:
0036++ 1821 4C          	popa
0037++ 1822 09          	ret
0038++ 1823             	
0039++ 1823             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1823             ; _strchr
0041++ 1823             ; search string in D for char in AL
0042++ 1823             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1823             _strchr:
0044++ 1823             _strchr_L0:
0045++ 1823 32          	mov bl, [d]
0046++ 1824 C1 00       	cmp bl, 0
0047++ 1826 C6 31 18    	je _strchr_end
0048++ 1829 BA          	cmp al, bl
0049++ 182A C6 31 18    	je _strchr_end
0050++ 182D 79          	inc d
0051++ 182E 0A 23 18    	jmp _strchr_L0
0052++ 1831             _strchr_end:
0053++ 1831 1B          	mov al, bl
0054++ 1832 09          	ret
0055++ 1833             
0056++ 1833             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1833             ; _strstr
0058++ 1833             ; find sub-string
0059++ 1833             ; str1 in SI
0060++ 1833             ; str2 in DI
0061++ 1833             ; SI points to end of source string
0062++ 1833             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1833             _strstr:
0064++ 1833 DB          	push al
0065++ 1834 DA          	push d
0066++ 1835 E3          	push di
0067++ 1836             _strstr_loop:
0068++ 1836 F3          	cmpsb					; compare a byte of the strings
0069++ 1837 C7 42 18    	jne _strstr_ret
0070++ 183A FC 00 00    	lea d, [di + 0]
0071++ 183D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 183F C7 36 18    	jne _strstr_loop				; equal chars but not at end
0073++ 1842             _strstr_ret:
0074++ 1842 F0          	pop di
0075++ 1843 E7          	pop d
0076++ 1844 E8          	pop al
0077++ 1845 09          	ret
0078++ 1846             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1846             ; length of null terminated string
0080++ 1846             ; result in C
0081++ 1846             ; pointer in D
0082++ 1846             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1846             _strlen:
0084++ 1846 DA          	push d
0085++ 1847 38 00 00    	mov c, 0
0086++ 184A             _strlen_L1:
0087++ 184A BD 00       	cmp byte [d], 0
0088++ 184C C6 54 18    	je _strlen_ret
0089++ 184F 79          	inc d
0090++ 1850 78          	inc c
0091++ 1851 0A 4A 18    	jmp _strlen_L1
0092++ 1854             _strlen_ret:
0093++ 1854 E7          	pop d
0094++ 1855 09          	ret
0095++ 1856             
0096++ 1856             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1856             ; STRCMP
0098++ 1856             ; compare two strings
0099++ 1856             ; str1 in SI
0100++ 1856             ; str2 in DI
0101++ 1856             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1856             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1856             _strcmp:
0104++ 1856 DB          	push al
0105++ 1857 DA          	push d
0106++ 1858 E3          	push di
0107++ 1859 E2          	push si
0108++ 185A             _strcmp_loop:
0109++ 185A F3          	cmpsb					; compare a byte of the strings
0110++ 185B C7 66 18    	jne _strcmp_ret
0111++ 185E FB FF FF    	lea d, [si +- 1]
0112++ 1861 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1863 C7 5A 18    	jne _strcmp_loop				; equal chars but not at end
0114++ 1866             _strcmp_ret:
0115++ 1866 EF          	pop si
0116++ 1867 F0          	pop di
0117++ 1868 E7          	pop d
0118++ 1869 E8          	pop al
0119++ 186A 09          	ret
0120++ 186B             
0121++ 186B             
0122++ 186B             ; STRCPY
0123++ 186B             ; copy null terminated string from SI to DI
0124++ 186B             ; source in SI
0125++ 186B             ; destination in DI
0126++ 186B             _strcpy:
0127++ 186B E2          	push si
0128++ 186C E3          	push di
0129++ 186D DB          	push al
0130++ 186E             _strcpy_L1:
0131++ 186E F6          	lodsb
0132++ 186F F7          	stosb
0133++ 1870 B9 00       	cmp al, 0
0134++ 1872 C7 6E 18    	jne _strcpy_L1
0135++ 1875             _strcpy_end:
0136++ 1875 E8          	pop al
0137++ 1876 F0          	pop di
0138++ 1877 EF          	pop si
0139++ 1878 09          	ret
0140++ 1879             
0141++ 1879             ; STRCAT
0142++ 1879             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1879             ; source in SI
0144++ 1879             ; destination in DI
0145++ 1879             _strcat:
0146++ 1879 E2          	push si
0147++ 187A E3          	push di
0148++ 187B D7          	push a
0149++ 187C DA          	push d
0150++ 187D 50          	mov a, di
0151++ 187E 3C          	mov d, a
0152++ 187F             _strcat_goto_end_L1:
0153++ 187F BD 00       	cmp byte[d], 0
0154++ 1881 C6 88 18    	je _strcat_start
0155++ 1884 79          	inc d
0156++ 1885 0A 7F 18    	jmp _strcat_goto_end_L1
0157++ 1888             _strcat_start:
0158++ 1888 FD 50       	mov di, d
0159++ 188A             _strcat_L1:
0160++ 188A F6          	lodsb
0161++ 188B F7          	stosb
0162++ 188C B9 00       	cmp al, 0
0163++ 188E C7 8A 18    	jne _strcat_L1
0164++ 1891             _strcat_end:
0165++ 1891 E7          	pop d
0166++ 1892 E4          	pop a
0167++ 1893 F0          	pop di
0168++ 1894 EF          	pop si
0169++ 1895 09          	ret
0170++ 1896             
0171++ 1896             
0005+  1896             
0006+  1896             ;-----------------------------------------------------------------------------
0007+  1896             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1896             ; ASCII in BL
0009+  1896             ; result in AL
0010+  1896             ; ascii for F = 0100 0110
0011+  1896             ; ascii for 9 = 0011 1001
0012+  1896             ;-----------------------------------------------------------------------------
0013+  1896             hex_ascii_encode:
0014+  1896 1B            mov al, bl
0015+  1897 93 40         test al, $40        ; test if letter or number
0016+  1899 C7 9F 18      jnz hex_letter
0017+  189C 87 0F         and al, $0F        ; get number
0018+  189E 09            ret
0019+  189F             hex_letter:
0020+  189F 87 0F         and al, $0F        ; get letter
0021+  18A1 6A 09         add al, 9
0022+  18A3 09            ret
0023+  18A4             
0024+  18A4             ;-----------------------------------------------------------------------------
0025+  18A4             ; ATOI
0026+  18A4             ; 2 letter hex string in B
0027+  18A4             ; 8bit integer returned in AL
0028+  18A4             ;-----------------------------------------------------------------------------
0029+  18A4             _atoi:
0030+  18A4 D8            push b
0031+  18A5 07 96 18      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  18A8 30            mov bl, bh
0033+  18A9 DB            push al          ; save a
0034+  18AA 07 96 18      call hex_ascii_encode
0035+  18AD EA            pop bl  
0036+  18AE FD 9E 04      shl al, 4
0037+  18B1 8C            or al, bl
0038+  18B2 E5            pop b
0039+  18B3 09            ret  
0040+  18B4             
0041+  18B4             
0042+  18B4             ;-----------------------------------------------------------------------------
0043+  18B4             ; ITOA
0044+  18B4             ; 8bit value in BL
0045+  18B4             ; 2 byte ASCII result in A
0046+  18B4             ;-----------------------------------------------------------------------------
0047+  18B4             _itoa:
0048+  18B4 DA            push d
0049+  18B5 D8            push b
0050+  18B6 A7 00         mov bh, 0
0051+  18B8 FD A4 04      shr bl, 4  
0052+  18BB 74            mov d, b
0053+  18BC 1F 64 1B      mov al, [d + s_hex_digits]
0054+  18BF 23            mov ah, al
0055+  18C0               
0056+  18C0 E5            pop b
0057+  18C1 D8            push b
0058+  18C2 A7 00         mov bh, 0
0059+  18C4 FD 87 0F      and bl, $0F
0060+  18C7 74            mov d, b
0061+  18C8 1F 64 1B      mov al, [d + s_hex_digits]
0062+  18CB E5            pop b
0063+  18CC E7            pop d
0064+  18CD 09            ret
0065+  18CE             
0066+  18CE             ;-----------------------------------------------------------------------------
0067+  18CE             ; HEX STRING TO BINARY
0068+  18CE             ; di = destination address
0069+  18CE             ; si = source
0070+  18CE             ;-----------------------------------------------------------------------------
0071+  18CE             _hex_to_int:
0072+  18CE             _hex_to_int_L1:
0073+  18CE F6            lodsb          ; load from [SI] to AL
0074+  18CF B9 00         cmp al, 0        ; check if ASCII 0
0075+  18D1 C6 DE 18      jz _hex_to_int_ret
0076+  18D4 36            mov bh, al
0077+  18D5 F6            lodsb
0078+  18D6 2F            mov bl, al
0079+  18D7 07 A4 18      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  18DA F7            stosb          ; store AL to [DI]
0081+  18DB 0A CE 18      jmp _hex_to_int_L1
0082+  18DE             _hex_to_int_ret:
0083+  18DE 09            ret    
0084+  18DF             
0085+  18DF             ;-----------------------------------------------------------------------------
0086+  18DF             ; GETCHAR
0087+  18DF             ; char in ah
0088+  18DF             ;-----------------------------------------------------------------------------
0089+  18DF             getch:
0090+  18DF DB            push al
0091+  18E0             getch_retry:
0092+  18E0 19 01         mov al, 1
0093+  18E2 05 03         syscall sys_io      ; receive in AH
0094+  18E4 E8            pop al
0095+  18E5 09            ret
0096+  18E6             
0097+  18E6             ;-----------------------------------------------------------------------------
0098+  18E6             ; PUTCHAR
0099+  18E6             ; char in ah
0100+  18E6             ;-----------------------------------------------------------------------------
0101+  18E6             _putchar:
0102+  18E6 D7            push a
0103+  18E7 19 00         mov al, 0
0104+  18E9 05 03         syscall sys_io      ; char in AH
0105+  18EB E4            pop a
0106+  18EC 09            ret
0107+  18ED             
0108+  18ED             ;-----------------------------------------------------------------------------
0109+  18ED             ;; INPUT A STRING
0110+  18ED             ;; terminates with null
0111+  18ED             ;; pointer in D
0112+  18ED             ;-----------------------------------------------------------------------------
0113+  18ED             _gets:
0114+  18ED D7            push a
0115+  18EE DA            push d
0116+  18EF             _gets_loop:
0117+  18EF 19 01         mov al, 1
0118+  18F1 05 03         syscall sys_io      ; receive in AH
0119+  18F3 B9 00         cmp al, 0        ; check error code (AL)
0120+  18F5 C6 EF 18      je _gets_loop      ; if no char received, retry
0121+  18F8             
0122+  18F8 76 1B         cmp ah, 27
0123+  18FA C6 1B 19      je _gets_ansi_esc
0124+  18FD 76 0A         cmp ah, $0A        ; LF
0125+  18FF C6 86 19      je _gets_end
0126+  1902 76 0D         cmp ah, $0D        ; CR
0127+  1904 C6 86 19      je _gets_end
0128+  1907 76 5C         cmp ah, $5C        ; '\\'
0129+  1909 C6 47 19      je _gets_escape
0130+  190C               
0131+  190C 76 08         cmp ah, $08      ; check for backspace
0132+  190E C6 17 19      je _gets_backspace
0133+  1911             
0134+  1911 1A            mov al, ah
0135+  1912 3E            mov [d], al
0136+  1913 79            inc d
0137+  1914 0A EF 18      jmp _gets_loop
0138+  1917             _gets_backspace:
0139+  1917 7F            dec d
0140+  1918 0A EF 18      jmp _gets_loop
0141+  191B             _gets_ansi_esc:
0142+  191B 19 01         mov al, 1
0143+  191D 05 03         syscall sys_io        ; receive in AH without echo
0144+  191F B9 00         cmp al, 0          ; check error code (AL)
0145+  1921 C6 1B 19      je _gets_ansi_esc    ; if no char received, retry
0146+  1924 76 5B         cmp ah, '['
0147+  1926 C7 EF 18      jne _gets_loop
0148+  1929             _gets_ansi_esc_2:
0149+  1929 19 01         mov al, 1
0150+  192B 05 03         syscall sys_io          ; receive in AH without echo
0151+  192D B9 00         cmp al, 0            ; check error code (AL)
0152+  192F C6 29 19      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1932 76 44         cmp ah, 'D'
0154+  1934 C6 3F 19      je _gets_left_arrow
0155+  1937 76 43         cmp ah, 'C'
0156+  1939 C6 43 19      je _gets_right_arrow
0157+  193C 0A EF 18      jmp _gets_loop
0158+  193F             _gets_left_arrow:
0159+  193F 7F            dec d
0160+  1940 0A EF 18      jmp _gets_loop
0161+  1943             _gets_right_arrow:
0162+  1943 79            inc d
0163+  1944 0A EF 18      jmp _gets_loop
0164+  1947             _gets_escape:
0165+  1947 19 01         mov al, 1
0166+  1949 05 03         syscall sys_io      ; receive in AH
0167+  194B B9 00         cmp al, 0        ; check error code (AL)
0168+  194D C6 47 19      je _gets_escape      ; if no char received, retry
0169+  1950 76 6E         cmp ah, 'n'
0170+  1952 C6 71 19      je _gets_LF
0171+  1955 76 72         cmp ah, 'r'
0172+  1957 C6 78 19      je _gets_CR
0173+  195A 76 30         cmp ah, '0'
0174+  195C C6 7F 19      je _gets_NULL
0175+  195F 76 5C         cmp ah, $5C  ; '\'
0176+  1961 C6 6A 19      je _gets_slash
0177+  1964 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1965 3E            mov [d], al
0179+  1966 79            inc d
0180+  1967 0A EF 18      jmp _gets_loop
0181+  196A             _gets_slash:
0182+  196A 19 5C         mov al, $5C
0183+  196C 3E            mov [d], al
0184+  196D 79            inc d
0185+  196E 0A EF 18      jmp _gets_loop
0186+  1971             _gets_LF:
0187+  1971 19 0A         mov al, $0A
0188+  1973 3E            mov [d], al
0189+  1974 79            inc d
0190+  1975 0A EF 18      jmp _gets_loop
0191+  1978             _gets_CR:
0192+  1978 19 0D         mov al, $0D
0193+  197A 3E            mov [d], al
0194+  197B 79            inc d
0195+  197C 0A EF 18      jmp _gets_loop
0196+  197F             _gets_NULL:
0197+  197F 19 00         mov al, $00
0198+  1981 3E            mov [d], al
0199+  1982 79            inc d
0200+  1983 0A EF 18      jmp _gets_loop
0201+  1986             _gets_end:
0202+  1986 19 00         mov al, 0
0203+  1988 3E            mov [d], al        ; terminate string
0204+  1989 E7            pop d
0205+  198A E4            pop a
0206+  198B 09            ret
0207+  198C             
0208+  198C             ;-----------------------------------------------------------------------------
0209+  198C             ;; INPUT TEXT
0210+  198C             ;; terminated with CTRL+D
0211+  198C             ;; pointer in D
0212+  198C             ;-----------------------------------------------------------------------------
0213+  198C             _gettxt:
0214+  198C D7            push a
0215+  198D DA            push d
0216+  198E             _gettxt_loop:
0217+  198E 19 01         mov al, 1
0218+  1990 05 03         syscall sys_io      ; receive in AH
0219+  1992 B9 00         cmp al, 0        ; check error code (AL)
0220+  1994 C6 8E 19      je _gettxt_loop    ; if no char received, retry
0221+  1997 76 04         cmp ah, 4      ; EOT
0222+  1999 C6 D7 19      je _gettxt_end
0223+  199C 76 08         cmp ah, $08      ; check for backspace
0224+  199E C6 D3 19      je _gettxt_backspace
0225+  19A1 76 5C         cmp ah, $5C        ; '\'
0226+  19A3 C6 AC 19      je _gettxt_escape
0227+  19A6 1A            mov al, ah
0228+  19A7 3E            mov [d], al
0229+  19A8 79            inc d
0230+  19A9 0A 8E 19      jmp _gettxt_loop
0231+  19AC             _gettxt_escape:
0232+  19AC 19 01         mov al, 1
0233+  19AE 05 03         syscall sys_io      ; receive in AH
0234+  19B0 B9 00         cmp al, 0        ; check error code (AL)
0235+  19B2 C6 AC 19      je _gettxt_escape    ; if no char received, retry
0236+  19B5 76 6E         cmp ah, 'n'
0237+  19B7 C6 C5 19      je _gettxt_LF
0238+  19BA 76 72         cmp ah, 'r'
0239+  19BC C6 CC 19      je _gettxt_CR
0240+  19BF 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  19C0 3E            mov [d], al
0242+  19C1 79            inc d
0243+  19C2 0A 8E 19      jmp _gettxt_loop
0244+  19C5             _gettxt_LF:
0245+  19C5 19 0A         mov al, $0A
0246+  19C7 3E            mov [d], al
0247+  19C8 79            inc d
0248+  19C9 0A 8E 19      jmp _gettxt_loop
0249+  19CC             _gettxt_CR:
0250+  19CC 19 0D         mov al, $0D
0251+  19CE 3E            mov [d], al
0252+  19CF 79            inc d
0253+  19D0 0A 8E 19      jmp _gettxt_loop
0254+  19D3             _gettxt_backspace:
0255+  19D3 7F            dec d
0256+  19D4 0A 8E 19      jmp _gettxt_loop
0257+  19D7             _gettxt_end:
0258+  19D7 19 00         mov al, 0
0259+  19D9 3E            mov [d], al        ; terminate string
0260+  19DA E7            pop d
0261+  19DB E4            pop a
0262+  19DC 09            ret
0263+  19DD             
0264+  19DD             ;-----------------------------------------------------------------------------
0265+  19DD             ; PRINT NEW LINE
0266+  19DD             ;-----------------------------------------------------------------------------
0267+  19DD             printnl:
0268+  19DD D7            push a
0269+  19DE 10 00 0A      mov a, $0A00
0270+  19E1 05 03         syscall sys_io
0271+  19E3 10 00 0D      mov a, $0D00
0272+  19E6 05 03         syscall sys_io
0273+  19E8 E4            pop a
0274+  19E9 09            ret
0275+  19EA             
0276+  19EA             ;-----------------------------------------------------------------------------
0277+  19EA             ; _strtoint
0278+  19EA             ; 4 digit hex string number in d
0279+  19EA             ; integer returned in A
0280+  19EA             ;-----------------------------------------------------------------------------
0281+  19EA             _strtointx:
0282+  19EA D8            push b
0283+  19EB 32            mov bl, [d]
0284+  19EC 37            mov bh, bl
0285+  19ED 33 01 00      mov bl, [d + 1]
0286+  19F0 07 A4 18      call _atoi        ; convert to int in AL
0287+  19F3 23            mov ah, al        ; move to AH
0288+  19F4 33 02 00      mov bl, [d + 2]
0289+  19F7 37            mov bh, bl
0290+  19F8 33 03 00      mov bl, [d + 3]
0291+  19FB 07 A4 18      call _atoi        ; convert to int in AL
0292+  19FE E5            pop b
0293+  19FF 09            ret
0294+  1A00             
0295+  1A00             ;-----------------------------------------------------------------------------
0296+  1A00             ; _strtoint
0297+  1A00             ; 5 digit base10 string number in d
0298+  1A00             ; integer returned in A
0299+  1A00             ;-----------------------------------------------------------------------------
0300+  1A00             _strtoint:
0301+  1A00 E2            push si
0302+  1A01 D8            push b
0303+  1A02 D9            push c
0304+  1A03 DA            push d
0305+  1A04 07 46 18      call _strlen      ; get string length in C
0306+  1A07 7E            dec c
0307+  1A08 FD 4E         mov si, d
0308+  1A0A 12            mov a, c
0309+  1A0B FD 99         shl a
0310+  1A0D 3B 7C 1B      mov d, table_power
0311+  1A10 59            add d, a
0312+  1A11 38 00 00      mov c, 0
0313+  1A14             _strtoint_L0:
0314+  1A14 F6            lodsb      ; load ASCII to al
0315+  1A15 B9 00         cmp al, 0
0316+  1A17 C6 2A 1A      je _strtoint_end
0317+  1A1A 6F 30         sub al, $30    ; make into integer
0318+  1A1C 22 00         mov ah, 0
0319+  1A1E 2A            mov b, [d]
0320+  1A1F AC            mul a, b      ; result in B since it fits in 16bits
0321+  1A20 11            mov a, b
0322+  1A21 28            mov b, c
0323+  1A22 54            add a, b
0324+  1A23 39            mov c, a
0325+  1A24 63 02 00      sub d, 2
0326+  1A27 0A 14 1A      jmp _strtoint_L0
0327+  1A2A             _strtoint_end:
0328+  1A2A 12            mov a, c
0329+  1A2B E7            pop d
0330+  1A2C E6            pop c
0331+  1A2D E5            pop b
0332+  1A2E EF            pop si
0333+  1A2F 09            ret
0334+  1A30             
0335+  1A30             ;-----------------------------------------------------------------------------
0336+  1A30             ; PRINT NULL TERMINATED STRING
0337+  1A30             ; pointer in D
0338+  1A30             ;-----------------------------------------------------------------------------
0339+  1A30             _puts:
0340+  1A30 D7            push a
0341+  1A31 DA            push d
0342+  1A32             _puts_L1:
0343+  1A32 1E            mov al, [d]
0344+  1A33 B9 00         cmp al, 0
0345+  1A35 C6 41 1A      jz _puts_END
0346+  1A38 23            mov ah, al
0347+  1A39 19 00         mov al, 0
0348+  1A3B 05 03         syscall sys_io
0349+  1A3D 79            inc d
0350+  1A3E 0A 32 1A      jmp _puts_L1
0351+  1A41             _puts_END:
0352+  1A41 E7            pop d
0353+  1A42 E4            pop a
0354+  1A43 09            ret
0355+  1A44             
0356+  1A44             ;-----------------------------------------------------------------------------
0357+  1A44             ; PRINT N SIZE STRING
0358+  1A44             ; pointer in D
0359+  1A44             ; size in C
0360+  1A44             ;-----------------------------------------------------------------------------
0361+  1A44             _putsn:
0362+  1A44 DB            push al
0363+  1A45 DA            push d
0364+  1A46 D9            push c
0365+  1A47             _putsn_L0:
0366+  1A47 1E            mov al, [d]
0367+  1A48 23            mov ah, al
0368+  1A49 19 00         mov al, 0
0369+  1A4B 05 03         syscall sys_io
0370+  1A4D 79            inc d
0371+  1A4E 7E            dec c  
0372+  1A4F C2 00 00      cmp c, 0
0373+  1A52 C7 47 1A      jne _putsn_L0
0374+  1A55             _putsn_end:
0375+  1A55 E6            pop c
0376+  1A56 E7            pop d
0377+  1A57 E8            pop al
0378+  1A58 09            ret
0379+  1A59             
0380+  1A59             ;-----------------------------------------------------------------------------
0381+  1A59             ; print 16bit decimal number
0382+  1A59             ; input number in A
0383+  1A59             ;-----------------------------------------------------------------------------
0384+  1A59             print_u16d:
0385+  1A59 D7            push a
0386+  1A5A D8            push b
0387+  1A5B 26 10 27      mov b, 10000
0388+  1A5E AE            div a, b      ; get 10000's coeff.
0389+  1A5F 07 81 1A      call print_number
0390+  1A62 11            mov a, b
0391+  1A63 26 E8 03      mov b, 1000
0392+  1A66 AE            div a, b      ; get 1000's coeff.
0393+  1A67 07 81 1A      call print_number
0394+  1A6A 11            mov a, b
0395+  1A6B 26 64 00      mov b, 100
0396+  1A6E AE            div a, b
0397+  1A6F 07 81 1A      call print_number
0398+  1A72 11            mov a, b
0399+  1A73 26 0A 00      mov b, 10
0400+  1A76 AE            div a, b
0401+  1A77 07 81 1A      call print_number
0402+  1A7A 1B            mov al, bl      ; 1's coeff in bl
0403+  1A7B 07 81 1A      call print_number
0404+  1A7E E5            pop b
0405+  1A7F E4            pop a
0406+  1A80 09            ret
0407+  1A81             
0408+  1A81             ;-----------------------------------------------------------------------------
0409+  1A81             ; print AL
0410+  1A81             ;-----------------------------------------------------------------------------
0411+  1A81             print_number:
0412+  1A81 6A 30         add al, $30
0413+  1A83 23            mov ah, al
0414+  1A84 07 E6 18      call _putchar
0415+  1A87 09            ret
0416+  1A88             
0417+  1A88             ;-----------------------------------------------------------------------------
0418+  1A88             ; PRINT 16BIT HEX INTEGER
0419+  1A88             ; integer value in reg B
0420+  1A88             ;-----------------------------------------------------------------------------
0421+  1A88             print_u16x:
0422+  1A88 D7            push a
0423+  1A89 D8            push b
0424+  1A8A DD            push bl
0425+  1A8B 30            mov bl, bh
0426+  1A8C 07 B4 18      call _itoa        ; convert bh to char in A
0427+  1A8F 2F            mov bl, al        ; save al
0428+  1A90 19 00         mov al, 0
0429+  1A92 05 03         syscall sys_io        ; display AH
0430+  1A94 24            mov ah, bl        ; retrieve al
0431+  1A95 19 00         mov al, 0
0432+  1A97 05 03         syscall sys_io        ; display AL
0433+  1A99             
0434+  1A99 EA            pop bl
0435+  1A9A 07 B4 18      call _itoa        ; convert bh to char in A
0436+  1A9D 2F            mov bl, al        ; save al
0437+  1A9E 19 00         mov al, 0
0438+  1AA0 05 03         syscall sys_io        ; display AH
0439+  1AA2 24            mov ah, bl        ; retrieve al
0440+  1AA3 19 00         mov al, 0
0441+  1AA5 05 03         syscall sys_io        ; display AL
0442+  1AA7             
0443+  1AA7 E5            pop b
0444+  1AA8 E4            pop a
0445+  1AA9 09            ret
0446+  1AAA             
0447+  1AAA             ;-----------------------------------------------------------------------------
0448+  1AAA             ; INPUT 16BIT HEX INTEGER
0449+  1AAA             ; read 16bit integer into A
0450+  1AAA             ;-----------------------------------------------------------------------------
0451+  1AAA             scan_u16x:
0452+  1AAA F8 10 00      enter 16
0453+  1AAD D8            push b
0454+  1AAE DA            push d
0455+  1AAF             
0456+  1AAF FA F1 FF      lea d, [bp + -15]
0457+  1AB2 07 ED 18      call _gets        ; get number
0458+  1AB5             
0459+  1AB5 32            mov bl, [d]
0460+  1AB6 37            mov bh, bl
0461+  1AB7 33 01 00      mov bl, [d + 1]
0462+  1ABA 07 A4 18      call _atoi        ; convert to int in AL
0463+  1ABD 23            mov ah, al        ; move to AH
0464+  1ABE             
0465+  1ABE 33 02 00      mov bl, [d + 2]
0466+  1AC1 37            mov bh, bl
0467+  1AC2 33 03 00      mov bl, [d + 3]
0468+  1AC5 07 A4 18      call _atoi        ; convert to int in AL
0469+  1AC8             
0470+  1AC8 E7            pop d
0471+  1AC9 E5            pop b
0472+  1ACA F9            leave
0473+  1ACB 09            ret
0474+  1ACC             
0475+  1ACC             ;-----------------------------------------------------------------------------
0476+  1ACC             ; PRINT 8bit HEX INTEGER
0477+  1ACC             ; integer value in reg bl
0478+  1ACC             ;-----------------------------------------------------------------------------
0479+  1ACC             print_u8x:
0480+  1ACC D7            push a
0481+  1ACD DD            push bl
0482+  1ACE             
0483+  1ACE 07 B4 18      call _itoa        ; convert bl to char in A
0484+  1AD1 2F            mov bl, al        ; save al
0485+  1AD2 19 00         mov al, 0
0486+  1AD4 05 03         syscall sys_io        ; display AH
0487+  1AD6 24            mov ah, bl        ; retrieve al
0488+  1AD7 19 00         mov al, 0
0489+  1AD9 05 03         syscall sys_io        ; display AL
0490+  1ADB             
0491+  1ADB EA            pop bl
0492+  1ADC E4            pop a
0493+  1ADD 09            ret
0494+  1ADE             
0495+  1ADE             ;-----------------------------------------------------------------------------
0496+  1ADE             ; print 8bit decimal unsigned number
0497+  1ADE             ; input number in AL
0498+  1ADE             ;-----------------------------------------------------------------------------
0499+  1ADE             print_u8d:
0500+  1ADE D7            push a
0501+  1ADF D8            push b
0502+  1AE0             
0503+  1AE0 22 00         mov ah, 0
0504+  1AE2 26 64 00      mov b, 100
0505+  1AE5 AE            div a, b
0506+  1AE6 D8            push b      ; save remainder
0507+  1AE7 B9 00         cmp al, 0
0508+  1AE9 C6 F3 1A      je skip100
0509+  1AEC 6A 30         add al, $30
0510+  1AEE 23            mov ah, al
0511+  1AEF 19 00         mov al, 0
0512+  1AF1 05 03         syscall sys_io  ; print coeff
0513+  1AF3             skip100:
0514+  1AF3 E4            pop a
0515+  1AF4 22 00         mov ah, 0
0516+  1AF6 26 0A 00      mov b, 10
0517+  1AF9 AE            div a, b
0518+  1AFA D8            push b      ; save remainder
0519+  1AFB B9 00         cmp al, 0
0520+  1AFD C6 07 1B      je skip10
0521+  1B00 6A 30         add al, $30
0522+  1B02 23            mov ah, al
0523+  1B03 19 00         mov al, 0
0524+  1B05 05 03         syscall sys_io  ; print coeff
0525+  1B07             skip10:
0526+  1B07 E4            pop a
0527+  1B08 1B            mov al, bl
0528+  1B09 6A 30         add al, $30
0529+  1B0B 23            mov ah, al
0530+  1B0C 19 00         mov al, 0
0531+  1B0E 05 03         syscall sys_io  ; print coeff
0532+  1B10 E5            pop b
0533+  1B11 E4            pop a
0534+  1B12 09            ret
0535+  1B13             
0536+  1B13             ;-----------------------------------------------------------------------------
0537+  1B13             ; INPUT 8BIT HEX INTEGER
0538+  1B13             ; read 8bit integer into AL
0539+  1B13             ;-----------------------------------------------------------------------------
0540+  1B13             scan_u8x:
0541+  1B13 F8 04 00      enter 4
0542+  1B16 D8            push b
0543+  1B17 DA            push d
0544+  1B18             
0545+  1B18 FA FD FF      lea d, [bp + -3]
0546+  1B1B 07 ED 18      call _gets        ; get number
0547+  1B1E             
0548+  1B1E 32            mov bl, [d]
0549+  1B1F 37            mov bh, bl
0550+  1B20 33 01 00      mov bl, [d + 1]
0551+  1B23 07 A4 18      call _atoi        ; convert to int in AL
0552+  1B26             
0553+  1B26 E7            pop d
0554+  1B27 E5            pop b
0555+  1B28 F9            leave
0556+  1B29 09            ret
0557+  1B2A             
0558+  1B2A             ;-----------------------------------------------------------------------------
0559+  1B2A             ; input decimal number
0560+  1B2A             ; result in A
0561+  1B2A             ; 655'\0'
0562+  1B2A             ; low--------high
0563+  1B2A             ;-----------------------------------------------------------------------------
0564+  1B2A             scan_u16d:
0565+  1B2A F8 08 00      enter 8
0566+  1B2D E2            push si
0567+  1B2E D8            push b
0568+  1B2F D9            push c
0569+  1B30 DA            push d
0570+  1B31 FA F9 FF      lea d, [bp +- 7]
0571+  1B34 07 ED 18      call _gets
0572+  1B37 07 46 18      call _strlen      ; get string length in C
0573+  1B3A 7E            dec c
0574+  1B3B FD 4E         mov si, d
0575+  1B3D 12            mov a, c
0576+  1B3E FD 99         shl a
0577+  1B40 3B 7C 1B      mov d, table_power
0578+  1B43 59            add d, a
0579+  1B44 38 00 00      mov c, 0
0580+  1B47             mul_loop:
0581+  1B47 F6            lodsb      ; load ASCII to al
0582+  1B48 B9 00         cmp al, 0
0583+  1B4A C6 5D 1B      je mul_exit
0584+  1B4D 6F 30         sub al, $30    ; make into integer
0585+  1B4F 22 00         mov ah, 0
0586+  1B51 2A            mov b, [d]
0587+  1B52 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1B53 11            mov a, b
0589+  1B54 28            mov b, c
0590+  1B55 54            add a, b
0591+  1B56 39            mov c, a
0592+  1B57 63 02 00      sub d, 2
0593+  1B5A 0A 47 1B      jmp mul_loop
0594+  1B5D             mul_exit:
0595+  1B5D 12            mov a, c
0596+  1B5E E7            pop d
0597+  1B5F E6            pop c
0598+  1B60 E5            pop b
0599+  1B61 EF            pop si
0600+  1B62 F9            leave
0601+  1B63 09            ret
0602+  1B64             
0603+  1B64 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1B68 34 35 36 37 
0603+  1B6C 38 39 41 42 
0603+  1B70 43 44 45 46 
0604+  1B74 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1B78 1B 5B 48 00 
0605+  1B7C             
0606+  1B7C             table_power:
0607+  1B7C 01 00         .dw 1
0608+  1B7E 0A 00         .dw 10
0609+  1B80 64 00         .dw 100
0610+  1B82 E8 03         .dw 1000
0611+  1B84 10 27         .dw 100003133   1B86             ; --- END INLINE ASM BLOCK
3134   1B86             
3135   1B86 F9            leave
3136   1B87 09            ret
3137   1B88             
3138   1B88             show:
3139   1B88 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3140   1B8B             ;; int i, j; 
3141   1B8B 52 02 00      sub sp, 2 ; i
3142   1B8E 52 02 00      sub sp, 2 ; j
3143   1B91             ;; for(i = 0; i <   30     ; i++){ 
3144   1B91             _for51_init:
3145   1B91 FA FF FF      lea d, [bp + -1] ; $i
3146   1B94 DA            push d
3147   1B95 26 00 00      mov b, $0
3148   1B98 E7            pop d
3149   1B99 FD 43         mov [d], b
3150   1B9B             _for51_cond:
3151   1B9B FA FF FF      lea d, [bp + -1] ; $i
3152   1B9E 2A            mov b, [d]
3153   1B9F             ; START RELATIONAL
3154   1B9F D7            push a
3155   1BA0 11            mov a, b
3156   1BA1 26 1E 00      mov b, $1e
3157   1BA4 B0            cmp a, b
3158   1BA5 FD 73         slt ; < (signed)
3159   1BA7 E4            pop a
3160   1BA8             ; END RELATIONAL
3161   1BA8 C0 00 00      cmp b, 0
3162   1BAB C6 38 1C      je _for51_exit
3163   1BAE             _for51_block:
3164   1BAE             ;; for(j = 0; j <    40    ; j++){ 
3165   1BAE             _for52_init:
3166   1BAE FA FD FF      lea d, [bp + -3] ; $j
3167   1BB1 DA            push d
3168   1BB2 26 00 00      mov b, $0
3169   1BB5 E7            pop d
3170   1BB6 FD 43         mov [d], b
3171   1BB8             _for52_cond:
3172   1BB8 FA FD FF      lea d, [bp + -3] ; $j
3173   1BBB 2A            mov b, [d]
3174   1BBC             ; START RELATIONAL
3175   1BBC D7            push a
3176   1BBD 11            mov a, b
3177   1BBE 26 28 00      mov b, $28
3178   1BC1 B0            cmp a, b
3179   1BC2 FD 73         slt ; < (signed)
3180   1BC4 E4            pop a
3181   1BC5             ; END RELATIONAL
3182   1BC5 C0 00 00      cmp b, 0
3183   1BC8 C6 1E 1C      je _for52_exit
3184   1BCB             _for52_block:
3185   1BCB             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
3186   1BCB             _ternary53_cond:
3187   1BCB 3B 59 23      mov d, _currState_data ; $currState
3188   1BCE D7            push a
3189   1BCF DA            push d
3190   1BD0 FA FF FF      lea d, [bp + -1] ; $i
3191   1BD3 2A            mov b, [d]
3192   1BD4 E7            pop d
3193   1BD5 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3194   1BD9 DA            push d
3195   1BDA FA FD FF      lea d, [bp + -3] ; $j
3196   1BDD 2A            mov b, [d]
3197   1BDE E7            pop d
3198   1BDF 5A            add d, b
3199   1BE0 E4            pop a
3200   1BE1 32            mov bl, [d]
3201   1BE2 A7 00         mov bh, 0
3202   1BE4             ; START RELATIONAL
3203   1BE4 D7            push a
3204   1BE5 11            mov a, b
3205   1BE6 26 40 00      mov b, $40
3206   1BE9 B0            cmp a, b
3207   1BEA FD 71         seq ; ==
3208   1BEC E4            pop a
3209   1BED             ; END RELATIONAL
3210   1BED C0 00 00      cmp b, 0
3211   1BF0 C6 02 1C      je _ternary53_false
3212   1BF3             _ternary53_true:
3213   1BF3 26 67 28      mov b, _s4 ; "@ "
3214   1BF6 FD AB         swp b
3215   1BF8 D8            push b
3216   1BF9 07 FB 09      call printf
3217   1BFC 51 02 00      add sp, 2
3218   1BFF 0A 0E 1C      jmp _ternary53_exit
3219   1C02             _ternary53_false:
3220   1C02 26 6A 28      mov b, _s5 ; ". "
3221   1C05 FD AB         swp b
3222   1C07 D8            push b
3223   1C08 07 FB 09      call printf
3224   1C0B 51 02 00      add sp, 2
3225   1C0E             _ternary53_exit:
3226   1C0E             _for52_update:
3227   1C0E FA FD FF      lea d, [bp + -3] ; $j
3228   1C11 2A            mov b, [d]
3229   1C12 FD 77         inc b
3230   1C14 FA FD FF      lea d, [bp + -3] ; $j
3231   1C17 FD 43         mov [d], b
3232   1C19 FD 7D         dec b
3233   1C1B 0A B8 1B      jmp _for52_cond
3234   1C1E             _for52_exit:
3235   1C1E             ;; putchar(10); 
3236   1C1E 26 0A 00      mov b, $a
3237   1C21 DD            push bl
3238   1C22 07 55 17      call putchar
3239   1C25 51 01 00      add sp, 1
3240   1C28             _for51_update:
3241   1C28 FA FF FF      lea d, [bp + -1] ; $i
3242   1C2B 2A            mov b, [d]
3243   1C2C FD 77         inc b
3244   1C2E FA FF FF      lea d, [bp + -1] ; $i
3245   1C31 FD 43         mov [d], b
3246   1C33 FD 7D         dec b
3247   1C35 0A 9B 1B      jmp _for51_cond
3248   1C38             _for51_exit:
3249   1C38 F9            leave
3250   1C39 09            ret
3251   1C3A             
3252   1C3A             alive:
3253   1C3A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3254   1C3D             ;; if(currState[i][j] == '@') return 1; 
3255   1C3D             _if54_cond:
3256   1C3D 3B 59 23      mov d, _currState_data ; $currState
3257   1C40 D7            push a
3258   1C41 DA            push d
3259   1C42 FA 05 00      lea d, [bp + 5] ; $i
3260   1C45 2A            mov b, [d]
3261   1C46 E7            pop d
3262   1C47 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3263   1C4B DA            push d
3264   1C4C FA 07 00      lea d, [bp + 7] ; $j
3265   1C4F 2A            mov b, [d]
3266   1C50 E7            pop d
3267   1C51 5A            add d, b
3268   1C52 E4            pop a
3269   1C53 32            mov bl, [d]
3270   1C54 A7 00         mov bh, 0
3271   1C56             ; START RELATIONAL
3272   1C56 D7            push a
3273   1C57 11            mov a, b
3274   1C58 26 40 00      mov b, $40
3275   1C5B B0            cmp a, b
3276   1C5C FD 71         seq ; ==
3277   1C5E E4            pop a
3278   1C5F             ; END RELATIONAL
3279   1C5F C0 00 00      cmp b, 0
3280   1C62 C6 6D 1C      je _if54_else
3281   1C65             _if54_true:
3282   1C65             ;; return 1; 
3283   1C65 26 01 00      mov b, $1
3284   1C68 F9            leave
3285   1C69 09            ret
3286   1C6A 0A 72 1C      jmp _if54_exit
3287   1C6D             _if54_else:
3288   1C6D             ;; return 0; 
3289   1C6D 26 00 00      mov b, $0
3290   1C70 F9            leave
3291   1C71 09            ret
3292   1C72             _if54_exit:
3293   1C72 F9            leave
3294   1C73 09            ret
3295   1C74             
3296   1C74             neighbours:
3297   1C74 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3298   1C77             ;; int count; 
3299   1C77 52 02 00      sub sp, 2 ; count
3300   1C7A             ;; count = 0; 
3301   1C7A FA FF FF      lea d, [bp + -1] ; $count
3302   1C7D DA            push d
3303   1C7E 26 00 00      mov b, $0
3304   1C81 E7            pop d
3305   1C82 FD 43         mov [d], b
3306   1C84             ;; if(currState[i+-1][j] == '@')			count++; 
3307   1C84             _if55_cond:
3308   1C84 3B 59 23      mov d, _currState_data ; $currState
3309   1C87 D7            push a
3310   1C88 DA            push d
3311   1C89 FA 05 00      lea d, [bp + 5] ; $i
3312   1C8C 2A            mov b, [d]
3313   1C8D             ; START TERMS
3314   1C8D D7            push a
3315   1C8E 11            mov a, b
3316   1C8F 26 FF FF      mov b, $ffff
3317   1C92 56            add b, a
3318   1C93 E4            pop a
3319   1C94             ; END TERMS
3320   1C94 E7            pop d
3321   1C95 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3322   1C99 DA            push d
3323   1C9A FA 07 00      lea d, [bp + 7] ; $j
3324   1C9D 2A            mov b, [d]
3325   1C9E E7            pop d
3326   1C9F 5A            add d, b
3327   1CA0 E4            pop a
3328   1CA1 32            mov bl, [d]
3329   1CA2 A7 00         mov bh, 0
3330   1CA4             ; START RELATIONAL
3331   1CA4 D7            push a
3332   1CA5 11            mov a, b
3333   1CA6 26 40 00      mov b, $40
3334   1CA9 B0            cmp a, b
3335   1CAA FD 71         seq ; ==
3336   1CAC E4            pop a
3337   1CAD             ; END RELATIONAL
3338   1CAD C0 00 00      cmp b, 0
3339   1CB0 C6 C3 1C      je _if55_exit
3340   1CB3             _if55_true:
3341   1CB3             ;; count++; 
3342   1CB3 FA FF FF      lea d, [bp + -1] ; $count
3343   1CB6 2A            mov b, [d]
3344   1CB7 FD 77         inc b
3345   1CB9 FA FF FF      lea d, [bp + -1] ; $count
3346   1CBC FD 43         mov [d], b
3347   1CBE FD 7D         dec b
3348   1CC0 0A C3 1C      jmp _if55_exit
3349   1CC3             _if55_exit:
3350   1CC3             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
3351   1CC3             _if56_cond:
3352   1CC3 3B 59 23      mov d, _currState_data ; $currState
3353   1CC6 D7            push a
3354   1CC7 DA            push d
3355   1CC8 FA 05 00      lea d, [bp + 5] ; $i
3356   1CCB 2A            mov b, [d]
3357   1CCC             ; START TERMS
3358   1CCC D7            push a
3359   1CCD 11            mov a, b
3360   1CCE 26 FF FF      mov b, $ffff
3361   1CD1 56            add b, a
3362   1CD2 E4            pop a
3363   1CD3             ; END TERMS
3364   1CD3 E7            pop d
3365   1CD4 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3366   1CD8 DA            push d
3367   1CD9 FA 07 00      lea d, [bp + 7] ; $j
3368   1CDC 2A            mov b, [d]
3369   1CDD             ; START TERMS
3370   1CDD D7            push a
3371   1CDE 11            mov a, b
3372   1CDF 26 FF FF      mov b, $ffff
3373   1CE2 56            add b, a
3374   1CE3 E4            pop a
3375   1CE4             ; END TERMS
3376   1CE4 E7            pop d
3377   1CE5 5A            add d, b
3378   1CE6 E4            pop a
3379   1CE7 32            mov bl, [d]
3380   1CE8 A7 00         mov bh, 0
3381   1CEA             ; START RELATIONAL
3382   1CEA D7            push a
3383   1CEB 11            mov a, b
3384   1CEC 26 40 00      mov b, $40
3385   1CEF B0            cmp a, b
3386   1CF0 FD 71         seq ; ==
3387   1CF2 E4            pop a
3388   1CF3             ; END RELATIONAL
3389   1CF3 C0 00 00      cmp b, 0
3390   1CF6 C6 09 1D      je _if56_exit
3391   1CF9             _if56_true:
3392   1CF9             ;; count++; 
3393   1CF9 FA FF FF      lea d, [bp + -1] ; $count
3394   1CFC 2A            mov b, [d]
3395   1CFD FD 77         inc b
3396   1CFF FA FF FF      lea d, [bp + -1] ; $count
3397   1D02 FD 43         mov [d], b
3398   1D04 FD 7D         dec b
3399   1D06 0A 09 1D      jmp _if56_exit
3400   1D09             _if56_exit:
3401   1D09             ;; if(currState[i+-1][j+1] == '@') 	count++; 
3402   1D09             _if57_cond:
3403   1D09 3B 59 23      mov d, _currState_data ; $currState
3404   1D0C D7            push a
3405   1D0D DA            push d
3406   1D0E FA 05 00      lea d, [bp + 5] ; $i
3407   1D11 2A            mov b, [d]
3408   1D12             ; START TERMS
3409   1D12 D7            push a
3410   1D13 11            mov a, b
3411   1D14 26 FF FF      mov b, $ffff
3412   1D17 56            add b, a
3413   1D18 E4            pop a
3414   1D19             ; END TERMS
3415   1D19 E7            pop d
3416   1D1A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3417   1D1E DA            push d
3418   1D1F FA 07 00      lea d, [bp + 7] ; $j
3419   1D22 2A            mov b, [d]
3420   1D23             ; START TERMS
3421   1D23 D7            push a
3422   1D24 11            mov a, b
3423   1D25 26 01 00      mov b, $1
3424   1D28 56            add b, a
3425   1D29 E4            pop a
3426   1D2A             ; END TERMS
3427   1D2A E7            pop d
3428   1D2B 5A            add d, b
3429   1D2C E4            pop a
3430   1D2D 32            mov bl, [d]
3431   1D2E A7 00         mov bh, 0
3432   1D30             ; START RELATIONAL
3433   1D30 D7            push a
3434   1D31 11            mov a, b
3435   1D32 26 40 00      mov b, $40
3436   1D35 B0            cmp a, b
3437   1D36 FD 71         seq ; ==
3438   1D38 E4            pop a
3439   1D39             ; END RELATIONAL
3440   1D39 C0 00 00      cmp b, 0
3441   1D3C C6 4F 1D      je _if57_exit
3442   1D3F             _if57_true:
3443   1D3F             ;; count++; 
3444   1D3F FA FF FF      lea d, [bp + -1] ; $count
3445   1D42 2A            mov b, [d]
3446   1D43 FD 77         inc b
3447   1D45 FA FF FF      lea d, [bp + -1] ; $count
3448   1D48 FD 43         mov [d], b
3449   1D4A FD 7D         dec b
3450   1D4C 0A 4F 1D      jmp _if57_exit
3451   1D4F             _if57_exit:
3452   1D4F             ;; if(currState[i][j+-1] == '@') 		count++; 
3453   1D4F             _if58_cond:
3454   1D4F 3B 59 23      mov d, _currState_data ; $currState
3455   1D52 D7            push a
3456   1D53 DA            push d
3457   1D54 FA 05 00      lea d, [bp + 5] ; $i
3458   1D57 2A            mov b, [d]
3459   1D58 E7            pop d
3460   1D59 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3461   1D5D DA            push d
3462   1D5E FA 07 00      lea d, [bp + 7] ; $j
3463   1D61 2A            mov b, [d]
3464   1D62             ; START TERMS
3465   1D62 D7            push a
3466   1D63 11            mov a, b
3467   1D64 26 FF FF      mov b, $ffff
3468   1D67 56            add b, a
3469   1D68 E4            pop a
3470   1D69             ; END TERMS
3471   1D69 E7            pop d
3472   1D6A 5A            add d, b
3473   1D6B E4            pop a
3474   1D6C 32            mov bl, [d]
3475   1D6D A7 00         mov bh, 0
3476   1D6F             ; START RELATIONAL
3477   1D6F D7            push a
3478   1D70 11            mov a, b
3479   1D71 26 40 00      mov b, $40
3480   1D74 B0            cmp a, b
3481   1D75 FD 71         seq ; ==
3482   1D77 E4            pop a
3483   1D78             ; END RELATIONAL
3484   1D78 C0 00 00      cmp b, 0
3485   1D7B C6 8E 1D      je _if58_exit
3486   1D7E             _if58_true:
3487   1D7E             ;; count++; 
3488   1D7E FA FF FF      lea d, [bp + -1] ; $count
3489   1D81 2A            mov b, [d]
3490   1D82 FD 77         inc b
3491   1D84 FA FF FF      lea d, [bp + -1] ; $count
3492   1D87 FD 43         mov [d], b
3493   1D89 FD 7D         dec b
3494   1D8B 0A 8E 1D      jmp _if58_exit
3495   1D8E             _if58_exit:
3496   1D8E             ;; if(currState[i][j+1] == '@') 			count++; 
3497   1D8E             _if59_cond:
3498   1D8E 3B 59 23      mov d, _currState_data ; $currState
3499   1D91 D7            push a
3500   1D92 DA            push d
3501   1D93 FA 05 00      lea d, [bp + 5] ; $i
3502   1D96 2A            mov b, [d]
3503   1D97 E7            pop d
3504   1D98 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3505   1D9C DA            push d
3506   1D9D FA 07 00      lea d, [bp + 7] ; $j
3507   1DA0 2A            mov b, [d]
3508   1DA1             ; START TERMS
3509   1DA1 D7            push a
3510   1DA2 11            mov a, b
3511   1DA3 26 01 00      mov b, $1
3512   1DA6 56            add b, a
3513   1DA7 E4            pop a
3514   1DA8             ; END TERMS
3515   1DA8 E7            pop d
3516   1DA9 5A            add d, b
3517   1DAA E4            pop a
3518   1DAB 32            mov bl, [d]
3519   1DAC A7 00         mov bh, 0
3520   1DAE             ; START RELATIONAL
3521   1DAE D7            push a
3522   1DAF 11            mov a, b
3523   1DB0 26 40 00      mov b, $40
3524   1DB3 B0            cmp a, b
3525   1DB4 FD 71         seq ; ==
3526   1DB6 E4            pop a
3527   1DB7             ; END RELATIONAL
3528   1DB7 C0 00 00      cmp b, 0
3529   1DBA C6 CD 1D      je _if59_exit
3530   1DBD             _if59_true:
3531   1DBD             ;; count++; 
3532   1DBD FA FF FF      lea d, [bp + -1] ; $count
3533   1DC0 2A            mov b, [d]
3534   1DC1 FD 77         inc b
3535   1DC3 FA FF FF      lea d, [bp + -1] ; $count
3536   1DC6 FD 43         mov [d], b
3537   1DC8 FD 7D         dec b
3538   1DCA 0A CD 1D      jmp _if59_exit
3539   1DCD             _if59_exit:
3540   1DCD             ;; if(currState[i+1][j+-1] == '@') 	count++; 
3541   1DCD             _if60_cond:
3542   1DCD 3B 59 23      mov d, _currState_data ; $currState
3543   1DD0 D7            push a
3544   1DD1 DA            push d
3545   1DD2 FA 05 00      lea d, [bp + 5] ; $i
3546   1DD5 2A            mov b, [d]
3547   1DD6             ; START TERMS
3548   1DD6 D7            push a
3549   1DD7 11            mov a, b
3550   1DD8 26 01 00      mov b, $1
3551   1DDB 56            add b, a
3552   1DDC E4            pop a
3553   1DDD             ; END TERMS
3554   1DDD E7            pop d
3555   1DDE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3556   1DE2 DA            push d
3557   1DE3 FA 07 00      lea d, [bp + 7] ; $j
3558   1DE6 2A            mov b, [d]
3559   1DE7             ; START TERMS
3560   1DE7 D7            push a
3561   1DE8 11            mov a, b
3562   1DE9 26 FF FF      mov b, $ffff
3563   1DEC 56            add b, a
3564   1DED E4            pop a
3565   1DEE             ; END TERMS
3566   1DEE E7            pop d
3567   1DEF 5A            add d, b
3568   1DF0 E4            pop a
3569   1DF1 32            mov bl, [d]
3570   1DF2 A7 00         mov bh, 0
3571   1DF4             ; START RELATIONAL
3572   1DF4 D7            push a
3573   1DF5 11            mov a, b
3574   1DF6 26 40 00      mov b, $40
3575   1DF9 B0            cmp a, b
3576   1DFA FD 71         seq ; ==
3577   1DFC E4            pop a
3578   1DFD             ; END RELATIONAL
3579   1DFD C0 00 00      cmp b, 0
3580   1E00 C6 13 1E      je _if60_exit
3581   1E03             _if60_true:
3582   1E03             ;; count++; 
3583   1E03 FA FF FF      lea d, [bp + -1] ; $count
3584   1E06 2A            mov b, [d]
3585   1E07 FD 77         inc b
3586   1E09 FA FF FF      lea d, [bp + -1] ; $count
3587   1E0C FD 43         mov [d], b
3588   1E0E FD 7D         dec b
3589   1E10 0A 13 1E      jmp _if60_exit
3590   1E13             _if60_exit:
3591   1E13             ;; if(currState[i+1][j] == '@') 			count++; 
3592   1E13             _if61_cond:
3593   1E13 3B 59 23      mov d, _currState_data ; $currState
3594   1E16 D7            push a
3595   1E17 DA            push d
3596   1E18 FA 05 00      lea d, [bp + 5] ; $i
3597   1E1B 2A            mov b, [d]
3598   1E1C             ; START TERMS
3599   1E1C D7            push a
3600   1E1D 11            mov a, b
3601   1E1E 26 01 00      mov b, $1
3602   1E21 56            add b, a
3603   1E22 E4            pop a
3604   1E23             ; END TERMS
3605   1E23 E7            pop d
3606   1E24 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3607   1E28 DA            push d
3608   1E29 FA 07 00      lea d, [bp + 7] ; $j
3609   1E2C 2A            mov b, [d]
3610   1E2D E7            pop d
3611   1E2E 5A            add d, b
3612   1E2F E4            pop a
3613   1E30 32            mov bl, [d]
3614   1E31 A7 00         mov bh, 0
3615   1E33             ; START RELATIONAL
3616   1E33 D7            push a
3617   1E34 11            mov a, b
3618   1E35 26 40 00      mov b, $40
3619   1E38 B0            cmp a, b
3620   1E39 FD 71         seq ; ==
3621   1E3B E4            pop a
3622   1E3C             ; END RELATIONAL
3623   1E3C C0 00 00      cmp b, 0
3624   1E3F C6 52 1E      je _if61_exit
3625   1E42             _if61_true:
3626   1E42             ;; count++; 
3627   1E42 FA FF FF      lea d, [bp + -1] ; $count
3628   1E45 2A            mov b, [d]
3629   1E46 FD 77         inc b
3630   1E48 FA FF FF      lea d, [bp + -1] ; $count
3631   1E4B FD 43         mov [d], b
3632   1E4D FD 7D         dec b
3633   1E4F 0A 52 1E      jmp _if61_exit
3634   1E52             _if61_exit:
3635   1E52             ;; if(currState[i+1][j+1] == '@') 		count++; 
3636   1E52             _if62_cond:
3637   1E52 3B 59 23      mov d, _currState_data ; $currState
3638   1E55 D7            push a
3639   1E56 DA            push d
3640   1E57 FA 05 00      lea d, [bp + 5] ; $i
3641   1E5A 2A            mov b, [d]
3642   1E5B             ; START TERMS
3643   1E5B D7            push a
3644   1E5C 11            mov a, b
3645   1E5D 26 01 00      mov b, $1
3646   1E60 56            add b, a
3647   1E61 E4            pop a
3648   1E62             ; END TERMS
3649   1E62 E7            pop d
3650   1E63 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3651   1E67 DA            push d
3652   1E68 FA 07 00      lea d, [bp + 7] ; $j
3653   1E6B 2A            mov b, [d]
3654   1E6C             ; START TERMS
3655   1E6C D7            push a
3656   1E6D 11            mov a, b
3657   1E6E 26 01 00      mov b, $1
3658   1E71 56            add b, a
3659   1E72 E4            pop a
3660   1E73             ; END TERMS
3661   1E73 E7            pop d
3662   1E74 5A            add d, b
3663   1E75 E4            pop a
3664   1E76 32            mov bl, [d]
3665   1E77 A7 00         mov bh, 0
3666   1E79             ; START RELATIONAL
3667   1E79 D7            push a
3668   1E7A 11            mov a, b
3669   1E7B 26 40 00      mov b, $40
3670   1E7E B0            cmp a, b
3671   1E7F FD 71         seq ; ==
3672   1E81 E4            pop a
3673   1E82             ; END RELATIONAL
3674   1E82 C0 00 00      cmp b, 0
3675   1E85 C6 98 1E      je _if62_exit
3676   1E88             _if62_true:
3677   1E88             ;; count++; 
3678   1E88 FA FF FF      lea d, [bp + -1] ; $count
3679   1E8B 2A            mov b, [d]
3680   1E8C FD 77         inc b
3681   1E8E FA FF FF      lea d, [bp + -1] ; $count
3682   1E91 FD 43         mov [d], b
3683   1E93 FD 7D         dec b
3684   1E95 0A 98 1E      jmp _if62_exit
3685   1E98             _if62_exit:
3686   1E98             ;; return count; 
3687   1E98 FA FF FF      lea d, [bp + -1] ; $count
3688   1E9B 2A            mov b, [d]
3689   1E9C F9            leave
3690   1E9D 09            ret
3691   1E9E             ; --- END TEXT BLOCK
3692   1E9E             
3693   1E9E             ; --- BEGIN DATA BLOCK
3694   1E9E             _clear_data: 
3695   1E9E 1B 5B 32 4A .db $1b,$5b,$32,$4a,$1b,$5b,$48,$0,
3695   1EA2 1B 5B 48 00 
3696   1EA6 00 00 00    .fill 3, 0
3697   1EA9 00 00 00 00 _nextState_data: .fill 1200, 0
3697   1EAD 00 00 00 00 
3697   1EB1 00 00 00 00 
3697   1EB5 00 00 00 00 
3697   1EB9 00 00 00 00 
3697   1EBD 00 00 00 00 
3697   1EC1 00 00 00 00 
3697   1EC5 00 00 00 00 
3697   1EC9 00 00 00 00 
3697   1ECD 00 00 00 00 
3697   1ED1 00 00 00 00 
3697   1ED5 00 00 00 00 
3697   1ED9 00 00 00 00 
3697   1EDD 00 00 00 00 
3697   1EE1 00 00 00 00 
3697   1EE5 00 00 00 00 
3697   1EE9 00 00 00 00 
3697   1EED 00 00 00 00 
3697   1EF1 00 00 00 00 
3697   1EF5 00 00 00 00 
3697   1EF9 00 00 00 00 
3697   1EFD 00 00 00 00 
3697   1F01 00 00 00 00 
3697   1F05 00 00 00 00 
3697   1F09 00 00 00 00 
3697   1F0D 00 00 00 00 
3697   1F11 00 00 00 00 
3697   1F15 00 00 00 00 
3697   1F19 00 00 00 00 
3697   1F1D 00 00 00 00 
3697   1F21 00 00 00 00 
3697   1F25 00 00 00 00 
3697   1F29 00 00 00 00 
3697   1F2D 00 00 00 00 
3697   1F31 00 00 00 00 
3697   1F35 00 00 00 00 
3697   1F39 00 00 00 00 
3697   1F3D 00 00 00 00 
3697   1F41 00 00 00 00 
3697   1F45 00 00 00 00 
3697   1F49 00 00 00 00 
3697   1F4D 00 00 00 00 
3697   1F51 00 00 00 00 
3697   1F55 00 00 00 00 
3697   1F59 00 00 00 00 
3697   1F5D 00 00 00 00 
3697   1F61 00 00 00 00 
3697   1F65 00 00 00 00 
3697   1F69 00 00 00 00 
3697   1F6D 00 00 00 00 
3697   1F71 00 00 00 00 
3697   1F75 00 00 00 00 
3697   1F79 00 00 00 00 
3697   1F7D 00 00 00 00 
3697   1F81 00 00 00 00 
3697   1F85 00 00 00 00 
3697   1F89 00 00 00 00 
3697   1F8D 00 00 00 00 
3697   1F91 00 00 00 00 
3697   1F95 00 00 00 00 
3697   1F99 00 00 00 00 
3697   1F9D 00 00 00 00 
3697   1FA1 00 00 00 00 
3697   1FA5 00 00 00 00 
3697   1FA9 00 00 00 00 
3697   1FAD 00 00 00 00 
3697   1FB1 00 00 00 00 
3697   1FB5 00 00 00 00 
3697   1FB9 00 00 00 00 
3697   1FBD 00 00 00 00 
3697   1FC1 00 00 00 00 
3697   1FC5 00 00 00 00 
3697   1FC9 00 00 00 00 
3697   1FCD 00 00 00 00 
3697   1FD1 00 00 00 00 
3697   1FD5 00 00 00 00 
3697   1FD9 00 00 00 00 
3697   1FDD 00 00 00 00 
3697   1FE1 00 00 00 00 
3697   1FE5 00 00 00 00 
3697   1FE9 00 00 00 00 
3697   1FED 00 00 00 00 
3697   1FF1 00 00 00 00 
3697   1FF5 00 00 00 00 
3697   1FF9 00 00 00 00 
3697   1FFD 00 00 00 00 
3697   2001 00 00 00 00 
3697   2005 00 00 00 00 
3697   2009 00 00 00 00 
3697   200D 00 00 00 00 
3697   2011 00 00 00 00 
3697   2015 00 00 00 00 
3697   2019 00 00 00 00 
3697   201D 00 00 00 00 
3697   2021 00 00 00 00 
3697   2025 00 00 00 00 
3697   2029 00 00 00 00 
3697   202D 00 00 00 00 
3697   2031 00 00 00 00 
3697   2035 00 00 00 00 
3697   2039 00 00 00 00 
3697   203D 00 00 00 00 
3697   2041 00 00 00 00 
3697   2045 00 00 00 00 
3697   2049 00 00 00 00 
3697   204D 00 00 00 00 
3697   2051 00 00 00 00 
3697   2055 00 00 00 00 
3697   2059 00 00 00 00 
3697   205D 00 00 00 00 
3697   2061 00 00 00 00 
3697   2065 00 00 00 00 
3697   2069 00 00 00 00 
3697   206D 00 00 00 00 
3697   2071 00 00 00 00 
3697   2075 00 00 00 00 
3697   2079 00 00 00 00 
3697   207D 00 00 00 00 
3697   2081 00 00 00 00 
3697   2085 00 00 00 00 
3697   2089 00 00 00 00 
3697   208D 00 00 00 00 
3697   2091 00 00 00 00 
3697   2095 00 00 00 00 
3697   2099 00 00 00 00 
3697   209D 00 00 00 00 
3697   20A1 00 00 00 00 
3697   20A5 00 00 00 00 
3697   20A9 00 00 00 00 
3697   20AD 00 00 00 00 
3697   20B1 00 00 00 00 
3697   20B5 00 00 00 00 
3697   20B9 00 00 00 00 
3697   20BD 00 00 00 00 
3697   20C1 00 00 00 00 
3697   20C5 00 00 00 00 
3697   20C9 00 00 00 00 
3697   20CD 00 00 00 00 
3697   20D1 00 00 00 00 
3697   20D5 00 00 00 00 
3697   20D9 00 00 00 00 
3697   20DD 00 00 00 00 
3697   20E1 00 00 00 00 
3697   20E5 00 00 00 00 
3697   20E9 00 00 00 00 
3697   20ED 00 00 00 00 
3697   20F1 00 00 00 00 
3697   20F5 00 00 00 00 
3697   20F9 00 00 00 00 
3697   20FD 00 00 00 00 
3697   2101 00 00 00 00 
3697   2105 00 00 00 00 
3697   2109 00 00 00 00 
3697   210D 00 00 00 00 
3697   2111 00 00 00 00 
3697   2115 00 00 00 00 
3697   2119 00 00 00 00 
3697   211D 00 00 00 00 
3697   2121 00 00 00 00 
3697   2125 00 00 00 00 
3697   2129 00 00 00 00 
3697   212D 00 00 00 00 
3697   2131 00 00 00 00 
3697   2135 00 00 00 00 
3697   2139 00 00 00 00 
3697   213D 00 00 00 00 
3697   2141 00 00 00 00 
3697   2145 00 00 00 00 
3697   2149 00 00 00 00 
3697   214D 00 00 00 00 
3697   2151 00 00 00 00 
3697   2155 00 00 00 00 
3697   2159 00 00 00 00 
3697   215D 00 00 00 00 
3697   2161 00 00 00 00 
3697   2165 00 00 00 00 
3697   2169 00 00 00 00 
3697   216D 00 00 00 00 
3697   2171 00 00 00 00 
3697   2175 00 00 00 00 
3697   2179 00 00 00 00 
3697   217D 00 00 00 00 
3697   2181 00 00 00 00 
3697   2185 00 00 00 00 
3697   2189 00 00 00 00 
3697   218D 00 00 00 00 
3697   2191 00 00 00 00 
3697   2195 00 00 00 00 
3697   2199 00 00 00 00 
3697   219D 00 00 00 00 
3697   21A1 00 00 00 00 
3697   21A5 00 00 00 00 
3697   21A9 00 00 00 00 
3697   21AD 00 00 00 00 
3697   21B1 00 00 00 00 
3697   21B5 00 00 00 00 
3697   21B9 00 00 00 00 
3697   21BD 00 00 00 00 
3697   21C1 00 00 00 00 
3697   21C5 00 00 00 00 
3697   21C9 00 00 00 00 
3697   21CD 00 00 00 00 
3697   21D1 00 00 00 00 
3697   21D5 00 00 00 00 
3697   21D9 00 00 00 00 
3697   21DD 00 00 00 00 
3697   21E1 00 00 00 00 
3697   21E5 00 00 00 00 
3697   21E9 00 00 00 00 
3697   21ED 00 00 00 00 
3697   21F1 00 00 00 00 
3697   21F5 00 00 00 00 
3697   21F9 00 00 00 00 
3697   21FD 00 00 00 00 
3697   2201 00 00 00 00 
3697   2205 00 00 00 00 
3697   2209 00 00 00 00 
3697   220D 00 00 00 00 
3697   2211 00 00 00 00 
3697   2215 00 00 00 00 
3697   2219 00 00 00 00 
3697   221D 00 00 00 00 
3697   2221 00 00 00 00 
3697   2225 00 00 00 00 
3697   2229 00 00 00 00 
3697   222D 00 00 00 00 
3697   2231 00 00 00 00 
3697   2235 00 00 00 00 
3697   2239 00 00 00 00 
3697   223D 00 00 00 00 
3697   2241 00 00 00 00 
3697   2245 00 00 00 00 
3697   2249 00 00 00 00 
3697   224D 00 00 00 00 
3697   2251 00 00 00 00 
3697   2255 00 00 00 00 
3697   2259 00 00 00 00 
3697   225D 00 00 00 00 
3697   2261 00 00 00 00 
3697   2265 00 00 00 00 
3697   2269 00 00 00 00 
3697   226D 00 00 00 00 
3697   2271 00 00 00 00 
3697   2275 00 00 00 00 
3697   2279 00 00 00 00 
3697   227D 00 00 00 00 
3697   2281 00 00 00 00 
3697   2285 00 00 00 00 
3697   2289 00 00 00 00 
3697   228D 00 00 00 00 
3697   2291 00 00 00 00 
3697   2295 00 00 00 00 
3697   2299 00 00 00 00 
3697   229D 00 00 00 00 
3697   22A1 00 00 00 00 
3697   22A5 00 00 00 00 
3697   22A9 00 00 00 00 
3697   22AD 00 00 00 00 
3697   22B1 00 00 00 00 
3697   22B5 00 00 00 00 
3697   22B9 00 00 00 00 
3697   22BD 00 00 00 00 
3697   22C1 00 00 00 00 
3697   22C5 00 00 00 00 
3697   22C9 00 00 00 00 
3697   22CD 00 00 00 00 
3697   22D1 00 00 00 00 
3697   22D5 00 00 00 00 
3697   22D9 00 00 00 00 
3697   22DD 00 00 00 00 
3697   22E1 00 00 00 00 
3697   22E5 00 00 00 00 
3697   22E9 00 00 00 00 
3697   22ED 00 00 00 00 
3697   22F1 00 00 00 00 
3697   22F5 00 00 00 00 
3697   22F9 00 00 00 00 
3697   22FD 00 00 00 00 
3697   2301 00 00 00 00 
3697   2305 00 00 00 00 
3697   2309 00 00 00 00 
3697   230D 00 00 00 00 
3697   2311 00 00 00 00 
3697   2315 00 00 00 00 
3697   2319 00 00 00 00 
3697   231D 00 00 00 00 
3697   2321 00 00 00 00 
3697   2325 00 00 00 00 
3697   2329 00 00 00 00 
3697   232D 00 00 00 00 
3697   2331 00 00 00 00 
3697   2335 00 00 00 00 
3697   2339 00 00 00 00 
3697   233D 00 00 00 00 
3697   2341 00 00 00 00 
3697   2345 00 00 00 00 
3697   2349 00 00 00 00 
3697   234D 00 00 00 00 
3697   2351 00 00 00 00 
3697   2355 00 00 00 00 
3698   2359             _currState_data: 
3699   2359 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3699   235D 20 20 20 20 
3699   2361 20 20 20 20 
3699   2365 20 20 20 20 
3699   2369 20 20 20 20 
3699   236D 20 20 20 20 
3699   2371 20 20 20 20 
3699   2375 20 20 
3700   2377 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3700   237B 20 20 20 20 
3700   237F 20 20 20 20 
3700   2383 20 20 20 20 
3700   2387 20 20 20 20 
3700   238B 20 20 20 20 
3700   238F 20 20 20 20 
3700   2393 20 20 
3701   2395 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3701   2399 20 20 20 20 
3701   239D 20 20 20 20 
3701   23A1 20 20 20 20 
3701   23A5 20 20 20 20 
3701   23A9 20 20 20 20 
3701   23AD 20 20 20 20 
3701   23B1 20 20 
3702   23B3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3702   23B7 20 20 20 20 
3702   23BB 20 20 20 20 
3702   23BF 20 20 20 20 
3702   23C3 20 20 20 20 
3702   23C7 20 20 20 20 
3702   23CB 20 20 20 20 
3702   23CF 20 20 
3703   23D1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3703   23D5 20 20 20 20 
3703   23D9 20 20 20 20 
3703   23DD 20 20 20 20 
3703   23E1 20 20 20 20 
3703   23E5 20 20 20 20 
3703   23E9 20 20 20 40 
3703   23ED 20 20 
3704   23EF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3704   23F3 20 20 20 20 
3704   23F7 20 20 20 20 
3704   23FB 20 20 20 20 
3704   23FF 20 20 20 20 
3704   2403 20 20 20 20 
3704   2407 20 20 20 20 
3704   240B 20 20 
3705   240D 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3705   2411 20 40 20 40 
3705   2415 20 20 20 20 
3705   2419 20 20 20 20 
3705   241D 20 20 20 20 
3705   2421 20 20 20 20 
3705   2425 20 20 20 20 
3705   2429 20 20 
3706   242B 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
3706   242F 20 40 40 20 
3706   2433 20 20 20 20 
3706   2437 20 40 40 20 
3706   243B 20 20 20 20 
3706   243F 20 20 20 20 
3706   2443 20 20 20 40 
3706   2447 40 20 
3707   2449 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3707   244D 20 20 20 20 
3707   2451 20 20 20 20 
3707   2455 20 20 40 20 
3707   2459 20 20 40 20 
3707   245D 20 20 20 40 
3707   2461 40 20 20 20 
3707   2465 20 20 
3708   2467 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
3708   246B 20 20 20 40 
3708   246F 40 20 20 20 
3708   2473 20 40 40 20 
3708   2477 20 20 20 20 
3708   247B 20 20 20 40 
3708   247F 20 20 20 20 
3708   2483 20 40 
3709   2485 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3709   2489 40 20 20 20 
3709   248D 20 20 20 20 
3709   2491 20 20 20 20 
3709   2495 20 20 20 20 
3709   2499 20 20 20 40 
3709   249D 40 20 20 20 
3709   24A1 20 20 
3710   24A3 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3710   24A7 20 20 20 40 
3710   24AB 20 40 40 20 
3710   24AF 20 20 20 40 
3710   24B3 20 40 20 20 
3710   24B7 20 20 20 20 
3710   24BB 20 20 20 20 
3710   24BF 20 20 
3711   24C1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3711   24C5 20 20 20 20 
3711   24C9 20 20 20 20 
3711   24CD 20 40 20 20 
3711   24D1 20 20 20 40 
3711   24D5 20 20 20 20 
3711   24D9 20 20 20 40 
3711   24DD 20 20 
3712   24DF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
3712   24E3 20 20 20 20 
3712   24E7 20 20 20 20 
3712   24EB 20 20 20 20 
3712   24EF 20 20 20 20 
3712   24F3 20 20 20 20 
3712   24F7 40 20 20 20 
3712   24FB 40 20 
3713   24FD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3713   2501 20 20 20 20 
3713   2505 20 20 20 20 
3713   2509 20 20 20 20 
3713   250D 20 20 20 20 
3713   2511 20 20 20 20 
3713   2515 20 20 20 20 
3713   2519 20 20 
3714   251B 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3714   251F 20 40 40 20 
3714   2523 20 20 20 20 
3714   2527 20 20 20 20 
3714   252B 20 20 20 20 
3714   252F 20 20 20 20 
3714   2533 20 20 20 20 
3714   2537 20 20 
3715   2539 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3715   253D 20 20 20 20 
3715   2541 20 20 20 20 
3715   2545 20 20 20 20 
3715   2549 20 20 20 20 
3715   254D 20 20 20 20 
3715   2551 20 20 20 20 
3715   2555 20 20 
3716   2557 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3716   255B 20 20 20 20 
3716   255F 20 20 20 20 
3716   2563 20 20 20 20 
3716   2567 20 20 20 20 
3716   256B 20 20 20 20 
3716   256F 20 20 20 20 
3716   2573 20 20 
3717   2575 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3717   2579 20 20 20 20 
3717   257D 20 20 20 20 
3717   2581 20 20 20 20 
3717   2585 20 20 20 20 
3717   2589 20 20 20 20 
3717   258D 20 20 20 20 
3717   2591 20 20 
3718   2593 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3718   2597 20 20 20 20 
3718   259B 20 20 20 20 
3718   259F 20 20 20 20 
3718   25A3 20 20 20 20 
3718   25A7 20 20 20 20 
3718   25AB 20 20 20 20 
3718   25AF 20 20 
3719   25B1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3719   25B5 20 20 20 20 
3719   25B9 20 20 20 20 
3719   25BD 20 20 20 20 
3719   25C1 20 20 20 20 
3719   25C5 20 20 20 20 
3719   25C9 20 20 20 20 
3719   25CD 20 20 
3720   25CF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3720   25D3 20 20 20 20 
3720   25D7 20 20 20 20 
3720   25DB 20 20 20 20 
3720   25DF 20 20 20 20 
3720   25E3 20 20 20 20 
3720   25E7 20 20 20 20 
3720   25EB 20 20 
3721   25ED 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3721   25F1 20 20 20 20 
3721   25F5 20 20 20 20 
3721   25F9 20 20 20 20 
3721   25FD 20 20 20 20 
3721   2601 20 20 20 20 
3721   2605 20 20 20 20 
3721   2609 20 20 
3722   260B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3722   260F 20 20 20 20 
3722   2613 20 20 20 20 
3722   2617 20 20 20 20 
3722   261B 20 20 20 20 
3722   261F 20 20 20 20 
3722   2623 20 20 20 20 
3722   2627 20 20 
3723   2629 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3723   262D 20 20 20 20 
3723   2631 20 20 20 20 
3723   2635 20 20 20 20 
3723   2639 20 20 20 20 
3723   263D 20 20 20 20 
3723   2641 20 20 20 20 
3723   2645 20 20 
3724   2647 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3724   264B 20 20 20 20 
3724   264F 20 20 20 20 
3724   2653 20 20 20 20 
3724   2657 20 20 20 20 
3724   265B 20 20 20 20 
3724   265F 20 20 20 20 
3724   2663 20 20 
3725   2665 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3725   2669 20 20 20 20 
3725   266D 20 20 20 20 
3725   2671 20 20 20 20 
3725   2675 20 20 20 20 
3726   2679 00 00 00 00 .fill 400, 0
3726   267D 00 00 00 00 
3726   2681 00 00 00 00 
3726   2685 00 00 00 00 
3726   2689 00 00 00 00 
3726   268D 00 00 00 00 
3726   2691 00 00 00 00 
3726   2695 00 00 00 00 
3726   2699 00 00 00 00 
3726   269D 00 00 00 00 
3726   26A1 00 00 00 00 
3726   26A5 00 00 00 00 
3726   26A9 00 00 00 00 
3726   26AD 00 00 00 00 
3726   26B1 00 00 00 00 
3726   26B5 00 00 00 00 
3726   26B9 00 00 00 00 
3726   26BD 00 00 00 00 
3726   26C1 00 00 00 00 
3726   26C5 00 00 00 00 
3726   26C9 00 00 00 00 
3726   26CD 00 00 00 00 
3726   26D1 00 00 00 00 
3726   26D5 00 00 00 00 
3726   26D9 00 00 00 00 
3726   26DD 00 00 00 00 
3726   26E1 00 00 00 00 
3726   26E5 00 00 00 00 
3726   26E9 00 00 00 00 
3726   26ED 00 00 00 00 
3726   26F1 00 00 00 00 
3726   26F5 00 00 00 00 
3726   26F9 00 00 00 00 
3726   26FD 00 00 00 00 
3726   2701 00 00 00 00 
3726   2705 00 00 00 00 
3726   2709 00 00 00 00 
3726   270D 00 00 00 00 
3726   2711 00 00 00 00 
3726   2715 00 00 00 00 
3726   2719 00 00 00 00 
3726   271D 00 00 00 00 
3726   2721 00 00 00 00 
3726   2725 00 00 00 00 
3726   2729 00 00 00 00 
3726   272D 00 00 00 00 
3726   2731 00 00 00 00 
3726   2735 00 00 00 00 
3726   2739 00 00 00 00 
3726   273D 00 00 00 00 
3726   2741 00 00 00 00 
3726   2745 00 00 00 00 
3726   2749 00 00 00 00 
3726   274D 00 00 00 00 
3726   2751 00 00 00 00 
3726   2755 00 00 00 00 
3726   2759 00 00 00 00 
3726   275D 00 00 00 00 
3726   2761 00 00 00 00 
3726   2765 00 00 00 00 
3726   2769 00 00 00 00 
3726   276D 00 00 00 00 
3726   2771 00 00 00 00 
3726   2775 00 00 00 00 
3726   2779 00 00 00 00 
3726   277D 00 00 00 00 
3726   2781 00 00 00 00 
3726   2785 00 00 00 00 
3726   2789 00 00 00 00 
3726   278D 00 00 00 00 
3726   2791 00 00 00 00 
3726   2795 00 00 00 00 
3726   2799 00 00 00 00 
3726   279D 00 00 00 00 
3726   27A1 00 00 00 00 
3726   27A5 00 00 00 00 
3726   27A9 00 00 00 00 
3726   27AD 00 00 00 00 
3726   27B1 00 00 00 00 
3726   27B5 00 00 00 00 
3726   27B9 00 00 00 00 
3726   27BD 00 00 00 00 
3726   27C1 00 00 00 00 
3726   27C5 00 00 00 00 
3726   27C9 00 00 00 00 
3726   27CD 00 00 00 00 
3726   27D1 00 00 00 00 
3726   27D5 00 00 00 00 
3726   27D9 00 00 00 00 
3726   27DD 00 00 00 00 
3726   27E1 00 00 00 00 
3726   27E5 00 00 00 00 
3726   27E9 00 00 00 00 
3726   27ED 00 00 00 00 
3726   27F1 00 00 00 00 
3726   27F5 00 00 00 00 
3726   27F9 00 00 00 00 
3726   27FD 00 00 00 00 
3726   2801 00 00 00 00 
3726   2805 00 00 00 00 
3727   2809 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
3727   280D 65 73 73 20 
3727   2811 43 54 52 4C 
3727   2815 2B 43 20 74 
3727   2819 6F 20 71 75 
3727   281D 69 74 2E 0A 
3727   2821 0D 00 
3728   2823 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
3728   2827 70 65 63 74 
3728   282B 65 64 20 66 
3728   282F 6F 72 6D 61 
3728   2833 74 20 69 6E 
3728   2837 20 70 72 69 
3728   283B 6E 74 66 2E 
3728   283F 00 
3729   2840 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
3729   2844 72 3A 20 55 
3729   2848 6E 6B 6E 6F 
3729   284C 77 6E 20 61 
3729   2850 72 67 75 6D 
3729   2854 65 6E 74 20 
3729   2858 74 79 70 65 
3729   285C 2E 0A 00 
3730   285F 1B 5B 32 4A _s3: .db "\033[2J\033[H", 0
3730   2863 1B 5B 48 00 
3731   2867 40 20 00    _s4: .db "@ ", 0
3732   286A 2E 20 00    _s5: .db ". ", 0
3733   286D             
3734   286D 6F 28       _heap_top: .dw _heap
3735   286F 00          _heap: .db 0
3736   2870             ; --- END DATA BLOCK
3737   2870             
3738   2870             .end
tasm: Number of errors = 0
