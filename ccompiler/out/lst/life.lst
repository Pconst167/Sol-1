0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; int i, j; 
0011   0408 52 02 00      sub sp, 2 ; i
0012   040B 52 02 00      sub sp, 2 ; j
0013   040E             ;; int n; 
0014   040E 52 02 00      sub sp, 2 ; n
0015   0411             ;; for(i = 0; i <   30     ; i++){ 
0016   0411             _for1_init:
0017   0411 FA FF FF      lea d, [bp + -1] ; $i
0018   0414 DA            push d
0019   0415 26 00 00      mov b, $0
0020   0418 E7            pop d
0021   0419 FD 43         mov [d], b
0022   041B             _for1_cond:
0023   041B FA FF FF      lea d, [bp + -1] ; $i
0024   041E 2A            mov b, [d]
0025   041F             ; START RELATIONAL
0026   041F D7            push a
0027   0420 11            mov a, b
0028   0421 26 1E 00      mov b, $1e
0029   0424 B0            cmp a, b
0030   0425 FD 73         slt ; < (signed)
0031   0427 E4            pop a
0032   0428             ; END RELATIONAL
0033   0428 C0 00 00      cmp b, 0
0034   042B C6 9E 04      je _for1_exit
0035   042E             _for1_block:
0036   042E             ;; for(j = 0; j <    40    ; j++){ 
0037   042E             _for2_init:
0038   042E FA FD FF      lea d, [bp + -3] ; $j
0039   0431 DA            push d
0040   0432 26 00 00      mov b, $0
0041   0435 E7            pop d
0042   0436 FD 43         mov [d], b
0043   0438             _for2_cond:
0044   0438 FA FD FF      lea d, [bp + -3] ; $j
0045   043B 2A            mov b, [d]
0046   043C             ; START RELATIONAL
0047   043C D7            push a
0048   043D 11            mov a, b
0049   043E 26 28 00      mov b, $28
0050   0441 B0            cmp a, b
0051   0442 FD 73         slt ; < (signed)
0052   0444 E4            pop a
0053   0445             ; END RELATIONAL
0054   0445 C0 00 00      cmp b, 0
0055   0448 C6 8E 04      je _for2_exit
0056   044B             _for2_block:
0057   044B             ;; nextState[i][j] = currState[i][j]; 
0058   044B 3B A7 1E      mov d, _nextState_data ; $nextState
0059   044E D7            push a
0060   044F DA            push d
0061   0450 FA FF FF      lea d, [bp + -1] ; $i
0062   0453 2A            mov b, [d]
0063   0454 E7            pop d
0064   0455 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0065   0459 DA            push d
0066   045A FA FD FF      lea d, [bp + -3] ; $j
0067   045D 2A            mov b, [d]
0068   045E E7            pop d
0069   045F 5A            add d, b
0070   0460 E4            pop a
0071   0461 DA            push d
0072   0462 3B 57 23      mov d, _currState_data ; $currState
0073   0465 D7            push a
0074   0466 DA            push d
0075   0467 FA FF FF      lea d, [bp + -1] ; $i
0076   046A 2A            mov b, [d]
0077   046B E7            pop d
0078   046C FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0079   0470 DA            push d
0080   0471 FA FD FF      lea d, [bp + -3] ; $j
0081   0474 2A            mov b, [d]
0082   0475 E7            pop d
0083   0476 5A            add d, b
0084   0477 E4            pop a
0085   0478 32            mov bl, [d]
0086   0479 A7 00         mov bh, 0
0087   047B E7            pop d
0088   047C FD 3E         mov [d], bl
0089   047E             _for2_update:
0090   047E FA FD FF      lea d, [bp + -3] ; $j
0091   0481 2A            mov b, [d]
0092   0482 D8            push b
0093   0483 FD 77         inc b
0094   0485 FA FD FF      lea d, [bp + -3] ; $j
0095   0488 FD 43         mov [d], b
0096   048A E5            pop b
0097   048B 0A 38 04      jmp _for2_cond
0098   048E             _for2_exit:
0099   048E             _for1_update:
0100   048E FA FF FF      lea d, [bp + -1] ; $i
0101   0491 2A            mov b, [d]
0102   0492 D8            push b
0103   0493 FD 77         inc b
0104   0495 FA FF FF      lea d, [bp + -1] ; $i
0105   0498 FD 43         mov [d], b
0106   049A E5            pop b
0107   049B 0A 1B 04      jmp _for1_cond
0108   049E             _for1_exit:
0109   049E             ;; for(;;){ 
0110   049E             _for3_init:
0111   049E             _for3_cond:
0112   049E             _for3_block:
0113   049E             ;; for(i = 1; i <   30     +-1; i++){ 
0114   049E             _for4_init:
0115   049E FA FF FF      lea d, [bp + -1] ; $i
0116   04A1 DA            push d
0117   04A2 26 01 00      mov b, $1
0118   04A5 E7            pop d
0119   04A6 FD 43         mov [d], b
0120   04A8             _for4_cond:
0121   04A8 FA FF FF      lea d, [bp + -1] ; $i
0122   04AB 2A            mov b, [d]
0123   04AC             ; START RELATIONAL
0124   04AC D7            push a
0125   04AD 11            mov a, b
0126   04AE 26 1E 00      mov b, $1e
0127   04B1             ; START TERMS
0128   04B1 D7            push a
0129   04B2 11            mov a, b
0130   04B3 26 FF FF      mov b, $ffff
0131   04B6 56            add b, a
0132   04B7 E4            pop a
0133   04B8             ; END TERMS
0134   04B8 B0            cmp a, b
0135   04B9 FD 73         slt ; < (signed)
0136   04BB E4            pop a
0137   04BC             ; END RELATIONAL
0138   04BC C0 00 00      cmp b, 0
0139   04BF C6 99 05      je _for4_exit
0140   04C2             _for4_block:
0141   04C2             ;; for(j = 1; j <    40    +-1; j++){ 
0142   04C2             _for5_init:
0143   04C2 FA FD FF      lea d, [bp + -3] ; $j
0144   04C5 DA            push d
0145   04C6 26 01 00      mov b, $1
0146   04C9 E7            pop d
0147   04CA FD 43         mov [d], b
0148   04CC             _for5_cond:
0149   04CC FA FD FF      lea d, [bp + -3] ; $j
0150   04CF 2A            mov b, [d]
0151   04D0             ; START RELATIONAL
0152   04D0 D7            push a
0153   04D1 11            mov a, b
0154   04D2 26 28 00      mov b, $28
0155   04D5             ; START TERMS
0156   04D5 D7            push a
0157   04D6 11            mov a, b
0158   04D7 26 FF FF      mov b, $ffff
0159   04DA 56            add b, a
0160   04DB E4            pop a
0161   04DC             ; END TERMS
0162   04DC B0            cmp a, b
0163   04DD FD 73         slt ; < (signed)
0164   04DF E4            pop a
0165   04E0             ; END RELATIONAL
0166   04E0 C0 00 00      cmp b, 0
0167   04E3 C6 89 05      je _for5_exit
0168   04E6             _for5_block:
0169   04E6             ;; n = neighbours(i, j); 
0170   04E6 FA FB FF      lea d, [bp + -5] ; $n
0171   04E9 DA            push d
0172   04EA FA FD FF      lea d, [bp + -3] ; $j
0173   04ED 2A            mov b, [d]
0174   04EE FD AB         swp b
0175   04F0 D8            push b
0176   04F1 FA FF FF      lea d, [bp + -1] ; $i
0177   04F4 2A            mov b, [d]
0178   04F5 FD AB         swp b
0179   04F7 D8            push b
0180   04F8 07 72 1C      call neighbours
0181   04FB 51 04 00      add sp, 4
0182   04FE E7            pop d
0183   04FF FD 43         mov [d], b
0184   0501             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0185   0501             _if6_cond:
0186   0501 FA FB FF      lea d, [bp + -5] ; $n
0187   0504 2A            mov b, [d]
0188   0505             ; START RELATIONAL
0189   0505 D7            push a
0190   0506 11            mov a, b
0191   0507 26 02 00      mov b, $2
0192   050A B0            cmp a, b
0193   050B FD 73         slt ; < (signed)
0194   050D E4            pop a
0195   050E             ; END RELATIONAL
0196   050E D7            push a
0197   050F 11            mov a, b
0198   0510 FA FB FF      lea d, [bp + -5] ; $n
0199   0513 2A            mov b, [d]
0200   0514             ; START RELATIONAL
0201   0514 D7            push a
0202   0515 11            mov a, b
0203   0516 26 03 00      mov b, $3
0204   0519 B0            cmp a, b
0205   051A FD 7F         sgt ; >
0206   051C E4            pop a
0207   051D             ; END RELATIONAL
0208   051D FD A8         sor a, b ; ||
0209   051F E4            pop a
0210   0520 C0 00 00      cmp b, 0
0211   0523 C6 46 05      je _if6_else
0212   0526             _if6_true:
0213   0526             ;; nextState[i][j] = ' '; 
0214   0526 3B A7 1E      mov d, _nextState_data ; $nextState
0215   0529 D7            push a
0216   052A DA            push d
0217   052B FA FF FF      lea d, [bp + -1] ; $i
0218   052E 2A            mov b, [d]
0219   052F E7            pop d
0220   0530 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0221   0534 DA            push d
0222   0535 FA FD FF      lea d, [bp + -3] ; $j
0223   0538 2A            mov b, [d]
0224   0539 E7            pop d
0225   053A 5A            add d, b
0226   053B E4            pop a
0227   053C DA            push d
0228   053D 26 20 00      mov b, $20
0229   0540 E7            pop d
0230   0541 FD 3E         mov [d], bl
0231   0543 0A 79 05      jmp _if6_exit
0232   0546             _if6_else:
0233   0546             ;; if(n == 3) nextState[i][j] = '@'; 
0234   0546             _if7_cond:
0235   0546 FA FB FF      lea d, [bp + -5] ; $n
0236   0549 2A            mov b, [d]
0237   054A             ; START RELATIONAL
0238   054A D7            push a
0239   054B 11            mov a, b
0240   054C 26 03 00      mov b, $3
0241   054F B0            cmp a, b
0242   0550 FD 71         seq ; ==
0243   0552 E4            pop a
0244   0553             ; END RELATIONAL
0245   0553 C0 00 00      cmp b, 0
0246   0556 C6 79 05      je _if7_exit
0247   0559             _if7_true:
0248   0559             ;; nextState[i][j] = '@'; 
0249   0559 3B A7 1E      mov d, _nextState_data ; $nextState
0250   055C D7            push a
0251   055D DA            push d
0252   055E FA FF FF      lea d, [bp + -1] ; $i
0253   0561 2A            mov b, [d]
0254   0562 E7            pop d
0255   0563 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0256   0567 DA            push d
0257   0568 FA FD FF      lea d, [bp + -3] ; $j
0258   056B 2A            mov b, [d]
0259   056C E7            pop d
0260   056D 5A            add d, b
0261   056E E4            pop a
0262   056F DA            push d
0263   0570 26 40 00      mov b, $40
0264   0573 E7            pop d
0265   0574 FD 3E         mov [d], bl
0266   0576 0A 79 05      jmp _if7_exit
0267   0579             _if7_exit:
0268   0579             _if6_exit:
0269   0579             _for5_update:
0270   0579 FA FD FF      lea d, [bp + -3] ; $j
0271   057C 2A            mov b, [d]
0272   057D D8            push b
0273   057E FD 77         inc b
0274   0580 FA FD FF      lea d, [bp + -3] ; $j
0275   0583 FD 43         mov [d], b
0276   0585 E5            pop b
0277   0586 0A CC 04      jmp _for5_cond
0278   0589             _for5_exit:
0279   0589             _for4_update:
0280   0589 FA FF FF      lea d, [bp + -1] ; $i
0281   058C 2A            mov b, [d]
0282   058D D8            push b
0283   058E FD 77         inc b
0284   0590 FA FF FF      lea d, [bp + -1] ; $i
0285   0593 FD 43         mov [d], b
0286   0595 E5            pop b
0287   0596 0A A8 04      jmp _for4_cond
0288   0599             _for4_exit:
0289   0599             ;; for(i = 1; i <   30     +-1; i++){ 
0290   0599             _for8_init:
0291   0599 FA FF FF      lea d, [bp + -1] ; $i
0292   059C DA            push d
0293   059D 26 01 00      mov b, $1
0294   05A0 E7            pop d
0295   05A1 FD 43         mov [d], b
0296   05A3             _for8_cond:
0297   05A3 FA FF FF      lea d, [bp + -1] ; $i
0298   05A6 2A            mov b, [d]
0299   05A7             ; START RELATIONAL
0300   05A7 D7            push a
0301   05A8 11            mov a, b
0302   05A9 26 1E 00      mov b, $1e
0303   05AC             ; START TERMS
0304   05AC D7            push a
0305   05AD 11            mov a, b
0306   05AE 26 FF FF      mov b, $ffff
0307   05B1 56            add b, a
0308   05B2 E4            pop a
0309   05B3             ; END TERMS
0310   05B3 B0            cmp a, b
0311   05B4 FD 73         slt ; < (signed)
0312   05B6 E4            pop a
0313   05B7             ; END RELATIONAL
0314   05B7 C0 00 00      cmp b, 0
0315   05BA C6 34 06      je _for8_exit
0316   05BD             _for8_block:
0317   05BD             ;; for(j = 1; j <    40    +-1; j++){ 
0318   05BD             _for9_init:
0319   05BD FA FD FF      lea d, [bp + -3] ; $j
0320   05C0 DA            push d
0321   05C1 26 01 00      mov b, $1
0322   05C4 E7            pop d
0323   05C5 FD 43         mov [d], b
0324   05C7             _for9_cond:
0325   05C7 FA FD FF      lea d, [bp + -3] ; $j
0326   05CA 2A            mov b, [d]
0327   05CB             ; START RELATIONAL
0328   05CB D7            push a
0329   05CC 11            mov a, b
0330   05CD 26 28 00      mov b, $28
0331   05D0             ; START TERMS
0332   05D0 D7            push a
0333   05D1 11            mov a, b
0334   05D2 26 FF FF      mov b, $ffff
0335   05D5 56            add b, a
0336   05D6 E4            pop a
0337   05D7             ; END TERMS
0338   05D7 B0            cmp a, b
0339   05D8 FD 73         slt ; < (signed)
0340   05DA E4            pop a
0341   05DB             ; END RELATIONAL
0342   05DB C0 00 00      cmp b, 0
0343   05DE C6 24 06      je _for9_exit
0344   05E1             _for9_block:
0345   05E1             ;; currState[i][j] = nextState[i][j]; 
0346   05E1 3B 57 23      mov d, _currState_data ; $currState
0347   05E4 D7            push a
0348   05E5 DA            push d
0349   05E6 FA FF FF      lea d, [bp + -1] ; $i
0350   05E9 2A            mov b, [d]
0351   05EA E7            pop d
0352   05EB FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0353   05EF DA            push d
0354   05F0 FA FD FF      lea d, [bp + -3] ; $j
0355   05F3 2A            mov b, [d]
0356   05F4 E7            pop d
0357   05F5 5A            add d, b
0358   05F6 E4            pop a
0359   05F7 DA            push d
0360   05F8 3B A7 1E      mov d, _nextState_data ; $nextState
0361   05FB D7            push a
0362   05FC DA            push d
0363   05FD FA FF FF      lea d, [bp + -1] ; $i
0364   0600 2A            mov b, [d]
0365   0601 E7            pop d
0366   0602 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0367   0606 DA            push d
0368   0607 FA FD FF      lea d, [bp + -3] ; $j
0369   060A 2A            mov b, [d]
0370   060B E7            pop d
0371   060C 5A            add d, b
0372   060D E4            pop a
0373   060E 32            mov bl, [d]
0374   060F A7 00         mov bh, 0
0375   0611 E7            pop d
0376   0612 FD 3E         mov [d], bl
0377   0614             _for9_update:
0378   0614 FA FD FF      lea d, [bp + -3] ; $j
0379   0617 2A            mov b, [d]
0380   0618 D8            push b
0381   0619 FD 77         inc b
0382   061B FA FD FF      lea d, [bp + -3] ; $j
0383   061E FD 43         mov [d], b
0384   0620 E5            pop b
0385   0621 0A C7 05      jmp _for9_cond
0386   0624             _for9_exit:
0387   0624             _for8_update:
0388   0624 FA FF FF      lea d, [bp + -1] ; $i
0389   0627 2A            mov b, [d]
0390   0628 D8            push b
0391   0629 FD 77         inc b
0392   062B FA FF FF      lea d, [bp + -1] ; $i
0393   062E FD 43         mov [d], b
0394   0630 E5            pop b
0395   0631 0A A3 05      jmp _for8_cond
0396   0634             _for8_exit:
0397   0634             ;; printf(clear); 
0398   0634 3B 9C 1E      mov d, _clear_data ; $clear
0399   0637 2D            mov b, d
0400   0638 FD AB         swp b
0401   063A D8            push b
0402   063B 07 F9 09      call printf
0403   063E 51 02 00      add sp, 2
0404   0641             ;; show(); 
0405   0641 07 86 1B      call show
0406   0644             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0407   0644 26 07 28      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0408   0647 FD AB         swp b
0409   0649 D8            push b
0410   064A 07 89 17      call puts
0411   064D 51 02 00      add sp, 2
0412   0650             _for3_update:
0413   0650 0A 9E 04      jmp _for3_cond
0414   0653             _for3_exit:
0415   0653 05 0B         syscall sys_terminate_proc
0416   0655             
0417   0655             strcpy:
0418   0655 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0419   0658             ;; char *psrc; 
0420   0658 52 02 00      sub sp, 2 ; psrc
0421   065B             ;; char *pdest; 
0422   065B 52 02 00      sub sp, 2 ; pdest
0423   065E             ;; psrc = src; 
0424   065E FA FF FF      lea d, [bp + -1] ; $psrc
0425   0661 DA            push d
0426   0662 FA 07 00      lea d, [bp + 7] ; $src
0427   0665 2A            mov b, [d]
0428   0666 E7            pop d
0429   0667 FD 43         mov [d], b
0430   0669             ;; pdest = dest; 
0431   0669 FA FD FF      lea d, [bp + -3] ; $pdest
0432   066C DA            push d
0433   066D FA 05 00      lea d, [bp + 5] ; $dest
0434   0670 2A            mov b, [d]
0435   0671 E7            pop d
0436   0672 FD 43         mov [d], b
0437   0674             ;; while(*psrc) *pdest++ = *psrc++; 
0438   0674             _while10_cond:
0439   0674 FA FF FF      lea d, [bp + -1] ; $psrc
0440   0677 2A            mov b, [d]
0441   0678 74            mov d, b
0442   0679 32            mov bl, [d]
0443   067A A7 00         mov bh, 0
0444   067C C0 00 00      cmp b, 0
0445   067F C6 A7 06      je _while10_exit
0446   0682             _while10_block:
0447   0682             ;; *pdest++ = *psrc++; 
0448   0682 FA FD FF      lea d, [bp + -3] ; $pdest
0449   0685 2A            mov b, [d]
0450   0686 D8            push b
0451   0687 FD 77         inc b
0452   0689 FA FD FF      lea d, [bp + -3] ; $pdest
0453   068C FD 43         mov [d], b
0454   068E E5            pop b
0455   068F D8            push b
0456   0690 FA FF FF      lea d, [bp + -1] ; $psrc
0457   0693 2A            mov b, [d]
0458   0694 D8            push b
0459   0695 FD 77         inc b
0460   0697 FA FF FF      lea d, [bp + -1] ; $psrc
0461   069A FD 43         mov [d], b
0462   069C E5            pop b
0463   069D 74            mov d, b
0464   069E 32            mov bl, [d]
0465   069F A7 00         mov bh, 0
0466   06A1 E7            pop d
0467   06A2 FD 3E         mov [d], bl
0468   06A4 0A 74 06      jmp _while10_cond
0469   06A7             _while10_exit:
0470   06A7             ;; *pdest = '\0'; 
0471   06A7 FA FD FF      lea d, [bp + -3] ; $pdest
0472   06AA 2A            mov b, [d]
0473   06AB D8            push b
0474   06AC 26 00 00      mov b, $0
0475   06AF E7            pop d
0476   06B0 FD 3E         mov [d], bl
0477   06B2 F9            leave
0478   06B3 09            ret
0479   06B4             
0480   06B4             strcmp:
0481   06B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0482   06B7             ;; while (*s1 && (*s1 == *s2)) { 
0483   06B7             _while11_cond:
0484   06B7 FA 05 00      lea d, [bp + 5] ; $s1
0485   06BA 2A            mov b, [d]
0486   06BB 74            mov d, b
0487   06BC 32            mov bl, [d]
0488   06BD A7 00         mov bh, 0
0489   06BF D7            push a
0490   06C0 11            mov a, b
0491   06C1 FA 05 00      lea d, [bp + 5] ; $s1
0492   06C4 2A            mov b, [d]
0493   06C5 74            mov d, b
0494   06C6 32            mov bl, [d]
0495   06C7 A7 00         mov bh, 0
0496   06C9             ; START RELATIONAL
0497   06C9 D7            push a
0498   06CA 11            mov a, b
0499   06CB FA 07 00      lea d, [bp + 7] ; $s2
0500   06CE 2A            mov b, [d]
0501   06CF 74            mov d, b
0502   06D0 32            mov bl, [d]
0503   06D1 A7 00         mov bh, 0
0504   06D3 B0            cmp a, b
0505   06D4 FD 71         seq ; ==
0506   06D6 E4            pop a
0507   06D7             ; END RELATIONAL
0508   06D7 FD A7         sand a, b
0509   06D9 E4            pop a
0510   06DA C0 00 00      cmp b, 0
0511   06DD C6 FD 06      je _while11_exit
0512   06E0             _while11_block:
0513   06E0             ;; s1++; 
0514   06E0 FA 05 00      lea d, [bp + 5] ; $s1
0515   06E3 2A            mov b, [d]
0516   06E4 D8            push b
0517   06E5 FD 77         inc b
0518   06E7 FA 05 00      lea d, [bp + 5] ; $s1
0519   06EA FD 43         mov [d], b
0520   06EC E5            pop b
0521   06ED             ;; s2++; 
0522   06ED FA 07 00      lea d, [bp + 7] ; $s2
0523   06F0 2A            mov b, [d]
0524   06F1 D8            push b
0525   06F2 FD 77         inc b
0526   06F4 FA 07 00      lea d, [bp + 7] ; $s2
0527   06F7 FD 43         mov [d], b
0528   06F9 E5            pop b
0529   06FA 0A B7 06      jmp _while11_cond
0530   06FD             _while11_exit:
0531   06FD             ;; return *s1 - *s2; 
0532   06FD FA 05 00      lea d, [bp + 5] ; $s1
0533   0700 2A            mov b, [d]
0534   0701 74            mov d, b
0535   0702 32            mov bl, [d]
0536   0703 A7 00         mov bh, 0
0537   0705             ; START TERMS
0538   0705 D7            push a
0539   0706 11            mov a, b
0540   0707 FA 07 00      lea d, [bp + 7] ; $s2
0541   070A 2A            mov b, [d]
0542   070B 74            mov d, b
0543   070C 32            mov bl, [d]
0544   070D A7 00         mov bh, 0
0545   070F 60            sub a, b
0546   0710 27            mov b, a
0547   0711 E4            pop a
0548   0712             ; END TERMS
0549   0712 F9            leave
0550   0713 09            ret
0551   0714             
0552   0714             strncmp:
0553   0714 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0554   0717 F9            leave
0555   0718 09            ret
0556   0719             
0557   0719             strcat:
0558   0719 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0559   071C             ;; int dest_len; 
0560   071C 52 02 00      sub sp, 2 ; dest_len
0561   071F             ;; int i; 
0562   071F 52 02 00      sub sp, 2 ; i
0563   0722             ;; dest_len = strlen(dest); 
0564   0722 FA FF FF      lea d, [bp + -1] ; $dest_len
0565   0725 DA            push d
0566   0726 FA 05 00      lea d, [bp + 5] ; $dest
0567   0729 2A            mov b, [d]
0568   072A FD AB         swp b
0569   072C D8            push b
0570   072D 07 CF 07      call strlen
0571   0730 51 02 00      add sp, 2
0572   0733 E7            pop d
0573   0734 FD 43         mov [d], b
0574   0736             ;; for (i = 0; src[i] != 0; i=i+1) { 
0575   0736             _for12_init:
0576   0736 FA FD FF      lea d, [bp + -3] ; $i
0577   0739 DA            push d
0578   073A 26 00 00      mov b, $0
0579   073D E7            pop d
0580   073E FD 43         mov [d], b
0581   0740             _for12_cond:
0582   0740 FA 07 00      lea d, [bp + 7] ; $src
0583   0743 FD 2A         mov d, [d]
0584   0745 D7            push a
0585   0746 DA            push d
0586   0747 FA FD FF      lea d, [bp + -3] ; $i
0587   074A 2A            mov b, [d]
0588   074B E7            pop d
0589   074C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0590   0750 E4            pop a
0591   0751 32            mov bl, [d]
0592   0752 A7 00         mov bh, 0
0593   0754             ; START RELATIONAL
0594   0754 D7            push a
0595   0755 11            mov a, b
0596   0756 26 00 00      mov b, $0
0597   0759 B0            cmp a, b
0598   075A FD 72         sneq ; !=
0599   075C E4            pop a
0600   075D             ; END RELATIONAL
0601   075D C0 00 00      cmp b, 0
0602   0760 C6 A9 07      je _for12_exit
0603   0763             _for12_block:
0604   0763             ;; dest[dest_len + i] = src[i]; 
0605   0763 FA 05 00      lea d, [bp + 5] ; $dest
0606   0766 FD 2A         mov d, [d]
0607   0768 D7            push a
0608   0769 DA            push d
0609   076A FA FF FF      lea d, [bp + -1] ; $dest_len
0610   076D 2A            mov b, [d]
0611   076E             ; START TERMS
0612   076E D7            push a
0613   076F 11            mov a, b
0614   0770 FA FD FF      lea d, [bp + -3] ; $i
0615   0773 2A            mov b, [d]
0616   0774 56            add b, a
0617   0775 E4            pop a
0618   0776             ; END TERMS
0619   0776 E7            pop d
0620   0777 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0621   077B E4            pop a
0622   077C DA            push d
0623   077D FA 07 00      lea d, [bp + 7] ; $src
0624   0780 FD 2A         mov d, [d]
0625   0782 D7            push a
0626   0783 DA            push d
0627   0784 FA FD FF      lea d, [bp + -3] ; $i
0628   0787 2A            mov b, [d]
0629   0788 E7            pop d
0630   0789 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0631   078D E4            pop a
0632   078E 32            mov bl, [d]
0633   078F A7 00         mov bh, 0
0634   0791 E7            pop d
0635   0792 FD 3E         mov [d], bl
0636   0794             _for12_update:
0637   0794 FA FD FF      lea d, [bp + -3] ; $i
0638   0797 DA            push d
0639   0798 FA FD FF      lea d, [bp + -3] ; $i
0640   079B 2A            mov b, [d]
0641   079C             ; START TERMS
0642   079C D7            push a
0643   079D 11            mov a, b
0644   079E 26 01 00      mov b, $1
0645   07A1 56            add b, a
0646   07A2 E4            pop a
0647   07A3             ; END TERMS
0648   07A3 E7            pop d
0649   07A4 FD 43         mov [d], b
0650   07A6 0A 40 07      jmp _for12_cond
0651   07A9             _for12_exit:
0652   07A9             ;; dest[dest_len + i] = 0; 
0653   07A9 FA 05 00      lea d, [bp + 5] ; $dest
0654   07AC FD 2A         mov d, [d]
0655   07AE D7            push a
0656   07AF DA            push d
0657   07B0 FA FF FF      lea d, [bp + -1] ; $dest_len
0658   07B3 2A            mov b, [d]
0659   07B4             ; START TERMS
0660   07B4 D7            push a
0661   07B5 11            mov a, b
0662   07B6 FA FD FF      lea d, [bp + -3] ; $i
0663   07B9 2A            mov b, [d]
0664   07BA 56            add b, a
0665   07BB E4            pop a
0666   07BC             ; END TERMS
0667   07BC E7            pop d
0668   07BD FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0669   07C1 E4            pop a
0670   07C2 DA            push d
0671   07C3 26 00 00      mov b, $0
0672   07C6 E7            pop d
0673   07C7 FD 3E         mov [d], bl
0674   07C9             ;; return dest; 
0675   07C9 FA 05 00      lea d, [bp + 5] ; $dest
0676   07CC 2A            mov b, [d]
0677   07CD F9            leave
0678   07CE 09            ret
0679   07CF             
0680   07CF             strlen:
0681   07CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0682   07D2             ;; int length; 
0683   07D2 52 02 00      sub sp, 2 ; length
0684   07D5             ;; length = 0; 
0685   07D5 FA FF FF      lea d, [bp + -1] ; $length
0686   07D8 DA            push d
0687   07D9 26 00 00      mov b, $0
0688   07DC E7            pop d
0689   07DD FD 43         mov [d], b
0690   07DF             ;; while (str[length] != 0) { 
0691   07DF             _while13_cond:
0692   07DF FA 05 00      lea d, [bp + 5] ; $str
0693   07E2 FD 2A         mov d, [d]
0694   07E4 D7            push a
0695   07E5 DA            push d
0696   07E6 FA FF FF      lea d, [bp + -1] ; $length
0697   07E9 2A            mov b, [d]
0698   07EA E7            pop d
0699   07EB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0700   07EF E4            pop a
0701   07F0 32            mov bl, [d]
0702   07F1 A7 00         mov bh, 0
0703   07F3             ; START RELATIONAL
0704   07F3 D7            push a
0705   07F4 11            mov a, b
0706   07F5 26 00 00      mov b, $0
0707   07F8 B0            cmp a, b
0708   07F9 FD 72         sneq ; !=
0709   07FB E4            pop a
0710   07FC             ; END RELATIONAL
0711   07FC C0 00 00      cmp b, 0
0712   07FF C6 12 08      je _while13_exit
0713   0802             _while13_block:
0714   0802             ;; length++; 
0715   0802 FA FF FF      lea d, [bp + -1] ; $length
0716   0805 2A            mov b, [d]
0717   0806 D8            push b
0718   0807 FD 77         inc b
0719   0809 FA FF FF      lea d, [bp + -1] ; $length
0720   080C FD 43         mov [d], b
0721   080E E5            pop b
0722   080F 0A DF 07      jmp _while13_cond
0723   0812             _while13_exit:
0724   0812             ;; return length; 
0725   0812 FA FF FF      lea d, [bp + -1] ; $length
0726   0815 2A            mov b, [d]
0727   0816 F9            leave
0728   0817 09            ret
0729   0818             
0730   0818             exit:
0731   0818 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0732   081B             
0733   081B             ; --- BEGIN INLINE ASM BLOCK
0734   081B 05 0B         syscall sys_terminate_proc
0735   081D             ; --- END INLINE ASM BLOCK
0736   081D             
0737   081D F9            leave
0738   081E 09            ret
0739   081F             
0740   081F             memset:
0741   081F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0742   0822             ;; int i; 
0743   0822 52 02 00      sub sp, 2 ; i
0744   0825             ;; for(i = 0; i < size; i++){ 
0745   0825             _for14_init:
0746   0825 FA FF FF      lea d, [bp + -1] ; $i
0747   0828 DA            push d
0748   0829 26 00 00      mov b, $0
0749   082C E7            pop d
0750   082D FD 43         mov [d], b
0751   082F             _for14_cond:
0752   082F FA FF FF      lea d, [bp + -1] ; $i
0753   0832 2A            mov b, [d]
0754   0833             ; START RELATIONAL
0755   0833 D7            push a
0756   0834 11            mov a, b
0757   0835 FA 08 00      lea d, [bp + 8] ; $size
0758   0838 2A            mov b, [d]
0759   0839 B0            cmp a, b
0760   083A FD 73         slt ; < (signed)
0761   083C E4            pop a
0762   083D             ; END RELATIONAL
0763   083D C0 00 00      cmp b, 0
0764   0840 C6 69 08      je _for14_exit
0765   0843             _for14_block:
0766   0843             ;; *(s+i) = c; 
0767   0843 FA 05 00      lea d, [bp + 5] ; $s
0768   0846 2A            mov b, [d]
0769   0847             ; START TERMS
0770   0847 D7            push a
0771   0848 11            mov a, b
0772   0849 FA FF FF      lea d, [bp + -1] ; $i
0773   084C 2A            mov b, [d]
0774   084D 56            add b, a
0775   084E E4            pop a
0776   084F             ; END TERMS
0777   084F D8            push b
0778   0850 FA 07 00      lea d, [bp + 7] ; $c
0779   0853 32            mov bl, [d]
0780   0854 A7 00         mov bh, 0
0781   0856 E7            pop d
0782   0857 FD 3E         mov [d], bl
0783   0859             _for14_update:
0784   0859 FA FF FF      lea d, [bp + -1] ; $i
0785   085C 2A            mov b, [d]
0786   085D D8            push b
0787   085E FD 77         inc b
0788   0860 FA FF FF      lea d, [bp + -1] ; $i
0789   0863 FD 43         mov [d], b
0790   0865 E5            pop b
0791   0866 0A 2F 08      jmp _for14_cond
0792   0869             _for14_exit:
0793   0869             ;; return s; 
0794   0869 FA 05 00      lea d, [bp + 5] ; $s
0795   086C 2A            mov b, [d]
0796   086D F9            leave
0797   086E 09            ret
0798   086F             
0799   086F             atoi:
0800   086F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0801   0872             ;; int result = 0;  // Initialize result 
0802   0872 52 02 00      sub sp, 2 ; result
0803   0875             ; --- START LOCAL VAR INITIALIZATION
0804   0875 FA FF FF      lea d, [bp + -1] ; $result
0805   0878 DA            push d
0806   0879 26 00 00      mov b, $0
0807   087C E7            pop d
0808   087D FD 43         mov [d], b
0809   087F             ; --- END LOCAL VAR INITIALIZATION
0810   087F             ;; int sign = 1;    // Initialize sign as positive 
0811   087F 52 02 00      sub sp, 2 ; sign
0812   0882             ; --- START LOCAL VAR INITIALIZATION
0813   0882 FA FD FF      lea d, [bp + -3] ; $sign
0814   0885 DA            push d
0815   0886 26 01 00      mov b, $1
0816   0889 E7            pop d
0817   088A FD 43         mov [d], b
0818   088C             ; --- END LOCAL VAR INITIALIZATION
0819   088C             ;; while (*str == ' ') str++; 
0820   088C             _while15_cond:
0821   088C FA 05 00      lea d, [bp + 5] ; $str
0822   088F 2A            mov b, [d]
0823   0890 74            mov d, b
0824   0891 32            mov bl, [d]
0825   0892 A7 00         mov bh, 0
0826   0894             ; START RELATIONAL
0827   0894 D7            push a
0828   0895 11            mov a, b
0829   0896 26 20 00      mov b, $20
0830   0899 B0            cmp a, b
0831   089A FD 71         seq ; ==
0832   089C E4            pop a
0833   089D             ; END RELATIONAL
0834   089D C0 00 00      cmp b, 0
0835   08A0 C6 B3 08      je _while15_exit
0836   08A3             _while15_block:
0837   08A3             ;; str++; 
0838   08A3 FA 05 00      lea d, [bp + 5] ; $str
0839   08A6 2A            mov b, [d]
0840   08A7 D8            push b
0841   08A8 FD 77         inc b
0842   08AA FA 05 00      lea d, [bp + 5] ; $str
0843   08AD FD 43         mov [d], b
0844   08AF E5            pop b
0845   08B0 0A 8C 08      jmp _while15_cond
0846   08B3             _while15_exit:
0847   08B3             ;; if (*str == '-' || *str == '+') { 
0848   08B3             _if16_cond:
0849   08B3 FA 05 00      lea d, [bp + 5] ; $str
0850   08B6 2A            mov b, [d]
0851   08B7 74            mov d, b
0852   08B8 32            mov bl, [d]
0853   08B9 A7 00         mov bh, 0
0854   08BB             ; START RELATIONAL
0855   08BB D7            push a
0856   08BC 11            mov a, b
0857   08BD 26 2D 00      mov b, $2d
0858   08C0 B0            cmp a, b
0859   08C1 FD 71         seq ; ==
0860   08C3 E4            pop a
0861   08C4             ; END RELATIONAL
0862   08C4 D7            push a
0863   08C5 11            mov a, b
0864   08C6 FA 05 00      lea d, [bp + 5] ; $str
0865   08C9 2A            mov b, [d]
0866   08CA 74            mov d, b
0867   08CB 32            mov bl, [d]
0868   08CC A7 00         mov bh, 0
0869   08CE             ; START RELATIONAL
0870   08CE D7            push a
0871   08CF 11            mov a, b
0872   08D0 26 2B 00      mov b, $2b
0873   08D3 B0            cmp a, b
0874   08D4 FD 71         seq ; ==
0875   08D6 E4            pop a
0876   08D7             ; END RELATIONAL
0877   08D7 FD A8         sor a, b ; ||
0878   08D9 E4            pop a
0879   08DA C0 00 00      cmp b, 0
0880   08DD C6 14 09      je _if16_exit
0881   08E0             _if16_true:
0882   08E0             ;; if (*str == '-') sign = -1; 
0883   08E0             _if17_cond:
0884   08E0 FA 05 00      lea d, [bp + 5] ; $str
0885   08E3 2A            mov b, [d]
0886   08E4 74            mov d, b
0887   08E5 32            mov bl, [d]
0888   08E6 A7 00         mov bh, 0
0889   08E8             ; START RELATIONAL
0890   08E8 D7            push a
0891   08E9 11            mov a, b
0892   08EA 26 2D 00      mov b, $2d
0893   08ED B0            cmp a, b
0894   08EE FD 71         seq ; ==
0895   08F0 E4            pop a
0896   08F1             ; END RELATIONAL
0897   08F1 C0 00 00      cmp b, 0
0898   08F4 C6 04 09      je _if17_exit
0899   08F7             _if17_true:
0900   08F7             ;; sign = -1; 
0901   08F7 FA FD FF      lea d, [bp + -3] ; $sign
0902   08FA DA            push d
0903   08FB 26 FF FF      mov b, $ffff
0904   08FE E7            pop d
0905   08FF FD 43         mov [d], b
0906   0901 0A 04 09      jmp _if17_exit
0907   0904             _if17_exit:
0908   0904             ;; str++; 
0909   0904 FA 05 00      lea d, [bp + 5] ; $str
0910   0907 2A            mov b, [d]
0911   0908 D8            push b
0912   0909 FD 77         inc b
0913   090B FA 05 00      lea d, [bp + 5] ; $str
0914   090E FD 43         mov [d], b
0915   0910 E5            pop b
0916   0911 0A 14 09      jmp _if16_exit
0917   0914             _if16_exit:
0918   0914             ;; while (*str >= '0' && *str <= '9') { 
0919   0914             _while18_cond:
0920   0914 FA 05 00      lea d, [bp + 5] ; $str
0921   0917 2A            mov b, [d]
0922   0918 74            mov d, b
0923   0919 32            mov bl, [d]
0924   091A A7 00         mov bh, 0
0925   091C             ; START RELATIONAL
0926   091C D7            push a
0927   091D 11            mov a, b
0928   091E 26 30 00      mov b, $30
0929   0921 B0            cmp a, b
0930   0922 FD 82         sgeu ; >= (unsigned)
0931   0924 E4            pop a
0932   0925             ; END RELATIONAL
0933   0925 D7            push a
0934   0926 11            mov a, b
0935   0927 FA 05 00      lea d, [bp + 5] ; $str
0936   092A 2A            mov b, [d]
0937   092B 74            mov d, b
0938   092C 32            mov bl, [d]
0939   092D A7 00         mov bh, 0
0940   092F             ; START RELATIONAL
0941   092F D7            push a
0942   0930 11            mov a, b
0943   0931 26 39 00      mov b, $39
0944   0934 B0            cmp a, b
0945   0935 FD 75         slu ; <= (unsigned)
0946   0937 E4            pop a
0947   0938             ; END RELATIONAL
0948   0938 FD A7         sand a, b
0949   093A E4            pop a
0950   093B C0 00 00      cmp b, 0
0951   093E C6 79 09      je _while18_exit
0952   0941             _while18_block:
0953   0941             ;; result = result * 10 + (*str - '0'); 
0954   0941 FA FF FF      lea d, [bp + -1] ; $result
0955   0944 DA            push d
0956   0945 FA FF FF      lea d, [bp + -1] ; $result
0957   0948 2A            mov b, [d]
0958   0949             ; START FACTORS
0959   0949 D7            push a
0960   094A 11            mov a, b
0961   094B 26 0A 00      mov b, $a
0962   094E AC            mul a, b ; *
0963   094F 11            mov a, b
0964   0950 27            mov b, a
0965   0951 E4            pop a
0966   0952             ; END FACTORS
0967   0952             ; START TERMS
0968   0952 D7            push a
0969   0953 11            mov a, b
0970   0954 FA 05 00      lea d, [bp + 5] ; $str
0971   0957 2A            mov b, [d]
0972   0958 74            mov d, b
0973   0959 32            mov bl, [d]
0974   095A A7 00         mov bh, 0
0975   095C             ; START TERMS
0976   095C D7            push a
0977   095D 11            mov a, b
0978   095E 26 30 00      mov b, $30
0979   0961 60            sub a, b
0980   0962 27            mov b, a
0981   0963 E4            pop a
0982   0964             ; END TERMS
0983   0964 56            add b, a
0984   0965 E4            pop a
0985   0966             ; END TERMS
0986   0966 E7            pop d
0987   0967 FD 43         mov [d], b
0988   0969             ;; str++; 
0989   0969 FA 05 00      lea d, [bp + 5] ; $str
0990   096C 2A            mov b, [d]
0991   096D D8            push b
0992   096E FD 77         inc b
0993   0970 FA 05 00      lea d, [bp + 5] ; $str
0994   0973 FD 43         mov [d], b
0995   0975 E5            pop b
0996   0976 0A 14 09      jmp _while18_cond
0997   0979             _while18_exit:
0998   0979             ;; return sign * result; 
0999   0979 FA FD FF      lea d, [bp + -3] ; $sign
1000   097C 2A            mov b, [d]
1001   097D             ; START FACTORS
1002   097D D7            push a
1003   097E 11            mov a, b
1004   097F FA FF FF      lea d, [bp + -1] ; $result
1005   0982 2A            mov b, [d]
1006   0983 AC            mul a, b ; *
1007   0984 11            mov a, b
1008   0985 27            mov b, a
1009   0986 E4            pop a
1010   0987             ; END FACTORS
1011   0987 F9            leave
1012   0988 09            ret
1013   0989             
1014   0989             rand:
1015   0989 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1016   098C             ;; int  sec; 
1017   098C 52 02 00      sub sp, 2 ; sec
1018   098F             
1019   098F             ; --- BEGIN INLINE ASM BLOCK
1020   098F 19 00         mov al, 0
1021   0991 05 01         syscall sys_rtc					
1022   0993 1A            mov al, ah
1023   0994 FA FF FF      lea d, [bp + -1] ; $sec
1024   0997 1E            mov al, [d]
1025   0998 22 00         mov ah, 0
1026   099A             ; --- END INLINE ASM BLOCK
1027   099A             
1028   099A             ;; return sec; 
1029   099A FA FF FF      lea d, [bp + -1] ; $sec
1030   099D 2A            mov b, [d]
1031   099E F9            leave
1032   099F 09            ret
1033   09A0             
1034   09A0             alloc:
1035   09A0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1036   09A3             ;; heap_top = heap_top + bytes; 
1037   09A3 3B 6B 28      mov d, _heap_top ; $heap_top
1038   09A6 DA            push d
1039   09A7 3B 6B 28      mov d, _heap_top ; $heap_top
1040   09AA 2A            mov b, [d]
1041   09AB             ; START TERMS
1042   09AB D7            push a
1043   09AC 11            mov a, b
1044   09AD FA 05 00      lea d, [bp + 5] ; $bytes
1045   09B0 2A            mov b, [d]
1046   09B1 56            add b, a
1047   09B2 E4            pop a
1048   09B3             ; END TERMS
1049   09B3 E7            pop d
1050   09B4 FD 43         mov [d], b
1051   09B6             ;; return heap_top - bytes; 
1052   09B6 3B 6B 28      mov d, _heap_top ; $heap_top
1053   09B9 2A            mov b, [d]
1054   09BA             ; START TERMS
1055   09BA D7            push a
1056   09BB 11            mov a, b
1057   09BC FA 05 00      lea d, [bp + 5] ; $bytes
1058   09BF 2A            mov b, [d]
1059   09C0 60            sub a, b
1060   09C1 27            mov b, a
1061   09C2 E4            pop a
1062   09C3             ; END TERMS
1063   09C3 F9            leave
1064   09C4 09            ret
1065   09C5             
1066   09C5             free:
1067   09C5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1068   09C8             ;; return heap_top = heap_top - bytes; 
1069   09C8 3B 6B 28      mov d, _heap_top ; $heap_top
1070   09CB DA            push d
1071   09CC 3B 6B 28      mov d, _heap_top ; $heap_top
1072   09CF 2A            mov b, [d]
1073   09D0             ; START TERMS
1074   09D0 D7            push a
1075   09D1 11            mov a, b
1076   09D2 FA 05 00      lea d, [bp + 5] ; $bytes
1077   09D5 2A            mov b, [d]
1078   09D6 60            sub a, b
1079   09D7 27            mov b, a
1080   09D8 E4            pop a
1081   09D9             ; END TERMS
1082   09D9 E7            pop d
1083   09DA FD 43         mov [d], b
1084   09DC F9            leave
1085   09DD 09            ret
1086   09DE             
1087   09DE             fopen:
1088   09DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1089   09E1             ;; FILE *fp; 
1090   09E1 52 02 00      sub sp, 2 ; fp
1091   09E4             ;; fp = alloc(sizeof(int)); 
1092   09E4 FA FF FF      lea d, [bp + -1] ; $fp
1093   09E7 DA            push d
1094   09E8 26 02 00      mov b, 2
1095   09EB FD AB         swp b
1096   09ED D8            push b
1097   09EE 07 A0 09      call alloc
1098   09F1 51 02 00      add sp, 2
1099   09F4 E7            pop d
1100   09F5 FD 43         mov [d], b
1101   09F7 F9            leave
1102   09F8 09            ret
1103   09F9             
1104   09F9             printf:
1105   09F9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1106   09FC             ;; char *p, *format_p; 
1107   09FC 52 02 00      sub sp, 2 ; p
1108   09FF 52 02 00      sub sp, 2 ; format_p
1109   0A02             ;; format_p = format; 
1110   0A02 FA FD FF      lea d, [bp + -3] ; $format_p
1111   0A05 DA            push d
1112   0A06 FA 05 00      lea d, [bp + 5] ; $format
1113   0A09 2A            mov b, [d]
1114   0A0A E7            pop d
1115   0A0B FD 43         mov [d], b
1116   0A0D             ;; p = &format + 2; 
1117   0A0D FA FF FF      lea d, [bp + -1] ; $p
1118   0A10 DA            push d
1119   0A11 FA 05 00      lea d, [bp + 5] ; $format
1120   0A14 2D            mov b, d
1121   0A15             ; START TERMS
1122   0A15 D7            push a
1123   0A16 11            mov a, b
1124   0A17 26 02 00      mov b, $2
1125   0A1A 56            add b, a
1126   0A1B E4            pop a
1127   0A1C             ; END TERMS
1128   0A1C E7            pop d
1129   0A1D FD 43         mov [d], b
1130   0A1F             ;; for(;;){ 
1131   0A1F             _for19_init:
1132   0A1F             _for19_cond:
1133   0A1F             _for19_block:
1134   0A1F             ;; if(!*format_p) break; 
1135   0A1F             _if20_cond:
1136   0A1F FA FD FF      lea d, [bp + -3] ; $format_p
1137   0A22 2A            mov b, [d]
1138   0A23 74            mov d, b
1139   0A24 32            mov bl, [d]
1140   0A25 A7 00         mov bh, 0
1141   0A27 C0 00 00      cmp b, 0
1142   0A2A FD 71         seq ; !
1143   0A2C C0 00 00      cmp b, 0
1144   0A2F C6 38 0A      je _if20_else
1145   0A32             _if20_true:
1146   0A32             ;; break; 
1147   0A32 0A 5F 0C      jmp _for19_exit ; for break
1148   0A35 0A 5C 0C      jmp _if20_exit
1149   0A38             _if20_else:
1150   0A38             ;; if(*format_p == '%'){ 
1151   0A38             _if21_cond:
1152   0A38 FA FD FF      lea d, [bp + -3] ; $format_p
1153   0A3B 2A            mov b, [d]
1154   0A3C 74            mov d, b
1155   0A3D 32            mov bl, [d]
1156   0A3E A7 00         mov bh, 0
1157   0A40             ; START RELATIONAL
1158   0A40 D7            push a
1159   0A41 11            mov a, b
1160   0A42 26 25 00      mov b, $25
1161   0A45 B0            cmp a, b
1162   0A46 FD 71         seq ; ==
1163   0A48 E4            pop a
1164   0A49             ; END RELATIONAL
1165   0A49 C0 00 00      cmp b, 0
1166   0A4C C6 40 0C      je _if21_else
1167   0A4F             _if21_true:
1168   0A4F             ;; format_p++; 
1169   0A4F FA FD FF      lea d, [bp + -3] ; $format_p
1170   0A52 2A            mov b, [d]
1171   0A53 D8            push b
1172   0A54 FD 77         inc b
1173   0A56 FA FD FF      lea d, [bp + -3] ; $format_p
1174   0A59 FD 43         mov [d], b
1175   0A5B E5            pop b
1176   0A5C             ;; switch(*format_p){ 
1177   0A5C             _switch22_expr:
1178   0A5C FA FD FF      lea d, [bp + -3] ; $format_p
1179   0A5F 2A            mov b, [d]
1180   0A60 74            mov d, b
1181   0A61 32            mov bl, [d]
1182   0A62 A7 00         mov bh, 0
1183   0A64             _switch22_comparisons:
1184   0A64 C1 6C         cmp bl, $6c
1185   0A66 C6 92 0A      je _switch22_case0
1186   0A69 C1 4C         cmp bl, $4c
1187   0A6B C6 92 0A      je _switch22_case1
1188   0A6E C1 64         cmp bl, $64
1189   0A70 C6 80 0B      je _switch22_case2
1190   0A73 C1 69         cmp bl, $69
1191   0A75 C6 80 0B      je _switch22_case3
1192   0A78 C1 75         cmp bl, $75
1193   0A7A C6 A4 0B      je _switch22_case4
1194   0A7D C1 78         cmp bl, $78
1195   0A7F C6 C8 0B      je _switch22_case5
1196   0A82 C1 63         cmp bl, $63
1197   0A84 C6 E6 0B      je _switch22_case6
1198   0A87 C1 73         cmp bl, $73
1199   0A89 C6 05 0C      je _switch22_case7
1200   0A8C 0A 24 0C      jmp _switch22_default
1201   0A8F 0A 30 0C      jmp _switch22_exit
1202   0A92             _switch22_case0:
1203   0A92             _switch22_case1:
1204   0A92             ;; format_p++; 
1205   0A92 FA FD FF      lea d, [bp + -3] ; $format_p
1206   0A95 2A            mov b, [d]
1207   0A96 D8            push b
1208   0A97 FD 77         inc b
1209   0A99 FA FD FF      lea d, [bp + -3] ; $format_p
1210   0A9C FD 43         mov [d], b
1211   0A9E E5            pop b
1212   0A9F             ;; if(*format_p == 'd' || *format_p == 'i') 
1213   0A9F             _if23_cond:
1214   0A9F FA FD FF      lea d, [bp + -3] ; $format_p
1215   0AA2 2A            mov b, [d]
1216   0AA3 74            mov d, b
1217   0AA4 32            mov bl, [d]
1218   0AA5 A7 00         mov bh, 0
1219   0AA7             ; START RELATIONAL
1220   0AA7 D7            push a
1221   0AA8 11            mov a, b
1222   0AA9 26 64 00      mov b, $64
1223   0AAC B0            cmp a, b
1224   0AAD FD 71         seq ; ==
1225   0AAF E4            pop a
1226   0AB0             ; END RELATIONAL
1227   0AB0 D7            push a
1228   0AB1 11            mov a, b
1229   0AB2 FA FD FF      lea d, [bp + -3] ; $format_p
1230   0AB5 2A            mov b, [d]
1231   0AB6 74            mov d, b
1232   0AB7 32            mov bl, [d]
1233   0AB8 A7 00         mov bh, 0
1234   0ABA             ; START RELATIONAL
1235   0ABA D7            push a
1236   0ABB 11            mov a, b
1237   0ABC 26 69 00      mov b, $69
1238   0ABF B0            cmp a, b
1239   0AC0 FD 71         seq ; ==
1240   0AC2 E4            pop a
1241   0AC3             ; END RELATIONAL
1242   0AC3 FD A8         sor a, b ; ||
1243   0AC5 E4            pop a
1244   0AC6 C0 00 00      cmp b, 0
1245   0AC9 C6 EE 0A      je _if23_else
1246   0ACC             _if23_true:
1247   0ACC             ;; print_signed_long(*(long *)p); 
1248   0ACC FA FF FF      lea d, [bp + -1] ; $p
1249   0ACF 2A            mov b, [d]
1250   0AD0 AB            snex b
1251   0AD1 FD 39         mov c, b
1252   0AD3 74            mov d, b
1253   0AD4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1254   0AD7 FD 39         mov c, b ; And place it into C
1255   0AD9 2A            mov b, [d] ; Lower Word in B
1256   0ADA FD 79         mov g, b
1257   0ADC 28            mov b, c
1258   0ADD FD AB         swp b
1259   0ADF D8            push b
1260   0AE0 FD 27         mov b, g
1261   0AE2 FD AB         swp b
1262   0AE4 D8            push b
1263   0AE5 07 45 11      call print_signed_long
1264   0AE8 51 04 00      add sp, 4
1265   0AEB 0A 6B 0B      jmp _if23_exit
1266   0AEE             _if23_else:
1267   0AEE             ;; if(*format_p == 'u') 
1268   0AEE             _if24_cond:
1269   0AEE FA FD FF      lea d, [bp + -3] ; $format_p
1270   0AF1 2A            mov b, [d]
1271   0AF2 74            mov d, b
1272   0AF3 32            mov bl, [d]
1273   0AF4 A7 00         mov bh, 0
1274   0AF6             ; START RELATIONAL
1275   0AF6 D7            push a
1276   0AF7 11            mov a, b
1277   0AF8 26 75 00      mov b, $75
1278   0AFB B0            cmp a, b
1279   0AFC FD 71         seq ; ==
1280   0AFE E4            pop a
1281   0AFF             ; END RELATIONAL
1282   0AFF C0 00 00      cmp b, 0
1283   0B02 C6 29 0B      je _if24_else
1284   0B05             _if24_true:
1285   0B05             ;; print_unsigned_long(*(unsigned long *)p); 
1286   0B05 FA FF FF      lea d, [bp + -1] ; $p
1287   0B08 2A            mov b, [d]
1288   0B09 A7 00         mov bh, 0
1289   0B0B 38 00 00      mov c, 0
1290   0B0E 74            mov d, b
1291   0B0F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1292   0B12 FD 39         mov c, b ; And place it into C
1293   0B14 2A            mov b, [d] ; Lower Word in B
1294   0B15 FD 79         mov g, b
1295   0B17 28            mov b, c
1296   0B18 FD AB         swp b
1297   0B1A D8            push b
1298   0B1B FD 27         mov b, g
1299   0B1D FD AB         swp b
1300   0B1F D8            push b
1301   0B20 07 85 14      call print_unsigned_long
1302   0B23 51 04 00      add sp, 4
1303   0B26 0A 6B 0B      jmp _if24_exit
1304   0B29             _if24_else:
1305   0B29             ;; if(*format_p == 'x') 
1306   0B29             _if25_cond:
1307   0B29 FA FD FF      lea d, [bp + -3] ; $format_p
1308   0B2C 2A            mov b, [d]
1309   0B2D 74            mov d, b
1310   0B2E 32            mov bl, [d]
1311   0B2F A7 00         mov bh, 0
1312   0B31             ; START RELATIONAL
1313   0B31 D7            push a
1314   0B32 11            mov a, b
1315   0B33 26 78 00      mov b, $78
1316   0B36 B0            cmp a, b
1317   0B37 FD 71         seq ; ==
1318   0B39 E4            pop a
1319   0B3A             ; END RELATIONAL
1320   0B3A C0 00 00      cmp b, 0
1321   0B3D C6 5F 0B      je _if25_else
1322   0B40             _if25_true:
1323   0B40             ;; printx32(*(long int *)p); 
1324   0B40 FA FF FF      lea d, [bp + -1] ; $p
1325   0B43 2A            mov b, [d]
1326   0B44 74            mov d, b
1327   0B45 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1328   0B48 FD 39         mov c, b ; And place it into C
1329   0B4A 2A            mov b, [d] ; Lower Word in B
1330   0B4B FD 79         mov g, b
1331   0B4D 28            mov b, c
1332   0B4E FD AB         swp b
1333   0B50 D8            push b
1334   0B51 FD 27         mov b, g
1335   0B53 FD AB         swp b
1336   0B55 D8            push b
1337   0B56 07 BA 0E      call printx32
1338   0B59 51 04 00      add sp, 4
1339   0B5C 0A 6B 0B      jmp _if25_exit
1340   0B5F             _if25_else:
1341   0B5F             ;; err("Unexpected format in printf."); 
1342   0B5F 26 21 28      mov b, _s1 ; "Unexpected format in printf."
1343   0B62 FD AB         swp b
1344   0B64 D8            push b
1345   0B65 07 A8 0E      call err
1346   0B68 51 02 00      add sp, 2
1347   0B6B             _if25_exit:
1348   0B6B             _if24_exit:
1349   0B6B             _if23_exit:
1350   0B6B             ;; p = p + 4; 
1351   0B6B FA FF FF      lea d, [bp + -1] ; $p
1352   0B6E DA            push d
1353   0B6F FA FF FF      lea d, [bp + -1] ; $p
1354   0B72 2A            mov b, [d]
1355   0B73             ; START TERMS
1356   0B73 D7            push a
1357   0B74 11            mov a, b
1358   0B75 26 04 00      mov b, $4
1359   0B78 56            add b, a
1360   0B79 E4            pop a
1361   0B7A             ; END TERMS
1362   0B7A E7            pop d
1363   0B7B FD 43         mov [d], b
1364   0B7D             ;; break; 
1365   0B7D 0A 30 0C      jmp _switch22_exit ; case break
1366   0B80             _switch22_case2:
1367   0B80             _switch22_case3:
1368   0B80             ;; print_signed(*(int*)p); 
1369   0B80 FA FF FF      lea d, [bp + -1] ; $p
1370   0B83 2A            mov b, [d]
1371   0B84 74            mov d, b
1372   0B85 2A            mov b, [d]
1373   0B86 FD AB         swp b
1374   0B88 D8            push b
1375   0B89 07 4E 10      call print_signed
1376   0B8C 51 02 00      add sp, 2
1377   0B8F             ;; p = p + 2; 
1378   0B8F FA FF FF      lea d, [bp + -1] ; $p
1379   0B92 DA            push d
1380   0B93 FA FF FF      lea d, [bp + -1] ; $p
1381   0B96 2A            mov b, [d]
1382   0B97             ; START TERMS
1383   0B97 D7            push a
1384   0B98 11            mov a, b
1385   0B99 26 02 00      mov b, $2
1386   0B9C 56            add b, a
1387   0B9D E4            pop a
1388   0B9E             ; END TERMS
1389   0B9E E7            pop d
1390   0B9F FD 43         mov [d], b
1391   0BA1             ;; break; 
1392   0BA1 0A 30 0C      jmp _switch22_exit ; case break
1393   0BA4             _switch22_case4:
1394   0BA4             ;; print_unsigned(*(unsigned int*)p); 
1395   0BA4 FA FF FF      lea d, [bp + -1] ; $p
1396   0BA7 2A            mov b, [d]
1397   0BA8 74            mov d, b
1398   0BA9 2A            mov b, [d]
1399   0BAA FD AB         swp b
1400   0BAC D8            push b
1401   0BAD 07 80 16      call print_unsigned
1402   0BB0 51 02 00      add sp, 2
1403   0BB3             ;; p = p + 2; 
1404   0BB3 FA FF FF      lea d, [bp + -1] ; $p
1405   0BB6 DA            push d
1406   0BB7 FA FF FF      lea d, [bp + -1] ; $p
1407   0BBA 2A            mov b, [d]
1408   0BBB             ; START TERMS
1409   0BBB D7            push a
1410   0BBC 11            mov a, b
1411   0BBD 26 02 00      mov b, $2
1412   0BC0 56            add b, a
1413   0BC1 E4            pop a
1414   0BC2             ; END TERMS
1415   0BC2 E7            pop d
1416   0BC3 FD 43         mov [d], b
1417   0BC5             ;; break; 
1418   0BC5 0A 30 0C      jmp _switch22_exit ; case break
1419   0BC8             _switch22_case5:
1420   0BC8             
1421   0BC8             ; --- BEGIN INLINE ASM BLOCK
1422   0BC8 FA FF FF      lea d, [bp + -1] ; $p
1423   0BCB FD 2A         mov d, [d]
1424   0BCD 2A            mov b, [d]
1425   0BCE 07 86 1A      call print_u16x
1426   0BD1             ; --- END INLINE ASM BLOCK
1427   0BD1             
1428   0BD1             ;; p = p + 2; 
1429   0BD1 FA FF FF      lea d, [bp + -1] ; $p
1430   0BD4 DA            push d
1431   0BD5 FA FF FF      lea d, [bp + -1] ; $p
1432   0BD8 2A            mov b, [d]
1433   0BD9             ; START TERMS
1434   0BD9 D7            push a
1435   0BDA 11            mov a, b
1436   0BDB 26 02 00      mov b, $2
1437   0BDE 56            add b, a
1438   0BDF E4            pop a
1439   0BE0             ; END TERMS
1440   0BE0 E7            pop d
1441   0BE1 FD 43         mov [d], b
1442   0BE3             ;; break; 
1443   0BE3 0A 30 0C      jmp _switch22_exit ; case break
1444   0BE6             _switch22_case6:
1445   0BE6             
1446   0BE6             ; --- BEGIN INLINE ASM BLOCK
1447   0BE6 FA FF FF      lea d, [bp + -1] ; $p
1448   0BE9 FD 2A         mov d, [d]
1449   0BEB 1E            mov al, [d]
1450   0BEC 23            mov ah, al
1451   0BED 07 E4 18      call _putchar
1452   0BF0             ; --- END INLINE ASM BLOCK
1453   0BF0             
1454   0BF0             ;; p = p + 2; 
1455   0BF0 FA FF FF      lea d, [bp + -1] ; $p
1456   0BF3 DA            push d
1457   0BF4 FA FF FF      lea d, [bp + -1] ; $p
1458   0BF7 2A            mov b, [d]
1459   0BF8             ; START TERMS
1460   0BF8 D7            push a
1461   0BF9 11            mov a, b
1462   0BFA 26 02 00      mov b, $2
1463   0BFD 56            add b, a
1464   0BFE E4            pop a
1465   0BFF             ; END TERMS
1466   0BFF E7            pop d
1467   0C00 FD 43         mov [d], b
1468   0C02             ;; break; 
1469   0C02 0A 30 0C      jmp _switch22_exit ; case break
1470   0C05             _switch22_case7:
1471   0C05             
1472   0C05             ; --- BEGIN INLINE ASM BLOCK
1473   0C05 FA FF FF      lea d, [bp + -1] ; $p
1474   0C08 FD 2A         mov d, [d]
1475   0C0A FD 2A         mov d, [d]
1476   0C0C 07 2E 1A      call _puts
1477   0C0F             ; --- END INLINE ASM BLOCK
1478   0C0F             
1479   0C0F             ;; p = p + 2; 
1480   0C0F FA FF FF      lea d, [bp + -1] ; $p
1481   0C12 DA            push d
1482   0C13 FA FF FF      lea d, [bp + -1] ; $p
1483   0C16 2A            mov b, [d]
1484   0C17             ; START TERMS
1485   0C17 D7            push a
1486   0C18 11            mov a, b
1487   0C19 26 02 00      mov b, $2
1488   0C1C 56            add b, a
1489   0C1D E4            pop a
1490   0C1E             ; END TERMS
1491   0C1E E7            pop d
1492   0C1F FD 43         mov [d], b
1493   0C21             ;; break; 
1494   0C21 0A 30 0C      jmp _switch22_exit ; case break
1495   0C24             _switch22_default:
1496   0C24             ;; print("Error: Unknown argument type.\n"); 
1497   0C24 26 3E 28      mov b, _s2 ; "Error: Unknown argument type.\n"
1498   0C27 FD AB         swp b
1499   0C29 D8            push b
1500   0C2A 07 9B 17      call print
1501   0C2D 51 02 00      add sp, 2
1502   0C30             _switch22_exit:
1503   0C30             ;; format_p++; 
1504   0C30 FA FD FF      lea d, [bp + -3] ; $format_p
1505   0C33 2A            mov b, [d]
1506   0C34 D8            push b
1507   0C35 FD 77         inc b
1508   0C37 FA FD FF      lea d, [bp + -3] ; $format_p
1509   0C3A FD 43         mov [d], b
1510   0C3C E5            pop b
1511   0C3D 0A 5C 0C      jmp _if21_exit
1512   0C40             _if21_else:
1513   0C40             ;; putchar(*format_p); 
1514   0C40 FA FD FF      lea d, [bp + -3] ; $format_p
1515   0C43 2A            mov b, [d]
1516   0C44 74            mov d, b
1517   0C45 32            mov bl, [d]
1518   0C46 A7 00         mov bh, 0
1519   0C48 DD            push bl
1520   0C49 07 53 17      call putchar
1521   0C4C 51 01 00      add sp, 1
1522   0C4F             ;; format_p++; 
1523   0C4F FA FD FF      lea d, [bp + -3] ; $format_p
1524   0C52 2A            mov b, [d]
1525   0C53 D8            push b
1526   0C54 FD 77         inc b
1527   0C56 FA FD FF      lea d, [bp + -3] ; $format_p
1528   0C59 FD 43         mov [d], b
1529   0C5B E5            pop b
1530   0C5C             _if21_exit:
1531   0C5C             _if20_exit:
1532   0C5C             _for19_update:
1533   0C5C 0A 1F 0A      jmp _for19_cond
1534   0C5F             _for19_exit:
1535   0C5F F9            leave
1536   0C60 09            ret
1537   0C61             
1538   0C61             scanf:
1539   0C61 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1540   0C64             ;; char *p, *format_p; 
1541   0C64 52 02 00      sub sp, 2 ; p
1542   0C67 52 02 00      sub sp, 2 ; format_p
1543   0C6A             ;; char c; 
1544   0C6A 52 01 00      sub sp, 1 ; c
1545   0C6D             ;; int i; 
1546   0C6D 52 02 00      sub sp, 2 ; i
1547   0C70             ;; char input_string[  512                    ]; 
1548   0C70 52 00 02      sub sp, 512 ; input_string
1549   0C73             ;; format_p = format; 
1550   0C73 FA FD FF      lea d, [bp + -3] ; $format_p
1551   0C76 DA            push d
1552   0C77 FA 05 00      lea d, [bp + 5] ; $format
1553   0C7A 2A            mov b, [d]
1554   0C7B E7            pop d
1555   0C7C FD 43         mov [d], b
1556   0C7E             ;; p = &format + 2; 
1557   0C7E FA FF FF      lea d, [bp + -1] ; $p
1558   0C81 DA            push d
1559   0C82 FA 05 00      lea d, [bp + 5] ; $format
1560   0C85 2D            mov b, d
1561   0C86             ; START TERMS
1562   0C86 D7            push a
1563   0C87 11            mov a, b
1564   0C88 26 02 00      mov b, $2
1565   0C8B 56            add b, a
1566   0C8C E4            pop a
1567   0C8D             ; END TERMS
1568   0C8D E7            pop d
1569   0C8E FD 43         mov [d], b
1570   0C90             ;; for(;;){ 
1571   0C90             _for26_init:
1572   0C90             _for26_cond:
1573   0C90             _for26_block:
1574   0C90             ;; if(!*format_p) break; 
1575   0C90             _if27_cond:
1576   0C90 FA FD FF      lea d, [bp + -3] ; $format_p
1577   0C93 2A            mov b, [d]
1578   0C94 74            mov d, b
1579   0C95 32            mov bl, [d]
1580   0C96 A7 00         mov bh, 0
1581   0C98 C0 00 00      cmp b, 0
1582   0C9B FD 71         seq ; !
1583   0C9D C0 00 00      cmp b, 0
1584   0CA0 C6 A9 0C      je _if27_else
1585   0CA3             _if27_true:
1586   0CA3             ;; break; 
1587   0CA3 0A A6 0E      jmp _for26_exit ; for break
1588   0CA6 0A A3 0E      jmp _if27_exit
1589   0CA9             _if27_else:
1590   0CA9             ;; if(*format_p == '%'){ 
1591   0CA9             _if28_cond:
1592   0CA9 FA FD FF      lea d, [bp + -3] ; $format_p
1593   0CAC 2A            mov b, [d]
1594   0CAD 74            mov d, b
1595   0CAE 32            mov bl, [d]
1596   0CAF A7 00         mov bh, 0
1597   0CB1             ; START RELATIONAL
1598   0CB1 D7            push a
1599   0CB2 11            mov a, b
1600   0CB3 26 25 00      mov b, $25
1601   0CB6 B0            cmp a, b
1602   0CB7 FD 71         seq ; ==
1603   0CB9 E4            pop a
1604   0CBA             ; END RELATIONAL
1605   0CBA C0 00 00      cmp b, 0
1606   0CBD C6 87 0E      je _if28_else
1607   0CC0             _if28_true:
1608   0CC0             ;; format_p++; 
1609   0CC0 FA FD FF      lea d, [bp + -3] ; $format_p
1610   0CC3 2A            mov b, [d]
1611   0CC4 D8            push b
1612   0CC5 FD 77         inc b
1613   0CC7 FA FD FF      lea d, [bp + -3] ; $format_p
1614   0CCA FD 43         mov [d], b
1615   0CCC E5            pop b
1616   0CCD             ;; switch(*format_p){ 
1617   0CCD             _switch29_expr:
1618   0CCD FA FD FF      lea d, [bp + -3] ; $format_p
1619   0CD0 2A            mov b, [d]
1620   0CD1 74            mov d, b
1621   0CD2 32            mov bl, [d]
1622   0CD3 A7 00         mov bh, 0
1623   0CD5             _switch29_comparisons:
1624   0CD5 C1 6C         cmp bl, $6c
1625   0CD7 C6 03 0D      je _switch29_case0
1626   0CDA C1 4C         cmp bl, $4c
1627   0CDC C6 03 0D      je _switch29_case1
1628   0CDF C1 64         cmp bl, $64
1629   0CE1 C6 95 0D      je _switch29_case2
1630   0CE4 C1 69         cmp bl, $69
1631   0CE6 C6 95 0D      je _switch29_case3
1632   0CE9 C1 75         cmp bl, $75
1633   0CEB C6 C2 0D      je _switch29_case4
1634   0CEE C1 78         cmp bl, $78
1635   0CF0 C6 EF 0D      je _switch29_case5
1636   0CF3 C1 63         cmp bl, $63
1637   0CF5 C6 04 0E      je _switch29_case6
1638   0CF8 C1 73         cmp bl, $73
1639   0CFA C6 33 0E      je _switch29_case7
1640   0CFD 0A 6B 0E      jmp _switch29_default
1641   0D00 0A 77 0E      jmp _switch29_exit
1642   0D03             _switch29_case0:
1643   0D03             _switch29_case1:
1644   0D03             ;; format_p++; 
1645   0D03 FA FD FF      lea d, [bp + -3] ; $format_p
1646   0D06 2A            mov b, [d]
1647   0D07 D8            push b
1648   0D08 FD 77         inc b
1649   0D0A FA FD FF      lea d, [bp + -3] ; $format_p
1650   0D0D FD 43         mov [d], b
1651   0D0F E5            pop b
1652   0D10             ;; if(*format_p == 'd' || *format_p == 'i'); 
1653   0D10             _if30_cond:
1654   0D10 FA FD FF      lea d, [bp + -3] ; $format_p
1655   0D13 2A            mov b, [d]
1656   0D14 74            mov d, b
1657   0D15 32            mov bl, [d]
1658   0D16 A7 00         mov bh, 0
1659   0D18             ; START RELATIONAL
1660   0D18 D7            push a
1661   0D19 11            mov a, b
1662   0D1A 26 64 00      mov b, $64
1663   0D1D B0            cmp a, b
1664   0D1E FD 71         seq ; ==
1665   0D20 E4            pop a
1666   0D21             ; END RELATIONAL
1667   0D21 D7            push a
1668   0D22 11            mov a, b
1669   0D23 FA FD FF      lea d, [bp + -3] ; $format_p
1670   0D26 2A            mov b, [d]
1671   0D27 74            mov d, b
1672   0D28 32            mov bl, [d]
1673   0D29 A7 00         mov bh, 0
1674   0D2B             ; START RELATIONAL
1675   0D2B D7            push a
1676   0D2C 11            mov a, b
1677   0D2D 26 69 00      mov b, $69
1678   0D30 B0            cmp a, b
1679   0D31 FD 71         seq ; ==
1680   0D33 E4            pop a
1681   0D34             ; END RELATIONAL
1682   0D34 FD A8         sor a, b ; ||
1683   0D36 E4            pop a
1684   0D37 C0 00 00      cmp b, 0
1685   0D3A C6 40 0D      je _if30_else
1686   0D3D             _if30_true:
1687   0D3D             ;; ; 
1688   0D3D 0A 80 0D      jmp _if30_exit
1689   0D40             _if30_else:
1690   0D40             ;; if(*format_p == 'u'); 
1691   0D40             _if31_cond:
1692   0D40 FA FD FF      lea d, [bp + -3] ; $format_p
1693   0D43 2A            mov b, [d]
1694   0D44 74            mov d, b
1695   0D45 32            mov bl, [d]
1696   0D46 A7 00         mov bh, 0
1697   0D48             ; START RELATIONAL
1698   0D48 D7            push a
1699   0D49 11            mov a, b
1700   0D4A 26 75 00      mov b, $75
1701   0D4D B0            cmp a, b
1702   0D4E FD 71         seq ; ==
1703   0D50 E4            pop a
1704   0D51             ; END RELATIONAL
1705   0D51 C0 00 00      cmp b, 0
1706   0D54 C6 5A 0D      je _if31_else
1707   0D57             _if31_true:
1708   0D57             ;; ; 
1709   0D57 0A 80 0D      jmp _if31_exit
1710   0D5A             _if31_else:
1711   0D5A             ;; if(*format_p == 'x'); 
1712   0D5A             _if32_cond:
1713   0D5A FA FD FF      lea d, [bp + -3] ; $format_p
1714   0D5D 2A            mov b, [d]
1715   0D5E 74            mov d, b
1716   0D5F 32            mov bl, [d]
1717   0D60 A7 00         mov bh, 0
1718   0D62             ; START RELATIONAL
1719   0D62 D7            push a
1720   0D63 11            mov a, b
1721   0D64 26 78 00      mov b, $78
1722   0D67 B0            cmp a, b
1723   0D68 FD 71         seq ; ==
1724   0D6A E4            pop a
1725   0D6B             ; END RELATIONAL
1726   0D6B C0 00 00      cmp b, 0
1727   0D6E C6 74 0D      je _if32_else
1728   0D71             _if32_true:
1729   0D71             ;; ; 
1730   0D71 0A 80 0D      jmp _if32_exit
1731   0D74             _if32_else:
1732   0D74             ;; err("Unexpected format in printf."); 
1733   0D74 26 21 28      mov b, _s1 ; "Unexpected format in printf."
1734   0D77 FD AB         swp b
1735   0D79 D8            push b
1736   0D7A 07 A8 0E      call err
1737   0D7D 51 02 00      add sp, 2
1738   0D80             _if32_exit:
1739   0D80             _if31_exit:
1740   0D80             _if30_exit:
1741   0D80             ;; p = p + 4; 
1742   0D80 FA FF FF      lea d, [bp + -1] ; $p
1743   0D83 DA            push d
1744   0D84 FA FF FF      lea d, [bp + -1] ; $p
1745   0D87 2A            mov b, [d]
1746   0D88             ; START TERMS
1747   0D88 D7            push a
1748   0D89 11            mov a, b
1749   0D8A 26 04 00      mov b, $4
1750   0D8D 56            add b, a
1751   0D8E E4            pop a
1752   0D8F             ; END TERMS
1753   0D8F E7            pop d
1754   0D90 FD 43         mov [d], b
1755   0D92             ;; break; 
1756   0D92 0A 77 0E      jmp _switch29_exit ; case break
1757   0D95             _switch29_case2:
1758   0D95             _switch29_case3:
1759   0D95             ;; i = scann(); 
1760   0D95 FA FA FF      lea d, [bp + -6] ; $i
1761   0D98 DA            push d
1762   0D99 07 76 17      call scann
1763   0D9C E7            pop d
1764   0D9D FD 43         mov [d], b
1765   0D9F             ;; **(int **)p = i; 
1766   0D9F FA FF FF      lea d, [bp + -1] ; $p
1767   0DA2 2A            mov b, [d]
1768   0DA3 74            mov d, b
1769   0DA4 2A            mov b, [d]
1770   0DA5 D8            push b
1771   0DA6 FA FA FF      lea d, [bp + -6] ; $i
1772   0DA9 2A            mov b, [d]
1773   0DAA E7            pop d
1774   0DAB FD 43         mov [d], b
1775   0DAD             ;; p = p + 2; 
1776   0DAD FA FF FF      lea d, [bp + -1] ; $p
1777   0DB0 DA            push d
1778   0DB1 FA FF FF      lea d, [bp + -1] ; $p
1779   0DB4 2A            mov b, [d]
1780   0DB5             ; START TERMS
1781   0DB5 D7            push a
1782   0DB6 11            mov a, b
1783   0DB7 26 02 00      mov b, $2
1784   0DBA 56            add b, a
1785   0DBB E4            pop a
1786   0DBC             ; END TERMS
1787   0DBC E7            pop d
1788   0DBD FD 43         mov [d], b
1789   0DBF             ;; break; 
1790   0DBF 0A 77 0E      jmp _switch29_exit ; case break
1791   0DC2             _switch29_case4:
1792   0DC2             ;; i = scann(); 
1793   0DC2 FA FA FF      lea d, [bp + -6] ; $i
1794   0DC5 DA            push d
1795   0DC6 07 76 17      call scann
1796   0DC9 E7            pop d
1797   0DCA FD 43         mov [d], b
1798   0DCC             ;; **(int **)p = i; 
1799   0DCC FA FF FF      lea d, [bp + -1] ; $p
1800   0DCF 2A            mov b, [d]
1801   0DD0 74            mov d, b
1802   0DD1 2A            mov b, [d]
1803   0DD2 D8            push b
1804   0DD3 FA FA FF      lea d, [bp + -6] ; $i
1805   0DD6 2A            mov b, [d]
1806   0DD7 E7            pop d
1807   0DD8 FD 43         mov [d], b
1808   0DDA             ;; p = p + 2; 
1809   0DDA FA FF FF      lea d, [bp + -1] ; $p
1810   0DDD DA            push d
1811   0DDE FA FF FF      lea d, [bp + -1] ; $p
1812   0DE1 2A            mov b, [d]
1813   0DE2             ; START TERMS
1814   0DE2 D7            push a
1815   0DE3 11            mov a, b
1816   0DE4 26 02 00      mov b, $2
1817   0DE7 56            add b, a
1818   0DE8 E4            pop a
1819   0DE9             ; END TERMS
1820   0DE9 E7            pop d
1821   0DEA FD 43         mov [d], b
1822   0DEC             ;; break; 
1823   0DEC 0A 77 0E      jmp _switch29_exit ; case break
1824   0DEF             _switch29_case5:
1825   0DEF             ;; p = p + 2; 
1826   0DEF FA FF FF      lea d, [bp + -1] ; $p
1827   0DF2 DA            push d
1828   0DF3 FA FF FF      lea d, [bp + -1] ; $p
1829   0DF6 2A            mov b, [d]
1830   0DF7             ; START TERMS
1831   0DF7 D7            push a
1832   0DF8 11            mov a, b
1833   0DF9 26 02 00      mov b, $2
1834   0DFC 56            add b, a
1835   0DFD E4            pop a
1836   0DFE             ; END TERMS
1837   0DFE E7            pop d
1838   0DFF FD 43         mov [d], b
1839   0E01             ;; break; 
1840   0E01 0A 77 0E      jmp _switch29_exit ; case break
1841   0E04             _switch29_case6:
1842   0E04             ;; c = getchar(); 
1843   0E04 FA FC FF      lea d, [bp + -4] ; $c
1844   0E07 DA            push d
1845   0E08 07 60 17      call getchar
1846   0E0B E7            pop d
1847   0E0C FD 3E         mov [d], bl
1848   0E0E             ;; **(char **)p = c; 
1849   0E0E FA FF FF      lea d, [bp + -1] ; $p
1850   0E11 2A            mov b, [d]
1851   0E12 74            mov d, b
1852   0E13 2A            mov b, [d]
1853   0E14 D8            push b
1854   0E15 FA FC FF      lea d, [bp + -4] ; $c
1855   0E18 32            mov bl, [d]
1856   0E19 A7 00         mov bh, 0
1857   0E1B E7            pop d
1858   0E1C FD 43         mov [d], b
1859   0E1E             ;; p = p + 2; 
1860   0E1E FA FF FF      lea d, [bp + -1] ; $p
1861   0E21 DA            push d
1862   0E22 FA FF FF      lea d, [bp + -1] ; $p
1863   0E25 2A            mov b, [d]
1864   0E26             ; START TERMS
1865   0E26 D7            push a
1866   0E27 11            mov a, b
1867   0E28 26 02 00      mov b, $2
1868   0E2B 56            add b, a
1869   0E2C E4            pop a
1870   0E2D             ; END TERMS
1871   0E2D E7            pop d
1872   0E2E FD 43         mov [d], b
1873   0E30             ;; break; 
1874   0E30 0A 77 0E      jmp _switch29_exit ; case break
1875   0E33             _switch29_case7:
1876   0E33             ;; gets(input_string); 
1877   0E33 FA FA FD      lea d, [bp + -518] ; $input_string
1878   0E36 2D            mov b, d
1879   0E37 FD AB         swp b
1880   0E39 D8            push b
1881   0E3A 07 34 10      call gets
1882   0E3D 51 02 00      add sp, 2
1883   0E40             ;; strcpy(*(char **)p, input_string); 
1884   0E40 FA FA FD      lea d, [bp + -518] ; $input_string
1885   0E43 2D            mov b, d
1886   0E44 FD AB         swp b
1887   0E46 D8            push b
1888   0E47 FA FF FF      lea d, [bp + -1] ; $p
1889   0E4A 2A            mov b, [d]
1890   0E4B 74            mov d, b
1891   0E4C 2A            mov b, [d]
1892   0E4D FD AB         swp b
1893   0E4F D8            push b
1894   0E50 07 55 06      call strcpy
1895   0E53 51 04 00      add sp, 4
1896   0E56             ;; p = p + 2; 
1897   0E56 FA FF FF      lea d, [bp + -1] ; $p
1898   0E59 DA            push d
1899   0E5A FA FF FF      lea d, [bp + -1] ; $p
1900   0E5D 2A            mov b, [d]
1901   0E5E             ; START TERMS
1902   0E5E D7            push a
1903   0E5F 11            mov a, b
1904   0E60 26 02 00      mov b, $2
1905   0E63 56            add b, a
1906   0E64 E4            pop a
1907   0E65             ; END TERMS
1908   0E65 E7            pop d
1909   0E66 FD 43         mov [d], b
1910   0E68             ;; break; 
1911   0E68 0A 77 0E      jmp _switch29_exit ; case break
1912   0E6B             _switch29_default:
1913   0E6B             ;; print("Error: Unknown argument type.\n"); 
1914   0E6B 26 3E 28      mov b, _s2 ; "Error: Unknown argument type.\n"
1915   0E6E FD AB         swp b
1916   0E70 D8            push b
1917   0E71 07 9B 17      call print
1918   0E74 51 02 00      add sp, 2
1919   0E77             _switch29_exit:
1920   0E77             ;; format_p++; 
1921   0E77 FA FD FF      lea d, [bp + -3] ; $format_p
1922   0E7A 2A            mov b, [d]
1923   0E7B D8            push b
1924   0E7C FD 77         inc b
1925   0E7E FA FD FF      lea d, [bp + -3] ; $format_p
1926   0E81 FD 43         mov [d], b
1927   0E83 E5            pop b
1928   0E84 0A A3 0E      jmp _if28_exit
1929   0E87             _if28_else:
1930   0E87             ;; putchar(*format_p); 
1931   0E87 FA FD FF      lea d, [bp + -3] ; $format_p
1932   0E8A 2A            mov b, [d]
1933   0E8B 74            mov d, b
1934   0E8C 32            mov bl, [d]
1935   0E8D A7 00         mov bh, 0
1936   0E8F DD            push bl
1937   0E90 07 53 17      call putchar
1938   0E93 51 01 00      add sp, 1
1939   0E96             ;; format_p++; 
1940   0E96 FA FD FF      lea d, [bp + -3] ; $format_p
1941   0E99 2A            mov b, [d]
1942   0E9A D8            push b
1943   0E9B FD 77         inc b
1944   0E9D FA FD FF      lea d, [bp + -3] ; $format_p
1945   0EA0 FD 43         mov [d], b
1946   0EA2 E5            pop b
1947   0EA3             _if28_exit:
1948   0EA3             _if27_exit:
1949   0EA3             _for26_update:
1950   0EA3 0A 90 0C      jmp _for26_cond
1951   0EA6             _for26_exit:
1952   0EA6 F9            leave
1953   0EA7 09            ret
1954   0EA8             
1955   0EA8             err:
1956   0EA8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1957   0EAB             ;; print(e); 
1958   0EAB FA 05 00      lea d, [bp + 5] ; $e
1959   0EAE 2A            mov b, [d]
1960   0EAF FD AB         swp b
1961   0EB1 D8            push b
1962   0EB2 07 9B 17      call print
1963   0EB5 51 02 00      add sp, 2
1964   0EB8 F9            leave
1965   0EB9 09            ret
1966   0EBA             
1967   0EBA             printx32:
1968   0EBA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1969   0EBD             
1970   0EBD             ; --- BEGIN INLINE ASM BLOCK
1971   0EBD FA 05 00      lea d, [bp + 5] ; $hex
1972   0EC0 2B 02 00      mov b, [d+2]
1973   0EC3 07 86 1A      call print_u16x
1974   0EC6 2A            mov b, [d]
1975   0EC7 07 86 1A      call print_u16x
1976   0ECA             ; --- END INLINE ASM BLOCK
1977   0ECA             
1978   0ECA F9            leave
1979   0ECB 09            ret
1980   0ECC             
1981   0ECC             printx16:
1982   0ECC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1983   0ECF             
1984   0ECF             ; --- BEGIN INLINE ASM BLOCK
1985   0ECF FA 05 00      lea d, [bp + 5] ; $hex
1986   0ED2 2A            mov b, [d]
1987   0ED3 07 86 1A      call print_u16x
1988   0ED6             ; --- END INLINE ASM BLOCK
1989   0ED6             
1990   0ED6 F9            leave
1991   0ED7 09            ret
1992   0ED8             
1993   0ED8             printx8:
1994   0ED8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1995   0EDB             
1996   0EDB             ; --- BEGIN INLINE ASM BLOCK
1997   0EDB FA 05 00      lea d, [bp + 5] ; $hex
1998   0EDE 32            mov bl, [d]
1999   0EDF 07 CA 1A      call print_u8x
2000   0EE2             ; --- END INLINE ASM BLOCK
2001   0EE2             
2002   0EE2 F9            leave
2003   0EE3 09            ret
2004   0EE4             
2005   0EE4             hex_str_to_int:
2006   0EE4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2007   0EE7             ;; int value = 0; 
2008   0EE7 52 02 00      sub sp, 2 ; value
2009   0EEA             ; --- START LOCAL VAR INITIALIZATION
2010   0EEA FA FF FF      lea d, [bp + -1] ; $value
2011   0EED DA            push d
2012   0EEE 26 00 00      mov b, $0
2013   0EF1 E7            pop d
2014   0EF2 FD 43         mov [d], b
2015   0EF4             ; --- END LOCAL VAR INITIALIZATION
2016   0EF4             ;; int i; 
2017   0EF4 52 02 00      sub sp, 2 ; i
2018   0EF7             ;; char hex_char; 
2019   0EF7 52 01 00      sub sp, 1 ; hex_char
2020   0EFA             ;; int len; 
2021   0EFA 52 02 00      sub sp, 2 ; len
2022   0EFD             ;; len = strlen(hex_string); 
2023   0EFD FA FA FF      lea d, [bp + -6] ; $len
2024   0F00 DA            push d
2025   0F01 FA 05 00      lea d, [bp + 5] ; $hex_string
2026   0F04 2A            mov b, [d]
2027   0F05 FD AB         swp b
2028   0F07 D8            push b
2029   0F08 07 CF 07      call strlen
2030   0F0B 51 02 00      add sp, 2
2031   0F0E E7            pop d
2032   0F0F FD 43         mov [d], b
2033   0F11             ;; for (i = 0; i < len; i++) { 
2034   0F11             _for33_init:
2035   0F11 FA FD FF      lea d, [bp + -3] ; $i
2036   0F14 DA            push d
2037   0F15 26 00 00      mov b, $0
2038   0F18 E7            pop d
2039   0F19 FD 43         mov [d], b
2040   0F1B             _for33_cond:
2041   0F1B FA FD FF      lea d, [bp + -3] ; $i
2042   0F1E 2A            mov b, [d]
2043   0F1F             ; START RELATIONAL
2044   0F1F D7            push a
2045   0F20 11            mov a, b
2046   0F21 FA FA FF      lea d, [bp + -6] ; $len
2047   0F24 2A            mov b, [d]
2048   0F25 B0            cmp a, b
2049   0F26 FD 73         slt ; < (signed)
2050   0F28 E4            pop a
2051   0F29             ; END RELATIONAL
2052   0F29 C0 00 00      cmp b, 0
2053   0F2C C6 2E 10      je _for33_exit
2054   0F2F             _for33_block:
2055   0F2F             ;; hex_char = hex_string[i]; 
2056   0F2F FA FC FF      lea d, [bp + -4] ; $hex_char
2057   0F32 DA            push d
2058   0F33 FA 05 00      lea d, [bp + 5] ; $hex_string
2059   0F36 FD 2A         mov d, [d]
2060   0F38 D7            push a
2061   0F39 DA            push d
2062   0F3A FA FD FF      lea d, [bp + -3] ; $i
2063   0F3D 2A            mov b, [d]
2064   0F3E E7            pop d
2065   0F3F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2066   0F43 E4            pop a
2067   0F44 32            mov bl, [d]
2068   0F45 A7 00         mov bh, 0
2069   0F47 E7            pop d
2070   0F48 FD 3E         mov [d], bl
2071   0F4A             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2072   0F4A             _if34_cond:
2073   0F4A FA FC FF      lea d, [bp + -4] ; $hex_char
2074   0F4D 32            mov bl, [d]
2075   0F4E A7 00         mov bh, 0
2076   0F50             ; START RELATIONAL
2077   0F50 D7            push a
2078   0F51 11            mov a, b
2079   0F52 26 61 00      mov b, $61
2080   0F55 B0            cmp a, b
2081   0F56 FD 80         sge ; >=
2082   0F58 E4            pop a
2083   0F59             ; END RELATIONAL
2084   0F59 D7            push a
2085   0F5A 11            mov a, b
2086   0F5B FA FC FF      lea d, [bp + -4] ; $hex_char
2087   0F5E 32            mov bl, [d]
2088   0F5F A7 00         mov bh, 0
2089   0F61             ; START RELATIONAL
2090   0F61 D7            push a
2091   0F62 11            mov a, b
2092   0F63 26 66 00      mov b, $66
2093   0F66 B0            cmp a, b
2094   0F67 FD 73         slt ; <= (signed)
2095   0F69 E4            pop a
2096   0F6A             ; END RELATIONAL
2097   0F6A FD A7         sand a, b
2098   0F6C E4            pop a
2099   0F6D C0 00 00      cmp b, 0
2100   0F70 C6 A1 0F      je _if34_else
2101   0F73             _if34_true:
2102   0F73             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2103   0F73 FA FF FF      lea d, [bp + -1] ; $value
2104   0F76 DA            push d
2105   0F77 FA FF FF      lea d, [bp + -1] ; $value
2106   0F7A 2A            mov b, [d]
2107   0F7B             ; START FACTORS
2108   0F7B D7            push a
2109   0F7C 11            mov a, b
2110   0F7D 26 10 00      mov b, $10
2111   0F80 AC            mul a, b ; *
2112   0F81 11            mov a, b
2113   0F82 27            mov b, a
2114   0F83 E4            pop a
2115   0F84             ; END FACTORS
2116   0F84             ; START TERMS
2117   0F84 D7            push a
2118   0F85 11            mov a, b
2119   0F86 FA FC FF      lea d, [bp + -4] ; $hex_char
2120   0F89 32            mov bl, [d]
2121   0F8A A7 00         mov bh, 0
2122   0F8C             ; START TERMS
2123   0F8C D7            push a
2124   0F8D 11            mov a, b
2125   0F8E 26 61 00      mov b, $61
2126   0F91 60            sub a, b
2127   0F92 27            mov b, a
2128   0F93 11            mov a, b
2129   0F94 26 0A 00      mov b, $a
2130   0F97 56            add b, a
2131   0F98 E4            pop a
2132   0F99             ; END TERMS
2133   0F99 56            add b, a
2134   0F9A E4            pop a
2135   0F9B             ; END TERMS
2136   0F9B E7            pop d
2137   0F9C FD 43         mov [d], b
2138   0F9E 0A 1E 10      jmp _if34_exit
2139   0FA1             _if34_else:
2140   0FA1             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2141   0FA1             _if35_cond:
2142   0FA1 FA FC FF      lea d, [bp + -4] ; $hex_char
2143   0FA4 32            mov bl, [d]
2144   0FA5 A7 00         mov bh, 0
2145   0FA7             ; START RELATIONAL
2146   0FA7 D7            push a
2147   0FA8 11            mov a, b
2148   0FA9 26 41 00      mov b, $41
2149   0FAC B0            cmp a, b
2150   0FAD FD 80         sge ; >=
2151   0FAF E4            pop a
2152   0FB0             ; END RELATIONAL
2153   0FB0 D7            push a
2154   0FB1 11            mov a, b
2155   0FB2 FA FC FF      lea d, [bp + -4] ; $hex_char
2156   0FB5 32            mov bl, [d]
2157   0FB6 A7 00         mov bh, 0
2158   0FB8             ; START RELATIONAL
2159   0FB8 D7            push a
2160   0FB9 11            mov a, b
2161   0FBA 26 46 00      mov b, $46
2162   0FBD B0            cmp a, b
2163   0FBE FD 73         slt ; <= (signed)
2164   0FC0 E4            pop a
2165   0FC1             ; END RELATIONAL
2166   0FC1 FD A7         sand a, b
2167   0FC3 E4            pop a
2168   0FC4 C0 00 00      cmp b, 0
2169   0FC7 C6 F8 0F      je _if35_else
2170   0FCA             _if35_true:
2171   0FCA             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2172   0FCA FA FF FF      lea d, [bp + -1] ; $value
2173   0FCD DA            push d
2174   0FCE FA FF FF      lea d, [bp + -1] ; $value
2175   0FD1 2A            mov b, [d]
2176   0FD2             ; START FACTORS
2177   0FD2 D7            push a
2178   0FD3 11            mov a, b
2179   0FD4 26 10 00      mov b, $10
2180   0FD7 AC            mul a, b ; *
2181   0FD8 11            mov a, b
2182   0FD9 27            mov b, a
2183   0FDA E4            pop a
2184   0FDB             ; END FACTORS
2185   0FDB             ; START TERMS
2186   0FDB D7            push a
2187   0FDC 11            mov a, b
2188   0FDD FA FC FF      lea d, [bp + -4] ; $hex_char
2189   0FE0 32            mov bl, [d]
2190   0FE1 A7 00         mov bh, 0
2191   0FE3             ; START TERMS
2192   0FE3 D7            push a
2193   0FE4 11            mov a, b
2194   0FE5 26 41 00      mov b, $41
2195   0FE8 60            sub a, b
2196   0FE9 27            mov b, a
2197   0FEA 11            mov a, b
2198   0FEB 26 0A 00      mov b, $a
2199   0FEE 56            add b, a
2200   0FEF E4            pop a
2201   0FF0             ; END TERMS
2202   0FF0 56            add b, a
2203   0FF1 E4            pop a
2204   0FF2             ; END TERMS
2205   0FF2 E7            pop d
2206   0FF3 FD 43         mov [d], b
2207   0FF5 0A 1E 10      jmp _if35_exit
2208   0FF8             _if35_else:
2209   0FF8             ;; value = (value * 16) + (hex_char - '0'); 
2210   0FF8 FA FF FF      lea d, [bp + -1] ; $value
2211   0FFB DA            push d
2212   0FFC FA FF FF      lea d, [bp + -1] ; $value
2213   0FFF 2A            mov b, [d]
2214   1000             ; START FACTORS
2215   1000 D7            push a
2216   1001 11            mov a, b
2217   1002 26 10 00      mov b, $10
2218   1005 AC            mul a, b ; *
2219   1006 11            mov a, b
2220   1007 27            mov b, a
2221   1008 E4            pop a
2222   1009             ; END FACTORS
2223   1009             ; START TERMS
2224   1009 D7            push a
2225   100A 11            mov a, b
2226   100B FA FC FF      lea d, [bp + -4] ; $hex_char
2227   100E 32            mov bl, [d]
2228   100F A7 00         mov bh, 0
2229   1011             ; START TERMS
2230   1011 D7            push a
2231   1012 11            mov a, b
2232   1013 26 30 00      mov b, $30
2233   1016 60            sub a, b
2234   1017 27            mov b, a
2235   1018 E4            pop a
2236   1019             ; END TERMS
2237   1019 56            add b, a
2238   101A E4            pop a
2239   101B             ; END TERMS
2240   101B E7            pop d
2241   101C FD 43         mov [d], b
2242   101E             _if35_exit:
2243   101E             _if34_exit:
2244   101E             _for33_update:
2245   101E FA FD FF      lea d, [bp + -3] ; $i
2246   1021 2A            mov b, [d]
2247   1022 D8            push b
2248   1023 FD 77         inc b
2249   1025 FA FD FF      lea d, [bp + -3] ; $i
2250   1028 FD 43         mov [d], b
2251   102A E5            pop b
2252   102B 0A 1B 0F      jmp _for33_cond
2253   102E             _for33_exit:
2254   102E             ;; return value; 
2255   102E FA FF FF      lea d, [bp + -1] ; $value
2256   1031 2A            mov b, [d]
2257   1032 F9            leave
2258   1033 09            ret
2259   1034             
2260   1034             gets:
2261   1034 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2262   1037             
2263   1037             ; --- BEGIN INLINE ASM BLOCK
2264   1037 FA 05 00      lea d, [bp + 5] ; $s
2265   103A 15            mov a, [d]
2266   103B 3C            mov d, a
2267   103C 07 EB 18      call _gets
2268   103F             ; --- END INLINE ASM BLOCK
2269   103F             
2270   103F             ;; return strlen(s); 
2271   103F FA 05 00      lea d, [bp + 5] ; $s
2272   1042 2A            mov b, [d]
2273   1043 FD AB         swp b
2274   1045 D8            push b
2275   1046 07 CF 07      call strlen
2276   1049 51 02 00      add sp, 2
2277   104C F9            leave
2278   104D 09            ret
2279   104E             
2280   104E             print_signed:
2281   104E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2282   1051             ;; char digits[5]; 
2283   1051 52 05 00      sub sp, 5 ; digits
2284   1054             ;; int i = 0; 
2285   1054 52 02 00      sub sp, 2 ; i
2286   1057             ; --- START LOCAL VAR INITIALIZATION
2287   1057 FA FA FF      lea d, [bp + -6] ; $i
2288   105A DA            push d
2289   105B 26 00 00      mov b, $0
2290   105E E7            pop d
2291   105F FD 43         mov [d], b
2292   1061             ; --- END LOCAL VAR INITIALIZATION
2293   1061             ;; if (num < 0) { 
2294   1061             _if36_cond:
2295   1061 FA 05 00      lea d, [bp + 5] ; $num
2296   1064 2A            mov b, [d]
2297   1065             ; START RELATIONAL
2298   1065 D7            push a
2299   1066 11            mov a, b
2300   1067 26 00 00      mov b, $0
2301   106A B0            cmp a, b
2302   106B FD 73         slt ; < (signed)
2303   106D E4            pop a
2304   106E             ; END RELATIONAL
2305   106E C0 00 00      cmp b, 0
2306   1071 C6 8E 10      je _if36_else
2307   1074             _if36_true:
2308   1074             ;; putchar('-'); 
2309   1074 26 2D 00      mov b, $2d
2310   1077 DD            push bl
2311   1078 07 53 17      call putchar
2312   107B 51 01 00      add sp, 1
2313   107E             ;; num = -num; 
2314   107E FA 05 00      lea d, [bp + 5] ; $num
2315   1081 DA            push d
2316   1082 FA 05 00      lea d, [bp + 5] ; $num
2317   1085 2A            mov b, [d]
2318   1086 FD 97         neg b
2319   1088 E7            pop d
2320   1089 FD 43         mov [d], b
2321   108B 0A B0 10      jmp _if36_exit
2322   108E             _if36_else:
2323   108E             ;; if (num == 0) { 
2324   108E             _if37_cond:
2325   108E FA 05 00      lea d, [bp + 5] ; $num
2326   1091 2A            mov b, [d]
2327   1092             ; START RELATIONAL
2328   1092 D7            push a
2329   1093 11            mov a, b
2330   1094 26 00 00      mov b, $0
2331   1097 B0            cmp a, b
2332   1098 FD 71         seq ; ==
2333   109A E4            pop a
2334   109B             ; END RELATIONAL
2335   109B C0 00 00      cmp b, 0
2336   109E C6 B0 10      je _if37_exit
2337   10A1             _if37_true:
2338   10A1             ;; putchar('0'); 
2339   10A1 26 30 00      mov b, $30
2340   10A4 DD            push bl
2341   10A5 07 53 17      call putchar
2342   10A8 51 01 00      add sp, 1
2343   10AB             ;; return; 
2344   10AB F9            leave
2345   10AC 09            ret
2346   10AD 0A B0 10      jmp _if37_exit
2347   10B0             _if37_exit:
2348   10B0             _if36_exit:
2349   10B0             ;; while (num > 0) { 
2350   10B0             _while38_cond:
2351   10B0 FA 05 00      lea d, [bp + 5] ; $num
2352   10B3 2A            mov b, [d]
2353   10B4             ; START RELATIONAL
2354   10B4 D7            push a
2355   10B5 11            mov a, b
2356   10B6 26 00 00      mov b, $0
2357   10B9 B0            cmp a, b
2358   10BA FD 7F         sgt ; >
2359   10BC E4            pop a
2360   10BD             ; END RELATIONAL
2361   10BD C0 00 00      cmp b, 0
2362   10C0 C6 0A 11      je _while38_exit
2363   10C3             _while38_block:
2364   10C3             ;; digits[i] = '0' + (num % 10); 
2365   10C3 FA FC FF      lea d, [bp + -4] ; $digits
2366   10C6 D7            push a
2367   10C7 DA            push d
2368   10C8 FA FA FF      lea d, [bp + -6] ; $i
2369   10CB 2A            mov b, [d]
2370   10CC E7            pop d
2371   10CD 5A            add d, b
2372   10CE E4            pop a
2373   10CF DA            push d
2374   10D0 26 30 00      mov b, $30
2375   10D3             ; START TERMS
2376   10D3 D7            push a
2377   10D4 11            mov a, b
2378   10D5 FA 05 00      lea d, [bp + 5] ; $num
2379   10D8 2A            mov b, [d]
2380   10D9             ; START FACTORS
2381   10D9 D7            push a
2382   10DA 11            mov a, b
2383   10DB 26 0A 00      mov b, $a
2384   10DE AE            div a, b ; 
2385   10DF 11            mov a, b
2386   10E0 27            mov b, a
2387   10E1 E4            pop a
2388   10E2             ; END FACTORS
2389   10E2 56            add b, a
2390   10E3 E4            pop a
2391   10E4             ; END TERMS
2392   10E4 E7            pop d
2393   10E5 FD 3E         mov [d], bl
2394   10E7             ;; num = num / 10; 
2395   10E7 FA 05 00      lea d, [bp + 5] ; $num
2396   10EA DA            push d
2397   10EB FA 05 00      lea d, [bp + 5] ; $num
2398   10EE 2A            mov b, [d]
2399   10EF             ; START FACTORS
2400   10EF D7            push a
2401   10F0 11            mov a, b
2402   10F1 26 0A 00      mov b, $a
2403   10F4 AE            div a, b
2404   10F5 27            mov b, a
2405   10F6 E4            pop a
2406   10F7             ; END FACTORS
2407   10F7 E7            pop d
2408   10F8 FD 43         mov [d], b
2409   10FA             ;; i++; 
2410   10FA FA FA FF      lea d, [bp + -6] ; $i
2411   10FD 2A            mov b, [d]
2412   10FE D8            push b
2413   10FF FD 77         inc b
2414   1101 FA FA FF      lea d, [bp + -6] ; $i
2415   1104 FD 43         mov [d], b
2416   1106 E5            pop b
2417   1107 0A B0 10      jmp _while38_cond
2418   110A             _while38_exit:
2419   110A             ;; while (i > 0) { 
2420   110A             _while39_cond:
2421   110A FA FA FF      lea d, [bp + -6] ; $i
2422   110D 2A            mov b, [d]
2423   110E             ; START RELATIONAL
2424   110E D7            push a
2425   110F 11            mov a, b
2426   1110 26 00 00      mov b, $0
2427   1113 B0            cmp a, b
2428   1114 FD 7F         sgt ; >
2429   1116 E4            pop a
2430   1117             ; END RELATIONAL
2431   1117 C0 00 00      cmp b, 0
2432   111A C6 43 11      je _while39_exit
2433   111D             _while39_block:
2434   111D             ;; i--; 
2435   111D FA FA FF      lea d, [bp + -6] ; $i
2436   1120 2A            mov b, [d]
2437   1121 D8            push b
2438   1122 FD 7D         dec b
2439   1124 FA FA FF      lea d, [bp + -6] ; $i
2440   1127 FD 43         mov [d], b
2441   1129 E5            pop b
2442   112A             ;; putchar(digits[i]); 
2443   112A FA FC FF      lea d, [bp + -4] ; $digits
2444   112D D7            push a
2445   112E DA            push d
2446   112F FA FA FF      lea d, [bp + -6] ; $i
2447   1132 2A            mov b, [d]
2448   1133 E7            pop d
2449   1134 5A            add d, b
2450   1135 E4            pop a
2451   1136 32            mov bl, [d]
2452   1137 A7 00         mov bh, 0
2453   1139 DD            push bl
2454   113A 07 53 17      call putchar
2455   113D 51 01 00      add sp, 1
2456   1140 0A 0A 11      jmp _while39_cond
2457   1143             _while39_exit:
2458   1143 F9            leave
2459   1144 09            ret
2460   1145             
2461   1145             print_signed_long:
2462   1145 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2463   1148             ;; char digits[10]; 
2464   1148 52 0A 00      sub sp, 10 ; digits
2465   114B             ;; int i = 0; 
2466   114B 52 02 00      sub sp, 2 ; i
2467   114E             ; --- START LOCAL VAR INITIALIZATION
2468   114E FA F5 FF      lea d, [bp + -11] ; $i
2469   1151 DA            push d
2470   1152 26 00 00      mov b, $0
2471   1155 E7            pop d
2472   1156 FD 43         mov [d], b
2473   1158             ; --- END LOCAL VAR INITIALIZATION
2474   1158             ;; if (num < 0) { 
2475   1158             _if40_cond:
2476   1158 FA 05 00      lea d, [bp + 5] ; $num
2477   115B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2478   115E FD 39         mov c, b ; And place it into C
2479   1160 2A            mov b, [d] ; Lower Word in B
2480   1161             ; START RELATIONAL
2481   1161 D7            push a
2482   1162 FD D8         push g
2483   1164 11            mov a, b
2484   1165 FD 7A         mov g, c
2485   1167 26 00 00      mov b, $0
2486   116A 38 00 00      mov c, 0
2487   116D FD AF 00 00   cmp32 ga, cb
2487   1171 00 00 00 00 
2487   1175 00 00 00 00 
2487   1179 00 00 00 00 
2487   117D 00 00 00 00 
2487   1181 00 00 00 00 
2487   1185 00 00 00 00 
2487   1189 00 00 00 00 
2487   118D 00 00 00 00 
2487   1191 00 00 00 00 
2487   1195 00 00 00 00 
2487   1199 00 00 00 00 
2487   119D 00 00 00 00 
2487   11A1 00 00 00 00 
2487   11A5 00 00 00 00 
2487   11A9 00 00 00 00 
2487   11AD 00 00 00 00 
2487   11B1 00 00 00 00 
2487   11B5 00 00 00 00 
2487   11B9 00 00 00 00 
2487   11BD 00 00 00 00 
2487   11C1 00 00 00 00 
2487   11C5 00 00 00 00 
2487   11C9 00 00 00 00 
2487   11CD 00 00 00 00 
2487   11D1 00 00 00 00 
2487   11D5 00 00 00 00 
2487   11D9 00 00 00 00 
2487   11DD 00 00 00 00 
2487   11E1 00 00 00 00 
2487   11E5 00 00 00 00 
2487   11E9 00 00 00 00 
2487   11ED 00 00 00 00 
2487   11F1 00 00 00 00 
2487   11F5 00 00 00 00 
2487   11F9 00 00 00 00 
2487   11FD 00 00 00 00 
2487   1201 00 00 00 00 
2487   1205 00 00 00 00 
2487   1209 00 00 00 00 
2487   120D 00 00 00 00 
2487   1211 00 00 00 00 
2487   1215 00 00 00 00 
2487   1219 00 00 00 00 
2487   121D 00 00 00 00 
2487   1221 00 00 00 00 
2487   1225 00 00 00 00 
2487   1229 00 00 00 00 
2487   122D 00 00 00 00 
2487   1231 00 00 00 00 
2487   1235 00 00 00 00 
2487   1239 00 00 00 00 
2487   123D 00 00 00 00 
2487   1241 00 00 00 00 
2487   1245 00 00 00 00 
2487   1249 00 00 00 00 
2487   124D 00 00 00 00 
2487   1251 00 00 00 00 
2487   1255 00 00 00 00 
2487   1259 00 00 00 00 
2487   125D 00 00 00 00 
2487   1261 00 00 00 00 
2487   1265 00 00 00 00 
2487   1269 00 00 00 00 
2487   126D 00 
2488   126E FD 73         slt ; <
2489   1270 FD F1         pop g
2490   1272 E4            pop a
2491   1273             ; END RELATIONAL
2492   1273 C0 00 00      cmp b, 0
2493   1276 C6 9D 12      je _if40_else
2494   1279             _if40_true:
2495   1279             ;; putchar('-'); 
2496   1279 26 2D 00      mov b, $2d
2497   127C DD            push bl
2498   127D 07 53 17      call putchar
2499   1280 51 01 00      add sp, 1
2500   1283             ;; num = -num; 
2501   1283 FA 05 00      lea d, [bp + 5] ; $num
2502   1286 DA            push d
2503   1287 FA 05 00      lea d, [bp + 5] ; $num
2504   128A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2505   128D FD 39         mov c, b ; And place it into C
2506   128F 2A            mov b, [d] ; Lower Word in B
2507   1290 FD 97         neg b
2508   1292 E7            pop d
2509   1293 FD 43         mov [d], b
2510   1295 28            mov b, c
2511   1296 FD 44 02 00   mov [d + 2], b
2512   129A 0A CD 13      jmp _if40_exit
2513   129D             _if40_else:
2514   129D             ;; if (num == 0) { 
2515   129D             _if41_cond:
2516   129D FA 05 00      lea d, [bp + 5] ; $num
2517   12A0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2518   12A3 FD 39         mov c, b ; And place it into C
2519   12A5 2A            mov b, [d] ; Lower Word in B
2520   12A6             ; START RELATIONAL
2521   12A6 D7            push a
2522   12A7 FD D8         push g
2523   12A9 11            mov a, b
2524   12AA FD 7A         mov g, c
2525   12AC 26 00 00      mov b, $0
2526   12AF 38 00 00      mov c, 0
2527   12B2 FD AF 00 00   cmp32 ga, cb
2527   12B6 00 00 00 00 
2527   12BA 00 00 00 00 
2527   12BE 00 00 00 00 
2527   12C2 00 00 00 00 
2527   12C6 00 00 00 00 
2527   12CA 00 00 00 00 
2527   12CE 00 00 00 00 
2527   12D2 00 00 00 00 
2527   12D6 00 00 00 00 
2527   12DA 00 00 00 00 
2527   12DE 00 00 00 00 
2527   12E2 00 00 00 00 
2527   12E6 00 00 00 00 
2527   12EA 00 00 00 00 
2527   12EE 00 00 00 00 
2527   12F2 00 00 00 00 
2527   12F6 00 00 00 00 
2527   12FA 00 00 00 00 
2527   12FE 00 00 00 00 
2527   1302 00 00 00 00 
2527   1306 00 00 00 00 
2527   130A 00 00 00 00 
2527   130E 00 00 00 00 
2527   1312 00 00 00 00 
2527   1316 00 00 00 00 
2527   131A 00 00 00 00 
2527   131E 00 00 00 00 
2527   1322 00 00 00 00 
2527   1326 00 00 00 00 
2527   132A 00 00 00 00 
2527   132E 00 00 00 00 
2527   1332 00 00 00 00 
2527   1336 00 00 00 00 
2527   133A 00 00 00 00 
2527   133E 00 00 00 00 
2527   1342 00 00 00 00 
2527   1346 00 00 00 00 
2527   134A 00 00 00 00 
2527   134E 00 00 00 00 
2527   1352 00 00 00 00 
2527   1356 00 00 00 00 
2527   135A 00 00 00 00 
2527   135E 00 00 00 00 
2527   1362 00 00 00 00 
2527   1366 00 00 00 00 
2527   136A 00 00 00 00 
2527   136E 00 00 00 00 
2527   1372 00 00 00 00 
2527   1376 00 00 00 00 
2527   137A 00 00 00 00 
2527   137E 00 00 00 00 
2527   1382 00 00 00 00 
2527   1386 00 00 00 00 
2527   138A 00 00 00 00 
2527   138E 00 00 00 00 
2527   1392 00 00 00 00 
2527   1396 00 00 00 00 
2527   139A 00 00 00 00 
2527   139E 00 00 00 00 
2527   13A2 00 00 00 00 
2527   13A6 00 00 00 00 
2527   13AA 00 00 00 00 
2527   13AE 00 00 00 00 
2527   13B2 00 
2528   13B3 FD 71         seq ; ==
2529   13B5 FD F1         pop g
2530   13B7 E4            pop a
2531   13B8             ; END RELATIONAL
2532   13B8 C0 00 00      cmp b, 0
2533   13BB C6 CD 13      je _if41_exit
2534   13BE             _if41_true:
2535   13BE             ;; putchar('0'); 
2536   13BE 26 30 00      mov b, $30
2537   13C1 DD            push bl
2538   13C2 07 53 17      call putchar
2539   13C5 51 01 00      add sp, 1
2540   13C8             ;; return; 
2541   13C8 F9            leave
2542   13C9 09            ret
2543   13CA 0A CD 13      jmp _if41_exit
2544   13CD             _if41_exit:
2545   13CD             _if40_exit:
2546   13CD             ;; while (num > 0) { 
2547   13CD             _while42_cond:
2548   13CD FA 05 00      lea d, [bp + 5] ; $num
2549   13D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2550   13D3 FD 39         mov c, b ; And place it into C
2551   13D5 2A            mov b, [d] ; Lower Word in B
2552   13D6             ; START RELATIONAL
2553   13D6 D7            push a
2554   13D7 FD D8         push g
2555   13D9 11            mov a, b
2556   13DA FD 7A         mov g, c
2557   13DC 26 00 00      mov b, $0
2558   13DF 38 00 00      mov c, 0
2559   13E2 FD 7F         sgt
2560   13E4 FD F1         pop g
2561   13E6 E4            pop a
2562   13E7             ; END RELATIONAL
2563   13E7 C0 00 00      cmp b, 0
2564   13EA C6 4A 14      je _while42_exit
2565   13ED             _while42_block:
2566   13ED             ;; digits[i] = '0' + (num % 10); 
2567   13ED FA F7 FF      lea d, [bp + -9] ; $digits
2568   13F0 D7            push a
2569   13F1 DA            push d
2570   13F2 FA F5 FF      lea d, [bp + -11] ; $i
2571   13F5 2A            mov b, [d]
2572   13F6 E7            pop d
2573   13F7 5A            add d, b
2574   13F8 E4            pop a
2575   13F9 DA            push d
2576   13FA 26 30 00      mov b, $30
2577   13FD             ; START TERMS
2578   13FD D7            push a
2579   13FE 11            mov a, b
2580   13FF FA 05 00      lea d, [bp + 5] ; $num
2581   1402 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2582   1405 FD 39         mov c, b ; And place it into C
2583   1407 2A            mov b, [d] ; Lower Word in B
2584   1408             ; START FACTORS
2585   1408 D7            push a
2586   1409 11            mov a, b
2587   140A 26 0A 00      mov b, $a
2588   140D AE            div a, b ; 
2589   140E 11            mov a, b
2590   140F 27            mov b, a
2591   1410 E4            pop a
2592   1411             ; END FACTORS
2593   1411 54            add a, b
2594   1412 D7            push a
2595   1413 FD 12         mov a, g
2596   1415 28            mov b, c
2597   1416 5C            adc a, b
2598   1417 39            mov c, a
2599   1418 E5            pop b
2600   1419 E4            pop a
2601   141A             ; END TERMS
2602   141A E7            pop d
2603   141B FD 3E         mov [d], bl
2604   141D             ;; num = num / 10; 
2605   141D FA 05 00      lea d, [bp + 5] ; $num
2606   1420 DA            push d
2607   1421 FA 05 00      lea d, [bp + 5] ; $num
2608   1424 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2609   1427 FD 39         mov c, b ; And place it into C
2610   1429 2A            mov b, [d] ; Lower Word in B
2611   142A             ; START FACTORS
2612   142A D7            push a
2613   142B 11            mov a, b
2614   142C 26 0A 00      mov b, $a
2615   142F AE            div a, b
2616   1430 27            mov b, a
2617   1431 E4            pop a
2618   1432             ; END FACTORS
2619   1432 E7            pop d
2620   1433 FD 43         mov [d], b
2621   1435 28            mov b, c
2622   1436 FD 44 02 00   mov [d + 2], b
2623   143A             ;; i++; 
2624   143A FA F5 FF      lea d, [bp + -11] ; $i
2625   143D 2A            mov b, [d]
2626   143E D8            push b
2627   143F FD 77         inc b
2628   1441 FA F5 FF      lea d, [bp + -11] ; $i
2629   1444 FD 43         mov [d], b
2630   1446 E5            pop b
2631   1447 0A CD 13      jmp _while42_cond
2632   144A             _while42_exit:
2633   144A             ;; while (i > 0) { 
2634   144A             _while43_cond:
2635   144A FA F5 FF      lea d, [bp + -11] ; $i
2636   144D 2A            mov b, [d]
2637   144E             ; START RELATIONAL
2638   144E D7            push a
2639   144F 11            mov a, b
2640   1450 26 00 00      mov b, $0
2641   1453 B0            cmp a, b
2642   1454 FD 7F         sgt ; >
2643   1456 E4            pop a
2644   1457             ; END RELATIONAL
2645   1457 C0 00 00      cmp b, 0
2646   145A C6 83 14      je _while43_exit
2647   145D             _while43_block:
2648   145D             ;; i--; 
2649   145D FA F5 FF      lea d, [bp + -11] ; $i
2650   1460 2A            mov b, [d]
2651   1461 D8            push b
2652   1462 FD 7D         dec b
2653   1464 FA F5 FF      lea d, [bp + -11] ; $i
2654   1467 FD 43         mov [d], b
2655   1469 E5            pop b
2656   146A             ;; putchar(digits[i]); 
2657   146A FA F7 FF      lea d, [bp + -9] ; $digits
2658   146D D7            push a
2659   146E DA            push d
2660   146F FA F5 FF      lea d, [bp + -11] ; $i
2661   1472 2A            mov b, [d]
2662   1473 E7            pop d
2663   1474 5A            add d, b
2664   1475 E4            pop a
2665   1476 32            mov bl, [d]
2666   1477 A7 00         mov bh, 0
2667   1479 DD            push bl
2668   147A 07 53 17      call putchar
2669   147D 51 01 00      add sp, 1
2670   1480 0A 4A 14      jmp _while43_cond
2671   1483             _while43_exit:
2672   1483 F9            leave
2673   1484 09            ret
2674   1485             
2675   1485             print_unsigned_long:
2676   1485 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2677   1488             ;; char digits[10]; 
2678   1488 52 0A 00      sub sp, 10 ; digits
2679   148B             ;; int i; 
2680   148B 52 02 00      sub sp, 2 ; i
2681   148E             ;; i = 0; 
2682   148E FA F5 FF      lea d, [bp + -11] ; $i
2683   1491 DA            push d
2684   1492 26 00 00      mov b, $0
2685   1495 E7            pop d
2686   1496 FD 43         mov [d], b
2687   1498             ;; if(num == 0){ 
2688   1498             _if44_cond:
2689   1498 FA 05 00      lea d, [bp + 5] ; $num
2690   149B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2691   149E FD 39         mov c, b ; And place it into C
2692   14A0 2A            mov b, [d] ; Lower Word in B
2693   14A1             ; START RELATIONAL
2694   14A1 D7            push a
2695   14A2 FD D8         push g
2696   14A4 11            mov a, b
2697   14A5 FD 7A         mov g, c
2698   14A7 26 00 00      mov b, $0
2699   14AA 38 00 00      mov c, 0
2700   14AD FD AF 00 00   cmp32 ga, cb
2700   14B1 00 00 00 00 
2700   14B5 00 00 00 00 
2700   14B9 00 00 00 00 
2700   14BD 00 00 00 00 
2700   14C1 00 00 00 00 
2700   14C5 00 00 00 00 
2700   14C9 00 00 00 00 
2700   14CD 00 00 00 00 
2700   14D1 00 00 00 00 
2700   14D5 00 00 00 00 
2700   14D9 00 00 00 00 
2700   14DD 00 00 00 00 
2700   14E1 00 00 00 00 
2700   14E5 00 00 00 00 
2700   14E9 00 00 00 00 
2700   14ED 00 00 00 00 
2700   14F1 00 00 00 00 
2700   14F5 00 00 00 00 
2700   14F9 00 00 00 00 
2700   14FD 00 00 00 00 
2700   1501 00 00 00 00 
2700   1505 00 00 00 00 
2700   1509 00 00 00 00 
2700   150D 00 00 00 00 
2700   1511 00 00 00 00 
2700   1515 00 00 00 00 
2700   1519 00 00 00 00 
2700   151D 00 00 00 00 
2700   1521 00 00 00 00 
2700   1525 00 00 00 00 
2700   1529 00 00 00 00 
2700   152D 00 00 00 00 
2700   1531 00 00 00 00 
2700   1535 00 00 00 00 
2700   1539 00 00 00 00 
2700   153D 00 00 00 00 
2700   1541 00 00 00 00 
2700   1545 00 00 00 00 
2700   1549 00 00 00 00 
2700   154D 00 00 00 00 
2700   1551 00 00 00 00 
2700   1555 00 00 00 00 
2700   1559 00 00 00 00 
2700   155D 00 00 00 00 
2700   1561 00 00 00 00 
2700   1565 00 00 00 00 
2700   1569 00 00 00 00 
2700   156D 00 00 00 00 
2700   1571 00 00 00 00 
2700   1575 00 00 00 00 
2700   1579 00 00 00 00 
2700   157D 00 00 00 00 
2700   1581 00 00 00 00 
2700   1585 00 00 00 00 
2700   1589 00 00 00 00 
2700   158D 00 00 00 00 
2700   1591 00 00 00 00 
2700   1595 00 00 00 00 
2700   1599 00 00 00 00 
2700   159D 00 00 00 00 
2700   15A1 00 00 00 00 
2700   15A5 00 00 00 00 
2700   15A9 00 00 00 00 
2700   15AD 00 
2701   15AE FD 71         seq ; ==
2702   15B0 FD F1         pop g
2703   15B2 E4            pop a
2704   15B3             ; END RELATIONAL
2705   15B3 C0 00 00      cmp b, 0
2706   15B6 C6 C8 15      je _if44_exit
2707   15B9             _if44_true:
2708   15B9             ;; putchar('0'); 
2709   15B9 26 30 00      mov b, $30
2710   15BC DD            push bl
2711   15BD 07 53 17      call putchar
2712   15C0 51 01 00      add sp, 1
2713   15C3             ;; return; 
2714   15C3 F9            leave
2715   15C4 09            ret
2716   15C5 0A C8 15      jmp _if44_exit
2717   15C8             _if44_exit:
2718   15C8             ;; while (num > 0) { 
2719   15C8             _while45_cond:
2720   15C8 FA 05 00      lea d, [bp + 5] ; $num
2721   15CB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2722   15CE FD 39         mov c, b ; And place it into C
2723   15D0 2A            mov b, [d] ; Lower Word in B
2724   15D1             ; START RELATIONAL
2725   15D1 D7            push a
2726   15D2 FD D8         push g
2727   15D4 11            mov a, b
2728   15D5 FD 7A         mov g, c
2729   15D7 26 00 00      mov b, $0
2730   15DA 38 00 00      mov c, 0
2731   15DD FD 81         sgu
2732   15DF FD F1         pop g
2733   15E1 E4            pop a
2734   15E2             ; END RELATIONAL
2735   15E2 C0 00 00      cmp b, 0
2736   15E5 C6 45 16      je _while45_exit
2737   15E8             _while45_block:
2738   15E8             ;; digits[i] = '0' + (num % 10); 
2739   15E8 FA F7 FF      lea d, [bp + -9] ; $digits
2740   15EB D7            push a
2741   15EC DA            push d
2742   15ED FA F5 FF      lea d, [bp + -11] ; $i
2743   15F0 2A            mov b, [d]
2744   15F1 E7            pop d
2745   15F2 5A            add d, b
2746   15F3 E4            pop a
2747   15F4 DA            push d
2748   15F5 26 30 00      mov b, $30
2749   15F8             ; START TERMS
2750   15F8 D7            push a
2751   15F9 11            mov a, b
2752   15FA FA 05 00      lea d, [bp + 5] ; $num
2753   15FD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2754   1600 FD 39         mov c, b ; And place it into C
2755   1602 2A            mov b, [d] ; Lower Word in B
2756   1603             ; START FACTORS
2757   1603 D7            push a
2758   1604 11            mov a, b
2759   1605 26 0A 00      mov b, $a
2760   1608 AE            div a, b ; 
2761   1609 11            mov a, b
2762   160A 27            mov b, a
2763   160B E4            pop a
2764   160C             ; END FACTORS
2765   160C 54            add a, b
2766   160D D7            push a
2767   160E FD 12         mov a, g
2768   1610 28            mov b, c
2769   1611 5C            adc a, b
2770   1612 39            mov c, a
2771   1613 E5            pop b
2772   1614 E4            pop a
2773   1615             ; END TERMS
2774   1615 E7            pop d
2775   1616 FD 3E         mov [d], bl
2776   1618             ;; num = num / 10; 
2777   1618 FA 05 00      lea d, [bp + 5] ; $num
2778   161B DA            push d
2779   161C FA 05 00      lea d, [bp + 5] ; $num
2780   161F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2781   1622 FD 39         mov c, b ; And place it into C
2782   1624 2A            mov b, [d] ; Lower Word in B
2783   1625             ; START FACTORS
2784   1625 D7            push a
2785   1626 11            mov a, b
2786   1627 26 0A 00      mov b, $a
2787   162A AE            div a, b
2788   162B 27            mov b, a
2789   162C E4            pop a
2790   162D             ; END FACTORS
2791   162D E7            pop d
2792   162E FD 43         mov [d], b
2793   1630 28            mov b, c
2794   1631 FD 44 02 00   mov [d + 2], b
2795   1635             ;; i++; 
2796   1635 FA F5 FF      lea d, [bp + -11] ; $i
2797   1638 2A            mov b, [d]
2798   1639 D8            push b
2799   163A FD 77         inc b
2800   163C FA F5 FF      lea d, [bp + -11] ; $i
2801   163F FD 43         mov [d], b
2802   1641 E5            pop b
2803   1642 0A C8 15      jmp _while45_cond
2804   1645             _while45_exit:
2805   1645             ;; while (i > 0) { 
2806   1645             _while46_cond:
2807   1645 FA F5 FF      lea d, [bp + -11] ; $i
2808   1648 2A            mov b, [d]
2809   1649             ; START RELATIONAL
2810   1649 D7            push a
2811   164A 11            mov a, b
2812   164B 26 00 00      mov b, $0
2813   164E B0            cmp a, b
2814   164F FD 7F         sgt ; >
2815   1651 E4            pop a
2816   1652             ; END RELATIONAL
2817   1652 C0 00 00      cmp b, 0
2818   1655 C6 7E 16      je _while46_exit
2819   1658             _while46_block:
2820   1658             ;; i--; 
2821   1658 FA F5 FF      lea d, [bp + -11] ; $i
2822   165B 2A            mov b, [d]
2823   165C D8            push b
2824   165D FD 7D         dec b
2825   165F FA F5 FF      lea d, [bp + -11] ; $i
2826   1662 FD 43         mov [d], b
2827   1664 E5            pop b
2828   1665             ;; putchar(digits[i]); 
2829   1665 FA F7 FF      lea d, [bp + -9] ; $digits
2830   1668 D7            push a
2831   1669 DA            push d
2832   166A FA F5 FF      lea d, [bp + -11] ; $i
2833   166D 2A            mov b, [d]
2834   166E E7            pop d
2835   166F 5A            add d, b
2836   1670 E4            pop a
2837   1671 32            mov bl, [d]
2838   1672 A7 00         mov bh, 0
2839   1674 DD            push bl
2840   1675 07 53 17      call putchar
2841   1678 51 01 00      add sp, 1
2842   167B 0A 45 16      jmp _while46_cond
2843   167E             _while46_exit:
2844   167E F9            leave
2845   167F 09            ret
2846   1680             
2847   1680             print_unsigned:
2848   1680 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2849   1683             ;; char digits[5]; 
2850   1683 52 05 00      sub sp, 5 ; digits
2851   1686             ;; int i; 
2852   1686 52 02 00      sub sp, 2 ; i
2853   1689             ;; i = 0; 
2854   1689 FA FA FF      lea d, [bp + -6] ; $i
2855   168C DA            push d
2856   168D 26 00 00      mov b, $0
2857   1690 E7            pop d
2858   1691 FD 43         mov [d], b
2859   1693             ;; if(num == 0){ 
2860   1693             _if47_cond:
2861   1693 FA 05 00      lea d, [bp + 5] ; $num
2862   1696 2A            mov b, [d]
2863   1697             ; START RELATIONAL
2864   1697 D7            push a
2865   1698 11            mov a, b
2866   1699 26 00 00      mov b, $0
2867   169C B0            cmp a, b
2868   169D FD 71         seq ; ==
2869   169F E4            pop a
2870   16A0             ; END RELATIONAL
2871   16A0 C0 00 00      cmp b, 0
2872   16A3 C6 B5 16      je _if47_exit
2873   16A6             _if47_true:
2874   16A6             ;; putchar('0'); 
2875   16A6 26 30 00      mov b, $30
2876   16A9 DD            push bl
2877   16AA 07 53 17      call putchar
2878   16AD 51 01 00      add sp, 1
2879   16B0             ;; return; 
2880   16B0 F9            leave
2881   16B1 09            ret
2882   16B2 0A B5 16      jmp _if47_exit
2883   16B5             _if47_exit:
2884   16B5             ;; while (num > 0) { 
2885   16B5             _while48_cond:
2886   16B5 FA 05 00      lea d, [bp + 5] ; $num
2887   16B8 2A            mov b, [d]
2888   16B9             ; START RELATIONAL
2889   16B9 D7            push a
2890   16BA 11            mov a, b
2891   16BB 26 00 00      mov b, $0
2892   16BE B0            cmp a, b
2893   16BF FD 81         sgu ; > (unsigned)
2894   16C1 E4            pop a
2895   16C2             ; END RELATIONAL
2896   16C2 C0 00 00      cmp b, 0
2897   16C5 C6 0F 17      je _while48_exit
2898   16C8             _while48_block:
2899   16C8             ;; digits[i] = '0' + (num % 10); 
2900   16C8 FA FC FF      lea d, [bp + -4] ; $digits
2901   16CB D7            push a
2902   16CC DA            push d
2903   16CD FA FA FF      lea d, [bp + -6] ; $i
2904   16D0 2A            mov b, [d]
2905   16D1 E7            pop d
2906   16D2 5A            add d, b
2907   16D3 E4            pop a
2908   16D4 DA            push d
2909   16D5 26 30 00      mov b, $30
2910   16D8             ; START TERMS
2911   16D8 D7            push a
2912   16D9 11            mov a, b
2913   16DA FA 05 00      lea d, [bp + 5] ; $num
2914   16DD 2A            mov b, [d]
2915   16DE             ; START FACTORS
2916   16DE D7            push a
2917   16DF 11            mov a, b
2918   16E0 26 0A 00      mov b, $a
2919   16E3 AE            div a, b ; 
2920   16E4 11            mov a, b
2921   16E5 27            mov b, a
2922   16E6 E4            pop a
2923   16E7             ; END FACTORS
2924   16E7 56            add b, a
2925   16E8 E4            pop a
2926   16E9             ; END TERMS
2927   16E9 E7            pop d
2928   16EA FD 3E         mov [d], bl
2929   16EC             ;; num = num / 10; 
2930   16EC FA 05 00      lea d, [bp + 5] ; $num
2931   16EF DA            push d
2932   16F0 FA 05 00      lea d, [bp + 5] ; $num
2933   16F3 2A            mov b, [d]
2934   16F4             ; START FACTORS
2935   16F4 D7            push a
2936   16F5 11            mov a, b
2937   16F6 26 0A 00      mov b, $a
2938   16F9 AE            div a, b
2939   16FA 27            mov b, a
2940   16FB E4            pop a
2941   16FC             ; END FACTORS
2942   16FC E7            pop d
2943   16FD FD 43         mov [d], b
2944   16FF             ;; i++; 
2945   16FF FA FA FF      lea d, [bp + -6] ; $i
2946   1702 2A            mov b, [d]
2947   1703 D8            push b
2948   1704 FD 77         inc b
2949   1706 FA FA FF      lea d, [bp + -6] ; $i
2950   1709 FD 43         mov [d], b
2951   170B E5            pop b
2952   170C 0A B5 16      jmp _while48_cond
2953   170F             _while48_exit:
2954   170F             ;; while (i > 0) { 
2955   170F             _while49_cond:
2956   170F FA FA FF      lea d, [bp + -6] ; $i
2957   1712 2A            mov b, [d]
2958   1713             ; START RELATIONAL
2959   1713 D7            push a
2960   1714 11            mov a, b
2961   1715 26 00 00      mov b, $0
2962   1718 B0            cmp a, b
2963   1719 FD 7F         sgt ; >
2964   171B E4            pop a
2965   171C             ; END RELATIONAL
2966   171C C0 00 00      cmp b, 0
2967   171F C6 48 17      je _while49_exit
2968   1722             _while49_block:
2969   1722             ;; i--; 
2970   1722 FA FA FF      lea d, [bp + -6] ; $i
2971   1725 2A            mov b, [d]
2972   1726 D8            push b
2973   1727 FD 7D         dec b
2974   1729 FA FA FF      lea d, [bp + -6] ; $i
2975   172C FD 43         mov [d], b
2976   172E E5            pop b
2977   172F             ;; putchar(digits[i]); 
2978   172F FA FC FF      lea d, [bp + -4] ; $digits
2979   1732 D7            push a
2980   1733 DA            push d
2981   1734 FA FA FF      lea d, [bp + -6] ; $i
2982   1737 2A            mov b, [d]
2983   1738 E7            pop d
2984   1739 5A            add d, b
2985   173A E4            pop a
2986   173B 32            mov bl, [d]
2987   173C A7 00         mov bh, 0
2988   173E DD            push bl
2989   173F 07 53 17      call putchar
2990   1742 51 01 00      add sp, 1
2991   1745 0A 0F 17      jmp _while49_cond
2992   1748             _while49_exit:
2993   1748 F9            leave
2994   1749 09            ret
2995   174A             
2996   174A             date:
2997   174A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2998   174D             
2999   174D             ; --- BEGIN INLINE ASM BLOCK
3000   174D 19 00         mov al, 0 
3001   174F 05 07         syscall sys_datetime
3002   1751             ; --- END INLINE ASM BLOCK
3003   1751             
3004   1751 F9            leave
3005   1752 09            ret
3006   1753             
3007   1753             putchar:
3008   1753 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3009   1756             
3010   1756             ; --- BEGIN INLINE ASM BLOCK
3011   1756 FA 05 00      lea d, [bp + 5] ; $c
3012   1759 1E            mov al, [d]
3013   175A 23            mov ah, al
3014   175B 07 E4 18      call _putchar
3015   175E             ; --- END INLINE ASM BLOCK
3016   175E             
3017   175E F9            leave
3018   175F 09            ret
3019   1760             
3020   1760             getchar:
3021   1760 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3022   1763             ;; char c; 
3023   1763 52 01 00      sub sp, 1 ; c
3024   1766             
3025   1766             ; --- BEGIN INLINE ASM BLOCK
3026   1766 07 DD 18      call getch
3027   1769 1A            mov al, ah
3028   176A FA 00 00      lea d, [bp + 0] ; $c
3029   176D 3E            mov [d], al
3030   176E             ; --- END INLINE ASM BLOCK
3031   176E             
3032   176E             ;; return c; 
3033   176E FA 00 00      lea d, [bp + 0] ; $c
3034   1771 32            mov bl, [d]
3035   1772 A7 00         mov bh, 0
3036   1774 F9            leave
3037   1775 09            ret
3038   1776             
3039   1776             scann:
3040   1776 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3041   1779             ;; int m; 
3042   1779 52 02 00      sub sp, 2 ; m
3043   177C             
3044   177C             ; --- BEGIN INLINE ASM BLOCK
3045   177C 07 28 1B      call scan_u16d
3046   177F FA FF FF      lea d, [bp + -1] ; $m
3047   1782 43            mov [d], a
3048   1783             ; --- END INLINE ASM BLOCK
3049   1783             
3050   1783             ;; return m; 
3051   1783 FA FF FF      lea d, [bp + -1] ; $m
3052   1786 2A            mov b, [d]
3053   1787 F9            leave
3054   1788 09            ret
3055   1789             
3056   1789             puts:
3057   1789 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3058   178C             
3059   178C             ; --- BEGIN INLINE ASM BLOCK
3060   178C FA 05 00      lea d, [bp + 5] ; $s
3061   178F 15            mov a, [d]
3062   1790 3C            mov d, a
3063   1791 07 2E 1A      call _puts
3064   1794 10 00 0A      mov a, $0A00
3065   1797 05 03         syscall sys_io
3066   1799             ; --- END INLINE ASM BLOCK
3067   1799             
3068   1799 F9            leave
3069   179A 09            ret
3070   179B             
3071   179B             print:
3072   179B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3073   179E             
3074   179E             ; --- BEGIN INLINE ASM BLOCK
3075   179E FA 05 00      lea d, [bp + 5] ; $s
3076   17A1 FD 2A         mov d, [d]
3077   17A3 07 2E 1A      call _puts
3078   17A6             ; --- END INLINE ASM BLOCK
3079   17A6             
3080   17A6 F9            leave
3081   17A7 09            ret
3082   17A8             
3083   17A8             getparam:
3084   17A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3085   17AB             ;; char data; 
3086   17AB 52 01 00      sub sp, 1 ; data
3087   17AE             
3088   17AE             ; --- BEGIN INLINE ASM BLOCK
3089   17AE 19 04         mov al, 4
3090   17B0 FA 05 00      lea d, [bp + 5] ; $address
3091   17B3 FD 2A         mov d, [d]
3092   17B5 05 0C         syscall sys_system
3093   17B7 FA 00 00      lea d, [bp + 0] ; $data
3094   17BA FD 3E         mov [d], bl
3095   17BC             ; --- END INLINE ASM BLOCK
3096   17BC             
3097   17BC             ;; return data; 
3098   17BC FA 00 00      lea d, [bp + 0] ; $data
3099   17BF 32            mov bl, [d]
3100   17C0 A7 00         mov bh, 0
3101   17C2 F9            leave
3102   17C3 09            ret
3103   17C4             
3104   17C4             clear:
3105   17C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3106   17C7             ;; print("\033[2J\033[H"); 
3107   17C7 26 5D 28      mov b, _s3 ; "\033[2J\033[H"
3108   17CA FD AB         swp b
3109   17CC D8            push b
3110   17CD 07 9B 17      call print
3111   17D0 51 02 00      add sp, 2
3112   17D3 F9            leave
3113   17D4 09            ret
3114   17D5             
3115   17D5             abs:
3116   17D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3117   17D8             ;; return i < 0 ? -i : i; 
3118   17D8             _ternary50_cond:
3119   17D8 FA 05 00      lea d, [bp + 5] ; $i
3120   17DB 2A            mov b, [d]
3121   17DC             ; START RELATIONAL
3122   17DC D7            push a
3123   17DD 11            mov a, b
3124   17DE 26 00 00      mov b, $0
3125   17E1 B0            cmp a, b
3126   17E2 FD 73         slt ; < (signed)
3127   17E4 E4            pop a
3128   17E5             ; END RELATIONAL
3129   17E5 C0 00 00      cmp b, 0
3130   17E8 C6 F4 17      je _ternary50_false
3131   17EB             _ternary50_true:
3132   17EB FA 05 00      lea d, [bp + 5] ; $i
3133   17EE 2A            mov b, [d]
3134   17EF FD 97         neg b
3135   17F1 0A F8 17      jmp _ternary50_exit
3136   17F4             _ternary50_false:
3137   17F4 FA 05 00      lea d, [bp + 5] ; $i
3138   17F7 2A            mov b, [d]
3139   17F8             _ternary50_exit:
3140   17F8 F9            leave
3141   17F9 09            ret
3142   17FA             
3143   17FA             include_stdio_asm:
3144   17FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3145   17FD             
3146   17FD             ; --- BEGIN INLINE ASM BLOCK
3147   17FD             .include "lib/asm/stdio.asm"
0001+  17FD             ;-----------------------------------------------------------------------------
0002+  17FD             ; stdio.s
0003+  17FD             ;-----------------------------------------------------------------------------
0004+  17FD             .include "lib/asm/string.asm"
0001++ 17FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 17FD             ; string.s
0003++ 17FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 17FD             
0005++ 17FD             
0006++ 17FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 17FD             ; _strrev
0008++ 17FD             ; reverse a string
0009++ 17FD             ; D = string address
0010++ 17FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 17FD             ; 01234
0012++ 17FD             _strrev:
0013++ 17FD 4B          	pusha
0014++ 17FE 07 44 18    	call _strlen	; length in C
0015++ 1801 12          	mov a, c
0016++ 1802 AF 01 00    	cmp a, 1
0017++ 1805 D0 1F 18    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1808 7D          	dec a
0019++ 1809 FD 4E       	mov si, d	; beginning of string
0020++ 180B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 180D 59          	add d, a	; end of string
0022++ 180E 12          	mov a, c
0023++ 180F FD 9B       	shr a		; divide by 2
0024++ 1811 39          	mov c, a	; C now counts the steps
0025++ 1812             _strrev_L0:
0026++ 1812 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1813 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1814 3E          	mov [d], al	; store left char into right side
0029++ 1815 1B          	mov al, bl
0030++ 1816 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1817 7E          	dec c
0032++ 1818 7F          	dec d
0033++ 1819 C2 00 00    	cmp c, 0
0034++ 181C C7 12 18    	jne _strrev_L0
0035++ 181F             _strrev_end:
0036++ 181F 4C          	popa
0037++ 1820 09          	ret
0038++ 1821             	
0039++ 1821             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1821             ; _strchr
0041++ 1821             ; search string in D for char in AL
0042++ 1821             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1821             _strchr:
0044++ 1821             _strchr_L0:
0045++ 1821 32          	mov bl, [d]
0046++ 1822 C1 00       	cmp bl, 0
0047++ 1824 C6 2F 18    	je _strchr_end
0048++ 1827 BA          	cmp al, bl
0049++ 1828 C6 2F 18    	je _strchr_end
0050++ 182B 79          	inc d
0051++ 182C 0A 21 18    	jmp _strchr_L0
0052++ 182F             _strchr_end:
0053++ 182F 1B          	mov al, bl
0054++ 1830 09          	ret
0055++ 1831             
0056++ 1831             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1831             ; _strstr
0058++ 1831             ; find sub-string
0059++ 1831             ; str1 in SI
0060++ 1831             ; str2 in DI
0061++ 1831             ; SI points to end of source string
0062++ 1831             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1831             _strstr:
0064++ 1831 DB          	push al
0065++ 1832 DA          	push d
0066++ 1833 E3          	push di
0067++ 1834             _strstr_loop:
0068++ 1834 F3          	cmpsb					; compare a byte of the strings
0069++ 1835 C7 40 18    	jne _strstr_ret
0070++ 1838 FC 00 00    	lea d, [di + 0]
0071++ 183B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 183D C7 34 18    	jne _strstr_loop				; equal chars but not at end
0073++ 1840             _strstr_ret:
0074++ 1840 F0          	pop di
0075++ 1841 E7          	pop d
0076++ 1842 E8          	pop al
0077++ 1843 09          	ret
0078++ 1844             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1844             ; length of null terminated string
0080++ 1844             ; result in C
0081++ 1844             ; pointer in D
0082++ 1844             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1844             _strlen:
0084++ 1844 DA          	push d
0085++ 1845 38 00 00    	mov c, 0
0086++ 1848             _strlen_L1:
0087++ 1848 BD 00       	cmp byte [d], 0
0088++ 184A C6 52 18    	je _strlen_ret
0089++ 184D 79          	inc d
0090++ 184E 78          	inc c
0091++ 184F 0A 48 18    	jmp _strlen_L1
0092++ 1852             _strlen_ret:
0093++ 1852 E7          	pop d
0094++ 1853 09          	ret
0095++ 1854             
0096++ 1854             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1854             ; STRCMP
0098++ 1854             ; compare two strings
0099++ 1854             ; str1 in SI
0100++ 1854             ; str2 in DI
0101++ 1854             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1854             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1854             _strcmp:
0104++ 1854 DB          	push al
0105++ 1855 DA          	push d
0106++ 1856 E3          	push di
0107++ 1857 E2          	push si
0108++ 1858             _strcmp_loop:
0109++ 1858 F3          	cmpsb					; compare a byte of the strings
0110++ 1859 C7 64 18    	jne _strcmp_ret
0111++ 185C FB FF FF    	lea d, [si +- 1]
0112++ 185F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1861 C7 58 18    	jne _strcmp_loop				; equal chars but not at end
0114++ 1864             _strcmp_ret:
0115++ 1864 EF          	pop si
0116++ 1865 F0          	pop di
0117++ 1866 E7          	pop d
0118++ 1867 E8          	pop al
0119++ 1868 09          	ret
0120++ 1869             
0121++ 1869             
0122++ 1869             ; STRCPY
0123++ 1869             ; copy null terminated string from SI to DI
0124++ 1869             ; source in SI
0125++ 1869             ; destination in DI
0126++ 1869             _strcpy:
0127++ 1869 E2          	push si
0128++ 186A E3          	push di
0129++ 186B DB          	push al
0130++ 186C             _strcpy_L1:
0131++ 186C F6          	lodsb
0132++ 186D F7          	stosb
0133++ 186E B9 00       	cmp al, 0
0134++ 1870 C7 6C 18    	jne _strcpy_L1
0135++ 1873             _strcpy_end:
0136++ 1873 E8          	pop al
0137++ 1874 F0          	pop di
0138++ 1875 EF          	pop si
0139++ 1876 09          	ret
0140++ 1877             
0141++ 1877             ; STRCAT
0142++ 1877             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1877             ; source in SI
0144++ 1877             ; destination in DI
0145++ 1877             _strcat:
0146++ 1877 E2          	push si
0147++ 1878 E3          	push di
0148++ 1879 D7          	push a
0149++ 187A DA          	push d
0150++ 187B 50          	mov a, di
0151++ 187C 3C          	mov d, a
0152++ 187D             _strcat_goto_end_L1:
0153++ 187D BD 00       	cmp byte[d], 0
0154++ 187F C6 86 18    	je _strcat_start
0155++ 1882 79          	inc d
0156++ 1883 0A 7D 18    	jmp _strcat_goto_end_L1
0157++ 1886             _strcat_start:
0158++ 1886 FD 50       	mov di, d
0159++ 1888             _strcat_L1:
0160++ 1888 F6          	lodsb
0161++ 1889 F7          	stosb
0162++ 188A B9 00       	cmp al, 0
0163++ 188C C7 88 18    	jne _strcat_L1
0164++ 188F             _strcat_end:
0165++ 188F E7          	pop d
0166++ 1890 E4          	pop a
0167++ 1891 F0          	pop di
0168++ 1892 EF          	pop si
0169++ 1893 09          	ret
0170++ 1894             
0171++ 1894             
0005+  1894             
0006+  1894             ;-----------------------------------------------------------------------------
0007+  1894             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1894             ; ASCII in BL
0009+  1894             ; result in AL
0010+  1894             ; ascii for F = 0100 0110
0011+  1894             ; ascii for 9 = 0011 1001
0012+  1894             ;-----------------------------------------------------------------------------
0013+  1894             hex_ascii_encode:
0014+  1894 1B            mov al, bl
0015+  1895 93 40         test al, $40        ; test if letter or number
0016+  1897 C7 9D 18      jnz hex_letter
0017+  189A 87 0F         and al, $0F        ; get number
0018+  189C 09            ret
0019+  189D             hex_letter:
0020+  189D 87 0F         and al, $0F        ; get letter
0021+  189F 6A 09         add al, 9
0022+  18A1 09            ret
0023+  18A2             
0024+  18A2             ;-----------------------------------------------------------------------------
0025+  18A2             ; ATOI
0026+  18A2             ; 2 letter hex string in B
0027+  18A2             ; 8bit integer returned in AL
0028+  18A2             ;-----------------------------------------------------------------------------
0029+  18A2             _atoi:
0030+  18A2 D8            push b
0031+  18A3 07 94 18      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  18A6 30            mov bl, bh
0033+  18A7 DB            push al          ; save a
0034+  18A8 07 94 18      call hex_ascii_encode
0035+  18AB EA            pop bl  
0036+  18AC FD 9E 04      shl al, 4
0037+  18AF 8C            or al, bl
0038+  18B0 E5            pop b
0039+  18B1 09            ret  
0040+  18B2             
0041+  18B2             
0042+  18B2             ;-----------------------------------------------------------------------------
0043+  18B2             ; ITOA
0044+  18B2             ; 8bit value in BL
0045+  18B2             ; 2 byte ASCII result in A
0046+  18B2             ;-----------------------------------------------------------------------------
0047+  18B2             _itoa:
0048+  18B2 DA            push d
0049+  18B3 D8            push b
0050+  18B4 A7 00         mov bh, 0
0051+  18B6 FD A4 04      shr bl, 4  
0052+  18B9 74            mov d, b
0053+  18BA 1F 62 1B      mov al, [d + s_hex_digits]
0054+  18BD 23            mov ah, al
0055+  18BE               
0056+  18BE E5            pop b
0057+  18BF D8            push b
0058+  18C0 A7 00         mov bh, 0
0059+  18C2 FD 87 0F      and bl, $0F
0060+  18C5 74            mov d, b
0061+  18C6 1F 62 1B      mov al, [d + s_hex_digits]
0062+  18C9 E5            pop b
0063+  18CA E7            pop d
0064+  18CB 09            ret
0065+  18CC             
0066+  18CC             ;-----------------------------------------------------------------------------
0067+  18CC             ; HEX STRING TO BINARY
0068+  18CC             ; di = destination address
0069+  18CC             ; si = source
0070+  18CC             ;-----------------------------------------------------------------------------
0071+  18CC             _hex_to_int:
0072+  18CC             _hex_to_int_L1:
0073+  18CC F6            lodsb          ; load from [SI] to AL
0074+  18CD B9 00         cmp al, 0        ; check if ASCII 0
0075+  18CF C6 DC 18      jz _hex_to_int_ret
0076+  18D2 36            mov bh, al
0077+  18D3 F6            lodsb
0078+  18D4 2F            mov bl, al
0079+  18D5 07 A2 18      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  18D8 F7            stosb          ; store AL to [DI]
0081+  18D9 0A CC 18      jmp _hex_to_int_L1
0082+  18DC             _hex_to_int_ret:
0083+  18DC 09            ret    
0084+  18DD             
0085+  18DD             ;-----------------------------------------------------------------------------
0086+  18DD             ; GETCHAR
0087+  18DD             ; char in ah
0088+  18DD             ;-----------------------------------------------------------------------------
0089+  18DD             getch:
0090+  18DD DB            push al
0091+  18DE             getch_retry:
0092+  18DE 19 01         mov al, 1
0093+  18E0 05 03         syscall sys_io      ; receive in AH
0094+  18E2 E8            pop al
0095+  18E3 09            ret
0096+  18E4             
0097+  18E4             ;-----------------------------------------------------------------------------
0098+  18E4             ; PUTCHAR
0099+  18E4             ; char in ah
0100+  18E4             ;-----------------------------------------------------------------------------
0101+  18E4             _putchar:
0102+  18E4 D7            push a
0103+  18E5 19 00         mov al, 0
0104+  18E7 05 03         syscall sys_io      ; char in AH
0105+  18E9 E4            pop a
0106+  18EA 09            ret
0107+  18EB             
0108+  18EB             ;-----------------------------------------------------------------------------
0109+  18EB             ;; INPUT A STRING
0110+  18EB             ;; terminates with null
0111+  18EB             ;; pointer in D
0112+  18EB             ;-----------------------------------------------------------------------------
0113+  18EB             _gets:
0114+  18EB D7            push a
0115+  18EC DA            push d
0116+  18ED             _gets_loop:
0117+  18ED 19 01         mov al, 1
0118+  18EF 05 03         syscall sys_io      ; receive in AH
0119+  18F1 B9 00         cmp al, 0        ; check error code (AL)
0120+  18F3 C6 ED 18      je _gets_loop      ; if no char received, retry
0121+  18F6             
0122+  18F6 76 1B         cmp ah, 27
0123+  18F8 C6 19 19      je _gets_ansi_esc
0124+  18FB 76 0A         cmp ah, $0A        ; LF
0125+  18FD C6 84 19      je _gets_end
0126+  1900 76 0D         cmp ah, $0D        ; CR
0127+  1902 C6 84 19      je _gets_end
0128+  1905 76 5C         cmp ah, $5C        ; '\\'
0129+  1907 C6 45 19      je _gets_escape
0130+  190A               
0131+  190A 76 08         cmp ah, $08      ; check for backspace
0132+  190C C6 15 19      je _gets_backspace
0133+  190F             
0134+  190F 1A            mov al, ah
0135+  1910 3E            mov [d], al
0136+  1911 79            inc d
0137+  1912 0A ED 18      jmp _gets_loop
0138+  1915             _gets_backspace:
0139+  1915 7F            dec d
0140+  1916 0A ED 18      jmp _gets_loop
0141+  1919             _gets_ansi_esc:
0142+  1919 19 01         mov al, 1
0143+  191B 05 03         syscall sys_io        ; receive in AH without echo
0144+  191D B9 00         cmp al, 0          ; check error code (AL)
0145+  191F C6 19 19      je _gets_ansi_esc    ; if no char received, retry
0146+  1922 76 5B         cmp ah, '['
0147+  1924 C7 ED 18      jne _gets_loop
0148+  1927             _gets_ansi_esc_2:
0149+  1927 19 01         mov al, 1
0150+  1929 05 03         syscall sys_io          ; receive in AH without echo
0151+  192B B9 00         cmp al, 0            ; check error code (AL)
0152+  192D C6 27 19      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1930 76 44         cmp ah, 'D'
0154+  1932 C6 3D 19      je _gets_left_arrow
0155+  1935 76 43         cmp ah, 'C'
0156+  1937 C6 41 19      je _gets_right_arrow
0157+  193A 0A ED 18      jmp _gets_loop
0158+  193D             _gets_left_arrow:
0159+  193D 7F            dec d
0160+  193E 0A ED 18      jmp _gets_loop
0161+  1941             _gets_right_arrow:
0162+  1941 79            inc d
0163+  1942 0A ED 18      jmp _gets_loop
0164+  1945             _gets_escape:
0165+  1945 19 01         mov al, 1
0166+  1947 05 03         syscall sys_io      ; receive in AH
0167+  1949 B9 00         cmp al, 0        ; check error code (AL)
0168+  194B C6 45 19      je _gets_escape      ; if no char received, retry
0169+  194E 76 6E         cmp ah, 'n'
0170+  1950 C6 6F 19      je _gets_LF
0171+  1953 76 72         cmp ah, 'r'
0172+  1955 C6 76 19      je _gets_CR
0173+  1958 76 30         cmp ah, '0'
0174+  195A C6 7D 19      je _gets_NULL
0175+  195D 76 5C         cmp ah, $5C  ; '\'
0176+  195F C6 68 19      je _gets_slash
0177+  1962 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1963 3E            mov [d], al
0179+  1964 79            inc d
0180+  1965 0A ED 18      jmp _gets_loop
0181+  1968             _gets_slash:
0182+  1968 19 5C         mov al, $5C
0183+  196A 3E            mov [d], al
0184+  196B 79            inc d
0185+  196C 0A ED 18      jmp _gets_loop
0186+  196F             _gets_LF:
0187+  196F 19 0A         mov al, $0A
0188+  1971 3E            mov [d], al
0189+  1972 79            inc d
0190+  1973 0A ED 18      jmp _gets_loop
0191+  1976             _gets_CR:
0192+  1976 19 0D         mov al, $0D
0193+  1978 3E            mov [d], al
0194+  1979 79            inc d
0195+  197A 0A ED 18      jmp _gets_loop
0196+  197D             _gets_NULL:
0197+  197D 19 00         mov al, $00
0198+  197F 3E            mov [d], al
0199+  1980 79            inc d
0200+  1981 0A ED 18      jmp _gets_loop
0201+  1984             _gets_end:
0202+  1984 19 00         mov al, 0
0203+  1986 3E            mov [d], al        ; terminate string
0204+  1987 E7            pop d
0205+  1988 E4            pop a
0206+  1989 09            ret
0207+  198A             
0208+  198A             ;-----------------------------------------------------------------------------
0209+  198A             ;; INPUT TEXT
0210+  198A             ;; terminated with CTRL+D
0211+  198A             ;; pointer in D
0212+  198A             ;-----------------------------------------------------------------------------
0213+  198A             _gettxt:
0214+  198A D7            push a
0215+  198B DA            push d
0216+  198C             _gettxt_loop:
0217+  198C 19 01         mov al, 1
0218+  198E 05 03         syscall sys_io      ; receive in AH
0219+  1990 B9 00         cmp al, 0        ; check error code (AL)
0220+  1992 C6 8C 19      je _gettxt_loop    ; if no char received, retry
0221+  1995 76 04         cmp ah, 4      ; EOT
0222+  1997 C6 D5 19      je _gettxt_end
0223+  199A 76 08         cmp ah, $08      ; check for backspace
0224+  199C C6 D1 19      je _gettxt_backspace
0225+  199F 76 5C         cmp ah, $5C        ; '\'
0226+  19A1 C6 AA 19      je _gettxt_escape
0227+  19A4 1A            mov al, ah
0228+  19A5 3E            mov [d], al
0229+  19A6 79            inc d
0230+  19A7 0A 8C 19      jmp _gettxt_loop
0231+  19AA             _gettxt_escape:
0232+  19AA 19 01         mov al, 1
0233+  19AC 05 03         syscall sys_io      ; receive in AH
0234+  19AE B9 00         cmp al, 0        ; check error code (AL)
0235+  19B0 C6 AA 19      je _gettxt_escape    ; if no char received, retry
0236+  19B3 76 6E         cmp ah, 'n'
0237+  19B5 C6 C3 19      je _gettxt_LF
0238+  19B8 76 72         cmp ah, 'r'
0239+  19BA C6 CA 19      je _gettxt_CR
0240+  19BD 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  19BE 3E            mov [d], al
0242+  19BF 79            inc d
0243+  19C0 0A 8C 19      jmp _gettxt_loop
0244+  19C3             _gettxt_LF:
0245+  19C3 19 0A         mov al, $0A
0246+  19C5 3E            mov [d], al
0247+  19C6 79            inc d
0248+  19C7 0A 8C 19      jmp _gettxt_loop
0249+  19CA             _gettxt_CR:
0250+  19CA 19 0D         mov al, $0D
0251+  19CC 3E            mov [d], al
0252+  19CD 79            inc d
0253+  19CE 0A 8C 19      jmp _gettxt_loop
0254+  19D1             _gettxt_backspace:
0255+  19D1 7F            dec d
0256+  19D2 0A 8C 19      jmp _gettxt_loop
0257+  19D5             _gettxt_end:
0258+  19D5 19 00         mov al, 0
0259+  19D7 3E            mov [d], al        ; terminate string
0260+  19D8 E7            pop d
0261+  19D9 E4            pop a
0262+  19DA 09            ret
0263+  19DB             
0264+  19DB             ;-----------------------------------------------------------------------------
0265+  19DB             ; PRINT NEW LINE
0266+  19DB             ;-----------------------------------------------------------------------------
0267+  19DB             printnl:
0268+  19DB D7            push a
0269+  19DC 10 00 0A      mov a, $0A00
0270+  19DF 05 03         syscall sys_io
0271+  19E1 10 00 0D      mov a, $0D00
0272+  19E4 05 03         syscall sys_io
0273+  19E6 E4            pop a
0274+  19E7 09            ret
0275+  19E8             
0276+  19E8             ;-----------------------------------------------------------------------------
0277+  19E8             ; _strtoint
0278+  19E8             ; 4 digit hex string number in d
0279+  19E8             ; integer returned in A
0280+  19E8             ;-----------------------------------------------------------------------------
0281+  19E8             _strtointx:
0282+  19E8 D8            push b
0283+  19E9 32            mov bl, [d]
0284+  19EA 37            mov bh, bl
0285+  19EB 33 01 00      mov bl, [d + 1]
0286+  19EE 07 A2 18      call _atoi        ; convert to int in AL
0287+  19F1 23            mov ah, al        ; move to AH
0288+  19F2 33 02 00      mov bl, [d + 2]
0289+  19F5 37            mov bh, bl
0290+  19F6 33 03 00      mov bl, [d + 3]
0291+  19F9 07 A2 18      call _atoi        ; convert to int in AL
0292+  19FC E5            pop b
0293+  19FD 09            ret
0294+  19FE             
0295+  19FE             ;-----------------------------------------------------------------------------
0296+  19FE             ; _strtoint
0297+  19FE             ; 5 digit base10 string number in d
0298+  19FE             ; integer returned in A
0299+  19FE             ;-----------------------------------------------------------------------------
0300+  19FE             _strtoint:
0301+  19FE E2            push si
0302+  19FF D8            push b
0303+  1A00 D9            push c
0304+  1A01 DA            push d
0305+  1A02 07 44 18      call _strlen      ; get string length in C
0306+  1A05 7E            dec c
0307+  1A06 FD 4E         mov si, d
0308+  1A08 12            mov a, c
0309+  1A09 FD 99         shl a
0310+  1A0B 3B 7A 1B      mov d, table_power
0311+  1A0E 59            add d, a
0312+  1A0F 38 00 00      mov c, 0
0313+  1A12             _strtoint_L0:
0314+  1A12 F6            lodsb      ; load ASCII to al
0315+  1A13 B9 00         cmp al, 0
0316+  1A15 C6 28 1A      je _strtoint_end
0317+  1A18 6F 30         sub al, $30    ; make into integer
0318+  1A1A 22 00         mov ah, 0
0319+  1A1C 2A            mov b, [d]
0320+  1A1D AC            mul a, b      ; result in B since it fits in 16bits
0321+  1A1E 11            mov a, b
0322+  1A1F 28            mov b, c
0323+  1A20 54            add a, b
0324+  1A21 39            mov c, a
0325+  1A22 63 02 00      sub d, 2
0326+  1A25 0A 12 1A      jmp _strtoint_L0
0327+  1A28             _strtoint_end:
0328+  1A28 12            mov a, c
0329+  1A29 E7            pop d
0330+  1A2A E6            pop c
0331+  1A2B E5            pop b
0332+  1A2C EF            pop si
0333+  1A2D 09            ret
0334+  1A2E             
0335+  1A2E             ;-----------------------------------------------------------------------------
0336+  1A2E             ; PRINT NULL TERMINATED STRING
0337+  1A2E             ; pointer in D
0338+  1A2E             ;-----------------------------------------------------------------------------
0339+  1A2E             _puts:
0340+  1A2E D7            push a
0341+  1A2F DA            push d
0342+  1A30             _puts_L1:
0343+  1A30 1E            mov al, [d]
0344+  1A31 B9 00         cmp al, 0
0345+  1A33 C6 3F 1A      jz _puts_END
0346+  1A36 23            mov ah, al
0347+  1A37 19 00         mov al, 0
0348+  1A39 05 03         syscall sys_io
0349+  1A3B 79            inc d
0350+  1A3C 0A 30 1A      jmp _puts_L1
0351+  1A3F             _puts_END:
0352+  1A3F E7            pop d
0353+  1A40 E4            pop a
0354+  1A41 09            ret
0355+  1A42             
0356+  1A42             ;-----------------------------------------------------------------------------
0357+  1A42             ; PRINT N SIZE STRING
0358+  1A42             ; pointer in D
0359+  1A42             ; size in C
0360+  1A42             ;-----------------------------------------------------------------------------
0361+  1A42             _putsn:
0362+  1A42 DB            push al
0363+  1A43 DA            push d
0364+  1A44 D9            push c
0365+  1A45             _putsn_L0:
0366+  1A45 1E            mov al, [d]
0367+  1A46 23            mov ah, al
0368+  1A47 19 00         mov al, 0
0369+  1A49 05 03         syscall sys_io
0370+  1A4B 79            inc d
0371+  1A4C 7E            dec c  
0372+  1A4D C2 00 00      cmp c, 0
0373+  1A50 C7 45 1A      jne _putsn_L0
0374+  1A53             _putsn_end:
0375+  1A53 E6            pop c
0376+  1A54 E7            pop d
0377+  1A55 E8            pop al
0378+  1A56 09            ret
0379+  1A57             
0380+  1A57             ;-----------------------------------------------------------------------------
0381+  1A57             ; print 16bit decimal number
0382+  1A57             ; input number in A
0383+  1A57             ;-----------------------------------------------------------------------------
0384+  1A57             print_u16d:
0385+  1A57 D7            push a
0386+  1A58 D8            push b
0387+  1A59 26 10 27      mov b, 10000
0388+  1A5C AE            div a, b      ; get 10000's coeff.
0389+  1A5D 07 7F 1A      call print_number
0390+  1A60 11            mov a, b
0391+  1A61 26 E8 03      mov b, 1000
0392+  1A64 AE            div a, b      ; get 1000's coeff.
0393+  1A65 07 7F 1A      call print_number
0394+  1A68 11            mov a, b
0395+  1A69 26 64 00      mov b, 100
0396+  1A6C AE            div a, b
0397+  1A6D 07 7F 1A      call print_number
0398+  1A70 11            mov a, b
0399+  1A71 26 0A 00      mov b, 10
0400+  1A74 AE            div a, b
0401+  1A75 07 7F 1A      call print_number
0402+  1A78 1B            mov al, bl      ; 1's coeff in bl
0403+  1A79 07 7F 1A      call print_number
0404+  1A7C E5            pop b
0405+  1A7D E4            pop a
0406+  1A7E 09            ret
0407+  1A7F             
0408+  1A7F             ;-----------------------------------------------------------------------------
0409+  1A7F             ; print AL
0410+  1A7F             ;-----------------------------------------------------------------------------
0411+  1A7F             print_number:
0412+  1A7F 6A 30         add al, $30
0413+  1A81 23            mov ah, al
0414+  1A82 07 E4 18      call _putchar
0415+  1A85 09            ret
0416+  1A86             
0417+  1A86             ;-----------------------------------------------------------------------------
0418+  1A86             ; PRINT 16BIT HEX INTEGER
0419+  1A86             ; integer value in reg B
0420+  1A86             ;-----------------------------------------------------------------------------
0421+  1A86             print_u16x:
0422+  1A86 D7            push a
0423+  1A87 D8            push b
0424+  1A88 DD            push bl
0425+  1A89 30            mov bl, bh
0426+  1A8A 07 B2 18      call _itoa        ; convert bh to char in A
0427+  1A8D 2F            mov bl, al        ; save al
0428+  1A8E 19 00         mov al, 0
0429+  1A90 05 03         syscall sys_io        ; display AH
0430+  1A92 24            mov ah, bl        ; retrieve al
0431+  1A93 19 00         mov al, 0
0432+  1A95 05 03         syscall sys_io        ; display AL
0433+  1A97             
0434+  1A97 EA            pop bl
0435+  1A98 07 B2 18      call _itoa        ; convert bh to char in A
0436+  1A9B 2F            mov bl, al        ; save al
0437+  1A9C 19 00         mov al, 0
0438+  1A9E 05 03         syscall sys_io        ; display AH
0439+  1AA0 24            mov ah, bl        ; retrieve al
0440+  1AA1 19 00         mov al, 0
0441+  1AA3 05 03         syscall sys_io        ; display AL
0442+  1AA5             
0443+  1AA5 E5            pop b
0444+  1AA6 E4            pop a
0445+  1AA7 09            ret
0446+  1AA8             
0447+  1AA8             ;-----------------------------------------------------------------------------
0448+  1AA8             ; INPUT 16BIT HEX INTEGER
0449+  1AA8             ; read 16bit integer into A
0450+  1AA8             ;-----------------------------------------------------------------------------
0451+  1AA8             scan_u16x:
0452+  1AA8 F8 10 00      enter 16
0453+  1AAB D8            push b
0454+  1AAC DA            push d
0455+  1AAD             
0456+  1AAD FA F1 FF      lea d, [bp + -15]
0457+  1AB0 07 EB 18      call _gets        ; get number
0458+  1AB3             
0459+  1AB3 32            mov bl, [d]
0460+  1AB4 37            mov bh, bl
0461+  1AB5 33 01 00      mov bl, [d + 1]
0462+  1AB8 07 A2 18      call _atoi        ; convert to int in AL
0463+  1ABB 23            mov ah, al        ; move to AH
0464+  1ABC             
0465+  1ABC 33 02 00      mov bl, [d + 2]
0466+  1ABF 37            mov bh, bl
0467+  1AC0 33 03 00      mov bl, [d + 3]
0468+  1AC3 07 A2 18      call _atoi        ; convert to int in AL
0469+  1AC6             
0470+  1AC6 E7            pop d
0471+  1AC7 E5            pop b
0472+  1AC8 F9            leave
0473+  1AC9 09            ret
0474+  1ACA             
0475+  1ACA             ;-----------------------------------------------------------------------------
0476+  1ACA             ; PRINT 8bit HEX INTEGER
0477+  1ACA             ; integer value in reg bl
0478+  1ACA             ;-----------------------------------------------------------------------------
0479+  1ACA             print_u8x:
0480+  1ACA D7            push a
0481+  1ACB DD            push bl
0482+  1ACC             
0483+  1ACC 07 B2 18      call _itoa        ; convert bl to char in A
0484+  1ACF 2F            mov bl, al        ; save al
0485+  1AD0 19 00         mov al, 0
0486+  1AD2 05 03         syscall sys_io        ; display AH
0487+  1AD4 24            mov ah, bl        ; retrieve al
0488+  1AD5 19 00         mov al, 0
0489+  1AD7 05 03         syscall sys_io        ; display AL
0490+  1AD9             
0491+  1AD9 EA            pop bl
0492+  1ADA E4            pop a
0493+  1ADB 09            ret
0494+  1ADC             
0495+  1ADC             ;-----------------------------------------------------------------------------
0496+  1ADC             ; print 8bit decimal unsigned number
0497+  1ADC             ; input number in AL
0498+  1ADC             ;-----------------------------------------------------------------------------
0499+  1ADC             print_u8d:
0500+  1ADC D7            push a
0501+  1ADD D8            push b
0502+  1ADE             
0503+  1ADE 22 00         mov ah, 0
0504+  1AE0 26 64 00      mov b, 100
0505+  1AE3 AE            div a, b
0506+  1AE4 D8            push b      ; save remainder
0507+  1AE5 B9 00         cmp al, 0
0508+  1AE7 C6 F1 1A      je skip100
0509+  1AEA 6A 30         add al, $30
0510+  1AEC 23            mov ah, al
0511+  1AED 19 00         mov al, 0
0512+  1AEF 05 03         syscall sys_io  ; print coeff
0513+  1AF1             skip100:
0514+  1AF1 E4            pop a
0515+  1AF2 22 00         mov ah, 0
0516+  1AF4 26 0A 00      mov b, 10
0517+  1AF7 AE            div a, b
0518+  1AF8 D8            push b      ; save remainder
0519+  1AF9 B9 00         cmp al, 0
0520+  1AFB C6 05 1B      je skip10
0521+  1AFE 6A 30         add al, $30
0522+  1B00 23            mov ah, al
0523+  1B01 19 00         mov al, 0
0524+  1B03 05 03         syscall sys_io  ; print coeff
0525+  1B05             skip10:
0526+  1B05 E4            pop a
0527+  1B06 1B            mov al, bl
0528+  1B07 6A 30         add al, $30
0529+  1B09 23            mov ah, al
0530+  1B0A 19 00         mov al, 0
0531+  1B0C 05 03         syscall sys_io  ; print coeff
0532+  1B0E E5            pop b
0533+  1B0F E4            pop a
0534+  1B10 09            ret
0535+  1B11             
0536+  1B11             ;-----------------------------------------------------------------------------
0537+  1B11             ; INPUT 8BIT HEX INTEGER
0538+  1B11             ; read 8bit integer into AL
0539+  1B11             ;-----------------------------------------------------------------------------
0540+  1B11             scan_u8x:
0541+  1B11 F8 04 00      enter 4
0542+  1B14 D8            push b
0543+  1B15 DA            push d
0544+  1B16             
0545+  1B16 FA FD FF      lea d, [bp + -3]
0546+  1B19 07 EB 18      call _gets        ; get number
0547+  1B1C             
0548+  1B1C 32            mov bl, [d]
0549+  1B1D 37            mov bh, bl
0550+  1B1E 33 01 00      mov bl, [d + 1]
0551+  1B21 07 A2 18      call _atoi        ; convert to int in AL
0552+  1B24             
0553+  1B24 E7            pop d
0554+  1B25 E5            pop b
0555+  1B26 F9            leave
0556+  1B27 09            ret
0557+  1B28             
0558+  1B28             ;-----------------------------------------------------------------------------
0559+  1B28             ; input decimal number
0560+  1B28             ; result in A
0561+  1B28             ; 655'\0'
0562+  1B28             ; low--------high
0563+  1B28             ;-----------------------------------------------------------------------------
0564+  1B28             scan_u16d:
0565+  1B28 F8 08 00      enter 8
0566+  1B2B E2            push si
0567+  1B2C D8            push b
0568+  1B2D D9            push c
0569+  1B2E DA            push d
0570+  1B2F FA F9 FF      lea d, [bp +- 7]
0571+  1B32 07 EB 18      call _gets
0572+  1B35 07 44 18      call _strlen      ; get string length in C
0573+  1B38 7E            dec c
0574+  1B39 FD 4E         mov si, d
0575+  1B3B 12            mov a, c
0576+  1B3C FD 99         shl a
0577+  1B3E 3B 7A 1B      mov d, table_power
0578+  1B41 59            add d, a
0579+  1B42 38 00 00      mov c, 0
0580+  1B45             mul_loop:
0581+  1B45 F6            lodsb      ; load ASCII to al
0582+  1B46 B9 00         cmp al, 0
0583+  1B48 C6 5B 1B      je mul_exit
0584+  1B4B 6F 30         sub al, $30    ; make into integer
0585+  1B4D 22 00         mov ah, 0
0586+  1B4F 2A            mov b, [d]
0587+  1B50 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1B51 11            mov a, b
0589+  1B52 28            mov b, c
0590+  1B53 54            add a, b
0591+  1B54 39            mov c, a
0592+  1B55 63 02 00      sub d, 2
0593+  1B58 0A 45 1B      jmp mul_loop
0594+  1B5B             mul_exit:
0595+  1B5B 12            mov a, c
0596+  1B5C E7            pop d
0597+  1B5D E6            pop c
0598+  1B5E E5            pop b
0599+  1B5F EF            pop si
0600+  1B60 F9            leave
0601+  1B61 09            ret
0602+  1B62             
0603+  1B62 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1B66 34 35 36 37 
0603+  1B6A 38 39 41 42 
0603+  1B6E 43 44 45 46 
0604+  1B72 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1B76 1B 5B 48 00 
0605+  1B7A             
0606+  1B7A             table_power:
0607+  1B7A 01 00         .dw 1
0608+  1B7C 0A 00         .dw 10
0609+  1B7E 64 00         .dw 100
0610+  1B80 E8 03         .dw 1000
0611+  1B82 10 27         .dw 100003148   1B84             ; --- END INLINE ASM BLOCK
3149   1B84             
3150   1B84 F9            leave
3151   1B85 09            ret
3152   1B86             
3153   1B86             show:
3154   1B86 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3155   1B89             ;; int i, j; 
3156   1B89 52 02 00      sub sp, 2 ; i
3157   1B8C 52 02 00      sub sp, 2 ; j
3158   1B8F             ;; for(i = 0; i <   30     ; i++){ 
3159   1B8F             _for51_init:
3160   1B8F FA FF FF      lea d, [bp + -1] ; $i
3161   1B92 DA            push d
3162   1B93 26 00 00      mov b, $0
3163   1B96 E7            pop d
3164   1B97 FD 43         mov [d], b
3165   1B99             _for51_cond:
3166   1B99 FA FF FF      lea d, [bp + -1] ; $i
3167   1B9C 2A            mov b, [d]
3168   1B9D             ; START RELATIONAL
3169   1B9D D7            push a
3170   1B9E 11            mov a, b
3171   1B9F 26 1E 00      mov b, $1e
3172   1BA2 B0            cmp a, b
3173   1BA3 FD 73         slt ; < (signed)
3174   1BA5 E4            pop a
3175   1BA6             ; END RELATIONAL
3176   1BA6 C0 00 00      cmp b, 0
3177   1BA9 C6 36 1C      je _for51_exit
3178   1BAC             _for51_block:
3179   1BAC             ;; for(j = 0; j <    40    ; j++){ 
3180   1BAC             _for52_init:
3181   1BAC FA FD FF      lea d, [bp + -3] ; $j
3182   1BAF DA            push d
3183   1BB0 26 00 00      mov b, $0
3184   1BB3 E7            pop d
3185   1BB4 FD 43         mov [d], b
3186   1BB6             _for52_cond:
3187   1BB6 FA FD FF      lea d, [bp + -3] ; $j
3188   1BB9 2A            mov b, [d]
3189   1BBA             ; START RELATIONAL
3190   1BBA D7            push a
3191   1BBB 11            mov a, b
3192   1BBC 26 28 00      mov b, $28
3193   1BBF B0            cmp a, b
3194   1BC0 FD 73         slt ; < (signed)
3195   1BC2 E4            pop a
3196   1BC3             ; END RELATIONAL
3197   1BC3 C0 00 00      cmp b, 0
3198   1BC6 C6 1C 1C      je _for52_exit
3199   1BC9             _for52_block:
3200   1BC9             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
3201   1BC9             _ternary53_cond:
3202   1BC9 3B 57 23      mov d, _currState_data ; $currState
3203   1BCC D7            push a
3204   1BCD DA            push d
3205   1BCE FA FF FF      lea d, [bp + -1] ; $i
3206   1BD1 2A            mov b, [d]
3207   1BD2 E7            pop d
3208   1BD3 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3209   1BD7 DA            push d
3210   1BD8 FA FD FF      lea d, [bp + -3] ; $j
3211   1BDB 2A            mov b, [d]
3212   1BDC E7            pop d
3213   1BDD 5A            add d, b
3214   1BDE E4            pop a
3215   1BDF 32            mov bl, [d]
3216   1BE0 A7 00         mov bh, 0
3217   1BE2             ; START RELATIONAL
3218   1BE2 D7            push a
3219   1BE3 11            mov a, b
3220   1BE4 26 40 00      mov b, $40
3221   1BE7 B0            cmp a, b
3222   1BE8 FD 71         seq ; ==
3223   1BEA E4            pop a
3224   1BEB             ; END RELATIONAL
3225   1BEB C0 00 00      cmp b, 0
3226   1BEE C6 00 1C      je _ternary53_false
3227   1BF1             _ternary53_true:
3228   1BF1 26 65 28      mov b, _s4 ; "@ "
3229   1BF4 FD AB         swp b
3230   1BF6 D8            push b
3231   1BF7 07 F9 09      call printf
3232   1BFA 51 02 00      add sp, 2
3233   1BFD 0A 0C 1C      jmp _ternary53_exit
3234   1C00             _ternary53_false:
3235   1C00 26 68 28      mov b, _s5 ; ". "
3236   1C03 FD AB         swp b
3237   1C05 D8            push b
3238   1C06 07 F9 09      call printf
3239   1C09 51 02 00      add sp, 2
3240   1C0C             _ternary53_exit:
3241   1C0C             _for52_update:
3242   1C0C FA FD FF      lea d, [bp + -3] ; $j
3243   1C0F 2A            mov b, [d]
3244   1C10 D8            push b
3245   1C11 FD 77         inc b
3246   1C13 FA FD FF      lea d, [bp + -3] ; $j
3247   1C16 FD 43         mov [d], b
3248   1C18 E5            pop b
3249   1C19 0A B6 1B      jmp _for52_cond
3250   1C1C             _for52_exit:
3251   1C1C             ;; putchar(10); 
3252   1C1C 26 0A 00      mov b, $a
3253   1C1F DD            push bl
3254   1C20 07 53 17      call putchar
3255   1C23 51 01 00      add sp, 1
3256   1C26             _for51_update:
3257   1C26 FA FF FF      lea d, [bp + -1] ; $i
3258   1C29 2A            mov b, [d]
3259   1C2A D8            push b
3260   1C2B FD 77         inc b
3261   1C2D FA FF FF      lea d, [bp + -1] ; $i
3262   1C30 FD 43         mov [d], b
3263   1C32 E5            pop b
3264   1C33 0A 99 1B      jmp _for51_cond
3265   1C36             _for51_exit:
3266   1C36 F9            leave
3267   1C37 09            ret
3268   1C38             
3269   1C38             alive:
3270   1C38 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3271   1C3B             ;; if(currState[i][j] == '@') return 1; 
3272   1C3B             _if54_cond:
3273   1C3B 3B 57 23      mov d, _currState_data ; $currState
3274   1C3E D7            push a
3275   1C3F DA            push d
3276   1C40 FA 05 00      lea d, [bp + 5] ; $i
3277   1C43 2A            mov b, [d]
3278   1C44 E7            pop d
3279   1C45 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3280   1C49 DA            push d
3281   1C4A FA 07 00      lea d, [bp + 7] ; $j
3282   1C4D 2A            mov b, [d]
3283   1C4E E7            pop d
3284   1C4F 5A            add d, b
3285   1C50 E4            pop a
3286   1C51 32            mov bl, [d]
3287   1C52 A7 00         mov bh, 0
3288   1C54             ; START RELATIONAL
3289   1C54 D7            push a
3290   1C55 11            mov a, b
3291   1C56 26 40 00      mov b, $40
3292   1C59 B0            cmp a, b
3293   1C5A FD 71         seq ; ==
3294   1C5C E4            pop a
3295   1C5D             ; END RELATIONAL
3296   1C5D C0 00 00      cmp b, 0
3297   1C60 C6 6B 1C      je _if54_else
3298   1C63             _if54_true:
3299   1C63             ;; return 1; 
3300   1C63 26 01 00      mov b, $1
3301   1C66 F9            leave
3302   1C67 09            ret
3303   1C68 0A 70 1C      jmp _if54_exit
3304   1C6B             _if54_else:
3305   1C6B             ;; return 0; 
3306   1C6B 26 00 00      mov b, $0
3307   1C6E F9            leave
3308   1C6F 09            ret
3309   1C70             _if54_exit:
3310   1C70 F9            leave
3311   1C71 09            ret
3312   1C72             
3313   1C72             neighbours:
3314   1C72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3315   1C75             ;; int count; 
3316   1C75 52 02 00      sub sp, 2 ; count
3317   1C78             ;; count = 0; 
3318   1C78 FA FF FF      lea d, [bp + -1] ; $count
3319   1C7B DA            push d
3320   1C7C 26 00 00      mov b, $0
3321   1C7F E7            pop d
3322   1C80 FD 43         mov [d], b
3323   1C82             ;; if(currState[i+-1][j] == '@')			count++; 
3324   1C82             _if55_cond:
3325   1C82 3B 57 23      mov d, _currState_data ; $currState
3326   1C85 D7            push a
3327   1C86 DA            push d
3328   1C87 FA 05 00      lea d, [bp + 5] ; $i
3329   1C8A 2A            mov b, [d]
3330   1C8B             ; START TERMS
3331   1C8B D7            push a
3332   1C8C 11            mov a, b
3333   1C8D 26 FF FF      mov b, $ffff
3334   1C90 56            add b, a
3335   1C91 E4            pop a
3336   1C92             ; END TERMS
3337   1C92 E7            pop d
3338   1C93 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3339   1C97 DA            push d
3340   1C98 FA 07 00      lea d, [bp + 7] ; $j
3341   1C9B 2A            mov b, [d]
3342   1C9C E7            pop d
3343   1C9D 5A            add d, b
3344   1C9E E4            pop a
3345   1C9F 32            mov bl, [d]
3346   1CA0 A7 00         mov bh, 0
3347   1CA2             ; START RELATIONAL
3348   1CA2 D7            push a
3349   1CA3 11            mov a, b
3350   1CA4 26 40 00      mov b, $40
3351   1CA7 B0            cmp a, b
3352   1CA8 FD 71         seq ; ==
3353   1CAA E4            pop a
3354   1CAB             ; END RELATIONAL
3355   1CAB C0 00 00      cmp b, 0
3356   1CAE C6 C1 1C      je _if55_exit
3357   1CB1             _if55_true:
3358   1CB1             ;; count++; 
3359   1CB1 FA FF FF      lea d, [bp + -1] ; $count
3360   1CB4 2A            mov b, [d]
3361   1CB5 D8            push b
3362   1CB6 FD 77         inc b
3363   1CB8 FA FF FF      lea d, [bp + -1] ; $count
3364   1CBB FD 43         mov [d], b
3365   1CBD E5            pop b
3366   1CBE 0A C1 1C      jmp _if55_exit
3367   1CC1             _if55_exit:
3368   1CC1             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
3369   1CC1             _if56_cond:
3370   1CC1 3B 57 23      mov d, _currState_data ; $currState
3371   1CC4 D7            push a
3372   1CC5 DA            push d
3373   1CC6 FA 05 00      lea d, [bp + 5] ; $i
3374   1CC9 2A            mov b, [d]
3375   1CCA             ; START TERMS
3376   1CCA D7            push a
3377   1CCB 11            mov a, b
3378   1CCC 26 FF FF      mov b, $ffff
3379   1CCF 56            add b, a
3380   1CD0 E4            pop a
3381   1CD1             ; END TERMS
3382   1CD1 E7            pop d
3383   1CD2 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3384   1CD6 DA            push d
3385   1CD7 FA 07 00      lea d, [bp + 7] ; $j
3386   1CDA 2A            mov b, [d]
3387   1CDB             ; START TERMS
3388   1CDB D7            push a
3389   1CDC 11            mov a, b
3390   1CDD 26 FF FF      mov b, $ffff
3391   1CE0 56            add b, a
3392   1CE1 E4            pop a
3393   1CE2             ; END TERMS
3394   1CE2 E7            pop d
3395   1CE3 5A            add d, b
3396   1CE4 E4            pop a
3397   1CE5 32            mov bl, [d]
3398   1CE6 A7 00         mov bh, 0
3399   1CE8             ; START RELATIONAL
3400   1CE8 D7            push a
3401   1CE9 11            mov a, b
3402   1CEA 26 40 00      mov b, $40
3403   1CED B0            cmp a, b
3404   1CEE FD 71         seq ; ==
3405   1CF0 E4            pop a
3406   1CF1             ; END RELATIONAL
3407   1CF1 C0 00 00      cmp b, 0
3408   1CF4 C6 07 1D      je _if56_exit
3409   1CF7             _if56_true:
3410   1CF7             ;; count++; 
3411   1CF7 FA FF FF      lea d, [bp + -1] ; $count
3412   1CFA 2A            mov b, [d]
3413   1CFB D8            push b
3414   1CFC FD 77         inc b
3415   1CFE FA FF FF      lea d, [bp + -1] ; $count
3416   1D01 FD 43         mov [d], b
3417   1D03 E5            pop b
3418   1D04 0A 07 1D      jmp _if56_exit
3419   1D07             _if56_exit:
3420   1D07             ;; if(currState[i+-1][j+1] == '@') 	count++; 
3421   1D07             _if57_cond:
3422   1D07 3B 57 23      mov d, _currState_data ; $currState
3423   1D0A D7            push a
3424   1D0B DA            push d
3425   1D0C FA 05 00      lea d, [bp + 5] ; $i
3426   1D0F 2A            mov b, [d]
3427   1D10             ; START TERMS
3428   1D10 D7            push a
3429   1D11 11            mov a, b
3430   1D12 26 FF FF      mov b, $ffff
3431   1D15 56            add b, a
3432   1D16 E4            pop a
3433   1D17             ; END TERMS
3434   1D17 E7            pop d
3435   1D18 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3436   1D1C DA            push d
3437   1D1D FA 07 00      lea d, [bp + 7] ; $j
3438   1D20 2A            mov b, [d]
3439   1D21             ; START TERMS
3440   1D21 D7            push a
3441   1D22 11            mov a, b
3442   1D23 26 01 00      mov b, $1
3443   1D26 56            add b, a
3444   1D27 E4            pop a
3445   1D28             ; END TERMS
3446   1D28 E7            pop d
3447   1D29 5A            add d, b
3448   1D2A E4            pop a
3449   1D2B 32            mov bl, [d]
3450   1D2C A7 00         mov bh, 0
3451   1D2E             ; START RELATIONAL
3452   1D2E D7            push a
3453   1D2F 11            mov a, b
3454   1D30 26 40 00      mov b, $40
3455   1D33 B0            cmp a, b
3456   1D34 FD 71         seq ; ==
3457   1D36 E4            pop a
3458   1D37             ; END RELATIONAL
3459   1D37 C0 00 00      cmp b, 0
3460   1D3A C6 4D 1D      je _if57_exit
3461   1D3D             _if57_true:
3462   1D3D             ;; count++; 
3463   1D3D FA FF FF      lea d, [bp + -1] ; $count
3464   1D40 2A            mov b, [d]
3465   1D41 D8            push b
3466   1D42 FD 77         inc b
3467   1D44 FA FF FF      lea d, [bp + -1] ; $count
3468   1D47 FD 43         mov [d], b
3469   1D49 E5            pop b
3470   1D4A 0A 4D 1D      jmp _if57_exit
3471   1D4D             _if57_exit:
3472   1D4D             ;; if(currState[i][j+-1] == '@') 		count++; 
3473   1D4D             _if58_cond:
3474   1D4D 3B 57 23      mov d, _currState_data ; $currState
3475   1D50 D7            push a
3476   1D51 DA            push d
3477   1D52 FA 05 00      lea d, [bp + 5] ; $i
3478   1D55 2A            mov b, [d]
3479   1D56 E7            pop d
3480   1D57 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3481   1D5B DA            push d
3482   1D5C FA 07 00      lea d, [bp + 7] ; $j
3483   1D5F 2A            mov b, [d]
3484   1D60             ; START TERMS
3485   1D60 D7            push a
3486   1D61 11            mov a, b
3487   1D62 26 FF FF      mov b, $ffff
3488   1D65 56            add b, a
3489   1D66 E4            pop a
3490   1D67             ; END TERMS
3491   1D67 E7            pop d
3492   1D68 5A            add d, b
3493   1D69 E4            pop a
3494   1D6A 32            mov bl, [d]
3495   1D6B A7 00         mov bh, 0
3496   1D6D             ; START RELATIONAL
3497   1D6D D7            push a
3498   1D6E 11            mov a, b
3499   1D6F 26 40 00      mov b, $40
3500   1D72 B0            cmp a, b
3501   1D73 FD 71         seq ; ==
3502   1D75 E4            pop a
3503   1D76             ; END RELATIONAL
3504   1D76 C0 00 00      cmp b, 0
3505   1D79 C6 8C 1D      je _if58_exit
3506   1D7C             _if58_true:
3507   1D7C             ;; count++; 
3508   1D7C FA FF FF      lea d, [bp + -1] ; $count
3509   1D7F 2A            mov b, [d]
3510   1D80 D8            push b
3511   1D81 FD 77         inc b
3512   1D83 FA FF FF      lea d, [bp + -1] ; $count
3513   1D86 FD 43         mov [d], b
3514   1D88 E5            pop b
3515   1D89 0A 8C 1D      jmp _if58_exit
3516   1D8C             _if58_exit:
3517   1D8C             ;; if(currState[i][j+1] == '@') 			count++; 
3518   1D8C             _if59_cond:
3519   1D8C 3B 57 23      mov d, _currState_data ; $currState
3520   1D8F D7            push a
3521   1D90 DA            push d
3522   1D91 FA 05 00      lea d, [bp + 5] ; $i
3523   1D94 2A            mov b, [d]
3524   1D95 E7            pop d
3525   1D96 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3526   1D9A DA            push d
3527   1D9B FA 07 00      lea d, [bp + 7] ; $j
3528   1D9E 2A            mov b, [d]
3529   1D9F             ; START TERMS
3530   1D9F D7            push a
3531   1DA0 11            mov a, b
3532   1DA1 26 01 00      mov b, $1
3533   1DA4 56            add b, a
3534   1DA5 E4            pop a
3535   1DA6             ; END TERMS
3536   1DA6 E7            pop d
3537   1DA7 5A            add d, b
3538   1DA8 E4            pop a
3539   1DA9 32            mov bl, [d]
3540   1DAA A7 00         mov bh, 0
3541   1DAC             ; START RELATIONAL
3542   1DAC D7            push a
3543   1DAD 11            mov a, b
3544   1DAE 26 40 00      mov b, $40
3545   1DB1 B0            cmp a, b
3546   1DB2 FD 71         seq ; ==
3547   1DB4 E4            pop a
3548   1DB5             ; END RELATIONAL
3549   1DB5 C0 00 00      cmp b, 0
3550   1DB8 C6 CB 1D      je _if59_exit
3551   1DBB             _if59_true:
3552   1DBB             ;; count++; 
3553   1DBB FA FF FF      lea d, [bp + -1] ; $count
3554   1DBE 2A            mov b, [d]
3555   1DBF D8            push b
3556   1DC0 FD 77         inc b
3557   1DC2 FA FF FF      lea d, [bp + -1] ; $count
3558   1DC5 FD 43         mov [d], b
3559   1DC7 E5            pop b
3560   1DC8 0A CB 1D      jmp _if59_exit
3561   1DCB             _if59_exit:
3562   1DCB             ;; if(currState[i+1][j+-1] == '@') 	count++; 
3563   1DCB             _if60_cond:
3564   1DCB 3B 57 23      mov d, _currState_data ; $currState
3565   1DCE D7            push a
3566   1DCF DA            push d
3567   1DD0 FA 05 00      lea d, [bp + 5] ; $i
3568   1DD3 2A            mov b, [d]
3569   1DD4             ; START TERMS
3570   1DD4 D7            push a
3571   1DD5 11            mov a, b
3572   1DD6 26 01 00      mov b, $1
3573   1DD9 56            add b, a
3574   1DDA E4            pop a
3575   1DDB             ; END TERMS
3576   1DDB E7            pop d
3577   1DDC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3578   1DE0 DA            push d
3579   1DE1 FA 07 00      lea d, [bp + 7] ; $j
3580   1DE4 2A            mov b, [d]
3581   1DE5             ; START TERMS
3582   1DE5 D7            push a
3583   1DE6 11            mov a, b
3584   1DE7 26 FF FF      mov b, $ffff
3585   1DEA 56            add b, a
3586   1DEB E4            pop a
3587   1DEC             ; END TERMS
3588   1DEC E7            pop d
3589   1DED 5A            add d, b
3590   1DEE E4            pop a
3591   1DEF 32            mov bl, [d]
3592   1DF0 A7 00         mov bh, 0
3593   1DF2             ; START RELATIONAL
3594   1DF2 D7            push a
3595   1DF3 11            mov a, b
3596   1DF4 26 40 00      mov b, $40
3597   1DF7 B0            cmp a, b
3598   1DF8 FD 71         seq ; ==
3599   1DFA E4            pop a
3600   1DFB             ; END RELATIONAL
3601   1DFB C0 00 00      cmp b, 0
3602   1DFE C6 11 1E      je _if60_exit
3603   1E01             _if60_true:
3604   1E01             ;; count++; 
3605   1E01 FA FF FF      lea d, [bp + -1] ; $count
3606   1E04 2A            mov b, [d]
3607   1E05 D8            push b
3608   1E06 FD 77         inc b
3609   1E08 FA FF FF      lea d, [bp + -1] ; $count
3610   1E0B FD 43         mov [d], b
3611   1E0D E5            pop b
3612   1E0E 0A 11 1E      jmp _if60_exit
3613   1E11             _if60_exit:
3614   1E11             ;; if(currState[i+1][j] == '@') 			count++; 
3615   1E11             _if61_cond:
3616   1E11 3B 57 23      mov d, _currState_data ; $currState
3617   1E14 D7            push a
3618   1E15 DA            push d
3619   1E16 FA 05 00      lea d, [bp + 5] ; $i
3620   1E19 2A            mov b, [d]
3621   1E1A             ; START TERMS
3622   1E1A D7            push a
3623   1E1B 11            mov a, b
3624   1E1C 26 01 00      mov b, $1
3625   1E1F 56            add b, a
3626   1E20 E4            pop a
3627   1E21             ; END TERMS
3628   1E21 E7            pop d
3629   1E22 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3630   1E26 DA            push d
3631   1E27 FA 07 00      lea d, [bp + 7] ; $j
3632   1E2A 2A            mov b, [d]
3633   1E2B E7            pop d
3634   1E2C 5A            add d, b
3635   1E2D E4            pop a
3636   1E2E 32            mov bl, [d]
3637   1E2F A7 00         mov bh, 0
3638   1E31             ; START RELATIONAL
3639   1E31 D7            push a
3640   1E32 11            mov a, b
3641   1E33 26 40 00      mov b, $40
3642   1E36 B0            cmp a, b
3643   1E37 FD 71         seq ; ==
3644   1E39 E4            pop a
3645   1E3A             ; END RELATIONAL
3646   1E3A C0 00 00      cmp b, 0
3647   1E3D C6 50 1E      je _if61_exit
3648   1E40             _if61_true:
3649   1E40             ;; count++; 
3650   1E40 FA FF FF      lea d, [bp + -1] ; $count
3651   1E43 2A            mov b, [d]
3652   1E44 D8            push b
3653   1E45 FD 77         inc b
3654   1E47 FA FF FF      lea d, [bp + -1] ; $count
3655   1E4A FD 43         mov [d], b
3656   1E4C E5            pop b
3657   1E4D 0A 50 1E      jmp _if61_exit
3658   1E50             _if61_exit:
3659   1E50             ;; if(currState[i+1][j+1] == '@') 		count++; 
3660   1E50             _if62_cond:
3661   1E50 3B 57 23      mov d, _currState_data ; $currState
3662   1E53 D7            push a
3663   1E54 DA            push d
3664   1E55 FA 05 00      lea d, [bp + 5] ; $i
3665   1E58 2A            mov b, [d]
3666   1E59             ; START TERMS
3667   1E59 D7            push a
3668   1E5A 11            mov a, b
3669   1E5B 26 01 00      mov b, $1
3670   1E5E 56            add b, a
3671   1E5F E4            pop a
3672   1E60             ; END TERMS
3673   1E60 E7            pop d
3674   1E61 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3675   1E65 DA            push d
3676   1E66 FA 07 00      lea d, [bp + 7] ; $j
3677   1E69 2A            mov b, [d]
3678   1E6A             ; START TERMS
3679   1E6A D7            push a
3680   1E6B 11            mov a, b
3681   1E6C 26 01 00      mov b, $1
3682   1E6F 56            add b, a
3683   1E70 E4            pop a
3684   1E71             ; END TERMS
3685   1E71 E7            pop d
3686   1E72 5A            add d, b
3687   1E73 E4            pop a
3688   1E74 32            mov bl, [d]
3689   1E75 A7 00         mov bh, 0
3690   1E77             ; START RELATIONAL
3691   1E77 D7            push a
3692   1E78 11            mov a, b
3693   1E79 26 40 00      mov b, $40
3694   1E7C B0            cmp a, b
3695   1E7D FD 71         seq ; ==
3696   1E7F E4            pop a
3697   1E80             ; END RELATIONAL
3698   1E80 C0 00 00      cmp b, 0
3699   1E83 C6 96 1E      je _if62_exit
3700   1E86             _if62_true:
3701   1E86             ;; count++; 
3702   1E86 FA FF FF      lea d, [bp + -1] ; $count
3703   1E89 2A            mov b, [d]
3704   1E8A D8            push b
3705   1E8B FD 77         inc b
3706   1E8D FA FF FF      lea d, [bp + -1] ; $count
3707   1E90 FD 43         mov [d], b
3708   1E92 E5            pop b
3709   1E93 0A 96 1E      jmp _if62_exit
3710   1E96             _if62_exit:
3711   1E96             ;; return count; 
3712   1E96 FA FF FF      lea d, [bp + -1] ; $count
3713   1E99 2A            mov b, [d]
3714   1E9A F9            leave
3715   1E9B 09            ret
3716   1E9C             ; --- END TEXT BLOCK
3717   1E9C             
3718   1E9C             ; --- BEGIN DATA BLOCK
3719   1E9C             _clear_data: 
3720   1E9C 1B 5B 32 4A .db $1b,$5b,$32,$4a,$1b,$5b,$48,$0,
3720   1EA0 1B 5B 48 00 
3721   1EA4 00 00 00    .fill 3, 0
3722   1EA7 00 00 00 00 _nextState_data: .fill 1200, 0
3722   1EAB 00 00 00 00 
3722   1EAF 00 00 00 00 
3722   1EB3 00 00 00 00 
3722   1EB7 00 00 00 00 
3722   1EBB 00 00 00 00 
3722   1EBF 00 00 00 00 
3722   1EC3 00 00 00 00 
3722   1EC7 00 00 00 00 
3722   1ECB 00 00 00 00 
3722   1ECF 00 00 00 00 
3722   1ED3 00 00 00 00 
3722   1ED7 00 00 00 00 
3722   1EDB 00 00 00 00 
3722   1EDF 00 00 00 00 
3722   1EE3 00 00 00 00 
3722   1EE7 00 00 00 00 
3722   1EEB 00 00 00 00 
3722   1EEF 00 00 00 00 
3722   1EF3 00 00 00 00 
3722   1EF7 00 00 00 00 
3722   1EFB 00 00 00 00 
3722   1EFF 00 00 00 00 
3722   1F03 00 00 00 00 
3722   1F07 00 00 00 00 
3722   1F0B 00 00 00 00 
3722   1F0F 00 00 00 00 
3722   1F13 00 00 00 00 
3722   1F17 00 00 00 00 
3722   1F1B 00 00 00 00 
3722   1F1F 00 00 00 00 
3722   1F23 00 00 00 00 
3722   1F27 00 00 00 00 
3722   1F2B 00 00 00 00 
3722   1F2F 00 00 00 00 
3722   1F33 00 00 00 00 
3722   1F37 00 00 00 00 
3722   1F3B 00 00 00 00 
3722   1F3F 00 00 00 00 
3722   1F43 00 00 00 00 
3722   1F47 00 00 00 00 
3722   1F4B 00 00 00 00 
3722   1F4F 00 00 00 00 
3722   1F53 00 00 00 00 
3722   1F57 00 00 00 00 
3722   1F5B 00 00 00 00 
3722   1F5F 00 00 00 00 
3722   1F63 00 00 00 00 
3722   1F67 00 00 00 00 
3722   1F6B 00 00 00 00 
3722   1F6F 00 00 00 00 
3722   1F73 00 00 00 00 
3722   1F77 00 00 00 00 
3722   1F7B 00 00 00 00 
3722   1F7F 00 00 00 00 
3722   1F83 00 00 00 00 
3722   1F87 00 00 00 00 
3722   1F8B 00 00 00 00 
3722   1F8F 00 00 00 00 
3722   1F93 00 00 00 00 
3722   1F97 00 00 00 00 
3722   1F9B 00 00 00 00 
3722   1F9F 00 00 00 00 
3722   1FA3 00 00 00 00 
3722   1FA7 00 00 00 00 
3722   1FAB 00 00 00 00 
3722   1FAF 00 00 00 00 
3722   1FB3 00 00 00 00 
3722   1FB7 00 00 00 00 
3722   1FBB 00 00 00 00 
3722   1FBF 00 00 00 00 
3722   1FC3 00 00 00 00 
3722   1FC7 00 00 00 00 
3722   1FCB 00 00 00 00 
3722   1FCF 00 00 00 00 
3722   1FD3 00 00 00 00 
3722   1FD7 00 00 00 00 
3722   1FDB 00 00 00 00 
3722   1FDF 00 00 00 00 
3722   1FE3 00 00 00 00 
3722   1FE7 00 00 00 00 
3722   1FEB 00 00 00 00 
3722   1FEF 00 00 00 00 
3722   1FF3 00 00 00 00 
3722   1FF7 00 00 00 00 
3722   1FFB 00 00 00 00 
3722   1FFF 00 00 00 00 
3722   2003 00 00 00 00 
3722   2007 00 00 00 00 
3722   200B 00 00 00 00 
3722   200F 00 00 00 00 
3722   2013 00 00 00 00 
3722   2017 00 00 00 00 
3722   201B 00 00 00 00 
3722   201F 00 00 00 00 
3722   2023 00 00 00 00 
3722   2027 00 00 00 00 
3722   202B 00 00 00 00 
3722   202F 00 00 00 00 
3722   2033 00 00 00 00 
3722   2037 00 00 00 00 
3722   203B 00 00 00 00 
3722   203F 00 00 00 00 
3722   2043 00 00 00 00 
3722   2047 00 00 00 00 
3722   204B 00 00 00 00 
3722   204F 00 00 00 00 
3722   2053 00 00 00 00 
3722   2057 00 00 00 00 
3722   205B 00 00 00 00 
3722   205F 00 00 00 00 
3722   2063 00 00 00 00 
3722   2067 00 00 00 00 
3722   206B 00 00 00 00 
3722   206F 00 00 00 00 
3722   2073 00 00 00 00 
3722   2077 00 00 00 00 
3722   207B 00 00 00 00 
3722   207F 00 00 00 00 
3722   2083 00 00 00 00 
3722   2087 00 00 00 00 
3722   208B 00 00 00 00 
3722   208F 00 00 00 00 
3722   2093 00 00 00 00 
3722   2097 00 00 00 00 
3722   209B 00 00 00 00 
3722   209F 00 00 00 00 
3722   20A3 00 00 00 00 
3722   20A7 00 00 00 00 
3722   20AB 00 00 00 00 
3722   20AF 00 00 00 00 
3722   20B3 00 00 00 00 
3722   20B7 00 00 00 00 
3722   20BB 00 00 00 00 
3722   20BF 00 00 00 00 
3722   20C3 00 00 00 00 
3722   20C7 00 00 00 00 
3722   20CB 00 00 00 00 
3722   20CF 00 00 00 00 
3722   20D3 00 00 00 00 
3722   20D7 00 00 00 00 
3722   20DB 00 00 00 00 
3722   20DF 00 00 00 00 
3722   20E3 00 00 00 00 
3722   20E7 00 00 00 00 
3722   20EB 00 00 00 00 
3722   20EF 00 00 00 00 
3722   20F3 00 00 00 00 
3722   20F7 00 00 00 00 
3722   20FB 00 00 00 00 
3722   20FF 00 00 00 00 
3722   2103 00 00 00 00 
3722   2107 00 00 00 00 
3722   210B 00 00 00 00 
3722   210F 00 00 00 00 
3722   2113 00 00 00 00 
3722   2117 00 00 00 00 
3722   211B 00 00 00 00 
3722   211F 00 00 00 00 
3722   2123 00 00 00 00 
3722   2127 00 00 00 00 
3722   212B 00 00 00 00 
3722   212F 00 00 00 00 
3722   2133 00 00 00 00 
3722   2137 00 00 00 00 
3722   213B 00 00 00 00 
3722   213F 00 00 00 00 
3722   2143 00 00 00 00 
3722   2147 00 00 00 00 
3722   214B 00 00 00 00 
3722   214F 00 00 00 00 
3722   2153 00 00 00 00 
3722   2157 00 00 00 00 
3722   215B 00 00 00 00 
3722   215F 00 00 00 00 
3722   2163 00 00 00 00 
3722   2167 00 00 00 00 
3722   216B 00 00 00 00 
3722   216F 00 00 00 00 
3722   2173 00 00 00 00 
3722   2177 00 00 00 00 
3722   217B 00 00 00 00 
3722   217F 00 00 00 00 
3722   2183 00 00 00 00 
3722   2187 00 00 00 00 
3722   218B 00 00 00 00 
3722   218F 00 00 00 00 
3722   2193 00 00 00 00 
3722   2197 00 00 00 00 
3722   219B 00 00 00 00 
3722   219F 00 00 00 00 
3722   21A3 00 00 00 00 
3722   21A7 00 00 00 00 
3722   21AB 00 00 00 00 
3722   21AF 00 00 00 00 
3722   21B3 00 00 00 00 
3722   21B7 00 00 00 00 
3722   21BB 00 00 00 00 
3722   21BF 00 00 00 00 
3722   21C3 00 00 00 00 
3722   21C7 00 00 00 00 
3722   21CB 00 00 00 00 
3722   21CF 00 00 00 00 
3722   21D3 00 00 00 00 
3722   21D7 00 00 00 00 
3722   21DB 00 00 00 00 
3722   21DF 00 00 00 00 
3722   21E3 00 00 00 00 
3722   21E7 00 00 00 00 
3722   21EB 00 00 00 00 
3722   21EF 00 00 00 00 
3722   21F3 00 00 00 00 
3722   21F7 00 00 00 00 
3722   21FB 00 00 00 00 
3722   21FF 00 00 00 00 
3722   2203 00 00 00 00 
3722   2207 00 00 00 00 
3722   220B 00 00 00 00 
3722   220F 00 00 00 00 
3722   2213 00 00 00 00 
3722   2217 00 00 00 00 
3722   221B 00 00 00 00 
3722   221F 00 00 00 00 
3722   2223 00 00 00 00 
3722   2227 00 00 00 00 
3722   222B 00 00 00 00 
3722   222F 00 00 00 00 
3722   2233 00 00 00 00 
3722   2237 00 00 00 00 
3722   223B 00 00 00 00 
3722   223F 00 00 00 00 
3722   2243 00 00 00 00 
3722   2247 00 00 00 00 
3722   224B 00 00 00 00 
3722   224F 00 00 00 00 
3722   2253 00 00 00 00 
3722   2257 00 00 00 00 
3722   225B 00 00 00 00 
3722   225F 00 00 00 00 
3722   2263 00 00 00 00 
3722   2267 00 00 00 00 
3722   226B 00 00 00 00 
3722   226F 00 00 00 00 
3722   2273 00 00 00 00 
3722   2277 00 00 00 00 
3722   227B 00 00 00 00 
3722   227F 00 00 00 00 
3722   2283 00 00 00 00 
3722   2287 00 00 00 00 
3722   228B 00 00 00 00 
3722   228F 00 00 00 00 
3722   2293 00 00 00 00 
3722   2297 00 00 00 00 
3722   229B 00 00 00 00 
3722   229F 00 00 00 00 
3722   22A3 00 00 00 00 
3722   22A7 00 00 00 00 
3722   22AB 00 00 00 00 
3722   22AF 00 00 00 00 
3722   22B3 00 00 00 00 
3722   22B7 00 00 00 00 
3722   22BB 00 00 00 00 
3722   22BF 00 00 00 00 
3722   22C3 00 00 00 00 
3722   22C7 00 00 00 00 
3722   22CB 00 00 00 00 
3722   22CF 00 00 00 00 
3722   22D3 00 00 00 00 
3722   22D7 00 00 00 00 
3722   22DB 00 00 00 00 
3722   22DF 00 00 00 00 
3722   22E3 00 00 00 00 
3722   22E7 00 00 00 00 
3722   22EB 00 00 00 00 
3722   22EF 00 00 00 00 
3722   22F3 00 00 00 00 
3722   22F7 00 00 00 00 
3722   22FB 00 00 00 00 
3722   22FF 00 00 00 00 
3722   2303 00 00 00 00 
3722   2307 00 00 00 00 
3722   230B 00 00 00 00 
3722   230F 00 00 00 00 
3722   2313 00 00 00 00 
3722   2317 00 00 00 00 
3722   231B 00 00 00 00 
3722   231F 00 00 00 00 
3722   2323 00 00 00 00 
3722   2327 00 00 00 00 
3722   232B 00 00 00 00 
3722   232F 00 00 00 00 
3722   2333 00 00 00 00 
3722   2337 00 00 00 00 
3722   233B 00 00 00 00 
3722   233F 00 00 00 00 
3722   2343 00 00 00 00 
3722   2347 00 00 00 00 
3722   234B 00 00 00 00 
3722   234F 00 00 00 00 
3722   2353 00 00 00 00 
3723   2357             _currState_data: 
3724   2357 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3724   235B 20 20 20 20 
3724   235F 20 20 20 20 
3724   2363 20 20 20 20 
3724   2367 20 20 20 20 
3724   236B 20 20 20 20 
3724   236F 20 20 20 20 
3724   2373 20 20 
3725   2375 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3725   2379 20 20 20 20 
3725   237D 20 20 20 20 
3725   2381 20 20 20 20 
3725   2385 20 20 20 20 
3725   2389 20 20 20 20 
3725   238D 20 20 20 20 
3725   2391 20 20 
3726   2393 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3726   2397 20 20 20 20 
3726   239B 20 20 20 20 
3726   239F 20 20 20 20 
3726   23A3 20 20 20 20 
3726   23A7 20 20 20 20 
3726   23AB 20 20 20 20 
3726   23AF 20 20 
3727   23B1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3727   23B5 20 20 20 20 
3727   23B9 20 20 20 20 
3727   23BD 20 20 20 20 
3727   23C1 20 20 20 20 
3727   23C5 20 20 20 20 
3727   23C9 20 20 20 20 
3727   23CD 20 20 
3728   23CF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3728   23D3 20 20 20 20 
3728   23D7 20 20 20 20 
3728   23DB 20 20 20 20 
3728   23DF 20 20 20 20 
3728   23E3 20 20 20 20 
3728   23E7 20 20 20 40 
3728   23EB 20 20 
3729   23ED 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3729   23F1 20 20 20 20 
3729   23F5 20 20 20 20 
3729   23F9 20 20 20 20 
3729   23FD 20 20 20 20 
3729   2401 20 20 20 20 
3729   2405 20 20 20 20 
3729   2409 20 20 
3730   240B 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3730   240F 20 40 20 40 
3730   2413 20 20 20 20 
3730   2417 20 20 20 20 
3730   241B 20 20 20 20 
3730   241F 20 20 20 20 
3730   2423 20 20 20 20 
3730   2427 20 20 
3731   2429 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
3731   242D 20 40 40 20 
3731   2431 20 20 20 20 
3731   2435 20 40 40 20 
3731   2439 20 20 20 20 
3731   243D 20 20 20 20 
3731   2441 20 20 20 40 
3731   2445 40 20 
3732   2447 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3732   244B 20 20 20 20 
3732   244F 20 20 20 20 
3732   2453 20 20 40 20 
3732   2457 20 20 40 20 
3732   245B 20 20 20 40 
3732   245F 40 20 20 20 
3732   2463 20 20 
3733   2465 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
3733   2469 20 20 20 40 
3733   246D 40 20 20 20 
3733   2471 20 40 40 20 
3733   2475 20 20 20 20 
3733   2479 20 20 20 40 
3733   247D 20 20 20 20 
3733   2481 20 40 
3734   2483 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3734   2487 40 20 20 20 
3734   248B 20 20 20 20 
3734   248F 20 20 20 20 
3734   2493 20 20 20 20 
3734   2497 20 20 20 40 
3734   249B 40 20 20 20 
3734   249F 20 20 
3735   24A1 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3735   24A5 20 20 20 40 
3735   24A9 20 40 40 20 
3735   24AD 20 20 20 40 
3735   24B1 20 40 20 20 
3735   24B5 20 20 20 20 
3735   24B9 20 20 20 20 
3735   24BD 20 20 
3736   24BF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3736   24C3 20 20 20 20 
3736   24C7 20 20 20 20 
3736   24CB 20 40 20 20 
3736   24CF 20 20 20 40 
3736   24D3 20 20 20 20 
3736   24D7 20 20 20 40 
3736   24DB 20 20 
3737   24DD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
3737   24E1 20 20 20 20 
3737   24E5 20 20 20 20 
3737   24E9 20 20 20 20 
3737   24ED 20 20 20 20 
3737   24F1 20 20 20 20 
3737   24F5 40 20 20 20 
3737   24F9 40 20 
3738   24FB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3738   24FF 20 20 20 20 
3738   2503 20 20 20 20 
3738   2507 20 20 20 20 
3738   250B 20 20 20 20 
3738   250F 20 20 20 20 
3738   2513 20 20 20 20 
3738   2517 20 20 
3739   2519 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3739   251D 20 40 40 20 
3739   2521 20 20 20 20 
3739   2525 20 20 20 20 
3739   2529 20 20 20 20 
3739   252D 20 20 20 20 
3739   2531 20 20 20 20 
3739   2535 20 20 
3740   2537 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3740   253B 20 20 20 20 
3740   253F 20 20 20 20 
3740   2543 20 20 20 20 
3740   2547 20 20 20 20 
3740   254B 20 20 20 20 
3740   254F 20 20 20 20 
3740   2553 20 20 
3741   2555 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3741   2559 20 20 20 20 
3741   255D 20 20 20 20 
3741   2561 20 20 20 20 
3741   2565 20 20 20 20 
3741   2569 20 20 20 20 
3741   256D 20 20 20 20 
3741   2571 20 20 
3742   2573 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3742   2577 20 20 20 20 
3742   257B 20 20 20 20 
3742   257F 20 20 20 20 
3742   2583 20 20 20 20 
3742   2587 20 20 20 20 
3742   258B 20 20 20 20 
3742   258F 20 20 
3743   2591 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3743   2595 20 20 20 20 
3743   2599 20 20 20 20 
3743   259D 20 20 20 20 
3743   25A1 20 20 20 20 
3743   25A5 20 20 20 20 
3743   25A9 20 20 20 20 
3743   25AD 20 20 
3744   25AF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3744   25B3 20 20 20 20 
3744   25B7 20 20 20 20 
3744   25BB 20 20 20 20 
3744   25BF 20 20 20 20 
3744   25C3 20 20 20 20 
3744   25C7 20 20 20 20 
3744   25CB 20 20 
3745   25CD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3745   25D1 20 20 20 20 
3745   25D5 20 20 20 20 
3745   25D9 20 20 20 20 
3745   25DD 20 20 20 20 
3745   25E1 20 20 20 20 
3745   25E5 20 20 20 20 
3745   25E9 20 20 
3746   25EB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3746   25EF 20 20 20 20 
3746   25F3 20 20 20 20 
3746   25F7 20 20 20 20 
3746   25FB 20 20 20 20 
3746   25FF 20 20 20 20 
3746   2603 20 20 20 20 
3746   2607 20 20 
3747   2609 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3747   260D 20 20 20 20 
3747   2611 20 20 20 20 
3747   2615 20 20 20 20 
3747   2619 20 20 20 20 
3747   261D 20 20 20 20 
3747   2621 20 20 20 20 
3747   2625 20 20 
3748   2627 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3748   262B 20 20 20 20 
3748   262F 20 20 20 20 
3748   2633 20 20 20 20 
3748   2637 20 20 20 20 
3748   263B 20 20 20 20 
3748   263F 20 20 20 20 
3748   2643 20 20 
3749   2645 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3749   2649 20 20 20 20 
3749   264D 20 20 20 20 
3749   2651 20 20 20 20 
3749   2655 20 20 20 20 
3749   2659 20 20 20 20 
3749   265D 20 20 20 20 
3749   2661 20 20 
3750   2663 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3750   2667 20 20 20 20 
3750   266B 20 20 20 20 
3750   266F 20 20 20 20 
3750   2673 20 20 20 20 
3751   2677 00 00 00 00 .fill 400, 0
3751   267B 00 00 00 00 
3751   267F 00 00 00 00 
3751   2683 00 00 00 00 
3751   2687 00 00 00 00 
3751   268B 00 00 00 00 
3751   268F 00 00 00 00 
3751   2693 00 00 00 00 
3751   2697 00 00 00 00 
3751   269B 00 00 00 00 
3751   269F 00 00 00 00 
3751   26A3 00 00 00 00 
3751   26A7 00 00 00 00 
3751   26AB 00 00 00 00 
3751   26AF 00 00 00 00 
3751   26B3 00 00 00 00 
3751   26B7 00 00 00 00 
3751   26BB 00 00 00 00 
3751   26BF 00 00 00 00 
3751   26C3 00 00 00 00 
3751   26C7 00 00 00 00 
3751   26CB 00 00 00 00 
3751   26CF 00 00 00 00 
3751   26D3 00 00 00 00 
3751   26D7 00 00 00 00 
3751   26DB 00 00 00 00 
3751   26DF 00 00 00 00 
3751   26E3 00 00 00 00 
3751   26E7 00 00 00 00 
3751   26EB 00 00 00 00 
3751   26EF 00 00 00 00 
3751   26F3 00 00 00 00 
3751   26F7 00 00 00 00 
3751   26FB 00 00 00 00 
3751   26FF 00 00 00 00 
3751   2703 00 00 00 00 
3751   2707 00 00 00 00 
3751   270B 00 00 00 00 
3751   270F 00 00 00 00 
3751   2713 00 00 00 00 
3751   2717 00 00 00 00 
3751   271B 00 00 00 00 
3751   271F 00 00 00 00 
3751   2723 00 00 00 00 
3751   2727 00 00 00 00 
3751   272B 00 00 00 00 
3751   272F 00 00 00 00 
3751   2733 00 00 00 00 
3751   2737 00 00 00 00 
3751   273B 00 00 00 00 
3751   273F 00 00 00 00 
3751   2743 00 00 00 00 
3751   2747 00 00 00 00 
3751   274B 00 00 00 00 
3751   274F 00 00 00 00 
3751   2753 00 00 00 00 
3751   2757 00 00 00 00 
3751   275B 00 00 00 00 
3751   275F 00 00 00 00 
3751   2763 00 00 00 00 
3751   2767 00 00 00 00 
3751   276B 00 00 00 00 
3751   276F 00 00 00 00 
3751   2773 00 00 00 00 
3751   2777 00 00 00 00 
3751   277B 00 00 00 00 
3751   277F 00 00 00 00 
3751   2783 00 00 00 00 
3751   2787 00 00 00 00 
3751   278B 00 00 00 00 
3751   278F 00 00 00 00 
3751   2793 00 00 00 00 
3751   2797 00 00 00 00 
3751   279B 00 00 00 00 
3751   279F 00 00 00 00 
3751   27A3 00 00 00 00 
3751   27A7 00 00 00 00 
3751   27AB 00 00 00 00 
3751   27AF 00 00 00 00 
3751   27B3 00 00 00 00 
3751   27B7 00 00 00 00 
3751   27BB 00 00 00 00 
3751   27BF 00 00 00 00 
3751   27C3 00 00 00 00 
3751   27C7 00 00 00 00 
3751   27CB 00 00 00 00 
3751   27CF 00 00 00 00 
3751   27D3 00 00 00 00 
3751   27D7 00 00 00 00 
3751   27DB 00 00 00 00 
3751   27DF 00 00 00 00 
3751   27E3 00 00 00 00 
3751   27E7 00 00 00 00 
3751   27EB 00 00 00 00 
3751   27EF 00 00 00 00 
3751   27F3 00 00 00 00 
3751   27F7 00 00 00 00 
3751   27FB 00 00 00 00 
3751   27FF 00 00 00 00 
3751   2803 00 00 00 00 
3752   2807 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
3752   280B 65 73 73 20 
3752   280F 43 54 52 4C 
3752   2813 2B 43 20 74 
3752   2817 6F 20 71 75 
3752   281B 69 74 2E 0A 
3752   281F 0D 00 
3753   2821 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
3753   2825 70 65 63 74 
3753   2829 65 64 20 66 
3753   282D 6F 72 6D 61 
3753   2831 74 20 69 6E 
3753   2835 20 70 72 69 
3753   2839 6E 74 66 2E 
3753   283D 00 
3754   283E 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
3754   2842 72 3A 20 55 
3754   2846 6E 6B 6E 6F 
3754   284A 77 6E 20 61 
3754   284E 72 67 75 6D 
3754   2852 65 6E 74 20 
3754   2856 74 79 70 65 
3754   285A 2E 0A 00 
3755   285D 1B 5B 32 4A _s3: .db "\033[2J\033[H", 0
3755   2861 1B 5B 48 00 
3756   2865 40 20 00    _s4: .db "@ ", 0
3757   2868 2E 20 00    _s5: .db ". ", 0
3758   286B             
3759   286B 6D 28       _heap_top: .dw _heap
3760   286D 00          _heap: .db 0
3761   286E             ; --- END DATA BLOCK
3762   286E             
3763   286E             .end
tasm: Number of errors = 0
