0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <   30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 1E 00      mov b, $1e
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; <= (signed)
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 98 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j = 0; j <    40    ; j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 28 00      mov b, $28
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; <= (signed)
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 88 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; nextState[i][j] = currState[i][j]; 
0057   0445 3B 5D 19      mov d, _nextState_data ; $nextState
0058   0448 D7            push a
0059   0449 DA            push d
0060   044A FA FF FF      lea d, [bp + -1] ; $i
0061   044D 2A            mov b, [d]
0062   044E E7            pop d
0063   044F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0064   0453 DA            push d
0065   0454 FA FD FF      lea d, [bp + -3] ; $j
0066   0457 2A            mov b, [d]
0067   0458 E7            pop d
0068   0459 5A            add d, b
0069   045A E4            pop a
0070   045B DA            push d
0071   045C 3B 0D 1E      mov d, _currState_data ; $currState
0072   045F D7            push a
0073   0460 DA            push d
0074   0461 FA FF FF      lea d, [bp + -1] ; $i
0075   0464 2A            mov b, [d]
0076   0465 E7            pop d
0077   0466 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0078   046A DA            push d
0079   046B FA FD FF      lea d, [bp + -3] ; $j
0080   046E 2A            mov b, [d]
0081   046F E7            pop d
0082   0470 5A            add d, b
0083   0471 E4            pop a
0084   0472 32            mov bl, [d]
0085   0473 A7 00         mov bh, 0
0086   0475 E7            pop d
0087   0476 FD 3E         mov [d], bl
0088   0478             _for2_update:
0089   0478 FA FD FF      lea d, [bp + -3] ; $j
0090   047B 2A            mov b, [d]
0091   047C D8            push b
0092   047D FD 77         inc b
0093   047F FA FD FF      lea d, [bp + -3] ; $j
0094   0482 FD 43         mov [d], b
0095   0484 E5            pop b
0096   0485 0A 32 04      jmp _for2_cond
0097   0488             _for2_exit:
0098   0488             _for1_update:
0099   0488 FA FF FF      lea d, [bp + -1] ; $i
0100   048B 2A            mov b, [d]
0101   048C D8            push b
0102   048D FD 77         inc b
0103   048F FA FF FF      lea d, [bp + -1] ; $i
0104   0492 FD 43         mov [d], b
0105   0494 E5            pop b
0106   0495 0A 15 04      jmp _for1_cond
0107   0498             _for1_exit:
0108   0498             ;; for(;;){ 
0109   0498             _for3_init:
0110   0498             _for3_cond:
0111   0498             _for3_block:
0112   0498             ;; for(i = 1; i <   30     +-1; i++){ 
0113   0498             _for4_init:
0114   0498 FA FF FF      lea d, [bp + -1] ; $i
0115   049B DA            push d
0116   049C 26 01 00      mov b, $1
0117   049F E7            pop d
0118   04A0 FD 43         mov [d], b
0119   04A2             _for4_cond:
0120   04A2 FA FF FF      lea d, [bp + -1] ; $i
0121   04A5 2A            mov b, [d]
0122   04A6             ; START RELATIONAL
0123   04A6 D7            push a
0124   04A7 11            mov a, b
0125   04A8 26 1E 00      mov b, $1e
0126   04AB             ; START TERMS
0127   04AB D7            push a
0128   04AC 11            mov a, b
0129   04AD 26 FF FF      mov b, $ffff
0130   04B0 56            add b, a
0131   04B1 E4            pop a
0132   04B2             ; END TERMS
0133   04B2 B0            cmp a, b
0134   04B3 FD 73         slt ; <= (signed)
0135   04B5 E4            pop a
0136   04B6             ; END RELATIONAL
0137   04B6 C0 00 00      cmp b, 0
0138   04B9 C6 93 05      je _for4_exit
0139   04BC             _for4_block:
0140   04BC             ;; for(j = 1; j <    40    +-1; j++){ 
0141   04BC             _for5_init:
0142   04BC FA FD FF      lea d, [bp + -3] ; $j
0143   04BF DA            push d
0144   04C0 26 01 00      mov b, $1
0145   04C3 E7            pop d
0146   04C4 FD 43         mov [d], b
0147   04C6             _for5_cond:
0148   04C6 FA FD FF      lea d, [bp + -3] ; $j
0149   04C9 2A            mov b, [d]
0150   04CA             ; START RELATIONAL
0151   04CA D7            push a
0152   04CB 11            mov a, b
0153   04CC 26 28 00      mov b, $28
0154   04CF             ; START TERMS
0155   04CF D7            push a
0156   04D0 11            mov a, b
0157   04D1 26 FF FF      mov b, $ffff
0158   04D4 56            add b, a
0159   04D5 E4            pop a
0160   04D6             ; END TERMS
0161   04D6 B0            cmp a, b
0162   04D7 FD 73         slt ; <= (signed)
0163   04D9 E4            pop a
0164   04DA             ; END RELATIONAL
0165   04DA C0 00 00      cmp b, 0
0166   04DD C6 83 05      je _for5_exit
0167   04E0             _for5_block:
0168   04E0             ;; n = neighbours(i, j); 
0169   04E0 FA FB FF      lea d, [bp + -5] ; $n
0170   04E3 DA            push d
0171   04E4 FA FD FF      lea d, [bp + -3] ; $j
0172   04E7 2A            mov b, [d]
0173   04E8 FD AB         swp b
0174   04EA D8            push b
0175   04EB FA FF FF      lea d, [bp + -1] ; $i
0176   04EE 2A            mov b, [d]
0177   04EF FD AB         swp b
0178   04F1 D8            push b
0179   04F2 07 28 17      call neighbours
0180   04F5 51 04 00      add sp, 4
0181   04F8 E7            pop d
0182   04F9 FD 43         mov [d], b
0183   04FB             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0184   04FB             _if6_cond:
0185   04FB FA FB FF      lea d, [bp + -5] ; $n
0186   04FE 2A            mov b, [d]
0187   04FF             ; START RELATIONAL
0188   04FF D7            push a
0189   0500 11            mov a, b
0190   0501 26 02 00      mov b, $2
0191   0504 B0            cmp a, b
0192   0505 FD 73         slt ; <= (signed)
0193   0507 E4            pop a
0194   0508             ; END RELATIONAL
0195   0508 D7            push a
0196   0509 11            mov a, b
0197   050A FA FB FF      lea d, [bp + -5] ; $n
0198   050D 2A            mov b, [d]
0199   050E             ; START RELATIONAL
0200   050E D7            push a
0201   050F 11            mov a, b
0202   0510 26 03 00      mov b, $3
0203   0513 B0            cmp a, b
0204   0514 FD 7F         sgt ; >
0205   0516 E4            pop a
0206   0517             ; END RELATIONAL
0207   0517 FD A8         sor a, b ; ||
0208   0519 E4            pop a
0209   051A C0 00 00      cmp b, 0
0210   051D C6 40 05      je _if6_else
0211   0520             _if6_true:
0212   0520             ;; nextState[i][j] = ' '; 
0213   0520 3B 5D 19      mov d, _nextState_data ; $nextState
0214   0523 D7            push a
0215   0524 DA            push d
0216   0525 FA FF FF      lea d, [bp + -1] ; $i
0217   0528 2A            mov b, [d]
0218   0529 E7            pop d
0219   052A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0220   052E DA            push d
0221   052F FA FD FF      lea d, [bp + -3] ; $j
0222   0532 2A            mov b, [d]
0223   0533 E7            pop d
0224   0534 5A            add d, b
0225   0535 E4            pop a
0226   0536 DA            push d
0227   0537 26 20 00      mov b, $20
0228   053A E7            pop d
0229   053B FD 3E         mov [d], bl
0230   053D 0A 73 05      jmp _if6_exit
0231   0540             _if6_else:
0232   0540             ;; if(n == 3) nextState[i][j] = '@'; 
0233   0540             _if7_cond:
0234   0540 FA FB FF      lea d, [bp + -5] ; $n
0235   0543 2A            mov b, [d]
0236   0544             ; START RELATIONAL
0237   0544 D7            push a
0238   0545 11            mov a, b
0239   0546 26 03 00      mov b, $3
0240   0549 B0            cmp a, b
0241   054A FD 71         seq ; ==
0242   054C E4            pop a
0243   054D             ; END RELATIONAL
0244   054D C0 00 00      cmp b, 0
0245   0550 C6 73 05      je _if7_exit
0246   0553             _if7_true:
0247   0553             ;; nextState[i][j] = '@'; 
0248   0553 3B 5D 19      mov d, _nextState_data ; $nextState
0249   0556 D7            push a
0250   0557 DA            push d
0251   0558 FA FF FF      lea d, [bp + -1] ; $i
0252   055B 2A            mov b, [d]
0253   055C E7            pop d
0254   055D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0255   0561 DA            push d
0256   0562 FA FD FF      lea d, [bp + -3] ; $j
0257   0565 2A            mov b, [d]
0258   0566 E7            pop d
0259   0567 5A            add d, b
0260   0568 E4            pop a
0261   0569 DA            push d
0262   056A 26 40 00      mov b, $40
0263   056D E7            pop d
0264   056E FD 3E         mov [d], bl
0265   0570 0A 73 05      jmp _if7_exit
0266   0573             _if7_exit:
0267   0573             _if6_exit:
0268   0573             _for5_update:
0269   0573 FA FD FF      lea d, [bp + -3] ; $j
0270   0576 2A            mov b, [d]
0271   0577 D8            push b
0272   0578 FD 77         inc b
0273   057A FA FD FF      lea d, [bp + -3] ; $j
0274   057D FD 43         mov [d], b
0275   057F E5            pop b
0276   0580 0A C6 04      jmp _for5_cond
0277   0583             _for5_exit:
0278   0583             _for4_update:
0279   0583 FA FF FF      lea d, [bp + -1] ; $i
0280   0586 2A            mov b, [d]
0281   0587 D8            push b
0282   0588 FD 77         inc b
0283   058A FA FF FF      lea d, [bp + -1] ; $i
0284   058D FD 43         mov [d], b
0285   058F E5            pop b
0286   0590 0A A2 04      jmp _for4_cond
0287   0593             _for4_exit:
0288   0593             ;; for(i = 1; i <   30     +-1; i++){ 
0289   0593             _for8_init:
0290   0593 FA FF FF      lea d, [bp + -1] ; $i
0291   0596 DA            push d
0292   0597 26 01 00      mov b, $1
0293   059A E7            pop d
0294   059B FD 43         mov [d], b
0295   059D             _for8_cond:
0296   059D FA FF FF      lea d, [bp + -1] ; $i
0297   05A0 2A            mov b, [d]
0298   05A1             ; START RELATIONAL
0299   05A1 D7            push a
0300   05A2 11            mov a, b
0301   05A3 26 1E 00      mov b, $1e
0302   05A6             ; START TERMS
0303   05A6 D7            push a
0304   05A7 11            mov a, b
0305   05A8 26 FF FF      mov b, $ffff
0306   05AB 56            add b, a
0307   05AC E4            pop a
0308   05AD             ; END TERMS
0309   05AD B0            cmp a, b
0310   05AE FD 73         slt ; <= (signed)
0311   05B0 E4            pop a
0312   05B1             ; END RELATIONAL
0313   05B1 C0 00 00      cmp b, 0
0314   05B4 C6 2E 06      je _for8_exit
0315   05B7             _for8_block:
0316   05B7             ;; for(j = 1; j <    40    +-1; j++){ 
0317   05B7             _for9_init:
0318   05B7 FA FD FF      lea d, [bp + -3] ; $j
0319   05BA DA            push d
0320   05BB 26 01 00      mov b, $1
0321   05BE E7            pop d
0322   05BF FD 43         mov [d], b
0323   05C1             _for9_cond:
0324   05C1 FA FD FF      lea d, [bp + -3] ; $j
0325   05C4 2A            mov b, [d]
0326   05C5             ; START RELATIONAL
0327   05C5 D7            push a
0328   05C6 11            mov a, b
0329   05C7 26 28 00      mov b, $28
0330   05CA             ; START TERMS
0331   05CA D7            push a
0332   05CB 11            mov a, b
0333   05CC 26 FF FF      mov b, $ffff
0334   05CF 56            add b, a
0335   05D0 E4            pop a
0336   05D1             ; END TERMS
0337   05D1 B0            cmp a, b
0338   05D2 FD 73         slt ; <= (signed)
0339   05D4 E4            pop a
0340   05D5             ; END RELATIONAL
0341   05D5 C0 00 00      cmp b, 0
0342   05D8 C6 1E 06      je _for9_exit
0343   05DB             _for9_block:
0344   05DB             ;; currState[i][j] = nextState[i][j]; 
0345   05DB 3B 0D 1E      mov d, _currState_data ; $currState
0346   05DE D7            push a
0347   05DF DA            push d
0348   05E0 FA FF FF      lea d, [bp + -1] ; $i
0349   05E3 2A            mov b, [d]
0350   05E4 E7            pop d
0351   05E5 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0352   05E9 DA            push d
0353   05EA FA FD FF      lea d, [bp + -3] ; $j
0354   05ED 2A            mov b, [d]
0355   05EE E7            pop d
0356   05EF 5A            add d, b
0357   05F0 E4            pop a
0358   05F1 DA            push d
0359   05F2 3B 5D 19      mov d, _nextState_data ; $nextState
0360   05F5 D7            push a
0361   05F6 DA            push d
0362   05F7 FA FF FF      lea d, [bp + -1] ; $i
0363   05FA 2A            mov b, [d]
0364   05FB E7            pop d
0365   05FC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0366   0600 DA            push d
0367   0601 FA FD FF      lea d, [bp + -3] ; $j
0368   0604 2A            mov b, [d]
0369   0605 E7            pop d
0370   0606 5A            add d, b
0371   0607 E4            pop a
0372   0608 32            mov bl, [d]
0373   0609 A7 00         mov bh, 0
0374   060B E7            pop d
0375   060C FD 3E         mov [d], bl
0376   060E             _for9_update:
0377   060E FA FD FF      lea d, [bp + -3] ; $j
0378   0611 2A            mov b, [d]
0379   0612 D8            push b
0380   0613 FD 77         inc b
0381   0615 FA FD FF      lea d, [bp + -3] ; $j
0382   0618 FD 43         mov [d], b
0383   061A E5            pop b
0384   061B 0A C1 05      jmp _for9_cond
0385   061E             _for9_exit:
0386   061E             _for8_update:
0387   061E FA FF FF      lea d, [bp + -1] ; $i
0388   0621 2A            mov b, [d]
0389   0622 D8            push b
0390   0623 FD 77         inc b
0391   0625 FA FF FF      lea d, [bp + -1] ; $i
0392   0628 FD 43         mov [d], b
0393   062A E5            pop b
0394   062B 0A 9D 05      jmp _for8_cond
0395   062E             _for8_exit:
0396   062E             ;; printf(clear); 
0397   062E 3B 52 19      mov d, _clear_data ; $clear
0398   0631 2D            mov b, d
0399   0632 FD AB         swp b
0400   0634 D8            push b
0401   0635 07 42 0A      call printf
0402   0638 51 02 00      add sp, 2
0403   063B             ;; show(); 
0404   063B 07 3F 16      call show
0405   063E             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0406   063E 26 BD 22      mov b, __s0 ; "\n\rPress CTRL+C to quit.\n\r"
0407   0641 FD AB         swp b
0408   0643 D8            push b
0409   0644 07 67 12      call puts
0410   0647 51 02 00      add sp, 2
0411   064A             _for3_update:
0412   064A 0A 98 04      jmp _for3_cond
0413   064D             _for3_exit:
0414   064D 05 0B         syscall sys_terminate_proc
0415   064F             
0416   064F             strcpy:
0417   064F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0418   0652             ; $psrc 
0419   0652             ; $pdest 
0420   0652 52 04 00      sub sp, 4
0421   0655             ;; psrc = src; 
0422   0655 FA FF FF      lea d, [bp + -1] ; $psrc
0423   0658 DA            push d
0424   0659 FA 07 00      lea d, [bp + 7] ; $src
0425   065C 2A            mov b, [d]
0426   065D E7            pop d
0427   065E FD 43         mov [d], b
0428   0660             ;; pdest = dest; 
0429   0660 FA FD FF      lea d, [bp + -3] ; $pdest
0430   0663 DA            push d
0431   0664 FA 05 00      lea d, [bp + 5] ; $dest
0432   0667 2A            mov b, [d]
0433   0668 E7            pop d
0434   0669 FD 43         mov [d], b
0435   066B             ;; while(*psrc) *pdest++ = *psrc++; 
0436   066B             _while10_cond:
0437   066B FA FF FF      lea d, [bp + -1] ; $psrc
0438   066E 2A            mov b, [d]
0439   066F 74            mov d, b
0440   0670 32            mov bl, [d]
0441   0671 A7 00         mov bh, 0
0442   0673 C0 00 00      cmp b, 0
0443   0676 C6 9E 06      je _while10_exit
0444   0679             _while10_block:
0445   0679             ;; *pdest++ = *psrc++; 
0446   0679 FA FD FF      lea d, [bp + -3] ; $pdest
0447   067C 2A            mov b, [d]
0448   067D D8            push b
0449   067E FD 77         inc b
0450   0680 FA FD FF      lea d, [bp + -3] ; $pdest
0451   0683 FD 43         mov [d], b
0452   0685 E5            pop b
0453   0686 D8            push b
0454   0687 FA FF FF      lea d, [bp + -1] ; $psrc
0455   068A 2A            mov b, [d]
0456   068B D8            push b
0457   068C FD 77         inc b
0458   068E FA FF FF      lea d, [bp + -1] ; $psrc
0459   0691 FD 43         mov [d], b
0460   0693 E5            pop b
0461   0694 74            mov d, b
0462   0695 32            mov bl, [d]
0463   0696 A7 00         mov bh, 0
0464   0698 E7            pop d
0465   0699 FD 3E         mov [d], bl
0466   069B 0A 6B 06      jmp _while10_cond
0467   069E             _while10_exit:
0468   069E             ;; *pdest = '\0'; 
0469   069E FA FD FF      lea d, [bp + -3] ; $pdest
0470   06A1 2A            mov b, [d]
0471   06A2 D8            push b
0472   06A3 26 00 00      mov b, $0
0473   06A6 E7            pop d
0474   06A7 FD 3E         mov [d], bl
0475   06A9 F9            leave
0476   06AA 09            ret
0477   06AB             
0478   06AB             strcmp:
0479   06AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0480   06AE             ;; while (*s1 && (*s1 == *s2)) { 
0481   06AE             _while11_cond:
0482   06AE FA 05 00      lea d, [bp + 5] ; $s1
0483   06B1 2A            mov b, [d]
0484   06B2 74            mov d, b
0485   06B3 32            mov bl, [d]
0486   06B4 A7 00         mov bh, 0
0487   06B6 D7            push a
0488   06B7 11            mov a, b
0489   06B8 FA 05 00      lea d, [bp + 5] ; $s1
0490   06BB 2A            mov b, [d]
0491   06BC 74            mov d, b
0492   06BD 32            mov bl, [d]
0493   06BE A7 00         mov bh, 0
0494   06C0             ; START RELATIONAL
0495   06C0 D7            push a
0496   06C1 11            mov a, b
0497   06C2 FA 07 00      lea d, [bp + 7] ; $s2
0498   06C5 2A            mov b, [d]
0499   06C6 74            mov d, b
0500   06C7 32            mov bl, [d]
0501   06C8 A7 00         mov bh, 0
0502   06CA B0            cmp a, b
0503   06CB FD 71         seq ; ==
0504   06CD E4            pop a
0505   06CE             ; END RELATIONAL
0506   06CE FD A7         sand a, b ; &&
0507   06D0 E4            pop a
0508   06D1 C0 00 00      cmp b, 0
0509   06D4 C6 F4 06      je _while11_exit
0510   06D7             _while11_block:
0511   06D7             ;; s1++; 
0512   06D7 FA 05 00      lea d, [bp + 5] ; $s1
0513   06DA 2A            mov b, [d]
0514   06DB D8            push b
0515   06DC FD 77         inc b
0516   06DE FA 05 00      lea d, [bp + 5] ; $s1
0517   06E1 FD 43         mov [d], b
0518   06E3 E5            pop b
0519   06E4             ;; s2++; 
0520   06E4 FA 07 00      lea d, [bp + 7] ; $s2
0521   06E7 2A            mov b, [d]
0522   06E8 D8            push b
0523   06E9 FD 77         inc b
0524   06EB FA 07 00      lea d, [bp + 7] ; $s2
0525   06EE FD 43         mov [d], b
0526   06F0 E5            pop b
0527   06F1 0A AE 06      jmp _while11_cond
0528   06F4             _while11_exit:
0529   06F4             ;; return *s1 - *s2; 
0530   06F4 FA 05 00      lea d, [bp + 5] ; $s1
0531   06F7 2A            mov b, [d]
0532   06F8 74            mov d, b
0533   06F9 32            mov bl, [d]
0534   06FA A7 00         mov bh, 0
0535   06FC             ; START TERMS
0536   06FC D7            push a
0537   06FD 11            mov a, b
0538   06FE FA 07 00      lea d, [bp + 7] ; $s2
0539   0701 2A            mov b, [d]
0540   0702 74            mov d, b
0541   0703 32            mov bl, [d]
0542   0704 A7 00         mov bh, 0
0543   0706 60            sub a, b
0544   0707 27            mov b, a
0545   0708 E4            pop a
0546   0709             ; END TERMS
0547   0709 F9            leave
0548   070A 09            ret
0549   070B             
0550   070B             strcat:
0551   070B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0552   070E             ; $dest_len 
0553   070E             ; $i 
0554   070E 52 04 00      sub sp, 4
0555   0711             ;; dest_len = strlen(dest); 
0556   0711 FA FF FF      lea d, [bp + -1] ; $dest_len
0557   0714 DA            push d
0558   0715 FA 05 00      lea d, [bp + 5] ; $dest
0559   0718 2A            mov b, [d]
0560   0719 FD AB         swp b
0561   071B D8            push b
0562   071C 07 BE 07      call strlen
0563   071F 51 02 00      add sp, 2
0564   0722 E7            pop d
0565   0723 FD 43         mov [d], b
0566   0725             ;; for (i = 0; src[i] != 0; i=i+1) { 
0567   0725             _for12_init:
0568   0725 FA FD FF      lea d, [bp + -3] ; $i
0569   0728 DA            push d
0570   0729 26 00 00      mov b, $0
0571   072C E7            pop d
0572   072D FD 43         mov [d], b
0573   072F             _for12_cond:
0574   072F FA 07 00      lea d, [bp + 7] ; $src
0575   0732 FD 2A         mov d, [d]
0576   0734 D7            push a
0577   0735 DA            push d
0578   0736 FA FD FF      lea d, [bp + -3] ; $i
0579   0739 2A            mov b, [d]
0580   073A E7            pop d
0581   073B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0582   073F E4            pop a
0583   0740 32            mov bl, [d]
0584   0741 A7 00         mov bh, 0
0585   0743             ; START RELATIONAL
0586   0743 D7            push a
0587   0744 11            mov a, b
0588   0745 26 00 00      mov b, $0
0589   0748 B0            cmp a, b
0590   0749 FD 72         sneq ; !=
0591   074B E4            pop a
0592   074C             ; END RELATIONAL
0593   074C C0 00 00      cmp b, 0
0594   074F C6 98 07      je _for12_exit
0595   0752             _for12_block:
0596   0752             ;; dest[dest_len + i] = src[i]; 
0597   0752 FA 05 00      lea d, [bp + 5] ; $dest
0598   0755 FD 2A         mov d, [d]
0599   0757 D7            push a
0600   0758 DA            push d
0601   0759 FA FF FF      lea d, [bp + -1] ; $dest_len
0602   075C 2A            mov b, [d]
0603   075D             ; START TERMS
0604   075D D7            push a
0605   075E 11            mov a, b
0606   075F FA FD FF      lea d, [bp + -3] ; $i
0607   0762 2A            mov b, [d]
0608   0763 56            add b, a
0609   0764 E4            pop a
0610   0765             ; END TERMS
0611   0765 E7            pop d
0612   0766 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0613   076A E4            pop a
0614   076B DA            push d
0615   076C FA 07 00      lea d, [bp + 7] ; $src
0616   076F FD 2A         mov d, [d]
0617   0771 D7            push a
0618   0772 DA            push d
0619   0773 FA FD FF      lea d, [bp + -3] ; $i
0620   0776 2A            mov b, [d]
0621   0777 E7            pop d
0622   0778 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0623   077C E4            pop a
0624   077D 32            mov bl, [d]
0625   077E A7 00         mov bh, 0
0626   0780 E7            pop d
0627   0781 FD 3E         mov [d], bl
0628   0783             _for12_update:
0629   0783 FA FD FF      lea d, [bp + -3] ; $i
0630   0786 DA            push d
0631   0787 FA FD FF      lea d, [bp + -3] ; $i
0632   078A 2A            mov b, [d]
0633   078B             ; START TERMS
0634   078B D7            push a
0635   078C 11            mov a, b
0636   078D 26 01 00      mov b, $1
0637   0790 56            add b, a
0638   0791 E4            pop a
0639   0792             ; END TERMS
0640   0792 E7            pop d
0641   0793 FD 43         mov [d], b
0642   0795 0A 2F 07      jmp _for12_cond
0643   0798             _for12_exit:
0644   0798             ;; dest[dest_len + i] = 0; 
0645   0798 FA 05 00      lea d, [bp + 5] ; $dest
0646   079B FD 2A         mov d, [d]
0647   079D D7            push a
0648   079E DA            push d
0649   079F FA FF FF      lea d, [bp + -1] ; $dest_len
0650   07A2 2A            mov b, [d]
0651   07A3             ; START TERMS
0652   07A3 D7            push a
0653   07A4 11            mov a, b
0654   07A5 FA FD FF      lea d, [bp + -3] ; $i
0655   07A8 2A            mov b, [d]
0656   07A9 56            add b, a
0657   07AA E4            pop a
0658   07AB             ; END TERMS
0659   07AB E7            pop d
0660   07AC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0661   07B0 E4            pop a
0662   07B1 DA            push d
0663   07B2 26 00 00      mov b, $0
0664   07B5 E7            pop d
0665   07B6 FD 3E         mov [d], bl
0666   07B8             ;; return dest; 
0667   07B8 FA 05 00      lea d, [bp + 5] ; $dest
0668   07BB 2A            mov b, [d]
0669   07BC F9            leave
0670   07BD 09            ret
0671   07BE             
0672   07BE             strlen:
0673   07BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0674   07C1             ; $length 
0675   07C1 52 02 00      sub sp, 2
0676   07C4             ;; length = 0; 
0677   07C4 FA FF FF      lea d, [bp + -1] ; $length
0678   07C7 DA            push d
0679   07C8 26 00 00      mov b, $0
0680   07CB E7            pop d
0681   07CC FD 43         mov [d], b
0682   07CE             ;; while (str[length] != 0) { 
0683   07CE             _while13_cond:
0684   07CE FA 05 00      lea d, [bp + 5] ; $str
0685   07D1 FD 2A         mov d, [d]
0686   07D3 D7            push a
0687   07D4 DA            push d
0688   07D5 FA FF FF      lea d, [bp + -1] ; $length
0689   07D8 2A            mov b, [d]
0690   07D9 E7            pop d
0691   07DA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0692   07DE E4            pop a
0693   07DF 32            mov bl, [d]
0694   07E0 A7 00         mov bh, 0
0695   07E2             ; START RELATIONAL
0696   07E2 D7            push a
0697   07E3 11            mov a, b
0698   07E4 26 00 00      mov b, $0
0699   07E7 B0            cmp a, b
0700   07E8 FD 72         sneq ; !=
0701   07EA E4            pop a
0702   07EB             ; END RELATIONAL
0703   07EB C0 00 00      cmp b, 0
0704   07EE C6 01 08      je _while13_exit
0705   07F1             _while13_block:
0706   07F1             ;; length++; 
0707   07F1 FA FF FF      lea d, [bp + -1] ; $length
0708   07F4 2A            mov b, [d]
0709   07F5 D8            push b
0710   07F6 FD 77         inc b
0711   07F8 FA FF FF      lea d, [bp + -1] ; $length
0712   07FB FD 43         mov [d], b
0713   07FD E5            pop b
0714   07FE 0A CE 07      jmp _while13_cond
0715   0801             _while13_exit:
0716   0801             ;; return length; 
0717   0801 FA FF FF      lea d, [bp + -1] ; $length
0718   0804 2A            mov b, [d]
0719   0805 F9            leave
0720   0806 09            ret
0721   0807             
0722   0807             scanf:
0723   0807 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0724   080A             ; $p 
0725   080A             ; $format_p 
0726   080A             ; $c 
0727   080A             ; $i 
0728   080A             ; $input_string 
0729   080A 52 07 02      sub sp, 519
0730   080D             ;; format_p = format; 
0731   080D FA FD FF      lea d, [bp + -3] ; $format_p
0732   0810 DA            push d
0733   0811 FA 05 00      lea d, [bp + 5] ; $format
0734   0814 2A            mov b, [d]
0735   0815 E7            pop d
0736   0816 FD 43         mov [d], b
0737   0818             ;; p = &format + 2; 
0738   0818 FA FF FF      lea d, [bp + -1] ; $p
0739   081B DA            push d
0740   081C FA 05 00      lea d, [bp + 5] ; $format
0741   081F 2D            mov b, d
0742   0820             ; START TERMS
0743   0820 D7            push a
0744   0821 11            mov a, b
0745   0822 26 02 00      mov b, $2
0746   0825 56            add b, a
0747   0826 E4            pop a
0748   0827             ; END TERMS
0749   0827 E7            pop d
0750   0828 FD 43         mov [d], b
0751   082A             ;; for(;;){ 
0752   082A             _for14_init:
0753   082A             _for14_cond:
0754   082A             _for14_block:
0755   082A             ;; if(!*format_p) break; 
0756   082A             _if15_cond:
0757   082A FA FD FF      lea d, [bp + -3] ; $format_p
0758   082D 2A            mov b, [d]
0759   082E 74            mov d, b
0760   082F 32            mov bl, [d]
0761   0830 A7 00         mov bh, 0
0762   0832 C0 00 00      cmp b, 0
0763   0835 FD 71         seq ; !
0764   0837 C0 00 00      cmp b, 0
0765   083A C6 43 08      je _if15_else
0766   083D             _if15_true:
0767   083D             ;; break; 
0768   083D 0A 40 0A      jmp _for14_exit ; for break
0769   0840 0A 3D 0A      jmp _if15_exit
0770   0843             _if15_else:
0771   0843             ;; if(*format_p == '%'){ 
0772   0843             _if16_cond:
0773   0843 FA FD FF      lea d, [bp + -3] ; $format_p
0774   0846 2A            mov b, [d]
0775   0847 74            mov d, b
0776   0848 32            mov bl, [d]
0777   0849 A7 00         mov bh, 0
0778   084B             ; START RELATIONAL
0779   084B D7            push a
0780   084C 11            mov a, b
0781   084D 26 25 00      mov b, $25
0782   0850 B0            cmp a, b
0783   0851 FD 71         seq ; ==
0784   0853 E4            pop a
0785   0854             ; END RELATIONAL
0786   0854 C0 00 00      cmp b, 0
0787   0857 C6 21 0A      je _if16_else
0788   085A             _if16_true:
0789   085A             ;; format_p++; 
0790   085A FA FD FF      lea d, [bp + -3] ; $format_p
0791   085D 2A            mov b, [d]
0792   085E D8            push b
0793   085F FD 77         inc b
0794   0861 FA FD FF      lea d, [bp + -3] ; $format_p
0795   0864 FD 43         mov [d], b
0796   0866 E5            pop b
0797   0867             ;; switch(*format_p){ 
0798   0867             _switch17_expr:
0799   0867 FA FD FF      lea d, [bp + -3] ; $format_p
0800   086A 2A            mov b, [d]
0801   086B 74            mov d, b
0802   086C 32            mov bl, [d]
0803   086D A7 00         mov bh, 0
0804   086F             _switch17_comparisons:
0805   086F C1 6C         cmp bl, $6c
0806   0871 C6 9D 08      je _switch17_case0
0807   0874 C1 4C         cmp bl, $4c
0808   0876 C6 9D 08      je _switch17_case1
0809   0879 C1 64         cmp bl, $64
0810   087B C6 2F 09      je _switch17_case2
0811   087E C1 69         cmp bl, $69
0812   0880 C6 2F 09      je _switch17_case3
0813   0883 C1 75         cmp bl, $75
0814   0885 C6 5C 09      je _switch17_case4
0815   0888 C1 78         cmp bl, $78
0816   088A C6 89 09      je _switch17_case5
0817   088D C1 63         cmp bl, $63
0818   088F C6 9E 09      je _switch17_case6
0819   0892 C1 73         cmp bl, $73
0820   0894 C6 CD 09      je _switch17_case7
0821   0897 0A 05 0A      jmp _switch17_default
0822   089A 0A 11 0A      jmp _switch17_exit
0823   089D             _switch17_case0:
0824   089D             _switch17_case1:
0825   089D             ;; format_p++; 
0826   089D FA FD FF      lea d, [bp + -3] ; $format_p
0827   08A0 2A            mov b, [d]
0828   08A1 D8            push b
0829   08A2 FD 77         inc b
0830   08A4 FA FD FF      lea d, [bp + -3] ; $format_p
0831   08A7 FD 43         mov [d], b
0832   08A9 E5            pop b
0833   08AA             ;; if(*format_p == 'd' || *format_p == 'i'); 
0834   08AA             _if18_cond:
0835   08AA FA FD FF      lea d, [bp + -3] ; $format_p
0836   08AD 2A            mov b, [d]
0837   08AE 74            mov d, b
0838   08AF 32            mov bl, [d]
0839   08B0 A7 00         mov bh, 0
0840   08B2             ; START RELATIONAL
0841   08B2 D7            push a
0842   08B3 11            mov a, b
0843   08B4 26 64 00      mov b, $64
0844   08B7 B0            cmp a, b
0845   08B8 FD 71         seq ; ==
0846   08BA E4            pop a
0847   08BB             ; END RELATIONAL
0848   08BB D7            push a
0849   08BC 11            mov a, b
0850   08BD FA FD FF      lea d, [bp + -3] ; $format_p
0851   08C0 2A            mov b, [d]
0852   08C1 74            mov d, b
0853   08C2 32            mov bl, [d]
0854   08C3 A7 00         mov bh, 0
0855   08C5             ; START RELATIONAL
0856   08C5 D7            push a
0857   08C6 11            mov a, b
0858   08C7 26 69 00      mov b, $69
0859   08CA B0            cmp a, b
0860   08CB FD 71         seq ; ==
0861   08CD E4            pop a
0862   08CE             ; END RELATIONAL
0863   08CE FD A8         sor a, b ; ||
0864   08D0 E4            pop a
0865   08D1 C0 00 00      cmp b, 0
0866   08D4 C6 DA 08      je _if18_else
0867   08D7             _if18_true:
0868   08D7             ;; ; 
0869   08D7 0A 1A 09      jmp _if18_exit
0870   08DA             _if18_else:
0871   08DA             ;; if(*format_p == 'u'); 
0872   08DA             _if19_cond:
0873   08DA FA FD FF      lea d, [bp + -3] ; $format_p
0874   08DD 2A            mov b, [d]
0875   08DE 74            mov d, b
0876   08DF 32            mov bl, [d]
0877   08E0 A7 00         mov bh, 0
0878   08E2             ; START RELATIONAL
0879   08E2 D7            push a
0880   08E3 11            mov a, b
0881   08E4 26 75 00      mov b, $75
0882   08E7 B0            cmp a, b
0883   08E8 FD 71         seq ; ==
0884   08EA E4            pop a
0885   08EB             ; END RELATIONAL
0886   08EB C0 00 00      cmp b, 0
0887   08EE C6 F4 08      je _if19_else
0888   08F1             _if19_true:
0889   08F1             ;; ; 
0890   08F1 0A 1A 09      jmp _if19_exit
0891   08F4             _if19_else:
0892   08F4             ;; if(*format_p == 'x'); 
0893   08F4             _if20_cond:
0894   08F4 FA FD FF      lea d, [bp + -3] ; $format_p
0895   08F7 2A            mov b, [d]
0896   08F8 74            mov d, b
0897   08F9 32            mov bl, [d]
0898   08FA A7 00         mov bh, 0
0899   08FC             ; START RELATIONAL
0900   08FC D7            push a
0901   08FD 11            mov a, b
0902   08FE 26 78 00      mov b, $78
0903   0901 B0            cmp a, b
0904   0902 FD 71         seq ; ==
0905   0904 E4            pop a
0906   0905             ; END RELATIONAL
0907   0905 C0 00 00      cmp b, 0
0908   0908 C6 0E 09      je _if20_else
0909   090B             _if20_true:
0910   090B             ;; ; 
0911   090B 0A 1A 09      jmp _if20_exit
0912   090E             _if20_else:
0913   090E             ;; err("Unexpected format in printf."); 
0914   090E 26 D7 22      mov b, __s1 ; "Unexpected format in printf."
0915   0911 FD AB         swp b
0916   0913 D8            push b
0917   0914 07 89 0C      call err
0918   0917 51 02 00      add sp, 2
0919   091A             _if20_exit:
0920   091A             _if19_exit:
0921   091A             _if18_exit:
0922   091A             ;; p = p + 4; 
0923   091A FA FF FF      lea d, [bp + -1] ; $p
0924   091D DA            push d
0925   091E FA FF FF      lea d, [bp + -1] ; $p
0926   0921 2A            mov b, [d]
0927   0922             ; START TERMS
0928   0922 D7            push a
0929   0923 11            mov a, b
0930   0924 26 04 00      mov b, $4
0931   0927 56            add b, a
0932   0928 E4            pop a
0933   0929             ; END TERMS
0934   0929 E7            pop d
0935   092A FD 43         mov [d], b
0936   092C             ;; break; 
0937   092C 0A 11 0A      jmp _switch17_exit ; case break
0938   092F             _switch17_case2:
0939   092F             _switch17_case3:
0940   092F             ;; i = scann(); 
0941   092F FA FA FF      lea d, [bp + -6] ; $i
0942   0932 DA            push d
0943   0933 07 54 12      call scann
0944   0936 E7            pop d
0945   0937 FD 43         mov [d], b
0946   0939             ;; **(int **)p = i; 
0947   0939 FA FF FF      lea d, [bp + -1] ; $p
0948   093C 2A            mov b, [d]
0949   093D 74            mov d, b
0950   093E 2A            mov b, [d]
0951   093F D8            push b
0952   0940 FA FA FF      lea d, [bp + -6] ; $i
0953   0943 2A            mov b, [d]
0954   0944 E7            pop d
0955   0945 FD 43         mov [d], b
0956   0947             ;; p = p + 2; 
0957   0947 FA FF FF      lea d, [bp + -1] ; $p
0958   094A DA            push d
0959   094B FA FF FF      lea d, [bp + -1] ; $p
0960   094E 2A            mov b, [d]
0961   094F             ; START TERMS
0962   094F D7            push a
0963   0950 11            mov a, b
0964   0951 26 02 00      mov b, $2
0965   0954 56            add b, a
0966   0955 E4            pop a
0967   0956             ; END TERMS
0968   0956 E7            pop d
0969   0957 FD 43         mov [d], b
0970   0959             ;; break; 
0971   0959 0A 11 0A      jmp _switch17_exit ; case break
0972   095C             _switch17_case4:
0973   095C             ;; i = scann(); 
0974   095C FA FA FF      lea d, [bp + -6] ; $i
0975   095F DA            push d
0976   0960 07 54 12      call scann
0977   0963 E7            pop d
0978   0964 FD 43         mov [d], b
0979   0966             ;; **(int **)p = i; 
0980   0966 FA FF FF      lea d, [bp + -1] ; $p
0981   0969 2A            mov b, [d]
0982   096A 74            mov d, b
0983   096B 2A            mov b, [d]
0984   096C D8            push b
0985   096D FA FA FF      lea d, [bp + -6] ; $i
0986   0970 2A            mov b, [d]
0987   0971 E7            pop d
0988   0972 FD 43         mov [d], b
0989   0974             ;; p = p + 2; 
0990   0974 FA FF FF      lea d, [bp + -1] ; $p
0991   0977 DA            push d
0992   0978 FA FF FF      lea d, [bp + -1] ; $p
0993   097B 2A            mov b, [d]
0994   097C             ; START TERMS
0995   097C D7            push a
0996   097D 11            mov a, b
0997   097E 26 02 00      mov b, $2
0998   0981 56            add b, a
0999   0982 E4            pop a
1000   0983             ; END TERMS
1001   0983 E7            pop d
1002   0984 FD 43         mov [d], b
1003   0986             ;; break; 
1004   0986 0A 11 0A      jmp _switch17_exit ; case break
1005   0989             _switch17_case5:
1006   0989             ;; p = p + 2; 
1007   0989 FA FF FF      lea d, [bp + -1] ; $p
1008   098C DA            push d
1009   098D FA FF FF      lea d, [bp + -1] ; $p
1010   0990 2A            mov b, [d]
1011   0991             ; START TERMS
1012   0991 D7            push a
1013   0992 11            mov a, b
1014   0993 26 02 00      mov b, $2
1015   0996 56            add b, a
1016   0997 E4            pop a
1017   0998             ; END TERMS
1018   0998 E7            pop d
1019   0999 FD 43         mov [d], b
1020   099B             ;; break; 
1021   099B 0A 11 0A      jmp _switch17_exit ; case break
1022   099E             _switch17_case6:
1023   099E             ;; c = getchar(); 
1024   099E FA FC FF      lea d, [bp + -4] ; $c
1025   09A1 DA            push d
1026   09A2 07 3E 12      call getchar
1027   09A5 E7            pop d
1028   09A6 FD 3E         mov [d], bl
1029   09A8             ;; **(char **)p = c; 
1030   09A8 FA FF FF      lea d, [bp + -1] ; $p
1031   09AB 2A            mov b, [d]
1032   09AC 74            mov d, b
1033   09AD 2A            mov b, [d]
1034   09AE D8            push b
1035   09AF FA FC FF      lea d, [bp + -4] ; $c
1036   09B2 32            mov bl, [d]
1037   09B3 A7 00         mov bh, 0
1038   09B5 E7            pop d
1039   09B6 FD 43         mov [d], b
1040   09B8             ;; p = p + 2; 
1041   09B8 FA FF FF      lea d, [bp + -1] ; $p
1042   09BB DA            push d
1043   09BC FA FF FF      lea d, [bp + -1] ; $p
1044   09BF 2A            mov b, [d]
1045   09C0             ; START TERMS
1046   09C0 D7            push a
1047   09C1 11            mov a, b
1048   09C2 26 02 00      mov b, $2
1049   09C5 56            add b, a
1050   09C6 E4            pop a
1051   09C7             ; END TERMS
1052   09C7 E7            pop d
1053   09C8 FD 43         mov [d], b
1054   09CA             ;; break; 
1055   09CA 0A 11 0A      jmp _switch17_exit ; case break
1056   09CD             _switch17_case7:
1057   09CD             ;; gets(input_string); 
1058   09CD FA FA FD      lea d, [bp + -518] ; $input_string
1059   09D0 2D            mov b, d
1060   09D1 FD AB         swp b
1061   09D3 D8            push b
1062   09D4 07 08 0E      call gets
1063   09D7 51 02 00      add sp, 2
1064   09DA             ;; strcpy(*(char **)p, input_string); 
1065   09DA FA FA FD      lea d, [bp + -518] ; $input_string
1066   09DD 2D            mov b, d
1067   09DE FD AB         swp b
1068   09E0 D8            push b
1069   09E1 FA FF FF      lea d, [bp + -1] ; $p
1070   09E4 2A            mov b, [d]
1071   09E5 74            mov d, b
1072   09E6 2A            mov b, [d]
1073   09E7 FD AB         swp b
1074   09E9 D8            push b
1075   09EA 07 4F 06      call strcpy
1076   09ED 51 04 00      add sp, 4
1077   09F0             ;; p = p + 2; 
1078   09F0 FA FF FF      lea d, [bp + -1] ; $p
1079   09F3 DA            push d
1080   09F4 FA FF FF      lea d, [bp + -1] ; $p
1081   09F7 2A            mov b, [d]
1082   09F8             ; START TERMS
1083   09F8 D7            push a
1084   09F9 11            mov a, b
1085   09FA 26 02 00      mov b, $2
1086   09FD 56            add b, a
1087   09FE E4            pop a
1088   09FF             ; END TERMS
1089   09FF E7            pop d
1090   0A00 FD 43         mov [d], b
1091   0A02             ;; break; 
1092   0A02 0A 11 0A      jmp _switch17_exit ; case break
1093   0A05             _switch17_default:
1094   0A05             ;; print("Error: Unknown argument type.\n"); 
1095   0A05 26 F4 22      mov b, __s2 ; "Error: Unknown argument type.\n"
1096   0A08 FD AB         swp b
1097   0A0A D8            push b
1098   0A0B 07 79 12      call print
1099   0A0E 51 02 00      add sp, 2
1100   0A11             _switch17_exit:
1101   0A11             ;; format_p++; 
1102   0A11 FA FD FF      lea d, [bp + -3] ; $format_p
1103   0A14 2A            mov b, [d]
1104   0A15 D8            push b
1105   0A16 FD 77         inc b
1106   0A18 FA FD FF      lea d, [bp + -3] ; $format_p
1107   0A1B FD 43         mov [d], b
1108   0A1D E5            pop b
1109   0A1E 0A 3D 0A      jmp _if16_exit
1110   0A21             _if16_else:
1111   0A21             ;; putchar(*format_p); 
1112   0A21 FA FD FF      lea d, [bp + -3] ; $format_p
1113   0A24 2A            mov b, [d]
1114   0A25 74            mov d, b
1115   0A26 32            mov bl, [d]
1116   0A27 A7 00         mov bh, 0
1117   0A29 DD            push bl
1118   0A2A 07 31 12      call putchar
1119   0A2D 51 01 00      add sp, 1
1120   0A30             ;; format_p++; 
1121   0A30 FA FD FF      lea d, [bp + -3] ; $format_p
1122   0A33 2A            mov b, [d]
1123   0A34 D8            push b
1124   0A35 FD 77         inc b
1125   0A37 FA FD FF      lea d, [bp + -3] ; $format_p
1126   0A3A FD 43         mov [d], b
1127   0A3C E5            pop b
1128   0A3D             _if16_exit:
1129   0A3D             _if15_exit:
1130   0A3D             _for14_update:
1131   0A3D 0A 2A 08      jmp _for14_cond
1132   0A40             _for14_exit:
1133   0A40 F9            leave
1134   0A41 09            ret
1135   0A42             
1136   0A42             printf:
1137   0A42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1138   0A45             ; $p 
1139   0A45             ; $format_p 
1140   0A45 52 04 00      sub sp, 4
1141   0A48             ;; format_p = format; 
1142   0A48 FA FD FF      lea d, [bp + -3] ; $format_p
1143   0A4B DA            push d
1144   0A4C FA 05 00      lea d, [bp + 5] ; $format
1145   0A4F 2A            mov b, [d]
1146   0A50 E7            pop d
1147   0A51 FD 43         mov [d], b
1148   0A53             ;; p = &format + 2; 
1149   0A53 FA FF FF      lea d, [bp + -1] ; $p
1150   0A56 DA            push d
1151   0A57 FA 05 00      lea d, [bp + 5] ; $format
1152   0A5A 2D            mov b, d
1153   0A5B             ; START TERMS
1154   0A5B D7            push a
1155   0A5C 11            mov a, b
1156   0A5D 26 02 00      mov b, $2
1157   0A60 56            add b, a
1158   0A61 E4            pop a
1159   0A62             ; END TERMS
1160   0A62 E7            pop d
1161   0A63 FD 43         mov [d], b
1162   0A65             ;; for(;;){ 
1163   0A65             _for21_init:
1164   0A65             _for21_cond:
1165   0A65             _for21_block:
1166   0A65             ;; if(!*format_p) break; 
1167   0A65             _if22_cond:
1168   0A65 FA FD FF      lea d, [bp + -3] ; $format_p
1169   0A68 2A            mov b, [d]
1170   0A69 74            mov d, b
1171   0A6A 32            mov bl, [d]
1172   0A6B A7 00         mov bh, 0
1173   0A6D C0 00 00      cmp b, 0
1174   0A70 FD 71         seq ; !
1175   0A72 C0 00 00      cmp b, 0
1176   0A75 C6 7E 0A      je _if22_else
1177   0A78             _if22_true:
1178   0A78             ;; break; 
1179   0A78 0A 87 0C      jmp _for21_exit ; for break
1180   0A7B 0A 84 0C      jmp _if22_exit
1181   0A7E             _if22_else:
1182   0A7E             ;; if(*format_p == '%'){ 
1183   0A7E             _if23_cond:
1184   0A7E FA FD FF      lea d, [bp + -3] ; $format_p
1185   0A81 2A            mov b, [d]
1186   0A82 74            mov d, b
1187   0A83 32            mov bl, [d]
1188   0A84 A7 00         mov bh, 0
1189   0A86             ; START RELATIONAL
1190   0A86 D7            push a
1191   0A87 11            mov a, b
1192   0A88 26 25 00      mov b, $25
1193   0A8B B0            cmp a, b
1194   0A8C FD 71         seq ; ==
1195   0A8E E4            pop a
1196   0A8F             ; END RELATIONAL
1197   0A8F C0 00 00      cmp b, 0
1198   0A92 C6 68 0C      je _if23_else
1199   0A95             _if23_true:
1200   0A95             ;; format_p++; 
1201   0A95 FA FD FF      lea d, [bp + -3] ; $format_p
1202   0A98 2A            mov b, [d]
1203   0A99 D8            push b
1204   0A9A FD 77         inc b
1205   0A9C FA FD FF      lea d, [bp + -3] ; $format_p
1206   0A9F FD 43         mov [d], b
1207   0AA1 E5            pop b
1208   0AA2             ;; switch(*format_p){ 
1209   0AA2             _switch24_expr:
1210   0AA2 FA FD FF      lea d, [bp + -3] ; $format_p
1211   0AA5 2A            mov b, [d]
1212   0AA6 74            mov d, b
1213   0AA7 32            mov bl, [d]
1214   0AA8 A7 00         mov bh, 0
1215   0AAA             _switch24_comparisons:
1216   0AAA C1 6C         cmp bl, $6c
1217   0AAC C6 D8 0A      je _switch24_case0
1218   0AAF C1 4C         cmp bl, $4c
1219   0AB1 C6 D8 0A      je _switch24_case1
1220   0AB4 C1 64         cmp bl, $64
1221   0AB6 C6 A8 0B      je _switch24_case2
1222   0AB9 C1 69         cmp bl, $69
1223   0ABB C6 A8 0B      je _switch24_case3
1224   0ABE C1 75         cmp bl, $75
1225   0AC0 C6 CC 0B      je _switch24_case4
1226   0AC3 C1 78         cmp bl, $78
1227   0AC5 C6 F0 0B      je _switch24_case5
1228   0AC8 C1 63         cmp bl, $63
1229   0ACA C6 0E 0C      je _switch24_case6
1230   0ACD C1 73         cmp bl, $73
1231   0ACF C6 2D 0C      je _switch24_case7
1232   0AD2 0A 4C 0C      jmp _switch24_default
1233   0AD5 0A 58 0C      jmp _switch24_exit
1234   0AD8             _switch24_case0:
1235   0AD8             _switch24_case1:
1236   0AD8             ;; format_p++; 
1237   0AD8 FA FD FF      lea d, [bp + -3] ; $format_p
1238   0ADB 2A            mov b, [d]
1239   0ADC D8            push b
1240   0ADD FD 77         inc b
1241   0ADF FA FD FF      lea d, [bp + -3] ; $format_p
1242   0AE2 FD 43         mov [d], b
1243   0AE4 E5            pop b
1244   0AE5             ;; if(*format_p == 'd' || *format_p == 'i') 
1245   0AE5             _if25_cond:
1246   0AE5 FA FD FF      lea d, [bp + -3] ; $format_p
1247   0AE8 2A            mov b, [d]
1248   0AE9 74            mov d, b
1249   0AEA 32            mov bl, [d]
1250   0AEB A7 00         mov bh, 0
1251   0AED             ; START RELATIONAL
1252   0AED D7            push a
1253   0AEE 11            mov a, b
1254   0AEF 26 64 00      mov b, $64
1255   0AF2 B0            cmp a, b
1256   0AF3 FD 71         seq ; ==
1257   0AF5 E4            pop a
1258   0AF6             ; END RELATIONAL
1259   0AF6 D7            push a
1260   0AF7 11            mov a, b
1261   0AF8 FA FD FF      lea d, [bp + -3] ; $format_p
1262   0AFB 2A            mov b, [d]
1263   0AFC 74            mov d, b
1264   0AFD 32            mov bl, [d]
1265   0AFE A7 00         mov bh, 0
1266   0B00             ; START RELATIONAL
1267   0B00 D7            push a
1268   0B01 11            mov a, b
1269   0B02 26 69 00      mov b, $69
1270   0B05 B0            cmp a, b
1271   0B06 FD 71         seq ; ==
1272   0B08 E4            pop a
1273   0B09             ; END RELATIONAL
1274   0B09 FD A8         sor a, b ; ||
1275   0B0B E4            pop a
1276   0B0C C0 00 00      cmp b, 0
1277   0B0F C6 26 0B      je _if25_else
1278   0B12             _if25_true:
1279   0B12             ;; print_signed_long(*(long *)p); 
1280   0B12 FD 79         mov g, b
1281   0B14 28            mov b, c
1282   0B15 FD AB         swp b
1283   0B17 D8            push b
1284   0B18 FD 27         mov b, g
1285   0B1A FD AB         swp b
1286   0B1C D8            push b
1287   0B1D 07 12 0F      call print_signed_long
1288   0B20 51 04 00      add sp, 4
1289   0B23 0A 93 0B      jmp _if25_exit
1290   0B26             _if25_else:
1291   0B26             ;; if(*format_p == 'u') 
1292   0B26             _if26_cond:
1293   0B26 FA FD FF      lea d, [bp + -3] ; $format_p
1294   0B29 2A            mov b, [d]
1295   0B2A 74            mov d, b
1296   0B2B 32            mov bl, [d]
1297   0B2C A7 00         mov bh, 0
1298   0B2E             ; START RELATIONAL
1299   0B2E D7            push a
1300   0B2F 11            mov a, b
1301   0B30 26 75 00      mov b, $75
1302   0B33 B0            cmp a, b
1303   0B34 FD 71         seq ; ==
1304   0B36 E4            pop a
1305   0B37             ; END RELATIONAL
1306   0B37 C0 00 00      cmp b, 0
1307   0B3A C6 51 0B      je _if26_else
1308   0B3D             _if26_true:
1309   0B3D             ;; print_unsigned_long(*(unsigned long *)p); 
1310   0B3D FD 79         mov g, b
1311   0B3F 28            mov b, c
1312   0B40 FD AB         swp b
1313   0B42 D8            push b
1314   0B43 FD 27         mov b, g
1315   0B45 FD AB         swp b
1316   0B47 D8            push b
1317   0B48 07 64 10      call print_unsigned_long
1318   0B4B 51 04 00      add sp, 4
1319   0B4E 0A 93 0B      jmp _if26_exit
1320   0B51             _if26_else:
1321   0B51             ;; if(*format_p == 'x') 
1322   0B51             _if27_cond:
1323   0B51 FA FD FF      lea d, [bp + -3] ; $format_p
1324   0B54 2A            mov b, [d]
1325   0B55 74            mov d, b
1326   0B56 32            mov bl, [d]
1327   0B57 A7 00         mov bh, 0
1328   0B59             ; START RELATIONAL
1329   0B59 D7            push a
1330   0B5A 11            mov a, b
1331   0B5B 26 78 00      mov b, $78
1332   0B5E B0            cmp a, b
1333   0B5F FD 71         seq ; ==
1334   0B61 E4            pop a
1335   0B62             ; END RELATIONAL
1336   0B62 C0 00 00      cmp b, 0
1337   0B65 C6 87 0B      je _if27_else
1338   0B68             _if27_true:
1339   0B68             ;; printx32(*(long int *)p); 
1340   0B68 FA FF FF      lea d, [bp + -1] ; $p
1341   0B6B 2A            mov b, [d]
1342   0B6C 74            mov d, b
1343   0B6D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1344   0B70 FD 39         mov c, b ; And place it into C
1345   0B72 2A            mov b, [d] ; Lower Word in B
1346   0B73 FD 79         mov g, b
1347   0B75 28            mov b, c
1348   0B76 FD AB         swp b
1349   0B78 D8            push b
1350   0B79 FD 27         mov b, g
1351   0B7B FD AB         swp b
1352   0B7D D8            push b
1353   0B7E 07 9B 0C      call printx32
1354   0B81 51 04 00      add sp, 4
1355   0B84 0A 93 0B      jmp _if27_exit
1356   0B87             _if27_else:
1357   0B87             ;; err("Unexpected format in printf."); 
1358   0B87 26 D7 22      mov b, __s1 ; "Unexpected format in printf."
1359   0B8A FD AB         swp b
1360   0B8C D8            push b
1361   0B8D 07 89 0C      call err
1362   0B90 51 02 00      add sp, 2
1363   0B93             _if27_exit:
1364   0B93             _if26_exit:
1365   0B93             _if25_exit:
1366   0B93             ;; p = p + 4; 
1367   0B93 FA FF FF      lea d, [bp + -1] ; $p
1368   0B96 DA            push d
1369   0B97 FA FF FF      lea d, [bp + -1] ; $p
1370   0B9A 2A            mov b, [d]
1371   0B9B             ; START TERMS
1372   0B9B D7            push a
1373   0B9C 11            mov a, b
1374   0B9D 26 04 00      mov b, $4
1375   0BA0 56            add b, a
1376   0BA1 E4            pop a
1377   0BA2             ; END TERMS
1378   0BA2 E7            pop d
1379   0BA3 FD 43         mov [d], b
1380   0BA5             ;; break; 
1381   0BA5 0A 58 0C      jmp _switch24_exit ; case break
1382   0BA8             _switch24_case2:
1383   0BA8             _switch24_case3:
1384   0BA8             ;; print_signed(*(int*)p); 
1385   0BA8 FA FF FF      lea d, [bp + -1] ; $p
1386   0BAB 2A            mov b, [d]
1387   0BAC 74            mov d, b
1388   0BAD 2A            mov b, [d]
1389   0BAE FD AB         swp b
1390   0BB0 D8            push b
1391   0BB1 07 22 0E      call print_signed
1392   0BB4 51 02 00      add sp, 2
1393   0BB7             ;; p = p + 2; 
1394   0BB7 FA FF FF      lea d, [bp + -1] ; $p
1395   0BBA DA            push d
1396   0BBB FA FF FF      lea d, [bp + -1] ; $p
1397   0BBE 2A            mov b, [d]
1398   0BBF             ; START TERMS
1399   0BBF D7            push a
1400   0BC0 11            mov a, b
1401   0BC1 26 02 00      mov b, $2
1402   0BC4 56            add b, a
1403   0BC5 E4            pop a
1404   0BC6             ; END TERMS
1405   0BC6 E7            pop d
1406   0BC7 FD 43         mov [d], b
1407   0BC9             ;; break; 
1408   0BC9 0A 58 0C      jmp _switch24_exit ; case break
1409   0BCC             _switch24_case4:
1410   0BCC             ;; print_unsigned(*(unsigned int*)p); 
1411   0BCC FA FF FF      lea d, [bp + -1] ; $p
1412   0BCF 2A            mov b, [d]
1413   0BD0 74            mov d, b
1414   0BD1 2A            mov b, [d]
1415   0BD2 FD AB         swp b
1416   0BD4 D8            push b
1417   0BD5 07 61 11      call print_unsigned
1418   0BD8 51 02 00      add sp, 2
1419   0BDB             ;; p = p + 2; 
1420   0BDB FA FF FF      lea d, [bp + -1] ; $p
1421   0BDE DA            push d
1422   0BDF FA FF FF      lea d, [bp + -1] ; $p
1423   0BE2 2A            mov b, [d]
1424   0BE3             ; START TERMS
1425   0BE3 D7            push a
1426   0BE4 11            mov a, b
1427   0BE5 26 02 00      mov b, $2
1428   0BE8 56            add b, a
1429   0BE9 E4            pop a
1430   0BEA             ; END TERMS
1431   0BEA E7            pop d
1432   0BEB FD 43         mov [d], b
1433   0BED             ;; break; 
1434   0BED 0A 58 0C      jmp _switch24_exit ; case break
1435   0BF0             _switch24_case5:
1436   0BF0             
1437   0BF0             ; --- BEGIN INLINE ASM BLOCK
1438   0BF0 FA FF FF      lea d, [bp + -1] ; $p
1439   0BF3 FD 2A         mov d, [d]
1440   0BF5 2A            mov b, [d]
1441   0BF6 07 3F 15      call print_u16x
1442   0BF9             ; --- END INLINE ASM BLOCK
1443   0BF9             
1444   0BF9             ;; p = p + 2; 
1445   0BF9 FA FF FF      lea d, [bp + -1] ; $p
1446   0BFC DA            push d
1447   0BFD FA FF FF      lea d, [bp + -1] ; $p
1448   0C00 2A            mov b, [d]
1449   0C01             ; START TERMS
1450   0C01 D7            push a
1451   0C02 11            mov a, b
1452   0C03 26 02 00      mov b, $2
1453   0C06 56            add b, a
1454   0C07 E4            pop a
1455   0C08             ; END TERMS
1456   0C08 E7            pop d
1457   0C09 FD 43         mov [d], b
1458   0C0B             ;; break; 
1459   0C0B 0A 58 0C      jmp _switch24_exit ; case break
1460   0C0E             _switch24_case6:
1461   0C0E             
1462   0C0E             ; --- BEGIN INLINE ASM BLOCK
1463   0C0E FA FF FF      lea d, [bp + -1] ; $p
1464   0C11 FD 2A         mov d, [d]
1465   0C13 1E            mov al, [d]
1466   0C14 23            mov ah, al
1467   0C15 07 9D 13      call _putchar
1468   0C18             ; --- END INLINE ASM BLOCK
1469   0C18             
1470   0C18             ;; p = p + 2; 
1471   0C18 FA FF FF      lea d, [bp + -1] ; $p
1472   0C1B DA            push d
1473   0C1C FA FF FF      lea d, [bp + -1] ; $p
1474   0C1F 2A            mov b, [d]
1475   0C20             ; START TERMS
1476   0C20 D7            push a
1477   0C21 11            mov a, b
1478   0C22 26 02 00      mov b, $2
1479   0C25 56            add b, a
1480   0C26 E4            pop a
1481   0C27             ; END TERMS
1482   0C27 E7            pop d
1483   0C28 FD 43         mov [d], b
1484   0C2A             ;; break; 
1485   0C2A 0A 58 0C      jmp _switch24_exit ; case break
1486   0C2D             _switch24_case7:
1487   0C2D             
1488   0C2D             ; --- BEGIN INLINE ASM BLOCK
1489   0C2D FA FF FF      lea d, [bp + -1] ; $p
1490   0C30 FD 2A         mov d, [d]
1491   0C32 FD 2A         mov d, [d]
1492   0C34 07 E7 14      call _puts
1493   0C37             ; --- END INLINE ASM BLOCK
1494   0C37             
1495   0C37             ;; p = p + 2; 
1496   0C37 FA FF FF      lea d, [bp + -1] ; $p
1497   0C3A DA            push d
1498   0C3B FA FF FF      lea d, [bp + -1] ; $p
1499   0C3E 2A            mov b, [d]
1500   0C3F             ; START TERMS
1501   0C3F D7            push a
1502   0C40 11            mov a, b
1503   0C41 26 02 00      mov b, $2
1504   0C44 56            add b, a
1505   0C45 E4            pop a
1506   0C46             ; END TERMS
1507   0C46 E7            pop d
1508   0C47 FD 43         mov [d], b
1509   0C49             ;; break; 
1510   0C49 0A 58 0C      jmp _switch24_exit ; case break
1511   0C4C             _switch24_default:
1512   0C4C             ;; print("Error: Unknown argument type.\n"); 
1513   0C4C 26 F4 22      mov b, __s2 ; "Error: Unknown argument type.\n"
1514   0C4F FD AB         swp b
1515   0C51 D8            push b
1516   0C52 07 79 12      call print
1517   0C55 51 02 00      add sp, 2
1518   0C58             _switch24_exit:
1519   0C58             ;; format_p++; 
1520   0C58 FA FD FF      lea d, [bp + -3] ; $format_p
1521   0C5B 2A            mov b, [d]
1522   0C5C D8            push b
1523   0C5D FD 77         inc b
1524   0C5F FA FD FF      lea d, [bp + -3] ; $format_p
1525   0C62 FD 43         mov [d], b
1526   0C64 E5            pop b
1527   0C65 0A 84 0C      jmp _if23_exit
1528   0C68             _if23_else:
1529   0C68             ;; putchar(*format_p); 
1530   0C68 FA FD FF      lea d, [bp + -3] ; $format_p
1531   0C6B 2A            mov b, [d]
1532   0C6C 74            mov d, b
1533   0C6D 32            mov bl, [d]
1534   0C6E A7 00         mov bh, 0
1535   0C70 DD            push bl
1536   0C71 07 31 12      call putchar
1537   0C74 51 01 00      add sp, 1
1538   0C77             ;; format_p++; 
1539   0C77 FA FD FF      lea d, [bp + -3] ; $format_p
1540   0C7A 2A            mov b, [d]
1541   0C7B D8            push b
1542   0C7C FD 77         inc b
1543   0C7E FA FD FF      lea d, [bp + -3] ; $format_p
1544   0C81 FD 43         mov [d], b
1545   0C83 E5            pop b
1546   0C84             _if23_exit:
1547   0C84             _if22_exit:
1548   0C84             _for21_update:
1549   0C84 0A 65 0A      jmp _for21_cond
1550   0C87             _for21_exit:
1551   0C87 F9            leave
1552   0C88 09            ret
1553   0C89             
1554   0C89             err:
1555   0C89 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1556   0C8C             ;; print(e); 
1557   0C8C FA 05 00      lea d, [bp + 5] ; $e
1558   0C8F 2A            mov b, [d]
1559   0C90 FD AB         swp b
1560   0C92 D8            push b
1561   0C93 07 79 12      call print
1562   0C96 51 02 00      add sp, 2
1563   0C99 F9            leave
1564   0C9A 09            ret
1565   0C9B             
1566   0C9B             printx32:
1567   0C9B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1568   0C9E             
1569   0C9E             ; --- BEGIN INLINE ASM BLOCK
1570   0C9E FA 05 00      lea d, [bp + 5] ; $hex
1571   0CA1 2B 02 00      mov b, [d+2]
1572   0CA4 07 3F 15      call print_u16x
1573   0CA7 2A            mov b, [d]
1574   0CA8 07 3F 15      call print_u16x
1575   0CAB             ; --- END INLINE ASM BLOCK
1576   0CAB             
1577   0CAB F9            leave
1578   0CAC 09            ret
1579   0CAD             
1580   0CAD             printx16:
1581   0CAD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1582   0CB0             
1583   0CB0             ; --- BEGIN INLINE ASM BLOCK
1584   0CB0 FA 05 00      lea d, [bp + 5] ; $hex
1585   0CB3 2A            mov b, [d]
1586   0CB4 07 3F 15      call print_u16x
1587   0CB7             ; --- END INLINE ASM BLOCK
1588   0CB7             
1589   0CB7 F9            leave
1590   0CB8 09            ret
1591   0CB9             
1592   0CB9             printx8:
1593   0CB9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1594   0CBC             
1595   0CBC             ; --- BEGIN INLINE ASM BLOCK
1596   0CBC FA 05 00      lea d, [bp + 5] ; $hex
1597   0CBF 32            mov bl, [d]
1598   0CC0 07 83 15      call print_u8x
1599   0CC3             ; --- END INLINE ASM BLOCK
1600   0CC3             
1601   0CC3 F9            leave
1602   0CC4 09            ret
1603   0CC5             
1604   0CC5             hex_str_to_int:
1605   0CC5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1606   0CC8             ; $value 
1607   0CC8 10 00 00      mov a, $0
1608   0CCB 45 FF FF      mov [bp + -1], a
1609   0CCE             ; $i 
1610   0CCE             ; $hex_char 
1611   0CCE             ; $len 
1612   0CCE 52 07 00      sub sp, 7
1613   0CD1             ;; len = strlen(hex_string); 
1614   0CD1 FA FA FF      lea d, [bp + -6] ; $len
1615   0CD4 DA            push d
1616   0CD5 FA 05 00      lea d, [bp + 5] ; $hex_string
1617   0CD8 2A            mov b, [d]
1618   0CD9 FD AB         swp b
1619   0CDB D8            push b
1620   0CDC 07 BE 07      call strlen
1621   0CDF 51 02 00      add sp, 2
1622   0CE2 E7            pop d
1623   0CE3 FD 43         mov [d], b
1624   0CE5             ;; for (i = 0; i < len; i++) { 
1625   0CE5             _for28_init:
1626   0CE5 FA FD FF      lea d, [bp + -3] ; $i
1627   0CE8 DA            push d
1628   0CE9 26 00 00      mov b, $0
1629   0CEC E7            pop d
1630   0CED FD 43         mov [d], b
1631   0CEF             _for28_cond:
1632   0CEF FA FD FF      lea d, [bp + -3] ; $i
1633   0CF2 2A            mov b, [d]
1634   0CF3             ; START RELATIONAL
1635   0CF3 D7            push a
1636   0CF4 11            mov a, b
1637   0CF5 FA FA FF      lea d, [bp + -6] ; $len
1638   0CF8 2A            mov b, [d]
1639   0CF9 B0            cmp a, b
1640   0CFA FD 73         slt ; <= (signed)
1641   0CFC E4            pop a
1642   0CFD             ; END RELATIONAL
1643   0CFD C0 00 00      cmp b, 0
1644   0D00 C6 02 0E      je _for28_exit
1645   0D03             _for28_block:
1646   0D03             ;; hex_char = hex_string[i]; 
1647   0D03 FA FC FF      lea d, [bp + -4] ; $hex_char
1648   0D06 DA            push d
1649   0D07 FA 05 00      lea d, [bp + 5] ; $hex_string
1650   0D0A FD 2A         mov d, [d]
1651   0D0C D7            push a
1652   0D0D DA            push d
1653   0D0E FA FD FF      lea d, [bp + -3] ; $i
1654   0D11 2A            mov b, [d]
1655   0D12 E7            pop d
1656   0D13 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1657   0D17 E4            pop a
1658   0D18 32            mov bl, [d]
1659   0D19 A7 00         mov bh, 0
1660   0D1B E7            pop d
1661   0D1C FD 3E         mov [d], bl
1662   0D1E             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1663   0D1E             _if29_cond:
1664   0D1E FA FC FF      lea d, [bp + -4] ; $hex_char
1665   0D21 32            mov bl, [d]
1666   0D22 A7 00         mov bh, 0
1667   0D24             ; START RELATIONAL
1668   0D24 D7            push a
1669   0D25 11            mov a, b
1670   0D26 26 61 00      mov b, $61
1671   0D29 B0            cmp a, b
1672   0D2A FD 80         sge ; >=
1673   0D2C E4            pop a
1674   0D2D             ; END RELATIONAL
1675   0D2D D7            push a
1676   0D2E 11            mov a, b
1677   0D2F FA FC FF      lea d, [bp + -4] ; $hex_char
1678   0D32 32            mov bl, [d]
1679   0D33 A7 00         mov bh, 0
1680   0D35             ; START RELATIONAL
1681   0D35 D7            push a
1682   0D36 11            mov a, b
1683   0D37 26 66 00      mov b, $66
1684   0D3A B0            cmp a, b
1685   0D3B FD 74         sle ; <=
1686   0D3D E4            pop a
1687   0D3E             ; END RELATIONAL
1688   0D3E FD A7         sand a, b ; &&
1689   0D40 E4            pop a
1690   0D41 C0 00 00      cmp b, 0
1691   0D44 C6 75 0D      je _if29_else
1692   0D47             _if29_true:
1693   0D47             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1694   0D47 FA FF FF      lea d, [bp + -1] ; $value
1695   0D4A DA            push d
1696   0D4B FA FF FF      lea d, [bp + -1] ; $value
1697   0D4E 2A            mov b, [d]
1698   0D4F             ; START FACTORS
1699   0D4F D7            push a
1700   0D50 11            mov a, b
1701   0D51 26 10 00      mov b, $10
1702   0D54 AC            mul a, b ; *
1703   0D55 11            mov a, b
1704   0D56 27            mov b, a
1705   0D57 E4            pop a
1706   0D58             ; END FACTORS
1707   0D58             ; START TERMS
1708   0D58 D7            push a
1709   0D59 11            mov a, b
1710   0D5A FA FC FF      lea d, [bp + -4] ; $hex_char
1711   0D5D 32            mov bl, [d]
1712   0D5E A7 00         mov bh, 0
1713   0D60             ; START TERMS
1714   0D60 D7            push a
1715   0D61 11            mov a, b
1716   0D62 26 61 00      mov b, $61
1717   0D65 60            sub a, b
1718   0D66 27            mov b, a
1719   0D67 11            mov a, b
1720   0D68 26 0A 00      mov b, $a
1721   0D6B 56            add b, a
1722   0D6C E4            pop a
1723   0D6D             ; END TERMS
1724   0D6D 56            add b, a
1725   0D6E E4            pop a
1726   0D6F             ; END TERMS
1727   0D6F E7            pop d
1728   0D70 FD 43         mov [d], b
1729   0D72 0A F2 0D      jmp _if29_exit
1730   0D75             _if29_else:
1731   0D75             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1732   0D75             _if30_cond:
1733   0D75 FA FC FF      lea d, [bp + -4] ; $hex_char
1734   0D78 32            mov bl, [d]
1735   0D79 A7 00         mov bh, 0
1736   0D7B             ; START RELATIONAL
1737   0D7B D7            push a
1738   0D7C 11            mov a, b
1739   0D7D 26 41 00      mov b, $41
1740   0D80 B0            cmp a, b
1741   0D81 FD 80         sge ; >=
1742   0D83 E4            pop a
1743   0D84             ; END RELATIONAL
1744   0D84 D7            push a
1745   0D85 11            mov a, b
1746   0D86 FA FC FF      lea d, [bp + -4] ; $hex_char
1747   0D89 32            mov bl, [d]
1748   0D8A A7 00         mov bh, 0
1749   0D8C             ; START RELATIONAL
1750   0D8C D7            push a
1751   0D8D 11            mov a, b
1752   0D8E 26 46 00      mov b, $46
1753   0D91 B0            cmp a, b
1754   0D92 FD 74         sle ; <=
1755   0D94 E4            pop a
1756   0D95             ; END RELATIONAL
1757   0D95 FD A7         sand a, b ; &&
1758   0D97 E4            pop a
1759   0D98 C0 00 00      cmp b, 0
1760   0D9B C6 CC 0D      je _if30_else
1761   0D9E             _if30_true:
1762   0D9E             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1763   0D9E FA FF FF      lea d, [bp + -1] ; $value
1764   0DA1 DA            push d
1765   0DA2 FA FF FF      lea d, [bp + -1] ; $value
1766   0DA5 2A            mov b, [d]
1767   0DA6             ; START FACTORS
1768   0DA6 D7            push a
1769   0DA7 11            mov a, b
1770   0DA8 26 10 00      mov b, $10
1771   0DAB AC            mul a, b ; *
1772   0DAC 11            mov a, b
1773   0DAD 27            mov b, a
1774   0DAE E4            pop a
1775   0DAF             ; END FACTORS
1776   0DAF             ; START TERMS
1777   0DAF D7            push a
1778   0DB0 11            mov a, b
1779   0DB1 FA FC FF      lea d, [bp + -4] ; $hex_char
1780   0DB4 32            mov bl, [d]
1781   0DB5 A7 00         mov bh, 0
1782   0DB7             ; START TERMS
1783   0DB7 D7            push a
1784   0DB8 11            mov a, b
1785   0DB9 26 41 00      mov b, $41
1786   0DBC 60            sub a, b
1787   0DBD 27            mov b, a
1788   0DBE 11            mov a, b
1789   0DBF 26 0A 00      mov b, $a
1790   0DC2 56            add b, a
1791   0DC3 E4            pop a
1792   0DC4             ; END TERMS
1793   0DC4 56            add b, a
1794   0DC5 E4            pop a
1795   0DC6             ; END TERMS
1796   0DC6 E7            pop d
1797   0DC7 FD 43         mov [d], b
1798   0DC9 0A F2 0D      jmp _if30_exit
1799   0DCC             _if30_else:
1800   0DCC             ;; value = (value * 16) + (hex_char - '0'); 
1801   0DCC FA FF FF      lea d, [bp + -1] ; $value
1802   0DCF DA            push d
1803   0DD0 FA FF FF      lea d, [bp + -1] ; $value
1804   0DD3 2A            mov b, [d]
1805   0DD4             ; START FACTORS
1806   0DD4 D7            push a
1807   0DD5 11            mov a, b
1808   0DD6 26 10 00      mov b, $10
1809   0DD9 AC            mul a, b ; *
1810   0DDA 11            mov a, b
1811   0DDB 27            mov b, a
1812   0DDC E4            pop a
1813   0DDD             ; END FACTORS
1814   0DDD             ; START TERMS
1815   0DDD D7            push a
1816   0DDE 11            mov a, b
1817   0DDF FA FC FF      lea d, [bp + -4] ; $hex_char
1818   0DE2 32            mov bl, [d]
1819   0DE3 A7 00         mov bh, 0
1820   0DE5             ; START TERMS
1821   0DE5 D7            push a
1822   0DE6 11            mov a, b
1823   0DE7 26 30 00      mov b, $30
1824   0DEA 60            sub a, b
1825   0DEB 27            mov b, a
1826   0DEC E4            pop a
1827   0DED             ; END TERMS
1828   0DED 56            add b, a
1829   0DEE E4            pop a
1830   0DEF             ; END TERMS
1831   0DEF E7            pop d
1832   0DF0 FD 43         mov [d], b
1833   0DF2             _if30_exit:
1834   0DF2             _if29_exit:
1835   0DF2             _for28_update:
1836   0DF2 FA FD FF      lea d, [bp + -3] ; $i
1837   0DF5 2A            mov b, [d]
1838   0DF6 D8            push b
1839   0DF7 FD 77         inc b
1840   0DF9 FA FD FF      lea d, [bp + -3] ; $i
1841   0DFC FD 43         mov [d], b
1842   0DFE E5            pop b
1843   0DFF 0A EF 0C      jmp _for28_cond
1844   0E02             _for28_exit:
1845   0E02             ;; return value; 
1846   0E02 FA FF FF      lea d, [bp + -1] ; $value
1847   0E05 2A            mov b, [d]
1848   0E06 F9            leave
1849   0E07 09            ret
1850   0E08             
1851   0E08             gets:
1852   0E08 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1853   0E0B             
1854   0E0B             ; --- BEGIN INLINE ASM BLOCK
1855   0E0B FA 05 00      lea d, [bp + 5] ; $s
1856   0E0E 15            mov a, [d]
1857   0E0F 3C            mov d, a
1858   0E10 07 A4 13      call _gets
1859   0E13             ; --- END INLINE ASM BLOCK
1860   0E13             
1861   0E13             ;; return strlen(s); 
1862   0E13 FA 05 00      lea d, [bp + 5] ; $s
1863   0E16 2A            mov b, [d]
1864   0E17 FD AB         swp b
1865   0E19 D8            push b
1866   0E1A 07 BE 07      call strlen
1867   0E1D 51 02 00      add sp, 2
1868   0E20 F9            leave
1869   0E21 09            ret
1870   0E22             
1871   0E22             print_signed:
1872   0E22 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1873   0E25             ; $digits 
1874   0E25             ; $i 
1875   0E25 10 00 00      mov a, $0
1876   0E28 45 FA FF      mov [bp + -6], a
1877   0E2B 52 07 00      sub sp, 7
1878   0E2E             ;; if (num < 0) { 
1879   0E2E             _if31_cond:
1880   0E2E FA 05 00      lea d, [bp + 5] ; $num
1881   0E31 2A            mov b, [d]
1882   0E32             ; START RELATIONAL
1883   0E32 D7            push a
1884   0E33 11            mov a, b
1885   0E34 26 00 00      mov b, $0
1886   0E37 B0            cmp a, b
1887   0E38 FD 73         slt ; <= (signed)
1888   0E3A E4            pop a
1889   0E3B             ; END RELATIONAL
1890   0E3B C0 00 00      cmp b, 0
1891   0E3E C6 5B 0E      je _if31_else
1892   0E41             _if31_true:
1893   0E41             ;; putchar('-'); 
1894   0E41 26 2D 00      mov b, $2d
1895   0E44 DD            push bl
1896   0E45 07 31 12      call putchar
1897   0E48 51 01 00      add sp, 1
1898   0E4B             ;; num = -num; 
1899   0E4B FA 05 00      lea d, [bp + 5] ; $num
1900   0E4E DA            push d
1901   0E4F FA 05 00      lea d, [bp + 5] ; $num
1902   0E52 2A            mov b, [d]
1903   0E53 FD 97         neg b
1904   0E55 E7            pop d
1905   0E56 FD 43         mov [d], b
1906   0E58 0A 7D 0E      jmp _if31_exit
1907   0E5B             _if31_else:
1908   0E5B             ;; if (num == 0) { 
1909   0E5B             _if32_cond:
1910   0E5B FA 05 00      lea d, [bp + 5] ; $num
1911   0E5E 2A            mov b, [d]
1912   0E5F             ; START RELATIONAL
1913   0E5F D7            push a
1914   0E60 11            mov a, b
1915   0E61 26 00 00      mov b, $0
1916   0E64 B0            cmp a, b
1917   0E65 FD 71         seq ; ==
1918   0E67 E4            pop a
1919   0E68             ; END RELATIONAL
1920   0E68 C0 00 00      cmp b, 0
1921   0E6B C6 7D 0E      je _if32_exit
1922   0E6E             _if32_true:
1923   0E6E             ;; putchar('0'); 
1924   0E6E 26 30 00      mov b, $30
1925   0E71 DD            push bl
1926   0E72 07 31 12      call putchar
1927   0E75 51 01 00      add sp, 1
1928   0E78             ;; return; 
1929   0E78 F9            leave
1930   0E79 09            ret
1931   0E7A 0A 7D 0E      jmp _if32_exit
1932   0E7D             _if32_exit:
1933   0E7D             _if31_exit:
1934   0E7D             ;; while (num > 0) { 
1935   0E7D             _while33_cond:
1936   0E7D FA 05 00      lea d, [bp + 5] ; $num
1937   0E80 2A            mov b, [d]
1938   0E81             ; START RELATIONAL
1939   0E81 D7            push a
1940   0E82 11            mov a, b
1941   0E83 26 00 00      mov b, $0
1942   0E86 B0            cmp a, b
1943   0E87 FD 7F         sgt ; >
1944   0E89 E4            pop a
1945   0E8A             ; END RELATIONAL
1946   0E8A C0 00 00      cmp b, 0
1947   0E8D C6 D7 0E      je _while33_exit
1948   0E90             _while33_block:
1949   0E90             ;; digits[i] = '0' + (num % 10); 
1950   0E90 FA FC FF      lea d, [bp + -4] ; $digits
1951   0E93 D7            push a
1952   0E94 DA            push d
1953   0E95 FA FA FF      lea d, [bp + -6] ; $i
1954   0E98 2A            mov b, [d]
1955   0E99 E7            pop d
1956   0E9A 5A            add d, b
1957   0E9B E4            pop a
1958   0E9C DA            push d
1959   0E9D 26 30 00      mov b, $30
1960   0EA0             ; START TERMS
1961   0EA0 D7            push a
1962   0EA1 11            mov a, b
1963   0EA2 FA 05 00      lea d, [bp + 5] ; $num
1964   0EA5 2A            mov b, [d]
1965   0EA6             ; START FACTORS
1966   0EA6 D7            push a
1967   0EA7 11            mov a, b
1968   0EA8 26 0A 00      mov b, $a
1969   0EAB AE            div a, b ; 
1970   0EAC 11            mov a, b
1971   0EAD 27            mov b, a
1972   0EAE E4            pop a
1973   0EAF             ; END FACTORS
1974   0EAF 56            add b, a
1975   0EB0 E4            pop a
1976   0EB1             ; END TERMS
1977   0EB1 E7            pop d
1978   0EB2 FD 3E         mov [d], bl
1979   0EB4             ;; num = num / 10; 
1980   0EB4 FA 05 00      lea d, [bp + 5] ; $num
1981   0EB7 DA            push d
1982   0EB8 FA 05 00      lea d, [bp + 5] ; $num
1983   0EBB 2A            mov b, [d]
1984   0EBC             ; START FACTORS
1985   0EBC D7            push a
1986   0EBD 11            mov a, b
1987   0EBE 26 0A 00      mov b, $a
1988   0EC1 AE            div a, b
1989   0EC2 27            mov b, a
1990   0EC3 E4            pop a
1991   0EC4             ; END FACTORS
1992   0EC4 E7            pop d
1993   0EC5 FD 43         mov [d], b
1994   0EC7             ;; i++; 
1995   0EC7 FA FA FF      lea d, [bp + -6] ; $i
1996   0ECA 2A            mov b, [d]
1997   0ECB D8            push b
1998   0ECC FD 77         inc b
1999   0ECE FA FA FF      lea d, [bp + -6] ; $i
2000   0ED1 FD 43         mov [d], b
2001   0ED3 E5            pop b
2002   0ED4 0A 7D 0E      jmp _while33_cond
2003   0ED7             _while33_exit:
2004   0ED7             ;; while (i > 0) { 
2005   0ED7             _while34_cond:
2006   0ED7 FA FA FF      lea d, [bp + -6] ; $i
2007   0EDA 2A            mov b, [d]
2008   0EDB             ; START RELATIONAL
2009   0EDB D7            push a
2010   0EDC 11            mov a, b
2011   0EDD 26 00 00      mov b, $0
2012   0EE0 B0            cmp a, b
2013   0EE1 FD 7F         sgt ; >
2014   0EE3 E4            pop a
2015   0EE4             ; END RELATIONAL
2016   0EE4 C0 00 00      cmp b, 0
2017   0EE7 C6 10 0F      je _while34_exit
2018   0EEA             _while34_block:
2019   0EEA             ;; i--; 
2020   0EEA FA FA FF      lea d, [bp + -6] ; $i
2021   0EED 2A            mov b, [d]
2022   0EEE D8            push b
2023   0EEF FD 7D         dec b
2024   0EF1 FA FA FF      lea d, [bp + -6] ; $i
2025   0EF4 FD 43         mov [d], b
2026   0EF6 E5            pop b
2027   0EF7             ;; putchar(digits[i]); 
2028   0EF7 FA FC FF      lea d, [bp + -4] ; $digits
2029   0EFA D7            push a
2030   0EFB DA            push d
2031   0EFC FA FA FF      lea d, [bp + -6] ; $i
2032   0EFF 2A            mov b, [d]
2033   0F00 E7            pop d
2034   0F01 5A            add d, b
2035   0F02 E4            pop a
2036   0F03 32            mov bl, [d]
2037   0F04 A7 00         mov bh, 0
2038   0F06 DD            push bl
2039   0F07 07 31 12      call putchar
2040   0F0A 51 01 00      add sp, 1
2041   0F0D 0A D7 0E      jmp _while34_cond
2042   0F10             _while34_exit:
2043   0F10 F9            leave
2044   0F11 09            ret
2045   0F12             
2046   0F12             print_signed_long:
2047   0F12 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2048   0F15             ; $digits 
2049   0F15             ; $i 
2050   0F15 10 00 00      mov a, $0
2051   0F18 45 F5 FF      mov [bp + -11], a
2052   0F1B 52 0C 00      sub sp, 12
2053   0F1E             ;; if (num < 0) { 
2054   0F1E             _if35_cond:
2055   0F1E FA 05 00      lea d, [bp + 5] ; $num
2056   0F21 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2057   0F24 FD 39         mov c, b ; And place it into C
2058   0F26 2A            mov b, [d] ; Lower Word in B
2059   0F27             ; START RELATIONAL
2060   0F27 D7            push a
2061   0F28 FD D8         push g
2062   0F2A 11            mov a, b
2063   0F2B FD 7A         mov g, c
2064   0F2D 26 00 00      mov b, $0
2065   0F30 4D            mov si, a
2066   0F31 11            mov a, b
2067   0F32 4F            mov di, a
2068   0F33 FD 12         mov a, g
2069   0F35 28            mov b, c
2070   0F36 B0            cmp a, b
2071   0F37 FD 75         slu ; <
2072   0F39 D8            push b
2073   0F3A 28            mov b, c
2074   0F3B FD 71         seq ; ==
2075   0F3D D8            push b
2076   0F3E 50            mov a, di
2077   0F3F 27            mov b, a
2078   0F40 4E            mov a, si
2079   0F41 B0            cmp a, b
2080   0F42 FD 75         slu ; <
2081   0F44 E4            pop a
2082   0F45 FD 92         and b, a
2083   0F47 E4            pop a
2084   0F48 FD 70         or b, a
2085   0F4A               
2086   0F4A FD F1         pop g
2087   0F4C E4            pop a
2088   0F4D             ; END RELATIONAL
2089   0F4D C0 00 00      cmp b, 0
2090   0F50 C6 77 0F      je _if35_else
2091   0F53             _if35_true:
2092   0F53             ;; putchar('-'); 
2093   0F53 26 2D 00      mov b, $2d
2094   0F56 DD            push bl
2095   0F57 07 31 12      call putchar
2096   0F5A 51 01 00      add sp, 1
2097   0F5D             ;; num = -num; 
2098   0F5D FA 05 00      lea d, [bp + 5] ; $num
2099   0F60 DA            push d
2100   0F61 FA 05 00      lea d, [bp + 5] ; $num
2101   0F64 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2102   0F67 FD 39         mov c, b ; And place it into C
2103   0F69 2A            mov b, [d] ; Lower Word in B
2104   0F6A FD 97         neg b
2105   0F6C E7            pop d
2106   0F6D FD 43         mov [d], b
2107   0F6F 28            mov b, c
2108   0F70 FD 44 02 00   mov [d + 2], b
2109   0F74 0A AE 0F      jmp _if35_exit
2110   0F77             _if35_else:
2111   0F77             ;; if (num == 0) { 
2112   0F77             _if36_cond:
2113   0F77 FA 05 00      lea d, [bp + 5] ; $num
2114   0F7A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2115   0F7D FD 39         mov c, b ; And place it into C
2116   0F7F 2A            mov b, [d] ; Lower Word in B
2117   0F80             ; START RELATIONAL
2118   0F80 D7            push a
2119   0F81 FD D8         push g
2120   0F83 11            mov a, b
2121   0F84 FD 7A         mov g, c
2122   0F86 26 00 00      mov b, $0
2123   0F89 B0            cmp a, b
2124   0F8A FD 71         seq ; ==
2125   0F8C D8            push b
2126   0F8D 12            mov a, c
2127   0F8E FD 27         mov b, g
2128   0F90 B0            cmp a, b
2129   0F91 FD 71         seq ; ==
2130   0F93 E4            pop a
2131   0F94 FD A7         sand a, b
2132   0F96 FD F1         pop g
2133   0F98 E4            pop a
2134   0F99             ; END RELATIONAL
2135   0F99 C0 00 00      cmp b, 0
2136   0F9C C6 AE 0F      je _if36_exit
2137   0F9F             _if36_true:
2138   0F9F             ;; putchar('0'); 
2139   0F9F 26 30 00      mov b, $30
2140   0FA2 DD            push bl
2141   0FA3 07 31 12      call putchar
2142   0FA6 51 01 00      add sp, 1
2143   0FA9             ;; return; 
2144   0FA9 F9            leave
2145   0FAA 09            ret
2146   0FAB 0A AE 0F      jmp _if36_exit
2147   0FAE             _if36_exit:
2148   0FAE             _if35_exit:
2149   0FAE             ;; while (num > 0) { 
2150   0FAE             _while37_cond:
2151   0FAE FA 05 00      lea d, [bp + 5] ; $num
2152   0FB1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2153   0FB4 FD 39         mov c, b ; And place it into C
2154   0FB6 2A            mov b, [d] ; Lower Word in B
2155   0FB7             ; START RELATIONAL
2156   0FB7 D7            push a
2157   0FB8 FD D8         push g
2158   0FBA 11            mov a, b
2159   0FBB FD 7A         mov g, c
2160   0FBD 26 00 00      mov b, $0
2161   0FC0 B0            cmp a, b
2162   0FC1 FD 7F         sgt ; >
2163   0FC3 FD F1         pop g
2164   0FC5 E4            pop a
2165   0FC6             ; END RELATIONAL
2166   0FC6 C0 00 00      cmp b, 0
2167   0FC9 C6 29 10      je _while37_exit
2168   0FCC             _while37_block:
2169   0FCC             ;; digits[i] = '0' + (num % 10); 
2170   0FCC FA F7 FF      lea d, [bp + -9] ; $digits
2171   0FCF D7            push a
2172   0FD0 DA            push d
2173   0FD1 FA F5 FF      lea d, [bp + -11] ; $i
2174   0FD4 2A            mov b, [d]
2175   0FD5 E7            pop d
2176   0FD6 5A            add d, b
2177   0FD7 E4            pop a
2178   0FD8 DA            push d
2179   0FD9 26 30 00      mov b, $30
2180   0FDC             ; START TERMS
2181   0FDC D7            push a
2182   0FDD 11            mov a, b
2183   0FDE FA 05 00      lea d, [bp + 5] ; $num
2184   0FE1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2185   0FE4 FD 39         mov c, b ; And place it into C
2186   0FE6 2A            mov b, [d] ; Lower Word in B
2187   0FE7             ; START FACTORS
2188   0FE7 D7            push a
2189   0FE8 11            mov a, b
2190   0FE9 26 0A 00      mov b, $a
2191   0FEC AE            div a, b ; 
2192   0FED 11            mov a, b
2193   0FEE 27            mov b, a
2194   0FEF E4            pop a
2195   0FF0             ; END FACTORS
2196   0FF0 54            add a, b
2197   0FF1 D7            push a
2198   0FF2 FD 12         mov a, g
2199   0FF4 28            mov b, c
2200   0FF5 5C            adc a, b
2201   0FF6 39            mov c, a
2202   0FF7 E5            pop b
2203   0FF8 E4            pop a
2204   0FF9             ; END TERMS
2205   0FF9 E7            pop d
2206   0FFA FD 3E         mov [d], bl
2207   0FFC             ;; num = num / 10; 
2208   0FFC FA 05 00      lea d, [bp + 5] ; $num
2209   0FFF DA            push d
2210   1000 FA 05 00      lea d, [bp + 5] ; $num
2211   1003 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2212   1006 FD 39         mov c, b ; And place it into C
2213   1008 2A            mov b, [d] ; Lower Word in B
2214   1009             ; START FACTORS
2215   1009 D7            push a
2216   100A 11            mov a, b
2217   100B 26 0A 00      mov b, $a
2218   100E AE            div a, b
2219   100F 27            mov b, a
2220   1010 E4            pop a
2221   1011             ; END FACTORS
2222   1011 E7            pop d
2223   1012 FD 43         mov [d], b
2224   1014 28            mov b, c
2225   1015 FD 44 02 00   mov [d + 2], b
2226   1019             ;; i++; 
2227   1019 FA F5 FF      lea d, [bp + -11] ; $i
2228   101C 2A            mov b, [d]
2229   101D D8            push b
2230   101E FD 77         inc b
2231   1020 FA F5 FF      lea d, [bp + -11] ; $i
2232   1023 FD 43         mov [d], b
2233   1025 E5            pop b
2234   1026 0A AE 0F      jmp _while37_cond
2235   1029             _while37_exit:
2236   1029             ;; while (i > 0) { 
2237   1029             _while38_cond:
2238   1029 FA F5 FF      lea d, [bp + -11] ; $i
2239   102C 2A            mov b, [d]
2240   102D             ; START RELATIONAL
2241   102D D7            push a
2242   102E 11            mov a, b
2243   102F 26 00 00      mov b, $0
2244   1032 B0            cmp a, b
2245   1033 FD 7F         sgt ; >
2246   1035 E4            pop a
2247   1036             ; END RELATIONAL
2248   1036 C0 00 00      cmp b, 0
2249   1039 C6 62 10      je _while38_exit
2250   103C             _while38_block:
2251   103C             ;; i--; 
2252   103C FA F5 FF      lea d, [bp + -11] ; $i
2253   103F 2A            mov b, [d]
2254   1040 D8            push b
2255   1041 FD 7D         dec b
2256   1043 FA F5 FF      lea d, [bp + -11] ; $i
2257   1046 FD 43         mov [d], b
2258   1048 E5            pop b
2259   1049             ;; putchar(digits[i]); 
2260   1049 FA F7 FF      lea d, [bp + -9] ; $digits
2261   104C D7            push a
2262   104D DA            push d
2263   104E FA F5 FF      lea d, [bp + -11] ; $i
2264   1051 2A            mov b, [d]
2265   1052 E7            pop d
2266   1053 5A            add d, b
2267   1054 E4            pop a
2268   1055 32            mov bl, [d]
2269   1056 A7 00         mov bh, 0
2270   1058 DD            push bl
2271   1059 07 31 12      call putchar
2272   105C 51 01 00      add sp, 1
2273   105F 0A 29 10      jmp _while38_cond
2274   1062             _while38_exit:
2275   1062 F9            leave
2276   1063 09            ret
2277   1064             
2278   1064             print_unsigned_long:
2279   1064 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2280   1067             ; $digits 
2281   1067             ; $i 
2282   1067 52 0C 00      sub sp, 12
2283   106A             ;; i = 0; 
2284   106A FA F5 FF      lea d, [bp + -11] ; $i
2285   106D DA            push d
2286   106E 26 00 00      mov b, $0
2287   1071 E7            pop d
2288   1072 FD 43         mov [d], b
2289   1074             ;; if(num == 0){ 
2290   1074             _if39_cond:
2291   1074 FA 05 00      lea d, [bp + 5] ; $num
2292   1077 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2293   107A FD 39         mov c, b ; And place it into C
2294   107C 2A            mov b, [d] ; Lower Word in B
2295   107D             ; START RELATIONAL
2296   107D D7            push a
2297   107E FD D8         push g
2298   1080 11            mov a, b
2299   1081 FD 7A         mov g, c
2300   1083 26 00 00      mov b, $0
2301   1086 B0            cmp a, b
2302   1087 FD 71         seq ; ==
2303   1089 D8            push b
2304   108A 12            mov a, c
2305   108B FD 27         mov b, g
2306   108D B0            cmp a, b
2307   108E FD 71         seq ; ==
2308   1090 E4            pop a
2309   1091 FD A7         sand a, b
2310   1093 FD F1         pop g
2311   1095 E4            pop a
2312   1096             ; END RELATIONAL
2313   1096 C0 00 00      cmp b, 0
2314   1099 C6 AB 10      je _if39_exit
2315   109C             _if39_true:
2316   109C             ;; putchar('0'); 
2317   109C 26 30 00      mov b, $30
2318   109F DD            push bl
2319   10A0 07 31 12      call putchar
2320   10A3 51 01 00      add sp, 1
2321   10A6             ;; return; 
2322   10A6 F9            leave
2323   10A7 09            ret
2324   10A8 0A AB 10      jmp _if39_exit
2325   10AB             _if39_exit:
2326   10AB             ;; while (num > 0) { 
2327   10AB             _while40_cond:
2328   10AB FA 05 00      lea d, [bp + 5] ; $num
2329   10AE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2330   10B1 FD 39         mov c, b ; And place it into C
2331   10B3 2A            mov b, [d] ; Lower Word in B
2332   10B4             ; START RELATIONAL
2333   10B4 D7            push a
2334   10B5 FD D8         push g
2335   10B7 11            mov a, b
2336   10B8 FD 7A         mov g, c
2337   10BA 26 00 00      mov b, $0
2338   10BD B0            cmp a, b
2339   10BE FD 81         sgu ; > (unsigned)
2340   10C0 FD F1         pop g
2341   10C2 E4            pop a
2342   10C3             ; END RELATIONAL
2343   10C3 C0 00 00      cmp b, 0
2344   10C6 C6 26 11      je _while40_exit
2345   10C9             _while40_block:
2346   10C9             ;; digits[i] = '0' + (num % 10); 
2347   10C9 FA F7 FF      lea d, [bp + -9] ; $digits
2348   10CC D7            push a
2349   10CD DA            push d
2350   10CE FA F5 FF      lea d, [bp + -11] ; $i
2351   10D1 2A            mov b, [d]
2352   10D2 E7            pop d
2353   10D3 5A            add d, b
2354   10D4 E4            pop a
2355   10D5 DA            push d
2356   10D6 26 30 00      mov b, $30
2357   10D9             ; START TERMS
2358   10D9 D7            push a
2359   10DA 11            mov a, b
2360   10DB FA 05 00      lea d, [bp + 5] ; $num
2361   10DE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2362   10E1 FD 39         mov c, b ; And place it into C
2363   10E3 2A            mov b, [d] ; Lower Word in B
2364   10E4             ; START FACTORS
2365   10E4 D7            push a
2366   10E5 11            mov a, b
2367   10E6 26 0A 00      mov b, $a
2368   10E9 AE            div a, b ; 
2369   10EA 11            mov a, b
2370   10EB 27            mov b, a
2371   10EC E4            pop a
2372   10ED             ; END FACTORS
2373   10ED 54            add a, b
2374   10EE D7            push a
2375   10EF FD 12         mov a, g
2376   10F1 28            mov b, c
2377   10F2 5C            adc a, b
2378   10F3 39            mov c, a
2379   10F4 E5            pop b
2380   10F5 E4            pop a
2381   10F6             ; END TERMS
2382   10F6 E7            pop d
2383   10F7 FD 3E         mov [d], bl
2384   10F9             ;; num = num / 10; 
2385   10F9 FA 05 00      lea d, [bp + 5] ; $num
2386   10FC DA            push d
2387   10FD FA 05 00      lea d, [bp + 5] ; $num
2388   1100 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2389   1103 FD 39         mov c, b ; And place it into C
2390   1105 2A            mov b, [d] ; Lower Word in B
2391   1106             ; START FACTORS
2392   1106 D7            push a
2393   1107 11            mov a, b
2394   1108 26 0A 00      mov b, $a
2395   110B AE            div a, b
2396   110C 27            mov b, a
2397   110D E4            pop a
2398   110E             ; END FACTORS
2399   110E E7            pop d
2400   110F FD 43         mov [d], b
2401   1111 28            mov b, c
2402   1112 FD 44 02 00   mov [d + 2], b
2403   1116             ;; i++; 
2404   1116 FA F5 FF      lea d, [bp + -11] ; $i
2405   1119 2A            mov b, [d]
2406   111A D8            push b
2407   111B FD 77         inc b
2408   111D FA F5 FF      lea d, [bp + -11] ; $i
2409   1120 FD 43         mov [d], b
2410   1122 E5            pop b
2411   1123 0A AB 10      jmp _while40_cond
2412   1126             _while40_exit:
2413   1126             ;; while (i > 0) { 
2414   1126             _while41_cond:
2415   1126 FA F5 FF      lea d, [bp + -11] ; $i
2416   1129 2A            mov b, [d]
2417   112A             ; START RELATIONAL
2418   112A D7            push a
2419   112B 11            mov a, b
2420   112C 26 00 00      mov b, $0
2421   112F B0            cmp a, b
2422   1130 FD 7F         sgt ; >
2423   1132 E4            pop a
2424   1133             ; END RELATIONAL
2425   1133 C0 00 00      cmp b, 0
2426   1136 C6 5F 11      je _while41_exit
2427   1139             _while41_block:
2428   1139             ;; i--; 
2429   1139 FA F5 FF      lea d, [bp + -11] ; $i
2430   113C 2A            mov b, [d]
2431   113D D8            push b
2432   113E FD 7D         dec b
2433   1140 FA F5 FF      lea d, [bp + -11] ; $i
2434   1143 FD 43         mov [d], b
2435   1145 E5            pop b
2436   1146             ;; putchar(digits[i]); 
2437   1146 FA F7 FF      lea d, [bp + -9] ; $digits
2438   1149 D7            push a
2439   114A DA            push d
2440   114B FA F5 FF      lea d, [bp + -11] ; $i
2441   114E 2A            mov b, [d]
2442   114F E7            pop d
2443   1150 5A            add d, b
2444   1151 E4            pop a
2445   1152 32            mov bl, [d]
2446   1153 A7 00         mov bh, 0
2447   1155 DD            push bl
2448   1156 07 31 12      call putchar
2449   1159 51 01 00      add sp, 1
2450   115C 0A 26 11      jmp _while41_cond
2451   115F             _while41_exit:
2452   115F F9            leave
2453   1160 09            ret
2454   1161             
2455   1161             print_unsigned:
2456   1161 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2457   1164             ; $digits 
2458   1164             ; $i 
2459   1164 52 07 00      sub sp, 7
2460   1167             ;; i = 0; 
2461   1167 FA FA FF      lea d, [bp + -6] ; $i
2462   116A DA            push d
2463   116B 26 00 00      mov b, $0
2464   116E E7            pop d
2465   116F FD 43         mov [d], b
2466   1171             ;; if(num == 0){ 
2467   1171             _if42_cond:
2468   1171 FA 05 00      lea d, [bp + 5] ; $num
2469   1174 2A            mov b, [d]
2470   1175             ; START RELATIONAL
2471   1175 D7            push a
2472   1176 11            mov a, b
2473   1177 26 00 00      mov b, $0
2474   117A B0            cmp a, b
2475   117B FD 71         seq ; ==
2476   117D E4            pop a
2477   117E             ; END RELATIONAL
2478   117E C0 00 00      cmp b, 0
2479   1181 C6 93 11      je _if42_exit
2480   1184             _if42_true:
2481   1184             ;; putchar('0'); 
2482   1184 26 30 00      mov b, $30
2483   1187 DD            push bl
2484   1188 07 31 12      call putchar
2485   118B 51 01 00      add sp, 1
2486   118E             ;; return; 
2487   118E F9            leave
2488   118F 09            ret
2489   1190 0A 93 11      jmp _if42_exit
2490   1193             _if42_exit:
2491   1193             ;; while (num > 0) { 
2492   1193             _while43_cond:
2493   1193 FA 05 00      lea d, [bp + 5] ; $num
2494   1196 2A            mov b, [d]
2495   1197             ; START RELATIONAL
2496   1197 D7            push a
2497   1198 11            mov a, b
2498   1199 26 00 00      mov b, $0
2499   119C B0            cmp a, b
2500   119D FD 81         sgu ; > (unsigned)
2501   119F E4            pop a
2502   11A0             ; END RELATIONAL
2503   11A0 C0 00 00      cmp b, 0
2504   11A3 C6 ED 11      je _while43_exit
2505   11A6             _while43_block:
2506   11A6             ;; digits[i] = '0' + (num % 10); 
2507   11A6 FA FC FF      lea d, [bp + -4] ; $digits
2508   11A9 D7            push a
2509   11AA DA            push d
2510   11AB FA FA FF      lea d, [bp + -6] ; $i
2511   11AE 2A            mov b, [d]
2512   11AF E7            pop d
2513   11B0 5A            add d, b
2514   11B1 E4            pop a
2515   11B2 DA            push d
2516   11B3 26 30 00      mov b, $30
2517   11B6             ; START TERMS
2518   11B6 D7            push a
2519   11B7 11            mov a, b
2520   11B8 FA 05 00      lea d, [bp + 5] ; $num
2521   11BB 2A            mov b, [d]
2522   11BC             ; START FACTORS
2523   11BC D7            push a
2524   11BD 11            mov a, b
2525   11BE 26 0A 00      mov b, $a
2526   11C1 AE            div a, b ; 
2527   11C2 11            mov a, b
2528   11C3 27            mov b, a
2529   11C4 E4            pop a
2530   11C5             ; END FACTORS
2531   11C5 56            add b, a
2532   11C6 E4            pop a
2533   11C7             ; END TERMS
2534   11C7 E7            pop d
2535   11C8 FD 3E         mov [d], bl
2536   11CA             ;; num = num / 10; 
2537   11CA FA 05 00      lea d, [bp + 5] ; $num
2538   11CD DA            push d
2539   11CE FA 05 00      lea d, [bp + 5] ; $num
2540   11D1 2A            mov b, [d]
2541   11D2             ; START FACTORS
2542   11D2 D7            push a
2543   11D3 11            mov a, b
2544   11D4 26 0A 00      mov b, $a
2545   11D7 AE            div a, b
2546   11D8 27            mov b, a
2547   11D9 E4            pop a
2548   11DA             ; END FACTORS
2549   11DA E7            pop d
2550   11DB FD 43         mov [d], b
2551   11DD             ;; i++; 
2552   11DD FA FA FF      lea d, [bp + -6] ; $i
2553   11E0 2A            mov b, [d]
2554   11E1 D8            push b
2555   11E2 FD 77         inc b
2556   11E4 FA FA FF      lea d, [bp + -6] ; $i
2557   11E7 FD 43         mov [d], b
2558   11E9 E5            pop b
2559   11EA 0A 93 11      jmp _while43_cond
2560   11ED             _while43_exit:
2561   11ED             ;; while (i > 0) { 
2562   11ED             _while44_cond:
2563   11ED FA FA FF      lea d, [bp + -6] ; $i
2564   11F0 2A            mov b, [d]
2565   11F1             ; START RELATIONAL
2566   11F1 D7            push a
2567   11F2 11            mov a, b
2568   11F3 26 00 00      mov b, $0
2569   11F6 B0            cmp a, b
2570   11F7 FD 7F         sgt ; >
2571   11F9 E4            pop a
2572   11FA             ; END RELATIONAL
2573   11FA C0 00 00      cmp b, 0
2574   11FD C6 26 12      je _while44_exit
2575   1200             _while44_block:
2576   1200             ;; i--; 
2577   1200 FA FA FF      lea d, [bp + -6] ; $i
2578   1203 2A            mov b, [d]
2579   1204 D8            push b
2580   1205 FD 7D         dec b
2581   1207 FA FA FF      lea d, [bp + -6] ; $i
2582   120A FD 43         mov [d], b
2583   120C E5            pop b
2584   120D             ;; putchar(digits[i]); 
2585   120D FA FC FF      lea d, [bp + -4] ; $digits
2586   1210 D7            push a
2587   1211 DA            push d
2588   1212 FA FA FF      lea d, [bp + -6] ; $i
2589   1215 2A            mov b, [d]
2590   1216 E7            pop d
2591   1217 5A            add d, b
2592   1218 E4            pop a
2593   1219 32            mov bl, [d]
2594   121A A7 00         mov bh, 0
2595   121C DD            push bl
2596   121D 07 31 12      call putchar
2597   1220 51 01 00      add sp, 1
2598   1223 0A ED 11      jmp _while44_cond
2599   1226             _while44_exit:
2600   1226 F9            leave
2601   1227 09            ret
2602   1228             
2603   1228             date:
2604   1228 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2605   122B             
2606   122B             ; --- BEGIN INLINE ASM BLOCK
2607   122B 19 00         mov al, 0 
2608   122D 05 07         syscall sys_datetime
2609   122F             ; --- END INLINE ASM BLOCK
2610   122F             
2611   122F F9            leave
2612   1230 09            ret
2613   1231             
2614   1231             putchar:
2615   1231 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2616   1234             
2617   1234             ; --- BEGIN INLINE ASM BLOCK
2618   1234 FA 05 00      lea d, [bp + 5] ; $c
2619   1237 1E            mov al, [d]
2620   1238 23            mov ah, al
2621   1239 07 9D 13      call _putchar
2622   123C             ; --- END INLINE ASM BLOCK
2623   123C             
2624   123C F9            leave
2625   123D 09            ret
2626   123E             
2627   123E             getchar:
2628   123E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2629   1241             ; $c 
2630   1241 52 01 00      sub sp, 1
2631   1244             
2632   1244             ; --- BEGIN INLINE ASM BLOCK
2633   1244 07 96 13      call getch
2634   1247 1A            mov al, ah
2635   1248 FA 00 00      lea d, [bp + 0] ; $c
2636   124B 3E            mov [d], al
2637   124C             ; --- END INLINE ASM BLOCK
2638   124C             
2639   124C             ;; return c; 
2640   124C FA 00 00      lea d, [bp + 0] ; $c
2641   124F 32            mov bl, [d]
2642   1250 A7 00         mov bh, 0
2643   1252 F9            leave
2644   1253 09            ret
2645   1254             
2646   1254             scann:
2647   1254 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2648   1257             ; $m 
2649   1257 52 02 00      sub sp, 2
2650   125A             
2651   125A             ; --- BEGIN INLINE ASM BLOCK
2652   125A 07 E1 15      call scan_u16d
2653   125D FA FF FF      lea d, [bp + -1] ; $m
2654   1260 43            mov [d], a
2655   1261             ; --- END INLINE ASM BLOCK
2656   1261             
2657   1261             ;; return m; 
2658   1261 FA FF FF      lea d, [bp + -1] ; $m
2659   1264 2A            mov b, [d]
2660   1265 F9            leave
2661   1266 09            ret
2662   1267             
2663   1267             puts:
2664   1267 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2665   126A             
2666   126A             ; --- BEGIN INLINE ASM BLOCK
2667   126A FA 05 00      lea d, [bp + 5] ; $s
2668   126D 15            mov a, [d]
2669   126E 3C            mov d, a
2670   126F 07 E7 14      call _puts
2671   1272 10 00 0A      mov a, $0A00
2672   1275 05 03         syscall sys_io
2673   1277             ; --- END INLINE ASM BLOCK
2674   1277             
2675   1277 F9            leave
2676   1278 09            ret
2677   1279             
2678   1279             print:
2679   1279 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2680   127C             
2681   127C             ; --- BEGIN INLINE ASM BLOCK
2682   127C FA 05 00      lea d, [bp + 5] ; $s
2683   127F FD 2A         mov d, [d]
2684   1281 07 E7 14      call _puts
2685   1284             ; --- END INLINE ASM BLOCK
2686   1284             
2687   1284 F9            leave
2688   1285 09            ret
2689   1286             
2690   1286             getparam:
2691   1286 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2692   1289             ; $data 
2693   1289 52 01 00      sub sp, 1
2694   128C             
2695   128C             ; --- BEGIN INLINE ASM BLOCK
2696   128C 19 04         mov al, 4
2697   128E FA 05 00      lea d, [bp + 5] ; $address
2698   1291 FD 2A         mov d, [d]
2699   1293 05 0C         syscall sys_system
2700   1295 FA 00 00      lea d, [bp + 0] ; $data
2701   1298 FD 3E         mov [d], bl
2702   129A             ; --- END INLINE ASM BLOCK
2703   129A             
2704   129A             ;; return data; 
2705   129A FA 00 00      lea d, [bp + 0] ; $data
2706   129D 32            mov bl, [d]
2707   129E A7 00         mov bh, 0
2708   12A0 F9            leave
2709   12A1 09            ret
2710   12A2             
2711   12A2             clear:
2712   12A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2713   12A5             ;; print("\033[2J\033[H"); 
2714   12A5 26 13 23      mov b, __s3 ; "\033[2J\033[H"
2715   12A8 FD AB         swp b
2716   12AA D8            push b
2717   12AB 07 79 12      call print
2718   12AE 51 02 00      add sp, 2
2719   12B1 F9            leave
2720   12B2 09            ret
2721   12B3             
2722   12B3             include_stdio_asm:
2723   12B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2724   12B6             
2725   12B6             ; --- BEGIN INLINE ASM BLOCK
2726   12B6             .include "lib/asm/stdio.asm"
0001+  12B6             ;-----------------------------------------------------------------------------
0002+  12B6             ; stdio.s
0003+  12B6             ;-----------------------------------------------------------------------------
0004+  12B6             .include "lib/asm/string.asm"
0001++ 12B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 12B6             ; string.s
0003++ 12B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 12B6             
0005++ 12B6             
0006++ 12B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 12B6             ; _strrev
0008++ 12B6             ; reverse a string
0009++ 12B6             ; D = string address
0010++ 12B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 12B6             ; 01234
0012++ 12B6             _strrev:
0013++ 12B6 4B          	pusha
0014++ 12B7 07 FD 12    	call _strlen	; length in C
0015++ 12BA 12          	mov a, c
0016++ 12BB AF 01 00    	cmp a, 1
0017++ 12BE D0 D8 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 12C1 7D          	dec a
0019++ 12C2 FD 4E       	mov si, d	; beginning of string
0020++ 12C4 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 12C6 59          	add d, a	; end of string
0022++ 12C7 12          	mov a, c
0023++ 12C8 FD 9B       	shr a		; divide by 2
0024++ 12CA 39          	mov c, a	; C now counts the steps
0025++ 12CB             _strrev_L0:
0026++ 12CB 32          	mov bl, [d]	; save load right-side char into BL
0027++ 12CC F6          	lodsb		; load left-side char into AL; increase SI
0028++ 12CD 3E          	mov [d], al	; store left char into right side
0029++ 12CE 1B          	mov al, bl
0030++ 12CF F7          	stosb		; store right-side char into left-side; increase DI
0031++ 12D0 7E          	dec c
0032++ 12D1 7F          	dec d
0033++ 12D2 C2 00 00    	cmp c, 0
0034++ 12D5 C7 CB 12    	jne _strrev_L0
0035++ 12D8             _strrev_end:
0036++ 12D8 4C          	popa
0037++ 12D9 09          	ret
0038++ 12DA             	
0039++ 12DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 12DA             ; _strchr
0041++ 12DA             ; search string in D for char in AL
0042++ 12DA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 12DA             _strchr:
0044++ 12DA             _strchr_L0:
0045++ 12DA 32          	mov bl, [d]
0046++ 12DB C1 00       	cmp bl, 0
0047++ 12DD C6 E8 12    	je _strchr_end
0048++ 12E0 BA          	cmp al, bl
0049++ 12E1 C6 E8 12    	je _strchr_end
0050++ 12E4 79          	inc d
0051++ 12E5 0A DA 12    	jmp _strchr_L0
0052++ 12E8             _strchr_end:
0053++ 12E8 1B          	mov al, bl
0054++ 12E9 09          	ret
0055++ 12EA             
0056++ 12EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 12EA             ; _strstr
0058++ 12EA             ; find sub-string
0059++ 12EA             ; str1 in SI
0060++ 12EA             ; str2 in DI
0061++ 12EA             ; SI points to end of source string
0062++ 12EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 12EA             _strstr:
0064++ 12EA DB          	push al
0065++ 12EB DA          	push d
0066++ 12EC E3          	push di
0067++ 12ED             _strstr_loop:
0068++ 12ED F3          	cmpsb					; compare a byte of the strings
0069++ 12EE C7 F9 12    	jne _strstr_ret
0070++ 12F1 FC 00 00    	lea d, [di + 0]
0071++ 12F4 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 12F6 C7 ED 12    	jne _strstr_loop				; equal chars but not at end
0073++ 12F9             _strstr_ret:
0074++ 12F9 F0          	pop di
0075++ 12FA E7          	pop d
0076++ 12FB E8          	pop al
0077++ 12FC 09          	ret
0078++ 12FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 12FD             ; length of null terminated string
0080++ 12FD             ; result in C
0081++ 12FD             ; pointer in D
0082++ 12FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 12FD             _strlen:
0084++ 12FD DA          	push d
0085++ 12FE 38 00 00    	mov c, 0
0086++ 1301             _strlen_L1:
0087++ 1301 BD 00       	cmp byte [d], 0
0088++ 1303 C6 0B 13    	je _strlen_ret
0089++ 1306 79          	inc d
0090++ 1307 78          	inc c
0091++ 1308 0A 01 13    	jmp _strlen_L1
0092++ 130B             _strlen_ret:
0093++ 130B E7          	pop d
0094++ 130C 09          	ret
0095++ 130D             
0096++ 130D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 130D             ; STRCMP
0098++ 130D             ; compare two strings
0099++ 130D             ; str1 in SI
0100++ 130D             ; str2 in DI
0101++ 130D             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 130D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 130D             _strcmp:
0104++ 130D DB          	push al
0105++ 130E DA          	push d
0106++ 130F E3          	push di
0107++ 1310 E2          	push si
0108++ 1311             _strcmp_loop:
0109++ 1311 F3          	cmpsb					; compare a byte of the strings
0110++ 1312 C7 1D 13    	jne _strcmp_ret
0111++ 1315 FB FF FF    	lea d, [si +- 1]
0112++ 1318 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 131A C7 11 13    	jne _strcmp_loop				; equal chars but not at end
0114++ 131D             _strcmp_ret:
0115++ 131D EF          	pop si
0116++ 131E F0          	pop di
0117++ 131F E7          	pop d
0118++ 1320 E8          	pop al
0119++ 1321 09          	ret
0120++ 1322             
0121++ 1322             
0122++ 1322             ; STRCPY
0123++ 1322             ; copy null terminated string from SI to DI
0124++ 1322             ; source in SI
0125++ 1322             ; destination in DI
0126++ 1322             _strcpy:
0127++ 1322 E2          	push si
0128++ 1323 E3          	push di
0129++ 1324 DB          	push al
0130++ 1325             _strcpy_L1:
0131++ 1325 F6          	lodsb
0132++ 1326 F7          	stosb
0133++ 1327 B9 00       	cmp al, 0
0134++ 1329 C7 25 13    	jne _strcpy_L1
0135++ 132C             _strcpy_end:
0136++ 132C E8          	pop al
0137++ 132D F0          	pop di
0138++ 132E EF          	pop si
0139++ 132F 09          	ret
0140++ 1330             
0141++ 1330             ; STRCAT
0142++ 1330             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1330             ; source in SI
0144++ 1330             ; destination in DI
0145++ 1330             _strcat:
0146++ 1330 E2          	push si
0147++ 1331 E3          	push di
0148++ 1332 D7          	push a
0149++ 1333 DA          	push d
0150++ 1334 50          	mov a, di
0151++ 1335 3C          	mov d, a
0152++ 1336             _strcat_goto_end_L1:
0153++ 1336 BD 00       	cmp byte[d], 0
0154++ 1338 C6 3F 13    	je _strcat_start
0155++ 133B 79          	inc d
0156++ 133C 0A 36 13    	jmp _strcat_goto_end_L1
0157++ 133F             _strcat_start:
0158++ 133F FD 50       	mov di, d
0159++ 1341             _strcat_L1:
0160++ 1341 F6          	lodsb
0161++ 1342 F7          	stosb
0162++ 1343 B9 00       	cmp al, 0
0163++ 1345 C7 41 13    	jne _strcat_L1
0164++ 1348             _strcat_end:
0165++ 1348 E7          	pop d
0166++ 1349 E4          	pop a
0167++ 134A F0          	pop di
0168++ 134B EF          	pop si
0169++ 134C 09          	ret
0170++ 134D             
0171++ 134D             
0005+  134D             
0006+  134D             ;-----------------------------------------------------------------------------
0007+  134D             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  134D             ; ASCII in BL
0009+  134D             ; result in AL
0010+  134D             ; ascii for F = 0100 0110
0011+  134D             ; ascii for 9 = 0011 1001
0012+  134D             ;-----------------------------------------------------------------------------
0013+  134D             hex_ascii_encode:
0014+  134D 1B            mov al, bl
0015+  134E 93 40         test al, $40        ; test if letter or number
0016+  1350 C7 56 13      jnz hex_letter
0017+  1353 87 0F         and al, $0F        ; get number
0018+  1355 09            ret
0019+  1356             hex_letter:
0020+  1356 87 0F         and al, $0F        ; get letter
0021+  1358 6A 09         add al, 9
0022+  135A 09            ret
0023+  135B             
0024+  135B             ;-----------------------------------------------------------------------------
0025+  135B             ; ATOI
0026+  135B             ; 2 letter hex string in B
0027+  135B             ; 8bit integer returned in AL
0028+  135B             ;-----------------------------------------------------------------------------
0029+  135B             _atoi:
0030+  135B D8            push b
0031+  135C 07 4D 13      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  135F 30            mov bl, bh
0033+  1360 DB            push al          ; save a
0034+  1361 07 4D 13      call hex_ascii_encode
0035+  1364 EA            pop bl  
0036+  1365 FD 9E 04      shl al, 4
0037+  1368 8C            or al, bl
0038+  1369 E5            pop b
0039+  136A 09            ret  
0040+  136B             
0041+  136B             
0042+  136B             ;-----------------------------------------------------------------------------
0043+  136B             ; ITOA
0044+  136B             ; 8bit value in BL
0045+  136B             ; 2 byte ASCII result in A
0046+  136B             ;-----------------------------------------------------------------------------
0047+  136B             _itoa:
0048+  136B DA            push d
0049+  136C D8            push b
0050+  136D A7 00         mov bh, 0
0051+  136F FD A4 04      shr bl, 4  
0052+  1372 74            mov d, b
0053+  1373 1F 1B 16      mov al, [d + s_hex_digits]
0054+  1376 23            mov ah, al
0055+  1377               
0056+  1377 E5            pop b
0057+  1378 D8            push b
0058+  1379 A7 00         mov bh, 0
0059+  137B FD 87 0F      and bl, $0F
0060+  137E 74            mov d, b
0061+  137F 1F 1B 16      mov al, [d + s_hex_digits]
0062+  1382 E5            pop b
0063+  1383 E7            pop d
0064+  1384 09            ret
0065+  1385             
0066+  1385             ;-----------------------------------------------------------------------------
0067+  1385             ; HEX STRING TO BINARY
0068+  1385             ; di = destination address
0069+  1385             ; si = source
0070+  1385             ;-----------------------------------------------------------------------------
0071+  1385             _hex_to_int:
0072+  1385             _hex_to_int_L1:
0073+  1385 F6            lodsb          ; load from [SI] to AL
0074+  1386 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1388 C6 95 13      jz _hex_to_int_ret
0076+  138B 36            mov bh, al
0077+  138C F6            lodsb
0078+  138D 2F            mov bl, al
0079+  138E 07 5B 13      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1391 F7            stosb          ; store AL to [DI]
0081+  1392 0A 85 13      jmp _hex_to_int_L1
0082+  1395             _hex_to_int_ret:
0083+  1395 09            ret    
0084+  1396             
0085+  1396             ;-----------------------------------------------------------------------------
0086+  1396             ; GETCHAR
0087+  1396             ; char in ah
0088+  1396             ;-----------------------------------------------------------------------------
0089+  1396             getch:
0090+  1396 DB            push al
0091+  1397             getch_retry:
0092+  1397 19 01         mov al, 1
0093+  1399 05 03         syscall sys_io      ; receive in AH
0094+  139B E8            pop al
0095+  139C 09            ret
0096+  139D             
0097+  139D             ;-----------------------------------------------------------------------------
0098+  139D             ; PUTCHAR
0099+  139D             ; char in ah
0100+  139D             ;-----------------------------------------------------------------------------
0101+  139D             _putchar:
0102+  139D D7            push a
0103+  139E 19 00         mov al, 0
0104+  13A0 05 03         syscall sys_io      ; char in AH
0105+  13A2 E4            pop a
0106+  13A3 09            ret
0107+  13A4             
0108+  13A4             ;-----------------------------------------------------------------------------
0109+  13A4             ;; INPUT A STRING
0110+  13A4             ;; terminates with null
0111+  13A4             ;; pointer in D
0112+  13A4             ;-----------------------------------------------------------------------------
0113+  13A4             _gets:
0114+  13A4 D7            push a
0115+  13A5 DA            push d
0116+  13A6             _gets_loop:
0117+  13A6 19 01         mov al, 1
0118+  13A8 05 03         syscall sys_io      ; receive in AH
0119+  13AA B9 00         cmp al, 0        ; check error code (AL)
0120+  13AC C6 A6 13      je _gets_loop      ; if no char received, retry
0121+  13AF             
0122+  13AF 76 1B         cmp ah, 27
0123+  13B1 C6 D2 13      je _gets_ansi_esc
0124+  13B4 76 0A         cmp ah, $0A        ; LF
0125+  13B6 C6 3D 14      je _gets_end
0126+  13B9 76 0D         cmp ah, $0D        ; CR
0127+  13BB C6 3D 14      je _gets_end
0128+  13BE 76 5C         cmp ah, $5C        ; '\\'
0129+  13C0 C6 FE 13      je _gets_escape
0130+  13C3               
0131+  13C3 76 08         cmp ah, $08      ; check for backspace
0132+  13C5 C6 CE 13      je _gets_backspace
0133+  13C8             
0134+  13C8 1A            mov al, ah
0135+  13C9 3E            mov [d], al
0136+  13CA 79            inc d
0137+  13CB 0A A6 13      jmp _gets_loop
0138+  13CE             _gets_backspace:
0139+  13CE 7F            dec d
0140+  13CF 0A A6 13      jmp _gets_loop
0141+  13D2             _gets_ansi_esc:
0142+  13D2 19 01         mov al, 1
0143+  13D4 05 03         syscall sys_io        ; receive in AH without echo
0144+  13D6 B9 00         cmp al, 0          ; check error code (AL)
0145+  13D8 C6 D2 13      je _gets_ansi_esc    ; if no char received, retry
0146+  13DB 76 5B         cmp ah, '['
0147+  13DD C7 A6 13      jne _gets_loop
0148+  13E0             _gets_ansi_esc_2:
0149+  13E0 19 01         mov al, 1
0150+  13E2 05 03         syscall sys_io          ; receive in AH without echo
0151+  13E4 B9 00         cmp al, 0            ; check error code (AL)
0152+  13E6 C6 E0 13      je _gets_ansi_esc_2  ; if no char received, retry
0153+  13E9 76 44         cmp ah, 'D'
0154+  13EB C6 F6 13      je _gets_left_arrow
0155+  13EE 76 43         cmp ah, 'C'
0156+  13F0 C6 FA 13      je _gets_right_arrow
0157+  13F3 0A A6 13      jmp _gets_loop
0158+  13F6             _gets_left_arrow:
0159+  13F6 7F            dec d
0160+  13F7 0A A6 13      jmp _gets_loop
0161+  13FA             _gets_right_arrow:
0162+  13FA 79            inc d
0163+  13FB 0A A6 13      jmp _gets_loop
0164+  13FE             _gets_escape:
0165+  13FE 19 01         mov al, 1
0166+  1400 05 03         syscall sys_io      ; receive in AH
0167+  1402 B9 00         cmp al, 0        ; check error code (AL)
0168+  1404 C6 FE 13      je _gets_escape      ; if no char received, retry
0169+  1407 76 6E         cmp ah, 'n'
0170+  1409 C6 28 14      je _gets_LF
0171+  140C 76 72         cmp ah, 'r'
0172+  140E C6 2F 14      je _gets_CR
0173+  1411 76 30         cmp ah, '0'
0174+  1413 C6 36 14      je _gets_NULL
0175+  1416 76 5C         cmp ah, $5C  ; '\'
0176+  1418 C6 21 14      je _gets_slash
0177+  141B 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  141C 3E            mov [d], al
0179+  141D 79            inc d
0180+  141E 0A A6 13      jmp _gets_loop
0181+  1421             _gets_slash:
0182+  1421 19 5C         mov al, $5C
0183+  1423 3E            mov [d], al
0184+  1424 79            inc d
0185+  1425 0A A6 13      jmp _gets_loop
0186+  1428             _gets_LF:
0187+  1428 19 0A         mov al, $0A
0188+  142A 3E            mov [d], al
0189+  142B 79            inc d
0190+  142C 0A A6 13      jmp _gets_loop
0191+  142F             _gets_CR:
0192+  142F 19 0D         mov al, $0D
0193+  1431 3E            mov [d], al
0194+  1432 79            inc d
0195+  1433 0A A6 13      jmp _gets_loop
0196+  1436             _gets_NULL:
0197+  1436 19 00         mov al, $00
0198+  1438 3E            mov [d], al
0199+  1439 79            inc d
0200+  143A 0A A6 13      jmp _gets_loop
0201+  143D             _gets_end:
0202+  143D 19 00         mov al, 0
0203+  143F 3E            mov [d], al        ; terminate string
0204+  1440 E7            pop d
0205+  1441 E4            pop a
0206+  1442 09            ret
0207+  1443             
0208+  1443             ;-----------------------------------------------------------------------------
0209+  1443             ;; INPUT TEXT
0210+  1443             ;; terminated with CTRL+D
0211+  1443             ;; pointer in D
0212+  1443             ;-----------------------------------------------------------------------------
0213+  1443             _gettxt:
0214+  1443 D7            push a
0215+  1444 DA            push d
0216+  1445             _gettxt_loop:
0217+  1445 19 01         mov al, 1
0218+  1447 05 03         syscall sys_io      ; receive in AH
0219+  1449 B9 00         cmp al, 0        ; check error code (AL)
0220+  144B C6 45 14      je _gettxt_loop    ; if no char received, retry
0221+  144E 76 04         cmp ah, 4      ; EOT
0222+  1450 C6 8E 14      je _gettxt_end
0223+  1453 76 08         cmp ah, $08      ; check for backspace
0224+  1455 C6 8A 14      je _gettxt_backspace
0225+  1458 76 5C         cmp ah, $5C        ; '\'
0226+  145A C6 63 14      je _gettxt_escape
0227+  145D 1A            mov al, ah
0228+  145E 3E            mov [d], al
0229+  145F 79            inc d
0230+  1460 0A 45 14      jmp _gettxt_loop
0231+  1463             _gettxt_escape:
0232+  1463 19 01         mov al, 1
0233+  1465 05 03         syscall sys_io      ; receive in AH
0234+  1467 B9 00         cmp al, 0        ; check error code (AL)
0235+  1469 C6 63 14      je _gettxt_escape    ; if no char received, retry
0236+  146C 76 6E         cmp ah, 'n'
0237+  146E C6 7C 14      je _gettxt_LF
0238+  1471 76 72         cmp ah, 'r'
0239+  1473 C6 83 14      je _gettxt_CR
0240+  1476 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1477 3E            mov [d], al
0242+  1478 79            inc d
0243+  1479 0A 45 14      jmp _gettxt_loop
0244+  147C             _gettxt_LF:
0245+  147C 19 0A         mov al, $0A
0246+  147E 3E            mov [d], al
0247+  147F 79            inc d
0248+  1480 0A 45 14      jmp _gettxt_loop
0249+  1483             _gettxt_CR:
0250+  1483 19 0D         mov al, $0D
0251+  1485 3E            mov [d], al
0252+  1486 79            inc d
0253+  1487 0A 45 14      jmp _gettxt_loop
0254+  148A             _gettxt_backspace:
0255+  148A 7F            dec d
0256+  148B 0A 45 14      jmp _gettxt_loop
0257+  148E             _gettxt_end:
0258+  148E 19 00         mov al, 0
0259+  1490 3E            mov [d], al        ; terminate string
0260+  1491 E7            pop d
0261+  1492 E4            pop a
0262+  1493 09            ret
0263+  1494             
0264+  1494             ;-----------------------------------------------------------------------------
0265+  1494             ; PRINT NEW LINE
0266+  1494             ;-----------------------------------------------------------------------------
0267+  1494             printnl:
0268+  1494 D7            push a
0269+  1495 10 00 0A      mov a, $0A00
0270+  1498 05 03         syscall sys_io
0271+  149A 10 00 0D      mov a, $0D00
0272+  149D 05 03         syscall sys_io
0273+  149F E4            pop a
0274+  14A0 09            ret
0275+  14A1             
0276+  14A1             ;-----------------------------------------------------------------------------
0277+  14A1             ; _strtoint
0278+  14A1             ; 4 digit hex string number in d
0279+  14A1             ; integer returned in A
0280+  14A1             ;-----------------------------------------------------------------------------
0281+  14A1             _strtointx:
0282+  14A1 D8            push b
0283+  14A2 32            mov bl, [d]
0284+  14A3 37            mov bh, bl
0285+  14A4 33 01 00      mov bl, [d + 1]
0286+  14A7 07 5B 13      call _atoi        ; convert to int in AL
0287+  14AA 23            mov ah, al        ; move to AH
0288+  14AB 33 02 00      mov bl, [d + 2]
0289+  14AE 37            mov bh, bl
0290+  14AF 33 03 00      mov bl, [d + 3]
0291+  14B2 07 5B 13      call _atoi        ; convert to int in AL
0292+  14B5 E5            pop b
0293+  14B6 09            ret
0294+  14B7             
0295+  14B7             ;-----------------------------------------------------------------------------
0296+  14B7             ; _strtoint
0297+  14B7             ; 5 digit base10 string number in d
0298+  14B7             ; integer returned in A
0299+  14B7             ;-----------------------------------------------------------------------------
0300+  14B7             _strtoint:
0301+  14B7 E2            push si
0302+  14B8 D8            push b
0303+  14B9 D9            push c
0304+  14BA DA            push d
0305+  14BB 07 FD 12      call _strlen      ; get string length in C
0306+  14BE 7E            dec c
0307+  14BF FD 4E         mov si, d
0308+  14C1 12            mov a, c
0309+  14C2 FD 99         shl a
0310+  14C4 3B 33 16      mov d, table_power
0311+  14C7 59            add d, a
0312+  14C8 38 00 00      mov c, 0
0313+  14CB             _strtoint_L0:
0314+  14CB F6            lodsb      ; load ASCII to al
0315+  14CC B9 00         cmp al, 0
0316+  14CE C6 E1 14      je _strtoint_end
0317+  14D1 6F 30         sub al, $30    ; make into integer
0318+  14D3 22 00         mov ah, 0
0319+  14D5 2A            mov b, [d]
0320+  14D6 AC            mul a, b      ; result in B since it fits in 16bits
0321+  14D7 11            mov a, b
0322+  14D8 28            mov b, c
0323+  14D9 54            add a, b
0324+  14DA 39            mov c, a
0325+  14DB 63 02 00      sub d, 2
0326+  14DE 0A CB 14      jmp _strtoint_L0
0327+  14E1             _strtoint_end:
0328+  14E1 12            mov a, c
0329+  14E2 E7            pop d
0330+  14E3 E6            pop c
0331+  14E4 E5            pop b
0332+  14E5 EF            pop si
0333+  14E6 09            ret
0334+  14E7             
0335+  14E7             ;-----------------------------------------------------------------------------
0336+  14E7             ; PRINT NULL TERMINATED STRING
0337+  14E7             ; pointer in D
0338+  14E7             ;-----------------------------------------------------------------------------
0339+  14E7             _puts:
0340+  14E7 D7            push a
0341+  14E8 DA            push d
0342+  14E9             _puts_L1:
0343+  14E9 1E            mov al, [d]
0344+  14EA B9 00         cmp al, 0
0345+  14EC C6 F8 14      jz _puts_END
0346+  14EF 23            mov ah, al
0347+  14F0 19 00         mov al, 0
0348+  14F2 05 03         syscall sys_io
0349+  14F4 79            inc d
0350+  14F5 0A E9 14      jmp _puts_L1
0351+  14F8             _puts_END:
0352+  14F8 E7            pop d
0353+  14F9 E4            pop a
0354+  14FA 09            ret
0355+  14FB             
0356+  14FB             ;-----------------------------------------------------------------------------
0357+  14FB             ; PRINT N SIZE STRING
0358+  14FB             ; pointer in D
0359+  14FB             ; size in C
0360+  14FB             ;-----------------------------------------------------------------------------
0361+  14FB             _putsn:
0362+  14FB DB            push al
0363+  14FC DA            push d
0364+  14FD D9            push c
0365+  14FE             _putsn_L0:
0366+  14FE 1E            mov al, [d]
0367+  14FF 23            mov ah, al
0368+  1500 19 00         mov al, 0
0369+  1502 05 03         syscall sys_io
0370+  1504 79            inc d
0371+  1505 7E            dec c  
0372+  1506 C2 00 00      cmp c, 0
0373+  1509 C7 FE 14      jne _putsn_L0
0374+  150C             _putsn_end:
0375+  150C E6            pop c
0376+  150D E7            pop d
0377+  150E E8            pop al
0378+  150F 09            ret
0379+  1510             
0380+  1510             ;-----------------------------------------------------------------------------
0381+  1510             ; print 16bit decimal number
0382+  1510             ; input number in A
0383+  1510             ;-----------------------------------------------------------------------------
0384+  1510             print_u16d:
0385+  1510 D7            push a
0386+  1511 D8            push b
0387+  1512 26 10 27      mov b, 10000
0388+  1515 AE            div a, b      ; get 10000's coeff.
0389+  1516 07 38 15      call print_number
0390+  1519 11            mov a, b
0391+  151A 26 E8 03      mov b, 1000
0392+  151D AE            div a, b      ; get 1000's coeff.
0393+  151E 07 38 15      call print_number
0394+  1521 11            mov a, b
0395+  1522 26 64 00      mov b, 100
0396+  1525 AE            div a, b
0397+  1526 07 38 15      call print_number
0398+  1529 11            mov a, b
0399+  152A 26 0A 00      mov b, 10
0400+  152D AE            div a, b
0401+  152E 07 38 15      call print_number
0402+  1531 1B            mov al, bl      ; 1's coeff in bl
0403+  1532 07 38 15      call print_number
0404+  1535 E5            pop b
0405+  1536 E4            pop a
0406+  1537 09            ret
0407+  1538             
0408+  1538             ;-----------------------------------------------------------------------------
0409+  1538             ; print AL
0410+  1538             ;-----------------------------------------------------------------------------
0411+  1538             print_number:
0412+  1538 6A 30         add al, $30
0413+  153A 23            mov ah, al
0414+  153B 07 9D 13      call _putchar
0415+  153E 09            ret
0416+  153F             
0417+  153F             ;-----------------------------------------------------------------------------
0418+  153F             ; PRINT 16BIT HEX INTEGER
0419+  153F             ; integer value in reg B
0420+  153F             ;-----------------------------------------------------------------------------
0421+  153F             print_u16x:
0422+  153F D7            push a
0423+  1540 D8            push b
0424+  1541 DD            push bl
0425+  1542 30            mov bl, bh
0426+  1543 07 6B 13      call _itoa        ; convert bh to char in A
0427+  1546 2F            mov bl, al        ; save al
0428+  1547 19 00         mov al, 0
0429+  1549 05 03         syscall sys_io        ; display AH
0430+  154B 24            mov ah, bl        ; retrieve al
0431+  154C 19 00         mov al, 0
0432+  154E 05 03         syscall sys_io        ; display AL
0433+  1550             
0434+  1550 EA            pop bl
0435+  1551 07 6B 13      call _itoa        ; convert bh to char in A
0436+  1554 2F            mov bl, al        ; save al
0437+  1555 19 00         mov al, 0
0438+  1557 05 03         syscall sys_io        ; display AH
0439+  1559 24            mov ah, bl        ; retrieve al
0440+  155A 19 00         mov al, 0
0441+  155C 05 03         syscall sys_io        ; display AL
0442+  155E             
0443+  155E E5            pop b
0444+  155F E4            pop a
0445+  1560 09            ret
0446+  1561             
0447+  1561             ;-----------------------------------------------------------------------------
0448+  1561             ; INPUT 16BIT HEX INTEGER
0449+  1561             ; read 16bit integer into A
0450+  1561             ;-----------------------------------------------------------------------------
0451+  1561             scan_u16x:
0452+  1561 F8 10 00      enter 16
0453+  1564 D8            push b
0454+  1565 DA            push d
0455+  1566             
0456+  1566 FA F1 FF      lea d, [bp + -15]
0457+  1569 07 A4 13      call _gets        ; get number
0458+  156C             
0459+  156C 32            mov bl, [d]
0460+  156D 37            mov bh, bl
0461+  156E 33 01 00      mov bl, [d + 1]
0462+  1571 07 5B 13      call _atoi        ; convert to int in AL
0463+  1574 23            mov ah, al        ; move to AH
0464+  1575             
0465+  1575 33 02 00      mov bl, [d + 2]
0466+  1578 37            mov bh, bl
0467+  1579 33 03 00      mov bl, [d + 3]
0468+  157C 07 5B 13      call _atoi        ; convert to int in AL
0469+  157F             
0470+  157F E7            pop d
0471+  1580 E5            pop b
0472+  1581 F9            leave
0473+  1582 09            ret
0474+  1583             
0475+  1583             ;-----------------------------------------------------------------------------
0476+  1583             ; PRINT 8bit HEX INTEGER
0477+  1583             ; integer value in reg bl
0478+  1583             ;-----------------------------------------------------------------------------
0479+  1583             print_u8x:
0480+  1583 D7            push a
0481+  1584 DD            push bl
0482+  1585             
0483+  1585 07 6B 13      call _itoa        ; convert bl to char in A
0484+  1588 2F            mov bl, al        ; save al
0485+  1589 19 00         mov al, 0
0486+  158B 05 03         syscall sys_io        ; display AH
0487+  158D 24            mov ah, bl        ; retrieve al
0488+  158E 19 00         mov al, 0
0489+  1590 05 03         syscall sys_io        ; display AL
0490+  1592             
0491+  1592 EA            pop bl
0492+  1593 E4            pop a
0493+  1594 09            ret
0494+  1595             
0495+  1595             ;-----------------------------------------------------------------------------
0496+  1595             ; print 8bit decimal unsigned number
0497+  1595             ; input number in AL
0498+  1595             ;-----------------------------------------------------------------------------
0499+  1595             print_u8d:
0500+  1595 D7            push a
0501+  1596 D8            push b
0502+  1597             
0503+  1597 22 00         mov ah, 0
0504+  1599 26 64 00      mov b, 100
0505+  159C AE            div a, b
0506+  159D D8            push b      ; save remainder
0507+  159E B9 00         cmp al, 0
0508+  15A0 C6 AA 15      je skip100
0509+  15A3 6A 30         add al, $30
0510+  15A5 23            mov ah, al
0511+  15A6 19 00         mov al, 0
0512+  15A8 05 03         syscall sys_io  ; print coeff
0513+  15AA             skip100:
0514+  15AA E4            pop a
0515+  15AB 22 00         mov ah, 0
0516+  15AD 26 0A 00      mov b, 10
0517+  15B0 AE            div a, b
0518+  15B1 D8            push b      ; save remainder
0519+  15B2 B9 00         cmp al, 0
0520+  15B4 C6 BE 15      je skip10
0521+  15B7 6A 30         add al, $30
0522+  15B9 23            mov ah, al
0523+  15BA 19 00         mov al, 0
0524+  15BC 05 03         syscall sys_io  ; print coeff
0525+  15BE             skip10:
0526+  15BE E4            pop a
0527+  15BF 1B            mov al, bl
0528+  15C0 6A 30         add al, $30
0529+  15C2 23            mov ah, al
0530+  15C3 19 00         mov al, 0
0531+  15C5 05 03         syscall sys_io  ; print coeff
0532+  15C7 E5            pop b
0533+  15C8 E4            pop a
0534+  15C9 09            ret
0535+  15CA             
0536+  15CA             ;-----------------------------------------------------------------------------
0537+  15CA             ; INPUT 8BIT HEX INTEGER
0538+  15CA             ; read 8bit integer into AL
0539+  15CA             ;-----------------------------------------------------------------------------
0540+  15CA             scan_u8x:
0541+  15CA F8 04 00      enter 4
0542+  15CD D8            push b
0543+  15CE DA            push d
0544+  15CF             
0545+  15CF FA FD FF      lea d, [bp + -3]
0546+  15D2 07 A4 13      call _gets        ; get number
0547+  15D5             
0548+  15D5 32            mov bl, [d]
0549+  15D6 37            mov bh, bl
0550+  15D7 33 01 00      mov bl, [d + 1]
0551+  15DA 07 5B 13      call _atoi        ; convert to int in AL
0552+  15DD             
0553+  15DD E7            pop d
0554+  15DE E5            pop b
0555+  15DF F9            leave
0556+  15E0 09            ret
0557+  15E1             
0558+  15E1             ;-----------------------------------------------------------------------------
0559+  15E1             ; input decimal number
0560+  15E1             ; result in A
0561+  15E1             ; 655'\0'
0562+  15E1             ; low--------high
0563+  15E1             ;-----------------------------------------------------------------------------
0564+  15E1             scan_u16d:
0565+  15E1 F8 08 00      enter 8
0566+  15E4 E2            push si
0567+  15E5 D8            push b
0568+  15E6 D9            push c
0569+  15E7 DA            push d
0570+  15E8 FA F9 FF      lea d, [bp +- 7]
0571+  15EB 07 A4 13      call _gets
0572+  15EE 07 FD 12      call _strlen      ; get string length in C
0573+  15F1 7E            dec c
0574+  15F2 FD 4E         mov si, d
0575+  15F4 12            mov a, c
0576+  15F5 FD 99         shl a
0577+  15F7 3B 33 16      mov d, table_power
0578+  15FA 59            add d, a
0579+  15FB 38 00 00      mov c, 0
0580+  15FE             mul_loop:
0581+  15FE F6            lodsb      ; load ASCII to al
0582+  15FF B9 00         cmp al, 0
0583+  1601 C6 14 16      je mul_exit
0584+  1604 6F 30         sub al, $30    ; make into integer
0585+  1606 22 00         mov ah, 0
0586+  1608 2A            mov b, [d]
0587+  1609 AC            mul a, b      ; result in B since it fits in 16bits
0588+  160A 11            mov a, b
0589+  160B 28            mov b, c
0590+  160C 54            add a, b
0591+  160D 39            mov c, a
0592+  160E 63 02 00      sub d, 2
0593+  1611 0A FE 15      jmp mul_loop
0594+  1614             mul_exit:
0595+  1614 12            mov a, c
0596+  1615 E7            pop d
0597+  1616 E6            pop c
0598+  1617 E5            pop b
0599+  1618 EF            pop si
0600+  1619 F9            leave
0601+  161A 09            ret
0602+  161B             
0603+  161B 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  161F 34 35 36 37 
0603+  1623 38 39 41 42 
0603+  1627 43 44 45 46 
0604+  162B 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  162F 1B 5B 48 00 
0605+  1633             
0606+  1633             table_power:
0607+  1633 01 00         .dw 1
0608+  1635 0A 00         .dw 10
0609+  1637 64 00         .dw 100
0610+  1639 E8 03         .dw 1000
0611+  163B 10 27         .dw 100002727   163D             ; --- END INLINE ASM BLOCK
2728   163D             
2729   163D F9            leave
2730   163E 09            ret
2731   163F             
2732   163F             show:
2733   163F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2734   1642             ; $i 
2735   1642             ; $j 
2736   1642 52 04 00      sub sp, 4
2737   1645             ;; for(i = 0; i <   30     ; i++){ 
2738   1645             _for45_init:
2739   1645 FA FF FF      lea d, [bp + -1] ; $i
2740   1648 DA            push d
2741   1649 26 00 00      mov b, $0
2742   164C E7            pop d
2743   164D FD 43         mov [d], b
2744   164F             _for45_cond:
2745   164F FA FF FF      lea d, [bp + -1] ; $i
2746   1652 2A            mov b, [d]
2747   1653             ; START RELATIONAL
2748   1653 D7            push a
2749   1654 11            mov a, b
2750   1655 26 1E 00      mov b, $1e
2751   1658 B0            cmp a, b
2752   1659 FD 73         slt ; <= (signed)
2753   165B E4            pop a
2754   165C             ; END RELATIONAL
2755   165C C0 00 00      cmp b, 0
2756   165F C6 EC 16      je _for45_exit
2757   1662             _for45_block:
2758   1662             ;; for(j = 0; j <    40    ; j++){ 
2759   1662             _for46_init:
2760   1662 FA FD FF      lea d, [bp + -3] ; $j
2761   1665 DA            push d
2762   1666 26 00 00      mov b, $0
2763   1669 E7            pop d
2764   166A FD 43         mov [d], b
2765   166C             _for46_cond:
2766   166C FA FD FF      lea d, [bp + -3] ; $j
2767   166F 2A            mov b, [d]
2768   1670             ; START RELATIONAL
2769   1670 D7            push a
2770   1671 11            mov a, b
2771   1672 26 28 00      mov b, $28
2772   1675 B0            cmp a, b
2773   1676 FD 73         slt ; <= (signed)
2774   1678 E4            pop a
2775   1679             ; END RELATIONAL
2776   1679 C0 00 00      cmp b, 0
2777   167C C6 D2 16      je _for46_exit
2778   167F             _for46_block:
2779   167F             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
2780   167F             _ternary47_cond:
2781   167F 3B 0D 1E      mov d, _currState_data ; $currState
2782   1682 D7            push a
2783   1683 DA            push d
2784   1684 FA FF FF      lea d, [bp + -1] ; $i
2785   1687 2A            mov b, [d]
2786   1688 E7            pop d
2787   1689 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2788   168D DA            push d
2789   168E FA FD FF      lea d, [bp + -3] ; $j
2790   1691 2A            mov b, [d]
2791   1692 E7            pop d
2792   1693 5A            add d, b
2793   1694 E4            pop a
2794   1695 32            mov bl, [d]
2795   1696 A7 00         mov bh, 0
2796   1698             ; START RELATIONAL
2797   1698 D7            push a
2798   1699 11            mov a, b
2799   169A 26 40 00      mov b, $40
2800   169D B0            cmp a, b
2801   169E FD 71         seq ; ==
2802   16A0 E4            pop a
2803   16A1             ; END RELATIONAL
2804   16A1 C0 00 00      cmp b, 0
2805   16A4 C6 B6 16      je _ternary47_false
2806   16A7             _ternary47_true:
2807   16A7 26 1B 23      mov b, __s4 ; "@ "
2808   16AA FD AB         swp b
2809   16AC D8            push b
2810   16AD 07 42 0A      call printf
2811   16B0 51 02 00      add sp, 2
2812   16B3 0A C2 16      jmp _ternary47_exit
2813   16B6             _ternary47_false:
2814   16B6 26 1E 23      mov b, __s5 ; ". "
2815   16B9 FD AB         swp b
2816   16BB D8            push b
2817   16BC 07 42 0A      call printf
2818   16BF 51 02 00      add sp, 2
2819   16C2             _ternary47_exit:
2820   16C2             _for46_update:
2821   16C2 FA FD FF      lea d, [bp + -3] ; $j
2822   16C5 2A            mov b, [d]
2823   16C6 D8            push b
2824   16C7 FD 77         inc b
2825   16C9 FA FD FF      lea d, [bp + -3] ; $j
2826   16CC FD 43         mov [d], b
2827   16CE E5            pop b
2828   16CF 0A 6C 16      jmp _for46_cond
2829   16D2             _for46_exit:
2830   16D2             ;; putchar(10); 
2831   16D2 26 0A 00      mov b, $a
2832   16D5 DD            push bl
2833   16D6 07 31 12      call putchar
2834   16D9 51 01 00      add sp, 1
2835   16DC             _for45_update:
2836   16DC FA FF FF      lea d, [bp + -1] ; $i
2837   16DF 2A            mov b, [d]
2838   16E0 D8            push b
2839   16E1 FD 77         inc b
2840   16E3 FA FF FF      lea d, [bp + -1] ; $i
2841   16E6 FD 43         mov [d], b
2842   16E8 E5            pop b
2843   16E9 0A 4F 16      jmp _for45_cond
2844   16EC             _for45_exit:
2845   16EC F9            leave
2846   16ED 09            ret
2847   16EE             
2848   16EE             alive:
2849   16EE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2850   16F1             ;; if(currState[i][j] == '@') return 1; 
2851   16F1             _if48_cond:
2852   16F1 3B 0D 1E      mov d, _currState_data ; $currState
2853   16F4 D7            push a
2854   16F5 DA            push d
2855   16F6 FA 05 00      lea d, [bp + 5] ; $i
2856   16F9 2A            mov b, [d]
2857   16FA E7            pop d
2858   16FB FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2859   16FF DA            push d
2860   1700 FA 07 00      lea d, [bp + 7] ; $j
2861   1703 2A            mov b, [d]
2862   1704 E7            pop d
2863   1705 5A            add d, b
2864   1706 E4            pop a
2865   1707 32            mov bl, [d]
2866   1708 A7 00         mov bh, 0
2867   170A             ; START RELATIONAL
2868   170A D7            push a
2869   170B 11            mov a, b
2870   170C 26 40 00      mov b, $40
2871   170F B0            cmp a, b
2872   1710 FD 71         seq ; ==
2873   1712 E4            pop a
2874   1713             ; END RELATIONAL
2875   1713 C0 00 00      cmp b, 0
2876   1716 C6 21 17      je _if48_else
2877   1719             _if48_true:
2878   1719             ;; return 1; 
2879   1719 26 01 00      mov b, $1
2880   171C F9            leave
2881   171D 09            ret
2882   171E 0A 26 17      jmp _if48_exit
2883   1721             _if48_else:
2884   1721             ;; return 0; 
2885   1721 26 00 00      mov b, $0
2886   1724 F9            leave
2887   1725 09            ret
2888   1726             _if48_exit:
2889   1726 F9            leave
2890   1727 09            ret
2891   1728             
2892   1728             neighbours:
2893   1728 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2894   172B             ; $count 
2895   172B 52 02 00      sub sp, 2
2896   172E             ;; count = 0; 
2897   172E FA FF FF      lea d, [bp + -1] ; $count
2898   1731 DA            push d
2899   1732 26 00 00      mov b, $0
2900   1735 E7            pop d
2901   1736 FD 43         mov [d], b
2902   1738             ;; if(currState[i+-1][j] == '@')			count++; 
2903   1738             _if49_cond:
2904   1738 3B 0D 1E      mov d, _currState_data ; $currState
2905   173B D7            push a
2906   173C DA            push d
2907   173D FA 05 00      lea d, [bp + 5] ; $i
2908   1740 2A            mov b, [d]
2909   1741             ; START TERMS
2910   1741 D7            push a
2911   1742 11            mov a, b
2912   1743 26 FF FF      mov b, $ffff
2913   1746 56            add b, a
2914   1747 E4            pop a
2915   1748             ; END TERMS
2916   1748 E7            pop d
2917   1749 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2918   174D DA            push d
2919   174E FA 07 00      lea d, [bp + 7] ; $j
2920   1751 2A            mov b, [d]
2921   1752 E7            pop d
2922   1753 5A            add d, b
2923   1754 E4            pop a
2924   1755 32            mov bl, [d]
2925   1756 A7 00         mov bh, 0
2926   1758             ; START RELATIONAL
2927   1758 D7            push a
2928   1759 11            mov a, b
2929   175A 26 40 00      mov b, $40
2930   175D B0            cmp a, b
2931   175E FD 71         seq ; ==
2932   1760 E4            pop a
2933   1761             ; END RELATIONAL
2934   1761 C0 00 00      cmp b, 0
2935   1764 C6 77 17      je _if49_exit
2936   1767             _if49_true:
2937   1767             ;; count++; 
2938   1767 FA FF FF      lea d, [bp + -1] ; $count
2939   176A 2A            mov b, [d]
2940   176B D8            push b
2941   176C FD 77         inc b
2942   176E FA FF FF      lea d, [bp + -1] ; $count
2943   1771 FD 43         mov [d], b
2944   1773 E5            pop b
2945   1774 0A 77 17      jmp _if49_exit
2946   1777             _if49_exit:
2947   1777             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
2948   1777             _if50_cond:
2949   1777 3B 0D 1E      mov d, _currState_data ; $currState
2950   177A D7            push a
2951   177B DA            push d
2952   177C FA 05 00      lea d, [bp + 5] ; $i
2953   177F 2A            mov b, [d]
2954   1780             ; START TERMS
2955   1780 D7            push a
2956   1781 11            mov a, b
2957   1782 26 FF FF      mov b, $ffff
2958   1785 56            add b, a
2959   1786 E4            pop a
2960   1787             ; END TERMS
2961   1787 E7            pop d
2962   1788 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2963   178C DA            push d
2964   178D FA 07 00      lea d, [bp + 7] ; $j
2965   1790 2A            mov b, [d]
2966   1791             ; START TERMS
2967   1791 D7            push a
2968   1792 11            mov a, b
2969   1793 26 FF FF      mov b, $ffff
2970   1796 56            add b, a
2971   1797 E4            pop a
2972   1798             ; END TERMS
2973   1798 E7            pop d
2974   1799 5A            add d, b
2975   179A E4            pop a
2976   179B 32            mov bl, [d]
2977   179C A7 00         mov bh, 0
2978   179E             ; START RELATIONAL
2979   179E D7            push a
2980   179F 11            mov a, b
2981   17A0 26 40 00      mov b, $40
2982   17A3 B0            cmp a, b
2983   17A4 FD 71         seq ; ==
2984   17A6 E4            pop a
2985   17A7             ; END RELATIONAL
2986   17A7 C0 00 00      cmp b, 0
2987   17AA C6 BD 17      je _if50_exit
2988   17AD             _if50_true:
2989   17AD             ;; count++; 
2990   17AD FA FF FF      lea d, [bp + -1] ; $count
2991   17B0 2A            mov b, [d]
2992   17B1 D8            push b
2993   17B2 FD 77         inc b
2994   17B4 FA FF FF      lea d, [bp + -1] ; $count
2995   17B7 FD 43         mov [d], b
2996   17B9 E5            pop b
2997   17BA 0A BD 17      jmp _if50_exit
2998   17BD             _if50_exit:
2999   17BD             ;; if(currState[i+-1][j+1] == '@') 	count++; 
3000   17BD             _if51_cond:
3001   17BD 3B 0D 1E      mov d, _currState_data ; $currState
3002   17C0 D7            push a
3003   17C1 DA            push d
3004   17C2 FA 05 00      lea d, [bp + 5] ; $i
3005   17C5 2A            mov b, [d]
3006   17C6             ; START TERMS
3007   17C6 D7            push a
3008   17C7 11            mov a, b
3009   17C8 26 FF FF      mov b, $ffff
3010   17CB 56            add b, a
3011   17CC E4            pop a
3012   17CD             ; END TERMS
3013   17CD E7            pop d
3014   17CE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3015   17D2 DA            push d
3016   17D3 FA 07 00      lea d, [bp + 7] ; $j
3017   17D6 2A            mov b, [d]
3018   17D7             ; START TERMS
3019   17D7 D7            push a
3020   17D8 11            mov a, b
3021   17D9 26 01 00      mov b, $1
3022   17DC 56            add b, a
3023   17DD E4            pop a
3024   17DE             ; END TERMS
3025   17DE E7            pop d
3026   17DF 5A            add d, b
3027   17E0 E4            pop a
3028   17E1 32            mov bl, [d]
3029   17E2 A7 00         mov bh, 0
3030   17E4             ; START RELATIONAL
3031   17E4 D7            push a
3032   17E5 11            mov a, b
3033   17E6 26 40 00      mov b, $40
3034   17E9 B0            cmp a, b
3035   17EA FD 71         seq ; ==
3036   17EC E4            pop a
3037   17ED             ; END RELATIONAL
3038   17ED C0 00 00      cmp b, 0
3039   17F0 C6 03 18      je _if51_exit
3040   17F3             _if51_true:
3041   17F3             ;; count++; 
3042   17F3 FA FF FF      lea d, [bp + -1] ; $count
3043   17F6 2A            mov b, [d]
3044   17F7 D8            push b
3045   17F8 FD 77         inc b
3046   17FA FA FF FF      lea d, [bp + -1] ; $count
3047   17FD FD 43         mov [d], b
3048   17FF E5            pop b
3049   1800 0A 03 18      jmp _if51_exit
3050   1803             _if51_exit:
3051   1803             ;; if(currState[i][j+-1] == '@') 		count++; 
3052   1803             _if52_cond:
3053   1803 3B 0D 1E      mov d, _currState_data ; $currState
3054   1806 D7            push a
3055   1807 DA            push d
3056   1808 FA 05 00      lea d, [bp + 5] ; $i
3057   180B 2A            mov b, [d]
3058   180C E7            pop d
3059   180D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3060   1811 DA            push d
3061   1812 FA 07 00      lea d, [bp + 7] ; $j
3062   1815 2A            mov b, [d]
3063   1816             ; START TERMS
3064   1816 D7            push a
3065   1817 11            mov a, b
3066   1818 26 FF FF      mov b, $ffff
3067   181B 56            add b, a
3068   181C E4            pop a
3069   181D             ; END TERMS
3070   181D E7            pop d
3071   181E 5A            add d, b
3072   181F E4            pop a
3073   1820 32            mov bl, [d]
3074   1821 A7 00         mov bh, 0
3075   1823             ; START RELATIONAL
3076   1823 D7            push a
3077   1824 11            mov a, b
3078   1825 26 40 00      mov b, $40
3079   1828 B0            cmp a, b
3080   1829 FD 71         seq ; ==
3081   182B E4            pop a
3082   182C             ; END RELATIONAL
3083   182C C0 00 00      cmp b, 0
3084   182F C6 42 18      je _if52_exit
3085   1832             _if52_true:
3086   1832             ;; count++; 
3087   1832 FA FF FF      lea d, [bp + -1] ; $count
3088   1835 2A            mov b, [d]
3089   1836 D8            push b
3090   1837 FD 77         inc b
3091   1839 FA FF FF      lea d, [bp + -1] ; $count
3092   183C FD 43         mov [d], b
3093   183E E5            pop b
3094   183F 0A 42 18      jmp _if52_exit
3095   1842             _if52_exit:
3096   1842             ;; if(currState[i][j+1] == '@') 			count++; 
3097   1842             _if53_cond:
3098   1842 3B 0D 1E      mov d, _currState_data ; $currState
3099   1845 D7            push a
3100   1846 DA            push d
3101   1847 FA 05 00      lea d, [bp + 5] ; $i
3102   184A 2A            mov b, [d]
3103   184B E7            pop d
3104   184C FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3105   1850 DA            push d
3106   1851 FA 07 00      lea d, [bp + 7] ; $j
3107   1854 2A            mov b, [d]
3108   1855             ; START TERMS
3109   1855 D7            push a
3110   1856 11            mov a, b
3111   1857 26 01 00      mov b, $1
3112   185A 56            add b, a
3113   185B E4            pop a
3114   185C             ; END TERMS
3115   185C E7            pop d
3116   185D 5A            add d, b
3117   185E E4            pop a
3118   185F 32            mov bl, [d]
3119   1860 A7 00         mov bh, 0
3120   1862             ; START RELATIONAL
3121   1862 D7            push a
3122   1863 11            mov a, b
3123   1864 26 40 00      mov b, $40
3124   1867 B0            cmp a, b
3125   1868 FD 71         seq ; ==
3126   186A E4            pop a
3127   186B             ; END RELATIONAL
3128   186B C0 00 00      cmp b, 0
3129   186E C6 81 18      je _if53_exit
3130   1871             _if53_true:
3131   1871             ;; count++; 
3132   1871 FA FF FF      lea d, [bp + -1] ; $count
3133   1874 2A            mov b, [d]
3134   1875 D8            push b
3135   1876 FD 77         inc b
3136   1878 FA FF FF      lea d, [bp + -1] ; $count
3137   187B FD 43         mov [d], b
3138   187D E5            pop b
3139   187E 0A 81 18      jmp _if53_exit
3140   1881             _if53_exit:
3141   1881             ;; if(currState[i+1][j+-1] == '@') 	count++; 
3142   1881             _if54_cond:
3143   1881 3B 0D 1E      mov d, _currState_data ; $currState
3144   1884 D7            push a
3145   1885 DA            push d
3146   1886 FA 05 00      lea d, [bp + 5] ; $i
3147   1889 2A            mov b, [d]
3148   188A             ; START TERMS
3149   188A D7            push a
3150   188B 11            mov a, b
3151   188C 26 01 00      mov b, $1
3152   188F 56            add b, a
3153   1890 E4            pop a
3154   1891             ; END TERMS
3155   1891 E7            pop d
3156   1892 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3157   1896 DA            push d
3158   1897 FA 07 00      lea d, [bp + 7] ; $j
3159   189A 2A            mov b, [d]
3160   189B             ; START TERMS
3161   189B D7            push a
3162   189C 11            mov a, b
3163   189D 26 FF FF      mov b, $ffff
3164   18A0 56            add b, a
3165   18A1 E4            pop a
3166   18A2             ; END TERMS
3167   18A2 E7            pop d
3168   18A3 5A            add d, b
3169   18A4 E4            pop a
3170   18A5 32            mov bl, [d]
3171   18A6 A7 00         mov bh, 0
3172   18A8             ; START RELATIONAL
3173   18A8 D7            push a
3174   18A9 11            mov a, b
3175   18AA 26 40 00      mov b, $40
3176   18AD B0            cmp a, b
3177   18AE FD 71         seq ; ==
3178   18B0 E4            pop a
3179   18B1             ; END RELATIONAL
3180   18B1 C0 00 00      cmp b, 0
3181   18B4 C6 C7 18      je _if54_exit
3182   18B7             _if54_true:
3183   18B7             ;; count++; 
3184   18B7 FA FF FF      lea d, [bp + -1] ; $count
3185   18BA 2A            mov b, [d]
3186   18BB D8            push b
3187   18BC FD 77         inc b
3188   18BE FA FF FF      lea d, [bp + -1] ; $count
3189   18C1 FD 43         mov [d], b
3190   18C3 E5            pop b
3191   18C4 0A C7 18      jmp _if54_exit
3192   18C7             _if54_exit:
3193   18C7             ;; if(currState[i+1][j] == '@') 			count++; 
3194   18C7             _if55_cond:
3195   18C7 3B 0D 1E      mov d, _currState_data ; $currState
3196   18CA D7            push a
3197   18CB DA            push d
3198   18CC FA 05 00      lea d, [bp + 5] ; $i
3199   18CF 2A            mov b, [d]
3200   18D0             ; START TERMS
3201   18D0 D7            push a
3202   18D1 11            mov a, b
3203   18D2 26 01 00      mov b, $1
3204   18D5 56            add b, a
3205   18D6 E4            pop a
3206   18D7             ; END TERMS
3207   18D7 E7            pop d
3208   18D8 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3209   18DC DA            push d
3210   18DD FA 07 00      lea d, [bp + 7] ; $j
3211   18E0 2A            mov b, [d]
3212   18E1 E7            pop d
3213   18E2 5A            add d, b
3214   18E3 E4            pop a
3215   18E4 32            mov bl, [d]
3216   18E5 A7 00         mov bh, 0
3217   18E7             ; START RELATIONAL
3218   18E7 D7            push a
3219   18E8 11            mov a, b
3220   18E9 26 40 00      mov b, $40
3221   18EC B0            cmp a, b
3222   18ED FD 71         seq ; ==
3223   18EF E4            pop a
3224   18F0             ; END RELATIONAL
3225   18F0 C0 00 00      cmp b, 0
3226   18F3 C6 06 19      je _if55_exit
3227   18F6             _if55_true:
3228   18F6             ;; count++; 
3229   18F6 FA FF FF      lea d, [bp + -1] ; $count
3230   18F9 2A            mov b, [d]
3231   18FA D8            push b
3232   18FB FD 77         inc b
3233   18FD FA FF FF      lea d, [bp + -1] ; $count
3234   1900 FD 43         mov [d], b
3235   1902 E5            pop b
3236   1903 0A 06 19      jmp _if55_exit
3237   1906             _if55_exit:
3238   1906             ;; if(currState[i+1][j+1] == '@') 		count++; 
3239   1906             _if56_cond:
3240   1906 3B 0D 1E      mov d, _currState_data ; $currState
3241   1909 D7            push a
3242   190A DA            push d
3243   190B FA 05 00      lea d, [bp + 5] ; $i
3244   190E 2A            mov b, [d]
3245   190F             ; START TERMS
3246   190F D7            push a
3247   1910 11            mov a, b
3248   1911 26 01 00      mov b, $1
3249   1914 56            add b, a
3250   1915 E4            pop a
3251   1916             ; END TERMS
3252   1916 E7            pop d
3253   1917 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3254   191B DA            push d
3255   191C FA 07 00      lea d, [bp + 7] ; $j
3256   191F 2A            mov b, [d]
3257   1920             ; START TERMS
3258   1920 D7            push a
3259   1921 11            mov a, b
3260   1922 26 01 00      mov b, $1
3261   1925 56            add b, a
3262   1926 E4            pop a
3263   1927             ; END TERMS
3264   1927 E7            pop d
3265   1928 5A            add d, b
3266   1929 E4            pop a
3267   192A 32            mov bl, [d]
3268   192B A7 00         mov bh, 0
3269   192D             ; START RELATIONAL
3270   192D D7            push a
3271   192E 11            mov a, b
3272   192F 26 40 00      mov b, $40
3273   1932 B0            cmp a, b
3274   1933 FD 71         seq ; ==
3275   1935 E4            pop a
3276   1936             ; END RELATIONAL
3277   1936 C0 00 00      cmp b, 0
3278   1939 C6 4C 19      je _if56_exit
3279   193C             _if56_true:
3280   193C             ;; count++; 
3281   193C FA FF FF      lea d, [bp + -1] ; $count
3282   193F 2A            mov b, [d]
3283   1940 D8            push b
3284   1941 FD 77         inc b
3285   1943 FA FF FF      lea d, [bp + -1] ; $count
3286   1946 FD 43         mov [d], b
3287   1948 E5            pop b
3288   1949 0A 4C 19      jmp _if56_exit
3289   194C             _if56_exit:
3290   194C             ;; return count; 
3291   194C FA FF FF      lea d, [bp + -1] ; $count
3292   194F 2A            mov b, [d]
3293   1950 F9            leave
3294   1951 09            ret
3295   1952             ; --- END TEXT BLOCK
3296   1952             
3297   1952             ; --- BEGIN DATA BLOCK
3298   1952             _clear_data: 
3299   1952 01 5B 32 4A .db 1b,$5b,$32,$4a,1b,$5b,$48,0,
3299   1956 01 5B 48 00 
3300   195A 00 00 00    .fill 3, 0
3301   195D 00 00 00 00 _nextState_data: .fill 1200, 0
3301   1961 00 00 00 00 
3301   1965 00 00 00 00 
3301   1969 00 00 00 00 
3301   196D 00 00 00 00 
3301   1971 00 00 00 00 
3301   1975 00 00 00 00 
3301   1979 00 00 00 00 
3301   197D 00 00 00 00 
3301   1981 00 00 00 00 
3301   1985 00 00 00 00 
3301   1989 00 00 00 00 
3301   198D 00 00 00 00 
3301   1991 00 00 00 00 
3301   1995 00 00 00 00 
3301   1999 00 00 00 00 
3301   199D 00 00 00 00 
3301   19A1 00 00 00 00 
3301   19A5 00 00 00 00 
3301   19A9 00 00 00 00 
3301   19AD 00 00 00 00 
3301   19B1 00 00 00 00 
3301   19B5 00 00 00 00 
3301   19B9 00 00 00 00 
3301   19BD 00 00 00 00 
3301   19C1 00 00 00 00 
3301   19C5 00 00 00 00 
3301   19C9 00 00 00 00 
3301   19CD 00 00 00 00 
3301   19D1 00 00 00 00 
3301   19D5 00 00 00 00 
3301   19D9 00 00 00 00 
3301   19DD 00 00 00 00 
3301   19E1 00 00 00 00 
3301   19E5 00 00 00 00 
3301   19E9 00 00 00 00 
3301   19ED 00 00 00 00 
3301   19F1 00 00 00 00 
3301   19F5 00 00 00 00 
3301   19F9 00 00 00 00 
3301   19FD 00 00 00 00 
3301   1A01 00 00 00 00 
3301   1A05 00 00 00 00 
3301   1A09 00 00 00 00 
3301   1A0D 00 00 00 00 
3301   1A11 00 00 00 00 
3301   1A15 00 00 00 00 
3301   1A19 00 00 00 00 
3301   1A1D 00 00 00 00 
3301   1A21 00 00 00 00 
3301   1A25 00 00 00 00 
3301   1A29 00 00 00 00 
3301   1A2D 00 00 00 00 
3301   1A31 00 00 00 00 
3301   1A35 00 00 00 00 
3301   1A39 00 00 00 00 
3301   1A3D 00 00 00 00 
3301   1A41 00 00 00 00 
3301   1A45 00 00 00 00 
3301   1A49 00 00 00 00 
3301   1A4D 00 00 00 00 
3301   1A51 00 00 00 00 
3301   1A55 00 00 00 00 
3301   1A59 00 00 00 00 
3301   1A5D 00 00 00 00 
3301   1A61 00 00 00 00 
3301   1A65 00 00 00 00 
3301   1A69 00 00 00 00 
3301   1A6D 00 00 00 00 
3301   1A71 00 00 00 00 
3301   1A75 00 00 00 00 
3301   1A79 00 00 00 00 
3301   1A7D 00 00 00 00 
3301   1A81 00 00 00 00 
3301   1A85 00 00 00 00 
3301   1A89 00 00 00 00 
3301   1A8D 00 00 00 00 
3301   1A91 00 00 00 00 
3301   1A95 00 00 00 00 
3301   1A99 00 00 00 00 
3301   1A9D 00 00 00 00 
3301   1AA1 00 00 00 00 
3301   1AA5 00 00 00 00 
3301   1AA9 00 00 00 00 
3301   1AAD 00 00 00 00 
3301   1AB1 00 00 00 00 
3301   1AB5 00 00 00 00 
3301   1AB9 00 00 00 00 
3301   1ABD 00 00 00 00 
3301   1AC1 00 00 00 00 
3301   1AC5 00 00 00 00 
3301   1AC9 00 00 00 00 
3301   1ACD 00 00 00 00 
3301   1AD1 00 00 00 00 
3301   1AD5 00 00 00 00 
3301   1AD9 00 00 00 00 
3301   1ADD 00 00 00 00 
3301   1AE1 00 00 00 00 
3301   1AE5 00 00 00 00 
3301   1AE9 00 00 00 00 
3301   1AED 00 00 00 00 
3301   1AF1 00 00 00 00 
3301   1AF5 00 00 00 00 
3301   1AF9 00 00 00 00 
3301   1AFD 00 00 00 00 
3301   1B01 00 00 00 00 
3301   1B05 00 00 00 00 
3301   1B09 00 00 00 00 
3301   1B0D 00 00 00 00 
3301   1B11 00 00 00 00 
3301   1B15 00 00 00 00 
3301   1B19 00 00 00 00 
3301   1B1D 00 00 00 00 
3301   1B21 00 00 00 00 
3301   1B25 00 00 00 00 
3301   1B29 00 00 00 00 
3301   1B2D 00 00 00 00 
3301   1B31 00 00 00 00 
3301   1B35 00 00 00 00 
3301   1B39 00 00 00 00 
3301   1B3D 00 00 00 00 
3301   1B41 00 00 00 00 
3301   1B45 00 00 00 00 
3301   1B49 00 00 00 00 
3301   1B4D 00 00 00 00 
3301   1B51 00 00 00 00 
3301   1B55 00 00 00 00 
3301   1B59 00 00 00 00 
3301   1B5D 00 00 00 00 
3301   1B61 00 00 00 00 
3301   1B65 00 00 00 00 
3301   1B69 00 00 00 00 
3301   1B6D 00 00 00 00 
3301   1B71 00 00 00 00 
3301   1B75 00 00 00 00 
3301   1B79 00 00 00 00 
3301   1B7D 00 00 00 00 
3301   1B81 00 00 00 00 
3301   1B85 00 00 00 00 
3301   1B89 00 00 00 00 
3301   1B8D 00 00 00 00 
3301   1B91 00 00 00 00 
3301   1B95 00 00 00 00 
3301   1B99 00 00 00 00 
3301   1B9D 00 00 00 00 
3301   1BA1 00 00 00 00 
3301   1BA5 00 00 00 00 
3301   1BA9 00 00 00 00 
3301   1BAD 00 00 00 00 
3301   1BB1 00 00 00 00 
3301   1BB5 00 00 00 00 
3301   1BB9 00 00 00 00 
3301   1BBD 00 00 00 00 
3301   1BC1 00 00 00 00 
3301   1BC5 00 00 00 00 
3301   1BC9 00 00 00 00 
3301   1BCD 00 00 00 00 
3301   1BD1 00 00 00 00 
3301   1BD5 00 00 00 00 
3301   1BD9 00 00 00 00 
3301   1BDD 00 00 00 00 
3301   1BE1 00 00 00 00 
3301   1BE5 00 00 00 00 
3301   1BE9 00 00 00 00 
3301   1BED 00 00 00 00 
3301   1BF1 00 00 00 00 
3301   1BF5 00 00 00 00 
3301   1BF9 00 00 00 00 
3301   1BFD 00 00 00 00 
3301   1C01 00 00 00 00 
3301   1C05 00 00 00 00 
3301   1C09 00 00 00 00 
3301   1C0D 00 00 00 00 
3301   1C11 00 00 00 00 
3301   1C15 00 00 00 00 
3301   1C19 00 00 00 00 
3301   1C1D 00 00 00 00 
3301   1C21 00 00 00 00 
3301   1C25 00 00 00 00 
3301   1C29 00 00 00 00 
3301   1C2D 00 00 00 00 
3301   1C31 00 00 00 00 
3301   1C35 00 00 00 00 
3301   1C39 00 00 00 00 
3301   1C3D 00 00 00 00 
3301   1C41 00 00 00 00 
3301   1C45 00 00 00 00 
3301   1C49 00 00 00 00 
3301   1C4D 00 00 00 00 
3301   1C51 00 00 00 00 
3301   1C55 00 00 00 00 
3301   1C59 00 00 00 00 
3301   1C5D 00 00 00 00 
3301   1C61 00 00 00 00 
3301   1C65 00 00 00 00 
3301   1C69 00 00 00 00 
3301   1C6D 00 00 00 00 
3301   1C71 00 00 00 00 
3301   1C75 00 00 00 00 
3301   1C79 00 00 00 00 
3301   1C7D 00 00 00 00 
3301   1C81 00 00 00 00 
3301   1C85 00 00 00 00 
3301   1C89 00 00 00 00 
3301   1C8D 00 00 00 00 
3301   1C91 00 00 00 00 
3301   1C95 00 00 00 00 
3301   1C99 00 00 00 00 
3301   1C9D 00 00 00 00 
3301   1CA1 00 00 00 00 
3301   1CA5 00 00 00 00 
3301   1CA9 00 00 00 00 
3301   1CAD 00 00 00 00 
3301   1CB1 00 00 00 00 
3301   1CB5 00 00 00 00 
3301   1CB9 00 00 00 00 
3301   1CBD 00 00 00 00 
3301   1CC1 00 00 00 00 
3301   1CC5 00 00 00 00 
3301   1CC9 00 00 00 00 
3301   1CCD 00 00 00 00 
3301   1CD1 00 00 00 00 
3301   1CD5 00 00 00 00 
3301   1CD9 00 00 00 00 
3301   1CDD 00 00 00 00 
3301   1CE1 00 00 00 00 
3301   1CE5 00 00 00 00 
3301   1CE9 00 00 00 00 
3301   1CED 00 00 00 00 
3301   1CF1 00 00 00 00 
3301   1CF5 00 00 00 00 
3301   1CF9 00 00 00 00 
3301   1CFD 00 00 00 00 
3301   1D01 00 00 00 00 
3301   1D05 00 00 00 00 
3301   1D09 00 00 00 00 
3301   1D0D 00 00 00 00 
3301   1D11 00 00 00 00 
3301   1D15 00 00 00 00 
3301   1D19 00 00 00 00 
3301   1D1D 00 00 00 00 
3301   1D21 00 00 00 00 
3301   1D25 00 00 00 00 
3301   1D29 00 00 00 00 
3301   1D2D 00 00 00 00 
3301   1D31 00 00 00 00 
3301   1D35 00 00 00 00 
3301   1D39 00 00 00 00 
3301   1D3D 00 00 00 00 
3301   1D41 00 00 00 00 
3301   1D45 00 00 00 00 
3301   1D49 00 00 00 00 
3301   1D4D 00 00 00 00 
3301   1D51 00 00 00 00 
3301   1D55 00 00 00 00 
3301   1D59 00 00 00 00 
3301   1D5D 00 00 00 00 
3301   1D61 00 00 00 00 
3301   1D65 00 00 00 00 
3301   1D69 00 00 00 00 
3301   1D6D 00 00 00 00 
3301   1D71 00 00 00 00 
3301   1D75 00 00 00 00 
3301   1D79 00 00 00 00 
3301   1D7D 00 00 00 00 
3301   1D81 00 00 00 00 
3301   1D85 00 00 00 00 
3301   1D89 00 00 00 00 
3301   1D8D 00 00 00 00 
3301   1D91 00 00 00 00 
3301   1D95 00 00 00 00 
3301   1D99 00 00 00 00 
3301   1D9D 00 00 00 00 
3301   1DA1 00 00 00 00 
3301   1DA5 00 00 00 00 
3301   1DA9 00 00 00 00 
3301   1DAD 00 00 00 00 
3301   1DB1 00 00 00 00 
3301   1DB5 00 00 00 00 
3301   1DB9 00 00 00 00 
3301   1DBD 00 00 00 00 
3301   1DC1 00 00 00 00 
3301   1DC5 00 00 00 00 
3301   1DC9 00 00 00 00 
3301   1DCD 00 00 00 00 
3301   1DD1 00 00 00 00 
3301   1DD5 00 00 00 00 
3301   1DD9 00 00 00 00 
3301   1DDD 00 00 00 00 
3301   1DE1 00 00 00 00 
3301   1DE5 00 00 00 00 
3301   1DE9 00 00 00 00 
3301   1DED 00 00 00 00 
3301   1DF1 00 00 00 00 
3301   1DF5 00 00 00 00 
3301   1DF9 00 00 00 00 
3301   1DFD 00 00 00 00 
3301   1E01 00 00 00 00 
3301   1E05 00 00 00 00 
3301   1E09 00 00 00 00 
3302   1E0D             _currState_data: 
3303   1E0D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3303   1E11 20 20 20 20 
3303   1E15 20 20 20 20 
3303   1E19 20 20 20 20 
3303   1E1D 20 20 20 20 
3303   1E21 20 20 20 20 
3303   1E25 20 20 20 20 
3303   1E29 20 20 
3304   1E2B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3304   1E2F 20 20 20 20 
3304   1E33 20 20 20 20 
3304   1E37 20 20 20 20 
3304   1E3B 20 20 20 20 
3304   1E3F 20 20 20 20 
3304   1E43 20 20 20 20 
3304   1E47 20 20 
3305   1E49 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3305   1E4D 20 20 20 20 
3305   1E51 20 20 20 20 
3305   1E55 20 20 20 20 
3305   1E59 20 20 20 20 
3305   1E5D 20 20 20 20 
3305   1E61 20 20 20 20 
3305   1E65 20 20 
3306   1E67 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3306   1E6B 20 20 20 20 
3306   1E6F 20 20 20 20 
3306   1E73 20 20 20 20 
3306   1E77 20 20 20 20 
3306   1E7B 20 20 20 20 
3306   1E7F 20 20 20 20 
3306   1E83 20 20 
3307   1E85 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3307   1E89 20 20 20 20 
3307   1E8D 20 20 20 20 
3307   1E91 20 20 20 20 
3307   1E95 20 20 20 20 
3307   1E99 20 20 20 20 
3307   1E9D 20 20 20 40 
3307   1EA1 20 20 
3308   1EA3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3308   1EA7 20 20 20 20 
3308   1EAB 20 20 20 20 
3308   1EAF 20 20 20 20 
3308   1EB3 20 20 20 20 
3308   1EB7 20 20 20 20 
3308   1EBB 20 20 20 20 
3308   1EBF 20 20 
3309   1EC1 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3309   1EC5 20 40 20 40 
3309   1EC9 20 20 20 20 
3309   1ECD 20 20 20 20 
3309   1ED1 20 20 20 20 
3309   1ED5 20 20 20 20 
3309   1ED9 20 20 20 20 
3309   1EDD 20 20 
3310   1EDF 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
3310   1EE3 20 40 40 20 
3310   1EE7 20 20 20 20 
3310   1EEB 20 40 40 20 
3310   1EEF 20 20 20 20 
3310   1EF3 20 20 20 20 
3310   1EF7 20 20 20 40 
3310   1EFB 40 20 
3311   1EFD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3311   1F01 20 20 20 20 
3311   1F05 20 20 20 20 
3311   1F09 20 20 40 20 
3311   1F0D 20 20 40 20 
3311   1F11 20 20 20 40 
3311   1F15 40 20 20 20 
3311   1F19 20 20 
3312   1F1B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
3312   1F1F 20 20 20 40 
3312   1F23 40 20 20 20 
3312   1F27 20 40 40 20 
3312   1F2B 20 20 20 20 
3312   1F2F 20 20 20 40 
3312   1F33 20 20 20 20 
3312   1F37 20 40 
3313   1F39 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3313   1F3D 40 20 20 20 
3313   1F41 20 20 20 20 
3313   1F45 20 20 20 20 
3313   1F49 20 20 20 20 
3313   1F4D 20 20 20 40 
3313   1F51 40 20 20 20 
3313   1F55 20 20 
3314   1F57 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3314   1F5B 20 20 20 40 
3314   1F5F 20 40 40 20 
3314   1F63 20 20 20 40 
3314   1F67 20 40 20 20 
3314   1F6B 20 20 20 20 
3314   1F6F 20 20 20 20 
3314   1F73 20 20 
3315   1F75 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3315   1F79 20 20 20 20 
3315   1F7D 20 20 20 20 
3315   1F81 20 40 20 20 
3315   1F85 20 20 20 40 
3315   1F89 20 20 20 20 
3315   1F8D 20 20 20 40 
3315   1F91 20 20 
3316   1F93 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
3316   1F97 20 20 20 20 
3316   1F9B 20 20 20 20 
3316   1F9F 20 20 20 20 
3316   1FA3 20 20 20 20 
3316   1FA7 20 20 20 20 
3316   1FAB 40 20 20 20 
3316   1FAF 40 20 
3317   1FB1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3317   1FB5 20 20 20 20 
3317   1FB9 20 20 20 20 
3317   1FBD 20 20 20 20 
3317   1FC1 20 20 20 20 
3317   1FC5 20 20 20 20 
3317   1FC9 20 20 20 20 
3317   1FCD 20 20 
3318   1FCF 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3318   1FD3 20 40 40 20 
3318   1FD7 20 20 20 20 
3318   1FDB 20 20 20 20 
3318   1FDF 20 20 20 20 
3318   1FE3 20 20 20 20 
3318   1FE7 20 20 20 20 
3318   1FEB 20 20 
3319   1FED 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3319   1FF1 20 20 20 20 
3319   1FF5 20 20 20 20 
3319   1FF9 20 20 20 20 
3319   1FFD 20 20 20 20 
3319   2001 20 20 20 20 
3319   2005 20 20 20 20 
3319   2009 20 20 
3320   200B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3320   200F 20 20 20 20 
3320   2013 20 20 20 20 
3320   2017 20 20 20 20 
3320   201B 20 20 20 20 
3320   201F 20 20 20 20 
3320   2023 20 20 20 20 
3320   2027 20 20 
3321   2029 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3321   202D 20 20 20 20 
3321   2031 20 20 20 20 
3321   2035 20 20 20 20 
3321   2039 20 20 20 20 
3321   203D 20 20 20 20 
3321   2041 20 20 20 20 
3321   2045 20 20 
3322   2047 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3322   204B 20 20 20 20 
3322   204F 20 20 20 20 
3322   2053 20 20 20 20 
3322   2057 20 20 20 20 
3322   205B 20 20 20 20 
3322   205F 20 20 20 20 
3322   2063 20 20 
3323   2065 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3323   2069 20 20 20 20 
3323   206D 20 20 20 20 
3323   2071 20 20 20 20 
3323   2075 20 20 20 20 
3323   2079 20 20 20 20 
3323   207D 20 20 20 20 
3323   2081 20 20 
3324   2083 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3324   2087 20 20 20 20 
3324   208B 20 20 20 20 
3324   208F 20 20 20 20 
3324   2093 20 20 20 20 
3324   2097 20 20 20 20 
3324   209B 20 20 20 20 
3324   209F 20 20 
3325   20A1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3325   20A5 20 20 20 20 
3325   20A9 20 20 20 20 
3325   20AD 20 20 20 20 
3325   20B1 20 20 20 20 
3325   20B5 20 20 20 20 
3325   20B9 20 20 20 20 
3325   20BD 20 20 
3326   20BF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3326   20C3 20 20 20 20 
3326   20C7 20 20 20 20 
3326   20CB 20 20 20 20 
3326   20CF 20 20 20 20 
3326   20D3 20 20 20 20 
3326   20D7 20 20 20 20 
3326   20DB 20 20 
3327   20DD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3327   20E1 20 20 20 20 
3327   20E5 20 20 20 20 
3327   20E9 20 20 20 20 
3327   20ED 20 20 20 20 
3327   20F1 20 20 20 20 
3327   20F5 20 20 20 20 
3327   20F9 20 20 
3328   20FB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3328   20FF 20 20 20 20 
3328   2103 20 20 20 20 
3328   2107 20 20 20 20 
3328   210B 20 20 20 20 
3328   210F 20 20 20 20 
3328   2113 20 20 20 20 
3328   2117 20 20 
3329   2119 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3329   211D 20 20 20 20 
3329   2121 20 20 20 20 
3329   2125 20 20 20 20 
3329   2129 20 20 20 20 
3330   212D 00 00 00 00 .fill 400, 0
3330   2131 00 00 00 00 
3330   2135 00 00 00 00 
3330   2139 00 00 00 00 
3330   213D 00 00 00 00 
3330   2141 00 00 00 00 
3330   2145 00 00 00 00 
3330   2149 00 00 00 00 
3330   214D 00 00 00 00 
3330   2151 00 00 00 00 
3330   2155 00 00 00 00 
3330   2159 00 00 00 00 
3330   215D 00 00 00 00 
3330   2161 00 00 00 00 
3330   2165 00 00 00 00 
3330   2169 00 00 00 00 
3330   216D 00 00 00 00 
3330   2171 00 00 00 00 
3330   2175 00 00 00 00 
3330   2179 00 00 00 00 
3330   217D 00 00 00 00 
3330   2181 00 00 00 00 
3330   2185 00 00 00 00 
3330   2189 00 00 00 00 
3330   218D 00 00 00 00 
3330   2191 00 00 00 00 
3330   2195 00 00 00 00 
3330   2199 00 00 00 00 
3330   219D 00 00 00 00 
3330   21A1 00 00 00 00 
3330   21A5 00 00 00 00 
3330   21A9 00 00 00 00 
3330   21AD 00 00 00 00 
3330   21B1 00 00 00 00 
3330   21B5 00 00 00 00 
3330   21B9 00 00 00 00 
3330   21BD 00 00 00 00 
3330   21C1 00 00 00 00 
3330   21C5 00 00 00 00 
3330   21C9 00 00 00 00 
3330   21CD 00 00 00 00 
3330   21D1 00 00 00 00 
3330   21D5 00 00 00 00 
3330   21D9 00 00 00 00 
3330   21DD 00 00 00 00 
3330   21E1 00 00 00 00 
3330   21E5 00 00 00 00 
3330   21E9 00 00 00 00 
3330   21ED 00 00 00 00 
3330   21F1 00 00 00 00 
3330   21F5 00 00 00 00 
3330   21F9 00 00 00 00 
3330   21FD 00 00 00 00 
3330   2201 00 00 00 00 
3330   2205 00 00 00 00 
3330   2209 00 00 00 00 
3330   220D 00 00 00 00 
3330   2211 00 00 00 00 
3330   2215 00 00 00 00 
3330   2219 00 00 00 00 
3330   221D 00 00 00 00 
3330   2221 00 00 00 00 
3330   2225 00 00 00 00 
3330   2229 00 00 00 00 
3330   222D 00 00 00 00 
3330   2231 00 00 00 00 
3330   2235 00 00 00 00 
3330   2239 00 00 00 00 
3330   223D 00 00 00 00 
3330   2241 00 00 00 00 
3330   2245 00 00 00 00 
3330   2249 00 00 00 00 
3330   224D 00 00 00 00 
3330   2251 00 00 00 00 
3330   2255 00 00 00 00 
3330   2259 00 00 00 00 
3330   225D 00 00 00 00 
3330   2261 00 00 00 00 
3330   2265 00 00 00 00 
3330   2269 00 00 00 00 
3330   226D 00 00 00 00 
3330   2271 00 00 00 00 
3330   2275 00 00 00 00 
3330   2279 00 00 00 00 
3330   227D 00 00 00 00 
3330   2281 00 00 00 00 
3330   2285 00 00 00 00 
3330   2289 00 00 00 00 
3330   228D 00 00 00 00 
3330   2291 00 00 00 00 
3330   2295 00 00 00 00 
3330   2299 00 00 00 00 
3330   229D 00 00 00 00 
3330   22A1 00 00 00 00 
3330   22A5 00 00 00 00 
3330   22A9 00 00 00 00 
3330   22AD 00 00 00 00 
3330   22B1 00 00 00 00 
3330   22B5 00 00 00 00 
3330   22B9 00 00 00 00 
3331   22BD 0A 0D 50 72 __s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
3331   22C1 65 73 73 20 
3331   22C5 43 54 52 4C 
3331   22C9 2B 43 20 74 
3331   22CD 6F 20 71 75 
3331   22D1 69 74 2E 0A 
3331   22D5 0D 00 
3332   22D7 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
3332   22DB 70 65 63 74 
3332   22DF 65 64 20 66 
3332   22E3 6F 72 6D 61 
3332   22E7 74 20 69 6E 
3332   22EB 20 70 72 69 
3332   22EF 6E 74 66 2E 
3332   22F3 00 
3333   22F4 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
3333   22F8 72 3A 20 55 
3333   22FC 6E 6B 6E 6F 
3333   2300 77 6E 20 61 
3333   2304 72 67 75 6D 
3333   2308 65 6E 74 20 
3333   230C 74 79 70 65 
3333   2310 2E 0A 00 
3334   2313 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
3334   2317 1B 5B 48 00 
3335   231B 40 20 00    __s4: .db "@ ", 0
3336   231E 2E 20 00    __s5: .db ". ", 0
3337   2321             
3338   2321 23 23       _heap_top: .dw _heap
3339   2323 00          _heap: .db 0
3340   2324             ; --- END DATA BLOCK
3341   2324             
3342   2324             .end
tasm: Number of errors = 0
