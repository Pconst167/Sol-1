0001   0000             ; --- FILENAME: programs/life.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int i, j; 
0011   0408 52 02 00      sub sp, 2
0012   040B 52 02 00      sub sp, 2
0013   040E             ; int n; 
0014   040E 52 02 00      sub sp, 2
0015   0411             ; for(i = 0; i <  30      ; i++){ 
0016   0411             _for1_init:
0017   0411 FA FF FF      lea d, [bp + -1] ; $i
0018   0414 DA            push d
0019   0415 FD 2E 00 00   mov32 cb, $00000000
0019   0419 00 00 
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             _for1_cond:
0023   041E FA FF FF      lea d, [bp + -1] ; $i
0024   0421 2A            mov b, [d]
0025   0422 38 00 00      mov c, 0
0026   0425             ; --- START RELATIONAL
0027   0425 D7            push a
0028   0426 11            mov a, b
0029   0427 FD 2E 1E 00   mov32 cb, $0000001e
0029   042B 00 00 
0030   042D B0            cmp a, b
0031   042E FD 73         slt ; < (signed)
0032   0430 E4            pop a
0033   0431             ; --- END RELATIONAL
0034   0431 C0 00 00      cmp b, 0
0035   0434 C6 C5 04      je _for1_exit
0036   0437             _for1_block:
0037   0437             ; for(j = 0; j <   40     ; j++){ 
0038   0437             _for2_init:
0039   0437 FA FD FF      lea d, [bp + -3] ; $j
0040   043A DA            push d
0041   043B FD 2E 00 00   mov32 cb, $00000000
0041   043F 00 00 
0042   0441 E7            pop d
0043   0442 FD 43         mov [d], b
0044   0444             _for2_cond:
0045   0444 FA FD FF      lea d, [bp + -3] ; $j
0046   0447 2A            mov b, [d]
0047   0448 38 00 00      mov c, 0
0048   044B             ; --- START RELATIONAL
0049   044B D7            push a
0050   044C 11            mov a, b
0051   044D FD 2E 28 00   mov32 cb, $00000028
0051   0451 00 00 
0052   0453 B0            cmp a, b
0053   0454 FD 73         slt ; < (signed)
0054   0456 E4            pop a
0055   0457             ; --- END RELATIONAL
0056   0457 C0 00 00      cmp b, 0
0057   045A C6 B2 04      je _for2_exit
0058   045D             _for2_block:
0059   045D             ; nextState[i][j] = currState[i][j]; 
0060   045D 3B 20 14      mov d, _nextState_data ; $nextState
0061   0460 D7            push a
0062   0461 DA            push d
0063   0462 FA FF FF      lea d, [bp + -1] ; $i
0064   0465 2A            mov b, [d]
0065   0466 38 00 00      mov c, 0
0066   0469 E7            pop d
0067   046A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0068   046E DA            push d
0069   046F FA FD FF      lea d, [bp + -3] ; $j
0070   0472 2A            mov b, [d]
0071   0473 38 00 00      mov c, 0
0072   0476 E7            pop d
0073   0477 5A            add d, b
0074   0478 E4            pop a
0075   0479 DA            push d
0076   047A 3B D0 18      mov d, _currState_data ; $currState
0077   047D D7            push a
0078   047E DA            push d
0079   047F FA FF FF      lea d, [bp + -1] ; $i
0080   0482 2A            mov b, [d]
0081   0483 38 00 00      mov c, 0
0082   0486 E7            pop d
0083   0487 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0084   048B DA            push d
0085   048C FA FD FF      lea d, [bp + -3] ; $j
0086   048F 2A            mov b, [d]
0087   0490 38 00 00      mov c, 0
0088   0493 E7            pop d
0089   0494 5A            add d, b
0090   0495 E4            pop a
0091   0496 32            mov bl, [d]
0092   0497 A7 00         mov bh, 0
0093   0499 38 00 00      mov c, 0
0094   049C E7            pop d
0095   049D FD 3E         mov [d], bl
0096   049F             _for2_update:
0097   049F FA FD FF      lea d, [bp + -3] ; $j
0098   04A2 2A            mov b, [d]
0099   04A3 38 00 00      mov c, 0
0100   04A6 11            mov a, b
0101   04A7 FD 77         inc b
0102   04A9 FA FD FF      lea d, [bp + -3] ; $j
0103   04AC FD 43         mov [d], b
0104   04AE 27            mov b, a
0105   04AF 0A 44 04      jmp _for2_cond
0106   04B2             _for2_exit:
0107   04B2             _for1_update:
0108   04B2 FA FF FF      lea d, [bp + -1] ; $i
0109   04B5 2A            mov b, [d]
0110   04B6 38 00 00      mov c, 0
0111   04B9 11            mov a, b
0112   04BA FD 77         inc b
0113   04BC FA FF FF      lea d, [bp + -1] ; $i
0114   04BF FD 43         mov [d], b
0115   04C1 27            mov b, a
0116   04C2 0A 1E 04      jmp _for1_cond
0117   04C5             _for1_exit:
0118   04C5             ; for(;;){ 
0119   04C5             _for3_init:
0120   04C5             _for3_cond:
0121   04C5             _for3_block:
0122   04C5             ; for(i = 1; i <  30      +-1; i++){ 
0123   04C5             _for4_init:
0124   04C5 FA FF FF      lea d, [bp + -1] ; $i
0125   04C8 DA            push d
0126   04C9 FD 2E 01 00   mov32 cb, $00000001
0126   04CD 00 00 
0127   04CF E7            pop d
0128   04D0 FD 43         mov [d], b
0129   04D2             _for4_cond:
0130   04D2 FA FF FF      lea d, [bp + -1] ; $i
0131   04D5 2A            mov b, [d]
0132   04D6 38 00 00      mov c, 0
0133   04D9             ; --- START RELATIONAL
0134   04D9 D7            push a
0135   04DA 11            mov a, b
0136   04DB FD 2E 1E 00   mov32 cb, $0000001e
0136   04DF 00 00 
0137   04E1             ; --- START TERMS
0138   04E1 D7            push a
0139   04E2 11            mov a, b
0140   04E3 FD 2E FF FF   mov32 cb, $ffffffff
0140   04E7 FF FF 
0141   04E9 56            add b, a
0142   04EA E4            pop a
0143   04EB             ; --- END TERMS
0144   04EB B0            cmp a, b
0145   04EC FD 73         slt ; < (signed)
0146   04EE E4            pop a
0147   04EF             ; --- END RELATIONAL
0148   04EF C0 00 00      cmp b, 0
0149   04F2 C6 08 06      je _for4_exit
0150   04F5             _for4_block:
0151   04F5             ; for(j = 1; j <   40     +-1; j++){ 
0152   04F5             _for5_init:
0153   04F5 FA FD FF      lea d, [bp + -3] ; $j
0154   04F8 DA            push d
0155   04F9 FD 2E 01 00   mov32 cb, $00000001
0155   04FD 00 00 
0156   04FF E7            pop d
0157   0500 FD 43         mov [d], b
0158   0502             _for5_cond:
0159   0502 FA FD FF      lea d, [bp + -3] ; $j
0160   0505 2A            mov b, [d]
0161   0506 38 00 00      mov c, 0
0162   0509             ; --- START RELATIONAL
0163   0509 D7            push a
0164   050A 11            mov a, b
0165   050B FD 2E 28 00   mov32 cb, $00000028
0165   050F 00 00 
0166   0511             ; --- START TERMS
0167   0511 D7            push a
0168   0512 11            mov a, b
0169   0513 FD 2E FF FF   mov32 cb, $ffffffff
0169   0517 FF FF 
0170   0519 56            add b, a
0171   051A E4            pop a
0172   051B             ; --- END TERMS
0173   051B B0            cmp a, b
0174   051C FD 73         slt ; < (signed)
0175   051E E4            pop a
0176   051F             ; --- END RELATIONAL
0177   051F C0 00 00      cmp b, 0
0178   0522 C6 F5 05      je _for5_exit
0179   0525             _for5_block:
0180   0525             ; n = neighbours(i, j); 
0181   0525 FA FB FF      lea d, [bp + -5] ; $n
0182   0528 DA            push d
0183   0529             ; --- START FUNCTION CALL
0184   0529 FA FD FF      lea d, [bp + -3] ; $j
0185   052C 2A            mov b, [d]
0186   052D 38 00 00      mov c, 0
0187   0530 FD AB         swp b
0188   0532 D8            push b
0189   0533 FA FF FF      lea d, [bp + -1] ; $i
0190   0536 2A            mov b, [d]
0191   0537 38 00 00      mov c, 0
0192   053A FD AB         swp b
0193   053C D8            push b
0194   053D 07 19 08      call neighbours
0195   0540 51 04 00      add sp, 4
0196   0543             ; --- END FUNCTION CALL
0197   0543 E7            pop d
0198   0544 FD 43         mov [d], b
0199   0546             ; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0200   0546             _if6_cond:
0201   0546 FA FB FF      lea d, [bp + -5] ; $n
0202   0549 2A            mov b, [d]
0203   054A 38 00 00      mov c, 0
0204   054D             ; --- START RELATIONAL
0205   054D D7            push a
0206   054E 11            mov a, b
0207   054F FD 2E 02 00   mov32 cb, $00000002
0207   0553 00 00 
0208   0555 B0            cmp a, b
0209   0556 FD 73         slt ; < (signed)
0210   0558 E4            pop a
0211   0559             ; --- END RELATIONAL
0212   0559             ; --- START LOGICAL OR
0213   0559 D7            push a
0214   055A 11            mov a, b
0215   055B FA FB FF      lea d, [bp + -5] ; $n
0216   055E 2A            mov b, [d]
0217   055F 38 00 00      mov c, 0
0218   0562             ; --- START RELATIONAL
0219   0562 D7            push a
0220   0563 11            mov a, b
0221   0564 FD 2E 03 00   mov32 cb, $00000003
0221   0568 00 00 
0222   056A B0            cmp a, b
0223   056B FD 7F         sgt ; >
0224   056D E4            pop a
0225   056E             ; --- END RELATIONAL
0226   056E FD A8         sor a, b ; ||
0227   0570 E4            pop a
0228   0571             ; --- END LOGICAL OR
0229   0571 C0 00 00      cmp b, 0
0230   0574 C6 A0 05      je _if6_else
0231   0577             _if6_TRUE:
0232   0577             ; nextState[i][j] = ' '; 
0233   0577 3B 20 14      mov d, _nextState_data ; $nextState
0234   057A D7            push a
0235   057B DA            push d
0236   057C FA FF FF      lea d, [bp + -1] ; $i
0237   057F 2A            mov b, [d]
0238   0580 38 00 00      mov c, 0
0239   0583 E7            pop d
0240   0584 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0241   0588 DA            push d
0242   0589 FA FD FF      lea d, [bp + -3] ; $j
0243   058C 2A            mov b, [d]
0244   058D 38 00 00      mov c, 0
0245   0590 E7            pop d
0246   0591 5A            add d, b
0247   0592 E4            pop a
0248   0593 DA            push d
0249   0594 FD 2E 20 00   mov32 cb, $00000020
0249   0598 00 00 
0250   059A E7            pop d
0251   059B FD 3E         mov [d], bl
0252   059D 0A E2 05      jmp _if6_exit
0253   05A0             _if6_else:
0254   05A0             ; if(n == 3) nextState[i][j] = '@'; 
0255   05A0             _if7_cond:
0256   05A0 FA FB FF      lea d, [bp + -5] ; $n
0257   05A3 2A            mov b, [d]
0258   05A4 38 00 00      mov c, 0
0259   05A7             ; --- START RELATIONAL
0260   05A7 D7            push a
0261   05A8 11            mov a, b
0262   05A9 FD 2E 03 00   mov32 cb, $00000003
0262   05AD 00 00 
0263   05AF B0            cmp a, b
0264   05B0 FD 71         seq ; ==
0265   05B2 E4            pop a
0266   05B3             ; --- END RELATIONAL
0267   05B3 C0 00 00      cmp b, 0
0268   05B6 C6 E2 05      je _if7_exit
0269   05B9             _if7_TRUE:
0270   05B9             ; nextState[i][j] = '@'; 
0271   05B9 3B 20 14      mov d, _nextState_data ; $nextState
0272   05BC D7            push a
0273   05BD DA            push d
0274   05BE FA FF FF      lea d, [bp + -1] ; $i
0275   05C1 2A            mov b, [d]
0276   05C2 38 00 00      mov c, 0
0277   05C5 E7            pop d
0278   05C6 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0279   05CA DA            push d
0280   05CB FA FD FF      lea d, [bp + -3] ; $j
0281   05CE 2A            mov b, [d]
0282   05CF 38 00 00      mov c, 0
0283   05D2 E7            pop d
0284   05D3 5A            add d, b
0285   05D4 E4            pop a
0286   05D5 DA            push d
0287   05D6 FD 2E 40 00   mov32 cb, $00000040
0287   05DA 00 00 
0288   05DC E7            pop d
0289   05DD FD 3E         mov [d], bl
0290   05DF 0A E2 05      jmp _if7_exit
0291   05E2             _if7_exit:
0292   05E2             _if6_exit:
0293   05E2             _for5_update:
0294   05E2 FA FD FF      lea d, [bp + -3] ; $j
0295   05E5 2A            mov b, [d]
0296   05E6 38 00 00      mov c, 0
0297   05E9 11            mov a, b
0298   05EA FD 77         inc b
0299   05EC FA FD FF      lea d, [bp + -3] ; $j
0300   05EF FD 43         mov [d], b
0301   05F1 27            mov b, a
0302   05F2 0A 02 05      jmp _for5_cond
0303   05F5             _for5_exit:
0304   05F5             _for4_update:
0305   05F5 FA FF FF      lea d, [bp + -1] ; $i
0306   05F8 2A            mov b, [d]
0307   05F9 38 00 00      mov c, 0
0308   05FC 11            mov a, b
0309   05FD FD 77         inc b
0310   05FF FA FF FF      lea d, [bp + -1] ; $i
0311   0602 FD 43         mov [d], b
0312   0604 27            mov b, a
0313   0605 0A D2 04      jmp _for4_cond
0314   0608             _for4_exit:
0315   0608             ; for(i = 1; i <  30      +-1; i++){ 
0316   0608             _for8_init:
0317   0608 FA FF FF      lea d, [bp + -1] ; $i
0318   060B DA            push d
0319   060C FD 2E 01 00   mov32 cb, $00000001
0319   0610 00 00 
0320   0612 E7            pop d
0321   0613 FD 43         mov [d], b
0322   0615             _for8_cond:
0323   0615 FA FF FF      lea d, [bp + -1] ; $i
0324   0618 2A            mov b, [d]
0325   0619 38 00 00      mov c, 0
0326   061C             ; --- START RELATIONAL
0327   061C D7            push a
0328   061D 11            mov a, b
0329   061E FD 2E 1E 00   mov32 cb, $0000001e
0329   0622 00 00 
0330   0624             ; --- START TERMS
0331   0624 D7            push a
0332   0625 11            mov a, b
0333   0626 FD 2E FF FF   mov32 cb, $ffffffff
0333   062A FF FF 
0334   062C 56            add b, a
0335   062D E4            pop a
0336   062E             ; --- END TERMS
0337   062E B0            cmp a, b
0338   062F FD 73         slt ; < (signed)
0339   0631 E4            pop a
0340   0632             ; --- END RELATIONAL
0341   0632 C0 00 00      cmp b, 0
0342   0635 C6 D0 06      je _for8_exit
0343   0638             _for8_block:
0344   0638             ; for(j = 1; j <   40     +-1; j++){ 
0345   0638             _for9_init:
0346   0638 FA FD FF      lea d, [bp + -3] ; $j
0347   063B DA            push d
0348   063C FD 2E 01 00   mov32 cb, $00000001
0348   0640 00 00 
0349   0642 E7            pop d
0350   0643 FD 43         mov [d], b
0351   0645             _for9_cond:
0352   0645 FA FD FF      lea d, [bp + -3] ; $j
0353   0648 2A            mov b, [d]
0354   0649 38 00 00      mov c, 0
0355   064C             ; --- START RELATIONAL
0356   064C D7            push a
0357   064D 11            mov a, b
0358   064E FD 2E 28 00   mov32 cb, $00000028
0358   0652 00 00 
0359   0654             ; --- START TERMS
0360   0654 D7            push a
0361   0655 11            mov a, b
0362   0656 FD 2E FF FF   mov32 cb, $ffffffff
0362   065A FF FF 
0363   065C 56            add b, a
0364   065D E4            pop a
0365   065E             ; --- END TERMS
0366   065E B0            cmp a, b
0367   065F FD 73         slt ; < (signed)
0368   0661 E4            pop a
0369   0662             ; --- END RELATIONAL
0370   0662 C0 00 00      cmp b, 0
0371   0665 C6 BD 06      je _for9_exit
0372   0668             _for9_block:
0373   0668             ; currState[i][j] = nextState[i][j]; 
0374   0668 3B D0 18      mov d, _currState_data ; $currState
0375   066B D7            push a
0376   066C DA            push d
0377   066D FA FF FF      lea d, [bp + -1] ; $i
0378   0670 2A            mov b, [d]
0379   0671 38 00 00      mov c, 0
0380   0674 E7            pop d
0381   0675 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0382   0679 DA            push d
0383   067A FA FD FF      lea d, [bp + -3] ; $j
0384   067D 2A            mov b, [d]
0385   067E 38 00 00      mov c, 0
0386   0681 E7            pop d
0387   0682 5A            add d, b
0388   0683 E4            pop a
0389   0684 DA            push d
0390   0685 3B 20 14      mov d, _nextState_data ; $nextState
0391   0688 D7            push a
0392   0689 DA            push d
0393   068A FA FF FF      lea d, [bp + -1] ; $i
0394   068D 2A            mov b, [d]
0395   068E 38 00 00      mov c, 0
0396   0691 E7            pop d
0397   0692 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0398   0696 DA            push d
0399   0697 FA FD FF      lea d, [bp + -3] ; $j
0400   069A 2A            mov b, [d]
0401   069B 38 00 00      mov c, 0
0402   069E E7            pop d
0403   069F 5A            add d, b
0404   06A0 E4            pop a
0405   06A1 32            mov bl, [d]
0406   06A2 A7 00         mov bh, 0
0407   06A4 38 00 00      mov c, 0
0408   06A7 E7            pop d
0409   06A8 FD 3E         mov [d], bl
0410   06AA             _for9_update:
0411   06AA FA FD FF      lea d, [bp + -3] ; $j
0412   06AD 2A            mov b, [d]
0413   06AE 38 00 00      mov c, 0
0414   06B1 11            mov a, b
0415   06B2 FD 77         inc b
0416   06B4 FA FD FF      lea d, [bp + -3] ; $j
0417   06B7 FD 43         mov [d], b
0418   06B9 27            mov b, a
0419   06BA 0A 45 06      jmp _for9_cond
0420   06BD             _for9_exit:
0421   06BD             _for8_update:
0422   06BD FA FF FF      lea d, [bp + -1] ; $i
0423   06C0 2A            mov b, [d]
0424   06C1 38 00 00      mov c, 0
0425   06C4 11            mov a, b
0426   06C5 FD 77         inc b
0427   06C7 FA FF FF      lea d, [bp + -1] ; $i
0428   06CA FD 43         mov [d], b
0429   06CC 27            mov b, a
0430   06CD 0A 15 06      jmp _for8_cond
0431   06D0             _for8_exit:
0432   06D0             ; printf(clear); 
0433   06D0             ; --- START FUNCTION CALL
0434   06D0 3B 14 14      mov d, _clear_data ; $clear
0435   06D3 2D            mov b, d
0436   06D4 38 00 00      mov c, 0
0437   06D7 FD AB         swp b
0438   06D9 D8            push b
0439   06DA 07 E5 0A      call printf
0440   06DD 51 02 00      add sp, 2
0441   06E0             ; --- END FUNCTION CALL
0442   06E0             ; show(); 
0443   06E0             ; --- START FUNCTION CALL
0444   06E0 07 F4 06      call show
0445   06E3             ; puts("\n\rPress CTRL+C to quit.\n\r"); 
0446   06E3             ; --- START FUNCTION CALL
0447   06E3 26 81 1D      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0448   06E6 FD AB         swp b
0449   06E8 D8            push b
0450   06E9 07 F6 13      call puts
0451   06EC 51 02 00      add sp, 2
0452   06EF             ; --- END FUNCTION CALL
0453   06EF             _for3_update:
0454   06EF 0A C5 04      jmp _for3_cond
0455   06F2             _for3_exit:
0456   06F2 05 0B         syscall sys_terminate_proc
0457   06F4             
0458   06F4             show:
0459   06F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0460   06F7             ; int i, j; 
0461   06F7 52 02 00      sub sp, 2
0462   06FA 52 02 00      sub sp, 2
0463   06FD             ; for(i = 0; i <  30      ; i++){ 
0464   06FD             _for10_init:
0465   06FD FA FF FF      lea d, [bp + -1] ; $i
0466   0700 DA            push d
0467   0701 FD 2E 00 00   mov32 cb, $00000000
0467   0705 00 00 
0468   0707 E7            pop d
0469   0708 FD 43         mov [d], b
0470   070A             _for10_cond:
0471   070A FA FF FF      lea d, [bp + -1] ; $i
0472   070D 2A            mov b, [d]
0473   070E 38 00 00      mov c, 0
0474   0711             ; --- START RELATIONAL
0475   0711 D7            push a
0476   0712 11            mov a, b
0477   0713 FD 2E 1E 00   mov32 cb, $0000001e
0477   0717 00 00 
0478   0719 B0            cmp a, b
0479   071A FD 73         slt ; < (signed)
0480   071C E4            pop a
0481   071D             ; --- END RELATIONAL
0482   071D C0 00 00      cmp b, 0
0483   0720 C6 CB 07      je _for10_exit
0484   0723             _for10_block:
0485   0723             ; for(j = 0; j <   40     ; j++){ 
0486   0723             _for11_init:
0487   0723 FA FD FF      lea d, [bp + -3] ; $j
0488   0726 DA            push d
0489   0727 FD 2E 00 00   mov32 cb, $00000000
0489   072B 00 00 
0490   072D E7            pop d
0491   072E FD 43         mov [d], b
0492   0730             _for11_cond:
0493   0730 FA FD FF      lea d, [bp + -3] ; $j
0494   0733 2A            mov b, [d]
0495   0734 38 00 00      mov c, 0
0496   0737             ; --- START RELATIONAL
0497   0737 D7            push a
0498   0738 11            mov a, b
0499   0739 FD 2E 28 00   mov32 cb, $00000028
0499   073D 00 00 
0500   073F B0            cmp a, b
0501   0740 FD 73         slt ; < (signed)
0502   0742 E4            pop a
0503   0743             ; --- END RELATIONAL
0504   0743 C0 00 00      cmp b, 0
0505   0746 C6 AB 07      je _for11_exit
0506   0749             _for11_block:
0507   0749             ; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
0508   0749             _ternary12_cond:
0509   0749 3B D0 18      mov d, _currState_data ; $currState
0510   074C D7            push a
0511   074D DA            push d
0512   074E FA FF FF      lea d, [bp + -1] ; $i
0513   0751 2A            mov b, [d]
0514   0752 38 00 00      mov c, 0
0515   0755 E7            pop d
0516   0756 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0517   075A DA            push d
0518   075B FA FD FF      lea d, [bp + -3] ; $j
0519   075E 2A            mov b, [d]
0520   075F 38 00 00      mov c, 0
0521   0762 E7            pop d
0522   0763 5A            add d, b
0523   0764 E4            pop a
0524   0765 32            mov bl, [d]
0525   0766 A7 00         mov bh, 0
0526   0768 38 00 00      mov c, 0
0527   076B             ; --- START RELATIONAL
0528   076B D7            push a
0529   076C 11            mov a, b
0530   076D FD 2E 40 00   mov32 cb, $00000040
0530   0771 00 00 
0531   0773 B0            cmp a, b
0532   0774 FD 71         seq ; ==
0533   0776 E4            pop a
0534   0777             ; --- END RELATIONAL
0535   0777 C0 00 00      cmp b, 0
0536   077A C6 8C 07      je _ternary12_FALSE
0537   077D             _ternary12_TRUE:
0538   077D             ; --- START FUNCTION CALL
0539   077D 26 9B 1D      mov b, _s1 ; "@ "
0540   0780 FD AB         swp b
0541   0782 D8            push b
0542   0783 07 E5 0A      call printf
0543   0786 51 02 00      add sp, 2
0544   0789             ; --- END FUNCTION CALL
0545   0789 0A 98 07      jmp _ternary12_exit
0546   078C             _ternary12_FALSE:
0547   078C             ; --- START FUNCTION CALL
0548   078C 26 9E 1D      mov b, _s2 ; ". "
0549   078F FD AB         swp b
0550   0791 D8            push b
0551   0792 07 E5 0A      call printf
0552   0795 51 02 00      add sp, 2
0553   0798             ; --- END FUNCTION CALL
0554   0798             _ternary12_exit:
0555   0798             _for11_update:
0556   0798 FA FD FF      lea d, [bp + -3] ; $j
0557   079B 2A            mov b, [d]
0558   079C 38 00 00      mov c, 0
0559   079F 11            mov a, b
0560   07A0 FD 77         inc b
0561   07A2 FA FD FF      lea d, [bp + -3] ; $j
0562   07A5 FD 43         mov [d], b
0563   07A7 27            mov b, a
0564   07A8 0A 30 07      jmp _for11_cond
0565   07AB             _for11_exit:
0566   07AB             ; putchar(10); 
0567   07AB             ; --- START FUNCTION CALL
0568   07AB FD 2E 0A 00   mov32 cb, $0000000a
0568   07AF 00 00 
0569   07B1 DD            push bl
0570   07B2 07 6A 0F      call putchar
0571   07B5 51 01 00      add sp, 1
0572   07B8             ; --- END FUNCTION CALL
0573   07B8             _for10_update:
0574   07B8 FA FF FF      lea d, [bp + -1] ; $i
0575   07BB 2A            mov b, [d]
0576   07BC 38 00 00      mov c, 0
0577   07BF 11            mov a, b
0578   07C0 FD 77         inc b
0579   07C2 FA FF FF      lea d, [bp + -1] ; $i
0580   07C5 FD 43         mov [d], b
0581   07C7 27            mov b, a
0582   07C8 0A 0A 07      jmp _for10_cond
0583   07CB             _for10_exit:
0584   07CB F9            leave
0585   07CC 09            ret
0586   07CD             
0587   07CD             alive:
0588   07CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0589   07D0             ; if(currState[i][j] == '@') return 1; 
0590   07D0             _if13_cond:
0591   07D0 3B D0 18      mov d, _currState_data ; $currState
0592   07D3 D7            push a
0593   07D4 DA            push d
0594   07D5 FA 05 00      lea d, [bp + 5] ; $i
0595   07D8 2A            mov b, [d]
0596   07D9 38 00 00      mov c, 0
0597   07DC E7            pop d
0598   07DD FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0599   07E1 DA            push d
0600   07E2 FA 07 00      lea d, [bp + 7] ; $j
0601   07E5 2A            mov b, [d]
0602   07E6 38 00 00      mov c, 0
0603   07E9 E7            pop d
0604   07EA 5A            add d, b
0605   07EB E4            pop a
0606   07EC 32            mov bl, [d]
0607   07ED A7 00         mov bh, 0
0608   07EF 38 00 00      mov c, 0
0609   07F2             ; --- START RELATIONAL
0610   07F2 D7            push a
0611   07F3 11            mov a, b
0612   07F4 FD 2E 40 00   mov32 cb, $00000040
0612   07F8 00 00 
0613   07FA B0            cmp a, b
0614   07FB FD 71         seq ; ==
0615   07FD E4            pop a
0616   07FE             ; --- END RELATIONAL
0617   07FE C0 00 00      cmp b, 0
0618   0801 C6 0F 08      je _if13_else
0619   0804             _if13_TRUE:
0620   0804             ; return 1; 
0621   0804 FD 2E 01 00   mov32 cb, $00000001
0621   0808 00 00 
0622   080A F9            leave
0623   080B 09            ret
0624   080C 0A 17 08      jmp _if13_exit
0625   080F             _if13_else:
0626   080F             ; return 0; 
0627   080F FD 2E 00 00   mov32 cb, $00000000
0627   0813 00 00 
0628   0815 F9            leave
0629   0816 09            ret
0630   0817             _if13_exit:
0631   0817 F9            leave
0632   0818 09            ret
0633   0819             
0634   0819             neighbours:
0635   0819 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0636   081C             ; int count; 
0637   081C 52 02 00      sub sp, 2
0638   081F             ; count = 0; 
0639   081F FA FF FF      lea d, [bp + -1] ; $count
0640   0822 DA            push d
0641   0823 FD 2E 00 00   mov32 cb, $00000000
0641   0827 00 00 
0642   0829 E7            pop d
0643   082A FD 43         mov [d], b
0644   082C             ; if(currState[i+-1][j] == '@')			count++; 
0645   082C             _if14_cond:
0646   082C 3B D0 18      mov d, _currState_data ; $currState
0647   082F D7            push a
0648   0830 DA            push d
0649   0831 FA 05 00      lea d, [bp + 5] ; $i
0650   0834 2A            mov b, [d]
0651   0835 38 00 00      mov c, 0
0652   0838             ; --- START TERMS
0653   0838 D7            push a
0654   0839 11            mov a, b
0655   083A FD 2E FF FF   mov32 cb, $ffffffff
0655   083E FF FF 
0656   0840 56            add b, a
0657   0841 E4            pop a
0658   0842             ; --- END TERMS
0659   0842 E7            pop d
0660   0843 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0661   0847 DA            push d
0662   0848 FA 07 00      lea d, [bp + 7] ; $j
0663   084B 2A            mov b, [d]
0664   084C 38 00 00      mov c, 0
0665   084F E7            pop d
0666   0850 5A            add d, b
0667   0851 E4            pop a
0668   0852 32            mov bl, [d]
0669   0853 A7 00         mov bh, 0
0670   0855 38 00 00      mov c, 0
0671   0858             ; --- START RELATIONAL
0672   0858 D7            push a
0673   0859 11            mov a, b
0674   085A FD 2E 40 00   mov32 cb, $00000040
0674   085E 00 00 
0675   0860 B0            cmp a, b
0676   0861 FD 71         seq ; ==
0677   0863 E4            pop a
0678   0864             ; --- END RELATIONAL
0679   0864 C0 00 00      cmp b, 0
0680   0867 C6 7D 08      je _if14_exit
0681   086A             _if14_TRUE:
0682   086A             ; count++; 
0683   086A FA FF FF      lea d, [bp + -1] ; $count
0684   086D 2A            mov b, [d]
0685   086E 38 00 00      mov c, 0
0686   0871 11            mov a, b
0687   0872 FD 77         inc b
0688   0874 FA FF FF      lea d, [bp + -1] ; $count
0689   0877 FD 43         mov [d], b
0690   0879 27            mov b, a
0691   087A 0A 7D 08      jmp _if14_exit
0692   087D             _if14_exit:
0693   087D             ; if(currState[i+-1][j+-1] == '@') 	count++; 
0694   087D             _if15_cond:
0695   087D 3B D0 18      mov d, _currState_data ; $currState
0696   0880 D7            push a
0697   0881 DA            push d
0698   0882 FA 05 00      lea d, [bp + 5] ; $i
0699   0885 2A            mov b, [d]
0700   0886 38 00 00      mov c, 0
0701   0889             ; --- START TERMS
0702   0889 D7            push a
0703   088A 11            mov a, b
0704   088B FD 2E FF FF   mov32 cb, $ffffffff
0704   088F FF FF 
0705   0891 56            add b, a
0706   0892 E4            pop a
0707   0893             ; --- END TERMS
0708   0893 E7            pop d
0709   0894 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0710   0898 DA            push d
0711   0899 FA 07 00      lea d, [bp + 7] ; $j
0712   089C 2A            mov b, [d]
0713   089D 38 00 00      mov c, 0
0714   08A0             ; --- START TERMS
0715   08A0 D7            push a
0716   08A1 11            mov a, b
0717   08A2 FD 2E FF FF   mov32 cb, $ffffffff
0717   08A6 FF FF 
0718   08A8 56            add b, a
0719   08A9 E4            pop a
0720   08AA             ; --- END TERMS
0721   08AA E7            pop d
0722   08AB 5A            add d, b
0723   08AC E4            pop a
0724   08AD 32            mov bl, [d]
0725   08AE A7 00         mov bh, 0
0726   08B0 38 00 00      mov c, 0
0727   08B3             ; --- START RELATIONAL
0728   08B3 D7            push a
0729   08B4 11            mov a, b
0730   08B5 FD 2E 40 00   mov32 cb, $00000040
0730   08B9 00 00 
0731   08BB B0            cmp a, b
0732   08BC FD 71         seq ; ==
0733   08BE E4            pop a
0734   08BF             ; --- END RELATIONAL
0735   08BF C0 00 00      cmp b, 0
0736   08C2 C6 D8 08      je _if15_exit
0737   08C5             _if15_TRUE:
0738   08C5             ; count++; 
0739   08C5 FA FF FF      lea d, [bp + -1] ; $count
0740   08C8 2A            mov b, [d]
0741   08C9 38 00 00      mov c, 0
0742   08CC 11            mov a, b
0743   08CD FD 77         inc b
0744   08CF FA FF FF      lea d, [bp + -1] ; $count
0745   08D2 FD 43         mov [d], b
0746   08D4 27            mov b, a
0747   08D5 0A D8 08      jmp _if15_exit
0748   08D8             _if15_exit:
0749   08D8             ; if(currState[i+-1][j+1] == '@') 	count++; 
0750   08D8             _if16_cond:
0751   08D8 3B D0 18      mov d, _currState_data ; $currState
0752   08DB D7            push a
0753   08DC DA            push d
0754   08DD FA 05 00      lea d, [bp + 5] ; $i
0755   08E0 2A            mov b, [d]
0756   08E1 38 00 00      mov c, 0
0757   08E4             ; --- START TERMS
0758   08E4 D7            push a
0759   08E5 11            mov a, b
0760   08E6 FD 2E FF FF   mov32 cb, $ffffffff
0760   08EA FF FF 
0761   08EC 56            add b, a
0762   08ED E4            pop a
0763   08EE             ; --- END TERMS
0764   08EE E7            pop d
0765   08EF FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0766   08F3 DA            push d
0767   08F4 FA 07 00      lea d, [bp + 7] ; $j
0768   08F7 2A            mov b, [d]
0769   08F8 38 00 00      mov c, 0
0770   08FB             ; --- START TERMS
0771   08FB D7            push a
0772   08FC 11            mov a, b
0773   08FD FD 2E 01 00   mov32 cb, $00000001
0773   0901 00 00 
0774   0903 56            add b, a
0775   0904 E4            pop a
0776   0905             ; --- END TERMS
0777   0905 E7            pop d
0778   0906 5A            add d, b
0779   0907 E4            pop a
0780   0908 32            mov bl, [d]
0781   0909 A7 00         mov bh, 0
0782   090B 38 00 00      mov c, 0
0783   090E             ; --- START RELATIONAL
0784   090E D7            push a
0785   090F 11            mov a, b
0786   0910 FD 2E 40 00   mov32 cb, $00000040
0786   0914 00 00 
0787   0916 B0            cmp a, b
0788   0917 FD 71         seq ; ==
0789   0919 E4            pop a
0790   091A             ; --- END RELATIONAL
0791   091A C0 00 00      cmp b, 0
0792   091D C6 33 09      je _if16_exit
0793   0920             _if16_TRUE:
0794   0920             ; count++; 
0795   0920 FA FF FF      lea d, [bp + -1] ; $count
0796   0923 2A            mov b, [d]
0797   0924 38 00 00      mov c, 0
0798   0927 11            mov a, b
0799   0928 FD 77         inc b
0800   092A FA FF FF      lea d, [bp + -1] ; $count
0801   092D FD 43         mov [d], b
0802   092F 27            mov b, a
0803   0930 0A 33 09      jmp _if16_exit
0804   0933             _if16_exit:
0805   0933             ; if(currState[i][j+-1] == '@') 		count++; 
0806   0933             _if17_cond:
0807   0933 3B D0 18      mov d, _currState_data ; $currState
0808   0936 D7            push a
0809   0937 DA            push d
0810   0938 FA 05 00      lea d, [bp + 5] ; $i
0811   093B 2A            mov b, [d]
0812   093C 38 00 00      mov c, 0
0813   093F E7            pop d
0814   0940 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0815   0944 DA            push d
0816   0945 FA 07 00      lea d, [bp + 7] ; $j
0817   0948 2A            mov b, [d]
0818   0949 38 00 00      mov c, 0
0819   094C             ; --- START TERMS
0820   094C D7            push a
0821   094D 11            mov a, b
0822   094E FD 2E FF FF   mov32 cb, $ffffffff
0822   0952 FF FF 
0823   0954 56            add b, a
0824   0955 E4            pop a
0825   0956             ; --- END TERMS
0826   0956 E7            pop d
0827   0957 5A            add d, b
0828   0958 E4            pop a
0829   0959 32            mov bl, [d]
0830   095A A7 00         mov bh, 0
0831   095C 38 00 00      mov c, 0
0832   095F             ; --- START RELATIONAL
0833   095F D7            push a
0834   0960 11            mov a, b
0835   0961 FD 2E 40 00   mov32 cb, $00000040
0835   0965 00 00 
0836   0967 B0            cmp a, b
0837   0968 FD 71         seq ; ==
0838   096A E4            pop a
0839   096B             ; --- END RELATIONAL
0840   096B C0 00 00      cmp b, 0
0841   096E C6 84 09      je _if17_exit
0842   0971             _if17_TRUE:
0843   0971             ; count++; 
0844   0971 FA FF FF      lea d, [bp + -1] ; $count
0845   0974 2A            mov b, [d]
0846   0975 38 00 00      mov c, 0
0847   0978 11            mov a, b
0848   0979 FD 77         inc b
0849   097B FA FF FF      lea d, [bp + -1] ; $count
0850   097E FD 43         mov [d], b
0851   0980 27            mov b, a
0852   0981 0A 84 09      jmp _if17_exit
0853   0984             _if17_exit:
0854   0984             ; if(currState[i][j+1] == '@') 			count++; 
0855   0984             _if18_cond:
0856   0984 3B D0 18      mov d, _currState_data ; $currState
0857   0987 D7            push a
0858   0988 DA            push d
0859   0989 FA 05 00      lea d, [bp + 5] ; $i
0860   098C 2A            mov b, [d]
0861   098D 38 00 00      mov c, 0
0862   0990 E7            pop d
0863   0991 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0864   0995 DA            push d
0865   0996 FA 07 00      lea d, [bp + 7] ; $j
0866   0999 2A            mov b, [d]
0867   099A 38 00 00      mov c, 0
0868   099D             ; --- START TERMS
0869   099D D7            push a
0870   099E 11            mov a, b
0871   099F FD 2E 01 00   mov32 cb, $00000001
0871   09A3 00 00 
0872   09A5 56            add b, a
0873   09A6 E4            pop a
0874   09A7             ; --- END TERMS
0875   09A7 E7            pop d
0876   09A8 5A            add d, b
0877   09A9 E4            pop a
0878   09AA 32            mov bl, [d]
0879   09AB A7 00         mov bh, 0
0880   09AD 38 00 00      mov c, 0
0881   09B0             ; --- START RELATIONAL
0882   09B0 D7            push a
0883   09B1 11            mov a, b
0884   09B2 FD 2E 40 00   mov32 cb, $00000040
0884   09B6 00 00 
0885   09B8 B0            cmp a, b
0886   09B9 FD 71         seq ; ==
0887   09BB E4            pop a
0888   09BC             ; --- END RELATIONAL
0889   09BC C0 00 00      cmp b, 0
0890   09BF C6 D5 09      je _if18_exit
0891   09C2             _if18_TRUE:
0892   09C2             ; count++; 
0893   09C2 FA FF FF      lea d, [bp + -1] ; $count
0894   09C5 2A            mov b, [d]
0895   09C6 38 00 00      mov c, 0
0896   09C9 11            mov a, b
0897   09CA FD 77         inc b
0898   09CC FA FF FF      lea d, [bp + -1] ; $count
0899   09CF FD 43         mov [d], b
0900   09D1 27            mov b, a
0901   09D2 0A D5 09      jmp _if18_exit
0902   09D5             _if18_exit:
0903   09D5             ; if(currState[i+1][j+-1] == '@') 	count++; 
0904   09D5             _if19_cond:
0905   09D5 3B D0 18      mov d, _currState_data ; $currState
0906   09D8 D7            push a
0907   09D9 DA            push d
0908   09DA FA 05 00      lea d, [bp + 5] ; $i
0909   09DD 2A            mov b, [d]
0910   09DE 38 00 00      mov c, 0
0911   09E1             ; --- START TERMS
0912   09E1 D7            push a
0913   09E2 11            mov a, b
0914   09E3 FD 2E 01 00   mov32 cb, $00000001
0914   09E7 00 00 
0915   09E9 56            add b, a
0916   09EA E4            pop a
0917   09EB             ; --- END TERMS
0918   09EB E7            pop d
0919   09EC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0920   09F0 DA            push d
0921   09F1 FA 07 00      lea d, [bp + 7] ; $j
0922   09F4 2A            mov b, [d]
0923   09F5 38 00 00      mov c, 0
0924   09F8             ; --- START TERMS
0925   09F8 D7            push a
0926   09F9 11            mov a, b
0927   09FA FD 2E FF FF   mov32 cb, $ffffffff
0927   09FE FF FF 
0928   0A00 56            add b, a
0929   0A01 E4            pop a
0930   0A02             ; --- END TERMS
0931   0A02 E7            pop d
0932   0A03 5A            add d, b
0933   0A04 E4            pop a
0934   0A05 32            mov bl, [d]
0935   0A06 A7 00         mov bh, 0
0936   0A08 38 00 00      mov c, 0
0937   0A0B             ; --- START RELATIONAL
0938   0A0B D7            push a
0939   0A0C 11            mov a, b
0940   0A0D FD 2E 40 00   mov32 cb, $00000040
0940   0A11 00 00 
0941   0A13 B0            cmp a, b
0942   0A14 FD 71         seq ; ==
0943   0A16 E4            pop a
0944   0A17             ; --- END RELATIONAL
0945   0A17 C0 00 00      cmp b, 0
0946   0A1A C6 30 0A      je _if19_exit
0947   0A1D             _if19_TRUE:
0948   0A1D             ; count++; 
0949   0A1D FA FF FF      lea d, [bp + -1] ; $count
0950   0A20 2A            mov b, [d]
0951   0A21 38 00 00      mov c, 0
0952   0A24 11            mov a, b
0953   0A25 FD 77         inc b
0954   0A27 FA FF FF      lea d, [bp + -1] ; $count
0955   0A2A FD 43         mov [d], b
0956   0A2C 27            mov b, a
0957   0A2D 0A 30 0A      jmp _if19_exit
0958   0A30             _if19_exit:
0959   0A30             ; if(currState[i+1][j] == '@') 			count++; 
0960   0A30             _if20_cond:
0961   0A30 3B D0 18      mov d, _currState_data ; $currState
0962   0A33 D7            push a
0963   0A34 DA            push d
0964   0A35 FA 05 00      lea d, [bp + 5] ; $i
0965   0A38 2A            mov b, [d]
0966   0A39 38 00 00      mov c, 0
0967   0A3C             ; --- START TERMS
0968   0A3C D7            push a
0969   0A3D 11            mov a, b
0970   0A3E FD 2E 01 00   mov32 cb, $00000001
0970   0A42 00 00 
0971   0A44 56            add b, a
0972   0A45 E4            pop a
0973   0A46             ; --- END TERMS
0974   0A46 E7            pop d
0975   0A47 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0976   0A4B DA            push d
0977   0A4C FA 07 00      lea d, [bp + 7] ; $j
0978   0A4F 2A            mov b, [d]
0979   0A50 38 00 00      mov c, 0
0980   0A53 E7            pop d
0981   0A54 5A            add d, b
0982   0A55 E4            pop a
0983   0A56 32            mov bl, [d]
0984   0A57 A7 00         mov bh, 0
0985   0A59 38 00 00      mov c, 0
0986   0A5C             ; --- START RELATIONAL
0987   0A5C D7            push a
0988   0A5D 11            mov a, b
0989   0A5E FD 2E 40 00   mov32 cb, $00000040
0989   0A62 00 00 
0990   0A64 B0            cmp a, b
0991   0A65 FD 71         seq ; ==
0992   0A67 E4            pop a
0993   0A68             ; --- END RELATIONAL
0994   0A68 C0 00 00      cmp b, 0
0995   0A6B C6 81 0A      je _if20_exit
0996   0A6E             _if20_TRUE:
0997   0A6E             ; count++; 
0998   0A6E FA FF FF      lea d, [bp + -1] ; $count
0999   0A71 2A            mov b, [d]
1000   0A72 38 00 00      mov c, 0
1001   0A75 11            mov a, b
1002   0A76 FD 77         inc b
1003   0A78 FA FF FF      lea d, [bp + -1] ; $count
1004   0A7B FD 43         mov [d], b
1005   0A7D 27            mov b, a
1006   0A7E 0A 81 0A      jmp _if20_exit
1007   0A81             _if20_exit:
1008   0A81             ; if(currState[i+1][j+1] == '@') 		count++; 
1009   0A81             _if21_cond:
1010   0A81 3B D0 18      mov d, _currState_data ; $currState
1011   0A84 D7            push a
1012   0A85 DA            push d
1013   0A86 FA 05 00      lea d, [bp + 5] ; $i
1014   0A89 2A            mov b, [d]
1015   0A8A 38 00 00      mov c, 0
1016   0A8D             ; --- START TERMS
1017   0A8D D7            push a
1018   0A8E 11            mov a, b
1019   0A8F FD 2E 01 00   mov32 cb, $00000001
1019   0A93 00 00 
1020   0A95 56            add b, a
1021   0A96 E4            pop a
1022   0A97             ; --- END TERMS
1023   0A97 E7            pop d
1024   0A98 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
1025   0A9C DA            push d
1026   0A9D FA 07 00      lea d, [bp + 7] ; $j
1027   0AA0 2A            mov b, [d]
1028   0AA1 38 00 00      mov c, 0
1029   0AA4             ; --- START TERMS
1030   0AA4 D7            push a
1031   0AA5 11            mov a, b
1032   0AA6 FD 2E 01 00   mov32 cb, $00000001
1032   0AAA 00 00 
1033   0AAC 56            add b, a
1034   0AAD E4            pop a
1035   0AAE             ; --- END TERMS
1036   0AAE E7            pop d
1037   0AAF 5A            add d, b
1038   0AB0 E4            pop a
1039   0AB1 32            mov bl, [d]
1040   0AB2 A7 00         mov bh, 0
1041   0AB4 38 00 00      mov c, 0
1042   0AB7             ; --- START RELATIONAL
1043   0AB7 D7            push a
1044   0AB8 11            mov a, b
1045   0AB9 FD 2E 40 00   mov32 cb, $00000040
1045   0ABD 00 00 
1046   0ABF B0            cmp a, b
1047   0AC0 FD 71         seq ; ==
1048   0AC2 E4            pop a
1049   0AC3             ; --- END RELATIONAL
1050   0AC3 C0 00 00      cmp b, 0
1051   0AC6 C6 DC 0A      je _if21_exit
1052   0AC9             _if21_TRUE:
1053   0AC9             ; count++; 
1054   0AC9 FA FF FF      lea d, [bp + -1] ; $count
1055   0ACC 2A            mov b, [d]
1056   0ACD 38 00 00      mov c, 0
1057   0AD0 11            mov a, b
1058   0AD1 FD 77         inc b
1059   0AD3 FA FF FF      lea d, [bp + -1] ; $count
1060   0AD6 FD 43         mov [d], b
1061   0AD8 27            mov b, a
1062   0AD9 0A DC 0A      jmp _if21_exit
1063   0ADC             _if21_exit:
1064   0ADC             ; return count; 
1065   0ADC FA FF FF      lea d, [bp + -1] ; $count
1066   0ADF 2A            mov b, [d]
1067   0AE0 38 00 00      mov c, 0
1068   0AE3 F9            leave
1069   0AE4 09            ret
1070   0AE5             
1071   0AE5             printf:
1072   0AE5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1073   0AE8             ; char *p, *format_p; 
1074   0AE8 52 02 00      sub sp, 2
1075   0AEB 52 02 00      sub sp, 2
1076   0AEE             ; format_p = format; 
1077   0AEE FA FD FF      lea d, [bp + -3] ; $format_p
1078   0AF1 DA            push d
1079   0AF2 FA 05 00      lea d, [bp + 5] ; $format
1080   0AF5 2A            mov b, [d]
1081   0AF6 38 00 00      mov c, 0
1082   0AF9 E7            pop d
1083   0AFA FD 43         mov [d], b
1084   0AFC             ; p = &format + 2; 
1085   0AFC FA FF FF      lea d, [bp + -1] ; $p
1086   0AFF DA            push d
1087   0B00 FA 05 00      lea d, [bp + 5] ; $format
1088   0B03 2D            mov b, d
1089   0B04             ; --- START TERMS
1090   0B04 D7            push a
1091   0B05 11            mov a, b
1092   0B06 FD 2E 02 00   mov32 cb, $00000002
1092   0B0A 00 00 
1093   0B0C 56            add b, a
1094   0B0D E4            pop a
1095   0B0E             ; --- END TERMS
1096   0B0E E7            pop d
1097   0B0F FD 43         mov [d], b
1098   0B11             ; for(;;){ 
1099   0B11             _for22_init:
1100   0B11             _for22_cond:
1101   0B11             _for22_block:
1102   0B11             ; if(!*format_p) break; 
1103   0B11             _if23_cond:
1104   0B11 FA FD FF      lea d, [bp + -3] ; $format_p
1105   0B14 2A            mov b, [d]
1106   0B15 38 00 00      mov c, 0
1107   0B18 74            mov d, b
1108   0B19 32            mov bl, [d]
1109   0B1A A7 00         mov bh, 0
1110   0B1C 38 00 00      mov c, 0
1111   0B1F C0 00 00      cmp b, 0
1112   0B22 FD 71         seq ; !
1113   0B24 C0 00 00      cmp b, 0
1114   0B27 C6 30 0B      je _if23_else
1115   0B2A             _if23_TRUE:
1116   0B2A             ; break; 
1117   0B2A 0A E0 0D      jmp _for22_exit ; for break
1118   0B2D 0A DD 0D      jmp _if23_exit
1119   0B30             _if23_else:
1120   0B30             ; if(*format_p == '%'){ 
1121   0B30             _if24_cond:
1122   0B30 FA FD FF      lea d, [bp + -3] ; $format_p
1123   0B33 2A            mov b, [d]
1124   0B34 38 00 00      mov c, 0
1125   0B37 74            mov d, b
1126   0B38 32            mov bl, [d]
1127   0B39 A7 00         mov bh, 0
1128   0B3B 38 00 00      mov c, 0
1129   0B3E             ; --- START RELATIONAL
1130   0B3E D7            push a
1131   0B3F 11            mov a, b
1132   0B40 FD 2E 25 00   mov32 cb, $00000025
1132   0B44 00 00 
1133   0B46 B0            cmp a, b
1134   0B47 FD 71         seq ; ==
1135   0B49 E4            pop a
1136   0B4A             ; --- END RELATIONAL
1137   0B4A C0 00 00      cmp b, 0
1138   0B4D C6 B8 0D      je _if24_else
1139   0B50             _if24_TRUE:
1140   0B50             ; format_p++; 
1141   0B50 FA FD FF      lea d, [bp + -3] ; $format_p
1142   0B53 2A            mov b, [d]
1143   0B54 38 00 00      mov c, 0
1144   0B57 FD 77         inc b
1145   0B59 FA FD FF      lea d, [bp + -3] ; $format_p
1146   0B5C FD 43         mov [d], b
1147   0B5E FD 7D         dec b
1148   0B60             ; switch(*format_p){ 
1149   0B60             _switch25_expr:
1150   0B60 FA FD FF      lea d, [bp + -3] ; $format_p
1151   0B63 2A            mov b, [d]
1152   0B64 38 00 00      mov c, 0
1153   0B67 74            mov d, b
1154   0B68 32            mov bl, [d]
1155   0B69 A7 00         mov bh, 0
1156   0B6B 38 00 00      mov c, 0
1157   0B6E             _switch25_comparisons:
1158   0B6E C1 6C         cmp bl, $6c
1159   0B70 C6 9C 0B      je _switch25_case0
1160   0B73 C1 4C         cmp bl, $4c
1161   0B75 C6 9C 0B      je _switch25_case1
1162   0B78 C1 64         cmp bl, $64
1163   0B7A C6 AC 0C      je _switch25_case2
1164   0B7D C1 69         cmp bl, $69
1165   0B7F C6 AC 0C      je _switch25_case3
1166   0B82 C1 75         cmp bl, $75
1167   0B84 C6 DC 0C      je _switch25_case4
1168   0B87 C1 78         cmp bl, $78
1169   0B89 C6 0C 0D      je _switch25_case5
1170   0B8C C1 63         cmp bl, $63
1171   0B8E C6 3C 0D      je _switch25_case6
1172   0B91 C1 73         cmp bl, $73
1173   0B93 C6 6C 0D      je _switch25_case7
1174   0B96 0A 99 0D      jmp _switch25_default
1175   0B99 0A A5 0D      jmp _switch25_exit
1176   0B9C             _switch25_case0:
1177   0B9C             _switch25_case1:
1178   0B9C             ; format_p++; 
1179   0B9C FA FD FF      lea d, [bp + -3] ; $format_p
1180   0B9F 2A            mov b, [d]
1181   0BA0 38 00 00      mov c, 0
1182   0BA3 FD 77         inc b
1183   0BA5 FA FD FF      lea d, [bp + -3] ; $format_p
1184   0BA8 FD 43         mov [d], b
1185   0BAA FD 7D         dec b
1186   0BAC             ; if(*format_p == 'd' || *format_p == 'i') 
1187   0BAC             _if26_cond:
1188   0BAC FA FD FF      lea d, [bp + -3] ; $format_p
1189   0BAF 2A            mov b, [d]
1190   0BB0 38 00 00      mov c, 0
1191   0BB3 74            mov d, b
1192   0BB4 32            mov bl, [d]
1193   0BB5 A7 00         mov bh, 0
1194   0BB7 38 00 00      mov c, 0
1195   0BBA             ; --- START RELATIONAL
1196   0BBA D7            push a
1197   0BBB 11            mov a, b
1198   0BBC FD 2E 64 00   mov32 cb, $00000064
1198   0BC0 00 00 
1199   0BC2 B0            cmp a, b
1200   0BC3 FD 71         seq ; ==
1201   0BC5 E4            pop a
1202   0BC6             ; --- END RELATIONAL
1203   0BC6             ; --- START LOGICAL OR
1204   0BC6 D7            push a
1205   0BC7 11            mov a, b
1206   0BC8 FA FD FF      lea d, [bp + -3] ; $format_p
1207   0BCB 2A            mov b, [d]
1208   0BCC 38 00 00      mov c, 0
1209   0BCF 74            mov d, b
1210   0BD0 32            mov bl, [d]
1211   0BD1 A7 00         mov bh, 0
1212   0BD3 38 00 00      mov c, 0
1213   0BD6             ; --- START RELATIONAL
1214   0BD6 D7            push a
1215   0BD7 11            mov a, b
1216   0BD8 FD 2E 69 00   mov32 cb, $00000069
1216   0BDC 00 00 
1217   0BDE B0            cmp a, b
1218   0BDF FD 71         seq ; ==
1219   0BE1 E4            pop a
1220   0BE2             ; --- END RELATIONAL
1221   0BE2 FD A8         sor a, b ; ||
1222   0BE4 E4            pop a
1223   0BE5             ; --- END LOGICAL OR
1224   0BE5 C0 00 00      cmp b, 0
1225   0BE8 C6 09 0C      je _if26_else
1226   0BEB             _if26_TRUE:
1227   0BEB             ; print_signed_long(*(long *)p); 
1228   0BEB             ; --- START FUNCTION CALL
1229   0BEB FA FF FF      lea d, [bp + -1] ; $p
1230   0BEE 2A            mov b, [d]
1231   0BEF 38 00 00      mov c, 0
1232   0BF2 74            mov d, b
1233   0BF3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1234   0BF6 FD 39         mov c, b ; And place it into C
1235   0BF8 2A            mov b, [d] ; Lower Word in B
1236   0BF9 12            mov a, c
1237   0BFA FD AA         swp a
1238   0BFC D7            push a
1239   0BFD FD AB         swp b
1240   0BFF D8            push b
1241   0C00 07 E2 0D      call print_signed_long
1242   0C03 51 04 00      add sp, 4
1243   0C06             ; --- END FUNCTION CALL
1244   0C06 0A 91 0C      jmp _if26_exit
1245   0C09             _if26_else:
1246   0C09             ; if(*format_p == 'u') 
1247   0C09             _if27_cond:
1248   0C09 FA FD FF      lea d, [bp + -3] ; $format_p
1249   0C0C 2A            mov b, [d]
1250   0C0D 38 00 00      mov c, 0
1251   0C10 74            mov d, b
1252   0C11 32            mov bl, [d]
1253   0C12 A7 00         mov bh, 0
1254   0C14 38 00 00      mov c, 0
1255   0C17             ; --- START RELATIONAL
1256   0C17 D7            push a
1257   0C18 11            mov a, b
1258   0C19 FD 2E 75 00   mov32 cb, $00000075
1258   0C1D 00 00 
1259   0C1F B0            cmp a, b
1260   0C20 FD 71         seq ; ==
1261   0C22 E4            pop a
1262   0C23             ; --- END RELATIONAL
1263   0C23 C0 00 00      cmp b, 0
1264   0C26 C6 47 0C      je _if27_else
1265   0C29             _if27_TRUE:
1266   0C29             ; print_unsigned_long(*(unsigned long *)p); 
1267   0C29             ; --- START FUNCTION CALL
1268   0C29 FA FF FF      lea d, [bp + -1] ; $p
1269   0C2C 2A            mov b, [d]
1270   0C2D 38 00 00      mov c, 0
1271   0C30 74            mov d, b
1272   0C31 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1273   0C34 FD 39         mov c, b ; And place it into C
1274   0C36 2A            mov b, [d] ; Lower Word in B
1275   0C37 12            mov a, c
1276   0C38 FD AA         swp a
1277   0C3A D7            push a
1278   0C3B FD AB         swp b
1279   0C3D D8            push b
1280   0C3E 07 78 0F      call print_unsigned_long
1281   0C41 51 04 00      add sp, 4
1282   0C44             ; --- END FUNCTION CALL
1283   0C44 0A 91 0C      jmp _if27_exit
1284   0C47             _if27_else:
1285   0C47             ; if(*format_p == 'x') 
1286   0C47             _if28_cond:
1287   0C47 FA FD FF      lea d, [bp + -3] ; $format_p
1288   0C4A 2A            mov b, [d]
1289   0C4B 38 00 00      mov c, 0
1290   0C4E 74            mov d, b
1291   0C4F 32            mov bl, [d]
1292   0C50 A7 00         mov bh, 0
1293   0C52 38 00 00      mov c, 0
1294   0C55             ; --- START RELATIONAL
1295   0C55 D7            push a
1296   0C56 11            mov a, b
1297   0C57 FD 2E 78 00   mov32 cb, $00000078
1297   0C5B 00 00 
1298   0C5D B0            cmp a, b
1299   0C5E FD 71         seq ; ==
1300   0C60 E4            pop a
1301   0C61             ; --- END RELATIONAL
1302   0C61 C0 00 00      cmp b, 0
1303   0C64 C6 85 0C      je _if28_else
1304   0C67             _if28_TRUE:
1305   0C67             ; printx32(*(long int *)p); 
1306   0C67             ; --- START FUNCTION CALL
1307   0C67 FA FF FF      lea d, [bp + -1] ; $p
1308   0C6A 2A            mov b, [d]
1309   0C6B 38 00 00      mov c, 0
1310   0C6E 74            mov d, b
1311   0C6F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1312   0C72 FD 39         mov c, b ; And place it into C
1313   0C74 2A            mov b, [d] ; Lower Word in B
1314   0C75 12            mov a, c
1315   0C76 FD AA         swp a
1316   0C78 D7            push a
1317   0C79 FD AB         swp b
1318   0C7B D8            push b
1319   0C7C 07 AD 10      call printx32
1320   0C7F 51 04 00      add sp, 4
1321   0C82             ; --- END FUNCTION CALL
1322   0C82 0A 91 0C      jmp _if28_exit
1323   0C85             _if28_else:
1324   0C85             ; err("Unexpected format in printf."); 
1325   0C85             ; --- START FUNCTION CALL
1326   0C85 26 A1 1D      mov b, _s3 ; "Unexpected format in printf."
1327   0C88 FD AB         swp b
1328   0C8A D8            push b
1329   0C8B 07 0D 11      call err
1330   0C8E 51 02 00      add sp, 2
1331   0C91             ; --- END FUNCTION CALL
1332   0C91             _if28_exit:
1333   0C91             _if27_exit:
1334   0C91             _if26_exit:
1335   0C91             ; p = p + 4; 
1336   0C91 FA FF FF      lea d, [bp + -1] ; $p
1337   0C94 DA            push d
1338   0C95 FA FF FF      lea d, [bp + -1] ; $p
1339   0C98 2A            mov b, [d]
1340   0C99 38 00 00      mov c, 0
1341   0C9C             ; --- START TERMS
1342   0C9C D7            push a
1343   0C9D 11            mov a, b
1344   0C9E FD 2E 04 00   mov32 cb, $00000004
1344   0CA2 00 00 
1345   0CA4 56            add b, a
1346   0CA5 E4            pop a
1347   0CA6             ; --- END TERMS
1348   0CA6 E7            pop d
1349   0CA7 FD 43         mov [d], b
1350   0CA9             ; break; 
1351   0CA9 0A A5 0D      jmp _switch25_exit ; case break
1352   0CAC             _switch25_case2:
1353   0CAC             _switch25_case3:
1354   0CAC             ; print_signed(*(int*)p); 
1355   0CAC             ; --- START FUNCTION CALL
1356   0CAC FA FF FF      lea d, [bp + -1] ; $p
1357   0CAF 2A            mov b, [d]
1358   0CB0 38 00 00      mov c, 0
1359   0CB3 74            mov d, b
1360   0CB4 2A            mov b, [d]
1361   0CB5 38 00 00      mov c, 0
1362   0CB8 FD AB         swp b
1363   0CBA D8            push b
1364   0CBB 07 3B 11      call print_signed
1365   0CBE 51 02 00      add sp, 2
1366   0CC1             ; --- END FUNCTION CALL
1367   0CC1             ; p = p + 2; 
1368   0CC1 FA FF FF      lea d, [bp + -1] ; $p
1369   0CC4 DA            push d
1370   0CC5 FA FF FF      lea d, [bp + -1] ; $p
1371   0CC8 2A            mov b, [d]
1372   0CC9 38 00 00      mov c, 0
1373   0CCC             ; --- START TERMS
1374   0CCC D7            push a
1375   0CCD 11            mov a, b
1376   0CCE FD 2E 02 00   mov32 cb, $00000002
1376   0CD2 00 00 
1377   0CD4 56            add b, a
1378   0CD5 E4            pop a
1379   0CD6             ; --- END TERMS
1380   0CD6 E7            pop d
1381   0CD7 FD 43         mov [d], b
1382   0CD9             ; break; 
1383   0CD9 0A A5 0D      jmp _switch25_exit ; case break
1384   0CDC             _switch25_case4:
1385   0CDC             ; print_unsigned(*(unsigned int*)p); 
1386   0CDC             ; --- START FUNCTION CALL
1387   0CDC FA FF FF      lea d, [bp + -1] ; $p
1388   0CDF 2A            mov b, [d]
1389   0CE0 38 00 00      mov c, 0
1390   0CE3 74            mov d, b
1391   0CE4 2A            mov b, [d]
1392   0CE5 38 00 00      mov c, 0
1393   0CE8 FD AB         swp b
1394   0CEA D8            push b
1395   0CEB 07 8C 12      call print_unsigned
1396   0CEE 51 02 00      add sp, 2
1397   0CF1             ; --- END FUNCTION CALL
1398   0CF1             ; p = p + 2; 
1399   0CF1 FA FF FF      lea d, [bp + -1] ; $p
1400   0CF4 DA            push d
1401   0CF5 FA FF FF      lea d, [bp + -1] ; $p
1402   0CF8 2A            mov b, [d]
1403   0CF9 38 00 00      mov c, 0
1404   0CFC             ; --- START TERMS
1405   0CFC D7            push a
1406   0CFD 11            mov a, b
1407   0CFE FD 2E 02 00   mov32 cb, $00000002
1407   0D02 00 00 
1408   0D04 56            add b, a
1409   0D05 E4            pop a
1410   0D06             ; --- END TERMS
1411   0D06 E7            pop d
1412   0D07 FD 43         mov [d], b
1413   0D09             ; break; 
1414   0D09 0A A5 0D      jmp _switch25_exit ; case break
1415   0D0C             _switch25_case5:
1416   0D0C             ; printx16(*(int*)p); 
1417   0D0C             ; --- START FUNCTION CALL
1418   0D0C FA FF FF      lea d, [bp + -1] ; $p
1419   0D0F 2A            mov b, [d]
1420   0D10 38 00 00      mov c, 0
1421   0D13 74            mov d, b
1422   0D14 2A            mov b, [d]
1423   0D15 38 00 00      mov c, 0
1424   0D18 FD AB         swp b
1425   0D1A D8            push b
1426   0D1B 07 A4 13      call printx16
1427   0D1E 51 02 00      add sp, 2
1428   0D21             ; --- END FUNCTION CALL
1429   0D21             ; p = p + 2; 
1430   0D21 FA FF FF      lea d, [bp + -1] ; $p
1431   0D24 DA            push d
1432   0D25 FA FF FF      lea d, [bp + -1] ; $p
1433   0D28 2A            mov b, [d]
1434   0D29 38 00 00      mov c, 0
1435   0D2C             ; --- START TERMS
1436   0D2C D7            push a
1437   0D2D 11            mov a, b
1438   0D2E FD 2E 02 00   mov32 cb, $00000002
1438   0D32 00 00 
1439   0D34 56            add b, a
1440   0D35 E4            pop a
1441   0D36             ; --- END TERMS
1442   0D36 E7            pop d
1443   0D37 FD 43         mov [d], b
1444   0D39             ; break; 
1445   0D39 0A A5 0D      jmp _switch25_exit ; case break
1446   0D3C             _switch25_case6:
1447   0D3C             ; putchar(*(char*)p); 
1448   0D3C             ; --- START FUNCTION CALL
1449   0D3C FA FF FF      lea d, [bp + -1] ; $p
1450   0D3F 2A            mov b, [d]
1451   0D40 38 00 00      mov c, 0
1452   0D43 74            mov d, b
1453   0D44 32            mov bl, [d]
1454   0D45 A7 00         mov bh, 0
1455   0D47 38 00 00      mov c, 0
1456   0D4A DD            push bl
1457   0D4B 07 6A 0F      call putchar
1458   0D4E 51 01 00      add sp, 1
1459   0D51             ; --- END FUNCTION CALL
1460   0D51             ; p = p + 1; 
1461   0D51 FA FF FF      lea d, [bp + -1] ; $p
1462   0D54 DA            push d
1463   0D55 FA FF FF      lea d, [bp + -1] ; $p
1464   0D58 2A            mov b, [d]
1465   0D59 38 00 00      mov c, 0
1466   0D5C             ; --- START TERMS
1467   0D5C D7            push a
1468   0D5D 11            mov a, b
1469   0D5E FD 2E 01 00   mov32 cb, $00000001
1469   0D62 00 00 
1470   0D64 56            add b, a
1471   0D65 E4            pop a
1472   0D66             ; --- END TERMS
1473   0D66 E7            pop d
1474   0D67 FD 43         mov [d], b
1475   0D69             ; break; 
1476   0D69 0A A5 0D      jmp _switch25_exit ; case break
1477   0D6C             _switch25_case7:
1478   0D6C             ; print(*(char**)p); 
1479   0D6C             ; --- START FUNCTION CALL
1480   0D6C FA FF FF      lea d, [bp + -1] ; $p
1481   0D6F 2A            mov b, [d]
1482   0D70 38 00 00      mov c, 0
1483   0D73 74            mov d, b
1484   0D74 2A            mov b, [d]
1485   0D75 FD AB         swp b
1486   0D77 D8            push b
1487   0D78 07 22 11      call print
1488   0D7B 51 02 00      add sp, 2
1489   0D7E             ; --- END FUNCTION CALL
1490   0D7E             ; p = p + 2; 
1491   0D7E FA FF FF      lea d, [bp + -1] ; $p
1492   0D81 DA            push d
1493   0D82 FA FF FF      lea d, [bp + -1] ; $p
1494   0D85 2A            mov b, [d]
1495   0D86 38 00 00      mov c, 0
1496   0D89             ; --- START TERMS
1497   0D89 D7            push a
1498   0D8A 11            mov a, b
1499   0D8B FD 2E 02 00   mov32 cb, $00000002
1499   0D8F 00 00 
1500   0D91 56            add b, a
1501   0D92 E4            pop a
1502   0D93             ; --- END TERMS
1503   0D93 E7            pop d
1504   0D94 FD 43         mov [d], b
1505   0D96             ; break; 
1506   0D96 0A A5 0D      jmp _switch25_exit ; case break
1507   0D99             _switch25_default:
1508   0D99             ; print("Error: Unknown argument type.\n"); 
1509   0D99             ; --- START FUNCTION CALL
1510   0D99 26 BE 1D      mov b, _s4 ; "Error: Unknown argument type.\n"
1511   0D9C FD AB         swp b
1512   0D9E D8            push b
1513   0D9F 07 22 11      call print
1514   0DA2 51 02 00      add sp, 2
1515   0DA5             ; --- END FUNCTION CALL
1516   0DA5             _switch25_exit:
1517   0DA5             ; format_p++; 
1518   0DA5 FA FD FF      lea d, [bp + -3] ; $format_p
1519   0DA8 2A            mov b, [d]
1520   0DA9 38 00 00      mov c, 0
1521   0DAC FD 77         inc b
1522   0DAE FA FD FF      lea d, [bp + -3] ; $format_p
1523   0DB1 FD 43         mov [d], b
1524   0DB3 FD 7D         dec b
1525   0DB5 0A DD 0D      jmp _if24_exit
1526   0DB8             _if24_else:
1527   0DB8             ; putchar(*format_p); 
1528   0DB8             ; --- START FUNCTION CALL
1529   0DB8 FA FD FF      lea d, [bp + -3] ; $format_p
1530   0DBB 2A            mov b, [d]
1531   0DBC 38 00 00      mov c, 0
1532   0DBF 74            mov d, b
1533   0DC0 32            mov bl, [d]
1534   0DC1 A7 00         mov bh, 0
1535   0DC3 38 00 00      mov c, 0
1536   0DC6 DD            push bl
1537   0DC7 07 6A 0F      call putchar
1538   0DCA 51 01 00      add sp, 1
1539   0DCD             ; --- END FUNCTION CALL
1540   0DCD             ; format_p++; 
1541   0DCD FA FD FF      lea d, [bp + -3] ; $format_p
1542   0DD0 2A            mov b, [d]
1543   0DD1 38 00 00      mov c, 0
1544   0DD4 FD 77         inc b
1545   0DD6 FA FD FF      lea d, [bp + -3] ; $format_p
1546   0DD9 FD 43         mov [d], b
1547   0DDB FD 7D         dec b
1548   0DDD             _if24_exit:
1549   0DDD             _if23_exit:
1550   0DDD             _for22_update:
1551   0DDD 0A 11 0B      jmp _for22_cond
1552   0DE0             _for22_exit:
1553   0DE0 F9            leave
1554   0DE1 09            ret
1555   0DE2             
1556   0DE2             print_signed_long:
1557   0DE2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1558   0DE5             ; char digits[10]; 
1559   0DE5 52 0A 00      sub sp, 10
1560   0DE8             ; int i = 0; 
1561   0DE8 52 02 00      sub sp, 2
1562   0DEB             ; --- START LOCAL VAR INITIALIZATION
1563   0DEB FA F5 FF      lea d, [bp + -11] ; $i
1564   0DEE DA            push d
1565   0DEF FD 2E 00 00   mov32 cb, $00000000
1565   0DF3 00 00 
1566   0DF5 E7            pop d
1567   0DF6 FD 43         mov [d], b
1568   0DF8             ; --- END LOCAL VAR INITIALIZATION
1569   0DF8             ; if (num < 0) { 
1570   0DF8             _if29_cond:
1571   0DF8 FA 05 00      lea d, [bp + 5] ; $num
1572   0DFB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1573   0DFE FD 39         mov c, b ; And place it into C
1574   0E00 2A            mov b, [d] ; Lower Word in B
1575   0E01             ; --- START RELATIONAL
1576   0E01 D7            push a
1577   0E02 FD D8         push g
1578   0E04 11            mov a, b
1579   0E05 FD 7A         mov g, c
1580   0E07 FD 2E 00 00   mov32 cb, $00000000
1580   0E0B 00 00 
1581   0E0D FD AF         cmp32 ga, cb
1582   0E0F FD 73         slt ; <
1583   0E11 FD F1         pop g
1584   0E13 E4            pop a
1585   0E14             ; --- END RELATIONAL
1586   0E14 C0 00 00      cmp b, 0
1587   0E17 C6 4B 0E      je _if29_else
1588   0E1A             _if29_TRUE:
1589   0E1A             ; putchar('-'); 
1590   0E1A             ; --- START FUNCTION CALL
1591   0E1A FD 2E 2D 00   mov32 cb, $0000002d
1591   0E1E 00 00 
1592   0E20 DD            push bl
1593   0E21 07 6A 0F      call putchar
1594   0E24 51 01 00      add sp, 1
1595   0E27             ; --- END FUNCTION CALL
1596   0E27             ; num = -num; 
1597   0E27 FA 05 00      lea d, [bp + 5] ; $num
1598   0E2A DA            push d
1599   0E2B FA 05 00      lea d, [bp + 5] ; $num
1600   0E2E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1601   0E31 FD 39         mov c, b ; And place it into C
1602   0E33 2A            mov b, [d] ; Lower Word in B
1603   0E34 12            mov a, c
1604   0E35 95            not a
1605   0E36 97            not b
1606   0E37 55 01 00      add b, 1
1607   0E3A 5B 00 00      adc a, 0
1608   0E3D 39            mov c, a
1609   0E3E E7            pop d
1610   0E3F FD 43         mov [d], b
1611   0E41 26 00 00      mov b, 0
1612   0E44 FD 44 02 00   mov [d + 2], b
1613   0E48 0A 7F 0E      jmp _if29_exit
1614   0E4B             _if29_else:
1615   0E4B             ; if (num == 0) { 
1616   0E4B             _if30_cond:
1617   0E4B FA 05 00      lea d, [bp + 5] ; $num
1618   0E4E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1619   0E51 FD 39         mov c, b ; And place it into C
1620   0E53 2A            mov b, [d] ; Lower Word in B
1621   0E54             ; --- START RELATIONAL
1622   0E54 D7            push a
1623   0E55 FD D8         push g
1624   0E57 11            mov a, b
1625   0E58 FD 7A         mov g, c
1626   0E5A FD 2E 00 00   mov32 cb, $00000000
1626   0E5E 00 00 
1627   0E60 FD AF         cmp32 ga, cb
1628   0E62 FD 71         seq ; ==
1629   0E64 FD F1         pop g
1630   0E66 E4            pop a
1631   0E67             ; --- END RELATIONAL
1632   0E67 C0 00 00      cmp b, 0
1633   0E6A C6 7F 0E      je _if30_exit
1634   0E6D             _if30_TRUE:
1635   0E6D             ; putchar('0'); 
1636   0E6D             ; --- START FUNCTION CALL
1637   0E6D FD 2E 30 00   mov32 cb, $00000030
1637   0E71 00 00 
1638   0E73 DD            push bl
1639   0E74 07 6A 0F      call putchar
1640   0E77 51 01 00      add sp, 1
1641   0E7A             ; --- END FUNCTION CALL
1642   0E7A             ; return; 
1643   0E7A F9            leave
1644   0E7B 09            ret
1645   0E7C 0A 7F 0E      jmp _if30_exit
1646   0E7F             _if30_exit:
1647   0E7F             _if29_exit:
1648   0E7F             ; while (num > 0) { 
1649   0E7F             _while31_cond:
1650   0E7F FA 05 00      lea d, [bp + 5] ; $num
1651   0E82 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1652   0E85 FD 39         mov c, b ; And place it into C
1653   0E87 2A            mov b, [d] ; Lower Word in B
1654   0E88             ; --- START RELATIONAL
1655   0E88 D7            push a
1656   0E89 FD D8         push g
1657   0E8B 11            mov a, b
1658   0E8C FD 7A         mov g, c
1659   0E8E FD 2E 00 00   mov32 cb, $00000000
1659   0E92 00 00 
1660   0E94 FD AF         cmp32 ga, cb
1661   0E96 FD 7F         sgt
1662   0E98 FD F1         pop g
1663   0E9A E4            pop a
1664   0E9B             ; --- END RELATIONAL
1665   0E9B C0 00 00      cmp b, 0
1666   0E9E C6 20 0F      je _while31_exit
1667   0EA1             _while31_block:
1668   0EA1             ; digits[i] = '0' + (num % 10); 
1669   0EA1 FA F7 FF      lea d, [bp + -9] ; $digits
1670   0EA4 D7            push a
1671   0EA5 DA            push d
1672   0EA6 FA F5 FF      lea d, [bp + -11] ; $i
1673   0EA9 2A            mov b, [d]
1674   0EAA 38 00 00      mov c, 0
1675   0EAD E7            pop d
1676   0EAE 5A            add d, b
1677   0EAF E4            pop a
1678   0EB0 DA            push d
1679   0EB1 FD 2E 30 00   mov32 cb, $00000030
1679   0EB5 00 00 
1680   0EB7             ; --- START TERMS
1681   0EB7 D7            push a
1682   0EB8 11            mov a, b
1683   0EB9 FA 05 00      lea d, [bp + 5] ; $num
1684   0EBC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1685   0EBF FD 39         mov c, b ; And place it into C
1686   0EC1 2A            mov b, [d] ; Lower Word in B
1687   0EC2             ; --- START FACTORS
1688   0EC2 D7            push a
1689   0EC3 FD D8         push g
1690   0EC5 11            mov a, b
1691   0EC6 FD 7A         mov g, c
1692   0EC8 FD 2E 0A 00   mov32 cb, $0000000a
1692   0ECC 00 00 
1693   0ECE FD D8         push g ; save 'g' as the div instruction uses it
1694   0ED0 AE            div a, b ; %, a: quotient, b: remainder
1695   0ED1 11            mov a, b
1696   0ED2 FD F1         pop g
1697   0ED4 FD 38         mov c, g
1698   0ED6 27            mov b, a
1699   0ED7 FD F1         pop g
1700   0ED9 E4            pop a
1701   0EDA             ; --- END FACTORS
1702   0EDA 56            add b, a
1703   0EDB E4            pop a
1704   0EDC             ; --- END TERMS
1705   0EDC E7            pop d
1706   0EDD FD 3E         mov [d], bl
1707   0EDF             ; num = num / 10; 
1708   0EDF FA 05 00      lea d, [bp + 5] ; $num
1709   0EE2 DA            push d
1710   0EE3 FA 05 00      lea d, [bp + 5] ; $num
1711   0EE6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1712   0EE9 FD 39         mov c, b ; And place it into C
1713   0EEB 2A            mov b, [d] ; Lower Word in B
1714   0EEC             ; --- START FACTORS
1715   0EEC D7            push a
1716   0EED FD D8         push g
1717   0EEF 11            mov a, b
1718   0EF0 FD 7A         mov g, c
1719   0EF2 FD 2E 0A 00   mov32 cb, $0000000a
1719   0EF6 00 00 
1720   0EF8 FD D8         push g ; save 'g' as the div instruction uses it
1721   0EFA AE            div a, b ; /, a: quotient, b: remainder
1722   0EFB FD F1         pop g
1723   0EFD FD 38         mov c, g
1724   0EFF 27            mov b, a
1725   0F00 FD F1         pop g
1726   0F02 E4            pop a
1727   0F03             ; --- END FACTORS
1728   0F03 E7            pop d
1729   0F04 FD 43         mov [d], b
1730   0F06 26 00 00      mov b, 0
1731   0F09 FD 44 02 00   mov [d + 2], b
1732   0F0D             ; i++; 
1733   0F0D FA F5 FF      lea d, [bp + -11] ; $i
1734   0F10 2A            mov b, [d]
1735   0F11 38 00 00      mov c, 0
1736   0F14 11            mov a, b
1737   0F15 FD 77         inc b
1738   0F17 FA F5 FF      lea d, [bp + -11] ; $i
1739   0F1A FD 43         mov [d], b
1740   0F1C 27            mov b, a
1741   0F1D 0A 7F 0E      jmp _while31_cond
1742   0F20             _while31_exit:
1743   0F20             ; while (i > 0) { 
1744   0F20             _while38_cond:
1745   0F20 FA F5 FF      lea d, [bp + -11] ; $i
1746   0F23 2A            mov b, [d]
1747   0F24 38 00 00      mov c, 0
1748   0F27             ; --- START RELATIONAL
1749   0F27 D7            push a
1750   0F28 11            mov a, b
1751   0F29 FD 2E 00 00   mov32 cb, $00000000
1751   0F2D 00 00 
1752   0F2F B0            cmp a, b
1753   0F30 FD 7F         sgt ; >
1754   0F32 E4            pop a
1755   0F33             ; --- END RELATIONAL
1756   0F33 C0 00 00      cmp b, 0
1757   0F36 C6 68 0F      je _while38_exit
1758   0F39             _while38_block:
1759   0F39             ; i--; 
1760   0F39 FA F5 FF      lea d, [bp + -11] ; $i
1761   0F3C 2A            mov b, [d]
1762   0F3D 38 00 00      mov c, 0
1763   0F40 11            mov a, b
1764   0F41 FD 7D         dec b
1765   0F43 FA F5 FF      lea d, [bp + -11] ; $i
1766   0F46 FD 43         mov [d], b
1767   0F48 27            mov b, a
1768   0F49             ; putchar(digits[i]); 
1769   0F49             ; --- START FUNCTION CALL
1770   0F49 FA F7 FF      lea d, [bp + -9] ; $digits
1771   0F4C D7            push a
1772   0F4D DA            push d
1773   0F4E FA F5 FF      lea d, [bp + -11] ; $i
1774   0F51 2A            mov b, [d]
1775   0F52 38 00 00      mov c, 0
1776   0F55 E7            pop d
1777   0F56 5A            add d, b
1778   0F57 E4            pop a
1779   0F58 32            mov bl, [d]
1780   0F59 A7 00         mov bh, 0
1781   0F5B 38 00 00      mov c, 0
1782   0F5E DD            push bl
1783   0F5F 07 6A 0F      call putchar
1784   0F62 51 01 00      add sp, 1
1785   0F65             ; --- END FUNCTION CALL
1786   0F65 0A 20 0F      jmp _while38_cond
1787   0F68             _while38_exit:
1788   0F68 F9            leave
1789   0F69 09            ret
1790   0F6A             
1791   0F6A             putchar:
1792   0F6A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1793   0F6D             ; --- BEGIN INLINE ASM SEGMENT
1794   0F6D FA 05 00      lea d, [bp + 5] ; $c
1795   0F70 1E            mov al, [d]
1796   0F71 23            mov ah, al
1797   0F72 19 00         mov al, 0
1798   0F74 05 03         syscall sys_io      ; char in AH
1799   0F76             ; --- END INLINE ASM SEGMENT
1800   0F76 F9            leave
1801   0F77 09            ret
1802   0F78             
1803   0F78             print_unsigned_long:
1804   0F78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1805   0F7B             ; char digits[10]; 
1806   0F7B 52 0A 00      sub sp, 10
1807   0F7E             ; int i; 
1808   0F7E 52 02 00      sub sp, 2
1809   0F81             ; i = 0; 
1810   0F81 FA F5 FF      lea d, [bp + -11] ; $i
1811   0F84 DA            push d
1812   0F85 FD 2E 00 00   mov32 cb, $00000000
1812   0F89 00 00 
1813   0F8B E7            pop d
1814   0F8C FD 43         mov [d], b
1815   0F8E             ; if(num == 0){ 
1816   0F8E             _if39_cond:
1817   0F8E FA 05 00      lea d, [bp + 5] ; $num
1818   0F91 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1819   0F94 FD 39         mov c, b ; And place it into C
1820   0F96 2A            mov b, [d] ; Lower Word in B
1821   0F97             ; --- START RELATIONAL
1822   0F97 D7            push a
1823   0F98 FD D8         push g
1824   0F9A 11            mov a, b
1825   0F9B FD 7A         mov g, c
1826   0F9D FD 2E 00 00   mov32 cb, $00000000
1826   0FA1 00 00 
1827   0FA3 FD AF         cmp32 ga, cb
1828   0FA5 FD 71         seq ; ==
1829   0FA7 FD F1         pop g
1830   0FA9 E4            pop a
1831   0FAA             ; --- END RELATIONAL
1832   0FAA C0 00 00      cmp b, 0
1833   0FAD C6 C2 0F      je _if39_exit
1834   0FB0             _if39_TRUE:
1835   0FB0             ; putchar('0'); 
1836   0FB0             ; --- START FUNCTION CALL
1837   0FB0 FD 2E 30 00   mov32 cb, $00000030
1837   0FB4 00 00 
1838   0FB6 DD            push bl
1839   0FB7 07 6A 0F      call putchar
1840   0FBA 51 01 00      add sp, 1
1841   0FBD             ; --- END FUNCTION CALL
1842   0FBD             ; return; 
1843   0FBD F9            leave
1844   0FBE 09            ret
1845   0FBF 0A C2 0F      jmp _if39_exit
1846   0FC2             _if39_exit:
1847   0FC2             ; while (num > 0) { 
1848   0FC2             _while40_cond:
1849   0FC2 FA 05 00      lea d, [bp + 5] ; $num
1850   0FC5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1851   0FC8 FD 39         mov c, b ; And place it into C
1852   0FCA 2A            mov b, [d] ; Lower Word in B
1853   0FCB             ; --- START RELATIONAL
1854   0FCB D7            push a
1855   0FCC FD D8         push g
1856   0FCE 11            mov a, b
1857   0FCF FD 7A         mov g, c
1858   0FD1 FD 2E 00 00   mov32 cb, $00000000
1858   0FD5 00 00 
1859   0FD7 FD AF         cmp32 ga, cb
1860   0FD9 FD 81         sgu
1861   0FDB FD F1         pop g
1862   0FDD E4            pop a
1863   0FDE             ; --- END RELATIONAL
1864   0FDE C0 00 00      cmp b, 0
1865   0FE1 C6 63 10      je _while40_exit
1866   0FE4             _while40_block:
1867   0FE4             ; digits[i] = '0' + (num % 10); 
1868   0FE4 FA F7 FF      lea d, [bp + -9] ; $digits
1869   0FE7 D7            push a
1870   0FE8 DA            push d
1871   0FE9 FA F5 FF      lea d, [bp + -11] ; $i
1872   0FEC 2A            mov b, [d]
1873   0FED 38 00 00      mov c, 0
1874   0FF0 E7            pop d
1875   0FF1 5A            add d, b
1876   0FF2 E4            pop a
1877   0FF3 DA            push d
1878   0FF4 FD 2E 30 00   mov32 cb, $00000030
1878   0FF8 00 00 
1879   0FFA             ; --- START TERMS
1880   0FFA D7            push a
1881   0FFB 11            mov a, b
1882   0FFC FA 05 00      lea d, [bp + 5] ; $num
1883   0FFF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1884   1002 FD 39         mov c, b ; And place it into C
1885   1004 2A            mov b, [d] ; Lower Word in B
1886   1005             ; --- START FACTORS
1887   1005 D7            push a
1888   1006 FD D8         push g
1889   1008 11            mov a, b
1890   1009 FD 7A         mov g, c
1891   100B FD 2E 0A 00   mov32 cb, $0000000a
1891   100F 00 00 
1892   1011 FD D8         push g ; save 'g' as the div instruction uses it
1893   1013 AE            div a, b ; %, a: quotient, b: remainder
1894   1014 11            mov a, b
1895   1015 FD F1         pop g
1896   1017 FD 38         mov c, g
1897   1019 27            mov b, a
1898   101A FD F1         pop g
1899   101C E4            pop a
1900   101D             ; --- END FACTORS
1901   101D 56            add b, a
1902   101E E4            pop a
1903   101F             ; --- END TERMS
1904   101F E7            pop d
1905   1020 FD 3E         mov [d], bl
1906   1022             ; num = num / 10; 
1907   1022 FA 05 00      lea d, [bp + 5] ; $num
1908   1025 DA            push d
1909   1026 FA 05 00      lea d, [bp + 5] ; $num
1910   1029 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1911   102C FD 39         mov c, b ; And place it into C
1912   102E 2A            mov b, [d] ; Lower Word in B
1913   102F             ; --- START FACTORS
1914   102F D7            push a
1915   1030 FD D8         push g
1916   1032 11            mov a, b
1917   1033 FD 7A         mov g, c
1918   1035 FD 2E 0A 00   mov32 cb, $0000000a
1918   1039 00 00 
1919   103B FD D8         push g ; save 'g' as the div instruction uses it
1920   103D AE            div a, b ; /, a: quotient, b: remainder
1921   103E FD F1         pop g
1922   1040 FD 38         mov c, g
1923   1042 27            mov b, a
1924   1043 FD F1         pop g
1925   1045 E4            pop a
1926   1046             ; --- END FACTORS
1927   1046 E7            pop d
1928   1047 FD 43         mov [d], b
1929   1049 26 00 00      mov b, 0
1930   104C FD 44 02 00   mov [d + 2], b
1931   1050             ; i++; 
1932   1050 FA F5 FF      lea d, [bp + -11] ; $i
1933   1053 2A            mov b, [d]
1934   1054 38 00 00      mov c, 0
1935   1057 11            mov a, b
1936   1058 FD 77         inc b
1937   105A FA F5 FF      lea d, [bp + -11] ; $i
1938   105D FD 43         mov [d], b
1939   105F 27            mov b, a
1940   1060 0A C2 0F      jmp _while40_cond
1941   1063             _while40_exit:
1942   1063             ; while (i > 0) { 
1943   1063             _while47_cond:
1944   1063 FA F5 FF      lea d, [bp + -11] ; $i
1945   1066 2A            mov b, [d]
1946   1067 38 00 00      mov c, 0
1947   106A             ; --- START RELATIONAL
1948   106A D7            push a
1949   106B 11            mov a, b
1950   106C FD 2E 00 00   mov32 cb, $00000000
1950   1070 00 00 
1951   1072 B0            cmp a, b
1952   1073 FD 7F         sgt ; >
1953   1075 E4            pop a
1954   1076             ; --- END RELATIONAL
1955   1076 C0 00 00      cmp b, 0
1956   1079 C6 AB 10      je _while47_exit
1957   107C             _while47_block:
1958   107C             ; i--; 
1959   107C FA F5 FF      lea d, [bp + -11] ; $i
1960   107F 2A            mov b, [d]
1961   1080 38 00 00      mov c, 0
1962   1083 11            mov a, b
1963   1084 FD 7D         dec b
1964   1086 FA F5 FF      lea d, [bp + -11] ; $i
1965   1089 FD 43         mov [d], b
1966   108B 27            mov b, a
1967   108C             ; putchar(digits[i]); 
1968   108C             ; --- START FUNCTION CALL
1969   108C FA F7 FF      lea d, [bp + -9] ; $digits
1970   108F D7            push a
1971   1090 DA            push d
1972   1091 FA F5 FF      lea d, [bp + -11] ; $i
1973   1094 2A            mov b, [d]
1974   1095 38 00 00      mov c, 0
1975   1098 E7            pop d
1976   1099 5A            add d, b
1977   109A E4            pop a
1978   109B 32            mov bl, [d]
1979   109C A7 00         mov bh, 0
1980   109E 38 00 00      mov c, 0
1981   10A1 DD            push bl
1982   10A2 07 6A 0F      call putchar
1983   10A5 51 01 00      add sp, 1
1984   10A8             ; --- END FUNCTION CALL
1985   10A8 0A 63 10      jmp _while47_cond
1986   10AB             _while47_exit:
1987   10AB F9            leave
1988   10AC 09            ret
1989   10AD             
1990   10AD             printx32:
1991   10AD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1992   10B0             ; --- BEGIN INLINE ASM SEGMENT
1993   10B0 FA 05 00      lea d, [bp + 5] ; $hex
1994   10B3 2B 02 00      mov b, [d+2]
1995   10B6 07 BF 10      call print_u16x_printx32
1996   10B9 2A            mov b, [d]
1997   10BA 07 BF 10      call print_u16x_printx32
1998   10BD             ; --- END INLINE ASM SEGMENT
1999   10BD             ; return; 
2000   10BD F9            leave
2001   10BE 09            ret
2002   10BF             ; --- BEGIN INLINE ASM SEGMENT
2003   10BF             print_u16x_printx32:
2004   10BF D7            push a
2005   10C0 D8            push b
2006   10C1 DD            push bl
2007   10C2 30            mov bl, bh
2008   10C3 07 E1 10      call _itoa_printx32        ; convert bh to char in A
2009   10C6 2F            mov bl, al        ; save al
2010   10C7 19 00         mov al, 0
2011   10C9 05 03         syscall sys_io        ; display AH
2012   10CB 24            mov ah, bl        ; retrieve al
2013   10CC 19 00         mov al, 0
2014   10CE 05 03         syscall sys_io        ; display AL
2015   10D0 EA            pop bl
2016   10D1 07 E1 10      call _itoa_printx32        ; convert bh to char in A
2017   10D4 2F            mov bl, al        ; save al
2018   10D5 19 00         mov al, 0
2019   10D7 05 03         syscall sys_io        ; display AH
2020   10D9 24            mov ah, bl        ; retrieve al
2021   10DA 19 00         mov al, 0
2022   10DC 05 03         syscall sys_io        ; display AL
2023   10DE E5            pop b
2024   10DF E4            pop a
2025   10E0 09            ret
2026   10E1             _itoa_printx32:
2027   10E1 DA            push d
2028   10E2 D8            push b
2029   10E3 A7 00         mov bh, 0
2030   10E5 FD A4 04      shr bl, 4  
2031   10E8 74            mov d, b
2032   10E9 1F FB 10      mov al, [d + s_hex_digits_printx32]
2033   10EC 23            mov ah, al
2034   10ED E5            pop b
2035   10EE D8            push b
2036   10EF A7 00         mov bh, 0
2037   10F1 FD 87 0F      and bl, $0F
2038   10F4 74            mov d, b
2039   10F5 1F FB 10      mov al, [d + s_hex_digits_printx32]
2040   10F8 E5            pop b
2041   10F9 E7            pop d
2042   10FA 09            ret
2043   10FB 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2043   10FF 34 35 36 37 
2043   1103 38 39 41 42 
2043   1107 43 44 45 46 
2044   110B             ; --- END INLINE ASM SEGMENT
2045   110B F9            leave
2046   110C 09            ret
2047   110D             
2048   110D             err:
2049   110D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2050   1110             ; print(e); 
2051   1110             ; --- START FUNCTION CALL
2052   1110 FA 05 00      lea d, [bp + 5] ; $e
2053   1113 2A            mov b, [d]
2054   1114 38 00 00      mov c, 0
2055   1117 FD AB         swp b
2056   1119 D8            push b
2057   111A 07 22 11      call print
2058   111D 51 02 00      add sp, 2
2059   1120             ; --- END FUNCTION CALL
2060   1120 F9            leave
2061   1121 09            ret
2062   1122             
2063   1122             print:
2064   1122 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2065   1125             ; --- BEGIN INLINE ASM SEGMENT
2066   1125 FA 05 00      lea d, [bp + 5] ; $s
2067   1128 FD 2A         mov d, [d]
2068   112A             _puts_L1_print:
2069   112A 1E            mov al, [d]
2070   112B B9 00         cmp al, 0
2071   112D C6 39 11      jz _puts_END_print
2072   1130 23            mov ah, al
2073   1131 19 00         mov al, 0
2074   1133 05 03         syscall sys_io
2075   1135 79            inc d
2076   1136 0A 2A 11      jmp _puts_L1_print
2077   1139             _puts_END_print:
2078   1139             ; --- END INLINE ASM SEGMENT
2079   1139 F9            leave
2080   113A 09            ret
2081   113B             
2082   113B             print_signed:
2083   113B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2084   113E             ; char digits[5]; 
2085   113E 52 05 00      sub sp, 5
2086   1141             ; int i = 0; 
2087   1141 52 02 00      sub sp, 2
2088   1144             ; --- START LOCAL VAR INITIALIZATION
2089   1144 FA FA FF      lea d, [bp + -6] ; $i
2090   1147 DA            push d
2091   1148 FD 2E 00 00   mov32 cb, $00000000
2091   114C 00 00 
2092   114E E7            pop d
2093   114F FD 43         mov [d], b
2094   1151             ; --- END LOCAL VAR INITIALIZATION
2095   1151             ; if (num < 0) { 
2096   1151             _if48_cond:
2097   1151 FA 05 00      lea d, [bp + 5] ; $num
2098   1154 2A            mov b, [d]
2099   1155 38 00 00      mov c, 0
2100   1158             ; --- START RELATIONAL
2101   1158 D7            push a
2102   1159 11            mov a, b
2103   115A FD 2E 00 00   mov32 cb, $00000000
2103   115E 00 00 
2104   1160 B0            cmp a, b
2105   1161 FD 73         slt ; < (signed)
2106   1163 E4            pop a
2107   1164             ; --- END RELATIONAL
2108   1164 C0 00 00      cmp b, 0
2109   1167 C6 8A 11      je _if48_else
2110   116A             _if48_TRUE:
2111   116A             ; putchar('-'); 
2112   116A             ; --- START FUNCTION CALL
2113   116A FD 2E 2D 00   mov32 cb, $0000002d
2113   116E 00 00 
2114   1170 DD            push bl
2115   1171 07 6A 0F      call putchar
2116   1174 51 01 00      add sp, 1
2117   1177             ; --- END FUNCTION CALL
2118   1177             ; num = -num; 
2119   1177 FA 05 00      lea d, [bp + 5] ; $num
2120   117A DA            push d
2121   117B FA 05 00      lea d, [bp + 5] ; $num
2122   117E 2A            mov b, [d]
2123   117F 38 00 00      mov c, 0
2124   1182 FD 97         neg b
2125   1184 E7            pop d
2126   1185 FD 43         mov [d], b
2127   1187 0A B5 11      jmp _if48_exit
2128   118A             _if48_else:
2129   118A             ; if (num == 0) { 
2130   118A             _if49_cond:
2131   118A FA 05 00      lea d, [bp + 5] ; $num
2132   118D 2A            mov b, [d]
2133   118E 38 00 00      mov c, 0
2134   1191             ; --- START RELATIONAL
2135   1191 D7            push a
2136   1192 11            mov a, b
2137   1193 FD 2E 00 00   mov32 cb, $00000000
2137   1197 00 00 
2138   1199 B0            cmp a, b
2139   119A FD 71         seq ; ==
2140   119C E4            pop a
2141   119D             ; --- END RELATIONAL
2142   119D C0 00 00      cmp b, 0
2143   11A0 C6 B5 11      je _if49_exit
2144   11A3             _if49_TRUE:
2145   11A3             ; putchar('0'); 
2146   11A3             ; --- START FUNCTION CALL
2147   11A3 FD 2E 30 00   mov32 cb, $00000030
2147   11A7 00 00 
2148   11A9 DD            push bl
2149   11AA 07 6A 0F      call putchar
2150   11AD 51 01 00      add sp, 1
2151   11B0             ; --- END FUNCTION CALL
2152   11B0             ; return; 
2153   11B0 F9            leave
2154   11B1 09            ret
2155   11B2 0A B5 11      jmp _if49_exit
2156   11B5             _if49_exit:
2157   11B5             _if48_exit:
2158   11B5             ; while (num > 0) { 
2159   11B5             _while50_cond:
2160   11B5 FA 05 00      lea d, [bp + 5] ; $num
2161   11B8 2A            mov b, [d]
2162   11B9 38 00 00      mov c, 0
2163   11BC             ; --- START RELATIONAL
2164   11BC D7            push a
2165   11BD 11            mov a, b
2166   11BE FD 2E 00 00   mov32 cb, $00000000
2166   11C2 00 00 
2167   11C4 B0            cmp a, b
2168   11C5 FD 7F         sgt ; >
2169   11C7 E4            pop a
2170   11C8             ; --- END RELATIONAL
2171   11C8 C0 00 00      cmp b, 0
2172   11CB C6 42 12      je _while50_exit
2173   11CE             _while50_block:
2174   11CE             ; digits[i] = '0' + (num % 10); 
2175   11CE FA FC FF      lea d, [bp + -4] ; $digits
2176   11D1 D7            push a
2177   11D2 DA            push d
2178   11D3 FA FA FF      lea d, [bp + -6] ; $i
2179   11D6 2A            mov b, [d]
2180   11D7 38 00 00      mov c, 0
2181   11DA E7            pop d
2182   11DB 5A            add d, b
2183   11DC E4            pop a
2184   11DD DA            push d
2185   11DE FD 2E 30 00   mov32 cb, $00000030
2185   11E2 00 00 
2186   11E4             ; --- START TERMS
2187   11E4 D7            push a
2188   11E5 11            mov a, b
2189   11E6 FA 05 00      lea d, [bp + 5] ; $num
2190   11E9 2A            mov b, [d]
2191   11EA 38 00 00      mov c, 0
2192   11ED             ; --- START FACTORS
2193   11ED D7            push a
2194   11EE FD D8         push g
2195   11F0 11            mov a, b
2196   11F1 FD 7A         mov g, c
2197   11F3 FD 2E 0A 00   mov32 cb, $0000000a
2197   11F7 00 00 
2198   11F9 FD D8         push g ; save 'g' as the div instruction uses it
2199   11FB AE            div a, b ; %, a: quotient, b: remainder
2200   11FC 11            mov a, b
2201   11FD FD F1         pop g
2202   11FF FD 38         mov c, g
2203   1201 27            mov b, a
2204   1202 FD F1         pop g
2205   1204 E4            pop a
2206   1205             ; --- END FACTORS
2207   1205 56            add b, a
2208   1206 E4            pop a
2209   1207             ; --- END TERMS
2210   1207 E7            pop d
2211   1208 FD 3E         mov [d], bl
2212   120A             ; num = num / 10; 
2213   120A FA 05 00      lea d, [bp + 5] ; $num
2214   120D DA            push d
2215   120E FA 05 00      lea d, [bp + 5] ; $num
2216   1211 2A            mov b, [d]
2217   1212 38 00 00      mov c, 0
2218   1215             ; --- START FACTORS
2219   1215 D7            push a
2220   1216 FD D8         push g
2221   1218 11            mov a, b
2222   1219 FD 7A         mov g, c
2223   121B FD 2E 0A 00   mov32 cb, $0000000a
2223   121F 00 00 
2224   1221 FD D8         push g ; save 'g' as the div instruction uses it
2225   1223 AE            div a, b ; /, a: quotient, b: remainder
2226   1224 FD F1         pop g
2227   1226 FD 38         mov c, g
2228   1228 27            mov b, a
2229   1229 FD F1         pop g
2230   122B E4            pop a
2231   122C             ; --- END FACTORS
2232   122C E7            pop d
2233   122D FD 43         mov [d], b
2234   122F             ; i++; 
2235   122F FA FA FF      lea d, [bp + -6] ; $i
2236   1232 2A            mov b, [d]
2237   1233 38 00 00      mov c, 0
2238   1236 11            mov a, b
2239   1237 FD 77         inc b
2240   1239 FA FA FF      lea d, [bp + -6] ; $i
2241   123C FD 43         mov [d], b
2242   123E 27            mov b, a
2243   123F 0A B5 11      jmp _while50_cond
2244   1242             _while50_exit:
2245   1242             ; while (i > 0) { 
2246   1242             _while57_cond:
2247   1242 FA FA FF      lea d, [bp + -6] ; $i
2248   1245 2A            mov b, [d]
2249   1246 38 00 00      mov c, 0
2250   1249             ; --- START RELATIONAL
2251   1249 D7            push a
2252   124A 11            mov a, b
2253   124B FD 2E 00 00   mov32 cb, $00000000
2253   124F 00 00 
2254   1251 B0            cmp a, b
2255   1252 FD 7F         sgt ; >
2256   1254 E4            pop a
2257   1255             ; --- END RELATIONAL
2258   1255 C0 00 00      cmp b, 0
2259   1258 C6 8A 12      je _while57_exit
2260   125B             _while57_block:
2261   125B             ; i--; 
2262   125B FA FA FF      lea d, [bp + -6] ; $i
2263   125E 2A            mov b, [d]
2264   125F 38 00 00      mov c, 0
2265   1262 11            mov a, b
2266   1263 FD 7D         dec b
2267   1265 FA FA FF      lea d, [bp + -6] ; $i
2268   1268 FD 43         mov [d], b
2269   126A 27            mov b, a
2270   126B             ; putchar(digits[i]); 
2271   126B             ; --- START FUNCTION CALL
2272   126B FA FC FF      lea d, [bp + -4] ; $digits
2273   126E D7            push a
2274   126F DA            push d
2275   1270 FA FA FF      lea d, [bp + -6] ; $i
2276   1273 2A            mov b, [d]
2277   1274 38 00 00      mov c, 0
2278   1277 E7            pop d
2279   1278 5A            add d, b
2280   1279 E4            pop a
2281   127A 32            mov bl, [d]
2282   127B A7 00         mov bh, 0
2283   127D 38 00 00      mov c, 0
2284   1280 DD            push bl
2285   1281 07 6A 0F      call putchar
2286   1284 51 01 00      add sp, 1
2287   1287             ; --- END FUNCTION CALL
2288   1287 0A 42 12      jmp _while57_cond
2289   128A             _while57_exit:
2290   128A F9            leave
2291   128B 09            ret
2292   128C             
2293   128C             print_unsigned:
2294   128C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2295   128F             ; char digits[5]; 
2296   128F 52 05 00      sub sp, 5
2297   1292             ; int i; 
2298   1292 52 02 00      sub sp, 2
2299   1295             ; i = 0; 
2300   1295 FA FA FF      lea d, [bp + -6] ; $i
2301   1298 DA            push d
2302   1299 FD 2E 00 00   mov32 cb, $00000000
2302   129D 00 00 
2303   129F E7            pop d
2304   12A0 FD 43         mov [d], b
2305   12A2             ; if(num == 0){ 
2306   12A2             _if58_cond:
2307   12A2 FA 05 00      lea d, [bp + 5] ; $num
2308   12A5 2A            mov b, [d]
2309   12A6 38 00 00      mov c, 0
2310   12A9             ; --- START RELATIONAL
2311   12A9 D7            push a
2312   12AA 11            mov a, b
2313   12AB FD 2E 00 00   mov32 cb, $00000000
2313   12AF 00 00 
2314   12B1 B0            cmp a, b
2315   12B2 FD 71         seq ; ==
2316   12B4 E4            pop a
2317   12B5             ; --- END RELATIONAL
2318   12B5 C0 00 00      cmp b, 0
2319   12B8 C6 CD 12      je _if58_exit
2320   12BB             _if58_TRUE:
2321   12BB             ; putchar('0'); 
2322   12BB             ; --- START FUNCTION CALL
2323   12BB FD 2E 30 00   mov32 cb, $00000030
2323   12BF 00 00 
2324   12C1 DD            push bl
2325   12C2 07 6A 0F      call putchar
2326   12C5 51 01 00      add sp, 1
2327   12C8             ; --- END FUNCTION CALL
2328   12C8             ; return; 
2329   12C8 F9            leave
2330   12C9 09            ret
2331   12CA 0A CD 12      jmp _if58_exit
2332   12CD             _if58_exit:
2333   12CD             ; while (num > 0) { 
2334   12CD             _while59_cond:
2335   12CD FA 05 00      lea d, [bp + 5] ; $num
2336   12D0 2A            mov b, [d]
2337   12D1 38 00 00      mov c, 0
2338   12D4             ; --- START RELATIONAL
2339   12D4 D7            push a
2340   12D5 11            mov a, b
2341   12D6 FD 2E 00 00   mov32 cb, $00000000
2341   12DA 00 00 
2342   12DC B0            cmp a, b
2343   12DD FD 81         sgu ; > (unsigned)
2344   12DF E4            pop a
2345   12E0             ; --- END RELATIONAL
2346   12E0 C0 00 00      cmp b, 0
2347   12E3 C6 5A 13      je _while59_exit
2348   12E6             _while59_block:
2349   12E6             ; digits[i] = '0' + (num % 10); 
2350   12E6 FA FC FF      lea d, [bp + -4] ; $digits
2351   12E9 D7            push a
2352   12EA DA            push d
2353   12EB FA FA FF      lea d, [bp + -6] ; $i
2354   12EE 2A            mov b, [d]
2355   12EF 38 00 00      mov c, 0
2356   12F2 E7            pop d
2357   12F3 5A            add d, b
2358   12F4 E4            pop a
2359   12F5 DA            push d
2360   12F6 FD 2E 30 00   mov32 cb, $00000030
2360   12FA 00 00 
2361   12FC             ; --- START TERMS
2362   12FC D7            push a
2363   12FD 11            mov a, b
2364   12FE FA 05 00      lea d, [bp + 5] ; $num
2365   1301 2A            mov b, [d]
2366   1302 38 00 00      mov c, 0
2367   1305             ; --- START FACTORS
2368   1305 D7            push a
2369   1306 FD D8         push g
2370   1308 11            mov a, b
2371   1309 FD 7A         mov g, c
2372   130B FD 2E 0A 00   mov32 cb, $0000000a
2372   130F 00 00 
2373   1311 FD D8         push g ; save 'g' as the div instruction uses it
2374   1313 AE            div a, b ; %, a: quotient, b: remainder
2375   1314 11            mov a, b
2376   1315 FD F1         pop g
2377   1317 FD 38         mov c, g
2378   1319 27            mov b, a
2379   131A FD F1         pop g
2380   131C E4            pop a
2381   131D             ; --- END FACTORS
2382   131D 56            add b, a
2383   131E E4            pop a
2384   131F             ; --- END TERMS
2385   131F E7            pop d
2386   1320 FD 3E         mov [d], bl
2387   1322             ; num = num / 10; 
2388   1322 FA 05 00      lea d, [bp + 5] ; $num
2389   1325 DA            push d
2390   1326 FA 05 00      lea d, [bp + 5] ; $num
2391   1329 2A            mov b, [d]
2392   132A 38 00 00      mov c, 0
2393   132D             ; --- START FACTORS
2394   132D D7            push a
2395   132E FD D8         push g
2396   1330 11            mov a, b
2397   1331 FD 7A         mov g, c
2398   1333 FD 2E 0A 00   mov32 cb, $0000000a
2398   1337 00 00 
2399   1339 FD D8         push g ; save 'g' as the div instruction uses it
2400   133B AE            div a, b ; /, a: quotient, b: remainder
2401   133C FD F1         pop g
2402   133E FD 38         mov c, g
2403   1340 27            mov b, a
2404   1341 FD F1         pop g
2405   1343 E4            pop a
2406   1344             ; --- END FACTORS
2407   1344 E7            pop d
2408   1345 FD 43         mov [d], b
2409   1347             ; i++; 
2410   1347 FA FA FF      lea d, [bp + -6] ; $i
2411   134A 2A            mov b, [d]
2412   134B 38 00 00      mov c, 0
2413   134E 11            mov a, b
2414   134F FD 77         inc b
2415   1351 FA FA FF      lea d, [bp + -6] ; $i
2416   1354 FD 43         mov [d], b
2417   1356 27            mov b, a
2418   1357 0A CD 12      jmp _while59_cond
2419   135A             _while59_exit:
2420   135A             ; while (i > 0) { 
2421   135A             _while66_cond:
2422   135A FA FA FF      lea d, [bp + -6] ; $i
2423   135D 2A            mov b, [d]
2424   135E 38 00 00      mov c, 0
2425   1361             ; --- START RELATIONAL
2426   1361 D7            push a
2427   1362 11            mov a, b
2428   1363 FD 2E 00 00   mov32 cb, $00000000
2428   1367 00 00 
2429   1369 B0            cmp a, b
2430   136A FD 7F         sgt ; >
2431   136C E4            pop a
2432   136D             ; --- END RELATIONAL
2433   136D C0 00 00      cmp b, 0
2434   1370 C6 A2 13      je _while66_exit
2435   1373             _while66_block:
2436   1373             ; i--; 
2437   1373 FA FA FF      lea d, [bp + -6] ; $i
2438   1376 2A            mov b, [d]
2439   1377 38 00 00      mov c, 0
2440   137A 11            mov a, b
2441   137B FD 7D         dec b
2442   137D FA FA FF      lea d, [bp + -6] ; $i
2443   1380 FD 43         mov [d], b
2444   1382 27            mov b, a
2445   1383             ; putchar(digits[i]); 
2446   1383             ; --- START FUNCTION CALL
2447   1383 FA FC FF      lea d, [bp + -4] ; $digits
2448   1386 D7            push a
2449   1387 DA            push d
2450   1388 FA FA FF      lea d, [bp + -6] ; $i
2451   138B 2A            mov b, [d]
2452   138C 38 00 00      mov c, 0
2453   138F E7            pop d
2454   1390 5A            add d, b
2455   1391 E4            pop a
2456   1392 32            mov bl, [d]
2457   1393 A7 00         mov bh, 0
2458   1395 38 00 00      mov c, 0
2459   1398 DD            push bl
2460   1399 07 6A 0F      call putchar
2461   139C 51 01 00      add sp, 1
2462   139F             ; --- END FUNCTION CALL
2463   139F 0A 5A 13      jmp _while66_cond
2464   13A2             _while66_exit:
2465   13A2 F9            leave
2466   13A3 09            ret
2467   13A4             
2468   13A4             printx16:
2469   13A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2470   13A7             ; --- BEGIN INLINE ASM SEGMENT
2471   13A7 FA 05 00      lea d, [bp + 5] ; $hex
2472   13AA 2A            mov b, [d]
2473   13AB             print_u16x_printx16:
2474   13AB DD            push bl
2475   13AC 30            mov bl, bh
2476   13AD 07 CA 13      call _itoa_printx16        ; convert bh to char in A
2477   13B0 2F            mov bl, al        ; save al
2478   13B1 19 00         mov al, 0
2479   13B3 05 03         syscall sys_io        ; display AH
2480   13B5 24            mov ah, bl        ; retrieve al
2481   13B6 19 00         mov al, 0
2482   13B8 05 03         syscall sys_io        ; display AL
2483   13BA EA            pop bl
2484   13BB 07 CA 13      call _itoa_printx16        ; convert bh to char in A
2485   13BE 2F            mov bl, al        ; save al
2486   13BF 19 00         mov al, 0
2487   13C1 05 03         syscall sys_io        ; display AH
2488   13C3 24            mov ah, bl        ; retrieve al
2489   13C4 19 00         mov al, 0
2490   13C6 05 03         syscall sys_io        ; display AL
2491   13C8             ; --- END INLINE ASM SEGMENT
2492   13C8             ; return; 
2493   13C8 F9            leave
2494   13C9 09            ret
2495   13CA             ; --- BEGIN INLINE ASM SEGMENT
2496   13CA             _itoa_printx16:
2497   13CA DA            push d
2498   13CB D8            push b
2499   13CC A7 00         mov bh, 0
2500   13CE FD A4 04      shr bl, 4  
2501   13D1 74            mov d, b
2502   13D2 1F E4 13      mov al, [d + s_hex_digits_printx16]
2503   13D5 23            mov ah, al
2504   13D6 E5            pop b
2505   13D7 D8            push b
2506   13D8 A7 00         mov bh, 0
2507   13DA FD 87 0F      and bl, $0F
2508   13DD 74            mov d, b
2509   13DE 1F E4 13      mov al, [d + s_hex_digits_printx16]
2510   13E1 E5            pop b
2511   13E2 E7            pop d
2512   13E3 09            ret
2513   13E4 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
2513   13E8 34 35 36 37 
2513   13EC 38 39 41 42 
2513   13F0 43 44 45 46 
2514   13F4             ; --- END INLINE ASM SEGMENT
2515   13F4 F9            leave
2516   13F5 09            ret
2517   13F6             
2518   13F6             puts:
2519   13F6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2520   13F9             ; --- BEGIN INLINE ASM SEGMENT
2521   13F9 FA 05 00      lea d, [bp + 5] ; $s
2522   13FC FD 2A         mov d, [d]
2523   13FE             _puts_L1_puts:
2524   13FE 1E            mov al, [d]
2525   13FF B9 00         cmp al, 0
2526   1401 C6 0D 14      jz _puts_END_puts
2527   1404 23            mov ah, al
2528   1405 19 00         mov al, 0
2529   1407 05 03         syscall sys_io
2530   1409 79            inc d
2531   140A 0A FE 13      jmp _puts_L1_puts
2532   140D             _puts_END_puts:
2533   140D 10 00 0A      mov a, $0A00
2534   1410 05 03         syscall sys_io
2535   1412             ; --- END INLINE ASM SEGMENT
2536   1412 F9            leave
2537   1413 09            ret
2538   1414             ; --- END TEXT SEGMENT
2539   1414             
2540   1414             ; --- BEGIN DATA SEGMENT
2541   1414             _clear_data: 
2542   1414 00          .db 
2543   1415 1B 5B 32 4A .db $1b,$5b,$32,$4a,$1b,$5b,$48,$00,
2543   1419 1B 5B 48 00 
2544   141D 00 00 00    .fill 3, 0
2545   1420 00 00 00 00 _nextState_data: .fill 1200, 0
2545   1424 00 00 00 00 
2545   1428 00 00 00 00 
2545   142C 00 00 00 00 
2545   1430 00 00 00 00 
2545   1434 00 00 00 00 
2545   1438 00 00 00 00 
2545   143C 00 00 00 00 
2545   1440 00 00 00 00 
2545   1444 00 00 00 00 
2545   1448 00 00 00 00 
2545   144C 00 00 00 00 
2545   1450 00 00 00 00 
2545   1454 00 00 00 00 
2545   1458 00 00 00 00 
2545   145C 00 00 00 00 
2545   1460 00 00 00 00 
2545   1464 00 00 00 00 
2545   1468 00 00 00 00 
2545   146C 00 00 00 00 
2545   1470 00 00 00 00 
2545   1474 00 00 00 00 
2545   1478 00 00 00 00 
2545   147C 00 00 00 00 
2545   1480 00 00 00 00 
2545   1484 00 00 00 00 
2545   1488 00 00 00 00 
2545   148C 00 00 00 00 
2545   1490 00 00 00 00 
2545   1494 00 00 00 00 
2545   1498 00 00 00 00 
2545   149C 00 00 00 00 
2545   14A0 00 00 00 00 
2545   14A4 00 00 00 00 
2545   14A8 00 00 00 00 
2545   14AC 00 00 00 00 
2545   14B0 00 00 00 00 
2545   14B4 00 00 00 00 
2545   14B8 00 00 00 00 
2545   14BC 00 00 00 00 
2545   14C0 00 00 00 00 
2545   14C4 00 00 00 00 
2545   14C8 00 00 00 00 
2545   14CC 00 00 00 00 
2545   14D0 00 00 00 00 
2545   14D4 00 00 00 00 
2545   14D8 00 00 00 00 
2545   14DC 00 00 00 00 
2545   14E0 00 00 00 00 
2545   14E4 00 00 00 00 
2545   14E8 00 00 00 00 
2545   14EC 00 00 00 00 
2545   14F0 00 00 00 00 
2545   14F4 00 00 00 00 
2545   14F8 00 00 00 00 
2545   14FC 00 00 00 00 
2545   1500 00 00 00 00 
2545   1504 00 00 00 00 
2545   1508 00 00 00 00 
2545   150C 00 00 00 00 
2545   1510 00 00 00 00 
2545   1514 00 00 00 00 
2545   1518 00 00 00 00 
2545   151C 00 00 00 00 
2545   1520 00 00 00 00 
2545   1524 00 00 00 00 
2545   1528 00 00 00 00 
2545   152C 00 00 00 00 
2545   1530 00 00 00 00 
2545   1534 00 00 00 00 
2545   1538 00 00 00 00 
2545   153C 00 00 00 00 
2545   1540 00 00 00 00 
2545   1544 00 00 00 00 
2545   1548 00 00 00 00 
2545   154C 00 00 00 00 
2545   1550 00 00 00 00 
2545   1554 00 00 00 00 
2545   1558 00 00 00 00 
2545   155C 00 00 00 00 
2545   1560 00 00 00 00 
2545   1564 00 00 00 00 
2545   1568 00 00 00 00 
2545   156C 00 00 00 00 
2545   1570 00 00 00 00 
2545   1574 00 00 00 00 
2545   1578 00 00 00 00 
2545   157C 00 00 00 00 
2545   1580 00 00 00 00 
2545   1584 00 00 00 00 
2545   1588 00 00 00 00 
2545   158C 00 00 00 00 
2545   1590 00 00 00 00 
2545   1594 00 00 00 00 
2545   1598 00 00 00 00 
2545   159C 00 00 00 00 
2545   15A0 00 00 00 00 
2545   15A4 00 00 00 00 
2545   15A8 00 00 00 00 
2545   15AC 00 00 00 00 
2545   15B0 00 00 00 00 
2545   15B4 00 00 00 00 
2545   15B8 00 00 00 00 
2545   15BC 00 00 00 00 
2545   15C0 00 00 00 00 
2545   15C4 00 00 00 00 
2545   15C8 00 00 00 00 
2545   15CC 00 00 00 00 
2545   15D0 00 00 00 00 
2545   15D4 00 00 00 00 
2545   15D8 00 00 00 00 
2545   15DC 00 00 00 00 
2545   15E0 00 00 00 00 
2545   15E4 00 00 00 00 
2545   15E8 00 00 00 00 
2545   15EC 00 00 00 00 
2545   15F0 00 00 00 00 
2545   15F4 00 00 00 00 
2545   15F8 00 00 00 00 
2545   15FC 00 00 00 00 
2545   1600 00 00 00 00 
2545   1604 00 00 00 00 
2545   1608 00 00 00 00 
2545   160C 00 00 00 00 
2545   1610 00 00 00 00 
2545   1614 00 00 00 00 
2545   1618 00 00 00 00 
2545   161C 00 00 00 00 
2545   1620 00 00 00 00 
2545   1624 00 00 00 00 
2545   1628 00 00 00 00 
2545   162C 00 00 00 00 
2545   1630 00 00 00 00 
2545   1634 00 00 00 00 
2545   1638 00 00 00 00 
2545   163C 00 00 00 00 
2545   1640 00 00 00 00 
2545   1644 00 00 00 00 
2545   1648 00 00 00 00 
2545   164C 00 00 00 00 
2545   1650 00 00 00 00 
2545   1654 00 00 00 00 
2545   1658 00 00 00 00 
2545   165C 00 00 00 00 
2545   1660 00 00 00 00 
2545   1664 00 00 00 00 
2545   1668 00 00 00 00 
2545   166C 00 00 00 00 
2545   1670 00 00 00 00 
2545   1674 00 00 00 00 
2545   1678 00 00 00 00 
2545   167C 00 00 00 00 
2545   1680 00 00 00 00 
2545   1684 00 00 00 00 
2545   1688 00 00 00 00 
2545   168C 00 00 00 00 
2545   1690 00 00 00 00 
2545   1694 00 00 00 00 
2545   1698 00 00 00 00 
2545   169C 00 00 00 00 
2545   16A0 00 00 00 00 
2545   16A4 00 00 00 00 
2545   16A8 00 00 00 00 
2545   16AC 00 00 00 00 
2545   16B0 00 00 00 00 
2545   16B4 00 00 00 00 
2545   16B8 00 00 00 00 
2545   16BC 00 00 00 00 
2545   16C0 00 00 00 00 
2545   16C4 00 00 00 00 
2545   16C8 00 00 00 00 
2545   16CC 00 00 00 00 
2545   16D0 00 00 00 00 
2545   16D4 00 00 00 00 
2545   16D8 00 00 00 00 
2545   16DC 00 00 00 00 
2545   16E0 00 00 00 00 
2545   16E4 00 00 00 00 
2545   16E8 00 00 00 00 
2545   16EC 00 00 00 00 
2545   16F0 00 00 00 00 
2545   16F4 00 00 00 00 
2545   16F8 00 00 00 00 
2545   16FC 00 00 00 00 
2545   1700 00 00 00 00 
2545   1704 00 00 00 00 
2545   1708 00 00 00 00 
2545   170C 00 00 00 00 
2545   1710 00 00 00 00 
2545   1714 00 00 00 00 
2545   1718 00 00 00 00 
2545   171C 00 00 00 00 
2545   1720 00 00 00 00 
2545   1724 00 00 00 00 
2545   1728 00 00 00 00 
2545   172C 00 00 00 00 
2545   1730 00 00 00 00 
2545   1734 00 00 00 00 
2545   1738 00 00 00 00 
2545   173C 00 00 00 00 
2545   1740 00 00 00 00 
2545   1744 00 00 00 00 
2545   1748 00 00 00 00 
2545   174C 00 00 00 00 
2545   1750 00 00 00 00 
2545   1754 00 00 00 00 
2545   1758 00 00 00 00 
2545   175C 00 00 00 00 
2545   1760 00 00 00 00 
2545   1764 00 00 00 00 
2545   1768 00 00 00 00 
2545   176C 00 00 00 00 
2545   1770 00 00 00 00 
2545   1774 00 00 00 00 
2545   1778 00 00 00 00 
2545   177C 00 00 00 00 
2545   1780 00 00 00 00 
2545   1784 00 00 00 00 
2545   1788 00 00 00 00 
2545   178C 00 00 00 00 
2545   1790 00 00 00 00 
2545   1794 00 00 00 00 
2545   1798 00 00 00 00 
2545   179C 00 00 00 00 
2545   17A0 00 00 00 00 
2545   17A4 00 00 00 00 
2545   17A8 00 00 00 00 
2545   17AC 00 00 00 00 
2545   17B0 00 00 00 00 
2545   17B4 00 00 00 00 
2545   17B8 00 00 00 00 
2545   17BC 00 00 00 00 
2545   17C0 00 00 00 00 
2545   17C4 00 00 00 00 
2545   17C8 00 00 00 00 
2545   17CC 00 00 00 00 
2545   17D0 00 00 00 00 
2545   17D4 00 00 00 00 
2545   17D8 00 00 00 00 
2545   17DC 00 00 00 00 
2545   17E0 00 00 00 00 
2545   17E4 00 00 00 00 
2545   17E8 00 00 00 00 
2545   17EC 00 00 00 00 
2545   17F0 00 00 00 00 
2545   17F4 00 00 00 00 
2545   17F8 00 00 00 00 
2545   17FC 00 00 00 00 
2545   1800 00 00 00 00 
2545   1804 00 00 00 00 
2545   1808 00 00 00 00 
2545   180C 00 00 00 00 
2545   1810 00 00 00 00 
2545   1814 00 00 00 00 
2545   1818 00 00 00 00 
2545   181C 00 00 00 00 
2545   1820 00 00 00 00 
2545   1824 00 00 00 00 
2545   1828 00 00 00 00 
2545   182C 00 00 00 00 
2545   1830 00 00 00 00 
2545   1834 00 00 00 00 
2545   1838 00 00 00 00 
2545   183C 00 00 00 00 
2545   1840 00 00 00 00 
2545   1844 00 00 00 00 
2545   1848 00 00 00 00 
2545   184C 00 00 00 00 
2545   1850 00 00 00 00 
2545   1854 00 00 00 00 
2545   1858 00 00 00 00 
2545   185C 00 00 00 00 
2545   1860 00 00 00 00 
2545   1864 00 00 00 00 
2545   1868 00 00 00 00 
2545   186C 00 00 00 00 
2545   1870 00 00 00 00 
2545   1874 00 00 00 00 
2545   1878 00 00 00 00 
2545   187C 00 00 00 00 
2545   1880 00 00 00 00 
2545   1884 00 00 00 00 
2545   1888 00 00 00 00 
2545   188C 00 00 00 00 
2545   1890 00 00 00 00 
2545   1894 00 00 00 00 
2545   1898 00 00 00 00 
2545   189C 00 00 00 00 
2545   18A0 00 00 00 00 
2545   18A4 00 00 00 00 
2545   18A8 00 00 00 00 
2545   18AC 00 00 00 00 
2545   18B0 00 00 00 00 
2545   18B4 00 00 00 00 
2545   18B8 00 00 00 00 
2545   18BC 00 00 00 00 
2545   18C0 00 00 00 00 
2545   18C4 00 00 00 00 
2545   18C8 00 00 00 00 
2545   18CC 00 00 00 00 
2546   18D0             _currState_data: 
2547   18D0 00          .db 
2548   18D1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2548   18D5 20 20 20 20 
2548   18D9 20 20 20 20 
2548   18DD 20 20 20 20 
2548   18E1 20 20 20 20 
2548   18E5 20 20 20 20 
2548   18E9 20 20 20 20 
2548   18ED 20 20 
2549   18EF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2549   18F3 20 20 20 20 
2549   18F7 20 20 20 20 
2549   18FB 20 20 20 20 
2549   18FF 20 20 20 20 
2549   1903 20 20 20 20 
2549   1907 20 20 20 20 
2549   190B 20 20 
2550   190D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2550   1911 20 20 20 20 
2550   1915 20 20 20 20 
2550   1919 20 20 20 20 
2550   191D 20 20 20 20 
2550   1921 20 20 20 20 
2550   1925 20 20 20 20 
2550   1929 20 20 
2551   192B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2551   192F 20 20 20 20 
2551   1933 20 20 20 20 
2551   1937 20 20 20 20 
2551   193B 20 20 20 20 
2551   193F 20 20 20 20 
2551   1943 20 20 20 20 
2551   1947 20 20 
2552   1949 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2552   194D 20 20 20 20 
2552   1951 20 20 20 20 
2552   1955 20 20 20 20 
2552   1959 20 20 20 20 
2552   195D 20 20 20 20 
2552   1961 20 20 20 40 
2552   1965 20 20 
2553   1967 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2553   196B 20 20 20 20 
2553   196F 20 20 20 20 
2553   1973 20 20 20 20 
2553   1977 20 20 20 20 
2553   197B 20 20 20 20 
2553   197F 20 20 20 20 
2553   1983 20 20 
2554   1985 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2554   1989 20 40 20 40 
2554   198D 20 20 20 20 
2554   1991 20 20 20 20 
2554   1995 20 20 20 20 
2554   1999 20 20 20 20 
2554   199D 20 20 20 20 
2554   19A1 20 20 
2555   19A3 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
2555   19A7 20 40 40 20 
2555   19AB 20 20 20 20 
2555   19AF 20 40 40 20 
2555   19B3 20 20 20 20 
2555   19B7 20 20 20 20 
2555   19BB 20 20 20 40 
2555   19BF 40 20 
2556   19C1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2556   19C5 20 20 20 20 
2556   19C9 20 20 20 20 
2556   19CD 20 20 40 20 
2556   19D1 20 20 40 20 
2556   19D5 20 20 20 40 
2556   19D9 40 20 20 20 
2556   19DD 20 20 
2557   19DF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
2557   19E3 20 20 20 40 
2557   19E7 40 20 20 20 
2557   19EB 20 40 40 20 
2557   19EF 20 20 20 20 
2557   19F3 20 20 20 40 
2557   19F7 20 20 20 20 
2557   19FB 20 40 
2558   19FD 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2558   1A01 40 20 20 20 
2558   1A05 20 20 20 20 
2558   1A09 20 20 20 20 
2558   1A0D 20 20 20 20 
2558   1A11 20 20 20 40 
2558   1A15 40 20 20 20 
2558   1A19 20 20 
2559   1A1B 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2559   1A1F 20 20 20 40 
2559   1A23 20 40 40 20 
2559   1A27 20 20 20 40 
2559   1A2B 20 40 20 20 
2559   1A2F 20 20 20 20 
2559   1A33 20 20 20 20 
2559   1A37 20 20 
2560   1A39 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2560   1A3D 20 20 20 20 
2560   1A41 20 20 20 20 
2560   1A45 20 40 20 20 
2560   1A49 20 20 20 40 
2560   1A4D 20 20 20 20 
2560   1A51 20 20 20 40 
2560   1A55 20 20 
2561   1A57 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
2561   1A5B 20 20 20 20 
2561   1A5F 20 20 20 20 
2561   1A63 20 20 20 20 
2561   1A67 20 20 20 20 
2561   1A6B 20 20 20 20 
2561   1A6F 40 20 20 20 
2561   1A73 40 20 
2562   1A75 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2562   1A79 20 20 20 20 
2562   1A7D 20 20 20 20 
2562   1A81 20 20 20 20 
2562   1A85 20 20 20 20 
2562   1A89 20 20 20 20 
2562   1A8D 20 20 20 20 
2562   1A91 20 20 
2563   1A93 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2563   1A97 20 40 40 20 
2563   1A9B 20 20 20 20 
2563   1A9F 20 20 20 20 
2563   1AA3 20 20 20 20 
2563   1AA7 20 20 20 20 
2563   1AAB 20 20 20 20 
2563   1AAF 20 20 
2564   1AB1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2564   1AB5 20 20 20 20 
2564   1AB9 20 20 20 20 
2564   1ABD 20 20 20 20 
2564   1AC1 20 20 20 20 
2564   1AC5 20 20 20 20 
2564   1AC9 20 20 20 20 
2564   1ACD 20 20 
2565   1ACF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2565   1AD3 20 20 20 20 
2565   1AD7 20 20 20 20 
2565   1ADB 20 20 20 20 
2565   1ADF 20 20 20 20 
2565   1AE3 20 20 20 20 
2565   1AE7 20 20 20 20 
2565   1AEB 20 20 
2566   1AED 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2566   1AF1 20 20 20 20 
2566   1AF5 20 20 20 20 
2566   1AF9 20 20 20 20 
2566   1AFD 20 20 20 20 
2566   1B01 20 20 20 20 
2566   1B05 20 20 20 20 
2566   1B09 20 20 
2567   1B0B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2567   1B0F 20 20 20 20 
2567   1B13 20 20 20 20 
2567   1B17 20 20 20 20 
2567   1B1B 20 20 20 20 
2567   1B1F 20 20 20 20 
2567   1B23 20 20 20 20 
2567   1B27 20 20 
2568   1B29 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2568   1B2D 20 20 20 20 
2568   1B31 20 20 20 20 
2568   1B35 20 20 20 20 
2568   1B39 20 20 20 20 
2568   1B3D 20 20 20 20 
2568   1B41 20 20 20 20 
2568   1B45 20 20 
2569   1B47 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2569   1B4B 20 20 20 20 
2569   1B4F 20 20 20 20 
2569   1B53 20 20 20 20 
2569   1B57 20 20 20 20 
2569   1B5B 20 20 20 20 
2569   1B5F 20 20 20 20 
2569   1B63 20 20 
2570   1B65 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2570   1B69 20 20 20 20 
2570   1B6D 20 20 20 20 
2570   1B71 20 20 20 20 
2570   1B75 20 20 20 20 
2570   1B79 20 20 20 20 
2570   1B7D 20 20 20 20 
2570   1B81 20 20 
2571   1B83 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2571   1B87 20 20 20 20 
2571   1B8B 20 20 20 20 
2571   1B8F 20 20 20 20 
2571   1B93 20 20 20 20 
2571   1B97 20 20 20 20 
2571   1B9B 20 20 20 20 
2571   1B9F 20 20 
2572   1BA1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2572   1BA5 20 20 20 20 
2572   1BA9 20 20 20 20 
2572   1BAD 20 20 20 20 
2572   1BB1 20 20 20 20 
2572   1BB5 20 20 20 20 
2572   1BB9 20 20 20 20 
2572   1BBD 20 20 
2573   1BBF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2573   1BC3 20 20 20 20 
2573   1BC7 20 20 20 20 
2573   1BCB 20 20 20 20 
2573   1BCF 20 20 20 20 
2573   1BD3 20 20 20 20 
2573   1BD7 20 20 20 20 
2573   1BDB 20 20 
2574   1BDD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2574   1BE1 20 20 20 20 
2574   1BE5 20 20 20 20 
2574   1BE9 20 20 20 20 
2574   1BED 20 20 20 20 
2575   1BF1 00 00 00 00 .fill 400, 0
2575   1BF5 00 00 00 00 
2575   1BF9 00 00 00 00 
2575   1BFD 00 00 00 00 
2575   1C01 00 00 00 00 
2575   1C05 00 00 00 00 
2575   1C09 00 00 00 00 
2575   1C0D 00 00 00 00 
2575   1C11 00 00 00 00 
2575   1C15 00 00 00 00 
2575   1C19 00 00 00 00 
2575   1C1D 00 00 00 00 
2575   1C21 00 00 00 00 
2575   1C25 00 00 00 00 
2575   1C29 00 00 00 00 
2575   1C2D 00 00 00 00 
2575   1C31 00 00 00 00 
2575   1C35 00 00 00 00 
2575   1C39 00 00 00 00 
2575   1C3D 00 00 00 00 
2575   1C41 00 00 00 00 
2575   1C45 00 00 00 00 
2575   1C49 00 00 00 00 
2575   1C4D 00 00 00 00 
2575   1C51 00 00 00 00 
2575   1C55 00 00 00 00 
2575   1C59 00 00 00 00 
2575   1C5D 00 00 00 00 
2575   1C61 00 00 00 00 
2575   1C65 00 00 00 00 
2575   1C69 00 00 00 00 
2575   1C6D 00 00 00 00 
2575   1C71 00 00 00 00 
2575   1C75 00 00 00 00 
2575   1C79 00 00 00 00 
2575   1C7D 00 00 00 00 
2575   1C81 00 00 00 00 
2575   1C85 00 00 00 00 
2575   1C89 00 00 00 00 
2575   1C8D 00 00 00 00 
2575   1C91 00 00 00 00 
2575   1C95 00 00 00 00 
2575   1C99 00 00 00 00 
2575   1C9D 00 00 00 00 
2575   1CA1 00 00 00 00 
2575   1CA5 00 00 00 00 
2575   1CA9 00 00 00 00 
2575   1CAD 00 00 00 00 
2575   1CB1 00 00 00 00 
2575   1CB5 00 00 00 00 
2575   1CB9 00 00 00 00 
2575   1CBD 00 00 00 00 
2575   1CC1 00 00 00 00 
2575   1CC5 00 00 00 00 
2575   1CC9 00 00 00 00 
2575   1CCD 00 00 00 00 
2575   1CD1 00 00 00 00 
2575   1CD5 00 00 00 00 
2575   1CD9 00 00 00 00 
2575   1CDD 00 00 00 00 
2575   1CE1 00 00 00 00 
2575   1CE5 00 00 00 00 
2575   1CE9 00 00 00 00 
2575   1CED 00 00 00 00 
2575   1CF1 00 00 00 00 
2575   1CF5 00 00 00 00 
2575   1CF9 00 00 00 00 
2575   1CFD 00 00 00 00 
2575   1D01 00 00 00 00 
2575   1D05 00 00 00 00 
2575   1D09 00 00 00 00 
2575   1D0D 00 00 00 00 
2575   1D11 00 00 00 00 
2575   1D15 00 00 00 00 
2575   1D19 00 00 00 00 
2575   1D1D 00 00 00 00 
2575   1D21 00 00 00 00 
2575   1D25 00 00 00 00 
2575   1D29 00 00 00 00 
2575   1D2D 00 00 00 00 
2575   1D31 00 00 00 00 
2575   1D35 00 00 00 00 
2575   1D39 00 00 00 00 
2575   1D3D 00 00 00 00 
2575   1D41 00 00 00 00 
2575   1D45 00 00 00 00 
2575   1D49 00 00 00 00 
2575   1D4D 00 00 00 00 
2575   1D51 00 00 00 00 
2575   1D55 00 00 00 00 
2575   1D59 00 00 00 00 
2575   1D5D 00 00 00 00 
2575   1D61 00 00 00 00 
2575   1D65 00 00 00 00 
2575   1D69 00 00 00 00 
2575   1D6D 00 00 00 00 
2575   1D71 00 00 00 00 
2575   1D75 00 00 00 00 
2575   1D79 00 00 00 00 
2575   1D7D 00 00 00 00 
2576   1D81 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
2576   1D85 65 73 73 20 
2576   1D89 43 54 52 4C 
2576   1D8D 2B 43 20 74 
2576   1D91 6F 20 71 75 
2576   1D95 69 74 2E 0A 
2576   1D99 0D 00 
2577   1D9B 40 20 00    _s1: .db "@ ", 0
2578   1D9E 2E 20 00    _s2: .db ". ", 0
2579   1DA1 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
2579   1DA5 70 65 63 74 
2579   1DA9 65 64 20 66 
2579   1DAD 6F 72 6D 61 
2579   1DB1 74 20 69 6E 
2579   1DB5 20 70 72 69 
2579   1DB9 6E 74 66 2E 
2579   1DBD 00 
2580   1DBE 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
2580   1DC2 72 3A 20 55 
2580   1DC6 6E 6B 6E 6F 
2580   1DCA 77 6E 20 61 
2580   1DCE 72 67 75 6D 
2580   1DD2 65 6E 74 20 
2580   1DD6 74 79 70 65 
2580   1DDA 2E 0A 00 
2581   1DDD             
2582   1DDD DF 1D       _heap_top: .dw _heap
2583   1DDF 00          _heap: .db 0
2584   1DE0             ; --- END DATA SEGMENT
2585   1DE0             
2586   1DE0             .end
tasm: Number of errors = 0
