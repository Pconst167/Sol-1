0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <  30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 1E 00      mov b, $1e
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; < 
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 98 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j = 0; j <  40    ; j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 28 00      mov b, $28
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; < 
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 88 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; nextState[i][j] = currState[i][j]; 
0057   0445 3B 7F 19      mov d, _nextState_data ; $nextState
0058   0448 D7            push a
0059   0449 DA            push d
0060   044A FA FF FF      lea d, [bp + -1] ; $i
0061   044D 2A            mov b, [d]
0062   044E E7            pop d
0063   044F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0064   0453 DA            push d
0065   0454 FA FD FF      lea d, [bp + -3] ; $j
0066   0457 2A            mov b, [d]
0067   0458 E7            pop d
0068   0459 5A            add d, b
0069   045A E4            pop a
0070   045B DA            push d
0071   045C 3B 2F 1E      mov d, _currState_data ; $currState
0072   045F D7            push a
0073   0460 DA            push d
0074   0461 FA FF FF      lea d, [bp + -1] ; $i
0075   0464 2A            mov b, [d]
0076   0465 E7            pop d
0077   0466 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0078   046A DA            push d
0079   046B FA FD FF      lea d, [bp + -3] ; $j
0080   046E 2A            mov b, [d]
0081   046F E7            pop d
0082   0470 5A            add d, b
0083   0471 E4            pop a
0084   0472 32            mov bl, [d]
0085   0473 A7 00         mov bh, 0
0086   0475 E7            pop d
0087   0476 FD 3E         mov [d], bl
0088   0478             _for2_update:
0089   0478 FA FD FF      lea d, [bp + -3] ; $j
0090   047B 2A            mov b, [d]
0091   047C D8            push b
0092   047D FD 77         inc b
0093   047F FA FD FF      lea d, [bp + -3] ; $j
0094   0482 FD 43         mov [d], b
0095   0484 E5            pop b
0096   0485 0A 32 04      jmp _for2_cond
0097   0488             _for2_exit:
0098   0488             _for1_update:
0099   0488 FA FF FF      lea d, [bp + -1] ; $i
0100   048B 2A            mov b, [d]
0101   048C D8            push b
0102   048D FD 77         inc b
0103   048F FA FF FF      lea d, [bp + -1] ; $i
0104   0492 FD 43         mov [d], b
0105   0494 E5            pop b
0106   0495 0A 15 04      jmp _for1_cond
0107   0498             _for1_exit:
0108   0498             ;; for(;;){ 
0109   0498             _for3_init:
0110   0498             _for3_cond:
0111   0498             _for3_block:
0112   0498             ;; for(i = 1; i <  30     +-1; i++){ 
0113   0498             _for4_init:
0114   0498 FA FF FF      lea d, [bp + -1] ; $i
0115   049B DA            push d
0116   049C 26 01 00      mov b, $1
0117   049F E7            pop d
0118   04A0 FD 43         mov [d], b
0119   04A2             _for4_cond:
0120   04A2 FA FF FF      lea d, [bp + -1] ; $i
0121   04A5 2A            mov b, [d]
0122   04A6             ; START RELATIONAL
0123   04A6 D7            push a
0124   04A7 11            mov a, b
0125   04A8 26 1E 00      mov b, $1e
0126   04AB             ; START TERMS
0127   04AB D7            push a
0128   04AC 11            mov a, b
0129   04AD 26 01 00      mov b, $1
0130   04B0 FD 97         neg b
0131   04B2 54            add a, b
0132   04B3 27            mov b, a
0133   04B4 E4            pop a
0134   04B5             ; END TERMS
0135   04B5 B0            cmp a, b
0136   04B6 FD 73         slt ; < 
0137   04B8 E4            pop a
0138   04B9             ; END RELATIONAL
0139   04B9 C0 00 00      cmp b, 0
0140   04BC C6 99 05      je _for4_exit
0141   04BF             _for4_block:
0142   04BF             ;; for(j = 1; j <  40    +-1; j++){ 
0143   04BF             _for5_init:
0144   04BF FA FD FF      lea d, [bp + -3] ; $j
0145   04C2 DA            push d
0146   04C3 26 01 00      mov b, $1
0147   04C6 E7            pop d
0148   04C7 FD 43         mov [d], b
0149   04C9             _for5_cond:
0150   04C9 FA FD FF      lea d, [bp + -3] ; $j
0151   04CC 2A            mov b, [d]
0152   04CD             ; START RELATIONAL
0153   04CD D7            push a
0154   04CE 11            mov a, b
0155   04CF 26 28 00      mov b, $28
0156   04D2             ; START TERMS
0157   04D2 D7            push a
0158   04D3 11            mov a, b
0159   04D4 26 01 00      mov b, $1
0160   04D7 FD 97         neg b
0161   04D9 54            add a, b
0162   04DA 27            mov b, a
0163   04DB E4            pop a
0164   04DC             ; END TERMS
0165   04DC B0            cmp a, b
0166   04DD FD 73         slt ; < 
0167   04DF E4            pop a
0168   04E0             ; END RELATIONAL
0169   04E0 C0 00 00      cmp b, 0
0170   04E3 C6 89 05      je _for5_exit
0171   04E6             _for5_block:
0172   04E6             ;; n = neighbours(i, j); 
0173   04E6 FA FB FF      lea d, [bp + -5] ; $n
0174   04E9 DA            push d
0175   04EA FA FD FF      lea d, [bp + -3] ; $j
0176   04ED 2A            mov b, [d]
0177   04EE FD AB         swp b
0178   04F0 D8            push b
0179   04F1 FA FF FF      lea d, [bp + -1] ; $i
0180   04F4 2A            mov b, [d]
0181   04F5 FD AB         swp b
0182   04F7 D8            push b
0183   04F8 07 32 17      call neighbours
0184   04FB 51 04 00      add sp, 4
0185   04FE E7            pop d
0186   04FF FD 43         mov [d], b
0187   0501             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0188   0501             _if6_cond:
0189   0501 FA FB FF      lea d, [bp + -5] ; $n
0190   0504 2A            mov b, [d]
0191   0505             ; START RELATIONAL
0192   0505 D7            push a
0193   0506 11            mov a, b
0194   0507 26 02 00      mov b, $2
0195   050A B0            cmp a, b
0196   050B FD 73         slt ; < 
0197   050D E4            pop a
0198   050E             ; END RELATIONAL
0199   050E D7            push a
0200   050F 11            mov a, b
0201   0510 FA FB FF      lea d, [bp + -5] ; $n
0202   0513 2A            mov b, [d]
0203   0514             ; START RELATIONAL
0204   0514 D7            push a
0205   0515 11            mov a, b
0206   0516 26 03 00      mov b, $3
0207   0519 B0            cmp a, b
0208   051A FD 7F         sgt ; >
0209   051C E4            pop a
0210   051D             ; END RELATIONAL
0211   051D FD A8         sor a, b ; ||
0212   051F E4            pop a
0213   0520 C0 00 00      cmp b, 0
0214   0523 C6 46 05      je _if6_else
0215   0526             _if6_true:
0216   0526             ;; nextState[i][j] = ' '; 
0217   0526 3B 7F 19      mov d, _nextState_data ; $nextState
0218   0529 D7            push a
0219   052A DA            push d
0220   052B FA FF FF      lea d, [bp + -1] ; $i
0221   052E 2A            mov b, [d]
0222   052F E7            pop d
0223   0530 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0224   0534 DA            push d
0225   0535 FA FD FF      lea d, [bp + -3] ; $j
0226   0538 2A            mov b, [d]
0227   0539 E7            pop d
0228   053A 5A            add d, b
0229   053B E4            pop a
0230   053C DA            push d
0231   053D 26 20 00      mov b, $20
0232   0540 E7            pop d
0233   0541 FD 3E         mov [d], bl
0234   0543 0A 79 05      jmp _if6_exit
0235   0546             _if6_else:
0236   0546             ;; if(n == 3) nextState[i][j] = '@'; 
0237   0546             _if7_cond:
0238   0546 FA FB FF      lea d, [bp + -5] ; $n
0239   0549 2A            mov b, [d]
0240   054A             ; START RELATIONAL
0241   054A D7            push a
0242   054B 11            mov a, b
0243   054C 26 03 00      mov b, $3
0244   054F B0            cmp a, b
0245   0550 FD 71         seq ; ==
0246   0552 E4            pop a
0247   0553             ; END RELATIONAL
0248   0553 C0 00 00      cmp b, 0
0249   0556 C6 79 05      je _if7_exit
0250   0559             _if7_true:
0251   0559             ;; nextState[i][j] = '@'; 
0252   0559 3B 7F 19      mov d, _nextState_data ; $nextState
0253   055C D7            push a
0254   055D DA            push d
0255   055E FA FF FF      lea d, [bp + -1] ; $i
0256   0561 2A            mov b, [d]
0257   0562 E7            pop d
0258   0563 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0259   0567 DA            push d
0260   0568 FA FD FF      lea d, [bp + -3] ; $j
0261   056B 2A            mov b, [d]
0262   056C E7            pop d
0263   056D 5A            add d, b
0264   056E E4            pop a
0265   056F DA            push d
0266   0570 26 40 00      mov b, $40
0267   0573 E7            pop d
0268   0574 FD 3E         mov [d], bl
0269   0576 0A 79 05      jmp _if7_exit
0270   0579             _if7_exit:
0271   0579             _if6_exit:
0272   0579             _for5_update:
0273   0579 FA FD FF      lea d, [bp + -3] ; $j
0274   057C 2A            mov b, [d]
0275   057D D8            push b
0276   057E FD 77         inc b
0277   0580 FA FD FF      lea d, [bp + -3] ; $j
0278   0583 FD 43         mov [d], b
0279   0585 E5            pop b
0280   0586 0A C9 04      jmp _for5_cond
0281   0589             _for5_exit:
0282   0589             _for4_update:
0283   0589 FA FF FF      lea d, [bp + -1] ; $i
0284   058C 2A            mov b, [d]
0285   058D D8            push b
0286   058E FD 77         inc b
0287   0590 FA FF FF      lea d, [bp + -1] ; $i
0288   0593 FD 43         mov [d], b
0289   0595 E5            pop b
0290   0596 0A A2 04      jmp _for4_cond
0291   0599             _for4_exit:
0292   0599             ;; for(i = 1; i <  30     +-1; i++){ 
0293   0599             _for8_init:
0294   0599 FA FF FF      lea d, [bp + -1] ; $i
0295   059C DA            push d
0296   059D 26 01 00      mov b, $1
0297   05A0 E7            pop d
0298   05A1 FD 43         mov [d], b
0299   05A3             _for8_cond:
0300   05A3 FA FF FF      lea d, [bp + -1] ; $i
0301   05A6 2A            mov b, [d]
0302   05A7             ; START RELATIONAL
0303   05A7 D7            push a
0304   05A8 11            mov a, b
0305   05A9 26 1E 00      mov b, $1e
0306   05AC             ; START TERMS
0307   05AC D7            push a
0308   05AD 11            mov a, b
0309   05AE 26 01 00      mov b, $1
0310   05B1 FD 97         neg b
0311   05B3 54            add a, b
0312   05B4 27            mov b, a
0313   05B5 E4            pop a
0314   05B6             ; END TERMS
0315   05B6 B0            cmp a, b
0316   05B7 FD 73         slt ; < 
0317   05B9 E4            pop a
0318   05BA             ; END RELATIONAL
0319   05BA C0 00 00      cmp b, 0
0320   05BD C6 3A 06      je _for8_exit
0321   05C0             _for8_block:
0322   05C0             ;; for(j = 1; j <  40    +-1; j++){ 
0323   05C0             _for9_init:
0324   05C0 FA FD FF      lea d, [bp + -3] ; $j
0325   05C3 DA            push d
0326   05C4 26 01 00      mov b, $1
0327   05C7 E7            pop d
0328   05C8 FD 43         mov [d], b
0329   05CA             _for9_cond:
0330   05CA FA FD FF      lea d, [bp + -3] ; $j
0331   05CD 2A            mov b, [d]
0332   05CE             ; START RELATIONAL
0333   05CE D7            push a
0334   05CF 11            mov a, b
0335   05D0 26 28 00      mov b, $28
0336   05D3             ; START TERMS
0337   05D3 D7            push a
0338   05D4 11            mov a, b
0339   05D5 26 01 00      mov b, $1
0340   05D8 FD 97         neg b
0341   05DA 54            add a, b
0342   05DB 27            mov b, a
0343   05DC E4            pop a
0344   05DD             ; END TERMS
0345   05DD B0            cmp a, b
0346   05DE FD 73         slt ; < 
0347   05E0 E4            pop a
0348   05E1             ; END RELATIONAL
0349   05E1 C0 00 00      cmp b, 0
0350   05E4 C6 2A 06      je _for9_exit
0351   05E7             _for9_block:
0352   05E7             ;; currState[i][j] = nextState[i][j]; 
0353   05E7 3B 2F 1E      mov d, _currState_data ; $currState
0354   05EA D7            push a
0355   05EB DA            push d
0356   05EC FA FF FF      lea d, [bp + -1] ; $i
0357   05EF 2A            mov b, [d]
0358   05F0 E7            pop d
0359   05F1 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0360   05F5 DA            push d
0361   05F6 FA FD FF      lea d, [bp + -3] ; $j
0362   05F9 2A            mov b, [d]
0363   05FA E7            pop d
0364   05FB 5A            add d, b
0365   05FC E4            pop a
0366   05FD DA            push d
0367   05FE 3B 7F 19      mov d, _nextState_data ; $nextState
0368   0601 D7            push a
0369   0602 DA            push d
0370   0603 FA FF FF      lea d, [bp + -1] ; $i
0371   0606 2A            mov b, [d]
0372   0607 E7            pop d
0373   0608 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0374   060C DA            push d
0375   060D FA FD FF      lea d, [bp + -3] ; $j
0376   0610 2A            mov b, [d]
0377   0611 E7            pop d
0378   0612 5A            add d, b
0379   0613 E4            pop a
0380   0614 32            mov bl, [d]
0381   0615 A7 00         mov bh, 0
0382   0617 E7            pop d
0383   0618 FD 3E         mov [d], bl
0384   061A             _for9_update:
0385   061A FA FD FF      lea d, [bp + -3] ; $j
0386   061D 2A            mov b, [d]
0387   061E D8            push b
0388   061F FD 77         inc b
0389   0621 FA FD FF      lea d, [bp + -3] ; $j
0390   0624 FD 43         mov [d], b
0391   0626 E5            pop b
0392   0627 0A CA 05      jmp _for9_cond
0393   062A             _for9_exit:
0394   062A             _for8_update:
0395   062A FA FF FF      lea d, [bp + -1] ; $i
0396   062D 2A            mov b, [d]
0397   062E D8            push b
0398   062F FD 77         inc b
0399   0631 FA FF FF      lea d, [bp + -1] ; $i
0400   0634 FD 43         mov [d], b
0401   0636 E5            pop b
0402   0637 0A A3 05      jmp _for8_cond
0403   063A             _for8_exit:
0404   063A             ;; printf(clear); 
0405   063A 3B 74 19      mov d, _clear_data ; $clear
0406   063D 2D            mov b, d
0407   063E FD AB         swp b
0408   0640 D8            push b
0409   0641 07 16 08      call printf
0410   0644 51 02 00      add sp, 2
0411   0647             ;; show(); 
0412   0647 07 49 16      call show
0413   064A             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0414   064A 26 DF 22      mov b, __s0 ; "\n\rPress CTRL+C to quit.\n\r"
0415   064D FD AB         swp b
0416   064F D8            push b
0417   0650 07 60 11      call puts
0418   0653 51 02 00      add sp, 2
0419   0656             _for3_update:
0420   0656 0A 98 04      jmp _for3_cond
0421   0659             _for3_exit:
0422   0659 05 0B         syscall sys_terminate_proc
0423   065B             
0424   065B             strcpy:
0425   065B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0426   065E             ; $psrc 
0427   065E             ; $pdest 
0428   065E 52 04 00      sub sp, 4
0429   0661             ;; psrc = src; 
0430   0661 FA FF FF      lea d, [bp + -1] ; $psrc
0431   0664 DA            push d
0432   0665 FA 07 00      lea d, [bp + 7] ; $src
0433   0668 2A            mov b, [d]
0434   0669 E7            pop d
0435   066A FD 43         mov [d], b
0436   066C             ;; pdest = dest; 
0437   066C FA FD FF      lea d, [bp + -3] ; $pdest
0438   066F DA            push d
0439   0670 FA 05 00      lea d, [bp + 5] ; $dest
0440   0673 2A            mov b, [d]
0441   0674 E7            pop d
0442   0675 FD 43         mov [d], b
0443   0677             ;; while(*psrc) *pdest++ = *psrc++; 
0444   0677             _while10_cond:
0445   0677 FA FF FF      lea d, [bp + -1] ; $psrc
0446   067A 2A            mov b, [d]
0447   067B 74            mov d, b
0448   067C 32            mov bl, [d]
0449   067D A7 00         mov bh, 0
0450   067F C0 00 00      cmp b, 0
0451   0682 C6 AA 06      je _while10_exit
0452   0685             _while10_block:
0453   0685             ;; *pdest++ = *psrc++; 
0454   0685 FA FD FF      lea d, [bp + -3] ; $pdest
0455   0688 2A            mov b, [d]
0456   0689 D8            push b
0457   068A FD 77         inc b
0458   068C FA FD FF      lea d, [bp + -3] ; $pdest
0459   068F FD 43         mov [d], b
0460   0691 E5            pop b
0461   0692 D8            push b
0462   0693 FA FF FF      lea d, [bp + -1] ; $psrc
0463   0696 2A            mov b, [d]
0464   0697 D8            push b
0465   0698 FD 77         inc b
0466   069A FA FF FF      lea d, [bp + -1] ; $psrc
0467   069D FD 43         mov [d], b
0468   069F E5            pop b
0469   06A0 74            mov d, b
0470   06A1 32            mov bl, [d]
0471   06A2 A7 00         mov bh, 0
0472   06A4 E7            pop d
0473   06A5 FD 3E         mov [d], bl
0474   06A7 0A 77 06      jmp _while10_cond
0475   06AA             _while10_exit:
0476   06AA             ;; *pdest = '\0'; 
0477   06AA FA FD FF      lea d, [bp + -3] ; $pdest
0478   06AD 2A            mov b, [d]
0479   06AE D8            push b
0480   06AF 26 00 00      mov b, $0
0481   06B2 E7            pop d
0482   06B3 FD 3E         mov [d], bl
0483   06B5 F9            leave
0484   06B6 09            ret
0485   06B7             
0486   06B7             strcmp:
0487   06B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0488   06BA             ;; while (*s1 && (*s1 == *s2)) { 
0489   06BA             _while11_cond:
0490   06BA FA 05 00      lea d, [bp + 5] ; $s1
0491   06BD 2A            mov b, [d]
0492   06BE 74            mov d, b
0493   06BF 32            mov bl, [d]
0494   06C0 A7 00         mov bh, 0
0495   06C2 D7            push a
0496   06C3 11            mov a, b
0497   06C4 FA 05 00      lea d, [bp + 5] ; $s1
0498   06C7 2A            mov b, [d]
0499   06C8 74            mov d, b
0500   06C9 32            mov bl, [d]
0501   06CA A7 00         mov bh, 0
0502   06CC             ; START RELATIONAL
0503   06CC D7            push a
0504   06CD 11            mov a, b
0505   06CE FA 07 00      lea d, [bp + 7] ; $s2
0506   06D1 2A            mov b, [d]
0507   06D2 74            mov d, b
0508   06D3 32            mov bl, [d]
0509   06D4 A7 00         mov bh, 0
0510   06D6 B0            cmp a, b
0511   06D7 FD 71         seq ; ==
0512   06D9 E4            pop a
0513   06DA             ; END RELATIONAL
0514   06DA FD A7         sand a, b ; &&
0515   06DC E4            pop a
0516   06DD C0 00 00      cmp b, 0
0517   06E0 C6 00 07      je _while11_exit
0518   06E3             _while11_block:
0519   06E3             ;; s1++; 
0520   06E3 FA 05 00      lea d, [bp + 5] ; $s1
0521   06E6 2A            mov b, [d]
0522   06E7 D8            push b
0523   06E8 FD 77         inc b
0524   06EA FA 05 00      lea d, [bp + 5] ; $s1
0525   06ED FD 43         mov [d], b
0526   06EF E5            pop b
0527   06F0             ;; s2++; 
0528   06F0 FA 07 00      lea d, [bp + 7] ; $s2
0529   06F3 2A            mov b, [d]
0530   06F4 D8            push b
0531   06F5 FD 77         inc b
0532   06F7 FA 07 00      lea d, [bp + 7] ; $s2
0533   06FA FD 43         mov [d], b
0534   06FC E5            pop b
0535   06FD 0A BA 06      jmp _while11_cond
0536   0700             _while11_exit:
0537   0700             ;; return *s1 - *s2; 
0538   0700 FA 05 00      lea d, [bp + 5] ; $s1
0539   0703 2A            mov b, [d]
0540   0704 74            mov d, b
0541   0705 32            mov bl, [d]
0542   0706 A7 00         mov bh, 0
0543   0708             ; START TERMS
0544   0708 D7            push a
0545   0709 11            mov a, b
0546   070A FA 07 00      lea d, [bp + 7] ; $s2
0547   070D 2A            mov b, [d]
0548   070E 74            mov d, b
0549   070F 32            mov bl, [d]
0550   0710 A7 00         mov bh, 0
0551   0712 60            sub a, b
0552   0713 27            mov b, a
0553   0714 E4            pop a
0554   0715             ; END TERMS
0555   0715 F9            leave
0556   0716 09            ret
0557   0717             
0558   0717             strcat:
0559   0717 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0560   071A             ; $dest_len 
0561   071A             ; $i 
0562   071A 52 04 00      sub sp, 4
0563   071D             ;; dest_len = strlen(dest); 
0564   071D FA FF FF      lea d, [bp + -1] ; $dest_len
0565   0720 DA            push d
0566   0721 FA 05 00      lea d, [bp + 5] ; $dest
0567   0724 2A            mov b, [d]
0568   0725 FD AB         swp b
0569   0727 D8            push b
0570   0728 07 CD 07      call strlen
0571   072B 51 02 00      add sp, 2
0572   072E E7            pop d
0573   072F FD 43         mov [d], b
0574   0731             ;; for (i = 0; src[i] != 0; i=i+1) { 
0575   0731             _for12_init:
0576   0731 FA FD FF      lea d, [bp + -3] ; $i
0577   0734 DA            push d
0578   0735 26 00 00      mov b, $0
0579   0738 E7            pop d
0580   0739 FD 43         mov [d], b
0581   073B             _for12_cond:
0582   073B FA 07 00      lea d, [bp + 7] ; $src
0583   073E FD 2A         mov d, [d]
0584   0740 D7            push a
0585   0741 DA            push d
0586   0742 FA FD FF      lea d, [bp + -3] ; $i
0587   0745 2A            mov b, [d]
0588   0746 E7            pop d
0589   0747 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0590   074B E4            pop a
0591   074C 32            mov bl, [d]
0592   074D A7 00         mov bh, 0
0593   074F             ; START RELATIONAL
0594   074F D7            push a
0595   0750 11            mov a, b
0596   0751 26 00 00      mov b, $0
0597   0754 B0            cmp a, b
0598   0755 FD 72         sneq ; !=
0599   0757 E4            pop a
0600   0758             ; END RELATIONAL
0601   0758 C0 00 00      cmp b, 0
0602   075B C6 A6 07      je _for12_exit
0603   075E             _for12_block:
0604   075E             ;; dest[dest_len + i] = src[i]; 
0605   075E FA 05 00      lea d, [bp + 5] ; $dest
0606   0761 FD 2A         mov d, [d]
0607   0763 D7            push a
0608   0764 DA            push d
0609   0765 FA FF FF      lea d, [bp + -1] ; $dest_len
0610   0768 2A            mov b, [d]
0611   0769             ; START TERMS
0612   0769 D7            push a
0613   076A 11            mov a, b
0614   076B FA FD FF      lea d, [bp + -3] ; $i
0615   076E 2A            mov b, [d]
0616   076F 54            add a, b
0617   0770 27            mov b, a
0618   0771 E4            pop a
0619   0772             ; END TERMS
0620   0772 E7            pop d
0621   0773 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0622   0777 E4            pop a
0623   0778 DA            push d
0624   0779 FA 07 00      lea d, [bp + 7] ; $src
0625   077C FD 2A         mov d, [d]
0626   077E D7            push a
0627   077F DA            push d
0628   0780 FA FD FF      lea d, [bp + -3] ; $i
0629   0783 2A            mov b, [d]
0630   0784 E7            pop d
0631   0785 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0632   0789 E4            pop a
0633   078A 32            mov bl, [d]
0634   078B A7 00         mov bh, 0
0635   078D E7            pop d
0636   078E FD 3E         mov [d], bl
0637   0790             _for12_update:
0638   0790 FA FD FF      lea d, [bp + -3] ; $i
0639   0793 DA            push d
0640   0794 FA FD FF      lea d, [bp + -3] ; $i
0641   0797 2A            mov b, [d]
0642   0798             ; START TERMS
0643   0798 D7            push a
0644   0799 11            mov a, b
0645   079A 26 01 00      mov b, $1
0646   079D 54            add a, b
0647   079E 27            mov b, a
0648   079F E4            pop a
0649   07A0             ; END TERMS
0650   07A0 E7            pop d
0651   07A1 FD 43         mov [d], b
0652   07A3 0A 3B 07      jmp _for12_cond
0653   07A6             _for12_exit:
0654   07A6             ;; dest[dest_len + i] = 0; 
0655   07A6 FA 05 00      lea d, [bp + 5] ; $dest
0656   07A9 FD 2A         mov d, [d]
0657   07AB D7            push a
0658   07AC DA            push d
0659   07AD FA FF FF      lea d, [bp + -1] ; $dest_len
0660   07B0 2A            mov b, [d]
0661   07B1             ; START TERMS
0662   07B1 D7            push a
0663   07B2 11            mov a, b
0664   07B3 FA FD FF      lea d, [bp + -3] ; $i
0665   07B6 2A            mov b, [d]
0666   07B7 54            add a, b
0667   07B8 27            mov b, a
0668   07B9 E4            pop a
0669   07BA             ; END TERMS
0670   07BA E7            pop d
0671   07BB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0672   07BF E4            pop a
0673   07C0 DA            push d
0674   07C1 26 00 00      mov b, $0
0675   07C4 E7            pop d
0676   07C5 FD 3E         mov [d], bl
0677   07C7             ;; return dest; 
0678   07C7 FA 05 00      lea d, [bp + 5] ; $dest
0679   07CA 2A            mov b, [d]
0680   07CB F9            leave
0681   07CC 09            ret
0682   07CD             
0683   07CD             strlen:
0684   07CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0685   07D0             ; $length 
0686   07D0 52 02 00      sub sp, 2
0687   07D3             ;; length = 0; 
0688   07D3 FA FF FF      lea d, [bp + -1] ; $length
0689   07D6 DA            push d
0690   07D7 26 00 00      mov b, $0
0691   07DA E7            pop d
0692   07DB FD 43         mov [d], b
0693   07DD             ;; while (str[length] != 0) { 
0694   07DD             _while13_cond:
0695   07DD FA 05 00      lea d, [bp + 5] ; $str
0696   07E0 FD 2A         mov d, [d]
0697   07E2 D7            push a
0698   07E3 DA            push d
0699   07E4 FA FF FF      lea d, [bp + -1] ; $length
0700   07E7 2A            mov b, [d]
0701   07E8 E7            pop d
0702   07E9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0703   07ED E4            pop a
0704   07EE 32            mov bl, [d]
0705   07EF A7 00         mov bh, 0
0706   07F1             ; START RELATIONAL
0707   07F1 D7            push a
0708   07F2 11            mov a, b
0709   07F3 26 00 00      mov b, $0
0710   07F6 B0            cmp a, b
0711   07F7 FD 72         sneq ; !=
0712   07F9 E4            pop a
0713   07FA             ; END RELATIONAL
0714   07FA C0 00 00      cmp b, 0
0715   07FD C6 10 08      je _while13_exit
0716   0800             _while13_block:
0717   0800             ;; length++; 
0718   0800 FA FF FF      lea d, [bp + -1] ; $length
0719   0803 2A            mov b, [d]
0720   0804 D8            push b
0721   0805 FD 77         inc b
0722   0807 FA FF FF      lea d, [bp + -1] ; $length
0723   080A FD 43         mov [d], b
0724   080C E5            pop b
0725   080D 0A DD 07      jmp _while13_cond
0726   0810             _while13_exit:
0727   0810             ;; return length; 
0728   0810 FA FF FF      lea d, [bp + -1] ; $length
0729   0813 2A            mov b, [d]
0730   0814 F9            leave
0731   0815 09            ret
0732   0816             
0733   0816             printf:
0734   0816 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0735   0819             ; $p 
0736   0819             ; $fp 
0737   0819             ; $i 
0738   0819 52 06 00      sub sp, 6
0739   081C             ;; fp = format; 
0740   081C FA FD FF      lea d, [bp + -3] ; $fp
0741   081F DA            push d
0742   0820 FA 05 00      lea d, [bp + 5] ; $format
0743   0823 2A            mov b, [d]
0744   0824 E7            pop d
0745   0825 FD 43         mov [d], b
0746   0827             ;; p = &format + 2; 
0747   0827 FA FF FF      lea d, [bp + -1] ; $p
0748   082A DA            push d
0749   082B FA 05 00      lea d, [bp + 5] ; $format
0750   082E 2D            mov b, d
0751   082F             ; START TERMS
0752   082F D7            push a
0753   0830 11            mov a, b
0754   0831 26 02 00      mov b, $2
0755   0834 54            add a, b
0756   0835 27            mov b, a
0757   0836 E4            pop a
0758   0837             ; END TERMS
0759   0837 E7            pop d
0760   0838 FD 43         mov [d], b
0761   083A             ;; for(;;){ 
0762   083A             _for14_init:
0763   083A             _for14_cond:
0764   083A             _for14_block:
0765   083A             ;; if(!*fp) break; 
0766   083A             _if15_cond:
0767   083A FA FD FF      lea d, [bp + -3] ; $fp
0768   083D 2A            mov b, [d]
0769   083E 74            mov d, b
0770   083F 32            mov bl, [d]
0771   0840 A7 00         mov bh, 0
0772   0842 C0 00 00      cmp b, 0
0773   0845 FD 71         seq ; !
0774   0847 C0 00 00      cmp b, 0
0775   084A C6 53 08      je _if15_else
0776   084D             _if15_true:
0777   084D             ;; break; 
0778   084D 0A 72 0A      jmp _for14_exit ; for break
0779   0850 0A 6F 0A      jmp _if15_exit
0780   0853             _if15_else:
0781   0853             ;; if(*fp == '%'){ 
0782   0853             _if16_cond:
0783   0853 FA FD FF      lea d, [bp + -3] ; $fp
0784   0856 2A            mov b, [d]
0785   0857 74            mov d, b
0786   0858 32            mov bl, [d]
0787   0859 A7 00         mov bh, 0
0788   085B             ; START RELATIONAL
0789   085B D7            push a
0790   085C 11            mov a, b
0791   085D 26 25 00      mov b, $25
0792   0860 B0            cmp a, b
0793   0861 FD 71         seq ; ==
0794   0863 E4            pop a
0795   0864             ; END RELATIONAL
0796   0864 C0 00 00      cmp b, 0
0797   0867 C6 53 0A      je _if16_else
0798   086A             _if16_true:
0799   086A             ;; fp++; 
0800   086A FA FD FF      lea d, [bp + -3] ; $fp
0801   086D 2A            mov b, [d]
0802   086E D8            push b
0803   086F FD 77         inc b
0804   0871 FA FD FF      lea d, [bp + -3] ; $fp
0805   0874 FD 43         mov [d], b
0806   0876 E5            pop b
0807   0877             ;; switch(*fp){ 
0808   0877             _switch17_expr:
0809   0877 FA FD FF      lea d, [bp + -3] ; $fp
0810   087A 2A            mov b, [d]
0811   087B 74            mov d, b
0812   087C 32            mov bl, [d]
0813   087D A7 00         mov bh, 0
0814   087F             _switch17_comparisons:
0815   087F C1 6C         cmp bl, $6c
0816   0881 C6 AD 08      je _switch17_case0
0817   0884 C1 4C         cmp bl, $4c
0818   0886 C6 AD 08      je _switch17_case1
0819   0889 C1 64         cmp bl, $64
0820   088B C6 7E 09      je _switch17_case2
0821   088E C1 69         cmp bl, $69
0822   0890 C6 7E 09      je _switch17_case3
0823   0893 C1 75         cmp bl, $75
0824   0895 C6 A3 09      je _switch17_case4
0825   0898 C1 78         cmp bl, $78
0826   089A C6 C8 09      je _switch17_case5
0827   089D C1 63         cmp bl, $63
0828   089F C6 ED 09      je _switch17_case6
0829   08A2 C1 73         cmp bl, $73
0830   08A4 C6 12 0A      je _switch17_case7
0831   08A7 0A 37 0A      jmp _switch17_default
0832   08AA 0A 43 0A      jmp _switch17_exit
0833   08AD             _switch17_case0:
0834   08AD             _switch17_case1:
0835   08AD             ;; fp++; 
0836   08AD FA FD FF      lea d, [bp + -3] ; $fp
0837   08B0 2A            mov b, [d]
0838   08B1 D8            push b
0839   08B2 FD 77         inc b
0840   08B4 FA FD FF      lea d, [bp + -3] ; $fp
0841   08B7 FD 43         mov [d], b
0842   08B9 E5            pop b
0843   08BA             ;; if(*fp == 'd' || *fp == 'i') 
0844   08BA             _if18_cond:
0845   08BA FA FD FF      lea d, [bp + -3] ; $fp
0846   08BD 2A            mov b, [d]
0847   08BE 74            mov d, b
0848   08BF 32            mov bl, [d]
0849   08C0 A7 00         mov bh, 0
0850   08C2             ; START RELATIONAL
0851   08C2 D7            push a
0852   08C3 11            mov a, b
0853   08C4 26 64 00      mov b, $64
0854   08C7 B0            cmp a, b
0855   08C8 FD 71         seq ; ==
0856   08CA E4            pop a
0857   08CB             ; END RELATIONAL
0858   08CB D7            push a
0859   08CC 11            mov a, b
0860   08CD FA FD FF      lea d, [bp + -3] ; $fp
0861   08D0 2A            mov b, [d]
0862   08D1 74            mov d, b
0863   08D2 32            mov bl, [d]
0864   08D3 A7 00         mov bh, 0
0865   08D5             ; START RELATIONAL
0866   08D5 D7            push a
0867   08D6 11            mov a, b
0868   08D7 26 69 00      mov b, $69
0869   08DA B0            cmp a, b
0870   08DB FD 71         seq ; ==
0871   08DD E4            pop a
0872   08DE             ; END RELATIONAL
0873   08DE FD A8         sor a, b ; ||
0874   08E0 E4            pop a
0875   08E1 C0 00 00      cmp b, 0
0876   08E4 C6 FB 08      je _if18_else
0877   08E7             _if18_true:
0878   08E7             ;; print_signed_long(*(long *)p); 
0879   08E7 FD 79         mov g, b
0880   08E9 28            mov b, c
0881   08EA FD AB         swp b
0882   08EC D8            push b
0883   08ED FD 27         mov b, g
0884   08EF FD AB         swp b
0885   08F1 D8            push b
0886   08F2 07 16 0E      call print_signed_long
0887   08F5 51 04 00      add sp, 4
0888   08F8 0A 68 09      jmp _if18_exit
0889   08FB             _if18_else:
0890   08FB             ;; if(*fp == 'u') 
0891   08FB             _if19_cond:
0892   08FB FA FD FF      lea d, [bp + -3] ; $fp
0893   08FE 2A            mov b, [d]
0894   08FF 74            mov d, b
0895   0900 32            mov bl, [d]
0896   0901 A7 00         mov bh, 0
0897   0903             ; START RELATIONAL
0898   0903 D7            push a
0899   0904 11            mov a, b
0900   0905 26 75 00      mov b, $75
0901   0908 B0            cmp a, b
0902   0909 FD 71         seq ; ==
0903   090B E4            pop a
0904   090C             ; END RELATIONAL
0905   090C C0 00 00      cmp b, 0
0906   090F C6 26 09      je _if19_else
0907   0912             _if19_true:
0908   0912             ;; print_unsigned_long(*(unsigned long *)p); 
0909   0912 FD 79         mov g, b
0910   0914 28            mov b, c
0911   0915 FD AB         swp b
0912   0917 D8            push b
0913   0918 FD 27         mov b, g
0914   091A FD AB         swp b
0915   091C D8            push b
0916   091D 07 4B 0F      call print_unsigned_long
0917   0920 51 04 00      add sp, 4
0918   0923 0A 68 09      jmp _if19_exit
0919   0926             _if19_else:
0920   0926             ;; if(*fp == 'x') 
0921   0926             _if20_cond:
0922   0926 FA FD FF      lea d, [bp + -3] ; $fp
0923   0929 2A            mov b, [d]
0924   092A 74            mov d, b
0925   092B 32            mov bl, [d]
0926   092C A7 00         mov bh, 0
0927   092E             ; START RELATIONAL
0928   092E D7            push a
0929   092F 11            mov a, b
0930   0930 26 78 00      mov b, $78
0931   0933 B0            cmp a, b
0932   0934 FD 71         seq ; ==
0933   0936 E4            pop a
0934   0937             ; END RELATIONAL
0935   0937 C0 00 00      cmp b, 0
0936   093A C6 5C 09      je _if20_else
0937   093D             _if20_true:
0938   093D             ;; printx32(*(long int *)p); 
0939   093D FA FF FF      lea d, [bp + -1] ; $p
0940   0940 2A            mov b, [d]
0941   0941 74            mov d, b
0942   0942 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0943   0945 FD 39         mov c, b ; And place it into C
0944   0947 2A            mov b, [d] ; Lower Word in B
0945   0948 FD 79         mov g, b
0946   094A 28            mov b, c
0947   094B FD AB         swp b
0948   094D D8            push b
0949   094E FD 27         mov b, g
0950   0950 FD AB         swp b
0951   0952 D8            push b
0952   0953 07 89 0A      call printx32
0953   0956 51 04 00      add sp, 4
0954   0959 0A 68 09      jmp _if20_exit
0955   095C             _if20_else:
0956   095C             ;; err("Unexpected format in printf."); 
0957   095C 26 F9 22      mov b, __s1 ; "Unexpected format in printf."
0958   095F FD AB         swp b
0959   0961 D8            push b
0960   0962 07 74 0A      call err
0961   0965 51 02 00      add sp, 2
0962   0968             _if20_exit:
0963   0968             _if19_exit:
0964   0968             _if18_exit:
0965   0968             ;; p = p + 4; 
0966   0968 FA FF FF      lea d, [bp + -1] ; $p
0967   096B DA            push d
0968   096C FA FF FF      lea d, [bp + -1] ; $p
0969   096F 2A            mov b, [d]
0970   0970             ; START TERMS
0971   0970 D7            push a
0972   0971 11            mov a, b
0973   0972 26 04 00      mov b, $4
0974   0975 54            add a, b
0975   0976 27            mov b, a
0976   0977 E4            pop a
0977   0978             ; END TERMS
0978   0978 E7            pop d
0979   0979 FD 43         mov [d], b
0980   097B             ;; break; 
0981   097B 0A 43 0A      jmp _switch17_exit ; case break
0982   097E             _switch17_case2:
0983   097E             _switch17_case3:
0984   097E             ;; print_signed(*(int*)p); 
0985   097E FA FF FF      lea d, [bp + -1] ; $p
0986   0981 2A            mov b, [d]
0987   0982 74            mov d, b
0988   0983 2A            mov b, [d]
0989   0984 FD AB         swp b
0990   0986 D8            push b
0991   0987 07 25 0D      call print_signed
0992   098A 51 02 00      add sp, 2
0993   098D             ;; p = p + 2; 
0994   098D FA FF FF      lea d, [bp + -1] ; $p
0995   0990 DA            push d
0996   0991 FA FF FF      lea d, [bp + -1] ; $p
0997   0994 2A            mov b, [d]
0998   0995             ; START TERMS
0999   0995 D7            push a
1000   0996 11            mov a, b
1001   0997 26 02 00      mov b, $2
1002   099A 54            add a, b
1003   099B 27            mov b, a
1004   099C E4            pop a
1005   099D             ; END TERMS
1006   099D E7            pop d
1007   099E FD 43         mov [d], b
1008   09A0             ;; break; 
1009   09A0 0A 43 0A      jmp _switch17_exit ; case break
1010   09A3             _switch17_case4:
1011   09A3             ;; print_unsigned(*(unsigned int*)p); 
1012   09A3 FA FF FF      lea d, [bp + -1] ; $p
1013   09A6 2A            mov b, [d]
1014   09A7 74            mov d, b
1015   09A8 2A            mov b, [d]
1016   09A9 FD AB         swp b
1017   09AB D8            push b
1018   09AC 07 42 10      call print_unsigned
1019   09AF 51 02 00      add sp, 2
1020   09B2             ;; p = p + 2; 
1021   09B2 FA FF FF      lea d, [bp + -1] ; $p
1022   09B5 DA            push d
1023   09B6 FA FF FF      lea d, [bp + -1] ; $p
1024   09B9 2A            mov b, [d]
1025   09BA             ; START TERMS
1026   09BA D7            push a
1027   09BB 11            mov a, b
1028   09BC 26 02 00      mov b, $2
1029   09BF 54            add a, b
1030   09C0 27            mov b, a
1031   09C1 E4            pop a
1032   09C2             ; END TERMS
1033   09C2 E7            pop d
1034   09C3 FD 43         mov [d], b
1035   09C5             ;; break; 
1036   09C5 0A 43 0A      jmp _switch17_exit ; case break
1037   09C8             _switch17_case5:
1038   09C8             ;; printx16(*(int*)p); 
1039   09C8 FA FF FF      lea d, [bp + -1] ; $p
1040   09CB 2A            mov b, [d]
1041   09CC 74            mov d, b
1042   09CD 2A            mov b, [d]
1043   09CE FD AB         swp b
1044   09D0 D8            push b
1045   09D1 07 9B 0A      call printx16
1046   09D4 51 02 00      add sp, 2
1047   09D7             ;; p = p + 2; 
1048   09D7 FA FF FF      lea d, [bp + -1] ; $p
1049   09DA DA            push d
1050   09DB FA FF FF      lea d, [bp + -1] ; $p
1051   09DE 2A            mov b, [d]
1052   09DF             ; START TERMS
1053   09DF D7            push a
1054   09E0 11            mov a, b
1055   09E1 26 02 00      mov b, $2
1056   09E4 54            add a, b
1057   09E5 27            mov b, a
1058   09E6 E4            pop a
1059   09E7             ; END TERMS
1060   09E7 E7            pop d
1061   09E8 FD 43         mov [d], b
1062   09EA             ;; break; 
1063   09EA 0A 43 0A      jmp _switch17_exit ; case break
1064   09ED             _switch17_case6:
1065   09ED             ;; putchar(*(char*)p); 
1066   09ED FA FF FF      lea d, [bp + -1] ; $p
1067   09F0 2A            mov b, [d]
1068   09F1 74            mov d, b
1069   09F2 32            mov bl, [d]
1070   09F3 A7 00         mov bh, 0
1071   09F5 DD            push bl
1072   09F6 07 2A 11      call putchar
1073   09F9 51 01 00      add sp, 1
1074   09FC             ;; p = p + 2; 
1075   09FC FA FF FF      lea d, [bp + -1] ; $p
1076   09FF DA            push d
1077   0A00 FA FF FF      lea d, [bp + -1] ; $p
1078   0A03 2A            mov b, [d]
1079   0A04             ; START TERMS
1080   0A04 D7            push a
1081   0A05 11            mov a, b
1082   0A06 26 02 00      mov b, $2
1083   0A09 54            add a, b
1084   0A0A 27            mov b, a
1085   0A0B E4            pop a
1086   0A0C             ; END TERMS
1087   0A0C E7            pop d
1088   0A0D FD 43         mov [d], b
1089   0A0F             ;; break; 
1090   0A0F 0A 43 0A      jmp _switch17_exit ; case break
1091   0A12             _switch17_case7:
1092   0A12             ;; print(*(char**)p); 
1093   0A12 FA FF FF      lea d, [bp + -1] ; $p
1094   0A15 2A            mov b, [d]
1095   0A16 74            mov d, b
1096   0A17 2A            mov b, [d]
1097   0A18 FD AB         swp b
1098   0A1A D8            push b
1099   0A1B 07 72 11      call print
1100   0A1E 51 02 00      add sp, 2
1101   0A21             ;; p = p + 2; 
1102   0A21 FA FF FF      lea d, [bp + -1] ; $p
1103   0A24 DA            push d
1104   0A25 FA FF FF      lea d, [bp + -1] ; $p
1105   0A28 2A            mov b, [d]
1106   0A29             ; START TERMS
1107   0A29 D7            push a
1108   0A2A 11            mov a, b
1109   0A2B 26 02 00      mov b, $2
1110   0A2E 54            add a, b
1111   0A2F 27            mov b, a
1112   0A30 E4            pop a
1113   0A31             ; END TERMS
1114   0A31 E7            pop d
1115   0A32 FD 43         mov [d], b
1116   0A34             ;; break; 
1117   0A34 0A 43 0A      jmp _switch17_exit ; case break
1118   0A37             _switch17_default:
1119   0A37             ;; print("Error: Unknown argument type.\n"); 
1120   0A37 26 16 23      mov b, __s2 ; "Error: Unknown argument type.\n"
1121   0A3A FD AB         swp b
1122   0A3C D8            push b
1123   0A3D 07 72 11      call print
1124   0A40 51 02 00      add sp, 2
1125   0A43             _switch17_exit:
1126   0A43             ;; fp++; 
1127   0A43 FA FD FF      lea d, [bp + -3] ; $fp
1128   0A46 2A            mov b, [d]
1129   0A47 D8            push b
1130   0A48 FD 77         inc b
1131   0A4A FA FD FF      lea d, [bp + -3] ; $fp
1132   0A4D FD 43         mov [d], b
1133   0A4F E5            pop b
1134   0A50 0A 6F 0A      jmp _if16_exit
1135   0A53             _if16_else:
1136   0A53             ;; putchar(*fp); 
1137   0A53 FA FD FF      lea d, [bp + -3] ; $fp
1138   0A56 2A            mov b, [d]
1139   0A57 74            mov d, b
1140   0A58 32            mov bl, [d]
1141   0A59 A7 00         mov bh, 0
1142   0A5B DD            push bl
1143   0A5C 07 2A 11      call putchar
1144   0A5F 51 01 00      add sp, 1
1145   0A62             ;; fp++; 
1146   0A62 FA FD FF      lea d, [bp + -3] ; $fp
1147   0A65 2A            mov b, [d]
1148   0A66 D8            push b
1149   0A67 FD 77         inc b
1150   0A69 FA FD FF      lea d, [bp + -3] ; $fp
1151   0A6C FD 43         mov [d], b
1152   0A6E E5            pop b
1153   0A6F             _if16_exit:
1154   0A6F             _if15_exit:
1155   0A6F             _for14_update:
1156   0A6F 0A 3A 08      jmp _for14_cond
1157   0A72             _for14_exit:
1158   0A72 F9            leave
1159   0A73 09            ret
1160   0A74             
1161   0A74             err:
1162   0A74 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1163   0A77             ;; print(e); 
1164   0A77 FA 05 00      lea d, [bp + 5] ; $e
1165   0A7A 2A            mov b, [d]
1166   0A7B FD AB         swp b
1167   0A7D D8            push b
1168   0A7E 07 72 11      call print
1169   0A81 51 02 00      add sp, 2
1170   0A84             ;; exit(); 
1171   0A84 07 EC 11      call exit
1172   0A87 F9            leave
1173   0A88 09            ret
1174   0A89             
1175   0A89             printx32:
1176   0A89 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1177   0A8C             
1178   0A8C             ; --- BEGIN INLINE ASM BLOCK
1179   0A8C FA 05 00      lea d, [bp + 5] ; $hex
1180   0A8F 2B 02 00      mov b, [d+2]
1181   0A92 07 49 15      call print_u16x
1182   0A95 2A            mov b, [d]
1183   0A96 07 49 15      call print_u16x
1184   0A99             ; --- END INLINE ASM BLOCK
1185   0A99             
1186   0A99 F9            leave
1187   0A9A 09            ret
1188   0A9B             
1189   0A9B             printx16:
1190   0A9B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1191   0A9E             
1192   0A9E             ; --- BEGIN INLINE ASM BLOCK
1193   0A9E FA 05 00      lea d, [bp + 5] ; $hex
1194   0AA1 2A            mov b, [d]
1195   0AA2 07 49 15      call print_u16x
1196   0AA5             ; --- END INLINE ASM BLOCK
1197   0AA5             
1198   0AA5 F9            leave
1199   0AA6 09            ret
1200   0AA7             
1201   0AA7             printx8:
1202   0AA7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1203   0AAA             
1204   0AAA             ; --- BEGIN INLINE ASM BLOCK
1205   0AAA FA 05 00      lea d, [bp + 5] ; $hex
1206   0AAD 32            mov bl, [d]
1207   0AAE 07 8D 15      call print_u8x
1208   0AB1             ; --- END INLINE ASM BLOCK
1209   0AB1             
1210   0AB1 F9            leave
1211   0AB2 09            ret
1212   0AB3             
1213   0AB3             hex_to_int:
1214   0AB3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1215   0AB6             ; $value 
1216   0AB6 10 00 00      mov a, $0
1217   0AB9 45 FF FF      mov [bp + -1], a
1218   0ABC             ; $i 
1219   0ABC             ; $hex_char 
1220   0ABC             ; $len 
1221   0ABC 52 07 00      sub sp, 7
1222   0ABF             ;; len = strlen(hex_string); 
1223   0ABF FA FA FF      lea d, [bp + -6] ; $len
1224   0AC2 DA            push d
1225   0AC3 FA 05 00      lea d, [bp + 5] ; $hex_string
1226   0AC6 2A            mov b, [d]
1227   0AC7 FD AB         swp b
1228   0AC9 D8            push b
1229   0ACA 07 CD 07      call strlen
1230   0ACD 51 02 00      add sp, 2
1231   0AD0 E7            pop d
1232   0AD1 FD 43         mov [d], b
1233   0AD3             ;; for (i = 0; i < len; i++) { 
1234   0AD3             _for21_init:
1235   0AD3 FA FD FF      lea d, [bp + -3] ; $i
1236   0AD6 DA            push d
1237   0AD7 26 00 00      mov b, $0
1238   0ADA E7            pop d
1239   0ADB FD 43         mov [d], b
1240   0ADD             _for21_cond:
1241   0ADD FA FD FF      lea d, [bp + -3] ; $i
1242   0AE0 2A            mov b, [d]
1243   0AE1             ; START RELATIONAL
1244   0AE1 D7            push a
1245   0AE2 11            mov a, b
1246   0AE3 FA FA FF      lea d, [bp + -6] ; $len
1247   0AE6 2A            mov b, [d]
1248   0AE7 B0            cmp a, b
1249   0AE8 FD 73         slt ; < 
1250   0AEA E4            pop a
1251   0AEB             ; END RELATIONAL
1252   0AEB C0 00 00      cmp b, 0
1253   0AEE C6 F3 0B      je _for21_exit
1254   0AF1             _for21_block:
1255   0AF1             ;; hex_char = hex_string[i]; 
1256   0AF1 FA FC FF      lea d, [bp + -4] ; $hex_char
1257   0AF4 DA            push d
1258   0AF5 FA 05 00      lea d, [bp + 5] ; $hex_string
1259   0AF8 FD 2A         mov d, [d]
1260   0AFA D7            push a
1261   0AFB DA            push d
1262   0AFC FA FD FF      lea d, [bp + -3] ; $i
1263   0AFF 2A            mov b, [d]
1264   0B00 E7            pop d
1265   0B01 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1266   0B05 E4            pop a
1267   0B06 32            mov bl, [d]
1268   0B07 A7 00         mov bh, 0
1269   0B09 E7            pop d
1270   0B0A FD 3E         mov [d], bl
1271   0B0C             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1272   0B0C             _if22_cond:
1273   0B0C FA FC FF      lea d, [bp + -4] ; $hex_char
1274   0B0F 32            mov bl, [d]
1275   0B10 A7 00         mov bh, 0
1276   0B12             ; START RELATIONAL
1277   0B12 D7            push a
1278   0B13 11            mov a, b
1279   0B14 26 61 00      mov b, $61
1280   0B17 B0            cmp a, b
1281   0B18 FD 80         sge ; >=
1282   0B1A E4            pop a
1283   0B1B             ; END RELATIONAL
1284   0B1B D7            push a
1285   0B1C 11            mov a, b
1286   0B1D FA FC FF      lea d, [bp + -4] ; $hex_char
1287   0B20 32            mov bl, [d]
1288   0B21 A7 00         mov bh, 0
1289   0B23             ; START RELATIONAL
1290   0B23 D7            push a
1291   0B24 11            mov a, b
1292   0B25 26 66 00      mov b, $66
1293   0B28 B0            cmp a, b
1294   0B29 FD 74         sle ; <=
1295   0B2B E4            pop a
1296   0B2C             ; END RELATIONAL
1297   0B2C FD A7         sand a, b ; &&
1298   0B2E E4            pop a
1299   0B2F C0 00 00      cmp b, 0
1300   0B32 C6 64 0B      je _if22_else
1301   0B35             _if22_true:
1302   0B35             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1303   0B35 FA FF FF      lea d, [bp + -1] ; $value
1304   0B38 DA            push d
1305   0B39 FA FF FF      lea d, [bp + -1] ; $value
1306   0B3C 2A            mov b, [d]
1307   0B3D             ; START FACTORS
1308   0B3D D7            push a
1309   0B3E 11            mov a, b
1310   0B3F 26 10 00      mov b, $10
1311   0B42 AC            mul a, b ; *
1312   0B43 11            mov a, b
1313   0B44 27            mov b, a
1314   0B45 E4            pop a
1315   0B46             ; END FACTORS
1316   0B46             ; START TERMS
1317   0B46 D7            push a
1318   0B47 11            mov a, b
1319   0B48 FA FC FF      lea d, [bp + -4] ; $hex_char
1320   0B4B 32            mov bl, [d]
1321   0B4C A7 00         mov bh, 0
1322   0B4E             ; START TERMS
1323   0B4E D7            push a
1324   0B4F 11            mov a, b
1325   0B50 26 61 00      mov b, $61
1326   0B53 60            sub a, b
1327   0B54 11            mov a, b
1328   0B55 26 0A 00      mov b, $a
1329   0B58 54            add a, b
1330   0B59 27            mov b, a
1331   0B5A E4            pop a
1332   0B5B             ; END TERMS
1333   0B5B 54            add a, b
1334   0B5C 27            mov b, a
1335   0B5D E4            pop a
1336   0B5E             ; END TERMS
1337   0B5E E7            pop d
1338   0B5F FD 43         mov [d], b
1339   0B61 0A E3 0B      jmp _if22_exit
1340   0B64             _if22_else:
1341   0B64             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1342   0B64             _if23_cond:
1343   0B64 FA FC FF      lea d, [bp + -4] ; $hex_char
1344   0B67 32            mov bl, [d]
1345   0B68 A7 00         mov bh, 0
1346   0B6A             ; START RELATIONAL
1347   0B6A D7            push a
1348   0B6B 11            mov a, b
1349   0B6C 26 41 00      mov b, $41
1350   0B6F B0            cmp a, b
1351   0B70 FD 80         sge ; >=
1352   0B72 E4            pop a
1353   0B73             ; END RELATIONAL
1354   0B73 D7            push a
1355   0B74 11            mov a, b
1356   0B75 FA FC FF      lea d, [bp + -4] ; $hex_char
1357   0B78 32            mov bl, [d]
1358   0B79 A7 00         mov bh, 0
1359   0B7B             ; START RELATIONAL
1360   0B7B D7            push a
1361   0B7C 11            mov a, b
1362   0B7D 26 46 00      mov b, $46
1363   0B80 B0            cmp a, b
1364   0B81 FD 74         sle ; <=
1365   0B83 E4            pop a
1366   0B84             ; END RELATIONAL
1367   0B84 FD A7         sand a, b ; &&
1368   0B86 E4            pop a
1369   0B87 C0 00 00      cmp b, 0
1370   0B8A C6 BC 0B      je _if23_else
1371   0B8D             _if23_true:
1372   0B8D             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1373   0B8D FA FF FF      lea d, [bp + -1] ; $value
1374   0B90 DA            push d
1375   0B91 FA FF FF      lea d, [bp + -1] ; $value
1376   0B94 2A            mov b, [d]
1377   0B95             ; START FACTORS
1378   0B95 D7            push a
1379   0B96 11            mov a, b
1380   0B97 26 10 00      mov b, $10
1381   0B9A AC            mul a, b ; *
1382   0B9B 11            mov a, b
1383   0B9C 27            mov b, a
1384   0B9D E4            pop a
1385   0B9E             ; END FACTORS
1386   0B9E             ; START TERMS
1387   0B9E D7            push a
1388   0B9F 11            mov a, b
1389   0BA0 FA FC FF      lea d, [bp + -4] ; $hex_char
1390   0BA3 32            mov bl, [d]
1391   0BA4 A7 00         mov bh, 0
1392   0BA6             ; START TERMS
1393   0BA6 D7            push a
1394   0BA7 11            mov a, b
1395   0BA8 26 41 00      mov b, $41
1396   0BAB 60            sub a, b
1397   0BAC 11            mov a, b
1398   0BAD 26 0A 00      mov b, $a
1399   0BB0 54            add a, b
1400   0BB1 27            mov b, a
1401   0BB2 E4            pop a
1402   0BB3             ; END TERMS
1403   0BB3 54            add a, b
1404   0BB4 27            mov b, a
1405   0BB5 E4            pop a
1406   0BB6             ; END TERMS
1407   0BB6 E7            pop d
1408   0BB7 FD 43         mov [d], b
1409   0BB9 0A E3 0B      jmp _if23_exit
1410   0BBC             _if23_else:
1411   0BBC             ;; value = (value * 16) + (hex_char - '0'); 
1412   0BBC FA FF FF      lea d, [bp + -1] ; $value
1413   0BBF DA            push d
1414   0BC0 FA FF FF      lea d, [bp + -1] ; $value
1415   0BC3 2A            mov b, [d]
1416   0BC4             ; START FACTORS
1417   0BC4 D7            push a
1418   0BC5 11            mov a, b
1419   0BC6 26 10 00      mov b, $10
1420   0BC9 AC            mul a, b ; *
1421   0BCA 11            mov a, b
1422   0BCB 27            mov b, a
1423   0BCC E4            pop a
1424   0BCD             ; END FACTORS
1425   0BCD             ; START TERMS
1426   0BCD D7            push a
1427   0BCE 11            mov a, b
1428   0BCF FA FC FF      lea d, [bp + -4] ; $hex_char
1429   0BD2 32            mov bl, [d]
1430   0BD3 A7 00         mov bh, 0
1431   0BD5             ; START TERMS
1432   0BD5 D7            push a
1433   0BD6 11            mov a, b
1434   0BD7 26 30 00      mov b, $30
1435   0BDA 60            sub a, b
1436   0BDB 27            mov b, a
1437   0BDC E4            pop a
1438   0BDD             ; END TERMS
1439   0BDD 54            add a, b
1440   0BDE 27            mov b, a
1441   0BDF E4            pop a
1442   0BE0             ; END TERMS
1443   0BE0 E7            pop d
1444   0BE1 FD 43         mov [d], b
1445   0BE3             _if23_exit:
1446   0BE3             _if22_exit:
1447   0BE3             _for21_update:
1448   0BE3 FA FD FF      lea d, [bp + -3] ; $i
1449   0BE6 2A            mov b, [d]
1450   0BE7 D8            push b
1451   0BE8 FD 77         inc b
1452   0BEA FA FD FF      lea d, [bp + -3] ; $i
1453   0BED FD 43         mov [d], b
1454   0BEF E5            pop b
1455   0BF0 0A DD 0A      jmp _for21_cond
1456   0BF3             _for21_exit:
1457   0BF3             ;; return value; 
1458   0BF3 FA FF FF      lea d, [bp + -1] ; $value
1459   0BF6 2A            mov b, [d]
1460   0BF7 F9            leave
1461   0BF8 09            ret
1462   0BF9             
1463   0BF9             atoi:
1464   0BF9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1465   0BFC             ; $result 
1466   0BFC 10 00 00      mov a, $0
1467   0BFF 45 FF FF      mov [bp + -1], a
1468   0C02             ; $sign 
1469   0C02 10 01 00      mov a, $1
1470   0C05 45 FD FF      mov [bp + -3], a
1471   0C08 52 04 00      sub sp, 4
1472   0C0B             ;; while (*str == ' ') str++; 
1473   0C0B             _while24_cond:
1474   0C0B FA 05 00      lea d, [bp + 5] ; $str
1475   0C0E 2A            mov b, [d]
1476   0C0F 74            mov d, b
1477   0C10 32            mov bl, [d]
1478   0C11 A7 00         mov bh, 0
1479   0C13             ; START RELATIONAL
1480   0C13 D7            push a
1481   0C14 11            mov a, b
1482   0C15 26 20 00      mov b, $20
1483   0C18 B0            cmp a, b
1484   0C19 FD 71         seq ; ==
1485   0C1B E4            pop a
1486   0C1C             ; END RELATIONAL
1487   0C1C C0 00 00      cmp b, 0
1488   0C1F C6 32 0C      je _while24_exit
1489   0C22             _while24_block:
1490   0C22             ;; str++; 
1491   0C22 FA 05 00      lea d, [bp + 5] ; $str
1492   0C25 2A            mov b, [d]
1493   0C26 D8            push b
1494   0C27 FD 77         inc b
1495   0C29 FA 05 00      lea d, [bp + 5] ; $str
1496   0C2C FD 43         mov [d], b
1497   0C2E E5            pop b
1498   0C2F 0A 0B 0C      jmp _while24_cond
1499   0C32             _while24_exit:
1500   0C32             ;; if (*str == '-' || *str == '+') { 
1501   0C32             _if25_cond:
1502   0C32 FA 05 00      lea d, [bp + 5] ; $str
1503   0C35 2A            mov b, [d]
1504   0C36 74            mov d, b
1505   0C37 32            mov bl, [d]
1506   0C38 A7 00         mov bh, 0
1507   0C3A             ; START RELATIONAL
1508   0C3A D7            push a
1509   0C3B 11            mov a, b
1510   0C3C 26 2D 00      mov b, $2d
1511   0C3F B0            cmp a, b
1512   0C40 FD 71         seq ; ==
1513   0C42 E4            pop a
1514   0C43             ; END RELATIONAL
1515   0C43 D7            push a
1516   0C44 11            mov a, b
1517   0C45 FA 05 00      lea d, [bp + 5] ; $str
1518   0C48 2A            mov b, [d]
1519   0C49 74            mov d, b
1520   0C4A 32            mov bl, [d]
1521   0C4B A7 00         mov bh, 0
1522   0C4D             ; START RELATIONAL
1523   0C4D D7            push a
1524   0C4E 11            mov a, b
1525   0C4F 26 2B 00      mov b, $2b
1526   0C52 B0            cmp a, b
1527   0C53 FD 71         seq ; ==
1528   0C55 E4            pop a
1529   0C56             ; END RELATIONAL
1530   0C56 FD A8         sor a, b ; ||
1531   0C58 E4            pop a
1532   0C59 C0 00 00      cmp b, 0
1533   0C5C C6 95 0C      je _if25_exit
1534   0C5F             _if25_true:
1535   0C5F             ;; if (*str == '-') sign = -1; 
1536   0C5F             _if26_cond:
1537   0C5F FA 05 00      lea d, [bp + 5] ; $str
1538   0C62 2A            mov b, [d]
1539   0C63 74            mov d, b
1540   0C64 32            mov bl, [d]
1541   0C65 A7 00         mov bh, 0
1542   0C67             ; START RELATIONAL
1543   0C67 D7            push a
1544   0C68 11            mov a, b
1545   0C69 26 2D 00      mov b, $2d
1546   0C6C B0            cmp a, b
1547   0C6D FD 71         seq ; ==
1548   0C6F E4            pop a
1549   0C70             ; END RELATIONAL
1550   0C70 C0 00 00      cmp b, 0
1551   0C73 C6 85 0C      je _if26_exit
1552   0C76             _if26_true:
1553   0C76             ;; sign = -1; 
1554   0C76 FA FD FF      lea d, [bp + -3] ; $sign
1555   0C79 DA            push d
1556   0C7A 26 01 00      mov b, $1
1557   0C7D FD 97         neg b
1558   0C7F E7            pop d
1559   0C80 FD 43         mov [d], b
1560   0C82 0A 85 0C      jmp _if26_exit
1561   0C85             _if26_exit:
1562   0C85             ;; str++; 
1563   0C85 FA 05 00      lea d, [bp + 5] ; $str
1564   0C88 2A            mov b, [d]
1565   0C89 D8            push b
1566   0C8A FD 77         inc b
1567   0C8C FA 05 00      lea d, [bp + 5] ; $str
1568   0C8F FD 43         mov [d], b
1569   0C91 E5            pop b
1570   0C92 0A 95 0C      jmp _if25_exit
1571   0C95             _if25_exit:
1572   0C95             ;; while (*str >= '0' && *str <= '9') { 
1573   0C95             _while27_cond:
1574   0C95 FA 05 00      lea d, [bp + 5] ; $str
1575   0C98 2A            mov b, [d]
1576   0C99 74            mov d, b
1577   0C9A 32            mov bl, [d]
1578   0C9B A7 00         mov bh, 0
1579   0C9D             ; START RELATIONAL
1580   0C9D D7            push a
1581   0C9E 11            mov a, b
1582   0C9F 26 30 00      mov b, $30
1583   0CA2 B0            cmp a, b
1584   0CA3 FD 82         sgeu ; >= (unsigned)
1585   0CA5 E4            pop a
1586   0CA6             ; END RELATIONAL
1587   0CA6 D7            push a
1588   0CA7 11            mov a, b
1589   0CA8 FA 05 00      lea d, [bp + 5] ; $str
1590   0CAB 2A            mov b, [d]
1591   0CAC 74            mov d, b
1592   0CAD 32            mov bl, [d]
1593   0CAE A7 00         mov bh, 0
1594   0CB0             ; START RELATIONAL
1595   0CB0 D7            push a
1596   0CB1 11            mov a, b
1597   0CB2 26 39 00      mov b, $39
1598   0CB5 B0            cmp a, b
1599   0CB6 FD 76         sleu ; <= (unsigned)
1600   0CB8 E4            pop a
1601   0CB9             ; END RELATIONAL
1602   0CB9 FD A7         sand a, b ; &&
1603   0CBB E4            pop a
1604   0CBC C0 00 00      cmp b, 0
1605   0CBF C6 FB 0C      je _while27_exit
1606   0CC2             _while27_block:
1607   0CC2             ;; result = result * 10 + (*str - '0'); 
1608   0CC2 FA FF FF      lea d, [bp + -1] ; $result
1609   0CC5 DA            push d
1610   0CC6 FA FF FF      lea d, [bp + -1] ; $result
1611   0CC9 2A            mov b, [d]
1612   0CCA             ; START FACTORS
1613   0CCA D7            push a
1614   0CCB 11            mov a, b
1615   0CCC 26 0A 00      mov b, $a
1616   0CCF AC            mul a, b ; *
1617   0CD0 11            mov a, b
1618   0CD1 27            mov b, a
1619   0CD2 E4            pop a
1620   0CD3             ; END FACTORS
1621   0CD3             ; START TERMS
1622   0CD3 D7            push a
1623   0CD4 11            mov a, b
1624   0CD5 FA 05 00      lea d, [bp + 5] ; $str
1625   0CD8 2A            mov b, [d]
1626   0CD9 74            mov d, b
1627   0CDA 32            mov bl, [d]
1628   0CDB A7 00         mov bh, 0
1629   0CDD             ; START TERMS
1630   0CDD D7            push a
1631   0CDE 11            mov a, b
1632   0CDF 26 30 00      mov b, $30
1633   0CE2 60            sub a, b
1634   0CE3 27            mov b, a
1635   0CE4 E4            pop a
1636   0CE5             ; END TERMS
1637   0CE5 54            add a, b
1638   0CE6 27            mov b, a
1639   0CE7 E4            pop a
1640   0CE8             ; END TERMS
1641   0CE8 E7            pop d
1642   0CE9 FD 43         mov [d], b
1643   0CEB             ;; str++; 
1644   0CEB FA 05 00      lea d, [bp + 5] ; $str
1645   0CEE 2A            mov b, [d]
1646   0CEF D8            push b
1647   0CF0 FD 77         inc b
1648   0CF2 FA 05 00      lea d, [bp + 5] ; $str
1649   0CF5 FD 43         mov [d], b
1650   0CF7 E5            pop b
1651   0CF8 0A 95 0C      jmp _while27_cond
1652   0CFB             _while27_exit:
1653   0CFB             ;; return sign * result; 
1654   0CFB FA FD FF      lea d, [bp + -3] ; $sign
1655   0CFE 2A            mov b, [d]
1656   0CFF             ; START FACTORS
1657   0CFF D7            push a
1658   0D00 11            mov a, b
1659   0D01 FA FF FF      lea d, [bp + -1] ; $result
1660   0D04 2A            mov b, [d]
1661   0D05 AC            mul a, b ; *
1662   0D06 11            mov a, b
1663   0D07 27            mov b, a
1664   0D08 E4            pop a
1665   0D09             ; END FACTORS
1666   0D09 F9            leave
1667   0D0A 09            ret
1668   0D0B             
1669   0D0B             gets:
1670   0D0B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1671   0D0E             
1672   0D0E             ; --- BEGIN INLINE ASM BLOCK
1673   0D0E FA 05 00      lea d, [bp + 5] ; $s
1674   0D11 15            mov a, [d]
1675   0D12 3C            mov d, a
1676   0D13 07 AE 13      call _gets
1677   0D16             ; --- END INLINE ASM BLOCK
1678   0D16             
1679   0D16             ;; return strlen(s); 
1680   0D16 FA 05 00      lea d, [bp + 5] ; $s
1681   0D19 2A            mov b, [d]
1682   0D1A FD AB         swp b
1683   0D1C D8            push b
1684   0D1D 07 CD 07      call strlen
1685   0D20 51 02 00      add sp, 2
1686   0D23 F9            leave
1687   0D24 09            ret
1688   0D25             
1689   0D25             print_signed:
1690   0D25 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1691   0D28             ; $digits 
1692   0D28             ; $i 
1693   0D28 10 00 00      mov a, $0
1694   0D2B 45 FA FF      mov [bp + -6], a
1695   0D2E 52 07 00      sub sp, 7
1696   0D31             ;; if (num < 0) { 
1697   0D31             _if28_cond:
1698   0D31 FA 05 00      lea d, [bp + 5] ; $num
1699   0D34 2A            mov b, [d]
1700   0D35             ; START RELATIONAL
1701   0D35 D7            push a
1702   0D36 11            mov a, b
1703   0D37 26 00 00      mov b, $0
1704   0D3A B0            cmp a, b
1705   0D3B FD 73         slt ; < 
1706   0D3D E4            pop a
1707   0D3E             ; END RELATIONAL
1708   0D3E C0 00 00      cmp b, 0
1709   0D41 C6 5E 0D      je _if28_else
1710   0D44             _if28_true:
1711   0D44             ;; putchar('-'); 
1712   0D44 26 2D 00      mov b, $2d
1713   0D47 DD            push bl
1714   0D48 07 2A 11      call putchar
1715   0D4B 51 01 00      add sp, 1
1716   0D4E             ;; num = -num; 
1717   0D4E FA 05 00      lea d, [bp + 5] ; $num
1718   0D51 DA            push d
1719   0D52 FA 05 00      lea d, [bp + 5] ; $num
1720   0D55 2A            mov b, [d]
1721   0D56 FD 97         neg b
1722   0D58 E7            pop d
1723   0D59 FD 43         mov [d], b
1724   0D5B 0A 80 0D      jmp _if28_exit
1725   0D5E             _if28_else:
1726   0D5E             ;; if (num == 0) { 
1727   0D5E             _if29_cond:
1728   0D5E FA 05 00      lea d, [bp + 5] ; $num
1729   0D61 2A            mov b, [d]
1730   0D62             ; START RELATIONAL
1731   0D62 D7            push a
1732   0D63 11            mov a, b
1733   0D64 26 00 00      mov b, $0
1734   0D67 B0            cmp a, b
1735   0D68 FD 71         seq ; ==
1736   0D6A E4            pop a
1737   0D6B             ; END RELATIONAL
1738   0D6B C0 00 00      cmp b, 0
1739   0D6E C6 80 0D      je _if29_exit
1740   0D71             _if29_true:
1741   0D71             ;; putchar('0'); 
1742   0D71 26 30 00      mov b, $30
1743   0D74 DD            push bl
1744   0D75 07 2A 11      call putchar
1745   0D78 51 01 00      add sp, 1
1746   0D7B             ;; return; 
1747   0D7B F9            leave
1748   0D7C 09            ret
1749   0D7D 0A 80 0D      jmp _if29_exit
1750   0D80             _if29_exit:
1751   0D80             _if28_exit:
1752   0D80             ;; while (num > 0) { 
1753   0D80             _while30_cond:
1754   0D80 FA 05 00      lea d, [bp + 5] ; $num
1755   0D83 2A            mov b, [d]
1756   0D84             ; START RELATIONAL
1757   0D84 D7            push a
1758   0D85 11            mov a, b
1759   0D86 26 00 00      mov b, $0
1760   0D89 B0            cmp a, b
1761   0D8A FD 7F         sgt ; >
1762   0D8C E4            pop a
1763   0D8D             ; END RELATIONAL
1764   0D8D C0 00 00      cmp b, 0
1765   0D90 C6 DB 0D      je _while30_exit
1766   0D93             _while30_block:
1767   0D93             ;; digits[i] = '0' + (num % 10); 
1768   0D93 FA FC FF      lea d, [bp + -4] ; $digits
1769   0D96 D7            push a
1770   0D97 DA            push d
1771   0D98 FA FA FF      lea d, [bp + -6] ; $i
1772   0D9B 2A            mov b, [d]
1773   0D9C E7            pop d
1774   0D9D 5A            add d, b
1775   0D9E E4            pop a
1776   0D9F DA            push d
1777   0DA0 26 30 00      mov b, $30
1778   0DA3             ; START TERMS
1779   0DA3 D7            push a
1780   0DA4 11            mov a, b
1781   0DA5 FA 05 00      lea d, [bp + 5] ; $num
1782   0DA8 2A            mov b, [d]
1783   0DA9             ; START FACTORS
1784   0DA9 D7            push a
1785   0DAA 11            mov a, b
1786   0DAB 26 0A 00      mov b, $a
1787   0DAE AE            div a, b ; 
1788   0DAF 11            mov a, b
1789   0DB0 27            mov b, a
1790   0DB1 E4            pop a
1791   0DB2             ; END FACTORS
1792   0DB2 54            add a, b
1793   0DB3 27            mov b, a
1794   0DB4 E4            pop a
1795   0DB5             ; END TERMS
1796   0DB5 E7            pop d
1797   0DB6 FD 3E         mov [d], bl
1798   0DB8             ;; num = num / 10; 
1799   0DB8 FA 05 00      lea d, [bp + 5] ; $num
1800   0DBB DA            push d
1801   0DBC FA 05 00      lea d, [bp + 5] ; $num
1802   0DBF 2A            mov b, [d]
1803   0DC0             ; START FACTORS
1804   0DC0 D7            push a
1805   0DC1 11            mov a, b
1806   0DC2 26 0A 00      mov b, $a
1807   0DC5 AE            div a, b
1808   0DC6 27            mov b, a
1809   0DC7 E4            pop a
1810   0DC8             ; END FACTORS
1811   0DC8 E7            pop d
1812   0DC9 FD 43         mov [d], b
1813   0DCB             ;; i++; 
1814   0DCB FA FA FF      lea d, [bp + -6] ; $i
1815   0DCE 2A            mov b, [d]
1816   0DCF D8            push b
1817   0DD0 FD 77         inc b
1818   0DD2 FA FA FF      lea d, [bp + -6] ; $i
1819   0DD5 FD 43         mov [d], b
1820   0DD7 E5            pop b
1821   0DD8 0A 80 0D      jmp _while30_cond
1822   0DDB             _while30_exit:
1823   0DDB             ;; while (i > 0) { 
1824   0DDB             _while31_cond:
1825   0DDB FA FA FF      lea d, [bp + -6] ; $i
1826   0DDE 2A            mov b, [d]
1827   0DDF             ; START RELATIONAL
1828   0DDF D7            push a
1829   0DE0 11            mov a, b
1830   0DE1 26 00 00      mov b, $0
1831   0DE4 B0            cmp a, b
1832   0DE5 FD 7F         sgt ; >
1833   0DE7 E4            pop a
1834   0DE8             ; END RELATIONAL
1835   0DE8 C0 00 00      cmp b, 0
1836   0DEB C6 14 0E      je _while31_exit
1837   0DEE             _while31_block:
1838   0DEE             ;; i--; 
1839   0DEE FA FA FF      lea d, [bp + -6] ; $i
1840   0DF1 2A            mov b, [d]
1841   0DF2 D8            push b
1842   0DF3 FD 7D         dec b
1843   0DF5 FA FA FF      lea d, [bp + -6] ; $i
1844   0DF8 FD 43         mov [d], b
1845   0DFA E5            pop b
1846   0DFB             ;; putchar(digits[i]); 
1847   0DFB FA FC FF      lea d, [bp + -4] ; $digits
1848   0DFE D7            push a
1849   0DFF DA            push d
1850   0E00 FA FA FF      lea d, [bp + -6] ; $i
1851   0E03 2A            mov b, [d]
1852   0E04 E7            pop d
1853   0E05 5A            add d, b
1854   0E06 E4            pop a
1855   0E07 32            mov bl, [d]
1856   0E08 A7 00         mov bh, 0
1857   0E0A DD            push bl
1858   0E0B 07 2A 11      call putchar
1859   0E0E 51 01 00      add sp, 1
1860   0E11 0A DB 0D      jmp _while31_cond
1861   0E14             _while31_exit:
1862   0E14 F9            leave
1863   0E15 09            ret
1864   0E16             
1865   0E16             print_signed_long:
1866   0E16 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1867   0E19             ; $digits 
1868   0E19             ; $i 
1869   0E19 10 00 00      mov a, $0
1870   0E1C 45 F5 FF      mov [bp + -11], a
1871   0E1F 52 0C 00      sub sp, 12
1872   0E22             ;; if (num < 0) { 
1873   0E22             _if32_cond:
1874   0E22 FA 05 00      lea d, [bp + 5] ; $num
1875   0E25 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1876   0E28 FD 39         mov c, b ; And place it into C
1877   0E2A 2A            mov b, [d] ; Lower Word in B
1878   0E2B             ; START RELATIONAL
1879   0E2B D7            push a
1880   0E2C FD D8         push g
1881   0E2E 11            mov a, b
1882   0E2F FD 7A         mov g, c
1883   0E31 26 00 00      mov b, $0
1884   0E34 B0            cmp a, b
1885   0E35 FD 73         slt ; < 
1886   0E37 FD F1         pop g
1887   0E39 E4            pop a
1888   0E3A             ; END RELATIONAL
1889   0E3A C0 00 00      cmp b, 0
1890   0E3D C6 64 0E      je _if32_else
1891   0E40             _if32_true:
1892   0E40             ;; putchar('-'); 
1893   0E40 26 2D 00      mov b, $2d
1894   0E43 DD            push bl
1895   0E44 07 2A 11      call putchar
1896   0E47 51 01 00      add sp, 1
1897   0E4A             ;; num = -num; 
1898   0E4A FA 05 00      lea d, [bp + 5] ; $num
1899   0E4D DA            push d
1900   0E4E FA 05 00      lea d, [bp + 5] ; $num
1901   0E51 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1902   0E54 FD 39         mov c, b ; And place it into C
1903   0E56 2A            mov b, [d] ; Lower Word in B
1904   0E57 FD 97         neg b
1905   0E59 E7            pop d
1906   0E5A FD 43         mov [d], b
1907   0E5C 28            mov b, c
1908   0E5D FD 44 02 00   mov [d + 2], b
1909   0E61 0A 9B 0E      jmp _if32_exit
1910   0E64             _if32_else:
1911   0E64             ;; if (num == 0) { 
1912   0E64             _if33_cond:
1913   0E64 FA 05 00      lea d, [bp + 5] ; $num
1914   0E67 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1915   0E6A FD 39         mov c, b ; And place it into C
1916   0E6C 2A            mov b, [d] ; Lower Word in B
1917   0E6D             ; START RELATIONAL
1918   0E6D D7            push a
1919   0E6E FD D8         push g
1920   0E70 11            mov a, b
1921   0E71 FD 7A         mov g, c
1922   0E73 26 00 00      mov b, $0
1923   0E76 B0            cmp a, b
1924   0E77 FD 71         seq ; ==
1925   0E79 D8            push b
1926   0E7A 12            mov a, c
1927   0E7B FD 27         mov b, g
1928   0E7D B0            cmp a, b
1929   0E7E FD 71         seq ; ==
1930   0E80 E4            pop a
1931   0E81 FD A7         sand a, b
1932   0E83 FD F1         pop g
1933   0E85 E4            pop a
1934   0E86             ; END RELATIONAL
1935   0E86 C0 00 00      cmp b, 0
1936   0E89 C6 9B 0E      je _if33_exit
1937   0E8C             _if33_true:
1938   0E8C             ;; putchar('0'); 
1939   0E8C 26 30 00      mov b, $30
1940   0E8F DD            push bl
1941   0E90 07 2A 11      call putchar
1942   0E93 51 01 00      add sp, 1
1943   0E96             ;; return; 
1944   0E96 F9            leave
1945   0E97 09            ret
1946   0E98 0A 9B 0E      jmp _if33_exit
1947   0E9B             _if33_exit:
1948   0E9B             _if32_exit:
1949   0E9B             ;; while (num > 0) { 
1950   0E9B             _while34_cond:
1951   0E9B FA 05 00      lea d, [bp + 5] ; $num
1952   0E9E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1953   0EA1 FD 39         mov c, b ; And place it into C
1954   0EA3 2A            mov b, [d] ; Lower Word in B
1955   0EA4             ; START RELATIONAL
1956   0EA4 D7            push a
1957   0EA5 FD D8         push g
1958   0EA7 11            mov a, b
1959   0EA8 FD 7A         mov g, c
1960   0EAA 26 00 00      mov b, $0
1961   0EAD B0            cmp a, b
1962   0EAE FD 7F         sgt ; >
1963   0EB0 FD F1         pop g
1964   0EB2 E4            pop a
1965   0EB3             ; END RELATIONAL
1966   0EB3 C0 00 00      cmp b, 0
1967   0EB6 C6 10 0F      je _while34_exit
1968   0EB9             _while34_block:
1969   0EB9             ;; digits[i] = '0' + (num % 10); 
1970   0EB9 FA F7 FF      lea d, [bp + -9] ; $digits
1971   0EBC D7            push a
1972   0EBD DA            push d
1973   0EBE FA F5 FF      lea d, [bp + -11] ; $i
1974   0EC1 2A            mov b, [d]
1975   0EC2 E7            pop d
1976   0EC3 5A            add d, b
1977   0EC4 E4            pop a
1978   0EC5 DA            push d
1979   0EC6 26 30 00      mov b, $30
1980   0EC9             ; START TERMS
1981   0EC9 D7            push a
1982   0ECA 11            mov a, b
1983   0ECB FA 05 00      lea d, [bp + 5] ; $num
1984   0ECE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1985   0ED1 FD 39         mov c, b ; And place it into C
1986   0ED3 2A            mov b, [d] ; Lower Word in B
1987   0ED4             ; START FACTORS
1988   0ED4 D7            push a
1989   0ED5 11            mov a, b
1990   0ED6 26 0A 00      mov b, $a
1991   0ED9 AE            div a, b ; 
1992   0EDA 11            mov a, b
1993   0EDB 27            mov b, a
1994   0EDC E4            pop a
1995   0EDD             ; END FACTORS
1996   0EDD 54            add a, b
1997   0EDE 27            mov b, a
1998   0EDF E4            pop a
1999   0EE0             ; END TERMS
2000   0EE0 E7            pop d
2001   0EE1 FD 3E         mov [d], bl
2002   0EE3             ;; num = num / 10; 
2003   0EE3 FA 05 00      lea d, [bp + 5] ; $num
2004   0EE6 DA            push d
2005   0EE7 FA 05 00      lea d, [bp + 5] ; $num
2006   0EEA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2007   0EED FD 39         mov c, b ; And place it into C
2008   0EEF 2A            mov b, [d] ; Lower Word in B
2009   0EF0             ; START FACTORS
2010   0EF0 D7            push a
2011   0EF1 11            mov a, b
2012   0EF2 26 0A 00      mov b, $a
2013   0EF5 AE            div a, b
2014   0EF6 27            mov b, a
2015   0EF7 E4            pop a
2016   0EF8             ; END FACTORS
2017   0EF8 E7            pop d
2018   0EF9 FD 43         mov [d], b
2019   0EFB 28            mov b, c
2020   0EFC FD 44 02 00   mov [d + 2], b
2021   0F00             ;; i++; 
2022   0F00 FA F5 FF      lea d, [bp + -11] ; $i
2023   0F03 2A            mov b, [d]
2024   0F04 D8            push b
2025   0F05 FD 77         inc b
2026   0F07 FA F5 FF      lea d, [bp + -11] ; $i
2027   0F0A FD 43         mov [d], b
2028   0F0C E5            pop b
2029   0F0D 0A 9B 0E      jmp _while34_cond
2030   0F10             _while34_exit:
2031   0F10             ;; while (i > 0) { 
2032   0F10             _while35_cond:
2033   0F10 FA F5 FF      lea d, [bp + -11] ; $i
2034   0F13 2A            mov b, [d]
2035   0F14             ; START RELATIONAL
2036   0F14 D7            push a
2037   0F15 11            mov a, b
2038   0F16 26 00 00      mov b, $0
2039   0F19 B0            cmp a, b
2040   0F1A FD 7F         sgt ; >
2041   0F1C E4            pop a
2042   0F1D             ; END RELATIONAL
2043   0F1D C0 00 00      cmp b, 0
2044   0F20 C6 49 0F      je _while35_exit
2045   0F23             _while35_block:
2046   0F23             ;; i--; 
2047   0F23 FA F5 FF      lea d, [bp + -11] ; $i
2048   0F26 2A            mov b, [d]
2049   0F27 D8            push b
2050   0F28 FD 7D         dec b
2051   0F2A FA F5 FF      lea d, [bp + -11] ; $i
2052   0F2D FD 43         mov [d], b
2053   0F2F E5            pop b
2054   0F30             ;; putchar(digits[i]); 
2055   0F30 FA F7 FF      lea d, [bp + -9] ; $digits
2056   0F33 D7            push a
2057   0F34 DA            push d
2058   0F35 FA F5 FF      lea d, [bp + -11] ; $i
2059   0F38 2A            mov b, [d]
2060   0F39 E7            pop d
2061   0F3A 5A            add d, b
2062   0F3B E4            pop a
2063   0F3C 32            mov bl, [d]
2064   0F3D A7 00         mov bh, 0
2065   0F3F DD            push bl
2066   0F40 07 2A 11      call putchar
2067   0F43 51 01 00      add sp, 1
2068   0F46 0A 10 0F      jmp _while35_cond
2069   0F49             _while35_exit:
2070   0F49 F9            leave
2071   0F4A 09            ret
2072   0F4B             
2073   0F4B             print_unsigned_long:
2074   0F4B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2075   0F4E             ; $digits 
2076   0F4E             ; $i 
2077   0F4E 52 0C 00      sub sp, 12
2078   0F51             ;; i = 0; 
2079   0F51 FA F5 FF      lea d, [bp + -11] ; $i
2080   0F54 DA            push d
2081   0F55 26 00 00      mov b, $0
2082   0F58 E7            pop d
2083   0F59 FD 43         mov [d], b
2084   0F5B             ;; if(num == 0){ 
2085   0F5B             _if36_cond:
2086   0F5B FA 05 00      lea d, [bp + 5] ; $num
2087   0F5E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2088   0F61 FD 39         mov c, b ; And place it into C
2089   0F63 2A            mov b, [d] ; Lower Word in B
2090   0F64             ; START RELATIONAL
2091   0F64 D7            push a
2092   0F65 FD D8         push g
2093   0F67 11            mov a, b
2094   0F68 FD 7A         mov g, c
2095   0F6A 26 00 00      mov b, $0
2096   0F6D B0            cmp a, b
2097   0F6E FD 71         seq ; ==
2098   0F70 D8            push b
2099   0F71 12            mov a, c
2100   0F72 FD 27         mov b, g
2101   0F74 B0            cmp a, b
2102   0F75 FD 71         seq ; ==
2103   0F77 E4            pop a
2104   0F78 FD A7         sand a, b
2105   0F7A FD F1         pop g
2106   0F7C E4            pop a
2107   0F7D             ; END RELATIONAL
2108   0F7D C0 00 00      cmp b, 0
2109   0F80 C6 92 0F      je _if36_exit
2110   0F83             _if36_true:
2111   0F83             ;; putchar('0'); 
2112   0F83 26 30 00      mov b, $30
2113   0F86 DD            push bl
2114   0F87 07 2A 11      call putchar
2115   0F8A 51 01 00      add sp, 1
2116   0F8D             ;; return; 
2117   0F8D F9            leave
2118   0F8E 09            ret
2119   0F8F 0A 92 0F      jmp _if36_exit
2120   0F92             _if36_exit:
2121   0F92             ;; while (num > 0) { 
2122   0F92             _while37_cond:
2123   0F92 FA 05 00      lea d, [bp + 5] ; $num
2124   0F95 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2125   0F98 FD 39         mov c, b ; And place it into C
2126   0F9A 2A            mov b, [d] ; Lower Word in B
2127   0F9B             ; START RELATIONAL
2128   0F9B D7            push a
2129   0F9C FD D8         push g
2130   0F9E 11            mov a, b
2131   0F9F FD 7A         mov g, c
2132   0FA1 26 00 00      mov b, $0
2133   0FA4 B0            cmp a, b
2134   0FA5 FD 81         sgu ; > (unsigned)
2135   0FA7 FD F1         pop g
2136   0FA9 E4            pop a
2137   0FAA             ; END RELATIONAL
2138   0FAA C0 00 00      cmp b, 0
2139   0FAD C6 07 10      je _while37_exit
2140   0FB0             _while37_block:
2141   0FB0             ;; digits[i] = '0' + (num % 10); 
2142   0FB0 FA F7 FF      lea d, [bp + -9] ; $digits
2143   0FB3 D7            push a
2144   0FB4 DA            push d
2145   0FB5 FA F5 FF      lea d, [bp + -11] ; $i
2146   0FB8 2A            mov b, [d]
2147   0FB9 E7            pop d
2148   0FBA 5A            add d, b
2149   0FBB E4            pop a
2150   0FBC DA            push d
2151   0FBD 26 30 00      mov b, $30
2152   0FC0             ; START TERMS
2153   0FC0 D7            push a
2154   0FC1 11            mov a, b
2155   0FC2 FA 05 00      lea d, [bp + 5] ; $num
2156   0FC5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2157   0FC8 FD 39         mov c, b ; And place it into C
2158   0FCA 2A            mov b, [d] ; Lower Word in B
2159   0FCB             ; START FACTORS
2160   0FCB D7            push a
2161   0FCC 11            mov a, b
2162   0FCD 26 0A 00      mov b, $a
2163   0FD0 AE            div a, b ; 
2164   0FD1 11            mov a, b
2165   0FD2 27            mov b, a
2166   0FD3 E4            pop a
2167   0FD4             ; END FACTORS
2168   0FD4 54            add a, b
2169   0FD5 27            mov b, a
2170   0FD6 E4            pop a
2171   0FD7             ; END TERMS
2172   0FD7 E7            pop d
2173   0FD8 FD 3E         mov [d], bl
2174   0FDA             ;; num = num / 10; 
2175   0FDA FA 05 00      lea d, [bp + 5] ; $num
2176   0FDD DA            push d
2177   0FDE FA 05 00      lea d, [bp + 5] ; $num
2178   0FE1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2179   0FE4 FD 39         mov c, b ; And place it into C
2180   0FE6 2A            mov b, [d] ; Lower Word in B
2181   0FE7             ; START FACTORS
2182   0FE7 D7            push a
2183   0FE8 11            mov a, b
2184   0FE9 26 0A 00      mov b, $a
2185   0FEC AE            div a, b
2186   0FED 27            mov b, a
2187   0FEE E4            pop a
2188   0FEF             ; END FACTORS
2189   0FEF E7            pop d
2190   0FF0 FD 43         mov [d], b
2191   0FF2 28            mov b, c
2192   0FF3 FD 44 02 00   mov [d + 2], b
2193   0FF7             ;; i++; 
2194   0FF7 FA F5 FF      lea d, [bp + -11] ; $i
2195   0FFA 2A            mov b, [d]
2196   0FFB D8            push b
2197   0FFC FD 77         inc b
2198   0FFE FA F5 FF      lea d, [bp + -11] ; $i
2199   1001 FD 43         mov [d], b
2200   1003 E5            pop b
2201   1004 0A 92 0F      jmp _while37_cond
2202   1007             _while37_exit:
2203   1007             ;; while (i > 0) { 
2204   1007             _while38_cond:
2205   1007 FA F5 FF      lea d, [bp + -11] ; $i
2206   100A 2A            mov b, [d]
2207   100B             ; START RELATIONAL
2208   100B D7            push a
2209   100C 11            mov a, b
2210   100D 26 00 00      mov b, $0
2211   1010 B0            cmp a, b
2212   1011 FD 7F         sgt ; >
2213   1013 E4            pop a
2214   1014             ; END RELATIONAL
2215   1014 C0 00 00      cmp b, 0
2216   1017 C6 40 10      je _while38_exit
2217   101A             _while38_block:
2218   101A             ;; i--; 
2219   101A FA F5 FF      lea d, [bp + -11] ; $i
2220   101D 2A            mov b, [d]
2221   101E D8            push b
2222   101F FD 7D         dec b
2223   1021 FA F5 FF      lea d, [bp + -11] ; $i
2224   1024 FD 43         mov [d], b
2225   1026 E5            pop b
2226   1027             ;; putchar(digits[i]); 
2227   1027 FA F7 FF      lea d, [bp + -9] ; $digits
2228   102A D7            push a
2229   102B DA            push d
2230   102C FA F5 FF      lea d, [bp + -11] ; $i
2231   102F 2A            mov b, [d]
2232   1030 E7            pop d
2233   1031 5A            add d, b
2234   1032 E4            pop a
2235   1033 32            mov bl, [d]
2236   1034 A7 00         mov bh, 0
2237   1036 DD            push bl
2238   1037 07 2A 11      call putchar
2239   103A 51 01 00      add sp, 1
2240   103D 0A 07 10      jmp _while38_cond
2241   1040             _while38_exit:
2242   1040 F9            leave
2243   1041 09            ret
2244   1042             
2245   1042             print_unsigned:
2246   1042 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2247   1045             ; $digits 
2248   1045             ; $i 
2249   1045 52 07 00      sub sp, 7
2250   1048             ;; i = 0; 
2251   1048 FA FA FF      lea d, [bp + -6] ; $i
2252   104B DA            push d
2253   104C 26 00 00      mov b, $0
2254   104F E7            pop d
2255   1050 FD 43         mov [d], b
2256   1052             ;; if(num == 0){ 
2257   1052             _if39_cond:
2258   1052 FA 05 00      lea d, [bp + 5] ; $num
2259   1055 2A            mov b, [d]
2260   1056             ; START RELATIONAL
2261   1056 D7            push a
2262   1057 11            mov a, b
2263   1058 26 00 00      mov b, $0
2264   105B B0            cmp a, b
2265   105C FD 71         seq ; ==
2266   105E E4            pop a
2267   105F             ; END RELATIONAL
2268   105F C0 00 00      cmp b, 0
2269   1062 C6 74 10      je _if39_exit
2270   1065             _if39_true:
2271   1065             ;; putchar('0'); 
2272   1065 26 30 00      mov b, $30
2273   1068 DD            push bl
2274   1069 07 2A 11      call putchar
2275   106C 51 01 00      add sp, 1
2276   106F             ;; return; 
2277   106F F9            leave
2278   1070 09            ret
2279   1071 0A 74 10      jmp _if39_exit
2280   1074             _if39_exit:
2281   1074             ;; while (num > 0) { 
2282   1074             _while40_cond:
2283   1074 FA 05 00      lea d, [bp + 5] ; $num
2284   1077 2A            mov b, [d]
2285   1078             ; START RELATIONAL
2286   1078 D7            push a
2287   1079 11            mov a, b
2288   107A 26 00 00      mov b, $0
2289   107D B0            cmp a, b
2290   107E FD 81         sgu ; > (unsigned)
2291   1080 E4            pop a
2292   1081             ; END RELATIONAL
2293   1081 C0 00 00      cmp b, 0
2294   1084 C6 CF 10      je _while40_exit
2295   1087             _while40_block:
2296   1087             ;; digits[i] = '0' + (num % 10); 
2297   1087 FA FC FF      lea d, [bp + -4] ; $digits
2298   108A D7            push a
2299   108B DA            push d
2300   108C FA FA FF      lea d, [bp + -6] ; $i
2301   108F 2A            mov b, [d]
2302   1090 E7            pop d
2303   1091 5A            add d, b
2304   1092 E4            pop a
2305   1093 DA            push d
2306   1094 26 30 00      mov b, $30
2307   1097             ; START TERMS
2308   1097 D7            push a
2309   1098 11            mov a, b
2310   1099 FA 05 00      lea d, [bp + 5] ; $num
2311   109C 2A            mov b, [d]
2312   109D             ; START FACTORS
2313   109D D7            push a
2314   109E 11            mov a, b
2315   109F 26 0A 00      mov b, $a
2316   10A2 AE            div a, b ; 
2317   10A3 11            mov a, b
2318   10A4 27            mov b, a
2319   10A5 E4            pop a
2320   10A6             ; END FACTORS
2321   10A6 54            add a, b
2322   10A7 27            mov b, a
2323   10A8 E4            pop a
2324   10A9             ; END TERMS
2325   10A9 E7            pop d
2326   10AA FD 3E         mov [d], bl
2327   10AC             ;; num = num / 10; 
2328   10AC FA 05 00      lea d, [bp + 5] ; $num
2329   10AF DA            push d
2330   10B0 FA 05 00      lea d, [bp + 5] ; $num
2331   10B3 2A            mov b, [d]
2332   10B4             ; START FACTORS
2333   10B4 D7            push a
2334   10B5 11            mov a, b
2335   10B6 26 0A 00      mov b, $a
2336   10B9 AE            div a, b
2337   10BA 27            mov b, a
2338   10BB E4            pop a
2339   10BC             ; END FACTORS
2340   10BC E7            pop d
2341   10BD FD 43         mov [d], b
2342   10BF             ;; i++; 
2343   10BF FA FA FF      lea d, [bp + -6] ; $i
2344   10C2 2A            mov b, [d]
2345   10C3 D8            push b
2346   10C4 FD 77         inc b
2347   10C6 FA FA FF      lea d, [bp + -6] ; $i
2348   10C9 FD 43         mov [d], b
2349   10CB E5            pop b
2350   10CC 0A 74 10      jmp _while40_cond
2351   10CF             _while40_exit:
2352   10CF             ;; while (i > 0) { 
2353   10CF             _while41_cond:
2354   10CF FA FA FF      lea d, [bp + -6] ; $i
2355   10D2 2A            mov b, [d]
2356   10D3             ; START RELATIONAL
2357   10D3 D7            push a
2358   10D4 11            mov a, b
2359   10D5 26 00 00      mov b, $0
2360   10D8 B0            cmp a, b
2361   10D9 FD 7F         sgt ; >
2362   10DB E4            pop a
2363   10DC             ; END RELATIONAL
2364   10DC C0 00 00      cmp b, 0
2365   10DF C6 08 11      je _while41_exit
2366   10E2             _while41_block:
2367   10E2             ;; i--; 
2368   10E2 FA FA FF      lea d, [bp + -6] ; $i
2369   10E5 2A            mov b, [d]
2370   10E6 D8            push b
2371   10E7 FD 7D         dec b
2372   10E9 FA FA FF      lea d, [bp + -6] ; $i
2373   10EC FD 43         mov [d], b
2374   10EE E5            pop b
2375   10EF             ;; putchar(digits[i]); 
2376   10EF FA FC FF      lea d, [bp + -4] ; $digits
2377   10F2 D7            push a
2378   10F3 DA            push d
2379   10F4 FA FA FF      lea d, [bp + -6] ; $i
2380   10F7 2A            mov b, [d]
2381   10F8 E7            pop d
2382   10F9 5A            add d, b
2383   10FA E4            pop a
2384   10FB 32            mov bl, [d]
2385   10FC A7 00         mov bh, 0
2386   10FE DD            push bl
2387   10FF 07 2A 11      call putchar
2388   1102 51 01 00      add sp, 1
2389   1105 0A CF 10      jmp _while41_cond
2390   1108             _while41_exit:
2391   1108 F9            leave
2392   1109 09            ret
2393   110A             
2394   110A             rand:
2395   110A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2396   110D             ; $sec 
2397   110D 52 01 00      sub sp, 1
2398   1110             
2399   1110             ; --- BEGIN INLINE ASM BLOCK
2400   1110 19 00         mov al, 0
2401   1112 05 01         syscall sys_rtc					
2402   1114 1A            mov al, ah
2403   1115 FA 00 00      lea d, [bp + 0] ; $sec
2404   1118 1E            mov al, [d]
2405   1119             ; --- END INLINE ASM BLOCK
2406   1119             
2407   1119             ;; return sec; 
2408   1119 FA 00 00      lea d, [bp + 0] ; $sec
2409   111C 32            mov bl, [d]
2410   111D A7 00         mov bh, 0
2411   111F F9            leave
2412   1120 09            ret
2413   1121             
2414   1121             date:
2415   1121 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2416   1124             
2417   1124             ; --- BEGIN INLINE ASM BLOCK
2418   1124 19 00         mov al, 0 
2419   1126 05 07         syscall sys_datetime
2420   1128             ; --- END INLINE ASM BLOCK
2421   1128             
2422   1128 F9            leave
2423   1129 09            ret
2424   112A             
2425   112A             putchar:
2426   112A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2427   112D             
2428   112D             ; --- BEGIN INLINE ASM BLOCK
2429   112D FA 05 00      lea d, [bp + 5] ; $c
2430   1130 1E            mov al, [d]
2431   1131 23            mov ah, al
2432   1132 07 A7 13      call _putchar
2433   1135             ; --- END INLINE ASM BLOCK
2434   1135             
2435   1135 F9            leave
2436   1136 09            ret
2437   1137             
2438   1137             getchar:
2439   1137 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2440   113A             ; $c 
2441   113A 52 01 00      sub sp, 1
2442   113D             
2443   113D             ; --- BEGIN INLINE ASM BLOCK
2444   113D 07 A0 13      call getch
2445   1140 1A            mov al, ah
2446   1141 FA 00 00      lea d, [bp + 0] ; $c
2447   1144 3E            mov [d], al
2448   1145             ; --- END INLINE ASM BLOCK
2449   1145             
2450   1145             ;; return c; 
2451   1145 FA 00 00      lea d, [bp + 0] ; $c
2452   1148 32            mov bl, [d]
2453   1149 A7 00         mov bh, 0
2454   114B F9            leave
2455   114C 09            ret
2456   114D             
2457   114D             scann:
2458   114D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2459   1150             ; $m 
2460   1150 52 02 00      sub sp, 2
2461   1153             
2462   1153             ; --- BEGIN INLINE ASM BLOCK
2463   1153 07 EB 15      call scan_u16d
2464   1156 FA FF FF      lea d, [bp + -1] ; $m
2465   1159 43            mov [d], a
2466   115A             ; --- END INLINE ASM BLOCK
2467   115A             
2468   115A             ;; return m; 
2469   115A FA FF FF      lea d, [bp + -1] ; $m
2470   115D 2A            mov b, [d]
2471   115E F9            leave
2472   115F 09            ret
2473   1160             
2474   1160             puts:
2475   1160 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2476   1163             
2477   1163             ; --- BEGIN INLINE ASM BLOCK
2478   1163 FA 05 00      lea d, [bp + 5] ; $s
2479   1166 15            mov a, [d]
2480   1167 3C            mov d, a
2481   1168 07 F1 14      call _puts
2482   116B 10 00 0A      mov a, $0A00
2483   116E 05 03         syscall sys_io
2484   1170             ; --- END INLINE ASM BLOCK
2485   1170             
2486   1170 F9            leave
2487   1171 09            ret
2488   1172             
2489   1172             print:
2490   1172 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2491   1175             
2492   1175             ; --- BEGIN INLINE ASM BLOCK
2493   1175 FA 05 00      lea d, [bp + 5] ; $s
2494   1178 FD 2A         mov d, [d]
2495   117A 07 F1 14      call _puts
2496   117D             ; --- END INLINE ASM BLOCK
2497   117D             
2498   117D F9            leave
2499   117E 09            ret
2500   117F             
2501   117F             loadfile:
2502   117F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2503   1182             
2504   1182             ; --- BEGIN INLINE ASM BLOCK
2505   1182 FA 07 00      lea d, [bp + 7] ; $destination
2506   1185 15            mov a, [d]
2507   1186 4F            mov di, a
2508   1187 FA 05 00      lea d, [bp + 5] ; $filename
2509   118A FD 2A         mov d, [d]
2510   118C 19 14         mov al, 20
2511   118E 05 04         syscall sys_filesystem
2512   1190             ; --- END INLINE ASM BLOCK
2513   1190             
2514   1190 F9            leave
2515   1191 09            ret
2516   1192             
2517   1192             create_file:
2518   1192 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2519   1195 F9            leave
2520   1196 09            ret
2521   1197             
2522   1197             delete_file:
2523   1197 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2524   119A             
2525   119A             ; --- BEGIN INLINE ASM BLOCK
2526   119A FA 05 00      lea d, [bp + 5] ; $filename
2527   119D 19 0A         mov al, 10
2528   119F 05 04         syscall sys_filesystem
2529   11A1             ; --- END INLINE ASM BLOCK
2530   11A1             
2531   11A1 F9            leave
2532   11A2 09            ret
2533   11A3             
2534   11A3             fopen:
2535   11A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2536   11A6 F9            leave
2537   11A7 09            ret
2538   11A8             
2539   11A8             fclose:
2540   11A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2541   11AB F9            leave
2542   11AC 09            ret
2543   11AD             
2544   11AD             alloc:
2545   11AD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2546   11B0             ;; heap_top = heap_top + bytes; 
2547   11B0 3B 45 23      mov d, _heap_top ; $heap_top
2548   11B3 DA            push d
2549   11B4 3B 45 23      mov d, _heap_top ; $heap_top
2550   11B7 2A            mov b, [d]
2551   11B8             ; START TERMS
2552   11B8 D7            push a
2553   11B9 11            mov a, b
2554   11BA FA 05 00      lea d, [bp + 5] ; $bytes
2555   11BD 2A            mov b, [d]
2556   11BE 54            add a, b
2557   11BF 27            mov b, a
2558   11C0 E4            pop a
2559   11C1             ; END TERMS
2560   11C1 E7            pop d
2561   11C2 FD 43         mov [d], b
2562   11C4             ;; return heap_top - bytes; 
2563   11C4 3B 45 23      mov d, _heap_top ; $heap_top
2564   11C7 2A            mov b, [d]
2565   11C8             ; START TERMS
2566   11C8 D7            push a
2567   11C9 11            mov a, b
2568   11CA FA 05 00      lea d, [bp + 5] ; $bytes
2569   11CD 2A            mov b, [d]
2570   11CE 60            sub a, b
2571   11CF 27            mov b, a
2572   11D0 E4            pop a
2573   11D1             ; END TERMS
2574   11D1 F9            leave
2575   11D2 09            ret
2576   11D3             
2577   11D3             free:
2578   11D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2579   11D6             ;; return heap_top = heap_top - bytes; 
2580   11D6 3B 45 23      mov d, _heap_top ; $heap_top
2581   11D9 DA            push d
2582   11DA 3B 45 23      mov d, _heap_top ; $heap_top
2583   11DD 2A            mov b, [d]
2584   11DE             ; START TERMS
2585   11DE D7            push a
2586   11DF 11            mov a, b
2587   11E0 FA 05 00      lea d, [bp + 5] ; $bytes
2588   11E3 2A            mov b, [d]
2589   11E4 60            sub a, b
2590   11E5 27            mov b, a
2591   11E6 E4            pop a
2592   11E7             ; END TERMS
2593   11E7 E7            pop d
2594   11E8 FD 43         mov [d], b
2595   11EA F9            leave
2596   11EB 09            ret
2597   11EC             
2598   11EC             exit:
2599   11EC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2600   11EF             
2601   11EF             ; --- BEGIN INLINE ASM BLOCK
2602   11EF 05 0B         syscall sys_terminate_proc
2603   11F1             ; --- END INLINE ASM BLOCK
2604   11F1             
2605   11F1 F9            leave
2606   11F2 09            ret
2607   11F3             
2608   11F3             load_hex:
2609   11F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2610   11F6             ; $temp 
2611   11F6 52 02 00      sub sp, 2
2612   11F9             ;; temp = alloc(32768); 
2613   11F9 FA FF FF      lea d, [bp + -1] ; $temp
2614   11FC DA            push d
2615   11FD 26 00 80      mov b, $8000
2616   1200 FD AB         swp b
2617   1202 D8            push b
2618   1203 07 AD 11      call alloc
2619   1206 51 02 00      add sp, 2
2620   1209 E7            pop d
2621   120A FD 43         mov [d], b
2622   120C             
2623   120C             ; --- BEGIN INLINE ASM BLOCK
2624   120C               
2625   120C               
2626   120C               
2627   120C               
2628   120C               
2629   120C             _load_hex:
2630   120C D7            push a
2631   120D D8            push b
2632   120E DA            push d
2633   120F E2            push si
2634   1210 E3            push di
2635   1211 52 00 80      sub sp, $8000      
2636   1214 38 00 00      mov c, 0
2637   1217 48            mov a, sp
2638   1218 77            inc a
2639   1219 3C            mov d, a          
2640   121A 07 AE 13      call _gets        
2641   121D 4D            mov si, a
2642   121E             __load_hex_loop:
2643   121E F6            lodsb             
2644   121F B9 00         cmp al, 0         
2645   1221 C6 2F 12      jz __load_hex_ret
2646   1224 36            mov bh, al
2647   1225 F6            lodsb
2648   1226 2F            mov bl, al
2649   1227 07 64 13      call _atoi        
2650   122A F7            stosb             
2651   122B 78            inc c
2652   122C 0A 1E 12      jmp __load_hex_loop
2653   122F             __load_hex_ret:
2654   122F 51 00 80      add sp, $8000
2655   1232 F0            pop di
2656   1233 EF            pop si
2657   1234 E7            pop d
2658   1235 E5            pop b
2659   1236 E4            pop a
2660   1237             ; --- END INLINE ASM BLOCK
2661   1237             
2662   1237 F9            leave
2663   1238 09            ret
2664   1239             
2665   1239             getparam:
2666   1239 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2667   123C             ; $data 
2668   123C 52 01 00      sub sp, 1
2669   123F             
2670   123F             ; --- BEGIN INLINE ASM BLOCK
2671   123F 19 04         mov al, 4
2672   1241 FA 05 00      lea d, [bp + 5] ; $address
2673   1244 FD 2A         mov d, [d]
2674   1246 05 0C         syscall sys_system
2675   1248 FA 00 00      lea d, [bp + 0] ; $data
2676   124B FD 3E         mov [d], bl
2677   124D             ; --- END INLINE ASM BLOCK
2678   124D             
2679   124D             ;; return data; 
2680   124D FA 00 00      lea d, [bp + 0] ; $data
2681   1250 32            mov bl, [d]
2682   1251 A7 00         mov bh, 0
2683   1253 F9            leave
2684   1254 09            ret
2685   1255             
2686   1255             clear:
2687   1255 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2688   1258             ;; print("\033[2J\033[H"); 
2689   1258 26 35 23      mov b, __s3 ; "\033[2J\033[H"
2690   125B FD AB         swp b
2691   125D D8            push b
2692   125E 07 72 11      call print
2693   1261 51 02 00      add sp, 2
2694   1264 F9            leave
2695   1265 09            ret
2696   1266             
2697   1266             printun:
2698   1266 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2699   1269             ;; print(prompt); 
2700   1269 FA 05 00      lea d, [bp + 5] ; $prompt
2701   126C 2A            mov b, [d]
2702   126D FD AB         swp b
2703   126F D8            push b
2704   1270 07 72 11      call print
2705   1273 51 02 00      add sp, 2
2706   1276             ;; print_unsigned(n); 
2707   1276 FA 07 00      lea d, [bp + 7] ; $n
2708   1279 2A            mov b, [d]
2709   127A FD AB         swp b
2710   127C D8            push b
2711   127D 07 42 10      call print_unsigned
2712   1280 51 02 00      add sp, 2
2713   1283             ;; print("\n"); 
2714   1283 26 3D 23      mov b, __s4 ; "\n"
2715   1286 FD AB         swp b
2716   1288 D8            push b
2717   1289 07 72 11      call print
2718   128C 51 02 00      add sp, 2
2719   128F F9            leave
2720   1290 09            ret
2721   1291             
2722   1291             printsn:
2723   1291 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2724   1294             ;; print(prompt); 
2725   1294 FA 05 00      lea d, [bp + 5] ; $prompt
2726   1297 2A            mov b, [d]
2727   1298 FD AB         swp b
2728   129A D8            push b
2729   129B 07 72 11      call print
2730   129E 51 02 00      add sp, 2
2731   12A1             ;; print_signed(n); 
2732   12A1 FA 07 00      lea d, [bp + 7] ; $n
2733   12A4 2A            mov b, [d]
2734   12A5 FD AB         swp b
2735   12A7 D8            push b
2736   12A8 07 25 0D      call print_signed
2737   12AB 51 02 00      add sp, 2
2738   12AE             ;; print("\n"); 
2739   12AE 26 3D 23      mov b, __s4 ; "\n"
2740   12B1 FD AB         swp b
2741   12B3 D8            push b
2742   12B4 07 72 11      call print
2743   12B7 51 02 00      add sp, 2
2744   12BA F9            leave
2745   12BB 09            ret
2746   12BC             
2747   12BC             include_stdio_asm:
2748   12BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2749   12BF             
2750   12BF             ; --- BEGIN INLINE ASM BLOCK
2751   12BF             .include "lib/asm/stdio.asm"
0001+  12BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  12BF             ; stdio.s
0003+  12BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  12BF             .include "lib/asm/string.asm"
0001++ 12BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 12BF             ; string.s
0003++ 12BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 12BF             
0005++ 12BF             
0006++ 12BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 12BF             ; _strrev
0008++ 12BF             ; reverse a string
0009++ 12BF             ; D = string address
0010++ 12BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 12BF             ; 01234
0012++ 12BF             _strrev:
0013++ 12BF 4B          	pusha
0014++ 12C0 07 06 13    	call _strlen	; length in C
0015++ 12C3 12          	mov a, c
0016++ 12C4 AF 01 00    	cmp a, 1
0017++ 12C7 D0 E1 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 12CA 7D          	dec a
0019++ 12CB FD 4E       	mov si, d	; beginning of string
0020++ 12CD FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 12CF 59          	add d, a	; end of string
0022++ 12D0 12          	mov a, c
0023++ 12D1 FD 9B       	shr a		; divide by 2
0024++ 12D3 39          	mov c, a	; C now counts the steps
0025++ 12D4             _strrev_L0:
0026++ 12D4 32          	mov bl, [d]	; save load right-side char into BL
0027++ 12D5 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 12D6 3E          	mov [d], al	; store left char into right side
0029++ 12D7 1B          	mov al, bl
0030++ 12D8 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 12D9 7E          	dec c
0032++ 12DA 7F          	dec d
0033++ 12DB C2 00 00    	cmp c, 0
0034++ 12DE C7 D4 12    	jne _strrev_L0
0035++ 12E1             _strrev_end:
0036++ 12E1 4C          	popa
0037++ 12E2 09          	ret
0038++ 12E3             	
0039++ 12E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 12E3             ; _strchr
0041++ 12E3             ; search string in D for char in AL
0042++ 12E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 12E3             _strchr:
0044++ 12E3             _strchr_L0:
0045++ 12E3 32          	mov bl, [d]
0046++ 12E4 C1 00       	cmp bl, 0
0047++ 12E6 C6 F1 12    	je _strchr_end
0048++ 12E9 BA          	cmp al, bl
0049++ 12EA C6 F1 12    	je _strchr_end
0050++ 12ED 79          	inc d
0051++ 12EE 0A E3 12    	jmp _strchr_L0
0052++ 12F1             _strchr_end:
0053++ 12F1 1B          	mov al, bl
0054++ 12F2 09          	ret
0055++ 12F3             
0056++ 12F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 12F3             ; _strstr
0058++ 12F3             ; find sub-string
0059++ 12F3             ; str1 in SI
0060++ 12F3             ; str2 in DI
0061++ 12F3             ; SI points to end of source string
0062++ 12F3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 12F3             _strstr:
0064++ 12F3 DB          	push al
0065++ 12F4 DA          	push d
0066++ 12F5 E3          	push di
0067++ 12F6             _strstr_loop:
0068++ 12F6 F3          	cmpsb					; compare a byte of the strings
0069++ 12F7 C7 02 13    	jne _strstr_ret
0070++ 12FA FC 00 00    	lea d, [di + 0]
0071++ 12FD BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 12FF C7 F6 12    	jne _strstr_loop				; equal chars but not at end
0073++ 1302             _strstr_ret:
0074++ 1302 F0          	pop di
0075++ 1303 E7          	pop d
0076++ 1304 E8          	pop al
0077++ 1305 09          	ret
0078++ 1306             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1306             ; length of null terminated string
0080++ 1306             ; result in C
0081++ 1306             ; pointer in D
0082++ 1306             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1306             _strlen:
0084++ 1306 DA          	push d
0085++ 1307 38 00 00    	mov c, 0
0086++ 130A             _strlen_L1:
0087++ 130A BD 00       	cmp byte [d], 0
0088++ 130C C6 14 13    	je _strlen_ret
0089++ 130F 79          	inc d
0090++ 1310 78          	inc c
0091++ 1311 0A 0A 13    	jmp _strlen_L1
0092++ 1314             _strlen_ret:
0093++ 1314 E7          	pop d
0094++ 1315 09          	ret
0095++ 1316             
0096++ 1316             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1316             ; STRCMP
0098++ 1316             ; compare two strings
0099++ 1316             ; str1 in SI
0100++ 1316             ; str2 in DI
0101++ 1316             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1316             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1316             _strcmp:
0104++ 1316 DB          	push al
0105++ 1317 DA          	push d
0106++ 1318 E3          	push di
0107++ 1319 E2          	push si
0108++ 131A             _strcmp_loop:
0109++ 131A F3          	cmpsb					; compare a byte of the strings
0110++ 131B C7 26 13    	jne _strcmp_ret
0111++ 131E FB FF FF    	lea d, [si +- 1]
0112++ 1321 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1323 C7 1A 13    	jne _strcmp_loop				; equal chars but not at end
0114++ 1326             _strcmp_ret:
0115++ 1326 EF          	pop si
0116++ 1327 F0          	pop di
0117++ 1328 E7          	pop d
0118++ 1329 E8          	pop al
0119++ 132A 09          	ret
0120++ 132B             
0121++ 132B             
0122++ 132B             ; STRCPY
0123++ 132B             ; copy null terminated string from SI to DI
0124++ 132B             ; source in SI
0125++ 132B             ; destination in DI
0126++ 132B             _strcpy:
0127++ 132B E2          	push si
0128++ 132C E3          	push di
0129++ 132D DB          	push al
0130++ 132E             _strcpy_L1:
0131++ 132E F6          	lodsb
0132++ 132F F7          	stosb
0133++ 1330 B9 00       	cmp al, 0
0134++ 1332 C7 2E 13    	jne _strcpy_L1
0135++ 1335             _strcpy_end:
0136++ 1335 E8          	pop al
0137++ 1336 F0          	pop di
0138++ 1337 EF          	pop si
0139++ 1338 09          	ret
0140++ 1339             
0141++ 1339             ; STRCAT
0142++ 1339             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1339             ; source in SI
0144++ 1339             ; destination in DI
0145++ 1339             _strcat:
0146++ 1339 E2          	push si
0147++ 133A E3          	push di
0148++ 133B D7          	push a
0149++ 133C DA          	push d
0150++ 133D 50          	mov a, di
0151++ 133E 3C          	mov d, a
0152++ 133F             _strcat_goto_end_L1:
0153++ 133F BD 00       	cmp byte[d], 0
0154++ 1341 C6 48 13    	je _strcat_start
0155++ 1344 79          	inc d
0156++ 1345 0A 3F 13    	jmp _strcat_goto_end_L1
0157++ 1348             _strcat_start:
0158++ 1348 FD 50       	mov di, d
0159++ 134A             _strcat_L1:
0160++ 134A F6          	lodsb
0161++ 134B F7          	stosb
0162++ 134C B9 00       	cmp al, 0
0163++ 134E C7 4A 13    	jne _strcat_L1
0164++ 1351             _strcat_end:
0165++ 1351 E7          	pop d
0166++ 1352 E4          	pop a
0167++ 1353 F0          	pop di
0168++ 1354 EF          	pop si
0169++ 1355 09          	ret
0170++ 1356             
0171++ 1356             
0005+  1356             
0006+  1356             
0007+  1356             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1356             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1356             ; ASCII in BL
0010+  1356             ; result in AL
0011+  1356             ; ascii for F = 0100 0110
0012+  1356             ; ascii for 9 = 0011 1001
0013+  1356             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1356             hex_ascii_encode:
0015+  1356 1B            mov al, bl
0016+  1357 93 40         test al, $40        ; test if letter or number
0017+  1359 C7 5F 13      jnz hex_letter
0018+  135C 87 0F         and al, $0F        ; get number
0019+  135E 09            ret
0020+  135F             hex_letter:
0021+  135F 87 0F         and al, $0F        ; get letter
0022+  1361 6A 09         add al, 9
0023+  1363 09            ret
0024+  1364             
0025+  1364             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1364             ; ATOI
0027+  1364             ; 2 letter hex string in B
0028+  1364             ; 8bit integer returned in AL
0029+  1364             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1364             _atoi:
0031+  1364 D8            push b
0032+  1365 07 56 13      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  1368 30            mov bl, bh
0034+  1369 DB            push al          ; save a
0035+  136A 07 56 13      call hex_ascii_encode
0036+  136D EA            pop bl  
0037+  136E FD 9E 04      shl al, 4
0038+  1371 8C            or al, bl
0039+  1372 E5            pop b
0040+  1373 09            ret  
0041+  1374             
0042+  1374             
0043+  1374             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1374             ; scanf
0045+  1374             ; no need for explanations!
0046+  1374             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1374             scanf:
0048+  1374 09            ret
0049+  1375             
0050+  1375             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1375             ; ITOA
0052+  1375             ; 8bit value in BL
0053+  1375             ; 2 byte ASCII result in A
0054+  1375             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1375             _itoa:
0056+  1375 DA            push d
0057+  1376 D8            push b
0058+  1377 A7 00         mov bh, 0
0059+  1379 FD A4 04      shr bl, 4  
0060+  137C 74            mov d, b
0061+  137D 1F 25 16      mov al, [d + s_hex_digits]
0062+  1380 23            mov ah, al
0063+  1381               
0064+  1381 E5            pop b
0065+  1382 D8            push b
0066+  1383 A7 00         mov bh, 0
0067+  1385 FD 87 0F      and bl, $0F
0068+  1388 74            mov d, b
0069+  1389 1F 25 16      mov al, [d + s_hex_digits]
0070+  138C E5            pop b
0071+  138D E7            pop d
0072+  138E 09            ret
0073+  138F             
0074+  138F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  138F             ; HEX STRING TO BINARY
0076+  138F             ; di = destination address
0077+  138F             ; si = source
0078+  138F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  138F             _hex_to_int:
0080+  138F             _hex_to_int_L1:
0081+  138F F6            lodsb          ; load from [SI] to AL
0082+  1390 B9 00         cmp al, 0        ; check if ASCII 0
0083+  1392 C6 9F 13      jz _hex_to_int_ret
0084+  1395 36            mov bh, al
0085+  1396 F6            lodsb
0086+  1397 2F            mov bl, al
0087+  1398 07 64 13      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  139B F7            stosb          ; store AL to [DI]
0089+  139C 0A 8F 13      jmp _hex_to_int_L1
0090+  139F             _hex_to_int_ret:
0091+  139F 09            ret    
0092+  13A0             
0093+  13A0             
0094+  13A0             
0095+  13A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  13A0             ; GETCHAR
0097+  13A0             ; char in ah
0098+  13A0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  13A0             getch:
0100+  13A0 DB            push al
0101+  13A1             getch_retry:
0102+  13A1 19 01         mov al, 1
0103+  13A3 05 03         syscall sys_io      ; receive in AH
0104+  13A5 E8            pop al
0105+  13A6 09            ret
0106+  13A7             
0107+  13A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  13A7             ; PUTCHAR
0109+  13A7             ; char in ah
0110+  13A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  13A7             _putchar:
0112+  13A7 D7            push a
0113+  13A8 19 00         mov al, 0
0114+  13AA 05 03         syscall sys_io      ; char in AH
0115+  13AC E4            pop a
0116+  13AD 09            ret
0117+  13AE             
0118+  13AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  13AE             ;; INPUT A STRING
0120+  13AE             ;; terminates with null
0121+  13AE             ;; pointer in D
0122+  13AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  13AE             _gets:
0124+  13AE D7            push a
0125+  13AF DA            push d
0126+  13B0             _gets_loop:
0127+  13B0 19 01         mov al, 1
0128+  13B2 05 03         syscall sys_io      ; receive in AH
0129+  13B4 B9 00         cmp al, 0        ; check error code (AL)
0130+  13B6 C6 B0 13      je _gets_loop      ; if no char received, retry
0131+  13B9             
0132+  13B9 76 1B         cmp ah, 27
0133+  13BB C6 DC 13      je _gets_ansi_esc
0134+  13BE 76 0A         cmp ah, $0A        ; LF
0135+  13C0 C6 47 14      je _gets_end
0136+  13C3 76 0D         cmp ah, $0D        ; CR
0137+  13C5 C6 47 14      je _gets_end
0138+  13C8 76 5C         cmp ah, $5C        ; '\\'
0139+  13CA C6 08 14      je _gets_escape
0140+  13CD               
0141+  13CD 76 08         cmp ah, $08      ; check for backspace
0142+  13CF C6 D8 13      je _gets_backspace
0143+  13D2             
0144+  13D2 1A            mov al, ah
0145+  13D3 3E            mov [d], al
0146+  13D4 79            inc d
0147+  13D5 0A B0 13      jmp _gets_loop
0148+  13D8             _gets_backspace:
0149+  13D8 7F            dec d
0150+  13D9 0A B0 13      jmp _gets_loop
0151+  13DC             _gets_ansi_esc:
0152+  13DC 19 01         mov al, 1
0153+  13DE 05 03         syscall sys_io        ; receive in AH without echo
0154+  13E0 B9 00         cmp al, 0          ; check error code (AL)
0155+  13E2 C6 DC 13      je _gets_ansi_esc    ; if no char received, retry
0156+  13E5 76 5B         cmp ah, '['
0157+  13E7 C7 B0 13      jne _gets_loop
0158+  13EA             _gets_ansi_esc_2:
0159+  13EA 19 01         mov al, 1
0160+  13EC 05 03         syscall sys_io          ; receive in AH without echo
0161+  13EE B9 00         cmp al, 0            ; check error code (AL)
0162+  13F0 C6 EA 13      je _gets_ansi_esc_2  ; if no char received, retry
0163+  13F3 76 44         cmp ah, 'D'
0164+  13F5 C6 00 14      je _gets_left_arrow
0165+  13F8 76 43         cmp ah, 'C'
0166+  13FA C6 04 14      je _gets_right_arrow
0167+  13FD 0A B0 13      jmp _gets_loop
0168+  1400             _gets_left_arrow:
0169+  1400 7F            dec d
0170+  1401 0A B0 13      jmp _gets_loop
0171+  1404             _gets_right_arrow:
0172+  1404 79            inc d
0173+  1405 0A B0 13      jmp _gets_loop
0174+  1408             _gets_escape:
0175+  1408 19 01         mov al, 1
0176+  140A 05 03         syscall sys_io      ; receive in AH
0177+  140C B9 00         cmp al, 0        ; check error code (AL)
0178+  140E C6 08 14      je _gets_escape      ; if no char received, retry
0179+  1411 76 6E         cmp ah, 'n'
0180+  1413 C6 32 14      je _gets_LF
0181+  1416 76 72         cmp ah, 'r'
0182+  1418 C6 39 14      je _gets_CR
0183+  141B 76 30         cmp ah, '0'
0184+  141D C6 40 14      je _gets_NULL
0185+  1420 76 5C         cmp ah, $5C  ; '\'
0186+  1422 C6 2B 14      je _gets_slash
0187+  1425 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  1426 3E            mov [d], al
0189+  1427 79            inc d
0190+  1428 0A B0 13      jmp _gets_loop
0191+  142B             _gets_slash:
0192+  142B 19 5C         mov al, $5C
0193+  142D 3E            mov [d], al
0194+  142E 79            inc d
0195+  142F 0A B0 13      jmp _gets_loop
0196+  1432             _gets_LF:
0197+  1432 19 0A         mov al, $0A
0198+  1434 3E            mov [d], al
0199+  1435 79            inc d
0200+  1436 0A B0 13      jmp _gets_loop
0201+  1439             _gets_CR:
0202+  1439 19 0D         mov al, $0D
0203+  143B 3E            mov [d], al
0204+  143C 79            inc d
0205+  143D 0A B0 13      jmp _gets_loop
0206+  1440             _gets_NULL:
0207+  1440 19 00         mov al, $00
0208+  1442 3E            mov [d], al
0209+  1443 79            inc d
0210+  1444 0A B0 13      jmp _gets_loop
0211+  1447             _gets_end:
0212+  1447 19 00         mov al, 0
0213+  1449 3E            mov [d], al        ; terminate string
0214+  144A E7            pop d
0215+  144B E4            pop a
0216+  144C 09            ret
0217+  144D             
0218+  144D             
0219+  144D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  144D             ;; INPUT TEXT
0221+  144D             ;; terminated with CTRL+D
0222+  144D             ;; pointer in D
0223+  144D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  144D             _gettxt:
0225+  144D D7            push a
0226+  144E DA            push d
0227+  144F             _gettxt_loop:
0228+  144F 19 01         mov al, 1
0229+  1451 05 03         syscall sys_io      ; receive in AH
0230+  1453 B9 00         cmp al, 0        ; check error code (AL)
0231+  1455 C6 4F 14      je _gettxt_loop    ; if no char received, retry
0232+  1458 76 04         cmp ah, 4      ; EOT
0233+  145A C6 98 14      je _gettxt_end
0234+  145D 76 08         cmp ah, $08      ; check for backspace
0235+  145F C6 94 14      je _gettxt_backspace
0236+  1462 76 5C         cmp ah, $5C        ; '\'
0237+  1464 C6 6D 14      je _gettxt_escape
0238+  1467 1A            mov al, ah
0239+  1468 3E            mov [d], al
0240+  1469 79            inc d
0241+  146A 0A 4F 14      jmp _gettxt_loop
0242+  146D             _gettxt_escape:
0243+  146D 19 01         mov al, 1
0244+  146F 05 03         syscall sys_io      ; receive in AH
0245+  1471 B9 00         cmp al, 0        ; check error code (AL)
0246+  1473 C6 6D 14      je _gettxt_escape    ; if no char received, retry
0247+  1476 76 6E         cmp ah, 'n'
0248+  1478 C6 86 14      je _gettxt_LF
0249+  147B 76 72         cmp ah, 'r'
0250+  147D C6 8D 14      je _gettxt_CR
0251+  1480 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1481 3E            mov [d], al
0253+  1482 79            inc d
0254+  1483 0A 4F 14      jmp _gettxt_loop
0255+  1486             _gettxt_LF:
0256+  1486 19 0A         mov al, $0A
0257+  1488 3E            mov [d], al
0258+  1489 79            inc d
0259+  148A 0A 4F 14      jmp _gettxt_loop
0260+  148D             _gettxt_CR:
0261+  148D 19 0D         mov al, $0D
0262+  148F 3E            mov [d], al
0263+  1490 79            inc d
0264+  1491 0A 4F 14      jmp _gettxt_loop
0265+  1494             _gettxt_backspace:
0266+  1494 7F            dec d
0267+  1495 0A 4F 14      jmp _gettxt_loop
0268+  1498             _gettxt_end:
0269+  1498 19 00         mov al, 0
0270+  149A 3E            mov [d], al        ; terminate string
0271+  149B E7            pop d
0272+  149C E4            pop a
0273+  149D 09            ret
0274+  149E             
0275+  149E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  149E             ; PRINT NEW LINE
0277+  149E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  149E             printnl:
0279+  149E D7            push a
0280+  149F 10 00 0A      mov a, $0A00
0281+  14A2 05 03         syscall sys_io
0282+  14A4 10 00 0D      mov a, $0D00
0283+  14A7 05 03         syscall sys_io
0284+  14A9 E4            pop a
0285+  14AA 09            ret
0286+  14AB             
0287+  14AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  14AB             ; _strtoint
0289+  14AB             ; 4 digit hex string number in d
0290+  14AB             ; integer returned in A
0291+  14AB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  14AB             _strtointx:
0293+  14AB D8            push b
0294+  14AC 32            mov bl, [d]
0295+  14AD 37            mov bh, bl
0296+  14AE 33 01 00      mov bl, [d + 1]
0297+  14B1 07 64 13      call _atoi        ; convert to int in AL
0298+  14B4 23            mov ah, al        ; move to AH
0299+  14B5 33 02 00      mov bl, [d + 2]
0300+  14B8 37            mov bh, bl
0301+  14B9 33 03 00      mov bl, [d + 3]
0302+  14BC 07 64 13      call _atoi        ; convert to int in AL
0303+  14BF E5            pop b
0304+  14C0 09            ret
0305+  14C1             
0306+  14C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  14C1             ; _strtoint
0308+  14C1             ; 5 digit base10 string number in d
0309+  14C1             ; integer returned in A
0310+  14C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  14C1             _strtoint:
0312+  14C1 E2            push si
0313+  14C2 D8            push b
0314+  14C3 D9            push c
0315+  14C4 DA            push d
0316+  14C5 07 06 13      call _strlen      ; get string length in C
0317+  14C8 7E            dec c
0318+  14C9 FD 4E         mov si, d
0319+  14CB 12            mov a, c
0320+  14CC FD 99         shl a
0321+  14CE 3B 3D 16      mov d, table_power
0322+  14D1 59            add d, a
0323+  14D2 38 00 00      mov c, 0
0324+  14D5             _strtoint_L0:
0325+  14D5 F6            lodsb      ; load ASCII to al
0326+  14D6 B9 00         cmp al, 0
0327+  14D8 C6 EB 14      je _strtoint_end
0328+  14DB 6F 30         sub al, $30    ; make into integer
0329+  14DD 22 00         mov ah, 0
0330+  14DF 2A            mov b, [d]
0331+  14E0 AC            mul a, b      ; result in B since it fits in 16bits
0332+  14E1 11            mov a, b
0333+  14E2 28            mov b, c
0334+  14E3 54            add a, b
0335+  14E4 39            mov c, a
0336+  14E5 63 02 00      sub d, 2
0337+  14E8 0A D5 14      jmp _strtoint_L0
0338+  14EB             _strtoint_end:
0339+  14EB 12            mov a, c
0340+  14EC E7            pop d
0341+  14ED E6            pop c
0342+  14EE E5            pop b
0343+  14EF EF            pop si
0344+  14F0 09            ret
0345+  14F1             
0346+  14F1             
0347+  14F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  14F1             ; PRINT NULL TERMINATED STRING
0349+  14F1             ; pointer in D
0350+  14F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  14F1             _puts:
0352+  14F1 D7            push a
0353+  14F2 DA            push d
0354+  14F3             _puts_L1:
0355+  14F3 1E            mov al, [d]
0356+  14F4 B9 00         cmp al, 0
0357+  14F6 C6 02 15      jz _puts_END
0358+  14F9 23            mov ah, al
0359+  14FA 19 00         mov al, 0
0360+  14FC 05 03         syscall sys_io
0361+  14FE 79            inc d
0362+  14FF 0A F3 14      jmp _puts_L1
0363+  1502             _puts_END:
0364+  1502 E7            pop d
0365+  1503 E4            pop a
0366+  1504 09            ret
0367+  1505             
0368+  1505             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1505             ; PRINT N SIZE STRING
0370+  1505             ; pointer in D
0371+  1505             ; size in C
0372+  1505             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1505             _putsn:
0374+  1505 DB            push al
0375+  1506 DA            push d
0376+  1507 D9            push c
0377+  1508             _putsn_L0:
0378+  1508 1E            mov al, [d]
0379+  1509 23            mov ah, al
0380+  150A 19 00         mov al, 0
0381+  150C 05 03         syscall sys_io
0382+  150E 79            inc d
0383+  150F 7E            dec c  
0384+  1510 C2 00 00      cmp c, 0
0385+  1513 C7 08 15      jne _putsn_L0
0386+  1516             _putsn_end:
0387+  1516 E6            pop c
0388+  1517 E7            pop d
0389+  1518 E8            pop al
0390+  1519 09            ret
0391+  151A             
0392+  151A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  151A             ; print 16bit decimal number
0394+  151A             ; input number in A
0395+  151A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  151A             print_u16d:
0397+  151A D7            push a
0398+  151B D8            push b
0399+  151C 26 10 27      mov b, 10000
0400+  151F AE            div a, b      ; get 10000's coeff.
0401+  1520 07 42 15      call print_number
0402+  1523 11            mov a, b
0403+  1524 26 E8 03      mov b, 1000
0404+  1527 AE            div a, b      ; get 1000's coeff.
0405+  1528 07 42 15      call print_number
0406+  152B 11            mov a, b
0407+  152C 26 64 00      mov b, 100
0408+  152F AE            div a, b
0409+  1530 07 42 15      call print_number
0410+  1533 11            mov a, b
0411+  1534 26 0A 00      mov b, 10
0412+  1537 AE            div a, b
0413+  1538 07 42 15      call print_number
0414+  153B 1B            mov al, bl      ; 1's coeff in bl
0415+  153C 07 42 15      call print_number
0416+  153F E5            pop b
0417+  1540 E4            pop a
0418+  1541 09            ret
0419+  1542             
0420+  1542             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1542             ; print AL
0422+  1542             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1542             print_number:
0424+  1542 6A 30         add al, $30
0425+  1544 23            mov ah, al
0426+  1545 07 A7 13      call _putchar
0427+  1548 09            ret
0428+  1549             
0429+  1549             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  1549             ; PRINT 16BIT HEX INTEGER
0431+  1549             ; integer value in reg B
0432+  1549             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  1549             print_u16x:
0434+  1549 D7            push a
0435+  154A D8            push b
0436+  154B DD            push bl
0437+  154C 30            mov bl, bh
0438+  154D 07 75 13      call _itoa        ; convert bh to char in A
0439+  1550 2F            mov bl, al        ; save al
0440+  1551 19 00         mov al, 0
0441+  1553 05 03         syscall sys_io        ; display AH
0442+  1555 24            mov ah, bl        ; retrieve al
0443+  1556 19 00         mov al, 0
0444+  1558 05 03         syscall sys_io        ; display AL
0445+  155A             
0446+  155A EA            pop bl
0447+  155B 07 75 13      call _itoa        ; convert bh to char in A
0448+  155E 2F            mov bl, al        ; save al
0449+  155F 19 00         mov al, 0
0450+  1561 05 03         syscall sys_io        ; display AH
0451+  1563 24            mov ah, bl        ; retrieve al
0452+  1564 19 00         mov al, 0
0453+  1566 05 03         syscall sys_io        ; display AL
0454+  1568             
0455+  1568 E5            pop b
0456+  1569 E4            pop a
0457+  156A 09            ret
0458+  156B             
0459+  156B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  156B             ; INPUT 16BIT HEX INTEGER
0461+  156B             ; read 16bit integer into A
0462+  156B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  156B             scan_u16x:
0464+  156B F8 10 00      enter 16
0465+  156E D8            push b
0466+  156F DA            push d
0467+  1570             
0468+  1570 FA F1 FF      lea d, [bp + -15]
0469+  1573 07 AE 13      call _gets        ; get number
0470+  1576             
0471+  1576 32            mov bl, [d]
0472+  1577 37            mov bh, bl
0473+  1578 33 01 00      mov bl, [d + 1]
0474+  157B 07 64 13      call _atoi        ; convert to int in AL
0475+  157E 23            mov ah, al        ; move to AH
0476+  157F             
0477+  157F 33 02 00      mov bl, [d + 2]
0478+  1582 37            mov bh, bl
0479+  1583 33 03 00      mov bl, [d + 3]
0480+  1586 07 64 13      call _atoi        ; convert to int in AL
0481+  1589             
0482+  1589 E7            pop d
0483+  158A E5            pop b
0484+  158B F9            leave
0485+  158C 09            ret
0486+  158D             
0487+  158D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  158D             ; PRINT 8bit HEX INTEGER
0489+  158D             ; integer value in reg bl
0490+  158D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  158D             print_u8x:
0492+  158D D7            push a
0493+  158E DD            push bl
0494+  158F             
0495+  158F 07 75 13      call _itoa        ; convert bl to char in A
0496+  1592 2F            mov bl, al        ; save al
0497+  1593 19 00         mov al, 0
0498+  1595 05 03         syscall sys_io        ; display AH
0499+  1597 24            mov ah, bl        ; retrieve al
0500+  1598 19 00         mov al, 0
0501+  159A 05 03         syscall sys_io        ; display AL
0502+  159C             
0503+  159C EA            pop bl
0504+  159D E4            pop a
0505+  159E 09            ret
0506+  159F             
0507+  159F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  159F             ; print 8bit decimal unsigned number
0509+  159F             ; input number in AL
0510+  159F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  159F             print_u8d:
0512+  159F D7            push a
0513+  15A0 D8            push b
0514+  15A1             
0515+  15A1 22 00         mov ah, 0
0516+  15A3 26 64 00      mov b, 100
0517+  15A6 AE            div a, b
0518+  15A7 D8            push b      ; save remainder
0519+  15A8 B9 00         cmp al, 0
0520+  15AA C6 B4 15      je skip100
0521+  15AD 6A 30         add al, $30
0522+  15AF 23            mov ah, al
0523+  15B0 19 00         mov al, 0
0524+  15B2 05 03         syscall sys_io  ; print coeff
0525+  15B4             skip100:
0526+  15B4 E4            pop a
0527+  15B5 22 00         mov ah, 0
0528+  15B7 26 0A 00      mov b, 10
0529+  15BA AE            div a, b
0530+  15BB D8            push b      ; save remainder
0531+  15BC B9 00         cmp al, 0
0532+  15BE C6 C8 15      je skip10
0533+  15C1 6A 30         add al, $30
0534+  15C3 23            mov ah, al
0535+  15C4 19 00         mov al, 0
0536+  15C6 05 03         syscall sys_io  ; print coeff
0537+  15C8             skip10:
0538+  15C8 E4            pop a
0539+  15C9 1B            mov al, bl
0540+  15CA 6A 30         add al, $30
0541+  15CC 23            mov ah, al
0542+  15CD 19 00         mov al, 0
0543+  15CF 05 03         syscall sys_io  ; print coeff
0544+  15D1 E5            pop b
0545+  15D2 E4            pop a
0546+  15D3 09            ret
0547+  15D4             
0548+  15D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  15D4             ; INPUT 8BIT HEX INTEGER
0550+  15D4             ; read 8bit integer into AL
0551+  15D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  15D4             scan_u8x:
0553+  15D4 F8 04 00      enter 4
0554+  15D7 D8            push b
0555+  15D8 DA            push d
0556+  15D9             
0557+  15D9 FA FD FF      lea d, [bp + -3]
0558+  15DC 07 AE 13      call _gets        ; get number
0559+  15DF             
0560+  15DF 32            mov bl, [d]
0561+  15E0 37            mov bh, bl
0562+  15E1 33 01 00      mov bl, [d + 1]
0563+  15E4 07 64 13      call _atoi        ; convert to int in AL
0564+  15E7             
0565+  15E7 E7            pop d
0566+  15E8 E5            pop b
0567+  15E9 F9            leave
0568+  15EA 09            ret
0569+  15EB             
0570+  15EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  15EB             ; input decimal number
0572+  15EB             ; result in A
0573+  15EB             ; 655'\0'
0574+  15EB             ; low--------high
0575+  15EB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  15EB             scan_u16d:
0577+  15EB F8 08 00      enter 8
0578+  15EE E2            push si
0579+  15EF D8            push b
0580+  15F0 D9            push c
0581+  15F1 DA            push d
0582+  15F2 FA F9 FF      lea d, [bp +- 7]
0583+  15F5 07 AE 13      call _gets
0584+  15F8 07 06 13      call _strlen      ; get string length in C
0585+  15FB 7E            dec c
0586+  15FC FD 4E         mov si, d
0587+  15FE 12            mov a, c
0588+  15FF FD 99         shl a
0589+  1601 3B 3D 16      mov d, table_power
0590+  1604 59            add d, a
0591+  1605 38 00 00      mov c, 0
0592+  1608             mul_loop:
0593+  1608 F6            lodsb      ; load ASCII to al
0594+  1609 B9 00         cmp al, 0
0595+  160B C6 1E 16      je mul_exit
0596+  160E 6F 30         sub al, $30    ; make into integer
0597+  1610 22 00         mov ah, 0
0598+  1612 2A            mov b, [d]
0599+  1613 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1614 11            mov a, b
0601+  1615 28            mov b, c
0602+  1616 54            add a, b
0603+  1617 39            mov c, a
0604+  1618 63 02 00      sub d, 2
0605+  161B 0A 08 16      jmp mul_loop
0606+  161E             mul_exit:
0607+  161E 12            mov a, c
0608+  161F E7            pop d
0609+  1620 E6            pop c
0610+  1621 E5            pop b
0611+  1622 EF            pop si
0612+  1623 F9            leave
0613+  1624 09            ret
0614+  1625             
0615+  1625             
0616+  1625 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  1629 34 35 36 37 
0616+  162D 38 39 41 42 
0616+  1631 43 44 45 46 
0617+  1635 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  1639 1B 5B 48 00 
0618+  163D             
0619+  163D             table_power:
0620+  163D 01 00         .dw 1
0621+  163F 0A 00         .dw 10
0622+  1641 64 00         .dw 100
0623+  1643 E8 03         .dw 1000
0624+  1645 10 27         .dw 100002752   1647             ; --- END INLINE ASM BLOCK
2753   1647             
2754   1647 F9            leave
2755   1648 09            ret
2756   1649             
2757   1649             show:
2758   1649 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2759   164C             ; $i 
2760   164C             ; $j 
2761   164C 52 04 00      sub sp, 4
2762   164F             ;; for(i = 0; i <  30     ; i++){ 
2763   164F             _for42_init:
2764   164F FA FF FF      lea d, [bp + -1] ; $i
2765   1652 DA            push d
2766   1653 26 00 00      mov b, $0
2767   1656 E7            pop d
2768   1657 FD 43         mov [d], b
2769   1659             _for42_cond:
2770   1659 FA FF FF      lea d, [bp + -1] ; $i
2771   165C 2A            mov b, [d]
2772   165D             ; START RELATIONAL
2773   165D D7            push a
2774   165E 11            mov a, b
2775   165F 26 1E 00      mov b, $1e
2776   1662 B0            cmp a, b
2777   1663 FD 73         slt ; < 
2778   1665 E4            pop a
2779   1666             ; END RELATIONAL
2780   1666 C0 00 00      cmp b, 0
2781   1669 C6 F6 16      je _for42_exit
2782   166C             _for42_block:
2783   166C             ;; for(j = 0; j <  40    ; j++){ 
2784   166C             _for43_init:
2785   166C FA FD FF      lea d, [bp + -3] ; $j
2786   166F DA            push d
2787   1670 26 00 00      mov b, $0
2788   1673 E7            pop d
2789   1674 FD 43         mov [d], b
2790   1676             _for43_cond:
2791   1676 FA FD FF      lea d, [bp + -3] ; $j
2792   1679 2A            mov b, [d]
2793   167A             ; START RELATIONAL
2794   167A D7            push a
2795   167B 11            mov a, b
2796   167C 26 28 00      mov b, $28
2797   167F B0            cmp a, b
2798   1680 FD 73         slt ; < 
2799   1682 E4            pop a
2800   1683             ; END RELATIONAL
2801   1683 C0 00 00      cmp b, 0
2802   1686 C6 DC 16      je _for43_exit
2803   1689             _for43_block:
2804   1689             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
2805   1689             _ternary44_cond:
2806   1689 3B 2F 1E      mov d, _currState_data ; $currState
2807   168C D7            push a
2808   168D DA            push d
2809   168E FA FF FF      lea d, [bp + -1] ; $i
2810   1691 2A            mov b, [d]
2811   1692 E7            pop d
2812   1693 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2813   1697 DA            push d
2814   1698 FA FD FF      lea d, [bp + -3] ; $j
2815   169B 2A            mov b, [d]
2816   169C E7            pop d
2817   169D 5A            add d, b
2818   169E E4            pop a
2819   169F 32            mov bl, [d]
2820   16A0 A7 00         mov bh, 0
2821   16A2             ; START RELATIONAL
2822   16A2 D7            push a
2823   16A3 11            mov a, b
2824   16A4 26 40 00      mov b, $40
2825   16A7 B0            cmp a, b
2826   16A8 FD 71         seq ; ==
2827   16AA E4            pop a
2828   16AB             ; END RELATIONAL
2829   16AB C0 00 00      cmp b, 0
2830   16AE C6 C0 16      je _ternary44_false
2831   16B1             _ternary44_true:
2832   16B1 26 3F 23      mov b, __s5 ; "@ "
2833   16B4 FD AB         swp b
2834   16B6 D8            push b
2835   16B7 07 16 08      call printf
2836   16BA 51 02 00      add sp, 2
2837   16BD 0A CC 16      jmp _ternary44_exit
2838   16C0             _ternary44_false:
2839   16C0 26 42 23      mov b, __s6 ; ". "
2840   16C3 FD AB         swp b
2841   16C5 D8            push b
2842   16C6 07 16 08      call printf
2843   16C9 51 02 00      add sp, 2
2844   16CC             _ternary44_exit:
2845   16CC             _for43_update:
2846   16CC FA FD FF      lea d, [bp + -3] ; $j
2847   16CF 2A            mov b, [d]
2848   16D0 D8            push b
2849   16D1 FD 77         inc b
2850   16D3 FA FD FF      lea d, [bp + -3] ; $j
2851   16D6 FD 43         mov [d], b
2852   16D8 E5            pop b
2853   16D9 0A 76 16      jmp _for43_cond
2854   16DC             _for43_exit:
2855   16DC             ;; putchar(10); 
2856   16DC 26 0A 00      mov b, $a
2857   16DF DD            push bl
2858   16E0 07 2A 11      call putchar
2859   16E3 51 01 00      add sp, 1
2860   16E6             _for42_update:
2861   16E6 FA FF FF      lea d, [bp + -1] ; $i
2862   16E9 2A            mov b, [d]
2863   16EA D8            push b
2864   16EB FD 77         inc b
2865   16ED FA FF FF      lea d, [bp + -1] ; $i
2866   16F0 FD 43         mov [d], b
2867   16F2 E5            pop b
2868   16F3 0A 59 16      jmp _for42_cond
2869   16F6             _for42_exit:
2870   16F6 F9            leave
2871   16F7 09            ret
2872   16F8             
2873   16F8             alive:
2874   16F8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2875   16FB             ;; if(currState[i][j] == '@') return 1; 
2876   16FB             _if45_cond:
2877   16FB 3B 2F 1E      mov d, _currState_data ; $currState
2878   16FE D7            push a
2879   16FF DA            push d
2880   1700 FA 05 00      lea d, [bp + 5] ; $i
2881   1703 2A            mov b, [d]
2882   1704 E7            pop d
2883   1705 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2884   1709 DA            push d
2885   170A FA 07 00      lea d, [bp + 7] ; $j
2886   170D 2A            mov b, [d]
2887   170E E7            pop d
2888   170F 5A            add d, b
2889   1710 E4            pop a
2890   1711 32            mov bl, [d]
2891   1712 A7 00         mov bh, 0
2892   1714             ; START RELATIONAL
2893   1714 D7            push a
2894   1715 11            mov a, b
2895   1716 26 40 00      mov b, $40
2896   1719 B0            cmp a, b
2897   171A FD 71         seq ; ==
2898   171C E4            pop a
2899   171D             ; END RELATIONAL
2900   171D C0 00 00      cmp b, 0
2901   1720 C6 2B 17      je _if45_else
2902   1723             _if45_true:
2903   1723             ;; return 1; 
2904   1723 26 01 00      mov b, $1
2905   1726 F9            leave
2906   1727 09            ret
2907   1728 0A 30 17      jmp _if45_exit
2908   172B             _if45_else:
2909   172B             ;; return 0; 
2910   172B 26 00 00      mov b, $0
2911   172E F9            leave
2912   172F 09            ret
2913   1730             _if45_exit:
2914   1730 F9            leave
2915   1731 09            ret
2916   1732             
2917   1732             neighbours:
2918   1732 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2919   1735             ; $count 
2920   1735 52 02 00      sub sp, 2
2921   1738             ;; count = 0; 
2922   1738 FA FF FF      lea d, [bp + -1] ; $count
2923   173B DA            push d
2924   173C 26 00 00      mov b, $0
2925   173F E7            pop d
2926   1740 FD 43         mov [d], b
2927   1742             ;; if(currState[i+-1][j] == '@')			count++; 
2928   1742             _if46_cond:
2929   1742 3B 2F 1E      mov d, _currState_data ; $currState
2930   1745 D7            push a
2931   1746 DA            push d
2932   1747 FA 05 00      lea d, [bp + 5] ; $i
2933   174A 2A            mov b, [d]
2934   174B             ; START TERMS
2935   174B D7            push a
2936   174C 11            mov a, b
2937   174D 26 01 00      mov b, $1
2938   1750 FD 97         neg b
2939   1752 54            add a, b
2940   1753 27            mov b, a
2941   1754 E4            pop a
2942   1755             ; END TERMS
2943   1755 E7            pop d
2944   1756 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2945   175A DA            push d
2946   175B FA 07 00      lea d, [bp + 7] ; $j
2947   175E 2A            mov b, [d]
2948   175F E7            pop d
2949   1760 5A            add d, b
2950   1761 E4            pop a
2951   1762 32            mov bl, [d]
2952   1763 A7 00         mov bh, 0
2953   1765             ; START RELATIONAL
2954   1765 D7            push a
2955   1766 11            mov a, b
2956   1767 26 40 00      mov b, $40
2957   176A B0            cmp a, b
2958   176B FD 71         seq ; ==
2959   176D E4            pop a
2960   176E             ; END RELATIONAL
2961   176E C0 00 00      cmp b, 0
2962   1771 C6 84 17      je _if46_exit
2963   1774             _if46_true:
2964   1774             ;; count++; 
2965   1774 FA FF FF      lea d, [bp + -1] ; $count
2966   1777 2A            mov b, [d]
2967   1778 D8            push b
2968   1779 FD 77         inc b
2969   177B FA FF FF      lea d, [bp + -1] ; $count
2970   177E FD 43         mov [d], b
2971   1780 E5            pop b
2972   1781 0A 84 17      jmp _if46_exit
2973   1784             _if46_exit:
2974   1784             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
2975   1784             _if47_cond:
2976   1784 3B 2F 1E      mov d, _currState_data ; $currState
2977   1787 D7            push a
2978   1788 DA            push d
2979   1789 FA 05 00      lea d, [bp + 5] ; $i
2980   178C 2A            mov b, [d]
2981   178D             ; START TERMS
2982   178D D7            push a
2983   178E 11            mov a, b
2984   178F 26 01 00      mov b, $1
2985   1792 FD 97         neg b
2986   1794 54            add a, b
2987   1795 27            mov b, a
2988   1796 E4            pop a
2989   1797             ; END TERMS
2990   1797 E7            pop d
2991   1798 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2992   179C DA            push d
2993   179D FA 07 00      lea d, [bp + 7] ; $j
2994   17A0 2A            mov b, [d]
2995   17A1             ; START TERMS
2996   17A1 D7            push a
2997   17A2 11            mov a, b
2998   17A3 26 01 00      mov b, $1
2999   17A6 FD 97         neg b
3000   17A8 54            add a, b
3001   17A9 27            mov b, a
3002   17AA E4            pop a
3003   17AB             ; END TERMS
3004   17AB E7            pop d
3005   17AC 5A            add d, b
3006   17AD E4            pop a
3007   17AE 32            mov bl, [d]
3008   17AF A7 00         mov bh, 0
3009   17B1             ; START RELATIONAL
3010   17B1 D7            push a
3011   17B2 11            mov a, b
3012   17B3 26 40 00      mov b, $40
3013   17B6 B0            cmp a, b
3014   17B7 FD 71         seq ; ==
3015   17B9 E4            pop a
3016   17BA             ; END RELATIONAL
3017   17BA C0 00 00      cmp b, 0
3018   17BD C6 D0 17      je _if47_exit
3019   17C0             _if47_true:
3020   17C0             ;; count++; 
3021   17C0 FA FF FF      lea d, [bp + -1] ; $count
3022   17C3 2A            mov b, [d]
3023   17C4 D8            push b
3024   17C5 FD 77         inc b
3025   17C7 FA FF FF      lea d, [bp + -1] ; $count
3026   17CA FD 43         mov [d], b
3027   17CC E5            pop b
3028   17CD 0A D0 17      jmp _if47_exit
3029   17D0             _if47_exit:
3030   17D0             ;; if(currState[i+-1][j+1] == '@') 	count++; 
3031   17D0             _if48_cond:
3032   17D0 3B 2F 1E      mov d, _currState_data ; $currState
3033   17D3 D7            push a
3034   17D4 DA            push d
3035   17D5 FA 05 00      lea d, [bp + 5] ; $i
3036   17D8 2A            mov b, [d]
3037   17D9             ; START TERMS
3038   17D9 D7            push a
3039   17DA 11            mov a, b
3040   17DB 26 01 00      mov b, $1
3041   17DE FD 97         neg b
3042   17E0 54            add a, b
3043   17E1 27            mov b, a
3044   17E2 E4            pop a
3045   17E3             ; END TERMS
3046   17E3 E7            pop d
3047   17E4 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3048   17E8 DA            push d
3049   17E9 FA 07 00      lea d, [bp + 7] ; $j
3050   17EC 2A            mov b, [d]
3051   17ED             ; START TERMS
3052   17ED D7            push a
3053   17EE 11            mov a, b
3054   17EF 26 01 00      mov b, $1
3055   17F2 54            add a, b
3056   17F3 27            mov b, a
3057   17F4 E4            pop a
3058   17F5             ; END TERMS
3059   17F5 E7            pop d
3060   17F6 5A            add d, b
3061   17F7 E4            pop a
3062   17F8 32            mov bl, [d]
3063   17F9 A7 00         mov bh, 0
3064   17FB             ; START RELATIONAL
3065   17FB D7            push a
3066   17FC 11            mov a, b
3067   17FD 26 40 00      mov b, $40
3068   1800 B0            cmp a, b
3069   1801 FD 71         seq ; ==
3070   1803 E4            pop a
3071   1804             ; END RELATIONAL
3072   1804 C0 00 00      cmp b, 0
3073   1807 C6 1A 18      je _if48_exit
3074   180A             _if48_true:
3075   180A             ;; count++; 
3076   180A FA FF FF      lea d, [bp + -1] ; $count
3077   180D 2A            mov b, [d]
3078   180E D8            push b
3079   180F FD 77         inc b
3080   1811 FA FF FF      lea d, [bp + -1] ; $count
3081   1814 FD 43         mov [d], b
3082   1816 E5            pop b
3083   1817 0A 1A 18      jmp _if48_exit
3084   181A             _if48_exit:
3085   181A             ;; if(currState[i][j+-1] == '@') 		count++; 
3086   181A             _if49_cond:
3087   181A 3B 2F 1E      mov d, _currState_data ; $currState
3088   181D D7            push a
3089   181E DA            push d
3090   181F FA 05 00      lea d, [bp + 5] ; $i
3091   1822 2A            mov b, [d]
3092   1823 E7            pop d
3093   1824 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3094   1828 DA            push d
3095   1829 FA 07 00      lea d, [bp + 7] ; $j
3096   182C 2A            mov b, [d]
3097   182D             ; START TERMS
3098   182D D7            push a
3099   182E 11            mov a, b
3100   182F 26 01 00      mov b, $1
3101   1832 FD 97         neg b
3102   1834 54            add a, b
3103   1835 27            mov b, a
3104   1836 E4            pop a
3105   1837             ; END TERMS
3106   1837 E7            pop d
3107   1838 5A            add d, b
3108   1839 E4            pop a
3109   183A 32            mov bl, [d]
3110   183B A7 00         mov bh, 0
3111   183D             ; START RELATIONAL
3112   183D D7            push a
3113   183E 11            mov a, b
3114   183F 26 40 00      mov b, $40
3115   1842 B0            cmp a, b
3116   1843 FD 71         seq ; ==
3117   1845 E4            pop a
3118   1846             ; END RELATIONAL
3119   1846 C0 00 00      cmp b, 0
3120   1849 C6 5C 18      je _if49_exit
3121   184C             _if49_true:
3122   184C             ;; count++; 
3123   184C FA FF FF      lea d, [bp + -1] ; $count
3124   184F 2A            mov b, [d]
3125   1850 D8            push b
3126   1851 FD 77         inc b
3127   1853 FA FF FF      lea d, [bp + -1] ; $count
3128   1856 FD 43         mov [d], b
3129   1858 E5            pop b
3130   1859 0A 5C 18      jmp _if49_exit
3131   185C             _if49_exit:
3132   185C             ;; if(currState[i][j+1] == '@') 			count++; 
3133   185C             _if50_cond:
3134   185C 3B 2F 1E      mov d, _currState_data ; $currState
3135   185F D7            push a
3136   1860 DA            push d
3137   1861 FA 05 00      lea d, [bp + 5] ; $i
3138   1864 2A            mov b, [d]
3139   1865 E7            pop d
3140   1866 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3141   186A DA            push d
3142   186B FA 07 00      lea d, [bp + 7] ; $j
3143   186E 2A            mov b, [d]
3144   186F             ; START TERMS
3145   186F D7            push a
3146   1870 11            mov a, b
3147   1871 26 01 00      mov b, $1
3148   1874 54            add a, b
3149   1875 27            mov b, a
3150   1876 E4            pop a
3151   1877             ; END TERMS
3152   1877 E7            pop d
3153   1878 5A            add d, b
3154   1879 E4            pop a
3155   187A 32            mov bl, [d]
3156   187B A7 00         mov bh, 0
3157   187D             ; START RELATIONAL
3158   187D D7            push a
3159   187E 11            mov a, b
3160   187F 26 40 00      mov b, $40
3161   1882 B0            cmp a, b
3162   1883 FD 71         seq ; ==
3163   1885 E4            pop a
3164   1886             ; END RELATIONAL
3165   1886 C0 00 00      cmp b, 0
3166   1889 C6 9C 18      je _if50_exit
3167   188C             _if50_true:
3168   188C             ;; count++; 
3169   188C FA FF FF      lea d, [bp + -1] ; $count
3170   188F 2A            mov b, [d]
3171   1890 D8            push b
3172   1891 FD 77         inc b
3173   1893 FA FF FF      lea d, [bp + -1] ; $count
3174   1896 FD 43         mov [d], b
3175   1898 E5            pop b
3176   1899 0A 9C 18      jmp _if50_exit
3177   189C             _if50_exit:
3178   189C             ;; if(currState[i+1][j+-1] == '@') 	count++; 
3179   189C             _if51_cond:
3180   189C 3B 2F 1E      mov d, _currState_data ; $currState
3181   189F D7            push a
3182   18A0 DA            push d
3183   18A1 FA 05 00      lea d, [bp + 5] ; $i
3184   18A4 2A            mov b, [d]
3185   18A5             ; START TERMS
3186   18A5 D7            push a
3187   18A6 11            mov a, b
3188   18A7 26 01 00      mov b, $1
3189   18AA 54            add a, b
3190   18AB 27            mov b, a
3191   18AC E4            pop a
3192   18AD             ; END TERMS
3193   18AD E7            pop d
3194   18AE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3195   18B2 DA            push d
3196   18B3 FA 07 00      lea d, [bp + 7] ; $j
3197   18B6 2A            mov b, [d]
3198   18B7             ; START TERMS
3199   18B7 D7            push a
3200   18B8 11            mov a, b
3201   18B9 26 01 00      mov b, $1
3202   18BC FD 97         neg b
3203   18BE 54            add a, b
3204   18BF 27            mov b, a
3205   18C0 E4            pop a
3206   18C1             ; END TERMS
3207   18C1 E7            pop d
3208   18C2 5A            add d, b
3209   18C3 E4            pop a
3210   18C4 32            mov bl, [d]
3211   18C5 A7 00         mov bh, 0
3212   18C7             ; START RELATIONAL
3213   18C7 D7            push a
3214   18C8 11            mov a, b
3215   18C9 26 40 00      mov b, $40
3216   18CC B0            cmp a, b
3217   18CD FD 71         seq ; ==
3218   18CF E4            pop a
3219   18D0             ; END RELATIONAL
3220   18D0 C0 00 00      cmp b, 0
3221   18D3 C6 E6 18      je _if51_exit
3222   18D6             _if51_true:
3223   18D6             ;; count++; 
3224   18D6 FA FF FF      lea d, [bp + -1] ; $count
3225   18D9 2A            mov b, [d]
3226   18DA D8            push b
3227   18DB FD 77         inc b
3228   18DD FA FF FF      lea d, [bp + -1] ; $count
3229   18E0 FD 43         mov [d], b
3230   18E2 E5            pop b
3231   18E3 0A E6 18      jmp _if51_exit
3232   18E6             _if51_exit:
3233   18E6             ;; if(currState[i+1][j] == '@') 			count++; 
3234   18E6             _if52_cond:
3235   18E6 3B 2F 1E      mov d, _currState_data ; $currState
3236   18E9 D7            push a
3237   18EA DA            push d
3238   18EB FA 05 00      lea d, [bp + 5] ; $i
3239   18EE 2A            mov b, [d]
3240   18EF             ; START TERMS
3241   18EF D7            push a
3242   18F0 11            mov a, b
3243   18F1 26 01 00      mov b, $1
3244   18F4 54            add a, b
3245   18F5 27            mov b, a
3246   18F6 E4            pop a
3247   18F7             ; END TERMS
3248   18F7 E7            pop d
3249   18F8 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3250   18FC DA            push d
3251   18FD FA 07 00      lea d, [bp + 7] ; $j
3252   1900 2A            mov b, [d]
3253   1901 E7            pop d
3254   1902 5A            add d, b
3255   1903 E4            pop a
3256   1904 32            mov bl, [d]
3257   1905 A7 00         mov bh, 0
3258   1907             ; START RELATIONAL
3259   1907 D7            push a
3260   1908 11            mov a, b
3261   1909 26 40 00      mov b, $40
3262   190C B0            cmp a, b
3263   190D FD 71         seq ; ==
3264   190F E4            pop a
3265   1910             ; END RELATIONAL
3266   1910 C0 00 00      cmp b, 0
3267   1913 C6 26 19      je _if52_exit
3268   1916             _if52_true:
3269   1916             ;; count++; 
3270   1916 FA FF FF      lea d, [bp + -1] ; $count
3271   1919 2A            mov b, [d]
3272   191A D8            push b
3273   191B FD 77         inc b
3274   191D FA FF FF      lea d, [bp + -1] ; $count
3275   1920 FD 43         mov [d], b
3276   1922 E5            pop b
3277   1923 0A 26 19      jmp _if52_exit
3278   1926             _if52_exit:
3279   1926             ;; if(currState[i+1][j+1] == '@') 		count++; 
3280   1926             _if53_cond:
3281   1926 3B 2F 1E      mov d, _currState_data ; $currState
3282   1929 D7            push a
3283   192A DA            push d
3284   192B FA 05 00      lea d, [bp + 5] ; $i
3285   192E 2A            mov b, [d]
3286   192F             ; START TERMS
3287   192F D7            push a
3288   1930 11            mov a, b
3289   1931 26 01 00      mov b, $1
3290   1934 54            add a, b
3291   1935 27            mov b, a
3292   1936 E4            pop a
3293   1937             ; END TERMS
3294   1937 E7            pop d
3295   1938 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3296   193C DA            push d
3297   193D FA 07 00      lea d, [bp + 7] ; $j
3298   1940 2A            mov b, [d]
3299   1941             ; START TERMS
3300   1941 D7            push a
3301   1942 11            mov a, b
3302   1943 26 01 00      mov b, $1
3303   1946 54            add a, b
3304   1947 27            mov b, a
3305   1948 E4            pop a
3306   1949             ; END TERMS
3307   1949 E7            pop d
3308   194A 5A            add d, b
3309   194B E4            pop a
3310   194C 32            mov bl, [d]
3311   194D A7 00         mov bh, 0
3312   194F             ; START RELATIONAL
3313   194F D7            push a
3314   1950 11            mov a, b
3315   1951 26 40 00      mov b, $40
3316   1954 B0            cmp a, b
3317   1955 FD 71         seq ; ==
3318   1957 E4            pop a
3319   1958             ; END RELATIONAL
3320   1958 C0 00 00      cmp b, 0
3321   195B C6 6E 19      je _if53_exit
3322   195E             _if53_true:
3323   195E             ;; count++; 
3324   195E FA FF FF      lea d, [bp + -1] ; $count
3325   1961 2A            mov b, [d]
3326   1962 D8            push b
3327   1963 FD 77         inc b
3328   1965 FA FF FF      lea d, [bp + -1] ; $count
3329   1968 FD 43         mov [d], b
3330   196A E5            pop b
3331   196B 0A 6E 19      jmp _if53_exit
3332   196E             _if53_exit:
3333   196E             ;; return count; 
3334   196E FA FF FF      lea d, [bp + -1] ; $count
3335   1971 2A            mov b, [d]
3336   1972 F9            leave
3337   1973 09            ret
3338   1974             ; --- END TEXT BLOCK
3339   1974             
3340   1974             ; --- BEGIN DATA BLOCK
3341   1974             _clear_data: 
3342   1974 1B 5B 32 4A .db 27,$5b,$32,$4a,27,$5b,$48,0,
3342   1978 1B 5B 48 00 
3343   197C 00 00 00    .fill 3, 0
3344   197F 00 00 00 00 _nextState_data: .fill 1200, 0
3344   1983 00 00 00 00 
3344   1987 00 00 00 00 
3344   198B 00 00 00 00 
3344   198F 00 00 00 00 
3344   1993 00 00 00 00 
3344   1997 00 00 00 00 
3344   199B 00 00 00 00 
3344   199F 00 00 00 00 
3344   19A3 00 00 00 00 
3344   19A7 00 00 00 00 
3344   19AB 00 00 00 00 
3344   19AF 00 00 00 00 
3344   19B3 00 00 00 00 
3344   19B7 00 00 00 00 
3344   19BB 00 00 00 00 
3344   19BF 00 00 00 00 
3344   19C3 00 00 00 00 
3344   19C7 00 00 00 00 
3344   19CB 00 00 00 00 
3344   19CF 00 00 00 00 
3344   19D3 00 00 00 00 
3344   19D7 00 00 00 00 
3344   19DB 00 00 00 00 
3344   19DF 00 00 00 00 
3344   19E3 00 00 00 00 
3344   19E7 00 00 00 00 
3344   19EB 00 00 00 00 
3344   19EF 00 00 00 00 
3344   19F3 00 00 00 00 
3344   19F7 00 00 00 00 
3344   19FB 00 00 00 00 
3344   19FF 00 00 00 00 
3344   1A03 00 00 00 00 
3344   1A07 00 00 00 00 
3344   1A0B 00 00 00 00 
3344   1A0F 00 00 00 00 
3344   1A13 00 00 00 00 
3344   1A17 00 00 00 00 
3344   1A1B 00 00 00 00 
3344   1A1F 00 00 00 00 
3344   1A23 00 00 00 00 
3344   1A27 00 00 00 00 
3344   1A2B 00 00 00 00 
3344   1A2F 00 00 00 00 
3344   1A33 00 00 00 00 
3344   1A37 00 00 00 00 
3344   1A3B 00 00 00 00 
3344   1A3F 00 00 00 00 
3344   1A43 00 00 00 00 
3344   1A47 00 00 00 00 
3344   1A4B 00 00 00 00 
3344   1A4F 00 00 00 00 
3344   1A53 00 00 00 00 
3344   1A57 00 00 00 00 
3344   1A5B 00 00 00 00 
3344   1A5F 00 00 00 00 
3344   1A63 00 00 00 00 
3344   1A67 00 00 00 00 
3344   1A6B 00 00 00 00 
3344   1A6F 00 00 00 00 
3344   1A73 00 00 00 00 
3344   1A77 00 00 00 00 
3344   1A7B 00 00 00 00 
3344   1A7F 00 00 00 00 
3344   1A83 00 00 00 00 
3344   1A87 00 00 00 00 
3344   1A8B 00 00 00 00 
3344   1A8F 00 00 00 00 
3344   1A93 00 00 00 00 
3344   1A97 00 00 00 00 
3344   1A9B 00 00 00 00 
3344   1A9F 00 00 00 00 
3344   1AA3 00 00 00 00 
3344   1AA7 00 00 00 00 
3344   1AAB 00 00 00 00 
3344   1AAF 00 00 00 00 
3344   1AB3 00 00 00 00 
3344   1AB7 00 00 00 00 
3344   1ABB 00 00 00 00 
3344   1ABF 00 00 00 00 
3344   1AC3 00 00 00 00 
3344   1AC7 00 00 00 00 
3344   1ACB 00 00 00 00 
3344   1ACF 00 00 00 00 
3344   1AD3 00 00 00 00 
3344   1AD7 00 00 00 00 
3344   1ADB 00 00 00 00 
3344   1ADF 00 00 00 00 
3344   1AE3 00 00 00 00 
3344   1AE7 00 00 00 00 
3344   1AEB 00 00 00 00 
3344   1AEF 00 00 00 00 
3344   1AF3 00 00 00 00 
3344   1AF7 00 00 00 00 
3344   1AFB 00 00 00 00 
3344   1AFF 00 00 00 00 
3344   1B03 00 00 00 00 
3344   1B07 00 00 00 00 
3344   1B0B 00 00 00 00 
3344   1B0F 00 00 00 00 
3344   1B13 00 00 00 00 
3344   1B17 00 00 00 00 
3344   1B1B 00 00 00 00 
3344   1B1F 00 00 00 00 
3344   1B23 00 00 00 00 
3344   1B27 00 00 00 00 
3344   1B2B 00 00 00 00 
3344   1B2F 00 00 00 00 
3344   1B33 00 00 00 00 
3344   1B37 00 00 00 00 
3344   1B3B 00 00 00 00 
3344   1B3F 00 00 00 00 
3344   1B43 00 00 00 00 
3344   1B47 00 00 00 00 
3344   1B4B 00 00 00 00 
3344   1B4F 00 00 00 00 
3344   1B53 00 00 00 00 
3344   1B57 00 00 00 00 
3344   1B5B 00 00 00 00 
3344   1B5F 00 00 00 00 
3344   1B63 00 00 00 00 
3344   1B67 00 00 00 00 
3344   1B6B 00 00 00 00 
3344   1B6F 00 00 00 00 
3344   1B73 00 00 00 00 
3344   1B77 00 00 00 00 
3344   1B7B 00 00 00 00 
3344   1B7F 00 00 00 00 
3344   1B83 00 00 00 00 
3344   1B87 00 00 00 00 
3344   1B8B 00 00 00 00 
3344   1B8F 00 00 00 00 
3344   1B93 00 00 00 00 
3344   1B97 00 00 00 00 
3344   1B9B 00 00 00 00 
3344   1B9F 00 00 00 00 
3344   1BA3 00 00 00 00 
3344   1BA7 00 00 00 00 
3344   1BAB 00 00 00 00 
3344   1BAF 00 00 00 00 
3344   1BB3 00 00 00 00 
3344   1BB7 00 00 00 00 
3344   1BBB 00 00 00 00 
3344   1BBF 00 00 00 00 
3344   1BC3 00 00 00 00 
3344   1BC7 00 00 00 00 
3344   1BCB 00 00 00 00 
3344   1BCF 00 00 00 00 
3344   1BD3 00 00 00 00 
3344   1BD7 00 00 00 00 
3344   1BDB 00 00 00 00 
3344   1BDF 00 00 00 00 
3344   1BE3 00 00 00 00 
3344   1BE7 00 00 00 00 
3344   1BEB 00 00 00 00 
3344   1BEF 00 00 00 00 
3344   1BF3 00 00 00 00 
3344   1BF7 00 00 00 00 
3344   1BFB 00 00 00 00 
3344   1BFF 00 00 00 00 
3344   1C03 00 00 00 00 
3344   1C07 00 00 00 00 
3344   1C0B 00 00 00 00 
3344   1C0F 00 00 00 00 
3344   1C13 00 00 00 00 
3344   1C17 00 00 00 00 
3344   1C1B 00 00 00 00 
3344   1C1F 00 00 00 00 
3344   1C23 00 00 00 00 
3344   1C27 00 00 00 00 
3344   1C2B 00 00 00 00 
3344   1C2F 00 00 00 00 
3344   1C33 00 00 00 00 
3344   1C37 00 00 00 00 
3344   1C3B 00 00 00 00 
3344   1C3F 00 00 00 00 
3344   1C43 00 00 00 00 
3344   1C47 00 00 00 00 
3344   1C4B 00 00 00 00 
3344   1C4F 00 00 00 00 
3344   1C53 00 00 00 00 
3344   1C57 00 00 00 00 
3344   1C5B 00 00 00 00 
3344   1C5F 00 00 00 00 
3344   1C63 00 00 00 00 
3344   1C67 00 00 00 00 
3344   1C6B 00 00 00 00 
3344   1C6F 00 00 00 00 
3344   1C73 00 00 00 00 
3344   1C77 00 00 00 00 
3344   1C7B 00 00 00 00 
3344   1C7F 00 00 00 00 
3344   1C83 00 00 00 00 
3344   1C87 00 00 00 00 
3344   1C8B 00 00 00 00 
3344   1C8F 00 00 00 00 
3344   1C93 00 00 00 00 
3344   1C97 00 00 00 00 
3344   1C9B 00 00 00 00 
3344   1C9F 00 00 00 00 
3344   1CA3 00 00 00 00 
3344   1CA7 00 00 00 00 
3344   1CAB 00 00 00 00 
3344   1CAF 00 00 00 00 
3344   1CB3 00 00 00 00 
3344   1CB7 00 00 00 00 
3344   1CBB 00 00 00 00 
3344   1CBF 00 00 00 00 
3344   1CC3 00 00 00 00 
3344   1CC7 00 00 00 00 
3344   1CCB 00 00 00 00 
3344   1CCF 00 00 00 00 
3344   1CD3 00 00 00 00 
3344   1CD7 00 00 00 00 
3344   1CDB 00 00 00 00 
3344   1CDF 00 00 00 00 
3344   1CE3 00 00 00 00 
3344   1CE7 00 00 00 00 
3344   1CEB 00 00 00 00 
3344   1CEF 00 00 00 00 
3344   1CF3 00 00 00 00 
3344   1CF7 00 00 00 00 
3344   1CFB 00 00 00 00 
3344   1CFF 00 00 00 00 
3344   1D03 00 00 00 00 
3344   1D07 00 00 00 00 
3344   1D0B 00 00 00 00 
3344   1D0F 00 00 00 00 
3344   1D13 00 00 00 00 
3344   1D17 00 00 00 00 
3344   1D1B 00 00 00 00 
3344   1D1F 00 00 00 00 
3344   1D23 00 00 00 00 
3344   1D27 00 00 00 00 
3344   1D2B 00 00 00 00 
3344   1D2F 00 00 00 00 
3344   1D33 00 00 00 00 
3344   1D37 00 00 00 00 
3344   1D3B 00 00 00 00 
3344   1D3F 00 00 00 00 
3344   1D43 00 00 00 00 
3344   1D47 00 00 00 00 
3344   1D4B 00 00 00 00 
3344   1D4F 00 00 00 00 
3344   1D53 00 00 00 00 
3344   1D57 00 00 00 00 
3344   1D5B 00 00 00 00 
3344   1D5F 00 00 00 00 
3344   1D63 00 00 00 00 
3344   1D67 00 00 00 00 
3344   1D6B 00 00 00 00 
3344   1D6F 00 00 00 00 
3344   1D73 00 00 00 00 
3344   1D77 00 00 00 00 
3344   1D7B 00 00 00 00 
3344   1D7F 00 00 00 00 
3344   1D83 00 00 00 00 
3344   1D87 00 00 00 00 
3344   1D8B 00 00 00 00 
3344   1D8F 00 00 00 00 
3344   1D93 00 00 00 00 
3344   1D97 00 00 00 00 
3344   1D9B 00 00 00 00 
3344   1D9F 00 00 00 00 
3344   1DA3 00 00 00 00 
3344   1DA7 00 00 00 00 
3344   1DAB 00 00 00 00 
3344   1DAF 00 00 00 00 
3344   1DB3 00 00 00 00 
3344   1DB7 00 00 00 00 
3344   1DBB 00 00 00 00 
3344   1DBF 00 00 00 00 
3344   1DC3 00 00 00 00 
3344   1DC7 00 00 00 00 
3344   1DCB 00 00 00 00 
3344   1DCF 00 00 00 00 
3344   1DD3 00 00 00 00 
3344   1DD7 00 00 00 00 
3344   1DDB 00 00 00 00 
3344   1DDF 00 00 00 00 
3344   1DE3 00 00 00 00 
3344   1DE7 00 00 00 00 
3344   1DEB 00 00 00 00 
3344   1DEF 00 00 00 00 
3344   1DF3 00 00 00 00 
3344   1DF7 00 00 00 00 
3344   1DFB 00 00 00 00 
3344   1DFF 00 00 00 00 
3344   1E03 00 00 00 00 
3344   1E07 00 00 00 00 
3344   1E0B 00 00 00 00 
3344   1E0F 00 00 00 00 
3344   1E13 00 00 00 00 
3344   1E17 00 00 00 00 
3344   1E1B 00 00 00 00 
3344   1E1F 00 00 00 00 
3344   1E23 00 00 00 00 
3344   1E27 00 00 00 00 
3344   1E2B 00 00 00 00 
3345   1E2F             _currState_data: 
3346   1E2F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3346   1E33 20 20 20 20 
3346   1E37 20 20 20 20 
3346   1E3B 20 20 20 20 
3346   1E3F 20 20 20 20 
3346   1E43 20 20 20 20 
3346   1E47 20 20 20 20 
3346   1E4B 20 20 
3347   1E4D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3347   1E51 20 20 20 20 
3347   1E55 20 20 20 20 
3347   1E59 20 20 20 20 
3347   1E5D 20 20 20 20 
3347   1E61 20 20 20 20 
3347   1E65 20 20 20 20 
3347   1E69 20 20 
3348   1E6B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3348   1E6F 20 20 20 20 
3348   1E73 20 20 20 20 
3348   1E77 20 20 20 20 
3348   1E7B 20 20 20 20 
3348   1E7F 20 20 20 20 
3348   1E83 20 20 20 20 
3348   1E87 20 20 
3349   1E89 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3349   1E8D 20 20 20 20 
3349   1E91 20 20 20 20 
3349   1E95 20 20 20 20 
3349   1E99 20 20 20 20 
3349   1E9D 20 20 20 20 
3349   1EA1 20 20 20 20 
3349   1EA5 20 20 
3350   1EA7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3350   1EAB 20 20 20 20 
3350   1EAF 20 20 20 20 
3350   1EB3 20 20 20 20 
3350   1EB7 20 20 20 20 
3350   1EBB 20 20 20 20 
3350   1EBF 20 20 20 40 
3350   1EC3 20 20 
3351   1EC5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3351   1EC9 20 20 20 20 
3351   1ECD 20 20 20 20 
3351   1ED1 20 20 20 20 
3351   1ED5 20 20 20 20 
3351   1ED9 20 20 20 20 
3351   1EDD 20 20 20 20 
3351   1EE1 20 20 
3352   1EE3 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3352   1EE7 20 40 20 40 
3352   1EEB 20 20 20 20 
3352   1EEF 20 20 20 20 
3352   1EF3 20 20 20 20 
3352   1EF7 20 20 20 20 
3352   1EFB 20 20 20 20 
3352   1EFF 20 20 
3353   1F01 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
3353   1F05 20 40 40 20 
3353   1F09 20 20 20 20 
3353   1F0D 20 40 40 20 
3353   1F11 20 20 20 20 
3353   1F15 20 20 20 20 
3353   1F19 20 20 20 40 
3353   1F1D 40 20 
3354   1F1F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3354   1F23 20 20 20 20 
3354   1F27 20 20 20 20 
3354   1F2B 20 20 40 20 
3354   1F2F 20 20 40 20 
3354   1F33 20 20 20 40 
3354   1F37 40 20 20 20 
3354   1F3B 20 20 
3355   1F3D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
3355   1F41 20 20 20 40 
3355   1F45 40 20 20 20 
3355   1F49 20 40 40 20 
3355   1F4D 20 20 20 20 
3355   1F51 20 20 20 40 
3355   1F55 20 20 20 20 
3355   1F59 20 40 
3356   1F5B 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3356   1F5F 40 20 20 20 
3356   1F63 20 20 20 20 
3356   1F67 20 20 20 20 
3356   1F6B 20 20 20 20 
3356   1F6F 20 20 20 40 
3356   1F73 40 20 20 20 
3356   1F77 20 20 
3357   1F79 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3357   1F7D 20 20 20 40 
3357   1F81 20 40 40 20 
3357   1F85 20 20 20 40 
3357   1F89 20 40 20 20 
3357   1F8D 20 20 20 20 
3357   1F91 20 20 20 20 
3357   1F95 20 20 
3358   1F97 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3358   1F9B 20 20 20 20 
3358   1F9F 20 20 20 20 
3358   1FA3 20 40 20 20 
3358   1FA7 20 20 20 40 
3358   1FAB 20 20 20 20 
3358   1FAF 20 20 20 40 
3358   1FB3 20 20 
3359   1FB5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
3359   1FB9 20 20 20 20 
3359   1FBD 20 20 20 20 
3359   1FC1 20 20 20 20 
3359   1FC5 20 20 20 20 
3359   1FC9 20 20 20 20 
3359   1FCD 40 20 20 20 
3359   1FD1 40 20 
3360   1FD3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3360   1FD7 20 20 20 20 
3360   1FDB 20 20 20 20 
3360   1FDF 20 20 20 20 
3360   1FE3 20 20 20 20 
3360   1FE7 20 20 20 20 
3360   1FEB 20 20 20 20 
3360   1FEF 20 20 
3361   1FF1 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3361   1FF5 20 40 40 20 
3361   1FF9 20 20 20 20 
3361   1FFD 20 20 20 20 
3361   2001 20 20 20 20 
3361   2005 20 20 20 20 
3361   2009 20 20 20 20 
3361   200D 20 20 
3362   200F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3362   2013 20 20 20 20 
3362   2017 20 20 20 20 
3362   201B 20 20 20 20 
3362   201F 20 20 20 20 
3362   2023 20 20 20 20 
3362   2027 20 20 20 20 
3362   202B 20 20 
3363   202D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3363   2031 20 20 20 20 
3363   2035 20 20 20 20 
3363   2039 20 20 20 20 
3363   203D 20 20 20 20 
3363   2041 20 20 20 20 
3363   2045 20 20 20 20 
3363   2049 20 20 
3364   204B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3364   204F 20 20 20 20 
3364   2053 20 20 20 20 
3364   2057 20 20 20 20 
3364   205B 20 20 20 20 
3364   205F 20 20 20 20 
3364   2063 20 20 20 20 
3364   2067 20 20 
3365   2069 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3365   206D 20 20 20 20 
3365   2071 20 20 20 20 
3365   2075 20 20 20 20 
3365   2079 20 20 20 20 
3365   207D 20 20 20 20 
3365   2081 20 20 20 20 
3365   2085 20 20 
3366   2087 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3366   208B 20 20 20 20 
3366   208F 20 20 20 20 
3366   2093 20 20 20 20 
3366   2097 20 20 20 20 
3366   209B 20 20 20 20 
3366   209F 20 20 20 20 
3366   20A3 20 20 
3367   20A5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3367   20A9 20 20 20 20 
3367   20AD 20 20 20 20 
3367   20B1 20 20 20 20 
3367   20B5 20 20 20 20 
3367   20B9 20 20 20 20 
3367   20BD 20 20 20 20 
3367   20C1 20 20 
3368   20C3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3368   20C7 20 20 20 20 
3368   20CB 20 20 20 20 
3368   20CF 20 20 20 20 
3368   20D3 20 20 20 20 
3368   20D7 20 20 20 20 
3368   20DB 20 20 20 20 
3368   20DF 20 20 
3369   20E1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3369   20E5 20 20 20 20 
3369   20E9 20 20 20 20 
3369   20ED 20 20 20 20 
3369   20F1 20 20 20 20 
3369   20F5 20 20 20 20 
3369   20F9 20 20 20 20 
3369   20FD 20 20 
3370   20FF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3370   2103 20 20 20 20 
3370   2107 20 20 20 20 
3370   210B 20 20 20 20 
3370   210F 20 20 20 20 
3370   2113 20 20 20 20 
3370   2117 20 20 20 20 
3370   211B 20 20 
3371   211D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3371   2121 20 20 20 20 
3371   2125 20 20 20 20 
3371   2129 20 20 20 20 
3371   212D 20 20 20 20 
3371   2131 20 20 20 20 
3371   2135 20 20 20 20 
3371   2139 20 20 
3372   213B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3372   213F 20 20 20 20 
3372   2143 20 20 20 20 
3372   2147 20 20 20 20 
3372   214B 20 20 20 20 
3373   214F 00 00 00 00 .fill 400, 0
3373   2153 00 00 00 00 
3373   2157 00 00 00 00 
3373   215B 00 00 00 00 
3373   215F 00 00 00 00 
3373   2163 00 00 00 00 
3373   2167 00 00 00 00 
3373   216B 00 00 00 00 
3373   216F 00 00 00 00 
3373   2173 00 00 00 00 
3373   2177 00 00 00 00 
3373   217B 00 00 00 00 
3373   217F 00 00 00 00 
3373   2183 00 00 00 00 
3373   2187 00 00 00 00 
3373   218B 00 00 00 00 
3373   218F 00 00 00 00 
3373   2193 00 00 00 00 
3373   2197 00 00 00 00 
3373   219B 00 00 00 00 
3373   219F 00 00 00 00 
3373   21A3 00 00 00 00 
3373   21A7 00 00 00 00 
3373   21AB 00 00 00 00 
3373   21AF 00 00 00 00 
3373   21B3 00 00 00 00 
3373   21B7 00 00 00 00 
3373   21BB 00 00 00 00 
3373   21BF 00 00 00 00 
3373   21C3 00 00 00 00 
3373   21C7 00 00 00 00 
3373   21CB 00 00 00 00 
3373   21CF 00 00 00 00 
3373   21D3 00 00 00 00 
3373   21D7 00 00 00 00 
3373   21DB 00 00 00 00 
3373   21DF 00 00 00 00 
3373   21E3 00 00 00 00 
3373   21E7 00 00 00 00 
3373   21EB 00 00 00 00 
3373   21EF 00 00 00 00 
3373   21F3 00 00 00 00 
3373   21F7 00 00 00 00 
3373   21FB 00 00 00 00 
3373   21FF 00 00 00 00 
3373   2203 00 00 00 00 
3373   2207 00 00 00 00 
3373   220B 00 00 00 00 
3373   220F 00 00 00 00 
3373   2213 00 00 00 00 
3373   2217 00 00 00 00 
3373   221B 00 00 00 00 
3373   221F 00 00 00 00 
3373   2223 00 00 00 00 
3373   2227 00 00 00 00 
3373   222B 00 00 00 00 
3373   222F 00 00 00 00 
3373   2233 00 00 00 00 
3373   2237 00 00 00 00 
3373   223B 00 00 00 00 
3373   223F 00 00 00 00 
3373   2243 00 00 00 00 
3373   2247 00 00 00 00 
3373   224B 00 00 00 00 
3373   224F 00 00 00 00 
3373   2253 00 00 00 00 
3373   2257 00 00 00 00 
3373   225B 00 00 00 00 
3373   225F 00 00 00 00 
3373   2263 00 00 00 00 
3373   2267 00 00 00 00 
3373   226B 00 00 00 00 
3373   226F 00 00 00 00 
3373   2273 00 00 00 00 
3373   2277 00 00 00 00 
3373   227B 00 00 00 00 
3373   227F 00 00 00 00 
3373   2283 00 00 00 00 
3373   2287 00 00 00 00 
3373   228B 00 00 00 00 
3373   228F 00 00 00 00 
3373   2293 00 00 00 00 
3373   2297 00 00 00 00 
3373   229B 00 00 00 00 
3373   229F 00 00 00 00 
3373   22A3 00 00 00 00 
3373   22A7 00 00 00 00 
3373   22AB 00 00 00 00 
3373   22AF 00 00 00 00 
3373   22B3 00 00 00 00 
3373   22B7 00 00 00 00 
3373   22BB 00 00 00 00 
3373   22BF 00 00 00 00 
3373   22C3 00 00 00 00 
3373   22C7 00 00 00 00 
3373   22CB 00 00 00 00 
3373   22CF 00 00 00 00 
3373   22D3 00 00 00 00 
3373   22D7 00 00 00 00 
3373   22DB 00 00 00 00 
3374   22DF 0A 0D 50 72 __s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
3374   22E3 65 73 73 20 
3374   22E7 43 54 52 4C 
3374   22EB 2B 43 20 74 
3374   22EF 6F 20 71 75 
3374   22F3 69 74 2E 0A 
3374   22F7 0D 00 
3375   22F9 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
3375   22FD 70 65 63 74 
3375   2301 65 64 20 66 
3375   2305 6F 72 6D 61 
3375   2309 74 20 69 6E 
3375   230D 20 70 72 69 
3375   2311 6E 74 66 2E 
3375   2315 00 
3376   2316 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
3376   231A 72 3A 20 55 
3376   231E 6E 6B 6E 6F 
3376   2322 77 6E 20 61 
3376   2326 72 67 75 6D 
3376   232A 65 6E 74 20 
3376   232E 74 79 70 65 
3376   2332 2E 0A 00 
3377   2335 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
3377   2339 1B 5B 48 00 
3378   233D 0A 00       __s4: .db "\n", 0
3379   233F 40 20 00    __s5: .db "@ ", 0
3380   2342 2E 20 00    __s6: .db ". ", 0
3381   2345             
3382   2345 47 23       _heap_top: .dw _heap
3383   2347 00          _heap: .db 0
3384   2348             ; --- END DATA BLOCK
3385   2348             
3386   2348             .end
tasm: Number of errors = 0
