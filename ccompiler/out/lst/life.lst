0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <  30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 1E 00      mov b, $1e
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; < 
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 9C 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j = 0; j <  40    ; j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 28 00      mov b, $28
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; < 
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 8A 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; nextState[i][j] = currState[i][j]; 
0057   0445 3B B5 16      mov d, _nextState_data ; $nextState
0058   0448 D7            push a
0059   0449 DA            push d
0060   044A FA FF FF      lea d, [bp + -1] ; $i
0061   044D 2A            mov b, [d]
0062   044E E7            pop d
0063   044F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0064   0453 DA            push d
0065   0454 FA FD FF      lea d, [bp + -3] ; $j
0066   0457 2A            mov b, [d]
0067   0458 E7            pop d
0068   0459 5A            add d, b
0069   045A E4            pop a
0070   045B DA            push d
0071   045C 3B 65 1B      mov d, _currState_data ; $currState
0072   045F D7            push a
0073   0460 DA            push d
0074   0461 FA FF FF      lea d, [bp + -1] ; $i
0075   0464 2A            mov b, [d]
0076   0465 E7            pop d
0077   0466 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0078   046A DA            push d
0079   046B FA FD FF      lea d, [bp + -3] ; $j
0080   046E 2A            mov b, [d]
0081   046F E7            pop d
0082   0470 5A            add d, b
0083   0471 E4            pop a
0084   0472 32            mov bl, [d]
0085   0473 A7 00         mov bh, 0
0086   0475 E7            pop d
0087   0476 FD 3E         mov [d], bl
0088   0478             _for2_update:
0089   0478 FA FD FF      lea d, [bp + -3] ; $j
0090   047B 2A            mov b, [d]
0091   047C FD 79         mov g, b
0092   047E FD 77         inc b
0093   0480 FA FD FF      lea d, [bp + -3] ; $j
0094   0483 FD 43         mov [d], b
0095   0485 FD 27         mov b, g
0096   0487 0A 32 04      jmp _for2_cond
0097   048A             _for2_exit:
0098   048A             _for1_update:
0099   048A FA FF FF      lea d, [bp + -1] ; $i
0100   048D 2A            mov b, [d]
0101   048E FD 79         mov g, b
0102   0490 FD 77         inc b
0103   0492 FA FF FF      lea d, [bp + -1] ; $i
0104   0495 FD 43         mov [d], b
0105   0497 FD 27         mov b, g
0106   0499 0A 15 04      jmp _for1_cond
0107   049C             _for1_exit:
0108   049C             ;; for(;;){ 
0109   049C             _for3_init:
0110   049C             _for3_cond:
0111   049C             _for3_block:
0112   049C             ;; for(i = 1; i <  30     +-1; i++){ 
0113   049C             _for4_init:
0114   049C FA FF FF      lea d, [bp + -1] ; $i
0115   049F DA            push d
0116   04A0 26 01 00      mov b, $1
0117   04A3 E7            pop d
0118   04A4 FD 43         mov [d], b
0119   04A6             _for4_cond:
0120   04A6 FA FF FF      lea d, [bp + -1] ; $i
0121   04A9 2A            mov b, [d]
0122   04AA             ; START RELATIONAL
0123   04AA D7            push a
0124   04AB 11            mov a, b
0125   04AC 26 1E 00      mov b, $1e
0126   04AF             ; START TERMS
0127   04AF D7            push a
0128   04B0 11            mov a, b
0129   04B1 26 01 00      mov b, $1
0130   04B4 FD 97         neg b
0131   04B6 54            add a, b
0132   04B7 27            mov b, a
0133   04B8 E4            pop a
0134   04B9             ; END TERMS
0135   04B9 B0            cmp a, b
0136   04BA FD 73         slt ; < 
0137   04BC E4            pop a
0138   04BD             ; END RELATIONAL
0139   04BD C0 00 00      cmp b, 0
0140   04C0 C6 A1 05      je _for4_exit
0141   04C3             _for4_block:
0142   04C3             ;; for(j = 1; j <  40    +-1; j++){ 
0143   04C3             _for5_init:
0144   04C3 FA FD FF      lea d, [bp + -3] ; $j
0145   04C6 DA            push d
0146   04C7 26 01 00      mov b, $1
0147   04CA E7            pop d
0148   04CB FD 43         mov [d], b
0149   04CD             _for5_cond:
0150   04CD FA FD FF      lea d, [bp + -3] ; $j
0151   04D0 2A            mov b, [d]
0152   04D1             ; START RELATIONAL
0153   04D1 D7            push a
0154   04D2 11            mov a, b
0155   04D3 26 28 00      mov b, $28
0156   04D6             ; START TERMS
0157   04D6 D7            push a
0158   04D7 11            mov a, b
0159   04D8 26 01 00      mov b, $1
0160   04DB FD 97         neg b
0161   04DD 54            add a, b
0162   04DE 27            mov b, a
0163   04DF E4            pop a
0164   04E0             ; END TERMS
0165   04E0 B0            cmp a, b
0166   04E1 FD 73         slt ; < 
0167   04E3 E4            pop a
0168   04E4             ; END RELATIONAL
0169   04E4 C0 00 00      cmp b, 0
0170   04E7 C6 8F 05      je _for5_exit
0171   04EA             _for5_block:
0172   04EA             ;; n = neighbours(i, j); 
0173   04EA FA FB FF      lea d, [bp + -5] ; $n
0174   04ED DA            push d
0175   04EE FA FF FF      lea d, [bp + -1] ; $i
0176   04F1 2A            mov b, [d]
0177   04F2 FD AB         swp b
0178   04F4 D8            push b
0179   04F5 FA FD FF      lea d, [bp + -3] ; $j
0180   04F8 2A            mov b, [d]
0181   04F9 FD AB         swp b
0182   04FB D8            push b
0183   04FC 07 58 14      call neighbours
0184   04FF 51 04 00      add sp, 4
0185   0502 E7            pop d
0186   0503 FD 43         mov [d], b
0187   0505             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0188   0505             _if6_cond:
0189   0505 FA FB FF      lea d, [bp + -5] ; $n
0190   0508 2A            mov b, [d]
0191   0509             ; START RELATIONAL
0192   0509 D7            push a
0193   050A 11            mov a, b
0194   050B 26 02 00      mov b, $2
0195   050E B0            cmp a, b
0196   050F FD 73         slt ; < 
0197   0511 E4            pop a
0198   0512             ; END RELATIONAL
0199   0512 D7            push a
0200   0513 11            mov a, b
0201   0514 FA FB FF      lea d, [bp + -5] ; $n
0202   0517 2A            mov b, [d]
0203   0518             ; START RELATIONAL
0204   0518 D7            push a
0205   0519 11            mov a, b
0206   051A 26 03 00      mov b, $3
0207   051D B0            cmp a, b
0208   051E FD 7F         sgt ; >
0209   0520 E4            pop a
0210   0521             ; END RELATIONAL
0211   0521 FD A8         sor a, b ; ||
0212   0523 E4            pop a
0213   0524 C0 00 00      cmp b, 0
0214   0527 C6 4A 05      je _if6_else
0215   052A             _if6_true:
0216   052A             ;; nextState[i][j] = ' '; 
0217   052A 3B B5 16      mov d, _nextState_data ; $nextState
0218   052D D7            push a
0219   052E DA            push d
0220   052F FA FF FF      lea d, [bp + -1] ; $i
0221   0532 2A            mov b, [d]
0222   0533 E7            pop d
0223   0534 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0224   0538 DA            push d
0225   0539 FA FD FF      lea d, [bp + -3] ; $j
0226   053C 2A            mov b, [d]
0227   053D E7            pop d
0228   053E 5A            add d, b
0229   053F E4            pop a
0230   0540 DA            push d
0231   0541 26 20 00      mov b, $20
0232   0544 E7            pop d
0233   0545 FD 3E         mov [d], bl
0234   0547 0A 7D 05      jmp _if6_exit
0235   054A             _if6_else:
0236   054A             ;; if(n == 3) nextState[i][j] = '@'; 
0237   054A             _if7_cond:
0238   054A FA FB FF      lea d, [bp + -5] ; $n
0239   054D 2A            mov b, [d]
0240   054E             ; START RELATIONAL
0241   054E D7            push a
0242   054F 11            mov a, b
0243   0550 26 03 00      mov b, $3
0244   0553 B0            cmp a, b
0245   0554 FD 71         seq ; ==
0246   0556 E4            pop a
0247   0557             ; END RELATIONAL
0248   0557 C0 00 00      cmp b, 0
0249   055A C6 7D 05      je _if7_exit
0250   055D             _if7_true:
0251   055D             ;; nextState[i][j] = '@'; 
0252   055D 3B B5 16      mov d, _nextState_data ; $nextState
0253   0560 D7            push a
0254   0561 DA            push d
0255   0562 FA FF FF      lea d, [bp + -1] ; $i
0256   0565 2A            mov b, [d]
0257   0566 E7            pop d
0258   0567 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0259   056B DA            push d
0260   056C FA FD FF      lea d, [bp + -3] ; $j
0261   056F 2A            mov b, [d]
0262   0570 E7            pop d
0263   0571 5A            add d, b
0264   0572 E4            pop a
0265   0573 DA            push d
0266   0574 26 40 00      mov b, $40
0267   0577 E7            pop d
0268   0578 FD 3E         mov [d], bl
0269   057A 0A 7D 05      jmp _if7_exit
0270   057D             _if7_exit:
0271   057D             _if6_exit:
0272   057D             _for5_update:
0273   057D FA FD FF      lea d, [bp + -3] ; $j
0274   0580 2A            mov b, [d]
0275   0581 FD 79         mov g, b
0276   0583 FD 77         inc b
0277   0585 FA FD FF      lea d, [bp + -3] ; $j
0278   0588 FD 43         mov [d], b
0279   058A FD 27         mov b, g
0280   058C 0A CD 04      jmp _for5_cond
0281   058F             _for5_exit:
0282   058F             _for4_update:
0283   058F FA FF FF      lea d, [bp + -1] ; $i
0284   0592 2A            mov b, [d]
0285   0593 FD 79         mov g, b
0286   0595 FD 77         inc b
0287   0597 FA FF FF      lea d, [bp + -1] ; $i
0288   059A FD 43         mov [d], b
0289   059C FD 27         mov b, g
0290   059E 0A A6 04      jmp _for4_cond
0291   05A1             _for4_exit:
0292   05A1             ;; for(i = 1; i <  30     +-1; i++){ 
0293   05A1             _for8_init:
0294   05A1 FA FF FF      lea d, [bp + -1] ; $i
0295   05A4 DA            push d
0296   05A5 26 01 00      mov b, $1
0297   05A8 E7            pop d
0298   05A9 FD 43         mov [d], b
0299   05AB             _for8_cond:
0300   05AB FA FF FF      lea d, [bp + -1] ; $i
0301   05AE 2A            mov b, [d]
0302   05AF             ; START RELATIONAL
0303   05AF D7            push a
0304   05B0 11            mov a, b
0305   05B1 26 1E 00      mov b, $1e
0306   05B4             ; START TERMS
0307   05B4 D7            push a
0308   05B5 11            mov a, b
0309   05B6 26 01 00      mov b, $1
0310   05B9 FD 97         neg b
0311   05BB 54            add a, b
0312   05BC 27            mov b, a
0313   05BD E4            pop a
0314   05BE             ; END TERMS
0315   05BE B0            cmp a, b
0316   05BF FD 73         slt ; < 
0317   05C1 E4            pop a
0318   05C2             ; END RELATIONAL
0319   05C2 C0 00 00      cmp b, 0
0320   05C5 C6 46 06      je _for8_exit
0321   05C8             _for8_block:
0322   05C8             ;; for(j = 1; j <  40    +-1; j++){ 
0323   05C8             _for9_init:
0324   05C8 FA FD FF      lea d, [bp + -3] ; $j
0325   05CB DA            push d
0326   05CC 26 01 00      mov b, $1
0327   05CF E7            pop d
0328   05D0 FD 43         mov [d], b
0329   05D2             _for9_cond:
0330   05D2 FA FD FF      lea d, [bp + -3] ; $j
0331   05D5 2A            mov b, [d]
0332   05D6             ; START RELATIONAL
0333   05D6 D7            push a
0334   05D7 11            mov a, b
0335   05D8 26 28 00      mov b, $28
0336   05DB             ; START TERMS
0337   05DB D7            push a
0338   05DC 11            mov a, b
0339   05DD 26 01 00      mov b, $1
0340   05E0 FD 97         neg b
0341   05E2 54            add a, b
0342   05E3 27            mov b, a
0343   05E4 E4            pop a
0344   05E5             ; END TERMS
0345   05E5 B0            cmp a, b
0346   05E6 FD 73         slt ; < 
0347   05E8 E4            pop a
0348   05E9             ; END RELATIONAL
0349   05E9 C0 00 00      cmp b, 0
0350   05EC C6 34 06      je _for9_exit
0351   05EF             _for9_block:
0352   05EF             ;; currState[i][j] = nextState[i][j]; 
0353   05EF 3B 65 1B      mov d, _currState_data ; $currState
0354   05F2 D7            push a
0355   05F3 DA            push d
0356   05F4 FA FF FF      lea d, [bp + -1] ; $i
0357   05F7 2A            mov b, [d]
0358   05F8 E7            pop d
0359   05F9 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0360   05FD DA            push d
0361   05FE FA FD FF      lea d, [bp + -3] ; $j
0362   0601 2A            mov b, [d]
0363   0602 E7            pop d
0364   0603 5A            add d, b
0365   0604 E4            pop a
0366   0605 DA            push d
0367   0606 3B B5 16      mov d, _nextState_data ; $nextState
0368   0609 D7            push a
0369   060A DA            push d
0370   060B FA FF FF      lea d, [bp + -1] ; $i
0371   060E 2A            mov b, [d]
0372   060F E7            pop d
0373   0610 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0374   0614 DA            push d
0375   0615 FA FD FF      lea d, [bp + -3] ; $j
0376   0618 2A            mov b, [d]
0377   0619 E7            pop d
0378   061A 5A            add d, b
0379   061B E4            pop a
0380   061C 32            mov bl, [d]
0381   061D A7 00         mov bh, 0
0382   061F E7            pop d
0383   0620 FD 3E         mov [d], bl
0384   0622             _for9_update:
0385   0622 FA FD FF      lea d, [bp + -3] ; $j
0386   0625 2A            mov b, [d]
0387   0626 FD 79         mov g, b
0388   0628 FD 77         inc b
0389   062A FA FD FF      lea d, [bp + -3] ; $j
0390   062D FD 43         mov [d], b
0391   062F FD 27         mov b, g
0392   0631 0A D2 05      jmp _for9_cond
0393   0634             _for9_exit:
0394   0634             _for8_update:
0395   0634 FA FF FF      lea d, [bp + -1] ; $i
0396   0637 2A            mov b, [d]
0397   0638 FD 79         mov g, b
0398   063A FD 77         inc b
0399   063C FA FF FF      lea d, [bp + -1] ; $i
0400   063F FD 43         mov [d], b
0401   0641 FD 27         mov b, g
0402   0643 0A AB 05      jmp _for8_cond
0403   0646             _for8_exit:
0404   0646             ;; printf(clear); 
0405   0646 3B AA 16      mov d, _clear_data ; $clear
0406   0649 2D            mov b, d
0407   064A FD AB         swp b
0408   064C D8            push b
0409   064D 07 B0 08      call printf
0410   0650 51 02 00      add sp, 2
0411   0653             ;; show(); 
0412   0653 07 6B 13      call show
0413   0656             _for3_update:
0414   0656 0A 9C 04      jmp _for3_cond
0415   0659             _for3_exit:
0416   0659 05 0B         syscall sys_terminate_proc
0417   065B             
0418   065B             strcpy:
0419   065B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0420   065E             ; $psrc 
0421   065E             ; $pdest 
0422   065E 52 04 00      sub sp, 4
0423   0661             ;; psrc = src; 
0424   0661 FA FF FF      lea d, [bp + -1] ; $psrc
0425   0664 DA            push d
0426   0665 FA 05 00      lea d, [bp + 5] ; $src
0427   0668 2A            mov b, [d]
0428   0669 E7            pop d
0429   066A FD 43         mov [d], b
0430   066C             ;; pdest = dest; 
0431   066C FA FD FF      lea d, [bp + -3] ; $pdest
0432   066F DA            push d
0433   0670 FA 07 00      lea d, [bp + 7] ; $dest
0434   0673 2A            mov b, [d]
0435   0674 E7            pop d
0436   0675 FD 43         mov [d], b
0437   0677             ;; while(*psrc) *pdest++ = *psrc++; 
0438   0677             _while10_cond:
0439   0677 FA FF FF      lea d, [bp + -1] ; $psrc
0440   067A 2A            mov b, [d]
0441   067B 74            mov d, b
0442   067C 32            mov bl, [d]
0443   067D A7 00         mov bh, 0
0444   067F C0 00 00      cmp b, 0
0445   0682 C6 AE 06      je _while10_exit
0446   0685             _while10_block:
0447   0685             ;; *pdest++ = *psrc++; 
0448   0685 FA FD FF      lea d, [bp + -3] ; $pdest
0449   0688 2A            mov b, [d]
0450   0689 FD 79         mov g, b
0451   068B FD 77         inc b
0452   068D FA FD FF      lea d, [bp + -3] ; $pdest
0453   0690 FD 43         mov [d], b
0454   0692 FD 27         mov b, g
0455   0694 D8            push b
0456   0695 FA FF FF      lea d, [bp + -1] ; $psrc
0457   0698 2A            mov b, [d]
0458   0699 FD 79         mov g, b
0459   069B FD 77         inc b
0460   069D FA FF FF      lea d, [bp + -1] ; $psrc
0461   06A0 FD 43         mov [d], b
0462   06A2 FD 27         mov b, g
0463   06A4 74            mov d, b
0464   06A5 32            mov bl, [d]
0465   06A6 A7 00         mov bh, 0
0466   06A8 E7            pop d
0467   06A9 FD 3E         mov [d], bl
0468   06AB 0A 77 06      jmp _while10_cond
0469   06AE             _while10_exit:
0470   06AE             ;; *pdest = '\0'; 
0471   06AE FA FD FF      lea d, [bp + -3] ; $pdest
0472   06B1 2A            mov b, [d]
0473   06B2 D8            push b
0474   06B3 26 00 00      mov b, $0
0475   06B6 E7            pop d
0476   06B7 FD 3E         mov [d], bl
0477   06B9 F9            leave
0478   06BA 09            ret
0479   06BB             
0480   06BB             strcmp:
0481   06BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0482   06BE             ;; while (*s1 && (*s1 == *s2)) { 
0483   06BE             _while11_cond:
0484   06BE FA 07 00      lea d, [bp + 7] ; $s1
0485   06C1 2A            mov b, [d]
0486   06C2 74            mov d, b
0487   06C3 32            mov bl, [d]
0488   06C4 A7 00         mov bh, 0
0489   06C6 D7            push a
0490   06C7 11            mov a, b
0491   06C8 FA 07 00      lea d, [bp + 7] ; $s1
0492   06CB 2A            mov b, [d]
0493   06CC 74            mov d, b
0494   06CD 32            mov bl, [d]
0495   06CE A7 00         mov bh, 0
0496   06D0             ; START RELATIONAL
0497   06D0 D7            push a
0498   06D1 11            mov a, b
0499   06D2 FA 05 00      lea d, [bp + 5] ; $s2
0500   06D5 2A            mov b, [d]
0501   06D6 74            mov d, b
0502   06D7 32            mov bl, [d]
0503   06D8 A7 00         mov bh, 0
0504   06DA B0            cmp a, b
0505   06DB FD 71         seq ; ==
0506   06DD E4            pop a
0507   06DE             ; END RELATIONAL
0508   06DE FD A7         sand a, b ; &&
0509   06E0 E4            pop a
0510   06E1 C0 00 00      cmp b, 0
0511   06E4 C6 08 07      je _while11_exit
0512   06E7             _while11_block:
0513   06E7             ;; s1++; 
0514   06E7 FA 07 00      lea d, [bp + 7] ; $s1
0515   06EA 2A            mov b, [d]
0516   06EB FD 79         mov g, b
0517   06ED FD 77         inc b
0518   06EF FA 07 00      lea d, [bp + 7] ; $s1
0519   06F2 FD 43         mov [d], b
0520   06F4 FD 27         mov b, g
0521   06F6             ;; s2++; 
0522   06F6 FA 05 00      lea d, [bp + 5] ; $s2
0523   06F9 2A            mov b, [d]
0524   06FA FD 79         mov g, b
0525   06FC FD 77         inc b
0526   06FE FA 05 00      lea d, [bp + 5] ; $s2
0527   0701 FD 43         mov [d], b
0528   0703 FD 27         mov b, g
0529   0705 0A BE 06      jmp _while11_cond
0530   0708             _while11_exit:
0531   0708             ;; return *s1 - *s2; 
0532   0708 FA 07 00      lea d, [bp + 7] ; $s1
0533   070B 2A            mov b, [d]
0534   070C 74            mov d, b
0535   070D 32            mov bl, [d]
0536   070E A7 00         mov bh, 0
0537   0710             ; START TERMS
0538   0710 D7            push a
0539   0711 11            mov a, b
0540   0712 FA 05 00      lea d, [bp + 5] ; $s2
0541   0715 2A            mov b, [d]
0542   0716 74            mov d, b
0543   0717 32            mov bl, [d]
0544   0718 A7 00         mov bh, 0
0545   071A 60            sub a, b
0546   071B 27            mov b, a
0547   071C E4            pop a
0548   071D             ; END TERMS
0549   071D F9            leave
0550   071E 09            ret
0551   071F             
0552   071F             strcat:
0553   071F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0554   0722             ; $dest_len 
0555   0722             ; $i 
0556   0722 52 04 00      sub sp, 4
0557   0725             ;; dest_len = strlen(dest); 
0558   0725 FA FF FF      lea d, [bp + -1] ; $dest_len
0559   0728 DA            push d
0560   0729 FA 07 00      lea d, [bp + 7] ; $dest
0561   072C 2A            mov b, [d]
0562   072D FD AB         swp b
0563   072F D8            push b
0564   0730 07 D5 07      call strlen
0565   0733 51 02 00      add sp, 2
0566   0736 E7            pop d
0567   0737 FD 43         mov [d], b
0568   0739             ;; for (i = 0; src[i] != 0; i=i+1) { 
0569   0739             _for12_init:
0570   0739 FA FD FF      lea d, [bp + -3] ; $i
0571   073C DA            push d
0572   073D 26 00 00      mov b, $0
0573   0740 E7            pop d
0574   0741 FD 43         mov [d], b
0575   0743             _for12_cond:
0576   0743 FA 05 00      lea d, [bp + 5] ; $src
0577   0746 FD 2A         mov d, [d]
0578   0748 D7            push a
0579   0749 DA            push d
0580   074A FA FD FF      lea d, [bp + -3] ; $i
0581   074D 2A            mov b, [d]
0582   074E E7            pop d
0583   074F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0584   0753 E4            pop a
0585   0754 32            mov bl, [d]
0586   0755 A7 00         mov bh, 0
0587   0757             ; START RELATIONAL
0588   0757 D7            push a
0589   0758 11            mov a, b
0590   0759 26 00 00      mov b, $0
0591   075C B0            cmp a, b
0592   075D FD 72         sneq ; !=
0593   075F E4            pop a
0594   0760             ; END RELATIONAL
0595   0760 C0 00 00      cmp b, 0
0596   0763 C6 AE 07      je _for12_exit
0597   0766             _for12_block:
0598   0766             ;; dest[dest_len + i] = src[i]; 
0599   0766 FA 07 00      lea d, [bp + 7] ; $dest
0600   0769 FD 2A         mov d, [d]
0601   076B D7            push a
0602   076C DA            push d
0603   076D FA FF FF      lea d, [bp + -1] ; $dest_len
0604   0770 2A            mov b, [d]
0605   0771             ; START TERMS
0606   0771 D7            push a
0607   0772 11            mov a, b
0608   0773 FA FD FF      lea d, [bp + -3] ; $i
0609   0776 2A            mov b, [d]
0610   0777 54            add a, b
0611   0778 27            mov b, a
0612   0779 E4            pop a
0613   077A             ; END TERMS
0614   077A E7            pop d
0615   077B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0616   077F E4            pop a
0617   0780 DA            push d
0618   0781 FA 05 00      lea d, [bp + 5] ; $src
0619   0784 FD 2A         mov d, [d]
0620   0786 D7            push a
0621   0787 DA            push d
0622   0788 FA FD FF      lea d, [bp + -3] ; $i
0623   078B 2A            mov b, [d]
0624   078C E7            pop d
0625   078D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0626   0791 E4            pop a
0627   0792 32            mov bl, [d]
0628   0793 A7 00         mov bh, 0
0629   0795 E7            pop d
0630   0796 FD 3E         mov [d], bl
0631   0798             _for12_update:
0632   0798 FA FD FF      lea d, [bp + -3] ; $i
0633   079B DA            push d
0634   079C FA FD FF      lea d, [bp + -3] ; $i
0635   079F 2A            mov b, [d]
0636   07A0             ; START TERMS
0637   07A0 D7            push a
0638   07A1 11            mov a, b
0639   07A2 26 01 00      mov b, $1
0640   07A5 54            add a, b
0641   07A6 27            mov b, a
0642   07A7 E4            pop a
0643   07A8             ; END TERMS
0644   07A8 E7            pop d
0645   07A9 FD 43         mov [d], b
0646   07AB 0A 43 07      jmp _for12_cond
0647   07AE             _for12_exit:
0648   07AE             ;; dest[dest_len + i] = 0; 
0649   07AE FA 07 00      lea d, [bp + 7] ; $dest
0650   07B1 FD 2A         mov d, [d]
0651   07B3 D7            push a
0652   07B4 DA            push d
0653   07B5 FA FF FF      lea d, [bp + -1] ; $dest_len
0654   07B8 2A            mov b, [d]
0655   07B9             ; START TERMS
0656   07B9 D7            push a
0657   07BA 11            mov a, b
0658   07BB FA FD FF      lea d, [bp + -3] ; $i
0659   07BE 2A            mov b, [d]
0660   07BF 54            add a, b
0661   07C0 27            mov b, a
0662   07C1 E4            pop a
0663   07C2             ; END TERMS
0664   07C2 E7            pop d
0665   07C3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0666   07C7 E4            pop a
0667   07C8 DA            push d
0668   07C9 26 00 00      mov b, $0
0669   07CC E7            pop d
0670   07CD FD 3E         mov [d], bl
0671   07CF             ;; return dest; 
0672   07CF FA 07 00      lea d, [bp + 7] ; $dest
0673   07D2 2A            mov b, [d]
0674   07D3 F9            leave
0675   07D4 09            ret
0676   07D5             
0677   07D5             strlen:
0678   07D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0679   07D8             ; $length 
0680   07D8 52 02 00      sub sp, 2
0681   07DB             ;; length = 0; 
0682   07DB FA FF FF      lea d, [bp + -1] ; $length
0683   07DE DA            push d
0684   07DF 26 00 00      mov b, $0
0685   07E2 E7            pop d
0686   07E3 FD 43         mov [d], b
0687   07E5             ;; while (str[length] != 0) { 
0688   07E5             _while13_cond:
0689   07E5 FA 05 00      lea d, [bp + 5] ; $str
0690   07E8 FD 2A         mov d, [d]
0691   07EA D7            push a
0692   07EB DA            push d
0693   07EC FA FF FF      lea d, [bp + -1] ; $length
0694   07EF 2A            mov b, [d]
0695   07F0 E7            pop d
0696   07F1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0697   07F5 E4            pop a
0698   07F6 32            mov bl, [d]
0699   07F7 A7 00         mov bh, 0
0700   07F9             ; START RELATIONAL
0701   07F9 D7            push a
0702   07FA 11            mov a, b
0703   07FB 26 00 00      mov b, $0
0704   07FE B0            cmp a, b
0705   07FF FD 72         sneq ; !=
0706   0801 E4            pop a
0707   0802             ; END RELATIONAL
0708   0802 C0 00 00      cmp b, 0
0709   0805 C6 1A 08      je _while13_exit
0710   0808             _while13_block:
0711   0808             ;; length++; 
0712   0808 FA FF FF      lea d, [bp + -1] ; $length
0713   080B 2A            mov b, [d]
0714   080C FD 79         mov g, b
0715   080E FD 77         inc b
0716   0810 FA FF FF      lea d, [bp + -1] ; $length
0717   0813 FD 43         mov [d], b
0718   0815 FD 27         mov b, g
0719   0817 0A E5 07      jmp _while13_cond
0720   081A             _while13_exit:
0721   081A             ;; return length; 
0722   081A FA FF FF      lea d, [bp + -1] ; $length
0723   081D 2A            mov b, [d]
0724   081E F9            leave
0725   081F 09            ret
0726   0820             
0727   0820             va_arg:
0728   0820 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0729   0823             ; $val 
0730   0823 52 02 00      sub sp, 2
0731   0826             ;; if(size == 1){ 
0732   0826             _if14_cond:
0733   0826 FA 05 00      lea d, [bp + 5] ; $size
0734   0829 2A            mov b, [d]
0735   082A             ; START RELATIONAL
0736   082A D7            push a
0737   082B 11            mov a, b
0738   082C 26 01 00      mov b, $1
0739   082F B0            cmp a, b
0740   0830 FD 71         seq ; ==
0741   0832 E4            pop a
0742   0833             ; END RELATIONAL
0743   0833 C0 00 00      cmp b, 0
0744   0836 C6 52 08      je _if14_else
0745   0839             _if14_true:
0746   0839             ;; val = *(char*)arg->p; 
0747   0839 FA FF FF      lea d, [bp + -1] ; $val
0748   083C DA            push d
0749   083D FA 07 00      lea d, [bp + 7] ; $arg
0750   0840 FD 2A         mov d, [d]
0751   0842 58 00 00      add d, 0
0752   0845 FD 14         clb
0753   0847 2A            mov b, [d]
0754   0848 74            mov d, b
0755   0849 32            mov bl, [d]
0756   084A A7 00         mov bh, 0
0757   084C E7            pop d
0758   084D FD 43         mov [d], b
0759   084F 0A 88 08      jmp _if14_exit
0760   0852             _if14_else:
0761   0852             ;; if(size == 2){ 
0762   0852             _if15_cond:
0763   0852 FA 05 00      lea d, [bp + 5] ; $size
0764   0855 2A            mov b, [d]
0765   0856             ; START RELATIONAL
0766   0856 D7            push a
0767   0857 11            mov a, b
0768   0858 26 02 00      mov b, $2
0769   085B B0            cmp a, b
0770   085C FD 71         seq ; ==
0771   085E E4            pop a
0772   085F             ; END RELATIONAL
0773   085F C0 00 00      cmp b, 0
0774   0862 C6 7C 08      je _if15_else
0775   0865             _if15_true:
0776   0865             ;; val = *(int*)arg->p; 
0777   0865 FA FF FF      lea d, [bp + -1] ; $val
0778   0868 DA            push d
0779   0869 FA 07 00      lea d, [bp + 7] ; $arg
0780   086C FD 2A         mov d, [d]
0781   086E 58 00 00      add d, 0
0782   0871 FD 14         clb
0783   0873 2A            mov b, [d]
0784   0874 74            mov d, b
0785   0875 2A            mov b, [d]
0786   0876 E7            pop d
0787   0877 FD 43         mov [d], b
0788   0879 0A 88 08      jmp _if15_exit
0789   087C             _if15_else:
0790   087C             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0791   087C 26 15 20      mov b, __s0 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0792   087F FD AB         swp b
0793   0881 D8            push b
0794   0882 07 EA 0E      call print
0795   0885 51 02 00      add sp, 2
0796   0888             _if15_exit:
0797   0888             _if14_exit:
0798   0888             ;; arg->p = arg->p + size; 
0799   0888 FA 07 00      lea d, [bp + 7] ; $arg
0800   088B FD 2A         mov d, [d]
0801   088D 58 00 00      add d, 0
0802   0890 FD 14         clb
0803   0892 DA            push d
0804   0893 FA 07 00      lea d, [bp + 7] ; $arg
0805   0896 FD 2A         mov d, [d]
0806   0898 58 00 00      add d, 0
0807   089B FD 14         clb
0808   089D 2A            mov b, [d]
0809   089E             ; START TERMS
0810   089E D7            push a
0811   089F 11            mov a, b
0812   08A0 FA 05 00      lea d, [bp + 5] ; $size
0813   08A3 2A            mov b, [d]
0814   08A4 54            add a, b
0815   08A5 27            mov b, a
0816   08A6 E4            pop a
0817   08A7             ; END TERMS
0818   08A7 E7            pop d
0819   08A8 FD 43         mov [d], b
0820   08AA             ;; return val; 
0821   08AA FA FF FF      lea d, [bp + -1] ; $val
0822   08AD 2A            mov b, [d]
0823   08AE F9            leave
0824   08AF 09            ret
0825   08B0             
0826   08B0             printf:
0827   08B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0828   08B3             ; $p 
0829   08B3             ; $fp 
0830   08B3             ; $i 
0831   08B3 52 06 00      sub sp, 6
0832   08B6             ;; fp = format; 
0833   08B6 FA FD FF      lea d, [bp + -3] ; $fp
0834   08B9 DA            push d
0835   08BA FA 05 00      lea d, [bp + 5] ; $format
0836   08BD 2A            mov b, [d]
0837   08BE E7            pop d
0838   08BF FD 43         mov [d], b
0839   08C1             ;; p = &format; 
0840   08C1 FA FF FF      lea d, [bp + -1] ; $p
0841   08C4 DA            push d
0842   08C5 FA 05 00      lea d, [bp + 5] ; $format
0843   08C8 2D            mov b, d
0844   08C9 E7            pop d
0845   08CA FD 43         mov [d], b
0846   08CC             ;; for(;;){ 
0847   08CC             _for16_init:
0848   08CC             _for16_cond:
0849   08CC             _for16_block:
0850   08CC             ;; if(!*fp) break; 
0851   08CC             _if17_cond:
0852   08CC FA FD FF      lea d, [bp + -3] ; $fp
0853   08CF 2A            mov b, [d]
0854   08D0 74            mov d, b
0855   08D1 32            mov bl, [d]
0856   08D2 A7 00         mov bh, 0
0857   08D4 C0 00 00      cmp b, 0
0858   08D7 FD 71         seq ; !
0859   08D9 C0 00 00      cmp b, 0
0860   08DC C6 E5 08      je _if17_exit
0861   08DF             _if17_true:
0862   08DF             ;; break; 
0863   08DF 0A 2F 0A      jmp _for16_exit ; for break
0864   08E2 0A E5 08      jmp _if17_exit
0865   08E5             _if17_exit:
0866   08E5             ;; if(*fp == '%'){ 
0867   08E5             _if18_cond:
0868   08E5 FA FD FF      lea d, [bp + -3] ; $fp
0869   08E8 2A            mov b, [d]
0870   08E9 74            mov d, b
0871   08EA 32            mov bl, [d]
0872   08EB A7 00         mov bh, 0
0873   08ED             ; START RELATIONAL
0874   08ED D7            push a
0875   08EE 11            mov a, b
0876   08EF 26 25 00      mov b, $25
0877   08F2 B0            cmp a, b
0878   08F3 FD 71         seq ; ==
0879   08F5 E4            pop a
0880   08F6             ; END RELATIONAL
0881   08F6 C0 00 00      cmp b, 0
0882   08F9 C6 0E 0A      je _if18_else
0883   08FC             _if18_true:
0884   08FC             ;; fp++; 
0885   08FC FA FD FF      lea d, [bp + -3] ; $fp
0886   08FF 2A            mov b, [d]
0887   0900 FD 79         mov g, b
0888   0902 FD 77         inc b
0889   0904 FA FD FF      lea d, [bp + -3] ; $fp
0890   0907 FD 43         mov [d], b
0891   0909 FD 27         mov b, g
0892   090B             ;; switch(*fp){ 
0893   090B             _switch19_expr:
0894   090B FA FD FF      lea d, [bp + -3] ; $fp
0895   090E 2A            mov b, [d]
0896   090F 74            mov d, b
0897   0910 32            mov bl, [d]
0898   0911 A7 00         mov bh, 0
0899   0913             _switch19_comparisons:
0900   0913 C1 64         cmp bl, $64
0901   0915 C6 37 09      je _switch19_case0
0902   0918 C1 69         cmp bl, $69
0903   091A C6 37 09      je _switch19_case1
0904   091D C1 75         cmp bl, $75
0905   091F C6 5C 09      je _switch19_case2
0906   0922 C1 78         cmp bl, $78
0907   0924 C6 81 09      je _switch19_case3
0908   0927 C1 63         cmp bl, $63
0909   0929 C6 A6 09      je _switch19_case4
0910   092C C1 73         cmp bl, $73
0911   092E C6 CB 09      je _switch19_case5
0912   0931 0A F0 09      jmp _switch19_default
0913   0934 0A FC 09      jmp _switch19_exit
0914   0937             _switch19_case0:
0915   0937             _switch19_case1:
0916   0937             ;; p = p - 2; 
0917   0937 FA FF FF      lea d, [bp + -1] ; $p
0918   093A DA            push d
0919   093B FA FF FF      lea d, [bp + -1] ; $p
0920   093E 2A            mov b, [d]
0921   093F             ; START TERMS
0922   093F D7            push a
0923   0940 11            mov a, b
0924   0941 26 02 00      mov b, $2
0925   0944 60            sub a, b
0926   0945 27            mov b, a
0927   0946 E4            pop a
0928   0947             ; END TERMS
0929   0947 E7            pop d
0930   0948 FD 43         mov [d], b
0931   094A             ;; prints(*(int*)p); 
0932   094A FA FF FF      lea d, [bp + -1] ; $p
0933   094D 2A            mov b, [d]
0934   094E 74            mov d, b
0935   094F 2A            mov b, [d]
0936   0950 FD AB         swp b
0937   0952 D8            push b
0938   0953 07 C1 0C      call prints
0939   0956 51 02 00      add sp, 2
0940   0959             ;; break; 
0941   0959 0A FC 09      jmp _switch19_exit ; case break
0942   095C             _switch19_case2:
0943   095C             ;; p = p - 2; 
0944   095C FA FF FF      lea d, [bp + -1] ; $p
0945   095F DA            push d
0946   0960 FA FF FF      lea d, [bp + -1] ; $p
0947   0963 2A            mov b, [d]
0948   0964             ; START TERMS
0949   0964 D7            push a
0950   0965 11            mov a, b
0951   0966 26 02 00      mov b, $2
0952   0969 60            sub a, b
0953   096A 27            mov b, a
0954   096B E4            pop a
0955   096C             ; END TERMS
0956   096C E7            pop d
0957   096D FD 43         mov [d], b
0958   096F             ;; printu(*(unsigned int*)p); 
0959   096F FA FF FF      lea d, [bp + -1] ; $p
0960   0972 2A            mov b, [d]
0961   0973 74            mov d, b
0962   0974 2A            mov b, [d]
0963   0975 FD AB         swp b
0964   0977 D8            push b
0965   0978 07 B6 0D      call printu
0966   097B 51 02 00      add sp, 2
0967   097E             ;; break; 
0968   097E 0A FC 09      jmp _switch19_exit ; case break
0969   0981             _switch19_case3:
0970   0981             ;; p = p - 2; 
0971   0981 FA FF FF      lea d, [bp + -1] ; $p
0972   0984 DA            push d
0973   0985 FA FF FF      lea d, [bp + -1] ; $p
0974   0988 2A            mov b, [d]
0975   0989             ; START TERMS
0976   0989 D7            push a
0977   098A 11            mov a, b
0978   098B 26 02 00      mov b, $2
0979   098E 60            sub a, b
0980   098F 27            mov b, a
0981   0990 E4            pop a
0982   0991             ; END TERMS
0983   0991 E7            pop d
0984   0992 FD 43         mov [d], b
0985   0994             ;; printx16(*(unsigned int*)p); 
0986   0994 FA FF FF      lea d, [bp + -1] ; $p
0987   0997 2A            mov b, [d]
0988   0998 74            mov d, b
0989   0999 2A            mov b, [d]
0990   099A FD AB         swp b
0991   099C D8            push b
0992   099D 07 31 0A      call printx16
0993   09A0 51 02 00      add sp, 2
0994   09A3             ;; break; 
0995   09A3 0A FC 09      jmp _switch19_exit ; case break
0996   09A6             _switch19_case4:
0997   09A6             ;; p = p - 2; 
0998   09A6 FA FF FF      lea d, [bp + -1] ; $p
0999   09A9 DA            push d
1000   09AA FA FF FF      lea d, [bp + -1] ; $p
1001   09AD 2A            mov b, [d]
1002   09AE             ; START TERMS
1003   09AE D7            push a
1004   09AF 11            mov a, b
1005   09B0 26 02 00      mov b, $2
1006   09B3 60            sub a, b
1007   09B4 27            mov b, a
1008   09B5 E4            pop a
1009   09B6             ; END TERMS
1010   09B6 E7            pop d
1011   09B7 FD 43         mov [d], b
1012   09B9             ;; putchar(*(char*)p); 
1013   09B9 FA FF FF      lea d, [bp + -1] ; $p
1014   09BC 2A            mov b, [d]
1015   09BD 74            mov d, b
1016   09BE 32            mov bl, [d]
1017   09BF A7 00         mov bh, 0
1018   09C1 DD            push bl
1019   09C2 07 A2 0E      call putchar
1020   09C5 51 01 00      add sp, 1
1021   09C8             ;; break; 
1022   09C8 0A FC 09      jmp _switch19_exit ; case break
1023   09CB             _switch19_case5:
1024   09CB             ;; p = p - 2; 
1025   09CB FA FF FF      lea d, [bp + -1] ; $p
1026   09CE DA            push d
1027   09CF FA FF FF      lea d, [bp + -1] ; $p
1028   09D2 2A            mov b, [d]
1029   09D3             ; START TERMS
1030   09D3 D7            push a
1031   09D4 11            mov a, b
1032   09D5 26 02 00      mov b, $2
1033   09D8 60            sub a, b
1034   09D9 27            mov b, a
1035   09DA E4            pop a
1036   09DB             ; END TERMS
1037   09DB E7            pop d
1038   09DC FD 43         mov [d], b
1039   09DE             ;; print(*(char**)p); 
1040   09DE FA FF FF      lea d, [bp + -1] ; $p
1041   09E1 2A            mov b, [d]
1042   09E2 74            mov d, b
1043   09E3 2A            mov b, [d]
1044   09E4 FD AB         swp b
1045   09E6 D8            push b
1046   09E7 07 EA 0E      call print
1047   09EA 51 02 00      add sp, 2
1048   09ED             ;; break; 
1049   09ED 0A FC 09      jmp _switch19_exit ; case break
1050   09F0             _switch19_default:
1051   09F0             ;; print("Error: Unknown argument type.\n"); 
1052   09F0 26 59 20      mov b, __s1 ; "Error: Unknown argument type.\n"
1053   09F3 FD AB         swp b
1054   09F5 D8            push b
1055   09F6 07 EA 0E      call print
1056   09F9 51 02 00      add sp, 2
1057   09FC             _switch19_exit:
1058   09FC             ;; fp++; 
1059   09FC FA FD FF      lea d, [bp + -3] ; $fp
1060   09FF 2A            mov b, [d]
1061   0A00 FD 79         mov g, b
1062   0A02 FD 77         inc b
1063   0A04 FA FD FF      lea d, [bp + -3] ; $fp
1064   0A07 FD 43         mov [d], b
1065   0A09 FD 27         mov b, g
1066   0A0B 0A 2C 0A      jmp _if18_exit
1067   0A0E             _if18_else:
1068   0A0E             ;; putchar(*fp); 
1069   0A0E FA FD FF      lea d, [bp + -3] ; $fp
1070   0A11 2A            mov b, [d]
1071   0A12 74            mov d, b
1072   0A13 32            mov bl, [d]
1073   0A14 A7 00         mov bh, 0
1074   0A16 DD            push bl
1075   0A17 07 A2 0E      call putchar
1076   0A1A 51 01 00      add sp, 1
1077   0A1D             ;; fp++; 
1078   0A1D FA FD FF      lea d, [bp + -3] ; $fp
1079   0A20 2A            mov b, [d]
1080   0A21 FD 79         mov g, b
1081   0A23 FD 77         inc b
1082   0A25 FA FD FF      lea d, [bp + -3] ; $fp
1083   0A28 FD 43         mov [d], b
1084   0A2A FD 27         mov b, g
1085   0A2C             _if18_exit:
1086   0A2C             _for16_update:
1087   0A2C 0A CC 08      jmp _for16_cond
1088   0A2F             _for16_exit:
1089   0A2F F9            leave
1090   0A30 09            ret
1091   0A31             
1092   0A31             printx16:
1093   0A31 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1094   0A34             
1095   0A34             ; --- BEGIN INLINE ASM BLOCK
1096   0A34 FA 05 00      lea d, [bp + 5] ; $hex
1097   0A37 2A            mov b, [d]
1098   0A38 07 6B 12      call print_u16x
1099   0A3B             ; --- END INLINE ASM BLOCK
1100   0A3B             
1101   0A3B F9            leave
1102   0A3C 09            ret
1103   0A3D             
1104   0A3D             printx8:
1105   0A3D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1106   0A40             
1107   0A40             ; --- BEGIN INLINE ASM BLOCK
1108   0A40 FA 05 00      lea d, [bp + 5] ; $hex
1109   0A43 32            mov bl, [d]
1110   0A44 07 AF 12      call print_u8x
1111   0A47             ; --- END INLINE ASM BLOCK
1112   0A47             
1113   0A47 F9            leave
1114   0A48 09            ret
1115   0A49             
1116   0A49             hex_to_int:
1117   0A49 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1118   0A4C             ; $value 
1119   0A4C 10 00 00      mov a, $0
1120   0A4F 45 FF FF      mov [bp + -1], a
1121   0A52             ; $i 
1122   0A52             ; $hex_char 
1123   0A52             ; $len 
1124   0A52 52 07 00      sub sp, 7
1125   0A55             ;; len = strlen(hex_string); 
1126   0A55 FA FA FF      lea d, [bp + -6] ; $len
1127   0A58 DA            push d
1128   0A59 FA 05 00      lea d, [bp + 5] ; $hex_string
1129   0A5C 2A            mov b, [d]
1130   0A5D FD AB         swp b
1131   0A5F D8            push b
1132   0A60 07 D5 07      call strlen
1133   0A63 51 02 00      add sp, 2
1134   0A66 E7            pop d
1135   0A67 FD 43         mov [d], b
1136   0A69             ;; for (i = 0; i < len; i++) { 
1137   0A69             _for20_init:
1138   0A69 FA FD FF      lea d, [bp + -3] ; $i
1139   0A6C DA            push d
1140   0A6D 26 00 00      mov b, $0
1141   0A70 E7            pop d
1142   0A71 FD 43         mov [d], b
1143   0A73             _for20_cond:
1144   0A73 FA FD FF      lea d, [bp + -3] ; $i
1145   0A76 2A            mov b, [d]
1146   0A77             ; START RELATIONAL
1147   0A77 D7            push a
1148   0A78 11            mov a, b
1149   0A79 FA FA FF      lea d, [bp + -6] ; $len
1150   0A7C 2A            mov b, [d]
1151   0A7D B0            cmp a, b
1152   0A7E FD 73         slt ; < 
1153   0A80 E4            pop a
1154   0A81             ; END RELATIONAL
1155   0A81 C0 00 00      cmp b, 0
1156   0A84 C6 89 0B      je _for20_exit
1157   0A87             _for20_block:
1158   0A87             ;; hex_char = hex_string[i]; 
1159   0A87 FA FC FF      lea d, [bp + -4] ; $hex_char
1160   0A8A DA            push d
1161   0A8B FA 05 00      lea d, [bp + 5] ; $hex_string
1162   0A8E FD 2A         mov d, [d]
1163   0A90 D7            push a
1164   0A91 DA            push d
1165   0A92 FA FD FF      lea d, [bp + -3] ; $i
1166   0A95 2A            mov b, [d]
1167   0A96 E7            pop d
1168   0A97 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1169   0A9B E4            pop a
1170   0A9C 32            mov bl, [d]
1171   0A9D A7 00         mov bh, 0
1172   0A9F E7            pop d
1173   0AA0 FD 3E         mov [d], bl
1174   0AA2             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1175   0AA2             _if21_cond:
1176   0AA2 FA FC FF      lea d, [bp + -4] ; $hex_char
1177   0AA5 32            mov bl, [d]
1178   0AA6 A7 00         mov bh, 0
1179   0AA8             ; START RELATIONAL
1180   0AA8 D7            push a
1181   0AA9 11            mov a, b
1182   0AAA 26 61 00      mov b, $61
1183   0AAD B0            cmp a, b
1184   0AAE FD 80         sge ; >=
1185   0AB0 E4            pop a
1186   0AB1             ; END RELATIONAL
1187   0AB1 D7            push a
1188   0AB2 11            mov a, b
1189   0AB3 FA FC FF      lea d, [bp + -4] ; $hex_char
1190   0AB6 32            mov bl, [d]
1191   0AB7 A7 00         mov bh, 0
1192   0AB9             ; START RELATIONAL
1193   0AB9 D7            push a
1194   0ABA 11            mov a, b
1195   0ABB 26 66 00      mov b, $66
1196   0ABE B0            cmp a, b
1197   0ABF FD 74         sle ; <=
1198   0AC1 E4            pop a
1199   0AC2             ; END RELATIONAL
1200   0AC2 FD A7         sand a, b ; &&
1201   0AC4 E4            pop a
1202   0AC5 C0 00 00      cmp b, 0
1203   0AC8 C6 F9 0A      je _if21_else
1204   0ACB             _if21_true:
1205   0ACB             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1206   0ACB FA FF FF      lea d, [bp + -1] ; $value
1207   0ACE DA            push d
1208   0ACF FA FF FF      lea d, [bp + -1] ; $value
1209   0AD2 2A            mov b, [d]
1210   0AD3             ; START FACTORS
1211   0AD3 D7            push a
1212   0AD4 11            mov a, b
1213   0AD5 26 10 00      mov b, $10
1214   0AD8 AC            mul a, b ; *
1215   0AD9 11            mov a, b
1216   0ADA 27            mov b, a
1217   0ADB E4            pop a
1218   0ADC             ; END FACTORS
1219   0ADC             ; START TERMS
1220   0ADC D7            push a
1221   0ADD 11            mov a, b
1222   0ADE FA FC FF      lea d, [bp + -4] ; $hex_char
1223   0AE1 32            mov bl, [d]
1224   0AE2 A7 00         mov bh, 0
1225   0AE4             ; START TERMS
1226   0AE4 D7            push a
1227   0AE5 11            mov a, b
1228   0AE6 26 61 00      mov b, $61
1229   0AE9 60            sub a, b
1230   0AEA 26 0A 00      mov b, $a
1231   0AED 54            add a, b
1232   0AEE 27            mov b, a
1233   0AEF E4            pop a
1234   0AF0             ; END TERMS
1235   0AF0 54            add a, b
1236   0AF1 27            mov b, a
1237   0AF2 E4            pop a
1238   0AF3             ; END TERMS
1239   0AF3 E7            pop d
1240   0AF4 FD 43         mov [d], b
1241   0AF6 0A 77 0B      jmp _if21_exit
1242   0AF9             _if21_else:
1243   0AF9             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1244   0AF9             _if22_cond:
1245   0AF9 FA FC FF      lea d, [bp + -4] ; $hex_char
1246   0AFC 32            mov bl, [d]
1247   0AFD A7 00         mov bh, 0
1248   0AFF             ; START RELATIONAL
1249   0AFF D7            push a
1250   0B00 11            mov a, b
1251   0B01 26 41 00      mov b, $41
1252   0B04 B0            cmp a, b
1253   0B05 FD 80         sge ; >=
1254   0B07 E4            pop a
1255   0B08             ; END RELATIONAL
1256   0B08 D7            push a
1257   0B09 11            mov a, b
1258   0B0A FA FC FF      lea d, [bp + -4] ; $hex_char
1259   0B0D 32            mov bl, [d]
1260   0B0E A7 00         mov bh, 0
1261   0B10             ; START RELATIONAL
1262   0B10 D7            push a
1263   0B11 11            mov a, b
1264   0B12 26 46 00      mov b, $46
1265   0B15 B0            cmp a, b
1266   0B16 FD 74         sle ; <=
1267   0B18 E4            pop a
1268   0B19             ; END RELATIONAL
1269   0B19 FD A7         sand a, b ; &&
1270   0B1B E4            pop a
1271   0B1C C0 00 00      cmp b, 0
1272   0B1F C6 50 0B      je _if22_else
1273   0B22             _if22_true:
1274   0B22             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1275   0B22 FA FF FF      lea d, [bp + -1] ; $value
1276   0B25 DA            push d
1277   0B26 FA FF FF      lea d, [bp + -1] ; $value
1278   0B29 2A            mov b, [d]
1279   0B2A             ; START FACTORS
1280   0B2A D7            push a
1281   0B2B 11            mov a, b
1282   0B2C 26 10 00      mov b, $10
1283   0B2F AC            mul a, b ; *
1284   0B30 11            mov a, b
1285   0B31 27            mov b, a
1286   0B32 E4            pop a
1287   0B33             ; END FACTORS
1288   0B33             ; START TERMS
1289   0B33 D7            push a
1290   0B34 11            mov a, b
1291   0B35 FA FC FF      lea d, [bp + -4] ; $hex_char
1292   0B38 32            mov bl, [d]
1293   0B39 A7 00         mov bh, 0
1294   0B3B             ; START TERMS
1295   0B3B D7            push a
1296   0B3C 11            mov a, b
1297   0B3D 26 41 00      mov b, $41
1298   0B40 60            sub a, b
1299   0B41 26 0A 00      mov b, $a
1300   0B44 54            add a, b
1301   0B45 27            mov b, a
1302   0B46 E4            pop a
1303   0B47             ; END TERMS
1304   0B47 54            add a, b
1305   0B48 27            mov b, a
1306   0B49 E4            pop a
1307   0B4A             ; END TERMS
1308   0B4A E7            pop d
1309   0B4B FD 43         mov [d], b
1310   0B4D 0A 77 0B      jmp _if22_exit
1311   0B50             _if22_else:
1312   0B50             ;; value = (value * 16) + (hex_char - '0'); 
1313   0B50 FA FF FF      lea d, [bp + -1] ; $value
1314   0B53 DA            push d
1315   0B54 FA FF FF      lea d, [bp + -1] ; $value
1316   0B57 2A            mov b, [d]
1317   0B58             ; START FACTORS
1318   0B58 D7            push a
1319   0B59 11            mov a, b
1320   0B5A 26 10 00      mov b, $10
1321   0B5D AC            mul a, b ; *
1322   0B5E 11            mov a, b
1323   0B5F 27            mov b, a
1324   0B60 E4            pop a
1325   0B61             ; END FACTORS
1326   0B61             ; START TERMS
1327   0B61 D7            push a
1328   0B62 11            mov a, b
1329   0B63 FA FC FF      lea d, [bp + -4] ; $hex_char
1330   0B66 32            mov bl, [d]
1331   0B67 A7 00         mov bh, 0
1332   0B69             ; START TERMS
1333   0B69 D7            push a
1334   0B6A 11            mov a, b
1335   0B6B 26 30 00      mov b, $30
1336   0B6E 60            sub a, b
1337   0B6F 27            mov b, a
1338   0B70 E4            pop a
1339   0B71             ; END TERMS
1340   0B71 54            add a, b
1341   0B72 27            mov b, a
1342   0B73 E4            pop a
1343   0B74             ; END TERMS
1344   0B74 E7            pop d
1345   0B75 FD 43         mov [d], b
1346   0B77             _if22_exit:
1347   0B77             _if21_exit:
1348   0B77             _for20_update:
1349   0B77 FA FD FF      lea d, [bp + -3] ; $i
1350   0B7A 2A            mov b, [d]
1351   0B7B FD 79         mov g, b
1352   0B7D FD 77         inc b
1353   0B7F FA FD FF      lea d, [bp + -3] ; $i
1354   0B82 FD 43         mov [d], b
1355   0B84 FD 27         mov b, g
1356   0B86 0A 73 0A      jmp _for20_cond
1357   0B89             _for20_exit:
1358   0B89             ;; return value; 
1359   0B89 FA FF FF      lea d, [bp + -1] ; $value
1360   0B8C 2A            mov b, [d]
1361   0B8D F9            leave
1362   0B8E 09            ret
1363   0B8F             
1364   0B8F             atoi:
1365   0B8F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1366   0B92             ; $result 
1367   0B92 10 00 00      mov a, $0
1368   0B95 45 FF FF      mov [bp + -1], a
1369   0B98             ; $sign 
1370   0B98 10 01 00      mov a, $1
1371   0B9B 45 FD FF      mov [bp + -3], a
1372   0B9E 52 04 00      sub sp, 4
1373   0BA1             ;; while (*str == ' ') str++; 
1374   0BA1             _while23_cond:
1375   0BA1 FA 05 00      lea d, [bp + 5] ; $str
1376   0BA4 2A            mov b, [d]
1377   0BA5 74            mov d, b
1378   0BA6 32            mov bl, [d]
1379   0BA7 A7 00         mov bh, 0
1380   0BA9             ; START RELATIONAL
1381   0BA9 D7            push a
1382   0BAA 11            mov a, b
1383   0BAB 26 20 00      mov b, $20
1384   0BAE B0            cmp a, b
1385   0BAF FD 71         seq ; ==
1386   0BB1 E4            pop a
1387   0BB2             ; END RELATIONAL
1388   0BB2 C0 00 00      cmp b, 0
1389   0BB5 C6 CA 0B      je _while23_exit
1390   0BB8             _while23_block:
1391   0BB8             ;; str++; 
1392   0BB8 FA 05 00      lea d, [bp + 5] ; $str
1393   0BBB 2A            mov b, [d]
1394   0BBC FD 79         mov g, b
1395   0BBE FD 77         inc b
1396   0BC0 FA 05 00      lea d, [bp + 5] ; $str
1397   0BC3 FD 43         mov [d], b
1398   0BC5 FD 27         mov b, g
1399   0BC7 0A A1 0B      jmp _while23_cond
1400   0BCA             _while23_exit:
1401   0BCA             ;; if (*str == '-' || *str == '+') { 
1402   0BCA             _if24_cond:
1403   0BCA FA 05 00      lea d, [bp + 5] ; $str
1404   0BCD 2A            mov b, [d]
1405   0BCE 74            mov d, b
1406   0BCF 32            mov bl, [d]
1407   0BD0 A7 00         mov bh, 0
1408   0BD2             ; START RELATIONAL
1409   0BD2 D7            push a
1410   0BD3 11            mov a, b
1411   0BD4 26 2D 00      mov b, $2d
1412   0BD7 B0            cmp a, b
1413   0BD8 FD 71         seq ; ==
1414   0BDA E4            pop a
1415   0BDB             ; END RELATIONAL
1416   0BDB D7            push a
1417   0BDC 11            mov a, b
1418   0BDD FA 05 00      lea d, [bp + 5] ; $str
1419   0BE0 2A            mov b, [d]
1420   0BE1 74            mov d, b
1421   0BE2 32            mov bl, [d]
1422   0BE3 A7 00         mov bh, 0
1423   0BE5             ; START RELATIONAL
1424   0BE5 D7            push a
1425   0BE6 11            mov a, b
1426   0BE7 26 2B 00      mov b, $2b
1427   0BEA B0            cmp a, b
1428   0BEB FD 71         seq ; ==
1429   0BED E4            pop a
1430   0BEE             ; END RELATIONAL
1431   0BEE FD A8         sor a, b ; ||
1432   0BF0 E4            pop a
1433   0BF1 C0 00 00      cmp b, 0
1434   0BF4 C6 2F 0C      je _if24_exit
1435   0BF7             _if24_true:
1436   0BF7             ;; if (*str == '-') sign = -1; 
1437   0BF7             _if25_cond:
1438   0BF7 FA 05 00      lea d, [bp + 5] ; $str
1439   0BFA 2A            mov b, [d]
1440   0BFB 74            mov d, b
1441   0BFC 32            mov bl, [d]
1442   0BFD A7 00         mov bh, 0
1443   0BFF             ; START RELATIONAL
1444   0BFF D7            push a
1445   0C00 11            mov a, b
1446   0C01 26 2D 00      mov b, $2d
1447   0C04 B0            cmp a, b
1448   0C05 FD 71         seq ; ==
1449   0C07 E4            pop a
1450   0C08             ; END RELATIONAL
1451   0C08 C0 00 00      cmp b, 0
1452   0C0B C6 1D 0C      je _if25_exit
1453   0C0E             _if25_true:
1454   0C0E             ;; sign = -1; 
1455   0C0E FA FD FF      lea d, [bp + -3] ; $sign
1456   0C11 DA            push d
1457   0C12 26 01 00      mov b, $1
1458   0C15 FD 97         neg b
1459   0C17 E7            pop d
1460   0C18 FD 43         mov [d], b
1461   0C1A 0A 1D 0C      jmp _if25_exit
1462   0C1D             _if25_exit:
1463   0C1D             ;; str++; 
1464   0C1D FA 05 00      lea d, [bp + 5] ; $str
1465   0C20 2A            mov b, [d]
1466   0C21 FD 79         mov g, b
1467   0C23 FD 77         inc b
1468   0C25 FA 05 00      lea d, [bp + 5] ; $str
1469   0C28 FD 43         mov [d], b
1470   0C2A FD 27         mov b, g
1471   0C2C 0A 2F 0C      jmp _if24_exit
1472   0C2F             _if24_exit:
1473   0C2F             ;; while (*str >= '0' && *str <= '9') { 
1474   0C2F             _while26_cond:
1475   0C2F FA 05 00      lea d, [bp + 5] ; $str
1476   0C32 2A            mov b, [d]
1477   0C33 74            mov d, b
1478   0C34 32            mov bl, [d]
1479   0C35 A7 00         mov bh, 0
1480   0C37             ; START RELATIONAL
1481   0C37 D7            push a
1482   0C38 11            mov a, b
1483   0C39 26 30 00      mov b, $30
1484   0C3C B0            cmp a, b
1485   0C3D FD 80         sge ; >=
1486   0C3F E4            pop a
1487   0C40             ; END RELATIONAL
1488   0C40 D7            push a
1489   0C41 11            mov a, b
1490   0C42 FA 05 00      lea d, [bp + 5] ; $str
1491   0C45 2A            mov b, [d]
1492   0C46 74            mov d, b
1493   0C47 32            mov bl, [d]
1494   0C48 A7 00         mov bh, 0
1495   0C4A             ; START RELATIONAL
1496   0C4A D7            push a
1497   0C4B 11            mov a, b
1498   0C4C 26 39 00      mov b, $39
1499   0C4F B0            cmp a, b
1500   0C50 FD 74         sle ; <=
1501   0C52 E4            pop a
1502   0C53             ; END RELATIONAL
1503   0C53 FD A7         sand a, b ; &&
1504   0C55 E4            pop a
1505   0C56 C0 00 00      cmp b, 0
1506   0C59 C6 97 0C      je _while26_exit
1507   0C5C             _while26_block:
1508   0C5C             ;; result = result * 10 + (*str - '0'); 
1509   0C5C FA FF FF      lea d, [bp + -1] ; $result
1510   0C5F DA            push d
1511   0C60 FA FF FF      lea d, [bp + -1] ; $result
1512   0C63 2A            mov b, [d]
1513   0C64             ; START FACTORS
1514   0C64 D7            push a
1515   0C65 11            mov a, b
1516   0C66 26 0A 00      mov b, $a
1517   0C69 AC            mul a, b ; *
1518   0C6A 11            mov a, b
1519   0C6B 27            mov b, a
1520   0C6C E4            pop a
1521   0C6D             ; END FACTORS
1522   0C6D             ; START TERMS
1523   0C6D D7            push a
1524   0C6E 11            mov a, b
1525   0C6F FA 05 00      lea d, [bp + 5] ; $str
1526   0C72 2A            mov b, [d]
1527   0C73 74            mov d, b
1528   0C74 32            mov bl, [d]
1529   0C75 A7 00         mov bh, 0
1530   0C77             ; START TERMS
1531   0C77 D7            push a
1532   0C78 11            mov a, b
1533   0C79 26 30 00      mov b, $30
1534   0C7C 60            sub a, b
1535   0C7D 27            mov b, a
1536   0C7E E4            pop a
1537   0C7F             ; END TERMS
1538   0C7F 54            add a, b
1539   0C80 27            mov b, a
1540   0C81 E4            pop a
1541   0C82             ; END TERMS
1542   0C82 E7            pop d
1543   0C83 FD 43         mov [d], b
1544   0C85             ;; str++; 
1545   0C85 FA 05 00      lea d, [bp + 5] ; $str
1546   0C88 2A            mov b, [d]
1547   0C89 FD 79         mov g, b
1548   0C8B FD 77         inc b
1549   0C8D FA 05 00      lea d, [bp + 5] ; $str
1550   0C90 FD 43         mov [d], b
1551   0C92 FD 27         mov b, g
1552   0C94 0A 2F 0C      jmp _while26_cond
1553   0C97             _while26_exit:
1554   0C97             ;; return sign * result; 
1555   0C97 FA FD FF      lea d, [bp + -3] ; $sign
1556   0C9A 2A            mov b, [d]
1557   0C9B             ; START FACTORS
1558   0C9B D7            push a
1559   0C9C 11            mov a, b
1560   0C9D FA FF FF      lea d, [bp + -1] ; $result
1561   0CA0 2A            mov b, [d]
1562   0CA1 AC            mul a, b ; *
1563   0CA2 11            mov a, b
1564   0CA3 27            mov b, a
1565   0CA4 E4            pop a
1566   0CA5             ; END FACTORS
1567   0CA5 F9            leave
1568   0CA6 09            ret
1569   0CA7             
1570   0CA7             gets:
1571   0CA7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1572   0CAA             
1573   0CAA             ; --- BEGIN INLINE ASM BLOCK
1574   0CAA FA 05 00      lea d, [bp + 5] ; $s
1575   0CAD 15            mov a, [d]
1576   0CAE 3C            mov d, a
1577   0CAF 07 D0 10      call _gets
1578   0CB2             ; --- END INLINE ASM BLOCK
1579   0CB2             
1580   0CB2             ;; return strlen(s); 
1581   0CB2 FA 05 00      lea d, [bp + 5] ; $s
1582   0CB5 2A            mov b, [d]
1583   0CB6 FD AB         swp b
1584   0CB8 D8            push b
1585   0CB9 07 D5 07      call strlen
1586   0CBC 51 02 00      add sp, 2
1587   0CBF F9            leave
1588   0CC0 09            ret
1589   0CC1             
1590   0CC1             prints:
1591   0CC1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1592   0CC4             ; $digits 
1593   0CC4             ; $i 
1594   0CC4 10 00 00      mov a, $0
1595   0CC7 45 FA FF      mov [bp + -6], a
1596   0CCA 52 07 00      sub sp, 7
1597   0CCD             ;; if (num < 0) { 
1598   0CCD             _if27_cond:
1599   0CCD FA 05 00      lea d, [bp + 5] ; $num
1600   0CD0 2A            mov b, [d]
1601   0CD1             ; START RELATIONAL
1602   0CD1 D7            push a
1603   0CD2 11            mov a, b
1604   0CD3 26 00 00      mov b, $0
1605   0CD6 B0            cmp a, b
1606   0CD7 FD 73         slt ; < 
1607   0CD9 E4            pop a
1608   0CDA             ; END RELATIONAL
1609   0CDA C0 00 00      cmp b, 0
1610   0CDD C6 FA 0C      je _if27_else
1611   0CE0             _if27_true:
1612   0CE0             ;; putchar('-'); 
1613   0CE0 26 2D 00      mov b, $2d
1614   0CE3 DD            push bl
1615   0CE4 07 A2 0E      call putchar
1616   0CE7 51 01 00      add sp, 1
1617   0CEA             ;; num = -num; 
1618   0CEA FA 05 00      lea d, [bp + 5] ; $num
1619   0CED DA            push d
1620   0CEE FA 05 00      lea d, [bp + 5] ; $num
1621   0CF1 2A            mov b, [d]
1622   0CF2 FD 97         neg b
1623   0CF4 E7            pop d
1624   0CF5 FD 43         mov [d], b
1625   0CF7 0A 1C 0D      jmp _if27_exit
1626   0CFA             _if27_else:
1627   0CFA             ;; if (num == 0) { 
1628   0CFA             _if28_cond:
1629   0CFA FA 05 00      lea d, [bp + 5] ; $num
1630   0CFD 2A            mov b, [d]
1631   0CFE             ; START RELATIONAL
1632   0CFE D7            push a
1633   0CFF 11            mov a, b
1634   0D00 26 00 00      mov b, $0
1635   0D03 B0            cmp a, b
1636   0D04 FD 71         seq ; ==
1637   0D06 E4            pop a
1638   0D07             ; END RELATIONAL
1639   0D07 C0 00 00      cmp b, 0
1640   0D0A C6 1C 0D      je _if28_exit
1641   0D0D             _if28_true:
1642   0D0D             ;; putchar('0'); 
1643   0D0D 26 30 00      mov b, $30
1644   0D10 DD            push bl
1645   0D11 07 A2 0E      call putchar
1646   0D14 51 01 00      add sp, 1
1647   0D17             ;; return; 
1648   0D17 F9            leave
1649   0D18 09            ret
1650   0D19 0A 1C 0D      jmp _if28_exit
1651   0D1C             _if28_exit:
1652   0D1C             _if27_exit:
1653   0D1C             ;; while (num > 0) { 
1654   0D1C             _while29_cond:
1655   0D1C FA 05 00      lea d, [bp + 5] ; $num
1656   0D1F 2A            mov b, [d]
1657   0D20             ; START RELATIONAL
1658   0D20 D7            push a
1659   0D21 11            mov a, b
1660   0D22 26 00 00      mov b, $0
1661   0D25 B0            cmp a, b
1662   0D26 FD 7F         sgt ; >
1663   0D28 E4            pop a
1664   0D29             ; END RELATIONAL
1665   0D29 C0 00 00      cmp b, 0
1666   0D2C C6 79 0D      je _while29_exit
1667   0D2F             _while29_block:
1668   0D2F             ;; digits[i] = '0' + (num % 10); 
1669   0D2F FA FC FF      lea d, [bp + -4] ; $digits
1670   0D32 D7            push a
1671   0D33 DA            push d
1672   0D34 FA FA FF      lea d, [bp + -6] ; $i
1673   0D37 2A            mov b, [d]
1674   0D38 E7            pop d
1675   0D39 5A            add d, b
1676   0D3A E4            pop a
1677   0D3B DA            push d
1678   0D3C 26 30 00      mov b, $30
1679   0D3F             ; START TERMS
1680   0D3F D7            push a
1681   0D40 11            mov a, b
1682   0D41 FA 05 00      lea d, [bp + 5] ; $num
1683   0D44 2A            mov b, [d]
1684   0D45             ; START FACTORS
1685   0D45 D7            push a
1686   0D46 11            mov a, b
1687   0D47 26 0A 00      mov b, $a
1688   0D4A AE            div a, b ; 
1689   0D4B 11            mov a, b
1690   0D4C 27            mov b, a
1691   0D4D E4            pop a
1692   0D4E             ; END FACTORS
1693   0D4E 54            add a, b
1694   0D4F 27            mov b, a
1695   0D50 E4            pop a
1696   0D51             ; END TERMS
1697   0D51 E7            pop d
1698   0D52 FD 3E         mov [d], bl
1699   0D54             ;; num = num / 10; 
1700   0D54 FA 05 00      lea d, [bp + 5] ; $num
1701   0D57 DA            push d
1702   0D58 FA 05 00      lea d, [bp + 5] ; $num
1703   0D5B 2A            mov b, [d]
1704   0D5C             ; START FACTORS
1705   0D5C D7            push a
1706   0D5D 11            mov a, b
1707   0D5E 26 0A 00      mov b, $a
1708   0D61 AE            div a, b
1709   0D62 27            mov b, a
1710   0D63 E4            pop a
1711   0D64             ; END FACTORS
1712   0D64 E7            pop d
1713   0D65 FD 43         mov [d], b
1714   0D67             ;; i++; 
1715   0D67 FA FA FF      lea d, [bp + -6] ; $i
1716   0D6A 2A            mov b, [d]
1717   0D6B FD 79         mov g, b
1718   0D6D FD 77         inc b
1719   0D6F FA FA FF      lea d, [bp + -6] ; $i
1720   0D72 FD 43         mov [d], b
1721   0D74 FD 27         mov b, g
1722   0D76 0A 1C 0D      jmp _while29_cond
1723   0D79             _while29_exit:
1724   0D79             ;; while (i > 0) { 
1725   0D79             _while30_cond:
1726   0D79 FA FA FF      lea d, [bp + -6] ; $i
1727   0D7C 2A            mov b, [d]
1728   0D7D             ; START RELATIONAL
1729   0D7D D7            push a
1730   0D7E 11            mov a, b
1731   0D7F 26 00 00      mov b, $0
1732   0D82 B0            cmp a, b
1733   0D83 FD 7F         sgt ; >
1734   0D85 E4            pop a
1735   0D86             ; END RELATIONAL
1736   0D86 C0 00 00      cmp b, 0
1737   0D89 C6 B4 0D      je _while30_exit
1738   0D8C             _while30_block:
1739   0D8C             ;; i--; 
1740   0D8C FA FA FF      lea d, [bp + -6] ; $i
1741   0D8F 2A            mov b, [d]
1742   0D90 FD 79         mov g, b
1743   0D92 FD 7D         dec b
1744   0D94 FA FA FF      lea d, [bp + -6] ; $i
1745   0D97 FD 43         mov [d], b
1746   0D99 FD 27         mov b, g
1747   0D9B             ;; putchar(digits[i]); 
1748   0D9B FA FC FF      lea d, [bp + -4] ; $digits
1749   0D9E D7            push a
1750   0D9F DA            push d
1751   0DA0 FA FA FF      lea d, [bp + -6] ; $i
1752   0DA3 2A            mov b, [d]
1753   0DA4 E7            pop d
1754   0DA5 5A            add d, b
1755   0DA6 E4            pop a
1756   0DA7 32            mov bl, [d]
1757   0DA8 A7 00         mov bh, 0
1758   0DAA DD            push bl
1759   0DAB 07 A2 0E      call putchar
1760   0DAE 51 01 00      add sp, 1
1761   0DB1 0A 79 0D      jmp _while30_cond
1762   0DB4             _while30_exit:
1763   0DB4 F9            leave
1764   0DB5 09            ret
1765   0DB6             
1766   0DB6             printu:
1767   0DB6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1768   0DB9             ; $digits 
1769   0DB9             ; $i 
1770   0DB9 52 07 00      sub sp, 7
1771   0DBC             ;; i = 0; 
1772   0DBC FA FA FF      lea d, [bp + -6] ; $i
1773   0DBF DA            push d
1774   0DC0 26 00 00      mov b, $0
1775   0DC3 E7            pop d
1776   0DC4 FD 43         mov [d], b
1777   0DC6             ;; if(num == 0){ 
1778   0DC6             _if31_cond:
1779   0DC6 FA 05 00      lea d, [bp + 5] ; $num
1780   0DC9 2A            mov b, [d]
1781   0DCA             ; START RELATIONAL
1782   0DCA D7            push a
1783   0DCB 11            mov a, b
1784   0DCC 26 00 00      mov b, $0
1785   0DCF B0            cmp a, b
1786   0DD0 FD 71         seq ; ==
1787   0DD2 E4            pop a
1788   0DD3             ; END RELATIONAL
1789   0DD3 C0 00 00      cmp b, 0
1790   0DD6 C6 E8 0D      je _if31_exit
1791   0DD9             _if31_true:
1792   0DD9             ;; putchar('0'); 
1793   0DD9 26 30 00      mov b, $30
1794   0DDC DD            push bl
1795   0DDD 07 A2 0E      call putchar
1796   0DE0 51 01 00      add sp, 1
1797   0DE3             ;; return; 
1798   0DE3 F9            leave
1799   0DE4 09            ret
1800   0DE5 0A E8 0D      jmp _if31_exit
1801   0DE8             _if31_exit:
1802   0DE8             ;; while (num > 0) { 
1803   0DE8             _while32_cond:
1804   0DE8 FA 05 00      lea d, [bp + 5] ; $num
1805   0DEB 2A            mov b, [d]
1806   0DEC             ; START RELATIONAL
1807   0DEC D7            push a
1808   0DED 11            mov a, b
1809   0DEE 26 00 00      mov b, $0
1810   0DF1 B0            cmp a, b
1811   0DF2 FD 81         sgu ; > (unsigned)
1812   0DF4 E4            pop a
1813   0DF5             ; END RELATIONAL
1814   0DF5 C0 00 00      cmp b, 0
1815   0DF8 C6 45 0E      je _while32_exit
1816   0DFB             _while32_block:
1817   0DFB             ;; digits[i] = '0' + (num % 10); 
1818   0DFB FA FC FF      lea d, [bp + -4] ; $digits
1819   0DFE D7            push a
1820   0DFF DA            push d
1821   0E00 FA FA FF      lea d, [bp + -6] ; $i
1822   0E03 2A            mov b, [d]
1823   0E04 E7            pop d
1824   0E05 5A            add d, b
1825   0E06 E4            pop a
1826   0E07 DA            push d
1827   0E08 26 30 00      mov b, $30
1828   0E0B             ; START TERMS
1829   0E0B D7            push a
1830   0E0C 11            mov a, b
1831   0E0D FA 05 00      lea d, [bp + 5] ; $num
1832   0E10 2A            mov b, [d]
1833   0E11             ; START FACTORS
1834   0E11 D7            push a
1835   0E12 11            mov a, b
1836   0E13 26 0A 00      mov b, $a
1837   0E16 AE            div a, b ; 
1838   0E17 11            mov a, b
1839   0E18 27            mov b, a
1840   0E19 E4            pop a
1841   0E1A             ; END FACTORS
1842   0E1A 54            add a, b
1843   0E1B 27            mov b, a
1844   0E1C E4            pop a
1845   0E1D             ; END TERMS
1846   0E1D E7            pop d
1847   0E1E FD 3E         mov [d], bl
1848   0E20             ;; num = num / 10; 
1849   0E20 FA 05 00      lea d, [bp + 5] ; $num
1850   0E23 DA            push d
1851   0E24 FA 05 00      lea d, [bp + 5] ; $num
1852   0E27 2A            mov b, [d]
1853   0E28             ; START FACTORS
1854   0E28 D7            push a
1855   0E29 11            mov a, b
1856   0E2A 26 0A 00      mov b, $a
1857   0E2D AE            div a, b
1858   0E2E 27            mov b, a
1859   0E2F E4            pop a
1860   0E30             ; END FACTORS
1861   0E30 E7            pop d
1862   0E31 FD 43         mov [d], b
1863   0E33             ;; i++; 
1864   0E33 FA FA FF      lea d, [bp + -6] ; $i
1865   0E36 2A            mov b, [d]
1866   0E37 FD 79         mov g, b
1867   0E39 FD 77         inc b
1868   0E3B FA FA FF      lea d, [bp + -6] ; $i
1869   0E3E FD 43         mov [d], b
1870   0E40 FD 27         mov b, g
1871   0E42 0A E8 0D      jmp _while32_cond
1872   0E45             _while32_exit:
1873   0E45             ;; while (i > 0) { 
1874   0E45             _while33_cond:
1875   0E45 FA FA FF      lea d, [bp + -6] ; $i
1876   0E48 2A            mov b, [d]
1877   0E49             ; START RELATIONAL
1878   0E49 D7            push a
1879   0E4A 11            mov a, b
1880   0E4B 26 00 00      mov b, $0
1881   0E4E B0            cmp a, b
1882   0E4F FD 7F         sgt ; >
1883   0E51 E4            pop a
1884   0E52             ; END RELATIONAL
1885   0E52 C0 00 00      cmp b, 0
1886   0E55 C6 80 0E      je _while33_exit
1887   0E58             _while33_block:
1888   0E58             ;; i--; 
1889   0E58 FA FA FF      lea d, [bp + -6] ; $i
1890   0E5B 2A            mov b, [d]
1891   0E5C FD 79         mov g, b
1892   0E5E FD 7D         dec b
1893   0E60 FA FA FF      lea d, [bp + -6] ; $i
1894   0E63 FD 43         mov [d], b
1895   0E65 FD 27         mov b, g
1896   0E67             ;; putchar(digits[i]); 
1897   0E67 FA FC FF      lea d, [bp + -4] ; $digits
1898   0E6A D7            push a
1899   0E6B DA            push d
1900   0E6C FA FA FF      lea d, [bp + -6] ; $i
1901   0E6F 2A            mov b, [d]
1902   0E70 E7            pop d
1903   0E71 5A            add d, b
1904   0E72 E4            pop a
1905   0E73 32            mov bl, [d]
1906   0E74 A7 00         mov bh, 0
1907   0E76 DD            push bl
1908   0E77 07 A2 0E      call putchar
1909   0E7A 51 01 00      add sp, 1
1910   0E7D 0A 45 0E      jmp _while33_cond
1911   0E80             _while33_exit:
1912   0E80 F9            leave
1913   0E81 09            ret
1914   0E82             
1915   0E82             rand:
1916   0E82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1917   0E85             ; $sec 
1918   0E85 52 01 00      sub sp, 1
1919   0E88             
1920   0E88             ; --- BEGIN INLINE ASM BLOCK
1921   0E88 19 00         mov al, 0
1922   0E8A 05 01         syscall sys_rtc					
1923   0E8C 1A            mov al, ah
1924   0E8D FA 00 00      lea d, [bp + 0] ; $sec
1925   0E90 1E            mov al, [d]
1926   0E91             ; --- END INLINE ASM BLOCK
1927   0E91             
1928   0E91             ;; return sec; 
1929   0E91 FA 00 00      lea d, [bp + 0] ; $sec
1930   0E94 32            mov bl, [d]
1931   0E95 A7 00         mov bh, 0
1932   0E97 F9            leave
1933   0E98 09            ret
1934   0E99             
1935   0E99             date:
1936   0E99 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1937   0E9C             
1938   0E9C             ; --- BEGIN INLINE ASM BLOCK
1939   0E9C 19 00         mov al, 0 
1940   0E9E 05 07         syscall sys_datetime
1941   0EA0             ; --- END INLINE ASM BLOCK
1942   0EA0             
1943   0EA0 F9            leave
1944   0EA1 09            ret
1945   0EA2             
1946   0EA2             putchar:
1947   0EA2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1948   0EA5             
1949   0EA5             ; --- BEGIN INLINE ASM BLOCK
1950   0EA5 FA 05 00      lea d, [bp + 5] ; $c
1951   0EA8 1E            mov al, [d]
1952   0EA9 23            mov ah, al
1953   0EAA 07 C9 10      call _putchar
1954   0EAD             ; --- END INLINE ASM BLOCK
1955   0EAD             
1956   0EAD F9            leave
1957   0EAE 09            ret
1958   0EAF             
1959   0EAF             getchar:
1960   0EAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1961   0EB2             ; $c 
1962   0EB2 52 01 00      sub sp, 1
1963   0EB5             
1964   0EB5             ; --- BEGIN INLINE ASM BLOCK
1965   0EB5 07 C2 10      call getch
1966   0EB8 1A            mov al, ah
1967   0EB9 FA 00 00      lea d, [bp + 0] ; $c
1968   0EBC 3E            mov [d], al
1969   0EBD             ; --- END INLINE ASM BLOCK
1970   0EBD             
1971   0EBD             ;; return c; 
1972   0EBD FA 00 00      lea d, [bp + 0] ; $c
1973   0EC0 32            mov bl, [d]
1974   0EC1 A7 00         mov bh, 0
1975   0EC3 F9            leave
1976   0EC4 09            ret
1977   0EC5             
1978   0EC5             scann:
1979   0EC5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1980   0EC8             ; $m 
1981   0EC8 52 02 00      sub sp, 2
1982   0ECB             
1983   0ECB             ; --- BEGIN INLINE ASM BLOCK
1984   0ECB 07 0D 13      call scan_u16d
1985   0ECE FA FF FF      lea d, [bp + -1] ; $m
1986   0ED1 43            mov [d], a
1987   0ED2             ; --- END INLINE ASM BLOCK
1988   0ED2             
1989   0ED2             ;; return m; 
1990   0ED2 FA FF FF      lea d, [bp + -1] ; $m
1991   0ED5 2A            mov b, [d]
1992   0ED6 F9            leave
1993   0ED7 09            ret
1994   0ED8             
1995   0ED8             puts:
1996   0ED8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1997   0EDB             
1998   0EDB             ; --- BEGIN INLINE ASM BLOCK
1999   0EDB FA 05 00      lea d, [bp + 5] ; $s
2000   0EDE 15            mov a, [d]
2001   0EDF 3C            mov d, a
2002   0EE0 07 13 12      call _puts
2003   0EE3 10 00 0A      mov a, $0A00
2004   0EE6 05 03         syscall sys_io
2005   0EE8             ; --- END INLINE ASM BLOCK
2006   0EE8             
2007   0EE8 F9            leave
2008   0EE9 09            ret
2009   0EEA             
2010   0EEA             print:
2011   0EEA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2012   0EED             
2013   0EED             ; --- BEGIN INLINE ASM BLOCK
2014   0EED FA 05 00      lea d, [bp + 5] ; $s
2015   0EF0 FD 2A         mov d, [d]
2016   0EF2 07 13 12      call _puts
2017   0EF5             ; --- END INLINE ASM BLOCK
2018   0EF5             
2019   0EF5 F9            leave
2020   0EF6 09            ret
2021   0EF7             
2022   0EF7             loadfile:
2023   0EF7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2024   0EFA             
2025   0EFA             ; --- BEGIN INLINE ASM BLOCK
2026   0EFA FA 05 00      lea d, [bp + 5] ; $destination
2027   0EFD 15            mov a, [d]
2028   0EFE 4F            mov di, a
2029   0EFF FA 07 00      lea d, [bp + 7] ; $filename
2030   0F02 FD 2A         mov d, [d]
2031   0F04 19 14         mov al, 20
2032   0F06 05 04         syscall sys_filesystem
2033   0F08             ; --- END INLINE ASM BLOCK
2034   0F08             
2035   0F08 F9            leave
2036   0F09 09            ret
2037   0F0A             
2038   0F0A             create_file:
2039   0F0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2040   0F0D F9            leave
2041   0F0E 09            ret
2042   0F0F             
2043   0F0F             delete_file:
2044   0F0F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2045   0F12             
2046   0F12             ; --- BEGIN INLINE ASM BLOCK
2047   0F12 FA 05 00      lea d, [bp + 5] ; $filename
2048   0F15 19 0A         mov al, 10
2049   0F17 05 04         syscall sys_filesystem
2050   0F19             ; --- END INLINE ASM BLOCK
2051   0F19             
2052   0F19 F9            leave
2053   0F1A 09            ret
2054   0F1B             
2055   0F1B             fopen:
2056   0F1B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2057   0F1E F9            leave
2058   0F1F 09            ret
2059   0F20             
2060   0F20             fclose:
2061   0F20 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2062   0F23 F9            leave
2063   0F24 09            ret
2064   0F25             
2065   0F25             alloc:
2066   0F25 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2067   0F28             ;; heap_top = heap_top + bytes; 
2068   0F28 3B 86 20      mov d, _heap_top ; $heap_top
2069   0F2B DA            push d
2070   0F2C 3B 86 20      mov d, _heap_top ; $heap_top
2071   0F2F 2A            mov b, [d]
2072   0F30             ; START TERMS
2073   0F30 D7            push a
2074   0F31 11            mov a, b
2075   0F32 FA 05 00      lea d, [bp + 5] ; $bytes
2076   0F35 2A            mov b, [d]
2077   0F36 54            add a, b
2078   0F37 27            mov b, a
2079   0F38 E4            pop a
2080   0F39             ; END TERMS
2081   0F39 E7            pop d
2082   0F3A FD 43         mov [d], b
2083   0F3C             ;; return heap_top - bytes; 
2084   0F3C 3B 86 20      mov d, _heap_top ; $heap_top
2085   0F3F 2A            mov b, [d]
2086   0F40             ; START TERMS
2087   0F40 D7            push a
2088   0F41 11            mov a, b
2089   0F42 FA 05 00      lea d, [bp + 5] ; $bytes
2090   0F45 2A            mov b, [d]
2091   0F46 60            sub a, b
2092   0F47 27            mov b, a
2093   0F48 E4            pop a
2094   0F49             ; END TERMS
2095   0F49 F9            leave
2096   0F4A 09            ret
2097   0F4B             
2098   0F4B             free:
2099   0F4B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2100   0F4E             ;; return heap_top = heap_top - bytes; 
2101   0F4E 3B 86 20      mov d, _heap_top ; $heap_top
2102   0F51 DA            push d
2103   0F52 3B 86 20      mov d, _heap_top ; $heap_top
2104   0F55 2A            mov b, [d]
2105   0F56             ; START TERMS
2106   0F56 D7            push a
2107   0F57 11            mov a, b
2108   0F58 FA 05 00      lea d, [bp + 5] ; $bytes
2109   0F5B 2A            mov b, [d]
2110   0F5C 60            sub a, b
2111   0F5D 27            mov b, a
2112   0F5E E4            pop a
2113   0F5F             ; END TERMS
2114   0F5F E7            pop d
2115   0F60 FD 43         mov [d], b
2116   0F62 F9            leave
2117   0F63 09            ret
2118   0F64             
2119   0F64             exit:
2120   0F64 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2121   0F67             
2122   0F67             ; --- BEGIN INLINE ASM BLOCK
2123   0F67 05 0B         syscall sys_terminate_proc
2124   0F69             ; --- END INLINE ASM BLOCK
2125   0F69             
2126   0F69 F9            leave
2127   0F6A 09            ret
2128   0F6B             
2129   0F6B             load_hex:
2130   0F6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2131   0F6E             ; $temp 
2132   0F6E 52 02 00      sub sp, 2
2133   0F71             ;; temp = alloc(32768); 
2134   0F71 FA FF FF      lea d, [bp + -1] ; $temp
2135   0F74 DA            push d
2136   0F75 26 00 80      mov b, $8000
2137   0F78 FD AB         swp b
2138   0F7A D8            push b
2139   0F7B 07 25 0F      call alloc
2140   0F7E 51 02 00      add sp, 2
2141   0F81 E7            pop d
2142   0F82 FD 43         mov [d], b
2143   0F84             
2144   0F84             ; --- BEGIN INLINE ASM BLOCK
2145   0F84               
2146   0F84               
2147   0F84               
2148   0F84               
2149   0F84               
2150   0F84             _load_hex:
2151   0F84 D7            push a
2152   0F85 D8            push b
2153   0F86 DA            push d
2154   0F87 E2            push si
2155   0F88 E3            push di
2156   0F89 52 00 80      sub sp, $8000      
2157   0F8C 38 00 00      mov c, 0
2158   0F8F 48            mov a, sp
2159   0F90 77            inc a
2160   0F91 3C            mov d, a          
2161   0F92 07 D0 10      call _gets        
2162   0F95 4D            mov si, a
2163   0F96             __load_hex_loop:
2164   0F96 F6            lodsb             
2165   0F97 B9 00         cmp al, 0         
2166   0F99 C6 A7 0F      jz __load_hex_ret
2167   0F9C 36            mov bh, al
2168   0F9D F6            lodsb
2169   0F9E 2F            mov bl, al
2170   0F9F 07 86 10      call _atoi        
2171   0FA2 F7            stosb             
2172   0FA3 78            inc c
2173   0FA4 0A 96 0F      jmp __load_hex_loop
2174   0FA7             __load_hex_ret:
2175   0FA7 51 00 80      add sp, $8000
2176   0FAA F0            pop di
2177   0FAB EF            pop si
2178   0FAC E7            pop d
2179   0FAD E5            pop b
2180   0FAE E4            pop a
2181   0FAF             ; --- END INLINE ASM BLOCK
2182   0FAF             
2183   0FAF F9            leave
2184   0FB0 09            ret
2185   0FB1             
2186   0FB1             getparam:
2187   0FB1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2188   0FB4             ; $data 
2189   0FB4 52 01 00      sub sp, 1
2190   0FB7             
2191   0FB7             ; --- BEGIN INLINE ASM BLOCK
2192   0FB7 19 04         mov al, 4
2193   0FB9 FA 05 00      lea d, [bp + 5] ; $address
2194   0FBC FD 2A         mov d, [d]
2195   0FBE 05 0C         syscall sys_system
2196   0FC0 FA 00 00      lea d, [bp + 0] ; $data
2197   0FC3 FD 3E         mov [d], bl
2198   0FC5             ; --- END INLINE ASM BLOCK
2199   0FC5             
2200   0FC5             ;; return data; 
2201   0FC5 FA 00 00      lea d, [bp + 0] ; $data
2202   0FC8 32            mov bl, [d]
2203   0FC9 A7 00         mov bh, 0
2204   0FCB F9            leave
2205   0FCC 09            ret
2206   0FCD             
2207   0FCD             clear:
2208   0FCD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2209   0FD0             ;; print("\033[2J\033[H"); 
2210   0FD0 26 78 20      mov b, __s2 ; "\033[2J\033[H"
2211   0FD3 FD AB         swp b
2212   0FD5 D8            push b
2213   0FD6 07 EA 0E      call print
2214   0FD9 51 02 00      add sp, 2
2215   0FDC F9            leave
2216   0FDD 09            ret
2217   0FDE             
2218   0FDE             include_stdio_asm:
2219   0FDE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2220   0FE1             
2221   0FE1             ; --- BEGIN INLINE ASM BLOCK
2222   0FE1             .include "lib/stdio.asm"
0001+  0FE1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0FE1             ; stdio.s
0003+  0FE1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0FE1             .include "lib/string.asm"
0001++ 0FE1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0FE1             ; string.s
0003++ 0FE1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0FE1             
0005++ 0FE1             
0006++ 0FE1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0FE1             ; _strrev
0008++ 0FE1             ; reverse a string
0009++ 0FE1             ; D = string address
0010++ 0FE1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0FE1             ; 01234
0012++ 0FE1             _strrev:
0013++ 0FE1 4B          	pusha
0014++ 0FE2 07 28 10    	call _strlen	; length in C
0015++ 0FE5 12          	mov a, c
0016++ 0FE6 AF 01 00    	cmp a, 1
0017++ 0FE9 D0 03 10    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0FEC 7D          	dec a
0019++ 0FED FD 4E       	mov si, d	; beginning of string
0020++ 0FEF FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0FF1 59          	add d, a	; end of string
0022++ 0FF2 12          	mov a, c
0023++ 0FF3 FD 9B       	shr a		; divide by 2
0024++ 0FF5 39          	mov c, a	; C now counts the steps
0025++ 0FF6             _strrev_L0:
0026++ 0FF6 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0FF7 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0FF8 3E          	mov [d], al	; store left char into right side
0029++ 0FF9 1B          	mov al, bl
0030++ 0FFA F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0FFB 7E          	dec c
0032++ 0FFC 7F          	dec d
0033++ 0FFD C2 00 00    	cmp c, 0
0034++ 1000 C7 F6 0F    	jne _strrev_L0
0035++ 1003             _strrev_end:
0036++ 1003 4C          	popa
0037++ 1004 09          	ret
0038++ 1005             	
0039++ 1005             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1005             ; _strchr
0041++ 1005             ; search string in D for char in AL
0042++ 1005             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1005             _strchr:
0044++ 1005             _strchr_L0:
0045++ 1005 32          	mov bl, [d]
0046++ 1006 C1 00       	cmp bl, 0
0047++ 1008 C6 13 10    	je _strchr_end
0048++ 100B BA          	cmp al, bl
0049++ 100C C6 13 10    	je _strchr_end
0050++ 100F 79          	inc d
0051++ 1010 0A 05 10    	jmp _strchr_L0
0052++ 1013             _strchr_end:
0053++ 1013 1B          	mov al, bl
0054++ 1014 09          	ret
0055++ 1015             
0056++ 1015             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1015             ; _strstr
0058++ 1015             ; find sub-string
0059++ 1015             ; str1 in SI
0060++ 1015             ; str2 in DI
0061++ 1015             ; SI points to end of source string
0062++ 1015             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1015             _strstr:
0064++ 1015 DB          	push al
0065++ 1016 DA          	push d
0066++ 1017 E3          	push di
0067++ 1018             _strstr_loop:
0068++ 1018 F3          	cmpsb					; compare a byte of the strings
0069++ 1019 C7 24 10    	jne _strstr_ret
0070++ 101C FC 00 00    	lea d, [di + 0]
0071++ 101F BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1021 C7 18 10    	jne _strstr_loop				; equal chars but not at end
0073++ 1024             _strstr_ret:
0074++ 1024 F0          	pop di
0075++ 1025 E7          	pop d
0076++ 1026 E8          	pop al
0077++ 1027 09          	ret
0078++ 1028             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1028             ; length of null terminated string
0080++ 1028             ; result in C
0081++ 1028             ; pointer in D
0082++ 1028             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1028             _strlen:
0084++ 1028 DA          	push d
0085++ 1029 38 00 00    	mov c, 0
0086++ 102C             _strlen_L1:
0087++ 102C BD 00       	cmp byte [d], 0
0088++ 102E C6 36 10    	je _strlen_ret
0089++ 1031 79          	inc d
0090++ 1032 78          	inc c
0091++ 1033 0A 2C 10    	jmp _strlen_L1
0092++ 1036             _strlen_ret:
0093++ 1036 E7          	pop d
0094++ 1037 09          	ret
0095++ 1038             
0096++ 1038             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1038             ; STRCMP
0098++ 1038             ; compare two strings
0099++ 1038             ; str1 in SI
0100++ 1038             ; str2 in DI
0101++ 1038             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1038             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1038             _strcmp:
0104++ 1038 DB          	push al
0105++ 1039 DA          	push d
0106++ 103A E3          	push di
0107++ 103B E2          	push si
0108++ 103C             _strcmp_loop:
0109++ 103C F3          	cmpsb					; compare a byte of the strings
0110++ 103D C7 48 10    	jne _strcmp_ret
0111++ 1040 FB FF FF    	lea d, [si +- 1]
0112++ 1043 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1045 C7 3C 10    	jne _strcmp_loop				; equal chars but not at end
0114++ 1048             _strcmp_ret:
0115++ 1048 EF          	pop si
0116++ 1049 F0          	pop di
0117++ 104A E7          	pop d
0118++ 104B E8          	pop al
0119++ 104C 09          	ret
0120++ 104D             
0121++ 104D             
0122++ 104D             ; STRCPY
0123++ 104D             ; copy null terminated string from SI to DI
0124++ 104D             ; source in SI
0125++ 104D             ; destination in DI
0126++ 104D             _strcpy:
0127++ 104D E2          	push si
0128++ 104E E3          	push di
0129++ 104F DB          	push al
0130++ 1050             _strcpy_L1:
0131++ 1050 F6          	lodsb
0132++ 1051 F7          	stosb
0133++ 1052 B9 00       	cmp al, 0
0134++ 1054 C7 50 10    	jne _strcpy_L1
0135++ 1057             _strcpy_end:
0136++ 1057 E8          	pop al
0137++ 1058 F0          	pop di
0138++ 1059 EF          	pop si
0139++ 105A 09          	ret
0140++ 105B             
0141++ 105B             ; STRCAT
0142++ 105B             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 105B             ; source in SI
0144++ 105B             ; destination in DI
0145++ 105B             _strcat:
0146++ 105B E2          	push si
0147++ 105C E3          	push di
0148++ 105D D7          	push a
0149++ 105E DA          	push d
0150++ 105F 50          	mov a, di
0151++ 1060 3C          	mov d, a
0152++ 1061             _strcat_goto_end_L1:
0153++ 1061 BD 00       	cmp byte[d], 0
0154++ 1063 C6 6A 10    	je _strcat_start
0155++ 1066 79          	inc d
0156++ 1067 0A 61 10    	jmp _strcat_goto_end_L1
0157++ 106A             _strcat_start:
0158++ 106A FD 50       	mov di, d
0159++ 106C             _strcat_L1:
0160++ 106C F6          	lodsb
0161++ 106D F7          	stosb
0162++ 106E B9 00       	cmp al, 0
0163++ 1070 C7 6C 10    	jne _strcat_L1
0164++ 1073             _strcat_end:
0165++ 1073 E7          	pop d
0166++ 1074 E4          	pop a
0167++ 1075 F0          	pop di
0168++ 1076 EF          	pop si
0169++ 1077 09          	ret
0170++ 1078             
0171++ 1078             
0005+  1078             
0006+  1078             
0007+  1078             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1078             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1078             ; ASCII in BL
0010+  1078             ; result in AL
0011+  1078             ; ascii for F = 0100 0110
0012+  1078             ; ascii for 9 = 0011 1001
0013+  1078             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1078             hex_ascii_encode:
0015+  1078 1B            mov al, bl
0016+  1079 93 40         test al, $40        ; test if letter or number
0017+  107B C7 81 10      jnz hex_letter
0018+  107E 87 0F         and al, $0F        ; get number
0019+  1080 09            ret
0020+  1081             hex_letter:
0021+  1081 87 0F         and al, $0F        ; get letter
0022+  1083 6A 09         add al, 9
0023+  1085 09            ret
0024+  1086             
0025+  1086             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1086             ; ATOI
0027+  1086             ; 2 letter hex string in B
0028+  1086             ; 8bit integer returned in AL
0029+  1086             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1086             _atoi:
0031+  1086 D8            push b
0032+  1087 07 78 10      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  108A 30            mov bl, bh
0034+  108B DB            push al          ; save a
0035+  108C 07 78 10      call hex_ascii_encode
0036+  108F EA            pop bl  
0037+  1090 FD 9E 04      shl al, 4
0038+  1093 8C            or al, bl
0039+  1094 E5            pop b
0040+  1095 09            ret  
0041+  1096             
0042+  1096             
0043+  1096             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1096             ; scanf
0045+  1096             ; no need for explanations!
0046+  1096             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1096             scanf:
0048+  1096 09            ret
0049+  1097             
0050+  1097             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1097             ; ITOA
0052+  1097             ; 8bit value in BL
0053+  1097             ; 2 byte ASCII result in A
0054+  1097             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1097             _itoa:
0056+  1097 DA            push d
0057+  1098 D8            push b
0058+  1099 A7 00         mov bh, 0
0059+  109B FD A4 04      shr bl, 4  
0060+  109E 74            mov d, b
0061+  109F 1F 47 13      mov al, [d + s_hex_digits]
0062+  10A2 23            mov ah, al
0063+  10A3               
0064+  10A3 E5            pop b
0065+  10A4 D8            push b
0066+  10A5 A7 00         mov bh, 0
0067+  10A7 FD 87 0F      and bl, $0F
0068+  10AA 74            mov d, b
0069+  10AB 1F 47 13      mov al, [d + s_hex_digits]
0070+  10AE E5            pop b
0071+  10AF E7            pop d
0072+  10B0 09            ret
0073+  10B1             
0074+  10B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  10B1             ; HEX STRING TO BINARY
0076+  10B1             ; di = destination address
0077+  10B1             ; si = source
0078+  10B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  10B1             _hex_to_int:
0080+  10B1             _hex_to_int_L1:
0081+  10B1 F6            lodsb          ; load from [SI] to AL
0082+  10B2 B9 00         cmp al, 0        ; check if ASCII 0
0083+  10B4 C6 C1 10      jz _hex_to_int_ret
0084+  10B7 36            mov bh, al
0085+  10B8 F6            lodsb
0086+  10B9 2F            mov bl, al
0087+  10BA 07 86 10      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  10BD F7            stosb          ; store AL to [DI]
0089+  10BE 0A B1 10      jmp _hex_to_int_L1
0090+  10C1             _hex_to_int_ret:
0091+  10C1 09            ret    
0092+  10C2             
0093+  10C2             
0094+  10C2             
0095+  10C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  10C2             ; GETCHAR
0097+  10C2             ; char in ah
0098+  10C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  10C2             getch:
0100+  10C2 DB            push al
0101+  10C3             getch_retry:
0102+  10C3 19 01         mov al, 1
0103+  10C5 05 03         syscall sys_io      ; receive in AH
0104+  10C7 E8            pop al
0105+  10C8 09            ret
0106+  10C9             
0107+  10C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  10C9             ; PUTCHAR
0109+  10C9             ; char in ah
0110+  10C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  10C9             _putchar:
0112+  10C9 D7            push a
0113+  10CA 19 00         mov al, 0
0114+  10CC 05 03         syscall sys_io      ; char in AH
0115+  10CE E4            pop a
0116+  10CF 09            ret
0117+  10D0             
0118+  10D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  10D0             ;; INPUT A STRING
0120+  10D0             ;; terminates with null
0121+  10D0             ;; pointer in D
0122+  10D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  10D0             _gets:
0124+  10D0 D7            push a
0125+  10D1 DA            push d
0126+  10D2             _gets_loop:
0127+  10D2 19 01         mov al, 1
0128+  10D4 05 03         syscall sys_io      ; receive in AH
0129+  10D6 B9 00         cmp al, 0        ; check error code (AL)
0130+  10D8 C6 D2 10      je _gets_loop      ; if no char received, retry
0131+  10DB             
0132+  10DB 76 1B         cmp ah, 27
0133+  10DD C6 FE 10      je _gets_ansi_esc
0134+  10E0 76 0A         cmp ah, $0A        ; LF
0135+  10E2 C6 69 11      je _gets_end
0136+  10E5 76 0D         cmp ah, $0D        ; CR
0137+  10E7 C6 69 11      je _gets_end
0138+  10EA 76 5C         cmp ah, $5C        ; '\\'
0139+  10EC C6 2A 11      je _gets_escape
0140+  10EF               
0141+  10EF 76 08         cmp ah, $08      ; check for backspace
0142+  10F1 C6 FA 10      je _gets_backspace
0143+  10F4             
0144+  10F4 1A            mov al, ah
0145+  10F5 3E            mov [d], al
0146+  10F6 79            inc d
0147+  10F7 0A D2 10      jmp _gets_loop
0148+  10FA             _gets_backspace:
0149+  10FA 7F            dec d
0150+  10FB 0A D2 10      jmp _gets_loop
0151+  10FE             _gets_ansi_esc:
0152+  10FE 19 01         mov al, 1
0153+  1100 05 03         syscall sys_io        ; receive in AH without echo
0154+  1102 B9 00         cmp al, 0          ; check error code (AL)
0155+  1104 C6 FE 10      je _gets_ansi_esc    ; if no char received, retry
0156+  1107 76 5B         cmp ah, '['
0157+  1109 C7 D2 10      jne _gets_loop
0158+  110C             _gets_ansi_esc_2:
0159+  110C 19 01         mov al, 1
0160+  110E 05 03         syscall sys_io          ; receive in AH without echo
0161+  1110 B9 00         cmp al, 0            ; check error code (AL)
0162+  1112 C6 0C 11      je _gets_ansi_esc_2  ; if no char received, retry
0163+  1115 76 44         cmp ah, 'D'
0164+  1117 C6 22 11      je _gets_left_arrow
0165+  111A 76 43         cmp ah, 'C'
0166+  111C C6 26 11      je _gets_right_arrow
0167+  111F 0A D2 10      jmp _gets_loop
0168+  1122             _gets_left_arrow:
0169+  1122 7F            dec d
0170+  1123 0A D2 10      jmp _gets_loop
0171+  1126             _gets_right_arrow:
0172+  1126 79            inc d
0173+  1127 0A D2 10      jmp _gets_loop
0174+  112A             _gets_escape:
0175+  112A 19 01         mov al, 1
0176+  112C 05 03         syscall sys_io      ; receive in AH
0177+  112E B9 00         cmp al, 0        ; check error code (AL)
0178+  1130 C6 2A 11      je _gets_escape      ; if no char received, retry
0179+  1133 76 6E         cmp ah, 'n'
0180+  1135 C6 54 11      je _gets_LF
0181+  1138 76 72         cmp ah, 'r'
0182+  113A C6 5B 11      je _gets_CR
0183+  113D 76 30         cmp ah, '0'
0184+  113F C6 62 11      je _gets_NULL
0185+  1142 76 5C         cmp ah, $5C  ; '\'
0186+  1144 C6 4D 11      je _gets_slash
0187+  1147 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  1148 3E            mov [d], al
0189+  1149 79            inc d
0190+  114A 0A D2 10      jmp _gets_loop
0191+  114D             _gets_slash:
0192+  114D 19 5C         mov al, $5C
0193+  114F 3E            mov [d], al
0194+  1150 79            inc d
0195+  1151 0A D2 10      jmp _gets_loop
0196+  1154             _gets_LF:
0197+  1154 19 0A         mov al, $0A
0198+  1156 3E            mov [d], al
0199+  1157 79            inc d
0200+  1158 0A D2 10      jmp _gets_loop
0201+  115B             _gets_CR:
0202+  115B 19 0D         mov al, $0D
0203+  115D 3E            mov [d], al
0204+  115E 79            inc d
0205+  115F 0A D2 10      jmp _gets_loop
0206+  1162             _gets_NULL:
0207+  1162 19 00         mov al, $00
0208+  1164 3E            mov [d], al
0209+  1165 79            inc d
0210+  1166 0A D2 10      jmp _gets_loop
0211+  1169             _gets_end:
0212+  1169 19 00         mov al, 0
0213+  116B 3E            mov [d], al        ; terminate string
0214+  116C E7            pop d
0215+  116D E4            pop a
0216+  116E 09            ret
0217+  116F             
0218+  116F             
0219+  116F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  116F             ;; INPUT TEXT
0221+  116F             ;; terminated with CTRL+D
0222+  116F             ;; pointer in D
0223+  116F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  116F             _gettxt:
0225+  116F D7            push a
0226+  1170 DA            push d
0227+  1171             _gettxt_loop:
0228+  1171 19 01         mov al, 1
0229+  1173 05 03         syscall sys_io      ; receive in AH
0230+  1175 B9 00         cmp al, 0        ; check error code (AL)
0231+  1177 C6 71 11      je _gettxt_loop    ; if no char received, retry
0232+  117A 76 04         cmp ah, 4      ; EOT
0233+  117C C6 BA 11      je _gettxt_end
0234+  117F 76 08         cmp ah, $08      ; check for backspace
0235+  1181 C6 B6 11      je _gettxt_backspace
0236+  1184 76 5C         cmp ah, $5C        ; '\'
0237+  1186 C6 8F 11      je _gettxt_escape
0238+  1189 1A            mov al, ah
0239+  118A 3E            mov [d], al
0240+  118B 79            inc d
0241+  118C 0A 71 11      jmp _gettxt_loop
0242+  118F             _gettxt_escape:
0243+  118F 19 01         mov al, 1
0244+  1191 05 03         syscall sys_io      ; receive in AH
0245+  1193 B9 00         cmp al, 0        ; check error code (AL)
0246+  1195 C6 8F 11      je _gettxt_escape    ; if no char received, retry
0247+  1198 76 6E         cmp ah, 'n'
0248+  119A C6 A8 11      je _gettxt_LF
0249+  119D 76 72         cmp ah, 'r'
0250+  119F C6 AF 11      je _gettxt_CR
0251+  11A2 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  11A3 3E            mov [d], al
0253+  11A4 79            inc d
0254+  11A5 0A 71 11      jmp _gettxt_loop
0255+  11A8             _gettxt_LF:
0256+  11A8 19 0A         mov al, $0A
0257+  11AA 3E            mov [d], al
0258+  11AB 79            inc d
0259+  11AC 0A 71 11      jmp _gettxt_loop
0260+  11AF             _gettxt_CR:
0261+  11AF 19 0D         mov al, $0D
0262+  11B1 3E            mov [d], al
0263+  11B2 79            inc d
0264+  11B3 0A 71 11      jmp _gettxt_loop
0265+  11B6             _gettxt_backspace:
0266+  11B6 7F            dec d
0267+  11B7 0A 71 11      jmp _gettxt_loop
0268+  11BA             _gettxt_end:
0269+  11BA 19 00         mov al, 0
0270+  11BC 3E            mov [d], al        ; terminate string
0271+  11BD E7            pop d
0272+  11BE E4            pop a
0273+  11BF 09            ret
0274+  11C0             
0275+  11C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  11C0             ; PRINT NEW LINE
0277+  11C0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  11C0             printnl:
0279+  11C0 D7            push a
0280+  11C1 10 00 0A      mov a, $0A00
0281+  11C4 05 03         syscall sys_io
0282+  11C6 10 00 0D      mov a, $0D00
0283+  11C9 05 03         syscall sys_io
0284+  11CB E4            pop a
0285+  11CC 09            ret
0286+  11CD             
0287+  11CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  11CD             ; _strtoint
0289+  11CD             ; 4 digit hex string number in d
0290+  11CD             ; integer returned in A
0291+  11CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  11CD             _strtointx:
0293+  11CD D8            push b
0294+  11CE 32            mov bl, [d]
0295+  11CF 37            mov bh, bl
0296+  11D0 33 01 00      mov bl, [d + 1]
0297+  11D3 07 86 10      call _atoi        ; convert to int in AL
0298+  11D6 23            mov ah, al        ; move to AH
0299+  11D7 33 02 00      mov bl, [d + 2]
0300+  11DA 37            mov bh, bl
0301+  11DB 33 03 00      mov bl, [d + 3]
0302+  11DE 07 86 10      call _atoi        ; convert to int in AL
0303+  11E1 E5            pop b
0304+  11E2 09            ret
0305+  11E3             
0306+  11E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  11E3             ; _strtoint
0308+  11E3             ; 5 digit base10 string number in d
0309+  11E3             ; integer returned in A
0310+  11E3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  11E3             _strtoint:
0312+  11E3 E2            push si
0313+  11E4 D8            push b
0314+  11E5 D9            push c
0315+  11E6 DA            push d
0316+  11E7 07 28 10      call _strlen      ; get string length in C
0317+  11EA 7E            dec c
0318+  11EB FD 4E         mov si, d
0319+  11ED 12            mov a, c
0320+  11EE FD 99         shl a
0321+  11F0 3B 5F 13      mov d, table_power
0322+  11F3 59            add d, a
0323+  11F4 38 00 00      mov c, 0
0324+  11F7             _strtoint_L0:
0325+  11F7 F6            lodsb      ; load ASCII to al
0326+  11F8 B9 00         cmp al, 0
0327+  11FA C6 0D 12      je _strtoint_end
0328+  11FD 6F 30         sub al, $30    ; make into integer
0329+  11FF 22 00         mov ah, 0
0330+  1201 2A            mov b, [d]
0331+  1202 AC            mul a, b      ; result in B since it fits in 16bits
0332+  1203 11            mov a, b
0333+  1204 28            mov b, c
0334+  1205 54            add a, b
0335+  1206 39            mov c, a
0336+  1207 63 02 00      sub d, 2
0337+  120A 0A F7 11      jmp _strtoint_L0
0338+  120D             _strtoint_end:
0339+  120D 12            mov a, c
0340+  120E E7            pop d
0341+  120F E6            pop c
0342+  1210 E5            pop b
0343+  1211 EF            pop si
0344+  1212 09            ret
0345+  1213             
0346+  1213             
0347+  1213             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  1213             ; PRINT NULL TERMINATED STRING
0349+  1213             ; pointer in D
0350+  1213             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  1213             _puts:
0352+  1213 D7            push a
0353+  1214 DA            push d
0354+  1215             _puts_L1:
0355+  1215 1E            mov al, [d]
0356+  1216 B9 00         cmp al, 0
0357+  1218 C6 24 12      jz _puts_END
0358+  121B 23            mov ah, al
0359+  121C 19 00         mov al, 0
0360+  121E 05 03         syscall sys_io
0361+  1220 79            inc d
0362+  1221 0A 15 12      jmp _puts_L1
0363+  1224             _puts_END:
0364+  1224 E7            pop d
0365+  1225 E4            pop a
0366+  1226 09            ret
0367+  1227             
0368+  1227             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1227             ; PRINT N SIZE STRING
0370+  1227             ; pointer in D
0371+  1227             ; size in C
0372+  1227             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1227             _putsn:
0374+  1227 DB            push al
0375+  1228 DA            push d
0376+  1229 D9            push c
0377+  122A             _putsn_L0:
0378+  122A 1E            mov al, [d]
0379+  122B 23            mov ah, al
0380+  122C 19 00         mov al, 0
0381+  122E 05 03         syscall sys_io
0382+  1230 79            inc d
0383+  1231 7E            dec c  
0384+  1232 C2 00 00      cmp c, 0
0385+  1235 C7 2A 12      jne _putsn_L0
0386+  1238             _putsn_end:
0387+  1238 E6            pop c
0388+  1239 E7            pop d
0389+  123A E8            pop al
0390+  123B 09            ret
0391+  123C             
0392+  123C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  123C             ; print 16bit decimal number
0394+  123C             ; input number in A
0395+  123C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  123C             print_u16d:
0397+  123C D7            push a
0398+  123D D8            push b
0399+  123E 26 10 27      mov b, 10000
0400+  1241 AE            div a, b      ; get 10000's coeff.
0401+  1242 07 64 12      call print_number
0402+  1245 11            mov a, b
0403+  1246 26 E8 03      mov b, 1000
0404+  1249 AE            div a, b      ; get 1000's coeff.
0405+  124A 07 64 12      call print_number
0406+  124D 11            mov a, b
0407+  124E 26 64 00      mov b, 100
0408+  1251 AE            div a, b
0409+  1252 07 64 12      call print_number
0410+  1255 11            mov a, b
0411+  1256 26 0A 00      mov b, 10
0412+  1259 AE            div a, b
0413+  125A 07 64 12      call print_number
0414+  125D 1B            mov al, bl      ; 1's coeff in bl
0415+  125E 07 64 12      call print_number
0416+  1261 E5            pop b
0417+  1262 E4            pop a
0418+  1263 09            ret
0419+  1264             
0420+  1264             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1264             ; print AL
0422+  1264             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1264             print_number:
0424+  1264 6A 30         add al, $30
0425+  1266 23            mov ah, al
0426+  1267 07 C9 10      call _putchar
0427+  126A 09            ret
0428+  126B             
0429+  126B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  126B             ; PRINT 16BIT HEX INTEGER
0431+  126B             ; integer value in reg B
0432+  126B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  126B             print_u16x:
0434+  126B D7            push a
0435+  126C D8            push b
0436+  126D DD            push bl
0437+  126E 30            mov bl, bh
0438+  126F 07 97 10      call _itoa        ; convert bh to char in A
0439+  1272 2F            mov bl, al        ; save al
0440+  1273 19 00         mov al, 0
0441+  1275 05 03         syscall sys_io        ; display AH
0442+  1277 24            mov ah, bl        ; retrieve al
0443+  1278 19 00         mov al, 0
0444+  127A 05 03         syscall sys_io        ; display AL
0445+  127C             
0446+  127C EA            pop bl
0447+  127D 07 97 10      call _itoa        ; convert bh to char in A
0448+  1280 2F            mov bl, al        ; save al
0449+  1281 19 00         mov al, 0
0450+  1283 05 03         syscall sys_io        ; display AH
0451+  1285 24            mov ah, bl        ; retrieve al
0452+  1286 19 00         mov al, 0
0453+  1288 05 03         syscall sys_io        ; display AL
0454+  128A             
0455+  128A E5            pop b
0456+  128B E4            pop a
0457+  128C 09            ret
0458+  128D             
0459+  128D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  128D             ; INPUT 16BIT HEX INTEGER
0461+  128D             ; read 16bit integer into A
0462+  128D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  128D             scan_u16x:
0464+  128D F8 10 00      enter 16
0465+  1290 D8            push b
0466+  1291 DA            push d
0467+  1292             
0468+  1292 FA F1 FF      lea d, [bp + -15]
0469+  1295 07 D0 10      call _gets        ; get number
0470+  1298             
0471+  1298 32            mov bl, [d]
0472+  1299 37            mov bh, bl
0473+  129A 33 01 00      mov bl, [d + 1]
0474+  129D 07 86 10      call _atoi        ; convert to int in AL
0475+  12A0 23            mov ah, al        ; move to AH
0476+  12A1             
0477+  12A1 33 02 00      mov bl, [d + 2]
0478+  12A4 37            mov bh, bl
0479+  12A5 33 03 00      mov bl, [d + 3]
0480+  12A8 07 86 10      call _atoi        ; convert to int in AL
0481+  12AB             
0482+  12AB E7            pop d
0483+  12AC E5            pop b
0484+  12AD F9            leave
0485+  12AE 09            ret
0486+  12AF             
0487+  12AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  12AF             ; PRINT 8bit HEX INTEGER
0489+  12AF             ; integer value in reg bl
0490+  12AF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  12AF             print_u8x:
0492+  12AF D7            push a
0493+  12B0 DD            push bl
0494+  12B1             
0495+  12B1 07 97 10      call _itoa        ; convert bl to char in A
0496+  12B4 2F            mov bl, al        ; save al
0497+  12B5 19 00         mov al, 0
0498+  12B7 05 03         syscall sys_io        ; display AH
0499+  12B9 24            mov ah, bl        ; retrieve al
0500+  12BA 19 00         mov al, 0
0501+  12BC 05 03         syscall sys_io        ; display AL
0502+  12BE             
0503+  12BE EA            pop bl
0504+  12BF E4            pop a
0505+  12C0 09            ret
0506+  12C1             
0507+  12C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  12C1             ; print 8bit decimal unsigned number
0509+  12C1             ; input number in AL
0510+  12C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  12C1             print_u8d:
0512+  12C1 D7            push a
0513+  12C2 D8            push b
0514+  12C3             
0515+  12C3 22 00         mov ah, 0
0516+  12C5 26 64 00      mov b, 100
0517+  12C8 AE            div a, b
0518+  12C9 D8            push b      ; save remainder
0519+  12CA B9 00         cmp al, 0
0520+  12CC C6 D6 12      je skip100
0521+  12CF 6A 30         add al, $30
0522+  12D1 23            mov ah, al
0523+  12D2 19 00         mov al, 0
0524+  12D4 05 03         syscall sys_io  ; print coeff
0525+  12D6             skip100:
0526+  12D6 E4            pop a
0527+  12D7 22 00         mov ah, 0
0528+  12D9 26 0A 00      mov b, 10
0529+  12DC AE            div a, b
0530+  12DD D8            push b      ; save remainder
0531+  12DE B9 00         cmp al, 0
0532+  12E0 C6 EA 12      je skip10
0533+  12E3 6A 30         add al, $30
0534+  12E5 23            mov ah, al
0535+  12E6 19 00         mov al, 0
0536+  12E8 05 03         syscall sys_io  ; print coeff
0537+  12EA             skip10:
0538+  12EA E4            pop a
0539+  12EB 1B            mov al, bl
0540+  12EC 6A 30         add al, $30
0541+  12EE 23            mov ah, al
0542+  12EF 19 00         mov al, 0
0543+  12F1 05 03         syscall sys_io  ; print coeff
0544+  12F3 E5            pop b
0545+  12F4 E4            pop a
0546+  12F5 09            ret
0547+  12F6             
0548+  12F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  12F6             ; INPUT 8BIT HEX INTEGER
0550+  12F6             ; read 8bit integer into AL
0551+  12F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  12F6             scan_u8x:
0553+  12F6 F8 04 00      enter 4
0554+  12F9 D8            push b
0555+  12FA DA            push d
0556+  12FB             
0557+  12FB FA FD FF      lea d, [bp + -3]
0558+  12FE 07 D0 10      call _gets        ; get number
0559+  1301             
0560+  1301 32            mov bl, [d]
0561+  1302 37            mov bh, bl
0562+  1303 33 01 00      mov bl, [d + 1]
0563+  1306 07 86 10      call _atoi        ; convert to int in AL
0564+  1309             
0565+  1309 E7            pop d
0566+  130A E5            pop b
0567+  130B F9            leave
0568+  130C 09            ret
0569+  130D             
0570+  130D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  130D             ; input decimal number
0572+  130D             ; result in A
0573+  130D             ; 655'\0'
0574+  130D             ; low--------high
0575+  130D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  130D             scan_u16d:
0577+  130D F8 08 00      enter 8
0578+  1310 E2            push si
0579+  1311 D8            push b
0580+  1312 D9            push c
0581+  1313 DA            push d
0582+  1314 FA F9 FF      lea d, [bp +- 7]
0583+  1317 07 D0 10      call _gets
0584+  131A 07 28 10      call _strlen      ; get string length in C
0585+  131D 7E            dec c
0586+  131E FD 4E         mov si, d
0587+  1320 12            mov a, c
0588+  1321 FD 99         shl a
0589+  1323 3B 5F 13      mov d, table_power
0590+  1326 59            add d, a
0591+  1327 38 00 00      mov c, 0
0592+  132A             mul_loop:
0593+  132A F6            lodsb      ; load ASCII to al
0594+  132B B9 00         cmp al, 0
0595+  132D C6 40 13      je mul_exit
0596+  1330 6F 30         sub al, $30    ; make into integer
0597+  1332 22 00         mov ah, 0
0598+  1334 2A            mov b, [d]
0599+  1335 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1336 11            mov a, b
0601+  1337 28            mov b, c
0602+  1338 54            add a, b
0603+  1339 39            mov c, a
0604+  133A 63 02 00      sub d, 2
0605+  133D 0A 2A 13      jmp mul_loop
0606+  1340             mul_exit:
0607+  1340 12            mov a, c
0608+  1341 E7            pop d
0609+  1342 E6            pop c
0610+  1343 E5            pop b
0611+  1344 EF            pop si
0612+  1345 F9            leave
0613+  1346 09            ret
0614+  1347             
0615+  1347             
0616+  1347 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  134B 34 35 36 37 
0616+  134F 38 39 41 42 
0616+  1353 43 44 45 46 
0617+  1357 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  135B 1B 5B 48 00 
0618+  135F             
0619+  135F             table_power:
0620+  135F 01 00         .dw 1
0621+  1361 0A 00         .dw 10
0622+  1363 64 00         .dw 100
0623+  1365 E8 03         .dw 1000
0624+  1367 10 27         .dw 100002223   1369             ; --- END INLINE ASM BLOCK
2224   1369             
2225   1369 F9            leave
2226   136A 09            ret
2227   136B             
2228   136B             show:
2229   136B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2230   136E             ; $i 
2231   136E             ; $j 
2232   136E 52 04 00      sub sp, 4
2233   1371             ;; for(i = 0; i <  30     ; i++){ 
2234   1371             _for34_init:
2235   1371 FA FF FF      lea d, [bp + -1] ; $i
2236   1374 DA            push d
2237   1375 26 00 00      mov b, $0
2238   1378 E7            pop d
2239   1379 FD 43         mov [d], b
2240   137B             _for34_cond:
2241   137B FA FF FF      lea d, [bp + -1] ; $i
2242   137E 2A            mov b, [d]
2243   137F             ; START RELATIONAL
2244   137F D7            push a
2245   1380 11            mov a, b
2246   1381 26 1E 00      mov b, $1e
2247   1384 B0            cmp a, b
2248   1385 FD 73         slt ; < 
2249   1387 E4            pop a
2250   1388             ; END RELATIONAL
2251   1388 C0 00 00      cmp b, 0
2252   138B C6 1C 14      je _for34_exit
2253   138E             _for34_block:
2254   138E             ;; for(j = 0; j <  40    ; j++){ 
2255   138E             _for35_init:
2256   138E FA FD FF      lea d, [bp + -3] ; $j
2257   1391 DA            push d
2258   1392 26 00 00      mov b, $0
2259   1395 E7            pop d
2260   1396 FD 43         mov [d], b
2261   1398             _for35_cond:
2262   1398 FA FD FF      lea d, [bp + -3] ; $j
2263   139B 2A            mov b, [d]
2264   139C             ; START RELATIONAL
2265   139C D7            push a
2266   139D 11            mov a, b
2267   139E 26 28 00      mov b, $28
2268   13A1 B0            cmp a, b
2269   13A2 FD 73         slt ; < 
2270   13A4 E4            pop a
2271   13A5             ; END RELATIONAL
2272   13A5 C0 00 00      cmp b, 0
2273   13A8 C6 00 14      je _for35_exit
2274   13AB             _for35_block:
2275   13AB             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
2276   13AB             _ternary36_cond:
2277   13AB 3B 65 1B      mov d, _currState_data ; $currState
2278   13AE D7            push a
2279   13AF DA            push d
2280   13B0 FA FF FF      lea d, [bp + -1] ; $i
2281   13B3 2A            mov b, [d]
2282   13B4 E7            pop d
2283   13B5 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2284   13B9 DA            push d
2285   13BA FA FD FF      lea d, [bp + -3] ; $j
2286   13BD 2A            mov b, [d]
2287   13BE E7            pop d
2288   13BF 5A            add d, b
2289   13C0 E4            pop a
2290   13C1 32            mov bl, [d]
2291   13C2 A7 00         mov bh, 0
2292   13C4             ; START RELATIONAL
2293   13C4 D7            push a
2294   13C5 11            mov a, b
2295   13C6 26 40 00      mov b, $40
2296   13C9 B0            cmp a, b
2297   13CA FD 71         seq ; ==
2298   13CC E4            pop a
2299   13CD             ; END RELATIONAL
2300   13CD C0 00 00      cmp b, 0
2301   13D0 C6 E2 13      je _ternary36_false
2302   13D3             _ternary36_true:
2303   13D3 26 80 20      mov b, __s3 ; "@ "
2304   13D6 FD AB         swp b
2305   13D8 D8            push b
2306   13D9 07 B0 08      call printf
2307   13DC 51 02 00      add sp, 2
2308   13DF 0A EE 13      jmp _ternary36_exit
2309   13E2             _ternary36_false:
2310   13E2 26 83 20      mov b, __s4 ; ". "
2311   13E5 FD AB         swp b
2312   13E7 D8            push b
2313   13E8 07 B0 08      call printf
2314   13EB 51 02 00      add sp, 2
2315   13EE             _ternary36_exit:
2316   13EE             _for35_update:
2317   13EE FA FD FF      lea d, [bp + -3] ; $j
2318   13F1 2A            mov b, [d]
2319   13F2 FD 79         mov g, b
2320   13F4 FD 77         inc b
2321   13F6 FA FD FF      lea d, [bp + -3] ; $j
2322   13F9 FD 43         mov [d], b
2323   13FB FD 27         mov b, g
2324   13FD 0A 98 13      jmp _for35_cond
2325   1400             _for35_exit:
2326   1400             ;; putchar(10); 
2327   1400 26 0A 00      mov b, $a
2328   1403 DD            push bl
2329   1404 07 A2 0E      call putchar
2330   1407 51 01 00      add sp, 1
2331   140A             _for34_update:
2332   140A FA FF FF      lea d, [bp + -1] ; $i
2333   140D 2A            mov b, [d]
2334   140E FD 79         mov g, b
2335   1410 FD 77         inc b
2336   1412 FA FF FF      lea d, [bp + -1] ; $i
2337   1415 FD 43         mov [d], b
2338   1417 FD 27         mov b, g
2339   1419 0A 7B 13      jmp _for34_cond
2340   141C             _for34_exit:
2341   141C F9            leave
2342   141D 09            ret
2343   141E             
2344   141E             alive:
2345   141E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2346   1421             ;; if(currState[i][j] == '@') return 1; 
2347   1421             _if37_cond:
2348   1421 3B 65 1B      mov d, _currState_data ; $currState
2349   1424 D7            push a
2350   1425 DA            push d
2351   1426 FA 07 00      lea d, [bp + 7] ; $i
2352   1429 2A            mov b, [d]
2353   142A E7            pop d
2354   142B FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2355   142F DA            push d
2356   1430 FA 05 00      lea d, [bp + 5] ; $j
2357   1433 2A            mov b, [d]
2358   1434 E7            pop d
2359   1435 5A            add d, b
2360   1436 E4            pop a
2361   1437 32            mov bl, [d]
2362   1438 A7 00         mov bh, 0
2363   143A             ; START RELATIONAL
2364   143A D7            push a
2365   143B 11            mov a, b
2366   143C 26 40 00      mov b, $40
2367   143F B0            cmp a, b
2368   1440 FD 71         seq ; ==
2369   1442 E4            pop a
2370   1443             ; END RELATIONAL
2371   1443 C0 00 00      cmp b, 0
2372   1446 C6 51 14      je _if37_else
2373   1449             _if37_true:
2374   1449             ;; return 1; 
2375   1449 26 01 00      mov b, $1
2376   144C F9            leave
2377   144D 09            ret
2378   144E 0A 56 14      jmp _if37_exit
2379   1451             _if37_else:
2380   1451             ;; return 0; 
2381   1451 26 00 00      mov b, $0
2382   1454 F9            leave
2383   1455 09            ret
2384   1456             _if37_exit:
2385   1456 F9            leave
2386   1457 09            ret
2387   1458             
2388   1458             neighbours:
2389   1458 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2390   145B             ; $count 
2391   145B 52 02 00      sub sp, 2
2392   145E             ;; count = 0; 
2393   145E FA FF FF      lea d, [bp + -1] ; $count
2394   1461 DA            push d
2395   1462 26 00 00      mov b, $0
2396   1465 E7            pop d
2397   1466 FD 43         mov [d], b
2398   1468             ;; if(currState[i+-1][j] == '@')			count++; 
2399   1468             _if38_cond:
2400   1468 3B 65 1B      mov d, _currState_data ; $currState
2401   146B D7            push a
2402   146C DA            push d
2403   146D FA 07 00      lea d, [bp + 7] ; $i
2404   1470 2A            mov b, [d]
2405   1471             ; START TERMS
2406   1471 D7            push a
2407   1472 11            mov a, b
2408   1473 26 01 00      mov b, $1
2409   1476 FD 97         neg b
2410   1478 54            add a, b
2411   1479 27            mov b, a
2412   147A E4            pop a
2413   147B             ; END TERMS
2414   147B E7            pop d
2415   147C FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2416   1480 DA            push d
2417   1481 FA 05 00      lea d, [bp + 5] ; $j
2418   1484 2A            mov b, [d]
2419   1485 E7            pop d
2420   1486 5A            add d, b
2421   1487 E4            pop a
2422   1488 32            mov bl, [d]
2423   1489 A7 00         mov bh, 0
2424   148B             ; START RELATIONAL
2425   148B D7            push a
2426   148C 11            mov a, b
2427   148D 26 40 00      mov b, $40
2428   1490 B0            cmp a, b
2429   1491 FD 71         seq ; ==
2430   1493 E4            pop a
2431   1494             ; END RELATIONAL
2432   1494 C0 00 00      cmp b, 0
2433   1497 C6 AC 14      je _if38_exit
2434   149A             _if38_true:
2435   149A             ;; count++; 
2436   149A FA FF FF      lea d, [bp + -1] ; $count
2437   149D 2A            mov b, [d]
2438   149E FD 79         mov g, b
2439   14A0 FD 77         inc b
2440   14A2 FA FF FF      lea d, [bp + -1] ; $count
2441   14A5 FD 43         mov [d], b
2442   14A7 FD 27         mov b, g
2443   14A9 0A AC 14      jmp _if38_exit
2444   14AC             _if38_exit:
2445   14AC             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
2446   14AC             _if39_cond:
2447   14AC 3B 65 1B      mov d, _currState_data ; $currState
2448   14AF D7            push a
2449   14B0 DA            push d
2450   14B1 FA 07 00      lea d, [bp + 7] ; $i
2451   14B4 2A            mov b, [d]
2452   14B5             ; START TERMS
2453   14B5 D7            push a
2454   14B6 11            mov a, b
2455   14B7 26 01 00      mov b, $1
2456   14BA FD 97         neg b
2457   14BC 54            add a, b
2458   14BD 27            mov b, a
2459   14BE E4            pop a
2460   14BF             ; END TERMS
2461   14BF E7            pop d
2462   14C0 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2463   14C4 DA            push d
2464   14C5 FA 05 00      lea d, [bp + 5] ; $j
2465   14C8 2A            mov b, [d]
2466   14C9             ; START TERMS
2467   14C9 D7            push a
2468   14CA 11            mov a, b
2469   14CB 26 01 00      mov b, $1
2470   14CE FD 97         neg b
2471   14D0 54            add a, b
2472   14D1 27            mov b, a
2473   14D2 E4            pop a
2474   14D3             ; END TERMS
2475   14D3 E7            pop d
2476   14D4 5A            add d, b
2477   14D5 E4            pop a
2478   14D6 32            mov bl, [d]
2479   14D7 A7 00         mov bh, 0
2480   14D9             ; START RELATIONAL
2481   14D9 D7            push a
2482   14DA 11            mov a, b
2483   14DB 26 40 00      mov b, $40
2484   14DE B0            cmp a, b
2485   14DF FD 71         seq ; ==
2486   14E1 E4            pop a
2487   14E2             ; END RELATIONAL
2488   14E2 C0 00 00      cmp b, 0
2489   14E5 C6 FA 14      je _if39_exit
2490   14E8             _if39_true:
2491   14E8             ;; count++; 
2492   14E8 FA FF FF      lea d, [bp + -1] ; $count
2493   14EB 2A            mov b, [d]
2494   14EC FD 79         mov g, b
2495   14EE FD 77         inc b
2496   14F0 FA FF FF      lea d, [bp + -1] ; $count
2497   14F3 FD 43         mov [d], b
2498   14F5 FD 27         mov b, g
2499   14F7 0A FA 14      jmp _if39_exit
2500   14FA             _if39_exit:
2501   14FA             ;; if(currState[i+-1][j+1] == '@') 	count++; 
2502   14FA             _if40_cond:
2503   14FA 3B 65 1B      mov d, _currState_data ; $currState
2504   14FD D7            push a
2505   14FE DA            push d
2506   14FF FA 07 00      lea d, [bp + 7] ; $i
2507   1502 2A            mov b, [d]
2508   1503             ; START TERMS
2509   1503 D7            push a
2510   1504 11            mov a, b
2511   1505 26 01 00      mov b, $1
2512   1508 FD 97         neg b
2513   150A 54            add a, b
2514   150B 27            mov b, a
2515   150C E4            pop a
2516   150D             ; END TERMS
2517   150D E7            pop d
2518   150E FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2519   1512 DA            push d
2520   1513 FA 05 00      lea d, [bp + 5] ; $j
2521   1516 2A            mov b, [d]
2522   1517             ; START TERMS
2523   1517 D7            push a
2524   1518 11            mov a, b
2525   1519 26 01 00      mov b, $1
2526   151C 54            add a, b
2527   151D 27            mov b, a
2528   151E E4            pop a
2529   151F             ; END TERMS
2530   151F E7            pop d
2531   1520 5A            add d, b
2532   1521 E4            pop a
2533   1522 32            mov bl, [d]
2534   1523 A7 00         mov bh, 0
2535   1525             ; START RELATIONAL
2536   1525 D7            push a
2537   1526 11            mov a, b
2538   1527 26 40 00      mov b, $40
2539   152A B0            cmp a, b
2540   152B FD 71         seq ; ==
2541   152D E4            pop a
2542   152E             ; END RELATIONAL
2543   152E C0 00 00      cmp b, 0
2544   1531 C6 46 15      je _if40_exit
2545   1534             _if40_true:
2546   1534             ;; count++; 
2547   1534 FA FF FF      lea d, [bp + -1] ; $count
2548   1537 2A            mov b, [d]
2549   1538 FD 79         mov g, b
2550   153A FD 77         inc b
2551   153C FA FF FF      lea d, [bp + -1] ; $count
2552   153F FD 43         mov [d], b
2553   1541 FD 27         mov b, g
2554   1543 0A 46 15      jmp _if40_exit
2555   1546             _if40_exit:
2556   1546             ;; if(currState[i][j+-1] == '@') 		count++; 
2557   1546             _if41_cond:
2558   1546 3B 65 1B      mov d, _currState_data ; $currState
2559   1549 D7            push a
2560   154A DA            push d
2561   154B FA 07 00      lea d, [bp + 7] ; $i
2562   154E 2A            mov b, [d]
2563   154F E7            pop d
2564   1550 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2565   1554 DA            push d
2566   1555 FA 05 00      lea d, [bp + 5] ; $j
2567   1558 2A            mov b, [d]
2568   1559             ; START TERMS
2569   1559 D7            push a
2570   155A 11            mov a, b
2571   155B 26 01 00      mov b, $1
2572   155E FD 97         neg b
2573   1560 54            add a, b
2574   1561 27            mov b, a
2575   1562 E4            pop a
2576   1563             ; END TERMS
2577   1563 E7            pop d
2578   1564 5A            add d, b
2579   1565 E4            pop a
2580   1566 32            mov bl, [d]
2581   1567 A7 00         mov bh, 0
2582   1569             ; START RELATIONAL
2583   1569 D7            push a
2584   156A 11            mov a, b
2585   156B 26 40 00      mov b, $40
2586   156E B0            cmp a, b
2587   156F FD 71         seq ; ==
2588   1571 E4            pop a
2589   1572             ; END RELATIONAL
2590   1572 C0 00 00      cmp b, 0
2591   1575 C6 8A 15      je _if41_exit
2592   1578             _if41_true:
2593   1578             ;; count++; 
2594   1578 FA FF FF      lea d, [bp + -1] ; $count
2595   157B 2A            mov b, [d]
2596   157C FD 79         mov g, b
2597   157E FD 77         inc b
2598   1580 FA FF FF      lea d, [bp + -1] ; $count
2599   1583 FD 43         mov [d], b
2600   1585 FD 27         mov b, g
2601   1587 0A 8A 15      jmp _if41_exit
2602   158A             _if41_exit:
2603   158A             ;; if(currState[i][j+1] == '@') 			count++; 
2604   158A             _if42_cond:
2605   158A 3B 65 1B      mov d, _currState_data ; $currState
2606   158D D7            push a
2607   158E DA            push d
2608   158F FA 07 00      lea d, [bp + 7] ; $i
2609   1592 2A            mov b, [d]
2610   1593 E7            pop d
2611   1594 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2612   1598 DA            push d
2613   1599 FA 05 00      lea d, [bp + 5] ; $j
2614   159C 2A            mov b, [d]
2615   159D             ; START TERMS
2616   159D D7            push a
2617   159E 11            mov a, b
2618   159F 26 01 00      mov b, $1
2619   15A2 54            add a, b
2620   15A3 27            mov b, a
2621   15A4 E4            pop a
2622   15A5             ; END TERMS
2623   15A5 E7            pop d
2624   15A6 5A            add d, b
2625   15A7 E4            pop a
2626   15A8 32            mov bl, [d]
2627   15A9 A7 00         mov bh, 0
2628   15AB             ; START RELATIONAL
2629   15AB D7            push a
2630   15AC 11            mov a, b
2631   15AD 26 40 00      mov b, $40
2632   15B0 B0            cmp a, b
2633   15B1 FD 71         seq ; ==
2634   15B3 E4            pop a
2635   15B4             ; END RELATIONAL
2636   15B4 C0 00 00      cmp b, 0
2637   15B7 C6 CC 15      je _if42_exit
2638   15BA             _if42_true:
2639   15BA             ;; count++; 
2640   15BA FA FF FF      lea d, [bp + -1] ; $count
2641   15BD 2A            mov b, [d]
2642   15BE FD 79         mov g, b
2643   15C0 FD 77         inc b
2644   15C2 FA FF FF      lea d, [bp + -1] ; $count
2645   15C5 FD 43         mov [d], b
2646   15C7 FD 27         mov b, g
2647   15C9 0A CC 15      jmp _if42_exit
2648   15CC             _if42_exit:
2649   15CC             ;; if(currState[i+1][j+-1] == '@') 	count++; 
2650   15CC             _if43_cond:
2651   15CC 3B 65 1B      mov d, _currState_data ; $currState
2652   15CF D7            push a
2653   15D0 DA            push d
2654   15D1 FA 07 00      lea d, [bp + 7] ; $i
2655   15D4 2A            mov b, [d]
2656   15D5             ; START TERMS
2657   15D5 D7            push a
2658   15D6 11            mov a, b
2659   15D7 26 01 00      mov b, $1
2660   15DA 54            add a, b
2661   15DB 27            mov b, a
2662   15DC E4            pop a
2663   15DD             ; END TERMS
2664   15DD E7            pop d
2665   15DE FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2666   15E2 DA            push d
2667   15E3 FA 05 00      lea d, [bp + 5] ; $j
2668   15E6 2A            mov b, [d]
2669   15E7             ; START TERMS
2670   15E7 D7            push a
2671   15E8 11            mov a, b
2672   15E9 26 01 00      mov b, $1
2673   15EC FD 97         neg b
2674   15EE 54            add a, b
2675   15EF 27            mov b, a
2676   15F0 E4            pop a
2677   15F1             ; END TERMS
2678   15F1 E7            pop d
2679   15F2 5A            add d, b
2680   15F3 E4            pop a
2681   15F4 32            mov bl, [d]
2682   15F5 A7 00         mov bh, 0
2683   15F7             ; START RELATIONAL
2684   15F7 D7            push a
2685   15F8 11            mov a, b
2686   15F9 26 40 00      mov b, $40
2687   15FC B0            cmp a, b
2688   15FD FD 71         seq ; ==
2689   15FF E4            pop a
2690   1600             ; END RELATIONAL
2691   1600 C0 00 00      cmp b, 0
2692   1603 C6 18 16      je _if43_exit
2693   1606             _if43_true:
2694   1606             ;; count++; 
2695   1606 FA FF FF      lea d, [bp + -1] ; $count
2696   1609 2A            mov b, [d]
2697   160A FD 79         mov g, b
2698   160C FD 77         inc b
2699   160E FA FF FF      lea d, [bp + -1] ; $count
2700   1611 FD 43         mov [d], b
2701   1613 FD 27         mov b, g
2702   1615 0A 18 16      jmp _if43_exit
2703   1618             _if43_exit:
2704   1618             ;; if(currState[i+1][j] == '@') 			count++; 
2705   1618             _if44_cond:
2706   1618 3B 65 1B      mov d, _currState_data ; $currState
2707   161B D7            push a
2708   161C DA            push d
2709   161D FA 07 00      lea d, [bp + 7] ; $i
2710   1620 2A            mov b, [d]
2711   1621             ; START TERMS
2712   1621 D7            push a
2713   1622 11            mov a, b
2714   1623 26 01 00      mov b, $1
2715   1626 54            add a, b
2716   1627 27            mov b, a
2717   1628 E4            pop a
2718   1629             ; END TERMS
2719   1629 E7            pop d
2720   162A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2721   162E DA            push d
2722   162F FA 05 00      lea d, [bp + 5] ; $j
2723   1632 2A            mov b, [d]
2724   1633 E7            pop d
2725   1634 5A            add d, b
2726   1635 E4            pop a
2727   1636 32            mov bl, [d]
2728   1637 A7 00         mov bh, 0
2729   1639             ; START RELATIONAL
2730   1639 D7            push a
2731   163A 11            mov a, b
2732   163B 26 40 00      mov b, $40
2733   163E B0            cmp a, b
2734   163F FD 71         seq ; ==
2735   1641 E4            pop a
2736   1642             ; END RELATIONAL
2737   1642 C0 00 00      cmp b, 0
2738   1645 C6 5A 16      je _if44_exit
2739   1648             _if44_true:
2740   1648             ;; count++; 
2741   1648 FA FF FF      lea d, [bp + -1] ; $count
2742   164B 2A            mov b, [d]
2743   164C FD 79         mov g, b
2744   164E FD 77         inc b
2745   1650 FA FF FF      lea d, [bp + -1] ; $count
2746   1653 FD 43         mov [d], b
2747   1655 FD 27         mov b, g
2748   1657 0A 5A 16      jmp _if44_exit
2749   165A             _if44_exit:
2750   165A             ;; if(currState[i+1][j+1] == '@') 		count++; 
2751   165A             _if45_cond:
2752   165A 3B 65 1B      mov d, _currState_data ; $currState
2753   165D D7            push a
2754   165E DA            push d
2755   165F FA 07 00      lea d, [bp + 7] ; $i
2756   1662 2A            mov b, [d]
2757   1663             ; START TERMS
2758   1663 D7            push a
2759   1664 11            mov a, b
2760   1665 26 01 00      mov b, $1
2761   1668 54            add a, b
2762   1669 27            mov b, a
2763   166A E4            pop a
2764   166B             ; END TERMS
2765   166B E7            pop d
2766   166C FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2767   1670 DA            push d
2768   1671 FA 05 00      lea d, [bp + 5] ; $j
2769   1674 2A            mov b, [d]
2770   1675             ; START TERMS
2771   1675 D7            push a
2772   1676 11            mov a, b
2773   1677 26 01 00      mov b, $1
2774   167A 54            add a, b
2775   167B 27            mov b, a
2776   167C E4            pop a
2777   167D             ; END TERMS
2778   167D E7            pop d
2779   167E 5A            add d, b
2780   167F E4            pop a
2781   1680 32            mov bl, [d]
2782   1681 A7 00         mov bh, 0
2783   1683             ; START RELATIONAL
2784   1683 D7            push a
2785   1684 11            mov a, b
2786   1685 26 40 00      mov b, $40
2787   1688 B0            cmp a, b
2788   1689 FD 71         seq ; ==
2789   168B E4            pop a
2790   168C             ; END RELATIONAL
2791   168C C0 00 00      cmp b, 0
2792   168F C6 A4 16      je _if45_exit
2793   1692             _if45_true:
2794   1692             ;; count++; 
2795   1692 FA FF FF      lea d, [bp + -1] ; $count
2796   1695 2A            mov b, [d]
2797   1696 FD 79         mov g, b
2798   1698 FD 77         inc b
2799   169A FA FF FF      lea d, [bp + -1] ; $count
2800   169D FD 43         mov [d], b
2801   169F FD 27         mov b, g
2802   16A1 0A A4 16      jmp _if45_exit
2803   16A4             _if45_exit:
2804   16A4             ;; return count; 
2805   16A4 FA FF FF      lea d, [bp + -1] ; $count
2806   16A7 2A            mov b, [d]
2807   16A8 F9            leave
2808   16A9 09            ret
2809   16AA             ; --- END TEXT BLOCK
2810   16AA             
2811   16AA             ; --- BEGIN DATA BLOCK
2812   16AA             _clear_data: 
2813   16AA 1B 5B 32 4A .db 27,$5b,$32,$4a,27,$5b,$48,0,
2813   16AE 1B 5B 48 00 
2814   16B2 00 00 00    .fill 3, 0
2815   16B5 00 00 00 00 _nextState_data: .fill 1200, 0
2815   16B9 00 00 00 00 
2815   16BD 00 00 00 00 
2815   16C1 00 00 00 00 
2815   16C5 00 00 00 00 
2815   16C9 00 00 00 00 
2815   16CD 00 00 00 00 
2815   16D1 00 00 00 00 
2815   16D5 00 00 00 00 
2815   16D9 00 00 00 00 
2815   16DD 00 00 00 00 
2815   16E1 00 00 00 00 
2815   16E5 00 00 00 00 
2815   16E9 00 00 00 00 
2815   16ED 00 00 00 00 
2815   16F1 00 00 00 00 
2815   16F5 00 00 00 00 
2815   16F9 00 00 00 00 
2815   16FD 00 00 00 00 
2815   1701 00 00 00 00 
2815   1705 00 00 00 00 
2815   1709 00 00 00 00 
2815   170D 00 00 00 00 
2815   1711 00 00 00 00 
2815   1715 00 00 00 00 
2815   1719 00 00 00 00 
2815   171D 00 00 00 00 
2815   1721 00 00 00 00 
2815   1725 00 00 00 00 
2815   1729 00 00 00 00 
2815   172D 00 00 00 00 
2815   1731 00 00 00 00 
2815   1735 00 00 00 00 
2815   1739 00 00 00 00 
2815   173D 00 00 00 00 
2815   1741 00 00 00 00 
2815   1745 00 00 00 00 
2815   1749 00 00 00 00 
2815   174D 00 00 00 00 
2815   1751 00 00 00 00 
2815   1755 00 00 00 00 
2815   1759 00 00 00 00 
2815   175D 00 00 00 00 
2815   1761 00 00 00 00 
2815   1765 00 00 00 00 
2815   1769 00 00 00 00 
2815   176D 00 00 00 00 
2815   1771 00 00 00 00 
2815   1775 00 00 00 00 
2815   1779 00 00 00 00 
2815   177D 00 00 00 00 
2815   1781 00 00 00 00 
2815   1785 00 00 00 00 
2815   1789 00 00 00 00 
2815   178D 00 00 00 00 
2815   1791 00 00 00 00 
2815   1795 00 00 00 00 
2815   1799 00 00 00 00 
2815   179D 00 00 00 00 
2815   17A1 00 00 00 00 
2815   17A5 00 00 00 00 
2815   17A9 00 00 00 00 
2815   17AD 00 00 00 00 
2815   17B1 00 00 00 00 
2815   17B5 00 00 00 00 
2815   17B9 00 00 00 00 
2815   17BD 00 00 00 00 
2815   17C1 00 00 00 00 
2815   17C5 00 00 00 00 
2815   17C9 00 00 00 00 
2815   17CD 00 00 00 00 
2815   17D1 00 00 00 00 
2815   17D5 00 00 00 00 
2815   17D9 00 00 00 00 
2815   17DD 00 00 00 00 
2815   17E1 00 00 00 00 
2815   17E5 00 00 00 00 
2815   17E9 00 00 00 00 
2815   17ED 00 00 00 00 
2815   17F1 00 00 00 00 
2815   17F5 00 00 00 00 
2815   17F9 00 00 00 00 
2815   17FD 00 00 00 00 
2815   1801 00 00 00 00 
2815   1805 00 00 00 00 
2815   1809 00 00 00 00 
2815   180D 00 00 00 00 
2815   1811 00 00 00 00 
2815   1815 00 00 00 00 
2815   1819 00 00 00 00 
2815   181D 00 00 00 00 
2815   1821 00 00 00 00 
2815   1825 00 00 00 00 
2815   1829 00 00 00 00 
2815   182D 00 00 00 00 
2815   1831 00 00 00 00 
2815   1835 00 00 00 00 
2815   1839 00 00 00 00 
2815   183D 00 00 00 00 
2815   1841 00 00 00 00 
2815   1845 00 00 00 00 
2815   1849 00 00 00 00 
2815   184D 00 00 00 00 
2815   1851 00 00 00 00 
2815   1855 00 00 00 00 
2815   1859 00 00 00 00 
2815   185D 00 00 00 00 
2815   1861 00 00 00 00 
2815   1865 00 00 00 00 
2815   1869 00 00 00 00 
2815   186D 00 00 00 00 
2815   1871 00 00 00 00 
2815   1875 00 00 00 00 
2815   1879 00 00 00 00 
2815   187D 00 00 00 00 
2815   1881 00 00 00 00 
2815   1885 00 00 00 00 
2815   1889 00 00 00 00 
2815   188D 00 00 00 00 
2815   1891 00 00 00 00 
2815   1895 00 00 00 00 
2815   1899 00 00 00 00 
2815   189D 00 00 00 00 
2815   18A1 00 00 00 00 
2815   18A5 00 00 00 00 
2815   18A9 00 00 00 00 
2815   18AD 00 00 00 00 
2815   18B1 00 00 00 00 
2815   18B5 00 00 00 00 
2815   18B9 00 00 00 00 
2815   18BD 00 00 00 00 
2815   18C1 00 00 00 00 
2815   18C5 00 00 00 00 
2815   18C9 00 00 00 00 
2815   18CD 00 00 00 00 
2815   18D1 00 00 00 00 
2815   18D5 00 00 00 00 
2815   18D9 00 00 00 00 
2815   18DD 00 00 00 00 
2815   18E1 00 00 00 00 
2815   18E5 00 00 00 00 
2815   18E9 00 00 00 00 
2815   18ED 00 00 00 00 
2815   18F1 00 00 00 00 
2815   18F5 00 00 00 00 
2815   18F9 00 00 00 00 
2815   18FD 00 00 00 00 
2815   1901 00 00 00 00 
2815   1905 00 00 00 00 
2815   1909 00 00 00 00 
2815   190D 00 00 00 00 
2815   1911 00 00 00 00 
2815   1915 00 00 00 00 
2815   1919 00 00 00 00 
2815   191D 00 00 00 00 
2815   1921 00 00 00 00 
2815   1925 00 00 00 00 
2815   1929 00 00 00 00 
2815   192D 00 00 00 00 
2815   1931 00 00 00 00 
2815   1935 00 00 00 00 
2815   1939 00 00 00 00 
2815   193D 00 00 00 00 
2815   1941 00 00 00 00 
2815   1945 00 00 00 00 
2815   1949 00 00 00 00 
2815   194D 00 00 00 00 
2815   1951 00 00 00 00 
2815   1955 00 00 00 00 
2815   1959 00 00 00 00 
2815   195D 00 00 00 00 
2815   1961 00 00 00 00 
2815   1965 00 00 00 00 
2815   1969 00 00 00 00 
2815   196D 00 00 00 00 
2815   1971 00 00 00 00 
2815   1975 00 00 00 00 
2815   1979 00 00 00 00 
2815   197D 00 00 00 00 
2815   1981 00 00 00 00 
2815   1985 00 00 00 00 
2815   1989 00 00 00 00 
2815   198D 00 00 00 00 
2815   1991 00 00 00 00 
2815   1995 00 00 00 00 
2815   1999 00 00 00 00 
2815   199D 00 00 00 00 
2815   19A1 00 00 00 00 
2815   19A5 00 00 00 00 
2815   19A9 00 00 00 00 
2815   19AD 00 00 00 00 
2815   19B1 00 00 00 00 
2815   19B5 00 00 00 00 
2815   19B9 00 00 00 00 
2815   19BD 00 00 00 00 
2815   19C1 00 00 00 00 
2815   19C5 00 00 00 00 
2815   19C9 00 00 00 00 
2815   19CD 00 00 00 00 
2815   19D1 00 00 00 00 
2815   19D5 00 00 00 00 
2815   19D9 00 00 00 00 
2815   19DD 00 00 00 00 
2815   19E1 00 00 00 00 
2815   19E5 00 00 00 00 
2815   19E9 00 00 00 00 
2815   19ED 00 00 00 00 
2815   19F1 00 00 00 00 
2815   19F5 00 00 00 00 
2815   19F9 00 00 00 00 
2815   19FD 00 00 00 00 
2815   1A01 00 00 00 00 
2815   1A05 00 00 00 00 
2815   1A09 00 00 00 00 
2815   1A0D 00 00 00 00 
2815   1A11 00 00 00 00 
2815   1A15 00 00 00 00 
2815   1A19 00 00 00 00 
2815   1A1D 00 00 00 00 
2815   1A21 00 00 00 00 
2815   1A25 00 00 00 00 
2815   1A29 00 00 00 00 
2815   1A2D 00 00 00 00 
2815   1A31 00 00 00 00 
2815   1A35 00 00 00 00 
2815   1A39 00 00 00 00 
2815   1A3D 00 00 00 00 
2815   1A41 00 00 00 00 
2815   1A45 00 00 00 00 
2815   1A49 00 00 00 00 
2815   1A4D 00 00 00 00 
2815   1A51 00 00 00 00 
2815   1A55 00 00 00 00 
2815   1A59 00 00 00 00 
2815   1A5D 00 00 00 00 
2815   1A61 00 00 00 00 
2815   1A65 00 00 00 00 
2815   1A69 00 00 00 00 
2815   1A6D 00 00 00 00 
2815   1A71 00 00 00 00 
2815   1A75 00 00 00 00 
2815   1A79 00 00 00 00 
2815   1A7D 00 00 00 00 
2815   1A81 00 00 00 00 
2815   1A85 00 00 00 00 
2815   1A89 00 00 00 00 
2815   1A8D 00 00 00 00 
2815   1A91 00 00 00 00 
2815   1A95 00 00 00 00 
2815   1A99 00 00 00 00 
2815   1A9D 00 00 00 00 
2815   1AA1 00 00 00 00 
2815   1AA5 00 00 00 00 
2815   1AA9 00 00 00 00 
2815   1AAD 00 00 00 00 
2815   1AB1 00 00 00 00 
2815   1AB5 00 00 00 00 
2815   1AB9 00 00 00 00 
2815   1ABD 00 00 00 00 
2815   1AC1 00 00 00 00 
2815   1AC5 00 00 00 00 
2815   1AC9 00 00 00 00 
2815   1ACD 00 00 00 00 
2815   1AD1 00 00 00 00 
2815   1AD5 00 00 00 00 
2815   1AD9 00 00 00 00 
2815   1ADD 00 00 00 00 
2815   1AE1 00 00 00 00 
2815   1AE5 00 00 00 00 
2815   1AE9 00 00 00 00 
2815   1AED 00 00 00 00 
2815   1AF1 00 00 00 00 
2815   1AF5 00 00 00 00 
2815   1AF9 00 00 00 00 
2815   1AFD 00 00 00 00 
2815   1B01 00 00 00 00 
2815   1B05 00 00 00 00 
2815   1B09 00 00 00 00 
2815   1B0D 00 00 00 00 
2815   1B11 00 00 00 00 
2815   1B15 00 00 00 00 
2815   1B19 00 00 00 00 
2815   1B1D 00 00 00 00 
2815   1B21 00 00 00 00 
2815   1B25 00 00 00 00 
2815   1B29 00 00 00 00 
2815   1B2D 00 00 00 00 
2815   1B31 00 00 00 00 
2815   1B35 00 00 00 00 
2815   1B39 00 00 00 00 
2815   1B3D 00 00 00 00 
2815   1B41 00 00 00 00 
2815   1B45 00 00 00 00 
2815   1B49 00 00 00 00 
2815   1B4D 00 00 00 00 
2815   1B51 00 00 00 00 
2815   1B55 00 00 00 00 
2815   1B59 00 00 00 00 
2815   1B5D 00 00 00 00 
2815   1B61 00 00 00 00 
2816   1B65             _currState_data: 
2817   1B65 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2817   1B69 20 20 20 20 
2817   1B6D 20 20 20 20 
2817   1B71 20 20 20 20 
2817   1B75 20 20 20 20 
2817   1B79 20 20 20 20 
2817   1B7D 20 20 20 20 
2817   1B81 20 20 
2818   1B83 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2818   1B87 20 20 20 20 
2818   1B8B 20 20 20 20 
2818   1B8F 20 20 20 20 
2818   1B93 20 20 20 20 
2818   1B97 20 20 20 20 
2818   1B9B 20 20 20 20 
2818   1B9F 20 20 
2819   1BA1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2819   1BA5 20 20 20 20 
2819   1BA9 20 20 20 20 
2819   1BAD 20 20 20 20 
2819   1BB1 20 20 20 20 
2819   1BB5 20 20 20 20 
2819   1BB9 20 20 20 20 
2819   1BBD 20 20 
2820   1BBF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2820   1BC3 20 20 20 20 
2820   1BC7 20 20 20 20 
2820   1BCB 20 20 20 20 
2820   1BCF 20 20 20 20 
2820   1BD3 20 20 20 20 
2820   1BD7 20 20 20 20 
2820   1BDB 20 20 
2821   1BDD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2821   1BE1 20 20 20 20 
2821   1BE5 20 20 20 20 
2821   1BE9 20 20 20 20 
2821   1BED 20 20 20 20 
2821   1BF1 20 20 20 20 
2821   1BF5 20 20 20 40 
2821   1BF9 20 20 
2822   1BFB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2822   1BFF 20 20 20 20 
2822   1C03 20 20 20 20 
2822   1C07 20 20 20 20 
2822   1C0B 20 20 20 20 
2822   1C0F 20 20 20 20 
2822   1C13 20 20 20 20 
2822   1C17 20 20 
2823   1C19 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2823   1C1D 20 40 20 40 
2823   1C21 20 20 20 20 
2823   1C25 20 20 20 20 
2823   1C29 20 20 20 20 
2823   1C2D 20 20 20 20 
2823   1C31 20 20 20 20 
2823   1C35 20 20 
2824   1C37 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
2824   1C3B 20 40 40 20 
2824   1C3F 20 20 20 20 
2824   1C43 20 40 40 20 
2824   1C47 20 20 20 20 
2824   1C4B 20 20 20 20 
2824   1C4F 20 20 20 40 
2824   1C53 40 20 
2825   1C55 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2825   1C59 20 20 20 20 
2825   1C5D 20 20 20 20 
2825   1C61 20 20 40 20 
2825   1C65 20 20 40 20 
2825   1C69 20 20 20 40 
2825   1C6D 40 20 20 20 
2825   1C71 20 20 
2826   1C73 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
2826   1C77 20 20 20 40 
2826   1C7B 40 20 20 20 
2826   1C7F 20 40 40 20 
2826   1C83 20 20 20 20 
2826   1C87 20 20 20 40 
2826   1C8B 20 20 20 20 
2826   1C8F 20 40 
2827   1C91 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2827   1C95 40 20 20 20 
2827   1C99 20 20 20 20 
2827   1C9D 20 20 20 20 
2827   1CA1 20 20 20 20 
2827   1CA5 20 20 20 40 
2827   1CA9 40 20 20 20 
2827   1CAD 20 20 
2828   1CAF 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2828   1CB3 20 20 20 40 
2828   1CB7 20 40 40 20 
2828   1CBB 20 20 20 40 
2828   1CBF 20 40 20 20 
2828   1CC3 20 20 20 20 
2828   1CC7 20 20 20 20 
2828   1CCB 20 20 
2829   1CCD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2829   1CD1 20 20 20 20 
2829   1CD5 20 20 20 20 
2829   1CD9 20 40 20 20 
2829   1CDD 20 20 20 40 
2829   1CE1 20 20 20 20 
2829   1CE5 20 20 20 40 
2829   1CE9 20 20 
2830   1CEB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
2830   1CEF 20 20 20 20 
2830   1CF3 20 20 20 20 
2830   1CF7 20 20 20 20 
2830   1CFB 20 20 20 20 
2830   1CFF 20 20 20 20 
2830   1D03 40 20 20 20 
2830   1D07 40 20 
2831   1D09 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2831   1D0D 20 20 20 20 
2831   1D11 20 20 20 20 
2831   1D15 20 20 20 20 
2831   1D19 20 20 20 20 
2831   1D1D 20 20 20 20 
2831   1D21 20 20 20 20 
2831   1D25 20 20 
2832   1D27 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2832   1D2B 20 40 40 20 
2832   1D2F 20 20 20 20 
2832   1D33 20 20 20 20 
2832   1D37 20 20 20 20 
2832   1D3B 20 20 20 20 
2832   1D3F 20 20 20 20 
2832   1D43 20 20 
2833   1D45 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2833   1D49 20 20 20 20 
2833   1D4D 20 20 20 20 
2833   1D51 20 20 20 20 
2833   1D55 20 20 20 20 
2833   1D59 20 20 20 20 
2833   1D5D 20 20 20 20 
2833   1D61 20 20 
2834   1D63 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2834   1D67 20 20 20 20 
2834   1D6B 20 20 20 20 
2834   1D6F 20 20 20 20 
2834   1D73 20 20 20 20 
2834   1D77 20 20 20 20 
2834   1D7B 20 20 20 20 
2834   1D7F 20 20 
2835   1D81 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2835   1D85 20 20 20 20 
2835   1D89 20 20 20 20 
2835   1D8D 20 20 20 20 
2835   1D91 20 20 20 20 
2835   1D95 20 20 20 20 
2835   1D99 20 20 20 20 
2835   1D9D 20 20 
2836   1D9F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2836   1DA3 20 20 20 20 
2836   1DA7 20 20 20 20 
2836   1DAB 20 20 20 20 
2836   1DAF 20 20 20 20 
2836   1DB3 20 20 20 20 
2836   1DB7 20 20 20 20 
2836   1DBB 20 20 
2837   1DBD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2837   1DC1 20 20 20 20 
2837   1DC5 20 20 20 20 
2837   1DC9 20 20 20 20 
2837   1DCD 20 20 20 20 
2837   1DD1 20 20 20 20 
2837   1DD5 20 20 20 20 
2837   1DD9 20 20 
2838   1DDB 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2838   1DDF 20 20 20 20 
2838   1DE3 20 20 20 20 
2838   1DE7 20 20 20 20 
2838   1DEB 20 20 20 20 
2838   1DEF 20 20 20 20 
2838   1DF3 20 20 20 20 
2838   1DF7 20 20 
2839   1DF9 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2839   1DFD 20 20 20 20 
2839   1E01 20 20 20 20 
2839   1E05 20 20 20 20 
2839   1E09 20 20 20 20 
2839   1E0D 20 20 20 20 
2839   1E11 20 20 20 20 
2839   1E15 20 20 
2840   1E17 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2840   1E1B 20 20 20 20 
2840   1E1F 20 20 20 20 
2840   1E23 20 20 20 20 
2840   1E27 20 20 20 20 
2840   1E2B 20 20 20 20 
2840   1E2F 20 20 20 20 
2840   1E33 20 20 
2841   1E35 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2841   1E39 20 20 20 20 
2841   1E3D 20 20 20 20 
2841   1E41 20 20 20 20 
2841   1E45 20 20 20 20 
2841   1E49 20 20 20 20 
2841   1E4D 20 20 20 20 
2841   1E51 20 20 
2842   1E53 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2842   1E57 20 20 20 20 
2842   1E5B 20 20 20 20 
2842   1E5F 20 20 20 20 
2842   1E63 20 20 20 20 
2842   1E67 20 20 20 20 
2842   1E6B 20 20 20 20 
2842   1E6F 20 20 
2843   1E71 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2843   1E75 20 20 20 20 
2843   1E79 20 20 20 20 
2843   1E7D 20 20 20 20 
2843   1E81 20 20 20 20 
2844   1E85 00 00 00 00 .fill 400, 0
2844   1E89 00 00 00 00 
2844   1E8D 00 00 00 00 
2844   1E91 00 00 00 00 
2844   1E95 00 00 00 00 
2844   1E99 00 00 00 00 
2844   1E9D 00 00 00 00 
2844   1EA1 00 00 00 00 
2844   1EA5 00 00 00 00 
2844   1EA9 00 00 00 00 
2844   1EAD 00 00 00 00 
2844   1EB1 00 00 00 00 
2844   1EB5 00 00 00 00 
2844   1EB9 00 00 00 00 
2844   1EBD 00 00 00 00 
2844   1EC1 00 00 00 00 
2844   1EC5 00 00 00 00 
2844   1EC9 00 00 00 00 
2844   1ECD 00 00 00 00 
2844   1ED1 00 00 00 00 
2844   1ED5 00 00 00 00 
2844   1ED9 00 00 00 00 
2844   1EDD 00 00 00 00 
2844   1EE1 00 00 00 00 
2844   1EE5 00 00 00 00 
2844   1EE9 00 00 00 00 
2844   1EED 00 00 00 00 
2844   1EF1 00 00 00 00 
2844   1EF5 00 00 00 00 
2844   1EF9 00 00 00 00 
2844   1EFD 00 00 00 00 
2844   1F01 00 00 00 00 
2844   1F05 00 00 00 00 
2844   1F09 00 00 00 00 
2844   1F0D 00 00 00 00 
2844   1F11 00 00 00 00 
2844   1F15 00 00 00 00 
2844   1F19 00 00 00 00 
2844   1F1D 00 00 00 00 
2844   1F21 00 00 00 00 
2844   1F25 00 00 00 00 
2844   1F29 00 00 00 00 
2844   1F2D 00 00 00 00 
2844   1F31 00 00 00 00 
2844   1F35 00 00 00 00 
2844   1F39 00 00 00 00 
2844   1F3D 00 00 00 00 
2844   1F41 00 00 00 00 
2844   1F45 00 00 00 00 
2844   1F49 00 00 00 00 
2844   1F4D 00 00 00 00 
2844   1F51 00 00 00 00 
2844   1F55 00 00 00 00 
2844   1F59 00 00 00 00 
2844   1F5D 00 00 00 00 
2844   1F61 00 00 00 00 
2844   1F65 00 00 00 00 
2844   1F69 00 00 00 00 
2844   1F6D 00 00 00 00 
2844   1F71 00 00 00 00 
2844   1F75 00 00 00 00 
2844   1F79 00 00 00 00 
2844   1F7D 00 00 00 00 
2844   1F81 00 00 00 00 
2844   1F85 00 00 00 00 
2844   1F89 00 00 00 00 
2844   1F8D 00 00 00 00 
2844   1F91 00 00 00 00 
2844   1F95 00 00 00 00 
2844   1F99 00 00 00 00 
2844   1F9D 00 00 00 00 
2844   1FA1 00 00 00 00 
2844   1FA5 00 00 00 00 
2844   1FA9 00 00 00 00 
2844   1FAD 00 00 00 00 
2844   1FB1 00 00 00 00 
2844   1FB5 00 00 00 00 
2844   1FB9 00 00 00 00 
2844   1FBD 00 00 00 00 
2844   1FC1 00 00 00 00 
2844   1FC5 00 00 00 00 
2844   1FC9 00 00 00 00 
2844   1FCD 00 00 00 00 
2844   1FD1 00 00 00 00 
2844   1FD5 00 00 00 00 
2844   1FD9 00 00 00 00 
2844   1FDD 00 00 00 00 
2844   1FE1 00 00 00 00 
2844   1FE5 00 00 00 00 
2844   1FE9 00 00 00 00 
2844   1FED 00 00 00 00 
2844   1FF1 00 00 00 00 
2844   1FF5 00 00 00 00 
2844   1FF9 00 00 00 00 
2844   1FFD 00 00 00 00 
2844   2001 00 00 00 00 
2844   2005 00 00 00 00 
2844   2009 00 00 00 00 
2844   200D 00 00 00 00 
2844   2011 00 00 00 00 
2845   2015 55 6E 6B 6E __s0: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
2845   2019 6F 77 6E 20 
2845   201D 74 79 70 65 
2845   2021 20 73 69 7A 
2845   2025 65 20 69 6E 
2845   2029 20 76 61 5F 
2845   202D 61 72 67 28 
2845   2031 29 20 63 61 
2845   2035 6C 6C 2E 20 
2845   2039 53 69 7A 65 
2845   203D 20 6E 65 65 
2845   2041 64 73 20 74 
2845   2045 6F 20 62 65 
2845   2049 20 65 69 74 
2845   204D 68 65 72 20 
2845   2051 31 20 6F 72 
2845   2055 20 32 2E 00 
2846   2059 45 72 72 6F __s1: .db "Error: Unknown argument type.\n", 0
2846   205D 72 3A 20 55 
2846   2061 6E 6B 6E 6F 
2846   2065 77 6E 20 61 
2846   2069 72 67 75 6D 
2846   206D 65 6E 74 20 
2846   2071 74 79 70 65 
2846   2075 2E 0A 00 
2847   2078 1B 5B 32 4A __s2: .db "\033[2J\033[H", 0
2847   207C 1B 5B 48 00 
2848   2080 40 20 00    __s3: .db "@ ", 0
2849   2083 2E 20 00    __s4: .db ". ", 0
2850   2086             
2851   2086 88 20       _heap_top: .dw _heap
2852   2088 00          _heap: .db 0
2853   2089             ; --- END DATA BLOCK
2854   2089             
2855   2089             .end
tasm: Number of errors = 0
